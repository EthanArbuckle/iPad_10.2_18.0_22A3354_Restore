void EncodeBasicBlock_4x4(uint64_t a1, int8x16_t *a2, float *a3, float32x4_t *a4)
{
  uint64_t v7;
  int32x4_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int32x4_t v26;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x2_t *v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t *v86;
  float32x4_t v87;
  float32x4_t v88;
  int v89;
  int8x16_t v90;
  uint64_t v91;
  float32x4_t v92;
  float32x4_t v93;
  int8x16_t v94;
  int8x16_t v95;
  float32x2_t v96;
  uint64_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  int8x16_t v140;
  float32x4_t v141;
  int8x16_t v142;
  float32x4_t v143;
  int8x16_t v144;
  int8x16_t v145;
  float32x2_t v146;
  int32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  int16x8_t v182;
  uint8x8_t v183;
  uint64_t v184;
  unint64_t v185;
  int32x2_t v186;
  float32x4_t v187;
  int8x16_t v188;
  int8x16_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  int16x8_t v234;
  int16x8_t v235;
  int16x8_t v236;
  int16x8_t v237;
  int16x8_t v238;
  uint8x8_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  float32x4_t v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  int8x16_t v250;
  int8x16_t v251;
  int8x16_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  int8x16_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  int16x8_t v265;
  int16x8_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  unsigned __int16 v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  int8x16_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x2_t *v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  int32x2_t v332;
  int8x16_t v333;
  int32x2_t v334;
  float v335;
  float32x4_t *v336;
  float32x4_t v337;
  float32x4_t *v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  int8x16_t v365;
  float32x4_t v366;
  float32x4_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  float32x2_t v372;
  uint64_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float v380;
  float v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  int8x16_t v394;
  float32x4_t v395;
  float32x4_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  int8x16_t v400;
  float32x2_t v401;
  uint64_t v402;
  const float *v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  int16x8_t v418;
  float32x4_t v419;
  float32x2_t v420;
  float32x4_t v421;
  float32x4_t v422;
  int8x16_t v423;
  float32x4_t *v424;
  float32x4_t v425;
  unint64_t v426;
  unsigned int v427;
  float32x4_t v428;
  float v429;
  float v430;
  int32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  int8x16_t *v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  int8x16_t v459;
  float v460;
  float v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float v467;
  float v468;
  float v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  int8x16_t v493;
  float v494;
  float32x4_t v495;
  uint64_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  const float *v500;
  float32x4_t v501;
  uint64_t v502;
  uint64_t v503;
  float32x4_t *v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  int v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  float32x4_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  int8x16_t v545;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  float32x4_t v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  unsigned __int8 v590;
  uint64_t v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  int8x16_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  int8x16_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  uint64_t v693;
  unsigned __int8 v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  int32x4_t v703;
  int32x4_t v704;
  int32x4_t v705;
  int32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  int32x4_t v709;
  int32x4_t v710;
  int32x4_t v711;
  int32x4_t v712;
  float32x4_t v713;
  float32x4_t v714;
  int8x16_t v715;
  float32x4_t v716;
  int8x16_t v717;
  float32x4_t v718;
  float32x4_t v719;
  int16x8_t v720;
  unint64_t v721;
  float32x4_t v722;
  float32x4_t v723;
  unsigned int v724;
  uint64_t v725;
  uint64_t v726;
  int v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  float32x4_t *v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  float32x4_t v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  const float *v741;
  float32x4_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  float32x4_t v752;
  float32x4_t v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x2_t *v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  float32x4_t v770;
  float32x4_t v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  float32x4_t v782;
  float32x4_t v783;
  float32x4_t v784;
  float32x4_t v785;
  const float *v786;
  float32x4_t v787;
  float32x4_t v788;
  int8x16_t v789;
  int8x16_t v790;
  int8x16_t v791;
  int8x16_t v792;
  float32x4_t v793;
  __int32 v794;
  float32x4_t v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  int8x16_t v799;
  float32x4_t v800;
  float32x4_t v801;
  int8x16_t v802;
  int8x16_t v803;
  int8x16_t v804;
  int8x16_t v805;
  float32x2_t v806;
  float32x4_t v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  int8x16_t v811;
  float32x4_t v812;
  float32x4_t v813;
  float32x4_t v814;
  float32x4_t v815;
  int8x16_t v816;
  int16x8_t v817;
  int16x8_t v818;
  int8x16_t v819;
  int8x16_t v820;
  float32x4_t v821;
  int8x16_t v822;
  int16x8_t v823;
  int16x8_t v824;
  int8x16_t v825;
  float32x4_t v826;
  int8x16_t v827;
  int8x16_t v828;
  float32x4_t v829;
  int8x16_t v830;
  int8x16_t v831;
  float32x4_t v832;
  float32x4_t v833;
  int8x16_t v834;
  float32x4_t v835;
  int8x16_t v836;
  int8x16_t v837;
  int8x16_t v838;
  int32x4_t v839;
  float32x4_t v840;
  int8x16_t v841;
  float32x4_t v842;
  float32x4_t v843;
  float32x4_t v844;
  float32x4_t v845;
  float32x4_t v846;
  float32x4_t v847;
  float32x4_t v848;
  float32x4_t v849;
  float32x4_t v850;
  int8x16_t v851;
  int8x16_t v852;
  int32x4_t v853;
  __int32 v854;
  int8x16_t v855;
  int8x16_t v856;
  int8x16_t v857;
  int8x16_t v858;
  int8x16_t v859;
  float32x4_t v860;
  float32x4_t v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  float32x4_t v865;
  int32x4_t v866;
  float32x4_t v867;
  float32x4_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t v871;
  float32x4_t v872;
  float32x4_t v873;
  float32x4_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  float32x4_t v878;
  float32x4_t v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  float32x4_t v884;
  float32x4_t v885;
  float32x4_t v886;
  float32x4_t v887;
  float32x4_t v888;
  float32x4_t v889;
  float32x4_t v890;
  float32x4_t v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  float32x4_t v896;
  float32x4_t v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  float32x4_t v902;
  float32x4_t v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  float32x4_t v908;
  float32x4_t v909;
  float32x4_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  float32x4_t v914;
  float32x4_t v915;
  float32x4_t v916;
  unint64_t v917;
  float v918;
  int32x2_t v919;
  int8x16_t v920;
  int8x16_t v921;
  float32x4_t v922;
  float32x4_t v924;
  float32x4_t v925;
  float32x4_t v926;
  float32x4_t v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  float32x4_t v932;
  float32x4_t v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t *v937;
  float32x4_t v938;
  float32x4_t v939;
  float32x4_t v940;
  float32x4_t v941;
  float32x4_t v942;
  float32x4_t v943;
  int16x8_t v944;
  int16x8_t v945;
  int16x8_t v946;
  int v947;
  uint16x4_t v948;
  int16x8_t v949;
  unsigned __int16 v950;
  int8x16_t v951;
  int8x16_t v952;
  int8x16_t v953;
  int8x16_t v954;
  float32x4_t v955;
  float32x4_t v956;
  float32x4_t v957;
  float32x4_t v958;
  int16x8_t v959;
  int16x8_t v960;
  int16x8_t v961;
  int16x8_t v962;
  int16x8_t v963;
  unsigned __int16 v964;
  float32x4_t v965;
  float32x4_t *v966;
  float32x4_t v967;
  float32x4_t v968;
  float32x4_t v969;
  float32x4_t v970;
  int16x8_t v971;
  int16x8_t v972;
  int16x8_t v973;
  int16x8_t v974;
  int16x8_t v975;
  unsigned __int16 v976;
  int8x16_t v977;
  int8x16_t v978;
  int8x16_t v979;
  int8x16_t v980;
  float32x4_t v981;
  float32x4_t v982;
  int16x8_t v983;
  float32x4_t v984;
  int16x8_t v985;
  int16x8_t v986;
  float32x4_t v987;
  unsigned __int16 v988;
  float32x4_t v989;
  float32x4_t v990;
  int8x16_t v991;
  int8x16_t v992;
  int8x16_t v993;
  float32x4_t v994;
  float32x4_t v995;
  float v996;
  float32x4_t v997;
  float32x4_t v998;
  float32x4_t v999;
  int8x16_t v1000;
  int8x16_t v1001;
  float32x2_t v1002;
  int8x16_t v1003;
  float32x4_t v1004;
  float32x4_t v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  float32x4_t v1010;
  float32x4_t v1011;
  float32x4_t v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  float32x4_t v1016;
  float32x4_t v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  float32x4_t v1022;
  float32x4_t v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  int8x16_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  int8x16_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  int8x16_t v1033;
  int8x16_t v1034;
  float32x4_t v1035;
  int8x16_t v1036;
  float32x4_t v1037;
  float32x4_t *v1038;
  int16x8_t v1039;
  int16x8_t v1040;
  int16x8_t v1041;
  int16x8_t v1042;
  int16x8_t v1043;
  uint8x8_t v1044;
  float32x4_t v1045;
  float32x4_t v1046;
  float32x4_t v1047;
  float32x4_t v1048;
  int16x8_t v1049;
  int16x8_t v1050;
  int16x8_t v1051;
  int16x8_t v1052;
  int16x8_t v1053;
  uint8x8_t v1054;
  float32x4_t *v1055;
  float32x4_t v1056;
  float32x4_t v1057;
  float32x4_t v1058;
  float32x4_t v1059;
  float32x4_t v1060;
  float32x4_t v1061;
  float32x4_t v1062;
  float32x4_t v1063;
  float32x4_t v1064;
  float32x4_t v1065;
  int8x16_t v1066;
  float32x2_t v1067;
  float32x4_t v1068;
  float32x4_t v1069;
  float32x4_t v1070;
  float32x4_t v1071;
  float32x4_t v1072;
  float32x4_t v1073;
  float32x4_t v1074;
  float32x4_t v1075;
  float32x4_t v1076;
  float32x4_t v1077;
  float32x4_t v1078;
  float32x4_t v1079;
  float32x4_t v1080;
  float32x4_t v1081;
  float32x4_t v1082;
  float32x4_t v1083;
  float32x4_t v1085;
  float32x4_t v1086;
  float32x4_t v1087;
  float32x4_t v1088;
  float32x4_t v1089;
  float32x4_t v1090;
  float v1091;
  float32x4_t *v1092;
  float32x4_t v1093;
  float32x4_t v1094;
  float32x4_t v1095;
  float32x4_t v1096;
  int32x4_t v1097;
  float v1098;
  float v1099;
  const float *v1100;
  float32x4_t v1101;
  float32x4_t v1102;
  uint64_t v1103;
  float32x4_t v1104;
  float32x4_t v1105;
  float32x4_t v1106;
  float32x4_t v1107;
  float32x4_t v1108;
  float v1109;
  float32x4_t v1110;
  int32x4_t v1111;
  int32x4_t v1112;
  int32x4_t v1113;
  int32x4_t v1114;
  float32x4_t v1115;
  int32x4_t v1116;
  float32x4_t v1117;
  float32x4_t *v1118;
  uint64_t v1119;
  uint64_t v1120;
  int v1121;
  float32x4_t *v1122;
  float32x4_t v1123;
  float32x4_t v1124;
  float32x4_t v1125;
  float32x4_t v1126;
  float32x4_t *v1127;
  float32x4_t v1128;
  float32x4_t v1129;
  float32x4_t v1130;
  float32x4_t v1131;
  float32x4_t *v1132;
  float32x4_t v1133;
  float32x4_t v1134;
  float32x4_t v1135;
  float32x4_t v1136;
  float32x4_t *v1137;
  float32x4_t v1138;
  float32x4_t v1139;
  float32x4_t v1140;
  float32x4_t v1141;
  float32x4_t v1142;
  float32x4_t v1143;
  float32x4_t v1144;
  float32x4_t v1145;
  float32x4_t v1146;
  float32x4_t v1147;
  float32x4_t v1148;
  float32x4_t v1149;
  float32x4_t v1150;
  int8x16_t v1151;
  float32x4_t v1153;
  float32x4_t v1154;
  float32x4_t v1155;
  float32x4_t v1156;
  float32x4_t v1157;
  float32x4_t v1158;
  float32x4_t v1159;
  float32x4_t v1160;
  float32x4_t v1161;
  float32x4_t v1162;
  float32x4_t v1163;
  float32x4_t v1164;
  float32x4_t v1165;
  float32x4_t v1166;
  float32x4_t v1167;
  float32x4_t v1168;
  float32x4_t v1169;
  uint64_t v1170;
  float32x4_t v1171;
  float32x4_t v1172;
  float32x4_t v1173;
  float32x4_t v1174;
  float32x4_t v1175;
  float32x4_t v1176;
  float32x4_t v1177;
  float32x4_t v1178;
  float32x4_t v1179;
  float32x4_t v1180;
  float32x4_t v1181;
  float32x4_t v1182;
  float32x4_t v1183;
  float32x4_t v1184;
  float32x4_t v1185;
  float32x4_t v1186;
  float32x4_t v1187;
  float32x4_t v1188;
  float32x4_t v1189;
  int32x4_t v1190;
  float32x4_t v1191;
  int32x4_t v1192;
  float32x4_t v1193;
  float32x4_t v1194;
  float32x4_t v1195;
  int32x4_t v1196;
  float32x4_t v1197;
  float32x4_t v1198;
  float32x4_t v1199;
  float32x4_t v1200;
  float32x4_t v1201;
  float32x4_t v1202;
  float32x4_t v1203;
  float32x4_t v1204;
  float32x4_t v1205;
  float32x4_t v1206;
  float32x4_t v1207;
  float32x4_t v1208;
  float32x4_t v1209;
  float32x4_t v1210;
  float32x4_t v1211;
  float32x4_t v1212;
  float32x4_t v1213;
  float32x4_t v1214;
  float32x4_t v1215;
  float32x4_t v1216;
  float32x4_t v1217;
  float32x4_t v1218;
  float32x4_t v1219;
  float32x4_t *v1220;
  float32x4_t v1221;
  float32x4_t v1222;
  float32x4_t *v1223;
  float32x4_t *v1224;
  float32x4_t *v1225;
  float32x4_t v1226;
  float32x4_t v1227;
  float32x4_t v1228;
  float32x4_t v1229;
  float32x4_t v1230;
  float32x4_t v1231;
  float32x4_t v1232;
  float32x4_t v1233;
  int8x16_t v1234;
  float32x4_t v1236;
  float32x4_t v1237;
  float32x4_t v1238;
  float32x4_t v1239;
  float32x4_t v1240;
  float32x4_t v1241;
  float32x4_t v1242;
  float32x4_t v1243;
  float32x4_t v1244;
  float32x4_t v1245;
  float32x2_t v1246;
  float v1247;
  float v1248;
  int8x16_t v1249;
  int8x16_t v1250;
  unsigned int v1251;
  unint64_t v1252;
  unsigned int v1253;
  unsigned int v1254;
  unsigned __int8 v1255;
  unsigned int v1256;
  uint64_t v1257;
  unsigned int v1258;
  int v1259;
  int16x8_t v1260;
  uint16x8_t v1261;
  unsigned int v1262;
  int8x16_t v1263;
  int16x8_t v1264;
  int16x8_t v1265;
  int16x8_t v1266;
  int8x16_t v1267;
  int8x16_t v1268;
  int8x16_t v1269;
  int8x16_t v1270;
  uint64x2_t v1271;
  int64x2_t v1272;
  int8x16_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  int16x8_t v1276;
  int16x8_t v1277;
  int8x16_t v1278;
  int16x8_t v1279;
  int16x8_t v1280;
  int16x8_t v1281;
  int16x8_t v1282;
  int16x8_t v1283;
  int8x16_t v1284;
  int8x16_t v1285;
  int8x16_t v1286;
  int16x8_t v1287;
  int16x8_t v1288;
  int32x4_t v1289;
  unint64_t v1290;
  uint8x16_t v1291;
  int8x16_t v1292;
  int8x16_t v1293;
  int8x16_t v1294;
  int32x4_t v1295;
  int16x8_t v1296;
  int8x16_t v1297;
  int32x4_t v1298;
  int32x4_t v1299;
  int8x16_t v1300;
  int32x4_t v1301;
  int8x16_t v1302;
  int32x4_t v1303;
  int8x16_t v1304;
  int8x16_t v1305;
  int8x16_t v1306;
  int8x16_t v1307;
  int8x16_t v1308;
  int8x16_t v1309;
  int8x16_t v1310;
  int32x4_t v1311;
  int32x2_t v1312;
  int32x4_t v1313;
  int32x4_t v1314;
  unsigned int v1315;
  unsigned int v1316;
  int8x16_t v1317;
  int8x16_t *v1318;
  uint8x16_t v1319;
  uint8x16_t v1320;
  int v1321;
  uint8x16_t v1322;
  uint8x16_t v1323;
  uint8x16_t v1324;
  uint16x8_t v1325;
  uint16x8_t v1326;
  uint32x4_t v1327;
  uint32x4_t v1328;
  uint64x2_t v1329;
  uint64x2_t v1330;
  int8x16_t v1331;
  uint16x8_t v1332;
  uint16x8_t v1333;
  uint16x8_t v1334;
  uint16x8_t v1335;
  uint16x8_t v1336;
  int16x8_t v1337;
  int16x8_t v1338;
  unsigned int v1339;
  uint16x8_t v1340;
  int16x8_t v1341;
  int16x8_t v1342;
  int16x8_t v1343;
  uint16x8_t v1344;
  int8x16_t v1345;
  int8x16_t v1346;
  uint16x8_t v1347;
  uint16x8_t v1348;
  uint16x8_t v1349;
  uint16x8_t v1350;
  int16x8_t v1351;
  int16x8_t v1352;
  int16x8_t v1353;
  int16x8_t v1354;
  int8x16_t v1355;
  int8x16_t v1356;
  int8x16_t v1357;
  uint8x16_t v1358;
  int16x8_t v1359;
  int8x16_t v1360;
  int8x16_t v1361;
  int8x16_t v1362;
  int16x8_t v1363;
  int16x8_t v1364;
  int8x16_t v1365;
  int16x8_t v1366;
  int8x16_t v1367;
  int8x16_t v1368;
  int16x8_t v1369;
  int8x16_t v1370;
  int16x8_t v1371;
  int8x16_t v1372;
  int8x16_t v1373;
  int8x16_t v1374;
  int8x16_t v1375;
  int8x16_t v1376;
  int8x16_t v1377;
  int8x16_t v1378;
  int8x16_t v1379;
  int8x16_t v1380;
  int8x16_t v1381;
  int8x16_t v1382;
  int8x16_t v1383;
  int8x16_t v1384;
  int8x16_t v1385;
  unsigned __int128 v1386;
  int16x8_t v1387;
  int8x16_t v1388;
  int32x4_t v1389;
  int32x4_t v1390;
  int8x16_t v1391;
  int64x2_t v1392;
  uint64x2_t v1393;
  int64x2_t v1394;
  int64x2_t v1395;
  int8x16_t v1396;
  int8x16_t v1397;
  int8x16_t v1398;
  int8x16_t v1399;
  int8x16_t v1400;
  int16x8_t v1401;
  int8x16_t v1402;
  int8x16_t v1403;
  int8x16_t v1404;
  int8x16_t v1405;
  int8x16_t v1406;
  int8x16_t v1407;
  int16x8_t v1408;
  uint8x16_t v1409;
  int8x16_t v1410;
  int8x16_t v1411;
  int8x16_t v1412;
  float32x4_t v1413;
  float32x4_t v1415;
  float32x4_t v1416;
  int8x16_t v1417;
  int8x16_t v1418;
  int8x16_t v1419;
  float32x2_t v1420;
  int8x16_t v1421;
  float32x4_t v1422;
  float32x4_t v1423;
  float32x4_t v1424;
  float32x4_t v1425;
  float32x4_t v1426;
  int8x16_t v1427;
  int8x16_t v1428;
  float32x2_t v1429;
  uint64_t v1430;
  float32x4_t v1431;
  float32x4_t v1432;
  float32x4_t v1433;
  float32x4_t v1434;
  float32x4_t v1435;
  float32x4_t v1436;
  float32x4_t v1437;
  float32x4_t v1438;
  float32x4_t v1439;
  float32x4_t v1440;
  float32x4_t v1441;
  float32x4_t v1442;
  float32x4_t v1443;
  float32x4_t v1444;
  float32x4_t v1445;
  float32x4_t v1446;
  float32x4_t v1447;
  float32x4_t v1448;
  int8x16_t v1449;
  int8x16_t v1450;
  uint64_t v1451;
  const float *v1452;
  float v1454;
  float32x4_t *v1455;
  float32x4_t v1456;
  float32x4_t v1457;
  float32x4_t v1458;
  float32x4_t v1459;
  float32x4_t v1460;
  float32x4_t v1461;
  float32x4_t v1462;
  unsigned __int8 v1463;
  unint64_t v1464;
  float32x4_t v1465;
  int32x4_t v1466;
  float32x4_t v1467;
  float32x4_t v1468;
  float32x4_t v1469;
  float32x4_t v1470;
  float32x4_t v1471;
  float32x4_t v1472;
  float32x4_t v1473;
  float32x4_t v1474;
  float32x4_t v1475;
  float32x4_t v1476;
  float32x4_t v1477;
  uint8x8_t v1478;
  int8x16_t v1479;
  float32x4_t v1480;
  float32x4_t v1481;
  float32x4_t v1482;
  float32x4_t v1483;
  float32x4_t v1484;
  float32x4_t v1485;
  float32x4_t v1486;
  float32x4_t v1487;
  float32x4_t v1488;
  float32x4_t v1489;
  float32x4_t v1490;
  int8x16_t v1491;
  float32x4_t v1492;
  float32x4_t v1493;
  float32x4_t v1494;
  float32x4_t v1495;
  float32x4_t v1496;
  float32x4_t v1497;
  float32x4_t v1498;
  float32x4_t v1499;
  float32x4_t v1500;
  float32x4_t v1501;
  float32x4_t v1502;
  float32x4_t v1503;
  float32x4_t v1504;
  float32x4_t v1505;
  uint64_t v1506;
  float32x4_t v1507;
  float32x4_t v1508;
  float32x4_t v1509;
  float32x4_t v1510;
  float32x4_t v1511;
  float32x4_t v1512;
  float32x4_t v1513;
  float32x4_t v1514;
  float32x4_t v1515;
  float32x4_t v1516;
  float32x4_t v1517;
  float32x4_t v1518;
  float32x4_t v1519;
  float32x4_t v1520;
  float32x4_t v1521;
  float32x4_t v1522;
  float32x4_t v1523;
  float32x4_t v1524;
  float32x4_t v1525;
  float32x4_t v1526;
  float32x4_t v1527;
  float32x4_t v1528;
  int8x16_t v1529;
  float32x4_t v1530;
  float32x4_t v1531;
  float32x4_t v1532;
  float32x4_t v1533;
  float32x4_t v1534;
  float32x4_t v1535;
  float32x4_t v1536;
  float32x4_t v1537;
  float32x4_t v1538;
  float32x4_t v1539;
  float32x4_t v1540;
  float32x4_t v1541;
  int32x4_t v1542;
  float32x4_t v1543;
  float32x4_t v1544;
  float v1545;
  float32x4_t v1546;
  float32x4_t v1547;
  float32x4_t v1548;
  float32x4_t v1549;
  float32x4_t v1550;
  float32x4_t v1551;
  int8x16_t v1552;
  float32x4_t v1553;
  float32x4_t v1554;
  float32x4_t v1555;
  float32x4_t v1556;
  float32x4_t v1557;
  float32x4_t v1558;
  float32x4_t v1559;
  float32x4_t v1560;
  float32x4_t v1561;
  float32x4_t v1562;
  float32x4_t v1563;
  float32x4_t v1564;
  float32x4_t v1565;
  float32x4_t v1566;
  float32x4_t v1567;
  float32x4_t v1568;
  float32x4_t v1569;
  float32x4_t v1570;
  float32x4_t v1571;
  float32x4_t v1572;
  float32x4_t v1573;
  float32x4_t v1574;
  float32x4_t v1575;
  float32x4_t v1576;
  float32x4_t v1577;
  float32x4_t v1578;
  float32x4_t v1579;
  float32x4_t v1580;
  float32x4_t v1581;
  float32x4_t v1582;
  float32x4_t v1583;
  float32x4_t v1584;
  unsigned __int8 v1585;
  float32x4_t v1586;
  float32x4_t v1587;
  float32x4_t v1588;
  float32x4_t v1589;
  float32x4_t v1590;
  float32x4_t v1591;
  float32x4_t v1592;
  float32x4_t v1593;
  float32x4_t v1594;
  float32x4_t v1595;
  int8x16_t v1596;
  float32x4_t v1597;
  float32x4_t v1598;
  float32x4_t v1599;
  float32x4_t v1600;
  int32x4_t v1601;
  int8x16_t v1602;
  int8x16_t v1603;
  int8x16_t v1604;
  uint64_t v1605;
  float32x4_t v1606;
  float32x4_t v1607;
  int8x8_t v1608;
  uint64_t v1609;
  uint64_t v1610;
  int8x8_t v1611;
  __int128 v1612;
  float32x4_t v1613;
  uint64_t v1614;
  int8x8_t v1615;
  uint64_t v1616;
  int8x8_t v1617;
  int8x8_t v1618;
  uint64_t v1619;
  int8x8_t v1620;
  float32x4_t v1621[2];
  unint64_t v1622;
  float32x4_t v1623[2];
  int32x4_t v1624;
  float32x4_t v1625;
  __int128 v1626;
  unint64_t v1627;
  _OWORD v1628[8];
  float32x4_t v1629;
  int32x4_t v1630;
  float32x4_t v1631;
  float32x4_t v1632;
  float32x4_t v1633;
  float32x4_t v1634;
  float32x4_t v1635;
  float32x4_t v1636;
  float32x4_t v1637;
  float32x4_t v1638;
  float32x4_t v1639;
  float32x4_t v1640;
  float32x4_t v1641;
  float32x4_t v1642;
  float32x4_t v1643;
  float32x4_t v1644;
  float32x4_t v1645;
  float32x4_t v1646;
  float32x4_t v1647;
  float32x4_t v1648;
  float32x4_t v1649;
  float32x4_t v1650;
  float32x4_t v1651;
  float32x4_t v1652;
  float32x4_t v1653;
  float32x4_t v1654;
  float32x4_t v1655;
  float32x4_t v1656;
  float32x4_t v1657;
  float32x4_t v1658;
  float32x4_t v1659;
  float32x4_t v1660;
  uint64_t v1661;

  v1661 = *MEMORY[0x24BDAC8D0];
  v7 = a1 + 272;
  v1581 = *(float32x4_t *)(a1 + 16);
  if (*(char *)(a1 + 134) >= 1 && *(_BYTE *)(a1 + 135))
  {
    v8.i64[0] = -1;
    v8.i64[1] = -1;
    v9 = (int8x16_t)vcgtq_s32(*(int32x4_t *)(a1 + 736), v8);
    v10 = (int8x16_t)vcgtq_s32(*(int32x4_t *)(a1 + 768), v8);
    v11 = (int8x16_t)vcgtq_s32(*(int32x4_t *)(a1 + 720), v8);
    v12 = (int8x16_t)vcgtq_s32(*(int32x4_t *)(a1 + 752), v8);
    v1581 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 144), v11), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 176), v12)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 160), v9), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 192), v10))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 208), v11), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 240), v12)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 224), v9), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 256), v10)))), vpaddq_f32(vaddq_f32(vaddq_f32(
                      (float32x4_t)vandq_s8(*(int8x16_t *)v7, v11),
                      (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 304), v12)),
                    vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 288), v9), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 320), v10))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 336), v11), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 368), v12)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 352), v9), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 384), v10))))), ReciprocalTable[16 - *(unsigned __int8 *)(a1 + 134)]);
  }
  v1454 = *a3;
  __asm
  {
    FMOV            V31.4S, #1.0
    FMOV            V0.4S, #3.0
  }
  v1531 = _Q0;
  v1598 = _Q31;
  if (!(_NF ^ _VF | _ZF))
  {
    if (*(_BYTE *)(a1 + 136))
    {
      v1627 = WeightInfoForSingleLineSingleWeight_4x4(2, 2);
      v20 = *(float32x4_t *)(v7 + 416);
      v19 = *(float32x4_t *)(v7 + 432);
      v22 = *(float32x4_t *)(v7 + 384);
      v21 = *(float32x4_t *)(v7 + 400);
      v23 = vmaxnmq_f32(v21, v19);
      v24 = vminnmq_f32(v21, v19);
      v25 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32(v22, v20), v23);
      v26 = (int32x4_t)vminnmq_f32(vminnmq_f32(v22, v20), v24);
      __asm { FMOV            V1.4S, #1.0 }
      v28 = (float32x4_t)vzip2q_s32(v26, _Q1);
      v29 = (float32x4_t)vzip1q_s32(v26, _Q1);
      v30 = vmaxnmq_f32((float32x4_t)vzip1q_s32(v25, _Q1), (float32x4_t)vzip2q_s32(v25, _Q1));
      v31 = vminnmq_f32(v29, v28);
      v32 = (int32x4_t)vmaxnmq_f32(v30, (float32x4_t)vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL));
      v33 = (int32x4_t)vminnmq_f32(v31, (float32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL));
      v34 = (float32x4_t)vzip1q_s32(v33, v33);
      v34.i32[2] = v33.i32[0];
      v35 = (float32x4_t)vzip1q_s32(v32, v32);
      v35.i32[2] = v32.i32[0];
      goto LABEL_53;
    }
    v86 = *(float32x4_t **)(a1 + 32);
    if (v86)
    {
      v87 = *v86;
      v87.i32[3] = 0;
    }
    else
    {
      v87 = (float32x4_t)xmmword_20631C430;
    }
    v333 = (int8x16_t)vmulq_f32(v1581, v87);
    *(float32x2_t *)v333.i8 = vadd_f32(*(float32x2_t *)v333.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v333, v333, 8uLL));
    v334 = (int32x2_t)vadd_f32(*(float32x2_t *)v333.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v333.i8, 1));
    v335 = vaddv_f32(*(float32x2_t *)v333.i8);
    v336 = (float32x4_t *)(a1 + 336);
    v337 = *(float32x4_t *)(a1 + 336);
    v338 = (float32x4_t *)(a1 + 656);
    v340 = *(float32x4_t *)(a1 + 688);
    v339 = *(float32x4_t *)(a1 + 704);
    v342 = *(float32x4_t *)(a1 + 656);
    v341 = *(float32x4_t *)(a1 + 672);
    v343 = (float32x4_t)vdupq_lane_s32(v334, 0);
    v344 = vsubq_f32(v342, v343);
    v345 = vsubq_f32(v341, v343);
    v346 = vsubq_f32(v340, v343);
    v347 = vsubq_f32(v339, v343);
    v348 = *(float32x4_t *)(a1 + 352);
    v349 = *(float32x4_t *)(a1 + 368);
    v350 = *(float32x4_t *)(a1 + 384);
    v351 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1581, 3);
    v352 = vsubq_f32(v350, v351);
    v353 = vsubq_f32(v349, v351);
    v354 = vsubq_f32(v348, v351);
    v355 = vsubq_f32(v337, v351);
    v356 = (int8x16_t)vmlaq_f32(vmulq_f32(v352, v352), v347, v347);
    v357 = (int8x16_t)vmlaq_f32(vmulq_f32(v353, v353), v346, v346);
    v358 = (int8x16_t)vmlaq_f32(vmulq_f32(v354, v354), v345, v345);
    v359 = (int8x16_t)vmlaq_f32(vmulq_f32(v355, v355), v344, v344);
    v360 = *(unsigned __int8 *)(a1 + 135);
    v361 = (float32x4_t)v359;
    v362 = (float32x4_t)v358;
    v363 = (float32x4_t)v357;
    v364 = (float32x4_t)v356;
    if (*(_BYTE *)(a1 + 135))
    {
      v365.i64[0] = 0x7F0000007FLL;
      v365.i64[1] = 0x7F0000007FLL;
      v363 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), v365, v357);
      v362 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), v365, v358);
      v361 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), v365, v359);
      v364 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), v365, v356);
    }
    v1527 = (float32x4_t)v356;
    v1532 = (float32x4_t)v357;
    v1540 = (float32x4_t)v358;
    v1546 = (float32x4_t)v359;
    v366 = vmaxnmq_f32(v361, v363);
    v367 = vmaxnmq_f32(v362, v364);
    v368 = vbslq_s8((int8x16_t)vcgtq_f32(v363, v361), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
    v369 = vbslq_s8((int8x16_t)vcgtq_f32(v364, v362), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
    v370 = (int8x16_t)vmaxnmq_f32(v366, v367);
    v371 = vbslq_s8((int8x16_t)vcgtq_f32(v367, v366), v369, v368);
    v369.i64[0] = vextq_s8(v370, v370, 8uLL).u64[0];
    v372 = vmaxnm_f32(*(float32x2_t *)v370.i8, *(float32x2_t *)v369.i8);
    v366.i64[0] = vextq_s8(v371, v371, 8uLL).u64[0];
    v1617 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v369.i8, *(float32x2_t *)v370.i8), *(int8x8_t *)v366.f32, *(int8x8_t *)v371.i8);
    v373 = *(unsigned int *)((unint64_t)&v1617 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                              * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(v372, (float32x2_t)vdup_lane_s32((int32x2_t)v372, 1))) & 1)));
    v366.i32[0] = v338->i32[v373];
    v357.i32[0] = v336->i32[v373];
    v374 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v366.f32, 0);
    v375 = vsubq_f32(v342, v374);
    v376 = vsubq_f32(v341, v374);
    v377 = vsubq_f32(v340, v374);
    v378 = vsubq_f32(v339, v374);
    v379 = v374;
    v379.i32[3] = v357.i32[0];
    v380 = v335 - v366.f32[0];
    v381 = v1581.f32[3] - *(float *)v357.i32;
    v1583 = (float32x4_t)v357;
    v382 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v357.i8, 0);
    v383 = vsubq_f32(v350, v382);
    v384 = vsubq_f32(v349, v382);
    v385 = vsubq_f32(v348, v382);
    v386 = vsubq_f32(v337, v382);
    v387 = vmulq_n_f32(v386, v381);
    v388 = vmulq_n_f32(v385, v381);
    v389 = vmulq_n_f32(v384, v381);
    v390 = vmlaq_n_f32(vmulq_n_f32(v383, v381), v378, v380);
    v391 = vmlaq_n_f32(v389, v377, v380);
    v392 = vmlaq_n_f32(v388, v376, v380);
    v393 = vmlaq_n_f32(v387, v375, v380);
    v1592 = v379;
    if (v360)
    {
      v394.i64[0] = 0x7F0000007FLL;
      v394.i64[1] = 0x7F0000007FLL;
      v391 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), v394, (int8x16_t)v391);
      v392 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), v394, (int8x16_t)v392);
      v393 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), v394, (int8x16_t)v393);
      v390 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), v394, (int8x16_t)v390);
    }
    v395 = vmaxnmq_f32(v393, v391);
    v396 = vmaxnmq_f32(v392, v390);
    v397 = vbslq_s8((int8x16_t)vcgtq_f32(v391, v393), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
    v398 = (int8x16_t)vmaxnmq_f32(v395, v396);
    v399 = vbslq_s8((int8x16_t)vcgtq_f32(v396, v395), vbslq_s8((int8x16_t)vcgtq_f32(v390, v392), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v397);
    v400 = vextq_s8(v398, v398, 8uLL);
    v401 = vmaxnm_f32(*(float32x2_t *)v398.i8, *(float32x2_t *)v400.i8);
    *(int8x8_t *)v399.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v400.i8, *(float32x2_t *)v398.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v399, v399, 8uLL), *(int8x8_t *)v399.i8);
    *(int8x8_t *)v400.i8 = vmvn_s8((int8x8_t)vcge_f32(v401, (float32x2_t)vdup_lane_s32((int32x2_t)v401, 1)));
    v1616 = v399.i64[0];
    v402 = *(unsigned int *)((unint64_t)&v1616 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v400.i8[0] & 1)));
    v403 = &v338->f32[v402];
    v404 = vld1q_dup_f32(v403);
    v400.i32[0] = v336->i32[v402];
    v405 = vsubq_f32(v342, v404);
    v406 = vsubq_f32(v341, v404);
    v407 = vsubq_f32(v340, v404);
    v408 = vsubq_f32(v339, v404);
    v404.i32[3] = v400.i32[0];
    v1587 = v404;
    v409 = vmlaq_f32(vmulq_f32(v386, v386), v375, v375);
    v1576 = (float32x4_t)v400;
    v410 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v400.i8, 0);
    v411 = vsubq_f32(v350, v410);
    v412 = vsubq_f32(v349, v410);
    v413 = vsubq_f32(v348, v410);
    v414 = vsubq_f32(v337, v410);
    v415 = vmlaq_f32(vmulq_f32(v411, v411), v408, v408);
    v416 = vminnmq_f32(vmlaq_f32(vmulq_f32(v385, v385), v376, v376), vmlaq_f32(vmulq_f32(v413, v413), v406, v406));
    v417 = (float32x4_t)vdupq_n_s32(0x3865F1D0u);
    v418 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v417, vminnmq_f32(v409, vmlaq_f32(vmulq_f32(v414, v414), v405, v405))), (int16x8_t)vcgtq_f32(v417, v416)), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v417, vminnmq_f32(vmlaq_f32(vmulq_f32(v384, v384), v377, v377), vmlaq_f32(vmulq_f32(v412, v412), v407, v407))), (int16x8_t)vcgtq_f32(v417, vminnmq_f32(vmlaq_f32(vmulq_f32(v383, v383), v378, v378), v415))), (int8x16_t)xmmword_20631C0C0));
    v418.i16[0] = vaddvq_s16(v418);
    *(int8x8_t *)v418.i8 = vcnt_s8(*(int8x8_t *)v418.i8);
    v418.i16[0] = vaddlv_u8(*(uint8x8_t *)v418.i8);
    v1627 = WeightInfoForSingleLineSingleWeight_4x4(v418.i32[0], 4);
    if (!*(_BYTE *)(a1 + 134))
    {
      v35 = v1587;
      v34 = v1592;
      goto LABEL_53;
    }
    v34 = v1592;
    if (*(_BYTE *)(a1 + 135))
    {
      v35 = v1587;
      if (v1583.f32[0] != 0.0)
      {
        v421 = v1576;
        if (v1576.f32[0] != 0.0)
        {
          v422 = vsubq_f32(v1587, v1592);
          v421.i32[0] = v422.i32[3];
          if (v422.f32[3] == 0.0)
          {
            if (*(char *)(a1 + 134) >= 15)
              goto LABEL_49;
            v34 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
          }
          v419.i32[0] = 0;
          v1421 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v419, v421), 0);
          v1422 = (float32x4_t)vbslq_s8(v1421, (int8x16_t)vnegq_f32(v422), (int8x16_t)v422);
          v1423 = (float32x4_t)vbslq_s8(v1421, (int8x16_t)v1587, (int8x16_t)v34);
          v420.f32[0] = v1423.f32[3] / v1422.f32[3];
          v1424 = vmlsq_lane_f32(v1423, v1422, v420, 0);
          if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v1424, (float32x4_t)vdupq_n_s32(0xBB800000)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F808081u), v1424))) & 0x80000000) == 0)
          {
            v1425 = vmaxnmq_f32(v1546, v1532);
            v1426 = vmaxnmq_f32(v1540, v1527);
            v1427 = (int8x16_t)vmaxnmq_f32(v1425, v1426);
            v1428 = vbslq_s8((int8x16_t)vcgtq_f32(v1426, v1425), vbslq_s8((int8x16_t)vcgtq_f32(v1527, v1540), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), vbslq_s8((int8x16_t)vcgtq_f32(v1532, v1546), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
            v1426.i64[0] = vextq_s8(v1427, v1427, 8uLL).u64[0];
            v1429 = vmaxnm_f32(*(float32x2_t *)v1427.i8, *(float32x2_t *)v1426.f32);
            *(int8x8_t *)v1428.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v1426.f32, *(float32x2_t *)v1427.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v1428, v1428, 8uLL), *(int8x8_t *)v1428.i8);
            *(int8x8_t *)v1426.f32 = vmvn_s8((int8x8_t)vcge_f32(v1429, (float32x2_t)vdup_lane_s32((int32x2_t)v1429, 1)));
            v1614 = v1428.i64[0];
            v1430 = *(unsigned int *)((unint64_t)&v1614 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v1426.i8[0] & 1)));
            v1428.i32[0] = v338->i32[v1430];
            v1426.i32[0] = v336->i32[v1430];
            v1431 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1428.i8, 0);
            v1432 = vsubq_f32(*v338, v1431);
            v1433 = vsubq_f32(*(float32x4_t *)(v7 + 416), v1431);
            v1434 = vsubq_f32(*(float32x4_t *)(v7 + 400), v1431);
            v1435 = vsubq_f32(*(float32x4_t *)(v7 + 432), v1431);
            v34 = v1431;
            v34.i32[3] = v1426.i32[0];
            *(float *)v1428.i32 = v335 - *(float *)v1428.i32;
            v1431.f32[0] = v1581.f32[3] - v1426.f32[0];
            v1436 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1426.f32, 0);
            v1437 = vsubq_f32(*(float32x4_t *)(v7 + 112), v1436);
            v1438 = vsubq_f32(*(float32x4_t *)(v7 + 80), v1436);
            v1439 = vsubq_f32(*(float32x4_t *)(v7 + 96), v1436);
            v1440 = vmulq_n_f32(vsubq_f32(*v336, v1436), v1431.f32[0]);
            v1441 = vmulq_n_f32(v1439, v1431.f32[0]);
            v1442 = vmulq_n_f32(v1438, v1431.f32[0]);
            v1443 = vmlaq_n_f32(vmulq_n_f32(v1437, v1431.f32[0]), v1435, *(float *)v1428.i32);
            v1444 = vmlaq_n_f32(v1442, v1434, *(float *)v1428.i32);
            v1445 = vmlaq_n_f32(v1441, v1433, *(float *)v1428.i32);
            v1446 = vmlaq_n_f32(v1440, v1432, *(float *)v1428.i32);
            v1447 = vmaxnmq_f32(v1446, v1445);
            v1448 = vmaxnmq_f32(v1444, v1443);
            v1449 = (int8x16_t)vmaxnmq_f32(v1447, v1448);
            v1450 = vbslq_s8((int8x16_t)vcgtq_f32(v1448, v1447), vbslq_s8((int8x16_t)vcgtq_f32(v1443, v1444), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), vbslq_s8((int8x16_t)vcgtq_f32(v1445, v1446), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
            v1446.i64[0] = vextq_s8(v1449, v1449, 8uLL).u64[0];
            *(float32x2_t *)v1443.f32 = vmaxnm_f32(*(float32x2_t *)v1449.i8, *(float32x2_t *)v1446.f32);
            v1615 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v1446.f32, *(float32x2_t *)v1449.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v1450, v1450, 8uLL), *(int8x8_t *)v1450.i8);
            v1451 = *(unsigned int *)((unint64_t)&v1615 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                       * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v1443.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1443.f32, 1))) & 1)));
            v1452 = &v338->f32[v1451];
            v35 = vld1q_dup_f32(v1452);
            v35.i32[3] = v336->i32[v1451];
            goto LABEL_53;
          }
          v35 = (float32x4_t)vbslq_s8(v1421, (int8x16_t)v34, (int8x16_t)v1587);
          v1413 = vmaxnmq_f32(v1424, (float32x4_t)0);
          __asm { FMOV            V1.4S, #1.0 }
          goto LABEL_236;
        }
      }
      goto LABEL_53;
    }
    v35 = v1587;
    v332 = (int32x2_t)vcgtq_f32(v1576, v1583).u64[0];
LABEL_52:
    v423 = (int8x16_t)vdupq_lane_s32(v332, 0);
    v35 = (float32x4_t)vandq_s8((int8x16_t)v35, v423);
    v34 = (float32x4_t)vbicq_s8((int8x16_t)v34, v423);
    goto LABEL_53;
  }
  v36 = *(float32x4_t *)(a1 + 176);
  v37 = *(float32x4_t *)(a1 + 192);
  v38 = *(float32x4_t *)(a1 + 144);
  v39 = *(float32x4_t *)(a1 + 160);
  v40 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1581.f32, 0);
  v41 = vsubq_f32(v38, v40);
  v42 = vsubq_f32(v39, v40);
  v43 = vsubq_f32(v36, v40);
  v44 = vsubq_f32(v37, v40);
  v45 = *(float32x4_t *)(a1 + 240);
  v46 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1581.f32, 1);
  v47 = *(float32x4_t *)(a1 + 208);
  v48 = *(float32x4_t *)(a1 + 224);
  v49 = vsubq_f32(v47, v46);
  v50 = vsubq_f32(v48, v46);
  v51 = vsubq_f32(v45, v46);
  v1538 = *(float32x4_t *)(a1 + 256);
  v52 = vsubq_f32(v1538, v46);
  v53 = *(float32x4_t *)(a1 + 320);
  v54 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1581, 2);
  v55 = vsubq_f32(*(float32x4_t *)v7, v54);
  v1575 = *(float32x4_t *)(a1 + 288);
  v56 = vsubq_f32(v1575, v54);
  v1582 = *(float32x4_t *)(a1 + 304);
  v57 = vsubq_f32(v1582, v54);
  v58 = vsubq_f32(v53, v54);
  v59 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1581, 3);
  v1563 = *(float32x4_t *)v7;
  v1569 = *(float32x4_t *)(a1 + 336);
  v60 = vsubq_f32(v1569, v59);
  v1557 = *(float32x4_t *)(a1 + 352);
  v61 = vsubq_f32(v1557, v59);
  v1544 = *(float32x4_t *)(a1 + 384);
  v1551 = *(float32x4_t *)(a1 + 368);
  v62 = vsubq_f32(v1551, v59);
  v63 = vsubq_f32(v1544, v59);
  v64 = vmulq_f32(v44, v44);
  v65 = vmulq_f32(v43, v43);
  v66 = vmulq_f32(v42, v42);
  v67 = vmulq_f32(v41, v41);
  v68 = vmulq_f32(v52, v52);
  v69 = vmulq_f32(v51, v51);
  v70 = vmulq_f32(v50, v50);
  v71 = vmulq_f32(v49, v49);
  v72 = vmulq_f32(v58, v58);
  v73 = vmulq_f32(v57, v57);
  v74 = *(float32x2_t **)(a1 + 32);
  v75 = vmulq_f32(v56, v56);
  v76 = vmulq_f32(v55, v55);
  v77 = vmulq_f32(v63, v63);
  v78 = vmulq_f32(v62, v62);
  v79 = vmulq_f32(v61, v61);
  v80 = vmulq_f32(v60, v60);
  if (v74)
  {
    v81 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v68, *v74, 1), v64, COERCE_FLOAT(*(_OWORD *)v74->f32)), v72, *(float32x4_t *)v74->f32, 2), v77, *(float32x4_t *)v74->f32, 3);
    v82 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v70, *v74, 1), v66, COERCE_FLOAT(*(_OWORD *)v74->f32)), v75, *(float32x4_t *)v74->f32, 2), v79, *(float32x4_t *)v74->f32, 3), v1531);
    v83 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v71, *v74, 1), v67, COERCE_FLOAT(*(_OWORD *)v74->f32)), v76, *(float32x4_t *)v74->f32, 2), v80, *(float32x4_t *)v74->f32, 3), v1531);
    v84 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v69, *v74, 1), v65, COERCE_FLOAT(*(_OWORD *)v74->f32)), v73, *(float32x4_t *)v74->f32, 2), v78, *(float32x4_t *)v74->f32, 3), v1531);
    v85 = vmulq_f32(v81, v1531);
  }
  else
  {
    v88 = vaddq_f32(vaddq_f32(v64, v68), v72);
    v83 = vaddq_f32(vaddq_f32(vaddq_f32(v67, v71), v76), v80);
    v82 = vaddq_f32(vaddq_f32(vaddq_f32(v66, v70), v75), v79);
    v84 = vaddq_f32(vaddq_f32(vaddq_f32(v65, v69), v73), v78);
    v85 = vaddq_f32(v88, v77);
  }
  v89 = *(unsigned __int8 *)(a1 + 135);
  if (*(_BYTE *)(a1 + 135))
  {
    v90.i64[0] = 0x7F0000007FLL;
    v90.i64[1] = 0x7F0000007FLL;
    v84 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), v90, (int8x16_t)v84);
    v82 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), v90, (int8x16_t)v82);
    v83 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), v90, (int8x16_t)v83);
    v85 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), v90, (int8x16_t)v85);
  }
  v91 = a1 + 400;
  v92 = vmaxnmq_f32(v83, v84);
  v93 = vmaxnmq_f32(v82, v85);
  v94 = (int8x16_t)vmaxnmq_f32(v92, v93);
  v95 = vbslq_s8((int8x16_t)vcgtq_f32(v93, v92), vbslq_s8((int8x16_t)vcgtq_f32(v85, v82), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), vbslq_s8((int8x16_t)vcgtq_f32(v84, v83), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
  v96 = (float32x2_t)vextq_s8(v94, v94, 8uLL).u64[0];
  *(float32x2_t *)v92.f32 = vmaxnm_f32(*(float32x2_t *)v94.i8, v96);
  v1620 = vbsl_s8((int8x8_t)vcgt_f32(v96, *(float32x2_t *)v94.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v95, v95, 8uLL), *(int8x8_t *)v95.i8);
  v97 = *(unsigned int *)((unint64_t)&v1620 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                           * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v92.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v92.f32, 1))) & 1)));
  v98 = *(float32x4_t *)(a1 + 400 + 16 * v97);
  v99 = vsubq_f32(v1581, v98);
  v100 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 0);
  v1513 = v39;
  v1518 = v38;
  v101 = vsubq_f32(v38, v100);
  v102 = vsubq_f32(v39, v100);
  v1507 = v36;
  v103 = vsubq_f32(v36, v100);
  v1489 = v37;
  v1493 = v48;
  v1481 = v100;
  v104 = vsubq_f32(v37, v100);
  v105 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1);
  v1497 = v45;
  v1501 = v47;
  v106 = vsubq_f32(v47, v105);
  v107 = vsubq_f32(v48, v105);
  v108 = vsubq_f32(v45, v105);
  v1483 = v105;
  v109 = vsubq_f32(v1538, v105);
  v110 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2);
  v111 = vsubq_f32(v1563, v110);
  v112 = vsubq_f32(v1575, v110);
  v113 = vsubq_f32(v1582, v110);
  v1505 = v53;
  v114 = vsubq_f32(v53, v110);
  v1590 = v98;
  v115 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 3);
  v116 = vsubq_f32(v1569, v115);
  v117 = vsubq_f32(v1557, v115);
  v118 = vsubq_f32(v1551, v115);
  v1485 = v110;
  v1487 = v115;
  v119 = vsubq_f32(v1544, v115);
  v120 = vmulq_n_f32(v104, v99.f32[0]);
  v121 = vmulq_n_f32(v103, v99.f32[0]);
  v122 = vmulq_n_f32(v102, v99.f32[0]);
  v123 = vmulq_n_f32(v101, v99.f32[0]);
  v124 = vmulq_lane_f32(v109, *(float32x2_t *)v99.f32, 1);
  v125 = vmulq_lane_f32(v108, *(float32x2_t *)v99.f32, 1);
  v126 = vmulq_lane_f32(v107, *(float32x2_t *)v99.f32, 1);
  v127 = vmulq_lane_f32(v106, *(float32x2_t *)v99.f32, 1);
  v128 = vmulq_laneq_f32(v114, v99, 2);
  v129 = vmulq_laneq_f32(v113, v99, 2);
  v130 = vmulq_laneq_f32(v112, v99, 2);
  v131 = vmulq_laneq_f32(v111, v99, 2);
  v132 = vmulq_laneq_f32(v119, v99, 3);
  v133 = vmulq_laneq_f32(v118, v99, 3);
  v134 = vmulq_laneq_f32(v117, v99, 3);
  v135 = vmulq_laneq_f32(v116, v99, 3);
  if (v74)
  {
    v136 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v126, *v74, 1), v122, COERCE_FLOAT(*(_OWORD *)v74->f32)), v130, *(float32x4_t *)v74->f32, 2), v134, *(float32x4_t *)v74->f32, 3), v1531);
    v137 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v127, *v74, 1), v123, COERCE_FLOAT(*(_OWORD *)v74->f32)), v131, *(float32x4_t *)v74->f32, 2), v135, *(float32x4_t *)v74->f32, 3), v1531);
    v138 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v125, *v74, 1), v121, COERCE_FLOAT(*(_OWORD *)v74->f32)), v129, *(float32x4_t *)v74->f32, 2), v133, *(float32x4_t *)v74->f32, 3), v1531);
    v139 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v124, *v74, 1), v120, COERCE_FLOAT(*(_OWORD *)v74->f32)), v128, *(float32x4_t *)v74->f32, 2), v132, *(float32x4_t *)v74->f32, 3), v1531);
    if (!v89)
      goto LABEL_17;
    goto LABEL_16;
  }
  v137 = vaddq_f32(v135, vaddq_f32(v131, vaddq_f32(v123, v127)));
  v136 = vaddq_f32(v134, vaddq_f32(v130, vaddq_f32(v122, v126)));
  v138 = vaddq_f32(v133, vaddq_f32(v129, vaddq_f32(v121, v125)));
  v139 = vaddq_f32(v132, vaddq_f32(v128, vaddq_f32(v120, v124)));
  if (v89)
  {
LABEL_16:
    v140.i64[0] = 0x7F0000007FLL;
    v140.i64[1] = 0x7F0000007FLL;
    v138 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), v140, (int8x16_t)v138);
    v136 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), v140, (int8x16_t)v136);
    v137 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), v140, (int8x16_t)v137);
    v139 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), v140, (int8x16_t)v139);
  }
LABEL_17:
  v141 = vmaxnmq_f32(v136, v139);
  v142 = (int8x16_t)vcgtq_f32(v139, v136);
  v143 = vmaxnmq_f32(v137, v138);
  v144 = vbslq_s8((int8x16_t)vcgtq_f32(v141, v143), vbslq_s8(v142, (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), vbslq_s8((int8x16_t)vcgtq_f32(v138, v137), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
  v145 = (int8x16_t)vmaxnmq_f32(v143, v141);
  v146 = (float32x2_t)vextq_s8(v145, v145, 8uLL).u64[0];
  *(int8x8_t *)v144.i8 = vbsl_s8((int8x8_t)vcgt_f32(v146, *(float32x2_t *)v145.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v144, v144, 8uLL), *(int8x8_t *)v144.i8);
  *(float32x2_t *)v145.i8 = vmaxnm_f32(*(float32x2_t *)v145.i8, v146);
  v1619 = v144.i64[0];
  v147 = *(int32x4_t *)(v91
                      + 16
                      * *(unsigned int *)((unint64_t)&v1619 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                           * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v145.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v145.i8, 1))) & 1))));
  v148 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.i8, 0);
  v149 = vsubq_f32(v1489, v148);
  v150 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v147.i8, 1);
  v151 = v147;
  v1586 = (float32x4_t)v147;
  v152 = vsubq_f32(v1538, v150);
  v153 = vmlaq_f32(vmulq_f32(v152, v152), v149, v149);
  v154 = vsubq_f32(v1507, v148);
  v155 = vsubq_f32(v1497, v150);
  v156 = vmlaq_f32(vmulq_f32(v155, v155), v154, v154);
  v157 = vsubq_f32(v1513, v148);
  v158 = vsubq_f32(v1493, v150);
  v159 = vmlaq_f32(vmulq_f32(v158, v158), v157, v157);
  v1514 = v148;
  v160 = vsubq_f32(v1518, v148);
  v1539 = v150;
  v161 = vsubq_f32(v1501, v150);
  v162 = vmlaq_f32(vmulq_f32(v161, v161), v160, v160);
  v163 = (float32x4_t)vdupq_laneq_s32(v151, 2);
  v164 = vsubq_f32(v1563, v163);
  v165 = vmlaq_f32(v162, v164, v164);
  v166 = vsubq_f32(v1575, v163);
  v167 = vmlaq_f32(v159, v166, v166);
  v168 = vsubq_f32(v1582, v163);
  v169 = vmlaq_f32(v156, v168, v168);
  v1519 = v163;
  v170 = vsubq_f32(v1505, v163);
  v171 = vmlaq_f32(v153, v170, v170);
  v172 = (float32x4_t)vdupq_laneq_s32(v151, 3);
  v173 = vsubq_f32(v1544, v172);
  v174 = vmlaq_f32(v171, v173, v173);
  v175 = vsubq_f32(v1551, v172);
  v176 = vmlaq_f32(v169, v175, v175);
  v177 = vsubq_f32(v1557, v172);
  v178 = vmlaq_f32(v167, v177, v177);
  v1558 = v172;
  v179 = vsubq_f32(v1569, v172);
  v180 = vminnmq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v106, v106), v101, v101), v111, v111), v116, v116), vmlaq_f32(v165, v179, v179));
  v181 = (float32x4_t)vdupq_n_s32(0x3BF7C5EEu);
  v182 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v181, v180), (int16x8_t)vcgtq_f32(v181, vminnmq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v107, v107), v102, v102), v112, v112), v117, v117), v178))), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v181,
                                                  vminnmq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v108, v108), v103, v103), v113, v113), v118, v118), v176)), (int16x8_t)vcgtq_f32(v181, vminnmq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v109, v109), v104, v104), v114, v114), v119, v119), v174))),
                        (int8x16_t)xmmword_20631C0C0));
  v182.i16[0] = vaddvq_s16(v182);
  v183 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v182.i8);
  v183.i16[0] = vaddlv_u8(v183);
  if (*(_BYTE *)(a1 + 136))
    v184 = 6;
  else
    v184 = 8;
  v185 = WeightInfoForSingleLineSingleWeight_4x4(v183.i32[0], v184);
  v1545 = ReciprocalTable[BYTE4(v185)];
  *(float *)v186.i32 = v1545 * v1545;
  v187 = v1590;
  v188 = (int8x16_t)vsubq_f32(v1586, v1590);
  v189.i64[0] = 0x8000000080000000;
  v189.i64[1] = 0x8000000080000000;
  v190 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v191 = vdivq_f32(v1598, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v190, vabdq_f32(v1586, v1590)), vorrq_s8(vandq_s8(v188, v189), (int8x16_t)v190), v188));
  v192 = *(float32x4_t *)(a1 + 144);
  v193 = *(float32x4_t *)(a1 + 160);
  v195 = *(float32x4_t *)(a1 + 176);
  v194 = *(float32x4_t *)(a1 + 192);
  v196 = vmulq_n_f32(vsubq_f32(v193, v1481), v191.f32[0]);
  v197 = vmulq_n_f32(vsubq_f32(v192, v1481), v191.f32[0]);
  v198 = vmulq_n_f32(vsubq_f32(v194, v1481), v191.f32[0]);
  v199 = vmulq_n_f32(vsubq_f32(v195, v1481), v191.f32[0]);
  v201 = *(float32x4_t *)(a1 + 240);
  v200 = *(float32x4_t *)(a1 + 256);
  v202 = *(float32x4_t *)(a1 + 208);
  v203 = *(float32x4_t *)(a1 + 224);
  v204 = vmulq_lane_f32(vsubq_f32(v201, v1483), *(float32x2_t *)v191.f32, 1);
  v205 = vmulq_lane_f32(vsubq_f32(v200, v1483), *(float32x2_t *)v191.f32, 1);
  v206 = vmulq_lane_f32(vsubq_f32(v202, v1483), *(float32x2_t *)v191.f32, 1);
  v207 = vmulq_lane_f32(vsubq_f32(v203, v1483), *(float32x2_t *)v191.f32, 1);
  v208 = *(float32x4_t *)(v7 + 32);
  v209 = *(float32x4_t *)(v7 + 48);
  v211 = *(float32x4_t *)v7;
  v210 = *(float32x4_t *)(v7 + 16);
  v212 = vmlaq_f32(vmulq_f32(v204, v204), v199, v199);
  v213 = vmlaq_f32(vmulq_f32(v205, v205), v198, v198);
  v214 = vmlaq_f32(vmulq_f32(v206, v206), v197, v197);
  v215 = vmulq_laneq_f32(vsubq_f32(v208, v1485), v191, 2);
  v216 = vmulq_laneq_f32(vsubq_f32(v209, v1485), v191, 2);
  v217 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)v7, v1485), v191, 2);
  v218 = vmulq_laneq_f32(vsubq_f32(v210, v1485), v191, 2);
  v219 = vmlaq_f32(vmlaq_f32(vmulq_f32(v207, v207), v196, v196), v218, v218);
  v220 = *(float32x4_t *)(v7 + 64);
  v221 = vmlaq_f32(v214, v217, v217);
  v222 = *(float32x4_t *)(v7 + 80);
  v224 = *(float32x4_t *)(v7 + 96);
  v223 = *(float32x4_t *)(v7 + 112);
  v225 = vmlaq_f32(v212, v215, v215);
  v226 = vmulq_laneq_f32(vsubq_f32(v224, v1487), v191, 3);
  v227 = vmlaq_f32(v225, v226, v226);
  v228 = vmulq_laneq_f32(vsubq_f32(v223, v1487), v191, 3);
  v229 = vmlaq_f32(vmlaq_f32(v213, v216, v216), v228, v228);
  v230 = vmulq_laneq_f32(vsubq_f32(v222, v1487), v191, 3);
  v231 = vmulq_laneq_f32(vsubq_f32(v220, v1487), v191, 3);
  v232 = vmlaq_f32(v221, v231, v231);
  v233 = (float32x4_t)vdupq_lane_s32(v186, 0);
  v234 = (int16x8_t)vcgtq_f32(v233, vmlaq_f32(v219, v230, v230));
  v235 = (int16x8_t)vcgtq_f32(v233, v232);
  v236 = (int16x8_t)vcgtq_f32(v233, v229);
  v237 = (int16x8_t)vcgtq_f32(v233, v227);
  v238 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v235, v234), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v237, v236), (int8x16_t)xmmword_20631C0C0));
  v238.i16[0] = vaddvq_s16(v238);
  v239 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v238.i8);
  v239.i16[0] = vaddlv_u8(v239);
  v1627 = v185;
  v1564 = v200;
  v1570 = v194;
  if (v239.i32[0] >= 2u)
    v187 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v235, (int8x16_t)v192), (float32x4_t)vandq_s8((int8x16_t)v237, (int8x16_t)v195)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v234, (int8x16_t)v193), (float32x4_t)vandq_s8((int8x16_t)v236, (int8x16_t)v194))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v235, (int8x16_t)v202), (float32x4_t)vandq_s8((int8x16_t)v237, (int8x16_t)v201)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v234, (int8x16_t)v203), (float32x4_t)vandq_s8((int8x16_t)v236, (int8x16_t)v200)))), vpaddq_f32(vaddq_f32(vaddq_f32(
                     (float32x4_t)vandq_s8((int8x16_t)v235, (int8x16_t)v211),
                     (float32x4_t)vandq_s8((int8x16_t)v237, (int8x16_t)v208)),
                   vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v234, (int8x16_t)v210), (float32x4_t)vandq_s8((int8x16_t)v236, (int8x16_t)v209))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v235, (int8x16_t)v220), (float32x4_t)vandq_s8((int8x16_t)v237, (int8x16_t)v224)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v234, (int8x16_t)v222), (float32x4_t)vandq_s8((int8x16_t)v236, (int8x16_t)v223))))), ReciprocalTable[v239.u16[0]]);
  v1591 = v187;
  v240 = vmulq_n_f32(vsubq_f32(v1514, v195), v191.f32[0]);
  v241 = vmulq_n_f32(vsubq_f32(v1514, v194), v191.f32[0]);
  v242 = vmulq_n_f32(vsubq_f32(v1514, v193), v191.f32[0]);
  v243 = vmulq_n_f32(vsubq_f32(v1514, v192), v191.f32[0]);
  v244 = vmulq_lane_f32(vsubq_f32(v1539, v202), *(float32x2_t *)v191.f32, 1);
  v245 = vmulq_lane_f32(vsubq_f32(v1539, v203), *(float32x2_t *)v191.f32, 1);
  v246 = vmulq_lane_f32(vsubq_f32(v1539, v200), *(float32x2_t *)v191.f32, 1);
  v247 = vmulq_lane_f32(vsubq_f32(v1539, v201), *(float32x2_t *)v191.f32, 1);
  v248 = vsubq_f32(v1519, v208);
  v249 = v223;
  v250 = (int8x16_t)v209;
  v1552 = (int8x16_t)v208;
  v251 = (int8x16_t)v203;
  v252 = (int8x16_t)v201;
  v253 = vmulq_laneq_f32(vsubq_f32(v1519, v211), v191, 2);
  v254 = vmulq_laneq_f32(vsubq_f32(v1519, v210), v191, 2);
  v255 = vmulq_laneq_f32(vsubq_f32(v1519, v209), v191, 2);
  v256 = vmulq_laneq_f32(v248, v191, 2);
  v257 = (int8x16_t)v193;
  v258 = v195;
  v259 = vmulq_laneq_f32(vsubq_f32(v1558, v224), v191, 3);
  v260 = vmulq_laneq_f32(vsubq_f32(v1558, v249), v191, 3);
  v261 = vmulq_laneq_f32(vsubq_f32(v1558, v222), v191, 3);
  v262 = vmulq_laneq_f32(vsubq_f32(v1558, v220), v191, 3);
  v263 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v244, v244), v243, v243), v253, v253), v262, v262);
  v264 = (float32x4_t)vcgtq_f32(v233, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v247, v247), v240, v240), v256, v256), v259, v259));
  v265 = (int16x8_t)vcgtq_f32(v233, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v246, v246), v241, v241), v255, v255), v260, v260));
  v266 = (int16x8_t)vcgtq_f32(v233, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v245, v245), v242, v242), v254, v254), v261, v261));
  v267 = (float32x4_t)vcgtq_f32(v233, v263);
  v268 = (float32x4_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v264, v265), (int8x16_t)xmmword_20631C0C0);
  v269 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v267, v266), (int8x16_t)xmmword_20631C0D0), (int8x16_t)v268);
  v269.i16[0] = vaddvq_s16((int16x8_t)v269);
  *(int8x8_t *)v269.f32 = vcnt_s8(*(int8x8_t *)v269.f32);
  v269.i16[0] = vaddlv_u8(*(uint8x8_t *)v269.f32);
  v270 = v269.i16[0];
  v1508 = (float32x4_t)v251;
  if (v269.i32[0] < 2u)
  {
    v276 = v209;
    v271 = v192;
    v35 = v1586;
    v281 = (float32x4_t)v257;
    v282 = (float32x4_t)v252;
    v278 = (float32x4_t)v1552;
  }
  else
  {
    v271 = v192;
    v272 = (float32x4_t)vandq_s8((int8x16_t)v267, (int8x16_t)v192);
    v273 = (float32x4_t)vandq_s8((int8x16_t)v264, (int8x16_t)v258);
    v274 = (float32x4_t)vandq_s8((int8x16_t)v267, (int8x16_t)v202);
    v275 = (float32x4_t)vandq_s8((int8x16_t)v264, v252);
    v276 = v209;
    v277 = (float32x4_t)vandq_s8((int8x16_t)v267, (int8x16_t)v211);
    v278 = (float32x4_t)v1552;
    v279 = (float32x4_t)vandq_s8((int8x16_t)v264, v1552);
    v280 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v267, (int8x16_t)v220), (float32x4_t)vandq_s8((int8x16_t)v264, (int8x16_t)v224));
    v267 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v266, (int8x16_t)v222), (float32x4_t)vandq_s8((int8x16_t)v265, (int8x16_t)v249));
    v264 = vaddq_f32(v280, v267);
    v268 = vpaddq_f32(vaddq_f32(vaddq_f32(v277, v279), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v266, (int8x16_t)v210), (float32x4_t)vandq_s8((int8x16_t)v265, v250))), v264);
    v269 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32(v272, v273), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v266, v257), (float32x4_t)vandq_s8((int8x16_t)v265, (int8x16_t)v1570))), vaddq_f32(vaddq_f32(v274, v275), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v266, v251), (float32x4_t)vandq_s8((int8x16_t)v265, (int8x16_t)v1564)))), v268);
    v35 = vmulq_n_f32(v269, ReciprocalTable[v270]);
    v281 = (float32x4_t)v257;
    v282 = (float32x4_t)v252;
  }
  v283 = v220;
  v284 = v249;
  v34 = v1591;
  if (!*(_BYTE *)(a1 + 134))
    goto LABEL_53;
  v264.i32[0] = v1591.i32[3];
  if (!*(_BYTE *)(a1 + 135))
  {
    v332 = (int32x2_t)vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 3), v264).u64[0];
    goto LABEL_52;
  }
  if (v1591.f32[3] != 0.0 && v35.f32[3] != 0.0)
  {
    v285 = vsubq_f32(v35, v1591);
    v267.i32[0] = v285.i32[3];
    if (v285.f32[3] == 0.0)
    {
      if (*(_BYTE *)(a1 + 134) == 15)
      {
LABEL_49:
        v34 = 0uLL;
        goto LABEL_53;
      }
      v34 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
    }
    v269.i32[0] = 0;
    v286 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v269, v267), 0);
    v287 = (float32x4_t)vbslq_s8(v286, (int8x16_t)vnegq_f32(v285), (int8x16_t)v285);
    v288 = (float32x4_t)vbslq_s8(v286, (int8x16_t)v35, (int8x16_t)v34);
    v268.f32[0] = v288.f32[3] / v287.f32[3];
    v289 = vmlsq_lane_f32(v288, v287, *(float32x2_t *)v268.f32, 0);
    v287.f32[0] = -v1545;
    v268.f32[0] = v1545 + 1.0;
    if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v289, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v287.f32, 0)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v268.f32, 0), v289))) & 0x80000000) != 0)
    {
      v35 = (float32x4_t)vbslq_s8(v286, (int8x16_t)v34, (int8x16_t)v35);
      v1413 = vmaxnmq_f32(v289, (float32x4_t)0);
      _Q1 = v1598;
LABEL_236:
      v34 = vminnmq_f32(v1413, _Q1);
      goto LABEL_53;
    }
    v34 = *(float32x4_t *)(v91 + 16 * v97);
    v290 = vsubq_f32(v1581, v34);
    v291 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 0);
    v292 = vsubq_f32(v1570, v291);
    v293 = vsubq_f32(v271, v291);
    v294 = vsubq_f32(v281, v291);
    v295 = vsubq_f32(v258, v291);
    v296 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1);
    v297 = vsubq_f32(v1564, v296);
    v298 = vsubq_f32(v202, v296);
    v299 = vsubq_f32(v1508, v296);
    v300 = vsubq_f32(v282, v296);
    v301 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2);
    v302 = vsubq_f32(v276, v301);
    v303 = vsubq_f32(v211, v301);
    v304 = vsubq_f32(v210, v301);
    v305 = vsubq_f32(v278, v301);
    v306 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 3);
    v307 = vsubq_f32(v284, v306);
    v308 = vsubq_f32(v283, v306);
    v309 = vsubq_f32(v222, v306);
    v310 = vsubq_f32(v224, v306);
    v311 = *(float32x2_t **)(a1 + 32);
    v312 = vmulq_n_f32(v295, v290.f32[0]);
    v313 = vmulq_n_f32(v294, v290.f32[0]);
    v314 = vmulq_n_f32(v293, v290.f32[0]);
    v315 = vmulq_n_f32(v292, v290.f32[0]);
    v316 = vmulq_lane_f32(v300, *(float32x2_t *)v290.f32, 1);
    v317 = vmulq_lane_f32(v299, *(float32x2_t *)v290.f32, 1);
    v318 = vmulq_lane_f32(v298, *(float32x2_t *)v290.f32, 1);
    v319 = vmulq_lane_f32(v297, *(float32x2_t *)v290.f32, 1);
    v320 = vmulq_laneq_f32(v305, v290, 2);
    v321 = vmulq_laneq_f32(v304, v290, 2);
    v322 = vmulq_laneq_f32(v303, v290, 2);
    v323 = vmulq_laneq_f32(v302, v290, 2);
    v324 = vmulq_laneq_f32(v310, v290, 3);
    v325 = vmulq_laneq_f32(v309, v290, 3);
    v326 = vmulq_laneq_f32(v308, v290, 3);
    v327 = vmulq_laneq_f32(v307, v290, 3);
    if (v311)
    {
      v328 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v317, *v311, 1), v313, COERCE_FLOAT(*(_OWORD *)v311->f32)), v321, *(float32x4_t *)v311->f32, 2), v325, *(float32x4_t *)v311->f32, 3), v1531);
      v329 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v318, *v311, 1), v314, COERCE_FLOAT(*(_OWORD *)v311->f32)), v322, *(float32x4_t *)v311->f32, 2), v326, *(float32x4_t *)v311->f32, 3), v1531);
      v330 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v316, *v311, 1), v312, COERCE_FLOAT(*(_OWORD *)v311->f32)), v320, *(float32x4_t *)v311->f32, 2), v324, *(float32x4_t *)v311->f32, 3), v1531);
      v331 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v319, *v311, 1), v315, COERCE_FLOAT(*(_OWORD *)v311->f32)), v323, *(float32x4_t *)v311->f32, 2), v327, *(float32x4_t *)v311->f32, 3), v1531);
    }
    else
    {
      v329 = vaddq_f32(v326, vaddq_f32(v322, vaddq_f32(v314, v318)));
      v328 = vaddq_f32(v325, vaddq_f32(v321, vaddq_f32(v313, v317)));
      v330 = vaddq_f32(v324, vaddq_f32(v320, vaddq_f32(v312, v316)));
      v331 = vaddq_f32(v327, vaddq_f32(v323, vaddq_f32(v315, v319)));
    }
    v1415 = vmaxnmq_f32(v329, v330);
    v1416 = vmaxnmq_f32(v328, v331);
    v1417 = vbslq_s8((int8x16_t)vcgtq_f32(v330, v329), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
    v1418 = (int8x16_t)vmaxnmq_f32(v1415, v1416);
    v1419 = vbslq_s8((int8x16_t)vcgtq_f32(v1416, v1415), vbslq_s8((int8x16_t)vcgtq_f32(v331, v328), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v1417);
    v1417.i64[0] = vextq_s8(v1418, v1418, 8uLL).u64[0];
    v1420 = vmaxnm_f32(*(float32x2_t *)v1418.i8, *(float32x2_t *)v1417.i8);
    v1618 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v1417.i8, *(float32x2_t *)v1418.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v1419, v1419, 8uLL), *(int8x8_t *)v1419.i8);
    v35 = *(float32x4_t *)(v91
                         + 16
                         * *(unsigned int *)((unint64_t)&v1618 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                              * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(v1420, (float32x2_t)vdup_lane_s32((int32x2_t)v1420, 1))) & 1))));
    if ((vmovn_s32(vcgtq_f32(v35, v34)).i8[6] & 1) != 0)
      v34.i32[3] = 0;
    else
      v35.i32[3] = 0;
  }
LABEL_53:
  v1626 = 0u;
  v1625 = 0u;
  v1624 = 0u;
  v424 = *(float32x4_t **)(a1 + 32);
  v1623[0] = v34;
  v1623[1] = v35;
  FindColorVectors(v1623, v424, 1, 324, &v1627, (uint64_t)&v1624);
  v426 = v1627;
  v427 = (v1627 >> 13) & 0xF;
  if (v427 > 5)
  {
    v437 = *(int8x16_t **)(a1 + 32);
    if (v437)
    {
      v431 = v1624;
      v428 = v1625;
      v438 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1624.i8, 0);
      v439 = vsubq_f32(*(float32x4_t *)(a1 + 192), v438);
      v440 = vsubq_f32(*(float32x4_t *)(a1 + 176), v438);
      v441 = vsubq_f32(*(float32x4_t *)(a1 + 160), v438);
      v442 = vsubq_f32(*(float32x4_t *)(a1 + 144), v438);
      v443 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1624.i8, 1);
      v444 = vsubq_f32(*(float32x4_t *)(a1 + 256), v443);
      v445 = vsubq_f32(*(float32x4_t *)(a1 + 240), v443);
      v446 = vsubq_f32(*(float32x4_t *)(a1 + 224), v443);
      v447 = vsubq_f32(*(float32x4_t *)(a1 + 208), v443);
      v448 = (float32x4_t)vdupq_laneq_s32(v1624, 2);
      v449 = vsubq_f32(*(float32x4_t *)(v7 + 48), v448);
      v450 = vsubq_f32(*(float32x4_t *)(v7 + 32), v448);
      v451 = vsubq_f32(*(float32x4_t *)(v7 + 16), v448);
      v452 = vsubq_f32(*(float32x4_t *)v7, v448);
      v453 = (float32x4_t)vdupq_laneq_s32(v1624, 3);
      v454 = vsubq_f32(*(float32x4_t *)(v7 + 112), v453);
      v455 = vsubq_f32(*(float32x4_t *)(v7 + 96), v453);
      v456 = vsubq_f32(*(float32x4_t *)(v7 + 80), v453);
      v457 = vsubq_f32(*(float32x4_t *)(v7 + 64), v453);
      v458 = vmulq_f32(v1625, (float32x4_t)vandq_s8((int8x16_t)vcgezq_s32(gNormalMasks[(v1627 >> 13) & 0xF]), *v437));
      v459 = (int8x16_t)vmulq_f32(v1625, v458);
      v460 = vaddv_f32(vadd_f32(*(float32x2_t *)v459.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v459, v459, 8uLL)));
      v461 = 0.0;
      v462 = v1598;
      if (fabsf(v460) >= 0.000015259)
        v461 = vrecpes_f32(v460);
      v429 = v1625.f32[3];
      v463 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v447, *(float32x2_t *)v458.f32, 1), v442, v458.f32[0]), v452, v458, 2), v457, v458, 3), v461), v1598), (float32x4_t)0);
      v464 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v446, *(float32x2_t *)v458.f32, 1), v441, v458.f32[0]), v451, v458, 2), v456, v458, 3), v461), v1598), (float32x4_t)0);
      v465 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v445, *(float32x2_t *)v458.f32, 1), v440, v458.f32[0]), v450, v458, 2), v455, v458, 3), v461), v1598), (float32x4_t)0);
      v466 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v444, *(float32x2_t *)v458.f32, 1), v439, v458.f32[0]), v449, v458, 2), v454, v458, 3), v461), v1598), (float32x4_t)0);
    }
    else
    {
      v431 = v1624;
      v428 = v1625;
      v473 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1624.i8, 0);
      v474 = vsubq_f32(*(float32x4_t *)(a1 + 192), v473);
      v475 = vsubq_f32(*(float32x4_t *)(a1 + 176), v473);
      v476 = vsubq_f32(*(float32x4_t *)(a1 + 160), v473);
      v477 = vsubq_f32(*(float32x4_t *)(a1 + 144), v473);
      v478 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1624.i8, 1);
      v479 = vsubq_f32(*(float32x4_t *)(a1 + 208), v478);
      v480 = vsubq_f32(*(float32x4_t *)(a1 + 224), v478);
      v481 = vsubq_f32(*(float32x4_t *)(a1 + 240), v478);
      v482 = vsubq_f32(*(float32x4_t *)(a1 + 256), v478);
      v483 = (float32x4_t)vdupq_laneq_s32(v1624, 2);
      v484 = vsubq_f32(*(float32x4_t *)v7, v483);
      v485 = vsubq_f32(*(float32x4_t *)(v7 + 16), v483);
      v486 = vsubq_f32(*(float32x4_t *)(v7 + 32), v483);
      v487 = vsubq_f32(*(float32x4_t *)(v7 + 48), v483);
      v488 = (float32x4_t)vdupq_laneq_s32(v1624, 3);
      v489 = vsubq_f32(*(float32x4_t *)(v7 + 112), v488);
      v490 = vsubq_f32(*(float32x4_t *)(v7 + 96), v488);
      v491 = vsubq_f32(*(float32x4_t *)(v7 + 80), v488);
      v492 = vsubq_f32(*(float32x4_t *)(v7 + 64), v488);
      v493 = (int8x16_t)vmulq_f32(v428, v428);
      *(float *)v493.i32 = vrecpes_f32(vaddv_f32(vadd_f32(*(float32x2_t *)v493.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v493, v493, 8uLL))));
      v462 = v1598;
      v463 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v479, *(float32x2_t *)v1625.f32, 1), v477, v1625.f32[0]), v484, v1625, 2), v492, v1625, 3), *(float *)v493.i32), v1598), (float32x4_t)0);
      v464 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v480, *(float32x2_t *)v1625.f32, 1), v476, v1625.f32[0]), v485, v1625, 2), v491, v1625, 3), *(float *)v493.i32), v1598), (float32x4_t)0);
      v465 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v481, *(float32x2_t *)v1625.f32, 1), v475, v1625.f32[0]), v486, v1625, 2), v490, v1625, 3), *(float *)v493.i32), v1598), (float32x4_t)0);
      v466 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v482, *(float32x2_t *)v1625.f32, 1), v474, v1625.f32[0]), v487, v1625, 2), v489, v1625, 3), *(float *)v493.i32), v1598), (float32x4_t)0);
      v429 = v1625.f32[3];
    }
  }
  else
  {
    v428 = v1625;
    v429 = v1625.f32[3];
    if (v427 > 3)
    {
      v467 = vmuls_lane_f32(v1625.f32[3], v1625, 3) + (float)(v1625.f32[0] * v1625.f32[0]);
      v468 = fabsf(v467);
      v469 = vrecpes_f32(v467);
      if (v468 < 0.000015259)
        v469 = 0.0;
      v431 = v1624;
      v470 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1624.i8, 0);
      v471 = (float32x4_t)vdupq_laneq_s32(v1624, 3);
      v433 = vmulq_n_f32(vmlaq_n_f32(vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + 112), v471), v1625, 3), vsubq_f32(*(float32x4_t *)(v7 + 432), v470), v1625.f32[0]), v469);
      v434 = vmulq_n_f32(vmlaq_n_f32(vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + 96), v471), v1625, 3), vsubq_f32(*(float32x4_t *)(v7 + 416), v470), v1625.f32[0]), v469);
      v435 = vmulq_n_f32(vmlaq_n_f32(vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + 80), v471), v1625, 3), vsubq_f32(*(float32x4_t *)(v7 + 400), v470), v1625.f32[0]), v469);
      v436 = vmulq_n_f32(vmlaq_n_f32(vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(v7 + 64), v471), v1625, 3), vsubq_f32(*(float32x4_t *)(v7 + 384), v470), v1625.f32[0]), v469);
    }
    else
    {
      v430 = vrecpes_f32(v1625.f32[0]);
      if (fabsf(v1625.f32[0]) < 0.000015259)
        v430 = 0.0;
      v431 = v1624;
      v432 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1624.i8, 0);
      v433 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + 432), v432), v430);
      v434 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + 416), v432), v430);
      v435 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + 400), v432), v430);
      v436 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + 384), v432), v430);
    }
    __asm { FMOV            V7.4S, #1.0 }
    v463 = vmaxnmq_f32(vminnmq_f32(v436, _Q7), (float32x4_t)0);
    v464 = vmaxnmq_f32(vminnmq_f32(v435, _Q7), (float32x4_t)0);
    v465 = vmaxnmq_f32(vminnmq_f32(v434, _Q7), (float32x4_t)0);
    v466 = vmaxnmq_f32(vminnmq_f32(v433, _Q7), (float32x4_t)0);
    v462 = v1598;
  }
  if (*(char *)(a1 + 134) >= 1)
  {
    v494 = 0.0;
    if (fabsf(v429) >= 0.0039062)
      v494 = vrecpes_f32(v429);
    v495 = (float32x4_t)vdupq_laneq_s32(v431, 3);
    v466 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 496)), (int8x16_t)vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + 112), v495), v494), (int8x16_t)v466);
    v465 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 480)), (int8x16_t)vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + 96), v495), v494), (int8x16_t)v465);
    v464 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 464)), (int8x16_t)vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + 80), v495), v494), (int8x16_t)v464);
    v463 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 448)), (int8x16_t)vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v7 + 64), v495), v494), (int8x16_t)v463);
  }
  v1478 = (uint8x8_t)v1626;
  v496 = v1627 >> 27;
  v497 = vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v465, (float32x4_t)0), v462), (float)v496);
  v498 = vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v464, (float32x4_t)0), v462), (float)v496);
  v499 = vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v463, (float32x4_t)0), v462), (float)v496);
  v1486 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v466, (float32x4_t)0), v462), (float)v496));
  v500 = &ReciprocalTable[v496];
  v501 = vld1q_dup_f32(v500);
  v502 = a1;
  do
  {
    v503 = v502;
    v502 = *(_QWORD *)(v502 + 40);
  }
  while (v502);
  v1480 = vrndxq_f32(v497);
  v1482 = vrndxq_f32(v499);
  v1484 = vrndxq_f32(v498);
  v504 = *(float32x4_t **)(a1 + 32);
  if (v504)
    v462 = vmulq_f32(*v504, v1531);
  v505 = vmulq_f32(v501, v1484);
  v506 = vmulq_f32(v501, v1482);
  v507 = vmulq_f32(v501, v1480);
  v508 = vmulq_f32(v501, v1486);
  v509 = *(unsigned __int16 *)(v503 + 132);
  if (v509 == 392)
  {
    v1577 = v466;
    v1584 = v465;
    v1588 = v464;
    v1593 = v463;
    v1599 = v462;
    v591 = 0;
    v592 = (float32x4_t)vzip1q_s32((int32x4_t)v506, (int32x4_t)v506);
    v592.i32[2] = v506.i32[0];
    v593 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v506, (int8x16_t)v506, 0xCuLL), (int32x4_t)v506);
    v594 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v506.f32, 1);
    v594.i32[3] = v506.i32[2];
    v1547 = v506;
    v595 = (float32x4_t)vextq_s8((int8x16_t)v506, (int8x16_t)vdupq_laneq_s32((int32x4_t)v506, 3), 8uLL);
    v596 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    v1630 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32(v595, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v593), v596);
    v1629 = vmulq_f32(vmlaq_f32(vmulq_f32(v594, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v592), v596);
    v597 = (float32x4_t)vzip1q_s32((int32x4_t)v505, (int32x4_t)v505);
    v597.i32[2] = v505.i32[0];
    v598 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v505, (int8x16_t)v505, 0xCuLL), (int32x4_t)v505);
    v599 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v505.f32, 1);
    v599.i32[3] = v505.i32[2];
    v1553 = v505;
    v600 = (float32x4_t)vextq_s8((int8x16_t)v505, (int8x16_t)vdupq_laneq_s32((int32x4_t)v505, 3), 8uLL);
    v1632 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v595, (float32x4_t)xmmword_20631C4C0), (float32x4_t)xmmword_20631C4D0, v593), (float32x4_t)xmmword_20631C500, v598), (float32x4_t)xmmword_20631C510, v600), v596);
    v1631 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v594, (float32x4_t)xmmword_20631C4B0), (float32x4_t)xmmword_20631C4E0, v592), (float32x4_t)xmmword_20631C4F0, v597), (float32x4_t)xmmword_20631C520, v599), v596);
    v1634 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v595, (float32x4_t)xmmword_20631C540), (float32x4_t)xmmword_20631C550, v593), (float32x4_t)xmmword_20631C580, v598), (float32x4_t)xmmword_20631C590, v600), v596);
    v1633 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v594, (float32x4_t)xmmword_20631C530), (float32x4_t)xmmword_20631C560, v592), (float32x4_t)xmmword_20631C570, v597), (float32x4_t)xmmword_20631C5A0, v599), v596);
    v601 = vmlaq_f32(vmulq_f32(v600, (float32x4_t)xmmword_20631C5C0), (float32x4_t)xmmword_20631C5D0, v598);
    v602 = vmlaq_f32(vmulq_f32(v600, (float32x4_t)xmmword_20631C610), (float32x4_t)xmmword_20631C600, v598);
    v603 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v507, (int8x16_t)v507, 0xCuLL), (int32x4_t)v507);
    v604 = (float32x4_t)vextq_s8((int8x16_t)v507, (int8x16_t)vdupq_laneq_s32((int32x4_t)v507, 3), 8uLL);
    v605 = vmlaq_f32(vmlaq_f32(v601, (float32x4_t)xmmword_20631C600, v603), (float32x4_t)xmmword_20631C610, v604);
    v606 = vmlaq_f32(vmlaq_f32(v602, (float32x4_t)xmmword_20631C5D0, v603), (float32x4_t)xmmword_20631C5C0, v604);
    v607 = vmlaq_f32(vmulq_f32(v604, (float32x4_t)xmmword_20631C590), (float32x4_t)xmmword_20631C580, v603);
    v608 = vmulq_f32(v604, (float32x4_t)xmmword_20631C510);
    v609 = (float32x4_t)vzip1q_s32((int32x4_t)v507, (int32x4_t)v507);
    v609.i32[2] = v507.i32[0];
    v610 = vmlaq_f32(vmulq_f32(v599, (float32x4_t)xmmword_20631C5B0), (float32x4_t)xmmword_20631C5E0, v597);
    v611 = vmlaq_f32(vmulq_f32(v599, (float32x4_t)xmmword_20631C620), (float32x4_t)xmmword_20631C5F0, v597);
    v612 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v507.f32, 1);
    v1541 = v507;
    v612.i32[3] = v507.i32[2];
    v1636 = vmulq_f32(v605, v596);
    v1635 = vmulq_f32(vmlaq_f32(vmlaq_f32(v610, (float32x4_t)xmmword_20631C5F0, v609), (float32x4_t)xmmword_20631C620, v612), v596);
    v1638 = vmulq_f32(v606, v596);
    v1637 = vmulq_f32(vmlaq_f32(vmlaq_f32(v611, (float32x4_t)xmmword_20631C5E0, v609), (float32x4_t)xmmword_20631C5B0, v612), v596);
    v613 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v508, (int8x16_t)v508, 0xCuLL), (int32x4_t)v508);
    v614 = (float32x4_t)vzip1q_s32((int32x4_t)v508, (int32x4_t)v508);
    v614.i32[2] = v508.i32[0];
    v615 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v508.f32, 1);
    v615.i32[3] = v508.i32[2];
    v1533 = v508;
    v616 = (float32x4_t)vextq_s8((int8x16_t)v508, (int8x16_t)vdupq_laneq_s32((int32x4_t)v508, 3), 8uLL);
    v1640 = vmulq_f32(vmlaq_f32(vmlaq_f32(v607, (float32x4_t)xmmword_20631C550, v613), (float32x4_t)xmmword_20631C540, v616), v596);
    v1639 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v612, (float32x4_t)xmmword_20631C5A0), (float32x4_t)xmmword_20631C570, v609), (float32x4_t)xmmword_20631C560, v614), (float32x4_t)xmmword_20631C530, v615), v596);
    v1642 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v608, (float32x4_t)xmmword_20631C500, v603), (float32x4_t)xmmword_20631C4D0, v613), (float32x4_t)xmmword_20631C4C0, v616), v596);
    v1641 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v612, (float32x4_t)xmmword_20631C520), (float32x4_t)xmmword_20631C4F0, v609), (float32x4_t)xmmword_20631C4E0, v614), (float32x4_t)xmmword_20631C4B0, v615), v596);
    _Q0 = (int8x16_t)vmulq_f32(vmlaq_f32(vmulq_f32(v615, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v614), v596);
    v618 = vmulq_f32(vmlaq_f32(vmulq_f32(v616, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v613), v596);
    v1644 = v618;
    v1643 = (float32x4_t)_Q0;
    v619 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v431.i8, 0);
    v620 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v428.f32, 0);
    v621 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v431.i8, 1);
    v622 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v428.f32, 1);
    v623 = (float32x4_t)vdupq_laneq_s32(v431, 2);
    v624 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v428, 2);
    v625 = (float32x4_t)vdupq_laneq_s32(v431, 3);
    v626 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v428, 3);
    v425 = 0uLL;
    v627 = 0uLL;
    v628 = 0uLL;
    v629 = 0uLL;
    v630 = 0uLL;
    v631 = 0uLL;
    v632 = 0uLL;
    v633 = 0uLL;
    do
    {
      _Q0.i32[0] = 0;
      v618.i32[0] = *(unsigned __int8 *)(a1 + 135);
      v634 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v618, _Q0), 0);
      __asm { FMOV            V0.4S, #1.0 }
      v636 = *(float32x4_t *)(v503 + v591 + 912);
      v635 = *(float32x4_t *)(v503 + v591 + 928);
      v637 = (float32x4_t)vbslq_s8(v634, _Q0, (int8x16_t)v635);
      v638 = (float32x4_t)vbslq_s8(v634, _Q0, (int8x16_t)v636);
      v640 = *(float32x4_t *)((char *)&v1629 + v591);
      v639 = *(float32x4_t *)((char *)&v1629 + v591 + 16);
      v641 = vmlaq_f32(v623, v640, v624);
      v642 = vmlaq_f32(v623, v639, v624);
      v643 = vsubq_f32(vmlaq_f32(v621, v639, v622), *(float32x4_t *)(v503 + v591 + 416));
      v644 = vsubq_f32(vmlaq_f32(v625, v640, v626), v636);
      v645 = vsubq_f32(vmlaq_f32(v625, v639, v626), v635);
      v646 = vmulq_f32(vsubq_f32(vmlaq_f32(v619, v640, v620), *(float32x4_t *)(v503 + v591 + 144)), v638);
      v647 = vmulq_f32(vsubq_f32(vmlaq_f32(v619, v639, v620), *(float32x4_t *)(v503 + v591 + 160)), v637);
      v648 = vmulq_f32(vsubq_f32(vmlaq_f32(v621, v640, v622), *(float32x4_t *)(v503 + v591 + 400)), v638);
      v649 = vmulq_f32(v643, v637);
      v618 = vmulq_f32(vsubq_f32(v641, *(float32x4_t *)(v503 + v591 + 656)), v638);
      v650 = vmulq_f32(vsubq_f32(v642, *(float32x4_t *)(v503 + v591 + 672)), v637);
      v633 = vmlaq_f32(v633, v647, v647);
      v632 = vmlaq_f32(v632, v646, v646);
      v631 = vmlaq_f32(v631, v649, v649);
      v630 = vmlaq_f32(v630, v648, v648);
      v629 = vmlaq_f32(v629, v650, v650);
      v628 = vmlaq_f32(v628, v618, v618);
      v627 = vmlaq_f32(v627, v645, v645);
      v425 = vmlaq_f32(v425, v644, v644);
      v591 += 32;
    }
    while (v591 != 256);
    if (a4)
    {
      v618.i32[0] = 0;
      v645.i32[0] = *(unsigned __int8 *)(a1 + 135);
      v651 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v645, (int8x16_t)v618), 0);
      v1559 = *(float32x4_t *)(v7 + 96);
      v1565 = *(float32x4_t *)(v7 + 112);
      v652 = (float32x4_t)vbslq_s8(v651, _Q0, (int8x16_t)v1565);
      v1571 = (float32x4_t)vbslq_s8(v651, _Q0, (int8x16_t)v1559);
      v1525 = *(float32x4_t *)(v7 + 64);
      v1528 = *(float32x4_t *)(v7 + 80);
      v653 = (float32x4_t)vbslq_s8(v651, _Q0, (int8x16_t)v1528);
      v654 = (float32x4_t)vbslq_s8(v651, _Q0, (int8x16_t)v1525);
      v655 = vmlaq_n_f32(v619, v1547, v428.f32[0]);
      v656 = vmlaq_n_f32(v619, v1553, v428.f32[0]);
      v657 = vmlaq_n_f32(v619, v1541, v428.f32[0]);
      v658 = vmlaq_lane_f32(v621, v1533, *(float32x2_t *)v428.f32, 1);
      v659 = vmlaq_lane_f32(v621, v1541, *(float32x2_t *)v428.f32, 1);
      v660 = vmlaq_lane_f32(v621, v1553, *(float32x2_t *)v428.f32, 1);
      v661 = vmlaq_lane_f32(v621, v1547, *(float32x2_t *)v428.f32, 1);
      v662 = vmlaq_laneq_f32(v623, v1533, v428, 2);
      v663 = vmlaq_laneq_f32(v623, v1541, v428, 2);
      v664 = vmlaq_laneq_f32(v623, v1553, v428, 2);
      v665 = vmlaq_laneq_f32(v623, v1547, v428, 2);
      v666 = vmlaq_laneq_f32(v625, v1533, v428, 3);
      v667 = vmlaq_laneq_f32(v625, v1541, v428, 3);
      v668 = vmlaq_laneq_f32(v625, v1553, v428, 3);
      v669 = vmlaq_laneq_f32(v625, v1547, v428, 3);
      v670 = vsubq_f32(vmlaq_n_f32(v619, v1533, v428.f32[0]), *(float32x4_t *)(a1 + 192));
      v671 = vsubq_f32(v655, *(float32x4_t *)(a1 + 144));
      v672 = vsubq_f32(v660, *(float32x4_t *)(a1 + 224));
      v673 = vsubq_f32(v658, *(float32x4_t *)(a1 + 256));
      v674 = vsubq_f32(v662, *(float32x4_t *)(v7 + 48));
      v675 = vsubq_f32(v669, v1525);
      v676 = vsubq_f32(v668, v1528);
      v677 = vsubq_f32(v667, v1559);
      v678 = vsubq_f32(v666, v1565);
      v679 = vmulq_f32(v671, v654);
      v680 = vmulq_f32(vsubq_f32(v656, *(float32x4_t *)(a1 + 160)), v653);
      v681 = vmulq_f32(vsubq_f32(v657, *(float32x4_t *)(a1 + 176)), v1571);
      v682 = vmulq_f32(v670, v652);
      v683 = vmulq_f32(v673, v652);
      v684 = vmulq_f32(vsubq_f32(v659, *(float32x4_t *)(a1 + 240)), v1571);
      v685 = vmulq_f32(v672, v653);
      v686 = vmulq_f32(vsubq_f32(v661, *(float32x4_t *)(a1 + 208)), v654);
      v687 = vmulq_f32(v674, v652);
      v688 = vmulq_f32(vsubq_f32(v663, *(float32x4_t *)(v7 + 32)), v1571);
      v689 = vmulq_f32(vsubq_f32(v664, *(float32x4_t *)(v7 + 16)), v653);
      v690 = vmulq_f32(vsubq_f32(v665, *(float32x4_t *)v7), v654);
      a4[6] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v684, v684), *(float32x2_t *)v1599.f32, 1), vmulq_f32(v681, v681), v1599.f32[0]), vmulq_f32(v688, v688), v1599, 2), vmulq_f32(v677, v677), v1599, 3);
      a4[7] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v683, v683), *(float32x2_t *)v1599.f32, 1), vmulq_f32(v682, v682), v1599.f32[0]), vmulq_f32(v687, v687), v1599, 2), vmulq_f32(v678, v678), v1599, 3);
      a4[4] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v686, v686), *(float32x2_t *)v1599.f32, 1), vmulq_f32(v679, v679), v1599.f32[0]), vmulq_f32(v690, v690), v1599, 2), vmulq_f32(v675, v675), v1599, 3);
      a4[5] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v685, v685), *(float32x2_t *)v1599.f32, 1), vmulq_f32(v680, v680), v1599.f32[0]), vmulq_f32(v689, v689), v1599, 2), vmulq_f32(v676, v676), v1599, 3);
    }
    v584 = vpaddq_f32(vpaddq_f32(vaddq_f32(v632, v633), vaddq_f32(v630, v631)), vpaddq_f32(vaddq_f32(v628, v629), vaddq_f32(v425, v627)));
    v691 = vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v630, *(float32x2_t *)v1599.f32, 1), v632, v1599.f32[0]), v628, v1599, 2), v425, v1599, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v631, *(float32x2_t *)v1599.f32, 1), v633, v1599.f32[0]), v629, v1599, 2), v627, v1599, 3));
    v691.i64[0] = vpaddq_f32(v691, v691).u64[0];
    *(float32x2_t *)v425.f32 = vpadd_f32(*(float32x2_t *)v691.f32, *(float32x2_t *)v691.f32);
    v464 = v1588;
    v463 = v1593;
    v465 = v1584;
    v466 = v1577;
    if (a4)
      goto LABEL_80;
  }
  else
  {
    if (v509 != 324)
    {
      v584 = 0uLL;
      v425.i32[0] = 2139095040;
      if (!a4)
        goto LABEL_81;
      goto LABEL_80;
    }
    v501.i32[0] = 0;
    v510 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v431.i8, 0);
    v511 = vmlaq_n_f32(v510, v508, v428.f32[0]);
    v512 = vmlaq_n_f32(v510, v507, v428.f32[0]);
    v513 = vmlaq_n_f32(v510, v505, v428.f32[0]);
    v514 = vmlaq_n_f32(v510, v506, v428.f32[0]);
    v515 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v431.i8, 1);
    v516 = vmlaq_lane_f32(v515, v506, *(float32x2_t *)v428.f32, 1);
    v517 = vmlaq_lane_f32(v515, v505, *(float32x2_t *)v428.f32, 1);
    v518 = vmlaq_lane_f32(v515, v507, *(float32x2_t *)v428.f32, 1);
    v519 = (float32x4_t)vdupq_laneq_s32(v431, 2);
    v520 = vmlaq_lane_f32(v515, v508, *(float32x2_t *)v428.f32, 1);
    v521 = vmlaq_laneq_f32(v519, v506, v428, 2);
    v522 = vmlaq_laneq_f32(v519, v505, v428, 2);
    v523 = vmlaq_laneq_f32(v519, v507, v428, 2);
    v524 = vmlaq_laneq_f32(v519, v508, v428, 2);
    v525 = (float32x4_t)vdupq_laneq_s32(v431, 3);
    v526 = vmlaq_laneq_f32(v525, v506, v428, 3);
    v527 = vmlaq_laneq_f32(v525, v505, v428, 3);
    v528 = vmlaq_laneq_f32(v525, v507, v428, 3);
    v529 = vmlaq_laneq_f32(v525, v508, v428, 3);
    v530 = vsubq_f32(v513, *(float32x4_t *)(a1 + 160));
    v531 = vsubq_f32(v518, *(float32x4_t *)(a1 + 240));
    v532 = vsubq_f32(v517, *(float32x4_t *)(a1 + 224));
    v533 = vsubq_f32(v516, *(float32x4_t *)(a1 + 208));
    v534 = vsubq_f32(v523, *(float32x4_t *)(v7 + 32));
    v535 = vsubq_f32(v522, *(float32x4_t *)(v7 + 16));
    v536 = vsubq_f32(v521, *(float32x4_t *)v7);
    v537 = *(float32x4_t *)(v7 + 64);
    v538 = *(float32x4_t *)(v7 + 80);
    v539 = *(float32x4_t *)(v7 + 96);
    v540 = *(float32x4_t *)(v7 + 112);
    v541 = vsubq_f32(v529, v540);
    v542 = vsubq_f32(v528, v539);
    v543 = vsubq_f32(v527, v538);
    v544 = vsubq_f32(v526, v537);
    v529.i8[0] = *(_BYTE *)(a1 + 135);
    v545 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v529, (int8x16_t)v501), 0);
    __asm { FMOV            V5.4S, #1.0 }
    v547 = (float32x4_t)vbslq_s8(v545, _Q5, (int8x16_t)v537);
    v548 = (float32x4_t)vbslq_s8(v545, _Q5, (int8x16_t)v538);
    v549 = (float32x4_t)vbslq_s8(v545, _Q5, (int8x16_t)v539);
    v550 = (float32x4_t)vbslq_s8(v545, _Q5, (int8x16_t)v540);
    v551 = vmulq_f32(vsubq_f32(v511, *(float32x4_t *)(a1 + 192)), v550);
    v552 = vmulq_f32(vsubq_f32(v512, *(float32x4_t *)(a1 + 176)), v549);
    v553 = vmulq_f32(v530, v548);
    v554 = vmulq_f32(vsubq_f32(v514, *(float32x4_t *)(a1 + 144)), v547);
    v555 = vmulq_f32(v533, v547);
    v556 = vmulq_f32(v532, v548);
    v557 = vmulq_f32(v531, v549);
    v558 = vmulq_f32(vsubq_f32(v520, *(float32x4_t *)(a1 + 256)), v550);
    v559 = vmulq_f32(v536, v547);
    v560 = vmulq_f32(v535, v548);
    v561 = vmulq_f32(v534, v549);
    v562 = vmulq_f32(vsubq_f32(v524, *(float32x4_t *)(v7 + 48)), v550);
    v563 = vmulq_f32(v554, v554);
    v564 = vmulq_f32(v553, v553);
    v565 = vmulq_f32(v552, v552);
    v566 = vmulq_f32(v551, v551);
    v567 = vmulq_f32(v558, v558);
    v568 = vmulq_f32(v557, v557);
    v569 = vmulq_f32(v556, v556);
    v570 = vmulq_f32(v555, v555);
    v571 = vmulq_f32(v562, v562);
    v572 = vmulq_f32(v561, v561);
    v573 = vmulq_f32(v560, v560);
    v574 = vmulq_f32(v559, v559);
    v575 = vmulq_f32(v544, v544);
    v576 = vmulq_f32(v543, v543);
    v577 = vmulq_f32(v542, v542);
    v578 = vmulq_f32(v541, v541);
    v579 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v567, *(float32x2_t *)v462.f32, 1), v566, v462.f32[0]), v571, v462, 2), v578, v462, 3);
    v580 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v568, *(float32x2_t *)v462.f32, 1), v565, v462.f32[0]), v572, v462, 2), v577, v462, 3);
    v581 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v569, *(float32x2_t *)v462.f32, 1), v564, v462.f32[0]), v573, v462, 2), v576, v462, 3);
    v582 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v570, *(float32x2_t *)v462.f32, 1), v563, v462.f32[0]), v574, v462, 2), v575, v462, 3);
    if (a4)
    {
      a4[4] = v582;
      a4[5] = v581;
      a4[6] = v580;
      a4[7] = v579;
    }
    v583 = vaddq_f32(v563, v565);
    v425 = vaddq_f32(vaddq_f32(v575, v577), vaddq_f32(v576, v578));
    v584 = vpaddq_f32(vpaddq_f32(vaddq_f32(v583, vaddq_f32(v564, v566)), vaddq_f32(vaddq_f32(v570, v568), vaddq_f32(v569, v567))), vpaddq_f32(vaddq_f32(vaddq_f32(v574, v572), vaddq_f32(v573, v571)), v425));
    v585 = vaddq_f32(vaddq_f32(v582, v580), vaddq_f32(v581, v579));
    v585.i64[0] = vpaddq_f32(v585, v585).u64[0];
    *(float32x2_t *)v425.f32 = vpadd_f32(*(float32x2_t *)v585.f32, *(float32x2_t *)v585.f32);
    if (a4)
    {
LABEL_80:
      a4[8].i32[0] = v425.i32[0];
      *a4 = v463;
      a4[1] = v464;
      a4[2] = v465;
      a4[3] = v466;
    }
  }
LABEL_81:
  v1477 = 0u;
  v1464 = v426;
  if ((v426 & 0x18000) != 0 && v425.f32[0] > a3[1])
  {
    v1455 = a4;
    if (*(_QWORD *)(a1 + 40))
    {
      v586 = (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v584), (int8x16_t)v584, 8uLL);
      v587 = vmaxnmq_f32(v584, v586);
      v588 = vminnmq_f32(v584, v586);
      v589 = vminnmq_f32(v588, (float32x4_t)vrev64q_s32((int32x4_t)v588));
      v589.f32[0] = 0.25 * vmlaq_f32(vmaxnmq_f32(v587, (float32x4_t)vrev64q_s32((int32x4_t)v587)), v1531, v589).f32[0];
      v590 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v584, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v589.f32, 0)), (int8x16_t)xmmword_20631C0F0));
      if (!*(_BYTE *)(a1 + 136))
        v590 |= 8u;
    }
    else
    {
      v692 = vmaxnmq_f32(v584, (float32x4_t)vextq_s8((int8x16_t)v584, (int8x16_t)v584, 8uLL));
      v590 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_f32(vmaxnmq_f32(v692, (float32x4_t)vrev64q_s32((int32x4_t)v692)), v584), (int8x16_t)xmmword_20631C0F0));
      if ((v590 & 8) != 0)
        v590 &= 8u;
    }
    v1585 = v590;
    v1463 = 0;
    v693 = a1 + 144;
    v1506 = a1 + 400;
    v694 = 1;
    v1458 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1581.f32, 1);
    v1459 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1581.f32, 0);
    v1456 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1581, 3);
    v1457 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1581, 2);
    v1477 = 0u;
    v1461 = 0u;
    v1462 = 0u;
    v1460 = 0u;
    while (1)
    {
      if (v425.f32[0] < a3[1])
        goto LABEL_183;
      if ((v694 & v1585) == 0)
        goto LABEL_182;
      v1589 = v425;
      if (*(float *)(a1 + 124) > 961.0)
      {
        v696 = *(float32x4_t *)(v7 + 416);
        v695 = *(float32x4_t *)(v7 + 432);
        v698 = *(float32x4_t *)(v7 + 384);
        v697 = *(float32x4_t *)(v7 + 400);
        v700 = *(float32x4_t *)(v7 + 96);
        v699 = *(float32x4_t *)(v7 + 112);
        v702 = *(float32x4_t *)(v7 + 64);
        v701 = *(float32x4_t *)(v7 + 80);
        v703 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32(v698, v696), vmaxnmq_f32(v697, v695));
        v704 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32(v702, v700), vmaxnmq_f32(v701, v699));
        v705 = (int32x4_t)vminnmq_f32(vminnmq_f32(v698, v696), vminnmq_f32(v697, v695));
        v706 = (int32x4_t)vminnmq_f32(vminnmq_f32(v702, v700), vminnmq_f32(v701, v699));
        v707 = vmaxnmq_f32((float32x4_t)vzip1q_s32(v703, v704), (float32x4_t)vzip2q_s32(v703, v704));
        v708 = vminnmq_f32((float32x4_t)vzip1q_s32(v705, v706), (float32x4_t)vzip2q_s32(v705, v706));
        v709 = (int32x4_t)vminnmq_f32(v708, (float32x4_t)vextq_s8((int8x16_t)v708, (int8x16_t)v708, 8uLL));
        v710 = vzip1q_s32(v709, v709);
        v710.i32[2] = v709.i32[0];
        v711 = (int32x4_t)vmaxnmq_f32(v707, (float32x4_t)vextq_s8((int8x16_t)v707, (int8x16_t)v707, 8uLL));
        v712 = vzip1q_s32(v711, v711);
        v712.i32[2] = v711.i32[0];
        v1594 = (float32x4_t)v710;
        v1600 = (float32x4_t)v712;
        v713 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v709.i8, 0);
        v714 = (float32x4_t)vdupq_n_s32(0x3A88642Au);
        v715 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v714, vsubq_f32(v696, v713)), (int16x8_t)vcgtq_f32(v714, vsubq_f32(v695, v713)));
        v716 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v711.i8, 0);
        v717 = (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v714, vsubq_f32(v716, v696)), (int16x8_t)vcgtq_f32(v714, vsubq_f32(v716, v695)));
        v718 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v709.i8, 1);
        v719 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v711.i8, 1);
        v720 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vcltzq_s16(vshlq_n_s16((int16x8_t)vmovl_u8((uint8x8_t)vorr_s8(vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v714, vsubq_f32(v719, v702)), (int16x8_t)vcgtq_f32(v714, vsubq_f32(v719, v701)))), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v714, vsubq_f32(v716, v698)), (int16x8_t)vcgtq_f32(
                                                                                                 v714,
                                                                                                 vsubq_f32(v716, v697))))),
                                                                              vorr_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v714, vsubq_f32(v698, v713)), (int16x8_t)vcgtq_f32(v714, vsubq_f32(v697, v713)))), vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_f32(v714, vsubq_f32(v702, v718)), (int16x8_t)vcgtq_f32(v714, vsubq_f32(v701, v718))))))), 0xFuLL)), (int8x16_t)xmmword_20631C0D0), vandq_s8(
                              vorrq_s8(vorrq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v714, vsubq_f32(v719, v700)), (int16x8_t)vcgtq_f32(v714, vsubq_f32(v719, v699))), v717), vorrq_s8(v715, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v714, vsubq_f32(v700, v718)), (int16x8_t)vcgtq_f32(v714, vsubq_f32(v699, v718))))), (int8x16_t)xmmword_20631C0C0));
        v720.i16[0] = vaddvq_s16(v720);
        *(int8x8_t *)v720.i8 = vcnt_s8(*(int8x8_t *)v720.i8);
        v720.i16[0] = vaddlv_u8(*(uint8x8_t *)v720.i8);
        v721 = WeightInfoForSingleLineDualWeight_4x4(v720.i32[0], 4);
        v723 = v1594;
        v722 = v1600;
        v1622 = v721;
        v724 = v694;
        LODWORD(v725) = 31 - __clz(v694);
        v726 = (int)v725;
        v727 = v694 & 8;
        goto LABEL_160;
      }
      if (*(_BYTE *)(a1 + 136))
        v728 = 0;
      else
        v728 = -1;
      if (*(_BYTE *)(a1 + 136))
        v729 = 6;
      else
        v729 = 8;
      WeightInfoForSingleLineDualWeight_4x4(2, v729);
      v724 = v694;
      v730 = __clz(v694);
      v725 = 31 - v730;
      v1601 = FindDualWeights_6x5_kVectorMask[31 - v730];
      v731 = (float32x4_t *)(v693 + ((31 - v730) << 6));
      v732 = *v731;
      v733 = v731[1];
      v734 = v731[2];
      v735 = v731[3];
      v1613 = v1581;
      v1572 = *(float32x4_t *)(a1 + 144);
      v1578 = *(float32x4_t *)(a1 + 160);
      v736 = vsubq_f32(v1572, v1459);
      v737 = *(float32x4_t *)(a1 + 192);
      v738 = vsubq_f32(v1578, v1459);
      v1566 = *(float32x4_t *)(a1 + 176);
      v739 = vsubq_f32(v1566, v1459);
      v740 = vsubq_f32(v737, v1459);
      v741 = (const float *)((unint64_t)&v1613 & 0xFFFFFFFFFFFFFFF3 | (4 * ((31 - v730) & 3)));
      v742 = *(float32x4_t *)(a1 + 256);
      v1554 = *(float32x4_t *)(a1 + 208);
      v1560 = *(float32x4_t *)(a1 + 224);
      v743 = vsubq_f32(v1554, v1458);
      v744 = vsubq_f32(v1560, v1458);
      v1520 = *(float32x4_t *)(a1 + 240);
      v745 = vsubq_f32(v1520, v1458);
      v746 = vsubq_f32(v742, v1458);
      v747 = *(float32x4_t *)v7;
      v1534 = *(float32x4_t *)(v7 + 16);
      v748 = vsubq_f32(v1534, v1457);
      v1515 = *(float32x4_t *)(v7 + 32);
      v749 = vsubq_f32(v1515, v1457);
      v1548 = *(float32x4_t *)(v7 + 48);
      v750 = vsubq_f32(v1548, v1457);
      v751 = vld1q_dup_f32(v741);
      v752 = vsubq_f32(v735, v751);
      v753 = vsubq_f32(v734, v751);
      v754 = vsubq_f32(v733, v751);
      v755 = vsubq_f32(v732, v751);
      v756 = *(float32x2_t **)(a1 + 32);
      v757 = vmulq_f32(v740, v740);
      v758 = vmulq_f32(v739, v739);
      v759 = vmulq_f32(v738, v738);
      v760 = vmulq_f32(v736, v736);
      v761 = vmulq_f32(v746, v746);
      v762 = vmulq_f32(v745, v745);
      v763 = vmulq_f32(v744, v744);
      v764 = vmulq_f32(v743, v743);
      v765 = vmulq_f32(v750, v750);
      v766 = vmulq_f32(v749, v749);
      v767 = vmulq_f32(v748, v748);
      v768 = vsubq_f32(*(float32x4_t *)v7, v1457);
      v769 = vmulq_f32(v768, v768);
      v771 = *(float32x4_t *)(v7 + 96);
      v770 = *(float32x4_t *)(v7 + 112);
      v772 = vsubq_f32(v770, v1456);
      v773 = vmulq_f32(v772, v772);
      v774 = vsubq_f32(v771, v1456);
      v775 = vmulq_f32(v774, v774);
      v777 = *(float32x4_t *)(v7 + 64);
      v776 = *(float32x4_t *)(v7 + 80);
      v778 = vsubq_f32(v776, v1456);
      v779 = vmulq_f32(v778, v778);
      v780 = vsubq_f32(v777, v1456);
      v781 = vmulq_f32(v780, v780);
      if (v756)
      {
        v782 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v761, *v756, 1), v757, COERCE_FLOAT(*(_OWORD *)v756->f32)), v765, *(float32x4_t *)v756->f32, 2), v773, *(float32x4_t *)v756->f32, 3), v1531);
        v783 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v762, *v756, 1), v758, COERCE_FLOAT(*(_OWORD *)v756->f32)), v766, *(float32x4_t *)v756->f32, 2), v775, *(float32x4_t *)v756->f32, 3), v1531);
        v784 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v764, *v756, 1), v760, COERCE_FLOAT(*(_OWORD *)v756->f32)), v769, *(float32x4_t *)v756->f32, 2), v781, *(float32x4_t *)v756->f32, 3), v1531);
        v785 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v763, *v756, 1), v759, COERCE_FLOAT(*(_OWORD *)v756->f32)), v767, *(float32x4_t *)v756->f32, 2), v779, *(float32x4_t *)v756->f32, 3), v1531);
        v1612 = *(_OWORD *)v756->f32;
        v786 = (const float *)((unint64_t)&v1612 & 0xFFFFFFFFFFFFFFF3 | (4 * (v725 & 3)));
        v787 = vld1q_dup_f32(v786);
        v788 = vnegq_f32(v787);
        v789 = (int8x16_t)vmlaq_f32(v785, v754, vmulq_f32(v754, v788));
        v790 = (int8x16_t)vmlaq_f32(v784, v755, vmulq_f32(v755, v788));
        v791 = (int8x16_t)vmlaq_f32(v783, v753, vmulq_f32(v753, v788));
        v792 = (int8x16_t)vmlaq_f32(v782, v752, vmulq_f32(v752, v788));
      }
      else
      {
        v793 = vaddq_f32(vaddq_f32(vaddq_f32(v757, v761), v765), v773);
        v790 = (int8x16_t)vmlsq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v760, v764), v769), v781), v755, v755);
        v789 = (int8x16_t)vmlsq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v759, v763), v767), v779), v754, v754);
        v791 = (int8x16_t)vmlsq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v758, v762), v766), v775), v753, v753);
        v792 = (int8x16_t)vmlsq_f32(v793, v752, v752);
      }
      v794 = *(unsigned __int8 *)(a1 + 135);
      v795 = (float32x4_t)v790;
      v796 = (float32x4_t)v789;
      v797 = (float32x4_t)v791;
      v798 = (float32x4_t)v792;
      if (*(_BYTE *)(a1 + 135))
      {
        v799.i64[0] = 0x7F0000007FLL;
        v799.i64[1] = 0x7F0000007FLL;
        v797 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 480)), v799, v791);
        v796 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 464)), v799, v789);
        v795 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 448)), v799, v790);
        v798 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 496)), v799, v792);
      }
      v800 = vmaxnmq_f32(v795, v797);
      v801 = vmaxnmq_f32(v796, v798);
      v802 = vbslq_s8((int8x16_t)vcgtq_f32(v797, v795), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
      v803 = vbslq_s8((int8x16_t)vcgtq_f32(v798, v796), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
      v804 = (int8x16_t)vmaxnmq_f32(v800, v801);
      v805 = vbslq_s8((int8x16_t)vcgtq_f32(v801, v800), v803, v802);
      v803.i64[0] = vextq_s8(v804, v804, 8uLL).u64[0];
      v806 = vmaxnm_f32(*(float32x2_t *)v804.i8, *(float32x2_t *)v803.i8);
      v1611 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v803.i8, *(float32x2_t *)v804.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v805, v805, 8uLL), *(int8x8_t *)v805.i8);
      v807 = *(float32x4_t *)(v1506
                            + 16
                            * *(unsigned int *)((unint64_t)&v1611 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                                 * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(v806, (float32x2_t)vdup_lane_s32((int32x2_t)v806, 1))) & 1))));
      v1542 = vcltzq_s32(v1601);
      v808 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v1581, v807), (int8x16_t)v1542);
      v1470 = (float32x4_t)v791;
      v1472 = (float32x4_t)v792;
      v1467 = (float32x4_t)v789;
      v1468 = (float32x4_t)v790;
      if (v756)
      {
        v809 = *(float32x4_t *)v756->f32;
        v810 = vmulq_f32(*(float32x4_t *)v756->f32, v808);
      }
      else
      {
        v809 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
        v810 = vmulq_f32(v808, v809);
      }
      v808.i32[0] = 0;
      v809.i32[0] = v794;
      v811 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v809, (int8x16_t)v808), 0);
      v812 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v807.f32, 0);
      v813 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v807.f32, 1);
      v814 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v807, 2);
      v815 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v807, 3);
      v816 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1560, v813), *(float32x2_t *)v810.f32, 1), vsubq_f32(v1578, v812), v810.f32[0]), vsubq_f32(v1534, v814), v810, 2), vsubq_f32(v776, v815), v810, 3);
      v818 = *(int16x8_t *)(v7 + 448);
      v817 = *(int16x8_t *)(v7 + 464);
      v819 = (int8x16_t)vcltzq_s32((int32x4_t)v817);
      v820.i64[0] = 0x7F0000007FLL;
      v820.i64[1] = 0x7F0000007FLL;
      v821 = (float32x4_t)vbslq_s8(v811, v816, vbslq_s8(v819, v820, v816));
      v822 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v742, v813), *(float32x2_t *)v810.f32, 1), vsubq_f32(v737, v812), v810.f32[0]), vsubq_f32(v1548, v814), v810, 2), vsubq_f32(v770, v815), v810, 3);
      v824 = *(int16x8_t *)(v7 + 480);
      v823 = *(int16x8_t *)(v7 + 496);
      v825 = (int8x16_t)vcltzq_s32((int32x4_t)v823);
      v826 = (float32x4_t)vbslq_s8(v811, v822, vbslq_s8(v825, v820, v822));
      v827 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1554, v813), *(float32x2_t *)v810.f32, 1), vsubq_f32(v1572, v812), v810.f32[0]), vsubq_f32(v747, v814), v810, 2), vsubq_f32(v777, v815), v810, 3);
      v828 = (int8x16_t)vcltzq_s32((int32x4_t)v818);
      v829 = (float32x4_t)vbslq_s8(v811, v827, vbslq_s8(v828, v820, v827));
      v830 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1520, v813), *(float32x2_t *)v810.f32, 1), vsubq_f32(v1566, v812), v810.f32[0]), vsubq_f32(v1515, v814), v810, 2), vsubq_f32(v771, v815), v810, 3);
      v831 = (int8x16_t)vcltzq_s32((int32x4_t)v824);
      v832 = (float32x4_t)vbslq_s8(v811, v830, vbslq_s8(v831, v820, v830));
      v833 = vmaxnmq_f32(v821, v826);
      v834 = (int8x16_t)vcgtq_f32(v826, v821);
      v835 = vmaxnmq_f32(v829, v832);
      v836 = vbslq_s8((int8x16_t)vcgtq_f32(v832, v829), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
      v837 = (int8x16_t)vmaxnmq_f32(v835, v833);
      v838 = vbslq_s8((int8x16_t)vcgtq_f32(v833, v835), vbslq_s8(v834, (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v836);
      v835.i64[0] = vextq_s8(v837, v837, 8uLL).u64[0];
      v839 = (int32x4_t)vextq_s8(v838, v838, 8uLL);
      *(int8x8_t *)v838.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v835.f32, *(float32x2_t *)v837.i8), *(int8x8_t *)v839.i8, *(int8x8_t *)v838.i8);
      *(float32x2_t *)v835.f32 = vmaxnm_f32(*(float32x2_t *)v837.i8, *(float32x2_t *)v835.f32);
      *(int32x2_t *)v839.i8 = vdup_lane_s32(*(int32x2_t *)v835.f32, 1);
      v1610 = v838.i64[0];
      v840 = *(float32x4_t *)(v1506
                            + 16
                            * *(unsigned int *)((unint64_t)&v1610 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                                 * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v835.f32, *(float32x2_t *)v839.i8)) & 1))));
      if ((v694 & 8) != 0 || !v794)
      {
        v842 = v732;
        v843 = v733;
        v844 = v734;
        v845 = v735;
      }
      else
      {
        v841 = (int8x16_t)vdupq_n_s32(0x7F800000u);
        v842 = (float32x4_t)vbslq_s8(v828, v841, (int8x16_t)v732);
        v839.i64[0] = 0x7F0000007FLL;
        v839.i64[1] = 0x7F0000007FLL;
        v732 = (float32x4_t)vbslq_s8(v828, (int8x16_t)v839, (int8x16_t)v732);
        v843 = (float32x4_t)vbslq_s8(v819, v841, (int8x16_t)v733);
        v733 = (float32x4_t)vbslq_s8(v819, (int8x16_t)v839, (int8x16_t)v733);
        v844 = (float32x4_t)vbslq_s8(v831, v841, (int8x16_t)v734);
        v734 = (float32x4_t)vbslq_s8(v831, (int8x16_t)v839, (int8x16_t)v734);
        v845 = (float32x4_t)vbslq_s8(v825, v841, (int8x16_t)v735);
        v735 = (float32x4_t)vbslq_s8(v825, (int8x16_t)v839, (int8x16_t)v735);
      }
      v839.i32[0] = 0;
      v846 = vminnmq_f32(v843, v845);
      v847 = vmaxnmq_f32(vmaxnmq_f32(v732, v734), vmaxnmq_f32(v733, v735));
      v848 = vminnmq_f32(vminnmq_f32(v842, v844), v846);
      v849 = vmaxnmq_f32(v847, (float32x4_t)vextq_s8((int8x16_t)v847, (int8x16_t)v847, 8uLL));
      v850 = vminnmq_f32(v848, (float32x4_t)vextq_s8((int8x16_t)v848, (int8x16_t)v848, 8uLL));
      v851 = (int8x16_t)vmaxnmq_f32(v849, (float32x4_t)vrev64q_s32((int32x4_t)v849));
      v852 = (int8x16_t)vminnmq_f32(v850, (float32x4_t)vrev64q_s32((int32x4_t)v850));
      v853 = vcgtq_f32(v807, v840);
      if ((_DWORD)v730 == 30)
        v854 = v853.i32[0];
      else
        v854 = v853.i32[1];
      v853.i32[0] = v854;
      v855 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v853, v839), 0);
      v856 = vbslq_s8(v855, v851, v852);
      v857 = vbslq_s8(v855, v852, v851);
      v858 = (int8x16_t)vcltzq_s32(vshlq_n_s32(v1542, 0x1FuLL));
      v1479 = v857;
      v859 = vbslq_s8(v858, v857, (int8x16_t)v807);
      v860 = (float32x4_t)vbslq_s8(v858, v856, (int8x16_t)v840);
      v1490 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v859.i8, 0);
      v861 = vsubq_f32(v1572, v1490);
      v862 = vsubq_f32(v1578, v1490);
      v863 = vsubq_f32(v1566, v1490);
      v864 = vsubq_f32(v737, v1490);
      v865 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v859.i8, 1);
      v866 = (int32x4_t)v859;
      v1595 = (float32x4_t)v859;
      v867 = vsubq_f32(v742, v865);
      v868 = vsubq_f32(v1520, v865);
      v869 = vsubq_f32(v1560, v865);
      v1488 = v865;
      v870 = vmlaq_f32(vmulq_f32(v867, v867), v864, v864);
      v871 = vsubq_f32(v1554, v865);
      v872 = vmlaq_f32(vmulq_f32(v868, v868), v863, v863);
      v873 = (float32x4_t)vdupq_laneq_s32(v866, 2);
      v874 = vmlaq_f32(vmulq_f32(v869, v869), v862, v862);
      v875 = vsubq_f32(v1548, v873);
      v876 = vmlaq_f32(vmulq_f32(v871, v871), v861, v861);
      v877 = vsubq_f32(v747, v873);
      v878 = vmlaq_f32(v876, v877, v877);
      v879 = vsubq_f32(v1534, v873);
      v880 = vmlaq_f32(v874, v879, v879);
      v881 = vsubq_f32(v1515, v873);
      v882 = vmlaq_f32(v872, v881, v881);
      v1494 = v873;
      v1498 = (float32x4_t)vdupq_laneq_s32(v866, 3);
      v883 = vsubq_f32(v770, v1498);
      v884 = vmlaq_f32(vmlaq_f32(v870, v875, v875), v883, v883);
      v885 = vsubq_f32(v771, v1498);
      v886 = vmlaq_f32(v882, v885, v885);
      v887 = vsubq_f32(v776, v1498);
      v888 = vmlaq_f32(v880, v887, v887);
      v889 = vsubq_f32(v777, v1498);
      v890 = vmlaq_f32(v878, v889, v889);
      v891 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v860.f32, 0);
      v892 = vsubq_f32(v737, v891);
      v893 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v860.f32, 1);
      v894 = vsubq_f32(v742, v893);
      v895 = vmlaq_f32(vmulq_f32(v894, v894), v892, v892);
      v896 = vsubq_f32(v1566, v891);
      v897 = vsubq_f32(v1520, v893);
      v898 = vmlaq_f32(vmulq_f32(v897, v897), v896, v896);
      v899 = vsubq_f32(v1572, v891);
      v1502 = v891;
      v900 = vsubq_f32(v1578, v891);
      v901 = vsubq_f32(v1560, v893);
      v1509 = v893;
      v902 = vsubq_f32(v1554, v893);
      v903 = vmlaq_f32(vmulq_f32(v901, v901), v900, v900);
      v1602 = (int8x16_t)v860;
      v904 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v860, 2);
      v905 = vsubq_f32(v1548, v904);
      v906 = vsubq_f32(v1515, v904);
      v907 = vsubq_f32(v1534, v904);
      v1521 = v904;
      v908 = vsubq_f32(v747, v904);
      v909 = vmlaq_f32(vmulq_f32(v902, v902), v899, v899);
      v910 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v860, 3);
      v911 = vsubq_f32(v777, v910);
      v912 = vsubq_f32(v776, v910);
      v913 = vsubq_f32(v771, v910);
      v1535 = v910;
      v914 = vsubq_f32(v770, v910);
      v915 = vmlaq_f32(vmlaq_f32(v895, v905, v905), v914, v914);
      v916 = (float32x4_t)vdupq_n_s32(0x3A88642Au);
      v917 = WeightInfoForSingleLineDualWeight_4x4(-vaddvq_s8(vorrq_s8(vuzp1q_s8((int8x16_t)vuzp1q_s16(v818, v817), (int8x16_t)vuzp1q_s16(v824, v823)), vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcgtq_f32(v916, v890), (int8x16_t)vcgtq_f32(v916, vmlaq_f32(vmlaq_f32(v909, v908, v908), v911, v911))), (int16x8_t)vorrq_s8((int8x16_t)vcgtq_f32(v916, v888), (int8x16_t)vcgtq_f32(v916, vmlaq_f32(vmlaq_f32(v903, v907, v907),
                                                                                v912,
                                                                                v912)))),
                                       (int8x16_t)vuzp1q_s16((int16x8_t)vorrq_s8((int8x16_t)vcgtq_f32(v916, v886), (int8x16_t)vcgtq_f32(v916, vmlaq_f32(vmlaq_f32(v898, v906, v906), v913, v913))), (int16x8_t)vorrq_s8((int8x16_t)vcgtq_f32(v916, v884), (int8x16_t)vcgtq_f32(v916, v915)))))), v729);
      v1622 = v917;
      v918 = ReciprocalTable[v917 >> 27];
      *(float *)v919.i32 = v918 * (float)((float)((float)(int)(v728 + (v729 >> 1)) * 0.25) * v918);
      v920 = (int8x16_t)vsubq_f32(v860, v1595);
      v921.i64[0] = 0x8000000080000000;
      v921.i64[1] = 0x8000000080000000;
      v723 = v1595;
      v1465 = (float32x4_t)vdupq_n_s32(0x3B808081u);
      v922 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v1465, vabdq_f32(v860, v1595)), vorrq_s8(vandq_s8(v920, v921), (int8x16_t)v1465), v920);
      __asm { FMOV            V1.4S, #1.0 }
      v1474 = _Q1;
      v924 = vdivq_f32(_Q1, v922);
      v1561 = *(float32x4_t *)(a1 + 176);
      v1567 = *(float32x4_t *)(a1 + 192);
      v1573 = *(float32x4_t *)(a1 + 160);
      v1579 = *(float32x4_t *)(a1 + 144);
      v1632 = vmulq_n_f32(vsubq_f32(v1567, v1490), v924.f32[0]);
      v1631 = vmulq_n_f32(vsubq_f32(v1561, v1490), v924.f32[0]);
      v1630 = (int32x4_t)vmulq_n_f32(vsubq_f32(v1573, v1490), v924.f32[0]);
      v1629 = vmulq_n_f32(vsubq_f32(v1579, v1490), v924.f32[0]);
      v925 = *(float32x4_t *)(a1 + 208);
      v926 = *(float32x4_t *)(a1 + 240);
      v1549 = *(float32x4_t *)(a1 + 256);
      v1555 = *(float32x4_t *)(a1 + 224);
      v1636 = vmulq_lane_f32(vsubq_f32(v1549, v1488), *(float32x2_t *)v924.f32, 1);
      v1635 = vmulq_lane_f32(vsubq_f32(v926, v1488), *(float32x2_t *)v924.f32, 1);
      v1634 = vmulq_lane_f32(vsubq_f32(v1555, v1488), *(float32x2_t *)v924.f32, 1);
      v1633 = vmulq_lane_f32(vsubq_f32(v925, v1488), *(float32x2_t *)v924.f32, 1);
      v927 = *(float32x4_t *)v7;
      v928 = *(float32x4_t *)(v7 + 16);
      v930 = *(float32x4_t *)(v7 + 32);
      v929 = *(float32x4_t *)(v7 + 48);
      v931 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)v7, v1494), v924, 2);
      v1640 = vmulq_laneq_f32(vsubq_f32(v929, v1494), v924, 2);
      v1639 = vmulq_laneq_f32(vsubq_f32(v930, v1494), v924, 2);
      v1638 = vmulq_laneq_f32(vsubq_f32(v928, v1494), v924, 2);
      v1637 = v931;
      v932 = *(float32x4_t *)(v7 + 64);
      v933 = *(float32x4_t *)(v7 + 80);
      v935 = *(float32x4_t *)(v7 + 96);
      v934 = *(float32x4_t *)(v7 + 112);
      v1644 = vmulq_laneq_f32(vsubq_f32(v934, v1498), v924, 3);
      v1643 = vmulq_laneq_f32(vsubq_f32(v935, v1498), v924, 3);
      v1642 = vmulq_laneq_f32(vsubq_f32(v933, v1498), v924, 3);
      v1641 = vmulq_laneq_f32(vsubq_f32(v932, v1498), v924, 3);
      v936 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1633, v1633), v1629, v1629), v931, v931), v1641, v1641);
      v937 = &v1629 + 4 * v725;
      v939 = v937[2];
      v938 = v937[3];
      v941 = *v937;
      v940 = v937[1];
      v942 = (float32x4_t)vdupq_lane_s32(v919, 0);
      v943 = (float32x4_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1636, v1636), v1632, v1632), v1640, v1640), v1644, v1644), v938, v938));
      v944 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1635, v1635), v1631, v1631), v1639, v1639), v1643, v1643), v939, v939));
      v945 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1634, v1634), (float32x4_t)v1630, (float32x4_t)v1630), v1638, v1638), v1642, v1642), v940, v940));
      v946 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(v936, v941, v941));
      v947 = *(unsigned __int8 *)(a1 + 135);
      if (*(_BYTE *)(a1 + 135))
      {
        v945 = (int16x8_t)vbicq_s8((int8x16_t)v945, *(int8x16_t *)(v7 + 464));
        v946 = (int16x8_t)vbicq_s8((int8x16_t)v946, *(int8x16_t *)(v7 + 448));
        v944 = (int16x8_t)vbicq_s8((int8x16_t)v944, *(int8x16_t *)(v7 + 480));
        v943 = (float32x4_t)vbicq_s8((int8x16_t)v943, *(int8x16_t *)(v7 + 496));
      }
      v948 = (uint16x4_t)vmovn_s32(v1542);
      v949 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v946, v945), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v944, (int16x8_t)v943), (int8x16_t)xmmword_20631C0C0));
      v949.i16[0] = vaddvq_s16(v949);
      *(int8x8_t *)v949.i8 = vcnt_s8(*(int8x8_t *)v949.i8);
      v949.i16[0] = vaddlv_u8(*(uint8x8_t *)v949.i8);
      v950 = v949.i16[0];
      if (v949.i32[0] >= 2u)
      {
        v951 = (int8x16_t)vcltzq_s32((int32x4_t)v944);
        v952 = (int8x16_t)vcltzq_s32((int32x4_t)v946);
        v953 = (int8x16_t)vcltzq_s32((int32x4_t)v943);
        v954 = (int8x16_t)vcltzq_s32((int32x4_t)v945);
        v955 = vaddq_f32((float32x4_t)vandq_s8(v954, (int8x16_t)v1573), (float32x4_t)vandq_s8(v953, (int8x16_t)v1567));
        v956 = vaddq_f32((float32x4_t)vandq_s8(v954, (int8x16_t)v1555), (float32x4_t)vandq_s8(v953, (int8x16_t)v1549));
        v957 = vaddq_f32((float32x4_t)vandq_s8(v954, (int8x16_t)v928), (float32x4_t)vandq_s8(v953, (int8x16_t)v929));
        v943 = (float32x4_t)vandq_s8(v953, (int8x16_t)v934);
        v723 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v948), 0x1FuLL)), v1479, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v952, (int8x16_t)v1579), (float32x4_t)vandq_s8(v951, (int8x16_t)v1561)), v955), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v952, (int8x16_t)v925), (float32x4_t)vandq_s8(v951, (int8x16_t)v926)), v956)), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v952, (int8x16_t)v927),
                                                   (float32x4_t)vandq_s8(v951, (int8x16_t)v930)),
                                                 v957),
                                               vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v952, (int8x16_t)v932), (float32x4_t)vandq_s8(v951, (int8x16_t)v935)), vaddq_f32((float32x4_t)vandq_s8(v954, (int8x16_t)v933), v943)))), ReciprocalTable[v950]));
      }
      v943.i32[0] = 0;
      if (v694 != 8)
      {
        v943.f32[0] = v918 * (float)(v918 * 0.25);
        v958 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v943.f32, 0);
        v959 = (int16x8_t)vcgtq_f32(v958, vmulq_f32(v938, v938));
        v960 = (int16x8_t)vcgtq_f32(v958, vmulq_f32(v939, v939));
        v961 = (int16x8_t)vcgtq_f32(v958, vmulq_f32(v940, v940));
        v962 = (int16x8_t)vcgtq_f32(v958, vmulq_f32(v941, v941));
        if (*(_BYTE *)(a1 + 135))
        {
          v961 = (int16x8_t)vbicq_s8((int8x16_t)v961, *(int8x16_t *)(v7 + 464));
          v962 = (int16x8_t)vbicq_s8((int8x16_t)v962, *(int8x16_t *)(v7 + 448));
          v960 = (int16x8_t)vbicq_s8((int8x16_t)v960, *(int8x16_t *)(v7 + 480));
          v959 = (int16x8_t)vbicq_s8((int8x16_t)v959, *(int8x16_t *)(v7 + 496));
        }
        v963 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v962, v961), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v960, v959), (int8x16_t)xmmword_20631C0C0));
        v963.i16[0] = vaddvq_s16(v963);
        *(int8x8_t *)v963.i8 = vcnt_s8(*(int8x8_t *)v963.i8);
        v963.i16[0] = vaddlv_u8(*(uint8x8_t *)v963.i8);
        v964 = v963.i16[0];
        if (v963.i32[0] >= 2u)
        {
          v965 = vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v962), *(int8x16_t *)(v693 + (v725 << 6))), (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v960), *(int8x16_t *)(v693 + (v725 << 6) + 32))), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v961), *(int8x16_t *)(v693 + (v725 << 6) + 16)), (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v959), *(int8x16_t *)(v693 + (v725 << 6) + 48))));
          v965.i64[0] = vpaddq_f32(v965, v965).u64[0];
          *(float32x2_t *)v965.f32 = vpadd_f32(*(float32x2_t *)v965.f32, *(float32x2_t *)v965.f32);
          v965.f32[0] = ReciprocalTable[v964] * v965.f32[0];
          v723 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v948), 0x1FuLL)), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v965.f32, 0), (int8x16_t)v723);
        }
      }
      v1516 = v925;
      v1634 = vmulq_lane_f32(vsubq_f32(v1509, v1555), *(float32x2_t *)v924.f32, 1);
      v1630 = (int32x4_t)vmulq_n_f32(vsubq_f32(v1502, v1573), v924.f32[0]);
      v1629 = vmulq_n_f32(vsubq_f32(v1502, v1579), v924.f32[0]);
      v1633 = vmulq_lane_f32(vsubq_f32(v1509, v925), *(float32x2_t *)v924.f32, 1);
      v1635 = vmulq_lane_f32(vsubq_f32(v1509, v926), *(float32x2_t *)v924.f32, 1);
      v1631 = vmulq_n_f32(vsubq_f32(v1502, v1561), v924.f32[0]);
      v1632 = vmulq_n_f32(vsubq_f32(v1502, v1567), v924.f32[0]);
      v1636 = vmulq_lane_f32(vsubq_f32(v1509, v1549), *(float32x2_t *)v924.f32, 1);
      v1640 = vmulq_laneq_f32(vsubq_f32(v1521, v929), v924, 2);
      v1637 = vmulq_laneq_f32(vsubq_f32(v1521, v927), v924, 2);
      v1638 = vmulq_laneq_f32(vsubq_f32(v1521, v928), v924, 2);
      v1639 = vmulq_laneq_f32(vsubq_f32(v1521, v930), v924, 2);
      v1642 = vmulq_laneq_f32(vsubq_f32(v1535, v933), v924, 3);
      v1641 = vmulq_laneq_f32(vsubq_f32(v1535, v932), v924, 3);
      v1643 = vmulq_laneq_f32(vsubq_f32(v1535, v935), v924, 3);
      v1644 = vmulq_laneq_f32(vsubq_f32(v1535, v934), v924, 3);
      v966 = &v1629 + 4 * v725;
      v967 = *v966;
      v968 = v966[1];
      v969 = v966[2];
      v970 = v966[3];
      v971 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1635, v1635), v1631, v1631), v1639, v1639), v1643, v1643), v969, v969));
      v972 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1634, v1634), (float32x4_t)v1630, (float32x4_t)v1630), v1638, v1638), v1642, v1642), v968, v968));
      v973 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1633, v1633), v1629, v1629), v1637, v1637), v1641, v1641), v967, v967));
      v974 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1636, v1636), v1632, v1632), v1640, v1640), v1644, v1644), v970, v970));
      if (v947)
      {
        v972 = (int16x8_t)vbicq_s8((int8x16_t)v972, *(int8x16_t *)(v7 + 464));
        v973 = (int16x8_t)vbicq_s8((int8x16_t)v973, *(int8x16_t *)(v7 + 448));
        v971 = (int16x8_t)vbicq_s8((int8x16_t)v971, *(int8x16_t *)(v7 + 480));
        v974 = (int16x8_t)vbicq_s8((int8x16_t)v974, *(int8x16_t *)(v7 + 496));
      }
      v975 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v973, v972), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v971, v974), (int8x16_t)xmmword_20631C0C0));
      v975.i16[0] = vaddvq_s16(v975);
      *(int8x8_t *)v975.i8 = vcnt_s8(*(int8x8_t *)v975.i8);
      v975.i16[0] = vaddlv_u8(*(uint8x8_t *)v975.i8);
      v976 = v975.i16[0];
      if (v975.i32[0] < 2u)
      {
        v722 = (float32x4_t)v1602;
      }
      else
      {
        v977 = (int8x16_t)vcltzq_s32((int32x4_t)v971);
        v978 = (int8x16_t)vcltzq_s32((int32x4_t)v973);
        v979 = (int8x16_t)vcltzq_s32((int32x4_t)v974);
        v980 = (int8x16_t)vcltzq_s32((int32x4_t)v972);
        v722 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v948), 0x1FuLL)), v1602, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v978, (int8x16_t)v1579), (float32x4_t)vandq_s8(v977, (int8x16_t)v1561)), vaddq_f32((float32x4_t)vandq_s8(v980, (int8x16_t)v1573), (float32x4_t)vandq_s8(v979, (int8x16_t)v1567))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v978, (int8x16_t)v925), (float32x4_t)vandq_s8(v977, (int8x16_t)v926)), vaddq_f32((float32x4_t)vandq_s8(v980, (int8x16_t)v1555), (float32x4_t)vandq_s8(v979, (int8x16_t)v1549)))),
                                             vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v978, (int8x16_t)v927), (float32x4_t)vandq_s8(v977, (int8x16_t)v930)), vaddq_f32((float32x4_t)vandq_s8(v980, (int8x16_t)v928), (float32x4_t)vandq_s8(v979, (int8x16_t)v929))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v978, (int8x16_t)v932), (float32x4_t)vandq_s8(v977, (int8x16_t)v935)), vaddq_f32((float32x4_t)vandq_s8(v980, (int8x16_t)v933), (float32x4_t)vandq_s8(v979, (int8x16_t)v934))))), ReciprocalTable[v976]));
      }
      if (v694 != 8)
      {
        v981 = vmulq_f32(v967, v967);
        v982 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v943.f32, 0);
        v983 = (int16x8_t)vcgtq_f32(v982, vmulq_f32(v968, v968));
        v984 = (float32x4_t)vcgtq_f32(v982, v981);
        v985 = (int16x8_t)vcgtq_f32(v982, vmulq_f32(v969, v969));
        v986 = (int16x8_t)vcgtq_f32(v982, vmulq_f32(v970, v970));
        if (v947)
        {
          v983 = (int16x8_t)vbicq_s8((int8x16_t)v983, *(int8x16_t *)(v7 + 464));
          v984 = (float32x4_t)vbicq_s8((int8x16_t)v984, *(int8x16_t *)(v7 + 448));
          v985 = (int16x8_t)vbicq_s8((int8x16_t)v985, *(int8x16_t *)(v7 + 480));
          v986 = (int16x8_t)vbicq_s8((int8x16_t)v986, *(int8x16_t *)(v7 + 496));
        }
        v987 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v984, v983), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v985, v986), (int8x16_t)xmmword_20631C0C0));
        v987.i16[0] = vaddvq_s16((int16x8_t)v987);
        *(int8x8_t *)v987.f32 = vcnt_s8(*(int8x8_t *)v987.f32);
        v987.i16[0] = vaddlv_u8(*(uint8x8_t *)v987.f32);
        v988 = v987.i16[0];
        if (v987.i32[0] >= 2u)
        {
          v989 = vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v984), *(int8x16_t *)(v693 + (v725 << 6))), (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v985), *(int8x16_t *)(v693 + (v725 << 6) + 32))), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v983), *(int8x16_t *)(v693 + (v725 << 6) + 16)), (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v986), *(int8x16_t *)(v693 + (v725 << 6) + 48))));
          v989.i64[0] = vpaddq_f32(v989, v989).u64[0];
          *(float32x2_t *)v989.f32 = vpadd_f32(*(float32x2_t *)v989.f32, *(float32x2_t *)v989.f32);
          v989.f32[0] = ReciprocalTable[v988] * v989.f32[0];
          v987 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v989.f32, 0);
          v722 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v948), 0x1FuLL)), (int8x16_t)v987, (int8x16_t)v722);
        }
        if (*(_BYTE *)(a1 + 134))
        {
          if (v947)
          {
            v990 = vsubq_f32(v722, v723);
            v984.i32[0] = v990.i32[3];
            if (v990.f32[3] != 0.0)
              goto LABEL_150;
            if (*(_BYTE *)(a1 + 134) != 15)
            {
              v723 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
LABEL_150:
              v987.i32[0] = 0;
              v992 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v987, v984), 0);
              v993 = vbslq_s8(v992, (int8x16_t)v723, (int8x16_t)v722);
              v994 = (float32x4_t)vbslq_s8(v992, (int8x16_t)vnegq_f32(v990), (int8x16_t)v990);
              v995 = (float32x4_t)vbslq_s8(v992, (int8x16_t)v722, (int8x16_t)v723);
              *(float *)v992.i32 = v995.f32[3] / v994.f32[3];
              v996 = ReciprocalTable[BYTE4(v917)];
              v997 = vmlsq_lane_f32(v995, v994, *(float32x2_t *)v992.i8, 0);
              *(float *)v992.i32 = -v996;
              v994.f32[0] = v996 + 1.0;
              if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v997, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v992.i8, 0)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v994.f32, 0), v997))) & 0x80000000) != 0)
              {
                v723 = vminnmq_f32(vmaxnmq_f32(v997, (float32x4_t)0), v1474);
                v722 = (float32x4_t)v993;
              }
              else
              {
                v998 = vmaxnmq_f32(v1468, v1470);
                v1603 = v993;
                v999 = vmaxnmq_f32(v1467, v1472);
                v1000 = (int8x16_t)vmaxnmq_f32(v998, v999);
                v1001 = vbslq_s8((int8x16_t)vcgtq_f32(v999, v998), vbslq_s8((int8x16_t)vcgtq_f32(v1472, v1467), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), vbslq_s8((int8x16_t)vcgtq_f32(v1470, v1468), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
                v999.i64[0] = vextq_s8(v1000, v1000, 8uLL).u64[0];
                v1002 = vmaxnm_f32(*(float32x2_t *)v1000.i8, *(float32x2_t *)v999.f32);
                v1608 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v999.f32, *(float32x2_t *)v1000.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v1001, v1001, 8uLL), *(int8x8_t *)v1001.i8);
                v1003 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v948), 0x1FuLL));
                v1491 = (int8x16_t)v995;
                v1004 = (float32x4_t)vbslq_s8(v1003, (int8x16_t)v995, *(int8x16_t *)(v1506+ 16* *(unsigned int *)((unint64_t)&v1608 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(v1002, (float32x2_t)vdup_lane_s32((int32x2_t)v1002, 1))) & 1)))));
                v1005 = (float32x4_t)vandq_s8((int8x16_t)vsubq_f32(v1581, v1004), vmvnq_s8((int8x16_t)v1542));
                v1006 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1004.f32, 0);
                v1007 = vsubq_f32(v1579, v1006);
                v1008 = vsubq_f32(v1561, v1006);
                v1009 = vsubq_f32(v1573, v1006);
                v1010 = vsubq_f32(v1567, v1006);
                v1011 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1004.f32, 1);
                v1012 = vsubq_f32(v1549, v1011);
                v1013 = vsubq_f32(v1555, v1011);
                v1536 = v926;
                v1014 = v928;
                v1015 = vsubq_f32(v926, v1011);
                v1016 = vsubq_f32(v1516, v1011);
                v1017 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1004, 2);
                v1018 = vsubq_f32(v929, v1017);
                v1522 = v1014;
                v1019 = vsubq_f32(v1014, v1017);
                v1499 = v1008;
                v1503 = vsubq_f32(v930, v1017);
                v1510 = vsubq_f32(v927, v1017);
                v1020 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1004, 3);
                v1495 = vsubq_f32(v932, v1020);
                v1021 = vsubq_f32(v935, v1020);
                v1022 = vsubq_f32(v933, v1020);
                v1023 = vsubq_f32(v934, v1020);
                v1024 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v1015, *(float32x2_t *)v1005.f32, 1), v1008, v1005.f32[0]), v1503, v1005, 2), v1021, v1005, 3);
                v1025 = v1021;
                v1026 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v1016, *(float32x2_t *)v1005.f32, 1), v1007, v1005.f32[0]), v1510, v1005, 2), v1495, v1005, 3);
                v1027 = vbslq_s8((int8x16_t)vcgtq_f32(v1024, v1026), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
                v1028 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v1012, *(float32x2_t *)v1005.f32, 1), v1010, v1005.f32[0]), v1018, v1005, 2), v1023, v1005, 3);
                v1029 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v1013, *(float32x2_t *)v1005.f32, 1), v1009, v1005.f32[0]), v1019, v1005, 2), v1022, v1005, 3);
                v1030 = vbslq_s8((int8x16_t)vcgtq_f32(v1028, v1029), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
                v1031 = vmaxnmq_f32(v1026, v1024);
                v1032 = vmaxnmq_f32(v1029, v1028);
                v1033 = (int8x16_t)vmaxnmq_f32(v1031, v1032);
                v1034 = vbslq_s8((int8x16_t)vcgtq_f32(v1032, v1031), v1030, v1027);
                v1031.i64[0] = vextq_s8(v1033, v1033, 8uLL).u64[0];
                *(int8x8_t *)v1034.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v1031.f32, *(float32x2_t *)v1033.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v1034, v1034, 8uLL), *(int8x8_t *)v1034.i8);
                *(float32x2_t *)v1031.f32 = vmaxnm_f32(*(float32x2_t *)v1033.i8, *(float32x2_t *)v1031.f32);
                v1609 = v1034.i64[0];
                v1529 = v1003;
                v1035 = (float32x4_t)vbslq_s8(v1003, v1603, *(int8x16_t *)(v1506+ 16* *(unsigned int *)((unint64_t)&v1609 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v1031.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v1031.f32, 1))) & 1)))));
                v1036 = (int8x16_t)vsubq_f32(v1035, v1004);
                v1031.i64[0] = 0x8000000080000000;
                v1031.i64[1] = 0x8000000080000000;
                v1596 = (int8x16_t)v1004;
                v1604 = (int8x16_t)v1035;
                v1037 = vdivq_f32(v1474, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v1465, vabdq_f32(v1035, v1004)), vorrq_s8(vandq_s8(v1036, (int8x16_t)v1031), (int8x16_t)v1465), v1036));
                v1634 = vmulq_lane_f32(v1013, *(float32x2_t *)v1037.f32, 1);
                v1630 = (int32x4_t)vmulq_n_f32(v1009, v1037.f32[0]);
                v1629 = vmulq_n_f32(v1007, v1037.f32[0]);
                v1633 = vmulq_lane_f32(v1016, *(float32x2_t *)v1037.f32, 1);
                v1636 = vmulq_lane_f32(v1012, *(float32x2_t *)v1037.f32, 1);
                v1632 = vmulq_n_f32(v1010, v1037.f32[0]);
                v1631 = vmulq_n_f32(v1499, v1037.f32[0]);
                v1635 = vmulq_lane_f32(v1015, *(float32x2_t *)v1037.f32, 1);
                v1639 = vmulq_laneq_f32(v1503, v1037, 2);
                v1640 = vmulq_laneq_f32(v1018, v1037, 2);
                v1637 = vmulq_laneq_f32(v1510, v1037, 2);
                v1638 = vmulq_laneq_f32(v1019, v1037, 2);
                v1642 = vmulq_laneq_f32(v1022, v1037, 3);
                v1641 = vmulq_laneq_f32(v1495, v1037, 3);
                v1644 = vmulq_laneq_f32(v1023, v1037, 3);
                v1643 = vmulq_laneq_f32(v1025, v1037, 3);
                v1038 = &v1629 + 4 * v725;
                v1039 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1634, v1634), (float32x4_t)v1630, (float32x4_t)v1630), v1638, v1638), v1642, v1642), v1038[1], v1038[1]));
                v1040 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1633, v1633), v1629, v1629), v1637, v1637), v1641, v1641), *v1038, *v1038));
                v1041 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1636, v1636), v1632, v1632), v1640, v1640), v1644, v1644), v1038[3], v1038[3]));
                v1042 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1635, v1635), v1631, v1631), v1639, v1639), v1643, v1643), v1038[2], v1038[2]));
                v1043 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v1040, v1039), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v1042, v1041), (int8x16_t)xmmword_20631C0C0));
                v1043.i16[0] = vaddvq_s16(v1043);
                v1044 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v1043.i8);
                v1044.i16[0] = vaddlv_u8(v1044);
                if (v1044.i32[0] >= 2u)
                  v1596 = vbslq_s8(v1529, v1491, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 144), (int8x16_t)v1040), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 176), (int8x16_t)v1042)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 160), (int8x16_t)v1039), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 192), (int8x16_t)v1041))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 208), (int8x16_t)v1040), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 240), (int8x16_t)v1042)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 224), (int8x16_t)v1039), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 256), (int8x16_t)v1041)))),
                                           vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)v7, (int8x16_t)v1040), (float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 32), (int8x16_t)v1042)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 16), (int8x16_t)v1039), (float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 48), (int8x16_t)v1041))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 64), (int8x16_t)v1040), (float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 96), (int8x16_t)v1042)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 80), (int8x16_t)v1039), (float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 112), (int8x16_t)v1041))))), ReciprocalTable[v1044.u16[0]]));
                v722 = v1035;
                v1045 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1035.f32, 0);
                v1630 = (int32x4_t)vmulq_n_f32(vsubq_f32(v1045, v1573), v1037.f32[0]);
                v1629 = vmulq_n_f32(vsubq_f32(v1045, v1579), v1037.f32[0]);
                v1631 = vmulq_n_f32(vsubq_f32(v1045, v1561), v1037.f32[0]);
                v1632 = vmulq_n_f32(vsubq_f32(v1045, v1567), v1037.f32[0]);
                v1046 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1035.f32, 1);
                v1634 = vmulq_lane_f32(vsubq_f32(v1046, v1555), *(float32x2_t *)v1037.f32, 1);
                v1633 = vmulq_lane_f32(vsubq_f32(v1046, v1516), *(float32x2_t *)v1037.f32, 1);
                v1635 = vmulq_lane_f32(vsubq_f32(v1046, v1536), *(float32x2_t *)v1037.f32, 1);
                v1636 = vmulq_lane_f32(vsubq_f32(v1046, v1549), *(float32x2_t *)v1037.f32, 1);
                v1047 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1035, 2);
                v1638 = vmulq_laneq_f32(vsubq_f32(v1047, v1522), v1037, 2);
                v1637 = vmulq_laneq_f32(vsubq_f32(v1047, v927), v1037, 2);
                v1639 = vmulq_laneq_f32(vsubq_f32(v1047, v930), v1037, 2);
                v1640 = vmulq_laneq_f32(vsubq_f32(v1047, v929), v1037, 2);
                v1048 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1035, 3);
                v1642 = vmulq_laneq_f32(vsubq_f32(v1048, v933), v1037, 3);
                v1641 = vmulq_laneq_f32(vsubq_f32(v1048, v932), v1037, 3);
                v1643 = vmulq_laneq_f32(vsubq_f32(v1048, v935), v1037, 3);
                v1644 = vmulq_laneq_f32(vsubq_f32(v1048, v934), v1037, 3);
                v1049 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1635, v1635), v1631, v1631), v1639, v1639), v1643, v1643), v1038[2], v1038[2]));
                v1050 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1636, v1636), v1632, v1632), v1640, v1640), v1644, v1644), v1038[3], v1038[3]));
                v1051 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1634, v1634), (float32x4_t)v1630, (float32x4_t)v1630), v1638, v1638), v1642, v1642), v1038[1], v1038[1]));
                v1052 = (int16x8_t)vcgtq_f32(v942, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1633, v1633), v1629, v1629), v1637, v1637), v1641, v1641), *v1038, *v1038));
                v1053 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v1052, v1051), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v1049, v1050), (int8x16_t)xmmword_20631C0C0));
                v1053.i16[0] = vaddvq_s16(v1053);
                v1054 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v1053.i8);
                v1054.i16[0] = vaddlv_u8(v1054);
                if (v1054.i32[0] >= 2u)
                  v722 = (float32x4_t)vbslq_s8(v1529, v1604, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 144), (int8x16_t)v1052), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 176), (int8x16_t)v1049)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 160), (int8x16_t)v1051), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 192),
                                                                            (int8x16_t)v1050))),
                                                         vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 208), (int8x16_t)v1052), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 240), (int8x16_t)v1049)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 224), (int8x16_t)v1051), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 256), (int8x16_t)v1050)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)v7, (int8x16_t)v1052), (float32x4_t)vandq_s8(
                                                                            *(int8x16_t *)(v7 + 32),
                                                                            (int8x16_t)v1049)),
                                                           vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 16), (int8x16_t)v1051), (float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 48), (int8x16_t)v1050))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 64), (int8x16_t)v1052), (float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 96), (int8x16_t)v1049)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(v7 + 80), (int8x16_t)v1051), (float32x4_t)vandq_s8(
                                                                            *(int8x16_t *)(v7 + 112),
                                                                            (int8x16_t)v1050))))),
                                                     ReciprocalTable[v1054.u16[0]]));
                v723 = (float32x4_t)v1596;
                if (*(float *)&v1596.i32[3] <= v722.f32[3])
                  v723.i32[3] = 0;
                else
                  v722.i32[3] = 0;
              }
              goto LABEL_159;
            }
            v723 = 0uLL;
          }
          else
          {
            v991 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v722, 3), (float32x4_t)vdupq_laneq_s32((int32x4_t)v723, 3)), 0);
            v722 = (float32x4_t)vandq_s8((int8x16_t)v722, v991);
            v723 = (float32x4_t)vbicq_s8((int8x16_t)v723, v991);
          }
        }
      }
LABEL_159:
      v727 = v694 & 8;
      v726 = v725;
LABEL_160:
      v1055 = *(float32x4_t **)(a1 + 32);
      v1621[0] = v723;
      v1621[1] = v722;
      FindColorVectors(v1621, v1055, 2, 324, &v1622, (uint64_t)&v1629);
      v1056 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1629.f32, 0);
      v1524 = *(float32x4_t *)(a1 + 192);
      v1526 = *(float32x4_t *)(a1 + 160);
      v1057 = *(float32x4_t *)(a1 + 208);
      v1058 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1629.f32, 1);
      v1511 = *(float32x4_t *)(a1 + 240);
      v1517 = *(float32x4_t *)(a1 + 224);
      v1523 = *(float32x4_t *)(a1 + 256);
      v1059 = *(float32x4_t *)(v7 + 32);
      v1060 = *(float32x4_t *)(v7 + 48);
      v1062 = *(float32x4_t *)v7;
      v1061 = *(float32x4_t *)(v7 + 16);
      v1063 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1629, 2);
      v1064 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1629, 3);
      v1065 = (float32x4_t)vbicq_s8((int8x16_t)v1630, (int8x16_t)vcltzq_s32(FindDualWeights_6x5_kVectorMask[v726]));
      v1066 = (int8x16_t)vmulq_f32(v1065, v1065);
      v1067 = vadd_f32(*(float32x2_t *)v1066.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1066, v1066, 8uLL));
      v1068 = *(float32x4_t *)(v7 + 64);
      v1069 = *(float32x4_t *)(v7 + 80);
      v1070 = *(float32x4_t *)(v7 + 96);
      v1071 = *(float32x4_t *)(v7 + 112);
      v1072 = vsubq_f32(v1071, v1064);
      v1073 = vsubq_f32(v1070, v1064);
      v1074 = vsubq_f32(v1069, v1064);
      v1075 = vsubq_f32(v1068, v1064);
      v1076 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1057, v1058), *(float32x2_t *)v1065.f32, 1), vsubq_f32(*(float32x4_t *)(a1 + 144), v1056), v1065.f32[0]), vsubq_f32(*(float32x4_t *)v7, v1063), v1065, 2), v1075, v1065, 3);
      v1077 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1517, v1058), *(float32x2_t *)v1065.f32, 1), vsubq_f32(v1526, v1056), v1065.f32[0]), vsubq_f32(v1061, v1063), v1065, 2), v1074, v1065, 3);
      v1078 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1511, v1058), *(float32x2_t *)v1065.f32, 1), vsubq_f32(*(float32x4_t *)(a1 + 176), v1056), v1065.f32[0]), vsubq_f32(v1059, v1063), v1065, 2), v1073, v1065, 3);
      v1079 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1523, v1058), *(float32x2_t *)v1065.f32, 1), vsubq_f32(v1524, v1056), v1065.f32[0]), vsubq_f32(v1060, v1063), v1065, 2), v1072, v1065, 3);
      v1605 = v1631.i64[0];
      v1065.f32[0] = vrecpes_f32(vaddv_f32(v1067));
      v1080 = vmulq_n_f32(v1079, v1065.f32[0]);
      v1081 = vmulq_n_f32(v1078, v1065.f32[0]);
      v1082 = vmulq_n_f32(v1077, v1065.f32[0]);
      v1083 = vmulq_n_f32(v1076, v1065.f32[0]);
      __asm { FMOV            V1.4S, #1.0 }
      v1085 = vminnmq_f32(v1081, _Q1);
      v1086 = vminnmq_f32(v1080, _Q1);
      v1087 = vmaxnmq_f32(vminnmq_f32(v1083, _Q1), (float32x4_t)0);
      v1088 = vmaxnmq_f32(vminnmq_f32(v1082, _Q1), (float32x4_t)0);
      v1089 = vmaxnmq_f32(v1085, (float32x4_t)0);
      v1090 = vmaxnmq_f32(v1086, (float32x4_t)0);
      v1537 = *(float32x4_t *)(a1 + 144);
      v1530 = *(float32x4_t *)(a1 + 176);
      if (!v727 && *(char *)(a1 + 134) >= 1)
      {
        v1091 = 0.0;
        if (fabsf(*(float *)&v1630.i32[3]) >= 0.0039216)
          v1091 = vrecpes_f32(*(float *)&v1630.i32[3]);
        v1088 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 464)), (int8x16_t)vmulq_n_f32(v1074, v1091), (int8x16_t)v1088);
        v1087 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 448)), (int8x16_t)vmulq_n_f32(v1075, v1091), (int8x16_t)v1087);
        v1089 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 480)), (int8x16_t)vmulq_n_f32(v1073, v1091), (int8x16_t)v1089);
        v1090 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(v7 + 496)), (int8x16_t)vmulq_n_f32(v1072, v1091), (int8x16_t)v1090);
      }
      v1092 = (float32x4_t *)(v693 + (v726 << 6));
      v1094 = v1092[2];
      v1093 = v1092[3];
      v1095 = *v1092;
      v1096 = v1092[1];
      v1097 = v1630;
      v1607 = (float32x4_t)v1630;
      v1098 = *(float *)((unint64_t)&v1607 & 0xFFFFFFFFFFFFFFF3 | (4 * (v725 & 3)));
      v1099 = 0.0;
      if (fabsf(v1098) >= 0.00024414)
        v1099 = vrecpes_f32(v1098);
      v1606 = v1629;
      v1100 = (const float *)((unint64_t)&v1606 & 0xFFFFFFFFFFFFFFF3 | (4 * (v725 & 3)));
      v1101 = vld1q_dup_f32(v1100);
      v1102 = vsubq_f32(v1096, v1101);
      v1103 = v1622 >> 27;
      v1104 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v1087, (float32x4_t)0), _Q1), (float)v1103));
      v1105 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v1088, (float32x4_t)0), _Q1), (float)v1103));
      v1106 = vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(vsubq_f32(v1093, v1101), v1099), (float32x4_t)0), _Q1), (float)v1103);
      v1107 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(vsubq_f32(v1095, v1101), v1099), (float32x4_t)0), _Q1), (float)v1103));
      v1108 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(vsubq_f32(v1094, v1101), v1099), (float32x4_t)0), _Q1), (float)v1103));
      v1109 = ReciprocalTable[v1103];
      v1597 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v1090, (float32x4_t)0), _Q1), (float)v1103));
      v1110 = vmulq_n_f32(v1597, v1109);
      v1568 = v1104;
      v1574 = v1105;
      v1111 = (int32x4_t)vmulq_n_f32(v1104, v1109);
      v1112 = (int32x4_t)vmulq_n_f32(v1105, v1109);
      v1580 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v1089, (float32x4_t)0), _Q1), (float)v1103));
      v1113 = (int32x4_t)vmulq_n_f32(v1580, v1109);
      v1628[1] = v1112;
      v1628[0] = v1111;
      v1628[2] = v1113;
      v1628[3] = v1110;
      v1543 = v1107;
      v1550 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(v1102, v1099), (float32x4_t)0), _Q1), (float)v1103));
      v1114 = (int32x4_t)vmulq_n_f32(v1107, v1109);
      v1115 = vmulq_n_f32(v1550, v1109);
      v1556 = vrndxq_f32(v1106);
      v1562 = v1108;
      v1116 = (int32x4_t)vmulq_n_f32(v1108, v1109);
      v1117 = vmulq_n_f32(v1556, v1109);
      v1628[7] = v1117;
      v1628[6] = v1116;
      v1628[5] = v1115;
      v1628[4] = v1114;
      v1118 = *(float32x4_t **)(a1 + 32);
      if (v1118)
        _Q1 = vmulq_f32(*v1118, v1531);
      v1119 = a1;
      do
      {
        v1120 = v1119;
        v1119 = *(_QWORD *)(v1119 + 40);
      }
      while (v1119);
      v1121 = *(unsigned __int16 *)(v1120 + 132);
      if (v1121 == 392)
      {
        v1512 = _Q1;
        v1170 = 0;
        v1171 = (float32x4_t)vzip1q_s32(v1111, v1111);
        v1171.i32[2] = v1111.i32[0];
        v1172 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1111.i8, 1);
        v1173 = (float32x4_t)vextq_s8((int8x16_t)v1111, (int8x16_t)vdupq_laneq_s32(v1111, 3), 8uLL);
        v1172.i32[3] = v1111.i32[2];
        v1466 = (int32x4_t)v1110;
        v1500 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1111, (int8x16_t)v1111, 0xCuLL), v1111);
        v1174 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1112, (int8x16_t)v1112, 0xCuLL), v1112);
        v1175 = (float32x4_t)vextq_s8((int8x16_t)v1112, (int8x16_t)vdupq_laneq_s32(v1112, 3), 8uLL);
        v1176 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1173, (float32x4_t)xmmword_20631C4C0), (float32x4_t)xmmword_20631C4D0, v1500), (float32x4_t)xmmword_20631C500, v1174), (float32x4_t)xmmword_20631C510, v1175);
        v1504 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1173, (float32x4_t)xmmword_20631C540), (float32x4_t)xmmword_20631C550, v1500), (float32x4_t)xmmword_20631C580, v1174), (float32x4_t)xmmword_20631C590, v1175);
        v1177 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1113, (int8x16_t)v1113, 0xCuLL), v1113);
        v1178 = (float32x4_t)vextq_s8((int8x16_t)v1113, (int8x16_t)vdupq_laneq_s32(v1113, 3), 8uLL);
        v1492 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1175, (float32x4_t)xmmword_20631C610), (float32x4_t)xmmword_20631C600, v1174), (float32x4_t)xmmword_20631C5D0, v1177), (float32x4_t)xmmword_20631C5C0, v1178);
        v1496 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1175, (float32x4_t)xmmword_20631C5C0), (float32x4_t)xmmword_20631C5D0, v1174), (float32x4_t)xmmword_20631C600, v1177), (float32x4_t)xmmword_20631C610, v1178);
        v1471 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1114, (int8x16_t)v1114, 0xCuLL), v1114);
        v1473 = (float32x4_t)vextq_s8((int8x16_t)v1114, (int8x16_t)vdupq_laneq_s32(v1114, 3), 8uLL);
        v1179 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1115, (int8x16_t)v1115, 0xCuLL), (int32x4_t)v1115);
        v1180 = (float32x4_t)vextq_s8((int8x16_t)v1115, (int8x16_t)vdupq_laneq_s32((int32x4_t)v1115, 3), 8uLL);
        v1475 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1473, (float32x4_t)xmmword_20631C540), (float32x4_t)xmmword_20631C550, v1471), (float32x4_t)xmmword_20631C580, v1179), (float32x4_t)xmmword_20631C590, v1180);
        v1476 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1473, (float32x4_t)xmmword_20631C4C0), (float32x4_t)xmmword_20631C4D0, v1471), (float32x4_t)xmmword_20631C500, v1179), (float32x4_t)xmmword_20631C510, v1180);
        v1181 = vmlaq_f32(vmulq_f32(v1180, (float32x4_t)xmmword_20631C5C0), (float32x4_t)xmmword_20631C5D0, v1179);
        v1182 = vmlaq_f32(vmulq_f32(v1180, (float32x4_t)xmmword_20631C610), (float32x4_t)xmmword_20631C600, v1179);
        v1183 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1116, (int8x16_t)v1116, 0xCuLL), v1116);
        v1184 = (float32x4_t)vextq_s8((int8x16_t)v1116, (int8x16_t)vdupq_laneq_s32(v1116, 3), 8uLL);
        v1469 = vmlaq_f32(vmlaq_f32(v1181, (float32x4_t)xmmword_20631C600, v1183), (float32x4_t)xmmword_20631C610, v1184);
        v1185 = vmlaq_f32(vmlaq_f32(v1182, (float32x4_t)xmmword_20631C5D0, v1183), (float32x4_t)xmmword_20631C5C0, v1184);
        v1186 = vmlaq_f32(vmulq_f32(v1184, (float32x4_t)xmmword_20631C590), (float32x4_t)xmmword_20631C580, v1183);
        v1187 = vmlaq_f32(vmulq_f32(v1184, (float32x4_t)xmmword_20631C510), (float32x4_t)xmmword_20631C500, v1183);
        v1188 = (float32x4_t)vdupq_n_s32(0x3D800000u);
        v1630 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32(v1173, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v1500), v1188);
        v1189 = (float32x4_t)vzip1q_s32(v1112, v1112);
        v1189.i32[2] = v1112.i32[0];
        v1629 = vmulq_f32(vmlaq_f32(vmulq_f32(v1172, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v1171), v1188);
        v1190 = (int32x4_t)v1117;
        v1191 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1112.i8, 1);
        v1191.i32[3] = v1112.i32[2];
        v1192 = v1116;
        v1632 = vmulq_f32(v1176, v1188);
        v1631 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1172, (float32x4_t)xmmword_20631C4B0), (float32x4_t)xmmword_20631C4E0, v1171), (float32x4_t)xmmword_20631C4F0, v1189), (float32x4_t)xmmword_20631C520, v1191), v1188);
        v1634 = vmulq_f32(v1504, v1188);
        v1633 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1172, (float32x4_t)xmmword_20631C530), (float32x4_t)xmmword_20631C560, v1171), (float32x4_t)xmmword_20631C570, v1189), (float32x4_t)xmmword_20631C5A0, v1191), v1188);
        v1193 = (float32x4_t)vzip1q_s32(v1113, v1113);
        v1193.i32[2] = v1113.i32[0];
        v1194 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1113.i8, 1);
        v1194.i32[3] = v1113.i32[2];
        v1636 = vmulq_f32(v1496, v1188);
        v1635 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1191, (float32x4_t)xmmword_20631C5B0), (float32x4_t)xmmword_20631C5E0, v1189), (float32x4_t)xmmword_20631C5F0, v1193), (float32x4_t)xmmword_20631C620, v1194), v1188);
        v1195 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1191, (float32x4_t)xmmword_20631C620), (float32x4_t)xmmword_20631C5F0, v1189), (float32x4_t)xmmword_20631C5E0, v1193), (float32x4_t)xmmword_20631C5B0, v1194), v1188);
        v1638 = vmulq_f32(v1492, v1188);
        v1196 = v1466;
        v1197 = (float32x4_t)vzip1q_s32(v1196, v1196);
        v1197.i32[2] = v1466.i32[0];
        v1198 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1466.i8, 1);
        v1637 = v1195;
        v1198.i32[3] = v1466.i32[2];
        v1199 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1196, (int8x16_t)v1196, 0xCuLL), v1466);
        v1200 = (float32x4_t)vextq_s8((int8x16_t)v1466, (int8x16_t)vdupq_laneq_s32(v1466, 3), 8uLL);
        v1640 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1178, (float32x4_t)xmmword_20631C590), (float32x4_t)xmmword_20631C580, v1177), (float32x4_t)xmmword_20631C550, v1199), (float32x4_t)xmmword_20631C540, v1200), v1188);
        v1639 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1194, (float32x4_t)xmmword_20631C5A0), (float32x4_t)xmmword_20631C570, v1193), (float32x4_t)xmmword_20631C560, v1197), (float32x4_t)xmmword_20631C530, v1198), v1188);
        v1642 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1178, (float32x4_t)xmmword_20631C510), (float32x4_t)xmmword_20631C500, v1177), (float32x4_t)xmmword_20631C4D0, v1199), (float32x4_t)xmmword_20631C4C0, v1200), v1188);
        v1641 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1194, (float32x4_t)xmmword_20631C520), (float32x4_t)xmmword_20631C4F0, v1193), (float32x4_t)xmmword_20631C4E0, v1197), (float32x4_t)xmmword_20631C4B0, v1198), v1188);
        v1201 = vmlaq_f32(vmulq_f32(v1200, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v1199);
        v1202 = vmulq_f32(v1198, (float32x4_t)xmmword_20631C470);
        v1203 = (float32x4_t)vzip1q_s32(v1114, v1114);
        v1203.i32[2] = v1114.i32[0];
        v1204 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1114.i8, 1);
        v1204.i32[3] = v1114.i32[2];
        v1644 = vmulq_f32(v1201, v1188);
        v1643 = vmulq_f32(vmlaq_f32(v1202, (float32x4_t)xmmword_20631C4A0, v1197), v1188);
        v1646 = vmulq_f32(vmlaq_f32(vmulq_f32(v1473, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v1471), v1188);
        v1645 = vmulq_f32(vmlaq_f32(vmulq_f32(v1204, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v1203), v1188);
        v1205 = (float32x4_t)vzip1q_s32((int32x4_t)v1115, (int32x4_t)v1115);
        v1205.i32[2] = v1115.i32[0];
        v1206 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1115.f32, 1);
        v1206.i32[3] = v1115.i32[2];
        v1207 = (float32x4_t)xmmword_20631C4B0;
        v1648 = vmulq_f32(v1476, v1188);
        v1647 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1204, (float32x4_t)xmmword_20631C4B0), (float32x4_t)xmmword_20631C4E0, v1203), (float32x4_t)xmmword_20631C4F0, v1205), (float32x4_t)xmmword_20631C520, v1206), v1188);
        v1650 = vmulq_f32(v1475, v1188);
        v1649 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1204, (float32x4_t)xmmword_20631C530), (float32x4_t)xmmword_20631C560, v1203), (float32x4_t)xmmword_20631C570, v1205), (float32x4_t)xmmword_20631C5A0, v1206), v1188);
        v1208 = vmlaq_f32(vmulq_f32(v1206, (float32x4_t)xmmword_20631C5B0), (float32x4_t)xmmword_20631C5E0, v1205);
        v1209 = vmlaq_f32(vmulq_f32(v1206, (float32x4_t)xmmword_20631C620), (float32x4_t)xmmword_20631C5F0, v1205);
        v1210 = (float32x4_t)vzip1q_s32(v1192, v1192);
        v1210.i32[2] = v1192.i32[0];
        v1211 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1192.i8, 1);
        v1211.i32[3] = v1192.i32[2];
        v1652 = vmulq_f32(v1469, v1188);
        v1651 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1208, (float32x4_t)xmmword_20631C5F0, v1210), (float32x4_t)xmmword_20631C620, v1211), v1188);
        v1654 = vmulq_f32(v1185, v1188);
        v1653 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1209, (float32x4_t)xmmword_20631C5E0, v1210), (float32x4_t)xmmword_20631C5B0, v1211), v1188);
        v1212 = (float32x4_t)vzip1q_s32(v1190, v1190);
        v1212.i32[2] = v1190.i32[0];
        v1213 = vmlaq_f32(vmlaq_f32(vmulq_f32(v1211, (float32x4_t)xmmword_20631C5A0), (float32x4_t)xmmword_20631C570, v1210), (float32x4_t)xmmword_20631C560, v1212);
        v1214 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1190, (int8x16_t)v1190, 0xCuLL), v1190);
        v1215 = vmlaq_f32(vmulq_f32(v1211, (float32x4_t)xmmword_20631C520), (float32x4_t)xmmword_20631C4F0, v1210);
        v1216 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1190.i8, 1);
        v1216.i32[3] = v1190.i32[2];
        v1217 = (float32x4_t)vextq_s8((int8x16_t)v1190, (int8x16_t)vdupq_laneq_s32(v1190, 3), 8uLL);
        v1656 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1186, (float32x4_t)xmmword_20631C550, v1214), (float32x4_t)xmmword_20631C540, v1217), v1188);
        v1655 = vmulq_f32(vmlaq_f32(v1213, (float32x4_t)xmmword_20631C530, v1216), v1188);
        v1658 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1187, (float32x4_t)xmmword_20631C4D0, v1214), (float32x4_t)xmmword_20631C4C0, v1217), v1188);
        v1657 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1215, (float32x4_t)xmmword_20631C4E0, v1212), (float32x4_t)xmmword_20631C4B0, v1216), v1188);
        v1660 = vmulq_f32(vmlaq_f32(vmulq_f32(v1217, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v1214), v1188);
        v1659 = vmulq_f32(vmlaq_f32(vmulq_f32(v1216, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v1212), v1188);
        v1218 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1097.i8, 0);
        v1219 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1097.i8, 1);
        v1220 = &v1629 + 16 * (unint64_t)((v724 >> 3) & 1);
        v1221 = (float32x4_t)vdupq_laneq_s32(v1097, 2);
        v1222 = (float32x4_t)vdupq_laneq_s32(v1097, 3);
        v1223 = &v1629 + 16 * (unint64_t)((v724 >> 2) & 1);
        v1224 = &v1629 + 16 * (unint64_t)((v724 >> 1) & 1);
        v1225 = &v1629 + 16 * (unint64_t)(v724 & 1);
        v1226 = 0uLL;
        v1227 = 0uLL;
        v1228 = 0uLL;
        v1229 = 0uLL;
        v1230 = 0uLL;
        v1231 = 0uLL;
        v1232 = 0uLL;
        v1233 = 0uLL;
        do
        {
          v1115.i32[0] = 0;
          v1207.i32[0] = *(unsigned __int8 *)(a1 + 135);
          v1234 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v1207, (int8x16_t)v1115), 0);
          __asm { FMOV            V26.4S, #1.0 }
          v1237 = *(float32x4_t *)(v1120 + v1170 * 16 + 912);
          v1236 = *(float32x4_t *)(v1120 + v1170 * 16 + 928);
          v1238 = (float32x4_t)vbslq_s8(v1234, _Q26, (int8x16_t)v1236);
          v1239 = (float32x4_t)vbslq_s8(v1234, _Q26, (int8x16_t)v1237);
          v1240 = vsubq_f32(vmlaq_f32(v1064, v1220[v1170], v1222), v1237);
          v1241 = vsubq_f32(vmlaq_f32(v1064, v1220[v1170 + 1], v1222), v1236);
          v1207 = vmulq_f32(vsubq_f32(vmlaq_f32(v1056, v1225[v1170], v1218), *(float32x4_t *)(v1120 + v1170 * 16 + 144)), v1239);
          v1242 = vmulq_f32(vsubq_f32(vmlaq_f32(v1056, v1225[v1170 + 1], v1218), *(float32x4_t *)(v1120 + v1170 * 16 + 160)), v1238);
          v1243 = vmulq_f32(vsubq_f32(vmlaq_f32(v1058, v1224[v1170], v1219), *(float32x4_t *)(v1120 + v1170 * 16 + 400)), v1239);
          v1244 = vmulq_f32(vsubq_f32(vmlaq_f32(v1058, v1224[v1170 + 1], v1219), *(float32x4_t *)(v1120 + v1170 * 16 + 416)), v1238);
          v1115 = vmulq_f32(vsubq_f32(vmlaq_f32(v1063, v1223[v1170], v1221), *(float32x4_t *)(v1120 + v1170 * 16 + 656)), v1239);
          v1245 = vmulq_f32(vsubq_f32(vmlaq_f32(v1063, v1223[v1170 + 1], v1221), *(float32x4_t *)(v1120 + v1170 * 16 + 672)), v1238);
          v1233 = vmlaq_f32(v1233, v1242, v1242);
          v1232 = vmlaq_f32(v1232, v1207, v1207);
          v1231 = vmlaq_f32(v1231, v1244, v1244);
          v1230 = vmlaq_f32(v1230, v1243, v1243);
          v1229 = vmlaq_f32(v1229, v1245, v1245);
          v1228 = vmlaq_f32(v1228, v1115, v1115);
          v1227 = vmlaq_f32(v1227, v1241, v1241);
          v1226 = vmlaq_f32(v1226, v1240, v1240);
          v1170 += 2;
        }
        while (v1170 != 16);
        v1169 = vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v1230, *(float32x2_t *)v1512.f32, 1), v1232, v1512.f32[0]), v1228, v1512, 2), v1226, v1512, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v1231, *(float32x2_t *)v1512.f32, 1), v1233, v1512.f32[0]), v1229, v1512, 2), v1227, v1512, 3));
LABEL_177:
        v1246 = (float32x2_t)vpaddq_f32(v1169, v1169).u64[0];
        v1247 = vpadd_f32(v1246, v1246).f32[0];
        v425 = v1589;
        if (v1247 < v1589.f32[0])
        {
          v1464 = v1622;
          v1463 = v694;
          if (v1455)
            v1455[8].f32[0] = v1247;
          v425.f32[0] = v1247;
          v1461 = v1562;
          v1462 = v1550;
          v1460 = v1556;
          v1482 = v1568;
          v1484 = v1574;
          v1480 = v1580;
          v1486 = v1597;
          v1477 = v1543;
          v1478 = (uint8x8_t)v1605;
        }
        goto LABEL_182;
      }
      if (v1121 == 324)
      {
        v1111.i32[0] = 0;
        v1122 = (float32x4_t *)&v1628[4 * (unint64_t)(v724 & 1)];
        v1123 = vmlaq_n_f32(v1056, v1122[2], *(float *)v1630.i32);
        v1124 = vmlaq_n_f32(v1056, *v1122, *(float *)v1630.i32);
        v1125 = vmlaq_n_f32(v1056, v1122[3], *(float *)v1630.i32);
        v1126 = vmlaq_n_f32(v1056, v1122[1], *(float *)v1630.i32);
        v1127 = (float32x4_t *)&v1628[4 * (unint64_t)((v724 >> 1) & 1)];
        v1128 = vmlaq_lane_f32(v1058, v1127[1], *(float32x2_t *)v1630.i8, 1);
        v1129 = vmlaq_lane_f32(v1058, v1127[3], *(float32x2_t *)v1630.i8, 1);
        v1130 = vmlaq_lane_f32(v1058, *v1127, *(float32x2_t *)v1630.i8, 1);
        v1131 = vmlaq_lane_f32(v1058, v1127[2], *(float32x2_t *)v1630.i8, 1);
        v1132 = (float32x4_t *)&v1628[4 * (unint64_t)((v724 >> 2) & 1)];
        v1133 = vmlaq_laneq_f32(v1063, v1132[1], (float32x4_t)v1630, 2);
        v1134 = vmlaq_laneq_f32(v1063, v1132[3], (float32x4_t)v1630, 2);
        v1135 = vmlaq_laneq_f32(v1063, *v1132, (float32x4_t)v1630, 2);
        v1136 = vmlaq_laneq_f32(v1063, v1132[2], (float32x4_t)v1630, 2);
        v1137 = (float32x4_t *)&v1628[4 * (unint64_t)((v724 >> 3) & 1)];
        v1138 = vmlaq_laneq_f32(v1064, v1137[1], (float32x4_t)v1630, 3);
        v1139 = vmlaq_laneq_f32(v1064, v1137[3], (float32x4_t)v1630, 3);
        v1140 = vmlaq_laneq_f32(v1064, *v1137, (float32x4_t)v1630, 3);
        v1141 = vsubq_f32(v1125, v1524);
        v1142 = vsubq_f32(v1123, v1530);
        v1143 = vsubq_f32(v1130, v1057);
        v1144 = vsubq_f32(v1128, v1517);
        v1145 = vsubq_f32(v1136, v1059);
        v1146 = vsubq_f32(v1134, v1060);
        v1147 = vsubq_f32(vmlaq_laneq_f32(v1064, v1137[2], (float32x4_t)v1630, 3), v1070);
        v1148 = vsubq_f32(v1140, v1068);
        v1149 = vsubq_f32(v1139, v1071);
        v1150 = vsubq_f32(v1138, v1069);
        v1057.i8[0] = *(_BYTE *)(a1 + 135);
        v1151 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v1057, (int8x16_t)v1111), 0);
        __asm { FMOV            V30.4S, #1.0 }
        v1153 = (float32x4_t)vbslq_s8(v1151, _Q30, (int8x16_t)v1069);
        v1154 = (float32x4_t)vbslq_s8(v1151, _Q30, (int8x16_t)v1071);
        v1155 = (float32x4_t)vbslq_s8(v1151, _Q30, (int8x16_t)v1068);
        v1156 = (float32x4_t)vbslq_s8(v1151, _Q30, (int8x16_t)v1070);
        v1157 = vmulq_f32(v1142, v1156);
        v1158 = vmulq_f32(vsubq_f32(v1124, v1537), v1155);
        v1159 = vmulq_f32(v1141, v1154);
        v1160 = vmulq_f32(vsubq_f32(v1126, v1526), v1153);
        v1161 = vmulq_f32(v1144, v1153);
        v1162 = vmulq_f32(vsubq_f32(v1129, v1523), v1154);
        v1163 = vmulq_f32(v1143, v1155);
        v1164 = vmulq_f32(vsubq_f32(v1131, v1511), v1156);
        v1165 = vmulq_f32(vsubq_f32(v1133, v1061), v1153);
        v1166 = vmulq_f32(v1146, v1154);
        v1167 = vmulq_f32(vsubq_f32(v1135, v1062), v1155);
        v1168 = vmulq_f32(v1145, v1156);
        v1169 = vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v1163, v1163), *(float32x2_t *)_Q1.f32, 1), vmulq_f32(v1158, v1158), _Q1.f32[0]), vmulq_f32(v1167, v1167), _Q1, 2), vmulq_f32(v1148, v1148), _Q1, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v1164, v1164), *(float32x2_t *)_Q1.f32, 1), vmulq_f32(v1157, v1157), _Q1.f32[0]),
                        vmulq_f32(v1168, v1168),
                        _Q1,
                        2),
                      vmulq_f32(v1147, v1147),
                      _Q1,
                      3)),
                  vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v1161, v1161), *(float32x2_t *)_Q1.f32, 1), vmulq_f32(v1160, v1160), _Q1.f32[0]), vmulq_f32(v1165, v1165), _Q1, 2), vmulq_f32(v1150, v1150), _Q1, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v1162, v1162), *(float32x2_t *)_Q1.f32, 1), vmulq_f32(v1159, v1159), _Q1.f32[0]), vmulq_f32(v1166, v1166),
                        _Q1,
                        2),
                      vmulq_f32(v1149, v1149),
                      _Q1,
                      3)));
        goto LABEL_177;
      }
      v425 = v1589;
LABEL_182:
      v694 *= 2;
      if ((v694 & 0xFEu) >= 9)
        goto LABEL_183;
    }
  }
  v1463 = 0;
  v1461 = 0u;
  v1462 = 0u;
  v1460 = 0u;
LABEL_183:
  v1248 = *a3;
  if (v425.f32[0] >= *a3)
  {
    v1253 = 0;
    v1255 = 0;
    v1251 = 0;
    LOBYTE(v1252) = 0;
    v1254 = 0;
    v1249 = 0uLL;
    v1478 = 0;
    v1250 = 0uLL;
  }
  else
  {
    v1249 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v1482), (int16x8_t)vcvtq_s32_f32(v1484)), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v1480), (int16x8_t)vcvtq_s32_f32(v1486)));
    v1250 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v1477), (int16x8_t)vcvtq_s32_f32(v1462)), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v1461), (int16x8_t)vcvtq_s32_f32(v1460)));
    v1251 = v1464 >> 27;
    v1252 = HIDWORD(v1464);
    v1253 = v1464 & 0x1E7F3;
    v1254 = ((v1464 >> 14) & 6) + 2;
    *a3 = v425.f32[0];
    v1248 = v425.f32[0];
    v1255 = v1463;
  }
  if (v1454 > v1248)
  {
    v1256 = v1252 + 1;
    v1257 = __clz(__rbit32(v1256));
    v1258 = v1256 >> v1257;
    v1259 = (v1256 >> v1257);
    v1260 = (int16x8_t)vmovl_u8(v1478);
    if ((_DWORD)v1257 && v1259 != 1)
    {
      v1261 = (uint16x8_t)vsubq_s16(vdupq_n_s16(v1252), v1260);
      if (v1259 == 3)
        v1262 = 21846;
      else
        v1262 = 13108;
      v1263 = (int8x16_t)vdupq_n_s16(v1262);
      v1264 = (int16x8_t)vminq_u16((uint16x8_t)v1260, v1261);
      v1265 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v1264.i8, *(uint16x4_t *)v1263.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v1264, (uint16x8_t)v1263), 0x10uLL);
      v1263.i64[0] = 0x1000100010001;
      v1263.i64[1] = 0x1000100010001;
      v1260 = (int16x8_t)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v1264, v1265, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v1258))), (uint16x8_t)vdupq_n_s16(v1257)), vaddq_s16(v1265, v1265)), vbicq_s8(v1263, (int8x16_t)vceqq_s16(v1264, v1260)));
    }
    v1266 = (int16x8_t)vandq_s8((int8x16_t)v1260, (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v1254), (uint16x8_t)xmmword_20631C630));
    if (v1259 != 5)
    {
      if (v1259 == 3)
      {
        *(int8x8_t *)v1266.i8 = vmovn_s16(v1266);
        v1291 = (uint8x16_t)vandq_s8((int8x16_t)v1266, (int8x16_t)xmmword_20631C6B0);
        v1292 = vdupq_n_s8(v1257);
        v1293 = (int8x16_t)vshlq_u8(v1291, (uint8x16_t)vnegq_s8(v1292));
        v1294 = vqtbl1q_s8(v1293, (int8x16_t)xmmword_20631C6C0);
        v1295 = (int32x4_t)vqtbl1q_s8(v1293, (int8x16_t)xmmword_20631C6D0);
        v1296 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1294.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1294, v1294, 8uLL), (uint8x8_t)0x8010040180100401));
        v1296.i64[0] = vpaddq_s16(v1296, v1296).u64[0];
        v1297 = (int8x16_t)vmovl_s16(*(int16x4_t *)v1296.i8);
        v1298 = vshlq_n_s32(v1295, 5uLL);
        v1294.i64[0] = 0x3000000030;
        v1294.i64[1] = 0x3000000030;
        v1299.i64[0] = 0x2000000020;
        v1299.i64[1] = 0x2000000020;
        v1300 = (int8x16_t)vceqq_s32((int32x4_t)vandq_s8(v1297, v1294), v1299);
        v1301 = vaddw_s16(v1298, *(int16x4_t *)v1296.i8);
        v1299.i64[0] = 0xFF000000FFLL;
        v1299.i64[1] = 0xFF000000FFLL;
        v1302 = (int8x16_t)vcgtq_s32(v1301, v1299);
        if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v1300, v1302)) & 0x80000000) != 0)
        {
          v1303.i64[0] = 0x200000002;
          v1303.i64[1] = 0x200000002;
          v1304 = (int8x16_t)vceqq_s32(v1295, v1303);
          v1305 = (int8x16_t)vshrq_n_u32((uint32x4_t)v1297, 2uLL);
          v1306 = vandq_s8(v1302, v1304);
          v1307.i64[0] = 0xF0000000FLL;
          v1307.i64[1] = 0xF0000000FLL;
          v1308 = vandq_s8(v1297, v1307);
          v1309.i64[0] = 0x303030303030303;
          v1309.i64[1] = 0x303030303030303;
          v1310.i64[0] = 0x6060606060606060;
          v1310.i64[1] = 0x6060606060606060;
          v1301.i64[0] = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v1310, (int8x16_t)v1298, v1309), v1302), (int8x16_t)v1301), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v1308), v1300), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v1305, v1307)), v1306))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v1308), vandq_s8(v1306, v1300))).u64[0];
        }
        v1301.i64[1] = v1301.i64[0];
        v1311 = (int32x4_t)vmovl_u8((uint8x8_t)vorr_s8((int8x8_t)vshl_u8(vshl_u8((uint8x8_t)vand_s8(vqtbl1_s8((int8x16_t)v1301, (int8x8_t)0x404040000000000), (int8x8_t)0x100C038060100C03), (uint8x8_t)0xFCFE00F9FBFCFE00), *(uint8x8_t *)v1292.i8), vand_s8(*(int8x8_t *)v1291.i8, vdup_n_s8((1 << v1257) - 1))));
        v1312 = vadd_s32(vdup_n_s32(2 * (int)v1257), (int32x2_t)0x300000004);
        v1313.i64[0] = v1312.u32[0];
        v1313.i64[1] = v1312.u32[1];
        v1314 = (int32x4_t)vshlq_u32(vmlal_u16((uint32x4_t)(*(_OWORD *)&v1311 & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), (uint16x4_t)vshrn_n_s32(v1311, 0x10uLL), vshl_u16((uint16x4_t)vdup_n_s16(1 << v1257), (uint16x4_t)0x2000100010002)), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v1313));
        v1314.i64[0] = vpaddq_s32(v1314, v1314).u64[0];
        v1290 = ((unint64_t)v1314.u32[1] << (4 * v1257 + 7)) | v1314.u32[0];
      }
      else
      {
        if (v1259 == 1)
        {
          v1267.i64[0] = 0xFFFF0000FFFFLL;
          v1267.i64[1] = 0xFFFF0000FFFFLL;
          v1268.i64[0] = 0xFFFF0000FFFF0000;
          v1268.i64[1] = 0xFFFF0000FFFF0000;
          v1269 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)v1266, v1268), (uint32x4_t)vnegq_s32(vdupq_n_s32(16 - (int)v1257))), vandq_s8((int8x16_t)v1266, v1267));
          v1267.i64[0] = 0xFFFFFFFFLL;
          v1267.i64[1] = 0xFFFFFFFFLL;
          v1270 = vandq_s8(v1269, v1267);
          v1268.i64[0] = 0xFFFFFFFF00000000;
          v1268.i64[1] = 0xFFFFFFFF00000000;
          v1271 = (uint64x2_t)vandq_s8(v1269, v1268);
          *(int32x2_t *)v1268.i8 = vdup_n_s32(2 * (16 - (int)v1257));
          v1272.i64[0] = v1268.u32[0];
          v1272.i64[1] = v1268.u32[1];
          v1273 = vorrq_s8((int8x16_t)vshlq_u64(v1271, (uint64x2_t)vnegq_s64(v1272)), v1270);
          v1274 = v1273.i64[0];
          v1275 = v1273.i64[1] << (4 * v1257);
LABEL_200:
          v1290 = v1275 | v1274;
          goto LABEL_205;
        }
        v1290 = 0;
      }
LABEL_205:
      v1315 = __clz(__rbit32(v1251 + 1));
      v1316 = (v1251 + 1) >> v1315;
      v1629.i8[2] = v1315;
      v1629.i16[0] = v1251 | ((_WORD)v1316 << 8);
      if ((v1253 & 0x400) == 0)
      {
        *(double *)v1317.i64 = PackWeights((unsigned __int8 *)&v1629, v1249);
        v1318 = a2;
LABEL_225:
        v1412.i64[0] = v1253 | (v1290 << 17);
        v1412.i64[1] = v1290 >> 47;
        *v1318 = vorrq_s8(v1317, v1412);
        return;
      }
      if (v1316 == 1)
      {
        v1319 = (uint8x16_t)vzip2q_s8(v1249, v1250);
        v1320 = (uint8x16_t)vzip1q_s8(v1249, v1250);
        v1321 = 32 * v1315;
        v1322 = (uint8x16_t)vdupq_n_s16(v1315 << 8);
        v1323 = (uint8x16_t)vpaddq_s8((int8x16_t)vshlq_u8(v1320, v1322), (int8x16_t)vshlq_u8(v1319, v1322));
        v1324 = (uint8x16_t)vdupq_n_s16(8 - 2 * v1315);
        v1325 = (uint16x8_t)vshlq_u8(v1323, v1324);
        v1326 = (uint16x8_t)vmovl_s8((int8x8_t)vmul_s16(*(int16x4_t *)v1324.i8, (int16x4_t)0xFE00FE00FE00FELL));
        v1327 = (uint32x4_t)vshlq_u16(v1325, v1326);
        v1328 = (uint32x4_t)vmull_s16(*(int16x4_t *)v1326.i8, (int16x4_t)0x2000200020002);
        v1329 = (uint64x2_t)vshlq_u32(v1327, v1328);
        v1330 = (uint64x2_t)vmull_s32(*(int32x2_t *)v1328.i8, (int32x2_t)0x200000002);
        v1331 = vqtbl1q_s8((int8x16_t)vshlq_u64(v1329, v1330), vaddq_s8(vdupq_n_s8(v1330.i8[0] >> 2), (int8x16_t)xmmword_2062D8540));
      }
      else
      {
        if (v1315)
        {
          v1332 = vmovl_u8(*(uint8x8_t *)v1249.i8);
          v1333 = vmovl_high_u8((uint8x16_t)v1249);
          v1334 = (uint16x8_t)vdupq_n_s16(v1251);
          v1335 = vsubw_u8(v1334, *(uint8x8_t *)v1249.i8);
          v1336 = vsubw_high_u8(v1334, (uint8x16_t)v1249);
          v1337 = (int16x8_t)vminq_u16(v1336, v1333);
          v1338 = (int16x8_t)vminq_u16(v1335, v1332);
          if (v1316 == 3)
            v1339 = 21846;
          else
            v1339 = 13108;
          v1340 = (uint16x8_t)vdupq_n_s16(v1339);
          v1341 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v1338.i8, *(uint16x4_t *)v1340.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v1338, v1340), 0x10uLL);
          v1342 = vdupq_n_s16(v1316);
          v1343 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v1337.i8, *(uint16x4_t *)v1340.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v1337, v1340), 0x10uLL);
          v1344 = (uint16x8_t)vdupq_n_s16(v1315);
          v1345 = (int8x16_t)vcgtq_u16(v1332, v1335);
          v1346.i64[0] = 0x1000100010001;
          v1346.i64[1] = 0x1000100010001;
          v1249 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v1338, v1341, v1342), v1344), vaddq_s16(v1341, v1341)), vandq_s8(v1345, v1346)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v1337, v1343, v1342), v1344), vaddq_s16(v1343, v1343)), vandq_s8((int8x16_t)vcgtq_u16(v1333, v1336), v1346)));
          v1347 = vmovl_u8(*(uint8x8_t *)v1250.i8);
          v1348 = vmovl_high_u8((uint8x16_t)v1250);
          v1349 = vsubw_u8(v1334, *(uint8x8_t *)v1250.i8);
          v1350 = vsubw_high_u8(v1334, (uint8x16_t)v1250);
          v1351 = (int16x8_t)vminq_u16(v1350, v1348);
          v1352 = (int16x8_t)vminq_u16(v1349, v1347);
          v1353 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v1352.i8, *(uint16x4_t *)v1340.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v1352, v1340), 0x10uLL);
          v1354 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v1351.i8, *(uint16x4_t *)v1340.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v1351, v1340), 0x10uLL);
          v1250 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v1352, v1353, v1342), v1344), vaddq_s16(v1353, v1353)), vandq_s8((int8x16_t)vcgtq_u16(v1347, v1349), v1346)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v1351, v1354, v1342), v1344), vaddq_s16(v1354, v1354)), vandq_s8((int8x16_t)vcgtq_u16(v1348, v1350), v1346)));
        }
        v1355 = vzip2q_s8(v1249, v1250);
        v1356 = vzip1q_s8(v1249, v1250);
        v1321 = 32 * v1315;
        if (v1316 == 5)
        {
          v1396 = vqtbl1q_s8(v1356, (int8x16_t)xmmword_20631C7E0);
          v1397 = vqtbl1q_s8(v1355, (int8x16_t)xmmword_20631C7F0);
          v1398 = vuzp1q_s8((int8x16_t)vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1396.i8, (uint8x8_t)0x801080108010801), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1396, v1396, 8uLL), (uint8x8_t)0x801080108010801)), (int8x16_t)vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1397.i8, (uint8x8_t)0x801080108010801), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1397, v1397, 8uLL), (uint8x8_t)0x801080108010801)));
          v1399 = vuzp1q_s8(vqtbl1q_s8(v1356, (int8x16_t)xmmword_20631C800), vqtbl1q_s8(v1355, (int8x16_t)xmmword_20631C650));
          v1400 = vaddq_s8(v1398, vqtbl1q_s8(v1398, (int8x16_t)xmmword_20631C810));
          v1401 = (int16x8_t)vaddq_s8(vqtbl1q_s8(v1399, (int8x16_t)xmmword_20631C810), v1399);
          v1398.i64[0] = 0x707070707070707;
          v1398.i64[1] = 0x707070707070707;
          v1402 = vandq_s8(v1400, v1398);
          v1398.i64[0] = 0xF8F8F8F8F8F8F8F8;
          v1398.i64[1] = 0xF8F8F8F8F8F8F8F8;
          v1403.i64[0] = 0x2020202020202020;
          v1403.i64[1] = 0x2020202020202020;
          v1404 = vceqq_s8(vandq_s8(v1400, v1398), v1403);
          v1398.i64[0] = 0x404040404040404;
          v1398.i64[1] = 0x404040404040404;
          v1405 = vceqq_s8((int8x16_t)v1401, v1398);
          v1406 = vsubq_s8(vaddq_s8(vshlq_n_s8((int8x16_t)v1401, 5uLL), v1400), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C660, v1402), v1405));
          if ((vmaxvq_u8((uint8x16_t)v1404) & 0x80) != 0)
          {
            v1407.i64[0] = 0x2424242424242424;
            v1407.i64[1] = 0x2424242424242424;
            v1408.i64[0] = 0x18001800180018;
            v1408.i64[1] = 0x18001800180018;
            v1406 = vsubq_s8(v1406, vaddq_s8(vaddq_s8(vandq_s8((int8x16_t)vmulq_s16(v1401, v1408), vceqq_s8(v1400, v1407)), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C670, v1402), v1404)), vandq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C680, v1402), v1405), v1404)));
          }
          v1318 = a2;
          v1409.i64[0] = 0x1000100010001;
          v1409.i64[1] = 0x1000100010001;
          v1410 = (int8x16_t)vshlq_u64((uint64x2_t)vshlq_u32((uint32x4_t)vshlq_u16((uint16x8_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v1406, (int8x16_t)xmmword_20631C820), v1409), (uint16x8_t)xmmword_20631C830), (uint32x4_t)xmmword_20631C840), (uint64x2_t)xmmword_20631C850);
          v1331 = vextq_s8(v1410, v1410, 1uLL);
          v1321 += 75;
          goto LABEL_224;
        }
        if (v1316 == 3)
        {
          v1357 = vdupq_n_s8(v1315);
          v1358 = (uint8x16_t)vnegq_s8(v1357);
          v1359 = (int16x8_t)vshlq_u8((uint8x16_t)v1355, v1358);
          v1360 = (int8x16_t)vshlq_u8((uint8x16_t)v1356, v1358);
          v1361 = vqtbl1q_s8(v1360, (int8x16_t)xmmword_20631C6C0);
          v1362 = vqtbl1q_s8((int8x16_t)v1359, (int8x16_t)xmmword_20631C710);
          v1363 = vpaddq_s16(vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1361.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1361, v1361, 8uLL), (uint8x8_t)0x8010040180100401)), vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1362.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1362, v1362, 8uLL), (uint8x8_t)0x8010040180100401)));
          v1364 = vuzp1q_s16((int16x8_t)vqtbl1q_s8(v1360, (int8x16_t)xmmword_20631C6D0), (int16x8_t)vqtbl1q_s8((int8x16_t)v1359, (int8x16_t)xmmword_20631C720));
          v1365 = (int8x16_t)vaddq_s16(v1363, (int16x8_t)vqtbl1q_s8((int8x16_t)v1363, (int8x16_t)xmmword_20631C730));
          v1366 = (int16x8_t)v1365;
          v1366.i16[3] = 0;
          v1359.i64[0] = 0x20002000200020;
          v1359.i64[1] = 0x20002000200020;
          v1367 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v1365, (int8x16_t)xmmword_20631C740), v1359);
          v1360.i64[0] = 0xFF00FF00FF00FFLL;
          v1360.i64[1] = 0xFF00FF00FF00FFLL;
          v1368 = (int8x16_t)vcgtq_u16((uint16x8_t)v1366, (uint16x8_t)v1360);
          v1369 = vshlq_n_s16(v1364, 5uLL);
          v1370 = (int8x16_t)vaddq_s16(v1366, v1369);
          if ((vmaxvq_u16((uint16x8_t)vorrq_s8(v1367, v1368)) & 0x8000) != 0)
          {
            v1371.i64[0] = 0x2000200020002;
            v1371.i64[1] = 0x2000200020002;
            v1372 = vandq_s8(v1368, (int8x16_t)vceqq_s16(v1364, v1371));
            v1373 = vandq_s8(v1365, (int8x16_t)xmmword_20631C750);
            v1374.i64[0] = 0x303030303030303;
            v1374.i64[1] = 0x303030303030303;
            v1375.i64[0] = 0x6060606060606060;
            v1375.i64[1] = 0x6060606060606060;
            v1376 = vmlaq_s8(v1375, (int8x16_t)v1369, v1374);
            v1377.i64[0] = 0xF000F000F000FLL;
            v1377.i64[1] = 0xF000F000F000FLL;
            v1370 = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(v1376, v1368), v1370), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v1373), v1367), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v1366, 2uLL), v1377)), v1372))), vandq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v1373), v1367), v1372));
          }
          v1378 = vdupq_n_s8((1 << v1315) - 1);
          v1379 = vandq_s8(v1356, v1378);
          v1380 = vandq_s8(v1355, v1378);
          v1381 = vqtbl1q_s8(v1370, (int8x16_t)xmmword_20631C760);
          v1382 = (int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v1370, (int8x16_t)xmmword_20631C770), (int8x16_t)xmmword_20631C780), (uint8x16_t)xmmword_20631C7B0), (uint8x16_t)v1357);
          v1383 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(v1381, (int8x16_t)xmmword_20631C790), (uint8x16_t)xmmword_20631C7A0), (uint8x16_t)v1357), v1380);
          v1384 = vorrq_s8(v1382, v1379);
          v1385 = vaddq_s8((int8x16_t)vshlq_u8((uint8x16_t)vmulq_s8(vdupq_n_s8(1 << v1315), vuzp2q_s8(v1384, v1383)), (uint8x16_t)xmmword_20631C7C0), vuzp1q_s8(v1384, v1383));
          v1386 = *(_OWORD *)&v1385 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
          v1387 = (int16x8_t)vshlq_u16((uint16x8_t)(*(_OWORD *)&v1385 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(5 - 2 * v1315)));
          v1388 = (int8x16_t)vaddq_s16(vaddq_s16(v1387, (int16x8_t)v1386), (int16x8_t)vandq_s8((int8x16_t)v1387, (int8x16_t)xmmword_20631C7D0));
          *(_QWORD *)&v1386 = 0xFFFF0000FFFFLL;
          *((_QWORD *)&v1386 + 1) = 0xFFFF0000FFFFLL;
          v1389 = (int32x4_t)vandq_s8(v1388, (int8x16_t)v1386);
          v1380.i64[0] = 0xFFFF0000FFFF0000;
          v1380.i64[1] = 0xFFFF0000FFFF0000;
          v1390 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v1388, v1380), (uint32x4_t)vnegq_s32(vdupq_n_s32(10 - 4 * v1315)));
          v1391 = (int8x16_t)vaddq_s32(vaddq_s32(v1390, v1389), (int32x4_t)v1390.u64[0]);
          v1389.i64[0] = 0xFFFFFFFFLL;
          v1389.i64[1] = 0xFFFFFFFFLL;
          v1392 = (int64x2_t)vandq_s8(v1391, (int8x16_t)v1389);
          v1380.i64[0] = 0xFFFFFFFF00000000;
          v1380.i64[1] = 0xFFFFFFFF00000000;
          v1393 = (uint64x2_t)vandq_s8(v1391, v1380);
          *(int32x2_t *)v1380.i8 = vdup_n_s32(19 - 8 * v1315);
          v1394.i64[0] = v1380.u32[0];
          v1394.i64[1] = v1380.u32[1];
          v1395 = vaddq_s64((int64x2_t)vshlq_u64(v1393, (uint64x2_t)vnegq_s64(v1394)), v1392);
          v1331.i64[0] = (v1395.i64[1] << (16 * v1315 + 26)) | v1395.i64[0];
          v1331.i64[1] = (unint64_t)v1395.i64[1] >> (38 - 16 * v1315);
          v1321 += 52;
        }
        else
        {
          v1331 = 0uLL;
        }
      }
      v1318 = a2;
LABEL_224:
      v1411 = vqtbl1q_s8((int8x16_t)(31 - __clz(v1255)), vsubq_s8((int8x16_t)xmmword_2062D8540, vdupq_n_s8((126 - v1321) >> 3)));
      v1317 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vqtbl1q_s8(v1411, (int8x16_t)xmmword_2062D8550), (uint64x2_t)vdupq_n_s64((126 - v1321) | 0xFFFFFFFFFFFFFFF8)), (int8x16_t)vshlq_u64((uint64x2_t)v1411, (uint64x2_t)vdupq_n_s64((126 - v1321) & 7))), vqtbl1q_s8(vrbitq_s8(v1331), (int8x16_t)xmmword_20631C860));
      goto LABEL_225;
    }
    v1276 = vdupq_n_s16(v1257);
    v1277 = (int16x8_t)vshlq_u16((uint16x8_t)v1266, (uint16x8_t)vnegq_s16(v1276));
    *(int8x8_t *)v1277.i8 = vmovn_s16(v1277);
    v1278 = vqtbl1q_s8((int8x16_t)v1277, (int8x16_t)xmmword_20631C640);
    v1279 = (int16x8_t)vqtbl1q_s8((int8x16_t)v1277, (int8x16_t)xmmword_20631C650);
    v1280 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1278.i8, (uint8x8_t)0x2001200120012001), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1278, v1278, 8uLL), (uint8x8_t)0x2001200120012001));
    v1278.i64[0] = 0x7000700070007;
    v1278.i64[1] = 0x7000700070007;
    v1281 = (int16x8_t)vandq_s8((int8x16_t)v1280, v1278);
    v1282 = (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v1280, 5uLL), v1278);
    v1283.i64[0] = 0x4000400040004;
    v1283.i64[1] = 0x4000400040004;
    v1284 = (int8x16_t)vceqq_s16(v1279, v1283);
    v1285 = (int8x16_t)vceqq_s16(v1282, v1283);
    v1286 = vsubq_s8((int8x16_t)vaddq_s16(v1280, vshlq_n_s16(v1279, 3uLL)), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C660, (int8x16_t)v1281), v1285));
    if ((vmaxvq_u16((uint16x8_t)v1284) & 0x8000) != 0)
    {
      v1287.i64[0] = 0x18001800180018;
      v1287.i64[1] = 0x18001800180018;
      v1286.i64[0] = vsubq_s8(v1286, vaddq_s8(vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C670, (int8x16_t)v1281), v1284), vandq_s8((int8x16_t)vmulq_s16(v1282, v1287), vandq_s8((int8x16_t)vceqq_s16(v1281, v1283), v1284))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C680, (int8x16_t)v1281), vandq_s8(v1285, v1284)))).u64[0];
    }
    v1286.i64[1] = v1286.i64[0];
    v1288 = (int16x8_t)vshlq_u16((uint16x8_t)vorrq_s8((int8x16_t)vshlq_u16(vmovl_u8(vshl_u8((uint8x8_t)vand_s8(vqtbl1_s8(v1286, (int8x8_t)0x404020202000000), (int8x8_t)0x1807601807601807), (uint8x8_t)0xFD00FBFD00FBFD00)), (uint16x8_t)v1276), vandq_s8((int8x16_t)v1266, (int8x16_t)vdupq_n_s16(~(-1 << v1257)))), (uint16x8_t)vaddq_s16((int16x8_t)vdupq_n_s32((_DWORD)v1257 << 16), (int16x8_t)xmmword_20631C690));
    v1289 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v1288, v1288)), (uint32x4_t)vaddq_s32((int32x4_t)vdupq_n_s64(v1257 << 33), (int32x4_t)xmmword_20631C6A0));
    v1289.i64[0] = vpaddq_s32(v1289, v1289).u64[0];
    v1274 = v1289.u32[0];
    v1275 = (v1289.i64[0] & 0xFFFFFFFF00000000) >> (22 - 4 * v1257);
    goto LABEL_200;
  }
}

float32x4_t Read_4x4_RGBA8_vec@<Q0>(int8x16_t *a1@<X0>, _QWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  int8x16_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  unsigned __int128 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t result;

  bzero(a3, 0xAC0uLL);
  v6 = *a1;
  v7 = (int8x16_t *)((char *)a1 + *a2);
  v8.i64[0] = 0xFF000000FFLL;
  v8.i64[1] = 0xFF000000FFLL;
  v9 = vandq_s8(*a1, v8);
  v10 = *v7;
  v11 = vandq_s8(*v7, v8);
  v12 = (int8x16_t *)((char *)v7 + a2[1]);
  v13 = *(int8x16_t *)((char *)v12 + a2[2]);
  v14 = vandq_s8(v13, v8);
  v15 = *v12;
  v16 = *(_OWORD *)&vandq_s8(*v12, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v17.i64[0] = 0xCB000000CB000000;
  v17.i64[1] = 0xCB000000CB000000;
  a3[8].i16[2] = 324;
  v18 = vaddq_f32((float32x4_t)v16, v17);
  v19 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  a3[8].i8[6] = -1;
  a3[8].i8[8] = -1;
  a3[9] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v9 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v19);
  a3[10] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v11 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v19);
  v9.i64[0] = 0xFF000000FF00;
  v9.i64[1] = 0xFF000000FF00;
  a3[11] = vmulq_f32(v18, v19);
  a3[12] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v14 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v19);
  v20 = (float32x4_t)vdupq_n_s32(0x37808081u);
  a3[13] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v6, v9) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v20);
  a3[14] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v10, v9) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v20);
  a3[15] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v15, v9) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v20);
  a3[16] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v13, v9) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v20);
  v21 = (float32x4_t)vshrq_n_u32((uint32x4_t)v15, 0x10uLL);
  v22 = (float32x4_t)vshrq_n_u32((uint32x4_t)v13, 0x10uLL);
  v23 = (float32x4_t)vshrq_n_u32((uint32x4_t)v10, 0x10uLL);
  v24 = (float32x4_t)vshrq_n_u32((uint32x4_t)v6, 0x10uLL);
  v21.i32[0] = v21.i32[0] & 0xB4FF00FF | 0x4B000000;
  v21.i32[1] = v21.i32[1] & 0xB4FF00FF | 0x4B000000;
  v21.i32[2] = v21.i32[2] & 0xB4FF00FF | 0x4B000000;
  v21.i32[3] = v21.i32[3] & 0xB4FF00FF | 0x4B000000;
  v22.i32[0] = v22.i32[0] & 0xB4FF00FF | 0x4B000000;
  v22.i32[1] = v22.i32[1] & 0xB4FF00FF | 0x4B000000;
  v22.i32[2] = v22.i32[2] & 0xB4FF00FF | 0x4B000000;
  v22.i32[3] = v22.i32[3] & 0xB4FF00FF | 0x4B000000;
  v23.i32[0] = v23.i32[0] & 0xB4FF00FF | 0x4B000000;
  v23.i32[1] = v23.i32[1] & 0xB4FF00FF | 0x4B000000;
  v23.i32[2] = v23.i32[2] & 0xB4FF00FF | 0x4B000000;
  v23.i32[3] = v23.i32[3] & 0xB4FF00FF | 0x4B000000;
  v24.i32[0] = v24.i32[0] & 0xB4FF00FF | 0x4B000000;
  v24.i32[1] = v24.i32[1] & 0xB4FF00FF | 0x4B000000;
  v24.i32[2] = v24.i32[2] & 0xB4FF00FF | 0x4B000000;
  v24.i32[3] = v24.i32[3] & 0xB4FF00FF | 0x4B000000;
  a3[17] = vmulq_f32(vaddq_f32(v24, v17), v19);
  a3[18] = vmulq_f32(vaddq_f32(v23, v17), v19);
  a3[19] = vmulq_f32(vaddq_f32(v21, v17), v19);
  a3[20] = vmulq_f32(vaddq_f32(v22, v17), v19);
  a3[21] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v6, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v19);
  a3[22] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v10, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v19);
  result = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v13, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v19);
  a3[23] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v15, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v19);
  a3[24] = result;
  return result;
}

uint64_t ASTCEncoder::ASTCEncoder(uint64_t a1, uint64_t a2)
{
  return ASTCEncoder::ASTCEncoder(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *exception;
  _QWORD block[5];

  *(_QWORD *)a1 = &off_24BEFE340;
  *(_QWORD *)(a1 + 8) = a2;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN11ASTCEncoderC2ERK10CommonData_block_invoke;
  block[3] = &__block_descriptor_tmp;
  block[4] = a2;
  if (ASTCEncoder::ASTCEncoder(CommonData const&)::once_control != -1)
    dispatch_once(&ASTCEncoder::ASTCEncoder(CommonData const&)::once_control, block);
  v3 = *(_QWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = (*(_DWORD *)(v3 + 24) >> 26) & 0xF;
  *(_DWORD *)(a1 + 20) = (*(_QWORD *)(v3 + 24) >> 30) & 0xF;
  *(_DWORD *)(a1 + 24) = 1;
  *(_WORD *)(a1 + 88) = 257;
  v4 = (*(_QWORD *)(v3 + 16) & 0x7FFLL) - 1;
  if (v4 >= 0xA)
    goto LABEL_13;
  v5 = qword_2062D8630[(int)v4];
  *(_QWORD *)(a1 + 56) = off_24BEFE600[v4];
  v6 = *(_DWORD *)(v3 + 24) & 0x7FF;
  if (v6 > 0x1E)
    goto LABEL_13;
  if (((1 << v6) & 0x7FFE7EFC) == 0)
  {
    if (v6 == 1)
    {
      *(_QWORD *)(a1 + 48) = kReadProcs4x4[v5];
      v8 = *(unsigned int *)(v3 + 32);
      v9 = *(unsigned int *)(v3 + 36);
      v11 = kAlphaProcs4x4[3 * v8 + v9];
      v12 = kEncodeProcs4x4;
      goto LABEL_12;
    }
    if (v6 == 8)
    {
      *(_QWORD *)(a1 + 48) = kReadProcs8x8[v5];
      v8 = *(unsigned int *)(v3 + 32);
      v9 = *(unsigned int *)(v3 + 36);
      v11 = kAlphaProcs8x8[3 * v8 + v9];
      v12 = kEncodeProcs8x8;
LABEL_12:
      *(_QWORD *)(a1 + 32) = v11;
      *(_QWORD *)(a1 + 40) = v12;
      v13 = kWriteProcs[v5];
      *(_QWORD *)(a1 + 64) = kDecodeProcs;
      *(_QWORD *)(a1 + 72) = v13;
      goto LABEL_7;
    }
LABEL_13:
    exception = __cxa_allocate_exception(4uLL);
    *exception = -1;
    __cxa_throw(exception, MEMORY[0x24BEDB798], 0);
  }
  v7 = kWriteProcs[v5];
  *(_QWORD *)(a1 + 64) = kDecodeProcs;
  *(_QWORD *)(a1 + 72) = v7;
  *(_BYTE *)(a1 + 88) = 0;
  v8 = *(unsigned int *)(v3 + 32);
  LODWORD(v9) = *(_DWORD *)(v3 + 36);
LABEL_7:
  *(_QWORD *)(a1 + 80) = kTexelAlphaProcs[3 * v9 + v8];
  return a1;
}

at_encoder_t at_encoder_create(at_texel_format_t texelType, at_alpha_t texelAlphaType, at_block_format_t blockType, at_alpha_t blockAlphaType, const float *backgroundColor)
{
  unint64_t TexelInfo;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t (*v16)(NSObject *, NSObject *);
  NSObject *Encoder;
  NSObject *v18;
  objc_class *v19;
  __int128 v20;
  __int128 v21;
  __int128 __dst;
  __int128 v24;
  __int128 v25;

  __dst = 0uLL;
  TexelInfo = GetTexelInfo(texelType);
  *(_QWORD *)&v24 = TexelInfo;
  *((_QWORD *)&v24 + 1) = GetBlockInfo(blockType);
  *(_QWORD *)&v25 = __PAIR64__(blockAlphaType, texelAlphaType);
  if (at_get_cpucapabilities(void)::onceToken != -1)
    dispatch_once(&at_get_cpucapabilities(void)::onceToken, &__block_literal_global);
  *((_QWORD *)&v25 + 1) = at_get_cpucapabilities(void)::gCapabilities & ~gCapabilitiesMask;
  if ((TexelInfo & 0x7FF) != 0)
  {
    if (texelAlphaType < at_alpha_count)
    {
      if (blockAlphaType < at_alpha_count)
      {
        if (backgroundColor)
          memcpy(&__dst, backgroundColor, (TexelInfo >> 17) & 0x1C);
        v10 = 0;
        v11 = 1;
        do
        {
          v12 = v11;
          v13 = ((uint64_t (*)(__int128 *))at_encoder_create::Factories[v10])(&__dst);
          if (v14)
            v15 = v13 == 0;
          else
            v15 = 1;
          if (!v15)
          {
            v16 = (uint64_t (*)(NSObject *, NSObject *))v13;
            Encoder = AllocateEncoder();
            if (Encoder)
            {
              v18 = Encoder;
              v19 = (objc_class *)&Encoder[4];
              v21 = v24;
              v20 = v25;
              *(_OWORD *)&Encoder[4].isa = __dst;
              *(_OWORD *)&Encoder[6].isa = v21;
              *(_OWORD *)&Encoder[8].isa = v20;
              if (v16(Encoder + 4, Encoder + 10))
                return v18;
              v18[10].isa = (Class)&unk_24BEFE480;
              v18[11].isa = v19;
              os_release(v18);
            }
          }
          v11 = 0;
          v10 = 1;
        }
        while ((v12 & 1) != 0);
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_create: no encoder found for texelType: %lu texelAlphaType: %u blockType: %lu blockAlphaType: %u\n");
      }
      else
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_create: Error blockAlphaType %u is out of range\n");
      }
    }
    else
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_create: Error texelAlphaType %u is out of range\n");
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_create: Error unsupported texel type: %u\n");
  }
  return 0;
}

uint64_t GetTexelInfo(unint64_t a1)
{
  unint64_t v1;

  if (a1 <= 0xA)
    v1 = a1;
  else
    v1 = 0;
  return GetTexelInfo_TexelInfoTable[v1];
}

uint64_t GetBlockInfo(unint64_t a1)
{
  unint64_t v1;

  if (a1 <= 0x2A)
    v1 = a1;
  else
    v1 = 0;
  return GetBlockInfo_BlockInfoTable[v1];
}

uint64_t ATEncoder::GetBlockFormat(ATEncoder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 24) & 0x7FFLL;
}

void freePartitionTables2D(char *a1)
{
  uint64_t i;
  void *v3;

  if (a1)
  {
    for (i = 0; i != 24576; i += 8)
    {
      v3 = *(void **)&a1[i];
      if (v3)
        free(v3);
    }
    free(a1);
  }
}

void ASTCEncoder::~ASTCEncoder(char **this)
{
  *this = (char *)&off_24BEFE340;
  freePartitionTables2D(this[12]);
}

{
  ASTCEncoder::~ASTCEncoder(this);
  JUMPOUT(0x20BCF1508);
}

void EncodeASTC_4x4_RGBA_vec(float32x4_t *a1, float *a2, int8x16_t *a3)
{
  float v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v16;
  int16x8_t v17;
  unsigned __int16 v18;
  uint64_t i;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  unsigned __int16 v26;
  uint64_t j;
  uint64_t v29;
  int v30;
  unsigned __int16 *v31;
  float v32;
  int8x16_t v33;
  int8x16_t v34[4];
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  __int128 v43;
  _DWORD v44[3];
  _DWORD v45[3];
  uint64_t v46;

  v46 = *MEMORY[0x24BDAC8D0];
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v35 = 0u;
  EncodeBasicBlock_4x4((uint64_t)a1, a3, a2, &v35);
  v6 = *a2;
  if (*a2 >= a2[1])
  {
    memset(v34, 0, sizeof(v34));
    v7 = vmaxnmq_f32(vmaxnmq_f32(v39, v41), vmaxnmq_f32(v40, v42));
    v8 = vminnmq_f32(vminnmq_f32(v39, v41), vminnmq_f32(v40, v42));
    v9 = vmaxnmq_f32(v7, (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v7), (int8x16_t)v7, 8uLL));
    v10 = vminnmq_f32(v8, (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v8), (int8x16_t)v8, 8uLL));
    __asm { FMOV            V6.4S, #3.0 }
    v9.i64[0] = vmlaq_f32(vmaxnmq_f32(v9, (float32x4_t)vrev64q_s32((int32x4_t)v9)), _Q6, vminnmq_f32(v10, (float32x4_t)vrev64q_s32((int32x4_t)v10))).u64[0];
    v9.f32[0] = 0.25 * v9.f32[0];
    v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0);
    v17 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v16, v39), (int16x8_t)vcgtq_f32(v16, v40)), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v16, v41), (int16x8_t)vcgtq_f32(v16, v42)), (int8x16_t)xmmword_20631C0C0));
    v17.i16[0] = vaddvq_s16(v17);
    v18 = v17.i16[0];
    GetDualPartitionPatterns(v17.u32[0], v44);
    for (i = 0; i != 3; ++i)
    {
      EncodeStandardDualPartitionBlock((uint64_t)a1, (uint64_t)v34, (unsigned __int16 *)&v44[i], v6);
      if (v6 >= v20)
        v6 = v20;
    }
    if (v6 > a2[1])
    {
      if (a1[8].i8[8])
        goto LABEL_8;
      __asm { FMOV            V4.4S, #1.0 }
      v26 = vaddvq_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(_Q4, a1[21]), (int16x8_t)vcgtq_f32(_Q4, a1[22])), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(_Q4, a1[23]), (int16x8_t)vcgtq_f32(_Q4, a1[24])), (int8x16_t)xmmword_20631C0C0)));
      if (v26 == 0xFFFF)
      {
LABEL_8:
        v21 = vmaxnmq_f32(vmaxnmq_f32(v35, v37), vmaxnmq_f32(v36, v38));
        v22 = vminnmq_f32(vminnmq_f32(v35, v37), vminnmq_f32(v36, v38));
        v23 = vmaxnmq_f32(v21, (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v21), (int8x16_t)v21, 8uLL));
        v24 = vminnmq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v22), (int8x16_t)v22, 8uLL));
        v23.i64[0] = vaddq_f32(vmaxnmq_f32(v23, (float32x4_t)vrev64q_s32((int32x4_t)v23)), vminnmq_f32(v24, (float32x4_t)vrev64q_s32((int32x4_t)v24))).u64[0];
        v23.f32[0] = 0.5 * v23.f32[0];
        v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 0);
        v26 = vaddvq_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v25, v35), (int16x8_t)vcgtq_f32(v25, v36)), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v25, v37), (int16x8_t)vcgtq_f32(v25, v38)), (int8x16_t)xmmword_20631C0C0)));
      }
      if (v26 != v18 && (unsigned __int16)(v26 - 1) <= 0xFFFDu)
      {
        GetDualPartitionPatterns(v26, v45);
        for (j = 3; j != 6; ++j)
        {
          v29 = 0;
          v30 = 0;
          v31 = (unsigned __int16 *)&v44[j];
          do
            v30 |= *v31 == LOWORD(v44[v29++]);
          while (v29 != 3);
          if (!v30)
          {
            EncodeStandardDualPartitionBlock((uint64_t)a1, (uint64_t)v34, v31, v6);
            if (v6 >= v32)
              v6 = v32;
          }
        }
      }
    }
    if (v6 < *a2)
    {
      *a2 = v6;
      *(double *)v33.i64 = PackDualBlock_4x4(v34);
      *a3 = v33;
    }
  }
}

uint64_t ReadBlock()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t *v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(unint64_t *, char *, _QWORD);
  uint64_t v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(_OWORD *);
  uint64_t v24;
  uint64_t __pattern8;

  v0 = MEMORY[0x24BDAC7A8]();
  v3 = v2;
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v10 = v0;
  STACK[0x1498] = *MEMORY[0x24BDAC8D0];
  v11 = *(unsigned int *)(v0 + 48);
  if (*(unsigned int *)(v0 + 60) + v1 > v11)
  {
    v12 = v1;
    v13 = *(_QWORD *)(v0 + 80);
    __pattern8 = v13;
    memset_pattern8(&STACK[0xB20], &__pattern8, 0x60uLL);
    if (*(_DWORD *)(v10 + 64))
    {
      v24 = v3;
      v14 = 0;
      v15 = *(void (**)(unint64_t *, char *, _QWORD))(v10 + 200);
      v16 = v11 + ~v12;
      v17 = (char *)v7 + *(_QWORD *)(v10 + 72) * v16;
      v18 = &STACK[0xB80];
      do
      {
        v15(v18, v17, *(_QWORD *)(v10 + 72) * *(unsigned int *)(v10 + 60));
        v18 = (unint64_t *)((char *)v18 + v13);
        v17 += v5[v14++];
        v19 = *(unsigned int *)(v10 + 64);
      }
      while (v14 < v19);
      v3 = v24;
      if (v16 >= 1)
      {
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = &STACK[0xB80];
          do
          {
            memcpy(v21, v7, *(_QWORD *)(v10 + 72) * v16);
            v21 = (unint64_t *)((char *)v21 + v13);
            v7 = (unint64_t *)((char *)v7 + v5[v20++]);
          }
          while (v20 < *(unsigned int *)(v10 + 64));
        }
      }
    }
    v7 = &STACK[0xB80];
    v5 = &STACK[0xB20];
  }
  v22 = *(uint64_t (**)(_OWORD *))(v10 + 184);
  (*(void (**)(uint64_t *__return_ptr, unint64_t *, unint64_t *, uint64_t))(v10 + 176))(&__pattern8, v7, v5, v3);
  memcpy(v9, &__pattern8, 0xAC0uLL);
  *v9 = *(_OWORD *)v10;
  *((_QWORD *)v9 + 4) = *(_QWORD *)(v10 + 16);
  *((_DWORD *)v9 + 32) = *(_DWORD *)(v10 + 140);
  *((_BYTE *)v9 + 135) = *(_DWORD *)(v10 + 144) != 2;
  return v22(v9);
}

uint64_t ReadBlock(uint64_t a1, _OWORD *a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6)
{
  int64_t v11;
  uint64_t v13;
  unint64_t v14;
  void (*v15)(unint64_t *, char *, _QWORD);
  uint64_t v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  uint64_t (*v22)(_OWORD *);
  uint64_t v24;
  uint64_t __pattern8;

  STACK[0x18B8] = *MEMORY[0x24BDAC8D0];
  v11 = *(unsigned int *)(a1 + 48);
  if (*(unsigned int *)(a1 + 60) + a6 > v11)
  {
    v13 = *(_QWORD *)(a1 + 80);
    __pattern8 = v13;
    memset_pattern8(&STACK[0x1780], &__pattern8, 0x20uLL);
    if (*(_DWORD *)(a1 + 64))
    {
      v24 = a5;
      v14 = 0;
      v15 = *(void (**)(unint64_t *, char *, _QWORD))(a1 + 208);
      v16 = v11 + ~a6;
      v17 = (char *)a3 + *(_QWORD *)(a1 + 72) * v16;
      v18 = &STACK[0x17A0];
      do
      {
        v15(v18, v17, *(_QWORD *)(a1 + 72) * *(unsigned int *)(a1 + 60));
        v18 = (unint64_t *)((char *)v18 + v13);
        v17 += a4[v14++];
        v19 = *(unsigned int *)(a1 + 64);
      }
      while (v14 < v19);
      a5 = v24;
      if (v16 >= 1)
      {
        if ((_DWORD)v19)
        {
          v20 = 0;
          v21 = &STACK[0x17A0];
          do
          {
            memcpy(v21, a3, *(_QWORD *)(a1 + 72) * v16);
            v21 = (unint64_t *)((char *)v21 + v13);
            a3 = (unint64_t *)((char *)a3 + a4[v20++]);
          }
          while (v20 < *(unsigned int *)(a1 + 64));
        }
      }
    }
    a3 = &STACK[0x17A0];
    a4 = &STACK[0x1780];
  }
  v22 = *(uint64_t (**)(_OWORD *))(a1 + 192);
  (*(void (**)(uint64_t *__return_ptr, unint64_t *, unint64_t *, uint64_t))(a1 + 184))(&__pattern8, a3, a4, a5);
  memcpy(a2, &__pattern8, 0xAC0uLL);
  *a2 = *(_OWORD *)a1;
  *((_QWORD *)a2 + 4) = *(_QWORD *)(a1 + 16);
  *((_DWORD *)a2 + 32) = *(_DWORD *)(a1 + 148);
  *((_BYTE *)a2 + 135) = *(_DWORD *)(a1 + 152) != 2;
  return v22(a2);
}

BOOL at_encoder_is_compression_monolithic(at_encoder_t encoder, at_flags_t flags)
{
  return (*((uint64_t (**)(at_encoder_t, at_flags_t))encoder[10].isa + 14))(encoder + 10, flags);
}

at_size_t at_encoder_get_block_counts(at_encoder_t encoder, at_size_t imageSize)
{
  uint64_t v2;
  uint32_t v3;
  at_size_t result;

  v2 = (*((uint64_t (**)(at_encoder_t, _QWORD, _QWORD))encoder[10].isa + 7))(encoder + 10, *(_QWORD *)&imageSize.x, imageSize.z);
  result.x = v2;
  result.y = HIDWORD(v2);
  result.z = v3;
  return result;
}

size_t at_encoder_get_block_size(at_encoder_t encoder)
{
  return (*((uint64_t (**)(at_encoder_t))encoder[10].isa + 9))(encoder + 10);
}

uint64_t EncodeBitTransferSigned(float32x4_t *a1, unsigned int a2, _DWORD *a3, int8x8_t *a4)
{
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v12;
  float32x4_t v13;
  int8x16_t v14;
  float v15;
  double v16;
  int8x16_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float v20;
  float32x4_t v21;
  float32x4_t v22;
  int16x4_t v23;
  int16x4_t v24;
  int16x4_t v25;
  int32x4_t v26;
  signed __int32 v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int32x4_t v33;
  unsigned __int128 v34;
  uint16x8_t v35;
  unsigned int v36;
  int8x16_t v37;
  int16x8_t v38;
  int16x8_t v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int8x16_t v47;
  uint16x8_t v48;
  int8x16_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int32x4_t v53;
  int8x16_t v54;
  float v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v63;
  int16x4_t v64;
  int32x4_t v65;
  signed __int32 v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int32x4_t v72;
  unsigned __int128 v73;
  uint16x8_t v74;
  unsigned int v75;
  int8x16_t v76;
  int16x8_t v77;
  int16x8_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int16x8_t v82;
  int16x8_t v83;
  int16x8_t v84;
  int8x16_t v85;
  uint16x8_t v86;
  int8x16_t v87;
  int16x8_t v88;

  v4 = a1[1];
  v5 = vsubq_f32(v4, *a1);
  v6 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1);
  v7 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2);
  v8 = vaddq_f32(v7, vaddq_f32(v5, v6));
  v6.i32[0] = 0;
  v9 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v6, v8), 0);
  v10 = (float32x4_t)vbslq_s8(v9, *(int8x16_t *)a1, (int8x16_t)v4);
  v11 = (float32x4_t)vbslq_s8(v9, (int8x16_t)v4, *(int8x16_t *)a1);
  if (v8.f32[0] >= 0.0)
    v12 = 1;
  else
    v12 = 0xFFFFFFFFLL;
  v13.i64[0] = 0x3F0000003F000000;
  v13.i64[1] = 0x3F0000003F000000;
  v14 = (int8x16_t)vcgtq_f32(v13, v11);
  v15 = ReciprocalTable[a2];
  v16 = (float)(v15 * 63.75) + -0.5;
  *(float *)&v16 = (float)(int)v16;
  v7.f32[0] = (float)(int)(float)(v15 * 63.75);
  v17 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)&v16, 0);
  v18 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 0);
  v19 = vmulq_f32(vaddq_f32((float32x4_t)vbicq_s8(v18, v14), (float32x4_t)vandq_s8(v17, (int8x16_t)vcgtq_f32(v11, v10))), (float32x4_t)vdupq_n_s32(0x3B808081u));
  v20 = (float)(int)(2 * a2);
  v21 = vrndxq_f32(vmulq_n_f32(v11, v20));
  v22 = vrndxq_f32(vmulq_n_f32(vsubq_f32(v10, v19), v20));
  *(int16x4_t *)v7.f32 = vmovn_s32(vcvtq_s32_f32(v21));
  v23 = vsub_s16(vmovn_s32(vcvtq_s32_f32(v22)), *(int16x4_t *)v7.f32);
  v24 = vdup_n_s16(a2 >> 2);
  v25 = vdup_n_s16(~(a2 >> 2));
  if ((vmaxv_u16((uint16x4_t)vorr_s8((int8x8_t)vcgt_s16(v23, v24), (int8x8_t)vcgt_s16(v25, v23))) & 0x8000) != 0)
    return 0;
  *(int16x4_t *)&v7.u32[2] = v23;
  v26 = vmovl_s16(v23);
  *(int32x2_t *)v26.i8 = vdup_lane_s32(*(int32x2_t *)v26.i8, 1);
  v27 = vaddw_s16(v26, v23).u32[0] + v23.i16[2];
  if (v27 >= 0)
    v28 = v27;
  else
    v28 = -v27;
  if (v28 <= 2)
  {
    v29 = __clz(__rbit32(a2 + 1));
    v30 = ((a2 + 1) >> v29);
    v31 = (int16x8_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_20631CFB0);
    v32 = (int16x8_t)vdupq_n_s32(a2 & 0xFF80FFFF | ((((a2 + 1) >> 2) & 0x7F) << 16));
    v33 = (int32x4_t)vcgtq_u16((uint16x8_t)v31, (uint16x8_t)v32);
    v34 = *(_OWORD *)&vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16((a2 + 1) >> 1), (int8x16_t)vshlq_n_s32(v33, 0x10uLL)), vsubq_s16(v31, (int16x8_t)vandq_s8((int8x16_t)vmulq_s16(v32, (int16x8_t)xmmword_20631CFC0), (int8x16_t)v33))) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
    if (v29 && (_DWORD)v30 != 1)
    {
      v35 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a2), (int16x8_t)v34);
      if ((_DWORD)v30 == 3)
        v36 = 21846;
      else
        v36 = 13108;
      v37 = (int8x16_t)vdupq_n_s16(v36);
      v38 = (int16x8_t)vminq_u16((uint16x8_t)v34, v35);
      v39 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v38.i8, *(uint16x4_t *)v37.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v38, (uint16x8_t)v37), 0x10uLL);
      v37.i64[0] = 0x1000100010001;
      v37.i64[1] = 0x1000100010001;
      v34 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v38, v39, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((a2 + 1) >> v29))), (uint16x8_t)vdupq_n_s16(v29)), vaddq_s16(v39, v39)), vbicq_s8(v37, (int8x16_t)vceqq_s16(v38, (int16x8_t)v34)));
    }
    v40 = v30 - 6;
    _ZF = (_DWORD)v30 == 1;
    v42 = -8;
    if (!_ZF)
      v42 = v40;
    v43 = GetUnquantizationData_UnquantizationInfo[3 * v29 + v42];
    v44 = (int16x8_t)vshlq_u16((uint16x8_t)v34, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v43) & 7)));
    v45 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v43)), (int8x16_t)v34);
    v46 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v45, 1uLL), vdupq_n_s16((v43 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v43 >> 37) & 7)));
    v47 = vandq_s8((int8x16_t)vdupq_n_s16((v43 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v45, 0xFuLL)));
    v48 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v46, v44, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v43 >> 40))), v47);
    v46.i64[0] = 0x80008000800080;
    v46.i64[1] = 0x80008000800080;
    v49 = (int8x16_t)vshrq_n_u16(v48, 2uLL);
    *(int8x8_t *)v47.i8 = vand_s8((int8x8_t)vshr_n_u8((uint8x8_t)vmovn_s16((int16x8_t)vorrq_s8(v49, vandq_s8(v47, (int8x16_t)v46))), 1uLL), (int8x8_t)0x3F3F3F3F3F3F3F3FLL);
    v46.i64[0] = 0x40004000400040;
    v46.i64[1] = 0x40004000400040;
    v50 = vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v47.i8), (int16x8_t)vandq_s8(v49, (int8x16_t)v46));
    v49.i32[0] = v50.u16[1];
    v49.i32[1] = v50.u16[3];
    *(int32x2_t *)v49.i8 = vshl_n_s32(*(int32x2_t *)v49.i8, 0x10uLL);
    v27 = vsra_n_s32(vdup_lane_s32(vshr_n_s32(*(int32x2_t *)v49.i8, 0x10uLL), 1), *(int32x2_t *)v49.i8, 0x10uLL).u32[0]
        + v50.i16[5];
  }
  if (v27 < 0)
  {
    v63.i64[0] = 0x3F0000003F000000;
    v63.i64[1] = 0x3F0000003F000000;
    v19 = vmulq_f32(vaddq_f32((float32x4_t)vandq_s8(v17, (int8x16_t)vcgtq_f32(v10, v11)), (float32x4_t)vbicq_s8(v18, (int8x16_t)vcgtq_f32(v63, v10))), (float32x4_t)vdupq_n_s32(0x3B808081u));
    v21 = vrndxq_f32(vmulq_n_f32(v10, v20));
    v22 = vrndxq_f32(vmulq_n_f32(vsubq_f32(v11, v19), v20));
    *(int16x4_t *)v7.f32 = vmovn_s32(vcvtq_s32_f32(v21));
    v64 = vsub_s16(vmovn_s32(vcvtq_s32_f32(v22)), *(int16x4_t *)v7.f32);
    if ((vmaxv_u16((uint16x4_t)vorr_s8((int8x8_t)vcgt_s16(v64, v24), (int8x8_t)vcgt_s16(v25, v64))) & 0x8000) != 0)
      return 0;
    *(int16x4_t *)&v7.u32[2] = v64;
    v65 = vmovl_s16(v64);
    *(int32x2_t *)v65.i8 = vdup_lane_s32(*(int32x2_t *)v65.i8, 1);
    v66 = vaddw_s16(v65, v64).u32[0] + v64.i16[2];
    if (v66 >= 0)
      v67 = v66;
    else
      v67 = -v66;
    if (v67 <= 2)
    {
      v68 = __clz(__rbit32(a2 + 1));
      v69 = ((a2 + 1) >> v68);
      v70 = (int16x8_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_20631CFB0);
      v71 = (int16x8_t)vdupq_n_s32(a2 & 0xFF80FFFF | ((((a2 + 1) >> 2) & 0x7F) << 16));
      v72 = (int32x4_t)vcgtq_u16((uint16x8_t)v70, (uint16x8_t)v71);
      v73 = *(_OWORD *)&vaddq_s16((int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16((a2 + 1) >> 1), (int8x16_t)vshlq_n_s32(v72, 0x10uLL)), vsubq_s16(v70, (int16x8_t)vandq_s8((int8x16_t)vmulq_s16(v71, (int16x8_t)xmmword_20631CFC0), (int8x16_t)v72))) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
      if (v68 && (_DWORD)v69 != 1)
      {
        v74 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a2), (int16x8_t)v73);
        if ((_DWORD)v69 == 3)
          v75 = 21846;
        else
          v75 = 13108;
        v76 = (int8x16_t)vdupq_n_s16(v75);
        v77 = (int16x8_t)vminq_u16((uint16x8_t)v73, v74);
        v78 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v77.i8, *(uint16x4_t *)v76.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v77, (uint16x8_t)v76), 0x10uLL);
        v76.i64[0] = 0x1000100010001;
        v76.i64[1] = 0x1000100010001;
        v73 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v77, v78, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((a2 + 1) >> v68))), (uint16x8_t)vdupq_n_s16(v68)), vaddq_s16(v78, v78)), vbicq_s8(v76, (int8x16_t)vceqq_s16(v77, (int16x8_t)v73)));
      }
      v79 = v69 - 6;
      _ZF = (_DWORD)v69 == 1;
      v80 = -8;
      if (!_ZF)
        v80 = v79;
      v81 = GetUnquantizationData_UnquantizationInfo[3 * v68 + v80];
      v82 = (int16x8_t)vshlq_u16((uint16x8_t)v73, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v81) & 7)));
      v83 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v81)), (int8x16_t)v73);
      v84 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v83, 1uLL), vdupq_n_s16((v81 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v81 >> 37) & 7)));
      v85 = vandq_s8((int8x16_t)vdupq_n_s16((v81 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v83, 0xFuLL)));
      v86 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v84, v82, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v81 >> 40))), v85);
      v84.i64[0] = 0x80008000800080;
      v84.i64[1] = 0x80008000800080;
      v87 = (int8x16_t)vshrq_n_u16(v86, 2uLL);
      *(int8x8_t *)v85.i8 = vand_s8((int8x8_t)vshr_n_u8((uint8x8_t)vmovn_s16((int16x8_t)vorrq_s8(v87, vandq_s8(v85, (int8x16_t)v84))), 1uLL), (int8x8_t)0x3F3F3F3F3F3F3F3FLL);
      v84.i64[0] = 0x40004000400040;
      v84.i64[1] = 0x40004000400040;
      v88 = vsubq_s16((int16x8_t)vmovl_u8(*(uint8x8_t *)v85.i8), (int16x8_t)vandq_s8(v87, (int8x16_t)v84));
      v87.i32[0] = v88.u16[1];
      v87.i32[1] = v88.u16[3];
      *(int32x2_t *)v87.i8 = vshl_n_s32(*(int32x2_t *)v87.i8, 0x10uLL);
      v66 = vsra_n_s32(vdup_lane_s32(vshr_n_s32(*(int32x2_t *)v87.i8, 0x10uLL), 1), *(int32x2_t *)v87.i8, 0x10uLL).u32[0]
          + v88.i16[5];
    }
    if (v66 < 0)
      return 0;
  }
  v51 = (int16x8_t)vqtbl1q_s8((int8x16_t)v7, (int8x16_t)xmmword_20631CFB0);
  v52 = (int16x8_t)vdupq_n_s32(a2 & 0xFF80FFFF | ((((a2 + 1) >> 2) & 0x7F) << 16));
  v53 = (int32x4_t)vcgtq_u16((uint16x8_t)v51, (uint16x8_t)v52);
  v54 = (int8x16_t)vaddq_s16(vsubq_s16(v51, (int16x8_t)vandq_s8((int8x16_t)vmulq_s16(v52, (int16x8_t)xmmword_20631CFC0), (int8x16_t)v53)), (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16((a2 + 1) >> 1), (int8x16_t)vshlq_n_s32(v53, 0x10uLL)));
  *a4 = vqtbl1_s8(vuzp1q_s8(v54, v54), (int8x8_t)0x705030106040200);
  v55 = v15 * 0.5;
  v56 = vmlaq_n_f32(v19, v22, v55);
  v57 = vmaxnmq_f32(vmulq_n_f32(v21, v55), (float32x4_t)0);
  v58 = vmaxnmq_f32(v56, (float32x4_t)0);
  __asm { FMOV            V1.4S, #1.0 }
  *a1 = vminnmq_f32(v57, _Q1);
  a1[1] = vminnmq_f32(v58, _Q1);
  ++*a3;
  return v12;
}

uint64_t EncodeRow(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 *v19;
  unint64_t v20;
  float v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  int16x4_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  int16x4_t *v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int16x4_t *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *__pattern8;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unsigned __int8 *v78;
  unsigned __int8 *v79;
  uint64_t (*v80)(unsigned __int8 *, _DWORD *, int16x4_t *);
  float32x4_t v81;
  int32x4_t v82;
  _DWORD v83[2];
  _QWORD v84[14];

  v3 = result;
  v84[12] = *MEMORY[0x24BDAC8D0];
  v4 = (_QWORD *)(result + 88);
  v5 = *(unsigned int *)(result + 168);
  v6 = *(_DWORD *)(result + 172);
  v7 = v5 * a2;
  v8 = *(_QWORD *)(result + 88) * *(unsigned int *)(result + 64);
  v9 = *(_QWORD *)(result + 24) + v8 * v5 * a2;
  v10 = v9 - v8;
  if (!(v5 * a2))
    v10 = *(_QWORD *)(result + 24);
  v11 = 1;
  if (v6)
    v12 = v10;
  else
    v12 = v9;
  if (v6)
    v13 = 15;
  else
    v13 = 47;
  v66 = v13;
  if (v6)
    v14 = 13;
  else
    v14 = 47;
  if (v6)
    v15 = a3 + 41280;
  else
    v15 = a3;
  if (v6)
    v16 = a3 + 82560;
  else
    v16 = a3;
  v79 = v16;
  if (!v6)
    v11 = 0;
  v17 = v7 + v5;
  v18 = *(unsigned int *)(result + 120);
  if (v17 >= *(unsigned int *)(result + 124))
    v17 = *(unsigned int *)(result + 124);
  v73 = v17;
  if ((_DWORD)v18)
  {
    v19 = a3;
    v20 = 0;
    v69 = (int16x4_t *)(*(_QWORD *)(result + 32) + v7 * *(_QWORD *)(result + 104));
    v80 = *(uint64_t (**)(unsigned __int8 *, _DWORD *, int16x4_t *))(result + 192);
    v63 = v7 - v11;
    v64 = 16 * v14;
    v70 = 2752 * v11 + 134;
    v82 = vdupq_n_s32(0x477FFF00u);
    __asm { FMOV            V0.4S, #1.0 }
    v81 = _Q0;
    v26 = 0.0;
    v71 = v11;
    __pattern8 = (_QWORD *)(result + 88);
    v67 = v14;
    v65 = v7;
    while (1)
    {
      v27 = v18 - (v20 - v11);
      if (v66 < v27)
        v27 = v66;
      v75 = v20 - v11 + v27 - 1;
      v76 = v20 - v11;
      v77 = v20;
      v68 = v12;
      if (!*(_DWORD *)(v3 + 172))
        goto LABEL_42;
      v28 = *(unsigned int *)(v3 + 64);
      v29 = v63 * v28;
      bzero(v84, 8 * v28);
      if (((v63 * v28) & 0x8000000000000000) != 0)
      {
        v30 = -v29;
        v34 = v12;
        if (-v29 >= v28)
          goto LABEL_34;
        v31 = -1;
      }
      else
      {
        v30 = 0;
        v31 = ~v29;
      }
      v32 = v31 + *(unsigned int *)(v3 + 52);
      if ((uint64_t)(v28 - v30) >= v32)
        v33 = v32;
      else
        v33 = v28 - v30;
      if (v33 < 1)
      {
        v34 = v12;
      }
      else
      {
        memset_pattern8(&v84[v30], v4, 8 * v33);
        v34 = v12 + *v4 * v33;
      }
LABEL_34:
      FillBlockStorageRow(v3, (uint64_t)v19, v19, v76, v75, v12, (uint64_t)v84);
      v35 = *(unsigned int *)(v3 + 64);
      v36 = v7 * v35;
      bzero(v84, 8 * v35);
      if (((v7 * v35) & 0x8000000000000000) == 0)
      {
        v37 = 0;
        v38 = ~v36;
        goto LABEL_36;
      }
      v37 = -(uint64_t)v36;
      v12 = v34;
      if (-(uint64_t)v36 < v35)
      {
        v38 = -1;
LABEL_36:
        v39 = v38 + *(unsigned int *)(v3 + 52);
        if ((uint64_t)(v35 - v37) >= v39)
          v40 = v39;
        else
          v40 = v35 - v37;
        v12 = v34;
        if (v40 >= 1)
        {
          memset_pattern8(&v84[v37], v4, 8 * v40);
          v12 = v34 + *v4 * v40;
        }
      }
      result = FillBlockStorageRow(v3, (uint64_t)v19, v15, v76, v75, v34, (uint64_t)v84);
      v14 = v67;
      v11 = v71;
      v20 = v77;
LABEL_42:
      v74 = v20 + v14;
      v41 = v7;
      v42 = v69;
      if (v7 < v73)
      {
        while (1)
        {
          v78 = v19;
          v43 = *(unsigned int *)(v3 + 64);
          v44 = (v41 + v11) * v43;
          bzero(v84, 8 * v43);
          if ((v44 & 0x8000000000000000) == 0)
            break;
          v45 = -v44;
          v49 = v12;
          if (-v44 < v43)
          {
            v46 = -1;
LABEL_45:
            v47 = v46 + *(unsigned int *)(v3 + 52);
            if ((uint64_t)(v43 - v45) >= v47)
              v48 = v47;
            else
              v48 = v43 - v45;
            v49 = v12;
            if (v48 >= 1)
            {
              memset_pattern8(&v84[v45], __pattern8, 8 * v48);
              v49 = v12 + *__pattern8 * v48;
            }
          }
          result = FillBlockStorageRow(v3, (uint64_t)v15, v79, v76, v75, v12, (uint64_t)v84);
          if (v74 >= *(unsigned int *)(v3 + 120))
            v50 = *(unsigned int *)(v3 + 120);
          else
            v50 = v74;
          v51 = v77;
          if (v77 < v50)
          {
            v52 = &v15[v70];
            v53 = v42;
            v55 = v81;
            v54 = (float32x4_t)v82;
            v56 = 0uLL;
            do
            {
              *v53 = (int16x4_t)-516;
              v57.i64[0] = 0x3F0000003F000000;
              v57.i64[1] = 0x3F0000003F000000;
              v53[1] = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v57, v54, vmaxnmq_f32(vminnmq_f32(*(float32x4_t *)(v52 - 118), v55), v56))));
              v58 = fmaxf(*(float *)(v52 - 14), 0.0);
              v57.i32[0] = *(_DWORD *)(v3 + 136);
              *(float *)v83 = v58;
              v83[1] = v57.i32[0];
              v59 = (*((_WORD *)v52 - 1) >> 4)
                  * (*((_WORD *)v52 - 1) & 0xF)
                  * (HIBYTE(*((unsigned __int16 *)v52 - 1)) & 0xF);
              if (v58 > (float)((float)v59 * 0.000015379) && v59 != (char)*v52)
              {
                result = v80(v52 - 134, v83, v53);
                v56 = 0uLL;
                v55 = v81;
                v54 = (float32x4_t)v82;
                v58 = *(float *)v83;
              }
              v52 += 2752;
              v26 = v26 + v58;
              v53 += 2;
              ++v51;
            }
            while (v51 < v50);
          }
          v42 = (int16x4_t *)((char *)v42 + *(_QWORD *)(v3 + 104));
          ++v41;
          v19 = v15;
          v15 = v79;
          v79 = v78;
          v12 = v49;
          v11 = v71;
          if (v41 == v73)
            goto LABEL_63;
        }
        v45 = 0;
        v46 = ~v44;
        goto LABEL_45;
      }
LABEL_63:
      if (v77)
        v60 = 0;
      else
        v60 = v11;
      v14 = v67;
      v12 = v68 + *(_QWORD *)(v3 + 80) * (v67 - v60);
      v7 = v65;
      v69 = (int16x4_t *)((char *)v69 + v64);
      v18 = *(unsigned int *)(v3 + 120);
      v20 = v74;
      v4 = __pattern8;
      if (v74 >= v18)
        goto LABEL_74;
    }
  }
  v26 = 0.0;
LABEL_74:
  v61 = *(_QWORD *)(v3 + 40);
  if (v61)
    *(float *)(v61 + 4 * a2) = v26 + *(float *)(v61 + 4 * a2);
  return result;
}

void EncodeRow(_QWORD *a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  void (*v10)(unsigned __int8 *, float *, unint64_t);
  unint64_t *v11;
  unint64_t v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  void (*v24)(unint64_t *, unint64_t *);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unsigned __int8 *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v44;
  unint64_t *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *__pattern8;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62[4];
  unint64_t v63[4];
  float v64[64];
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v4 = *((unsigned int *)a1 + 44);
  v5 = v4 * a2;
  v6 = v4 * a2 + v4;
  v7 = *((unsigned int *)a1 + 32);
  if (v6 >= *((unsigned int *)a1 + 33))
    v6 = *((unsigned int *)a1 + 33);
  v56 = v6;
  if ((_DWORD)v7)
  {
    v8 = a3;
    v9 = 0;
    __pattern8 = a1 + 11;
    v10 = (void (*)(unsigned __int8 *, float *, unint64_t))a1[25];
    v11 = (unint64_t *)(a1[3] + v5 * *((unsigned int *)a1 + 16) * a1[11]);
    v12 = a1[4] + v5 * a1[13];
    v46 = a3 + 2752;
    v13 = 0.0;
    v49 = 47;
    v44 = v5;
    while (1)
    {
      v14 = v7 - v9;
      v54 = v7 - v9;
      if ((uint64_t)(v7 - v9) >= 47)
        v14 = 47;
      if (v5 < v56)
        break;
      v41 = v9 + 47;
LABEL_48:
      v11 = (unint64_t *)((char *)v11 + 47 * a1[10]);
      v12 += 47 * a1[15];
      v49 += 47;
      v9 = v41;
      if (v41 >= v7)
        goto LABEL_51;
    }
    v50 = v14 + v9;
    v60 = v12;
    v61 = v14 + v9 - 1;
    v55 = v9 + 47;
    v47 = v9 + 1;
    v48 = v9 + v14;
    v51 = -(uint64_t)v9;
    v15 = v5;
    v45 = v11;
    v16 = v49;
    v57 = v9;
    while (1)
    {
      v17 = *((unsigned int *)a1 + 16);
      v59 = v15;
      v18 = v15 * v17;
      bzero(v62, 8 * v17);
      if (v18 < 0)
      {
        v23 = v11;
        if (-v18 >= v17)
          goto LABEL_16;
        v19 = 0x8000000000000000;
        v20 = -1;
      }
      else
      {
        v19 = 0;
        v20 = ~v18;
      }
      v21 = v20 + *((unsigned int *)a1 + 13);
      if ((uint64_t)(v17 - v19) >= v21)
        v22 = v21;
      else
        v22 = v17 - v19;
      v23 = v11;
      if (v22 >= 1)
      {
        memset_pattern8(&v62[v19], __pattern8, 8 * v22);
        v23 = (unint64_t *)((char *)v11 + *__pattern8 * v22);
      }
LABEL_16:
      v58 = v23;
      if (v54 >= 1)
      {
        v24 = (void (*)(unint64_t *, unint64_t *))a1[26];
        v25 = v57;
        v26 = *((unsigned int *)a1 + 32) - v57;
        if (v26 < 1)
        {
          v28 = v8;
          goto LABEL_26;
        }
        ReadBlock((uint64_t)a1, v8, v11, v62, a1[12], v57 * *((unsigned int *)a1 + 15));
        if (v57 < v61)
        {
          v11 = (unint64_t *)((char *)v11 + a1[10]);
          v27 = v26 - 1;
          if (v26 == 1)
          {
            v28 = v46;
            v25 = v47;
          }
          else
          {
            v28 = v46;
            v25 = v47;
            do
            {
              v29 = v25;
              ReadBlock((uint64_t)a1, v28, v11, v62, a1[12], v25 * *((unsigned int *)a1 + 15));
              v28 += 2752;
              v11 = (unint64_t *)((char *)v11 + a1[10]);
              ++v25;
              if (v29 >= v61)
                break;
            }
            while (v27-- > 1);
          }
LABEL_26:
          v8 = a3;
          if (v25 < v50)
          {
            if (*((_DWORD *)a1 + 16))
            {
              v31 = 0;
              v32 = a1[10];
              v33 = (unint64_t *)v64;
              do
              {
                v63[v31] = v32;
                v24(v33, v11);
                v32 = a1[10];
                v33 = (unint64_t *)((char *)v33 + v32);
                v11 = (unint64_t *)((char *)v11 + v62[v31++]);
              }
              while (v31 < *((unsigned int *)a1 + 16));
            }
            else
            {
              v33 = (unint64_t *)v64;
            }
            v16 = v49;
            v34 = v48 - v25;
            v8 = a3;
            do
            {
              ReadBlock((uint64_t)a1, v28, v33, v63, a1[12], 0);
              v28 += 2752;
              --v34;
            }
            while (v34);
          }
        }
      }
      v35 = *((unsigned int *)a1 + 32);
      v36 = v55;
      if (v55 >= v35)
        v36 = *((unsigned int *)a1 + 32);
      if (v57 >= v36)
      {
        v39 = v60;
      }
      else
      {
        if (v16 < v35)
          v35 = v16;
        v37 = v51 + v35;
        v38 = v8;
        v39 = v60;
        v40 = v60;
        do
        {
          v64[0] = INFINITY;
          v64[1] = *((float *)a1 + 36);
          v10(v38, v64, v40);
          v13 = v13 + v64[0];
          v40 += a1[15];
          v38 += 2752;
          --v37;
        }
        while (v37);
      }
      v60 = a1[13] + v39;
      v11 = v58;
      v15 = v59 + 1;
      if (v59 + 1 == v56)
      {
        v7 = *((unsigned int *)a1 + 32);
        v5 = v44;
        v11 = v45;
        v41 = v55;
        goto LABEL_48;
      }
    }
  }
  v13 = 0.0;
LABEL_51:
  v42 = a1[5];
  if (v42)
    *(float *)(v42 + 4 * a2) = v13 + *(float *)(v42 + 4 * a2);
}

at_error_t at_encoder_decompress_texels(at_encoder_t encoder, const at_block_buffer_t *src, const at_texel_region_t *dest, at_flags_t flags)
{
  const at_texel_region_t *v5;
  uint32_t z;
  uint64_t v9;
  size_t rowBytes;
  size_t sliceBytes;
  at_encoder_t v12;
  unint64_t v13;
  unsigned int v14;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  BOOL v19;
  FILE *v21;
  const char *v22;
  size_t v23;
  int64_t v24;
  size_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  size_t v30;
  size_t v31;
  int64_t v32;
  int64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t TexelInfo;
  _QWORD v38[2];
  uint32_t v39;
  uint64_t v40;
  size_t v41;

  v5 = dest;
  if ((flags & 0x10) != 0)
  {
    z = dest->validSize.z;
    v9 = *(_QWORD *)&dest->validSize.x;
    rowBytes = dest->rowBytes;
    sliceBytes = dest->sliceBytes;
    v38[0] = (char *)dest->texels + rowBytes * (dest->validSize.y - 1);
    v38[1] = v9;
    v39 = z;
    v40 = -(uint64_t)rowBytes;
    v41 = sliceBytes;
    v5 = (const at_texel_region_t *)v38;
  }
  v12 = encoder + 10;
  v13 = (*((uint64_t (**)(at_encoder_t, _QWORD, _QWORD))encoder[10].isa + 7))(encoder + 10, *(_QWORD *)&v5->validSize.x, v5->validSize.z);
  if ((flags & 1) != 0)
    return (*((uint64_t (**)(at_encoder_t, const at_block_buffer_t *, const at_texel_region_t *, at_flags_t))v12->isa
            + 17))(encoder + 10, src, v5, flags);
  if ((flags & 0xFFFFFFFFFFFFFFC0) == 0)
  {
    v16 = v13;
    v17 = v14;
    v18 = HIDWORD(v13);
    if ((_DWORD)v13)
      v19 = HIDWORD(v13) == 0;
    else
      v19 = 1;
    if (v19 || v14 == 0)
    {
      if ((flags & 2) != 0)
      {
        v21 = (FILE *)*MEMORY[0x24BDAC8D8];
        v22 = "at_encoder_decompress_texels error:  A member of dest->validSize is zero.\n";
        v23 = 74;
LABEL_18:
        fwrite(v22, v23, 1uLL, v21);
      }
    }
    else
    {
      if ((HIDWORD(v13) | v13) >> 24)
      {
        if ((flags & 2) != 0)
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_decompress_texels error: Exceeded capabilites of ASTC specification. Too many blocks->\n\tno more than 2**24-1 blocks may be present in any dimension {%u, %u, %u}\n");
        return -1;
      }
      if (HIDWORD(v13) >= 2)
      {
        v24 = src->rowBytes;
        if (v24 >= 0)
          v25 = src->rowBytes;
        else
          v25 = -v24;
        if (v25 < (*((uint64_t (**)(at_encoder_t))v12->isa + 9))(encoder + 10)
                 * (unint64_t)v13)
        {
          if ((flags & 2) != 0)
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_decompress_texels error: consecutive block rows alias.\n\t src->rowBytes %lu is too small for %u blocks->\n");
          return -1;
        }
        v26 = v5->rowBytes;
        if (v26)
        {
          v27 = v26 >= 0 ? v5->rowBytes : -v26;
          if (v27 < (((unint64_t)encoder[6].isa >> 34) & 0x1F)
                   * v5->validSize.x
                   * ((encoder[6].isa >> 26) & 0xF))
          {
            if ((flags & 2) != 0)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_decompress_texels error: consecutive texel rows alias.\n\t dest->rowBytes %lu is too small for %u blocks->\n");
            return -1;
          }
        }
      }
      if (v17 >= 2)
      {
        v28 = v5->rowBytes;
        v29 = v5->sliceBytes;
        if (v29 >= 0)
          v30 = v5->sliceBytes;
        else
          v30 = -v29;
        if (v28 >= 0)
          v31 = v5->rowBytes;
        else
          v31 = -v28;
        if (v30 < v31 * v18)
        {
          if ((flags & 2) != 0)
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_decompress_texels error: consecutive block slices alias.\n\t src->sliceBytes %lu is too small for %u rows * dest->rowBytes.\n");
          return -1;
        }
        v32 = src->sliceBytes;
        if (v32)
        {
          if (v32 < 0)
            v32 = -v32;
          v33 = src->rowBytes;
          if (v33 < 0)
            v33 = -v33;
          if (v32 < v33 * (unint64_t)v16)
          {
            if ((flags & 2) != 0)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_decompress_texels error: consecutive texel slices alias.\n\t dest->sliceBytes %lu is too small for %u block rows.\n");
            return -1;
          }
        }
      }
      v34 = (*((uint64_t (**)(at_encoder_t))v12->isa + 12))(encoder + 10);
      if ((GetBlockInfo(v34) & 0x1000000) == 0)
        goto LABEL_56;
      v35 = (*((uint64_t (**)(at_encoder_t))v12->isa + 10))(encoder + 10);
      if ((GetTexelInfo(v35) & 0x1000000) == 0)
      {
        if ((flags & 2) == 0)
          return -1;
        v21 = (FILE *)*MEMORY[0x24BDAC8D8];
        v22 = "at_encoder_decompress_texels error: fp16 or snorm block format without floating-point texel format.\n";
        v23 = 100;
        goto LABEL_18;
      }
      v36 = (*((uint64_t (**)(at_encoder_t))v12->isa + 10))(encoder + 10);
      TexelInfo = GetTexelInfo(v36);
      if ((flags & 0x20) == 0 || (TexelInfo & 0x400000) == 0)
      {
LABEL_56:
        ATEncoderDecompressTexels_TexelBufferIsNotWritable(v5, ((unint64_t)encoder[6].isa >> 31) & 0xF8);
        if ((unint64_t)(*((uint64_t (**)(at_encoder_t))encoder[10].isa + 12))(encoder + 10) >= 0x21
          && (unint64_t)(*((uint64_t (**)(at_encoder_t))v12->isa + 12))(encoder + 10) <= 0x2A)
        {
          (*((void (**)(at_encoder_t))v12->isa + 9))(encoder + 10);
        }
        return (*((uint64_t (**)(at_encoder_t, const at_block_buffer_t *, const at_texel_region_t *, at_flags_t))v12->isa
                + 17))(encoder + 10, src, v5, flags);
      }
      if ((flags & 2) != 0)
      {
        v21 = (FILE *)*MEMORY[0x24BDAC8D8];
        v22 = "at_encoder_decompress_texels error: cannot use at_flags_srgb_linear_texels with fp16 or signed block format.\n";
        v23 = 109;
        goto LABEL_18;
      }
    }
    return -1;
  }
  if ((flags & 2) != 0)
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_decompress_texels error: unknown or unsupported flags bit: 0x%8.8llx\n", flags & 0xFFFFFFFFFFFFFFC0);
  return -4;
}

void FindColorVectors(float32x4_t *a1@<X0>, float32x4_t *a2@<X1>, int a3@<W2>, int a4@<W3>, unint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  float v14;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  unint64_t v23;
  float32x2_t v24;
  int8x8_t v25;
  unint64_t v26;
  unint64_t v27;
  float32x2_t v28;
  float32x2_t v29;
  unsigned int v30;
  unint64_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x2_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  int16x8_t v44;
  int8x8_t v45;
  unint64_t v46;
  float32x2_t v47;
  char v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  uint64_t v56;
  unint64_t v57;
  char v58;
  float32x4_t v59;
  float32x4_t v60;
  unsigned int v61;
  unint64_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x2_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  float32x2_t v81;
  float32x2_t v82;
  unsigned int v83;
  unint64_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x2_t v91;
  int32x2_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int8x8_t v98;
  int16x8_t v99;
  float32x4_t v100;
  unsigned __int32 v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unsigned __int128 v106;
  uint16x8_t v107;
  unsigned int v108;
  int8x16_t v109;
  int16x8_t v110;
  int16x8_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  int16x8_t v115;
  int16x8_t v116;
  int16x8_t v117;
  int8x16_t v118;
  uint16x8_t v119;
  uint16x8_t v120;
  int8x16_t v121;
  int8x16_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float v128;
  unsigned int v129;
  unint64_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x2_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  int8x8_t v143;
  float32x4_t v144;
  float v145;
  unint64_t v146;
  float32x2_t v147;
  float32x2_t v148;
  float32x4_t v149;
  int8x16_t v150;
  unint64_t v151;
  float32x2_t v152;
  float32x2_t v153;
  float32x4_t v154;
  int16x8_t v155;
  float32x4_t v156;
  float v157;
  unsigned int v158;
  unsigned int v159;
  uint64_t v160;
  int v161;
  unsigned __int128 v162;
  int16x8_t v163;
  unsigned int v164;
  int8x16_t v165;
  int16x8_t v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  int16x8_t v170;
  int16x8_t v171;
  int16x8_t v172;
  int8x16_t v173;
  uint16x8_t v174;
  uint16x8_t v175;
  int8x16_t v176;
  float32x4_t v177;
  float32x4_t v178;
  int8x8_t v179;
  float32x4_t v180;
  float v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int v191;
  float v192;
  float32x4_t v193;
  int8x8_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  int v204;
  float v205;
  int8x16_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  int8x16_t v210;
  float32x4_t v211;
  int32x4_t v212;
  float32x2_t v213;
  int32x2_t v214;
  float32x4_t v215;
  int8x16_t v216;
  int8x16_t v217;
  int v218;
  float v219;
  int32x4_t v220;
  int32x4_t v221;
  int32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x2_t v226;
  float v227;
  float v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x2_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float v238;
  float v239;
  float v240;
  float v241;
  float v242;
  float v243;
  float v244;
  int8x16_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x16_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260[2];
  int8x8_t v261;
  float v262;
  unsigned int v263;
  char v264;
  float32x4_t v265;
  float32x4_t v266;

  v11 = *a5;
  v12 = HIDWORD(*a5);
  v13 = BYTE4(*a5);
  v14 = ReciprocalTable[v13];
  if ((v12 & 0xFE) == 0)
    LODWORD(v13) = 1;
  __asm { FMOV            V3.4S, #1.0 }
  v20 = vminnmq_f32(vmaxnmq_f32(*a1, (float32x4_t)0), _Q3);
  v21 = vminnmq_f32(vmaxnmq_f32(a1[1], (float32x4_t)0), _Q3);
  v265 = v20;
  v266 = v21;
  if (a2)
    _Q3 = *a2;
  v22 = (float)v13;
  if (((v11 >> 13) & 0xF) > 4)
  {
    v25 = 0;
    v261 = 0;
    HIDWORD(v26) = v11;
    LODWORD(v26) = v11;
    switch((v26 >> 14) & 0x80000007)
    {
      case 0uLL:
      case 2uLL:
        if ((v11 & 0x1F000000000000) == 0)
          goto LABEL_46;
        if (a3 == 2)
        {
          v233 = _Q3;
          v239 = (float)v13;
          v247 = v20;
          v254 = v21;
          v27 = WeightInfoForSingleLineDualWeight(0, BYTE5(v11), a4);
        }
        else
        {
          if (a3 != 1)
          {
LABEL_46:
            v70 = vrndxq_f32(vmulq_n_f32(v20, v22));
            v71 = vrndxq_f32(vmulq_n_f32(v21, v22));
            v25 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v70), (int16x8_t)vcvtq_s32_f32(v71)));
            goto LABEL_80;
          }
          v233 = _Q3;
          v239 = (float)v13;
          v247 = v20;
          v254 = v21;
          v27 = WeightInfoForSingleLineSingleWeight(0, BYTE5(v11), a4);
        }
        v61 = BYTE4(v27);
        v11 = *a5;
        v62 = BYTE4(*a5);
        v20 = v247;
        v21 = v254;
        if (BYTE4(v27) == (_DWORD)v62)
        {
          v22 = v239;
        }
        else
        {
          v28.f32[0] = ReciprocalTable[v62];
          v29.f32[0] = ReciprocalTable[BYTE4(v27)];
          v63 = vmlsq_lane_f32(v254, vrndxq_f32(vmulq_n_f32(v254, (float)v62)), v28, 0);
          v64 = vmlsq_lane_f32(v247, vrndxq_f32(vmulq_n_f32(v247, (float)v62)), v28, 0);
          v65 = vmlsq_lane_f32(v254, vrndxq_f32(vmulq_n_f32(v254, (float)BYTE4(v27))), v29, 0);
          v66 = vmlsq_lane_f32(v247, vrndxq_f32(vmulq_n_f32(v247, (float)BYTE4(v27))), v29, 0);
          v67 = vmlaq_f32(vmulq_f32(v233, vmulq_f32(v63, v63)), vmulq_f32(v64, v64), v233);
          v64.i64[0] = vpaddq_f32(v67, v67).u64[0];
          v68 = vmlaq_f32(vmulq_f32(v233, vmulq_f32(v65, v65)), vmulq_f32(v66, v66), v233);
          v68.i64[0] = vpaddq_f32(v68, v68).u64[0];
          v69 = vpadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32);
          v22 = v239;
          if ((vcgt_f32(v69, vpadd_f32(*(float32x2_t *)v64.f32, *(float32x2_t *)v64.f32)).u8[0] & 1) == 0
            || v69.f32[0] <= 0.000015259)
          {
            v12 = HIDWORD(v27);
            *a5 = v27;
            if ((v27 & 0xFE00000000) == 0)
              v61 = 1;
            v22 = (float)v61;
            v11 = v27;
          }
        }
        goto LABEL_46;
      case 3uLL:
        if ((v11 & 0x1F000000000000) == 0)
          goto LABEL_89;
        if (a3 == 2)
        {
          v228 = v14;
          v234 = _Q3;
          v240 = (float)v13;
          v248 = v20;
          v255 = v21;
          v46 = WeightInfoForSingleLineDualWeight(0, BYTE5(v11), a4);
        }
        else
        {
          if (a3 != 1)
            goto LABEL_89;
          v228 = v14;
          v234 = _Q3;
          v240 = (float)v13;
          v248 = v20;
          v255 = v21;
          v46 = WeightInfoForSingleLineSingleWeight(0, BYTE5(v11), a4);
        }
        v129 = BYTE4(v46);
        v11 = *a5;
        v130 = BYTE4(*a5);
        v20 = v248;
        v21 = v255;
        if (BYTE4(v46) == (_DWORD)v130)
        {
          v22 = v240;
          v14 = v228;
        }
        else
        {
          v47.f32[0] = ReciprocalTable[v130];
          v132 = vmulq_n_f32(v248, (float)BYTE4(v46));
          v131 = vrndxq_f32(v132);
          v132.f32[0] = ReciprocalTable[BYTE4(v46)];
          v133 = vmlsq_lane_f32(v255, vrndxq_f32(vmulq_n_f32(v255, (float)v130)), v47, 0);
          v134 = vmlsq_lane_f32(v248, vrndxq_f32(vmulq_n_f32(v248, (float)v130)), v47, 0);
          v135 = vmlsq_lane_f32(v255, vrndxq_f32(vmulq_n_f32(v255, (float)BYTE4(v46))), *(float32x2_t *)v132.f32, 0);
          v136 = vmlsq_lane_f32(v248, v131, *(float32x2_t *)v132.f32, 0);
          v137 = vmlaq_f32(vmulq_f32(v234, vmulq_f32(v133, v133)), vmulq_f32(v134, v134), v234);
          v134.i64[0] = vpaddq_f32(v137, v137).u64[0];
          *(float32x2_t *)v137.f32 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
          v138 = vmlaq_f32(vmulq_f32(v234, vmulq_f32(v135, v135)), vmulq_f32(v136, v136), v234);
          v134.i64[0] = vpaddq_f32(v138, v138).u64[0];
          v139 = vpadd_f32(*(float32x2_t *)v134.f32, *(float32x2_t *)v134.f32);
          v138.i8[0] = vcgt_f32(v139, *(float32x2_t *)v137.f32).u8[0];
          v22 = v240;
          v14 = v228;
          if ((v138.i8[0] & 1) == 0 || v139.f32[0] <= 0.000015259)
          {
            *a5 = v46;
            if ((v46 & 0xFE00000000) == 0)
              v129 = 1;
            v22 = (float)v129;
            v11 = v46;
            v14 = v132.f32[0];
          }
        }
LABEL_89:
        v140 = vrndxq_f32(vmulq_n_f32(v21, v22));
        v141 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v140, 2), vaddq_f32(v140, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v140.f32, 1)));
        if (v141.f32[0] != 0.0)
        {
          v142 = vrndxq_f32(vmulq_n_f32(v20, v22));
          v141.i32[0] = vdivq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2), vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))), v141).u32[0];
        }
        v143 = (int8x8_t)vmovn_s32(vcvtq_s32_f32(v140));
        v25 = vand_s8(vuzp1_s8(v143, v143), (int8x8_t)0xFFFFFFLL);
        v25.i8[3] = (int)rintf(v22 * fminf(fmaxf(v141.f32[0], 0.0), 0.99609));
        v21 = vmulq_n_f32(v21, v14);
        v20 = vmulq_n_f32(v20, v14);
        goto LABEL_136;
      case 4uLL:
        v48 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v20, v21), (int8x16_t)xmmword_20631C0F0));
        if (!v48)
          goto LABEL_31;
        if (v48 == 7)
        {
          v49 = v20;
          v265 = v21;
          v266 = v20;
          v20 = v21;
          v21 = v49;
LABEL_31:
          v50 = vmulq_f32(v20, v21);
          v50.i64[0] = vpaddq_f32(v50, v50).u64[0];
          v51 = vmulq_f32(v21, v21);
          v51.i64[0] = vpaddq_f32(v51, v51).u64[0];
          v52 = fminf(vrecpes_f32(vpadd_f32(*(float32x2_t *)v51.f32, *(float32x2_t *)v51.f32).f32[0]), 1.8447e19)
              * vpadd_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v50.f32).f32[0];
          v53 = vmulq_n_f32(v21, v52);
          v54 = vsubq_f32(v53, v20);
          v55 = vmulq_f32(v54, v54);
          v55.i64[0] = vpaddq_f32(v55, v55).u64[0];
          if (vpadd_f32(*(float32x2_t *)v55.f32, *(float32x2_t *)v55.f32).f32[0] < (float)(v14 * (float)(v14 * 0.25)))
          {
            v235 = _Q3;
            v241 = v52;
            v229 = v53;
            v249 = v20;
            v256 = v21;
            v56 = HIWORD(v11) & 0x1F;
            if (a3 == 2)
              v57 = WeightInfoForSingleLineDualWeight(v56, 4, a4);
            else
              v57 = WeightInfoForSingleLineSingleWeight(v56, 4, a4);
            *a5 = v57;
            v144 = v256;
            v145 = v241;
            if ((v57 & 0x1F000000000000) != 0)
            {
              if (a3 == 2)
              {
                v146 = WeightInfoForSingleLineDualWeight(0, BYTE5(v57), a4);
                goto LABEL_117;
              }
              if (a3 == 1)
              {
                v146 = WeightInfoForSingleLineSingleWeight(0, BYTE5(v57), a4);
LABEL_117:
                v182 = v146;
                v183 = BYTE4(v146);
                v57 = *a5;
                v184 = BYTE4(*a5);
                v144 = v256;
                v145 = v241;
                if ((_DWORD)v183 != (_DWORD)v184)
                {
                  v147.f32[0] = ReciprocalTable[v184];
                  v148.f32[0] = ReciprocalTable[v183];
                  v185 = vmlsq_lane_f32(v256, vrndxq_f32(vmulq_n_f32(v256, (float)v184)), v147, 0);
                  v186 = vmlsq_lane_f32(v249, vrndxq_f32(vmulq_n_f32(v249, (float)v184)), v147, 0);
                  v187 = vmlsq_lane_f32(v256, vrndxq_f32(vmulq_n_f32(v256, (float)v183)), v148, 0);
                  v188 = vmlsq_lane_f32(v249, vrndxq_f32(vmulq_n_f32(v249, (float)v183)), v148, 0);
                  v189 = vmlaq_f32(vmulq_f32(v235, vmulq_f32(v185, v185)), vmulq_f32(v186, v186), v235);
                  v186.i64[0] = vpaddq_f32(v189, v189).u64[0];
                  v190 = vmlaq_f32(vmulq_f32(v235, vmulq_f32(v187, v187)), vmulq_f32(v188, v188), v235);
                  v190.i64[0] = vpaddq_f32(v190, v190).u64[0];
                  *(float32x2_t *)v190.f32 = vpadd_f32(*(float32x2_t *)v190.f32, *(float32x2_t *)v190.f32);
                  if ((vcgt_f32(*(float32x2_t *)v190.f32, vpadd_f32(*(float32x2_t *)v186.f32, *(float32x2_t *)v186.f32)).u32[0] & (v190.f32[0] > 0.000015259)) == 0)v57 = v182;
                }
              }
            }
            if ((v57 & 0xFE00000000) != 0)
              v191 = BYTE4(v57);
            else
              v191 = 1;
            v192 = ReciprocalTable[BYTE4(v57)];
            v144.i32[3] = fminf(fmaxf(v145, 0.0), 0.99609);
            v193 = vrndxq_f32(vmulq_n_f32(v144, (float)v191));
            v194 = (int8x8_t)vmovn_s32(vcvtq_s32_f32(v193));
            v25 = vand_s8(vuzp1_s8(v194, v194), (int8x8_t)0xFFFFFFFFLL);
            v21 = vmulq_n_f32(v193, v192);
            v21.i32[3] = 1.0;
            v20 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(v229, (float)v191)), v192);
            v20.i32[3] = 1.0;
            v11 = v57 & 0xFFFFFFFFFFFE1FFFLL | 0xC000;
LABEL_124:
            *a5 = v11;
            goto LABEL_136;
          }
        }
LABEL_34:
        if ((~(_DWORD)v11 & 0x18000) != 0)
          goto LABEL_51;
        v58 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v20, v21), (int8x16_t)xmmword_20631C0F0));
        if ((v58 & 7) != 0)
        {
          if ((v58 & 7) != 7)
            goto LABEL_51;
          v59 = v20;
          v265 = v21;
          v266 = v20;
          v60 = v21;
          v20 = v21;
          v21 = v59;
        }
        else
        {
          v59 = v21;
          v60 = v20;
        }
        v72 = vmulq_f32(v60, v59);
        v72.i64[0] = vpaddq_f32(v72, v72).u64[0];
        v73 = vmulq_f32(v21, v21);
        v73.i64[0] = vpaddq_f32(v73, v73).u64[0];
        v74 = fminf(vrecpes_f32(vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v73.f32).f32[0]), 1.8447e19)
            * vpadd_f32(*(float32x2_t *)v72.f32, *(float32x2_t *)v72.f32).f32[0];
        v75 = vmulq_n_f32(v21, v74);
        v75.i32[3] = v20.i32[3];
        v76 = vsubq_f32(v75, v60);
        v77 = vmulq_f32(v76, v76);
        v77.i64[0] = vpaddq_f32(v77, v77).u64[0];
        if (vpadd_f32(*(float32x2_t *)v77.f32, *(float32x2_t *)v77.f32).f32[0] < (float)(v14 * (float)(v14 * 0.25)))
        {
          v78 = HIWORD(v11) & 0x1F;
          v250 = v20;
          v257 = v21;
          v230 = v59;
          v236 = _Q3;
          v225 = v60;
          v242 = v74;
          if (a3 == 2)
            v79 = WeightInfoForSingleLineDualWeight(v78, 6, a4);
          else
            v79 = WeightInfoForSingleLineSingleWeight(v78, 6, a4);
          v150 = (int8x16_t)v250;
          v149 = v257;
          *a5 = v79;
          if ((v79 & 0x1F000000000000) != 0)
          {
            if (a3 == 2)
            {
              v151 = WeightInfoForSingleLineDualWeight(0, BYTE5(v79), a4);
              goto LABEL_126;
            }
            if (a3 == 1)
            {
              v151 = WeightInfoForSingleLineSingleWeight(0, BYTE5(v79), a4);
LABEL_126:
              v195 = v151;
              v196 = BYTE4(v151);
              v79 = *a5;
              v197 = BYTE4(*a5);
              v150 = (int8x16_t)v250;
              v149 = v257;
              v154 = v230;
              if ((_DWORD)v196 != (_DWORD)v197)
              {
                v152.f32[0] = ReciprocalTable[v197];
                v153.f32[0] = ReciprocalTable[v196];
                v198 = vmlsq_lane_f32(v257, vrndxq_f32(vmulq_n_f32(v257, (float)v197)), v152, 0);
                v199 = vmlsq_lane_f32(v250, vrndxq_f32(vmulq_n_f32(v250, (float)v197)), v152, 0);
                v200 = vmlsq_lane_f32(v257, vrndxq_f32(vmulq_n_f32(v257, (float)v196)), v153, 0);
                v201 = vmlsq_lane_f32(v250, vrndxq_f32(vmulq_n_f32(v250, (float)v196)), v153, 0);
                v202 = vmlaq_f32(vmulq_f32(v236, vmulq_f32(v198, v198)), vmulq_f32(v199, v199), v236);
                v199.i64[0] = vpaddq_f32(v202, v202).u64[0];
                v203 = vmlaq_f32(vmulq_f32(v236, vmulq_f32(v200, v200)), vmulq_f32(v201, v201), v236);
                v203.i64[0] = vpaddq_f32(v203, v203).u64[0];
                *(float32x2_t *)v203.f32 = vpadd_f32(*(float32x2_t *)v203.f32, *(float32x2_t *)v203.f32);
                if ((vcgt_f32(*(float32x2_t *)v203.f32, vpadd_f32(*(float32x2_t *)v199.f32, *(float32x2_t *)v199.f32)).u32[0] & (v203.f32[0] > 0.000015259)) == 0)
                  v79 = v195;
              }
LABEL_129:
              if ((v79 & 0xFE00000000) != 0)
                v204 = BYTE4(v79);
              else
                v204 = 1;
              v264 = BYTE4(v79);
              v205 = ReciprocalTable[BYTE4(v79)];
              v206 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v149, 3);
              v149.i32[3] = fminf(fmaxf(v242, 0.0), 0.99609);
              v207 = vrndxq_f32(vmulq_n_f32(v149, (float)v204));
              v208 = vrndxq_f32(vmulq_n_f32((float32x4_t)vextq_s8(v150, v206, 0xCuLL), (float)v204));
              v25 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v207), (int16x8_t)vcvtq_s32_f32(v208)));
              v209 = vmulq_n_f32(v208, v205);
              v210 = (int8x16_t)vmulq_n_f32(v207, v205);
              v21 = (float32x4_t)v210;
              v21.i32[3] = v209.i32[1];
              v211 = (float32x4_t)v210;
              v211.i32[3] = v209.i32[0];
              v212 = (int32x4_t)v210;
              v212.i32[0] = 1.0;
              v20 = vmulq_f32(v211, (float32x4_t)vextq_s8((int8x16_t)vdupq_laneq_s32(v212, 3), (int8x16_t)v212, 4uLL));
              v11 = v79 & 0xFFFFFFFFFFFE1FFFLL | 0x14000;
              *a5 = v11;
              if (a3 == 1)
              {
                v213 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v210.i8, 0);
                v210.i32[0] = vextq_s8(v210, v210, 8uLL).u32[0];
                v214 = vceq_f32(v213, *(float32x2_t *)v210.i8);
                if ((v214.i32[1] & v214.i32[0] & 1) != 0)
                {
                  v252 = (int8x16_t)v20;
                  v259 = v21;
                  v245 = (int8x16_t)v209;
                  if (a2)
                  {
                    v215 = *a2;
                    v215.i32[3] = 0;
                  }
                  else
                  {
                    v215 = (float32x4_t)xmmword_20631C430;
                  }
                  v216 = (int8x16_t)vmulq_f32(v225, v215);
                  *(float32x2_t *)v216.i8 = vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v216, v216, 8uLL));
                  v226 = vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v216.i8, 1));
                  v217 = (int8x16_t)vmulq_f32(v154, v215);
                  *(float32x2_t *)v217.i8 = vadd_f32(*(float32x2_t *)v217.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v217, v217, 8uLL));
                  v231 = vadd_f32(*(float32x2_t *)v217.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v217.i8, 1));
                  *a5 = WeightInfoForSingleLineSingleWeight(HIWORD(v79) & 0x1F, 4, a4);
                  v260[0] = (float32x4_t)v252;
                  v260[1] = v259;
                  CheckForReducedColorFidelity(a5, a4, 1, v260, &v264, &v263, &v262, v236);
                  if ((*a5 & 0xFE00000000) != 0)
                    v218 = BYTE4(*a5);
                  else
                    v218 = 1;
                  v219 = ReciprocalTable[BYTE4(*a5)];
                  *(float32x2_t *)v220.i8 = v226;
                  v220.u64[1] = (unint64_t)v231;
                  v221 = (int32x4_t)vextq_s8(v252, v245, 8uLL);
                  v222 = (int32x4_t)vrndxq_f32(vmulq_n_f32((float32x4_t)vtrn2q_s32(vtrn1q_s32(v221, v220), v221), (float)v218));
                  v223 = (float32x4_t)vzip1q_s32(v222, v222);
                  v223.i32[2] = v222.i32[0];
                  v224 = (float32x4_t)vzip2q_s32(vtrn1q_s32(v222, v222), v222);
                  v25 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v223), (int16x8_t)vcvtq_s32_f32(v224)));
                  v21 = vmulq_n_f32(v224, v219);
                  v20 = vmulq_n_f32(v223, v219);
                  v11 = *a5 & 0xFFFFFFFFFFFE1FFFLL | 0x8000;
                  goto LABEL_124;
                }
              }
LABEL_136:
              v45 = vqtbl1_s8((int8x16_t)(unint64_t)v25, ShuffleColorEndpointPair_mapTable[(v11 >> 13) & 0xF]);
              *(float32x4_t *)a6 = v20;
              *(float32x4_t *)(a6 + 16) = vsubq_f32(v21, v20);
              goto LABEL_137;
            }
          }
          v154 = v230;
          goto LABEL_129;
        }
LABEL_51:
        if ((v11 & 0x1F000000000000) == 0)
          goto LABEL_63;
        if (a3 == 2)
        {
          v237 = _Q3;
          v243 = (float)v13;
          v251 = v20;
          v258 = v21;
          v80 = WeightInfoForSingleLineDualWeight(0, BYTE5(v11), a4);
        }
        else
        {
          if (a3 != 1)
            goto LABEL_63;
          v237 = _Q3;
          v243 = (float)v13;
          v251 = v20;
          v258 = v21;
          v80 = WeightInfoForSingleLineSingleWeight(0, BYTE5(v11), a4);
        }
        v20 = v251;
        v21 = v258;
        v83 = BYTE4(v80);
        v11 = *a5;
        v84 = BYTE4(*a5);
        if (BYTE4(v80) == (_DWORD)v84)
        {
          v22 = v243;
        }
        else
        {
          v81.f32[0] = ReciprocalTable[v84];
          v82.f32[0] = ReciprocalTable[BYTE4(v80)];
          v85 = vmlsq_lane_f32(v258, vrndxq_f32(vmulq_n_f32(v258, (float)v84)), v81, 0);
          v86 = vmlsq_lane_f32(v251, vrndxq_f32(vmulq_n_f32(v251, (float)v84)), v81, 0);
          v87 = vmlsq_lane_f32(v258, vrndxq_f32(vmulq_n_f32(v258, (float)BYTE4(v80))), v82, 0);
          v88 = vmlsq_lane_f32(v251, vrndxq_f32(vmulq_n_f32(v251, (float)BYTE4(v80))), v82, 0);
          v89 = vmlaq_f32(vmulq_f32(v237, vmulq_f32(v85, v85)), vmulq_f32(v86, v86), v237);
          v86.i64[0] = vpaddq_f32(v89, v89).u64[0];
          v90 = vmlaq_f32(vmulq_f32(v237, vmulq_f32(v87, v87)), vmulq_f32(v88, v88), v237);
          v90.i64[0] = vpaddq_f32(v90, v90).u64[0];
          v91 = vpadd_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v90.f32);
          v22 = v243;
          if ((vcgt_f32(v91, vpadd_f32(*(float32x2_t *)v86.f32, *(float32x2_t *)v86.f32)).u8[0] & 1) == 0
            || v91.f32[0] <= 0.000015259)
          {
            v12 = HIDWORD(v80);
            *a5 = v80;
            if ((v80 & 0xFE00000000) == 0)
              v83 = 1;
            v22 = (float)v83;
            v11 = v80;
          }
        }
LABEL_63:
        if ((_BYTE)v12 != 0xFF)
        {
          v244 = v22;
          v263 = (v11 >> 13) & 0xF;
          if (EncodeBitTransferSigned(&v265, v12, &v263, &v261))
          {
            v11 = v11 & 0xFFFFFFFFFFFE1FFFLL | ((unint64_t)(v263 & 0xF) << 13);
            *a5 = v11;
            v25 = v261;
            v20 = v265;
            v21 = v266;
            goto LABEL_136;
          }
          v20 = v265;
          v21 = v266;
          *(float *)v92.i32 = (float)v12;
          v93 = (float32x4_t)vdupq_lane_s32(v92, 0);
          v94 = vrndxq_f32(vmulq_f32(vmulq_n_f32(v265, *(float *)v92.i32), (float32x4_t)xmmword_20631CF90));
          v95 = vrndxq_f32(vmulq_f32(vmulq_n_f32(v266, *(float *)v92.i32), (float32x4_t)xmmword_20631CF90));
          v96 = vsubq_f32(v94, (float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2).u64[0]);
          v97 = vsubq_f32(v95, (float32x4_t)vdupq_laneq_s32((int32x4_t)v95, 2).u64[0]);
          v98 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgezq_f32(v96), (int16x8_t)vcgezq_f32(v97)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v93, v96), (int16x8_t)vcgeq_f32(v93, v97))));
          if ((vminvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(v98, v98), vzip2_s8(v98, v98))), 0x1FuLL))) & 0x80000000) != 0)
          {
            v155 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v96), (int16x8_t)vcvtq_s32_f32(v97));
            v156 = vsubq_f32(v96, v97);
            LODWORD(v157) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v156, 2), vaddq_f32(v156, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v156.f32, 1))).u32[0];
            if (fabsf(v157) > 1.0)
              goto LABEL_113;
            v158 = v12 + 1;
            v159 = __clz(__rbit32(v158));
            v160 = v158 >> v159;
            v161 = (v158 >> v159);
            v162 = *(_OWORD *)&v155 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
            if (v159 && v161 != 1)
            {
              v163 = (int16x8_t)vminq_u16((uint16x8_t)v162, (uint16x8_t)vsubq_s16(vdupq_n_s16(v12), (int16x8_t)v162));
              if (v161 == 3)
                v164 = 21846;
              else
                v164 = 13108;
              v165 = (int8x16_t)vdupq_n_s16(v164);
              v166 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v163.i8, *(uint16x4_t *)v165.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v163, (uint16x8_t)v165), 0x10uLL);
              v165.i64[0] = 0x1000100010001;
              v165.i64[1] = 0x1000100010001;
              v162 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v163, v166, vdupq_n_s16(v160)), (uint16x8_t)vdupq_n_s16(v159)), vaddq_s16(v166, v166)), vbicq_s8(v165, (int8x16_t)vceqq_s16(v163, (int16x8_t)v162)));
            }
            v167 = v160 - 6;
            _ZF = v161 == 1;
            v168 = -8;
            if (!_ZF)
              v168 = v167;
            v169 = GetUnquantizationData_UnquantizationInfo[3 * v159 + v168];
            v170 = (int16x8_t)vshlq_u16((uint16x8_t)v162, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v169) & 7)));
            v171 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v169)), (int8x16_t)v162);
            v172 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v171, 1uLL), vdupq_n_s16((v169 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v169 >> 37) & 7)));
            v173 = vandq_s8((int8x16_t)vdupq_n_s16((v169 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v171, 0xFuLL)));
            v174 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v172, v170, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v169 >> 40))), v173);
            v172.i64[0] = 0x80008000800080;
            v172.i64[1] = 0x80008000800080;
            v175 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v174, 2uLL), vandq_s8(v173, (int8x16_t)v172));
            v176 = (int8x16_t)vdupq_n_s32(0x4B400000u);
            v177 = (float32x4_t)vdupq_n_s32(0xCB400000);
            v178 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v175.i8), v176), v177), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v175), v176), v177));
            v157 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 2), vaddq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 1))).f32[0];
            if (v157 != 0.0)
            {
LABEL_113:
              v179 = vmovn_s16(v155);
              if (v157 > 0.0)
              {
                v179 = vext_s8(v179, v179, 4uLL);
                v180 = v94;
                v94 = v95;
                v95 = v180;
              }
              v25 = vext_s8(v179, v179, 4uLL);
              v181 = ReciprocalTable[v12];
              v21 = vmulq_f32(vmulq_n_f32(v95, v181), (float32x4_t)xmmword_20631CFA0);
              v20 = vmulq_f32(vmulq_n_f32(v94, v181), (float32x4_t)xmmword_20631CFA0);
              goto LABEL_136;
            }
          }
          v22 = v244;
        }
        v70 = vrndxq_f32(vmulq_n_f32(v20, v22));
        v71 = vrndxq_f32(vmulq_n_f32(v21, v22));
        v99 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v70), (int16x8_t)vcvtq_s32_f32(v71));
        v100 = vsubq_f32(v70, v71);
        v101 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 2), vaddq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v100.f32, 1))).u32[0];
        if (fabsf(*(float *)&v101) <= 1.0)
        {
          v102 = v12 + 1;
          v103 = __clz(__rbit32(v102));
          v104 = v102 >> v103;
          v105 = (v102 >> v103);
          v106 = *(_OWORD *)&v99 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
          if (v103 && (_DWORD)v105 != 1)
          {
            v107 = (uint16x8_t)vsubq_s16(vdupq_n_s16(v12), (int16x8_t)v106);
            if ((_DWORD)v105 == 3)
              v108 = 21846;
            else
              v108 = 13108;
            v109 = (int8x16_t)vdupq_n_s16(v108);
            v110 = (int16x8_t)vminq_u16((uint16x8_t)v106, v107);
            v111 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v110.i8, *(uint16x4_t *)v109.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v110, (uint16x8_t)v109), 0x10uLL);
            v109.i64[0] = 0x1000100010001;
            v109.i64[1] = 0x1000100010001;
            v106 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v110, v111, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v104))), (uint16x8_t)vdupq_n_s16(v103)), vaddq_s16(v111, v111)), vbicq_s8(v109, (int8x16_t)vceqq_s16(v110, (int16x8_t)v106)));
          }
          v112 = v105 - 6;
          _ZF = (_DWORD)v105 == 1;
          v113 = -8;
          if (!_ZF)
            v113 = v112;
          v114 = GetUnquantizationData_UnquantizationInfo[3 * v103 + v113];
          v115 = (int16x8_t)vshlq_u16((uint16x8_t)v106, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v114) & 7)));
          v116 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v114)), (int8x16_t)v106);
          v117 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v116, 1uLL), vdupq_n_s16((v114 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v114 >> 37) & 7)));
          v118 = vandq_s8((int8x16_t)vdupq_n_s16((v114 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v116, 0xFuLL)));
          v119 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v117, v115, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v114 >> 40))), v118);
          v117.i64[0] = 0x80008000800080;
          v117.i64[1] = 0x80008000800080;
          v120 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v119, 2uLL), vandq_s8(v118, (int8x16_t)v117));
          v121 = (int8x16_t)vmovl_high_u16(v120);
          v122 = (int8x16_t)vdupq_n_s32(0x4B400000u);
          v123 = (float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v120.i8), v122);
          v124 = (float32x4_t)vorrq_s8(v121, v122);
          v125 = (float32x4_t)vdupq_n_s32(0xCB400000);
          v126 = vsubq_f32(vaddq_f32(v123, v125), vaddq_f32(v124, v125));
          v101 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).u32[0];
        }
        v25 = vmovn_s16(v99);
        if (*(float *)&v101 > 0.0)
        {
          v25 = vext_s8(v25, v25, 4uLL);
          v127 = v70;
          v70 = v71;
          v71 = v127;
        }
LABEL_80:
        v128 = ReciprocalTable[v12];
        v21 = vmulq_n_f32(v71, v128);
        v20 = vmulq_n_f32(v70, v128);
        goto LABEL_136;
      case 6uLL:
        goto LABEL_34;
      default:
        goto LABEL_136;
    }
  }
  if ((v11 & 0x1F000000000000) != 0)
  {
    if (a3 == 2)
    {
      v227 = v14;
      v232 = _Q3;
      v238 = (float)v13;
      v246 = v20;
      v253 = v21;
      v23 = WeightInfoForSingleLineDualWeight(0, BYTE5(v11), a4);
LABEL_16:
      v30 = BYTE4(v23);
      v11 = *a5;
      v31 = BYTE4(*a5);
      v20 = v246;
      v21 = v253;
      if (BYTE4(v23) == (_DWORD)v31)
      {
        v22 = v238;
        v14 = v227;
      }
      else
      {
        v24.f32[0] = ReciprocalTable[v31];
        v33 = vmulq_n_f32(v246, (float)BYTE4(v23));
        v32 = vrndxq_f32(v33);
        v33.f32[0] = ReciprocalTable[BYTE4(v23)];
        v34 = vmlsq_lane_f32(v253, vrndxq_f32(vmulq_n_f32(v253, (float)v31)), v24, 0);
        v35 = vmlsq_lane_f32(v246, vrndxq_f32(vmulq_n_f32(v246, (float)v31)), v24, 0);
        v36 = vmlsq_lane_f32(v253, vrndxq_f32(vmulq_n_f32(v253, (float)BYTE4(v23))), *(float32x2_t *)v33.f32, 0);
        v37 = vmlsq_lane_f32(v246, v32, *(float32x2_t *)v33.f32, 0);
        v38 = vmlaq_f32(vmulq_f32(v232, vmulq_f32(v34, v34)), vmulq_f32(v35, v35), v232);
        v35.i64[0] = vpaddq_f32(v38, v38).u64[0];
        *(float32x2_t *)v38.f32 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
        v39 = vmlaq_f32(vmulq_f32(v232, vmulq_f32(v36, v36)), vmulq_f32(v37, v37), v232);
        v35.i64[0] = vpaddq_f32(v39, v39).u64[0];
        v40 = vpadd_f32(*(float32x2_t *)v35.f32, *(float32x2_t *)v35.f32);
        v39.i8[0] = vcgt_f32(v40, *(float32x2_t *)v38.f32).u8[0];
        v22 = v238;
        v14 = v227;
        if ((v39.i8[0] & 1) == 0 || v40.f32[0] <= 0.000015259)
        {
          *a5 = v23;
          if ((v23 & 0xFE00000000) == 0)
            v30 = 1;
          v22 = (float)v30;
          v11 = v23;
          v14 = v33.f32[0];
        }
      }
      goto LABEL_23;
    }
    if (a3 == 1)
    {
      v227 = v14;
      v232 = _Q3;
      v238 = (float)v13;
      v246 = v20;
      v253 = v21;
      v23 = WeightInfoForSingleLineSingleWeight(0, BYTE5(v11), a4);
      goto LABEL_16;
    }
  }
LABEL_23:
  v41 = vrndxq_f32(vmulq_n_f32(v20, v22));
  v42 = vrndxq_f32(vmulq_n_f32(v21, v22));
  v43 = vmulq_n_f32(v41, v14);
  *(float32x4_t *)a6 = v43;
  *(float32x4_t *)(a6 + 16) = vmlaq_n_f32(vnegq_f32(v43), v42, v14);
  v44 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v41), (int16x8_t)vcvtq_s32_f32(v42));
  *(int8x8_t *)v44.i8 = vmovn_s16(v44);
  v45 = vqtbl1_s8((int8x16_t)v44, ShuffleColorEndpointPair_mapTable[(v11 >> 13) & 0xF]);
LABEL_137:
  *(int8x8_t *)(a6 + 32) = v45;
}

at_block_features_t at_block_get_features(at_block_format_t blockType, at_block_features_t src, at_size_t validSize, size_t size, size_t *outSize, at_flags_t flags)
{
  at_flags_t v6;
  char v7;
  unint64_t v8;
  unint64_t v9;
  uint32_t z;
  uint32_t x;
  uint32_t y;
  uint64_t v14;
  FILE *v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t BlockFeatures;
  at_block_features_t v21;
  BOOL v22;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  at_flags_t v40;
  uint64_t v41;

  v7 = flags;
  v9 = v8;
  z = validSize.z;
  x = validSize.x;
  y = validSize.y;
  if (outSize)
    *outSize = 0;
  if ((flags & 1) == 0)
  {
    if (blockType - 43 <= 0xFFFFFFFFFFFFFFD5)
    {
      if ((flags & 2) != 0)
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_block_get_features: Error block type out of range: %u\n");
      goto LABEL_66;
    }
    if (src.bits)
    {
      if (!v14)
      {
        if ((flags & 2) != 0)
        {
          v15 = (FILE *)*MEMORY[0x24BDAC8D8];
          v16 = "at_block_get_features: Error src array is not NULL, but has size of 0\n";
          v17 = 70;
          goto LABEL_65;
        }
LABEL_66:
        v21.bits = 0;
        return (at_block_features_t)v21.bits;
      }
      if (!validSize.x)
      {
        if ((flags & 2) != 0)
        {
          v15 = (FILE *)*MEMORY[0x24BDAC8D8];
          v16 = "at_block_get_features: Error src array is not NULL, but valid width is 0\n";
          v17 = 73;
          goto LABEL_65;
        }
        goto LABEL_66;
      }
      if (!validSize.y)
      {
        if ((flags & 2) != 0)
        {
          v15 = (FILE *)*MEMORY[0x24BDAC8D8];
          v16 = "at_block_get_features: Error src array is not NULL, but valid height is 0\n";
          v17 = 74;
LABEL_65:
          fwrite(v16, v17, 1uLL, v15);
          goto LABEL_66;
        }
        goto LABEL_66;
      }
    }
    else if (v18)
    {
      if ((flags & 2) != 0)
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_block_get_features: Error size (%lu) > 0 but src array is NULL\n");
      goto LABEL_66;
    }
  }
  if (validSize.z <= 1)
    v19 = 1;
  else
    v19 = validSize.z;
  v41 = 0;
  if (!outSize)
    outSize = (size_t *)&v41;
  *(_QWORD *)&validSize.z = v19;
  BlockFeatures = ATEncoder::GetBlockFeatures((ATEncoder *)blockType, src, *(at_block_buffer_t **)&validSize.x, *(__int128 *)&validSize.z, outSize, (const unint64_t *)flags, v6, v40);
  v21.bits = BlockFeatures;
  if (BlockFeatures)
    v22 = src.bits == 0;
  else
    v22 = 1;
  if (!v22 && (v7 & 2) != 0)
  {
    if (((BlockFeatures >> 10) & 0xFFE) != 0)
      v24 = (BlockFeatures >> 10) & 0xFFF;
    else
      v24 = 1;
    if (((BlockFeatures >> 22) & 0xFFE) != 0)
      v25 = (BlockFeatures >> 22) & 0xFFF;
    else
      v25 = 1;
    v26 = (BlockFeatures >> 5) & 0x1F;
    v27 = (x + v24 - 1) / v24;
    if (z <= 1)
      v28 = 1;
    else
      v28 = v19;
    v29 = *(_QWORD *)(src.bits + 8);
    v30 = (y + v25 - 1) / v25;
    v31 = v27 << v26;
    if (v29 < v27 << v26 && v29 != 0 && v30 >= 2)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_block_get_features: Error rowBytes (%lu) is too small.\n\tFor block width of %lu, we expect a %u texel wide image to be %lu blocks wide.\n\t%lu blocks * %lu bytes / block = %lu bytes.\n", v29, v24, x, (x + v24 - 1) / v24, (x + v24 - 1) / v24, 1 << v26, v31);
      v29 = *(_QWORD *)(src.bits + 8);
    }
    v34 = *(_QWORD *)(src.bits + 16);
    if (v34)
    {
      if (v34 < v29 * v30 && v28 >= 2)
      {
        fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_block_get_features: Error sliceBytes (%lu) is too small.\n\tFor rowBytes of %lu, we expect a %u texel high image (%lu blocks) to be %lu bytes in size.\n", v34, v29, y, v30, v29 * v30);
        v29 = *(_QWORD *)(src.bits + 8);
        v34 = *(_QWORD *)(src.bits + 16);
      }
    }
    v36 = v19 - 1;
    if (z <= 1)
      v36 = 0;
    if (v30 <= 1)
      v37 = 1;
    else
      v37 = v30;
    v38 = v31 + v34 * v36 + v29 * (v37 - 1);
    if (v38 > v9)
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_block_get_features: Caution: size (%lu) is too small.\n\tFor sliceBytes of %lu, we expect a %u texel deep image (%lu blocks) to be %lu bytes in size.\n", v9, v34, v19, v28, v38);
  }
  return (at_block_features_t)v21.bits;
}

void EncodeRowBlock(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  pthread_t v6;
  void *memptr;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = v1;
  STACK[0x20038] = *MEMORY[0x24BDAC8D0];
  v6 = pthread_self();
  v5 = (char *)&v6 - (_BYTE *)pthread_get_stackaddr_np(v6);
  if ((v5 + pthread_get_stacksize_np(v6)) >> 16 > 2)
  {
    EncodeRow(v4, v3, (unsigned __int8 *)&memptr);
  }
  else
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20000uLL, 0x231004C3uLL) || !memptr)
    {
      *(_DWORD *)(*(_QWORD *)(v4 + 40) + 4 * v3) = -8388608;
    }
    else
    {
      EncodeRow(v4, v3, (unsigned __int8 *)memptr);
      free(memptr);
    }
  }
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  pthread_t v6;
  void *memptr;

  v1 = MEMORY[0x24BDAC7A8](a1);
  v3 = v2;
  v4 = (_QWORD *)v1;
  STACK[0x20038] = *MEMORY[0x24BDAC8D0];
  v6 = pthread_self();
  v5 = (char *)&v6 - (_BYTE *)pthread_get_stackaddr_np(v6);
  if ((v5 + pthread_get_stacksize_np(v6)) >> 16 > 2)
  {
    EncodeRow(v4, v3, (unsigned __int8 *)&memptr);
  }
  else
  {
    memptr = 0;
    if (malloc_type_posix_memalign(&memptr, 0x20uLL, 0x20000uLL, 0x732D7A22uLL) || !memptr)
    {
      *(_DWORD *)(v4[5] + 4 * v3) = -8388608;
    }
    else
    {
      EncodeRow(v4, v3, (unsigned __int8 *)memptr);
      free(memptr);
    }
  }
}

unint64_t WeightInfoForSingleLineSingleWeight(int a1, uint64_t a2, int a3)
{
  uint64_t v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  _BOOL4 v11;

  v3 = 0;
  if (a3 > 374)
  {
    if (a3 != 375)
    {
      if (a3 != 392)
        return v3;
      v6 = (a2 << 40) | ((unint64_t)WeightInfoForSingleLineSingleWeight_8x8_kSingleLineSingleWeight_8x8[((int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1) + 4] << 32) | ((unint64_t)(a1 & 0x1F) << 48);
      v7 = ((((int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1) & 3u) << 15) | 0x2FA0000008000544;
      return v6 | v7;
    }
    v8 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
    v11 = a1 == 49 && a2 > 2;
    v6 = *((_QWORD *)&WeightInfoForSingleLineSingleWeight_7x7_kSingleLineSingleWeight_7x7 + v11) & 0xFFE00000FFFE1FFFLL | ((unint64_t)*((unsigned __int8 *)&WeightInfoForSingleLineSingleWeight_7x7_kSingleLineSingleWeight_7x7 + 8 * v11 + v8 + 4) << 32) | (a2 << 40) | ((unint64_t)(a1 & 0x1F) << 48);
LABEL_16:
    v7 = (v8 & 3) << 15;
    return v6 | v7;
  }
  if (a3 == 324)
  {
    v8 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
    v9 = (_QWORD *)((char *)&kSingleWeightsInfoTable
                  + 8 * kSingleLineSingleWeightIndexTable[4 * a1 + v8]);
    v6 = *v9 & 0xFFE00000FFFE1FFFLL | ((unint64_t)*((unsigned __int8 *)v9 + v8 + 4) << 32) & 0xFFE0FFFFFFFFFFFFLL | (a2 << 40) & 0xFFE0FFFFFFFFFFFFLL | ((unint64_t)(a1 & 0x1F) << 48);
    goto LABEL_16;
  }
  if (a3 == 342)
  {
    v4 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
    v5 = (_QWORD *)((char *)&WeightInfoForSingleLineSingleWeight_6x5_kSingleLineSingleWeight_6x5
                  + 8 * WeightInfoForSingleLineSingleWeight_6x5_IndexTable_6x5[4 * a1 + v4]);
    return *v5 & 0xFFE00000FFFE1FFFLL | ((unint64_t)*((unsigned __int8 *)v5 + v4 + 4) << 32) & 0xFFE0FFFFFFFFFFFFLL | (a2 << 40) & 0xFFE0FFFFFFFFFFFFLL | ((unint64_t)(a1 & 0x1F) << 48) | ((v4 & 3) << 15);
  }
  return v3;
}

unint64_t WeightInfoForSingleLineSingleWeight_4x4(int a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  v2 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
  v3 = (_QWORD *)((char *)&kSingleWeightsInfoTable + 8 * kSingleLineSingleWeightIndexTable[4 * a1 + v2]);
  return *v3 & 0xFFE00000FFFE1FFFLL | ((unint64_t)*((unsigned __int8 *)v3 + v2 + 4) << 32) & 0xFFE0FFFFFFFFFFFFLL | (a2 << 40) & 0xFFE0FFFFFFFFFFFFLL | ((unint64_t)(a1 & 0x1F) << 48) | ((v2 & 3) << 15);
}

uint64_t EncodeStandardDualPartitionBlock(uint64_t a1, uint64_t a2, unsigned __int16 *a3, float a4)
{
  unint64_t v7;
  int32x4_t v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  uint64_t v12;
  int v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int32x4_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int32x4_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  int16x8_t v44;
  __int32 v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x2_t *v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v91;
  float32x4_t v92;
  int8x16_t v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  float32x4_t v97;
  float32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int32x4_t v102;
  int8x16_t v103;
  int8x16_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  uint64_t v109;
  float32x4_t v110;
  float32x4_t v111;
  int8x16_t v112;
  int8x16_t v113;
  int8x16_t v114;
  int8x16_t v115;
  uint64_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  int8x16_t v156;
  float32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int32x4_t v161;
  int8x16_t v162;
  int8x16_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  int8x16_t v170;
  int8x16_t v171;
  int8x16_t v172;
  int8x16_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  int8x16_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int32x4_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int8x16_t v198;
  int8x16_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  int8x16_t v205;
  float32x4_t v206;
  int8x16_t v207;
  int8x16_t v208;
  int8x16_t v209;
  unsigned __int8 v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  int8x16_t v223;
  int8x16_t v224;
  int8x16_t v225;
  int8x16_t v226;
  int32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  int32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v239;
  int v240;
  int v241;
  unint64_t DualPartitionBlockInfo;
  float32x4_t v243;
  int8x16_t v244;
  int8x16_t v245;
  float32x4_t v247;
  int8x16_t v248;
  float32x4_t v249;
  int8x8_t v250;
  int8x16_t v251;
  int8x16_t v252;
  int32x2_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  int8x8_t v260;
  int8x16_t v261;
  float32x4_t v262;
  float32x4_t v263;
  float32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  float32x4_t v271;
  int8x16_t v272;
  float32x4_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  int8x16_t v280;
  int8x16_t v281;
  int16x8_t v282;
  int16x8_t v283;
  int16x8_t v284;
  int16x8_t v285;
  int16x8_t v286;
  unsigned __int16 v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  int8x16_t v295;
  int8x16_t v296;
  int8x16_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  int16x8_t v302;
  int16x8_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  unsigned __int16 v307;
  int8x16_t v308;
  int8x16_t v309;
  int8x16_t v310;
  int8x16_t v311;
  float32x4_t v312;
  float32x4_t v313;
  int8x16_t v314;
  float32x4_t v315;
  int8x16_t v316;
  float32x4_t v317;
  int32x4_t v318;
  int8x16_t v319;
  float32x4_t v320;
  int8x8_t v321;
  int8x16_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  int8x16_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  int8x16_t v338;
  float32x4_t v339;
  float32x4_t v340;
  int8x16_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int8x16_t v349;
  int8x16_t v350;
  int16x8_t v351;
  int16x8_t v352;
  int16x8_t v353;
  int16x8_t v354;
  int16x8_t v355;
  unsigned __int16 v356;
  int8x16_t v357;
  int8x16_t v358;
  int8x16_t v359;
  int8x16_t v360;
  float32x4_t v361;
  int8x16_t v362;
  float32x4_t v363;
  int8x16_t v364;
  int8x16_t v365;
  int8x16_t v366;
  int8x16_t v367;
  int8x16_t v368;
  int8x16_t v369;
  int8x16_t v370;
  int8x16_t v371;
  int8x16_t v372;
  int16x8_t v373;
  int16x8_t v374;
  int16x8_t v375;
  int16x8_t v376;
  int16x8_t v377;
  int16x8_t v378;
  int16x8_t v379;
  int16x8_t v380;
  int16x8_t v381;
  unsigned __int16 v382;
  int8x16_t v383;
  int8x16_t v384;
  int8x16_t v385;
  int8x16_t v386;
  int16x8_t v387;
  unint64_t v388;
  float32x4_t v389;
  int8x16_t v390;
  float32x4_t v391;
  unint64_t v392;
  unint64_t v393;
  int v394;
  int8x16_t v395;
  float32x4_t v396;
  float32x4_t v397;
  int8x16_t v398;
  int8x16_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  uint8x8_t v403;
  __int32 v404;
  float32x4_t v405;
  float32x4_t v406;
  float32x4_t v407;
  float32x4_t v408;
  int8x16_t v409;
  int8x16_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  int8x16_t v420;
  int8x16_t v421;
  int8x16_t v422;
  float32x4_t v423;
  float32x4_t *v424;
  float32x4_t v425;
  float32x4_t v426;
  __int32 v427;
  float32x4_t v428;
  int8x8_t v429;
  __int32 v430;
  uint8x8_t v431;
  uint64_t v432;
  float32x4_t v433;
  float32x4_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t v438;
  int8x16_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x4_t v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  int8x16_t v446;
  int8x16_t v447;
  int8x16_t v448;
  int8x16_t v449;
  float32x4_t *v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  int8x16_t v464;
  int8x16_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  int8x16_t v477;
  int8x16_t v478;
  int8x16_t v479;
  int8x16_t v480;
  unsigned int v481;
  unsigned int v482;
  float v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  int16x8_t v488;
  int8x8_t v489;
  int16x8_t v490;
  float32x4_t v491;
  float32x4_t v492;
  unsigned int v493;
  uint64_t v494;
  unsigned __int128 v495;
  uint16x8_t v496;
  unsigned int v497;
  int8x16_t v498;
  int16x8_t v499;
  int16x8_t v500;
  uint64_t v501;
  uint64_t v502;
  unint64_t v503;
  int16x8_t v504;
  int16x8_t v505;
  int16x8_t v506;
  int8x16_t v507;
  uint16x8_t v508;
  uint16x8_t v509;
  float32x4_t v510;
  float32x4_t v511;
  int8x16_t v512;
  float32x4_t v513;
  float32x4_t v514;
  int16x8_t v515;
  int8x8_t v516;
  int8x8_t v517;
  float32x4_t v518;
  float32x4_t v519;
  unsigned int v520;
  uint64_t v521;
  unsigned __int128 v522;
  uint16x8_t v523;
  unsigned int v524;
  int8x16_t v525;
  int16x8_t v526;
  int16x8_t v527;
  uint64_t v528;
  uint64_t v529;
  unint64_t v530;
  int16x8_t v531;
  int16x8_t v532;
  int16x8_t v533;
  int8x16_t v534;
  uint16x8_t v535;
  uint16x8_t v536;
  int8x16_t v537;
  float32x4_t v538;
  float32x4_t v539;
  int8x16_t v540;
  float32x4_t v541;
  float32x4_t v542;
  int16x8_t v543;
  uint64_t result;
  int8x8_t v545;
  int8x16_t v546;
  float32x4_t v547;
  int8x16_t v548;
  float32x4_t v549;
  int8x16_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  float32x4_t v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  float32x4_t v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x2_t *v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  unint64_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  int8x16_t v665;
  int8x16_t v666;
  int8x16_t v667;
  int8x16_t v668;
  int8x16_t v669;
  int8x16_t v670;
  int8x16_t v671;
  unsigned __int16 v672;
  int v673;
  int32x4_t v674;
  int32x4_t v675;
  int32x4_t v676;
  int32x4_t v677;
  uint64_t v678;
  int v679;
  int8x8_t v680;
  uint64_t v681;
  int v682;
  unsigned int v683;
  unsigned int v684;
  int v685;
  int v688;
  int8x8_t v689;
  int8x16_t v690;
  int32x4_t v691;
  int8x16_t v692;
  int32x4_t v693;
  int8x16_t v694;
  int8x16_t v695;
  float32x4_t v696;
  float32x4_t v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  float32x4_t v712;
  float32x4_t v713;
  float v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  int32x4_t v728;
  float32x4_t v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  float32x4_t v735;
  float32x4_t v736;
  int32x4_t v737;
  float32x4_t v738;
  int8x16_t v739;
  float32x4_t v740;
  float32x4_t v741;
  float32x4_t v742;
  float32x4_t *v743;
  float32x4_t *v744;
  int v745;
  float32x4_t v746;
  float32x4_t v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  float32x4_t v752;
  float32x4_t v753;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  int8x16_t v763;
  float32x4_t v764;
  int8x16_t v765;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  float32x4_t v770;
  float32x4_t v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  float32x4_t v782;
  float32x4_t v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x4_t v786;
  float32x4_t v787;
  float32x4_t v788;
  float32x4_t v789;
  float32x4_t v790;
  float32x4_t v791;
  float32x4_t v792;
  float32x4_t v793;
  float32x4_t v794;
  float32x4_t v795;
  float32x4_t v796;
  float32x4_t v797;
  float32x4_t v798;
  float v799;
  int32x4_t v800;
  float32x4_t v801;
  float32x4_t v802;
  float32x4_t v803;
  float32x4_t v804;
  int32x4_t v805;
  float32x4_t v806;
  float32x4_t v807;
  float32x4_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  float32x4_t v812;
  float32x4_t v813;
  float32x4_t v814;
  float32x4_t v815;
  float32x4_t v816;
  float32x4_t v817;
  int32x4_t v818;
  float32x4_t v819;
  float32x4_t v820;
  float32x4_t v821;
  float32x4_t v822;
  float32x4_t v823;
  float32x4_t v824;
  float32x4_t v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  float32x4_t v829;
  float32x4_t v830;
  float32x4_t v831;
  float32x4_t v832;
  float32x4_t v833;
  float32x4_t v834;
  int32x4_t v835;
  float32x4_t v836;
  int32x4_t v837;
  float32x4_t v838;
  float32x4_t v839;
  float32x4_t v840;
  float32x4_t v841;
  float32x4_t v842;
  float32x4_t v843;
  float32x4_t v844;
  float32x4_t v845;
  float32x4_t v846;
  float32x4_t v847;
  float32x4_t v848;
  float32x4_t v849;
  float32x4_t v850;
  float32x4_t v851;
  int32x4_t v852;
  int32x4_t v853;
  int32x4_t v854;
  int32x4_t v855;
  float32x4_t v856;
  float32x4_t v857;
  float32x4_t v858;
  float32x4_t v859;
  float32x4_t v860;
  float32x4_t v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  float32x4_t v865;
  float32x4_t v866;
  float32x4_t v867;
  float32x4_t v868;
  float32x4_t v869;
  float32x4_t v870;
  float32x4_t v871;
  float32x4_t v872;
  float32x4_t v873;
  float32x4_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  float32x4_t v878;
  float32x4_t v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  float32x4_t v884;
  float32x4_t v885;
  float32x4_t v886;
  float32x4_t v887;
  float32x4_t v888;
  float32x4_t v889;
  float32x4_t v890;
  int32x4_t v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  float32x4_t v896;
  float32x4_t v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  float32x4_t v902;
  float32x4_t v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float32x4_t v907;
  float32x4_t v908;
  float32x4_t v909;
  float32x4_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  float32x4_t v914;
  float32x4_t v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  float32x4_t v920;
  float32x4_t v921;
  float32x4_t v922;
  float32x4_t v923;
  float32x4_t v924;
  float32x4_t v925;
  float32x4_t v926;
  float32x4_t v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  float32x4_t v932;
  float32x4_t v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t *v936;
  float32x4_t *v937;
  float32x4_t v938;
  float32x4_t v939;
  float32x4_t v940;
  float32x4_t v941;
  float32x4_t v942;
  float32x4_t v943;
  float32x4_t v944;
  float32x4_t v945;
  float32x4_t v946;
  float32x4_t v947;
  float32x4_t v948;
  float32x4_t v949;
  float32x4_t v950;
  float32x4_t v951;
  float32x4_t v952;
  float32x4_t v953;
  float32x4_t v954;
  float32x4_t v955;
  float32x4_t v956;
  float32x4_t v957;
  float32x4_t v958;
  float32x4_t v959;
  float32x4_t v960;
  float32x4_t v961;
  float32x4_t v962;
  float32x4_t v963;
  float32x4_t v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  float32x4_t v968;
  float32x4_t v969;
  float32x4_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  float32x4_t v974;
  float32x4_t v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  float32x4_t v980;
  float32x4_t v981;
  float32x4_t v982;
  float32x4_t v983;
  float32x4_t v984;
  float32x4_t v985;
  float32x4_t v986;
  float32x4_t v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t v991;
  float32x4_t v992;
  float32x4_t v993;
  float32x4_t v994;
  float32x4_t v995;
  float32x4_t v996;
  float32x4_t v997;
  float32x4_t v998;
  float32x4_t v999;
  float32x4_t v1000;
  float32x4_t v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  float32x4_t v1004;
  float32x4_t v1005;
  float32x4_t v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  float32x4_t v1010;
  float32x4_t v1011;
  float32x4_t v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  float32x4_t v1015;
  float32x4_t v1016;
  float32x4_t v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  float32x4_t v1022;
  float32x4_t v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  float32x4_t v1036;
  float32x4_t v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  float32x4_t v1040;
  float32x4_t v1041;
  float32x4_t v1042;
  float32x4_t v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  float32x4_t v1046;
  float32x4_t v1047;
  float32x4_t v1048;
  float32x4_t v1049;
  float32x4_t v1050;
  float32x4_t v1051;
  float32x4_t v1052;
  float32x4_t v1053;
  float32x4_t v1054;
  float32x4_t v1055;
  float32x4_t v1056;
  float32x4_t v1057;
  float32x4_t v1058;
  float32x4_t v1059;
  float32x4_t v1060;
  float32x4_t v1061;
  float32x4_t v1062;
  float32x4_t v1063;
  float32x4_t v1064;
  float32x4_t v1065;
  float32x4_t v1066;
  float32x4_t v1067;
  float32x4_t v1068;
  float32x4_t v1069;
  float32x4_t v1070;
  float32x4_t v1071;
  float32x4_t v1072;
  float32x4_t v1073;
  float32x4_t v1074;
  float32x4_t v1075;
  float32x4_t v1076;
  float32x4_t v1077;
  float32x4_t v1078;
  float32x4_t v1079;
  float32x4_t v1080;
  float32x4_t v1081;
  float32x4_t v1082;
  float32x4_t v1083;
  float32x4_t v1084;
  float32x4_t v1085;
  float32x4_t v1086;
  float32x4_t v1087;
  float32x4_t v1088;
  float32x4_t v1089;
  float32x4_t v1090;
  float32x4_t v1091;
  float32x4_t v1092;
  float32x4_t v1093;
  float32x4_t v1094;
  float32x4_t v1095;
  float32x4_t v1096;
  float32x4_t v1097;
  float32x4_t v1098;
  float32x4_t v1099;
  float32x4_t v1100;
  float32x4_t v1101;
  float32x4_t v1102;
  float32x4_t v1103;
  float32x4_t v1104;
  float32x4_t v1105;
  float32x4_t v1106;
  float32x4_t v1107;
  float32x4_t v1108;
  float32x4_t v1109;
  float32x4_t v1110;
  float32x4_t v1111;
  float32x4_t v1112;
  float32x4_t v1113;
  float32x4_t v1114;
  float32x4_t v1115;
  float32x4_t v1116;
  float32x4_t v1117;
  float32x4_t v1118;
  float32x4_t v1119;
  float32x4_t v1120;
  float32x4_t v1121;
  float32x4_t v1122;
  float32x4_t v1123;
  float32x4_t v1124;
  float32x4_t v1125;
  float32x4_t v1126;
  float32x4_t v1127;
  float32x4_t v1128;
  float32x4_t v1129;
  float32x4_t v1130;
  float32x4_t v1131;
  float32x4_t v1132;
  float32x4_t v1133;
  int8x16_t v1134;
  float32x4_t v1135;
  float32x4_t v1136;
  int8x16_t v1137;
  float32x4_t v1138;
  int8x16_t v1139;
  float32x4_t v1140;
  float32x4_t v1141;
  int8x16_t v1142;
  float32x4_t v1143;
  float32x4_t v1144;
  int8x16_t v1145;
  float32x4_t v1146;
  float32x4_t v1147;
  int8x16_t v1148;
  float32x4_t v1149;
  float32x4_t v1150;
  int8x16_t v1151;
  float32x4_t v1152;
  float32x4_t v1153;
  int8x16_t v1155;
  float32x4_t v1156;
  float32x4_t v1157;
  float32x4_t v1158;
  float32x4_t v1159;
  float32x4_t v1160;
  float32x4_t v1161;
  int16x8_t v1162;
  float32x4_t v1163;
  float32x4_t v1164;
  float32x4_t v1165;
  int16x8_t v1166;
  float32x4_t v1167;
  float32x4_t v1168;
  float32x4_t v1169;
  float32x4_t v1170;
  float32x4_t v1171;
  float32x4_t v1172;
  float32x4_t v1173;
  float32x4_t v1174;
  float32x4_t v1175;
  float32x4_t v1176;
  float32x4_t v1177;
  int8x16_t v1178;
  float32x4_t v1179;
  float32x4_t v1180;
  float32x4_t v1181;
  float32x4_t v1182;
  float32x4_t v1183;
  float32x4_t v1184;
  int8x8_t v1185;
  float32x4_t v1186;
  float32x4_t v1187;
  float32x4_t v1188;
  float32x4_t v1189;
  float32x4_t v1190;
  float32x4_t v1191;
  float32x4_t v1192;
  float32x4_t v1193;
  float32x4_t v1194;
  float32x4_t v1195;
  float32x4_t v1196;
  float32x4_t v1197;
  float32x4_t v1198;
  float32x4_t v1199;
  float32x4_t v1200;
  float32x4_t v1201;
  float32x4_t v1202;
  float32x4_t v1203;
  float32x4_t v1204;
  float32x4_t v1205;
  float32x4_t v1206;
  float32x4_t v1207;
  float32x4_t v1208;
  float32x4_t v1209;
  float32x4_t v1210;
  float32x4_t v1211;
  float32x4_t v1212;
  float32x4_t v1213;
  float32x4_t v1214;
  float32x4_t v1215;
  float32x4_t v1216;
  float32x4_t v1217;
  float32x4_t v1218;
  float32x4_t v1219;
  float32x4_t v1220;
  float32x4_t v1221;
  float32x4_t v1222;
  int8x16_t v1223;
  float32x4_t v1224;
  float32x4_t v1225;
  float32x4_t v1226;
  float32x4_t v1227;
  float32x4_t v1228;
  int8x16_t v1229;
  float32x4_t v1230;
  float32x4_t v1231;
  float32x4_t v1232;
  float32x4_t v1233;
  int8x16_t v1234;
  float32x4_t v1235;
  int8x16_t v1236;
  float32x4_t v1237;
  float32x4_t v1238;
  float32x4_t v1239;
  float32x4_t v1240;
  int8x16_t v1241;
  float32x4_t v1242;
  int8x16_t v1243;
  float32x4_t v1244;
  float32x4_t v1245;
  float32x4_t v1246;
  float32x4_t v1247;
  int8x16_t v1248;
  float32x4_t v1249;
  int8x16_t v1250;
  float32x4_t v1251;
  float32x4_t v1252;
  float32x4_t v1253;
  float32x4_t v1254;
  int8x16_t v1255;
  float32x4_t v1256;
  int8x16_t v1257;
  float32x4_t v1258;
  float32x4_t v1259;
  float32x4_t v1260;
  int8x16_t v1261;
  int8x16_t v1262;
  int8x16_t v1263;
  float32x4_t v1264;
  float32x4_t v1265;
  float32x4_t v1266;
  float32x4_t v1267;
  int8x16_t v1268;
  float32x4_t v1269;
  float32x4_t v1270;
  float32x4_t v1271;
  int8x16_t v1272;
  float32x4_t v1273;
  float32x4_t v1274;
  int16x8_t v1275;
  int32x4_t v1276;
  float32x4_t v1277;
  int16x8_t v1278;
  float32x4_t v1279;
  float32x4_t v1280;
  int16x8_t v1281;
  float32x4_t v1282;
  float32x4_t v1283;
  int16x8_t v1284;
  float32x4_t v1285;
  float32x4_t v1286;
  float32x4_t v1287;
  float32x4_t v1288;
  float32x4_t v1289;
  float32x4_t v1290;
  int8x16_t v1291;
  int8x16_t v1292;
  float32x4_t v1293;
  float32x4_t v1294;
  float32x4_t v1295;
  float32x4_t v1296;
  float32x4_t v1297;
  float32x4_t v1298;
  float32x4_t v1299;
  float32x4_t v1300;
  float32x4_t v1301;
  float32x4_t v1302;
  float32x4_t v1303;
  float32x4_t v1304;
  float32x4_t v1305;
  float32x4_t v1306;
  int8x16_t v1307;
  float32x4_t v1308;
  float32x4_t v1309;
  float32x4_t v1310;
  float32x4_t v1311;
  float32x4_t v1312;
  float32x4_t v1313;
  float32x4_t v1314;
  int8x16_t v1315;
  int8x16_t v1316;
  float32x4_t v1317;
  float32x4_t v1318;
  float32x4_t v1319;
  float32x4_t v1320;
  int8x16_t v1321;
  int8x16_t v1322;
  float32x4_t v1323;
  int8x16_t v1324;
  int8x16_t v1325;
  float32x4_t v1326;
  float32x4_t v1327;
  float32x4_t v1328;
  float32x4_t v1329;
  int8x16_t v1330;
  int8x16_t v1331;
  float32x4_t v1332;
  float32x4_t v1333;
  float32x4_t v1334;
  float32x4_t v1335;
  float32x4_t v1336;
  float32x4_t v1337;
  int8x16_t v1338;
  float32x4_t v1339;
  float32x4_t v1340;
  float32x4_t v1341;
  float32x4_t v1342;
  float32x4_t v1343;
  float32x4_t v1344;
  float32x4_t v1345;
  float32x4_t v1346;
  float32x4_t v1347;
  float32x4_t v1348;
  float32x4_t v1349;
  float32x4_t v1350;
  float32x4_t v1351;
  float32x4_t v1352;
  float32x4_t v1353;
  float32x4_t v1354;
  float32x4_t v1355;
  float32x4_t v1356;
  float32x4_t v1357;
  float32x4_t v1358;
  float32x4_t v1359;
  float32x4_t v1360;
  float32x4_t v1361;
  float32x4_t v1362;
  float32x4_t v1363;
  float32x4_t v1364;
  int32x4_t v1365;
  int32x4_t v1366;
  float32x4_t v1367;
  float32x4_t v1368;
  float32x4_t v1369;
  float32x4_t v1370;
  int32x4_t v1371;
  int32x4_t v1372;
  float32x4_t v1373;
  float32x4_t v1374;
  float32x4_t v1375;
  float32x4_t v1376;
  int32x4_t v1377;
  int32x4_t v1378;
  float32x4_t v1379;
  float32x4_t v1380;
  float32x4_t v1381;
  float32x4_t v1382;
  float32x4_t v1383;
  int32x4_t v1384;
  int32x4_t v1385;
  float32x4_t v1386;
  float32x4_t v1387;
  float32x4_t v1388;
  float32x4_t v1389;
  int8x8_t v1390;
  int8x8_t v1391;
  uint64_t v1392;
  int8x8_t v1393;
  int8x8_t v1394;
  int8x8_t v1395;
  int8x8_t v1396;
  int8x8_t v1397;
  float32x4_t v1398[4];
  int8x16_t v1399;
  int8x16_t v1400;
  int8x16_t v1401;
  int8x16_t v1402;
  float32x4_t v1403[4];
  int32x4_t v1404;
  int32x4_t v1405;
  int32x4_t v1406;
  int32x4_t v1407;
  float32x4_t v1408;
  float32x4_t v1409;
  int8x16_t v1410;
  float32x4_t v1411;
  float32x4_t v1412;
  __int128 v1413;
  _DWORD v1414[3];
  uint64_t v1415;

  v1415 = *MEMORY[0x24BDAC8D0];
  v7 = a3[1];
  v8 = *(int32x4_t *)((char *)VectorMaskForBitMask + ((v7 >> 8) & 0xF0));
  v9 = *(int32x4_t *)((char *)VectorMaskForBitMask + ((v7 >> 4) & 0xF0));
  v10 = *(int32x4_t *)((char *)VectorMaskForBitMask + (v7 & 0xF0));
  v11 = VectorMaskForBitMask[v7 & 0xF];
  v12 = a1 + 272;
  v13 = *(unsigned __int8 *)(a1 + 135);
  v14 = (int16x8_t)v8;
  v15 = (int16x8_t)v9;
  v16 = (int16x8_t)v10;
  v17 = (int16x8_t)v11;
  if (*(_BYTE *)(a1 + 135))
  {
    v15 = (int16x8_t)vorrq_s8(*(int8x16_t *)(a1 + 736), (int8x16_t)v9);
    v14 = (int16x8_t)vorrq_s8(*(int8x16_t *)(a1 + 720), (int8x16_t)v8);
    v16 = (int16x8_t)vorrq_s8(*(int8x16_t *)(a1 + 752), (int8x16_t)v10);
    v17 = (int16x8_t)vorrq_s8(*(int8x16_t *)(a1 + 768), (int8x16_t)v11);
  }
  v1288 = *(float32x4_t *)(a1 + 160);
  v1296 = *(float32x4_t *)(a1 + 144);
  v1345 = *(float32x4_t *)(a1 + 256);
  v1351 = *(float32x4_t *)(a1 + 192);
  v1303 = *(float32x4_t *)(a1 + 240);
  v1310 = *(float32x4_t *)(a1 + 176);
  v1336 = *(float32x4_t *)(a1 + 224);
  v1343 = *(float32x4_t *)(a1 + 208);
  v18 = *(int8x16_t *)(a1 + 304);
  v19 = *(int8x16_t *)(a1 + 320);
  v20 = *(int8x16_t *)v12;
  v21 = *(int8x16_t *)(a1 + 288);
  v22 = *(int8x16_t *)(a1 + 368);
  v23 = *(int8x16_t *)(a1 + 384);
  v24 = vmvnq_s8((int8x16_t)v8);
  v25 = vmvnq_s8((int8x16_t)v9);
  v26 = vmvnq_s8((int8x16_t)v10);
  v27 = vmvnq_s8((int8x16_t)v11);
  v28 = (int32x4_t)v24;
  v29 = (int32x4_t)v25;
  v30 = (int32x4_t)v26;
  v31 = (int32x4_t)v27;
  v33 = *(int8x16_t *)(a1 + 336);
  v32 = *(int8x16_t *)(a1 + 352);
  if (*(_BYTE *)(a1 + 135))
  {
    v29 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 736), v25);
    v28 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 720), v24);
    v30 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 752), v26);
    v31 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 768), v27);
  }
  v1321 = v27;
  v1324 = v26;
  v1315 = v25;
  v1330 = v24;
  v1365 = VectorMaskForBitMask[v7 & 0xF];
  v1371 = *(int32x4_t *)((char *)VectorMaskForBitMask + (v7 & 0xF0));
  v1377 = *(int32x4_t *)((char *)VectorMaskForBitMask + ((v7 >> 4) & 0xF0));
  v1384 = *(int32x4_t *)((char *)VectorMaskForBitMask + ((v7 >> 8) & 0xF0));
  v34.i64[0] = -1;
  v34.i64[1] = -1;
  v35 = (int8x16_t)vcgtq_s32((int32x4_t)v16, v34);
  v36 = (int8x16_t)vcgtq_s32((int32x4_t)v14, v34);
  v37 = (int8x16_t)vcgtq_s32((int32x4_t)v17, v34);
  v38 = (int8x16_t)vcgtq_s32((int32x4_t)v15, v34);
  v39 = (int8x16_t)vcgtq_s32(v30, v34);
  v40 = (int8x16_t)vcgtq_s32(v28, v34);
  v41 = (int8x16_t)vcgtq_s32(v31, v34);
  v42 = (int8x16_t)vcgtq_s32(v29, v34);
  v1275 = (int16x8_t)vcltzq_s32(v9);
  v1278 = (int16x8_t)vcltzq_s32(v11);
  v1281 = (int16x8_t)vcltzq_s32(v10);
  v1284 = (int16x8_t)vcltzq_s32(v8);
  v43 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v1296, v36), (float32x4_t)vandq_s8((int8x16_t)v1310, v35)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v1288, v38), (float32x4_t)vandq_s8((int8x16_t)v1351, v37))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v1343, v36), (float32x4_t)vandq_s8((int8x16_t)v1303, v35)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v1336, v38), (float32x4_t)vandq_s8((int8x16_t)v1345, v37)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v20, v36), (float32x4_t)vandq_s8(v18, v35)), vaddq_f32((float32x4_t)vandq_s8(v21, v38), (float32x4_t)vandq_s8(v19, v37))), vaddq_f32(vaddq_f32((float32x4_t)vbicq_s8(v33, (int8x16_t)v1284), (float32x4_t)vbicq_s8(v22, (int8x16_t)v1281)), vaddq_f32((float32x4_t)vbicq_s8(v32, (int8x16_t)v1275), (float32x4_t)vbicq_s8(v23, (int8x16_t)v1278)))));
  v44 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v14, v15), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v16, v17), (int8x16_t)xmmword_20631C0C0));
  v44.i16[0] = vaddvq_s16(v44);
  *(int8x8_t *)v44.i8 = vcnt_s8(*(int8x8_t *)v44.i8);
  v44.i16[0] = vaddlv_u8(*(uint8x8_t *)v44.i8);
  v45 = v44.i32[0];
  v46 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v1296, v40), (float32x4_t)vandq_s8((int8x16_t)v1310, v39)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v1288, v42), (float32x4_t)vandq_s8((int8x16_t)v1351, v41))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v1343, v40), (float32x4_t)vandq_s8((int8x16_t)v1303, v39)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v1336, v42), (float32x4_t)vandq_s8((int8x16_t)v1345, v41)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v20, v40), (float32x4_t)vandq_s8(v18, v39)), vaddq_f32((float32x4_t)vandq_s8(v21, v42), (float32x4_t)vandq_s8(v19, v41))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v33, (int8x16_t)v1284), (float32x4_t)vandq_s8(v22, (int8x16_t)v1281)), vaddq_f32((float32x4_t)vandq_s8(v32, (int8x16_t)v1275), (float32x4_t)vandq_s8(v23, (int8x16_t)v1278)))));
  v47 = (int32x4_t)vmulq_n_f32(v43, ReciprocalTable[(unsigned __int16)(16 - v44.i16[0])]);
  v48 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.i8, 0);
  v49 = vsubq_f32(v1296, v48);
  v50 = vsubq_f32(v1288, v48);
  v51 = vsubq_f32(v1310, v48);
  v52 = vsubq_f32(v1351, v48);
  v53 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.i8, 1);
  v54 = vsubq_f32(v1343, v53);
  v55 = vsubq_f32(v1336, v53);
  v56 = vsubq_f32(v1303, v53);
  v57 = vsubq_f32(v1345, v53);
  v58 = (float32x4_t)vdupq_laneq_s32(v47, 2);
  v1226 = *(float32x4_t *)(a1 + 320);
  v1232 = *(float32x4_t *)v12;
  v59 = vsubq_f32(*(float32x4_t *)v12, v58);
  v1260 = *(float32x4_t *)(a1 + 288);
  v60 = vsubq_f32(v1260, v58);
  v1246 = *(float32x4_t *)(a1 + 304);
  v61 = vsubq_f32(v1246, v58);
  v62 = vsubq_f32(v1226, v58);
  v63 = *(float32x4_t *)(a1 + 336);
  v64 = *(float32x4_t *)(a1 + 352);
  v1181 = (float32x4_t)v47;
  v65 = (float32x4_t)vdupq_laneq_s32(v47, 3);
  v66 = vsubq_f32(v63, v65);
  v67 = vsubq_f32(v64, v65);
  v1239 = *(float32x4_t *)(a1 + 368);
  v68 = vsubq_f32(v1239, v65);
  v1253 = *(float32x4_t *)(a1 + 384);
  v69 = vsubq_f32(v1253, v65);
  v70 = *(float32x2_t **)(a1 + 32);
  v71 = vmulq_f32(v52, v52);
  v72 = vmulq_f32(v51, v51);
  v73 = vmulq_f32(v50, v50);
  v74 = vmulq_f32(v49, v49);
  v75 = vmulq_f32(v57, v57);
  v76 = vmulq_f32(v56, v56);
  v77 = vmulq_f32(v55, v55);
  v78 = vmulq_f32(v54, v54);
  v79 = vmulq_f32(v62, v62);
  v80 = vmulq_f32(v61, v61);
  v81 = vmulq_f32(v60, v60);
  v82 = vmulq_f32(v59, v59);
  v83 = vmulq_f32(v69, v69);
  v84 = vmulq_f32(v68, v68);
  v85 = vmulq_f32(v67, v67);
  v86 = vmulq_f32(v66, v66);
  __asm { FMOV            V4.4S, #3.0 }
  if (v70)
  {
    v91 = vmulq_lane_f32(v77, *v70, 1);
    v92 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v75, *v70, 1), v71, COERCE_FLOAT(*(_OWORD *)v70->f32)), v79, *(float32x4_t *)v70->f32, 2), v83, *(float32x4_t *)v70->f32, 3);
    v93 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(v91, v73, COERCE_FLOAT(*(_OWORD *)v70->f32)), v81, *(float32x4_t *)v70->f32, 2), v85, *(float32x4_t *)v70->f32, 3), _Q4);
    v94 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v78, *v70, 1), v74, COERCE_FLOAT(*(_OWORD *)v70->f32)), v82, *(float32x4_t *)v70->f32, 2), v86, *(float32x4_t *)v70->f32, 3), _Q4);
    v95 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v76, *v70, 1), v72, COERCE_FLOAT(*(_OWORD *)v70->f32)), v80, *(float32x4_t *)v70->f32, 2), v84, *(float32x4_t *)v70->f32, 3), _Q4);
    v96 = (int8x16_t)vmulq_f32(v92, _Q4);
  }
  else
  {
    v97 = vaddq_f32(v79, vaddq_f32(v71, v75));
    v94 = (int8x16_t)vaddq_f32(v86, vaddq_f32(v82, vaddq_f32(v74, v78)));
    v93 = (int8x16_t)vaddq_f32(v85, vaddq_f32(v81, vaddq_f32(v73, v77)));
    v95 = (int8x16_t)vaddq_f32(v84, vaddq_f32(v80, vaddq_f32(v72, v76)));
    v96 = (int8x16_t)vaddq_f32(v83, v97);
  }
  v98 = vmulq_n_f32(v46, ReciprocalTable[v45]);
  v99 = *(int32x4_t *)((char *)VectorMaskForBitMask + ((v7 >> 8) & 0xF0));
  v100 = *(int32x4_t *)((char *)VectorMaskForBitMask + ((v7 >> 4) & 0xF0));
  v101 = *(int32x4_t *)((char *)VectorMaskForBitMask + (v7 & 0xF0));
  v102 = VectorMaskForBitMask[v7 & 0xF];
  if (*(_BYTE *)(a1 + 135))
  {
    v100 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 736), (int8x16_t)v1377);
    v99 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 720), (int8x16_t)v1384);
    v101 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 752), (int8x16_t)v1371);
    v102 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 768), (int8x16_t)v1365);
  }
  v103 = (int8x16_t)vcltzq_s32(v101);
  v104.i64[0] = 0x7F0000007FLL;
  v104.i64[1] = 0x7F0000007FLL;
  v1134 = v93;
  v1137 = v96;
  v105 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v100), v104, v93);
  v106 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v102), v104, v96);
  v1139 = v94;
  v1142 = v95;
  v107 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v99), v104, v94);
  v108 = (float32x4_t)vbslq_s8(v103, v104, v95);
  v109 = a1 + 400;
  v110 = vmaxnmq_f32(v107, v108);
  v111 = vmaxnmq_f32(v105, v106);
  v112 = vbslq_s8((int8x16_t)vcgtq_f32(v108, v107), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
  v113 = vbslq_s8((int8x16_t)vcgtq_f32(v106, v105), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
  v114 = (int8x16_t)vmaxnmq_f32(v110, v111);
  v115 = vbslq_s8((int8x16_t)vcgtq_f32(v111, v110), v113, v112);
  v113.i64[0] = vextq_s8(v114, v114, 8uLL).u64[0];
  *(float32x2_t *)v105.f32 = vmaxnm_f32(*(float32x2_t *)v114.i8, *(float32x2_t *)v113.i8);
  v1397 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v113.i8, *(float32x2_t *)v114.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v115, v115, 8uLL), *(int8x8_t *)v115.i8);
  v116 = *(unsigned int *)((unint64_t)&v1397 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                            * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v105.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.f32, 1))) & 1)));
  v117 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 0);
  v118 = vsubq_f32(v1351, v117);
  v119 = vsubq_f32(v1296, v117);
  v120 = vsubq_f32(v1288, v117);
  v121 = vsubq_f32(v1310, v117);
  v122 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1);
  v123 = vsubq_f32(v1345, v122);
  v124 = vsubq_f32(v1343, v122);
  v125 = vsubq_f32(v1336, v122);
  v126 = vsubq_f32(v1303, v122);
  v127 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2);
  v128 = vsubq_f32(v1226, v127);
  v129 = vsubq_f32(v1232, v127);
  v130 = vsubq_f32(v1260, v127);
  v131 = vsubq_f32(v1246, v127);
  v132 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 3);
  v133 = vsubq_f32(v1253, v132);
  v134 = vsubq_f32(v63, v132);
  v135 = vsubq_f32(v64, v132);
  v136 = vsubq_f32(v1239, v132);
  v137 = vmulq_f32(v121, v121);
  v138 = vmulq_f32(v120, v120);
  v139 = vmulq_f32(v119, v119);
  v140 = vmulq_f32(v118, v118);
  v141 = vmulq_f32(v126, v126);
  v142 = vmulq_f32(v125, v125);
  v143 = vmulq_f32(v124, v124);
  v144 = vmulq_f32(v123, v123);
  v145 = vmulq_f32(v131, v131);
  v146 = vmulq_f32(v130, v130);
  v147 = vmulq_f32(v129, v129);
  v148 = vmulq_f32(v128, v128);
  v149 = vmulq_f32(v136, v136);
  v150 = vmulq_f32(v135, v135);
  v151 = vmulq_f32(v134, v134);
  v152 = vmulq_f32(v133, v133);
  if (v70)
  {
    v153 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v142, *v70, 1), v138, COERCE_FLOAT(*(_OWORD *)v70->f32)), v146, *(float32x4_t *)v70->f32, 2), v150, *(float32x4_t *)v70->f32, 3), _Q4);
    v154 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v143, *v70, 1), v139, COERCE_FLOAT(*(_OWORD *)v70->f32)), v147, *(float32x4_t *)v70->f32, 2), v151, *(float32x4_t *)v70->f32, 3), _Q4);
    v155 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v141, *v70, 1), v137, COERCE_FLOAT(*(_OWORD *)v70->f32)), v145, *(float32x4_t *)v70->f32, 2), v149, *(float32x4_t *)v70->f32, 3), _Q4);
    v156 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v144, *v70, 1), v140, COERCE_FLOAT(*(_OWORD *)v70->f32)), v148, *(float32x4_t *)v70->f32, 2), v152, *(float32x4_t *)v70->f32, 3), _Q4);
  }
  else
  {
    v154 = (int8x16_t)vaddq_f32(v151, vaddq_f32(v147, vaddq_f32(v139, v143)));
    v153 = (int8x16_t)vaddq_f32(v150, vaddq_f32(v146, vaddq_f32(v138, v142)));
    v155 = (int8x16_t)vaddq_f32(v149, vaddq_f32(v145, vaddq_f32(v137, v141)));
    v156 = (int8x16_t)vaddq_f32(v152, vaddq_f32(v148, vaddq_f32(v140, v144)));
  }
  v157 = *(float32x4_t *)(v109 + 16 * v116);
  v158 = (int32x4_t)v1330;
  v159 = (int32x4_t)v1315;
  v160 = (int32x4_t)v1324;
  v161 = (int32x4_t)v1321;
  if (v13)
  {
    v159 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 736), v1315);
    v158 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 720), v1330);
    v160 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 752), v1324);
    v161 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 768), v1321);
  }
  v162 = (int8x16_t)vcltzq_s32(v160);
  v163.i64[0] = 0x7F0000007FLL;
  v163.i64[1] = 0x7F0000007FLL;
  v164 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v159), v163, v153);
  v165 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v161), v163, v156);
  v166 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v158), v163, v154);
  v167 = (float32x4_t)vbslq_s8(v162, v163, v155);
  v168 = vmaxnmq_f32(v166, v167);
  v169 = vmaxnmq_f32(v164, v165);
  v170 = vbslq_s8((int8x16_t)vcgtq_f32(v167, v166), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
  v171 = vbslq_s8((int8x16_t)vcgtq_f32(v165, v164), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
  v172 = (int8x16_t)vmaxnmq_f32(v168, v169);
  v173 = vbslq_s8((int8x16_t)vcgtq_f32(v169, v168), v171, v170);
  v171.i64[0] = vextq_s8(v172, v172, 8uLL).u64[0];
  *(float32x2_t *)v164.f32 = vmaxnm_f32(*(float32x2_t *)v172.i8, *(float32x2_t *)v171.i8);
  v1396 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v171.i8, *(float32x2_t *)v172.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v173, v173, 8uLL), *(int8x8_t *)v173.i8);
  v1266 = *(float32x4_t *)(v109
                         + 16
                         * *(unsigned int *)((unint64_t)&v1396 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                              * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v164.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v164.f32, 1))) & 1))));
  v174 = vsubq_f32(v98, v1266);
  v175 = vsubq_f32(v1181, v157);
  v1155 = v153;
  v1148 = v155;
  v1151 = v154;
  v1145 = v156;
  if (v70)
  {
    v174 = vmulq_f32(v174, *(float32x4_t *)v70->f32);
    v175 = vmulq_f32(v175, *(float32x4_t *)v70->f32);
  }
  v1159 = v98;
  v1208 = _Q4;
  v176 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v157.f32, 0);
  v177 = vsubq_f32(v1351, v176);
  v178 = vsubq_f32(v1310, v176);
  v179 = vsubq_f32(v1296, v176);
  v1197 = v176;
  v180 = vsubq_f32(v1288, v176);
  v1318 = v157;
  v1184 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v157.f32, 1);
  v181 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 2);
  v182 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1336, v1184), *(float32x2_t *)v175.f32, 1), v180, v175.f32[0]);
  v183 = vsubq_f32(v1260, v181);
  v184 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1343, v1184), *(float32x2_t *)v175.f32, 1), v179, v175.f32[0]);
  v185 = vsubq_f32(v1232, v181);
  v186 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1303, v1184), *(float32x2_t *)v175.f32, 1), v178, v175.f32[0]);
  v187 = vsubq_f32(v1246, v181);
  v1177 = v181;
  v188 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1345, v1184), *(float32x2_t *)v175.f32, 1), v177, v175.f32[0]), vsubq_f32(v1226, v181), v175, 2);
  v189 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 3);
  v190 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(v182, v183, v175, 2), vsubq_f32(v64, v189), v175, 3);
  v1173 = v189;
  v191 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(v184, v185, v175, 2), vsubq_f32(v63, v189), v175, 3);
  v192 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(v186, v187, v175, 2), vsubq_f32(v1239, v189), v175, 3);
  v193 = (int8x16_t)vmlaq_laneq_f32(v188, vsubq_f32(v1253, v189), v175, 3);
  v194 = v1384;
  v195 = v1377;
  v196 = v1371;
  v197 = v1365;
  if (v13)
  {
    v195 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 736), (int8x16_t)v1377);
    v194 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 720), (int8x16_t)v1384);
    v196 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 752), (int8x16_t)v1371);
    v197 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 768), (int8x16_t)v1365);
  }
  v198 = (int8x16_t)vcltzq_s32(v195);
  v199.i64[0] = 0x7F0000007FLL;
  v199.i64[1] = 0x7F0000007FLL;
  v200 = (float32x4_t)vbslq_s8(v198, v199, v190);
  v201 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v197), v199, v193);
  v202 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v194), v199, v191);
  v203 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v196), v199, v192);
  v204 = vmaxnmq_f32(v200, v201);
  v205 = (int8x16_t)vcgtq_f32(v201, v200);
  v206 = vmaxnmq_f32(v202, v203);
  v207 = vbslq_s8((int8x16_t)vcgtq_f32(v203, v202), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
  v208 = (int8x16_t)vmaxnmq_f32(v206, v204);
  v209 = vbslq_s8((int8x16_t)vcgtq_f32(v204, v206), vbslq_s8(v205, (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v207);
  v206.i64[0] = vextq_s8(v208, v208, 8uLL).u64[0];
  *(float32x2_t *)v207.i8 = vmaxnm_f32(*(float32x2_t *)v208.i8, *(float32x2_t *)v206.f32);
  v210 = vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v207.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v207.i8, 1))).u8[0];
  v211 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1266.f32, 0);
  v1395 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v206.f32, *(float32x2_t *)v208.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v209, v209, 8uLL), *(int8x8_t *)v209.i8);
  v212 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1266.f32, 1);
  v213 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1336, v212), *(float32x2_t *)v174.f32, 1), vsubq_f32(v1288, v211), v174.f32[0]);
  v214 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1343, v212), *(float32x2_t *)v174.f32, 1), vsubq_f32(v1296, v211), v174.f32[0]);
  v215 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1303, v212), *(float32x2_t *)v174.f32, 1), vsubq_f32(v1310, v211), v174.f32[0]);
  v1337 = v211;
  v1311 = v212;
  v216 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v1345, v212), *(float32x2_t *)v174.f32, 1), vsubq_f32(v1351, v211), v174.f32[0]);
  v217 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1266, 2);
  v218 = vmlaq_laneq_f32(v216, vsubq_f32(v1226, v217), v174, 2);
  v219 = vmlaq_laneq_f32(v215, vsubq_f32(v1246, v217), v174, 2);
  v220 = vmlaq_laneq_f32(v214, vsubq_f32(v1232, v217), v174, 2);
  v1304 = v217;
  v221 = vmlaq_laneq_f32(v213, vsubq_f32(v1260, v217), v174, 2);
  v222 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1266, 3);
  v223 = (int8x16_t)vmlaq_laneq_f32(v221, vsubq_f32(v64, v222), v174, 3);
  v1352 = *(float32x4_t *)(v109
                         + 16
                         * *(unsigned int *)((unint64_t)&v1395 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v210 & 1))));
  v1297 = v222;
  v224 = (int8x16_t)vmlaq_laneq_f32(v220, vsubq_f32(v63, v222), v174, 3);
  v225 = (int8x16_t)vmlaq_laneq_f32(v219, vsubq_f32(v1239, v222), v174, 3);
  v226 = (int8x16_t)vmlaq_laneq_f32(v218, vsubq_f32(v1253, v222), v174, 3);
  v227 = (int32x4_t)v1330;
  v228 = (int32x4_t)v1315;
  v229 = (int32x4_t)v1324;
  v230 = (int32x4_t)v1321;
  if (v13)
  {
    v228 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 736), v1315);
    v227 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 720), v1330);
    v229 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 752), v1324);
    v230 = (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + 768), v1321);
  }
  v231 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v228), v199, v223);
  v232 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v230), v199, v226);
  v233 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v227), v199, v224);
  v234 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v229), v199, v225);
  v235 = vmaxnmq_f32(v233, v234);
  v236 = vmaxnmq_f32(v231, v232);
  v237 = vbslq_s8((int8x16_t)vcgtq_f32(v232, v231), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
  v238 = (int8x16_t)vmaxnmq_f32(v235, v236);
  v239 = vbslq_s8((int8x16_t)vcgtq_f32(v236, v235), v237, vbslq_s8((int8x16_t)vcgtq_f32(v234, v233), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
  v234.i64[0] = vextq_s8(v238, v238, 8uLL).u64[0];
  *(float32x2_t *)v233.f32 = vmaxnm_f32(*(float32x2_t *)v238.i8, *(float32x2_t *)v234.f32);
  v1394 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v234.f32, *(float32x2_t *)v238.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v239, v239, 8uLL), *(int8x8_t *)v239.i8);
  v1346 = *(float32x4_t *)(v109
                         + 16
                         * *(unsigned int *)((unint64_t)&v1394 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                              * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v233.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v233.f32, 1))) & 1))));
  if (*(float *)(a1 + 124) <= 65025.0)
    v240 = 0;
  else
    v240 = 1073741822;
  v241 = 4 * (v240 - *(char *)(a1 + 136)) + 16;
  DualPartitionBlockInfo = GetDualPartitionBlockInfo(4u, v241);
  v243 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v244 = (int8x16_t)vsubq_f32(v1352, v1318);
  v245.i64[0] = 0x8000000080000000;
  v245.i64[1] = 0x8000000080000000;
  __asm { FMOV            V4.4S, #1.0 }
  v247 = vdivq_f32(_Q4, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v243, vabdq_f32(v1352, v1318)), vorrq_s8(vandq_s8(v244, v245), (int8x16_t)v243), v244));
  v248 = (int8x16_t)vsubq_f32(v1346, v1266);
  v1344 = _Q4;
  v249 = vdivq_f32(_Q4, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v243, vabdq_f32(v1346, v1266)), vorrq_s8(vandq_s8(v248, v245), (int8x16_t)v243), v248));
  v1192 = *(float32x4_t *)(a1 + 160);
  v1166 = vuzp1q_s16(v1284, v1275);
  v250 = vmovn_s16(v1166);
  v251 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v250, *(int8x8_t *)v1166.i8)), 0x1FuLL));
  v1289 = (float32x4_t)vbslq_s8(v251, (int8x16_t)vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 144), v1337), v249.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + 144), v1197), v247.f32[0]));
  v252 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v250, *(int8x8_t *)v1289.f32)), 0x1FuLL));
  v1247 = (float32x4_t)vbslq_s8(v252, (int8x16_t)vmulq_n_f32(vsubq_f32(v1192, v1337), v249.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v1192, v1197), v247.f32[0]));
  v253.i32[1] = v1184.i32[1];
  v1215 = *(float32x4_t *)(a1 + 224);
  v1227 = *(float32x4_t *)(a1 + 208);
  v254 = (float32x4_t)vbslq_s8(v252, (int8x16_t)vmulq_lane_f32(vsubq_f32(v1215, v1311), *(float32x2_t *)v249.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v1215, v1184), *(float32x2_t *)v247.f32, 1));
  v1240 = (float32x4_t)vbslq_s8(v251, (int8x16_t)vmulq_lane_f32(vsubq_f32(v1227, v1311), *(float32x2_t *)v249.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v1227, v1184), *(float32x2_t *)v247.f32, 1));
  v1194 = *(float32x4_t *)(v12 + 16);
  v1233 = (float32x4_t)vbslq_s8(v252, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v1194, v1304), v249, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v1194, v1177), v247, 2));
  v255 = (float32x4_t)vbslq_s8(v251, (int8x16_t)vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)v12, v1304), v249, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)v12, v1177), v247, 2));
  v256 = *(float32x4_t *)(v12 + 64);
  v257 = *(float32x4_t *)(v12 + 80);
  v258 = (float32x4_t)vbslq_s8(v251, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v256, v1297), v249, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v256, v1173), v247, 3));
  v259 = (float32x4_t)vbslq_s8(v252, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v257, v1297), v249, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v257, v1173), v247, 3));
  v1211 = *(float32x4_t *)(a1 + 176);
  v1162 = vuzp1q_s16(v1281, v1278);
  v260 = vmovn_s16(v1162);
  v261 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v260, *(int8x8_t *)v1162.i8)), 0x1FuLL));
  v262 = (float32x4_t)vbslq_s8(v261, (int8x16_t)vmulq_n_f32(vsubq_f32(v1211, v1337), v249.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v1211, v1197), v247.f32[0]));
  v263 = *(float32x4_t *)(a1 + 240);
  v264 = *(float32x4_t *)(a1 + 256);
  v265 = (float32x4_t)vbslq_s8(v261, (int8x16_t)vmulq_lane_f32(vsubq_f32(v263, v1311), *(float32x2_t *)v249.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v263, v1184), *(float32x2_t *)v247.f32, 1));
  v266 = *(float32x4_t *)(v12 + 32);
  v267 = *(float32x4_t *)(v12 + 48);
  v268 = (float32x4_t)vbslq_s8(v261, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v266, v1304), v249, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v266, v1177), v247, 2));
  v269 = *(float32x4_t *)(v12 + 96);
  v270 = (float32x4_t)vbslq_s8(v261, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v269, v1297), v249, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v269, v1173), v247, 3));
  v271 = *(float32x4_t *)(a1 + 192);
  v272 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v260, *(int8x8_t *)v270.f32)), 0x1FuLL));
  v273 = (float32x4_t)vbslq_s8(v272, (int8x16_t)vmulq_n_f32(vsubq_f32(v271, v1337), v249.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v271, v1197), v247.f32[0]));
  v274 = (float32x4_t)vbslq_s8(v272, (int8x16_t)vmulq_lane_f32(vsubq_f32(v264, v1311), *(float32x2_t *)v249.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v264, v1184), *(float32x2_t *)v247.f32, 1));
  v275 = (float32x4_t)vbslq_s8(v272, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v267, v1304), v249, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v267, v1177), v247, 2));
  v276 = *(float32x4_t *)(v12 + 112);
  v277 = (float32x4_t)vbslq_s8(v272, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v276, v1297), v249, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v276, v1173), v247, 3));
  *(float *)v253.i32 = ReciprocalTable[BYTE4(DualPartitionBlockInfo)] * ReciprocalTable[BYTE4(DualPartitionBlockInfo)];
  v278 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v274, v274), v273, v273), v275, v275), v277, v277);
  v279 = (float32x4_t)vdupq_lane_s32(v253, 0);
  v280 = (int8x16_t)vcgtq_f32(v279, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1240, v1240), v1289, v1289), v255, v255), v258, v258));
  v281 = (int8x16_t)vcgtq_f32(v279, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v254, v254), v1247, v1247), v1233, v1233), v259, v259));
  v1234 = (int8x16_t)vcgtq_f32(v279, v278);
  v1241 = (int8x16_t)vcgtq_f32(v279, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v265, v265), v262, v262), v268, v268), v270, v270));
  v282 = (int16x8_t)vandq_s8(v1234, v1321);
  v283 = (int16x8_t)vandq_s8(v1241, v1324);
  v1248 = v281;
  v284 = (int16x8_t)vandq_s8(v281, v1315);
  v285 = (int16x8_t)vandq_s8(v280, v1330);
  v286 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v285, v284), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v283, v282), (int8x16_t)xmmword_20631C0C0));
  v286.i16[0] = vaddvq_s16(v286);
  *(int8x8_t *)v286.i8 = vcnt_s8(*(int8x8_t *)v286.i8);
  v286.i16[0] = vaddlv_u8(*(uint8x8_t *)v286.i8);
  v287 = v286.i16[0];
  v1305 = v266;
  v1312 = *(float32x4_t *)v12;
  v1290 = v256;
  v1298 = v271;
  v1261 = (int8x16_t)v263;
  v1198 = v276;
  v1201 = v267;
  if (v286.i32[0] < 2u)
  {
    v293 = *(float32x4_t *)(a1 + 176);
    v299 = *(float32x4_t *)(a1 + 224);
    v294 = *(float32x4_t *)(v12 + 80);
    v295 = (int8x16_t)v1384;
    v297 = (int8x16_t)v1365;
    v296 = (int8x16_t)v1371;
    v292 = *(float32x4_t *)(a1 + 144);
    v301 = *(float32x4_t *)(a1 + 160);
    v300 = *(float32x4_t *)(v12 + 16);
    v298 = *(float32x4_t *)(a1 + 208);
  }
  else
  {
    v288 = (int8x16_t)vcltzq_s32((int32x4_t)v283);
    v289 = (int8x16_t)vcltzq_s32((int32x4_t)v285);
    v290 = (int8x16_t)vcltzq_s32((int32x4_t)v282);
    v291 = (int8x16_t)vcltzq_s32((int32x4_t)v284);
    v292 = *(float32x4_t *)(a1 + 144);
    v293 = *(float32x4_t *)(a1 + 176);
    v294 = *(float32x4_t *)(v12 + 80);
    v1318 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v289, (int8x16_t)v292), (float32x4_t)vandq_s8(v288, (int8x16_t)v1211)), vaddq_f32((float32x4_t)vandq_s8(v291, (int8x16_t)v1192), (float32x4_t)vandq_s8(v290, (int8x16_t)v271))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v289, (int8x16_t)v1227), (float32x4_t)vandq_s8(v288, (int8x16_t)v263)), vaddq_f32((float32x4_t)vandq_s8(v291, (int8x16_t)v1215), (float32x4_t)vandq_s8(v290, (int8x16_t)v264)))), vpaddq_f32(vaddq_f32(vaddq_f32(
                      (float32x4_t)vandq_s8(v289, *(int8x16_t *)v12),
                      (float32x4_t)vandq_s8(v288, (int8x16_t)v266)),
                    vaddq_f32((float32x4_t)vandq_s8(v291, (int8x16_t)v1194), (float32x4_t)vandq_s8(v290, (int8x16_t)v267))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v289, (int8x16_t)v256), (float32x4_t)vandq_s8(v288, (int8x16_t)v269)), vaddq_f32((float32x4_t)vandq_s8(v291, (int8x16_t)v257), (float32x4_t)vandq_s8(v290, (int8x16_t)v276))))), ReciprocalTable[v287]);
    v295 = (int8x16_t)v1384;
    v297 = (int8x16_t)v1365;
    v296 = (int8x16_t)v1371;
    v298 = *(float32x4_t *)(a1 + 208);
    v299 = *(float32x4_t *)(a1 + 224);
    v300 = *(float32x4_t *)(v12 + 16);
    v301 = *(float32x4_t *)(a1 + 160);
  }
  v1338 = vuzp1q_s8((int8x16_t)v1166, (int8x16_t)v1162);
  v302 = (int16x8_t)vandq_s8(v295, v280);
  v303 = (int16x8_t)vandq_s8((int8x16_t)v1377, v1248);
  v304 = (int16x8_t)vandq_s8(v296, v1241);
  v305 = (int16x8_t)vandq_s8(v297, v1234);
  v306 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v302, v303), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v304, v305), (int8x16_t)xmmword_20631C0C0));
  v306.i16[0] = vaddvq_s16(v306);
  *(int8x8_t *)v306.i8 = vcnt_s8(*(int8x8_t *)v306.i8);
  v306.i16[0] = vaddlv_u8(*(uint8x8_t *)v306.i8);
  v307 = v306.i16[0];
  v1254 = *(float32x4_t *)(v12 + 96);
  v1178 = v280;
  if (v306.i32[0] < 2u)
  {
    v312 = *(float32x4_t *)(a1 + 240);
  }
  else
  {
    v308 = (int8x16_t)vcltzq_s32((int32x4_t)v304);
    v309 = (int8x16_t)vcltzq_s32((int32x4_t)v302);
    v310 = (int8x16_t)vcltzq_s32((int32x4_t)v305);
    v311 = (int8x16_t)vcltzq_s32((int32x4_t)v303);
    v312 = *(float32x4_t *)(a1 + 240);
    v1266 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v309, (int8x16_t)v292), (float32x4_t)vandq_s8(v308, (int8x16_t)v293)), vaddq_f32((float32x4_t)vandq_s8(v311, (int8x16_t)v301), (float32x4_t)vandq_s8(v310, (int8x16_t)v271))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v309, (int8x16_t)v298), (float32x4_t)vandq_s8(v308, v1261)), vaddq_f32((float32x4_t)vandq_s8(v311, (int8x16_t)v299), (float32x4_t)vandq_s8(v310, (int8x16_t)v264)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v309, (int8x16_t)v1312), (float32x4_t)vandq_s8(v308, (int8x16_t)v1305)),
                    vaddq_f32((float32x4_t)vandq_s8(v311, (int8x16_t)v300), (float32x4_t)vandq_s8(v310, (int8x16_t)v267))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v309, (int8x16_t)v1290), (float32x4_t)vandq_s8(v308, (int8x16_t)v269)), vaddq_f32((float32x4_t)vandq_s8(v311, (int8x16_t)v294), (float32x4_t)vandq_s8(v310, (int8x16_t)v1198))))), ReciprocalTable[v307]);
  }
  v313 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1352.f32, 0);
  v314 = (int8x16_t)vmulq_n_f32(vsubq_f32(v313, v292), v247.f32[0]);
  v315 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1346.f32, 0);
  v316 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v1338.i8, *(int8x8_t *)v314.i8)), 0x1FuLL));
  v317 = (float32x4_t)vbslq_s8(v316, (int8x16_t)vmulq_n_f32(vsubq_f32(v315, v292), v249.f32[0]), v314);
  v318 = vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v1338.i8, *(int8x8_t *)v314.i8)), 0x1FuLL);
  v319 = (int8x16_t)vcltzq_s32(v318);
  v320 = (float32x4_t)vbslq_s8(v319, (int8x16_t)vmulq_n_f32(vsubq_f32(v315, v301), v249.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v313, v301), v247.f32[0]));
  v321 = (int8x8_t)vextq_s8(v1338, v1338, 8uLL).u64[0];
  v322 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v321, *(int8x8_t *)v318.i8)), 0x1FuLL));
  v323 = (float32x4_t)vbslq_s8(v322, (int8x16_t)vmulq_n_f32(vsubq_f32(v315, v293), v249.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v313, v293), v247.f32[0]));
  v324 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1352.f32, 1);
  v325 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1346.f32, 1);
  v326 = (float32x4_t)vbslq_s8(v322, (int8x16_t)vmulq_lane_f32(vsubq_f32(v325, v312), *(float32x2_t *)v249.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v324, v312), *(float32x2_t *)v247.f32, 1));
  v327 = (float32x4_t)vbslq_s8(v319, (int8x16_t)vmulq_lane_f32(vsubq_f32(v325, v299), *(float32x2_t *)v249.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v324, v299), *(float32x2_t *)v247.f32, 1));
  v328 = (float32x4_t)vbslq_s8(v316, (int8x16_t)vmulq_lane_f32(vsubq_f32(v325, v298), *(float32x2_t *)v249.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v324, v298), *(float32x2_t *)v247.f32, 1));
  v329 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1352, 2);
  v330 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1346, 2);
  v331 = (int8x16_t)v292;
  v332 = (float32x4_t)vbslq_s8(v322, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v330, v1305), v249, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v329, v1305), v247, 2));
  v333 = (float32x4_t)vbslq_s8(v319, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v330, v300), v249, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v329, v300), v247, 2));
  v334 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1352, 3);
  v335 = (float32x4_t)vbslq_s8(v316, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v330, v1312), v249, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v329, v1312), v247, 2));
  v336 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1346, 3);
  v337 = (float32x4_t)vbslq_s8(v316, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v336, v1290), v249, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v334, v1290), v247, 3));
  v338 = (int8x16_t)v294;
  v339 = (float32x4_t)vbslq_s8(v319, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v336, v294), v249, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v334, v294), v247, 3));
  v340 = (float32x4_t)vbslq_s8(v322, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v336, v1254), v249, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v334, v1254), v247, 3));
  v1185 = v321;
  v341 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v321, *(int8x8_t *)v326.f32)), 0x1FuLL));
  v342 = (float32x4_t)vbslq_s8(v341, (int8x16_t)vmulq_n_f32(vsubq_f32(v315, v1298), v249.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v313, v1298), v247.f32[0]));
  v343 = (float32x4_t)vbslq_s8(v341, (int8x16_t)vmulq_lane_f32(vsubq_f32(v325, v264), *(float32x2_t *)v249.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v324, v264), *(float32x2_t *)v247.f32, 1));
  v344 = (float32x4_t)vbslq_s8(v341, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v330, v1201), v249, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v329, v1201), v247, 2));
  v345 = (float32x4_t)vbslq_s8(v341, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v336, v1198), v249, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v334, v1198), v247, 3));
  v346 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v343, v343), v342, v342), v344, v344), v345, v345);
  v347 = (int8x16_t)vcgtq_f32(v279, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v328, v328), v317, v317), v335, v335), v337, v337));
  v348 = (int8x16_t)vcgtq_f32(v279, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v327, v327), v320, v320), v333, v333), v339, v339));
  v349 = (int8x16_t)vcgtq_f32(v279, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v326, v326), v323, v323), v332, v332), v340, v340));
  v350 = (int8x16_t)vcgtq_f32(v279, v346);
  v351 = (int16x8_t)vandq_s8(v350, v1321);
  v352 = (int16x8_t)vandq_s8(v349, v1324);
  v353 = (int16x8_t)vandq_s8(v348, v1315);
  v354 = (int16x8_t)vandq_s8(v347, v1330);
  v355 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v354, v353), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v352, v351), (int8x16_t)xmmword_20631C0C0));
  v355.i16[0] = vaddvq_s16(v355);
  *(int8x8_t *)v355.i8 = vcnt_s8(*(int8x8_t *)v355.i8);
  v355.i16[0] = vaddlv_u8(*(uint8x8_t *)v355.i8);
  v356 = v355.i16[0];
  if (v355.i32[0] < 2u)
  {
    v362 = v331;
    v364 = *(int8x16_t *)(a1 + 176);
    v366 = *(int8x16_t *)(a1 + 224);
    v369 = (int8x16_t)v1384;
    v371 = (int8x16_t)v1365;
    v370 = (int8x16_t)v1371;
    v367 = *(int8x16_t *)(a1 + 208);
    v372 = v338;
    v368 = *(int8x16_t *)(a1 + 240);
  }
  else
  {
    v357 = (int8x16_t)vcltzq_s32((int32x4_t)v352);
    v358 = (int8x16_t)vcltzq_s32((int32x4_t)v354);
    v359 = (int8x16_t)vcltzq_s32((int32x4_t)v351);
    v360 = (int8x16_t)vcltzq_s32((int32x4_t)v353);
    v361 = (float32x4_t)vandq_s8(v360, (int8x16_t)v301);
    v362 = v331;
    v363 = (float32x4_t)vandq_s8(v358, v331);
    v364 = *(int8x16_t *)(a1 + 176);
    v365 = (int8x16_t)v300;
    v366 = *(int8x16_t *)(a1 + 224);
    v367 = *(int8x16_t *)(a1 + 208);
    v368 = *(int8x16_t *)(a1 + 240);
    v1352 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32(v363, (float32x4_t)vandq_s8(v357, (int8x16_t)v1211)), vaddq_f32(v361, (float32x4_t)vandq_s8(v359, (int8x16_t)v1298))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v358, (int8x16_t)v1227), (float32x4_t)vandq_s8(v357, v1261)), vaddq_f32((float32x4_t)vandq_s8(v360, (int8x16_t)v1215), (float32x4_t)vandq_s8(v359, (int8x16_t)v264)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v358, (int8x16_t)v1312), (float32x4_t)vandq_s8(v357, (int8x16_t)v1305)), vaddq_f32((float32x4_t)vandq_s8(v360, v365), (float32x4_t)vandq_s8(v359, (int8x16_t)v1201))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v358, (int8x16_t)v1290),
                      (float32x4_t)vandq_s8(v357, (int8x16_t)v1254)),
                    vaddq_f32((float32x4_t)vandq_s8(v360, v338), (float32x4_t)vandq_s8(v359, (int8x16_t)v1198))))),
              ReciprocalTable[v356]);
    v369 = (int8x16_t)v1384;
    v371 = (int8x16_t)v1365;
    v370 = (int8x16_t)v1371;
    v372 = v338;
  }
  v373 = (int16x8_t)vorrq_s8(v350, v1234);
  v374 = (int16x8_t)vorrq_s8(v349, v1241);
  v375 = (int16x8_t)vorrq_s8(v348, v1248);
  v376 = (int16x8_t)vorrq_s8(v347, v1178);
  v377 = (int16x8_t)vandq_s8(v369, v347);
  v378 = (int16x8_t)vandq_s8((int8x16_t)v1377, v348);
  v379 = (int16x8_t)vandq_s8(v370, v349);
  v380 = (int16x8_t)vandq_s8(v371, v350);
  v381 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v377, v378), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v379, v380), (int8x16_t)xmmword_20631C0C0));
  v381.i16[0] = vaddvq_s16(v381);
  *(int8x8_t *)v381.i8 = vcnt_s8(*(int8x8_t *)v381.i8);
  v381.i16[0] = vaddlv_u8(*(uint8x8_t *)v381.i8);
  v382 = v381.i16[0];
  if (v381.i32[0] >= 2u)
  {
    v383 = (int8x16_t)vcltzq_s32((int32x4_t)v379);
    v384 = (int8x16_t)vcltzq_s32((int32x4_t)v377);
    v385 = (int8x16_t)vcltzq_s32((int32x4_t)v380);
    v386 = (int8x16_t)vcltzq_s32((int32x4_t)v378);
    v1346 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v384, v362), (float32x4_t)vandq_s8(v383, v364)), vaddq_f32((float32x4_t)vandq_s8(v386, (int8x16_t)v1192), (float32x4_t)vandq_s8(v385, (int8x16_t)v1298))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v384, v367), (float32x4_t)vandq_s8(v383, v368)), vaddq_f32((float32x4_t)vandq_s8(v386, v366), (float32x4_t)vandq_s8(v385, (int8x16_t)v264)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v384, (int8x16_t)v1312), (float32x4_t)vandq_s8(v383, (int8x16_t)v1305)), vaddq_f32((float32x4_t)vandq_s8(v386, (int8x16_t)v1194), (float32x4_t)vandq_s8(v385, (int8x16_t)v1201))), vaddq_f32(
                    vaddq_f32((float32x4_t)vandq_s8(v384, (int8x16_t)v1290), (float32x4_t)vandq_s8(v383, (int8x16_t)v1254)), vaddq_f32((float32x4_t)vandq_s8(v386, v372), (float32x4_t)vandq_s8(v385, (int8x16_t)v1198))))), ReciprocalTable[v382]);
  }
  v387 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v376, v375), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v374, v373), (int8x16_t)xmmword_20631C0C0));
  v387.i16[0] = vaddvq_s16(v387);
  *(int8x8_t *)v387.i8 = vcnt_s8(*(int8x8_t *)v387.i8);
  v387.i16[0] = vaddlv_u8(*(uint8x8_t *)v387.i8);
  v388 = GetDualPartitionBlockInfo(v387.u32[0], v241);
  v392 = v388;
  v393 = HIBYTE(v388);
  v394 = *(unsigned __int16 *)(a1 + 784);
  v395 = (int8x16_t)vcgezq_s32(v1365);
  v1291 = (int8x16_t)vcgezq_s32(v1371);
  v396 = (float32x4_t)vcgezq_s32(v1377);
  v1255 = (int8x16_t)vcgezq_s32(v1384);
  v1262 = (int8x16_t)v396;
  if ((v394 & ~(_DWORD)v7) == 0)
  {
    v399 = (int8x16_t)xmmword_20631C090;
    v398 = (int8x16_t)xmmword_20631C080;
    v397 = v1318;
    v400 = v1266;
    v401 = v1352;
LABEL_47:
    v405 = v1346;
    goto LABEL_48;
  }
  v397 = v1318;
  v399 = (int8x16_t)xmmword_20631C090;
  v398 = (int8x16_t)xmmword_20631C080;
  v400 = v1266;
  v401 = v1352;
  if (!*(_BYTE *)(a1 + 135))
  {
    if (v1318.f32[3] >= v1352.f32[3])
    {
      v401 = 0uLL;
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  v402 = vsubq_f32(v1352, v1318);
  v396.i32[0] = v402.i32[3];
  if (v402.f32[3] != 0.0)
    goto LABEL_40;
  v389.i32[0] = v394 & ~(_DWORD)v7;
  v403 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v389.f32);
  v403.i16[0] = vaddlv_u8(v403);
  v404 = v403.i32[0];
  v391 = (float32x4_t)v1315;
  v390 = vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vandq_s8(*(int8x16_t *)(v12 + 448), v1330), (int16x8_t)vandq_s8(*(int8x16_t *)(v12 + 464), v1315)), (int8x16_t)xmmword_20631C0D0);
  v389 = (float32x4_t)vorrq_s8(v390, vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vandq_s8(*(int8x16_t *)(v12 + 480), v1324), (int16x8_t)vandq_s8(*(int8x16_t *)(v12 + 496), v1321)), (int8x16_t)xmmword_20631C0C0));
  v389.i16[0] = vaddvq_s16((int16x8_t)v389);
  *(int8x8_t *)v389.f32 = vcnt_s8(*(int8x8_t *)v389.f32);
  v389.i16[0] = vaddlv_u8(*(uint8x8_t *)v389.f32);
  if (15 - v404 == v389.i32[0])
  {
LABEL_45:
    v397 = 0uLL;
    goto LABEL_47;
  }
  v397 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
  v401 = v397;
LABEL_40:
  v405 = v1346;
  v389.i32[0] = 0;
  v396 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v389, v396), 0);
  v406 = (float32x4_t)vbslq_s8((int8x16_t)v396, (int8x16_t)vnegq_f32(v402), (int8x16_t)v402);
  v407 = (float32x4_t)vbslq_s8((int8x16_t)v396, (int8x16_t)v401, (int8x16_t)v397);
  *(float *)v390.i32 = v407.f32[3] / v406.f32[3];
  v408 = vmlsq_lane_f32(v407, v406, *(float32x2_t *)v390.i8, 0);
  v389 = (float32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v408, (float32x4_t)vdupq_n_s32(0xBB800000)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F808081u), v408));
  if ((vminvq_u32((uint32x4_t)v389) & 0x80000000) != 0)
  {
    v401 = (float32x4_t)vbslq_s8((int8x16_t)v396, (int8x16_t)v397, (int8x16_t)v401);
    v396.i32[1] = v1344.i32[1];
    v397 = vminnmq_f32(vmaxnmq_f32(v408, (float32x4_t)0), v1344);
  }
  else
  {
    v409.i64[0] = 0x7F0000007FLL;
    v409.i64[1] = 0x7F0000007FLL;
    v410 = vandq_s8((int8x16_t)v1284, v409);
    v411 = vandq_s8((int8x16_t)v1275, v409);
    v412 = vandq_s8((int8x16_t)v1281, v409);
    v413 = vandq_s8((int8x16_t)v1278, v409);
    v414 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v1338.i8, *(int8x8_t *)v410.i8)), 0x1FuLL)), v409, v1134);
    v415 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v1185, *(int8x8_t *)v410.i8)), 0x1FuLL)), v409, v1137);
    v416 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v1338.i8, *(int8x8_t *)v410.i8)), 0x1FuLL)), v409, v1139);
    v417 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v1185, *(int8x8_t *)v410.i8)), 0x1FuLL)), v409, v1142);
    v418 = vmaxnmq_f32(v416, v417);
    v419 = vmaxnmq_f32(v414, v415);
    v420 = vbslq_s8((int8x16_t)vcgtq_f32(v415, v414), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
    v421 = (int8x16_t)vmaxnmq_f32(v418, v419);
    v422 = vbslq_s8((int8x16_t)vcgtq_f32(v419, v418), v420, vbslq_s8((int8x16_t)vcgtq_f32(v417, v416), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
    v420.i64[0] = vextq_s8(v421, v421, 8uLL).u64[0];
    *(float32x2_t *)v416.f32 = vmaxnm_f32(*(float32x2_t *)v421.i8, *(float32x2_t *)v420.i8);
    v1393 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v420.i8, *(float32x2_t *)v421.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v422, v422, 8uLL), *(int8x8_t *)v422.i8);
    v423 = *(float32x4_t *)(v109
                          + 16
                          * *(unsigned int *)((unint64_t)&v1393 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                               * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v416.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v416.f32, 1))) & 1))));
    v424 = *(float32x4_t **)(a1 + 32);
    v425 = vsubq_f32(v1181, v423);
    if (v424)
      v426 = *v424;
    else
      v426 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    v454 = vmulq_f32(v425, v426);
    v455 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v423.f32, 0);
    v391 = vsubq_f32(*(float32x4_t *)(a1 + 144), v455);
    v456 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v423.f32, 1);
    v457 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v423, 2);
    v458 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v423, 3);
    v397 = v423;
    v459 = (float32x4_t)vorrq_s8(vandq_s8(v395, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + 256), v456), *(float32x2_t *)v454.f32, 1), vsubq_f32(*(float32x4_t *)(a1 + 192), v455), v454.f32[0]), vsubq_f32(*(float32x4_t *)(v12 + 48), v457), v454, 2), vsubq_f32(*(float32x4_t *)(v12 + 112), v458), v454, 3)), v413);
    v396 = (float32x4_t)vorrq_s8(vandq_s8(v1262, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + 224), v456), *(float32x2_t *)v454.f32, 1), vsubq_f32(*(float32x4_t *)(a1 + 160), v455), v454.f32[0]), vsubq_f32(*(float32x4_t *)(v12 + 16), v457), v454, 2), vsubq_f32(*(float32x4_t *)(v12 + 80), v458), v454, 3)), v411);
    v460 = (float32x4_t)vorrq_s8(vandq_s8(v1291, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + 240), v456), *(float32x2_t *)v454.f32, 1), vsubq_f32(*(float32x4_t *)(a1 + 176), v455), v454.f32[0]), vsubq_f32(*(float32x4_t *)(v12 + 32), v457), v454, 2), vsubq_f32(*(float32x4_t *)(v12 + 96), v458), v454, 3)), v412);
    v461 = (float32x4_t)vorrq_s8(vandq_s8(v1255, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + 208), v456), *(float32x2_t *)v454.f32, 1), v391, v454.f32[0]), vsubq_f32(*(float32x4_t *)v12, v457), v454, 2), vsubq_f32(*(float32x4_t *)(v12 + 64), v458), v454, 3)), v410);
    v462 = vmaxnmq_f32(v461, v460);
    v463 = vmaxnmq_f32(v396, v459);
    v464 = vbslq_s8((int8x16_t)vcgtq_f32(v460, v461), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
    v389 = vmaxnmq_f32(v462, v463);
    v465 = vbslq_s8((int8x16_t)vcgtq_f32(v463, v462), vbslq_s8((int8x16_t)vcgtq_f32(v459, v396), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v464);
    v396.i64[0] = vextq_s8((int8x16_t)v389, (int8x16_t)v389, 8uLL).u64[0];
    *(float32x2_t *)v459.f32 = vmaxnm_f32(*(float32x2_t *)v389.f32, *(float32x2_t *)v396.f32);
    *(int8x8_t *)v465.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v396.f32, *(float32x2_t *)v389.f32), (int8x8_t)*(_OWORD *)&vextq_s8(v465, v465, 8uLL), *(int8x8_t *)v465.i8);
    *(int8x8_t *)v396.f32 = vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v459.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v459.f32, 1)));
    v1392 = v465.i64[0];
    v401 = *(float32x4_t *)(v109
                          + 16
                          * *(unsigned int *)((unint64_t)&v1392 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v396.i8[0] & 1))));
    if ((vmovn_s32(vcgtq_f32(v401, v423)).i8[6] & 1) != 0)
      v397.i32[3] = 0;
    else
      v401.i32[3] = 0;
    v405 = v1346;
  }
LABEL_48:
  v427 = v394 & v7;
  if (!v427)
  {
LABEL_53:
    v432 = a2;
    goto LABEL_75;
  }
  if (!*(_BYTE *)(a1 + 135))
  {
    v432 = a2;
    if (v400.f32[3] >= v405.f32[3])
      v405 = 0uLL;
    else
      v400 = 0uLL;
    goto LABEL_75;
  }
  v428 = vsubq_f32(v405, v400);
  v396.i32[0] = v428.i32[3];
  if (v428.f32[3] == 0.0)
  {
    v389.i32[0] = v427;
    v429 = vcnt_s8(*(int8x8_t *)v389.f32);
    v429.i16[0] = vaddlv_u8((uint8x8_t)v429);
    v430 = v429.i32[0];
    v429.i32[0] = v7;
    v431 = (uint8x8_t)vcnt_s8(v429);
    v431.i16[0] = vaddlv_u8(v431);
    if (v431.i32[0] - 1 == v430)
    {
      v400 = 0uLL;
      goto LABEL_53;
    }
    v400 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
    v405 = v400;
  }
  v432 = a2;
  if (v428.f32[3] < 0.0)
  {
    v433 = v400;
    v428 = vnegq_f32(v428);
    v396.i32[0] = v428.i32[3];
    v400 = v405;
    v405 = v433;
  }
  v396.f32[0] = v400.f32[3] / v396.f32[0];
  v434 = vmlsq_lane_f32(v400, v428, *(float32x2_t *)v396.f32, 0);
  if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v434, (float32x4_t)vdupq_n_s32(0xBB800000)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F808081u), v434))) & 0x80000000) != 0)
  {
    v400 = vminnmq_f32(vmaxnmq_f32(v434, (float32x4_t)0), v1344);
  }
  else
  {
    v435.i64[0] = 0x7F0000007FLL;
    v435.i64[1] = 0x7F0000007FLL;
    v436 = vandq_s8(v1291, v435);
    v437 = vandq_s8(v1255, v435);
    v438 = vandq_s8(v395, v435);
    v439 = vandq_s8(v1262, v435);
    v440 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1275, v1155), v439);
    v441 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1278, v1145), v438);
    v442 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1284, v1151), v437);
    v443 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1281, v1148), v436);
    v444 = vmaxnmq_f32(v442, v443);
    v445 = vmaxnmq_f32(v440, v441);
    v446 = vbslq_s8((int8x16_t)vcgtq_f32(v443, v442), v399, v398);
    v447 = vbslq_s8((int8x16_t)vcgtq_f32(v441, v440), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
    v448 = (int8x16_t)vmaxnmq_f32(v444, v445);
    v449 = vbslq_s8((int8x16_t)vcgtq_f32(v445, v444), v447, v446);
    v447.i64[0] = vextq_s8(v448, v448, 8uLL).u64[0];
    *(float32x2_t *)v440.f32 = vmaxnm_f32(*(float32x2_t *)v448.i8, *(float32x2_t *)v447.i8);
    v1391 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v447.i8, *(float32x2_t *)v448.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v449, v449, 8uLL), *(int8x8_t *)v449.i8);
    v400 = *(float32x4_t *)(v109
                          + 16
                          * *(unsigned int *)((unint64_t)&v1391 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                               * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v440.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v440.f32, 1))) & 1))));
    v450 = *(float32x4_t **)(a1 + 32);
    v451 = vsubq_f32(v1159, v400);
    v452 = v401;
    if (v450)
      v453 = *v450;
    else
      v453 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    v466 = vmulq_f32(v451, v453);
    v467 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v400.f32, 0);
    v391 = vsubq_f32(*(float32x4_t *)(a1 + 144), v467);
    v468 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v400.f32, 1);
    v469 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v400, 2);
    v470 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v400, 3);
    v471 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1278, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + 256), v468), *(float32x2_t *)v466.f32, 1), vsubq_f32(*(float32x4_t *)(a1 + 192), v467), v466.f32[0]), vsubq_f32(*(float32x4_t *)(v12 + 48), v469), v466, 2), vsubq_f32(*(float32x4_t *)(v12 + 112), v470), v466, 3)), v438);
    v472 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1275, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + 224), v468), *(float32x2_t *)v466.f32, 1), vsubq_f32(*(float32x4_t *)(a1 + 160), v467), v466.f32[0]), vsubq_f32(*(float32x4_t *)(v12 + 16), v469), v466, 2), vsubq_f32(*(float32x4_t *)(v12 + 80), v470), v466, 3)), v439);
    v473 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1281, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + 240), v468), *(float32x2_t *)v466.f32, 1), vsubq_f32(*(float32x4_t *)(a1 + 176), v467), v466.f32[0]), vsubq_f32(*(float32x4_t *)(v12 + 32), v469), v466, 2), vsubq_f32(*(float32x4_t *)(v12 + 96), v470), v466, 3)), v436);
    v474 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1284, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + 208), v468), *(float32x2_t *)v466.f32, 1), v391, v466.f32[0]), vsubq_f32(*(float32x4_t *)v12, v469), v466, 2), vsubq_f32(*(float32x4_t *)(v12 + 64), v470), v466, 3)), v437);
    v475 = vmaxnmq_f32(v474, v473);
    v476 = vmaxnmq_f32(v472, v471);
    v477 = vbslq_s8((int8x16_t)vcgtq_f32(v473, v474), v399, v398);
    v478 = vbslq_s8((int8x16_t)vcgtq_f32(v471, v472), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
    v479 = (int8x16_t)vmaxnmq_f32(v475, v476);
    v480 = vbslq_s8((int8x16_t)vcgtq_f32(v476, v475), v478, v477);
    v478.i64[0] = vextq_s8(v479, v479, 8uLL).u64[0];
    *(float32x2_t *)v471.f32 = vmaxnm_f32(*(float32x2_t *)v479.i8, *(float32x2_t *)v478.i8);
    v1390 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v478.i8, *(float32x2_t *)v479.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v480, v480, 8uLL), *(int8x8_t *)v480.i8);
    v405 = *(float32x4_t *)(v109
                          + 16
                          * *(unsigned int *)((unint64_t)&v1390 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                               * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v471.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v471.f32, 1))) & 1))));
    if ((vmovn_s32(vcgtq_f32(v405, v400)).i8[6] & 1) != 0)
      v400.i32[3] = 0;
    else
      v405.i32[3] = 0;
    v401 = v452;
  }
LABEL_75:
  v1413 = 0u;
  v1412 = 0u;
  v1411 = 0u;
  v1410 = 0u;
  v1409 = 0u;
  v1408 = 0u;
  v1407 = 0u;
  v1406 = 0u;
  v1405 = 0u;
  v1404 = 0u;
  v481 = (v388 >> 25) & 0xF;
  if (v393 <= 1)
    v482 = 1;
  else
    v482 = HIBYTE(v388);
  v483 = ReciprocalTable[v393];
  v484 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v397, (float32x4_t)0), v1344), (float)v482));
  v485 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v401, (float32x4_t)0), v1344), (float)v482));
  v486 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v400, (float32x4_t)0), v1344), (float)v482));
  v487 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v405, (float32x4_t)0), v1344), (float)v482));
  if (v481 > 4)
  {
    v491 = vsubq_f32(v484, v485);
    v492 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v491, 2), vaddq_f32(v491, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v491.f32, 1)));
    if (fabsf(v492.f32[0]) <= 1.0)
    {
      v493 = __clz(__rbit32(v393 + 1));
      v494 = ((v393 + 1) >> v493);
      v495 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v484), (int16x8_t)vcvtq_s32_f32(v485)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
      if (v493 && (_DWORD)v494 != 1)
      {
        v496 = (uint16x8_t)vsubq_s16(vdupq_n_s16(v393), (int16x8_t)v495);
        if ((_DWORD)v494 == 3)
          v497 = 21846;
        else
          v497 = 13108;
        v498 = (int8x16_t)vdupq_n_s16(v497);
        v499 = (int16x8_t)vminq_u16((uint16x8_t)v495, v496);
        v500 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v499.i8, *(uint16x4_t *)v498.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v499, (uint16x8_t)v498), 0x10uLL);
        v498.i64[0] = 0x1000100010001;
        v498.i64[1] = 0x1000100010001;
        v495 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v499, v500, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((v393 + 1) >> v493))), (uint16x8_t)vdupq_n_s16(v493)), vaddq_s16(v500, v500)), vbicq_s8(v498, (int8x16_t)vceqq_s16(v499, (int16x8_t)v495)));
      }
      v501 = v494 - 6;
      _ZF = (_DWORD)v494 == 1;
      v502 = -8;
      if (!_ZF)
        v502 = v501;
      v503 = GetUnquantizationData_UnquantizationInfo[3 * v493 + v502];
      v504 = (int16x8_t)vshlq_u16((uint16x8_t)v495, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v503) & 7)));
      v505 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v503)), (int8x16_t)v495);
      v506 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v505, 1uLL), vdupq_n_s16((v503 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v503 >> 37) & 7)));
      v507 = vandq_s8((int8x16_t)vdupq_n_s16((v503 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v505, 0xFuLL)));
      v508 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v506, v504, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v503 >> 40))), v507);
      v506.i64[0] = 0x80008000800080;
      v506.i64[1] = 0x80008000800080;
      v509 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v508, 2uLL), vandq_s8(v507, (int8x16_t)v506));
      v391 = (float32x4_t)vdupq_n_s32(0x4B400000u);
      v510 = (float32x4_t)vdupq_n_s32(0xCB400000);
      v511 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v509.i8), (int8x16_t)v391), v510), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v509), (int8x16_t)v391), v510));
      v492 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v511, 2), vaddq_f32(v511, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v511.f32, 1)));
    }
    v391.i32[0] = 0;
    v512 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v492, v391), 0);
    v513 = (float32x4_t)vbslq_s8(v512, (int8x16_t)v485, (int8x16_t)v484);
    v514 = (float32x4_t)vbslq_s8(v512, (int8x16_t)v484, (int8x16_t)v485);
    v515 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v513), (int16x8_t)vcvtq_s32_f32(v514));
    *(int8x8_t *)v515.i8 = vmovn_s16(v515);
    v516 = ShuffleColorEndpointPair_mapTable[v481];
    v517 = vqtbl1_s8((int8x16_t)v515, v516);
    v518 = vsubq_f32(v486, v487);
    v519 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v518, 2), vaddq_f32(v518, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v518.f32, 1)));
    if (fabsf(v519.f32[0]) <= 1.0)
    {
      v520 = __clz(__rbit32(v393 + 1));
      v521 = ((v393 + 1) >> v520);
      v522 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v486), (int16x8_t)vcvtq_s32_f32(v487)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
      if (v520 && (_DWORD)v521 != 1)
      {
        v523 = (uint16x8_t)vsubq_s16(vdupq_n_s16(v393), (int16x8_t)v522);
        if ((_DWORD)v521 == 3)
          v524 = 21846;
        else
          v524 = 13108;
        v525 = (int8x16_t)vdupq_n_s16(v524);
        v526 = (int16x8_t)vminq_u16((uint16x8_t)v522, v523);
        v527 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v526.i8, *(uint16x4_t *)v525.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v526, (uint16x8_t)v525), 0x10uLL);
        v525.i64[0] = 0x1000100010001;
        v525.i64[1] = 0x1000100010001;
        v522 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v526, v527, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((v393 + 1) >> v520))), (uint16x8_t)vdupq_n_s16(v520)), vaddq_s16(v527, v527)), vbicq_s8(v525, (int8x16_t)vceqq_s16(v526, (int16x8_t)v522)));
      }
      v528 = v521 - 6;
      _ZF = (_DWORD)v521 == 1;
      v529 = -8;
      if (!_ZF)
        v529 = v528;
      v530 = GetUnquantizationData_UnquantizationInfo[3 * v520 + v529];
      v531 = (int16x8_t)vshlq_u16((uint16x8_t)v522, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v530) & 7)));
      v532 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v530)), (int8x16_t)v522);
      v533 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v532, 1uLL), vdupq_n_s16((v530 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v530 >> 37) & 7)));
      v534 = vandq_s8((int8x16_t)vdupq_n_s16((v530 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v532, 0xFuLL)));
      v535 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v533, v531, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v530 >> 40))), v534);
      v533.i64[0] = 0x80008000800080;
      v533.i64[1] = 0x80008000800080;
      v536 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v535, 2uLL), vandq_s8(v534, (int8x16_t)v533));
      v537 = (int8x16_t)vdupq_n_s32(0x4B400000u);
      v538 = (float32x4_t)vdupq_n_s32(0xCB400000);
      v539 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v536.i8), v537), v538), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v536), v537), v538));
      v519 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v539, 2), vaddq_f32(v539, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v539.f32, 1)));
    }
    v540 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v519, v391), 0);
    v541 = (float32x4_t)vbslq_s8(v540, (int8x16_t)v487, (int8x16_t)v486);
    v542 = (float32x4_t)vbslq_s8(v540, (int8x16_t)v486, (int8x16_t)v487);
    v543 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v541), (int16x8_t)vcvtq_s32_f32(v542));
    *(int8x8_t *)v543.i8 = vmovn_s16(v543);
    v1404 = v1384;
    v1405 = v1377;
    v1406 = v1371;
    v1407 = v1365;
    v1267 = vmulq_n_f32(v513, v483);
    v1271 = vmulq_n_f32(v541, v483);
    v1408 = v1267;
    v1409 = vmlaq_n_f32(vnegq_f32(v1267), v514, v483);
    *(int8x8_t *)v1410.i8 = v517;
    v1411 = v1271;
    v1299 = vmlaq_n_f32(vnegq_f32(v1271), v542, v483);
    v1306 = v1409;
    v1412 = v1299;
    *(int8x8_t *)&v1413 = vqtbl1_s8((int8x16_t)v543, v516);
  }
  else
  {
    v1404 = v1384;
    v1405 = v1377;
    v1406 = v1371;
    v1407 = v1365;
    v1267 = vmulq_n_f32(v484, v483);
    v1271 = vmulq_n_f32(v486, v483);
    v1408 = v1267;
    v1409 = vmlaq_n_f32(vnegq_f32(v1267), v485, v483);
    v488 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v484), (int16x8_t)vcvtq_s32_f32(v485));
    *(int8x8_t *)v488.i8 = vmovn_s16(v488);
    v489 = ShuffleColorEndpointPair_mapTable[v481];
    *(int8x8_t *)v1410.i8 = vqtbl1_s8((int8x16_t)v488, v489);
    v1411 = v1271;
    v1299 = vmlaq_n_f32(vnegq_f32(v1271), v487, v483);
    v1306 = v1409;
    v1412 = v1299;
    v490 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v486), (int16x8_t)vcvtq_s32_f32(v487));
    *(int8x8_t *)v490.i8 = vmovn_s16(v490);
    *(int8x8_t *)&v1413 = vqtbl1_s8((int8x16_t)v490, v489);
  }
  FindWeights_4x4(a1, (uint64_t)&v1404, (v388 >> 25) & 0xF, v1403);
  v1347 = v1403[2];
  v1353 = v1403[3];
  v1319 = v1403[1];
  v1313 = v1403[0];
  v1405 = (int32x4_t)v1315;
  v1404 = (int32x4_t)v1330;
  v1406 = (int32x4_t)v1324;
  v1407 = (int32x4_t)v1321;
  result = FindWeights_4x4(a1, (uint64_t)&v1404, (v392 >> 25) & 0xF, (float32x4_t *)&v1399);
  v546 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v1338.i8, v545)), 0x1FuLL));
  v547 = (float32x4_t)vbslq_s8(v546, v1399, (int8x16_t)v1313);
  v548 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v1338.i8, *(int8x8_t *)v546.i8)), 0x1FuLL));
  v549 = (float32x4_t)vbslq_s8(v548, v1400, (int8x16_t)v1319);
  v550 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v1185, *(int8x8_t *)v548.i8)), 0x1FuLL));
  v551 = (float32x4_t)vbslq_s8(v550, v1401, (int8x16_t)v1347);
  v552 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v1185, *(int8x8_t *)v550.i8)), 0x1FuLL)), v1402, (int8x16_t)v1353);
  v553 = (float32x4_t)vorrq_s8(vandq_s8(v1255, v1399), vandq_s8((int8x16_t)v1284, (int8x16_t)v1313));
  v554 = (float32x4_t)vorrq_s8(vandq_s8(v1262, v1400), vandq_s8((int8x16_t)v1275, (int8x16_t)v1319));
  v555 = (float32x4_t)vorrq_s8(vandq_s8(v1291, v1401), vandq_s8((int8x16_t)v1281, (int8x16_t)v1347));
  v556 = (float32x4_t)vorrq_s8(vandq_s8(v395, v1402), vandq_s8((int8x16_t)v1278, (int8x16_t)v1353));
  v557 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1267.f32, 0);
  v558 = vmlaq_n_f32(v557, v552, v1306.f32[0]);
  v559 = vmlaq_n_f32(v557, v551, v1306.f32[0]);
  v560 = vmlaq_n_f32(v557, v549, v1306.f32[0]);
  v1331 = (int8x16_t)v557;
  v561 = vmlaq_n_f32(v557, v547, v1306.f32[0]);
  v562 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1271.f32, 0);
  v563 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1267.f32, 1);
  v1256 = vmlaq_n_f32(v562, v556, v1299.f32[0]);
  v564 = vmlaq_lane_f32(v563, v552, *(float32x2_t *)v1306.f32, 1);
  v565 = vmlaq_lane_f32(v563, v551, *(float32x2_t *)v1306.f32, 1);
  v566 = vmlaq_lane_f32(v563, v549, *(float32x2_t *)v1306.f32, 1);
  v1322 = (int8x16_t)v563;
  v567 = vmlaq_lane_f32(v563, v547, *(float32x2_t *)v1306.f32, 1);
  v568 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1271.f32, 1);
  v1249 = vmlaq_lane_f32(v568, v556, *(float32x2_t *)v1299.f32, 1);
  v569 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1267, 2);
  v570 = vmlaq_laneq_f32(v569, v552, v1306, 2);
  v571 = vmlaq_laneq_f32(v569, v551, v1306, 2);
  v572 = vmlaq_laneq_f32(v569, v549, v1306, 2);
  v1292 = (int8x16_t)v569;
  v573 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1271, 2);
  v574 = vmlaq_laneq_f32(v569, v547, v1306, 2);
  v1242 = vmlaq_laneq_f32(v573, v556, v1299, 2);
  v575 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1267, 3);
  v576 = vmlaq_laneq_f32(v575, v552, v1306, 3);
  v577 = vmlaq_laneq_f32(v575, v551, v1306, 3);
  v578 = vmlaq_laneq_f32(v575, v549, v1306, 3);
  v1268 = (int8x16_t)v575;
  v579 = vmlaq_laneq_f32(v575, v547, v1306, 3);
  v580 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1271, 3);
  v1235 = vmlaq_laneq_f32(v580, v556, v1299, 3);
  v581 = vmlaq_n_f32(v562, v555, v1299.f32[0]);
  v1216 = vmlaq_lane_f32(v568, v555, *(float32x2_t *)v1299.f32, 1);
  v1222 = vmlaq_laneq_f32(v573, v555, v1299, 2);
  v1228 = vmlaq_laneq_f32(v580, v555, v1299, 3);
  v582 = vmlaq_n_f32(v562, v554, v1299.f32[0]);
  v583 = vmlaq_lane_f32(v568, v554, *(float32x2_t *)v1299.f32, 1);
  v584 = vmlaq_laneq_f32(v573, v554, v1299, 2);
  v1219 = vmlaq_laneq_f32(v580, v554, v1299, 3);
  v1325 = (int8x16_t)v562;
  v585 = vmlaq_n_f32(v562, v553, v1299.f32[0]);
  v1316 = (int8x16_t)v568;
  v586 = vmlaq_lane_f32(v568, v553, *(float32x2_t *)v1299.f32, 1);
  v1272 = (int8x16_t)v573;
  v587 = vmlaq_laneq_f32(v573, v553, v1299, 2);
  v1263 = (int8x16_t)v580;
  v588 = vmlaq_laneq_f32(v580, v553, v1299, 3);
  v1212 = *(float32x4_t *)(a1 + 144);
  v589 = vsubq_f32(v561, v1212);
  v1202 = *(float32x4_t *)(a1 + 160);
  v590 = vsubq_f32(v560, v1202);
  v1195 = *(float32x4_t *)(a1 + 176);
  v591 = vsubq_f32(v559, v1195);
  v1186 = *(float32x4_t *)(a1 + 192);
  v592 = vsubq_f32(v558, v1186);
  v1205 = *(float32x4_t *)(a1 + 208);
  v593 = vsubq_f32(v567, v1205);
  v1199 = *(float32x4_t *)(a1 + 224);
  v594 = vsubq_f32(v566, v1199);
  v1189 = *(float32x4_t *)(a1 + 240);
  v595 = vsubq_f32(v565, v1189);
  v1179 = *(float32x4_t *)(a1 + 256);
  v596 = vsubq_f32(v564, v1179);
  v597 = vsubq_f32(v574, *(float32x4_t *)v12);
  v1182 = *(float32x4_t *)(v12 + 16);
  v598 = vsubq_f32(v572, v1182);
  v1170 = *(float32x4_t *)(v12 + 32);
  v599 = vsubq_f32(v571, v1170);
  v1167 = *(float32x4_t *)(v12 + 48);
  v600 = vsubq_f32(v570, v1167);
  v1174 = *(float32x4_t *)(v12 + 64);
  v601 = vsubq_f32(v579, v1174);
  v1163 = *(float32x4_t *)(v12 + 80);
  v602 = vsubq_f32(v578, v1163);
  v1160 = *(float32x4_t *)(v12 + 96);
  v603 = vsubq_f32(v577, v1160);
  v1156 = *(float32x4_t *)(v12 + 112);
  v604 = vsubq_f32(v576, v1156);
  v605 = *(float32x2_t **)(a1 + 32);
  v606 = vmulq_f32(v592, v592);
  v607 = vmulq_f32(v591, v591);
  v608 = vmulq_f32(v590, v590);
  v609 = vmulq_f32(v589, v589);
  v610 = vmulq_f32(v596, v596);
  v611 = vmulq_f32(v595, v595);
  v612 = vmulq_f32(v594, v594);
  v613 = vmulq_f32(v593, v593);
  v614 = vmulq_f32(v600, v600);
  v615 = vmulq_f32(v599, v599);
  v616 = vmulq_f32(v598, v598);
  v617 = vmulq_f32(v597, v597);
  v618 = vmulq_f32(v604, v604);
  v619 = vmulq_f32(v603, v603);
  v620 = vmulq_f32(v602, v602);
  v621 = vmulq_f32(v601, v601);
  if (v605)
  {
    v622 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v613, *v605, 1), v609, COERCE_FLOAT(*(_OWORD *)v605->f32)), v617, *(float32x4_t *)v605->f32, 2), v621, *(float32x4_t *)v605->f32, 3);
    v623 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v612, *v605, 1), v608, COERCE_FLOAT(*(_OWORD *)v605->f32)), v616, *(float32x4_t *)v605->f32, 2), v620, *(float32x4_t *)v605->f32, 3), v1208);
    v624 = vmulq_f32(v622, v1208);
    v625 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v611, *v605, 1), v607, COERCE_FLOAT(*(_OWORD *)v605->f32)), v615, *(float32x4_t *)v605->f32, 2), v619, *(float32x4_t *)v605->f32, 3), v1208);
    v626 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v610, *v605, 1), v606, COERCE_FLOAT(*(_OWORD *)v605->f32)), v614, *(float32x4_t *)v605->f32, 2), v618, *(float32x4_t *)v605->f32, 3), v1208);
  }
  else
  {
    v627 = vaddq_f32(vaddq_f32(v608, v612), v616);
    v624 = vaddq_f32(vaddq_f32(vaddq_f32(v609, v613), v617), v621);
    v623 = vaddq_f32(v627, v620);
    v625 = vaddq_f32(vaddq_f32(vaddq_f32(v607, v611), v615), v619);
    v626 = vaddq_f32(vaddq_f32(vaddq_f32(v606, v610), v614), v618);
  }
  v628 = vsubq_f32(v1256, v1186);
  v629 = HIDWORD(v392);
  v630 = vsubq_f32(v581, v1195);
  v631 = vsubq_f32(v582, v1202);
  v632 = vsubq_f32(v585, v1212);
  v633 = vsubq_f32(v1249, v1179);
  v634 = vsubq_f32(v1216, v1189);
  v635 = vsubq_f32(v583, v1199);
  v636 = vsubq_f32(v586, v1205);
  v637 = vsubq_f32(v1242, v1167);
  v638 = vsubq_f32(v1222, v1170);
  v639 = vsubq_f32(v584, v1182);
  v640 = vsubq_f32(v587, *(float32x4_t *)v12);
  v641 = vsubq_f32(v1235, v1156);
  v642 = vsubq_f32(v1228, v1160);
  v643 = vsubq_f32(v1219, v1163);
  v644 = vsubq_f32(v588, v1174);
  v645 = vmulq_f32(v632, v632);
  v646 = vmulq_f32(v631, v631);
  v647 = vmulq_f32(v630, v630);
  v648 = vmulq_f32(v628, v628);
  v649 = vmulq_f32(v636, v636);
  v650 = vmulq_f32(v635, v635);
  v651 = vmulq_f32(v634, v634);
  v652 = vmulq_f32(v633, v633);
  v653 = vmulq_f32(v640, v640);
  v654 = vmulq_f32(v639, v639);
  v655 = vmulq_f32(v638, v638);
  v656 = vmulq_f32(v637, v637);
  v657 = vmulq_f32(v644, v644);
  v658 = vmulq_f32(v643, v643);
  v659 = vmulq_f32(v642, v642);
  v660 = vmulq_f32(v641, v641);
  if (v605)
  {
    v661 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v650, *v605, 1), v646, COERCE_FLOAT(*(_OWORD *)v605->f32)), v654, *(float32x4_t *)v605->f32, 2), v658, *(float32x4_t *)v605->f32, 3), v1208);
    v662 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v649, *v605, 1), v645, COERCE_FLOAT(*(_OWORD *)v605->f32)), v653, *(float32x4_t *)v605->f32, 2), v657, *(float32x4_t *)v605->f32, 3), v1208);
    v663 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v651, *v605, 1), v647, COERCE_FLOAT(*(_OWORD *)v605->f32)), v655, *(float32x4_t *)v605->f32, 2), v659, *(float32x4_t *)v605->f32, 3), v1208);
    v664 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v652, *v605, 1), v648, COERCE_FLOAT(*(_OWORD *)v605->f32)), v656, *(float32x4_t *)v605->f32, 2), v660, *(float32x4_t *)v605->f32, 3), v1208);
  }
  else
  {
    v662 = vaddq_f32(vaddq_f32(vaddq_f32(v645, v649), v653), v657);
    v661 = vaddq_f32(vaddq_f32(vaddq_f32(v646, v650), v654), v658);
    v663 = vaddq_f32(vaddq_f32(vaddq_f32(v647, v651), v655), v659);
    v664 = vaddq_f32(vaddq_f32(vaddq_f32(v648, v652), v656), v660);
  }
  v665 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1306.f32, 0);
  v666 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1299.f32, 0);
  v667 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1306.f32, 1);
  v668 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1299.f32, 1);
  v669 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v1306, 2);
  v670 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v1299, 2);
  v671 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v1306, 3);
  v1307 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v1299, 3);
  v672 = vaddvq_s16((int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v624, v662), (int16x8_t)vcgtq_f32(v623, v661)), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v625, v663), (int16x8_t)vcgtq_f32(v626, v664)), (int8x16_t)xmmword_20631C0C0)));
  v673 = *a3;
  if (a3[1] == v672)
  {
    v675 = v1377;
    v674 = v1384;
    v677 = v1365;
    v676 = v1371;
  }
  else
  {
    v1223 = v666;
    v1229 = v665;
    v1236 = v668;
    v1243 = v667;
    v1250 = v670;
    v1257 = v669;
    v678 = v432;
    v679 = *a3;
    result = GetDualPartitionPatterns(v672, v1414);
    v673 = v679;
    v681 = 0;
    v682 = 0;
    v683 = a3[1];
    v684 = v683;
    v675 = v1377;
    v674 = v1384;
    v677 = v1365;
    v676 = v1371;
    do
    {
      v685 = HIWORD(v1414[v681]) ^ v683;
      if (v685)
        _ZF = (v685 & ((unsigned __int16)v683 ^ (unsigned __int16)~v672 | 0xFFFF0000)) == 0;
      else
        _ZF = 0;
      v680.i32[0] = HIWORD(v1414[v681]) ^ v683;
      v680 = vcnt_s8(v680);
      v680.i16[0] = vaddlv_u8((uint8x8_t)v680);
      if (_ZF && v680.i32[0] > v682)
      {
        v673 = LOWORD(v1414[v681]);
        v682 = v680.i32[0];
        v684 = HIWORD(v1414[v681]);
      }
      ++v681;
    }
    while (v681 != 3);
    v432 = v678;
    if (v682)
    {
      v1378 = *(int32x4_t *)((char *)VectorMaskForBitMask + ((v684 >> 4) & 0xF0));
      v1385 = *(int32x4_t *)((char *)VectorMaskForBitMask + ((v684 >> 8) & 0xF0));
      v1372 = *(int32x4_t *)((char *)VectorMaskForBitMask + (v684 & 0xF0));
      v1407 = VectorMaskForBitMask[v684 & 0xF];
      v1366 = v1407;
      v1406 = v1372;
      v1405 = v1378;
      v1404 = v1385;
      v688 = v673;
      result = FindWeights_4x4(a1, (uint64_t)&v1404, v481, v1398);
      v673 = v688;
      v677 = v1366;
      v676 = v1372;
      v675 = v1378;
      v674 = v1385;
      v1347 = v1398[2];
      v1353 = v1398[3];
      v1319 = v1398[1];
      v1313 = v1398[0];
      v1278 = (int16x8_t)vcltzq_s32(v1366);
      v1281 = (int16x8_t)vcltzq_s32(v1372);
      v1284 = (int16x8_t)vcltzq_s32(v1385);
      v1275 = (int16x8_t)vcltzq_s32(v1378);
      v1338 = vuzp1q_s8((int8x16_t)vuzp1q_s16(v1284, v1275), (int8x16_t)vuzp1q_s16(v1281, v1278));
    }
    v605 = *(float32x2_t **)(a1 + 32);
    LOBYTE(v629) = BYTE4(v392);
    v670 = v1250;
    v669 = v1257;
    v668 = v1236;
    v667 = v1243;
    v666 = v1223;
    v665 = v1229;
  }
  v689 = (int8x8_t)vextq_s8(v1338, v1338, 8uLL).u64[0];
  v690 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v689, v689)), 0x1FuLL));
  v691 = vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v689, v689)), 0x1FuLL);
  v692 = (int8x16_t)vcltzq_s32(v691);
  v693 = vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v1338.i8, *(int8x8_t *)v691.i8)), 0x1FuLL);
  v694 = (int8x16_t)vcltzq_s32(v693);
  v695 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v1338.i8, *(int8x8_t *)v693.i8)), 0x1FuLL));
  v1373 = (float32x4_t)vbslq_s8(v690, v1325, v1331);
  v1361 = (float32x4_t)vbslq_s8(v692, v1325, v1331);
  v1357 = (float32x4_t)vbslq_s8(v694, v1325, v1331);
  v1379 = (float32x4_t)vbslq_s8(v695, v1325, v1331);
  v1339 = (float32x4_t)vbslq_s8(v690, v666, v665);
  v1332 = (float32x4_t)vbslq_s8(v692, v666, v665);
  v1300 = (float32x4_t)vbslq_s8(v694, v666, v665);
  v696 = (float32x4_t)vbslq_s8(v695, v666, v665);
  v1367 = (float32x4_t)vbslq_s8(v690, v1316, v1322);
  v697 = (float32x4_t)vbslq_s8(v692, v1316, v1322);
  v698 = (float32x4_t)vbslq_s8(v694, v1316, v1322);
  v1386 = (float32x4_t)vbslq_s8(v695, v1316, v1322);
  v1326 = (float32x4_t)vbslq_s8(v690, v668, v667);
  v699 = (float32x4_t)vbslq_s8(v692, v668, v667);
  v700 = (float32x4_t)vbslq_s8(v694, v668, v667);
  v701 = (float32x4_t)vbslq_s8(v695, v668, v667);
  v702 = (float32x4_t)vbslq_s8(v690, v1272, v1292);
  v703 = (float32x4_t)vbslq_s8(v692, v1272, v1292);
  v704 = (float32x4_t)vbslq_s8(v694, v1272, v1292);
  v705 = (float32x4_t)vbslq_s8(v695, v1272, v1292);
  v706 = (float32x4_t)vbslq_s8(v690, v670, v669);
  v707 = (float32x4_t)vbslq_s8(v692, v670, v669);
  v708 = (float32x4_t)vbslq_s8(v694, v670, v669);
  v709 = (float32x4_t)vbslq_s8(v695, v670, v669);
  v710 = (float32x4_t)vbslq_s8(v690, v1263, v1268);
  v711 = (float32x4_t)vbslq_s8(v692, v1263, v1268);
  v712 = (float32x4_t)vbslq_s8(v694, v1263, v1268);
  v713 = (float32x4_t)vbslq_s8(v695, v1263, v1268);
  v714 = (float)v629;
  v715 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1278, v1307), vandq_s8((int8x16_t)vcgezq_s32(v677), v671));
  v716 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1281, v1307), vandq_s8((int8x16_t)vcgezq_s32(v676), v671));
  v717 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1284, v1307), vandq_s8((int8x16_t)vcgezq_s32(v674), v671));
  v718 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v1275, v1307), vandq_s8((int8x16_t)vcgezq_s32(v675), v671));
  v719 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v1313, (float32x4_t)0), v1344), v714));
  v720 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v1319, (float32x4_t)0), v1344), v714));
  v721 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v1347, (float32x4_t)0), v1344), v714));
  v722 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v1353, (float32x4_t)0), v1344), v714));
  v723 = ReciprocalTable[BYTE4(v392)];
  v724 = vmulq_n_f32(v722, v723);
  v725 = vmulq_n_f32(v721, v723);
  v726 = vmulq_n_f32(v719, v723);
  v727 = vmulq_n_f32(v720, v723);
  if (v605)
    v1344 = vmulq_f32(*(float32x4_t *)v605->f32, v1208);
  v1380 = vmlaq_f32(v1379, v727, v696);
  v1387 = vmlaq_f32(v1386, v727, v701);
  v728 = (int32x4_t)vmlaq_f32(v705, v727, v709);
  v1354 = vmlaq_f32(v713, v727, v718);
  v729 = vmlaq_f32(v1357, v726, v1300);
  v730 = vmlaq_f32(v698, v726, v700);
  v731 = vmlaq_f32(v704, v726, v708);
  v732 = vmlaq_f32(v712, v726, v717);
  v733 = vmlaq_f32(v1361, v725, v1332);
  v734 = vmlaq_f32(v697, v725, v699);
  v735 = vmlaq_f32(v703, v725, v707);
  v736 = vmlaq_f32(v711, v725, v716);
  v737 = (int32x4_t)v736;
  v738 = vmlaq_f32(v1373, v724, v1339);
  v739 = (int8x16_t)v1326;
  v740 = vmlaq_f32(v1367, v724, v1326);
  v741 = vmlaq_f32(v702, v724, v706);
  v742 = vmlaq_f32(v710, v724, v715);
  v743 = (float32x4_t *)a1;
  do
  {
    v744 = v743;
    v743 = (float32x4_t *)v743[2].i64[1];
  }
  while (v743);
  v745 = v744[8].u16[2];
  if (v745 == 392)
  {
    v1320 = v720;
    v1323 = v721;
    v1314 = v722;
    v1317 = v719;
    v800 = vzip1q_s32((int32x4_t)v729, (int32x4_t)v729);
    v800.i32[2] = v729.i32[0];
    v801 = (float32x4_t)v800;
    v802 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v729.f32, 1);
    v802.i32[3] = v729.i32[2];
    v1293 = v802;
    v803 = v801;
    v1285 = v801;
    v804 = vmlaq_f32(vmulq_f32(v802, (float32x4_t)xmmword_20631C4B0), (float32x4_t)xmmword_20631C4E0, v801);
    v805 = (int32x4_t)v1380;
    v806 = (float32x4_t)vzip1q_s32(v805, v805);
    v806.i32[2] = v1380.i32[0];
    v807 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1380.f32, 1);
    v807.i32[3] = v1380.i32[2];
    v1308 = vmlaq_f32(vmlaq_f32(v804, (float32x4_t)xmmword_20631C4F0, v806), (float32x4_t)xmmword_20631C520, v807);
    v1301 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1293, (float32x4_t)xmmword_20631C530), (float32x4_t)xmmword_20631C560, v803), (float32x4_t)xmmword_20631C570, v806), (float32x4_t)xmmword_20631C5A0, v807);
    v1276 = (int32x4_t)v742;
    v808 = vmlaq_f32(vmulq_f32(v807, (float32x4_t)xmmword_20631C5B0), (float32x4_t)xmmword_20631C5E0, v806);
    v809 = vmlaq_f32(vmulq_f32(v807, (float32x4_t)xmmword_20631C620), (float32x4_t)xmmword_20631C5F0, v806);
    v810 = (float32x4_t)vzip1q_s32((int32x4_t)v733, (int32x4_t)v733);
    v810.i32[2] = v733.i32[0];
    v811 = vmlaq_f32(v808, (float32x4_t)xmmword_20631C5F0, v810);
    v812 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v733.f32, 1);
    v812.i32[3] = v733.i32[2];
    v1279 = vmlaq_f32(v811, (float32x4_t)xmmword_20631C620, v812);
    v1282 = vmlaq_f32(vmlaq_f32(v809, (float32x4_t)xmmword_20631C5E0, v810), (float32x4_t)xmmword_20631C5B0, v812);
    v1368 = vmlaq_f32(vmulq_f32(v812, (float32x4_t)xmmword_20631C520), (float32x4_t)xmmword_20631C4F0, v810);
    v1374 = vmlaq_f32(vmulq_f32(v812, (float32x4_t)xmmword_20631C5A0), (float32x4_t)xmmword_20631C570, v810);
    v813 = (float32x4_t)vzip1q_s32((int32x4_t)v730, (int32x4_t)v730);
    v813.i32[2] = v730.i32[0];
    v814 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v730.f32, 1);
    v814.i32[3] = v730.i32[2];
    v815 = v814;
    v1244 = v813;
    v1251 = v814;
    v816 = vmlaq_f32(vmulq_f32(v814, (float32x4_t)xmmword_20631C4B0), (float32x4_t)xmmword_20631C4E0, v813);
    v817 = v813;
    v818 = (int32x4_t)v1387;
    v819 = (float32x4_t)vzip1q_s32(v818, v818);
    v819.i32[2] = v1387.i32[0];
    v820 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1387.f32, 1);
    v820.i32[3] = v1387.i32[2];
    v1269 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v815, (float32x4_t)xmmword_20631C530), (float32x4_t)xmmword_20631C560, v817), (float32x4_t)xmmword_20631C570, v819), (float32x4_t)xmmword_20631C5A0, v820);
    v1273 = vmlaq_f32(vmlaq_f32(v816, (float32x4_t)xmmword_20631C4F0, v819), (float32x4_t)xmmword_20631C520, v820);
    v821 = vmlaq_f32(vmulq_f32(v820, (float32x4_t)xmmword_20631C5B0), (float32x4_t)xmmword_20631C5E0, v819);
    v822 = vmlaq_f32(vmulq_f32(v820, (float32x4_t)xmmword_20631C620), (float32x4_t)xmmword_20631C5F0, v819);
    v823 = (float32x4_t)vzip1q_s32((int32x4_t)v734, (int32x4_t)v734);
    v823.i32[2] = v734.i32[0];
    v824 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v734.f32, 1);
    v824.i32[3] = v734.i32[2];
    v1258 = vmlaq_f32(vmlaq_f32(v822, (float32x4_t)xmmword_20631C5E0, v823), (float32x4_t)xmmword_20631C5B0, v824);
    v1264 = vmlaq_f32(vmlaq_f32(v821, (float32x4_t)xmmword_20631C5F0, v823), (float32x4_t)xmmword_20631C620, v824);
    v1362 = vmlaq_f32(vmulq_f32(v824, (float32x4_t)xmmword_20631C5A0), (float32x4_t)xmmword_20631C570, v823);
    v825 = (float32x4_t)vzip1q_s32((int32x4_t)v731, (int32x4_t)v731);
    v825.i32[2] = v731.i32[0];
    v826 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v731.f32, 1);
    v1358 = vmlaq_f32(vmulq_f32(v824, (float32x4_t)xmmword_20631C520), (float32x4_t)xmmword_20631C4F0, v823);
    v826.i32[3] = v731.i32[2];
    v1213 = v825;
    v1217 = v826;
    v827 = vmlaq_f32(vmulq_f32(v826, (float32x4_t)xmmword_20631C4B0), (float32x4_t)xmmword_20631C4E0, v825);
    v828 = v825;
    v829 = (float32x4_t)vzip1q_s32(v728, v728);
    v829.i32[2] = v728.i32[0];
    v830 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v728.i8, 1);
    v830.i32[3] = v728.i32[2];
    v1237 = vmlaq_f32(vmlaq_f32(v827, (float32x4_t)xmmword_20631C4F0, v829), (float32x4_t)xmmword_20631C520, v830);
    v1230 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v826, (float32x4_t)xmmword_20631C530), (float32x4_t)xmmword_20631C560, v828), (float32x4_t)xmmword_20631C570, v829), (float32x4_t)xmmword_20631C5A0, v830);
    v831 = vmlaq_f32(vmulq_f32(v830, (float32x4_t)xmmword_20631C5B0), (float32x4_t)xmmword_20631C5E0, v829);
    v832 = (float32x4_t)vzip1q_s32((int32x4_t)v735, (int32x4_t)v735);
    v832.i32[2] = v735.i32[0];
    v833 = vmlaq_f32(vmulq_f32(v830, (float32x4_t)xmmword_20631C620), (float32x4_t)xmmword_20631C5F0, v829);
    v834 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v735.f32, 1);
    v834.i32[3] = v735.i32[2];
    v1220 = vmlaq_f32(vmlaq_f32(v833, (float32x4_t)xmmword_20631C5E0, v832), (float32x4_t)xmmword_20631C5B0, v834);
    v1224 = vmlaq_f32(vmlaq_f32(v831, (float32x4_t)xmmword_20631C5F0, v832), (float32x4_t)xmmword_20631C620, v834);
    v1348 = vmlaq_f32(vmulq_f32(v834, (float32x4_t)xmmword_20631C5A0), (float32x4_t)xmmword_20631C570, v832);
    v1340 = vmlaq_f32(vmulq_f32(v834, (float32x4_t)xmmword_20631C520), (float32x4_t)xmmword_20631C4F0, v832);
    v835 = vzip1q_s32((int32x4_t)v732, (int32x4_t)v732);
    v835.i32[2] = v732.i32[0];
    v836 = (float32x4_t)v835;
    v837 = vdupq_lane_s32(*(int32x2_t *)v732.f32, 1);
    v837.i32[3] = v732.i32[2];
    v838 = (float32x4_t)v837;
    v839 = (float32x4_t)vzip1q_s32((int32x4_t)v1354, (int32x4_t)v1354);
    v839.i32[2] = v1354.i32[0];
    v1187 = v836;
    v1190 = v838;
    v840 = v836;
    v841 = vmlaq_f32(vmlaq_f32(vmulq_f32(v838, (float32x4_t)xmmword_20631C4B0), (float32x4_t)xmmword_20631C4E0, v836), (float32x4_t)xmmword_20631C4F0, v839);
    v842 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1354.f32, 1);
    v842.i32[3] = v1354.i32[2];
    v1209 = vmlaq_f32(v841, (float32x4_t)xmmword_20631C520, v842);
    v1206 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v838, (float32x4_t)xmmword_20631C530), (float32x4_t)xmmword_20631C560, v840), (float32x4_t)xmmword_20631C570, v839), (float32x4_t)xmmword_20631C5A0, v842);
    v843 = vmlaq_f32(vmulq_f32(v842, (float32x4_t)xmmword_20631C5B0), (float32x4_t)xmmword_20631C5E0, v839);
    v844 = vmlaq_f32(vmulq_f32(v842, (float32x4_t)xmmword_20631C620), (float32x4_t)xmmword_20631C5F0, v839);
    v845 = (float32x4_t)vzip1q_s32(v737, v737);
    v845.i32[2] = v737.i32[0];
    v846 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v737.i8, 1);
    v846.i32[3] = v737.i32[2];
    v1200 = vmlaq_f32(vmlaq_f32(v844, (float32x4_t)xmmword_20631C5E0, v845), (float32x4_t)xmmword_20631C5B0, v846);
    v1203 = vmlaq_f32(vmlaq_f32(v843, (float32x4_t)xmmword_20631C5F0, v845), (float32x4_t)xmmword_20631C620, v846);
    v1327 = vmlaq_f32(vmulq_f32(v846, (float32x4_t)xmmword_20631C520), (float32x4_t)xmmword_20631C4F0, v845);
    v1333 = vmlaq_f32(vmulq_f32(v846, (float32x4_t)xmmword_20631C5A0), (float32x4_t)xmmword_20631C570, v845);
    v847 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v729, (int8x16_t)v729, 0xCuLL), (int32x4_t)v729);
    v1157 = (float32x4_t)vextq_s8((int8x16_t)v729, (int8x16_t)vdupq_laneq_s32((int32x4_t)v729, 3), 8uLL);
    v848 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v805, (int8x16_t)v805, 0xCuLL), (int32x4_t)v1380);
    v849 = (float32x4_t)vextq_s8((int8x16_t)v1380, (int8x16_t)vdupq_laneq_s32((int32x4_t)v1380, 3), 8uLL);
    v850 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v733, (int8x16_t)v733, 0xCuLL), (int32x4_t)v733);
    v851 = (float32x4_t)vextq_s8((int8x16_t)v733, (int8x16_t)vdupq_laneq_s32((int32x4_t)v733, 3), 8uLL);
    v852 = (int32x4_t)v741;
    v1175 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1157, (float32x4_t)xmmword_20631C4C0), (float32x4_t)xmmword_20631C4D0, v847), (float32x4_t)xmmword_20631C500, v848), (float32x4_t)xmmword_20631C510, v849);
    v853 = v737;
    v854 = (int32x4_t)v738;
    v1171 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1157, (float32x4_t)xmmword_20631C540), (float32x4_t)xmmword_20631C550, v847), (float32x4_t)xmmword_20631C580, v848), (float32x4_t)xmmword_20631C590, v849);
    v855 = (int32x4_t)v740;
    v1164 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v849, (float32x4_t)xmmword_20631C610), (float32x4_t)xmmword_20631C600, v848), (float32x4_t)xmmword_20631C5D0, v850), (float32x4_t)xmmword_20631C5C0, v851);
    v1168 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v849, (float32x4_t)xmmword_20631C5C0), (float32x4_t)xmmword_20631C5D0, v848), (float32x4_t)xmmword_20631C600, v850), (float32x4_t)xmmword_20631C610, v851);
    v1381 = vmlaq_f32(vmulq_f32(v851, (float32x4_t)xmmword_20631C590), (float32x4_t)xmmword_20631C580, v850);
    v1149 = vmlaq_f32(vmulq_f32(v851, (float32x4_t)xmmword_20631C510), (float32x4_t)xmmword_20631C500, v850);
    v1143 = (float32x4_t)vextq_s8((int8x16_t)v730, (int8x16_t)vdupq_laneq_s32((int32x4_t)v730, 3), 8uLL);
    v1146 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v730, (int8x16_t)v730, 0xCuLL), (int32x4_t)v730);
    v856 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v818, (int8x16_t)v818, 0xCuLL), (int32x4_t)v1387);
    v857 = (float32x4_t)vextq_s8((int8x16_t)v1387, (int8x16_t)vdupq_laneq_s32((int32x4_t)v1387, 3), 8uLL);
    v858 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v734, (int8x16_t)v734, 0xCuLL), (int32x4_t)v734);
    v859 = (float32x4_t)vextq_s8((int8x16_t)v734, (int8x16_t)vdupq_laneq_s32((int32x4_t)v734, 3), 8uLL);
    v1388 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1143, (float32x4_t)xmmword_20631C4C0), (float32x4_t)xmmword_20631C4D0, v1146), (float32x4_t)xmmword_20631C500, v856), (float32x4_t)xmmword_20631C510, v857);
    v1152 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1143, (float32x4_t)xmmword_20631C540), (float32x4_t)xmmword_20631C550, v1146), (float32x4_t)xmmword_20631C580, v856), (float32x4_t)xmmword_20631C590, v857);
    v860 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v857, (float32x4_t)xmmword_20631C5C0), (float32x4_t)xmmword_20631C5D0, v856), (float32x4_t)xmmword_20631C600, v858), (float32x4_t)xmmword_20631C610, v859);
    v861 = vmlaq_f32(vmulq_f32(v859, (float32x4_t)xmmword_20631C590), (float32x4_t)xmmword_20631C580, v858);
    v862 = vmlaq_f32(vmulq_f32(v859, (float32x4_t)xmmword_20631C510), (float32x4_t)xmmword_20631C500, v858);
    v1138 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v857, (float32x4_t)xmmword_20631C610), (float32x4_t)xmmword_20631C600, v856), (float32x4_t)xmmword_20631C5D0, v858), (float32x4_t)xmmword_20631C5C0, v859);
    v1140 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v731, (int8x16_t)v731, 0xCuLL), (int32x4_t)v731);
    v1135 = (float32x4_t)vextq_s8((int8x16_t)v731, (int8x16_t)vdupq_laneq_s32((int32x4_t)v731, 3), 8uLL);
    v863 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v728, (int8x16_t)v728, 0xCuLL), v728);
    v864 = (float32x4_t)vextq_s8((int8x16_t)v728, (int8x16_t)vdupq_laneq_s32(v728, 3), 8uLL);
    v865 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v735, (int8x16_t)v735, 0xCuLL), (int32x4_t)v735);
    v866 = (float32x4_t)vextq_s8((int8x16_t)v735, (int8x16_t)vdupq_laneq_s32((int32x4_t)v735, 3), 8uLL);
    v867 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1135, (float32x4_t)xmmword_20631C4C0), (float32x4_t)xmmword_20631C4D0, v1140), (float32x4_t)xmmword_20631C500, v863), (float32x4_t)xmmword_20631C510, v864);
    v868 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1135, (float32x4_t)xmmword_20631C540), (float32x4_t)xmmword_20631C550, v1140), (float32x4_t)xmmword_20631C580, v863), (float32x4_t)xmmword_20631C590, v864);
    v869 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v864, (float32x4_t)xmmword_20631C5C0), (float32x4_t)xmmword_20631C5D0, v863), (float32x4_t)xmmword_20631C600, v865), (float32x4_t)xmmword_20631C610, v866);
    v870 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v864, (float32x4_t)xmmword_20631C610), (float32x4_t)xmmword_20631C600, v863), (float32x4_t)xmmword_20631C5D0, v865), (float32x4_t)xmmword_20631C5C0, v866);
    v871 = vmlaq_f32(vmulq_f32(v866, (float32x4_t)xmmword_20631C590), (float32x4_t)xmmword_20631C580, v865);
    v872 = vmlaq_f32(vmulq_f32(v866, (float32x4_t)xmmword_20631C510), (float32x4_t)xmmword_20631C500, v865);
    v1130 = (float32x4_t)vextq_s8((int8x16_t)v732, (int8x16_t)vdupq_laneq_s32((int32x4_t)v732, 3), 8uLL);
    v1132 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v732, (int8x16_t)v732, 0xCuLL), (int32x4_t)v732);
    v873 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v1354, (int8x16_t)v1354, 0xCuLL), (int32x4_t)v1354);
    v874 = (float32x4_t)vextq_s8((int8x16_t)v1354, (int8x16_t)vdupq_laneq_s32((int32x4_t)v1354, 3), 8uLL);
    v875 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1130, (float32x4_t)xmmword_20631C4C0), (float32x4_t)xmmword_20631C4D0, v1132), (float32x4_t)xmmword_20631C500, v873), (float32x4_t)xmmword_20631C510, v874);
    v876 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1130, (float32x4_t)xmmword_20631C540), (float32x4_t)xmmword_20631C550, v1132), (float32x4_t)xmmword_20631C580, v873), (float32x4_t)xmmword_20631C590, v874);
    v877 = vmlaq_f32(vmulq_f32(v874, (float32x4_t)xmmword_20631C5C0), (float32x4_t)xmmword_20631C5D0, v873);
    v878 = vmlaq_f32(vmulq_f32(v874, (float32x4_t)xmmword_20631C610), (float32x4_t)xmmword_20631C600, v873);
    v879 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v853, (int8x16_t)v853, 0xCuLL), v853);
    v880 = (float32x4_t)vextq_s8((int8x16_t)v853, (int8x16_t)vdupq_laneq_s32(v853, 3), 8uLL);
    v881 = vmlaq_f32(vmlaq_f32(v877, (float32x4_t)xmmword_20631C600, v879), (float32x4_t)xmmword_20631C610, v880);
    v882 = vmlaq_f32(vmlaq_f32(v878, (float32x4_t)xmmword_20631C5D0, v879), (float32x4_t)xmmword_20631C5C0, v880);
    v883 = vmlaq_f32(vmulq_f32(v880, (float32x4_t)xmmword_20631C590), (float32x4_t)xmmword_20631C580, v879);
    v884 = vmlaq_f32(vmulq_f32(v880, (float32x4_t)xmmword_20631C510), (float32x4_t)xmmword_20631C500, v879);
    v1128 = vmlaq_f32(vmulq_f32(v1293, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v1285);
    v885 = (float32x4_t)vzip1q_s32(v854, v854);
    v885.i32[2] = v854.i32[0];
    v886 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v854.i8, 1);
    v886.i32[3] = v854.i32[2];
    v1375 = vmlaq_f32(vmlaq_f32(v1374, (float32x4_t)xmmword_20631C560, v885), (float32x4_t)xmmword_20631C530, v886);
    v1369 = vmlaq_f32(vmlaq_f32(v1368, (float32x4_t)xmmword_20631C4E0, v885), (float32x4_t)xmmword_20631C4B0, v886);
    v1125 = vmlaq_f32(vmulq_f32(v886, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v885);
    v887 = (float32x4_t)vzip1q_s32(v855, v855);
    v887.i32[2] = v855.i32[0];
    v888 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v855.i8, 1);
    v888.i32[3] = v855.i32[2];
    v1363 = vmlaq_f32(vmlaq_f32(v1362, (float32x4_t)xmmword_20631C560, v887), (float32x4_t)xmmword_20631C530, v888);
    v1359 = vmlaq_f32(vmlaq_f32(v1358, (float32x4_t)xmmword_20631C4E0, v887), (float32x4_t)xmmword_20631C4B0, v888);
    v1294 = vmlaq_f32(vmulq_f32(v888, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v887);
    v1286 = vmlaq_f32(vmulq_f32(v1217, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v1213);
    v889 = (float32x4_t)vzip1q_s32(v852, v852);
    v889.i32[2] = v741.i32[0];
    v890 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v741.f32, 1);
    v890.i32[3] = v741.i32[2];
    v1349 = vmlaq_f32(vmlaq_f32(v1348, (float32x4_t)xmmword_20631C560, v889), (float32x4_t)xmmword_20631C530, v890);
    v1341 = vmlaq_f32(vmlaq_f32(v1340, (float32x4_t)xmmword_20631C4E0, v889), (float32x4_t)xmmword_20631C4B0, v890);
    v1355 = vmlaq_f32(vmulq_f32(v890, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v889);
    v1127 = vmlaq_f32(vmulq_f32(v1190, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v1187);
    v891 = v1276;
    v892 = (float32x4_t)vzip1q_s32(v891, v891);
    v892.i32[2] = v1276.i32[0];
    v893 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1276.i8, 1);
    v893.i32[3] = v1276.i32[2];
    v1328 = vmlaq_f32(vmlaq_f32(v1327, (float32x4_t)xmmword_20631C4E0, v892), (float32x4_t)xmmword_20631C4B0, v893);
    v1334 = vmlaq_f32(vmlaq_f32(v1333, (float32x4_t)xmmword_20631C560, v892), (float32x4_t)xmmword_20631C530, v893);
    v1126 = vmlaq_f32(vmulq_f32(v893, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v892);
    v894 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v854, (int8x16_t)v854, 0xCuLL), v854);
    v895 = (float32x4_t)vextq_s8((int8x16_t)v854, (int8x16_t)vdupq_laneq_s32(v854, 3), 8uLL);
    v1382 = vmlaq_f32(vmlaq_f32(v1381, (float32x4_t)xmmword_20631C550, v894), (float32x4_t)xmmword_20631C540, v895);
    v896 = vmlaq_f32(vmlaq_f32(v1149, (float32x4_t)xmmword_20631C4D0, v894), (float32x4_t)xmmword_20631C4C0, v895);
    v897 = vmlaq_f32(vmulq_f32(v895, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v894);
    v898 = vmlaq_f32(vmulq_f32(v1143, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v1146);
    v899 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v855, (int8x16_t)v855, 0xCuLL), v855);
    v900 = (float32x4_t)vextq_s8((int8x16_t)v855, (int8x16_t)vdupq_laneq_s32(v855, 3), 8uLL);
    v901 = vmlaq_f32(vmlaq_f32(v861, (float32x4_t)xmmword_20631C550, v899), (float32x4_t)xmmword_20631C540, v900);
    v902 = vmlaq_f32(vmlaq_f32(v862, (float32x4_t)xmmword_20631C4D0, v899), (float32x4_t)xmmword_20631C4C0, v900);
    v903 = vmlaq_f32(vmulq_f32(v900, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v899);
    v904 = vmlaq_f32(vmulq_f32(v1135, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v1140);
    v905 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v852, (int8x16_t)v852, 0xCuLL), v852);
    v906 = (float32x4_t)vextq_s8((int8x16_t)v852, (int8x16_t)vdupq_laneq_s32(v852, 3), 8uLL);
    v907 = vmlaq_f32(vmlaq_f32(v871, (float32x4_t)xmmword_20631C550, v905), (float32x4_t)xmmword_20631C540, v906);
    v908 = vmlaq_f32(vmlaq_f32(v872, (float32x4_t)xmmword_20631C4D0, v905), (float32x4_t)xmmword_20631C4C0, v906);
    v909 = vmlaq_f32(vmulq_f32(v906, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v905);
    v910 = vmlaq_f32(vmulq_f32(v1130, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v1132);
    v911 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8((int8x16_t)v891, (int8x16_t)v891, 0xCuLL), v1276);
    v912 = (float32x4_t)vextq_s8((int8x16_t)v1276, (int8x16_t)vdupq_laneq_s32(v1276, 3), 8uLL);
    v913 = vmlaq_f32(vmlaq_f32(v883, (float32x4_t)xmmword_20631C550, v911), (float32x4_t)xmmword_20631C540, v912);
    v914 = vmlaq_f32(vmlaq_f32(v884, (float32x4_t)xmmword_20631C4D0, v911), (float32x4_t)xmmword_20631C4C0, v912);
    v915 = vmlaq_f32(vmulq_f32(v912, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v911);
    v916 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    v917 = vmulq_f32(vmlaq_f32(vmulq_f32(v1157, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v847), v916);
    v918 = vmulq_f32(v1128, v916);
    v919 = vmulq_f32(v1175, v916);
    v920 = vmulq_f32(v1308, v916);
    v921 = vmulq_f32(v1171, v916);
    v922 = vmulq_f32(v1301, v916);
    v1129 = vmulq_f32(v1168, v916);
    v1131 = vmulq_f32(v1279, v916);
    v1136 = vmulq_f32(v1164, v916);
    v1133 = vmulq_f32(v1282, v916);
    v1141 = vmulq_f32(v1382, v916);
    v1144 = vmulq_f32(v1375, v916);
    v1150 = vmulq_f32(v896, v916);
    v1147 = vmulq_f32(v1369, v916);
    v923 = vmulq_f32(v897, v916);
    v924 = vmulq_f32(v1125, v916);
    v1161 = vmulq_f32(v898, v916);
    v1158 = vmulq_f32(vmlaq_f32(vmulq_f32(v1251, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v1244), v916);
    v1165 = vmulq_f32(v1388, v916);
    v1169 = vmulq_f32(v1273, v916);
    v1172 = vmulq_f32(v1269, v916);
    v1176 = vmulq_f32(v1152, v916);
    v1180 = vmulq_f32(v1264, v916);
    v1188 = vmulq_f32(v1138, v916);
    v1191 = vmulq_f32(v860, v916);
    v1183 = vmulq_f32(v1258, v916);
    v925 = vmulq_f32(v901, v916);
    v1214 = vmulq_f32(v902, v916);
    v1193 = vmulq_f32(v1363, v916);
    v1196 = vmulq_f32(v1359, v916);
    v1153 = vmulq_f32(v903, v916);
    v1218 = vmulq_f32(v1294, v916);
    v1245 = vmulq_f32(v1286, v916);
    v1252 = vmulq_f32(v904, v916);
    v1259 = vmulq_f32(v1237, v916);
    v1265 = vmulq_f32(v867, v916);
    v1270 = vmulq_f32(v1230, v916);
    v1274 = vmulq_f32(v868, v916);
    v1277 = vmulq_f32(v1224, v916);
    v1280 = vmulq_f32(v869, v916);
    v1283 = vmulq_f32(v1220, v916);
    v1287 = vmulq_f32(v870, v916);
    v1295 = vmulq_f32(v1349, v916);
    v1302 = vmulq_f32(v907, v916);
    v1309 = vmulq_f32(v908, v916);
    v1342 = vmulq_f32(v1341, v916);
    v926 = vmulq_f32(v909, v916);
    v927 = vmulq_f32(v1355, v916);
    v1350 = vmulq_f32(v910, v916);
    v1356 = vmulq_f32(v1127, v916);
    v1360 = vmulq_f32(v1209, v916);
    v1370 = vmulq_f32(v875, v916);
    v1376 = vmulq_f32(v876, v916);
    v928 = vmulq_f32(v881, v916);
    v1383 = vmulq_f32(v1206, v916);
    v1389 = vmulq_f32(v1203, v916);
    v929 = vmulq_f32(v882, v916);
    v930 = vmulq_f32(v1200, v916);
    v931 = vmulq_f32(v913, v916);
    v932 = vmulq_f32(v1334, v916);
    v933 = vmulq_f32(v914, v916);
    v934 = vmulq_f32(v1328, v916);
    v1335 = vmulq_f32(v915, v916);
    v935 = vmulq_f32(v1126, v916);
    v936 = v744 + 41;
    v937 = v744 + 17;
    if (*(_BYTE *)(a1 + 135))
    {
      v938 = v744[58];
      v939 = vmulq_f32(vsubq_f32(v917, v744[10]), v938);
      v940 = vmulq_f32(v939, v939);
      v1231 = v931;
      v1238 = v933;
      v942 = v744[59];
      v941 = v744[60];
      v943 = vmulq_f32(vsubq_f32(v919, v744[12]), v941);
      v944 = vmlaq_f32(v940, v943, v943);
      v945 = v744[57];
      v946 = vmulq_f32(vsubq_f32(v918, v744[9]), v945);
      v947 = vmulq_f32(v946, v946);
      v948 = vmulq_f32(vsubq_f32(v920, v744[11]), v942);
      v949 = vmlaq_f32(v947, v948, v948);
      v950 = vsubq_f32(v922, v744[13]);
      v951 = v927;
      v952 = v744[62];
      v953 = vmulq_f32(vsubq_f32(v921, v744[14]), v952);
      v1204 = v926;
      v1207 = v928;
      v954 = v923;
      v956 = v744[63];
      v955 = v744[64];
      v957 = vmulq_f32(vsubq_f32(v1129, v744[16]), v955);
      v958 = vmlaq_f32(vmulq_f32(v953, v953), v957, v957);
      v1210 = v929;
      v959 = v744[61];
      v960 = vmulq_f32(v950, v959);
      v961 = v924;
      v962 = vmulq_f32(v960, v960);
      v963 = vmulq_f32(vsubq_f32(v1131, v744[15]), v956);
      v964 = vmlaq_f32(v962, v963, v963);
      v1329 = v934;
      v965 = v744[65];
      v966 = v744[66];
      v967 = vmulq_f32(vsubq_f32(v1136, v744[18]), v966);
      v968 = vmulq_f32(v967, v967);
      v969 = v744[67];
      v970 = v744[68];
      v971 = vmulq_f32(vsubq_f32(v1141, v744[20]), v970);
      v972 = vmlaq_f32(v968, v971, v971);
      v973 = vmulq_f32(vsubq_f32(v1133, *v937), v965);
      v974 = vmulq_f32(v973, v973);
      v975 = vmulq_f32(vsubq_f32(v1144, v744[19]), v969);
      v976 = vmlaq_f32(v974, v975, v975);
      v977 = vsubq_f32(v961, v744[23]);
      v978 = v744[70];
      v979 = v744[71];
      v980 = vmulq_f32(vsubq_f32(v1150, v744[22]), v978);
      v1221 = v930;
      v1225 = v932;
      v981 = v935;
      v982 = vmulq_f32(v980, v980);
      v983 = v744[72];
      v984 = vmulq_f32(vsubq_f32(v954, v744[24]), v983);
      v985 = vmlaq_f32(v982, v984, v984);
      v986 = v744[69];
      v987 = vmulq_f32(vsubq_f32(v1147, v744[21]), v986);
      v988 = vmulq_f32(v987, v987);
      v989 = vmulq_f32(v977, v979);
      v990 = vmlaq_f32(v988, v989, v989);
      v1364 = vpaddq_f32(v949, v944);
      v785 = vpaddq_f32(v964, v958);
      v991 = vpaddq_f32(v976, v972);
      v783 = vpaddq_f32(v990, v985);
      v992 = vmulq_f32(v938, vsubq_f32(v1161, v744[26]));
      v993 = vmulq_f32(v941, vsubq_f32(v1165, v744[28]));
      v994 = vmlaq_f32(vmulq_f32(v992, v992), v993, v993);
      v995 = vmulq_f32(v945, vsubq_f32(v1158, v744[25]));
      v996 = vmulq_f32(v942, vsubq_f32(v1169, v744[27]));
      v997 = vmlaq_f32(vmulq_f32(v995, v995), v996, v996);
      v998 = vmulq_f32(v952, vsubq_f32(v1176, v744[30]));
      v999 = vmulq_f32(v955, vsubq_f32(v1191, v744[32]));
      v1000 = vmlaq_f32(vmulq_f32(v998, v998), v999, v999);
      v1001 = vmulq_f32(v959, vsubq_f32(v1172, v744[29]));
      v1002 = vmulq_f32(v956, vsubq_f32(v1180, v744[31]));
      v1003 = vmlaq_f32(vmulq_f32(v1001, v1001), v1002, v1002);
      v1004 = vmulq_f32(v966, vsubq_f32(v1188, v744[34]));
      v1005 = vmulq_f32(v970, vsubq_f32(v925, v744[36]));
      v1006 = vmlaq_f32(vmulq_f32(v1004, v1004), v1005, v1005);
      v1007 = vmulq_f32(v965, vsubq_f32(v1183, v744[33]));
      v1008 = vmulq_f32(v969, vsubq_f32(v1193, v744[35]));
      v1009 = vmlaq_f32(vmulq_f32(v1007, v1007), v1008, v1008);
      v1010 = vmulq_f32(v978, vsubq_f32(v1214, v744[38]));
      v1011 = vmulq_f32(v1010, v1010);
      v1012 = vmulq_f32(v983, vsubq_f32(v1153, v744[40]));
      v1013 = vmlaq_f32(v1011, v1012, v1012);
      v1014 = vmulq_f32(v986, vsubq_f32(v1196, v744[37]));
      v1015 = vmulq_f32(v979, vsubq_f32(v1218, v744[39]));
      v1016 = vmlaq_f32(vmulq_f32(v1014, v1014), v1015, v1015);
      v790 = vpaddq_f32(v997, v994);
      v789 = vpaddq_f32(v1003, v1000);
      v788 = vpaddq_f32(v1009, v1006);
      v787 = vpaddq_f32(v1016, v1013);
      v935 = v981;
      v1017 = vmulq_f32(v938, vsubq_f32(v1252, v744[42]));
      v784 = v991;
      v1018 = vmulq_f32(v945, vsubq_f32(v1245, *v936));
      v1019 = vmulq_f32(v942, vsubq_f32(v1259, v744[43]));
      v932 = v1225;
      v931 = v1231;
      v1020 = vmulq_f32(v941, vsubq_f32(v1265, v744[44]));
      v933 = v1238;
      v1021 = vmlaq_f32(vmulq_f32(v1017, v1017), v1020, v1020);
      v1022 = vmlaq_f32(vmulq_f32(v1018, v1018), v1019, v1019);
      v1023 = vmulq_f32(v952, vsubq_f32(v1274, v744[46]));
      v1024 = vmulq_f32(v959, vsubq_f32(v1270, v744[45]));
      v1025 = vmulq_f32(v956, vsubq_f32(v1277, v744[47]));
      v1026 = vmulq_f32(v955, vsubq_f32(v1280, v744[48]));
      v928 = v1207;
      v1027 = vmlaq_f32(vmulq_f32(v1023, v1023), v1026, v1026);
      v1028 = vmlaq_f32(vmulq_f32(v1024, v1024), v1025, v1025);
      v1029 = vmulq_f32(v966, vsubq_f32(v1287, v744[50]));
      v1030 = vmulq_f32(v965, vsubq_f32(v1283, v744[49]));
      v1031 = vmulq_f32(v969, vsubq_f32(v1295, v744[51]));
      v1032 = vmulq_f32(v970, vsubq_f32(v1302, v744[52]));
      v1033 = vmulq_f32(v1029, v1029);
      v929 = v1210;
      v1034 = vmlaq_f32(v1033, v1032, v1032);
      v1035 = vmlaq_f32(vmulq_f32(v1030, v1030), v1031, v1031);
      v934 = v1329;
      v1036 = vmulq_f32(v978, vsubq_f32(v1309, v744[54]));
      v1037 = vmulq_f32(v986, vsubq_f32(v1342, v744[53]));
      v1038 = vmulq_f32(v979, vsubq_f32(v951, v744[55]));
      v1039 = vmulq_f32(v983, vsubq_f32(v1204, v744[56]));
      v930 = v1221;
      v1040 = vmlaq_f32(vmulq_f32(v1036, v1036), v1039, v1039);
      v1041 = vmlaq_f32(vmulq_f32(v1037, v1037), v1038, v1038);
    }
    else
    {
      v1042 = vsubq_f32(v917, v744[10]);
      v1043 = vsubq_f32(v918, v744[9]);
      v1044 = vsubq_f32(v920, v744[11]);
      v1045 = vsubq_f32(v919, v744[12]);
      v1046 = vmlaq_f32(vmulq_f32(v1042, v1042), v1045, v1045);
      v1047 = vmlaq_f32(vmulq_f32(v1043, v1043), v1044, v1044);
      v1048 = vsubq_f32(v921, v744[14]);
      v1049 = vsubq_f32(v922, v744[13]);
      v1050 = vsubq_f32(v1131, v744[15]);
      v1051 = vsubq_f32(v1129, v744[16]);
      v1052 = vmlaq_f32(vmulq_f32(v1048, v1048), v1051, v1051);
      v1053 = vmlaq_f32(vmulq_f32(v1049, v1049), v1050, v1050);
      v1054 = vsubq_f32(v1136, v744[18]);
      v1055 = vsubq_f32(v1133, *v937);
      v1056 = vsubq_f32(v1144, v744[19]);
      v1057 = vsubq_f32(v1141, v744[20]);
      v1058 = vmlaq_f32(vmulq_f32(v1054, v1054), v1057, v1057);
      v1059 = vmlaq_f32(vmulq_f32(v1055, v1055), v1056, v1056);
      v1060 = vsubq_f32(v1150, v744[22]);
      v1061 = vsubq_f32(v1147, v744[21]);
      v1062 = vsubq_f32(v924, v744[23]);
      v1063 = vsubq_f32(v923, v744[24]);
      v1364 = vpaddq_f32(v1047, v1046);
      v785 = vpaddq_f32(v1053, v1052);
      v784 = vpaddq_f32(v1059, v1058);
      v783 = vpaddq_f32(vmlaq_f32(vmulq_f32(v1061, v1061), v1062, v1062), vmlaq_f32(vmulq_f32(v1060, v1060), v1063, v1063));
      v1064 = vsubq_f32(v1161, v744[26]);
      v1065 = vsubq_f32(v1158, v744[25]);
      v1066 = vsubq_f32(v1169, v744[27]);
      v1067 = vsubq_f32(v1165, v744[28]);
      v1068 = vmlaq_f32(vmulq_f32(v1064, v1064), v1067, v1067);
      v1069 = vmlaq_f32(vmulq_f32(v1065, v1065), v1066, v1066);
      v1070 = vsubq_f32(v1176, v744[30]);
      v1071 = vsubq_f32(v1172, v744[29]);
      v1072 = vsubq_f32(v1180, v744[31]);
      v1073 = vsubq_f32(v1191, v744[32]);
      v1074 = vmlaq_f32(vmulq_f32(v1070, v1070), v1073, v1073);
      v1075 = vmlaq_f32(vmulq_f32(v1071, v1071), v1072, v1072);
      v1076 = vsubq_f32(v1188, v744[34]);
      v1077 = vsubq_f32(v1183, v744[33]);
      v1078 = vsubq_f32(v1193, v744[35]);
      v1079 = vsubq_f32(v925, v744[36]);
      v1080 = vmlaq_f32(vmulq_f32(v1076, v1076), v1079, v1079);
      v1081 = vmlaq_f32(vmulq_f32(v1077, v1077), v1078, v1078);
      v1082 = vsubq_f32(v1214, v744[38]);
      v1083 = vsubq_f32(v1196, v744[37]);
      v1084 = vsubq_f32(v1218, v744[39]);
      v1085 = vsubq_f32(v1153, v744[40]);
      v790 = vpaddq_f32(v1069, v1068);
      v789 = vpaddq_f32(v1075, v1074);
      v788 = vpaddq_f32(v1081, v1080);
      v787 = vpaddq_f32(vmlaq_f32(vmulq_f32(v1083, v1083), v1084, v1084), vmlaq_f32(vmulq_f32(v1082, v1082), v1085, v1085));
      v1086 = vsubq_f32(v1252, v744[42]);
      v1087 = vsubq_f32(v1245, *v936);
      v1088 = vsubq_f32(v1259, v744[43]);
      v1089 = vsubq_f32(v1265, v744[44]);
      v1021 = vmlaq_f32(vmulq_f32(v1086, v1086), v1089, v1089);
      v1022 = vmlaq_f32(vmulq_f32(v1087, v1087), v1088, v1088);
      v1090 = vsubq_f32(v1274, v744[46]);
      v1091 = vsubq_f32(v1270, v744[45]);
      v1092 = vsubq_f32(v1277, v744[47]);
      v1093 = vsubq_f32(v1280, v744[48]);
      v1027 = vmlaq_f32(vmulq_f32(v1090, v1090), v1093, v1093);
      v1028 = vmlaq_f32(vmulq_f32(v1091, v1091), v1092, v1092);
      v1094 = vsubq_f32(v1287, v744[50]);
      v1095 = vsubq_f32(v1283, v744[49]);
      v1096 = vsubq_f32(v1295, v744[51]);
      v1097 = vsubq_f32(v1302, v744[52]);
      v1034 = vmlaq_f32(vmulq_f32(v1094, v1094), v1097, v1097);
      v1035 = vmlaq_f32(vmulq_f32(v1095, v1095), v1096, v1096);
      v1098 = vsubq_f32(v1309, v744[54]);
      v1099 = vsubq_f32(v1342, v744[53]);
      v1100 = vsubq_f32(v927, v744[55]);
      v1101 = vsubq_f32(v926, v744[56]);
      v1040 = vmlaq_f32(vmulq_f32(v1098, v1098), v1101, v1101);
      v1041 = vmlaq_f32(vmulq_f32(v1099, v1099), v1100, v1100);
    }
    v799 = a4;
    v719 = v1317;
    v720 = v1320;
    v722 = v1314;
    v794 = vpaddq_f32(v1022, v1021);
    v793 = vpaddq_f32(v1028, v1027);
    v792 = vpaddq_f32(v1035, v1034);
    v791 = vpaddq_f32(v1041, v1040);
    v1102 = vsubq_f32(v1350, v744[58]);
    v1103 = vsubq_f32(v1356, v744[57]);
    v1104 = vsubq_f32(v1360, v744[59]);
    v1105 = vsubq_f32(v1370, v744[60]);
    v1106 = vmlaq_f32(vmulq_f32(v1102, v1102), v1105, v1105);
    v1107 = vmlaq_f32(vmulq_f32(v1103, v1103), v1104, v1104);
    v1108 = vsubq_f32(v1376, v744[62]);
    v1109 = vsubq_f32(v1383, v744[61]);
    v1110 = vsubq_f32(v1389, v744[63]);
    v1111 = vsubq_f32(v928, v744[64]);
    v1112 = vmlaq_f32(vmulq_f32(v1108, v1108), v1111, v1111);
    v1113 = vmlaq_f32(vmulq_f32(v1109, v1109), v1110, v1110);
    v1114 = vsubq_f32(v929, v744[66]);
    v1115 = vsubq_f32(v930, v744[65]);
    v1116 = vsubq_f32(v932, v744[67]);
    v1117 = vsubq_f32(v931, v744[68]);
    v1118 = vmlaq_f32(vmulq_f32(v1114, v1114), v1117, v1117);
    v1119 = vmlaq_f32(vmulq_f32(v1115, v1115), v1116, v1116);
    v1120 = vsubq_f32(v933, v744[70]);
    v1121 = vsubq_f32(v934, v744[69]);
    v1122 = vsubq_f32(v935, v744[71]);
    v1123 = vsubq_f32(v1335, v744[72]);
    v796 = vpaddq_f32(v1107, v1106);
    v795 = vpaddq_f32(v1113, v1112);
    v797 = vpaddq_f32(v1119, v1118);
    v798 = vpaddq_f32(vmlaq_f32(vmulq_f32(v1121, v1121), v1122, v1122), vmlaq_f32(vmulq_f32(v1120, v1120), v1123, v1123));
    v786 = v1364;
  }
  else
  {
    if (v745 != 324)
      return result;
    v1323 = v721;
    v739.i32[0] = 0;
    v746 = vsubq_f32(v738, *(float32x4_t *)(a1 + 192));
    v747 = vsubq_f32(v733, *(float32x4_t *)(a1 + 176));
    v748 = vsubq_f32(v740, *(float32x4_t *)(a1 + 256));
    v749 = vsubq_f32(v734, *(float32x4_t *)(a1 + 240));
    v750 = vsubq_f32(v730, *(float32x4_t *)(a1 + 208));
    v751 = (float32x4_t)v728;
    v752 = vsubq_f32(v741, *(float32x4_t *)(v12 + 48));
    v753 = vsubq_f32(v735, *(float32x4_t *)(v12 + 32));
    v754 = vsubq_f32(v751, *(float32x4_t *)(v12 + 16));
    v755 = vsubq_f32(v731, *(float32x4_t *)v12);
    v757 = *(float32x4_t *)(v12 + 64);
    v756 = *(float32x4_t *)(v12 + 80);
    v758 = *(float32x4_t *)(v12 + 96);
    v759 = *(float32x4_t *)(v12 + 112);
    v760 = vsubq_f32(v742, v759);
    v761 = vsubq_f32(v736, v758);
    v762 = vsubq_f32(v732, v757);
    v763 = (int8x16_t)v1354;
    v764 = vsubq_f32(v1354, v756);
    v763.i8[0] = *(_BYTE *)(a1 + 135);
    v765 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v763, v739), 0);
    __asm { FMOV            V25.4S, #1.0 }
    v767 = (float32x4_t)vbslq_s8(v765, _Q25, (int8x16_t)v759);
    v768 = (float32x4_t)vbslq_s8(v765, _Q25, (int8x16_t)v758);
    v769 = (float32x4_t)vbslq_s8(v765, _Q25, (int8x16_t)v756);
    v770 = (float32x4_t)vbslq_s8(v765, _Q25, (int8x16_t)v757);
    v771 = vmulq_f32(vsubq_f32(v729, *(float32x4_t *)(a1 + 144)), v770);
    v772 = vmulq_f32(vsubq_f32(v1380, *(float32x4_t *)(a1 + 160)), v769);
    v773 = vmulq_f32(v747, v768);
    v774 = vmulq_f32(v746, v767);
    v775 = vmulq_f32(v750, v770);
    v776 = vmulq_f32(vsubq_f32(v1387, *(float32x4_t *)(a1 + 224)), v769);
    v777 = vmulq_f32(v749, v768);
    v778 = vmulq_f32(v748, v767);
    v779 = vmulq_f32(v755, v770);
    v780 = vmulq_f32(v754, v769);
    v781 = vmulq_f32(v753, v768);
    v782 = vmulq_f32(v752, v767);
    v783 = vmulq_f32(v774, v774);
    v784 = vmulq_f32(v773, v773);
    v785 = vmulq_f32(v772, v772);
    v786 = vmulq_f32(v771, v771);
    v787 = vmulq_f32(v778, v778);
    v788 = vmulq_f32(v777, v777);
    v789 = vmulq_f32(v776, v776);
    v790 = vmulq_f32(v775, v775);
    v791 = vmulq_f32(v782, v782);
    v792 = vmulq_f32(v781, v781);
    v793 = vmulq_f32(v780, v780);
    v794 = vmulq_f32(v779, v779);
    v795 = vmulq_f32(v764, v764);
    v796 = vmulq_f32(v762, v762);
    v797 = vmulq_f32(v761, v761);
    v798 = vmulq_f32(v760, v760);
    v799 = a4;
  }
  v1124 = vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v790, *(float32x2_t *)v1344.f32, 1), v786, v1344.f32[0]), v794, v1344, 2), v796, v1344, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v788, *(float32x2_t *)v1344.f32, 1), v784, v1344.f32[0]), v792, v1344, 2), v797, v1344, 3)),
            vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v789, *(float32x2_t *)v1344.f32, 1), v785, v1344.f32[0]), v793, v1344, 2), v795, v1344, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v787, *(float32x2_t *)v1344.f32, 1), v783, v1344.f32[0]), v791, v1344, 2), v798, v1344, 3)));
  v1124.i64[0] = vpaddq_f32(v1124, v1124).u64[0];
  if (vpadd_f32(*(float32x2_t *)v1124.f32, *(float32x2_t *)v1124.f32).f32[0] < v799)
  {
    *(int8x16_t *)(v432 + 32) = vandq_s8(v1410, (int8x16_t)xmmword_20631C6B0);
    *(int8x16_t *)v432 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v719), (int16x8_t)vcvtq_s32_f32(v720)), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v1323), (int16x8_t)vcvtq_s32_f32(v722)));
    *(_OWORD *)(v432 + 16) = 0u;
    *(_DWORD *)(v432 + 48) = v392 | (v673 << 13);
    *(_BYTE *)(v432 + 52) = v629;
    *(_BYTE *)(v432 + 53) = v393;
    *(_BYTE *)(v432 + 54) = BYTE5(v392);
    *(_BYTE *)(v432 + 55) = 29;
    *(_QWORD *)(((v392 >> 41) & 0x7F) + v432 + 32) = v1413;
  }
  return result;
}

uint64_t GetDualPartitionPatterns(uint64_t result, _DWORD *a2)
{
  unint64_t v2;

  v2 = kDualPatternList[result];
  *a2 = kDualPartitionPatterns[v2 & 0x1FF];
  a2[1] = kDualPartitionPatterns[(v2 >> 10) & 0x1FF];
  a2[2] = kDualPartitionPatterns[(v2 >> 20) & 0x1FF];
  return result;
}

uint64_t FillBlockStorageRow(uint64_t result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void (*v11)(_BYTE *, uint64_t);
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v38;
  unint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  void (*v47)(_BYTE *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[12];
  _BYTE v56[2304];
  uint64_t v57;

  v8 = a6;
  v9 = a3;
  v10 = result;
  v57 = *MEMORY[0x24BDAC8D0];
  v11 = *(void (**)(_BYTE *, uint64_t))(result + 200);
  v12 = *(unsigned int *)(result + 120);
  v54 = a5;
  v47 = v11;
  if ((a4 & 0x8000000000000000) == 0 || a5 < 0)
  {
    v25 = a4;
    v26 = a3;
  }
  else
  {
    v48 = *(unsigned int *)(result + 120);
    v51 = a4;
    v13 = (_QWORD *)a2;
    if (*(_DWORD *)(result + 64))
    {
      v14 = 0;
      v15 = *(_QWORD *)(result + 80);
      v16 = v56;
      v17 = a6;
      do
      {
        v55[v14] = v15;
        v11(v16, v17);
        v15 = *(_QWORD *)(v10 + 80);
        v16 += v15;
        v17 += *(_QWORD *)(a7 + 8 * v14++);
      }
      while (v14 < *(unsigned int *)(v10 + 64));
    }
    v49 = a7;
    v18 = 0;
    v19 = -v51;
    v20 = v9;
    v21 = v9;
    v22 = v13;
    do
    {
      v23 = &v22[v18];
      v24 = &v9[v18];
      result = ReadBlock();
      v22 = v13;
      v24[9] = v20;
      v24[10] = v24;
      v24[11] = &v9[344 * (v19 == 1) + v18];
      v24[6] = v23[9];
      v24[7] = v23;
      v24[8] = v23[11];
      if (v9 != v13)
      {
        v23[12] = v20;
        v23[13] = v24[10];
        v23[14] = v24[11];
      }
      v20 = v21;
      v21 += 344;
      v24[12] = 0;
      v24[13] = 0;
      v24[14] = 0;
      v18 += 344;
      --v19;
    }
    while (v19);
    v25 = 0;
    a2 = (uint64_t)&v13[v18];
    v9 = (_QWORD *)((char *)v9 + v18 * 8);
    v26 = v9 - 344;
    a4 = v51;
    a5 = v54;
    v12 = v48;
    a7 = v49;
  }
  if (v25 <= a5)
  {
    v27 = v12 - a4;
    if (v12 - a4 < 1)
    {
      v38 = v9;
      v9 = v26;
      goto LABEL_27;
    }
    v52 = (_QWORD *)a2;
    result = ReadBlock();
    v28 = v52;
    v29 = *(_QWORD *)(v10 + 80);
    v9[9] = v26;
    v9[10] = v9;
    v9[11] = &v9[344 * (v25 < v54)];
    v9[6] = v52[9];
    v9[7] = v52;
    v9[8] = v52[11];
    if (v52 != v9)
    {
      v52[12] = v26;
      v52[13] = v9[10];
      v52[14] = v9[11];
    }
    v9[12] = 0;
    v9[13] = 0;
    v9[14] = 0;
    if (v25 < v54)
    {
      v8 += v29;
      ++v25;
      v30 = v27 - 1;
      if (v27 != 1)
      {
        v31 = 0;
        v50 = a7;
        v32 = v25;
        do
        {
          v33 = &v9[v31];
          v34 = &v28[v31];
          v35 = (uint64_t)&v28[v31 + 344];
          result = ReadBlock();
          v28 = v52;
          v33[353] = v33;
          v33[354] = &v9[v31 + 344];
          v33[355] = &v9[v31 + 688];
          v33[350] = v34[353];
          v33[351] = v35;
          v33[352] = v34[355];
          if (v9 != v52)
          {
            v34[356] = v33;
            v34[357] = v33[354];
            v34[358] = v33[355];
          }
          v33[358] = 0;
          *((_OWORD *)v33 + 178) = 0u;
          v8 += *(_QWORD *)(v10 + 80);
          v25 = v32 + 1;
          v31 += 344;
          v36 = v54;
          if (v32 >= v54)
            break;
          ++v32;
        }
        while (v30-- > 1);
        v9 = (_QWORD *)((char *)v9 + v31 * 8);
        a2 = (uint64_t)&v52[v31 + 344];
        v38 = v9 + 344;
        a7 = v50;
        goto LABEL_28;
      }
      a2 = (uint64_t)(v52 + 344);
      v38 = v9 + 344;
LABEL_27:
      v36 = v54;
LABEL_28:
      if (v25 <= v36)
      {
        v53 = a2;
        if (*(_DWORD *)(v10 + 64))
        {
          v39 = 0;
          v40 = *(_QWORD *)(v10 + 80);
          v41 = v56;
          do
          {
            v55[v39] = v40;
            v47(v41, v8);
            v40 = *(_QWORD *)(v10 + 80);
            v41 += v40;
            v8 += *(_QWORD *)(a7 + 8 * v39++);
          }
          while (v39 < *(unsigned int *)(v10 + 64));
        }
        v42 = 0;
        v43 = v53;
        v44 = v38;
        do
        {
          v45 = (_QWORD *)(v43 + v42 * 8);
          v46 = &v38[v42];
          result = ReadBlock();
          v43 = v53;
          v46[9] = v9;
          v46[10] = v46;
          v46[11] = &v38[344 * (v25 < v54) + v42];
          v46[6] = v45[9];
          v46[7] = v45;
          v46[8] = v45[11];
          if (v38 != (_QWORD *)v53)
          {
            v45[12] = v9;
            v45[13] = v46[10];
            v45[14] = v46[11];
          }
          v9 = v44;
          v44 += 344;
          ++v25;
          v46[12] = 0;
          v46[13] = 0;
          v46[14] = 0;
          v42 += 344;
        }
        while (v54 + 1 != v25);
      }
    }
  }
  return result;
}

uint64_t ClampPremultiplied_4x4_vec(uint64_t result)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;

  v2 = *(float32x4_t *)(result + 368);
  v1 = *(float32x4_t *)(result + 384);
  v4 = *(float32x4_t *)(result + 336);
  v3 = *(float32x4_t *)(result + 352);
  v5 = vminnmq_f32(*(float32x4_t *)(result + 144), v4);
  v6 = vminnmq_f32(*(float32x4_t *)(result + 160), v3);
  v7 = vminnmq_f32(*(float32x4_t *)(result + 176), v2);
  v8 = vminnmq_f32(*(float32x4_t *)(result + 192), v1);
  *(float32x4_t *)(result + 176) = v7;
  *(float32x4_t *)(result + 192) = v8;
  *(float32x4_t *)(result + 144) = v5;
  *(float32x4_t *)(result + 160) = v6;
  v9 = vminnmq_f32(*(float32x4_t *)(result + 208), v4);
  v10 = vminnmq_f32(*(float32x4_t *)(result + 224), v3);
  v11 = vminnmq_f32(*(float32x4_t *)(result + 240), v2);
  v12 = vminnmq_f32(*(float32x4_t *)(result + 256), v1);
  *(float32x4_t *)(result + 240) = v11;
  *(float32x4_t *)(result + 256) = v12;
  *(float32x4_t *)(result + 208) = v9;
  *(float32x4_t *)(result + 224) = v10;
  v13 = vminnmq_f32(*(float32x4_t *)(result + 272), v4);
  v14 = vminnmq_f32(*(float32x4_t *)(result + 288), v3);
  v15 = vminnmq_f32(*(float32x4_t *)(result + 304), v2);
  v16 = vminnmq_f32(*(float32x4_t *)(result + 320), v1);
  *(float32x4_t *)(result + 304) = v15;
  *(float32x4_t *)(result + 320) = v16;
  v17 = *(float *)(result + 124);
  *(float32x4_t *)(result + 272) = v13;
  *(float32x4_t *)(result + 288) = v14;
  if (v17 < 0.0)
  {
    v18 = *(float32x4_t **)(result + 32);
    if (v18)
      v19 = *v18;
    else
      v19 = (float32x4_t)xmmword_20631C430;
    v20 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v12, *(float32x2_t *)v19.f32, 1), v8, v19.f32[0]), v16, v19, 2);
    v21 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v11, *(float32x2_t *)v19.f32, 1), v7, v19.f32[0]), v15, v19, 2);
    v22 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v10, *(float32x2_t *)v19.f32, 1), v6, v19.f32[0]), v14, v19, 2);
    v23 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v9, *(float32x2_t *)v19.f32, 1), v5, v19.f32[0]), v13, v19, 2);
    *(float32x4_t *)(result + 656) = v23;
    *(float32x4_t *)(result + 672) = v22;
    *(float32x4_t *)(result + 688) = v21;
    *(float32x4_t *)(result + 704) = v20;
    v24 = vsubq_f32(v6, v22);
    v25 = vsubq_f32(v8, v20);
    v26 = vsubq_f32(v5, v23);
    v27 = vsubq_f32(v7, v21);
    v28 = vsubq_f32(v11, v21);
    v29 = vsubq_f32(v9, v23);
    v30 = vsubq_f32(v12, v20);
    v31 = vsubq_f32(v10, v22);
    v32 = vsubq_f32(v15, v21);
    v33 = vsubq_f32(v13, v23);
    v34 = vsubq_f32(v16, v20);
    v35 = vsubq_f32(v14, v22);
    v36 = vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v29, v29), v26, v26), v33, v33), vmlaq_f32(vmlaq_f32(vmulq_f32(v28, v28), v27, v27), v32, v32)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v31, v31), v24, v24), v35, v35), vmlaq_f32(vmlaq_f32(vmulq_f32(v30, v30), v25, v25), v34, v34)));
    v36.i64[0] = vpaddq_f32(v36, v36).u64[0];
    v36.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v36.f32, *(float32x2_t *)v36.f32).f32[0]);
    *(float *)(result + 124) = (float)(v36.f32[0] * 3.0) + (float)(v36.f32[0] * 3.0);
  }
  if (*(char *)(result + 134) < 0)
  {
    v37 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v38 = (int16x8_t)vcgeq_f32(v37, v2);
    v39 = (int16x8_t)vcgeq_f32(v37, v1);
    v40 = (int16x8_t)vcgeq_f32(v37, v3);
    v41 = (int16x8_t)vcgeq_f32(v37, v4);
    *(int16x8_t *)(result + 720) = v41;
    *(int16x8_t *)(result + 736) = v40;
    *(int16x8_t *)(result + 752) = v38;
    *(int16x8_t *)(result + 768) = v39;
    v42 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v41, v40), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v38, v39), (int8x16_t)xmmword_20631C0C0));
    v42.i16[0] = vaddvq_s16(v42);
    *(_WORD *)(result + 784) = v42.i16[0];
    *(_BYTE *)(result + 134) = vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)v42.i8));
  }
  v43 = vzip1q_s32((int32x4_t)v5, (int32x4_t)v13);
  v44 = vzip1q_s32((int32x4_t)v6, (int32x4_t)v14);
  v45 = vzip2q_s32((int32x4_t)v5, (int32x4_t)v13);
  v46 = vzip2q_s32((int32x4_t)v6, (int32x4_t)v14);
  v47 = vzip1q_s32((int32x4_t)v10, (int32x4_t)v3);
  v48 = vzip2q_s32((int32x4_t)v9, (int32x4_t)v4);
  v49 = vzip2q_s32((int32x4_t)v10, (int32x4_t)v3);
  v50 = vzip1q_s32(v45, v48);
  v51 = vzip2q_s32(v45, v48);
  v52 = vzip2q_s32(v43, vuzp2q_s32(v43, (int32x4_t)v9));
  v52.i32[3] = v4.i32[1];
  v53 = vzip1q_s32(v43, (int32x4_t)v9);
  v53.i32[3] = v4.i32[0];
  *(int32x4_t *)(result + 432) = v50;
  *(int32x4_t *)(result + 448) = v51;
  *(int32x4_t *)(result + 400) = v53;
  *(int32x4_t *)(result + 416) = v52;
  *(int32x4_t *)(result + 496) = vzip1q_s32(v46, v49);
  *(int32x4_t *)(result + 512) = vzip2q_s32(v46, v49);
  *(int32x4_t *)(result + 464) = vzip1q_s32(v44, v47);
  *(int32x4_t *)(result + 480) = vzip2q_s32(v44, v47);
  v54 = vzip1q_s32((int32x4_t)v7, (int32x4_t)v15);
  v55 = vzip1q_s32((int32x4_t)v8, (int32x4_t)v16);
  v56 = vzip2q_s32((int32x4_t)v7, (int32x4_t)v15);
  v57 = vzip2q_s32((int32x4_t)v8, (int32x4_t)v16);
  v58 = vzip1q_s32((int32x4_t)v12, (int32x4_t)v1);
  v59 = vzip2q_s32((int32x4_t)v11, (int32x4_t)v2);
  v60 = vzip2q_s32((int32x4_t)v12, (int32x4_t)v1);
  v61 = vzip1q_s32(v56, v59);
  v62 = vzip2q_s32(v56, v59);
  v63 = vzip2q_s32(v54, vuzp2q_s32(v54, (int32x4_t)v11));
  v63.i32[3] = v2.i32[1];
  v64 = vzip1q_s32(v54, (int32x4_t)v11);
  v64.i32[3] = v2.i32[0];
  *(int32x4_t *)(result + 560) = v61;
  *(int32x4_t *)(result + 576) = v62;
  *(int32x4_t *)(result + 528) = v64;
  *(int32x4_t *)(result + 544) = v63;
  *(int32x4_t *)(result + 624) = vzip1q_s32(v57, v60);
  *(int32x4_t *)(result + 640) = vzip2q_s32(v57, v60);
  *(int32x4_t *)(result + 592) = vzip1q_s32(v55, v58);
  *(int32x4_t *)(result + 608) = vzip2q_s32(v55, v58);
  v65 = vmulq_f32(v1, v1);
  v66 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32(v5, v7), vaddq_f32(v6, v8)), vaddq_f32(vaddq_f32(v9, v11), vaddq_f32(v10, v12))), vpaddq_f32(vaddq_f32(vaddq_f32(v13, v15), vaddq_f32(v14, v16)), vaddq_f32(vaddq_f32(v4, v2), vaddq_f32(v3, v1))));
  v67 = vpaddq_f32(vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v7, v7), v5, v5), vmlaq_f32(vmulq_f32(v8, v8), v6, v6)), vaddq_f32(vmlaq_f32(vmulq_f32(v11, v11), v9, v9), vmlaq_f32(vmulq_f32(v12, v12), v10, v10))), vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v15, v15), v13, v13), vmlaq_f32(vmulq_f32(v16, v16), v14, v14)), vaddq_f32(vmlaq_f32(vmulq_f32(v2, v2), v4, v4), vmlaq_f32(v65, v3, v3))));
  v68 = vmulq_f32(v66, (float32x4_t)vdupq_n_s32(0x3D800000u));
  v69 = vmlsq_f32(v67, v68, v66);
  *(float32x4_t *)(result + 16) = v68;
  v69.i64[0] = vpaddq_f32(v69, v69).u64[0];
  *(_DWORD *)(result + 120) = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32).u32[0];
  if (*(char *)(result + 136) <= 0)
    *(_BYTE *)(result + 136) = v68.f32[3] >= 0.99988;
  return result;
}

void *DecodeIntegerSequenceEncoding(uint64_t a1, unint64_t a2, size_t __n, unsigned int a4, int a5, int a6, void *__dst, double a8, uint8x8_t a9, uint8x8_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  uint32x4_t v16;
  unint64_t v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char *v21;
  int16x8_t v22;
  unint64_t v23;
  _BYTE *v24;
  unsigned __int8 *v25;
  unsigned int v26;
  unsigned __int8 *v27;
  _OWORD v29[4];
  _OWORD v30[4];
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  memset(v30, 0, sizeof(v30));
  memset(v29, 0, sizeof(v29));
  if ((_DWORD)__n)
  {
    v10 = 0;
    v11 = 0;
    v12 = __n;
    v13 = v29;
    do
    {
      *v13 = (*(unsigned __int16 *)(a1 + ((unint64_t)a2 >> 3)) >> (a2 & 7)) & ~(-1 << a4);
      a2 = a2 + a4;
      if (a5)
      {
        v14 = DecodeIntegerSequenceEncoding_bitsToRead[v10];
        *((_BYTE *)v30 + v11) |= ((*(unsigned __int16 *)(a1 + (a2 >> 3)) >> (a2 & 7)) & ~(-1 << v14)) << DecodeIntegerSequenceEncoding_blockShift[v10];
        LODWORD(a2) = v14 + a2;
        v11 += DecodeIntegerSequenceEncoding_counterIncrement[v10];
        v10 = DecodeIntegerSequenceEncoding_nextCounter[v10];
      }
      if (a6)
      {
        v15 = DecodeIntegerSequenceEncoding_bitsToRead_1[v10];
        *((_BYTE *)v30 + v11) |= ((*(unsigned __int16 *)(a1 + ((unint64_t)a2 >> 3)) >> (a2 & 7)) & ~(-1 << v15)) << DecodeIntegerSequenceEncoding_blockShift_2[v10];
        LODWORD(a2) = v15 + a2;
        v11 += DecodeIntegerSequenceEncoding_counterIncrement_4[v10];
        v10 = DecodeIntegerSequenceEncoding_nextCounter_3[v10];
      }
      ++v13;
      --v12;
    }
    while (v12);
    if (a5)
    {
      v16 = (uint32x4_t)vdupq_n_s32(a4);
      v17 = (__n + 4) / 5uLL;
      v18 = (char *)v29 + 4;
      v19 = (unsigned __int8 *)v30;
      do
      {
        v20 = *v19++;
        v21 = (char *)&tritsTable + 5 * v20;
        a9.i32[0] = *(_DWORD *)v21;
        v22 = (int16x8_t)vshlq_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(a9)), v16);
        a10.i32[0] = *((_DWORD *)v18 - 1);
        a10 = (uint8x8_t)vmovl_u8(a10).u64[0];
        *(int8x8_t *)v22.i8 = vorr_s8((int8x8_t)a10, (int8x8_t)vmovn_s32((int32x4_t)v22));
        a9 = (uint8x8_t)vmovn_s16(v22);
        *((_DWORD *)v18 - 1) = a9.i32[0];
        *v18 |= v21[4] << a4;
        v18 += 5;
        --v17;
      }
      while (v17);
    }
  }
  if (a6 && (_DWORD)__n)
  {
    v23 = (__n + 2) / 3uLL;
    v24 = (char *)v29 + 2;
    v25 = (unsigned __int8 *)v30;
    do
    {
      v26 = *v25++;
      v27 = (unsigned __int8 *)&quintsTable + 3 * v26;
      *(v24 - 2) |= *v27 << a4;
      *(v24 - 1) |= v27[1] << a4;
      *v24 |= v27[2] << a4;
      v24 += 3;
      --v23;
    }
    while (v23);
  }
  return memcpy(__dst, v29, __n);
}

uint64_t Write_RGBA8_vec(uint64_t result, int a2, uint64_t a3, _DWORD *a4, unsigned int a5, int a6, _QWORD *a7)
{
  unsigned int v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  _DWORD *v11;
  int32x4_t v12;

  if (a6)
  {
    v7 = 0;
    for (i = 0; i != a6; ++i)
    {
      v9 = a5;
      v10 = v7;
      v11 = a4;
      if (a5)
      {
        do
        {
          v12 = *(int32x4_t *)(result + 16 * v10 + 288);
          *(uint16x4_t *)v12.i8 = vqadd_u16((uint16x4_t)vqmovun_s32(v12), (uint16x4_t)0x80008000800080);
          *(uint16x4_t *)v12.i8 = vqsub_u16(*(uint16x4_t *)v12.i8, vshr_n_u16(*(uint16x4_t *)v12.i8, 8uLL));
          *v11++ = vmovn_s16((int16x8_t)vrev16q_s8((int8x16_t)v12)).u32[0];
          ++v10;
          --v9;
        }
        while (v9);
      }
      a4 = (_DWORD *)((char *)a4 + *a7);
      v7 += a2;
    }
  }
  return result;
}

unint64_t GetDualPartitionBlockInfo(unsigned int a1, int a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = (a2 - 4);
  v4 = kDualLineSingleWeightTable[kDualLineSingleWeightIndexTable[4 * a1 + (v2 >> 2)]];
  return ((unint64_t)a2 << 40) | ((unint64_t)*((unsigned __int8 *)&v4 + (v2 >> 2) + 4) << 56) | ((unint64_t)(v4 >> 27) << 32) | 0x1D000000000000 | ((_DWORD)v2 << 25) & 0x18000000 | v4 & 0x1FFFFFF;
}

uint64_t PassThrough_4x4_vec(uint64_t result)
{
  int32x4_t *v1;
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int16x8_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;

  v1 = (int32x4_t *)(result + 272);
  if (*(float *)(result + 124) < 0.0)
  {
    v2 = *(float32x4_t **)(result + 32);
    v3 = *(float32x4_t *)(result + 176);
    v4 = *(float32x4_t *)(result + 192);
    v5 = *(float32x4_t *)(result + 144);
    v6 = *(float32x4_t *)(result + 160);
    v8 = *(float32x4_t *)(result + 240);
    v7 = *(float32x4_t *)(result + 256);
    v10 = *(float32x4_t *)(result + 208);
    v9 = *(float32x4_t *)(result + 224);
    v12 = *(float32x4_t *)(result + 304);
    v11 = *(float32x4_t *)(result + 320);
    v14 = *(float32x4_t *)v1;
    v13 = *(float32x4_t *)(result + 288);
    if (v2)
      v15 = *v2;
    else
      v15 = (float32x4_t)xmmword_20631C430;
    v16 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v7, *(float32x2_t *)v15.f32, 1), v4, v15.f32[0]), v11, v15, 2);
    v17 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v8, *(float32x2_t *)v15.f32, 1), v3, v15.f32[0]), v12, v15, 2);
    v18 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v9, *(float32x2_t *)v15.f32, 1), v6, v15.f32[0]), v13, v15, 2);
    v19 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v10, *(float32x2_t *)v15.f32, 1), v5, v15.f32[0]), v14, v15, 2);
    *(float32x4_t *)(result + 656) = v19;
    *(float32x4_t *)(result + 672) = v18;
    *(float32x4_t *)(result + 688) = v17;
    *(float32x4_t *)(result + 704) = v16;
    v20 = vsubq_f32(v6, v18);
    v21 = vsubq_f32(v4, v16);
    v22 = vsubq_f32(v5, v19);
    v23 = vsubq_f32(v3, v17);
    v24 = vsubq_f32(v8, v17);
    v25 = vsubq_f32(v10, v19);
    v26 = vsubq_f32(v7, v16);
    v27 = vsubq_f32(v9, v18);
    v28 = vsubq_f32(v12, v17);
    v29 = vsubq_f32(v14, v19);
    v30 = vsubq_f32(v11, v16);
    v31 = vsubq_f32(v13, v18);
    v32 = vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v25, v25), v22, v22), v29, v29), vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v24), v23, v23), v28, v28)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v27, v27), v20, v20), v31, v31), vmlaq_f32(vmlaq_f32(vmulq_f32(v26, v26), v21, v21), v30, v30)));
    v32.i64[0] = vpaddq_f32(v32, v32).u64[0];
    v32.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v32.f32, *(float32x2_t *)v32.f32).f32[0]);
    *(float *)(result + 124) = (float)(v32.f32[0] * 3.0) + (float)(v32.f32[0] * 3.0);
  }
  v34 = *(float32x4_t *)(result + 368);
  v33 = *(float32x4_t *)(result + 384);
  v36 = *(float32x4_t *)(result + 336);
  v35 = *(float32x4_t *)(result + 352);
  if (*(char *)(result + 134) < 0)
  {
    v37 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v38 = (int16x8_t)vcgeq_f32(v37, v34);
    v39 = (int16x8_t)vcgeq_f32(v37, v33);
    v40 = (int16x8_t)vcgeq_f32(v37, v35);
    v41 = (int16x8_t)vcgeq_f32(v37, v36);
    *(int16x8_t *)(result + 720) = v41;
    *(int16x8_t *)(result + 736) = v40;
    *(int16x8_t *)(result + 752) = v38;
    *(int16x8_t *)(result + 768) = v39;
    v42 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v41, v40), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v38, v39), (int8x16_t)xmmword_20631C0C0));
    v42.i16[0] = vaddvq_s16(v42);
    *(_WORD *)(result + 784) = v42.i16[0];
    *(_BYTE *)(result + 134) = vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)v42.i8));
  }
  v44 = *(float32x4_t *)(result + 176);
  v43 = *(float32x4_t *)(result + 192);
  v45 = *(float32x4_t *)(result + 144);
  v46 = *(float32x4_t *)(result + 160);
  v47 = *(float32x4_t *)(result + 240);
  v48 = *(float32x4_t *)(result + 256);
  v49 = *(float32x4_t *)(result + 208);
  v50 = *(float32x4_t *)(result + 224);
  v52 = *(float32x4_t *)(result + 304);
  v51 = *(float32x4_t *)(result + 320);
  v53 = *(float32x4_t *)v1;
  v54 = *(float32x4_t *)(result + 288);
  v55 = vzip1q_s32((int32x4_t)v45, *v1);
  v56 = vzip1q_s32((int32x4_t)v46, (int32x4_t)v54);
  v57 = vzip2q_s32((int32x4_t)v45, *v1);
  v58 = vzip2q_s32((int32x4_t)v46, (int32x4_t)v54);
  v59 = vzip1q_s32((int32x4_t)v50, (int32x4_t)v35);
  v60 = vzip2q_s32((int32x4_t)v49, (int32x4_t)v36);
  v61 = vzip2q_s32((int32x4_t)v50, (int32x4_t)v35);
  v62 = vzip1q_s32(v57, v60);
  v63 = vzip2q_s32(v57, v60);
  v64 = vzip2q_s32(v55, vuzp2q_s32(v55, (int32x4_t)v49));
  v64.i32[3] = v36.i32[1];
  v65 = vzip1q_s32(v55, (int32x4_t)v49);
  v65.i32[3] = v36.i32[0];
  *(int32x4_t *)(result + 432) = v62;
  *(int32x4_t *)(result + 448) = v63;
  *(int32x4_t *)(result + 400) = v65;
  *(int32x4_t *)(result + 416) = v64;
  *(int32x4_t *)(result + 496) = vzip1q_s32(v58, v61);
  *(int32x4_t *)(result + 512) = vzip2q_s32(v58, v61);
  *(int32x4_t *)(result + 464) = vzip1q_s32(v56, v59);
  *(int32x4_t *)(result + 480) = vzip2q_s32(v56, v59);
  v66 = vzip1q_s32((int32x4_t)v44, (int32x4_t)v52);
  v67 = vzip1q_s32((int32x4_t)v43, (int32x4_t)v51);
  v68 = vzip2q_s32((int32x4_t)v44, (int32x4_t)v52);
  v69 = vzip2q_s32((int32x4_t)v43, (int32x4_t)v51);
  v70 = vzip1q_s32((int32x4_t)v48, (int32x4_t)v33);
  v71 = vzip2q_s32((int32x4_t)v47, (int32x4_t)v34);
  v72 = vzip2q_s32((int32x4_t)v48, (int32x4_t)v33);
  v73 = vzip1q_s32(v68, v71);
  v74 = vzip2q_s32(v68, v71);
  v75 = vzip2q_s32(v66, vuzp2q_s32(v66, (int32x4_t)v47));
  v75.i32[3] = v34.i32[1];
  v76 = vzip1q_s32(v66, (int32x4_t)v47);
  v76.i32[3] = v34.i32[0];
  *(int32x4_t *)(result + 560) = v73;
  *(int32x4_t *)(result + 576) = v74;
  *(int32x4_t *)(result + 528) = v76;
  *(int32x4_t *)(result + 544) = v75;
  *(int32x4_t *)(result + 624) = vzip1q_s32(v69, v72);
  *(int32x4_t *)(result + 640) = vzip2q_s32(v69, v72);
  *(int32x4_t *)(result + 592) = vzip1q_s32(v67, v70);
  *(int32x4_t *)(result + 608) = vzip2q_s32(v67, v70);
  v77 = vmulq_f32(v33, v33);
  v78 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32(v45, v44), vaddq_f32(v46, v43)), vaddq_f32(vaddq_f32(v49, v47), vaddq_f32(v50, v48))), vpaddq_f32(vaddq_f32(vaddq_f32(v53, v52), vaddq_f32(v54, v51)), vaddq_f32(vaddq_f32(v36, v34), vaddq_f32(v35, v33))));
  v79 = vpaddq_f32(vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v44, v44), v45, v45), vmlaq_f32(vmulq_f32(v43, v43), v46, v46)), vaddq_f32(vmlaq_f32(vmulq_f32(v47, v47), v49, v49), vmlaq_f32(vmulq_f32(v48, v48), v50, v50))), vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v52, v52), v53, v53), vmlaq_f32(vmulq_f32(v51, v51), v54, v54)), vaddq_f32(vmlaq_f32(vmulq_f32(v34, v34), v36, v36), vmlaq_f32(v77, v35, v35))));
  v80 = vmulq_f32(v78, (float32x4_t)vdupq_n_s32(0x3D800000u));
  v81 = vmlsq_f32(v79, v80, v78);
  *(float32x4_t *)(result + 16) = v80;
  v81.i64[0] = vpaddq_f32(v81, v81).u64[0];
  *(_DWORD *)(result + 120) = vpadd_f32(*(float32x2_t *)v81.f32, *(float32x2_t *)v81.f32).u32[0];
  if (*(char *)(result + 136) <= 0)
    *(_BYTE *)(result + 136) = v80.f32[3] >= 0.99988;
  return result;
}

int32x4_t Read_4x4_RGBA16_vec@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, int32x4_t *a3@<X8>)
{
  float32x4_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  unsigned __int128 v9;
  int8x16_t v10;
  unsigned __int128 v11;
  uint32x4_t v12;
  int8x16_t *v13;
  unsigned __int128 v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t *v17;
  float32x4_t v18;
  int8x16_t v19;
  float32x4_t v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t result;

  bzero(a3, 0xAC0uLL);
  a3[8].i16[2] = 324;
  a3[8].i8[6] = -1;
  a3[8].i8[8] = -1;
  v6 = *(float32x4_t *)(a1 + 16);
  v7 = (int8x16_t *)(*a2 + a1);
  v8.i64[0] = 0xFFFF0000FFFFLL;
  v8.i64[1] = 0xFFFF0000FFFFLL;
  v9 = *(_OWORD *)&vandq_s8((int8x16_t)v6, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v10 = v7[1];
  v11 = *(_OWORD *)&vandq_s8(*v7, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v12 = vshrq_n_u32(*(uint32x4_t *)v7, 0x10uLL);
  v13 = (int8x16_t *)((char *)v7 + a2[1]);
  v14 = *(_OWORD *)&vshrq_n_u32((uint32x4_t)v6, 0x10uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v16 = *v13;
  v15 = v13[1];
  v6.i64[0] = 0xCB000000CB000000;
  v6.i64[1] = 0xCB000000CB000000;
  v17 = (int8x16_t *)((char *)v13 + a2[2]);
  v18 = vaddq_f32((float32x4_t)v11, v6);
  v19 = v17[1];
  v20 = (float32x4_t)vdupq_n_s32(0x37800080u);
  v21 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)v9, v6), v20);
  v22 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(*(int8x16_t *)a1, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v23 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v10, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v24 = (int32x4_t)vmulq_f32(v18, v20);
  v25 = vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v10, 0x10uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6);
  v26 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)v14, v6), v20);
  v27 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)a1, 0x10uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v28 = (int32x4_t)vmulq_f32(v25, v20);
  v29 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v12 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v30 = vandq_s8(*v17, v8);
  v31 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v15, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v32 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v16, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v33 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v19, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v34 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v30 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v35 = vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32(*(uint32x4_t *)v17, 0x10uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6);
  v36 = vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v19, 0x10uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6);
  v37 = vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v16, 0x10uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6);
  a3[9] = vuzp1q_s32(v22, v21);
  a3[10] = vuzp1q_s32(v24, v23);
  a3[11] = vuzp1q_s32(v32, v31);
  a3[12] = vuzp1q_s32(v34, v33);
  a3[13] = vuzp1q_s32(v27, v26);
  a3[14] = vuzp1q_s32(v29, v28);
  v38 = (int32x4_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v15, 0x10uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v6), v20);
  v39 = (int32x4_t)vmulq_f32(v37, v20);
  v40 = (int32x4_t)vmulq_f32(v36, v20);
  v41 = (int32x4_t)vmulq_f32(v35, v20);
  a3[15] = vuzp1q_s32(v39, v38);
  a3[16] = vuzp1q_s32(v41, v40);
  a3[17] = vuzp2q_s32(v22, v21);
  a3[18] = vuzp2q_s32(v24, v23);
  a3[19] = vuzp2q_s32(v32, v31);
  a3[20] = vuzp2q_s32(v34, v33);
  a3[21] = vuzp2q_s32(v27, v26);
  a3[22] = vuzp2q_s32(v29, v28);
  result = vuzp2q_s32(v39, v38);
  a3[23] = result;
  a3[24] = vuzp2q_s32(v41, v40);
  return result;
}

unint64_t WeightInfoForSingleLineDualWeight(int a1, uint64_t a2, int a3)
{
  int v3;
  char v4;
  char *v5;
  char *v6;

  if (a3 == 342)
  {
    v3 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
    v4 = a1;
    v5 = (char *)&WeightInfoForSingleLineDualWeight_6x5_Table_6x5
       + 8 * WeightInfoForSingleLineDualWeight_6x5_Indices_6x5[4 * a1 + v3];
    v6 = &v5[v3 + 4];
    return *(_QWORD *)v5 & 0xFFE00000FFFE1FFFLL | ((unint64_t)*v6 << 32) & 0xFFE0FFFFFFFFFFFFLL | (a2 << 40) & 0xFFE0FFFFFFFFFFFFLL | ((unint64_t)(v4 & 0x1F) << 48) | ((v3 & 3) << 15);
  }
  if (a3 == 324)
  {
    v3 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
    v4 = a1;
    v5 = (char *)&kSingleLineDualWeightTable + 8 * kSingleLineDualWeightIndexTable[4 * a1 + v3];
    v6 = &v5[v3 + 4];
    return *(_QWORD *)v5 & 0xFFE00000FFFE1FFFLL | ((unint64_t)*v6 << 32) & 0xFFE0FFFFFFFFFFFFLL | (a2 << 40) & 0xFFE0FFFFFFFFFFFFLL | ((unint64_t)(v4 & 0x1F) << 48) | ((v3 & 3) << 15);
  }
  return 0;
}

uint64_t FindWeights_4x4@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, float32x4_t *a4@<X8>)
{
  float32x4_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int16x8_t v13;
  int16x8_t v14;
  int16x8_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x8_t v19;
  int8x8_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float v28;
  float v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  float32x4_t v35;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  int8x16_t *v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x4_t v52;
  int8x16_t v53;
  float v54;
  int8x16_t v55;
  float v56;
  int8x16_t v57;
  int8x16_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int8x16_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int16x8_t v66;
  int16x8_t v67;
  int16x8_t v68;
  int8x8_t v69;
  int8x8_t v70;
  float32x4_t v71;
  int8x16_t v72;
  float32x4_t v73;
  int8x16_t v74;
  float32x4_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  int8x16_t v80;
  int8x16_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  int8x16_t v86;
  int8x16_t v87;
  int8x16_t v88;
  int8x16_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int8x16_t v92;
  float32x4_t v93;
  int8x16_t v94;
  float32x4_t v95;
  int8x16_t v96;
  int8x16_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  int8x16_t v102;
  int8x16_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  int8x16_t v113;
  int8x16_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  int8x16_t v119;
  int8x16_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  int8x16_t v125;
  int8x16_t v126;
  int8x8_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  int8x16_t v132;
  int8x16_t v133;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int8x16_t v138;
  float v139;
  float v140;
  int8x16_t v141;
  int8x8_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  float v152;
  int8x16_t v153;
  int8x16_t v154;
  int8x16_t v155;
  float32x4_t v156;
  int8x16_t v157;
  float32x4_t v158;
  int8x16_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  int8x16_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  float32x4_t v168;
  float32x4_t v169;
  float32x4_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int8x16_t v173;
  int8x16_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  int8x16_t v181;
  int8x16_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int8x16_t v186;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int32x4_t v192;
  int16x8_t v193;
  int16x8_t v194;

  v4 = *(float32x4_t *)(a2 + 80);
  if (a3 > 5)
  {
    v45 = *(float32x4_t *)(a2 + 128);
    v46 = *(int8x16_t **)(result + 32);
    v47 = *(int8x16_t *)(a2 + 80);
    v48 = (int8x16_t)v45;
    if (v46)
    {
      v47 = *v46;
      v48 = *v46;
    }
    v49.i64[0] = -1;
    v49.i64[1] = -1;
    v50 = (int8x16_t)vcgtq_s32(gNormalMasks[a3], v49);
    v51 = (float32x4_t)vandq_s8(v50, v47);
    v52 = (float32x4_t)vandq_s8(v50, v48);
    v53 = (int8x16_t)vmulq_f32(v4, v51);
    v54 = vaddv_f32(vadd_f32(*(float32x2_t *)v53.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v53, v53, 8uLL)));
    v55 = (int8x16_t)vmulq_f32(v45, v52);
    v56 = vaddv_f32(vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v55, v55, 8uLL)));
    if (fabsf(v54) < 0.0039062)
    {
      v57 = (int8x16_t)vmulq_f32(v4, v4);
      v54 = vaddv_f32(vadd_f32(*(float32x2_t *)v57.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v57, v57, 8uLL)));
      v51 = *(float32x4_t *)(a2 + 80);
    }
    if (fabsf(v56) < 0.0039062)
    {
      v58 = (int8x16_t)vmulq_f32(v45, v45);
      v56 = vaddv_f32(vadd_f32(*(float32x2_t *)v58.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v58, v58, 8uLL)));
      v52 = *(float32x4_t *)(a2 + 128);
    }
    v59 = *(int32x4_t *)(a2 + 48);
    v60 = *(int32x4_t *)(a2 + 64);
    v61 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v60.i8, 0);
    v62 = *(int32x4_t *)(a2 + 112);
    v63 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v62.i8, 0);
    v64 = *(int32x4_t *)(a2 + 32);
    v192 = *(int32x4_t *)(a2 + 16);
    v65 = (int16x8_t)vcltzq_s32(v59);
    v66 = (int16x8_t)vcltzq_s32(v64);
    v67 = vuzp1q_s16(v66, v65);
    v193 = (int16x8_t)vcltzq_s32(*(int32x4_t *)a2);
    v194 = (int16x8_t)vcltzq_s32(v192);
    v68 = vuzp1q_s16(v193, v194);
    v69 = vmovn_s16(v68);
    v70 = vmovn_s16(v67);
    v119 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v70, *(int8x8_t *)v4.f32)), 0x1FuLL));
    v71 = (float32x4_t)vbslq_s8(v119, v63, v61);
    v72 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v70, *(int8x8_t *)v4.f32)), 0x1FuLL));
    v73 = (float32x4_t)vbslq_s8(v72, v63, v61);
    v74 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v69, *(int8x8_t *)v4.f32)), 0x1FuLL));
    v75 = (float32x4_t)vbslq_s8(v74, v63, v61);
    v76 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v69, *(int8x8_t *)v4.f32)), 0x1FuLL));
    v77 = vsubq_f32(*(float32x4_t *)(result + 144), (float32x4_t)vbslq_s8(v76, v63, v61));
    v78 = vsubq_f32(*(float32x4_t *)(result + 160), v75);
    v79 = vsubq_f32(*(float32x4_t *)(result + 176), v73);
    v80 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v60.i8, 1);
    v81 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v62.i8, 1);
    v82 = vsubq_f32(*(float32x4_t *)(result + 256), (float32x4_t)vbslq_s8(v119, v81, v80));
    v83 = vsubq_f32(*(float32x4_t *)(result + 240), (float32x4_t)vbslq_s8(v72, v81, v80));
    v84 = vsubq_f32(*(float32x4_t *)(result + 224), (float32x4_t)vbslq_s8(v74, v81, v80));
    v85 = vsubq_f32(*(float32x4_t *)(result + 208), (float32x4_t)vbslq_s8(v76, v81, v80));
    v86 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 0);
    v87 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
    v88 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1);
    v89 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1);
    v90 = vmlaq_f32(vmulq_f32((float32x4_t)vbslq_s8(v119, v89, v88), v82), (float32x4_t)vbslq_s8(v119, v87, v86), vsubq_f32(*(float32x4_t *)(result + 192), v71));
    v91 = vmlaq_f32(vmulq_f32((float32x4_t)vbslq_s8(v72, v89, v88), v83), (float32x4_t)vbslq_s8(v72, v87, v86), v79);
    v92 = (int8x16_t)vdupq_laneq_s32(v60, 2);
    v93 = vmlaq_f32(vmulq_f32((float32x4_t)vbslq_s8(v74, v89, v88), v84), (float32x4_t)vbslq_s8(v74, v87, v86), v78);
    v94 = (int8x16_t)vdupq_laneq_s32(v62, 2);
    v95 = vmlaq_f32(vmulq_f32((float32x4_t)vbslq_s8(v76, v89, v88), v85), (float32x4_t)vbslq_s8(v76, v87, v86), v77);
    v96 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v51, 2);
    v97 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v52, 2);
    v98 = vmlaq_f32(v95, (float32x4_t)vbslq_s8(v76, v97, v96), vsubq_f32(*(float32x4_t *)(result + 272), (float32x4_t)vbslq_s8(v76, v94, v92)));
    v99 = vmlaq_f32(v93, (float32x4_t)vbslq_s8(v74, v97, v96), vsubq_f32(*(float32x4_t *)(result + 288), (float32x4_t)vbslq_s8(v74, v94, v92)));
    v100 = vmlaq_f32(v91, (float32x4_t)vbslq_s8(v72, v97, v96), vsubq_f32(*(float32x4_t *)(result + 304), (float32x4_t)vbslq_s8(v72, v94, v92)));
    v101 = vsubq_f32(*(float32x4_t *)(result + 320), (float32x4_t)vbslq_s8(v119, v94, v92));
    v102 = (int8x16_t)vdupq_laneq_s32(v60, 3);
    v103 = (int8x16_t)vdupq_laneq_s32(v62, 3);
    v104 = (float32x4_t)vbslq_s8(v119, v97, v96);
    v105 = (float32x4_t)vbslq_s8(v119, v103, v102);
    v106 = vmlaq_f32(v90, v104, v101);
    v107 = (float32x4_t)vbslq_s8(v72, v103, v102);
    v108 = (float32x4_t)vbslq_s8(v74, v103, v102);
    v109 = vsubq_f32(*(float32x4_t *)(result + 336), (float32x4_t)vbslq_s8(v76, v103, v102));
    v110 = vsubq_f32(*(float32x4_t *)(result + 352), v108);
    v111 = vsubq_f32(*(float32x4_t *)(result + 368), v107);
    v112 = vsubq_f32(*(float32x4_t *)(result + 384), v105);
    v113 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v51, 3);
    v114 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v52, 3);
    v115 = (float32x4_t)vbslq_s8(v76, v114, v113);
    v116 = (float32x4_t)vbslq_s8(v74, v114, v113);
    v117 = (float32x4_t)vbslq_s8(v72, v114, v113);
    v118 = (float32x4_t)vbslq_s8(v119, v114, v113);
    v52.i32[0] = 0;
    v119.i32[0] = 0;
    if (fabsf(v54) >= 0.00024414)
      *(float *)v119.i32 = vrecpes_f32(v54);
    v120 = vuzp1q_s8((int8x16_t)v68, (int8x16_t)v67);
    v121 = vmlaq_f32(v106, v118, v112);
    v122 = vmlaq_f32(v100, v117, v111);
    v123 = vmlaq_f32(v99, v116, v110);
    v124 = vmlaq_f32(v98, v115, v109);
    if (fabsf(v56) >= 0.00024414)
      v52.f32[0] = vrecpes_f32(v56);
    v125 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v119.i8, 0);
    v126 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
    v127 = (int8x8_t)vextq_s8(v120, v120, 8uLL).u64[0];
    v128 = vmulq_f32(v123, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v120.i8, *(int8x8_t *)v4.f32)), 0x1FuLL)), v126, v125));
    v129 = vmulq_f32(v124, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v120.i8, *(int8x8_t *)v4.f32)), 0x1FuLL)), v126, v125));
    v130 = vmulq_f32(v121, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v127, *(int8x8_t *)v4.f32)), 0x1FuLL)), v126, v125));
    v131 = vmulq_f32(v122, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v127, *(int8x8_t *)v4.f32)), 0x1FuLL)), v126, v125));
    if (*(char *)(result + 134) >= 1)
    {
      v4.i32[0] = 0;
      v67.i32[0] = 0;
      if (fabsf(v4.f32[3]) >= 0.0039062)
        *(float *)v67.i32 = vrecpes_f32(v4.f32[3]);
      if (fabsf(v45.f32[3]) >= 0.0039062)
        v4.f32[0] = vrecpes_f32(v45.f32[3]);
      v132 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v67.i8, 0);
      v133 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0);
      v128 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(result + 736)), (int8x16_t)vmulq_f32(v110, (float32x4_t)vorrq_s8(vandq_s8(v133, (int8x16_t)v194), vandq_s8((int8x16_t)vcgezq_s32(v192), v132))), (int8x16_t)v128);
      v129 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(result + 720)), (int8x16_t)vmulq_f32(v109, (float32x4_t)vorrq_s8(vandq_s8(v133, (int8x16_t)v193), vandq_s8((int8x16_t)vcgezq_s32(*(int32x4_t *)a2), v132))), (int8x16_t)v129);
      v131 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(result + 752)), (int8x16_t)vmulq_f32(v111, (float32x4_t)vorrq_s8(vandq_s8(v133, (int8x16_t)v66), vandq_s8((int8x16_t)vcgezq_s32(v64), v132))), (int8x16_t)v131);
      v130 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(result + 768)), (int8x16_t)vmulq_f32(v112, (float32x4_t)vorrq_s8(vandq_s8(v133, (int8x16_t)v65), vandq_s8((int8x16_t)vcgezq_s32(v59), v132))), (int8x16_t)v130);
    }
    __asm { FMOV            V0.4S, #1.0 }
    v135 = vminnmq_f32(v128, _Q0);
    v136 = vminnmq_f32(v131, _Q0);
    v137 = vminnmq_f32(v130, _Q0);
    v41 = vmaxnmq_f32(vminnmq_f32(v129, _Q0), (float32x4_t)0);
    v42 = vmaxnmq_f32(v135, (float32x4_t)0);
    v43 = vmaxnmq_f32(v136, (float32x4_t)0);
    v44 = vmaxnmq_f32(v137, (float32x4_t)0);
  }
  else
  {
    v5 = *(int32x4_t *)(a2 + 48);
    v6 = *(int32x4_t *)(a2 + 64);
    v7 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v6.i8, 0);
    v9 = *(int32x4_t *)(a2 + 112);
    v8 = *(float32x4_t *)(a2 + 128);
    v10 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
    v12 = *(int32x4_t *)(a2 + 16);
    v11 = *(int32x4_t *)(a2 + 32);
    v13 = (int16x8_t)vcltzq_s32(v12);
    v14 = (int16x8_t)vcltzq_s32(*(int32x4_t *)a2);
    v15 = (int16x8_t)vcltzq_s32(v5);
    v16 = (int16x8_t)vcltzq_s32(v11);
    v17 = vuzp1q_s16(v16, v15);
    v18 = vuzp1q_s16(v14, v13);
    v19 = vmovn_s16(v17);
    v20 = vmovn_s16(v18);
    v21 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v20, *(int8x8_t *)v4.f32)), 0x1FuLL)), v10, v7);
    v22 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v20, *(int8x8_t *)v4.f32)), 0x1FuLL)), v10, v7);
    v23 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v19, *(int8x8_t *)v4.f32)), 0x1FuLL)), v10, v7);
    v24 = vsubq_f32(*(float32x4_t *)(result + 704), (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v19, *(int8x8_t *)v4.f32)), 0x1FuLL)), v10, v7));
    v25 = vsubq_f32(*(float32x4_t *)(result + 688), v23);
    v26 = vsubq_f32(*(float32x4_t *)(result + 672), v22);
    v27 = vsubq_f32(*(float32x4_t *)(result + 656), v21);
    if (a3 > 3)
    {
      v138 = vuzp1q_s8((int8x16_t)v18, (int8x16_t)v17);
      LODWORD(v139) = HIDWORD(*(_OWORD *)(a2 + 80));
      LODWORD(v140) = HIDWORD(*(_OWORD *)(a2 + 128));
      v141 = (int8x16_t)vdupq_laneq_s32(v6, 3);
      v151 = (int8x16_t)vdupq_laneq_s32(v9, 3);
      v142 = (int8x8_t)vextq_s8(v138, v138, 8uLL).u64[0];
      v149 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v142, *(int8x8_t *)v4.f32)), 0x1FuLL)), v151, v141);
      v143 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v142, *(int8x8_t *)v4.f32)), 0x1FuLL)), v151, v141);
      v144 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v138.i8, *(int8x8_t *)v4.f32)), 0x1FuLL)), v151, v141);
      v150 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v138.i8, *(int8x8_t *)v4.f32)), 0x1FuLL)), v151, v141);
      v145 = vsubq_f32(*(float32x4_t *)(result + 352), v150);
      v146 = vsubq_f32(*(float32x4_t *)(result + 336), v144);
      v147 = vsubq_f32(*(float32x4_t *)(result + 384), v143);
      v148 = vsubq_f32(*(float32x4_t *)(result + 368), v149);
      *(float *)v151.i32 = vmuls_lane_f32(v4.f32[3], v4, 3) + (float)(v4.f32[0] * v4.f32[0]);
      v149.f32[0] = vmuls_lane_f32(v8.f32[3], v8, 3) + (float)(v8.f32[0] * v8.f32[0]);
      v143.f32[0] = fabsf(*(float *)v151.i32);
      v150.i32[0] = 0;
      *(float *)v151.i32 = vrecpes_f32(*(float *)v151.i32);
      if (v143.f32[0] < 0.000015259)
        *(float *)v151.i32 = 0.0;
      v152 = fabsf(v149.f32[0]);
      v149.f32[0] = vrecpes_f32(v149.f32[0]);
      if (v152 < 0.000015259)
        v149.f32[0] = 0.0;
      v153 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0);
      v154 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
      v155 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v138.i8, *(int8x8_t *)v4.f32)), 0x1FuLL));
      v156 = (float32x4_t)vbslq_s8(v155, v154, v153);
      v157 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v138.i8, *(int8x8_t *)v4.f32)), 0x1FuLL));
      v158 = (float32x4_t)vbslq_s8(v157, v154, v153);
      v159 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v142, *(int8x8_t *)v4.f32)), 0x1FuLL));
      v160 = (float32x4_t)vbslq_s8(v159, v154, v153);
      v161 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v142, *(int8x8_t *)v4.f32)), 0x1FuLL));
      v162 = (float32x4_t)vbslq_s8(v161, v154, v153);
      v163 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v4, 3);
      v164 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v8, 3);
      v165 = (float32x4_t)vbslq_s8(v161, v164, v163);
      v166 = (float32x4_t)vbslq_s8(v159, v164, v163);
      v167 = (float32x4_t)vbslq_s8(v157, v164, v163);
      v168 = vmulq_f32((float32x4_t)vbslq_s8(v155, v164, v163), v145);
      v169 = vmlaq_f32(vmulq_f32(v165, v148), v162, v25);
      v170 = vmlaq_f32(vmulq_f32(v166, v147), v160, v24);
      v171 = vmlaq_f32(vmulq_f32(v167, v146), v158, v27);
      v172 = vmlaq_f32(v168, v156, v26);
      v173 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v151.i8, 0);
      v174 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v149.f32, 0);
      v175 = (float32x4_t)vbslq_s8(v161, v174, v173);
      v176 = (float32x4_t)vbslq_s8(v159, v174, v173);
      v177 = vmulq_f32(v172, (float32x4_t)vbslq_s8(v155, v174, v173));
      v178 = vmulq_f32(v171, (float32x4_t)vbslq_s8(v157, v174, v173));
      v179 = vmulq_f32(v170, v176);
      v180 = vmulq_f32(v169, v175);
      if (*(char *)(result + 134) >= 1)
      {
        if (fabsf(v139) >= 0.000015259)
          v150.f32[0] = vrecpes_f32(v139);
        v171.i32[0] = 0;
        if (fabsf(v140) >= 0.000015259)
          v171.f32[0] = vrecpes_f32(v140);
        v181 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v150.f32, 0);
        v182 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v171.f32, 0);
        v183 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v138.i8, *(int8x8_t *)v177.f32)), 0x1FuLL)), v182, v181);
        v184 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v138.i8, *(int8x8_t *)v177.f32)), 0x1FuLL)), v182, v181);
        v185 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v142, *(int8x8_t *)v177.f32)), 0x1FuLL)), v182, v181);
        v186 = (int8x16_t)vmulq_f32(v148, (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v142, *(int8x8_t *)v177.f32)), 0x1FuLL)), v182, v181));
        v177 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(result + 736)), (int8x16_t)vmulq_f32(v145, v183), (int8x16_t)v177);
        v178 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(result + 720)), (int8x16_t)vmulq_f32(v146, v184), (int8x16_t)v178);
        v179 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(result + 768)), (int8x16_t)vmulq_f32(v147, v185), (int8x16_t)v179);
        v180 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(result + 752)), v186, (int8x16_t)v180);
      }
      __asm { FMOV            V1.4S, #1.0 }
      v188 = vminnmq_f32(v178, _Q1);
      v189 = vminnmq_f32(v177, _Q1);
      v190 = vminnmq_f32(v180, _Q1);
      v191 = vminnmq_f32(v179, _Q1);
      v41 = vmaxnmq_f32(v188, (float32x4_t)0);
      v42 = vmaxnmq_f32(v189, (float32x4_t)0);
      v43 = vmaxnmq_f32(v190, (float32x4_t)0);
      v44 = vmaxnmq_f32(v191, (float32x4_t)0);
    }
    else
    {
      v28 = fabsf(v4.f32[0]);
      v4.f32[0] = vrecpes_f32(v4.f32[0]);
      if (v28 < 0.000015259)
        v4.f32[0] = 0.0;
      v29 = fabsf(v8.f32[0]);
      v8.f32[0] = vrecpes_f32(v8.f32[0]);
      if (v29 < 0.000015259)
        v8.f32[0] = 0.0;
      v30 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v4.f32, 0);
      v31 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
      v32 = vandq_s8((int8x16_t)vcgezq_s32(v5), v30);
      v33 = vandq_s8((int8x16_t)vcgezq_s32(v11), v30);
      v34 = vandq_s8((int8x16_t)vcgezq_s32(v12), v30);
      v35 = vmaxnmq_f32(vmulq_f32(v27, (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v14), vandq_s8((int8x16_t)vcgezq_s32(*(int32x4_t *)a2), v30))), (float32x4_t)0);
      __asm { FMOV            V4.4S, #1.0 }
      v41 = vminnmq_f32(v35, _Q4);
      v42 = vminnmq_f32(vmaxnmq_f32(vmulq_f32(v26, (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v13), v34)), (float32x4_t)0), _Q4);
      v43 = vminnmq_f32(vmaxnmq_f32(vmulq_f32(v25, (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v16), v33)), (float32x4_t)0), _Q4);
      v44 = vminnmq_f32(vmaxnmq_f32(vmulq_f32(v24, (float32x4_t)vorrq_s8(vandq_s8(v31, (int8x16_t)v15), v32)), (float32x4_t)0), _Q4);
    }
  }
  *a4 = v41;
  a4[1] = v42;
  a4[2] = v43;
  a4[3] = v44;
  return result;
}

uint64_t ASTCEncoder::DecompressTexels(ASTCEncoder *this, const at_block_buffer_t *a2, const at_texel_region_t *a3, at_flags_t a4)
{
  unsigned int v4;
  unint64_t *v8;
  _BYTE *PartitionTables2D;
  unint64_t v11;
  int v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  __int128 v16;
  char *texels;
  uint64_t v18;
  size_t rowBytes;
  unint64_t v20;
  uint64_t v21;
  size_t v22;
  unint64_t v23;
  _BOOL4 v24;
  NSObject *global_queue;
  qos_class_t v26;
  int i;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *blocks;
  uint64_t v34;
  uint64_t v35;
  uint32_t z;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  size_t v42;
  uint64_t v43;
  int v44;
  int v45;
  _BOOL4 v46;
  uint64_t v47;
  _DWORD v48[17];
  __int128 v49;
  __int128 v50;
  uint64_t v51;

  v4 = a4;
  v8 = (unint64_t *)((char *)this + 96);
  if (!*((_QWORD *)this + 12))
  {
    PartitionTables2D = allocatePartitionTables2D(*((_DWORD *)this + 4), *((_DWORD *)this + 5));
    while (!__ldaxr(v8))
    {
      if (!__stlxr((unint64_t)PartitionTables2D, v8))
        goto LABEL_7;
    }
    __clrex();
    free(PartitionTables2D);
  }
LABEL_7:
  v11 = (*(uint64_t (**)(ASTCEncoder *, _QWORD, _QWORD))(*(_QWORD *)this + 56))(this, *(_QWORD *)&a3->validSize.x, a3->validSize.z);
  v13 = v12;
  v49 = 0u;
  v50 = 0u;
  v14 = (__int128 *)*((_QWORD *)this + 1);
  v15 = *((_QWORD *)this + 2);
  v16 = *v14;
  texels = (char *)a3->texels;
  v18 = *(_QWORD *)&a3->validSize.x;
  v31 = 0;
  v32 = texels;
  rowBytes = a2->rowBytes;
  blocks = (char *)a2->blocks;
  v34 = 0;
  v35 = v18;
  z = a3->validSize.z;
  v37 = v15;
  v38 = *((_DWORD *)this + 6);
  v20 = *((_QWORD *)v14 + 2);
  v21 = (v20 >> 34) & 0x1F;
  LODWORD(v20) = (v20 >> 26) & 0xF;
  LODWORD(v18) = *((_DWORD *)this + 4);
  v22 = HIDWORD(v11);
  v51 = 0;
  v30 = v16;
  v39 = v21 / v20;
  v40 = ((int)v20 + (int)v21 * (int)v18 - 1) / v20;
  v41 = *(_OWORD *)&a3->rowBytes;
  v42 = rowBytes;
  v43 = 0;
  v44 = 0;
  v45 = HIDWORD(v11);
  v46 = (_DWORD)v18 * (_DWORD)v11 != a3->validSize.x;
  memset(v48, 0, sizeof(v48));
  v47 = 0;
  *(_QWORD *)&v48[3] = *((_QWORD *)this + 12);
  v48[5] = (v4 >> 5) & 1;
  v23 = (*(uint64_t (**)(ASTCEncoder *))(*(_QWORD *)this + 96))(this);
  v24 = 0;
  if (v23 >= 0x11)
    v24 = (unint64_t)(*(uint64_t (**)(ASTCEncoder *))(*(_QWORD *)this + 96))(this) < 0x1F;
  global_queue = 0;
  v48[6] = v24;
  memset(&v48[7], 0, 40);
  v49 = *((_OWORD *)this + 4);
  *(_QWORD *)&v50 = *((_QWORD *)this + 10);
  *((_QWORD *)&v50 + 1) = &v51;
  if ((v4 & 4) == 0 && v22 >= 2)
  {
    v26 = qos_class_self();
    global_queue = dispatch_get_global_queue(v26, 0);
  }
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      if (global_queue)
      {
        dispatch_apply_f(v22, global_queue, &v30, (void (__cdecl *)(void *, size_t))DecodeRow);
      }
      else if ((_DWORD)v22)
      {
        v28 = 0;
        do
          DecodeRow((uint64_t)&v30, v28++);
        while (v22 != v28);
      }
      v32 += *((_QWORD *)&v41 + 1);
      blocks += v43;
      z -= *((_DWORD *)this + 6);
      LODWORD(v47) = i;
    }
  }
  return v51;
}

float at_encoder_compress_texels(at_encoder_t encoder, const at_texel_region_t *src, const at_block_buffer_t *dest, float errorThreshold, at_flags_t flags)
{
  const at_texel_region_t *v8;
  uint32_t z;
  uint64_t v11;
  size_t rowBytes;
  size_t sliceBytes;
  at_encoder_t v14;
  uint64_t v15;
  uint32_t v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  BOOL v21;
  uint64_t v23;
  int64_t v24;
  int64_t v25;
  int64_t v26;
  int64_t v27;
  size_t v28;
  size_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  at_size_t v34;
  _QWORD v35[2];
  uint32_t v36;
  uint64_t v37;
  size_t v38;

  v8 = src;
  if ((flags & 0x10) != 0)
  {
    z = src->validSize.z;
    v11 = *(_QWORD *)&src->validSize.x;
    rowBytes = src->rowBytes;
    sliceBytes = src->sliceBytes;
    v35[0] = (char *)src->texels + rowBytes * (src->validSize.y - 1);
    v35[1] = v11;
    v36 = z;
    v37 = -(uint64_t)rowBytes;
    v38 = sliceBytes;
    v8 = (const at_texel_region_t *)v35;
  }
  v14 = encoder + 10;
  v15 = (*((uint64_t (**)(at_encoder_t, _QWORD, _QWORD))encoder[10].isa + 7))(encoder + 10, *(_QWORD *)&v8->validSize.x, v8->validSize.z);
  v17 = v16;
  *(_QWORD *)&v34.x = v15;
  v34.z = v16;
  if ((flags & 1) != 0)
    return (*((float (**)(at_encoder_t, const at_texel_region_t *, const at_block_buffer_t *, at_flags_t, float))v14->isa
            + 16))(encoder + 10, v8, dest, flags, fmaxf(errorThreshold, 0.0));
  v18 = v15;
  v19 = (*((uint64_t (**)(at_encoder_t))v14->isa + 9))(encoder + 10);
  if ((flags & 0xFFFFFFFFFFFFFFA0) != 0)
  {
    v20 = -4.0;
    if ((flags & 2) != 0)
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: unknown flags bit: 0x%8.8llx\n");
    return v20;
  }
  if ((_DWORD)v18)
    v21 = HIDWORD(v18) == 0;
  else
    v21 = 1;
  if (v21 || v17 == 0)
  {
    v20 = -1.0;
    if ((flags & 2) != 0)
      fwrite("at_encoder_compress_texels error: consecutive dest rows alias.\n\tA member of src->validSize is zero.\n", 0x64uLL, 1uLL, (FILE *)*MEMORY[0x24BDAC8D8]);
  }
  else
  {
    if (!((HIDWORD(v18) | v18) >> 24))
    {
      v23 = v19;
      if (HIDWORD(v18) >= 2)
      {
        v24 = dest->rowBytes;
        if (v24 < 0)
          v24 = -v24;
        if (v24 < (*((uint64_t (**)(at_encoder_t))v14->isa + 9))(encoder + 10)
                 * (unint64_t)v18)
        {
          v20 = -1.0;
          if ((flags & 2) != 0)
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: consecutive dest rows alias.\n\t dest->rowBytes %lu is too small for %u blocks->\n");
          return v20;
        }
        v25 = v8->rowBytes;
        if (v25)
        {
          if (v25 < 0)
            v25 = -v25;
          if (v25 < (((unint64_t)encoder[6].isa >> 34) & 0x1F)
                   * v8->validSize.x
                   * ((encoder[6].isa >> 26) & 0xF))
          {
            v20 = -1.0;
            if ((flags & 2) != 0)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: consecutive src rows alias.\n\t src->rowBytes %lu is too small for %u blocks->\n");
            return v20;
          }
        }
      }
      if (v17 >= 2)
      {
        v26 = dest->rowBytes;
        v27 = dest->sliceBytes;
        if (v27 >= 0)
          v28 = dest->sliceBytes;
        else
          v28 = -v27;
        if (v26 >= 0)
          v29 = dest->rowBytes;
        else
          v29 = -v26;
        if (v28 < v29 * HIDWORD(v18))
        {
          v20 = -1.0;
          if ((flags & 2) != 0)
            fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: consecutive dest slices alias.\n\t dest->sliceBytes %lu is too small for %u rows * dest->rowBytes.\n");
          return v20;
        }
        v30 = v8->sliceBytes;
        if (v30)
        {
          if (v30 < 0)
            v30 = -v30;
          v31 = v8->rowBytes;
          if (v31 < 0)
            v31 = -v31;
          if (v30 < v31 * (unint64_t)v18)
          {
            v20 = -1.0;
            if ((flags & 2) != 0)
              fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: consecutive src slices alias.\n\t dest->sliceBytes %lu is too small for %u block rows.\n");
            return v20;
          }
        }
      }
      if (errorThreshold < 0.0)
      {
        v20 = -1.0;
        if ((flags & 2) != 0)
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: errorThreshold (%g) should be at least zero.\n\tThe error threshold is square error per normalized texel, not PSNR or other measure. x**2 >= 0\n.\tThe encoder will try multiple encoding methods until one arrives <= error threshold.\n.\tSmaller error thresholds demand more accuracy and cause the encoder to take longer.\n\tA value of zero means try all encodings and return the best result.\n");
        return v20;
      }
      v32 = v23 - 1;
      if (((v23 - 1) & (uint64_t)dest->blocks) != 0)
      {
        v20 = -1.0;
        if ((flags & 2) != 0)
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: dest->blocks (%p) must be aligned to the block size (%lu)\n");
        return v20;
      }
      if ((dest->rowBytes & v32) != 0)
      {
        v20 = -1.0;
        if ((flags & 2) != 0)
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: dest->rowBytes (%lx) must be a multiple of the block size (%lu) to guarantee alignment\n");
        return v20;
      }
      if ((dest->sliceBytes & v32) != 0)
      {
        v20 = -1.0;
        if ((flags & 2) != 0)
          fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: dest->sliceBytes (%lx) must be a multiple of the block size (%lu) to guarantee alignment\n");
        return v20;
      }
      if ((unint64_t)(*((uint64_t (**)(at_encoder_t))v14->isa + 12))(encoder + 10) < 0x21
        || (unint64_t)(*((uint64_t (**)(at_encoder_t))v14->isa + 12))(encoder + 10) > 0x2A)
      {
        ATEncoderCompressTexels_BlockBufferIsNotWritableOrIsNot16ByteAligned(dest, &v34);
      }
      else
      {
        ATEncoderCompressTexels_BlockBufferIsNotWritable(dest, &v34, v23);
      }
      return (*((float (**)(at_encoder_t, const at_texel_region_t *, const at_block_buffer_t *, at_flags_t, float))v14->isa
              + 16))(encoder + 10, v8, dest, flags, fmaxf(errorThreshold, 0.0));
    }
    v20 = -1.0;
    if ((flags & 2) != 0)
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels error: Exceeded capabilites of ASTC specification. Too many blocks->\n\tno more than 2**24-1 blocks may be present in any dimension {%u, %u, %u}\n");
  }
  return v20;
}

uint64_t DecodeRow(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  unsigned int v18;
  __int128 v19;
  _BYTE v20[28];
  int v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v5 = result;
  v24 = *MEMORY[0x24BDAC8D0];
  v6 = result + 88;
  v7 = (__int128 *)(*(_QWORD *)(result + 32) + *(_QWORD *)(result + 104) * a2);
  v9 = *(unsigned int *)(result + 60);
  v8 = *(unsigned int *)(result + 64);
  v10 = *(_QWORD *)(result + 24) + v8 * a2 * *(_QWORD *)(result + 88);
  v11 = *(unsigned int *)(result + 48);
  v12 = *(_DWORD *)(result + 52) - v8 * a2;
  if (v12 >= v8)
    v12 = *(_DWORD *)(result + 64);
  v18 = v12;
  if (v11 >= v9)
  {
    do
    {
      bzero(v20, 0xA50uLL);
      v23 = *(_QWORD *)(v5 + 160);
      v19 = *v7;
      v2 = v2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 68);
      v13 = (*(uint64_t (**)(__int128 *, _QWORD, unint64_t, _QWORD, _BYTE *))(v5 + 208))(&v19, *(_QWORD *)(v5 + 60), v2, *(_QWORD *)(v5 + 152), v20);
      if (!v21)
      {
        v22 = *(_OWORD *)v5;
        v3 = v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 68);
        (*(void (**)(_QWORD, unint64_t, _BYTE *))(v5 + 224))(*(_QWORD *)(v5 + 60), v3, v20);
      }
      v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v5 + 68);
      result = (*(uint64_t (**)(_BYTE *, _QWORD, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD))(v5 + 216))(v20, *(_QWORD *)(v5 + 60), v4, v10, *(_QWORD *)(v5 + 60), v18, v6, *(_QWORD *)(v5 + 96));
      v14 = *(_QWORD *)(v5 + 80);
      if (v13)
      {
        v15 = *(uint64_t **)(v5 + 232);
        if (!*v15)
          *v15 = v13;
      }
      v10 += v14;
      ++v7;
      v11 -= v9;
    }
    while (v11 >= v9);
  }
  if (v11)
  {
    bzero(v20, 0xA50uLL);
    v23 = *(_QWORD *)(v5 + 160);
    v19 = *v7;
    v16 = (*(uint64_t (**)(__int128 *, _QWORD, _QWORD, _QWORD, _BYTE *))(v5 + 208))(&v19, *(_QWORD *)(v5 + 60), *(unsigned int *)(v5 + 68), *(_QWORD *)(v5 + 152), v20);
    if (!v21)
    {
      v22 = *(_OWORD *)v5;
      (*(void (**)(_QWORD, _QWORD, _BYTE *))(v5 + 224))(*(_QWORD *)(v5 + 60), *(unsigned int *)(v5 + 68), v20);
    }
    result = (*(uint64_t (**)(_BYTE *, _QWORD, _QWORD, uint64_t, unint64_t, _QWORD, uint64_t, _QWORD))(v5 + 216))(v20, *(_QWORD *)(v5 + 60), *(unsigned int *)(v5 + 68), v10, v11, v18, v6, *(_QWORD *)(v5 + 96));
    if (v16)
    {
      v17 = *(uint64_t **)(v5 + 232);
      if (!*v17)
        *v17 = v16;
    }
  }
  return result;
}

{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  _BYTE v21[28];
  int v22;
  __int128 v23;
  int v24;
  _BOOL4 v25;
  int v26;
  uint64_t v27;

  v4 = result;
  v27 = *MEMORY[0x24BDAC8D0];
  v5 = result + 88;
  v6 = *(_QWORD *)(result + 32) + *(_QWORD *)(result + 104) * a2;
  v8 = *(unsigned int *)(result + 60);
  v7 = *(unsigned int *)(result + 64);
  v9 = *(_QWORD *)(result + 24) + v7 * a2 * *(_QWORD *)(result + 88);
  v10 = *(unsigned int *)(result + 48);
  v11 = *(_DWORD *)(result + 52) - v7 * a2;
  if (v11 >= v7)
    v12 = v7;
  else
    v12 = v11;
  if (v10 >= v8)
  {
    do
    {
      bzero(v21, 0xA50uLL);
      v13 = *(_DWORD *)(v4 + 172);
      v24 = *(_DWORD *)(v4 + 168);
      v25 = v13 != 0;
      v26 = v13;
      v14 = (*(uint64_t (**)(uint64_t, _BYTE *))(v4 + 216))(v6, v21);
      if (!v22)
      {
        v23 = *(_OWORD *)v4;
        v3 = v3 & 0xFFFFFFFF00000000 | *(unsigned int *)(v4 + 68);
        (*(void (**)(_QWORD, unint64_t, _BYTE *))(v4 + 232))(*(_QWORD *)(v4 + 60), v3, v21);
      }
      v2 = v2 & 0xFFFFFFFF00000000 | *(unsigned int *)(v4 + 68);
      result = (*(uint64_t (**)(_BYTE *, _QWORD, unint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(v4 + 224))(v21, *(_QWORD *)(v4 + 60), v2, v9, *(_QWORD *)(v4 + 60), v12, v5, *(_QWORD *)(v4 + 96));
      v15 = *(_QWORD *)(v4 + 80);
      v16 = *(_QWORD *)(v4 + 120);
      if (v14)
      {
        v17 = *(uint64_t **)(v4 + 240);
        if (!*v17)
          *v17 = v14;
      }
      v9 += v15;
      v6 += v16;
      v10 -= v8;
    }
    while (v10 >= v8);
  }
  if (v10)
  {
    bzero(v21, 0xA50uLL);
    v18 = *(_DWORD *)(v4 + 172);
    v24 = *(_DWORD *)(v4 + 168);
    v25 = v18 != 0;
    v26 = v18;
    v19 = (*(uint64_t (**)(uint64_t, _BYTE *))(v4 + 216))(v6, v21);
    if (!v22)
    {
      v23 = *(_OWORD *)v4;
      (*(void (**)(_QWORD, _QWORD, _BYTE *))(v4 + 232))(*(_QWORD *)(v4 + 60), *(unsigned int *)(v4 + 68), v21);
    }
    result = (*(uint64_t (**)(_BYTE *, _QWORD, _QWORD, uint64_t, unint64_t, uint64_t, uint64_t, _QWORD))(v4 + 224))(v21, *(_QWORD *)(v4 + 60), *(unsigned int *)(v4 + 68), v9, v10, v12, v5, *(_QWORD *)(v4 + 96));
    if (v19)
    {
      v20 = *(uint64_t **)(v4 + 240);
      if (!*v20)
        *v20 = v19;
    }
  }
  return result;
}

uint64_t DecodeASTC_RGBA_vec(uint64_t result, unint64_t a2, double a3, double a4, uint8x8_t a5, uint64_t a6, uint64_t a7, unsigned int *a8)
{
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  _OWORD *v18;
  int v19;
  __int128 v20;
  int32x4_t v21;
  int32x4_t v22;
  int32x4_t v23;
  int8x16_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  _OWORD *v33;
  int v34;
  __int128 v35;
  unsigned int v36;
  uint64_t v37;
  size_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  _OWORD *v45;
  int v46;
  __int128 v47;
  uint64_t v48;
  int8x16_t v49;
  int32x4_t v50;
  int32x2_t v51;
  int8x8_t v52;
  int8x8_t v53;
  _BYTE *v54;
  char *v55;
  uint64_t v56;
  char v57;
  _BYTE *v58;
  char *v59;
  _BYTE *v60;
  unint64_t v61;
  unsigned int v62;
  uint64_t v63;
  BOOL v64;
  unint64_t v65;
  unsigned int v66;
  unsigned int v67;
  int v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;
  int v73;
  __int128 v74;
  unsigned int v75;
  int v76;
  unsigned int v77;
  unint64_t v78;
  int v79;
  uint32x2_t v80;
  __int8 *v81;
  __int8 *v82;
  int32x2_t v83;
  int32x2_t v84;
  unsigned int v85;
  int v86;
  unint64_t v87;
  size_t v88;
  uint64_t v89;
  _OWORD *v90;
  int v91;
  __int128 v92;
  uint64_t v93;
  int v94;
  int v95;
  unsigned int v96;
  int32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  uint64_t v100;
  unsigned int v101;
  char *p_dst;
  unsigned int v103;
  int v104;
  unsigned int v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  int v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  int32x4_t v115;
  int32x4_t v116;
  int v117;
  unsigned int v118;
  int32x4_t *v119;
  int32x4_t *v120;
  unsigned __int32 v121;
  int32x4_t v122;
  int v123;
  int v124;
  char *v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  int32x4_t v129;
  char *v130;
  int8x8_t v131;
  int8x8_t v132;
  int32x2_t v133;
  int32x2_t v134;
  int v135;
  char *v136;
  int v137;
  int v138;
  int v139;
  char v140;
  char v141;
  int v142;
  int v143;
  int v144;
  int v145;
  char *v146;
  __int8 *v147;
  unsigned __int8 v148;
  BOOL v149;
  char *v150;
  int32x2_t v151;
  char *v152;
  __int8 *v153;
  __int8 *v154;
  __int32 v155;
  char *v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  BOOL v164;
  unsigned int v165;
  unsigned int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  unsigned int v175;
  int v176;
  int v177;
  unsigned int v178;
  int v179;
  int v180;
  int v181;
  unsigned int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  int v187;
  int v188;
  int v189;
  int v190;
  int v191;
  int v192;
  unsigned int v193;
  int v194;
  int v195;
  char v196;
  int v197;
  int v198;
  int v199;
  unsigned int v200;
  int v201;
  int32x4_t v202;
  int8x16_t v203;
  int32x4_t v204;
  int32x4_t v205;
  char *v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  unsigned __int32 v211;
  __int32 v212;
  char *v213;
  __int8 *v214;
  __int8 *v215;
  __int8 *v216;
  __int8 *v217;
  unsigned int v218;
  uint32x2_t v219;
  unsigned int v220;
  unsigned int v221;
  int32x2_t v222;
  int v223;
  char *v224;
  unsigned int v225;
  __int32 v226;
  int v227;
  char *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  __int32 v233;
  __int8 *v234;
  __int32 v235;
  uint32x2_t v236;
  __int32 v237;
  char *v238;
  uint32x4_t v239;
  uint16x4_t v240;
  unsigned __int128 v241;
  int32x4_t v242;
  char *v243;
  unsigned int v244;
  unsigned int *v245;
  char *v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  int v250;
  int v251;
  unsigned int v252;
  int v253;
  int v254;
  unsigned int *v255;
  BOOL v256;
  int v257;
  signed int v258;
  uint32x2_t v259;
  int32x2_t v260;
  int32x4_t v261;
  unsigned int v262;
  unsigned int v263;
  uint64_t v264;
  unsigned __int8 *v265;
  char *v266;
  uint64_t v267;
  __int16 v268;
  unsigned __int8 *v269;
  int8x16_t *v270;
  __int16 v271;
  int v272;
  int v273;
  unsigned __int16 v274;
  unsigned int v275;
  int v276;
  int v277;
  int v278;
  unsigned int v279;
  unsigned int v280;
  int v281;
  unsigned __int16 v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unsigned int v287;
  unsigned __int16 v288;
  int v289;
  int v290;
  uint64_t v291;
  unint64_t v292;
  unsigned int v293;
  int *v294;
  _DWORD *v295;
  int32x4_t v296;
  unsigned __int128 v297;
  int v298;
  int8x16_t v299;
  _BYTE *PartitionTable;
  unsigned int v301;
  _BYTE *v302;
  unsigned __int16 v303;
  uint64_t v304;
  uint64_t v305;
  int32x4_t v306;
  int32x4_t v307;
  unsigned int v308;
  int8x16_t v309;
  int32x4_t v310;
  uint32x4_t v311;
  uint16x4_t v312;
  int32x4_t v313;
  uint32x4_t v314;
  int8x16_t v315;
  int32x4_t v316;
  int8x16_t v317;
  int8x16_t v318;
  uint32x4_t v319;
  int32x4_t v320;
  int32x4_t v321;
  int32x4_t v322;
  int8x16_t v323;
  int32x4_t v324;
  int8x16_t v325;
  int32x4_t v326;
  int32x4_t v327;
  int8x16_t v328;
  int v329;
  unint64_t v330;
  int32x4_t v331;
  char *v332;
  int v333;
  __int32 v334;
  __int32 v335;
  unsigned int v336;
  float32x4_t v337;
  float32x4_t v338;
  unsigned __int16 v339;
  int8x16_t v340;
  uint64_t v341;
  float32x4_t v342;
  int32x4_t v343[4];
  int32x4_t v344[4];
  int8x16_t v345;
  char __dst;
  _BYTE v347[303];

  v9 = a2;
  *(_QWORD *)&v347[287] = *MEMORY[0x24BDAC8D0];
  v10 = HIDWORD(a2);
  v11 = *(_QWORD *)result;
  if ((*(_QWORD *)result & 0xF) == 0)
  {
    v17 = (HIDWORD(a2) * a2);
    if ((_DWORD)v17)
    {
      v18 = a8 + 72;
      if (a8[653])
        v19 = 0xFFFF;
      else
        v19 = 0;
      LODWORD(v20) = 0xFFFF;
      *((_QWORD *)&v20 + 1) = 0xFFFF0000FFFFLL;
      DWORD1(v20) = v19;
      do
      {
        *v18++ = v20;
        --v17;
      }
      while (v17);
    }
    return -3;
  }
  v13 = result;
  if ((v11 & 3) == 0)
  {
    if ((v11 & 0x1FF) == 0x1FC)
    {
      if ((v11 & 0x200) != 0 && !a8[653])
      {
        if (HIDWORD(a2) * (_DWORD)a2)
          memset_pattern16(a8 + 72, &unk_20631DAD0, 16 * (HIDWORD(a2) * a2));
        return -5;
      }
      else
      {
        v21 = (int32x4_t)vmovl_u16(*(uint16x4_t *)(result + 8));
        if (a8[652])
          v21.i64[0] = ConvertSRGBtoLinear(v21);
        if (a8[653] && (*(_BYTE *)(v13 + 1) & 2) == 0)
        {
          v22.i64[0] = 0xFFFF0000FFFFLL;
          v22.i64[1] = 0xFFFF0000FFFFLL;
          v23 = vsubq_s32(v21, vceqq_s32(v21, v22));
          v22.i64[0] = 0x300000003;
          v22.i64[1] = 0x300000003;
          v24 = (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8((int8x16_t)v23, (int8x16_t)vcgtq_s32(v23, v22))), (float32x4_t)vdupq_n_s32(0x37800000u)), (float32x4_t)vdupq_n_s32(0x477FE000u)), (float32x4_t)vdupq_n_s32(0xC77FE000));
          v22.i64[0] = 0x1F0000001FLL;
          v22.i64[1] = 0x1F0000001FLL;
          v21 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8(v24, (int8x16_t)v22)));
        }
        if ((_DWORD)v10 * v9)
        {
          v25 = 0;
          do
            *(int32x4_t *)&a8[4 * (unsigned __int16)v25++ + 72] = v21;
          while (v10 * v9 > (unsigned __int16)v25);
        }
        return 0;
      }
    }
    if ((~(_DWORD)v11 & 0x1C0) == 0)
    {
      v32 = (HIDWORD(a2) * a2);
      if ((_DWORD)v32)
      {
        v33 = a8 + 72;
        if (a8[653])
          v34 = 0xFFFF;
        else
          v34 = 0;
        LODWORD(v35) = 0xFFFF;
        *((_QWORD *)&v35 + 1) = 0xFFFF0000FFFFLL;
        DWORD1(v35) = v34;
        do
        {
          *v33++ = v35;
          --v32;
        }
        while (v32);
      }
      return -3;
    }
  }
  v14 = (v11 >> 10) & 1;
  a8[5] = v14;
  v15 = *(_QWORD *)result;
  v16 = (*(_QWORD *)result >> 7) & 3;
  if ((*(_QWORD *)result & 3) != 0)
    __asm { BR              X14 }
  if (v16 == 2)
  {
    v14 = 0;
    v26 = 0;
    v27 = ((v15 >> 5) & 3) + 6;
    v31 = ((v15 >> 9) & 3) + 6;
    a8[5] = 0;
    LODWORD(v15) = *(_DWORD *)result;
  }
  else
  {
    v26 = (v11 >> 9) & 1;
    v27 = ((v15 >> 5) & 3) + 2;
    if ((v15 & 0x60) != 0)
      v28 = 10;
    else
      v28 = 6;
    if ((v15 & 0x60) != 0)
      v29 = 6;
    else
      v29 = 10;
    if (v16)
      v30 = v28;
    else
      v30 = 12;
    if (!v16)
      v29 = ((v15 >> 5) & 3) + 2;
    if (v16 == 1)
    {
      v31 = 12;
    }
    else
    {
      v27 = v30;
      v31 = v29;
    }
  }
  v36 = (v15 >> 1) & 6 | (v15 >> 4) & 1 | (8 * v26);
  if (v27 > a2)
    goto LABEL_59;
  if (v31 > HIDWORD(a2))
    goto LABEL_59;
  *a8 = v27;
  a8[1] = v31;
  if ((v36 & 6) == 0)
    goto LABEL_59;
  v37 = v31 * v27;
  v38 = ((_DWORD)v37 << v14);
  if (v38 > 0x40)
    goto LABEL_59;
  v39 = DecodeWeights_kBlockModeRangeTable[v36] + 1;
  v40 = __clz(__rbit32(v39));
  v41 = v40 * v38;
  v42 = v39 >> v40;
  if (v42 != 1)
  {
    if (v42 == 5)
    {
      v43 = 152922 * v38 + 43692;
    }
    else
    {
      if (v42 != 3)
      {
        __break(1u);
        return result;
      }
      v43 = 13108 * ((8 * v38) | 4);
    }
    v41 += HIWORD(v43);
  }
  a8[4] = v41;
  if (v41 - 97 < 0xFFFFFFB7)
  {
LABEL_59:
    v44 = (unsigned __int16)(WORD2(a2) * a2);
    if (WORD2(a2) * (_WORD)a2)
    {
      v45 = a8 + 72;
      if (a8[653])
        v46 = 0xFFFF;
      else
        v46 = 0;
      LODWORD(v47) = 0xFFFF;
      *((_QWORD *)&v47 + 1) = 0xFFFF0000FFFFLL;
      DWORD1(v47) = v46;
      do
      {
        *v45++ = v47;
        --v44;
      }
      while (v44);
    }
    return -3;
  }
  v48 = v36;
  v49 = vqtbl1q_s8(vrbitq_s8(*(int8x16_t *)result), (int8x16_t)xmmword_20631C860);
  v345 = v49;
  if (v14)
  {
    DecodeIntegerSequenceEncoding((uint64_t)&v345, 0, ((_DWORD)v37 << v14), DecodeWeights_kNumberOfBitsTable[v36], DecodeWeights_kNumberOfTritsTable[v36], DecodeWeights_kNumberOfQuintsTable[v36], &__dst, *(double *)v49.i64, (uint8x8_t)0x8090A0B0C0D0E0FLL, a5);
    v54 = a8 + 24;
    v55 = v347;
    v56 = v37;
    do
    {
      *(v54 - 64) = *(v55 - 1);
      v57 = *v55;
      v55 += 2;
      *v54++ = v57;
      --v56;
    }
    while (v56);
    v58 = a8 + 24;
    v59 = &unquantizedWeightTable[32 * v48];
    do
    {
      *(v58 - 64) = v59[*(v58 - 64)];
      *v58 = v59[*v58];
      ++v58;
      --v37;
    }
    while (v37);
  }
  else
  {
    v60 = a8 + 8;
    DecodeIntegerSequenceEncoding((uint64_t)&v345, 0, v38, DecodeWeights_kNumberOfBitsTable[v36], DecodeWeights_kNumberOfTritsTable[v36], DecodeWeights_kNumberOfQuintsTable[v36], a8 + 8, *(double *)v49.i64, (uint8x8_t)0x8090A0B0C0D0E0FLL, a5);
    do
    {
      *v60 = unquantizedWeightTable[32 * v48 + *v60];
      ++v60;
      --v38;
    }
    while (v38);
    v14 = a8[5];
  }
  v61 = *(_QWORD *)v13;
  v62 = (*(_QWORD *)v13 >> 11) & 3;
  v63 = v62 + 1;
  if (v14)
    v64 = (_DWORD)v63 == 4;
  else
    v64 = 0;
  if (!v64)
  {
    if (v62)
    {
      v65 = v61 >> 24;
      v66 = ((BYTE2(v61) | ((v61 >> 24) << 8)) >> 7) & 3;
      if (v66)
      {
        v67 = a8[4];
        if (v62 == 3)
        {
          v52 = (int8x8_t)vsub_s32((int32x2_t)0x7A00000078, vdup_n_s32(v67));
          v80 = vshr_n_u32((uint32x2_t)v52, 3uLL);
          v81 = (__int8 *)(v13 + v80.u32[0]);
          v82 = (__int8 *)(v13 + v80.u32[1]);
          v83 = vdup_n_s32(v66);
          v84 = vadd_s32((int32x2_t)(*(_QWORD *)&vshl_u32((uint32x2_t)vand_s8((int8x8_t)vdup_n_s32(v65), (int8x8_t)0xFF000000FFLL), (uint32x2_t)0xFFFFFFFEFFFFFFFFLL) & 0xFFFFFF01FFFFFF01), v83);
          v83.i8[0] = *v81;
          v83.i8[4] = *v82;
          v53.i8[0] = v81[1];
          v53.i8[4] = v82[1];
          v51 = vsli_n_s32((int32x2_t)vshl_u32((uint32x2_t)vsli_n_s32(v83, (int32x2_t)vand_s8(v53, (int8x8_t)0xFF000000FFLL), 8uLL), (uint32x2_t)vneg_s32((int32x2_t)vand_s8(v52, (int8x8_t)0x700000007))), v84, 2uLL);
          *(int32x2_t *)v50.i8 = vadd_s32(v51, (int32x2_t)0x300000003);
          v344[0].i64[0] = v50.i64[0];
          v344[0].i32[2] = ((*(unsigned __int16 *)(v13 + ((unint64_t)(124 - v67) >> 3)) >> ((124 - v67) & 7)) & 3 | (4 * (((v65 >> 3) & 1) + v66)))
                         - 4;
          v68 = -8;
          v69 = 4;
          v70 = 3;
        }
        else if (v62 == 2)
        {
          v85 = ((*(unsigned __int16 *)(v13 + ((unint64_t)(124 - v67) >> 3)) >> ((124 - v67) & 7)) & 3 | (4 * (((v61 >> 26) & 1) + v66)))
              - 4;
          v344[0].i32[0] = ((v61 >> 28) & 1 | (4 * (((v61 >> 25) & 1) + v66)) | (2 * ((*(unsigned __int16 *)(v13 + ((unint64_t)(123 - v67) >> 3)) >> ((123 - v67) & 7)) & 1)))
                         - 4;
          v344[0].i32[1] = v85;
          v68 = -5;
          v69 = 3;
          v70 = 2;
        }
        else
        {
          v344[0].i32[0] = ((v61 >> 27) & 3 | (4 * (((v61 >> 25) & 1) + v66))) - 4;
          v68 = -2;
          v69 = 2;
          v70 = 1;
        }
        *(_DWORD *)((unint64_t)v344 | (4 * v70)) = ((*(unsigned __int16 *)(v13
                                                                                + ((unint64_t)(126 - v67) >> 3)) >> ((126 - v67) & 7)) & 3 | (4 * (((BYTE3(v61) >> v69) & 1) + v66)))
                                                        - 4;
        v79 = -3 * v63 + 103;
      }
      else
      {
        v68 = 0;
        v50 = vdupq_n_s32((v65 >> 1) & 0xF);
        v344[0] = v50;
        v67 = a8[4];
        v79 = 99;
      }
      if (v14)
        v86 = -2;
      else
        v86 = 0;
      v77 = v86 - v67 + v79;
      v75 = (((v61 >> 8) & 0xE0 | (BYTE2(v61) << 8)) >> 5) & 0x3FF;
      v78 = 29;
    }
    else
    {
      v75 = 0;
      v68 = 0;
      v344[0].i32[0] = (v61 >> 13) & 0xF;
      v67 = a8[4];
      if (v14)
        v76 = 109;
      else
        v76 = 111;
      v77 = v76 - v67;
      v78 = 17;
    }
    v87 = 0;
    LODWORD(v88) = 0;
    do
    {
      v88 = (v88 + 2 * DecodeColorEndpoints_baseCEMClass[v344[0].u32[v87 / 4]] + 2);
      v87 += 4;
    }
    while (4 * ((v61 >> 11) & 3) + 4 != v87);
    if (v88 > 0x12 || v77 < (13 * v88 + 4) / 5u)
      goto LABEL_111;
    v329 = v75;
    v330 = v61;
    v341 = v63;
    v93 = 0;
    while (1)
    {
      v94 = getColorBitsTritsQuints_kColorTrits[v93];
      v95 = getColorBitsTritsQuints_kColorQuints[v93];
      v96 = getColorBitsTritsQuints_kColorBits[v93];
      if (((8 * (_DWORD)v88 * v94) | 4u) / 5 + v96 * (_DWORD)v88 + (7 * (int)v88 * v95 + 2) / 3u <= v77)
        break;
      if (++v93 == 21)
      {
        v96 = 0;
        v94 = 0;
        v95 = 0;
        v336 = 0;
        goto LABEL_124;
      }
    }
    v336 = getColorBitsTritsQuints_kUnquantizedColorRanges[v93];
LABEL_124:
    DecodeIntegerSequenceEncoding(v13, v78, v88, v96, v94, v95, &v345, *(double *)v50.i64, (uint8x8_t)v51, (uint8x8_t)v52);
    v100 = 0;
    v101 = 0;
    p_dst = &__dst;
    v103 = v341;
    do
    {
      v104 = 2 * DecodeColorEndpoints_baseCEMClass[v344[0].u32[v100]] + 2;
      if (2 * DecodeColorEndpoints_baseCEMClass[v344[0].u32[v100]] != -2)
      {
        v105 = v101;
        v106 = p_dst;
        v107 = (2 * DecodeColorEndpoints_baseCEMClass[v344[0].u32[v100]] + 2);
        do
        {
          *(_DWORD *)v106 = v345.u8[v105];
          v106 += 4;
          ++v105;
          --v107;
        }
        while (v107);
      }
      v101 += v104;
      ++v100;
      p_dst += 32;
    }
    while (v100 != v341);
    if (v14)
      a8[6] = (*(unsigned __int16 *)(v13 + ((unint64_t)(v68 - v67 + 126) >> 3)) >> ((v68 - v67 + 126) & 7)) & 3;
    v108 = 0;
    v109 = 0;
    v110 = 0;
    a8[7] = 1;
    v111 = v336;
    v112 = 16 * ((v330 >> 11) & 3) + 16;
    v113 = (unsigned int *)&__dst;
    v114 = 654;
    v332 = (char *)&unquantizedColorTable + 256 * (unint64_t)v336;
    v115.i64[0] = 0xFF000000FFLL;
    v115.i64[1] = 0xFF000000FFLL;
    v116 = vdupq_n_s32(0x780u);
    v335 = v116.i32[3];
    v116.i32[0] = 2;
    v331 = v116;
    do
    {
      v117 = *(_DWORD *)((char *)&v344[-163] + v114 * 4 - 8);
      v118 = (_DWORD)a8 + v108;
      v119 = (int32x4_t *)&a8[v108 / 4 + 40];
      v120 = (int32x4_t *)&a8[v108 / 4 + 56];
      switch(v117)
      {
        case 0:
          v121 = v332[v113[1]];
          v122.i32[0] = v332[*v113];
          v122.i32[1] = v122.i32[0];
          v122.i64[1] = v122.u32[0] | 0xFF00000000;
          *v119 = v122;
          v116.i32[0] = v121;
          v116.i32[1] = v121;
          v116.i64[1] = v121 | 0xFF00000000;
          goto LABEL_158;
        case 1:
          v125 = (char *)&unquantizedColorTable + 256 * v111;
          v126 = v125[*v113];
          LOBYTE(v125) = v125[v113[1]];
          v127 = v125 & 0xC0 | (v126 >> 2);
          v128 = v127 + (v125 & 0x3F);
          if (v128 >= 0xFF)
            v128 = 255;
          v129.i32[0] = v127;
          v129.i32[1] = v127;
          v129.i64[1] = v127 | 0xFF00000000;
          *v119 = v129;
          v116.i32[0] = v128;
          v116.i32[1] = v128;
          v116.i64[1] = v128 | 0xFF00000000;
          goto LABEL_158;
        case 2:
          v130 = (char *)&unquantizedColorTable + 256 * v111;
          v131.i32[0] = v130[v113[1]];
          v131.i32[1] = v130[*v113];
          v98.i32[0] = v131.i32[1];
          v97.i32[0] = v131.i32[0];
          v132 = vdup_lane_s8((int8x8_t)vcgt_u8(*(uint8x8_t *)v98.i8, *(uint8x8_t *)v97.i8), 0);
          v133 = vshl_n_s32((int32x2_t)vand_s8(v131, (int8x8_t)0xFF000000FFLL), 4uLL);
          *(int32x2_t *)v98.i8 = vrev64_s32(v133);
          v99.i32[0] = vadd_s32(*(int32x2_t *)v98.i8, (int32x2_t)0x700000007).u32[0];
          v98.i32[1] |= 8u;
          v99.i32[1] = v98.i32[1];
          v134 = (int32x2_t)vbsl_s8(v132, *(int8x8_t *)v99.i8, (int8x8_t)v133);
          v97 = vdupq_lane_s32(v134, 1);
          v135 = 1920;
          v97.i32[3] = 1920;
          *v119 = v97;
          v116 = vdupq_lane_s32(v134, 0);
          goto LABEL_157;
        case 3:
          v136 = (char *)&unquantizedColorTable + 256 * v111;
          v137 = v136[*v113];
          v138 = v136[v113[1]];
          if ((v137 & 0x80u) != 0)
            v139 = 3584;
          else
            v139 = 3840;
          v140 = 1;
          if ((v137 & 0x80u) == 0)
            v141 = 1;
          else
            v141 = 2;
          if ((v137 & 0x80u) != 0)
            v142 = 508;
          else
            v142 = 254;
          if ((v137 & 0x80u) != 0)
            v143 = 124;
          else
            v143 = 30;
          v144 = v139 & (16 * v138) | (v137 << v141) & v142;
          v145 = v144 + ((v138 << v141) & v143);
          v97.i32[3] = v335;
          v116.i32[3] = v335;
          v116.i32[0] = v144;
          v116.i32[1] = v144;
          if (v145 >= 4095)
            v145 = 4095;
          v116.i32[2] = v144;
          v97.i32[0] = v145;
          *v119 = v116;
          v97.i32[1] = v145;
          v97.i32[2] = v145;
          *v120 = v97;
          goto LABEL_233;
        case 4:
          v146 = (char *)&unquantizedColorTable + 256 * v111;
          v147 = &v146[v113[1]];
          v116.i8[0] = v146[*v113];
          v148 = v146[v113[2]];
          v116.i32[1] = v148;
          *(int8x8_t *)v116.i8 = vand_s8(*(int8x8_t *)v116.i8, (int8x8_t)0xFF000000FFLL);
          v97 = vzip1q_s32(v116, v116);
          v97.i32[2] = v116.i32[0];
          LODWORD(v146) = v146[v113[3]];
          v116.i8[0] = *v147;
          v116.i32[1] = (int)v146;
          *(int8x8_t *)v116.i8 = vand_s8(*(int8x8_t *)v116.i8, (int8x8_t)0xFF000000FFLL);
          v98 = vzip1q_s32(v116, v116);
          v98.i32[2] = v116.i32[0];
          *v119 = v97;
          *v120 = v98;
          v149 = ~(v148 & v146) == 0;
          goto LABEL_230;
        case 5:
          v150 = (char *)&unquantizedColorTable + 256 * v111;
          v116.i8[0] = v150[*v113];
          v116.i8[4] = v150[v113[2]];
          v97.i8[0] = v150[v113[1]];
          v97.i8[4] = v150[v113[3]];
          v151 = (int32x2_t)vand_s8(*(int8x8_t *)v97.i8, (int8x8_t)0xFF000000FFLL);
          *(int8x8_t *)v116.i8 = vorr_s8((int8x8_t)(*(_QWORD *)&vadd_s32(v151, v151) & 0xFFFFFF01FFFFFF01), vand_s8(*(int8x8_t *)v116.i8, (int8x8_t)0xFF000000FFLL));
          *(uint32x2_t *)v97.i8 = vsra_n_u32((uint32x2_t)vshr_n_s32((int32x2_t)vorr_s8((int8x8_t)(*(_QWORD *)&vtst_s32((int32x2_t)(*(_QWORD *)&v151 & 0xFFFFFF40FFFFFF40), (int32x2_t)(*(_QWORD *)&v151 & 0xFFFFFF40FFFFFF40)) & 0xFFFFFF80FFFFFF80), (int8x8_t)(*(_QWORD *)&v151 & 0xFFFFFF7EFFFFFF7ELL)), 1uLL), *(uint32x2_t *)v116.i8, 1uLL);
          *(int32x2_t *)v98.i8 = vmax_s32(vmin_s32(*(int32x2_t *)v97.i8, (int32x2_t)0xFF000000FFLL), 0);
          v99 = vzip1q_s32(v98, v98);
          v99.i32[2] = v98.i32[0];
          *(uint32x2_t *)v116.i8 = vshr_n_u32(*(uint32x2_t *)v116.i8, 1uLL);
          v98 = vzip1q_s32(v116, v116);
          v98.i32[2] = v116.i32[0];
          *v119 = v98;
          *v120 = v99;
          *(int32x2_t *)v116.i8 = vceq_s32(vzip2_s32(*(int32x2_t *)v97.i8, *(int32x2_t *)v116.i8), (int32x2_t)0xFF000000FFLL);
          v140 = v116.i8[4] & v116.i8[0];
          goto LABEL_233;
        case 6:
          v152 = (char *)&unquantizedColorTable + 256 * v111;
          v153 = &v152[*v113];
          v154 = &v152[v113[1]];
          v155 = v152[v113[2]];
          LODWORD(v152) = v152[v113[3]];
          v116.i8[0] = *v153;
          v116.i8[4] = *v154;
          *(int8x8_t *)v116.i8 = vand_s8(*(int8x8_t *)v116.i8, (int8x8_t)0xFF000000FFLL);
          *(uint32x2_t *)v97.i8 = vshr_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v152), *(int32x2_t *)v116.i8), 8uLL);
          v97.i32[2] = ((_DWORD)v152 * v155) >> 8;
          v135 = 255;
          v97.i32[3] = 255;
          *v119 = v97;
          v116.i32[2] = v155;
LABEL_157:
          v116.i32[3] = v135;
LABEL_158:
          *v120 = v116;
          goto LABEL_224;
        case 7:
          v156 = (char *)&unquantizedColorTable + 256 * v111;
          v157 = v156[*v113];
          v158 = v156[v113[1]];
          v159 = v156[v113[2]];
          v160 = v156[v113[3]];
          v161 = (v159 >> 4) & 8 | (v158 >> 5) & 4;
          if (v157 >> 6 == 3)
            v162 = 5;
          else
            v162 = 4;
          if (v157 >> 6 == 3)
            v163 = 0;
          else
            v163 = v157 >> 6;
          v64 = v161 == 12;
          v164 = v161 == 12;
          v165 = v161 >> 2;
          if (v64)
          {
            v166 = v163;
          }
          else
          {
            v162 = v157 >> 6;
            v166 = v165;
          }
          v334 = v166;
          v167 = (v158 >> 6) & 1;
          v168 = (v158 >> 5) & 1;
          v169 = (v159 >> 6) & 1;
          v170 = (v159 >> 5) & 1;
          v171 = (v160 >> 6) & 1;
          v172 = (v160 >> 5) & 1;
          v140 = 1;
          v173 = 1 << v162;
          v174 = v167 << 6;
          if (((1 << v162) & 0x30) == 0)
            v174 = 0;
          v175 = v174 & 0xFFFFFFE0 | v158 & 0x1F;
          v176 = 32 * v168;
          v177 = v169 << 6;
          if ((v173 & 0x30) == 0)
            v177 = 0;
          if ((v173 & 0x3A) == 0)
            v176 = 0;
          v333 = v175 | v176;
          v178 = v177 & 0xFFFFFFE0 | v159 & 0x1F;
          v179 = 32 * v170;
          if ((v173 & 0x3A) == 0)
            v179 = 0;
          v180 = v178 | v179;
          v181 = 32 * v172;
          if ((v173 & 0x3D) == 0)
            v181 = 0;
          v182 = v181 & 0xFFFFFFE0 | v160 & 0x1F;
          v183 = v171 << 6;
          if ((v173 & 0x2D) == 0)
            v183 = 0;
          v184 = v182 | v183;
          v185 = (16 * v173) & (v170 << 6);
          v186 = v184 | v160 & (32 * v173) & 0x80;
          v187 = (v160 >> 1) & 0x40;
          if ((v173 & 0x3B) == 0)
            v187 = 0;
          v188 = v169 << 7;
          if (v162 > 3)
            v188 = 0;
          v189 = v168 << 8;
          v190 = v167 << 8;
          if ((v173 & 0xA) == 0)
            v190 = 0;
          if ((v173 & 5) == 0)
            v189 = 0;
          v191 = v167 << 9;
          if ((v173 & 5) == 0)
            v191 = 0;
          v192 = v170 << 10;
          if (v162)
            v192 = 0;
          v64 = !v164 || v157 >> 6 != 3;
          v193 = v188 & 0xFFFFFFC0 | v157 & 0x3F | v192 | v187 | v185 | (8 * v173) & (v171 << 7);
          v194 = v189 | v190;
          v112 = 16 * ((v330 >> 11) & 3) + 16;
          v111 = v336;
          v195 = v194 | v191;
          v103 = v341;
          v196 = computeUnquantizedColorEndPoints_shamts[v162];
          v197 = (v193 | v195 | (v173 << 8) & (v172 << 9) | (v173 << 9) & (v171 << 10)) << v196;
          v198 = v333 << v196;
          v199 = v180 << v196;
          v200 = v186 << v196;
          v201 = v197 - (v180 << v196);
          if (v64)
            v198 = v197 - v198;
          else
            v201 = v199;
          v202.i64[0] = __PAIR64__(v198, v197);
          v202.i64[1] = __PAIR64__(v335, v201);
          v97 = vdupq_n_s32(v200);
          v98.i32[0] = v334;
          v99.i32[0] = 1;
          v203.i64[0] = vrev64q_s32(v202).u64[0];
          v203.i64[1] = __PAIR64__(v335, v201);
          v204 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v98, v99), 0), v203, (int8x16_t)v202);
          v99 = vrev64q_s32(v204);
          v205 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v98, v331), 0), vextq_s8((int8x16_t)v99, (int8x16_t)v99, 0xCuLL), (int8x16_t)v204);
          v99.i32[1] = 0;
          v99.i64[1] = 0;
          v203.i64[0] = 0xF0000000FLL;
          v203.i64[1] = 0xF0000000FLL;
          v98 = vminq_s32(vmaxq_s32(v205, (int32x4_t)0), (int32x4_t)v203);
          *v120 = v98;
          v97.i32[3] = 0;
          v116 = vminq_s32(vmaxq_s32(vsubq_s32(v205, v97), (int32x4_t)0), (int32x4_t)v203);
          *v119 = v116;
          goto LABEL_233;
        case 8:
          v206 = (char *)&unquantizedColorTable + 256 * v111;
          v207 = v206[*v113];
          v208 = v206[v113[1]];
          v209 = v206[v113[2]];
          v210 = v206[v113[3]];
          v211 = v206[v113[4]];
          v212 = v206[v113[5]];
          v116.i32[3] = 255;
          if (v211 + v207 + v209 <= v212 + v208 + v210)
          {
            v116.i64[0] = __PAIR64__(v209, v207);
            v116.i32[2] = v211;
            v211 = v212;
          }
          else
          {
            v116.i32[0] = (v212 + v208) >> 1;
            v116.i32[1] = (v212 + v210) >> 1;
            v116.i32[2] = v212;
            v208 = (v211 + v207) >> 1;
            v210 = (v211 + v209) >> 1;
          }
          v97.i64[0] = __PAIR64__(v210, v208);
          v97.i64[1] = v211 | 0xFF00000000;
          *v119 = v116;
          *v120 = v97;
          v140 = 1;
          goto LABEL_233;
        case 9:
          v213 = (char *)&unquantizedColorTable + 256 * v111;
          v214 = &v213[*v113];
          v215 = &v213[v113[1]];
          v216 = &v213[v113[2]];
          v217 = &v213[v113[3]];
          v218 = v213[v113[4]];
          LODWORD(v213) = v213[v113[5]];
          v116.i8[0] = *v215;
          v116.i8[4] = *v217;
          v97.i8[0] = *v214;
          v219 = (uint32x2_t)vand_s8(*(int8x8_t *)v116.i8, (int8x8_t)0xFF000000FFLL);
          v97.i8[4] = *v216;
          *(int8x8_t *)v99.i8 = vorr_s8((int8x8_t)(*(_QWORD *)&vtst_s32((int32x2_t)(*(_QWORD *)&v219 & 0xFFFFFF40FFFFFF40), (int32x2_t)(*(_QWORD *)&v219 & 0xFFFFFF40FFFFFF40)) & 0xFFFFFFC0FFFFFFC0), (int8x8_t)(*(_QWORD *)&vshr_n_u32(v219, 1uLL) & 0xFFFFFFBFFFFFFFBFLL));
          *(int8x8_t *)v116.i8 = vorr_s8((int8x8_t)(*(_QWORD *)&v219 & 0xFFFFFF80FFFFFF80), (int8x8_t)vshr_n_u32((uint32x2_t)vand_s8(*(int8x8_t *)v97.i8, (int8x8_t)0xFF000000FFLL), 1uLL));
          v220 = ((int)((_DWORD)v213 << 25) >> 31) & 0xFFFFFFC0 | (v213 >> 1) & 0x3F;
          v221 = v213 & 0x80 | (v218 >> 1);
          v222 = vadd_s32(*(int32x2_t *)v99.i8, *(int32x2_t *)v116.i8);
          if ((int)(vadd_s32(vdup_lane_s32(*(int32x2_t *)v99.i8, 1), *(int32x2_t *)v99.i8).u32[0] + v220) < 0)
          {
            v258 = v220 + v221;
            v259 = (uint32x2_t)vadd_s32(vdup_n_s32(v221), *(int32x2_t *)v116.i8);
            *(int32x2_t *)v98.i8 = vmax_s32(vmin_s32(vshr_n_s32(vadd_s32(v222, vdup_n_s32(v258)), 1uLL), (int32x2_t)0xFF000000FFLL), 0);
            if (v258 >= 255)
              v258 = 255;
            v98.i64[1] = v258 & ~(v258 >> 31) | 0xFF00000000;
            *(uint32x2_t *)v97.i8 = vshr_n_u32(v259, 1uLL);
            v116 = v98;
          }
          else
          {
            v116.i64[1] = v221 | 0xFF00000000;
            v98.i32[1] = 0;
            v98.i64[1] = 0;
            *(int32x2_t *)v97.i8 = vmax_s32(vmin_s32(v222, (int32x2_t)0xFF000000FFLL), 0);
            v223 = v220 + v221;
            if (v223 >= 255)
              v223 = 255;
            v221 = v223 & ~(v223 >> 31);
          }
          v97.i64[1] = v221 | 0xFF00000000;
          *v119 = v116;
          *v120 = v97;
          goto LABEL_224;
        case 10:
          v224 = (char *)&unquantizedColorTable + 256 * v111;
          v225 = v224[v113[3]];
          v226 = v224[v113[5]];
          v116.i8[0] = v224[v113[2]];
          v116.i32[1] = v226;
          *(int8x8_t *)v116.i8 = vand_s8(*(int8x8_t *)v116.i8, (int8x8_t)0xFF000000FFLL);
          v97.i8[0] = v224[*v113];
          v97.i8[4] = v224[v113[1]];
          *(int8x8_t *)v97.i8 = vand_s8(*(int8x8_t *)v97.i8, (int8x8_t)0xFF000000FFLL);
          *(uint32x2_t *)v98.i8 = vshr_n_u32((uint32x2_t)vmul_s32(vdup_n_s32(v225), *(int32x2_t *)v97.i8), 8uLL);
          v97.i64[1] = v116.i64[0];
          v98.i32[2] = (v116.i32[0] * v225) >> 8;
          v98.i32[3] = v224[v113[4]];
          *v119 = v98;
          *v120 = v97;
          v227 = v98.i32[3] & v226;
          goto LABEL_209;
        case 11:
          decode_mode11(v113, v336, v119, v120);
          v115.i64[0] = 0xFF000000FFLL;
          v115.i64[1] = 0xFF000000FFLL;
          v112 = 16 * ((v330 >> 11) & 3) + 16;
          v111 = v336;
          v103 = v341;
LABEL_224:
          v140 = 1;
          goto LABEL_233;
        case 12:
          v228 = (char *)&unquantizedColorTable + 256 * v111;
          v229 = v228[*v113];
          v230 = v228[v113[1]];
          v231 = v228[v113[2]];
          v232 = v228[v113[3]];
          v233 = v228[v113[6]];
          v116.i8[0] = v228[v113[4]];
          v234 = &v228[v113[5]];
          v116.i32[1] = v233;
          *(int8x8_t *)v116.i8 = vand_s8(*(int8x8_t *)v116.i8, (int8x8_t)0xFF000000FFLL);
          v235 = v228[v113[7]];
          v97.i8[0] = *v234;
          v97.i32[1] = v235;
          *(int8x8_t *)v98.i8 = vand_s8(*(int8x8_t *)v97.i8, (int8x8_t)0xFF000000FFLL);
          if (v116.i32[0] + v229 + v231 <= v98.i32[0] + v230 + v232)
          {
            v97.i64[0] = __PAIR64__(v231, v229);
            v97.i64[1] = v116.i64[0];
            v99.i64[0] = __PAIR64__(v232, v230);
            v99.i64[1] = v98.i64[0];
          }
          else
          {
            v236.i32[0] = v98.i32[0] + v230;
            v236.i32[1] = v98.i32[0] + v232;
            *(uint32x2_t *)v97.i8 = vshr_n_u32(v236, 1uLL);
            v97.i64[1] = v98.i64[0];
            v237 = v116.i32[0] + v231;
            v98.i32[1] = v237;
            *(uint32x2_t *)v99.i8 = vshr_n_u32((uint32x2_t)__PAIR64__(v237, v116.i32[0] + v229), 1uLL);
            v99.i64[1] = v116.i64[0];
          }
          *v119 = v97;
          *v120 = v99;
          v140 = (v233 & v235) == 255;
          goto LABEL_233;
        case 13:
          v238 = (char *)&unquantizedColorTable + 256 * v111;
          v116.i8[0] = v238[v113[1]];
          v116.i8[2] = v238[v113[3]];
          v116.i8[4] = v238[v113[5]];
          v116.i8[6] = v238[v113[7]];
          v239 = (uint32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v116.i8), (int8x16_t)v115);
          v240.i16[0] = v238[*v113];
          v240.i16[1] = v238[v113[2]];
          v240.i16[2] = v238[v113[4]];
          v240.i16[3] = v238[v113[6]];
          v241 = *(_OWORD *)&v239 & __PAIR128__(0xFFFFFF80FFFFFF80, 0xFFFFFF80FFFFFF80);
          v116 = (int32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vtstq_s32((int32x4_t)(*(_OWORD *)&v239 & __PAIR128__(0xFFFFFF40FFFFFF40, 0xFFFFFF40FFFFFF40)), (int32x4_t)(*(_OWORD *)&v239 & __PAIR128__(0xFFFFFF40FFFFFF40, 0xFFFFFF40FFFFFF40))) & __PAIR128__(0xFFFFFFC0FFFFFFC0, 0xFFFFFFC0FFFFFFC0)), (int8x16_t)(*(_OWORD *)&vshrq_n_u32(v239, 1uLL) & __PAIR128__(0xFFFFFFBFFFFFFFBFLL, 0xFFFFFFBFFFFFFFBFLL)));
          v97 = (int32x4_t)vorrq_s8((int8x16_t)v241, (int8x16_t)vmovl_u16(vshr_n_u16(v240, 1uLL)));
          v242 = vaddq_s32(v116, v97);
          if (v116.i32[1] + v116.i32[0] + v116.i32[2] < 0)
          {
            v260 = (int32x2_t)vdupq_laneq_s32(v242, 2).u64[0];
            *(int32x2_t *)v261.i8 = vshr_n_s32(vadd_s32(*(int32x2_t *)v242.i8, v260), 1uLL);
            v261.i64[1] = __PAIR64__(v242.u32[3], v260.u32[1]);
            v98 = vmaxq_s32(vminq_s32(v261, v115), (int32x4_t)0);
            *(uint32x2_t *)v99.i8 = vshr_n_u32((uint32x2_t)vadd_s32(vdup_laneq_s32(v97, 2), *(int32x2_t *)v97.i8), 1uLL);
            v99.i64[1] = vextq_s8((int8x16_t)v97, (int8x16_t)v97, 8uLL).u64[0];
          }
          else
          {
            v99 = vmaxq_s32(vminq_s32(v242, v115), (int32x4_t)0);
            v98 = v97;
          }
          v257 = 255;
          *v119 = v98;
          *v120 = v99;
          v256 = v97.i32[3] == 255;
          v252 = v116.u32[3];
          goto LABEL_227;
        case 14:
          decode_mode11(v113, v336, v119, v120);
          v115.i64[0] = 0xFF000000FFLL;
          v115.i64[1] = 0xFF000000FFLL;
          v112 = 16 * ((v330 >> 11) & 3) + 16;
          v111 = v336;
          v103 = v341;
          v243 = (char *)&unquantizedColorTable + 256 * (unint64_t)v336;
          v244 = v243[v113[6]];
          LODWORD(v243) = v243[v113[7]];
          v245 = &a8[v108 / 4];
          v245[43] = v244;
          v245[59] = v243;
          v227 = v244 & v243;
LABEL_209:
          v149 = v227 == 255;
          goto LABEL_230;
        case 15:
          decode_mode11(v113, v336, v119, v120);
          v115.i64[0] = 0xFF000000FFLL;
          v115.i64[1] = 0xFF000000FFLL;
          v112 = 16 * ((v330 >> 11) & 3) + 16;
          v111 = v336;
          v103 = v341;
          v246 = (char *)&unquantizedColorTable + 256 * (unint64_t)v336;
          v247 = v246[v113[6]];
          LODWORD(v246) = v246[v113[7]];
          v248 = (v246 >> 6) & 2 | (v247 >> 7);
          v249 = v247 & 0x7F;
          v250 = v246 & 0x7F;
          v251 = (v250 << (v248 + 1)) & 0x780 | v249;
          LODWORD(v246) = (((0x3Fu >> v248) & v246 ^ (0x20u >> v248)) - (0x20u >> v248) + v251) << (4 - v248);
          v252 = v246 & ~((int)v246 >> 31);
          if (v252 >= 0xFFF)
            v252 = 4095;
          v253 = 32 * v249;
          v254 = 32 * v250;
          if (v248 == 3)
            v252 = v254;
          else
            v253 = v251 << (4 - v248);
          v255 = &a8[v108 / 4];
          v255[43] = v253;
          v255[59] = v252;
          v256 = v253 == 1920;
          v257 = 1920;
LABEL_227:
          v149 = v256 && v252 == v257;
LABEL_230:
          v140 = v149;
LABEL_233:
          v124 = 0;
          v123 = v140 & 1;
          v118 = a8[7];
          break;
        default:
          v123 = 0;
          v124 = -1;
          break;
      }
      v110 |= v124;
      a8[7] = v123 & v118;
      a8[v114] = DecodeColorEndpoints_hdrLerpMode[v117 & 0xF];
      v109 |= (a8[653] == 0) & (0xC88CuLL >> (v117 & 0xF));
      v108 += 16;
      ++v114;
      v113 += 8;
    }
    while (v112 != v108);
    if (v109)
    {
      result = -5;
LABEL_112:
      v89 = (unsigned __int16)(v10 * v9);
      if ((_WORD)v10 * (_WORD)v9)
      {
        v90 = a8 + 72;
        if (a8[653])
          v91 = 0xFFFF;
        else
          v91 = 0;
        LODWORD(v92) = 0xFFFF;
        *((_QWORD *)&v92 + 1) = 0xFFFF0000FFFFLL;
        DWORD1(v92) = v91;
        do
        {
          *v90++ = v92;
          --v89;
        }
        while (v89);
      }
      return result;
    }
    if (v110)
    {
LABEL_111:
      result = -3;
      goto LABEL_112;
    }
    a8[2] = v103;
    a8[3] = v329;
    v262 = *a8;
    v263 = a8[1];
    if (v263 == (_DWORD)v10 && v262 == v9)
    {
      v264 = v10 * v9;
      if ((_DWORD)v264)
      {
        v265 = (unsigned __int8 *)(a8 + 8);
        v266 = &__dst;
        v267 = v10 * v9;
        do
        {
          v268 = *v265++;
          *(_WORD *)v266 = v268;
          v266 += 2;
          --v267;
        }
        while (v267);
        if (a8[5])
        {
          v269 = (unsigned __int8 *)(a8 + 24);
          v270 = &v345;
          do
          {
            v271 = *v269++;
            v270->i16[0] = v271;
            v270 = (int8x16_t *)((char *)v270 + 2);
            --v264;
          }
          while (v264);
        }
      }
    }
    else if ((_DWORD)v10)
    {
      v272 = 0;
      v339 = 0;
      do
      {
        if (v9)
        {
          v273 = 0;
          v274 = 0;
          v275 = ((unsigned __int16)v263 + 0x3FFFFF)
               * (unsigned __int16)(v339 * (((v10 >> 1) + 1024) / ((int)v10 - 1)))
               + 32;
          v276 = (v275 >> 6) & 0xF;
          v277 = ((v275 >> 10) & 0xFFF) * v262;
          v278 = v272 * v9;
          v279 = a8[5];
          do
          {
            v280 = ((unsigned __int16)v262 + 0x3FFFFF) * (unsigned __int16)(v274 * (((v9 >> 1) + 1024) / (v9 - 1))) + 32;
            v281 = (v280 >> 6) & 0xF;
            v282 = ((v280 >> 10) & 0xFFF) + v277;
            v283 = v282;
            v284 = v282 + 1;
            v285 = (unsigned __int16)v262 + v282;
            v286 = (v285 + 1);
            v287 = (v281 * v276 + 8) >> 4;
            v288 = v281 - v287;
            v289 = (unsigned __int16)(v287 - (v276 + v281) + 16);
            v290 = (unsigned __int16)(v276 - v287);
            v291 = (v273 + v278);
            *(_WORD *)&v347[2 * v291 - 1] = (v288 * *((unsigned __int8 *)a8 + v284 + 32)
                                                         + v289 * *((unsigned __int8 *)a8 + v283 + 32)
                                                         + v290 * *((unsigned __int8 *)a8 + v285 + 32)
                                                         + v287 * *((unsigned __int8 *)a8 + v286 + 32)
                                                         + 8) >> 4;
            if (v279)
              v345.i16[v291] = (v288 * *((unsigned __int8 *)a8 + v284 + 96)
                              + v289 * *((unsigned __int8 *)a8 + v283 + 96)
                              + v290 * *((unsigned __int8 *)a8 + v285 + 96)
                              + v287 * *((unsigned __int8 *)a8 + v286 + 96)
                              + 8) >> 4;
            v273 = ++v274;
          }
          while (v274 < v9);
        }
        v272 = ++v339;
      }
      while (v339 < v10);
    }
    v292 = 0;
    v293 = a8[652];
    v294 = (int *)(a8 + 654);
    v295 = a8 + 56;
    v296 = vdupq_n_s32(0x101u);
    while (1)
    {
      if (v293)
      {
        v344[v292 / 0x10] = (int32x4_t)(*(_OWORD *)&vshlq_n_s32(*(int32x4_t *)&v295[v292 / 4 - 16], 8uLL) | __PAIR128__(0x8000000080, 0x8000000080));
        v297 = *(_OWORD *)&vshlq_n_s32(*(int32x4_t *)&v295[v292 / 4], 8uLL) | __PAIR128__(0x8000000080, 0x8000000080);
      }
      else
      {
        v298 = *v294;
        if (*v294 == 3)
        {
          v344[v292 / 0x10] = vmulq_s32(*(int32x4_t *)&v295[v292 / 4 - 16], (int32x4_t)xmmword_20631DAC0);
          v297 = (unsigned __int128)vmulq_s32(*(int32x4_t *)&v295[v292 / 4], (int32x4_t)xmmword_20631DAC0);
        }
        else if (v298 == 1)
        {
          v344[v292 / 0x10] = vshlq_n_s32(*(int32x4_t *)&v295[v292 / 4 - 16], 4uLL);
          v297 = (unsigned __int128)vshlq_n_s32(*(int32x4_t *)&v295[v292 / 4], 4uLL);
        }
        else
        {
          if (v298)
            goto LABEL_259;
          v344[v292 / 0x10] = vmulq_s32(*(int32x4_t *)&v295[v292 / 4 - 16], v296);
          v297 = (unsigned __int128)vmulq_s32(*(int32x4_t *)&v295[v292 / 4], v296);
        }
      }
      v343[v292 / 0x10] = (int32x4_t)v297;
LABEL_259:
      v292 += 16;
      ++v294;
      if (16 * ((v330 >> 11) & 3) + 16 == v292)
      {
        if (a8[5])
          v299 = DecodeASTC_RGBA_vec_masks[a8[6]];
        else
          v299 = 0uLL;
        v340 = v299;
        PartitionTable = getPartitionTable(a7, v329, v341);
        v301 = v10 * v9;
        if (v301)
        {
          v302 = PartitionTable;
          v303 = 0;
          v342 = (float32x4_t)vdupq_n_s32(0x37800000u);
          v337 = (float32x4_t)vdupq_n_s32(0xC77FE000);
          v338 = (float32x4_t)vdupq_n_s32(0x477FE000u);
          do
          {
            v304 = v303;
            v305 = v302[v303];
            v306.i64[0] = 0x2000000020;
            v306.i64[1] = 0x2000000020;
            v307 = vsraq_n_s32(v344[v305], vmlaq_s32(v306, (int32x4_t)vbslq_s8(v340, (int8x16_t)vdupq_n_s32(v345.u16[v303]), (int8x16_t)vdupq_n_s32(*(unsigned __int16 *)&v347[2 * v303 - 1])), vsubq_s32(v343[v305], v344[v305])), 6uLL);
            if (a8[652])
              v307.i64[0] = ConvertSRGBtoLinear(v307);
            v308 = a8[v305 + 654];
            if (v308)
            {
              v309.i64[0] = 0x700000007;
              v309.i64[1] = 0x700000007;
              v310 = (int32x4_t)vandq_s8((int8x16_t)v307, v309);
              v311.i64[0] = 0x20000000200;
              v311.i64[1] = 0x20000000200;
              v312 = (uint16x4_t)vmovn_s32(v310);
              v313 = (int32x4_t)vmull_u16(v312, (uint16x4_t)0x3000300030003);
              v314.i64[0] = 0x700000007;
              v314.i64[1] = 0x700000007;
              v315 = (int8x16_t)vmlal_u16(v314, v312, (uint16x4_t)0x5000500050005);
              v316.i64[0] = 0x100000001;
              v316.i64[1] = 0x100000001;
              v317 = (int8x16_t)vaddq_s32(vshlq_n_s32(v310, 2uLL), v316);
              v318 = vbslq_s8((int8x16_t)vcgtq_u32(v311, (uint32x4_t)v310), (int8x16_t)v313, v315);
              v313.i64[0] = 0x500000005;
              v313.i64[1] = 0x500000005;
              v319 = (uint32x4_t)vaddq_s32(v310, v313);
              v313.i64[0] = 0x300000003;
              v313.i64[1] = 0x300000003;
              v320 = (int32x4_t)vbslq_s8((int8x16_t)vcgtq_u32((uint32x4_t)v313, v319), v318, v317);
              v317.i64[0] = 0x7C0000007C00;
              v317.i64[1] = 0x7C0000007C00;
              v321 = vsraq_n_s32((int32x4_t)vandq_s8((int8x16_t)vshrq_n_u32((uint32x4_t)v307, 1uLL), v317), v320, 3uLL);
              v320.i64[0] = 0x7B0000007BLL;
              v320.i64[1] = 0x7B0000007BLL;
              v322 = vminq_s32(v321, v320);
              if (v308 == 3)
              {
                v323.i64[0] = 0xFFFF0000FFFFLL;
                v323.i64[1] = 0xFFFF0000FFFFLL;
                v324 = vsubq_s32(v307, vceqq_s32(v307, (int32x4_t)v323));
                v323.i64[0] = 0x300000003;
                v323.i64[1] = 0x300000003;
                v325 = (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8((int8x16_t)v324, (int8x16_t)vcgtq_s32(v324, (int32x4_t)v323))), v342), v338), v337);
                v323.i64[0] = 0x1F0000001FLL;
                v323.i64[1] = 0x1F0000001FLL;
                v322.i32[3] = vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8(v325, v323))).i32[3];
              }
            }
            else if (a8[653])
            {
              v326.i64[0] = 0xFFFF0000FFFFLL;
              v326.i64[1] = 0xFFFF0000FFFFLL;
              v327 = vsubq_s32(v307, vceqq_s32(v307, v326));
              v326.i64[0] = 0x300000003;
              v326.i64[1] = 0x300000003;
              v328 = (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8((int8x16_t)v327, (int8x16_t)vcgtq_s32(v327, v326))), v342), v338), v337);
              v326.i64[0] = 0x1F0000001FLL;
              v326.i64[1] = 0x1F0000001FLL;
              v322 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8(v328, (int8x16_t)v326)));
            }
            else
            {
              v322 = v307;
            }
            *(int32x4_t *)&a8[4 * v304 + 72] = v322;
            v303 = v304 + 1;
          }
          while (v301 > (unsigned __int16)(v304 + 1));
        }
        return 0;
      }
    }
  }
  v71 = (unsigned __int16)(v10 * v9);
  if (!((_WORD)v10 * (_WORD)v9))
    return -3;
  v72 = a8 + 72;
  if (a8[653])
    v73 = 0xFFFF;
  else
    v73 = 0;
  LODWORD(v74) = 0xFFFF;
  *((_QWORD *)&v74 + 1) = 0xFFFF0000FFFFLL;
  DWORD1(v74) = v73;
  result = -3;
  do
  {
    *v72++ = v74;
    --v71;
  }
  while (v71);
  return result;
}

double PackDualBlock_4x4(int8x16_t *a1)
{
  unsigned int v1;
  unsigned int v2;
  unsigned int v3;
  int v4;
  int8x16_t v5;
  const char *v6;
  int8x16_t v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  uint64x2_t v13;
  int64x2_t v14;
  int8x16_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  int16x8_t v24;
  unsigned int v25;
  uint16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  int16x8_t v29;
  int16x8_t v30;
  uint16x8_t v31;
  uint16x8_t v32;
  uint16x8_t v33;
  int8x16_t v34;
  int8x16_t v35;
  const char *v36;
  uint8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int32x4_t v43;
  int16x8_t v44;
  int8x16_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int8x16_t v54;
  int8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  int8x16_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int32x4_t v62;
  int8x16_t v63;
  int32x4_t v64;
  int8x16_t v65;
  int64x2_t v66;
  uint64x2_t v67;
  int64x2_t v68;
  int64x2_t v69;
  char v70;
  int8x16_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int16x8_t v74;
  int16x8_t v75;
  int16x8_t v76;
  int16x8_t v77;
  int16x8_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int16x8_t v82;
  int8x16_t v83;
  int8x16_t v84;
  int8x16_t v85;
  int32x4_t v86;
  int8x16_t v87;
  int32x4_t v88;
  int32x4_t v89;
  int8x16_t v90;
  int64x2_t v91;
  unint64_t v92;
  uint64x2_t v93;
  int64x2_t v94;
  int64x2_t v95;
  unsigned int v96;
  int8x16_t v97;
  int v98;
  int8x16_t v99;
  double result;
  int8x16_t v101;
  int8x16_t v102;
  int8x16_t v103;
  __int16 v104;
  char v105;

  v1 = a1[3].u8[5];
  v2 = __clz(__rbit32(v1 + 1));
  v3 = (v1 + 1) >> v2;
  v4 = v3;
  v5 = a1[2];
  if (v3 == 1)
  {
    v6 = &a1[3].i8[6];
    v7 = vld1q_dup_s8(v6);
    v8 = vandq_s8(v5, (int8x16_t)vcgtq_u8((uint8x16_t)v7, (uint8x16_t)xmmword_2062D8540));
    v9 = vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)(*(_OWORD *)&v8 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16((8 - v2)))), (int8x16_t)(*(_OWORD *)&v8 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
    v7.i64[0] = 0xFFFF0000FFFFLL;
    v7.i64[1] = 0xFFFF0000FFFFLL;
    v10.i64[0] = 0xFFFF0000FFFF0000;
    v10.i64[1] = 0xFFFF0000FFFF0000;
    v11 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8(v9, v10), (uint32x4_t)vnegq_s32(vdupq_n_s32(2 * ((8 - (_BYTE)v2) & 0x7Fu)))), vandq_s8(v9, v7));
    v7.i64[0] = 0xFFFFFFFFLL;
    v7.i64[1] = 0xFFFFFFFFLL;
    v12 = vandq_s8(v11, v7);
    v10.i64[0] = 0xFFFFFFFF00000000;
    v10.i64[1] = 0xFFFFFFFF00000000;
    v13 = (uint64x2_t)vandq_s8(v11, v10);
    *(int32x2_t *)v10.i8 = vdup_n_s32(4 * ((8 - (_BYTE)v2) & 0x3Fu));
    v14.i64[0] = v10.u32[0];
    v14.i64[1] = v10.u32[1];
    v15 = vorrq_s8((int8x16_t)vshlq_u64(v13, (uint64x2_t)vnegq_s64(v14)), v12);
    v16 = v15.u64[1];
    v17 = 8 * v2;
    v18 = (v15.i64[1] << v17) | v15.i64[0];
    v2 = -v17;
LABEL_17:
    v39.i64[0] = v18;
    v39.i64[1] = v16 >> v2;
    goto LABEL_18;
  }
  if (v2)
  {
    v19 = vmovl_u8(*(uint8x8_t *)v5.i8);
    v20 = vmovl_high_u8((uint8x16_t)v5);
    v21 = (uint16x8_t)vdupq_n_s16(v1);
    v22 = vsubw_u8(v21, *(uint8x8_t *)v5.i8);
    v23 = vsubw_high_u8(v21, (uint8x16_t)v5);
    v24 = (int16x8_t)vminq_u16(v23, v20);
    if (v3 == 3)
      v25 = 21846;
    else
      v25 = 13108;
    v26 = (uint16x8_t)vdupq_n_s16(v25);
    v27 = (int16x8_t)vminq_u16(v22, v19);
    v28 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v26.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v27, v26), 0x10uLL);
    v29 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v26.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v24, v26), 0x10uLL);
    v30 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v3));
    v31 = (uint16x8_t)vmlsq_s16(v27, v28, v30);
    v32 = (uint16x8_t)vmlsq_s16(v24, v29, v30);
    v33 = (uint16x8_t)vdupq_n_s16(v2);
    v34 = (int8x16_t)vcgtq_u16(v19, v22);
    v35.i64[0] = 0x1000100010001;
    v35.i64[1] = 0x1000100010001;
    v5 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v31, v33), vaddq_s16(v28, v28)), vandq_s8(v34, v35)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v32, v33), vaddq_s16(v29, v29)), vandq_s8((int8x16_t)vcgtq_u16(v20, v23), v35)));
  }
  v36 = &a1[3].i8[6];
  v37 = (uint8x16_t)vld1q_dup_s8(v36);
  v38 = vandq_s8(v5, (int8x16_t)vcgtq_u8(v37, (uint8x16_t)xmmword_2062D8540));
  if (v4 == 5)
  {
    v71 = vdupq_n_s8(v2);
    v72 = (int8x16_t)vshlq_u8((uint8x16_t)v38, (uint8x16_t)vnegq_s8(v71));
    v73 = vqtbl1q_s8(v72, (int8x16_t)xmmword_20631C640);
    v74 = (int16x8_t)vqtbl1q_s8(v72, (int8x16_t)xmmword_20631C650);
    v75 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v73.i8, (uint8x8_t)0x2001200120012001), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL), (uint8x8_t)0x2001200120012001));
    v73.i64[0] = 0x7000700070007;
    v73.i64[1] = 0x7000700070007;
    v76 = (int16x8_t)vandq_s8((int8x16_t)v75, v73);
    v77 = (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v75, 5uLL), v73);
    v78.i64[0] = 0x4000400040004;
    v78.i64[1] = 0x4000400040004;
    v79 = (int8x16_t)vceqq_s16(v74, v78);
    v80 = (int8x16_t)vceqq_s16(v77, v78);
    v81 = vsubq_s8((int8x16_t)vaddq_s16(v75, vshlq_n_s16(v74, 3uLL)), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C660, (int8x16_t)v76), v80));
    if ((vmaxvq_u16((uint16x8_t)v79) & 0x8000) != 0)
    {
      v82.i64[0] = 0x18001800180018;
      v82.i64[1] = 0x18001800180018;
      v81 = vsubq_s8(v81, vaddq_s8(vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C670, (int8x16_t)v76), v79), vandq_s8((int8x16_t)vmulq_s16(v77, v82), vandq_s8((int8x16_t)vceqq_s16(v76, v78), v79))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C680, (int8x16_t)v76), vandq_s8(v80, v79))));
    }
    v83 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v81, (int8x16_t)xmmword_20631CF00), (int8x16_t)xmmword_20631CF10), (uint8x16_t)xmmword_20631CF20), (uint8x16_t)v71), vandq_s8(v38, vdupq_n_s8((1 << v2) - 1)));
    v84 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(vshlq_u16((uint16x8_t)(*(_OWORD *)&v83 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(6 - v2))), (uint16x8_t)xmmword_20631CF30), (int16x8_t)(*(_OWORD *)&v83 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
    v85.i64[0] = 0xFFFF0000FFFFLL;
    v85.i64[1] = 0xFFFF0000FFFFLL;
    v86 = (int32x4_t)vandq_s8(v84, v85);
    v87.i64[0] = 0xFFFF0000FFFF0000;
    v87.i64[1] = 0xFFFF0000FFFF0000;
    v88 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v84, v87), (uint32x4_t)vnegq_s32(vdupq_n_s32(12 - 2 * v2)));
    v89 = vaddq_s32(v88, v86);
    v88.i32[1] = 0;
    v90 = (int8x16_t)vaddq_s32(v89, v88);
    v89.i64[0] = 0xFFFFFFFFLL;
    v89.i64[1] = 0xFFFFFFFFLL;
    v91 = (int64x2_t)vandq_s8(v90, (int8x16_t)v89);
    v87.i64[0] = 0xFFFFFFFF00000000;
    v87.i64[1] = 0xFFFFFFFF00000000;
    LODWORD(v92) = 0;
    HIDWORD(v92) = v90.i32[1];
    v93 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v90, v87), (int64x2_t)v92);
    *(int32x2_t *)v87.i8 = vdup_n_s32(23 - 4 * v2);
    v94.i64[0] = v87.u32[0];
    v94.i64[1] = v87.u32[1];
    v95 = vaddq_s64((int64x2_t)vshlq_u64(v93, (uint64x2_t)vnegq_s64(v94)), v91);
    v16 = v95.u64[1];
    v18 = (v95.i64[1] << (8 * v2 + 19)) | v95.i64[0];
    v70 = 45;
    goto LABEL_16;
  }
  v39 = 0uLL;
  if (v4 == 3)
  {
    v40 = vdupq_n_s8(v2);
    v41 = (int8x16_t)vshlq_u8((uint8x16_t)v38, (uint8x16_t)vnegq_s8(v40));
    v42 = vqtbl1q_s8(v41, (int8x16_t)xmmword_20631C6C0);
    v43 = (int32x4_t)vqtbl1q_s8(v41, (int8x16_t)xmmword_20631C6D0);
    v44 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v42.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v42, v42, 8uLL), (uint8x8_t)0x8010040180100401));
    v44.i64[0] = vpaddq_s16(v44, v44).u64[0];
    v45 = (int8x16_t)vmovl_s16(*(int16x4_t *)v44.i8);
    v46 = vshlq_n_s32(v43, 5uLL);
    v42.i64[0] = 0x3000000030;
    v42.i64[1] = 0x3000000030;
    v47.i64[0] = 0x2000000020;
    v47.i64[1] = 0x2000000020;
    v48 = (int8x16_t)vceqq_s32((int32x4_t)vandq_s8(v45, v42), v47);
    v49 = vaddw_s16(v46, *(int16x4_t *)v44.i8);
    v47.i64[0] = 0xFF000000FFLL;
    v47.i64[1] = 0xFF000000FFLL;
    v50 = (int8x16_t)vcgtq_s32(v49, v47);
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v48, v50)) & 0x80000000) != 0)
    {
      v51.i64[0] = 0x200000002;
      v51.i64[1] = 0x200000002;
      v52 = (int8x16_t)vceqq_s32(v43, v51);
      v53 = (int8x16_t)vshrq_n_u32((uint32x4_t)v45, 2uLL);
      v54 = vandq_s8(v50, v52);
      v55.i64[0] = 0xF0000000FLL;
      v55.i64[1] = 0xF0000000FLL;
      v56 = vandq_s8(v45, v55);
      v57.i64[0] = 0x303030303030303;
      v57.i64[1] = 0x303030303030303;
      v58.i64[0] = 0x6060606060606060;
      v58.i64[1] = 0x6060606060606060;
      v49 = (int32x4_t)vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v58, (int8x16_t)v46, v57), v50), (int8x16_t)v49), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v56), v48), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v53, v55)), v54))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v56), vandq_s8(v54, v48)));
    }
    v59 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8((int8x16_t)v49, (int8x16_t)xmmword_20631CEE0), (int8x16_t)xmmword_20631C780), (uint8x16_t)xmmword_20631C7B0), (uint8x16_t)v40), vandq_s8(v38, vdupq_n_s8((1 << v2) - 1)));
    v60 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(vshlq_u16((uint16x8_t)(*(_OWORD *)&v59 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(7 - v2))), (uint16x8_t)xmmword_20631CEF0), (int16x8_t)(*(_OWORD *)&v59 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
    v61.i64[0] = 0xFFFF0000FFFFLL;
    v61.i64[1] = 0xFFFF0000FFFFLL;
    v62 = (int32x4_t)vandq_s8(v60, v61);
    v63.i64[0] = 0xFFFF0000FFFF0000;
    v63.i64[1] = 0xFFFF0000FFFF0000;
    v64 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v60, v63), (uint32x4_t)vnegq_s32(vdupq_n_s32(13 - 2 * v2)));
    v65 = (int8x16_t)vaddq_s32(vaddq_s32(v64, v62), (int32x4_t)v64.u32[0]);
    v62.i64[0] = 0xFFFFFFFFLL;
    v62.i64[1] = 0xFFFFFFFFLL;
    v66 = (int64x2_t)vandq_s8(v65, (int8x16_t)v62);
    v63.i64[0] = 0xFFFFFFFF00000000;
    v63.i64[1] = 0xFFFFFFFF00000000;
    v67 = (uint64x2_t)vandq_s8(v65, v63);
    *(int32x2_t *)v63.i8 = vdup_n_s32(25 - 4 * v2);
    v68.i64[0] = v63.u32[0];
    v68.i64[1] = v63.u32[1];
    v69 = vaddq_s64((int64x2_t)vshlq_u64(v67, (uint64x2_t)vnegq_s64(v68)), v66);
    v16 = v69.u64[1];
    v18 = (v69.i64[1] << (8 * v2 + 13)) | v69.i64[0];
    v70 = 51;
LABEL_16:
    LOBYTE(v2) = v70 - 8 * v2;
    goto LABEL_17;
  }
LABEL_18:
  v103 = (int8x16_t)a1[3].u32[0];
  v96 = a1[3].u8[7];
  v97 = vqtbl1q_s8(v39, vsubq_s8((int8x16_t)xmmword_2062D8540, vdupq_n_s8(v96 >> 3)));
  v102 = (int8x16_t)vshlq_u64((uint64x2_t)v97, (uint64x2_t)vdupq_n_s64(v96 & 7));
  v101 = (int8x16_t)vshlq_u64((uint64x2_t)vqtbl1q_s8(v97, (int8x16_t)xmmword_2062D8550), (uint64x2_t)vdupq_n_s64(*(_QWORD *)&v96 | 0xFFFFFFFFFFFFFFF8));
  v98 = a1[3].u8[4];
  v105 = __clz(__rbit32(v98 + 1));
  v104 = v98 | ((unsigned __int16)((v98 + 1) >> v105) << 8);
  *(double *)v99.i64 = PackWeights((unsigned __int8 *)&v104, *a1);
  *(_QWORD *)&result = vorrq_s8(vorrq_s8(vorrq_s8(v102, v103), v101), v99).u64[0];
  return result;
}

void ASTCEncoder::CompressTexels(ASTCEncoder *this, const at_texel_region_t *a2, const at_block_buffer_t *a3, float a4, at_flags_t a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char v11;
  float v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  int *v21;
  int v22;
  float v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned int v26;
  void *v27;
  float v28;
  __int128 *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _BOOL4 v39;
  int v40;
  uint64_t v41;
  _BOOL4 v42;
  NSObject *global_queue;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  qos_class_t v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t v53;
  int v54;
  __int128 context;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  int v68;
  int v69;
  _BOOL4 v70;
  int v71;
  float v72;
  float v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  _BOOL4 v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  _BYTE v84[16384];
  uint64_t v85;

  v5 = MEMORY[0x24BDAC7A8](this);
  v10 = v5;
  v85 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v5 + 88))
  {
    v11 = v8;
    if ((v8 & 0xFFFFFFFFFFFFFFA0) != 0)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels: the ASTC encoding does not support flag(s) 0x%16.16llx\n", v8 & 0xFFFFFFFFFFFFFFA0);
    }
    else
    {
      v12 = v9;
      v13 = v7;
      v14 = v6;
      v15 = v6 + 1;
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 56))(v5, v6[1], *((unsigned int *)v6 + 4));
      v17 = v16;
      v19 = v18;
      v20 = HIDWORD(v16);
      v22 = *(_DWORD *)(v10 + 16);
      v21 = (int *)(v10 + 16);
      v23 = (float)(*(_DWORD *)(v10 + 20) * v22 * *(_DWORD *)(v10 + 24));
      v53 = HIDWORD(v16);
      if ((v11 & 8) != 0)
      {
        v24 = 0;
      }
      else if (v16 < 0x100100000000)
      {
        bzero(v84, 4 * v20);
        v24 = v84;
        LODWORD(v20) = v53;
      }
      else
      {
        v24 = malloc_type_calloc(HIDWORD(v16), 4uLL, 0x100004052888210uLL);
        LODWORD(v20) = v53;
        v22 = *v21;
      }
      v25 = v20 >> 4;
      if (v20 <= 0x1F)
        v25 = 1;
      if ((v11 & 4) != 0)
        v26 = v20;
      else
        v26 = v25;
      if ((v11 & 0x40) != 0)
        v27 = 0;
      else
        v27 = &ASTCEncoder::CompressTexels(at_texel_region_t const&,at_block_buffer_t const&,float,at_flags_t)const::kSRGBprimaries;
      v28 = 0.75;
      if ((v11 & 0x40) != 0)
        v28 = 1.0;
      v29 = *(__int128 **)(v10 + 8);
      v30 = *v29;
      v31 = *v14;
      v32 = *v13;
      v33 = *((_QWORD *)v29 + 2);
      v34 = (v33 >> 34) & 0x1F;
      v35 = (v33 >> 26) & 0xF;
      v36 = v34 / v35;
      v37 = *(_OWORD *)(v14 + 3);
      v38 = *(_OWORD *)(v13 + 1);
      v39 = v22 * v17 != *((_DWORD *)v14 + 2);
      v40 = *((_DWORD *)v29 + 9);
      v41 = (v35 + v22 * (_DWORD)v34 - 1) / v35;
      v42 = v22 != 4 || *(_DWORD *)(v10 + 20) != 4;
      global_queue = 0;
      v45 = *(_QWORD *)(v10 + 48);
      v44 = *(_QWORD *)(v10 + 56);
      context = v30;
      v56 = v27;
      v57 = v31;
      v58 = v32;
      v59 = v24;
      v52 = v24;
      v46 = *(_OWORD *)(v10 + 32);
      v60 = *v15;
      v61 = *((_DWORD *)v15 + 2);
      v62 = *(_QWORD *)v21;
      v63 = *(_DWORD *)(v10 + 24);
      v64 = v36;
      v65 = v41;
      v66 = v37;
      v67 = v38;
      v68 = v17;
      v69 = v20;
      v70 = v39;
      v71 = 0;
      v72 = v23 * v12;
      v73 = v28;
      v75 = 0;
      v76 = 0;
      v74 = v40;
      v77 = v26;
      v78 = v42;
      v79 = v45;
      v80 = v46;
      v81 = v44;
      v82 = 0u;
      v83 = 0u;
      if ((v11 & 4) == 0 && v20 >= 2)
      {
        v47 = qos_class_self();
        global_queue = dispatch_get_global_queue(v47, 0);
      }
      if (v19)
      {
        v48 = 0;
        v49 = v53 + v26 - 1;
        if (v49 / v26 <= 1)
          v50 = 1;
        else
          v50 = v49 / v26;
        do
        {
          if (global_queue)
          {
            dispatch_apply_f(v49 / v26, global_queue, &context, (void (__cdecl *)(void *, size_t))EncodeRowBlock);
          }
          else if (v26 <= v49)
          {
            v51 = 0;
            do
            {
              EncodeRowBlock(&context);
              ++v51;
            }
            while (v50 != v51);
          }
          v57 += *((_QWORD *)&v66 + 1);
          v58 += *((_QWORD *)&v67 + 1);
          v61 -= *(_DWORD *)(v10 + 24);
          v71 = v48++;
        }
        while (v48 != v19);
      }
      if (v52)
      {
        v54 = 0;
        _vDSP_meanv(v52, 1, &v54, v53);
        if (v52 != v84)
          free(v52);
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels: the ASTC encoding does not support output block format %u\n", *(_DWORD *)(*(_QWORD *)(v5 + 8) + 24) & 0x7FF);
  }
}

unint64_t WeightInfoForSingleLineDualWeight_4x4(int a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  v2 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
  v3 = (_QWORD *)((char *)&kSingleLineDualWeightTable + 8
                                                      * kSingleLineDualWeightIndexTable[4 * a1 + v2]);
  return *v3 & 0xFFE00000FFFE1FFFLL | ((unint64_t)*((unsigned __int8 *)v3 + v2 + 4) << 32) & 0xFFE0FFFFFFFFFFFFLL | (a2 << 40) & 0xFFE0FFFFFFFFFFFFLL | ((unint64_t)(a1 & 0x1F) << 48) | ((v2 & 3) << 15);
}

float32x2_t SetAlphaOne_4x4_vec(uint64_t a1)
{
  float32x4_t *v1;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x2_t result;

  v1 = (float32x4_t *)(a1 + 272);
  *(_BYTE *)(a1 + 134) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_WORD *)(a1 + 784) = 0;
  __asm { FMOV            V20.4S, #1.0 }
  *(int32x4_t *)(a1 + 368) = _Q20;
  *(int32x4_t *)(a1 + 384) = _Q20;
  *(int32x4_t *)(a1 + 336) = _Q20;
  *(int32x4_t *)(a1 + 352) = _Q20;
  if (*(float *)(a1 + 124) >= 0.0)
  {
    v9 = *(float32x4_t *)(a1 + 176);
    v8 = *(float32x4_t *)(a1 + 192);
    v11 = *(float32x4_t *)(a1 + 144);
    v10 = *(float32x4_t *)(a1 + 160);
    v13 = *(float32x4_t *)(a1 + 240);
    v12 = *(float32x4_t *)(a1 + 256);
    v15 = *(float32x4_t *)(a1 + 208);
    v14 = *(float32x4_t *)(a1 + 224);
    v17 = *(float32x4_t *)(a1 + 304);
    v16 = *(float32x4_t *)(a1 + 320);
    v19 = *v1;
    v18 = *(float32x4_t *)(a1 + 288);
  }
  else
  {
    v7 = *(float32x4_t **)(a1 + 32);
    v9 = *(float32x4_t *)(a1 + 176);
    v8 = *(float32x4_t *)(a1 + 192);
    v11 = *(float32x4_t *)(a1 + 144);
    v10 = *(float32x4_t *)(a1 + 160);
    v13 = *(float32x4_t *)(a1 + 240);
    v12 = *(float32x4_t *)(a1 + 256);
    v15 = *(float32x4_t *)(a1 + 208);
    v14 = *(float32x4_t *)(a1 + 224);
    v17 = *(float32x4_t *)(a1 + 304);
    v16 = *(float32x4_t *)(a1 + 320);
    v19 = *v1;
    v18 = *(float32x4_t *)(a1 + 288);
    if (v7)
      v20 = *v7;
    else
      v20 = (float32x4_t)xmmword_20631C430;
    v21 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v12, *(float32x2_t *)v20.f32, 1), v8, v20.f32[0]), v16, v20, 2);
    v22 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v13, *(float32x2_t *)v20.f32, 1), v9, v20.f32[0]), v17, v20, 2);
    v23 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v14, *(float32x2_t *)v20.f32, 1), v10, v20.f32[0]), v18, v20, 2);
    v24 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v15, *(float32x2_t *)v20.f32, 1), v11, v20.f32[0]), v19, v20, 2);
    *(float32x4_t *)(a1 + 656) = v24;
    *(float32x4_t *)(a1 + 672) = v23;
    *(float32x4_t *)(a1 + 688) = v22;
    *(float32x4_t *)(a1 + 704) = v21;
    v25 = vsubq_f32(v10, v23);
    v26 = vsubq_f32(v8, v21);
    v27 = vsubq_f32(v11, v24);
    v28 = vsubq_f32(v9, v22);
    v29 = vsubq_f32(v13, v22);
    v30 = vsubq_f32(v15, v24);
    v31 = vsubq_f32(v12, v21);
    v32 = vsubq_f32(v14, v23);
    v33 = vsubq_f32(v17, v22);
    v34 = vsubq_f32(v19, v24);
    v35 = vsubq_f32(v16, v21);
    v36 = vsubq_f32(v18, v23);
    v37 = vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v30, v30), v27, v27), v34, v34), vmlaq_f32(vmlaq_f32(vmulq_f32(v29, v29), v28, v28), v33, v33)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v32, v32), v25, v25), v36, v36), vmlaq_f32(vmlaq_f32(vmulq_f32(v31, v31), v26, v26), v35, v35)));
    v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
    v37.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32).f32[0]);
    *(float *)(a1 + 124) = (float)(v37.f32[0] * 3.0) + (float)(v37.f32[0] * 3.0);
  }
  v38 = vzip1q_s32((int32x4_t)v11, (int32x4_t)v19);
  v39 = vzip1q_s32((int32x4_t)v10, (int32x4_t)v18);
  v40 = vzip2q_s32((int32x4_t)v11, (int32x4_t)v19);
  v41 = vzip2q_s32((int32x4_t)v10, (int32x4_t)v18);
  v42 = vzip1q_s32((int32x4_t)v14, _Q20);
  v43 = vzip2q_s32((int32x4_t)v15, _Q20);
  v44 = vzip2q_s32((int32x4_t)v14, _Q20);
  v45 = vzip1q_s32(v39, v42);
  v46 = vzip2q_s32(v39, v42);
  v47 = vzip1q_s32(v41, v44);
  v48 = vzip1q_s32(v40, v43);
  v49 = vzip2q_s32(v41, v44);
  v50 = vzip2q_s32(v40, v43);
  v51 = (int32x4_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 0xCuLL);
  v52 = vzip1q_s32(v38, v51);
  v52.i32[1] = v15.i32[0];
  v53 = vzip1q_s32(_Q20, _Q20);
  v54 = vzip2q_s32(v38, v53);
  v54.i32[1] = v15.i32[1];
  *(int32x4_t *)(a1 + 432) = v48;
  *(int32x4_t *)(a1 + 448) = v50;
  *(int32x4_t *)(a1 + 400) = v52;
  *(int32x4_t *)(a1 + 416) = v54;
  *(int32x4_t *)(a1 + 496) = v47;
  *(int32x4_t *)(a1 + 512) = v49;
  *(int32x4_t *)(a1 + 464) = v45;
  *(int32x4_t *)(a1 + 480) = v46;
  v55 = vzip1q_s32((int32x4_t)v9, (int32x4_t)v17);
  v56 = vzip1q_s32((int32x4_t)v8, (int32x4_t)v16);
  v57 = vzip2q_s32((int32x4_t)v9, (int32x4_t)v17);
  v58 = vzip2q_s32((int32x4_t)v8, (int32x4_t)v16);
  v59 = vzip1q_s32((int32x4_t)v12, _Q20);
  v60 = vzip2q_s32((int32x4_t)v13, _Q20);
  v61 = vzip2q_s32((int32x4_t)v12, _Q20);
  v62 = vzip1q_s32(v56, v59);
  v63 = vzip2q_s32(v56, v59);
  v64 = vzip1q_s32(v58, v61);
  v65 = vzip2q_s32(v58, v61);
  v66 = vzip1q_s32(v55, v51);
  v66.i32[1] = v13.i32[0];
  v67 = vzip2q_s32(v55, v53);
  v67.i32[1] = v13.i32[1];
  *(int32x4_t *)(a1 + 560) = vzip1q_s32(v57, v60);
  *(int32x4_t *)(a1 + 576) = vzip2q_s32(v57, v60);
  *(int32x4_t *)(a1 + 528) = v66;
  *(int32x4_t *)(a1 + 544) = v67;
  *(int32x4_t *)(a1 + 624) = v64;
  *(int32x4_t *)(a1 + 640) = v65;
  *(int32x4_t *)(a1 + 592) = v62;
  *(int32x4_t *)(a1 + 608) = v63;
  v68 = vmulq_f32(v8, v8);
  v69 = vmulq_f32(v9, v9);
  v70 = vpaddq_f32(vaddq_f32(vaddq_f32(v11, v9), vaddq_f32(v10, v8)), vaddq_f32(vaddq_f32(v15, v13), vaddq_f32(v14, v12)));
  __asm { FMOV            V7.4S, #4.0 }
  v72 = vpaddq_f32(v70, vpaddq_f32(vaddq_f32(vaddq_f32(v19, v17), vaddq_f32(v18, v16)), _Q7));
  v73 = vpaddq_f32(vpaddq_f32(vaddq_f32(vmlaq_f32(v69, v11, v11), vmlaq_f32(v68, v10, v10)), vaddq_f32(vmlaq_f32(vmulq_f32(v13, v13), v15, v15), vmlaq_f32(vmulq_f32(v12, v12), v14, v14))), vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v17, v17), v19, v19), vmlaq_f32(vmulq_f32(v16, v16), v18, v18)), _Q7));
  v74 = vmulq_f32(v72, (float32x4_t)vdupq_n_s32(0x3D800000u));
  v75 = vmlsq_f32(v73, v74, v72);
  *(float32x4_t *)(a1 + 16) = v74;
  v75.i64[0] = vpaddq_f32(v75, v75).u64[0];
  result = vpadd_f32(*(float32x2_t *)v75.f32, *(float32x2_t *)v75.f32);
  *(_DWORD *)(a1 + 120) = result.i32[0];
  return result;
}

uint64_t ASTCEncoder::GetBlockSize(ASTCEncoder *this)
{
  return 16;
}

uint64_t ClampPremultiplied_vec(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v3;
  float32x4_t v4;
  float32x4_t v5;
  int8x16_t v6;
  int32x4_t *v7;
  int32x4_t v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;

  if (HIDWORD(result) * (_DWORD)result)
  {
    v3 = 0;
    v4 = (float32x4_t)vdupq_n_s32(0x477FE000u);
    v5 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    v6.i64[0] = 0x1F0000001FLL;
    v6.i64[1] = 0x1F0000001FLL;
    do
    {
      v7 = (int32x4_t *)(a3 + 16 * v3);
      v8 = v7[18];
      if (*(_DWORD *)(a3 + 2612))
      {
        v9 = (int32x4_t)vcvtq_f32_f16((float16x4_t)vmovn_s32(v8));
        v10 = (float32x4_t)v9;
        v10.i32[3] = 0;
        v11 = (float32x4_t)vdupq_laneq_s32(v9, 3);
        v11.i32[3] = 0;
        v12 = vminnmq_f32(v10, v11);
        v12.i32[3] = v9.i32[3];
        v13 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(v12, v4), v5), v6)));
      }
      else
      {
        v14 = v7[18];
        v14.i32[3] = 0;
        v15 = vdupq_laneq_s32(v8, 3);
        v15.i32[3] = 0;
        v13 = vminq_s32(v14, v15);
        v13.i32[3] = HIDWORD(*(_OWORD *)&v7[18]);
      }
      v7[18] = v13;
      ++v3;
    }
    while (HIDWORD(result) * (int)result > v3);
  }
  return result;
}

unint64_t ASTCEncoder::GetBlockCounts(ASTCEncoder *this, at_size_t a2)
{
  return ((a2.x + *((_DWORD *)this + 4) - 1) / *((_DWORD *)this + 4)) | ((unint64_t)((a2.y
                                                                                           + *((_DWORD *)this + 5)
                                                                                           - 1)
                                                                                          / *((_DWORD *)this + 5)) << 32);
}

uint64_t AllocateEncoder()
{
  objc_opt_class();
  return _os_object_alloc();
}

uint64_t (*EncoderCheck_ASTC(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16) & 0x7FFLL;
  if ((v1 - 1) > 9)
    return 0;
  v2 = *(_QWORD *)(a1 + 24) & 0x7FFLL;
  if (v2 > 0x1E || ((1 << *(_BYTE *)(a1 + 24)) & 0x7FFE7FFE) == 0)
    return 0;
  if (((*(_QWORD *)(a1 + 24) >> 26) & 0xF)
     * ((*(_QWORD *)(a1 + 16) >> 34) & 0x1F)
     * ((*(_QWORD *)(a1 + 24) >> 30) & 0xFuLL) <= 0xF)
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_create: this combination of texelType (%u) and blockType (%u)\n                        would cause the image to grow larger.\n", v1, v2);
    return 0;
  }
  return EncoderFactory_ASTC;
}

uint64_t ATEncoder_dtor(uint64_t result)
{
  if (result)
    return (**(uint64_t (***)(uint64_t))(result + 80))(result + 80);
  return result;
}

_QWORD *ATEncoderCompressTexels_BlockBufferIsNotWritableOrIsNot16ByteAligned(const at_block_buffer_t *a1, const at_size_t *a2)
{
  _QWORD *blocks;
  _QWORD *v3;

  blocks = a1->blocks;
  v3 = (char *)a1->blocks + 16 * (a2->x - 1) + a1->rowBytes * (a2->y - 1) + a1->sliceBytes * (a2->z - 1);
  *blocks = 0;
  blocks[1] = 0;
  return ATEncoderCompressTexels_BlockBufferIsNotBigEnoughOrRowBytesSliceBytesAreNotAMultipleOf16(v3);
}

void ___ZL22at_get_cpucapabilitiesv_block_invoke()
{
  at_get_cpucapabilities(void)::gCapabilities = MEMORY[0xFFFFFC020];
}

uint32_t at_encoder_get_version(void)
{
  uint32_t result;
  char *dli_fbase;
  unsigned int v3;
  unsigned int v4;
  unsigned int *i;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  unsigned int v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  Dl_info v14;

  result = at_encoder_get_version::version;
  if (at_encoder_get_version::version)
    return result;
  result = dladdr(at_encoder_create, &v14);
  if (!result)
    return result;
  dli_fbase = (char *)v14.dli_fbase;
  if (!v14.dli_fbase)
    return 0;
  if (*(_DWORD *)v14.dli_fbase != -889275714 && *(_DWORD *)v14.dli_fbase != -1095041334)
    goto LABEL_16;
  v3 = *((_DWORD *)v14.dli_fbase + 1);
  if (!v3)
    return 0;
  v4 = bswap32(v3);
  for (i = (unsigned int *)((char *)v14.dli_fbase + 16); *(i - 2) != 16777228; i += 5)
  {
    if (!--v4)
      return 0;
  }
  v6 = *i;
  if (!(_DWORD)v6)
    return 0;
  dli_fbase = (char *)v14.dli_fbase + v6;
LABEL_16:
  v8 = *((_DWORD *)dli_fbase + 8);
  v7 = dli_fbase + 32;
  v9 = *(v7 - 3);
  v10 = v8 != 13;
  v11 = v8 != 13 && v9 >= 9;
  if (v11)
  {
    do
    {
      v12 = v7[1];
      v11 = v9 >= v12;
      v9 -= v12;
      if (!v11)
        v9 = 0;
      v7 = (_DWORD *)((char *)v7 + v12);
      v10 = *v7 != 13;
    }
    while (*v7 != 13 && v9 > 8);
  }
  result = 0;
  if (v9 >= 8 && !v10)
  {
    result = v7[4];
    at_encoder_get_version::version = result;
  }
  return result;
}

_BYTE *getPartitionTable(uint64_t a1, int a2, int a3)
{
  _BYTE *result;
  unint64_t *v7;
  unsigned __int8 *v8;
  int v9;
  int v10;
  int v11;
  char v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  uint32x2_t v17;
  unsigned int v18;
  unsigned int v19;
  int8x8_t v20;
  int v21;
  int32x2_t v22;
  int32x2_t v23;
  unsigned int v24;
  int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  int32x2_t v29;
  int32x2_t v30;
  int32x2_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  _BYTE *v36;
  uint64_t v37;
  int32x2_t v38;
  char v39;
  int8x8_t v40;
  unsigned int v41;
  unsigned int v42;

  if (a3 < 2)
    return &getPartitionTable_kZeros;
  v7 = (unint64_t *)(a1 + 8 * (a2 + (a3 << 10) - 2048));
  result = (_BYTE *)*v7;
  if (!*v7)
  {
    v8 = (unsigned __int8 *)(a1 + 24576);
    result = malloc_type_malloc(*(unsigned __int8 *)(a1 + 24577) * (unint64_t)*(unsigned __int8 *)(a1 + 24576), 0x100004077774924uLL);
    if (result)
    {
      v9 = v8[1];
      if (v8[1])
      {
        v10 = 0;
        v11 = *v8;
        v12 = (v9 * v11) < 0x1F;
        v13 = -287438703 * ((a2 + (a3 << 10) - 1024) ^ ((a2 + (a3 << 10) - 1024) >> 15));
        v14 = (65537 * (v13 ^ (v13 >> 5))) ^ ((65537 * (v13 ^ (v13 >> 5))) >> 7);
        v15 = v14 ^ (v14 >> 3) ^ ((v14 ^ (v14 >> 3)) << 6);
        v16 = v15 ^ (v15 >> 17);
        v17 = (uint32x2_t)vdup_n_s32(v16);
        v18 = v16 >> 6;
        v19 = v16 >> 2;
        v20.i32[0] = v16;
        v20.i32[1] = v16 >> 8;
        v21 = (v15 >> 20) & 0xF;
        v22 = (int32x2_t)vand_s8(v20, (int8x8_t)0xF0000000FLL);
        v23 = (int32x2_t)vand_s8((int8x8_t)vshl_u32(v17, (uint32x2_t)0xFFFFFFF4FFFFFFFCLL), (int8x8_t)0xF0000000FLL);
        if ((a2 & 2) != 0)
          v24 = 4;
        else
          v24 = 5;
        if (a3 == 3)
          v25 = 6;
        else
          v25 = 5;
        if ((a2 & 1) != 0)
          v26 = v24;
        else
          v26 = v25;
        if ((a2 & 1) != 0)
          v24 = v25;
        v27 = HIBYTE(v15) & 0xF;
        v28 = (v15 >> 28) * (v15 >> 28);
        v29 = (int32x2_t)vshl_u32(v17, (uint32x2_t)0xFFFFFFF6FFFFFFF2);
        v30 = (int32x2_t)vshl_u32((uint32x2_t)vmul_s32(v22, v22), (uint32x2_t)vneg_s32(vdup_n_s32(v26)));
        v31 = (int32x2_t)vshl_u32((uint32x2_t)vmul_s32(v23, v23), (uint32x2_t)vneg_s32(vdup_n_s32(v24)));
        v32 = ((HIWORD(v15) & 0xF) * (HIWORD(v15) & 0xF)) >> v26;
        v33 = (v21 * v21) >> v24;
        v34 = (v27 * v27) >> v26;
        v35 = v28 >> v24;
        v36 = result;
        do
        {
          if (v11)
          {
            v37 = 0;
            v38 = vmla_s32(v29, vdup_n_s32(v10 << v12), v31);
            do
            {
              v39 = 0;
              v40 = vand_s8((int8x8_t)vmla_s32(v38, vdup_n_s32((_DWORD)v37 << v12), v30), (int8x8_t)0x3F0000003FLL);
              v41 = ((_BYTE)v18 + ((_BYTE)v10 << v12) * (_BYTE)v33 + ((_DWORD)v37 << v12) * (_BYTE)v32) & 0x3F;
              v42 = (v19 + (v10 << v12) * v35 + ((_DWORD)v37 << v12) * v34) & 0x3F;
              if (a3 < 4)
                v42 = 0;
              if (a3 < 3)
                v41 = 0;
              if (v40.i32[0] < (unsigned __int32)v40.i32[1] || v40.i32[0] < v41 || v40.i32[0] < v42)
              {
                if (v40.i32[1] >= v41 && v40.i32[1] >= v42)
                {
                  v39 = 1;
                }
                else if (v41 >= v42)
                {
                  v39 = 2;
                }
                else
                {
                  v39 = 3;
                }
              }
              v36[v37++] = v39;
            }
            while (v11 != (_DWORD)v37);
            v36 += v37;
          }
          ++v10;
        }
        while (v10 != v9);
      }
      while (!__ldaxr(v7))
      {
        if (!__stlxr((unint64_t)result, v7))
          return result;
      }
      __clrex();
      free(result);
      return (_BYTE *)*v7;
    }
    else
    {
      return &getPartitionTable_kZeros;
    }
  }
  return result;
}

_BYTE *allocatePartitionTables2D(char a1, char a2)
{
  _BYTE *result;

  result = malloc_type_calloc(1uLL, 0x6008uLL, 0x10100404847D080uLL);
  if (result)
  {
    result[24576] = a1;
    result[24577] = a2;
  }
  return result;
}

uint64_t decode_bc1(unsigned __int16 *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  int v16;
  uint64_t v17;
  _OWORD v19[4];
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = a1[1];
  v4 = *((_DWORD *)a1 + 1);
  v5 = (138547333 * (unint64_t)(0xFFFF * (v2 >> 11))) >> 32;
  v6 = (68174085 * (unint64_t)(0xFFFF * ((v2 >> 5) & 0x3F))) >> 32;
  v7 = (138547333 * (unint64_t)(0xFFFF * (v2 & 0x1F))) >> 32;
  v8 = (138547333 * (unint64_t)(0xFFFF * (v3 >> 11))) >> 32;
  v9 = (68174085 * (unint64_t)(0xFFFF * ((v3 >> 5) & 0x3F))) >> 32;
  v10 = 0xFFFF * (v3 & 0x1F);
  HIDWORD(v12) = 0xFFFF;
  LODWORD(v12) = (138547333 * (unint64_t)(0xFFFF * (v2 >> 11))) >> 32;
  DWORD1(v12) = (68174085 * (unint64_t)(0xFFFF * ((v2 >> 5) & 0x3F))) >> 32;
  v11 = (138547333 * (unint64_t)v10) >> 32;
  DWORD2(v12) = (138547333 * (unint64_t)(0xFFFF * (v2 & 0x1F))) >> 32;
  HIDWORD(v13) = 0xFFFF;
  HIDWORD(v14) = 0xFFFF;
  if (v2 <= v3)
  {
    v16 = 0;
    LODWORD(v14) = (v8 + v5) >> 1;
    DWORD1(v14) = (v9 + v6) >> 1;
    DWORD2(v14) = (v11 + v7) >> 1;
    v15 = v14;
    v14 = 0uLL;
  }
  else
  {
    HIDWORD(v15) = 0xFFFF;
    LODWORD(v15) = (1431655766 * (unint64_t)(v8 + 2 * v5)) >> 32;
    DWORD1(v15) = (1431655766 * (unint64_t)(v9 + 2 * v6)) >> 32;
    DWORD2(v15) = (1431655766 * (unint64_t)(v11 + 2 * v7)) >> 32;
    LODWORD(v14) = (1431655766 * (unint64_t)(v5 + 2 * v8)) >> 32;
    DWORD1(v14) = (1431655766 * (unint64_t)(v6 + 2 * v9)) >> 32;
    DWORD2(v14) = (1431655766 * (unint64_t)(v7 + 2 * v11)) >> 32;
    v16 = 1;
  }
  v17 = 0;
  v19[0] = v12;
  DWORD2(v13) = (138547333 * (unint64_t)v10) >> 32;
  DWORD1(v13) = (68174085 * (unint64_t)(0xFFFF * ((v3 >> 5) & 0x3F))) >> 32;
  LODWORD(v13) = (138547333 * (unint64_t)(0xFFFF * (v3 >> 11))) >> 32;
  v19[1] = v13;
  v19[2] = v15;
  v19[3] = v14;
  *(_DWORD *)(a2 + 28) = v16;
  do
  {
    *(_OWORD *)(a2 + 288 + v17) = v19[v4 & 3];
    v4 >>= 2;
    v17 += 16;
  }
  while (v17 != 256);
  return 0;
}

uint64_t decode_bc2(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  unint64_t v12;
  int32x4_t v13;
  _OWORD v15[4];
  uint64_t v16;

  v2 = 0;
  v16 = *MEMORY[0x24BDAC8D0];
  v3 = *((unsigned __int16 *)a1 + 4);
  v4 = *((unsigned __int16 *)a1 + 5);
  v5 = *((_DWORD *)a1 + 3);
  v6 = (138547333 * (unint64_t)(0xFFFF * (v3 >> 11))) >> 32;
  v7 = (68174085 * (unint64_t)(0xFFFF * ((v3 >> 5) & 0x3F))) >> 32;
  v8 = (138547333 * (unint64_t)(0xFFFF * (v3 & 0x1F))) >> 32;
  *(_QWORD *)&v9 = __PAIR64__(v7, v6);
  *((_QWORD *)&v9 + 1) = v8;
  HIDWORD(v10) = 0;
  HIDWORD(v11) = 0;
  LODWORD(v11) = (138547333 * (unint64_t)(0xFFFF * (v4 >> 11))) >> 32;
  DWORD1(v11) = (68174085 * (unint64_t)(0xFFFF * ((v4 >> 5) & 0x3F))) >> 32;
  DWORD2(v11) = (138547333 * (unint64_t)(0xFFFF * (v4 & 0x1F))) >> 32;
  v15[0] = v9;
  v15[1] = v11;
  HIDWORD(v9) = 0;
  LODWORD(v9) = (1431655766 * (unint64_t)(v11 + 2 * v6)) >> 32;
  DWORD1(v9) = (1431655766 * (unint64_t)(DWORD1(v11) + 2 * v7)) >> 32;
  DWORD2(v9) = (1431655766 * (unint64_t)(DWORD2(v11) + 2 * v8)) >> 32;
  LODWORD(v10) = (1431655766 * (unint64_t)(v6 + 2 * v11)) >> 32;
  DWORD1(v10) = (1431655766 * (unint64_t)(v7 + 2 * DWORD1(v11))) >> 32;
  DWORD2(v10) = (1431655766 * (unint64_t)(v8 + 2 * DWORD2(v11))) >> 32;
  v12 = *a1;
  v15[2] = v9;
  v15[3] = v10;
  do
  {
    v13.i64[0] = 0;
    v13.i32[2] = 0;
    v13.i32[3] = 4369 * (v12 & 0xF);
    *(int32x4_t *)(a2 + 288 + v2) = vaddq_s32((int32x4_t)v15[v5 & 3], v13);
    v5 >>= 2;
    v12 >>= 4;
    v2 += 16;
  }
  while (v2 != 256);
  return 0;
}

uint64_t decode_bc3(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  int32x4_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  _BYTE v22[8];
  _OWORD v23[4];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int16 *)(a1 + 8);
  v3 = *(unsigned __int16 *)(a1 + 10);
  v4 = (138547333 * (unint64_t)(0xFFFF * (v2 >> 11))) >> 32;
  v5 = (68174085 * (unint64_t)(0xFFFF * ((v2 >> 5) & 0x3F))) >> 32;
  v6 = (138547333 * (unint64_t)(0xFFFF * (v2 & 0x1F))) >> 32;
  *(_QWORD *)&v7 = __PAIR64__(v5, v4);
  *((_QWORD *)&v7 + 1) = v6;
  v9.i32[3] = 0;
  v9.i32[0] = (138547333 * (unint64_t)(0xFFFF * (v3 >> 11))) >> 32;
  HIDWORD(v8) = 0;
  v9.i32[1] = (68174085 * (unint64_t)(0xFFFF * ((v3 >> 5) & 0x3F))) >> 32;
  v9.i32[2] = (138547333 * (unint64_t)(0xFFFF * (v3 & 0x1F))) >> 32;
  v23[0] = v7;
  v23[1] = v9;
  HIDWORD(v7) = 0;
  LODWORD(v7) = (1431655766 * (unint64_t)(v9.i32[0] + 2 * v4)) >> 32;
  DWORD1(v7) = (1431655766 * (unint64_t)(v9.i32[1] + 2 * v5)) >> 32;
  DWORD2(v7) = (1431655766 * (unint64_t)(v9.i32[2] + 2 * v6)) >> 32;
  LODWORD(v8) = (1431655766 * (unint64_t)(v4 + 2 * v9.i32[0])) >> 32;
  DWORD1(v8) = (1431655766 * (unint64_t)(v5 + 2 * v9.i32[1])) >> 32;
  DWORD2(v8) = (1431655766 * (unint64_t)(v6 + 2 * v9.i32[2])) >> 32;
  v23[2] = v7;
  v23[3] = v8;
  v10 = *(unsigned __int8 *)(a1 + 1);
  v22[0] = *(_BYTE *)a1;
  v22[1] = v10;
  v11 = 2 * v10;
  v12 = 3 * v10;
  if (v22[0] <= v10)
  {
    LOBYTE(v17) = 0;
    v13 = (13108 * (v10 + 4 * v22[0])) >> 16;
    v14 = (13108 * (v11 + 3 * v22[0])) >> 16;
    v15 = (13108 * (v12 + 2 * v22[0])) >> 16;
    v16 = (13108 * (v22[0] + 4 * v10)) >> 16;
    LOBYTE(v10) = -1;
  }
  else
  {
    v13 = (9363 * (v10 + 6 * v22[0])) >> 16;
    v14 = (9363 * (v11 + 5 * v22[0])) >> 16;
    v15 = (9363 * (v12 + 4 * v22[0])) >> 16;
    v16 = (9363 * (3 * v22[0] + 4 * v10)) >> 16;
    v17 = (9363 * (5 * v10 + 2 * v22[0])) >> 16;
    v10 = (9363 * (v22[0] + 6 * v10)) >> 16;
  }
  v18 = 0;
  v22[2] = v13;
  v22[3] = v14;
  v22[4] = v15;
  v22[5] = v16;
  v22[6] = v17;
  v22[7] = v10;
  v19 = *(_DWORD *)(a1 + 12);
  v20 = *(unsigned __int16 *)(a1 + 2) | ((unint64_t)*(unsigned int *)(a1 + 4) << 16);
  do
  {
    v9.i64[0] = 0;
    v9.i32[2] = 0;
    v9.i8[12] = v22[v20 & 7];
    v9.i8[13] = v9.i8[12];
    *(int32x4_t *)(a2 + 288 + v18) = vaddq_s32(v9, (int32x4_t)v23[v19 & 3]);
    v19 >>= 2;
    v20 >>= 3;
    v18 += 16;
  }
  while (v18 != 256);
  return 0;
}

uint64_t decode_bc4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  int32x4_t v18;
  _BYTE v20[8];
  uint64_t v21;

  v2 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a1 + 1);
  v20[0] = *(_BYTE *)a1;
  v20[1] = v3;
  v4 = (13108 * (v3 + 4 * v20[0])) >> 16;
  v5 = v20[0] > v3;
  v6 = 3 * v20[0];
  v7 = (13108 * (2 * v3 + v6)) >> 16;
  v8 = (13108 * (3 * v3 + 2 * v20[0])) >> 16;
  v9 = (13108 * (v20[0] + 4 * v3)) >> 16;
  v10 = (9363 * (v3 + 6 * v20[0])) >> 16;
  v11 = (9363 * (2 * v3 + 5 * v20[0])) >> 16;
  v12 = (9363 * (3 * v3 + 4 * v20[0])) >> 16;
  v13 = (9363 * (v6 + 4 * v3)) >> 16;
  v14 = v20[0] + 6 * v3;
  v15 = (9363 * (5 * v3 + 2 * v20[0])) >> 16;
  v16 = (9363 * v14) >> 16;
  if (v5)
    LOBYTE(v4) = v10;
  if (v5)
  {
    LOBYTE(v9) = v13;
  }
  else
  {
    LOBYTE(v11) = v7;
    LOBYTE(v12) = v8;
  }
  if (!v5)
  {
    LOBYTE(v15) = 0;
    LOBYTE(v16) = -1;
  }
  v20[2] = v4;
  v20[3] = v11;
  v20[4] = v12;
  v20[5] = v9;
  v20[6] = v15;
  v20[7] = v16;
  v17 = *(unsigned __int16 *)(a1 + 2) | ((unint64_t)*(unsigned int *)(a1 + 4) << 16);
  do
  {
    v18 = vdupq_n_s32(v20[v17 & 7] | (v20[v17 & 7] << 8));
    v18.i32[3] = 0xFFFF;
    *(int32x4_t *)(a2 + 288 + v2) = v18;
    v17 >>= 3;
    v2 += 16;
  }
  while (v2 != 256);
  return 0;
}

uint64_t decode_bc4s(char *a1, uint64_t a2, double a3, int8x16_t _Q1, int8x16_t a5, double a6, int8x16_t a7)
{
  int v7;
  int v8;
  int v9;
  int v16;
  float32x4_t v19;
  float32x4_t v21;
  float32_t v25;
  float32x4_t v26;
  uint64_t v28;
  unint64_t v29;
  int32x4_t v30;
  _WORD v32[2];
  float16x4_t v33;
  __int16 v34;
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  v7 = *a1;
  v8 = a1[1];
  if (v7 <= -127)
    v9 = -127;
  else
    v9 = *a1;
  _S0 = (float)v9 / 127.0;
  __asm { FCVT            H0, S0 }
  if (v8 <= -127)
    v16 = -127;
  else
    v16 = a1[1];
  _S1 = (float)v16 / 127.0;
  __asm
  {
    FCVT            H1, S1
    FCVT            S0, H0
    FCVT            S1, H1
  }
  *(float32x2_t *)a5.i8 = vmul_n_f32((float32x2_t)0x4040000040000000, *(float *)_Q1.i32);
  if (v7 <= v8)
  {
    *(float *)a7.i32 = *(float *)_Q1.i32 + (float)(_S0 * 4.0);
    *(float32x2_t *)a5.i8 = vmla_n_f32(*(float32x2_t *)a5.i8, (float32x2_t)0x4000000040400000, _S0);
    v25 = _S0 + (float)(*(float *)_Q1.i32 * 4.0);
    v26 = (float32x4_t)vextq_s8(vextq_s8(a7, a7, 4uLL), a5, 0xCuLL);
    v26.f32[3] = v25;
    __asm { FMOV            V0.4S, #5.0 }
    v21 = vdivq_f32(v26, _Q0);
    _H0 = 15360;
    _H3 = -17408;
  }
  else
  {
    v19 = (float32x4_t)vextq_s8(vextq_s8(_Q1, _Q1, 4uLL), a5, 0xCuLL);
    v19.f32[3] = *(float *)_Q1.i32 * 4.0;
    __asm { FMOV            V3.4S, #7.0 }
    v21 = vdivq_f32(vmlaq_n_f32(v19, (float32x4_t)xmmword_2062CECA0, _S0), _Q3);
    _Q3.f32[0] = (float)((float)(*(float *)_Q1.i32 * 5.0) + (float)(_S0 * 2.0)) / 7.0;
    __asm { FCVT            H3, S3 }
    _S0 = (float)(_S0 + (float)(*(float *)_Q1.i32 * 6.0)) / 7.0;
    __asm { FCVT            H0, S0 }
  }
  v28 = 0;
  v33 = vcvt_f16_f32(v21);
  v34 = _H3;
  v35 = _H0;
  v29 = *((unsigned __int16 *)a1 + 1) | ((unint64_t)*((unsigned int *)a1 + 1) << 16);
  do
  {
    v30 = vdupq_n_s32((unsigned __int16)v32[v29 & 7]);
    v30.i32[3] = 15360;
    *(int32x4_t *)(a2 + 288 + v28) = v30;
    v29 >>= 3;
    v28 += 16;
  }
  while (v28 != 256);
  return 0;
}

uint64_t decode_bc5(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __int128 v23;
  _BYTE v25[8];
  _BYTE v26[8];
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v2 = *(unsigned __int8 *)(a1 + 1);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = *(unsigned __int8 *)(a1 + 9);
  v26[0] = *(_BYTE *)a1;
  v26[1] = v2;
  v25[0] = v3;
  v25[1] = v4;
  v5 = 2 * v2;
  v6 = 3 * v2;
  if (v26[0] <= v2)
  {
    LOBYTE(v11) = 0;
    v7 = (13108 * (v2 + 4 * v26[0])) >> 16;
    v8 = (13108 * (v5 + 3 * v26[0])) >> 16;
    v9 = (13108 * (v6 + 2 * v26[0])) >> 16;
    v10 = (13108 * (v26[0] + 4 * v2)) >> 16;
    LOBYTE(v12) = -1;
  }
  else
  {
    v7 = (9363 * (v2 + 6 * v26[0])) >> 16;
    v8 = (9363 * (v5 + 5 * v26[0])) >> 16;
    v9 = (9363 * (v6 + 4 * v26[0])) >> 16;
    v10 = (9363 * (3 * v26[0] + 4 * v2)) >> 16;
    v11 = (9363 * (5 * v2 + 2 * v26[0])) >> 16;
    v12 = (9363 * (v26[0] + 6 * v2)) >> 16;
  }
  v26[2] = v7;
  v26[3] = v8;
  v26[4] = v9;
  v13 = 2 * v4;
  v26[5] = v10;
  v26[6] = v11;
  v14 = 3 * v4;
  v26[7] = v12;
  if (v3 <= v4)
  {
    LOBYTE(v19) = 0;
    v15 = (13108 * (v4 + 4 * v3)) >> 16;
    v16 = (13108 * (v13 + 3 * v3)) >> 16;
    v17 = (13108 * (v14 + 2 * v3)) >> 16;
    v18 = (13108 * (v3 + 4 * v4)) >> 16;
    LOBYTE(v14) = -1;
  }
  else
  {
    v15 = (9363 * (v4 + 6 * v3)) >> 16;
    v16 = (9363 * (v13 + 5 * v3)) >> 16;
    v17 = (9363 * (v14 + 4 * v3)) >> 16;
    v18 = (9363 * (3 * v3 + 4 * v4)) >> 16;
    v19 = (9363 * (5 * v4 + 2 * v3)) >> 16;
    v14 = (9363 * (v3 + 6 * v4)) >> 16;
  }
  v20 = 0;
  v25[2] = v15;
  v25[3] = v16;
  v25[4] = v17;
  v25[5] = v18;
  v21 = *(unsigned __int16 *)(a1 + 2) | ((unint64_t)*(unsigned int *)(a1 + 4) << 16);
  v22 = *(unsigned __int16 *)(a1 + 10) | ((unint64_t)*(unsigned int *)(a1 + 12) << 16);
  v25[6] = v19;
  v25[7] = v14;
  do
  {
    LODWORD(v23) = v26[v21 & 7] | (v26[v21 & 7] << 8);
    DWORD1(v23) = v25[v22 & 7] | (v25[v22 & 7] << 8);
    *((_QWORD *)&v23 + 1) = 0xFFFF00000000;
    *(_OWORD *)(a2 + 288 + v20) = v23;
    v21 >>= 3;
    v22 >>= 3;
    v20 += 16;
  }
  while (v20 != 256);
  return 0;
}

uint64_t decode_bc5s(char *a1, uint64_t a2, double a3, double a4, double a5, int8x16_t _Q3, int8x16_t a7, int8x16_t a8, int8x16_t _Q6, int8x16_t a10)
{
  int8x16_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v22;
  int v25;
  int v28;
  float32x4_t v34;
  float32x4_t v35;
  float32_t v40;
  float32x4_t v41;
  float32x4_t v43;
  float32x4_t v44;
  float32_t v49;
  float32x4_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  __int128 v54;
  _WORD v56[2];
  float16x4_t v57;
  __int16 v58;
  __int16 v59;
  _WORD v60[2];
  float16x4_t v61;
  __int16 v62;
  __int16 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  v11 = *a1;
  v12 = a1[1];
  v13 = a1[8];
  v14 = a1[9];
  if (v11 <= -127)
    v15 = -127;
  else
    v15 = *a1;
  _S0 = (float)v15 / 127.0;
  __asm { FCVT            H0, S0 }
  if (v12 <= -127)
    v22 = -127;
  else
    v22 = a1[1];
  _S2 = (float)v22 / 127.0;
  __asm { FCVT            H4, S2 }
  if (v13 <= -127)
    v25 = -127;
  else
    v25 = a1[8];
  _S2 = (float)v25 / 127.0;
  __asm { FCVT            H2, S2 }
  if (v14 <= -127)
    v28 = -127;
  else
    v28 = a1[9];
  _S1 = (float)v28 / 127.0;
  __asm
  {
    FCVT            H3, S1
    FCVT            S5, H0
    FCVT            S6, H4
  }
  *(float32x2_t *)a10.i8 = vmul_n_f32((float32x2_t)0x4040000040000000, *(float *)_Q6.i32);
  __asm
  {
    FMOV            V0.4S, #5.0
    FMOV            V1.4S, #7.0
  }
  if (v11 <= v12)
  {
    *(float *)v10.i32 = *(float *)_Q6.i32 + (float)(_S5 * 4.0);
    *(float32x2_t *)a10.i8 = vmla_n_f32(*(float32x2_t *)a10.i8, (float32x2_t)0x4000000040400000, _S5);
    v40 = _S5 + (float)(*(float *)_Q6.i32 * 4.0);
    v41 = (float32x4_t)vextq_s8(vextq_s8(v10, v10, 4uLL), a10, 0xCuLL);
    v41.f32[3] = v40;
    v35 = vdivq_f32(v41, _Q0);
    _H5 = 15360;
    _H16 = -17408;
  }
  else
  {
    v34 = (float32x4_t)vextq_s8(vextq_s8(_Q6, _Q6, 4uLL), a10, 0xCuLL);
    v34.f32[3] = *(float *)_Q6.i32 * 4.0;
    v35 = vdivq_f32(vmlaq_n_f32(v34, (float32x4_t)xmmword_2062CECA0, _S5), _Q1);
    _S16 = (float)((float)(*(float *)_Q6.i32 * 5.0) + (float)(_S5 * 2.0)) / 7.0;
    __asm { FCVT            H16, S16 }
    _S5 = (float)(_S5 + (float)(*(float *)_Q6.i32 * 6.0)) / 7.0;
    __asm { FCVT            H5, S5 }
  }
  v61 = vcvt_f16_f32(v35);
  v62 = _H16;
  v63 = _H5;
  __asm
  {
    FCVT            S2, H2
    FCVT            S3, H3
  }
  *(float32x2_t *)a7.i8 = vmul_n_f32((float32x2_t)0x4040000040000000, *(float *)_Q3.i32);
  if (v13 <= v14)
  {
    *(float *)a8.i32 = *(float *)_Q3.i32 + (float)(_S2 * 4.0);
    *(float32x2_t *)a7.i8 = vmla_n_f32(*(float32x2_t *)a7.i8, (float32x2_t)0x4000000040400000, _S2);
    v49 = _S2 + (float)(*(float *)_Q3.i32 * 4.0);
    v50 = (float32x4_t)vextq_s8(vextq_s8(a8, a8, 4uLL), a7, 0xCuLL);
    v50.f32[3] = v49;
    v44 = vdivq_f32(v50, _Q0);
    _H1 = 15360;
    _H0 = -17408;
  }
  else
  {
    v43 = (float32x4_t)vextq_s8(vextq_s8(_Q3, _Q3, 4uLL), a7, 0xCuLL);
    v43.f32[3] = *(float *)_Q3.i32 * 4.0;
    v44 = vdivq_f32(vmlaq_n_f32(v43, (float32x4_t)xmmword_2062CECA0, _S2), _Q1);
    _S0 = (float)((float)(*(float *)_Q3.i32 * 5.0) + (float)(_S2 * 2.0)) / 7.0;
    __asm { FCVT            H0, S0 }
    _S1 = (float)(_S2 + (float)(*(float *)_Q3.i32 * 6.0)) / 7.0;
    __asm { FCVT            H1, S1 }
  }
  v51 = 0;
  v57 = vcvt_f16_f32(v44);
  v52 = *((unsigned __int16 *)a1 + 1) | ((unint64_t)*((unsigned int *)a1 + 1) << 16);
  v53 = *((unsigned __int16 *)a1 + 5) | ((unint64_t)*((unsigned int *)a1 + 3) << 16);
  v58 = _H0;
  v59 = _H1;
  do
  {
    LODWORD(v54) = (unsigned __int16)v60[v52 & 7];
    DWORD1(v54) = (unsigned __int16)v56[v53 & 7];
    *((_QWORD *)&v54 + 1) = 0x3C0000000000;
    *(_OWORD *)(a2 + 288 + v51) = v54;
    v52 >>= 3;
    v53 >>= 3;
    v51 += 16;
  }
  while (v51 != 256);
  return 0;
}

uint64_t decode_bc6(unsigned __int8 *a1, uint64_t a2)
{
  unsigned int Bits;
  int v3;
  int8x16_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;
  _BYTE *v8;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  unsigned __int8 *v12;
  uint32x2_t v13;
  int32x4_t v14;
  unsigned __int8 *v15;
  unint64_t v16;
  __n128 *v17;
  unsigned __int8 *v18;
  int32x2_t v19;
  int8x8_t v20;
  int8x16_t v21;
  unsigned __int8 v22;
  int v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x8_t v27;
  int32x4_t v28;
  int v29;
  int v30;
  int32x4_t v31;
  int v32;
  int32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  int32x4_t *v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  int v49;
  int v50;
  int *v51;
  int v52;
  int v53;
  int v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  int v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  int v64;
  unsigned int v65;
  unsigned int v66;
  int v67;
  int8x8_t v68;
  int32x2_t v69;
  __int128 v70;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  int v77;
  unsigned __int8 *v79;
  int v80;
  int v81;
  int v82;
  unint64_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  uint64_t v88;

  v88 = *MEMORY[0x24BDAC8D0];
  v77 = *(_DWORD *)(a2 + 2616);
  v83 = 0;
  Bits = GetBits(a1, &v83, 2);
  if (Bits >= 2)
    LOBYTE(Bits) = Bits | (4 * GetBits(a1, &v83, 3));
  if (((0x4444CCCFuLL >> Bits) & 1) == 0)
  {
    *(_OWORD *)(a2 + 512) = 0u;
    *(_OWORD *)(a2 + 528) = 0u;
    *(_OWORD *)(a2 + 480) = 0u;
    *(_OWORD *)(a2 + 496) = 0u;
    *(_OWORD *)(a2 + 448) = 0u;
    *(_OWORD *)(a2 + 464) = 0u;
    *(_OWORD *)(a2 + 416) = 0u;
    *(_OWORD *)(a2 + 432) = 0u;
    *(_OWORD *)(a2 + 384) = 0u;
    *(_OWORD *)(a2 + 400) = 0u;
    *(_OWORD *)(a2 + 352) = 0u;
    *(_OWORD *)(a2 + 368) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 336) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    return 0;
  }
  v3 = ms_aModeToInfo[4 * Bits];
  v4 = 0uLL;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  v79 = &bc6_modeinfo[20 * v3 + 1];
  v5 = 65;
  if (*v79)
    v5 = 82;
  v6 = v83;
  if (v83 >= v5)
  {
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = (char *)&bc6_modedesc + 656 * v3 + 8 * v83 + 4;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    do
    {
      if (((a1[v6 >> 3] >> (v6 & 7)) & 1) != 0)
      {
        switch(*((_DWORD *)v8 - 1))
        {
          case 2:
            v7 |= 1 << *v8;
            break;
          case 3:
            v4.i32[0] |= 1 << *v8;
            goto LABEL_21;
          case 4:
            v9.i32[0] |= 1 << *v8;
            goto LABEL_23;
          case 5:
            v10.i32[0] |= 1 << *v8;
            goto LABEL_25;
          case 6:
            v11.i32[0] |= 1 << *v8;
            goto LABEL_27;
          case 7:
            v4.i32[1] |= 1 << *v8;
            goto LABEL_21;
          case 8:
            v9.i32[1] |= 1 << *v8;
            goto LABEL_23;
          case 9:
            v10.i32[1] |= 1 << *v8;
            goto LABEL_25;
          case 0xA:
            v11.i32[1] |= 1 << *v8;
            goto LABEL_27;
          case 0xB:
            v4.i32[2] |= 1 << *v8;
LABEL_21:
            v84 = (int32x4_t)v4;
            break;
          case 0xC:
            v9.i32[2] |= 1 << *v8;
LABEL_23:
            v85 = v9;
            break;
          case 0xD:
            v10.i32[2] |= 1 << *v8;
LABEL_25:
            v86 = v10;
            break;
          case 0xE:
            v11.i32[2] |= 1 << *v8;
LABEL_27:
            v87 = v11;
            break;
          default:
            return 0;
        }
      }
      ++v6;
      v8 += 8;
    }
    while (v5 != v6);
    v6 = v5;
  }
  v83 = v6;
  if (v77 == 1)
  {
    v12 = &bc6_modeinfo[20 * v3];
    v13.i32[0] = v12[4];
    v13.i32[1] = v12[5];
    *(int8x8_t *)v14.i8 = vorr_s8(vbic_s8((int8x8_t)vshl_u32((uint32x2_t)-1, v13), (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32((int32x2_t)v13, (int32x2_t)-1)), *(int8x8_t *)v4.i8))), *(int8x8_t *)v4.i8);
    v14.i64[1] = __PAIR64__(vextq_s8(v4, v4, 8uLL).u32[1], ((int)((unsigned __int32)v4.i32[2] >> (v12[6] - 1) << 31) >> 31) & (-1 << v12[6]) | v4.i32[2]);
    v84 = v14;
    goto LABEL_34;
  }
  if (bc6_modeinfo[20 * v3 + 2])
  {
LABEL_34:
    v15 = &bc6_modeinfo[20 * v3 + 8];
    v16 = -1;
    v17 = (__n128 *)&v84;
    do
    {
      if (v16 != -1)
        INTColor::SignExtend(v17, v15 - 4);
      INTColor::SignExtend(v17 + 1, v15);
      ++v16;
      v17 += 2;
      v15 += 8;
    }
    while (v16 < *v79);
    if (bc6_modeinfo[20 * v3 + 2])
    {
      v18 = &bc6_modeinfo[20 * v3];
      v19.i32[0] = v18[4];
      v19.i32[1] = v18[5];
      v20 = (int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)v19);
      *(int8x8_t *)v21.i8 = vmvn_s8(v20);
      v22 = v18[6];
      v23 = -1 << v22;
      v21.i64[1] = ~(-1 << v22);
      v24 = vandq_s8((int8x16_t)vaddq_s32(v85, v84), v21);
      v25 = vandq_s8((int8x16_t)vaddq_s32(v86, v84), v21);
      v85 = (int32x4_t)v24;
      v86 = (int32x4_t)v25;
      v26 = vandq_s8((int8x16_t)vaddq_s32(v87, v84), v21);
      v87 = (int32x4_t)v26;
      if (v77 == 1)
      {
        v27 = (int8x8_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v19, (int32x2_t)-1));
        *(int8x8_t *)v28.i8 = vorr_s8(vbic_s8(v20, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)v24.i8, v27))), *(int8x8_t *)v24.i8);
        v28.i64[1] = vextq_s8(v24, v24, 8uLL).u64[0];
        v29 = 1 << (v22 - 1);
        if ((v24.i32[2] & v29) != 0)
          v30 = v23;
        else
          v30 = 0;
        v28.i32[2] = v30 | v24.i32[2];
        *(int8x8_t *)v31.i8 = vorr_s8(vbic_s8(v20, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)v25.i8, v27))), *(int8x8_t *)v25.i8);
        v31.i64[1] = vextq_s8(v25, v25, 8uLL).u64[0];
        if ((v25.i32[2] & v29) != 0)
          v32 = v23;
        else
          v32 = 0;
        v31.i32[2] = v32 | v25.i32[2];
        v85 = v28;
        v86 = v31;
        *(int8x8_t *)v33.i8 = vorr_s8(vbic_s8(v20, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)v26.i8, v27))), *(int8x8_t *)v26.i8);
        v33.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
        if ((v26.i32[2] & v29) == 0)
          v23 = 0;
        v33.i32[2] = v23 | v26.i32[2];
        v87 = v33;
      }
    }
  }
  v34 = 0;
  v35 = v7;
  v36 = &bc6_modeinfo[20 * v3];
  v75 = v36 + 3;
  v73 = v36 + 4;
  v72 = &bc67_fixups[3 * v7 + 1];
  v74 = v7;
  do
  {
    v37 = *v79;
    if (v34 == bc67_fixups[192 * v37 + 3 * v35])
      goto LABEL_55;
    v38 = 0;
    do
    {
      v39 = v38;
      if (v37 == v38)
        break;
      ++v38;
    }
    while (v34 != v72[192 * v37 + v39]);
    if (v39 < v37)
LABEL_55:
      v40 = *v75 - 1;
    else
      v40 = *v75;
    v41 = GetBits(a1, &v83, v40);
    if ((_DWORD)v37)
      v42 = 8;
    else
      v42 = 16;
    if (v42 <= v41)
      abort();
    v43 = v41;
    v44 = &v84 + 2 * bc67_partitionTable[1024 * v37 + 16 * v35 + v34];
    v45 = *v73;
    v80 = bc6_Unquantize(v44->u32[0], v45, v77 == 1);
    v46 = v73[1];
    v81 = bc6_Unquantize(v44->u32[1], v46, v77 == 1);
    v47 = v73[2];
    v82 = bc6_Unquantize(v44->u32[2], v47, v77 == 1);
    v48 = bc6_Unquantize(v44[1].u32[0], v45, v77 == 1);
    v49 = bc6_Unquantize(v44[1].u32[1], v46, v77 == 1);
    v50 = bc6_Unquantize(v44[1].u32[2], v47, v77 == 1);
    v51 = &bc67_weights3;
    if (!(_DWORD)v37)
      v51 = &bc67_weights4;
    v52 = v51[v43];
    v53 = 64 - v52;
    v54 = v52 * v48 + (64 - v52) * v80;
    v55 = (v54 + 32) >> 6;
    if (v77 == 1)
    {
      v56 = (31 * v55) >> 5;
      v57 = -((-31 * v55) >> 5);
      if (v54 > -33)
        v57 = v56;
      v58 = v52 * v49 + v53 * v81;
      v59 = (v58 + 32) >> 6;
      v60 = (31 * v59) >> 5;
      v61 = -((-31 * v59) >> 5);
      if (v58 <= -33)
        v62 = v61;
      else
        v62 = v60;
      v63 = v52 * v50 + v53 * v82;
      v64 = (v63 + 32) >> 6;
      v65 = (31 * v64) >> 5;
      v66 = -((-31 * v64) >> 5);
      if (v63 <= -33)
        v67 = v66;
      else
        v67 = v65;
      v68 = vbsl_s8((int8x8_t)vcltz_s32((int32x2_t)__PAIR64__(v62, v57)), (int8x8_t)(*(_QWORD *)&vneg_s32((int32x2_t)__PAIR64__(v62, v57)) | 0x800000008000), (int8x8_t)__PAIR64__(v62, v57));
      if (v67 < 0)
        LOWORD(v67) = -(__int16)v67 | 0x8000;
    }
    else
    {
      v69.i32[0] = (v54 + 32) >> 6;
      v69.i32[1] = (v53 * v81 + v52 * v49 + 32) >> 6;
      v68 = (int8x8_t)vshr_n_s32(vmul_s32(v69, (int32x2_t)0x1F0000001FLL), 6uLL);
      v67 = (31 * ((v53 * v82 + v52 * v50 + 32) >> 6)) >> 6;
    }
    v35 = v74;
    *(int8x8_t *)&v70 = vand_s8(v68, (int8x8_t)0xFFFF0000FFFFLL);
    DWORD2(v70) = (unsigned __int16)v67;
    HIDWORD(v70) = 15360;
    *(_OWORD *)(a2 + 16 * v34++ + 288) = v70;
  }
  while (v34 != 16);
  return 0;
}

uint64_t GetBits(unsigned __int8 *a1, unint64_t *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  int v5;

  if (a3)
  {
    v3 = *a2 >> 3;
    v4 = *a2 & 7;
    if (v4 + a3 < 9)
      v5 = (a1[v3] >> v4) & ~(-1 << a3);
    else
      v5 = ((a1[v3 + 1] & ~(-1 << (a3 - (8 - v4)))) << (8 - v4)) | (a1[v3] >> v4);
    *a2 += a3;
  }
  else
  {
    LOBYTE(v5) = 0;
  }
  return v5;
}

__n128 INTColor::SignExtend(__n128 *a1, _BYTE *a2)
{
  __n128 result;
  unsigned int v3;
  __n128 v4;

  result = *a1;
  v3 = HIDWORD(a1->n128_u64[0]);
  v4.n128_u64[1] = a1->n128_u64[1];
  v4.n128_u32[0] = ((int)(a1->n128_u32[0] >> (*a2 - 1) << 31) >> 31) & (-1 << *a2) | *(_OWORD *)a1;
  a1->n128_u32[0] = v4.n128_u32[0];
  v4.n128_u32[1] = ((int)(v3 >> (a2[1] - 1) << 31) >> 31) & (-1 << a2[1]) | v3;
  *a1 = v4;
  v4.n128_u32[2] |= ((int)(v4.n128_u32[2] >> (a2[2] - 1) << 31) >> 31) & (-1 << a2[2]);
  *a1 = v4;
  return result;
}

uint64_t bc6_Unquantize(uint64_t result, unsigned int a2, int a3)
{
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  unsigned int v6;

  if (a3)
  {
    if (a2 <= 0xF)
    {
      if ((int)result >= 0)
        v3 = result;
      else
        v3 = -(int)result;
      v4 = v3 >= ~(-1 << (a2 - 1));
      v5 = (int)((v3 << 15) | 0x4000) >> (a2 - 1);
      if (v4)
        v5 = 0x7FFF;
      if (!(_DWORD)result)
        v5 = 0;
      if ((int)result >= 0)
        return v5;
      else
        return -v5;
    }
  }
  else
  {
    v6 = (((_DWORD)result << 16) | 0x8000) >> a2;
    if (~(-1 << a2) == (_DWORD)result)
      v6 = 0xFFFF;
    if (!(_DWORD)result)
      v6 = 0;
    if (a2 <= 0xE)
      return v6;
    else
      return result;
  }
  return result;
}

uint64_t decode_bc7(unsigned __int8 *a1, _OWORD *a2, double a3, int32x4_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint32x2_t v9;
  char v10;
  char v11;
  int8x16_t v12;
  int8x8_t v13;
  int32x2_t v14;
  __int128 v15;
  int32x2_t v16;
  int32x2_t v17;
  int32x2_t v18;
  int32x4_t v19;
  int8x16_t v20;
  int16x8_t v21;
  int16x8_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned __int8 *v28;
  unsigned int Bits;
  int v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  _BOOL4 v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  _OWORD *v47;
  int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  __int128 v54;
  unint64_t v56;
  uint64_t v57;
  _BYTE *v58;
  int v59;
  unsigned int v60;
  _BYTE *v61;
  uint64_t v62;
  char v63;
  char v64;
  char v65;
  char v66;
  char v67;
  char v68;
  char *v69;
  int v70;
  unsigned int v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  _BOOL4 v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t i;
  uint64_t v84;
  unsigned int v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  unint64_t v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint8x8_t v98;
  __int16 v99;
  uint16x8_t v100;
  int8x16_t v101;
  unint64_t v102;
  uint64_t v103;
  int v105;
  unsigned int v106;
  uint64_t v107;
  __int32 v108;
  _BYTE v109[6];
  unint64_t v110;
  _DWORD v111[4];
  _BYTE v112[16];
  _BYTE v113[24];
  char v114;
  _BYTE v115[30];

  *(_QWORD *)&v115[22] = *MEMORY[0x24BDAC8D0];
  if (!*a1)
  {
    a2[32] = 0u;
    a2[33] = 0u;
    a2[30] = 0u;
    a2[31] = 0u;
    a2[28] = 0u;
    a2[29] = 0u;
    a2[26] = 0u;
    a2[27] = 0u;
    a2[24] = 0u;
    a2[25] = 0u;
    a2[22] = 0u;
    a2[23] = 0u;
    a2[20] = 0u;
    a2[21] = 0u;
    a2[18] = 0u;
    a2[19] = 0u;
    return 0;
  }
  v5 = __clz(__rbit32(*a1));
  if ((_DWORD)v5 != 1)
  {
    v110 = v5 + 1;
    v28 = (unsigned __int8 *)&bc7_modes + 9 * v5;
    Bits = GetBits(a1, &v110, v28[1]);
    v30 = GetBits(a1, &v110, v28[3]);
    v105 = GetBits(a1, &v110, v28[4]);
    v31 = *v28;
    v32 = v28[2];
    v33 = v28[7];
    v34 = v28[8];
    v35 = (2 * v31 + 2) & 0xFE;
    if (((2 * (_BYTE)v31 + 2) & 0xFE) != 0)
    {
      v106 = Bits;
      v36 = v113;
      v37 = (2 * v31 + 2) & 0xFE;
      do
      {
        *v36 = GetBits(a1, &v110, v33);
        v36 += 4;
        --v37;
      }
      while (v37);
      v38 = &v114;
      v39 = (2 * v31 + 2) & 0xFE;
      do
      {
        *v38 = GetBits(a1, &v110, v33);
        v38 += 4;
        --v39;
      }
      while (v39);
      v40 = v115;
      v41 = (2 * v31 + 2) & 0xFE;
      do
      {
        *v40 = GetBits(a1, &v110, v33);
        v40 += 4;
        --v41;
      }
      while (v41);
      v42 = v5 > 3;
      if (v5 >= 4)
      {
        v43 = 0;
        v44 = &v115[1];
        do
        {
          *v44 = GetBits(a1, &v110, v34);
          v44 += 4;
          ++v43;
        }
        while (v43 < v35);
        v42 = 1;
      }
      Bits = v106;
    }
    else
    {
      v42 = v5 > 3;
    }
    if (((0x34uLL >> v5) & 1) == 0)
    {
      v56 = v110;
      if (v32 <= 1)
        v57 = 1;
      else
        v57 = v32;
      v58 = v109;
      do
      {
        v59 = (a1[v56 >> 3] >> (v56 & 7)) & 1;
        ++v56;
        *v58++ = v59;
        --v57;
      }
      while (v57);
      v110 = v56;
      if (((2 * (_BYTE)v31 + 2) & 0xFE) == 0)
      {
LABEL_48:
        v74 = 0;
        v75 = (char *)&bc7_modes + 9 * v5;
        v76 = v75[5];
        v107 = v75[6];
        v103 = Bits;
        v77 = 3 * Bits;
        v78 = bc67_fixups[192 * v31 + v77];
        v79 = &bc67_fixups[192 * v31 + 1 + v77];
        do
        {
          if (v74 == v78)
          {
            v80 = 1;
          }
          else
          {
            v81 = 0;
            do
            {
              v82 = v81;
              if (v31 == v81)
                break;
              ++v81;
            }
            while (v74 != v79[v82]);
            v80 = v82 < v31;
          }
          v112[v74++] = GetBits(a1, &v110, v76 - v80);
        }
        while (v74 != 16);
        if ((v5 & 0x66666666) == 4)
        {
          for (i = 0; i != 16; ++i)
            *((_BYTE *)v111 + i) = GetBits(a1, &v110, v107 - (i == 0));
        }
        v84 = 0;
        v85 = v5 - 6;
        v86 = &bc67_partitionTable[1024 * v31 + 16 * v103];
        while (1)
        {
          v87 = &v113[8 * v86[v84]];
          v88 = &v113[4 * ((2 * v86[v84]) | 1)];
          if (v85 > 0xFFFFFFFD)
          {
            if (!v105)
            {
              v102 = *((unsigned __int8 *)v111 + v84);
              LDRColorA::InterpolateRGB(v87, v88, v112[v84], v76, &v108);
              v94 = (uint64_t)v87;
              v95 = (uint64_t)v88;
              v96 = v102;
              v97 = v107;
              goto LABEL_65;
            }
            v92 = *((unsigned __int8 *)v111 + v84);
            v89 = v112[v84];
            v90 = &v113[8 * v86[v84]];
            v91 = &v113[4 * ((2 * v86[v84]) | 1)];
            v93 = v107;
          }
          else
          {
            v89 = v112[v84];
            v90 = &v113[8 * v86[v84]];
            v91 = &v113[4 * ((2 * v86[v84]) | 1)];
            v92 = v89;
            v93 = v76;
          }
          LDRColorA::InterpolateRGB(v90, v91, v92, v93, &v108);
          v94 = (uint64_t)v87;
          v95 = (uint64_t)v88;
          v96 = v89;
          v97 = v76;
LABEL_65:
          LDRColorA::InterpolateA(v94, v95, v96, v97, (uint64_t)&v108);
          switch(v30)
          {
            case 1:
              v99 = v108;
              LOBYTE(v108) = HIBYTE(v108);
              break;
            case 2:
              v99 = BYTE1(v108);
              BYTE1(v108) = HIBYTE(v108);
              break;
            case 3:
              v99 = BYTE2(v108);
              BYTE2(v108) = HIBYTE(v108);
              break;
            default:
              v99 = HIBYTE(v108);
              break;
          }
          v98.i32[0] = v108;
          v100 = vmovl_u8(v98);
          v100.i8[4] = BYTE2(v108);
          v100.i16[3] = v99;
          v101.i64[0] = 0xFF000000FFLL;
          v101.i64[1] = 0xFF000000FFLL;
          a2[v84++ + 18] = vmull_u16((uint16x4_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v100.i8), v101)), (uint16x4_t)0x101010101010101);
          if (v84 == 16)
            return 0;
        }
      }
      v60 = 0;
      v61 = &v115[1];
      v62 = (2 * v31 + 2) & 0xFE;
      do
      {
        v63 = v109[v60 / v35];
        *(v61 - 3) = v63 | (2 * *(v61 - 3));
        *(v61 - 2) = v63 | (2 * *(v61 - 2));
        *(v61 - 1) = v63 | (2 * *(v61 - 1));
        if (v42)
          *v61 = v63 | (2 * *v61);
        v61 += 4;
        v60 += v32;
        --v62;
      }
      while (v62);
    }
    if (((2 * (_BYTE)v31 + 2) & 0xFE) != 0)
    {
      v64 = (0xCBuLL >> v5) & 1;
      v65 = v64 + v34;
      v66 = 8 - (v64 + v34);
      v67 = v64 + v33;
      v68 = 8 - v67;
      v69 = &v114;
      do
      {
        if (v5 >= 4)
          v70 = (((v69[2] << v66) >> v65) | (v69[2] << v66)) << 24;
        else
          v70 = -16777216;
        v71 = (v69[1] << v68);
        v72 = (*v69 << v68);
        v73 = (*(v69 - 1) << v68);
        *(_DWORD *)(v69 - 1) = v70 | (((v71 >> v67) | v71) << 16) | (((v72 >> v67) | v72) << 8) | v73 | (v73 >> v67);
        v69 += 4;
        --v35;
      }
      while (v35);
    }
    goto LABEL_48;
  }
  v6 = 0;
  v8 = *(_QWORD *)a1;
  v7 = *((_QWORD *)a1 + 1);
  v9 = (uint32x2_t)vdup_n_s32(*(_QWORD *)a1);
  v10 = (*(_QWORD *)a1 >> 18) & 0xFC | ((*(_QWORD *)a1 & 0x2000000) != 0);
  v11 = BYTE3(*(_QWORD *)a1) & 0xFC | ((int)*(_QWORD *)a1 < 0);
  *(int8x8_t *)a4.i8 = vand_s8((int8x8_t)vzip1_s32((int32x2_t)(v7 >> 15), (int32x2_t)(v7 >> 16)), (int8x8_t)0x200000002);
  v12 = (int8x16_t)vzip1q_s32(a4, a4);
  v13 = vorr_s8(vorr_s8(vand_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFF4FFFFFFF3), (int8x8_t)0xFC00000001), vand_s8((int8x8_t)vshl_u32(v9, (uint32x2_t)0xFFFFFFEDFFFFFFFALL), (int8x8_t)0x1000000FCLL)), (int8x8_t)vdup_lane_s32(*(int32x2_t *)a4.i8, 0));
  v112[1] = v13.i8[4];
  v112[0] = v13.i8[0];
  v112[2] = v10 | a4.i8[4];
  v112[3] = v11 | a4.i8[4];
  *((_QWORD *)&v15 + 1) = v7;
  *(_QWORD *)&v15 = v8;
  v14 = (int32x2_t)(v15 >> 38);
  *((_QWORD *)&v15 + 1) = v7;
  *(_QWORD *)&v15 = v8;
  v16 = v14;
  v17 = (int32x2_t)(v15 >> 32);
  *((_QWORD *)&v15 + 1) = v7;
  *(_QWORD *)&v15 = v8;
  v18 = (int32x2_t)(v15 >> 50);
  *((_QWORD *)&v15 + 1) = v7;
  *(_QWORD *)&v15 = v8;
  *(int32x2_t *)v19.i8 = vzip1_s32(v17, v16);
  v19.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v15 >> 44), v18);
  v20.i64[0] = 0x3F0000003FLL;
  v20.i64[1] = 0x3F0000003FLL;
  v21 = (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32(v19, 2uLL), v12), (int8x16_t)vshrq_n_u32((uint32x4_t)vandq_s8((int8x16_t)v19, v20), 5uLL));
  *(int16x4_t *)v21.i8 = vmovn_s32((int32x4_t)v21);
  v111[0] = vmovn_s16(v21).u32[0];
  *((_QWORD *)&v15 + 1) = v7;
  *(_QWORD *)&v15 = v8;
  v21.i64[0] = v15 >> 62;
  *((_QWORD *)&v15 + 1) = v7;
  *(_QWORD *)&v15 = v8;
  *(int32x2_t *)v21.i8 = vzip1_s32((int32x2_t)(v15 >> 56), *(int32x2_t *)v21.i8);
  v21.u64[1] = (unint64_t)vzip1_s32((int32x2_t)(v7 >> 4), (int32x2_t)(v7 >> 10));
  v22 = (int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)vshlq_n_s32((int32x4_t)v21, 2uLL), v12), (int8x16_t)vshrq_n_u32((uint32x4_t)vandq_s8((int8x16_t)v21, v20), 5uLL));
  *(int16x4_t *)v22.i8 = vmovn_s32((int32x4_t)v22);
  LODWORD(v110) = vmovn_s16(v22).u32[0];
  v23 = v8 >> 2;
  v24 = v7 >> 18;
  v25 = bc67_fixups[3 * v23 + 193];
LABEL_11:
  v26 = 3;
  v27 = 2;
  while (1)
  {
    v113[v6] = v26 & v24;
    v24 >>= v27;
    if (!(_DWORD)++v6)
      goto LABEL_11;
    if ((_DWORD)v6 == 16)
      break;
    if (v25 == v6)
      v26 = 3;
    else
      v26 = 7;
    if (v25 == v6)
      v27 = 2;
    else
      v27 = 3;
  }
  v45 = 0;
  v46 = &bc67_partitionTable[16 * v23 + 1024];
  v47 = a2 + 18;
  do
  {
    v48 = bc67_weights3[v113[v45]];
    v49 = 64 - (unsigned __int16)v48;
    v50 = 2 * (v46[v45] & 0x7F);
    v51 = v48 * v112[v50 | 1] + v49 * v112[v50] + 32;
    v52 = v48 * *((unsigned __int8 *)v111 + (v50 | 1)) + v49 * *((unsigned __int8 *)v111 + v50) + 32;
    v53 = v48 * *((unsigned __int8 *)&v111[-2] + (v50 | 1)) + v49 * *((unsigned __int8 *)&v111[-2] + v50) + 32;
    LODWORD(v54) = (v51 >> 6) | ((v51 >> 6) << 8);
    DWORD1(v54) = (v52 >> 6) | ((v52 >> 6) << 8);
    *((_QWORD *)&v54 + 1) = (v53 >> 6) | ((v53 >> 6) << 8) | 0xFFFF00000000;
    v47[v45++] = v54;
  }
  while (v45 != 16);
  return 0;
}

unsigned __int8 *LDRColorA::InterpolateRGB(unsigned __int8 *result, unsigned __int8 *a2, unint64_t a3, uint64_t a4, _BYTE *a5)
{
  int *v5;
  int v6;

  switch(a4)
  {
    case 4:
      if (a3 >= 0x10)
        LDRColorA::InterpolateRGB();
      v5 = &bc67_weights4;
      break;
    case 3:
      if (a3 >= 8)
        LDRColorA::InterpolateRGB();
      v5 = &bc67_weights3;
      break;
    case 2:
      if (a3 >= 4)
        LDRColorA::InterpolateRGB();
      v5 = (int *)&bc67_weights2;
      break;
    default:
      LDRColorA::InterpolateRGB();
  }
  v6 = v5[a3];
  *a5 = (v6 * *a2 + (64 - v6) * *result + 32) >> 6;
  a5[1] = (v6 * a2[1] + (64 - v6) * result[1] + 32) >> 6;
  a5[2] = (v6 * a2[2] + (64 - v6) * result[2] + 32) >> 6;
  return result;
}

uint64_t LDRColorA::InterpolateA(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v5;

  switch(a4)
  {
    case 4:
      if (a3 >= 0x10)
        LDRColorA::InterpolateA();
      v5 = &bc67_weights4;
      break;
    case 3:
      if (a3 >= 8)
        LDRColorA::InterpolateA();
      v5 = &bc67_weights3;
      break;
    case 2:
      if (a3 >= 4)
        LDRColorA::InterpolateA();
      v5 = (int *)&bc67_weights2;
      break;
    default:
      LDRColorA::InterpolateA();
  }
  *(_BYTE *)(a5 + 3) = (v5[a3] * *(unsigned __int8 *)(a2 + 3)
                      + (64 - v5[a3]) * *(unsigned __int8 *)(result + 3)
                      + 32) >> 6;
  return result;
}

void LDRColorA::InterpolateRGB()
{
  __assert_rtn("InterpolateRGB", "BC_impl.h", 355, "false");
}

{
  __assert_rtn("InterpolateRGB", "BC_impl.h", 352, "wc < 4");
}

{
  __assert_rtn("InterpolateRGB", "BC_impl.h", 353, "wc < 8");
}

{
  __assert_rtn("InterpolateRGB", "BC_impl.h", 354, "wc < 16");
}

void LDRColorA::InterpolateA()
{
  __assert_rtn("InterpolateA", "BC_impl.h", 370, "false");
}

{
  __assert_rtn("InterpolateA", "BC_impl.h", 367, "wa < 4");
}

{
  __assert_rtn("InterpolateA", "BC_impl.h", 368, "wa < 8");
}

{
  __assert_rtn("InterpolateA", "BC_impl.h", 369, "wa < 16");
}

unint64_t WeightInfoForSingleLineSingleWeight_6x5(int a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  v2 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
  v3 = (_QWORD *)((char *)&WeightInfoForSingleLineSingleWeight_6x5_kSingleLineSingleWeight_6x5
                + 8 * WeightInfoForSingleLineSingleWeight_6x5_IndexTable_6x5[4 * a1 + v2]);
  return *v3 & 0xFFE00000FFFE1FFFLL | ((unint64_t)*((unsigned __int8 *)v3 + v2 + 4) << 32) & 0xFFE0FFFFFFFFFFFFLL | (a2 << 40) & 0xFFE0FFFFFFFFFFFFLL | ((unint64_t)(a1 & 0x1F) << 48) | ((v2 & 3) << 15);
}

unint64_t WeightInfoForSingleLineSingleWeight_7x7(int a1, uint64_t a2)
{
  int v2;
  _BOOL4 v4;

  v4 = a1 == 49 && a2 > 2;
  v2 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
  return *((_QWORD *)&WeightInfoForSingleLineSingleWeight_7x7_kSingleLineSingleWeight_7x7 + v4) & 0xFFE00000FFFE1FFFLL | ((unint64_t)*((unsigned __int8 *)&WeightInfoForSingleLineSingleWeight_7x7_kSingleLineSingleWeight_7x7 + 8 * v4 + v2 + 4) << 32) | (a2 << 40) | ((unint64_t)(a1 & 0x1F) << 48) | ((v2 & 3) << 15);
}

unint64_t WeightInfoForSingleLineSingleWeight_8x8(char a1, uint64_t a2)
{
  int v2;

  v2 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
  return (a2 << 40) | ((unint64_t)WeightInfoForSingleLineSingleWeight_8x8_kSingleLineSingleWeight_8x8[v2 + 4] << 32) | ((unint64_t)(a1 & 0x1F) << 48) | ((v2 & 3) << 15) | 0x2FA0000008000544;
}

unint64_t WeightInfoForSingleLineDualWeight_6x5(int a1, uint64_t a2)
{
  int v2;
  _QWORD *v3;

  v2 = (int)(a2 - 2 + ((((_DWORD)a2 - 2) & 0x8000u) >> 15)) >> 1;
  v3 = (_QWORD *)((char *)&WeightInfoForSingleLineDualWeight_6x5_Table_6x5
                + 8 * WeightInfoForSingleLineDualWeight_6x5_Indices_6x5[4 * a1 + v2]);
  return *v3 & 0xFFE00000FFFE1FFFLL | ((unint64_t)*((unsigned __int8 *)v3 + v2 + 4) << 32) & 0xFFE0FFFFFFFFFFFFLL | (a2 << 40) & 0xFFE0FFFFFFFFFFFFLL | ((unint64_t)(a1 & 0x1F) << 48) | ((v2 & 3) << 15);
}

unint64_t GetDualPartitionBlockInfo_6x5(unsigned int a1, int a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = (a2 - 4);
  v4 = GetDualPartitionBlockInfo_6x5_kWeightInfo[GetDualPartitionBlockInfo_6x5_kIndices[4 * a1 + (v2 >> 2)]];
  return ((unint64_t)a2 << 40) | ((unint64_t)*((unsigned __int8 *)&v4 + (v2 >> 2) + 4) << 56) | ((unint64_t)(v4 >> 27) << 32) | 0x1D000000000000 | ((_DWORD)v2 << 25) & 0x18000000 | v4 & 0x1FFFFFF;
}

unint64_t GetDualPartitionBlockInfo_7x7(uint64_t a1, int a2)
{
  return ((unint64_t)a2 << 40) | ((unint64_t)GetDualPartitionBlockInfo_7x7_table1[(unint64_t)(a2 - 4) >> 2] << 56) | ((((a2 - 4) >> 2) & 3) << 27) | 0x1D000100000B24;
}

unint64_t GetDualPartitionBlockInfo_8x8(uint64_t a1, int a2)
{
  return ((unint64_t)a2 << 40) | ((unint64_t)GetDualPartitionBlockInfo_8x8_table1[(unint64_t)(a2 - 4) >> 2] << 56) | ((((a2 - 4) >> 2) & 3) << 27) | 0x1D000100000D44;
}

unint64_t GetDualPartitionDualWeightBlockInfo(unsigned int a1, int a2)
{
  unint64_t v2;
  uint64_t v4;

  v2 = (a2 - 4);
  v4 = kDualLineDualWeightTable[kDualLineDualWeightIndexTable[4 * a1 + (v2 >> 2)]];
  return ((unint64_t)a2 << 40) | ((unint64_t)*((unsigned __int8 *)&v4 + (v2 >> 2) + 4) << 56) | ((unint64_t)(v4 >> 27) << 32) | 0x1D000000000000 | ((_DWORD)v2 << 25) & 0x18000000 | v4 & 0x1FFFFFF;
}

__int16 ConvertSRGBtoLinear@<H0>(int32x4_t a1@<Q0>)
{
  int32x4_t v1;

  v1.i64[0] = 0xFF000000FFLL;
  v1.i64[1] = 0xFF000000FFLL;
  return ConvertSRGBtoLinear_sRGBtoLinearTable[vminq_s32(vmaxq_s32(vshrq_n_s32(a1, 8uLL), (int32x4_t)0), v1).i32[0]];
}

uint64_t ASTCEncoder::GetBlockFeaturesStatic(unint64_t this, at_block_format_t a2, at_flags_t a3)
{
  char *v4;

  if (this - 33 < 0xFFFFFFFFFFFFFFE0)
    return 0;
  v4 = (char *)&ASTCEncoder::GetBlockFeaturesStatic(at_block_format_t,at_flags_t)::BlockFeatures + 8 * this;
  if (this > 0x10)
    return *((_QWORD *)v4 - 17) | 0x400000000;
  else
    return *((_QWORD *)v4 - 1);
}

unint64_t ASTCEncoder::GetBlockFeatures(ASTCEncoder *this, unint64_t a2, at_block_features_t a3, unint64_t a4, __int128 a5, uint64_t a6, const unint64_t *a7, at_flags_t a8)
{
  unint64_t v9;
  unsigned int v10;
  qos_class_t v15;
  dispatch_queue_global_t global_queue;
  NSObject *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  unint64_t v25;
  BOOL v26;
  unsigned int v27;
  size_t v28;
  unsigned int v29;
  unint64_t v30;
  size_t v31;
  size_t v32;
  unint64_t v33;
  unsigned int v34;
  unsigned int v35;
  unint64_t v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  unsigned int context;
  unsigned int v42;
  unsigned int v43;
  __int128 *v44;
  const unint64_t *v45;
  unsigned int v46;
  int v47;
  int v48;
  _BYTE v49[12];
  int v50;
  uint64_t v51;
  ASTCEncoder *v52;
  BOOL v53;
  __int128 v54;
  unint64_t v55;

  v9 = *((_QWORD *)&a5 + 1);
  v10 = a5;
  v15 = qos_class_self();
  global_queue = dispatch_get_global_queue(v15, 0);
  if (!global_queue)
    return a2;
  v17 = global_queue;
  v18 = HIDWORD(a4);
  v54 = *(_OWORD *)a3.bits;
  v55 = *(_QWORD *)(a3.bits + 16);
  atomic_store(0, &context);
  atomic_store(1u, &v42);
  atomic_store(0, &v43);
  v44 = &v54;
  v45 = a7;
  v46 = (a2 >> 10) & 0xFFF;
  v47 = (a2 >> 22) & 0xFFF;
  v48 = 1;
  v52 = this;
  v53 = (a2 & 0x400000000) != 0;
  v19 = v55;
  if (v55 <= 1)
    v19 = 1;
  v20 = v9 / v19;
  if (v20 >= v10)
    v20 = v10;
  if (v20)
  {
    v22 = *(_QWORD *)(a3.bits + 8);
    v21 = *(_QWORD *)(a3.bits + 16);
    v23 = v21 * v20;
    v24 = v10 - v20;
    v25 = v22 * v18;
    v26 = v20 == 1 || v21 == v25;
    if (v26)
      v27 = 1;
    else
      v27 = HIDWORD(a4);
    if (v26)
      v28 = v20 * v18;
    else
      v28 = v20;
    if (v26)
      v29 = -1;
    else
      v29 = 0;
    *(_DWORD *)v49 = 0;
    *(int8x8_t *)&v49[4] = vbsl_s8((int8x8_t)vdup_n_s32(v29), (int8x8_t)1, (int8x8_t)0x100000000);
    v50 = a4;
    v51 = v27 | 0x100000000;
    dispatch_apply_f(v28, v17, &context, (void (__cdecl *)(void *, size_t))BlockFeatureScan);
    *(_QWORD *)&v54 = v23 + v54;
    if (!v24)
      goto LABEL_33;
    v9 -= v23;
  }
  v30 = *((_QWORD *)&v54 + 1);
  if (*((_QWORD *)&v54 + 1) <= 1uLL)
    v30 = 1;
  v31 = v9 / v30;
  if (v31 >= v18)
    v32 = HIDWORD(a4);
  else
    v32 = v31;
  if (!v32)
    goto LABEL_29;
  *(_QWORD *)v49 = 0x100000000;
  *(_DWORD *)&v49[8] = 0;
  v50 = a4;
  v51 = 0x100000001;
  dispatch_apply_f(v32, v17, &context, (void (__cdecl *)(void *, size_t))BlockFeatureScan);
  *(_QWORD *)&v54 = *((_QWORD *)&v54 + 1) * v32 + v54;
  if (HIDWORD(a4) != (_DWORD)v32)
  {
    v9 -= *((_QWORD *)&v54 + 1) * v32;
LABEL_29:
    v33 = v9 >> 4;
    if (v9 >> 4 >= a4)
      v33 = a4;
    memset(v49, 0, sizeof(v49));
    v50 = a4;
    v51 = 0x100000001;
    if (v33)
      BlockFeatureScan(&context, 0);
  }
LABEL_33:
  v34 = atomic_load(&context);
  v35 = atomic_load(&v43);
  v36 = a2 & 0xFFFFFFF3FFFFFFE0 | ((unint64_t)(v34 != 0) << 35) | ((unint64_t)(v35 != 0) << 34);
  v37 = atomic_load(&v42);
  if (v37 > 2)
  {
    v39 = 3;
  }
  else
  {
    v38 = atomic_load(&v42);
    v39 = v38 & 0x1F;
  }
  return v36 | v39;
}

unsigned int *BlockFeatureScan(unsigned int *result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  float16x8_t *v15;
  uint64_t v16;
  float16x8_t v17;
  int v18;
  unsigned int v19;
  unint64_t v21;
  uint64_t v22;
  int8x8_t v23;
  int32x2_t v24;
  unsigned int v25;
  unsigned int v26;
  uint16x4_t v35;
  uint16x4_t v36;
  unsigned int v37;
  unsigned int *v38;
  unsigned int *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;

  if (result)
  {
    v2 = *result;
    v3 = result[1];
    v4 = result[2];
    _ZF = v3 >= 3 && (_DWORD)v2 == 1;
    if (!_ZF || (*((_BYTE *)result + 80) ? (v6 = v4 == 1) : (v6 = 1), !v6))
    {
      v7 = result[15];
      if ((_DWORD)v7)
      {
        v8 = 0;
        v9 = (_QWORD *)*((_QWORD *)result + 2);
        v10 = v9[1];
        v11 = *v9 + (v10 * result[12] + 16 * result[11] + v9[2] * result[13]) * a2;
        __asm { FMOV            V2.4S, #1.0 }
        while (!result[14])
        {
LABEL_56:
          if (v3 >= 3 && (_DWORD)v2 == 1 && (!*((_BYTE *)result + 80) || v4 == 1))
          {
            LODWORD(v2) = 1;
            goto LABEL_63;
          }
          v11 += v10;
          if (++v8 == v7)
            goto LABEL_63;
        }
        v15 = (float16x8_t *)v11;
        v16 = result[14];
        while (1)
        {
          v17 = *v15;
          v18 = (int)*v15;
          if ((v18 & 3) != 0)
            __asm { BR              X15 }
          if ((~v18 & 0x1FC) != 0)
          {
            v25 = 3;
            if ((v18 & 0xF) != 0 && (v18 & 0x1C0) != 0x1C0)
              __asm { BR              X15 }
            v26 = v4;
            v22 = v2;
LABEL_33:
            if (v4 <= v26)
              v4 = v26;
            if (v3 <= v25)
              v3 = v25;
            v2 = v22;
            goto LABEL_38;
          }
          v19 = ((unsigned __int32)v17.i32[0] >> 12) & 0x1FFF;
          _CF = v19 != 0x1FFF && v19 >= (((unint64_t)v17.i64[0] >> 25) & 0x1FFF);
          if (_CF
            || (v21 = ((unint64_t)v17.i64[0] >> 38) & 0x1FFF, (_DWORD)v21 != 0x1FFF)
            && v21 >= (unint64_t)v17.i64[0] >> 51)
          {
LABEL_51:
            v37 = 0;
            v25 = 3;
            v22 = v2;
            v26 = v4;
            goto LABEL_52;
          }
          if ((v17.i16[0] & 0x200) != 0)
          {
            if ((unint64_t)(*((_QWORD *)result + 9) - 17) > 0xF)
              goto LABEL_51;
            _H6 = HIWORD(*(unsigned __int128 *)v15);
            __asm { FCVT            S6, H6 }
            v22 = v2 | (_S6 < 1.0);
            _KR00_4 = v15->i64[1];
            __asm { FCVT            S7, H7 }
            _H16 = WORD6(*(unsigned __int128 *)v15);
            __asm
            {
              FCVT            S16, H16
              FCVT            S6, H6
            }
            if (_S6 == _S16 && _S6 == _S7)
              v25 = v3;
            else
              v25 = 3;
            v35 = (uint16x4_t)vmovn_s32(vcgtq_f32(vcvt_hight_f32_f16(v17), _Q2));
            v35.i16[3] = v35.i16[2];
            if ((vmaxv_u16(v35) & 0x8000) != 0
              || (v36 = (uint16x4_t)vmovn_s32(vcltzq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL)))), v36.i16[3] = v36.i16[2], (vmaxv_u16(v36) & 0x8000) != 0))
            {
              v26 = 1;
              goto LABEL_50;
            }
          }
          else
          {
            v22 = v2 | (v17.i16[7] != 0xFFFF);
            v23.i32[0] = v17.u16[5];
            v23.i32[1] = v17.u16[6];
            v24 = vceq_s32((int32x2_t)vand_s8((int8x8_t)vdup_n_s32(v17.u16[4]), (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v23, (int8x8_t)0xFFFF0000FFFFLL));
            if ((vand_s8((int8x8_t)v24, (int8x8_t)vdup_lane_s32(v24, 1)).u8[0] & 1) != 0)
              v25 = v3;
            else
              v25 = 3;
          }
          v26 = v4;
LABEL_50:
          v37 = 1;
LABEL_52:
          if (result[8] >= v37 && result[9] >= v37 && result[10] >= v37)
            goto LABEL_33;
          v3 = 3;
LABEL_38:
          ++v15;
          if (!--v16)
            goto LABEL_56;
        }
      }
LABEL_63:
      v38 = result + 1;
      v39 = result + 2;
      do
      {
        while (1)
        {
          v40 = atomic_load(result);
          v41 = v40 <= v2 ? v2 : v40;
          v42 = __ldxr(result);
          if (v42 == v40)
            break;
          __clrex();
        }
      }
      while (__stlxr(v41, result));
      do
      {
        while (1)
        {
          v43 = atomic_load(v39);
          v44 = v43 <= v4 ? v4 : v43;
          v45 = __ldxr(v39);
          if (v45 == v43)
            break;
          __clrex();
        }
      }
      while (__stlxr(v44, v39));
      do
      {
        while (1)
        {
          v46 = atomic_load(v38);
          v47 = v46 <= v3 ? v3 : v46;
          v48 = __ldxr(v38);
          if (v48 == v46)
            break;
          __clrex();
        }
      }
      while (__stlxr(v47, v38));
    }
  }
  return result;
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t ASTCEncoder::GetEncoderType(ASTCEncoder *this)
{
  return 1;
}

uint64_t ASTCEncoder::operator==(uint64_t a1, uint64_t a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  __int32 v4;
  __int32 v5;

  v2 = *(float32x4_t **)(a1 + 8);
  v3 = *(float32x4_t **)(a2 + 8);
  if (((v3[1].i32[0] ^ v2[1].i32[0]) & 0x7FFLL) != 0)
    return 0;
  if (((v3[1].i32[2] ^ v2[1].i32[2]) & 0x7FFLL) != 0)
    return 0;
  v4 = v2[2].i32[0];
  if (v4 != v3[2].i32[0])
    return 0;
  v5 = v2[2].i32[1];
  if (v5 != v3[2].i32[1])
    return 0;
  if (v4 != 1 && v5 == 1)
    return vminvq_u32((uint32x4_t)vceqq_f32(*v2, *v3)) >> 31;
  else
    return 1;
}

uint64_t ASTCEncoder::GetHash(ASTCEncoder *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 1) + 16) & 0x3FF | ((*(_DWORD *)(*((_QWORD *)this + 1) + 24) & 0x3FF) << 10) & 0xFC0FFFFF | ((*(_DWORD *)(*((_QWORD *)this + 1) + 32) & 0x3F) << 20) | (*(_DWORD *)(*((_QWORD *)this + 1) + 36) << 26);
}

uint64_t ASTCEncoder::DebugDescription(ASTCEncoder *this, char *__str, size_t __size)
{
  return snprintf(__str, __size, "");
}

uint64_t EncoderFactory_ASTC(uint64_t a1, uint64_t a2)
{
  if (a2)
    ASTCEncoder::ASTCEncoder(a2, a1);
  return a2;
}

void sub_2062A8734(_Unwind_Exception *a1, int a2)
{
  if (a2 < 0)
    __cxa_call_unexpected(a1);
  _Unwind_Resume(a1);
}

void *memset_pattern1(void *a1, unsigned __int8 *a2, size_t a3)
{
  return memset(a1, *a2, a3);
}

{
  return memset(a1, *a2, a3);
}

void memset_pattern2(void *a1, _WORD *a2, size_t a3)
{
  _WORD __pattern4[2];

  __pattern4[0] = *a2;
  __pattern4[1] = __pattern4[0];
  memset_pattern4(a1, __pattern4, a3);
}

{
  _WORD __pattern4[2];

  __pattern4[0] = *a2;
  __pattern4[1] = __pattern4[0];
  memset_pattern4(a1, __pattern4, a3);
}

uint64_t PrintBlock(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _OWORD v18[4];
  _OWORD v19[4];
  _OWORD v20[4];
  _OWORD v21[4];
  _OWORD v22[4];

  printf("Block: %p\n", (const void *)a1);
  puts("\tred:");
  v2 = *(_OWORD *)(a1 + 144);
  v3 = *(_OWORD *)(a1 + 160);
  v4 = *(_OWORD *)(a1 + 192);
  v22[2] = *(_OWORD *)(a1 + 176);
  v22[3] = v4;
  v22[0] = v2;
  v22[1] = v3;
  print_vector((uint64_t)v22);
  puts("\tgreen:");
  v5 = *(_OWORD *)(a1 + 208);
  v6 = *(_OWORD *)(a1 + 224);
  v7 = *(_OWORD *)(a1 + 256);
  v21[2] = *(_OWORD *)(a1 + 240);
  v21[3] = v7;
  v21[0] = v5;
  v21[1] = v6;
  print_vector((uint64_t)v21);
  puts("\tblue:");
  v8 = *(_OWORD *)(a1 + 272);
  v9 = *(_OWORD *)(a1 + 288);
  v10 = *(_OWORD *)(a1 + 320);
  v20[2] = *(_OWORD *)(a1 + 304);
  v20[3] = v10;
  v20[0] = v8;
  v20[1] = v9;
  print_vector((uint64_t)v20);
  puts("\talpha:");
  v11 = *(_OWORD *)(a1 + 336);
  v12 = *(_OWORD *)(a1 + 352);
  v13 = *(_OWORD *)(a1 + 384);
  v19[2] = *(_OWORD *)(a1 + 368);
  v19[3] = v13;
  v19[0] = v11;
  v19[1] = v12;
  print_vector((uint64_t)v19);
  puts("\tluminance:");
  v14 = *(_OWORD *)(a1 + 656);
  v15 = *(_OWORD *)(a1 + 672);
  v16 = *(_OWORD *)(a1 + 704);
  v18[2] = *(_OWORD *)(a1 + 688);
  v18[3] = v16;
  v18[0] = v14;
  v18[1] = v15;
  print_vector((uint64_t)v18);
  puts("\talphaIsZero:");
  printf("%s0x%8.8x  0x%8.8x  0x%8.8x  0x%8.8x\n%s0x%8.8x  0x%8.8x  0x%8.8x  0x%8.8x\n%s0x%8.8x  0x%8.8x  0x%8.8x  0x%8.8x\n%s0x%8.8x  0x%8.8x  0x%8.8x  0x%8.8x\n", "\t\t", *(_DWORD *)(a1 + 720), *(_DWORD *)(a1 + 724), *(_DWORD *)(a1 + 728), *(_DWORD *)(a1 + 732), "\t\t", *(_DWORD *)(a1 + 736), *(_DWORD *)(a1 + 740), *(_DWORD *)(a1 + 744), *(_DWORD *)(a1 + 748), "\t\t", *(_DWORD *)(a1 + 752), *(_DWORD *)(a1 + 756), *(_DWORD *)(a1 + 760), *(_DWORD *)(a1 + 764),
    "\t\t",
    *(_DWORD *)(a1 + 768),
    *(_DWORD *)(a1 + 772),
    *(_DWORD *)(a1 + 776),
    *(_DWORD *)(a1 + 780));
  printf("\tsaturation:   %f\n", *(float *)(a1 + 124));
  printf("\talphaZeroMask: 0x%4.4x\n", *(unsigned __int16 *)(a1 + 784));
  printf("\talphaZeroCount: %d\n", *(char *)(a1 + 134));
  printf("\talphaIsOneEverywhere: %d\n", *(char *)(a1 + 136));
  printf("\tblock size: 0x%3.3x\n", *(unsigned __int16 *)(a1 + 132));
  printf("\toriginal block: %p\n", *(const void **)(a1 + 40));
  return printf("\tisNotPremultiplied: %d\n", *(char *)(a1 + 135));
}

uint64_t print_vector(uint64_t a1)
{
  return printf("%s%8.8f  %8.8f  %8.8f  %8.8f\n%s%8.8f  %8.8f  %8.8f  %8.8f\n%s%8.8f  %8.8f  %8.8f  %8.8f\n%s%8.8f  %8.8f  %8.8f  %8.8f\n", "\t\t", COERCE_FLOAT(*(_OWORD *)a1), COERCE_FLOAT(HIDWORD(*(_QWORD *)a1)), COERCE_FLOAT(*(_QWORD *)(a1 + 8)), COERCE_FLOAT(HIDWORD(*(_OWORD *)a1)), "\t\t", COERCE_FLOAT(*(_OWORD *)(a1 + 16)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 16))), COERCE_FLOAT(*(_QWORD *)(a1 + 24)), COERCE_FLOAT(HIDWORD(*(_OWORD *)(a1 + 16))), "\t\t", COERCE_FLOAT(*(_OWORD *)(a1 + 32)), COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 32))), COERCE_FLOAT(*(_QWORD *)(a1 + 40)), COERCE_FLOAT(HIDWORD(*(_OWORD *)(a1 + 32))),
           "\t\t",
           COERCE_FLOAT(*(_OWORD *)(a1 + 48)),
           COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 48))),
           COERCE_FLOAT(*(_QWORD *)(a1 + 56)),
           COERCE_FLOAT(HIDWORD(*(_OWORD *)(a1 + 48))));
}

uint64_t ASTCEncoder::GetBlockDimensions(ASTCEncoder *this)
{
  return *((_QWORD *)this + 2);
}

uint64_t ATEncoder::GetTexelFormat(ATEncoder *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 1) + 16) & 0x7FFLL;
}

uint64_t ATEncoder::GetTexelAlpha(ATEncoder *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 32);
}

uint64_t ATEncoder::GetBlockAlpha(ATEncoder *this)
{
  return *(unsigned int *)(*((_QWORD *)this + 1) + 36);
}

BOOL ASTCEncoder::IsCompressionMonolithic(ASTCEncoder *this, at_flags_t a2)
{
  return *((_DWORD *)this + 4) != 4 || *((_DWORD *)this + 5) != 4 || *((_DWORD *)this + 6) != 1;
}

uint64_t ASTCEncoder::IsDecompressionMonolithic(ASTCEncoder *this, at_flags_t a2)
{
  return 0;
}

float my_meanv(const float *a1, uint64_t a2, float *a3, unint64_t a4)
{
  float v4;
  unint64_t v5;
  float result;

  if (a4)
  {
    v4 = 0.0;
    v5 = a4;
    do
    {
      v4 = v4 + *a1;
      a1 += a2;
      --v5;
    }
    while (v5);
  }
  else
  {
    v4 = 0.0;
  }
  result = v4 / (float)a4;
  *a3 = result;
  return result;
}

uint64_t ATEncoderCompressTexels_TexelBufferIsNotBigEnough(const unsigned __int8 *a1)
{
  return *a1;
}

uint64_t ATEncoderCompressTexels_TexelBufferIsNotReadable(const at_texel_region_t *a1, int a2)
{
  int v2;

  v2 = *(unsigned __int8 *)a1->texels;
  return ATEncoderCompressTexels_TexelBufferIsNotBigEnough((const unsigned __int8 *)a1->texels+ ((a1->validSize.x * a2 + 7) >> 3)+ a1->rowBytes * (a1->validSize.y - 1)+ a1->sliceBytes * (a1->validSize.z - 1)- 1)+ v2;
}

_QWORD *ATEncoderCompressTexels_BlockBufferIsNotBigEnoughOrRowBytesSliceBytesAreNotAMultipleOf16(_QWORD *result)
{
  *result = 0;
  result[1] = 0;
  return result;
}

double ATEncoderCompressTexels_BlockBufferIsNotWritable(const at_block_buffer_t *a1, const at_size_t *a2, uint64_t a3)
{
  uint64_t v3;
  _OWORD *blocks;
  size_t v5;
  size_t v6;
  double result;

  v3 = a2->x - 1;
  blocks = a1->blocks;
  v5 = a1->rowBytes * (a2->y - 1);
  v6 = a1->sliceBytes * (a2->z - 1);
  result = 0.0;
  if (a3 == 16)
  {
    *blocks = 0u;
    *(_OWORD *)((char *)&blocks[v3] + v5 + v6) = 0u;
  }
  else
  {
    *(_QWORD *)blocks = 0;
    *(_QWORD *)((char *)blocks + 8 * v3 + v5 + v6) = 0;
  }
  return result;
}

_BYTE *ATEncoderDecompressTexels_TexelBufferIsNotBigEnoughOrNotWritable(_BYTE *result)
{
  *result = 0;
  return result;
}

_BYTE *ATEncoderDecompressTexels_TexelBufferIsNotWritable(const at_texel_region_t *a1, int a2)
{
  _BYTE *texels;
  _BYTE *v3;

  texels = a1->texels;
  v3 = (char *)a1->texels
     + ((a1->validSize.x * a2 + 7) >> 3)
     + a1->rowBytes * (a1->validSize.y - 1)
     + a1->sliceBytes * (a1->validSize.z - 1)
     - 1;
  *texels = 0;
  return ATEncoderDecompressTexels_TexelBufferIsNotBigEnoughOrNotWritable(v3);
}

__n128 ATEncoderDecompressTexels_BlockBufferIsNotBigEnough(uint64_t a1)
{
  return *(__n128 *)a1;
}

double ATEncoderDecompressTexels_BlockBufferIsNotReadable(const at_block_buffer_t *a1, const at_size_t *a2)
{
  double result;

  *(_QWORD *)&result = vorrq_s8((int8x16_t)ATEncoderDecompressTexels_BlockBufferIsNotBigEnough((uint64_t)a1->blocks+ 16 * (a2->x - 1)+ a1->rowBytes * (a2->y - 1)+ a1->sliceBytes * (a2->z - 1)), *(int8x16_t *)a1->blocks).u64[0];
  return result;
}

float ATEncoderDecompressTexels_BlockBufferIsNotReadable(const at_block_buffer_t *a1, const at_size_t *a2, uint64_t a3)
{
  uint64_t v3;
  int8x16_t *blocks;
  size_t v5;
  size_t v6;
  float result;

  v3 = a2->x - 1;
  blocks = (int8x16_t *)a1->blocks;
  v5 = a1->rowBytes * (a2->y - 1);
  v6 = a1->sliceBytes * (a2->z - 1);
  if (a3 == 16)
    LODWORD(result) = vorrq_s8(*(int8x16_t *)((char *)&blocks[v3] + v5 + v6), *blocks).u32[0];
  else
    LODWORD(result) = vorr_s8(*(int8x8_t *)&blocks->i8[8 * v3 + v5 + v6], *(int8x8_t *)blocks->i8).u32[0];
  return result;
}

at_size_t at_encoder_get_block_dimensions(at_encoder_t encoder)
{
  uint64_t v1;
  uint32_t v2;
  at_size_t result;

  v1 = (*((uint64_t (**)(at_encoder_t))encoder[10].isa + 8))(encoder + 10);
  result.x = v1;
  result.y = HIDWORD(v1);
  result.z = v2;
  return result;
}

at_texel_format_t at_encoder_get_texel_format(at_encoder_t encoder)
{
  return (*((uint64_t (**)(at_encoder_t))encoder[10].isa + 10))(encoder + 10);
}

at_block_format_t at_encoder_get_block_format(at_encoder_t encoder)
{
  return (*((uint64_t (**)(at_encoder_t))encoder[10].isa + 12))(encoder + 10);
}

at_alpha_t at_encoder_get_texel_alpha(at_encoder_t encoder)
{
  return (*((unsigned int (**)(at_encoder_t))encoder[10].isa + 11))(encoder + 10);
}

at_alpha_t at_encoder_get_block_alpha(at_encoder_t encoder)
{
  return (*((unsigned int (**)(at_encoder_t))encoder[10].isa + 13))(encoder + 10);
}

BOOL at_encoder_is_decompression_monolithic(at_encoder_t encoder, at_flags_t flags)
{
  return (*((uint64_t (**)(at_encoder_t, at_flags_t))encoder[10].isa + 15))(encoder + 10, flags);
}

void *__cdecl at_encoder_get_block_address(at_encoder_t encoder, at_size_t texelPosition, at_size_t imageSize, const at_block_buffer_t *blockInfo)
{
  return (void *)(*((uint64_t (**)(at_encoder_t, _QWORD, _QWORD, _QWORD, _QWORD, const at_block_buffer_t *))encoder[10].isa
                  + 6))(encoder + 10, *(_QWORD *)&texelPosition.x, texelPosition.z, *(_QWORD *)&imageSize.x, imageSize.z, blockInfo);
}

uint64_t at_encoder_set_capabilities_mask(uint64_t a1)
{
  uint64_t v1;

  v1 = ~gCapabilitiesMask;
  gCapabilitiesMask = ~a1;
  return v1;
}

uint64_t ATEncoder_IsEqual(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a1 + 80;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 16))(a1 + 80);
  v6 = *(_QWORD *)(a2 + 80);
  v5 = a2 + 80;
  if (v4 == (*(unsigned int (**)(uint64_t))(v6 + 16))(v5))
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 24))(v3, v5);
  else
    return 0;
}

uint64_t ATEncoder_Hash(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 80) + 32))(a1 + 80);
}

at_encoder_t ATEncoder_MakeCopy(uint64_t a1)
{
  return at_encoder_create((at_texel_format_t)(*(_QWORD *)(a1 + 48) & 0x7FFLL), (at_alpha_t)*(_DWORD *)(a1 + 64), (at_block_format_t)(*(_QWORD *)(a1 + 56) & 0x7FFLL), (at_alpha_t)*(_DWORD *)(a1 + 68), (const float *)(a1 + 32));
}

uint64_t ATEncoder_GetDescription(uint64_t a1)
{
  uint64_t v1;
  size_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  size_t __size;
  char v21[4096];
  char v22[1024];
  uint64_t v23;

  v1 = MEMORY[0x24BDAC7A8](a1);
  __size = v2;
  v4 = v3;
  v5 = v1;
  v23 = *MEMORY[0x24BDAC8D0];
  v6 = v1 + 80;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 80) + 80))(v1 + 80);
  if ((unint64_t)(v7 - 1) > 9)
    v8 = "<unknown>";
  else
    v8 = off_24BEFE688[v7 - 1];
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 96))(v6);
  if ((unint64_t)(v9 - 1) > 0x29)
    v10 = "<unknown>";
  else
    v10 = off_24BEFE6D8[v9 - 1];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6) > 1
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6) > 1)
      v11 = 2;
    else
      v11 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6);
  }
  else
  {
    v11 = 0;
  }
  v12 = ATEncoder_GetDescription::kAlphaNames[v11];
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6) > 1
    || (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6))
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6) > 1)
      v13 = 2;
    else
      v13 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 104))(v6);
  }
  else
  {
    v13 = 0;
  }
  v14 = ATEncoder_GetDescription::kAlphaNames[v13];
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 80) + 64))(v6);
  v17 = v16;
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v5 + 80) + 72))(v6);
  snprintf(v22, 0x400uLL, "\ttexel  format:    %s\n\tblock  format:    %s\n\ttexel  alpha:     %s\n\tblock  alpha:     %s\n\tblock size:       %u x %u x %u\n\tchannel count:    %u\n\tcolor chan count: %u\n\ttexel bits:       %u  (before compression)\n\tbit rate:         %3.3f bits per compressed texel\n\tblock size:       %u bits\n\tbackground color: %f %f %f %f\n", v8, v10, v12, v14, v15, HIDWORD(v15),
    v17,
    WORD1(*(_QWORD *)(v5 + 48)) & 7,
    (*(_QWORD *)(v5 + 48) >> 19) & 7,
    (*(_QWORD *)(v5 + 48) >> 31) & 0xF8,
    (float)((float)((float)v18 * 8.0) / (float)(v17 * v15 * HIDWORD(v15))),
    8 * v18,
    *(float *)(v5 + 32),
    *(float *)(v5 + 36),
    *(float *)(v5 + 40),
    *(float *)(v5 + 44));
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v5 + 80) + 40))(v6, v21, 4096);
  return snprintf(v4, __size, "%s\n%s", v22, v21);
}

void NULLEncoder::~NULLEncoder(NULLEncoder *this)
{
  JUMPOUT(0x20BCF1508);
}

uint64_t NULLEncoder::GetHash(NULLEncoder *this)
{
  return 0;
}

uint64_t NULLEncoder::GetBlockCounts(NULLEncoder *this, at_size_t a2)
{
  return 0;
}

uint64_t NULLEncoder::IsCompressionMonolithic(NULLEncoder *this, at_flags_t a2)
{
  return 1;
}

float ATEncoder::CompressTexels(ATEncoder *this, const at_texel_region_t *a2, const at_block_buffer_t *a3, float a4, at_flags_t a5)
{
  return -2.0;
}

uint64_t ATEncoder::DecompressTexels(ATEncoder *this, const at_block_buffer_t *a2, const at_texel_region_t *a3, at_flags_t a4)
{
  return -2;
}

void D3DX_BC6H::Encode()
{
  abort();
}

float D3DX_BC6H::RoughMSE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  _BYTE v13[16];
  _BYTE v14[16];
  uint64_t v15[17];

  v2 = 0;
  v15[16] = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned __int8 *)(a2 + 6);
  v4 = a2 + (v3 << 6) + 16;
  v5 = bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 1];
  v6 = &bc67_partitionTable[1024 * v5 + 16 * v3];
  do
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (v2 == v6[v7])
        v15[v8++] = v7;
      ++v7;
    }
    while (v7 != 16);
    if (v8 == 1)
    {
      v10 = (_OWORD *)(a2 + 16 * v15[0] + 2064);
      *(_OWORD *)(v4 + 32 * v2) = *v10;
    }
    else
    {
      if (v8 != 2)
      {
        OptimizeRGB(*(_QWORD *)(a2 + 8), (uint64_t)v14, (uint64_t)v13, v8, v15);
        abort();
      }
      v9 = v15[1];
      *(_OWORD *)(v4 + 32 * v2) = *(_OWORD *)(a2 + 2064 + 16 * v15[0]);
      v10 = (_OWORD *)(a2 + 2064 + 16 * v9);
    }
    *(_OWORD *)(v4 + 32 * v2 + 16) = *v10;
  }
  while (v2++ != v5);
  return 0.0;
}

uint64_t D3DX_BC6H::Refine(uint64_t a1, float *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t result;
  unsigned __int8 *v8;
  int32x2_t v9;
  int v10;
  int8x8_t v11;
  int8x16_t v12;
  unsigned __int8 v13;
  int v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x8_t v18;
  int32x4_t v19;
  int v20;
  int v21;
  int32x4_t v22;
  int v23;
  int32x4_t v24;
  float *v25;
  float *v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  BOOL v34;
  int32x4_t *v35;
  _BYTE *v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  _BYTE v40[128];
  _BYTE v41[128];
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = bc6_modeinfo[20 * *((unsigned __int8 *)a2 + 5) + 1];
  v5 = *((unsigned __int8 *)a2 + 5) - 9;
  D3DX_BC6H::QuantizeEndPts(a1, a2, (uint64_t)&v46);
  D3DX_BC6H::AssignIndices(v6, (uint64_t)a2, (unsigned int *)&v46, (uint64_t)v41, &v51);
  D3DX_BC6H::SwapIndices((uint64_t)a2, (uint64_t)&v46, (uint64_t)v41);
  if (v5 > 1)
  {
    v39 = v47;
    v37 = v49;
    v38 = v48;
    v47 = (int8x16_t)vsubq_s32((int32x4_t)v47, v46);
    v48 = (int8x16_t)vsubq_s32((int32x4_t)v48, v46);
    v49 = (int8x16_t)vsubq_s32((int32x4_t)v49, v46);
    result = D3DX_BC6H::EndPointsFit((uint64_t)a2, (__int128 *)v46.i8);
    if (!(_DWORD)result)
      return result;
    v8 = &bc6_modeinfo[20 * *((unsigned __int8 *)a2 + 5)];
    v9.i32[0] = v8[4];
    v9.i32[1] = v8[5];
    v10 = *((unsigned __int8 *)a2 + 4);
    v11 = (int8x8_t)vshl_u32((uint32x2_t)-1, (uint32x2_t)v9);
    *(int8x8_t *)v12.i8 = vmvn_s8(v11);
    v13 = v8[6];
    v14 = -1 << v13;
    v12.i64[1] = ~(-1 << v13);
    v15 = vandq_s8(v39, v12);
    v16 = vandq_s8(v38, v12);
    v47 = v15;
    v48 = v16;
    v17 = vandq_s8(v37, v12);
    v49 = v17;
    if (v10)
    {
      v18 = (int8x8_t)vshl_u32((uint32x2_t)0x100000001, (uint32x2_t)vadd_s32(v9, (int32x2_t)-1));
      *(int8x8_t *)v19.i8 = vorr_s8(vbic_s8(v11, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)v15.i8, v18))), *(int8x8_t *)v15.i8);
      v19.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
      v20 = 1 << (v13 - 1);
      if ((v15.i32[2] & v20) != 0)
        v21 = v14;
      else
        v21 = 0;
      v19.i32[2] = v21 | v15.i32[2];
      *(int8x8_t *)v22.i8 = vorr_s8(vbic_s8(v11, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)v16.i8, v18))), *(int8x8_t *)v16.i8);
      v22.i64[1] = vextq_s8(v16, v16, 8uLL).u64[0];
      if ((v16.i32[2] & v20) != 0)
        v23 = v14;
      else
        v23 = 0;
      v22.i32[2] = v23 | v16.i32[2];
      v47 = (int8x16_t)v19;
      v48 = (int8x16_t)v22;
      *(int8x8_t *)v24.i8 = vorr_s8(vbic_s8(v11, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(*(int8x8_t *)v17.i8, v18))), *(int8x8_t *)v17.i8);
      v24.i64[1] = vextq_s8(v17, v17, 8uLL).u64[0];
      if ((v17.i32[2] & v20) == 0)
        v14 = 0;
      v24.i32[2] = v14 | v17.i32[2];
      v49 = (int8x16_t)v24;
    }
  }
  else
  {
    result = D3DX_BC6H::EndPointsFit((uint64_t)a2, (__int128 *)v46.i8);
    if ((result & 1) == 0)
      return result;
  }
  v25 = (float *)&v51;
  D3DX_BC6H::OptimizeEndPoints(result, (uint64_t)a2, (uint64_t)&v51, (uint64_t)&v46, (uint64_t)&v42);
  v26 = (float *)&v50;
  D3DX_BC6H::AssignIndices(v27, (uint64_t)a2, (unsigned int *)&v42, (uint64_t)v40, &v50);
  D3DX_BC6H::SwapIndices((uint64_t)a2, (uint64_t)&v42, (uint64_t)v40);
  v28 = v4 + 1;
  v29 = 0.0;
  v30 = 0.0;
  do
  {
    v31 = *v25++;
    v30 = v30 + v31;
    v32 = *v26++;
    v29 = v29 + v32;
    --v28;
  }
  while (v28);
  if (v5 >= 2)
  {
    v43 = vsubq_s32(v43, v42);
    v44 = vsubq_s32(v44, v42);
    v45 = vsubq_s32(v45, v42);
  }
  result = D3DX_BC6H::EndPointsFit((uint64_t)a2, (__int128 *)v42.i8);
  v33 = *a2;
  if ((_DWORD)result && (v29 < v30 ? (v34 = v29 < v33) : (v34 = 0), v34))
  {
    *a2 = v29;
    v35 = &v42;
    v36 = v40;
  }
  else
  {
    if (v30 >= v33)
      return result;
    if (v5 >= 2)
    {
      v47 = (int8x16_t)vsubq_s32((int32x4_t)v47, v46);
      v48 = (int8x16_t)vsubq_s32((int32x4_t)v48, v46);
      v49 = (int8x16_t)vsubq_s32((int32x4_t)v49, v46);
    }
    *a2 = v30;
    v35 = &v46;
    v36 = v41;
  }
  return D3DX_BC6H::EmitBlock(a1, (uint64_t)a2, (unsigned int *)v35, (uint64_t)v36);
}

uint64_t D3DX_BC6H::Quantize(uint64_t this, int a2, int a3)
{
  unsigned int v3;
  int v4;

  if (a3)
  {
    if ((int)this >= 0)
      v3 = this;
    else
      v3 = -(int)this;
    if (a2 <= 15)
    {
      v4 = (unint64_t)(2216757315 * (int)(v3 << (a2 - 1))) >> 32;
      v3 = (v4 >> 14) + (v4 >> 31);
    }
    if ((int)this >= 0)
      return v3;
    else
      return -v3;
  }
  else if (a2 <= 14)
  {
    return (((_DWORD)this << a2) / 31744);
  }
  return this;
}

uint64_t D3DX_BC6H::FinishUnquantize(D3DX_BC6H *this, int a2)
{
  unsigned int v2;

  v2 = (31 * (int)this) >> 5;
  if ((int)this < 0)
    v2 = -((-31 * (int)this) >> 5);
  if (a2)
    return v2;
  else
    return ((31 * (int)this) >> 6);
}

BOOL D3DX_BC6H::EndPointsFit(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  int v4;
  __int128 v5;
  int v6;
  int v7;
  BOOL v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned int v12;
  int v13;
  int v14;
  __int128 v15;
  int v16;
  _BOOL8 v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  _BOOL8 result;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;

  v3 = *(unsigned __int8 *)(a1 + 5);
  v4 = *(unsigned __int8 *)(a1 + 4);
  v5 = *a2;
  v6 = *a2;
  if (v6)
  {
    if (v6 < 1)
    {
      v7 = 1;
      if (v6 != -1)
      {
        do
        {
          ++v7;
          v9 = v6 < -2;
          v6 >>= 1;
        }
        while (v9);
      }
    }
    else
    {
      v7 = *(unsigned __int8 *)(a1 + 4);
      do
      {
        ++v7;
        v8 = v6 >= 2;
        v6 = v6 >> 1;
      }
      while (v8);
    }
  }
  else
  {
    v7 = 0;
  }
  v10 = HIDWORD(*(_QWORD *)a2);
  if (DWORD1(v5))
  {
    if (SDWORD1(v5) < 1)
    {
      v11 = 1;
      if (DWORD1(v5) != -1)
      {
        do
        {
          ++v11;
          v9 = v10 < -2;
          v10 >>= 1;
        }
        while (v9);
      }
    }
    else
    {
      v11 = *(unsigned __int8 *)(a1 + 4);
      do
      {
        ++v11;
        v8 = v10 >= 2;
        v10 = v10 >> 1;
      }
      while (v8);
    }
  }
  else
  {
    v11 = 0;
  }
  v12 = v3 - 11;
  v13 = *((_QWORD *)a2 + 1);
  if (DWORD2(v5))
  {
    if (SDWORD2(v5) < 1)
    {
      v14 = 1;
      if (DWORD2(v5) != -1)
      {
        do
        {
          ++v14;
          v9 = v13 < -2;
          v13 >>= 1;
        }
        while (v9);
      }
    }
    else
    {
      v14 = *(unsigned __int8 *)(a1 + 4);
      do
      {
        ++v14;
        v8 = v13 >= 2;
        v13 = v13 >> 1;
      }
      while (v8);
    }
  }
  else
  {
    v14 = 0;
  }
  v15 = a2[1];
  v16 = v15;
  v18 = v12 < 0xFFFFFFFE || v4 != 0;
  if ((_DWORD)v15)
  {
    if ((int)v15 < 1)
    {
      v19 = 1;
      if ((_DWORD)v15 != -1)
      {
        do
        {
          ++v19;
          v9 = v16 < -2;
          v16 >>= 1;
        }
        while (v9);
      }
    }
    else
    {
      v19 = v4 != 0;
      if (v19 <= (v12 < 0xFFFFFFFE))
        v19 = v12 < 0xFFFFFFFE;
      do
      {
        ++v19;
        v8 = v16 >= 2;
        v16 = v16 >> 1;
      }
      while (v8);
    }
  }
  else
  {
    v19 = 0;
  }
  v20 = &bc6_modeinfo[20 * *(unsigned __int8 *)(a1 + 5)];
  v21 = DWORD1(v15);
  if (DWORD1(v15))
  {
    if (SDWORD1(v15) < 1)
    {
      v22 = 1;
      if (DWORD1(v15) != -1)
      {
        do
        {
          ++v22;
          v9 = v21 < -2;
          v21 >>= 1;
        }
        while (v9);
      }
    }
    else
    {
      v22 = v4 != 0;
      if (v22 <= (v12 < 0xFFFFFFFE))
        v22 = v12 < 0xFFFFFFFE;
      do
      {
        ++v22;
        v8 = v21 >= 2;
        v21 = v21 >> 1;
      }
      while (v8);
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = DWORD2(v15);
  if (DWORD2(v15))
  {
    if (SDWORD2(v15) < 1)
    {
      v24 = 1;
      if (DWORD2(v15) != -1)
      {
        do
        {
          ++v24;
          v9 = v23 < -2;
          v23 >>= 1;
        }
        while (v9);
      }
    }
    else
    {
      v24 = v4 != 0;
      v25 = v12 < 0xFFFFFFFE;
      if (v24 <= v25)
        v24 = v25;
      do
      {
        ++v24;
        v8 = v23 >= 2;
        v23 = v23 >> 1;
      }
      while (v8);
    }
  }
  else
  {
    v24 = 0;
  }
  result = 0;
  if (v7 <= v20[4] && v19 <= v20[8] && v11 <= v20[5] && v22 <= v20[9] && v14 <= v20[6] && v24 <= v20[10])
  {
    if ((unint64_t)(v3 - 10) < 4)
      return 1;
    v27 = NBits(*((_DWORD *)a2 + 8), v18);
    v28 = NBits(*((_DWORD *)a2 + 9), v18);
    v32 = NBits(*((_DWORD *)a2 + 10), v18);
    v29 = NBits(*((_DWORD *)a2 + 12), v18);
    v30 = NBits(*((_DWORD *)a2 + 13), v18);
    v31 = NBits(*((_DWORD *)a2 + 14), v18);
    if (v27 <= v20[12]
      && v29 <= v20[16]
      && v28 <= v20[13]
      && v30 <= bc6_modeinfo[20 * v3 + 17]
      && v32 <= v20[14]
      && v31 <= bc6_modeinfo[20 * v3 + 18])
    {
      return 1;
    }
  }
  return result;
}

uint64_t NBits(int a1, uint64_t a2)
{
  BOOL v2;
  BOOL v3;

  if (!a1)
    return 0;
  if (a1 < 1)
  {
    a2 = 1;
    if (a1 != -1)
    {
      do
      {
        a2 = (a2 + 1);
        v3 = a1 < -2;
        a1 >>= 1;
      }
      while (v3);
    }
  }
  else
  {
    do
    {
      a2 = (a2 + 1);
      v2 = a1 >= 2;
      a1 = a1 >> 1;
    }
    while (v2);
  }
  return a2;
}

void D3DX_BC6H::GeneratePaletteQuantized(uint64_t a1, uint64_t a2, unsigned int *a3, __int128 *a4)
{
  unsigned __int8 *v7;
  unsigned int v8;
  int v9;
  int v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int *v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  __int128 v28;
  int v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;

  v7 = &bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5)];
  v39 = v7[3];
  v8 = v7[4];
  v9 = *(unsigned __int8 *)(a2 + 4);
  v10 = bc6_Unquantize(*a3, v8, v9);
  v11 = v7[5];
  v12 = bc6_Unquantize(a3[1], v11, v9);
  v13 = v7[6];
  v14 = bc6_Unquantize(a3[2], v13, v9);
  v15 = bc6_Unquantize(a3[4], v8, v9);
  v16 = bc6_Unquantize(a3[5], v11, v9);
  v17 = bc6_Unquantize(a3[6], v13, v9);
  if (v39 == 3)
  {
    v18 = &bc67_weights3;
  }
  else
  {
    if (v39 != 4)
    {
      bzero(a4, 16 << v39);
      return;
    }
    v18 = &bc67_weights4;
  }
  v19 = 1 << v39;
  do
  {
    v21 = *v18++;
    v20 = v21;
    v22 = 64 - v21;
    v23 = v21 * v15 + (64 - v21) * v10;
    v24 = (v23 + 32) >> 6;
    if (*(_BYTE *)(a2 + 4))
    {
      v25 = (31 * v24) >> 5;
      v26 = -((-31 * v24) >> 5);
      if (v23 <= -33)
        v27 = v26;
      else
        v27 = v25;
    }
    else
    {
      v27 = (31 * v24) >> 6;
    }
    v28 = *a4;
    *(_DWORD *)a4 = v27;
    v29 = v20 * v16 + v22 * v12;
    v30 = (v29 + 32) >> 6;
    if (*(_BYTE *)(a2 + 4))
    {
      v31 = (31 * v30) >> 5;
      v32 = -((-31 * v30) >> 5);
      if (v29 <= -33)
        v33 = v32;
      else
        v33 = v31;
    }
    else
    {
      v33 = (31 * v30) >> 6;
    }
    *(_QWORD *)&v28 = __PAIR64__(v33, v27);
    *a4 = v28;
    v34 = v20 * v17 + v22 * v14;
    v35 = (v34 + 32) >> 6;
    if (*(_BYTE *)(a2 + 4))
    {
      v36 = (31 * v35) >> 5;
      v37 = -((-31 * v35) >> 5);
      if (v34 <= -33)
        v38 = v37;
      else
        v38 = v36;
    }
    else
    {
      v38 = (31 * v35) >> 6;
    }
    DWORD2(v28) = v38;
    *a4++ = v28;
    --v19;
  }
  while (v19);
}

float D3DX_BC6H::MapColorsQuantized(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  unsigned __int8 v7;
  uint64_t v8;
  float32x4_t v9;
  unint64_t v10;
  float result;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float v15;
  uint64_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  int32x4_t v20[16];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v7 = bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 3];
  D3DX_BC6H::GeneratePaletteQuantized(a1, a2, a5, (__int128 *)v20[0].i8);
  if (!a4)
    return 0.0;
  v8 = 0;
  v9 = vcvtq_f32_s32(v20[0]);
  v10 = (1 << v7);
  result = 0.0;
  do
  {
    v12 = vcvtq_f32_s32(*(int32x4_t *)(a3 + 16 * v8));
    v13 = vsubq_f32(v12, v9);
    v14 = vmulq_f32(v13, v13);
    LODWORD(v15) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).u32[0];
    if (v10 >= 2 && v15 > 0.0)
    {
      v16 = 1;
      do
      {
        v17 = vsubq_f32(v12, vcvtq_f32_s32(v20[v16]));
        v18 = vmulq_f32(v17, v17);
        v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0];
        if (v19 > v15)
          break;
        if (v19 < v15)
          v15 = v19;
        if (++v16 >= v10)
          break;
      }
      while (v15 > 0.0);
    }
    result = result + v15;
    ++v8;
  }
  while (v8 != a4);
  return result;
}

float D3DX_BC6H::PerturbOne(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, _OWORD *a6, _OWORD *a7, int a8, float a9)
{
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 v13;
  __int128 v14;
  int v15;
  int v16;
  __int128 v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  int v24;
  int v25;
  float v26;
  BOOL v27;
  __int128 v28;
  _DWORD *v30;
  int v31;
  _DWORD *v32;
  __int128 v36;
  __int128 v37;

  if (a5 == 2)
  {
    v11 = &bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 6];
  }
  else if (a5 == 1)
  {
    v11 = &bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 5];
  }
  else
  {
    if (a5)
    {
      v28 = a6[1];
      *a7 = *a6;
      a7[1] = v28;
      return 3.4028e38;
    }
    v11 = &bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 4];
  }
  v12 = 0;
  v13 = *v11;
  v14 = a6[1];
  *a7 = *a6;
  a7[1] = v14;
  v15 = 1 << (v13 - 1);
  v16 = 1 << v13;
  v17 = a6[1];
  v36 = *a6;
  v37 = v17;
  v18 = a5;
  v19 = (_DWORD *)a7 + a5 + 4;
  v20 = (uint64_t)a7 + 4 * a5;
  v32 = (_DWORD *)v20;
  if (a8)
    v20 = (uint64_t)a7 + 4 * a5 + 16;
  v30 = (_DWORD *)v20;
  do
  {
    v21 = 0;
    v22 = -v15;
    v31 = v15;
    v23 = 2 * v15;
    v24 = -3;
    do
    {
      if (a8)
      {
        v25 = v22 + *v19;
        *((_DWORD *)&v37 + v18) = v25;
        if (v25 < 0)
          goto LABEL_19;
      }
      else
      {
        v25 = v22 + *v32;
        *((_DWORD *)&v36 + v18) = v25;
        if (v25 < 0)
          goto LABEL_19;
      }
      if (v25 < v16)
      {
        v26 = D3DX_BC6H::MapColorsQuantized(a1, a2, a3, a4, (unsigned int *)&v36);
        v27 = v26 < a9;
        if (v26 < a9)
        {
          a9 = v26;
          v12 = v22;
        }
        v21 |= v27;
      }
LABEL_19:
      v22 += v23;
      v24 += 2;
    }
    while (v24 < 0);
    if ((v21 & 1) != 0)
      *v30 += v12;
    v15 = v31 >> 1;
  }
  while (v31 >= 2);
  return a9;
}

void D3DX_BC6H::OptimizeOne(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5, _OWORD *a6, float a7)
{
  uint64_t v12;
  _OWORD *v13;
  float v14;
  uint64_t v15;
  float v16;
  int v17;
  uint64_t *v18;
  _OWORD *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  float v25;
  uint64_t *v26;
  _OWORD *v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[2];

  v12 = 0;
  *a6 = *a5;
  v13 = a6 + 1;
  a6[1] = a5[1];
  do
  {
    v14 = D3DX_BC6H::PerturbOne(a1, a2, a3, a4, v12, a6, v32, 0, a7);
    v16 = D3DX_BC6H::PerturbOne(v15, a2, a3, a4, v12, a6, &v30, 1, a7);
    if (v14 >= v16)
    {
      if (v16 >= a7)
        goto LABEL_16;
      v17 = 0;
      v18 = &v31;
      v19 = v13;
      a7 = v16;
    }
    else
    {
      if (v14 >= a7)
        goto LABEL_16;
      v17 = 1;
      v18 = (uint64_t *)v32;
      v19 = a6;
      a7 = v14;
    }
    *((_DWORD *)v19 + v12) = *((_DWORD *)v18 + v12);
    v20 = v12;
    v21 = a2;
    v22 = a3;
    v23 = a4;
    v24 = a6;
    v25 = a7;
    while (1)
    {
      v25 = D3DX_BC6H::PerturbOne(a1, v21, v22, v23, v20, v24, &v28, v17, v25);
      if (v25 >= a7)
        break;
      a7 = v25;
      if (v17)
        v26 = &v29;
      else
        v26 = (uint64_t *)&v28;
      if (v17)
        v27 = v13;
      else
        v27 = a6;
      *((_DWORD *)v27 + v12) = *((_DWORD *)v26 + v12);
      v17 = 1 - v17;
      v20 = v12;
      v21 = a2;
      v22 = a3;
      v23 = a4;
      v24 = a6;
    }
LABEL_16:
    ++v12;
  }
  while (v12 != 3);
}

void D3DX_BC6H::OptimizeEndPoints(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t i;
  int v15;
  _OWORD v17[16];
  uint64_t v18;

  v9 = 0;
  v18 = *MEMORY[0x24BDAC8D0];
  v10 = bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 1];
  v11 = bc67_partitionTable;
  do
  {
    v12 = 0;
    v13 = &v11[16 * *(unsigned __int8 *)(a2 + 6)];
    for (i = 2064; i != 2320; i += 16)
    {
      v15 = *v13++;
      if (v9 == v15)
        v17[v12++] = *(_OWORD *)(a2 + i);
    }
    D3DX_BC6H::OptimizeOne(a1, a2, (uint64_t)v17, v12, (_OWORD *)(a4 + 32 * v9), (_OWORD *)(a5 + 32 * v9), *(float *)(a3 + 4 * v9));
    v11 += 1024;
  }
  while (v9++ != v10);
}

uint64_t D3DX_BC6H::SwapIndices(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 *v9;
  __int128 v10;

  v3 = 0;
  v4 = (char *)&bc6_modeinfo + 20 * *(unsigned __int8 *)(result + 5);
  v5 = v4[1];
  v6 = 1 << v4[3];
  v7 = *(unsigned __int8 *)(result + 6);
  do
  {
    if ((*(_QWORD *)(a3 + 8 * bc67_fixups[192 * v5 + 3 * v7 + v3]) & (v6 >> 1)) != 0)
    {
      v8 = 0;
      v9 = (__int128 *)(a2 + 32 * v3);
      v10 = *v9;
      *v9 = v9[1];
      v9[1] = v10;
      v7 = *(unsigned __int8 *)(result + 6);
      do
      {
        if (v3 == bc67_partitionTable[1024 * v5 + 16 * v7 + v8])
          *(_QWORD *)(a3 + 8 * v8) = v6 + ~*(_QWORD *)(a3 + 8 * v8);
        ++v8;
      }
      while (v8 != 16);
    }
  }
  while (v3++ != v5);
  return result;
}

float D3DX_BC6H::AssignIndices(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, _DWORD *a5)
{
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 v12;
  _DWORD *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int32x4_t *v18;
  int32x4_t *v24;
  unint64_t v25;
  float v26;
  float result;
  _BYTE v31[512];
  uint64_t v32;

  v9 = 0;
  v32 = *MEMORY[0x24BDAC8D0];
  v10 = &bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5)];
  v11 = v10[1];
  v12 = v10[3];
  v13 = a5;
  do
  {
    D3DX_BC6H::GeneratePaletteQuantized(a1, a2, a3, (__int128 *)&v31[v9]);
    *v13++ = 0;
    v9 += 256;
    a3 += 8;
  }
  while ((v11 << 8) + 256 != v9);
  v14 = 0;
  v15 = (1 << v12);
  v16 = &bc67_partitionTable[1024 * v11 + 16 * *(unsigned __int8 *)(a2 + 6)];
  do
  {
    v17 = v16[v14];
    v18 = (int32x4_t *)(a2 + 16 * v14);
    _S2 = vcvtq_f32_s32(vsubq_s32(v18[2064], *(int32x4_t *)(v31 + (v17 << 8)))).i32[2];
    __asm { FMLA            S0, S2, V1.S[2] }
    *(_QWORD *)(a4 + 8 * v14) = 0;
    if (v15 < 2 || _S0 <= 0.0)
    {
      v26 = _S0;
    }
    else
    {
      v24 = v18 + 129;
      v25 = 1;
      v26 = _S0;
      do
      {
        _S4 = vcvtq_f32_s32(vsubq_s32(*v24, *(int32x4_t *)(v31 + (v17 << 8) + 16 * v25))).i32[2];
        __asm { FMLA            S2, S4, V3.S[2] }
        if (_S2 < _S0)
        {
          *(_QWORD *)(a4 + 8 * v14) = v25;
          v26 = _S2;
        }
        ++v25;
        if (_S2 > _S0 || v25 >= v15)
          break;
        _S0 = v26;
      }
      while (v26 > 0.0);
    }
    result = v26 + *(float *)&a5[v17];
    *(float *)&a5[v17] = result;
    ++v14;
  }
  while (v14 != 16);
  return result;
}

__n128 D3DX_BC6H::QuantizeEndPts(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  char v8;
  char v9;
  char v10;
  uint64_t v11;
  _OWORD *v12;
  int *v13;
  int v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  __int128 v23;
  int v24;
  int v25;
  int v26;
  int v27;
  __n128 result;

  v3 = (unsigned __int8 *)&bc6_modeinfo + 20 * a2[5];
  v4 = v3[1];
  v5 = v3[4];
  v6 = v3[5];
  v7 = v3[6];
  v8 = v5 - 1;
  v9 = v6 - 1;
  v10 = v7 - 1;
  v11 = v4 + 1;
  v12 = (_OWORD *)(a3 + 16);
  v13 = (int *)&a2[64 * (unint64_t)a2[6] + 20];
  do
  {
    v14 = *(v13 - 1);
    if (a2[4])
    {
      if (v14 >= 0)
        v15 = *(v13 - 1);
      else
        v15 = -v14;
      if (v5 <= 0xF)
        v15 = (v15 << v8) / 31744;
      if (v14 >= 0)
        v14 = v15;
      else
        v14 = -v15;
    }
    else if (v5 <= 0xE)
    {
      v14 = (v14 << v5) / 31744;
    }
    v16 = *(v12 - 1);
    *((_DWORD *)v12 - 4) = v14;
    v17 = *v13;
    if (a2[4])
    {
      if (v17 >= 0)
        v18 = *v13;
      else
        v18 = -v17;
      if (v6 <= 0xF)
        v18 = (v18 << v9) / 31744;
      if (v17 >= 0)
        v17 = v18;
      else
        v17 = -v18;
    }
    else if (v6 <= 0xE)
    {
      v17 = (v17 << v6) / 31744;
    }
    *(_QWORD *)&v16 = __PAIR64__(v17, v14);
    *(v12 - 1) = v16;
    v19 = v13[1];
    if (a2[4])
    {
      if (v19 >= 0)
        v20 = v13[1];
      else
        v20 = -v19;
      if (v7 <= 0xF)
        v20 = (v20 << v10) / 31744;
      if (v19 >= 0)
        v19 = v20;
      else
        v19 = -v20;
    }
    else if (v7 <= 0xE)
    {
      v19 = (v19 << v7) / 31744;
    }
    DWORD2(v16) = v19;
    *(v12 - 1) = v16;
    v21 = v13[3];
    if (a2[4])
    {
      if (v21 >= 0)
        v22 = v13[3];
      else
        v22 = -v21;
      if (v5 <= 0xF)
        v22 = (v22 << v8) / 31744;
      if (v21 >= 0)
        v21 = v22;
      else
        v21 = -v22;
    }
    else if (v5 <= 0xE)
    {
      v21 = (v21 << v5) / 31744;
    }
    v23 = *v12;
    *(_DWORD *)v12 = v21;
    v24 = v13[4];
    if (a2[4])
    {
      if (v24 >= 0)
        v25 = v13[4];
      else
        v25 = -v24;
      if (v6 <= 0xF)
        v25 = (v25 << v9) / 31744;
      if (v24 >= 0)
        v24 = v25;
      else
        v24 = -v25;
    }
    else if (v6 <= 0xE)
    {
      v24 = (v24 << v6) / 31744;
    }
    *(_QWORD *)&v23 = __PAIR64__(v24, v21);
    *v12 = v23;
    v26 = v13[5];
    if (a2[4])
    {
      if (v26 >= 0)
        v27 = v13[5];
      else
        v27 = -v26;
      if (v7 <= 0xF)
        v27 = (v27 << v10) / 31744;
      if (v26 >= 0)
        v26 = v27;
      else
        v26 = -v27;
    }
    else if (v7 <= 0xE)
    {
      v26 = (v26 << v7) / 31744;
    }
    DWORD2(v23) = v26;
    *v12 = v23;
    v12 += 2;
    v13 += 8;
    --v11;
  }
  while (v11);
  result.n128_u64[0] = v23;
  result.n128_u32[2] = DWORD2(v23);
  return result;
}

uint64_t D3DX_BC6H::EmitBlock(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  unint64_t v8;
  unsigned __int8 *v9;
  unsigned int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t j;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t i;

  v8 = 0;
  v9 = &bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5)];
  v10 = *v9;
  v11 = v9[3];
  v12 = (char *)&bc6_modedesc + 656 * *(unsigned __int8 *)(a2 + 5);
  if ((unint64_t)*(unsigned __int8 *)(a2 + 5) - 10 >= 4)
    v13 = 82;
  else
    v13 = 65;
  for (i = 0; i < v13; v8 = i)
  {
    v14 = v10;
    switch(*(_DWORD *)&v12[8 * v8])
    {
      case 1:
        goto LABEL_19;
      case 2:
        v14 = *(unsigned __int8 *)(a2 + 6);
        goto LABEL_19;
      case 3:
        v14 = *a3;
        goto LABEL_19;
      case 4:
        v14 = a3[4];
        goto LABEL_19;
      case 5:
        v14 = a3[8];
        goto LABEL_19;
      case 6:
        v14 = a3[12];
        goto LABEL_19;
      case 7:
        v14 = a3[1];
        goto LABEL_19;
      case 8:
        v14 = a3[5];
        goto LABEL_19;
      case 9:
        v14 = a3[9];
        goto LABEL_19;
      case 0xA:
        v14 = a3[13];
        goto LABEL_19;
      case 0xB:
        v14 = a3[2];
        goto LABEL_19;
      case 0xC:
        v14 = a3[6];
        goto LABEL_19;
      case 0xD:
        v14 = a3[10];
        goto LABEL_19;
      case 0xE:
        v14 = a3[14];
LABEL_19:
        CBits<16ul>::SetBit(a1, &i, (v14 >> v12[8 * v8 + 4]) & 1);
        break;
      default:
        continue;
    }
  }
  for (j = 0; j != 16; ++j)
  {
    v16 = 0;
    do
    {
      v17 = bc67_fixups[192 * bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 1]
                      + 3 * *(unsigned __int8 *)(a2 + 6)
                      + v16];
      if (v16 >= bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 1])
        break;
      ++v16;
    }
    while (j != v17);
    result = CBits<16ul>::SetBits(a1, &i, v11 - (j == v17), *(_QWORD *)(a4 + 8 * j));
  }
  return result;
}

uint64_t CBits<16ul>::SetBit(uint64_t result, _QWORD *a2, unsigned int a3)
{
  if (a3 > 1 || *a2 >= 0x80uLL)
    CBits<16ul>::SetBit();
  *(_BYTE *)(result + (*a2 >> 3)) = *(_BYTE *)(result + (*a2 >> 3)) & ~(1 << (*a2 & 7)) | (a3 << (*a2 & 7));
  ++*a2;
  return result;
}

uint64_t CBits<16ul>::SetBits(uint64_t result, _QWORD *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  int v9;
  unsigned int v10;

  if (a3)
  {
    if (a3 > 8 || *a2 + a3 >= 0x81)
      CBits<16ul>::SetBits();
    if (1 << a3 <= a4)
      CBits<16ul>::SetBits();
    v4 = *a2 >> 3;
    v5 = *a2 & 7;
    if (v5 + a3 < 9)
    {
      v7 = (_BYTE *)(result + v4);
      v9 = *v7 & ~(((1 << a3) - 1) << v5);
      v10 = a4 << v5;
    }
    else
    {
      *(_BYTE *)(result + v4) = *(_BYTE *)(result + v4) & ~(~(-1 << (8 - v5)) << v5) | (a4 << v5);
      v6 = result + v4;
      v8 = *(unsigned __int8 *)(v6 + 1);
      v7 = (_BYTE *)(v6 + 1);
      v9 = v8 & (-1 << (a3 - (8 - v5)));
      v10 = a4 >> (8 - v5);
    }
    *v7 = v9 | v10;
    *a2 += a3;
  }
  return result;
}

void D3DX_BC6H::GeneratePaletteUnquantized(uint64_t a1, uint64_t a2, __int128 *a3)
{
  int v3;
  uint64_t v4;
  int *v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  int v9;
  __int128 v10;
  int v11;

  v3 = bc6_modeinfo[20 * *(unsigned __int8 *)(a1 + 5) + 3];
  LODWORD(v4) = 1 << v3;
  if (v3 == 3)
  {
    v5 = &bc67_weights3;
    goto LABEL_5;
  }
  if (v3 == 4)
  {
    v5 = &bc67_weights4;
LABEL_5:
    v6 = a1 + ((unint64_t)*(unsigned __int8 *)(a1 + 6) << 6) + 32 * a2;
    v7 = (_DWORD *)(v6 + 16);
    v8 = (_DWORD *)(v6 + 32);
    if ((v4 & 0xFE) != 0)
      v4 = v4;
    else
      v4 = 1;
    do
    {
      v9 = *v5++;
      v10 = *a3;
      LODWORD(v10) = (*v8 * v9 + (64 - v9) * *v7 + 32) >> 6;
      *(_DWORD *)a3 = v10;
      DWORD1(v10) = (v8[1] * v9 + v7[1] * (64 - v9) + 32) >> 6;
      *a3 = v10;
      DWORD2(v10) = (v8[2] * v9 + v7[2] * (64 - v9) + 32) >> 6;
      *a3++ = v10;
      --v4;
    }
    while (v4);
    return;
  }
  v11 = (1 << v3);
  if ((v4 & 0xFE) == 0)
    v11 = 1;
  bzero(a3, (16 * v11));
}

float D3DX_BC6H::MapColors(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t v10;
  float result;
  int32x4_t v12;
  uint64_t v19;
  int32x4_t v22[16];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v8 = bc6_modeinfo[20 * *(unsigned __int8 *)(a2 + 5) + 3];
  D3DX_BC6H::GeneratePaletteUnquantized(a2, a3, (__int128 *)v22[0].i8);
  if (!a4)
    return 0.0;
  v9 = 0;
  v10 = (1 << v8);
  result = 0.0;
  do
  {
    v12 = *(int32x4_t *)(a2 + 16 * *(_QWORD *)(a5 + 8 * v9) + 2064);
    _S5 = vcvtq_f32_s32(vsubq_s32(v12, *v22)).i32[2];
    __asm { FMLA            S2, S5, V4.S[2] }
    if (v10 >= 2 && _S2 > 0.0)
    {
      v19 = 1;
      do
      {
        _S6 = vcvtq_f32_s32(vsubq_s32(v12, *(v22 + 16 * v19))).i32[2];
        __asm { FMLA            S4, S6, V5.S[2] }
        if (_S4 > _S2)
          break;
        if (_S4 < _S2)
          _S2 = _S4;
        if (++v19 >= v10)
          break;
      }
      while (_S2 > 0.0);
    }
    result = result + _S2;
    ++v9;
  }
  while (v9 != a4);
  return result;
}

uint64_t OptimizeRGB(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  float32x2_t v10;
  float v11;
  uint64_t *v12;
  uint64_t v13;
  float v14;
  uint64_t v15;
  float32x2_t *v16;
  float v17;
  float32x2_t v18;
  float v19;
  float v20;
  float32x2_t v21;
  float v22;
  float32x2_t v23;
  float v24;
  uint64_t *v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float32x2_t *v31;
  float32x2_t v32;
  float v33;
  float v34;
  char v35;
  uint64_t v36;
  float v37;
  float v38;
  float v39;
  uint64_t i;
  int8x16_t v41;
  int8x16_t v42;
  float32x4_t v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  uint64_t *v54;
  uint64_t v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  float *v63;
  float v64;
  float v65;
  float v66;
  float v67;
  unsigned int v68;
  float *v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  float v75;
  _DWORD v76[22];
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  __asm { FMOV            V1.2S, #1.0 }
  v10 = 0;
  if (a4)
  {
    v11 = 0.0;
    v12 = a5;
    v13 = a4;
    v14 = 1.0;
    do
    {
      v15 = *v12++;
      v16 = (float32x2_t *)(result + 16 * v15);
      v17 = v16[1].f32[0];
      if (v17 < v14)
        v14 = v16[1].f32[0];
      _D1 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(_D1, *v16), (int8x8_t)*v16, (int8x8_t)_D1);
      v10 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v16, v10), (int8x8_t)*v16, (int8x8_t)v10);
      if (v17 > v11)
        v11 = v16[1].f32[0];
      --v13;
    }
    while (v13);
  }
  else
  {
    v14 = 1.0;
    v11 = 0.0;
  }
  v18 = vsub_f32(v10, _D1);
  v19 = v11 - v14;
  v20 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v18, v18).i32[1]), v18.f32[0], v18.f32[0]) + (float)(v19 * v19);
  if (v20 >= 1.1755e-38)
  {
    if (a4)
    {
      v21 = vmul_n_f32(v18, 1.0 / v20);
      v22 = v19 * (float)(1.0 / v20);
      v23 = vmul_f32(vadd_f32(_D1, v10), (float32x2_t)0x3F0000003F000000);
      v24 = 0.0;
      v25 = a5;
      v26 = a4;
      v27 = 0.0;
      v28 = 0.0;
      v29 = 0.0;
      do
      {
        v30 = *v25++;
        v31 = (float32x2_t *)(result + 16 * v30);
        v32 = vmul_f32(v21, vsub_f32(*v31, v23));
        v33 = v22 * (float)(v31[1].f32[0] - (float)((float)(v11 + v14) * 0.5));
        v34 = vaddv_f32(v32);
        v24 = v24 + (float)((float)(v34 + v33) * (float)(v34 + v33));
        v27 = v27 + (float)((float)(v34 - v33) * (float)(v34 - v33));
        v32.f32[0] = v32.f32[0] - v32.f32[1];
        v28 = v28 + (float)((float)(v32.f32[0] + v33) * (float)(v32.f32[0] + v33));
        v29 = v29 + (float)((float)(v32.f32[0] - v33) * (float)(v32.f32[0] - v33));
        --v26;
      }
      while (v26);
    }
    else
    {
      v29 = 0.0;
      v28 = 0.0;
      v27 = 0.0;
      v24 = 0.0;
    }
    v35 = 0;
    *(float *)&v76[19] = v27;
    *(float *)&v76[20] = v28;
    v36 = 1;
    *(float *)&v76[21] = v29;
    do
    {
      if (*(float *)&v76[v36 + 18] > v24)
      {
        v24 = *(float *)&v76[v36 + 18];
        v35 = v36;
      }
      ++v36;
    }
    while (v36 != 4);
    v37 = _D1.f32[1];
    if ((v35 & 2) != 0)
      v38 = _D1.f32[1];
    else
      v38 = v10.f32[1];
    if ((v35 & 2) != 0)
      v37 = v10.f32[1];
    if ((v35 & 1) != 0)
      v39 = v14;
    else
      v39 = v11;
    if ((v35 & 1) == 0)
      v11 = v14;
    if (v20 >= 0.00024414)
    {
      for (i = 0; i != 8; ++i)
      {
        v41 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_20631C020, v10.f32[0]), (float32x4_t)xmmword_20631C030, _D1.f32[0]);
        v42 = (int8x16_t)vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_20631C020, v38), (float32x4_t)xmmword_20631C030, v37);
        *(int32x2_t *)v76 = vzip1_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)v42.i8);
        *(int32x2_t *)&v76[4] = vzip2_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)v42.i8);
        v42.i64[0] = vextq_s8(v42, v42, 8uLL).u64[0];
        v41.i64[0] = vextq_s8(v41, v41, 8uLL).u64[0];
        *(int32x2_t *)&v76[8] = vzip1_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)v42.i8);
        *(int32x2_t *)&v76[12] = vzip2_s32(*(int32x2_t *)v41.i8, *(int32x2_t *)v42.i8);
        v43 = vmlaq_n_f32(vmulq_n_f32((float32x4_t)xmmword_20631C020, v39), (float32x4_t)xmmword_20631C030, v11);
        *(_QWORD *)&v76[6] = v43.u32[1];
        *(_QWORD *)&v76[10] = v43.u32[2];
        *(_QWORD *)&v76[2] = v43.u32[0];
        *(_QWORD *)&v76[14] = v43.u32[3];
        v44 = v10.f32[0] - _D1.f32[0];
        v45 = v38 - v37;
        v46 = v39 - v11;
        v47 = (float)((float)(v45 * v45) + (float)(v44 * v44)) + (float)(v46 * v46);
        if (v47 < 0.00024414)
          break;
        if (a4)
        {
          v48 = 3.0 / v47;
          v49 = v44 * v48;
          v50 = v45 * v48;
          v51 = v46 * v48;
          v52 = 0.0;
          v53 = 0.0;
          v54 = a5;
          v55 = a4;
          v56 = 0.0;
          v57 = 0.0;
          v58 = 0.0;
          v59 = 0.0;
          v60 = 0.0;
          v61 = 0.0;
          do
          {
            v62 = *v54++;
            v63 = (float *)(result + 16 * v62);
            v64 = *v63;
            v65 = v63[1];
            v66 = v63[2];
            v67 = (float)((float)(v50 * (float)(v65 - v37)) + (float)((float)(*v63 - _D1.f32[0]) * v49))
                + (float)((float)(v66 - v11) * v51);
            if (v67 <= 0.0)
            {
              v68 = 0;
            }
            else if (v67 >= 3.0)
            {
              v68 = 3;
            }
            else
            {
              v68 = (float)(v67 + 0.5);
            }
            v69 = (float *)&v76[4 * v68];
            v70 = *v69 - v64;
            v71 = v69[1] - v65;
            v72 = v69[2] - v66;
            v73 = pC4[v68];
            v74 = pD4[v68];
            v53 = v53 + (float)((float)(v73 * 0.125) * v73);
            v59 = v59 + (float)((float)(v73 * 0.125) * v70);
            v60 = v60 + (float)((float)(v73 * 0.125) * v71);
            v61 = v61 + (float)((float)(v73 * 0.125) * v72);
            v52 = v52 + (float)((float)(v74 * 0.125) * v74);
            v56 = v56 + (float)((float)(v74 * 0.125) * v70);
            v57 = v57 + (float)((float)(v74 * 0.125) * v71);
            v58 = v58 + (float)((float)(v74 * 0.125) * v72);
            --v55;
          }
          while (v55);
          if (v53 > 0.0)
          {
            _D1.f32[0] = _D1.f32[0] + (float)(v59 * (float)(-1.0 / v53));
            v37 = v37 + (float)(v60 * (float)(-1.0 / v53));
            v11 = v11 + (float)(v61 * (float)(-1.0 / v53));
          }
          if (v52 > 0.0)
          {
            v75 = -1.0 / v52;
            v10.f32[0] = v10.f32[0] + (float)(v56 * v75);
            v38 = v38 + (float)(v57 * v75);
            v39 = v39 + (float)(v58 * v75);
          }
        }
        else
        {
          v61 = 0.0;
          v60 = 0.0;
          v59 = 0.0;
          v58 = 0.0;
          v57 = 0.0;
          v56 = 0.0;
        }
        if ((float)(v59 * v59) < 0.000015259
          && (float)(v60 * v60) < 0.000015259
          && (float)(v61 * v61) < 0.000015259
          && (float)(v56 * v56) < 0.000015259
          && (float)(v57 * v57) < 0.000015259
          && (float)(v58 * v58) < 0.000015259)
        {
          break;
        }
      }
    }
    *(_DWORD *)a2 = _D1.i32[0];
    *(float *)(a2 + 4) = v37;
    *(float *)(a2 + 8) = v11;
    *(_DWORD *)a3 = v10.i32[0];
    *(float *)(a3 + 4) = v38;
    *(float *)(a3 + 8) = v39;
  }
  else
  {
    *(float32x2_t *)a2 = _D1;
    *(float *)(a2 + 8) = v14;
    *(float32x2_t *)a3 = v10;
    *(float *)(a3 + 8) = v11;
  }
  return result;
}

float D3DX_BC7::Encode(uint16x8_t *a1, unsigned int a2, const float *a3)
{
  unsigned __int8 v6;
  const float *v7;
  const float *v8;
  const float *v9;
  float32x4_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  char *v17;
  int8x16_t v18;
  int8x16_t v19;
  uint16x8_t v20;
  double v21;
  int v22;
  float v23;
  BOOL v24;
  BOOL v25;
  unsigned __int8 *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  uint64_t k;
  _BYTE *v32;
  char v33;
  uint64_t i;
  _BYTE *v35;
  char v36;
  uint64_t j;
  _BYTE *v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __int32 *v43;
  _BYTE *v44;
  unint64_t v45;
  uint64_t v46;
  __int32 *v47;
  _QWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t ii;
  _BYTE *v53;
  char v54;
  uint64_t m;
  _BYTE *v56;
  char v57;
  uint64_t n;
  _BYTE *v59;
  char v60;
  int v62;
  unsigned int v63;
  unsigned __int8 v64;
  unsigned __int8 v65;
  _BYTE v66[7];
  _BYTE v67[87];
  _BYTE v68[508];
  int v69;
  uint16x8_t v70;
  uint64_t v71;
  float32x4x4_t v72;
  float32x4x4_t v73;
  float32x4x4_t v74;
  float32x4x4_t v75;
  int8x16x4_t v76;

  v71 = *MEMORY[0x24BDAC8D0];
  v70 = *a1;
  *(_QWORD *)&v67[71] = a3;
  bzero(v66, 0x640uLL);
  v6 = 0;
  v7 = a3;
  v72 = vld4q_f32(v7);
  v7 += 16;
  v73 = vld4q_f32(v7);
  v8 = a3 + 32;
  v74 = vld4q_f32(v8);
  v9 = a3 + 48;
  v75 = vld4q_f32(v9);
  v10 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v11 = (float32x4_t)vdupq_n_s32(0x3C23D70Au);
  *(int16x4_t *)v12.i8 = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v74.val[0]), v10), (float32x4_t)0)));
  v12.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v75.val[0]), v10), (float32x4_t)0)));
  *(int16x4_t *)v13.i8 = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v72.val[0]), v10), (float32x4_t)0)));
  v13.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v73.val[0]), v10), (float32x4_t)0)));
  v76.val[0] = vuzp1q_s8(v13, v12);
  *(int16x4_t *)v14.i8 = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v74.val[1]), v10), (float32x4_t)0)));
  v14.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v75.val[1]), v10), (float32x4_t)0)));
  *(int16x4_t *)v15.i8 = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v72.val[1]), v10), (float32x4_t)0)));
  v15.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v73.val[1]), v10), (float32x4_t)0)));
  v76.val[1] = vuzp1q_s8(v15, v14);
  *(int16x4_t *)v14.i8 = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v74.val[2]), v10), (float32x4_t)0)));
  v14.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v75.val[2]), v10), (float32x4_t)0)));
  *(int16x4_t *)v15.i8 = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v72.val[2]), v10), (float32x4_t)0)));
  v15.u64[1] = (unint64_t)vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v73.val[2]), v10), (float32x4_t)0)));
  v76.val[2] = vuzp1q_s8(v15, v14);
  v16 = vmlaq_f32(v11, v10, v72.val[3]);
  v72.val[2] = vmaxnmq_f32(vminnmq_f32(v16, v10), (float32x4_t)0);
  *(int16x4_t *)v72.val[1].f32 = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v75.val[3]), v10), (float32x4_t)0)));
  *(int16x4_t *)v72.val[0].f32 = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v74.val[3]), v10), (float32x4_t)0)));
  *(int8x8_t *)v16.f32 = vuzp1_s8(*(int8x8_t *)v72.val[0].f32, *(int8x8_t *)v72.val[1].f32);
  v72.val[0].i64[1] = v72.val[1].i64[0];
  *(int16x4_t *)v72.val[1].f32 = vmovn_s32(vcvtq_s32_f32(v72.val[2]));
  *(int16x4_t *)&v72.val[1].u32[2] = vmovn_s32(vcvtq_s32_f32(vmaxnmq_f32(vminnmq_f32(vmlaq_f32(v11, v10, v73.val[3]), v10), (float32x4_t)0)));
  v76.val[3] = vuzp1q_s8((int8x16_t)v72.val[1], (int8x16_t)v72.val[0]);
  v17 = v67;
  vst4q_s8(v17, v76);
  v72.val[0] = (float32x4_t)vmovl_u8(*(uint8x8_t *)v16.f32);
  v20 = vmovl_u8((uint8x8_t)vuzp1_s8(*(int8x8_t *)v72.val[1].f32, *(int8x8_t *)&v72.val[1].u32[2]));
  v18 = (int8x16_t)vmovl_high_u16(v20);
  v19 = vandq_s8(v18, (int8x16_t)vmovl_high_u16((uint16x8_t)v72.val[0]));
  v72.val[0] = (float32x4_t)vandq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8(*(int8x8_t *)v20.i8, *(int8x8_t *)v72.val[0].f32)), v19);
  v20.i64[0] = vextq_s8((int8x16_t)v72.val[0], (int8x16_t)v72.val[0], 8uLL).u64[0];
  v21 = COERCE_DOUBLE(vand_s8(*(int8x8_t *)v72.val[0].f32, *(int8x8_t *)v20.i8));
  v22 = LODWORD(v21) & HIDWORD(v21);
  v65 = 0;
  v23 = 3.4028e38;
  v62 = LODWORD(v21) & HIDWORD(v21);
  v63 = a2;
  do
  {
    if (a2 & 0x80000 | v6 & 0xFD && ((v6 != 1) & (a2 >> 21)) == 0)
    {
      v24 = v22 == 255 && v6 == 7;
      v25 = v24;
      if (((v6 != 6) & (a2 >> 20)) == 0 && !v25)
      {
        v26 = &D3DX_BC7::ms_aInfo[16 * v6 - v6];
        v27 = 1 << v26[1];
        v28 = v27 >> 2 <= 1 ? 1 : v27 >> 2;
        if (v23 > 0.0)
        {
          v29 = 0;
          v64 = v26[3];
          v30 = v26[4];
          do
          {
            switch(v29)
            {
              case 1uLL:
                for (i = 0; i != 64; i += 4)
                {
                  v35 = &v66[i - 1];
                  v36 = v67[i];
                  v35[1537] = v67[i + 3];
                  v35[1540] = v36;
                }
                break;
              case 2uLL:
                for (j = 0; j != 64; j += 4)
                {
                  v38 = &v66[j - 1];
                  v39 = v67[j + 1];
                  v38[1538] = v67[j + 3];
                  v38[1540] = v39;
                }
                break;
              case 3uLL:
                for (k = 0; k != 64; k += 4)
                {
                  v32 = &v66[k - 1];
                  v33 = v67[k + 2];
                  v32[1539] = v67[k + 3];
                  v32[1540] = v33;
                }
                break;
            }
            if (v23 > 0.0)
            {
              v40 = 0;
              do
              {
                v41 = 0;
                do
                {
                  *(float *)&v21 = D3DX_BC7::RoughMSE(&v65, v41, v40, v21, *(double *)v20.i64, *(double *)v19.i64, *(double *)v18.i64, v16);
                  *(_DWORD *)&v68[4 * v41 + 504] = LODWORD(v21);
                  *(_QWORD *)&v67[8 * v41 + 79] = v41;
                  ++v41;
                }
                while (v27 != v41);
                v42 = 0;
                v43 = &v69;
                v44 = v68;
                v45 = v27 - 1;
                do
                {
                  v46 = v42 + 1;
                  if (v42 + 1 < v27)
                  {
                    v47 = v43;
                    v48 = v44;
                    v49 = v45;
                    do
                    {
                      LODWORD(v21) = *(_DWORD *)&v68[4 * v42 + 504];
                      v20.i32[0] = *v47;
                      if (*(float *)&v21 > *(float *)v47)
                      {
                        *(_DWORD *)&v68[4 * v42 + 504] = v20.i32[0];
                        *v47 = LODWORD(v21);
                        v50 = *(_QWORD *)&v67[8 * v42 + 79];
                        *(_QWORD *)&v67[8 * v42 + 79] = *v48;
                        *v48 = v50;
                      }
                      ++v48;
                      ++v47;
                      --v49;
                    }
                    while (v49);
                  }
                  --v45;
                  v44 += 8;
                  ++v43;
                  ++v42;
                }
                while (v46 != v28);
                if (v23 > 0.0)
                {
                  v51 = 0;
                  do
                  {
                    *(float *)&v21 = D3DX_BC7::Refine((uint64_t)a1, &v65, *(_QWORD *)&v67[8 * v51 + 79], v29, v40);
                    if (*(float *)&v21 < v23)
                    {
                      v20 = *a1;
                      v70 = *a1;
                      v23 = *(float *)&v21;
                    }
                    ++v51;
                  }
                  while (v51 < v28 && v23 > 0.0);
                }
                ++v40;
              }
              while (!(v40 >> v30) && v23 > 0.0);
            }
            switch(v29)
            {
              case 1uLL:
                for (m = 0; m != 64; m += 4)
                {
                  v56 = &v66[m - 1];
                  v57 = v67[m];
                  v56[1537] = v67[m + 3];
                  v56[1540] = v57;
                }
                break;
              case 2uLL:
                for (n = 0; n != 64; n += 4)
                {
                  v59 = &v66[n - 1];
                  v60 = v67[n + 1];
                  v59[1538] = v67[n + 3];
                  v59[1540] = v60;
                }
                break;
              case 3uLL:
                for (ii = 0; ii != 64; ii += 4)
                {
                  v53 = &v66[ii - 1];
                  v54 = v67[ii + 2];
                  v53[1539] = v67[ii + 3];
                  v53[1540] = v54;
                }
                break;
            }
            ++v29;
          }
          while (!(v29 >> v64) && v23 > 0.0);
          v6 = v65;
          v22 = v62;
          a2 = v63;
        }
      }
    }
    v65 = ++v6;
  }
  while (v6 <= 7u && v23 > 0.0);
  *a1 = v70;
  return v23;
}

float D3DX_BC7::RoughMSE(unsigned __int8 *a1, uint64_t a2, uint64_t a3, double a4, double _D1, double a6, double a7, float32x4_t _Q4)
{
  int32x4_t v8;
  int32x4_t v9;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  float v25;
  float *v26;
  float *v27;
  uint64_t v28;
  uint64_t v29;
  _DWORD *v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  uint64_t v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  unsigned int v37;
  float32x2_t *v38;
  float32x2_t v39;
  int8x8_t v40;
  float32x2_t v41;
  float32x2_t v42;
  int8x8_t v43;
  float32x2_t v44;
  int8x8_t v45;
  float32x2_t v46;
  float32x2_t v47;
  int8x8_t v48;
  int8x8_t v49;
  int8x8_t v50;
  int8x8_t v51;
  int8x8_t v52;
  int32x2_t v53;
  uint32x2_t v54;
  uint64_t v55;
  float v56;
  float v57;
  uint64_t *v58;
  uint64_t v59;
  float v60;
  float v61;
  uint64_t v62;
  float32x2_t *v63;
  float v64;
  float v65;
  float32x2_t v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float32x2_t v71;
  float v72;
  float v73;
  float32x2_t v74;
  float32x4_t v75;
  float v76;
  uint64_t *v77;
  uint64_t v78;
  float v79;
  float v80;
  float v81;
  uint64_t v82;
  float32x2_t *v83;
  float32x2_t v84;
  float v85;
  float v86;
  float v87;
  int32x2_t v88;
  int32x2_t v89;
  float32x4_t v90;
  float32x4_t v91;
  int32x4_t v92;
  float32x4_t v93;
  char v94;
  uint64_t v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float v102;
  float v103;
  float v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  uint64_t *v113;
  uint64_t v114;
  float v115;
  float32x4_t v116;
  uint64_t v117;
  float32x4_t v118;
  float v119;
  unsigned int v120;
  int8x16_t v122;
  float32x4_t v123;
  float32x2_t v124;
  float v131;
  float v132;
  float v133;
  float v134;
  float v135;
  float v136;
  float v137;
  float v138;
  float v140;
  float v141;
  float v142;
  float v143;
  float v144;
  float v145;
  float v146;
  int v147;
  float v148;
  int v149;
  float v150;
  int v151;
  float v152;
  int v153;
  int *v154;
  float v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  float *v161;
  unint64_t v162;
  float *v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  float *v168;
  unint64_t v169;
  unsigned __int8 *v170;
  float *v171;
  uint64_t v172;
  __int32 *v173;
  float v174;
  uint64_t v176;
  double v178;
  unsigned __int8 *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182[16];
  float v183[64];
  unsigned int v184;
  float v185;
  float v186;
  float v187;
  float32x4_t v188;
  uint64_t v189;
  float32x4x4_t v190;

  v11 = 0;
  v189 = *MEMORY[0x24BDAC8D0];
  v180 = (uint64_t)&a1[24 * a2 + 1];
  v12 = (unsigned __int8 *)&D3DX_BC7::ms_aInfo + 16 * *a1 - *a1;
  v13 = v12 + 6;
  v16 = *v12;
  v14 = v12 + 5;
  v15 = v16;
  if (a3)
    v17 = v13;
  else
    v17 = v14;
  v18 = *v17;
  if (!a3)
    v14 = v13;
  v19 = *v14;
  v181 = v15;
  v176 = v15 << 10;
  v20 = &bc67_partitionTable[1024 * v15 + 16 * a2];
  __asm { FMOV            V0.2S, #1.0 }
  v178 = *(double *)&_D0;
  v25 = 1.0;
  v26 = pC4;
  v27 = pC4;
  do
  {
    v28 = 0;
    v29 = 0;
    do
    {
      if (v11 == v20[v28])
        v182[v29++] = v28;
      ++v28;
    }
    while (v28 != 16);
    if (v29 == 1)
    {
      v33 = &a1[4 * v182[0] + 1537];
      v30 = (_DWORD *)(v180 + 8 * v11);
      *v30 = *(_DWORD *)v33;
      v32 = *(_DWORD *)v33;
      goto LABEL_15;
    }
    if (v29 == 2)
    {
      v30 = (_DWORD *)(v180 + 8 * v11);
      v31 = v182[1];
      *v30 = *(_DWORD *)&a1[4 * v182[0] + 1537];
      v32 = *(_DWORD *)&a1[4 * v31 + 1537];
LABEL_15:
      v30[1] = v32;
      goto LABEL_109;
    }
    if ((_DWORD)v19)
    {
      v34 = 0;
      v35 = 0;
      v36 = -1;
      do
      {
        v37 = a1[4 * v182[v34] + 1540];
        if (v37 < v36)
          v36 = a1[4 * v182[v34] + 1540];
        if (v35 <= v37)
          v35 = a1[4 * v182[v34] + 1540];
        ++v34;
      }
      while (v34 != 16);
      OptimizeRGB(*((_QWORD *)a1 + 201), (uint64_t)v183, (uint64_t)&v184, v29, v182);
      v38 = (float32x2_t *)(v180 + 8 * v11);
      v39 = vmaxnm_f32((float32x2_t)__PAIR64__(v184, LODWORD(v183[0])), 0);
      __asm { FMOV            V4.2S, #1.0 }
      v40 = (int8x8_t)vcgt_f32(*(float32x2_t *)_Q4.f32, v39);
      v41 = (float32x2_t)vdup_n_s32(0x437F0000u);
      v42 = vmaxnm_f32((float32x2_t)__PAIR64__(LODWORD(v185), LODWORD(v183[1])), 0);
      v43 = (int8x8_t)vcgt_f32(*(float32x2_t *)_Q4.f32, v42);
      v44 = vmaxnm_f32((float32x2_t)__PAIR64__(LODWORD(v186), LODWORD(v183[3])), 0);
      v45 = (int8x8_t)vcgt_f32(*(float32x2_t *)_Q4.f32, v44);
      v46 = vmaxnm_f32((float32x2_t)__PAIR64__(LODWORD(v187), LODWORD(v183[2])), 0);
      *(int32x2_t *)_Q4.f32 = vcgt_f32(*(float32x2_t *)_Q4.f32, v46);
      v47 = (float32x2_t)vdup_n_s32(0x3C23D70Au);
      v48 = (int8x8_t)vmla_f32(v47, v41, v39);
      v49 = (int8x8_t)vmla_f32(v47, v41, v42);
      v50 = (int8x8_t)vmla_f32(v47, v41, v44);
      v51 = (int8x8_t)vmla_f32(v47, v41, v46);
      v52 = (int8x8_t)vdup_n_s32(0x437F028Fu);
      a7 = COERCE_DOUBLE(vcvt_s32_f32((float32x2_t)vbsl_s8(v40, v48, v52)));
      v53 = vcvt_s32_f32((float32x2_t)vbsl_s8(v43, v49, v52));
      v54 = (uint32x2_t)vcvt_s32_f32((float32x2_t)vbsl_s8(v45, v50, v52));
      a6 = COERCE_DOUBLE(vshl_u32((uint32x2_t)vcvt_s32_f32((float32x2_t)vbsl_s8(*(int8x8_t *)_Q4.f32, v51, v52)), (uint32x2_t)0x1800000010));
      _Q4.i64[0] = 0x1000000018;
      _D1 = COERCE_DOUBLE(vorr_s8(vorr_s8(*(int8x8_t *)&a6, (int8x8_t)vshl_u32(v54, (uint32x2_t)0x1000000018)), *(int8x8_t *)&a7));
      _D0 = (float32x2_t)vorr_s8(*(int8x8_t *)&_D1, (int8x8_t)vshl_n_s32(v53, 8uLL));
      *v38 = _D0;
      v38->i8[3] = v36;
      v38->i8[7] = v35;
      v26 = pC4;
      v27 = pC4;
    }
    else
    {
      v55 = *((_QWORD *)a1 + 201);
      if (v29)
      {
        __asm { FMOV            V1.2S, #1.0 }
        *(double *)&_D0 = 0.0;
        v56 = 0.0;
        v57 = 1.0;
        v58 = v182;
        v59 = v29;
        v60 = 1.0;
        v61 = 0.0;
        do
        {
          v62 = *v58++;
          v63 = (float32x2_t *)(v55 + 16 * v62);
          v64 = v63[1].f32[0];
          v65 = v63[1].f32[1];
          if (v64 < v60)
            v60 = v63[1].f32[0];
          if (v65 < v57)
            v57 = v63[1].f32[1];
          _D1 = COERCE_DOUBLE(vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)&_D1, *v63), (int8x8_t)*v63, *(int8x8_t *)&_D1));
          _D0 = (float32x2_t)vbsl_s8((int8x8_t)vcgt_f32(*v63, _D0), (int8x8_t)*v63, (int8x8_t)_D0);
          if (v64 > v61)
            v61 = v63[1].f32[0];
          if (v65 > v56)
            v56 = v63[1].f32[1];
          --v59;
        }
        while (v59);
      }
      else
      {
        *(double *)&_D0 = 0.0;
        v60 = 1.0;
        v61 = 0.0;
        v56 = 0.0;
        _D1 = v178;
        v57 = 1.0;
      }
      v66 = vsub_f32(_D0, *(float32x2_t *)&_D1);
      v67 = v61 - v60;
      v68 = v56 - v57;
      *(float32x2_t *)_Q4.f32 = vmul_f32(v66, v66);
      v69 = (float)(vaddv_f32(*(float32x2_t *)_Q4.f32) + (float)(v67 * v67)) + (float)(v68 * v68);
      v70 = _D0.f32[1];
      _Q4.i32[0] = HIDWORD(_D1);
      if (v69 >= 1.1755e-38)
      {
        if (v29)
        {
          v71 = vmul_n_f32(v66, v25 / v69);
          v72 = v67 * (float)(v25 / v69);
          v73 = v68 * (float)(v25 / v69);
          v74 = vmul_f32(vadd_f32(*(float32x2_t *)&_D1, _D0), (float32x2_t)0x3F0000003F000000);
          v75 = 0uLL;
          v76 = 0.0;
          v77 = v182;
          v78 = v29;
          v79 = 0.0;
          v80 = 0.0;
          v81 = 0.0;
          do
          {
            v82 = *v77++;
            v83 = (float32x2_t *)(v55 + 16 * v82);
            v84 = vmul_f32(v71, vsub_f32(*v83, v74));
            *(float *)v8.i32 = v72 * (float)(v83[1].f32[0] - (float)((float)(v61 + v60) * 0.5));
            *(float *)v9.i32 = v73 * (float)(v83[1].f32[1] - (float)((float)(v56 + v57) * 0.5));
            v85 = vaddv_f32(v84);
            v76 = v76
                + (float)((float)((float)(v85 + *(float *)v8.i32) + *(float *)v9.i32)
                        * (float)((float)(v85 + *(float *)v8.i32) + *(float *)v9.i32));
            v86 = (float)(v85 + *(float *)v8.i32) - *(float *)v9.i32;
            v87 = v85 - *(float *)v8.i32;
            v84.f32[0] = v84.f32[0] - v84.f32[1];
            v88 = (int32x2_t)vadd_f32(v84, *(float32x2_t *)v8.i8);
            v79 = v79 + (float)(v86 * v86);
            v89 = vdup_lane_s32((int32x2_t)vsub_f32(v84, *(float32x2_t *)v8.i8), 0);
            *(int32x2_t *)v90.f32 = vdup_lane_s32(v88, 0);
            v80 = v80 + (float)((float)(v87 + *(float *)v9.i32) * (float)(v87 + *(float *)v9.i32));
            *(int32x2_t *)&v90.u32[2] = v89;
            v91 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.i8, 0);
            v81 = v81 + (float)((float)(v87 - *(float *)v9.i32) * (float)(v87 - *(float *)v9.i32));
            v9 = (int32x4_t)vaddq_f32(v90, v91);
            v92 = (int32x4_t)vsubq_f32(v90, v91);
            v8 = vrev64q_s32(v9);
            v93 = (float32x4_t)vtrn2q_s32(v8, v92);
            v75 = vmlaq_f32(v75, v93, v93);
            --v78;
          }
          while (v78);
        }
        else
        {
          v75 = 0uLL;
          v81 = 0.0;
          v80 = 0.0;
          v79 = 0.0;
          v76 = 0.0;
        }
        v94 = 0;
        v185 = v79;
        v186 = v80;
        v187 = v81;
        v95 = 1;
        v188 = v75;
        do
        {
          if (*((float *)&v184 + v95) > v76)
          {
            v94 = v95;
            v76 = *((float *)&v184 + v95);
          }
          ++v95;
        }
        while (v95 != 8);
        if ((v94 & 4) != 0)
          v96 = *((float *)&_D1 + 1);
        else
          v96 = _D0.f32[1];
        if ((v94 & 4) != 0)
          _Q4.f32[0] = _D0.f32[1];
        if ((v94 & 2) != 0)
          v97 = v60;
        else
          v97 = v61;
        if ((v94 & 2) != 0)
          v60 = v61;
        if ((v94 & 1) != 0)
          v98 = v57;
        else
          v98 = v56;
        if ((v94 & 1) != 0)
          v57 = v56;
        if (v69 >= 0.00024414)
        {
          v99 = 0;
          v25 = 1.0;
          do
          {
            v100 = *(float32x4_t *)(v26 + 12);
            v101 = *(float32x4_t *)(v27 + 8);
            v190.val[0] = vmlaq_n_f32(vmulq_n_f32(v101, _D0.f32[0]), v100, *(float *)&_D1);
            v190.val[1] = vmlaq_n_f32(vmulq_n_f32(v101, v96), v100, _Q4.f32[0]);
            v190.val[2] = vmlaq_n_f32(vmulq_n_f32(v101, v97), v100, v60);
            v190.val[3] = vmlaq_n_f32(vmulq_n_f32(v101, v98), v100, v57);
            vst4q_f32(v183, v190);
            v102 = _D0.f32[0] - *(float *)&_D1;
            v103 = v96 - _Q4.f32[0];
            v104 = v97 - v60;
            v105 = v98 - v57;
            v106 = (float)((float)((float)(v102 * v102) + (float)(v103 * v103)) + (float)(v104 * v104))
                 + (float)(v105 * v105);
            if (v106 < 0.00024414)
              break;
            if (v29)
            {
              v107 = 3.0 / v106;
              v108 = v102 * (float)(3.0 / v106);
              v109 = v103 * v107;
              v110 = v104 * v107;
              v111 = v105 * v107;
              _Q16 = 0uLL;
              v113 = v182;
              v114 = v29;
              v115 = 0.0;
              v116 = 0uLL;
              do
              {
                v117 = *v113++;
                v118 = *(float32x4_t *)(v55 + 16 * v117);
                v119 = (float)((float)((float)(v109
                                             * (float)(COERCE_FLOAT(HIDWORD(*(_QWORD *)(v55 + 16 * v117))) - _Q4.f32[0]))
                                     + (float)(v108 * (float)(v118.f32[0] - *(float *)&_D1)))
                             + (float)(v110 * (float)(COERCE_FLOAT(*(_QWORD *)(v55 + 16 * v117 + 8)) - v60)))
                     + (float)(v111 * (float)(v118.f32[3] - v57));
                if (v119 <= 0.0)
                {
                  v120 = 0;
                }
                else if (v119 >= 3.0)
                {
                  v120 = 3;
                }
                else
                {
                  v120 = (float)(v119 + 0.5);
                }
                _S26 = LODWORD(pD4[v120]);
                v122 = (int8x16_t)vrev64q_s32((int32x4_t)vsubq_f32(*(float32x4_t *)&v183[4 * v120], v118));
                v123 = (float32x4_t)vextq_s8(v122, v122, 8uLL);
                v124.f32[0] = pC4[v120];
                v124.i32[1] = _S26;
                _D27 = vmul_f32(v124, (float32x2_t)0x3E0000003E000000);
                v115 = vmlas_n_f32(v115, pC4[v120], _D27.f32[0]);
                __asm { FMLA            S18, S26, V27.S[1] }
                v116 = vmlaq_lane_f32(v116, v123, _D27, 1);
                _Q16 = vmlaq_n_f32(_Q16, v123, _D27.f32[0]);
                --v114;
              }
              while (v114);
              _S19 = -1.0 / v115;
              __asm
              {
                FMLA            S20, S19, V16.S[3]
                FMLA            S21, S19, V16.S[2]
                FMLA            S22, S19, V16.S[1]
              }
              v131 = vmlas_n_f32(v57, -1.0 / v115, _Q16.f32[0]);
              if (!(_NF ^ _VF | _ZF))
              {
                *(float *)&_D1 = _S20;
                _Q4.f32[0] = _S21;
                v60 = _S22;
                v57 = v131;
              }
              v132 = _Q16.f32[1];
              v133 = _Q16.f32[3];
              v134 = _Q16.f32[2];
              v135 = v116.f32[1];
              v136 = v116.f32[3];
              v137 = v116.f32[2];
              if (_S18 > 0.0)
              {
                v138 = -1.0 / _S18;
                _D0.f32[0] = _D0.f32[0] + (float)(v116.f32[3] * v138);
                v96 = v96 + (float)(v116.f32[2] * v138);
                v97 = v97 + (float)(v116.f32[1] * v138);
                v98 = v98 + (float)(v116.f32[0] * v138);
              }
            }
            else
            {
              v136 = 0.0;
              v137 = 0.0;
              v135 = 0.0;
              v116.i32[0] = 0;
              v133 = 0.0;
              v134 = 0.0;
              v132 = 0.0;
              _Q16.i32[0] = 0;
            }
            _NF = (float)((float)((float)((float)(v134 * v134) + (float)(v133 * v133)) + (float)(v132 * v132))
                        + (float)(_Q16.f32[0] * _Q16.f32[0])) < 0.000015259
               && (float)((float)((float)((float)(v137 * v137) + (float)(v136 * v136)) + (float)(v135 * v135))
                        + (float)(v116.f32[0] * v116.f32[0])) < 0.000015259;
            if (_NF)
              break;
            ++v99;
          }
          while (v99 != 8);
        }
        else
        {
          v25 = 1.0;
        }
        v56 = v98;
        v61 = v97;
        v70 = v96;
      }
      v140 = fmaxf(*(float *)&_D1, 0.0);
      _Q4.f32[0] = fmaxf(_Q4.f32[0], 0.0);
      v141 = fmaxf(v60, 0.0);
      *(float *)&a7 = fmaxf(v57, 0.0);
      v142 = fmaxf(_D0.f32[0], 0.0);
      v143 = fmaxf(v70, 0.0);
      v144 = fmaxf(v61, 0.0);
      v145 = fmaxf(v56, 0.0);
      if (v140 >= v25)
        v146 = 255.01;
      else
        v146 = (float)(v140 * 255.0) + 0.01;
      v147 = (int)v146;
      if (_Q4.f32[0] >= v25)
        v148 = 255.01;
      else
        v148 = (float)(_Q4.f32[0] * 255.0) + 0.01;
      v149 = (int)v148;
      *(float *)&_D1 = (float)(v145 * 255.0) + 0.01;
      if (v141 >= v25)
        v150 = 255.01;
      else
        v150 = (float)(v141 * 255.0) + 0.01;
      v151 = (int)v150;
      if (*(float *)&a7 >= v25)
        v152 = 255.01;
      else
        v152 = (float)(*(float *)&a7 * 255.0) + 0.01;
      v153 = ((int)v152 << 24) | (v151 << 16) | (v149 << 8) | v147;
      v154 = (int *)(v180 + 8 * v11);
      if (v142 >= v25)
        v155 = 255.01;
      else
        v155 = (float)(v142 * 255.0) + 0.01;
      v156 = (int)v155;
      if (v143 >= v25)
        _D0.f32[0] = 255.01;
      else
        _D0.f32[0] = (float)(v143 * 255.0) + 0.01;
      if (v144 >= v25)
        *(float *)&a6 = 255.01;
      else
        *(float *)&a6 = (float)(v144 * 255.0) + 0.01;
      if (v145 >= v25)
        *(float *)&_D1 = 255.01;
      *v154 = v153;
      v154[1] = ((int)*(float *)&_D1 << 24) | ((int)*(float *)&a6 << 16) | ((int)_D0.f32[0] << 8) | v156;
    }
LABEL_109:
    _ZF = v11++ == v181;
  }
  while (!_ZF);
  v179 = a1;
  v157 = 1 << v18;
  if ((_DWORD)v19)
  {
    v158 = 0;
    if ((v157 & 0xFE) != 0)
      v159 = (1 << v18);
    else
      v159 = 1;
    if (((1 << v19) & 0xFE) != 0)
      v160 = (1 << v19);
    else
      v160 = 1;
    v161 = v183;
    do
    {
      if (v18 <= 7)
      {
        v162 = 0;
        v163 = v161;
        do
          LDRColorA::InterpolateRGB((unsigned __int8 *)(v180 + 8 * v158), (unsigned __int8 *)(v180 + 8 * v158 + 4), v162++, v18, v163++);
        while (v159 != v162);
      }
      if (v19 <= 7)
      {
        v164 = 0;
        v165 = (uint64_t)v161;
        do
        {
          LDRColorA::InterpolateA(v180 + 8 * v158, v180 + 8 * v158 + 4, v164++, v19, v165);
          v165 += 4;
        }
        while (v160 != v164);
      }
      v161 += 16;
      _ZF = v158++ == v181;
    }
    while (!_ZF);
  }
  else
  {
    v166 = 0;
    if ((v157 & 0xFE) != 0)
      v167 = (1 << v18);
    else
      v167 = 1;
    v168 = v183;
    do
    {
      if (v18 <= 7)
      {
        v169 = 0;
        v170 = (unsigned __int8 *)(v180 + 8 * v166);
        v171 = v168;
        do
        {
          LDRColorA::InterpolateRGB(v170, v170 + 4, v169, v18, v171);
          LDRColorA::InterpolateA((uint64_t)v170, (uint64_t)(v170 + 4), v169++, v18, (uint64_t)v171++);
        }
        while (v167 != v169);
      }
      v168 += 16;
      _ZF = v166++ == v181;
    }
    while (!_ZF);
  }
  v172 = 0;
  v173 = (__int32 *)(v179 + 1537);
  v174 = 0.0;
  do
  {
    _D0.f32[0] = ComputeError(v173, (uint64_t)&v183[16 * (unint64_t)bc67_partitionTable[16 * a2 + v176 + v172]], v18, v19, 0, 0, (uint8x8_t)_D0, _D1, a6, a7, _Q4);
    v174 = v174 + _D0.f32[0];
    ++v172;
    ++v173;
  }
  while (v172 != 16);
  return v174;
}

float D3DX_BC7::Refine(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 a4, uint64_t a5)
{
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  float v16;
  uint64_t v18;
  _QWORD v21[3];
  _QWORD v22[3];
  _DWORD v23[3];
  _DWORD v24[3];
  _DWORD v25[16];
  _BYTE v26[64];
  _DWORD v27[16];
  _BYTE v28[64];
  _QWORD v29[3];
  _QWORD v30[5];

  v8 = 0;
  v30[3] = *MEMORY[0x24BDAC8D0];
  v18 = D3DX_BC7::ms_aInfo[16 * *a2 - *a2];
  v9 = &a2[24 * a3];
  do
  {
    LODWORD(v30[v8 / 8]) = D3DX_BC7::Quantize(&v9[v8 + 1], &D3DX_BC7::ms_aInfo[16 * *a2 - *a2 + 11]);
    v10 = D3DX_BC7::Quantize(&v9[v8 + 5], &D3DX_BC7::ms_aInfo[16 * *a2 - *a2 + 11]);
    HIDWORD(v30[v8 / 8]) = v10;
    v8 += 8;
  }
  while (8 * v18 + 8 != v8);
  D3DX_BC7::FixEndpointPBits(v10, a2, v30, v22);
  D3DX_BC7::AssignIndices(v11, a2, a3, a5, (unsigned __int8 *)v22, (uint64_t)v28, v27, v24);
  v12 = D3DX_BC7::OptimizeEndPoints(a1, a2, a3, a5, (uint64_t)v24, (uint64_t)v22, (uint64_t)v29);
  D3DX_BC7::FixEndpointPBits((uint64_t)v12, a2, v29, v21);
  D3DX_BC7::AssignIndices(v13, a2, a3, a5, (unsigned __int8 *)v21, (uint64_t)v26, v25, v23);
  v14 = 0;
  v15 = 0.0;
  v16 = 0.0;
  do
  {
    v16 = v16 + *(float *)&v24[v14 / 4];
    v15 = v15 + *(float *)&v23[v14 / 4];
    v14 += 4;
  }
  while (4 * v18 + 4 != v14);
  if (v15 >= v16)
  {
    D3DX_BC7::EmitBlock(a1, a2, a3, a4, a5, (uint64_t)v22, (uint64_t)v28, (uint64_t)v27);
    return v16;
  }
  else
  {
    D3DX_BC7::EmitBlock(a1, a2, a3, a4, a5, (uint64_t)v21, (uint64_t)v26, (uint64_t)v25);
  }
  return v15;
}

uint64_t D3DX_BC7::GeneratePaletteQuantized(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, _BYTE *a5)
{
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  uint64_t result;
  unint64_t v18;
  int v19;
  int v20;

  v8 = &D3DX_BC7::ms_aInfo[16 * *a2 - *a2];
  v9 = v8 + 5;
  if (a3)
    v10 = v8 + 6;
  else
    v10 = v8 + 5;
  if (!a3)
    v9 = v8 + 6;
  v11 = *v10;
  v12 = *v9;
  v13 = 1 << v11;
  v20 = D3DX_BC7::Unquantize(a4, v8 + 11);
  v19 = D3DX_BC7::Unquantize(a4 + 4, &D3DX_BC7::ms_aInfo[16 * *a2 - *a2 + 11]);
  if (v12)
  {
    v14 = 0;
    v15 = a5;
    do
    {
      LDRColorA::InterpolateRGB((unsigned __int8 *)&v20, (unsigned __int8 *)&v19, v14++, v11, v15);
      v15 += 4;
    }
    while (v13 != v14);
    v16 = 1;
    do
    {
      result = LDRColorA::InterpolateA((uint64_t)&v20, (uint64_t)&v19, v16 - 1, v12, (uint64_t)a5);
      v18 = v16++ >> v12;
      a5 += 4;
    }
    while (!v18);
  }
  else
  {
    do
    {
      LDRColorA::InterpolateRGB((unsigned __int8 *)&v20, (unsigned __int8 *)&v19, v12, v11, a5);
      result = LDRColorA::InterpolateA((uint64_t)&v20, (uint64_t)&v19, v12++, v11, (uint64_t)a5);
      a5 += 4;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t D3DX_BC7::Unquantize(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;

  v4 = D3DX_BC7::Unquantize((D3DX_BC7 *)*a1, *a2);
  v5 = D3DX_BC7::Unquantize((D3DX_BC7 *)a1[1], a2[1]);
  v6 = D3DX_BC7::Unquantize((D3DX_BC7 *)a1[2], a2[2]);
  if (a2[3])
    v7 = D3DX_BC7::Unquantize((D3DX_BC7 *)a1[3], a2[3]) << 24;
  else
    v7 = -16777216;
  return v7 | (v6 << 16) | (v5 << 8) | v4;
}

float D3DX_BC7::PerturbOne(float a1, uint64_t a2, unsigned __int8 *a3, __int32 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8, uint64_t *a9, char a10)
{
  char v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  _BYTE *v21;
  int v22;
  int v23;
  char v24;
  char v25;
  int v26;
  int v27;
  int v28;
  int v29;
  float v30;
  BOOL v31;
  BOOL v32;
  int v34;
  uint64_t v37;

  v16 = *(_BYTE *)LDRColorA::operator[]((uint64_t)&D3DX_BC7::ms_aInfo[16 * *a3 - *a3 + 11], a7);
  v17 = *a8;
  *a9 = *a8;
  v37 = v17;
  if (a10)
  {
    v18 = (_BYTE *)LDRColorA::operator[]((uint64_t)a9 + 4, a7);
    v19 = (char *)&v37 + 4;
  }
  else
  {
    v18 = (_BYTE *)LDRColorA::operator[]((uint64_t)a9, a7);
    v19 = (char *)&v37;
  }
  v20 = LDRColorA::operator[]((uint64_t)v19, a7);
  v21 = (_BYTE *)v20;
  v22 = 1 << (v16 - 1);
  v23 = 1 << v16;
  do
  {
    v24 = 0;
    v25 = 0;
    v26 = -v22;
    v34 = v22;
    v27 = 2 * v22;
    v28 = -3;
    do
    {
      v29 = v26 + *v18;
      if (v29 >= 0 && v29 < v23)
      {
        *v21 = v29;
        v30 = D3DX_BC7::MapColors(v20, a3, a4, a5, a6, (unsigned __int8 *)&v37, a1);
        v31 = v30 < a1;
        v32 = v30 < a1;
        if (v30 < a1)
          a1 = v30;
        v25 |= v32;
        if (v31)
          v24 = v26;
      }
      v26 += v27;
      v28 += 2;
    }
    while (v28 < 0);
    if ((v25 & 1) != 0)
      *v18 += v24;
    v22 = v34 >> 1;
  }
  while (v34 >= 2);
  return a1;
}

uint64_t LDRColorA::operator[](uint64_t result, uint64_t a2)
{
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      ++result;
      break;
    case 2:
      result += 2;
      break;
    case 3:
      result += 3;
      break;
    default:
      LDRColorA::operator[]();
  }
  return result;
}

{
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      ++result;
      break;
    case 2:
      result += 2;
      break;
    case 3:
      result += 3;
      break;
    default:
      LDRColorA::operator[]();
  }
  return result;
}

float D3DX_BC7::MapColors(uint64_t a1, unsigned __int8 *a2, __int32 *a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, float a7)
{
  unsigned __int8 *v10;
  char *v11;
  char *v12;
  char *v13;
  char v14;
  int v15;
  uint8x8_t v16;
  double v17;
  double v18;
  double v19;
  float32x4_t v20;
  float v21;
  _BYTE v23[64];
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v10 = &D3DX_BC7::ms_aInfo[16 * *a2 - *a2];
  v11 = (char *)(v10 + 6);
  v12 = (char *)(v10 + 5);
  if (a5)
    v13 = v11;
  else
    v13 = v12;
  if (!a5)
    v12 = v11;
  v14 = *v13;
  v15 = *v12;
  D3DX_BC7::GeneratePaletteQuantized(a1, a2, a5, a6, v23);
  v21 = 0.0;
  if (a4)
  {
    while (1)
    {
      *(float *)v16.i32 = ComputeError(a3, (uint64_t)v23, v14, v15, 0, 0, v16, v17, v18, v19, v20);
      v21 = v21 + *(float *)v16.i32;
      if (v21 > a7)
        break;
      ++a3;
      if (!--a4)
        return v21;
    }
    return 3.4028e38;
  }
  return v21;
}

char *D3DX_BC7::Exhaustive(uint64_t a1, unsigned __int8 *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t a6, float *a7, uint64_t *a8)
{
  char *result;
  char v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  signed int v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  unsigned int v27;
  char v28;
  char v29;
  signed int v30;
  unsigned int v31;
  _BYTE *v32;
  float v33;
  BOOL v34;
  signed int v35;
  unsigned int v36;
  _BYTE *v37;
  float v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  unsigned int v42;
  signed int v43;
  __int32 *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  result = (char *)LDRColorA::operator[]((uint64_t)&D3DX_BC7::ms_aInfo[16 * *a2 - *a2 + 11], a6);
  if (*a7 != 0.0)
  {
    v46 = a5;
    v16 = *result;
    v47 = *a8;
    v17 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)a8, a6);
    v45 = a4;
    if (v17 <= 5)
      v17 = 5;
    v18 = v17 - 5;
    v19 = -1 << v16;
    v20 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)a8, a6) + 5;
    v44 = a3;
    if (v20 >= ~v19)
      v21 = ~v19;
    else
      v21 = v20;
    v22 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)a8 + 4, a6);
    if (v22 <= 5)
      v22 = 5;
    v23 = v22 - 5;
    v24 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)a8 + 4, a6) + 5;
    if (v24 >= ~v19)
      v25 = ~v19;
    else
      v25 = v24;
    v26 = *a7;
    v27 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)a8, a6);
    v39 = (uint64_t)a8 + 4;
    v40 = (uint64_t)a8;
    v41 = a7;
    if (v27 <= *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)a8 + 4, a6))
    {
      if (v18 <= v21)
      {
        v28 = 0;
        v29 = 0;
        v35 = v25;
        v43 = v23;
        do
        {
          if ((int)v18 <= v23)
            v36 = v23;
          else
            v36 = v18;
          if ((int)v36 < v35)
          {
            do
            {
              *(_BYTE *)LDRColorA::operator[]((uint64_t)&v47, a6) = v18;
              v37 = (_BYTE *)LDRColorA::operator[]((uint64_t)&v47 + 4, a6);
              *v37 = v36;
              v38 = D3DX_BC7::MapColors((uint64_t)v37, a2, v44, v45, v46, (unsigned __int8 *)&v47, v26);
              v35 = v25;
              if (v38 < v26)
              {
                v29 = v18;
                v28 = v36;
                v26 = v38;
              }
              ++v36;
            }
            while (v36 < v25);
          }
          v34 = v18++ >= v21;
          v23 = v43;
        }
        while (!v34);
        goto LABEL_37;
      }
    }
    else if (v23 < v25)
    {
      v28 = 0;
      v29 = 0;
      v30 = v21;
      v42 = v18;
      do
      {
        if (v23 <= (int)v18)
          v31 = v18;
        else
          v31 = v23;
        if ((int)v31 <= v30)
        {
          do
          {
            *(_BYTE *)LDRColorA::operator[]((uint64_t)&v47, a6) = v31;
            v32 = (_BYTE *)LDRColorA::operator[]((uint64_t)&v47 + 4, a6);
            *v32 = v23;
            v33 = D3DX_BC7::MapColors((uint64_t)v32, a2, v44, v45, v46, (unsigned __int8 *)&v47, v26);
            v30 = v21;
            if (v33 < v26)
            {
              v29 = v31;
              v28 = v23;
              v26 = v33;
            }
            v34 = v31++ >= v21;
          }
          while (!v34);
        }
        ++v23;
        v18 = v42;
      }
      while (v23 != v25);
      goto LABEL_37;
    }
    v29 = 0;
    v28 = 0;
LABEL_37:
    result = (char *)v40;
    if (v26 < *v41)
    {
      *(_BYTE *)LDRColorA::operator[](v40, a6) = v29;
      result = (char *)LDRColorA::operator[](v39, a6);
      *result = v28;
      *v41 = v26;
    }
  }
  return result;
}

_BYTE *D3DX_BC7::OptimizeOne(uint64_t a1, unsigned __int8 *a2, __int32 *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, float a8)
{
  float v8;
  uint64_t v10;
  _BYTE *result;
  float v13;
  float v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _BYTE *v19;
  char v20;
  _BYTE *v21;
  _BYTE *v22;
  float v23;
  _BYTE *i;
  _BYTE *v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  uint64_t v29;
  _BYTE *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float v39[3];

  v8 = a8;
  v10 = 0;
  *a7 = *a6;
  v39[0] = a8;
  v29 = (uint64_t)a7 + 4;
  do
  {
    result = (_BYTE *)LDRColorA::operator[]((uint64_t)&D3DX_BC7::ms_aInfo[16 * *a2 - *a2 + 11], v10);
    if (!*result)
      goto LABEL_15;
    v13 = D3DX_BC7::PerturbOne(v8, a1, a2, a3, a4, a5, v10, a7, &v38, 0);
    v14 = D3DX_BC7::PerturbOne(v8, a1, a2, a3, a4, a5, v10, a7, &v37, 1);
    v15 = (_BYTE *)LDRColorA::operator[]((uint64_t)a7, v10);
    v16 = LDRColorA::operator[](v29, v10);
    v17 = (_BYTE *)LDRColorA::operator[]((uint64_t)&v38, v10);
    v18 = LDRColorA::operator[]((uint64_t)&v38 + 4, v10);
    v34 = (_BYTE *)v18;
    if (v13 >= v14)
    {
      v21 = (_BYTE *)v18;
      result = (_BYTE *)a1;
      if (v14 >= v8)
        goto LABEL_15;
      v22 = (_BYTE *)v16;
      v27 = v17;
      v28 = v15;
      v20 = 0;
      v17 = v21;
      v19 = v22;
      v15 = v22;
      v8 = v14;
    }
    else
    {
      result = (_BYTE *)a1;
      if (v13 >= v8)
        goto LABEL_15;
      v19 = (_BYTE *)v16;
      v20 = 1;
      v27 = v17;
      v28 = v15;
      v8 = v13;
    }
    *v15 = *v17;
    v23 = D3DX_BC7::PerturbOne(v8, (uint64_t)result, a2, a3, a4, a5, v10, a7, &v36, v20);
    for (i = v34; v23 < v8; i = v34)
    {
      v8 = v23;
      if (v20)
        v25 = v19;
      else
        v25 = v28;
      if (!v20)
        i = v27;
      *v25 = *i;
      v20 = 1 - v20;
      v23 = D3DX_BC7::PerturbOne(v23, a1, a2, a3, a4, a5, v10, a7, &v36, v20);
    }
LABEL_15:
    ++v10;
  }
  while (v10 != 4);
  v26 = 0;
  v39[0] = v8;
  do
    result = D3DX_BC7::Exhaustive((uint64_t)result, a2, a3, a4, a5, v26++, v39, a7);
  while (v26 != 4);
  return result;
}

_BYTE *D3DX_BC7::OptimizeEndPoints(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *result;
  __int32 v20[16];
  uint64_t v21;

  v13 = 0;
  v21 = *MEMORY[0x24BDAC8D0];
  v14 = D3DX_BC7::ms_aInfo[16 * *a2 - *a2];
  v15 = &bc67_partitionTable[1024 * v14 + 16 * a3];
  do
  {
    v16 = 0;
    v17 = 0;
    do
    {
      if (v13 == v15[v16])
        v20[v17++] = *(_DWORD *)&a2[4 * v16 + 1537];
      ++v16;
    }
    while (v16 != 16);
    result = D3DX_BC7::OptimizeOne(a1, a2, v20, v17, a4, (uint64_t *)(a6 + 8 * v13), (uint64_t *)(a7 + 8 * v13), *(float *)(a5 + 4 * v13));
  }
  while (v13++ != v14);
  return result;
}

void D3DX_BC7::AssignIndices(uint64_t PaletteQuantized, unsigned __int8 *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, _DWORD *a7, _DWORD *a8)
{
  unsigned __int8 *v11;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  _DWORD *v24;
  uint8x8_t v25;
  double v26;
  double v27;
  double v28;
  float32x4_t v29;
  uint64_t v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  unsigned int v33;
  uint64_t v34;
  int32x4_t v35;
  uint64_t v36;
  unsigned __int8 *v37;
  unsigned __int8 v38;
  __int16 v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 v42;
  BOOL v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  int v47;
  char v48;
  unsigned int v49;
  uint64_t v51;
  _BYTE v53[192];
  uint64_t v54;

  v11 = a5;
  v14 = 0;
  v54 = *MEMORY[0x24BDAC8D0];
  v15 = &D3DX_BC7::ms_aInfo[16 * *a2 - *a2];
  v16 = v15 + 6;
  v19 = *v15;
  v17 = v15 + 5;
  v18 = v19;
  if (a4)
    v20 = (char *)v16;
  else
    v20 = (char *)v17;
  v21 = *v20;
  if (!a4)
    v17 = v16;
  v47 = *v17;
  v48 = v21;
  v22 = (1 << v21);
  v45 = (1 << v47);
  v51 = v18;
  v23 = (v18 << 6) + 64;
  v24 = a8;
  do
  {
    PaletteQuantized = D3DX_BC7::GeneratePaletteQuantized(PaletteQuantized, a2, a4, v11, &v53[v14]);
    *v24++ = 0;
    v14 += 64;
    v11 += 8;
  }
  while (v23 != v14);
  v30 = 0;
  v49 = v22 >> 1;
  v46 = v51 << 10;
  v31 = &bc67_partitionTable[1024 * v51 + 16 * a3];
  v32 = a2 + 1537;
  do
  {
    v33 = *v31++;
    *(float *)v25.i32 = ComputeError((__int32 *)&v32[v30 * 4], (uint64_t)&v53[64 * (unint64_t)v33], v48, v47, (_DWORD *)(a6 + v30 * 4), &a7[v30], v25, v26, v27, v28, v29);
    LODWORD(v26) = a8[v33];
    *(float *)v25.i32 = *(float *)v25.i32 + *(float *)&v26;
    a8[v33] = v25.i32[0];
    ++v30;
  }
  while (v30 != 16);
  v34 = 0;
  if (v47)
  {
    v35 = vdupq_n_s32(v45);
    do
    {
      if ((*(_DWORD *)(a6 + 4 * bc67_fixups[192 * v51 + 3 * a3 + v34]) & v49) != 0)
      {
        v36 = 0;
        v37 = &a5[8 * v34];
        v38 = *v37;
        *v37 = v37[4];
        v37[4] = v38;
        v39 = *(_WORD *)(v37 + 1);
        *(_WORD *)(v37 + 1) = *(_WORD *)(v37 + 5);
        *(_WORD *)(v37 + 5) = v39;
        do
        {
          if (v34 == bc67_partitionTable[16 * a3 + v46 + v36])
            *(_DWORD *)(a6 + 4 * v36) = v22 + ~*(_DWORD *)(a6 + 4 * v36);
          ++v36;
        }
        while (v36 != 16);
      }
      if ((*a7 & (v45 >> 1)) != 0)
      {
        v40 = 0;
        v41 = &a5[8 * v34];
        v42 = v41[3];
        v41[3] = v41[7];
        v41[7] = v42;
        do
        {
          *(int32x4_t *)&a7[v40] = vaddq_s32(v35, (int32x4_t)vmvnq_s8(*(int8x16_t *)&a7[v40]));
          v40 += 4;
        }
        while (v40 != 16);
      }
      v43 = v34++ == v51;
    }
    while (!v43);
  }
  else
  {
    do
    {
      if ((*(_DWORD *)(a6 + 4 * bc67_fixups[192 * v51 + 3 * a3 + v34]) & v49) != 0)
      {
        v44 = 0;
        *(int32x2_t *)&a5[8 * v34] = vrev64_s32(*(int32x2_t *)&a5[8 * v34]);
        do
        {
          if (v34 == bc67_partitionTable[16 * a3 + v46 + v44])
            *(_DWORD *)(a6 + 4 * v44) = v22 + ~*(_DWORD *)(a6 + 4 * v44);
          ++v44;
        }
        while (v44 != 16);
      }
      v43 = v34++ == v51;
    }
    while (!v43);
  }
}

float ComputeError(__int32 *a1, uint64_t a2, char a3, int a4, _DWORD *a5, _DWORD *a6, uint8x8_t a7, double a8, double a9, double a10, float32x4_t a11)
{
  unint64_t v11;
  uint16x4_t v12;
  int8x16_t v13;
  float32x4_t v14;
  float32x4_t v15;
  uint64_t v16;
  unsigned int v17;
  float v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float v23;
  uint64_t v24;
  unsigned int v25;
  float v26;
  float32x4_t v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  unsigned int v33;
  float v34;
  float v35;

  if (a5)
    *a5 = 0;
  if (a6)
    *a6 = 0;
  v11 = 1 << a3;
  a7.i32[0] = *a1;
  v12 = (uint16x4_t)vmovl_u8(a7).u64[0];
  v13 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  v14 = (float32x4_t)vdupq_n_s32(0xCB400000);
  v15 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(v12), v13), v14);
  if (a4)
  {
    v16 = 0;
    v17 = 1;
    v18 = 3.4028e38;
    while (1)
    {
      a11.i32[0] = *(_DWORD *)(a2 + 4 * v16);
      v19 = vsubq_f32(v15, vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a11.f32)), v13), v14));
      v20 = vmulq_f32(v19, v19);
      v21 = vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1));
      a11 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2);
      v22 = vaddq_f32(a11, v21).f32[0];
      if (v22 > v18)
        break;
      if (v22 < v18)
        v23 = v22;
      else
        v23 = v18;
      if (a5 && v22 < v18)
      {
        *a5 = v17 - 1;
        v23 = v22;
      }
      if (v11 > v17)
      {
        v16 = v17++;
        v18 = v23;
        if (v23 > 0.0)
          continue;
      }
      goto LABEL_29;
    }
    v23 = v18;
LABEL_29:
    v30 = 0;
    v31 = v23 + 0.0;
    v32 = (float)v12.u8[6];
    v33 = 1;
    v34 = 3.4028e38;
    while (1)
    {
      v15.i8[0] = *(_BYTE *)(a2 + 4 * v30 + 3);
      v35 = (float)(v32 - (float)v15.u32[0]) * (float)(v32 - (float)v15.u32[0]);
      if (v35 > v34)
        break;
      if (v35 < v34)
        v15.f32[0] = (float)(v32 - (float)v15.u32[0]) * (float)(v32 - (float)v15.u32[0]);
      else
        v15.f32[0] = v34;
      if (a6 && v35 < v34)
      {
        *a6 = v33 - 1;
        v15.f32[0] = v35;
      }
      v30 = v33;
      if (!((unint64_t)v33 >> a4))
      {
        ++v33;
        v34 = v15.f32[0];
        if (v15.f32[0] > 0.0)
          continue;
      }
      return v31 + v15.f32[0];
    }
    v15.f32[0] = v34;
    return v31 + v15.f32[0];
  }
  else
  {
    v24 = 0;
    v25 = 1;
    v26 = 3.4028e38;
    while (1)
    {
      a11.i32[0] = *(_DWORD *)(a2 + 4 * v24);
      v27 = vsubq_f32(v15, vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16((uint16x4_t)*(_OWORD *)&vmovl_u8(*(uint8x8_t *)a11.f32)), v13), v14));
      a11 = vmulq_f32(v27, v27);
      *(float32x2_t *)a11.f32 = vadd_f32(*(float32x2_t *)a11.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)a11, (int8x16_t)a11, 8uLL));
      v28 = vaddv_f32(*(float32x2_t *)a11.f32);
      if (v28 > v26)
        break;
      if (v28 < v26)
        v29 = v28;
      else
        v29 = v26;
      if (a5 && v28 < v26)
      {
        *a5 = v25 - 1;
        v29 = v28;
      }
      if (v11 > v25)
      {
        v24 = v25++;
        v26 = v29;
        if (v29 > 0.0)
          continue;
      }
      return v29 + 0.0;
    }
    v29 = v26;
    return v29 + 0.0;
  }
}

uint64_t D3DX_BC7::EmitBlock(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  unint64_t v27;
  unsigned __int8 *v28;
  unint64_t v29;
  unsigned __int8 *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  unint64_t i;
  unint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unsigned __int8 v61;
  int v62;
  int v63;
  __int16 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  int v68;
  _DWORD v69[3];

  v13 = a1;
  v14 = *a2;
  v15 = &D3DX_BC7::ms_aInfo[16 * v14 - v14];
  v16 = *v15;
  v60 = v15[2];
  v58 = v15[5];
  v17 = v15[6];
  v18 = *(_DWORD *)(v15 + 7);
  v68 = *(_DWORD *)(v15 + 11);
  v69[0] = v18;
  v67 = 0;
  CBits<16ul>::SetBits(a1, &v67, v14, 0);
  CBits<16ul>::SetBits(v13, &v67, 1uLL, 1u);
  CBits<16ul>::SetBits(v13, &v67, D3DX_BC7::ms_aInfo[16 * *a2 - *a2 + 3], a4);
  v54 = a5;
  CBits<16ul>::SetBits(v13, &v67, D3DX_BC7::ms_aInfo[16 * *a2 - *a2 + 4], a5);
  v52 = a3;
  CBits<16ul>::SetBits(v13, &v67, D3DX_BC7::ms_aInfo[16 * *a2 - *a2 + 1], a3);
  v53 = v14;
  if (((0x34uLL >> v14) & 1) != 0)
  {
    v36 = 0;
    v37 = v16 + 1;
    v35 = a7;
    do
    {
      v38 = a6;
      v39 = v37;
      do
      {
        v40 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)v69, v36);
        v41 = (unsigned __int8 *)LDRColorA::operator[](v38, v36);
        CBits<16ul>::SetBits(v13, &v67, v40, *v41);
        v42 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)v69, v36);
        v43 = (unsigned __int8 *)LDRColorA::operator[](v38 + 4, v36);
        CBits<16ul>::SetBits(v13, &v67, v42, *v43);
        v38 += 8;
        --v39;
      }
      while (v39);
      ++v36;
    }
    while (v36 != 4);
  }
  else
  {
    v51 = v17;
    v19 = 0;
    v59 = v13;
    v66 = 0;
    v65 = 0;
    v64 = 0;
    v63 = 0;
    v56 = v16 + 1;
    v20 = 2 * v16 + 2;
    do
    {
      v62 = 0;
      v21 = v56;
      v22 = a6;
      do
      {
        v23 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)v69, v19);
        v24 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)&v68, v19);
        v25 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)v69, v19);
        v26 = *(unsigned __int8 *)LDRColorA::operator[](v22, v19);
        if (v23 == v24)
        {
          CBits<16ul>::SetBits(v13, &v67, v25, v26);
          v27 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)v69, v19);
          v28 = (unsigned __int8 *)LDRColorA::operator[](v22 + 4, v19);
          CBits<16ul>::SetBits(v13, &v67, v27, *v28);
        }
        else
        {
          CBits<16ul>::SetBits(v13, &v67, v25, v26 >> 1);
          v29 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)v69, v19);
          v30 = (unsigned __int8 *)LDRColorA::operator[](v22 + 4, v19);
          CBits<16ul>::SetBits(v13, &v67, v29, *v30 >> 1);
          v61 = v62 + 1;
          v31 = v62 * (unint64_t)v60 / v20;
          *((_BYTE *)&v65 + v31) += *(_BYTE *)LDRColorA::operator[](v22, v19) & 1;
          ++*((_BYTE *)&v63 + v31);
          v62 += 2;
          v32 = v61 * (unint64_t)v60 / v20;
          *((_BYTE *)&v65 + v32) += *(_BYTE *)LDRColorA::operator[](v22 + 4, v19) & 1;
          v13 = v59;
          ++*((_BYTE *)&v63 + v32);
        }
        v22 += 8;
        --v21;
      }
      while (v21);
      ++v19;
    }
    while (v19 != 4);
    v33 = 0;
    if (v60 <= 1)
      v34 = 1;
    else
      v34 = v60;
    do
    {
      CBits<16ul>::SetBits(v13, &v67, 1uLL, *((unsigned __int8 *)&v65 + v33) > (*((unsigned __int8 *)&v63 + v33) >> 1));
      ++v33;
    }
    while (v34 != v33);
    v17 = v51;
    v35 = a7;
  }
  v44 = 0;
  if (v54)
    v45 = a8;
  else
    v45 = v35;
  do
  {
    v46 = 0;
    do
    {
      v47 = bc67_fixups[192 * D3DX_BC7::ms_aInfo[16 * *a2 - *a2] + 3 * v52 + v46];
      if (v46 >= D3DX_BC7::ms_aInfo[16 * *a2 - *a2])
        break;
      ++v46;
    }
    while (v44 != v47);
    result = CBits<16ul>::SetBits(v13, &v67, v58 - (v44 == v47), *(unsigned __int8 *)(v45 + 4 * v44));
    ++v44;
  }
  while (v44 != 16);
  if (v54)
    v49 = v35;
  else
    v49 = a8;
  if ((v53 - 6) >= 0xFFFFFFFE)
  {
    for (i = 0; i != 64; i += 4)
      result = CBits<16ul>::SetBits(v13, &v67, (__PAIR128__(v17, i) - 1) >> 64, *(unsigned __int8 *)(v49 + i));
  }
  return result;
}

void D3DX_BC7::FixEndpointPBits(uint64_t a1, _BYTE *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  char v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  int v27;
  char v28;
  char v29;
  uint64_t j;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BYTE *v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  unint64_t v43;
  unsigned __int8 v44;
  int v45;
  int v46;
  int v47;
  int v48;
  __int16 v49;
  int v50;
  __int16 v51;
  _DWORD v52[1];
  _BYTE v53[28];

  *(_QWORD *)&v53[20] = *MEMORY[0x24BDAC8D0];
  v4 = D3DX_BC7::ms_aInfo[16 * *a2 - *a2];
  *a4 = *a3;
  a4[1] = a3[1];
  a4[2] = a3[2];
  v5 = *a2;
  if (((0x34uLL >> v5) & 1) == 0)
  {
    v6 = a4;
    v38 = v4;
    v7 = 0;
    v8 = &D3DX_BC7::ms_aInfo[16 * v5 - v5];
    v43 = v8[2];
    v51 = 0;
    v50 = 0;
    v49 = 0;
    v47 = *(_DWORD *)(v8 + 7);
    v48 = 0;
    v46 = *(_DWORD *)(v8 + 11);
    v40 = v4 + 1;
    v9 = 2 * v4 + 2;
    do
    {
      v45 = 0;
      v10 = (uint64_t)a3;
      v11 = (uint64_t)v6;
      v12 = v40;
      do
      {
        v13 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)&v47, v7);
        v14 = *(unsigned __int8 *)LDRColorA::operator[]((uint64_t)&v46, v7);
        v15 = *(unsigned __int8 *)LDRColorA::operator[](v10, v7);
        if (v13 == v14)
        {
          *(_BYTE *)LDRColorA::operator[](v11, v7) = v15;
          v16 = *(_BYTE *)LDRColorA::operator[](v10 + 4, v7);
          *(_BYTE *)LDRColorA::operator[](v11 + 4, v7) = v16;
        }
        else
        {
          *(_BYTE *)LDRColorA::operator[](v11, v7) = v15 >> 1;
          v17 = *(unsigned __int8 *)LDRColorA::operator[](v10 + 4, v7) >> 1;
          *(_BYTE *)LDRColorA::operator[](v11 + 4, v7) = v17;
          v44 = v45 + 1;
          v18 = v45 * (unint64_t)v43 / v9;
          *((_BYTE *)&v50 + v18) += *(_BYTE *)LDRColorA::operator[](v10, v7) & 1;
          ++*((_BYTE *)&v48 + v18);
          v45 += 2;
          v19 = v44 * (unint64_t)v43 / v9;
          *((_BYTE *)&v50 + v19) += *(_BYTE *)LDRColorA::operator[](v10 + 4, v7) & 1;
          ++*((_BYTE *)&v48 + v19);
        }
        v11 += 8;
        v10 += 8;
        --v12;
      }
      while (v12);
      ++v7;
      v6 = a4;
    }
    while (v7 != 4);
    v20 = 0;
    v21 = v43;
    if (v43 <= 1)
      v21 = 1;
    do
    {
      v52[v20] = *((unsigned __int8 *)&v50 + v20) > (*((unsigned __int8 *)&v48 + v20) >> 1);
      ++v20;
    }
    while (v21 != v20);
    if (*a2 == 1)
    {
      for (i = 0; i != 4; ++i)
      {
        v23 = v52;
        v24 = (uint64_t)a4;
        v25 = v38 + 1;
        do
        {
          v26 = (_BYTE *)LDRColorA::operator[](v24, i);
          v27 = *v23++;
          v28 = v27 | (2 * *v26);
          *(_BYTE *)LDRColorA::operator[](v24, i) = v28;
          v29 = v27 | (2 * *(_BYTE *)LDRColorA::operator[](v24 + 4, i));
          *(_BYTE *)LDRColorA::operator[](v24 + 4, i) = v29;
          v24 += 8;
          --v25;
        }
        while (v25);
      }
    }
    else
    {
      for (j = 0; j != 4; ++j)
      {
        v31 = (int *)v53;
        v32 = (uint64_t)a4;
        v33 = v38 + 1;
        do
        {
          v34 = *(v31 - 1) | (2 * *(unsigned __int8 *)LDRColorA::operator[](v32, j));
          *(_BYTE *)LDRColorA::operator[](v32, j) = v34;
          v35 = (_BYTE *)LDRColorA::operator[](v32 + 4, j);
          v36 = *v31;
          v31 += 2;
          v37 = v36 | (2 * *v35);
          *(_BYTE *)LDRColorA::operator[](v32 + 4, j) = v37;
          v32 += 8;
          --v33;
        }
        while (v33);
      }
    }
  }
}

uint64_t D3DX_BC7::Quantize(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;

  v4 = D3DX_BC7::Quantize((D3DX_BC7 *)*a1, *a2);
  v5 = D3DX_BC7::Quantize((D3DX_BC7 *)a1[1], a2[1]);
  v6 = D3DX_BC7::Quantize((D3DX_BC7 *)a1[2], a2[2]);
  if (a2[3])
    v7 = D3DX_BC7::Quantize((D3DX_BC7 *)a1[3], a2[3]) << 24;
  else
    v7 = -16777216;
  return v7 | (v6 << 16) | (v5 << 8) | v4;
}

float encode_bc7(uint64_t a1, float *a2, uint16x8_t *a3)
{
  unsigned int v4;
  float result;

  if (*(_BYTE *)(a1 + 136))
    v4 = 0x200000;
  else
    v4 = 0x100000;
  result = D3DX_BC7::Encode(a3, v4, (const float *)(a1 + 400)) / 65025.0;
  *a2 = result;
  return result;
}

uint64_t D3DX_BC7::Unquantize(D3DX_BC7 *this, uint64_t a2)
{
  if ((unint64_t)(a2 - 9) <= 0xFFFFFFFFFFFFFFF7)
    D3DX_BC7::Unquantize();
  return (((_DWORD)this << (8 - a2)) >> a2) | ((_BYTE)this << (8 - a2));
}

uint64_t D3DX_BC7::Quantize(D3DX_BC7 *this, int a2)
{
  unsigned int v2;
  unsigned int v3;

  if ((a2 - 9) <= 0xFFFFFFF7)
    D3DX_BC7::Quantize();
  v2 = (1 << (7 - a2)) + (_DWORD)this;
  if (v2 >= 0xFF)
    v2 = 255;
  v3 = v2 >> (8 - a2);
  if (a2 == 8)
    LOBYTE(v3) = (_BYTE)this;
  return v3;
}

void CBits<16ul>::SetBit()
{
  __assert_rtn("SetBit", "BC_impl.h", 432, "uStartBit < 128 && uValue < 2");
}

void CBits<16ul>::SetBits()
{
  __assert_rtn("SetBits", "BC_impl.h", 444, "uStartBit + uNumBits <= 128 && uNumBits <= 8");
}

{
  __assert_rtn("SetBits", "BC_impl.h", 445, "uValue < (1 << uNumBits)");
}

void LDRColorA::operator[]()
{
  __assert_rtn("operator[]", "BC_impl.h", 319, "false");
}

{
  __assert_rtn("operator[]", "BC_impl.h", 331, "false");
}

void D3DX_BC7::Unquantize()
{
  __assert_rtn("Unquantize", "BC_impl.h", 538, "0 < uPrec && uPrec <= 8");
}

void D3DX_BC7::Quantize()
{
  __assert_rtn("Quantize", "BC_impl.h", 516, "0 < uPrec && uPrec <= 8");
}

void encode_bc4(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v4;
  const float *v5;
  unsigned __int128 v6;
  float EndPointsBC4U;
  _OWORD v8[4];
  uint64_t v9;

  v4 = 0;
  v9 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  do
  {
    v5 = (const float *)(a1 + 400 + (v4 << 6));
    v6 = (unsigned __int128)vld4q_f32(v5);
    v8[v4++] = v6;
  }
  while (v4 != 4);
  EndPointsBC4U = FindEndPointsBC4U((float *)v8, a3, a3 + 1);
  FindClosestUNORM((BC4_UNORM *)a3, (const float *)v8, EndPointsBC4U);
}

float FindEndPointsBC4U(float *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v5;
  float v6;
  float v7;
  float v8;
  int v10;
  int v11;
  float result;
  uint64_t v13;

  v5 = 0;
  v6 = *a1;
  v7 = *a1;
  do
  {
    v8 = a1[v5];
    if (v8 >= v7)
    {
      if (v8 > v6)
        v6 = a1[v5];
    }
    else
    {
      v7 = a1[v5];
    }
    ++v5;
  }
  while (v5 != 16);
  v13 = 0;
  if (v7 == 0.0 || v6 == 1.0)
  {
    OptimizeAlpha<false>((float *)&v13 + 1, (float *)&v13, (uint64_t)a1, 6u);
    v10 = (int)(float)(*((float *)&v13 + 1) * 255.0);
    result = *(float *)&v13 * 255.0;
    *a3 = (int)(float)(*(float *)&v13 * 255.0);
    *a2 = v10;
  }
  else
  {
    OptimizeAlpha<false>((float *)&v13 + 1, (float *)&v13, (uint64_t)a1, 8u);
    v11 = (int)(float)(*((float *)&v13 + 1) * 255.0);
    result = *(float *)&v13 * 255.0;
    *a2 = (int)(float)(*(float *)&v13 * 255.0);
    *a3 = v11;
  }
  return result;
}

void FindClosestUNORM(BC4_UNORM *this, const float *a2, float a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12[8];
  uint64_t v13;

  v5 = 0;
  v13 = *MEMORY[0x24BDAC8D0];
  do
  {
    a3 = BC4_UNORM::DecodeFromIndex(this, v5, a3);
    v12[v5++] = a3;
  }
  while (v5 != 8);
  v6 = 0;
  v7 = *(_QWORD *)this;
  do
  {
    v8 = 0;
    v9 = 0;
    v10 = 100000.0;
    do
    {
      v11 = vabds_f32(v12[v8], a2[v6]);
      if (v11 < v10)
      {
        v9 = v8;
        v10 = v11;
      }
      ++v8;
    }
    while (v8 != 8);
    v7 = v7 & ~(458752 << (3 * v6)) | (v9 << (3 * v6 + 16));
    *(_QWORD *)this = v7;
    ++v6;
  }
  while (v6 != 16);
}

void encode_bc5(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v4;
  const float *v5;
  float EndPointsBC4U;
  float v7;
  _OWORD v8[4];
  _OWORD v9[4];
  uint64_t v10;
  float32x4x4_t v11;

  v4 = 0;
  v10 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  do
  {
    v5 = (const float *)(a1 + 400 + (v4 << 6));
    v11 = vld4q_f32(v5);
    v9[v4] = v11.val[0];
    v8[v4++] = v11.val[1];
  }
  while (v4 != 4);
  FindEndPointsBC4U((float *)v9, a3, a3 + 1);
  EndPointsBC4U = FindEndPointsBC4U((float *)v8, a3 + 8, a3 + 9);
  FindClosestUNORM((BC4_UNORM *)a3, (const float *)v9, EndPointsBC4U);
  FindClosestUNORM((BC4_UNORM *)(a3 + 8), (const float *)v8, v7);
}

float *OptimizeAlpha<false>(float *result, float *a2, uint64_t a3, unsigned int a4)
{
  float *v4;
  float *v5;
  uint64_t v6;
  float v7;
  float v8;
  float v9;
  uint64_t v10;
  float v11;
  uint64_t v14;
  float v15;
  float *v16;
  float *v17;
  float *v18;
  uint64_t v19;
  float v20;
  float v21;
  float v22;
  uint64_t v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  unsigned int v30;
  float v33;
  float v34;
  float v35;
  float v36;
  BOOL v37;
  BOOL v38;
  float v39;
  float v40;
  float v41;
  float v42[6];
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = (float *)&OptimizeAlpha<false>(float *,float *,float const*,unsigned int)::pC8;
  if (a4 == 6)
    v4 = (float *)&OptimizeAlpha<false>(float *,float *,float const*,unsigned int)::pC6;
  v5 = (float *)&OptimizeAlpha<false>(float *,float *,float const*,unsigned int)::pD8;
  if (a4 == 6)
    v5 = (float *)&OptimizeAlpha<false>(float *,float *,float const*,unsigned int)::pD6;
  if (a4 == 8)
  {
    v6 = 0;
    v7 = 1.0;
    v8 = 0.0;
    do
    {
      v9 = *(float *)(a3 + v6);
      if (v9 < v7)
        v7 = *(float *)(a3 + v6);
      if (v9 > v8)
        v8 = *(float *)(a3 + v6);
      v6 += 4;
    }
    while (v6 != 64);
  }
  else
  {
    v10 = 0;
    v8 = 0.0;
    v7 = 1.0;
    do
    {
      v11 = *(float *)(a3 + v10);
      if (v11 > 0.0 && v11 < v7)
        v7 = *(float *)(a3 + v10);
      if (v11 < 1.0 && v11 > v8)
        v8 = *(float *)(a3 + v10);
      v10 += 4;
    }
    while (v10 != 64);
    if (v7 == v8)
      v8 = 1.0;
  }
  v14 = 0;
  v15 = (float)(a4 - 1);
  while ((float)(v8 - v7) >= 0.0039062)
  {
    if (a4)
    {
      v16 = v42;
      v17 = v4;
      v18 = v5;
      v19 = a4;
      do
      {
        v20 = *v17++;
        v21 = v20;
        v22 = *v18++;
        *v16++ = (float)(v8 * v22) + (float)(v7 * v21);
        --v19;
      }
      while (v19);
      if (a4 == 6)
        v43 = 0x3F80000000000000;
    }
    v23 = 0;
    v24 = 0.0;
    v25 = 0.0;
    v26 = 0.0;
    v27 = 0.0;
    do
    {
      v28 = *(float *)(a3 + v23);
      v29 = (float)(v15 / (float)(v8 - v7)) * (float)(v28 - v7);
      if (v29 <= 0.0)
      {
        if (v28 <= (float)(v7 * 0.5) && a4 == 6)
          v30 = 6;
        else
          v30 = 0;
      }
      else if (v29 >= v15)
      {
        if (a4 != 6 || v28 < (float)((float)(v8 + 1.0) * 0.5))
          v30 = a4 - 1;
        else
          v30 = 7;
      }
      else
      {
        v30 = (float)(v29 + 0.5);
      }
      if (v30 < a4)
      {
        v33 = v42[v30] - v28;
        v34 = v4[v30];
        v27 = v27 + (float)(v34 * v33);
        v25 = v25 + (float)(v34 * v34);
        v35 = v5[v30];
        v26 = v26 + (float)(v33 * v35);
        v24 = v24 + (float)(v35 * v35);
      }
      v23 += 4;
    }
    while (v23 != 64);
    if (v25 > 0.0)
      v7 = v7 - (float)(v27 / v25);
    if (v24 > 0.0)
      v8 = v8 - (float)(v26 / v24);
    if (v7 <= v8)
      v36 = v7;
    else
      v36 = v8;
    if (v7 > v8)
      v8 = v7;
    v37 = (float)(v26 * v26) < 0.015625 && (float)(v27 * v27) < 0.015625;
    v38 = v37 || ++v14 == 8;
    v7 = v36;
    if (v38)
      goto LABEL_72;
  }
  v36 = v7;
LABEL_72:
  v39 = 1.0;
  if (v36 <= 1.0)
    v40 = v36;
  else
    v40 = 1.0;
  if (v36 < 0.0)
    v40 = 0.0;
  *result = v40;
  if (v8 <= 1.0)
    v39 = v8;
  if (v8 >= 0.0)
    v41 = v39;
  else
    v41 = 0.0;
  *a2 = v41;
  return result;
}

float BC4_UNORM::DecodeFromIndex(BC4_UNORM *this, uint64_t a2, float a3)
{
  unint64_t v3;
  float v4;
  float v5;
  unsigned int v6;
  float v7;
  unsigned int v8;
  float v9;

  v3 = a2 - 1;
  if (a2 == 1)
  {
    LOBYTE(a3) = *((_BYTE *)this + 1);
    goto LABEL_5;
  }
  if (!a2)
  {
    LOBYTE(a3) = *(_BYTE *)this;
LABEL_5:
    v4 = (float)LODWORD(a3);
    v5 = 255.0;
    return v4 / v5;
  }
  v6 = *(unsigned __int8 *)this;
  v7 = (float)v6 / 255.0;
  v8 = *((unsigned __int8 *)this + 1);
  v9 = (float)v8 / 255.0;
  if (v6 <= v8)
  {
    if (a2 == 6)
      return 0.0;
    if (a2 == 7)
      return 1.0;
    v4 = (float)(v9 * (float)v3) + (float)(v7 * (float)(unint64_t)(6 - a2));
    v5 = 5.0;
  }
  else
  {
    v4 = (float)(v9 * (float)v3) + (float)(v7 * (float)(unint64_t)(8 - a2));
    v5 = 7.0;
  }
  return v4 / v5;
}

size_t ATEncoder::GetBlockAddress(ATEncoder *this, at_size_t a2, at_size_t a3, const at_block_buffer_t *a4)
{
  unint64_t v6;
  void *blocks;
  unsigned int v8;

  v6 = (*(uint64_t (**)(ATEncoder *, _QWORD, _QWORD))(*(_QWORD *)this + 56))(this, *(_QWORD *)&a3.x, a3.z);
  blocks = a4->blocks;
  return (size_t)blocks
       + (*(uint64_t (**)(ATEncoder *))(*(_QWORD *)this + 72))(this) * v6
       + a4->rowBytes * HIDWORD(v6)
       + a4->sliceBytes * v8;
}

unint64_t ATEncoder::GetBlockFeatures(ATEncoder *this, at_block_features_t a2, at_block_buffer_t *a3, __int128 a4, unint64_t *a5, const unint64_t *a6, at_flags_t a7, at_flags_t a8)
{
  unint64_t v10;
  unsigned int v11;
  at_flags_t v15;
  uint64_t BlockFeaturesStatic;
  unint64_t BlockFeatures;
  unsigned int v18;
  BOOL v19;
  unsigned int v20;
  _BOOL4 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  at_block_features_t v33;
  __int128 v34;
  at_block_features_t v35;
  uint64_t v36;
  at_block_features_t v37;
  at_flags_t v39;
  at_flags_t v40;
  uint64_t v41;
  unint64_t v42;

  v10 = *((_QWORD *)&a4 + 1);
  v11 = a4;
  *a5 = 0;
  BlockFeaturesStatic = ASTCEncoder::GetBlockFeaturesStatic((unint64_t)this, (at_block_format_t)a6, (at_flags_t)a3);
  BlockFeatures = BlockFeaturesStatic;
  if (!BlockFeaturesStatic)
  {
    BlockFeatures = DXTCEncoder::GetBlockFeaturesStatic(this, (at_block_format_t)a6, v15);
    if (!BlockFeatures)
      return BlockFeatures;
  }
  v18 = (BlockFeatures >> 10) & 0xFFF;
  if (((BlockFeatures >> 10) & 0xFFE) == 0)
    v18 = 1;
  v19 = __CFADD__((_DWORD)a3 - 1, v18);
  if (((BlockFeatures >> 22) & 0xFFE) != 0)
    v20 = (BlockFeatures >> 22) & 0xFFF;
  else
    v20 = 1;
  v21 = __CFADD__(HIDWORD(a3) - 1, v20);
  if (v11 <= 1)
    *(_QWORD *)&v22 = 1;
  else
    *(_QWORD *)&v22 = v11;
  if (v19 || v21)
  {
    BlockFeatures &= 0xFFFFFFF3FFFFFFE0;
    return BlockFeatures;
  }
  v23 = ((_DWORD)a3 - 1 + v18) / v18;
  v24 = (HIDWORD(a3) - 1 + v20) / v20;
  v25 = ((_DWORD)v23 << (BlockFeatures >> 5));
  *a5 = v24 * (unint64_t)v22 * v25;
  if (a2.bits)
  {
    v26 = *(_QWORD *)(a2.bits + 8);
    if (v26)
    {
      if (v26 < v25 && (v24 * v22) >= 2)
        goto LABEL_32;
    }
    else
    {
      *(_QWORD *)(a2.bits + 8) = v25;
      v26 = ((_DWORD)v23 << (BlockFeatures >> 5));
    }
    v27 = v26 * v24;
    v28 = *(_QWORD *)(a2.bits + 16);
    if (!v28)
    {
      *(_QWORD *)(a2.bits + 16) = v27;
      v28 = v26 * v24;
      goto LABEL_34;
    }
    if (v28 >= v27 || v11 < 2)
    {
LABEL_34:
      v30 = v25 + v26 * (v24 - 1) + v28 * (v22 - 1);
      *a5 = v30;
      if (v30 < v10)
        v10 = v30;
      if (BlockFeaturesStatic)
      {
        if (v23 < 0x400 || v24 > 1 || v11 >= 2)
        {
          v37.bits = a2.bits;
          *((_QWORD *)&v22 + 1) = v10;
          return ASTCEncoder::GetBlockFeatures(this, BlockFeatures, v37, v23 | (v24 << 32), v22, (uint64_t)a5, a6, a8);
        }
        v31 = v23 >> 10;
        v32 = v23 & 0x3FF;
        v41 = 0;
        v42 = 0;
        v33.bits = a2.bits;
        *((_QWORD *)&v22 + 1) = v10;
        BlockFeatures = ASTCEncoder::GetBlockFeatures(this, BlockFeatures, v33, (v31 << 32) | 0x400, v22, (uint64_t)&v42, a6, v39);
        if (v32)
        {
          v42 = *(_QWORD *)(a2.bits + 8) * v31;
          if (v10 >= v42)
            *((_QWORD *)&v34 + 1) = v10 - v42;
          else
            *((_QWORD *)&v34 + 1) = 0;
          v35.bits = a2.bits;
          *(_QWORD *)&v34 = 1;
          BlockFeatures = ASTCEncoder::GetBlockFeatures(this, BlockFeatures, v35, v32 | 0x100000000, v34, (uint64_t)&v41, a6, v40);
          v36 = v41;
        }
        else
        {
          v36 = 0;
        }
        *a5 = v36 + v42;
      }
      return BlockFeatures;
    }
LABEL_32:
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_block_get_features Error: src->rowBytes (%lu) is less than what is required to store a row of content (%lu bytes)\n", v26, v25);
    return 0;
  }
  return BlockFeatures;
}

void EncodeDXTC_BC7_vec(uint64_t a1, float *a2, uint64_t a3, double a4, double a5, double a6, double a7, double a8, double a9, double a10, int32x4_t a11)
{
  float32x4_t v11;
  float32x4_t v12;
  int v16;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int16x4_t v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned __int8 v28;
  int8x8_t v29;
  int v30;
  unsigned __int8 v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  float32x4_t *v34;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  int32x4_t v50;
  float32x4_t v51;
  int32x4_t v52;
  float32x4_t v53;
  float32x2_t *v54;
  unsigned __int32 v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  float32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  int v103;
  int8x16_t v104;
  uint64_t v105;
  float32x4_t v106;
  float32x4_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  float32x2_t v111;
  float32x2_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  float32x4_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  float32x4_t v162;
  float32x4_t v163;
  int8x16_t v164;
  float32x4_t v165;
  float32x4_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  int32x2_t v171;
  uint64_t v172;
  int8x16_t v173;
  int8x16_t v174;
  float32x4_t v175;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  int16x8_t v197;
  int16x8_t v198;
  int16x8_t v199;
  int16x8_t v200;
  int16x8_t v201;
  uint8x8_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  int16x8_t v238;
  int16x8_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  unsigned __int16 v243;
  float32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  int8x16_t v251;
  int8x16_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  int8x16_t v262;
  int8x16_t v263;
  int8x16_t v264;
  float32x2_t v265;
  float32x2_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  int32x4_t v270;
  uint16x8_t v271;
  int8x16_t v272;
  int8x16_t v273;
  float32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float v282;
  float32x4_t v283;
  float32x4_t v284;
  float32x4_t v285;
  float32x4_t v286;
  float32x4_t v287;
  float32x4_t v288;
  float32x4_t v289;
  float32x4_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  int8x16_t v301;
  float v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  int8x16_t v318;
  float v319;
  float v321;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  uint64_t v327;
  uint64_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v348;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  int8x16_t v362;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  float32x4_t v373;
  float32x4_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float32x4_t v390;
  float32x4_t v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  float32x4_t v395;
  float32x4_t v396;
  float32x4_t v397;
  float32x4_t v398;
  float32x4_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  unsigned __int8 v406;
  unsigned int v407;
  float32x4_t v408;
  float32x4_t v409;
  int32x4_t v410;
  int32x4_t v411;
  int32x4_t v412;
  uint64_t v413;
  int32x4_t v414;
  unsigned int v415;
  int v416;
  uint64_t v417;
  uint64_t v418;
  int32x4_t v419;
  float32x4_t *v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t v424;
  float32x4_t v425;
  float32x4_t v426;
  float32x4_t v427;
  float32x4_t v428;
  const float *v429;
  float32x4_t v430;
  float32x4_t v431;
  float32x4_t v432;
  float32x4_t v433;
  float32x4_t v434;
  float32x4_t v435;
  float32x4_t v436;
  float32x4_t v437;
  float32x4_t v438;
  float32x4_t v439;
  float32x4_t v440;
  float32x4_t v441;
  float32x2_t *v442;
  float32x4_t v443;
  float32x4_t v444;
  float32x4_t v445;
  float32x4_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v455;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  const float *v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  __int32 v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  int8x16_t v480;
  float32x4_t v481;
  float32x4_t v482;
  int8x16_t v483;
  int8x16_t v484;
  int8x16_t v485;
  int8x16_t v486;
  float32x2_t v487;
  float32x4_t v488;
  int8x16_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  int8x16_t v507;
  float32x4_t v508;
  float32x4_t v509;
  int8x16_t v510;
  int8x16_t v511;
  int8x16_t v512;
  float32x4_t v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  int8x16_t v522;
  int8x16_t v523;
  int8x16_t v524;
  int8x16_t v525;
  int8x16_t v526;
  int8x16_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  int8x16_t v532;
  float32x4_t v533;
  int32x4_t v534;
  __int32 v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  float32x4_t v541;
  float32x4_t v542;
  int8x16_t v543;
  int8x16_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t *v553;
  float32x4_t v554;
  float32x4_t v555;
  float32x4_t v556;
  float32x4_t v557;
  int16x8_t v558;
  int16x8_t v559;
  int16x8_t v560;
  int16x8_t v561;
  uint16x4_t v562;
  int16x8_t v563;
  uint8x8_t v564;
  int8x16_t v565;
  int8x16_t v566;
  int8x16_t v567;
  int8x16_t v568;
  int16x8_t v569;
  int16x8_t v570;
  int16x8_t v571;
  int16x8_t v572;
  int16x8_t v573;
  int32x2_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t *v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  float32x4_t v584;
  int16x8_t v585;
  int16x8_t v586;
  int16x8_t v587;
  int16x8_t v588;
  int16x8_t v589;
  unsigned __int16 v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  float32x4_t v595;
  int32x4_t v596;
  float32x4_t v597;
  float32x4_t v598;
  int16x8_t v599;
  float32x4_t v600;
  int16x8_t v601;
  int16x8_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  int8x16_t v606;
  int8x16_t v607;
  int8x16_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  int8x16_t v612;
  float32x4_t v613;
  float32x4_t v614;
  int8x16_t v615;
  int8x16_t v616;
  int8x16_t v617;
  int8x16_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  float32x4_t v624;
  float32x4_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  int8x16_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  int8x16_t v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  int8x16_t v646;
  int8x16_t v647;
  int8x16_t v648;
  int8x16_t v649;
  float32x4_t v650;
  float32x4_t *v651;
  int16x8_t v652;
  int16x8_t v653;
  int16x8_t v654;
  int16x8_t v655;
  int16x8_t v656;
  uint8x8_t v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  int16x8_t v662;
  int16x8_t v663;
  int16x8_t v664;
  int16x8_t v665;
  int16x8_t v666;
  uint8x8_t v667;
  float32x4_t v668;
  int8x16_t v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  int8x8_t v675;
  float32x4_t v676;
  uint16x8_t v677;
  int8x16_t v678;
  int8x16_t v679;
  float32x4_t v680;
  float32x4_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  int8x16_t v689;
  float32x2_t v690;
  float32x4_t v691;
  float32x4_t v692;
  float32x4_t v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  float32x4_t v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float v710;
  float v711;
  float v712;
  const float *v713;
  float32x4_t v714;
  float32x4_t v715;
  float32x4_t v716;
  float32x4_t v717;
  float32x4_t v718;
  float32x4_t v719;
  float32x4_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float32x4_t v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  int8x16_t v728;
  int8x16_t v729;
  uint64_t v730;
  uint64_t v731;
  float32x4_t *v732;
  float32x4_t v733;
  float32x4_t v734;
  float32x4_t v735;
  float32x4_t v736;
  float32x4_t *v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x4_t v741;
  float32x4_t *v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t *v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  int8x16_t v751;
  float32x4_t v752;
  float32x4_t v754;
  float32x4_t v755;
  float32x4_t v756;
  float32x4_t v757;
  float32x4_t v758;
  float32x4_t v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  float32x4_t v766;
  float32x4_t v767;
  float32x4_t v768;
  float32x4_t v769;
  float32x4_t v770;
  float32x4_t v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float v781;
  float v783;
  int8x8_t v784;
  int8x8_t v785;
  unsigned __int8 v786;
  int8x16_t v787;
  int8x8_t v788;
  int8x16_t v789;
  int8x8_t v790;
  int8x8_t v791;
  int8x16_t v792;
  float32x4_t v793;
  int8x16_t v794;
  int8x16_t v795;
  int8x16_t v796;
  int8x16_t v797;
  int32x4_t v798;
  int8x16_t v799;
  int32x4_t v800;
  int32x4_t v801;
  int32x4_t v802;
  int32x4_t v803;
  int32x4_t v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  float32x4_t v809;
  float32x4_t v810;
  float32x4_t v811;
  int32x4_t v812;
  int32x4_t v813;
  int32x4_t v814;
  int32x4_t v815;
  int32x4_t v816;
  int32x4_t v817;
  float32x4_t v818;
  int8x16_t v819;
  int8x16_t v820;
  int8x16_t v821;
  int8x16_t v822;
  float32x4_t v823;
  float32x4_t v824;
  float32x4_t v825;
  int8x16_t v826;
  int32x4_t v827;
  int32x4_t v828;
  int8x8_t v829;
  int8x8_t v830;
  int8x8_t v831;
  int8x8_t v832;
  int8x8_t v833;
  int8x8_t v834;
  float v835;
  float32x4_t v836;
  float32x4_t v837;
  float32x4_t v838;
  float32x4_t v839;
  float32x4_t v840;
  float32x4_t v841;
  int16x8_t v842;
  __int16 v843;
  int16x8_t v844;
  unsigned __int16 v845;
  uint64_t v846;
  float v847;
  uint64_t v848;
  float v849;
  float32x4_t v850;
  float32x4_t v851;
  float32x4_t v852;
  float32x4_t v853;
  float32x4_t v854;
  int16x8_t v855;
  unsigned __int16 v856;
  uint64_t i;
  uint64_t v859;
  float v860;
  uint64_t v861;
  uint16x8_t v862;
  int8x16_t v863;
  uint16x4_t v864;
  uint16x4_t v865;
  uint16x4_t v866;
  int8x16_t v867;
  int32x4_t v868;
  int v869;
  int v870;
  uint64_t v871;
  unsigned __int8 *v872;
  char v873;
  char v874;
  uint64_t v875;
  __int8 v876;
  float32x4_t v877;
  float32x4_t v878;
  float32x4_t v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  float32x4_t v884;
  float32x4_t v885;
  float32x4_t v886;
  float32x4_t v887;
  float32x4_t v888;
  float32x4_t v889;
  int8x16_t v890;
  float32x4_t v891;
  float32x4_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  float32x4_t v896;
  float32x4_t v897;
  uint64_t v898;
  float32x4_t v899;
  float32x4_t v900;
  float32x4_t v901;
  float32x4_t v902;
  float32x4_t v903;
  float32x4_t v904;
  float32x4_t v905;
  float32x4_t v906;
  float v907;
  float32x4_t v908;
  float32x4_t v909;
  int8x8_t v910;
  float32x4_t v911;
  float32x4_t v912;
  float32x4_t v913;
  float32x4_t v914;
  float32x4_t v915;
  float32x4_t v916;
  float32x4_t v917;
  float32x4_t v918;
  float32x4_t v919;
  float32x4_t v920;
  float32x4_t v921;
  float32x4_t v922;
  float32x4_t v923;
  float32x4_t v924;
  float32x4_t v925;
  float32x4_t v926;
  float32x4_t v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  float32x4_t v932;
  float v933;
  float32x4_t v934;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t v937;
  float32x4_t v938;
  float32x4_t v939;
  int8x16_t v940;
  float32x4_t v941;
  float32x4_t v942;
  float32x4_t v943;
  float32x4_t v944;
  float32x4_t v945;
  float32x4_t v946;
  float32x4_t v947;
  float32x4_t v948;
  float32x4_t v949;
  float32x4_t v950;
  float32x4_t v951;
  float32x4_t v952;
  float32x4_t v953;
  float32x4_t v954;
  float32x4_t v955;
  float32x4_t v956;
  float32x4_t v957;
  float32x4_t v958;
  float32x4_t v959;
  float32x4_t v960;
  float32x4_t v961;
  float32x4_t v962;
  float32x4_t v963;
  float32x4_t v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  float32x4_t v968;
  float32x4_t v969;
  float32x4_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  float32x4_t v974;
  float32x4_t v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  float32x4_t v980;
  float32x4_t v981;
  int8x8_t v982;
  uint64_t v983;
  int8x8_t v984;
  int8x8_t v985;
  __int128 v986;
  float32x4_t v987;
  int8x8_t v988;
  uint64_t v989;
  _QWORD v990[3];
  uint8x16_t v991;
  unsigned __int8 v992;
  unsigned __int8 v993;
  unsigned __int8 v994;
  unsigned __int8 v995;
  unsigned __int8 v996;
  unsigned __int8 v997;
  unsigned __int8 v998;
  unsigned __int8 v999;
  unsigned __int8 v1000;
  unsigned __int8 v1001;
  unsigned __int8 v1002;
  unsigned __int8 v1003;
  unsigned __int8 v1004;
  unsigned __int8 v1005;
  unsigned __int8 v1006;
  unsigned __int8 v1007;
  unsigned int v1008;
  uint32x4_t v1009;
  uint32x4_t v1010;
  uint32x4_t v1011;
  uint32x4_t v1012;
  _OWORD v1013[4];
  float32x4_t v1014;
  float32x4_t v1015;
  float32x4_t v1016;
  float32x4_t v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  float32x4_t v1022;
  float32x4_t v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  uint64_t v1030;
  int8x16_t v1031;
  uint64_t v1032;

  v1032 = *MEMORY[0x24BDAC8D0];
  if (*(float *)(a1 + 120) < 0.00024606 || (v16 = *(unsigned __int8 *)(a1 + 134), v16 == 16))
  {
    __asm { FMOV            V1.4S, #1.0 }
    v22 = vmaxnmq_f32(vminnmq_f32(*(float32x4_t *)(a1 + 16), _Q1), (float32x4_t)0);
    v23.i64[0] = 0x3F0000003F000000;
    v23.i64[1] = 0x3F0000003F000000;
    v24.i64[0] = 0x3F0000003F000000;
    v24.i64[1] = 0x3F0000003F000000;
    v25 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v24, (float32x4_t)vdupq_n_s32(0x437F0000u), v22)));
    *(int16x4_t *)v22.f32 = vmovn_s32(vcvtq_s32_f32(vmlaq_f32(v23, (float32x4_t)vdupq_n_s32(0x42FE0000u), v22)));
    v26 = v22.i8[0];
    v27 = v22.u8[2];
    v28 = v22.u8[4];
    v29 = vorr_s8((int8x8_t)vadd_s16(*(int16x4_t *)v22.f32, *(int16x4_t *)v22.f32), (int8x8_t)vshr_n_u16((uint16x4_t)(v22.i64[0] & 0xFF00FF00FF00FFLL), 6uLL));
    v1009 = (uint32x4_t)xmmword_20631C160;
    v1010 = (uint32x4_t)unk_20631C170;
    v1011 = (uint32x4_t)xmmword_20631C180;
    v1012 = (uint32x4_t)unk_20631C190;
    v30 = (unsigned __int16)(v27 << 8) | (v28 << 16) & 0xFFFFFF | v26 | (v25.u8[6] << 24);
    v31 = v26 - 1;
    if (v29.u8[0] <= v25.u8[0])
      v31 = v26 + 1;
    if (v25.u8[0] != v29.u8[0])
      v26 = v31;
    v32 = v27 - 1;
    if (v29.u8[2] <= v25.u8[2])
      v32 = v27 + 1;
    if (v25.u8[2] != v29.u8[2])
      v27 = v32;
    v33 = v28 - 1;
    if (v29.u8[4] <= v25.u8[4])
      v33 = v28 + 1;
    if (v25.u8[4] != v29.u8[4])
      v28 = v33;
    v991.i32[0] = v30;
    v991.i32[1] = (unsigned __int16)(v27 << 8) | (v28 << 16) | v26 | (v25.u16[3] << 24);
    v1030 = 0;
    bzero(&v1014, 0x641uLL);
    v1014.i8[0] = 5;
    D3DX_BC7::EmitBlock(a3, (unsigned __int8 *)&v1014, 0, 0, 0, (uint64_t)&v991, (uint64_t)&v1009, (uint64_t)&v1009);
    *a2 = fmaxf(*(float *)(a1 + 120), 0.0);
    return;
  }
  v34 = (float32x4_t *)(a1 + 272);
  __asm { FMOV            V0.4S, #1.0 }
  v941 = *(float32x4_t *)(a1 + 16);
  __asm { FMOV            V15.4S, #3.0 }
  v931 = _Q15;
  if (!(_NF ^ _VF | _ZF) && *(_BYTE *)(a1 + 136))
  {
    v38 = *(float32x4_t *)(a1 + 688);
    v37 = *(float32x4_t *)(a1 + 704);
    v40 = *(float32x4_t *)(a1 + 656);
    v39 = *(float32x4_t *)(a1 + 672);
    v41 = vmaxnmq_f32(v39, v37);
    v42 = vminnmq_f32(v39, v37);
    v43 = (int32x4_t)vmaxnmq_f32(vmaxnmq_f32(v40, v38), v41);
    v44 = (int32x4_t)vminnmq_f32(vminnmq_f32(v40, v38), v42);
    __asm { FMOV            V2.4S, #1.0 }
    v46 = (float32x4_t)vzip2q_s32(v44, _Q2);
    v47 = (float32x4_t)vzip1q_s32(v44, _Q2);
    v48 = vmaxnmq_f32((float32x4_t)vzip1q_s32(v43, _Q2), (float32x4_t)vzip2q_s32(v43, _Q2));
    v49 = vminnmq_f32(v47, v46);
    v50 = (int32x4_t)vminnmq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL));
    v51 = (float32x4_t)vzip1q_s32(v50, v50);
    v51.i32[2] = v50.i32[0];
    v52 = (int32x4_t)vmaxnmq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL));
    v53 = (float32x4_t)vzip1q_s32(v52, v52);
    v53.i32[2] = v52.i32[0];
    v54 = *(float32x2_t **)(a1 + 32);
    v55 = 1;
    goto LABEL_54;
  }
  v57 = *(float32x4_t *)(a1 + 144);
  v56 = *(float32x4_t *)(a1 + 160);
  v58 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v941.f32, 0);
  v59 = vsubq_f32(v57, v58);
  v60 = vsubq_f32(v56, v58);
  v974 = *(float32x4_t *)(a1 + 176);
  v977 = *(float32x4_t *)(a1 + 192);
  v61 = vsubq_f32(v974, v58);
  v62 = vsubq_f32(v977, v58);
  v63 = *(float32x4_t *)(a1 + 240);
  v64 = *(float32x4_t *)(a1 + 256);
  v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v941.f32, 1);
  v66 = *(float32x4_t *)(a1 + 208);
  v67 = vsubq_f32(v66, v65);
  v971 = *(float32x4_t *)(a1 + 224);
  v68 = vsubq_f32(v971, v65);
  v69 = vsubq_f32(v63, v65);
  v70 = vsubq_f32(v64, v65);
  v71 = *(float32x4_t *)(a1 + 304);
  v72 = *(float32x4_t *)(a1 + 320);
  v73 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v941, 2);
  v968 = *v34;
  v74 = vsubq_f32(*v34, v73);
  v955 = *(float32x4_t *)(a1 + 288);
  v75 = vsubq_f32(v955, v73);
  v76 = vsubq_f32(v71, v73);
  v77 = vsubq_f32(v72, v73);
  v78 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v941, 3);
  v965 = *(float32x4_t *)(a1 + 336);
  v79 = vsubq_f32(v965, v78);
  v959 = *(float32x4_t *)(a1 + 352);
  v80 = vsubq_f32(v959, v78);
  v962 = *(float32x4_t *)(a1 + 368);
  v81 = vsubq_f32(v962, v78);
  v957 = *(float32x4_t *)(a1 + 384);
  v82 = vsubq_f32(v957, v78);
  v83 = vmulq_f32(v62, v62);
  v84 = vmulq_f32(v61, v61);
  v85 = vmulq_f32(v60, v60);
  v86 = vmulq_f32(v59, v59);
  v87 = vmulq_f32(v70, v70);
  v88 = vmulq_f32(v69, v69);
  v89 = vmulq_f32(v68, v68);
  v90 = vmulq_f32(v67, v67);
  v91 = vmulq_f32(v77, v77);
  v92 = vmulq_f32(v76, v76);
  v54 = *(float32x2_t **)(a1 + 32);
  v93 = vmulq_f32(v75, v75);
  v94 = vmulq_f32(v74, v74);
  v95 = vmulq_f32(v82, v82);
  v96 = vmulq_f32(v81, v81);
  v97 = vmulq_f32(v80, v80);
  v98 = vmulq_f32(v79, v79);
  if (v54)
  {
    v99 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v89, *v54, 1), v85, COERCE_FLOAT(*(_OWORD *)v54->f32)), v93, *(float32x4_t *)v54->f32, 2), v97, *(float32x4_t *)v54->f32, 3), v931);
    v100 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v90, *v54, 1), v86, COERCE_FLOAT(*(_OWORD *)v54->f32)), v94, *(float32x4_t *)v54->f32, 2), v98, *(float32x4_t *)v54->f32, 3), v931);
    v101 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v88, *v54, 1), v84, COERCE_FLOAT(*(_OWORD *)v54->f32)), v92, *(float32x4_t *)v54->f32, 2), v96, *(float32x4_t *)v54->f32, 3), v931);
    v102 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v87, *v54, 1), v83, COERCE_FLOAT(*(_OWORD *)v54->f32)), v91, *(float32x4_t *)v54->f32, 2), v95, *(float32x4_t *)v54->f32, 3), v931);
  }
  else
  {
    v100 = vaddq_f32(vaddq_f32(vaddq_f32(v86, v90), v94), v98);
    v99 = vaddq_f32(vaddq_f32(vaddq_f32(v85, v89), v93), v97);
    v101 = vaddq_f32(vaddq_f32(vaddq_f32(v84, v88), v92), v96);
    v102 = vaddq_f32(vaddq_f32(vaddq_f32(v83, v87), v91), v95);
  }
  v103 = *(unsigned __int8 *)(a1 + 135);
  if (*(_BYTE *)(a1 + 135))
  {
    v104.i64[0] = 0x7F0000007FLL;
    v104.i64[1] = 0x7F0000007FLL;
    v101 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), v104, (int8x16_t)v101);
    v99 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), v104, (int8x16_t)v99);
    v100 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), v104, (int8x16_t)v100);
    v102 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), v104, (int8x16_t)v102);
  }
  v105 = a1 + 400;
  v106 = vmaxnmq_f32(v100, v101);
  v107 = vmaxnmq_f32(v99, v102);
  v108 = vbslq_s8((int8x16_t)vcgtq_f32(v101, v100), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
  v109 = (int8x16_t)vmaxnmq_f32(v106, v107);
  v110 = vbslq_s8((int8x16_t)vcgtq_f32(v107, v106), vbslq_s8((int8x16_t)vcgtq_f32(v102, v99), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v108);
  v111 = (float32x2_t)vextq_s8(v109, v109, 8uLL).u64[0];
  v112 = vmaxnm_f32(*(float32x2_t *)v109.i8, v111);
  v990[0] = vbsl_s8((int8x8_t)vcgt_f32(v111, *(float32x2_t *)v109.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v110, v110, 8uLL), *(int8x8_t *)v110.i8);
  v113 = *(float32x4_t *)(a1
                        + 400
                        + 16
                        * *(unsigned int *)((unint64_t)v990 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                           * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(v112, (float32x2_t)vdup_lane_s32((int32x2_t)v112, 1))) & 1))));
  v114 = vsubq_f32(v941, v113);
  v115 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 0);
  v116 = v57;
  v117 = vsubq_f32(v57, v115);
  v118 = v56;
  v119 = vsubq_f32(v56, v115);
  v120 = vsubq_f32(v974, v115);
  v121 = vsubq_f32(v977, v115);
  v122 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1);
  v123 = vsubq_f32(v66, v122);
  v124 = vsubq_f32(v971, v122);
  v125 = vsubq_f32(v63, v122);
  v126 = vsubq_f32(v64, v122);
  v127 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2);
  v128 = vsubq_f32(v968, v127);
  v129 = vsubq_f32(v955, v127);
  v130 = v71;
  v131 = vsubq_f32(v71, v127);
  v132 = vsubq_f32(v72, v127);
  v133 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 3);
  v134 = vsubq_f32(v965, v133);
  v135 = vsubq_f32(v959, v133);
  v136 = vsubq_f32(v962, v133);
  v137 = vsubq_f32(v957, v133);
  v914 = v121;
  v916 = v119;
  v138 = vmulq_n_f32(v121, v114.f32[0]);
  v924 = v123;
  v925 = v120;
  v139 = vmulq_n_f32(v120, v114.f32[0]);
  v140 = vmulq_n_f32(v119, v114.f32[0]);
  v944 = v117;
  v141 = vmulq_n_f32(v117, v114.f32[0]);
  v911 = v126;
  v913 = v125;
  v142 = vmulq_lane_f32(v126, *(float32x2_t *)v114.f32, 1);
  v143 = vmulq_lane_f32(v125, *(float32x2_t *)v114.f32, 1);
  v920 = v128;
  v922 = v124;
  v144 = vmulq_lane_f32(v124, *(float32x2_t *)v114.f32, 1);
  v145 = vmulq_lane_f32(v123, *(float32x2_t *)v114.f32, 1);
  v146 = vmulq_laneq_f32(v132, v114, 2);
  v147 = vmulq_laneq_f32(v131, v114, 2);
  v918 = v129;
  v148 = vmulq_laneq_f32(v129, v114, 2);
  v149 = vmulq_laneq_f32(v128, v114, 2);
  v150 = vmulq_laneq_f32(v137, v114, 3);
  v151 = vmulq_laneq_f32(v136, v114, 3);
  v152 = vmulq_laneq_f32(v135, v114, 3);
  v153 = vmulq_laneq_f32(v134, v114, 3);
  v909 = v141;
  v951 = v72;
  v953 = v66;
  v903 = v151;
  v905 = v152;
  v937 = v153;
  v939 = v150;
  v934 = v147;
  v936 = v146;
  v932 = v149;
  v899 = v139;
  v901 = v140;
  v928 = v143;
  v930 = v148;
  v895 = v142;
  v897 = v138;
  v927 = v144;
  if (v54)
  {
    v154 = v143;
    v155 = v138;
    v156 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v154, *v54, 1), v139, COERCE_FLOAT(*(_OWORD *)v54->f32)), v147, *(float32x4_t *)v54->f32, 2), v151, *(float32x4_t *)v54->f32, 3);
    v157 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v144, *v54, 1), v140, COERCE_FLOAT(*(_OWORD *)v54->f32)), v148, *(float32x4_t *)v54->f32, 2), v152, *(float32x4_t *)v54->f32, 3), v931);
    v158 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v145, *v54, 1), v141, COERCE_FLOAT(*(_OWORD *)v54->f32)), v149, *(float32x4_t *)v54->f32, 2), v153, *(float32x4_t *)v54->f32, 3), v931);
    v159 = vmulq_f32(v156, v931);
    v160 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v142, *v54, 1), v155, COERCE_FLOAT(*(_OWORD *)v54->f32)), v146, *(float32x4_t *)v54->f32, 2), v150, *(float32x4_t *)v54->f32, 3), v931);
  }
  else
  {
    v158 = vaddq_f32(v153, vaddq_f32(v149, vaddq_f32(v141, v145)));
    v161 = v151;
    v157 = vaddq_f32(v152, vaddq_f32(v148, vaddq_f32(v140, v144)));
    v159 = vaddq_f32(v161, vaddq_f32(v147, vaddq_f32(v139, v143)));
    v160 = vaddq_f32(v150, vaddq_f32(v146, vaddq_f32(v138, v142)));
  }
  v162 = v118;
  v163 = v130;
  v942 = _Q0;
  v893 = v145;
  if (v103)
  {
    v164.i64[0] = 0x7F0000007FLL;
    v164.i64[1] = 0x7F0000007FLL;
    v159 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), v164, (int8x16_t)v159);
    v157 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), v164, (int8x16_t)v157);
    v158 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), v164, (int8x16_t)v158);
    v160 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), v164, (int8x16_t)v160);
  }
  v165 = vmaxnmq_f32(v158, v159);
  v166 = vmaxnmq_f32(v157, v160);
  v167 = vbslq_s8((int8x16_t)vcgtq_f32(v159, v158), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
  v168 = vbslq_s8((int8x16_t)vcgtq_f32(v160, v157), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
  v169 = (int8x16_t)vmaxnmq_f32(v165, v166);
  v170 = vbslq_s8((int8x16_t)vcgtq_f32(v166, v165), v168, v167);
  v168.i64[0] = vextq_s8(v169, v169, 8uLL).u64[0];
  *(float32x2_t *)v165.f32 = vmaxnm_f32(*(float32x2_t *)v169.i8, *(float32x2_t *)v168.i8);
  *(int8x8_t *)v170.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v168.i8, *(float32x2_t *)v169.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL), *(int8x8_t *)v170.i8);
  v171 = (int32x2_t)vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v165.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v165.f32, 1)));
  v989 = v170.i64[0];
  v53 = *(float32x4_t *)(v105
                       + 16
                       * *(unsigned int *)((unint64_t)&v989 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v171.i8[0] & 1))));
  v55 = *(unsigned __int8 *)(a1 + 136);
  v172 = 127;
  if (!*(_BYTE *)(a1 + 136))
    v172 = 255;
  v907 = ReciprocalTable[v172];
  *(float *)v171.i32 = v907 * v907;
  v173 = (int8x16_t)vsubq_f32(v53, v113);
  v174.i64[0] = 0x8000000080000000;
  v174.i64[1] = 0x8000000080000000;
  v175 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  __asm { FMOV            V0.4S, #1.0 }
  v891 = _Q0;
  v177 = vdivq_f32(_Q0, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v175, vabdq_f32(v53, v113)), vorrq_s8(vandq_s8(v173, v174), (int8x16_t)v175), v173));
  v178 = vmulq_n_f32(v916, v177.f32[0]);
  v179 = vmulq_n_f32(v944, v177.f32[0]);
  v180 = vmulq_n_f32(v914, v177.f32[0]);
  v181 = vmulq_n_f32(v925, v177.f32[0]);
  v182 = vmulq_lane_f32(v913, *(float32x2_t *)v177.f32, 1);
  v183 = vmulq_lane_f32(v911, *(float32x2_t *)v177.f32, 1);
  v184 = vmulq_lane_f32(v924, *(float32x2_t *)v177.f32, 1);
  v185 = vmulq_lane_f32(v922, *(float32x2_t *)v177.f32, 1);
  v186 = vmulq_laneq_f32(v131, v177, 2);
  v187 = vmulq_laneq_f32(v132, v177, 2);
  v188 = vmulq_laneq_f32(v920, v177, 2);
  v189 = vmulq_laneq_f32(v918, v177, 2);
  v190 = vmulq_laneq_f32(v135, v177, 3);
  v191 = vmulq_laneq_f32(v134, v177, 3);
  v192 = vmulq_laneq_f32(v137, v177, 3);
  v193 = vmulq_laneq_f32(v136, v177, 3);
  v194 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v182, v182), v181, v181), v186, v186), v193, v193);
  v195 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v183, v183), v180, v180), v187, v187), v192, v192);
  v196 = (float32x4_t)vdupq_lane_s32(v171, 0);
  v197 = (int16x8_t)vcgtq_f32(v196, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v185, v185), v178, v178), v189, v189), v190, v190));
  v198 = (int16x8_t)vcgtq_f32(v196, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v184, v184), v179, v179), v188, v188), v191, v191));
  v199 = (int16x8_t)vcgtq_f32(v196, v195);
  v200 = (int16x8_t)vcgtq_f32(v196, v194);
  v201 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v198, v197), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v200, v199), (int8x16_t)xmmword_20631C0C0));
  v201.i16[0] = vaddvq_s16(v201);
  v202 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v201.i8);
  v202.i16[0] = vaddlv_u8(v202);
  v945 = v113;
  v203 = v113;
  v204 = v977;
  if (v202.i32[0] >= 2u)
  {
    v204 = v977;
    v203 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)v116), (float32x4_t)vandq_s8((int8x16_t)v200, (int8x16_t)v974)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v197, (int8x16_t)v162), (float32x4_t)vandq_s8((int8x16_t)v199, (int8x16_t)v977))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)v953), (float32x4_t)vandq_s8((int8x16_t)v200, (int8x16_t)v63)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v197, (int8x16_t)v971), (float32x4_t)vandq_s8((int8x16_t)v199, (int8x16_t)v64)))), vpaddq_f32(vaddq_f32(vaddq_f32(
                     (float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)v968),
                     (float32x4_t)vandq_s8((int8x16_t)v200, (int8x16_t)v163)),
                   vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v197, (int8x16_t)v955), (float32x4_t)vandq_s8((int8x16_t)v199, (int8x16_t)v951))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v198, (int8x16_t)v965), (float32x4_t)vandq_s8((int8x16_t)v200, (int8x16_t)v962)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v197, (int8x16_t)v959), (float32x4_t)vandq_s8((int8x16_t)v199, (int8x16_t)v957))))), ReciprocalTable[v202.u16[0]]);
  }
  v926 = v203;
  v205 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 0);
  v206 = vsubq_f32(v205, v116);
  v207 = vsubq_f32(v205, v162);
  v208 = vsubq_f32(v205, v204);
  v209 = vmulq_n_f32(vsubq_f32(v205, v974), v177.f32[0]);
  v210 = vmulq_n_f32(v208, v177.f32[0]);
  v211 = vmulq_n_f32(v207, v177.f32[0]);
  v212 = vmulq_n_f32(v206, v177.f32[0]);
  v213 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1);
  v214 = vsubq_f32(v213, v63);
  v215 = vsubq_f32(v213, v64);
  v216 = vsubq_f32(v213, v971);
  v12.i64[1] = v163.i64[1];
  v217 = vmulq_lane_f32(vsubq_f32(v213, v953), *(float32x2_t *)v177.f32, 1);
  v218 = vmulq_lane_f32(v216, *(float32x2_t *)v177.f32, 1);
  v219 = vmulq_lane_f32(v215, *(float32x2_t *)v177.f32, 1);
  v220 = vmulq_lane_f32(v214, *(float32x2_t *)v177.f32, 1);
  v221 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2);
  v222 = vsubq_f32(v221, v163);
  v223 = vsubq_f32(v221, v951);
  v224 = vsubq_f32(v221, v955);
  v225 = vmulq_laneq_f32(vsubq_f32(v221, v968), v177, 2);
  v226 = vmulq_laneq_f32(v224, v177, 2);
  v227 = vmulq_laneq_f32(v223, v177, 2);
  v228 = vmulq_laneq_f32(v222, v177, 2);
  v229 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3);
  v230 = vsubq_f32(v229, v965);
  v231 = vsubq_f32(v229, v959);
  v232 = vsubq_f32(v229, v957);
  v11 = vmulq_laneq_f32(vsubq_f32(v229, v962), v177, 3);
  v233 = vmulq_laneq_f32(v232, v177, 3);
  v234 = vmulq_laneq_f32(v231, v177, 3);
  v235 = vmulq_laneq_f32(v230, v177, 3);
  v236 = vmlaq_f32(vmulq_f32(v217, v217), v212, v212);
  v237 = (float32x4_t)vcgtq_f32(v196, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v220, v220), v209, v209), v228, v228), v11, v11));
  v238 = (int16x8_t)vcgtq_f32(v196, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v219, v219), v210, v210), v227, v227), v233, v233));
  v239 = (int16x8_t)vcgtq_f32(v196, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v218, v218), v211, v211), v226, v226), v234, v234));
  v240 = (float32x4_t)vcgtq_f32(v196, vmlaq_f32(vmlaq_f32(v236, v225, v225), v235, v235));
  v241 = (float32x4_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v240, v239), (int8x16_t)xmmword_20631C0D0);
  v242 = (float32x4_t)vorrq_s8((int8x16_t)v241, vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v237, v238), (int8x16_t)xmmword_20631C0C0));
  v242.i16[0] = vaddvq_s16((int16x8_t)v242);
  *(int8x8_t *)v242.f32 = vcnt_s8(*(int8x8_t *)v242.f32);
  v242.i16[0] = vaddlv_u8(*(uint8x8_t *)v242.f32);
  v243 = v242.i16[0];
  _Q15 = v931;
  if (v242.i32[0] >= 2u)
  {
    v244 = (float32x4_t)vandq_s8((int8x16_t)v240, (int8x16_t)v953);
    v245 = (float32x4_t)vandq_s8((int8x16_t)v237, (int8x16_t)v63);
    v246 = (float32x4_t)vandq_s8((int8x16_t)v240, (int8x16_t)v968);
    v247 = (float32x4_t)vandq_s8((int8x16_t)v237, (int8x16_t)v163);
    v248 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v240, (int8x16_t)v116), (float32x4_t)vandq_s8((int8x16_t)v237, (int8x16_t)v974));
    v249 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v240, (int8x16_t)v965), (float32x4_t)vandq_s8((int8x16_t)v237, (int8x16_t)v962));
    v237 = vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v239, (int8x16_t)v959), (float32x4_t)vandq_s8((int8x16_t)v238, (int8x16_t)v957));
    v241 = vaddq_f32(vaddq_f32(v244, v245), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v239, (int8x16_t)v971), (float32x4_t)vandq_s8((int8x16_t)v238, (int8x16_t)v64)));
    v242 = vpaddq_f32(vaddq_f32(v248, vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v239, (int8x16_t)v162), (float32x4_t)vandq_s8((int8x16_t)v238, (int8x16_t)v977))), v241);
    v240 = vpaddq_f32(v242, vpaddq_f32(vaddq_f32(vaddq_f32(v246, v247), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v239, (int8x16_t)v955), (float32x4_t)vandq_s8((int8x16_t)v238, (int8x16_t)v951))), vaddq_f32(v249, v237)));
    v53 = vmulq_n_f32(v240, ReciprocalTable[v243]);
  }
  _Q0 = v942;
  a11 = (int32x4_t)v945;
  v51 = v926;
  if (v16)
  {
    v240.i32[0] = v926.i32[3];
    if (v103)
    {
      if (v926.f32[3] != 0.0 && v53.f32[3] != 0.0)
      {
        v250 = vsubq_f32(v53, v926);
        v242.i32[0] = v250.i32[3];
        if (v250.f32[3] == 0.0)
        {
          if (v16 == 15)
          {
            v51 = 0uLL;
            goto LABEL_54;
          }
          v51 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
        }
        v241.i32[0] = 0;
        v252 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v241, v242), 0);
        v253 = (float32x4_t)vbslq_s8(v252, (int8x16_t)vnegq_f32(v250), (int8x16_t)v250);
        v254 = (float32x4_t)vbslq_s8(v252, (int8x16_t)v53, (int8x16_t)v51);
        v237.f32[0] = v254.f32[3] / v253.f32[3];
        v255 = vmlsq_lane_f32(v254, v253, *(float32x2_t *)v237.f32, 0);
        v253.f32[0] = -v907;
        v237.f32[0] = v907 + 1.0;
        if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v255, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v253.f32, 0)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v237.f32, 0), v255))) & 0x80000000) != 0)
        {
          v53 = (float32x4_t)vbslq_s8(v252, (int8x16_t)v51, (int8x16_t)v53);
          v51 = vminnmq_f32(vmaxnmq_f32(v255, (float32x4_t)0), v891);
        }
        else
        {
          if (v54)
          {
            v256 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v927, *v54, 1), v901, COERCE_FLOAT(*(_OWORD *)v54->f32)), v930, *(float32x4_t *)v54->f32, 2), v905, *(float32x4_t *)v54->f32, 3), v931);
            v257 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v893, *v54, 1), v909, COERCE_FLOAT(*(_OWORD *)v54->f32)), v932, *(float32x4_t *)v54->f32, 2), v937, *(float32x4_t *)v54->f32, 3), v931);
            v258 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v928, *v54, 1), v899, COERCE_FLOAT(*(_OWORD *)v54->f32)), v934, *(float32x4_t *)v54->f32, 2), v903, *(float32x4_t *)v54->f32, 3), v931);
            v259 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v895, *v54, 1), v897, COERCE_FLOAT(*(_OWORD *)v54->f32)), v936, *(float32x4_t *)v54->f32, 2), v939, *(float32x4_t *)v54->f32, 3), v931);
          }
          else
          {
            v257 = vaddq_f32(v937, vaddq_f32(v932, vaddq_f32(v909, v893)));
            v256 = vaddq_f32(v905, vaddq_f32(v930, vaddq_f32(v901, v927)));
            v258 = vaddq_f32(v903, vaddq_f32(v934, vaddq_f32(v899, v928)));
            v259 = vaddq_f32(v939, vaddq_f32(v936, vaddq_f32(v897, v895)));
          }
          v260 = vmaxnmq_f32(v257, v258);
          v261 = vmaxnmq_f32(v256, v259);
          v262 = vbslq_s8((int8x16_t)vcgtq_f32(v258, v257), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
          v263 = (int8x16_t)vmaxnmq_f32(v260, v261);
          v264 = vbslq_s8((int8x16_t)vcgtq_f32(v261, v260), vbslq_s8((int8x16_t)vcgtq_f32(v259, v256), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v262);
          v265 = (float32x2_t)vextq_s8(v263, v263, 8uLL).u64[0];
          v266 = vmaxnm_f32(*(float32x2_t *)v263.i8, v265);
          v988 = vbsl_s8((int8x8_t)vcgt_f32(v265, *(float32x2_t *)v263.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v264, v264, 8uLL), *(int8x8_t *)v264.i8);
          v53 = *(float32x4_t *)(v105
                               + 16
                               * *(unsigned int *)((unint64_t)&v988 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(v266, (float32x2_t)vdup_lane_s32((int32x2_t)v266, 1))) & 1))));
          if ((vmovn_s32(vcgtq_f32(v53, v945)).i8[6] & 1) != 0)
            a11.i32[3] = 0;
          else
            v53.i32[3] = 0;
          v51 = (float32x4_t)a11;
        }
      }
    }
    else
    {
      v251 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 3), v240), 0);
      v53 = (float32x4_t)vandq_s8((int8x16_t)v53, v251);
      v51 = (float32x4_t)vbicq_s8((int8x16_t)v926, v251);
    }
  }
LABEL_54:
  v267 = (float32x4_t)vdupq_n_s32(0x437F0000u);
  v268 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v51, (float32x4_t)0), _Q0), v267));
  v269 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v53, (float32x4_t)0), _Q0), v267));
  *(int8x8_t *)v267.f32 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v268), (int16x8_t)vcvtq_s32_f32(v269)));
  v270 = (int32x4_t)vsubq_f32(v268, v269);
  v11.i32[0] = 0;
  *(int8x8_t *)v270.i8 = vbsl_s8((int8x8_t)vdup_lane_s32(vcgt_f32(vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v270, 2), vadd_f32(*(float32x2_t *)v270.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v270.i8, 1))), *(float32x2_t *)v11.f32), 0), vext_s8(*(int8x8_t *)v267.f32, *(int8x8_t *)v267.f32, 4uLL), *(int8x8_t *)v267.f32);
  v267.i64[0] = v270.i64[0];
  v267.i64[1] = v270.i64[0];
  *(int8x8_t *)v267.f32 = vqtbl1_s8((int8x16_t)v267, (int8x8_t)0x707070703030303);
  v910 = vorr_s8(vbic_s8(*(int8x8_t *)v270.i8, vand_s8(vceqz_s8(*(int8x8_t *)v267.f32), (int8x8_t)0x101010101010101)), vand_s8(vceq_s8(*(int8x8_t *)v267.f32, (int8x8_t)-1), (int8x8_t)0x101010101010101));
  v271 = vmovl_u8((uint8x8_t)v910);
  v272 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v271.i8);
  v273 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  v274 = (float32x4_t)vdupq_n_s32(0xCB400000);
  v275 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v271), v273), v274);
  a11.i32[0] = 998277249;
  v929 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a11.i8, 0);
  v276 = vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8(v272, v273), v274), 0.0039216);
  v277 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v276.f32, 0);
  v278 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v276.f32, 1);
  v279 = vmlaq_n_f32(vnegq_f32(v276), v275, 0.0039216);
  v280 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v276, 2);
  v281 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v276, 3);
  v282 = v279.f32[3];
  if (v54)
  {
    v276.i32[0] = 0;
    a11.i32[0] = v55;
    v283 = (float32x4_t)vandq_s8(*(int8x16_t *)v54->f32, vorrq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(a11, (int32x4_t)v276), 0), (int8x16_t)xmmword_20631C0E0));
    v284 = vsubq_f32(*(float32x4_t *)(a1 + 192), v277);
    v285 = vsubq_f32(*(float32x4_t *)(a1 + 176), v277);
    v286 = vsubq_f32(*(float32x4_t *)(a1 + 160), v277);
    v287 = vsubq_f32(*(float32x4_t *)(a1 + 144), v277);
    v975 = *(float32x4_t *)(a1 + 208);
    v978 = *(float32x4_t *)(a1 + 256);
    v288 = vsubq_f32(v978, v278);
    v972 = *(float32x4_t *)(a1 + 240);
    v289 = vsubq_f32(v972, v278);
    v12 = *(float32x4_t *)(a1 + 224);
    v290 = vsubq_f32(v12, v278);
    v291 = vsubq_f32(v975, v278);
    v966 = *(float32x4_t *)(a1 + 320);
    v969 = *(float32x4_t *)(a1 + 288);
    v292 = vsubq_f32(v966, v280);
    v960 = *(float32x4_t *)(a1 + 304);
    v963 = *v34;
    v293 = vsubq_f32(v960, v280);
    v294 = vsubq_f32(v969, v280);
    v295 = vsubq_f32(*v34, v280);
    v296 = *(float32x4_t *)(a1 + 336);
    v297 = *(float32x4_t *)(a1 + 352);
    v298 = *(float32x4_t *)(a1 + 368);
    v299 = *(float32x4_t *)(a1 + 384);
    v300 = vmulq_f32(v279, v283);
    v301 = (int8x16_t)vmulq_f32(v279, v300);
    v302 = vaddv_f32(vadd_f32(*(float32x2_t *)v301.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v301, v301, 8uLL)));
    v303 = vsubq_f32(v299, v281);
    v304 = vsubq_f32(v298, v281);
    v305 = vsubq_f32(v297, v281);
    v306 = vsubq_f32(v296, v281);
    if (fabsf(v302) >= 0.000015259)
      v11.f32[0] = vrecpes_f32(v302);
    v307 = vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v289, *(float32x2_t *)v300.f32, 1), v285, v300.f32[0]), v293, v300, 2), v304, v300, 3), v11.f32[0]), _Q0);
    v308 = vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v288, *(float32x2_t *)v300.f32, 1), v284, v300.f32[0]), v292, v300, 2), v303, v300, 3), v11.f32[0]), _Q0);
    v309 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v291, *(float32x2_t *)v300.f32, 1), v287, v300.f32[0]), v295, v300, 2), v306, v300, 3), v11.f32[0]), _Q0), (float32x4_t)0);
    v310 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v290, *(float32x2_t *)v300.f32, 1), v286, v300.f32[0]), v294, v300, 2), v305, v300, 3), v11.f32[0]), _Q0), (float32x4_t)0);
    v311 = vmaxnmq_f32(v307, (float32x4_t)0);
    v312 = vmaxnmq_f32(v308, (float32x4_t)0);
    _Q15 = v931;
    v313 = *(float32x4_t *)(a1 + 144);
    v314 = *(float32x4_t *)(a1 + 160);
    v316 = *(float32x4_t *)(a1 + 176);
    v315 = *(float32x4_t *)(a1 + 192);
    v317 = *(float32x4_t *)(a1 + 224);
    v282 = v279.f32[3];
  }
  else
  {
    v313 = *(float32x4_t *)(a1 + 144);
    v314 = *(float32x4_t *)(a1 + 160);
    v316 = *(float32x4_t *)(a1 + 176);
    v315 = *(float32x4_t *)(a1 + 192);
    v317 = *(float32x4_t *)(a1 + 224);
    v972 = *(float32x4_t *)(a1 + 240);
    v975 = *(float32x4_t *)(a1 + 208);
    v978 = *(float32x4_t *)(a1 + 256);
    v318 = (int8x16_t)vmulq_f32(v279, v279);
    v960 = *(float32x4_t *)(a1 + 304);
    v963 = *v34;
    v966 = *(float32x4_t *)(a1 + 320);
    v969 = *(float32x4_t *)(a1 + 288);
    v296 = *(float32x4_t *)(a1 + 336);
    v297 = *(float32x4_t *)(a1 + 352);
    v298 = *(float32x4_t *)(a1 + 368);
    v299 = *(float32x4_t *)(a1 + 384);
    v319 = vrecpes_f32(vaddv_f32(vadd_f32(*(float32x2_t *)v318.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v318, v318, 8uLL))));
    __asm { FMOV            V18.4S, #1.0 }
    v309 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v975, v278), *(float32x2_t *)v279.f32, 1), vsubq_f32(v313, v277), v279.f32[0]), vsubq_f32(*v34, v280), v279, 2), vsubq_f32(v296, v281), v279, 3), v319), _Q18), (float32x4_t)0);
    v310 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v317, v278), *(float32x2_t *)v279.f32, 1), vsubq_f32(v314, v277), v279.f32[0]), vsubq_f32(v969, v280), v279, 2), vsubq_f32(v297, v281), v279, 3), v319), _Q18), (float32x4_t)0);
    v311 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v972, v278), *(float32x2_t *)v279.f32, 1), vsubq_f32(v316, v277), v279.f32[0]), vsubq_f32(v960, v280), v279, 2), vsubq_f32(v298, v281), v279, 3), v319), _Q18), (float32x4_t)0);
    v312 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v978, v278), *(float32x2_t *)v279.f32, 1), vsubq_f32(v315, v277), v279.f32[0]), vsubq_f32(v966, v280), v279, 2), vsubq_f32(v299, v281), v279, 3), v319), _Q18), (float32x4_t)0);
  }
  if ((char)v16 >= 1)
  {
    v321 = vrecpes_f32(v282);
    if (fabsf(v282) < 0.0039062)
      v321 = 0.0;
    v310 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), (int8x16_t)vmulq_n_f32(vsubq_f32(v297, v281), v321), (int8x16_t)v310);
    v309 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), (int8x16_t)vmulq_n_f32(vsubq_f32(v296, v281), v321), (int8x16_t)v309);
    v311 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), (int8x16_t)vmulq_n_f32(vsubq_f32(v298, v281), v321), (int8x16_t)v311);
    v312 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), (int8x16_t)vmulq_n_f32(vsubq_f32(v299, v281), v321), (int8x16_t)v312);
  }
  __asm { FMOV            V19.4S, #15.0 }
  v323 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(v309, (float32x4_t)0), _Q0), _Q19);
  v324 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(v310, (float32x4_t)0), _Q0), _Q19);
  v325 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(v311, (float32x4_t)0), _Q0), _Q19);
  v326 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v312, (float32x4_t)0), _Q0), _Q19));
  v12.i64[0] = 0x3D8000003D888889;
  v327 = a1;
  do
  {
    v328 = v327;
    v327 = *(_QWORD *)(v327 + 40);
  }
  while (v327);
  if (v54)
    _Q0 = vmulq_f32(*(float32x4_t *)v54->f32, _Q15);
  v329 = vrndxq_f32(v324);
  v330 = vrndxq_f32(v325);
  v331 = vrndxq_f32(v323);
  v323.i32[1] = 0;
  v323.i64[1] = 0;
  v912 = 0u;
  v888 = v311;
  v889 = v309;
  v886 = v312;
  v887 = v310;
  v906 = v331;
  v908 = v326;
  v902 = v330;
  v904 = v329;
  if (*(_WORD *)(v328 + 132) == 324)
  {
    v323.i32[0] = 0;
    v332 = vmulq_n_f32(v326, 0.066667);
    v333 = vmulq_n_f32(v329, 0.066667);
    v334 = v277;
    v335 = v331;
    v336 = v277;
    v337 = v330;
    v338 = vmlaq_n_f32(v277, v332, v279.f32[0]);
    v339 = vmlaq_n_f32(v277, v333, v279.f32[0]);
    v340 = vmlaq_lane_f32(v278, v333, *(float32x2_t *)v279.f32, 1);
    v341 = vmlaq_laneq_f32(v280, v333, v279, 2);
    v342 = vmlaq_laneq_f32(v281, v333, v279, 3);
    v343 = vmlaq_lane_f32(v278, v332, *(float32x2_t *)v279.f32, 1);
    v344 = vmlaq_laneq_f32(v280, v332, v279, 2);
    v345 = vmlaq_laneq_f32(v281, v332, v279, 3);
    v346 = vmulq_n_f32(v335, 0.066667);
    v347 = vmlaq_n_f32(v336, v346, v279.f32[0]);
    v348 = vmlaq_lane_f32(v278, v346, *(float32x2_t *)v279.f32, 1);
    v349 = vmlaq_laneq_f32(v280, v346, v279, 2);
    v350 = vmlaq_laneq_f32(v281, v346, v279, 3);
    v351 = vmulq_n_f32(v337, 0.066667);
    v352 = vmlaq_n_f32(v334, v351, v279.f32[0]);
    v353 = vmlaq_lane_f32(v278, v351, *(float32x2_t *)v279.f32, 1);
    v354 = vmlaq_laneq_f32(v280, v351, v279, 2);
    v355 = vmlaq_laneq_f32(v281, v351, v279, 3);
    v356 = vsubq_f32(v339, v314);
    v357 = vsubq_f32(v352, v316);
    v358 = vsubq_f32(v355, v298);
    v359 = vsubq_f32(v350, v296);
    v360 = vsubq_f32(v345, v299);
    v361 = vsubq_f32(v342, v297);
    v12.i8[0] = *(_BYTE *)(a1 + 135);
    v362 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v12, (int8x16_t)v323), 0);
    __asm { FMOV            V30.4S, #1.0 }
    v364 = (float32x4_t)vbslq_s8(v362, _Q30, (int8x16_t)v297);
    v365 = (float32x4_t)vbslq_s8(v362, _Q30, (int8x16_t)v299);
    v366 = (float32x4_t)vbslq_s8(v362, _Q30, (int8x16_t)v296);
    v367 = (float32x4_t)vbslq_s8(v362, _Q30, (int8x16_t)v298);
    v368 = vmulq_f32(v357, v367);
    v369 = vmulq_f32(vsubq_f32(v347, v313), v366);
    v370 = vmulq_f32(vsubq_f32(v338, v315), v365);
    v371 = vmulq_f32(v356, v364);
    v372 = vmulq_f32(vsubq_f32(v340, v317), v364);
    v373 = vmulq_f32(vsubq_f32(v343, v978), v365);
    v374 = vmulq_f32(vsubq_f32(v348, v975), v366);
    v375 = vmulq_f32(vsubq_f32(v353, v972), v367);
    v376 = vmulq_f32(vsubq_f32(v341, v969), v364);
    v377 = vmulq_f32(vsubq_f32(v344, v966), v365);
    v378 = vmulq_f32(vsubq_f32(v349, v963), v366);
    v379 = vmulq_f32(vsubq_f32(v354, v960), v367);
    v380 = vmulq_f32(v371, v371);
    v381 = vmulq_f32(v370, v370);
    v382 = vmulq_f32(v369, v369);
    v383 = vmulq_f32(v368, v368);
    v384 = vmulq_f32(v375, v375);
    v385 = vmulq_f32(v374, v374);
    v386 = vmulq_f32(v373, v373);
    v387 = vmulq_f32(v372, v372);
    v388 = vmulq_f32(v379, v379);
    v389 = vmulq_f32(v378, v378);
    v390 = vmulq_f32(v377, v377);
    v391 = vmulq_f32(v376, v376);
    v392 = vmulq_f32(v361, v361);
    v393 = vmulq_f32(v360, v360);
    v394 = vmulq_f32(v359, v359);
    v395 = vmulq_f32(v358, v358);
    v396 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v384, *(float32x2_t *)_Q0.f32, 1), v383, _Q0.f32[0]), v388, _Q0, 2), v395, _Q0, 3);
    v397 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v385, *(float32x2_t *)_Q0.f32, 1), v382, _Q0.f32[0]), v389, _Q0, 2), v394, _Q0, 3);
    v398 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v386, *(float32x2_t *)_Q0.f32, 1), v381, _Q0.f32[0]), v390, _Q0, 2), v393, _Q0, 3);
    v399 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v387, *(float32x2_t *)_Q0.f32, 1), v380, _Q0.f32[0]), v391, _Q0, 2), v392, _Q0, 3);
    v400 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32(v382, v383), vaddq_f32(v380, v381)), vaddq_f32(vaddq_f32(v385, v384), vaddq_f32(v387, v386))), vpaddq_f32(vaddq_f32(vaddq_f32(v389, v388), vaddq_f32(v391, v390)), vaddq_f32(vaddq_f32(v394, v395), vaddq_f32(v392, v393))));
    v884 = v398;
    v885 = v399;
    v882 = v396;
    v883 = v397;
    v401 = vaddq_f32(vaddq_f32(v397, v396), vaddq_f32(v399, v398));
    v401.i64[0] = vpaddq_f32(v401, v401).u64[0];
    *(float32x2_t *)v317.f32 = vpadd_f32(*(float32x2_t *)v401.f32, *(float32x2_t *)v401.f32);
  }
  else
  {
    v317.i32[0] = 2139095040;
    v400 = 0uLL;
  }
  v933 = a2[1];
  if (v317.f32[0] <= v933)
  {
    v407 = 0;
    v408 = 0uLL;
    goto LABEL_80;
  }
  if (*(_QWORD *)(a1 + 40))
  {
    v402 = (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v400), (int8x16_t)v400, 8uLL);
    v403 = vmaxnmq_f32(v400, v402);
    v404 = vminnmq_f32(v400, v402);
    v405 = vminnmq_f32(v404, (float32x4_t)vrev64q_s32((int32x4_t)v404));
    v405.f32[0] = 0.25 * vmlaq_f32(vmaxnmq_f32(v403, (float32x4_t)vrev64q_s32((int32x4_t)v403)), _Q15, v405).f32[0];
    v406 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v400, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v405.f32, 0)), (int8x16_t)xmmword_20631C0F0));
    if (!v55)
      v406 |= 8u;
  }
  else
  {
    v409 = vmaxnmq_f32(v400, (float32x4_t)vextq_s8((int8x16_t)v400, (int8x16_t)v400, 8uLL));
    v406 = vaddvq_s32((int32x4_t)vandq_s8((int8x16_t)vceqq_f32(vmaxnmq_f32(v409, (float32x4_t)vrev64q_s32((int32x4_t)v409)), v400), (int8x16_t)xmmword_20631C0F0));
    if ((v406 & 8) != 0)
      v406 &= 8u;
  }
  v407 = 0;
  if (v317.f32[0] >= v933)
  {
    v919 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v941.f32, 1);
    v921 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v941.f32, 0);
    v410 = vdupq_laneq_s32((int32x4_t)v941, 2);
    v411 = vdupq_laneq_s32((int32x4_t)v941, 3);
    v915 = (float32x4_t)v411;
    v917 = (float32x4_t)v410;
    *(float *)v411.i32 = 0.33333 * (float)(0.33333 * 0.75);
    v412 = vdupq_lane_s32(*(int32x2_t *)v411.i8, 0);
    v938 = (float32x4_t)v412;
    v413 = a1 + 400;
    *(float *)v412.i32 = 0.33333 * (float)(0.33333 * 0.25);
    v898 = v412.i64[0];
    v414 = vdupq_lane_s32(*(int32x2_t *)v412.i8, 0);
    v900 = (float32x4_t)v414;
    *(float *)v410.i32 = -0.007874;
    *(float *)v414.i32 = 0.007874 + 1.0;
    v880 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v414.i8, 0);
    v881 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v410.i8, 0);
    v415 = 1;
    v912 = 0u;
    v894 = 0u;
    v896 = 0u;
    v892 = 0u;
    v416 = 1;
    while ((v416 & v406) == 0)
    {
LABEL_151:
      v416 *= 2;
      v415 = v416 & 0xFE;
      if (v415 > 8 || v317.f32[0] < v933)
        goto LABEL_156;
    }
    v417 = __clz(v415);
    v418 = 31 - v417;
    v419 = _ZZL19FindDualWeights_4x4PK9Block_4x4PK12ColorVectorshPDv16_fE11kVectorMask[31 - v417];
    v420 = (float32x4_t *)(a1 + 144 + ((31 - v417) << 6));
    v422 = *v420;
    v421 = v420[1];
    v424 = v420[2];
    v423 = v420[3];
    v987 = v941;
    v976 = *(float32x4_t *)(a1 + 192);
    v979 = *(float32x4_t *)(a1 + 176);
    v425 = vsubq_f32(v976, v921);
    v426 = vsubq_f32(v979, v921);
    v967 = *(float32x4_t *)(a1 + 160);
    v970 = *(float32x4_t *)(a1 + 144);
    v427 = vsubq_f32(v970, v921);
    v428 = vsubq_f32(v967, v921);
    v429 = (const float *)((unint64_t)&v987 & 0xFFFFFFFFFFFFFFF3 | (4 * ((31 - v417) & 3)));
    v961 = *(float32x4_t *)(a1 + 256);
    v964 = *(float32x4_t *)(a1 + 208);
    v430 = vsubq_f32(v961, v919);
    v431 = vsubq_f32(*(float32x4_t *)(a1 + 240), v919);
    v432 = vsubq_f32(v964, v919);
    v973 = *(float32x4_t *)(a1 + 224);
    v433 = vsubq_f32(v973, v919);
    v950 = *(float32x4_t *)(a1 + 304);
    v434 = vsubq_f32(v950, v917);
    v954 = *v34;
    v956 = *(float32x4_t *)(a1 + 240);
    v435 = vsubq_f32(*v34, v917);
    v958 = *(float32x4_t *)(a1 + 288);
    v436 = vsubq_f32(v958, v917);
    v437 = vld1q_dup_f32(v429);
    v943 = v423;
    v438 = vsubq_f32(v423, v437);
    v439 = vsubq_f32(v424, v437);
    v440 = vsubq_f32(v421, v437);
    v441 = vsubq_f32(v422, v437);
    v442 = *(float32x2_t **)(a1 + 32);
    v443 = vmulq_f32(v428, v428);
    v444 = vmulq_f32(v427, v427);
    v445 = vmulq_f32(v426, v426);
    v446 = vmulq_f32(v425, v425);
    v447 = vmulq_f32(v433, v433);
    v448 = vmulq_f32(v432, v432);
    v449 = vmulq_f32(v431, v431);
    v450 = vmulq_f32(v430, v430);
    v451 = vmulq_f32(v436, v436);
    v452 = vmulq_f32(v435, v435);
    v453 = vmulq_f32(v434, v434);
    v952 = *(float32x4_t *)(a1 + 320);
    v454 = vsubq_f32(v952, v917);
    v455 = vmulq_f32(v454, v454);
    v948 = *(float32x4_t *)(a1 + 336);
    v949 = *(float32x4_t *)(a1 + 352);
    v456 = vsubq_f32(v949, v915);
    v457 = vmulq_f32(v456, v456);
    v458 = vsubq_f32(v948, v915);
    v459 = vmulq_f32(v458, v458);
    v946 = *(float32x4_t *)(a1 + 368);
    v947 = *(float32x4_t *)(a1 + 384);
    v460 = vsubq_f32(v946, v915);
    v461 = vmulq_f32(v460, v460);
    v462 = vsubq_f32(v947, v915);
    v463 = vmulq_f32(v462, v462);
    if (v442)
    {
      v464 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v450, *v442, 1), v446, COERCE_FLOAT(*(_OWORD *)v442->f32)), v455, *(float32x4_t *)v442->f32, 2), v463, *(float32x4_t *)v442->f32, 3), _Q15);
      v465 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v449, *v442, 1), v445, COERCE_FLOAT(*(_OWORD *)v442->f32)), v453, *(float32x4_t *)v442->f32, 2), v461, *(float32x4_t *)v442->f32, 3), _Q15);
      v466 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v448, *v442, 1), v444, COERCE_FLOAT(*(_OWORD *)v442->f32)), v452, *(float32x4_t *)v442->f32, 2), v459, *(float32x4_t *)v442->f32, 3), _Q15);
      v467 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v447, *v442, 1), v443, COERCE_FLOAT(*(_OWORD *)v442->f32)), v451, *(float32x4_t *)v442->f32, 2), v457, *(float32x4_t *)v442->f32, 3), _Q15);
      v986 = *(_OWORD *)v442->f32;
      v468 = (const float *)((unint64_t)&v986 & 0xFFFFFFFFFFFFFFF3 | (4 * (v418 & 3)));
      v469 = vld1q_dup_f32(v468);
      v470 = vnegq_f32(v469);
      v471 = vmlaq_f32(v467, v440, vmulq_f32(v440, v470));
      v472 = vmlaq_f32(v466, v441, vmulq_f32(v441, v470));
      v473 = vmlaq_f32(v465, v439, vmulq_f32(v439, v470));
      v474 = vmlaq_f32(v464, v438, vmulq_f32(v438, v470));
    }
    else
    {
      v446 = vaddq_f32(v446, v450);
      v472 = vmlsq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v444, v448), v452), v459), v441, v441);
      v471 = vmlsq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v443, v447), v451), v457), v440, v440);
      v473 = vmlsq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v445, v449), v453), v461), v439, v439);
      v474 = vmlsq_f32(vaddq_f32(vaddq_f32(v446, v455), v463), v438, v438);
    }
    v475 = *(unsigned __int8 *)(a1 + 135);
    v476 = v472;
    v477 = v471;
    v478 = v473;
    v479 = v474;
    if (*(_BYTE *)(a1 + 135))
    {
      v480.i64[0] = 0x7F0000007FLL;
      v480.i64[1] = 0x7F0000007FLL;
      v478 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), v480, (int8x16_t)v473);
      v477 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), v480, (int8x16_t)v471);
      v476 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), v480, (int8x16_t)v472);
      v479 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), v480, (int8x16_t)v474);
    }
    v481 = vmaxnmq_f32(v476, v478);
    v482 = vmaxnmq_f32(v477, v479);
    v483 = vbslq_s8((int8x16_t)vcgtq_f32(v478, v476), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
    v484 = vbslq_s8((int8x16_t)vcgtq_f32(v479, v477), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
    v485 = (int8x16_t)vmaxnmq_f32(v481, v482);
    v486 = vbslq_s8((int8x16_t)vcgtq_f32(v482, v481), v484, v483);
    v484.i64[0] = vextq_s8(v485, v485, 8uLL).u64[0];
    v487 = vmaxnm_f32(*(float32x2_t *)v485.i8, *(float32x2_t *)v484.i8);
    v985 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v484.i8, *(float32x2_t *)v485.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v486, v486, 8uLL), *(int8x8_t *)v486.i8);
    v488 = *(float32x4_t *)(v413
                          + 16
                          * *(unsigned int *)((unint64_t)&v985 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                              * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(v487, (float32x2_t)vdup_lane_s32((int32x2_t)v487, 1))) & 1))));
    v489 = (int8x16_t)vcltzq_s32(v419);
    v490 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v941, v488), v489);
    if (v442)
      v491 = vmulq_f32(*(float32x4_t *)v442->f32, v490);
    else
      v491 = vmulq_f32(v490, (float32x4_t)vdupq_n_s32(0x3EAAAAABu));
    v492 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v488.f32, 0);
    v493 = vsubq_f32(v976, v492);
    v494 = vsubq_f32(v979, v492);
    v495 = vsubq_f32(v970, v492);
    v496 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v488.f32, 1);
    v497 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v973, v496), *(float32x2_t *)v491.f32, 1), vsubq_f32(v967, v492), v491.f32[0]);
    v498 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v964, v496), *(float32x2_t *)v491.f32, 1), v495, v491.f32[0]);
    v499 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v956, v496), *(float32x2_t *)v491.f32, 1), v494, v491.f32[0]);
    v500 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v488, 2);
    v501 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v961, v496), *(float32x2_t *)v491.f32, 1), v493, v491.f32[0]), vsubq_f32(v952, v500), v491, 2);
    v502 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v488, 3);
    v503 = vmlaq_laneq_f32(vmlaq_laneq_f32(v497, vsubq_f32(v958, v500), v491, 2), vsubq_f32(v949, v502), v491, 3);
    v504 = vmlaq_laneq_f32(vmlaq_laneq_f32(v498, vsubq_f32(v954, v500), v491, 2), vsubq_f32(v948, v502), v491, 3);
    v505 = vmlaq_laneq_f32(vmlaq_laneq_f32(v499, vsubq_f32(v950, v500), v491, 2), vsubq_f32(v946, v502), v491, 3);
    v506 = vmlaq_laneq_f32(v501, vsubq_f32(v947, v502), v491, 3);
    if (v475)
    {
      v507.i64[0] = 0x7F0000007FLL;
      v507.i64[1] = 0x7F0000007FLL;
      v505 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), v507, (int8x16_t)v505);
      v503 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), v507, (int8x16_t)v503);
      v504 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), v507, (int8x16_t)v504);
      v506 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), v507, (int8x16_t)v506);
    }
    v508 = vmaxnmq_f32(v504, v505);
    v509 = vmaxnmq_f32(v503, v506);
    v510 = vbslq_s8((int8x16_t)vcgtq_f32(v505, v504), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
    v511 = (int8x16_t)vmaxnmq_f32(v508, v509);
    v512 = vbslq_s8((int8x16_t)vcgtq_f32(v509, v508), vbslq_s8((int8x16_t)vcgtq_f32(v506, v503), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v510);
    v508.i64[0] = vextq_s8(v511, v511, 8uLL).u64[0];
    *(float32x2_t *)v510.i8 = vmaxnm_f32(*(float32x2_t *)v511.i8, *(float32x2_t *)v508.f32);
    v984 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v508.f32, *(float32x2_t *)v511.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v512, v512, 8uLL), *(int8x8_t *)v512.i8);
    v513 = *(float32x4_t *)(v413
                          + 16
                          * *(unsigned int *)((unint64_t)&v984 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                              * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v510.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v510.i8, 1))) & 1))));
    v514 = v422;
    v515 = v421;
    v516 = v424;
    v517 = v423;
    v518 = v422;
    v519 = v421;
    v520 = v424;
    v521 = v423;
    if ((v415 & 8) == 0)
    {
      v514 = v422;
      v515 = v421;
      v516 = v424;
      v517 = v423;
      v518 = v422;
      v519 = v421;
      v520 = v424;
      v521 = v423;
      if (v475)
      {
        v522 = (int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768));
        v523 = (int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720));
        v524 = (int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736));
        v525 = (int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752));
        v526.i64[0] = 0x7F0000007FLL;
        v526.i64[1] = 0x7F0000007FLL;
        v516 = (float32x4_t)vbslq_s8(v525, v526, (int8x16_t)v424);
        v515 = (float32x4_t)vbslq_s8(v524, v526, (int8x16_t)v421);
        v514 = (float32x4_t)vbslq_s8(v523, v526, (int8x16_t)v422);
        v517 = (float32x4_t)vbslq_s8(v522, v526, (int8x16_t)v423);
        v446 = (float32x4_t)vdupq_n_s32(0x7F800000u);
        v520 = (float32x4_t)vbslq_s8(v525, (int8x16_t)v446, (int8x16_t)v424);
        v519 = (float32x4_t)vbslq_s8(v524, (int8x16_t)v446, (int8x16_t)v421);
        v518 = (float32x4_t)vbslq_s8(v523, (int8x16_t)v446, (int8x16_t)v422);
        v521 = (float32x4_t)vbslq_s8(v522, (int8x16_t)v446, (int8x16_t)v423);
      }
    }
    v940 = (int8x16_t)v421;
    v527 = (int8x16_t)v424;
    v446.i32[0] = 0;
    v528 = vmaxnmq_f32(vmaxnmq_f32(v514, v516), vmaxnmq_f32(v515, v517));
    v529 = vminnmq_f32(vminnmq_f32(v518, v520), vminnmq_f32(v519, v521));
    v530 = vmaxnmq_f32(v528, (float32x4_t)vextq_s8((int8x16_t)v528, (int8x16_t)v528, 8uLL));
    v531 = vminnmq_f32(v529, (float32x4_t)vextq_s8((int8x16_t)v529, (int8x16_t)v529, 8uLL));
    v532 = (int8x16_t)vmaxnmq_f32(v530, (float32x4_t)vrev64q_s32((int32x4_t)v530));
    v533 = (float32x4_t)vrev64q_s32((int32x4_t)v531);
    v534 = vcgtq_f32(v488, v513);
    if ((_DWORD)v417 == 30)
      v535 = v534.i32[0];
    else
      v535 = v534.i32[1];
    v534.i32[0] = v535;
    v536 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v534, (int32x4_t)v446), 0);
    v537 = (int8x16_t)vminnmq_f32(v531, v533);
    v538 = vbslq_s8(v536, v532, v537);
    v539 = vbslq_s8(v536, v537, v532);
    v540 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)v489, 0x1FuLL));
    v541 = (float32x4_t)vbslq_s8(v540, v539, (int8x16_t)v488);
    v542 = (float32x4_t)vbslq_s8(v540, v538, (int8x16_t)v513);
    v543 = (int8x16_t)vsubq_f32(v542, v541);
    v544.i64[0] = 0x8000000080000000;
    v544.i64[1] = 0x8000000080000000;
    v545 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v546 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v545, vabdq_f32(v542, v541)), vorrq_s8(vandq_s8(v543, v544), (int8x16_t)v545), v543);
    __asm { FMOV            V0.4S, #1.0 }
    v548 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v541.f32, 0);
    v549 = vdivq_f32(_Q0, v546);
    v1017 = vmulq_n_f32(vsubq_f32(v976, v548), v549.f32[0]);
    v1016 = vmulq_n_f32(vsubq_f32(v979, v548), v549.f32[0]);
    v1015 = vmulq_n_f32(vsubq_f32(v967, v548), v549.f32[0]);
    v1014 = vmulq_n_f32(vsubq_f32(v970, v548), v549.f32[0]);
    v550 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v541.f32, 1);
    v1021 = vmulq_lane_f32(vsubq_f32(v961, v550), *(float32x2_t *)v549.f32, 1);
    v1020 = vmulq_lane_f32(vsubq_f32(v956, v550), *(float32x2_t *)v549.f32, 1);
    v551 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v541, 2);
    v1019 = vmulq_lane_f32(vsubq_f32(v973, v550), *(float32x2_t *)v549.f32, 1);
    v1018 = vmulq_lane_f32(vsubq_f32(v964, v550), *(float32x2_t *)v549.f32, 1);
    v1025 = vmulq_laneq_f32(vsubq_f32(v952, v551), v549, 2);
    v1024 = vmulq_laneq_f32(vsubq_f32(v950, v551), v549, 2);
    v1023 = vmulq_laneq_f32(vsubq_f32(v958, v551), v549, 2);
    v1022 = vmulq_laneq_f32(vsubq_f32(v954, v551), v549, 2);
    v552 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v541, 3);
    v1029 = vmulq_laneq_f32(vsubq_f32(v947, v552), v549, 3);
    v1028 = vmulq_laneq_f32(vsubq_f32(v946, v552), v549, 3);
    v1027 = vmulq_laneq_f32(vsubq_f32(v949, v552), v549, 3);
    v1026 = vmulq_laneq_f32(vsubq_f32(v948, v552), v549, 3);
    v553 = &v1014 + 4 * v418;
    v555 = v553[2];
    v554 = v553[3];
    v556 = *v553;
    v557 = v553[1];
    v558 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1021, v1021), v1017, v1017), v1025, v1025), v1029, v1029), v554, v554));
    v559 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1020, v1020), v1016, v1016), v1024, v1024), v1028, v1028), v555, v555));
    v560 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1019, v1019), v1015, v1015), v1023, v1023), v1027, v1027), v557, v557));
    v561 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1018, v1018), v1014, v1014), v1022, v1022), v1026, v1026), v556, v556));
    v935 = v317;
    if (v475)
    {
      v560 = (int16x8_t)vbicq_s8((int8x16_t)v560, *(int8x16_t *)(a1 + 736));
      v561 = (int16x8_t)vbicq_s8((int8x16_t)v561, *(int8x16_t *)(a1 + 720));
      v559 = (int16x8_t)vbicq_s8((int8x16_t)v559, *(int8x16_t *)(a1 + 752));
      v558 = (int16x8_t)vbicq_s8((int8x16_t)v558, *(int8x16_t *)(a1 + 768));
    }
    v562 = (uint16x4_t)vmovn_s32((int32x4_t)v489);
    v563 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v561, v560), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v559, v558), (int8x16_t)xmmword_20631C0C0));
    v563.i16[0] = vaddvq_s16(v563);
    v564 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v563.i8);
    v564.i16[0] = vaddlv_u8(v564);
    if (v564.i32[0] >= 2u)
    {
      v565 = (int8x16_t)vcltzq_s32((int32x4_t)v559);
      v566 = (int8x16_t)vcltzq_s32((int32x4_t)v561);
      v567 = (int8x16_t)vcltzq_s32((int32x4_t)v558);
      v568 = (int8x16_t)vcltzq_s32((int32x4_t)v560);
      v541 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v562), 0x1FuLL)), v539, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v566, (int8x16_t)v970), (float32x4_t)vandq_s8(v565, (int8x16_t)v979)), vaddq_f32((float32x4_t)vandq_s8(v568, (int8x16_t)v967), (float32x4_t)vandq_s8(v567, (int8x16_t)v976))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v566, (int8x16_t)v964), (float32x4_t)vandq_s8(v565, (int8x16_t)v956)), vaddq_f32((float32x4_t)vandq_s8(v568, (int8x16_t)v973), (float32x4_t)vandq_s8(v567, (int8x16_t)v961)))),
                                           vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v566, (int8x16_t)v954), (float32x4_t)vandq_s8(v565, (int8x16_t)v950)), vaddq_f32((float32x4_t)vandq_s8(v568, (int8x16_t)v958), (float32x4_t)vandq_s8(v567, (int8x16_t)v952))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v566, (int8x16_t)v948), (float32x4_t)vandq_s8(v565, (int8x16_t)v946)), vaddq_f32((float32x4_t)vandq_s8(v568, (int8x16_t)v949), (float32x4_t)vandq_s8(v567, (int8x16_t)v947))))), ReciprocalTable[v564.u16[0]]));
    }
    v539.i32[0] = 0;
    v923 = v545;
    if (v416 != 8)
    {
      v569 = (int16x8_t)vcgtq_f32(v900, vmulq_f32(v556, v556));
      v570 = (int16x8_t)vcgtq_f32(v900, vmulq_f32(v557, v557));
      v571 = (int16x8_t)vcgtq_f32(v900, vmulq_f32(v555, v555));
      v572 = (int16x8_t)vcgtq_f32(v900, vmulq_f32(v554, v554));
      if (v475)
      {
        v570 = (int16x8_t)vbicq_s8((int8x16_t)v570, *(int8x16_t *)(a1 + 736));
        v569 = (int16x8_t)vbicq_s8((int8x16_t)v569, *(int8x16_t *)(a1 + 720));
        v571 = (int16x8_t)vbicq_s8((int8x16_t)v571, *(int8x16_t *)(a1 + 752));
        v572 = (int16x8_t)vbicq_s8((int8x16_t)v572, *(int8x16_t *)(a1 + 768));
      }
      v573 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v569, v570), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v571, v572), (int8x16_t)xmmword_20631C0C0));
      v573.i16[0] = vaddvq_s16(v573);
      v574 = (int32x2_t)vcnt_s8(*(int8x8_t *)v573.i8);
      v574.i16[0] = vaddlv_u8((uint8x8_t)v574);
      if (v574.i32[0] >= 2u)
      {
        v575 = vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v422, (int8x16_t)vcltzq_s32((int32x4_t)v569)), (float32x4_t)vandq_s8(v527, (int8x16_t)vcltzq_s32((int32x4_t)v571))), vaddq_f32((float32x4_t)vandq_s8(v940, (int8x16_t)vcltzq_s32((int32x4_t)v570)), (float32x4_t)vandq_s8((int8x16_t)v943, (int8x16_t)vcltzq_s32((int32x4_t)v572))));
        v575.i64[0] = vpaddq_f32(v575, v575).u64[0];
        *(float *)v574.i32 = ReciprocalTable[v574.u16[0]]
                           * vpadd_f32(*(float32x2_t *)v575.f32, *(float32x2_t *)v575.f32).f32[0];
        v541 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v562), 0x1FuLL)), (int8x16_t)vdupq_lane_s32(v574, 0), (int8x16_t)v541);
      }
      v539.i64[0] = v898;
    }
    v576 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v542.f32, 0);
    v577 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v542.f32, 1);
    v578 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v542, 2);
    v579 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v542, 3);
    v1019 = vmulq_lane_f32(vsubq_f32(v577, v973), *(float32x2_t *)v549.f32, 1);
    v1015 = vmulq_n_f32(vsubq_f32(v576, v967), v549.f32[0]);
    v1014 = vmulq_n_f32(vsubq_f32(v576, v970), v549.f32[0]);
    v1018 = vmulq_lane_f32(vsubq_f32(v577, v964), *(float32x2_t *)v549.f32, 1);
    v1020 = vmulq_lane_f32(vsubq_f32(v577, v956), *(float32x2_t *)v549.f32, 1);
    v1016 = vmulq_n_f32(vsubq_f32(v576, v979), v549.f32[0]);
    v1017 = vmulq_n_f32(vsubq_f32(v576, v976), v549.f32[0]);
    v1021 = vmulq_lane_f32(vsubq_f32(v577, v961), *(float32x2_t *)v549.f32, 1);
    v1025 = vmulq_laneq_f32(vsubq_f32(v578, v952), v549, 2);
    v1022 = vmulq_laneq_f32(vsubq_f32(v578, v954), v549, 2);
    v1023 = vmulq_laneq_f32(vsubq_f32(v578, v958), v549, 2);
    v1024 = vmulq_laneq_f32(vsubq_f32(v578, v950), v549, 2);
    v1027 = vmulq_laneq_f32(vsubq_f32(v579, v949), v549, 3);
    v1026 = vmulq_laneq_f32(vsubq_f32(v579, v948), v549, 3);
    v1028 = vmulq_laneq_f32(vsubq_f32(v579, v946), v549, 3);
    v1029 = vmulq_laneq_f32(vsubq_f32(v579, v947), v549, 3);
    v580 = &v1014 + 4 * v418;
    v582 = *v580;
    v581 = v580[1];
    v583 = v580[2];
    v584 = v580[3];
    v585 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1020, v1020), v1016, v1016), v1024, v1024), v1028, v1028), v583, v583));
    v586 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1019, v1019), v1015, v1015), v1023, v1023), v1027, v1027), v581, v581));
    v587 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1018, v1018), v1014, v1014), v1022, v1022), v1026, v1026), v582, v582));
    v588 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1021, v1021), v1017, v1017), v1025, v1025), v1029, v1029), v584, v584));
    if (v475)
    {
      v586 = (int16x8_t)vbicq_s8((int8x16_t)v586, *(int8x16_t *)(a1 + 736));
      v587 = (int16x8_t)vbicq_s8((int8x16_t)v587, *(int8x16_t *)(a1 + 720));
      v585 = (int16x8_t)vbicq_s8((int8x16_t)v585, *(int8x16_t *)(a1 + 752));
      v588 = (int16x8_t)vbicq_s8((int8x16_t)v588, *(int8x16_t *)(a1 + 768));
    }
    _Q15 = v931;
    v589 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v587, v586), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v585, v588), (int8x16_t)xmmword_20631C0C0));
    v589.i16[0] = vaddvq_s16(v589);
    *(int8x8_t *)v589.i8 = vcnt_s8(*(int8x8_t *)v589.i8);
    v589.i16[0] = vaddlv_u8(*(uint8x8_t *)v589.i8);
    v590 = v589.i16[0];
    if (v589.i32[0] >= 2u)
    {
      v591 = (int8x16_t)vcltzq_s32((int32x4_t)v585);
      v592 = (int8x16_t)vcltzq_s32((int32x4_t)v587);
      v593 = (int8x16_t)vcltzq_s32((int32x4_t)v588);
      v594 = (int8x16_t)vcltzq_s32((int32x4_t)v586);
      v542 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v562), 0x1FuLL)), (int8x16_t)v542, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v592, (int8x16_t)v970), (float32x4_t)vandq_s8(v591, (int8x16_t)v979)), vaddq_f32((float32x4_t)vandq_s8(v594, (int8x16_t)v967), (float32x4_t)vandq_s8(v593, (int8x16_t)v976))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v592, (int8x16_t)v964), (float32x4_t)vandq_s8(v591, (int8x16_t)v956)), vaddq_f32((float32x4_t)vandq_s8(v594, (int8x16_t)v973), (float32x4_t)vandq_s8(v593, (int8x16_t)v961)))),
                                           vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v592, (int8x16_t)v954), (float32x4_t)vandq_s8(v591, (int8x16_t)v950)), vaddq_f32((float32x4_t)vandq_s8(v594, (int8x16_t)v958), (float32x4_t)vandq_s8(v593, (int8x16_t)v952))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v592, (int8x16_t)v948), (float32x4_t)vandq_s8(v591, (int8x16_t)v946)), vaddq_f32((float32x4_t)vandq_s8(v594, (int8x16_t)v949), (float32x4_t)vandq_s8(v593, (int8x16_t)v947))))), ReciprocalTable[v590]));
    }
    v595 = (float32x4_t)v527;
    v596 = (int32x4_t)xmmword_20631C080;
    v597 = (float32x4_t)v940;
    if (v416 != 8)
    {
      v598 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v539.i8, 0);
      v599 = (int16x8_t)vcgtq_f32(v598, vmulq_f32(v581, v581));
      v600 = (float32x4_t)vcgtq_f32(v598, vmulq_f32(v582, v582));
      v601 = (int16x8_t)vcgtq_f32(v598, vmulq_f32(v583, v583));
      v602 = (int16x8_t)vcgtq_f32(v598, vmulq_f32(v584, v584));
      if (v475)
      {
        v599 = (int16x8_t)vbicq_s8((int8x16_t)v599, *(int8x16_t *)(a1 + 736));
        v600 = (float32x4_t)vbicq_s8((int8x16_t)v600, *(int8x16_t *)(a1 + 720));
        v601 = (int16x8_t)vbicq_s8((int8x16_t)v601, *(int8x16_t *)(a1 + 752));
        v602 = (int16x8_t)vbicq_s8((int8x16_t)v602, *(int8x16_t *)(a1 + 768));
      }
      v603 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v600, v599), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v601, v602), (int8x16_t)xmmword_20631C0C0));
      v603.i16[0] = vaddvq_s16((int16x8_t)v603);
      *(int8x8_t *)v603.f32 = vcnt_s8(*(int8x8_t *)v603.f32);
      v603.i16[0] = vaddlv_u8(*(uint8x8_t *)v603.f32);
      if (v603.i32[0] >= 2u)
      {
        v604 = vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v422, (int8x16_t)vcltzq_s32((int32x4_t)v600)), (float32x4_t)vandq_s8((int8x16_t)v595, (int8x16_t)vcltzq_s32((int32x4_t)v601))), vaddq_f32((float32x4_t)vandq_s8(v940, (int8x16_t)vcltzq_s32((int32x4_t)v599)), (float32x4_t)vandq_s8((int8x16_t)v943, (int8x16_t)vcltzq_s32((int32x4_t)v602))));
        v604.i64[0] = vpaddq_f32(v604, v604).u64[0];
        v603.f32[0] = ReciprocalTable[v603.u16[0]]
                    * vpadd_f32(*(float32x2_t *)v604.f32, *(float32x2_t *)v604.f32).f32[0];
        v603 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v603.f32, 0);
        v542 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v562), 0x1FuLL)), (int8x16_t)v603, (int8x16_t)v542);
      }
      if (v16)
      {
        if (!v475)
        {
          v606 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v542, 3), (float32x4_t)vdupq_laneq_s32((int32x4_t)v541, 3)), 0);
          v542 = (float32x4_t)vandq_s8((int8x16_t)v542, v606);
          v541 = (float32x4_t)vbicq_s8((int8x16_t)v541, v606);
          goto LABEL_134;
        }
        v605 = vsubq_f32(v542, v541);
        v600.i32[0] = v605.i32[3];
        if (v605.f32[3] == 0.0)
        {
          if (v16 == 15)
          {
            v541 = 0uLL;
            goto LABEL_134;
          }
          v541 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
        }
        v603.i32[0] = 0;
        v607 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v603, v600), 0);
        v608 = vbslq_s8(v607, (int8x16_t)v541, (int8x16_t)v542);
        v609 = (float32x4_t)vbslq_s8(v607, (int8x16_t)vnegq_f32(v605), (int8x16_t)v605);
        v610 = (float32x4_t)vbslq_s8(v607, (int8x16_t)v542, (int8x16_t)v541);
        *(float *)v607.i32 = v610.f32[3] / v609.f32[3];
        v890 = (int8x16_t)v610;
        v611 = vmlsq_lane_f32(v610, v609, *(float32x2_t *)v607.i8, 0);
        if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v611, v881), (int8x16_t)vcgtq_f32(v880, v611))) & 0x80000000) != 0)
        {
          v541 = vminnmq_f32(vmaxnmq_f32(v611, (float32x4_t)0), _Q0);
          v542 = (float32x4_t)v608;
          v597 = (float32x4_t)v940;
        }
        else
        {
          v879 = v595;
          v612 = vmvnq_s8(v489);
          v613 = vmaxnmq_f32(v472, v473);
          v614 = vmaxnmq_f32(v471, v474);
          v615 = vbslq_s8((int8x16_t)vcgtq_f32(v473, v472), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
          v616 = (int8x16_t)vmaxnmq_f32(v613, v614);
          v617 = vbslq_s8((int8x16_t)vcgtq_f32(v614, v613), vbslq_s8((int8x16_t)vcgtq_f32(v474, v471), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v615);
          v615.i64[0] = vextq_s8(v616, v616, 8uLL).u64[0];
          *(float32x2_t *)v614.f32 = vmaxnm_f32(*(float32x2_t *)v616.i8, *(float32x2_t *)v615.i8);
          v982 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v615.i8, *(float32x2_t *)v616.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v617, v617, 8uLL), *(int8x8_t *)v617.i8);
          v618 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16(v562), 0x1FuLL));
          v541 = (float32x4_t)vbslq_s8(v618, (int8x16_t)v610, *(int8x16_t *)(v413+ 16* *(unsigned int *)((unint64_t)&v982 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v614.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v614.f32, 1))) & 1)))));
          v619 = (float32x4_t)vandq_s8((int8x16_t)vsubq_f32(v941, v541), v612);
          v620 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v541.f32, 0);
          v621 = vsubq_f32(v970, v620);
          v622 = vsubq_f32(v979, v620);
          v623 = vsubq_f32(v967, v620);
          v624 = vsubq_f32(v976, v620);
          v625 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v541.f32, 1);
          v626 = vsubq_f32(v961, v625);
          v627 = vsubq_f32(v973, v625);
          v628 = vsubq_f32(v956, v625);
          v629 = vsubq_f32(v964, v625);
          v630 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v541, 2);
          v631 = vsubq_f32(v952, v630);
          v878 = vsubq_f32(v958, v630);
          v632 = vsubq_f32(v950, v630);
          v633 = vsubq_f32(v954, v630);
          v634 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v541, 3);
          v635 = vsubq_f32(v948, v634);
          v636 = v608;
          v637 = vsubq_f32(v946, v634);
          v877 = vsubq_f32(v949, v634);
          v638 = vsubq_f32(v947, v634);
          v639 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v626, *(float32x2_t *)v619.f32, 1), v624, v619.f32[0]), v631, v619, 2), v638, v619, 3);
          v640 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v627, *(float32x2_t *)v619.f32, 1), v623, v619.f32[0]), v878, v619, 2), v877, v619, 3);
          v641 = vbslq_s8((int8x16_t)vcgtq_f32(v639, v640), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
          v642 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v628, *(float32x2_t *)v619.f32, 1), v622, v619.f32[0]), v632, v619, 2), v637, v619, 3);
          v643 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v629, *(float32x2_t *)v619.f32, 1), v621, v619.f32[0]), v633, v619, 2), v635, v619, 3);
          v644 = vmaxnmq_f32(v640, v639);
          v645 = vmaxnmq_f32(v643, v642);
          v646 = vbslq_s8((int8x16_t)vcgtq_f32(v642, v643), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
          v647 = (int8x16_t)vmaxnmq_f32(v645, v644);
          v648 = vbslq_s8((int8x16_t)vcgtq_f32(v644, v645), v641, v646);
          v645.i64[0] = vextq_s8(v647, v647, 8uLL).u64[0];
          *(int8x8_t *)v648.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v645.f32, *(float32x2_t *)v647.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v648, v648, 8uLL), *(int8x8_t *)v648.i8);
          *(float32x2_t *)v645.f32 = vmaxnm_f32(*(float32x2_t *)v647.i8, *(float32x2_t *)v645.f32);
          v983 = v648.i64[0];
          v542 = (float32x4_t)vbslq_s8(v618, v636, *(int8x16_t *)(v413+ 16* *(unsigned int *)((unint64_t)&v983 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v645.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v645.f32, 1))) & 1)))));
          v649 = (int8x16_t)vsubq_f32(v542, v541);
          v645.i64[0] = 0x8000000080000000;
          v645.i64[1] = 0x8000000080000000;
          v650 = vdivq_f32(_Q0, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v923, vabdq_f32(v542, v541)), vorrq_s8(vandq_s8(v649, (int8x16_t)v645), (int8x16_t)v923), v649));
          v1019 = vmulq_lane_f32(v627, *(float32x2_t *)v650.f32, 1);
          v1015 = vmulq_n_f32(v623, v650.f32[0]);
          v1014 = vmulq_n_f32(v621, v650.f32[0]);
          v1018 = vmulq_lane_f32(v629, *(float32x2_t *)v650.f32, 1);
          v1021 = vmulq_lane_f32(v626, *(float32x2_t *)v650.f32, 1);
          v1017 = vmulq_n_f32(v624, v650.f32[0]);
          v1016 = vmulq_n_f32(v622, v650.f32[0]);
          v1020 = vmulq_lane_f32(v628, *(float32x2_t *)v650.f32, 1);
          v1024 = vmulq_laneq_f32(v632, v650, 2);
          v1025 = vmulq_laneq_f32(v631, v650, 2);
          v1022 = vmulq_laneq_f32(v633, v650, 2);
          v1023 = vmulq_laneq_f32(v878, v650, 2);
          v1027 = vmulq_laneq_f32(v877, v650, 3);
          v1026 = vmulq_laneq_f32(v635, v650, 3);
          v1029 = vmulq_laneq_f32(v638, v650, 3);
          v1028 = vmulq_laneq_f32(v637, v650, 3);
          v651 = &v1014 + 4 * v418;
          v652 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1019, v1019), v1015, v1015), v1023, v1023), v1027, v1027), v651[1], v651[1]));
          v653 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1018, v1018), v1014, v1014), v1022, v1022), v1026, v1026), *v651, *v651));
          v654 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1021, v1021), v1017, v1017), v1025, v1025), v1029, v1029), v651[3], v651[3]));
          v655 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1020, v1020), v1016, v1016), v1024, v1024), v1028, v1028), v651[2], v651[2]));
          v656 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v653, v652), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v655, v654), (int8x16_t)xmmword_20631C0C0));
          v656.i16[0] = vaddvq_s16(v656);
          v657 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v656.i8);
          v657.i16[0] = vaddlv_u8(v657);
          if (v657.i32[0] >= 2u)
          {
            v596 = (int32x4_t)xmmword_20631C080;
            v541 = (float32x4_t)vbslq_s8(v618, v890, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 144), (int8x16_t)v653), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 176), (int8x16_t)v655)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 160), (int8x16_t)v652), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 192), (int8x16_t)v654))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 208), (int8x16_t)v653), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 240), (int8x16_t)v655)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 224), (int8x16_t)v652), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 256), (int8x16_t)v654)))),
                                                 vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)v34, (int8x16_t)v653), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 304), (int8x16_t)v655)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 288), (int8x16_t)v652), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 320), (int8x16_t)v654))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 336), (int8x16_t)v653), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 368), (int8x16_t)v655)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 352), (int8x16_t)v652), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 384), (int8x16_t)v654))))), ReciprocalTable[v657.u16[0]]));
          }
          v658 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v542.f32, 0);
          v659 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v542.f32, 1);
          v660 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v542, 2);
          v661 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v542, 3);
          v1020 = vmulq_lane_f32(vsubq_f32(v659, v956), *(float32x2_t *)v650.f32, 1);
          v1016 = vmulq_n_f32(vsubq_f32(v658, v979), v650.f32[0]);
          v1017 = vmulq_n_f32(vsubq_f32(v658, v976), v650.f32[0]);
          v1021 = vmulq_lane_f32(vsubq_f32(v659, v961), *(float32x2_t *)v650.f32, 1);
          v1019 = vmulq_lane_f32(vsubq_f32(v659, v973), *(float32x2_t *)v650.f32, 1);
          v1015 = vmulq_n_f32(vsubq_f32(v658, v967), v650.f32[0]);
          v1014 = vmulq_n_f32(vsubq_f32(v658, v970), v650.f32[0]);
          v1018 = vmulq_lane_f32(vsubq_f32(v659, v964), *(float32x2_t *)v650.f32, 1);
          v1022 = vmulq_laneq_f32(vsubq_f32(v660, v954), v650, 2);
          v1023 = vmulq_laneq_f32(vsubq_f32(v660, v958), v650, 2);
          v1025 = vmulq_laneq_f32(vsubq_f32(v660, v952), v650, 2);
          v1024 = vmulq_laneq_f32(vsubq_f32(v660, v950), v650, 2);
          v1028 = vmulq_laneq_f32(vsubq_f32(v661, v946), v650, 3);
          v1029 = vmulq_laneq_f32(vsubq_f32(v661, v947), v650, 3);
          v1027 = vmulq_laneq_f32(vsubq_f32(v661, v949), v650, 3);
          v1026 = vmulq_laneq_f32(vsubq_f32(v661, v948), v650, 3);
          v662 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1020, v1020), v1016, v1016), v1024, v1024), v1028, v1028), v651[2], v651[2]));
          v663 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1021, v1021), v1017, v1017), v1025, v1025), v1029, v1029), v651[3], v651[3]));
          v664 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1019, v1019), v1015, v1015), v1023, v1023), v1027, v1027), v651[1], v651[1]));
          v665 = (int16x8_t)vcgtq_f32(v938, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1018, v1018), v1014, v1014), v1022, v1022), v1026, v1026), *v651, *v651));
          v666 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v665, v664), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v662, v663), (int8x16_t)xmmword_20631C0C0));
          v666.i16[0] = vaddvq_s16(v666);
          v667 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v666.i8);
          v667.i16[0] = vaddlv_u8(v667);
          if (v667.i32[0] >= 2u)
            v542 = (float32x4_t)vbslq_s8(v618, (int8x16_t)v542, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 144), (int8x16_t)v665), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 176), (int8x16_t)v662)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 160), (int8x16_t)v664), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 192), (int8x16_t)v663))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 208), (int8x16_t)v665), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 240), (int8x16_t)v662)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 224), (int8x16_t)v664), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 256), (int8x16_t)v663)))),
                                                 vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)v34, (int8x16_t)v665), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 304), (int8x16_t)v662)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 288), (int8x16_t)v664), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 320), (int8x16_t)v663))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 336), (int8x16_t)v665), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 368), (int8x16_t)v662)), vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 352), (int8x16_t)v664), (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 384), (int8x16_t)v663))))), ReciprocalTable[v667.u16[0]]));
          v595 = v879;
          v597 = (float32x4_t)v940;
          if (v541.f32[3] <= v542.f32[3])
            v541.i32[3] = 0;
          else
            v542.i32[3] = 0;
        }
      }
    }
LABEL_134:
    v668 = vmaxnmq_f32(v541, (float32x4_t)0);
    v669 = (int8x16_t)vceqq_s32(vdupq_n_s32(__clz(__rbit32(v415))), v596);
    v670 = (float32x4_t)vbslq_s8(v669, (int8x16_t)vdupq_n_s32(0x437F0000u), (int8x16_t)vdupq_n_s32(0x42FE0000u));
    v671 = vmulq_f32(v670, vminnmq_f32(vmaxnmq_f32(v542, (float32x4_t)0), _Q0));
    v672 = vrndxq_f32(vmulq_f32(v670, vminnmq_f32(v668, _Q0)));
    v673 = vrndxq_f32(v671);
    v674 = vsubq_f32(v672, v673);
    v675 = vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v672), (int16x8_t)vcvtq_s32_f32(v673)));
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v674, 2), vaddq_f32(v674, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v674.f32, 1))).f32[0] > 0.0)
    {
      v675 = vext_s8(v675, v675, 4uLL);
      v676 = v672;
      v672 = v673;
      v673 = v676;
    }
    v677 = vmovl_u8((uint8x8_t)vorr_s8(vadd_s8(v675, v675), (int8x8_t)vshr_n_u8((uint8x8_t)v675, 6uLL)));
    v678 = (int8x16_t)vmovl_u16(*(uint16x4_t *)v677.i8);
    v679 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v680 = (float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v677), v679);
    v681 = (float32x4_t)vorrq_s8(v678, v679);
    v682 = (float32x4_t)vdupq_n_s32(0xCB400000);
    v683 = vmulq_n_f32((float32x4_t)vbslq_s8(v669, (int8x16_t)v672, (int8x16_t)vaddq_f32(v681, v682)), 0.0039216);
    v684 = vmlaq_f32(vnegq_f32(v683), (float32x4_t)vbslq_s8(v669, (int8x16_t)v673, (int8x16_t)vaddq_f32(v680, v682)), v929);
    v685 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v683.f32, 0);
    v686 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v683.f32, 1);
    v687 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v683, 2);
    v688 = (float32x4_t)vbicq_s8((int8x16_t)v684, (int8x16_t)vcltzq_s32(_ZZL19FindDualWeights_4x4PK9Block_4x4PK12ColorVectorshPDv16_fE11kVectorMask[v418]));
    v689 = (int8x16_t)vmulq_f32(v688, v688);
    v690 = vadd_f32(*(float32x2_t *)v689.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v689, v689, 8uLL));
    v691 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v683, 3);
    v692 = vsubq_f32(v947, v691);
    v693 = vsubq_f32(v946, v691);
    v694 = vsubq_f32(v949, v691);
    v695 = vsubq_f32(v948, v691);
    v696 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v964, v686), *(float32x2_t *)v688.f32, 1), vsubq_f32(v970, v685), v688.f32[0]), vsubq_f32(v954, v687), v688, 2), v695, v688, 3);
    v697 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v973, v686), *(float32x2_t *)v688.f32, 1), vsubq_f32(v967, v685), v688.f32[0]), vsubq_f32(v958, v687), v688, 2), v694, v688, 3);
    v698 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v956, v686), *(float32x2_t *)v688.f32, 1), vsubq_f32(v979, v685), v688.f32[0]), vsubq_f32(v950, v687), v688, 2), v693, v688, 3);
    v699 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v961, v686), *(float32x2_t *)v688.f32, 1), vsubq_f32(v976, v685), v688.f32[0]), vsubq_f32(v952, v687), v688, 2), v692, v688, 3);
    v688.f32[0] = vrecpes_f32(vaddv_f32(v690));
    v700 = vmulq_n_f32(v699, v688.f32[0]);
    v701 = vmulq_n_f32(v698, v688.f32[0]);
    v702 = vmulq_n_f32(v697, v688.f32[0]);
    v703 = vminnmq_f32(vmulq_n_f32(v696, v688.f32[0]), _Q0);
    v704 = vminnmq_f32(v701, _Q0);
    v705 = vminnmq_f32(v700, _Q0);
    v706 = vmaxnmq_f32(v703, (float32x4_t)0);
    v707 = vmaxnmq_f32(vminnmq_f32(v702, _Q0), (float32x4_t)0);
    v708 = vmaxnmq_f32(v704, (float32x4_t)0);
    v709 = vmaxnmq_f32(v705, (float32x4_t)0);
    if ((char)v16 >= 1 && (v415 & 8) == 0)
    {
      v710 = vrecpes_f32(v684.f32[3]);
      if (fabsf(v684.f32[3]) < 0.0039216)
        v710 = 0.0;
      v707 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 736)), (int8x16_t)vmulq_n_f32(v694, v710), (int8x16_t)v707);
      v706 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 720)), (int8x16_t)vmulq_n_f32(v695, v710), (int8x16_t)v706);
      v708 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 752)), (int8x16_t)vmulq_n_f32(v693, v710), (int8x16_t)v708);
      v709 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + 768)), (int8x16_t)vmulq_n_f32(v692, v710), (int8x16_t)v709);
    }
    v981 = v684;
    v711 = *(float *)((unint64_t)&v981 & 0xFFFFFFFFFFFFFFF3 | (4 * (v418 & 3)));
    v712 = 0.0;
    if (fabsf(v711) >= 0.00024414)
      v712 = vrecpes_f32(v711);
    v980 = v683;
    v713 = (const float *)((unint64_t)&v980 & 0xFFFFFFFFFFFFFFF3 | (4 * (v418 & 3)));
    v714 = vld1q_dup_f32(v713);
    v715 = vmulq_n_f32(vsubq_f32(v943, v714), v712);
    v716 = vmulq_n_f32(vsubq_f32(v595, v714), v712);
    v717 = vmulq_n_f32(vsubq_f32(v597, v714), v712);
    v718 = vmulq_n_f32(vsubq_f32(v422, v714), v712);
    v719 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v706, (float32x4_t)0), _Q0), v931));
    v720 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v707, (float32x4_t)0), _Q0), v931));
    v721 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v708, (float32x4_t)0), _Q0), v931));
    v722 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v709, (float32x4_t)0), _Q0), v931));
    v723 = vmulq_f32(vminnmq_f32(vmaxnmq_f32(v717, (float32x4_t)0), _Q0), v931);
    v724 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v718, (float32x4_t)0), _Q0), v931));
    v725 = vrndxq_f32(v723);
    v726 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v716, (float32x4_t)0), _Q0), v931));
    v1014 = vmulq_n_f32(v719, 0.33333);
    v1015 = vmulq_n_f32(v720, 0.33333);
    v727 = vrndxq_f32(vmulq_f32(vminnmq_f32(vmaxnmq_f32(v715, (float32x4_t)0), _Q0), v931));
    v1016 = vmulq_n_f32(v721, 0.33333);
    v1017 = vmulq_n_f32(v722, 0.33333);
    v728 = (int8x16_t)vmulq_n_f32(v724, 0.33333);
    v1021 = vmulq_n_f32(v727, 0.33333);
    v1020 = vmulq_n_f32(v726, 0.33333);
    v729 = (int8x16_t)vmulq_n_f32(v725, 0.33333);
    v1019 = (float32x4_t)v729;
    v1018 = (float32x4_t)v728;
    if (v442)
      _Q0 = vmulq_f32(*(float32x4_t *)v442->f32, v931);
    v730 = a1;
    do
    {
      v731 = v730;
      v730 = *(_QWORD *)(v730 + 40);
    }
    while (v730);
    if (*(_WORD *)(v731 + 132) == 324)
    {
      v728.i32[0] = 0;
      v729.i32[0] = v475;
      v732 = &v1014 + 4 * (unint64_t)(v415 & 1);
      v733 = vmlaq_n_f32(v685, v732[2], v684.f32[0]);
      v734 = vmlaq_n_f32(v685, *v732, v684.f32[0]);
      v735 = vmlaq_n_f32(v685, v732[3], v684.f32[0]);
      v736 = vmlaq_n_f32(v685, v732[1], v684.f32[0]);
      v737 = &v1014 + 4 * (unint64_t)((v415 >> 1) & 1);
      v738 = vmlaq_lane_f32(v686, v737[1], *(float32x2_t *)v684.f32, 1);
      v739 = vmlaq_lane_f32(v686, v737[3], *(float32x2_t *)v684.f32, 1);
      v740 = vmlaq_lane_f32(v686, *v737, *(float32x2_t *)v684.f32, 1);
      v741 = vmlaq_lane_f32(v686, v737[2], *(float32x2_t *)v684.f32, 1);
      v742 = &v1014 + 4 * (unint64_t)((v415 >> 2) & 1);
      v743 = vmlaq_laneq_f32(v687, v742[1], v684, 2);
      v744 = vmlaq_laneq_f32(v687, v742[3], v684, 2);
      v745 = vmlaq_laneq_f32(v687, *v742, v684, 2);
      v746 = vmlaq_laneq_f32(v687, v742[2], v684, 2);
      v747 = &v1014 + 4 * (unint64_t)((v415 >> 3) & 1);
      v748 = vmlaq_laneq_f32(v691, v747[1], v684, 3);
      v749 = vmlaq_laneq_f32(v691, v747[3], v684, 3);
      v750 = vmlaq_laneq_f32(v691, *v747, v684, 3);
      v751 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v729, v728), 0);
      v752 = vmlaq_laneq_f32(v691, v747[2], v684, 3);
      __asm { FMOV            V4.4S, #1.0 }
      v754 = (float32x4_t)vbslq_s8(v751, _Q4, (int8x16_t)v949);
      v755 = (float32x4_t)vbslq_s8(v751, _Q4, (int8x16_t)v947);
      v756 = (float32x4_t)vbslq_s8(v751, _Q4, (int8x16_t)v948);
      v757 = (float32x4_t)vbslq_s8(v751, _Q4, (int8x16_t)v946);
      v758 = vsubq_f32(v735, v976);
      v759 = vsubq_f32(v734, v970);
      v760 = vsubq_f32(v733, v979);
      v761 = vsubq_f32(v739, v961);
      v762 = vsubq_f32(v738, v973);
      v763 = vsubq_f32(v745, v954);
      v764 = vsubq_f32(v752, v946);
      v765 = vsubq_f32(v750, v948);
      v766 = vsubq_f32(v749, v947);
      v767 = vsubq_f32(v748, v949);
      v768 = vmulq_f32(v757, v760);
      v769 = vmulq_f32(v756, v759);
      v770 = vmulq_f32(v755, v758);
      v771 = vmulq_f32(v754, vsubq_f32(v736, v967));
      v772 = vmulq_f32(v754, v762);
      v773 = vmulq_f32(v755, v761);
      v774 = vmulq_f32(v756, vsubq_f32(v740, v964));
      v775 = vmulq_f32(v757, vsubq_f32(v741, v956));
      v776 = vmulq_f32(v754, vsubq_f32(v743, v958));
      v777 = vmulq_f32(v755, vsubq_f32(v744, v952));
      v778 = vmulq_f32(v756, v763);
      v779 = vmulq_f32(v757, vsubq_f32(v746, v950));
      v780 = vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v774, v774), *(float32x2_t *)_Q0.f32, 1), vmulq_f32(v769, v769), _Q0.f32[0]), vmulq_f32(v778, v778), _Q0, 2), vmulq_f32(v765, v765), _Q0, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v775, v775), *(float32x2_t *)_Q0.f32, 1), vmulq_f32(v768, v768), _Q0.f32[0]),
                     vmulq_f32(v779, v779),
                     _Q0,
                     2),
                   vmulq_f32(v764, v764),
                   _Q0,
                   3)),
               vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v772, v772), *(float32x2_t *)_Q0.f32, 1), vmulq_f32(v771, v771), _Q0.f32[0]), vmulq_f32(v776, v776), _Q0, 2), vmulq_f32(v767, v767), _Q0, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v773, v773), *(float32x2_t *)_Q0.f32, 1), vmulq_f32(v770, v770), _Q0.f32[0]), vmulq_f32(v777, v777),
                     _Q0,
                     2),
                   vmulq_f32(v766, v766),
                   _Q0,
                   3)));
      v780.i64[0] = vpaddq_f32(v780, v780).u64[0];
      v781 = vpadd_f32(*(float32x2_t *)v780.f32, *(float32x2_t *)v780.f32).f32[0];
      v317 = v935;
      if (v781 < v935.f32[0])
      {
        v407 = v416;
        v317.f32[0] = v781;
        v894 = v726;
        v896 = v725;
        v892 = v727;
        v904 = v720;
        v906 = v719;
        v902 = v721;
        v908 = v722;
        v910 = v675;
        v912 = v724;
      }
    }
    else
    {
      v317 = v935;
    }
    goto LABEL_151;
  }
  v408 = 0uLL;
  v912 = 0u;
LABEL_80:
  v894 = v408;
  v896 = v408;
  v892 = v408;
LABEL_156:
  v783 = *a2;
  if (v317.f32[0] < *a2)
  {
    *a2 = v317.f32[0];
    v1030 = 0;
    bzero(&v1014, 0x641uLL);
    if ((_BYTE)v407)
    {
      v786 = (__clz(__rbit32(v407)) + 1) & 3;
      v784.i32[0] = 1;
      v785.i32[0] = v786;
      *(int8x8_t *)v787.i8 = v910;
      v787.u64[1] = (unint64_t)v910;
      *(int8x8_t *)v787.i8 = vqtbl1_s8(v787, (int8x8_t)0x406050700020103);
      v788 = vbsl_s8(vdup_lane_s8(vceq_s8(v785, v784), 0), *(int8x8_t *)v787.i8, v910);
      v787.i32[0] = 2;
      *(int8x8_t *)v787.i8 = vdup_lane_s8(vceq_s8(v785, *(int8x8_t *)v787.i8), 0);
      *(int8x8_t *)v789.i8 = v788;
      v789.u64[1] = (unint64_t)v788;
      v790 = vbsl_s8(*(int8x8_t *)v787.i8, vqtbl1_s8(v789, (int8x8_t)0x506070401020300), v788);
      v787.i32[0] = 3;
      v791 = vdup_lane_s8(vceq_s8(v785, *(int8x8_t *)v787.i8), 0);
      *(int8x8_t *)v787.i8 = v790;
      v787.u64[1] = (unint64_t)v790;
      *(int8x8_t *)v792.i8 = vbsl_s8(v791, vqtbl1_s8(v787, (int8x8_t)0x607050402030100), v790);
      v793.i64[0] = 0x4F0000004F000000;
      v793.i64[1] = 0x4F0000004F000000;
      v794 = (int8x16_t)vcgtq_f32(v904, v793);
      v795 = (int8x16_t)vcgtq_f32(v902, v793);
      v796 = (int8x16_t)vcgtq_f32(v908, v793);
      v797 = (int8x16_t)vcgtq_f32(v906, v793);
      v1014.i8[0] = 5;
      v798 = vcvtq_s32_f32(vsubq_f32(v908, (float32x4_t)vandq_s8((int8x16_t)v793, v796)));
      v799.i64[0] = 0x8000000080000000;
      v799.i64[1] = 0x8000000080000000;
      v800 = (int32x4_t)vandq_s8(v796, v799);
      v801 = vaddq_s32((int32x4_t)vandq_s8(v794, v799), vcvtq_s32_f32(vsubq_f32(v904, (float32x4_t)vandq_s8((int8x16_t)v793, v794))));
      v802 = vaddq_s32((int32x4_t)vandq_s8(v795, v799), vcvtq_s32_f32(vsubq_f32(v902, (float32x4_t)vandq_s8((int8x16_t)v793, v795))));
      v803 = vaddq_s32(v800, v798);
      v804 = vaddq_s32((int32x4_t)vandq_s8(v797, v799), vcvtq_s32_f32(vsubq_f32(v906, (float32x4_t)vandq_s8((int8x16_t)v793, v797))));
      v805 = (int8x16_t)vcgtq_f32(v912, v793);
      v806 = (int8x16_t)vcgtq_f32(v896, v793);
      v807 = (int8x16_t)vcgtq_f32(v894, v793);
      v808 = (int8x16_t)vcgtq_f32(v892, v793);
      v809 = (float32x4_t)vandq_s8((int8x16_t)v793, v808);
      v810 = (float32x4_t)vandq_s8((int8x16_t)v793, v807);
      v811 = (float32x4_t)vandq_s8((int8x16_t)v793, v806);
      v812 = vaddq_s32((int32x4_t)vandq_s8(v805, v799), vcvtq_s32_f32(vsubq_f32(v912, (float32x4_t)vandq_s8((int8x16_t)v793, v805))));
      v813 = vaddq_s32((int32x4_t)vandq_s8(v806, v799), vcvtq_s32_f32(vsubq_f32(v896, v811)));
      v814 = vaddq_s32((int32x4_t)vandq_s8(v807, v799), vcvtq_s32_f32(vsubq_f32(v894, v810)));
      v815 = vaddq_s32((int32x4_t)vandq_s8(v808, v799), vcvtq_s32_f32(vsubq_f32(v892, v809)));
      if ((v804.i8[0] & 2) != 0)
      {
        *(int8x8_t *)v792.i8 = vext_s8(*(int8x8_t *)v792.i8, *(int8x8_t *)v792.i8, 4uLL);
        v816.i64[0] = 0x300000003;
        v816.i64[1] = 0x300000003;
        v804 = vsubq_s32(v816, v804);
        v801 = vsubq_s32(v816, v801);
        v802 = vsubq_s32(v816, v802);
        v803 = vsubq_s32(v816, v803);
        v812 = vsubq_s32(v816, v812);
        v813 = vsubq_s32(v816, v813);
        v814 = vsubq_s32(v816, v814);
        v815 = vsubq_s32(v816, v815);
      }
      if ((v812.i8[0] & 2) != 0)
      {
        v792.i64[1] = v792.i64[0];
        *(int8x8_t *)v792.i8 = vqtbl1_s8(v792, (int8x8_t)0x306050407020100);
        v817.i64[0] = 0x300000003;
        v817.i64[1] = 0x300000003;
        v812 = vsubq_s32(v817, v812);
        v813 = vsubq_s32(v817, v813);
        v814 = vsubq_s32(v817, v814);
        v815 = vsubq_s32(v817, v815);
      }
      v1013[0] = v812;
      v1013[1] = v813;
      v1013[2] = v814;
      v1013[3] = v815;
    }
    else
    {
      v1014.i8[0] = 6;
      v818.i64[0] = 0x4F0000004F000000;
      v818.i64[1] = 0x4F0000004F000000;
      v819 = (int8x16_t)vcgtq_f32(v904, v818);
      v820 = (int8x16_t)vcgtq_f32(v902, v818);
      v821 = (int8x16_t)vcgtq_f32(v908, v818);
      v822 = (int8x16_t)vcgtq_f32(v906, v818);
      v823 = (float32x4_t)vandq_s8((int8x16_t)v818, v822);
      v824 = (float32x4_t)vandq_s8((int8x16_t)v818, v821);
      v825 = (float32x4_t)vandq_s8((int8x16_t)v818, v820);
      v826.i64[0] = 0x8000000080000000;
      v826.i64[1] = 0x8000000080000000;
      v827 = (int32x4_t)vandq_s8(v820, v826);
      v801 = vaddq_s32((int32x4_t)vandq_s8(v819, v826), vcvtq_s32_f32(vsubq_f32(v904, (float32x4_t)vandq_s8((int8x16_t)v818, v819))));
      v802 = vaddq_s32(v827, vcvtq_s32_f32(vsubq_f32(v902, v825)));
      v803 = vaddq_s32((int32x4_t)vandq_s8(v821, v826), vcvtq_s32_f32(vsubq_f32(v908, v824)));
      v804 = vaddq_s32((int32x4_t)vandq_s8(v822, v826), vcvtq_s32_f32(vsubq_f32(v906, v823)));
      *(int8x8_t *)v792.i8 = v910;
      v786 = 0;
      if ((v804.i8[0] & 8) != 0)
      {
        *(int8x8_t *)v792.i8 = vext_s8(v910, v910, 4uLL);
        v828.i64[0] = 0xF0000000FLL;
        v828.i64[1] = 0xF0000000FLL;
        v804 = vsubq_s32(v828, v804);
        v801 = vsubq_s32(v828, v801);
        v802 = vsubq_s32(v828, v802);
        v803 = vsubq_s32(v828, v803);
      }
    }
    v1009 = (uint32x4_t)v804;
    v1010 = (uint32x4_t)v801;
    v829.i32[0] = v792.u8[2];
    v1011 = (uint32x4_t)v802;
    v1012 = (uint32x4_t)v803;
    v829.i32[1] = v792.u8[7];
    v830.i32[0] = v792.u8[3];
    v831 = (int8x8_t)vshl_u32((uint32x2_t)vand_s8(v829, (int8x8_t)0xFF000000FFLL), (uint32x2_t)0x1800000010);
    v830.i32[1] = v792.u8[6];
    v832 = (int8x8_t)vshl_u32((uint32x2_t)vand_s8(v830, (int8x8_t)0xFF000000FFLL), (uint32x2_t)0x1000000018);
    v830.i32[0] = v792.u8[1];
    v833 = vorr_s8(v831, v832);
    v830.i32[1] = v792.u8[5];
    v834 = (int8x8_t)vshl_n_s32((int32x2_t)vand_s8(v830, (int8x8_t)0xFF000000FFLL), 8uLL);
    v830.i32[0] = v792.u8[0];
    v830.i32[1] = v792.u8[4];
    *(int8x8_t *)v991.i8 = vorr_s8(v833, vorr_s8(v834, vand_s8(v830, (int8x8_t)0xFF000000FFLL)));
    D3DX_BC7::EmitBlock(a3, (unsigned __int8 *)&v1014, 0, v786, 0, (uint64_t)&v991, (uint64_t)&v1009, (uint64_t)v1013);
    v783 = *a2;
    _Q15 = v931;
  }
  v835 = a2[1];
  if (v783 >= v835)
  {
    v836 = (float32x4_t)vdupq_n_s32(0x37810183u);
    v837 = vmaxnmq_f32(vmaxnmq_f32(v883, v882), vmaxnmq_f32(v885, v884));
    v838 = vminnmq_f32(vminnmq_f32(v883, v882), vminnmq_f32(v885, v884));
    v839 = vmaxnmq_f32(v837, (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v837), (int8x16_t)v837, 8uLL));
    v840 = vminnmq_f32(v838, (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v838), (int8x16_t)v838, 8uLL));
    v839.i64[0] = vmlaq_f32(vmaxnmq_f32(v839, (float32x4_t)vrev64q_s32((int32x4_t)v839)), _Q15, vminnmq_f32(v840, (float32x4_t)vrev64q_s32((int32x4_t)v840))).u64[0];
    v839.f32[0] = 0.25 * v839.f32[0];
    v841 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v839.f32, 0);
    v842 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v841, v883), (int16x8_t)vcgtq_f32(v841, v885)), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v841, v882), (int16x8_t)vcgtq_f32(v841, v884)), (int8x16_t)xmmword_20631C0C0));
    v842.i16[0] = vaddvq_s16(v842);
    v843 = v842.i16[0];
    v844 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v836, v883), (int16x8_t)vcgeq_f32(v836, v885)), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v836, v882), (int16x8_t)vcgeq_f32(v836, v884)), (int8x16_t)xmmword_20631C0C0));
    v844.i16[0] = vaddvq_s16(v844);
    v845 = v844.i16[0];
    v990[2] = FindDualPartitions_4x4(v842.u32[0], v844.i32[0], (int8x16_t)v844);
    v846 = 8;
    v847 = v783;
    do
    {
      v848 = *(__int16 *)((char *)&v990[1] + v846);
      if (v848 != -1)
      {
        v849 = EncodeStandardDualPartitionBlock((int8x16_t *)a1, (uint64_t)&v991, &EncodeDualBlock_4x4(Block_4x4 const*,D3DX_BC7 *,BlockInfo *,SingleBlockErrorInfo const*)::bc67[2 * v848], v847);
        if (v847 >= v849)
          v847 = v849;
      }
      v846 += 2;
    }
    while (v846 != 16);
    if (v847 > v835)
    {
      if (*(_BYTE *)(a1 + 136))
        goto LABEL_174;
      __asm { FMOV            V4.4S, #1.0 }
      v855 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(_Q4, *(float32x4_t *)(a1 + 336)), (int16x8_t)vcgtq_f32(_Q4, *(float32x4_t *)(a1 + 352))), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(_Q4, *(float32x4_t *)(a1 + 368)), (int16x8_t)vcgtq_f32(_Q4, *(float32x4_t *)(a1 + 384))), (int8x16_t)xmmword_20631C0C0));
      v855.i16[0] = vaddvq_s16(v855);
      v856 = v855.i16[0];
      if (v855.i16[0] == -1)
      {
LABEL_174:
        v850 = vmaxnmq_f32(vmaxnmq_f32(v889, v888), vmaxnmq_f32(v887, v886));
        v851 = vminnmq_f32(vminnmq_f32(v889, v888), vminnmq_f32(v887, v886));
        v852 = vmaxnmq_f32(v850, (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v850), (int8x16_t)v850, 8uLL));
        v853 = vminnmq_f32(v851, (float32x4_t)vextq_s8((int8x16_t)vrev64q_s32((int32x4_t)v851), (int8x16_t)v851, 8uLL));
        v852.i64[0] = vaddq_f32(vmaxnmq_f32(v852, (float32x4_t)vrev64q_s32((int32x4_t)v852)), vminnmq_f32(v853, (float32x4_t)vrev64q_s32((int32x4_t)v853))).u64[0];
        v852.f32[0] = 0.5 * v852.f32[0];
        v854 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v852.f32, 0);
        v855 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v854, v889), (int16x8_t)vcgtq_f32(v854, v887)), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v854, v888), (int16x8_t)vcgtq_f32(v854, v886)), (int8x16_t)xmmword_20631C0C0));
        v855.i16[0] = vaddvq_s16(v855);
        v856 = v855.i16[0];
      }
      if (v856 != (unsigned __int16)v843 && (unsigned __int16)(v856 - 1) <= 0xFFFDu)
      {
        v1014.i64[1] = FindDualPartitions_4x4(v856, v845, (int8x16_t)v855);
        for (i = 4; i != 8; ++i)
        {
          v859 = v1014.i16[i];
          if (v859 != -1)
          {
            v860 = EncodeStandardDualPartitionBlock((int8x16_t *)a1, (uint64_t)&v991, &EncodeDualBlock_4x4(Block_4x4 const*,D3DX_BC7 *,BlockInfo *,SingleBlockErrorInfo const*)::bc67[2 * v859], v847);
            if (v847 >= v860)
              v847 = v860;
          }
        }
      }
    }
    if (v847 < v783)
    {
      v861 = 0;
      *a2 = v847;
      v862 = vmovl_u8(*(uint8x8_t *)v991.i8);
      v863 = (int8x16_t)vmovl_high_u8(v991);
      v864.i16[0] = v994;
      v864.i16[1] = v999;
      v1012 = vmovl_high_u16((uint16x8_t)v863);
      v1011 = vmovl_u16(*(uint16x4_t *)v863.i8);
      v864.i16[2] = v1002;
      v1010 = vmovl_high_u16(v862);
      v1009 = vmovl_u16(*(uint16x4_t *)v862.i8);
      v864.i16[3] = v1007;
      v863.i64[0] = 0xFF000000FFLL;
      v863.i64[1] = 0xFF000000FFLL;
      v865.i16[0] = v995;
      v865.i16[1] = v998;
      v865.i16[2] = v1003;
      v865.i16[3] = v1006;
      v866.i16[0] = v993;
      v866.i16[1] = v997;
      v866.i16[2] = v1001;
      v867 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vmovl_u16(v864), v863), (uint32x4_t)xmmword_20631C100), (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)vmovl_u16(v865), v863), (uint32x4_t)xmmword_20631C110));
      v866.i16[3] = v1005;
      v868 = (int32x4_t)vandq_s8((int8x16_t)vmovl_u16(v866), v863);
      v866.i16[0] = v992;
      v866.i16[1] = v996;
      v866.i16[2] = v1000;
      v866.i16[3] = v1004;
      v1031 = vorrq_s8(v867, vorrq_s8((int8x16_t)vshlq_n_s32(v868, 8uLL), vandq_s8((int8x16_t)vmovl_u16(v866), v863)));
      v869 = *(unsigned __int8 *)(a1 + 136);
      if (*(_BYTE *)(a1 + 136))
        v870 = 4;
      else
        v870 = 2;
      v871 = v1008;
      v872 = &bc67_partitionTable[16 * v1008 + 1024];
      v873 = 1;
      do
      {
        v874 = v873;
        if ((v1009.i32[bc67_fixups[3 * v871 + 192 + v861]] & v870) != 0)
        {
          v875 = 0;
          *(int32x2_t *)&v1031.i8[8 * v861] = vrev64_s32(*(int32x2_t *)&v1031.i8[8 * v861]);
          do
          {
            if (v861 == v872[v875])
              v1009.i32[v875] = 2 * v870 + ~v1009.i32[v875];
            ++v875;
          }
          while (v875 != 16);
        }
        v873 = 0;
        v861 = 1;
      }
      while ((v874 & 1) != 0);
      v1030 = 0;
      if (v869)
        v876 = 1;
      else
        v876 = 7;
      bzero(&v1014, 0x641uLL);
      v1014.i8[0] = v876;
      D3DX_BC7::EmitBlock(a3, (unsigned __int8 *)&v1014, v871, 0, 0, (uint64_t)&v1031, (uint64_t)&v1009, 0);
    }
  }
}

uint64_t FindDualPartitions_4x4(unsigned int a1, int a2, int8x16_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int32x4_t v5;
  char *v6;
  int16x4_t v7;
  int8x8_t v8;
  int32x4_t v9;
  int8x8_t *v10;
  int v11;
  int8x8_t v12;
  int8x8_t v13;
  int32x4_t v14;
  uint64_t i;
  int v16;
  int16x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int v20;
  unsigned int v21;
  uint64_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  int8x8_t *v27;
  char *v28;
  int8x8_t v29;
  int8x8_t v30;
  int32x4_t v31;
  uint64_t j;
  int v33;
  int16x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  unint64_t v37;
  uint64_t v39;
  int8x8_t *v40;
  char *v41;
  char *v42;
  int8x8_t v43;
  int8x8_t v44;
  int32x4_t v45;
  uint64_t k;
  int v47;
  int16x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  BOOL v51;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;

  a3.i32[0] = a1;
  *(int8x8_t *)a3.i8 = vcnt_s8(*(int8x8_t *)a3.i8);
  a3.i16[0] = vaddlv_u8(*(uint8x8_t *)a3.i8);
  if (16 - a3.i32[0] >= a3.i32[0])
    v3 = a3.u32[0];
  else
    v3 = (16 - a3.i32[0]);
  if (!(_DWORD)v3)
    return -1;
  v4 = 0;
  v5 = vdupq_n_s32(v3);
  v6 = (char *)&DualPartitionTableIndices_4x4 + 72 * v3;
  *(int16x4_t *)a3.i8 = vdup_n_s16(a1);
  v7 = 0;
  v8 = (int8x8_t)vdup_n_s16(~a2);
  v9.i64[0] = -1;
  v9.i64[1] = -1;
  v10 = &DualPartitionTable_4x4[9 * v3];
  v11 = v3;
  do
  {
    v12 = DualPartitionTable_4x4[9 * v3 + v4];
    if (!v12.i16[0])
      break;
    v13 = veor_s8(v12, *(int8x8_t *)a3.i8);
    v14 = vminq_s32((int32x4_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8(v13, v8))))), (int32x4_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vmovl_u16((uint16x4_t)vbic_s8(v8, v13))))));
    if (vminvq_s32(v14) < v11)
    {
      for (i = 0; i != 4; ++i)
      {
        v55 = v14;
        v16 = *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
        if (v16 < v11 && (*(__int16 *)&v6[2 * i] & 0x80000000) == 0)
        {
          if (v16 >= v5.i32[0])
          {
            if (v16 >= v5.i32[1])
            {
              if (v16 >= v5.i32[2])
              {
                if (v16 < v5.i32[3])
                {
                  v7.i16[3] = v10->i16[i];
                  v5.i32[3] = *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
                  v9.i32[3] = *(unsigned __int16 *)&v6[2 * i];
                }
              }
              else
              {
                v17.i32[0] = v7.i32[0];
                v17.i16[2] = v10->i16[i];
                v17.i16[3] = v7.i16[2];
                v18.i64[0] = v5.i64[0];
                v18.i32[2] = *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
                v18.i32[3] = v5.i32[2];
                v19.i64[0] = v9.i64[0];
                v19.i64[1] = __PAIR64__(v9.u32[2], *(unsigned __int16 *)&v6[2 * i]);
                v9 = v19;
                v7 = v17;
                v5 = v18;
              }
            }
            else
            {
              v7 = vzip1_s16(v7, vzip2_s16(v7, v7));
              v5 = vzip1q_s32(v5, vzip2q_s32(v5, v5));
              v9 = vzip1q_s32(v9, vzip2q_s32(v9, v9));
              v7.i16[1] = v10->i16[i];
              v5.i32[1] = *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
              v9.i32[1] = *(unsigned __int16 *)&v6[2 * i];
            }
          }
          else
          {
            v7 = (int16x4_t)vext_s8(*(int8x8_t *)a3.i8, (int8x8_t)v7, 6uLL);
            v5 = (int32x4_t)vextq_s8(a3, (int8x16_t)v5, 0xCuLL);
            v9 = (int32x4_t)vextq_s8(a3, (int8x16_t)v9, 0xCuLL);
            v7.i16[0] = v10->i16[i];
            v5.i32[0] = *(_DWORD *)((unint64_t)&v55 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
            v9.i32[0] = *(unsigned __int16 *)&v6[2 * i];
          }
          v11 = v5.i32[3];
        }
      }
    }
    ++v4;
    ++v10;
    v6 += 8;
  }
  while (v4 != 9);
  v20 = v5.i32[3];
  if (v5.i32[3] >= 2)
  {
    v21 = v3 - 1;
    v22 = 72 * v3 + 72;
    v23 = (char *)DualPartitionTable_4x4 + v22;
    v24 = (char *)&DualPartitionTableIndices_4x4 + v22;
    v25 = 1;
    do
    {
      if ((uint64_t)(v3 - v25) >= 1)
      {
        v26 = 0;
        v27 = &DualPartitionTable_4x4[9 * v21];
        v28 = (char *)&DualPartitionTableIndices_4x4 + 72 * v21;
        do
        {
          v29 = DualPartitionTable_4x4[9 * (v3 - v25) + v26];
          if (!v29.i16[0])
            break;
          v30 = veor_s8(v29, *(int8x8_t *)a3.i8);
          v31 = vminq_s32((int32x4_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8(v30, v8))))), (int32x4_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vmovl_u16((uint16x4_t)vbic_s8(v8, v30))))));
          if (vminvq_s32(v31) < v20)
          {
            for (j = 0; j != 4; ++j)
            {
              v54 = v31;
              v33 = *(_DWORD *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
              if (v33 < v20 && (*(__int16 *)&v28[2 * j] & 0x80000000) == 0)
              {
                if (v33 >= v5.i32[0])
                {
                  if (v33 >= v5.i32[1])
                  {
                    if (v33 >= v5.i32[2])
                    {
                      if (v33 < v5.i32[3])
                      {
                        v7.i16[3] = v27->i16[j];
                        v5.i32[3] = *(_DWORD *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                        v9.i32[3] = *(unsigned __int16 *)&v28[2 * j];
                      }
                    }
                    else
                    {
                      v34.i32[0] = v7.i32[0];
                      v34.i16[2] = v27->i16[j];
                      v34.i16[3] = v7.i16[2];
                      v35.i64[0] = v5.i64[0];
                      v35.i32[2] = *(_DWORD *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                      v35.i32[3] = v5.i32[2];
                      v36.i64[0] = v9.i64[0];
                      v36.i64[1] = __PAIR64__(v9.u32[2], *(unsigned __int16 *)&v28[2 * j]);
                      v9 = v36;
                      v7 = v34;
                      v5 = v35;
                    }
                  }
                  else
                  {
                    v7 = vzip1_s16(v7, vzip2_s16(v7, v7));
                    v5 = vzip1q_s32(v5, vzip2q_s32(v5, v5));
                    v9 = vzip1q_s32(v9, vzip2q_s32(v9, v9));
                    v7.i16[1] = v27->i16[j];
                    v5.i32[1] = *(_DWORD *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                    v9.i32[1] = *(unsigned __int16 *)&v28[2 * j];
                  }
                }
                else
                {
                  v7 = (int16x4_t)vext_s8(*(int8x8_t *)a3.i8, (int8x8_t)v7, 6uLL);
                  v5 = (int32x4_t)vextq_s8(a3, (int8x16_t)v5, 0xCuLL);
                  v9 = (int32x4_t)vextq_s8(a3, (int8x16_t)v9, 0xCuLL);
                  v7.i16[0] = v27->i16[j];
                  v5.i32[0] = *(_DWORD *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                  v9.i32[0] = *(unsigned __int16 *)&v28[2 * j];
                }
                v20 = v5.i32[3];
              }
            }
          }
          ++v26;
          ++v27;
          v28 += 8;
        }
        while (v26 != 9);
      }
      v20 = v5.i32[3];
      v37 = v25 + v3;
      if ((uint64_t)v25 < v5.i32[3] && v37 <= 8)
      {
        v39 = 0;
        v40 = &DualPartitionTable_4x4[9 * v37];
        v41 = v24;
        v42 = v23;
        do
        {
          v43 = v40[v39];
          if (!v43.i16[0])
            break;
          v44 = veor_s8(v43, *(int8x8_t *)a3.i8);
          v45 = vminq_s32((int32x4_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vmovl_u16((uint16x4_t)vand_s8(v44, v8))))), (int32x4_t)vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8((int8x16_t)vmovl_u16((uint16x4_t)vbic_s8(v8, v44))))));
          if (vminvq_s32(v45) < v20)
          {
            for (k = 0; k != 4; ++k)
            {
              v53 = v45;
              v47 = *(_DWORD *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
              if (v47 < v20 && (*(__int16 *)&v41[2 * k] & 0x80000000) == 0)
              {
                if (v47 >= v5.i32[0])
                {
                  if (v47 >= v5.i32[1])
                  {
                    if (v47 >= v5.i32[2])
                    {
                      if (v47 < v5.i32[3])
                      {
                        v7.i16[3] = *(_WORD *)&v42[2 * k];
                        v5.i32[3] = *(_DWORD *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                        v9.i32[3] = *(unsigned __int16 *)&v41[2 * k];
                      }
                    }
                    else
                    {
                      v48.i32[0] = v7.i32[0];
                      v48.i16[2] = *(_WORD *)&v42[2 * k];
                      v48.i16[3] = v7.i16[2];
                      v49.i64[0] = v5.i64[0];
                      v49.i32[2] = *(_DWORD *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                      v49.i32[3] = v5.i32[2];
                      v50.i64[0] = v9.i64[0];
                      v50.i64[1] = __PAIR64__(v9.u32[2], *(unsigned __int16 *)&v41[2 * k]);
                      v9 = v50;
                      v7 = v48;
                      v5 = v49;
                    }
                  }
                  else
                  {
                    v7 = vzip1_s16(v7, vzip2_s16(v7, v7));
                    v5 = vzip1q_s32(v5, vzip2q_s32(v5, v5));
                    v9 = vzip1q_s32(v9, vzip2q_s32(v9, v9));
                    v7.i16[1] = *(_WORD *)&v42[2 * k];
                    v5.i32[1] = *(_DWORD *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                    v9.i32[1] = *(unsigned __int16 *)&v41[2 * k];
                  }
                }
                else
                {
                  v7 = (int16x4_t)vext_s8(*(int8x8_t *)a3.i8, (int8x8_t)v7, 6uLL);
                  v5 = (int32x4_t)vextq_s8(a3, (int8x16_t)v5, 0xCuLL);
                  v9 = (int32x4_t)vextq_s8(a3, (int8x16_t)v9, 0xCuLL);
                  v7.i16[0] = *(_WORD *)&v42[2 * k];
                  v5.i32[0] = *(_DWORD *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                  v9.i32[0] = *(unsigned __int16 *)&v41[2 * k];
                }
                v20 = v5.i32[3];
              }
            }
          }
          ++v39;
          v42 += 8;
          v41 += 8;
        }
        while (v39 != 9);
        v20 = v5.i32[3];
      }
      --v21;
      v23 += 72;
      v24 += 72;
      v51 = (uint64_t)(v25 + 1) >= v5.i32[3] || v25 >= 4;
      ++v25;
    }
    while (!v51);
  }
  return (uint64_t)vmovn_s32(v9);
}

float EncodeStandardDualPartitionBlock(int8x16_t *a1, uint64_t a2, unsigned __int16 *a3, float a4)
{
  unint64_t v4;
  int32x4_t v5;
  int32x4_t v6;
  int32x4_t v7;
  int32x4_t v8;
  float32x4_t *v9;
  __int32 v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int32x4_t v25;
  int32x4_t v26;
  int32x4_t v27;
  int32x4_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int32x4_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int16x8_t v40;
  __int32 v41;
  float v42;
  float32x4_t v43;
  int32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x2_t *v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  int8x16_t v93;
  int8x16_t v94;
  float32x4_t v95;
  float32x4_t v96;
  float32x4_t v97;
  int32x4_t v98;
  int32x4_t v99;
  int32x4_t v100;
  int32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  int8x16_t *v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x16_t v110;
  int8x16_t v111;
  int8x16_t v112;
  uint64_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  float32x4_t v127;
  float32x4_t v128;
  float32x4_t v129;
  float32x4_t v130;
  float32x4_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  int8x16_t v151;
  int8x16_t v152;
  int8x16_t v153;
  int8x16_t v154;
  float32x4_t v155;
  float32x4_t v156;
  int32x4_t v157;
  int32x4_t v158;
  int32x4_t v159;
  int32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  float32x4_t v163;
  float32x4_t v164;
  float32x4_t v165;
  float32x4_t v166;
  float32x4_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  float32x4_t v171;
  float32x4_t v172;
  float32x4_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t v179;
  float32x4_t v180;
  float32x4_t v181;
  float32x4_t v182;
  float32x4_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  int8x16_t v191;
  int8x16_t v192;
  int8x16_t v193;
  int8x16_t v194;
  int32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  int32x4_t v198;
  int8x16_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  int8x16_t v206;
  int8x16_t v207;
  int8x16_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  int8x16_t v229;
  int8x16_t v230;
  int8x16_t v231;
  int8x16_t v232;
  int32x4_t v233;
  int32x4_t v234;
  int32x4_t v235;
  int32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  int8x16_t v242;
  float32x4_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  float32x4_t v248;
  float32x4_t v249;
  int8x16_t v250;
  float32x4_t v251;
  float32x4_t v253;
  float32x4_t v254;
  int8x16_t v255;
  int16x8_t v256;
  int8x16_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  float32x4_t v261;
  int8x16_t v262;
  float32x4_t v263;
  float32x4_t v264;
  int8x16_t v265;
  float32x4_t v266;
  int16x8_t v267;
  float32x4_t v268;
  int8x8_t v269;
  int8x16_t v270;
  float32x4_t v271;
  float32x4_t v272;
  float32x4_t v273;
  float32x4_t v274;
  int8x16_t v275;
  float32x4_t v276;
  float32x4_t v277;
  float32x4_t v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  float32x4_t v283;
  __int32 v284;
  uint64_t v285;
  float32x4_t v286;
  float32x4_t v287;
  int8x16_t v288;
  int8x16_t v289;
  int8x16_t v290;
  int8x16_t v291;
  int16x8_t v292;
  int16x8_t v293;
  int16x8_t v294;
  int16x8_t v295;
  int16x8_t v296;
  uint8x8_t v297;
  int8x16_t v298;
  int8x16_t v299;
  int8x16_t v300;
  int8x16_t v301;
  float32x4_t v302;
  int8x16_t v303;
  int16x8_t v304;
  int16x8_t v305;
  int16x8_t v306;
  int16x8_t v307;
  int16x8_t v308;
  uint8x8_t v309;
  int8x16_t v310;
  int8x16_t v311;
  int8x16_t v312;
  int8x16_t v313;
  float32x4_t v314;
  float32x4_t v315;
  int8x16_t v316;
  float32x4_t v317;
  int8x16_t v318;
  float32x4_t v319;
  int8x8_t v320;
  int8x16_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x4_t v326;
  float32x4_t v327;
  float32x4_t v328;
  float32x4_t v329;
  float32x4_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  int8x16_t v338;
  int8x16_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  int8x16_t v345;
  int8x16_t v346;
  int8x16_t v347;
  int8x16_t v348;
  int16x8_t v349;
  int16x8_t v350;
  int16x8_t v351;
  float32x4_t v352;
  int16x8_t v353;
  unsigned __int16 v354;
  int8x16_t v355;
  int8x16_t v356;
  int8x16_t v357;
  int8x16_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t v362;
  float32x4_t v363;
  float32x4_t v364;
  float32x4_t v365;
  int16x8_t v366;
  float32x4_t v367;
  float32x4_t v368;
  int16x8_t v369;
  unsigned __int16 v370;
  int8x16_t v371;
  int8x16_t v372;
  int8x16_t v373;
  int8x16_t v374;
  float32x4_t v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  float32x4_t v379;
  float32x4_t v380;
  float32x4_t v381;
  float32x4_t v382;
  float32x4_t v383;
  int v384;
  int8x16_t v385;
  int8x16_t v386;
  int8x16_t v387;
  int8x16_t v388;
  float32x4_t v389;
  uint8x8_t v390;
  __int32 v391;
  float32x4_t v392;
  float32x4_t v393;
  float32x4_t v394;
  int8x16_t v395;
  int8x16_t v396;
  int8x16_t v397;
  int8x16_t v398;
  int8x16_t v399;
  float32x4_t v400;
  float32x4_t v401;
  float32x4_t v402;
  float32x4_t v403;
  float32x4_t v404;
  float32x4_t v405;
  int8x16_t v406;
  int8x16_t v407;
  int8x16_t v408;
  float32x4_t v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t v414;
  float32x4_t v415;
  float32x4_t v416;
  float32x4_t v417;
  float32x4_t v418;
  float32x4_t v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int8x16_t v426;
  float32x4_t v427;
  float32x4_t v428;
  float32x4_t v429;
  float32x4_t v430;
  float32x4_t v431;
  int8x16_t v432;
  float32x4_t v433;
  int8x16_t v434;
  __int32 v435;
  float32x4_t v436;
  int8x8_t v437;
  __int32 v438;
  uint8x8_t v439;
  float32x4_t v440;
  float32x4_t v441;
  int8x16_t v442;
  int8x16_t v443;
  int8x16_t v444;
  int8x16_t v445;
  int8x16_t v446;
  float32x4_t v447;
  float32x4_t v448;
  float32x4_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  int8x16_t v453;
  int8x16_t v454;
  int8x16_t v455;
  int8x16_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  int8x16_t v473;
  int8x16_t v474;
  float32x4_t v475;
  float32x4_t v476;
  int8x16_t v477;
  float32x4_t v478;
  float32x4_t v479;
  int8x16_t v480;
  float32x4_t v481;
  float32x4_t v482;
  int8x16_t v483;
  int8x16_t v484;
  unsigned int v485;
  unsigned int v486;
  float32x4_t v487;
  float32x4_t v488;
  float32x4_t v489;
  float32x4_t v490;
  float32x4_t v491;
  int8x16_t v492;
  float32x4_t v493;
  float32x4_t v494;
  int16x8_t v495;
  float32x4_t v496;
  int8x8_t v497;
  float32x4_t v498;
  int8x16_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  int16x8_t v503;
  int8x8_t v504;
  float32x4_t v505;
  int8x16_t v506;
  int8x16_t v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  int8x16_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float32x4_t v514;
  uint16x8_t v515;
  float32x4_t v516;
  uint16x8_t v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  int8x16_t v525;
  int8x16_t v526;
  int8x16_t v527;
  float32x4_t v528;
  float32x4_t v529;
  int8x16_t v530;
  float v531;
  int8x16_t v532;
  float v533;
  int8x16_t v534;
  int8x16_t v535;
  int8x16_t v536;
  int8x16_t v537;
  int8x16_t v538;
  int8x16_t v539;
  int8x16_t v540;
  int8x16_t v541;
  int8x16_t v542;
  int8x16_t v543;
  float32x4_t v544;
  int8x16_t v545;
  int8x16_t v546;
  int8x16_t v547;
  int8x16_t v548;
  int8x16_t v549;
  int8x16_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  int8x16_t v555;
  int8x16_t v556;
  float32x4_t v557;
  int8x16_t v558;
  int8x16_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  float32x4_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  int8x16_t v575;
  int8x16_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  int8x16_t v581;
  int8x16_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  int8x16_t v586;
  float32x4_t v587;
  float32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  int8x16_t v591;
  int8x16_t v592;
  int8x16_t v593;
  int8x16_t v594;
  int8x16_t v595;
  int8x16_t v596;
  int8x16_t v597;
  int8x16_t v598;
  int8x16_t v599;
  int8x16_t v600;
  int8x16_t v601;
  float32x4_t v602;
  int8x16_t v603;
  float32x4_t v604;
  int8x16_t v605;
  float32x4_t v606;
  int8x16_t v607;
  float32x4_t v608;
  int8x16_t v609;
  int8x16_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  int8x16_t v614;
  int8x16_t v615;
  float32x4_t v616;
  float32x4_t v617;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  float32x4_t v623;
  int8x16_t v624;
  int8x16_t v625;
  int8x16_t v626;
  int8x16_t v627;
  int8x16_t v628;
  int8x16_t v629;
  int8x16_t v630;
  int8x16_t v631;
  int8x16_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  int8x16_t v645;
  float32x4_t v646;
  float32x4_t v647;
  float32x4_t v648;
  float32x4_t v649;
  float32x4_t v650;
  float32x4_t v651;
  float32x4_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  int v659;
  int8x16_t *v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  int8x16_t v664;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float v691;
  __int128 v692;
  int8x16_t v694;
  int8x16_t v695;
  int8x16_t v696;
  int8x16_t v697;
  int8x16_t v698;
  int8x16_t v699;
  int8x16_t v700;
  int8x16_t v701;
  float32x4_t v702;
  float32x4_t v704;
  float32x4_t v705;
  float32x4_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  float32x4_t v711;
  float32x4_t v712;
  float32x4_t v713;
  int8x8_t v714;
  float32x4_t v715;
  int8x8_t v716;
  float32x4_t v717;
  int8x16_t v718;
  float32x4_t v719;
  int8x16_t v720;
  float32x4_t v721;
  int8x16_t v722;
  float32x4_t v723;
  float32x4_t v724;
  float32x4_t v725;
  int8x16_t v726;
  float32x4_t v727;
  int16x8_t v728;
  int16x8_t v729;
  int16x8_t v730;
  float32x4_t v731;
  int8x16_t v732;
  int16x8_t v733;
  float32x4_t v734;
  float32x4_t v735;
  float32x4_t v736;
  float32x4_t v737;
  int8x16_t v738;
  float32x4_t v739;
  int8x16_t v740;
  float32x4_t v741;
  int8x16_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  int32x4_t v752;
  float32x4_t v753;
  int32x4_t v754;
  float32x4_t v755;
  int32x4_t v756;
  float32x4_t v757;
  int32x4_t v758;
  float32x4_t v759;
  float32x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  int16x8_t v765;
  float32x4_t v766;
  int16x8_t v767;
  float32x4_t v768;
  int16x8_t v769;
  float32x4_t v770;
  int16x8_t v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  uint64_t v778;
  int8x8_t v779;
  uint64_t v780;
  int8x8_t v781;
  uint64_t v782;
  int8x8_t v783;
  int8x8_t v784;
  int8x8_t v785;

  v4 = a3[1];
  v5 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + ((v4 >> 8) & 0xF0));
  v6 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + ((v4 >> 4) & 0xF0));
  v7 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + (v4 & 0xF0));
  v8 = VectorMaskForBitMask(unsigned short)::kVectorMasks[v4 & 0xF];
  v9 = (float32x4_t *)&a1[17];
  v10 = a1[8].u8[7];
  v11 = v5;
  v12 = v6;
  v13 = v7;
  v14 = v8;
  if (a1[8].i8[7])
  {
    v12 = (int32x4_t)vorrq_s8(a1[46], (int8x16_t)v6);
    v11 = (int32x4_t)vorrq_s8(a1[45], (int8x16_t)v5);
    v13 = (int32x4_t)vorrq_s8(a1[47], (int8x16_t)v7);
    v14 = (int32x4_t)vorrq_s8(a1[48], (int8x16_t)v8);
  }
  v735 = (float32x4_t)a1[12];
  v763 = (float32x4_t)a1[11];
  v774 = (float32x4_t)a1[9];
  v775 = (float32x4_t)a1[10];
  v15 = (float32x4_t)a1[16];
  v773 = (float32x4_t)a1[14];
  v776 = (float32x4_t)a1[13];
  v777 = (float32x4_t)a1[15];
  v16 = a1[19];
  v17 = a1[20];
  v18 = *(int8x16_t *)v9;
  v19 = a1[18];
  v20 = a1[24];
  v21 = vmvnq_s8((int8x16_t)v5);
  v22 = vmvnq_s8((int8x16_t)v6);
  v23 = vmvnq_s8((int8x16_t)v7);
  v24 = vmvnq_s8((int8x16_t)v8);
  v25 = (int32x4_t)v21;
  v26 = (int32x4_t)v22;
  v27 = (int32x4_t)v23;
  v28 = (int32x4_t)v24;
  v29 = a1[21];
  v30 = a1[22];
  if (a1[8].i8[7])
  {
    v26 = (int32x4_t)vorrq_s8(a1[46], v22);
    v25 = (int32x4_t)vorrq_s8(a1[45], v21);
    v27 = (int32x4_t)vorrq_s8(a1[47], v23);
    v28 = (int32x4_t)vorrq_s8(a1[48], v24);
  }
  v726 = v22;
  v738 = v24;
  v740 = v23;
  v742 = v21;
  v752 = VectorMaskForBitMask(unsigned short)::kVectorMasks[v4 & 0xF];
  v754 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + (v4 & 0xF0));
  v756 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + ((v4 >> 4) & 0xF0));
  v758 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + ((v4 >> 8) & 0xF0));
  v765 = (int16x8_t)v12;
  v31.i64[0] = -1;
  v31.i64[1] = -1;
  v769 = (int16x8_t)v13;
  v771 = (int16x8_t)v11;
  v32 = (int8x16_t)vcgtq_s32(v13, v31);
  v33 = (int8x16_t)vcgtq_s32(v11, v31);
  v767 = (int16x8_t)v14;
  v34 = (int8x16_t)vcgtq_s32(v14, v31);
  v35 = (int8x16_t)vcgtq_s32(v12, v31);
  v748 = (float32x4_t)a1[16];
  v36 = (int8x16_t)vcgtq_s32(v27, v31);
  v37 = (int8x16_t)vcgtq_s32(v25, v31);
  v38 = (int8x16_t)vcgtq_s32(v28, v31);
  v39 = (int8x16_t)vcgtq_s32(v26, v31);
  v728 = (int16x8_t)vcltzq_s32(v6);
  v729 = (int16x8_t)vcltzq_s32(v8);
  v733 = (int16x8_t)vcltzq_s32(v5);
  v730 = (int16x8_t)vcltzq_s32(v7);
  v40 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v771, v765), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v769, v767), (int8x16_t)xmmword_20631C0C0));
  v40.i16[0] = vaddvq_s16(v40);
  *(int8x8_t *)v40.i8 = vcnt_s8(*(int8x8_t *)v40.i8);
  v40.i16[0] = vaddlv_u8(*(uint8x8_t *)v40.i8);
  v41 = v40.i32[0];
  v42 = ReciprocalTable[(unsigned __int16)(16 - v40.i16[0])];
  v43 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v774, v37), (float32x4_t)vandq_s8((int8x16_t)v763, v36)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v775, v39), (float32x4_t)vandq_s8((int8x16_t)v735, v38))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v776, v37), (float32x4_t)vandq_s8((int8x16_t)v777, v36)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v773, v39), (float32x4_t)vandq_s8((int8x16_t)v15, v38)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v18, v37), (float32x4_t)vandq_s8(v16, v36)), vaddq_f32((float32x4_t)vandq_s8(v19, v39), (float32x4_t)vandq_s8(v17, v38))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v29, (int8x16_t)v733), (float32x4_t)vandq_s8(a1[23], (int8x16_t)v730)), vaddq_f32((float32x4_t)vandq_s8(v30, (int8x16_t)v728), (float32x4_t)vandq_s8(v20, (int8x16_t)v729)))));
  v44 = (int32x4_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v774, v33), (float32x4_t)vandq_s8((int8x16_t)v763, v32)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v775, v35), (float32x4_t)vandq_s8((int8x16_t)v735, v34))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v776, v33), (float32x4_t)vandq_s8((int8x16_t)v777, v32)), vaddq_f32((float32x4_t)vandq_s8((int8x16_t)v773, v35), (float32x4_t)vandq_s8((int8x16_t)v15, v34)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(v18, v33), (float32x4_t)vandq_s8(v16, v32)),
                           vaddq_f32((float32x4_t)vandq_s8(v19, v35), (float32x4_t)vandq_s8(v17, v34))),
                         vaddq_f32(vaddq_f32((float32x4_t)vbicq_s8(v29, (int8x16_t)v733), (float32x4_t)vbicq_s8(a1[23], (int8x16_t)v730)), vaddq_f32((float32x4_t)vbicq_s8(v30, (int8x16_t)v728), (float32x4_t)vbicq_s8(v20, (int8x16_t)v729))))), v42);
  v45 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.i8, 0);
  v46 = vsubq_f32(v774, v45);
  v47 = vsubq_f32(v775, v45);
  v48 = vsubq_f32(v763, v45);
  v49 = vsubq_f32(v735, v45);
  v50 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.i8, 1);
  v51 = vsubq_f32(v776, v50);
  v52 = vsubq_f32(v773, v50);
  v53 = vsubq_f32(v777, v50);
  v54 = vsubq_f32(v15, v50);
  v56 = (float32x4_t)a1[19];
  v55 = (float32x4_t)a1[20];
  v57 = (float32x4_t)a1[18];
  v58 = (float32x4_t)vdupq_laneq_s32(v44, 2);
  v772 = *v9;
  v59 = vsubq_f32(*v9, v58);
  v60 = vsubq_f32(v57, v58);
  v61 = vsubq_f32(v56, v58);
  v62 = vsubq_f32(v55, v58);
  v723 = (float32x4_t)v44;
  v63 = (float32x4_t)vdupq_laneq_s32(v44, 3);
  v764 = (float32x4_t)a1[21];
  v766 = (float32x4_t)a1[23];
  v64 = vsubq_f32(v764, v63);
  v768 = (float32x4_t)a1[22];
  v770 = (float32x4_t)a1[24];
  v65 = vsubq_f32(v768, v63);
  v66 = vsubq_f32(v766, v63);
  v67 = vsubq_f32(v770, v63);
  v68 = (float32x2_t *)a1[2].i64[0];
  v69 = vmulq_f32(v49, v49);
  v70 = vmulq_f32(v48, v48);
  v71 = vmulq_f32(v47, v47);
  v72 = vmulq_f32(v46, v46);
  v73 = vmulq_f32(v54, v54);
  v74 = vmulq_f32(v53, v53);
  v75 = vmulq_f32(v52, v52);
  v76 = vmulq_f32(v51, v51);
  v77 = vmulq_f32(v62, v62);
  v78 = vmulq_f32(v61, v61);
  v79 = vmulq_f32(v60, v60);
  v80 = vmulq_f32(v59, v59);
  v81 = vmulq_f32(v67, v67);
  v82 = vmulq_f32(v66, v66);
  v83 = vmulq_f32(v65, v65);
  v84 = vmulq_f32(v64, v64);
  __asm { FMOV            V8.4S, #3.0 }
  if (v68)
  {
    v90 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v74, *v68, 1), v70, COERCE_FLOAT(*(_OWORD *)v68->f32)), v78, *(float32x4_t *)v68->f32, 2), v82, *(float32x4_t *)v68->f32, 3);
    v91 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v75, *v68, 1), v71, COERCE_FLOAT(*(_OWORD *)v68->f32)), v79, *(float32x4_t *)v68->f32, 2), v83, *(float32x4_t *)v68->f32, 3), _Q8);
    v92 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v76, *v68, 1), v72, COERCE_FLOAT(*(_OWORD *)v68->f32)), v80, *(float32x4_t *)v68->f32, 2), v84, *(float32x4_t *)v68->f32, 3), _Q8);
    v93 = (int8x16_t)vmulq_f32(v90, _Q8);
    v94 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v73, *v68, 1), v69, COERCE_FLOAT(*(_OWORD *)v68->f32)), v77, *(float32x4_t *)v68->f32, 2), v81, *(float32x4_t *)v68->f32, 3), _Q8);
  }
  else
  {
    v95 = vaddq_f32(v78, vaddq_f32(v70, v74));
    v96 = vaddq_f32(v79, vaddq_f32(v71, v75));
    v92 = (int8x16_t)vaddq_f32(v84, vaddq_f32(v80, vaddq_f32(v72, v76)));
    v91 = (int8x16_t)vaddq_f32(v83, v96);
    v93 = (int8x16_t)vaddq_f32(v82, v95);
    v94 = (int8x16_t)vaddq_f32(v81, vaddq_f32(v77, vaddq_f32(v69, v73)));
  }
  v97 = vmulq_n_f32(v43, ReciprocalTable[v41]);
  v98 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + ((v4 >> 8) & 0xF0));
  v99 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + ((v4 >> 4) & 0xF0));
  v100 = *(int32x4_t *)((char *)VectorMaskForBitMask(unsigned short)::kVectorMasks + (v4 & 0xF0));
  v101 = VectorMaskForBitMask(unsigned short)::kVectorMasks[v4 & 0xF];
  if (a1[8].i8[7])
  {
    v99 = (int32x4_t)vorrq_s8(a1[46], (int8x16_t)v756);
    v98 = (int32x4_t)vorrq_s8(a1[45], (int8x16_t)v758);
    v100 = (int32x4_t)vorrq_s8(a1[47], (int8x16_t)v754);
    v101 = (int32x4_t)vorrq_s8(a1[48], (int8x16_t)v752);
  }
  v102.i64[0] = 0x7F0000007FLL;
  v102.i64[1] = 0x7F0000007FLL;
  v694 = v91;
  v695 = v94;
  v103 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v99), v102, v91);
  v104 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v101), v102, v94);
  v696 = v92;
  v697 = v93;
  v105 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v98), v102, v92);
  v106 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v100), v102, v93);
  v107 = a1 + 25;
  v108 = vmaxnmq_f32(v105, v106);
  v109 = vmaxnmq_f32(v103, v104);
  v110 = vbslq_s8((int8x16_t)vcgtq_f32(v106, v105), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
  v111 = (int8x16_t)vmaxnmq_f32(v108, v109);
  v112 = vbslq_s8((int8x16_t)vcgtq_f32(v109, v108), vbslq_s8((int8x16_t)vcgtq_f32(v104, v103), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v110);
  v110.i64[0] = vextq_s8(v111, v111, 8uLL).u64[0];
  *(float32x2_t *)v104.f32 = vmaxnm_f32(*(float32x2_t *)v111.i8, *(float32x2_t *)v110.i8);
  v785 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v110.i8, *(float32x2_t *)v111.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v112, v112, 8uLL), *(int8x8_t *)v112.i8);
  v113 = *(unsigned int *)((unint64_t)&v785 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                           * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v104.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.f32, 1))) & 1)));
  v114 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 0);
  v115 = vsubq_f32(v735, v114);
  v116 = vsubq_f32(v774, v114);
  v117 = vsubq_f32(v775, v114);
  v118 = vsubq_f32(v763, v114);
  v119 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v97.f32, 1);
  v120 = vsubq_f32(v748, v119);
  v121 = vsubq_f32(v776, v119);
  v122 = vsubq_f32(v773, v119);
  v123 = vsubq_f32(v777, v119);
  v124 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 2);
  v125 = vsubq_f32(v55, v124);
  v126 = vsubq_f32(v772, v124);
  v127 = vsubq_f32(v57, v124);
  v128 = vsubq_f32(v56, v124);
  v129 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v97, 3);
  v130 = vsubq_f32(v770, v129);
  v131 = vsubq_f32(v764, v129);
  v132 = vsubq_f32(v768, v129);
  v133 = vsubq_f32(v766, v129);
  v134 = vmulq_f32(v118, v118);
  v135 = vmulq_f32(v117, v117);
  v136 = vmulq_f32(v116, v116);
  v137 = vmulq_f32(v115, v115);
  v138 = vmulq_f32(v123, v123);
  v139 = vmulq_f32(v122, v122);
  v140 = vmulq_f32(v121, v121);
  v141 = vmulq_f32(v120, v120);
  v142 = vmulq_f32(v128, v128);
  v143 = vmulq_f32(v127, v127);
  v144 = vmulq_f32(v126, v126);
  v145 = vmulq_f32(v125, v125);
  v146 = vmulq_f32(v133, v133);
  v147 = vmulq_f32(v132, v132);
  v148 = vmulq_f32(v131, v131);
  v149 = vmulq_f32(v130, v130);
  if (v68)
  {
    v150 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v140, *v68, 1), v136, COERCE_FLOAT(*(_OWORD *)v68->f32)), v144, *(float32x4_t *)v68->f32, 2), v148, *(float32x4_t *)v68->f32, 3);
    v151 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v139, *v68, 1), v135, COERCE_FLOAT(*(_OWORD *)v68->f32)), v143, *(float32x4_t *)v68->f32, 2), v147, *(float32x4_t *)v68->f32, 3), _Q8);
    v152 = (int8x16_t)vmulq_f32(v150, _Q8);
    v153 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v138, *v68, 1), v134, COERCE_FLOAT(*(_OWORD *)v68->f32)), v142, *(float32x4_t *)v68->f32, 2), v146, *(float32x4_t *)v68->f32, 3), _Q8);
    v154 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v141, *v68, 1), v137, COERCE_FLOAT(*(_OWORD *)v68->f32)), v145, *(float32x4_t *)v68->f32, 2), v149, *(float32x4_t *)v68->f32, 3), _Q8);
  }
  else
  {
    v155 = vaddq_f32(v143, vaddq_f32(v135, v139));
    v152 = (int8x16_t)vaddq_f32(v148, vaddq_f32(v144, vaddq_f32(v136, v140)));
    v151 = (int8x16_t)vaddq_f32(v147, v155);
    v153 = (int8x16_t)vaddq_f32(v146, vaddq_f32(v142, vaddq_f32(v134, v138)));
    v154 = (int8x16_t)vaddq_f32(v149, vaddq_f32(v145, vaddq_f32(v137, v141)));
  }
  v156 = (float32x4_t)v107[v113];
  v157 = (int32x4_t)v742;
  v158 = (int32x4_t)v726;
  v159 = (int32x4_t)v740;
  v160 = (int32x4_t)v738;
  if (v10)
  {
    v158 = (int32x4_t)vorrq_s8(a1[46], v726);
    v157 = (int32x4_t)vorrq_s8(a1[45], v742);
    v159 = (int32x4_t)vorrq_s8(a1[47], v740);
    v160 = (int32x4_t)vorrq_s8(a1[48], v738);
  }
  v161.i64[0] = 0x7F0000007FLL;
  v161.i64[1] = 0x7F0000007FLL;
  v700 = v152;
  v701 = v151;
  v162 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v158), v161, v151);
  v163 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v160), v161, v154);
  v164 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v157), v161, v152);
  v165 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v159), v161, v153);
  v166 = vmaxnmq_f32(v164, v165);
  v167 = vmaxnmq_f32(v162, v163);
  v168 = vbslq_s8((int8x16_t)vcgtq_f32(v165, v164), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
  v169 = (int8x16_t)vmaxnmq_f32(v166, v167);
  v170 = vbslq_s8((int8x16_t)vcgtq_f32(v167, v166), vbslq_s8((int8x16_t)vcgtq_f32(v163, v162), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v168);
  v168.i64[0] = vextq_s8(v169, v169, 8uLL).u64[0];
  *(float32x2_t *)v163.f32 = vmaxnm_f32(*(float32x2_t *)v169.i8, *(float32x2_t *)v168.i8);
  v784 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v168.i8, *(float32x2_t *)v169.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v170, v170, 8uLL), *(int8x8_t *)v170.i8);
  v171 = (float32x4_t)v107[*(unsigned int *)((unint64_t)&v784 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                             * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v163.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v163.f32, 1))) & 1)))];
  v172 = vsubq_f32(v97, v171);
  v173 = vsubq_f32(v723, v156);
  v704 = _Q8;
  v702 = v97;
  v698 = v154;
  v699 = v153;
  if (v68)
  {
    v172 = vmulq_f32(v172, *(float32x4_t *)v68->f32);
    v173 = vmulq_f32(v173, *(float32x4_t *)v68->f32);
  }
  v174 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v156.f32, 0);
  v175 = vsubq_f32(v735, v174);
  v176 = vsubq_f32(v763, v174);
  v177 = vsubq_f32(v774, v174);
  v178 = vsubq_f32(v775, v174);
  v179 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v156.f32, 1);
  v180 = vsubq_f32(v773, v179);
  v181 = vsubq_f32(v776, v179);
  v182 = vsubq_f32(v777, v179);
  v183 = vsubq_f32(v748, v179);
  v184 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v156, 2);
  v185 = vsubq_f32(v57, v184);
  v186 = vsubq_f32(v772, v184);
  v187 = vsubq_f32(v56, v184);
  v188 = vsubq_f32(v55, v184);
  v731 = v156;
  v189 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v156, 3);
  v190 = vsubq_f32(v764, v189);
  v719 = v183;
  v721 = v175;
  v712 = v176;
  v713 = v182;
  v706 = v181;
  v709 = v180;
  v715 = vsubq_f32(v770, v189);
  v717 = v188;
  v710 = vsubq_f32(v766, v189);
  v711 = v187;
  v707 = vsubq_f32(v768, v189);
  v708 = v185;
  v191 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v180, *(float32x2_t *)v173.f32, 1), v178, v173.f32[0]), v185, v173, 2), v707, v173, 3);
  v192 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v181, *(float32x2_t *)v173.f32, 1), v177, v173.f32[0]), v186, v173, 2), v190, v173, 3);
  v193 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v182, *(float32x2_t *)v173.f32, 1), v176, v173.f32[0]), v187, v173, 2), v710, v173, 3);
  v194 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v183, *(float32x2_t *)v173.f32, 1), v175, v173.f32[0]), v188, v173, 2), v715, v173, 3);
  v195 = v758;
  v196 = v756;
  v197 = v754;
  v198 = v752;
  if (v10)
  {
    v196 = (int32x4_t)vorrq_s8(a1[46], (int8x16_t)v756);
    v195 = (int32x4_t)vorrq_s8(a1[45], (int8x16_t)v758);
    v197 = (int32x4_t)vorrq_s8(a1[47], (int8x16_t)v754);
    v198 = (int32x4_t)vorrq_s8(a1[48], (int8x16_t)v752);
  }
  v199.i64[0] = 0x7F0000007FLL;
  v199.i64[1] = 0x7F0000007FLL;
  v200 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v196), v199, v191);
  v201 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v198), v199, v194);
  v202 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v195), v199, v192);
  v203 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v197), v199, v193);
  v204 = vmaxnmq_f32(v202, v203);
  v205 = vmaxnmq_f32(v200, v201);
  v206 = vbslq_s8((int8x16_t)vcgtq_f32(v203, v202), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
  v207 = (int8x16_t)vmaxnmq_f32(v204, v205);
  v208 = vbslq_s8((int8x16_t)vcgtq_f32(v205, v204), vbslq_s8((int8x16_t)vcgtq_f32(v201, v200), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), v206);
  v206.i64[0] = vextq_s8(v207, v207, 8uLL).u64[0];
  *(float32x2_t *)v201.f32 = vmaxnm_f32(*(float32x2_t *)v207.i8, *(float32x2_t *)v206.i8);
  v783 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v206.i8, *(float32x2_t *)v207.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL), *(int8x8_t *)v208.i8);
  v725 = (float32x4_t)v107[*(unsigned int *)((unint64_t)&v783 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                             * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v201.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v201.f32, 1))) & 1)))];
  v209 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v171.f32, 0);
  v210 = vsubq_f32(v735, v209);
  v211 = vsubq_f32(v763, v209);
  v212 = vsubq_f32(v774, v209);
  v213 = vsubq_f32(v775, v209);
  v214 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v171.f32, 1);
  v215 = vsubq_f32(v773, v214);
  v216 = vsubq_f32(v776, v214);
  v217 = vsubq_f32(v777, v214);
  v218 = vsubq_f32(v748, v214);
  v219 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v171, 2);
  v745 = v56;
  v746 = v57;
  v220 = vsubq_f32(v57, v219);
  v221 = vsubq_f32(v772, v219);
  v222 = vsubq_f32(v56, v219);
  v747 = v55;
  v223 = vsubq_f32(v55, v219);
  v736 = v171;
  v224 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v171, 3);
  v225 = vsubq_f32(v770, v224);
  v226 = vsubq_f32(v766, v224);
  v227 = vsubq_f32(v764, v224);
  v228 = vsubq_f32(v768, v224);
  v705 = v223;
  v229 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v215, *(float32x2_t *)v172.f32, 1), v213, v172.f32[0]), v220, v172, 2), v228, v172, 3);
  v230 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v216, *(float32x2_t *)v172.f32, 1), v212, v172.f32[0]), v221, v172, 2), v227, v172, 3);
  v231 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v217, *(float32x2_t *)v172.f32, 1), v211, v172.f32[0]), v222, v172, 2), v226, v172, 3);
  v232 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v218, *(float32x2_t *)v172.f32, 1), v210, v172.f32[0]), v223, v172, 2), v225, v172, 3);
  v233 = (int32x4_t)v742;
  v234 = (int32x4_t)v726;
  v235 = (int32x4_t)v740;
  v236 = (int32x4_t)v738;
  if (v10)
  {
    v234 = (int32x4_t)vorrq_s8(a1[46], v726);
    v233 = (int32x4_t)vorrq_s8(a1[45], v742);
    v235 = (int32x4_t)vorrq_s8(a1[47], v740);
    v236 = (int32x4_t)vorrq_s8(a1[48], v738);
  }
  v237 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v234), v199, v229);
  v238 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v236), v199, v232);
  v239 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v233), v199, v230);
  v240 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v235), v199, v231);
  v241 = vmaxnmq_f32(v237, v238);
  v242 = (int8x16_t)vcgtq_f32(v238, v237);
  v243 = vmaxnmq_f32(v239, v240);
  v244 = vbslq_s8((int8x16_t)vcgtq_f32(v241, v243), vbslq_s8(v242, (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), vbslq_s8((int8x16_t)vcgtq_f32(v240, v239), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
  v245 = (int8x16_t)vmaxnmq_f32(v243, v241);
  v243.i64[0] = vextq_s8(v245, v245, 8uLL).u64[0];
  *(int8x8_t *)v244.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v243.f32, *(float32x2_t *)v245.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v244, v244, 8uLL), *(int8x8_t *)v244.i8);
  v246 = (int8x16_t)vsubq_f32(v725, v731);
  v247.i64[0] = 0x8000000080000000;
  v247.i64[1] = 0x8000000080000000;
  v248 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  *(float32x2_t *)v245.i8 = vmaxnm_f32(*(float32x2_t *)v245.i8, *(float32x2_t *)v243.f32);
  v782 = v244.i64[0];
  v249 = (float32x4_t)v107[*(unsigned int *)((unint64_t)&v782 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                             * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v245.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v245.i8, 1))) & 1)))];
  v250 = (int8x16_t)vsubq_f32(v249, v736);
  v251 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v248, vabdq_f32(v249, v736)), vorrq_s8(vandq_s8(v250, v247), (int8x16_t)v248), v250);
  __asm { FMOV            V2.4S, #1.0 }
  v253 = vdivq_f32(_Q2, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v248, vabdq_f32(v725, v731)), vorrq_s8(vandq_s8(v246, v247), (int8x16_t)v248), v246));
  v744 = _Q2;
  v254 = vdivq_f32(_Q2, v251);
  v255 = (int8x16_t)vmulq_n_f32(v177, v253.f32[0]);
  v256 = vuzp1q_s16(v733, v728);
  *(int8x8_t *)v243.f32 = vmovn_s16(v256);
  v257 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v243.f32, *(int8x8_t *)v211.f32)), 0x1FuLL));
  v258 = (float32x4_t)vbslq_s8(v257, (int8x16_t)vmulq_n_f32(v212, v254.f32[0]), v255);
  v259 = (float32x4_t)vbslq_s8(v257, (int8x16_t)vmulq_lane_f32(v216, *(float32x2_t *)v254.f32, 1), (int8x16_t)vmulq_lane_f32(v706, *(float32x2_t *)v253.f32, 1));
  v260 = (float32x4_t)vbslq_s8(v257, (int8x16_t)vmulq_laneq_f32(v221, v254, 2), (int8x16_t)vmulq_laneq_f32(v186, v253, 2));
  v261 = (float32x4_t)vbslq_s8(v257, (int8x16_t)vmulq_laneq_f32(v227, v254, 3), (int8x16_t)vmulq_laneq_f32(v190, v253, 3));
  v262 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v243.f32, *(int8x8_t *)v211.f32)), 0x1FuLL));
  v263 = (float32x4_t)vbslq_s8(v262, (int8x16_t)vmulq_n_f32(v213, v254.f32[0]), (int8x16_t)vmulq_n_f32(v178, v253.f32[0]));
  v264 = (float32x4_t)vbslq_s8(v262, (int8x16_t)vmulq_lane_f32(v215, *(float32x2_t *)v254.f32, 1), (int8x16_t)vmulq_lane_f32(v709, *(float32x2_t *)v253.f32, 1));
  v265 = (int8x16_t)vmulq_n_f32(v211, v254.f32[0]);
  v266 = (float32x4_t)vbslq_s8(v262, (int8x16_t)vmulq_laneq_f32(v220, v254, 2), (int8x16_t)vmulq_laneq_f32(v708, v253, 2));
  v267 = vuzp1q_s16(v730, v729);
  v268 = (float32x4_t)vbslq_s8(v262, (int8x16_t)vmulq_laneq_f32(v228, v254, 3), (int8x16_t)vmulq_laneq_f32(v707, v253, 3));
  v269 = vmovn_s16(v267);
  v270 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v269, *(int8x8_t *)v267.i8)), 0x1FuLL));
  v271 = (float32x4_t)vbslq_s8(v270, v265, (int8x16_t)vmulq_n_f32(v712, v253.f32[0]));
  v272 = (float32x4_t)vbslq_s8(v270, (int8x16_t)vmulq_lane_f32(v217, *(float32x2_t *)v254.f32, 1), (int8x16_t)vmulq_lane_f32(v713, *(float32x2_t *)v253.f32, 1));
  v273 = (float32x4_t)vbslq_s8(v270, (int8x16_t)vmulq_laneq_f32(v222, v254, 2), (int8x16_t)vmulq_laneq_f32(v711, v253, 2));
  v274 = (float32x4_t)vbslq_s8(v270, (int8x16_t)vmulq_laneq_f32(v226, v254, 3), (int8x16_t)vmulq_laneq_f32(v710, v253, 3));
  v275 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v269, *(int8x8_t *)v267.i8)), 0x1FuLL));
  v276 = (float32x4_t)vbslq_s8(v275, (int8x16_t)vmulq_n_f32(v210, v254.f32[0]), (int8x16_t)vmulq_n_f32(v721, v253.f32[0]));
  v277 = (float32x4_t)vbslq_s8(v275, (int8x16_t)vmulq_lane_f32(v218, *(float32x2_t *)v254.f32, 1), (int8x16_t)vmulq_lane_f32(v719, *(float32x2_t *)v253.f32, 1));
  v278 = (float32x4_t)vbslq_s8(v275, (int8x16_t)vmulq_laneq_f32(v705, v254, 2), (int8x16_t)vmulq_laneq_f32(v717, v253, 2));
  v279 = (float32x4_t)vbslq_s8(v275, (int8x16_t)vmulq_laneq_f32(v225, v254, 3), (int8x16_t)vmulq_laneq_f32(v715, v253, 3));
  v280 = vmlaq_f32(vmulq_f32(v277, v277), v276, v276);
  v281 = vmlaq_f32(vmulq_f32(v272, v272), v271, v271);
  v282 = vmlaq_f32(vmulq_f32(v264, v264), v263, v263);
  v283 = vmlaq_f32(vmulq_f32(v259, v259), v258, v258);
  v284 = a1[8].u8[8];
  v285 = 7;
  if (!a1[8].i8[8])
    v285 = 3;
  v259.f32[0] = ReciprocalTable[v285] * ReciprocalTable[v285];
  v286 = vmlaq_f32(vmlaq_f32(v282, v266, v266), v268, v268);
  v287 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v259.f32, 0);
  v288 = (int8x16_t)vcgtq_f32(v287, vmlaq_f32(vmlaq_f32(v283, v260, v260), v261, v261));
  v289 = (int8x16_t)vcgtq_f32(v287, v286);
  v290 = (int8x16_t)vcgtq_f32(v287, vmlaq_f32(vmlaq_f32(v281, v273, v273), v274, v274));
  v291 = (int8x16_t)vcgtq_f32(v287, vmlaq_f32(vmlaq_f32(v280, v278, v278), v279, v279));
  v292 = (int16x8_t)vandq_s8(v291, v738);
  v293 = (int16x8_t)vandq_s8(v290, v740);
  v294 = (int16x8_t)vandq_s8(v289, v726);
  v295 = (int16x8_t)vandq_s8(v288, v742);
  v296 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v295, v294), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v293, v292), (int8x16_t)xmmword_20631C0C0));
  v296.i16[0] = vaddvq_s16(v296);
  v297 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v296.i8);
  v297.i16[0] = vaddlv_u8(v297);
  if (v297.i32[0] >= 2u)
  {
    v298 = (int8x16_t)vcltzq_s32((int32x4_t)v293);
    v299 = (int8x16_t)vcltzq_s32((int32x4_t)v295);
    v300 = (int8x16_t)vcltzq_s32((int32x4_t)v292);
    v301 = (int8x16_t)vcltzq_s32((int32x4_t)v294);
    v731 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(a1[9], v299), (float32x4_t)vandq_s8(a1[11], v298)), vaddq_f32((float32x4_t)vandq_s8(a1[10], v301), (float32x4_t)vandq_s8(a1[12], v300))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(a1[13], v299), (float32x4_t)vandq_s8(a1[15], v298)), vaddq_f32((float32x4_t)vandq_s8(a1[14], v301), (float32x4_t)vandq_s8(a1[16], v300)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)v9, v299), (float32x4_t)vandq_s8(a1[19], v298)), vaddq_f32((float32x4_t)vandq_s8(a1[18], v301), (float32x4_t)vandq_s8(a1[20], v300))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(a1[21], v299), (float32x4_t)vandq_s8(a1[23], v298)), vaddq_f32((float32x4_t)vandq_s8(a1[22], v301), (float32x4_t)vandq_s8(a1[24], v300))))), ReciprocalTable[v297.u16[0]]);
  }
  v302 = v736;
  v303 = vuzp1q_s8((int8x16_t)v256, (int8x16_t)v267);
  v304 = (int16x8_t)vandq_s8((int8x16_t)v758, v288);
  v305 = (int16x8_t)vandq_s8((int8x16_t)v756, v289);
  v306 = (int16x8_t)vandq_s8((int8x16_t)v754, v290);
  v307 = (int16x8_t)vandq_s8((int8x16_t)v752, v291);
  v308 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v304, v305), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v306, v307), (int8x16_t)xmmword_20631C0C0));
  v308.i16[0] = vaddvq_s16(v308);
  v309 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v308.i8);
  v309.i16[0] = vaddlv_u8(v309);
  if (v309.i32[0] >= 2u)
  {
    v310 = (int8x16_t)vcltzq_s32((int32x4_t)v306);
    v311 = (int8x16_t)vcltzq_s32((int32x4_t)v304);
    v312 = (int8x16_t)vcltzq_s32((int32x4_t)v307);
    v313 = (int8x16_t)vcltzq_s32((int32x4_t)v305);
    v302 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(a1[9], v311), (float32x4_t)vandq_s8(a1[11], v310)), vaddq_f32((float32x4_t)vandq_s8(a1[10], v313), (float32x4_t)vandq_s8(a1[12], v312))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(a1[13], v311), (float32x4_t)vandq_s8(a1[15], v310)), vaddq_f32((float32x4_t)vandq_s8(a1[14], v313), (float32x4_t)vandq_s8(a1[16], v312)))), vpaddq_f32(vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(*(int8x16_t *)v9, v311), (float32x4_t)vandq_s8(a1[19], v310)), vaddq_f32((float32x4_t)vandq_s8(a1[18], v313), (float32x4_t)vandq_s8(a1[20], v312))), vaddq_f32(vaddq_f32((float32x4_t)vandq_s8(a1[21], v311), (float32x4_t)vandq_s8(a1[23], v310)), vaddq_f32((float32x4_t)vandq_s8(a1[22], v313), (float32x4_t)vandq_s8(a1[24], v312))))), ReciprocalTable[v309.u16[0]]);
  }
  v314 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v725.f32, 0);
  v315 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v249.f32, 0);
  v316 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v303.i8, *(int8x8_t *)v314.f32)), 0x1FuLL));
  v317 = (float32x4_t)vbslq_s8(v316, (int8x16_t)vmulq_n_f32(vsubq_f32(v315, v774), v254.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v314, v774), v253.f32[0]));
  v318 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v303.i8, *(int8x8_t *)v314.f32)), 0x1FuLL));
  v319 = (float32x4_t)vbslq_s8(v318, (int8x16_t)vmulq_n_f32(vsubq_f32(v315, v775), v254.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v314, v775), v253.f32[0]));
  v320 = (int8x8_t)vextq_s8(v303, v303, 8uLL).u64[0];
  v321 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v320, *(int8x8_t *)v314.f32)), 0x1FuLL));
  v322 = (float32x4_t)vbslq_s8(v321, (int8x16_t)vmulq_n_f32(vsubq_f32(v315, v763), v254.f32[0]), (int8x16_t)vmulq_n_f32(vsubq_f32(v314, v763), v253.f32[0]));
  v323 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v725.f32, 1);
  v324 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v249.f32, 1);
  v325 = (float32x4_t)vbslq_s8(v321, (int8x16_t)vmulq_lane_f32(vsubq_f32(v324, v777), *(float32x2_t *)v254.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v323, v777), *(float32x2_t *)v253.f32, 1));
  v326 = (float32x4_t)vbslq_s8(v318, (int8x16_t)vmulq_lane_f32(vsubq_f32(v324, v773), *(float32x2_t *)v254.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v323, v773), *(float32x2_t *)v253.f32, 1));
  v327 = (float32x4_t)vbslq_s8(v316, (int8x16_t)vmulq_lane_f32(vsubq_f32(v324, v776), *(float32x2_t *)v254.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v323, v776), *(float32x2_t *)v253.f32, 1));
  v328 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v725, 2);
  v329 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v249, 2);
  v330 = (float32x4_t)vbslq_s8(v321, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v329, v745), v254, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v328, v745), v253, 2));
  v331 = (float32x4_t)vbslq_s8(v318, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v329, v746), v254, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v328, v746), v253, 2));
  v332 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v725, 3);
  v333 = (float32x4_t)vbslq_s8(v316, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v329, v772), v254, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v328, v772), v253, 2));
  v334 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v249, 3);
  v335 = (float32x4_t)vbslq_s8(v316, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v334, v764), v254, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v332, v764), v253, 3));
  v336 = (float32x4_t)vbslq_s8(v318, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v334, v768), v254, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v332, v768), v253, 3));
  v337 = (float32x4_t)vbslq_s8(v321, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v334, v766), v254, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v332, v766), v253, 3));
  v338 = (int8x16_t)vmulq_n_f32(vsubq_f32(v314, v735), v253.f32[0]);
  v339 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v320, *(int8x8_t *)v338.i8)), 0x1FuLL));
  v340 = (float32x4_t)vbslq_s8(v339, (int8x16_t)vmulq_n_f32(vsubq_f32(v315, v735), v254.f32[0]), v338);
  v341 = (float32x4_t)vbslq_s8(v339, (int8x16_t)vmulq_lane_f32(vsubq_f32(v324, v748), *(float32x2_t *)v254.f32, 1), (int8x16_t)vmulq_lane_f32(vsubq_f32(v323, v748), *(float32x2_t *)v253.f32, 1));
  v342 = (float32x4_t)vbslq_s8(v339, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v329, v747), v254, 2), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v328, v747), v253, 2));
  v343 = (float32x4_t)vbslq_s8(v339, (int8x16_t)vmulq_laneq_f32(vsubq_f32(v334, v770), v254, 3), (int8x16_t)vmulq_laneq_f32(vsubq_f32(v332, v770), v253, 3));
  v344 = vmlaq_f32(vmulq_f32(v341, v341), v340, v340);
  v345 = (int8x16_t)vcgtq_f32(v287, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v327, v327), v317, v317), v333, v333), v335, v335));
  v346 = (int8x16_t)vcgtq_f32(v287, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v326, v326), v319, v319), v331, v331), v336, v336));
  v347 = (int8x16_t)vcgtq_f32(v287, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v325, v325), v322, v322), v330, v330), v337, v337));
  v348 = (int8x16_t)vcgtq_f32(v287, vmlaq_f32(vmlaq_f32(v344, v342, v342), v343, v343));
  v349 = (int16x8_t)vandq_s8(v348, v738);
  v350 = (int16x8_t)vandq_s8(v347, v740);
  v351 = (int16x8_t)vandq_s8(v346, v726);
  v352 = (float32x4_t)vandq_s8(v345, v742);
  v353 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v352, v351), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v350, v349), (int8x16_t)xmmword_20631C0C0));
  v353.i16[0] = vaddvq_s16(v353);
  *(int8x8_t *)v353.i8 = vcnt_s8(*(int8x8_t *)v353.i8);
  v353.i16[0] = vaddlv_u8(*(uint8x8_t *)v353.i8);
  v354 = v353.i16[0];
  if (v353.i32[0] < 2u)
  {
    v364 = v725;
  }
  else
  {
    v355 = (int8x16_t)vcltzq_s32((int32x4_t)v350);
    v356 = (int8x16_t)vcltzq_s32((int32x4_t)v352);
    v357 = (int8x16_t)vcltzq_s32((int32x4_t)v349);
    v358 = (int8x16_t)vcltzq_s32((int32x4_t)v351);
    v359 = (float32x4_t)vandq_s8(*(int8x16_t *)v9, v356);
    v360 = (float32x4_t)vandq_s8(a1[19], v355);
    v361 = vaddq_f32((float32x4_t)vandq_s8(a1[9], v356), (float32x4_t)vandq_s8(a1[11], v355));
    v362 = vaddq_f32((float32x4_t)vandq_s8(a1[13], v356), (float32x4_t)vandq_s8(a1[15], v355));
    v363 = vaddq_f32((float32x4_t)vandq_s8(a1[21], v356), (float32x4_t)vandq_s8(a1[23], v355));
    v352 = vaddq_f32(v362, vaddq_f32((float32x4_t)vandq_s8(a1[14], v358), (float32x4_t)vandq_s8(a1[16], v357)));
    v364 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v361, vaddq_f32((float32x4_t)vandq_s8(a1[10], v358), (float32x4_t)vandq_s8(a1[12], v357))), v352), vpaddq_f32(vaddq_f32(vaddq_f32(v359, v360), vaddq_f32((float32x4_t)vandq_s8(a1[18], v358), (float32x4_t)vandq_s8(a1[20], v357))), vaddq_f32(v363, vaddq_f32((float32x4_t)vandq_s8(a1[22], v358), (float32x4_t)vandq_s8(a1[24], v357))))), ReciprocalTable[v354]);
  }
  v365 = (float32x4_t)vandq_s8((int8x16_t)v758, v345);
  v366 = (int16x8_t)vandq_s8((int8x16_t)v756, v346);
  v367 = (float32x4_t)vandq_s8((int8x16_t)v754, v347);
  v368 = (float32x4_t)vandq_s8((int8x16_t)v752, v348);
  v369 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v365, v366), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v367, (int16x8_t)v368), (int8x16_t)xmmword_20631C0C0));
  v369.i16[0] = vaddvq_s16(v369);
  *(int8x8_t *)v369.i8 = vcnt_s8(*(int8x8_t *)v369.i8);
  v369.i16[0] = vaddlv_u8(*(uint8x8_t *)v369.i8);
  v370 = v369.i16[0];
  if (v369.i32[0] >= 2u)
  {
    v371 = (int8x16_t)vcltzq_s32((int32x4_t)v367);
    v372 = (int8x16_t)vcltzq_s32((int32x4_t)v365);
    v373 = (int8x16_t)vcltzq_s32((int32x4_t)v368);
    v374 = (int8x16_t)vcltzq_s32((int32x4_t)v366);
    v375 = (float32x4_t)vandq_s8(a1[18], v374);
    v376 = (float32x4_t)vandq_s8(a1[20], v373);
    v377 = (float32x4_t)vandq_s8(*(int8x16_t *)v9, v372);
    v378 = (float32x4_t)vandq_s8(a1[19], v371);
    v379 = vaddq_f32((float32x4_t)vandq_s8(a1[9], v372), (float32x4_t)vandq_s8(a1[11], v371));
    v380 = vaddq_f32((float32x4_t)vandq_s8(a1[10], v374), (float32x4_t)vandq_s8(a1[12], v373));
    v381 = vaddq_f32((float32x4_t)vandq_s8(a1[13], v372), (float32x4_t)vandq_s8(a1[15], v371));
    v352 = vaddq_f32((float32x4_t)vandq_s8(a1[14], v374), (float32x4_t)vandq_s8(a1[16], v373));
    v367 = vaddq_f32((float32x4_t)vandq_s8(a1[21], v372), (float32x4_t)vandq_s8(a1[23], v371));
    v382 = vaddq_f32((float32x4_t)vandq_s8(a1[22], v374), (float32x4_t)vandq_s8(a1[24], v373));
    v365 = vaddq_f32(v381, v352);
    v368 = vpaddq_f32(vaddq_f32(v379, v380), v365);
    v249 = vmulq_n_f32(vpaddq_f32(v368, vpaddq_f32(vaddq_f32(vaddq_f32(v377, v378), vaddq_f32(v375, v376)), vaddq_f32(v367, v382))), ReciprocalTable[v370]);
  }
  v383 = v731;
  v384 = a1[49].u16[0];
  v385 = (int8x16_t)vcgezq_s32(v758);
  v386 = (int8x16_t)vcgezq_s32(v756);
  v387 = (int8x16_t)vcgezq_s32(v754);
  v388 = (int8x16_t)vcgezq_s32(v752);
  if ((v384 & ~(_DWORD)v4) != 0)
  {
    if (v10)
    {
      v389 = vsubq_f32(v364, v731);
      v368.i32[0] = v389.i32[3];
      if (v389.f32[3] != 0.0)
        goto LABEL_37;
      v367.i32[0] = v384 & ~(_DWORD)v4;
      v390 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v367.f32);
      v390.i16[0] = vaddlv_u8(v390);
      v391 = v390.i32[0];
      v365 = (float32x4_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vandq_s8(a1[45], v742), (int16x8_t)vandq_s8(a1[46], v726)), (int8x16_t)xmmword_20631C0D0);
      v367 = (float32x4_t)vorrq_s8((int8x16_t)v365, vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vandq_s8(a1[47], v740), (int16x8_t)vandq_s8(a1[48], v738)), (int8x16_t)xmmword_20631C0C0));
      v367.i16[0] = vaddvq_s16((int16x8_t)v367);
      *(int8x8_t *)v367.f32 = vcnt_s8(*(int8x8_t *)v367.f32);
      v367.i16[0] = vaddlv_u8(*(uint8x8_t *)v367.f32);
      if (15 - v391 != v367.i32[0])
      {
        v383 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
        v364 = v383;
LABEL_37:
        v367.i32[0] = 0;
        v368 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v367, v368), 0);
        v392 = (float32x4_t)vbslq_s8((int8x16_t)v368, (int8x16_t)vnegq_f32(v389), (int8x16_t)v389);
        v393 = (float32x4_t)vbslq_s8((int8x16_t)v368, (int8x16_t)v364, (int8x16_t)v383);
        v365.f32[0] = v393.f32[3] / v392.f32[3];
        v394 = vmlsq_lane_f32(v393, v392, *(float32x2_t *)v365.f32, 0);
        v367 = (float32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v394, (float32x4_t)vdupq_n_s32(0xBB800000)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F808081u), v394));
        if ((vminvq_u32((uint32x4_t)v367) & 0x80000000) != 0)
        {
          v364 = (float32x4_t)vbslq_s8((int8x16_t)v368, (int8x16_t)v383, (int8x16_t)v364);
          v368.i32[1] = v744.i32[1];
          v383 = vminnmq_f32(vmaxnmq_f32(v394, (float32x4_t)0), v744);
        }
        else
        {
          v395.i64[0] = 0x7F0000007FLL;
          v395.i64[1] = 0x7F0000007FLL;
          v396 = vandq_s8((int8x16_t)v733, v395);
          v397 = vandq_s8((int8x16_t)v728, v395);
          v398 = vandq_s8((int8x16_t)v730, v395);
          v399 = vandq_s8((int8x16_t)v729, v395);
          v400 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v303.i8, (int8x8_t)0x7F0000007FLL)), 0x1FuLL)), v395, v694);
          v401 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v320, (int8x8_t)0x7F0000007FLL)), 0x1FuLL)), v395, v695);
          v402 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v303.i8, (int8x8_t)0x7F0000007FLL)), 0x1FuLL)), v395, v696);
          v403 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v320, (int8x8_t)0x7F0000007FLL)), 0x1FuLL)), v395, v697);
          v404 = vmaxnmq_f32(v402, v403);
          v405 = vmaxnmq_f32(v400, v401);
          v406 = vbslq_s8((int8x16_t)vcgtq_f32(v401, v400), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
          v407 = (int8x16_t)vmaxnmq_f32(v404, v405);
          v408 = vbslq_s8((int8x16_t)vcgtq_f32(v405, v404), v406, vbslq_s8((int8x16_t)vcgtq_f32(v403, v402), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080));
          v406.i64[0] = vextq_s8(v407, v407, 8uLL).u64[0];
          *(float32x2_t *)v402.f32 = vmaxnm_f32(*(float32x2_t *)v407.i8, *(float32x2_t *)v406.i8);
          v781 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v406.i8, *(float32x2_t *)v407.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v408, v408, 8uLL), *(int8x8_t *)v408.i8);
          v383 = (float32x4_t)v107[*(unsigned int *)((unint64_t)&v781 & 0xFFFFFFFFFFFFFFFBLL | (4 * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v402.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v402.f32, 1))) & 1)))];
          v409 = vsubq_f32(v723, v383);
          if (v68)
            v410 = *(float32x4_t *)v68->f32;
          else
            v410 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
          v411 = vmulq_f32(v409, v410);
          v412 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v383.f32, 0);
          v413 = vsubq_f32(v763, v412);
          v414 = vsubq_f32(v774, v412);
          v415 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v383.f32, 1);
          v416 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v773, v415), *(float32x2_t *)v411.f32, 1), vsubq_f32(v775, v412), v411.f32[0]);
          v417 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v748, v415), *(float32x2_t *)v411.f32, 1), vsubq_f32(v735, v412), v411.f32[0]);
          v418 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v776, v415), *(float32x2_t *)v411.f32, 1), v414, v411.f32[0]);
          v419 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v383, 2);
          v420 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v777, v415), *(float32x2_t *)v411.f32, 1), v413, v411.f32[0]), vsubq_f32(v745, v419), v411, 2);
          v421 = vmlaq_laneq_f32(v418, vsubq_f32(v772, v419), v411, 2);
          v422 = vsubq_f32(v746, v419);
          v423 = vmlaq_laneq_f32(v417, vsubq_f32(v747, v419), v411, 2);
          v352 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v383, 3);
          v424 = (int8x16_t)vmlaq_laneq_f32(v423, vsubq_f32(v770, v352), v411, 3);
          v425 = (int8x16_t)vmlaq_laneq_f32(v421, vsubq_f32(v764, v352), v411, 3);
          v426 = (int8x16_t)vmlaq_laneq_f32(v420, vsubq_f32(v766, v352), v411, 3);
          v427 = (float32x4_t)vorrq_s8(vandq_s8(v386, (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(v416, v422, v411, 2), vsubq_f32(v768, v352), v411, 3)), v397);
          v428 = (float32x4_t)vorrq_s8(vandq_s8(v388, v424), v399);
          v429 = (float32x4_t)vorrq_s8(vandq_s8(v385, v425), v396);
          v430 = (float32x4_t)vorrq_s8(vandq_s8(v387, v426), v398);
          v431 = vmaxnmq_f32(v427, v428);
          v432 = (int8x16_t)vcgtq_f32(v428, v427);
          v433 = vmaxnmq_f32(v429, v430);
          v368 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v430, v429), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
          v367 = vmaxnmq_f32(v433, v431);
          v434 = vbslq_s8((int8x16_t)vcgtq_f32(v431, v433), vbslq_s8(v432, (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0), (int8x16_t)v368);
          v368.i64[0] = vextq_s8((int8x16_t)v367, (int8x16_t)v367, 8uLL).u64[0];
          *(int8x8_t *)v434.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v368.f32, *(float32x2_t *)v367.f32), (int8x8_t)*(_OWORD *)&vextq_s8(v434, v434, 8uLL), *(int8x8_t *)v434.i8);
          *(float32x2_t *)v368.f32 = vmaxnm_f32(*(float32x2_t *)v367.f32, *(float32x2_t *)v368.f32);
          *(int32x2_t *)v367.f32 = vdup_lane_s32(*(int32x2_t *)v368.f32, 1);
          *(int8x8_t *)v368.f32 = vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v368.f32, *(float32x2_t *)v367.f32));
          v780 = v434.i64[0];
          v364 = (float32x4_t)v107[*(unsigned int *)((unint64_t)&v780 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v368.i8[0] & 1)))];
          if ((vmovn_s32(vcgtq_f32(v364, v383)).i8[6] & 1) != 0)
            v383.i32[3] = 0;
          else
            v364.i32[3] = 0;
        }
        goto LABEL_48;
      }
    }
    else if (v731.f32[3] >= v364.f32[3])
    {
      v364 = 0uLL;
      goto LABEL_48;
    }
    v383 = 0uLL;
  }
LABEL_48:
  v435 = v384 & v4;
  if (!v435)
    goto LABEL_66;
  if (!v10)
  {
    if (v302.f32[3] >= v249.f32[3])
    {
      v249 = 0uLL;
      goto LABEL_66;
    }
    goto LABEL_59;
  }
  v436 = vsubq_f32(v249, v302);
  v368.i32[0] = v436.i32[3];
  if (v436.f32[3] == 0.0)
  {
    v367.i32[0] = v435;
    v437 = vcnt_s8(*(int8x8_t *)v367.f32);
    v437.i16[0] = vaddlv_u8((uint8x8_t)v437);
    v438 = v437.i32[0];
    v437.i32[0] = v4;
    v439 = (uint8x8_t)vcnt_s8(v437);
    v439.i16[0] = vaddlv_u8(v439);
    if (v439.i32[0] - 1 != v438)
    {
      v302 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
      v249 = v302;
      goto LABEL_53;
    }
LABEL_59:
    v302 = 0uLL;
    goto LABEL_66;
  }
LABEL_53:
  if (v436.f32[3] < 0.0)
  {
    v440 = v302;
    v436 = vnegq_f32(v436);
    v368.i32[0] = v436.i32[3];
    v302 = v249;
    v249 = v440;
  }
  v368.f32[0] = v302.f32[3] / v368.f32[0];
  v441 = vmlsq_lane_f32(v302, v436, *(float32x2_t *)v368.f32, 0);
  if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v441, (float32x4_t)vdupq_n_s32(0xBB800000)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F808081u), v441))) & 0x80000000) != 0)
  {
    v302 = vminnmq_f32(vmaxnmq_f32(v441, (float32x4_t)0), v744);
  }
  else
  {
    v442.i64[0] = 0x7F0000007FLL;
    v442.i64[1] = 0x7F0000007FLL;
    v443 = vandq_s8(v387, v442);
    v444 = vandq_s8(v385, v442);
    v445 = vandq_s8(v388, v442);
    v446 = vandq_s8(v386, v442);
    v447 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v728, v701), v446);
    v448 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v729, v698), v445);
    v449 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v733, v700), v444);
    v450 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v730, v699), v443);
    v451 = vmaxnmq_f32(v449, v450);
    v452 = vmaxnmq_f32(v447, v448);
    v453 = vbslq_s8((int8x16_t)vcgtq_f32(v450, v449), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
    v454 = vbslq_s8((int8x16_t)vcgtq_f32(v448, v447), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
    v455 = (int8x16_t)vmaxnmq_f32(v451, v452);
    v456 = vbslq_s8((int8x16_t)vcgtq_f32(v452, v451), v454, v453);
    v454.i64[0] = vextq_s8(v455, v455, 8uLL).u64[0];
    *(float32x2_t *)v447.f32 = vmaxnm_f32(*(float32x2_t *)v455.i8, *(float32x2_t *)v454.i8);
    v779 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v454.i8, *(float32x2_t *)v455.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v456, v456, 8uLL), *(int8x8_t *)v456.i8);
    v302 = (float32x4_t)v107[*(unsigned int *)((unint64_t)&v779 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                               * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v447.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v447.f32, 1))) & 1)))];
    v457 = vsubq_f32(v702, v302);
    if (v68)
      v458 = *(float32x4_t *)v68->f32;
    else
      v458 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    v459 = vmulq_f32(v457, v458);
    v460 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v302.f32, 0);
    v461 = vsubq_f32(v763, v460);
    v462 = vsubq_f32(v774, v460);
    v463 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v302.f32, 1);
    v464 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v773, v463), *(float32x2_t *)v459.f32, 1), vsubq_f32(v775, v460), v459.f32[0]);
    v465 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v748, v463), *(float32x2_t *)v459.f32, 1), vsubq_f32(v735, v460), v459.f32[0]);
    v466 = vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v776, v463), *(float32x2_t *)v459.f32, 1), v462, v459.f32[0]);
    v467 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v302, 2);
    v468 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vsubq_f32(v777, v463), *(float32x2_t *)v459.f32, 1), v461, v459.f32[0]), vsubq_f32(v745, v467), v459, 2);
    v469 = vmlaq_laneq_f32(v466, vsubq_f32(v772, v467), v459, 2);
    v470 = vsubq_f32(v746, v467);
    v471 = vmlaq_laneq_f32(v465, vsubq_f32(v747, v467), v459, 2);
    v472 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v302, 3);
    v473 = (int8x16_t)vmlaq_laneq_f32(vmlaq_laneq_f32(v464, v470, v459, 2), vsubq_f32(v768, v472), v459, 3);
    v474 = (int8x16_t)vmlaq_laneq_f32(v471, vsubq_f32(v770, v472), v459, 3);
    v475 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v733, (int8x16_t)vmlaq_laneq_f32(v469, vsubq_f32(v764, v472), v459, 3)), v444);
    v476 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v730, (int8x16_t)vmlaq_laneq_f32(v468, vsubq_f32(v766, v472), v459, 3)), v443);
    v477 = vbslq_s8((int8x16_t)vcgtq_f32(v476, v475), (int8x16_t)xmmword_20631C090, (int8x16_t)xmmword_20631C080);
    v478 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v728, v473), v446);
    v479 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v729, v474), v445);
    v352 = (float32x4_t)xmmword_20631C0B0;
    v480 = vbslq_s8((int8x16_t)vcgtq_f32(v479, v478), (int8x16_t)xmmword_20631C0B0, (int8x16_t)xmmword_20631C0A0);
    v481 = vmaxnmq_f32(v475, v476);
    v482 = vmaxnmq_f32(v478, v479);
    v483 = (int8x16_t)vmaxnmq_f32(v481, v482);
    v484 = vbslq_s8((int8x16_t)vcgtq_f32(v482, v481), v480, v477);
    v481.i64[0] = vextq_s8(v483, v483, 8uLL).u64[0];
    *(int8x8_t *)v484.i8 = vbsl_s8((int8x8_t)vcgt_f32(*(float32x2_t *)v481.f32, *(float32x2_t *)v483.i8), (int8x8_t)*(_OWORD *)&vextq_s8(v484, v484, 8uLL), *(int8x8_t *)v484.i8);
    *(float32x2_t *)v483.i8 = vmaxnm_f32(*(float32x2_t *)v483.i8, *(float32x2_t *)v481.f32);
    v778 = v484.i64[0];
    v249 = (float32x4_t)v107[*(unsigned int *)((unint64_t)&v778 & 0xFFFFFFFFFFFFFFFBLL | (4
                                                                                               * (*(_QWORD *)&vmvn_s8((int8x8_t)vcge_f32(*(float32x2_t *)v483.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v483.i8, 1))) & 1)))];
    if ((vmovn_s32(vcgtq_f32(v249, v302)).i8[6] & 1) != 0)
      v302.i32[3] = 0;
    else
      v249.i32[3] = 0;
  }
LABEL_66:
  if (v284)
    v485 = 127;
  else
    v485 = 63;
  if (v284)
    v486 = 7;
  else
    v486 = 3;
  v487 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v383, (float32x4_t)0), v744), (float)v485));
  v488 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v364, (float32x4_t)0), v744), (float)v485));
  v489 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v302, (float32x4_t)0), v744), (float)v485));
  v490 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(v249, (float32x4_t)0), v744), (float)v485));
  v491 = vsubq_f32(v487, v488);
  v352.i32[0] = 0;
  v492 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v491, 2), vaddq_f32(v491, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v491.f32, 1))), v352), 0);
  v493 = (float32x4_t)vbslq_s8(v492, (int8x16_t)v488, (int8x16_t)v487);
  v494 = (float32x4_t)vbslq_s8(v492, (int8x16_t)v487, (int8x16_t)v488);
  v495 = (int16x8_t)vcvtq_s32_f32(v494);
  v496 = (float32x4_t)vcvtq_s32_f32(v493);
  v497 = vmovn_s16(vuzp1q_s16((int16x8_t)v496, v495));
  v498 = vsubq_f32(v489, v490);
  v499 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v498, 2), vaddq_f32(v498, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v498.f32, 1))), v352), 0);
  v500 = (float32x4_t)vbslq_s8(v499, (int8x16_t)v490, (int8x16_t)v489);
  v501 = (float32x4_t)vbslq_s8(v499, (int8x16_t)v489, (int8x16_t)v490);
  v502 = (float32x4_t)vcvtq_s32_f32(v501);
  v503 = (int16x8_t)vcvtq_s32_f32(v500);
  v504 = vmovn_s16(vuzp1q_s16(v503, (int16x8_t)v502));
  if (v284)
  {
    v505 = *(float32x4_t *)v68->f32;
    v505.i32[3] = 0;
    v506.i64[0] = 0x100000001;
    v506.i64[1] = 0x100000001;
    v507 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v508 = (float32x4_t)vdupq_n_s32(0xCB400000);
    v509 = vaddq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v496, v506), v507), v508);
    v510 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v495, v506), v507), v508), v505);
    v511 = vandq_s8((int8x16_t)v503, v506);
    v512 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v502, v506), v507);
    v502 = vaddq_f32((float32x4_t)vorrq_s8(v511, v507), v508);
    v513 = vmlaq_f32(v510, v505, v509);
    v513.i64[0] = vpaddq_f32(v513, v513).u64[0];
    v514 = vmlaq_f32(vmulq_f32(vaddq_f32(v512, v508), v505), v505, v502);
    v505.i64[0] = vpaddq_f32(v514, v514).u64[0];
    v514.i32[0] = 1.0;
    *(int32x2_t *)v513.f32 = vdup_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v513.f32, *(float32x2_t *)v513.f32), *(float32x2_t *)v514.f32), 0);
    *(int8x8_t *)v502.f32 = vorr_s8(vand_s8(vorr_s8(v497, (int8x8_t)0x1010100010101), *(int8x8_t *)v513.f32), vand_s8(vbic_s8(v497, *(int8x8_t *)v513.f32), (int8x8_t)0xFFFEFEFEFFFEFEFELL));
    *(int32x2_t *)v505.f32 = vdup_lane_s32(vcgt_f32(vpadd_f32(*(float32x2_t *)v505.f32, *(float32x2_t *)v505.f32), *(float32x2_t *)v514.f32), 0);
    v714 = vorr_s8(vand_s8(vorr_s8(v504, (int8x8_t)0x1010100010101), *(int8x8_t *)v505.f32), vand_s8(vbic_s8(v504, *(int8x8_t *)v505.f32), (int8x8_t)0xFFFEFEFEFFFEFEFELL));
    v716 = *(int8x8_t *)v502.f32;
    v515 = vmovl_u8((uint8x8_t)vorr_s8(vadd_s8(*(int8x8_t *)v502.f32, *(int8x8_t *)v502.f32), (int8x8_t)vshr_n_u8(*(uint8x8_t *)v502.f32, 6uLL)));
    v516 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v515.i8), v507), v508);
    v517 = vmovl_u8((uint8x8_t)vorr_s8(vadd_s8(v714, v714), (int8x8_t)vshr_n_u8((uint8x8_t)v714, 6uLL)));
    v496 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v517.i8), v507), v508);
    v518 = vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v517), v507), v508);
    v519 = vmulq_n_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v515), v507), v508), 0.0039216);
    v520 = vmulq_n_f32(v516, 0.0039216);
    v521 = vmulq_n_f32(v518, 0.0039216);
    v522 = vmulq_n_f32(v496, 0.0039216);
  }
  else
  {
    v714 = v504;
    v716 = v497;
    v519 = vmulq_n_f32(v494, 0.015873);
    v520 = vmulq_n_f32(v493, 0.015873);
    v521 = vmulq_n_f32(v501, 0.015873);
    v522 = vmulq_n_f32(v500, 0.015873);
  }
  v523 = vsubq_f32(v521, v522);
  v524 = vsubq_f32(v519, v520);
  v525 = (int8x16_t)v523;
  v526 = (int8x16_t)v524;
  if (v68)
  {
    v525 = *(int8x16_t *)v68->f32;
    v526 = *(int8x16_t *)v68->f32;
  }
  v496.i32[0] = 0;
  v502.i32[0] = v284;
  v527 = vorrq_s8(vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v502, (int8x16_t)v496), 0), (int8x16_t)xmmword_20631C0E0);
  v528 = (float32x4_t)vandq_s8(v527, v526);
  v529 = (float32x4_t)vandq_s8(v527, v525);
  v530 = (int8x16_t)vmulq_f32(v524, v528);
  v531 = vaddv_f32(vadd_f32(*(float32x2_t *)v530.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v530, v530, 8uLL)));
  v532 = (int8x16_t)vmulq_f32(v523, v529);
  v533 = vaddv_f32(vadd_f32(*(float32x2_t *)v532.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v532, v532, 8uLL)));
  if (fabsf(v531) < 0.0039062)
  {
    v534 = (int8x16_t)vmulq_f32(v524, v524);
    v531 = vaddv_f32(vadd_f32(*(float32x2_t *)v534.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v534, v534, 8uLL)));
    v528 = v524;
  }
  v718 = v387;
  v720 = v388;
  v732 = v385;
  v722 = v386;
  if (fabsf(v533) < 0.0039062)
  {
    v535 = (int8x16_t)vmulq_f32(v523, v523);
    v533 = vaddv_f32(vadd_f32(*(float32x2_t *)v535.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v535, v535, 8uLL)));
    v529 = v523;
  }
  v536 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v520.f32, 0);
  v537 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v522.f32, 0);
  v538 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v303.i8, *(int8x8_t *)v536.i8)), 0x1FuLL));
  v539 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v303.i8, *(int8x8_t *)v536.i8)), 0x1FuLL));
  v540 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v320, *(int8x8_t *)v536.i8)), 0x1FuLL));
  v541 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v320, *(int8x8_t *)v536.i8)), 0x1FuLL));
  v759 = (float32x4_t)vbslq_s8(v539, v537, v536);
  v760 = (float32x4_t)vbslq_s8(v541, v537, v536);
  v750 = (float32x4_t)vbslq_s8(v540, v537, v536);
  v761 = (float32x4_t)vbslq_s8(v538, v537, v536);
  v542 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v520.f32, 1);
  v543 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v522.f32, 1);
  v544 = (float32x4_t)vbslq_s8(v541, v543, v542);
  v755 = (float32x4_t)vbslq_s8(v538, v543, v542);
  v757 = (float32x4_t)vbslq_s8(v540, v543, v542);
  v751 = (float32x4_t)vbslq_s8(v539, v543, v542);
  v545 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v520, 2);
  v546 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v522, 2);
  v547 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v528.f32, 0);
  v548 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v529.f32, 0);
  v549 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v528.f32, 1);
  v550 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v529.f32, 1);
  v551 = vmlaq_f32(vmulq_f32(vsubq_f32(v773, v755), (float32x4_t)vbslq_s8(v538, v550, v549)), (float32x4_t)vbslq_s8(v538, v548, v547), vsubq_f32(v775, v761));
  v552 = (float32x4_t)vbslq_s8(v541, v546, v545);
  v553 = vmlaq_f32(vmulq_f32(vsubq_f32(v776, v751), (float32x4_t)vbslq_s8(v539, v550, v549)), (float32x4_t)vbslq_s8(v539, v548, v547), vsubq_f32(v774, v759));
  v753 = v544;
  v741 = (float32x4_t)vbslq_s8(v540, v546, v545);
  v743 = (float32x4_t)vbslq_s8(v538, v546, v545);
  v739 = (float32x4_t)vbslq_s8(v539, v546, v545);
  v554 = vmlaq_f32(vmulq_f32(vsubq_f32(v748, v757), (float32x4_t)vbslq_s8(v540, v550, v549)), (float32x4_t)vbslq_s8(v540, v548, v547), vsubq_f32(v735, v750));
  v555 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v528, 2);
  v556 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v529, 2);
  v557 = vmlaq_f32(vmlaq_f32(vmulq_f32(vsubq_f32(v777, v544), (float32x4_t)vbslq_s8(v541, v550, v549)), (float32x4_t)vbslq_s8(v541, v548, v547), vsubq_f32(v763, v760)), (float32x4_t)vbslq_s8(v541, v556, v555), vsubq_f32(v745, v552));
  v558 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v520, 3);
  v559 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v522, 3);
  v560 = vmlaq_f32(v554, (float32x4_t)vbslq_s8(v540, v556, v555), vsubq_f32(v747, v741));
  v561 = (float32x4_t)vbslq_s8(v538, v559, v558);
  v562 = vmlaq_f32(v553, (float32x4_t)vbslq_s8(v539, v556, v555), vsubq_f32(v772, v739));
  v563 = (float32x4_t)vbslq_s8(v539, v559, v558);
  v564 = (float32x4_t)vbslq_s8(v540, v559, v558);
  v565 = (float32x4_t)vbslq_s8(v541, v559, v558);
  v566 = vsubq_f32(v766, v565);
  v567 = vsubq_f32(v770, v564);
  v568 = vmlaq_f32(v551, (float32x4_t)vbslq_s8(v538, v556, v555), vsubq_f32(v746, v743));
  v569 = vsubq_f32(v764, v563);
  v570 = vsubq_f32(v768, v561);
  v575 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v528, 3);
  v576 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v529, 3);
  v571 = (float32x4_t)vbslq_s8(v541, v576, v575);
  v572 = (float32x4_t)vbslq_s8(v540, v576, v575);
  v573 = (float32x4_t)vbslq_s8(v539, v576, v575);
  v574 = (float32x4_t)vbslq_s8(v538, v576, v575);
  v575.i32[0] = 0;
  v576.i32[0] = 0;
  if (fabsf(v531) >= 0.00024414)
    *(float *)v576.i32 = vrecpes_f32(v531);
  v577 = vmlaq_f32(v568, v574, v570);
  v578 = vmlaq_f32(v562, v573, v569);
  v579 = vmlaq_f32(v560, v572, v567);
  v580 = vmlaq_f32(v557, v571, v566);
  if (fabsf(v533) >= 0.00024414)
    *(float *)v575.i32 = vrecpes_f32(v533);
  v581 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v576.i8, 0);
  v582 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v575.i8, 0);
  v583 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v320, *(int8x8_t *)v570.f32)), 0x1FuLL)), v582, v581);
  v584 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v320, *(int8x8_t *)v570.f32)), 0x1FuLL)), v582, v581);
  v585 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v303.i8, *(int8x8_t *)v570.f32)), 0x1FuLL)), v582, v581);
  v586 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v303.i8, *(int8x8_t *)v570.f32)), 0x1FuLL));
  v587 = vmulq_f32(v577, (float32x4_t)vbslq_s8(v586, v582, v581));
  v588 = vmulq_f32(v578, v585);
  v589 = vmulq_f32(v579, v584);
  v590 = vmulq_f32(v580, v583);
  v749 = v552;
  v727 = v561;
  v724 = v564;
  if (a1[8].i8[6] < 1)
  {
    v597 = (int8x16_t)v729;
    v596 = (int8x16_t)v730;
    v598 = (int8x16_t)v728;
    v591 = v387;
    v592 = v720;
    v595 = v722;
  }
  else
  {
    v584.i32[0] = 0;
    v586.i32[0] = 0;
    if (fabsf(v524.f32[3]) >= 0.0039062)
      *(float *)v586.i32 = vrecpes_f32(v524.f32[3]);
    v591 = v387;
    v592 = v720;
    if (fabsf(v523.f32[3]) >= 0.0039062)
      v584.f32[0] = vrecpes_f32(v523.f32[3]);
    v593 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v586.i8, 0);
    v594 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v584.f32, 0);
    v595 = v722;
    v597 = (int8x16_t)v729;
    v596 = (int8x16_t)v730;
    v598 = (int8x16_t)v728;
    v587 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)a1[46]), (int8x16_t)vmulq_f32(v570, (float32x4_t)vorrq_s8(vandq_s8(v594, (int8x16_t)v728), vandq_s8(v722, v593))), (int8x16_t)v587);
    v588 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)a1[45]), (int8x16_t)vmulq_f32(v569, (float32x4_t)vorrq_s8(vandq_s8(v594, (int8x16_t)v733), vandq_s8(v732, v593))), (int8x16_t)v588);
    v590 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)a1[47]), (int8x16_t)vmulq_f32(v566, (float32x4_t)vorrq_s8(vandq_s8(v594, (int8x16_t)v730), vandq_s8(v718, v593))), (int8x16_t)v590);
    v589 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)a1[48]), (int8x16_t)vmulq_f32(v567, (float32x4_t)vorrq_s8(vandq_s8(v594, (int8x16_t)v729), vandq_s8(v720, v593))), (int8x16_t)v589);
  }
  v599 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v524.f32, 0);
  v600 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v523.f32, 0);
  v601 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(v320, *(int8x8_t *)v599.i8)), 0x1FuLL));
  v602 = (float32x4_t)vbslq_s8(v601, v600, v599);
  v603 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(v320, *(int8x8_t *)v599.i8)), 0x1FuLL));
  v604 = (float32x4_t)vbslq_s8(v603, v600, v599);
  v605 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v303.i8, *(int8x8_t *)v599.i8)), 0x1FuLL));
  v606 = (float32x4_t)vbslq_s8(v605, v600, v599);
  v607 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v303.i8, *(int8x8_t *)v599.i8)), 0x1FuLL));
  v608 = (float32x4_t)vbslq_s8(v607, v600, v599);
  v609 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v524.f32, 1);
  v610 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v523.f32, 1);
  v611 = (float32x4_t)vbslq_s8(v601, v610, v609);
  v612 = (float32x4_t)vbslq_s8(v603, v610, v609);
  v613 = (float32x4_t)vbslq_s8(v605, v610, v609);
  v614 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v524, 2);
  v615 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v523, 2);
  v616 = (float32x4_t)vbslq_s8(v607, v610, v609);
  v617 = (float32x4_t)vbslq_s8(v601, v615, v614);
  v618 = (float32x4_t)vbslq_s8(v603, v615, v614);
  v619 = (float32x4_t)vbslq_s8(v605, v615, v614);
  v620 = (float32x4_t)vbslq_s8(v607, v615, v614);
  v621 = vminnmq_f32(v588, v744);
  v622 = vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmaxnmq_f32(vminnmq_f32(v590, v744), (float32x4_t)0), (float32x4_t)0), v744), (float)v486);
  v623 = vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmaxnmq_f32(vminnmq_f32(v587, v744), (float32x4_t)0), (float32x4_t)0), v744), (float)v486);
  v624 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v524, 3);
  v625 = vandq_s8(v732, v624);
  v626 = vandq_s8(v595, v624);
  v627 = vandq_s8(v591, v624);
  v628 = vandq_s8(v592, v624);
  v629 = (int8x16_t)vdupq_laneq_s32((int32x4_t)v523, 3);
  v630 = vandq_s8((int8x16_t)v733, v629);
  v631 = vandq_s8(v598, v629);
  v632 = vandq_s8(v596, v629);
  v633 = vrndxq_f32(v622);
  v634 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmaxnmq_f32(vminnmq_f32(v589, v744), (float32x4_t)0), (float32x4_t)0), v744), (float)v486));
  v635 = (float32x4_t)vorrq_s8(vandq_s8(v597, v629), v628);
  *(float *)v629.i32 = ReciprocalTable[v486];
  v636 = (float32x4_t)vorrq_s8(v632, v627);
  v637 = vmulq_n_f32(v634, *(float *)v629.i32);
  v638 = (float32x4_t)vorrq_s8(v631, v626);
  v639 = vmulq_n_f32(v633, *(float *)v629.i32);
  v640 = (float32x4_t)vorrq_s8(v630, v625);
  v737 = vrndxq_f32(v623);
  v641 = vmulq_n_f32(v737, *(float *)v629.i32);
  v734 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(vmaxnmq_f32(v621, (float32x4_t)0), (float32x4_t)0), v744), (float)v486));
  v642 = vmulq_n_f32(v734, *(float *)v629.i32);
  if (v68)
    v744 = vmulq_f32(*(float32x4_t *)v68->f32, v704);
  v643 = vmlaq_f32(v759, v642, v608);
  v644 = vmlaq_f32(v751, v642, v616);
  v645 = (int8x16_t)vmlaq_f32(v739, v642, v620);
  v646 = vmlaq_f32(v563, v642, v640);
  v647 = vmlaq_f32(v761, v641, v606);
  v648 = vmlaq_f32(v755, v641, v613);
  v649 = vmlaq_f32(v743, v641, v619);
  v650 = vmlaq_f32(v727, v641, v638);
  v651 = vmlaq_f32(v760, v639, v604);
  v652 = vmlaq_f32(v753, v639, v612);
  v653 = vmlaq_f32(v749, v639, v618);
  v654 = vmlaq_f32(v565, v639, v636);
  v655 = vmlaq_f32(v750, v637, v602);
  v656 = vmlaq_f32(v757, v637, v611);
  v657 = vmlaq_f32(v741, v637, v617);
  v658 = vmlaq_f32(v724, v637, v635);
  v659 = *a3;
  do
  {
    v660 = a1;
    a1 = (int8x16_t *)a1[2].i64[1];
  }
  while (a1);
  if (v660[8].i16[2] != 324)
    return INFINITY;
  v762 = v634;
  v661 = (float32x4_t)v645;
  v645.i32[0] = 0;
  v662 = vsubq_f32(v647, v775);
  v663 = vsubq_f32(v655, v735);
  v606.i32[0] = v10;
  v664 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v606, v645), 0);
  __asm { FMOV            V19.4S, #1.0 }
  v666 = (float32x4_t)vbslq_s8(v664, _Q19, (int8x16_t)v768);
  v667 = (float32x4_t)vbslq_s8(v664, _Q19, (int8x16_t)v770);
  v668 = v658;
  v669 = (float32x4_t)vbslq_s8(v664, _Q19, (int8x16_t)v764);
  v670 = (float32x4_t)vbslq_s8(v664, _Q19, (int8x16_t)v766);
  v671 = vsubq_f32(v651, v763);
  v672 = vsubq_f32(v652, v777);
  v673 = vsubq_f32(v656, v748);
  v674 = vsubq_f32(v654, v766);
  v675 = vsubq_f32(v646, v764);
  v676 = vsubq_f32(v668, v770);
  v677 = vsubq_f32(v650, v768);
  v678 = vmulq_f32(v670, v671);
  v679 = vmulq_f32(v669, vsubq_f32(v643, v774));
  v680 = vmulq_f32(v667, v663);
  v681 = vmulq_f32(v666, v662);
  v682 = vmulq_f32(v666, vsubq_f32(v648, v773));
  v683 = vmulq_f32(v667, v673);
  v684 = vmulq_f32(v669, vsubq_f32(v644, v776));
  v685 = vmulq_f32(v670, v672);
  v686 = vmulq_f32(v666, vsubq_f32(v649, v746));
  v687 = vmulq_f32(v667, vsubq_f32(v657, v747));
  v688 = vmulq_f32(v669, vsubq_f32(v661, v772));
  v689 = vmulq_f32(v670, vsubq_f32(v653, v745));
  v690 = vaddq_f32(vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v684, v684), *(float32x2_t *)v744.f32, 1), vmulq_f32(v679, v679), v744.f32[0]), vmulq_f32(v688, v688), v744, 2), vmulq_f32(v675, v675), v744, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v685, v685), *(float32x2_t *)v744.f32, 1), vmulq_f32(v678, v678), v744.f32[0]),
                 vmulq_f32(v689, v689),
                 v744,
                 2),
               vmulq_f32(v674, v674),
               v744,
               3)),
           vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v682, v682), *(float32x2_t *)v744.f32, 1), vmulq_f32(v681, v681), v744.f32[0]), vmulq_f32(v686, v686), v744, 2), vmulq_f32(v677, v677), v744, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(vmulq_f32(v683, v683), *(float32x2_t *)v744.f32, 1), vmulq_f32(v680, v680), v744.f32[0]), vmulq_f32(v687, v687),
                 v744,
                 2),
               vmulq_f32(v676, v676),
               v744,
               3)));
  v690.i64[0] = vpaddq_f32(v690, v690).u64[0];
  v691 = vpadd_f32(*(float32x2_t *)v690.f32, *(float32x2_t *)v690.f32).f32[0];
  if (v691 < a4)
  {
    *(int8x8_t *)&v692 = v716;
    *((int8x8_t *)&v692 + 1) = v714;
    *(int8x16_t *)a2 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v734), (int16x8_t)vcvtq_s32_f32(v737)), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v633), (int16x8_t)vcvtq_s32_f32(v762)));
    *(_OWORD *)(a2 + 16) = v692;
    *(_DWORD *)(a2 + 32) = v659;
  }
  return v691;
}

float32x4_t Read_4x4_BGRA8_vec@<Q0>(int8x16_t *a1@<X0>, _QWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  int8x16_t v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t *v11;
  int8x16_t v12;
  int8x16_t v13;
  unsigned __int128 v14;
  unsigned __int128 v15;
  unsigned __int128 v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t result;

  bzero(a3, 0xAC0uLL);
  v6 = *a1;
  v7 = (int8x16_t *)((char *)a1 + *a2);
  v8.i64[0] = 0xFF000000FFLL;
  v8.i64[1] = 0xFF000000FFLL;
  v9 = *v7;
  v10 = vandq_s8(*v7, v8);
  v11 = (int8x16_t *)((char *)v7 + a2[1]);
  v12 = *(int8x16_t *)((char *)v11 + a2[2]);
  v13 = *v11;
  v14 = *(_OWORD *)&vandq_s8(*v11, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v15 = *(_OWORD *)&vandq_s8(v12, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v16 = *(_OWORD *)&vandq_s8(*a1, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v8.i64[0] = 0xCB000000CB000000;
  v8.i64[1] = 0xCB000000CB000000;
  v17 = vaddq_f32((float32x4_t)v16, (float32x4_t)v8);
  v18 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  a3[8].i16[2] = 324;
  a3[8].i8[6] = -1;
  a3[8].i8[8] = -1;
  a3[17] = vmulq_f32(v17, v18);
  a3[18] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v10 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v18);
  v10.i64[0] = 0xFF000000FF00;
  v10.i64[1] = 0xFF000000FF00;
  a3[19] = vmulq_f32(vaddq_f32((float32x4_t)v14, (float32x4_t)v8), v18);
  a3[20] = vmulq_f32(vaddq_f32((float32x4_t)v15, (float32x4_t)v8), v18);
  v19 = (float32x4_t)vdupq_n_s32(0x3B800000u);
  a3[13] = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v6, v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v19), v18);
  a3[14] = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v9, v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v19), v18);
  a3[15] = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v13, v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v19), v18);
  a3[16] = vmulq_f32(vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v12, v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v19), v18);
  v20 = (float32x4_t)vshrq_n_u32((uint32x4_t)v13, 0x10uLL);
  v21 = (float32x4_t)vshrq_n_u32((uint32x4_t)v12, 0x10uLL);
  v22 = (float32x4_t)vshrq_n_u32((uint32x4_t)v9, 0x10uLL);
  v23 = (float32x4_t)vshrq_n_u32((uint32x4_t)v6, 0x10uLL);
  v20.i32[0] = v20.i32[0] & 0xB4FF00FF | 0x4B000000;
  v20.i32[1] = v20.i32[1] & 0xB4FF00FF | 0x4B000000;
  v20.i32[2] = v20.i32[2] & 0xB4FF00FF | 0x4B000000;
  v20.i32[3] = v20.i32[3] & 0xB4FF00FF | 0x4B000000;
  v21.i32[0] = v21.i32[0] & 0xB4FF00FF | 0x4B000000;
  v21.i32[1] = v21.i32[1] & 0xB4FF00FF | 0x4B000000;
  v21.i32[2] = v21.i32[2] & 0xB4FF00FF | 0x4B000000;
  v21.i32[3] = v21.i32[3] & 0xB4FF00FF | 0x4B000000;
  v22.i32[0] = v22.i32[0] & 0xB4FF00FF | 0x4B000000;
  v22.i32[1] = v22.i32[1] & 0xB4FF00FF | 0x4B000000;
  v22.i32[2] = v22.i32[2] & 0xB4FF00FF | 0x4B000000;
  v22.i32[3] = v22.i32[3] & 0xB4FF00FF | 0x4B000000;
  v23.i32[0] = v23.i32[0] & 0xB4FF00FF | 0x4B000000;
  v23.i32[1] = v23.i32[1] & 0xB4FF00FF | 0x4B000000;
  v23.i32[2] = v23.i32[2] & 0xB4FF00FF | 0x4B000000;
  v23.i32[3] = v23.i32[3] & 0xB4FF00FF | 0x4B000000;
  a3[9] = vmulq_f32(vaddq_f32(v23, (float32x4_t)v8), v18);
  a3[10] = vmulq_f32(vaddq_f32(v22, (float32x4_t)v8), v18);
  a3[11] = vmulq_f32(vaddq_f32(v20, (float32x4_t)v8), v18);
  a3[12] = vmulq_f32(vaddq_f32(v21, (float32x4_t)v8), v18);
  a3[21] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v6, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v18);
  a3[22] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v9, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v18);
  result = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v12, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v18);
  a3[23] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v13, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), (float32x4_t)v8), v18);
  a3[24] = result;
  return result;
}

float32x4_t Read_4x4_RA8_vec@<Q0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t result;
  int8x16x2_t v23;

  bzero((void *)a3, 0xAC0uLL);
  *(_WORD *)(a3 + 132) = 324;
  *(_BYTE *)(a3 + 134) = -1;
  *(_BYTE *)(a3 + 136) = -1;
  v23.val[1].i64[0] = *a1;
  v6 = (uint64_t *)((char *)a1 + *a2);
  v7 = *v6;
  v8 = (uint64_t *)((char *)v6 + a2[1]);
  v9.i64[0] = *v8;
  v23.val[1].i64[1] = v7;
  v23.val[0].i64[0] = 0x4B004B004B004B00;
  v23.val[0].i64[1] = 0x4B004B004B004B00;
  v10 = vqtbl2q_s8(v23, (int8x16_t)xmmword_20631C3E0);
  v11 = vqtbl2q_s8(v23, (int8x16_t)xmmword_20631C3F0);
  v9.i64[1] = *(uint64_t *)((char *)v8 + a2[2]);
  v23.val[1] = v9;
  v12 = vqtbl2q_s8(v23, (int8x16_t)xmmword_20631C3E0);
  v23.val[0] = vqtbl2q_s8(v23, (int8x16_t)xmmword_20631C3F0);
  v13.i64[0] = 0xCB000000CB000000;
  v13.i64[1] = 0xCB000000CB000000;
  v14 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v23.val[1] = (int8x16_t)vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)v23.val & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v13), v14);
  v15 = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v12 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v13), v14);
  v16 = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v11 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v13), v14);
  v17 = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v10 & __PAIR128__(0xFFFF00FFFFFF00FFLL, 0xFFFF00FFFFFF00FFLL)), v13), v14);
  *(float32x4_t *)(a3 + 144) = v16;
  *(float32x4_t *)(a3 + 160) = v17;
  *(int8x16_t *)(a3 + 176) = v23.val[1];
  *(float32x4_t *)(a3 + 192) = v15;
  *(float32x4_t *)(a3 + 208) = v16;
  *(float32x4_t *)(a3 + 224) = v17;
  *(int8x16_t *)(a3 + 240) = v23.val[1];
  *(float32x4_t *)(a3 + 256) = v15;
  *(float32x4_t *)(a3 + 272) = v16;
  *(float32x4_t *)(a3 + 288) = v17;
  *(int8x16_t *)(a3 + 304) = v23.val[1];
  *(float32x4_t *)(a3 + 320) = v15;
  v18 = vaddq_f32((float32x4_t)(*(_OWORD *)&v10 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)), v13);
  v19 = vaddq_f32((float32x4_t)(*(_OWORD *)&v11 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)), v13);
  v20 = vaddq_f32((float32x4_t)(*(_OWORD *)&v12 & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)), v13);
  v23.val[0] = (int8x16_t)vaddq_f32((float32x4_t)(*(_OWORD *)v23.val & __PAIR128__(0xFFFFFF00FFFFFF00, 0xFFFFFF00FFFFFF00)), v13);
  v21 = (float32x4_t)vdupq_n_s32(0x37808081u);
  result = vmulq_f32((float32x4_t)v23.val[0], v21);
  *(float32x4_t *)(a3 + 336) = vmulq_f32(v19, v21);
  *(float32x4_t *)(a3 + 352) = vmulq_f32(v18, v21);
  *(float32x4_t *)(a3 + 368) = result;
  *(float32x4_t *)(a3 + 384) = vmulq_f32(v20, v21);
  *(_DWORD *)(a3 + 124) = 2139095040;
  *(float32x4_t *)(a3 + 656) = v16;
  *(float32x4_t *)(a3 + 672) = v17;
  *(int8x16_t *)(a3 + 688) = v23.val[1];
  *(float32x4_t *)(a3 + 704) = v15;
  return result;
}

float32x4_t Read_4x4_R8_vec@<Q0>(__int32 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  __int32 *v6;
  uint8x8_t v7;
  __int32 *v8;
  uint8x8_t v9;
  uint16x8_t v10;
  uint16x8_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t result;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;

  bzero((void *)a3, 0xAC0uLL);
  *(_WORD *)(a3 + 132) = 324;
  v6 = (__int32 *)((char *)a1 + *a2);
  v7.i32[0] = *a1;
  v7.i32[1] = *v6;
  v8 = (__int32 *)((char *)v6 + a2[1]);
  v9.i32[0] = *v8;
  v9.i32[1] = *(__int32 *)((char *)v8 + a2[2]);
  v10 = vmovl_u8(v9);
  v11 = vmovl_u8(v7);
  v12.i64[0] = 0xCB000000CB000000;
  v12.i64[1] = 0xCB000000CB000000;
  v13 = vaddq_f32((float32x4_t)(*(_OWORD *)&vmovl_high_u16(v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v12);
  v14 = vaddq_f32((float32x4_t)(*(_OWORD *)&vmovl_u16(*(uint16x4_t *)v10.i8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v12);
  v15 = vaddq_f32((float32x4_t)(*(_OWORD *)&vmovl_high_u16(v11) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v12);
  v16 = vaddq_f32((float32x4_t)(*(_OWORD *)&vmovl_u16(*(uint16x4_t *)v11.i8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v12);
  v17 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  result = vmulq_f32(v16, v17);
  v19 = vmulq_f32(v15, v17);
  *(float32x4_t *)(a3 + 144) = result;
  *(float32x4_t *)(a3 + 160) = v19;
  v20 = vmulq_f32(v14, v17);
  v21 = vmulq_f32(v13, v17);
  *(float32x4_t *)(a3 + 176) = v20;
  *(float32x4_t *)(a3 + 192) = v21;
  *(float32x4_t *)(a3 + 208) = result;
  *(float32x4_t *)(a3 + 224) = v19;
  *(float32x4_t *)(a3 + 240) = v20;
  *(float32x4_t *)(a3 + 256) = v21;
  *(float32x4_t *)(a3 + 272) = result;
  *(float32x4_t *)(a3 + 288) = v19;
  *(float32x4_t *)(a3 + 304) = v20;
  *(float32x4_t *)(a3 + 320) = v21;
  *(_BYTE *)(a3 + 134) = 0;
  *(_BYTE *)(a3 + 136) = 1;
  *(_OWORD *)(a3 + 720) = 0u;
  *(_OWORD *)(a3 + 736) = 0u;
  *(_OWORD *)(a3 + 752) = 0u;
  *(_OWORD *)(a3 + 768) = 0u;
  *(_WORD *)(a3 + 784) = 0;
  __asm { FMOV            V4.4S, #1.0 }
  *(_OWORD *)(a3 + 368) = _Q4;
  *(_OWORD *)(a3 + 384) = _Q4;
  *(_OWORD *)(a3 + 336) = _Q4;
  *(_OWORD *)(a3 + 352) = _Q4;
  *(_DWORD *)(a3 + 124) = 2139095040;
  *(float32x4_t *)(a3 + 688) = v20;
  *(float32x4_t *)(a3 + 704) = v21;
  *(float32x4_t *)(a3 + 656) = result;
  *(float32x4_t *)(a3 + 672) = v19;
  return result;
}

float32x4_t Read_4x4_R16_vec@<Q0>(uint16x4_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint16x4_t *v6;
  uint16x4_t v7;
  uint16x4_t *v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t result;
  float32x4_t v23;

  bzero((void *)a3, 0xAC0uLL);
  *(_WORD *)(a3 + 132) = 324;
  v6 = (uint16x4_t *)((char *)a1 + *a2);
  v7 = *v6;
  v8 = (uint16x4_t *)((char *)v6 + a2[1]);
  v9 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  v10 = (float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*v8), v9);
  v11 = (float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)((char *)v8 + a2[2])), v9);
  v12 = (float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(v7), v9);
  v13 = (float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*a1), v9);
  v14 = (float32x4_t)vdupq_n_s32(0xCB400000);
  v15 = vaddq_f32(v13, v14);
  v16 = vaddq_f32(v12, v14);
  v17 = vaddq_f32(v11, v14);
  v18 = vaddq_f32(v10, v14);
  v19 = (float32x4_t)vdupq_n_s32(0x37800080u);
  v20 = vmulq_f32(v18, v19);
  v21 = vmulq_f32(v16, v19);
  result = vmulq_f32(v15, v19);
  *(float32x4_t *)(a3 + 272) = result;
  *(float32x4_t *)(a3 + 288) = v21;
  v23 = vmulq_f32(v17, v19);
  *(float32x4_t *)(a3 + 304) = v20;
  *(float32x4_t *)(a3 + 320) = v23;
  *(float32x4_t *)(a3 + 208) = result;
  *(float32x4_t *)(a3 + 224) = v21;
  *(float32x4_t *)(a3 + 240) = v20;
  *(float32x4_t *)(a3 + 256) = v23;
  *(float32x4_t *)(a3 + 144) = result;
  *(float32x4_t *)(a3 + 160) = v21;
  *(float32x4_t *)(a3 + 176) = v20;
  *(float32x4_t *)(a3 + 192) = v23;
  *(_BYTE *)(a3 + 134) = 0;
  *(_BYTE *)(a3 + 136) = 1;
  *(_OWORD *)(a3 + 720) = 0u;
  *(_OWORD *)(a3 + 736) = 0u;
  *(_OWORD *)(a3 + 752) = 0u;
  *(_OWORD *)(a3 + 768) = 0u;
  *(_WORD *)(a3 + 784) = 0;
  __asm { FMOV            V4.4S, #1.0 }
  *(_OWORD *)(a3 + 368) = _Q4;
  *(_OWORD *)(a3 + 384) = _Q4;
  *(_OWORD *)(a3 + 336) = _Q4;
  *(_OWORD *)(a3 + 352) = _Q4;
  *(_DWORD *)(a3 + 124) = 2139095040;
  *(float32x4_t *)(a3 + 688) = v20;
  *(float32x4_t *)(a3 + 704) = v23;
  *(float32x4_t *)(a3 + 656) = result;
  *(float32x4_t *)(a3 + 672) = v21;
  return result;
}

float32x4_t Read_4x4_RA16_vec@<Q0>(int8x16_t *a1@<X0>, _QWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t v8;
  unsigned __int128 v9;
  unsigned __int128 v10;
  int8x16_t v11;
  int8x16_t v12;
  unsigned __int128 v13;
  uint32x4_t v14;
  uint32x4_t v15;
  uint32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t result;

  bzero(a3, 0xAC0uLL);
  a3[8].i16[2] = 324;
  a3[8].i8[6] = -1;
  a3[8].i8[8] = -1;
  v6 = (int8x16_t *)((char *)a1 + *a2);
  v7 = (int8x16_t *)((char *)v6 + a2[1]);
  v8.i64[0] = 0xFFFF0000FFFFLL;
  v8.i64[1] = 0xFFFF0000FFFFLL;
  v9 = *(_OWORD *)&vandq_s8(*v6, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v10 = *(_OWORD *)&vandq_s8(*a1, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v11 = *(int8x16_t *)((char *)v7 + a2[2]);
  v12 = vandq_s8(v11, v8);
  v13 = *(_OWORD *)&vandq_s8(*v7, v8) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000);
  v14 = vshrq_n_u32(*(uint32x4_t *)v6, 0x10uLL);
  v15 = vshrq_n_u32(*(uint32x4_t *)a1, 0x10uLL);
  v16 = vshrq_n_u32(*(uint32x4_t *)v7, 0x10uLL);
  v17.i64[0] = 0xCB000000CB000000;
  v17.i64[1] = 0xCB000000CB000000;
  v18 = (float32x4_t)vdupq_n_s32(0x37800080u);
  v19 = vmulq_f32(vaddq_f32((float32x4_t)v9, v17), v18);
  v20 = vmulq_f32(vaddq_f32((float32x4_t)v10, v17), v18);
  a3[17] = v20;
  a3[18] = v19;
  v21 = vmulq_f32(vaddq_f32((float32x4_t)v13, v17), v18);
  v22 = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v12 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v18);
  a3[19] = v21;
  a3[20] = v22;
  a3[13] = v20;
  a3[14] = v19;
  a3[15] = v21;
  a3[16] = v22;
  a3[9] = v20;
  a3[10] = v19;
  result = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v14 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v18);
  a3[11] = v21;
  a3[12] = v22;
  a3[21] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v15 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v18);
  a3[22] = result;
  a3[23] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&v16 | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v18);
  a3[24] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v11, 0x10uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v17), v18);
  a3[7].i32[3] = 2139095040;
  a3[41] = v20;
  a3[42] = v19;
  a3[43] = v21;
  a3[44] = v22;
  return result;
}

float32x4_t Read_4x4_Rf16_vec@<Q0>(float16x4_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  float16x4_t *v6;
  float16x4_t v7;
  float16x4_t *v8;
  float32x4_t result;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;

  bzero((void *)a3, 0xAC0uLL);
  *(_WORD *)(a3 + 132) = 324;
  v6 = (float16x4_t *)((char *)a1 + *a2);
  v7 = *v6;
  v8 = (float16x4_t *)((char *)v6 + a2[1]);
  __asm { FMOV            V5.4S, #1.0 }
  result = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*a1), (float32x4_t)0), _Q5);
  v15 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(v7), (float32x4_t)0), _Q5);
  v16 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*v8), (float32x4_t)0), _Q5);
  v17 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)((char *)v8 + a2[2])), (float32x4_t)0), _Q5);
  *(float32x4_t *)(a3 + 144) = result;
  *(float32x4_t *)(a3 + 160) = v15;
  *(float32x4_t *)(a3 + 176) = v16;
  *(float32x4_t *)(a3 + 192) = v17;
  *(float32x4_t *)(a3 + 208) = result;
  *(float32x4_t *)(a3 + 224) = v15;
  *(float32x4_t *)(a3 + 240) = v16;
  *(float32x4_t *)(a3 + 256) = v17;
  *(float32x4_t *)(a3 + 272) = result;
  *(float32x4_t *)(a3 + 288) = v15;
  *(float32x4_t *)(a3 + 304) = v16;
  *(float32x4_t *)(a3 + 320) = v17;
  *(_BYTE *)(a3 + 134) = 0;
  *(_BYTE *)(a3 + 136) = 1;
  *(_OWORD *)(a3 + 720) = 0u;
  *(_OWORD *)(a3 + 736) = 0u;
  *(_OWORD *)(a3 + 752) = 0u;
  *(_OWORD *)(a3 + 768) = 0u;
  *(_WORD *)(a3 + 784) = 0;
  *(float32x4_t *)(a3 + 368) = _Q5;
  *(float32x4_t *)(a3 + 384) = _Q5;
  *(float32x4_t *)(a3 + 336) = _Q5;
  *(float32x4_t *)(a3 + 352) = _Q5;
  *(_DWORD *)(a3 + 124) = 2139095040;
  *(float32x4_t *)(a3 + 688) = v16;
  *(float32x4_t *)(a3 + 704) = v17;
  *(float32x4_t *)(a3 + 656) = result;
  *(float32x4_t *)(a3 + 672) = v15;
  return result;
}

float32x4_t Read_4x4_RAf16_vec@<Q0>(int8x16_t *a1@<X0>, _QWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  int8x16_t *v6;
  int8x16_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t result;

  bzero(a3, 0xAC0uLL);
  a3[8].i16[2] = 324;
  a3[8].i8[6] = -1;
  a3[8].i8[8] = -1;
  v6 = (int8x16_t *)((char *)a1 + *a2);
  v7 = (int8x16_t *)((char *)v6 + a2[1]);
  v8 = vqtbl1q_s8(*v6, (int8x16_t)xmmword_20631C400);
  v9 = vqtbl1q_s8(*a1, (int8x16_t)xmmword_20631C400);
  v10 = vqtbl1q_s8(*(int8x16_t *)((char *)v7 + a2[2]), (int8x16_t)xmmword_20631C400);
  v11 = vqtbl1q_s8(*v7, (int8x16_t)xmmword_20631C400);
  __asm { FMOV            V7.4S, #1.0 }
  v17 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v9.i8), (float32x4_t)0), _Q7);
  v18 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v8.i8), (float32x4_t)0), _Q7);
  a3[9] = v17;
  a3[10] = v18;
  v19 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v11.i8), (float32x4_t)0), _Q7);
  v20 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v10.i8), (float32x4_t)0), _Q7);
  a3[11] = v19;
  a3[12] = v20;
  a3[21] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), (float32x4_t)0), _Q7);
  a3[22] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), (float32x4_t)0), _Q7);
  result = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), (float32x4_t)0), _Q7);
  a3[23] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), (float32x4_t)0), _Q7);
  a3[24] = result;
  a3[13] = v17;
  a3[14] = v18;
  a3[15] = v19;
  a3[16] = v20;
  a3[17] = v17;
  a3[18] = v18;
  a3[19] = v19;
  a3[20] = v20;
  a3[7].i32[3] = 2139095040;
  a3[41] = v17;
  a3[42] = v18;
  a3[43] = v19;
  a3[44] = v20;
  return result;
}

float32x4_t Read_4x4_RGBAf16_vec@<Q0>(int8x16x2_t *a1@<X0>, _QWORD *a2@<X1>, float32x4_t *a3@<X8>)
{
  int8x16x2_t *v6;
  int8x16x2_t *v7;
  int8x16_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t result;
  int8x16x2_t v25;

  bzero(a3, 0xAC0uLL);
  v6 = (int8x16x2_t *)((char *)a1 + *a2);
  v7 = (int8x16x2_t *)((char *)v6 + a2[1]);
  v8 = vqtbl2q_s8(*a1, (int8x16_t)xmmword_20631C410);
  v9 = vqtbl2q_s8(*a1, (int8x16_t)xmmword_20631C420);
  v10 = vqtbl2q_s8(*v6, (int8x16_t)xmmword_20631C410);
  v11 = vqtbl2q_s8(*v6, (int8x16_t)xmmword_20631C420);
  v12 = vqtbl2q_s8(*v7, (int8x16_t)xmmword_20631C410);
  v13 = vqtbl2q_s8(*v7, (int8x16_t)xmmword_20631C420);
  v25 = *(int8x16x2_t *)((char *)v7 + a2[2]);
  v14 = vqtbl2q_s8(v25, (int8x16_t)xmmword_20631C410);
  v15 = vqtbl2q_s8(v25, (int8x16_t)xmmword_20631C420);
  v16 = vcvtq_f32_f16(*(float16x4_t *)v9.i8);
  v25.val[1] = (int8x16_t)vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL)), (float32x4_t)0);
  __asm { FMOV            V0.4S, #1.0 }
  a3[8].i16[2] = 324;
  a3[8].i8[6] = -1;
  a3[8].i8[8] = -1;
  v22 = vcvtq_f32_f16(*(float16x4_t *)v12.i8);
  v23 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), (float32x4_t)0), _Q0);
  a3[9] = vminnmq_f32(vmaxnmq_f32(v16, (float32x4_t)0), _Q0);
  a3[10] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v11.i8), (float32x4_t)0), _Q0);
  a3[11] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v13.i8), (float32x4_t)0), _Q0);
  a3[12] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v15.i8), (float32x4_t)0), _Q0);
  a3[13] = vminnmq_f32((float32x4_t)v25.val[1], _Q0);
  a3[14] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v11, v11, 8uLL)), (float32x4_t)0), _Q0);
  a3[15] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v13, v13, 8uLL)), (float32x4_t)0), _Q0);
  a3[16] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)), (float32x4_t)0), _Q0);
  a3[17] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v8.i8), (float32x4_t)0), _Q0);
  a3[18] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v10.i8), (float32x4_t)0), _Q0);
  a3[19] = vminnmq_f32(vmaxnmq_f32(v22, (float32x4_t)0), _Q0);
  a3[20] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v14.i8), (float32x4_t)0), _Q0);
  a3[21] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)), (float32x4_t)0), _Q0);
  a3[22] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)), (float32x4_t)0), _Q0);
  result = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)), (float32x4_t)0), _Q0);
  a3[23] = v23;
  a3[24] = result;
  return result;
}

void Read_8x8_RGBA8_vec(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;

  bzero((void *)a3, 0xAC0uLL);
  v6 = 0;
  *(_WORD *)(a3 + 132) = 392;
  *(_BYTE *)(a3 + 134) = -1;
  *(_BYTE *)(a3 + 136) = -1;
  v7.i64[0] = 0xFF000000FFLL;
  v7.i64[1] = 0xFF000000FFLL;
  v8.i64[0] = 0xCB000000CB000000;
  v8.i64[1] = 0xCB000000CB000000;
  v9 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v10.i64[0] = 0xFF000000FF00;
  v10.i64[1] = 0xFF000000FF00;
  v11 = (float32x4_t)vdupq_n_s32(0x37808081u);
  do
  {
    v12 = *a1;
    v13 = a1[1];
    a1 = (int8x16_t *)((char *)a1 + *(_QWORD *)(a2 + 8 * v6));
    v14 = (float32x4_t *)(a3 + 32 * v6);
    v14[9] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v12, v7) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v9);
    v14[10] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v13, v7) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v9);
    v14[25] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v12, v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v11);
    v14[26] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v13, v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v11);
    v15 = (float32x4_t)vshrq_n_u32((uint32x4_t)v12, 0x10uLL);
    v16 = (float32x4_t)vshrq_n_u32((uint32x4_t)v13, 0x10uLL);
    v15.i32[0] = v15.i32[0] & 0xB4FF00FF | 0x4B000000;
    v15.i32[1] = v15.i32[1] & 0xB4FF00FF | 0x4B000000;
    v15.i32[2] = v15.i32[2] & 0xB4FF00FF | 0x4B000000;
    v15.i32[3] = v15.i32[3] & 0xB4FF00FF | 0x4B000000;
    v16.i32[0] = v16.i32[0] & 0xB4FF00FF | 0x4B000000;
    v16.i32[1] = v16.i32[1] & 0xB4FF00FF | 0x4B000000;
    v16.i32[2] = v16.i32[2] & 0xB4FF00FF | 0x4B000000;
    v16.i32[3] = v16.i32[3] & 0xB4FF00FF | 0x4B000000;
    v14[41] = vmulq_f32(vaddq_f32(v15, v8), v9);
    v14[42] = vmulq_f32(vaddq_f32(v16, v8), v9);
    v14[57] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v12, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v9);
    v14[58] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v13, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v9);
    ++v6;
  }
  while (v6 != 8);
}

void Read_8x8_BGRA8_vec(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  int8x16_t v12;
  int8x16_t v13;
  float32x4_t *v14;
  float32x4_t v15;
  float32x4_t v16;

  bzero((void *)a3, 0xAC0uLL);
  v6 = 0;
  *(_WORD *)(a3 + 132) = 392;
  *(_BYTE *)(a3 + 134) = -1;
  *(_BYTE *)(a3 + 136) = -1;
  v7.i64[0] = 0xFF000000FFLL;
  v7.i64[1] = 0xFF000000FFLL;
  v8.i64[0] = 0xCB000000CB000000;
  v8.i64[1] = 0xCB000000CB000000;
  v9 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v10.i64[0] = 0xFF000000FF00;
  v10.i64[1] = 0xFF000000FF00;
  v11 = (float32x4_t)vdupq_n_s32(0x37808081u);
  do
  {
    v12 = *a1;
    v13 = a1[1];
    a1 = (int8x16_t *)((char *)a1 + *(_QWORD *)(a2 + 8 * v6));
    v14 = (float32x4_t *)(a3 + 32 * v6);
    v14[41] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v12, v7) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v9);
    v14[42] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v13, v7) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v9);
    v14[25] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v12, v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v11);
    v14[26] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vandq_s8(v13, v10) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v11);
    v15 = (float32x4_t)vshrq_n_u32((uint32x4_t)v12, 0x10uLL);
    v16 = (float32x4_t)vshrq_n_u32((uint32x4_t)v13, 0x10uLL);
    v15.i32[0] = v15.i32[0] & 0xB4FF00FF | 0x4B000000;
    v15.i32[1] = v15.i32[1] & 0xB4FF00FF | 0x4B000000;
    v15.i32[2] = v15.i32[2] & 0xB4FF00FF | 0x4B000000;
    v15.i32[3] = v15.i32[3] & 0xB4FF00FF | 0x4B000000;
    v16.i32[0] = v16.i32[0] & 0xB4FF00FF | 0x4B000000;
    v16.i32[1] = v16.i32[1] & 0xB4FF00FF | 0x4B000000;
    v16.i32[2] = v16.i32[2] & 0xB4FF00FF | 0x4B000000;
    v16.i32[3] = v16.i32[3] & 0xB4FF00FF | 0x4B000000;
    v14[9] = vmulq_f32(vaddq_f32(v15, v8), v9);
    v14[10] = vmulq_f32(vaddq_f32(v16, v8), v9);
    v14[57] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v12, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v9);
    v14[58] = vmulq_f32(vaddq_f32((float32x4_t)(*(_OWORD *)&vshrq_n_u32((uint32x4_t)v13, 0x18uLL) | __PAIR128__(0x4B0000004B000000, 0x4B0000004B000000)), v8), v9);
    ++v6;
  }
  while (v6 != 8);
}

void Read_8x8_RA8_vec(uint16x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  uint16x8_t v11;
  uint16x8_t v12;
  unsigned __int128 v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  uint64_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;

  bzero((void *)a3, 0xAC0uLL);
  v6 = 0;
  *(_WORD *)(a3 + 132) = 392;
  *(_BYTE *)(a3 + 134) = -1;
  *(_BYTE *)(a3 + 136) = -1;
  v7 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  v8 = (float32x4_t)vdupq_n_s32(0xCB400000);
  v9 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  v10 = (float32x4_t)vdupq_n_s32(0x3B008081u);
  do
  {
    v11 = *a1;
    a1 = (uint16x8_t *)((char *)a1 + *(_QWORD *)(a2 + 8 * v6));
    v12 = vshrq_n_u16(v11, 8uLL);
    v13 = *(_OWORD *)&v11 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
    v14 = (int8x16_t)vmovl_high_u16((uint16x8_t)v13);
    v15 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)&v13), v7), v8), v9);
    v16 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8(v14, v7), v8), v9);
    v17 = a3 + 32 * v6;
    *(float32x4_t *)(v17 + 2464) = v16;
    *(float32x4_t *)(v17 + 2448) = v15;
    *(float32x4_t *)(v17 + 656) = v15;
    *(float32x4_t *)(v17 + 672) = v16;
    *(float32x4_t *)(v17 + 400) = v15;
    *(float32x4_t *)(v17 + 416) = v16;
    *(float32x4_t *)(v17 + 144) = v15;
    *(float32x4_t *)(v17 + 160) = v16;
    v18 = (int8x16_t)vmovl_high_u16(v12);
    v19 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v12.i8), v7), v8), v9);
    v20 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8(v18, v7), v8), v9);
    *(float32x4_t *)(v17 + 912) = v19;
    *(float32x4_t *)(v17 + 928) = v20;
    *(int32x4_t *)(v17 + 2208) = vcgtq_f32(v10, v20);
    *(int32x4_t *)(v17 + 2192) = vcgtq_f32(v10, v19);
    ++v6;
  }
  while (v6 != 8);
}

void Read_8x8_R8_vec(uint8x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint8x8_t v15;
  uint16x8_t v16;
  float32x4_t v17;
  _OWORD *v18;
  float32x4_t v19;

  bzero((void *)a3, 0xAC0uLL);
  v6 = 0;
  v7 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  v8 = (float32x4_t)vdupq_n_s32(0xCB400000);
  *(_WORD *)(a3 + 132) = 392;
  v9 = (float32x4_t)vdupq_n_s32(0x3B808081u);
  __asm { FMOV            V3.4S, #1.0 }
  do
  {
    v15 = *a1;
    a1 = (uint8x8_t *)((char *)a1 + *(_QWORD *)(a2 + 8 * v6));
    v16 = vmovl_u8(v15);
    v17 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v16), v7), v8), v9);
    v18 = (_OWORD *)(a3 + 32 * v6);
    v18[154] = v17;
    v19 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v16.i8), v7), v8), v9);
    v18[153] = v19;
    v18[41] = v19;
    v18[42] = v17;
    v18[25] = v19;
    v18[26] = v17;
    v18[9] = v19;
    v18[10] = v17;
    v18[57] = _Q3;
    v18[58] = _Q3;
    v18[138] = 0uLL;
    v18[137] = 0uLL;
    ++v6;
  }
  while (v6 != 8);
  *(_BYTE *)(a3 + 134) = 0;
  *(_BYTE *)(a3 + 136) = 1;
}

void Read_8x8_R16_vec(uint16x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  float32x4_t v8;
  float32x4_t v9;
  uint16x8_t v15;
  float32x4_t v16;
  _OWORD *v17;
  float32x4_t v18;

  bzero((void *)a3, 0xAC0uLL);
  v6 = 0;
  v7 = (int8x16_t)vdupq_n_s32(0x4B400000u);
  v8 = (float32x4_t)vdupq_n_s32(0xCB400000);
  *(_WORD *)(a3 + 132) = 392;
  v9 = (float32x4_t)vdupq_n_s32(0x37800080u);
  __asm { FMOV            V3.4S, #1.0 }
  do
  {
    v15 = *a1;
    a1 = (uint16x8_t *)((char *)a1 + *(_QWORD *)(a2 + 8 * v6));
    v16 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v15), v7), v8), v9);
    v17 = (_OWORD *)(a3 + 32 * v6);
    v17[154] = v16;
    v18 = vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v15.i8), v7), v8), v9);
    v17[153] = v18;
    v17[41] = v18;
    v17[42] = v16;
    v17[25] = v18;
    v17[26] = v16;
    v17[9] = v18;
    v17[10] = v16;
    v17[57] = _Q3;
    v17[58] = _Q3;
    v17[138] = 0uLL;
    v17[137] = 0uLL;
    ++v6;
  }
  while (v6 != 8);
  *(_BYTE *)(a3 + 134) = 0;
  *(_BYTE *)(a3 + 136) = 1;
}

void Read_8x8_RA16_vec(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;

  bzero((void *)a3, 0xAC0uLL);
  v6 = 0;
  *(_WORD *)(a3 + 132) = 392;
  *(_BYTE *)(a3 + 134) = -1;
  *(_BYTE *)(a3 + 136) = -1;
  v7.i64[0] = 0xFFFF0000FFFFLL;
  v7.i64[1] = 0xFFFF0000FFFFLL;
  v8 = (float32x4_t)vdupq_n_s32(0x37800080u);
  do
  {
    v10 = *a1;
    v9 = a1[1];
    a1 = (int8x16_t *)((char *)a1 + *(_QWORD *)(a2 + 8 * v6));
    v11 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8(v10, v7)), v8);
    v12 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8(v9, v7)), v8);
    v13 = (float32x4_t *)(a3 + 32 * v6);
    v13[154] = v12;
    v13[153] = v11;
    v13[41] = v11;
    v13[42] = v12;
    v13[25] = v11;
    v13[26] = v12;
    v13[9] = v11;
    v13[10] = v12;
    v13[57] = vmulq_f32(vcvtq_f32_u32(vshrq_n_u32((uint32x4_t)v10, 0x10uLL)), v8);
    v13[58] = vmulq_f32(vcvtq_f32_u32(vshrq_n_u32((uint32x4_t)v9, 0x10uLL)), v8);
    ++v6;
  }
  while (v6 != 8);
}

void Read_8x8_RGBA16_vec(int16x8_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int8x16_t v7;
  float32x4_t v8;
  int16x8_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  int8x16_t v14;
  int8x16_t v15;
  float32x4_t *v16;

  bzero((void *)a3, 0xAC0uLL);
  v6 = 0;
  *(_WORD *)(a3 + 132) = 392;
  *(_BYTE *)(a3 + 134) = -1;
  *(_BYTE *)(a3 + 136) = -1;
  v7.i64[0] = 0xFFFF0000FFFFLL;
  v7.i64[1] = 0xFFFF0000FFFFLL;
  v8 = (float32x4_t)vdupq_n_s32(0x37800080u);
  do
  {
    v9 = a1[1];
    v10 = (int8x16_t)vuzp1q_s16(*a1, v9);
    v11 = (int8x16_t)vuzp2q_s16(*a1, v9);
    v12 = a1[2];
    v13 = a1[3];
    v14 = (int8x16_t)vuzp1q_s16(v12, v13);
    v15 = (int8x16_t)vuzp2q_s16(v12, v13);
    a1 = (int16x8_t *)((char *)a1 + *(_QWORD *)(a2 + 8 * v6));
    v16 = (float32x4_t *)(a3 + 32 * v6);
    v16[9] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8(v10, v7)), v8);
    v16[10] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8(v14, v7)), v8);
    v16[25] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8(v11, v7)), v8);
    v16[26] = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8(v15, v7)), v8);
    v16[41] = vmulq_f32(vcvtq_f32_u32(vshrq_n_u32((uint32x4_t)v10, 0x10uLL)), v8);
    v16[42] = vmulq_f32(vcvtq_f32_u32(vshrq_n_u32((uint32x4_t)v14, 0x10uLL)), v8);
    v16[57] = vmulq_f32(vcvtq_f32_u32(vshrq_n_u32((uint32x4_t)v11, 0x10uLL)), v8);
    v16[58] = vmulq_f32(vcvtq_f32_u32(vshrq_n_u32((uint32x4_t)v15, 0x10uLL)), v8);
    ++v6;
  }
  while (v6 != 8);
}

__n128 Read_8x8_Rf16_vec@<Q0>(float16x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v15;
  float16x8_t *v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t *v24;
  float32x4_t *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __n128 result;

  v6 = a3 + 912;
  v7 = (__int128 *)(a3 + 272);
  bzero((void *)a3, 0xAC0uLL);
  v8 = 0;
  *(_WORD *)(a3 + 132) = 392;
  v9 = (float32x4_t *)(a3 + 688);
  __asm { FMOV            V0.4S, #1.0 }
  do
  {
    v15 = *(_QWORD *)(a2 + v8 + 8);
    v16 = (float16x8_t *)((char *)a1 + *(_QWORD *)(a2 + v8));
    v17 = vcvt_hight_f32_f16(*v16);
    v18 = vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v16->i8), (float32x4_t)0);
    v19 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*a1), (float32x4_t)0), _Q0);
    v20 = vminnmq_f32(vmaxnmq_f32(vcvt_hight_f32_f16(*(float16x8_t *)a1->i8), (float32x4_t)0), _Q0);
    v21 = v9 - 34;
    *v21 = v19;
    v21[1] = v20;
    v22 = vminnmq_f32(v18, _Q0);
    v23 = vminnmq_f32(vmaxnmq_f32(v17, (float32x4_t)0), _Q0);
    v24 = v9 - 32;
    *v24 = v22;
    v24[1] = v23;
    a1 = (float16x4_t *)&v16->i8[v15];
    v25 = v9 - 18;
    *v25 = v19;
    v25[1] = v20;
    v9[-16] = v22;
    v9[-15] = v23;
    v9[-2] = v19;
    v9[-1] = v20;
    *v9 = v22;
    v9[1] = v23;
    v9 += 4;
    v8 += 16;
  }
  while (v8 != 64);
  *(_BYTE *)(a3 + 134) = 0;
  *(_BYTE *)(a3 + 136) = 1;
  *(_OWORD *)(a3 + 2192) = 0u;
  *(_OWORD *)(a3 + 2208) = 0u;
  *(_OWORD *)(a3 + 2224) = 0u;
  *(_OWORD *)(a3 + 2240) = 0u;
  *(_OWORD *)(a3 + 2256) = 0u;
  *(_OWORD *)(a3 + 2272) = 0u;
  *(_OWORD *)(a3 + 2288) = 0u;
  *(_OWORD *)(a3 + 2304) = 0u;
  *(_OWORD *)(a3 + 2320) = 0u;
  *(_OWORD *)(a3 + 2336) = 0u;
  *(_OWORD *)(a3 + 2352) = 0u;
  *(_OWORD *)(a3 + 2368) = 0u;
  *(_OWORD *)(a3 + 2384) = 0u;
  *(_OWORD *)(a3 + 2400) = 0u;
  *(_OWORD *)(a3 + 2416) = 0u;
  *(_OWORD *)(a3 + 2432) = 0u;
  *(float32x4_t *)v6 = _Q0;
  *(float32x4_t *)(v6 + 16) = _Q0;
  *(float32x4_t *)(v6 + 32) = _Q0;
  *(float32x4_t *)(v6 + 48) = _Q0;
  *(float32x4_t *)(v6 + 64) = _Q0;
  *(float32x4_t *)(v6 + 80) = _Q0;
  *(float32x4_t *)(v6 + 96) = _Q0;
  *(float32x4_t *)(v6 + 112) = _Q0;
  *(float32x4_t *)(v6 + 128) = _Q0;
  *(float32x4_t *)(v6 + 144) = _Q0;
  *(float32x4_t *)(v6 + 160) = _Q0;
  *(float32x4_t *)(v6 + 176) = _Q0;
  *(float32x4_t *)(v6 + 192) = _Q0;
  *(float32x4_t *)(v6 + 208) = _Q0;
  *(float32x4_t *)(v6 + 224) = _Q0;
  *(float32x4_t *)(v6 + 240) = _Q0;
  *(_DWORD *)(a3 + 124) = 2139095040;
  v26 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 1552) = *(_OWORD *)(a3 + 160);
  *(_OWORD *)(v6 + 1536) = v26;
  v27 = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(v6 + 1584) = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(v6 + 1568) = v27;
  v28 = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v6 + 1600) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(v6 + 1616) = v28;
  v29 = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v6 + 1648) = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(v6 + 1632) = v29;
  v30 = *v7;
  *(_OWORD *)(v6 + 1680) = v7[1];
  *(_OWORD *)(v6 + 1664) = v30;
  v31 = v7[2];
  *(_OWORD *)(v6 + 1712) = v7[3];
  *(_OWORD *)(v6 + 1696) = v31;
  v32 = v7[4];
  *(_OWORD *)(v6 + 1744) = v7[5];
  *(_OWORD *)(v6 + 1728) = v32;
  result = (__n128)v7[6];
  *(_OWORD *)(v6 + 1776) = v7[7];
  *(__n128 *)(v6 + 1760) = result;
  return result;
}

__n128 Read_8x8_RAf16_vec@<Q0>(int8x16_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 result;
  __int128 v29;

  v6 = a3 + 2448;
  v7 = a3 + 272;
  bzero((void *)a3, 0xAC0uLL);
  v8 = 0;
  *(_WORD *)(a3 + 132) = 392;
  *(_BYTE *)(a3 + 134) = -1;
  *(_BYTE *)(a3 + 136) = -1;
  __asm { FMOV            V2.4S, #1.0 }
  do
  {
    v15 = *a1;
    v14 = a1[1];
    a1 = (int8x16_t *)((char *)a1 + *(_QWORD *)(a2 + 8 * v8));
    v16 = vqtbl1q_s8(v14, (int8x16_t)xmmword_20631C400);
    v17 = vqtbl1q_s8(v15, (int8x16_t)xmmword_20631C400);
    v18 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v17.i8), (float32x4_t)0), _Q2);
    v19 = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v16.i8), (float32x4_t)0), _Q2);
    v20 = (float32x4_t *)(a3 + 32 * v8);
    v20[41] = v18;
    v20[42] = v19;
    v20[25] = v18;
    v20[26] = v19;
    v20[9] = v18;
    v20[10] = v19;
    v20[57] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)), (float32x4_t)0), _Q2);
    v20[58] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), (float32x4_t)0), _Q2);
    ++v8;
  }
  while (v8 != 8);
  *(_DWORD *)(a3 + 124) = 2139095040;
  v21 = *(_OWORD *)(a3 + 160);
  *(_OWORD *)v6 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(v6 + 16) = v21;
  v22 = *(_OWORD *)(a3 + 192);
  *(_OWORD *)(v6 + 32) = *(_OWORD *)(a3 + 176);
  *(_OWORD *)(v6 + 48) = v22;
  v23 = *(_OWORD *)(a3 + 224);
  *(_OWORD *)(v6 + 64) = *(_OWORD *)(a3 + 208);
  *(_OWORD *)(v6 + 80) = v23;
  v24 = *(_OWORD *)(a3 + 256);
  *(_OWORD *)(v6 + 96) = *(_OWORD *)(a3 + 240);
  *(_OWORD *)(v6 + 112) = v24;
  v25 = *(_OWORD *)(v7 + 16);
  *(_OWORD *)(v6 + 128) = *(_OWORD *)v7;
  *(_OWORD *)(v6 + 144) = v25;
  v26 = *(_OWORD *)(v7 + 48);
  *(_OWORD *)(v6 + 160) = *(_OWORD *)(v7 + 32);
  *(_OWORD *)(v6 + 176) = v26;
  v27 = *(_OWORD *)(v7 + 80);
  *(_OWORD *)(v6 + 192) = *(_OWORD *)(v7 + 64);
  *(_OWORD *)(v6 + 208) = v27;
  result = *(__n128 *)(v7 + 96);
  v29 = *(_OWORD *)(v7 + 112);
  *(__n128 *)(v6 + 224) = result;
  *(_OWORD *)(v6 + 240) = v29;
  return result;
}

void Read_8x8_RGBAf16_vec(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  int8x16_t v12;
  float32x4_t *v13;
  int8x16x2_t v14;
  int8x16x2_t v15;

  bzero((void *)a3, 0xAC0uLL);
  v6 = 0;
  *(_WORD *)(a3 + 132) = 392;
  *(_BYTE *)(a3 + 134) = -1;
  *(_BYTE *)(a3 + 136) = -1;
  __asm { FMOV            V2.4S, #1.0 }
  do
  {
    v14 = *(int8x16x2_t *)(a1 + 32);
    v15 = *(int8x16x2_t *)a1;
    a1 += *(_QWORD *)(a2 + 8 * v6);
    v12 = vqtbl2q_s8(v15, (int8x16_t)xmmword_20631C410);
    v15.val[0] = vqtbl2q_s8(v15, (int8x16_t)xmmword_20631C420);
    v15.val[1] = vqtbl2q_s8(v14, (int8x16_t)xmmword_20631C410);
    v14.val[0] = vqtbl2q_s8(v14, (int8x16_t)xmmword_20631C420);
    v13 = (float32x4_t *)(a3 + 32 * v6);
    v13[9] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v15.val[0].i8), (float32x4_t)0), _Q2);
    v13[10] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v14.val[0].i8), (float32x4_t)0), _Q2);
    v13[25] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v15.val[0], v15.val[0], 8uLL)), (float32x4_t)0), _Q2);
    v13[26] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v14.val[0], v14.val[0], 8uLL)), (float32x4_t)0), _Q2);
    v13[41] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v12.i8), (float32x4_t)0), _Q2);
    v13[42] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16(*(float16x4_t *)v15.val[1].i8), (float32x4_t)0), _Q2);
    v13[57] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)), (float32x4_t)0), _Q2);
    v13[58] = vminnmq_f32(vmaxnmq_f32(vcvtq_f32_f16((float16x4_t)*(_OWORD *)&vextq_s8(v15.val[1], v15.val[1], 8uLL)), (float32x4_t)0), _Q2);
    ++v6;
  }
  while (v6 != 8);
}

float32x2_t FlattenNon_4x4_vec(uint64_t a1)
{
  int32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t *v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x2_t result;

  v1 = *(int32x4_t *)a1;
  v2 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
  v3 = *(float32x4_t *)(a1 + 368);
  v4 = *(float32x4_t *)(a1 + 384);
  v6 = *(float32x4_t *)(a1 + 336);
  v5 = *(float32x4_t *)(a1 + 352);
  v7 = vmlaq_f32(v2, vsubq_f32(*(float32x4_t *)(a1 + 160), v2), v5);
  v8 = vmlaq_f32(v2, vsubq_f32(*(float32x4_t *)(a1 + 144), v2), v6);
  v9 = vmlaq_f32(v2, vsubq_f32(*(float32x4_t *)(a1 + 192), v2), v4);
  v10 = vmlaq_f32(v2, vsubq_f32(*(float32x4_t *)(a1 + 176), v2), v3);
  *(float32x4_t *)(a1 + 176) = v10;
  *(float32x4_t *)(a1 + 192) = v9;
  *(float32x4_t *)(a1 + 144) = v8;
  *(float32x4_t *)(a1 + 160) = v7;
  v11 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1.i8, 1);
  v12 = vmlaq_f32(v11, vsubq_f32(*(float32x4_t *)(a1 + 224), v11), v5);
  v13 = vmlaq_f32(v11, vsubq_f32(*(float32x4_t *)(a1 + 208), v11), v6);
  v14 = vmlaq_f32(v11, vsubq_f32(*(float32x4_t *)(a1 + 256), v11), v4);
  v15 = vmlaq_f32(v11, vsubq_f32(*(float32x4_t *)(a1 + 240), v11), v3);
  *(float32x4_t *)(a1 + 240) = v15;
  *(float32x4_t *)(a1 + 256) = v14;
  v16 = (float32x4_t)vdupq_laneq_s32(v1, 2);
  *(float32x4_t *)(a1 + 208) = v13;
  *(float32x4_t *)(a1 + 224) = v12;
  v17 = vmlaq_f32(v16, vsubq_f32(*(float32x4_t *)(a1 + 288), v16), v5);
  v18 = vmlaq_f32(v16, vsubq_f32(*(float32x4_t *)(a1 + 272), v16), v6);
  v19 = vmlaq_f32(v16, vsubq_f32(*(float32x4_t *)(a1 + 320), v16), v4);
  v20 = vmlaq_f32(v16, vsubq_f32(*(float32x4_t *)(a1 + 304), v16), v3);
  *(float32x4_t *)(a1 + 304) = v20;
  *(float32x4_t *)(a1 + 320) = v19;
  *(float32x4_t *)(a1 + 272) = v18;
  *(float32x4_t *)(a1 + 288) = v17;
  *(_BYTE *)(a1 + 134) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_WORD *)(a1 + 784) = 0;
  __asm { FMOV            V20.4S, #1.0 }
  *(int32x4_t *)(a1 + 368) = _Q20;
  *(int32x4_t *)(a1 + 384) = _Q20;
  *(int32x4_t *)(a1 + 336) = _Q20;
  *(int32x4_t *)(a1 + 352) = _Q20;
  if (*(float *)(a1 + 124) < 0.0)
  {
    v26 = *(float32x4_t **)(a1 + 32);
    if (v26)
      v27 = *v26;
    else
      v27 = (float32x4_t)xmmword_20631C430;
    v28 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v14, *(float32x2_t *)v27.f32, 1), v9, v27.f32[0]), v19, v27, 2);
    v29 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v15, *(float32x2_t *)v27.f32, 1), v10, v27.f32[0]), v20, v27, 2);
    v30 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v12, *(float32x2_t *)v27.f32, 1), v7, v27.f32[0]), v17, v27, 2);
    v31 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v13, *(float32x2_t *)v27.f32, 1), v8, v27.f32[0]), v18, v27, 2);
    *(float32x4_t *)(a1 + 656) = v31;
    *(float32x4_t *)(a1 + 672) = v30;
    *(float32x4_t *)(a1 + 688) = v29;
    *(float32x4_t *)(a1 + 704) = v28;
    v32 = vsubq_f32(v7, v30);
    v33 = vsubq_f32(v9, v28);
    v34 = vsubq_f32(v8, v31);
    v35 = vsubq_f32(v10, v29);
    v36 = vsubq_f32(v15, v29);
    v37 = vsubq_f32(v13, v31);
    v38 = vsubq_f32(v14, v28);
    v39 = vsubq_f32(v12, v30);
    v40 = vsubq_f32(v20, v29);
    v41 = vsubq_f32(v18, v31);
    v42 = vsubq_f32(v19, v28);
    v43 = vsubq_f32(v17, v30);
    v44 = vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v37, v37), v34, v34), v41, v41), vmlaq_f32(vmlaq_f32(vmulq_f32(v36, v36), v35, v35), v40, v40)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v39, v39), v32, v32), v43, v43), vmlaq_f32(vmlaq_f32(vmulq_f32(v38, v38), v33, v33), v42, v42)));
    v44.i64[0] = vpaddq_f32(v44, v44).u64[0];
    v44.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v44.f32, *(float32x2_t *)v44.f32).f32[0]);
    *(float *)(a1 + 124) = (float)(v44.f32[0] * 3.0) + (float)(v44.f32[0] * 3.0);
  }
  v45 = vzip1q_s32((int32x4_t)v8, (int32x4_t)v18);
  v46 = vzip1q_s32((int32x4_t)v7, (int32x4_t)v17);
  v47 = vzip2q_s32((int32x4_t)v8, (int32x4_t)v18);
  v48 = vzip2q_s32((int32x4_t)v7, (int32x4_t)v17);
  v49 = vzip1q_s32((int32x4_t)v12, _Q20);
  v50 = vzip2q_s32((int32x4_t)v13, _Q20);
  v51 = vzip2q_s32((int32x4_t)v12, _Q20);
  v52 = vzip1q_s32(v46, v49);
  v53 = vzip2q_s32(v46, v49);
  v54 = vzip1q_s32(v48, v51);
  v55 = vzip1q_s32(v47, v50);
  v56 = vzip2q_s32(v48, v51);
  v57 = vzip2q_s32(v47, v50);
  v58 = (int32x4_t)vextq_s8((int8x16_t)_Q20, (int8x16_t)_Q20, 0xCuLL);
  v59 = vzip1q_s32(v45, v58);
  v59.i32[1] = v13.i32[0];
  v60 = vzip1q_s32(_Q20, _Q20);
  v61 = vzip2q_s32(v45, v60);
  v61.i32[1] = v13.i32[1];
  *(int32x4_t *)(a1 + 432) = v55;
  *(int32x4_t *)(a1 + 448) = v57;
  *(int32x4_t *)(a1 + 400) = v59;
  *(int32x4_t *)(a1 + 416) = v61;
  *(int32x4_t *)(a1 + 496) = v54;
  *(int32x4_t *)(a1 + 512) = v56;
  *(int32x4_t *)(a1 + 464) = v52;
  *(int32x4_t *)(a1 + 480) = v53;
  v62 = vzip1q_s32((int32x4_t)v10, (int32x4_t)v20);
  v63 = vzip1q_s32((int32x4_t)v9, (int32x4_t)v19);
  v64 = vzip2q_s32((int32x4_t)v10, (int32x4_t)v20);
  v65 = vzip2q_s32((int32x4_t)v9, (int32x4_t)v19);
  v66 = vzip1q_s32((int32x4_t)v14, _Q20);
  v67 = vzip2q_s32((int32x4_t)v15, _Q20);
  v68 = vzip2q_s32((int32x4_t)v14, _Q20);
  v69 = vzip1q_s32(v63, v66);
  v70 = vzip2q_s32(v63, v66);
  v71 = vzip1q_s32(v65, v68);
  v72 = vzip2q_s32(v65, v68);
  v73 = vzip1q_s32(v62, v58);
  v73.i32[1] = v15.i32[0];
  v74 = vzip2q_s32(v62, v60);
  v74.i32[1] = v15.i32[1];
  *(int32x4_t *)(a1 + 560) = vzip1q_s32(v64, v67);
  *(int32x4_t *)(a1 + 576) = vzip2q_s32(v64, v67);
  *(int32x4_t *)(a1 + 528) = v73;
  *(int32x4_t *)(a1 + 544) = v74;
  *(int32x4_t *)(a1 + 624) = v71;
  *(int32x4_t *)(a1 + 640) = v72;
  *(int32x4_t *)(a1 + 592) = v69;
  *(int32x4_t *)(a1 + 608) = v70;
  v75 = vmulq_f32(v9, v9);
  v76 = vmulq_f32(v10, v10);
  v77 = vpaddq_f32(vaddq_f32(vaddq_f32(v8, v10), vaddq_f32(v7, v9)), vaddq_f32(vaddq_f32(v13, v15), vaddq_f32(v12, v14)));
  __asm { FMOV            V4.4S, #4.0 }
  v79 = vpaddq_f32(v77, vpaddq_f32(vaddq_f32(vaddq_f32(v18, v20), vaddq_f32(v17, v19)), _Q4));
  v80 = vpaddq_f32(vpaddq_f32(vaddq_f32(vmlaq_f32(v76, v8, v8), vmlaq_f32(v75, v7, v7)), vaddq_f32(vmlaq_f32(vmulq_f32(v15, v15), v13, v13), vmlaq_f32(vmulq_f32(v14, v14), v12, v12))), vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v20, v20), v18, v18), vmlaq_f32(vmulq_f32(v19, v19), v17, v17)), _Q4));
  v81 = vmulq_f32(v79, (float32x4_t)vdupq_n_s32(0x3D800000u));
  v82 = vmlsq_f32(v80, v81, v79);
  *(float32x4_t *)(a1 + 16) = v81;
  v82.i64[0] = vpaddq_f32(v82, v82).u64[0];
  result = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32);
  *(_DWORD *)(a1 + 120) = result.i32[0];
  return result;
}

float32x2_t FlattenPre_4x4_vec(uint64_t a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float v26;
  float32x4_t *v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  int32x4_t v70;
  int32x4_t v71;
  int32x4_t v72;
  int32x4_t v73;
  int32x4_t v74;
  int32x4_t v75;
  int32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  int32x4_t v79;
  int32x4_t v80;
  int32x4_t v81;
  int32x4_t v82;
  int32x4_t v83;
  int32x4_t v84;
  int32x4_t v85;
  int32x4_t v86;
  int32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  float32x4_t v95;
  float32x2_t result;

  v1 = (float32x4_t *)(a1 + 272);
  v2 = *(float32x4_t *)(a1 + 336);
  v3 = *(float32x4_t *)(a1 + 352);
  v4 = *(float32x4_t *)(a1 + 368);
  v5 = *(float32x4_t *)(a1 + 384);
  __asm { FMOV            V0.4S, #1.0 }
  if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v2, _Q0), (int8x16_t)vceqq_f32(v4, _Q0)), vandq_s8((int8x16_t)vceqq_f32(v3, _Q0), (int8x16_t)vceqq_f32(v5, _Q0)))) & 0x80000000) == 0)
  {
    v11 = vminnmq_f32(*(float32x4_t *)(a1 + 208), v2);
    v12 = vminnmq_f32(*(float32x4_t *)(a1 + 224), v3);
    v13 = vminnmq_f32(*(float32x4_t *)(a1 + 240), v4);
    v14 = vminnmq_f32(*(float32x4_t *)(a1 + 256), v5);
    v15 = vminnmq_f32(*v1, v2);
    v16 = vminnmq_f32(*(float32x4_t *)(a1 + 288), v3);
    v17 = vminnmq_f32(*(float32x4_t *)(a1 + 304), v4);
    v18 = vminnmq_f32(*(float32x4_t *)(a1 + 320), v5);
    v19 = *(float32x4_t *)a1;
    v20 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
    v21 = vmlsq_lane_f32(vaddq_f32(vminnmq_f32(*(float32x4_t *)(a1 + 192), v5), v20), v5, *(float32x2_t *)a1, 0);
    v22 = vmlsq_lane_f32(vaddq_f32(vminnmq_f32(*(float32x4_t *)(a1 + 176), v4), v20), v4, *(float32x2_t *)a1, 0);
    v23 = vmlsq_lane_f32(vaddq_f32(vminnmq_f32(*(float32x4_t *)(a1 + 160), v3), v20), v3, *(float32x2_t *)a1, 0);
    *(float32x4_t *)(a1 + 144) = vmlsq_lane_f32(vaddq_f32(vminnmq_f32(*(float32x4_t *)(a1 + 144), v2), v20), v2, *(float32x2_t *)a1, 0);
    *(float32x4_t *)(a1 + 160) = v23;
    *(float32x4_t *)(a1 + 176) = v22;
    *(float32x4_t *)(a1 + 192) = v21;
    v24 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1);
    *(float32x4_t *)(a1 + 208) = vmlsq_lane_f32(vaddq_f32(v11, v24), v2, *(float32x2_t *)v19.f32, 1);
    *(float32x4_t *)(a1 + 224) = vmlsq_lane_f32(vaddq_f32(v12, v24), v3, *(float32x2_t *)v19.f32, 1);
    *(float32x4_t *)(a1 + 240) = vmlsq_lane_f32(vaddq_f32(v13, v24), v4, *(float32x2_t *)v19.f32, 1);
    *(float32x4_t *)(a1 + 256) = vmlsq_lane_f32(vaddq_f32(v14, v24), v5, *(float32x2_t *)v19.f32, 1);
    v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2);
    *v1 = vmlsq_laneq_f32(vaddq_f32(v15, v25), v2, v19, 2);
    *(float32x4_t *)(a1 + 288) = vmlsq_laneq_f32(vaddq_f32(v16, v25), v3, v19, 2);
    *(float32x4_t *)(a1 + 304) = vmlsq_laneq_f32(vaddq_f32(v17, v25), v4, v19, 2);
    *(float32x4_t *)(a1 + 320) = vmlsq_laneq_f32(vaddq_f32(v18, v25), v5, v19, 2);
  }
  *(_BYTE *)(a1 + 134) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_WORD *)(a1 + 784) = 0;
  *(float32x4_t *)(a1 + 368) = _Q0;
  *(float32x4_t *)(a1 + 384) = _Q0;
  v26 = *(float *)(a1 + 124);
  *(float32x4_t *)(a1 + 336) = _Q0;
  *(float32x4_t *)(a1 + 352) = _Q0;
  if (v26 >= 0.0)
  {
    v29 = *(float32x4_t *)(a1 + 176);
    v28 = *(float32x4_t *)(a1 + 192);
    v31 = *(float32x4_t *)(a1 + 144);
    v30 = *(float32x4_t *)(a1 + 160);
    v33 = *(float32x4_t *)(a1 + 240);
    v32 = *(float32x4_t *)(a1 + 256);
    v35 = *(float32x4_t *)(a1 + 208);
    v34 = *(float32x4_t *)(a1 + 224);
    v37 = *(float32x4_t *)(a1 + 304);
    v36 = *(float32x4_t *)(a1 + 320);
    v39 = *v1;
    v38 = *(float32x4_t *)(a1 + 288);
  }
  else
  {
    v27 = *(float32x4_t **)(a1 + 32);
    v29 = *(float32x4_t *)(a1 + 176);
    v28 = *(float32x4_t *)(a1 + 192);
    v31 = *(float32x4_t *)(a1 + 144);
    v30 = *(float32x4_t *)(a1 + 160);
    v33 = *(float32x4_t *)(a1 + 240);
    v32 = *(float32x4_t *)(a1 + 256);
    v35 = *(float32x4_t *)(a1 + 208);
    v34 = *(float32x4_t *)(a1 + 224);
    v37 = *(float32x4_t *)(a1 + 304);
    v36 = *(float32x4_t *)(a1 + 320);
    v39 = *v1;
    v38 = *(float32x4_t *)(a1 + 288);
    if (v27)
      v40 = *v27;
    else
      v40 = (float32x4_t)xmmword_20631C430;
    v41 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v32, *(float32x2_t *)v40.f32, 1), v28, v40.f32[0]), v36, v40, 2);
    v42 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v33, *(float32x2_t *)v40.f32, 1), v29, v40.f32[0]), v37, v40, 2);
    v43 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v34, *(float32x2_t *)v40.f32, 1), v30, v40.f32[0]), v38, v40, 2);
    v44 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v35, *(float32x2_t *)v40.f32, 1), v31, v40.f32[0]), v39, v40, 2);
    *(float32x4_t *)(a1 + 656) = v44;
    *(float32x4_t *)(a1 + 672) = v43;
    *(float32x4_t *)(a1 + 688) = v42;
    *(float32x4_t *)(a1 + 704) = v41;
    v45 = vsubq_f32(v30, v43);
    v46 = vsubq_f32(v28, v41);
    v47 = vsubq_f32(v31, v44);
    v48 = vsubq_f32(v29, v42);
    v49 = vsubq_f32(v33, v42);
    v50 = vsubq_f32(v35, v44);
    v51 = vsubq_f32(v32, v41);
    v52 = vsubq_f32(v34, v43);
    v53 = vsubq_f32(v37, v42);
    v54 = vsubq_f32(v39, v44);
    v55 = vsubq_f32(v36, v41);
    v56 = vsubq_f32(v38, v43);
    v57 = vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v50, v50), v47, v47), v54, v54), vmlaq_f32(vmlaq_f32(vmulq_f32(v49, v49), v48, v48), v53, v53)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v52, v52), v45, v45), v56, v56), vmlaq_f32(vmlaq_f32(vmulq_f32(v51, v51), v46, v46), v55, v55)));
    v57.i64[0] = vpaddq_f32(v57, v57).u64[0];
    v57.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v57.f32, *(float32x2_t *)v57.f32).f32[0]);
    *(float *)(a1 + 124) = (float)(v57.f32[0] * 3.0) + (float)(v57.f32[0] * 3.0);
  }
  v58 = vzip1q_s32((int32x4_t)v31, (int32x4_t)v39);
  v59 = vzip1q_s32((int32x4_t)v30, (int32x4_t)v38);
  v60 = vzip2q_s32((int32x4_t)v31, (int32x4_t)v39);
  v61 = vzip2q_s32((int32x4_t)v30, (int32x4_t)v38);
  v62 = vzip1q_s32((int32x4_t)v34, (int32x4_t)_Q0);
  v63 = vzip2q_s32((int32x4_t)v35, (int32x4_t)_Q0);
  v64 = vzip2q_s32((int32x4_t)v34, (int32x4_t)_Q0);
  v65 = vzip1q_s32(v59, v62);
  v66 = vzip2q_s32(v59, v62);
  v67 = vzip1q_s32(v61, v64);
  v68 = vzip1q_s32(v60, v63);
  v69 = vzip2q_s32(v61, v64);
  v70 = vzip2q_s32(v60, v63);
  v71 = (int32x4_t)vextq_s8((int8x16_t)_Q0, (int8x16_t)_Q0, 0xCuLL);
  v72 = vzip1q_s32(v58, v71);
  v72.i32[1] = v35.i32[0];
  v73 = vzip1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0);
  v74 = vzip2q_s32(v58, v73);
  v74.i32[1] = v35.i32[1];
  *(int32x4_t *)(a1 + 432) = v68;
  *(int32x4_t *)(a1 + 448) = v70;
  *(int32x4_t *)(a1 + 400) = v72;
  *(int32x4_t *)(a1 + 416) = v74;
  *(int32x4_t *)(a1 + 496) = v67;
  *(int32x4_t *)(a1 + 512) = v69;
  *(int32x4_t *)(a1 + 464) = v65;
  *(int32x4_t *)(a1 + 480) = v66;
  v75 = vzip1q_s32((int32x4_t)v29, (int32x4_t)v37);
  v76 = vzip1q_s32((int32x4_t)v28, (int32x4_t)v36);
  v77 = vzip2q_s32((int32x4_t)v29, (int32x4_t)v37);
  v78 = vzip2q_s32((int32x4_t)v28, (int32x4_t)v36);
  v79 = vzip1q_s32((int32x4_t)v32, (int32x4_t)_Q0);
  v80 = vzip2q_s32((int32x4_t)v33, (int32x4_t)_Q0);
  v81 = vzip2q_s32((int32x4_t)v32, (int32x4_t)_Q0);
  v82 = vzip1q_s32(v76, v79);
  v83 = vzip2q_s32(v76, v79);
  v84 = vzip1q_s32(v78, v81);
  v85 = vzip2q_s32(v78, v81);
  v86 = vzip1q_s32(v75, v71);
  v86.i32[1] = v33.i32[0];
  v87 = vzip2q_s32(v75, v73);
  v87.i32[1] = v33.i32[1];
  *(int32x4_t *)(a1 + 560) = vzip1q_s32(v77, v80);
  *(int32x4_t *)(a1 + 576) = vzip2q_s32(v77, v80);
  *(int32x4_t *)(a1 + 528) = v86;
  *(int32x4_t *)(a1 + 544) = v87;
  *(int32x4_t *)(a1 + 624) = v84;
  *(int32x4_t *)(a1 + 640) = v85;
  *(int32x4_t *)(a1 + 592) = v82;
  *(int32x4_t *)(a1 + 608) = v83;
  v88 = vmulq_f32(v28, v28);
  v89 = vmulq_f32(v29, v29);
  v90 = vpaddq_f32(vaddq_f32(vaddq_f32(v31, v29), vaddq_f32(v30, v28)), vaddq_f32(vaddq_f32(v35, v33), vaddq_f32(v34, v32)));
  __asm { FMOV            V16.4S, #4.0 }
  v92 = vpaddq_f32(v90, vpaddq_f32(vaddq_f32(vaddq_f32(v39, v37), vaddq_f32(v38, v36)), _Q16));
  v93 = vpaddq_f32(vpaddq_f32(vaddq_f32(vmlaq_f32(v89, v31, v31), vmlaq_f32(v88, v30, v30)), vaddq_f32(vmlaq_f32(vmulq_f32(v33, v33), v35, v35), vmlaq_f32(vmulq_f32(v32, v32), v34, v34))), vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v37, v37), v39, v39), vmlaq_f32(vmulq_f32(v36, v36), v38, v38)), _Q16));
  v94 = vmulq_f32(v92, (float32x4_t)vdupq_n_s32(0x3D800000u));
  v95 = vmlsq_f32(v93, v94, v92);
  *(float32x4_t *)(a1 + 16) = v94;
  v95.i64[0] = vpaddq_f32(v95, v95).u64[0];
  result = vpadd_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32);
  *(_DWORD *)(a1 + 120) = result.i32[0];
  return result;
}

uint64_t Premultiply_4x4_vec(uint64_t result)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;

  v2 = *(float32x4_t *)(result + 336);
  v1 = *(float32x4_t *)(result + 352);
  v3 = *(float32x4_t *)(result + 368);
  v4 = *(float32x4_t *)(result + 384);
  __asm { FMOV            V23.4S, #1.0 }
  v10 = vminnmq_f32(vmulq_f32(*(float32x4_t *)(result + 144), v2), _Q23);
  v11 = vminnmq_f32(vmulq_f32(*(float32x4_t *)(result + 160), v1), _Q23);
  v12 = vminnmq_f32(vmulq_f32(*(float32x4_t *)(result + 176), v3), _Q23);
  v13 = vminnmq_f32(vmulq_f32(*(float32x4_t *)(result + 192), v4), _Q23);
  *(float32x4_t *)(result + 176) = v12;
  *(float32x4_t *)(result + 192) = v13;
  *(float32x4_t *)(result + 144) = v10;
  *(float32x4_t *)(result + 160) = v11;
  v14 = vminnmq_f32(vmulq_f32(v2, *(float32x4_t *)(result + 208)), _Q23);
  v15 = vminnmq_f32(vmulq_f32(v1, *(float32x4_t *)(result + 224)), _Q23);
  v16 = vminnmq_f32(vmulq_f32(v3, *(float32x4_t *)(result + 240)), _Q23);
  v17 = vminnmq_f32(vmulq_f32(v4, *(float32x4_t *)(result + 256)), _Q23);
  *(float32x4_t *)(result + 240) = v16;
  *(float32x4_t *)(result + 256) = v17;
  *(float32x4_t *)(result + 208) = v14;
  *(float32x4_t *)(result + 224) = v15;
  v18 = vminnmq_f32(vmulq_f32(v2, *(float32x4_t *)(result + 272)), _Q23);
  v19 = vminnmq_f32(vmulq_f32(v1, *(float32x4_t *)(result + 288)), _Q23);
  v20 = vminnmq_f32(vmulq_f32(v3, *(float32x4_t *)(result + 304)), _Q23);
  v21 = vminnmq_f32(vmulq_f32(v4, *(float32x4_t *)(result + 320)), _Q23);
  *(float32x4_t *)(result + 304) = v20;
  *(float32x4_t *)(result + 320) = v21;
  v22 = *(float *)(result + 124);
  *(float32x4_t *)(result + 272) = v18;
  *(float32x4_t *)(result + 288) = v19;
  if (v22 < 0.0)
  {
    v23 = *(float32x4_t **)(result + 32);
    if (v23)
      v24 = *v23;
    else
      v24 = (float32x4_t)xmmword_20631C430;
    v25 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v17, *(float32x2_t *)v24.f32, 1), v13, v24.f32[0]), v21, v24, 2);
    v26 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v16, *(float32x2_t *)v24.f32, 1), v12, v24.f32[0]), v20, v24, 2);
    v27 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v15, *(float32x2_t *)v24.f32, 1), v11, v24.f32[0]), v19, v24, 2);
    v28 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v14, *(float32x2_t *)v24.f32, 1), v10, v24.f32[0]), v18, v24, 2);
    *(float32x4_t *)(result + 656) = v28;
    *(float32x4_t *)(result + 672) = v27;
    *(float32x4_t *)(result + 688) = v26;
    *(float32x4_t *)(result + 704) = v25;
    v29 = vsubq_f32(v11, v27);
    v30 = vsubq_f32(v13, v25);
    v31 = vsubq_f32(v10, v28);
    v32 = vsubq_f32(v12, v26);
    v33 = vsubq_f32(v16, v26);
    v34 = vsubq_f32(v14, v28);
    v35 = vsubq_f32(v17, v25);
    v36 = vsubq_f32(v15, v27);
    v37 = vsubq_f32(v20, v26);
    v38 = vsubq_f32(v18, v28);
    v39 = vsubq_f32(v21, v25);
    v40 = vsubq_f32(v19, v27);
    v41 = vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v34), v31, v31), v38, v38), vmlaq_f32(vmlaq_f32(vmulq_f32(v33, v33), v32, v32), v37, v37)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v36, v36), v29, v29), v40, v40), vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v35), v30, v30), v39, v39)));
    v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
    v41.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0]);
    *(float *)(result + 124) = (float)(v41.f32[0] * 3.0) + (float)(v41.f32[0] * 3.0);
  }
  if (*(char *)(result + 134) < 0)
  {
    v42 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v43 = (int16x8_t)vcgeq_f32(v42, v3);
    v44 = (int16x8_t)vcgeq_f32(v42, v4);
    v45 = (int16x8_t)vcgeq_f32(v42, v1);
    v46 = (int16x8_t)vcgeq_f32(v42, v2);
    *(int16x8_t *)(result + 720) = v46;
    *(int16x8_t *)(result + 736) = v45;
    *(int16x8_t *)(result + 752) = v43;
    *(int16x8_t *)(result + 768) = v44;
    v47 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v46, v45), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v43, v44), (int8x16_t)xmmword_20631C0C0));
    v47.i16[0] = vaddvq_s16(v47);
    *(_WORD *)(result + 784) = v47.i16[0];
    *(_BYTE *)(result + 134) = vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)v47.i8));
  }
  v48 = vzip1q_s32((int32x4_t)v10, (int32x4_t)v18);
  v49 = vzip1q_s32((int32x4_t)v11, (int32x4_t)v19);
  v50 = vzip2q_s32((int32x4_t)v10, (int32x4_t)v18);
  v51 = vzip2q_s32((int32x4_t)v11, (int32x4_t)v19);
  v52 = vzip1q_s32((int32x4_t)v15, (int32x4_t)v1);
  v53 = vzip2q_s32((int32x4_t)v14, (int32x4_t)v2);
  v54 = vzip2q_s32((int32x4_t)v15, (int32x4_t)v1);
  v55 = vzip1q_s32(v50, v53);
  v56 = vzip2q_s32(v50, v53);
  v57 = vzip2q_s32(v48, vuzp2q_s32(v48, (int32x4_t)v14));
  v57.i32[3] = v2.i32[1];
  v58 = vzip1q_s32(v48, (int32x4_t)v14);
  v58.i32[3] = v2.i32[0];
  *(int32x4_t *)(result + 432) = v55;
  *(int32x4_t *)(result + 448) = v56;
  *(int32x4_t *)(result + 400) = v58;
  *(int32x4_t *)(result + 416) = v57;
  *(int32x4_t *)(result + 496) = vzip1q_s32(v51, v54);
  *(int32x4_t *)(result + 512) = vzip2q_s32(v51, v54);
  *(int32x4_t *)(result + 464) = vzip1q_s32(v49, v52);
  *(int32x4_t *)(result + 480) = vzip2q_s32(v49, v52);
  v59 = vzip1q_s32((int32x4_t)v12, (int32x4_t)v20);
  v60 = vzip1q_s32((int32x4_t)v13, (int32x4_t)v21);
  v61 = vzip2q_s32((int32x4_t)v12, (int32x4_t)v20);
  v62 = vzip2q_s32((int32x4_t)v13, (int32x4_t)v21);
  v63 = vzip1q_s32((int32x4_t)v17, (int32x4_t)v4);
  v64 = vzip2q_s32((int32x4_t)v16, (int32x4_t)v3);
  v65 = vzip2q_s32((int32x4_t)v17, (int32x4_t)v4);
  v66 = vzip1q_s32(v61, v64);
  v67 = vzip2q_s32(v61, v64);
  v68 = vzip2q_s32(v59, vuzp2q_s32(v59, (int32x4_t)v16));
  v68.i32[3] = v3.i32[1];
  v69 = vzip1q_s32(v59, (int32x4_t)v16);
  v69.i32[3] = v3.i32[0];
  *(int32x4_t *)(result + 560) = v66;
  *(int32x4_t *)(result + 576) = v67;
  *(int32x4_t *)(result + 528) = v69;
  *(int32x4_t *)(result + 544) = v68;
  *(int32x4_t *)(result + 624) = vzip1q_s32(v62, v65);
  *(int32x4_t *)(result + 640) = vzip2q_s32(v62, v65);
  *(int32x4_t *)(result + 592) = vzip1q_s32(v60, v63);
  *(int32x4_t *)(result + 608) = vzip2q_s32(v60, v63);
  v70 = vmulq_f32(v3, v3);
  v71 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32(v10, v12), vaddq_f32(v11, v13)), vaddq_f32(vaddq_f32(v14, v16), vaddq_f32(v15, v17))), vpaddq_f32(vaddq_f32(vaddq_f32(v18, v20), vaddq_f32(v19, v21)), vaddq_f32(vaddq_f32(v2, v3), vaddq_f32(v1, v4))));
  v72 = vpaddq_f32(vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v12, v12), v10, v10), vmlaq_f32(vmulq_f32(v13, v13), v11, v11)), vaddq_f32(vmlaq_f32(vmulq_f32(v16, v16), v14, v14), vmlaq_f32(vmulq_f32(v17, v17), v15, v15))), vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v20, v20), v18, v18), vmlaq_f32(vmulq_f32(v21, v21), v19, v19)), vaddq_f32(vmlaq_f32(v70, v2, v2), vmlaq_f32(vmulq_f32(v4, v4), v1, v1))));
  v73 = vmulq_f32(v71, (float32x4_t)vdupq_n_s32(0x3D800000u));
  v74 = vmlsq_f32(v72, v73, v71);
  *(float32x4_t *)(result + 16) = v73;
  v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
  *(_DWORD *)(result + 120) = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32).u32[0];
  if (*(char *)(result + 136) <= 0)
    *(_BYTE *)(result + 136) = v73.f32[3] >= 0.99988;
  return result;
}

uint64_t Unpremultiply_4x4_vec(uint64_t result)
{
  float32x4_t v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float v22;
  float32x4_t *v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float32x4_t v41;
  float32x4_t v42;
  int16x8_t v43;
  int16x8_t v44;
  int16x8_t v45;
  int16x8_t v46;
  int16x8_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  int32x4_t v59;
  int32x4_t v60;
  int32x4_t v61;
  int32x4_t v62;
  int32x4_t v63;
  int32x4_t v64;
  int32x4_t v65;
  int32x4_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;

  v2 = *(float32x4_t *)(result + 368);
  v1 = *(float32x4_t *)(result + 384);
  v4 = *(float32x4_t *)(result + 336);
  v3 = *(float32x4_t *)(result + 352);
  v5 = vminnmq_f32(*(float32x4_t *)(result + 144), v4);
  v6 = vminnmq_f32(*(float32x4_t *)(result + 160), v3);
  v7 = vminnmq_f32(*(float32x4_t *)(result + 176), v2);
  v8 = vminnmq_f32(*(float32x4_t *)(result + 192), v1);
  v9 = vminnmq_f32(*(float32x4_t *)(result + 208), v4);
  v10 = vminnmq_f32(*(float32x4_t *)(result + 224), v3);
  v11 = vminnmq_f32(*(float32x4_t *)(result + 240), v2);
  v12 = vminnmq_f32(*(float32x4_t *)(result + 256), v1);
  v13 = vminnmq_f32(*(float32x4_t *)(result + 272), v4);
  v14 = vminnmq_f32(*(float32x4_t *)(result + 288), v3);
  v15 = vminnmq_f32(*(float32x4_t *)(result + 304), v2);
  v16 = vminnmq_f32(*(float32x4_t *)(result + 320), v1);
  if ((vmaxvq_u32((uint32x4_t)vorrq_s8(vornq_s8(vmvnq_s8((int8x16_t)vceqzq_f32(v4)), (int8x16_t)vceqzq_f32(v2)), vornq_s8(vmvnq_s8((int8x16_t)vceqzq_f32(v3)), (int8x16_t)vceqzq_f32(v1)))) & 0x80000000) != 0)
  {
    __asm { FMOV            V24.4S, #1.0 }
    if ((vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(v4, _Q24), (int8x16_t)vceqq_f32(v2, _Q24)), vandq_s8((int8x16_t)vceqq_f32(v3, _Q24), (int8x16_t)vceqq_f32(v1, _Q24)))) & 0x80000000) != 0)
    {
      *(_BYTE *)(result + 134) = 0;
      *(_BYTE *)(result + 136) = 1;
      *(_OWORD *)(result + 720) = 0u;
      *(_OWORD *)(result + 736) = 0u;
      *(_OWORD *)(result + 752) = 0u;
      *(_OWORD *)(result + 768) = 0u;
      *(float32x4_t *)(result + 368) = _Q24;
      *(float32x4_t *)(result + 384) = _Q24;
      v4 = _Q24;
      *(float32x4_t *)(result + 336) = _Q24;
      *(float32x4_t *)(result + 352) = _Q24;
      v3 = _Q24;
      v2 = _Q24;
      v1 = _Q24;
      *(_WORD *)(result + 784) = 0;
    }
  }
  *(float32x4_t *)(result + 144) = v5;
  *(float32x4_t *)(result + 160) = v6;
  *(float32x4_t *)(result + 176) = v7;
  *(float32x4_t *)(result + 192) = v8;
  *(float32x4_t *)(result + 208) = v9;
  *(float32x4_t *)(result + 224) = v10;
  *(float32x4_t *)(result + 240) = v11;
  *(float32x4_t *)(result + 256) = v12;
  *(float32x4_t *)(result + 272) = v13;
  *(float32x4_t *)(result + 288) = v14;
  v22 = *(float *)(result + 124);
  *(float32x4_t *)(result + 304) = v15;
  *(float32x4_t *)(result + 320) = v16;
  if (v22 < 0.0)
  {
    v23 = *(float32x4_t **)(result + 32);
    if (v23)
      v24 = *v23;
    else
      v24 = (float32x4_t)xmmword_20631C430;
    v25 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v12, *(float32x2_t *)v24.f32, 1), v8, v24.f32[0]), v16, v24, 2);
    v26 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v11, *(float32x2_t *)v24.f32, 1), v7, v24.f32[0]), v15, v24, 2);
    v27 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v10, *(float32x2_t *)v24.f32, 1), v6, v24.f32[0]), v14, v24, 2);
    v28 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v9, *(float32x2_t *)v24.f32, 1), v5, v24.f32[0]), v13, v24, 2);
    *(float32x4_t *)(result + 656) = v28;
    *(float32x4_t *)(result + 672) = v27;
    *(float32x4_t *)(result + 688) = v26;
    *(float32x4_t *)(result + 704) = v25;
    v29 = vsubq_f32(v6, v27);
    v30 = vsubq_f32(v8, v25);
    v31 = vsubq_f32(v5, v28);
    v32 = vsubq_f32(v7, v26);
    v33 = vsubq_f32(v11, v26);
    v34 = vsubq_f32(v9, v28);
    v35 = vsubq_f32(v12, v25);
    v36 = vsubq_f32(v10, v27);
    v37 = vsubq_f32(v15, v26);
    v38 = vsubq_f32(v13, v28);
    v39 = vsubq_f32(v16, v25);
    v40 = vsubq_f32(v14, v27);
    v41 = vaddq_f32(vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v34), v31, v31), v38, v38), vmlaq_f32(vmlaq_f32(vmulq_f32(v33, v33), v32, v32), v37, v37)), vaddq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v36, v36), v29, v29), v40, v40), vmlaq_f32(vmlaq_f32(vmulq_f32(v35, v35), v30, v30), v39, v39)));
    v41.i64[0] = vpaddq_f32(v41, v41).u64[0];
    v41.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v41.f32, *(float32x2_t *)v41.f32).f32[0]);
    *(float *)(result + 124) = (float)(v41.f32[0] * 3.0) + (float)(v41.f32[0] * 3.0);
  }
  if (*(char *)(result + 134) < 0)
  {
    v42 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v43 = (int16x8_t)vcgeq_f32(v42, v2);
    v44 = (int16x8_t)vcgeq_f32(v42, v1);
    v45 = (int16x8_t)vcgeq_f32(v42, v3);
    v46 = (int16x8_t)vcgeq_f32(v42, v4);
    *(int16x8_t *)(result + 720) = v46;
    *(int16x8_t *)(result + 736) = v45;
    *(int16x8_t *)(result + 752) = v43;
    *(int16x8_t *)(result + 768) = v44;
    v47 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(v46, v45), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(v43, v44), (int8x16_t)xmmword_20631C0C0));
    v47.i16[0] = vaddvq_s16(v47);
    *(_WORD *)(result + 784) = v47.i16[0];
    *(_BYTE *)(result + 134) = vaddlv_u8((uint8x8_t)vcnt_s8(*(int8x8_t *)v47.i8));
  }
  v48 = vzip1q_s32((int32x4_t)v5, (int32x4_t)v13);
  v49 = vzip1q_s32((int32x4_t)v6, (int32x4_t)v14);
  v50 = vzip2q_s32((int32x4_t)v5, (int32x4_t)v13);
  v51 = vzip2q_s32((int32x4_t)v6, (int32x4_t)v14);
  v52 = vzip1q_s32((int32x4_t)v10, (int32x4_t)v3);
  v53 = vzip2q_s32((int32x4_t)v9, (int32x4_t)v4);
  v54 = vzip2q_s32((int32x4_t)v10, (int32x4_t)v3);
  v55 = vzip1q_s32(v50, v53);
  v56 = vzip2q_s32(v50, v53);
  v57 = vzip2q_s32(v48, vuzp2q_s32(v48, (int32x4_t)v9));
  v57.i32[3] = v4.i32[1];
  v58 = vzip1q_s32(v48, (int32x4_t)v9);
  v58.i32[3] = v4.i32[0];
  *(int32x4_t *)(result + 432) = v55;
  *(int32x4_t *)(result + 448) = v56;
  *(int32x4_t *)(result + 400) = v58;
  *(int32x4_t *)(result + 416) = v57;
  *(int32x4_t *)(result + 496) = vzip1q_s32(v51, v54);
  *(int32x4_t *)(result + 512) = vzip2q_s32(v51, v54);
  *(int32x4_t *)(result + 464) = vzip1q_s32(v49, v52);
  *(int32x4_t *)(result + 480) = vzip2q_s32(v49, v52);
  v59 = vzip1q_s32((int32x4_t)v7, (int32x4_t)v15);
  v60 = vzip1q_s32((int32x4_t)v8, (int32x4_t)v16);
  v61 = vzip2q_s32((int32x4_t)v7, (int32x4_t)v15);
  v62 = vzip2q_s32((int32x4_t)v8, (int32x4_t)v16);
  v63 = vzip1q_s32((int32x4_t)v12, (int32x4_t)v1);
  v64 = vzip2q_s32((int32x4_t)v11, (int32x4_t)v2);
  v65 = vzip2q_s32((int32x4_t)v12, (int32x4_t)v1);
  v66 = vzip1q_s32(v61, v64);
  v67 = vzip2q_s32(v61, v64);
  v68 = vzip2q_s32(v59, vuzp2q_s32(v59, (int32x4_t)v11));
  v68.i32[3] = v2.i32[1];
  v69 = vzip1q_s32(v59, (int32x4_t)v11);
  v69.i32[3] = v2.i32[0];
  *(int32x4_t *)(result + 560) = v66;
  *(int32x4_t *)(result + 576) = v67;
  *(int32x4_t *)(result + 528) = v69;
  *(int32x4_t *)(result + 544) = v68;
  *(int32x4_t *)(result + 624) = vzip1q_s32(v62, v65);
  *(int32x4_t *)(result + 640) = vzip2q_s32(v62, v65);
  *(int32x4_t *)(result + 592) = vzip1q_s32(v60, v63);
  *(int32x4_t *)(result + 608) = vzip2q_s32(v60, v63);
  v70 = vmulq_f32(v7, v7);
  v71 = vpaddq_f32(vpaddq_f32(vaddq_f32(vaddq_f32(v5, v7), vaddq_f32(v6, v8)), vaddq_f32(vaddq_f32(v9, v11), vaddq_f32(v10, v12))), vpaddq_f32(vaddq_f32(vaddq_f32(v13, v15), vaddq_f32(v14, v16)), vaddq_f32(vaddq_f32(v4, v2), vaddq_f32(v3, v1))));
  v72 = vpaddq_f32(vpaddq_f32(vaddq_f32(vmlaq_f32(v70, v5, v5), vmlaq_f32(vmulq_f32(v8, v8), v6, v6)), vaddq_f32(vmlaq_f32(vmulq_f32(v11, v11), v9, v9), vmlaq_f32(vmulq_f32(v12, v12), v10, v10))), vpaddq_f32(vaddq_f32(vmlaq_f32(vmulq_f32(v15, v15), v13, v13), vmlaq_f32(vmulq_f32(v16, v16), v14, v14)), vaddq_f32(vmlaq_f32(vmulq_f32(v2, v2), v4, v4), vmlaq_f32(vmulq_f32(v1, v1), v3, v3))));
  v73 = vmulq_f32(v71, (float32x4_t)vdupq_n_s32(0x3D800000u));
  v74 = vmlsq_f32(v72, v73, v71);
  *(float32x4_t *)(result + 16) = v73;
  v74.i64[0] = vpaddq_f32(v74, v74).u64[0];
  *(_DWORD *)(result + 120) = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32).u32[0];
  if (*(char *)(result + 136) <= 0)
    *(_BYTE *)(result + 136) = v73.f32[3] >= 0.99988;
  return result;
}

float32x2_t SetAlphaOne_8x8_vec(uint64_t a1)
{
  uint64_t v6;
  float32x4_t *v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t *v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  uint64_t v27;
  int32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int32x4_t *v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  uint64_t v35;
  uint64_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  float *v45;
  float *v46;
  float *v47;
  float *v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  uint64_t i;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x2_t result;
  float32x4x2_t v78;
  float32x4x2_t v79;
  float32x4x2_t v80;

  if (*(_BYTE *)(a1 + 136) != 1)
  {
    *(_BYTE *)(a1 + 134) = 0;
    *(_BYTE *)(a1 + 136) = 1;
    *(_OWORD *)(a1 + 2192) = 0u;
    *(_OWORD *)(a1 + 2208) = 0u;
    *(_OWORD *)(a1 + 2224) = 0u;
    *(_OWORD *)(a1 + 2240) = 0u;
    *(_OWORD *)(a1 + 2256) = 0u;
    *(_OWORD *)(a1 + 2272) = 0u;
    *(_OWORD *)(a1 + 2288) = 0u;
    *(_OWORD *)(a1 + 2304) = 0u;
    *(_OWORD *)(a1 + 2320) = 0u;
    *(_OWORD *)(a1 + 2336) = 0u;
    *(_OWORD *)(a1 + 2352) = 0u;
    *(_OWORD *)(a1 + 2368) = 0u;
    *(_OWORD *)(a1 + 2384) = 0u;
    *(_OWORD *)(a1 + 2400) = 0u;
    *(_OWORD *)(a1 + 2416) = 0u;
    *(_OWORD *)(a1 + 2432) = 0u;
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)(a1 + 912) = _Q0;
    *(_OWORD *)(a1 + 928) = _Q0;
    *(_OWORD *)(a1 + 944) = _Q0;
    *(_OWORD *)(a1 + 960) = _Q0;
    *(_OWORD *)(a1 + 976) = _Q0;
    *(_OWORD *)(a1 + 992) = _Q0;
    *(_OWORD *)(a1 + 1008) = _Q0;
    *(_OWORD *)(a1 + 1024) = _Q0;
    *(_OWORD *)(a1 + 1040) = _Q0;
    *(_OWORD *)(a1 + 1056) = _Q0;
    *(_OWORD *)(a1 + 1072) = _Q0;
    *(_OWORD *)(a1 + 1088) = _Q0;
    *(_OWORD *)(a1 + 1104) = _Q0;
    *(_OWORD *)(a1 + 1120) = _Q0;
    *(_OWORD *)(a1 + 1136) = _Q0;
    *(_OWORD *)(a1 + 1152) = _Q0;
  }
  if (*(float *)(a1 + 124) < 0.0)
  {
    v6 = 0;
    v7 = *(float32x4_t **)(a1 + 32);
    v8 = 0uLL;
    v9 = 0uLL;
    do
    {
      v10 = (float32x4_t)xmmword_20631C430;
      if (v7)
        v10 = *v7;
      v11 = (float32x4_t *)(a1 + v6);
      v13 = *(float32x4_t *)(a1 + v6 + 144);
      v12 = *(float32x4_t *)(a1 + v6 + 160);
      v15 = *(float32x4_t *)(a1 + v6 + 400);
      v14 = *(float32x4_t *)(a1 + v6 + 416);
      v17 = *(float32x4_t *)(a1 + v6 + 656);
      v16 = *(float32x4_t *)(a1 + v6 + 672);
      v18 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v14, *(float32x2_t *)v10.f32, 1), v12, v10.f32[0]), v16, v10, 2);
      v19 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v15, *(float32x2_t *)v10.f32, 1), v13, v10.f32[0]), v17, v10, 2);
      v11[153] = v19;
      v11[154] = v18;
      v20 = vsubq_f32(v12, v18);
      v21 = vsubq_f32(v13, v19);
      v22 = vsubq_f32(v15, v19);
      v23 = vsubq_f32(v14, v18);
      v24 = vsubq_f32(v17, v19);
      v25 = vsubq_f32(v16, v18);
      v8 = vaddq_f32(v8, vmlaq_f32(vmlaq_f32(vmulq_f32(v22, v22), v21, v21), v24, v24));
      v9 = vaddq_f32(v9, vmlaq_f32(vmlaq_f32(vmulq_f32(v23, v23), v20, v20), v25, v25));
      v6 += 32;
    }
    while (v6 != 256);
    v26 = vaddq_f32(v8, v9);
    v26.i64[0] = vpaddq_f32(v26, v26).u64[0];
    v26.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)v26.f32).f32[0]);
    *(float *)(a1 + 124) = (float)(v26.f32[0] * 3.0) + (float)(v26.f32[0] * 3.0);
  }
  if (*(char *)(a1 + 134) < 0)
  {
    v27 = 0;
    v28 = 0uLL;
    v29 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v30 = 0uLL;
    do
    {
      v31 = (int32x4_t *)(a1 + v27);
      v32 = vcgeq_f32(v29, *(float32x4_t *)(a1 + v27 + 912));
      v33 = vcgeq_f32(v29, *(float32x4_t *)(a1 + v27 + 928));
      v31[138] = v33;
      v31[137] = v32;
      v30 = vsubq_s32(v30, v33);
      v28 = vsubq_s32(v28, v32);
      v27 += 32;
    }
    while (v27 != 256);
    v34 = vaddq_s32(v28, v30);
    v34.i64[0] = vpaddq_s32(v34, v34).u64[0];
    *(_BYTE *)(a1 + 134) = vpadd_s32(*(int32x2_t *)v34.i8, *(int32x2_t *)v34.i8).u8[0];
  }
  v35 = 0;
  v36 = 400;
  do
  {
    v37 = *(int32x4_t *)(a1 + v36 - 256);
    v38 = *(int32x4_t *)(a1 + v36 - 240);
    v39 = *(int32x4_t *)(a1 + v36);
    v40 = *(int32x4_t *)(a1 + v36 + 16);
    v41 = *(int32x4_t *)(a1 + v36 + 256);
    v42 = *(int32x4_t *)(a1 + v36 + 272);
    v43 = *(int32x4_t *)(a1 + v36 + 512);
    v44 = *(int32x4_t *)(a1 + v36 + 528);
    v79.val[0] = (float32x4_t)vzip1q_s32(v37, v41);
    v79.val[1] = (float32x4_t)vzip1q_s32(v39, v43);
    v45 = (float *)(a1 + v35 + 1168);
    vst2q_f32(v45, v79);
    v79.val[0] = (float32x4_t)vzip2q_s32(v38, v42);
    v80.val[0] = (float32x4_t)vzip1q_s32(v38, v42);
    v78.val[0] = (float32x4_t)vzip2q_s32(v37, v41);
    v78.val[1] = (float32x4_t)vzip2q_s32(v39, v43);
    v46 = (float *)(a1 + v35 + 1200);
    vst2q_f32(v46, v78);
    v80.val[1] = (float32x4_t)vzip1q_s32(v40, v44);
    v47 = (float *)(a1 + v35 + 1232);
    vst2q_f32(v47, v80);
    v79.val[1] = (float32x4_t)vzip2q_s32(v40, v44);
    v48 = (float *)(a1 + v35 + 1264);
    vst2q_f32(v48, v79);
    v35 += 128;
    v36 += 32;
  }
  while (v35 != 1024);
  v49 = *(float32x4_t *)(a1 + 144);
  v50 = *(float32x4_t *)(a1 + 160);
  v51 = *(float32x4_t *)(a1 + 400);
  v52 = *(float32x4_t *)(a1 + 416);
  v53 = *(float32x4_t *)(a1 + 656);
  v54 = *(float32x4_t *)(a1 + 672);
  v55 = vmulq_f32(v50, v50);
  v56 = vmulq_f32(v49, v49);
  v57 = *(float32x4_t *)(a1 + 912);
  v58 = *(float32x4_t *)(a1 + 928);
  v59 = vmulq_f32(v52, v52);
  v60 = vmulq_f32(v51, v51);
  v61 = vmulq_f32(v54, v54);
  v62 = vmulq_f32(v53, v53);
  v63 = vmulq_f32(v58, v58);
  v64 = vmulq_f32(v57, v57);
  for (i = 432; i != 656; i += 32)
  {
    v66 = *(float32x4_t *)(a1 + i - 256);
    v67 = *(float32x4_t *)(a1 + i - 240);
    v68 = *(float32x4_t *)(a1 + i);
    v69 = *(float32x4_t *)(a1 + i + 16);
    v70 = *(float32x4_t *)(a1 + i + 256);
    v71 = *(float32x4_t *)(a1 + i + 272);
    v72 = *(float32x4_t *)(a1 + i + 512);
    v73 = *(float32x4_t *)(a1 + i + 528);
    v50 = vaddq_f32(v50, v67);
    v49 = vaddq_f32(v49, v66);
    v52 = vaddq_f32(v52, v69);
    v51 = vaddq_f32(v51, v68);
    v54 = vaddq_f32(v54, v71);
    v53 = vaddq_f32(v53, v70);
    v58 = vaddq_f32(v58, v73);
    v57 = vaddq_f32(v57, v72);
    v55 = vmlaq_f32(v55, v67, v67);
    v56 = vmlaq_f32(v56, v66, v66);
    v59 = vmlaq_f32(v59, v69, v69);
    v60 = vmlaq_f32(v60, v68, v68);
    v61 = vmlaq_f32(v61, v71, v71);
    v62 = vmlaq_f32(v62, v70, v70);
    v63 = vmlaq_f32(v63, v73, v73);
    v64 = vmlaq_f32(v64, v72, v72);
  }
  v74 = vpaddq_f32(vpaddq_f32(vaddq_f32(v49, v50), vaddq_f32(v51, v52)), vpaddq_f32(vaddq_f32(v53, v54), vaddq_f32(v57, v58)));
  v75 = vmulq_f32(v74, (float32x4_t)vdupq_n_s32(0x3C800000u));
  v76 = vmlsq_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v56, v55), vaddq_f32(v60, v59)), vpaddq_f32(vaddq_f32(v62, v61), vaddq_f32(v64, v63))), v75, v74);
  *(float32x4_t *)(a1 + 16) = v75;
  v74.i64[0] = vpaddq_f32(v76, v76).u64[0];
  result = vpadd_f32(*(float32x2_t *)v74.f32, *(float32x2_t *)v74.f32);
  *(_DWORD *)(a1 + 120) = result.i32[0];
  return result;
}

float32x2_t FlattenNon_8x8_vec(uint64_t a1)
{
  int v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v4;
  uint64_t i;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint64_t v17;
  float32x4_t *v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  uint64_t v38;
  int32x4_t v39;
  float32x4_t v40;
  int32x4_t v41;
  int32x4_t *v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  uint64_t v46;
  uint64_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  float *v56;
  float *v57;
  float *v58;
  float *v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  uint64_t j;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x2_t result;
  float32x4x2_t v89;
  float32x4x2_t v90;
  float32x4x2_t v91;

  v1 = *(char *)(a1 + 136);
  if (v1 <= 0)
  {
    v2 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 0);
    v3 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a1, 1);
    v4 = (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)a1, 2);
    for (i = 400; i != 656; i += 32)
    {
      v6 = (float32x4_t *)(a1 + i);
      v7 = *(float32x4_t *)(a1 + i + 512);
      v8 = *(float32x4_t *)(a1 + i + 528);
      v9 = vmlaq_f32(v2, vsubq_f32(*(float32x4_t *)(a1 + i - 240), v2), v8);
      v6[-16] = vmlaq_f32(v2, vsubq_f32(*(float32x4_t *)(a1 + i - 256), v2), v7);
      v6[-15] = v9;
      v10 = vmlaq_f32(v3, vsubq_f32(*(float32x4_t *)(a1 + i + 16), v3), v8);
      *v6 = vmlaq_f32(v3, vsubq_f32(*(float32x4_t *)(a1 + i), v3), v7);
      v6[1] = v10;
      v11 = vmlaq_f32(v4, vsubq_f32(*(float32x4_t *)(a1 + i + 272), v4), v8);
      v6[16] = vmlaq_f32(v4, vsubq_f32(*(float32x4_t *)(a1 + i + 256), v4), v7);
      v6[17] = v11;
    }
  }
  if (v1 != 1)
  {
    *(_BYTE *)(a1 + 134) = 0;
    *(_BYTE *)(a1 + 136) = 1;
    *(_OWORD *)(a1 + 2192) = 0u;
    *(_OWORD *)(a1 + 2208) = 0u;
    *(_OWORD *)(a1 + 2224) = 0u;
    *(_OWORD *)(a1 + 2240) = 0u;
    *(_OWORD *)(a1 + 2256) = 0u;
    *(_OWORD *)(a1 + 2272) = 0u;
    *(_OWORD *)(a1 + 2288) = 0u;
    *(_OWORD *)(a1 + 2304) = 0u;
    *(_OWORD *)(a1 + 2320) = 0u;
    *(_OWORD *)(a1 + 2336) = 0u;
    *(_OWORD *)(a1 + 2352) = 0u;
    *(_OWORD *)(a1 + 2368) = 0u;
    *(_OWORD *)(a1 + 2384) = 0u;
    *(_OWORD *)(a1 + 2400) = 0u;
    *(_OWORD *)(a1 + 2416) = 0u;
    *(_OWORD *)(a1 + 2432) = 0u;
    __asm { FMOV            V0.4S, #1.0 }
    *(_OWORD *)(a1 + 912) = _Q0;
    *(_OWORD *)(a1 + 928) = _Q0;
    *(_OWORD *)(a1 + 944) = _Q0;
    *(_OWORD *)(a1 + 960) = _Q0;
    *(_OWORD *)(a1 + 976) = _Q0;
    *(_OWORD *)(a1 + 992) = _Q0;
    *(_OWORD *)(a1 + 1008) = _Q0;
    *(_OWORD *)(a1 + 1024) = _Q0;
    *(_OWORD *)(a1 + 1040) = _Q0;
    *(_OWORD *)(a1 + 1056) = _Q0;
    *(_OWORD *)(a1 + 1072) = _Q0;
    *(_OWORD *)(a1 + 1088) = _Q0;
    *(_OWORD *)(a1 + 1104) = _Q0;
    *(_OWORD *)(a1 + 1120) = _Q0;
    *(_OWORD *)(a1 + 1136) = _Q0;
    *(_OWORD *)(a1 + 1152) = _Q0;
  }
  if (*(float *)(a1 + 124) < 0.0)
  {
    v17 = 0;
    v18 = *(float32x4_t **)(a1 + 32);
    v19 = 0uLL;
    v20 = 0uLL;
    do
    {
      v21 = (float32x4_t)xmmword_20631C430;
      if (v18)
        v21 = *v18;
      v22 = (float32x4_t *)(a1 + v17);
      v24 = *(float32x4_t *)(a1 + v17 + 144);
      v23 = *(float32x4_t *)(a1 + v17 + 160);
      v26 = *(float32x4_t *)(a1 + v17 + 400);
      v25 = *(float32x4_t *)(a1 + v17 + 416);
      v28 = *(float32x4_t *)(a1 + v17 + 656);
      v27 = *(float32x4_t *)(a1 + v17 + 672);
      v29 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v25, *(float32x2_t *)v21.f32, 1), v23, v21.f32[0]), v27, v21, 2);
      v30 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v26, *(float32x2_t *)v21.f32, 1), v24, v21.f32[0]), v28, v21, 2);
      v22[153] = v30;
      v22[154] = v29;
      v31 = vsubq_f32(v23, v29);
      v32 = vsubq_f32(v24, v30);
      v33 = vsubq_f32(v26, v30);
      v34 = vsubq_f32(v25, v29);
      v35 = vsubq_f32(v28, v30);
      v36 = vsubq_f32(v27, v29);
      v19 = vaddq_f32(v19, vmlaq_f32(vmlaq_f32(vmulq_f32(v33, v33), v32, v32), v35, v35));
      v20 = vaddq_f32(v20, vmlaq_f32(vmlaq_f32(vmulq_f32(v34, v34), v31, v31), v36, v36));
      v17 += 32;
    }
    while (v17 != 256);
    v37 = vaddq_f32(v19, v20);
    v37.i64[0] = vpaddq_f32(v37, v37).u64[0];
    v37.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32).f32[0]);
    *(float *)(a1 + 124) = (float)(v37.f32[0] * 3.0) + (float)(v37.f32[0] * 3.0);
  }
  if (*(char *)(a1 + 134) < 0)
  {
    v38 = 0;
    v39 = 0uLL;
    v40 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v41 = 0uLL;
    do
    {
      v42 = (int32x4_t *)(a1 + v38);
      v43 = vcgeq_f32(v40, *(float32x4_t *)(a1 + v38 + 912));
      v44 = vcgeq_f32(v40, *(float32x4_t *)(a1 + v38 + 928));
      v42[138] = v44;
      v42[137] = v43;
      v41 = vsubq_s32(v41, v44);
      v39 = vsubq_s32(v39, v43);
      v38 += 32;
    }
    while (v38 != 256);
    v45 = vaddq_s32(v39, v41);
    v45.i64[0] = vpaddq_s32(v45, v45).u64[0];
    *(_BYTE *)(a1 + 134) = vpadd_s32(*(int32x2_t *)v45.i8, *(int32x2_t *)v45.i8).u8[0];
  }
  v46 = 0;
  v47 = 400;
  do
  {
    v48 = *(int32x4_t *)(a1 + v47 - 256);
    v49 = *(int32x4_t *)(a1 + v47 - 240);
    v50 = *(int32x4_t *)(a1 + v47);
    v51 = *(int32x4_t *)(a1 + v47 + 16);
    v52 = *(int32x4_t *)(a1 + v47 + 256);
    v53 = *(int32x4_t *)(a1 + v47 + 272);
    v54 = *(int32x4_t *)(a1 + v47 + 512);
    v55 = *(int32x4_t *)(a1 + v47 + 528);
    v90.val[0] = (float32x4_t)vzip1q_s32(v48, v52);
    v90.val[1] = (float32x4_t)vzip1q_s32(v50, v54);
    v56 = (float *)(a1 + v46 + 1168);
    vst2q_f32(v56, v90);
    v90.val[0] = (float32x4_t)vzip2q_s32(v49, v53);
    v91.val[0] = (float32x4_t)vzip1q_s32(v49, v53);
    v89.val[0] = (float32x4_t)vzip2q_s32(v48, v52);
    v89.val[1] = (float32x4_t)vzip2q_s32(v50, v54);
    v57 = (float *)(a1 + v46 + 1200);
    vst2q_f32(v57, v89);
    v91.val[1] = (float32x4_t)vzip1q_s32(v51, v55);
    v58 = (float *)(a1 + v46 + 1232);
    vst2q_f32(v58, v91);
    v90.val[1] = (float32x4_t)vzip2q_s32(v51, v55);
    v59 = (float *)(a1 + v46 + 1264);
    vst2q_f32(v59, v90);
    v46 += 128;
    v47 += 32;
  }
  while (v46 != 1024);
  v60 = *(float32x4_t *)(a1 + 144);
  v61 = *(float32x4_t *)(a1 + 160);
  v62 = *(float32x4_t *)(a1 + 400);
  v63 = *(float32x4_t *)(a1 + 416);
  v64 = *(float32x4_t *)(a1 + 656);
  v65 = *(float32x4_t *)(a1 + 672);
  v66 = vmulq_f32(v61, v61);
  v67 = vmulq_f32(v60, v60);
  v68 = *(float32x4_t *)(a1 + 912);
  v69 = *(float32x4_t *)(a1 + 928);
  v70 = vmulq_f32(v63, v63);
  v71 = vmulq_f32(v62, v62);
  v72 = vmulq_f32(v65, v65);
  v73 = vmulq_f32(v64, v64);
  v74 = vmulq_f32(v69, v69);
  v75 = vmulq_f32(v68, v68);
  for (j = 432; j != 656; j += 32)
  {
    v77 = *(float32x4_t *)(a1 + j - 256);
    v78 = *(float32x4_t *)(a1 + j - 240);
    v79 = *(float32x4_t *)(a1 + j);
    v80 = *(float32x4_t *)(a1 + j + 16);
    v81 = *(float32x4_t *)(a1 + j + 256);
    v82 = *(float32x4_t *)(a1 + j + 272);
    v83 = *(float32x4_t *)(a1 + j + 512);
    v84 = *(float32x4_t *)(a1 + j + 528);
    v61 = vaddq_f32(v61, v78);
    v60 = vaddq_f32(v60, v77);
    v63 = vaddq_f32(v63, v80);
    v62 = vaddq_f32(v62, v79);
    v65 = vaddq_f32(v65, v82);
    v64 = vaddq_f32(v64, v81);
    v69 = vaddq_f32(v69, v84);
    v68 = vaddq_f32(v68, v83);
    v66 = vmlaq_f32(v66, v78, v78);
    v67 = vmlaq_f32(v67, v77, v77);
    v70 = vmlaq_f32(v70, v80, v80);
    v71 = vmlaq_f32(v71, v79, v79);
    v72 = vmlaq_f32(v72, v82, v82);
    v73 = vmlaq_f32(v73, v81, v81);
    v74 = vmlaq_f32(v74, v84, v84);
    v75 = vmlaq_f32(v75, v83, v83);
  }
  v85 = vpaddq_f32(vpaddq_f32(vaddq_f32(v60, v61), vaddq_f32(v62, v63)), vpaddq_f32(vaddq_f32(v64, v65), vaddq_f32(v68, v69)));
  v86 = vmulq_f32(v85, (float32x4_t)vdupq_n_s32(0x3C800000u));
  v87 = vmlsq_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v67, v66), vaddq_f32(v71, v70)), vpaddq_f32(vaddq_f32(v73, v72), vaddq_f32(v75, v74))), v86, v85);
  *(float32x4_t *)(a1 + 16) = v86;
  v85.i64[0] = vpaddq_f32(v87, v87).u64[0];
  result = vpadd_f32(*(float32x2_t *)v85.f32, *(float32x2_t *)v85.f32);
  *(_DWORD *)(a1 + 120) = result.i32[0];
  return result;
}

uint64_t FlattenPre_8x8_vec(uint64_t result)
{
  int v1;
  uint64_t v2;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  int32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t *v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float *v59;
  float *v60;
  float *v61;
  float *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t i;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4x2_t v91;
  float32x4x2_t v92;
  float32x4x2_t v93;

  v1 = *(char *)(result + 136);
  if (v1 <= 0)
  {
    v2 = 400;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      v8 = (float32x4_t *)(result + v2);
      v9 = *(float32x4_t *)(result + v2 + 512);
      v10 = *(float32x4_t *)(result + v2 + 528);
      if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vceqq_f32(v9, _Q0), (int8x16_t)vceqq_f32(v10, _Q0))) & 0x80000000) == 0)
      {
        v11 = vminnmq_f32(*v8, v9);
        v12 = vminnmq_f32(v8[1], v10);
        v13 = vminnmq_f32(v8[16], v9);
        v14 = vminnmq_f32(v8[17], v10);
        v15 = *(float32x4_t *)result;
        v16 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)result, 0);
        v17 = vmlsq_lane_f32(vaddq_f32(vminnmq_f32(v8[-15], v10), v16), v10, *(float32x2_t *)result, 0);
        v8[-16] = vmlsq_lane_f32(vaddq_f32(vminnmq_f32(v8[-16], v9), v16), v9, *(float32x2_t *)result, 0);
        v8[-15] = v17;
        v18 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1);
        *v8 = vmlsq_lane_f32(vaddq_f32(v11, v18), v9, *(float32x2_t *)v15.f32, 1);
        v8[1] = vmlsq_lane_f32(vaddq_f32(v12, v18), v10, *(float32x2_t *)v15.f32, 1);
        v19 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2);
        v8[16] = vmlsq_laneq_f32(vaddq_f32(v13, v19), v9, v15, 2);
        v8[17] = vmlsq_laneq_f32(vaddq_f32(v14, v19), v10, v15, 2);
      }
      v2 += 32;
    }
    while (v2 != 656);
    *(_BYTE *)(result + 134) = 0;
    *(_BYTE *)(result + 136) = 1;
    *(_OWORD *)(result + 2192) = 0u;
    *(_OWORD *)(result + 2208) = 0u;
    *(_OWORD *)(result + 2224) = 0u;
    *(_OWORD *)(result + 2240) = 0u;
    *(_OWORD *)(result + 2256) = 0u;
    *(_OWORD *)(result + 2272) = 0u;
    *(_OWORD *)(result + 2288) = 0u;
    *(_OWORD *)(result + 2304) = 0u;
    *(_OWORD *)(result + 2320) = 0u;
    *(_OWORD *)(result + 2336) = 0u;
    *(_OWORD *)(result + 2352) = 0u;
    *(_OWORD *)(result + 2368) = 0u;
    *(_OWORD *)(result + 2384) = 0u;
    *(_OWORD *)(result + 2400) = 0u;
    *(_OWORD *)(result + 2416) = 0u;
    *(_OWORD *)(result + 2432) = 0u;
    *(float32x4_t *)(result + 912) = _Q0;
    *(float32x4_t *)(result + 928) = _Q0;
    *(float32x4_t *)(result + 944) = _Q0;
    *(float32x4_t *)(result + 960) = _Q0;
    *(float32x4_t *)(result + 976) = _Q0;
    *(float32x4_t *)(result + 992) = _Q0;
    *(float32x4_t *)(result + 1008) = _Q0;
    *(float32x4_t *)(result + 1024) = _Q0;
    *(float32x4_t *)(result + 1040) = _Q0;
    *(float32x4_t *)(result + 1056) = _Q0;
    *(float32x4_t *)(result + 1072) = _Q0;
    *(float32x4_t *)(result + 1088) = _Q0;
    *(float32x4_t *)(result + 1104) = _Q0;
    *(float32x4_t *)(result + 1120) = _Q0;
    *(float32x4_t *)(result + 1136) = _Q0;
    *(float32x4_t *)(result + 1152) = _Q0;
  }
  if (*(float *)(result + 124) < 0.0)
  {
    v20 = 0;
    v21 = *(float32x4_t **)(result + 32);
    v22 = 0uLL;
    v23 = 0uLL;
    do
    {
      v24 = (float32x4_t)xmmword_20631C430;
      if (v21)
        v24 = *v21;
      v25 = (float32x4_t *)(result + v20);
      v27 = *(float32x4_t *)(result + v20 + 144);
      v26 = *(float32x4_t *)(result + v20 + 160);
      v29 = *(float32x4_t *)(result + v20 + 400);
      v28 = *(float32x4_t *)(result + v20 + 416);
      v31 = *(float32x4_t *)(result + v20 + 656);
      v30 = *(float32x4_t *)(result + v20 + 672);
      v32 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v28, *(float32x2_t *)v24.f32, 1), v26, v24.f32[0]), v30, v24, 2);
      v33 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v29, *(float32x2_t *)v24.f32, 1), v27, v24.f32[0]), v31, v24, 2);
      v25[153] = v33;
      v25[154] = v32;
      v34 = vsubq_f32(v26, v32);
      v35 = vsubq_f32(v27, v33);
      v36 = vsubq_f32(v29, v33);
      v37 = vsubq_f32(v28, v32);
      v38 = vsubq_f32(v31, v33);
      v39 = vsubq_f32(v30, v32);
      v22 = vaddq_f32(v22, vmlaq_f32(vmlaq_f32(vmulq_f32(v36, v36), v35, v35), v38, v38));
      v23 = vaddq_f32(v23, vmlaq_f32(vmlaq_f32(vmulq_f32(v37, v37), v34, v34), v39, v39));
      v20 += 32;
    }
    while (v20 != 256);
    v40 = vaddq_f32(v22, v23);
    v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
    v40.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32).f32[0]);
    *(float *)(result + 124) = (float)(v40.f32[0] * 3.0) + (float)(v40.f32[0] * 3.0);
  }
  if (*(char *)(result + 134) < 0)
  {
    v41 = 0;
    v42 = 0uLL;
    v43 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v44 = 0uLL;
    do
    {
      v45 = (int32x4_t *)(result + v41);
      v46 = vcgeq_f32(v43, *(float32x4_t *)(result + v41 + 912));
      v47 = vcgeq_f32(v43, *(float32x4_t *)(result + v41 + 928));
      v45[138] = v47;
      v45[137] = v46;
      v44 = vsubq_s32(v44, v47);
      v42 = vsubq_s32(v42, v46);
      v41 += 32;
    }
    while (v41 != 256);
    v48 = vaddq_s32(v42, v44);
    v48.i64[0] = vpaddq_s32(v48, v48).u64[0];
    *(_BYTE *)(result + 134) = vpadd_s32(*(int32x2_t *)v48.i8, *(int32x2_t *)v48.i8).u8[0];
  }
  v49 = 0;
  v50 = 400;
  do
  {
    v51 = *(int32x4_t *)(result + v50 - 256);
    v52 = *(int32x4_t *)(result + v50 - 240);
    v53 = *(int32x4_t *)(result + v50);
    v54 = *(int32x4_t *)(result + v50 + 16);
    v55 = *(int32x4_t *)(result + v50 + 256);
    v56 = *(int32x4_t *)(result + v50 + 272);
    v57 = *(int32x4_t *)(result + v50 + 512);
    v58 = *(int32x4_t *)(result + v50 + 528);
    v92.val[0] = (float32x4_t)vzip1q_s32(v51, v55);
    v92.val[1] = (float32x4_t)vzip1q_s32(v53, v57);
    v59 = (float *)(result + v49 + 1168);
    vst2q_f32(v59, v92);
    v92.val[0] = (float32x4_t)vzip2q_s32(v52, v56);
    v93.val[0] = (float32x4_t)vzip1q_s32(v52, v56);
    v91.val[0] = (float32x4_t)vzip2q_s32(v51, v55);
    v91.val[1] = (float32x4_t)vzip2q_s32(v53, v57);
    v60 = (float *)(result + v49 + 1200);
    vst2q_f32(v60, v91);
    v93.val[1] = (float32x4_t)vzip1q_s32(v54, v58);
    v61 = (float *)(result + v49 + 1232);
    vst2q_f32(v61, v93);
    v92.val[1] = (float32x4_t)vzip2q_s32(v54, v58);
    v62 = (float *)(result + v49 + 1264);
    vst2q_f32(v62, v92);
    v49 += 128;
    v50 += 32;
  }
  while (v49 != 1024);
  v63 = *(float32x4_t *)(result + 144);
  v64 = *(float32x4_t *)(result + 160);
  v65 = *(float32x4_t *)(result + 400);
  v66 = *(float32x4_t *)(result + 416);
  v67 = *(float32x4_t *)(result + 656);
  v68 = *(float32x4_t *)(result + 672);
  v69 = vmulq_f32(v64, v64);
  v70 = vmulq_f32(v63, v63);
  v71 = *(float32x4_t *)(result + 912);
  v72 = *(float32x4_t *)(result + 928);
  v73 = vmulq_f32(v66, v66);
  v74 = vmulq_f32(v65, v65);
  v75 = vmulq_f32(v68, v68);
  v76 = vmulq_f32(v67, v67);
  v77 = vmulq_f32(v72, v72);
  v78 = vmulq_f32(v71, v71);
  for (i = 432; i != 656; i += 32)
  {
    v80 = *(float32x4_t *)(result + i - 256);
    v81 = *(float32x4_t *)(result + i - 240);
    v82 = *(float32x4_t *)(result + i);
    v83 = *(float32x4_t *)(result + i + 16);
    v84 = *(float32x4_t *)(result + i + 256);
    v85 = *(float32x4_t *)(result + i + 272);
    v86 = *(float32x4_t *)(result + i + 512);
    v87 = *(float32x4_t *)(result + i + 528);
    v64 = vaddq_f32(v64, v81);
    v63 = vaddq_f32(v63, v80);
    v66 = vaddq_f32(v66, v83);
    v65 = vaddq_f32(v65, v82);
    v68 = vaddq_f32(v68, v85);
    v67 = vaddq_f32(v67, v84);
    v72 = vaddq_f32(v72, v87);
    v71 = vaddq_f32(v71, v86);
    v69 = vmlaq_f32(v69, v81, v81);
    v70 = vmlaq_f32(v70, v80, v80);
    v73 = vmlaq_f32(v73, v83, v83);
    v74 = vmlaq_f32(v74, v82, v82);
    v75 = vmlaq_f32(v75, v85, v85);
    v76 = vmlaq_f32(v76, v84, v84);
    v77 = vmlaq_f32(v77, v87, v87);
    v78 = vmlaq_f32(v78, v86, v86);
  }
  v88 = vpaddq_f32(vpaddq_f32(vaddq_f32(v63, v64), vaddq_f32(v65, v66)), vpaddq_f32(vaddq_f32(v67, v68), vaddq_f32(v71, v72)));
  v89 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3C800000u));
  v90 = vmlsq_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v70, v69), vaddq_f32(v74, v73)), vpaddq_f32(vaddq_f32(v76, v75), vaddq_f32(v78, v77))), v89, v88);
  *(float32x4_t *)(result + 16) = v89;
  v88.i64[0] = vpaddq_f32(v90, v90).u64[0];
  *(_DWORD *)(result + 120) = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).u32[0];
  return result;
}

float32x4_t *Premultiply_8x8_vec(float32x4_t *result)
{
  int v1;
  uint64_t v2;
  float32x4_t *v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  uint64_t v14;
  float32x4_t *v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t *v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  uint64_t v35;
  int32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  int32x4_t *v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  uint64_t v43;
  uint64_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  float *f32;
  float *v54;
  float *v55;
  float *v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  uint64_t i;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4x2_t v85;
  float32x4x2_t v86;
  float32x4x2_t v87;

  v1 = result[8].i8[8];
  if (v1 <= 0)
  {
    v2 = 25;
    __asm { FMOV            V0.4S, #1.0 }
    do
    {
      v8 = &result[v2];
      v9 = result[v2 + 32];
      v10 = result[v2 + 33];
      v11 = vminnmq_f32(vmulq_f32(result[v2 - 15], v10), _Q0);
      v8[-16] = vminnmq_f32(vmulq_f32(result[v2 - 16], v9), _Q0);
      v8[-15] = v11;
      v12 = vminnmq_f32(vmulq_f32(v10, result[v2 + 1]), _Q0);
      *v8 = vminnmq_f32(vmulq_f32(v9, result[v2]), _Q0);
      v8[1] = v12;
      v13 = vminnmq_f32(vmulq_f32(v10, result[v2 + 17]), _Q0);
      v8[16] = vminnmq_f32(vmulq_f32(v9, result[v2 + 16]), _Q0);
      v8[17] = v13;
      v2 += 2;
    }
    while (v2 != 41);
  }
  if (result[7].f32[3] < 0.0)
  {
    v14 = 0;
    v15 = (float32x4_t *)result[2].i64[0];
    v16 = 0uLL;
    v17 = 0uLL;
    do
    {
      v18 = (float32x4_t)xmmword_20631C430;
      if (v15)
        v18 = *v15;
      v19 = &result[v14];
      v21 = result[v14 + 9];
      v20 = result[v14 + 10];
      v23 = result[v14 + 25];
      v22 = result[v14 + 26];
      v25 = result[v14 + 41];
      v24 = result[v14 + 42];
      v26 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v22, *(float32x2_t *)v18.f32, 1), v20, v18.f32[0]), v24, v18, 2);
      v27 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v23, *(float32x2_t *)v18.f32, 1), v21, v18.f32[0]), v25, v18, 2);
      v19[153] = v27;
      v19[154] = v26;
      v28 = vsubq_f32(v20, v26);
      v29 = vsubq_f32(v21, v27);
      v30 = vsubq_f32(v23, v27);
      v31 = vsubq_f32(v22, v26);
      v32 = vsubq_f32(v25, v27);
      v33 = vsubq_f32(v24, v26);
      v16 = vaddq_f32(v16, vmlaq_f32(vmlaq_f32(vmulq_f32(v30, v30), v29, v29), v32, v32));
      v17 = vaddq_f32(v17, vmlaq_f32(vmlaq_f32(vmulq_f32(v31, v31), v28, v28), v33, v33));
      v14 += 2;
    }
    while (v14 != 16);
    v34 = vaddq_f32(v16, v17);
    v34.i64[0] = vpaddq_f32(v34, v34).u64[0];
    v34.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v34.f32, *(float32x2_t *)v34.f32).f32[0]);
    result[7].f32[3] = (float)(v34.f32[0] * 3.0) + (float)(v34.f32[0] * 3.0);
  }
  if (result[8].i8[6] < 0)
  {
    v35 = 0;
    v36 = 0uLL;
    v37 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v38 = 0uLL;
    do
    {
      v39 = (int32x4_t *)&result[v35];
      v40 = vcgeq_f32(v37, result[v35 + 57]);
      v41 = vcgeq_f32(v37, result[v35 + 58]);
      v39[138] = v41;
      v39[137] = v40;
      v38 = vsubq_s32(v38, v41);
      v36 = vsubq_s32(v36, v40);
      v35 += 2;
    }
    while (v35 != 16);
    v42 = vaddq_s32(v36, v38);
    v42.i64[0] = vpaddq_s32(v42, v42).u64[0];
    result[8].i8[6] = vpadd_s32(*(int32x2_t *)v42.i8, *(int32x2_t *)v42.i8).u8[0];
  }
  v43 = 0;
  v44 = 25;
  do
  {
    v45 = (int32x4_t)result[v44 - 16];
    v46 = (int32x4_t)result[v44 - 15];
    v47 = (int32x4_t)result[v44];
    v48 = (int32x4_t)result[v44 + 1];
    v49 = (int32x4_t)result[v44 + 16];
    v50 = (int32x4_t)result[v44 + 17];
    v51 = (int32x4_t)result[v44 + 32];
    v52 = (int32x4_t)result[v44 + 33];
    v86.val[0] = (float32x4_t)vzip1q_s32(v45, v49);
    v86.val[1] = (float32x4_t)vzip1q_s32(v47, v51);
    f32 = result[v43 + 73].f32;
    vst2q_f32(f32, v86);
    v86.val[0] = (float32x4_t)vzip2q_s32(v46, v50);
    v87.val[0] = (float32x4_t)vzip1q_s32(v46, v50);
    v85.val[0] = (float32x4_t)vzip2q_s32(v45, v49);
    v85.val[1] = (float32x4_t)vzip2q_s32(v47, v51);
    v54 = result[v43 + 75].f32;
    vst2q_f32(v54, v85);
    v87.val[1] = (float32x4_t)vzip1q_s32(v48, v52);
    v55 = result[v43 + 77].f32;
    vst2q_f32(v55, v87);
    v86.val[1] = (float32x4_t)vzip2q_s32(v48, v52);
    v56 = result[v43 + 79].f32;
    vst2q_f32(v56, v86);
    v43 += 8;
    v44 += 2;
  }
  while (v43 != 64);
  v57 = result[9];
  v58 = result[10];
  v59 = result[25];
  v60 = result[26];
  v61 = result[41];
  v62 = result[42];
  v63 = vmulq_f32(v58, v58);
  v64 = vmulq_f32(v57, v57);
  v65 = result[57];
  v66 = result[58];
  v67 = vmulq_f32(v60, v60);
  v68 = vmulq_f32(v59, v59);
  v69 = vmulq_f32(v62, v62);
  v70 = vmulq_f32(v61, v61);
  v71 = vmulq_f32(v66, v66);
  v72 = vmulq_f32(v65, v65);
  for (i = 27; i != 41; i += 2)
  {
    v74 = result[i - 16];
    v75 = result[i - 15];
    v76 = result[i];
    v77 = result[i + 1];
    v78 = result[i + 16];
    v79 = result[i + 17];
    v80 = result[i + 32];
    v81 = result[i + 33];
    v58 = vaddq_f32(v58, v75);
    v57 = vaddq_f32(v57, v74);
    v60 = vaddq_f32(v60, v77);
    v59 = vaddq_f32(v59, v76);
    v62 = vaddq_f32(v62, v79);
    v61 = vaddq_f32(v61, v78);
    v66 = vaddq_f32(v66, v81);
    v65 = vaddq_f32(v65, v80);
    v63 = vmlaq_f32(v63, v75, v75);
    v64 = vmlaq_f32(v64, v74, v74);
    v67 = vmlaq_f32(v67, v77, v77);
    v68 = vmlaq_f32(v68, v76, v76);
    v69 = vmlaq_f32(v69, v79, v79);
    v70 = vmlaq_f32(v70, v78, v78);
    v71 = vmlaq_f32(v71, v81, v81);
    v72 = vmlaq_f32(v72, v80, v80);
  }
  v82 = vpaddq_f32(vpaddq_f32(vaddq_f32(v57, v58), vaddq_f32(v59, v60)), vpaddq_f32(vaddq_f32(v61, v62), vaddq_f32(v65, v66)));
  v83 = vmulq_f32(v82, (float32x4_t)vdupq_n_s32(0x3C800000u));
  v84 = vmlsq_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v64, v63), vaddq_f32(v68, v67)), vpaddq_f32(vaddq_f32(v70, v69), vaddq_f32(v72, v71))), v83, v82);
  result[1] = v83;
  v82.i64[0] = vpaddq_f32(v84, v84).u64[0];
  result[7].i32[2] = vpadd_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32).u32[0];
  if (v1 < 1)
    result[8].i8[8] = v83.f32[3] >= 0.99997;
  return result;
}

float32x4_t *Unpremultiply_8x8_vec(float32x4_t *result)
{
  int v1;
  uint64_t v2;
  float32x4_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  uint64_t v20;
  float32x4_t *v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t *v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float32x4_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  float32x4_t v35;
  float32x4_t v36;
  float32x4_t v37;
  float32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  uint64_t v41;
  int32x4_t v42;
  float32x4_t v43;
  int32x4_t v44;
  int32x4_t *v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  uint64_t v49;
  uint64_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int32x4_t v55;
  int32x4_t v56;
  int32x4_t v57;
  int32x4_t v58;
  float *f32;
  float *v60;
  float *v61;
  float *v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  uint64_t i;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4x2_t v91;
  float32x4x2_t v92;
  float32x4x2_t v93;

  v1 = result[8].i8[8];
  if (v1 <= 0)
  {
    v2 = 25;
    __asm { FMOV            V0.4S, #1.0 }
    v8 = (float32x4_t)vdupq_n_s32(0x21800000u);
    do
    {
      v9 = &result[v2];
      v11 = result[v2 + 32];
      v10 = result[v2 + 33];
      v12 = vminnmq_f32(result[v2 - 16], v11);
      v13 = vminnmq_f32(result[v2 - 15], v10);
      v14 = vminnmq_f32(result[v2], v11);
      v15 = vminnmq_f32(result[v2 + 1], v10);
      v16 = vminnmq_f32(result[v2 + 16], v11);
      v17 = vminnmq_f32(result[v2 + 17], v10);
      if ((vmaxvq_u32((uint32x4_t)vornq_s8(vmvnq_s8((int8x16_t)vceqzq_f32(v11)), (int8x16_t)vceqzq_f32(v10))) & 0x80000000) != 0
        && (vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vceqq_f32(v11, _Q0), (int8x16_t)vceqq_f32(v10, _Q0))) & 0x80000000) == 0)
      {
        v11 = (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v8, vabsq_f32(v11)), (int8x16_t)_Q0, (int8x16_t)v11);
        v10 = (float32x4_t)vbslq_s8((int8x16_t)vcgeq_f32(v8, vabsq_f32(v10)), (int8x16_t)_Q0, (int8x16_t)v10);
        v18 = vdivq_f32(_Q0, v10);
        v19 = vdivq_f32(_Q0, v11);
        v12 = vmulq_f32(v12, v19);
        v13 = vmulq_f32(v13, v18);
        v14 = vmulq_f32(v14, v19);
        v15 = vmulq_f32(v15, v18);
        v16 = vmulq_f32(v19, v16);
        v17 = vmulq_f32(v18, v17);
      }
      v9[-16] = v12;
      v9[-15] = v13;
      *v9 = v14;
      v9[1] = v15;
      v9[16] = v16;
      v9[17] = v17;
      v2 += 2;
      v9[32] = v11;
      v9[33] = v10;
    }
    while (v2 != 41);
  }
  if (result[7].f32[3] < 0.0)
  {
    v20 = 0;
    v21 = (float32x4_t *)result[2].i64[0];
    v22 = 0uLL;
    v23 = 0uLL;
    do
    {
      v24 = (float32x4_t)xmmword_20631C430;
      if (v21)
        v24 = *v21;
      v25 = &result[v20];
      v27 = result[v20 + 9];
      v26 = result[v20 + 10];
      v29 = result[v20 + 25];
      v28 = result[v20 + 26];
      v31 = result[v20 + 41];
      v30 = result[v20 + 42];
      v32 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v28, *(float32x2_t *)v24.f32, 1), v26, v24.f32[0]), v30, v24, 2);
      v33 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v29, *(float32x2_t *)v24.f32, 1), v27, v24.f32[0]), v31, v24, 2);
      v25[153] = v33;
      v25[154] = v32;
      v34 = vsubq_f32(v26, v32);
      v35 = vsubq_f32(v27, v33);
      v36 = vsubq_f32(v29, v33);
      v37 = vsubq_f32(v28, v32);
      v38 = vsubq_f32(v31, v33);
      v39 = vsubq_f32(v30, v32);
      v22 = vaddq_f32(v22, vmlaq_f32(vmlaq_f32(vmulq_f32(v36, v36), v35, v35), v38, v38));
      v23 = vaddq_f32(v23, vmlaq_f32(vmlaq_f32(vmulq_f32(v37, v37), v34, v34), v39, v39));
      v20 += 2;
    }
    while (v20 != 16);
    v40 = vaddq_f32(v22, v23);
    v40.i64[0] = vpaddq_f32(v40, v40).u64[0];
    v40.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v40.f32, *(float32x2_t *)v40.f32).f32[0]);
    result[7].f32[3] = (float)(v40.f32[0] * 3.0) + (float)(v40.f32[0] * 3.0);
  }
  if (result[8].i8[6] < 0)
  {
    v41 = 0;
    v42 = 0uLL;
    v43 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v44 = 0uLL;
    do
    {
      v45 = (int32x4_t *)&result[v41];
      v46 = vcgeq_f32(v43, result[v41 + 57]);
      v47 = vcgeq_f32(v43, result[v41 + 58]);
      v45[138] = v47;
      v45[137] = v46;
      v44 = vsubq_s32(v44, v47);
      v42 = vsubq_s32(v42, v46);
      v41 += 2;
    }
    while (v41 != 16);
    v48 = vaddq_s32(v42, v44);
    v48.i64[0] = vpaddq_s32(v48, v48).u64[0];
    result[8].i8[6] = vpadd_s32(*(int32x2_t *)v48.i8, *(int32x2_t *)v48.i8).u8[0];
  }
  v49 = 0;
  v50 = 25;
  do
  {
    v51 = (int32x4_t)result[v50 - 16];
    v52 = (int32x4_t)result[v50 - 15];
    v53 = (int32x4_t)result[v50];
    v54 = (int32x4_t)result[v50 + 1];
    v55 = (int32x4_t)result[v50 + 16];
    v56 = (int32x4_t)result[v50 + 17];
    v57 = (int32x4_t)result[v50 + 32];
    v58 = (int32x4_t)result[v50 + 33];
    v92.val[0] = (float32x4_t)vzip1q_s32(v51, v55);
    v92.val[1] = (float32x4_t)vzip1q_s32(v53, v57);
    f32 = result[v49 + 73].f32;
    vst2q_f32(f32, v92);
    v92.val[0] = (float32x4_t)vzip2q_s32(v52, v56);
    v93.val[0] = (float32x4_t)vzip1q_s32(v52, v56);
    v91.val[0] = (float32x4_t)vzip2q_s32(v51, v55);
    v91.val[1] = (float32x4_t)vzip2q_s32(v53, v57);
    v60 = result[v49 + 75].f32;
    vst2q_f32(v60, v91);
    v93.val[1] = (float32x4_t)vzip1q_s32(v54, v58);
    v61 = result[v49 + 77].f32;
    vst2q_f32(v61, v93);
    v92.val[1] = (float32x4_t)vzip2q_s32(v54, v58);
    v62 = result[v49 + 79].f32;
    vst2q_f32(v62, v92);
    v49 += 8;
    v50 += 2;
  }
  while (v49 != 64);
  v63 = result[9];
  v64 = result[10];
  v65 = result[25];
  v66 = result[26];
  v67 = result[41];
  v68 = result[42];
  v69 = vmulq_f32(v64, v64);
  v70 = vmulq_f32(v63, v63);
  v71 = result[57];
  v72 = result[58];
  v73 = vmulq_f32(v66, v66);
  v74 = vmulq_f32(v65, v65);
  v75 = vmulq_f32(v68, v68);
  v76 = vmulq_f32(v67, v67);
  v77 = vmulq_f32(v72, v72);
  v78 = vmulq_f32(v71, v71);
  for (i = 27; i != 41; i += 2)
  {
    v80 = result[i - 16];
    v81 = result[i - 15];
    v82 = result[i];
    v83 = result[i + 1];
    v84 = result[i + 16];
    v85 = result[i + 17];
    v86 = result[i + 32];
    v87 = result[i + 33];
    v64 = vaddq_f32(v64, v81);
    v63 = vaddq_f32(v63, v80);
    v66 = vaddq_f32(v66, v83);
    v65 = vaddq_f32(v65, v82);
    v68 = vaddq_f32(v68, v85);
    v67 = vaddq_f32(v67, v84);
    v72 = vaddq_f32(v72, v87);
    v71 = vaddq_f32(v71, v86);
    v69 = vmlaq_f32(v69, v81, v81);
    v70 = vmlaq_f32(v70, v80, v80);
    v73 = vmlaq_f32(v73, v83, v83);
    v74 = vmlaq_f32(v74, v82, v82);
    v75 = vmlaq_f32(v75, v85, v85);
    v76 = vmlaq_f32(v76, v84, v84);
    v77 = vmlaq_f32(v77, v87, v87);
    v78 = vmlaq_f32(v78, v86, v86);
  }
  v88 = vpaddq_f32(vpaddq_f32(vaddq_f32(v63, v64), vaddq_f32(v65, v66)), vpaddq_f32(vaddq_f32(v67, v68), vaddq_f32(v71, v72)));
  v89 = vmulq_f32(v88, (float32x4_t)vdupq_n_s32(0x3C800000u));
  v90 = vmlsq_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v70, v69), vaddq_f32(v74, v73)), vpaddq_f32(vaddq_f32(v76, v75), vaddq_f32(v78, v77))), v89, v88);
  result[1] = v89;
  v88.i64[0] = vpaddq_f32(v90, v90).u64[0];
  result[7].i32[2] = vpadd_f32(*(float32x2_t *)v88.f32, *(float32x2_t *)v88.f32).u32[0];
  if (v1 < 1)
    result[8].i8[8] = v89.f32[3] >= 0.99997;
  return result;
}

float32x4_t *ClampPremultiplied_8x8_vec(float32x4_t *result)
{
  uint64_t i;
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  float32x4_t *v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t *v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  uint64_t v29;
  int32x4_t v30;
  float32x4_t v31;
  int32x4_t v32;
  int32x4_t *v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  uint64_t v37;
  uint64_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  float *f32;
  float *v48;
  float *v49;
  float *v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  uint64_t j;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4x2_t v79;
  float32x4x2_t v80;
  float32x4x2_t v81;

  for (i = 25; i != 41; i += 2)
  {
    v2 = &result[i];
    v4 = result[i + 32];
    v3 = result[i + 33];
    v5 = vminnmq_f32(result[i - 15], v3);
    v2[-16] = vminnmq_f32(result[i - 16], v4);
    v2[-15] = v5;
    v6 = vminnmq_f32(result[i + 1], v3);
    *v2 = vminnmq_f32(result[i], v4);
    v2[1] = v6;
    v7 = vminnmq_f32(result[i + 17], v3);
    v2[16] = vminnmq_f32(result[i + 16], v4);
    v2[17] = v7;
  }
  if (result[7].f32[3] < 0.0)
  {
    v8 = 0;
    v9 = (float32x4_t *)result[2].i64[0];
    v10 = 0uLL;
    v11 = 0uLL;
    do
    {
      v12 = (float32x4_t)xmmword_20631C430;
      if (v9)
        v12 = *v9;
      v13 = &result[v8];
      v15 = result[v8 + 9];
      v14 = result[v8 + 10];
      v17 = result[v8 + 25];
      v16 = result[v8 + 26];
      v19 = result[v8 + 41];
      v18 = result[v8 + 42];
      v20 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v16, *(float32x2_t *)v12.f32, 1), v14, v12.f32[0]), v18, v12, 2);
      v21 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v17, *(float32x2_t *)v12.f32, 1), v15, v12.f32[0]), v19, v12, 2);
      v13[153] = v21;
      v13[154] = v20;
      v22 = vsubq_f32(v14, v20);
      v23 = vsubq_f32(v15, v21);
      v24 = vsubq_f32(v17, v21);
      v25 = vsubq_f32(v16, v20);
      v26 = vsubq_f32(v19, v21);
      v27 = vsubq_f32(v18, v20);
      v10 = vaddq_f32(v10, vmlaq_f32(vmlaq_f32(vmulq_f32(v24, v24), v23, v23), v26, v26));
      v11 = vaddq_f32(v11, vmlaq_f32(vmlaq_f32(vmulq_f32(v25, v25), v22, v22), v27, v27));
      v8 += 2;
    }
    while (v8 != 16);
    v28 = vaddq_f32(v10, v11);
    v28.i64[0] = vpaddq_f32(v28, v28).u64[0];
    v28.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v28.f32, *(float32x2_t *)v28.f32).f32[0]);
    result[7].f32[3] = (float)(v28.f32[0] * 3.0) + (float)(v28.f32[0] * 3.0);
  }
  if (result[8].i8[6] < 0)
  {
    v29 = 0;
    v30 = 0uLL;
    v31 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v32 = 0uLL;
    do
    {
      v33 = (int32x4_t *)&result[v29];
      v34 = vcgeq_f32(v31, result[v29 + 57]);
      v35 = vcgeq_f32(v31, result[v29 + 58]);
      v33[138] = v35;
      v33[137] = v34;
      v32 = vsubq_s32(v32, v35);
      v30 = vsubq_s32(v30, v34);
      v29 += 2;
    }
    while (v29 != 16);
    v36 = vaddq_s32(v30, v32);
    v36.i64[0] = vpaddq_s32(v36, v36).u64[0];
    result[8].i8[6] = vpadd_s32(*(int32x2_t *)v36.i8, *(int32x2_t *)v36.i8).u8[0];
  }
  v37 = 0;
  v38 = 25;
  do
  {
    v39 = (int32x4_t)result[v38 - 16];
    v40 = (int32x4_t)result[v38 - 15];
    v41 = (int32x4_t)result[v38];
    v42 = (int32x4_t)result[v38 + 1];
    v43 = (int32x4_t)result[v38 + 16];
    v44 = (int32x4_t)result[v38 + 17];
    v45 = (int32x4_t)result[v38 + 32];
    v46 = (int32x4_t)result[v38 + 33];
    v80.val[0] = (float32x4_t)vzip1q_s32(v39, v43);
    v80.val[1] = (float32x4_t)vzip1q_s32(v41, v45);
    f32 = result[v37 + 73].f32;
    vst2q_f32(f32, v80);
    v80.val[0] = (float32x4_t)vzip2q_s32(v40, v44);
    v81.val[0] = (float32x4_t)vzip1q_s32(v40, v44);
    v79.val[0] = (float32x4_t)vzip2q_s32(v39, v43);
    v79.val[1] = (float32x4_t)vzip2q_s32(v41, v45);
    v48 = result[v37 + 75].f32;
    vst2q_f32(v48, v79);
    v81.val[1] = (float32x4_t)vzip1q_s32(v42, v46);
    v49 = result[v37 + 77].f32;
    vst2q_f32(v49, v81);
    v80.val[1] = (float32x4_t)vzip2q_s32(v42, v46);
    v50 = result[v37 + 79].f32;
    vst2q_f32(v50, v80);
    v37 += 8;
    v38 += 2;
  }
  while (v37 != 64);
  v51 = result[9];
  v52 = result[10];
  v53 = result[25];
  v54 = result[26];
  v55 = result[41];
  v56 = result[42];
  v57 = vmulq_f32(v52, v52);
  v58 = vmulq_f32(v51, v51);
  v59 = result[57];
  v60 = result[58];
  v61 = vmulq_f32(v54, v54);
  v62 = vmulq_f32(v53, v53);
  v63 = vmulq_f32(v56, v56);
  v64 = vmulq_f32(v55, v55);
  v65 = vmulq_f32(v60, v60);
  v66 = vmulq_f32(v59, v59);
  for (j = 27; j != 41; j += 2)
  {
    v68 = result[j - 16];
    v69 = result[j - 15];
    v70 = result[j];
    v71 = result[j + 1];
    v72 = result[j + 16];
    v73 = result[j + 17];
    v74 = result[j + 32];
    v75 = result[j + 33];
    v52 = vaddq_f32(v52, v69);
    v51 = vaddq_f32(v51, v68);
    v54 = vaddq_f32(v54, v71);
    v53 = vaddq_f32(v53, v70);
    v56 = vaddq_f32(v56, v73);
    v55 = vaddq_f32(v55, v72);
    v60 = vaddq_f32(v60, v75);
    v59 = vaddq_f32(v59, v74);
    v57 = vmlaq_f32(v57, v69, v69);
    v58 = vmlaq_f32(v58, v68, v68);
    v61 = vmlaq_f32(v61, v71, v71);
    v62 = vmlaq_f32(v62, v70, v70);
    v63 = vmlaq_f32(v63, v73, v73);
    v64 = vmlaq_f32(v64, v72, v72);
    v65 = vmlaq_f32(v65, v75, v75);
    v66 = vmlaq_f32(v66, v74, v74);
  }
  v76 = vpaddq_f32(vpaddq_f32(vaddq_f32(v51, v52), vaddq_f32(v53, v54)), vpaddq_f32(vaddq_f32(v55, v56), vaddq_f32(v59, v60)));
  v77 = vmulq_f32(v76, (float32x4_t)vdupq_n_s32(0x3C800000u));
  v78 = vmlsq_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v58, v57), vaddq_f32(v62, v61)), vpaddq_f32(vaddq_f32(v64, v63), vaddq_f32(v66, v65))), v77, v76);
  result[1] = v77;
  v76.i64[0] = vpaddq_f32(v78, v78).u64[0];
  result[7].i32[2] = vpadd_f32(*(float32x2_t *)v76.f32, *(float32x2_t *)v76.f32).u32[0];
  if (result[8].i8[8] < 1)
    result[8].i8[8] = v77.f32[3] >= 0.99997;
  return result;
}

float32x4_t *PassThrough_8x8_vec(float32x4_t *result)
{
  uint64_t v1;
  float32x4_t *v2;
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t *v6;
  float32x4_t v7;
  float32x4_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  uint64_t v22;
  int32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int32x4_t *v26;
  int32x4_t v27;
  int32x4_t v28;
  int32x4_t v29;
  uint64_t v30;
  uint64_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  float *f32;
  float *v41;
  float *v42;
  float *v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  float32x4_t v51;
  float32x4_t v52;
  float32x4_t v53;
  float32x4_t v54;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  float32x4_t v59;
  uint64_t i;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  float32x4_t v70;
  float32x4_t v71;
  float32x4x2_t v72;
  float32x4x2_t v73;
  float32x4x2_t v74;

  if (result[7].f32[3] < 0.0)
  {
    v1 = 0;
    v2 = (float32x4_t *)result[2].i64[0];
    v3 = 0uLL;
    v4 = 0uLL;
    do
    {
      v5 = (float32x4_t)xmmword_20631C430;
      if (v2)
        v5 = *v2;
      v6 = &result[v1];
      v8 = result[v1 + 9];
      v7 = result[v1 + 10];
      v10 = result[v1 + 25];
      v9 = result[v1 + 26];
      v12 = result[v1 + 41];
      v11 = result[v1 + 42];
      v13 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v9, *(float32x2_t *)v5.f32, 1), v7, v5.f32[0]), v11, v5, 2);
      v14 = vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v10, *(float32x2_t *)v5.f32, 1), v8, v5.f32[0]), v12, v5, 2);
      v6[153] = v14;
      v6[154] = v13;
      v15 = vsubq_f32(v7, v13);
      v16 = vsubq_f32(v8, v14);
      v17 = vsubq_f32(v10, v14);
      v18 = vsubq_f32(v9, v13);
      v19 = vsubq_f32(v12, v14);
      v20 = vsubq_f32(v11, v13);
      v3 = vaddq_f32(v3, vmlaq_f32(vmlaq_f32(vmulq_f32(v17, v17), v16, v16), v19, v19));
      v4 = vaddq_f32(v4, vmlaq_f32(vmlaq_f32(vmulq_f32(v18, v18), v15, v15), v20, v20));
      v1 += 2;
    }
    while (v1 != 16);
    v21 = vaddq_f32(v3, v4);
    v21.i64[0] = vpaddq_f32(v21, v21).u64[0];
    v21.f32[0] = vrecpes_f32(vpadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v21.f32).f32[0]);
    result[7].f32[3] = (float)(v21.f32[0] * 3.0) + (float)(v21.f32[0] * 3.0);
  }
  if (result[8].i8[6] < 0)
  {
    v22 = 0;
    v23 = 0uLL;
    v24 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    v25 = 0uLL;
    do
    {
      v26 = (int32x4_t *)&result[v22];
      v27 = vcgeq_f32(v24, result[v22 + 57]);
      v28 = vcgeq_f32(v24, result[v22 + 58]);
      v26[138] = v28;
      v26[137] = v27;
      v25 = vsubq_s32(v25, v28);
      v23 = vsubq_s32(v23, v27);
      v22 += 2;
    }
    while (v22 != 16);
    v29 = vaddq_s32(v23, v25);
    v29.i64[0] = vpaddq_s32(v29, v29).u64[0];
    result[8].i8[6] = vpadd_s32(*(int32x2_t *)v29.i8, *(int32x2_t *)v29.i8).u8[0];
  }
  v30 = 0;
  v31 = 25;
  do
  {
    v32 = (int32x4_t)result[v31 - 16];
    v33 = (int32x4_t)result[v31 - 15];
    v34 = (int32x4_t)result[v31];
    v35 = (int32x4_t)result[v31 + 1];
    v36 = (int32x4_t)result[v31 + 16];
    v37 = (int32x4_t)result[v31 + 17];
    v38 = (int32x4_t)result[v31 + 32];
    v39 = (int32x4_t)result[v31 + 33];
    v73.val[0] = (float32x4_t)vzip1q_s32(v32, v36);
    v73.val[1] = (float32x4_t)vzip1q_s32(v34, v38);
    f32 = result[v30 + 73].f32;
    vst2q_f32(f32, v73);
    v73.val[0] = (float32x4_t)vzip2q_s32(v33, v37);
    v74.val[0] = (float32x4_t)vzip1q_s32(v33, v37);
    v72.val[0] = (float32x4_t)vzip2q_s32(v32, v36);
    v72.val[1] = (float32x4_t)vzip2q_s32(v34, v38);
    v41 = result[v30 + 75].f32;
    vst2q_f32(v41, v72);
    v74.val[1] = (float32x4_t)vzip1q_s32(v35, v39);
    v42 = result[v30 + 77].f32;
    vst2q_f32(v42, v74);
    v73.val[1] = (float32x4_t)vzip2q_s32(v35, v39);
    v43 = result[v30 + 79].f32;
    vst2q_f32(v43, v73);
    v30 += 8;
    v31 += 2;
  }
  while (v30 != 64);
  v44 = result[9];
  v45 = result[10];
  v46 = result[25];
  v47 = result[26];
  v48 = result[41];
  v49 = result[42];
  v50 = vmulq_f32(v45, v45);
  v51 = vmulq_f32(v44, v44);
  v52 = result[57];
  v53 = result[58];
  v54 = vmulq_f32(v47, v47);
  v55 = vmulq_f32(v46, v46);
  v56 = vmulq_f32(v49, v49);
  v57 = vmulq_f32(v48, v48);
  v58 = vmulq_f32(v53, v53);
  v59 = vmulq_f32(v52, v52);
  for (i = 27; i != 41; i += 2)
  {
    v61 = result[i - 16];
    v62 = result[i - 15];
    v63 = result[i];
    v64 = result[i + 1];
    v65 = result[i + 16];
    v66 = result[i + 17];
    v67 = result[i + 32];
    v68 = result[i + 33];
    v45 = vaddq_f32(v45, v62);
    v44 = vaddq_f32(v44, v61);
    v47 = vaddq_f32(v47, v64);
    v46 = vaddq_f32(v46, v63);
    v49 = vaddq_f32(v49, v66);
    v48 = vaddq_f32(v48, v65);
    v53 = vaddq_f32(v53, v68);
    v52 = vaddq_f32(v52, v67);
    v50 = vmlaq_f32(v50, v62, v62);
    v51 = vmlaq_f32(v51, v61, v61);
    v54 = vmlaq_f32(v54, v64, v64);
    v55 = vmlaq_f32(v55, v63, v63);
    v56 = vmlaq_f32(v56, v66, v66);
    v57 = vmlaq_f32(v57, v65, v65);
    v58 = vmlaq_f32(v58, v68, v68);
    v59 = vmlaq_f32(v59, v67, v67);
  }
  v69 = vpaddq_f32(vpaddq_f32(vaddq_f32(v44, v45), vaddq_f32(v46, v47)), vpaddq_f32(vaddq_f32(v48, v49), vaddq_f32(v52, v53)));
  v70 = vmulq_f32(v69, (float32x4_t)vdupq_n_s32(0x3C800000u));
  v71 = vmlsq_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v51, v50), vaddq_f32(v55, v54)), vpaddq_f32(vaddq_f32(v57, v56), vaddq_f32(v59, v58))), v70, v69);
  result[1] = v70;
  v69.i64[0] = vpaddq_f32(v71, v71).u64[0];
  result[7].i32[2] = vpadd_f32(*(float32x2_t *)v69.f32, *(float32x2_t *)v69.f32).u32[0];
  if (result[8].i8[8] < 1)
    result[8].i8[8] = v70.f32[3] >= 0.99997;
  return result;
}

uint64_t Write_R8_vec(uint64_t result, int a2, uint64_t a3, _BYTE *a4, unsigned int a5, int a6, _QWORD *a7)
{
  unsigned int v7;
  int v8;
  uint32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;

  if (a6)
  {
    v7 = 0;
    v8 = 0;
    v9.i64[0] = 0xFFFF0000FFFF0000;
    v9.i64[1] = 0xFFFF0000FFFF0000;
    v10.i64[0] = 0x800000008000;
    v10.i64[1] = 0x800000008000;
    do
    {
      v11 = a5;
      v12 = v7;
      v13 = a4;
      if (a5)
      {
        do
        {
          v14 = vmulq_s32(*(int32x4_t *)(result + 16 * v12 + 288), (int32x4_t)xmmword_20631C440);
          v15 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v14);
          v16 = vaddq_s32(vrev64q_s32(v15), v15);
          *(uint16x4_t *)v16.i8 = vqadd_u16((uint16x4_t)vqmovun_s32((int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v9, (uint32x4_t)v16), v10), v16), 0x10uLL)), (uint16x4_t)0x80008000800080);
          *v13++ = vqsub_u16(*(uint16x4_t *)&v16, vshr_n_u16(*(uint16x4_t *)&v16, 8uLL)).i8[1];
          ++v12;
          --v11;
        }
        while (v11);
      }
      a4 += *a7;
      ++v8;
      v7 += a2;
    }
    while (v8 != a6);
  }
  return result;
}

uint64_t Write_RA8_vec(uint64_t result, int a2, uint64_t a3, _BYTE *a4, unsigned int a5, int a6, _QWORD *a7)
{
  unsigned int v7;
  int v8;
  uint32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  unsigned int v12;
  _BYTE *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  uint16x4_t v18;
  uint16x4_t v19;

  if (a6)
  {
    v7 = 0;
    v8 = 0;
    v9.i64[0] = 0xFFFF0000FFFF0000;
    v9.i64[1] = 0xFFFF0000FFFF0000;
    v10.i64[0] = 0x800000008000;
    v10.i64[1] = 0x800000008000;
    do
    {
      v11 = a5;
      v12 = v7;
      v13 = a4;
      if (a5)
      {
        do
        {
          v14 = vmulq_s32(*(int32x4_t *)(result + 16 * v12 + 288), (int32x4_t)xmmword_20631C440);
          v15 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v14);
          v16 = vaddq_s32(vrev64q_s32(v15), v15);
          v17 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v9, (uint32x4_t)v16), v10), v16), 0x10uLL);
          v17.i32[3] = HIDWORD(*(_OWORD *)(result + 16 * v12 + 288));
          v18 = vqadd_u16((uint16x4_t)vqmovun_s32(v17), (uint16x4_t)0x80008000800080);
          v19 = vqsub_u16(v18, vshr_n_u16(v18, 8uLL));
          v13[1] = v19.i8[7];
          *v13 = v19.i8[1];
          v13 += 2;
          ++v12;
          --v11;
        }
        while (v11);
      }
      a4 += *a7;
      ++v8;
      v7 += a2;
    }
    while (v8 != a6);
  }
  return result;
}

uint64_t Write_BGRA8_vec(uint64_t result, int a2, double a3, double a4, int16x8_t a5, uint64_t a6, _DWORD *a7, unsigned int a8, int a9, _QWORD *a10)
{
  unsigned int v10;
  int i;
  uint64_t v12;
  unsigned int v13;
  _DWORD *v14;
  uint16x4_t v15;
  uint16x4_t v16;

  if (a9)
  {
    v10 = 0;
    for (i = 0; i != a9; ++i)
    {
      v12 = a8;
      v13 = v10;
      v14 = a7;
      if (a8)
      {
        do
        {
          v15 = vqadd_u16((uint16x4_t)vqmovun_s32(*(int32x4_t *)(result + 16 * v13 + 288)), (uint16x4_t)0x80008000800080);
          v16 = vqsub_u16(v15, vshr_n_u16(v15, 8uLL));
          a5.i16[0] = v16.u8[5];
          a5.i16[1] = v16.u8[3];
          a5.i16[2] = v16.u8[1];
          a5.i16[3] = v16.u8[7];
          *v14++ = vmovn_s16(a5).u32[0];
          ++v13;
          --v12;
        }
        while (v12);
      }
      a7 = (_DWORD *)((char *)a7 + *a10);
      v10 += a2;
    }
  }
  return result;
}

uint64_t Write_R16_vec(uint64_t result, int a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6, uint64_t *a7)
{
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint32x4_t v10;
  int8x16_t v11;
  uint64_t v12;
  unsigned int v13;
  _WORD *v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;

  if (a6)
  {
    v7 = 0;
    v8 = 0;
    v9 = *a7;
    v10.i64[0] = 0xFFFF0000FFFF0000;
    v10.i64[1] = 0xFFFF0000FFFF0000;
    v11.i64[0] = 0x800000008000;
    v11.i64[1] = 0x800000008000;
    do
    {
      v12 = a5;
      v13 = v7;
      v14 = a4;
      if (a5)
      {
        do
        {
          v15 = vmulq_s32(*(int32x4_t *)(result + 16 * v13 + 288), (int32x4_t)xmmword_20631C440);
          v16 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL), v15);
          v17 = vaddq_s32(vrev64q_s32(v16), v16);
          *v14++ = vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v10, (uint32x4_t)v17), v11), v17), 0x10uLL).u16[0];
          ++v13;
          --v12;
        }
        while (v12);
      }
      a4 = (_WORD *)((char *)a4 + v9);
      ++v8;
      v7 += a2;
    }
    while (v8 != a6);
  }
  return result;
}

uint64_t Write_RA16_vec(uint64_t result, int a2, uint64_t a3, _WORD *a4, unsigned int a5, int a6, _QWORD *a7)
{
  unsigned int v7;
  int v8;
  uint32x4_t v9;
  int8x16_t v10;
  uint64_t v11;
  unsigned int v12;
  _WORD *v13;
  int32x4_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int16x4_t v18;

  if (a6)
  {
    v7 = 0;
    v8 = 0;
    v9.i64[0] = 0xFFFF0000FFFF0000;
    v9.i64[1] = 0xFFFF0000FFFF0000;
    v10.i64[0] = 0x800000008000;
    v10.i64[1] = 0x800000008000;
    do
    {
      v11 = a5;
      v12 = v7;
      v13 = a4;
      if (a5)
      {
        do
        {
          v14 = vmulq_s32(*(int32x4_t *)(result + 16 * v12 + 288), (int32x4_t)xmmword_20631C440);
          v15 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL), v14);
          v16 = vaddq_s32(vrev64q_s32(v15), v15);
          v17 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v9, (uint32x4_t)v16), v10), v16), 0x10uLL);
          v17.i32[3] = HIDWORD(*(_OWORD *)(result + 16 * v12 + 288));
          v18 = vmovn_s32(v17);
          v13[1] = v18.i16[3];
          *v13 = v18.i16[0];
          v13 += 2;
          ++v12;
          --v11;
        }
        while (v11);
      }
      a4 = (_WORD *)((char *)a4 + *a7);
      ++v8;
      v7 += a2;
    }
    while (v8 != a6);
  }
  return result;
}

uint64_t Write_RGBA16_vec(uint64_t result, int a2, uint64_t a3, int16x4_t *a4, unsigned int a5, int a6, _QWORD *a7)
{
  unsigned int v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  int16x4_t *v11;

  if (a6)
  {
    v7 = 0;
    for (i = 0; i != a6; ++i)
    {
      v9 = a5;
      v10 = v7;
      v11 = a4;
      if (a5)
      {
        do
        {
          *v11++ = vmovn_s32(*(int32x4_t *)(result + 16 * v10++ + 288));
          --v9;
        }
        while (v9);
      }
      a4 = (int16x4_t *)((char *)a4 + *a7);
      v7 += a2;
    }
  }
  return result;
}

uint64_t Write_Rf16_vec(uint64_t result, int a2, uint64_t a3, float16x4_t *a4, unsigned int a5, int a6, _QWORD *a7)
{
  int v7;
  int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint32x4_t v12;
  int8x16_t v13;
  int32x4_t v14;
  uint32x4_t v15;
  int8x16_t v16;
  uint64_t v17;
  float16x4_t *v18;
  int v19;
  int v20;
  int32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  float16x4_t v30;
  int32x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  int32x4_t v43;
  int8x16_t v44;
  unsigned int v45;
  int v46;
  int32x4_t v47;
  float32x4_t v48;
  float32x4_t v49;
  float32x4_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int32x4_t v53;
  int32x4_t v54;
  int8x16_t v55;

  if (a6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (float32x4_t)vdupq_n_s32(0x37800000u);
    v10 = (float32x4_t)vdupq_n_s32(0x477FE000u);
    v11 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    v12.i64[0] = 0xFFFF0000FFFF0000;
    v12.i64[1] = 0xFFFF0000FFFF0000;
    v13.i64[0] = 0x800000008000;
    v13.i64[1] = 0x800000008000;
    v14.i64[0] = 0xFFFF0000FFFFLL;
    v14.i64[1] = 0xFFFF0000FFFFLL;
    v15.i64[0] = 0x300000003;
    v15.i64[1] = 0x300000003;
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    do
    {
      if (a5 >= 4)
      {
        v19 = 0;
        v18 = a4;
        do
        {
          v20 = v7 + v19;
          v21 = *(int32x4_t *)(result + 16 * (v7 + v19) + 288);
          if (*(_DWORD *)(result + 2612))
          {
            v22 = vmulq_f32(vcvtq_f32_f16((float16x4_t)vmovn_s32(v21)), (float32x4_t)xmmword_20631C450);
            v23 = vaddq_f32(v22, (float32x4_t)vextq_s8((int8x16_t)v22, (int8x16_t)v22, 8uLL));
            v24 = vmulq_f32(vcvtq_f32_f16((float16x4_t)vmovn_s32(*(int32x4_t *)(result + 288 + 16 * (v20 + 1)))), (float32x4_t)xmmword_20631C450);
            v25 = vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL));
            v26 = vmulq_f32(vcvtq_f32_f16((float16x4_t)vmovn_s32(*(int32x4_t *)(result + 288 + 16 * (v20 + 2)))), (float32x4_t)xmmword_20631C450);
            v27 = vaddq_f32(v26, (float32x4_t)vextq_s8((int8x16_t)v26, (int8x16_t)v26, 8uLL));
            v28 = vmulq_f32(vcvtq_f32_f16((float16x4_t)vmovn_s32(*(int32x4_t *)(result + 288 + 16 * (v20 + 3)))), (float32x4_t)xmmword_20631C450);
            v29 = vaddq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL));
            v30 = (float16x4_t)vzip1_s16(vzip1_s16((int16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vaddq_f32(v23, (float32x4_t)vrev64q_s32((int32x4_t)v23)), v10), v11), v16)), (int16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vaddq_f32(v27, (float32x4_t)vrev64q_s32((int32x4_t)v27)), v10), v11), v16))),
                                 vzip1_s16((int16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vaddq_f32(v25, (float32x4_t)vrev64q_s32((int32x4_t)v25)), v10), v11), v16)), (int16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vaddq_f32(v29, (float32x4_t)vrev64q_s32((int32x4_t)v29)), v10), v11), v16))));
          }
          else
          {
            v31 = vmulq_s32(v21, (int32x4_t)xmmword_20631C440);
            v32 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL), v31);
            v33 = vaddq_s32(vrev64q_s32(v32), v32);
            v34 = vmulq_s32(*(int32x4_t *)(result + 288 + 16 * (v20 + 1)), (int32x4_t)xmmword_20631C440);
            v35 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL), v34);
            v36 = vaddq_s32(vrev64q_s32(v35), v35);
            v37 = vmulq_s32(*(int32x4_t *)(result + 288 + 16 * (v20 + 2)), (int32x4_t)xmmword_20631C440);
            v38 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), v37);
            v39 = vaddq_s32(vrev64q_s32(v38), v38);
            v40 = vmulq_s32(*(int32x4_t *)(result + 288 + 16 * (v20 + 3)), (int32x4_t)xmmword_20631C440);
            v41 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v40, (int8x16_t)v40, 8uLL), v40);
            v42 = vaddq_s32(vrev64q_s32(v41), v41);
            v43 = (int32x4_t)vshrq_n_u32((uint32x4_t)vzip1q_s32(vzip1q_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v12, (uint32x4_t)v33), v13), v33), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v12, (uint32x4_t)v39), v13), v39)), vzip1q_s32(vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v12, (uint32x4_t)v36), v13), v36), vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v12, (uint32x4_t)v42), v13), v42))), 0x10uLL);
            v44 = (int8x16_t)vsubq_s32(v43, vceqq_s32(v43, v14));
            v30 = vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8(v44, (int8x16_t)vcgtq_u32((uint32x4_t)v44, v15))), v9), v10), v11), v16));
          }
          *v18++ = v30;
          LODWORD(v17) = v19 + 4;
          v45 = v19 + 8;
          v19 += 4;
        }
        while (v45 <= a5);
      }
      else
      {
        LODWORD(v17) = 0;
        v18 = a4;
      }
      if (v17 < a5)
      {
        v46 = *(_DWORD *)(result + 2612);
        v17 = v17;
        do
        {
          v47 = *(int32x4_t *)(result + 16 * (v7 + v17) + 288);
          if (v46)
          {
            v48 = vmulq_f32(vcvtq_f32_f16((float16x4_t)vmovn_s32(v47)), (float32x4_t)xmmword_20631C450);
            v49 = vaddq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL));
            v50 = vaddq_f32(v49, (float32x4_t)vrev64q_s32((int32x4_t)v49));
          }
          else
          {
            v51 = vmulq_s32(v47, (int32x4_t)xmmword_20631C440);
            v52 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL), v51);
            v53 = vaddq_s32(vrev64q_s32(v52), v52);
            v54 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v12, (uint32x4_t)v53), v13), v53), 0x10uLL);
            v55 = (int8x16_t)vsubq_s32(v54, vceqq_s32(v54, v14));
            v50 = vmulq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8(v55, (int8x16_t)vcgtq_u32((uint32x4_t)v55, v15))), v9);
          }
          v18->i16[v17++ & 3] = vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(v50, v10), v11), v16)).u16[0];
        }
        while (a5 != v17);
      }
      a4 = (float16x4_t *)((char *)a4 + *a7);
      ++v8;
      v7 += a2;
    }
    while (v8 != a6);
  }
  return result;
}

uint64_t Write_RAf16_vec(uint64_t result, int a2, uint64_t a3, float16x4_t *a4, unsigned int a5, int a6, _QWORD *a7)
{
  int v7;
  int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  uint32x4_t v12;
  int8x16_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int8x16_t v16;
  unsigned int v17;
  float16x4_t *v18;
  int v19;
  int v20;
  int32x4_t *v21;
  int32x4_t v22;
  float16x4_t v23;
  float32x4_t v24;
  float32x4_t v25;
  int16x4_t v26;
  float16x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int16x4_t v30;
  float16x4_t v31;
  int32x4_t v32;
  int32x4_t v33;
  int32x4_t v34;
  int32x4_t v35;
  int32x4_t *v36;
  int32x4_t v37;
  int32x4_t v38;
  int32x4_t v39;
  int32x4_t v40;
  int32x4_t v41;
  int32x4_t v42;
  unsigned int v43;
  int32x4_t v44;
  float16x4_t v45;
  float32x4_t v46;
  float32x4_t v47;
  int32x4_t v48;
  int32x4_t v49;
  int32x4_t v50;
  int32x4_t v51;

  if (a6)
  {
    v7 = 0;
    v8 = 0;
    v9 = (float32x4_t)vdupq_n_s32(0x37800000u);
    v10 = (float32x4_t)vdupq_n_s32(0x477FE000u);
    v11 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    v12.i64[0] = 0xFFFF0000FFFF0000;
    v12.i64[1] = 0xFFFF0000FFFF0000;
    v13.i64[0] = 0x800000008000;
    v13.i64[1] = 0x800000008000;
    v14.i64[0] = 0xFFFF0000FFFFLL;
    v14.i64[1] = 0xFFFF0000FFFFLL;
    v15.i64[0] = 0x300000003;
    v15.i64[1] = 0x300000003;
    v16.i64[0] = 0x1F0000001FLL;
    v16.i64[1] = 0x1F0000001FLL;
    do
    {
      if (a5 >= 2)
      {
        v19 = 0;
        v18 = a4;
        do
        {
          v20 = v7 + v19;
          v21 = (int32x4_t *)(result + 16 * (v7 + v19));
          v22 = v21[18];
          if (*(_DWORD *)(result + 2612))
          {
            v23 = (float16x4_t)vmovn_s32(v22);
            v24 = vmulq_f32(vcvtq_f32_f16(v23), (float32x4_t)xmmword_20631C450);
            v25 = vaddq_f32(v24, (float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL));
            *(float16x4_t *)v25.f32 = vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vaddq_f32(v25, (float32x4_t)vrev64q_s32((int32x4_t)v25)), v10), v11), v16));
            v26 = *(int16x4_t *)v25.f32;
            v26.i16[3] = v23.i16[3];
            v27 = (float16x4_t)vmovn_s32(*(int32x4_t *)(result + 16 * (v20 + 1) + 288));
            v28 = vmulq_f32(vcvtq_f32_f16(v27), (float32x4_t)xmmword_20631C450);
            v29 = vaddq_f32(v28, (float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL));
            *(float16x4_t *)v29.f32 = vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vaddq_f32(v29, (float32x4_t)vrev64q_s32((int32x4_t)v29)), v10), v11), v16));
            v30 = *(int16x4_t *)v29.f32;
            v30.i16[3] = v27.i16[3];
            v26.i16[1] = v25.i16[0];
            v30.i16[1] = v29.i16[0];
            v31 = (float16x4_t)vuzp2_s16(v26, v30);
          }
          else
          {
            v32 = vmulq_s32(v22, (int32x4_t)xmmword_20631C440);
            v33 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL), v32);
            v34 = vaddq_s32(vrev64q_s32(v33), v33);
            v35 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v12, (uint32x4_t)v34), v13), v34), 0x10uLL);
            v35.i32[3] = HIDWORD(*(_OWORD *)&v21[18]);
            v36 = (int32x4_t *)(result + 16 * (v20 + 1));
            v37 = vmulq_s32(v36[18], (int32x4_t)xmmword_20631C440);
            v38 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL), v37);
            v39 = vaddq_s32(vrev64q_s32(v38), v38);
            v40 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v12, (uint32x4_t)v39), v13), v39), 0x10uLL);
            v40.i32[3] = HIDWORD(*(_OWORD *)&v36[18]);
            v35.i32[1] = v35.i32[0];
            v40.i32[1] = v40.i32[0];
            v41 = vuzp2q_s32(v35, v40);
            v42 = vsubq_s32(v41, vceqq_s32(v41, v14));
            v31 = vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8((int8x16_t)v42, (int8x16_t)vcgtq_s32(v42, v15))), v9), v10), v11), v16));
          }
          *v18++ = v31;
          v17 = v19 + 2;
          v43 = v19 + 4;
          v19 += 2;
        }
        while (v43 <= a5);
      }
      else
      {
        v17 = 0;
        v18 = a4;
      }
      if (v17 < a5)
      {
        v44 = *(int32x4_t *)(result + 16 * (v17 + v8 * a2) + 288);
        if (*(_DWORD *)(result + 2612))
        {
          v45 = (float16x4_t)vmovn_s32(v44);
          v46 = vmulq_f32(vcvtq_f32_f16(v45), (float32x4_t)xmmword_20631C450);
          v47 = vaddq_f32(v46, (float32x4_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL));
          v47.i16[0] = vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vaddq_f32(v47, (float32x4_t)vrev64q_s32((int32x4_t)v47)), v10), v11), v16)).u16[0];
          v47.i16[3] = v45.i16[3];
        }
        else
        {
          v48 = vmulq_s32(v44, (int32x4_t)xmmword_20631C440);
          v49 = vaddq_s32((int32x4_t)vextq_s8((int8x16_t)v48, (int8x16_t)v48, 8uLL), v48);
          v50 = vaddq_s32(vrev64q_s32(v49), v49);
          v51 = (int32x4_t)vshrq_n_u32((uint32x4_t)vaddq_s32((int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v12, (uint32x4_t)v50), v13), v50), 0x10uLL);
          v51.i32[3] = HIDWORD(*(_OWORD *)(result + 16 * (v17 + v8 * a2) + 288));
          v47 = (float32x4_t)vsubq_s32(v51, vceqq_s32(v51, v14));
          *(float16x4_t *)v47.f32 = vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8((int8x16_t)v47, (int8x16_t)vcgtq_s32((int32x4_t)v47, v15))), v9), v10), v11), v16));
        }
        v18->i16[1] = v47.i16[3];
        v18->i16[0] = v47.i16[0];
      }
      a4 = (float16x4_t *)((char *)a4 + *a7);
      ++v8;
      v7 += a2;
    }
    while (v8 != a6);
  }
  return result;
}

uint64_t Write_RGBAf16_vec(uint64_t result, int a2, uint64_t a3, float16x4_t *a4, unsigned int a5, int a6, _QWORD *a7)
{
  unsigned int v7;
  int v8;
  int32x4_t v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int8x16_t v14;
  uint64_t v15;
  unsigned int v16;
  float16x4_t *v17;
  int32x4_t v18;
  float16x4_t v19;
  int32x4_t v20;

  if (a6)
  {
    v7 = 0;
    v8 = 0;
    v9.i64[0] = 0xFFFF0000FFFFLL;
    v9.i64[1] = 0xFFFF0000FFFFLL;
    v10.i64[0] = 0x300000003;
    v10.i64[1] = 0x300000003;
    v11 = (float32x4_t)vdupq_n_s32(0x37800000u);
    v12 = (float32x4_t)vdupq_n_s32(0x477FE000u);
    v13 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    v14.i64[0] = 0x1F0000001FLL;
    v14.i64[1] = 0x1F0000001FLL;
    do
    {
      v15 = a5;
      v16 = v7;
      v17 = a4;
      if (a5)
      {
        do
        {
          v18 = *(int32x4_t *)(result + 16 * v16 + 288);
          if (*(_DWORD *)(result + 2612))
          {
            v19 = (float16x4_t)vmovn_s32(v18);
          }
          else
          {
            v20 = vsubq_s32(v18, vceqq_s32(v18, v9));
            v19 = vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_f32(vcvtq_f32_s32((int32x4_t)vandq_s8((int8x16_t)v20, (int8x16_t)vcgtq_s32(v20, v10))), v11), v12), v13), v14));
          }
          *v17++ = v19;
          ++v16;
          --v15;
        }
        while (v15);
      }
      a4 = (float16x4_t *)((char *)a4 + *a7);
      ++v8;
      v7 += a2;
    }
    while (v8 != a6);
  }
  return result;
}

uint64_t FlattenNon_vec(uint64_t result, uint64_t a2, float32x2_t *a3)
{
  unsigned __int16 v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int32x4_t *v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x4_t v14;
  int32x4_t v20;
  float32x4_t v22;

  if (HIDWORD(result) * (_DWORD)result)
  {
    v3 = 0;
    v4 = (float32x4_t)vdupq_n_s32(0x37800080u);
    v5 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
    v6 = (float32x4_t)vdupq_n_s32(0x477FE000u);
    v7 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    v8.i64[0] = 0x1F0000001FLL;
    v8.i64[1] = 0x1F0000001FLL;
    do
    {
      v9 = (int32x4_t *)&a3[2 * v3];
      v10 = v9[18];
      v11 = a3[324];
      if (a3[326].i32[1])
      {
        _Q6 = vcvtq_f32_f16((float16x4_t)vmovn_s32(v10));
        _Q16 = vextq_s8((int8x16_t)_Q6, (int8x16_t)_Q6, 8uLL);
        *(float32x2_t *)v14.f32 = vmla_laneq_f32(v11, vsub_f32(*(float32x2_t *)_Q6.f32, v11), _Q6, 3);
        *(float *)_Q16.i32 = _Q6.f32[2] - a3[325].f32[0];
        __asm { FMLA            S7, S16, V6.S[3] }
        v14.i64[1] = __PAIR64__(_Q16.u32[1], _S7);
        v20 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(v14, v6), v7), v8)));
      }
      else
      {
        _Q6 = vmulq_f32(vcvtq_f32_s32(v10), v4);
        *(float32x2_t *)v22.f32 = vmla_laneq_f32(v11, vsub_f32(*(float32x2_t *)_Q6.f32, v11), _Q6, 3);
        _S17 = _Q6.f32[2] - a3[325].f32[0];
        __asm { FMLA            S7, S17, V6.S[3] }
        v22.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&_Q6, *(int8x16_t *)&_Q6, 8uLL).u32[1], _S7);
        _Q6.i64[0] = 0x3F0000003F000000;
        _Q6.i64[1] = 0x3F0000003F000000;
        v20 = vcvtq_s32_f32(vrndq_f32(vmlaq_f32(_Q6, v5, v22)));
      }
      v9[18] = v20;
      ++v3;
    }
    while (HIDWORD(result) * (int)result > v3);
  }
  return result;
}

uint64_t FlattenPre_vec(uint64_t result, uint64_t a2, float32x2_t *a3)
{
  float32x2_t v3;
  unsigned __int16 v4;
  float32x4_t v5;
  float32x2_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int8x16_t v9;
  int32x4_t *v10;
  int32x4_t v11;
  float32x4_t v13;
  uint32x4_t v20;

  if (HIDWORD(result) * (_DWORD)result)
  {
    v4 = 0;
    v5 = (float32x4_t)vdupq_n_s32(0x37800080u);
    v6 = (float32x2_t)vdup_n_s32(0x477FFF00u);
    v7 = (float32x4_t)vdupq_n_s32(0x477FE000u);
    v8 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    v9.i64[0] = 0x1F0000001FLL;
    v9.i64[1] = 0x1F0000001FLL;
    do
    {
      v10 = (int32x4_t *)&a3[2 * v4];
      v11 = v10[18];
      if (a3[326].i32[1])
      {
        if (v11.i32[3] != 15360)
        {
          _Q16 = vcvtq_f32_f16((float16x4_t)vmovn_s32(v11));
          v3.i32[0] = _Q16.i32[3];
          *(float32x2_t *)v13.f32 = vmls_lane_f32(vadd_f32(*(float32x2_t *)_Q16.f32, a3[324]), a3[324], v3, 0);
          _S17 = a3[325].i32[0];
          __asm { FMLS            S18, S17, V16.S[3] }
          v13.i64[1] = __PAIR64__(1.0, _S18);
          v20 = vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(v13, v7), v8), v9)));
LABEL_8:
          v10[18] = (int32x4_t)v20;
        }
      }
      else if (v11.i32[3] != 0xFFFF)
      {
        _Q16 = vmulq_f32(vcvtq_f32_s32(v11), v5);
        v3.i32[0] = _Q16.i32[3];
        _S18 = a3[325].i32[0];
        __asm { FMLS            S19, S18, V16.S[3] }
        v3 = vmla_f32((float32x2_t)0x3F0000003F000000, v6, vmls_lane_f32(vadd_f32(*(float32x2_t *)_Q16.f32, a3[324]), a3[324], v3, 0));
        *(int32x2_t *)v20.i8 = vcvt_s32_f32(vrnd_f32(v3));
        v20.i32[2] = (int)(float)((float)(_S19 * 65535.0) + 0.5);
        v20.i32[3] = 0xFFFF;
        goto LABEL_8;
      }
      ++v4;
    }
    while (HIDWORD(result) * (int)result > v4);
  }
  return result;
}

uint64_t Premultiply_vec(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int8x16_t v8;
  int32x4_t *v9;
  int32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;

  if (HIDWORD(result) * (_DWORD)result)
  {
    v3 = 0;
    v4 = (float32x4_t)vdupq_n_s32(0x37800080u);
    v5 = (float32x4_t)vdupq_n_s32(0x477FFF00u);
    v6 = (float32x4_t)vdupq_n_s32(0x477FE000u);
    v7 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    v8.i64[0] = 0x1F0000001FLL;
    v8.i64[1] = 0x1F0000001FLL;
    do
    {
      v9 = (int32x4_t *)(a3 + 16 * v3);
      v10 = v9[18];
      if (*(_DWORD *)(a3 + 2612))
      {
        v11 = vcvtq_f32_f16((float16x4_t)vmovn_s32(v10));
        v12 = vmulq_laneq_f32(v11, v11, 3);
        v12.i32[3] = 0;
        v13 = vminnmq_f32(v12, (float32x4_t)xmmword_20631C460);
        v13.i32[3] = v11.i32[3];
        v14 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(v13, v6), v7), v8)));
      }
      else
      {
        v15 = vmulq_f32(vcvtq_f32_s32(v10), v4);
        v16 = vmulq_laneq_f32(v15, v15, 3);
        v16.i32[3] = 0;
        v17 = vminnmq_f32(v16, (float32x4_t)xmmword_20631C460);
        v17.i32[3] = v15.i32[3];
        v15.i64[0] = 0x3F0000003F000000;
        v15.i64[1] = 0x3F0000003F000000;
        v14 = vcvtq_s32_f32(vrndq_f32(vmlaq_f32(v15, v5, v17)));
      }
      v9[18] = v14;
      ++v3;
    }
    while (HIDWORD(result) * (int)result > v3);
  }
  return result;
}

uint64_t Unpremultiply_vec(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int16 v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  int8x16_t v7;
  int32x4_t *v8;
  int32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;

  if (HIDWORD(result) * (_DWORD)result)
  {
    v3 = 0;
    v4.i64[0] = 0x3F0000003F000000;
    v4.i64[1] = 0x3F0000003F000000;
    v5 = (float32x4_t)vdupq_n_s32(0x477FE000u);
    v6 = (float32x4_t)vdupq_n_s32(0xC77FE000);
    v7.i64[0] = 0x1F0000001FLL;
    v7.i64[1] = 0x1F0000001FLL;
    while (1)
    {
      v8 = (int32x4_t *)(a3 + 16 * v3);
      v9 = v8[18];
      if (!v9.i32[3])
        break;
      if (*(_DWORD *)(a3 + 2612))
      {
        if (v9.i32[3] != 15360)
        {
          v10 = vcvtq_f32_f16((float16x4_t)vmovn_s32(v9));
          v11 = vminnmq_f32(v10, (float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 3));
          v12 = vmulq_n_f32(v11, 1.0 / v11.f32[3]);
          v12.i32[3] = v11.i32[3];
          v13 = (int32x4_t)vmovl_u16((uint16x4_t)vcvt_f16_f32((float32x4_t)vandq_s8((int8x16_t)vmaxnmq_f32(vminnmq_f32(v12, v5), v6), v7)));
LABEL_10:
          v8[18] = v13;
        }
      }
      else if (v9.i32[3] != 0xFFFF)
      {
        v14 = vcvtq_f32_s32(v9);
        v15 = vminnmq_f32(v14, (float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 3));
        v16 = vmulq_n_f32(v15, 65535.0 / v15.f32[3]);
        v16.i32[3] = v15.i32[3];
        v13 = vcvtq_s32_f32(vaddq_f32(v16, v4));
        goto LABEL_10;
      }
      if (HIDWORD(result) * (int)result <= ++v3)
        return result;
    }
    v13 = 0uLL;
    goto LABEL_10;
  }
  return result;
}

uint64_t SetAlphaOne_vec(uint64_t result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;

  if (HIDWORD(result) * (_DWORD)result)
  {
    v3 = 0;
    if (*(_DWORD *)(a3 + 2612))
      v4 = 15360;
    else
      v4 = 0xFFFF;
    do
      *(_DWORD *)(a3 + 12 + 16 * (unsigned __int16)v3++ + 288) = v4;
    while (HIDWORD(result) * (int)result > (unsigned __int16)v3);
  }
  return result;
}

#error "2062C0D2C: call analysis failed (funcsize=8674)"

void EncodeBasicBlock_6x5(uint64_t a1, int8x16_t *a2, float *a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51)
{
  float32x4_t v51;
  float32x4_t v52;
  float *v53;
  uint64_t v55;
  uint64_t v56;
  int32x4_t v57;
  int8x16_t v58;
  int8x16_t v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  float32x4_t v64;
  float32x4_t v65;
  int64x2_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int8x16_t v69;
  float32x4_t v75;
  float32x4_t v76;
  float32x4_t v77;
  unint64_t v78;
  uint64_t v79;
  float32x4_t v80;
  uint64_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  int8x16_t v91;
  int8x16_t v92;
  float32x4_t v93;
  float32x4_t v94;
  uint64_t v95;
  float32x2_t *v96;
  int8x16_t v97;
  int8x16_t v98;
  int8x16_t v99;
  int8x16_t v100;
  int32x4_t v101;
  int8x16_t v102;
  float32x4_t v103;
  float32x4_t v104;
  float32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  float32x4_t v109;
  float32x4_t v110;
  float32x4_t v111;
  float32x4_t v112;
  float32x4_t v113;
  float32x4_t v114;
  float32x4_t v115;
  float32x4_t v116;
  float32x4_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  int8x16_t v121;
  float32x4_t v122;
  float32x4_t v123;
  int v124;
  float32x4_t v125;
  int8x16_t v126;
  float32x4_t v127;
  int8x16_t v128;
  float32x4_t v129;
  int64x2_t v130;
  uint64_t v131;
  float32x4_t v132;
  float32x4_t v133;
  float32x4_t v134;
  float32x4_t *v135;
  float32x4_t v136;
  uint64_t v137;
  uint64_t v138;
  int32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  int8x16_t v145;
  int8x16_t v146;
  float32x4_t v147;
  float32x4_t v148;
  int32x4_t v149;
  int8x16_t v150;
  int8x16_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int8x16_t v154;
  int32x4_t *v155;
  float32x4_t v156;
  int8x16_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  int8x16_t v161;
  float32x4_t v162;
  int8x16_t v163;
  float32x4_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t v168;
  float32x4_t v169;
  uint64_t v170;
  float v171;
  int8x16_t v172;
  int8x16_t v173;
  float32x4_t v174;
  float32x4_t v175;
  float32x4_t v176;
  float32x4_t v177;
  int32x4_t v178;
  float32x4_t v179;
  int32x2_t v180;
  float32x4_t v181;
  float32x4_t v182;
  int32x2_t v183;
  float32x4_t v184;
  float32x4_t v185;
  int32x2_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  int32x4_t v190;
  int64x2_t v191;
  int32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  float32x4_t v196;
  float32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  int32x4_t v202;
  int8x16_t v203;
  int32x4_t v204;
  int32x4_t *v205;
  int32x4_t v206;
  unsigned __int8 v207;
  uint64_t v208;
  int8x16_t v209;
  int8x16_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  float32x4_t v214;
  float32x4_t v215;
  float32x4_t v216;
  float32x4_t v217;
  float32x4_t v218;
  int64x2_t v219;
  int8x16_t v220;
  int8x16_t v221;
  float32x4_t v222;
  uint64_t v223;
  float32x4_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  int32x4_t v228;
  int32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  int32x4_t v239;
  int8x16_t v240;
  int32x4_t v241;
  int32x4_t *v242;
  int32x4_t v243;
  unsigned __int8 v244;
  unsigned __int8 v245;
  uint64_t v246;
  int8x16_t v247;
  int8x16_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  int64x2_t v257;
  int8x16_t v258;
  int8x16_t v259;
  float32x4_t v260;
  float32x4_t v261;
  float32x4_t v262;
  float32x2_t v263;
  float32x4_t v264;
  int8x16_t v265;
  uint64_t v266;
  int8x16_t v267;
  float32x4_t v268;
  float32x2_t v269;
  int8x16_t v270;
  int8x16_t v271;
  int8x16_t v272;
  int8x16_t v273;
  int32x4_t v274;
  float32x4_t v275;
  float32x4_t v276;
  int8x16_t v277;
  int32x4_t *v278;
  float32x4_t v279;
  float32x4_t v280;
  float32x4_t v281;
  float32x4_t v282;
  int8x16_t v283;
  float32x4_t v284;
  float32x4_t v285;
  uint64_t v286;
  float32x4_t v287;
  int8x16_t v288;
  float32x4_t v289;
  int8x16_t v290;
  float32x4_t v291;
  uint64_t v292;
  __int32 v293;
  uint64_t v294;
  int32x2_t v295;
  uint64_t v296;
  int64x2_t v297;
  float v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  int8x16_t v302;
  int8x16_t v303;
  int8x16_t v304;
  int8x16_t v305;
  int32x4_t v306;
  float32x4_t v307;
  float32x4_t v308;
  int8x16_t v309;
  int32x4_t *v310;
  float32x4_t v311;
  int8x16_t v312;
  float32x4_t v313;
  float32x4_t v314;
  int32x4_t v315;
  int8x16_t v316;
  float32x4_t v317;
  int8x16_t v318;
  float32x4_t v319;
  int8x16_t v320;
  float32x4_t v321;
  int8x16_t v322;
  const float *v323;
  float32x4_t v324;
  float32x4_t v325;
  float32x2_t v326;
  float32x4_t v327;
  float32x4_t v328;
  int8x16_t v329;
  int8x16_t v330;
  float32x4_t v331;
  float32x4_t v332;
  float32x4_t v333;
  int8x16_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  const float *v338;
  const float *v339;
  float32x4_t v340;
  float32x4_t *v342;
  float32x4_t v343;
  float32x4_t v344;
  unint64_t v345;
  unsigned int v346;
  unsigned int v347;
  float32x4_t v348;
  float v349;
  uint64_t v350;
  uint64_t v351;
  float v352;
  float v353;
  int32x4_t v354;
  float32x4_t v355;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t *v359;
  uint64_t v360;
  float v361;
  float v362;
  float v363;
  float32x4_t *v364;
  float32x4_t v365;
  int8x16_t *v366;
  uint64_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  float32x4_t v371;
  float32x4_t v372;
  int8x16_t v373;
  float v374;
  float v375;
  float32x4_t v376;
  float32x4_t v377;
  float32x4_t v378;
  int v379;
  float v380;
  int32x4_t *v381;
  float32x4_t v382;
  float32x4_t v383;
  float32x4_t v384;
  float32x4_t v385;
  float32x4_t v386;
  float32x4_t v387;
  float32x4_t v388;
  float32x4_t v389;
  float v390;
  float32x4_t v391;
  float32x4_t *v392;
  uint64_t v393;
  float v394;
  float v395;
  float v396;
  float32x4_t *v397;
  float32x4_t v398;
  uint64_t v399;
  float v400;
  float v401;
  float v402;
  float v403;
  float32x4_t v404;
  float32x4_t v405;
  float32x4_t v406;
  int v407;
  int32x4_t *v409;
  float32x4_t v410;
  float32x4_t v411;
  float32x4_t v412;
  float32x4_t v413;
  float32x4_t *v414;
  uint64_t v415;
  float v416;
  float v417;
  float v418;
  float32x4_t *v419;
  float32x4_t v420;
  float32x4_t v421;
  float32x4_t v422;
  float32x4_t v423;
  float32x4_t v424;
  int8x16_t v425;
  float v426;
  float32x4_t v427;
  float32x4_t v428;
  float v429;
  float32x4_t v430;
  int v431;
  uint64_t v432;
  float32x4_t v433;
  float32x4_t v434;
  int8x16_t v435;
  int8x16_t v436;
  int8x16_t v437;
  int8x16_t *v438;
  uint64_t v439;
  float v440;
  float v441;
  float v442;
  float32x4_t *v443;
  float32x4_t v444;
  uint64_t v445;
  uint64_t v446;
  float32x4_t *v447;
  int v448;
  uint64_t v449;
  float32x4_t v450;
  float32x4_t v451;
  float32x4_t v452;
  float32x4_t v453;
  float32x4_t v454;
  float32x4_t v456;
  float32x4_t v457;
  float32x4_t v458;
  float32x4_t v459;
  float32x4_t v460;
  float32x4_t v461;
  float32x4_t v462;
  float32x4_t v463;
  float32x4_t v464;
  float32x4_t v465;
  float32x4_t v466;
  int8x16_t v467;
  float32x4_t v468;
  float32x4_t v469;
  float32x4_t v470;
  float32x4_t v471;
  float32x4_t v472;
  float32x4_t v473;
  float32x4_t v474;
  float32x4_t v475;
  float32x4_t v476;
  float32x4_t v477;
  float32x4_t v478;
  float32x4_t v479;
  float32x4_t v480;
  float32x4_t v481;
  float32x4_t v482;
  float32x4_t v483;
  float32x4_t v484;
  float32x4_t v485;
  float32x4_t v486;
  float32x4_t v487;
  float32x4_t v488;
  uint64_t v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  float32x4_t v494;
  float32x4_t v495;
  float32x4_t v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float32x4_t v500;
  float32x4_t v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  float32x4_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  float32x4_t v523;
  float32x4_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float32x4_t v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  float32x4_t v536;
  float32x4_t v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  int8x16_t v542;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  float32x4_t v551;
  float32x4_t v552;
  float32x4_t v553;
  float32x4_t v554;
  float32x4_t v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  int64x2_t v563;
  uint64_t v564;
  float32x4_t v565;
  uint64_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  float32x4_t v571;
  float32x4_t v572;
  float32x4_t v573;
  float32x4_t v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float *v579;
  uint64_t v580;
  int32x4_t v581;
  int32x4_t v582;
  int32x4_t v583;
  int32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  int32x4_t v587;
  int32x4_t v588;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592;
  int32x4_t v593;
  int32x4_t v594;
  float32x4_t v595;
  float32x4_t v596;
  int64x2_t v597;
  int8x16_t v598;
  int32x4_t v599;
  int32x4_t v600;
  int32x4_t v601;
  unint64_t v602;
  float32x4_t v603;
  float32x4_t v604;
  signed int v605;
  uint64_t v606;
  int8x16_t v607;
  int v608;
  uint64_t v609;
  int32x4_t v610;
  int8x16_t v611;
  uint64_t v612;
  uint64_t v613;
  int32x4_t v614;
  uint64_t v615;
  const float *v616;
  float32x4_t v617;
  float32x2_t *v618;
  int8x16_t v619;
  int8x16_t v620;
  int v621;
  int8x16_t v622;
  float32x4_t v623;
  float32x4_t v624;
  int8x16_t v625;
  float32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  float32x4_t v631;
  float32x4_t v632;
  float32x4_t v633;
  float32x4_t v634;
  float32x4_t v635;
  float32x4_t v636;
  float32x4_t v637;
  float32x4_t v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float32x4_t v643;
  float32x4_t v644;
  float32x4_t v645;
  const float *v646;
  float32x4_t v647;
  float32x4_t v648;
  int8x16_t v649;
  float32x4_t v650;
  int8x16_t v651;
  int8x16_t v652;
  float32x4_t v653;
  int8x16_t v654;
  int8x16_t v655;
  int v656;
  float32x4_t v657;
  int8x16_t v658;
  float32x4_t v659;
  int8x16_t v660;
  float32x4_t v661;
  int8x16_t v662;
  signed __int32 v663;
  float32x4_t v664;
  int8x16_t v665;
  float32x4_t v666;
  float32x4_t v667;
  uint64_t v668;
  const float *v669;
  const float *v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  int v676;
  float32x4_t v677;
  float32x4_t v678;
  int8x16_t v679;
  int8x16_t v680;
  float32x4_t v681;
  int8x16_t v682;
  float32x4_t v683;
  float32x4_t v684;
  int8x16_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  float32x4_t v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  float32x4_t v697;
  float32x4_t v698;
  float32x4_t v699;
  float32x4_t v700;
  float32x4_t v701;
  const float *v702;
  float32x4_t v703;
  float32x4_t v704;
  float32x4_t v705;
  float32x4_t v706;
  int8x16_t v707;
  float32x4_t v708;
  int8x16_t v709;
  int32x4_t v710;
  int32x4_t v711;
  int8x16_t v712;
  int8x16_t v713;
  int8x16_t v714;
  float32x4_t v715;
  int64x2_t v716;
  int8x16_t v717;
  int8x16_t v718;
  int8x16_t v719;
  int8x16_t v720;
  int8x16_t v721;
  float32x4_t v722;
  int8x16_t v723;
  float32x4_t v724;
  int8x16_t v725;
  float32x4_t v726;
  int8x16_t v727;
  float32x4_t v728;
  float32x4_t v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  int8x16_t v733;
  int8x16_t v734;
  int32x4_t v735;
  __int32 v736;
  int8x16_t v737;
  int8x16_t v738;
  int8x16_t v739;
  int8x16_t v740;
  float32x4_t v741;
  float32x4_t v742;
  int8x16_t *v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  float32x4_t v752;
  float32x4_t v753;
  unsigned __int128 v754;
  float32x4_t v755;
  int8x16_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint16x4_t v760;
  float32x4_t v761;
  float32x4_t v762;
  float32x4_t v763;
  float32x4_t v764;
  float32x4_t v765;
  float32x4_t v766;
  int32x4_t v767;
  float32x4_t v768;
  int32x4_t v769;
  float32x4_t v770;
  float32x4_t v771;
  float32x4_t v772;
  float32x4_t v773;
  float32x4_t v774;
  float32x4_t v775;
  float32x4_t v776;
  float32x4_t v777;
  float32x4_t v778;
  float32x4_t v779;
  float32x4_t v780;
  float32x4_t v781;
  float32x4_t v782;
  float32x4_t v783;
  float32x4_t v784;
  float32x4_t v785;
  float32x4_t v786;
  float32x4_t v787;
  float32x4_t v788;
  float32x4_t v789;
  float32x4_t v790;
  float32x4_t v791;
  float32x4_t v792;
  float32x4_t v793;
  float32x4_t v794;
  float32x4_t v795;
  float32x4_t v796;
  float32x4_t v797;
  int64x2_t v798;
  int8x16_t v799;
  int32x4_t v800;
  unint64_t v801;
  int32x2_t v802;
  int32x2_t v803;
  uint64_t v804;
  int8x16_t v805;
  int8x16_t v806;
  float32x4_t v807;
  float32x4_t v808;
  float32x4_t v810;
  float32x4_t v811;
  int v812;
  uint64_t v813;
  int32x4_t v814;
  int32x4_t *v815;
  int32x4_t v816;
  int64x2_t v817;
  int64x2_t v818;
  int8x16_t *v819;
  float32x4_t v820;
  float32x4_t v821;
  float32x4_t v822;
  float32x4_t v823;
  float32x4_t v824;
  float32x4_t v825;
  float32x4_t v826;
  float32x4_t v827;
  float32x4_t v828;
  int8x16_t v829;
  int8x16_t v830;
  int8x16_t *v831;
  int8x16_t v832;
  int32x4_t v833;
  unsigned __int8 v834;
  int32x4_t v835;
  uint64_t v836;
  int8x16_t v837;
  int8x16_t v838;
  float32x4_t v839;
  float32x4_t v840;
  float32x4_t v841;
  float32x4_t v842;
  float32x4_t v843;
  float32x4_t v844;
  float32x4_t v845;
  float32x4_t v846;
  int32x4_t v847;
  int64x2_t v848;
  int8x16_t v849;
  int8x16_t v850;
  uint64_t v851;
  float32x4_t v852;
  float32x4_t *v853;
  float32x4_t v854;
  float32x4_t v855;
  int32x4_t v856;
  int32x4_t v857;
  int8x16_t v858;
  int8x16_t v859;
  int8x16_t *v860;
  int32x4_t v861;
  float32x4_t v862;
  float32x4_t v863;
  float32x4_t v864;
  uint64_t v865;
  float32x4_t v866;
  float32x4_t v867;
  float32x4_t v868;
  uint64_t v869;
  int32x4_t v870;
  float32x4_t v871;
  int32x4_t *v872;
  int32x4_t v873;
  uint64_t v874;
  float32x4_t v875;
  float32x4_t v876;
  float32x4_t v877;
  float32x4_t v878;
  float32x4_t v879;
  float32x4_t v880;
  float32x4_t v881;
  float32x4_t v882;
  float32x4_t v883;
  float32x4_t v884;
  int8x16_t v885;
  int8x16_t v886;
  int8x16_t *v887;
  int32x4_t v888;
  unsigned __int8 v889;
  uint64_t v890;
  int8x16_t v891;
  int8x16_t v892;
  float32x4_t v893;
  float32x4_t v894;
  float32x4_t v895;
  float32x4_t v896;
  float32x4_t v897;
  float32x4_t v898;
  float32x4_t v899;
  float32x4_t v900;
  int8x16_t v901;
  int8x16_t v902;
  uint64_t v903;
  float32x4_t v904;
  float32x4_t *v905;
  float32x4_t v906;
  float32x4_t v907;
  int32x4_t v908;
  int32x4_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t *v912;
  int32x4_t v913;
  float32x4_t v914;
  float32x4_t v915;
  float32x4_t v916;
  float32x4_t v917;
  int8x16_t v918;
  int8x16_t v919;
  int8x16_t v920;
  float32x4_t v921;
  float32x4_t v922;
  float v923;
  float32x4_t v924;
  int8x16_t v925;
  int32x4_t v926;
  float32x4_t v927;
  float32x4_t v928;
  float32x4_t v929;
  float32x4_t v930;
  float32x4_t v931;
  float32x4_t v932;
  float32x4_t v933;
  int8x16_t v934;
  int8x16_t v935;
  int8x16_t v936;
  float32x4_t v937;
  uint64_t v938;
  float32x4_t v939;
  int8x16_t v940;
  float32x4_t v941;
  float32x4_t v942;
  int8x16_t v943;
  float32x4_t v944;
  int8x16_t v945;
  int8x16_t v946;
  int8x16_t v947;
  float32x4_t v948;
  float32x4_t v949;
  int8x16_t v950;
  float32x4_t v951;
  float32x4_t *v952;
  float32x4_t v953;
  uint64_t v954;
  unint64_t v955;
  int32x4_t v956;
  int32x4_t v957;
  float32x4_t v958;
  int8x16_t v959;
  float v960;
  float32x4_t v961;
  float32x4_t v962;
  float32x4_t v963;
  float32x4_t v964;
  float32x4_t v965;
  float32x4_t v966;
  float32x4_t v967;
  float32x4_t v969;
  float32x4_t *v970;
  uint64_t v971;
  float v972;
  int8x16_t *v973;
  int8x16_t v974;
  float v975;
  float v976;
  uint64_t v977;
  uint64_t v978;
  const float *v979;
  float32x4_t v980;
  float32x4_t v981;
  float32x4_t *v982;
  uint64_t v983;
  uint64_t v984;
  const float *v985;
  float v986;
  float32x4_t v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t *v991;
  float32x4_t *v992;
  uint64_t v993;
  uint64_t v994;
  int v995;
  uint64_t v996;
  float32x4_t v997;
  float32x4_t v998;
  int8x16_t *v999;
  float32x4_t v1000;
  float32x4_t v1001;
  float32x4_t v1002;
  float32x4_t v1003;
  float32x4_t v1004;
  int8x16_t *v1005;
  int8x16_t *v1006;
  float32x4_t v1007;
  float32x4_t v1008;
  float32x4_t v1009;
  float32x4_t v1010;
  int8x16_t *v1011;
  float32x4_t v1012;
  float32x4_t v1013;
  float32x4_t v1014;
  int8x8_t v1015;
  int8x16_t v1017;
  float32x4_t v1018;
  float32x4_t v1019;
  float32x4_t v1020;
  float32x4_t v1021;
  float32x4_t v1022;
  float32x4_t v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  float32x4_t v1036;
  float32x4_t v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  float32x4_t v1040;
  uint64_t v1041;
  float32x4_t v1042;
  float32x4_t v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  float32x4_t v1046;
  float32x4_t v1047;
  float32x4_t v1048;
  float32x4_t v1049;
  float32x4_t v1050;
  float32x4_t v1051;
  float32x4_t v1052;
  float32x4_t v1053;
  float32x4_t v1054;
  float32x4_t v1055;
  float32x4_t v1056;
  float32x4_t v1057;
  float32x4_t v1058;
  float32x4_t v1059;
  float32x4_t v1060;
  float32x4_t v1061;
  float32x4_t v1062;
  float32x4_t v1063;
  float32x4_t v1064;
  float32x4_t v1065;
  float32x4_t v1066;
  float32x4_t v1067;
  float32x4_t v1068;
  float32x4_t v1069;
  float32x4_t v1070;
  float32x4_t v1071;
  float32x4_t v1072;
  float32x4_t v1073;
  float32x4_t v1074;
  float32x4_t v1075;
  float32x4_t v1076;
  float32x4_t v1077;
  float32x4_t v1078;
  float32x4_t v1079;
  float32x4_t v1080;
  float32x4_t v1081;
  float32x4_t v1082;
  float32x4_t v1083;
  float32x4_t v1084;
  float32x4_t v1085;
  float32x4_t v1086;
  float32x4_t v1087;
  float32x4_t v1088;
  float32x4_t v1089;
  float32x4_t v1090;
  float32x4_t v1091;
  float32x4_t v1092;
  float32x4_t v1093;
  float32x4_t v1094;
  float32x4_t v1095;
  float32x4_t v1096;
  int8x16_t *v1097;
  float32x4_t v1098;
  float32x4_t v1099;
  int8x16_t *v1100;
  int8x16_t *v1101;
  int8x16_t *v1102;
  float32x4_t v1103;
  float32x4_t v1104;
  float32x4_t v1105;
  float32x4_t v1106;
  float32x4_t v1107;
  float32x4_t v1108;
  float32x4_t v1109;
  float32x4_t v1110;
  int8x16_t v1111;
  float32x4_t v1113;
  float32x4_t v1114;
  float32x4_t v1115;
  float32x4_t v1116;
  float32x4_t v1117;
  float32x4_t v1118;
  float32x4_t v1119;
  float32x4_t v1120;
  float32x4_t v1121;
  float32x4_t v1122;
  float32x2_t v1123;
  float v1124;
  float32x2_t v1125;
  float v1126;
  float v1128;
  unint64_t v1129;
  int8x16_t v1130;
  int8x16_t v1131;
  int8x16_t v1132;
  int8x16_t v1133;
  int8x16_t v1134;
  unsigned int v1135;
  unint64_t v1136;
  unint64_t v1137;
  int8x16_t v1138;
  unsigned __int8 v1139;
  unsigned int v1140;
  uint64_t v1141;
  unsigned int v1142;
  int v1143;
  int16x8_t v1144;
  uint16x8_t v1145;
  unsigned int v1146;
  int8x16_t v1147;
  int16x8_t v1148;
  int16x8_t v1149;
  int16x8_t v1150;
  int8x16_t v1151;
  int8x16_t v1152;
  int8x16_t v1153;
  int8x16_t v1154;
  uint64x2_t v1155;
  int64x2_t v1156;
  int8x16_t v1157;
  uint64_t v1158;
  unint64_t v1159;
  int16x8_t v1160;
  int16x8_t v1161;
  int8x16_t v1162;
  int16x8_t v1163;
  int16x8_t v1164;
  int16x8_t v1165;
  int16x8_t v1166;
  int16x8_t v1167;
  int8x16_t v1168;
  int8x16_t v1169;
  int8x16_t v1170;
  int16x8_t v1171;
  int16x8_t v1172;
  int32x4_t v1173;
  unint64_t v1174;
  uint8x16_t v1175;
  int8x16_t v1176;
  int8x16_t v1177;
  int8x16_t v1178;
  int32x4_t v1179;
  int16x8_t v1180;
  int8x16_t v1181;
  int8x16_t v1182;
  int32x4_t v1183;
  int8x16_t v1184;
  int8x16_t v1185;
  int8x16_t v1186;
  int32x4_t v1187;
  int8x16_t v1188;
  int8x16_t v1189;
  int8x16_t v1190;
  int8x16_t v1191;
  int8x16_t v1192;
  int8x16_t v1193;
  int8x16_t v1194;
  int32x4_t v1195;
  int32x2_t v1196;
  int32x4_t v1197;
  int32x4_t v1198;
  unsigned int v1199;
  unsigned int v1200;
  int8x16_t v1201;
  int8x16_t v1202;
  int8x16_t v1203;
  int8x16_t v1204;
  int8x16_t v1205;
  int v1206;
  unsigned __int128 v1207;
  int8x16_t v1208;
  int8x16_t v1209;
  int8x16_t v1210;
  int8x16_t v1211;
  int8x16_t v1212;
  int8x16_t v1213;
  int8x16_t v1214;
  int8x16_t v1215;
  int16x8_t v1216;
  int16x8_t v1217;
  int16x8_t v1218;
  int16x8_t v1219;
  int16x8_t v1220;
  int16x8_t v1221;
  int16x8_t v1222;
  int8x16_t v1223;
  int8x16_t v1224;
  int8x16_t v1225;
  int8x16_t v1226;
  int16x8_t v1227;
  int16x8_t v1228;
  int8x16_t v1229;
  int16x8_t v1230;
  int8x16_t v1231;
  int8x16_t v1232;
  int8x16_t v1233;
  int8x16_t v1234;
  int8x16_t v1235;
  int8x16_t v1236;
  int8x16_t v1237;
  int8x16_t v1238;
  int8x16_t v1239;
  uint16x8_t v1240;
  int16x8_t v1241;
  int8x16_t v1242;
  int8x16_t v1243;
  int8x16_t v1244;
  int8x16_t v1245;
  int8x16_t v1246;
  int8x16_t v1247;
  float v1249;
  int64x2_t v1250;
  int64x2_t v1251;
  int64x2_t v1252;
  float32x4_t v1253;
  float32x4_t v1254;
  float32x4_t v1255;
  float32x4_t v1256;
  float32x4_t v1257;
  float32x4_t v1258;
  float32x4_t v1259;
  float32x4_t v1260;
  float32x4_t v1261;
  float32x4_t v1262;
  float32x4_t v1263;
  float32x4_t v1264;
  float32x4_t v1265;
  float32x4_t v1266;
  int8x16_t v1267;
  float32x4_t v1268;
  uint64_t v1269;
  float32x4_t v1270;
  uint64_t v1271;
  unsigned __int8 v1272;
  unint64_t v1273;
  float32x4_t v1275;
  float32x4_t v1276;
  float32x4_t v1277;
  int32x4_t v1278;
  int v1279;
  float32x4_t v1280;
  uint8x8_t v1281;
  int8x16_t *v1282;
  int v1283;
  uint64_t v1284;
  float32x4_t v1285;
  float v1286;
  signed __int32 v1287;
  float32x4_t v1288;
  float32x4_t v1289;
  unsigned int v1290;
  float32x4_t v1291;
  float32x4_t v1292;
  float32x4_t v1293;
  float32x4_t v1294;
  float32x4_t v1295;
  float32x4_t v1296;
  float32x4_t v1297;
  uint64_t v1298;
  float32x4_t v1299;
  float32x4_t v1300;
  float32x4_t v1301;
  float32x4_t v1302;
  int32x4_t v1303;
  float32x4_t v1304;
  float32x4_t v1305;
  float32x4_t v1306;
  float32x4_t v1307;
  float32x4_t v1308;
  float32x4_t v1309;
  float32x4_t v1310;
  float32x4_t v1311;
  float32x4_t v1312;
  float32x4_t v1313;
  int32x4_t v1314;
  int32x4_t v1315;
  __int128 v1316;
  float32x4_t v1317;
  float32x4_t v1318;
  __int128 v1319;
  float32x4_t v1320;
  float32x4_t v1321[2];
  int32x4_t v1322;
  int32x4_t v1323;
  int8x16_t v1324;
  unint64_t v1325;
  float32x4_t v1326[2];
  int32x4_t v1327;
  float32x4_t v1328;
  __int128 v1329;
  unint64_t v1330;
  float32x4_t v1331;
  _BYTE v1332[48];
  _BYTE v1333[64];
  float32x4_t v1334;
  _BYTE v1335[48];
  _BYTE v1336[64];
  int32x4_t v1337;
  int32x4_t v1338;
  _BYTE v1339[64];
  int8x16_t v1340;
  int8x16_t v1341;
  _BYTE v1342[112];
  __int128 v1343;
  float32x4_t v1344;
  _BYTE v1345[48];
  _BYTE v1346[64];
  float32x4_t v1347;
  float32x4_t v1348;
  float32x4_t v1349;
  float32x4_t v1350;
  float32x4_t v1351;
  float32x4_t v1352;
  float32x4_t v1353;
  float32x4_t v1354;
  int32x4_t v1355;
  int32x4_t v1356;
  float32x4_t v1357;
  float32x4_t v1358;
  float32x4_t v1359;
  float32x4_t v1360;
  float32x4_t v1361;
  float32x4_t v1362;
  float32x4_t v1363;
  float32x4_t v1364;
  float32x4_t v1365;
  float32x4_t v1366;
  float32x4_t v1367;
  float32x4_t v1368;
  float32x4_t v1369;
  float32x4_t v1370;
  float32x4_t v1371;
  float32x4_t v1372;
  float32x4_t v1373;
  float32x4_t v1374;
  float32x4_t v1375;
  float32x4_t v1376;
  float32x4_t v1377;
  float32x4_t v1378;
  float32x4_t v1379;
  float32x4_t v1380;
  float32x4_t v1381;
  float32x4_t v1382;
  float32x4_t v1383;
  float32x4_t v1384;
  float32x4_t v1385;
  float32x4_t v1386;
  uint64_t v1387;
  int8x16x2_t v1388;
  int8x16x2_t v1389;

  v53 = a3;
  v1387 = *MEMORY[0x24BDAC8D0];
  v1271 = a1 + 1136;
  v1282 = (int8x16_t *)(a1 + 272);
  v1285 = *(float32x4_t *)(a1 + 16);
  v55 = *(char *)(a1 + 134);
  if (v55 >= 1 && *(_BYTE *)(a1 + 135))
  {
    v56 = 0;
    v57.i64[0] = -1;
    v57.i64[1] = -1;
    v58 = (int8x16_t)vcgtq_s32(*(int32x4_t *)v1271, v57);
    v59 = (int8x16_t)vcgtq_s32(*(int32x4_t *)(a1 + 1152), v57);
    v60 = (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 160), v59);
    v61 = (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 144), v58);
    v62 = (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 288), v59);
    a8 = (float32x4_t)vandq_s8(*v1282, v58);
    a9 = (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 416), v59);
    v63 = (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 400), v58);
    v66 = *(int64x2_t *)(a1 + 528);
    v64 = (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + 544), v59);
    v65 = (float32x4_t)vandq_s8((int8x16_t)v66, v58);
    v66.i64[0] = 64;
    do
    {
      v51.i64[0] = v56;
      v67.i64[0] = *(_QWORD *)(a1 + v56 + 1184);
      v67.i64[1] = -1;
      v68 = (int8x16_t)vcgtq_s32((int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v51, v66).i64[0], 0), v67, *(int8x16_t *)(a1 + v56 + 1184)), v57);
      v69 = (int8x16_t)vcgtq_s32(*(int32x4_t *)(a1 + v56 + 1168), v57);
      v61 = vaddq_f32(v61, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v56 + 176), v69));
      v60 = vaddq_f32(v60, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v56 + 192), v68));
      a8 = vaddq_f32(a8, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v56 + 304), v69));
      v62 = vaddq_f32(v62, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v56 + 320), v68));
      v63 = vaddq_f32(v63, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v56 + 432), v69));
      a9 = vaddq_f32(a9, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v56 + 448), v68));
      v51 = (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v56 + 560), v69);
      v65 = vaddq_f32(v65, v51);
      v64 = vaddq_f32(v64, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v56 + 576), v68));
      v56 += 32;
    }
    while (v56 != 96);
    v1285 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v61, v60), vaddq_f32(a8, v62)), vpaddq_f32(vaddq_f32(v63, a9), vaddq_f32(v65, v64))), ReciprocalTable[30 - v55]);
  }
  v1249 = *a3;
  __asm
  {
    FMOV            V1.4S, #1.0
    FMOV            V0.4S, #3.0
  }
  v1313 = _Q0;
  v75 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1285.f32, 0);
  v76 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1285.f32, 1);
  v77 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1285, 2);
  v1306 = _Q1;
  v1312 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1285, 3);
  v1254 = v76;
  v1255 = v75;
  v1253 = v77;
  if (_NF ^ _VF | _ZF)
  {
    v95 = 0;
    v96 = *(float32x2_t **)(a1 + 32);
    v97 = (int8x16_t)xmmword_20631C0A0;
    v98.i64[0] = 0x7F0000007FLL;
    v98.i64[1] = 0x7F0000007FLL;
    v99.i64[0] = -1;
    v99.i64[1] = -1;
    v100 = (int8x16_t)xmmword_20631C080;
    a8.i64[0] = 96;
    v101.i64[0] = 0x800000008;
    v101.i64[1] = 0x800000008;
    v102.i64[0] = -1;
    v102.i64[1] = -1;
    v103.i64[0] = 0x7F0000007FLL;
    v103.i64[1] = 0x7F0000007FLL;
    v104.i64[0] = 0x7F0000007FLL;
    v104.i64[1] = 0x7F0000007FLL;
    while (1)
    {
      v105 = vsubq_f32(*(float32x4_t *)(a1 + v95 + 144), v75);
      v106 = vsubq_f32(*(float32x4_t *)(a1 + v95 + 160), v75);
      v107 = vsubq_f32(*(float32x4_t *)(a1 + v95 + 272), v76);
      v108 = vsubq_f32(*(float32x4_t *)(a1 + v95 + 288), v76);
      v109 = vsubq_f32(*(float32x4_t *)(a1 + v95 + 400), v77);
      v110 = vsubq_f32(*(float32x4_t *)(a1 + v95 + 416), v77);
      v111 = vsubq_f32(*(float32x4_t *)(a1 + v95 + 528), v1312);
      v112 = vsubq_f32(*(float32x4_t *)(a1 + v95 + 544), v1312);
      v113 = vmulq_f32(v106, v106);
      v114 = vmulq_f32(v105, v105);
      v115 = vmulq_f32(v108, v108);
      v116 = vmulq_f32(v107, v107);
      v117 = vmulq_f32(v110, v110);
      v118 = vmulq_f32(v109, v109);
      v119 = vmulq_f32(v112, v112);
      v120 = vmulq_f32(v111, v111);
      if (!v96)
        break;
      v121 = (int8x16_t)vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v115, *v96, 1), v113, COERCE_FLOAT(*(_OWORD *)v96->f32)), v117, *(float32x4_t *)v96->f32, 2), v119, *(float32x4_t *)v96->f32, 3), v1313);
      v122 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v116, *v96, 1), v114, COERCE_FLOAT(*(_OWORD *)v96->f32)), v118, *(float32x4_t *)v96->f32, 2), v120, *(float32x4_t *)v96->f32, 3), v1313);
      if (*(_BYTE *)(a1 + 135))
        goto LABEL_14;
LABEL_15:
      v118.i64[0] = v95;
      v123 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v118, (int64x2_t)a8).i64[0], 0), (int8x16_t)v121.u64[0], v121);
      v102 = vbslq_s8((int8x16_t)vcgtq_f32(v123, v104), v97, v102);
      v99 = vbslq_s8((int8x16_t)vcgtq_f32(v122, v103), v100, v99);
      v103 = vmaxnmq_f32(v103, v122);
      v104 = vmaxnmq_f32(v104, v123);
      v100 = (int8x16_t)vaddq_s32((int32x4_t)v100, v101);
      v97 = (int8x16_t)vaddq_s32((int32x4_t)v97, v101);
      v95 += 32;
      if (v95 == 128)
      {
        if (*(_BYTE *)(a1 + 136))
          v124 = 0;
        else
          v124 = -1;
        v125 = vmaxnmq_f32(v103, v104);
        v126 = vbslq_s8((int8x16_t)vcgtq_f32(v103, v104), v99, v102);
        v127 = (float32x4_t)vextq_s8((int8x16_t)v125, (int8x16_t)v125, 8uLL);
        v128 = vbslq_s8((int8x16_t)vcgtq_f32(v125, v127), v126, vextq_s8(v126, v126, 8uLL));
        v129 = vmaxnmq_f32(v125, v127);
        v130 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f32(v129, (float32x4_t)vrev64q_s32((int32x4_t)v129)), v128, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v128.i8, 1));
        v131 = a1 + 656;
        v132 = *(float32x4_t *)(a1 + 656 + 16 * v130.i32[0]);
        v133 = vsubq_f32(v1285, v132);
        if (v96)
          v134 = *(float32x4_t *)v96->f32;
        else
          v134 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
        v137 = 0;
        v138 = v130.i32[0];
        v130.i64[0] = 96;
        v139 = (int32x4_t)vmulq_f32(v133, v134);
        v140 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 0);
        v141 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1);
        v142 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2);
        v1300 = v132;
        v143 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 3);
        v144 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.i8, 0);
        v145.i64[0] = 0x7F0000007FLL;
        v145.i64[1] = 0x7F0000007FLL;
        v146.i64[0] = -1;
        v146.i64[1] = -1;
        v147 = (float32x4_t)vdupq_laneq_s32(v139, 2);
        v148 = (float32x4_t)vdupq_laneq_s32(v139, 3);
        v149.i64[0] = 0x800000008;
        v149.i64[1] = 0x800000008;
        v150.i64[0] = -1;
        v150.i64[1] = -1;
        v151 = (int8x16_t)xmmword_20631C0A0;
        v152.i64[0] = 0x7F0000007FLL;
        v152.i64[1] = 0x7F0000007FLL;
        v153.i64[0] = 0x7F0000007FLL;
        v153.i64[1] = 0x7F0000007FLL;
        v154 = (int8x16_t)xmmword_20631C080;
        do
        {
          v155 = (int32x4_t *)(a1 + v137);
          v156 = vsubq_f32(*(float32x4_t *)(a1 + v137 + 144), v140);
          v157 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v137 + 288), v141), *(float32x2_t *)v139.i8, 1), v144, vsubq_f32(*(float32x4_t *)(a1 + v137 + 160), v140)), v147, vsubq_f32(*(float32x4_t *)(a1 + v137 + 416), v142)), v148, vsubq_f32(*(float32x4_t *)(a1 + v137 + 544), v143));
          v158 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v137 + 272), v141), *(float32x2_t *)v139.i8, 1), v144, v156), v147, vsubq_f32(*(float32x4_t *)(a1 + v137 + 400), v142)), v148, vsubq_f32(*(float32x4_t *)(a1 + v137 + 528), v143));
          if (*(_BYTE *)(a1 + 135))
          {
            v156 = (float32x4_t)vcltzq_s32(v155[72]);
            v157 = vbslq_s8((int8x16_t)v156, v145, v157);
            v158 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v155[71]), v145, (int8x16_t)v158);
          }
          v156.i64[0] = v137;
          v159 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v156, v130).i64[0], 0), (int8x16_t)v157.u64[0], v157);
          v150 = vbslq_s8((int8x16_t)vcgtq_f32(v159, v153), v151, v150);
          v146 = vbslq_s8((int8x16_t)vcgtq_f32(v158, v152), v154, v146);
          v152 = vmaxnmq_f32(v152, v158);
          v153 = vmaxnmq_f32(v153, v159);
          v154 = (int8x16_t)vaddq_s32((int32x4_t)v154, v149);
          v151 = (int8x16_t)vaddq_s32((int32x4_t)v151, v149);
          v137 += 32;
        }
        while (v137 != 128);
        v160 = vmaxnmq_f32(v152, v153);
        v161 = vbslq_s8((int8x16_t)vcgtq_f32(v152, v153), v146, v150);
        v162 = (float32x4_t)vextq_s8((int8x16_t)v160, (int8x16_t)v160, 8uLL);
        v163 = vbslq_s8((int8x16_t)vcgtq_f32(v160, v162), v161, vextq_s8(v161, v161, 8uLL));
        v164 = vmaxnmq_f32(v160, v162);
        v165 = vbslq_s8((int8x16_t)vcgtq_f32(v164, (float32x4_t)vrev64q_s32((int32x4_t)v164)), v163, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v163.i8, 1)).i32[0];
        v1296 = *(float32x4_t *)(a1 + 16 * v165 + 656);
        if (*(_BYTE *)(a1 + 136))
          v166 = 3;
        else
          v166 = 4;
        if (*(_BYTE *)(a1 + 136))
          v167 = 6;
        else
          v167 = 8;
        v168 = WeightInfoForSingleLineSingleWeight_6x5(30, v167);
        v169 = v1300;
        v170 = 0;
        v171 = ReciprocalTable[BYTE4(v168)];
        v172 = (int8x16_t)vsubq_f32(v1296, v1300);
        v173.i64[0] = 0x8000000080000000;
        v173.i64[1] = 0x8000000080000000;
        v174 = (float32x4_t)vdupq_n_s32(0x3B808081u);
        v175 = vabdq_f32(v1296, v1300);
        v176 = vdivq_f32(v1306, (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v174, v175), vorrq_s8(vandq_s8(v172, v173), (int8x16_t)v174), v172));
        v177 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v176.f32, 0);
        v175.f32[0] = v171 * (float)((float)((float)(v166 + v124) * 0.25) * v171);
        v178 = (int32x4_t)vmulq_f32(v1300, v176);
        v179 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.i8, 0));
        v180.i32[0] = v176.i32[1];
        v181 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v176.f32, 1);
        v182 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.i8, 1));
        v183.i32[0] = v176.i32[2];
        v184 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v176, 2);
        v185 = vnegq_f32((float32x4_t)vdupq_laneq_s32(v178, 2));
        v186.i32[0] = v176.i32[3];
        v187 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v176, 3);
        v188 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v175.f32, 0);
        v189 = vnegq_f32((float32x4_t)vdupq_laneq_s32(v178, 3));
        v190 = 0uLL;
        v191.i64[0] = 96;
        v192 = 0uLL;
        do
        {
          v193 = vmlaq_f32(v179, v177, *(float32x4_t *)(a1 + v170 + 144));
          v194 = vmlaq_f32(v179, v177, *(float32x4_t *)(a1 + v170 + 160));
          v195 = vmlaq_f32(v182, v181, *(float32x4_t *)(a1 + v170 + 288));
          v196 = vmlaq_f32(v182, v181, *(float32x4_t *)(a1 + v170 + 272));
          v197 = vmlaq_f32(v185, v184, *(float32x4_t *)(a1 + v170 + 416));
          v198 = vmlaq_f32(v185, v184, *(float32x4_t *)(a1 + v170 + 400));
          v199 = vmlaq_f32(v189, v187, *(float32x4_t *)(a1 + v170 + 528));
          v200 = vmlaq_f32(v189, v187, *(float32x4_t *)(a1 + v170 + 544));
          v201 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v195, v195), v194, v194), v197, v197), v200, v200);
          v194.i64[0] = v170;
          v202 = vcgtq_f32(v188, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v196, v196), v193, v193), v198, v198), v199, v199));
          v203 = (int8x16_t)vcgtq_f32(v188, v201);
          v204 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v194, v191).i64[0], 0), (int8x16_t)v203.u64[0], v203);
          v205 = (int32x4_t *)((char *)&v1355 + v170);
          *v205 = v202;
          v205[1] = v204;
          v192 = vsubq_s32(v192, v204);
          v190 = vsubq_s32(v190, v202);
          v170 += 32;
        }
        while (v170 != 128);
        v206 = vaddq_s32(v190, v192);
        v206.i64[0] = vpaddq_s32(v206, v206).u64[0];
        v207 = vpadd_s32(*(int32x2_t *)v206.i8, *(int32x2_t *)v206.i8).u8[0];
        v53 = a3;
        if ((v207 & 0xFE) != 0)
        {
          v208 = 0;
          v209 = (int8x16_t)vcltzq_s32(v1355);
          v210 = (int8x16_t)vcltzq_s32(v1356);
          v211 = (float32x4_t)vandq_s8(v210, *(int8x16_t *)(a1 + 160));
          v212 = (float32x4_t)vandq_s8(v209, *(int8x16_t *)(a1 + 144));
          v213 = (float32x4_t)vandq_s8(v1282[1], v210);
          v214 = (float32x4_t)vandq_s8(*v1282, v209);
          v215 = (float32x4_t)vandq_s8(v1282[9], v210);
          v216 = (float32x4_t)vandq_s8(v1282[8], v209);
          v219 = (int64x2_t)v1282[16];
          v217 = (float32x4_t)vandq_s8(v1282[17], v210);
          v218 = (float32x4_t)vandq_s8((int8x16_t)v219, v209);
          v219.i64[0] = 64;
          do
          {
            v201.i64[0] = v208;
            v220 = (int8x16_t)vcltzq_s32((int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v201, v219).i64[0], 0), (int8x16_t)*(unint64_t *)((char *)&v1357 + v208 + 16), *(int8x16_t *)((char *)&v1357 + v208 + 16)));
            v221 = (int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&v1357 + v208));
            v212 = vaddq_f32(v212, (float32x4_t)vandq_s8(v221, *(int8x16_t *)(a1 + v208 + 176)));
            v211 = vaddq_f32(v211, (float32x4_t)vandq_s8(v220, *(int8x16_t *)(a1 + v208 + 192)));
            v214 = vaddq_f32(v214, (float32x4_t)vandq_s8(v221, *(int8x16_t *)(a1 + v208 + 304)));
            v213 = vaddq_f32(v213, (float32x4_t)vandq_s8(v220, *(int8x16_t *)(a1 + v208 + 320)));
            v216 = vaddq_f32(v216, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v208 + 432), v221));
            v215 = vaddq_f32(v215, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v208 + 448), v220));
            v201 = *(float32x4_t *)(a1 + v208 + 560);
            v218 = vaddq_f32(v218, (float32x4_t)vandq_s8((int8x16_t)v201, v221));
            v217 = vaddq_f32(v217, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v208 + 576), v220));
            v208 += 32;
          }
          while (v208 != 96);
          v222 = vpaddq_f32(vaddq_f32(v212, v211), vaddq_f32(v214, v213));
          v182 = vpaddq_f32(vaddq_f32(v216, v215), vaddq_f32(v218, v217));
          v169 = vmulq_n_f32(vpaddq_f32(v222, v182), ReciprocalTable[v207]);
        }
        v223 = 0;
        v176.f32[0] = v176.f32[0] * v1296.f32[0];
        v224 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v176.f32, 0));
        *(float *)v180.i32 = vmuls_lane_f32(*(float *)v180.i32, *(float32x2_t *)v1296.f32, 1);
        v225 = vnegq_f32((float32x4_t)vdupq_lane_s32(v180, 0));
        *(float *)v183.i32 = vmuls_lane_f32(*(float *)v183.i32, v1296, 2);
        v226 = vnegq_f32((float32x4_t)vdupq_lane_s32(v183, 0));
        *(float *)v186.i32 = vmuls_lane_f32(*(float *)v186.i32, v1296, 3);
        v227 = vnegq_f32((float32x4_t)vdupq_lane_s32(v186, 0));
        v228 = 0uLL;
        v182.i64[0] = 96;
        v229 = 0uLL;
        do
        {
          v230 = vmlaq_f32(v224, v177, *(float32x4_t *)(a1 + v223 + 144));
          v231 = vmlaq_f32(v224, v177, *(float32x4_t *)(a1 + v223 + 160));
          v232 = vmlaq_f32(v225, v181, *(float32x4_t *)(a1 + v223 + 288));
          v233 = vmlaq_f32(v225, v181, *(float32x4_t *)(a1 + v223 + 272));
          v234 = vmlaq_f32(v226, v184, *(float32x4_t *)(a1 + v223 + 416));
          v235 = vmlaq_f32(v226, v184, *(float32x4_t *)(a1 + v223 + 400));
          v236 = vmlaq_f32(v227, v187, *(float32x4_t *)(a1 + v223 + 528));
          v237 = vmlaq_f32(v227, v187, *(float32x4_t *)(a1 + v223 + 544));
          v238 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v232, v232), v231, v231), v234, v234), v237, v237);
          v231.i64[0] = v223;
          v239 = vcgtq_f32(v188, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v233, v233), v230, v230), v235, v235), v236, v236));
          v240 = (int8x16_t)vcgtq_f32(v188, v238);
          v241 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v231, (int64x2_t)v182).i64[0], 0), (int8x16_t)v240.u64[0], v240);
          v242 = (int32x4_t *)((char *)&v1355 + v223);
          *v242 = v239;
          v242[1] = v241;
          v229 = vsubq_s32(v229, v241);
          v228 = vsubq_s32(v228, v239);
          v223 += 32;
        }
        while (v223 != 128);
        v243 = vaddq_s32(v228, v229);
        v243.i64[0] = vpaddq_s32(v243, v243).u64[0];
        v244 = vpadd_s32(*(int32x2_t *)v243.i8, *(int32x2_t *)v243.i8).u8[0];
        v245 = v244 + v207;
        v1301 = v169;
        if ((v244 & 0xFE) != 0)
        {
          v246 = 0;
          v247 = (int8x16_t)vcltzq_s32(v1355);
          v248 = (int8x16_t)vcltzq_s32(v1356);
          v249 = (float32x4_t)vandq_s8(v248, *(int8x16_t *)(a1 + 160));
          v250 = (float32x4_t)vandq_s8(v247, *(int8x16_t *)(a1 + 144));
          v251 = (float32x4_t)vandq_s8(v1282[1], v248);
          v252 = (float32x4_t)vandq_s8(*v1282, v247);
          v253 = (float32x4_t)vandq_s8(v1282[9], v248);
          v254 = (float32x4_t)vandq_s8(v1282[8], v247);
          v257 = (int64x2_t)v1282[16];
          v255 = (float32x4_t)vandq_s8(v1282[17], v248);
          v256 = (float32x4_t)vandq_s8((int8x16_t)v257, v247);
          v257.i64[0] = 64;
          do
          {
            v229.i64[0] = v246;
            v258 = (int8x16_t)vcltzq_s32((int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v229, v257).i64[0], 0), (int8x16_t)*(unint64_t *)((char *)&v1357 + v246 + 16), *(int8x16_t *)((char *)&v1357 + v246 + 16)));
            v259 = (int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&v1357 + v246));
            v250 = vaddq_f32(v250, (float32x4_t)vandq_s8(v259, *(int8x16_t *)(a1 + v246 + 176)));
            v249 = vaddq_f32(v249, (float32x4_t)vandq_s8(v258, *(int8x16_t *)(a1 + v246 + 192)));
            v252 = vaddq_f32(v252, (float32x4_t)vandq_s8(v259, *(int8x16_t *)(a1 + v246 + 304)));
            v251 = vaddq_f32(v251, (float32x4_t)vandq_s8(v258, *(int8x16_t *)(a1 + v246 + 320)));
            v254 = vaddq_f32(v254, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v246 + 432), v259));
            v253 = vaddq_f32(v253, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v246 + 448), v258));
            v229 = *(int32x4_t *)(a1 + v246 + 560);
            v256 = vaddq_f32(v256, (float32x4_t)vandq_s8((int8x16_t)v229, v259));
            v255 = vaddq_f32(v255, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v246 + 576), v258));
            v246 += 32;
          }
          while (v246 != 96);
          v1296 = vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v250, v249), vaddq_f32(v252, v251)), vpaddq_f32(vaddq_f32(v254, v253), vaddq_f32(v256, v255))), ReciprocalTable[v244]);
        }
        v1330 = WeightInfoForSingleLineSingleWeight_6x5(v245, v167);
        if (*(_BYTE *)(a1 + 134))
        {
          v93 = v1296;
          v94 = v169;
          v260.i32[0] = v169.i32[3];
          if (*(_BYTE *)(a1 + 135))
          {
            if (v169.f32[3] != 0.0 && v1296.f32[3] != 0.0)
            {
              v264 = vsubq_f32(v1296, v169);
              v261.i32[0] = v264.i32[3];
              if (v264.f32[3] == 0.0)
              {
                if (*(_BYTE *)(a1 + 134) == 48)
                  goto LABEL_55;
                v94 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
              }
              v262.i32[0] = 0;
              v330 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v262, v261), 0);
              v331 = (float32x4_t)vbslq_s8(v330, (int8x16_t)vnegq_f32(v264), (int8x16_t)v264);
              v332 = (float32x4_t)vbslq_s8(v330, (int8x16_t)v1296, (int8x16_t)v94);
              v263.f32[0] = v332.f32[3] / v331.f32[3];
              v333 = vmlsq_lane_f32(v332, v331, v263, 0);
              v331.f32[0] = -v171;
              v263.f32[0] = v171 + 1.0;
              if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v333, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v331.f32, 0)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v263, 0), v333))) & 0x80000000) != 0)
              {
                v93 = (float32x4_t)vbslq_s8(v330, (int8x16_t)v94, (int8x16_t)v1296);
                v94 = vminnmq_f32(vmaxnmq_f32(v333, (float32x4_t)0), v1306);
              }
              else
              {
                v94 = *(float32x4_t *)(v131 + 16 * v138);
                v93 = *(float32x4_t *)(v131 + 16 * v165);
                if ((vmovn_s32(vcgtq_f32(v93, v94)).i8[6] & 1) != 0)
                  v94.i32[3] = 0;
                else
                  v93.i32[3] = 0;
              }
            }
          }
          else
          {
            v265 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v1296, 3), v260), 0);
            v93 = (float32x4_t)vandq_s8((int8x16_t)v1296, v265);
            v94 = (float32x4_t)vbicq_s8((int8x16_t)v169, v265);
          }
          goto LABEL_85;
        }
LABEL_73:
        v93 = v1296;
        v94 = v1301;
        goto LABEL_85;
      }
    }
    v118 = vaddq_f32(vaddq_f32(v114, v116), v118);
    v122 = vaddq_f32(v118, v120);
    v121 = (int8x16_t)vaddq_f32(vaddq_f32(vaddq_f32(v113, v115), v117), v119);
    if (!*(_BYTE *)(a1 + 135))
      goto LABEL_15;
LABEL_14:
    v118 = (float32x4_t)vcltzq_s32(*(int32x4_t *)(a1 + v95 + 1152));
    v121 = vbslq_s8((int8x16_t)v118, v98, v121);
    v122 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + v95 + 1136)), v98, (int8x16_t)v122);
    goto LABEL_15;
  }
  if (*(_BYTE *)(a1 + 136))
  {
    v78 = WeightInfoForSingleLineSingleWeight_6x5(2, 2);
    v79 = 0;
    v1330 = v78;
    v80 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v81 = a1 + 1264;
    v82.i64[0] = 0x7F0000007FLL;
    v82.i64[1] = 0x7F0000007FLL;
    v83 = v80;
    v84.i64[0] = 0x7F0000007FLL;
    v84.i64[1] = 0x7F0000007FLL;
    do
    {
      v86 = *(float32x4_t *)(v81 + v79);
      v85 = *(float32x4_t *)(v81 + v79 + 16);
      v80 = vminnmq_f32(v86, v80);
      v83 = vminnmq_f32(v85, v83);
      v82 = vmaxnmq_f32(v86, v82);
      v84 = vmaxnmq_f32(v85, v84);
      v79 += 32;
    }
    while (v79 != 128);
    v87 = vminnmq_f32(v80, v83);
    v88 = vmaxnmq_f32(v82, v84);
    v89 = vminnmq_f32(v87, (float32x4_t)vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
    v90 = vmaxnmq_f32(v88, (float32x4_t)vextq_s8((int8x16_t)v88, (int8x16_t)v88, 8uLL));
    v91 = (int8x16_t)vminnmq_f32(v89, (float32x4_t)vrev64q_s32((int32x4_t)v89));
    v92 = (int8x16_t)vmaxnmq_f32(v90, (float32x4_t)vrev64q_s32((int32x4_t)v90));
    v91.i32[3] = 0;
    v92.i32[3] = 0;
    v93 = (float32x4_t)vorrq_s8(v92, (int8x16_t)xmmword_20631C870);
    v94 = (float32x4_t)vorrq_s8(v91, (int8x16_t)xmmword_20631C870);
    goto LABEL_85;
  }
  v135 = *(float32x4_t **)(a1 + 32);
  if (v135)
  {
    v136 = *v135;
    v136.i32[3] = 0;
  }
  else
  {
    v136 = (float32x4_t)xmmword_20631C430;
  }
  v266 = 0;
  v267 = (int8x16_t)vmulq_f32(v1285, v136);
  v269 = vadd_f32(*(float32x2_t *)v267.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v267, v267, 8uLL));
  v268 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(v269, (float32x2_t)vdup_lane_s32((int32x2_t)v269, 1)), 0);
  v269.f32[0] = vaddv_f32(v269);
  v270 = (int8x16_t)xmmword_20631C0A0;
  v271 = (int8x16_t)xmmword_20631C080;
  a9.i64[0] = 96;
  v272.i64[0] = -1;
  v272.i64[1] = -1;
  v273.i64[0] = 0x7F0000007FLL;
  v273.i64[1] = 0x7F0000007FLL;
  v274.i64[0] = 0x800000008;
  v274.i64[1] = 0x800000008;
  v275.i64[0] = 0x7F0000007FLL;
  v275.i64[1] = 0x7F0000007FLL;
  v276.i64[0] = 0x7F0000007FLL;
  v276.i64[1] = 0x7F0000007FLL;
  v277.i64[0] = -1;
  v277.i64[1] = -1;
  do
  {
    v278 = (int32x4_t *)(a1 + v266);
    v279 = vsubq_f32(*(float32x4_t *)(a1 + v266 + 1264), v268);
    v280 = vsubq_f32(*(float32x4_t *)(a1 + v266 + 1280), v268);
    v281 = vsubq_f32(*(float32x4_t *)(a1 + v266 + 544), v1312);
    v282 = vsubq_f32(*(float32x4_t *)(a1 + v266 + 528), v1312);
    v283 = (int8x16_t)vmlaq_f32(vmulq_f32(v281, v281), v280, v280);
    v284 = vmlaq_f32(vmulq_f32(v282, v282), v279, v279);
    if (*(_BYTE *)(a1 + 135))
    {
      v279 = (float32x4_t)vcltzq_s32(v278[72]);
      v283 = vbslq_s8((int8x16_t)v279, v273, v283);
      v284 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v278[71]), v273, (int8x16_t)v284);
    }
    v279.i64[0] = v266;
    v285 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v279, (int64x2_t)a9).i64[0], 0), (int8x16_t)v283.u64[0], v283);
    v277 = vbslq_s8((int8x16_t)vcgtq_f32(v285, v276), v270, v277);
    v272 = vbslq_s8((int8x16_t)vcgtq_f32(v284, v275), v271, v272);
    v275 = vmaxnmq_f32(v275, v284);
    v276 = vmaxnmq_f32(v276, v285);
    v271 = (int8x16_t)vaddq_s32((int32x4_t)v271, v274);
    v270 = (int8x16_t)vaddq_s32((int32x4_t)v270, v274);
    v266 += 32;
  }
  while (v266 != 128);
  v286 = 0;
  v287 = vmaxnmq_f32(v275, v276);
  v288 = vbslq_s8((int8x16_t)vcgtq_f32(v275, v276), v272, v277);
  v289 = (float32x4_t)vextq_s8((int8x16_t)v287, (int8x16_t)v287, 8uLL);
  v297 = (int64x2_t)vextq_s8(v288, v288, 8uLL);
  v290 = vbslq_s8((int8x16_t)vcgtq_f32(v287, v289), v288, (int8x16_t)v297);
  v291 = vmaxnmq_f32(v287, v289);
  v295 = (int32x2_t)vbslq_s8((int8x16_t)vcgtq_f32(v291, (float32x4_t)vrev64q_s32((int32x4_t)v291)), v290, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v290.i8, 1)).u64[0];
  v292 = v295.i32[0];
  v293 = v295.i32[0];
  v294 = a1 + 1264;
  v295.i32[0] = *(_DWORD *)(a1 + 1264 + 4 * v295.i32[0]);
  v296 = a1 + 528;
  v52.i32[0] = *(_DWORD *)(a1 + 528 + 4 * v293);
  v297.i64[0] = 96;
  v269.f32[0] = v269.f32[0] - *(float *)v295.i32;
  v298 = v1285.f32[3] - v52.f32[0];
  v299 = (float32x4_t)vdupq_lane_s32(v295, 0);
  v300 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 0);
  v301 = (float32x4_t)vdupq_lane_s32((int32x2_t)v269, 0);
  v302 = (int8x16_t)xmmword_20631C0A0;
  v303 = (int8x16_t)xmmword_20631C080;
  v304.i64[0] = -1;
  v304.i64[1] = -1;
  v305.i64[0] = 0x7F0000007FLL;
  v305.i64[1] = 0x7F0000007FLL;
  v306.i64[0] = 0x800000008;
  v306.i64[1] = 0x800000008;
  v307.i64[0] = 0x7F0000007FLL;
  v307.i64[1] = 0x7F0000007FLL;
  v308.i64[0] = 0x7F0000007FLL;
  v308.i64[1] = 0x7F0000007FLL;
  v309.i64[0] = -1;
  v309.i64[1] = -1;
  do
  {
    v310 = (int32x4_t *)(a1 + v286);
    v311 = vsubq_f32(*(float32x4_t *)(a1 + v286 + 1264), v299);
    v312 = (int8x16_t)vmlaq_f32(vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + v286 + 544), v300), v298), v301, vsubq_f32(*(float32x4_t *)(a1 + v286 + 1280), v299));
    v313 = vmlaq_f32(vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + v286 + 528), v300), v298), v301, v311);
    if (*(_BYTE *)(a1 + 135))
    {
      v311 = (float32x4_t)vcltzq_s32(v310[72]);
      v312 = vbslq_s8((int8x16_t)v311, v305, v312);
      v313 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v310[71]), v305, (int8x16_t)v313);
    }
    v311.i64[0] = v286;
    v314 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v311, v297).i64[0], 0), (int8x16_t)v312.u64[0], v312);
    v309 = vbslq_s8((int8x16_t)vcgtq_f32(v314, v308), v302, v309);
    v304 = vbslq_s8((int8x16_t)vcgtq_f32(v313, v307), v303, v304);
    v307 = vmaxnmq_f32(v307, v313);
    v308 = vmaxnmq_f32(v308, v314);
    v303 = (int8x16_t)vaddq_s32((int32x4_t)v303, v306);
    v302 = (int8x16_t)vaddq_s32((int32x4_t)v302, v306);
    v286 += 32;
  }
  while (v286 != 128);
  v315 = vdupq_lane_s32(v295, 0);
  v315.i32[3] = v52.i32[0];
  v1301 = (float32x4_t)v315;
  v316 = (int8x16_t)vcgtq_f32(v307, v308);
  v317 = vmaxnmq_f32(v307, v308);
  v318 = vbslq_s8(v316, v304, v309);
  v319 = (float32x4_t)vextq_s8((int8x16_t)v317, (int8x16_t)v317, 8uLL);
  v320 = vbslq_s8((int8x16_t)vcgtq_f32(v317, v319), v318, vextq_s8(v318, v318, 8uLL));
  v321 = vmaxnmq_f32(v317, v319);
  v322 = (int8x16_t)vcgtq_f32(v321, (float32x4_t)vrev64q_s32((int32x4_t)v321));
  v1287 = vbslq_s8(v322, v320, (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v320.i8, 1)).u32[0];
  v323 = (const float *)(v294 + 4 * v1287);
  v324 = vld1q_dup_f32(v323);
  v322.i32[0] = *(_DWORD *)(v296 + 4 * v1287);
  v1289 = (float32x4_t)v322;
  v1291 = v52;
  v324.i32[3] = v322.i32[0];
  v1296 = v324;
  v1330 = WeightInfoForSingleLineSingleWeight_6x5(2, 4);
  if (!*(_BYTE *)(a1 + 134))
    goto LABEL_73;
  if (*(_BYTE *)(a1 + 135))
  {
    v93 = v1296;
    v94 = v1301;
    if (v1291.f32[0] != 0.0)
    {
      v327 = v1289;
      if (v1289.f32[0] != 0.0)
      {
        v328 = vsubq_f32(v1296, v1301);
        v327.i32[0] = v328.i32[3];
        if (v328.f32[3] == 0.0)
        {
          if (*(_BYTE *)(a1 + 134) == 48)
          {
LABEL_55:
            v94 = 0uLL;
            goto LABEL_85;
          }
          v94 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
        }
        v325.i32[0] = 0;
        v334 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v325, v327), 0);
        v335 = (float32x4_t)vbslq_s8(v334, (int8x16_t)vnegq_f32(v328), (int8x16_t)v328);
        v336 = (float32x4_t)vbslq_s8(v334, (int8x16_t)v1296, (int8x16_t)v94);
        v326.f32[0] = v336.f32[3] / v335.f32[3];
        v337 = vmlsq_lane_f32(v336, v335, v326, 0);
        if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v337, (float32x4_t)vdupq_n_s32(0xBB800000)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_n_s32(0x3F808081u), v337))) & 0x80000000) != 0)
        {
          v93 = (float32x4_t)vbslq_s8(v334, (int8x16_t)v94, (int8x16_t)v1296);
          v340 = vmaxnmq_f32(v337, (float32x4_t)0);
          __asm { FMOV            V1.4S, #1.0 }
          v94 = vminnmq_f32(v340, _Q1);
        }
        else
        {
          v338 = (const float *)(v294 + 4 * v292);
          v94 = vld1q_dup_f32(v338);
          v94.i32[3] = *(_DWORD *)(v296 + 4 * v292);
          v339 = (const float *)(v294 + 4 * v1287);
          v93 = vld1q_dup_f32(v339);
          v93.i32[3] = *(_DWORD *)(v296 + 4 * v1287);
        }
      }
    }
  }
  else
  {
    v329 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v1289, v1291), 0);
    v93 = (float32x4_t)vandq_s8((int8x16_t)v1296, v329);
    v94 = (float32x4_t)vbicq_s8((int8x16_t)v1301, v329);
  }
LABEL_85:
  v1328 = 0u;
  v1329 = 0u;
  v1326[1] = v93;
  v1327 = 0u;
  v342 = *(float32x4_t **)(a1 + 32);
  v1326[0] = v94;
  FindColorVectors(v1326, v342, 1, 342, &v1330, (uint64_t)&v1327);
  v1281 = (uint8x8_t)v1329;
  v345 = v1330;
  v346 = (v1330 >> 13) & 0xF;
  v347 = v1330 >> 27;
  v348 = v1328;
  v349 = vrecpes_f32(v1328.f32[3]);
  if (fabsf(v1328.f32[3]) < 0.0039062)
    v349 = 0.0;
  if (v346 > 5)
  {
    v366 = *(int8x16_t **)(a1 + 32);
    v357 = v1306;
    v367 = 0;
    if (v366)
    {
      v354 = v1327;
      v368 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1327.i8, 0);
      v369 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1327.i8, 1);
      v370 = (float32x4_t)vdupq_laneq_s32(v1327, 2);
      v371 = (float32x4_t)vdupq_laneq_s32(v1327, 3);
      v372 = vmulq_f32(v1328, (float32x4_t)vandq_s8((int8x16_t)vcgezq_s32(gNormalMasks[(v1330 >> 13) & 0xF]), *v366));
      v373 = (int8x16_t)vmulq_f32(v1328, v372);
      v374 = vaddv_f32(vadd_f32(*(float32x2_t *)v373.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v373, v373, 8uLL)));
      v375 = fabsf(v374);
      v376 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v372.f32, 0);
      v377 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v372, 2);
      v378 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v372, 3);
      v379 = *(char *)(a1 + 134);
      v380 = vrecpes_f32(v374);
      do
      {
        v381 = (int32x4_t *)(a1 + v367);
        v382 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 160), v368);
        v383 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 144), v368);
        v384 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 288), v369);
        v385 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 272), v369);
        v386 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 416), v370);
        v387 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 400), v370);
        v388 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 544), v371);
        v389 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 528), v371);
        if (v375 >= 0.000015259)
          v390 = v380;
        else
          v390 = 0.0;
        v391 = vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v384, *(float32x2_t *)v372.f32, 1), v376, v382), v377, v386), v378, v388), v390), v1306);
        v343 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v385, *(float32x2_t *)v372.f32, 1), v376, v383), v377, v387), v378, v389), v390), v1306), (float32x4_t)0);
        v344 = vmaxnmq_f32(v391, (float32x4_t)0);
        if (v379 >= 1)
        {
          v344 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v381[72]), (int8x16_t)vmulq_n_f32(v388, v349), (int8x16_t)v344);
          v343 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v381[71]), (int8x16_t)vmulq_n_f32(v389, v349), (int8x16_t)v343);
        }
        v392 = (float32x4_t *)((char *)&v1344 + v367);
        *v392 = v343;
        v392[1] = v344;
        v367 += 32;
      }
      while (v367 != 128);
      v393 = 0;
      v394 = (float)v347;
      v395 = 0.0;
      v396 = vrecpes_f32((float)v347);
      if (v347)
        v395 = v396;
      do
      {
        v397 = (float32x4_t *)((char *)&v1344 + v393);
        v398 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)((char *)&v1344 + v393 + 16), v394)), v395);
        *v397 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)((char *)&v1344 + v393), v394)), v395);
        v397[1] = v398;
        v393 += 32;
      }
      while (v393 != 128);
    }
    else
    {
      v354 = v1327;
      v421 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1327.i8, 0);
      v422 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1327.i8, 1);
      v423 = (float32x4_t)vdupq_laneq_s32(v1327, 2);
      v424 = (float32x4_t)vdupq_laneq_s32(v1327, 3);
      v425 = (int8x16_t)vmulq_f32(v1328, v1328);
      v426 = vaddv_f32(vadd_f32(*(float32x2_t *)v425.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v425, v425, 8uLL)));
      v427 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1328.f32, 0);
      v428 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1328, 2);
      v429 = vrecpes_f32(v426);
      v430 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1328, 3);
      v431 = *(char *)(a1 + 134);
      do
      {
        v432 = a1 + v367;
        v344 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 400), v423);
        v433 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 544), v424);
        v434 = vsubq_f32(*(float32x4_t *)(a1 + v367 + 528), v424);
        v343 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v367 + 288), v422), *(float32x2_t *)v348.f32, 1), v427, vsubq_f32(*(float32x4_t *)(a1 + v367 + 160), v421)), v428, vsubq_f32(*(float32x4_t *)(a1 + v367 + 416), v423)), v430, v433);
        v435 = (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v367 + 272), v422), *(float32x2_t *)v348.f32, 1), v427, vsubq_f32(*(float32x4_t *)(a1 + v367 + 144), v421)), v428, v344), v430, v434), v429), v1306), (float32x4_t)0);
        v436 = (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(v343, v429), v1306), (float32x4_t)0);
        if (v431 >= 1)
        {
          v343 = *(float32x4_t *)(v432 + 1152);
          v437 = *(int8x16_t *)(v432 + 1136);
          v344 = (float32x4_t)vorrq_s8(v437, (int8x16_t)v343);
          if ((vmaxvq_u32((uint32x4_t)v344) & 0x80000000) != 0)
          {
            v343 = (float32x4_t)vcltzq_s32((int32x4_t)v343);
            v435 = vbslq_s8((int8x16_t)vcltzq_s32((int32x4_t)v437), (int8x16_t)vmulq_n_f32(v434, v349), v435);
            v436 = vbslq_s8((int8x16_t)v343, (int8x16_t)vmulq_n_f32(v433, v349), v436);
          }
        }
        v438 = (int8x16_t *)((char *)&v1344 + v367);
        *v438 = v435;
        v438[1] = v436;
        v367 += 32;
      }
      while (v367 != 128);
      v439 = 0;
      v440 = (float)v347;
      v441 = 0.0;
      v442 = vrecpes_f32((float)v347);
      if (v347)
        v441 = v442;
      do
      {
        v443 = (float32x4_t *)((char *)&v1344 + v439);
        v444 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)((char *)&v1344 + v439 + 16), v440)), v441);
        *v443 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)((char *)&v1344 + v439), v440)), v441);
        v443[1] = v444;
        v439 += 32;
      }
      while (v439 != 128);
    }
  }
  else if (v346 > 3)
  {
    v399 = 0;
    v400 = (float)(v1328.f32[3] * v1328.f32[3]) + (float)(v1328.f32[0] * v1328.f32[0]);
    v401 = fabsf(v400);
    v402 = vrecpes_f32(v400);
    if (v401 >= 0.000015259)
      v403 = v402;
    else
      v403 = 0.0;
    v354 = v1327;
    v404 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1327.i8, 0);
    v405 = (float32x4_t)vdupq_laneq_s32(v1327, 3);
    v406 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1328.f32, 0);
    v407 = *(char *)(a1 + 134);
    __asm { FMOV            V16.4S, #1.0 }
    v357 = v1306;
    do
    {
      v409 = (int32x4_t *)(a1 + v399);
      v410 = vsubq_f32(*(float32x4_t *)(a1 + v399 + 528), v405);
      v411 = vsubq_f32(*(float32x4_t *)(a1 + v399 + 544), v405);
      v412 = vmulq_n_f32(vmlaq_f32(vmulq_laneq_f32(v411, v348, 3), v406, vsubq_f32(*(float32x4_t *)(a1 + v399 + 1280), v404)), v403);
      v413 = vmulq_n_f32(vmlaq_f32(vmulq_laneq_f32(v410, v348, 3), v406, vsubq_f32(*(float32x4_t *)(a1 + v399 + 1264), v404)), v403);
      if (v407 >= 1)
      {
        v412 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v409[72]), (int8x16_t)vmulq_n_f32(v411, v349), (int8x16_t)v412);
        v413 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v409[71]), (int8x16_t)vmulq_n_f32(v410, v349), (int8x16_t)v413);
      }
      v414 = (float32x4_t *)((char *)&v1344 + v399);
      *v414 = vminnmq_f32(vmaxnmq_f32(v413, (float32x4_t)0), _Q16);
      v414[1] = vminnmq_f32(vmaxnmq_f32(v412, (float32x4_t)0), _Q16);
      v399 += 32;
    }
    while (v399 != 96);
    v415 = 0;
    v416 = (float)v347;
    v417 = 0.0;
    v418 = vrecpes_f32((float)v347);
    if (v347)
      v417 = v418;
    do
    {
      v419 = (float32x4_t *)((char *)&v1344 + v415);
      v420 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)((char *)&v1344 + v415 + 16), v416)), v417);
      *v419 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)((char *)&v1344 + v415), v416)), v417);
      v419[1] = v420;
      v415 += 32;
    }
    while (v415 != 128);
  }
  else
  {
    v350 = 0;
    v351 = a1 + 1264;
    v352 = 0.0;
    v353 = vrecpes_f32(v1328.f32[0]);
    if (fabsf(v1328.f32[0]) >= 0.000015259)
      v352 = v353;
    v354 = v1327;
    v355 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1327.i8, 0);
    __asm { FMOV            V5.4S, #1.0 }
    v357 = v1306;
    do
    {
      v358 = vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v351 + v350 + 16), v355), v352), (float32x4_t)0), _Q5);
      v359 = (float32x4_t *)((char *)&v1344 + v350);
      *v359 = vminnmq_f32(vmaxnmq_f32(vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v351 + v350), v355), v352), (float32x4_t)0), _Q5);
      v359[1] = v358;
      v350 += 32;
    }
    while (v350 != 128);
    v360 = 0;
    v361 = (float)v347;
    v362 = 0.0;
    v363 = vrecpes_f32((float)v347);
    if (v347)
      v362 = v363;
    do
    {
      v364 = (float32x4_t *)((char *)&v1344 + v360);
      v365 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)((char *)&v1344 + v360 + 16), v361)), v362);
      *v364 = vmulq_n_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)((char *)&v1344 + v360), v361)), v362);
      v364[1] = v365;
      v360 += 32;
    }
    while (v360 != 128);
  }
  *(_OWORD *)&v1346[48] = *(unint64_t *)&v1346[48];
  v445 = a1;
  do
  {
    v446 = v445;
    v445 = *(_QWORD *)(v445 + 40);
  }
  while (v445);
  v447 = *(float32x4_t **)(a1 + 32);
  if (v447)
    v357 = vmulq_f32(*v447, v1313);
  v448 = *(unsigned __int16 *)(v446 + 132);
  if (v448 == 392)
  {
    v489 = 0;
    v490 = v1344;
    v491 = (float32x4_t)vextq_s8((int8x16_t)v1344, *(int8x16_t *)v1345, 8uLL);
    v492 = (float32x4_t)vzip1q_s32((int32x4_t)v1344, vuzp1q_s32((int32x4_t)v490, (int32x4_t)v490));
    v493 = (float32x4_t)vzip1q_s32(*(int32x4_t *)v1345, *(int32x4_t *)v1345);
    v493.i32[0] = v1344.i32[3];
    v490.i32[0] = v1344.i32[1];
    v494 = *(float32x4_t *)&v1345[8];
    v495 = (float32x4_t)vzip1q_s32((int32x4_t)v494, vuzp1q_s32((int32x4_t)v494, (int32x4_t)v494));
    v496 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1345[8], *(int8x16_t *)&v1345[24], 8uLL);
    v497 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1345[24], *(int32x4_t *)&v1345[24]);
    v497.i32[0] = *(_DWORD *)&v1345[20];
    v494.i32[0] = *(_DWORD *)&v1345[12];
    v498 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v490, (float32x4_t)xmmword_20631CCC0), (float32x4_t)xmmword_20631CCD0, v492), (float32x4_t)xmmword_20631CD00, v495), (float32x4_t)xmmword_20631CD10, v494);
    v499 = *(float32x4_t *)&v1345[32];
    v500 = *(float32x4_t *)&v1346[8];
    v501 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1345[32], vuzp1q_s32((int32x4_t)v499, (int32x4_t)v499));
    v502 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1345[32], *(int8x16_t *)v1346, 8uLL);
    v503 = (float32x4_t)vzip1q_s32(*(int32x4_t *)v1346, *(int32x4_t *)v1346);
    v503.i32[0] = *(_DWORD *)&v1345[44];
    v499.i32[0] = *(_DWORD *)&v1345[36];
    v504 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v494, (float32x4_t)xmmword_20631CD40), (float32x4_t)xmmword_20631CD50, v495), (float32x4_t)xmmword_20631CD80, v501), (float32x4_t)xmmword_20631CD90, v499);
    v505 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v497, (float32x4_t)xmmword_20631CD30), (float32x4_t)xmmword_20631CD60, v496), (float32x4_t)xmmword_20631CD70, v502), (float32x4_t)xmmword_20631C9E0, v503);
    v506 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v494, (float32x4_t)xmmword_20631CDB0), (float32x4_t)xmmword_20631CDC0, v495), (float32x4_t)xmmword_20631CDF0, v501), (float32x4_t)xmmword_20631CE00, v499);
    v507 = vmlaq_f32(vmulq_f32(v499, (float32x4_t)xmmword_20631CE00), (float32x4_t)xmmword_20631CDF0, v501);
    v508 = vmlaq_f32(vmulq_f32(v499, (float32x4_t)xmmword_20631CD90), (float32x4_t)xmmword_20631CD80, v501);
    v509 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v497, (float32x4_t)xmmword_20631CDA0), (float32x4_t)xmmword_20631CDD0, v496), (float32x4_t)xmmword_20631CDE0, v502), (float32x4_t)xmmword_20631CE10, v503);
    v510 = vmlaq_f32(vmulq_f32(v503, (float32x4_t)xmmword_20631CE10), (float32x4_t)xmmword_20631CDE0, v502);
    v511 = (float32x4_t)vzip1q_s32((int32x4_t)v500, vuzp1q_s32((int32x4_t)v500, (int32x4_t)v500));
    v512 = vmlaq_f32(vmulq_f32(v503, (float32x4_t)xmmword_20631CE20), (float32x4_t)xmmword_20631CE30, v502);
    v513 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1346[24], *(int32x4_t *)&v1346[24]);
    v513.i32[0] = *(_DWORD *)&v1346[20];
    v514 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1346[8], *(int8x16_t *)&v1346[24], 8uLL);
    v500.i32[0] = *(_DWORD *)&v1346[12];
    v515 = vmlaq_f32(vmlaq_f32(v507, (float32x4_t)xmmword_20631CDC0, v511), (float32x4_t)xmmword_20631CDB0, v500);
    v516 = vmlaq_f32(vmlaq_f32(v508, (float32x4_t)xmmword_20631CD50, v511), (float32x4_t)xmmword_20631CD40, v500);
    v343 = (float32x4_t)xmmword_20631C9B0;
    v517 = vmulq_f32(v500, (float32x4_t)xmmword_20631CD10);
    v518 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v493, (float32x4_t)xmmword_20631C9B0), (float32x4_t)xmmword_20631CCE0, v491), (float32x4_t)xmmword_20631CCF0, v496), (float32x4_t)xmmword_20631CD20, v497);
    v519 = vmlaq_f32(vmulq_f32(v493, (float32x4_t)xmmword_20631CC80), (float32x4_t)xmmword_20631CCB0, v491);
    v520 = (float32x4_t)vdupq_n_s32(0x3D800000u);
    v1355 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32(v490, (float32x4_t)xmmword_20631CC90), (float32x4_t)xmmword_20631CCA0, v492), v520);
    v1356 = (int32x4_t)vmulq_f32(v519, v520);
    v1357 = vmulq_f32(v498, v520);
    v1358 = vmulq_f32(v518, v520);
    v1359 = vmulq_f32(v504, v520);
    v1360 = vmulq_f32(v505, v520);
    v1361 = vmulq_f32(v506, v520);
    v1362 = vmulq_f32(v509, v520);
    v1363 = vmulq_f32(v515, v520);
    v1364 = vmulq_f32(vmlaq_f32(vmlaq_f32(v510, (float32x4_t)xmmword_20631CDD0, v514), (float32x4_t)xmmword_20631CDA0, v513), v520);
    v1365 = vmulq_f32(v516, v520);
    v521 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1346[24], *(int8x16_t *)&v1346[40], 4uLL);
    v521.i32[0] = *(_DWORD *)&v1346[32];
    v1366 = vmulq_f32(vmlaq_f32(vmlaq_f32(v512, (float32x4_t)xmmword_20631CE40, v514), (float32x4_t)xmmword_20631CE50, v513), v520);
    v522 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1346[40], (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)&v1346[40], 3), 4uLL);
    v523 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1346[24], vextq_s8(*(int8x16_t *)&v1346[24], *(int8x16_t *)&v1346[40], 0xCuLL), 0xCuLL);
    v1367 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(v517, (float32x4_t)xmmword_20631CD00, v511), (float32x4_t)xmmword_20631CCD0, v521), (float32x4_t)xmmword_20631CCC0, v523), v520);
    v1368 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v513, (float32x4_t)xmmword_20631CD20), (float32x4_t)xmmword_20631CCF0, v514), (float32x4_t)xmmword_20631CCE0, *(float32x4_t *)&v1346[40]), (float32x4_t)xmmword_20631C9B0, v522), v520);
    v524 = vmulq_f32(vmlaq_f32(vmulq_f32(v523, (float32x4_t)xmmword_20631CC90), (float32x4_t)xmmword_20631CCA0, v521), v520);
    v525 = vmulq_f32(vmlaq_f32(vmulq_f32(v522, (float32x4_t)xmmword_20631CC80), (float32x4_t)xmmword_20631CCB0, *(float32x4_t *)&v1346[40]), v520);
    v526 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v354.i8, 0);
    v527 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v348.f32, 0);
    v528 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v354.i8, 1);
    v529 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v348.f32, 1);
    v530 = (float32x4_t)vdupq_laneq_s32(v354, 2);
    v531 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v348, 2);
    v532 = 0uLL;
    v533 = 0uLL;
    v1370 = v525;
    v1369 = v524;
    v534 = (float32x4_t)vdupq_laneq_s32(v354, 3);
    v535 = 0uLL;
    v536 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v348, 3);
    v537 = 0uLL;
    v538 = 0uLL;
    v539 = 0uLL;
    v540 = 0uLL;
    v541 = 0uLL;
    do
    {
      v518.i32[0] = 0;
      v343.i32[0] = *(unsigned __int8 *)(a1 + 135);
      v542 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v343, (int8x16_t)v518), 0);
      __asm { FMOV            V25.4S, #1.0 }
      v545 = *(float32x4_t *)(v446 + v489 + 912);
      v544 = *(float32x4_t *)(v446 + v489 + 928);
      v546 = (float32x4_t)vbslq_s8(v542, _Q25, (int8x16_t)v544);
      v547 = (float32x4_t)vbslq_s8(v542, _Q25, (int8x16_t)v545);
      v549 = *(float32x4_t *)((char *)&v1355 + v489);
      v548 = *(float32x4_t *)((char *)&v1355 + v489 + 16);
      v550 = vmlaq_f32(v526, v548, v527);
      v551 = vmlaq_f32(v534, v548, v536);
      v552 = vsubq_f32(vmlaq_f32(v528, v548, v529), *(float32x4_t *)(v446 + v489 + 416));
      v553 = vsubq_f32(vmlaq_f32(v528, v549, v529), *(float32x4_t *)(v446 + v489 + 400));
      v554 = vsubq_f32(vmlaq_f32(v530, v548, v531), *(float32x4_t *)(v446 + v489 + 672));
      v555 = vsubq_f32(vmlaq_f32(v530, v549, v531), *(float32x4_t *)(v446 + v489 + 656));
      v343 = vsubq_f32(vmlaq_f32(v534, v549, v536), v545);
      v556 = vsubq_f32(v551, v544);
      v557 = vmulq_f32(vsubq_f32(vmlaq_f32(v526, v549, v527), *(float32x4_t *)(v446 + v489 + 144)), v547);
      v558 = vmulq_f32(vsubq_f32(v550, *(float32x4_t *)(v446 + v489 + 160)), v546);
      v559 = vmulq_f32(v553, v547);
      v560 = vmulq_f32(v552, v546);
      v518 = vmulq_f32(v555, v547);
      v561 = vmulq_f32(v554, v546);
      v541 = vmlaq_f32(v541, v558, v558);
      v540 = vmlaq_f32(v540, v557, v557);
      v539 = vmlaq_f32(v539, v560, v560);
      v538 = vmlaq_f32(v538, v559, v559);
      v537 = vmlaq_f32(v537, v561, v561);
      v535 = vmlaq_f32(v535, v518, v518);
      v533 = vmlaq_f32(v533, v556, v556);
      v532 = vmlaq_f32(v532, v343, v343);
      v489 += 32;
    }
    while (v489 != 256);
    v485 = vaddq_f32(v540, v541);
    v486 = vaddq_f32(v538, v539);
    v487 = vaddq_f32(v535, v537);
    v488 = vaddq_f32(v532, v533);
    goto LABEL_140;
  }
  if (v448 == 342)
  {
    v449 = 0;
    v450 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v354.i8, 0);
    v451 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v348.f32, 0);
    v452 = 0uLL;
    v453 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v354.i8, 1);
    v454 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v348.f32, 1);
    __asm { FMOV            V16.4S, #1.0 }
    v456 = (float32x4_t)vdupq_laneq_s32(v354, 2);
    v457 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v348, 2);
    v458 = 0uLL;
    v459 = (float32x4_t)vdupq_laneq_s32(v354, 3);
    v460 = 0uLL;
    v461 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v348, 3);
    v462 = 0uLL;
    v463 = 0uLL;
    v464 = 0uLL;
    v465 = 0uLL;
    v466 = 0uLL;
    do
    {
      v343.i32[0] = 0;
      v344.i32[0] = *(unsigned __int8 *)(a1 + 135);
      v467 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v344, (int8x16_t)v343), 0);
      v469 = *(float32x4_t *)(a1 + v449 + 528);
      v468 = *(float32x4_t *)(a1 + v449 + 544);
      v470 = (float32x4_t)vbslq_s8(v467, _Q16, (int8x16_t)v468);
      v471 = (float32x4_t)vbslq_s8(v467, _Q16, (int8x16_t)v469);
      v473 = *(float32x4_t *)((char *)&v1344 + v449);
      v472 = *(float32x4_t *)((char *)&v1344 + v449 + 16);
      v474 = vmlaq_f32(v450, v472, v451);
      v475 = vsubq_f32(vmlaq_f32(v453, v472, v454), *(float32x4_t *)(a1 + v449 + 288));
      v476 = vsubq_f32(vmlaq_f32(v453, v473, v454), *(float32x4_t *)(a1 + v449 + 272));
      v477 = vsubq_f32(vmlaq_f32(v456, v472, v457), *(float32x4_t *)(a1 + v449 + 416));
      v478 = vsubq_f32(vmlaq_f32(v456, v473, v457), *(float32x4_t *)(a1 + v449 + 400));
      v479 = vsubq_f32(vmlaq_f32(v459, v473, v461), v469);
      v344 = vsubq_f32(vmlaq_f32(v459, v472, v461), v468);
      v480 = vmulq_f32(vsubq_f32(vmlaq_f32(v450, v473, v451), *(float32x4_t *)(a1 + v449 + 144)), v471);
      v481 = vmulq_f32(vsubq_f32(v474, *(float32x4_t *)(a1 + v449 + 160)), v470);
      v482 = vmulq_f32(v476, v471);
      v483 = vmulq_f32(v475, v470);
      v343 = vmulq_f32(v478, v471);
      v484 = vmulq_f32(v477, v470);
      v466 = vmlaq_f32(v466, v481, v481);
      v465 = vmlaq_f32(v465, v480, v480);
      v464 = vmlaq_f32(v464, v483, v483);
      v463 = vmlaq_f32(v463, v482, v482);
      v462 = vmlaq_f32(v462, v484, v484);
      v460 = vmlaq_f32(v460, v343, v343);
      v458 = vmlaq_f32(v458, v344, v344);
      v452 = vmlaq_f32(v452, v479, v479);
      v449 += 32;
    }
    while (v449 != 128);
    v485 = vaddq_f32(v465, v466);
    v486 = vaddq_f32(v463, v464);
    v487 = vaddq_f32(v460, v462);
    v488 = vaddq_f32(v452, v458);
LABEL_140:
    v562 = vmulq_f32(v357, vpaddq_f32(vpaddq_f32(v485, v486), vpaddq_f32(v487, v488)));
    v562.i64[0] = vpaddq_f32(v562, v562).u64[0];
    *(float32x2_t *)v343.f32 = vpadd_f32(*(float32x2_t *)v562.f32, *(float32x2_t *)v562.f32);
    goto LABEL_142;
  }
  v343.i32[0] = 2139095040;
LABEL_142:
  v563.i64[1] = 0;
  v1354 = 0u;
  v1353 = 0u;
  v1352 = 0u;
  v1351 = 0u;
  v1350 = 0u;
  v1349 = 0u;
  v1348 = 0u;
  v1347 = 0u;
  v1273 = v345;
  if ((v345 & 0x18000) != 0)
  {
    v564 = 0;
    v1272 = 0;
    v1283 = *(unsigned __int8 *)(a1 + 136);
    v1284 = a1 + 656;
    v1286 = INFINITY;
    v563.i64[0] = 96;
    v1252 = v563;
    v563.i64[0] = -32;
    v1251 = v563;
    v563.i64[0] = 64;
    v1250 = v563;
    while (1)
    {
      if (v343.f32[0] < v53[1] || v1283 && v564 == 3)
        goto LABEL_284;
      v565 = (float32x4_t)vdupq_n_s32(0x3A88642Au);
      v1290 = EncodeStandardSinglePartitionBlock_6x5_channelSearchOrder[v564];
      v1288 = v343;
      if (*(float *)(a1 + 124) <= 961.0)
        break;
      v566 = 0;
      v568 = *(float32x4_t *)(v1271 + 128);
      v567 = *(float32x4_t *)(v1271 + 144);
      v570 = (float32x4_t)v1282[16];
      v569 = (float32x4_t)v1282[17];
      v571 = v568;
      v572 = v567;
      v573 = v570;
      v574 = v569;
      do
      {
        v575 = *(float32x4_t *)(a1 + v566 + 1312);
        v576 = *(float32x4_t *)(a1 + v566 + 1296);
        v568 = vmaxnmq_f32(v568, v576);
        v567 = vmaxnmq_f32(v567, v575);
        v571 = vminnmq_f32(v571, v576);
        v572 = vminnmq_f32(v572, v575);
        v578 = *(float32x4_t *)(a1 + v566 + 560);
        v577 = *(float32x4_t *)(a1 + v566 + 576);
        v570 = vmaxnmq_f32(v570, v578);
        v569 = vmaxnmq_f32(v569, v577);
        v573 = vminnmq_f32(v573, v578);
        v574 = vminnmq_f32(v574, v577);
        v566 += 32;
      }
      while (v566 != 96);
      v579 = v53;
      v580 = 0;
      v581 = (int32x4_t)vmaxnmq_f32(v568, v567);
      v582 = (int32x4_t)vmaxnmq_f32(v570, v569);
      v583 = (int32x4_t)vminnmq_f32(v571, v572);
      v584 = (int32x4_t)vminnmq_f32(v573, v574);
      v585 = vmaxnmq_f32((float32x4_t)vzip1q_s32(v581, v582), (float32x4_t)vzip2q_s32(v581, v582));
      v586 = vminnmq_f32((float32x4_t)vzip1q_s32(v583, v584), (float32x4_t)vzip2q_s32(v583, v584));
      v587 = (int32x4_t)vmaxnmq_f32(v585, (float32x4_t)vextq_s8((int8x16_t)v585, (int8x16_t)v585, 8uLL));
      v588 = (int32x4_t)vminnmq_f32(v586, (float32x4_t)vextq_s8((int8x16_t)v586, (int8x16_t)v586, 8uLL));
      v589 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v588.i8, 0);
      v590 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v587.i8, 0);
      v591 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v588.i8, 1);
      v592 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v587.i8, 1);
      v593 = 0uLL;
      v594 = 0uLL;
      do
      {
        v595 = *(float32x4_t *)(a1 + v580 + 1280);
        v596 = *(float32x4_t *)(a1 + v580 + 1264);
        v597 = (int64x2_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v565, vsubq_f32(v596, v589)), (int16x8_t)vcgtq_f32(v565, vsubq_f32(v595, v589)));
        *(int8x8_t *)v595.f32 = vmovn_s16((int16x8_t)vorrq_s8(vorrq_s8((int8x16_t)v597, (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v565, vsubq_f32(v590, v596)), (int16x8_t)vcgtq_f32(v565, vsubq_f32(v590, v595)))), vorrq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(v565, vsubq_f32(v592, *(float32x4_t *)(a1 + v580 + 528))), (int16x8_t)vcgtq_f32(v565, vsubq_f32(v592, *(float32x4_t *)(a1 + v580 + 544)))), (int8x16_t)vuzp1q_s16((int16x8_t)vcgtq_f32(
                                                                                   v565,
                                                                                   vsubq_f32(*(float32x4_t *)(a1 + v580 + 528), v591)), (int16x8_t)vcgtq_f32(v565, vsubq_f32(*(float32x4_t *)(a1 + v580 + 544), v591))))));
        v598 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v595.f32, *(int8x8_t *)v588.i8)), 0x1FuLL));
        v597.i64[0] = v580;
        v594 = vsubq_s32(v594, (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v597, v1252).i64[0], 0), (int8x16_t)v598.u64[0], v598));
        v593 = vsubq_s32(v593, vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v595.f32, *(int8x8_t *)v588.i8)), 0x1FuLL)));
        v580 += 32;
      }
      while (v580 != 128);
      v599 = vzip1q_s32(v587, v587);
      v599.i32[2] = v587.i32[0];
      v600 = vzip1q_s32(v588, v588);
      v600.i32[2] = v588.i32[0];
      v1302 = (float32x4_t)v599;
      v1307 = (float32x4_t)v600;
      v601 = vaddq_s32(v593, v594);
      v601.i64[0] = vpaddq_s32(v601, v601).u64[0];
      v602 = WeightInfoForSingleLineDualWeight_6x5(vpadd_s32(*(int32x2_t *)v601.i8, *(int32x2_t *)v601.i8).u8[0], 4);
      v604 = v1302;
      v603 = v1307;
      v1325 = v602;
      v605 = 31 - __clz(v1290);
      v606 = v605;
      v607 = 0uLL;
LABEL_247:
      v1323 = (int32x4_t)v607;
      v1324 = v607;
      v1321[1] = v604;
      v1322 = (int32x4_t)v607;
      v952 = *(float32x4_t **)(a1 + 32);
      v1321[0] = v603;
      FindColorVectors(v1321, v952, 2, 342, &v1325, (uint64_t)&v1322);
      v954 = 0;
      v955 = v1325;
      v956 = v1322;
      v957 = v1323;
      v958 = (float32x4_t)vandq_s8((int8x16_t)vcgezq_s32(FindDualWeights_6x5_kVectorMask[v606]), (int8x16_t)v1323);
      v959 = (int8x16_t)vmulq_f32(v958, v958);
      v960 = vrecpes_f32(vaddv_f32(vadd_f32(*(float32x2_t *)v959.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v959, v959, 8uLL))));
      v961 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1322.i8, 0);
      v962 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1322.i8, 1);
      v963 = (float32x4_t)vdupq_laneq_s32(v1322, 2);
      v964 = (float32x4_t)vdupq_laneq_s32(v1322, 3);
      v965 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v958.f32, 0);
      v966 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v958, 2);
      v967 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v958, 3);
      do
      {
        __asm { FMOV            V4.4S, #1.0 }
        v969 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v954 + 288), v962), *(float32x2_t *)v958.f32, 1), v965, vsubq_f32(*(float32x4_t *)(a1 + v954 + 160), v961)), v966, vsubq_f32(*(float32x4_t *)(a1 + v954 + 416), v963)), v967, vsubq_f32(*(float32x4_t *)(a1 + v954 + 544), v964)), v960), _Q4), (float32x4_t)0);
        v970 = (float32x4_t *)&v1337.i8[v954];
        *v970 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v954 + 272), v962), *(float32x2_t *)v958.f32, 1), v965, vsubq_f32(*(float32x4_t *)(a1 + v954 + 144), v961)), v966, vsubq_f32(*(float32x4_t *)(a1 + v954 + 400), v963)), v967, vsubq_f32(*(float32x4_t *)(a1 + v954 + 528), v964)), v960), _Q4), (float32x4_t)0);
        v970[1] = v969;
        v954 += 32;
      }
      while (v954 != 128);
      v1341 = (int8x16_t)v1341.u64[0];
      v1343 = (unint64_t)v1343;
      v53 = v579;
      if ((v1290 & 8) == 0 && *(char *)(a1 + 134) >= 1)
      {
        v971 = 0;
        v972 = vrecpes_f32(*(float *)&v957.i32[3]);
        if (fabsf(*(float *)&v957.i32[3]) < 0.0039216)
          v972 = 0.0;
        do
        {
          v973 = (int8x16_t *)&v1337.i8[v971];
          v974 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + v971 + 1152)), (int8x16_t)vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + v971 + 544), v964), v972), *(int8x16_t *)((char *)&v1337 + v971 + 16));
          *v973 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)(a1 + v971 + 1136)), (int8x16_t)vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + v971 + 528), v964), v972), *(int8x16_t *)((char *)&v1337 + v971));
          v973[1] = v974;
          v971 += 32;
        }
        while (v971 != 128);
        v1341 = (int8x16_t)v1341.u64[0];
      }
      v1315 = v957;
      v975 = *(float *)((unint64_t)&v1315 & 0xFFFFFFFFFFFFFFF3 | (4 * (v605 & 3)));
      v976 = 0.0;
      if (fabsf(v975) >= 0.00024414)
        v976 = vrecpes_f32(v975);
      v977 = 0;
      v978 = a1 + ((uint64_t)v605 << 7) + 144;
      v1314 = v956;
      v979 = (const float *)((unint64_t)&v1314 & 0xFFFFFFFFFFFFFFF3 | (4 * (v605 & 3)));
      v980 = vld1q_dup_f32(v979);
      do
      {
        v981 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v978 + v977 + 16), v980), v976);
        v982 = (float32x4_t *)&v1337.i8[v977];
        v982[8] = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(v978 + v977), v980), v976);
        v982[9] = v981;
        v977 += 32;
      }
      while (v977 != 128);
      v983 = 0;
      v1343 = (unint64_t)v1343;
      v984 = v955 >> 27;
      v985 = &ReciprocalTable[v984];
      v986 = (float)v984;
      v987 = vld1q_dup_f32(v985);
      do
      {
        v988 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)&v1342[v983], (float32x4_t)0), _Q4), v986));
        v989 = vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)&v1342[v983 + 16], (float32x4_t)0), _Q4), v986));
        v990 = vmulq_f32(v987, vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)((char *)&v1337 + v983 + 16), (float32x4_t)0), _Q4), v986)));
        v991 = (float32x4_t *)((char *)&v1331 + v983);
        *v991 = vmulq_f32(v987, vrndxq_f32(vmulq_n_f32(vminnmq_f32(vmaxnmq_f32(*(float32x4_t *)((char *)&v1337 + v983), (float32x4_t)0), _Q4), v986)));
        v991[1] = v990;
        v991[8] = vmulq_f32(v987, v988);
        v991[9] = vmulq_f32(v987, v989);
        v983 += 32;
      }
      while (v983 != 128);
      v992 = *(float32x4_t **)(a1 + 32);
      if (v992)
        _Q4 = vmulq_f32(*v992, v1313);
      v993 = a1;
      do
      {
        v994 = v993;
        v993 = *(_QWORD *)(v993 + 40);
      }
      while (v993);
      v995 = *(unsigned __int16 *)(v994 + 132);
      if (v995 == 392)
      {
        v1041 = 0;
        v1042 = *(float32x4_t *)&v1332[8];
        v1043 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1332[8], vuzp1q_s32((int32x4_t)v1042, (int32x4_t)v1042));
        v1044 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1332[8], *(int8x16_t *)&v1332[24], 8uLL);
        v1045 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1332[24], *(int32x4_t *)&v1332[24]);
        v1045.i32[0] = *(_DWORD *)&v1332[20];
        v1042.i32[0] = *(_DWORD *)&v1332[12];
        v1262 = v1042;
        v1295 = v962;
        v1261 = v1043;
        v1278 = v957;
        v1046 = *(float32x4_t *)&v1332[32];
        v1047 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1332[32], vuzp1q_s32((int32x4_t)v1046, (int32x4_t)v1046));
        v1048 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1332[32], *(int8x16_t *)v1333, 8uLL);
        v1049 = (float32x4_t)vzip1q_s32(*(int32x4_t *)v1333, *(int32x4_t *)v1333);
        v1049.i32[0] = *(_DWORD *)&v1332[44];
        v1046.i32[0] = *(_DWORD *)&v1332[36];
        v1276 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1042, (float32x4_t)xmmword_20631CD40), (float32x4_t)xmmword_20631CD50, v1043), (float32x4_t)xmmword_20631CD80, v1047), (float32x4_t)xmmword_20631CD90, v1046);
        v1275 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1045, (float32x4_t)xmmword_20631CD30), (float32x4_t)xmmword_20631CD60, v1044), (float32x4_t)xmmword_20631CD70, v1048), (float32x4_t)xmmword_20631C9E0, v1049);
        v1270 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1045, (float32x4_t)xmmword_20631CDA0), (float32x4_t)xmmword_20631CDD0, v1044), (float32x4_t)xmmword_20631CDE0, v1048), (float32x4_t)xmmword_20631CE10, v1049);
        v1050 = *(float32x4_t *)&v1335[8];
        v1280 = v963;
        v1051 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1335[24], *(int32x4_t *)&v1335[24]);
        v1051.i32[0] = *(_DWORD *)&v1335[20];
        v1263 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1335[8], *(int8x16_t *)&v1335[24], 8uLL);
        v1052 = *(float32x4_t *)&v1335[32];
        v1053 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1335[32], *(int8x16_t *)v1336, 8uLL);
        v1054 = (float32x4_t)vzip1q_s32(*(int32x4_t *)v1336, *(int32x4_t *)v1336);
        v1054.i32[0] = *(_DWORD *)&v1335[44];
        v1266 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1051, (float32x4_t)xmmword_20631CDA0), (float32x4_t)xmmword_20631CDD0, v1263), (float32x4_t)xmmword_20631CDE0, v1053), (float32x4_t)xmmword_20631CE10, v1054);
        v1268 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1051, (float32x4_t)xmmword_20631CD30), (float32x4_t)xmmword_20631CD60, v1263), (float32x4_t)xmmword_20631CD70, v1053), (float32x4_t)xmmword_20631C9E0, v1054);
        v1055 = vmlaq_f32(vmulq_f32(v1054, (float32x4_t)xmmword_20631CE10), (float32x4_t)xmmword_20631CDE0, v1053);
        v1056 = vmlaq_f32(vmulq_f32(v1054, (float32x4_t)xmmword_20631CE20), (float32x4_t)xmmword_20631CE30, v1053);
        v1265 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1042, (float32x4_t)xmmword_20631CDB0), (float32x4_t)xmmword_20631CDC0, v1043), (float32x4_t)xmmword_20631CDF0, v1047), (float32x4_t)xmmword_20631CE00, v1046);
        v1057 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1335[8], vuzp1q_s32((int32x4_t)v1050, (int32x4_t)v1050));
        v1050.i32[0] = *(_DWORD *)&v1335[12];
        v1058 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1335[32], vuzp1q_s32((int32x4_t)v1052, (int32x4_t)v1052));
        v1052.i32[0] = *(_DWORD *)&v1335[36];
        v1059 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1050, (float32x4_t)xmmword_20631CDB0), (float32x4_t)xmmword_20631CDC0, v1057), (float32x4_t)xmmword_20631CDF0, v1058), (float32x4_t)xmmword_20631CE00, v1052);
        v1060 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1050, (float32x4_t)xmmword_20631CD40), (float32x4_t)xmmword_20631CD50, v1057), (float32x4_t)xmmword_20631CD80, v1058), (float32x4_t)xmmword_20631CD90, v1052);
        v1061 = v1331;
        v1062 = (float32x4_t)vzip1q_s32(*(int32x4_t *)v1332, *(int32x4_t *)v1332);
        v1062.i32[0] = v1331.i32[3];
        v1256 = (float32x4_t)vextq_s8((int8x16_t)v1331, *(int8x16_t *)v1332, 8uLL);
        v1063 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1062, (float32x4_t)xmmword_20631C9B0), (float32x4_t)xmmword_20631CCE0, v1256), (float32x4_t)xmmword_20631CCF0, v1044), (float32x4_t)xmmword_20631CD20, v1045);
        v1064 = *(float32x4_t *)&v1333[8];
        v1065 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1333[8], *(int8x16_t *)&v1333[24], 8uLL);
        v1066 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1333[24], *(int32x4_t *)&v1333[24]);
        v1066.i32[0] = *(_DWORD *)&v1333[20];
        v1257 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1049, (float32x4_t)xmmword_20631CE10), (float32x4_t)xmmword_20631CDE0, v1048), (float32x4_t)xmmword_20631CDD0, v1065), (float32x4_t)xmmword_20631CDA0, v1066);
        v1311 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1049, (float32x4_t)xmmword_20631CE20), (float32x4_t)xmmword_20631CE30, v1048), (float32x4_t)xmmword_20631CE40, v1065), (float32x4_t)xmmword_20631CE50, v1066);
        v1067 = vmlaq_f32(vmulq_f32(v1066, (float32x4_t)xmmword_20631CD20), (float32x4_t)xmmword_20631CCF0, v1065);
        v1068 = v1334;
        v1258 = (float32x4_t)vextq_s8((int8x16_t)v1334, *(int8x16_t *)v1335, 8uLL);
        v1069 = (float32x4_t)vzip1q_s32(*(int32x4_t *)v1335, *(int32x4_t *)v1335);
        v1069.i32[0] = v1334.i32[3];
        v1260 = v1069;
        v1070 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1069, (float32x4_t)xmmword_20631C9B0), (float32x4_t)xmmword_20631CCE0, v1258), (float32x4_t)xmmword_20631CCF0, v1263), (float32x4_t)xmmword_20631CD20, v1051);
        v1071 = *(float32x4_t *)&v1336[8];
        v1072 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1336[8], *(int8x16_t *)&v1336[24], 8uLL);
        v1073 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1336[24], *(int32x4_t *)&v1336[24]);
        v1073.i32[0] = *(_DWORD *)&v1336[20];
        v1264 = vmlaq_f32(vmlaq_f32(v1055, (float32x4_t)xmmword_20631CDD0, v1072), (float32x4_t)xmmword_20631CDA0, v1073);
        v1259 = vmlaq_f32(vmlaq_f32(v1056, (float32x4_t)xmmword_20631CE40, v1072), (float32x4_t)xmmword_20631CE50, v1073);
        v1074 = (float32x4_t)vzip1q_s32((int32x4_t)v1331, vuzp1q_s32((int32x4_t)v1061, (int32x4_t)v1061));
        v1061.i32[0] = v1331.i32[1];
        v1075 = vmlaq_f32(vmulq_f32(v1073, (float32x4_t)xmmword_20631CD20), (float32x4_t)xmmword_20631CCF0, v1072);
        v1076 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1333[8], vuzp1q_s32((int32x4_t)v1064, (int32x4_t)v1064));
        v1064.i32[0] = *(_DWORD *)&v1333[12];
        v1077 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1046, (float32x4_t)xmmword_20631CE00), (float32x4_t)xmmword_20631CDF0, v1047), (float32x4_t)xmmword_20631CDC0, v1076), (float32x4_t)xmmword_20631CDB0, v1064);
        v1078 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1046, (float32x4_t)xmmword_20631CD90), (float32x4_t)xmmword_20631CD80, v1047), (float32x4_t)xmmword_20631CD50, v1076), (float32x4_t)xmmword_20631CD40, v1064);
        v1079 = vmlaq_f32(vmulq_f32(v1064, (float32x4_t)xmmword_20631CD10), (float32x4_t)xmmword_20631CD00, v1076);
        v1080 = (float32x4_t)vzip1q_s32((int32x4_t)v1334, vuzp1q_s32((int32x4_t)v1068, (int32x4_t)v1068));
        v1068.i32[0] = v1334.i32[1];
        v1081 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1068, (float32x4_t)xmmword_20631CCC0), (float32x4_t)xmmword_20631CCD0, v1080), (float32x4_t)xmmword_20631CD00, v1057), (float32x4_t)xmmword_20631CD10, v1050);
        v1082 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&v1336[8], vuzp1q_s32((int32x4_t)v1071, (int32x4_t)v1071));
        v1071.i32[0] = *(_DWORD *)&v1336[12];
        v1083 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1052, (float32x4_t)xmmword_20631CE00), (float32x4_t)xmmword_20631CDF0, v1058), (float32x4_t)xmmword_20631CDC0, v1082), (float32x4_t)xmmword_20631CDB0, v1071);
        v1084 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1052, (float32x4_t)xmmword_20631CD90), (float32x4_t)xmmword_20631CD80, v1058), (float32x4_t)xmmword_20631CD50, v1082), (float32x4_t)xmmword_20631CD40, v1071);
        v1085 = vmlaq_f32(vmulq_f32(v1071, (float32x4_t)xmmword_20631CD10), (float32x4_t)xmmword_20631CD00, v1082);
        v1086 = (float32x4_t)vdupq_n_s32(0x3D800000u);
        v1355 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32(v1061, (float32x4_t)xmmword_20631CC90), (float32x4_t)xmmword_20631CCA0, v1074), v1086);
        v1356 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32(v1062, (float32x4_t)xmmword_20631CC80), (float32x4_t)xmmword_20631CCB0, v1256), v1086);
        v1357 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1061, (float32x4_t)xmmword_20631CCC0), (float32x4_t)xmmword_20631CCD0, v1074), (float32x4_t)xmmword_20631CD00, v1261), (float32x4_t)xmmword_20631CD10, v1262), v1086);
        v1358 = vmulq_f32(v1063, v1086);
        v1359 = vmulq_f32(v1276, v1086);
        v1360 = vmulq_f32(v1275, v1086);
        v1361 = vmulq_f32(v1265, v1086);
        v1362 = vmulq_f32(v1270, v1086);
        v1363 = vmulq_f32(v1077, v1086);
        v1364 = vmulq_f32(v1257, v1086);
        v1365 = vmulq_f32(v1078, v1086);
        v1366 = vmulq_f32(v1311, v1086);
        v1087 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1333[24], *(int8x16_t *)&v1333[40], 4uLL);
        v1087.i32[0] = *(_DWORD *)&v1333[32];
        v1088 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1333[24], vextq_s8(*(int8x16_t *)&v1333[24], *(int8x16_t *)&v1333[40], 0xCuLL), 0xCuLL);
        v1089 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1333[40], (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)&v1333[40], 3), 4uLL);
        v1367 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1079, (float32x4_t)xmmword_20631CCD0, v1087), (float32x4_t)xmmword_20631CCC0, v1088), v1086);
        v1368 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1067, (float32x4_t)xmmword_20631CCE0, *(float32x4_t *)&v1333[40]), (float32x4_t)xmmword_20631C9B0, v1089), v1086);
        v1370 = vmulq_f32(vmlaq_f32(vmulq_f32(v1089, (float32x4_t)xmmword_20631CC80), (float32x4_t)xmmword_20631CCB0, *(float32x4_t *)&v1333[40]), v1086);
        v1369 = vmulq_f32(vmlaq_f32(vmulq_f32(v1088, (float32x4_t)xmmword_20631CC90), (float32x4_t)xmmword_20631CCA0, v1087), v1086);
        v1372 = vmulq_f32(vmlaq_f32(vmulq_f32(v1260, (float32x4_t)xmmword_20631CC80), (float32x4_t)xmmword_20631CCB0, v1258), v1086);
        v1371 = vmulq_f32(vmlaq_f32(vmulq_f32(v1068, (float32x4_t)xmmword_20631CC90), (float32x4_t)xmmword_20631CCA0, v1080), v1086);
        v1374 = vmulq_f32(v1070, v1086);
        v1373 = vmulq_f32(v1081, v1086);
        v1376 = vmulq_f32(v1268, v1086);
        v1375 = vmulq_f32(v1060, v1086);
        v1378 = vmulq_f32(v1266, v1086);
        v1377 = vmulq_f32(v1059, v1086);
        v1380 = vmulq_f32(v1264, v1086);
        v1379 = vmulq_f32(v1083, v1086);
        v1382 = vmulq_f32(v1259, v1086);
        v1381 = vmulq_f32(v1084, v1086);
        v1090 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1336[24], *(int8x16_t *)&v1336[40], 4uLL);
        v1090.i32[0] = *(_DWORD *)&v1336[32];
        v1091 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1336[24], vextq_s8(*(int8x16_t *)&v1336[24], *(int8x16_t *)&v1336[40], 0xCuLL), 0xCuLL);
        v1092 = (float32x4_t)vextq_s8(*(int8x16_t *)&v1336[40], (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)&v1336[40], 3), 4uLL);
        v1384 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1075, (float32x4_t)xmmword_20631CCE0, *(float32x4_t *)&v1336[40]), (float32x4_t)xmmword_20631C9B0, v1092), v1086);
        v1383 = vmulq_f32(vmlaq_f32(vmlaq_f32(v1085, (float32x4_t)xmmword_20631CCD0, v1090), (float32x4_t)xmmword_20631CCC0, v1091), v1086);
        v1093 = vmlaq_f32(vmulq_f32(v1092, (float32x4_t)xmmword_20631CC80), (float32x4_t)xmmword_20631CCB0, *(float32x4_t *)&v1336[40]);
        v1386 = vmulq_f32(v1093, v1086);
        v1385 = vmulq_f32(vmlaq_f32(vmulq_f32(v1091, (float32x4_t)xmmword_20631CC90), (float32x4_t)xmmword_20631CCA0, v1090), v1086);
        v1094 = (float32x4_t)v1278;
        v1095 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1278.i8, 0);
        v1096 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1278.i8, 1);
        v1097 = (int8x16_t *)(&v1355 + 16 * (unint64_t)((v1290 >> 3) & 1));
        v1098 = (float32x4_t)vdupq_laneq_s32(v1278, 2);
        v1099 = (float32x4_t)vdupq_laneq_s32(v1278, 3);
        v1100 = (int8x16_t *)(&v1355 + 16 * (unint64_t)((v1290 >> 2) & 1));
        v1101 = (int8x16_t *)(&v1355 + 16 * (unint64_t)((v1290 >> 1) & 1));
        v1102 = (int8x16_t *)(&v1355 + 16 * (unint64_t)(v1290 & 1));
        v1103 = 0uLL;
        v1104 = 0uLL;
        v1105 = 0uLL;
        v1106 = 0uLL;
        v1107 = 0uLL;
        v1108 = 0uLL;
        v1109 = 0uLL;
        v1110 = 0uLL;
        do
        {
          v1094.i32[0] = 0;
          v1093.i32[0] = *(unsigned __int8 *)(a1 + 135);
          v1111 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8((int8x16_t)v1093, (int8x16_t)v1094), 0);
          __asm { FMOV            V1.4S, #1.0 }
          v1114 = *(float32x4_t *)(v994 + v1041 * 16 + 912);
          v1113 = *(float32x4_t *)(v994 + v1041 * 16 + 928);
          v1115 = (float32x4_t)vbslq_s8(v1111, _Q1, (int8x16_t)v1113);
          v1116 = (float32x4_t)vbslq_s8(v1111, _Q1, (int8x16_t)v1114);
          v1117 = vsubq_f32(vmlaq_f32(v964, (float32x4_t)v1097[v1041], v1099), v1114);
          v1118 = vsubq_f32(vmlaq_f32(v964, (float32x4_t)v1097[v1041 + 1], v1099), v1113);
          v1093 = vmulq_f32(vsubq_f32(vmlaq_f32(v961, (float32x4_t)v1102[v1041], v1095), *(float32x4_t *)(v994 + v1041 * 16 + 144)), v1116);
          v1119 = vmulq_f32(vsubq_f32(vmlaq_f32(v961, (float32x4_t)v1102[v1041 + 1], v1095), *(float32x4_t *)(v994 + v1041 * 16 + 160)), v1115);
          v1120 = vmulq_f32(vsubq_f32(vmlaq_f32(v1295, (float32x4_t)v1101[v1041], v1096), *(float32x4_t *)(v994 + v1041 * 16 + 400)), v1116);
          v1121 = vmulq_f32(vsubq_f32(vmlaq_f32(v1295, (float32x4_t)v1101[v1041 + 1], v1096), *(float32x4_t *)(v994 + v1041 * 16 + 416)), v1115);
          v1094 = vmulq_f32(vsubq_f32(vmlaq_f32(v1280, (float32x4_t)v1100[v1041], v1098), *(float32x4_t *)(v994 + v1041 * 16 + 656)), v1116);
          v1122 = vmulq_f32(vsubq_f32(vmlaq_f32(v1280, (float32x4_t)v1100[v1041 + 1], v1098), *(float32x4_t *)(v994 + v1041 * 16 + 672)), v1115);
          v1110 = vmlaq_f32(v1110, v1119, v1119);
          v1109 = vmlaq_f32(v1109, v1093, v1093);
          v1108 = vmlaq_f32(v1108, v1121, v1121);
          v1107 = vmlaq_f32(v1107, v1120, v1120);
          v1106 = vmlaq_f32(v1106, v1122, v1122);
          v1105 = vmlaq_f32(v1105, v1094, v1094);
          v1104 = vmlaq_f32(v1104, v1118, v1118);
          v1103 = vmlaq_f32(v1103, v1117, v1117);
          v1041 += 2;
        }
        while (v1041 != 16);
        v1039 = vpaddq_f32(vpaddq_f32(vaddq_f32(v1109, v1110), vaddq_f32(v1107, v1108)), vpaddq_f32(vaddq_f32(v1105, v1106), vaddq_f32(v1103, v1104)));
        v1040 = vaddq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v1107, *(float32x2_t *)_Q4.f32, 1), v1109, _Q4.f32[0]), v1105, _Q4, 2), v1103, _Q4, 3), vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v1108, *(float32x2_t *)_Q4.f32, 1), v1110, _Q4.f32[0]), v1106, _Q4, 2), v1104, _Q4, 3));
      }
      else
      {
        if (v995 != 342)
        {
          v1039 = 0uLL;
          v1124 = INFINITY;
          goto LABEL_275;
        }
        v996 = 0;
        v1305 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v957.i8, 1);
        v1310 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v957.i8, 0);
        v1294 = (float32x4_t)vdupq_laneq_s32(v957, 3);
        v1299 = (float32x4_t)vdupq_laneq_s32(v957, 2);
        v997 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q4.f32, 0);
        v998 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q4, 2);
        v999 = (int8x16_t *)(&v1331 + 8 * (unint64_t)(v1290 & 1));
        v1000 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q4, 3);
        v1001 = 0uLL;
        v1002 = 0uLL;
        v1003 = 0uLL;
        v1004 = 0uLL;
        v1005 = (int8x16_t *)(&v1331 + 8 * (unint64_t)((v1290 >> 1) & 1));
        v1006 = (int8x16_t *)(&v1331 + 8 * (unint64_t)((v1290 >> 3) & 1));
        v1007 = 0uLL;
        v1008 = 0uLL;
        v1009 = 0uLL;
        v1010 = 0uLL;
        v1011 = (int8x16_t *)(&v1331 + 8 * (unint64_t)((v1290 >> 2) & 1));
        v1012 = 0uLL;
        v1013 = 0uLL;
        v1014 = v963;
        do
        {
          v963.i32[0] = 0;
          v953.i32[0] = *(unsigned __int8 *)(a1 + 135);
          v1015 = (int8x8_t)vceqq_s8((int8x16_t)v953, (int8x16_t)v963).u64[0];
          __asm { FMOV            V31.4S, #1.0 }
          v1017 = vdupq_lane_s8(v1015, 0);
          v1018 = *(float32x4_t *)(a1 + v996 * 16 + 528);
          v1019 = *(float32x4_t *)(a1 + v996 * 16 + 544);
          v1020 = (float32x4_t)vbslq_s8(v1017, _Q31, (int8x16_t)v1019);
          v1021 = (float32x4_t)vbslq_s8(v1017, _Q31, (int8x16_t)v1018);
          v1022 = vsubq_f32(vmlaq_f32(v964, (float32x4_t)v1006[v996], v1294), v1018);
          v1023 = vsubq_f32(vmlaq_f32(v964, (float32x4_t)v1006[v996 + 1], v1294), v1019);
          v1024 = vmulq_f32(vsubq_f32(vmlaq_f32(v961, (float32x4_t)v999[v996 + 1], v1310), *(float32x4_t *)(a1 + v996 * 16 + 160)), v1020);
          v1025 = vmulq_f32(vsubq_f32(vmlaq_f32(v962, (float32x4_t)v1005[v996 + 1], v1305), *(float32x4_t *)(a1 + v996 * 16 + 288)), v1020);
          v1026 = vmulq_f32(vsubq_f32(vmlaq_f32(v1014, (float32x4_t)v1011[v996 + 1], v1299), *(float32x4_t *)(a1 + v996 * 16 + 416)), v1020);
          v1027 = vmulq_f32(vsubq_f32(vmlaq_f32(v961, (float32x4_t)v999[v996], v1310), *(float32x4_t *)(a1 + v996 * 16 + 144)), v1021);
          v1028 = vmulq_f32(vsubq_f32(vmlaq_f32(v962, (float32x4_t)v1005[v996], v1305), *(float32x4_t *)(a1 + v996 * 16 + 272)), v1021);
          v963 = vmulq_f32(vsubq_f32(vmlaq_f32(v1014, (float32x4_t)v1011[v996], v1299), *(float32x4_t *)(a1 + v996 * 16 + 400)), v1021);
          v1029 = vmulq_f32(v1024, v1024);
          v1030 = vmulq_f32(v1028, v1028);
          v1031 = vmulq_f32(v1025, v1025);
          v1032 = vmulq_f32(v1027, v1027);
          v1013 = vaddq_f32(v1013, v1029);
          v1012 = vaddq_f32(v1012, v1032);
          v1010 = vaddq_f32(v1010, v1031);
          v1009 = vaddq_f32(v1009, v1030);
          v1033 = vmulq_f32(v1026, v1026);
          v1034 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v1031, *(float32x2_t *)_Q4.f32, 1), v1029, v997), v1033, v998);
          v1008 = vaddq_f32(v1008, v1033);
          v1035 = vmulq_f32(v963, v963);
          v1036 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v1030, *(float32x2_t *)_Q4.f32, 1), v1032, v997), v1035, v998);
          v1007 = vaddq_f32(v1007, v1035);
          v1037 = vmulq_f32(v1023, v1023);
          v1004 = vaddq_f32(v1004, v1037);
          v1038 = vmulq_f32(v1022, v1022);
          v953 = vmlaq_f32(v1036, v1038, v1000);
          v1003 = vaddq_f32(v1003, v1038);
          v1002 = vaddq_f32(v1002, vmlaq_f32(v1034, v1037, v1000));
          v1001 = vaddq_f32(v1001, v953);
          v996 += 2;
        }
        while (v996 != 8);
        v1039 = vpaddq_f32(vpaddq_f32(vaddq_f32(v1012, v1013), vaddq_f32(v1009, v1010)), vpaddq_f32(vaddq_f32(v1007, v1008), vaddq_f32(v1003, v1004)));
        v1040 = vaddq_f32(v1001, v1002);
      }
      v1123 = (float32x2_t)vpaddq_f32(v1040, v1040).u64[0];
      LODWORD(v1124) = vpadd_f32(v1123, v1123).u32[0];
LABEL_275:
      v343 = v1288;
      v1125 = (float32x2_t)vpaddq_f32(v1039, v1039).u64[0];
      LODWORD(v1126) = vpadd_f32(v1125, v1125).u32[0];
      _NF = v1124 < v1288.f32[0] && v1126 < v1286;
      if (_NF)
      {
        v1351 = *(float32x4_t *)v1336;
        v1352 = *(float32x4_t *)&v1336[16];
        v1353 = *(float32x4_t *)&v1336[32];
        v1354 = *(float32x4_t *)&v1336[48];
        v1347 = v1334;
        v1348 = *(float32x4_t *)v1335;
        v1349 = *(float32x4_t *)&v1335[16];
        v1350 = *(float32x4_t *)&v1335[32];
        *(_OWORD *)v1346 = *(_OWORD *)v1333;
        *(_OWORD *)&v1346[16] = *(_OWORD *)&v1333[16];
        *(_OWORD *)&v1346[32] = *(_OWORD *)&v1333[32];
        *(_OWORD *)&v1346[48] = *(_OWORD *)&v1333[48];
        v1344 = v1331;
        *(_OWORD *)v1345 = *(_OWORD *)v1332;
        v1273 = v955;
        *(_OWORD *)&v1345[16] = *(_OWORD *)&v1332[16];
        *(_OWORD *)&v1345[32] = *(_OWORD *)&v1332[32];
        v1272 = v1290;
        v1286 = v1126;
        v343.f32[0] = v1124;
        v1281 = *(uint8x8_t *)v1324.i8;
      }
      if (++v564 == 4)
        goto LABEL_284;
    }
    v1292 = v565;
    v608 = *(unsigned __int8 *)(a1 + 136);
    if (*(_BYTE *)(a1 + 136))
      v609 = 6;
    else
      v609 = 8;
    WeightInfoForSingleLineDualWeight_6x5(2, v609);
    v610.i64[0] = 0x800000008;
    v610.i64[1] = 0x800000008;
    v611.i64[0] = 0x7F0000007FLL;
    v611.i64[1] = 0x7F0000007FLL;
    v612 = 0;
    v613 = __clz(v1290);
    v605 = 31 - v613;
    v614 = FindDualWeights_6x5_kVectorMask[31 - v613];
    v615 = a1 + ((31 - v613) << 7) + 144;
    v1320 = v1285;
    v616 = (const float *)((unint64_t)&v1320 & 0xFFFFFFFFFFFFFFF3 | (4 * ((31 - v613) & 3)));
    v617 = vld1q_dup_f32(v616);
    v618 = *(float32x2_t **)(a1 + 32);
    v619 = (int8x16_t)xmmword_20631C0A0;
    v620 = (int8x16_t)xmmword_20631C080;
    v621 = *(unsigned __int8 *)(a1 + 135);
    v622.i64[0] = -1;
    v622.i64[1] = -1;
    v623 = 0uLL;
    v624 = 0uLL;
    v625.i64[0] = -1;
    v625.i64[1] = -1;
    while (1)
    {
      v626 = vsubq_f32(*(float32x4_t *)(a1 + v612 + 144), v1255);
      v627 = vsubq_f32(*(float32x4_t *)(a1 + v612 + 160), v1255);
      v628 = vsubq_f32(*(float32x4_t *)(a1 + v612 + 272), v1254);
      v629 = vsubq_f32(*(float32x4_t *)(a1 + v612 + 288), v1254);
      v630 = vsubq_f32(*(float32x4_t *)(a1 + v612 + 400), v1253);
      v631 = vsubq_f32(*(float32x4_t *)(a1 + v612 + 416), v1253);
      v632 = vsubq_f32(*(float32x4_t *)(a1 + v612 + 528), v1312);
      v633 = vsubq_f32(*(float32x4_t *)(a1 + v612 + 544), v1312);
      v634 = vsubq_f32(*(float32x4_t *)(v615 + v612 + 16), v617);
      v635 = vsubq_f32(*(float32x4_t *)(v615 + v612), v617);
      v636 = vmulq_f32(v627, v627);
      v637 = vmulq_f32(v626, v626);
      v638 = vmulq_f32(v629, v629);
      v639 = vmulq_f32(v628, v628);
      v640 = vmulq_f32(v631, v631);
      v641 = vmulq_f32(v630, v630);
      v642 = vmulq_f32(v633, v633);
      v643 = vmulq_f32(v632, v632);
      if (!v618)
        break;
      v644 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v638, *v618, 1), v636, COERCE_FLOAT(*(_OWORD *)v618->f32)), v640, *(float32x4_t *)v618->f32, 2), v642, *(float32x4_t *)v618->f32, 3);
      v645 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v639, *v618, 1), v637, COERCE_FLOAT(*(_OWORD *)v618->f32)), v641, *(float32x4_t *)v618->f32, 2), v643, *(float32x4_t *)v618->f32, 3), v1313);
      v1319 = *(_OWORD *)v618->f32;
      v646 = (const float *)((unint64_t)&v1319 & 0xFFFFFFFFFFFFFFF3 | (4 * (v605 & 3)));
      v647 = vld1q_dup_f32(v646);
      v648 = vnegq_f32(v647);
      v649 = (int8x16_t)vmlaq_f32(vmulq_f32(v644, v1313), v634, vmulq_f32(v634, v648));
      v650 = vmlaq_f32(v645, v635, vmulq_f32(v635, v648));
      if (v621)
        goto LABEL_159;
LABEL_160:
      v634.i64[0] = v612;
      v635.i64[0] = 96;
      v651 = (int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v634, (int64x2_t)v635).i64[0], 0);
      v652.i64[0] = v649.i64[0];
      v652.i64[1] = 0x7F0000007FLL;
      v653 = (float32x4_t)vbslq_s8(v651, v652, v649);
      v654 = (int8x16_t)vcgtq_f32(v653, v624);
      v655 = (int8x16_t)vcgtq_f32(v650, v623);
      v623 = vmaxnmq_f32(v650, v623);
      v624 = vmaxnmq_f32(v653, v624);
      v625 = vbslq_s8(v654, v619, v625);
      v622 = vbslq_s8(v655, v620, v622);
      v620 = (int8x16_t)vaddq_s32((int32x4_t)v620, v610);
      v619 = (int8x16_t)vaddq_s32((int32x4_t)v619, v610);
      v612 += 32;
      if (v612 == 128)
      {
        if (v608)
          v656 = 0;
        else
          v656 = -1;
        v657 = vmaxnmq_f32(v623, v624);
        v658 = vbslq_s8((int8x16_t)vcgtq_f32(v624, v623), v625, v622);
        v659 = (float32x4_t)vextq_s8((int8x16_t)v657, (int8x16_t)v657, 8uLL);
        v660 = (int8x16_t)vcgtq_f32(v659, v657);
        v661 = vmaxnmq_f32(v657, v659);
        v662 = vbslq_s8(v660, vextq_s8(v658, v658, 8uLL), v658);
        v663 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v661), v661), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v662.i8, 1), v662).u32[0];
        v664 = *(float32x4_t *)(v1284 + 16 * v663);
        v665 = (int8x16_t)vcltzq_s32(v614);
        v666 = (float32x4_t)vbicq_s8((int8x16_t)vsubq_f32(v1285, v664), v665);
        v1279 = v656;
        if (v618)
          v667 = vmulq_f32(*(float32x4_t *)v618->f32, v666);
        else
          v667 = vmulq_f32(v666, (float32x4_t)vdupq_n_s32(0x3EAAAAABu));
        v668 = 0;
        v1269 = v663;
        v669 = (const float *)((unint64_t)&v1317 & 0xFFFFFFFFFFFFFFF3 | (4 * (v605 & 3)));
        v670 = (const float *)((unint64_t)&v1318 & 0xFFFFFFFFFFFFFFF3 | (4 * (v605 & 3)));
        v1297 = *(float32x4_t *)(v1284 + 16 * v663);
        v1303 = (int32x4_t)v665;
        v1267 = vmvnq_s8(v665);
        v671 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v664.f32, 0);
        v672 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v664.f32, 1);
        v673 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v664, 2);
        v674 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v664, 3);
        v1318 = v1297;
        v675 = vld1q_dup_f32(v670);
        v676 = (v1290 >> 3) & 1;
        v1317 = v667;
        v677 = vld1q_dup_f32(v669);
        v1308 = v677;
        if (!v621)
          LOBYTE(v676) = 1;
        v678 = (float32x4_t)vdupq_n_s32(0x7F800000u);
        v679 = (int8x16_t)xmmword_20631C0A0;
        v680 = (int8x16_t)xmmword_20631C080;
        v681.i64[0] = 0x7F0000007FLL;
        v681.i64[1] = 0x7F0000007FLL;
        v682.i64[0] = -1;
        v682.i64[1] = -1;
        v683 = 0uLL;
        v684 = 0uLL;
        v685.i64[0] = -1;
        v685.i64[1] = -1;
        v686.i64[0] = 0x7F0000007FLL;
        v686.i64[1] = 0x7F0000007FLL;
        v687 = v678;
        do
        {
          v688 = *(float32x4_t *)(v615 + v668);
          v689 = *(float32x4_t *)(v615 + v668 + 16);
          v690 = vsubq_f32(v689, v675);
          v691 = vsubq_f32(v688, v675);
          v692 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + v668 + 160), v671), v667.f32[0]);
          v693 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + v668 + 144), v671), v667.f32[0]);
          v694 = vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v668 + 288), v672), *(float32x2_t *)v667.f32, 1);
          v695 = vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v668 + 272), v672), *(float32x2_t *)v667.f32, 1);
          v696 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(a1 + v668 + 416), v673), v667, 2);
          v697 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(a1 + v668 + 400), v673), v667, 2);
          v698 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(a1 + v668 + 544), v674), v667, 3);
          v699 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(a1 + v668 + 528), v674), v667, 3);
          if (v618)
          {
            v700 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v694, *v618, 1), v692, COERCE_FLOAT(*(_OWORD *)v618->f32)), v696, *(float32x4_t *)v618->f32, 2), v698, *(float32x4_t *)v618->f32, 3);
            v701 = vmulq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_n_f32(vmulq_lane_f32(v695, *v618, 1), v693, COERCE_FLOAT(*(_OWORD *)v618->f32)), v697, *(float32x4_t *)v618->f32, 2), v699, *(float32x4_t *)v618->f32, 3), v1313);
            v1316 = *(_OWORD *)v618->f32;
            v702 = (const float *)((unint64_t)&v1316 & 0xFFFFFFFFFFFFFFF3 | (4 * (v605 & 3)));
            v703 = vld1q_dup_f32(v702);
            v704 = vnegq_f32(v703);
            v705 = vmulq_f32(v691, v704);
            v706 = vmulq_f32(v690, v704);
            v707 = (int8x16_t)vmlaq_f32(vmulq_f32(v700, v1313), v1308, v706);
            v708 = vmlaq_f32(v701, v1308, v705);
          }
          else
          {
            v705 = vaddq_f32(vaddq_f32(v693, v695), v697);
            v706 = vaddq_f32(vaddq_f32(v692, v694), v696);
            v708 = vmlsq_f32(vaddq_f32(v705, v699), v691, v691);
            v707 = (int8x16_t)vmlsq_f32(vaddq_f32(v706, v698), v690, v690);
          }
          v709.i64[0] = 0x7F0000007FLL;
          v709.i64[1] = 0x7F0000007FLL;
          v710.i64[0] = 0x800000008;
          v710.i64[1] = 0x800000008;
          if (v621)
          {
            v705 = (float32x4_t)vcltzq_s32(*(int32x4_t *)(a1 + v668 + 1136));
            v706 = (float32x4_t)vcltzq_s32(*(int32x4_t *)(a1 + v668 + 1152));
            v707 = vbslq_s8((int8x16_t)v706, v709, v707);
            v708 = (float32x4_t)vbslq_s8((int8x16_t)v705, v709, (int8x16_t)v708);
          }
          v711 = 0uLL;
          v712 = 0uLL;
          if ((v676 & 1) == 0)
          {
            v712 = *(int8x16_t *)(a1 + v668 + 1152);
            v711 = *(int32x4_t *)(a1 + v668 + 1136);
          }
          v706.i64[0] = v668;
          v705.i64[0] = 96;
          v713 = (int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v706, (int64x2_t)v705).i64[0], 0);
          v714.i64[0] = v707.i64[0];
          v714.i64[1] = v709.i64[0];
          v715 = (float32x4_t)vbslq_s8(v713, v714, v707);
          v716 = (int64x2_t)vcgtq_f32(v715, v684);
          v717 = (int8x16_t)vcgtq_f32(v708, v683);
          v683 = vmaxnmq_f32(v708, v683);
          v684 = vmaxnmq_f32(v715, v684);
          v685 = vbslq_s8((int8x16_t)v716, v679, v685);
          v715.i64[0] = v668;
          v716.i64[0] = 96;
          v718 = (int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v715, v716).i64[0], 0);
          v716.i64[0] = v712.i64[0];
          v716.i64[1] = -1;
          v682 = vbslq_s8(v717, v680, v682);
          v719 = (int8x16_t)vcltzq_s32((int32x4_t)vbslq_s8(v718, (int8x16_t)v716, v712));
          v720 = (int8x16_t)vcltzq_s32(v711);
          v721 = (int8x16_t)vdupq_n_s32(0x7F800000u);
          v678 = vminnmq_f32(v678, (float32x4_t)vbslq_s8(v720, v721, (int8x16_t)v688));
          v687 = vminnmq_f32(v687, (float32x4_t)vbslq_s8(v719, v721, (int8x16_t)v689));
          v681 = vmaxnmq_f32(v681, (float32x4_t)vbslq_s8(v720, v709, (int8x16_t)v688));
          v686 = vmaxnmq_f32(v686, (float32x4_t)vbslq_s8(v719, v709, (int8x16_t)v689));
          v680 = (int8x16_t)vaddq_s32((int32x4_t)v680, v710);
          v679 = (int8x16_t)vaddq_s32((int32x4_t)v679, v710);
          v668 += 32;
        }
        while (v668 != 128);
        v667.i32[0] = 0;
        v722 = vmaxnmq_f32(v683, v684);
        v723 = vbslq_s8((int8x16_t)vcgtq_f32(v684, v683), v685, v682);
        v724 = (float32x4_t)vextq_s8((int8x16_t)v722, (int8x16_t)v722, 8uLL);
        v725 = (int8x16_t)vcgtq_f32(v724, v722);
        v726 = vmaxnmq_f32(v722, v724);
        v727 = vbslq_s8(v725, vextq_s8(v723, v723, 8uLL), v723);
        v728 = *(float32x4_t *)(v1284
                              + 16
                              * vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v726), v726), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v727.i8, 1), v727).i32[0]);
        v729 = vmaxnmq_f32(v681, v686);
        v730 = vminnmq_f32(v678, v687);
        v731 = vmaxnmq_f32(v729, (float32x4_t)vextq_s8((int8x16_t)v729, (int8x16_t)v729, 8uLL));
        v732 = vminnmq_f32(v730, (float32x4_t)vextq_s8((int8x16_t)v730, (int8x16_t)v730, 8uLL));
        v733 = (int8x16_t)vmaxnmq_f32(v731, (float32x4_t)vrev64q_s32((int32x4_t)v731));
        v734 = (int8x16_t)vminnmq_f32(v732, (float32x4_t)vrev64q_s32((int32x4_t)v732));
        v735 = vcgtq_f32(v1297, v728);
        v736 = v735.i32[1];
        if ((_DWORD)v613 == 30)
          v736 = v735.i32[0];
        v735.i32[0] = v736;
        v737 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v735, (int32x4_t)v667), 0);
        v738 = vbslq_s8(v737, v733, v734);
        v739 = vbslq_s8(v737, v734, v733);
        v740 = (int8x16_t)vcltzq_s32(vshlq_n_s32(v1303, 0x1FuLL));
        v741 = (float32x4_t)vbslq_s8(v740, v739, (int8x16_t)v1297);
        v742 = (float32x4_t)vbslq_s8(v740, v738, (int8x16_t)v728);
        if (v608)
        {
          v743 = (int8x16_t *)((char *)&unk_20631D220 + 32 * (31 - v613));
          v744 = vsubq_f32((float32x4_t)vqtbl1q_s8((int8x16_t)v741, *v743), v741);
          v745 = vsubq_f32((float32x4_t)vqtbl1q_s8((int8x16_t)v742, v743[1]), v742);
          v746 = vmlaq_f32(vmulq_f32(v745, v745), v744, v744);
          v746.i64[0] = vpaddq_f32(v746, v746).u64[0];
          v747 = v1292;
          if (vpadd_f32(*(float32x2_t *)v746.f32, *(float32x2_t *)v746.f32).f32[0] >= 0.00049212)
          {
            v757 = 6;
          }
          else
          {
            v748 = vmaxnmq_f32(v741, v742);
            v749 = vminnmq_f32(v741, v742);
            v750 = vmaxnmq_f32(v748, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v748, (int8x16_t)v748, 4uLL), (int32x4_t)v748));
            v751 = vminnmq_f32(v749, (float32x4_t)vuzp2q_s32((int32x4_t)vextq_s8((int8x16_t)v749, (int8x16_t)v749, 4uLL), (int32x4_t)v749));
            v752 = vmaxnmq_f32(v750, (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v750, (int32x4_t)vextq_s8((int8x16_t)v750, (int8x16_t)v750, 0xCuLL)), (int32x4_t)v750));
            v753 = vminnmq_f32(v751, (float32x4_t)vzip2q_s32(vzip1q_s32((int32x4_t)v751, (int32x4_t)vextq_s8((int8x16_t)v751, (int8x16_t)v751, 0xCuLL)), (int32x4_t)v751));
            v754 = *(_OWORD *)&vsubq_f32(v742, v741) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL);
            *(float32x2_t *)&v754 = vpadd_f32(*(float32x2_t *)&v754, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v754, (int8x16_t)v754, 8uLL));
            *(float32x2_t *)&v754 = vpadd_f32(*(float32x2_t *)&v754, *(float32x2_t *)&v754);
            *(float *)&v754 = *(float *)&v754 + *(float *)&v754;
            v755 = vsubq_f32(v752, v753);
            v755.f32[0] = 3.0 * v755.f32[0];
            v756 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32((float32x4_t)v754, v755)), 0);
            v742 = (float32x4_t)vbslq_s8(v756, (int8x16_t)v742, (int8x16_t)v752);
            v741 = (float32x4_t)vbslq_s8(v756, (int8x16_t)v741, (int8x16_t)v753);
            if (*(float *)&v754 >= v755.f32[0])
              v757 = 2;
            else
              v757 = 6;
          }
        }
        else
        {
          v757 = 8;
          v747 = v1292;
        }
        v758 = v613;
        v1298 = 31 - v613;
        v759 = 0;
        v760 = (uint16x4_t)vmovn_s32(v1303);
        v761 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v742.f32, 0);
        v762 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v742.f32, 1);
        v763 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v742, 2);
        v1304 = v742;
        v1309 = v741;
        v764 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v742, 3);
        v765 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v741.f32, 0);
        v766 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v741.f32, 1);
        v767 = 0uLL;
        v768 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v741, 2);
        v769 = 0uLL;
        v770 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v741, 3);
        do
        {
          v772 = *(float32x4_t *)(a1 + v759 + 144);
          v771 = *(float32x4_t *)(a1 + v759 + 160);
          v773 = vsubq_f32(v772, v761);
          v774 = vsubq_f32(v771, v761);
          v775 = *(float32x4_t *)(a1 + v759 + 272);
          v776 = *(float32x4_t *)(a1 + v759 + 288);
          v777 = vsubq_f32(v776, v762);
          v778 = *(float32x4_t *)(a1 + v759 + 400);
          v779 = *(float32x4_t *)(a1 + v759 + 416);
          v780 = vsubq_f32(v775, v762);
          v781 = vsubq_f32(v779, v763);
          v782 = vsubq_f32(v778, v763);
          v784 = *(float32x4_t *)(a1 + v759 + 528);
          v783 = *(float32x4_t *)(a1 + v759 + 544);
          v785 = vsubq_f32(v784, v764);
          v786 = vsubq_f32(v783, v764);
          v787 = vsubq_f32(v772, v765);
          v788 = vsubq_f32(v771, v765);
          v789 = vsubq_f32(v776, v766);
          v790 = vsubq_f32(v775, v766);
          v791 = vsubq_f32(v779, v768);
          v792 = vsubq_f32(v778, v768);
          v793 = vsubq_f32(v784, v770);
          v794 = vsubq_f32(v783, v770);
          v795 = vmlaq_f32(vmlaq_f32(vmulq_f32(v790, v790), v787, v787), v792, v792);
          v796 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v789, v789), v788, v788), v791, v791), v794, v794);
          v797 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v780, v780), v773, v773), v782, v782), v785, v785);
          v798 = *(int64x2_t *)(a1 + v759 + 1152);
          v799 = vorrq_s8((int8x16_t)v798, vorrq_s8((int8x16_t)vcgtq_f32(v747, v796), (int8x16_t)vcgtq_f32(v747, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v777, v777), v774, v774), v781, v781), v786, v786))));
          v798.i64[0] = v759;
          v796.i64[0] = 96;
          v769 = vsubq_s32(v769, (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v798, (int64x2_t)v796).i64[0], 0), (int8x16_t)v799.u64[0], v799));
          v767 = vsubq_s32(v767, (int32x4_t)vorrq_s8(*(int8x16_t *)(a1 + v759 + 1136), vorrq_s8((int8x16_t)vcgtq_f32(v747, vmlaq_f32(v795, v793, v793)), (int8x16_t)vcgtq_f32(v747, v797))));
          v759 += 32;
        }
        while (v759 != 128);
        v1277 = v766;
        v1293 = v765;
        v800 = vaddq_s32(v767, v769);
        v800.i64[0] = vpaddq_s32(v800, v800).u64[0];
        v801 = WeightInfoForSingleLineDualWeight_6x5(vpadd_s32(*(int32x2_t *)v800.i8, *(int32x2_t *)v800.i8).u8[0], v757);
        v1325 = v801;
        if ((_DWORD)v757 == 2)
        {
          v579 = a3;
          v607 = 0uLL;
          v606 = v1298;
          v604 = v1304;
          v603 = v1309;
          goto LABEL_247;
        }
        v804 = 0;
        *(float *)v803.i32 = ReciprocalTable[v801 >> 27];
        *(float *)v802.i32 = *(float *)v803.i32
                           * (float)((float)((float)(int)(v1279 + (v757 >> 1)) * 0.25) * *(float *)v803.i32);
        v604 = v1304;
        v603 = v1309;
        v805 = (int8x16_t)vsubq_f32(v1304, v1309);
        v806.i64[0] = 0x8000000080000000;
        v806.i64[1] = 0x8000000080000000;
        v807 = (float32x4_t)vdupq_n_s32(0x3B808081u);
        v808 = (float32x4_t)vbslq_s8((int8x16_t)vcgtq_f32(v807, vabdq_f32(v1304, v1309)), vorrq_s8(vandq_s8(v805, v806), (int8x16_t)v807), v805);
        __asm { FMOV            V0.4S, #1.0 }
        v810 = (float32x4_t)vdupq_lane_s32(v802, 0);
        v811 = vdivq_f32(_Q0, v808);
        v812 = *(unsigned __int8 *)(a1 + 135);
        v813 = 992 - 32 * v758;
        v814 = 0uLL;
        v815 = &v1355;
        v816 = 0uLL;
        v607 = 0uLL;
        v818.i64[1] = v768.i64[1];
        v817.i64[1] = v1277.i64[1];
        while (1)
        {
          v819 = (int8x16_t *)(a1 + v804);
          v820 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + v804 + 144), v1293), v811.f32[0]);
          v821 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)(a1 + v804 + 160), v1293), v811.f32[0]);
          *v815 = (int32x4_t)v820;
          v815[1] = (int32x4_t)v821;
          v822 = vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v804 + 272), v1277), *(float32x2_t *)v811.f32, 1);
          v823 = vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v804 + 288), v1277), *(float32x2_t *)v811.f32, 1);
          v815[2] = (int32x4_t)v822;
          v815[3] = (int32x4_t)v823;
          v824 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(a1 + v804 + 400), v768), v811, 2);
          v825 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(a1 + v804 + 416), v768), v811, 2);
          v815[4] = (int32x4_t)v824;
          v815[5] = (int32x4_t)v825;
          v826 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(a1 + v804 + 528), v770), v811, 3);
          v827 = vmulq_laneq_f32(vsubq_f32(*(float32x4_t *)(a1 + v804 + 544), v770), v811, 3);
          v815[6] = (int32x4_t)v826;
          v815[7] = (int32x4_t)v827;
          v828 = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v823, v823), v821, v821), v825, v825), v827, v827), *(float32x4_t *)((char *)&v815[1] + v813), *(float32x4_t *)((char *)&v815[1] + v813));
          v829 = (int8x16_t)vcgtq_f32(v810, vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v822, v822), v820, v820), v824, v824), v826, v826), *(float32x4_t *)((char *)v815 + v813), *(float32x4_t *)((char *)v815 + v813)));
          v830 = (int8x16_t)vcgtq_f32(v810, v828);
          v831 = (int8x16_t *)&v1337.i8[v804];
          *v831 = v829;
          v831[1] = v830;
          if (v812)
          {
            v829 = vbicq_s8(v829, v819[71]);
            v830 = vbicq_s8(v830, v819[72]);
            *v831 = v829;
            v831[1] = v830;
          }
          if (v804 == 96)
            break;
          v814 = vsubq_s32(v814, (int32x4_t)v829);
          v816 = vsubq_s32(v816, (int32x4_t)v830);
          v804 += 32;
          v815 += 8;
        }
        v830.i64[1] = 0;
        v1340 = v829;
        v1341 = v830;
        v832 = (int8x16_t)vsubq_s32(v816, (int32x4_t)v830);
        v833 = vaddq_s32(vsubq_s32(v814, (int32x4_t)v829), (int32x4_t)v832);
        v833.i64[0] = vpaddq_s32(v833, v833).u64[0];
        v834 = vpadd_s32(*(int32x2_t *)v833.i8, *(int32x2_t *)v833.i8).u8[0];
        v835 = (int32x4_t)vmovl_u16(v760);
        if ((v834 & 0xFE) != 0)
        {
          v836 = 0;
          v837 = (int8x16_t)vcltzq_s32(v1337);
          v838 = (int8x16_t)vcltzq_s32(v1338);
          v839 = (float32x4_t)vandq_s8(v838, *(int8x16_t *)(a1 + 160));
          v840 = (float32x4_t)vandq_s8(v837, *(int8x16_t *)(a1 + 144));
          v841 = (float32x4_t)vandq_s8(v1282[1], v838);
          v842 = (float32x4_t)vandq_s8(*v1282, v837);
          v843 = (float32x4_t)vandq_s8(v1282[9], v838);
          v844 = (float32x4_t)vandq_s8(v1282[8], v837);
          v845 = (float32x4_t)vandq_s8(v1282[17], v838);
          v846 = (float32x4_t)vandq_s8(v1282[16], v837);
          v847.i64[0] = 0x800000008;
          v847.i64[1] = 0x800000008;
          v848 = v1251;
          do
          {
            v817.i64[0] = v836;
            v818.i64[0] = 64;
            v849 = (int8x16_t)vcltzq_s32((int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v817, v818).i64[0], 0), (int8x16_t)*(unint64_t *)&v1339[v836 + 16], *(int8x16_t *)&v1339[v836 + 16]));
            v850 = (int8x16_t)vcltzq_s32(*(int32x4_t *)&v1339[v836]);
            v840 = vaddq_f32(v840, (float32x4_t)vandq_s8(v850, *(int8x16_t *)(a1 + v836 + 176)));
            v839 = vaddq_f32(v839, (float32x4_t)vandq_s8(v849, *(int8x16_t *)(a1 + v836 + 192)));
            v842 = vaddq_f32(v842, (float32x4_t)vandq_s8(v850, *(int8x16_t *)(a1 + v836 + 304)));
            v841 = vaddq_f32(v841, (float32x4_t)vandq_s8(v849, *(int8x16_t *)(a1 + v836 + 320)));
            v844 = vaddq_f32(v844, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v836 + 432), v850));
            v843 = vaddq_f32(v843, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v836 + 448), v849));
            v817 = *(int64x2_t *)(a1 + v836 + 560);
            v818 = *(int64x2_t *)(a1 + v836 + 576);
            v846 = vaddq_f32(v846, (float32x4_t)vandq_s8((int8x16_t)v817, v850));
            v845 = vaddq_f32(v845, (float32x4_t)vandq_s8((int8x16_t)v818, v849));
            v836 += 32;
          }
          while (v836 != 96);
          v832 = (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v840, v839), vaddq_f32(v842, v841)), vpaddq_f32(vaddq_f32(v844, v843), vaddq_f32(v846, v845))), ReciprocalTable[v834]);
          v603 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v835, 0x1FuLL)), (int8x16_t)v1309, v832);
        }
        else
        {
          v847.i64[0] = 0x800000008;
          v847.i64[1] = 0x800000008;
          v848 = v1251;
        }
        if (v564 != 3)
        {
          v851 = 0;
          *(float *)v832.i32 = *(float *)v803.i32 * (float)(*(float *)v803.i32 * 0.25);
          v852 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v832.i8, 0);
          v853 = (float32x4_t *)(&a51 - 4 * v758);
          v854 = 0uLL;
          v855 = 0uLL;
          v856 = 0uLL;
          v857 = 0uLL;
          do
          {
            v858 = (int8x16_t)vcgtq_f32(v852, vmulq_f32(*v853, *v853));
            v859 = (int8x16_t)vcgtq_f32(v852, vmulq_f32(v853[1], v853[1]));
            v860 = (int8x16_t *)&v1337.i8[v851];
            *v860 = v858;
            v860[1] = v859;
            if (v812)
            {
              v858 = vbicq_s8(v858, *(int8x16_t *)(a1 + v851 + 1136));
              v859 = vbicq_s8(v859, *(int8x16_t *)(a1 + v851 + 1152));
              *v860 = v858;
              v860[1] = v859;
            }
            if (v851 == 96)
            {
              v859.i64[1] = 0;
              v1340 = v858;
              v1341 = v859;
            }
            v856 = vsubq_s32(v856, (int32x4_t)v858);
            v857 = vsubq_s32(v857, (int32x4_t)v859);
            v855 = vaddq_f32(v855, (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v859), *(int8x16_t *)(v615 + v851 + 16)));
            v854 = vaddq_f32(v854, (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v858), *(int8x16_t *)(v615 + v851)));
            v851 += 32;
            v853 += 8;
          }
          while (v851 != 128);
          v861 = vaddq_s32(v856, v857);
          v862 = (float32x4_t)vpaddq_s32(v861, v861);
          *(int32x2_t *)v862.f32 = vpadd_s32(*(int32x2_t *)v862.f32, *(int32x2_t *)v862.f32);
          if ((v862.i8[0] & 0xFE) != 0)
          {
            v863 = vaddq_f32(v854, v855);
            v864 = vpaddq_f32(v863, v863);
            *(float32x2_t *)v864.f32 = vpadd_f32(*(float32x2_t *)v864.f32, *(float32x2_t *)v864.f32);
            v862.f32[0] = ReciprocalTable[v862.u8[0]];
            v603 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v835, 0x1FuLL)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v864, v862), 0), (int8x16_t)v603);
          }
        }
        v865 = 0;
        v866 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1304.f32, 0);
        v867 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1304.f32, 1);
        v868 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1304, 2);
        v869 = 992 - 32 * v758;
        v870 = 0uLL;
        v871 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v1304, 3);
        v872 = &v1355;
        v873 = 0uLL;
        while (1)
        {
          v874 = a1 + v865;
          v875 = vmulq_n_f32(vsubq_f32(v866, *(float32x4_t *)(a1 + v865 + 144)), v811.f32[0]);
          v876 = vmulq_n_f32(vsubq_f32(v866, *(float32x4_t *)(a1 + v865 + 160)), v811.f32[0]);
          *v872 = (int32x4_t)v875;
          v872[1] = (int32x4_t)v876;
          v877 = vmulq_lane_f32(vsubq_f32(v867, *(float32x4_t *)(a1 + v865 + 272)), *(float32x2_t *)v811.f32, 1);
          v878 = vmulq_lane_f32(vsubq_f32(v867, *(float32x4_t *)(a1 + v865 + 288)), *(float32x2_t *)v811.f32, 1);
          v872[2] = (int32x4_t)v877;
          v872[3] = (int32x4_t)v878;
          v879 = vmulq_laneq_f32(vsubq_f32(v868, *(float32x4_t *)(a1 + v865 + 400)), v811, 2);
          v880 = vmulq_laneq_f32(vsubq_f32(v868, *(float32x4_t *)(a1 + v865 + 416)), v811, 2);
          v872[4] = (int32x4_t)v879;
          v872[5] = (int32x4_t)v880;
          v881 = vmulq_laneq_f32(vsubq_f32(v871, *(float32x4_t *)(a1 + v865 + 528)), v811, 3);
          v882 = vmulq_laneq_f32(vsubq_f32(v871, *(float32x4_t *)(a1 + v865 + 544)), v811, 3);
          v872[6] = (int32x4_t)v881;
          v872[7] = (int32x4_t)v882;
          v883 = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v878, v878), v876, v876), v880, v880), v882, v882), *(float32x4_t *)((char *)&v872[1] + v869), *(float32x4_t *)((char *)&v872[1] + v869));
          v884 = vmlsq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v877, v877), v875, v875), v879, v879), v881, v881), *(float32x4_t *)((char *)v872 + v869), *(float32x4_t *)((char *)v872 + v869));
          v885 = (int8x16_t)vcgtq_f32(v810, v884);
          v886 = (int8x16_t)vcgtq_f32(v810, v883);
          v887 = (int8x16_t *)&v1337.i8[v865];
          *v887 = v885;
          v887[1] = v886;
          if (v812)
          {
            v884 = *(float32x4_t *)(v874 + 1152);
            v885 = vbicq_s8(v885, *(int8x16_t *)(v874 + 1136));
            v886 = vbicq_s8(v886, (int8x16_t)v884);
            *v887 = v885;
            v887[1] = v886;
          }
          if (v865 == 96)
            break;
          v870 = vsubq_s32(v870, (int32x4_t)v885);
          v873 = vsubq_s32(v873, (int32x4_t)v886);
          v865 += 32;
          v872 += 8;
        }
        v886.i64[1] = 0;
        v1340 = v885;
        v1341 = v886;
        v888 = vaddq_s32(vsubq_s32(v870, (int32x4_t)v885), vsubq_s32(v873, (int32x4_t)v886));
        v888.i64[0] = vpaddq_s32(v888, v888).u64[0];
        v889 = vpadd_s32(*(int32x2_t *)v888.i8, *(int32x2_t *)v888.i8).u8[0];
        if ((v889 & 0xFE) != 0)
        {
          v890 = 0;
          v891 = (int8x16_t)vcltzq_s32(v1337);
          v892 = (int8x16_t)vcltzq_s32(v1338);
          v893 = (float32x4_t)vandq_s8(v892, *(int8x16_t *)(a1 + 160));
          v894 = (float32x4_t)vandq_s8(v891, *(int8x16_t *)(a1 + 144));
          v895 = (float32x4_t)vandq_s8(v1282[1], v892);
          v896 = (float32x4_t)vandq_s8(*v1282, v891);
          v897 = (float32x4_t)vandq_s8(v1282[9], v892);
          v898 = (float32x4_t)vandq_s8(v1282[8], v891);
          v899 = (float32x4_t)vandq_s8(v1282[17], v892);
          v900 = (float32x4_t)vandq_s8(v1282[16], v891);
          do
          {
            v884.i64[0] = v890;
            v901 = (int8x16_t)vcltzq_s32((int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v884, v1250).i64[0], 0), (int8x16_t)*(unint64_t *)&v1339[v890 + 16], *(int8x16_t *)&v1339[v890 + 16]));
            v902 = (int8x16_t)vcltzq_s32(*(int32x4_t *)&v1339[v890]);
            v894 = vaddq_f32(v894, (float32x4_t)vandq_s8(v902, *(int8x16_t *)(a1 + v890 + 176)));
            v893 = vaddq_f32(v893, (float32x4_t)vandq_s8(v901, *(int8x16_t *)(a1 + v890 + 192)));
            v896 = vaddq_f32(v896, (float32x4_t)vandq_s8(v902, *(int8x16_t *)(a1 + v890 + 304)));
            v895 = vaddq_f32(v895, (float32x4_t)vandq_s8(v901, *(int8x16_t *)(a1 + v890 + 320)));
            v898 = vaddq_f32(v898, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v890 + 432), v902));
            v897 = vaddq_f32(v897, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v890 + 448), v901));
            v884 = *(float32x4_t *)(a1 + v890 + 560);
            v900 = vaddq_f32(v900, (float32x4_t)vandq_s8((int8x16_t)v884, v902));
            v899 = vaddq_f32(v899, (float32x4_t)vandq_s8(*(int8x16_t *)(a1 + v890 + 576), v901));
            v890 += 32;
          }
          while (v890 != 96);
          v604 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v835, 0x1FuLL)), (int8x16_t)v1304, (int8x16_t)vmulq_n_f32(vpaddq_f32(vpaddq_f32(vaddq_f32(v894, v893), vaddq_f32(v896, v895)), vpaddq_f32(vaddq_f32(v898, v897), vaddq_f32(v900, v899))), ReciprocalTable[v889]));
        }
        if (v564 == 3)
        {
          v579 = a3;
LABEL_246:
          v606 = v1298;
          goto LABEL_247;
        }
        v903 = 0;
        *(float *)v803.i32 = *(float *)v803.i32 * (float)(*(float *)v803.i32 * 0.25);
        v904 = (float32x4_t)vdupq_lane_s32(v803, 0);
        v905 = (float32x4_t *)(&a51 - 4 * v758);
        v906 = 0uLL;
        v907 = 0uLL;
        v908 = 0uLL;
        v909 = 0uLL;
        do
        {
          v910 = (int8x16_t)vcgtq_f32(v904, vmulq_f32(*v905, *v905));
          v911 = (int8x16_t)vcgtq_f32(v904, vmulq_f32(v905[1], v905[1]));
          v912 = (int8x16_t *)&v1337.i8[v903];
          *v912 = v910;
          v912[1] = v911;
          if (v812)
          {
            v910 = vbicq_s8(v910, *(int8x16_t *)(a1 + v903 + 1136));
            v911 = vbicq_s8(v911, *(int8x16_t *)(a1 + v903 + 1152));
            *v912 = v910;
            v912[1] = v911;
          }
          if (v903 == 96)
          {
            v911.i64[1] = 0;
            v1340 = v910;
            v1341 = v911;
          }
          v908 = vsubq_s32(v908, (int32x4_t)v910);
          v909 = vsubq_s32(v909, (int32x4_t)v911);
          v907 = vaddq_f32(v907, (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v911), *(int8x16_t *)(v615 + v903 + 16)));
          v906 = vaddq_f32(v906, (float32x4_t)vandq_s8((int8x16_t)vcltzq_s32((int32x4_t)v910), *(int8x16_t *)(v615 + v903)));
          v903 += 32;
          v905 += 8;
        }
        while (v903 != 128);
        v913 = vaddq_s32(v908, v909);
        v914 = (float32x4_t)vpaddq_s32(v913, v913);
        *(int32x2_t *)v914.f32 = vpadd_s32(*(int32x2_t *)v914.f32, *(int32x2_t *)v914.f32);
        if ((v914.i8[0] & 0xFE) != 0)
        {
          v915 = vaddq_f32(v906, v907);
          v916 = vpaddq_f32(v915, v915);
          *(float32x2_t *)v916.f32 = vpadd_f32(*(float32x2_t *)v916.f32, *(float32x2_t *)v916.f32);
          v914.f32[0] = ReciprocalTable[v914.u8[0]];
          v906 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmulq_f32(v916, v914), 0);
          v604 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(vshlq_n_s32(v835, 0x1FuLL)), (int8x16_t)v906, (int8x16_t)v604);
        }
        v579 = a3;
        if (!*(_BYTE *)(a1 + 134))
          goto LABEL_246;
        if (!v812)
        {
          v918 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v604, 3), (float32x4_t)vdupq_laneq_s32((int32x4_t)v603, 3)), 0);
          v604 = (float32x4_t)vandq_s8((int8x16_t)v604, v918);
          v603 = (float32x4_t)vbicq_s8((int8x16_t)v603, v918);
          goto LABEL_246;
        }
        v917 = vsubq_f32(v604, v603);
        v906.i32[0] = v917.i32[3];
        if (v917.f32[3] == 0.0)
        {
          if (*(_BYTE *)(a1 + 134) == 29)
          {
            v603 = 0uLL;
            goto LABEL_246;
          }
          v603 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
        }
        v907.i32[0] = 0;
        v919 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v907, v906), 0);
        v920 = vbslq_s8(v919, (int8x16_t)v603, (int8x16_t)v604);
        v921 = (float32x4_t)vbslq_s8(v919, (int8x16_t)vnegq_f32(v917), (int8x16_t)v917);
        v922 = (float32x4_t)vbslq_s8(v919, (int8x16_t)v604, (int8x16_t)v603);
        *(float *)v909.i32 = v922.f32[3] / v921.f32[3];
        v923 = ReciprocalTable[BYTE4(v801)];
        v924 = vmlsq_lane_f32(v922, v921, *(float32x2_t *)v909.i8, 0);
        v921.f32[0] = -v923;
        *(float *)v909.i32 = v923 + 1.0;
        if ((vminvq_u32((uint32x4_t)vandq_s8((int8x16_t)vcgtq_f32(v924, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v921.f32, 0)), (int8x16_t)vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v909.i8, 0), v924))) & 0x80000000) != 0)
        {
          v603 = vminnmq_f32(vmaxnmq_f32(v924, (float32x4_t)0), _Q0);
          v604 = (float32x4_t)v920;
        }
        else
        {
          v925 = (int8x16_t)vcltzq_s32(vshlq_n_s32(v835, 0x1FuLL));
          v603 = (float32x4_t)vbslq_s8(v925, (int8x16_t)v922, *(int8x16_t *)(v1284 + 16 * v1269));
          v926 = (int32x4_t)vandq_s8((int8x16_t)vsubq_f32(v1285, v603), v1267);
          v927 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v603.f32, 0);
          v928 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v603.f32, 1);
          v929 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v603, 2);
          v930 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v603, 3);
          v931 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v926.i8, 0);
          v932 = (float32x4_t)vdupq_laneq_s32(v926, 2);
          v933 = (float32x4_t)vdupq_laneq_s32(v926, 3);
          v934 = (int8x16_t)xmmword_20631C0A0;
          v935 = (int8x16_t)xmmword_20631C080;
          v936.i64[0] = -1;
          v936.i64[1] = -1;
          v937.i64[0] = 0x7F0000007FLL;
          v937.i64[1] = 0x7F0000007FLL;
          v938 = -128;
          v939.i64[0] = 0x7F0000007FLL;
          v939.i64[1] = 0x7F0000007FLL;
          v940.i64[0] = -1;
          v940.i64[1] = -1;
          do
          {
            v941 = vsubq_f32(*(float32x4_t *)(a1 + v938 + 272), v927);
            v942 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v938 + 400), v928), *(float32x2_t *)v926.i8, 1), v931, v941), v932, vsubq_f32(*(float32x4_t *)(a1 + v938 + 528), v929)), v933, vsubq_f32(*(float32x4_t *)(a1 + v938 + 656), v930));
            v943 = (int8x16_t)vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(*(float32x4_t *)(a1 + v938 + 416), v928), *(float32x2_t *)v926.i8, 1), v931, vsubq_f32(*(float32x4_t *)(a1 + v938 + 288), v927)), v932, vsubq_f32(*(float32x4_t *)(a1 + v938 + 544), v929)), v933, vsubq_f32(*(float32x4_t *)(a1 + v938 + 672), v930));
            v941.i64[0] = v938;
            v944 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)v941, v848).i64[0], 0), (int8x16_t)v943.u64[0], v943);
            v945 = (int8x16_t)vcgtq_f32(v944, v939);
            v946 = (int8x16_t)vcgtq_f32(v942, v937);
            v937 = vmaxnmq_f32(v937, v942);
            v939 = vmaxnmq_f32(v939, v944);
            v940 = vbslq_s8(v945, v934, v940);
            v936 = vbslq_s8(v946, v935, v936);
            v935 = (int8x16_t)vaddq_s32((int32x4_t)v935, v847);
            v934 = (int8x16_t)vaddq_s32((int32x4_t)v934, v847);
            v938 += 32;
          }
          while (v938);
          v947 = vbslq_s8((int8x16_t)vcgtq_f32(v939, v937), v940, v936);
          v948 = vmaxnmq_f32(v937, v939);
          v949 = (float32x4_t)vextq_s8((int8x16_t)v948, (int8x16_t)v948, 8uLL);
          v950 = vbslq_s8((int8x16_t)vcgtq_f32(v949, v948), vextq_s8(v947, v947, 8uLL), v947);
          v951 = vmaxnmq_f32(v948, v949);
          v604 = (float32x4_t)vbslq_s8(v925, v920, *(int8x16_t *)(v1284+ 16* vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v951), v951), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v950.i8, 1), v950).i32[0]));
          if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v604, v603))).i8[6] & 1) != 0)
            v604.i32[3] = 0;
          else
            v603.i32[3] = 0;
        }
        goto LABEL_246;
      }
    }
    v650 = vmlsq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v637, v639), v641), v643), v635, v635);
    v649 = (int8x16_t)vmlsq_f32(vaddq_f32(vaddq_f32(vaddq_f32(v636, v638), v640), v642), v634, v634);
    if (!v621)
      goto LABEL_160;
LABEL_159:
    v635 = (float32x4_t)vcltzq_s32(*(int32x4_t *)(a1 + v612 + 1136));
    v634 = (float32x4_t)vcltzq_s32(*(int32x4_t *)(a1 + v612 + 1152));
    v649 = vbslq_s8((int8x16_t)v634, v611, v649);
    v650 = (float32x4_t)vbslq_s8((int8x16_t)v635, v611, (int8x16_t)v650);
    goto LABEL_160;
  }
  v1272 = 0;
LABEL_284:
  v1128 = *v53;
  if (v343.f32[0] >= *v53)
  {
    v1135 = 0;
    v1139 = 0;
    LODWORD(v1129) = 0;
    LOBYTE(v1136) = 0;
    LOBYTE(v1137) = 0;
    v1130 = 0uLL;
    v1281 = 0;
    v1138 = 0uLL;
    v1132 = 0uLL;
    v1131 = 0uLL;
  }
  else
  {
    v1129 = v1273 >> 27;
    v1130 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)v1346, (float)v1129))), (int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)&v1346[16], (float)v1129)))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)&v1346[32], (float)v1129))), (int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)&v1346[48], (float)v1129)))));
    v1131 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1344, (float)v1129))), (int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)v1345, (float)v1129)))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)&v1345[16], (float)v1129))), (int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(*(float32x4_t *)&v1345[32], (float)v1129)))));
    v1132 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1351, (float)v1129))), (int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1352, (float)v1129)))), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1353, (float)v1129))), (int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1354, (float)v1129)))));
    v1133 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1349, (float)v1129))), (int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1350, (float)v1129))));
    v1134 = (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1347, (float)v1129))), (int16x8_t)vcvtq_s32_f32(vrndxq_f32(vmulq_n_f32(v1348, (float)v1129))));
    v1135 = v1273 & 0x1FFFF;
    v1136 = HIDWORD(v1273);
    v1137 = v1273 >> 40;
    *v53 = v343.f32[0];
    v1128 = v343.f32[0];
    v1138 = vuzp1q_s8(v1134, v1133);
    v1139 = v1272;
  }
  if (v1249 > v1128)
  {
    v1140 = v1136 + 1;
    v1141 = __clz(__rbit32(v1140));
    v1142 = v1140 >> v1141;
    v1143 = (v1140 >> v1141);
    v1144 = (int16x8_t)vmovl_u8(v1281);
    if ((_DWORD)v1141 && v1143 != 1)
    {
      v1145 = (uint16x8_t)vsubq_s16(vdupq_n_s16(v1136), v1144);
      if (v1143 == 3)
        v1146 = 21846;
      else
        v1146 = 13108;
      v1147 = (int8x16_t)vdupq_n_s16(v1146);
      v1148 = (int16x8_t)vminq_u16((uint16x8_t)v1144, v1145);
      v1149 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v1148.i8, *(uint16x4_t *)v1147.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v1148, (uint16x8_t)v1147), 0x10uLL);
      v1147.i64[0] = 0x1000100010001;
      v1147.i64[1] = 0x1000100010001;
      v1144 = (int16x8_t)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v1148, v1149, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v1142))), (uint16x8_t)vdupq_n_s16(v1141)), vaddq_s16(v1149, v1149)), vbicq_s8(v1147, (int8x16_t)vceqq_s16(v1148, v1144)));
    }
    v1150 = (int16x8_t)vandq_s8((int8x16_t)v1144, (int8x16_t)vcgtq_u16((uint16x8_t)vdupq_n_s16(v1137), (uint16x8_t)xmmword_20631C630));
    if (v1143 != 5)
    {
      if (v1143 == 3)
      {
        *(int8x8_t *)v1150.i8 = vmovn_s16(v1150);
        v1175 = (uint8x16_t)vandq_s8((int8x16_t)v1150, (int8x16_t)xmmword_20631C6B0);
        v1176 = vdupq_n_s8(v1141);
        v1177 = (int8x16_t)vshlq_u8(v1175, (uint8x16_t)vnegq_s8(v1176));
        v1178 = vqtbl1q_s8(v1177, (int8x16_t)xmmword_20631C6C0);
        v1179 = (int32x4_t)vqtbl1q_s8(v1177, (int8x16_t)xmmword_20631C6D0);
        v1180 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1178.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1178, v1178, 8uLL), (uint8x8_t)0x8010040180100401));
        v1180.i64[0] = vpaddq_s16(v1180, v1180).u64[0];
        v1181 = (int8x16_t)vmovl_s16(*(int16x4_t *)v1180.i8);
        v1182 = (int8x16_t)vshlq_n_s32(v1179, 5uLL);
        v1178.i64[0] = 0x3000000030;
        v1178.i64[1] = 0x3000000030;
        v1183.i64[0] = 0x2000000020;
        v1183.i64[1] = 0x2000000020;
        v1184 = (int8x16_t)vceqq_s32((int32x4_t)vandq_s8(v1181, v1178), v1183);
        v1185 = (int8x16_t)vaddw_s16((int32x4_t)v1182, *(int16x4_t *)v1180.i8);
        v1183.i64[0] = 0xFF000000FFLL;
        v1183.i64[1] = 0xFF000000FFLL;
        v1186 = (int8x16_t)vcgtq_s32((int32x4_t)v1185, v1183);
        if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v1184, v1186)) & 0x80000000) != 0)
        {
          v1187.i64[0] = 0x200000002;
          v1187.i64[1] = 0x200000002;
          v1188 = (int8x16_t)vceqq_s32(v1179, v1187);
          v1189 = (int8x16_t)vshrq_n_u32((uint32x4_t)v1181, 2uLL);
          v1190 = vandq_s8(v1186, v1188);
          v1191.i64[0] = 0xF0000000FLL;
          v1191.i64[1] = 0xF0000000FLL;
          v1192 = vandq_s8(v1181, v1191);
          v1193.i64[0] = 0x303030303030303;
          v1193.i64[1] = 0x303030303030303;
          v1194.i64[0] = 0x6060606060606060;
          v1194.i64[1] = 0x6060606060606060;
          v1185.i64[0] = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v1194, v1182, v1193), v1186), v1185), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v1192), v1184), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v1189, v1191)), v1190))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v1192), vandq_s8(v1190, v1184))).u64[0];
        }
        v1185.i64[1] = v1185.i64[0];
        v1195 = (int32x4_t)vmovl_u8((uint8x8_t)vorr_s8((int8x8_t)vshl_u8(vshl_u8((uint8x8_t)vand_s8(vqtbl1_s8(v1185, (int8x8_t)0x404040000000000), (int8x8_t)0x100C038060100C03), (uint8x8_t)0xFCFE00F9FBFCFE00), *(uint8x8_t *)v1176.i8), vand_s8(*(int8x8_t *)v1175.i8, vdup_n_s8((1 << v1141) - 1))));
        v1196 = vadd_s32(vdup_n_s32(2 * (int)v1141), (int32x2_t)0x300000004);
        v1197.i64[0] = v1196.u32[0];
        v1197.i64[1] = v1196.u32[1];
        v1198 = (int32x4_t)vshlq_u32(vmlal_u16((uint32x4_t)(*(_OWORD *)&v1195 & __PAIR128__(0xFF00FFFFFF00FFFFLL, 0xFF00FFFFFF00FFFFLL)), (uint16x4_t)vshrn_n_s32(v1195, 0x10uLL), vshl_u16((uint16x4_t)vdup_n_s16(1 << v1141), (uint16x4_t)0x2000100010002)), (uint32x4_t)vtrn1q_s32((int32x4_t)0, v1197));
        v1198.i64[0] = vpaddq_s32(v1198, v1198).u64[0];
        v1174 = ((unint64_t)v1198.u32[1] << (4 * v1141 + 7)) | v1198.u32[0];
      }
      else
      {
        if (v1143 == 1)
        {
          v1151.i64[0] = 0xFFFF0000FFFFLL;
          v1151.i64[1] = 0xFFFF0000FFFFLL;
          v1152.i64[0] = 0xFFFF0000FFFF0000;
          v1152.i64[1] = 0xFFFF0000FFFF0000;
          v1153 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8((int8x16_t)v1150, v1152), (uint32x4_t)vnegq_s32(vdupq_n_s32(16 - (int)v1141))), vandq_s8((int8x16_t)v1150, v1151));
          v1151.i64[0] = 0xFFFFFFFFLL;
          v1151.i64[1] = 0xFFFFFFFFLL;
          v1154 = vandq_s8(v1153, v1151);
          v1152.i64[0] = 0xFFFFFFFF00000000;
          v1152.i64[1] = 0xFFFFFFFF00000000;
          v1155 = (uint64x2_t)vandq_s8(v1153, v1152);
          *(int32x2_t *)v1152.i8 = vdup_n_s32(2 * (16 - (int)v1141));
          v1156.i64[0] = v1152.u32[0];
          v1156.i64[1] = v1152.u32[1];
          v1157 = vorrq_s8((int8x16_t)vshlq_u64(v1155, (uint64x2_t)vnegq_s64(v1156)), v1154);
          v1158 = v1157.i64[0];
          v1159 = v1157.i64[1] << (4 * v1141);
LABEL_301:
          v1174 = v1159 | v1158;
          goto LABEL_306;
        }
        v1174 = 0;
      }
LABEL_306:
      v1199 = __clz(__rbit32(v1129 + 1));
      v1200 = (v1129 + 1) >> v1199;
      v1344.i8[2] = v1199;
      v1344.i16[0] = v1129 | ((_WORD)v1200 << 8);
      if ((v1135 & 0x400) == 0)
      {
        v1355 = (int32x4_t)v1131;
        v1356 = (int32x4_t)v1130;
        *(double *)v1201.i64 = PackWeights((unsigned __int8 *)&v1344, (int8x16_t *)&v1355);
LABEL_322:
        v1247.i64[0] = v1135 | (v1174 << 17);
        v1247.i64[1] = v1174 >> 47;
        *a2 = vorrq_s8(v1201, v1247);
        return;
      }
      if (v1200 == 1)
      {
        v1202 = vzip2q_s8(v1131, v1138);
        v1203 = vzip1q_s8(v1131, v1138);
        v1204 = vzip2q_s8(v1130, v1132);
        v1205 = vzip1q_s8(v1130, v1132);
        v1206 = 60 * v1199;
        v1389.val[1] = vbicq_s8((int8x16_t)xmmword_20631CEB0, vceqzq_s8(v1202));
        v1389.val[0] = vbicq_s8((int8x16_t)xmmword_20631CEB0, vceqzq_s8(v1203));
        v1388.val[1] = vbicq_s8((int8x16_t)xmmword_20631CEB0, vceqzq_s8(v1204));
        v1388.val[0] = vbicq_s8((int8x16_t)xmmword_20631CEB0, vceqzq_s8(v1205));
        v1207 = vaddvq_s32((int32x4_t)vorrq_s8(vqtbl2q_s8(v1389, (int8x16_t)xmmword_20631CED0), vqtbl2q_s8(v1389, (int8x16_t)xmmword_20631CEC0))) | (unsigned __int128)((unint64_t)vaddvq_s32((int32x4_t)vorrq_s8(vqtbl2q_s8(v1388, (int8x16_t)xmmword_20631CED0), vqtbl2q_s8(v1388, (int8x16_t)xmmword_20631CEC0))) << 32);
      }
      else
      {
        if (v1199)
        {
          v1206 = 60 * v1199;
          v1207 = 0uLL;
          if (v1200 != 3)
            goto LABEL_321;
        }
        else
        {
          if (v1200 != 3)
          {
            v1206 = 0;
            v1207 = 0uLL;
            goto LABEL_321;
          }
          v1208 = vzip2q_s8(v1130, v1132);
          v1209 = vzip1q_s8(v1130, v1132);
          v1210 = vzip2q_s8(v1131, v1138);
          v1211 = vzip1q_s8(v1131, v1138);
          v1212 = vqtbl1q_s8(v1211, (int8x16_t)xmmword_20631C6C0);
          v1213 = vqtbl1q_s8(v1210, (int8x16_t)xmmword_20631C710);
          v1214 = vqtbl1q_s8(v1209, (int8x16_t)xmmword_20631CE60);
          v1215 = vqtbl1q_s8(v1208, (int8x16_t)xmmword_20631CE70);
          v1216 = (int16x8_t)vqtbl1q_s8(v1211, (int8x16_t)xmmword_20631C6D0);
          v1217 = vpaddq_s16(vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1212.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1212, v1212, 8uLL), (uint8x8_t)0x8010040180100401)), vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1213.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1213, v1213, 8uLL), (uint8x8_t)0x8010040180100401)));
          v1218 = vpaddq_s16(vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1214.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1214, v1214, 8uLL), (uint8x8_t)0x8010040180100401)), vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1215.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1215, v1215, 8uLL), (uint8x8_t)0x8010040180100401)));
          v1222 = vaddq_s16(v1217, (int16x8_t)vqtbl1q_s8((int8x16_t)v1217, (int8x16_t)xmmword_20631C730));
          v1220 = vaddq_s16(v1218, (int16x8_t)vqtbl1q_s8((int8x16_t)v1218, (int8x16_t)xmmword_20631C730));
          v1222.i16[3] = 0;
          v1219 = vuzp1q_s16(v1216, (int16x8_t)vqtbl1q_s8(v1210, (int8x16_t)xmmword_20631C720));
          v1220.i16[0] += v1222.i16[7];
          v1220.i16[3] = 0;
          v1221 = vuzp1q_s16((int16x8_t)vqtbl1q_s8(v1209, (int8x16_t)xmmword_20631CE80), (int16x8_t)vqtbl1q_s8(v1208, (int8x16_t)xmmword_20631CE90));
          v1222.i16[7] = 0;
          v1209.i64[0] = 0x30003000300030;
          v1209.i64[1] = 0x30003000300030;
          v1217.i64[0] = 0x20002000200020;
          v1217.i64[1] = 0x20002000200020;
          v1223 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8((int8x16_t)v1222, v1209), v1217);
          v1224 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8((int8x16_t)v1220, v1209), v1217);
          v1209.i64[0] = 0xFF00FF00FF00FFLL;
          v1209.i64[1] = 0xFF00FF00FF00FFLL;
          v1225 = (int8x16_t)vcgtq_u16((uint16x8_t)v1222, (uint16x8_t)v1209);
          v1226 = (int8x16_t)vcgtq_u16((uint16x8_t)v1220, (uint16x8_t)v1209);
          v1227 = vshlq_n_s16(v1219, 5uLL);
          v1228 = vshlq_n_s16(v1221, 5uLL);
          v1229 = (int8x16_t)vaddq_s16(v1222, v1227);
          if ((vmaxvq_u16((uint16x8_t)vorrq_s8(v1223, v1225)) & 0x8000) != 0)
          {
            v1230.i64[0] = 0x2000200020002;
            v1230.i64[1] = 0x2000200020002;
            v1231 = (int8x16_t)vceqq_s16(v1219, v1230);
            v1232 = (int8x16_t)vshrq_n_u16((uint16x8_t)v1222, 2uLL);
            v1233 = vandq_s8(v1225, v1231);
            v1234.i64[0] = 0xF000F000F000FLL;
            v1234.i64[1] = 0xF000F000F000FLL;
            v1235 = vandq_s8((int8x16_t)v1222, v1234);
            v1236.i64[0] = 0x303030303030303;
            v1236.i64[1] = 0x303030303030303;
            v1237.i64[0] = 0x6060606060606060;
            v1237.i64[1] = 0x6060606060606060;
            v1229 = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v1237, (int8x16_t)v1227, v1236), v1225), v1229), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v1235), v1223), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v1232, v1234)), v1233))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v1235), vandq_s8(v1233, v1223)));
          }
          v1238 = (int8x16_t)vaddq_s16(v1220, v1228);
          if ((vmaxvq_u16((uint16x8_t)vorrq_s8(v1224, v1226)) & 0x8000) != 0)
          {
            v1239 = (int8x16_t)vshrq_n_u16((uint16x8_t)v1220, 2uLL);
            v1240.i64[0] = 0xFF00FF00FF00FFLL;
            v1240.i64[1] = 0xFF00FF00FF00FFLL;
            v1241.i64[0] = 0x2000200020002;
            v1241.i64[1] = 0x2000200020002;
            v1242 = vandq_s8((int8x16_t)vcgtq_u16((uint16x8_t)v1220, v1240), (int8x16_t)vceqq_s16(v1221, v1241));
            v1241.i64[0] = 0xF000F000F000FLL;
            v1241.i64[1] = 0xF000F000F000FLL;
            v1243 = vandq_s8((int8x16_t)v1220, (int8x16_t)v1241);
            v1244.i64[0] = 0x303030303030303;
            v1244.i64[1] = 0x303030303030303;
            v1245.i64[0] = 0x6060606060606060;
            v1245.i64[1] = 0x6060606060606060;
            v1238 = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v1245, (int8x16_t)v1228, v1244), v1226), v1238), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v1243), v1224), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v1239, (int8x16_t)v1241)), v1242))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v1243), vandq_s8(v1242, v1224)));
          }
          v1206 = 0;
          v1207 = (unsigned __int128)vaddq_s8(vqtbl1q_s8(v1238, (int8x16_t)xmmword_20631CEA0), vqtbl1q_s8(v1229, (int8x16_t)xmmword_20631CB80));
        }
        v1206 += 96;
      }
LABEL_321:
      v1246 = vqtbl1q_s8((int8x16_t)(31 - __clz(v1139)), vsubq_s8((int8x16_t)xmmword_2062D8540, vdupq_n_s8((126 - v1206) >> 3)));
      v1201 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vqtbl1q_s8(v1246, (int8x16_t)xmmword_2062D8550), (uint64x2_t)vdupq_n_s64((126 - v1206) | 0xFFFFFFFFFFFFFFF8)), (int8x16_t)vshlq_u64((uint64x2_t)v1246, (uint64x2_t)vdupq_n_s64((126 - v1206) & 7))), vqtbl1q_s8(vrbitq_s8((int8x16_t)v1207), (int8x16_t)xmmword_20631C860));
      goto LABEL_322;
    }
    v1160 = vdupq_n_s16(v1141);
    v1161 = (int16x8_t)vshlq_u16((uint16x8_t)v1150, (uint16x8_t)vnegq_s16(v1160));
    *(int8x8_t *)v1161.i8 = vmovn_s16(v1161);
    v1162 = vqtbl1q_s8((int8x16_t)v1161, (int8x16_t)xmmword_20631C640);
    v1163 = (int16x8_t)vqtbl1q_s8((int8x16_t)v1161, (int8x16_t)xmmword_20631C650);
    v1164 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1162.i8, (uint8x8_t)0x2001200120012001), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1162, v1162, 8uLL), (uint8x8_t)0x2001200120012001));
    v1162.i64[0] = 0x7000700070007;
    v1162.i64[1] = 0x7000700070007;
    v1165 = (int16x8_t)vandq_s8((int8x16_t)v1164, v1162);
    v1166 = (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v1164, 5uLL), v1162);
    v1167.i64[0] = 0x4000400040004;
    v1167.i64[1] = 0x4000400040004;
    v1168 = (int8x16_t)vceqq_s16(v1163, v1167);
    v1169 = (int8x16_t)vceqq_s16(v1166, v1167);
    v1170 = vsubq_s8((int8x16_t)vaddq_s16(v1164, vshlq_n_s16(v1163, 3uLL)), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C660, (int8x16_t)v1165), v1169));
    if ((vmaxvq_u16((uint16x8_t)v1168) & 0x8000) != 0)
    {
      v1171.i64[0] = 0x18001800180018;
      v1171.i64[1] = 0x18001800180018;
      v1170.i64[0] = vsubq_s8(v1170, vaddq_s8(vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C670, (int8x16_t)v1165), v1168), vandq_s8((int8x16_t)vmulq_s16(v1166, v1171), vandq_s8((int8x16_t)vceqq_s16(v1165, v1167), v1168))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C680, (int8x16_t)v1165), vandq_s8(v1169, v1168)))).u64[0];
    }
    v1170.i64[1] = v1170.i64[0];
    v1172 = (int16x8_t)vshlq_u16((uint16x8_t)vorrq_s8((int8x16_t)vshlq_u16(vmovl_u8(vshl_u8((uint8x8_t)vand_s8(vqtbl1_s8(v1170, (int8x8_t)0x404020202000000), (int8x8_t)0x1807601807601807), (uint8x8_t)0xFD00FBFD00FBFD00)), (uint16x8_t)v1160), vandq_s8((int8x16_t)v1150, (int8x16_t)vdupq_n_s16(~(-1 << v1141)))), (uint16x8_t)vaddq_s16((int16x8_t)vdupq_n_s32((_DWORD)v1141 << 16), (int16x8_t)xmmword_20631C690));
    v1173 = (int32x4_t)vshlq_u32(vmovl_u16((uint16x4_t)*(_OWORD *)&vpaddq_s16(v1172, v1172)), (uint32x4_t)vaddq_s32((int32x4_t)vdupq_n_s64(v1141 << 33), (int32x4_t)xmmword_20631C6A0));
    v1173.i64[0] = vpaddq_s32(v1173, v1173).u64[0];
    v1158 = v1173.u32[0];
    v1159 = (v1173.i64[0] & 0xFFFFFFFF00000000) >> (22 - 4 * v1141);
    goto LABEL_301;
  }
}

void EncodeDualPartitionBlock(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int8x16_t *a5, float *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,unint64_t a31,uint64_t a32,unint64_t a33)
{
  unint64_t v33;
  unint64_t DualPartitionBlockInfo;
  unint64_t v37;
  float32x4_t v38;
  float32x4_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  int v43;
  int32x2_t v44;
  float32x4_t v45;
  uint64_t v46;
  float32x4_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  uint64_t v63;
  float32x4_t v64;
  float32x4_t v65;
  float32x4_t v66;
  float32x4_t v67;
  float32x4_t v68;
  float32x4_t v69;
  uint64_t v70;
  float32x4_t v71;
  float32x4_t v72;
  float32x4_t v73;
  float32x4_t v74;
  float32x4_t v75;
  float32x4_t v76;
  int32x4_t v77;
  int32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  float32x4_t v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;
  float32x4_t v86;
  float32x4_t v87;
  float32x4_t v88;
  float32x4_t v89;
  float32x4_t v90;
  float32x4_t v91;
  float32x4_t v92;
  float32x4_t v93;
  float32x4_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t *v97;
  int32x4_t v98;
  float32x4_t v99;
  float32x4_t v100;
  float32x4_t v101;
  float32x4_t v102;
  float32x4_t v103;
  float32x4_t v104;
  int32x4_t v105;
  float32x4_t v106;
  float32x4_t v107;
  float32x4_t v108;
  uint64_t v109;
  int16x8_t v110;
  unint64_t v111;
  int16x8_t v112;
  unint64_t v113;
  int16x8_t v114;
  unint64_t v115;
  int16x8_t v116;
  unint64_t v117;
  float32x4_t v118;
  float32x4_t v119;
  float32x4_t v120;
  float32x4_t v121;
  float32x4_t v122;
  float32x4_t v123;
  float32x4_t v124;
  float32x4_t v125;
  float32x4_t v126;
  int8x16_t v127;
  float32x4_t v128;
  float32x4_t v129;
  int8x16_t v130;
  int8x16_t v131;
  int8x16_t v132;
  int8x16_t v133;
  int8x16_t v134;
  float32x4_t v135;
  float32x4_t v136;
  float32x4_t v137;
  int16x8_t v138;
  int16x8_t v139;
  float32x4_t v140;
  float32x4_t v141;
  float32x4_t v142;
  float32x4_t v143;
  float32x4_t v144;
  float32x4_t v145;
  float32x4_t v146;
  float32x4_t v147;
  float32x4_t v148;
  float32x4_t v149;
  float32x4_t v150;
  float32x4_t v151;
  float32x4_t v152;
  float32x4_t v153;
  int16x8_t v154;
  int16x8_t v155;
  int16x8_t v156;
  int16x8_t v157;
  int16x8_t v158;
  int16x8_t v159;
  int8x16_t v160;
  int8x16_t v161;
  int8x16_t v162;
  int8x16_t v163;
  int8x16_t v164;
  int8x16_t v165;
  int8x16_t v166;
  int8x16_t v167;
  int8x16_t v168;
  int8x16_t v169;
  int8x16_t v170;
  float32x4_t v171;
  float32x4_t v172;
  int8x16_t v173;
  float32x4_t v174;
  unsigned __int32 v175;
  int32x4_t v176;
  int8x16_t v177;
  float32x4_t v178;
  float32x4_t v179;
  int8x16_t v180;
  float32x4_t v181;
  unsigned __int32 v182;
  uint64_t v183;
  float32x4_t v184;
  float32x4_t v185;
  float32x4_t v186;
  float32x4_t v187;
  float32x4_t v188;
  float32x4_t v189;
  float32x4_t v190;
  float32x4_t v191;
  float32x4_t v192;
  float32x4_t v193;
  float32x4_t v194;
  float32x4_t v195;
  int32x4_t v196;
  int32x4_t v197;
  float32x4_t v198;
  float32x4_t v199;
  float32x4_t v200;
  float32x4_t v201;
  float32x4_t v202;
  float32x4_t v203;
  float32x4_t v204;
  float32x4_t v205;
  float32x4_t v206;
  float32x4_t v207;
  float32x4_t v208;
  float32x4_t v209;
  float32x4_t v210;
  float32x4_t v211;
  float32x4_t v212;
  float32x4_t v213;
  int8x16_t v214;
  int8x16_t v215;
  int8x16_t *v216;
  uint64_t v217;
  int32x4_t v218;
  float v219;
  int16x8_t v220;
  uint64_t v221;
  int16x8_t v222;
  unint64_t v223;
  int16x8_t v224;
  uint64_t v225;
  int16x8_t v226;
  uint64_t v227;
  float32x4_t v228;
  float32x4_t v229;
  float32x4_t v230;
  float32x4_t v231;
  float32x4_t v232;
  float32x4_t v233;
  float32x4_t v234;
  float32x4_t v235;
  float32x4_t v236;
  float32x4_t v237;
  float32x4_t v238;
  float32x4_t v239;
  float32x4_t v240;
  float32x4_t v241;
  float32x4_t v242;
  int32x4_t v243;
  int32x4_t v244;
  float32x4_t v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  float32x4_t v252;
  float32x4_t v253;
  float32x4_t v254;
  float32x4_t v255;
  float32x4_t v256;
  float32x4_t v257;
  float32x4_t v258;
  float32x4_t v259;
  float32x4_t v260;
  int8x16_t v261;
  int8x16_t v262;
  int8x16_t *v263;
  int32x4_t v264;
  float32x4_t v265;
  float32x4_t v266;
  float32x4_t v267;
  float32x4_t v268;
  float32x4_t v269;
  float32x4_t v270;
  int8x16_t v271;
  float v273;
  float v274;
  float32x4_t *v275;
  uint64_t v281;
  unint64_t v282;
  int16x8_t v283;
  unint64_t v284;
  int16x8_t v285;
  unint64_t v286;
  int16x8_t v287;
  unint64_t v288;
  int16x8_t v289;
  unint64_t v290;
  float32x4_t v291;
  float32x4_t v292;
  float32x4_t v293;
  float32x4_t v294;
  float32x4_t v295;
  float32x4_t v296;
  float32x4_t v297;
  float32x4_t v298;
  float32x4_t v299;
  float32x4_t v300;
  float32x4_t v301;
  float32x4_t v302;
  float32x4_t v303;
  float32x4_t v304;
  float32x4_t v305;
  float32x4_t v306;
  float32x4_t v307;
  float32x4_t v309;
  float32x4_t v310;
  float32x4_t v311;
  float32x4_t v312;
  float32x4_t v313;
  float32x4_t v314;
  float32x4_t v315;
  float32x4_t v316;
  float32x4_t v317;
  float32x4_t v318;
  float32x4_t v319;
  float32x4_t v320;
  float32x4_t v321;
  float32x4_t v322;
  float32x4_t v323;
  float32x4_t v324;
  float32x4_t *v325;
  float32x4_t v326;
  int8x16_t v327;
  float v328;
  float v329;
  uint64_t v331;
  float32x4_t v332;
  float32x4_t v333;
  float32x4_t v334;
  float32x4_t v335;
  float32x4_t v336;
  float32x4_t v337;
  float32x4_t v338;
  float32x4_t v339;
  float32x4_t v340;
  float32x4_t v341;
  float32x4_t v342;
  float32x4_t v343;
  float32x4_t v344;
  float32x4_t v345;
  float32x4_t v346;
  float32x4_t v347;
  float32x4_t v349;
  float32x4_t v350;
  float32x4_t v351;
  float32x4_t v352;
  float32x4_t v353;
  float32x4_t v354;
  float32x4_t v355;
  float32x4_t v356;
  float32x4_t v357;
  float32x4_t v358;
  float32x4_t v359;
  float32x4_t v360;
  float32x4_t v361;
  float32x4_t *v362;
  uint64_t v363;
  float32x4_t v364;
  float32x4_t v365;
  float32x4_t v366;
  float32x4_t v367;
  float32x4_t v368;
  float32x4_t v369;
  float32x4_t v370;
  int32x4_t *v371;
  float32x4_t v372;
  int32x4_t *v373;
  float32x4_t v374;
  int16x8_t v375;
  unint64_t v376;
  int16x8_t v377;
  unint64_t v378;
  int16x8_t v379;
  unint64_t v380;
  int16x8_t v381;
  unint64_t v382;
  int16x8_t v383;
  unint64_t v384;
  int16x8_t v385;
  unint64_t v386;
  int16x8_t v387;
  unint64_t v388;
  int16x8_t v389;
  unint64_t v390;
  int8x16_t v391;
  int v392;
  int v393;
  int v394;
  int v395;
  unint64_t v396;
  unint64_t v397;
  float v398;
  int64x2_t v399;
  uint64_t v400;
  float32x4_t v402;
  float32x4_t *v403;
  float32x4_t *v404;
  float32x4_t *v405;
  float32x4_t v406;
  uint64_t v407;
  uint8x8_t v408;
  uint64_t v409;
  uint64_t v410;
  int8x16_t v411;
  int8x16_t v412;
  int8x16_t v413;
  char *v414;
  int8x16_t v415;
  int8x16_t v416;
  char *v417;
  int8x16_t v418;
  int v419;
  int8x16_t *v420;
  int8x16_t v421;
  int8x16_t v422;
  int8x16_t v423;
  int8x16_t v424;
  int8x16_t v425;
  int32x4_t v426;
  uint64_t i;
  int v428;
  int8x16_t v429;
  int8x16_t v430;
  int v431;
  unsigned int v432;
  char *v433;
  char *v434;
  int64_t v435;
  uint64_t v436;
  char *v437;
  char *v438;
  int8x16_t *v439;
  int8x16_t v440;
  int8x16_t v441;
  int8x16_t v442;
  int8x16_t v443;
  int8x16_t v444;
  int32x4_t v445;
  uint64_t j;
  int v447;
  int8x16_t v448;
  int8x16_t v449;
  int64_t v450;
  uint64_t v451;
  char *v452;
  char *v453;
  int8x16_t *v454;
  int8x16_t v455;
  int8x16_t v456;
  int8x16_t v457;
  int8x16_t v458;
  int8x16_t v459;
  int32x4_t v460;
  uint64_t k;
  int v462;
  int8x16_t v463;
  int8x16_t v464;
  uint64_t v465;
  float32x4_t v466;
  float32x4_t v467;
  float32x4_t v468;
  float32x4_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  __int128 v473;
  _OWORD *v474;
  __int128 v475;
  uint8x8_t v476;
  unint64_t *v477;
  unint64_t *v478;
  unint64_t *v479;
  unint64_t *v480;
  float32x4_t v481;
  float32x4_t *v482;
  float32x4_t v483;
  uint64_t v484;
  float32x4_t v485;
  int8x16_t v486;
  float v487;
  float32x4_t v488;
  float v489;
  float32x4_t v490;
  float32x4_t v491;
  float32x4_t v492;
  float32x4_t v493;
  int8x16_t v494;
  float v495;
  float v496;
  float32x4_t v497;
  float32x4_t v498;
  float32x4_t v499;
  float v500;
  float v501;
  float32x4_t v502;
  float32x4_t v503;
  float32x4_t v504;
  float32x4_t v505;
  float32x4_t v506;
  float32x4_t v507;
  float32x4_t v508;
  float32x4_t v509;
  int8x16_t v510;
  float32x4_t v511;
  float32x4_t v512;
  float32x4_t v513;
  float32x4_t v514;
  float32x4_t v515;
  float32x4_t v516;
  float32x4_t v517;
  float32x4_t v518;
  float32x4_t v519;
  float32x4_t v520;
  float32x4_t v521;
  float32x4_t v522;
  int8x16_t v523;
  int8x16_t v524;
  float32x4_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  int8x16_t *v529;
  int8x16_t v530;
  float v531;
  float32x4_t v532;
  float32x4_t v533;
  float32x4_t v534;
  float32x4_t v535;
  int8x16_t v536;
  float v537;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  float32x4_t v542;
  float32x4_t v543;
  float32x4_t v544;
  float32x4_t v545;
  float32x4_t v546;
  float32x4_t v547;
  float32x4_t v548;
  float32x4_t v549;
  float32x4_t v550;
  int8x16_t v552;
  float32x4_t v553;
  float32x4_t v554;
  int8x16_t v555;
  float32x4_t v556;
  float32x4_t v557;
  float32x4_t v558;
  float32x4_t v559;
  float32x4_t v560;
  float32x4_t v561;
  float32x4_t v562;
  float32x4_t v563;
  int8x16_t v564;
  float32x4_t v565;
  float32x4_t v566;
  float32x4_t v567;
  float32x4_t v568;
  float32x4_t v569;
  float32x4_t v570;
  int8x16_t v571;
  int8x16_t *v572;
  unsigned int v573;
  unsigned int v574;
  float32x4_t v575;
  float32x4_t v576;
  float32x4_t v577;
  float32x4_t v578;
  float32x4_t v579;
  float32x4_t v580;
  float32x4_t v581;
  float32x4_t v582;
  float32x4_t v583;
  float32x4_t v584;
  float32x4_t v585;
  float32x4_t v586;
  float32x4_t v587;
  float32x4_t v589;
  float32x4_t v590;
  float32x4_t v591;
  float32x4_t v592;
  float32x4_t v593;
  float32x4_t v594;
  float32x4_t v595;
  float32x4_t v597;
  float32x4_t v598;
  float32x4_t v599;
  float32x4_t v600;
  float32x4_t v601;
  float32x4_t v602;
  float32x4_t v603;
  float32x4_t v604;
  float32x4_t v605;
  float32x4_t v606;
  float32x4_t v607;
  float32x4_t v608;
  float32x4_t v609;
  float32x4_t v610;
  float32x4_t v611;
  float32x4_t v612;
  float32x4_t v613;
  float32x4_t v614;
  float32x4_t v615;
  unint64_t *v616;
  uint64_t m;
  float32x4_t v618;
  float32x4_t v619;
  float32x4_t v620;
  float32x4_t v621;
  float32x4_t v622;
  int32x4_t v623;
  int32x4_t v624;
  int32x4_t v625;
  int32x4_t v626;
  float32x4_t v627;
  float32x4_t v628;
  float32x4_t v629;
  float32x4_t v630;
  uint64_t v631;
  unint64_t DualPartitionBlockInfo_7x7;
  unint64_t v633;
  uint64_t v634;
  unint64_t v635;
  float v636;
  float v637;
  float32x4_t *v638;
  float32x4_t v639;
  float32x4_t v640;
  float32x4_t v641;
  float32x4_t v642;
  float v643;
  float32x4_t *v644;
  int32x4_t v647;
  int32x4_t v648;
  int32x4_t v649;
  int32x4_t v650;
  uint64_t v651;
  uint64_t v652;
  float32x4_t v653;
  float32x4_t v654;
  float32x4_t v655;
  float32x4_t v656;
  float32x4_t v657;
  float32x4_t v658;
  float32x4_t v659;
  float32x4_t v660;
  float32x4_t v661;
  float32x4_t v662;
  float32x4_t v663;
  float32x4_t v664;
  float32x4_t v665;
  float32x4_t v666;
  float32x4_t v667;
  float32x4_t v668;
  float32x4_t v669;
  float32x4_t v670;
  float32x4_t v671;
  float32x4_t v672;
  float32x4_t v673;
  float32x4_t v674;
  float32x4_t v675;
  float32x4_t v676;
  float32x4_t v677;
  float32x4_t v678;
  float32x4_t v679;
  float32x4_t v680;
  float32x4_t v681;
  float32x4_t v682;
  float32x4_t v683;
  float32x4_t v684;
  float32x4_t v685;
  float32x4_t v686;
  float32x4_t v687;
  float32x4_t v688;
  float32x4_t v689;
  float32x4_t v690;
  float32x4_t v691;
  float32x4_t v692;
  float32x4_t v693;
  float32x4_t v694;
  float32x4_t v695;
  float32x4_t v696;
  int8x16_t v697;
  int8x16_t v698;
  int8x16_t v699;
  float32x4_t v700;
  int8x16_t v701;
  int8x16_t v702;
  int8x16_t v703;
  float32x4_t v704;
  int8x16_t v705;
  int8x16_t v706;
  float32x4_t v707;
  float32x4_t v708;
  float32x4_t v709;
  float32x4_t v710;
  int8x16_t v711;
  int8x16_t v712;
  float32x4_t v713;
  int8x16_t v714;
  float32x4_t v715;
  float32x4_t v716;
  int8x8_t v717;
  int8x16_t v719;
  int8x16_t v720;
  float32x4_t v721;
  float32x4_t v722;
  float32x4_t v723;
  float32x4_t v724;
  float32x4_t v725;
  float32x4_t v726;
  float32x4_t v727;
  float32x4_t v728;
  float32x4_t v729;
  float32x4_t v730;
  float32x4_t v731;
  float32x4_t v732;
  float32x4_t v733;
  float32x4_t v734;
  int8x16_t v735;
  float32x4_t v736;
  float32x4_t v737;
  float32x4_t v738;
  float32x4_t v739;
  float32x4_t v740;
  float32x4_t v741;
  float32x4_t v742;
  float32x4_t v743;
  float32x4_t v744;
  float32x4_t v745;
  float32x4_t v746;
  float32x4_t v747;
  float32x4_t v748;
  float32x4_t v749;
  float32x4_t v750;
  float32x4_t v751;
  int8x16_t v752;
  float v753;
  __int128 v754;
  __int128 v755;
  unsigned int v756;
  unsigned int v757;
  int v758;
  int8x16_t v759;
  int8x16_t v760;
  int8x16_t v761;
  int8x16_t v762;
  int8x16_t v763;
  int8x16_t v764;
  int8x16_t v765;
  int8x16_t v766;
  uint64x2_t v767;
  int64x2_t v768;
  int8x16_t v769;
  unint64_t v770;
  int v771;
  uint64_t v772;
  uint16x8_t v773;
  uint16x8_t v774;
  uint16x8_t v775;
  uint16x8_t v776;
  uint16x8_t v777;
  int16x8_t v778;
  int16x8_t v779;
  unsigned int v780;
  uint16x8_t v781;
  int16x8_t v782;
  int16x8_t v783;
  int16x8_t v784;
  uint16x8_t v785;
  uint16x8_t v786;
  uint16x8_t v787;
  int8x16_t v788;
  int8x16_t v789;
  int8x16_t v790;
  int8x16_t v791;
  int8x16_t v792;
  int8x16_t v793;
  int8x16_t v794;
  int32x4_t v795;
  int16x8_t v796;
  int8x16_t v797;
  int8x16_t v798;
  int32x4_t v799;
  int8x16_t v800;
  int8x16_t v801;
  int8x16_t v802;
  int32x4_t v803;
  int8x16_t v804;
  int8x16_t v805;
  int8x16_t v806;
  int8x16_t v807;
  int8x16_t v808;
  int8x16_t v809;
  int8x16_t v810;
  int8x16_t v811;
  int8x16_t v812;
  int8x16_t v813;
  int8x16_t v814;
  int8x16_t v815;
  int8x16_t v816;
  int64x2_t v817;
  uint64x2_t v818;
  int64x2_t v819;
  int64x2_t v820;
  char v821;
  int8x16_t v822;
  int8x16_t v823;
  int8x16_t v824;
  int16x8_t v825;
  int16x8_t v826;
  int8x16_t v827;
  int16x8_t v828;
  int16x8_t v829;
  int16x8_t v830;
  int8x16_t v831;
  int8x16_t v832;
  int8x16_t v833;
  int16x8_t v834;
  int8x16_t v835;
  int8x16_t v836;
  int8x16_t v837;
  int32x4_t v838;
  int8x16_t v839;
  int32x4_t v840;
  int8x16_t v841;
  int8x16_t v842;
  int64x2_t v843;
  unint64_t v844;
  uint64x2_t v845;
  int64x2_t v846;
  int64x2_t v847;
  unsigned int v848;
  int v849;
  int8x16_t v850;
  int8x16_t v851;
  unsigned __int128 v852;
  uint16x8_t v853;
  uint16x8_t v854;
  uint16x8_t v855;
  uint16x8_t v856;
  uint16x8_t v857;
  uint16x8_t v858;
  uint16x8_t v859;
  uint16x8_t v860;
  uint16x8_t v861;
  int16x8_t v862;
  int16x8_t v863;
  int16x8_t v864;
  int16x8_t v865;
  unsigned int v866;
  uint16x8_t v867;
  int16x8_t v868;
  int16x8_t v869;
  int16x8_t v870;
  int16x8_t v871;
  int16x8_t v872;
  uint16x8_t v873;
  int8x16_t v874;
  uint16x8_t v875;
  uint16x8_t v876;
  uint16x8_t v877;
  uint16x8_t v878;
  uint16x8_t v879;
  uint16x8_t v880;
  uint16x8_t v881;
  uint16x8_t v882;
  int16x8_t v883;
  int16x8_t v884;
  int16x8_t v885;
  int16x8_t v886;
  int16x8_t v887;
  int16x8_t v888;
  int16x8_t v889;
  int16x8_t v890;
  int8x16_t v891;
  int8x16_t v892;
  int8x16_t v893;
  int8x16_t v894;
  int16x8_t v895;
  int16x8_t v896;
  int16x8_t v897;
  int16x8_t v898;
  int8x16_t v899;
  int16x8_t v900;
  int8x16_t v901;
  int8x16_t v902;
  int16x8_t v903;
  int8x16_t v904;
  int16x8_t v905;
  int8x16_t v906;
  int8x16_t v907;
  int8x16_t v908;
  int8x16_t v909;
  int8x16_t v910;
  int8x16_t v911;
  int8x16_t v912;
  int8x16_t v913;
  int8x16_t v914;
  int16x8_t v915;
  int16x8_t v916;
  int16x8_t v917;
  int16x8_t v918;
  int8x16_t v919;
  int8x16_t v920;
  int16x8_t v921;
  int8x16_t v922;
  int8x16_t v923;
  int16x8_t v924;
  int8x16_t v925;
  int8x16_t v926;
  int8x16_t v927;
  int8x16_t v928;
  int8x16_t v929;
  int8x16_t v930;
  float32x4_t v933;
  float32x4_t v935;
  float32x4_t v936;
  float32x4_t v937;
  float32x4_t v938;
  float32x4_t v939;
  float32x4_t v940;
  float32x4_t v942;
  unint64_t *v943;
  uint64_t n;
  float32x4_t v945;
  int8x16_t v946;
  float32x4_t v947;
  int8x16_t v948;
  int8x16_t v949;
  int8x16_t v950;
  int32x4_t v951;
  unint64_t DualPartitionBlockInfo_6x5;
  unint64_t v953;
  int64x2_t v954;
  uint64_t v955;
  unint64_t v956;
  float v957;
  float v958;
  float32x4_t *v959;
  float32x4_t v960;
  int8x16_t v961;
  float32x4_t v962;
  __int128 v963;
  float32x4_t *v964;
  int32x4_t v967;
  int32x4_t v968;
  uint64_t v969;
  uint64_t v970;
  float32x4_t v971;
  float32x4_t v972;
  float32x4_t v973;
  float32x4_t v974;
  float32x4_t v975;
  float32x4_t v976;
  float32x4_t v977;
  float32x4_t v978;
  float32x4_t v979;
  float32x4_t v980;
  float32x4_t v981;
  float32x4_t v982;
  float32x4_t v983;
  float32x4_t v984;
  float32x4_t v985;
  int8x16_t v986;
  float32x4_t v987;
  float32x4_t v988;
  float32x4_t v989;
  float32x4_t v990;
  float32x4_t v991;
  float32x4_t v992;
  float32x4_t v993;
  float32x4_t v994;
  float32x4_t v995;
  float32x4_t v996;
  float32x4_t v997;
  int8x16_t v998;
  int8x16_t v999;
  float32x4_t v1000;
  int8x16_t v1001;
  float32x4_t v1002;
  int8x16_t v1003;
  int8x16_t v1004;
  int8x16_t v1005;
  float32x4_t v1006;
  int8x16_t v1007;
  int8x16_t v1008;
  float32x4_t v1009;
  float32x4_t v1010;
  float32x4_t v1011;
  float32x4_t v1012;
  int8x16_t v1013;
  int8x16_t v1014;
  float32x4_t v1015;
  int8x16_t v1016;
  float32x4_t v1017;
  float32x4_t v1018;
  int8x8_t v1019;
  int8x16_t v1021;
  int8x16_t v1022;
  float32x4_t v1023;
  float32x4_t v1024;
  float32x4_t v1025;
  float32x4_t v1026;
  float32x4_t v1027;
  float32x4_t v1028;
  float32x4_t v1029;
  float32x4_t v1030;
  float32x4_t v1031;
  float32x4_t v1032;
  float32x4_t v1033;
  float32x4_t v1034;
  float32x4_t v1035;
  float32x4_t v1036;
  int8x16_t v1037;
  float32x4_t v1038;
  float32x4_t v1039;
  float32x4_t v1040;
  float32x4_t v1041;
  float32x4_t v1042;
  float32x4_t v1043;
  float32x4_t v1044;
  float32x4_t v1045;
  float32x4_t v1046;
  float32x4_t v1047;
  float32x4_t v1048;
  float32x4_t v1049;
  float32x4_t v1050;
  float32x4_t v1051;
  float32x4_t v1052;
  float32x4_t v1053;
  float32x4_t v1054;
  int8x16_t v1055;
  float v1056;
  __int128 v1057;
  unsigned int v1058;
  unsigned int v1059;
  int v1060;
  int8x16_t v1061;
  int8x16_t v1062;
  int8x16_t v1063;
  int8x16_t v1064;
  int8x16_t v1065;
  int8x16_t v1066;
  int8x16_t v1067;
  int8x16_t v1068;
  uint64x2_t v1069;
  int64x2_t v1070;
  int8x16_t v1071;
  unint64_t v1072;
  int v1073;
  uint64_t v1074;
  uint16x8_t v1075;
  uint16x8_t v1076;
  uint16x8_t v1077;
  uint16x8_t v1078;
  uint16x8_t v1079;
  int16x8_t v1080;
  int16x8_t v1081;
  unsigned int v1082;
  uint16x8_t v1083;
  int16x8_t v1084;
  int16x8_t v1085;
  int16x8_t v1086;
  uint16x8_t v1087;
  uint16x8_t v1088;
  uint16x8_t v1089;
  int8x16_t v1090;
  int8x16_t v1091;
  int8x16_t v1092;
  int8x16_t v1093;
  int8x16_t v1094;
  int8x16_t v1095;
  int8x16_t v1096;
  int32x4_t v1097;
  int16x8_t v1098;
  int8x16_t v1099;
  int8x16_t v1100;
  int32x4_t v1101;
  int8x16_t v1102;
  int8x16_t v1103;
  int8x16_t v1104;
  int32x4_t v1105;
  int8x16_t v1106;
  int8x16_t v1107;
  int8x16_t v1108;
  int8x16_t v1109;
  int8x16_t v1110;
  int8x16_t v1111;
  int8x16_t v1112;
  int8x16_t v1113;
  int8x16_t v1114;
  int8x16_t v1115;
  int8x16_t v1116;
  int8x16_t v1117;
  int8x16_t v1118;
  int64x2_t v1119;
  uint64x2_t v1120;
  int64x2_t v1121;
  int64x2_t v1122;
  char v1123;
  int8x16_t v1124;
  int8x16_t v1125;
  int8x16_t v1126;
  int16x8_t v1127;
  int16x8_t v1128;
  int8x16_t v1129;
  int16x8_t v1130;
  int16x8_t v1131;
  int16x8_t v1132;
  int8x16_t v1133;
  int8x16_t v1134;
  int8x16_t v1135;
  int16x8_t v1136;
  int8x16_t v1137;
  int8x16_t v1138;
  int8x16_t v1139;
  int32x4_t v1140;
  int8x16_t v1141;
  int32x4_t v1142;
  int8x16_t v1143;
  int8x16_t v1144;
  int64x2_t v1145;
  unint64_t v1146;
  uint64x2_t v1147;
  int64x2_t v1148;
  int64x2_t v1149;
  int8x16_t v1150;
  unsigned int v1151;
  char v1152;
  __int128 v1153;
  int8x16_t v1154;
  uint64_t v1155;
  float32x4_t v1158;
  float32x4_t v1159;
  float32x4_t v1161;
  float32x4_t v1162;
  float32x4_t v1163;
  float32x4_t v1164;
  float32x4_t v1165;
  float32x4_t v1166;
  float32x4_t v1167;
  float32x4_t v1168;
  float32x4_t v1169;
  float32x4_t v1170;
  float32x4_t v1171;
  float32x4_t v1172;
  float32x4_t v1173;
  float32x4_t v1174;
  float32x4_t v1175;
  float32x4_t v1176;
  float32x4_t v1177;
  float32x4_t v1178;
  float32x4_t v1179;
  float32x4_t v1180;
  float32x4_t v1181;
  float32x4_t v1182;
  float32x4_t v1183;
  float32x4_t *v1184;
  int8x16_t v1185;
  unint64_t v1186;
  float v1187;
  float v1188;
  float v1189;
  float32x4_t *v1190;
  int32x4_t v1191;
  float32x4_t v1193;
  float32x4_t v1194;
  float32x4_t v1195;
  float32x4_t v1196;
  float32x4_t v1197;
  float32x4_t v1198;
  int8x16_t v1199;
  int8x16_t v1200;
  int8x16_t v1201;
  int8x16_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  float32x4_t v1205;
  float32x4_t v1206;
  float32x4_t v1207;
  float32x4_t v1208;
  float32x4_t v1209;
  float32x4_t v1210;
  float32x4_t v1211;
  float32x4_t v1212;
  float32x4_t v1213;
  float32x4_t v1214;
  float32x4_t v1215;
  float32x4_t v1216;
  float32x4_t v1217;
  float32x4_t v1218;
  float32x4_t v1219;
  float32x4_t v1220;
  float32x4_t v1221;
  float32x4_t v1222;
  float32x4_t v1223;
  float32x4_t v1224;
  float32x4_t v1225;
  float32x4_t v1226;
  float32x4_t v1227;
  int8x16_t v1228;
  int8x16_t v1229;
  int8x16_t v1230;
  int8x16_t v1231;
  int8x16_t v1232;
  float32x4_t v1233;
  int8x16_t v1234;
  int8x16_t v1235;
  int8x16_t v1236;
  int8x16_t v1237;
  int8x16_t v1238;
  int8x16_t v1239;
  int8x16_t v1240;
  int8x16_t v1241;
  float32x4_t v1242;
  float32x4_t v1243;
  float32x4_t v1244;
  float32x4_t v1245;
  float32x4_t v1246;
  int8x8_t v1247;
  int8x16_t v1249;
  int8x16_t v1250;
  int8x16_t v1251;
  float32x4_t v1252;
  float32x4_t v1253;
  float32x4_t v1254;
  float32x4_t v1255;
  float32x4_t v1256;
  float32x4_t v1257;
  float32x4_t v1258;
  float32x4_t v1259;
  float32x4_t v1260;
  float32x4_t v1261;
  float32x4_t v1262;
  float32x4_t v1263;
  float32x4_t v1264;
  float32x4_t v1265;
  float32x4_t v1266;
  float32x4_t v1267;
  float32x4_t v1268;
  float32x4_t v1269;
  float32x4_t v1270;
  float32x4_t v1271;
  float32x4_t v1272;
  float32x4_t v1273;
  float32x4_t v1274;
  float32x4_t v1275;
  float32x4_t v1276;
  float32x4_t v1277;
  float32x4_t v1278;
  float32x4_t v1279;
  float32x4_t v1280;
  float32x4_t v1281;
  float32x4_t v1282;
  float32x4_t v1283;
  float v1284;
  int8x16_t v1285;
  unint64_t v1286;
  int64x2_t v1287;
  float32x4_t vars0;
  float32x4_t v1293;
  float32x4_t v1294;
  float32x4_t v1295;
  float32x4_t v1296;
  uint64_t v1297;
  unint64_t v1298;
  float32x4_t v1299;
  __int16 v1300;
  float32x4_t v1302;
  float32x4_t v1303;
  float32x4_t v1304;
  float32x4_t v1305;
  float32x4_t v1306;
  int v1307;
  float32x4_t v1308;
  int v1309;
  float32x4_t v1310;
  float32x4_t v1311;
  float32x4_t v1312;
  float32x4_t v1313;
  float32x4_t v1314;
  float32x4_t v1315;
  float v1316;
  float32x4_t v1317;
  float32x4_t v1318;
  float32x4_t v1319;
  float32x4_t v1320;
  float32x4_t v1321;
  float32x4_t v1322;
  float32x4_t v1323;
  int32x4_t v1324;
  int8x16_t v1325;
  int8x16_t v1326;
  float32x4_t v1327;
  int32x4_t v1328;
  float32x4_t v1329;
  float32x4_t v1330;
  float32x4_t v1331;
  float32x4_t v1332;
  float32x4_t v1333;
  float32x4_t v1334;
  int32x4_t v1335;
  float32x4_t v1336;
  int32x4_t v1337;
  float32x4_t v1338;
  int32x4_t v1339;
  float32x4_t v1340;
  float32x4_t v1341;
  int8x16_t v1342;
  int8x16_t v1343;
  int32x4_t v1344;
  float32x4_t v1345;
  float32x4_t v1346;
  int8x16_t v1347;
  int8x16_t v1348;
  int32x4_t v1349;
  float32x4_t v1350;
  int8x16_t v1351;
  int8x16_t v1352;
  int8x16_t v1353;
  int8x16_t v1354;
  int8x16x2_t v1355;
  int8x16x2_t v1356;

  STACK[0x1258] = *MEMORY[0x24BDAC8D0];
  DualPartitionBlockInfo = GetDualPartitionBlockInfo(8u, 16 - 4 * *(char *)(a1 + 136));
  v1309 = 0;
  v1307 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  v43 = 0;
  *(float *)v44.i32 = *(float *)((char *)ReciprocalTable + ((DualPartitionBlockInfo >> 54) & 0x3FC)) * 0.5;
  *(float *)v44.i32 = *(float *)v44.i32 * *(float *)v44.i32;
  v45.i32[0] = 3.0;
  if (!*(_BYTE *)(a1 + 136))
    v45.f32[0] = 4.0;
  *(float *)v44.i32 = *(float *)v44.i32 * v45.f32[0];
  v46 = a7 + 400;
  v47 = (float32x4_t)vdupq_lane_s32(v44, 0);
  v45.i32[0] = 2139095040;
  v1311 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
  v1313 = v1311;
  v1320 = v1311;
  v1322 = v1311;
  v1316 = INFINITY;
  v1314 = v45;
  v1329 = v1311;
  v1318 = v1311;
  v1334 = v47;
  do
  {
    v48 = v41;
    if (v41 < 3)
      v49 = 3;
    else
      v49 = -3;
    ++v41;
    if (v48 <= 4)
    {
      v50 = v49 + v48;
      v51 = v46 + (v48 << 8);
      v52 = v48 + 1;
      while (1)
      {
        if (v52 == v50)
          goto LABEL_78;
        v53 = colorVertexTable[v52];
        v54 = colorVertexTable[v48];
        v55 = v53 & 3;
        v56 = v53 >> 4;
        v57 = v54 & 3;
        v58 = v54 >> 4;
        if (v55 == v57)
          break;
        if (v55 == v58)
        {
          v59 = v55;
          v55 = v56;
        }
        else
        {
          if (v56 == v57)
          {
            v59 = v56;
            goto LABEL_16;
          }
          v59 = v56;
          if (v56 != v58)
            return;
        }
LABEL_17:
        v60 = *(float32x4_t *)(a7 + 288 + 16 * v59);
        v61 = *(float32x4_t *)(a7 + 288 + 16 * v55);
        if ((vminvq_u32((uint32x4_t)vceqq_f32(v60, v61)) & 0x80000000) == 0)
        {
          v62 = *(float32x4_t *)(a7 + 288 + 16 * v57);
          if ((vminvq_u32((uint32x4_t)vceqq_f32(v60, v62)) & 0x80000000) == 0
            && (vminvq_u32((uint32x4_t)vceqq_f32(v61, v62)) & 0x80000000) == 0)
          {
            v1345 = *(float32x4_t *)(a7 + 288 + 16 * v55);
            v63 = 0;
            v64 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 0);
            v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1);
            v66 = 0uLL;
            v67 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2);
            v68 = 0uLL;
            v69 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 3);
            v70 = v46 + (v52 << 8);
            v71 = 0uLL;
            v72 = 0uLL;
            v73 = 0uLL;
            v74 = 0uLL;
            v75 = 0uLL;
            v76 = 0uLL;
            v77 = 0uLL;
            v78 = 0uLL;
            do
            {
              v80 = *(float32x4_t *)(a1 + v63 + 144);
              v79 = *(float32x4_t *)(a1 + v63 + 160);
              v81 = vsubq_f32(v80, v64);
              v82 = vsubq_f32(v79, v64);
              v84 = *(float32x4_t *)(a1 + v63 + 400);
              v83 = *(float32x4_t *)(a1 + v63 + 416);
              v85 = vsubq_f32(v83, v65);
              v86 = vsubq_f32(v84, v65);
              v87 = *(float32x4_t *)(a1 + v63 + 656);
              v88 = *(float32x4_t *)(a1 + v63 + 672);
              v89 = vsubq_f32(v88, v67);
              v90 = *(float32x4_t *)(a1 + v63 + 912);
              v91 = *(float32x4_t *)(a1 + v63 + 928);
              v92 = vsubq_f32(v87, v67);
              v93 = vsubq_f32(v90, v69);
              v94 = vsubq_f32(v91, v69);
              v95 = (int8x16_t)vcgtq_f32(v47, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v86, v86), v81, v81), v92, v92), v93, v93));
              v96 = (int8x16_t)vcgtq_f32(v47, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v85, v85), v82, v82), v89, v89), v94, v94));
              v97 = (int8x16_t *)((char *)&STACK[0x1150] + v63);
              *v97 = v95;
              v97[1] = v96;
              v78 = vsubq_s32(v78, (int32x4_t)v96);
              v77 = vsubq_s32(v77, (int32x4_t)v95);
              v68 = vaddq_f32(v68, (float32x4_t)vandq_s8(v96, (int8x16_t)v79));
              v66 = vaddq_f32(v66, (float32x4_t)vandq_s8(v95, (int8x16_t)v80));
              v72 = vaddq_f32(v72, (float32x4_t)vandq_s8(v96, (int8x16_t)v83));
              v71 = vaddq_f32(v71, (float32x4_t)vandq_s8(v95, (int8x16_t)v84));
              v74 = vaddq_f32(v74, (float32x4_t)vandq_s8(v96, (int8x16_t)v88));
              v73 = vaddq_f32(v73, (float32x4_t)vandq_s8(v95, (int8x16_t)v87));
              v76 = vaddq_f32(v76, (float32x4_t)vandq_s8(v96, (int8x16_t)v91));
              v75 = vaddq_f32(v75, (float32x4_t)vandq_s8(v95, (int8x16_t)v90));
              v63 += 32;
            }
            while (v63 != 256);
            v98 = vaddq_s32(v77, v78);
            v98.i64[0] = vpaddq_s32(v98, v98).u64[0];
            *(float *)v98.i32 = ReciprocalTable[vpadd_s32(*(int32x2_t *)v98.i8, *(int32x2_t *)v98.i8).i32[0]];
            v99 = vaddq_f32(v75, v76);
            v99.i64[0] = vpaddq_f32(v99, v99).u64[0];
            v100 = vaddq_f32(v73, v74);
            v100.i64[0] = vpaddq_f32(v100, v100).u64[0];
            v101 = vaddq_f32(v71, v72);
            v101.i64[0] = vpaddq_f32(v101, v101).u64[0];
            v102 = vaddq_f32(v66, v68);
            v103 = vpaddq_f32(v102, v102);
            *(float32x2_t *)v103.f32 = vpadd_f32(*(float32x2_t *)v103.f32, *(float32x2_t *)v103.f32);
            v103.f32[0] = *(float *)v98.i32 * v103.f32[0];
            v104 = v103;
            v104.f32[1] = *(float *)v98.i32 * vpadd_f32(*(float32x2_t *)v101.f32, *(float32x2_t *)v101.f32).f32[0];
            v101.f32[0] = *(float *)v98.i32 * vpadd_f32(*(float32x2_t *)v100.f32, *(float32x2_t *)v100.f32).f32[0];
            v105 = (int32x4_t)v104;
            v105.i32[2] = v101.i32[0];
            v106 = (float32x4_t)v105;
            v106.f32[3] = *(float *)v98.i32 * vpadd_f32(*(float32x2_t *)v99.f32, *(float32x2_t *)v99.f32).f32[0];
            v107 = vsubq_f32(v1345, v106);
            v108 = vsubq_f32(v62, v106);
            if ((vminvq_u32((uint32x4_t)vorrq_s8((int8x16_t)vceqzq_f32(v107), (int8x16_t)vceqzq_f32(v108))) & 0x80000000) != 0)
              return;
            v1335 = (int32x4_t)v62;
            v109 = 0;
            v110 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1150], *(int16x8_t *)&STACK[0x1160]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1170], *(int16x8_t *)&STACK[0x1180]), (int8x16_t)xmmword_20631C0C0));
            v110.i16[0] = vaddvq_s16(v110);
            v111 = (unint64_t)v110.u32[0] << 48;
            v112 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1190], *(int16x8_t *)&STACK[0x11A0]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11B0], *(int16x8_t *)&STACK[0x11C0]), (int8x16_t)xmmword_20631C0C0));
            v112.i16[0] = vaddvq_s16(v112);
            v113 = v111 | ((unint64_t)v112.u32[0] << 32);
            v114 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11D0], *(int16x8_t *)&STACK[0x11E0]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11F0], *(int16x8_t *)&STACK[0x1200]), (int8x16_t)xmmword_20631C0C0));
            v114.i16[0] = vaddvq_s16(v114);
            v115 = v113 | (v114.i32[0] << 16);
            v116 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1210], *(int16x8_t *)&STACK[0x1220]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1230], *(int16x8_t *)&STACK[0x1240]), (int8x16_t)xmmword_20631C0C0));
            v116.i16[0] = vaddvq_s16(v116);
            v117 = v115 | v116.u32[0];
            v118 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 0);
            v119 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1);
            v120 = (float32x4_t)vdupq_laneq_s32(v105, 2);
            v1341 = v106;
            v121 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 3);
            v122 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v107.f32, 0);
            v123 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 2);
            v124 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v107, 3);
            v125 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v108.f32, 0);
            v126 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 2);
            v127 = (int8x16_t)xmmword_20631C0A0;
            v128 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v108, 3);
            v129.i64[0] = 0x7F0000007FLL;
            v129.i64[1] = 0x7F0000007FLL;
            v130.i64[0] = -1;
            v130.i64[1] = -1;
            v131 = (int8x16_t)xmmword_20631C080;
            v132.i64[0] = -1;
            v132.i64[1] = -1;
            v133.i64[0] = -1;
            v133.i64[1] = -1;
            v134.i64[0] = -1;
            v134.i64[1] = -1;
            v135.i64[0] = 0x7F0000007FLL;
            v135.i64[1] = 0x7F0000007FLL;
            v136.i64[0] = 0x7F0000007FLL;
            v136.i64[1] = 0x7F0000007FLL;
            v137.i64[0] = 0x7F0000007FLL;
            v137.i64[1] = 0x7F0000007FLL;
            *(float32x4_t *)&STACK[0xC00] = v120;
            *(float32x4_t *)&STACK[0xC10] = v119;
            v1350 = v121;
            do
            {
              v138 = (int16x8_t)vcgtq_f32(*(float32x4_t *)(v70 + v109 + 16), *(float32x4_t *)(v51 + v109 + 16));
              v139 = (int16x8_t)vcgtq_f32(*(float32x4_t *)(v70 + v109), *(float32x4_t *)(v51 + v109));
              v140 = vsubq_f32(*(float32x4_t *)(a1 + v109 + 160), v118);
              v141 = vsubq_f32(*(float32x4_t *)(a1 + v109 + 144), v118);
              v142 = vsubq_f32(*(float32x4_t *)(a1 + v109 + 400), v119);
              v143 = vsubq_f32(*(float32x4_t *)(a1 + v109 + 416), v119);
              v144 = vsubq_f32(*(float32x4_t *)(a1 + v109 + 656), v120);
              v145 = vsubq_f32(*(float32x4_t *)(a1 + v109 + 672), v120);
              v146 = vsubq_f32(*(float32x4_t *)(a1 + v109 + 928), v121);
              v147 = vsubq_f32(*(float32x4_t *)(a1 + v109 + 912), v121);
              v148 = vmlaq_f32(vmulq_lane_f32(v142, *(float32x2_t *)v107.f32, 1), v122, v141);
              v149 = vmlaq_f32(vmulq_lane_f32(v142, *(float32x2_t *)v108.f32, 1), v125, v141);
              v150 = vmlaq_f32(vmlaq_f32(v148, v123, v144), v124, v147);
              v151 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v143, *(float32x2_t *)v107.f32, 1), v122, v140), v123, v145), v124, v146);
              v152 = vmlaq_f32(vmlaq_f32(v149, v126, v144), v128, v147);
              v153 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v143, *(float32x2_t *)v108.f32, 1), v125, v140), v126, v145), v128, v146);
              v154 = (int16x8_t)vcgtq_f32(v151, v137);
              v155 = (int16x8_t)vcgtq_f32(v150, v136);
              v156 = (int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16(v155, v154), (int8x16_t)vuzp1q_s16((int16x8_t)vmvnq_s8((int8x16_t)v139), (int16x8_t)vmvnq_s8((int8x16_t)v138)));
              v157 = (int16x8_t)vcgtq_f32(v153, v135);
              v158 = (int16x8_t)vcgtq_f32(v152, v129);
              v159 = (int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16(v158, v157), (int8x16_t)vuzp1q_s16(v139, v138));
              v160 = vbicq_s8((int8x16_t)v154, (int8x16_t)v138);
              v161 = vandq_s8((int8x16_t)v157, (int8x16_t)v138);
              *(int8x8_t *)v156.i8 = vmovn_s16(v156);
              v162 = vbicq_s8((int8x16_t)v155, (int8x16_t)v139);
              v163 = vandq_s8((int8x16_t)v158, (int8x16_t)v139);
              v164 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v156.i8, *(int8x8_t *)v160.i8)), 0x1FuLL));
              v137 = (float32x4_t)vorrq_s8(vandq_s8(v164, (int8x16_t)v151), vbicq_s8((int8x16_t)v137, v160));
              v165 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v156.i8, *(int8x8_t *)v160.i8)), 0x1FuLL));
              *(int8x8_t *)v159.i8 = vmovn_s16(v159);
              v136 = (float32x4_t)vorrq_s8(vandq_s8(v165, (int8x16_t)v150), vbicq_s8((int8x16_t)v136, v162));
              v166 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip2_s8(*(int8x8_t *)v159.i8, *(int8x8_t *)v160.i8)), 0x1FuLL));
              v135 = (float32x4_t)vorrq_s8(vandq_s8(v166, (int8x16_t)v153), vbicq_s8((int8x16_t)v135, v161));
              v167 = (int8x16_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vzip1_s8(*(int8x8_t *)v159.i8, *(int8x8_t *)v160.i8)), 0x1FuLL));
              v129 = (float32x4_t)vorrq_s8(vandq_s8(v167, (int8x16_t)v152), vbicq_s8((int8x16_t)v129, v163));
              v168 = vbicq_s8(v133, v162);
              v169 = vandq_s8(v127, v164);
              v121 = v1350;
              v120 = *(float32x4_t *)&STACK[0xC00];
              v134 = vorrq_s8(v169, vbicq_s8(v134, v160));
              v133 = vorrq_s8(vandq_s8(v131, v165), v168);
              v132 = vorrq_s8(vandq_s8(v127, v166), vbicq_s8(v132, v161));
              v130 = vorrq_s8(vandq_s8(v131, v167), vbicq_s8(v130, v163));
              v119 = *(float32x4_t *)&STACK[0xC10];
              v165.i64[0] = 0x800000008;
              v165.i64[1] = 0x800000008;
              v131 = (int8x16_t)vaddq_s32((int32x4_t)v131, (int32x4_t)v165);
              v127 = (int8x16_t)vaddq_s32((int32x4_t)v127, (int32x4_t)v165);
              v109 += 32;
            }
            while (v109 != 256);
            v170 = vbslq_s8((int8x16_t)vcgtq_f32(v137, v136), v134, v133);
            v171 = vmaxnmq_f32(v136, v137);
            v172 = (float32x4_t)vextq_s8((int8x16_t)v171, (int8x16_t)v171, 8uLL);
            v173 = vbslq_s8((int8x16_t)vcgtq_f32(v172, v171), vextq_s8(v170, v170, 8uLL), v170);
            v174 = vmaxnmq_f32(v171, v172);
            v175 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v174), v174), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v173.i8, 1), v173).u32[0];
            v176 = (int32x4_t)v1345;
            if ((v175 & 0x80000000) == 0)
              v176 = *(int32x4_t *)(a1 + 16 * v175 + 1168);
            v177 = vbslq_s8((int8x16_t)vcgtq_f32(v135, v129), v132, v130);
            v178 = vmaxnmq_f32(v129, v135);
            v179 = (float32x4_t)vextq_s8((int8x16_t)v178, (int8x16_t)v178, 8uLL);
            v180 = vbslq_s8((int8x16_t)vcgtq_f32(v179, v178), vextq_s8(v177, v177, 8uLL), v177);
            v181 = vmaxnmq_f32(v178, v179);
            v182 = vbslq_s8((int8x16_t)vcgtq_f32((float32x4_t)vrev64q_s32((int32x4_t)v181), v181), (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v180.i8, 1), v180).u32[0];
            if ((v182 & 0x80000000) == 0)
              v1335 = *(int32x4_t *)(a1 + 16 * v182 + 1168);
            v183 = 0;
            v184 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v176.i8, 0);
            v185 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v176.i8, 1);
            v186 = (float32x4_t)vdupq_laneq_s32(v176, 2);
            v187 = 0uLL;
            v188 = 0uLL;
            v189 = (float32x4_t)vdupq_laneq_s32(v176, 3);
            v190 = 0uLL;
            v191 = 0uLL;
            v192 = 0uLL;
            v193 = 0uLL;
            v194 = 0uLL;
            v195 = 0uLL;
            v196 = 0uLL;
            v197 = 0uLL;
            do
            {
              v199 = *(float32x4_t *)(a1 + v183 + 144);
              v198 = *(float32x4_t *)(a1 + v183 + 160);
              v200 = vsubq_f32(v199, v184);
              v201 = vsubq_f32(v198, v184);
              v202 = *(float32x4_t *)(a1 + v183 + 400);
              v203 = *(float32x4_t *)(a1 + v183 + 416);
              v204 = vsubq_f32(v203, v185);
              v205 = vsubq_f32(v202, v185);
              v206 = *(float32x4_t *)(a1 + v183 + 656);
              v207 = *(float32x4_t *)(a1 + v183 + 672);
              v208 = vsubq_f32(v207, v186);
              v209 = *(float32x4_t *)(a1 + v183 + 912);
              v210 = *(float32x4_t *)(a1 + v183 + 928);
              v211 = vsubq_f32(v206, v186);
              v212 = vsubq_f32(v209, v189);
              v213 = vsubq_f32(v210, v189);
              v214 = (int8x16_t)vcgtq_f32(v1334, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v205, v205), v200, v200), v211, v211), v212, v212));
              v215 = (int8x16_t)vcgtq_f32(v1334, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v204, v204), v201, v201), v208, v208), v213, v213));
              v216 = (int8x16_t *)((char *)&STACK[0x1150] + v183);
              *v216 = v214;
              v216[1] = v215;
              v197 = vsubq_s32(v197, (int32x4_t)v215);
              v196 = vsubq_s32(v196, (int32x4_t)v214);
              v188 = vaddq_f32(v188, (float32x4_t)vandq_s8(v215, (int8x16_t)v198));
              v187 = vaddq_f32(v187, (float32x4_t)vandq_s8(v214, (int8x16_t)v199));
              v191 = vaddq_f32(v191, (float32x4_t)vandq_s8(v215, (int8x16_t)v203));
              v190 = vaddq_f32(v190, (float32x4_t)vandq_s8(v214, (int8x16_t)v202));
              v193 = vaddq_f32(v193, (float32x4_t)vandq_s8(v215, (int8x16_t)v207));
              v192 = vaddq_f32(v192, (float32x4_t)vandq_s8(v214, (int8x16_t)v206));
              v195 = vaddq_f32(v195, (float32x4_t)vandq_s8(v215, (int8x16_t)v210));
              v194 = vaddq_f32(v194, (float32x4_t)vandq_s8(v214, (int8x16_t)v209));
              v183 += 32;
            }
            while (v183 != 256);
            v217 = 0;
            v218 = vaddq_s32(v196, v197);
            v218.i64[0] = vpaddq_s32(v218, v218).u64[0];
            v219 = ReciprocalTable[vpadd_s32(*(int32x2_t *)v218.i8, *(int32x2_t *)v218.i8).i32[0]];
            v220 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1150], *(int16x8_t *)&STACK[0x1160]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1170], *(int16x8_t *)&STACK[0x1180]), (int8x16_t)xmmword_20631C0C0));
            v220.i16[0] = vaddvq_s16(v220);
            v221 = v220.u32[0];
            v222 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1190], *(int16x8_t *)&STACK[0x11A0]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11B0], *(int16x8_t *)&STACK[0x11C0]), (int8x16_t)xmmword_20631C0C0));
            v222.i16[0] = vaddvq_s16(v222);
            v223 = (unint64_t)v222.u32[0] << 32;
            v224 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11D0], *(int16x8_t *)&STACK[0x11E0]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11F0], *(int16x8_t *)&STACK[0x1200]), (int8x16_t)xmmword_20631C0C0));
            v224.i16[0] = vaddvq_s16(v224);
            v225 = (v224.i32[0] << 16);
            v226 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1210], *(int16x8_t *)&STACK[0x1220]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1230], *(int16x8_t *)&STACK[0x1240]), (int8x16_t)xmmword_20631C0C0));
            v226.i16[0] = vaddvq_s16(v226);
            v227 = v226.u32[0];
            v228 = vaddq_f32(v194, v195);
            v228.i64[0] = vpaddq_f32(v228, v228).u64[0];
            v229 = vaddq_f32(v192, v193);
            v229.i64[0] = vpaddq_f32(v229, v229).u64[0];
            v230 = vaddq_f32(v190, v191);
            v230.i64[0] = vpaddq_f32(v230, v230).u64[0];
            v231 = vaddq_f32(v187, v188);
            v231.i64[0] = vpaddq_f32(v231, v231).u64[0];
            *(int32x2_t *)v230.f32 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v231.f32), (int32x2_t)vpadd_f32(*(float32x2_t *)v230.f32, *(float32x2_t *)v230.f32));
            v230.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v228.f32, *(float32x2_t *)v228.f32).u32[0], vpadd_f32(*(float32x2_t *)v229.f32, *(float32x2_t *)v229.f32).u32[0]);
            v232 = vmulq_n_f32(v230, v219);
            v39 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1335.i8, 0);
            v233 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1335.i8, 1);
            v234 = (float32x4_t)vdupq_laneq_s32(v1335, 2);
            v235 = (float32x4_t)vdupq_laneq_s32(v1335, 3);
            v236 = 0uLL;
            v237 = 0uLL;
            v238 = 0uLL;
            v239 = 0uLL;
            v38 = 0uLL;
            v240 = 0uLL;
            v241 = 0uLL;
            v242 = 0uLL;
            v243 = 0uLL;
            v244 = 0uLL;
            do
            {
              v246 = *(float32x4_t *)(a1 + v217 + 144);
              v245 = *(float32x4_t *)(a1 + v217 + 160);
              v247 = vsubq_f32(v246, v39);
              v248 = vsubq_f32(v245, v39);
              v249 = *(float32x4_t *)(a1 + v217 + 400);
              v250 = *(float32x4_t *)(a1 + v217 + 416);
              v251 = vsubq_f32(v250, v233);
              v252 = vsubq_f32(v249, v233);
              v253 = *(float32x4_t *)(a1 + v217 + 656);
              v254 = *(float32x4_t *)(a1 + v217 + 672);
              v255 = vsubq_f32(v254, v234);
              v257 = *(float32x4_t *)(a1 + v217 + 912);
              v256 = *(float32x4_t *)(a1 + v217 + 928);
              v258 = vsubq_f32(v253, v234);
              v259 = vsubq_f32(v257, v235);
              v260 = vsubq_f32(v256, v235);
              v261 = (int8x16_t)vcgtq_f32(v1334, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v252, v252), v247, v247), v258, v258), v259, v259));
              v262 = (int8x16_t)vcgtq_f32(v1334, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v251, v251), v248, v248), v255, v255), v260, v260));
              v263 = (int8x16_t *)((char *)&STACK[0x1150] + v217);
              *v263 = v261;
              v263[1] = v262;
              v244 = vsubq_s32(v244, (int32x4_t)v262);
              v243 = vsubq_s32(v243, (int32x4_t)v261);
              v237 = vaddq_f32(v237, (float32x4_t)vandq_s8(v262, (int8x16_t)v245));
              v236 = vaddq_f32(v236, (float32x4_t)vandq_s8(v261, (int8x16_t)v246));
              v239 = vaddq_f32(v239, (float32x4_t)vandq_s8(v262, (int8x16_t)v250));
              v238 = vaddq_f32(v238, (float32x4_t)vandq_s8(v261, (int8x16_t)v249));
              v240 = vaddq_f32(v240, (float32x4_t)vandq_s8(v262, (int8x16_t)v254));
              v38 = vaddq_f32(v38, (float32x4_t)vandq_s8(v261, (int8x16_t)v253));
              v242 = vaddq_f32(v242, (float32x4_t)vandq_s8(v262, (int8x16_t)v256));
              v241 = vaddq_f32(v241, (float32x4_t)vandq_s8(v261, (int8x16_t)v257));
              v217 += 32;
            }
            while (v217 != 256);
            v264 = vaddq_s32(v243, v244);
            v264.i64[0] = vpaddq_s32(v264, v264).u64[0];
            v265 = vaddq_f32(v241, v242);
            v265.i64[0] = vpaddq_f32(v265, v265).u64[0];
            v266 = vaddq_f32(v38, v240);
            v266.i64[0] = vpaddq_f32(v266, v266).u64[0];
            v267 = vaddq_f32(v238, v239);
            v267.i64[0] = vpaddq_f32(v267, v267).u64[0];
            v268 = vaddq_f32(v236, v237);
            v268.i64[0] = vpaddq_f32(v268, v268).u64[0];
            *(int32x2_t *)v268.f32 = vzip1_s32((int32x2_t)vpadd_f32(*(float32x2_t *)v268.f32, *(float32x2_t *)v268.f32), (int32x2_t)vpadd_f32(*(float32x2_t *)v267.f32, *(float32x2_t *)v267.f32));
            v268.i64[1] = __PAIR64__(vpadd_f32(*(float32x2_t *)v265.f32, *(float32x2_t *)v265.f32).u32[0], vpadd_f32(*(float32x2_t *)v266.f32, *(float32x2_t *)v266.f32).u32[0]);
            v269 = vmulq_n_f32(v268, ReciprocalTable[vpadd_s32(*(int32x2_t *)v264.i8, *(int32x2_t *)v264.i8).i32[0]]);
            if ((vminvq_u32((uint32x4_t)vorrq_s8(vorrq_s8((int8x16_t)vceqq_f32(v232, v269), (int8x16_t)vceqq_f32(v1341, v232)), (int8x16_t)vceqq_f32(v1341, v269))) & 0x80000000) == 0)
            {
              v39 = *(float32x4_t *)&STACK[0x11E0];
              v38 = *(float32x4_t *)&STACK[0x1230];
              if (((vminvq_u32((uint32x4_t)vceqq_f32(v1341, v1329)) & 0x80000000) == 0
                 || (vminvq_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vceqq_f32(v269, v1318), (int8x16_t)vceqq_f32(v232, v1320)), vandq_s8((int8x16_t)vceqq_f32(v232, v1318), (int8x16_t)vceqq_f32(v269, v1320)))) & 0x80000000) == 0)&& ((vminvq_u32((uint32x4_t)vceqq_f32(v1341, v1322)) & 0x80000000) == 0|| (vminvq_u32((uint32x4_t)vorrq_s8(vandq_s8((int8x16_t)vceqq_f32(v269, v1313), (int8x16_t)vceqq_f32(v232, v1311)), vandq_s8((int8x16_t)vceqq_f32(v232, v1313), (int8x16_t)vceqq_f32(v269, v1311)))) & 0x80000000) == 0))
              {
                v270 = vsubq_f32(v232, v1341);
                v271 = (int8x16_t)vmulq_f32(v270, v270);
                *(float *)v271.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v271.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v271, v271, 8uLL)));
                _NF = *(float *)v271.i32 < 0.000015259;
                v273 = vrecpes_f32(*(float *)v271.i32);
                if (_NF)
                  v274 = 0.0;
                else
                  v274 = v273;
                v275 = *(float32x4_t **)(a1 + 32);
                v1326 = (int8x16_t)v232;
                v1346 = v269;
                if (v275)
                {
                  __asm { FMOV            V1.4S, #3.0 }
                  _Q2 = (int32x4_t)vmulq_f32(*v275, _Q1);
                }
                else
                {
                  __asm { FMOV            V2.4S, #1.0 }
                }
                v281 = 0;
                v282 = v223 | (v221 << 48) | v225 | v227;
                v283 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1150], *(int16x8_t *)&STACK[0x1160]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1170], *(int16x8_t *)&STACK[0x1180]), (int8x16_t)xmmword_20631C0C0));
                v283.i16[0] = vaddvq_s16(v283);
                v284 = (unint64_t)v283.u32[0] << 48;
                v285 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1190], *(int16x8_t *)&STACK[0x11A0]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11B0], *(int16x8_t *)&STACK[0x11C0]), (int8x16_t)xmmword_20631C0C0));
                v285.i16[0] = vaddvq_s16(v285);
                v286 = v284 | ((unint64_t)v285.u32[0] << 32);
                v287 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11D0], (int16x8_t)v39), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x11F0], *(int16x8_t *)&STACK[0x1200]), (int8x16_t)xmmword_20631C0C0));
                v287.i16[0] = vaddvq_s16(v287);
                v288 = v286 | (v287.i32[0] << 16);
                v289 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0x1210], *(int16x8_t *)&STACK[0x1220]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)v38, *(int16x8_t *)&STACK[0x1240]), (int8x16_t)xmmword_20631C0C0));
                v289.i16[0] = vaddvq_s16(v289);
                v290 = v288 | v289.u32[0];
                v291 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v270.f32, 0);
                v292 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v270.f32, 1);
                v293 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v270, 2);
                v294 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v270, 3);
                v295 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q2.i8, 0);
                v296 = (float32x4_t)vdupq_laneq_s32(_Q2, 2);
                v297 = (float32x4_t)vdupq_laneq_s32(_Q2, 3);
                v299 = *(float32x4_t *)&STACK[0xC00];
                v298 = *(float32x4_t *)&STACK[0xC10];
                do
                {
                  v300 = *(float32x4_t *)(a1 + v281 + 144);
                  v301 = *(float32x4_t *)(a1 + v281 + 160);
                  v303 = *(float32x4_t *)(a1 + v281 + 400);
                  v302 = *(float32x4_t *)(a1 + v281 + 416);
                  v305 = *(float32x4_t *)(a1 + v281 + 656);
                  v304 = *(float32x4_t *)(a1 + v281 + 672);
                  v306 = *(float32x4_t *)(a1 + v281 + 912);
                  v307 = *(float32x4_t *)(a1 + v281 + 928);
                  __asm { FMOV            V29.4S, #1.0 }
                  v309 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(v303, v298), *(float32x2_t *)v270.f32, 1), v291, vsubq_f32(v300, v118)), v293, vsubq_f32(v305, v299)), v294, vsubq_f32(v306, v1350)), v274), _Q29), (float32x4_t)0);
                  v310 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(v302, v298), *(float32x2_t *)v270.f32, 1), v291, vsubq_f32(v301, v118)), v293, vsubq_f32(v304, v299)), v294, vsubq_f32(v307, v1350)), v274), _Q29), (float32x4_t)0);
                  v311 = vmlaq_f32(v118, v310, v291);
                  v312 = vmlaq_f32(v298, v310, v292);
                  v313 = vmlaq_f32(v299, v309, v293);
                  v314 = vmlaq_f32(v299, v310, v293);
                  v315 = vmlaq_f32(v1350, v310, v294);
                  v316 = vmlaq_f32(v1350, v309, v294);
                  v317 = vsubq_f32(vmlaq_f32(v118, v309, v291), v300);
                  v318 = vsubq_f32(v311, v301);
                  v319 = vsubq_f32(v312, v302);
                  v320 = vsubq_f32(vmlaq_f32(v298, v309, v292), v303);
                  v321 = vsubq_f32(v314, v304);
                  v322 = vsubq_f32(v313, v305);
                  v323 = vsubq_f32(v316, v306);
                  v324 = vsubq_f32(v315, v307);
                  v325 = (float32x4_t *)((char *)&STACK[0x1150] + v281);
                  *v325 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vmulq_f32(v320, v320), *(float32x2_t *)_Q2.i8, 1), v295, vmulq_f32(v317, v317)), v296, vmulq_f32(v322, v322)), v297, vmulq_f32(v323, v323));
                  v325[1] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vmulq_f32(v319, v319), *(float32x2_t *)_Q2.i8, 1), v295, vmulq_f32(v318, v318)), v296, vmulq_f32(v321, v321)), v297, vmulq_f32(v324, v324));
                  v281 += 32;
                }
                while (v281 != 256);
                v326 = vsubq_f32(v1346, v1341);
                v327 = (int8x16_t)vmulq_f32(v326, v326);
                *(float *)v327.i32 = vaddv_f32(vadd_f32(*(float32x2_t *)v327.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v327, v327, 8uLL)));
                _NF = *(float *)v327.i32 < 0.000015259;
                v328 = vrecpes_f32(*(float *)v327.i32);
                if (_NF)
                  v329 = 0.0;
                else
                  v329 = v328;
                if (v275)
                {
                  __asm { FMOV            V1.4S, #3.0 }
                  _Q29 = vmulq_f32(*v275, _Q1);
                }
                v331 = 0;
                v332 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v326.f32, 0);
                v333 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v326.f32, 1);
                v334 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v326, 2);
                v39 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v326, 3);
                v335 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q29.f32, 0);
                v336 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q29, 2);
                v337 = (float32x4_t)vdupq_laneq_s32((int32x4_t)_Q29, 3);
                v339 = *(float32x4_t *)&STACK[0xC00];
                v338 = *(float32x4_t *)&STACK[0xC10];
                do
                {
                  v340 = *(float32x4_t *)(a1 + v331 + 144);
                  v341 = *(float32x4_t *)(a1 + v331 + 160);
                  v343 = *(float32x4_t *)(a1 + v331 + 400);
                  v342 = *(float32x4_t *)(a1 + v331 + 416);
                  v345 = *(float32x4_t *)(a1 + v331 + 656);
                  v344 = *(float32x4_t *)(a1 + v331 + 672);
                  v346 = *(float32x4_t *)(a1 + v331 + 912);
                  v347 = *(float32x4_t *)(a1 + v331 + 928);
                  __asm { FMOV            V21.4S, #1.0 }
                  v349 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(v343, v338), *(float32x2_t *)v326.f32, 1), v332, vsubq_f32(v340, v118)), v334, vsubq_f32(v345, v339)), v39, vsubq_f32(v346, v1350)), v329), _Q21), (float32x4_t)0);
                  v350 = vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vsubq_f32(v342, v338), *(float32x2_t *)v326.f32, 1), v332, vsubq_f32(v341, v118)), v334, vsubq_f32(v344, v339)), v39, vsubq_f32(v347, v1350)), v329), _Q21), (float32x4_t)0);
                  v351 = vmlaq_f32(v339, v350, v334);
                  v352 = vmlaq_f32(v1350, v350, v39);
                  v353 = vmlaq_f32(v1350, v349, v39);
                  v354 = vsubq_f32(vmlaq_f32(v118, v349, v332), v340);
                  v355 = vsubq_f32(vmlaq_f32(v118, v350, v332), v341);
                  v356 = vsubq_f32(vmlaq_f32(v338, v350, v333), v342);
                  v357 = vsubq_f32(vmlaq_f32(v338, v349, v333), v343);
                  v358 = vsubq_f32(v351, v344);
                  v359 = vsubq_f32(vmlaq_f32(v339, v349, v334), v345);
                  v360 = vsubq_f32(v353, v346);
                  v361 = vsubq_f32(v352, v347);
                  v362 = (float32x4_t *)((char *)&STACK[0xFC0] + v331);
                  *v362 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vmulq_f32(v357, v357), *(float32x2_t *)_Q29.f32, 1), v335, vmulq_f32(v354, v354)), v336, vmulq_f32(v359, v359)), v337, vmulq_f32(v360, v360));
                  v362[1] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vmulq_f32(v356, v356), *(float32x2_t *)_Q29.f32, 1), v335, vmulq_f32(v355, v355)), v336, vmulq_f32(v358, v358)), v337, vmulq_f32(v361, v361));
                  v331 += 32;
                }
                while (v331 != 256);
                v363 = 0;
                v364 = 0uLL;
                v365 = 0uLL;
                do
                {
                  v366 = *(float32x4_t *)((char *)&STACK[0x1150] + v363);
                  v367 = *(float32x4_t *)((char *)&STACK[0x1150] + v363 + 16);
                  v368 = *(float32x4_t *)((char *)&STACK[0xFC0] + v363);
                  v369 = *(float32x4_t *)((char *)&STACK[0xFC0] + v363 + 16);
                  v370 = vabdq_f32(v366, v368);
                  v38 = vminnmq_f32(v367, v369);
                  v365 = vaddq_f32(v365, v38);
                  v364 = vaddq_f32(v364, vminnmq_f32(v366, v368));
                  v371 = (int32x4_t *)((char *)&STACK[0xEC0] + v363);
                  *v371 = vcgtq_f32(v366, v368);
                  v371[1] = vcgtq_f32(v367, v369);
                  v372 = (float32x4_t)vdupq_n_s32(0x3A810183u);
                  v373 = (int32x4_t *)((char *)&STACK[0xD60] + v363);
                  *v373 = vcgeq_f32(v372, v370);
                  v373[1] = vcgeq_f32(v372, vabdq_f32(v367, v369));
                  v363 += 32;
                }
                while (v363 != 256);
                v374 = vaddq_f32(v364, v365);
                v374.i64[0] = vpaddq_f32(v374, v374).u64[0];
                *(float32x2_t *)v364.f32 = vpadd_f32(*(float32x2_t *)v374.f32, *(float32x2_t *)v374.f32);
                if (v364.f32[0] < v1316)
                {
                  ++v40;
                  v375 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xEC0], *(int16x8_t *)&STACK[0xED0]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xEE0], *(int16x8_t *)&STACK[0xEF0]), (int8x16_t)xmmword_20631C0C0));
                  v375.i16[0] = vaddvq_s16(v375);
                  v376 = (unint64_t)v375.u32[0] << 48;
                  v377 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xF00], *(int16x8_t *)&STACK[0xF10]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xF20], *(int16x8_t *)&STACK[0xF30]), (int8x16_t)xmmword_20631C0C0));
                  v377.i16[0] = vaddvq_s16(v377);
                  v378 = v376 | ((unint64_t)v377.u32[0] << 32);
                  v379 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xF40], *(int16x8_t *)&STACK[0xF50]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xF60], *(int16x8_t *)&STACK[0xF70]), (int8x16_t)xmmword_20631C0C0));
                  v379.i16[0] = vaddvq_s16(v379);
                  v380 = v378 | (v379.i32[0] << 16);
                  v381 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xF80], *(int16x8_t *)&STACK[0xF90]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xFA0], *(int16x8_t *)&STACK[0xFB0]), (int8x16_t)xmmword_20631C0C0));
                  v381.i16[0] = vaddvq_s16(v381);
                  v382 = v380 | v381.u32[0];
                  v38 = *(float32x4_t *)&STACK[0xDF0];
                  v39 = *(float32x4_t *)&STACK[0xDE0];
                  v383 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xD60], *(int16x8_t *)&STACK[0xD70]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xD80], *(int16x8_t *)&STACK[0xD90]), (int8x16_t)xmmword_20631C0C0));
                  v383.i16[0] = vaddvq_s16(v383);
                  v384 = (unint64_t)v383.u32[0] << 48;
                  v385 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xDA0], *(int16x8_t *)&STACK[0xDB0]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xDC0], *(int16x8_t *)&STACK[0xDD0]), (int8x16_t)xmmword_20631C0C0));
                  v385.i16[0] = vaddvq_s16(v385);
                  v386 = v384 | ((unint64_t)v385.u32[0] << 32);
                  v387 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xDE0], *(int16x8_t *)&STACK[0xDF0]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xE00], *(int16x8_t *)&STACK[0xE10]), (int8x16_t)xmmword_20631C0C0));
                  v387.i16[0] = vaddvq_s16(v387);
                  v388 = v386 | (v387.i32[0] << 16);
                  v389 = (int16x8_t)vorrq_s8(vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xE20], *(int16x8_t *)&STACK[0xE30]), (int8x16_t)xmmword_20631C0D0), vandq_s8((int8x16_t)vuzp1q_s16(*(int16x8_t *)&STACK[0xE40], *(int16x8_t *)&STACK[0xE50]), (int8x16_t)xmmword_20631C0C0));
                  v389.i16[0] = vaddvq_s16(v389);
                  v390 = v388 | v389.u32[0];
                  v391 = (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v364, v1314)), 0);
                  v1313 = (float32x4_t)vbslq_s8(v391, (int8x16_t)v1318, (int8x16_t)v1346);
                  v1311 = (float32x4_t)vbslq_s8(v391, (int8x16_t)v1320, v1326);
                  v1318 = (float32x4_t)vbslq_s8(v391, (int8x16_t)v1346, (int8x16_t)v1318);
                  v1320 = (float32x4_t)vbslq_s8(v391, v1326, (int8x16_t)v1320);
                  v1322 = (float32x4_t)vbslq_s8(v391, (int8x16_t)v1329, (int8x16_t)v1341);
                  v1329 = (float32x4_t)vbslq_s8(v391, (int8x16_t)v1341, (int8x16_t)v1329);
                  v392 = __clz(v282 | v117);
                  v393 = __clz(v290 | v117);
                  if (v364.f32[0] >= v1314.f32[0])
                    v394 = v393;
                  else
                    v394 = v43;
                  v1309 = v394;
                  if (v364.f32[0] >= v1314.f32[0])
                    v395 = v392;
                  else
                    v395 = v42;
                  v1307 = v395;
                  if (v364.f32[0] >= v1314.f32[0])
                    v396 = v390;
                  else
                    v396 = v33;
                  a33 = v396;
                  if (v364.f32[0] >= v1314.f32[0])
                    v397 = v382;
                  else
                    v397 = v37;
                  a31 = v397;
                  if (v364.f32[0] >= v1314.f32[0])
                  {
                    v398 = v364.f32[0];
                  }
                  else
                  {
                    v43 = v393;
                    v42 = v392;
                    v33 = v390;
                    v37 = v382;
                    v398 = v1314.f32[0];
                  }
                  v1316 = v398;
                  if (v364.f32[0] >= v1314.f32[0])
                    *(float *)v391.i32 = v1314.f32[0];
                  else
                    *(float *)v391.i32 = v364.f32[0];
                  v1314 = (float32x4_t)v391;
                }
              }
            }
            v47 = v1334;
          }
        }
LABEL_78:
        if (++v52 == 6)
          goto LABEL_79;
      }
      v59 = v55;
      v55 = v56;
LABEL_16:
      v57 = v58;
      goto LABEL_17;
    }
LABEL_79:
    ;
  }
  while (v48 != 5);
  *(float32x4_t *)&STACK[0x1140] = v1322;
  *(float32x4_t *)&STACK[0x1130] = v1329;
  *(float32x4_t *)&STACK[0x1120] = v1311;
  *(float32x4_t *)&STACK[0x1110] = v1320;
  *(float32x4_t *)&STACK[0x1100] = v1313;
  v399.i64[1] = v1318.i64[1];
  *(float32x4_t *)&STACK[0x10F0] = v1318;
  STACK[0x10E8] = a31;
  STACK[0x10E0] = v37;
  STACK[0x10D8] = a33;
  STACK[0x10D0] = v33;
  LODWORD(STACK[0x10CC]) = v1307;
  LODWORD(STACK[0x10C8]) = v42;
  if (v40 >= 2)
    v40 = 2;
  LODWORD(STACK[0x10C4]) = v1309;
  LODWORD(STACK[0x10C0]) = v43;
  v1286 = v40;
  if (v40)
  {
    v400 = 0;
    __asm { FMOV            V31.4S, #1.0 }
    v402 = 0uLL;
    v399.i64[0] = 3;
    v1287 = v399;
    v403 = (float32x4_t *)pC4;
    v404 = (float32x4_t *)pC4;
    v405 = (float32x4_t *)pC4;
    v1299 = _Q31;
    do
    {
      v406 = *((float32x4_t *)&STACK[0x1130] + v400);
      v407 = *(&STACK[0x10D0] + v400);
      v1298 = *(&STACK[0x10E0] + v400);
      v408 = (uint8x8_t)vcnt_s8((int8x8_t)v1298);
      v408.i16[0] = vaddlv_u8(v408);
      if (64 - v408.i32[0] >= v408.i32[0])
        v409 = v408.u32[0];
      else
        v409 = (64 - v408.i32[0]);
      *(float32x4_t *)&STACK[0xCF0] = v402;
      *(float32x4_t *)&STACK[0xD00] = v402;
      STACK[0xD10] = -1;
      if ((_DWORD)v409)
      {
        v410 = 0;
        v411 = (int8x16_t)vdupq_n_s32(v409);
        v412 = (int8x16_t)vdupq_n_s64(v1298);
        v413 = (int8x16_t)vdupq_n_s64(~v407);
        v414 = (char *)&DualPartitionTableIndices_8x8 + 96 * v409;
        v415 = 0uLL;
        v416.i64[0] = -1;
        v416.i64[1] = -1;
        v417 = (char *)&DualPartitionTable_8x8 + 384 * v409;
        v418 = 0uLL;
        v419 = v409;
        do
        {
          v420 = (int8x16_t *)((char *)&DualPartitionTable_8x8 + 384 * v409 + 32 * v410);
          if (!v420->i64[0])
            break;
          v421 = veorq_s8(*v420, v412);
          v422 = vcntq_s8(vandq_s8(v421, v413));
          v38.i8[0] = vaddv_s8(*(int8x8_t *)v422.i8);
          v422.i64[0] = vextq_s8(v422, v422, 8uLL).u64[0];
          v422.i8[0] = vaddv_s8(*(int8x8_t *)v422.i8);
          v38.i32[1] = v422.i32[0];
          *(int8x8_t *)v422.i8 = vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
          v423 = veorq_s8(v420[1], v412);
          v38 = (float32x4_t)vcntq_s8(vandq_s8(v423, v413));
          v39.i8[0] = vaddv_s8(*(int8x8_t *)v38.f32);
          v38.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
          v38.i8[0] = vaddv_s8(*(int8x8_t *)v38.f32);
          v39.i32[1] = v38.i32[0];
          *(int8x8_t *)v38.f32 = vand_s8(*(int8x8_t *)v39.f32, (int8x8_t)0xFF000000FFLL);
          v422.i64[1] = v38.i64[0];
          v424 = vcntq_s8(vbicq_s8(v413, v421));
          v38.i8[0] = vaddv_s8(*(int8x8_t *)v424.i8);
          v424.i64[0] = vextq_s8(v424, v424, 8uLL).u64[0];
          v424.i8[0] = vaddv_s8(*(int8x8_t *)v424.i8);
          v38.i32[1] = v424.i32[0];
          *(int8x8_t *)v424.i8 = vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
          v425 = vcntq_s8(vbicq_s8(v413, v423));
          v38.i8[0] = vaddv_s8(*(int8x8_t *)v425.i8);
          v425.i64[0] = vextq_s8(v425, v425, 8uLL).u64[0];
          v425.i8[0] = vaddv_s8(*(int8x8_t *)v425.i8);
          v38.i32[1] = v425.i32[0];
          v424.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
          v426 = vminq_s32((int32x4_t)v422, (int32x4_t)v424);
          if (vminvq_s32(v426) < v419)
          {
            for (i = 0; i != 4; ++i)
            {
              *(int32x4_t *)&STACK[0xC40] = v426;
              v428 = *(_DWORD *)((unint64_t)&STACK[0xC40] & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
              if (v428 < v419 && (*(__int16 *)&v414[2 * i] & 0x80000000) == 0)
              {
                if (v428 >= v411.i32[0])
                {
                  if (v428 >= v411.i32[1])
                  {
                    if (v428 >= v411.i32[2])
                    {
                      if (v428 < v411.i32[3])
                      {
                        v418.i64[1] = *(_QWORD *)&v417[8 * i];
                        v411.i32[3] = *(_DWORD *)((unint64_t)&STACK[0xC40] & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
                        v416.i32[3] = *(unsigned __int16 *)&v414[2 * i];
                      }
                    }
                    else
                    {
                      v418 = (int8x16_t)vdupq_lane_s64(v418.i64[0], 0);
                      v429.i64[0] = v411.i64[0];
                      v429.i32[2] = *(_DWORD *)((unint64_t)&STACK[0xC40] & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
                      v429.i32[3] = v411.i32[2];
                      v430.i64[0] = v416.i64[0];
                      v430.i64[1] = __PAIR64__(v416.u32[2], *(unsigned __int16 *)&v414[2 * i]);
                      v418.i64[0] = *(_QWORD *)&v417[8 * i];
                      v416 = v430;
                      v411 = v429;
                    }
                  }
                  else
                  {
                    v418 = vextq_s8(v415, v418, 8uLL);
                    v411 = (int8x16_t)vzip1q_s32((int32x4_t)v411, vzip2q_s32((int32x4_t)v411, (int32x4_t)v411));
                    v416 = (int8x16_t)vzip1q_s32((int32x4_t)v416, vzip2q_s32((int32x4_t)v416, (int32x4_t)v416));
                    v415.i64[1] = *(_QWORD *)&v417[8 * i];
                    v411.i32[1] = *(_DWORD *)((unint64_t)&STACK[0xC40] & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
                    v416.i32[1] = *(unsigned __int16 *)&v414[2 * i];
                  }
                }
                else
                {
                  v418 = vextq_s8(v415, v418, 8uLL);
                  v415 = (int8x16_t)vdupq_lane_s64(v415.i64[0], 0);
                  v411 = vextq_s8(v415, v411, 0xCuLL);
                  v416 = vextq_s8(v415, v416, 0xCuLL);
                  v415.i64[0] = *(_QWORD *)&v417[8 * i];
                  v411.i32[0] = *(_DWORD *)((unint64_t)&STACK[0xC40] & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3)));
                  v416.i32[0] = *(unsigned __int16 *)&v414[2 * i];
                }
                v419 = v411.i32[3];
              }
            }
          }
          ++v410;
          v417 += 32;
          v414 += 8;
        }
        while (v410 != 12);
        v431 = v411.i32[3];
        if (v411.i32[3] >= 2)
        {
          v432 = v409 - 1;
          v433 = (char *)&DualPartitionTable_8x8 + 384 * v409 + 384;
          v434 = (char *)&DualPartitionTableIndices_8x8 + 96 * v409 + 96;
          v435 = 1;
          do
          {
            if (v409 - v435 >= 1)
            {
              v436 = 0;
              v437 = (char *)&DualPartitionTable_8x8 + 384 * v432;
              v438 = (char *)&DualPartitionTableIndices_8x8 + 96 * v432;
              do
              {
                v439 = (int8x16_t *)((char *)&DualPartitionTable_8x8 + 384 * (v409 - v435) + 32 * v436);
                if (!v439->i64[0])
                  break;
                v440 = veorq_s8(*v439, v412);
                v441 = vcntq_s8(vandq_s8(v440, v413));
                v38.i8[0] = vaddv_s8(*(int8x8_t *)v441.i8);
                v441.i64[0] = vextq_s8(v441, v441, 8uLL).u64[0];
                v441.i8[0] = vaddv_s8(*(int8x8_t *)v441.i8);
                v38.i32[1] = v441.i32[0];
                *(int8x8_t *)v441.i8 = vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
                v442 = veorq_s8(v439[1], v412);
                v38 = (float32x4_t)vcntq_s8(vandq_s8(v442, v413));
                v39.i8[0] = vaddv_s8(*(int8x8_t *)v38.f32);
                v38.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
                v38.i8[0] = vaddv_s8(*(int8x8_t *)v38.f32);
                v39.i32[1] = v38.i32[0];
                *(int8x8_t *)v38.f32 = vand_s8(*(int8x8_t *)v39.f32, (int8x8_t)0xFF000000FFLL);
                v441.i64[1] = v38.i64[0];
                v443 = vcntq_s8(vbicq_s8(v413, v440));
                v38.i8[0] = vaddv_s8(*(int8x8_t *)v443.i8);
                v443.i64[0] = vextq_s8(v443, v443, 8uLL).u64[0];
                v443.i8[0] = vaddv_s8(*(int8x8_t *)v443.i8);
                v38.i32[1] = v443.i32[0];
                *(int8x8_t *)v443.i8 = vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
                v444 = vcntq_s8(vbicq_s8(v413, v442));
                v38.i8[0] = vaddv_s8(*(int8x8_t *)v444.i8);
                v444.i64[0] = vextq_s8(v444, v444, 8uLL).u64[0];
                v444.i8[0] = vaddv_s8(*(int8x8_t *)v444.i8);
                v38.i32[1] = v444.i32[0];
                v443.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
                v445 = vminq_s32((int32x4_t)v441, (int32x4_t)v443);
                if (vminvq_s32(v445) < v431)
                {
                  for (j = 0; j != 4; ++j)
                  {
                    *(int32x4_t *)&STACK[0xC30] = v445;
                    v447 = *(_DWORD *)((unint64_t)&STACK[0xC30] & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                    if (v447 < v431 && (*(__int16 *)&v438[2 * j] & 0x80000000) == 0)
                    {
                      if (v447 >= v411.i32[0])
                      {
                        if (v447 >= v411.i32[1])
                        {
                          if (v447 >= v411.i32[2])
                          {
                            if (v447 < v411.i32[3])
                            {
                              v418.i64[1] = *(_QWORD *)&v437[8 * j];
                              v411.i32[3] = *(_DWORD *)((unint64_t)&STACK[0xC30] & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                              v416.i32[3] = *(unsigned __int16 *)&v438[2 * j];
                            }
                          }
                          else
                          {
                            v418 = (int8x16_t)vdupq_lane_s64(v418.i64[0], 0);
                            v448.i64[0] = v411.i64[0];
                            v448.i32[2] = *(_DWORD *)((unint64_t)&STACK[0xC30] & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                            v448.i32[3] = v411.i32[2];
                            v449.i64[0] = v416.i64[0];
                            v449.i64[1] = __PAIR64__(v416.u32[2], *(unsigned __int16 *)&v438[2 * j]);
                            v418.i64[0] = *(_QWORD *)&v437[8 * j];
                            v416 = v449;
                            v411 = v448;
                          }
                        }
                        else
                        {
                          v418 = vextq_s8(v415, v418, 8uLL);
                          v411 = (int8x16_t)vzip1q_s32((int32x4_t)v411, vzip2q_s32((int32x4_t)v411, (int32x4_t)v411));
                          v416 = (int8x16_t)vzip1q_s32((int32x4_t)v416, vzip2q_s32((int32x4_t)v416, (int32x4_t)v416));
                          v415.i64[1] = *(_QWORD *)&v437[8 * j];
                          v411.i32[1] = *(_DWORD *)((unint64_t)&STACK[0xC30] & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                          v416.i32[1] = *(unsigned __int16 *)&v438[2 * j];
                        }
                      }
                      else
                      {
                        v418 = vextq_s8(v415, v418, 8uLL);
                        v415 = (int8x16_t)vdupq_lane_s64(v415.i64[0], 0);
                        v411 = vextq_s8(v415, v411, 0xCuLL);
                        v416 = vextq_s8(v415, v416, 0xCuLL);
                        v415.i64[0] = *(_QWORD *)&v437[8 * j];
                        v411.i32[0] = *(_DWORD *)((unint64_t)&STACK[0xC30] & 0xFFFFFFFFFFFFFFF3 | (4 * (j & 3)));
                        v416.i32[0] = *(unsigned __int16 *)&v438[2 * j];
                      }
                      v431 = v411.i32[3];
                    }
                  }
                }
                ++v436;
                v437 += 32;
                v438 += 8;
              }
              while (v436 != 12);
            }
            v431 = v411.i32[3];
            v450 = v411.i32[3];
            if (v435 < v411.i32[3] && (unint64_t)(v435 + v409) <= 0x20)
            {
              v451 = 0;
              v452 = v434;
              v453 = v433;
              do
              {
                v454 = (int8x16_t *)((char *)&DualPartitionTable_8x8 + 384 * v435 + 384 * v409 + 32 * v451);
                if (!v454->i64[0])
                  break;
                v455 = veorq_s8(*v454, v412);
                v456 = vcntq_s8(vandq_s8(v455, v413));
                v38.i8[0] = vaddv_s8(*(int8x8_t *)v456.i8);
                v456.i64[0] = vextq_s8(v456, v456, 8uLL).u64[0];
                v456.i8[0] = vaddv_s8(*(int8x8_t *)v456.i8);
                v38.i32[1] = v456.i32[0];
                *(int8x8_t *)v456.i8 = vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
                v457 = veorq_s8(v454[1], v412);
                v38 = (float32x4_t)vcntq_s8(vandq_s8(v457, v413));
                v39.i8[0] = vaddv_s8(*(int8x8_t *)v38.f32);
                v38.i64[0] = vextq_s8((int8x16_t)v38, (int8x16_t)v38, 8uLL).u64[0];
                v38.i8[0] = vaddv_s8(*(int8x8_t *)v38.f32);
                v39.i32[1] = v38.i32[0];
                *(int8x8_t *)v38.f32 = vand_s8(*(int8x8_t *)v39.f32, (int8x8_t)0xFF000000FFLL);
                v456.i64[1] = v38.i64[0];
                v458 = vcntq_s8(vbicq_s8(v413, v455));
                v38.i8[0] = vaddv_s8(*(int8x8_t *)v458.i8);
                v458.i64[0] = vextq_s8(v458, v458, 8uLL).u64[0];
                v458.i8[0] = vaddv_s8(*(int8x8_t *)v458.i8);
                v38.i32[1] = v458.i32[0];
                *(int8x8_t *)v458.i8 = vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
                v459 = vcntq_s8(vbicq_s8(v413, v457));
                v38.i8[0] = vaddv_s8(*(int8x8_t *)v459.i8);
                v459.i64[0] = vextq_s8(v459, v459, 8uLL).u64[0];
                v459.i8[0] = vaddv_s8(*(int8x8_t *)v459.i8);
                v38.i32[1] = v459.i32[0];
                v458.u64[1] = (unint64_t)vand_s8(*(int8x8_t *)v38.f32, (int8x8_t)0xFF000000FFLL);
                v460 = vminq_s32((int32x4_t)v456, (int32x4_t)v458);
                if (vminvq_s32(v460) < v431)
                {
                  for (k = 0; k != 4; ++k)
                  {
                    *(int32x4_t *)&STACK[0xC20] = v460;
                    v462 = *(_DWORD *)((unint64_t)&STACK[0xC20] & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                    if (v462 < v431 && (*(__int16 *)&v452[2 * k] & 0x80000000) == 0)
                    {
                      if (v462 >= v411.i32[0])
                      {
                        if (v462 >= v411.i32[1])
                        {
                          if (v462 >= v411.i32[2])
                          {
                            if (v462 < v411.i32[3])
                            {
                              v418.i64[1] = *(_QWORD *)&v453[8 * k];
                              v411.i32[3] = *(_DWORD *)((unint64_t)&STACK[0xC20] & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                              v416.i32[3] = *(unsigned __int16 *)&v452[2 * k];
                            }
                          }
                          else
                          {
                            v418 = (int8x16_t)vdupq_lane_s64(v418.i64[0], 0);
                            v463.i64[0] = v411.i64[0];
                            v463.i32[2] = *(_DWORD *)((unint64_t)&STACK[0xC20] & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                            v463.i32[3] = v411.i32[2];
                            v464.i64[0] = v416.i64[0];
                            v464.i64[1] = __PAIR64__(v416.u32[2], *(unsigned __int16 *)&v452[2 * k]);
                            v418.i64[0] = *(_QWORD *)&v453[8 * k];
                            v416 = v464;
                            v411 = v463;
                          }
                        }
                        else
                        {
                          v418 = vextq_s8(v415, v418, 8uLL);
                          v411 = (int8x16_t)vzip1q_s32((int32x4_t)v411, vzip2q_s32((int32x4_t)v411, (int32x4_t)v411));
                          v416 = (int8x16_t)vzip1q_s32((int32x4_t)v416, vzip2q_s32((int32x4_t)v416, (int32x4_t)v416));
                          v415.i64[1] = *(_QWORD *)&v453[8 * k];
                          v411.i32[1] = *(_DWORD *)((unint64_t)&STACK[0xC20] & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                          v416.i32[1] = *(unsigned __int16 *)&v452[2 * k];
                        }
                      }
                      else
                      {
                        v418 = vextq_s8(v415, v418, 8uLL);
                        v415 = (int8x16_t)vdupq_lane_s64(v415.i64[0], 0);
                        v411 = vextq_s8(v415, v411, 0xCuLL);
                        v416 = vextq_s8(v415, v416, 0xCuLL);
                        v415.i64[0] = *(_QWORD *)&v453[8 * k];
                        v411.i32[0] = *(_DWORD *)((unint64_t)&STACK[0xC20] & 0xFFFFFFFFFFFFFFF3 | (4 * (k & 3)));
                        v416.i32[0] = *(unsigned __int16 *)&v452[2 * k];
                      }
                      v431 = v411.i32[3];
                    }
                  }
                }
                ++v451;
                v453 += 32;
                v452 += 8;
              }
              while (v451 != 12);
              v431 = v411.i32[3];
              v450 = v411.i32[3];
            }
            if ((unint64_t)v435 > 3)
              break;
            ++v435;
            --v432;
            v433 += 384;
            v434 += 96;
          }
          while (v435 < v450);
        }
        *(int8x16_t *)&STACK[0xCF0] = v415;
        *(int8x16_t *)&STACK[0xD00] = v418;
        STACK[0xD10] = (unint64_t)vmovn_s32((int32x4_t)v416);
      }
      v465 = 0;
      v466 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v406.f32, 0);
      v467 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v406.f32, 1);
      v468 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v406, 2);
      v469 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v406, 3);
      v1340 = v406;
      v1297 = v400;
      v1295 = v467;
      v1296 = v466;
      v1293 = v469;
      v1294 = v468;
      do
      {
        if (*((unsigned __int16 *)&STACK[0xCF0] + v465 + 16) == 0xFFFF)
          goto LABEL_272;
        v1300 = *((_WORD *)&STACK[0xCF0] + v465 + 16);
        v470 = *(&STACK[0xCF0] + v465);
        v471 = 224;
        v472 = v470;
        do
        {
          v473 = *(_OWORD *)((char *)VectorMaskForBitMask + (v472 & 0xF0));
          v474 = (_OWORD *)((char *)&STACK[0xEC0] + v471);
          *v474 = v473;
          v475 = VectorMaskForBitMask[v472 & 0xF];
          *v474 = v473;
          v474[1] = v475;
          v472 >>= 8;
          v471 -= 32;
        }
        while (v471 != -32);
        v476 = (uint8x8_t)vcnt_s8((int8x8_t)(v470 ^ v1298));
        v476.i16[0] = vaddlv_u8(v476);
        v477 = &STACK[0x10C8];
        if (v476.i32[0] <= 0x20u)
          v478 = &STACK[0x10C8];
        else
          v478 = &STACK[0x10C0];
        if (v476.i32[0] <= 0x20u)
          v477 = &STACK[0x10C0];
        v479 = &STACK[0x1110];
        if (v476.i32[0] <= 0x20u)
          v480 = &STACK[0x1110];
        else
          v480 = &STACK[0x10F0];
        if (v476.i32[0] <= 0x20u)
          v479 = &STACK[0x10F0];
        v481 = *(float32x4_t *)&v479[2 * v400];
        v482 = *(float32x4_t **)(a1 + 32);
        v1336 = *(float32x4_t *)&v480[2 * v400];
        v1338 = v481;
        v483 = vsubq_f32(v1336, v406);
        v484 = 0;
        if (v482)
        {
          v485 = vmulq_f32(v483, *v482);
          v486 = (int8x16_t)vmulq_f32(v483, v485);
          v487 = vaddv_f32(vadd_f32(*(float32x2_t *)v486.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v486, v486, 8uLL)));
          v488 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v485.f32, 0);
          v489 = fabsf(v487);
          v490 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v485, 2);
          v491 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v485, 3);
          v492 = vsubq_f32(v481, v406);
          v493 = vmulq_f32(v492, *v482);
          v494 = (int8x16_t)vmulq_f32(v492, v493);
          v495 = vaddv_f32(vadd_f32(*(float32x2_t *)v494.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v494, v494, 8uLL)));
          v496 = fabsf(v495);
          v497 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v493.f32, 0);
          v498 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v493, 2);
          v499 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v493, 3);
          do
          {
            v500 = 0.0;
            v501 = 0.0;
            if (v489 >= 0.000015259)
              v501 = vrecpes_f32(v487);
            if (v496 >= 0.000015259)
              v500 = vrecpes_f32(v495);
            v502 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 176), v466);
            v503 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 160), v466);
            v504 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 192), v466);
            v505 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 448), v467);
            v506 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 704), v468);
            v507 = vmlaq_f32(vmulq_lane_f32(v505, *(float32x2_t *)v485.f32, 1), v488, v504);
            v508 = vmlaq_f32(vmulq_lane_f32(v505, *(float32x2_t *)v493.f32, 1), v497, v504);
            v509 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 960), v469);
            v510 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v484 + 48)), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(v508, v498, v506), v499, v509), v500), _Q31), v402), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(v507, v490, v506), v491, v509), v501), _Q31), v402));
            v511 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 432), v467);
            v512 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 416), v467);
            v513 = vmlaq_f32(vmulq_lane_f32(v512, *(float32x2_t *)v485.f32, 1), v488, v503);
            v514 = vmlaq_f32(vmulq_lane_f32(v512, *(float32x2_t *)v493.f32, 1), v497, v503);
            v515 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 688), v468);
            v516 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v511, *(float32x2_t *)v485.f32, 1), v488, v502), v490, v515);
            v517 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v511, *(float32x2_t *)v493.f32, 1), v497, v502), v498, v515);
            v518 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 672), v468);
            v519 = vmlaq_f32(v513, v490, v518);
            v520 = vmlaq_f32(v514, v498, v518);
            v521 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 928), v469);
            v522 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 944), v469);
            v523 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v484 + 32)), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(v517, v499, v522), v500), _Q31), v402), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(v516, v491, v522), v501), _Q31), v402));
            v524 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v484 + 16)), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(v520, v499, v521), v500), _Q31), v402), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(v519, v491, v521), v501), _Q31), v402));
            v525 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 144), v466);
            v526 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 400), v467);
            v527 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 656), v468);
            v528 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 912), v469);
            v529 = (int8x16_t *)((char *)&STACK[0xFC0] + v484);
            *v529 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v484)), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v526, *(float32x2_t *)v493.f32, 1), v497, v525), v498, v527), v499, v528), v500), _Q31), v402), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(
                                           vmlaq_f32(vmulq_lane_f32(v526, *(float32x2_t *)v485.f32, 1), v488, v525),
                                           v490,
                                           v527),
                                         v491,
                                         v528),
                                       v501),
                                     _Q31),
                                   v402));
            v529[1] = v524;
            v529[2] = v523;
            v529[3] = v510;
            v484 += 64;
          }
          while (v484 != 256);
        }
        else
        {
          v530 = (int8x16_t)vmulq_f32(v483, v483);
          v531 = vrecpes_f32(vaddv_f32(vadd_f32(*(float32x2_t *)v530.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v530, v530, 8uLL))));
          v532 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v483.f32, 0);
          v533 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v483, 2);
          v534 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v483, 3);
          v535 = vsubq_f32(v481, v406);
          v536 = (int8x16_t)vmulq_f32(v535, v535);
          v537 = vrecpes_f32(vaddv_f32(vadd_f32(*(float32x2_t *)v536.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v536, v536, 8uLL))));
          v538 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v535.f32, 0);
          v539 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v535, 2);
          v540 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v535, 3);
          do
          {
            v541 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 192), v466);
            v542 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 144), v466);
            v543 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 400), v467);
            v544 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 448), v467);
            v545 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 704), v468);
            v546 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 960), v469);
            v547 = vmlaq_f32(vmulq_lane_f32(v543, *(float32x2_t *)v483.f32, 1), v532, v542);
            v548 = vmlaq_f32(vmulq_lane_f32(v543, *(float32x2_t *)v535.f32, 1), v538, v542);
            v549 = vmulq_n_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v544, *(float32x2_t *)v483.f32, 1), v532, v541), v533, v545), v534, v546), v531);
            v550 = vmlaq_f32(vmulq_lane_f32(v544, *(float32x2_t *)v535.f32, 1), v538, v541);
            __asm { FMOV            V23.4S, #1.0 }
            v552 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v484 + 48)), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(v550, v539, v545), v540, v546), v537), _Q23), v402), (int8x16_t)vmaxnmq_f32(vminnmq_f32(v549, _Q23), v402));
            v553 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 656), v468);
            v554 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 912), v469);
            v555 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v484)), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(v548, v539, v553), v540, v554), v537), _Q23), v402), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(vmlaq_f32(v547, v533, v553), v534, v554), v531), _Q23), v402));
            v556 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 160), v466);
            v557 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 416), v467);
            v558 = vmlaq_f32(vmulq_lane_f32(v557, *(float32x2_t *)v483.f32, 1), v532, v556);
            v559 = vmlaq_f32(vmulq_lane_f32(v557, *(float32x2_t *)v535.f32, 1), v538, v556);
            v560 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 672), v468);
            v561 = vmlaq_f32(v558, v533, v560);
            v562 = vmlaq_f32(v559, v539, v560);
            v563 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 928), v469);
            v564 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v484 + 16)), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(v562, v540, v563), v537), _Q23), v402), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(v561, v534, v563), v531), _Q23), v402));
            v565 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 176), v466);
            v566 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 432), v467);
            v567 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 688), v468);
            v568 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v566, *(float32x2_t *)v483.f32, 1), v532, v565), v533, v567);
            v569 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(v566, *(float32x2_t *)v535.f32, 1), v538, v565), v539, v567);
            v570 = vsubq_f32(*(float32x4_t *)(a1 + v484 + 944), v469);
            v571 = vbslq_s8((int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v484 + 32)), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(v569, v540, v570), v537), _Q23), v402), (int8x16_t)vmaxnmq_f32(vminnmq_f32(vmulq_n_f32(vmlaq_f32(v568, v534, v570), v531), _Q23), v402));
            v572 = (int8x16_t *)((char *)&STACK[0xFC0] + v484);
            *v572 = v555;
            v572[1] = v564;
            v572[2] = v571;
            v572[3] = v552;
            v484 += 64;
          }
          while (v484 != 256);
        }
        v573 = *((_DWORD *)v477 + v400);
        v574 = *((_DWORD *)v478 + v400);
        *(float32x4_t *)&STACK[0xCD0] = v402;
        *(float32x4_t *)&STACK[0xCE0] = v402;
        *(float32x4_t *)&STACK[0xCB0] = v402;
        *(float32x4_t *)&STACK[0xCC0] = v402;
        *(float32x4_t *)&STACK[0xC90] = v402;
        *(float32x4_t *)&STACK[0xCA0] = v402;
        *(float32x4_t *)&STACK[0xC80] = v402;
        v575 = (float32x4_t)vdupq_n_s32(0x3DD00000u);
        v576 = (float32x4_t)vdupq_n_s32(0x3F4C0000u);
        v577 = (float32x4_t)vdupq_n_s32(0x3D400000u);
        v1310 = *(float32x4_t *)&STACK[0xFC0];
        v578 = vmulq_f32(*(float32x4_t *)&STACK[0xFC0], v577);
        v1304 = *(float32x4_t *)&STACK[0xFD0];
        v579 = vmulq_f32(*(float32x4_t *)&STACK[0xFD0], v577);
        v580 = *(float32x4_t *)&STACK[0xFF0];
        v581 = *(float32x4_t *)&STACK[0xFE0];
        v582 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)&STACK[0xFC0], v575), v576, *(float32x4_t *)&STACK[0xFC0]), v575, *(float32x4_t *)&STACK[0xFE0]);
        v583 = vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)&STACK[0xFD0], v575), v576, *(float32x4_t *)&STACK[0xFD0]), v575, *(float32x4_t *)&STACK[0xFF0]);
        *(float32x4_t *)&STACK[0x1160] = v583;
        *(float32x4_t *)&STACK[0x1150] = v582;
        v584 = (float32x4_t)vdupq_n_s32(0x3F420000u);
        v585 = (float32x4_t)vdupq_n_s32(0x3CA00000u);
        v1312 = v581;
        v1317 = v580;
        v586 = *(float32x4_t *)&STACK[0x1010];
        v587 = *(float32x4_t *)&STACK[0x1000];
        __asm { FMOV            V19.4S, #0.19531 }
        v589 = vmlaq_f32(vmlaq_f32(v578, v584, v581), _Q19, *(float32x4_t *)&STACK[0x1000]);
        *(float32x4_t *)&STACK[0x1180] = vmlaq_f32(vmlaq_f32(v579, v584, v580), _Q19, *(float32x4_t *)&STACK[0x1010]);
        *(float32x4_t *)&STACK[0x1170] = v589;
        v590 = (float32x4_t)vdupq_n_s32(0x3F270000u);
        v591 = vmlaq_f32(vmulq_f32(v580, v585), v590, v586);
        v592.i64[0] = 0x3C0000003C000000;
        v592.i64[1] = 0x3C0000003C000000;
        v1330 = v586;
        v1332 = v587;
        v593 = vmulq_f32(v586, v592);
        v594 = *(float32x4_t *)&STACK[0x1030];
        v595 = *(float32x4_t *)&STACK[0x1020];
        __asm { FMOV            V21.4S, #0.32812 }
        v597 = vmlaq_f32(vmlaq_f32(vmulq_f32(v581, v585), v590, v587), _Q21, *(float32x4_t *)&STACK[0x1020]);
        *(float32x4_t *)&STACK[0x11A0] = vmlaq_f32(v591, _Q21, *(float32x4_t *)&STACK[0x1030]);
        *(float32x4_t *)&STACK[0x1190] = v597;
        v598 = (float32x4_t)vdupq_n_s32(0x3EFC0000u);
        v1323 = v595;
        v1327 = v594;
        v599 = vmlaq_f32(vmlaq_f32(v593, v598, v594), v598, *(float32x4_t *)&STACK[0x1050]);
        v600 = vmlaq_f32(vmlaq_f32(vmulq_f32(v587, v592), v598, v595), v598, *(float32x4_t *)&STACK[0x1040]);
        v1308 = *(float32x4_t *)&STACK[0x1040];
        v601 = vmulq_f32(*(float32x4_t *)&STACK[0x1040], _Q21);
        v1315 = *(float32x4_t *)&STACK[0x1050];
        v602 = vmulq_f32(*(float32x4_t *)&STACK[0x1050], _Q21);
        v603 = *(float32x4_t *)&STACK[0x1070];
        v604 = *(float32x4_t *)&STACK[0x1060];
        v605 = vmlaq_f32(v600, v592, *(float32x4_t *)&STACK[0x1060]);
        *(float32x4_t *)&STACK[0x11C0] = vmlaq_f32(v599, v592, *(float32x4_t *)&STACK[0x1070]);
        *(float32x4_t *)&STACK[0x11B0] = v605;
        v606 = vmlaq_f32(v602, v590, v603);
        v607 = vmlaq_f32(v601, v590, v604);
        v1319 = v603;
        v1321 = v604;
        v608 = vmulq_f32(v604, _Q19);
        v609 = vmulq_f32(v603, _Q19);
        v610 = *(float32x4_t *)&STACK[0x1090];
        v611 = *(float32x4_t *)&STACK[0x1080];
        v612 = vmlaq_f32(v607, v585, *(float32x4_t *)&STACK[0x1080]);
        *(float32x4_t *)&STACK[0x11E0] = vmlaq_f32(v606, v585, *(float32x4_t *)&STACK[0x1090]);
        *(float32x4_t *)&STACK[0x11D0] = v612;
        v613 = *(float32x4_t *)&STACK[0x10B0];
        v614 = *(float32x4_t *)&STACK[0x10A0];
        v615 = vmlaq_f32(vmlaq_f32(v608, v584, v611), v577, *(float32x4_t *)&STACK[0x10A0]);
        *(float32x4_t *)&STACK[0x1200] = vmlaq_f32(vmlaq_f32(v609, v584, v610), v577, *(float32x4_t *)&STACK[0x10B0]);
        *(float32x4_t *)&STACK[0x11F0] = v615;
        v1302 = v614;
        v1303 = v611;
        v1305 = v613;
        v1306 = v610;
        *(float32x4_t *)&STACK[0x1220] = vmlaq_f32(vmlaq_f32(vmulq_f32(v610, v575), v576, v613), v575, v613);
        *(float32x4_t *)&STACK[0x1210] = vmlaq_f32(vmlaq_f32(vmulq_f32(v611, v575), v576, v614), v575, v614);
        v616 = &STACK[0xD60];
        for (m = 32; ; m += 32)
        {
          v618 = vmulq_f32(v582, (float32x4_t)xmmword_20631C8B0);
          v619 = vmulq_f32(v582, (float32x4_t)xmmword_20631C8D0);
          v620 = vpaddq_f32(vmulq_f32(v582, v404[137]), vmulq_f32(v583, v403[136]));
          v621 = (float32x4_t)vqtbl1q_s8((int8x16_t)v620, (int8x16_t)xmmword_20631C8E0);
          v622 = vaddq_f32(v620, v621);
          v621.i32[0] = 1037041664;
          v623 = (int32x4_t)vaddq_f32(v622, (float32x4_t)vqtbl1q_s8((int8x16_t)vmulq_f32(v582, v621).u32[0], (int8x16_t)xmmword_20631C8F0));
          v624 = (int32x4_t)vpaddq_f32(vpaddq_f32(v618, vmulq_f32(v583, v405[138])), vpaddq_f32(v619, vmulq_f32(v583, (float32x4_t)xmmword_20631C8C0)));
          v625 = vuzp1q_s32(v624, vrev64q_s32(v624));
          v626 = vzip1q_s32(v623, v625);
          v627 = (float32x4_t)vrev64q_s32(v623);
          v627.i64[0] = v625.i64[1];
          v628 = (float32x4_t)vrev64q_s32(v626);
          v628.i64[0] = v626.i64[0];
          v629 = vmaxnmq_f32(vminnmq_f32(v628, _Q31), v402);
          v630 = vmaxnmq_f32(vminnmq_f32(v627, _Q31), v402);
          if (m == 224)
            break;
          *(float32x4_t *)v616 = v629;
          *((float32x4_t *)v616 + 1) = v630;
          v616 = (unint64_t *)((char *)v616 + 28);
          v582 = *(float32x4_t *)((char *)&STACK[0x1150] + m);
          v583 = *(float32x4_t *)((char *)&STACK[0x1150] + m + 16);
        }
        *(float32x4_t *)v616 = v629;
        v616[2] = v630.i64[0];
        LODWORD(STACK[0xE20]) = v630.i32[2];
        *(float32x4_t *)&STACK[0xE50] = v402;
        *(float32x4_t *)&STACK[0xE34] = v402;
        *(float32x4_t *)&STACK[0xE44] = v402;
        *(float32x4_t *)&STACK[0xE24] = v402;
        if (v574 >= v573)
          v631 = v573;
        else
          v631 = v574;
        DualPartitionBlockInfo_7x7 = GetDualPartitionBlockInfo_7x7(v631, 16 - 4 * *(char *)(a1 + 136));
        v633 = HIBYTE(DualPartitionBlockInfo_7x7);
        LODWORD(STACK[0xC50]) = (DualPartitionBlockInfo_7x7 >> 25) & 0xF;
        if (!FindQuantizedColors(HIBYTE(DualPartitionBlockInfo_7x7), (uint64_t)&STACK[0xC90], (unsigned int *)&STACK[0xC50], (float32x4_t *)&STACK[0xD60], 0x31uLL, v1340, v1336, v1338))
        {
          v634 = 0;
          v635 = DualPartitionBlockInfo_7x7 >> 40;
          STACK[0xC80] = (unint64_t)&STACK[0xEC0];
          v636 = (float)BYTE4(DualPartitionBlockInfo_7x7);
          v637 = vrecpes_f32(v636);
          if (!BYTE4(DualPartitionBlockInfo_7x7))
            v637 = 0.0;
          do
          {
            v638 = (float32x4_t *)(&STACK[0xD60] + 8 * v634);
            v639 = vrndxq_f32(vmulq_n_f32(*v638, v636));
            v640 = vrndxq_f32(vmulq_n_f32(v638[1], v636));
            v641 = vrndxq_f32(vmulq_n_f32(v638[2], v636));
            v642 = vrndxq_f32(vmulq_n_f32(v638[3], v636));
            *v638 = vmulq_n_f32(v639, v637);
            v638[1] = vmulq_n_f32(v640, v637);
            v638[2] = vmulq_n_f32(v641, v637);
            v638[3] = vmulq_n_f32(v642, v637);
            *((int8x16_t *)&STACK[0xD20] + v634++) = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v639), (int16x8_t)vcvtq_s32_f32(v640)), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v641), (int16x8_t)vcvtq_s32_f32(v642)));
          }
          while (v634 != 3);
          v643 = rintf(*(float *)&STACK[0xE20] * v636);
          *(float *)&STACK[0xE20] = v637 * v643;
          *(_OWORD *)&STACK[0xD50] = 0u;
          LOBYTE(STACK[0xD50]) = (int)v643;
          v644 = *(float32x4_t **)(a4 + 32);
          if (v644)
          {
            __asm { FMOV            V1.4S, #3.0 }
            _Q0 = vmulq_f32(*v644, _Q1);
          }
          else
          {
            __asm { FMOV            V0.4S, #1.0 }
          }
          vars0 = _Q0;
          v647 = *(int32x4_t *)&STACK[0xC90];
          v648 = (int32x4_t)vaddq_f32(*(float32x4_t *)&STACK[0xC90], *(float32x4_t *)&STACK[0xCA0]);
          v649 = *(int32x4_t *)&STACK[0xCC0];
          v650 = (int32x4_t)vaddq_f32(*(float32x4_t *)&STACK[0xCC0], *(float32x4_t *)&STACK[0xCD0]);
          v651 = a4;
          do
          {
            v652 = v651;
            v651 = *(_QWORD *)(v651 + 40);
          }
          while (v651);
          v653 = *(float32x4_t *)&STACK[0xD70];
          v654 = *(float32x4_t *)&STACK[0xD60];
          v655 = *(float32x4_t *)&STACK[0xD8C];
          v656 = *(float32x4_t *)&STACK[0xD7C];
          v657 = *(float32x4_t *)&STACK[0xDA8];
          v658 = *(float32x4_t *)&STACK[0xD98];
          v659 = *(float32x4_t *)&STACK[0xDC4];
          v660 = *(float32x4_t *)&STACK[0xDB4];
          v661 = (float32x4_t)vextq_s8(*(int8x16_t *)&STACK[0xD60], *(int8x16_t *)&STACK[0xD70], 0xCuLL);
          v653.i32[3] = STACK[0xD78];
          v662 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&STACK[0xD60], vuzp1q_s32((int32x4_t)v654, (int32x4_t)v654));
          v654.i32[0] = HIDWORD(STACK[0xD60]);
          v663 = (float32x4_t)vdupq_n_s32(0x3D800000u);
          *(float32x4_t *)&STACK[0x1160] = vmulq_f32(vmlaq_f32(vmulq_f32(v653, (float32x4_t)xmmword_20631C920), (float32x4_t)xmmword_20631C930, v661), v663);
          *(float32x4_t *)&STACK[0x1150] = vmulq_f32(vmlaq_f32(vmulq_f32(v654, (float32x4_t)xmmword_20631C910), (float32x4_t)xmmword_20631C940, v662), v663);
          v664 = vmlaq_f32(vmulq_f32(v654, (float32x4_t)xmmword_20631C950), (float32x4_t)xmmword_20631C980, v662);
          v665 = (float32x4_t)vextq_s8((int8x16_t)v656, (int8x16_t)v655, 0xCuLL);
          v666 = (float32x4_t)vzip1q_s32((int32x4_t)v656, vuzp1q_s32((int32x4_t)v656, (int32x4_t)v656));
          v656.i32[0] = v656.i32[1];
          v655.i32[3] = v655.i32[2];
          *(float32x4_t *)&STACK[0x1180] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v653, (float32x4_t)xmmword_20631C960), (float32x4_t)xmmword_20631C970, v661), (float32x4_t)xmmword_20631C9A0, v665), (float32x4_t)xmmword_20631C9B0, v655), v663);
          *(float32x4_t *)&STACK[0x1170] = vmulq_f32(vmlaq_f32(vmlaq_f32(v664, (float32x4_t)xmmword_20631C990, v666), (float32x4_t)xmmword_20631C9C0, v656), v663);
          v667 = vmlaq_f32(vmulq_f32(v655, (float32x4_t)xmmword_20631C9E0), (float32x4_t)xmmword_20631C9F0, v665);
          v668 = vmlaq_f32(vmulq_f32(v656, (float32x4_t)xmmword_20631C9D0), (float32x4_t)xmmword_20631CA00, v666);
          v669 = (float32x4_t)vextq_s8((int8x16_t)v658, (int8x16_t)v657, 0xCuLL);
          v670 = (float32x4_t)vzip1q_s32((int32x4_t)v658, vuzp1q_s32((int32x4_t)v658, (int32x4_t)v658));
          v658.i32[0] = v658.i32[1];
          v657.i32[3] = v657.i32[2];
          *(float32x4_t *)&STACK[0x11A0] = vmulq_f32(vmlaq_f32(vmlaq_f32(v667, (float32x4_t)xmmword_20631CA20, v669), (float32x4_t)xmmword_20631CA30, v657), v663);
          *(float32x4_t *)&STACK[0x1190] = vmulq_f32(vmlaq_f32(vmlaq_f32(v668, (float32x4_t)xmmword_20631CA10, v670), (float32x4_t)xmmword_20631CA40, v658), v663);
          v671 = vmlaq_f32(vmulq_f32(v658, (float32x4_t)xmmword_20631CA50), (float32x4_t)xmmword_20631CA80, v670);
          v672 = (float32x4_t)vextq_s8((int8x16_t)v660, (int8x16_t)v659, 0xCuLL);
          v659.i32[3] = v659.i32[2];
          v673 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v657, (float32x4_t)xmmword_20631CA60), (float32x4_t)xmmword_20631CA70, v669), (float32x4_t)xmmword_20631CAA0, v672), (float32x4_t)xmmword_20631CAB0, v659);
          v674 = (float32x4_t)vzip1q_s32((int32x4_t)v660, vuzp1q_s32((int32x4_t)v660, (int32x4_t)v660));
          v675 = vmlaq_f32(vmulq_f32(v659, (float32x4_t)xmmword_20631CAB0), (float32x4_t)xmmword_20631CAA0, v672);
          v660.i32[0] = v660.i32[1];
          v676 = (float32x4_t)xmmword_20631CAC0;
          *(float32x4_t *)&STACK[0x11C0] = vmulq_f32(v673, v663);
          v677 = *(float32x4_t *)&STACK[0xDE0];
          v678 = *(float32x4_t *)&STACK[0xDD0];
          *(float32x4_t *)&STACK[0x11B0] = vmulq_f32(vmlaq_f32(vmlaq_f32(v671, (float32x4_t)xmmword_20631CA90, v674), (float32x4_t)xmmword_20631CAC0, v660), v663);
          v679 = (float32x4_t)vzip1q_s32((int32x4_t)v678, vuzp1q_s32((int32x4_t)v678, (int32x4_t)v678));
          v680 = (float32x4_t)vextq_s8((int8x16_t)v678, (int8x16_t)v677, 0xCuLL);
          v690 = *(float32x4_t *)&STACK[0xDFC];
          v677.i32[3] = v677.i32[2];
          v681 = vmlaq_f32(vmlaq_f32(v675, (float32x4_t)xmmword_20631CA70, v680), (float32x4_t)xmmword_20631CA60, v677);
          v682 = *(float32x4_t *)&STACK[0xDEC];
          v678.i32[0] = v678.i32[1];
          v683 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v660, (float32x4_t)xmmword_20631CAC0), (float32x4_t)xmmword_20631CA90, v674), (float32x4_t)xmmword_20631CA80, v679), (float32x4_t)xmmword_20631CA50, v678);
          v684 = vmulq_f32(v678, (float32x4_t)xmmword_20631CAD0);
          v685 = *(float32x4_t *)&STACK[0xE14];
          v686 = vmlaq_f32(v684, (float32x4_t)xmmword_20631CAF0, v679);
          v687 = (float32x4_t)vextq_s8(*(int8x16_t *)&STACK[0xDEC], *(int8x16_t *)&STACK[0xDFC], 0xCuLL);
          v688 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&STACK[0xDEC], vuzp1q_s32((int32x4_t)v682, (int32x4_t)v682));
          v689 = vmlaq_f32(vmlaq_f32(vmulq_f32(v677, (float32x4_t)xmmword_20631CA30), (float32x4_t)xmmword_20631CAE0, v680), (float32x4_t)xmmword_20631CB10, v687);
          v682.i32[0] = HIDWORD(STACK[0xDEC]);
          v690.i32[3] = STACK[0xE04];
          v691 = (float32x4_t)vextq_s8(*(int8x16_t *)&STACK[0xE14], (int8x16_t)vdupq_laneq_s32(*(int32x4_t *)&STACK[0xE14], 3), 4uLL);
          v692 = *(float32x4_t *)&STACK[0xE04];
          *(float32x4_t *)&STACK[0x11E0] = vmulq_f32(v681, v663);
          *(float32x4_t *)&STACK[0x11D0] = vmulq_f32(v683, v663);
          v693 = (float32x4_t)vextq_s8((int8x16_t)v692, (int8x16_t)v685, 4uLL);
          v693.i32[0] = v692.i32[2];
          v692.i32[0] = v692.i32[1];
          *(float32x4_t *)&STACK[0x1200] = vmulq_f32(vmlaq_f32(v689, (float32x4_t)xmmword_20631C9E0, v690), v663);
          *(float32x4_t *)&STACK[0x11F0] = vmulq_f32(vmlaq_f32(vmlaq_f32(v686, (float32x4_t)xmmword_20631CB00, v688), (float32x4_t)xmmword_20631CB20, v682), v663);
          v694 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v682, (float32x4_t)xmmword_20631C9C0), (float32x4_t)xmmword_20631C990, v688), (float32x4_t)xmmword_20631C980, v692), (float32x4_t)xmmword_20631C950, v693), v663);
          v695 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v690, (float32x4_t)xmmword_20631CB30), (float32x4_t)xmmword_20631CB40, v687), (float32x4_t)xmmword_20631CB50, v685), (float32x4_t)xmmword_20631CB60, v691), v663);
          v696 = vmulq_f32(vmlaq_f32(vmulq_f32(v693, (float32x4_t)xmmword_20631C910), (float32x4_t)xmmword_20631C940, v692), v663);
          *(int32x4_t *)&STACK[0xC00] = vdupq_lane_s32(*(int32x2_t *)v649.i8, 0);
          *(int32x4_t *)&STACK[0xC10] = vdupq_lane_s32(*(int32x2_t *)v647.i8, 0);
          v1347 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v650.i8, 0);
          v1351 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v648.i8, 0);
          v1342 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v647.i8, 1);
          v697 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v649.i8, 1);
          v698 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v648.i8, 1);
          v699 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v650.i8, 1);
          v700 = vmulq_f32(vmlaq_f32(vmulq_f32(v691, (float32x4_t)xmmword_20631C920), (float32x4_t)xmmword_20631C930, v685), v663);
          v701 = (int8x16_t)vdupq_laneq_s32(v647, 2);
          v702 = (int8x16_t)vdupq_laneq_s32(v649, 2);
          *(float32x4_t *)&STACK[0x1220] = v695;
          *(float32x4_t *)&STACK[0x1210] = v694;
          v703 = (int8x16_t)vdupq_laneq_s32(v648, 2);
          v704 = 0uLL;
          v705 = (int8x16_t)vdupq_laneq_s32(v650, 2);
          v706 = (int8x16_t)vdupq_laneq_s32(v647, 3);
          v707 = 0uLL;
          v708 = 0uLL;
          v709 = 0uLL;
          *(float32x4_t *)&STACK[0x1240] = v700;
          *(float32x4_t *)&STACK[0x1230] = v696;
          v710 = 0uLL;
          v711 = (int8x16_t)vdupq_laneq_s32(v649, 3);
          v712 = (int8x16_t)vdupq_laneq_s32(v648, 3);
          v713 = 0uLL;
          v714 = (int8x16_t)vdupq_laneq_s32(v650, 3);
          v715 = 0uLL;
          v716 = 0uLL;
          do
          {
            v690.i32[0] = 0;
            v676.i32[0] = *(unsigned __int8 *)(a4 + 135);
            v717 = (int8x8_t)vceqq_s8((int8x16_t)v676, (int8x16_t)v690).u64[0];
            __asm { FMOV            V8.4S, #1.0 }
            v719 = (int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v651 + 16));
            v720 = (int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v651));
            v721 = (float32x4_t)vbslq_s8(v720, *(int8x16_t *)&STACK[0xC00], *(int8x16_t *)&STACK[0xC10]);
            v722 = (float32x4_t)vbslq_s8(v719, *(int8x16_t *)&STACK[0xC00], *(int8x16_t *)&STACK[0xC10]);
            v723 = (float32x4_t)vbslq_s8(v720, v697, v1342);
            v724 = (float32x4_t)vbslq_s8(v719, v697, v1342);
            v726 = *(float32x4_t *)((char *)&STACK[0x1150] + v651);
            v725 = *(float32x4_t *)((char *)&STACK[0x1150] + v651 + 16);
            v727 = vmlaq_f32(v722, v725, vsubq_f32((float32x4_t)vbslq_s8(v719, v1347, v1351), v722));
            v728 = (float32x4_t)vbslq_s8(v719, v702, v701);
            v729 = vmlaq_f32(v724, v725, vsubq_f32((float32x4_t)vbslq_s8(v719, v699, v698), v724));
            v730 = vmlaq_f32(v728, v725, vsubq_f32((float32x4_t)vbslq_s8(v719, v705, v703), v728));
            v731 = (float32x4_t)vbslq_s8(v719, v711, v706);
            v732 = vmlaq_f32(v731, v725, vsubq_f32((float32x4_t)vbslq_s8(v719, v714, v712), v731));
            v733 = (float32x4_t)vbslq_s8(v720, v702, v701);
            v734 = vmlaq_f32(v721, v726, vsubq_f32((float32x4_t)vbslq_s8(v720, v1347, v1351), v721));
            v735 = vdupq_lane_s8(v717, 0);
            v736 = vmlaq_f32(v723, v726, vsubq_f32((float32x4_t)vbslq_s8(v720, v699, v698), v723));
            v737 = (float32x4_t)vbslq_s8(v720, v711, v706);
            v738 = vmlaq_f32(v733, v726, vsubq_f32((float32x4_t)vbslq_s8(v720, v705, v703), v733));
            v739 = vmlaq_f32(v737, v726, vsubq_f32((float32x4_t)vbslq_s8(v720, v714, v712), v737));
            v740 = vsubq_f32(v727, *(float32x4_t *)(v652 + v651 + 160));
            v741 = vsubq_f32(v734, *(float32x4_t *)(v652 + v651 + 144));
            v743 = *(float32x4_t *)(v652 + v651 + 912);
            v742 = *(float32x4_t *)(v652 + v651 + 928);
            v744 = (float32x4_t)vbslq_s8(v735, _Q8, (int8x16_t)v742);
            v745 = (float32x4_t)vbslq_s8(v735, _Q8, (int8x16_t)v743);
            v746 = vsubq_f32(v739, v743);
            v747 = vsubq_f32(v732, v742);
            v748 = vmulq_f32(v741, v745);
            v749 = vmulq_f32(vsubq_f32(v736, *(float32x4_t *)(v652 + v651 + 400)), v745);
            v690 = vmulq_f32(vsubq_f32(v738, *(float32x4_t *)(v652 + v651 + 656)), v745);
            v676 = vmulq_f32(v740, v744);
            v750 = vmulq_f32(vsubq_f32(v729, *(float32x4_t *)(v652 + v651 + 416)), v744);
            v751 = vmulq_f32(vsubq_f32(v730, *(float32x4_t *)(v652 + v651 + 672)), v744);
            v707 = vmlaq_f32(v707, v676, v676);
            v704 = vmlaq_f32(v704, v748, v748);
            v709 = vmlaq_f32(v709, v750, v750);
            v708 = vmlaq_f32(v708, v749, v749);
            v713 = vmlaq_f32(v713, v751, v751);
            v710 = vmlaq_f32(v710, v690, v690);
            v716 = vmlaq_f32(v716, v747, v747);
            v715 = vmlaq_f32(v715, v746, v746);
            v651 += 32;
          }
          while (v651 != 256);
          v752 = (int8x16_t)vmulq_f32(vars0, vpaddq_f32(vpaddq_f32(vaddq_f32(v704, v707), vaddq_f32(v708, v709)), vpaddq_f32(vaddq_f32(v710, v713), vaddq_f32(v715, v716))));
          v753 = fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v752.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v752, v752, 8uLL))));
          if (v753 < *a6)
          {
            *(_OWORD *)&STACK[0x11A0] = 0uLL;
            v754 = *(_OWORD *)&STACK[0xD20];
            *(_OWORD *)&STACK[0x1160] = *(_OWORD *)&STACK[0xD30];
            *(_OWORD *)&STACK[0x1150] = v754;
            v755 = *(_OWORD *)&STACK[0xD40];
            *(_OWORD *)&STACK[0x1180] = *(_OWORD *)&STACK[0xD50];
            *(_OWORD *)&STACK[0x1170] = v755;
            *(int8x16_t *)&STACK[0x1190] = vandq_s8(*(int8x16_t *)&STACK[0xCB0], (int8x16_t)xmmword_20631C6B0);
            *(unint64_t *)((char *)&STACK[0x1190] + ((DualPartitionBlockInfo_7x7 >> 41) & 0x7F)) = STACK[0xCE0];
            v756 = DualPartitionBlockInfo_7x7 & 0xE1801FFF | ((v1300 & 0x3FF) << 13) | ((STACK[0xC50] & 0xF) << 25);
            LODWORD(STACK[0x11A0]) = v756;
            LOBYTE(STACK[0x11A4]) = BYTE4(DualPartitionBlockInfo_7x7);
            LOBYTE(STACK[0x11A5]) = HIBYTE(DualPartitionBlockInfo_7x7);
            LOBYTE(STACK[0x11A6]) = BYTE5(DualPartitionBlockInfo_7x7);
            v757 = __clz(__rbit32(v633 + 1));
            LOBYTE(STACK[0x11A7]) = BYTE6(DualPartitionBlockInfo_7x7);
            v758 = ((v633 + 1) >> v757);
            v759 = *(int8x16_t *)&STACK[0x1190];
            if (v758 == 1)
            {
              v760 = vandq_s8(v759, (int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v635), (uint8x16_t)xmmword_2062D8540));
              v761 = vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)(*(_OWORD *)&v760 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16((8 - v757)))), (int8x16_t)(*(_OWORD *)&v760 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
              v762.i64[0] = 0xFFFF0000FFFFLL;
              v762.i64[1] = 0xFFFF0000FFFFLL;
              v763.i64[0] = 0xFFFF0000FFFF0000;
              v763.i64[1] = 0xFFFF0000FFFF0000;
              v764 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8(v761, v763), (uint32x4_t)vnegq_s32(vdupq_n_s32(2 * ((8 - (_BYTE)v757) & 0x7Fu)))), vandq_s8(v761, v762));
              v762.i64[0] = 0xFFFFFFFFLL;
              v762.i64[1] = 0xFFFFFFFFLL;
              v765 = vandq_s8(v764, v762);
              v766.i64[0] = 0xFFFFFFFF00000000;
              v766.i64[1] = 0xFFFFFFFF00000000;
              v767 = (uint64x2_t)vandq_s8(v764, v766);
              *(int32x2_t *)v766.i8 = vdup_n_s32(4 * ((8 - (_BYTE)v757) & 0x3Fu));
              v768.i64[0] = v766.u32[0];
              v768.i64[1] = v766.u32[1];
              v769 = vorrq_s8((int8x16_t)vshlq_u64(v767, (uint64x2_t)vnegq_s64(v768)), v765);
              v770 = v769.u64[1];
              v771 = 8 * v757;
              v772 = (v769.i64[1] << v771) | v769.i64[0];
              v757 = -v771;
              goto LABEL_206;
            }
            if (v757)
            {
              v773 = vmovl_u8(*(uint8x8_t *)v759.i8);
              v774 = vmovl_high_u8((uint8x16_t)v759);
              v775 = (uint16x8_t)vdupq_n_s16(v633);
              v776 = vsubw_u8(v775, *(uint8x8_t *)v759.i8);
              v777 = vsubw_high_u8(v775, (uint8x16_t)v759);
              v778 = (int16x8_t)vminq_u16(v777, v774);
              v779 = (int16x8_t)vminq_u16(v776, v773);
              if (v758 == 3)
                v780 = 21846;
              else
                v780 = 13108;
              v781 = (uint16x8_t)vdupq_n_s16(v780);
              v782 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v779.i8, *(uint16x4_t *)v781.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v779, v781), 0x10uLL);
              v783 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v778.i8, *(uint16x4_t *)v781.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v778, v781), 0x10uLL);
              v784 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((v633 + 1) >> v757));
              v785 = (uint16x8_t)vmlsq_s16(v779, v782, v784);
              v786 = (uint16x8_t)vmlsq_s16(v778, v783, v784);
              v787 = (uint16x8_t)vdupq_n_s16(v757);
              v788 = (int8x16_t)vcgtq_u16(v773, v776);
              v789.i64[0] = 0x1000100010001;
              v789.i64[1] = 0x1000100010001;
              v759 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v785, v787), vaddq_s16(v782, v782)), vandq_s8(v788, v789)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v786, v787), vaddq_s16(v783, v783)), vandq_s8((int8x16_t)vcgtq_u16(v774, v777), v789)));
            }
            v790 = vandq_s8(v759, (int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v635), (uint8x16_t)xmmword_2062D8540));
            if (v758 != 5)
            {
              v791 = 0uLL;
              if (v758 == 3)
              {
                v792 = vdupq_n_s8(v757);
                v793 = (int8x16_t)vshlq_u8((uint8x16_t)v790, (uint8x16_t)vnegq_s8(v792));
                v794 = vqtbl1q_s8(v793, (int8x16_t)xmmword_20631C6C0);
                v795 = (int32x4_t)vqtbl1q_s8(v793, (int8x16_t)xmmword_20631C6D0);
                v796 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v794.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v794, v794, 8uLL), (uint8x8_t)0x8010040180100401));
                v796.i64[0] = vpaddq_s16(v796, v796).u64[0];
                v797 = (int8x16_t)vmovl_s16(*(int16x4_t *)v796.i8);
                v798 = (int8x16_t)vshlq_n_s32(v795, 5uLL);
                v794.i64[0] = 0x3000000030;
                v794.i64[1] = 0x3000000030;
                v799.i64[0] = 0x2000000020;
                v799.i64[1] = 0x2000000020;
                v800 = (int8x16_t)vceqq_s32((int32x4_t)vandq_s8(v797, v794), v799);
                v801 = (int8x16_t)vaddw_s16((int32x4_t)v798, *(int16x4_t *)v796.i8);
                v799.i64[0] = 0xFF000000FFLL;
                v799.i64[1] = 0xFF000000FFLL;
                v802 = (int8x16_t)vcgtq_s32((int32x4_t)v801, v799);
                if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v800, v802)) & 0x80000000) != 0)
                {
                  v803.i64[0] = 0x200000002;
                  v803.i64[1] = 0x200000002;
                  v804 = (int8x16_t)vceqq_s32(v795, v803);
                  v805 = (int8x16_t)vshrq_n_u32((uint32x4_t)v797, 2uLL);
                  v806 = vandq_s8(v802, v804);
                  v807.i64[0] = 0xF0000000FLL;
                  v807.i64[1] = 0xF0000000FLL;
                  v808 = vandq_s8(v797, v807);
                  v809.i64[0] = 0x6060606060606060;
                  v809.i64[1] = 0x6060606060606060;
                  v810.i64[0] = 0x303030303030303;
                  v810.i64[1] = 0x303030303030303;
                  v801 = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v809, v798, v810), v802), v801), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v808), v800), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v805, v807)), v806))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v808), vandq_s8(v806, v800)));
                }
                v811 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v801, (int8x16_t)xmmword_20631CEE0), (int8x16_t)xmmword_20631C780), (uint8x16_t)xmmword_20631C7B0), (uint8x16_t)v792), vandq_s8(v790, vdupq_n_s8((1 << v757) - 1)));
                v812 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(vshlq_u16((uint16x8_t)(*(_OWORD *)&v811 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(7 - v757))), (uint16x8_t)xmmword_20631CEF0), (int16x8_t)(*(_OWORD *)&v811 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
                v813.i64[0] = 0xFFFF0000FFFF0000;
                v813.i64[1] = 0xFFFF0000FFFF0000;
                v814 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8(v812, v813), (uint32x4_t)vnegq_s32(vdupq_n_s32(13 - 2 * v757)));
                v815.i64[0] = 0xFFFF0000FFFFLL;
                v815.i64[1] = 0xFFFF0000FFFFLL;
                v816 = (int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)v814, (int32x4_t)vandq_s8(v812, v815)), (int32x4_t)v814.u32[0]);
                v814.i64[0] = 0xFFFFFFFFLL;
                v814.i64[1] = 0xFFFFFFFFLL;
                v817 = (int64x2_t)vandq_s8(v816, v814);
                v813.i64[0] = 0xFFFFFFFF00000000;
                v813.i64[1] = 0xFFFFFFFF00000000;
                v818 = (uint64x2_t)vandq_s8(v816, v813);
                *(int32x2_t *)v813.i8 = vdup_n_s32(25 - 4 * v757);
                v819.i64[0] = v813.u32[0];
                v819.i64[1] = v813.u32[1];
                v820 = vaddq_s64((int64x2_t)vshlq_u64(v818, (uint64x2_t)vnegq_s64(v819)), v817);
                v770 = v820.u64[1];
                v772 = (v820.i64[1] << (8 * v757 + 13)) | v820.i64[0];
                v821 = 51;
LABEL_205:
                LOBYTE(v757) = v821 - 8 * v757;
LABEL_206:
                v791.i64[0] = v772;
                v791.i64[1] = v770 >> v757;
              }
              v848 = __clz(__rbit32(BYTE4(DualPartitionBlockInfo_7x7) + 1));
              v849 = ((BYTE4(DualPartitionBlockInfo_7x7) + 1) >> v848);
              v850 = *(int8x16_t *)&STACK[0x1160];
              v851 = *(int8x16_t *)&STACK[0x1150];
              if (v849 == 1)
              {
                v1356.val[0] = vbicq_s8((int8x16_t)xmmword_20631CEB0, vceqzq_s8(v851));
                v1356.val[1] = vbicq_s8((int8x16_t)xmmword_20631CEB0, vceqzq_s8(v850));
                v1355.val[1] = vbicq_s8((int8x16_t)xmmword_20631CEB0, vceqzq_s8(*(int8x16_t *)&STACK[0x1180]));
                v1355.val[0] = vbicq_s8((int8x16_t)xmmword_20631CEB0, vceqzq_s8(*(int8x16_t *)&STACK[0x1170]));
                v852 = vaddvq_s32((int32x4_t)vorrq_s8(vqtbl2q_s8(v1356, (int8x16_t)xmmword_20631CED0), vqtbl2q_s8(v1356, (int8x16_t)xmmword_20631CEC0))) | (unsigned __int128)((unint64_t)vaddvq_s32((int32x4_t)vorrq_s8(vqtbl2q_s8(v1355, (int8x16_t)xmmword_20631CED0), vqtbl2q_s8(v1355, (int8x16_t)xmmword_20631CEC0))) << 32);
              }
              else
              {
                if (v848)
                {
                  v853 = vmovl_u8(*(uint8x8_t *)v851.i8);
                  v854 = vmovl_high_u8((uint8x16_t)v851);
                  v855 = vmovl_u8(*(uint8x8_t *)v850.i8);
                  v856 = vmovl_high_u8((uint8x16_t)v850);
                  v857 = (uint16x8_t)vdupq_n_s16(BYTE4(DualPartitionBlockInfo_7x7));
                  v858 = vsubw_u8(v857, *(uint8x8_t *)v851.i8);
                  v859 = vsubw_high_u8(v857, (uint8x16_t)v851);
                  v860 = vsubw_u8(v857, *(uint8x8_t *)v850.i8);
                  v861 = vsubw_high_u8(v857, (uint8x16_t)v850);
                  v862 = (int16x8_t)vminq_u16(v861, v856);
                  v863 = (int16x8_t)vminq_u16(v860, v855);
                  v864 = (int16x8_t)vminq_u16(v859, v854);
                  v865 = (int16x8_t)vminq_u16(v858, v853);
                  if (v849 == 3)
                    v866 = 21846;
                  else
                    v866 = 13108;
                  v867 = (uint16x8_t)vdupq_n_s16(v866);
                  v868 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v865.i8, *(uint16x4_t *)v867.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v865, v867), 0x10uLL);
                  v869 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v864.i8, *(uint16x4_t *)v867.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v864, v867), 0x10uLL);
                  v870 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v863.i8, *(uint16x4_t *)v867.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v863, v867), 0x10uLL);
                  v871 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v862.i8, *(uint16x4_t *)v867.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v862, v867), 0x10uLL);
                  v872 = vdupq_n_s16((BYTE4(DualPartitionBlockInfo_7x7) + 1) >> v848);
                  v873 = (uint16x8_t)vdupq_n_s16(v848);
                  v874.i64[0] = 0x1000100010001;
                  v874.i64[1] = 0x1000100010001;
                  v850 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v863, v870, v872), v873), vaddq_s16(v870, v870)), vandq_s8((int8x16_t)vcgtq_u16(v855, v860), v874)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v862, v871, v872), v873), vaddq_s16(v871, v871)), vandq_s8((int8x16_t)vcgtq_u16(v856, v861), v874)));
                  v851 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v865, v868, v872), v873), vaddq_s16(v868, v868)), vandq_s8((int8x16_t)vcgtq_u16(v853, v858), v874)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v864, v869, v872), v873), vaddq_s16(v869, v869)), vandq_s8((int8x16_t)vcgtq_u16(v854, v859), v874)));
                  v875 = vmovl_u8((uint8x8_t)STACK[0x1170]);
                  v876 = vmovl_high_u8(*(uint8x16_t *)&STACK[0x1170]);
                  v877 = vmovl_u8((uint8x8_t)STACK[0x1180]);
                  v878 = vmovl_high_u8(*(uint8x16_t *)&STACK[0x1180]);
                  v879 = vsubw_u8(v857, (uint8x8_t)STACK[0x1170]);
                  v880 = vsubw_high_u8(v857, *(uint8x16_t *)&STACK[0x1170]);
                  v881 = vsubw_u8(v857, (uint8x8_t)STACK[0x1180]);
                  v882 = vsubw_high_u8(v857, *(uint8x16_t *)&STACK[0x1180]);
                  v883 = (int16x8_t)vminq_u16(v882, v878);
                  v884 = (int16x8_t)vminq_u16(v881, v877);
                  v885 = (int16x8_t)vminq_u16(v880, v876);
                  v886 = (int16x8_t)vminq_u16(v879, v875);
                  v887 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v886.i8, *(uint16x4_t *)v867.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v886, v867), 0x10uLL);
                  v888 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v885.i8, *(uint16x4_t *)v867.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v885, v867), 0x10uLL);
                  v889 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v884.i8, *(uint16x4_t *)v867.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v884, v867), 0x10uLL);
                  v890 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v883.i8, *(uint16x4_t *)v867.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v883, v867), 0x10uLL);
                  v891 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v884, v889, v872), v873), vaddq_s16(v889, v889)), vandq_s8((int8x16_t)vcgtq_u16(v877, v881), v874)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v883, v890, v872), v873), vaddq_s16(v890, v890)), vandq_s8((int8x16_t)vcgtq_u16(v878, v882), v874)));
                  v892 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v886, v887, v872), v873), vaddq_s16(v887, v887)), vandq_s8((int8x16_t)vcgtq_u16(v875, v879), v874)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v885, v888, v872), v873), vaddq_s16(v888, v888)), vandq_s8((int8x16_t)vcgtq_u16(v876, v880), v874)));
                }
                else
                {
                  v891 = *(int8x16_t *)&STACK[0x1180];
                  v892 = *(int8x16_t *)&STACK[0x1170];
                }
                v852 = 0uLL;
                if (v849 == 3)
                {
                  if (!v848)
                  {
                    v893 = vqtbl1q_s8(v851, (int8x16_t)xmmword_20631C6C0);
                    v894 = vqtbl1q_s8(v850, (int8x16_t)xmmword_20631C710);
                    v895 = vpaddq_s16(vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v893.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v893, v893, 8uLL), (uint8x8_t)0x8010040180100401)), vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v894.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v894, v894, 8uLL), (uint8x8_t)0x8010040180100401)));
                    v896 = vuzp1q_s16((int16x8_t)vqtbl1q_s8(v851, (int8x16_t)xmmword_20631C6D0), (int16x8_t)vqtbl1q_s8(v850, (int8x16_t)xmmword_20631C720));
                    v897 = vaddq_s16(v895, (int16x8_t)vqtbl1q_s8((int8x16_t)v895, (int8x16_t)xmmword_20631C730));
                    v898 = v897;
                    v898.i16[3] = 0;
                    v898.i16[7] = 0;
                    v899.i64[0] = 0x30003000300030;
                    v899.i64[1] = 0x30003000300030;
                    v900.i64[0] = 0x20002000200020;
                    v900.i64[1] = 0x20002000200020;
                    v901 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8((int8x16_t)v898, v899), v900);
                    v899.i64[0] = 0xFF00FF00FF00FFLL;
                    v899.i64[1] = 0xFF00FF00FF00FFLL;
                    v902 = (int8x16_t)vcgtq_u16((uint16x8_t)v898, (uint16x8_t)v899);
                    v903 = vshlq_n_s16(v896, 5uLL);
                    v904 = (int8x16_t)vaddq_s16(v898, v903);
                    if ((vmaxvq_u16((uint16x8_t)vorrq_s8(v901, v902)) & 0x8000) != 0)
                    {
                      v905.i64[0] = 0x2000200020002;
                      v905.i64[1] = 0x2000200020002;
                      v906 = (int8x16_t)vceqq_s16(v896, v905);
                      v907 = (int8x16_t)vshrq_n_u16((uint16x8_t)v898, 2uLL);
                      v908 = vandq_s8(v902, v906);
                      v909.i64[0] = 0xF000F000F000FLL;
                      v909.i64[1] = 0xF000F000F000FLL;
                      v910 = vandq_s8((int8x16_t)v898, v909);
                      v911.i64[0] = 0x6060606060606060;
                      v911.i64[1] = 0x6060606060606060;
                      v912.i64[0] = 0x303030303030303;
                      v912.i64[1] = 0x303030303030303;
                      v904 = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v911, (int8x16_t)v903, v912), v902), v904), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v910), v901), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v907, v909)), v908))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v910), vandq_s8(v908, v901)));
                    }
                    v913 = vqtbl1q_s8(v892, (int8x16_t)xmmword_20631CE60);
                    v914 = vqtbl1q_s8(v891, (int8x16_t)xmmword_20631CE70);
                    v915 = vpaddq_s16(vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v913.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v913, v913, 8uLL), (uint8x8_t)0x8010040180100401)), vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v914.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v914, v914, 8uLL), (uint8x8_t)0x8010040180100401)));
                    v916 = vuzp1q_s16((int16x8_t)vqtbl1q_s8(v892, (int8x16_t)xmmword_20631CE80), (int16x8_t)vqtbl1q_s8(v891, (int8x16_t)xmmword_20631CE90));
                    v917 = vaddq_s16(v915, (int16x8_t)vqtbl1q_s8((int8x16_t)v915, (int8x16_t)xmmword_20631C730));
                    v917.i16[0] += v897.i16[7];
                    v917.i16[3] = 0;
                    v915.i64[0] = 0x30003000300030;
                    v915.i64[1] = 0x30003000300030;
                    v918.i64[0] = 0x20002000200020;
                    v918.i64[1] = 0x20002000200020;
                    v919 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8((int8x16_t)v917, (int8x16_t)v915), v918);
                    v915.i64[0] = 0xFF00FF00FF00FFLL;
                    v915.i64[1] = 0xFF00FF00FF00FFLL;
                    v920 = (int8x16_t)vcgtq_u16((uint16x8_t)v917, (uint16x8_t)v915);
                    v921 = vshlq_n_s16(v916, 5uLL);
                    v922 = (int8x16_t)vaddq_s16(v917, v921);
                    if ((vmaxvq_u16((uint16x8_t)vorrq_s8(v919, v920)) & 0x8000) != 0)
                    {
                      v923 = (int8x16_t)vshrq_n_u16((uint16x8_t)v917, 2uLL);
                      v924.i64[0] = 0x2000200020002;
                      v924.i64[1] = 0x2000200020002;
                      v925 = vandq_s8(v920, (int8x16_t)vceqq_s16(v916, v924));
                      v926.i64[0] = 0xF000F000F000FLL;
                      v926.i64[1] = 0xF000F000F000FLL;
                      v927 = vandq_s8((int8x16_t)v917, v926);
                      v928.i64[0] = 0x6060606060606060;
                      v928.i64[1] = 0x6060606060606060;
                      v929.i64[0] = 0x303030303030303;
                      v929.i64[1] = 0x303030303030303;
                      v922 = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v928, (int8x16_t)v921, v929), v920), v922), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v927), v919), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v923, v926)), v925))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v927), vandq_s8(v925, v919)));
                    }
                    v852 = (unsigned __int128)vaddq_s8(vqtbl1q_s8(v922, (int8x16_t)xmmword_20631CEA0), vqtbl1q_s8(v904, (int8x16_t)xmmword_20631CB80));
                  }
                }
                else if (v849 == 5)
                {
                  __break(1u);
                  return;
                }
              }
              v930 = vqtbl1q_s8(v791, vsubq_s8((int8x16_t)xmmword_2062D8540, vdupq_n_s8(BYTE6(DualPartitionBlockInfo_7x7) >> 3)));
              *a5 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u64((uint64x2_t)vqtbl1q_s8(v930, (int8x16_t)xmmword_2062D8550), (uint64x2_t)vdupq_n_s64(HIWORD(DualPartitionBlockInfo_7x7) | 0xFFFFFFFFFFFFFFF8)), vorrq_s8((int8x16_t)v756, (int8x16_t)vshlq_u64((uint64x2_t)v930, (uint64x2_t)vdupq_n_s64(HIWORD(DualPartitionBlockInfo_7x7) & 7)))), vqtbl1q_s8(vrbitq_s8((int8x16_t)v852), (int8x16_t)xmmword_20631C860));
              *a6 = v753;
              if (v753 < a6[1])
                return;
              goto LABEL_225;
            }
            v822 = vdupq_n_s8(v757);
            v823 = (int8x16_t)vshlq_u8((uint8x16_t)v790, (uint8x16_t)vnegq_s8(v822));
            v824 = vqtbl1q_s8(v823, (int8x16_t)xmmword_20631C640);
            v825 = (int16x8_t)vqtbl1q_s8(v823, (int8x16_t)xmmword_20631C650);
            v826 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v824.i8, (uint8x8_t)0x2001200120012001), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v824, v824, 8uLL), (uint8x8_t)0x2001200120012001));
            v827.i64[0] = 0x7000700070007;
            v827.i64[1] = 0x7000700070007;
            v828 = (int16x8_t)vandq_s8((int8x16_t)v826, v827);
            v829 = (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v826, 5uLL), v827);
            v830.i64[0] = 0x4000400040004;
            v830.i64[1] = 0x4000400040004;
            v831 = (int8x16_t)vceqq_s16(v825, v830);
            v832 = (int8x16_t)vceqq_s16(v829, v830);
            v833 = vsubq_s8((int8x16_t)vaddq_s16(v826, vshlq_n_s16(v825, 3uLL)), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C660, (int8x16_t)v828), v832));
            if ((vmaxvq_u16((uint16x8_t)v831) & 0x8000) != 0)
            {
              v834.i64[0] = 0x18001800180018;
              v834.i64[1] = 0x18001800180018;
              v833 = vsubq_s8(v833, vaddq_s8(vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C670, (int8x16_t)v828), v831), vandq_s8((int8x16_t)vmulq_s16(v829, v834), vandq_s8((int8x16_t)vceqq_s16(v828, v830), v831))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C680, (int8x16_t)v828), vandq_s8(v832, v831))));
            }
            v835 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v833, (int8x16_t)xmmword_20631CF00), (int8x16_t)xmmword_20631CF10), (uint8x16_t)xmmword_20631CF20), (uint8x16_t)v822), vandq_s8(v790, vdupq_n_s8((1 << v757) - 1)));
            v836 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(vshlq_u16((uint16x8_t)(*(_OWORD *)&v835 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(6 - v757))), (uint16x8_t)xmmword_20631CF30), (int16x8_t)(*(_OWORD *)&v835 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
            v837.i64[0] = 0xFFFF0000FFFFLL;
            v837.i64[1] = 0xFFFF0000FFFFLL;
            v838 = (int32x4_t)vandq_s8(v836, v837);
            v839.i64[0] = 0xFFFF0000FFFF0000;
            v839.i64[1] = 0xFFFF0000FFFF0000;
            v840 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v836, v839), (uint32x4_t)vnegq_s32(vdupq_n_s32(12 - 2 * v757)));
            v841 = (int8x16_t)vaddq_s32(v840, v838);
            v840.i32[1] = 0;
            v842 = (int8x16_t)vaddq_s32((int32x4_t)v841, v840);
            v841.i64[0] = 0xFFFFFFFFLL;
            v841.i64[1] = 0xFFFFFFFFLL;
            v843 = (int64x2_t)vandq_s8(v842, v841);
            v839.i64[0] = 0xFFFFFFFF00000000;
            v839.i64[1] = 0xFFFFFFFF00000000;
            LODWORD(v844) = 0;
            HIDWORD(v844) = v842.i32[1];
            v845 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v842, v839), (int64x2_t)v844);
            *(int32x2_t *)v839.i8 = vdup_n_s32(23 - 4 * v757);
            v846.i64[0] = v839.u32[0];
            v846.i64[1] = v839.u32[1];
            v847 = vaddq_s64((int64x2_t)vshlq_u64(v845, (uint64x2_t)vnegq_s64(v846)), v843);
            v770 = v847.u64[1];
            v772 = (v847.i64[1] << (8 * v757 + 19)) | v847.i64[0];
            v821 = 45;
            goto LABEL_205;
          }
        }
LABEL_225:
        __asm
        {
          FMOV            V2.4S, #0.23438
          FMOV            V3.4S, #0.53125
        }
        v933 = (float32x4_t)vdupq_n_s32(0x3D100000u);
        __asm { FMOV            V7.4S, #0.21875 }
        v935 = (float32x4_t)vdupq_n_s32(0x3EA60000u);
        v936 = (float32x4_t)vdupq_n_s32(0x3C800000u);
        v937 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1304, _Q2), _Q3, v1304), _Q7, v1317), v936, v1330);
        v938 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1310, _Q2), _Q3, v1310), _Q7, v1312), v936, v1332);
        *(float32x4_t *)&STACK[0x1150] = v938;
        *(float32x4_t *)&STACK[0x1160] = v937;
        v939 = (float32x4_t)vdupq_n_s32(0x3F020000u);
        v940 = (float32x4_t)vdupq_n_s32(0x3D900000u);
        __asm { FMOV            V21.4S, #0.13281 }
        *(float32x4_t *)&STACK[0x1180] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1304, v933), v935, v1317), v939, v1330), _Q21, v1327);
        *(float32x4_t *)&STACK[0x1170] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1310, v933), v935, v1312), v939, v1332), _Q21, v1323);
        v942 = (float32x4_t)vdupq_n_s32(0x3EDC0000u);
        *(float32x4_t *)&STACK[0x11A0] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1330, v940), v942, v1327), v942, v1315), v940, v1319);
        *(float32x4_t *)&STACK[0x1190] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1332, v940), v942, v1323), v942, v1308), v940, v1321);
        v1333 = v935;
        *(float32x4_t *)&STACK[0x11B0] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1308, _Q21), v939, v1321), v935, v1303), v933, v1302);
        *(float32x4_t *)&STACK[0x11C0] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1315, _Q21), v939, v1319), v935, v1306), v933, v1305);
        *(float32x4_t *)&STACK[0x11E0] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1319, v936), _Q7, v1306), _Q3, v1305), _Q2, v1305);
        *(float32x4_t *)&STACK[0x11D0] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1321, v936), _Q7, v1303), _Q3, v1302), _Q2, v1302);
        v943 = &STACK[0xD60];
        for (n = 32; ; n += 32)
        {
          v945 = vpaddq_f32(vmulq_f32(v938, (float32x4_t)xmmword_20631CF50), vmulq_f32(v937, (float32x4_t)xmmword_20631CF40));
          v946 = (int8x16_t)vaddq_f32(v945, (float32x4_t)vqtbl1q_s8((int8x16_t)v945, (int8x16_t)xmmword_20631C8E0));
          v947 = vpaddq_f32(vpaddq_f32(vmulq_f32(v938, (float32x4_t)xmmword_20631CBD0), vmulq_f32(v938, (float32x4_t)xmmword_20631CBF0)), vpaddq_f32(vmulq_f32(v937, (float32x4_t)xmmword_20631CBC0), vmulq_f32(v937, (float32x4_t)xmmword_20631CBE0)));
          v948 = (int8x16_t)vaddq_f32(v947, (float32x4_t)vqtbl1q_s8((int8x16_t)v947, (int8x16_t)xmmword_20631CC00));
          v949 = vextq_s8(v946, v946, 4uLL);
          v950 = vextq_s8(vextq_s8(v949, v948, 8uLL), v949, 4uLL);
          v946.i32[1] = v948.i32[2];
          v951 = vuzp2q_s32((int32x4_t)v946, (int32x4_t)v946);
          if (n == 160)
            break;
          *(int8x16_t *)v943 = v950;
          *((int32x4_t *)v943 + 1) = v951;
          v943 += 3;
          v938 = *(float32x4_t *)((char *)&STACK[0x1150] + n);
          v937 = *(float32x4_t *)((char *)&STACK[0x1150] + n + 16);
        }
        *(int8x16_t *)v943 = v950;
        v943[2] = v951.i64[0];
        DualPartitionBlockInfo_6x5 = GetDualPartitionBlockInfo_6x5((30 * v631) >> 6, 16 - 4 * *(char *)(a1 + 136));
        v953 = HIBYTE(DualPartitionBlockInfo_6x5);
        LODWORD(STACK[0xC7C]) = (DualPartitionBlockInfo_6x5 >> 25) & 0xF;
        if (!FindQuantizedColors(HIBYTE(DualPartitionBlockInfo_6x5), (uint64_t)&STACK[0xC90], (unsigned int *)&STACK[0xC7C], (float32x4_t *)&STACK[0xD60], 0x1EuLL, v1340, v1336, v1338))
        {
          v955 = 0;
          v956 = DualPartitionBlockInfo_6x5 >> 40;
          STACK[0xC80] = (unint64_t)&STACK[0xEC0];
          *(_OWORD *)&STACK[0xC50] = 0u;
          *(_OWORD *)&STACK[0xC60] = 0u;
          v957 = (float)BYTE4(DualPartitionBlockInfo_6x5);
          v958 = vrecpes_f32(v957);
          if (!BYTE4(DualPartitionBlockInfo_6x5))
            v958 = 0.0;
          do
          {
            v959 = (float32x4_t *)(&STACK[0xD60] + 4 * v955);
            v960 = vrndxq_f32(vmulq_n_f32(*v959, v957));
            v961 = (int8x16_t)vrndxq_f32(vmulq_n_f32(v959[1], v957));
            v954.i64[0] = v955;
            v962 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vceqq_s64(v954, v1287).i64[0], 0), (int8x16_t)v961.u64[0], v961);
            v954 = (int64x2_t)vmulq_n_f32(v962, v958);
            *v959 = vmulq_n_f32(v960, v958);
            v959[1] = (float32x4_t)v954;
            *(&STACK[0xC50] + v955++) = (unint64_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v960), (int16x8_t)vcvtq_s32_f32(v962)));
          }
          while (v955 != 4);
          v963 = *(_OWORD *)&STACK[0xDD0];
          *((_QWORD *)&v963 + 1) = 0;
          *(_OWORD *)&STACK[0xDD0] = v963;
          v964 = *(float32x4_t **)(a3 + 32);
          if (v964)
          {
            __asm { FMOV            V1.4S, #3.0 }
            _Q0 = vmulq_f32(*v964, _Q1);
          }
          else
          {
            __asm { FMOV            V0.4S, #1.0 }
          }
          v1331 = _Q0;
          v967 = *(int32x4_t *)&STACK[0xC90];
          v968 = *(int32x4_t *)&STACK[0xCC0];
          v1324 = (int32x4_t)vaddq_f32(*(float32x4_t *)&STACK[0xCC0], *(float32x4_t *)&STACK[0xCD0]);
          v1328 = (int32x4_t)vaddq_f32(*(float32x4_t *)&STACK[0xC90], *(float32x4_t *)&STACK[0xCA0]);
          v969 = a3;
          do
          {
            v970 = v969;
            v969 = *(_QWORD *)(v969 + 40);
          }
          while (v969);
          v971 = *(float32x4_t *)&STACK[0xD60];
          v972 = (float32x4_t)vextq_s8(*(int8x16_t *)&STACK[0xD60], *(int8x16_t *)&STACK[0xD70], 8uLL);
          v973 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&STACK[0xD70], *(int32x4_t *)&STACK[0xD70]);
          v973.i32[0] = HIDWORD(*(_OWORD *)&STACK[0xD60]);
          v974 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&STACK[0xD60], vuzp1q_s32((int32x4_t)v971, (int32x4_t)v971));
          v971.i32[0] = HIDWORD(STACK[0xD60]);
          v975 = *(float32x4_t *)&STACK[0xD78];
          v976 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&STACK[0xD78], vuzp1q_s32((int32x4_t)v975, (int32x4_t)v975));
          v977 = (float32x4_t)vextq_s8(*(int8x16_t *)&STACK[0xD78], *(int8x16_t *)&STACK[0xD88], 8uLL);
          v978 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&STACK[0xD88], *(int32x4_t *)&STACK[0xD88]);
          v978.i32[0] = HIDWORD(*(_OWORD *)&STACK[0xD78]);
          v975.i32[0] = HIDWORD(STACK[0xD78]);
          v979 = *(float32x4_t *)&STACK[0xD90];
          v980 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&STACK[0xD90], vuzp1q_s32((int32x4_t)v979, (int32x4_t)v979));
          v981 = (float32x4_t)vextq_s8(*(int8x16_t *)&STACK[0xD90], *(int8x16_t *)&STACK[0xDA0], 8uLL);
          v982 = (float32x4_t)vzip1q_s32(*(int32x4_t *)&STACK[0xDA0], *(int32x4_t *)&STACK[0xDA0]);
          v982.i32[0] = HIDWORD(*(_OWORD *)&STACK[0xD90]);
          v979.i32[0] = HIDWORD(STACK[0xD90]);
          v983 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v978, (float32x4_t)xmmword_20631CDA0), (float32x4_t)xmmword_20631CDD0, v977), (float32x4_t)xmmword_20631CDE0, v981), (float32x4_t)xmmword_20631CE10, v982);
          v984 = (float32x4_t)vdupq_n_s32(0x3D800000u);
          *(float32x4_t *)&STACK[0x1150] = vmulq_f32(vmlaq_f32(vmulq_f32(v971, (float32x4_t)xmmword_20631CC90), (float32x4_t)xmmword_20631CCA0, v974), v984);
          *(float32x4_t *)&STACK[0x1160] = vmulq_f32(vmlaq_f32(vmulq_f32(v973, (float32x4_t)xmmword_20631CC80), (float32x4_t)xmmword_20631CCB0, v972), v984);
          *(float32x4_t *)&STACK[0x1170] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v971, (float32x4_t)xmmword_20631CCC0), (float32x4_t)xmmword_20631CCD0, v974), (float32x4_t)xmmword_20631CD00, v976), (float32x4_t)xmmword_20631CD10, v975), v984);
          *(float32x4_t *)&STACK[0x1180] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v973, (float32x4_t)xmmword_20631C9B0), (float32x4_t)xmmword_20631CCE0, v972), (float32x4_t)xmmword_20631CCF0, v977), (float32x4_t)xmmword_20631CD20, v978), v984);
          *(float32x4_t *)&STACK[0x1190] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v975, (float32x4_t)xmmword_20631CD40), (float32x4_t)xmmword_20631CD50, v976), (float32x4_t)xmmword_20631CD80, v980), (float32x4_t)xmmword_20631CD90, v979), v984);
          *(float32x4_t *)&STACK[0x11A0] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v978, (float32x4_t)xmmword_20631CD30), (float32x4_t)xmmword_20631CD60, v977), (float32x4_t)xmmword_20631CD70, v981), (float32x4_t)xmmword_20631C9E0, v982), v984);
          v985 = *(float32x4_t *)&STACK[0xDA8];
          *(float32x4_t *)&STACK[0x11B0] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v975, (float32x4_t)xmmword_20631CDB0), (float32x4_t)xmmword_20631CDC0, v976), (float32x4_t)xmmword_20631CDF0, v980), (float32x4_t)xmmword_20631CE00, v979), v984);
          v986 = *(int8x16_t *)&STACK[0xDB8];
          *(float32x4_t *)&STACK[0x11C0] = vmulq_f32(v983, v984);
          v987 = (float32x4_t)vextq_s8((int8x16_t)v985, v986, 8uLL);
          v988 = (float32x4_t)vzip1q_s32((int32x4_t)v985, vuzp1q_s32((int32x4_t)v985, (int32x4_t)v985));
          v989 = (float32x4_t)vzip1q_s32((int32x4_t)v986, (int32x4_t)v986);
          v989.i32[0] = v985.i32[3];
          v985.i32[0] = v985.i32[1];
          *(float32x4_t *)&STACK[0x11D0] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v979, (float32x4_t)xmmword_20631CE00), (float32x4_t)xmmword_20631CDF0, v980), (float32x4_t)xmmword_20631CDC0, v988), (float32x4_t)xmmword_20631CDB0, v985), v984);
          *(float32x4_t *)&STACK[0x11E0] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v982, (float32x4_t)xmmword_20631CE10), (float32x4_t)xmmword_20631CDE0, v981), (float32x4_t)xmmword_20631CDD0, v987), (float32x4_t)xmmword_20631CDA0, v989), v984);
          v990 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v979, (float32x4_t)xmmword_20631CD90), (float32x4_t)xmmword_20631CD80, v980), (float32x4_t)xmmword_20631CD50, v988), (float32x4_t)xmmword_20631CD40, v985);
          *(float32x4_t *)&STACK[0x11F0] = vmulq_f32(v990, v984);
          v991 = *(float32x4_t *)&STACK[0xDC8];
          *(float32x4_t *)&STACK[0x1200] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v982, (float32x4_t)xmmword_20631CE20), (float32x4_t)xmmword_20631CE30, v981), (float32x4_t)xmmword_20631CE40, v987), (float32x4_t)xmmword_20631CE50, v989), v984);
          v992 = (float32x4_t)vextq_s8(v986, (int8x16_t)v991, 4uLL);
          v992.i32[0] = v986.i32[2];
          v993 = vmlaq_f32(vmlaq_f32(vmulq_f32(v989, (float32x4_t)xmmword_20631CD20), (float32x4_t)xmmword_20631CCF0, v987), (float32x4_t)xmmword_20631CCE0, v991);
          v994 = (float32x4_t)vextq_s8((int8x16_t)v991, (int8x16_t)vdupq_laneq_s32((int32x4_t)v991, 3), 4uLL);
          v995 = (float32x4_t)vextq_s8(v986, vextq_s8(v986, (int8x16_t)v991, 0xCuLL), 0xCuLL);
          v996 = vmulq_f32(vmlaq_f32(v993, (float32x4_t)xmmword_20631C9B0, v994), v984);
          v997 = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v985, (float32x4_t)xmmword_20631CD10), (float32x4_t)xmmword_20631CD00, v988), (float32x4_t)xmmword_20631CCD0, v992), (float32x4_t)xmmword_20631CCC0, v995), v984);
          *(int32x4_t *)&STACK[0xC00] = vdupq_lane_s32(*(int32x2_t *)v968.i8, 0);
          *(int32x4_t *)&STACK[0xC10] = vdupq_lane_s32(*(int32x2_t *)v967.i8, 0);
          v1352 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1328.i8, 0);
          v1348 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1324.i8, 0);
          v1343 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v967.i8, 1);
          v998 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v968.i8, 1);
          v999 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1328.i8, 1);
          v1000 = vmulq_f32(vmlaq_f32(vmulq_f32(v995, (float32x4_t)xmmword_20631CC90), (float32x4_t)xmmword_20631CCA0, v992), v984);
          v1001 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1324.i8, 1);
          v1002 = vmulq_f32(vmlaq_f32(vmulq_f32(v994, (float32x4_t)xmmword_20631CC80), (float32x4_t)xmmword_20631CCB0, v991), v984);
          v1003 = (int8x16_t)vdupq_laneq_s32(v967, 2);
          v1004 = (int8x16_t)vdupq_laneq_s32(v968, 2);
          *(float32x4_t *)&STACK[0x1210] = v997;
          *(float32x4_t *)&STACK[0x1220] = v996;
          v1005 = (int8x16_t)vdupq_laneq_s32(v1328, 2);
          v1006 = 0uLL;
          v1007 = (int8x16_t)vdupq_laneq_s32(v1324, 2);
          v1008 = (int8x16_t)vdupq_laneq_s32(v967, 3);
          v1009 = 0uLL;
          v1010 = 0uLL;
          v1011 = 0uLL;
          *(float32x4_t *)&STACK[0x1240] = v1002;
          *(float32x4_t *)&STACK[0x1230] = v1000;
          v1012 = 0uLL;
          v1013 = (int8x16_t)vdupq_laneq_s32(v968, 3);
          v1014 = (int8x16_t)vdupq_laneq_s32(v1328, 3);
          v1015 = 0uLL;
          v1016 = (int8x16_t)vdupq_laneq_s32(v1324, 3);
          v1017 = 0uLL;
          v1018 = 0uLL;
          do
          {
            v996.i32[0] = 0;
            v990.i32[0] = *(unsigned __int8 *)(a3 + 135);
            v1019 = (int8x8_t)vceqq_s8((int8x16_t)v990, (int8x16_t)v996).u64[0];
            __asm { FMOV            V8.4S, #1.0 }
            v1021 = (int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v969 + 16));
            v1022 = (int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v969));
            v1023 = (float32x4_t)vbslq_s8(v1022, *(int8x16_t *)&STACK[0xC00], *(int8x16_t *)&STACK[0xC10]);
            v1024 = (float32x4_t)vbslq_s8(v1021, *(int8x16_t *)&STACK[0xC00], *(int8x16_t *)&STACK[0xC10]);
            v1025 = (float32x4_t)vbslq_s8(v1022, v998, v1343);
            v1026 = (float32x4_t)vbslq_s8(v1021, v998, v1343);
            v1028 = *(float32x4_t *)((char *)&STACK[0x1150] + v969);
            v1027 = *(float32x4_t *)((char *)&STACK[0x1150] + v969 + 16);
            v1029 = vmlaq_f32(v1024, v1027, vsubq_f32((float32x4_t)vbslq_s8(v1021, v1348, v1352), v1024));
            v1030 = (float32x4_t)vbslq_s8(v1021, v1004, v1003);
            v1031 = vmlaq_f32(v1026, v1027, vsubq_f32((float32x4_t)vbslq_s8(v1021, v1001, v999), v1026));
            v1032 = vmlaq_f32(v1030, v1027, vsubq_f32((float32x4_t)vbslq_s8(v1021, v1007, v1005), v1030));
            v1033 = (float32x4_t)vbslq_s8(v1021, v1013, v1008);
            v1034 = vmlaq_f32(v1033, v1027, vsubq_f32((float32x4_t)vbslq_s8(v1021, v1016, v1014), v1033));
            v1035 = (float32x4_t)vbslq_s8(v1022, v1004, v1003);
            v1036 = vmlaq_f32(v1023, v1028, vsubq_f32((float32x4_t)vbslq_s8(v1022, v1348, v1352), v1023));
            v1037 = vdupq_lane_s8(v1019, 0);
            v1038 = vmlaq_f32(v1025, v1028, vsubq_f32((float32x4_t)vbslq_s8(v1022, v1001, v999), v1025));
            v1039 = (float32x4_t)vbslq_s8(v1022, v1013, v1008);
            v1040 = vmlaq_f32(v1035, v1028, vsubq_f32((float32x4_t)vbslq_s8(v1022, v1007, v1005), v1035));
            v1041 = vmlaq_f32(v1039, v1028, vsubq_f32((float32x4_t)vbslq_s8(v1022, v1016, v1014), v1039));
            v1042 = vsubq_f32(v1029, *(float32x4_t *)(v970 + v969 + 160));
            v1043 = vsubq_f32(v1036, *(float32x4_t *)(v970 + v969 + 144));
            v1044 = vsubq_f32(v1032, *(float32x4_t *)(v970 + v969 + 672));
            v1046 = *(float32x4_t *)(v970 + v969 + 912);
            v1045 = *(float32x4_t *)(v970 + v969 + 928);
            v1047 = (float32x4_t)vbslq_s8(v1037, _Q8, (int8x16_t)v1045);
            v1048 = (float32x4_t)vbslq_s8(v1037, _Q8, (int8x16_t)v1046);
            v1049 = vsubq_f32(v1041, v1046);
            v1050 = vsubq_f32(v1034, v1045);
            v1051 = vmulq_f32(v1043, v1048);
            v1052 = vmulq_f32(vsubq_f32(v1038, *(float32x4_t *)(v970 + v969 + 400)), v1048);
            v996 = vmulq_f32(vsubq_f32(v1040, *(float32x4_t *)(v970 + v969 + 656)), v1048);
            v990 = vmulq_f32(v1042, v1047);
            v1053 = vmulq_f32(vsubq_f32(v1031, *(float32x4_t *)(v970 + v969 + 416)), v1047);
            v1054 = vmulq_f32(v1044, v1047);
            v1009 = vmlaq_f32(v1009, v990, v990);
            v1006 = vmlaq_f32(v1006, v1051, v1051);
            v1011 = vmlaq_f32(v1011, v1053, v1053);
            v1010 = vmlaq_f32(v1010, v1052, v1052);
            v1015 = vmlaq_f32(v1015, v1054, v1054);
            v1012 = vmlaq_f32(v1012, v996, v996);
            v1018 = vmlaq_f32(v1018, v1050, v1050);
            v1017 = vmlaq_f32(v1017, v1049, v1049);
            v969 += 32;
          }
          while (v969 != 256);
          v1055 = (int8x16_t)vmulq_f32(v1331, vpaddq_f32(vpaddq_f32(vaddq_f32(v1006, v1009), vaddq_f32(v1010, v1011)), vpaddq_f32(vaddq_f32(v1012, v1015), vaddq_f32(v1017, v1018))));
          v1056 = fabsf(vaddv_f32(vadd_f32(*(float32x2_t *)v1055.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v1055, v1055, 8uLL))));
          if (v1056 < *a6)
          {
            *(_OWORD *)&STACK[0x11A0] = 0uLL;
            v1057 = *(_OWORD *)&STACK[0xC50];
            *(_OWORD *)&STACK[0x1160] = *(_OWORD *)&STACK[0xC60];
            *(_OWORD *)&STACK[0x1150] = v1057;
            *(_OWORD *)&STACK[0x1180] = 0u;
            *(_OWORD *)&STACK[0x1170] = 0u;
            *(int8x16_t *)&STACK[0x1190] = vandq_s8(*(int8x16_t *)&STACK[0xCB0], (int8x16_t)xmmword_20631C6B0);
            *(unint64_t *)((char *)&STACK[0x1190] + ((DualPartitionBlockInfo_6x5 >> 41) & 0x7F)) = STACK[0xCE0];
            v1058 = DualPartitionBlockInfo_6x5 & 0xE1801FFF | ((v1300 & 0x3FF) << 13) | ((STACK[0xC7C] & 0xF) << 25);
            LODWORD(STACK[0x11A0]) = v1058;
            LOBYTE(STACK[0x11A4]) = BYTE4(DualPartitionBlockInfo_6x5);
            LOBYTE(STACK[0x11A5]) = HIBYTE(DualPartitionBlockInfo_6x5);
            LOBYTE(STACK[0x11A6]) = BYTE5(DualPartitionBlockInfo_6x5);
            v1059 = __clz(__rbit32(v953 + 1));
            LOBYTE(STACK[0x11A7]) = BYTE6(DualPartitionBlockInfo_6x5);
            v1060 = ((v953 + 1) >> v1059);
            v1061 = *(int8x16_t *)&STACK[0x1190];
            if (v1060 == 1)
            {
              v1062 = vandq_s8(v1061, (int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v956), (uint8x16_t)xmmword_2062D8540));
              v1063 = vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)(*(_OWORD *)&v1062 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16((8 - v1059)))), (int8x16_t)(*(_OWORD *)&v1062 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
              v1064.i64[0] = 0xFFFF0000FFFFLL;
              v1064.i64[1] = 0xFFFF0000FFFFLL;
              v1065.i64[0] = 0xFFFF0000FFFF0000;
              v1065.i64[1] = 0xFFFF0000FFFF0000;
              v1066 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8(v1063, v1065), (uint32x4_t)vnegq_s32(vdupq_n_s32(2 * ((8 - (_BYTE)v1059) & 0x7Fu)))), vandq_s8(v1063, v1064));
              v1064.i64[0] = 0xFFFFFFFFLL;
              v1064.i64[1] = 0xFFFFFFFFLL;
              v1067 = vandq_s8(v1066, v1064);
              v1068.i64[0] = 0xFFFFFFFF00000000;
              v1068.i64[1] = 0xFFFFFFFF00000000;
              v1069 = (uint64x2_t)vandq_s8(v1066, v1068);
              *(int32x2_t *)v1068.i8 = vdup_n_s32(4 * ((8 - (_BYTE)v1059) & 0x3Fu));
              v1070.i64[0] = v1068.u32[0];
              v1070.i64[1] = v1068.u32[1];
              v1071 = vorrq_s8((int8x16_t)vshlq_u64(v1069, (uint64x2_t)vnegq_s64(v1070)), v1067);
              v1072 = v1071.u64[1];
              v1073 = 8 * v1059;
              v1074 = (v1071.i64[1] << v1073) | v1071.i64[0];
              v1059 = -v1073;
              goto LABEL_256;
            }
            if (v1059)
            {
              v1075 = vmovl_u8(*(uint8x8_t *)v1061.i8);
              v1076 = vmovl_high_u8((uint8x16_t)v1061);
              v1077 = (uint16x8_t)vdupq_n_s16(v953);
              v1078 = vsubw_u8(v1077, *(uint8x8_t *)v1061.i8);
              v1079 = vsubw_high_u8(v1077, (uint8x16_t)v1061);
              v1080 = (int16x8_t)vminq_u16(v1079, v1076);
              v1081 = (int16x8_t)vminq_u16(v1078, v1075);
              if (v1060 == 3)
                v1082 = 21846;
              else
                v1082 = 13108;
              v1083 = (uint16x8_t)vdupq_n_s16(v1082);
              v1084 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v1081.i8, *(uint16x4_t *)v1083.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v1081, v1083), 0x10uLL);
              v1085 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v1080.i8, *(uint16x4_t *)v1083.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v1080, v1083), 0x10uLL);
              v1086 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((v953 + 1) >> v1059));
              v1087 = (uint16x8_t)vmlsq_s16(v1081, v1084, v1086);
              v1088 = (uint16x8_t)vmlsq_s16(v1080, v1085, v1086);
              v1089 = (uint16x8_t)vdupq_n_s16(v1059);
              v1090 = (int8x16_t)vcgtq_u16(v1075, v1078);
              v1091.i64[0] = 0x1000100010001;
              v1091.i64[1] = 0x1000100010001;
              v1061 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v1087, v1089), vaddq_s16(v1084, v1084)), vandq_s8(v1090, v1091)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v1088, v1089), vaddq_s16(v1085, v1085)), vandq_s8((int8x16_t)vcgtq_u16(v1076, v1079), v1091)));
            }
            v1092 = vandq_s8(v1061, (int8x16_t)vcgtq_u8((uint8x16_t)vdupq_n_s8(v956), (uint8x16_t)xmmword_2062D8540));
            if (v1060 != 5)
            {
              v1093 = 0uLL;
              if (v1060 == 3)
              {
                v1094 = vdupq_n_s8(v1059);
                v1095 = (int8x16_t)vshlq_u8((uint8x16_t)v1092, (uint8x16_t)vnegq_s8(v1094));
                v1096 = vqtbl1q_s8(v1095, (int8x16_t)xmmword_20631C6C0);
                v1097 = (int32x4_t)vqtbl1q_s8(v1095, (int8x16_t)xmmword_20631C6D0);
                v1098 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1096.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1096, v1096, 8uLL), (uint8x8_t)0x8010040180100401));
                v1098.i64[0] = vpaddq_s16(v1098, v1098).u64[0];
                v1099 = (int8x16_t)vmovl_s16(*(int16x4_t *)v1098.i8);
                v1100 = (int8x16_t)vshlq_n_s32(v1097, 5uLL);
                v1096.i64[0] = 0x3000000030;
                v1096.i64[1] = 0x3000000030;
                v1101.i64[0] = 0x2000000020;
                v1101.i64[1] = 0x2000000020;
                v1102 = (int8x16_t)vceqq_s32((int32x4_t)vandq_s8(v1099, v1096), v1101);
                v1103 = (int8x16_t)vaddw_s16((int32x4_t)v1100, *(int16x4_t *)v1098.i8);
                v1101.i64[0] = 0xFF000000FFLL;
                v1101.i64[1] = 0xFF000000FFLL;
                v1104 = (int8x16_t)vcgtq_s32((int32x4_t)v1103, v1101);
                if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v1102, v1104)) & 0x80000000) != 0)
                {
                  v1105.i64[0] = 0x200000002;
                  v1105.i64[1] = 0x200000002;
                  v1106 = (int8x16_t)vceqq_s32(v1097, v1105);
                  v1107 = (int8x16_t)vshrq_n_u32((uint32x4_t)v1099, 2uLL);
                  v1108 = vandq_s8(v1104, v1106);
                  v1109.i64[0] = 0xF0000000FLL;
                  v1109.i64[1] = 0xF0000000FLL;
                  v1110 = vandq_s8(v1099, v1109);
                  v1111.i64[0] = 0x6060606060606060;
                  v1111.i64[1] = 0x6060606060606060;
                  v1112.i64[0] = 0x303030303030303;
                  v1112.i64[1] = 0x303030303030303;
                  v1103 = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v1111, v1100, v1112), v1104), v1103), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v1110), v1102), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v1107, v1109)), v1108))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v1110), vandq_s8(v1108, v1102)));
                }
                v1113 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v1103, (int8x16_t)xmmword_20631CEE0), (int8x16_t)xmmword_20631C780), (uint8x16_t)xmmword_20631C7B0), (uint8x16_t)v1094), vandq_s8(v1092, vdupq_n_s8((1 << v1059) - 1)));
                v1114 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(vshlq_u16((uint16x8_t)(*(_OWORD *)&v1113 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(7 - v1059))), (uint16x8_t)xmmword_20631CEF0), (int16x8_t)(*(_OWORD *)&v1113 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
                v1115.i64[0] = 0xFFFF0000FFFF0000;
                v1115.i64[1] = 0xFFFF0000FFFF0000;
                v1116 = (int8x16_t)vshlq_u32((uint32x4_t)vandq_s8(v1114, v1115), (uint32x4_t)vnegq_s32(vdupq_n_s32(13 - 2 * v1059)));
                v1117.i64[0] = 0xFFFF0000FFFFLL;
                v1117.i64[1] = 0xFFFF0000FFFFLL;
                v1118 = (int8x16_t)vaddq_s32(vaddq_s32((int32x4_t)v1116, (int32x4_t)vandq_s8(v1114, v1117)), (int32x4_t)v1116.u32[0]);
                v1116.i64[0] = 0xFFFFFFFFLL;
                v1116.i64[1] = 0xFFFFFFFFLL;
                v1119 = (int64x2_t)vandq_s8(v1118, v1116);
                v1115.i64[0] = 0xFFFFFFFF00000000;
                v1115.i64[1] = 0xFFFFFFFF00000000;
                v1120 = (uint64x2_t)vandq_s8(v1118, v1115);
                *(int32x2_t *)v1115.i8 = vdup_n_s32(25 - 4 * v1059);
                v1121.i64[0] = v1115.u32[0];
                v1121.i64[1] = v1115.u32[1];
                v1122 = vaddq_s64((int64x2_t)vshlq_u64(v1120, (uint64x2_t)vnegq_s64(v1121)), v1119);
                v1072 = v1122.u64[1];
                v1074 = (v1122.i64[1] << (8 * v1059 + 13)) | v1122.i64[0];
                v1123 = 51;
LABEL_255:
                LOBYTE(v1059) = v1123 - 8 * v1059;
LABEL_256:
                v1093.i64[0] = v1074;
                v1093.i64[1] = v1072 >> v1059;
              }
              *(_OWORD *)&STACK[0xC10] = v1058;
              v1150 = vqtbl1q_s8(v1093, vsubq_s8((int8x16_t)xmmword_2062D8540, vdupq_n_s8(BYTE6(DualPartitionBlockInfo_6x5) >> 3)));
              *(uint64x2_t *)&STACK[0xC00] = vshlq_u64((uint64x2_t)v1150, (uint64x2_t)vdupq_n_s64(HIWORD(DualPartitionBlockInfo_6x5) & 7));
              v1353 = (int8x16_t)vshlq_u64((uint64x2_t)vqtbl1q_s8(v1150, (int8x16_t)xmmword_2062D8550), (uint64x2_t)vdupq_n_s64(HIWORD(DualPartitionBlockInfo_6x5) | 0xFFFFFFFFFFFFFFF8));
              v1151 = BYTE4(DualPartitionBlockInfo_6x5) + 1;
              v1152 = __clz(__rbit32(v1151));
              LOBYTE(STACK[0xD1E]) = v1152;
              LOWORD(STACK[0xD1C]) = BYTE4(DualPartitionBlockInfo_6x5) | (unsigned __int16)(((v1151 >> v1152) & 0x1FF) << 8);
              v1153 = *(_OWORD *)&STACK[0x1160];
              *(_OWORD *)&STACK[0xD20] = *(_OWORD *)&STACK[0x1150];
              *(_OWORD *)&STACK[0xD30] = v1153;
              *(double *)v1154.i64 = PackWeights((unsigned __int8 *)&STACK[0xD1C], (int8x16_t *)&STACK[0xD20]);
              *a5 = vorrq_s8(vorrq_s8(vorrq_s8(*(int8x16_t *)&STACK[0xC00], *(int8x16_t *)&STACK[0xC10]), v1353), v1154);
              *a6 = v1056;
              if (v1056 < a6[1])
                return;
              goto LABEL_258;
            }
            v1124 = vdupq_n_s8(v1059);
            v1125 = (int8x16_t)vshlq_u8((uint8x16_t)v1092, (uint8x16_t)vnegq_s8(v1124));
            v1126 = vqtbl1q_s8(v1125, (int8x16_t)xmmword_20631C640);
            v1127 = (int16x8_t)vqtbl1q_s8(v1125, (int8x16_t)xmmword_20631C650);
            v1128 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v1126.i8, (uint8x8_t)0x2001200120012001), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v1126, v1126, 8uLL), (uint8x8_t)0x2001200120012001));
            v1129.i64[0] = 0x7000700070007;
            v1129.i64[1] = 0x7000700070007;
            v1130 = (int16x8_t)vandq_s8((int8x16_t)v1128, v1129);
            v1131 = (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v1128, 5uLL), v1129);
            v1132.i64[0] = 0x4000400040004;
            v1132.i64[1] = 0x4000400040004;
            v1133 = (int8x16_t)vceqq_s16(v1127, v1132);
            v1134 = (int8x16_t)vceqq_s16(v1131, v1132);
            v1135 = vsubq_s8((int8x16_t)vaddq_s16(v1128, vshlq_n_s16(v1127, 3uLL)), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C660, (int8x16_t)v1130), v1134));
            if ((vmaxvq_u16((uint16x8_t)v1133) & 0x8000) != 0)
            {
              v1136.i64[0] = 0x18001800180018;
              v1136.i64[1] = 0x18001800180018;
              v1135 = vsubq_s8(v1135, vaddq_s8(vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C670, (int8x16_t)v1130), v1133), vandq_s8((int8x16_t)vmulq_s16(v1131, v1136), vandq_s8((int8x16_t)vceqq_s16(v1130, v1132), v1133))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C680, (int8x16_t)v1130), vandq_s8(v1134, v1133))));
            }
            v1137 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v1135, (int8x16_t)xmmword_20631CF00), (int8x16_t)xmmword_20631CF10), (uint8x16_t)xmmword_20631CF20), (uint8x16_t)v1124), vandq_s8(v1092, vdupq_n_s8((1 << v1059) - 1)));
            v1138 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(vshlq_u16((uint16x8_t)(*(_OWORD *)&v1137 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(6 - v1059))), (uint16x8_t)xmmword_20631CF30), (int16x8_t)(*(_OWORD *)&v1137 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
            v1139.i64[0] = 0xFFFF0000FFFFLL;
            v1139.i64[1] = 0xFFFF0000FFFFLL;
            v1140 = (int32x4_t)vandq_s8(v1138, v1139);
            v1141.i64[0] = 0xFFFF0000FFFF0000;
            v1141.i64[1] = 0xFFFF0000FFFF0000;
            v1142 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v1138, v1141), (uint32x4_t)vnegq_s32(vdupq_n_s32(12 - 2 * v1059)));
            v1143 = (int8x16_t)vaddq_s32(v1142, v1140);
            v1142.i32[1] = 0;
            v1144 = (int8x16_t)vaddq_s32((int32x4_t)v1143, v1142);
            v1143.i64[0] = 0xFFFFFFFFLL;
            v1143.i64[1] = 0xFFFFFFFFLL;
            v1145 = (int64x2_t)vandq_s8(v1144, v1143);
            v1141.i64[0] = 0xFFFFFFFF00000000;
            v1141.i64[1] = 0xFFFFFFFF00000000;
            LODWORD(v1146) = 0;
            HIDWORD(v1146) = v1144.i32[1];
            v1147 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v1144, v1141), (int64x2_t)v1146);
            *(int32x2_t *)v1141.i8 = vdup_n_s32(23 - 4 * v1059);
            v1148.i64[0] = v1141.u32[0];
            v1148.i64[1] = v1141.u32[1];
            v1149 = vaddq_s64((int64x2_t)vshlq_u64(v1147, (uint64x2_t)vnegq_s64(v1148)), v1145);
            v1072 = v1149.u64[1];
            v1074 = (v1149.i64[1] << (8 * v1059 + 19)) | v1149.i64[0];
            v1123 = 45;
            goto LABEL_255;
          }
        }
LABEL_258:
        v1155 = 0;
        *(_OWORD *)&STACK[0xD40] = 0u;
        *(_OWORD *)&STACK[0xD50] = 0u;
        *(_OWORD *)&STACK[0xD20] = 0u;
        *(_OWORD *)&STACK[0xD30] = 0u;
        __asm
        {
          FMOV            V0.4S, #0.29688
          FMOV            V1.4S, #0.40625
        }
        v1158 = (float32x4_t)vdupq_n_s32(0x3CC00000u);
        v1159 = (float32x4_t)vdupq_n_s32(0x3E7C0000u);
        __asm { FMOV            V18.4S, #0.16406 }
        v1161 = vmlaq_f32(vmulq_f32(*(float32x4_t *)&STACK[0xFC0], v1158), _Q18, *(float32x4_t *)&STACK[0xFE0]);
        v1162 = vmlaq_f32(vmulq_f32(*(float32x4_t *)&STACK[0xFD0], v1158), _Q18, *(float32x4_t *)&STACK[0xFF0]);
        v1163 = *(float32x4_t *)&STACK[0x1010];
        v1164 = *(float32x4_t *)&STACK[0x1000];
        v1165 = (float32x4_t)vdupq_n_s32(0x3D500000u);
        v1166 = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)&STACK[0xFC0], _Q0), _Q1, *(float32x4_t *)&STACK[0xFC0]), v1159, *(float32x4_t *)&STACK[0xFE0]), v1165, *(float32x4_t *)&STACK[0x1000]);
        *(float32x4_t *)&STACK[0x1160] = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(*(float32x4_t *)&STACK[0xFD0], _Q0), _Q1, *(float32x4_t *)&STACK[0xFD0]), v1159, *(float32x4_t *)&STACK[0xFF0]), v1165, *(float32x4_t *)&STACK[0x1010]);
        *(float32x4_t *)&STACK[0x1150] = v1166;
        v1167 = (float32x4_t)vdupq_n_s32(0x3EC40000u);
        v1168 = vmlaq_f32(v1162, v1167, v1163);
        v1169.i64[0] = 0x3C0000003C000000;
        v1169.i64[1] = 0x3C0000003C000000;
        v1170 = (float32x4_t)vdupq_n_s32(0x3DC80000u);
        v1171 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v1161, v1167, v1164), v1333, *(float32x4_t *)&STACK[0x1020]), v1170, *(float32x4_t *)&STACK[0x1040]);
        v1172 = vmlaq_f32(vmlaq_f32(vmulq_f32(v1163, v1169), v1170, *(float32x4_t *)&STACK[0x1030]), v1333, *(float32x4_t *)&STACK[0x1050]);
        v1173 = vmlaq_f32(vmlaq_f32(vmulq_f32(v1164, v1169), v1170, *(float32x4_t *)&STACK[0x1020]), v1333, *(float32x4_t *)&STACK[0x1040]);
        v1174 = *(float32x4_t *)&STACK[0x1070];
        v1175 = *(float32x4_t *)&STACK[0x1060];
        v1176 = vmlaq_f32(v1171, v1169, *(float32x4_t *)&STACK[0x1060]);
        *(float32x4_t *)&STACK[0x1180] = vmlaq_f32(vmlaq_f32(vmlaq_f32(v1168, v1333, *(float32x4_t *)&STACK[0x1030]), v1170, *(float32x4_t *)&STACK[0x1050]), v1169, *(float32x4_t *)&STACK[0x1070]);
        *(float32x4_t *)&STACK[0x1170] = v1176;
        v1177 = vmlaq_f32(v1173, v1167, v1175);
        v1178 = vmlaq_f32(v1172, v1167, v1174);
        v1179 = vmlaq_f32(vmulq_f32(v1175, v1165), v1159, *(float32x4_t *)&STACK[0x1080]);
        v1180 = vmlaq_f32(vmulq_f32(v1174, v1165), v1159, *(float32x4_t *)&STACK[0x1090]);
        v1181 = *(float32x4_t *)&STACK[0x10B0];
        v1182 = *(float32x4_t *)&STACK[0x10A0];
        v1183 = vmlaq_f32(vmlaq_f32(v1177, _Q18, *(float32x4_t *)&STACK[0x1080]), v1158, *(float32x4_t *)&STACK[0x10A0]);
        *(float32x4_t *)&STACK[0x11A0] = vmlaq_f32(vmlaq_f32(v1178, _Q18, *(float32x4_t *)&STACK[0x1090]), v1158, *(float32x4_t *)&STACK[0x10B0]);
        *(float32x4_t *)&STACK[0x1190] = v1183;
        *(float32x4_t *)&STACK[0x11C0] = vmlaq_f32(vmlaq_f32(v1180, _Q1, v1181), _Q0, v1181);
        *(float32x4_t *)&STACK[0x11B0] = vmlaq_f32(vmlaq_f32(v1179, _Q1, v1182), _Q0, v1182);
        do
        {
          v1184 = (float32x4_t *)(&STACK[0x1150] + 4 * v1155);
          v1185 = (int8x16_t)vpaddq_f32(vpaddq_f32(vmulq_f32(*v1184, (float32x4_t)xmmword_20631CF70), vmulq_f32(v1184[1], (float32x4_t)xmmword_20631CF60)), vpaddq_f32(vpaddq_f32(vmulq_f32(*v1184, (float32x4_t)xmmword_20631CC40), vmulq_f32(v1184[1], (float32x4_t)xmmword_20631CC30)), vpaddq_f32(vmulq_f32(*v1184, (float32x4_t)xmmword_20631CC60), vmulq_f32(v1184[1], (float32x4_t)xmmword_20631CC50))));
          *((int32x4_t *)&STACK[0xD20] + v1155++) = vuzp1q_s32((int32x4_t)v1185, (int32x4_t)vextq_s8(v1185, v1185, 0xCuLL));
        }
        while (v1155 != 4);
        v1186 = GetDualPartitionBlockInfo((v631 >> 2) & 0x3FFFFFF, 16 - 4 * *(char *)(a1 + 136));
        LODWORD(STACK[0xC50]) = (v1186 >> 25) & 0xF;
        v405 = (float32x4_t *)pC4;
        if (!FindQuantizedColors(HIBYTE(v1186), (uint64_t)&STACK[0xC90], (unsigned int *)&STACK[0xC50], (float32x4_t *)&STACK[0xD20], 0x10uLL, v1340, v1336, v1338))
        {
          v1187 = (float)BYTE4(v1186);
          STACK[0xC80] = (unint64_t)&STACK[0xEC0];
          v1188 = vrecpes_f32(v1187);
          v1189 = 0.0;
          if (BYTE4(v1186))
            v1189 = v1188;
          v1190 = *(float32x4_t **)(a2 + 32);
          v1191 = (int32x4_t)v1299;
          if (v1190)
          {
            __asm { FMOV            V3.4S, #3.0 }
            v1191 = (int32x4_t)vmulq_f32(*v1190, _Q3);
          }
          v1193 = vmulq_n_f32(*(float32x4_t *)&STACK[0xD50], v1187);
          v1194 = vmulq_n_f32(*(float32x4_t *)&STACK[0xD40], v1187);
          v1195 = vrndxq_f32(vmulq_n_f32(*(float32x4_t *)&STACK[0xD20], v1187));
          v1196 = vrndxq_f32(vmulq_n_f32(*(float32x4_t *)&STACK[0xD30], v1187));
          v1197 = vrndxq_f32(v1194);
          v1198 = vrndxq_f32(v1193);
          v1325 = vuzp1q_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v1195), (int16x8_t)vcvtq_s32_f32(v1196)), (int8x16_t)vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v1197), (int16x8_t)vcvtq_s32_f32(v1198)));
          v1199 = (int8x16_t)vmulq_n_f32(v1196, v1189);
          v1200 = (int8x16_t)vmulq_n_f32(v1195, v1189);
          v1201 = (int8x16_t)vmulq_n_f32(v1197, v1189);
          v1202 = (int8x16_t)vmulq_n_f32(v1198, v1189);
          v1349 = *(int32x4_t *)&STACK[0xC90];
          v1344 = (int32x4_t)vaddq_f32(*(float32x4_t *)&STACK[0xC90], *(float32x4_t *)&STACK[0xCA0]);
          v1339 = *(int32x4_t *)&STACK[0xCC0];
          v1337 = (int32x4_t)vaddq_f32(*(float32x4_t *)&STACK[0xCC0], *(float32x4_t *)&STACK[0xCD0]);
          v1203 = a2;
          do
          {
            v1204 = v1203;
            v1203 = *(_QWORD *)(v1203 + 40);
          }
          while (v1203);
          v1205 = (float32x4_t)vzip1q_s32((int32x4_t)v1200, (int32x4_t)v1200);
          v1205.i32[2] = v1200.i32[0];
          v1206 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8(v1200, v1200, 0xCuLL), (int32x4_t)v1200);
          v1207 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1200.i8, 1);
          v1208 = (float32x4_t)vextq_s8(v1200, (int8x16_t)vdupq_laneq_s32((int32x4_t)v1200, 3), 8uLL);
          v1207.i32[3] = v1200.i32[2];
          *(_OWORD *)&STACK[0xC10] = xmmword_20631C470;
          *(_OWORD *)&STACK[0xC00] = xmmword_20631C480;
          v1209 = (float32x4_t)vdupq_n_s32(0x3D800000u);
          v1210 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8(v1199, v1199, 0xCuLL), (int32x4_t)v1199);
          *(float32x4_t *)&STACK[0x1160] = vmulq_f32(vmlaq_f32(vmulq_f32(v1208, (float32x4_t)xmmword_20631C480), (float32x4_t)xmmword_20631C490, v1206), v1209);
          *(float32x4_t *)&STACK[0x1150] = vmulq_f32(vmlaq_f32(vmulq_f32(v1207, (float32x4_t)xmmword_20631C470), (float32x4_t)xmmword_20631C4A0, v1205), v1209);
          v1211 = (float32x4_t)vzip1q_s32((int32x4_t)v1199, (int32x4_t)v1199);
          v1211.i32[2] = v1199.i32[0];
          v1212 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1199.i8, 1);
          v1212.i32[3] = v1199.i32[2];
          v1213 = (float32x4_t)vextq_s8(v1199, (int8x16_t)vdupq_laneq_s32((int32x4_t)v1199, 3), 8uLL);
          *(float32x4_t *)&STACK[0x1180] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1208, (float32x4_t)xmmword_20631C4C0), (float32x4_t)xmmword_20631C4D0, v1206), (float32x4_t)xmmword_20631C500, v1210), (float32x4_t)xmmword_20631C510, v1213), v1209);
          *(float32x4_t *)&STACK[0x1170] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1207, (float32x4_t)xmmword_20631C4B0), (float32x4_t)xmmword_20631C4E0, v1205), (float32x4_t)xmmword_20631C4F0, v1211), (float32x4_t)xmmword_20631C520, v1212), v1209);
          *(float32x4_t *)&STACK[0x11A0] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1208, (float32x4_t)xmmword_20631C540), (float32x4_t)xmmword_20631C550, v1206), (float32x4_t)xmmword_20631C580, v1210), (float32x4_t)xmmword_20631C590, v1213), v1209);
          *(float32x4_t *)&STACK[0x1190] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1207, (float32x4_t)xmmword_20631C530), (float32x4_t)xmmword_20631C560, v1205), (float32x4_t)xmmword_20631C570, v1211), (float32x4_t)xmmword_20631C5A0, v1212), v1209);
          v1214 = vmlaq_f32(vmulq_f32(v1212, (float32x4_t)xmmword_20631C5B0), (float32x4_t)xmmword_20631C5E0, v1211);
          v1215 = vmlaq_f32(vmulq_f32(v1212, (float32x4_t)xmmword_20631C620), (float32x4_t)xmmword_20631C5F0, v1211);
          v1216 = (float32x4_t)vzip1q_s32((int32x4_t)v1201, (int32x4_t)v1201);
          v1216.i32[2] = v1201.i32[0];
          v1217 = vmlaq_f32(vmulq_f32(v1213, (float32x4_t)xmmword_20631C5C0), (float32x4_t)xmmword_20631C5D0, v1210);
          v1218 = vmlaq_f32(vmulq_f32(v1213, (float32x4_t)xmmword_20631C610), (float32x4_t)xmmword_20631C600, v1210);
          v1219 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8(v1201, v1201, 0xCuLL), (int32x4_t)v1201);
          v1220 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1201.i8, 1);
          v1220.i32[3] = v1201.i32[2];
          v1221 = (float32x4_t)vextq_s8(v1201, (int8x16_t)vdupq_laneq_s32((int32x4_t)v1201, 3), 8uLL);
          *(float32x4_t *)&STACK[0x11C0] = vmulq_f32(vmlaq_f32(vmlaq_f32(v1217, (float32x4_t)xmmword_20631C600, v1219), (float32x4_t)xmmword_20631C610, v1221), v1209);
          *(float32x4_t *)&STACK[0x11B0] = vmulq_f32(vmlaq_f32(vmlaq_f32(v1214, (float32x4_t)xmmword_20631C5F0, v1216), (float32x4_t)xmmword_20631C620, v1220), v1209);
          *(float32x4_t *)&STACK[0x11E0] = vmulq_f32(vmlaq_f32(vmlaq_f32(v1218, (float32x4_t)xmmword_20631C5D0, v1219), (float32x4_t)xmmword_20631C5C0, v1221), v1209);
          *(float32x4_t *)&STACK[0x11D0] = vmulq_f32(vmlaq_f32(vmlaq_f32(v1215, (float32x4_t)xmmword_20631C5E0, v1216), (float32x4_t)xmmword_20631C5B0, v1220), v1209);
          v1222 = (float32x4_t)vzip1q_s32((int32x4_t)v1202, (int32x4_t)v1202);
          v1222.i32[2] = v1202.i32[0];
          v1223 = (float32x4_t)vzip2q_s32((int32x4_t)vextq_s8(v1202, v1202, 0xCuLL), (int32x4_t)v1202);
          v1224 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1202.i8, 1);
          v1224.i32[3] = v1202.i32[2];
          v1225 = (float32x4_t)vextq_s8(v1202, (int8x16_t)vdupq_laneq_s32((int32x4_t)v1202, 3), 8uLL);
          *(float32x4_t *)&STACK[0x1200] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1221, (float32x4_t)xmmword_20631C590), (float32x4_t)xmmword_20631C580, v1219), (float32x4_t)xmmword_20631C550, v1223), (float32x4_t)xmmword_20631C540, v1225), v1209);
          *(float32x4_t *)&STACK[0x11F0] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1220, (float32x4_t)xmmword_20631C5A0), (float32x4_t)xmmword_20631C570, v1216), (float32x4_t)xmmword_20631C560, v1222), (float32x4_t)xmmword_20631C530, v1224), v1209);
          *(float32x4_t *)&STACK[0x1220] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1221, (float32x4_t)xmmword_20631C510), (float32x4_t)xmmword_20631C500, v1219), (float32x4_t)xmmword_20631C4D0, v1223), (float32x4_t)xmmword_20631C4C0, v1225), v1209);
          *(float32x4_t *)&STACK[0x1210] = vmulq_f32(vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_f32(v1220, (float32x4_t)xmmword_20631C520), (float32x4_t)xmmword_20631C4F0, v1216), (float32x4_t)xmmword_20631C4E0, v1222), (float32x4_t)xmmword_20631C4B0, v1224), v1209);
          v1226 = vmulq_f32(v1224, *(float32x4_t *)&STACK[0xC10]);
          v1227 = vmlaq_f32(vmulq_f32(v1225, *(float32x4_t *)&STACK[0xC00]), (float32x4_t)xmmword_20631C490, v1223);
          *(int32x4_t *)&STACK[0xC10] = vdupq_lane_s32(*(int32x2_t *)v1349.i8, 0);
          *(int32x4_t *)&STACK[0xC00] = vdupq_lane_s32(*(int32x2_t *)v1339.i8, 0);
          v1354 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1344.i8, 0);
          v1228 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1337.i8, 0);
          v1229 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1349.i8, 1);
          v1230 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1339.i8, 1);
          v1231 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1344.i8, 1);
          v1232 = (int8x16_t)vdupq_lane_s32(*(int32x2_t *)v1337.i8, 1);
          v1233 = vmulq_f32(vmlaq_f32(v1226, (float32x4_t)xmmword_20631C4A0, v1222), v1209);
          v1234 = (int8x16_t)vdupq_laneq_s32(v1349, 2);
          v1235 = (int8x16_t)vdupq_laneq_s32(v1339, 2);
          v1236 = (int8x16_t)vdupq_laneq_s32(v1344, 2);
          v1237 = (int8x16_t)vdupq_laneq_s32(v1337, 2);
          v1238 = (int8x16_t)vdupq_laneq_s32(v1349, 3);
          v1239 = (int8x16_t)vdupq_laneq_s32(v1339, 3);
          v1240 = (int8x16_t)vdupq_laneq_s32(v1344, 3);
          *(float32x4_t *)&STACK[0x1240] = vmulq_f32(v1227, v1209);
          *(float32x4_t *)&STACK[0x1230] = v1233;
          v1241 = (int8x16_t)vdupq_laneq_s32(v1337, 3);
          v1242 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v1191.i8, 0);
          v1243 = (float32x4_t)vdupq_laneq_s32(v1191, 2);
          v1244 = (float32x4_t)vdupq_laneq_s32(v1191, 3);
          v1245 = 0uLL;
          v1246 = 0uLL;
          v39.i64[0] = v1191.i64[0];
          do
          {
            v1233.i32[0] = 0;
            v1219.i32[0] = *(unsigned __int8 *)(a2 + 135);
            v1247 = (int8x8_t)vceqq_s8((int8x16_t)v1219, (int8x16_t)v1233).u64[0];
            __asm { FMOV            V31.4S, #1.0 }
            v1249 = vdupq_lane_s8(v1247, 0);
            v1250 = (int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v1203 + 16));
            v1251 = (int8x16_t)vcltzq_s32(*(int32x4_t *)((char *)&STACK[0xEC0] + v1203));
            v1252 = (float32x4_t)vbslq_s8(v1251, *(int8x16_t *)&STACK[0xC00], *(int8x16_t *)&STACK[0xC10]);
            v1253 = (float32x4_t)vbslq_s8(v1250, *(int8x16_t *)&STACK[0xC00], *(int8x16_t *)&STACK[0xC10]);
            v1254 = (float32x4_t)vbslq_s8(v1250, v1230, v1229);
            v1255 = (float32x4_t)vbslq_s8(v1251, v1230, v1229);
            v1257 = *(float32x4_t *)((char *)&STACK[0x1150] + v1203);
            v1256 = *(float32x4_t *)((char *)&STACK[0x1150] + v1203 + 16);
            v1258 = vmlaq_f32(v1253, v1256, vsubq_f32((float32x4_t)vbslq_s8(v1250, v1228, v1354), v1253));
            v1259 = (float32x4_t)vbslq_s8(v1250, v1235, v1234);
            v1260 = vmlaq_f32(v1254, v1256, vsubq_f32((float32x4_t)vbslq_s8(v1250, v1232, v1231), v1254));
            v1261 = vmlaq_f32(v1259, v1256, vsubq_f32((float32x4_t)vbslq_s8(v1250, v1237, v1236), v1259));
            v1262 = (float32x4_t)vbslq_s8(v1250, v1239, v1238);
            v1263 = vmlaq_f32(v1262, v1256, vsubq_f32((float32x4_t)vbslq_s8(v1250, v1241, v1240), v1262));
            v1264 = (float32x4_t)vbslq_s8(v1251, v1235, v1234);
            v1265 = vmlaq_f32(v1252, v1257, vsubq_f32((float32x4_t)vbslq_s8(v1251, v1228, v1354), v1252));
            v1266 = vmlaq_f32(v1255, v1257, vsubq_f32((float32x4_t)vbslq_s8(v1251, v1232, v1231), v1255));
            v1267 = (float32x4_t)vbslq_s8(v1251, v1239, v1238);
            v1268 = vmlaq_f32(v1264, v1257, vsubq_f32((float32x4_t)vbslq_s8(v1251, v1237, v1236), v1264));
            v1269 = vmlaq_f32(v1267, v1257, vsubq_f32((float32x4_t)vbslq_s8(v1251, v1241, v1240), v1267));
            v1270 = *(float32x4_t *)(v1204 + v1203 + 912);
            v1271 = *(float32x4_t *)(v1204 + v1203 + 928);
            v1272 = (float32x4_t)vbslq_s8(v1249, _Q31, (int8x16_t)v1271);
            v1273 = (float32x4_t)vbslq_s8(v1249, _Q31, (int8x16_t)v1270);
            v1274 = vsubq_f32(v1269, v1270);
            v1275 = vmulq_f32(vsubq_f32(v1258, *(float32x4_t *)(v1204 + v1203 + 160)), v1272);
            v1276 = vmulq_f32(vsubq_f32(v1260, *(float32x4_t *)(v1204 + v1203 + 416)), v1272);
            v1277 = vmulq_f32(vsubq_f32(v1261, *(float32x4_t *)(v1204 + v1203 + 672)), v1272);
            v1278 = vmulq_f32(vsubq_f32(v1265, *(float32x4_t *)(v1204 + v1203 + 144)), v1273);
            v1279 = vmulq_f32(vsubq_f32(v1266, *(float32x4_t *)(v1204 + v1203 + 400)), v1273);
            v1280 = vmulq_f32(vsubq_f32(v1268, *(float32x4_t *)(v1204 + v1203 + 656)), v1273);
            v1219 = vmulq_f32(v1275, v1275);
            v1281 = vsubq_f32(v1263, v1271);
            v38 = vmulq_f32(v1277, v1277);
            v1282 = vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vmulq_f32(v1279, v1279), *(float32x2_t *)v39.f32, 1), vmulq_f32(v1278, v1278), v1242), vmulq_f32(v1280, v1280), v1243);
            v1233 = vmulq_f32(v1274, v1274);
            v1246 = vaddq_f32(v1246, vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_lane_f32(vmulq_f32(v1276, v1276), *(float32x2_t *)v39.f32, 1), v1219, v1242), v38, v1243), vmulq_f32(v1281, v1281), v1244));
            v1245 = vaddq_f32(v1245, vmlaq_f32(v1282, v1233, v1244));
            v1203 += 32;
          }
          while (v1203 != 256);
          v1283 = vaddq_f32(v1245, v1246);
          v1283.i64[0] = vpaddq_f32(v1283, v1283).u64[0];
          v1284 = fabsf(vpadd_f32(*(float32x2_t *)v1283.f32, *(float32x2_t *)v1283.f32).f32[0]);
          if (v1284 < *a6)
          {
            *(_OWORD *)&STACK[0x1180] = 0uLL;
            *(int8x16_t *)&STACK[0x1150] = v1325;
            *(_OWORD *)&STACK[0x1160] = 0u;
            *(int8x16_t *)&STACK[0x1170] = vandq_s8(*(int8x16_t *)&STACK[0xCB0], (int8x16_t)xmmword_20631C6B0);
            *(unint64_t *)((char *)&STACK[0x1170] + ((v1186 >> 41) & 0x7F)) = STACK[0xCE0];
            LODWORD(STACK[0x1180]) = v1186 & 0xE1801FFF | ((v1300 & 0x3FF) << 13) | ((STACK[0xC50] & 0xF) << 25);
            LOBYTE(STACK[0x1184]) = BYTE4(v1186);
            LOBYTE(STACK[0x1185]) = HIBYTE(v1186);
            LOBYTE(STACK[0x1186]) = BYTE5(v1186);
            LOBYTE(STACK[0x1187]) = BYTE6(v1186);
            *(double *)v1285.i64 = PackDualBlock_4x4((int8x16_t *)&STACK[0x1150]);
            *a5 = v1285;
            *a6 = v1284;
            if (v1284 < a6[1])
              return;
          }
        }
        v400 = v1297;
        _Q31 = v1299;
        v402 = 0uLL;
        v403 = (float32x4_t *)pC4;
        v404 = (float32x4_t *)pC4;
        v406 = v1340;
        v467 = v1295;
        v466 = v1296;
        v469 = v1293;
        v468 = v1294;
LABEL_272:
        ++v465;
      }
      while (v465 != 4);
      ++v400;
    }
    while (v400 != v1286);
  }
}

uint64_t PrintColorVector(unsigned int a1, int a2, uint8x8_t a3)
{
  unsigned int v6;
  uint64_t v7;
  int16x8_t v8;
  uint16x8_t v9;
  unsigned int v10;
  int8x16_t v11;
  int16x8_t v12;
  int16x8_t v13;
  uint64_t v14;
  unint64_t v15;
  int16x8_t v16;
  int16x8_t v17;
  int16x8_t v18;
  int8x16_t v19;
  uint16x8_t v20;
  int16x8_t v21;
  uint64_t result;
  int8x8_t v23;
  int8x16_t v24;
  int16x4_t v25;
  int8x16_t v26;
  uint16x4_t v27;
  int8x16_t v28;

  printf("PrintColorVector(v, maxVal: %u, cem: %u)\n", a1, a2);
  v6 = __clz(__rbit32(a1 + 1));
  v7 = ((a1 + 1) >> v6);
  v8 = (int16x8_t)vmovl_u8(a3);
  if (v6 && (_DWORD)v7 != 1)
  {
    v9 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a1), v8);
    if ((_DWORD)v7 == 3)
      v10 = 21846;
    else
      v10 = 13108;
    v11 = (int8x16_t)vdupq_n_s16(v10);
    v12 = (int16x8_t)vminq_u16((uint16x8_t)v8, v9);
    v13 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v12.i8, *(uint16x4_t *)v11.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v12, (uint16x8_t)v11), 0x10uLL);
    v11.i64[0] = 0x1000100010001;
    v11.i64[1] = 0x1000100010001;
    v8 = (int16x8_t)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v12, v13, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((a1 + 1) >> v6))), (uint16x8_t)vdupq_n_s16(v6)), vaddq_s16(v13, v13)), vbicq_s8(v11, (int8x16_t)vceqq_s16(v12, v8)));
  }
  v14 = v7 - 6;
  if ((_DWORD)v7 == 1)
    v14 = -8;
  v15 = GetUnquantizationData_UnquantizationInfo[3 * v6 + v14];
  v16 = (int16x8_t)vshlq_u16((uint16x8_t)v8, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v15) & 7)));
  v17 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v15)), (int8x16_t)v8);
  v18 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v17, 1uLL), vdupq_n_s16((v15 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v15 >> 37) & 7)));
  v19 = vandq_s8((int8x16_t)vdupq_n_s16((v15 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v17, 0xFuLL)));
  v20 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v18, v16, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v15 >> 40))), v19);
  v18.i64[0] = 0x80008000800080;
  v18.i64[1] = 0x80008000800080;
  v21 = (int16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v20, 2uLL), vandq_s8(v19, (int8x16_t)v18));
  switch(a2)
  {
    case 8:
    case 12:
      v27 = (uint16x4_t)vqtbl1q_s8((int8x16_t)v21, (int8x16_t)xmmword_20631C400).u64[0];
      printf("{0x%2.2x, 0x%2.2x, 0x%2.2x, 0x%2.2x} -> {0x%2.2x, 0x%2.2x, 0x%2.2x, 0x%2.2x}\n", v21.u16[0], v21.u16[2], v21.u16[4], v21.u16[6], v21.u16[1], v21.u16[3], v21.u16[5], v21.u16[7]);
      result = printf("{%f, %f, %f, %f} -> {%f, %f, %f, %f} ± %f\n", vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(v27), (int8x16_t)vdupq_n_s32(0x4B400000u)), (float32x4_t)vdupq_n_s32(0xCB400000)), (float32x4_t)vdupq_n_s32(0x3B808081u)).f32[0]);
      break;
    case 9:
      v21.i32[3] = 8388863;
      goto LABEL_12;
    case 13:
LABEL_12:
      v23 = vmovn_s16(v21);
      v24.i64[0] = 0x40000000400000;
      v24.i64[1] = 0x40000000400000;
      v26 = (int8x16_t)vsubq_s16((int16x8_t)vmovl_u8((uint8x8_t)(*(_QWORD *)&vorr_s8(vrev16_s8(vand_s8(v23, (int8x8_t)0x8000800080008000)), (int8x8_t)vshr_n_u8((uint8x8_t)v23, 1uLL)) & 0x3FFF3FFF3FFF3FFFLL)), (int16x8_t)vandq_s8((int8x16_t)v21, v24));
      v28 = vqtbl1q_s8(v26, (int8x16_t)xmmword_20631C400);
      printf("after bit_transfer_signed: {0x%2.2x, 0x%2.2x, 0x%2.2x, 0x%2.2x} + {%d, %d, %d, %d}\n", v26.u8[0], v26.u8[4], v26.u8[8], v26.u8[12], v26.i8[2], v26.i8[6], v26.i8[10], v26.i8[14]);
      v25 = vadd_s16((int16x4_t)*(_OWORD *)&vextq_s8(v28, v28, 8uLL), *(int16x4_t *)v28.i8);
      printf("{0x%2.2x, 0x%2.2x, 0x%2.2x, 0x%2.2x} -> {0x%2.2x, 0x%2.2x, 0x%2.2x, 0x%2.2x}\n", v26.u8[0], v26.u8[4], v26.u8[8], v26.u8[12], v25.i16[0], v25.i16[1], v25.i16[2], v25.i16[3]);
      result = printf("{%f, %f, %f, %f} -> {%f, %f, %f, %f} ± %f\n", vmulq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v28.i8), (int8x16_t)vdupq_n_s32(0x4B400000u)), (float32x4_t)vdupq_n_s32(0xCB400000)), (float32x4_t)vdupq_n_s32(0x3B808081u)).f32[0]);
      break;
    default:
      result = printf("cem %u not handled\n");
      break;
  }
  return result;
}

float32_t CheckForReducedColorFidelity(unint64_t *a1, int a2, int a3, float32x4_t *a4, _BYTE *a5, _DWORD *a6, float *a7, float32x4_t a8)
{
  unint64_t v8;
  unint64_t v13;
  float32x2_t v14;
  unint64_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x2_t v23;
  unsigned int v24;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;

  v8 = *a1;
  if ((*a1 & 0x1F000000000000) != 0)
  {
    if (a3 == 2)
    {
      v27 = a4[1];
      v28 = a8;
      v26 = *a4;
      v13 = WeightInfoForSingleLineDualWeight(0, BYTE5(v8), a2);
    }
    else
    {
      if (a3 != 1)
        return a8.f32[0];
      v27 = a4[1];
      v28 = a8;
      v26 = *a4;
      v13 = WeightInfoForSingleLineSingleWeight(0, BYTE5(v8), a2);
    }
    v15 = *((unsigned __int8 *)a1 + 4);
    if (BYTE4(v13) != (_DWORD)v15)
    {
      v14.f32[0] = ReciprocalTable[v15];
      a8 = vmulq_n_f32(v26, (float)BYTE4(v13));
      v16 = vrndxq_f32(a8);
      a8.f32[0] = ReciprocalTable[BYTE4(v13)];
      v17 = vmlsq_lane_f32(v27, vrndxq_f32(vmulq_n_f32(v27, (float)v15)), v14, 0);
      v18 = vmlsq_lane_f32(v26, vrndxq_f32(vmulq_n_f32(v26, (float)v15)), v14, 0);
      v19 = vmlsq_lane_f32(v27, vrndxq_f32(vmulq_n_f32(v27, (float)BYTE4(v13))), *(float32x2_t *)a8.f32, 0);
      v20 = vmlsq_lane_f32(v26, v16, *(float32x2_t *)a8.f32, 0);
      v21 = vmlaq_f32(vmulq_f32(v28, vmulq_f32(v17, v17)), vmulq_f32(v18, v18), v28);
      v18.i64[0] = vpaddq_f32(v21, v21).u64[0];
      *(float32x2_t *)v21.f32 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
      v22 = vmlaq_f32(vmulq_f32(v28, vmulq_f32(v19, v19)), vmulq_f32(v20, v20), v28);
      v18.i64[0] = vpaddq_f32(v22, v22).u64[0];
      v23 = vpadd_f32(*(float32x2_t *)v18.f32, *(float32x2_t *)v18.f32);
      if ((vcgt_f32(v23, *(float32x2_t *)v21.f32).u8[0] & 1) == 0 || v23.f32[0] <= 0.000015259)
      {
        *a1 = v13;
        *a5 = BYTE4(v13);
        *a6 = a8.i32[0];
        v24 = *a5;
        if (v24 <= 1)
          v24 = 1;
        a8.f32[0] = (float)v24;
        *a7 = (float)v24;
      }
    }
  }
  return a8.f32[0];
}

double PackWeights(unsigned __int8 *a1, int8x16_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned __int128 v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64x2_t v9;
  int64x2_t v10;
  int8x16_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  int16x8_t v21;
  unsigned int v22;
  uint16x8_t v23;
  int16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint16x8_t v28;
  uint16x8_t v29;
  uint16x8_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int16x8_t v37;
  int16x8_t v38;
  int16x8_t v39;
  int16x8_t v40;
  int16x8_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int16x8_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int32x4_t v49;
  int8x16_t v50;
  int32x4_t v51;
  int32x4_t v52;
  int8x16_t v53;
  int64x2_t v54;
  unint64_t v55;
  uint64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  char v59;
  char v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int32x4_t v64;
  int16x8_t v65;
  int8x16_t v66;
  int32x4_t v67;
  int32x4_t v68;
  int8x16_t v69;
  int32x4_t v70;
  int8x16_t v71;
  int32x4_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  int8x16_t v82;
  int32x4_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int64x2_t v87;
  uint64x2_t v88;
  int64x2_t v89;
  int64x2_t v90;
  double result;

  v2 = a1[1];
  v3 = a1[2];
  if (v2 == 1)
  {
    v4 = *(_OWORD *)&a2 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
    a2.i32[0] &= 0xFF00FF00;
    a2.i16[2] &= 0xFF00u;
    a2.i16[3] &= 0xFF00u;
    a2.i16[4] &= 0xFF00u;
    a2.i16[5] &= 0xFF00u;
    a2.i16[6] &= 0xFF00u;
    a2.i16[7] &= 0xFF00u;
    v5 = vorrq_s8((int8x16_t)vshlq_u16((uint16x8_t)a2, (uint16x8_t)vnegq_s16(vdupq_n_s16((8 - v3)))), (int8x16_t)v4);
    *(_QWORD *)&v4 = 0xFFFF0000FFFFLL;
    *((_QWORD *)&v4 + 1) = 0xFFFF0000FFFFLL;
    v6.i64[0] = 0xFFFF0000FFFF0000;
    v6.i64[1] = 0xFFFF0000FFFF0000;
    v7 = vorrq_s8((int8x16_t)vshlq_u32((uint32x4_t)vandq_s8(v5, v6), (uint32x4_t)vnegq_s32(vdupq_n_s32(2 * ((8 - (_BYTE)v3) & 0x7Fu)))), vandq_s8(v5, (int8x16_t)v4));
    *(_QWORD *)&v4 = 0xFFFFFFFFLL;
    *((_QWORD *)&v4 + 1) = 0xFFFFFFFFLL;
    v8 = vandq_s8(v7, (int8x16_t)v4);
    v6.i64[0] = 0xFFFFFFFF00000000;
    v6.i64[1] = 0xFFFFFFFF00000000;
    v9 = (uint64x2_t)vandq_s8(v7, v6);
    *(int32x2_t *)v6.i8 = vdup_n_s32(4 * ((8 - (_BYTE)v3) & 0x3Fu));
    v10.i64[0] = v6.u32[0];
    v10.i64[1] = v6.u32[1];
    v11 = vorrq_s8((int8x16_t)vshlq_u64(v9, (uint64x2_t)vnegq_s64(v10)), v8);
    v12 = v11.u64[1];
    v13 = 8 * v3;
    v14 = (v11.i64[1] << v13) | v11.i64[0];
    v15 = -v13;
LABEL_17:
    v33.i64[0] = v14;
    v33.i64[1] = v12 >> v15;
    goto LABEL_18;
  }
  if (a1[2])
  {
    v16 = vmovl_u8(*(uint8x8_t *)a2.i8);
    v17 = vmovl_high_u8((uint8x16_t)a2);
    v18 = (uint16x8_t)vdupq_n_s16(*a1);
    v19 = vsubw_u8(v18, *(uint8x8_t *)a2.i8);
    v20 = vsubw_high_u8(v18, (uint8x16_t)a2);
    v21 = (int16x8_t)vminq_u16(v20, v17);
    if (v2 == 3)
      v22 = 21846;
    else
      v22 = 13108;
    v23 = (uint16x8_t)vdupq_n_s16(v22);
    v24 = (int16x8_t)vminq_u16(v19, v16);
    v25 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v24.i8, *(uint16x4_t *)v23.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v24, v23), 0x10uLL);
    v26 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v21.i8, *(uint16x4_t *)v23.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v21, v23), 0x10uLL);
    v27 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v2));
    v28 = (uint16x8_t)vmlsq_s16(v24, v25, v27);
    v29 = (uint16x8_t)vmlsq_s16(v21, v26, v27);
    v30 = (uint16x8_t)vdupq_n_s16(v3);
    v31 = (int8x16_t)vcgtq_u16(v16, v19);
    v32.i64[0] = 0x1000100010001;
    v32.i64[1] = 0x1000100010001;
    a2 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v28, v30), vaddq_s16(v25, v25)), vandq_s8(v31, v32)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v29, v30), vaddq_s16(v26, v26)), vandq_s8((int8x16_t)vcgtq_u16(v17, v20), v32)));
  }
  if (v2 == 3)
  {
    v61 = vdupq_n_s8(v3);
    v62 = (int8x16_t)vshlq_u8((uint8x16_t)a2, (uint8x16_t)vnegq_s8(v61));
    v63 = vqtbl1q_s8(v62, (int8x16_t)xmmword_20631C6C0);
    v64 = (int32x4_t)vqtbl1q_s8(v62, (int8x16_t)xmmword_20631C6D0);
    v65 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v63.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v63, v63, 8uLL), (uint8x8_t)0x8010040180100401));
    v65.i64[0] = vpaddq_s16(v65, v65).u64[0];
    v66 = (int8x16_t)vmovl_s16(*(int16x4_t *)v65.i8);
    v67 = vshlq_n_s32(v64, 5uLL);
    v63.i64[0] = 0x3000000030;
    v63.i64[1] = 0x3000000030;
    v68.i64[0] = 0x2000000020;
    v68.i64[1] = 0x2000000020;
    v69 = (int8x16_t)vceqq_s32((int32x4_t)vandq_s8(v66, v63), v68);
    v70 = vaddw_s16(v67, *(int16x4_t *)v65.i8);
    v68.i64[0] = 0xFF000000FFLL;
    v68.i64[1] = 0xFF000000FFLL;
    v71 = (int8x16_t)vcgtq_s32(v70, v68);
    if ((vmaxvq_u32((uint32x4_t)vorrq_s8(v69, v71)) & 0x80000000) != 0)
    {
      v72.i64[0] = 0x200000002;
      v72.i64[1] = 0x200000002;
      v73 = (int8x16_t)vceqq_s32(v64, v72);
      v74 = (int8x16_t)vshrq_n_u32((uint32x4_t)v66, 2uLL);
      v75 = vandq_s8(v71, v73);
      v76.i64[0] = 0xF0000000FLL;
      v76.i64[1] = 0xF0000000FLL;
      v77 = vandq_s8(v66, v76);
      v78.i64[0] = 0x303030303030303;
      v78.i64[1] = 0x303030303030303;
      v79.i64[0] = 0x6060606060606060;
      v79.i64[1] = 0x6060606060606060;
      v70 = (int32x4_t)vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(vmlaq_s8(v79, (int8x16_t)v67, v78), v71), (int8x16_t)v70), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v77), v69), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8(v74, v76)), v75))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v77), vandq_s8(v75, v69)));
    }
    v80 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8((int8x16_t)v70, (int8x16_t)xmmword_20631CEE0), (int8x16_t)xmmword_20631C780), (uint8x16_t)xmmword_20631C7B0), (uint8x16_t)v61), vandq_s8(vdupq_n_s8((1 << v3) - 1), a2));
    v81 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(vshlq_u16((uint16x8_t)(*(_OWORD *)&v80 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(7 - v3))), (uint16x8_t)xmmword_20631CEF0), (int16x8_t)(*(_OWORD *)&v80 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
    v82.i64[0] = 0xFFFF0000FFFFLL;
    v82.i64[1] = 0xFFFF0000FFFFLL;
    v83 = (int32x4_t)vandq_s8(v81, v82);
    v84.i64[0] = 0xFFFF0000FFFF0000;
    v84.i64[1] = 0xFFFF0000FFFF0000;
    v85 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v81, v84), (uint32x4_t)vnegq_s32(vdupq_n_s32(13 - 2 * v3)));
    v86 = (int8x16_t)vaddq_s32(vaddq_s32(v85, v83), (int32x4_t)v85.u32[0]);
    v83.i64[0] = 0xFFFFFFFFLL;
    v83.i64[1] = 0xFFFFFFFFLL;
    v87 = (int64x2_t)vandq_s8(v86, (int8x16_t)v83);
    v84.i64[0] = 0xFFFFFFFF00000000;
    v84.i64[1] = 0xFFFFFFFF00000000;
    v88 = (uint64x2_t)vandq_s8(v86, v84);
    *(int32x2_t *)v84.i8 = vdup_n_s32(25 - 4 * v3);
    v89.i64[0] = v84.u32[0];
    v89.i64[1] = v84.u32[1];
    v90 = vaddq_s64((int64x2_t)vshlq_u64(v88, (uint64x2_t)vnegq_s64(v89)), v87);
    v12 = v90.u64[1];
    v59 = 8 * v3;
    v14 = (v90.i64[1] << (v59 + 13)) | v90.i64[0];
    v60 = 51;
    goto LABEL_16;
  }
  v33 = 0uLL;
  if (v2 == 5)
  {
    v34 = vdupq_n_s8(v3);
    v35 = (int8x16_t)vshlq_u8((uint8x16_t)a2, (uint8x16_t)vnegq_s8(v34));
    v36 = vqtbl1q_s8(v35, (int8x16_t)xmmword_20631C640);
    v37 = (int16x8_t)vqtbl1q_s8(v35, (int8x16_t)xmmword_20631C650);
    v38 = vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v36.i8, (uint8x8_t)0x2001200120012001), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v36, v36, 8uLL), (uint8x8_t)0x2001200120012001));
    v36.i64[0] = 0x7000700070007;
    v36.i64[1] = 0x7000700070007;
    v39 = (int16x8_t)vandq_s8((int8x16_t)v38, v36);
    v40 = (int16x8_t)vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v38, 5uLL), v36);
    v41.i64[0] = 0x4000400040004;
    v41.i64[1] = 0x4000400040004;
    v42 = (int8x16_t)vceqq_s16(v37, v41);
    v43 = (int8x16_t)vceqq_s16(v40, v41);
    v44 = vsubq_s8((int8x16_t)vaddq_s16(v38, vshlq_n_s16(v37, 3uLL)), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C660, (int8x16_t)v39), v43));
    if ((vmaxvq_u16((uint16x8_t)v42) & 0x8000) != 0)
    {
      v45.i64[0] = 0x18001800180018;
      v45.i64[1] = 0x18001800180018;
      v44 = vsubq_s8(v44, vaddq_s8(vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C670, (int8x16_t)v39), v42), vandq_s8((int8x16_t)vmulq_s16(v40, v45), vandq_s8((int8x16_t)vceqq_s16(v39, v41), v42))), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C680, (int8x16_t)v39), vandq_s8(v43, v42))));
    }
    v46 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v44, (int8x16_t)xmmword_20631CF00), (int8x16_t)xmmword_20631CF10), (uint8x16_t)xmmword_20631CF20), (uint8x16_t)v34), vandq_s8(vdupq_n_s8((1 << v3) - 1), a2));
    v47 = (int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(vshlq_u16((uint16x8_t)(*(_OWORD *)&v46 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(6 - v3))), (uint16x8_t)xmmword_20631CF30), (int16x8_t)(*(_OWORD *)&v46 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL)));
    v48.i64[0] = 0xFFFF0000FFFFLL;
    v48.i64[1] = 0xFFFF0000FFFFLL;
    v49 = (int32x4_t)vandq_s8(v47, v48);
    v50.i64[0] = 0xFFFF0000FFFF0000;
    v50.i64[1] = 0xFFFF0000FFFF0000;
    v51 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v47, v50), (uint32x4_t)vnegq_s32(vdupq_n_s32(12 - 2 * v3)));
    v52 = vaddq_s32(v51, v49);
    v51.i32[1] = 0;
    v53 = (int8x16_t)vaddq_s32(v52, v51);
    v52.i64[0] = 0xFFFFFFFFLL;
    v52.i64[1] = 0xFFFFFFFFLL;
    v54 = (int64x2_t)vandq_s8(v53, (int8x16_t)v52);
    v50.i64[0] = 0xFFFFFFFF00000000;
    v50.i64[1] = 0xFFFFFFFF00000000;
    LODWORD(v55) = 0;
    HIDWORD(v55) = v53.i32[1];
    v56 = (uint64x2_t)vaddq_s64((int64x2_t)vandq_s8(v53, v50), (int64x2_t)v55);
    *(int32x2_t *)v50.i8 = vdup_n_s32(23 - 4 * v3);
    v57.i64[0] = v50.u32[0];
    v57.i64[1] = v50.u32[1];
    v58 = vaddq_s64((int64x2_t)vshlq_u64(v56, (uint64x2_t)vnegq_s64(v57)), v54);
    v12 = v58.u64[1];
    v59 = 8 * v3;
    v14 = (v58.i64[1] << (v59 + 19)) | v58.i64[0];
    v60 = 45;
LABEL_16:
    LOBYTE(v15) = v60 - v59;
    goto LABEL_17;
  }
LABEL_18:
  *(_QWORD *)&result = vqtbl1q_s8(vrbitq_s8(v33), (int8x16_t)xmmword_20631C860).u64[0];
  return result;
}

double PackWeights(unsigned __int8 *a1, int8x16_t *a2)
{
  int8x16_t v2;
  int8x16_t v3;
  unsigned int v4;
  unsigned int v5;
  uint8x16_t v6;
  uint8x16_t v7;
  uint8x16_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint32x4_t v11;
  uint32x4_t v12;
  uint64x2_t v13;
  uint64x2_t v14;
  int8x16_t v15;
  uint16x8_t v16;
  uint16x8_t v17;
  uint16x8_t v18;
  uint16x8_t v19;
  uint16x8_t v20;
  uint16x8_t v21;
  uint16x8_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int16x8_t v25;
  int16x8_t v26;
  int16x8_t v27;
  int16x8_t v28;
  unsigned int v29;
  uint16x8_t v30;
  int16x8_t v31;
  int16x8_t v32;
  int16x8_t v33;
  int16x8_t v34;
  int16x8_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  uint16x8_t v38;
  uint16x8_t v39;
  uint16x8_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int16x8_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int8x16_t v53;
  int16x8_t v54;
  uint8x16_t v55;
  int8x16_t v56;
  int8x16_t v57;
  uint8x16_t v58;
  int16x8_t v59;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int16x8_t v63;
  int16x8_t v64;
  int8x16_t v65;
  int16x8_t v66;
  int8x16_t v67;
  int8x16_t v68;
  int16x8_t v69;
  int8x16_t v70;
  int16x8_t v71;
  int8x16_t v72;
  int8x16_t v73;
  int8x16_t v74;
  int8x16_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  int8x16_t v80;
  int8x16_t v81;
  unsigned __int128 v82;
  int16x8_t v83;
  int8x16_t v84;
  int32x4_t v85;
  int8x16_t v86;
  int32x4_t v87;
  int8x16_t v88;
  int64x2_t v89;
  uint64x2_t v90;
  int64x2_t v91;
  int64x2_t v92;
  char v93;
  double result;

  v3 = *a2;
  v2 = a2[1];
  v4 = a1[1];
  v5 = a1[2];
  if (v4 == 1)
  {
    v6 = (uint8x16_t)vdupq_n_s16(v5 << 8);
    v7 = (uint8x16_t)vpaddq_s8((int8x16_t)vshlq_u8((uint8x16_t)v3, v6), (int8x16_t)vshlq_u8((uint8x16_t)v2, v6));
    v8 = (uint8x16_t)vdupq_n_s16(8 - 2 * v5);
    v9 = (uint16x8_t)vshlq_u8(v7, v8);
    v10 = (uint16x8_t)vmovl_s8((int8x8_t)vmul_s16(*(int16x4_t *)v8.i8, (int16x4_t)0xFE00FE00FE00FELL));
    v11 = (uint32x4_t)vshlq_u16(v9, v10);
    v12 = (uint32x4_t)vmull_s16(*(int16x4_t *)v10.i8, (int16x4_t)0x2000200020002);
    v13 = (uint64x2_t)vshlq_u32(v11, v12);
    v14 = (uint64x2_t)vmull_s32(*(int32x2_t *)v12.i8, (int32x2_t)0x200000002);
    v15 = vqtbl1q_s8((int8x16_t)vshlq_u64(v13, v14), vaddq_s8(vdupq_n_s8(v14.i8[0] >> 2), (int8x16_t)xmmword_2062D8540));
  }
  else
  {
    if (a1[2])
    {
      v16 = vmovl_u8(*(uint8x8_t *)v3.i8);
      v17 = vmovl_high_u8((uint8x16_t)v3);
      v18 = vmovl_u8(*(uint8x8_t *)v2.i8);
      v19 = vmovl_high_u8((uint8x16_t)v2);
      v20 = (uint16x8_t)vdupq_n_s16(*a1);
      v21 = vsubw_u8(v20, *(uint8x8_t *)v3.i8);
      v22 = vsubw_high_u8(v20, (uint8x16_t)v3);
      v23 = vsubw_u8(v20, *(uint8x8_t *)v2.i8);
      v24 = vsubw_high_u8(v20, (uint8x16_t)v2);
      v25 = (int16x8_t)vminq_u16(v24, v19);
      v26 = (int16x8_t)vminq_u16(v23, v18);
      v27 = (int16x8_t)vminq_u16(v22, v17);
      v28 = (int16x8_t)vminq_u16(v21, v16);
      if (v4 == 3)
        v29 = 21846;
      else
        v29 = 13108;
      v30 = (uint16x8_t)vdupq_n_s16(v29);
      v31 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v28.i8, *(uint16x4_t *)v30.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v28, v30), 0x10uLL);
      v32 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v27.i8, *(uint16x4_t *)v30.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v27, v30), 0x10uLL);
      v33 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v26.i8, *(uint16x4_t *)v30.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v26, v30), 0x10uLL);
      v34 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v25.i8, *(uint16x4_t *)v30.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v25, v30), 0x10uLL);
      v35 = (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v4));
      v36 = (uint16x8_t)vmlsq_s16(v26, v33, v35);
      v37 = (uint16x8_t)vmlsq_s16(v25, v34, v35);
      v38 = (uint16x8_t)vmlsq_s16(v28, v31, v35);
      v39 = (uint16x8_t)vmlsq_s16(v27, v32, v35);
      v40 = (uint16x8_t)vdupq_n_s16(v5);
      v41 = (int8x16_t)vcgtq_u16(v18, v23);
      v42.i64[0] = 0x1000100010001;
      v42.i64[1] = 0x1000100010001;
      v2 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v36, v40), vaddq_s16(v33, v33)), vandq_s8(v41, v42)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v37, v40), vaddq_s16(v34, v34)), vandq_s8((int8x16_t)vcgtq_u16(v19, v24), v42)));
      v3 = vuzp1q_s8(vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v38, v40), vaddq_s16(v31, v31)), vandq_s8((int8x16_t)vcgtq_u16(v16, v21), v42)), vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16(v39, v40), vaddq_s16(v32, v32)), vandq_s8((int8x16_t)vcgtq_u16(v17, v22), v42)));
    }
    if (v4 == 3)
    {
      v57 = vdupq_n_s8(v5);
      v58 = (uint8x16_t)vnegq_s8(v57);
      v59 = (int16x8_t)vshlq_u8((uint8x16_t)v2, v58);
      v60 = (int8x16_t)vshlq_u8((uint8x16_t)v3, v58);
      v61 = vqtbl1q_s8(v60, (int8x16_t)xmmword_20631C6C0);
      v62 = vqtbl1q_s8((int8x16_t)v59, (int8x16_t)xmmword_20631C710);
      v63 = vpaddq_s16(vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v61.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v61, v61, 8uLL), (uint8x8_t)0x8010040180100401)), vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v62.i8, (uint8x8_t)0x8010040180100401), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL), (uint8x8_t)0x8010040180100401)));
      v64 = vuzp1q_s16((int16x8_t)vqtbl1q_s8(v60, (int8x16_t)xmmword_20631C6D0), (int16x8_t)vqtbl1q_s8((int8x16_t)v59, (int8x16_t)xmmword_20631C720));
      v65 = (int8x16_t)vaddq_s16(v63, (int16x8_t)vqtbl1q_s8((int8x16_t)v63, (int8x16_t)xmmword_20631C730));
      v66 = (int16x8_t)v65;
      v66.i16[3] = 0;
      v59.i64[0] = 0x20002000200020;
      v59.i64[1] = 0x20002000200020;
      v67 = (int8x16_t)vceqq_s16((int16x8_t)vandq_s8(v65, (int8x16_t)xmmword_20631C740), v59);
      v60.i64[0] = 0xFF00FF00FF00FFLL;
      v60.i64[1] = 0xFF00FF00FF00FFLL;
      v68 = (int8x16_t)vcgtq_u16((uint16x8_t)v66, (uint16x8_t)v60);
      v69 = vshlq_n_s16(v64, 5uLL);
      v70 = (int8x16_t)vaddq_s16(v66, v69);
      if ((vmaxvq_u16((uint16x8_t)vorrq_s8(v67, v68)) & 0x8000) != 0)
      {
        v71.i64[0] = 0x2000200020002;
        v71.i64[1] = 0x2000200020002;
        v72 = vandq_s8(v68, (int8x16_t)vceqq_s16(v64, v71));
        v73 = vandq_s8(v65, (int8x16_t)xmmword_20631C750);
        v74.i64[0] = 0x303030303030303;
        v74.i64[1] = 0x303030303030303;
        v75.i64[0] = 0x6060606060606060;
        v75.i64[1] = 0x6060606060606060;
        v76 = vmlaq_s8(v75, (int8x16_t)v69, v74);
        v77.i64[0] = 0xF000F000F000FLL;
        v77.i64[1] = 0xF000F000F000FLL;
        v70 = vaddq_s8(vsubq_s8(vaddq_s8(vandq_s8(v76, v68), v70), vaddq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6E0, v73), v67), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C6F0, vandq_s8((int8x16_t)vshrq_n_u16((uint16x8_t)v66, 2uLL), v77)), v72))), vandq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C700, v73), v67), v72));
      }
      v78 = vdupq_n_s8((1 << v5) - 1);
      v79 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v70, (int8x16_t)xmmword_20631C760), (int8x16_t)xmmword_20631C790), (uint8x16_t)xmmword_20631C7A0), (uint8x16_t)v57), vandq_s8(v78, v2));
      v80 = vorrq_s8((int8x16_t)vshlq_u8(vshlq_u8((uint8x16_t)vandq_s8(vqtbl1q_s8(v70, (int8x16_t)xmmword_20631C770), (int8x16_t)xmmword_20631C780), (uint8x16_t)xmmword_20631C7B0), (uint8x16_t)v57), vandq_s8(v78, v3));
      v81 = vaddq_s8((int8x16_t)vshlq_u8((uint8x16_t)vmulq_s8(vdupq_n_s8(1 << v5), vuzp2q_s8(v80, v79)), (uint8x16_t)xmmword_20631C7C0), vuzp1q_s8(v80, v79));
      v82 = *(_OWORD *)&v81 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
      v83 = (int16x8_t)vshlq_u16((uint16x8_t)(*(_OWORD *)&v81 & __PAIR128__(0xFF00FF00FF00FF00, 0xFF00FF00FF00FF00)), (uint16x8_t)vnegq_s16(vdupq_n_s16(5 - 2 * v5)));
      v84 = (int8x16_t)vaddq_s16(vaddq_s16(v83, (int16x8_t)v82), (int16x8_t)vandq_s8((int8x16_t)v83, (int8x16_t)xmmword_20631C7D0));
      *(_QWORD *)&v82 = 0xFFFF0000FFFFLL;
      *((_QWORD *)&v82 + 1) = 0xFFFF0000FFFFLL;
      v85 = (int32x4_t)vandq_s8(v84, (int8x16_t)v82);
      v86.i64[0] = 0xFFFF0000FFFF0000;
      v86.i64[1] = 0xFFFF0000FFFF0000;
      v87 = (int32x4_t)vshlq_u32((uint32x4_t)vandq_s8(v84, v86), (uint32x4_t)vnegq_s32(vdupq_n_s32(10 - 4 * v5)));
      v88 = (int8x16_t)vaddq_s32(vaddq_s32(v87, v85), (int32x4_t)v87.u64[0]);
      v85.i64[0] = 0xFFFFFFFFLL;
      v85.i64[1] = 0xFFFFFFFFLL;
      v89 = (int64x2_t)vandq_s8(v88, (int8x16_t)v85);
      v86.i64[0] = 0xFFFFFFFF00000000;
      v86.i64[1] = 0xFFFFFFFF00000000;
      v90 = (uint64x2_t)vandq_s8(v88, v86);
      *(int32x2_t *)v86.i8 = vdup_n_s32(19 - 8 * v5);
      v91.i64[0] = v86.u32[0];
      v91.i64[1] = v86.u32[1];
      v92 = vaddq_s64((int64x2_t)vshlq_u64(v90, (uint64x2_t)vnegq_s64(v91)), v89);
      v93 = 16 * v5;
      v15.i64[0] = (v92.i64[1] << (v93 + 26)) | v92.i64[0];
      v15.i64[1] = (unint64_t)v92.i64[1] >> (38 - v93);
    }
    else
    {
      v15 = 0uLL;
      if (v4 == 5)
      {
        v43 = vqtbl1q_s8(v3, (int8x16_t)xmmword_20631C7E0);
        v44 = vqtbl1q_s8(v2, (int8x16_t)xmmword_20631C7F0);
        v45 = vuzp1q_s8((int8x16_t)vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v43.i8, (uint8x8_t)0x801080108010801), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v43, v43, 8uLL), (uint8x8_t)0x801080108010801)), (int8x16_t)vpaddq_s16((int16x8_t)vmull_u8(*(uint8x8_t *)v44.i8, (uint8x8_t)0x801080108010801), (int16x8_t)vmull_u8((uint8x8_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), (uint8x8_t)0x801080108010801)));
        v46 = vuzp1q_s8(vqtbl1q_s8(v3, (int8x16_t)xmmword_20631C800), vqtbl1q_s8(v2, (int8x16_t)xmmword_20631C650));
        v47 = vaddq_s8(v45, vqtbl1q_s8(v45, (int8x16_t)xmmword_20631C810));
        v48 = (int16x8_t)vaddq_s8(vqtbl1q_s8(v46, (int8x16_t)xmmword_20631C810), v46);
        v46.i64[0] = 0x707070707070707;
        v46.i64[1] = 0x707070707070707;
        v49 = vandq_s8(v47, v46);
        v46.i64[0] = 0xF8F8F8F8F8F8F8F8;
        v46.i64[1] = 0xF8F8F8F8F8F8F8F8;
        v45.i64[0] = 0x2020202020202020;
        v45.i64[1] = 0x2020202020202020;
        v50 = vceqq_s8(vandq_s8(v47, v46), v45);
        v46.i64[0] = 0x404040404040404;
        v46.i64[1] = 0x404040404040404;
        v51 = vceqq_s8((int8x16_t)v48, v46);
        v52 = vsubq_s8(vaddq_s8(vshlq_n_s8((int8x16_t)v48, 5uLL), v47), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C660, v49), v51));
        if ((vmaxvq_u8((uint8x16_t)v50) & 0x80) != 0)
        {
          v53.i64[0] = 0x2424242424242424;
          v53.i64[1] = 0x2424242424242424;
          v54.i64[0] = 0x18001800180018;
          v54.i64[1] = 0x18001800180018;
          v52 = vsubq_s8(v52, vaddq_s8(vaddq_s8(vandq_s8((int8x16_t)vmulq_s16(v48, v54), vceqq_s8(v47, v53)), vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C670, v49), v50)), vandq_s8(vandq_s8(vqtbl1q_s8((int8x16_t)xmmword_20631C680, v49), v51), v50)));
        }
        v55.i64[0] = 0x1000100010001;
        v55.i64[1] = 0x1000100010001;
        v56 = (int8x16_t)vshlq_u64((uint64x2_t)vshlq_u32((uint32x4_t)vshlq_u16((uint16x8_t)vshlq_u8((uint8x16_t)vqtbl1q_s8(v52, (int8x16_t)xmmword_20631C820), v55), (uint16x8_t)xmmword_20631C830), (uint32x4_t)xmmword_20631C840), (uint64x2_t)xmmword_20631C850);
        v15 = vextq_s8(v56, v56, 1uLL);
      }
    }
  }
  *(_QWORD *)&result = vqtbl1q_s8(vrbitq_s8(v15), (int8x16_t)xmmword_20631C860).u64[0];
  return result;
}

uint64_t FindQuantizedColors(unsigned int a1, uint64_t a2, unsigned int *a3, float32x4_t *a4, unint64_t a5, float32x4_t a6, float32x4_t a7, float32x4_t a8)
{
  unsigned int v8;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  uint64_t v24;
  int v25;
  int8x16_t v26;
  int v27;
  int v28;
  uint64_t v29;
  float32x4_t v30;
  float32x4_t v31;
  uint64_t result;
  int8x16_t v33;
  int8x8_t v34;
  int8x16_t v35;
  float32x4_t v36;
  float32x4_t v37;
  unsigned __int32 v38;
  unsigned int v39;
  uint64_t v40;
  unsigned __int128 v41;
  uint16x8_t v42;
  unsigned int v43;
  int8x16_t v44;
  int16x8_t v45;
  int16x8_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int16x8_t v50;
  int16x8_t v51;
  int16x8_t v52;
  int8x16_t v53;
  uint16x8_t v54;
  uint16x8_t v55;
  float32x4_t v56;
  float32x4_t v57;
  unsigned __int32 v58;
  unsigned int v59;
  uint64_t v60;
  unsigned __int128 v61;
  uint16x8_t v62;
  unsigned int v63;
  int8x16_t v64;
  int16x8_t v65;
  int16x8_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  int16x8_t v70;
  int16x8_t v71;
  int16x8_t v72;
  int8x16_t v73;
  uint16x8_t v74;
  uint16x8_t v75;
  int8x16_t v76;
  float32x4_t v77;
  float32x4_t v78;
  float32x4_t v79;
  float32x4_t v80;
  float32x4_t v81;
  unint64_t v82;
  float32x4_t v83;
  float32x4_t v84;
  int8x8_t v85;
  unsigned int v86;
  int16x8_t v87;
  float32x4_t v88;
  float v89;
  unsigned int v90;
  uint64_t v91;
  unsigned __int128 v92;
  uint16x8_t v93;
  unsigned int v94;
  int8x16_t v95;
  int16x8_t v96;
  int16x8_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  int16x8_t v101;
  int16x8_t v102;
  int16x8_t v103;
  int8x16_t v104;
  uint16x8_t v105;
  uint16x8_t v106;
  int8x16_t v107;
  float32x4_t v108;
  float32x4_t v109;
  int8x8_t v110;
  int v111;
  float32x4_t v112;
  int16x8_t v113;
  float32x4_t v114;
  float v115;
  unsigned int v116;
  uint64_t v117;
  unsigned __int128 v118;
  uint16x8_t v119;
  unsigned int v120;
  int8x16_t v121;
  int16x8_t v122;
  int16x8_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  int16x8_t v127;
  int16x8_t v128;
  int16x8_t v129;
  int8x16_t v130;
  uint16x8_t v131;
  uint16x8_t v132;
  int8x16_t v133;
  float32x4_t v134;
  float32x4_t v135;
  int8x8_t v136;
  int v137;
  float32x4_t v138;
  float32x4_t v139;
  float32x4_t v140;
  float32x4_t v141;
  int8x8_t v142;
  unint64_t v143;
  unint64_t v144;
  float32x4_t *v145;
  float32x4_t v146;
  unint64_t v147;
  float *v148;
  int16x8_t v149;
  int16x8_t v150;
  int8x8_t v151;
  int8x8_t v152;
  int16x8_t v153;
  int8x8_t v154;
  float32x4_t v155;
  float32x4_t v156;
  float32x4_t v157;
  float32x4_t v158;
  float32x4_t v159;
  float32x4_t v160;
  float32x4_t v161;
  int8x8_t v162;
  int16x8_t v163;
  int16x8_t v164;
  int8x8_t v165;
  int16x8_t v166;
  float32x4_t v167;
  uint8x8_t v168;
  int16x8_t v169;
  float32x4_t v170;
  float v171;
  unsigned int v172;
  uint64_t v173;
  unsigned __int128 v174;
  uint16x8_t v175;
  unsigned int v176;
  int8x16_t v177;
  int16x8_t v178;
  int16x8_t v179;
  uint64_t v180;
  uint64_t v181;
  unint64_t v182;
  int16x8_t v183;
  int16x8_t v184;
  int16x8_t v185;
  int8x16_t v186;
  uint16x8_t v187;
  uint16x8_t v188;
  int8x16_t v189;
  float32x4_t v190;
  float32x4_t v191;
  int8x8_t v192;
  int v193;
  int16x8_t v194;
  float32x4_t v195;
  int8x16_t v196;
  unsigned int v197;
  uint64_t v198;
  unsigned __int128 v199;
  uint16x8_t v200;
  unsigned int v201;
  int8x16_t v202;
  int16x8_t v203;
  int16x8_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  int16x8_t v208;
  int16x8_t v209;
  int16x8_t v210;
  int8x16_t v211;
  uint16x8_t v212;
  uint16x8_t v213;
  int8x16_t v214;
  float32x4_t v215;
  float32x4_t v216;
  int8x8_t v217;
  int v218;
  float32x4_t v219;
  float32x4_t v220;
  float32x4_t v221;
  float32x4_t v222;
  float32x4_t v223;
  unint64_t v224;
  float32x4_t v225;
  float32x4_t v226;
  float32x4_t v227;
  float32x4_t v228;
  unint64_t v229;
  unint64_t v230;
  float32x4_t *v231;
  float32x4_t v232;
  unint64_t v233;
  float *v234;
  int8x8_t v235;
  int8x8_t v236;
  unint64_t v237;
  float32x4_t *v238;
  float32x4_t v239;
  unint64_t v240;
  float *v241;
  int8x8_t v242;
  int8x8_t v243;
  float32x4_t v244;
  float v245;
  float32x4_t v246;
  float32x4_t v247;
  float32x4_t v248;
  float32x4_t v249;
  float32x4_t v250;
  float32x4_t v251;
  int8x8_t v252;
  int v253;
  float32x4_t v254;
  float32x4_t v255;
  int8x8_t v256;
  unsigned int v257;
  float32x4_t v258;
  float32x4_t v259;

  if (a1 <= 1)
    v8 = 1;
  else
    v8 = a1;
  __asm { FMOV            V5.4S, #1.0 }
  v14 = vminnmq_f32(vmaxnmq_f32(a6, (float32x4_t)0), _Q5);
  v15 = vminnmq_f32(vmaxnmq_f32(a7, (float32x4_t)0), _Q5);
  v16 = vrndxq_f32(vmulq_n_f32(v14, (float)v8));
  v17 = vrndxq_f32(vmulq_n_f32(v15, (float)v8));
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v16, v17)) & 0x80000000) != 0)
    return 1;
  v251 = vminnmq_f32(vmaxnmq_f32(a8, (float32x4_t)0), _Q5);
  v18 = vrndxq_f32(vmulq_n_f32(v251, (float)v8));
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v16, v18)) & 0x80000000) != 0)
    return 1;
  v247 = v18;
  v248 = v16;
  v249 = v17;
  v244 = _Q5;
  v245 = ReciprocalTable[a1];
  v246 = v15;
  v258 = v14;
  v259 = v15;
  v24 = *a3;
  v257 = *a3;
  v256 = 0;
  v250 = v14;
  v25 = EncodeBitTransferSigned(&v258, a1, &v257, &v256);
  if (v25)
  {
    v27 = v25;
    v254 = v250;
    v255 = v251;
    v253 = v24;
    v252 = 0;
    v28 = EncodeBitTransferSigned(&v254, a1, &v253, &v252);
    if (v28)
    {
      if (v27 == v28)
      {
        v29 = v257;
        if (v257 == v253)
        {
          v31 = v254;
          v30 = v255;
          v26 = vandq_s8((int8x16_t)vceqq_f32(v258, v254), (int8x16_t)vceqq_f32(v259, v255));
          if ((vminvq_u32((uint32x4_t)v26) & 0x80000000) == 0)
          {
            result = 0;
            v33 = (int8x16_t)vsubq_f32(v259, v258);
            *(float32x4_t *)a2 = v258;
            *(int8x16_t *)(a2 + 16) = v33;
            v34 = ShuffleColorEndpointPair_mapTable[v29];
            *(int8x8_t *)v33.i8 = v256;
            *(int8x8_t *)(a2 + 32) = vqtbl1_s8(v33, v34);
            v35 = (int8x16_t)vsubq_f32(v30, v31);
            *(float32x4_t *)(a2 + 48) = v31;
            *(int8x16_t *)(a2 + 64) = v35;
            *(int8x8_t *)v35.i8 = v252;
            *(int8x8_t *)(a2 + 80) = vqtbl1_s8(v35, v34);
            *a3 = v29;
            return result;
          }
        }
      }
    }
  }
  v36 = vsubq_f32(v249, v248);
  v37 = vsubq_f32(v247, v248);
  v38 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1))).u32[0];
  if (fabsf(*(float *)&v38) <= 1.0)
  {
    v39 = __clz(__rbit32(a1 + 1));
    v40 = ((a1 + 1) >> v39);
    v41 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v248), (int16x8_t)vcvtq_s32_f32(v249)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
    if (v39 && (_DWORD)v40 != 1)
    {
      v42 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a1), (int16x8_t)v41);
      if ((_DWORD)v40 == 3)
        v43 = 21846;
      else
        v43 = 13108;
      v44 = (int8x16_t)vdupq_n_s16(v43);
      v45 = (int16x8_t)vminq_u16((uint16x8_t)v41, v42);
      v46 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v45.i8, *(uint16x4_t *)v44.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v45, (uint16x8_t)v44), 0x10uLL);
      v44.i64[0] = 0x1000100010001;
      v44.i64[1] = 0x1000100010001;
      v41 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v45, v46, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((a1 + 1) >> v39))), (uint16x8_t)vdupq_n_s16(v39)), vaddq_s16(v46, v46)), vbicq_s8(v44, (int8x16_t)vceqq_s16(v45, (int16x8_t)v41)));
    }
    v47 = v40 - 6;
    _ZF = (_DWORD)v40 == 1;
    v48 = -8;
    if (!_ZF)
      v48 = v47;
    v49 = GetUnquantizationData_UnquantizationInfo[3 * v39 + v48];
    v50 = (int16x8_t)vshlq_u16((uint16x8_t)v41, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v49) & 7)));
    v51 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v49)), (int8x16_t)v41);
    v52 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v51, 1uLL), vdupq_n_s16((v49 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v49 >> 37) & 7)));
    v53 = vandq_s8((int8x16_t)vdupq_n_s16((v49 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v51, 0xFuLL)));
    v54 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v52, v50, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v49 >> 40))), v53);
    v52.i64[0] = 0x80008000800080;
    v52.i64[1] = 0x80008000800080;
    v55 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v54, 2uLL), vandq_s8(v53, (int8x16_t)v52));
    v26 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v56 = (float32x4_t)vdupq_n_s32(0xCB400000);
    v57 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v55), v26), v56), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v55.i8), v26), v56));
    v38 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).u32[0];
  }
  v58 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u32[0];
  if (fabsf(*(float *)&v58) <= 1.0)
  {
    v59 = __clz(__rbit32(a1 + 1));
    v60 = ((a1 + 1) >> v59);
    v61 = *(_OWORD *)&vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v248), (int16x8_t)vcvtq_s32_f32(v247)) & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
    if (v59 && (_DWORD)v60 != 1)
    {
      v62 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a1), (int16x8_t)v61);
      if ((_DWORD)v60 == 3)
        v63 = 21846;
      else
        v63 = 13108;
      v64 = (int8x16_t)vdupq_n_s16(v63);
      v65 = (int16x8_t)vminq_u16((uint16x8_t)v61, v62);
      *(int8x8_t *)v26.i8 = vdup_n_s8((a1 + 1) >> v59);
      v66 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v65.i8, *(uint16x4_t *)v64.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v65, (uint16x8_t)v64), 0x10uLL);
      v64.i64[0] = 0x1000100010001;
      v64.i64[1] = 0x1000100010001;
      v61 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v65, v66, (int16x8_t)vmovl_u8(*(uint8x8_t *)v26.i8)), (uint16x8_t)vdupq_n_s16(v59)), vaddq_s16(v66, v66)), vbicq_s8(v64, (int8x16_t)vceqq_s16(v65, (int16x8_t)v61)));
    }
    v67 = v60 - 6;
    _ZF = (_DWORD)v60 == 1;
    v68 = -8;
    if (!_ZF)
      v68 = v67;
    v69 = GetUnquantizationData_UnquantizationInfo[3 * v59 + v68];
    v70 = (int16x8_t)vshlq_u16((uint16x8_t)v61, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v69) & 7)));
    v71 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v69)), (int8x16_t)v61);
    v72 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v71, 1uLL), vdupq_n_s16((v69 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v69 >> 37) & 7)));
    v73 = vandq_s8((int8x16_t)vdupq_n_s16((v69 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v71, 0xFuLL)));
    v74 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v72, v70, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v69 >> 40))), v73);
    v72.i64[0] = 0x80008000800080;
    v72.i64[1] = 0x80008000800080;
    v75 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v74, 2uLL), vandq_s8(v73, (int8x16_t)v72));
    v76 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v77 = (float32x4_t)vdupq_n_s32(0xCB400000);
    v78 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v75), v76), v77), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v75.i8), v76), v77));
    v58 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).u32[0];
  }
  if (((v58 ^ v38) & 0x80000000) != 0)
    return 1;
  *(float *)v26.i32 = (float)a1;
  v79 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.i8, 0);
  v80 = vrndxq_f32(vmulq_f32(vmulq_n_f32(v250, (float)a1), (float32x4_t)xmmword_20631CF90));
  v81 = vrndxq_f32(vmulq_f32(vmulq_n_f32(v246, (float)a1), (float32x4_t)xmmword_20631CF90));
  v82 = vdupq_laneq_s32((int32x4_t)v80, 2).u64[0];
  v83 = vsubq_f32(v80, (float32x4_t)v82);
  v84 = vsubq_f32(v81, (float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2).u64[0]);
  v85 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgezq_f32(v83), (int16x8_t)vcgezq_f32(v84)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v79, v83), (int16x8_t)vcgeq_f32(v79, v84))));
  v86 = vminvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(v85, *(int8x8_t *)v80.f32), vzip2_s8(v85, *(int8x8_t *)v80.f32))), 0x1FuLL)));
  if (*(float *)&v38 >= 0.0)
  {
    if ((v86 & 0x80000000) != 0)
    {
      v113 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v83), (int16x8_t)vcvtq_s32_f32(v84));
      v114 = vsubq_f32(v83, v84);
      LODWORD(v115) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).u32[0];
      if (fabsf(v115) > 1.0)
        goto LABEL_60;
      v116 = __clz(__rbit32(a1 + 1));
      v117 = ((a1 + 1) >> v116);
      v118 = *(_OWORD *)&v113 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
      if (v116 && (_DWORD)v117 != 1)
      {
        v119 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a1), (int16x8_t)v118);
        if ((_DWORD)v117 == 3)
          v120 = 21846;
        else
          v120 = 13108;
        v121 = (int8x16_t)vdupq_n_s16(v120);
        v122 = (int16x8_t)vminq_u16((uint16x8_t)v118, v119);
        v123 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v122.i8, *(uint16x4_t *)v121.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v122, (uint16x8_t)v121), 0x10uLL);
        v121.i64[0] = 0x1000100010001;
        v121.i64[1] = 0x1000100010001;
        v118 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v122, v123, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((a1 + 1) >> v116))), (uint16x8_t)vdupq_n_s16(v116)), vaddq_s16(v123, v123)), vbicq_s8(v121, (int8x16_t)vceqq_s16(v122, (int16x8_t)v118)));
      }
      v124 = v117 - 6;
      _ZF = (_DWORD)v117 == 1;
      v125 = -8;
      if (!_ZF)
        v125 = v124;
      v126 = GetUnquantizationData_UnquantizationInfo[3 * v116 + v125];
      v127 = (int16x8_t)vshlq_u16((uint16x8_t)v118, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v126) & 7)));
      v128 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v126)), (int8x16_t)v118);
      v129 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v128, 1uLL), vdupq_n_s16((v126 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v126 >> 37) & 7)));
      v130 = vandq_s8((int8x16_t)vdupq_n_s16((v126 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v128, 0xFuLL)));
      v131 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v129, v127, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v126 >> 40))), v130);
      v129.i64[0] = 0x80008000800080;
      v129.i64[1] = 0x80008000800080;
      v132 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v131, 2uLL), vandq_s8(v130, (int8x16_t)v129));
      v133 = (int8x16_t)vdupq_n_s32(0x4B400000u);
      v134 = (float32x4_t)vdupq_n_s32(0xCB400000);
      v135 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v132.i8), v133), v134), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v132), v133), v134));
      v115 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))).f32[0];
      if (v115 != 0.0)
      {
LABEL_60:
        v136 = vmovn_s16(v113);
        if (v115 <= 0.0)
        {
          v137 = 1;
          v138 = v80;
        }
        else
        {
          v136 = vext_s8(v136, v136, 4uLL);
          v137 = -1;
          v138 = v81;
          v81 = v80;
        }
        v159 = vrndxq_f32(vmulq_f32(vmulq_n_f32(v251, *(float *)v26.i32), (float32x4_t)xmmword_20631CF90));
        v160 = vsubq_f32(v159, (float32x4_t)vdupq_laneq_s32((int32x4_t)v159, 2).u64[0]);
        v161 = vsubq_f32(v80, (float32x4_t)v82);
        v162 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgezq_f32(v161), (int16x8_t)vcgezq_f32(v160)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v79, v161), (int16x8_t)vcgeq_f32(v79, v160))));
        if ((vminvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(v162, *(int8x8_t *)v80.f32), vzip2_s8(v162, *(int8x8_t *)v80.f32))), 0x1FuLL))) & 0x80000000) != 0)
        {
          v194 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v161), (int16x8_t)vcvtq_s32_f32(v160));
          v195 = vsubq_f32(v161, v160);
          v196 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v195, 2), vaddq_f32(v195, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v195.f32, 1)));
          if (fabsf(*(float *)v196.i32) > 1.0)
            goto LABEL_133;
          v197 = __clz(__rbit32(a1 + 1));
          v198 = ((a1 + 1) >> v197);
          v199 = *(_OWORD *)&v194 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
          if (v197 && (_DWORD)v198 != 1)
          {
            v200 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a1), (int16x8_t)v199);
            if ((_DWORD)v198 == 3)
              v201 = 21846;
            else
              v201 = 13108;
            v202 = (int8x16_t)vdupq_n_s16(v201);
            v203 = (int16x8_t)vminq_u16((uint16x8_t)v199, v200);
            v204 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v203.i8, *(uint16x4_t *)v202.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v203, (uint16x8_t)v202), 0x10uLL);
            v202.i64[0] = 0x1000100010001;
            v202.i64[1] = 0x1000100010001;
            v199 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v203, v204, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((a1 + 1) >> v197))), (uint16x8_t)vdupq_n_s16(v197)), vaddq_s16(v204, v204)), vbicq_s8(v202, (int8x16_t)vceqq_s16(v203, (int16x8_t)v199)));
          }
          v205 = v198 - 6;
          _ZF = (_DWORD)v198 == 1;
          v206 = -8;
          if (!_ZF)
            v206 = v205;
          v207 = GetUnquantizationData_UnquantizationInfo[3 * v197 + v206];
          v208 = (int16x8_t)vshlq_u16((uint16x8_t)v199, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v207) & 7)));
          v209 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v207)), (int8x16_t)v199);
          v210 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v209, 1uLL), vdupq_n_s16((v207 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v207 >> 37) & 7)));
          v211 = vandq_s8((int8x16_t)vdupq_n_s16((v207 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v209, 0xFuLL)));
          v212 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v210, v208, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v207 >> 40))), v211);
          v210.i64[0] = 0x80008000800080;
          v210.i64[1] = 0x80008000800080;
          v213 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v212, 2uLL), vandq_s8(v211, (int8x16_t)v210));
          v214 = (int8x16_t)vdupq_n_s32(0x4B400000u);
          v215 = (float32x4_t)vdupq_n_s32(0xCB400000);
          v216 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v213.i8), v214), v215), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v213), v214), v215));
          v196 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v216, 2), vaddq_f32(v216, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v216.f32, 1)));
          if (*(float *)v196.i32 != 0.0)
          {
LABEL_133:
            v217 = vmovn_s16(v194);
            if (*(float *)v196.i32 <= 0.0)
            {
              v218 = 1;
            }
            else
            {
              v217 = vext_s8(v217, v217, 4uLL);
              v196 = (int8x16_t)v80;
              v218 = -1;
              v80 = v159;
              v159 = (float32x4_t)v196;
            }
            if (v137 == v218)
            {
              *(int8x8_t *)v196.i8 = vext_s8(v136, v136, 4uLL);
              *(int8x8_t *)v194.i8 = vext_s8(v217, v217, 4uLL);
              if ((vminv_u8((uint8x8_t)vceq_s8(*(int8x8_t *)v196.i8, *(int8x8_t *)v194.i8)) & 0x80) == 0)
              {
                v225 = vmulq_f32(vmulq_n_f32(v81, v245), (float32x4_t)xmmword_20631CFA0);
                v226 = vmulq_f32(vmulq_n_f32(v138, v245), (float32x4_t)xmmword_20631CFA0);
                v227 = vmulq_f32(vmulq_n_f32(v80, v245), (float32x4_t)xmmword_20631CFA0);
                v228 = vmulq_f32(vmulq_n_f32(v159, v245), (float32x4_t)xmmword_20631CFA0);
                if (v115 > 0.0)
                {
                  if (a5 >= 8)
                  {
                    v237 = a5 >> 3;
                    v238 = a4;
                    do
                    {
                      v239 = vsubq_f32(v244, v238[1]);
                      *v238 = vsubq_f32(v244, *v238);
                      v238[1] = v239;
                      v238 += 2;
                      --v237;
                    }
                    while (v237);
                    v229 = a5 & 0xFFFFFFFFFFFFFFF8;
                  }
                  else
                  {
                    v229 = 0;
                  }
                  v240 = a5 - v229;
                  if (a5 > v229)
                  {
                    v241 = &a4->f32[v229];
                    do
                    {
                      *v241 = 1.0 - *v241;
                      ++v241;
                      --v240;
                    }
                    while (v240);
                  }
                }
                *(float32x4_t *)a2 = v226;
                *(float32x4_t *)(a2 + 16) = vsubq_f32(v225, v226);
                v242 = vqtbl1_s8(v196, ShuffleColorEndpointPair_mapTable[*a3]);
                *(int8x8_t *)(a2 + 32) = v242;
                *(float32x4_t *)(a2 + 48) = v227;
                *(float32x4_t *)(a2 + 64) = vsubq_f32(v228, v227);
                v243 = vqtbl1_s8((int8x16_t)v194, ShuffleColorEndpointPair_mapTable[*a3]);
                *(int8x8_t *)(a2 + 80) = v243;
                v168 = (uint8x8_t)vceq_s8(v242, v243);
                goto LABEL_81;
              }
            }
          }
        }
      }
    }
    if (a2)
    {
      v163 = (int16x8_t)vcvtq_s32_f32(v248);
      v164 = vuzp1q_s16(v163, (int16x8_t)vcvtq_s32_f32(v247));
      *(int8x8_t *)v164.i8 = vmovn_s16(v164);
      v165 = ShuffleColorEndpointPair_mapTable[v24];
      v152 = vqtbl1_s8((int8x16_t)v164, v165);
      v166 = vuzp1q_s16(v163, (int16x8_t)vcvtq_s32_f32(v249));
      *(int8x8_t *)v166.i8 = vmovn_s16(v166);
      v154 = vqtbl1_s8((int8x16_t)v166, v165);
      v155 = vmulq_n_f32(v248, v245);
      v167 = vnegq_f32(v155);
      *(float32x4_t *)a2 = v155;
      *(float32x4_t *)(a2 + 16) = vmlaq_n_f32(v167, v249, v245);
      *(int8x8_t *)(a2 + 32) = v154;
      v158 = vmlaq_n_f32(v167, v247, v245);
      goto LABEL_78;
    }
LABEL_79:
    v154 = (int8x8_t)MEMORY[0x20];
    v152 = (int8x8_t)MEMORY[0x50];
    goto LABEL_80;
  }
  if ((v86 & 0x80000000) != 0)
  {
    v87 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v83), (int16x8_t)vcvtq_s32_f32(v84));
    v88 = vsubq_f32(v83, v84);
    LODWORD(v89) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v88, 2), vaddq_f32(v88, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v88.f32, 1))).u32[0];
    if (fabsf(v89) > 1.0)
      goto LABEL_46;
    v90 = __clz(__rbit32(a1 + 1));
    v91 = ((a1 + 1) >> v90);
    v92 = *(_OWORD *)&v87 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
    if (v90 && (_DWORD)v91 != 1)
    {
      v93 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a1), (int16x8_t)v92);
      if ((_DWORD)v91 == 3)
        v94 = 21846;
      else
        v94 = 13108;
      v95 = (int8x16_t)vdupq_n_s16(v94);
      v96 = (int16x8_t)vminq_u16((uint16x8_t)v92, v93);
      v97 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v96.i8, *(uint16x4_t *)v95.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v96, (uint16x8_t)v95), 0x10uLL);
      v95.i64[0] = 0x1000100010001;
      v95.i64[1] = 0x1000100010001;
      v92 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v96, v97, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((a1 + 1) >> v90))), (uint16x8_t)vdupq_n_s16(v90)), vaddq_s16(v97, v97)), vbicq_s8(v95, (int8x16_t)vceqq_s16(v96, (int16x8_t)v92)));
    }
    v98 = v91 - 6;
    _ZF = (_DWORD)v91 == 1;
    v99 = -8;
    if (!_ZF)
      v99 = v98;
    v100 = GetUnquantizationData_UnquantizationInfo[3 * v90 + v99];
    v101 = (int16x8_t)vshlq_u16((uint16x8_t)v92, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v100) & 7)));
    v102 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v100)), (int8x16_t)v92);
    v103 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v102, 1uLL), vdupq_n_s16((v100 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v100 >> 37) & 7)));
    v104 = vandq_s8((int8x16_t)vdupq_n_s16((v100 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v102, 0xFuLL)));
    v105 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v103, v101, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v100 >> 40))), v104);
    v103.i64[0] = 0x80008000800080;
    v103.i64[1] = 0x80008000800080;
    v106 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v105, 2uLL), vandq_s8(v104, (int8x16_t)v103));
    v107 = (int8x16_t)vdupq_n_s32(0x4B400000u);
    v108 = (float32x4_t)vdupq_n_s32(0xCB400000);
    v109 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v106.i8), v107), v108), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v106), v107), v108));
    v89 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 2), vaddq_f32(v109, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 1))).f32[0];
    if (v89 != 0.0)
    {
LABEL_46:
      v110 = vmovn_s16(v87);
      if (v89 <= 0.0)
      {
        v111 = 1;
        v112 = v80;
      }
      else
      {
        v110 = vext_s8(v110, v110, 4uLL);
        v111 = -1;
        v112 = v81;
        v81 = v80;
      }
      v139 = vrndxq_f32(vmulq_f32(vmulq_n_f32(v251, *(float *)v26.i32), (float32x4_t)xmmword_20631CF90));
      v140 = vsubq_f32(v139, (float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 2).u64[0]);
      v141 = vsubq_f32(v80, (float32x4_t)v82);
      v142 = vmovn_s16((int16x8_t)vandq_s8((int8x16_t)vuzp1q_s16((int16x8_t)vcgezq_f32(v141), (int16x8_t)vcgezq_f32(v140)), (int8x16_t)vuzp1q_s16((int16x8_t)vcgeq_f32(v79, v141), (int16x8_t)vcgeq_f32(v79, v140))));
      if ((vminvq_u32((uint32x4_t)vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vand_s8(vzip1_s8(v142, *(int8x8_t *)v80.f32), vzip2_s8(v142, *(int8x8_t *)v80.f32))), 0x1FuLL))) & 0x80000000) != 0)
      {
        v169 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v141), (int16x8_t)vcvtq_s32_f32(v140));
        v170 = vsubq_f32(v141, v140);
        LODWORD(v171) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v170, 2), vaddq_f32(v170, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v170.f32, 1))).u32[0];
        if (fabsf(v171) > 1.0)
          goto LABEL_107;
        v172 = __clz(__rbit32(a1 + 1));
        v173 = ((a1 + 1) >> v172);
        v174 = *(_OWORD *)&v169 & __PAIR128__(0xFF00FF00FF00FFLL, 0xFF00FF00FF00FFLL);
        if (v172 && (_DWORD)v173 != 1)
        {
          v175 = (uint16x8_t)vsubq_s16(vdupq_n_s16(a1), (int16x8_t)v174);
          if ((_DWORD)v173 == 3)
            v176 = 21846;
          else
            v176 = 13108;
          v177 = (int8x16_t)vdupq_n_s16(v176);
          v178 = (int16x8_t)vminq_u16((uint16x8_t)v174, v175);
          v179 = (int16x8_t)vqshrn_high_n_u32(vqshrn_n_u32(vmull_u16(*(uint16x4_t *)v178.i8, *(uint16x4_t *)v177.i8), 0x10uLL), vmull_high_u16((uint16x8_t)v178, (uint16x8_t)v177), 0x10uLL);
          v177.i64[0] = 0x1000100010001;
          v177.i64[1] = 0x1000100010001;
          v174 = (unsigned __int128)vorrq_s8((int8x16_t)vaddq_s16((int16x8_t)vshlq_u16((uint16x8_t)vmlsq_s16(v178, v179, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8((a1 + 1) >> v172))), (uint16x8_t)vdupq_n_s16(v172)), vaddq_s16(v179, v179)), vbicq_s8(v177, (int8x16_t)vceqq_s16(v178, (int16x8_t)v174)));
        }
        v180 = v173 - 6;
        _ZF = (_DWORD)v173 == 1;
        v181 = -8;
        if (!_ZF)
          v181 = v180;
        v182 = GetUnquantizationData_UnquantizationInfo[3 * v172 + v181];
        v183 = (int16x8_t)vshlq_u16((uint16x8_t)v174, (uint16x8_t)vnegq_s16(vdupq_n_s16(WORD1(v182) & 7)));
        v184 = (int16x8_t)vandq_s8((int8x16_t)vdupq_n_s16(BYTE1(v182)), (int8x16_t)v174);
        v185 = (int16x8_t)vshlq_u16((uint16x8_t)vmulq_s16((int16x8_t)vshrq_n_u16((uint16x8_t)v184, 1uLL), vdupq_n_s16((v182 >> 28) & 0x1FF)), (uint16x8_t)vnegq_s16(vdupq_n_s16((v182 >> 37) & 7)));
        v186 = vandq_s8((int8x16_t)vdupq_n_s16((v182 >> 19) & 0x1FF), (int8x16_t)vcltzq_s16(vshlq_n_s16(v184, 0xFuLL)));
        v187 = (uint16x8_t)veorq_s8((int8x16_t)vmlaq_s16(v185, v183, (int16x8_t)vmovl_u8((uint8x8_t)vdup_n_s8(v182 >> 40))), v186);
        v185.i64[0] = 0x80008000800080;
        v185.i64[1] = 0x80008000800080;
        v188 = (uint16x8_t)vorrq_s8((int8x16_t)vshrq_n_u16(v187, 2uLL), vandq_s8(v186, (int8x16_t)v185));
        v189 = (int8x16_t)vdupq_n_s32(0x4B400000u);
        v190 = (float32x4_t)vdupq_n_s32(0xCB400000);
        v191 = vsubq_f32(vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_u16(*(uint16x4_t *)v188.i8), v189), v190), vaddq_f32((float32x4_t)vorrq_s8((int8x16_t)vmovl_high_u16(v188), v189), v190));
        v171 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v191, 2), vaddq_f32(v191, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v191.f32, 1))).f32[0];
        if (v171 != 0.0)
        {
LABEL_107:
          v192 = vmovn_s16(v169);
          if (v171 <= 0.0)
          {
            v193 = 1;
          }
          else
          {
            v192 = vext_s8(v192, v192, 4uLL);
            v169 = (int16x8_t)v80;
            v193 = -1;
            v80 = v139;
            v139 = (float32x4_t)v169;
          }
          if (v111 == v193)
          {
            v221 = vmulq_n_f32(v81, v245);
            *(int8x8_t *)v169.i8 = vext_s8(v110, v110, 4uLL);
            v219 = vmulq_f32(v221, (float32x4_t)xmmword_20631CFA0);
            v220 = vmulq_f32(vmulq_n_f32(v112, v245), (float32x4_t)xmmword_20631CFA0);
            *(int8x8_t *)v221.f32 = vext_s8(v192, v192, 4uLL);
            v222 = vmulq_f32(vmulq_n_f32(v80, v245), (float32x4_t)xmmword_20631CFA0);
            v223 = vmulq_f32(vmulq_n_f32(v139, v245), (float32x4_t)xmmword_20631CFA0);
            if (v89 > 0.0)
            {
              if (a5 >= 8)
              {
                v230 = a5 >> 3;
                v231 = a4;
                do
                {
                  v232 = vsubq_f32(v244, v231[1]);
                  *v231 = vsubq_f32(v244, *v231);
                  v231[1] = v232;
                  v231 += 2;
                  --v230;
                }
                while (v230);
                v224 = a5 & 0xFFFFFFFFFFFFFFF8;
              }
              else
              {
                v224 = 0;
              }
              v233 = a5 - v224;
              if (a5 > v224)
              {
                v234 = &a4->f32[v224];
                do
                {
                  *v234 = 1.0 - *v234;
                  ++v234;
                  --v233;
                }
                while (v233);
              }
            }
            *(float32x4_t *)a2 = v220;
            *(float32x4_t *)(a2 + 16) = vsubq_f32(v219, v220);
            v235 = vqtbl1_s8((int8x16_t)v169, ShuffleColorEndpointPair_mapTable[*a3]);
            *(int8x8_t *)(a2 + 32) = v235;
            *(float32x4_t *)(a2 + 48) = v222;
            *(float32x4_t *)(a2 + 64) = vsubq_f32(v223, v222);
            v236 = vqtbl1_s8((int8x16_t)v221, ShuffleColorEndpointPair_mapTable[*a3]);
            *(int8x8_t *)(a2 + 80) = v236;
            v168 = (uint8x8_t)vceq_s8(v235, v236);
            goto LABEL_81;
          }
        }
      }
    }
  }
  if (a5 >= 8)
  {
    v144 = a5 >> 3;
    v145 = a4;
    do
    {
      v146 = vsubq_f32(v244, v145[1]);
      *v145 = vsubq_f32(v244, *v145);
      v145[1] = v146;
      v145 += 2;
      --v144;
    }
    while (v144);
    v143 = a5 & 0xFFFFFFFFFFFFFFF8;
  }
  else
  {
    v143 = 0;
  }
  v147 = a5 - v143;
  if (a5 > v143)
  {
    v148 = &a4->f32[v143];
    do
    {
      *v148 = 1.0 - *v148;
      ++v148;
      --v147;
    }
    while (v147);
  }
  if (!a2)
    goto LABEL_79;
  v149 = (int16x8_t)vcvtq_s32_f32(v248);
  v150 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v247), v149);
  *(int8x8_t *)v150.i8 = vmovn_s16(v150);
  v151 = ShuffleColorEndpointPair_mapTable[*a3];
  v152 = vqtbl1_s8((int8x16_t)v150, v151);
  v153 = vuzp1q_s16((int16x8_t)vcvtq_s32_f32(v249), v149);
  *(int8x8_t *)v153.i8 = vmovn_s16(v153);
  v154 = vqtbl1_s8((int8x16_t)v153, v151);
  v155 = vmulq_n_f32(v247, v245);
  v156 = vmulq_n_f32(v249, v245);
  v157 = vmulq_n_f32(v248, v245);
  *(float32x4_t *)a2 = v156;
  *(float32x4_t *)(a2 + 16) = vsubq_f32(v157, v156);
  *(int8x8_t *)(a2 + 32) = v154;
  v158 = vsubq_f32(v157, v155);
LABEL_78:
  *(float32x4_t *)(a2 + 48) = v155;
  *(float32x4_t *)(a2 + 64) = v158;
  *(int8x8_t *)(a2 + 80) = v152;
LABEL_80:
  v168 = (uint8x8_t)vceq_s8(v154, v152);
LABEL_81:
  v168.i8[0] = vminv_u8(v168);
  return ((unsigned __int32)v168.i32[0] >> 7) & 1;
}

uint32_t at_texel_format_to_MTLPixelFormat(at_texel_format_t a1)
{
  at_texel_format_t v1;

  if (a1 <= at_texel_format_rgba16_float)
    v1 = a1;
  else
    v1 = at_texel_format_invalid;
  return at_texel_format_to_MTLPixelFormat_TexelFormatConversionTable[v1];
}

uint32_t at_block_format_convert_to_MTLPixelFormat(at_block_format_t blockFormat, at_flags_t flags)
{
  at_block_format_t v2;
  uint32_t *v3;
  uint32_t *v4;

  if (blockFormat <= at_block_format_bc7)
    v2 = blockFormat;
  else
    v2 = at_block_format_invalid;
  v3 = (uint32_t *)((char *)&at_block_format_convert_to_MTLPixelFormat_BlockFormatConversionTable + 4 * v2);
  if (v2 - 15 < 0xFFFFFFFFFFFFFFF2)
    v2 = at_block_format_invalid;
  v4 = (uint32_t *)((char *)&at_block_format_convert_to_MTLPixelFormat_BlockFormatConversionTableSRGB + 4 * v2);
  if ((flags & 0x20) != 0)
    v3 = v4;
  return *v3;
}

uint32_t at_block_format_to_MTLPixelFormat(at_block_format_t blockFormat)
{
  at_block_format_t v1;

  if (blockFormat <= at_block_format_bc7)
    v1 = blockFormat;
  else
    v1 = at_block_format_invalid;
  return at_block_format_convert_to_MTLPixelFormat_BlockFormatConversionTable[v1];
}

uint64_t DXTCEncoder::GetBlockFeaturesStatic(DXTCEncoder *this, at_block_format_t a2, at_flags_t a3)
{
  if ((unint64_t)this - 33 > 9)
    return 0;
  else
    return qword_20631D9B0[(_QWORD)this - 33];
}

void DXTCEncoder::~DXTCEncoder(DXTCEncoder *this)
{
  JUMPOUT(0x20BCF1508);
}

uint64_t DXTCEncoder::GetEncoderType(DXTCEncoder *this)
{
  return 2;
}

uint64_t DXTCEncoder::operator==(uint64_t a1, uint64_t a2)
{
  float32x4_t *v2;
  float32x4_t *v3;
  __int32 v4;
  __int32 v5;

  v2 = *(float32x4_t **)(a1 + 8);
  v3 = *(float32x4_t **)(a2 + 8);
  if (((v3[1].i32[0] ^ v2[1].i32[0]) & 0x7FFLL) != 0)
    return 0;
  if (((v3[1].i32[2] ^ v2[1].i32[2]) & 0x7FFLL) != 0)
    return 0;
  v4 = v2[2].i32[0];
  if (v4 != v3[2].i32[0])
    return 0;
  v5 = v2[2].i32[1];
  if (v5 != v3[2].i32[1])
    return 0;
  if (v4 != 1 && v5 == 1)
    return vminvq_u32((uint32x4_t)vceqq_f32(*v2, *v3)) >> 31;
  else
    return 1;
}

uint64_t DXTCEncoder::GetHash(DXTCEncoder *this)
{
  return *(_DWORD *)(*((_QWORD *)this + 1) + 16) & 0x3FF | ((*(_DWORD *)(*((_QWORD *)this + 1) + 24) & 0x3FF) << 10) & 0xFC0FFFFF | ((*(_DWORD *)(*((_QWORD *)this + 1) + 32) & 0x3F) << 20) | (*(_DWORD *)(*((_QWORD *)this + 1) + 36) << 26);
}

uint64_t DXTCEncoder::DebugDescription(DXTCEncoder *this, char *__str, size_t __size)
{
  return snprintf(__str, __size, "");
}

uint64_t DXTCEncoder::GetBlockCounts(DXTCEncoder *this, at_size_t a2)
{
  return ((*(_QWORD *)&a2.x >> 2) + 3221225472) & 0x3FFFFFFF00000000 | ((a2.x + 3) >> 2);
}

uint64_t (*EncoderCheck_DXTC(uint64_t a1))(uint64_t a1, uint64_t a2)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 16) & 0x7FFLL;
  if ((v1 - 1) <= 9)
  {
    v2 = *(_QWORD *)(a1 + 24) & 0x7FFLL;
    if ((v2 - 33) <= 9)
    {
      if (((*(_QWORD *)(a1 + 24) >> 26) & 0xF)
         * ((*(_QWORD *)(a1 + 16) >> 34) & 0x1F)
         * ((*(_QWORD *)(a1 + 24) >> 30) & 0xFuLL) > 0xF)
        return EncoderFactory_DXTC;
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_create: this combination of texelType (%u) and blockType (%u)\n                        would cause the image to grow larger.\n", v1, v2);
    }
  }
  return 0;
}

uint64_t EncoderFactory_DXTC(uint64_t a1, uint64_t a2)
{
  if (a2)
    DXTCEncoder::DXTCEncoder(a2, a1);
  return a2;
}

uint64_t DXTCEncoder::DXTCEncoder(uint64_t a1, uint64_t a2)
{
  return DXTCEncoder::DXTCEncoder(a1, a2);
}

{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(void *, const void *, unint64_t);
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _DWORD *exception;
  _DWORD *v14;
  _QWORD block[5];

  *(_QWORD *)a1 = &off_24BEFE3E0;
  *(_QWORD *)(a1 + 8) = a2;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 0x40000000;
  block[2] = ___ZN11DXTCEncoderC2ERK10CommonData_block_invoke;
  block[3] = &__block_descriptor_tmp_1;
  block[4] = a2;
  if (DXTCEncoder::DXTCEncoder(CommonData const&)::once_control != -1)
    dispatch_once(&DXTCEncoder::DXTCEncoder(CommonData const&)::once_control, block);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = (*(_QWORD *)(v3 + 16) & 0x7FFLL) - 1;
  if (v4 >= 0xA)
  {
    exception = __cxa_allocate_exception(4uLL);
    *exception = -1;
    __cxa_throw(exception, MEMORY[0x24BEDB798], 0);
  }
  v5 = off_24BEFE848[v4];
  v6 = qword_20631DA50[(int)v4];
  *(_QWORD *)(a1 + 40) = v5;
  v7 = *(_QWORD *)(v3 + 24) & 0x7FFLL;
  if ((v7 - 33) > 9)
    v8 = 0;
  else
    v8 = byte_20631DAA0[v7 - 33];
  *(_BYTE *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 73) = 1;
  if ((*(_DWORD *)(v3 + 24) & 0x7FFu) - 33 > 9)
  {
    v14 = __cxa_allocate_exception(4uLL);
    *v14 = -1;
    __cxa_throw(v14, MEMORY[0x24BEDB798], 0);
  }
  *(_QWORD *)(a1 + 32) = kReadProcs4x4[v6];
  v10 = *(unsigned int *)(v3 + 32);
  v9 = *(unsigned int *)(v3 + 36);
  v11 = v7 - 33;
  *(_QWORD *)(a1 + 16) = kAlphaProcs4x4[3 * v10 + v9];
  *(_QWORD *)(a1 + 56) = kWriteProcs[v6];
  *(_QWORD *)(a1 + 48) = kDecodeProcs[v11];
  *(_QWORD *)(a1 + 24) = kEncodeProcs[v11];
  *(_QWORD *)(a1 + 64) = kTexelAlphaProcs[3 * v9 + v10];
  return a1;
}

uint64_t DXTCEncoder::GetBlockSize(DXTCEncoder *this)
{
  uint64_t v1;

  v1 = (*(_QWORD *)(*((_QWORD *)this + 1) + 24) & 0x7FFLL) - 33;
  if (v1 > 9)
    return 0;
  else
    return qword_20631DA00[v1];
}

void sub_2062CCFE4(_Unwind_Exception *a1, int a2)
{
  if (a2 < 0)
    __cxa_call_unexpected(a1);
  _Unwind_Resume(a1);
}

void ___ZN11DXTCEncoderC2ERK10CommonData_block_invoke()
{
  kAlphaProcs4x4 = (uint64_t)PassThrough_4x4_vec;
  *(_QWORD *)algn_253D0B6E8 = FlattenNon_4x4_vec;
  qword_253D0B6F0 = (uint64_t)Premultiply_4x4_vec;
  unk_253D0B6F8 = SetAlphaOne_4x4_vec;
  qword_253D0B700 = (uint64_t)SetAlphaOne_4x4_vec;
  unk_253D0B708 = SetAlphaOne_4x4_vec;
  qword_253D0B710 = (uint64_t)Unpremultiply_4x4_vec;
  unk_253D0B718 = FlattenPre_4x4_vec;
  qword_253D0B720 = (uint64_t)ClampPremultiplied_4x4_vec;
  kReadProcs4x4 = (uint64_t)Read_4x4_R8_vec;
  unk_253D0B600 = Read_4x4_RA8_vec;
  qword_253D0B608 = (uint64_t)Read_4x4_RGBA8_vec;
  unk_253D0B610 = Read_4x4_BGRA8_vec;
  qword_253D0B618 = (uint64_t)Read_4x4_R16_vec;
  unk_253D0B620 = Read_4x4_RA16_vec;
  qword_253D0B628 = (uint64_t)Read_4x4_RGBA16_vec;
  unk_253D0B630 = Read_4x4_Rf16_vec;
  qword_253D0B638 = (uint64_t)Read_4x4_RAf16_vec;
  unk_253D0B640 = Read_4x4_RGBAf16_vec;
  kDecodeProcs = (uint64_t)decode_bc1;
  unk_2544F11C0 = decode_bc2;
  qword_2544F11C8 = (uint64_t)decode_bc3;
  unk_2544F11D0 = decode_bc4;
  qword_2544F11D8 = (uint64_t)decode_bc4s;
  unk_2544F11E0 = decode_bc5;
  qword_2544F11E8 = (uint64_t)decode_bc5s;
  unk_2544F11F0 = decode_bc6;
  qword_2544F11F8 = (uint64_t)decode_bc6;
  unk_2544F1200 = decode_bc7;
  kEncodeProcs = (uint64_t)encode_bc1;
  unk_2544F1210 = encode_bc2;
  qword_2544F1218 = (uint64_t)encode_bc3;
  unk_2544F1220 = encode_bc4;
  qword_2544F1230 = (uint64_t)encode_bc5;
  qword_2544F1250 = (uint64_t)EncodeDXTC_BC7_vec;
  kTexelAlphaProcs = (uint64_t)PassThrough_vec;
  unk_253D0B7D0 = FlattenNon_vec;
  qword_253D0B7D8 = (uint64_t)Premultiply_vec;
  unk_253D0B7E0 = SetAlphaOne_vec;
  qword_253D0B7E8 = (uint64_t)SetAlphaOne_vec;
  unk_253D0B7F0 = SetAlphaOne_vec;
  qword_253D0B7F8 = (uint64_t)Unpremultiply_vec;
  unk_253D0B800 = FlattenPre_vec;
  qword_253D0B808 = (uint64_t)ClampPremultiplied_vec;
  kWriteProcs = (uint64_t)Write_R8_vec;
  *(_QWORD *)algn_253D0B558 = Write_RA8_vec;
  qword_253D0B560 = (uint64_t)Write_RGBA8_vec;
  unk_253D0B568 = Write_BGRA8_vec;
  qword_253D0B570 = (uint64_t)Write_R16_vec;
  unk_253D0B578 = Write_RA16_vec;
  qword_253D0B580 = (uint64_t)Write_RGBA16_vec;
  unk_253D0B588 = Write_Rf16_vec;
  qword_253D0B590 = (uint64_t)Write_RAf16_vec;
  unk_253D0B598 = Write_RGBAf16_vec;
}

void DXTCEncoder::CompressTexels(DXTCEncoder *this, const at_texel_region_t *a2, const at_block_buffer_t *a3, float a4, at_flags_t a5)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  char v11;
  float v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  int v17;
  int v18;
  size_t v19;
  uint64_t v20;
  int v21;
  int v22;
  float v23;
  int v24;
  unsigned int v25;
  void *v26;
  float v27;
  __int128 *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *global_queue;
  _BOOL4 v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  qos_class_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  float v44;
  size_t v45;
  float *v46;
  float v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  int v56;
  float *v57;
  size_t v58;
  uint64_t v59;
  int v60;
  __int128 context;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  float *v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  _BOOL4 v79;
  int v80;
  float v81;
  float v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  _BYTE v92[16384];
  uint64_t v93;

  v5 = MEMORY[0x24BDAC7A8](this);
  v10 = v5;
  v93 = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(v5 + 72))
  {
    v11 = v8;
    if ((v8 & 0xFFFFFFFFFFFFFFA0) != 0)
    {
      fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels: the ASTC encoding does not support flag(s) 0x%16.16llx\n", v8 & 0xFFFFFFFFFFFFFFA0);
    }
    else
    {
      v12 = v9;
      v13 = v7;
      v14 = v6;
      v15 = v6 + 1;
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 56))(v5, v6[1], *((unsigned int *)v6 + 4));
      v18 = v17;
      v19 = HIDWORD(v16);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 64))(v10);
      v22 = v21;
      v23 = (float)(HIDWORD(v20) * v21 * v20) * v12;
      v56 = v16;
      if ((v11 & 8) != 0)
      {
        v57 = 0;
      }
      else if (v16 < 0x100100000000)
      {
        v57 = (float *)v92;
        bzero(v92, 4 * v19);
      }
      else
      {
        v57 = (float *)malloc_type_calloc(v19, 4uLL, 0x100004052888210uLL);
      }
      v24 = HIDWORD(v16) >> 4;
      if (HIDWORD(v16) <= 0x1F)
        v24 = 1;
      if ((v11 & 4) != 0)
        v25 = HIDWORD(v16);
      else
        v25 = v24;
      v26 = &DXTCEncoder::CompressTexels(at_texel_region_t const&,at_block_buffer_t const&,float,at_flags_t)const::kSRGBprimaries;
      if ((v11 & 0x40) != 0)
        v26 = 0;
      v55 = v26;
      if ((v11 & 0x40) != 0)
        v27 = 1.0;
      else
        v27 = 0.75;
      v28 = *(__int128 **)(v10 + 8);
      v48 = *v28;
      v58 = v19;
      v29 = *v14;
      v59 = *v15;
      v60 = *((_DWORD *)v15 + 2);
      v30 = *((_QWORD *)v28 + 2);
      v31 = (v30 >> 34) & 0x1F;
      LODWORD(v30) = (v30 >> 26) & 0xF;
      v50 = v31 / v30;
      v52 = v14[3];
      v49 = ((int)v30 + (int)v31 * (int)v20 - 1) / v30;
      v32 = *v13;
      v51 = v13[1];
      v53 = v13[2];
      v54 = v14[4];
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 72))(v10);
      global_queue = 0;
      v35 = (_DWORD)v20 * v56 != *((_DWORD *)v14 + 2);
      v36 = *(_DWORD *)(*(_QWORD *)(v10 + 8) + 36);
      v37 = *(_QWORD *)(v10 + 32);
      v38 = *(_QWORD *)(v10 + 40);
      context = v48;
      v62 = v55;
      v63 = v29;
      v64 = v32;
      v65 = v57;
      v67 = v60;
      v66 = v59;
      v68 = v20;
      v69 = v22;
      v70 = v50;
      v71 = v49;
      v72 = v52;
      v73 = v54;
      v74 = v51;
      v75 = v53;
      v76 = v33;
      v77 = v56;
      v78 = v58;
      v79 = v35;
      v80 = 0;
      v81 = v23;
      v82 = v27;
      v83 = v36;
      v84 = 0;
      v85 = 0;
      v86 = v25;
      v87 = v37;
      v88 = *(_OWORD *)(v10 + 16);
      v89 = v38;
      v91 = 0u;
      v90 = 0u;
      if ((v11 & 4) == 0 && v58 >= 2)
      {
        v39 = qos_class_self();
        global_queue = dispatch_get_global_queue(v39, 0);
      }
      if (v18)
      {
        v40 = 0;
        v41 = v58 + v25 - 1;
        if (v41 / v25 <= 1)
          v42 = 1;
        else
          v42 = v41 / v25;
        do
        {
          if (global_queue)
          {
            dispatch_apply_f(v41 / v25, global_queue, &context, (void (__cdecl *)(void *, size_t))EncodeRowBlock);
          }
          else if (v25 <= v41)
          {
            v43 = 0;
            do
            {
              EncodeRowBlock(&context);
              ++v43;
            }
            while (v42 != v43);
          }
          v63 += v73;
          v64 += v75;
          v67 -= v22;
          v80 = v40++;
        }
        while (v40 != v18);
      }
      if (v57)
      {
        v44 = 0.0;
        if (v58)
        {
          v45 = v58;
          v46 = v57;
          do
          {
            v47 = *v46++;
            v44 = v44 + v47;
            --v45;
          }
          while (v45);
        }
        if (v57 != (float *)v92)
          free(v57);
      }
    }
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x24BDAC8D8], "at_encoder_compress_texels: the ASTC encoding does not support output block format %u\n", *(_DWORD *)(*(_QWORD *)(v5 + 8) + 24) & 0x7FF);
  }
}

uint64_t DXTCEncoder::DecompressTexels(DXTCEncoder *this, const at_block_buffer_t *a2, const at_texel_region_t *a3, at_flags_t a4)
{
  unsigned int v4;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  uint64_t v16;
  __int128 v17;
  char *texels;
  uint64_t v19;
  size_t rowBytes;
  int v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  NSObject *global_queue;
  qos_class_t v26;
  int i;
  uint64_t v28;
  __int128 v30;
  uint64_t v31;
  char *v32;
  char *blocks;
  uint64_t v34;
  uint64_t v35;
  uint32_t z;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  _BOOL4 v47;
  _BYTE v48[20];
  __int128 v49;
  _BYTE v50[64];
  __int128 v51;
  uint64_t v52;

  v4 = a4;
  v8 = (*(uint64_t (**)(DXTCEncoder *, _QWORD, _QWORD))(*(_QWORD *)this + 56))(this, *(_QWORD *)&a3->validSize.x, a3->validSize.z);
  v9 = v8;
  v11 = v10;
  v12 = HIDWORD(v8);
  v52 = 0;
  v13 = (*(uint64_t (**)(DXTCEncoder *))(*(_QWORD *)this + 64))(this);
  v14 = v13;
  v51 = 0u;
  memset(&v50[16], 0, 48);
  v49 = 0u;
  memset(v50, 0, 40);
  *(_OWORD *)&v48[4] = 0u;
  v16 = *(_QWORD *)this;
  v15 = (__int128 *)*((_QWORD *)this + 1);
  v17 = *v15;
  texels = (char *)a3->texels;
  v19 = *(_QWORD *)&a3->validSize.x;
  v31 = 0;
  v32 = texels;
  rowBytes = a2->rowBytes;
  blocks = (char *)a2->blocks;
  v34 = 0;
  v35 = v19;
  z = a3->validSize.z;
  v37 = v13;
  v38 = v21;
  v22 = *((_QWORD *)v15 + 2);
  v23 = (v22 >> 34) & 0x1F;
  LODWORD(v22) = (v22 >> 26) & 0xF;
  v30 = v17;
  v39 = v23 / v22;
  v40 = ((int)v22 + (int)v23 * (int)v13 - 1) / v22;
  v41 = *(_OWORD *)&a3->rowBytes;
  v42 = rowBytes;
  v43 = 0;
  v44 = (*(uint64_t (**)(DXTCEncoder *))(v16 + 72))(this);
  v45 = 0;
  v46 = v12;
  v47 = v14 * v9 != a3->validSize.x;
  *(_QWORD *)&v49 = 0;
  *(_QWORD *)&v48[8] = 0;
  *(_QWORD *)v48 = 0;
  *(_DWORD *)v50 = 0;
  *((_QWORD *)&v49 + 1) = (v4 >> 5) & 1;
  *(_OWORD *)&v50[40] = *((_OWORD *)this + 3);
  *(_QWORD *)&v50[56] = *((_QWORD *)this + 8);
  *(_QWORD *)&v51 = &v52;
  v24 = (*(uint64_t (**)(DXTCEncoder *))(*(_QWORD *)this + 96))(this) - 37;
  if (v24 <= 4 && ((0x1Du >> v24) & 1) != 0)
    HIDWORD(v49) = dword_20631DAAC[v24];
  global_queue = 0;
  if ((v4 & 4) == 0 && v12 >= 2)
  {
    v26 = qos_class_self();
    global_queue = dispatch_get_global_queue(v26, 0);
  }
  if (v11)
  {
    for (i = 0; i != v11; ++i)
    {
      if (global_queue)
      {
        dispatch_apply_f(v12, global_queue, &v30, (void (__cdecl *)(void *, size_t))DecodeRow);
      }
      else if ((_DWORD)v12)
      {
        v28 = 0;
        do
          DecodeRow((uint64_t)&v30, v28++);
        while (v12 != v28);
      }
      v32 += *((_QWORD *)&v41 + 1);
      blocks += v43;
      --z;
      *(_DWORD *)v48 = i;
    }
  }
  return v52;
}

uint64_t DXTCEncoder::GetBlockDimensions(DXTCEncoder *this)
{
  return 0x400000004;
}

uint64_t decode_mode11(unsigned int *a1, unsigned int a2, int32x4_t *a3, int32x4_t *a4)
{
  char *v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t result;
  unsigned int v11;
  unsigned int v12;
  int32x4_t v13;
  int32x4_t v14;
  unsigned int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  unsigned int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  int v31;
  int v32;
  int v33;
  unsigned int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  int v39;
  int v40;
  unsigned int v41;
  int32x4_t v42;
  unsigned int v43;
  int32x4_t v44;
  int32x4_t v45;
  int32x4_t v46;
  int32x4_t v47;
  int32x4_t v48;
  int8x16_t v49;
  int8x16_t v50;

  v4 = (char *)&unquantizedColorTable + 256 * (unint64_t)a2;
  v5 = v4[*a1];
  v6 = v4[a1[1]];
  v7 = v4[a1[2]];
  v8 = v4[a1[3]];
  v9 = a1[5];
  result = v4[a1[4]];
  v11 = v4[v9];
  v12 = (v11 >> 6) & 2 | (result >> 7);
  if (v12 == 3)
  {
    v14 = vdupq_n_s32(0x780u);
    v13.i32[3] = v14.i32[3];
    v13.i32[0] = 16 * v5;
    v13.i32[1] = 16 * v7;
    v13.i32[2] = 32 * (result & 0x7F);
    *a3 = v13;
    v14.i32[0] = 16 * v6;
    v14.i32[1] = 16 * v8;
    v14.i32[2] = 32 * (v11 & 0x7F);
  }
  else
  {
    v15 = (v7 >> 6) & 2 | (v6 >> 7) | (v8 >> 5) & 4;
    v16 = -decode_mode11_dbitstab[v15];
    v17 = (int)((result & 0x7F) << v16) >> v16;
    v18 = (int)((v11 & 0x7F) << v16) >> v16;
    v19 = (v7 >> 6) & 1;
    v20 = (v8 >> 6) & 1;
    v21 = (result >> 6) & 1;
    v22 = (v11 >> 6) & 1;
    v23 = 1 << ((v7 >> 6) & 2 | (v6 >> 7) | (v8 >> 5) & 4);
    v24 = v19 << 9;
    if ((v23 & 0xA4) == 0)
      v24 = 0;
    v25 = (16 * result) & 0x200;
    if ((v23 & 0x50) == 0)
      v25 = 0;
    v26 = (32 * v11) & 0x400;
    if ((v23 & 0x50) == 0)
      v26 = 0;
    v27 = v20 << 10;
    if ((v23 & 0xA0) == 0)
      v27 = 0;
    v28 = v21 << 11;
    if (v15 < 6)
      v28 = 0;
    v29 = v28 & 0xFFFFFEFF | (((v6 >> 6) & 1) << 8) | v24 | (v23 << 6) & (v21 << 9) | v25 | v26 | v27 | v5;
    v30 = (16 * v23) & (v20 << 6) & 0xFFFFFFC0 | v6 & 0x3F;
    v31 = v22 << 6;
    if ((v23 & 0xE8) == 0)
      v31 = 0;
    v32 = v30 | (4 * v23) & (v21 << 7) | v31;
    v33 = v19 << 6;
    if ((v23 & 0x5B) == 0)
      v33 = 0;
    v34 = v33 & 0xFFFFFFC0 | v7 & 0x3F;
    if ((v23 & 0x5B) != 0)
      v35 = v20 << 6;
    else
      v35 = 0;
    v36 = v35 & 0xFFFFFFC0 | v8 & 0x3F;
    if ((v23 & 0x12) != 0)
      v37 = v21 << 7;
    else
      v37 = 0;
    v38 = v34 | v37;
    v39 = v22 << 7;
    if ((v23 & 0x12) == 0)
      v39 = 0;
    v40 = (v15 >> 1) ^ 3;
    v41 = v29 - v38;
    result = 1920;
    v42 = vdupq_n_s32(0x780u);
    v43 = v29 - (v36 | v39);
    v44.i32[3] = v42.i32[3];
    v44.i32[0] = v29 << v40;
    v44.i32[1] = v41 << v40;
    v44.i32[2] = v43 << v40;
    v45.i64[0] = 0xF0000000FLL;
    v45.i64[1] = 0xF0000000FLL;
    v14 = vminq_s32(vmaxq_s32(v44, (int32x4_t)0), v45);
    v42.i32[0] = (v29 - v32) << v40;
    v42.i32[1] = (v41 - (v32 + v17)) << v40;
    v42.i32[2] = (v43 - (v32 + v18)) << v40;
    v46 = vminq_s32(vmaxq_s32(v42, (int32x4_t)0), v45);
    if (v12 == 2)
    {
      v49 = (int8x16_t)vrev64q_s32(v46);
      v46 = (int32x4_t)vextq_s8(v49, v49, 0xCuLL);
      v50 = (int8x16_t)vrev64q_s32(v14);
      v14 = (int32x4_t)vextq_s8(v50, v50, 0xCuLL);
    }
    else if (v12 == 1)
    {
      v47.i64[0] = vrev64q_s32(v46).u64[0];
      v47.i64[1] = v46.i64[1];
      v48.i64[0] = vrev64q_s32(v14).u64[0];
      v48.i64[1] = v14.i64[1];
      v14 = v48;
      v46 = v47;
    }
    *a3 = v46;
  }
  *a4 = v14;
  return result;
}

uint64_t encode_bc1(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[16];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = a1[38];
  v12[12] = a1[37];
  v12[13] = v3;
  v4 = a1[40];
  v12[14] = a1[39];
  v12[15] = v4;
  v5 = a1[34];
  v12[8] = a1[33];
  v12[9] = v5;
  v6 = a1[36];
  v12[10] = a1[35];
  v12[11] = v6;
  v7 = a1[30];
  v12[4] = a1[29];
  v12[5] = v7;
  v8 = a1[32];
  v12[6] = a1[31];
  v12[7] = v8;
  v9 = a1[26];
  v12[0] = a1[25];
  v12[1] = v9;
  v10 = a1[28];
  v12[2] = a1[27];
  v12[3] = v10;
  return EncodeBC1(a3, (uint64_t)v12, 1);
}

uint64_t EncodeBC1(uint64_t result, uint64_t a2, int a3)
{
  float32x4_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t i;
  float32x2_t v9;
  __int128 v10;
  uint64_t v11;
  float32x4_t v12;
  float32x4_t v13;
  float32x4_t v14;
  int16x4_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int8x16_t v18;
  int32x4_t v19;
  int16x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int8x16_t v23;
  float *v24;
  float *v25;
  float32x2_t v26;
  float v27;
  float v28;
  float32x4_t v29;
  float32x4_t v30;
  uint64_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float32x2_t v38;
  float v39;
  float v40;
  char v41;
  uint64_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int64x2_t v48;
  int8x16_t v49;
  uint64_t v50;
  float v51;
  uint64_t j;
  float v53;
  float v54;
  __int128 v55;
  float32x2_t v56;
  float v57;
  float v58;
  uint64_t v59;
  float v60;
  float v61;
  float v62;
  float v63;
  int8x16_t v64;
  int32x4_t v65;
  float v66;
  float32x2_t v67;
  float v68;
  unsigned int v69;
  float32x2_t *v70;
  float32x2_t v73;
  int32x4_t v74;
  int8x16_t v80;
  int8x16_t v82;
  float32x4_t v84;
  int32x2_t v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  int v93;
  unsigned int v94;
  float v95;
  float v96;
  float v97;
  unsigned int v98;
  int v99;
  float v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  float32x2_t v105;
  float32x2_t v106;
  float32x4_t v107;
  float32x4_t v108;
  __int16 v109;
  float32x4_t v110;
  _QWORD *v111;
  float32x4_t v112;
  float v113;
  float v114;
  uint64_t v115;
  float v116;
  uint64_t v117;
  _BYTE v118[332];
  float v119;
  float v120;
  float v121;
  uint64_t v122;

  v122 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (*(float *)(a2 + 12 + v5) < 0.0)
        ++v6;
      v5 += 16;
    }
    while (v5 != 256);
    if (v6 == 16)
    {
      *(_QWORD *)result = -65536;
      return result;
    }
    if (v6)
      v7 = 3;
    else
      v7 = 4;
  }
  else
  {
    v7 = 4;
  }
  for (i = 0; i != 256; i += 16)
  {
    v9.f32[0] = (float)(int)(float)((float)(*(float *)(a2 + i) * 31.0) + 0.5) * 0.032258;
    v9.f32[1] = (float)(int)(float)((float)(*(float *)(a2 + i + 4) * 63.0) + 0.5);
    *(float32x2_t *)&v10 = vmul_f32(v9, (float32x2_t)0x3C8208213E981530);
    *((float *)&v10 + 2) = (float)((float)(int)(float)((float)(*(float *)(a2 + i + 8) * 31.0) + 0.5) * 0.032258)
                         * 0.10078;
    HIDWORD(v10) = 1.0;
    *(_OWORD *)&v118[i] = v10;
  }
  v11 = 0;
  v12 = (float32x4_t)xmmword_20631C870;
  v13 = (float32x4_t)xmmword_20631FC60;
  do
  {
    v14 = *(float32x4_t *)&v118[v11];
    v21 = vcgtq_f32(v13, v14);
    v15 = vmovn_s32(v21);
    v16 = (int64x2_t)vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(v15, 0)), (int8x16_t)v14, (int8x16_t)v13);
    v13.i32[0] = v16.i32[0];
    v17 = (int64x2_t)vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(v15, 1)), (int8x16_t)v14, (int8x16_t)v13);
    v13.i32[1] = v17.i32[1];
    v18 = vbslq_s8((int8x16_t)v21, (int8x16_t)v14, (int8x16_t)v13);
    v13.i32[2] = v18.i32[2];
    v19 = vcgtq_f32(v14, v12);
    v20 = vmovn_s32(v19);
    v21.i32[0] = vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(v20, 0)), (int8x16_t)v14, (int8x16_t)v12).u32[0];
    v12.i32[0] = v21.i32[0];
    v22 = vbslq_s8((int8x16_t)vmovl_s16(vdup_lane_s16(v20, 1)), (int8x16_t)v14, (int8x16_t)v12);
    v12.i32[1] = v22.i32[1];
    v23 = vbslq_s8((int8x16_t)v19, (int8x16_t)v14, (int8x16_t)v12);
    v12.i32[2] = v23.i32[2];
    v11 += 16;
  }
  while (v11 != 256);
  v24 = (float *)&_ZZL11OptimizeRGBPDv4_fS0_PKS_jjE3pC4;
  if (v7 == 3)
    v24 = (float *)&_ZZL11OptimizeRGBPDv4_fS0_PKS_jjE3pC3;
  v25 = (float *)&_ZZL11OptimizeRGBPDv4_fS0_PKS_jjE3pD4;
  v21.i32[1] = v22.i32[1];
  v16.i32[1] = v17.i32[1];
  if (v7 == 3)
    v25 = (float *)&_ZZL11OptimizeRGBPDv4_fS0_PKS_jjE3pD3;
  v26 = vsub_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v16.i8);
  v27 = *(float *)&v23.i32[2] - *(float *)&v18.i32[2];
  v28 = vmlas_n_f32(COERCE_FLOAT(vmul_f32(v26, v26).i32[1]), v26.f32[0], v26.f32[0]) + (float)(v27 * v27);
  if (v28 >= 1.1755e-38)
  {
    v31 = 0;
    v32 = vmul_n_f32(v26, 1.0 / v28);
    *(float *)v23.i32 = v27 * (float)(1.0 / v28);
    v33 = vmul_f32(vadd_f32(*(float32x2_t *)v21.i8, *(float32x2_t *)v16.i8), (float32x2_t)0x3F0000003F000000);
    v34 = 0.0;
    v35 = 0.0;
    v36 = 0.0;
    v37 = 0.0;
    do
    {
      v38 = vmul_f32(v32, vsub_f32(*(float32x2_t *)&v118[v31], v33));
      v39 = *(float *)v23.i32
          * (float)(*(float *)&v118[v31 + 8] - (float)((float)(*(float *)&v23.i32[2] + *(float *)&v18.i32[2]) * 0.5));
      v40 = vaddv_f32(v38);
      v34 = v34 + (float)((float)(v39 + v40) * (float)(v39 + v40));
      v35 = v35 + (float)((float)(v40 - v39) * (float)(v40 - v39));
      v38.f32[0] = v38.f32[0] - v38.f32[1];
      v36 = v36 + (float)((float)(v39 + v38.f32[0]) * (float)(v39 + v38.f32[0]));
      v37 = v37 + (float)((float)(v38.f32[0] - v39) * (float)(v38.f32[0] - v39));
      v31 += 16;
    }
    while (v31 != 256);
    v41 = 0;
    v119 = v35;
    v120 = v36;
    v42 = 1;
    v121 = v37;
    do
    {
      if (*(float *)&v118[4 * v42 + 328] > v34)
      {
        v34 = *(float *)&v118[4 * v42 + 328];
        v41 = v42;
      }
      ++v42;
    }
    while (v42 != 4);
    v17.i64[0] = 0;
    v16.i64[0] = v41 & 2;
    v43 = (int8x16_t)vceqq_s64(v16, v17);
    v44 = vandq_s8((int8x16_t)v13, v43);
    v45 = (int8x16_t)vdupq_lane_s64(v43.i64[0], 0);
    v46 = vbicq_s8((int8x16_t)v12, v45);
    v47 = vorrq_s8(vandq_s8((int8x16_t)v12, v43), vbicq_s8((int8x16_t)v13, v45));
    v30 = v12;
    v30.i32[1] = v47.i32[1];
    v48 = (int64x2_t)vorrq_s8(v44, v46);
    v29 = v13;
    v29.i32[1] = v48.i32[1];
    v48.i64[0] = v41 & 1;
    v49 = (int8x16_t)vdupq_lane_s64(vceqq_s64(v48, v17).i64[0], 0);
    v30.i32[2] = vbslq_s8(v49, *(int8x16_t *)&v12, *(int8x16_t *)&v13).i32[2];
    v29.i32[2] = vbslq_s8(v49, *(int8x16_t *)&v13, *(int8x16_t *)&v12).i32[2];
    if (v28 >= 0.00024414)
    {
      v50 = 0;
      v51 = (float)(v7 - 1);
      do
      {
        for (j = 0; j != v7; *(_OWORD *)&v118[16 * j++ + 256] = v55)
        {
          v53 = v24[j];
          v54 = v25[j];
          *(float32x2_t *)&v55 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)v30.f32, v54), *(float32x2_t *)v29.f32, v53);
          *((_QWORD *)&v55 + 1) = __PAIR64__(1.0, (float)(v30.f32[2] * v54) + (float)(v29.f32[2] * v53));
        }
        v56 = (float32x2_t)vsubq_f32(v30, v29).u64[0];
        v57 = v30.f32[2] - v29.f32[2];
        v58 = vmlas_n_f32(vmuls_lane_f32(v56.f32[1], v56, 1), v56.f32[0], v56.f32[0]) + (float)(v57 * v57);
        if (v58 < 0.00024414)
          break;
        v59 = 0;
        v60 = v51 / v58;
        v61 = v56.f32[0] * (float)(v51 / v58);
        v62 = v56.f32[1] * v60;
        v63 = v57 * v60;
        v64 = 0uLL;
        v65 = 0uLL;
        v66 = 0.0;
        do
        {
          v67 = *(float32x2_t *)&v118[v59];
          _Q29.i32[0] = *(_DWORD *)&v118[v59 + 8];
          v68 = (float)((float)(v62 * (float)(v67.f32[1] - v29.f32[1])) + (float)((float)(v67.f32[0] - v29.f32[0]) * v61))
              + (float)((float)(_Q29.f32[0] - v29.f32[2]) * v63);
          if (v68 <= 0.0)
          {
            v69 = 0;
          }
          else
          {
            v69 = v7 - 1;
            if (v68 < v51)
              v69 = (float)(v68 + 0.5);
          }
          v70 = (float32x2_t *)&v118[16 * v69 + 256];
          _Q29.f32[0] = v70[1].f32[0] - _Q29.f32[0];
          v4.f32[0] = v24[v69];
          _S31 = LODWORD(v25[v69]);
          _Q8 = (int32x4_t)v4;
          _Q8.i32[1] = _S31;
          *(float32x2_t *)_Q8.i8 = vmul_f32(*(float32x2_t *)_Q8.i8, (float32x2_t)0x3E0000003E000000);
          v66 = vmlas_n_f32(v66, v4.f32[0], *(float *)_Q8.i32);
          *(float32x2_t *)v4.f32 = vsub_f32(*v70, v67);
          v73 = vmla_n_f32(*(float32x2_t *)v65.i8, *(float32x2_t *)v4.f32, *(float *)_Q8.i32);
          *(float32x2_t *)v74.i8 = v73;
          v4 = (float32x4_t)vextq_s8(vextq_s8((int8x16_t)_Q29, (int8x16_t)_Q29, 4uLL), (int8x16_t)v4, 0xCuLL);
          v4.i32[3] = v4.i32[0];
          _Q29 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v65, v65), v64, 0xCuLL), v4, (float32x4_t)vzip1q_s32(_Q8, vdupq_lane_s32(*(int32x2_t *)_Q8.i8, 1)));
          v74.i64[1] = __PAIR64__(vextq_s8(*(int8x16_t *)&v65, *(int8x16_t *)&v65, 8uLL).u32[1], _Q29.u32[0]);
          __asm { FMLA            S21, S31, V8.S[1] }
          v64 = vextq_s8((int8x16_t)_Q29, vextq_s8(v64, v64, 0xCuLL), 4uLL);
          v59 += 16;
          v65 = v74;
        }
        while (v59 != 256);
        if (v66 > 0.0)
        {
          v80 = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL);
          *(float32x2_t *)v29.f32 = vmla_n_f32(*(float32x2_t *)v29.f32, v73, -1.0 / v66);
          v29.i64[1] = __PAIR64__(v80.u32[1], COERCE_UNSIGNED_INT(vmlas_n_f32(v29.f32[2], -1.0 / v66, _Q29.f32[0])));
        }
        if (_S21 > 0.0)
        {
          _S19 = -1.0 / _S21;
          v82 = vextq_s8((int8x16_t)v30, (int8x16_t)v30, 8uLL);
          *(float32x2_t *)v30.f32 = vmla_n_f32(*(float32x2_t *)v30.f32, (float32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q29, (int8x16_t)_Q29, 4uLL), _S19);
          __asm { FMLA            S18, S19, V29.S[3] }
          v30.i64[1] = __PAIR64__(v82.u32[1], _S18);
        }
        v84 = (float32x4_t)vdupq_n_s32(0x37800000u);
        v85 = vcgt_f32(*(float32x2_t *)v84.f32, vmul_f32(v73, v73));
        if ((v85.i8[0] & 1) != 0
          && (vaddvq_s32((int32x4_t)vbicq_s8((int8x16_t)xmmword_20631FC70, (int8x16_t)vcgtq_f32(v84, vmulq_f32(_Q29, _Q29)))) & 0xF) == 0&& (v85.i8[4] & 1) != 0)
        {
          break;
        }
        ++v50;
      }
      while (v50 != 8);
    }
    v29.i32[3] = 1.0;
    v30.i32[3] = 1.0;
  }
  else
  {
    v13.i32[3] = 1.0;
    v12.i32[3] = 1.0;
    v29 = v13;
    v30 = v12;
  }
  v86 = vmuls_lane_f32(9.9223, v29, 2);
  v87 = 0.0;
  if ((float)(3.3666 * v29.f32[0]) <= 1.0)
    v88 = 3.3666 * v29.f32[0];
  else
    v88 = 1.0;
  if ((float)(3.3666 * v29.f32[0]) >= 0.0)
    v89 = v88;
  else
    v89 = 0.0;
  v90 = 0.0;
  if (v29.f32[1] >= 0.0)
  {
    v90 = 1.0;
    if (v29.f32[1] <= 1.0)
      v90 = v29.f32[1];
  }
  v91 = 3.3666 * v30.f32[0];
  if (v86 >= 0.0)
  {
    v87 = 1.0;
    if (v86 <= 1.0)
      v87 = v86;
  }
  v92 = vmuls_lane_f32(9.9223, v30, 2);
  v93 = (int)(float)((float)(v87 * 31.0) + 0.5);
  v94 = (32 * (int)(float)((float)(v90 * 63.0) + 0.5)) | ((int)(float)((float)(v89 * 31.0) + 0.5) << 11) | v93;
  v95 = 0.0;
  if (v91 <= 1.0)
    v96 = 3.3666 * v30.f32[0];
  else
    v96 = 1.0;
  if (v91 < 0.0)
    v96 = 0.0;
  v97 = 0.0;
  if (v30.f32[1] >= 0.0)
  {
    v97 = 1.0;
    if (v30.f32[1] <= 1.0)
      v97 = v30.f32[1];
  }
  v98 = (unsigned __int16)((32 * (int)(float)((float)(v90 * 63.0) + 0.5)) | ((unsigned __int16)(int)(float)((float)(v89 * 31.0) + 0.5) << 11) | v93);
  if (v92 >= 0.0)
  {
    v95 = 1.0;
    if (v92 <= 1.0)
      v95 = v92;
  }
  v99 = (int)(float)((float)(v96 * 31.0) + 0.5);
  v100 = (float)(v97 * 63.0) + 0.5;
  v101 = (int)(float)((float)(v95 * 31.0) + 0.5);
  v102 = (32 * (int)v100) | (v99 << 11) | v101;
  v103 = (unsigned __int16)((32 * (int)v100) | ((_WORD)v99 << 11) | v101);
  if (v7 == 4 && v98 == v103)
  {
    v104 = 0;
    *(_WORD *)result = v94;
    *(_WORD *)(result + 2) = v94;
  }
  else
  {
    v105.f32[0] = (float)((unsigned __int16)v94 >> 11) * 0.032258;
    v106.f32[0] = (float)((unsigned __int16)v102 >> 11) * 0.032258;
    v105.f32[1] = (float)((v94 >> 5) & 0x3F);
    *(float32x2_t *)v107.f32 = vmul_f32(v105, (float32x2_t)0x3C8208213E981530);
    v107.i32[3] = vextq_s8(*(int8x16_t *)&v29, *(int8x16_t *)&v29, 8uLL).i32[1];
    v107.f32[2] = (float)((float)(v93 & 0x1F) * 0.032258) * 0.10078;
    v106.f32[1] = (float)((v102 >> 5) & 0x3F);
    *(float32x2_t *)v108.f32 = vmul_f32(v106, (float32x2_t)0x3C8208213E981530);
    v108.i32[3] = vextq_s8(*(int8x16_t *)&v30, *(int8x16_t *)&v30, 8uLL).i32[1];
    v108.f32[2] = (float)((float)((int)(float)((float)(v95 * 31.0) + 0.5) & 0x1F) * 0.032258) * 0.10078;
    if ((v7 == 3) != v98 > v103)
    {
      v109 = (32 * (int)(float)((float)(v90 * 63.0) + 0.5)) | ((unsigned __int16)(int)(float)((float)(v89 * 31.0) + 0.5) << 11) | v93;
      LOWORD(v94) = v103;
      v110 = v108;
      v108 = v107;
    }
    else
    {
      v109 = v103;
      v110 = v107;
    }
    *(_WORD *)result = v109;
    *(_WORD *)(result + 2) = v94;
    v111 = &_ZZL9EncodeBC1P8D3DX_BC1PKDv4_fbfjE7pSteps4;
    if (v7 == 3)
      v111 = &_ZZL9EncodeBC1P8D3DX_BC1PKDv4_fbfjE7pSteps3;
    v112 = vsubq_f32(v110, v108);
    v113 = (float)(v7 - 1);
    v114 = 0.0;
    if (v98 != v103)
      v114 = v113
           / (float)((float)((float)(v112.f32[1] * v112.f32[1]) + (float)(v112.f32[0] * v112.f32[0]))
                   + (float)(v112.f32[2] * v112.f32[2]));
    v115 = 0;
    v104 = 0;
    v112.f32[0] = v112.f32[0] * v114;
    do
    {
      if (v7 == 3 && *(float *)(a2 + v115 + 12) < 0.0)
      {
        v104 = (v104 >> 2) | 0xC0000000;
      }
      else
      {
        v116 = (float)((float)((float)(v112.f32[1] * v114) * (float)(*(float *)(a2 + v115 + 4) - v108.f32[1]))
                     + (float)((float)-(float)(v108.f32[0] - (float)(*(float *)(a2 + v115) * 0.29704)) * v112.f32[0]))
             + (float)((float)-(float)(v108.f32[2] - (float)(*(float *)(a2 + v115 + 8) * 0.10078))
                     * (float)(v112.f32[2] * v114));
        if (v116 <= 0.0)
        {
          LODWORD(v117) = 0;
        }
        else if (v116 >= v113)
        {
          LODWORD(v117) = 1;
        }
        else
        {
          v117 = v111[(float)(v116 + 0.5)];
        }
        v104 = __PAIR64__(v117, v104) >> 2;
      }
      v115 += 16;
    }
    while (v115 != 256);
  }
  *(_DWORD *)(result + 4) = v104;
  return result;
}

uint64_t encode_bc2(_OWORD *a1, uint64_t a2, _QWORD *a3)
{
  unint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  float *v12;
  float v13;
  uint64_t v14;
  unint64_t v15;
  _OWORD v17[16];
  uint64_t v18;

  v3 = 0;
  v18 = *MEMORY[0x24BDAC8D0];
  v4 = a1[38];
  v17[12] = a1[37];
  v17[13] = v4;
  v5 = a1[40];
  v17[14] = a1[39];
  v17[15] = v5;
  v6 = a1[34];
  v17[8] = a1[33];
  v17[9] = v6;
  v7 = a1[36];
  v17[10] = a1[35];
  v17[11] = v7;
  v8 = a1[30];
  v17[4] = a1[29];
  v17[5] = v8;
  v9 = a1[32];
  v17[6] = a1[31];
  v17[7] = v9;
  v10 = a1[26];
  v17[0] = a1[25];
  v17[1] = v10;
  v11 = a1[28];
  v17[2] = a1[27];
  v17[3] = v11;
  v12 = (float *)((unint64_t)v17 | 0xC);
  *a3 = 0;
  do
  {
    v13 = *v12;
    v12 += 4;
    v14 = (v3 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
    HIDWORD(v15) = (float)((float)(v13 * 15.0) + 0.5);
    LODWORD(v15) = *(_DWORD *)((char *)a3 + v14);
    *(_DWORD *)((char *)a3 + v14) = v15 >> 4;
    ++v3;
  }
  while (v3 != 16);
  return EncodeBC1((uint64_t)(a3 + 1), (uint64_t)v17, 0);
}

uint64_t encode_bc3(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  float v13;
  float v14;
  float v15;
  uint64_t result;
  _BOOL4 v17;
  unsigned int v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  float v29;
  uint64_t v30;
  float v31;
  float v32;
  char v33;
  uint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char v38;
  uint64_t v39;
  float *v40;
  float v41;
  float v42;
  uint64_t v43;
  unsigned int v44;
  unsigned int v45;
  _BYTE *v46;
  uint64_t v47;
  float v48;
  float v49;
  _OWORD v50[4];
  _OWORD v51[16];
  uint64_t v52;

  v4 = 0;
  v52 = *MEMORY[0x24BDAC8D0];
  v5 = a1[38];
  v51[12] = a1[37];
  v51[13] = v5;
  v6 = a1[40];
  v51[14] = a1[39];
  v51[15] = v6;
  v7 = a1[34];
  v51[8] = a1[33];
  v51[9] = v7;
  v8 = a1[36];
  v51[10] = a1[35];
  v51[11] = v8;
  v9 = a1[30];
  v51[4] = a1[29];
  v51[5] = v9;
  v10 = a1[32];
  v51[6] = a1[31];
  v51[7] = v10;
  v11 = a1[26];
  v51[0] = a1[25];
  v51[1] = v11;
  v12 = a1[28];
  v51[2] = a1[27];
  v51[3] = v12;
  memset(v50, 0, sizeof(v50));
  v13 = *((float *)v51 + 3);
  v14 = *((float *)v51 + 3);
  do
  {
    v15 = (float)(int)(float)((float)(*((float *)&v51[v4] + 3) * 255.0) + 0.5) * 0.0039216;
    *(float *)((char *)v50 + v4 * 4) = v15;
    if (v15 >= v14)
    {
      if (v15 > v13)
        v13 = v15;
    }
    else
    {
      v14 = v15;
    }
    ++v4;
  }
  while (v4 != 16);
  result = EncodeBC1(a3 + 8, (uint64_t)v51, 0);
  if (v14 == 1.0)
  {
    *(_WORD *)a3 = -1;
LABEL_9:
    *(_DWORD *)(a3 + 2) = 0;
    *(_WORD *)(a3 + 6) = 0;
    return result;
  }
  v17 = v13 == 1.0 || v14 == 0.0;
  if (v17)
    v18 = 6;
  else
    v18 = 8;
  v47 = 0;
  result = (uint64_t)OptimizeAlpha<false>((float *)&v47 + 1, (float *)&v47, (uint64_t)v50, v18);
  v19 = (int)(float)((float)(*((float *)&v47 + 1) * 255.0) + 0.5);
  v20 = (int)(float)((float)(*(float *)&v47 * 255.0) + 0.5);
  v21 = v20;
  if (v17)
  {
    *(_BYTE *)a3 = v19;
    *(_BYTE *)(a3 + 1) = v20;
    v22 = 4;
    v48 = (float)v19 * 0.0039216;
    v49 = (float)v21 * 0.0039216;
    v23 = 2;
    v24 = &encode_bc3::pSteps6;
    do
    {
      *(&v48 + v23) = (float)((float)(v49 * (float)(unint64_t)(v23 - 1)) + (float)(v48 * (float)v22)) * 0.2;
      ++v23;
      --v22;
    }
    while (v22);
  }
  else
  {
    if (v20 == v19)
    {
      *(_BYTE *)a3 = v19;
      *(_BYTE *)(a3 + 1) = v20;
      goto LABEL_9;
    }
    *(_BYTE *)a3 = v20;
    *(_BYTE *)(a3 + 1) = v19;
    v25 = 6;
    v48 = (float)v21 * 0.0039216;
    v49 = (float)v19 * 0.0039216;
    v26 = 2;
    v24 = &encode_bc3::pSteps8;
    do
    {
      *(&v48 + v26) = (float)((float)(v49 * (float)(unint64_t)(v26 - 1)) + (float)(v48 * (float)v25)) * 0.14286;
      ++v26;
      --v25;
    }
    while (v25);
  }
  v27 = (float)(v18 - 1);
  v28 = v48;
  if (v48 == v49)
    v29 = 0.0;
  else
    v29 = v27 / (float)(v49 - v48);
  v30 = 0;
  v31 = v48 * 0.5;
  v32 = (float)(v49 + 1.0) * 0.5;
  v33 = 1;
  v34 = 8;
  do
  {
    LOBYTE(v35) = 0;
    LOBYTE(result) = 0;
    LOBYTE(v36) = 0;
    v37 = 0;
    v38 = v33;
    v39 = 8 * v30;
    v40 = (float *)(((unint64_t)v51 | 0xC) + (v30 << 7));
    do
    {
      v41 = *v40;
      v42 = v29 * (float)(*v40 - v28);
      if (v42 <= 0.0)
      {
        if (v17 && v41 <= v31)
          LODWORD(v43) = 6;
        else
          LODWORD(v43) = 0;
      }
      else if (v42 >= v27)
      {
        if (v17)
        {
          if (v41 < v32)
            LODWORD(v43) = 1;
          else
            LODWORD(v43) = 7;
        }
        else
        {
          LODWORD(v43) = 1;
        }
      }
      else
      {
        v43 = v24[(float)(v42 + 0.5)];
      }
      v44 = (v36 << 16) | v37 | (result << 8);
      v35 = (v44 | v35 & 0xF8) >> 3;
      v45 = ((_DWORD)v43 << 21) | v35;
      v36 = HIWORD(v45);
      result = v44 >> 11;
      v37 = v45 & 0xFF000000;
      ++v39;
      v40 += 4;
    }
    while (v34 != v39);
    v33 = 0;
    v46 = (_BYTE *)(a3 + 3 * v30);
    v46[2] = v35;
    v46[3] = result;
    v46[4] = v36;
    v34 += 8;
    v30 = 1;
  }
  while ((v38 & 1) != 0);
  return result;
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete()
{
  return off_24BEFE178();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_call_unexpected(void *a1)
{
  MEMORY[0x24BEDB918](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

uint64_t _os_object_alloc()
{
  return MEMORY[0x24BDACBD0]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

void dispatch_apply_f(size_t iterations, dispatch_queue_t queue, void *context, void (__cdecl *work)(void *, size_t))
{
  MEMORY[0x24BDADC98](iterations, queue, context, work);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

int dladdr(const void *a1, Dl_info *a2)
{
  return MEMORY[0x24BDAE058](a1, a2);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAE428](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED78](size, type_id);
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x24BDAED80](memptr, alignment, size, type_id);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

void memset_pattern4(void *__b, const void *__pattern4, size_t __len)
{
  MEMORY[0x24BDAEEB8](__b, __pattern4, __len);
}

void memset_pattern8(void *__b, const void *__pattern8, size_t __len)
{
  MEMORY[0x24BDAEEC0](__b, __pattern8, __len);
}

Class objc_lookUpClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD0F0](name);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x24BEDD120](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x24BEDD130]();
}

void os_release(void *object)
{
  MEMORY[0x24BDAF3F0](object);
}

int printf(const char *a1, ...)
{
  return MEMORY[0x24BDAF6A8](a1);
}

void *__cdecl pthread_get_stackaddr_np(pthread_t a1)
{
  return (void *)MEMORY[0x24BDAF840](a1);
}

size_t pthread_get_stacksize_np(pthread_t a1)
{
  return MEMORY[0x24BDAF848](a1);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

int puts(const char *a1)
{
  return MEMORY[0x24BDAF9F8](a1);
}

qos_class_t qos_class_self(void)
{
  return MEMORY[0x24BDAFA10]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

