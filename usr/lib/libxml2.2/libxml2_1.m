int xmlDOMWrapCloneNode(xmlDOMWrapCtxtPtr ctxt, xmlDocPtr sourceDoc, xmlNodePtr node, xmlNodePtr *clonedNode, xmlDocPtr destDoc, xmlNodePtr destParent, int deep, int options)
{
  int v8;
  _xmlDoc *doc;
  _xmlDoc **p_doc;
  xmlDocPtr v15;
  _xmlDict *v16;
  _OWORD *v18;
  _OWORD *v19;
  xmlNode *v20;
  int v21;
  int v22;
  xmlNodePtr v23;
  xmlElementType type;
  BOOL v25;
  _QWORD *v26;
  _OWORD *v27;
  _OWORD *v28;
  const xmlChar *name;
  int v30;
  const xmlChar *v31;
  const xmlChar *v32;
  const xmlChar *content;
  int v34;
  const xmlChar *v35;
  xmlEntityPtr DocEntity;
  void *v37;
  _QWORD *v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  const xmlChar *v42;
  const xmlChar *v43;
  uint64_t i;
  const xmlChar *v45;
  const xmlChar *v46;
  int v47;
  uint64_t *v48;
  uint64_t **p_nsDef;
  uint64_t (*getNsForNodeFunc)(void);
  uint64_t ns;
  uint64_t v52;
  xmlNode *v53;
  xmlChar *StringInternal;
  xmlChar *v55;
  xmlIDPtr v56;
  xmlNode *properties;
  unsigned int v58;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t *v65;
  xmlDOMWrapCtxtPtr v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  xmlNodePtr v70;
  xmlDict *dict;
  xmlDoc *v73;
  int v74;
  _OWORD *v75;
  xmlNode *v77;
  uint64_t *nsDef;
  uint64_t *namespaceMap;

  namespaceMap = 0;
  v8 = -1;
  if (node && clonedNode && destDoc && (!destParent || destParent->doc == destDoc))
  {
    if (node->type != XML_ELEMENT_NODE)
      return 1;
    p_doc = &node->doc;
    doc = node->doc;
    if (!doc || doc == sourceDoc || !sourceDoc)
    {
      v15 = sourceDoc ? sourceDoc : node->doc;
      if ((unint64_t)sourceDoc | (unint64_t)doc)
      {
        if (ctxt)
          namespaceMap = (uint64_t *)ctxt->namespaceMap;
        v16 = destDoc->dict;
        nsDef = 0;
        *clonedNode = 0;
        if (*p_doc != v15)
        {
          v77 = 0;
          goto LABEL_160;
        }
        v70 = 0;
        dict = v16;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = -1;
        v23 = node;
        v73 = v15;
        while (1)
        {
          v75 = v19;
          type = v23->type;
          v25 = type - 3 < 6 || type == XML_DOCUMENT_FRAG_NODE;
          v74 = v21;
          if (v25)
            goto LABEL_26;
          if (type != XML_ATTRIBUTE_NODE)
            break;
          v28 = xmlMalloc(0x60uLL);
          if (!v28)
          {
            v77 = v20;
            v69 = "xmlDOMWrapCloneNode(): allocating an attr-node";
            goto LABEL_170;
          }
          v19 = v28;
          v28[4] = 0u;
          v28[5] = 0u;
          v28[2] = 0u;
          v28[3] = 0u;
          *v28 = 0u;
          v28[1] = 0u;
          if (!v20)
          {
LABEL_38:
            v20 = (xmlNode *)v19;
            v27 = v75;
            goto LABEL_39;
          }
          v27 = v75;
          *((_QWORD *)v28 + 5) = v75;
          if (v18)
          {
LABEL_29:
            *((_QWORD *)v18 + 6) = v19;
            *((_QWORD *)v19 + 7) = v18;
            goto LABEL_39;
          }
          *((_QWORD *)v75 + 11) = v28;
LABEL_39:
          *((_DWORD *)v19 + 2) = v23->type;
          *((_QWORD *)v19 + 8) = destDoc;
          name = v23->name;
          if (name == "text")
          {
            v31 = "text";
            goto LABEL_52;
          }
          if (name == "textnoenc")
          {
            v31 = "textnoenc";
            goto LABEL_52;
          }
          if (name == "comment")
          {
            v31 = "comment";
            goto LABEL_52;
          }
          if (name)
          {
            if (dict)
            {
              v30 = xmlDictOwns(dict, name);
              v31 = v23->name;
              if (!v30)
              {
                v32 = xmlDictLookup(dict, v31, -1);
                goto LABEL_50;
              }
            }
            else
            {
              v32 = xmlStrdup(name);
LABEL_50:
              v31 = v32;
            }
            v27 = v75;
LABEL_52:
            *((_QWORD *)v19 + 2) = v31;
          }
          v77 = v20;
          v8 = -1;
          switch(v23->type)
          {
            case XML_ELEMENT_NODE:
              ++v22;
              if (!v23->nsDef)
                goto LABEL_94;
              if (!destParent || v74 || ctxt)
              {
                nsDef = (uint64_t *)v23->nsDef;
LABEL_76:
                v74 = 1;
                v38 = v19 + 6;
                while (1)
                {
                  v39 = xmlMalloc(0x30uLL);
                  if (!v39)
                    break;
                  v40 = (uint64_t)v39;
                  v39[1] = 0u;
                  v39[2] = 0u;
                  *v39 = 0u;
                  *((_DWORD *)v39 + 2) = 18;
                  v41 = nsDef;
                  v42 = (const xmlChar *)nsDef[2];
                  if (v42)
                  {
                    *(_QWORD *)(v40 + 16) = xmlStrdup(v42);
                    v41 = nsDef;
                  }
                  v43 = (const xmlChar *)v41[3];
                  if (v43)
                    *(_QWORD *)(v40 + 24) = xmlStrdup(v43);
                  *v38 = v40;
                  if (!ctxt || !ctxt->getNsForNodeFunc)
                  {
                    if (namespaceMap)
                    {
                      for (i = *namespaceMap; i; i = *(_QWORD *)i)
                      {
                        if (*(int *)(i + 36) >= -1 && *(_DWORD *)(i + 32) == -1)
                        {
                          v45 = (const xmlChar *)nsDef[3];
                          v46 = *(const xmlChar **)(*(_QWORD *)(i + 24) + 24);
                          if (v45 == v46 || xmlStrEqual(v45, v46))
                            *(_DWORD *)(i + 32) = v22;
                        }
                      }
                    }
                    v8 = -1;
                    if (!xmlDOMWrapNsMapAddItem(&namespaceMap, -1, (uint64_t)nsDef, v40, v22))
                      goto LABEL_160;
                  }
                  nsDef = (uint64_t *)*nsDef;
                  v38 = (_QWORD *)v40;
                  if (!nsDef)
                    goto LABEL_94;
                }
                __xmlSimpleError(2u, 2, 0, 0, (const xmlChar *)"xmlDOMWrapCloneNode(): allocating namespace");
                return -1;
              }
              if (xmlDOMWrapNSNormGatherInScopeNs(&namespaceMap, (uint64_t)destParent) == -1)
                goto LABEL_160;
              nsDef = (uint64_t *)v23->nsDef;
              if (nsDef)
                goto LABEL_76;
              v74 = 1;
LABEL_94:
              v70 = v23;
LABEL_95:
              if (v23->ns)
              {
                v47 = 1;
                if (destParent && !v74 && !ctxt)
                {
                  if (xmlDOMWrapNSNormGatherInScopeNs(&namespaceMap, (uint64_t)destParent) == -1)
                    goto LABEL_171;
                  v47 = 1;
                }
                v48 = namespaceMap;
                if (namespaceMap)
                {
                  do
                  {
                    v48 = (uint64_t *)*v48;
                    if (!v48)
                      goto LABEL_106;
                  }
                  while (*((_DWORD *)v48 + 8) != -1 || v23->ns != (xmlNs *)v48[2]);
                  p_nsDef = (uint64_t **)(v48 + 3);
                }
                else
                {
LABEL_106:
                  if (ctxt)
                  {
                    getNsForNodeFunc = (uint64_t (*)(void))ctxt->getNsForNodeFunc;
                    ns = (uint64_t)v23->ns;
                    if (getNsForNodeFunc)
                    {
                      nsDef = (uint64_t *)getNsForNodeFunc();
                      if (!xmlDOMWrapNsMapAddItem(&namespaceMap, -1, (uint64_t)v23->ns, (uint64_t)nsDef, -4))
                      {
                        v65 = namespaceMap;
                        v8 = -1;
                        v66 = ctxt;
                        if (!namespaceMap)
                          goto LABEL_164;
LABEL_162:
                        if (v66->namespaceMap == v65)
                        {
                          v67 = *v65;
                          if (*v65)
                          {
                            v68 = v65[2];
                            if (v68)
                            {
                              *(_QWORD *)v65[1] = v68;
                              v65 = namespaceMap;
                              v67 = *namespaceMap;
                            }
                            v65[2] = v67;
                            *v65 = 0;
                          }
                          goto LABEL_164;
                        }
LABEL_163:
                        xmlDOMWrapNsMapFree(v65);
LABEL_164:
                        *clonedNode = v77;
                        return v8;
                      }
                      p_nsDef = &nsDef;
                      goto LABEL_116;
                    }
                  }
                  else
                  {
                    ns = (uint64_t)v23->ns;
                  }
                  if (destParent)
                    v52 = (uint64_t)v70;
                  else
                    v52 = 0;
                  p_nsDef = &nsDef;
                  if (xmlDOMWrapNSNormAcquireNormalizedNs((uint64_t)destDoc, v52, ns, (uint64_t *)&nsDef, &namespaceMap, v22, v23->type == XML_ATTRIBUTE_NODE) == -1)goto LABEL_171;
                }
LABEL_116:
                *((_QWORD *)v19 + 9) = *p_nsDef;
                goto LABEL_117;
              }
              v47 = v74;
LABEL_117:
              if (*((_DWORD *)v19 + 2) == 2)
              {
                v53 = (xmlNode *)*((_QWORD *)v19 + 5);
                if (v53)
                {
                  if (xmlIsID(destDoc, v53, (xmlAttrPtr)v19))
                  {
                    StringInternal = xmlNodeListGetStringInternal(*p_doc, (uint64_t)v23->children, 1, 0);
                    if (StringInternal)
                    {
                      v55 = StringInternal;
                      v56 = xmlAddID(0, destDoc, StringInternal, (xmlAttrPtr)v23);
                      xmlFree(v55);
                      if (!v56)
                        goto LABEL_171;
                    }
                  }
                }
              }
              if (v23->type == XML_ELEMENT_NODE)
              {
                properties = (xmlNode *)v23->properties;
                v27 = v75;
                if (!properties)
                  goto LABEL_126;
LABEL_129:
                v18 = 0;
                goto LABEL_156;
              }
              v27 = v75;
LABEL_126:
              properties = v23->children;
              if (properties && (deep || v23->type == XML_ATTRIBUTE_NODE))
                goto LABEL_129;
              v74 = v47;
LABEL_131:
              if (v23 == node)
              {
LABEL_159:
                v8 = 0;
                goto LABEL_160;
              }
              v18 = v19;
              while (1)
              {
                v58 = v23->type;
                if (v58 <= 0x14 && ((1 << v58) & 0x180002) != 0)
                {
                  v60 = namespaceMap;
                  if (namespaceMap)
                  {
                    v61 = *namespaceMap;
                    if (*namespaceMap)
                    {
                      v63 = namespaceMap + 1;
                      v62 = namespaceMap[1];
                      if (!v62)
                        goto LABEL_178;
                      do
                      {
                        if (*(_DWORD *)(v62 + 36) < v22)
                          break;
                        v64 = *(uint64_t **)(v62 + 8);
                        *v63 = (uint64_t)v64;
                        if (v64)
                          v60 = v64;
                        *v60 = 0;
                        *(_QWORD *)v62 = namespaceMap[2];
                        v60 = namespaceMap;
                        namespaceMap[2] = v62;
                        v63 = v60 + 1;
                        v62 = v60[1];
                      }
                      while (v62);
                      v61 = *v60;
                      if (*v60)
                      {
LABEL_178:
                        do
                        {
                          if (*(_DWORD *)(v61 + 32) >= v22)
                            *(_DWORD *)(v61 + 32) = -1;
                          v61 = *(_QWORD *)v61;
                        }
                        while (v61);
                      }
                    }
                  }
                  --v22;
                }
                properties = v23->next;
                if (properties)
                  break;
                v19 = (_OWORD *)*((_QWORD *)v18 + 5);
                if (v58 == 2)
                {
                  v27 = (_OWORD *)*((_QWORD *)v19 + 5);
                  v23 = v23->parent;
                  v47 = v74;
                  goto LABEL_126;
                }
                if (v19)
                {
                  *((_QWORD *)v19 + 4) = v18;
                  v27 = (_OWORD *)*((_QWORD *)v19 + 5);
                }
                v23 = v23->parent;
                v18 = v19;
                if (v23 == node)
                  goto LABEL_159;
              }
              v47 = v74;
              v19 = v27;
LABEL_156:
              p_doc = &properties->doc;
              v21 = v47;
              v23 = properties;
              v20 = v77;
              if (properties->doc != v73)
                goto LABEL_171;
              break;
            case XML_ATTRIBUTE_NODE:
              goto LABEL_95;
            case XML_TEXT_NODE:
            case XML_CDATA_SECTION_NODE:
            case XML_PI_NODE:
            case XML_COMMENT_NODE:
              content = v23->content;
              if (!content)
                goto LABEL_131;
              if (dict)
              {
                v34 = xmlDictOwns(dict, content);
                v35 = v23->content;
                if (v34)
                {
                  *((_QWORD *)v19 + 10) = v35;
                  goto LABEL_73;
                }
                v37 = (void *)xmlDictLookup(dict, v35, -1);
              }
              else
              {
                v37 = xmlStrdup(content);
              }
              *((_QWORD *)v19 + 10) = v37;
              goto LABEL_73;
            case XML_ENTITY_REF_NODE:
              if (v73 == destDoc)
              {
                *((_QWORD *)v19 + 10) = v23->content;
                *(_OWORD *)((char *)v19 + 24) = *(_OWORD *)&v23->children;
              }
              else if (destDoc->intSubset || destDoc->extSubset)
              {
                DocEntity = xmlGetDocEntity(destDoc, v23->name);
                if (DocEntity)
                {
                  *((_QWORD *)v19 + 10) = DocEntity->content;
                  *((_QWORD *)v19 + 3) = DocEntity;
                  *((_QWORD *)v19 + 4) = DocEntity;
                }
LABEL_73:
                v27 = v75;
              }
              goto LABEL_131;
            case XML_ENTITY_NODE:
              goto LABEL_131;
            case XML_XINCLUDE_START:
            case XML_XINCLUDE_END:
              return v8;
            default:
              goto LABEL_160;
          }
        }
        if (type != XML_ELEMENT_NODE)
        {
          v77 = v20;
LABEL_171:
          v8 = -1;
LABEL_160:
          v65 = namespaceMap;
          if (!namespaceMap)
            goto LABEL_164;
          v66 = ctxt;
          if (ctxt)
            goto LABEL_162;
          goto LABEL_163;
        }
LABEL_26:
        v26 = xmlMalloc(0x78uLL);
        if (!v26)
        {
          v77 = v20;
          v69 = "xmlDOMWrapCloneNode(): allocating a node";
LABEL_170:
          __xmlSimpleError(2u, 2, 0, 0, (const xmlChar *)v69);
          goto LABEL_171;
        }
        v19 = v26;
        v26[14] = 0;
        *((_OWORD *)v26 + 5) = 0u;
        *((_OWORD *)v26 + 6) = 0u;
        *((_OWORD *)v26 + 3) = 0u;
        *((_OWORD *)v26 + 4) = 0u;
        *((_OWORD *)v26 + 1) = 0u;
        *((_OWORD *)v26 + 2) = 0u;
        *(_OWORD *)v26 = 0u;
        if (!v20)
          goto LABEL_38;
        v27 = v75;
        v26[5] = v75;
        if (v18)
          goto LABEL_29;
        *((_QWORD *)v75 + 3) = v26;
        goto LABEL_39;
      }
    }
  }
  return v8;
}

int xmlDOMWrapAdoptNode(xmlDOMWrapCtxtPtr ctxt, xmlDocPtr sourceDoc, xmlNodePtr node, xmlDocPtr destDoc, xmlNodePtr destParent, int options)
{
  xmlDOMWrapCtxtPtr v7;
  xmlElementType type;
  _xmlDoc *doc;
  xmlDocPtr v12;
  xmlNode *parent;
  BOOL v14;
  xmlChar *name;
  _xmlDict *dict;
  xmlDict *v17;
  xmlChar *content;
  _xmlDict *v19;
  _xmlNode *DocEntity;
  xmlChar *v21;
  _xmlDict *v22;
  xmlDict *v23;
  xmlDict *v24;
  xmlChar *v25;
  xmlChar *v26;

  if (!node)
  {
    LODWORD(ctxt) = -1;
    return (int)ctxt;
  }
  v7 = ctxt;
  LODWORD(ctxt) = -1;
  if (!destDoc)
    return (int)ctxt;
  type = node->type;
  if (type == XML_NAMESPACE_DECL || destParent && destParent->doc != destDoc)
    return (int)ctxt;
  doc = node->doc;
  if (doc)
  {
    if (doc != sourceDoc && sourceDoc)
      return (int)ctxt;
  }
  v12 = sourceDoc ? sourceDoc : node->doc;
  if (v12 == destDoc)
    return (int)ctxt;
  if (type > XML_DOCUMENT_FRAG_NODE)
  {
LABEL_28:
    LODWORD(ctxt) = 1;
    return (int)ctxt;
  }
  if (((1 << type) & 0x1BE) == 0)
  {
    if (type == XML_DOCUMENT_FRAG_NODE)
    {
      LODWORD(ctxt) = 2;
      return (int)ctxt;
    }
    goto LABEL_28;
  }
  parent = node->parent;
  if (parent && parent != destParent)
  {
    xmlUnlinkNode(node);
    type = node->type;
  }
  if (type == XML_ATTRIBUTE_NODE)
  {
    LODWORD(ctxt) = xmlDOMWrapAdoptAttr((uint64_t)v12, (uint64_t)node, destDoc, (uint64_t)destParent);
    return (int)ctxt;
  }
  if (type == XML_ELEMENT_NODE)
  {
    LODWORD(ctxt) = xmlDOMWrapAdoptBranch((uint64_t)v7, v12, (uint64_t)node, destDoc, (uint64_t)destParent);
    return (int)ctxt;
  }
  node->doc = destDoc;
  if (v12)
    v14 = v12->dict == destDoc->dict;
  else
    v14 = 0;
  if (type - 3 < 2)
  {
    if (v14)
      goto LABEL_66;
    goto LABEL_41;
  }
  if (type != XML_ENTITY_REF_NODE)
  {
    if (type != XML_PI_NODE || v14)
      goto LABEL_66;
    name = (xmlChar *)node->name;
    if (name)
    {
      dict = destDoc->dict;
      if (dict)
      {
        node->name = xmlDictLookup(dict, node->name, -1);
        if (!v12 || (v17 = v12->dict) == 0 || !xmlDictOwns(v17, name))
          xmlFree(name);
        goto LABEL_41;
      }
      if (v12)
      {
        v24 = v12->dict;
        if (v24 && xmlDictOwns(v24, node->name))
          node->name = xmlStrdup(node->name);
        goto LABEL_41;
      }
      goto LABEL_66;
    }
LABEL_41:
    LODWORD(ctxt) = 0;
    if (v12)
    {
      content = node->content;
      if (content)
      {
        ctxt = (xmlDOMWrapCtxtPtr)v12->dict;
        if (ctxt)
        {
          LODWORD(ctxt) = xmlDictOwns((xmlDictPtr)ctxt, content);
          if ((_DWORD)ctxt)
          {
            v19 = destDoc->dict;
            if (v19)
              ctxt = (xmlDOMWrapCtxtPtr)xmlDictLookup(v19, node->content, -1);
            else
              ctxt = (xmlDOMWrapCtxtPtr)xmlStrdup(node->content);
            v26 = (xmlChar *)ctxt;
            LODWORD(ctxt) = 0;
            node->content = v26;
          }
        }
      }
    }
    return (int)ctxt;
  }
  node->content = 0;
  node->children = 0;
  node->last = 0;
  if (destDoc->intSubset || destDoc->extSubset)
  {
    DocEntity = (_xmlNode *)xmlGetDocEntity(destDoc, node->name);
    if (DocEntity)
    {
      node->content = DocEntity->content;
      node->children = DocEntity;
      node->last = DocEntity;
    }
  }
  if (v14)
    goto LABEL_66;
  v21 = (xmlChar *)node->name;
  if (!v21)
    goto LABEL_66;
  v22 = destDoc->dict;
  if (v22)
  {
    node->name = xmlDictLookup(v22, node->name, -1);
    if (!v12 || (v23 = v12->dict) == 0 || !xmlDictOwns(v23, v21))
      xmlFree(v21);
    goto LABEL_66;
  }
  if (!v12)
  {
LABEL_66:
    LODWORD(ctxt) = 0;
    return (int)ctxt;
  }
  ctxt = (xmlDOMWrapCtxtPtr)v12->dict;
  if (ctxt)
  {
    LODWORD(ctxt) = xmlDictOwns((xmlDictPtr)ctxt, node->name);
    if ((_DWORD)ctxt)
    {
      v25 = xmlStrdup(node->name);
      LODWORD(ctxt) = 0;
      node->name = v25;
    }
  }
  return (int)ctxt;
}

uint64_t xmlDOMWrapAdoptBranch(uint64_t a1, xmlDocPtr doc, uint64_t a3, const xmlDoc *a4, uint64_t a5)
{
  const xmlDoc *v5;
  xmlDocPtr v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  const xmlChar *v20;
  xmlDict *v21;
  const xmlDoc *v22;
  xmlDict *v23;
  void *v24;
  uint64_t v25;
  _QWORD *v26;
  xmlDoc *v27;
  const xmlDoc *v28;
  xmlEntityPtr DocEntity;
  void *v30;
  xmlDict *v31;
  xmlDocPtr v32;
  xmlDict *v33;
  int v34;
  const xmlChar *v35;
  xmlDict *v36;
  xmlDoc *v37;
  const xmlDoc *v38;
  xmlDict *v39;
  void *v40;
  uint64_t v41;
  const xmlChar *v42;
  const xmlChar *v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  uint64_t *v47;
  uint64_t *v48;
  const xmlDoc *v49;
  uint64_t (*v50)(uint64_t, uint64_t, _QWORD, _QWORD);
  uint64_t v51;
  uint64_t v52;
  int v53;
  xmlDoc *v54;
  void *v55;
  xmlDict *dict;
  xmlDocPtr v57;
  xmlDict *v58;
  int v59;
  const xmlDoc *v60;
  xmlDoc *v61;
  xmlDict *v62;
  const xmlDoc *v63;
  xmlDoc *v64;
  int v65;
  xmlChar *v66;
  xmlDict *v67;
  const xmlDoc *v68;
  xmlDoc *v69;
  int v70;
  xmlChar *v71;
  unsigned int v72;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t v81;
  uint64_t v82;
  const xmlDoc *v83;
  const xmlDoc *v84;
  const xmlDoc *v85;
  const xmlDoc *v86;
  xmlDoc *v87;
  xmlDoc *v88;
  xmlDoc *v89;
  unsigned int v90;
  int v91;
  unsigned int v92;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  _QWORD *v105;
  uint64_t *v106;

  v5 = a4;
  v7 = doc;
  v8 = a1;
  v105 = 0;
  v106 = 0;
  v9 = doc && doc->dict == a4->dict;
  if (!a1)
  {
    if (a5)
      goto LABEL_10;
LABEL_11:
    v94 = 1;
    goto LABEL_12;
  }
  v106 = *(uint64_t **)(a1 + 16);
  if (!a5)
    goto LABEL_11;
  if (!*(_QWORD *)(a1 + 24))
  {
LABEL_10:
    v94 = 0;
    v104 = 0;
    goto LABEL_13;
  }
  v94 = 0;
LABEL_12:
  v104 = 1;
LABEL_13:
  v10 = 0;
  v103 = 0;
  v11 = a3;
  v12 = -1;
LABEL_14:
  while (2)
  {
    if (*(xmlDocPtr *)(v11 + 64) == v7)
    {
      v16 = *(_DWORD *)(v11 + 8);
      v15 = v11;
    }
    else
    {
      v13 = *(_QWORD *)(v11 + 48);
      if (!v13)
      {
        v19 = v10;
        v15 = v11;
        goto LABEL_135;
      }
      v14 = *(_QWORD *)(a3 + 64);
      do
      {
        v15 = v13;
        v16 = *(_DWORD *)(v13 + 8);
        v17 = *(_QWORD *)(v13 + 64);
        if (v16 == 20 || v17 == v14)
          break;
        v13 = *(_QWORD *)(v13 + 48);
      }
      while (v13);
      if (v17 != v14)
      {
LABEL_23:
        v19 = v10;
        goto LABEL_135;
      }
    }
    *(_QWORD *)(v15 + 64) = v5;
    v19 = 0xFFFFFFFFLL;
    switch(v16)
    {
      case 1:
        v25 = v8;
        v83 = v5;
        v88 = v7;
        ++v12;
        v26 = *(_QWORD **)(v15 + 96);
        if (!v26)
          goto LABEL_77;
        if (v8 && *(_QWORD *)(v8 + 24))
        {
          v103 = v15;
          goto LABEL_78;
        }
        if (v104)
        {
          v105 = *(_QWORD **)(v15 + 96);
          do
          {
LABEL_64:
            if (v106)
            {
              v41 = *v106;
              if (*v106)
              {
                do
                {
                  if (*(int *)(v41 + 36) >= -1 && *(_DWORD *)(v41 + 32) == -1)
                  {
                    v42 = (const xmlChar *)v105[3];
                    v43 = *(const xmlChar **)(*(_QWORD *)(v41 + 24) + 24);
                    if (v42 == v43 || xmlStrEqual(v42, v43))
                      *(_DWORD *)(v41 + 32) = v12;
                  }
                  v41 = *(_QWORD *)v41;
                }
                while (v41);
                v26 = v105;
              }
            }
            if (xmlDOMWrapNsMapAddItem(&v106, -1, (uint64_t)v26, (uint64_t)v26, v12))
              v10 = v10;
            else
              v10 = 0xFFFFFFFFLL;
            v26 = (_QWORD *)*v105;
            v105 = v26;
          }
          while (v26);
LABEL_77:
          v103 = v15;
          v5 = v83;
          v7 = v88;
          v8 = v25;
          goto LABEL_78;
        }
        if (xmlDOMWrapNSNormGatherInScopeNs(&v106, a5) == -1)
          v10 = 0xFFFFFFFFLL;
        else
          v10 = v10;
        v26 = *(_QWORD **)(v15 + 96);
        v105 = v26;
        if (v26)
        {
          v104 = 1;
          goto LABEL_64;
        }
        v44 = (uint64_t *)(v15 + 72);
        v104 = 1;
        if (!*(_QWORD *)(v15 + 72))
        {
          v103 = v15;
          v5 = v83;
          v7 = v88;
          v8 = v25;
          goto LABEL_104;
        }
        v103 = v15;
        v5 = v83;
        v7 = v88;
        v8 = v25;
LABEL_84:
        v47 = v106;
        v98 = v8;
        v92 = v9;
        if (v106)
        {
          while (1)
          {
            v47 = (uint64_t *)*v47;
            if (!v47)
              break;
            if (*((_DWORD *)v47 + 8) == -1 && *v44 == v47[2])
            {
              v48 = v47 + 3;
              goto LABEL_103;
            }
          }
        }
        v89 = v7;
        v49 = v5;
        if (v8)
        {
          v50 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(v8 + 24);
          v51 = *v44;
          if (v50)
          {
            v105 = (_QWORD *)v50(v8, v15, *(_QWORD *)(v51 + 16), *(_QWORD *)(v51 + 24));
            if (xmlDOMWrapNsMapAddItem(&v106, -1, *(_QWORD *)(v15 + 72), (uint64_t)v105, -4))
              v10 = v10;
            else
              v10 = 0xFFFFFFFFLL;
            v48 = (uint64_t *)&v105;
            v5 = v49;
            goto LABEL_102;
          }
        }
        else
        {
          v51 = *v44;
        }
        if (v94)
          v52 = 0;
        else
          v52 = v103;
        v48 = (uint64_t *)&v105;
        v53 = xmlDOMWrapNSNormAcquireNormalizedNs((uint64_t)v5, v52, v51, (uint64_t *)&v105, &v106, v12, *(_DWORD *)(v15 + 8) == 2);
        v5 = v49;
        if (v53 == -1)
          v10 = 0xFFFFFFFFLL;
        else
          v10 = v10;
LABEL_102:
        v7 = v89;
LABEL_103:
        *v44 = *v48;
        v8 = v98;
        v9 = v92;
LABEL_104:
        v54 = (xmlDoc *)v9;
        if ((v9 & 1) != 0)
          goto LABEL_111;
        v55 = *(void **)(v15 + 16);
        if (!v55)
          goto LABEL_111;
        dict = v5->dict;
        if (dict)
        {
          v86 = v5;
          v57 = v7;
          v99 = v8;
          *(_QWORD *)(v15 + 16) = xmlDictLookup(dict, *(const xmlChar **)(v15 + 16), -1);
          if (!v57
            || (v58 = v57->dict) == 0
            || (v59 = xmlDictOwns(v58, (const xmlChar *)v55), v8 = v99, v7 = v57, v5 = v86, !v59))
          {
            xmlFree(v55);
            v8 = v99;
            v7 = v57;
            v5 = v86;
          }
        }
        else
        {
          if (!v7)
          {
            if (*(_DWORD *)(v15 + 8) != 1)
              goto LABEL_117;
            goto LABEL_112;
          }
          v62 = v7->dict;
          if (v62)
          {
            v63 = v5;
            v64 = v7;
            v101 = v8;
            v65 = xmlDictOwns(v62, *(const xmlChar **)(v15 + 16));
            v8 = v101;
            v7 = v64;
            v5 = v63;
            if (v65)
            {
              v66 = xmlStrdup(*(const xmlChar **)(v15 + 16));
              v8 = v101;
              v7 = v64;
              v5 = v63;
              *(_QWORD *)(v15 + 16) = v66;
            }
          }
        }
LABEL_111:
        if (*(_DWORD *)(v15 + 8) != 1)
        {
          if (v7 && *(_DWORD *)(v15 + 80) == 2)
          {
            v60 = v5;
            v61 = v7;
            v100 = v8;
            xmlRemoveID(v7, (xmlAttrPtr)v15);
            v8 = v100;
            v7 = v61;
            v5 = v60;
          }
LABEL_117:
          *(_DWORD *)(v15 + 80) = 0;
          *(_QWORD *)(v15 + 88) = 0;
          v9 = (unint64_t)v54;
          goto LABEL_118;
        }
LABEL_112:
        *(_QWORD *)(v15 + 104) = 0;
        *(_DWORD *)(v15 + 112) = 0;
        v11 = *(_QWORD *)(v15 + 88);
        v9 = (unint64_t)v54;
        if (v11)
          continue;
LABEL_118:
        v11 = *(_QWORD *)(v15 + 24);
        v19 = v10;
        if (v11)
          continue;
LABEL_135:
        while (v15 != a3)
        {
          v72 = *(_DWORD *)(v15 + 8);
          if (v72 <= 0x14 && ((1 << v72) & 0x180002) != 0)
          {
            v74 = v106;
            if (v106)
            {
              v75 = *v106;
              if (*v106)
              {
                v77 = v106 + 1;
                v76 = v106[1];
                if (!v76)
                  goto LABEL_174;
                do
                {
                  if (*(_DWORD *)(v76 + 36) < v12)
                    break;
                  v78 = *(uint64_t **)(v76 + 8);
                  *v77 = (uint64_t)v78;
                  if (v78)
                    v74 = v78;
                  *v74 = 0;
                  *(_QWORD *)v76 = v106[2];
                  v74 = v106;
                  v106[2] = v76;
                  v77 = v74 + 1;
                  v76 = v74[1];
                }
                while (v76);
                v75 = *v74;
                if (*v74)
                {
LABEL_174:
                  do
                  {
                    if (*(_DWORD *)(v75 + 32) >= v12)
                      *(_DWORD *)(v75 + 32) = -1;
                    v75 = *(_QWORD *)v75;
                  }
                  while (v75);
                }
              }
            }
            --v12;
          }
          v11 = *(_QWORD *)(v15 + 48);
          if (!v11)
          {
            v15 = *(_QWORD *)(v15 + 40);
            if (v72 != 2)
              continue;
            v11 = *(_QWORD *)(v15 + 24);
            if (!v11)
              continue;
          }
          v10 = v19;
          goto LABEL_14;
        }
        v79 = v106;
        if (v106)
        {
          if (v8 && *(uint64_t **)(v8 + 16) == v106)
          {
            v81 = *v106;
            if (*v106)
            {
              v82 = v106[2];
              if (v82)
              {
                *(_QWORD *)v106[1] = v82;
                v79 = v106;
                v81 = *v106;
              }
              v79[2] = v81;
              *v79 = 0;
            }
          }
          else
          {
            xmlDOMWrapNsMapFree(v106);
          }
        }
        return v19;
      case 2:
LABEL_78:
        v44 = (uint64_t *)(v15 + 72);
        if (!*(_QWORD *)(v15 + 72))
          goto LABEL_104;
        if (!v104)
        {
          v85 = v5;
          v91 = v9;
          v9 = (unint64_t)v7;
          v45 = v8;
          v46 = xmlDOMWrapNSNormGatherInScopeNs(&v106, a5);
          v8 = v45;
          v7 = (xmlDocPtr)v9;
          LODWORD(v9) = v91;
          v5 = v85;
          if (v46 == -1)
            v10 = 0xFFFFFFFFLL;
          else
            v10 = v10;
          v104 = 1;
        }
        goto LABEL_84;
      case 3:
      case 4:
        if ((v9 & 1) != 0)
          goto LABEL_23;
        if (!v7)
          goto LABEL_23;
        v20 = *(const xmlChar **)(v15 + 80);
        if (!v20)
          goto LABEL_23;
        v21 = v7->dict;
        if (!v21)
          goto LABEL_23;
        v95 = v8;
        v87 = v7;
        v22 = v5;
        if (xmlDictOwns(v21, v20))
        {
          v23 = v22->dict;
          if (v23)
            v24 = (void *)xmlDictLookup(v23, *(const xmlChar **)(v15 + 80), -1);
          else
            v24 = xmlStrdup(*(const xmlChar **)(v15 + 80));
          v5 = v22;
          *(_QWORD *)(v15 + 80) = v24;
          v19 = v10;
        }
        else
        {
          v19 = v10;
          v5 = v22;
        }
        v7 = v87;
        goto LABEL_134;
      case 5:
        *(_QWORD *)(v15 + 80) = 0;
        *(_QWORD *)(v15 + 24) = 0;
        *(_QWORD *)(v15 + 32) = 0;
        if (!v5->intSubset && !v5->extSubset)
          goto LABEL_23;
        v95 = v8;
        v90 = v9;
        v27 = v7;
        v28 = v5;
        DocEntity = xmlGetDocEntity(v5, *(const xmlChar **)(v15 + 16));
        if (DocEntity)
        {
          *(_QWORD *)(v15 + 80) = DocEntity->content;
          *(_QWORD *)(v15 + 24) = DocEntity;
          *(_QWORD *)(v15 + 32) = DocEntity;
        }
        v19 = v10;
        v5 = v28;
        v7 = v27;
        v9 = v90;
LABEL_134:
        v8 = v95;
        goto LABEL_135;
      case 7:
        if ((v9 & 1) != 0)
          goto LABEL_118;
        v30 = *(void **)(v15 + 16);
        if (!v30)
          goto LABEL_51;
        v31 = v5->dict;
        if (v31)
        {
          v84 = v5;
          v32 = v7;
          v96 = v8;
          *(_QWORD *)(v15 + 16) = xmlDictLookup(v31, *(const xmlChar **)(v15 + 16), -1);
          if (!v32
            || (v33 = v32->dict) == 0
            || (v34 = xmlDictOwns(v33, (const xmlChar *)v30), v8 = v96, v7 = v32, v5 = v84, !v34))
          {
            xmlFree(v30);
            v8 = v96;
            v7 = v32;
            v5 = v84;
          }
        }
        else
        {
          if (!v7)
            goto LABEL_118;
          v67 = v7->dict;
          if (v67)
          {
            v68 = v5;
            v69 = v7;
            v102 = v8;
            v70 = xmlDictOwns(v67, *(const xmlChar **)(v15 + 16));
            v8 = v102;
            v7 = v69;
            v5 = v68;
            if (v70)
            {
              v71 = xmlStrdup(*(const xmlChar **)(v15 + 16));
              v8 = v102;
              v7 = v69;
              v5 = v68;
              *(_QWORD *)(v15 + 16) = v71;
            }
          }
        }
LABEL_51:
        if (v7)
        {
          v35 = *(const xmlChar **)(v15 + 80);
          if (v35)
          {
            v36 = v7->dict;
            if (v36)
            {
              v97 = v8;
              v37 = v7;
              v38 = v5;
              if (xmlDictOwns(v36, v35))
              {
                v39 = v38->dict;
                if (v39)
                  v40 = (void *)xmlDictLookup(v39, *(const xmlChar **)(v15 + 80), -1);
                else
                  v40 = xmlStrdup(*(const xmlChar **)(v15 + 80));
                v5 = v38;
                *(_QWORD *)(v15 + 80) = v40;
              }
              else
              {
                v5 = v38;
              }
              v7 = v37;
              v8 = v97;
            }
          }
        }
        goto LABEL_118;
      case 8:
        goto LABEL_118;
      case 19:
      case 20:
        goto LABEL_135;
      default:
        v10 = 0xFFFFFFFFLL;
        goto LABEL_118;
    }
  }
}

uint64_t xmlDOMWrapAdoptAttr(uint64_t a1, uint64_t a2, xmlDoc *doc, uint64_t a4)
{
  uint64_t v7;
  uint64_t v9;
  const xmlChar *v10;
  unsigned int v11;
  xmlNsPtr v12;
  uint64_t v13;
  xmlNs *v14;
  void *v15;
  _xmlDict *dict;
  xmlDict *v17;
  xmlDict *v18;
  uint64_t v19;
  int v20;
  const xmlChar *v21;
  xmlDict *v22;
  _xmlDict *v23;
  void *v24;
  xmlEntityPtr DocEntity;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  uint64_t v33;
  _QWORD *v34;
  const xmlChar *v35;
  const xmlChar *prefix;
  BOOL v37;
  const xmlChar *href;
  int v39;
  int v40;

  *(_QWORD *)(a2 + 64) = doc;
  v7 = *(_QWORD *)(a2 + 72);
  if (v7)
  {
    v9 = *(_QWORD *)(v7 + 24);
    if (v9 && *(_BYTE *)v9 == 120 && *(_BYTE *)(v9 + 1) == 109 && *(_BYTE *)(v9 + 2) == 108 && !*(_BYTE *)(v9 + 3))
    {
      v14 = (xmlNs *)xmlTreeEnsureXMLDecl((uint64_t)doc);
    }
    else
    {
      v10 = *(const xmlChar **)(v7 + 16);
      if (a4)
      {
        if (!v10 || *(_DWORD *)(a4 + 8) == 18)
          goto LABEL_10;
        if (!xmlStrEqual(v10, (const xmlChar *)"http://www.w3.org/XML/1998/namespace"))
        {
          v28 = 0;
          v29 = 0;
          v30 = a4;
          while (1)
          {
            v31 = *(_DWORD *)(v30 + 8);
            if (v31 == 1)
            {
              v12 = *(xmlNsPtr *)(v30 + 96);
              if (v12)
              {
                while (1)
                {
                  if (v12->prefix)
                  {
                    if (v28)
                    {
                      v34 = *(_QWORD **)(v28 + 96);
                      while (1)
                      {
                        v35 = (const xmlChar *)v34[3];
                        prefix = v12->prefix;
                        if (v35 == prefix)
                          break;
                        v37 = !v35 || prefix == 0;
                        if (!v37 && xmlStrEqual(v35, prefix))
                          break;
                        v34 = (_QWORD *)*v34;
                        if (!v34)
                          goto LABEL_77;
                      }
                    }
                    else
                    {
LABEL_77:
                      href = v12->href;
                      if (href == v10 || xmlStrEqual(v10, href))
                      {
                        if (!v29)
                          goto LABEL_15;
                        v39 = xmlNsInScope(a4, v28, (xmlChar *)v12->prefix);
                        v40 = v39 ? 0 : 6;
                        v11 = v39 < 0 ? 1 : v40;
                        if (v11 != 6)
                        {
                          if (!v11)
                            goto LABEL_16;
LABEL_10:
                          v11 = -1;
LABEL_11:
                          v12 = xmlDOMWrapNSNormDeclareNsForced(a4, *(xmlChar **)(*(_QWORD *)(a2 + 72) + 16), *(xmlChar **)(*(_QWORD *)(a2 + 72) + 24), 1);
                          goto LABEL_16;
                        }
                      }
                    }
                  }
                  v12 = v12->next;
                  if (!v12)
                  {
                    v33 = v30;
                    v29 = v28;
                    goto LABEL_90;
                  }
                }
              }
              v33 = v28;
            }
            else
            {
              v32 = v31 == 6 || v31 == 17;
              v33 = v28;
              if (v32)
              {
LABEL_96:
                v11 = 0;
                goto LABEL_11;
              }
            }
LABEL_90:
            v30 = *(_QWORD *)(v30 + 40);
            if (!v30)
              goto LABEL_96;
            v11 = 0;
            v28 = v33;
            if (*(_QWORD *)(v30 + 64) == v30)
              goto LABEL_11;
          }
        }
        v14 = (xmlNs *)xmlTreeEnsureXMLDecl((uint64_t)doc);
        if (!v14)
          goto LABEL_10;
      }
      else
      {
        v14 = xmlDOMWrapStoreNs((uint64_t)doc, *(const xmlChar **)(v7 + 16), (const xmlChar *)v9);
      }
    }
    v12 = v14;
LABEL_15:
    v11 = 0;
LABEL_16:
    if (v12)
      v13 = v11;
    else
      v13 = 0xFFFFFFFFLL;
    *(_QWORD *)(a2 + 72) = v12;
  }
  else
  {
    v13 = 0;
  }
  v15 = *(void **)(a2 + 16);
  if (v15)
  {
    dict = doc->dict;
    if (dict)
    {
      *(_QWORD *)(a2 + 16) = xmlDictLookup(dict, *(const xmlChar **)(a2 + 16), -1);
      if (!a1 || (v17 = *(xmlDict **)(a1 + 152)) == 0 || !xmlDictOwns(v17, (const xmlChar *)v15))
        xmlFree(v15);
    }
    else if (a1)
    {
      v18 = *(xmlDict **)(a1 + 152);
      if (v18)
      {
        if (xmlDictOwns(v18, *(const xmlChar **)(a2 + 16)))
          *(_QWORD *)(a2 + 16) = xmlStrdup(*(const xmlChar **)(a2 + 16));
      }
    }
  }
  *(_DWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  v19 = *(_QWORD *)(a2 + 24);
  if (v19)
  {
    v20 = *(_DWORD *)(v19 + 8);
    if (v20 == 18)
      v13 = 0xFFFFFFFFLL;
    else
      v13 = v13;
    while (1)
    {
      *(_QWORD *)(v19 + 64) = doc;
      if ((v20 - 3) >= 2)
      {
        if (v20 == 5)
        {
          *(_QWORD *)(v19 + 80) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v19 + 32) = 0;
          if (doc->intSubset || doc->extSubset)
          {
            DocEntity = xmlGetDocEntity(doc, *(const xmlChar **)(v19 + 16));
            if (DocEntity)
            {
              *(_QWORD *)(v19 + 80) = DocEntity->content;
              *(_QWORD *)(v19 + 24) = DocEntity;
              *(_QWORD *)(v19 + 32) = DocEntity;
            }
          }
        }
      }
      else if (a1)
      {
        v21 = *(const xmlChar **)(v19 + 80);
        if (v21)
        {
          v22 = *(xmlDict **)(a1 + 152);
          if (v22)
          {
            if (xmlDictOwns(v22, v21))
            {
              v23 = doc->dict;
              if (v23)
                v24 = (void *)xmlDictLookup(v23, *(const xmlChar **)(v19 + 80), -1);
              else
                v24 = xmlStrdup(*(const xmlChar **)(v19 + 80));
              *(_QWORD *)(v19 + 80) = v24;
            }
          }
        }
      }
      v26 = *(_QWORD *)(v19 + 24);
      if (!v26)
        break;
LABEL_53:
      v20 = *(_DWORD *)(v26 + 8);
      v19 = v26;
    }
    while (v19 != a2)
    {
      v26 = *(_QWORD *)(v19 + 48);
      if (v26)
        goto LABEL_53;
      v19 = *(_QWORD *)(v19 + 40);
    }
  }
  return v13;
}

xmlNsPtr xmlDOMWrapNSNormDeclareNsForced(uint64_t a1, xmlChar *href, xmlChar *prefix, int a4)
{
  int v8;
  xmlNsPtr *v9;
  char *v10;
  _QWORD *v11;
  const xmlChar *v12;
  uint64_t v13;
  int v14;
  _QWORD *v16;
  const xmlChar *v17;
  xmlNsPtr result;
  _QWORD *v19;
  char __str[16];
  __int128 v21;
  __int128 v22;
  __int16 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a1 + 8) != 1)
    return 0;
  v8 = 0;
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  *(_OWORD *)__str = 0u;
  v9 = (xmlNsPtr *)(a1 + 96);
  v10 = (char *)prefix;
LABEL_3:
  v11 = *v9;
  if (*v9)
  {
    do
    {
      v12 = (const xmlChar *)v11[3];
      if (v12 == (const xmlChar *)v10 || xmlStrEqual((const xmlChar *)v10, v12))
        goto LABEL_31;
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  if (a4)
  {
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
    {
      if (*(_QWORD *)(v13 + 64) != v13 && *(_DWORD *)(v13 + 8) != 18)
      {
        if (v10 && *v10 == 120 && v10[1] == 109 && v10[2] == 108 && !v10[3])
          goto LABEL_31;
        do
        {
          v14 = *(_DWORD *)(v13 + 8);
          if (v14 == 1)
          {
            v16 = *(_QWORD **)(v13 + 96);
            if (v16)
            {
              while (1)
              {
                v17 = (const xmlChar *)v16[3];
                if (v17 == (const xmlChar *)v10 || xmlStrEqual((const xmlChar *)v10, v17))
                  break;
                v16 = (_QWORD *)*v16;
                if (!v16)
                  goto LABEL_27;
              }
              if (!v16[2])
                break;
LABEL_31:
              if (v8 == 1000)
                return 0;
              ++v8;
              v10 = __str;
              if (prefix)
                snprintf(__str, 0x32uLL, "%.30s_%d", (const char *)prefix, v8);
              else
                snprintf(__str, 0x32uLL, "ns_%d", v8);
              goto LABEL_3;
            }
          }
          else if (v14 == 6 || v14 == 17)
          {
            break;
          }
LABEL_27:
          v13 = *(_QWORD *)(v13 + 40);
        }
        while (v13 && *(_QWORD *)(v13 + 64) != v13);
      }
    }
  }
  result = xmlNewNs(0, href, (const xmlChar *)v10);
  if (result)
  {
    v19 = *v9;
    if (*v9)
    {
      do
      {
        v9 = (xmlNsPtr *)v19;
        v19 = (_QWORD *)*v19;
      }
      while (v19);
    }
    *v9 = result;
  }
  return result;
}

xmlURIPtr xmlParseURIRaw(const char *str, int raw)
{
  xmlURIPtr URI;
  xmlURI *v5;

  if (!str)
    return 0;
  URI = xmlCreateURI();
  v5 = URI;
  if (URI)
  {
    if (raw)
      URI->cleanup |= 2u;
    if (xmlParse3986URIReference((uint64_t)URI, (unsigned __int8 *)str))
    {
      xmlFreeURI(v5);
      return 0;
    }
  }
  return v5;
}

_DWORD *xmlURIErrMemory(const xmlChar *a1)
{
  char v2;

  if (a1)
    return __xmlRaiseError(0, 0, 0, 0, 0, 0x1Eu, 2, 3, 0, 0, a1, 0, 0, 0, (unsigned __int128)0 >> 96, "Memory allocation failed : %s\n", (char)a1);
  else
    return __xmlRaiseError(0, 0, 0, 0, 0, 0x1Eu, 2, 3, 0, 0, 0, 0, 0, 0, 0, "Memory allocation failed\n", v2);
}

xmlChar *__cdecl xmlSaveUri(xmlChar *uri)
{
  xmlChar *v1;
  char *v2;
  char *v3;
  const xmlChar *v4;
  int v5;
  uint64_t v6;
  char *v7;
  int v8;
  char *v9;
  int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  int v14;
  char *v15;
  unsigned int v16;
  unsigned int v17;
  char *v18;
  char v19;
  char v20;
  char *v21;
  char *v22;
  int v23;
  _BYTE *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  char *v27;
  unsigned int v28;
  unsigned int v29;
  char *v30;
  char v31;
  char v32;
  _BYTE *v33;
  unsigned int v34;
  unsigned __int8 *v35;
  int v36;
  char *v37;
  unsigned int v38;
  unsigned int v39;
  char *v40;
  char v41;
  char v42;
  char *v43;
  _BYTE *v44;
  char v45;
  uint64_t v46;
  unsigned __int8 *v47;
  char *v48;
  int v49;
  int v50;
  int v51;
  char *v52;
  unsigned __int8 *v53;
  unsigned int v54;
  char *v55;
  int v56;
  int v57;
  _BYTE *v58;
  unsigned int v59;
  unsigned __int8 *v60;
  char *v61;
  unsigned int v62;
  unsigned int v63;
  char *v64;
  char v65;
  char v66;
  char *v67;
  unsigned __int8 v68;
  unsigned __int8 *v69;
  char *v70;
  unsigned int v71;
  unsigned int v72;
  char *v73;
  char v74;
  char v75;
  char *v76;
  _BYTE *v77;
  char v78;
  uint64_t v79;
  unsigned __int8 *v80;
  char *v81;
  int v82;
  int v83;
  _BYTE *v84;
  unsigned int v85;
  unsigned __int8 *v86;
  char *v87;
  unsigned int v88;
  unsigned int v89;
  char *v90;
  char v91;
  char v92;
  int v93;

  if (uri)
  {
    v1 = uri;
    v93 = 80;
    v2 = (char *)xmlMallocAtomic(0x51uLL);
    if (!v2)
    {
      xmlURIErrMemory((const xmlChar *)"saving URI\n");
      return 0;
    }
    v3 = v2;
    v4 = *(const xmlChar **)v1;
    if (*(_QWORD *)v1)
    {
      LOBYTE(v5) = *v4;
      if (*v4)
      {
        v6 = 0;
        do
        {
          if (v6 >= v93)
          {
            v7 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v7)
              goto LABEL_212;
            LOBYTE(v5) = v4[v6];
            v3 = v7;
          }
          v8 = v6 + 1;
          v3[v6] = v5;
          v5 = v4[++v6];
        }
        while (v5);
        if (v93 <= v8)
        {
          v9 = (char *)xmlSaveUriRealloc(v3, &v93);
          if (!v9)
            goto LABEL_212;
          v3 = v9;
        }
      }
      else
      {
        v8 = 0;
      }
      v10 = v8 + 1;
      v3[v8] = 58;
    }
    else
    {
      v10 = 0;
    }
    v11 = (_BYTE *)*((_QWORD *)v1 + 1);
    if (v11)
    {
      v12 = *v11;
      if (*v11)
      {
        v13 = v11 + 1;
        do
        {
          v14 = v10 + 3;
          if (v10 + 3 >= v93)
          {
            v15 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v15)
              goto LABEL_212;
            v12 = *(v13 - 1);
            v3 = v15;
          }
          if (v12 - 36 <= 0x39 && ((1 << (v12 - 36)) & 0x28000001AC00985) != 0
            || v12 - 48 < 0xA
            || (v12 & 0xDF) - 65 < 0x1A
            || v12 - 33 <= 0x3E && ((1 << (v12 - 33)) & 0x40000000000033C1) != 0
            || v12 == 126)
          {
            v14 = v10 + 1;
          }
          else
          {
            v17 = v12 & 0xF;
            v18 = &v3[v10];
            *v18 = 37;
            if (v12 <= 0x9F)
              v19 = 48;
            else
              v19 = 55;
            v10 += 2;
            v18[1] = v19 + (v12 >> 4);
            if (v17 <= 9)
              v20 = 48;
            else
              v20 = 55;
            LOBYTE(v12) = v20 + v17;
          }
          v3[v10] = v12;
          v16 = *v13++;
          v12 = v16;
          v10 = v14;
        }
        while (v16);
      }
      else
      {
        v14 = v10;
      }
      goto LABEL_44;
    }
    if (*((_QWORD *)v1 + 3) || *((_DWORD *)v1 + 10) == -1)
    {
      if (v10 + 3 >= v93)
      {
        v21 = (char *)xmlSaveUriRealloc(v3, &v93);
        if (!v21)
          goto LABEL_212;
      }
      else
      {
        v21 = v3;
      }
      *(_WORD *)&v21[v10] = 12079;
      v10 += 2;
      v33 = (_BYTE *)*((_QWORD *)v1 + 4);
      if (v33)
      {
        v34 = *v33;
        if (*v33)
        {
          v35 = v33 + 1;
          v3 = v21;
          do
          {
            v36 = v10 + 3;
            if (v10 + 3 >= v93)
            {
              v37 = (char *)xmlSaveUriRealloc(v3, &v93);
              if (!v37)
                goto LABEL_212;
              v34 = *(v35 - 1);
              v3 = v37;
            }
            if (v34 - 48 < 0xA
              || (v34 & 0xDF) - 65 < 0x1A
              || v34 - 33 <= 0x3E && ((1 << (v34 - 33)) & 0x4000000016003FE9) != 0
              || v34 == 126)
            {
              v36 = v10 + 1;
            }
            else
            {
              v39 = v34 & 0xF;
              v40 = &v3[v10];
              *v40 = 37;
              if (v34 <= 0x9F)
                v41 = 48;
              else
                v41 = 55;
              v10 += 2;
              v40[1] = v41 + (v34 >> 4);
              if (v39 <= 9)
                v42 = 48;
              else
                v42 = 55;
              LOBYTE(v34) = v42 + v39;
            }
            v3[v10] = v34;
            v38 = *v35++;
            v34 = v38;
            v10 = v36;
          }
          while (v38);
        }
        else
        {
          v36 = v10;
          v3 = v21;
        }
        if (v36 + 3 >= v93)
        {
          v21 = (char *)xmlSaveUriRealloc(v3, &v93);
          if (!v21)
            goto LABEL_212;
        }
        else
        {
          v21 = v3;
        }
        v10 = v36 + 1;
        v21[v36] = 64;
      }
      v3 = v21;
      v44 = (_BYTE *)*((_QWORD *)v1 + 3);
      if (v44)
      {
        v45 = *v44;
        if (*v44)
        {
          v46 = v10;
          v47 = v44 + 1;
          do
          {
            if (v46 >= v93)
            {
              v48 = (char *)xmlSaveUriRealloc(v3, &v93);
              if (!v48)
                goto LABEL_212;
              v45 = *(v47 - 1);
              v3 = v48;
            }
            v3[v46++] = v45;
            v49 = *v47++;
            v45 = v49;
            ++v10;
          }
          while (v49);
        }
        v50 = *((_DWORD *)v1 + 10);
        if (v50 >= 1)
        {
          v51 = v93;
          if (v10 + 10 >= v93)
          {
            v52 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v52)
              goto LABEL_212;
            v51 = v93;
            v50 = *((_DWORD *)v1 + 10);
            v3 = v52;
          }
          v10 += snprintf(&v3[v10], v51 - v10, ":%d", v50);
        }
      }
    }
    else
    {
      if (*((_QWORD *)v1 + 2))
      {
        if (v10 + 3 >= v93)
        {
          v43 = (char *)xmlSaveUriRealloc(v3, &v93);
          if (!v43)
            goto LABEL_212;
        }
        else
        {
          v43 = v3;
        }
        *(_WORD *)&v43[v10] = 12079;
        v57 = v10 + 2;
        v58 = (_BYTE *)*((_QWORD *)v1 + 2);
        v59 = *v58;
        if (*v58)
        {
          v60 = v58 + 1;
          do
          {
            v10 = v57 + 3;
            if (v57 + 3 >= v93)
            {
              v61 = (char *)xmlSaveUriRealloc(v43, &v93);
              v3 = v43;
              if (!v61)
                goto LABEL_212;
              v59 = *(v60 - 1);
              v43 = v61;
            }
            if (v59 - 48 < 0xA
              || (v59 & 0xDF) - 65 < 0x1A
              || v59 - 33 <= 0x3E && ((1 << (v59 - 33)) & 0x4000000096003FE9) != 0
              || v59 == 126)
            {
              v10 = v57 + 1;
            }
            else
            {
              v63 = v59 & 0xF;
              v64 = &v43[v57];
              *v64 = 37;
              if (v59 <= 0x9F)
                v65 = 48;
              else
                v65 = 55;
              v57 += 2;
              v64[1] = v65 + (v59 >> 4);
              if (v63 <= 9)
                v66 = 48;
              else
                v66 = 55;
              LOBYTE(v59) = v66 + v63;
            }
            v43[v57] = v59;
            v62 = *v60++;
            v59 = v62;
            v57 = v10;
          }
          while (v62);
        }
        else
        {
          v10 += 2;
        }
LABEL_119:
        v53 = (unsigned __int8 *)*((_QWORD *)v1 + 6);
        if (!v53)
        {
          v56 = v10;
          v3 = v43;
          goto LABEL_176;
        }
        if (*(_QWORD *)v1)
        {
          v54 = *v53;
          if (v54 != 47)
            goto LABEL_155;
          if ((v53[1] & 0xDFu) - 65 <= 0x19
            && v53[2] == 58
            && xmlStrEqual(*(const xmlChar **)v1, (const xmlChar *)"file"))
          {
            if (v10 + 3 >= v93)
            {
              v55 = (char *)xmlSaveUriRealloc(v43, &v93);
              v3 = v43;
              if (!v55)
                goto LABEL_212;
            }
            else
            {
              v55 = v43;
            }
            v67 = &v55[v10];
            *v67 = *v53;
            v67[1] = v53[1];
            v68 = v53[2];
            v53 += 3;
            v67[2] = v68;
            v10 += 3;
            v43 = v55;
          }
        }
        v54 = *v53;
LABEL_155:
        v3 = v43;
        if (v54)
        {
          v69 = v53 + 1;
          do
          {
            v56 = v10 + 3;
            if (v10 + 3 >= v93)
            {
              v70 = (char *)xmlSaveUriRealloc(v3, &v93);
              if (!v70)
                goto LABEL_212;
              v54 = *(v69 - 1);
              v3 = v70;
            }
            if (v54 - 48 < 0xA
              || (v54 & 0xDF) - 65 < 0x1A
              || v54 - 33 <= 0x3E && ((1 << (v54 - 33)) & 0x4000000094007FE9) != 0
              || v54 == 126)
            {
              v56 = v10 + 1;
            }
            else
            {
              v72 = v54 & 0xF;
              v73 = &v3[v10];
              *v73 = 37;
              if (v54 <= 0x9F)
                v74 = 48;
              else
                v74 = 55;
              v10 += 2;
              v73[1] = v74 + (v54 >> 4);
              if (v72 <= 9)
                v75 = 48;
              else
                v75 = 55;
              LOBYTE(v54) = v75 + v72;
            }
            v3[v10] = v54;
            v71 = *v69++;
            v54 = v71;
            v10 = v56;
          }
          while (v71);
        }
        else
        {
          v56 = v10;
        }
LABEL_176:
        if (*((_QWORD *)v1 + 10))
        {
          v14 = v56 + 1;
          if (v56 + 1 >= v93)
          {
            v76 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v76)
              goto LABEL_212;
          }
          else
          {
            v76 = v3;
          }
          v76[v56] = 63;
          v77 = (_BYTE *)*((_QWORD *)v1 + 10);
          v78 = *v77;
          if (*v77)
          {
            v79 = v14;
            v80 = v77 + 1;
            v3 = v76;
            do
            {
              if (v79 + 1 >= v93)
              {
                v81 = (char *)xmlSaveUriRealloc(v3, &v93);
                if (!v81)
                  goto LABEL_212;
                v78 = *(v80 - 1);
                v3 = v81;
              }
              v3[v79] = v78;
              v82 = *v80++;
              v78 = v82;
              ++v14;
              ++v79;
            }
            while (v82);
            goto LABEL_44;
          }
        }
        else
        {
          if (!*((_QWORD *)v1 + 7))
          {
            v14 = v56;
LABEL_44:
            if (!*((_QWORD *)v1 + 8))
            {
LABEL_95:
              if (v14 < v93)
              {
                uri = (xmlChar *)v3;
LABEL_98:
                uri[v14] = 0;
                return uri;
              }
              uri = (xmlChar *)xmlSaveUriRealloc(v3, &v93);
              if (uri)
                goto LABEL_98;
              goto LABEL_212;
            }
            if (v14 + 3 < v93)
            {
              v22 = v3;
              goto LABEL_48;
            }
            v22 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (v22)
            {
LABEL_48:
              v23 = v14 + 1;
              v22[v14] = 35;
              v24 = (_BYTE *)*((_QWORD *)v1 + 8);
              v25 = *v24;
              if (*v24)
              {
                v26 = v24 + 1;
                v3 = v22;
                do
                {
                  v14 = v23 + 3;
                  if (v23 + 3 >= v93)
                  {
                    v27 = (char *)xmlSaveUriRealloc(v3, &v93);
                    if (!v27)
                      goto LABEL_212;
                    v25 = *(v26 - 1);
                    v3 = v27;
                  }
                  if (v25 - 48 < 0xA
                    || (v25 & 0xDF) - 65 < 0x1A
                    || v25 - 33 <= 0x3E && ((1 << (v25 - 33)) & 0x54000000D6007FE9) != 0
                    || v25 == 126)
                  {
                    v14 = v23 + 1;
                  }
                  else
                  {
                    v29 = v25 & 0xF;
                    v30 = &v3[v23];
                    *v30 = 37;
                    if (v25 <= 0x9F)
                      v31 = 48;
                    else
                      v31 = 55;
                    v23 += 2;
                    v30[1] = v31 + (v25 >> 4);
                    if (v29 <= 9)
                      v32 = 48;
                    else
                      v32 = 55;
                    LOBYTE(v25) = v32 + v29;
                  }
                  v3[v23] = v25;
                  v28 = *v26++;
                  v25 = v28;
                  v23 = v14;
                }
                while (v28);
              }
              else
              {
                ++v14;
                v3 = v22;
              }
              goto LABEL_95;
            }
LABEL_212:
            xmlFree(v3);
            return 0;
          }
          if (v56 + 3 >= v93)
          {
            v76 = (char *)xmlSaveUriRealloc(v3, &v93);
            if (!v76)
              goto LABEL_212;
          }
          else
          {
            v76 = v3;
          }
          v83 = v56 + 1;
          v76[v56] = 63;
          v84 = (_BYTE *)*((_QWORD *)v1 + 7);
          v85 = *v84;
          if (*v84)
          {
            v86 = v84 + 1;
            v3 = v76;
            do
            {
              v14 = v83 + 3;
              if (v83 + 3 >= v93)
              {
                v87 = (char *)xmlSaveUriRealloc(v3, &v93);
                if (!v87)
                  goto LABEL_212;
                v85 = *(v86 - 1);
                v3 = v87;
              }
              if (v85 - 48 < 0xA
                || (v85 & 0xDF) - 65 < 0x1A
                || v85 - 33 <= 0x3E && ((1 << (v85 - 33)) & 0x54000000D6007FE9) != 0
                || v85 == 126)
              {
                v14 = v83 + 1;
              }
              else
              {
                v89 = v85 & 0xF;
                v90 = &v3[v83];
                *v90 = 37;
                if (v85 <= 0x9F)
                  v91 = 48;
                else
                  v91 = 55;
                v83 += 2;
                v90[1] = v91 + (v85 >> 4);
                if (v89 <= 9)
                  v92 = 48;
                else
                  v92 = 55;
                LOBYTE(v85) = v92 + v89;
              }
              v3[v83] = v85;
              v88 = *v86++;
              v85 = v88;
              v83 = v14;
            }
            while (v88);
            goto LABEL_44;
          }
          v14 = v56 + 1;
        }
        v3 = v76;
        goto LABEL_44;
      }
      if (*(_QWORD *)v1 && v10 + 3 >= v93)
      {
        v43 = (char *)xmlSaveUriRealloc(v3, &v93);
        if (!v43)
          goto LABEL_212;
        goto LABEL_119;
      }
    }
    v43 = v3;
    goto LABEL_119;
  }
  return uri;
}

void *xmlSaveUriRealloc(void *a1, int *a2)
{
  uint64_t v2;
  const char *v3;
  void *result;

  v2 = *a2;
  if ((int)v2 <= 0x100000)
  {
    result = xmlRealloc(a1, (2 * v2) | 1);
    if (result)
    {
      *a2 = 2 * v2;
      return result;
    }
    v3 = "saving URI\n";
  }
  else
  {
    v3 = "reaching arbitrary MAX_URI_LENGTH limit\n";
  }
  xmlURIErrMemory((const xmlChar *)v3);
  return 0;
}

void xmlPrintURI(FILE *stream, xmlURIPtr uri)
{
  xmlChar *v3;
  xmlChar *v4;

  v3 = xmlSaveUri(uri);
  if (v3)
  {
    v4 = v3;
    fputs((const char *)v3, stream);
    xmlFree(v4);
  }
}

int xmlNormalizeURIPath(char *path)
{
  char *i;
  int v2;
  int v3;
  char *v4;
  int v5;
  int v6;
  int v7;
  char *j;
  uint64_t v9;
  char *v10;
  char *v12;
  int v13;
  uint64_t v14;
  char *v15;
  int v16;
  char *v17;
  int v18;
  int v19;
  char *v20;
  char *v21;
  char v22;
  unsigned __int8 *v23;
  int v24;

  if (!path)
    return -1;
  for (i = path; ; ++i)
  {
    v2 = *i;
    if (v2 != 47)
      break;
  }
  if (!*i)
    return 0;
  v4 = i;
  while (v2 == 46)
  {
    if (i[1] == 47)
    {
      ++i;
      do
      {
        v5 = *++i;
        v2 = v5;
      }
      while (v5 == 47);
    }
    else
    {
      if (!i[1])
        goto LABEL_21;
LABEL_15:
      while (v2 != 47)
      {
        *v4++ = v2;
        v6 = *++i;
        v2 = v6;
        if (!v6)
          goto LABEL_21;
      }
      do
        v7 = *++i;
      while (v7 == 47);
      *v4++ = 47;
      v2 = *i;
    }
  }
  if (v2)
    goto LABEL_15;
LABEL_21:
  *v4 = 0;
  for (j = path; ; ++j)
  {
    v3 = *j;
    if (v3 != 47)
      break;
  }
  if (*j)
  {
    do
    {
LABEL_25:
      v9 = 0;
      v10 = j;
      while (1)
      {
        while (v10[v9] != 47)
        {
          if (!v10[v9])
            goto LABEL_49;
          ++v9;
        }
        j = &v10[v9 + 1];
        if (*v10 == 46 && v10[1] == 46 && v9 == 2)
          goto LABEL_25;
        v12 = &v10[v9];
        if (*j != 46 || v12[2] != 46)
          goto LABEL_25;
        v13 = v12[3];
        if (v13 != 47)
          break;
        v14 = v9 + 4;
        v15 = v10;
        do
        {
          v16 = v15[v14];
          *v15++ = v16;
        }
        while (v16);
        v17 = v10;
        do
        {
          if (v17 <= path)
            break;
          v18 = *--v17;
        }
        while (v18 == 47);
        v9 = 0;
        if (v17 != path)
        {
          while (v17 > path)
          {
            j = v17;
            v19 = *--v17;
            if (v19 == 47)
              goto LABEL_25;
          }
          j = v17;
          goto LABEL_25;
        }
      }
    }
    while (v13);
    *v10 = 0;
LABEL_49:
    v3 = 0;
    *v4 = 0;
    if (*path == 47)
    {
      v20 = path;
      while (1)
      {
        v21 = v20;
        if (v20[1] != 46 || v20[2] != 46)
          break;
        v20 += 3;
        if (v21[3] != 47)
        {
          if (!v21[3])
            v21 += 3;
          break;
        }
      }
      if (v21 == path)
        return 0;
      v22 = *v21;
      if (*v21)
      {
        v23 = (unsigned __int8 *)(v21 + 1);
        do
        {
          *path++ = v22;
          v24 = *v23++;
          v22 = v24;
        }
        while (v24);
      }
      v3 = 0;
      *path = 0;
    }
  }
  return v3;
}

xmlChar *__cdecl xmlURIEscapeStr(const xmlChar *str, const xmlChar *list)
{
  const xmlChar *v2;
  int v4;
  size_t v5;
  char *v6;
  xmlChar v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  char v12;
  char v13;
  uint64_t v15;
  int v16;

  if (!str)
    return 0;
  v2 = str;
  if (!*str)
    return xmlStrdup(str);
  v4 = xmlStrlen(str);
  if (v4 < 1)
    return 0;
  v5 = (v4 + 20);
  v16 = v5;
  v6 = (char *)xmlMallocAtomic(v5);
  if (v6)
  {
    v7 = *v2;
    if (*v2)
    {
      v8 = 0;
      while (1)
      {
        if (v16 - v8 <= 3)
        {
          v9 = (char *)xmlSaveUriRealloc(v6, &v16);
          if (!v9)
          {
            xmlURIErrMemory((const xmlChar *)"escaping URI value\n");
            xmlFree(v6);
            return 0;
          }
          v7 = *v2;
          v6 = v9;
        }
        if ((v7 - 48) >= 0xAu
          && (v7 - 64) >= 0x1Bu
          && (v7 - 97) >= 0x1Au
          && (v7 - 33 > 0x3E || ((1 << (v7 - 33)) & 0x40000000000033C1) == 0)
          && v7 != 126)
        {
          if (xmlStrchr(list, v7))
          {
            v7 = *v2;
          }
          else
          {
            v11 = &v6[v8];
            *v11 = 37;
            v12 = (v7 >> 4) + 55;
            if (v7 < 0xA0u)
              v12 = (v7 >> 4) | 0x30;
            v11[1] = v12;
            v8 += 2;
            v13 = v7 & 0xF;
            if ((v7 & 0xFu) > 9)
              v7 = v13 + 55;
            else
              v7 = v13 | 0x30;
          }
        }
        v6[v8] = v7;
        v10 = *++v2;
        v7 = v10;
        ++v8;
        if (!v10)
        {
          v15 = v8;
          goto LABEL_28;
        }
      }
    }
    v15 = 0;
LABEL_28:
    v6[v15] = 0;
  }
  else
  {
    xmlURIErrMemory((const xmlChar *)"escaping URI value\n");
  }
  return (xmlChar *)v6;
}

xmlChar *__cdecl xmlURIEscape(const xmlChar *str)
{
  unsigned __int8 *v1;
  xmlURIPtr URI;
  xmlURI *v3;
  xmlChar *v4;
  xmlChar *v5;
  xmlChar *v6;
  const xmlChar *authority;
  xmlChar *v8;
  xmlChar *v9;
  xmlChar *v10;
  const xmlChar *user;
  xmlChar *v12;
  xmlChar *v13;
  xmlChar *v14;
  xmlChar *v15;
  const xmlChar *server;
  xmlChar *v17;
  xmlChar *v18;
  int port;
  xmlChar *v20;
  const xmlChar *path;
  xmlChar *v22;
  xmlChar *v23;
  xmlChar *v24;
  const xmlChar *opaque;
  xmlChar *v26;
  xmlChar *v27;
  const xmlChar *fragment;
  xmlChar *v29;
  xmlChar *v30;
  xmlChar *v31;
  const xmlChar *query;
  xmlChar *v33;
  xmlChar *v34;
  xmlChar *v35;
  char __str[8];
  __int16 v38;
  uint64_t v39;

  v1 = (unsigned __int8 *)str;
  v39 = *MEMORY[0x1E0C80C00];
  if (str)
  {
    URI = xmlCreateURI();
    if (!URI)
      return 0;
    v3 = URI;
    URI->cleanup = 1;
    if (xmlParse3986URIReference((uint64_t)URI, v1))
    {
      xmlFreeURI(v3);
      return 0;
    }
    if (v3->scheme)
    {
      v4 = xmlURIEscapeStr((const xmlChar *)v3->scheme, (const xmlChar *)"+-.");
      if (!v4)
      {
        xmlURIErrMemory((const xmlChar *)"escaping URI value\n");
        xmlFreeURI(v3);
        ((void (*)(_QWORD))xmlFree)(0);
        return 0;
      }
      v5 = v4;
      v6 = xmlStrcat(0, v4);
      v1 = xmlStrcat(v6, (const xmlChar *)":");
      xmlFree(v5);
    }
    else
    {
      v1 = 0;
    }
    authority = (const xmlChar *)v3->authority;
    if (authority)
    {
      v8 = xmlURIEscapeStr(authority, (const xmlChar *)"/?;:@");
      if (!v8)
        goto LABEL_38;
      v9 = v8;
      v10 = xmlStrcat(v1, (const xmlChar *)"//");
      v1 = xmlStrcat(v10, v9);
      xmlFree(v9);
    }
    user = (const xmlChar *)v3->user;
    if (user)
    {
      v12 = xmlURIEscapeStr(user, (const xmlChar *)";:&=+$,");
      if (!v12)
        goto LABEL_38;
      v13 = v12;
      v14 = xmlStrcat(v1, (const xmlChar *)"//");
      v15 = xmlStrcat(v14, v13);
      v1 = xmlStrcat(v15, (const xmlChar *)"@");
      xmlFree(v13);
    }
    server = (const xmlChar *)v3->server;
    if (server)
    {
      v17 = xmlURIEscapeStr(server, (const xmlChar *)"/?;:@");
      if (!v17)
        goto LABEL_38;
      v18 = v17;
      if (!v3->user)
        v1 = xmlStrcat(v1, (const xmlChar *)"//");
      v1 = xmlStrcat(v1, v18);
      xmlFree(v18);
    }
    port = v3->port;
    if (port)
    {
      v38 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 0xAuLL, "%d", port);
      v20 = xmlStrcat(v1, (const xmlChar *)":");
      v1 = xmlStrcat(v20, (const xmlChar *)__str);
    }
    path = (const xmlChar *)v3->path;
    if (path)
    {
      v22 = xmlURIEscapeStr(path, (const xmlChar *)":@&=+$,/?;");
      if (!v22)
        goto LABEL_38;
      v23 = v22;
      v1 = xmlStrcat(v1, v22);
      xmlFree(v23);
    }
    if (v3->query_raw)
    {
      v24 = xmlStrcat(v1, (const xmlChar *)"?");
      v1 = xmlStrcat(v24, (const xmlChar *)v3->query_raw);
    }
    else
    {
      query = (const xmlChar *)v3->query;
      if (query)
      {
        v33 = xmlURIEscapeStr(query, (const xmlChar *)";/?:@&=+,$");
        if (!v33)
          goto LABEL_38;
        v34 = v33;
        v35 = xmlStrcat(v1, (const xmlChar *)"?");
        v1 = xmlStrcat(v35, v34);
        xmlFree(v34);
      }
    }
    opaque = (const xmlChar *)v3->opaque;
    if (opaque)
    {
      v26 = xmlURIEscapeStr(opaque, (const xmlChar *)&byte_1B0865C1A);
      if (!v26)
        goto LABEL_38;
      v27 = v26;
      v1 = xmlStrcat(v1, v26);
      xmlFree(v27);
    }
    fragment = (const xmlChar *)v3->fragment;
    if (!fragment)
    {
LABEL_33:
      xmlFreeURI(v3);
      return v1;
    }
    v29 = xmlURIEscapeStr(fragment, (const xmlChar *)"#");
    if (v29)
    {
      v30 = v29;
      v31 = xmlStrcat(v1, (const xmlChar *)"#");
      v1 = xmlStrcat(v31, v30);
      xmlFree(v30);
      goto LABEL_33;
    }
LABEL_38:
    xmlURIErrMemory((const xmlChar *)"escaping URI value\n");
    xmlFreeURI(v3);
    ((void (*)(unsigned __int8 *))xmlFree)(v1);
    return 0;
  }
  return v1;
}

xmlChar *__cdecl xmlBuildURI(const xmlChar *URI, const xmlChar *base)
{
  int v4;
  xmlURIPtr v5;
  xmlURI *v6;
  xmlURI *v7;
  xmlURI *v8;
  xmlChar *v9;
  xmlURIPtr v10;
  xmlURIPtr v11;
  xmlURI *v12;
  char *v14;
  const char *query_raw;
  const char *query;
  const char *fragment;
  const char *authority;
  const char *server;
  const char *user;
  const char *path;
  const char *v22;
  const char *v23;
  const char *v24;
  const char *v25;
  const char *v26;
  const char *v27;
  int v28;
  const char *v29;
  char *v30;
  char *v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int i;
  uint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  const char *v45;

  if (!URI)
    return 0;
  v4 = *URI;
  if (!*URI)
  {
    v6 = 0;
    goto LABEL_9;
  }
  v5 = xmlCreateURI();
  if (!v5)
    return 0;
  v6 = v5;
  if (xmlParse3986URIReference((uint64_t)v5, (unsigned __int8 *)URI))
  {
    v7 = 0;
    v8 = 0;
LABEL_6:
    v9 = 0;
LABEL_23:
    xmlFreeURI(v6);
LABEL_24:
    if (!v8)
      goto LABEL_26;
    goto LABEL_25;
  }
  if (v6->scheme)
  {
    v9 = xmlStrdup(URI);
    v7 = 0;
    v8 = 0;
    goto LABEL_23;
  }
LABEL_9:
  if (base)
  {
    v10 = xmlCreateURI();
    v8 = v10;
    if (!v10)
    {
LABEL_21:
      v9 = 0;
LABEL_22:
      v7 = 0;
      if (!v6)
        goto LABEL_24;
      goto LABEL_23;
    }
    if (!xmlParse3986URIReference((uint64_t)v10, (unsigned __int8 *)base))
    {
      if (v4)
      {
        v11 = xmlCreateURI();
        if (v11)
        {
          v7 = v11;
          if (v6->scheme)
          {
            v12 = v6;
LABEL_54:
            v9 = xmlSaveUri(v12);
            goto LABEL_23;
          }
          if (v6->path || v6->authority || v6->server)
          {
            if (v8->scheme)
              v11->scheme = xmlMemStrdup(v8->scheme);
            query_raw = v6->query_raw;
            if (query_raw)
            {
              v7->query_raw = xmlMemStrdup(query_raw);
            }
            else
            {
              query = v6->query;
              if (query)
                v7->query = xmlMemStrdup(query);
            }
            fragment = v6->fragment;
            if (fragment)
              v7->fragment = xmlMemStrdup(fragment);
            authority = v6->authority;
            if (authority)
            {
              v7->authority = xmlMemStrdup(authority);
              goto LABEL_51;
            }
            server = v6->server;
            if (server)
            {
              v7->server = xmlMemStrdup(server);
              user = v6->user;
              if (user)
                v7->user = xmlMemStrdup(user);
              v7->port = v6->port;
LABEL_51:
              path = v6->path;
              if (!path)
              {
LABEL_53:
                v12 = v7;
                goto LABEL_54;
              }
LABEL_52:
              v7->path = xmlMemStrdup(path);
              goto LABEL_53;
            }
            v22 = v8->authority;
            if (v22)
            {
              v7->authority = xmlMemStrdup(v22);
              goto LABEL_72;
            }
            v24 = v8->server;
            if (v24)
            {
              v7->server = xmlMemStrdup(v24);
            }
            else if (v8->port != -1)
            {
              goto LABEL_72;
            }
            v25 = v8->user;
            if (v25)
              v7->user = xmlMemStrdup(v25);
            v7->port = v8->port;
LABEL_72:
            path = v6->path;
            if (path)
            {
              if (*path == 47)
                goto LABEL_52;
              v28 = strlen(path) + 2;
            }
            else
            {
              v28 = 2;
            }
            v29 = v8->path;
            if (v29)
              v28 += strlen(v29);
            v30 = (char *)xmlMallocAtomic(v28);
            v7->path = v30;
            if (!v30)
            {
              xmlURIErrMemory((const xmlChar *)"resolving URI against base\n");
              goto LABEL_6;
            }
            *v30 = 0;
            v31 = v8->path;
            if (v31)
            {
              v32 = *v31;
              if (*v31)
              {
                v33 = 0;
                v34 = 0;
                do
                {
                  v35 = v34;
                  for (i = v34 - v33 + 1; ; ++i)
                  {
                    if (!v31[v35])
                    {
                      v32 = v33;
                      goto LABEL_96;
                    }
                    if (v31[v35] == 47)
                      break;
                    ++v35;
                  }
                  v34 = v35 + 1;
                  if (v33 <= (int)v35)
                  {
                    v32 = v35 + 1;
                    v37 = v33;
                    do
                    {
                      v7->path[v37] = v8->path[v37];
                      ++v37;
                      --i;
                    }
                    while (i);
                    v31 = v8->path;
                    v33 = v34;
                  }
                  else
                  {
                    v32 = v33;
                  }
                }
                while (v31[v34]);
              }
            }
            else
            {
              v32 = 0;
            }
LABEL_96:
            v7->path[v32] = 0;
            v38 = v6->path;
            if (v38)
            {
              v39 = *v38;
              if (v39)
              {
                if (v32)
                  goto LABEL_99;
                if (v8->server)
                {
                  *v7->path = 47;
                  LOBYTE(v39) = *v6->path;
                  v32 = 1;
                  if (!(_BYTE)v39)
                    goto LABEL_102;
                }
                else
                {
                  v32 = 0;
                }
LABEL_99:
                v40 = 0;
                do
                {
                  v7->path[v32 + v40] = v39;
                  v41 = &v6->path[v40++];
                  v39 = v41[1];
                }
                while (v39);
                v32 += v40;
              }
            }
LABEL_102:
            v7->path[v32] = 0;
            xmlNormalizeURIPath(v7->path);
            goto LABEL_53;
          }
          if (v8->scheme)
            v11->scheme = xmlMemStrdup(v8->scheme);
          v23 = v8->authority;
          if (v23)
          {
            v7->authority = xmlMemStrdup(v23);
LABEL_107:
            v42 = v8->path;
            if (v42)
              v7->path = xmlMemStrdup(v42);
            v43 = v6->query_raw;
            if (v43)
              goto LABEL_110;
            v44 = v6->query;
            if (v44)
              goto LABEL_112;
            v43 = v8->query_raw;
            if (v43)
            {
LABEL_110:
              v7->query_raw = xmlMemStrdup(v43);
              goto LABEL_113;
            }
            v44 = v8->query;
            if (v44)
LABEL_112:
              v7->query = xmlMemStrdup(v44);
LABEL_113:
            v45 = v6->fragment;
            if (v45)
              v7->fragment = xmlMemStrdup(v45);
            goto LABEL_53;
          }
          v26 = v8->server;
          if (v26)
          {
            v7->server = xmlMemStrdup(v26);
          }
          else if (v8->port != -1)
          {
            goto LABEL_107;
          }
          v27 = v8->user;
          if (v27)
            v7->user = xmlMemStrdup(v27);
          v7->port = v8->port;
          goto LABEL_107;
        }
        goto LABEL_21;
      }
      v14 = v8->fragment;
      if (v14)
      {
        xmlFree(v14);
        v8->fragment = 0;
      }
      v9 = xmlSaveUri(v8);
      v7 = 0;
LABEL_25:
      xmlFreeURI(v8);
      goto LABEL_26;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v4)
  {
    v9 = xmlSaveUri(v6);
    goto LABEL_22;
  }
  v7 = 0;
  v9 = 0;
  if (v8)
    goto LABEL_25;
LABEL_26:
  if (v7)
    xmlFreeURI(v7);
  return v9;
}

xmlChar *__cdecl xmlBuildRelativeURI(const xmlChar *URI, const xmlChar *base)
{
  xmlChar *v2;
  xmlURIPtr v4;
  xmlURI *v5;
  xmlChar *v6;
  xmlURIPtr v7;
  xmlURI *v8;
  const xmlChar *v10;
  char *path;
  const char *v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  BOOL v17;
  char *v18;
  xmlChar *v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  const char *v27;
  int v28;
  xmlChar *v29;
  xmlChar *v30;
  xmlChar *v31;
  unsigned int v32;

  if (URI)
  {
    v2 = (xmlChar *)URI;
    if (*URI)
    {
      v4 = xmlCreateURI();
      if (v4)
      {
        v5 = v4;
        if (*v2 == 46)
        {
          v4->path = (char *)xmlStrdup(v2);
        }
        else if (xmlParse3986URIReference((uint64_t)v4, v2))
        {
          goto LABEL_14;
        }
        if (!base || !*base)
        {
          v6 = xmlStrdup(v2);
LABEL_15:
          v8 = v5;
LABEL_16:
          xmlFreeURI(v8);
          return v6;
        }
        v7 = xmlCreateURI();
        if (v7)
        {
          v8 = v7;
          if (*base == 46)
          {
            v7->path = (char *)xmlStrdup(base);
          }
          else if (xmlParse3986URIReference((uint64_t)v7, (unsigned __int8 *)base))
          {
            v6 = 0;
LABEL_36:
            xmlFreeURI(v5);
            goto LABEL_16;
          }
          if (v5->scheme
            && (!v8->scheme
             || xmlStrcmp((const xmlChar *)v8->scheme, (const xmlChar *)v5->scheme)
             || xmlStrcmp((const xmlChar *)v8->server, (const xmlChar *)v5->server)))
          {
            goto LABEL_34;
          }
          if (xmlStrEqual((const xmlChar *)v8->path, (const xmlChar *)v5->path))
          {
            v10 = (const xmlChar *)&byte_1B0865C1A;
LABEL_35:
            v6 = xmlStrdup(v10);
            goto LABEL_36;
          }
          path = v8->path;
          v2 = (xmlChar *)v5->path;
          if (!path)
          {
LABEL_34:
            v10 = v2;
            goto LABEL_35;
          }
          v12 = v5->path;
          if (!v2)
          {
            v12 = "/";
            v5->path = "/";
            path = v8->path;
          }
          if (*v12 == 46)
            v12 += 2 * (v12[1] == 47);
          v13 = *path;
          if (v13 == 47)
          {
            if (*v12 != 47)
              ++path;
          }
          else if (v13 == 46)
          {
            path += 2 * (path[1] == 47);
          }
          v14 = 0;
          do
          {
            v15 = path[v14];
            v16 = v12[v14++];
            if (v15)
              v17 = v15 == v16;
            else
              v17 = 0;
          }
          while (v17);
          if (v15 == v16)
          {
            v18 = &byte_1B0865C1A;
          }
          else
          {
            while (1)
            {
              v20 = v14 - 1;
              if (v14 - 1 < 1)
                break;
              v21 = v12[v14-- - 2];
              v22 = v20;
              if (v21 == 47)
                goto LABEL_52;
            }
            v22 = 0;
LABEL_52:
            v23 = 0;
            v24 = (unsigned __int8 *)&path[v20 & ~(v20 >> 63)];
            do
            {
              while (1)
              {
                v26 = *v24++;
                v25 = v26;
                if (v26 != 47)
                  break;
                ++v23;
              }
            }
            while (v25);
            v27 = &v12[v22];
            if (v23)
            {
              v28 = xmlStrlen((const xmlChar *)&v12[v22]);
              v29 = (xmlChar *)xmlMalloc(v28 + 1 + 3 * v23);
              if (v29)
              {
                v30 = v29;
                v31 = v29;
                if (v23 < 1)
                  goto LABEL_68;
                v32 = v23 + 1;
                v31 = v29;
                do
                {
                  *(_WORD *)v31 = 11822;
                  v31[2] = 47;
                  v31 += 3;
                  --v32;
                }
                while (v32 > 1);
                if (v28 < 0 || v31 <= v29 || *v27 != 47)
LABEL_68:
                  memcpy(v31, v27, v28 + 1);
                else
                  memcpy(v31, v27 + 1, v28--);
                v31[v28] = 0;
                v6 = xmlURIEscapeStr(v30, (const xmlChar *)"/;&=+$,");
                xmlFree(v30);
              }
              else
              {
                xmlURIErrMemory((const xmlChar *)"building relative URI\n");
                v6 = 0;
              }
              goto LABEL_71;
            }
            if (*v27)
            {
              xmlStrlen((const xmlChar *)v27);
              v19 = xmlURIEscapeStr((const xmlChar *)v27, (const xmlChar *)"/;&=+$,");
              goto LABEL_47;
            }
            v18 = "./";
          }
          v19 = xmlStrdup((const xmlChar *)v18);
LABEL_47:
          v6 = v19;
LABEL_71:
          if (!v2)
            v5->path = 0;
          goto LABEL_36;
        }
LABEL_14:
        v6 = 0;
        goto LABEL_15;
      }
    }
  }
  return 0;
}

xmlChar *__cdecl xmlCanonicPath(const xmlChar *path)
{
  const xmlChar *v1;
  xmlURI *v2;
  xmlChar *v4;
  const xmlChar *v5;
  uint64_t v6;
  xmlChar *v7;
  xmlURI *v8;

  if (path)
  {
    v1 = path;
    if (*path == 47 && path[1] == 47 && path[2] != 47)
      v1 = path + 1;
    v2 = xmlParseURI((const char *)v1);
    if (v2)
    {
      xmlFreeURI(v2);
    }
    else
    {
      v5 = xmlStrstr(v1, (const xmlChar *)"://");
      if (v5 && ((_DWORD)v5 - (_DWORD)v1 - 21) >= 0xFFFFFFEC)
      {
        v6 = 0;
        while ((v1[v6] & 0xDFu) - 65 < 0x1A)
        {
          if ((_DWORD)v5 - (_DWORD)v1 == ++v6)
          {
            v7 = xmlURIEscapeStr(v1, (const xmlChar *)":/?_.#&;=");
            if (!v7)
              return xmlStrdup(v1);
            v4 = v7;
            v8 = xmlParseURI((const char *)v7);
            if (v8)
            {
              xmlFreeURI(v8);
              return v4;
            }
            xmlFree(v4);
            return xmlStrdup(v1);
          }
        }
      }
    }
    return xmlStrdup(v1);
  }
  else
  {
    return 0;
  }
}

xmlChar *__cdecl xmlPathToURI(const xmlChar *path)
{
  xmlURI *v2;
  xmlChar *v4;
  xmlChar *v5;
  xmlChar *v6;
  xmlURI v7;

  if (!path)
    return 0;
  v2 = xmlParseURI((const char *)path);
  if (v2)
  {
    xmlFreeURI(v2);
    return xmlStrdup(path);
  }
  v4 = xmlCanonicPath(path);
  if (!v4)
    return 0;
  v5 = v4;
  memset(&v7.fragment, 0, 24);
  memset(&v7, 0, 48);
  *(_OWORD *)&v7.path = (unint64_t)v4;
  v6 = xmlSaveUri(&v7);
  xmlFree(v5);
  return v6;
}

uint64_t xmlParse3986Query(uint64_t a1, const xmlChar **a2)
{
  const xmlChar *v4;
  int v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  void *v11;
  const xmlChar *v12;
  int v13;
  void *v14;
  uint64_t result;
  void *v16;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = *a2;
  while (1)
  {
    v5 = *v4;
    if ((v5 - 48) >= 0xA && (v5 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      v7 = (v5 - 33);
      if (v7 > 0x3E)
        goto LABEL_38;
      if (((1 << (v5 - 33)) & 0x40000000D6007FE9) != 0)
        goto LABEL_10;
      if (v7 == 4)
      {
        if ((v4[1] - 48) < 0xAu
          || (v8 = v4[1] - 65, v8 <= 0x25) && ((1 << v8) & 0x3F0000003FLL) != 0)
        {
          if ((v4[2] - 48) < 0xAu)
            goto LABEL_10;
          v9 = v4[2] - 65;
          if (v9 <= 0x25 && ((1 << v9) & 0x3F0000003FLL) != 0)
            goto LABEL_10;
        }
      }
      else
      {
LABEL_38:
        if (v5 == 126)
          goto LABEL_10;
      }
      if (!a1)
        goto LABEL_35;
      v10 = *(_DWORD *)(a1 + 72);
      if ((v10 & 1) == 0
        || (v5 - 91) > 0x22
        || ((1 << (v5 - 91)) & 0x70000002FLL) == 0)
      {
        break;
      }
    }
LABEL_10:
    if (v5 == 37)
      v4 += 3;
    else
      ++v4;
  }
  v11 = *(void **)(a1 + 56);
  if (v11)
  {
    xmlFree(v11);
    v10 = *(_DWORD *)(a1 + 72);
  }
  v12 = *a2;
  v13 = (_DWORD)v4 - *a2;
  if ((v10 & 2) != 0)
    v14 = xmlStrndup(v12, v13);
  else
    v14 = xmlURIUnescapeString((const char *)v12, v13, 0);
  *(_QWORD *)(a1 + 56) = v14;
  v16 = *(void **)(a1 + 80);
  if (v16)
    xmlFree(v16);
  *(_QWORD *)(a1 + 80) = xmlStrndup(*a2, v4 - *a2);
LABEL_35:
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t xmlParse3986Fragment(uint64_t a1, const xmlChar **a2)
{
  const xmlChar *v4;
  int v5;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  void *v11;
  const xmlChar *v12;
  int v13;
  void *v14;
  uint64_t result;

  if (!a2)
    return 0xFFFFFFFFLL;
  v4 = *a2;
  while (1)
  {
    v5 = *v4;
    if ((v5 - 48) >= 0xA && (v5 & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      v7 = (v5 - 33);
      if (v7 > 0x3E)
        goto LABEL_36;
      if (((1 << (v5 - 33)) & 0x54000000D6007FE9) != 0)
        goto LABEL_10;
      if (v7 == 4)
      {
        if ((v4[1] - 48) < 0xAu
          || (v8 = v4[1] - 65, v8 <= 0x25) && ((1 << v8) & 0x3F0000003FLL) != 0)
        {
          if ((v4[2] - 48) < 0xAu)
            goto LABEL_10;
          v9 = v4[2] - 65;
          if (v9 <= 0x25 && ((1 << v9) & 0x3F0000003FLL) != 0)
            goto LABEL_10;
        }
      }
      else
      {
LABEL_36:
        if (v5 == 126)
          goto LABEL_10;
      }
      if (!a1)
        goto LABEL_33;
      v10 = *(_DWORD *)(a1 + 72);
      if ((v10 & 1) == 0
        || (v5 - 92) > 0x21
        || ((1 << (v5 - 92)) & 0x380000015) == 0)
      {
        break;
      }
    }
LABEL_10:
    if (v5 == 37)
      v4 += 3;
    else
      ++v4;
  }
  v11 = *(void **)(a1 + 64);
  if (v11)
  {
    xmlFree(v11);
    v10 = *(_DWORD *)(a1 + 72);
  }
  v12 = *a2;
  v13 = (_DWORD)v4 - *a2;
  if ((v10 & 2) != 0)
    v14 = xmlStrndup(v12, v13);
  else
    v14 = xmlURIUnescapeString((const char *)v12, v13, 0);
  *(_QWORD *)(a1 + 64) = v14;
LABEL_33:
  result = 0;
  *a2 = v4;
  return result;
}

uint64_t xmlParse3986PathAbsolute(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  void *v5;
  unsigned __int8 *v6;
  int v7;
  void *v8;
  uint64_t v9;
  unsigned __int8 *v11;

  v2 = *a2;
  if (**a2 != 47)
    return 1;
  v11 = v2 + 1;
  if (!xmlParse3986Segment(&v11, 0, 0))
  {
    v9 = 1;
    while (*v11 == 47)
    {
      ++v11;
      if (xmlParse3986Segment(&v11, 0, 1))
        return v9;
    }
  }
  if (a1)
  {
    v5 = *(void **)(a1 + 48);
    if (v5)
    {
      xmlFree(v5);
      v2 = *a2;
    }
    v6 = v11;
    if (v11 == v2)
    {
      *(_QWORD *)(a1 + 48) = 0;
      v6 = v2;
    }
    else
    {
      v7 = (_DWORD)v11 - (_DWORD)v2;
      if ((*(_BYTE *)(a1 + 72) & 2) != 0)
        v8 = xmlStrndup(v2, v7);
      else
        v8 = xmlURIUnescapeString((const char *)v2, v7, 0);
      *(_QWORD *)(a1 + 48) = v8;
    }
  }
  else
  {
    v6 = v11;
  }
  v9 = 0;
  *a2 = v6;
  return v9;
}

uint64_t xmlParse3986DecOctet(unsigned __int8 **a1)
{
  unsigned __int8 *v1;
  int v2;
  unsigned __int8 *v3;
  unsigned int v4;
  uint64_t v5;

  v1 = *a1;
  v2 = **a1;
  if ((v2 - 48) > 9)
    return 1;
  v3 = v1 + 1;
  v4 = v1[1];
  if (v4 - 48 > 9)
    goto LABEL_11;
  if (v2 != 48)
  {
    v3 = v1 + 2;
    if (v1[2] - 48 <= 9)
    {
      if (v2 == 50)
      {
        if (v4 > 0x35)
          return 1;
      }
      else if (v2 != 49)
      {
        return 1;
      }
      v3 = v1 + 3;
    }
LABEL_11:
    v5 = 0;
    *a1 = v3;
    return v5;
  }
  return 1;
}

int xmlValidBuildContentModel(xmlValidCtxtPtr ctxt, xmlElementPtr elem)
{
  uint64_t v2;
  uint64_t v3;
  int result;
  uint64_t v5;
  xmlRegexp *v6;
  xmlAutomata *v7;
  xmlRegexp *v8;
  char v9[5000];
  uint64_t v10;

  v3 = MEMORY[0x1E0C80A78](ctxt, elem);
  result = 0;
  v10 = *MEMORY[0x1E0C80C00];
  if (!v3)
    return result;
  v5 = v2;
  if (!v2)
    return result;
  if (*(_DWORD *)(v2 + 8) != 15)
    return 0;
  if (*(_DWORD *)(v2 + 72) != 4)
    return 1;
  v6 = *(xmlRegexp **)(v2 + 104);
  if (v6)
  {
    result = xmlRegexpIsDeterminist(v6);
    if (!result)
    {
      *(_DWORD *)(v3 + 64) = 0;
      return result;
    }
    return 1;
  }
  v7 = xmlNewAutomata();
  *(_QWORD *)(v3 + 96) = v7;
  if (!v7)
  {
    xmlErrValidNode(v3, v5, 1, "Cannot create automata for element %s\n", *(const xmlChar **)(v5 + 16), 0, 0);
    return 0;
  }
  *(_QWORD *)(v3 + 104) = xmlAutomataGetInitState(v7);
  xmlValidBuildAContentModel(*(_QWORD *)(v5 + 80), v3, *(const xmlChar **)(v5 + 16));
  xmlAutomataSetFinalState(*(xmlAutomataPtr *)(v3 + 96), *(xmlAutomataStatePtr *)(v3 + 104));
  v8 = xmlAutomataCompile(*(xmlAutomataPtr *)(v3 + 96));
  *(_QWORD *)(v5 + 104) = v8;
  if (xmlRegexpIsDeterminist(v8) == 1)
  {
    *(_QWORD *)(v3 + 104) = 0;
    xmlFreeAutomata(*(xmlAutomataPtr *)(v3 + 96));
    *(_QWORD *)(v3 + 96) = 0;
    return 1;
  }
  bzero(v9, 0x1388uLL);
  xmlSnprintfElementContent(v9, 5000, *(xmlElementContentPtr *)(v5 + 80), 1);
  xmlErrValidNode(v3, v5, 505, "Content model of %s is not determinist: %s\n", *(const xmlChar **)(v5 + 16), (xmlChar *)v9, 0);
  *(_DWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 104) = 0;
  xmlFreeAutomata(*(xmlAutomataPtr *)(v3 + 96));
  result = 0;
  *(_QWORD *)(v3 + 96) = 0;
  return result;
}

_DWORD *xmlErrValidNode(uint64_t a1, uint64_t a2, int a3, const char *a4, const xmlChar *a5, xmlChar *a6, xmlChar *a7)
{
  void (*v9)(void *, const char *, ...);
  _QWORD *v10;
  _QWORD *v11;

  if (a1)
  {
    v10 = *(_QWORD **)a1;
    v9 = *(void (**)(void *, const char *, ...))(a1 + 8);
    if (*(_DWORD *)(a1 + 48) >> 1 == 1441171738)
      v11 = *(_QWORD **)a1;
    else
      v11 = 0;
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v10 = 0;
  }
  return __xmlRaiseError(0, v9, v10, v11, a2, 0x17u, a3, 2, 0, 0, a5, a6, a7, 0, 0, a4, (char)a5);
}

void xmlValidBuildAContentModel(uint64_t a1, uint64_t a2, const xmlChar *a3)
{
  uint64_t v5;
  const char *v6;
  xmlAutomataState *v7;
  xmlChar *v8;
  xmlChar *v9;
  xmlAutomataState *v10;
  int v11;
  xmlAutomataState *v12;
  xmlAutomataState *v13;
  xmlAutomataState *v14;
  int v15;
  xmlAutomataState *v16;
  xmlAutomataState *v17;
  xmlAutomata *v18;
  xmlAutomataState *v19;
  xmlAutomataState *v20;
  xmlAutomataState *v21;
  _OWORD v22[3];
  __int16 v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = a1;
    switch(*(_DWORD *)a1)
    {
      case 1:
        v6 = "Found PCDATA in content model of %s\n";
        goto LABEL_5;
      case 2:
        v7 = *(xmlAutomataState **)(a2 + 104);
        v23 = 0;
        memset(v22, 0, sizeof(v22));
        v8 = xmlBuildQName(*(const xmlChar **)(a1 + 8), *(const xmlChar **)(a1 + 40), (xmlChar *)v22, 50);
        if (v8)
        {
          v9 = v8;
          switch(*(_DWORD *)(v5 + 4))
          {
            case 1:
              *(_QWORD *)(a2 + 104) = xmlAutomataNewTransition(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0, v8, 0);
              break;
            case 2:
              v20 = xmlAutomataNewTransition(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0, v8, 0);
              *(_QWORD *)(a2 + 104) = v20;
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v7, v20);
              break;
            case 3:
              v21 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0);
              goto LABEL_38;
            case 4:
              v21 = xmlAutomataNewTransition(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0, v8, 0);
LABEL_38:
              *(_QWORD *)(a2 + 104) = v21;
              xmlAutomataNewTransition(*(xmlAutomataPtr *)(a2 + 96), v21, v21, v9, 0);
              break;
            default:
              break;
          }
          if (v9 != (xmlChar *)v22 && v9 != *(xmlChar **)(v5 + 8))
            xmlFree(v9);
        }
        else
        {
          xmlVErrMemory(a2, (const xmlChar *)"Building content model");
        }
        return;
      case 3:
        v10 = *(xmlAutomataState **)(a2 + 104);
        v11 = *(_DWORD *)(a1 + 4);
        if (v11 != 1)
        {
          v10 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0);
          *(_QWORD *)(a2 + 104) = v10;
        }
        do
        {
          xmlValidBuildAContentModel(*(_QWORD *)(v5 + 16), a2, a3);
          v5 = *(_QWORD *)(v5 + 24);
        }
        while (*(_DWORD *)v5 == 3 && *(_DWORD *)(v5 + 4) == 1);
        xmlValidBuildAContentModel(v5, a2, a3);
        v12 = *(xmlAutomataState **)(a2 + 104);
        v13 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v12, 0);
        *(_QWORD *)(a2 + 104) = v13;
        if (v11 == 4)
          goto LABEL_30;
        v14 = v13;
        if (v11 == 3)
        {
          xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v10, v13);
LABEL_30:
          v18 = *(xmlAutomata **)(a2 + 96);
          v19 = v12;
          goto LABEL_33;
        }
        if (v11 == 2)
          goto LABEL_27;
        return;
      case 4:
        v15 = *(_DWORD *)(a1 + 4);
        if ((v15 - 3) >= 2)
        {
          v10 = *(xmlAutomataState **)(a2 + 104);
        }
        else
        {
          v10 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), 0);
          *(_QWORD *)(a2 + 104) = v10;
        }
        v16 = xmlAutomataNewState(*(xmlAutomataPtr *)(a2 + 96));
        do
        {
          *(_QWORD *)(a2 + 104) = v10;
          xmlValidBuildAContentModel(*(_QWORD *)(v5 + 16), a2, a3);
          xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), v16);
          v5 = *(_QWORD *)(v5 + 24);
        }
        while (*(_DWORD *)v5 == 4 && *(_DWORD *)(v5 + 4) == 1);
        *(_QWORD *)(a2 + 104) = v10;
        xmlValidBuildAContentModel(v5, a2, a3);
        xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), *(xmlAutomataStatePtr *)(a2 + 104), v16);
        v17 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v16, 0);
        *(_QWORD *)(a2 + 104) = v17;
        if (v15 == 4)
          goto LABEL_32;
        v14 = v17;
        if (v15 == 3)
        {
          xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a2 + 96), v10, v17);
LABEL_32:
          v18 = *(xmlAutomata **)(a2 + 96);
          v19 = v16;
LABEL_33:
          v14 = v10;
        }
        else
        {
          if (v15 != 2)
            return;
LABEL_27:
          v18 = *(xmlAutomata **)(a2 + 96);
          v19 = v10;
        }
        xmlAutomataNewEpsilon(v18, v19, v14);
        break;
      default:
        xmlErrValid_0(a2, 1, "ContentModel broken for element %s\n", a3);
        return;
    }
  }
  else
  {
    v6 = "Found NULL content in content model of %s\n";
LABEL_5:
    xmlErrValidNode(a2, 0, 1, v6, a3, 0, 0);
  }
}

void xmlSnprintfElementContent(char *buf, int size, xmlElementContentPtr content, int englob)
{
  int v4;
  int v9;
  size_t v10;
  int v11;
  const xmlChar *prefix;
  int v13;
  int v14;
  char *v15;
  int v16;
  const xmlChar *name;
  int v18;
  int v19;
  size_t v20;
  _xmlElementContent *c2;
  xmlElementContentType type;
  _BOOL4 v23;
  size_t v24;
  size_t v26;
  unsigned __int32 v27;

  v4 = size - 1;
  if (size >= 1 && content)
  {
    v9 = strlen(buf);
    v10 = (size - v9);
    if ((int)v10 <= 49)
    {
LABEL_36:
      terminateBufferTooSmall(buf, size);
    }
    else
    {
      if (englob)
      {
        strncat(buf, "(", v10);
        ++v9;
      }
      if (content->ocur == XML_ELEMENT_CONTENT_ONCE)
        v11 = englob != 0;
      else
        v11 = (englob != 0) + 1;
      switch(content->type)
      {
        case XML_ELEMENT_CONTENT_PCDATA:
          strncat(buf, "#PCDATA", size - v9);
          v9 += 7;
          goto LABEL_29;
        case XML_ELEMENT_CONTENT_ELEMENT:
          prefix = content->prefix;
          if (!prefix)
            goto LABEL_14;
          v13 = xmlStrlen(prefix);
          if (size - v9 <= v11 + v13 + 1)
            goto LABEL_36;
          v14 = v13;
          v15 = strncat(buf, (const char *)content->prefix, size - v9);
          v16 = v14 + v9;
          strncat(v15, ":", size - v16);
          v9 = v16 + 1;
LABEL_14:
          name = content->name;
          if (!name)
            goto LABEL_29;
          v18 = xmlStrlen(name);
          if (size - v9 <= v18 + v11)
            goto LABEL_36;
          v19 = v18;
          strncat(buf, (const char *)content->name, size - v9);
          v9 += v19;
LABEL_29:
          v26 = (size - v9);
          if ((int)v26 <= v11)
            goto LABEL_36;
          if (englob)
          {
            strncat(buf, ")", v26);
            ++v9;
          }
          v27 = content->ocur - 2;
          if (v27 <= 2)
            strncat(buf, off_1E6174090[v27], size - v9);
          buf[v4] = 0;
          break;
        case XML_ELEMENT_CONTENT_SEQ:
          xmlSnprintfElementContent(buf, size, content->c1, content->c1->type - 3 < 2);
          v20 = size - strlen(buf);
          if ((int)v20 <= 49)
            goto LABEL_36;
          strncat(buf, " , ", v20);
          c2 = content->c2;
          type = c2->type;
          if (c2->type == XML_ELEMENT_CONTENT_OR)
            goto LABEL_19;
          goto LABEL_22;
        case XML_ELEMENT_CONTENT_OR:
          xmlSnprintfElementContent(buf, size, content->c1, content->c1->type - 3 < 2);
          v24 = size - strlen(buf);
          if ((int)v24 <= 49)
            goto LABEL_36;
          strncat(buf, " | ", v24);
          c2 = content->c2;
          type = c2->type;
          if (c2->type == XML_ELEMENT_CONTENT_SEQ)
LABEL_19:
            v23 = 1;
          else
LABEL_22:
            v23 = type != XML_ELEMENT_CONTENT_ELEMENT && c2->ocur != XML_ELEMENT_CONTENT_ONCE;
          xmlSnprintfElementContent(buf, size, c2, v23);
          v9 = strlen(buf);
          goto LABEL_29;
        default:
          goto LABEL_29;
      }
    }
  }
}

xmlValidCtxtPtr xmlNewValidCtxt(void)
{
  xmlValidCtxt *v0;
  xmlValidCtxt *v1;

  v0 = (xmlValidCtxt *)xmlMalloc(0x70uLL);
  v1 = v0;
  if (v0)
  {
    *(_OWORD *)&v0->vstateNr = 0u;
    *(_OWORD *)&v0->am = 0u;
    *(_OWORD *)&v0->finishDtd = 0u;
    *(_OWORD *)&v0->valid = 0u;
    *(_OWORD *)&v0->warning = 0u;
    *(_OWORD *)&v0->nodeNr = 0u;
    *(_OWORD *)&v0->userData = 0u;
  }
  else
  {
    xmlVErrMemory(0, (const xmlChar *)"malloc failed");
  }
  return v1;
}

_DWORD *xmlVErrMemory(uint64_t a1, const xmlChar *a2)
{
  void (*v3)(void *, const char *, ...);
  _QWORD *v4;
  _QWORD *v5;
  char v7;

  if (a1)
  {
    v4 = *(_QWORD **)a1;
    v3 = *(void (**)(void *, const char *, ...))(a1 + 8);
    if (*(_DWORD *)(a1 + 48) >> 1 == 1441171738)
      v5 = *(_QWORD **)a1;
    else
      v5 = 0;
    if (a2)
      return __xmlRaiseError(0, v3, v4, v5, 0, 0x17u, 2, 3, 0, 0, a2, 0, 0, 0, (unsigned __int128)0 >> 96, "Memory allocation failed : %s\n", (char)a2);
  }
  else
  {
    v3 = 0;
    v5 = 0;
    v4 = 0;
    if (a2)
      return __xmlRaiseError(0, v3, v4, v5, 0, 0x17u, 2, 3, 0, 0, a2, 0, 0, 0, (unsigned __int128)0 >> 96, "Memory allocation failed : %s\n", (char)a2);
  }
  return __xmlRaiseError(0, v3, v4, v5, 0, 0x17u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "Memory allocation failed\n", v7);
}

void xmlFreeValidCtxt(xmlValidCtxtPtr a1)
{
  xmlValidState *vstateTab;
  xmlNodePtr *nodeTab;

  vstateTab = a1->vstateTab;
  if (vstateTab)
    xmlFree(vstateTab);
  nodeTab = a1->nodeTab;
  if (nodeTab)
    xmlFree(nodeTab);
  xmlFree(a1);
}

xmlElementContentPtr xmlNewDocElementContent(xmlDocPtr doc, const xmlChar *name, xmlElementContentType type)
{
  _xmlDict *dict;
  const char *v6;
  xmlElementContent *v7;
  xmlElementContent *v8;
  const xmlChar *v9;
  const xmlChar *v10;
  xmlDict *v11;
  const xmlChar *v12;
  const xmlChar *v13;
  const xmlChar *v14;
  int len;

  if (doc)
    dict = doc->dict;
  else
    dict = 0;
  if (type - 3 < 2 || type == XML_ELEMENT_CONTENT_PCDATA)
  {
    if (!name)
      goto LABEL_12;
    v6 = "xmlNewElementContent : name != NULL !\n";
    goto LABEL_11;
  }
  if (type != XML_ELEMENT_CONTENT_ELEMENT)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"Internal: ELEMENT content corrupted invalid type\n");
    return 0;
  }
  if (!name)
  {
    v6 = "xmlNewElementContent : name == NULL !\n";
LABEL_11:
    __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)v6);
  }
LABEL_12:
  v7 = (xmlElementContent *)xmlMalloc(0x30uLL);
  v8 = v7;
  if (v7)
  {
    *(_OWORD *)&v7->c1 = 0u;
    *(_OWORD *)&v7->parent = 0u;
    *(_OWORD *)&v7->type = 0u;
    v7->type = type;
    v7->ocur = XML_ELEMENT_CONTENT_ONCE;
    if (name)
    {
      len = 0;
      v9 = xmlSplitQName3(name, &len);
      if (v9)
      {
        v10 = v9;
        if (dict)
        {
          v8->prefix = xmlDictLookup(dict, name, len);
          v11 = dict;
          v12 = v10;
LABEL_21:
          v13 = xmlDictLookup(v11, v12, -1);
LABEL_25:
          v8->name = v13;
          return v8;
        }
        v8->prefix = xmlStrndup(name, len);
        v14 = v10;
      }
      else
      {
        if (dict)
        {
          v11 = dict;
          v12 = name;
          goto LABEL_21;
        }
        v14 = name;
      }
      v13 = xmlStrdup(v14);
      goto LABEL_25;
    }
  }
  else
  {
    xmlVErrMemory(0, (const xmlChar *)"malloc failed");
  }
  return v8;
}

_DWORD *xmlErrValid_0(uint64_t a1, int a2, const char *a3, const xmlChar *a4)
{
  void (*v7)(void *, const char *, ...);
  _QWORD *v8;
  _QWORD *v9;

  if (a1)
  {
    v8 = *(_QWORD **)a1;
    v7 = *(void (**)(void *, const char *, ...))(a1 + 8);
    if (*(_DWORD *)(a1 + 48) >> 1 == 1441171738)
      v9 = *(_QWORD **)a1;
    else
      v9 = 0;
    if (a4)
      return __xmlRaiseError(0, v7, v8, v9, 0, 0x17u, a2, 2, 0, 0, a4, 0, 0, 0, (unsigned __int128)0 >> 96, a3, (char)a4);
  }
  else
  {
    v7 = 0;
    v9 = 0;
    v8 = 0;
    if (a4)
      return __xmlRaiseError(0, v7, v8, v9, 0, 0x17u, a2, 2, 0, 0, a4, 0, 0, 0, (unsigned __int128)0 >> 96, a3, (char)a4);
  }
  return __xmlRaiseError(0, v7, v8, v9, 0, 0x17u, a2, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)a3);
}

xmlElementContentPtr xmlNewElementContent(const xmlChar *name, xmlElementContentType type)
{
  return xmlNewDocElementContent(0, name, type);
}

xmlElementContentPtr xmlCopyDocElementContent(xmlDocPtr doc, xmlElementContentPtr content)
{
  _xmlDict *dict;
  xmlElementContent *v5;
  xmlElementContent *v6;
  const xmlChar *name;
  const xmlChar *prefix;
  const xmlChar *v9;
  xmlElementContent *c1;
  xmlElementContentPtr v11;
  _xmlElementContent *c2;
  xmlElementContent *v13;
  _xmlElementContent *v14;
  xmlElementContent *v15;
  const xmlChar *v16;
  const xmlChar *v17;
  const xmlChar *v18;
  xmlElementContent *v19;
  xmlElementContentPtr v20;

  if (!content)
    return 0;
  if (doc)
    dict = doc->dict;
  else
    dict = 0;
  v6 = (xmlElementContent *)xmlMalloc(0x30uLL);
  v5 = v6;
  if (!v6)
  {
LABEL_39:
    xmlVErrMemory(0, (const xmlChar *)"malloc failed");
    return v5;
  }
  *(_OWORD *)&v6->c1 = 0u;
  *(_OWORD *)&v6->parent = 0u;
  *(_OWORD *)&v6->type = 0u;
  *(_QWORD *)&v6->type = *(_QWORD *)&content->type;
  name = content->name;
  if (name)
  {
    if (!dict)
    {
      v6->name = xmlStrdup(content->name);
      prefix = content->prefix;
      if (!prefix)
        goto LABEL_16;
      goto LABEL_14;
    }
    v6->name = xmlDictLookup(dict, name, -1);
  }
  prefix = content->prefix;
  if (!prefix)
    goto LABEL_16;
  if (!dict)
  {
LABEL_14:
    v9 = xmlStrdup(prefix);
    goto LABEL_15;
  }
  v9 = xmlDictLookup(dict, prefix, -1);
LABEL_15:
  v5->prefix = v9;
LABEL_16:
  c1 = content->c1;
  if (c1)
  {
    v11 = xmlCopyDocElementContent(doc, c1);
    v5->c1 = v11;
    if (!v11)
      goto LABEL_19;
    goto LABEL_18;
  }
  v11 = v5->c1;
  if (v11)
LABEL_18:
    v11->parent = v5;
LABEL_19:
  c2 = content->c2;
  if (c2)
  {
    v13 = v5;
    while (1)
    {
      v14 = (_xmlElementContent *)xmlMalloc(0x30uLL);
      if (!v14)
        goto LABEL_39;
      v15 = v14;
      *(_OWORD *)&v14->c1 = 0u;
      *(_OWORD *)&v14->parent = 0u;
      *(_OWORD *)&v14->type = 0u;
      *(_QWORD *)&v14->type = *(_QWORD *)&c2->type;
      v13->c2 = v14;
      v14->parent = v13;
      v16 = c2->name;
      if (!v16)
        break;
      if (!dict)
      {
        v14->name = xmlStrdup(c2->name);
        v17 = c2->prefix;
        if (!v17)
          goto LABEL_32;
LABEL_30:
        v18 = xmlStrdup(v17);
        goto LABEL_31;
      }
      v14->name = xmlDictLookup(dict, v16, -1);
      v17 = c2->prefix;
      if (v17)
        goto LABEL_28;
LABEL_32:
      v19 = c2->c1;
      if (!v19)
      {
        v20 = v15->c1;
        if (!v20)
          goto LABEL_35;
LABEL_34:
        v20->parent = v5;
        goto LABEL_35;
      }
      v20 = xmlCopyDocElementContent(doc, v19);
      v15->c1 = v20;
      if (v20)
        goto LABEL_34;
LABEL_35:
      c2 = c2->c2;
      v13 = v15;
      if (!c2)
        return v5;
    }
    v17 = c2->prefix;
    if (!v17)
      goto LABEL_32;
    if (!dict)
      goto LABEL_30;
LABEL_28:
    v18 = xmlDictLookup(dict, v17, -1);
LABEL_31:
    v15->prefix = v18;
    goto LABEL_32;
  }
  return v5;
}

xmlElementContentPtr xmlCopyElementContent(xmlElementContentPtr content)
{
  return xmlCopyDocElementContent(0, content);
}

void xmlFreeDocElementContent(xmlDocPtr doc, xmlElementContentPtr cur)
{
  xmlElementContentPtr v2;
  _xmlDict *dict;
  uint64_t i;
  xmlElementContent *c1;
  uint64_t v6;
  const xmlChar *name;
  const xmlChar *prefix;
  const xmlChar *v9;
  _xmlElementContent *parent;
  uint64_t v11;
  _xmlElementContent *c2;

  if (cur)
  {
    v2 = cur;
    if (doc)
      dict = doc->dict;
    else
      dict = 0;
    for (i = 0; ; i += v6)
    {
      c1 = v2->c1;
      if (c1 || (c1 = v2->c2) != 0)
      {
        v6 = 1;
        v2 = c1;
      }
      else
      {
        if (v2->type - 1 >= 4)
        {
          __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"Internal: ELEMENT content corrupted invalid type\n");
          return;
        }
        name = v2->name;
        if (dict)
        {
          if (name && !xmlDictOwns(dict, name))
            xmlFree((void *)v2->name);
          prefix = v2->prefix;
          if (prefix && !xmlDictOwns(dict, prefix))
            ((void (*)(const xmlChar *))xmlFree)(v2->prefix);
        }
        else
        {
          if (name)
            xmlFree((void *)v2->name);
          v9 = v2->prefix;
          if (v9)
            ((void (*)(const xmlChar *))xmlFree)(v9);
        }
        if (!i || (parent = v2->parent) == 0)
        {
          xmlFree(v2);
          return;
        }
        if (v2 == parent->c1)
          v11 = 16;
        else
          v11 = 24;
        *(_QWORD *)((char *)&parent->type + v11) = 0;
        xmlFree(v2);
        c2 = parent->c2;
        if (c2)
          v2 = parent->c2;
        else
          v2 = parent;
        if (c2)
          v6 = 0;
        else
          v6 = -1;
      }
    }
  }
}

void xmlFreeElementContent(xmlElementContentPtr cur)
{
  xmlFreeDocElementContent(0, cur);
}

size_t terminateBufferTooSmall(char *a1, int a2)
{
  size_t result;
  size_t v5;

  result = strlen(a1);
  v5 = (a2 - result);
  if ((int)v5 >= 5 && a1[(int)result - 1] != 46)
    result = (size_t)strncat(a1, " ...", v5);
  a1[a2 - 1] = 0;
  return result;
}

xmlElementPtr xmlAddElementDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name, xmlElementTypeVal type, xmlElementContentPtr content)
{
  uint64_t v5;
  const xmlChar *v6;
  const char *v11;
  xmlChar *v12;
  xmlChar *v13;
  void *elements;
  _xmlDoc *doc;
  xmlDict *v16;
  _xmlDoc *v17;
  _xmlDtd *intSubset;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  void (*v23)(void);
  _OWORD *v24;
  xmlChar *v25;
  xmlChar *v26;
  const char *v27;
  _xmlNode *last;
  xmlChar *prefix;

  v5 = 0;
  if (!dtd)
    return (xmlElementPtr)v5;
  v6 = name;
  if (!name)
    return (xmlElementPtr)v5;
  switch(type)
  {
    case XML_ELEMENT_TYPE_EMPTY:
      if (!content)
        goto LABEL_12;
      v11 = "xmlAddElementDecl: content != NULL for EMPTY\n";
      goto LABEL_18;
    case XML_ELEMENT_TYPE_ANY:
      if (!content)
        goto LABEL_12;
      v11 = "xmlAddElementDecl: content != NULL for ANY\n";
      goto LABEL_18;
    case XML_ELEMENT_TYPE_MIXED:
      if (content)
        goto LABEL_12;
      v11 = "xmlAddElementDecl: content == NULL for MIXED\n";
      goto LABEL_18;
    case XML_ELEMENT_TYPE_ELEMENT:
      if (!content)
      {
        v11 = "xmlAddElementDecl: content == NULL for ELEMENT\n";
LABEL_18:
        xmlErrValid_0((uint64_t)ctxt, 1, v11, 0);
        return 0;
      }
LABEL_12:
      prefix = 0;
      v12 = xmlSplitQName2(name, &prefix);
      v13 = v12;
      if (v12)
        v6 = v12;
      elements = dtd->elements;
      if (!elements)
      {
        doc = dtd->doc;
        v16 = doc ? doc->dict : 0;
        elements = xmlHashCreateDict(0, v16);
        dtd->elements = elements;
        if (!elements)
        {
          v27 = "xmlAddElementDecl: Table creation failed!\n";
LABEL_41:
          xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)v27);
          if (v13)
            xmlFree(v13);
          if (!prefix)
            return 0;
          v23 = (void (*)(void))xmlFree;
          goto LABEL_51;
        }
      }
      v17 = dtd->doc;
      if (v17
        && (intSubset = v17->intSubset) != 0
        && (v19 = xmlHashLookup2((xmlHashTablePtr)intSubset->elements, v6, prefix)) != 0
        && (v20 = (uint64_t)v19, !*((_DWORD *)v19 + 18)))
      {
        v21 = v19[11];
        v19[11] = 0;
        xmlHashRemoveEntry2((xmlHashTablePtr)dtd->doc->intSubset->elements, v6, prefix, 0);
        xmlFreeElement(v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = xmlHashLookup2((xmlHashTablePtr)elements, v6, prefix);
      if (v22)
      {
        v5 = (uint64_t)v22;
        if (v22[18])
        {
          xmlErrValidNode((uint64_t)ctxt, (uint64_t)dtd, 509, "Redefinition of element %s\n", v6, 0, 0);
          if (v13)
            xmlFree(v13);
          if (!prefix)
            return 0;
          v23 = (void (*)(void))xmlFree;
          goto LABEL_51;
        }
        if (prefix)
        {
          xmlFree(prefix);
          prefix = 0;
        }
        goto LABEL_55;
      }
      v24 = xmlMalloc(0x70uLL);
      if (!v24)
      {
        v27 = "malloc failed";
        goto LABEL_41;
      }
      v5 = (uint64_t)v24;
      v24[5] = 0u;
      v24[6] = 0u;
      v24[3] = 0u;
      v24[4] = 0u;
      v24[1] = 0u;
      v24[2] = 0u;
      *v24 = 0u;
      *((_DWORD *)v24 + 2) = 15;
      v25 = xmlStrdup(v6);
      *(_QWORD *)(v5 + 16) = v25;
      if (!v25)
      {
        xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"malloc failed");
        if (v13)
          xmlFree(v13);
        if (prefix)
          xmlFree(prefix);
        v23 = (void (*)(void))xmlFree;
        goto LABEL_51;
      }
      v26 = prefix;
      *(_QWORD *)(v5 + 96) = prefix;
      if (xmlHashAddEntry2((xmlHashTablePtr)elements, v6, v26, (void *)v5))
      {
        xmlErrValidNode((uint64_t)ctxt, (uint64_t)dtd, 509, "Redefinition of element %s\n", v6, 0, 0);
        xmlFreeElement(v5);
        if (!v13)
          return 0;
        v23 = (void (*)(void))xmlFree;
LABEL_51:
        v23();
        return 0;
      }
      *(_QWORD *)(v5 + 88) = v21;
LABEL_55:
      *(_DWORD *)(v5 + 72) = type;
      if (ctxt && ctxt->finishDtd >> 1 == 1441171738)
      {
        *(_QWORD *)(v5 + 80) = content;
        if (content)
          content->parent = (_xmlElementContent *)1;
      }
      else
      {
        *(_QWORD *)(v5 + 80) = xmlCopyDocElementContent(dtd->doc, content);
      }
      *(_QWORD *)(v5 + 40) = dtd;
      *(_QWORD *)(v5 + 64) = dtd->doc;
      last = dtd->last;
      if (last)
      {
        last->next = (_xmlNode *)v5;
        *(_QWORD *)(v5 + 56) = last;
      }
      else
      {
        dtd->children = (_xmlNode *)v5;
      }
      dtd->last = (_xmlNode *)v5;
      if (v13)
        xmlFree(v13);
      return (xmlElementPtr)v5;
    default:
      v11 = "Internal: ELEMENT decl corrupted invalid type\n";
      goto LABEL_18;
  }
}

void xmlFreeElement(uint64_t a1)
{
  void *v2;
  void *v3;
  xmlRegexp *v4;

  if (a1)
  {
    xmlUnlinkNode((xmlNodePtr)a1);
    xmlFreeDocElementContent(*(xmlDocPtr *)(a1 + 64), *(xmlElementContentPtr *)(a1 + 80));
    v2 = *(void **)(a1 + 16);
    if (v2)
      xmlFree(v2);
    v3 = *(void **)(a1 + 96);
    if (v3)
      xmlFree(v3);
    v4 = *(xmlRegexp **)(a1 + 104);
    if (v4)
      xmlRegFreeRegexp(v4);
    xmlFree((void *)a1);
  }
}

void xmlFreeElementTable(xmlElementTablePtr table)
{
  xmlHashFree(table, (xmlHashDeallocator)xmlFreeElementTableEntry);
}

xmlElementTablePtr xmlCopyElementTable(xmlElementTablePtr table)
{
  return xmlHashCopy(table, (xmlHashCopier)xmlCopyElement);
}

_QWORD *xmlCopyElement(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  xmlChar *v4;
  xmlChar *v5;

  v2 = xmlMalloc(0x70uLL);
  v3 = v2;
  if (v2)
  {
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_DWORD *)v2 + 2) = 15;
    *((_DWORD *)v2 + 18) = *(_DWORD *)(a1 + 72);
    v4 = *(xmlChar **)(a1 + 16);
    if (v4)
      v4 = xmlStrdup(v4);
    v3[2] = v4;
    v5 = *(xmlChar **)(a1 + 96);
    if (v5)
      v5 = xmlStrdup(v5);
    v3[12] = v5;
    v3[10] = xmlCopyDocElementContent(0, *(xmlElementContentPtr *)(a1 + 80));
    v3[11] = 0;
  }
  else
  {
    xmlVErrMemory(0, (const xmlChar *)"malloc failed");
  }
  return v3;
}

void xmlDumpElementDecl(xmlBufferPtr buf, xmlElementPtr elem)
{
  const xmlChar *v4;
  const char *v5;
  const xmlChar *prefix;
  const xmlChar *v7;

  if (buf && elem)
  {
    switch(elem->etype)
    {
      case XML_ELEMENT_TYPE_EMPTY:
        xmlBufferWriteChar(buf, "<!ELEMENT ");
        prefix = elem->prefix;
        if (prefix)
        {
          xmlBufferWriteCHAR(buf, prefix);
          xmlBufferWriteChar(buf, ":");
        }
        xmlBufferWriteCHAR(buf, elem->name);
        v5 = " EMPTY>\n";
        goto LABEL_15;
      case XML_ELEMENT_TYPE_ANY:
        xmlBufferWriteChar(buf, "<!ELEMENT ");
        v7 = elem->prefix;
        if (v7)
        {
          xmlBufferWriteCHAR(buf, v7);
          xmlBufferWriteChar(buf, ":");
        }
        xmlBufferWriteCHAR(buf, elem->name);
        v5 = " ANY>\n";
        goto LABEL_15;
      case XML_ELEMENT_TYPE_MIXED:
      case XML_ELEMENT_TYPE_ELEMENT:
        xmlBufferWriteChar(buf, "<!ELEMENT ");
        v4 = elem->prefix;
        if (v4)
        {
          xmlBufferWriteCHAR(buf, v4);
          xmlBufferWriteChar(buf, ":");
        }
        xmlBufferWriteCHAR(buf, elem->name);
        xmlBufferWriteChar(buf, " ");
        xmlDumpElementContent(buf, (int *)elem->content);
        v5 = ">\n";
LABEL_15:
        xmlBufferWriteChar(buf, v5);
        break;
      default:
        __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"Internal: ELEMENT struct corrupted invalid type\n");
        break;
    }
  }
}

void xmlDumpElementContent(xmlBuffer *a1, int *a2)
{
  int *v4;
  int v5;
  _DWORD *v6;
  int **v7;
  const xmlChar *v8;
  int **v9;
  unsigned int v10;
  BOOL v11;
  const char *v12;
  unsigned int v13;

  if (a2)
  {
    xmlBufferWriteChar(a1, "(");
    v4 = a2;
    while (1)
    {
      if (!v4)
        return;
      v5 = *v4;
      if ((*v4 - 3) >= 2)
        break;
      if (v4 != a2)
      {
        v6 = (_DWORD *)*((_QWORD *)v4 + 4);
        if (v6)
        {
          if (v5 != *v6 || v4[1] != 1)
            xmlBufferWriteChar(a1, "(");
        }
      }
      v7 = (int **)(v4 + 4);
LABEL_34:
      v4 = *v7;
      if (*v7 == a2)
      {
LABEL_35:
        xmlBufferWriteChar(a1, ")");
        v13 = a2[1] - 2;
        if (v13 <= 2)
          xmlBufferWriteChar(a1, off_1E6174090[v13]);
        return;
      }
    }
    if (v5 == 2)
    {
      v8 = (const xmlChar *)*((_QWORD *)v4 + 5);
      if (v8)
      {
        xmlBufferWriteCHAR(a1, v8);
        xmlBufferWriteChar(a1, ":");
      }
      xmlBufferWriteCHAR(a1, *((const xmlChar **)v4 + 1));
    }
    else if (v5 == 1)
    {
      xmlBufferWriteChar(a1, "#PCDATA");
    }
    else
    {
      __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"Internal: ELEMENT cur corrupted invalid type\n");
    }
    do
    {
      if (v4 == a2)
        goto LABEL_35;
      v9 = (int **)*((_QWORD *)v4 + 4);
      if (!v9)
        return;
      if ((*v4 - 3) <= 1 && (*v4 != *(_DWORD *)v9 || v4[1] != 1))
        xmlBufferWriteChar(a1, ")");
      v10 = v4[1] - 2;
      if (v10 <= 2)
        xmlBufferWriteChar(a1, off_1E6174090[v10]);
      v11 = v4 == v9[2];
      v4 = (int *)v9;
    }
    while (!v11);
    if (*(_DWORD *)v9 == 3)
    {
      v12 = " , ";
    }
    else
    {
      if (*(_DWORD *)v9 != 4)
      {
LABEL_33:
        v7 = v9 + 3;
        goto LABEL_34;
      }
      v12 = " | ";
    }
    xmlBufferWriteChar(a1, v12);
    goto LABEL_33;
  }
}

void xmlDumpElementTable(xmlBufferPtr buf, xmlElementTablePtr table)
{
  if (buf)
  {
    if (table)
      xmlHashScan(table, (xmlHashScanner)xmlDumpElementDeclScan, buf);
  }
}

void xmlDumpElementDeclScan(xmlElementPtr elem, xmlBufferPtr buf)
{
  xmlDumpElementDecl(buf, elem);
}

xmlEnumerationPtr xmlCreateEnumeration(const xmlChar *name)
{
  xmlEnumeration *v2;
  xmlEnumeration *v3;

  v2 = (xmlEnumeration *)xmlMalloc(0x10uLL);
  v3 = v2;
  if (v2)
  {
    v2->next = 0;
    v2->name = 0;
    if (name)
      v2->name = xmlStrdup(name);
  }
  else
  {
    xmlVErrMemory(0, (const xmlChar *)"malloc failed");
  }
  return v3;
}

void xmlFreeEnumeration(xmlEnumerationPtr cur)
{
  xmlEnumeration *next;
  xmlChar *name;

  if (cur)
  {
    next = cur->next;
    if (next)
      xmlFreeEnumeration(next);
    name = (xmlChar *)cur->name;
    if (name)
      xmlFree(name);
    xmlFree(cur);
  }
}

xmlEnumerationPtr xmlCopyEnumeration(xmlEnumerationPtr cur)
{
  xmlEnumerationPtr Enumeration;
  xmlEnumeration *next;

  if (!cur)
    return 0;
  Enumeration = xmlCreateEnumeration(cur->name);
  if (Enumeration)
  {
    next = cur->next;
    if (cur->next)
      next = xmlCopyEnumeration(next);
    Enumeration->next = next;
  }
  return Enumeration;
}

xmlAttributePtr xmlAddAttributeDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name, const xmlChar *ns, xmlAttributeType type, xmlAttributeDefault def, const xmlChar *defaultValue, xmlEnumerationPtr tree)
{
  xmlChar *v11;
  _xmlDoc *doc;
  xmlDict *dict;
  _xmlDoc *v19;
  void *v20;
  xmlDict *v21;
  xmlAttribute *v22;
  xmlAttribute *v23;
  const xmlChar *v24;
  _xmlDtd *intSubset;
  xmlHashTable *attributes;
  xmlHashTable *elements;
  _xmlDoc *v29;
  xmlDict *v30;
  xmlChar *v31;
  xmlChar *v32;
  const xmlChar *v33;
  _QWORD *v34;
  _OWORD *v35;
  const xmlChar *v36;
  uint64_t v37;
  uint64_t v38;
  const xmlChar *v39;
  const char *v40;
  _xmlNode *last;
  xmlHashTable *table;
  xmlValidCtxtPtr v43;
  xmlChar *prefix;

  if (!dtd || !name || !elem)
    goto LABEL_21;
  v11 = (xmlChar *)defaultValue;
  doc = dtd->doc;
  if (doc)
    dict = doc->dict;
  else
    dict = 0;
  if (type - 1 >= 0xA)
  {
    xmlErrValid_0((uint64_t)ctxt, 1, "Internal: ATTRIBUTE struct corrupted invalid type\n", 0);
LABEL_21:
    xmlFreeEnumeration(tree);
    return 0;
  }
  if (defaultValue)
  {
    if (!xmlValidateAttributeValueInternal((uint64_t)doc, type, defaultValue))
    {
      xmlErrValidNode((uint64_t)ctxt, (uint64_t)dtd, 500, "Attribute %s of %s: invalid default value\n", elem, (xmlChar *)name, v11);
      v11 = 0;
      if (ctxt)
        ctxt->valid = 0;
    }
  }
  v19 = dtd->doc;
  if (v19)
  {
    if (v19->extSubset == dtd)
    {
      intSubset = v19->intSubset;
      if (intSubset)
      {
        attributes = (xmlHashTable *)intSubset->attributes;
        if (attributes)
        {
          if (xmlHashLookup3(attributes, name, ns, elem))
            goto LABEL_21;
        }
      }
    }
  }
  v20 = dtd->attributes;
  if (!v20)
  {
    v20 = xmlHashCreateDict(0, dict);
    dtd->attributes = v20;
    if (!v20)
    {
      xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"xmlAddAttributeDecl: Table creation failed!\n");
      goto LABEL_21;
    }
  }
  table = (xmlHashTable *)v20;
  v43 = ctxt;
  v21 = dict;
  v22 = (xmlAttribute *)xmlMalloc(0x78uLL);
  v23 = v22;
  if (!v22)
  {
    xmlVErrMemory((uint64_t)v43, (const xmlChar *)"malloc failed");
    xmlFreeEnumeration(tree);
    return v23;
  }
  v22->elem = 0;
  *(_OWORD *)&v22->atype = 0u;
  *(_OWORD *)&v22->tree = 0u;
  *(_OWORD *)&v22->next = 0u;
  *(_OWORD *)&v22->doc = 0u;
  *(_OWORD *)&v22->name = 0u;
  *(_OWORD *)&v22->last = 0u;
  *(_OWORD *)&v22->_private = 0u;
  v22->type = XML_ATTRIBUTE_DECL;
  v22->atype = type;
  v22->doc = dtd->doc;
  if (v21)
  {
    v22->name = xmlDictLookup(v21, name, -1);
    v23->prefix = xmlDictLookup(v21, ns, -1);
    v23->elem = xmlDictLookup(v21, elem, -1);
    v23->def = def;
    v23->tree = tree;
    if (!v11)
      goto LABEL_32;
    v24 = xmlDictLookup(v21, v11, -1);
  }
  else
  {
    v22->name = xmlStrdup(name);
    v23->prefix = xmlStrdup(ns);
    v23->elem = xmlStrdup(elem);
    v23->def = def;
    v23->tree = tree;
    if (!v11)
      goto LABEL_32;
    v24 = xmlStrdup(v11);
  }
  v23->defaultValue = v24;
LABEL_32:
  if (xmlHashAddEntry3(table, v23->name, v23->prefix, v23->elem, v23) < 0)
  {
    xmlErrValidWarning((uint64_t)v43, (uint64_t)dtd, 501, "Attribute %s of element %s: already defined\n", name, (xmlChar *)elem, 0);
    xmlFreeAttribute((xmlNodePtr)v23);
    return 0;
  }
  prefix = 0;
  elements = (xmlHashTable *)dtd->elements;
  if (elements
    || ((v29 = dtd->doc) == 0 ? (v30 = 0) : (v30 = v29->dict),
        elements = xmlHashCreateDict(0, v30),
        (dtd->elements = elements) != 0))
  {
    v31 = xmlSplitQName2(elem, &prefix);
    v32 = v31;
    if (v31)
      v33 = v31;
    else
      v33 = elem;
    v34 = xmlHashLookup2(elements, v33, prefix);
    if (v34)
      goto LABEL_46;
    v35 = xmlMalloc(0x70uLL);
    if (v35)
    {
      v34 = v35;
      v35[5] = 0u;
      v35[6] = 0u;
      v35[3] = 0u;
      v35[4] = 0u;
      v35[1] = 0u;
      v35[2] = 0u;
      *v35 = 0u;
      *((_DWORD *)v35 + 2) = 15;
      *((_QWORD *)v35 + 2) = xmlStrdup(v33);
      v34[12] = xmlStrdup(prefix);
      *((_DWORD *)v34 + 18) = 0;
      xmlHashAddEntry2(elements, v33, prefix, v34);
LABEL_46:
      if (prefix)
        xmlFree(prefix);
      if (v32)
        xmlFree(v32);
      if (type == XML_ATTRIBUTE_ID)
      {
        if (xmlScanIDAttributeDecl((uint64_t)v34, 1))
        {
          xmlErrValidNode((uint64_t)v43, (uint64_t)dtd, 520, "Element %s has too may ID attributes defined : %s\n", elem, (xmlChar *)name, 0);
          if (v43)
            v43->valid = 0;
        }
      }
      if (!xmlStrEqual(v23->name, (const xmlChar *)"xmlns"))
      {
        v36 = v23->prefix;
        if (!v36 || !xmlStrEqual(v36, (const xmlChar *)"xmlns"))
        {
          v37 = v34[11];
          while (v37)
          {
            v38 = v37;
            if (xmlStrEqual(*(const xmlChar **)(v37 + 16), (const xmlChar *)"xmlns")
              || (v39 = v23->prefix) != 0 && xmlStrEqual(v39, (const xmlChar *)"xmlns"))
            {
              v37 = *(_QWORD *)(v38 + 72);
              if (v37)
                continue;
            }
            v23->nexth = *(_xmlAttribute **)(v38 + 72);
            *(_QWORD *)(v38 + 72) = v23;
            goto LABEL_68;
          }
        }
      }
      v23->nexth = (_xmlAttribute *)v34[11];
      v34[11] = v23;
      goto LABEL_68;
    }
    v40 = "malloc failed";
  }
  else
  {
    v40 = "element table allocation failed";
  }
  xmlVErrMemory(0, (const xmlChar *)v40);
LABEL_68:
  v23->parent = dtd;
  last = dtd->last;
  if (last)
  {
    last->next = (_xmlNode *)v23;
    v23->prev = last;
  }
  else
  {
    dtd->children = (_xmlNode *)v23;
  }
  dtd->last = (_xmlNode *)v23;
  return v23;
}

uint64_t xmlValidateAttributeValueInternal(uint64_t a1, int a2, const xmlChar *a3)
{
  uint64_t result;

  switch(a2)
  {
    case 2:
    case 3:
    case 5:
    case 10:
      result = xmlValidateNameValueInternal(a1, a3);
      break;
    case 4:
    case 6:
      result = xmlValidateNamesValueInternal(a1, a3);
      break;
    case 7:
      result = xmlValidateNmtokenValueInternal(a1, a3);
      break;
    case 8:
    case 9:
      result = xmlValidateNmtokensValueInternal(a1, a3);
      break;
    default:
      result = 1;
      break;
  }
  return result;
}

_DWORD *xmlErrValidWarning(uint64_t a1, uint64_t a2, int a3, const char *a4, const xmlChar *a5, xmlChar *a6, xmlChar *a7)
{
  void (*v9)(void *, const char *, ...);
  _QWORD *v10;
  _QWORD *v11;

  if (a1)
  {
    v9 = *(void (**)(void *, const char *, ...))(a1 + 16);
    v10 = *(_QWORD **)a1;
    if (*(_DWORD *)(a1 + 48) >> 1 == 1441171738)
      v11 = *(_QWORD **)a1;
    else
      v11 = 0;
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v10 = 0;
  }
  return __xmlRaiseError(0, v9, v10, v11, a2, 0x17u, a3, 1, 0, 0, a5, a6, a7, 0, 0, a4, (char)a5);
}

void xmlFreeAttribute(xmlNodePtr cur)
{
  _xmlDoc *doc;
  xmlDict *dict;
  xmlNs *nsDef;
  const xmlChar *v5;
  const xmlChar *name;
  const xmlChar *psvi;
  _xmlAttr *properties;
  xmlChar *v9;
  _xmlAttr *v10;
  void *v11;

  if (cur)
  {
    doc = cur->doc;
    if (doc)
      dict = doc->dict;
    else
      dict = 0;
    xmlUnlinkNode(cur);
    nsDef = cur->nsDef;
    if (nsDef)
      xmlFreeEnumeration((xmlEnumerationPtr)nsDef);
    v5 = *(const xmlChar **)&cur->line;
    if (dict)
    {
      if (v5 && !xmlDictOwns(dict, v5))
        xmlFree(*(void **)&cur->line);
      name = cur->name;
      if (name && !xmlDictOwns(dict, name))
        xmlFree((void *)cur->name);
      psvi = (const xmlChar *)cur->psvi;
      if (psvi && !xmlDictOwns(dict, psvi))
        xmlFree(cur->psvi);
      properties = cur->properties;
      if (properties)
      {
        if (!xmlDictOwns(dict, (const xmlChar *)properties))
          ((void (*)(_xmlAttr *))xmlFree)(cur->properties);
      }
    }
    else
    {
      if (v5)
        xmlFree(*(void **)&cur->line);
      v9 = (xmlChar *)cur->name;
      if (v9)
        xmlFree(v9);
      v10 = cur->properties;
      if (v10)
        xmlFree(v10);
      v11 = cur->psvi;
      if (v11)
        ((void (*)(void *))xmlFree)(v11);
    }
    xmlFree(cur);
  }
}

uint64_t xmlScanIDAttributeDecl(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 88);
  if (!v2)
    return 0;
  v5 = 0;
  do
  {
    if (*(_DWORD *)(v2 + 80) == 2)
    {
      v6 = (v5 + 1);
      if (a2 && (int)v5 >= 1)
        __xmlRaiseError(0, 0, 0, 0, a1, 0x17u, 520, 2, 0, 0, *(const xmlChar **)(a1 + 16), *(xmlChar **)(v2 + 16), 0, 0, 0, "Element %s has too many ID attributes defined : %s\n", *(_QWORD *)(a1 + 16));
    }
    else
    {
      v6 = v5;
    }
    v2 = *(_QWORD *)(v2 + 72);
    v5 = v6;
  }
  while (v2);
  return v6;
}

void xmlFreeAttributeTable(xmlAttributeTablePtr table)
{
  xmlHashFree(table, (xmlHashDeallocator)xmlFreeAttributeTableEntry);
}

xmlAttributeTablePtr xmlCopyAttributeTable(xmlAttributeTablePtr table)
{
  return xmlHashCopy(table, (xmlHashCopier)xmlCopyAttribute);
}

_QWORD *xmlCopyAttribute(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  const xmlChar *v4;
  const xmlChar *v5;
  const xmlChar *v6;
  const xmlChar *v7;

  v2 = xmlMalloc(0x78uLL);
  v3 = v2;
  if (v2)
  {
    v2[14] = 0;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_DWORD *)v2 + 2) = 16;
    v2[10] = *(_QWORD *)(a1 + 80);
    v2[12] = xmlCopyEnumeration(*(xmlEnumerationPtr *)(a1 + 96));
    v4 = *(const xmlChar **)(a1 + 112);
    if (v4)
      v3[14] = xmlStrdup(v4);
    v5 = *(const xmlChar **)(a1 + 16);
    if (v5)
      v3[2] = xmlStrdup(v5);
    v6 = *(const xmlChar **)(a1 + 104);
    if (v6)
      v3[13] = xmlStrdup(v6);
    v7 = *(const xmlChar **)(a1 + 88);
    if (v7)
      v3[11] = xmlStrdup(v7);
  }
  else
  {
    xmlVErrMemory(0, (const xmlChar *)"malloc failed");
  }
  return v3;
}

void xmlDumpAttributeDecl(xmlBufferPtr buf, xmlAttributePtr attr)
{
  const xmlChar *prefix;
  const char *v5;
  const char *v6;
  const char *v7;

  if (buf && attr)
  {
    xmlBufferWriteChar(buf, "<!ATTLIST ");
    xmlBufferWriteCHAR(buf, attr->elem);
    xmlBufferWriteChar(buf, " ");
    prefix = attr->prefix;
    if (prefix)
    {
      xmlBufferWriteCHAR(buf, prefix);
      xmlBufferWriteChar(buf, ":");
    }
    xmlBufferWriteCHAR(buf, attr->name);
    switch(attr->atype)
    {
      case XML_ATTRIBUTE_CDATA:
        v5 = " CDATA";
        goto LABEL_16;
      case XML_ATTRIBUTE_ID:
        v5 = " ID";
        goto LABEL_16;
      case XML_ATTRIBUTE_IDREF:
        v5 = " IDREF";
        goto LABEL_16;
      case XML_ATTRIBUTE_IDREFS:
        v5 = " IDREFS";
        goto LABEL_16;
      case XML_ATTRIBUTE_ENTITY:
        v5 = " ENTITY";
        goto LABEL_16;
      case XML_ATTRIBUTE_ENTITIES:
        v5 = " ENTITIES";
        goto LABEL_16;
      case XML_ATTRIBUTE_NMTOKEN:
        v5 = " NMTOKEN";
        goto LABEL_16;
      case XML_ATTRIBUTE_NMTOKENS:
        v5 = " NMTOKENS";
LABEL_16:
        xmlBufferWriteChar(buf, v5);
        break;
      case XML_ATTRIBUTE_ENUMERATION:
        v6 = " (";
        goto LABEL_19;
      case XML_ATTRIBUTE_NOTATION:
        v6 = " NOTATION (";
LABEL_19:
        xmlBufferWriteChar(buf, v6);
        xmlDumpEnumeration(buf, (uint64_t **)attr->tree);
        break;
      default:
        __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"Internal: ATTRIBUTE struct corrupted invalid type\n");
        break;
    }
    switch(attr->def)
    {
      case XML_ATTRIBUTE_NONE:
        break;
      case XML_ATTRIBUTE_REQUIRED:
        v7 = " #REQUIRED";
        goto LABEL_25;
      case XML_ATTRIBUTE_IMPLIED:
        v7 = " #IMPLIED";
        goto LABEL_25;
      case XML_ATTRIBUTE_FIXED:
        v7 = " #FIXED";
LABEL_25:
        xmlBufferWriteChar(buf, v7);
        break;
      default:
        __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"Internal: ATTRIBUTE struct corrupted invalid def\n");
        break;
    }
    if (attr->defaultValue)
    {
      xmlBufferWriteChar(buf, " ");
      xmlBufferWriteQuotedString(buf, attr->defaultValue);
    }
    xmlBufferWriteChar(buf, ">\n");
  }
}

void xmlDumpEnumeration(xmlBufferPtr buf, uint64_t **a2)
{
  uint64_t **v2;

  if (a2)
  {
    v2 = a2;
    while (1)
    {
      xmlBufferWriteCHAR(buf, (const xmlChar *)v2[1]);
      if (!*v2)
        break;
      xmlBufferWriteChar(buf, " | ");
      v2 = (uint64_t **)*v2;
      if (!v2)
        return;
    }
    xmlBufferWriteChar(buf, ")");
  }
}

void xmlDumpAttributeTable(xmlBufferPtr buf, xmlAttributeTablePtr table)
{
  if (buf)
  {
    if (table)
      xmlHashScan(table, (xmlHashScanner)xmlDumpAttributeDeclScan, buf);
  }
}

void xmlDumpAttributeDeclScan(xmlAttributePtr attr, xmlBufferPtr buf)
{
  xmlDumpAttributeDecl(buf, attr);
}

xmlNotationPtr xmlAddNotationDecl(xmlValidCtxtPtr ctxt, xmlDtdPtr dtd, const xmlChar *name, const xmlChar *PublicID, const xmlChar *SystemID)
{
  xmlNotation *v5;
  void *notations;
  _xmlDoc *doc;
  xmlDict *v13;
  xmlNotation *v14;

  v5 = 0;
  if (dtd && name)
  {
    if (!((unint64_t)PublicID | (unint64_t)SystemID))
      return 0;
    notations = dtd->notations;
    if (!notations)
    {
      doc = dtd->doc;
      v13 = doc ? doc->dict : 0;
      notations = xmlHashCreateDict(0, v13);
      dtd->notations = notations;
      if (!notations)
      {
        xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"xmlAddNotationDecl: Table creation failed!\n");
        return 0;
      }
    }
    v14 = (xmlNotation *)xmlMalloc(0x18uLL);
    v5 = v14;
    if (v14)
    {
      v14->name = 0;
      v14->PublicID = 0;
      v14->SystemID = 0;
      v14->name = xmlStrdup(name);
      if (SystemID)
        v5->SystemID = xmlStrdup(SystemID);
      if (PublicID)
        v5->PublicID = xmlStrdup(PublicID);
      if (xmlHashAddEntry((xmlHashTablePtr)notations, name, v5))
      {
        __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 526, 2, 0, 0, name, 0, 0, 0, 0, "xmlAddNotationDecl: %s already defined\n", (char)name);
        xmlFreeNotation((void **)v5);
        return 0;
      }
    }
    else
    {
      xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"malloc failed");
    }
  }
  return v5;
}

void xmlFreeNotation(void **a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v2 = *a1;
    if (v2)
      xmlFree(v2);
    v3 = a1[1];
    if (v3)
      xmlFree(v3);
    v4 = a1[2];
    if (v4)
      xmlFree(v4);
    xmlFree(a1);
  }
}

void xmlFreeNotationTable(xmlNotationTablePtr table)
{
  xmlHashFree(table, (xmlHashDeallocator)xmlFreeNotationTableEntry);
}

xmlNotationTablePtr xmlCopyNotationTable(xmlNotationTablePtr table)
{
  return xmlHashCopy(table, (xmlHashCopier)xmlCopyNotation);
}

_QWORD *xmlCopyNotation(uint64_t a1)
{
  _QWORD *v2;
  xmlChar *v3;
  xmlChar *v4;
  const xmlChar *v5;

  v2 = xmlMalloc(0x18uLL);
  if (v2)
  {
    v3 = *(xmlChar **)a1;
    if (*(_QWORD *)a1)
      v3 = xmlStrdup(v3);
    *v2 = v3;
    v4 = *(xmlChar **)(a1 + 8);
    if (v4)
      v4 = xmlStrdup(v4);
    v2[1] = v4;
    v5 = *(const xmlChar **)(a1 + 16);
    if (v5)
      v2[2] = xmlStrdup(v5);
    else
      v2[2] = 0;
  }
  else
  {
    xmlVErrMemory(0, (const xmlChar *)"malloc failed");
  }
  return v2;
}

void xmlDumpNotationDecl(xmlBufferPtr buf, xmlNotationPtr nota)
{
  const xmlChar **p_SystemID;
  const xmlChar *SystemID;

  if (buf && nota)
  {
    xmlBufferWriteChar(buf, "<!NOTATION ");
    xmlBufferWriteCHAR(buf, nota->name);
    if (nota->PublicID)
    {
      xmlBufferWriteChar(buf, " PUBLIC ");
      xmlBufferWriteQuotedString(buf, nota->PublicID);
      SystemID = nota->SystemID;
      p_SystemID = &nota->SystemID;
      if (!SystemID)
      {
LABEL_9:
        xmlBufferWriteChar(buf, " >\n");
        return;
      }
      xmlBufferWriteChar(buf, " ");
    }
    else
    {
      xmlBufferWriteChar(buf, " SYSTEM ");
      p_SystemID = &nota->SystemID;
    }
    xmlBufferWriteQuotedString(buf, *p_SystemID);
    goto LABEL_9;
  }
}

void xmlDumpNotationTable(xmlBufferPtr buf, xmlNotationTablePtr table)
{
  if (buf)
  {
    if (table)
      xmlHashScan(table, (xmlHashScanner)xmlDumpNotationDeclScan, buf);
  }
}

void xmlDumpNotationDeclScan(xmlNotationPtr nota, xmlBufferPtr buf)
{
  xmlDumpNotationDecl(buf, nota);
}

xmlIDPtr xmlAddID(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr)
{
  xmlID *v4;
  xmlHashTable *ids;
  _xmlDict *dict;
  const xmlChar *v11;
  _QWORD *p_attr;

  v4 = 0;
  if (doc)
  {
    if (value)
    {
      v4 = 0;
      if (attr)
      {
        if (*value)
        {
          ids = (xmlHashTable *)doc->ids;
          if (ids || (ids = xmlHashCreateDict(0, doc->dict), (doc->ids = ids) != 0))
          {
            v4 = (xmlID *)xmlMalloc(0x30uLL);
            if (!v4)
            {
              xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"malloc failed");
              return v4;
            }
            v4->value = xmlStrdup(value);
            v4->doc = doc;
            if (ctxt && ctxt->finishDtd >> 1 == 1441171738 && *((_DWORD *)ctxt->userData + 172) == 5)
            {
              dict = doc->dict;
              if (dict)
                v11 = xmlDictLookup(dict, attr->name, -1);
              else
                v11 = xmlStrdup(attr->name);
              v4->name = v11;
              p_attr = &v4->attr;
            }
            else
            {
              v4->attr = attr;
              p_attr = &v4->name;
            }
            *p_attr = 0;
            v4->lineno = xmlGetLineNo(attr->parent);
            if ((xmlHashAddEntry(ids, value, v4) & 0x80000000) == 0)
            {
              attr->atype = XML_ATTRIBUTE_ID;
              return v4;
            }
            if (ctxt)
              xmlErrValidNode((uint64_t)ctxt, (uint64_t)attr->parent, 513, "ID %s already defined\n", value, 0, 0);
            xmlFreeID(v4);
          }
          else
          {
            xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"xmlAddID: Table creation failed!\n");
          }
          return 0;
        }
      }
    }
  }
  return v4;
}

void xmlFreeID(_QWORD *a1)
{
  uint64_t v2;
  xmlDict *v3;
  xmlChar *v4;
  void *v5;

  if (a1)
  {
    v2 = a1[5];
    if (v2)
    {
      v3 = *(xmlDict **)(v2 + 152);
      v4 = (xmlChar *)a1[1];
      if (!v4)
        goto LABEL_11;
      if (v3)
      {
        if (xmlDictOwns(*(xmlDictPtr *)(v2 + 152), v4))
          goto LABEL_11;
        v4 = (xmlChar *)a1[1];
      }
    }
    else
    {
      v4 = (xmlChar *)a1[1];
      if (!v4)
      {
        v5 = (void *)a1[3];
        if (v5)
          goto LABEL_16;
        goto LABEL_17;
      }
      v3 = 0;
    }
    xmlFree(v4);
LABEL_11:
    v5 = (void *)a1[3];
    if (v5)
    {
      if (!v3)
      {
LABEL_16:
        xmlFree(v5);
        goto LABEL_17;
      }
      if (!xmlDictOwns(v3, (const xmlChar *)v5))
      {
        v5 = (void *)a1[3];
        goto LABEL_16;
      }
    }
LABEL_17:
    xmlFree(a1);
  }
}

void xmlFreeIDTable(xmlIDTablePtr table)
{
  xmlHashFree(table, (xmlHashDeallocator)xmlFreeIDTableEntry);
}

xmlAttributePtr xmlGetDtdAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name)
{
  xmlHashTable *attributes;
  xmlChar *v6;
  xmlChar *v7;
  xmlAttribute *v8;
  xmlChar *prefix;

  prefix = 0;
  if (!dtd)
    return 0;
  attributes = (xmlHashTable *)dtd->attributes;
  if (!attributes)
    return 0;
  v6 = xmlSplitQName2(name, &prefix);
  if (!v6)
    return (xmlAttributePtr)xmlHashLookup3(attributes, name, 0, elem);
  v7 = v6;
  v8 = (xmlAttribute *)xmlHashLookup3(attributes, v6, prefix, elem);
  if (prefix)
    xmlFree(prefix);
  xmlFree(v7);
  return v8;
}

int xmlRemoveID(xmlDocPtr doc, xmlAttrPtr attr)
{
  int result;
  xmlHashTable *ids;
  xmlChar *String;
  xmlChar *v7;
  xmlAttrPtr *v8;

  result = -1;
  if (doc && attr)
  {
    ids = (xmlHashTable *)doc->ids;
    if (ids)
    {
      String = xmlNodeListGetString(doc, attr->children, 1);
      if (String)
      {
        v7 = String;
        xmlValidNormalizeString(String);
        v8 = (xmlAttrPtr *)xmlHashLookup(ids, v7);
        if (v8 && v8[2] == attr)
        {
          xmlHashRemoveEntry(ids, v7, (xmlHashDeallocator)xmlFreeIDTableEntry);
          xmlFree(v7);
          result = 0;
          attr->atype = 0;
          return result;
        }
        xmlFree(v7);
      }
    }
    return -1;
  }
  return result;
}

_BYTE *xmlValidNormalizeString(_BYTE *result)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  int v4;

  v1 = result - 1;
  do
  {
    v3 = *++v1;
    v2 = v3;
  }
  while (v3 == 32);
  while (v2 == 32)
  {
    while (v2 == 32)
    {
      v4 = *++v1;
      v2 = v4;
    }
    if (v2)
    {
      LOBYTE(v2) = 32;
      goto LABEL_9;
    }
LABEL_10:
    v2 = *v1;
  }
  if (v2)
  {
    ++v1;
LABEL_9:
    *result++ = v2;
    goto LABEL_10;
  }
  *result = 0;
  return result;
}

xmlAttrPtr xmlGetID(xmlDocPtr doc, const xmlChar *ID)
{
  xmlAttrPtr result;

  result = 0;
  if (doc)
  {
    if (ID)
    {
      result = (xmlAttrPtr)doc->ids;
      if (result)
      {
        result = (xmlAttrPtr)xmlHashLookup((xmlHashTablePtr)result, ID);
        if (result)
        {
          if (result->name)
            return (xmlAttrPtr)result->name;
          else
            return (xmlAttrPtr)doc;
        }
      }
    }
  }
  return result;
}

xmlRefPtr xmlAddRef(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *value, xmlAttrPtr attr)
{
  xmlRef *v4;
  void *refs;
  xmlChar *v10;
  xmlAttrPtr v11;
  xmlList *v12;
  xmlListPtr v13;
  xmlChar *v14;
  xmlChar *name;

  v4 = 0;
  if (doc && value && attr)
  {
    refs = doc->refs;
    if (!refs)
    {
      refs = xmlHashCreateDict(0, doc->dict);
      doc->refs = refs;
      if (!refs)
      {
        xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"xmlAddRef: Table creation failed!\n");
        return 0;
      }
    }
    v4 = (xmlRef *)xmlMalloc(0x28uLL);
    if (v4)
    {
      v4->value = xmlStrdup(value);
      if (ctxt && ctxt->finishDtd >> 1 == 1441171738 && *((_DWORD *)ctxt->userData + 172) == 5)
      {
        v10 = xmlStrdup(attr->name);
        v11 = 0;
      }
      else
      {
        v10 = 0;
        v11 = attr;
      }
      v4->attr = v11;
      v4->name = v10;
      v4->lineno = xmlGetLineNo(attr->parent);
      v12 = (xmlList *)xmlHashLookup((xmlHashTablePtr)refs, value);
      if (!v12)
      {
        v13 = xmlListCreate((xmlListDeallocator)xmlFreeRef, (xmlListDataCompare)xmlDummyCompare);
        if (!v13)
        {
          __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlAddRef: Reference list creation failed!\n");
          goto LABEL_21;
        }
        v12 = v13;
        if (xmlHashAddEntry((xmlHashTablePtr)refs, value, v13) < 0)
        {
          xmlListDelete(v12);
          xmlErrValid_0(0, 1, "xmlAddRef: Reference list insertion failed!\n", 0);
          goto LABEL_21;
        }
      }
      if (xmlListAppend(v12, v4))
      {
        __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 1, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlAddRef: Reference list insertion failed!\n");
LABEL_21:
        v14 = (xmlChar *)v4->value;
        if (v14)
          xmlFree(v14);
        name = (xmlChar *)v4->name;
        if (name)
          xmlFree(name);
        xmlFree(v4);
        return 0;
      }
    }
    else
    {
      xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"malloc failed");
    }
  }
  return v4;
}

void xmlFreeRef(xmlLink *a1)
{
  _QWORD *Data;
  _QWORD *v2;
  void *v3;
  void *v4;

  Data = xmlLinkGetData(a1);
  if (Data)
  {
    v2 = Data;
    v3 = (void *)Data[1];
    if (v3)
      xmlFree(v3);
    v4 = (void *)v2[3];
    if (v4)
      xmlFree(v4);
    xmlFree(v2);
  }
}

uint64_t xmlDummyCompare()
{
  return 0;
}

void xmlFreeRefTable(xmlRefTablePtr table)
{
  xmlHashFree(table, (xmlHashDeallocator)xmlFreeRefTableEntry);
}

void xmlFreeRefTableEntry(xmlListPtr l)
{
  if (l)
    xmlListDelete(l);
}

int xmlRemoveRef(xmlDocPtr doc, xmlAttrPtr attr)
{
  int result;
  xmlHashTable *refs;
  xmlChar *String;
  xmlChar *v7;
  xmlList *v8;
  xmlList *v9;
  _QWORD v10[2];

  result = -1;
  if (!doc || !attr)
    return result;
  refs = (xmlHashTable *)doc->refs;
  if (!refs)
    return -1;
  String = xmlNodeListGetString(doc, attr->children, 1);
  if (!String)
    return -1;
  v7 = String;
  v8 = (xmlList *)xmlHashLookup(refs, String);
  if (!v8)
  {
    xmlFree(v7);
    return -1;
  }
  v9 = v8;
  v10[0] = v8;
  v10[1] = attr;
  xmlListWalk(v8, (xmlListWalker)xmlWalkRemoveRef, v10);
  if (xmlListEmpty(v9))
    xmlHashUpdateEntry(refs, v7, 0, (xmlHashDeallocator)xmlFreeRefTableEntry);
  xmlFree(v7);
  return 0;
}

uint64_t xmlWalkRemoveRef(_QWORD *data, uint64_t a2)
{
  if (data[2] != *(_QWORD *)(a2 + 8))
    return 1;
  xmlListRemoveFirst(*(xmlListPtr *)a2, data);
  return 0;
}

xmlListPtr xmlGetRefs(xmlDocPtr doc, const xmlChar *ID)
{
  xmlHashTable *refs;

  if (doc && ID && (refs = (xmlHashTable *)doc->refs) != 0)
    return (xmlListPtr)xmlHashLookup(refs, ID);
  else
    return 0;
}

xmlElementPtr xmlGetDtdElementDesc(xmlDtdPtr dtd, const xmlChar *name)
{
  xmlHashTable *elements;
  xmlChar *v4;
  xmlChar *v5;
  const xmlChar *v6;
  xmlChar *prefix;

  elements = 0;
  prefix = 0;
  if (dtd)
  {
    if (name)
    {
      elements = (xmlHashTable *)dtd->elements;
      if (elements)
      {
        v4 = xmlSplitQName2(name, &prefix);
        v5 = v4;
        if (v4)
          v6 = v4;
        else
          v6 = name;
        elements = (xmlHashTable *)xmlHashLookup2(elements, v6, prefix);
        if (prefix)
          xmlFree(prefix);
        if (v5)
          xmlFree(v5);
      }
    }
  }
  return (xmlElementPtr)elements;
}

xmlElementPtr xmlGetDtdQElementDesc(xmlDtdPtr dtd, const xmlChar *name, const xmlChar *prefix)
{
  xmlHashTable *elements;

  if (dtd && (elements = (xmlHashTable *)dtd->elements) != 0)
    return (xmlElementPtr)xmlHashLookup2(elements, name, prefix);
  else
    return 0;
}

xmlAttributePtr xmlGetDtdQAttrDesc(xmlDtdPtr dtd, const xmlChar *elem, const xmlChar *name, const xmlChar *prefix)
{
  xmlHashTable *attributes;

  if (dtd && (attributes = (xmlHashTable *)dtd->attributes) != 0)
    return (xmlAttributePtr)xmlHashLookup3(attributes, name, prefix, elem);
  else
    return 0;
}

xmlNotationPtr xmlGetDtdNotationDesc(xmlDtdPtr dtd, const xmlChar *name)
{
  xmlHashTable *notations;

  if (dtd && (notations = (xmlHashTable *)dtd->notations) != 0)
    return (xmlNotationPtr)xmlHashLookup(notations, name);
  else
    return 0;
}

int xmlValidateNotationUse(xmlValidCtxtPtr ctxt, xmlDocPtr doc, const xmlChar *notationName)
{
  int result;
  _xmlDtd *intSubset;
  xmlHashTable *notations;
  _xmlDtd *extSubset;
  xmlHashTable *v10;
  _BOOL4 v11;

  if (!doc)
    return -1;
  result = -1;
  if (notationName)
  {
    intSubset = doc->intSubset;
    if (intSubset)
    {
      notations = (xmlHashTable *)intSubset->notations;
      if (notations && xmlHashLookup(notations, notationName))
      {
        return 1;
      }
      else
      {
        extSubset = doc->extSubset;
        v11 = !extSubset
           || (v10 = (xmlHashTable *)extSubset->notations) == 0
           || xmlHashLookup(v10, notationName) == 0;
        result = 1;
        if (ctxt)
        {
          if (v11)
          {
            xmlErrValidNode((uint64_t)ctxt, (uint64_t)doc, 537, "NOTATION %s is not declared\n", notationName, 0, 0);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

int xmlIsMixedElement(xmlDocPtr doc, const xmlChar *name)
{
  _xmlDtd *intSubset;
  xmlElementPtr DtdElementDesc;
  uint64_t etype;
  _xmlDtd *extSubset;

  if (!doc)
    return -1;
  intSubset = doc->intSubset;
  if (!intSubset)
    return -1;
  DtdElementDesc = xmlGetDtdElementDesc(intSubset, name);
  if (!DtdElementDesc)
  {
    extSubset = doc->extSubset;
    if (!extSubset)
      return -1;
    DtdElementDesc = xmlGetDtdElementDesc(extSubset, name);
    if (!DtdElementDesc)
      return -1;
  }
  etype = (int)DtdElementDesc->etype;
  if (etype > 4)
    return 1;
  else
    return dword_1B08625F8[etype];
}

int xmlValidateNameValue(const xmlChar *value)
{
  return xmlValidateNameValueInternal(0, value);
}

uint64_t xmlValidateNameValueInternal(uint64_t a1, const xmlChar *a2)
{
  signed int v4;
  uint64_t v5;
  uint64_t result;
  const xmlChar *v7;
  signed int v8;
  uint64_t v9;
  const xmlChar *v10;
  int len;

  if (!a2)
    return 0;
  len = 0;
  v4 = xmlStringCurrentChar(0, a2, &len);
  v5 = len;
  result = xmlIsDocNameStartChar(a1, v4);
  if ((_DWORD)result)
  {
    v7 = &a2[v5];
    v8 = xmlStringCurrentChar(0, v7, &len);
    v9 = len;
    if (xmlIsDocNameChar(a1, v8))
    {
      v10 = &v7[v9];
      do
      {
        v8 = xmlStringCurrentChar(0, v10, &len);
        v10 += len;
      }
      while (xmlIsDocNameChar(a1, v8));
    }
    return v8 == 0;
  }
  return result;
}

int xmlValidateNamesValue(const xmlChar *value)
{
  return xmlValidateNamesValueInternal(0, value);
}

uint64_t xmlValidateNamesValueInternal(uint64_t a1, const xmlChar *a2)
{
  signed int v4;
  uint64_t v5;
  uint64_t result;
  const xmlChar *v7;
  signed int v8;
  signed int v9;
  int len;

  if (!a2)
    return 0;
  len = 0;
  v4 = xmlStringCurrentChar(0, a2, &len);
  v5 = len;
  result = xmlIsDocNameStartChar(a1, v4);
  if ((_DWORD)result)
  {
    v7 = &a2[v5];
    do
    {
      v8 = xmlStringCurrentChar(0, v7, &len);
      v7 += len;
    }
    while (xmlIsDocNameChar(a1, v8));
    while (v8 == 32)
    {
      do
      {
        v9 = xmlStringCurrentChar(0, v7, &len);
        v7 += len;
      }
      while (v9 == 32);
      result = xmlIsDocNameStartChar(a1, v9);
      if (!(_DWORD)result)
        return result;
      do
      {
        v8 = xmlStringCurrentChar(0, v7, &len);
        v7 += len;
      }
      while (xmlIsDocNameChar(a1, v8));
    }
    return v8 == 0;
  }
  return result;
}

int xmlValidateNmtokenValue(const xmlChar *value)
{
  return xmlValidateNmtokenValueInternal(0, value);
}

uint64_t xmlValidateNmtokenValueInternal(uint64_t a1, const xmlChar *a2)
{
  signed int v4;
  uint64_t v5;
  uint64_t result;
  const xmlChar *v7;
  signed int v8;
  uint64_t v9;
  const xmlChar *v10;
  int len;

  if (!a2)
    return 0;
  len = 0;
  v4 = xmlStringCurrentChar(0, a2, &len);
  v5 = len;
  result = xmlIsDocNameChar(a1, v4);
  if ((_DWORD)result)
  {
    v7 = &a2[v5];
    v8 = xmlStringCurrentChar(0, v7, &len);
    v9 = len;
    if (xmlIsDocNameChar(a1, v8))
    {
      v10 = &v7[v9];
      do
      {
        v8 = xmlStringCurrentChar(0, v10, &len);
        v10 += len;
      }
      while (xmlIsDocNameChar(a1, v8));
    }
    return v8 == 0;
  }
  return result;
}

int xmlValidateNmtokensValue(const xmlChar *value)
{
  return xmlValidateNmtokensValueInternal(0, value);
}

uint64_t xmlValidateNmtokensValueInternal(uint64_t a1, const xmlChar *a2)
{
  signed int v4;
  const xmlChar *v5;
  uint64_t result;
  int len;

  if (!a2)
    return 0;
  len = 0;
  v4 = xmlStringCurrentChar(0, a2, &len);
  v5 = &a2[len];
  if (v4 <= 255)
  {
    do
    {
      if (v4 > 0x20)
        break;
      if (((1 << v4) & 0x100002600) == 0)
        break;
      v4 = xmlStringCurrentChar(0, v5, &len);
      v5 += len;
    }
    while (v4 < 256);
  }
  result = xmlIsDocNameChar(a1, v4);
  if ((_DWORD)result)
  {
    while (xmlIsDocNameChar(a1, v4))
    {
      v4 = xmlStringCurrentChar(0, v5, &len);
      v5 += len;
    }
    while (v4 == 32)
    {
      while (v4 == 32)
      {
        v4 = xmlStringCurrentChar(0, v5, &len);
        v5 += len;
      }
      if (!v4)
        return 1;
      result = xmlIsDocNameChar(a1, v4);
      if (!(_DWORD)result)
        return result;
      do
      {
        v4 = xmlStringCurrentChar(0, v5, &len);
        v5 += len;
      }
      while (xmlIsDocNameChar(a1, v4));
    }
    return v4 == 0;
  }
  return result;
}

int xmlValidateNotationDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNotationPtr nota)
{
  return 1;
}

int xmlValidateAttributeValue(xmlAttributeType type, const xmlChar *value)
{
  return xmlValidateAttributeValueInternal(0, type, value);
}

xmlChar *__cdecl xmlValidCtxtNormalizeAttributeValue(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *name, const xmlChar *value)
{
  xmlChar *v5;
  xmlNs *ns;
  const xmlChar *prefix;
  xmlAttributePtr DtdAttrDesc;
  xmlAttributePtr v14;
  _BOOL4 v15;
  _xmlDtd *intSubset;
  _xmlDtd *v17;
  xmlAttributePtr v18;
  _xmlDtd *extSubset;
  xmlChar *v21;
  _OWORD v22[3];
  __int16 v23;
  uint64_t v24;

  v5 = 0;
  v24 = *MEMORY[0x1E0C80C00];
  if (!doc || !elem || !name || !value)
    return v5;
  ns = elem->ns;
  if (!ns || (prefix = ns->prefix) == 0)
  {
    v15 = 0;
    goto LABEL_12;
  }
  v23 = 0;
  memset(v22, 0, sizeof(v22));
  v5 = xmlBuildQName(elem->name, prefix, (xmlChar *)v22, 50);
  if (!v5)
    return v5;
  DtdAttrDesc = xmlGetDtdAttrDesc(doc->intSubset, v5, name);
  if (DtdAttrDesc)
  {
    v14 = DtdAttrDesc;
  }
  else
  {
    extSubset = doc->extSubset;
    if (extSubset)
    {
      v14 = xmlGetDtdAttrDesc(extSubset, v5, name);
      v15 = v14 != 0;
      goto LABEL_19;
    }
    v14 = 0;
  }
  v15 = 0;
LABEL_19:
  if (v5 != (xmlChar *)v22 && v5 != elem->name)
    xmlFree(v5);
  if (!v14)
  {
LABEL_12:
    intSubset = doc->intSubset;
    if (!intSubset || (v14 = xmlGetDtdAttrDesc(intSubset, elem->name, name)) == 0)
    {
      v17 = doc->extSubset;
      if (!v17)
        return 0;
      v18 = xmlGetDtdAttrDesc(v17, elem->name, name);
      if (!v18)
        return 0;
      v14 = v18;
      v15 = 1;
    }
  }
  if (v14->atype == XML_ATTRIBUTE_CDATA)
    return 0;
  v21 = xmlStrdup(value);
  v5 = v21;
  if (v21)
  {
    xmlValidNormalizeString(v21);
    if (v15 && doc->standalone && !xmlStrEqual(value, v5))
    {
      xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 530, "standalone: %s on %s value had to be normalized based on external subset declaration\n", name, (xmlChar *)elem->name, 0);
      ctxt->valid = 0;
    }
  }
  return v5;
}

xmlChar *__cdecl xmlValidNormalizeAttributeValue(xmlDocPtr doc, xmlNodePtr elem, const xmlChar *name, const xmlChar *value)
{
  xmlChar *v4;
  xmlNs *ns;
  const xmlChar *prefix;
  xmlChar *v11;
  xmlAttributePtr DtdAttrDesc;
  xmlChar *v13;
  _xmlDtd *extSubset;
  _OWORD v16[3];
  __int16 v17;
  uint64_t v18;

  v4 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  if (!doc || !elem || !name || !value)
    return v4;
  ns = elem->ns;
  if (ns)
  {
    prefix = ns->prefix;
    if (prefix)
    {
      v17 = 0;
      memset(v16, 0, sizeof(v16));
      v11 = xmlBuildQName(elem->name, prefix, (xmlChar *)v16, 50);
      if (!v11)
        return 0;
      if (v11 != (xmlChar *)v16 && v11 != elem->name)
        xmlFree(v11);
    }
  }
  DtdAttrDesc = xmlGetDtdAttrDesc(doc->intSubset, elem->name, name);
  if (!DtdAttrDesc)
  {
    extSubset = doc->extSubset;
    if (!extSubset)
      return 0;
    DtdAttrDesc = xmlGetDtdAttrDesc(extSubset, elem->name, name);
    if (!DtdAttrDesc)
      return 0;
  }
  if (DtdAttrDesc->atype == XML_ATTRIBUTE_CDATA)
    return 0;
  v13 = xmlStrdup(value);
  v4 = v13;
  if (v13)
    xmlValidNormalizeString(v13);
  return v4;
}

int xmlValidateAttributeDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlAttributePtr attr)
{
  const xmlChar *defaultValue;
  int v7;
  xmlElementPtr DtdElementDesc;
  xmlAttributePtr attributes;
  int v10;
  _xmlDtd *intSubset;
  const xmlChar *elem;
  xmlChar *name;
  const char *v14;
  _xmlDtd *extSubset;
  xmlElementPtr v16;
  xmlAttributePtr v17;
  xmlEnumerationPtr tree;
  int data;

  if (!doc || *(_OWORD *)&doc->intSubset == 0)
    return 0;
  if (!attr)
    return 1;
  defaultValue = attr->defaultValue;
  if (defaultValue && !xmlValidateAttributeValueInternal((uint64_t)doc, attr->atype, defaultValue))
  {
    xmlErrValidNode((uint64_t)ctxt, (uint64_t)attr, 500, "Syntax of default value for attribute %s of %s is not valid\n", attr->name, (xmlChar *)attr->elem, 0);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  if (attr->atype != XML_ATTRIBUTE_ID)
    goto LABEL_38;
  if ((attr->def & 0xFFFFFFFE) != 2)
  {
    xmlErrValidNode((uint64_t)ctxt, (uint64_t)attr, 512, "ID attribute %s of %s is not valid must be #IMPLIED or #REQUIRED\n", attr->name, (xmlChar *)attr->elem, 0);
    v7 = 0;
    if (attr->atype != XML_ATTRIBUTE_ID)
      goto LABEL_38;
  }
  DtdElementDesc = xmlGetDtdElementDesc(doc->intSubset, attr->elem);
  if (DtdElementDesc)
  {
    attributes = DtdElementDesc->attributes;
    if (attributes)
    {
      v10 = 0;
      do
      {
        if (attributes->atype == XML_ATTRIBUTE_ID)
          ++v10;
        attributes = attributes->nexth;
      }
      while (attributes);
    }
    else
    {
      v10 = 0;
    }
    data = v10;
LABEL_23:
    if (v10 >= 2)
    {
      elem = attr->elem;
      name = (xmlChar *)attr->name;
      v14 = "Element %s has %d ID attribute defined in the internal subset : %s\n";
LABEL_25:
      xmlErrValidNodeNr((uint64_t)ctxt, (uint64_t)attr, 514, v14, elem, v10, name);
      goto LABEL_38;
    }
    goto LABEL_26;
  }
  data = 0;
  intSubset = doc->intSubset;
  if (intSubset)
  {
    xmlHashScan3((xmlHashTablePtr)intSubset->attributes, 0, 0, attr->elem, (xmlHashScanner)xmlValidateAttributeIdCallback, &data);
    v10 = data;
    goto LABEL_23;
  }
LABEL_26:
  extSubset = doc->extSubset;
  if (!extSubset)
    goto LABEL_38;
  v16 = xmlGetDtdElementDesc(extSubset, attr->elem);
  if (v16 && (v17 = v16->attributes) != 0)
  {
    v10 = 0;
    do
    {
      if (v17->atype == XML_ATTRIBUTE_ID)
        ++v10;
      v17 = v17->nexth;
    }
    while (v17);
    if (v10 >= 2)
    {
      elem = attr->elem;
      name = (xmlChar *)attr->name;
      v14 = "Element %s has %d ID attribute defined in the external subset : %s\n";
      goto LABEL_25;
    }
  }
  else
  {
    v10 = 0;
  }
  if (data + v10 >= 2)
    xmlErrValidNode((uint64_t)ctxt, (uint64_t)attr, 514, "Element %s has ID attributes defined in the internal and external subset : %s\n", attr->elem, (xmlChar *)attr->name, 0);
LABEL_38:
  if (attr->defaultValue)
  {
    tree = attr->tree;
    if (tree)
    {
      while (!xmlStrEqual(tree->name, attr->defaultValue))
      {
        tree = tree->next;
        if (!tree)
        {
          xmlErrValidNode((uint64_t)ctxt, (uint64_t)attr, 502, "Default value \"%s\" for attribute %s of %s is not among the enumerated set\n", attr->defaultValue, (xmlChar *)attr->name, (xmlChar *)attr->elem);
          return 0;
        }
      }
    }
  }
  return v7;
}

uint64_t xmlValidateAttributeIdCallback(uint64_t result, _DWORD *a2)
{
  if (*(_DWORD *)(result + 80) == 2)
    ++*a2;
  return result;
}

_DWORD *xmlErrValidNodeNr(uint64_t a1, uint64_t a2, int a3, const char *a4, const xmlChar *a5, int a6, xmlChar *cur)
{
  void (*v9)(void *, const char *, ...);
  _QWORD *v10;
  _QWORD *v11;

  if (a1)
  {
    v10 = *(_QWORD **)a1;
    v9 = *(void (**)(void *, const char *, ...))(a1 + 8);
    if (*(_DWORD *)(a1 + 48) >> 1 == 1441171738)
      v11 = *(_QWORD **)a1;
    else
      v11 = 0;
  }
  else
  {
    v9 = 0;
    v11 = 0;
    v10 = 0;
  }
  return __xmlRaiseError(0, v9, v10, v11, a2, 0x17u, a3, 2, 0, 0, a5, cur, 0, a6, 0, a4, (char)a5);
}

int xmlValidateElementDecl(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlElementPtr elem)
{
  _xmlDtd *intSubset;
  xmlElementContentPtr content;
  int v8;
  _xmlElementContent *c1;
  _xmlElementContent *c2;
  const xmlChar *name;
  _xmlElementContent *v12;
  xmlChar *prefix;
  const char *v14;
  xmlChar *v15;
  xmlChar *v16;
  const char *v17;
  xmlChar *v18;
  xmlElementPtr DtdElementDesc;
  BOOL v20;
  xmlElementPtr v21;
  const xmlChar *v22;
  const xmlChar *v23;
  xmlElementPtr v24;
  BOOL v25;
  xmlElementPtr v26;
  const xmlChar *v27;
  const xmlChar *v28;

  if (!doc)
    return 0;
  intSubset = doc->intSubset;
  if (*(_OWORD *)&doc->intSubset == 0)
    return 0;
  if (!elem)
    return 1;
  if (elem->etype == XML_ELEMENT_TYPE_MIXED && (content = elem->content) != 0)
  {
    v8 = 1;
    do
    {
      if (content->type != XML_ELEMENT_CONTENT_OR)
        break;
      c1 = content->c1;
      if (!c1)
        break;
      if (c1->type == XML_ELEMENT_CONTENT_ELEMENT)
      {
        c2 = content->c2;
        if (c2)
        {
          name = c1->name;
          while (c2->type != XML_ELEMENT_CONTENT_ELEMENT)
          {
            v12 = c2->c1;
            if (v12 && v12->type == XML_ELEMENT_CONTENT_ELEMENT)
            {
              if (xmlStrEqual(v12->name, name) && xmlStrEqual(c2->c1->prefix, content->c1->prefix))
              {
                prefix = (xmlChar *)content->c1->prefix;
                if (prefix)
                {
                  v14 = "Definition of %s has duplicate references to %s:%s\n";
                  v15 = (xmlChar *)name;
                }
                else
                {
                  v14 = "Definition of %s has duplicate references to %s\n";
                  prefix = (xmlChar *)name;
                  v15 = 0;
                }
                xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 503, v14, elem->name, prefix, v15);
                v8 = 0;
              }
              c2 = c2->c2;
              if (c2)
                continue;
            }
            goto LABEL_29;
          }
          if (xmlStrEqual(c2->name, name) && xmlStrEqual(c2->prefix, content->c1->prefix))
          {
            v16 = (xmlChar *)content->c1->prefix;
            if (v16)
            {
              v17 = "Definition of %s has duplicate references of %s:%s\n";
              v18 = (xmlChar *)name;
            }
            else
            {
              v17 = "Definition of %s has duplicate references of %s\n";
              v16 = (xmlChar *)name;
              v18 = 0;
            }
            xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 503, v17, elem->name, v16, v18);
            v8 = 0;
          }
        }
      }
LABEL_29:
      content = content->c2;
    }
    while (content);
    intSubset = doc->intSubset;
  }
  else
  {
    v8 = 1;
  }
  DtdElementDesc = xmlGetDtdElementDesc(intSubset, elem->name);
  if (DtdElementDesc)
    v20 = DtdElementDesc == elem;
  else
    v20 = 1;
  if (!v20)
  {
    v21 = DtdElementDesc;
    v22 = DtdElementDesc->prefix;
    v23 = elem->prefix;
    if (v22 == v23 || xmlStrEqual(v22, v23))
    {
      if (v21->etype)
      {
        xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 509, "Redefinition of element %s\n", elem->name, 0, 0);
        v8 = 0;
      }
    }
  }
  v24 = xmlGetDtdElementDesc(doc->extSubset, elem->name);
  if (v24)
    v25 = v24 == elem;
  else
    v25 = 1;
  if (!v25)
  {
    v26 = v24;
    v27 = v24->prefix;
    v28 = elem->prefix;
    if (v27 == v28 || xmlStrEqual(v27, v28))
    {
      if (v26->etype)
      {
        xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 509, "Redefinition of element %s\n", elem->name, 0, 0);
        return 0;
      }
    }
  }
  return v8;
}

int xmlValidateOneAttribute(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, xmlAttrPtr attr, const xmlChar *value)
{
  xmlChar *v10;
  const xmlChar *name;
  xmlNs *ns;
  xmlChar *v13;
  xmlNs *v14;
  _xmlDtd *intSubset;
  xmlHashTable *v16;
  char *DtdAttrDesc;
  _xmlDtd *extSubset;
  xmlHashTable *attributes;
  char *v20;
  _xmlDtd *v21;
  xmlNs *v22;
  _xmlDtd *v23;
  xmlHashTable *v24;
  _xmlDtd *v25;
  xmlHashTable *v26;
  char *v27;
  _xmlDtd *v28;
  unsigned __int32 v29;
  int v30;
  int v31;
  uint64_t **v32;
  _xmlDtd *v33;
  xmlHashTable *v34;
  _xmlDtd *v35;
  xmlHashTable *notations;
  const xmlChar **v37;
  _OWORD v39[3];
  __int16 v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (!doc)
    goto LABEL_43;
  if (doc->intSubset)
  {
    if (!elem)
      goto LABEL_43;
  }
  else
  {
    LODWORD(v10) = 0;
    if (!elem || !doc->extSubset)
      return (int)v10;
  }
  LODWORD(v10) = 0;
  if (!attr)
    return (int)v10;
  name = elem->name;
  if (!name)
    return (int)v10;
  if (!attr->name)
  {
LABEL_43:
    LODWORD(v10) = 0;
    return (int)v10;
  }
  ns = elem->ns;
  if (ns && ns->prefix)
  {
    v40 = 0;
    memset(v39, 0, sizeof(v39));
    v10 = xmlBuildQName(name, ns->prefix, (xmlChar *)v39, 50);
    if (!v10)
      return (int)v10;
    v13 = v10;
    v14 = attr->ns;
    intSubset = doc->intSubset;
    if (v14)
    {
      if (!intSubset
        || (v16 = (xmlHashTable *)intSubset->attributes) == 0
        || (DtdAttrDesc = (char *)xmlHashLookup3(v16, attr->name, v14->prefix, v13)) == 0)
      {
        extSubset = doc->extSubset;
        if (extSubset)
        {
          attributes = (xmlHashTable *)extSubset->attributes;
          if (attributes)
          {
            v20 = (char *)xmlHashLookup3(attributes, attr->name, attr->ns->prefix, v13);
LABEL_23:
            DtdAttrDesc = v20;
            goto LABEL_25;
          }
        }
        goto LABEL_24;
      }
    }
    else
    {
      DtdAttrDesc = (char *)xmlGetDtdAttrDesc(intSubset, v13, attr->name);
      if (!DtdAttrDesc)
      {
        v21 = doc->extSubset;
        if (v21)
        {
          v20 = (char *)xmlGetDtdAttrDesc(v21, v13, attr->name);
          goto LABEL_23;
        }
LABEL_24:
        DtdAttrDesc = 0;
      }
    }
LABEL_25:
    if (v13 != (xmlChar *)v39 && v13 != elem->name)
      xmlFree(v13);
    if (DtdAttrDesc)
      goto LABEL_40;
  }
  v22 = attr->ns;
  v23 = doc->intSubset;
  if (v22)
  {
    if (!v23
      || (v24 = (xmlHashTable *)v23->attributes) == 0
      || (DtdAttrDesc = (char *)xmlHashLookup3(v24, attr->name, v22->prefix, elem->name)) == 0)
    {
      v25 = doc->extSubset;
      if (v25)
      {
        v26 = (xmlHashTable *)v25->attributes;
        if (v26)
        {
          v27 = (char *)xmlHashLookup3(v26, attr->name, attr->ns->prefix, elem->name);
          goto LABEL_39;
        }
      }
      goto LABEL_42;
    }
  }
  else
  {
    DtdAttrDesc = (char *)xmlGetDtdAttrDesc(v23, elem->name, attr->name);
    if (!DtdAttrDesc)
    {
      v28 = doc->extSubset;
      if (v28)
      {
        v27 = (char *)xmlGetDtdAttrDesc(v28, elem->name, attr->name);
LABEL_39:
        DtdAttrDesc = v27;
        if (v27)
          goto LABEL_40;
      }
LABEL_42:
      xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 533, "No declaration for attribute %s of element %s\n", attr->name, (xmlChar *)elem->name, 0);
      goto LABEL_43;
    }
  }
LABEL_40:
  v29 = *((_DWORD *)DtdAttrDesc + 20);
  attr->atype = v29;
  if (xmlValidateAttributeValueInternal((uint64_t)doc, v29, value))
  {
    v30 = 1;
  }
  else
  {
    xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 502, "Syntax of value for attribute %s of %s is not valid\n", attr->name, (xmlChar *)elem->name, 0);
    v30 = 0;
  }
  if (*((_DWORD *)DtdAttrDesc + 21) == 4 && !xmlStrEqual(value, *((const xmlChar **)DtdAttrDesc + 11)))
  {
    xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 500, "Value for attribute %s of %s is different from default \"%s\"\n", attr->name, (xmlChar *)elem->name, *((xmlChar **)DtdAttrDesc + 11));
    v30 = 0;
  }
  v31 = *((_DWORD *)DtdAttrDesc + 20);
  if (v31 == 2)
  {
    if (!xmlAddID(ctxt, doc, value, attr))
      v30 = 0;
    v31 = *((_DWORD *)DtdAttrDesc + 20);
  }
  if ((v31 - 3) <= 1)
  {
    if (!xmlAddRef(ctxt, doc, value, attr))
      v30 = 0;
    v31 = *((_DWORD *)DtdAttrDesc + 20);
  }
  if (v31 == 10)
  {
    v32 = (uint64_t **)*((_QWORD *)DtdAttrDesc + 12);
    v33 = doc->intSubset;
    if (!v33 || (v34 = (xmlHashTable *)v33->notations) == 0 || !xmlHashLookup(v34, value))
    {
      v35 = doc->extSubset;
      if (!v35 || (notations = (xmlHashTable *)v35->notations) == 0 || !xmlHashLookup(notations, value))
      {
        xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 537, "Value \"%s\" for attribute %s of %s is not a declared Notation\n", value, (xmlChar *)attr->name, (xmlChar *)elem->name);
        v30 = 0;
      }
    }
    if (v32)
    {
      while (!xmlStrEqual((const xmlChar *)v32[1], value))
      {
        v32 = (uint64_t **)*v32;
        if (!v32)
          goto LABEL_68;
      }
    }
    else
    {
LABEL_68:
      xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 527, "Value \"%s\" for attribute %s of %s is not among the enumerated notations\n", value, (xmlChar *)attr->name, (xmlChar *)elem->name);
      v30 = 0;
    }
  }
  if (*((_DWORD *)DtdAttrDesc + 20) == 9)
  {
    v37 = (const xmlChar **)(DtdAttrDesc + 96);
    while (1)
    {
      v37 = (const xmlChar **)*v37;
      if (!v37)
        break;
      if (xmlStrEqual(v37[1], value))
        goto LABEL_75;
    }
    xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 502, "Value \"%s\" for attribute %s of %s is not among the enumerated set\n", value, (xmlChar *)attr->name, (xmlChar *)elem->name);
    v30 = 0;
  }
LABEL_75:
  if (*((_DWORD *)DtdAttrDesc + 21) == 4 && !xmlStrEqual(*((const xmlChar **)DtdAttrDesc + 11), value))
  {
    xmlErrValidNode((uint64_t)ctxt, (uint64_t)elem, 502, "Value for attribute %s of %s must be \"%s\"\n", attr->name, (xmlChar *)elem->name, *((xmlChar **)DtdAttrDesc + 11));
    v30 = 0;
  }
  LODWORD(v10) = xmlValidateAttributeValue2((uint64_t)ctxt, doc, attr->name, *((_DWORD *)DtdAttrDesc + 20), (xmlChar *)value) & v30;
  return (int)v10;
}

uint64_t xmlValidateAttributeValue2(uint64_t a1, xmlDoc *doc, const xmlChar *a3, int a4, xmlChar *cur)
{
  xmlEntityPtr DocEntity;
  const char *v10;
  uint64_t v11;
  xmlDoc *v12;
  int v13;
  _xmlDtd *intSubset;
  xmlHashTable *v15;
  _xmlDtd *extSubset;
  xmlHashTable *notations;
  uint64_t v18;
  xmlChar *v19;
  xmlChar *v20;
  unsigned int v21;
  xmlChar *v22;
  xmlChar *v23;
  unsigned int v24;
  xmlEntityPtr v25;
  uint64_t v26;
  xmlDoc *v27;
  int v28;
  const char *v29;
  unsigned int v30;

  if (a4 == 10)
  {
    intSubset = doc->intSubset;
    if (!intSubset || (v15 = (xmlHashTable *)intSubset->notations) == 0 || !xmlHashLookup(v15, cur))
    {
      extSubset = doc->extSubset;
      if (!extSubset || (notations = (xmlHashTable *)extSubset->notations) == 0 || !xmlHashLookup(notations, cur))
      {
        v10 = "NOTATION attribute %s reference an unknown notation \"%s\"\n";
        v11 = a1;
        v12 = doc;
        v13 = 537;
        goto LABEL_37;
      }
    }
    return 1;
  }
  if (a4 != 6)
  {
    if (a4 == 5)
    {
      DocEntity = xmlGetDocEntity(doc, cur);
      if (!DocEntity)
      {
        if (doc->standalone != 1 || (doc->standalone = 0, (DocEntity = xmlGetDocEntity(doc, cur)) == 0))
        {
          v10 = "ENTITY attribute %s reference an unknown entity \"%s\"\n";
          v11 = a1;
          v12 = doc;
          v13 = 535;
          goto LABEL_37;
        }
      }
      if (DocEntity->etype != XML_EXTERNAL_GENERAL_UNPARSED_ENTITY)
      {
        v10 = "ENTITY attribute %s reference an entity \"%s\" of wrong type\n";
        v11 = a1;
        v12 = doc;
        v13 = 511;
LABEL_37:
        xmlErrValidNode(v11, (uint64_t)v12, v13, v10, a3, cur, 0);
        return 0;
      }
    }
    return 1;
  }
  v19 = xmlStrdup(cur);
  if (!v19)
    return 0;
  v20 = v19;
  v21 = *v19;
  if (*v19)
  {
    v22 = v19;
    v18 = 1;
    while (1)
    {
LABEL_17:
      v23 = v22;
      while (v21 > 0x20 || ((1 << v21) & 0x100002601) == 0)
      {
        v24 = *++v23;
        v21 = v24;
      }
      *v23 = 0;
      v25 = xmlGetDocEntity(doc, v22);
      if (v25)
      {
        if (v25->etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY)
          goto LABEL_26;
        v26 = a1;
        v27 = doc;
        v28 = 511;
        v29 = "ENTITIES attribute %s reference an entity \"%s\" of wrong type\n";
      }
      else
      {
        v26 = a1;
        v27 = doc;
        v28 = 535;
        v29 = "ENTITIES attribute %s reference an unknown entity \"%s\"\n";
      }
      xmlErrValidNode(v26, (uint64_t)v27, v28, v29, a3, v22, 0);
      v18 = 0;
LABEL_26:
      if (!v21)
        goto LABEL_40;
      *v23 = v21;
      v22 = v23;
      while (v21 <= 0x20)
      {
        if (((1 << v21) & 0x100002600) == 0)
        {
          if (!v21)
            goto LABEL_40;
          goto LABEL_17;
        }
        v30 = *++v22;
        v21 = v30;
      }
    }
  }
  v18 = 1;
LABEL_40:
  xmlFree(v20);
  return v18;
}

int xmlValidateOneNamespace(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *prefix, xmlNsPtr ns, const xmlChar *value)
{
  int result;
  const xmlChar *name;
  xmlChar *v13;
  xmlChar *v14;
  const xmlChar *v15;
  _xmlDtd *intSubset;
  xmlHashTable *v17;
  char *DtdAttrDesc;
  _xmlDtd *extSubset;
  xmlHashTable *attributes;
  char *v21;
  _xmlDtd *v22;
  const xmlChar *v23;
  _xmlDtd *v24;
  xmlHashTable *v25;
  _xmlDtd *v26;
  xmlHashTable *v27;
  char *v28;
  _xmlDtd *v29;
  int v30;
  const xmlChar *v31;
  xmlChar *v32;
  const char *v33;
  xmlValidCtxtPtr v34;
  xmlNodePtr v35;
  const xmlChar *v36;
  xmlChar *v37;
  const char *v38;
  xmlValidCtxtPtr v39;
  xmlNodePtr v40;
  const xmlChar *v41;
  xmlChar *v42;
  xmlChar *v43;
  const char *v44;
  xmlValidCtxtPtr v45;
  xmlNodePtr v46;
  int v47;
  uint64_t **v48;
  _xmlDtd *v49;
  xmlHashTable *v50;
  _xmlDtd *v51;
  xmlHashTable *notations;
  xmlChar *v53;
  xmlChar *v54;
  const char *v55;
  xmlValidCtxtPtr v56;
  xmlNodePtr v57;
  const xmlChar *v58;
  xmlChar *v59;
  xmlChar *v60;
  const char *v61;
  xmlValidCtxtPtr v62;
  xmlNodePtr v63;
  const xmlChar *v64;
  const xmlChar **v65;
  xmlChar *v66;
  xmlChar *v67;
  const char *v68;
  xmlValidCtxtPtr v69;
  xmlNodePtr v70;
  const xmlChar *v71;
  const xmlChar *v72;
  xmlChar *v73;
  xmlChar *v74;
  const char *v75;
  xmlValidCtxtPtr v76;
  xmlNodePtr v77;
  const xmlChar *v78;
  _OWORD v79[3];
  __int16 v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (!doc)
    return 0;
  if (doc->intSubset)
  {
    if (!elem)
      return 0;
  }
  else
  {
    result = 0;
    if (!elem || !doc->extSubset)
      return result;
  }
  result = 0;
  if (!ns)
    return result;
  name = elem->name;
  if (!name)
    return result;
  if (!ns->href)
    return 0;
  if (!prefix)
    goto LABEL_29;
  v80 = 0;
  memset(v79, 0, sizeof(v79));
  v13 = xmlBuildQName(name, prefix, (xmlChar *)v79, 50);
  if (!v13)
  {
    xmlVErrMemory((uint64_t)ctxt, (const xmlChar *)"Validating namespace");
    return 0;
  }
  v14 = v13;
  v15 = ns->prefix;
  intSubset = doc->intSubset;
  if (v15)
  {
    if (!intSubset
      || (v17 = (xmlHashTable *)intSubset->attributes) == 0
      || (DtdAttrDesc = (char *)xmlHashLookup3(v17, v15, (const xmlChar *)"xmlns", v14)) == 0)
    {
      extSubset = doc->extSubset;
      if (extSubset)
      {
        attributes = (xmlHashTable *)extSubset->attributes;
        if (attributes)
        {
          v21 = (char *)xmlHashLookup3(attributes, ns->prefix, (const xmlChar *)"xmlns", v14);
LABEL_23:
          DtdAttrDesc = v21;
          goto LABEL_25;
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    DtdAttrDesc = (char *)xmlGetDtdAttrDesc(intSubset, v14, (const xmlChar *)"xmlns");
    if (!DtdAttrDesc)
    {
      v22 = doc->extSubset;
      if (v22)
      {
        v21 = (char *)xmlGetDtdAttrDesc(v22, v14, (const xmlChar *)"xmlns");
        goto LABEL_23;
      }
LABEL_24:
      DtdAttrDesc = 0;
    }
  }
LABEL_25:
  if (v14 != (xmlChar *)v79 && v14 != elem->name)
    xmlFree(v14);
  if (DtdAttrDesc)
    goto LABEL_40;
LABEL_29:
  v23 = ns->prefix;
  v24 = doc->intSubset;
  if (v23)
  {
    if (v24)
    {
      v25 = (xmlHashTable *)v24->attributes;
      if (v25)
      {
        DtdAttrDesc = (char *)xmlHashLookup3(v25, v23, (const xmlChar *)"xmlns", elem->name);
        if (DtdAttrDesc)
          goto LABEL_40;
      }
    }
    v26 = doc->extSubset;
    if (!v26)
      goto LABEL_42;
    v27 = (xmlHashTable *)v26->attributes;
    if (!v27)
      goto LABEL_42;
    v28 = (char *)xmlHashLookup3(v27, ns->prefix, (const xmlChar *)"xmlns", elem->name);
LABEL_39:
    DtdAttrDesc = v28;
    if (v28)
      goto LABEL_40;
LABEL_42:
    v31 = ns->prefix;
    v32 = (xmlChar *)elem->name;
    if (v31)
    {
      v33 = "No declaration for attribute xmlns:%s of element %s\n";
      v34 = ctxt;
      v35 = elem;
    }
    else
    {
      v33 = "No declaration for attribute xmlns of element %s\n";
      v34 = ctxt;
      v35 = elem;
      v31 = elem->name;
      v32 = 0;
    }
    xmlErrValidNode((uint64_t)v34, (uint64_t)v35, 533, v33, v31, v32, 0);
    return 0;
  }
  DtdAttrDesc = (char *)xmlGetDtdAttrDesc(v24, elem->name, (const xmlChar *)"xmlns");
  if (!DtdAttrDesc)
  {
    v29 = doc->extSubset;
    if (!v29)
      goto LABEL_42;
    v28 = (char *)xmlGetDtdAttrDesc(v29, elem->name, (const xmlChar *)"xmlns");
    goto LABEL_39;
  }
LABEL_40:
  if (xmlValidateAttributeValueInternal((uint64_t)doc, *((_DWORD *)DtdAttrDesc + 20), value))
  {
    v30 = 1;
  }
  else
  {
    v36 = ns->prefix;
    v37 = (xmlChar *)elem->name;
    if (v36)
    {
      v38 = "Syntax of value for attribute xmlns:%s of %s is not valid\n";
      v39 = ctxt;
      v40 = elem;
    }
    else
    {
      v38 = "Syntax of value for attribute xmlns of %s is not valid\n";
      v39 = ctxt;
      v40 = elem;
      v36 = elem->name;
      v37 = 0;
    }
    xmlErrValidNode((uint64_t)v39, (uint64_t)v40, 516, v38, v36, v37, 0);
    v30 = 0;
  }
  if (*((_DWORD *)DtdAttrDesc + 21) == 4 && !xmlStrEqual(value, *((const xmlChar **)DtdAttrDesc + 11)))
  {
    v41 = ns->prefix;
    v42 = (xmlChar *)elem->name;
    v43 = (xmlChar *)*((_QWORD *)DtdAttrDesc + 11);
    if (v41)
    {
      v44 = "Value for attribute xmlns:%s of %s is different from default \"%s\"\n";
      v45 = ctxt;
      v46 = elem;
    }
    else
    {
      v44 = "Value for attribute xmlns of %s is different from default \"%s\"\n";
      v45 = ctxt;
      v46 = elem;
      v41 = elem->name;
      v42 = (xmlChar *)*((_QWORD *)DtdAttrDesc + 11);
      v43 = 0;
    }
    xmlErrValidNode((uint64_t)v45, (uint64_t)v46, 500, v44, v41, v42, v43);
    v30 = 0;
  }
  v47 = *((_DWORD *)DtdAttrDesc + 20);
  if (v47 == 10)
  {
    v48 = (uint64_t **)*((_QWORD *)DtdAttrDesc + 12);
    v49 = doc->intSubset;
    if (!v49 || (v50 = (xmlHashTable *)v49->notations) == 0 || !xmlHashLookup(v50, value))
    {
      v51 = doc->extSubset;
      if (!v51 || (notations = (xmlHashTable *)v51->notations) == 0 || !xmlHashLookup(notations, value))
      {
        v53 = (xmlChar *)ns->prefix;
        v54 = (xmlChar *)elem->name;
        if (v53)
        {
          v55 = "Value \"%s\" for attribute xmlns:%s of %s is not a declared Notation\n";
          v56 = ctxt;
          v57 = elem;
          v58 = value;
        }
        else
        {
          v55 = "Value \"%s\" for attribute xmlns of %s is not a declared Notation\n";
          v56 = ctxt;
          v57 = elem;
          v58 = value;
          v53 = (xmlChar *)elem->name;
          v54 = 0;
        }
        xmlErrValidNode((uint64_t)v56, (uint64_t)v57, 537, v55, v58, v53, v54);
        v30 = 0;
      }
    }
    if (v48)
    {
      while (!xmlStrEqual((const xmlChar *)v48[1], value))
      {
        v48 = (uint64_t **)*v48;
        if (!v48)
          goto LABEL_72;
      }
    }
    else
    {
LABEL_72:
      v59 = (xmlChar *)ns->prefix;
      v60 = (xmlChar *)elem->name;
      if (v59)
      {
        v61 = "Value \"%s\" for attribute xmlns:%s of %s is not among the enumerated notations\n";
        v62 = ctxt;
        v63 = elem;
        v64 = value;
      }
      else
      {
        v61 = "Value \"%s\" for attribute xmlns of %s is not among the enumerated notations\n";
        v62 = ctxt;
        v63 = elem;
        v64 = value;
        v59 = (xmlChar *)elem->name;
        v60 = 0;
      }
      xmlErrValidNode((uint64_t)v62, (uint64_t)v63, 527, v61, v64, v59, v60);
      v30 = 0;
    }
    v47 = *((_DWORD *)DtdAttrDesc + 20);
  }
  if (v47 == 9)
  {
    v65 = (const xmlChar **)(DtdAttrDesc + 96);
    while (1)
    {
      v65 = (const xmlChar **)*v65;
      if (!v65)
        break;
      if (xmlStrEqual(v65[1], value))
        goto LABEL_86;
    }
    v66 = (xmlChar *)ns->prefix;
    v67 = (xmlChar *)elem->name;
    if (v66)
    {
      v68 = "Value \"%s\" for attribute xmlns:%s of %s is not among the enumerated set\n";
      v69 = ctxt;
      v70 = elem;
      v71 = value;
    }
    else
    {
      v68 = "Value \"%s\" for attribute xmlns of %s is not among the enumerated set\n";
      v69 = ctxt;
      v70 = elem;
      v71 = value;
      v66 = (xmlChar *)elem->name;
      v67 = 0;
    }
    xmlErrValidNode((uint64_t)v69, (uint64_t)v70, 502, v68, v71, v66, v67);
    v30 = 0;
  }
LABEL_86:
  if (*((_DWORD *)DtdAttrDesc + 21) == 4 && !xmlStrEqual(*((const xmlChar **)DtdAttrDesc + 11), value))
  {
    v72 = ns->prefix;
    v73 = (xmlChar *)elem->name;
    v74 = (xmlChar *)*((_QWORD *)DtdAttrDesc + 11);
    if (v72)
    {
      v75 = "Value for attribute xmlns:%s of %s must be \"%s\"\n";
      v76 = ctxt;
      v77 = elem;
    }
    else
    {
      v75 = "Value for attribute xmlns of %s must be \"%s\"\n";
      v76 = ctxt;
      v77 = elem;
      v72 = elem->name;
      v73 = (xmlChar *)*((_QWORD *)DtdAttrDesc + 11);
      v74 = 0;
    }
    xmlErrValidNode((uint64_t)v76, (uint64_t)v77, 508, v75, v72, v73, v74);
    v30 = 0;
  }
  if (ns->prefix)
    v78 = ns->prefix;
  else
    v78 = (const xmlChar *)"xmlns";
  return xmlValidateAttributeValue2((uint64_t)ctxt, doc, v78, *((_DWORD *)DtdAttrDesc + 20), (xmlChar *)value) & v30;
}

int xmlValidatePushElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *qname)
{
  xmlValidCtxtPtr v6;
  xmlValidState *vstate;
  uint64_t v8;
  int v9;
  uint64_t v11;
  const xmlChar *v12;
  const char *v13;
  int v14;
  uint64_t v15;
  xmlChar *v16;
  xmlRegExecCtxt *v17;
  const xmlChar *v18;
  const xmlChar *v19;
  const xmlChar *v20;
  const xmlChar *v21;
  uint64_t v22;
  const xmlChar *v23;
  const xmlChar *v24;
  uint64_t v25;
  xmlElement *ElemDecl;
  int vstateMax;
  xmlValidState *vstateTab;
  int vstateNr;
  xmlValidState *v30;
  xmlRegexp *contModel;
  xmlRegExecCtxtPtr v32;
  const char *v33;
  int v35;
  int len;

  v35 = 0;
  if (!ctxt)
    return 0;
  v6 = ctxt;
  if (ctxt->vstateNr < 1 || (vstate = ctxt->vstate) == 0 || (v8 = *(_QWORD *)vstate) == 0)
  {
LABEL_44:
    v9 = 1;
    goto LABEL_45;
  }
  v9 = 1;
  switch(*(_DWORD *)(v8 + 72))
  {
    case 0:
      goto LABEL_67;
    case 1:
      v11 = *((_QWORD *)vstate + 1);
      v12 = *(const xmlChar **)(v11 + 16);
      v13 = "Element %s was declared EMPTY this one has content\n";
      v14 = 528;
      goto LABEL_11;
    case 3:
      v15 = *(_QWORD *)(v8 + 80);
      if (!v15)
      {
        len = 0;
        xmlSplitQName3(qname, &len);
LABEL_65:
        v11 = *((_QWORD *)vstate + 1);
        v16 = *(xmlChar **)(v11 + 16);
        v13 = "Element %s is not declared in %s list of possible children\n";
        ctxt = v6;
        v14 = 515;
        v12 = qname;
        goto LABEL_66;
      }
      if (*(_DWORD *)v15 != 1)
      {
        len = 0;
        v18 = xmlSplitQName3(qname, &len);
        if (v18)
        {
          v19 = v18;
          while (*(_DWORD *)v15 == 4)
          {
            v22 = *(_QWORD *)(v15 + 16);
            if (!v22)
              goto LABEL_63;
            if (*(_DWORD *)v22 != 1)
            {
              if (*(_DWORD *)v22 != 2)
              {
LABEL_63:
                xmlErrValid_0((uint64_t)v6, 519, "Internal: MIXED struct corrupted\n", 0);
                goto LABEL_65;
              }
              v23 = *(const xmlChar **)(v22 + 40);
              if (v23)
              {
                if (!xmlStrncmp(v23, qname, len))
                {
                  v21 = *(const xmlChar **)(*(_QWORD *)(v15 + 16) + 8);
LABEL_29:
                  if (xmlStrEqual(v21, v19))
                    goto LABEL_44;
                }
              }
            }
LABEL_30:
            v15 = *(_QWORD *)(v15 + 24);
            if (!v15)
              goto LABEL_65;
          }
          if (*(_DWORD *)v15 != 2)
            goto LABEL_63;
          v20 = *(const xmlChar **)(v15 + 40);
          if (!v20 || xmlStrncmp(v20, qname, len))
            goto LABEL_30;
          v21 = *(const xmlChar **)(v15 + 8);
          goto LABEL_29;
        }
        while (1)
        {
          if (*(_DWORD *)v15 == 4)
          {
            v25 = *(_QWORD *)(v15 + 16);
            if (!v25)
              goto LABEL_64;
            if (*(_DWORD *)v25 != 1)
            {
              if (*(_DWORD *)v25 != 2)
              {
LABEL_64:
                __xmlRaiseError(0, 0, 0, 0, 0, 0x17u, 519, 2, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"Internal: MIXED struct corrupted\n");
                goto LABEL_65;
              }
              if (!*(_QWORD *)(v25 + 40))
              {
                v24 = *(const xmlChar **)(v25 + 8);
LABEL_41:
                if (xmlStrEqual(v24, qname))
                  goto LABEL_44;
              }
            }
          }
          else
          {
            if (*(_DWORD *)v15 != 2)
              goto LABEL_64;
            if (!*(_QWORD *)(v15 + 40))
            {
              v24 = *(const xmlChar **)(v15 + 8);
              goto LABEL_41;
            }
          }
          v15 = *(_QWORD *)(v15 + 24);
          if (!v15)
            goto LABEL_65;
        }
      }
      v11 = *((_QWORD *)vstate + 1);
      v12 = *(const xmlChar **)(v11 + 16);
      v13 = "Element %s was declared #PCDATA but contains non text nodes\n";
      v14 = 529;
LABEL_11:
      v16 = 0;
LABEL_66:
      xmlErrValidNode((uint64_t)ctxt, v11, v14, v13, v12, v16, 0);
LABEL_67:
      v9 = 0;
LABEL_45:
      ElemDecl = (xmlElement *)xmlValidGetElemDecl((uint64_t)v6, (uint64_t)doc, (uint64_t)elem, &v35);
      vstateMax = v6->vstateMax;
      if (!vstateMax || (vstateTab = v6->vstateTab) == 0)
      {
        v6->vstateMax = 10;
        vstateTab = (xmlValidState *)xmlMalloc(0xF0uLL);
        v6->vstateTab = vstateTab;
        if (!vstateTab)
        {
          v33 = "malloc failed";
LABEL_60:
          xmlVErrMemory((uint64_t)v6, (const xmlChar *)v33);
          return v9;
        }
        vstateMax = v6->vstateMax;
      }
      vstateNr = v6->vstateNr;
      if (vstateNr < vstateMax)
        goto LABEL_52;
      vstateTab = (xmlValidState *)xmlRealloc(vstateTab, 48 * vstateMax);
      if (!vstateTab)
      {
        v33 = "realloc failed";
        goto LABEL_60;
      }
      vstateNr = v6->vstateNr;
      v6->vstateMax *= 2;
      v6->vstateTab = vstateTab;
LABEL_52:
      v30 = (xmlValidState *)((char *)vstateTab + 24 * vstateNr);
      v6->vstate = v30;
      *(_QWORD *)v30 = ElemDecl;
      *((_QWORD *)v30 + 1) = elem;
      if (ElemDecl && ElemDecl->etype == XML_ELEMENT_TYPE_ELEMENT)
      {
        contModel = ElemDecl->contModel;
        if (contModel || (xmlValidBuildContentModel(v6, ElemDecl), (contModel = ElemDecl->contModel) != 0))
        {
          v32 = xmlRegNewExecCtxt(contModel, 0, 0);
          vstateNr = v6->vstateNr;
          *((_QWORD *)v6->vstateTab + 3 * vstateNr + 2) = v32;
        }
        else
        {
          *((_QWORD *)v6->vstateTab + 3 * v6->vstateNr + 2) = 0;
          xmlErrValidNode((uint64_t)v6, (uint64_t)ElemDecl, 1, "Failed to build content model regexp for %s\n", elem->name, 0, 0);
          vstateNr = v6->vstateNr;
        }
      }
      v6->vstateNr = vstateNr + 1;
      return v9;
    case 4:
      v17 = (xmlRegExecCtxt *)*((_QWORD *)vstate + 2);
      if (!v17 || (xmlRegExecPushString(v17, qname, 0) & 0x80000000) == 0)
        goto LABEL_45;
      v11 = *((_QWORD *)vstate + 1);
      v12 = *(const xmlChar **)(v11 + 16);
      v13 = "Element %s content does not follow the DTD, Misplaced %s\n";
      ctxt = v6;
      v14 = 504;
      v16 = (xmlChar *)qname;
      goto LABEL_66;
    default:
      goto LABEL_45;
  }
}

void *xmlValidGetElemDecl(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  void *result;
  const xmlChar *v8;
  uint64_t v10;
  const xmlChar *v11;
  uint64_t v12;
  xmlHashTable *v13;
  uint64_t v14;
  xmlHashTable *v15;
  xmlDtd *v16;

  result = 0;
  if (a1 && a2 && a3)
  {
    v8 = *(const xmlChar **)(a3 + 16);
    if (!v8)
      return 0;
    if (a4)
      *a4 = 0;
    v10 = *(_QWORD *)(a3 + 72);
    if (v10)
    {
      v11 = *(const xmlChar **)(v10 + 24);
      if (v11)
      {
        v12 = *(_QWORD *)(a2 + 80);
        if (v12)
        {
          v13 = *(xmlHashTable **)(v12 + 80);
          if (v13)
          {
            result = xmlHashLookup2(v13, v8, v11);
            if (result)
              return result;
          }
        }
        v14 = *(_QWORD *)(a2 + 88);
        if (v14)
        {
          v15 = *(xmlHashTable **)(v14 + 80);
          if (v15)
          {
            result = xmlHashLookup2(v15, *(const xmlChar **)(a3 + 16), v11);
            if (a4 && result)
              goto LABEL_21;
            if (result)
              return result;
          }
        }
      }
    }
    result = xmlGetDtdElementDesc(*(xmlDtdPtr *)(a2 + 80), *(const xmlChar **)(a3 + 16));
    if (result)
      return result;
    v16 = *(xmlDtd **)(a2 + 88);
    if (!v16)
      goto LABEL_23;
    result = xmlGetDtdElementDesc(v16, *(const xmlChar **)(a3 + 16));
    if (a4 && result)
    {
LABEL_21:
      *a4 = 1;
      return result;
    }
    if (!result)
    {
LABEL_23:
      xmlErrValidNode(a1, a3, 534, "No declaration for element %s\n", *(const xmlChar **)(a3 + 16), 0, 0);
      return 0;
    }
  }
  return result;
}

int xmlValidatePushCData(xmlValidCtxtPtr ctxt, const xmlChar *data, int len)
{
  xmlValidState *vstate;
  int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v10;
  const xmlChar *v11;
  const char *v12;
  int v13;

  if (!ctxt)
    return 0;
  if (len >= 1)
  {
    if (ctxt->vstateNr >= 1)
    {
      vstate = ctxt->vstate;
      if (vstate)
      {
        if (*(_QWORD *)vstate)
        {
          v4 = *(_DWORD *)(*(_QWORD *)vstate + 72);
          switch(v4)
          {
            case 0:
              return v4;
            case 1:
              v10 = *((_QWORD *)vstate + 1);
              v11 = *(const xmlChar **)(v10 + 16);
              v12 = "Element %s was declared EMPTY this one has content\n";
              v13 = 528;
LABEL_22:
              xmlErrValidNode((uint64_t)ctxt, v10, v13, v12, v11, 0, 0);
              return 0;
            case 4:
              v5 = len;
              while (1)
              {
                v6 = *data++;
                v7 = (1 << v6) & 0x100002600;
                if (v6 > 0x20 || v7 == 0)
                  break;
                v4 = 1;
                if (!--v5)
                  return v4;
              }
              v10 = *((_QWORD *)vstate + 1);
              v11 = *(const xmlChar **)(v10 + 16);
              v12 = "Element %s content does not follow the DTD, Text not allowed\n";
              v13 = 504;
              goto LABEL_22;
          }
        }
      }
    }
    return 1;
  }
  return 1;
}

int xmlValidatePopElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem, const xmlChar *qname)
{
  uint64_t *vstate;
  xmlRegExecCtxt *v6;
  int v7;
  int vstateNr;
  BOOL v9;
  int v10;
  xmlValidState *vstateTab;
  uint64_t *v12;
  uint64_t v13;
  xmlValidState *v14;
  xmlValidState *v15;

  if (!ctxt)
    return 0;
  if (ctxt->vstateNr < 1)
    return 1;
  vstate = (uint64_t *)ctxt->vstate;
  if (!vstate)
    return 1;
  if (*vstate
    && *(_DWORD *)(*vstate + 72) == 4
    && (v6 = (xmlRegExecCtxt *)vstate[2]) != 0
    && !xmlRegExecPushString(v6, 0, 0))
  {
    xmlErrValidNode((uint64_t)ctxt, vstate[1], 504, "Element %s content does not follow the DTD, Expecting more child\n", *(const xmlChar **)(vstate[1] + 16), 0, 0);
    v7 = 0;
  }
  else
  {
    v7 = 1;
  }
  vstateNr = ctxt->vstateNr;
  v9 = __OFSUB__(vstateNr, 1);
  v10 = vstateNr - 1;
  if (v10 < 0 == v9)
  {
    ctxt->vstateNr = v10;
    vstateTab = ctxt->vstateTab;
    v12 = (uint64_t *)((char *)vstateTab + 24 * v10);
    v13 = *v12;
    *v12 = 0;
    v12[1] = 0;
    if (v13 && *(_DWORD *)(v13 + 72) == 4)
    {
      xmlRegFreeExecCtxt(*((xmlRegExecCtxtPtr *)vstateTab + 3 * v10 + 2));
      vstateTab = ctxt->vstateTab;
      v10 = ctxt->vstateNr;
    }
    *((_QWORD *)vstateTab + 3 * v10 + 2) = 0;
    v14 = (xmlValidState *)((char *)vstateTab + 24 * (v10 - 1));
    if (v10 <= 0)
      v15 = 0;
    else
      v15 = v14;
    ctxt->vstate = v15;
  }
  return v7;
}

int xmlValidateOneElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem)
{
  xmlValidCtxtPtr v5;
  int v6;
  const char *v7;
  _QWORD *ElemDecl;
  _QWORD *v9;
  uint64_t i;
  int v11;
  const xmlChar *v12;
  xmlNs **v13;
  const xmlChar *v14;
  xmlNs **v15;
  const xmlChar *v16;
  xmlChar *v17;
  uint64_t v18;
  xmlNodePtr v19;
  int v20;
  const char *v21;
  int v22;
  xmlNs **v23;
  int v24;
  xmlNs **p_nsDef;
  _xmlAttr *properties;
  int v27;
  const xmlChar *v28;
  xmlNs *v29;
  xmlChar *v30;
  const xmlChar *v31;
  xmlChar *v32;
  xmlChar *v33;
  uint64_t v34;
  xmlNodePtr v35;
  int v36;
  const char *v37;
  xmlNodePtr v38;
  int v39;
  const xmlChar *name;
  const xmlChar *v42;
  const char *v43;
  uint64_t v44;
  xmlNodePtr v45;
  int v46;
  _DWORD *v47;
  _xmlNode *v48;
  xmlChar *j;
  unsigned int v50;
  _xmlNode *children;
  const xmlChar *v52;
  xmlNs *ns;
  xmlChar *v54;
  void *v55;
  uint64_t v56;
  const xmlChar *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  const xmlChar *v61;
  uint64_t v62;
  int v63;
  int v64;
  xmlChar memory[16];
  __int128 v66;
  __int128 v67;
  __int16 v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v64 = 0;
  if (!doc)
    return 0;
  v5 = ctxt;
  if (doc->intSubset)
  {
    if (!elem)
      return 0;
  }
  else
  {
    v6 = 0;
    if (!elem || !doc->extSubset)
      return v6;
  }
  v6 = 1;
  switch(elem->type)
  {
    case XML_ELEMENT_NODE:
      ElemDecl = xmlValidGetElemDecl((uint64_t)ctxt, (uint64_t)doc, (uint64_t)elem, &v64);
      if (!ElemDecl)
        return 0;
      v9 = ElemDecl;
      if (v5->vstateNr)
        goto LABEL_11;
      break;
    case XML_ATTRIBUTE_NODE:
      v7 = "Attribute element not expected\n";
      goto LABEL_68;
    case XML_TEXT_NODE:
      if (elem->children)
      {
        v7 = "Text element has children !\n";
      }
      else if (elem->ns)
      {
        v7 = "Text element has namespace !\n";
      }
      else
      {
        if (elem->content)
          return v6;
        v7 = "Text element has no content !\n";
      }
LABEL_68:
      v38 = elem;
      v39 = 1;
      name = 0;
LABEL_69:
      xmlErrValidNode((uint64_t)ctxt, (uint64_t)v38, v39, v7, name, 0, 0);
      return 0;
    case XML_CDATA_SECTION_NODE:
    case XML_ENTITY_REF_NODE:
    case XML_PI_NODE:
    case XML_COMMENT_NODE:
    case XML_XINCLUDE_START:
    case XML_XINCLUDE_END:
      return v6;
    case XML_ENTITY_NODE:
      v7 = "Entity element not expected\n";
      goto LABEL_68;
    case XML_DOCUMENT_NODE:
    case XML_DOCUMENT_TYPE_NODE:
    case XML_DOCUMENT_FRAG_NODE:
      v7 = "Document element not expected\n";
      goto LABEL_68;
    case XML_NOTATION_NODE:
      v7 = "Notation element not expected\n";
      goto LABEL_68;
    case XML_HTML_DOCUMENT_NODE:
      v7 = "HTML Document not expected\n";
      goto LABEL_68;
    default:
      v7 = "unknown element type\n";
      goto LABEL_68;
  }
  switch(*((_DWORD *)ElemDecl + 18))
  {
    case 0:
      name = elem->name;
      v7 = "No declaration for element %s\n";
      ctxt = v5;
      v38 = elem;
      v39 = 534;
      goto LABEL_69;
    case 1:
      if (!elem->children)
        goto LABEL_11;
      v42 = elem->name;
      v43 = "Element %s was declared EMPTY this one has content\n";
      v44 = (uint64_t)v5;
      v45 = elem;
      v46 = 528;
      goto LABEL_80;
    case 3:
      v47 = (_DWORD *)ElemDecl[10];
      if (!v47 || *v47 != 1)
      {
        children = elem->children;
        if (!children)
          goto LABEL_11;
LABEL_97:
        if (children->type != XML_ELEMENT_NODE)
          goto LABEL_130;
        v52 = children->name;
        ns = children->ns;
        if (!ns || !ns->prefix)
          goto LABEL_118;
        v68 = 0;
        v66 = 0u;
        v67 = 0u;
        *(_OWORD *)memory = 0u;
        v54 = xmlBuildQName(children->name, ns->prefix, memory, 50);
        if (!v54)
          return 0;
        v55 = v54;
        v56 = v9[10];
        if (!v56)
        {
LABEL_111:
          v59 = 1;
          goto LABEL_114;
        }
        while (*(_DWORD *)v56 == 4)
        {
          v58 = *(_QWORD *)(v56 + 16);
          if (!v58)
            goto LABEL_112;
          if (*(_DWORD *)v58 != 1)
          {
            if (*(_DWORD *)v58 != 2)
            {
LABEL_112:
              xmlErrValid_0(0, 519, "Internal: MIXED struct corrupted\n", 0);
LABEL_113:
              v59 = 0;
LABEL_114:
              if (v55 != memory && v55 != children->name)
                xmlFree(v55);
              if (!v59)
                goto LABEL_130;
LABEL_118:
              v60 = v9[10];
              if (v60)
              {
                while (2)
                {
                  if (*(_DWORD *)v60 != 4)
                  {
                    if (*(_DWORD *)v60 != 2)
                      goto LABEL_129;
                    v61 = *(const xmlChar **)(v60 + 8);
                    goto LABEL_126;
                  }
                  v62 = *(_QWORD *)(v60 + 16);
                  if (!v62)
                    goto LABEL_129;
                  if (*(_DWORD *)v62 != 1)
                  {
                    if (*(_DWORD *)v62 != 2)
                    {
LABEL_129:
                      xmlErrValid_0((uint64_t)v5, 519, "Internal: MIXED struct corrupted\n", 0);
                      goto LABEL_130;
                    }
                    v61 = *(const xmlChar **)(v62 + 8);
LABEL_126:
                    if (xmlStrEqual(v61, v52))
                      goto LABEL_130;
                  }
                  v60 = *(_QWORD *)(v60 + 24);
                  if (!v60)
                    break;
                  continue;
                }
              }
              xmlErrValidNode((uint64_t)v5, (uint64_t)elem, 515, "Element %s is not declared in %s list of possible children\n", v52, (xmlChar *)elem->name, 0);
              v6 = 0;
LABEL_130:
              children = children->next;
              if (!children)
                goto LABEL_11;
              goto LABEL_97;
            }
            v57 = *(const xmlChar **)(v58 + 8);
            goto LABEL_109;
          }
LABEL_110:
          v56 = *(_QWORD *)(v56 + 24);
          if (!v56)
            goto LABEL_111;
        }
        if (*(_DWORD *)v56 != 2)
          goto LABEL_112;
        v57 = *(const xmlChar **)(v56 + 8);
LABEL_109:
        if (xmlStrEqual(v57, (const xmlChar *)v55))
          goto LABEL_113;
        goto LABEL_110;
      }
      if (!xmlValidateOneCdataElement((uint64_t)v5, (uint64_t)elem))
      {
        v42 = elem->name;
        v43 = "Element %s was declared #PCDATA but contains non text nodes\n";
        v44 = (uint64_t)v5;
        v45 = elem;
        v46 = 529;
LABEL_80:
        xmlErrValidNode(v44, (uint64_t)v45, v46, v43, v42, 0, 0);
        v6 = 0;
      }
LABEL_11:
      for (i = v9[11]; i; i = *(_QWORD *)(i + 72))
      {
        v11 = *(_DWORD *)(i + 84);
        if (v11 == 4)
        {
          v14 = *(const xmlChar **)(i + 104);
          if (!v14)
          {
            v24 = xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"xmlns");
            p_nsDef = &elem->nsDef;
            if (v24)
            {
              while (1)
              {
                p_nsDef = (xmlNs **)*p_nsDef;
                if (!p_nsDef)
                  break;
                if (!p_nsDef[3])
                {
                  if (xmlStrEqual(*(const xmlChar **)(i + 88), (const xmlChar *)p_nsDef[2]))
                    goto LABEL_56;
                  v16 = elem->name;
                  v18 = (uint64_t)v5;
                  v19 = elem;
                  v20 = 507;
                  v21 = "Element %s namespace name for default namespace does not match the DTD\n";
                  v17 = 0;
                  goto LABEL_54;
                }
              }
              continue;
            }
            v14 = *(const xmlChar **)(i + 104);
          }
          if (xmlStrEqual(v14, (const xmlChar *)"xmlns"))
          {
            v15 = &elem->nsDef;
            while (1)
            {
              v15 = (xmlNs **)*v15;
              if (!v15)
                break;
              if (xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)v15[3]))
              {
                if (xmlStrEqual(*(const xmlChar **)(i + 88), (const xmlChar *)v15[2]))
                  break;
                v16 = elem->name;
                v17 = (xmlChar *)v15[3];
                v18 = (uint64_t)v5;
                v19 = elem;
                v20 = 508;
                v21 = "Element %s namespace name for %s does not match the DTD\n";
                goto LABEL_54;
              }
            }
          }
        }
        else if (v11 == 2)
        {
          v12 = *(const xmlChar **)(i + 104);
          if (!v12)
          {
            v22 = xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"xmlns");
            v23 = &elem->nsDef;
            if (v22)
            {
              while (1)
              {
                v23 = (xmlNs **)*v23;
                if (!v23)
                  goto LABEL_51;
                if (!v23[3])
                  goto LABEL_56;
              }
            }
            v12 = *(const xmlChar **)(i + 104);
          }
          if (xmlStrEqual(v12, (const xmlChar *)"xmlns"))
          {
            v13 = &elem->nsDef;
            while (1)
            {
              v13 = (xmlNs **)*v13;
              if (!v13)
                break;
              if (xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)v13[3]))
                goto LABEL_56;
            }
LABEL_51:
            v17 = *(xmlChar **)(i + 104);
            v16 = elem->name;
            v30 = *(xmlChar **)(i + 16);
            v18 = (uint64_t)v5;
            v19 = elem;
            v20 = 518;
            if (v17)
            {
              v21 = "Element %s does not carry attribute %s:%s\n";
            }
            else
            {
              v21 = "Element %s does not carry attribute %s\n";
              v17 = *(xmlChar **)(i + 16);
LABEL_54:
              v30 = 0;
            }
            xmlErrValidNode(v18, (uint64_t)v19, v20, v21, v16, v17, v30);
            v6 = 0;
            continue;
          }
          properties = elem->properties;
          if (!properties)
            goto LABEL_51;
          v27 = -1;
          do
          {
            if (xmlStrEqual(properties->name, *(const xmlChar **)(i + 16)))
            {
              v28 = *(const xmlChar **)(i + 104);
              if (!v28)
                goto LABEL_56;
              v29 = properties->ns;
              if (v29 || (v29 = elem->ns) != 0)
              {
                if (xmlStrEqual(v29->prefix, v28))
                  goto LABEL_56;
                v27 = 1;
              }
              else
              {
                v27 &= ~(v27 >> 31);
              }
            }
            properties = properties->next;
          }
          while (properties);
          if (v27)
          {
            if (v27 == -1)
              goto LABEL_51;
            v31 = elem->name;
            v32 = *(xmlChar **)(i + 104);
            v33 = *(xmlChar **)(i + 16);
            v34 = (uint64_t)v5;
            v35 = elem;
            v36 = 506;
            v37 = "Element %s required attribute %s:%s has different prefix\n";
          }
          else
          {
            v31 = elem->name;
            v32 = *(xmlChar **)(i + 104);
            v33 = *(xmlChar **)(i + 16);
            v34 = (uint64_t)v5;
            v35 = elem;
            v36 = 524;
            v37 = "Element %s required attribute %s:%s has no prefix\n";
          }
          xmlErrValidWarning(v34, (uint64_t)v35, v36, v37, v31, v32, v33);
        }
LABEL_56:
        ;
      }
      return v6;
    case 4:
      if (doc->standalone != 1)
        goto LABEL_133;
      if (v64 != 1)
        goto LABEL_133;
      v48 = elem->children;
      if (!v48)
        goto LABEL_133;
      do
      {
        if (v48->type == XML_TEXT_NODE)
        {
          for (j = v48->content; ; ++j)
          {
            v50 = *j;
            if (v50 > 0x20)
              break;
            if (((1 << v50) & 0x100002600) == 0)
            {
              if (*j)
                break;
              xmlErrValidNode((uint64_t)v5, (uint64_t)elem, 532, "standalone: %s declared in the external subset contains white spaces nodes\n", elem->name, 0, 0);
              v6 = 0;
              goto LABEL_133;
            }
          }
        }
        v48 = v48->next;
      }
      while (v48);
      v6 = 1;
LABEL_133:
      v63 = xmlValidateElementContent((uint64_t)v5, (uint64_t)elem->children);
      if (v63 < 1)
        v6 = v63;
      goto LABEL_11;
    default:
      goto LABEL_11;
  }
}

uint64_t xmlValidateOneCdataElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  if (!a1 || *(_DWORD *)(a2 + 8) != 1)
    return 0;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    while (1)
    {
      v4 = 0;
      v5 = *(_DWORD *)(v3 + 8);
      if (v5 > 8)
        break;
      if (((1 << v5) & 0x198) != 0)
        goto LABEL_6;
      if (v5 != 5)
        break;
      v10 = *(_QWORD *)(v3 + 24);
      if (v10 && *(_QWORD *)(v10 + 24))
      {
        nodeVPush(a1, v3);
        v3 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 24);
      }
      else
      {
LABEL_6:
        while (1)
        {
          v3 = *(_QWORD *)(v3 + 48);
          if (v3)
            break;
          v6 = *(_DWORD *)(a1 + 32);
          v7 = v6 - 1;
          if (v6 >= 1)
          {
            *(_DWORD *)(a1 + 32) = v7;
            v8 = *(_QWORD *)(a1 + 40);
            v9 = v6 == 1 ? 0 : *(_QWORD *)(v8 + 8 * (v6 - 2));
            *(_QWORD *)(a1 + 24) = v9;
            v3 = *(_QWORD *)(v8 + 8 * v7);
            *(_QWORD *)(v8 + 8 * v7) = 0;
            if (v3)
              continue;
          }
          goto LABEL_18;
        }
      }
      if (!v3)
        goto LABEL_18;
    }
  }
  else
  {
LABEL_18:
    v4 = 1;
  }
  *(_QWORD *)(a1 + 32) = 0;
  v11 = *(void **)(a1 + 40);
  if (v11)
  {
    xmlFree(v11);
    *(_QWORD *)(a1 + 40) = 0;
  }
  return v4;
}

uint64_t xmlValidateElementContent(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  xmlElement *v4;
  uint64_t v5;
  uint64_t v6;
  xmlElement *v7;
  uint64_t v8;
  uint64_t v9;
  xmlElementContent *content;
  const xmlChar *name;
  xmlRegexp *contModel;
  int valid;
  xmlRegExecCtxtPtr v14;
  xmlRegExecCtxt *v15;
  uint64_t v16;
  uint64_t v17;
  xmlChar *v18;
  xmlChar *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const char *v27;
  xmlChar *p_s;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  const xmlChar *v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  const xmlChar *v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  void *v47;
  char __s;
  _BYTE v50[4999];
  xmlChar v51[48];
  __int16 v52;
  uint64_t v53;

  v2 = MEMORY[0x1E0C80A78](a1, a2);
  v53 = *MEMORY[0x1E0C80C00];
  if (!v2)
    return 0xFFFFFFFFLL;
  v6 = v5;
  v7 = v4;
  v8 = v3;
  v9 = v2;
  content = v4->content;
  name = v4->name;
  contModel = v4->contModel;
  if (contModel)
  {
    valid = 1;
  }
  else
  {
    valid = xmlValidBuildContentModel((xmlValidCtxtPtr)v9, v4);
    contModel = v7->contModel;
    if (!contModel)
      return 0xFFFFFFFFLL;
  }
  if (!xmlRegexpIsDeterminist(contModel))
    return 0xFFFFFFFFLL;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  v14 = xmlRegNewExecCtxt(v7->contModel, 0, 0);
  if (v14)
  {
    v15 = v14;
    if (v8)
    {
      v16 = v8;
      do
      {
        valid = 0;
        switch(*(_DWORD *)(v16 + 8))
        {
          case 1:
            v17 = *(_QWORD *)(v16 + 72);
            if (!v17 || !*(_QWORD *)(v17 + 24))
            {
              xmlRegExecPushString(v15, *(const xmlChar **)(v16 + 16), 0);
              break;
            }
            v52 = 0;
            memset(v51, 0, sizeof(v51));
            v18 = xmlBuildQName(*(const xmlChar **)(v16 + 16), *(const xmlChar **)(v17 + 24), v51, 50);
            if (v18)
            {
              v19 = v18;
              xmlRegExecPushString(v15, v18, 0);
              if (v19 != v51 && v19 != *(xmlChar **)(v16 + 16))
                xmlFree(v19);
              break;
            }
            valid = -1;
            goto LABEL_31;
          case 3:
            if (xmlIsBlankNode((const xmlNode *)v16))
              break;
            valid = 0;
            goto LABEL_31;
          case 4:
            goto LABEL_31;
          case 5:
            v20 = *(_QWORD *)(v16 + 24);
            if (!v20 || !*(_QWORD *)(v20 + 24))
              break;
            nodeVPush(v9, v16);
            v16 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 24);
            continue;
          default:
            break;
        }
        while (1)
        {
          v16 = *(_QWORD *)(v16 + 48);
          if (v16)
            break;
          v21 = *(_DWORD *)(v9 + 32);
          v22 = v21 - 1;
          if (v21 >= 1)
          {
            *(_DWORD *)(v9 + 32) = v22;
            v23 = *(_QWORD *)(v9 + 40);
            v24 = v21 == 1 ? 0 : *(_QWORD *)(v23 + 8 * (v21 - 2));
            *(_QWORD *)(v9 + 24) = v24;
            v16 = *(_QWORD *)(v23 + 8 * v22);
            *(_QWORD *)(v23 + 8 * v22) = 0;
            if (v16)
              continue;
          }
          goto LABEL_30;
        }
      }
      while (v16);
    }
LABEL_30:
    valid = xmlRegExecPushString(v15, 0, 0);
LABEL_31:
    xmlRegFreeExecCtxt(v15);
  }
  v25 = 1;
  if (valid == -3 || valid == 1)
    goto LABEL_71;
  bzero(&v51[1], 0x1387uLL);
  bzero(v50, 0x1387uLL);
  v51[0] = 0;
  xmlSnprintfElementContent((char *)v51, 5000, content, 1);
  __s = 0;
  if (v8)
  {
    v26 = strlen(&__s);
    if (v26 < 4998)
    {
      __strncat_chk();
      v33 = v26 + 1;
      while (v33 < 4951)
      {
        v34 = 5000 - v33;
        switch(*(_DWORD *)(v8 + 8))
        {
          case 1:
            v37 = *(_QWORD *)(v8 + 48);
            v38 = *(_QWORD *)(v8 + 72);
            if (v38)
            {
              v39 = *(const xmlChar **)(v38 + 24);
              if (v39)
              {
                v40 = xmlStrlen(v39);
                if (v37)
                  v41 = 4;
                else
                  v41 = 3;
                if (v34 < v40 + v41)
                  goto LABEL_67;
                v42 = v40;
                __strncat_chk();
                v43 = v42 + v33;
                __strncat_chk();
                v33 += v42 + 1;
                v34 = 4999 - v43;
              }
            }
            v44 = xmlStrlen(*(const xmlChar **)(v8 + 16));
            if (v37)
              v45 = 3;
            else
              v45 = 2;
            if (v34 < v44 + v45)
              goto LABEL_67;
            v46 = v44;
            __strncat_chk();
            v33 += v46;
            if (*(_QWORD *)(v8 + 48))
            {
              __strncat_chk();
              v33 += v37 != 0;
            }
            break;
          case 2:
          case 9:
          case 0xA:
          case 0xB:
          case 0xC:
          case 0xD:
          case 0x12:
          case 0x15:
            v35 = *(_QWORD *)(v8 + 48);
            __strncat_chk();
            v36 = v33 + 3;
            if (!*(_QWORD *)(v8 + 48))
              goto LABEL_64;
            goto LABEL_61;
          case 3:
            if (!xmlIsBlankNode((const xmlNode *)v8))
              goto LABEL_60;
            break;
          case 4:
          case 5:
LABEL_60:
            v35 = *(_QWORD *)(v8 + 48);
            __strncat_chk();
            v36 = v33 + 5;
            if (*(_QWORD *)(v8 + 48))
            {
LABEL_61:
              __strncat_chk();
              if (v35)
                v33 = v36 + 1;
              else
                v33 = v36;
            }
            else
            {
LABEL_64:
              v33 = v36;
            }
            break;
          default:
            break;
        }
        v8 = *(_QWORD *)(v8 + 48);
        if (!v8)
        {
          __strncat_chk();
          v50[4998] = 0;
          goto LABEL_68;
        }
      }
LABEL_67:
      terminateBufferTooSmall(&__s, 5000);
LABEL_68:
      if (name)
        goto LABEL_38;
LABEL_69:
      v27 = "Element content does not follow the DTD, expecting %s, got %s\n";
      v32 = v51;
      p_s = (xmlChar *)&__s;
      v30 = v9;
      v31 = v6;
      v29 = 0;
      goto LABEL_70;
    }
    terminateBufferTooSmall(&__s, 5000);
  }
  if (!name)
    goto LABEL_69;
LABEL_38:
  v27 = "Element %s content does not follow the DTD, expecting %s, got %s\n";
  p_s = v51;
  v29 = &__s;
  v30 = v9;
  v31 = v6;
  v32 = name;
LABEL_70:
  xmlErrValidNode(v30, v31, 504, v27, v32, p_s, (xmlChar *)v29);
  v25 = 0;
LABEL_71:
  *(_QWORD *)(v9 + 32) = 0;
  v47 = *(void **)(v9 + 40);
  if (v47)
  {
    xmlFree(v47);
    *(_QWORD *)(v9 + 40) = 0;
  }
  return v25;
}

int xmlValidateRoot(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
{
  xmlNodePtr RootElement;
  uint64_t v5;
  const xmlChar *v6;
  _xmlDtd *intSubset;
  const xmlChar *name;
  uint64_t v10;
  const xmlChar *v11;
  xmlChar *v12;
  xmlChar *v13;
  int v14;
  _OWORD v15[3];
  __int16 v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!doc)
    return 0;
  RootElement = xmlDocGetRootElement(doc);
  if (RootElement && (v5 = (uint64_t)RootElement, (v6 = RootElement->name) != 0))
  {
    intSubset = doc->intSubset;
    if (!intSubset)
      return 1;
    name = intSubset->name;
    if (!name || xmlStrEqual(name, v6))
      return 1;
    v10 = *(_QWORD *)(v5 + 72);
    if (v10)
    {
      v11 = *(const xmlChar **)(v10 + 24);
      if (v11)
      {
        v16 = 0;
        memset(v15, 0, sizeof(v15));
        v12 = xmlBuildQName(*(const xmlChar **)(v5 + 16), v11, (xmlChar *)v15, 50);
        if (!v12)
        {
          xmlVErrMemory((uint64_t)ctxt, 0);
          return 0;
        }
        v13 = v12;
        v14 = xmlStrEqual(doc->intSubset->name, v12);
        if (v13 != (xmlChar *)v15 && v13 != *(xmlChar **)(v5 + 16))
          xmlFree(v13);
        if (v14 == 1)
          return 1;
      }
    }
    if (xmlStrEqual(doc->intSubset->name, (const xmlChar *)"HTML")
      && xmlStrEqual(*(const xmlChar **)(v5 + 16), (const xmlChar *)"html"))
    {
      return 1;
    }
    xmlErrValidNode((uint64_t)ctxt, v5, 531, "root and DTD name do not match '%s' and '%s'\n", *(const xmlChar **)(v5 + 16), (xmlChar *)doc->intSubset->name, 0);
  }
  else
  {
    xmlErrValid_0((uint64_t)ctxt, 525, "no root element\n", 0);
  }
  return 0;
}

int xmlValidateElement(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlNodePtr elem)
{
  int v3;
  xmlNode *children;
  xmlNode *v8;
  xmlAttr *i;
  xmlChar *String;
  int v11;
  xmlNs *j;
  xmlNs *ns;
  const xmlChar *prefix;

  v3 = 0;
  if (doc && elem)
  {
    if (*(_OWORD *)&doc->intSubset == 0)
    {
      return 0;
    }
    else
    {
      v3 = 1;
      children = elem;
      do
      {
LABEL_6:
        v8 = children;
        v3 &= xmlValidateOneElement(ctxt, doc, children);
        if (v8->type != XML_ELEMENT_NODE)
          break;
        for (i = v8->properties; i; i = i->next)
        {
          String = xmlNodeListGetString(doc, i->children, 0);
          v11 = xmlValidateOneAttribute(ctxt, doc, v8, i, String);
          if (String)
            xmlFree(String);
          v3 &= v11;
        }
        for (j = v8->nsDef; j; j = j->next)
        {
          ns = v8->ns;
          if (ns)
            prefix = ns->prefix;
          else
            prefix = 0;
          v3 &= xmlValidateOneNamespace(ctxt, doc, v8, prefix, j, j->href);
        }
        children = v8->children;
      }
      while (children);
      while (v8 != elem)
      {
        children = v8->next;
        if (children)
          goto LABEL_6;
        v8 = v8->parent;
      }
    }
  }
  return v3;
}

int xmlValidateDocumentFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
{
  xmlValidCtxtPtr v2;
  unsigned int finishDtd;
  xmlHashTable *refs;

  if (ctxt)
  {
    v2 = ctxt;
    if (doc)
    {
      finishDtd = ctxt->finishDtd;
      ctxt->finishDtd = 0;
      refs = (xmlHashTable *)doc->refs;
      v2->doc = doc;
      v2->valid = 1;
      xmlHashScan(refs, (xmlHashScanner)xmlValidateCheckRefCallback, v2);
      v2->finishDtd = finishDtd;
      LODWORD(ctxt) = v2->valid;
    }
    else
    {
      xmlErrValid_0((uint64_t)ctxt, 521, "xmlValidateDocumentFinal: doc == NULL\n", 0);
      LODWORD(ctxt) = 0;
    }
  }
  return (int)ctxt;
}

void xmlValidateCheckRefCallback(xmlList *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v3[2];

  if (a1)
  {
    v3[0] = a2;
    v3[1] = a3;
    xmlListWalk(a1, (xmlListWalker)xmlWalkValidateList, v3);
  }
}

int xmlValidateDtd(xmlValidCtxtPtr ctxt, xmlDocPtr doc, xmlDtdPtr dtd)
{
  int result;
  xmlHashTable *ids;
  xmlHashTable *refs;
  xmlNode *RootElement;
  int v9;
  __int128 v10;

  result = 0;
  if (doc && dtd)
  {
    v10 = *(_OWORD *)&doc->intSubset;
    doc->intSubset = 0;
    doc->extSubset = dtd;
    result = xmlValidateRoot(ctxt, doc);
    if (result)
    {
      ids = (xmlHashTable *)doc->ids;
      if (ids)
      {
        xmlHashFree(ids, (xmlHashDeallocator)xmlFreeIDTableEntry);
        doc->ids = 0;
      }
      refs = (xmlHashTable *)doc->refs;
      if (refs)
      {
        xmlHashFree(refs, (xmlHashDeallocator)xmlFreeRefTableEntry);
        doc->refs = 0;
      }
      RootElement = xmlDocGetRootElement(doc);
      v9 = xmlValidateElement(ctxt, doc, RootElement);
      result = xmlValidateDocumentFinal(ctxt, doc) & v9;
    }
    *(_OWORD *)&doc->intSubset = v10;
  }
  return result;
}

int xmlValidateDtdFinal(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
{
  int result;
  _xmlDtd *intSubset;
  int *p_valid;
  xmlHashTable *attributes;
  xmlHashTable *entities;
  _xmlDtd *extSubset;
  xmlHashTable *v10;
  xmlHashTable *v11;

  result = 0;
  if (ctxt && doc)
  {
    intSubset = doc->intSubset;
    if (intSubset)
    {
      ctxt->valid = 1;
      p_valid = &ctxt->valid;
      ctxt->doc = doc;
      attributes = (xmlHashTable *)intSubset->attributes;
      if (attributes)
        xmlHashScan(attributes, (xmlHashScanner)xmlValidateAttributeCallback, ctxt);
      entities = (xmlHashTable *)intSubset->entities;
      if (entities)
        xmlHashScan(entities, (xmlHashScanner)xmlValidateNotationCallback, ctxt);
    }
    else
    {
      if (!doc->extSubset)
        return 0;
      ctxt->valid = 1;
      p_valid = &ctxt->valid;
      ctxt->doc = doc;
    }
    extSubset = doc->extSubset;
    if (extSubset)
    {
      v10 = (xmlHashTable *)extSubset->attributes;
      if (v10)
        xmlHashScan(v10, (xmlHashScanner)xmlValidateAttributeCallback, ctxt);
      v11 = (xmlHashTable *)extSubset->entities;
      if (v11)
        xmlHashScan(v11, (xmlHashScanner)xmlValidateNotationCallback, ctxt);
    }
    return *p_valid;
  }
  return result;
}

_DWORD *xmlValidateAttributeCallback(_DWORD *result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  xmlChar *v6;
  uint64_t **i;
  const xmlChar *v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v3 = (uint64_t)result;
    v4 = result[20];
    if (v4 <= 0xA && ((1 << v4) & 0x460) != 0)
    {
      v6 = (xmlChar *)*((_QWORD *)result + 11);
      if (v6)
      {
        result = (_DWORD *)xmlValidateAttributeValue2(a2, *(xmlDoc **)(a2 + 56), *((const xmlChar **)result + 2), v4, v6);
        if (!(_DWORD)result && *(_DWORD *)(a2 + 64) == 1)
          *(_DWORD *)(a2 + 64) = 0;
      }
      for (i = *(uint64_t ***)(v3 + 96); i; i = (uint64_t **)*i)
      {
        result = (_DWORD *)xmlValidateAttributeValue2(a2, *(xmlDoc **)(a2 + 56), *(const xmlChar **)(v3 + 16), *(_DWORD *)(v3 + 80), (xmlChar *)i[1]);
        if (!(_DWORD)result && *(_DWORD *)(a2 + 64) == 1)
          *(_DWORD *)(a2 + 64) = 0;
      }
      v4 = *(_DWORD *)(v3 + 80);
    }
    if (v4 == 10)
    {
      v8 = *(const xmlChar **)(v3 + 112);
      if (v8)
      {
        v9 = *(_QWORD *)(v3 + 64);
        if (v9
          && ((result = xmlGetDtdElementDesc(*(xmlDtdPtr *)(v9 + 80), v8)) != 0
           || (result = xmlGetDtdElementDesc(*(xmlDtdPtr *)(v9 + 88), *(const xmlChar **)(v3 + 112))) != 0)
          || (v10 = *(_QWORD *)(v3 + 40)) != 0
          && *(_DWORD *)(v10 + 8) == 14
          && (result = xmlGetDtdElementDesc((xmlDtdPtr)v10, *(const xmlChar **)(v3 + 112))) != 0)
        {
          if (result[18] == 1)
          {
            result = xmlErrValidNode(a2, 0, 510, "NOTATION attribute %s declared for EMPTY element %s\n", *(const xmlChar **)(v3 + 16), *(xmlChar **)(v3 + 112), 0);
            *(_DWORD *)(a2 + 64) = 0;
          }
        }
        else
        {
          return xmlErrValidNode(a2, 0, 534, "attribute %s: could not find decl for element %s\n", *(const xmlChar **)(v3 + 16), *(xmlChar **)(v3 + 112), 0);
        }
      }
      else
      {
        return xmlErrValid_0(a2, 1, "xmlValidateAttributeCallback(%s): internal error\n", *(const xmlChar **)(v3 + 16));
      }
    }
  }
  return result;
}

uint64_t xmlValidateNotationCallback(uint64_t result, xmlValidCtxtPtr ctxt)
{
  const xmlChar *v2;

  if (result)
  {
    if (*(_DWORD *)(result + 92) == 3)
    {
      v2 = *(const xmlChar **)(result + 80);
      if (v2)
      {
        result = xmlValidateNotationUse(ctxt, *(xmlDocPtr *)(result + 64), v2);
        if ((_DWORD)result != 1)
          ctxt->valid = 0;
      }
    }
  }
  return result;
}

int xmlValidateDocument(xmlValidCtxtPtr ctxt, xmlDocPtr doc)
{
  xmlValidCtxt *v3;
  _xmlDtd *intSubset;
  const xmlChar *SystemID;
  xmlChar *v6;
  _xmlDtd *v7;
  xmlChar *v8;
  int result;
  const char *v10;
  int v11;
  const xmlChar *ExternalID;
  const xmlChar *v13;
  _xmlDtd *v14;
  xmlHashTable *ids;
  xmlHashTable *refs;
  int v17;
  xmlNode *RootElement;
  int v19;
  _xmlDtd *v20;

  if (!doc)
    return 0;
  v3 = ctxt;
  intSubset = doc->intSubset;
  if (intSubset)
  {
    SystemID = intSubset->SystemID;
    if (SystemID)
    {
      if (!doc->extSubset)
      {
        v6 = xmlBuildURI(SystemID, doc->URL);
        v7 = doc->intSubset;
        if (!v6)
        {
          ExternalID = v7->SystemID;
          v10 = "Could not build URI for external subset \"%s\"\n";
LABEL_24:
          ctxt = v3;
          v11 = 517;
          goto LABEL_25;
        }
        v8 = v6;
        doc->extSubset = xmlParseDTD(v7->ExternalID, v6);
        xmlFree(v8);
        if (!doc->extSubset)
        {
LABEL_21:
          v20 = doc->intSubset;
          ExternalID = v20->SystemID;
          if (!ExternalID)
            ExternalID = v20->ExternalID;
          v10 = "Could not load the external subset \"%s\"\n";
          goto LABEL_24;
        }
      }
    }
    else
    {
      v13 = intSubset->ExternalID;
      if (v13)
      {
        if (!doc->extSubset)
        {
          v14 = xmlParseDTD(v13, 0);
          doc->extSubset = v14;
          if (!v14)
            goto LABEL_21;
        }
      }
    }
  }
  else if (!doc->extSubset)
  {
    v10 = "no DTD found!\n";
    v11 = 522;
    ExternalID = 0;
LABEL_25:
    xmlErrValid_0((uint64_t)ctxt, v11, v10, ExternalID);
    return 0;
  }
  ids = (xmlHashTable *)doc->ids;
  if (ids)
  {
    xmlHashFree(ids, (xmlHashDeallocator)xmlFreeIDTableEntry);
    doc->ids = 0;
  }
  refs = (xmlHashTable *)doc->refs;
  if (refs)
  {
    xmlHashFree(refs, (xmlHashDeallocator)xmlFreeRefTableEntry);
    doc->refs = 0;
  }
  v17 = xmlValidateDtdFinal(v3, doc);
  result = xmlValidateRoot(v3, doc);
  if (result)
  {
    RootElement = xmlDocGetRootElement(doc);
    v19 = xmlValidateElement(v3, doc, RootElement);
    return v19 & v17 & xmlValidateDocumentFinal(v3, doc);
  }
  return result;
}

int xmlValidGetPotentialChildren(xmlElementContent *ctree, const xmlChar **names, int *len, int max)
{
  int result;
  uint64_t v9;
  uint64_t v10;
  const xmlChar *name;
  uint64_t v12;

  result = -1;
  if (ctree)
  {
    if (names)
    {
      if (len)
      {
        result = *len;
        if (*len < max)
        {
          v9 = result;
          switch(ctree->type)
          {
            case XML_ELEMENT_CONTENT_PCDATA:
              if (result < 1)
                goto LABEL_12;
              v10 = 0;
              while (!xmlStrEqual((const xmlChar *)"#PCDATA", names[v10]))
              {
                ++v10;
                result = *len;
                if (v10 >= *len)
                {
                  v9 = result;
LABEL_12:
                  *len = result + 1;
                  name = (const xmlChar *)"#PCDATA";
                  goto LABEL_19;
                }
              }
              return *len;
            case XML_ELEMENT_CONTENT_ELEMENT:
              if (result <= 0)
                goto LABEL_18;
              v12 = 0;
              break;
            case XML_ELEMENT_CONTENT_SEQ:
            case XML_ELEMENT_CONTENT_OR:
              xmlValidGetPotentialChildren(ctree->c1, names, len, max);
              xmlValidGetPotentialChildren(ctree->c2, names, len, max);
              return *len;
            default:
              return *len;
          }
          while (!xmlStrEqual(ctree->name, names[v12]))
          {
            ++v12;
            result = *len;
            if (v12 >= *len)
            {
              v9 = result;
LABEL_18:
              name = ctree->name;
              *len = result + 1;
LABEL_19:
              names[v9] = name;
              return *len;
            }
          }
          return *len;
        }
      }
    }
  }
  return result;
}

int xmlValidGetValidElements(xmlNode *prev, xmlNode *next, const xmlChar **names, int max)
{
  uint64_t v4;
  int v8;
  xmlNode *v9;
  _xmlNode *parent;
  xmlElementPtr DtdElementDesc;
  _xmlNode *v12;
  _xmlNode *v13;
  xmlDtd *extSubset;
  xmlNodePtr v15;
  xmlNode *v16;
  _xmlNode **p_last;
  _xmlNode **p_next;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  BOOL v24;
  _xmlNode **p_prev;
  _xmlNode *v27;
  const xmlChar *name;
  xmlNode *v29;
  __int128 v30;
  int len;
  xmlValidCtxt ctxt;
  xmlChar *namesa[258];

  v4 = *(_QWORD *)&max;
  namesa[256] = *(xmlChar **)MEMORY[0x1E0C80C00];
  bzero(namesa, 0x800uLL);
  len = 0;
  v8 = -1;
  if (!((unint64_t)prev | (unint64_t)next) || !names || (int)v4 < 1)
    return v8;
  memset(&ctxt.warning, 0, 96);
  ctxt.userData = 0;
  ctxt.error = (xmlValidityErrorFunc)xmlNoValidityErr;
  if (prev)
    v9 = prev;
  else
    v9 = next;
  parent = v9->parent;
  DtdElementDesc = xmlGetDtdElementDesc(parent->doc->intSubset, parent->name);
  if (!DtdElementDesc)
  {
    extSubset = parent->doc->extSubset;
    if (!extSubset)
      return -1;
    DtdElementDesc = xmlGetDtdElementDesc(extSubset, parent->name);
    if (!DtdElementDesc)
      return -1;
  }
  if (prev)
  {
    v12 = prev->next;
    if (next)
    {
LABEL_10:
      v13 = next->prev;
      goto LABEL_16;
    }
  }
  else
  {
    v12 = 0;
    if (next)
      goto LABEL_10;
  }
  v13 = 0;
LABEL_16:
  v30 = *(_OWORD *)&parent->children;
  v15 = xmlNewDocNode(v9->doc, 0, (const xmlChar *)"<!dummy?>", 0);
  if (!v15)
    return -1;
  v16 = v15;
  p_last = &parent->last;
  v15->next = next;
  v15->prev = prev;
  v15->parent = parent;
  v27 = v12;
  name = v15->name;
  p_next = &prev->next;
  if (!prev)
    p_next = &parent->children;
  *p_next = v15;
  v29 = next;
  p_prev = &next->prev;
  if (next)
    p_last = &next->prev;
  *p_last = v15;
  len = xmlValidGetPotentialChildren(DtdElementDesc->content, (const xmlChar **)namesa, &len, 256);
  if (len < 1)
  {
    v8 = 0;
    if (!prev)
      goto LABEL_37;
  }
  else
  {
    v19 = 0;
    v8 = 0;
    do
    {
      v16->name = namesa[v19];
      if (xmlValidateOneElement(&ctxt, parent->doc, parent))
      {
        if (v8 <= 0)
        {
          v22 = v8;
        }
        else
        {
          v20 = v4;
          v21 = 0;
          v22 = v8;
          do
          {
            if (xmlStrEqual(namesa[v19], names[v21++]))
              v24 = 1;
            else
              v24 = v21 >= v8;
          }
          while (!v24);
          v4 = v20;
        }
        ++v8;
        names[v22] = namesa[v19];
        if (v8 >= (int)v4)
          break;
      }
      ++v19;
    }
    while (v19 < len);
    if (!prev)
      goto LABEL_37;
  }
  prev->next = v27;
LABEL_37:
  if (v29)
    *p_prev = v13;
  *(_OWORD *)&parent->children = v30;
  v16->name = name;
  xmlFreeNode(v16);
  return v8;
}

uint64_t xmlIsDocNameStartChar(uint64_t a1, signed int val)
{
  uint64_t result;
  int32x4_t v4;
  _BOOL4 v6;
  int v7;
  unsigned int v8;

  if (!a1 || (*(_BYTE *)(a1 + 172) & 4) == 0)
  {
    if ((val & 0xFFFFFFDF) - 65 >= 0x1A)
    {
      result = 1;
      if (val == 58)
        return result;
      if (val == 95)
        return result;
      v4 = vdupq_n_s32(val);
      if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32((uint32x4_t)xmmword_1B08622B0, (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_1B0862290)), (int16x8_t)vcgtq_u32((uint32x4_t)xmmword_1B08622C0, (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_1B08622A0))))) & 1) != 0|| (val - 63744) < 0x4D0|| (val - 65008) < 0x20E|| (val - 0x10000) < 0xE0000|| (val & 0xFFFFFFFE) == 0x200C)
      {
        return result;
      }
      return 0;
    }
    return 1;
  }
  if (val > 255)
  {
    if (xmlCharInRange(val, &xmlIsBaseCharGroup))
      return 1;
    result = 1;
    if ((val - 12321) >= 9 && val != 12295 && (val - 19968) >= 0x51A6)
      return 0;
  }
  else
  {
    v6 = val == 95 || val == 58;
    v7 = (val - 216) < 0x1F || v6;
    if (val > 247)
      v7 = 1;
    if ((val & 0xFFFFFFDF) - 65 >= 0x1A)
      v8 = v7;
    else
      v8 = 1;
    if ((val - 192) >= 0x17)
      return v8;
    else
      return 1;
  }
  return result;
}

uint64_t xmlIsDocNameChar(uint64_t a1, signed int val)
{
  uint64_t result;
  int32x4_t v4;

  if (a1 && (*(_BYTE *)(a1 + 172) & 4) != 0)
  {
    if (val > 255)
    {
      if (xmlCharInRange(val, &xmlIsBaseCharGroup))
        return 1;
      result = 1;
      if ((val - 12321) < 9 || val == 12295 || (val - 19968) < 0x51A6)
        return result;
      if (xmlCharInRange(val, &xmlIsDigitGroup))
        return 1;
    }
    else
    {
      result = 1;
      if ((val - 192) < 0x17
        || (val & 0xFFFFFFDF) - 65 < 0x1A
        || (val - 48) < 0xA
        || val > 247
        || (val - 216) < 0x1F)
      {
        return result;
      }
    }
    if ((val - 45) <= 0x32 && ((1 << (val - 45)) & 0x4000000002003) != 0)
      return 1;
    if (val >= 256)
    {
      if (xmlCharInRange(val, &xmlIsCombiningGroup) || xmlCharInRange(val, &xmlIsExtenderGroup))
        return 1;
    }
    else if (val == 183)
    {
      return 1;
    }
    return 0;
  }
  result = 1;
  if ((val - 48) >= 0xB
    && (val & 0xFFFFFFDF) - 65 >= 0x1A
    && ((val - 45) > 0x32 || ((1 << (val - 45)) & 0x4000000000003) == 0)
    && val != 183)
  {
    v4 = vdupq_n_s32(val);
    if ((vmaxv_u8((uint8x8_t)vmovn_s16(vuzp1q_s16((int16x8_t)vcgtq_u32((uint32x4_t)xmmword_1B08622F0, (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_1B08622D0)), (int16x8_t)vcgtq_u32((uint32x4_t)xmmword_1B0862300, (uint32x4_t)vaddq_s32(v4, (int32x4_t)xmmword_1B08622E0))))) & 1) == 0&& (val - 63744) >= 0x4D0&& (val - 65008) >= 0x20E&& (val - 0x10000) >= 0xE0000&& (val & 0xFFFFFFFE) != 0x200C)
    {
      return 0;
    }
  }
  return result;
}

_DWORD *nodeVPush(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  int v6;
  _DWORD *result;

  v4 = *(_DWORD *)(a1 + 36);
  if (v4 <= 0)
  {
    *(_DWORD *)(a1 + 36) = 4;
    v5 = xmlMalloc(0x20uLL);
    *(_QWORD *)(a1 + 40) = v5;
    if (!v5)
    {
      result = xmlVErrMemory(a1, (const xmlChar *)"malloc failed");
      *(_DWORD *)(a1 + 36) = 0;
      return result;
    }
    v4 = *(_DWORD *)(a1 + 36);
  }
  v6 = *(_DWORD *)(a1 + 32);
  if (v6 < v4)
  {
    result = *(_DWORD **)(a1 + 40);
LABEL_8:
    *(_QWORD *)&result[2 * v6] = a2;
    *(_QWORD *)(a1 + 24) = a2;
    *(_DWORD *)(a1 + 32) = v6 + 1;
    return result;
  }
  result = xmlRealloc(*(void **)(a1 + 40), 16 * v4);
  if (result)
  {
    v6 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a1 + 36) *= 2;
    *(_QWORD *)(a1 + 40) = result;
    goto LABEL_8;
  }
  return xmlVErrMemory(a1, (const xmlChar *)"realloc failed");
}

uint64_t xmlWalkValidateList(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  xmlChar *v4;
  uint64_t v5;
  int v6;
  xmlChar *v7;
  xmlChar *v8;
  unsigned int v9;
  xmlChar *v10;
  xmlChar *v11;
  unsigned int v12;
  unsigned int v13;
  xmlChar *v14;
  xmlChar *v15;
  unsigned int v16;
  xmlChar *v17;
  xmlChar *v18;
  unsigned int v19;
  unsigned int v20;

  if (a1)
  {
    v3 = *(_QWORD *)a2;
    v4 = *(xmlChar **)(a2 + 8);
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v6 = *(_DWORD *)(v5 + 80);
      if (v6 == 4)
      {
        v14 = xmlStrdup(*(const xmlChar **)(a2 + 8));
        if (!v14)
        {
          xmlVErrMemory(v3, (const xmlChar *)"IDREFS split");
          goto LABEL_41;
        }
        v15 = v14;
        v16 = *v14;
        if (*v14)
        {
          v17 = v14;
LABEL_27:
          while (1)
          {
            v18 = v17;
            while (v16 > 0x20 || ((1 << v16) & 0x100002601) == 0)
            {
              v19 = *++v18;
              v16 = v19;
            }
            *v18 = 0;
            if (!xmlGetID(*(xmlDocPtr *)(v3 + 56), v17))
            {
              xmlErrValidNode(v3, *(_QWORD *)(v5 + 40), 536, "IDREFS attribute %s references an unknown ID \"%s\"\n", *(const xmlChar **)(v5 + 16), v17, 0);
              *(_DWORD *)(v3 + 64) = 0;
            }
            if (!v16)
              break;
            *v18 = v16;
            v17 = v18;
            while (v16 <= 0x20)
            {
              if (((1 << v16) & 0x100002600) == 0)
              {
                if (v16)
                  goto LABEL_27;
                goto LABEL_39;
              }
              v20 = *++v17;
              v16 = v20;
            }
          }
        }
LABEL_39:
        ((void (*)(xmlChar *))xmlFree)(v15);
      }
      else if (v6 == 3 && !xmlGetID(*(xmlDocPtr *)(v3 + 56), *(const xmlChar **)(a2 + 8)))
      {
        xmlErrValidNode(v3, *(_QWORD *)(v5 + 40), 536, "IDREF attribute %s references an unknown ID \"%s\"\n", *(const xmlChar **)(v5 + 16), v4, 0);
LABEL_41:
        *(_DWORD *)(v3 + 64) = 0;
      }
    }
    else if (*(_QWORD *)(a1 + 24))
    {
      v7 = xmlStrdup(*(const xmlChar **)(a2 + 8));
      if (!v7)
        goto LABEL_41;
      v8 = v7;
      v9 = *v7;
      if (*v7)
      {
        v10 = v7;
        while (1)
        {
LABEL_11:
          v11 = v10;
          while (v9 > 0x20 || ((1 << v9) & 0x100002601) == 0)
          {
            v12 = *++v11;
            v9 = v12;
          }
          *v11 = 0;
          if (!xmlGetID(*(xmlDocPtr *)(v3 + 56), v10))
          {
            xmlErrValidNodeNr(v3, 0, 536, "attribute %s line %d references an unknown ID \"%s\"\n", *(const xmlChar **)(a1 + 24), *(_DWORD *)(a1 + 32), v10);
            *(_DWORD *)(v3 + 64) = 0;
          }
          if (!v9)
            break;
          *v11 = v9;
          v10 = v11;
          while (v9 <= 0x20)
          {
            if (((1 << v9) & 0x100002600) == 0)
            {
              if (v9)
                goto LABEL_11;
              goto LABEL_23;
            }
            v13 = *++v10;
            v9 = v13;
          }
        }
      }
LABEL_23:
      ((void (*)(xmlChar *))xmlFree)(v8);
    }
  }
  return 1;
}

xmlXIncludeCtxtPtr xmlXIncludeNewContext(xmlXIncludeCtxtPtr doc)
{
  xmlXIncludeCtxtPtr v1;

  if (doc)
  {
    v1 = doc;
    doc = (xmlXIncludeCtxtPtr)xmlMalloc(0x78uLL);
    if (doc)
    {
      *(_OWORD *)doc = 0u;
      *((_OWORD *)doc + 1) = 0u;
      *((_QWORD *)doc + 14) = 0;
      *((_OWORD *)doc + 5) = 0u;
      *((_OWORD *)doc + 6) = 0u;
      *((_OWORD *)doc + 3) = 0u;
      *((_OWORD *)doc + 4) = 0u;
      *((_OWORD *)doc + 2) = 0u;
      *(_QWORD *)doc = v1;
      *((_QWORD *)doc + 1) = 0;
      *((_DWORD *)doc + 4) = 0;
      *((_QWORD *)doc + 3) = 0;
      *((_DWORD *)doc + 20) = 0;
    }
    else
    {
      __xmlRaiseError(0, 0, 0, 0, (uint64_t)v1, 0xBu, 2, 2, 0, 0, (const xmlChar *)"creating XInclude context", 0, 0, 0, 0, "Memory allocation failed : %s\n", (char)"creating XInclude context");
      return 0;
    }
  }
  return doc;
}

_DWORD *xmlXIncludeErrMemory(uint64_t a1, uint64_t a2, const xmlChar *a3)
{
  if (a1)
    ++*(_DWORD *)(a1 + 80);
  return __xmlRaiseError(0, 0, 0, (_QWORD *)a1, a2, 0xBu, 2, 2, 0, 0, a3, 0, 0, 0, 0, "Memory allocation failed : %s\n", (char)a3);
}

void xmlXIncludeFreeContext(xmlXIncludeCtxtPtr ctxt)
{
  void *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  void *v6;
  void *v7;
  int v8;
  uint64_t j;
  void *v10;
  void *v11;
  int v12;
  uint64_t k;
  void *v14;
  void *v15;

  if (ctxt)
  {
    if (*((int *)ctxt + 16) >= 1)
    {
      do
        xmlXIncludeURLPop((uint64_t)ctxt);
      while (*((int *)ctxt + 16) > 0);
    }
    v2 = (void *)*((_QWORD *)ctxt + 9);
    if (v2)
      xmlFree(v2);
    v3 = *((_DWORD *)ctxt + 3);
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        v5 = *(_QWORD *)(*((_QWORD *)ctxt + 3) + 8 * i);
        if (v5)
        {
          xmlXIncludeFreeRef(v5);
          v3 = *((_DWORD *)ctxt + 3);
        }
      }
    }
    v6 = (void *)*((_QWORD *)ctxt + 3);
    if (v6)
      xmlFree(v6);
    v7 = (void *)*((_QWORD *)ctxt + 5);
    if (v7)
    {
      v8 = *((_DWORD *)ctxt + 8);
      if (v8 >= 1)
      {
        for (j = 0; j < v8; ++j)
        {
          v10 = *(void **)(*((_QWORD *)ctxt + 5) + 8 * j);
          if (v10)
          {
            xmlFree(v10);
            v8 = *((_DWORD *)ctxt + 8);
          }
        }
        v7 = (void *)*((_QWORD *)ctxt + 5);
      }
      xmlFree(v7);
    }
    v11 = (void *)*((_QWORD *)ctxt + 6);
    if (v11)
    {
      v12 = *((_DWORD *)ctxt + 8);
      if (v12 >= 1)
      {
        for (k = 0; k < v12; ++k)
        {
          v14 = *(void **)(*((_QWORD *)ctxt + 6) + 8 * k);
          if (v14)
          {
            xmlFree(v14);
            v12 = *((_DWORD *)ctxt + 8);
          }
        }
        v11 = (void *)*((_QWORD *)ctxt + 6);
      }
      xmlFree(v11);
    }
    v15 = (void *)*((_QWORD *)ctxt + 12);
    if (v15)
      xmlFree(v15);
    xmlFree(ctxt);
  }
}

void xmlXIncludeURLPop(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v1 = *(_DWORD *)(a1 + 64);
  v2 = v1 - 1;
  if (v1 >= 1)
  {
    *(_DWORD *)(a1 + 64) = v2;
    v3 = *(_QWORD *)(a1 + 72);
    if (v1 == 1)
      v4 = 0;
    else
      v4 = *(_QWORD *)(v3 + 8 * (v1 - 2));
    *(_QWORD *)(a1 + 56) = v4;
    v5 = *(void **)(v3 + 8 * v2);
    *(_QWORD *)(v3 + 8 * v2) = 0;
    if (v5)
      xmlFree(v5);
  }
}

void xmlXIncludeFreeRef(uint64_t a1)
{
  xmlDoc *v2;
  void *v3;

  v2 = *(xmlDoc **)(a1 + 16);
  if (v2)
    xmlFreeDoc(v2);
  if (*(_QWORD *)a1)
    xmlFree(*(void **)a1);
  v3 = *(void **)(a1 + 8);
  if (v3)
    xmlFree(v3);
  xmlFree((void *)a1);
}

int xmlXIncludeSetFlags(xmlXIncludeCtxtPtr ctxt, int flags)
{
  int result;

  if (!ctxt)
    return -1;
  result = 0;
  *((_DWORD *)ctxt + 22) = flags;
  return result;
}

int xmlXIncludeProcessTreeFlagsData(xmlNodePtr tree, int flags, void *data)
{
  _xmlDoc *doc;
  xmlXIncludeCtxtPtr v7;
  uint64_t v8;
  int v9;
  int v10;

  if (!tree)
    return -1;
  if (tree->type == XML_NAMESPACE_DECL)
    return -1;
  doc = tree->doc;
  if (!doc)
    return -1;
  v7 = xmlXIncludeNewContext(doc);
  if (!v7)
    return -1;
  v8 = (uint64_t)v7;
  *((_QWORD *)v7 + 13) = data;
  *((_QWORD *)v7 + 12) = xmlStrdup(tree->doc->URL);
  *(_DWORD *)(v8 + 88) = flags;
  v9 = xmlXIncludeDoProcess(v8, (uint64_t)tree->doc, (uint64_t)tree, 0);
  v10 = v9;
  if ((v9 & 0x80000000) == 0)
  {
    if (*(int *)(v8 + 80) > 0)
      v10 = -1;
    else
      v10 = v9;
  }
  xmlXIncludeFreeContext((xmlXIncludeCtxtPtr)v8);
  return v10;
}

uint64_t xmlXIncludeDoProcess(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v4;
  _QWORD *v9;
  int v10;
  void *v11;
  uint64_t v12;
  void *v13;
  xmlChar *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  const char *v24;
  const char *v25;
  xmlChar *Prop;
  int v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  xmlChar *v33;
  xmlChar *v34;
  xmlChar *v35;
  const xmlChar *v36;
  const xmlChar *v37;
  xmlChar *v38;
  xmlChar *v39;
  xmlChar *v40;
  xmlURIPtr v41;
  xmlURI *v42;
  char *fragment;
  xmlChar *v44;
  xmlChar *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  void *v50;
  int v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  xmlNode *v56;
  xmlChar *v57;
  uint64_t v58;
  xmlChar *v59;
  const xmlChar *v60;
  char v61;
  xmlChar *v62;
  const xmlChar *v63;
  const xmlChar *v64;
  xmlChar *v65;
  uint64_t v66;
  _QWORD *v67;
  int v68;
  xmlChar *v69;
  xmlChar *v70;
  xmlChar *v71;
  const char *v72;
  xmlURIPtr v73;
  xmlURI *v74;
  const xmlChar *v75;
  xmlURIPtr v76;
  xmlURI *v77;
  xmlChar *v78;
  uint64_t v79;
  uint64_t v80;
  const xmlChar *v81;
  xmlChar *v82;
  xmlDoc *myDoc;
  xmlXPathContext *v84;
  xmlXPathContext *v85;
  xmlXPathObjectPtr v86;
  xmlXPathObjectType type;
  uint64_t v88;
  uint64_t v89;
  const xmlChar *v90;
  xmlChar *v91;
  xmlChar *v92;
  uint64_t v93;
  uint64_t v94;
  const xmlNode *v95;
  xmlChar *v96;
  const xmlChar *v97;
  xmlCharEncoding v98;
  xmlCharEncoding v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  xmlParserCtxtPtr v104;
  xmlParserCtxt *v105;
  xmlDict *v106;
  const char *v107;
  xmlParserInput *ExternalEntity;
  uint64_t v109;
  uint64_t v111;
  _xmlDtd *intSubset;
  xmlDoc *v113;
  xmlDtdPtr v114;
  xmlHashTable *entities;
  _xmlDtd *extSubset;
  xmlFreeFunc v117;
  xmlChar *v118;
  xmlParserCtxt *v119;
  xmlParserInputPtr v120;
  xmlParserInputBufferPtr buf;
  xmlCharEncodingHandler *encoder;
  xmlParserInputBuffer *v123;
  xmlNodePtr v124;
  uint64_t v125;
  xmlChar *v126;
  xmlParserInputBuffer *v127;
  xmlChar *v128;
  int v129;
  int v130;
  size_t v131;
  const xmlChar *v132;
  int v133;
  BOOL v134;
  uint64_t v135;
  int v136;
  int *p_nodeNr;
  uint64_t v138;
  uint64_t v139;
  int v140;
  xmlXIncludeCtxtPtr v141;
  xmlXIncludeCtxtPtr v142;
  int v143;
  int v144;
  xmlNodePtr v145;
  uint64_t v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  uint64_t i;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  const char *v155;
  xmlNodePtr RootElement;
  xmlDtdPtr v157;
  xmlXIncludeCtxtPtr v158;
  xmlXIncludeCtxtPtr v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  xmlNodePtr v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  xmlChar *NsProp;
  uint64_t v172;
  xmlChar *v173;
  xmlChar *v174;
  xmlChar *v175;
  xmlChar *v176;
  xmlChar *v177;
  xmlChar *v178;
  xmlChar *v179;
  uint64_t v180;
  xmlDoc *v181;
  xmlChar *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  xmlNode *v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  xmlNode *v192;
  xmlNode *v193;
  xmlNode *v194;
  xmlNodePtr v195;
  xmlNode *v196;
  xmlNode *v197;
  xmlNode *next;
  uint64_t v199;
  uint64_t v200;
  int v201;
  const char *v202;
  xmlParserInput *input;
  xmlParserCtxt *ctxt;
  xmlXPathObject *obj;
  xmlChar *obja;
  uint64_t v207;
  const xmlChar *str1;
  xmlParserInputBuffer *str1a;
  xmlChar *str1b;
  xmlChar *v211;
  int v212;
  uint64_t v213;
  xmlChar *v214;
  int base;
  xmlChar *basea;
  xmlChar *baseb;
  int v218;
  const xmlChar *v219;
  int v220;
  uint64_t v221;
  xmlChar *v222;
  uint64_t v223;
  uint64_t v224;
  xmlChar *v225;
  xmlDoc *data;
  _QWORD *v227;

  v4 = 0xFFFFFFFFLL;
  if (!a2 || !a3)
    return v4;
  if (*(_DWORD *)(a3 + 8) == 18)
    return 0xFFFFFFFFLL;
  v9 = (_QWORD *)a1;
  if (a4)
  {
    if (!*(_QWORD *)(a3 + 24))
      return 0xFFFFFFFFLL;
  }
  v4 = *(_QWORD *)(a2 + 136);
  if (!v4)
    goto LABEL_17;
  v10 = *(_DWORD *)(a1 + 64);
  if (v10 >= 41)
  {
    xmlXIncludeErr(a1, 0, 1600, "detected a recursion in %s\n", *(const xmlChar **)(a2 + 136));
    return 0xFFFFFFFFLL;
  }
  v11 = *(void **)(a1 + 72);
  if (!v11)
  {
    v9[8] = 0x400000000;
    v11 = xmlMalloc(0x20uLL);
    v9[9] = v11;
    if (!v11)
    {
LABEL_414:
      xmlXIncludeErrMemory((uint64_t)v9, 0, (const xmlChar *)"adding URL");
      return 0xFFFFFFFFLL;
    }
    v10 = *((_DWORD *)v9 + 16);
  }
  v12 = *((int *)v9 + 17);
  if (v10 >= (int)v12)
  {
    *((_DWORD *)v9 + 17) = 2 * v12;
    v13 = xmlRealloc(v11, 16 * v12);
    v9[9] = v13;
    if (!v13)
      goto LABEL_414;
  }
  v14 = xmlStrdup((const xmlChar *)v4);
  v4 = *((int *)v9 + 16);
  *(_QWORD *)(v9[9] + 8 * v4) = v14;
  v9[7] = v14;
  *((_DWORD *)v9 + 16) = v4 + 1;
  if ((v4 & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
LABEL_17:
  v207 = a2;
  v15 = *((int *)v9 + 3);
  v16 = a3;
  if (a4)
    v16 = *(_QWORD *)(a3 + 24);
  while (1)
  {
    if (v16)
    {
      if (*(_DWORD *)(v16 + 8) == 1)
      {
        v17 = *(_QWORD *)(v16 + 72);
        if (v17)
        {
          if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"http://www.w3.org/2003/XInclude")
            || xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v16 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XInclude"))
          {
            break;
          }
        }
      }
    }
LABEL_57:
    v31 = *(_QWORD *)(v16 + 24);
    if (!v31 || (*(_DWORD *)(v16 + 8) | 8) != 9)
      goto LABEL_123;
LABEL_59:
    v16 = v31;
    if (v31 == a3)
      goto LABEL_126;
  }
  if (xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v16 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XInclude")&& !*((_DWORD *)v9 + 21))
  {
    *((_DWORD *)v9 + 21) = 1;
  }
  if (!xmlStrEqual(*(const xmlChar **)(v16 + 16), (const xmlChar *)"include"))
  {
    if (xmlStrEqual(*(const xmlChar **)(v16 + 16), (const xmlChar *)"fallback"))
    {
      if ((v29 = *(_QWORD *)(v16 + 40)) == 0
        || *(_DWORD *)(v29 + 8) != 1
        || (v30 = *(_QWORD *)(v29 + 72)) == 0
        || !xmlStrEqual(*(const xmlChar **)(v30 + 16), (const xmlChar *)"http://www.w3.org/2003/XInclude")
        && !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(*(_QWORD *)(v16 + 40) + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XInclude")|| !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v16 + 40) + 16), (const xmlChar *)"include"))
      {
        v21 = (uint64_t)v9;
        v22 = v16;
        v23 = 1616;
        v24 = "%s is not the child of an 'include'\n";
        v25 = "fallback";
LABEL_56:
        xmlXIncludeErr(v21, v22, v23, v24, (const xmlChar *)v25);
      }
    }
    goto LABEL_57;
  }
  v18 = *(_QWORD *)(v16 + 24);
  if (!v18)
    goto LABEL_40;
  v19 = 0;
  do
  {
    if (*(_DWORD *)(v18 + 8) == 1)
    {
      v20 = *(_QWORD *)(v18 + 72);
      if (v20)
      {
        if (xmlStrEqual(*(const xmlChar **)(v20 + 16), (const xmlChar *)"http://www.w3.org/2003/XInclude")
          || xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v18 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XInclude"))
        {
          if (xmlStrEqual(*(const xmlChar **)(v18 + 16), (const xmlChar *)"include"))
          {
            xmlXIncludeErr((uint64_t)v9, v16, 1614, "%s has an 'include' child\n", (const xmlChar *)"include");
            goto LABEL_57;
          }
          if (xmlStrEqual(*(const xmlChar **)(v18 + 16), (const xmlChar *)"fallback"))
            ++v19;
        }
      }
    }
    v18 = *(_QWORD *)(v18 + 48);
  }
  while (v18);
  if (v19 >= 2)
  {
    v21 = (uint64_t)v9;
    v22 = v16;
    v23 = 1615;
    v24 = "%s has multiple fallback children\n";
    v25 = "include";
    goto LABEL_56;
  }
LABEL_40:
  ++v9[14];
  Prop = xmlXIncludeGetProp((uint64_t)v9, (xmlNode *)v16, (const xmlChar *)"href");
  if (!Prop)
  {
    Prop = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
    if (!Prop)
      goto LABEL_123;
  }
  v27 = *Prop;
  if (v27 == 35 || v27 == 0)
  {
    v32 = 0;
    v218 = 1;
  }
  else
  {
    v218 = 0;
    v32 = 1;
  }
  v33 = xmlXIncludeGetProp((uint64_t)v9, (xmlNode *)v16, (const xmlChar *)"parse");
  v34 = v33;
  base = v32;
  if (v33 && !xmlStrEqual(v33, (const xmlChar *)"xml"))
  {
    if (!xmlStrEqual(v34, (const xmlChar *)"text"))
    {
      xmlXIncludeErr((uint64_t)v9, v16, 1601, "invalid value %s for 'parse'\n", v34);
      xmlFree(Prop);
      xmlFree(v34);
      goto LABEL_123;
    }
    v220 = 0;
  }
  else
  {
    v220 = 1;
  }
  v35 = xmlNodeGetBase((const xmlDoc *)*v9, (const xmlNode *)v16);
  if (v35)
  {
    v36 = Prop;
    v37 = v35;
  }
  else
  {
    v37 = *(const xmlChar **)(*v9 + 136);
    v36 = Prop;
  }
  v222 = xmlBuildURI(v36, v37);
  if (!v222)
  {
    v38 = xmlURIEscape(v35);
    v39 = xmlURIEscape(Prop);
    v222 = xmlBuildURI(v39, v38);
    if (v38)
      xmlFree(v38);
    if (v39)
      xmlFree(v39);
  }
  if (v34)
    xmlFree(v34);
  xmlFree(Prop);
  if (v35)
    ((void (*)(xmlChar *))xmlFree)(v35);
  if (!v222)
  {
    xmlXIncludeErr((uint64_t)v9, v16, 1605, "failed build URL\n", 0);
    goto LABEL_123;
  }
  v40 = xmlXIncludeGetProp((uint64_t)v9, (xmlNode *)v16, (const xmlChar *)"xpointer");
  v41 = xmlParseURI((const char *)v222);
  if (v41)
  {
    v42 = v41;
    fragment = v41->fragment;
    if (fragment)
    {
      v44 = v40;
      if (!*((_DWORD *)v9 + 21))
      {
        xmlXIncludeErr((uint64_t)v9, v16, 1618, "Invalid fragment identifier in URI %s use the xpointer attribute\n", v222);
        if (v40)
          xmlFree(v40);
        xmlFreeURI(v42);
        xmlFree(v222);
        goto LABEL_123;
      }
      if (v40)
        xmlFree(fragment);
      else
        v44 = (xmlChar *)fragment;
      v42->fragment = 0;
    }
    else
    {
      v44 = v40;
    }
    v45 = xmlSaveUri(v42);
    xmlFreeURI(v42);
    if (v45)
    {
      xmlFree(v222);
      if ((v218 & v220) != 1 || v44 && *v44)
      {
        v223 = (uint64_t)v44;
        if ((base & v220) == 1 && *((int *)v9 + 16) >= 1)
        {
          v46 = 0;
          do
          {
            if (xmlStrEqual(v45, *(const xmlChar **)(v9[9] + 8 * v46)))
            {
              xmlXIncludeErr((uint64_t)v9, v16, 1600, "detected a recursion in %s\n", v45);
              xmlFree(v45);
              ((void (*)(uint64_t))xmlFree)(v223);
              goto LABEL_123;
            }
            ++v46;
          }
          while (v46 < *((int *)v9 + 16));
        }
        v47 = xmlMalloc(0x38uLL);
        if (v47)
        {
          v48 = (uint64_t)v47;
          v47[6] = 0;
          *((_OWORD *)v47 + 1) = 0u;
          *((_OWORD *)v47 + 2) = 0u;
          *(_OWORD *)v47 = 0u;
          *v47 = xmlStrdup(v45);
          *(_QWORD *)(v48 + 24) = v16;
          *(_OWORD *)(v48 + 8) = 0u;
          *(_OWORD *)(v48 + 32) = 0u;
          v49 = *((_DWORD *)v9 + 4);
          if (v49)
            goto LABEL_109;
          *((_DWORD *)v9 + 4) = 4;
          v50 = xmlMalloc(0x20uLL);
          v9[3] = v50;
          if (v50)
          {
            v49 = *((_DWORD *)v9 + 4);
LABEL_109:
            v51 = *((_DWORD *)v9 + 3);
            if (v51 < v49)
            {
              v52 = (_QWORD *)v9[3];
LABEL_119:
              *((_DWORD *)v9 + 3) = v51 + 1;
              v52[v51] = v48;
              xmlFree(v45);
              *(_QWORD *)(v48 + 8) = v223;
              *(_QWORD *)(v48 + 16) = 0;
              *(_DWORD *)(v48 + 40) = v220;
              *(_DWORD *)(v48 + 44) = 1;
              goto LABEL_123;
            }
            *((_DWORD *)v9 + 4) = 2 * v49;
            v52 = xmlRealloc((void *)v9[3], 16 * v49);
            v9[3] = v52;
            if (v52)
            {
              v51 = *((_DWORD *)v9 + 3);
              goto LABEL_119;
            }
          }
          xmlXIncludeErrMemory((uint64_t)v9, v16, (const xmlChar *)"growing XInclude context");
          xmlXIncludeFreeRef(v48);
        }
        else
        {
          xmlXIncludeErrMemory((uint64_t)v9, v16, (const xmlChar *)"growing XInclude context");
        }
        ((void (*)(xmlChar *))xmlFree)(v45);
        goto LABEL_123;
      }
      xmlXIncludeErr((uint64_t)v9, v16, 1600, "detected a local recursion with no xpointer in %s\n", v45);
LABEL_114:
      xmlFree(v45);
    }
    else
    {
      v45 = v44;
      v44 = v222;
      xmlXIncludeErr((uint64_t)v9, v16, 1605, "invalid value URI %s\n", v222);
      if (v45)
        goto LABEL_114;
    }
    ((void (*)(xmlChar *))xmlFree)(v44);
    goto LABEL_123;
  }
  xmlXIncludeErr((uint64_t)v9, v16, 1605, "invalid value URI %s\n", v222);
  if (v40)
    xmlFree(v40);
  xmlFree(v222);
  do
  {
LABEL_123:
    if (v16 == a3)
      break;
    v31 = *(_QWORD *)(v16 + 48);
    if (v31)
      goto LABEL_59;
    v16 = *(_QWORD *)(v16 + 40);
  }
  while (v16);
LABEL_126:
  v53 = *((_DWORD *)v9 + 3);
  if ((int)v15 >= v53)
    goto LABEL_378;
  v54 = v15 + 1;
  while (2)
  {
    if ((v15 & 0x80000000) != 0)
      goto LABEL_294;
    v55 = *(_QWORD *)(v9[3] + 8 * v15);
    v56 = *(xmlNode **)(v55 + 24);
    if (!v56)
      goto LABEL_294;
    v57 = xmlXIncludeGetProp((uint64_t)v9, *(xmlNode **)(v55 + 24), (const xmlChar *)"href");
    if (!v57)
    {
      v57 = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
      if (!v57)
        goto LABEL_294;
    }
    v58 = v15;
    v59 = xmlXIncludeGetProp((uint64_t)v9, v56, (const xmlChar *)"parse");
    v60 = v59;
    if (v59 && !xmlStrEqual(v59, (const xmlChar *)"xml"))
    {
      if (!xmlStrEqual(v60, (const xmlChar *)"text"))
      {
        xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v15) + 24), 1601, "invalid value %s for 'parse'\n", v60);
        ((void (*)(xmlChar *))xmlFree)(v57);
        v62 = (xmlChar *)v60;
        goto LABEL_293;
      }
      v61 = 1;
    }
    else
    {
      v61 = 0;
    }
    basea = (xmlChar *)v56;
    v219 = v60;
    v62 = xmlNodeGetBase((const xmlDoc *)*v9, v56);
    if (v62)
    {
      v63 = v57;
      v64 = v62;
    }
    else
    {
      v64 = *(const xmlChar **)(*v9 + 136);
      v63 = v57;
    }
    v65 = xmlBuildURI(v63, v64);
    v221 = v15;
    if (!v65)
    {
      v224 = v15;
      v66 = v54;
      v67 = v9;
      v68 = v4;
      v69 = v62;
      v70 = xmlURIEscape(v62);
      v71 = xmlURIEscape(v57);
      v4 = (unint64_t)xmlBuildURI(v71, v70);
      if (v70)
        ((void (*)(xmlChar *))xmlFree)(v70);
      if (v71)
        ((void (*)(xmlChar *))xmlFree)(v71);
      v62 = v69;
      v65 = (xmlChar *)v4;
      LODWORD(v4) = v68;
      v9 = v67;
      v54 = v66;
      v58 = v221;
      v15 = v224;
      if (!v65)
      {
        xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v221) + 24), 1605, "failed build URL\n", 0);
        if (v219)
          ((void (*)(void))xmlFree)();
        ((void (*)(xmlChar *))xmlFree)(v57);
        if (v62)
          goto LABEL_293;
        goto LABEL_294;
      }
    }
    v213 = v9[12];
    v214 = v62;
    v9[12] = v62;
    v211 = v57;
    v212 = v4;
    v225 = v65;
    if ((v61 & 1) == 0)
    {
      v76 = xmlParseURI((const char *)v65);
      if (!v76)
      {
        v88 = *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24);
        v89 = (uint64_t)v9;
        v90 = v65;
LABEL_190:
        xmlXIncludeErr(v89, v88, 1605, "invalid value URI %s\n", v90);
        goto LABEL_282;
      }
      v77 = v76;
      v78 = (xmlChar *)v76->fragment;
      if (v78)
        v76->fragment = 0;
      v79 = v9[3];
      if (v79)
      {
        v80 = *(_QWORD *)(v79 + 8 * v58);
        if (v80)
        {
          v81 = *(const xmlChar **)(v80 + 8);
          if (v81)
          {
            if (v78)
            {
              ((void (*)(xmlChar *))xmlFree)(v78);
              v81 = *(const xmlChar **)(*(_QWORD *)(v9[3] + 8 * v58) + 8);
            }
            v78 = xmlStrdup(v81);
          }
        }
      }
      v82 = xmlSaveUri(v77);
      xmlFreeURI(v77);
      if (!v82)
      {
        v100 = v9[3];
        if (v100)
          v101 = *(_QWORD *)(*(_QWORD *)(v100 + 8 * v58) + 24);
        else
          v101 = 0;
        xmlXIncludeErr((uint64_t)v9, v101, 1605, "invalid value URI %s\n", v225);
        if (!v78)
          goto LABEL_282;
        goto LABEL_237;
      }
      if (!*v82 || *v82 == 35 || *v9 && xmlStrEqual(v82, *(const xmlChar **)(*v9 + 136)))
      {
        myDoc = (xmlDoc *)*v9;
        if (v78)
        {
LABEL_166:
          v84 = xmlXPtrNewContext(myDoc, 0, 0);
          if (!v84)
          {
            xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1612, "could not create XPointer context\n", 0);
LABEL_236:
            ((void (*)(xmlChar *))xmlFree)(v82);
LABEL_237:
            v117 = xmlFree;
LABEL_238:
            v118 = v78;
            goto LABEL_281;
          }
          v85 = v84;
          v86 = xmlXPtrEval(v78, v84);
          if (!v86)
          {
            xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1612, "XPointer evaluation failed: #%s\n", v78);
            goto LABEL_235;
          }
          obj = v86;
          type = v86->type;
          if (v86->type <= XPATH_XSLT_TREE)
          {
            if (((1 << type) & 0x33D) != 0)
            {
              xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1613, "XPointer is not a range: #%s\n", v78);
              xmlXPathFreeObject(obj);
LABEL_235:
              xmlXPathFreeContext(v85);
              goto LABEL_236;
            }
            if (type == XPATH_NODESET)
            {
              str1b = v82;
              p_nodeNr = &v86->nodesetval->nodeNr;
              if (!p_nodeNr || *p_nodeNr <= 0)
              {
                xmlXPathFreeObject(v86);
                xmlXPathFreeContext(v85);
                xmlFree(str1b);
                v117 = xmlFree;
                goto LABEL_238;
              }
              goto LABEL_308;
            }
          }
          str1b = v82;
          p_nodeNr = &v86->nodesetval->nodeNr;
          if (p_nodeNr && *p_nodeNr >= 1)
          {
LABEL_308:
            for (i = 0; i < *p_nodeNr; ++i)
            {
              v151 = *(_QWORD *)(*((_QWORD *)p_nodeNr + 1) + 8 * i);
              if (!v151)
                continue;
              v152 = *(_DWORD *)(v151 + 8);
              if (v152 > 0x14)
                continue;
              if (((1 << v152) & 0x1BDC00) != 0)
              {
                xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1613, "XPointer selects unexpected nodes: #%s\n", v78);
                *(_QWORD *)(*((_QWORD *)p_nodeNr + 1) + 8 * i) = 0;
              }
              else
              {
                if (v152 == 2)
                {
                  v153 = *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24);
                  v154 = (uint64_t)v9;
                  v155 = "XPointer selects an attribute: #%s\n";
                }
                else
                {
                  if (v152 != 18)
                    continue;
                  v153 = *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24);
                  v154 = (uint64_t)v9;
                  v155 = "XPointer selects a namespace: #%s\n";
                }
                xmlXIncludeErr(v154, v153, 1613, v155, v78);
              }
              *(_QWORD *)(*((_QWORD *)p_nodeNr + 1) + 8 * i) = 0;
            }
          }
          *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 32) = xmlXIncludeCopyXPointer(v9, (xmlDoc *)*v9, (uint64_t)myDoc, (int *)obj);
          xmlXPathFreeObject(obj);
          xmlXPathFreeContext(v85);
          xmlFree(v78);
          v82 = str1b;
          v57 = v211;
LABEL_348:
          v92 = (xmlChar *)v219;
          if (myDoc && v82 && (*((_BYTE *)v9 + 90) & 4) == 0 && (myDoc->parseFlags & 0x40000) == 0)
          {
            NsProp = xmlGetNsProp(*(const xmlNode **)(*(_QWORD *)(v9[3] + 8 * v58) + 24), (const xmlChar *)"base", (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
            if (NsProp)
            {
LABEL_353:
              v172 = *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 32);
              if (v172)
              {
                baseb = NsProp;
                do
                {
                  if (*(_DWORD *)(v172 + 8) == 1)
                  {
                    v173 = v82;
                    v174 = xmlNodeGetBase(*(const xmlDoc **)(v172 + 64), (const xmlNode *)v172);
                    if (v174)
                    {
                      v175 = v174;
                      if (xmlStrEqual(v174, *(const xmlChar **)(*(_QWORD *)(v172 + 64) + 136)))
                      {
                        xmlNodeSetBase((xmlNodePtr)v172, NsProp);
                      }
                      else
                      {
                        v176 = xmlGetNsProp((const xmlNode *)v172, (const xmlChar *)"base", (const xmlChar *)"http://www.w3.org/XML/1998/namespace");
                        if (v176)
                        {
                          v177 = v176;
                          v178 = xmlBuildURI(v176, baseb);
                          if (v178)
                          {
                            v179 = v178;
                            xmlNodeSetBase((xmlNodePtr)v172, v178);
                            xmlFree(v179);
                          }
                          else
                          {
                            xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1605, "trying to rebuild base from %s\n", v177);
                          }
                          xmlFree(v177);
                          v92 = (xmlChar *)v219;
                          v58 = v221;
                        }
                      }
                      ((void (*)(xmlChar *))xmlFree)(v175);
                      v82 = v173;
                      NsProp = baseb;
                    }
                    else
                    {
                      xmlNodeSetBase((xmlNodePtr)v172, NsProp);
                    }
                  }
                  v172 = *(_QWORD *)(v172 + 48);
                }
                while (v172);
              }
              ((void (*)(xmlChar *))xmlFree)(NsProp);
              v57 = v211;
              goto LABEL_368;
            }
            v182 = xmlBuildRelativeURI(v82, (const xmlChar *)v9[12]);
            if (v182)
            {
              NsProp = v182;
              if (xmlStrchr(v182, 0x2Fu))
                goto LABEL_353;
              ((void (*)(xmlChar *))xmlFree)(NsProp);
            }
            else
            {
              xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1605, "trying to build relative URI from %s\n", v82);
            }
          }
LABEL_368:
          if (*((_DWORD *)v9 + 3) > (int)v15)
          {
            v180 = *(_QWORD *)(v9[3] + 8 * v58);
            v181 = *(xmlDoc **)(v180 + 16);
            if (v181)
            {
              if (*(int *)(v180 + 44) <= 1)
              {
                xmlFreeDoc(v181);
                *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 16) = 0;
              }
            }
          }
          ((void (*)(xmlChar *))xmlFree)(v82);
          goto LABEL_373;
        }
LABEL_347:
        *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 32) = xmlXIncludeCopyNodeList((xmlDoc *)*v9, (uint64_t)myDoc, myDoc->children);
        goto LABEL_348;
      }
      str1 = v82;
      if (*((int *)v9 + 3) >= 1)
      {
        v102 = 0;
        while (1)
        {
          if (xmlStrEqual(str1, **(const xmlChar ***)(v9[3] + 8 * v102)))
          {
            myDoc = *(xmlDoc **)(*(_QWORD *)(v9[3] + 8 * v102) + 16);
            if (myDoc)
              break;
          }
          if (++v102 >= *((int *)v9 + 3))
            goto LABEL_203;
        }
LABEL_346:
        v82 = (xmlChar *)str1;
        if (v78)
          goto LABEL_166;
        goto LABEL_347;
      }
LABEL_203:
      v103 = *((_DWORD *)v9 + 22);
      if (v78)
        *((_DWORD *)v9 + 22) = v103 | 2;
      xmlInitParser();
      v104 = xmlNewParserCtxt();
      if (v104)
      {
        v105 = v104;
        v104->_private = (void *)v9[13];
        if (*v9)
        {
          v106 = *(xmlDict **)(*v9 + 152);
          if (v106)
          {
            if (v105->dict)
            {
              xmlDictFree(v105->dict);
              v106 = *(xmlDict **)(*v9 + 152);
            }
            v105->dict = v106;
            xmlDictReference(v106);
          }
        }
        xmlCtxtUseOptions(v105, *((_DWORD *)v9 + 22) | 4);
        v107 = (const char *)str1;
        if (!strcmp((const char *)str1, "-"))
          v107 = "./-";
        ExternalEntity = xmlLoadExternalEntity(v107, 0, v105);
        if (ExternalEntity)
        {
          inputPush(v105, ExternalEntity);
          if (!v105->directory)
            v105->directory = xmlParserGetDirectory(v107);
          v105->loadsubset |= 2u;
          xmlParseDocument(v105);
          myDoc = v105->myDoc;
          if (v105->wellFormed)
          {
            xmlFreeParserCtxt(v105);
            *((_DWORD *)v9 + 22) = v103;
            if (myDoc)
            {
              *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 16) = myDoc;
              if (!xmlStrEqual(str1, myDoc->URL))
              {
                ((void (*)(const xmlChar *))xmlFree)(str1);
                str1 = xmlStrdup(myDoc->URL);
              }
              v109 = v54;
              do
              {
                if (v109 >= *((int *)v9 + 3))
                  goto LABEL_224;
              }
              while (!xmlStrEqual(str1, **(const xmlChar ***)(v9[3] + 8 * v109++)));
              v111 = *(_QWORD *)(v9[3] + 8 * v58);
              ++*(_DWORD *)(v111 + 44);
LABEL_224:
              intSubset = myDoc->intSubset;
              if (!intSubset)
                goto LABEL_334;
              v113 = (xmlDoc *)*v9;
              v114 = *(xmlDtdPtr *)(*v9 + 80);
              if (v114)
                goto LABEL_226;
              RootElement = xmlDocGetRootElement((const xmlDoc *)*v9);
              if (!RootElement || (v157 = xmlCreateIntSubset(v113, RootElement->name, 0, 0)) == 0)
              {
LABEL_334:
                v158 = xmlXIncludeNewContext(myDoc);
                if (v158)
                {
                  v159 = v158;
                  *((_QWORD *)v158 + 13) = v9[13];
                  v160 = *((int *)v9 + 4);
                  *((_DWORD *)v158 + 4) = v160;
                  *((_DWORD *)v158 + 3) = *((_DWORD *)v9 + 3);
                  v161 = xmlMalloc(8 * v160);
                  *((_QWORD *)v159 + 3) = v161;
                  if (v161)
                  {
                    *((_QWORD *)v159 + 8) = v9[8];
                    *((_QWORD *)v159 + 9) = v9[9];
                    *((_QWORD *)v159 + 12) = xmlStrdup((const xmlChar *)v9[12]);
                    v162 = *((unsigned int *)v9 + 3);
                    *((_DWORD *)v159 + 2) = v162;
                    if ((int)v162 >= 1)
                    {
                      v163 = 0;
                      v164 = *((_QWORD *)v159 + 3);
                      v165 = 8 * v162;
                      do
                      {
                        *(_QWORD *)(v164 + v163) = *(_QWORD *)(v9[3] + v163);
                        v164 = *((_QWORD *)v159 + 3);
                        ++*(_DWORD *)(*(_QWORD *)(v164 + v163) + 44);
                        v163 += 8;
                      }
                      while (v165 != v163);
                    }
                    *((_DWORD *)v159 + 22) = *((_DWORD *)v9 + 22);
                    *((_QWORD *)v159 + 14) = v9[14];
                    v166 = xmlDocGetRootElement(myDoc);
                    xmlXIncludeDoProcess(v159, myDoc, v166, 0);
                    v9[14] = *((_QWORD *)v159 + 14);
                    v167 = *((unsigned int *)v9 + 3);
                    if ((int)v167 >= 1)
                    {
                      v168 = 0;
                      v169 = 8 * v167;
                      do
                      {
                        v170 = *((_QWORD *)v159 + 3);
                        --*(_DWORD *)(*(_QWORD *)(v170 + v168) + 44);
                        *(_QWORD *)(v170 + v168) = 0;
                        v168 += 8;
                      }
                      while (v169 != v168);
                    }
                    v9[9] = *((_QWORD *)v159 + 9);
                    *((_DWORD *)v9 + 17) = *((_DWORD *)v159 + 17);
                    *((_QWORD *)v159 + 8) = 0;
                    *((_QWORD *)v159 + 9) = 0;
                    xmlXIncludeFreeContext(v159);
                  }
                  else
                  {
                    xmlXIncludeErrMemory((uint64_t)v9, (uint64_t)myDoc, (const xmlChar *)"processing doc");
                    xmlFree(v159);
                  }
                }
                v57 = v211;
                goto LABEL_346;
              }
              v114 = v157;
              intSubset = myDoc->intSubset;
              if (intSubset)
              {
LABEL_226:
                entities = (xmlHashTable *)intSubset->entities;
                if (entities)
                {
                  data = v113;
                  v227 = v9;
                  xmlHashScan(entities, (xmlHashScanner)xmlXIncludeMergeEntity, &data);
                }
              }
              extSubset = myDoc->extSubset;
              if (extSubset)
              {
                if (extSubset->entities)
                {
                  data = v113;
                  v227 = v9;
                  if (!xmlStrEqual(v114->ExternalID, extSubset->ExternalID)
                    && !xmlStrEqual(v114->SystemID, extSubset->SystemID))
                  {
                    xmlHashScan((xmlHashTablePtr)extSubset->entities, (xmlHashScanner)xmlXIncludeMergeEntity, &data);
                  }
                }
              }
              goto LABEL_334;
            }
LABEL_327:
            ((void (*)(const xmlChar *))xmlFree)(str1);
            if (!v78)
              goto LABEL_282;
            goto LABEL_237;
          }
          if (myDoc)
            xmlFreeDoc(v105->myDoc);
          v105->myDoc = 0;
        }
        xmlFreeParserCtxt(v105);
      }
      else
      {
        xmlXIncludeErrMemory((uint64_t)v9, 0, (const xmlChar *)"cannot allocate parser context");
      }
      *((_DWORD *)v9 + 22) = v103;
      goto LABEL_327;
    }
    if (xmlStrcmp(v65, (const xmlChar *)"-"))
      v72 = (const char *)v65;
    else
      v72 = "./-";
    v73 = xmlParseURI(v72);
    if (!v73)
      goto LABEL_189;
    v74 = v73;
    v75 = (const xmlChar *)v73->fragment;
    if (v75)
    {
      xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1606, "fragment identifier forbidden for text: %s\n", v75);
      xmlFreeURI(v74);
      goto LABEL_282;
    }
    v91 = xmlSaveUri(v73);
    xmlFreeURI(v74);
    if (!v91)
    {
LABEL_189:
      v88 = *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24);
      v89 = (uint64_t)v9;
      v90 = (const xmlChar *)v72;
      goto LABEL_190;
    }
    if (!*v91)
    {
      xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1607, "text serialization of document not available\n", 0);
      goto LABEL_280;
    }
    v92 = (xmlChar *)v219;
    if (*((int *)v9 + 8) >= 1)
    {
      v93 = 0;
      while (!xmlStrEqual(v91, *(const xmlChar **)(v9[6] + 8 * v93)))
      {
        if (++v93 >= *((int *)v9 + 8))
          goto LABEL_184;
      }
      v124 = xmlNewText(*(const xmlChar **)(v9[5] + 8 * v93));
LABEL_273:
      *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 32) = v124;
      ((void (*)(xmlChar *))xmlFree)(v91);
      v57 = v211;
LABEL_373:
      v9[12] = v213;
      goto LABEL_290;
    }
LABEL_184:
    v94 = *(_QWORD *)(v9[3] + 8 * v58);
    if (v94
      && (v95 = *(const xmlNode **)(v94 + 24)) != 0
      && (v96 = xmlGetProp(v95, (const xmlChar *)"encoding")) != 0)
    {
      v97 = v96;
      v98 = xmlParseCharEncoding((const char *)v96);
      if (v98 == XML_CHAR_ENCODING_ERROR)
      {
        xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v58) + 24), 1610, "encoding %s not supported\n", v97);
        ((void (*)(const xmlChar *))xmlFree)(v97);
        goto LABEL_280;
      }
      v99 = v98;
      ((void (*)(const xmlChar *))xmlFree)(v97);
    }
    else
    {
      v99 = XML_CHAR_ENCODING_NONE;
    }
    v119 = xmlNewParserCtxt();
    v120 = xmlLoadExternalEntity((const char *)v91, 0, v119);
    if (!v120)
      goto LABEL_279;
    buf = v120->buf;
    if (!v120->buf)
    {
      xmlFreeInputStream(v120);
LABEL_279:
      xmlFreeParserCtxt(v119);
LABEL_280:
      v117 = xmlFree;
      v118 = v91;
LABEL_281:
      ((void (*)(xmlChar *))v117)(v118);
      goto LABEL_282;
    }
    input = v120;
    ctxt = v119;
    obja = v91;
    encoder = buf->encoder;
    v123 = buf;
    if (encoder)
      xmlCharEncCloseFunc(encoder);
    v123->encoder = xmlGetCharEncodingHandler(v99);
    v124 = xmlNewText(0);
    v125 = 0;
    str1a = v123;
    while (1)
    {
LABEL_245:
      if (xmlParserInputBufferRead(v123, 128) < 1)
      {
        xmlFreeParserCtxt(ctxt);
        v91 = obja;
        xmlXIncludeAddTxt((uint64_t)v9, v124->content, obja);
        xmlFreeInputStream(input);
        v92 = (xmlChar *)v219;
        v58 = v221;
        goto LABEL_273;
      }
      v126 = xmlBufContent(v123->buffer);
      v127 = v123;
      v128 = v126;
      v129 = xmlBufLength((uint64_t)v127->buffer);
      if (v129 >= 1)
        break;
      v135 = v125;
LABEL_262:
      v123 = str1a;
      xmlBufShrink(str1a->buffer, v129);
      v136 = 0;
      v125 = v135;
LABEL_263:
      if (v136)
        goto LABEL_264;
    }
    v130 = 0;
    while (2)
    {
      LODWORD(data) = 0;
      v131 = v130;
      v132 = &v128[v130];
      v133 = xmlStringCurrentChar(0, v132, (int *)&data);
      if (v133 <= 255)
      {
        if (v133 <= 31 && (v133 > 0xD || ((1 << v133) & 0x2600) == 0))
          break;
        goto LABEL_259;
      }
      v134 = (v133 - 0x10000) >= 0x100000 && v133 >> 11 >= 0x1B;
      if (!v134 || (v133 - 57344) >> 1 < 0xFFF)
      {
LABEL_259:
        xmlNodeAddContentLen(v124, v132, (int)data);
        v125 = 0;
        v135 = 0;
        v130 = (_DWORD)data + v131;
        if ((int)data + (int)v131 >= v129)
          goto LABEL_262;
        continue;
      }
      break;
    }
    if (v129 - (int)v131 <= 3 && !(_DWORD)v125)
    {
      v123 = str1a;
      xmlBufShrink(str1a->buffer, v131);
      v136 = 6;
      v125 = 1;
      goto LABEL_263;
    }
    xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v221) + 24), 1608, "%s contains invalid char\n", obja);
    xmlFreeParserCtxt(ctxt);
    v123 = str1a;
    xmlFreeParserInputBuffer(str1a);
    xmlFree(obja);
    v136 = 1;
LABEL_264:
    if (v136 == 6)
      goto LABEL_245;
LABEL_282:
    v9[12] = v213;
    v92 = (xmlChar *)v219;
    v138 = *((_QWORD *)basea + 3);
    v57 = v211;
    v139 = v221;
    if (!v138)
      goto LABEL_289;
    while (*(_DWORD *)(v138 + 8) != 1
         || !*(_QWORD *)(v138 + 72)
         || !xmlStrEqual(*(const xmlChar **)(v138 + 16), (const xmlChar *)"fallback")
         || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v138 + 72) + 16), (const xmlChar *)"http://www.w3.org/2003/XInclude")&& !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v138 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XInclude"))
    {
      v138 = *(_QWORD *)(v138 + 48);
      if (!v138)
        goto LABEL_289;
    }
    if (*(_DWORD *)(v138 + 8) == 18)
    {
LABEL_289:
      xmlXIncludeErr((uint64_t)v9, *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v139) + 24), 1604, "could not load %s, and no fallback was found\n", v225);
    }
    else if (*(_QWORD *)(v138 + 24))
    {
      v140 = *((_DWORD *)v9 + 20);
      v141 = xmlXIncludeNewContext((xmlDocPtr)*v9);
      if (!v141)
        goto LABEL_289;
      v142 = v141;
      *((_QWORD *)v141 + 13) = v9[13];
      *((_QWORD *)v141 + 12) = xmlStrdup((const xmlChar *)v9[12]);
      *((_DWORD *)v142 + 22) = *((_DWORD *)v9 + 22);
      *((_QWORD *)v142 + 14) = v9[14];
      v143 = xmlXIncludeDoProcess(v142, *v9, v138, 1);
      v9[14] = *((_QWORD *)v142 + 14);
      v144 = *((_DWORD *)v9 + 20);
      xmlXIncludeFreeContext(v142);
      v145 = xmlDocCopyNodeList((xmlDocPtr)*v9, *(xmlNodePtr *)(v138 + 24));
      v146 = v9[3];
      *(_QWORD *)(*(_QWORD *)(v146 + 8 * v221) + 32) = v145;
      v147 = *(_QWORD *)(v146 + 8 * v221);
      if (!*(_QWORD *)(v147 + 32))
        *(_DWORD *)(v147 + 52) = 1;
      *(_DWORD *)(v147 + 48) = 1;
      v148 = v144 <= v140;
      v57 = v211;
      v92 = (xmlChar *)v219;
      v139 = v221;
      if (!v148 || v143 < 0)
        goto LABEL_289;
    }
    else
    {
      v149 = v9[3];
      *(_QWORD *)(*(_QWORD *)(v149 + 8 * v221) + 32) = 0;
      *(_QWORD *)(*(_QWORD *)(v149 + 8 * v221) + 48) = 0x100000001;
    }
LABEL_290:
    xmlFree(v225);
    if (v92)
      xmlFree(v92);
    xmlFree(v57);
    v62 = v214;
    LODWORD(v4) = v212;
    if (v214)
LABEL_293:
      ((void (*)(xmlChar *))xmlFree)(v62);
LABEL_294:
    v4 = (v4 + 1);
    ++v15;
    v53 = *((_DWORD *)v9 + 3);
    ++v54;
    if (v53 > (int)v15)
      continue;
    break;
  }
LABEL_378:
  v183 = *((int *)v9 + 2);
  if ((int)v183 < v53)
  {
    while (2)
    {
      v184 = v9[3];
      v185 = *(_QWORD *)(v184 + 8 * v183);
      if (*(_QWORD *)(v185 + 32))
      {
        if (v183 < 0)
          goto LABEL_411;
LABEL_384:
        v186 = *(_QWORD *)(v184 + 8 * v183);
        v187 = *(_QWORD *)(v186 + 24);
        if (v187 && *(_DWORD *)(v187 + 8) != 18)
        {
          v188 = *(xmlNode **)(v186 + 32);
          *(_QWORD *)(v186 + 32) = 0;
          v189 = *(_QWORD *)(v184 + 8 * v183);
          *(_DWORD *)(v189 + 52) = 0;
          v190 = *(_QWORD *)(v187 + 40);
          if (!v190 || *(_DWORD *)(v190 + 8) == 1)
            goto LABEL_394;
          if (v188)
          {
            v191 = 0;
            v192 = v188;
            do
            {
              if (v192->type == XML_ELEMENT_NODE)
                ++v191;
              v192 = v192->next;
            }
            while (v192);
            if (v191 < 2)
            {
LABEL_394:
              if ((*((_BYTE *)v9 + 89) & 0x80) == 0)
                goto LABEL_395;
              if (v188)
              {
                do
                {
                  next = v188->next;
                  xmlAddPrevSibling((xmlNodePtr)v187, v188);
                  v188 = next;
                }
                while (next);
              }
LABEL_405:
              xmlUnlinkNode((xmlNodePtr)v187);
              xmlFreeNode((xmlNodePtr)v187);
              goto LABEL_411;
            }
            v199 = *(_QWORD *)(v189 + 24);
            v200 = (uint64_t)v9;
            v201 = 1611;
            v202 = "XInclude error: would result in multiple root nodes\n";
LABEL_410:
            xmlXIncludeErr(v200, v199, v201, v202, 0);
            xmlFreeNodeList(v188);
            goto LABEL_411;
          }
          if ((*((_BYTE *)v9 + 89) & 0x80) != 0)
            goto LABEL_405;
LABEL_395:
          if (*(_DWORD *)(v189 + 48))
            xmlUnsetProp((xmlNodePtr)v187, (const xmlChar *)"href");
          *(_DWORD *)(v187 + 8) = 19;
          v193 = *(xmlNode **)(v187 + 24);
          if (v193)
          {
            do
            {
              v194 = v193->next;
              xmlUnlinkNode(v193);
              xmlFreeNode(v193);
              v193 = v194;
            }
            while (v194);
          }
          v195 = xmlNewDocNode(*(xmlDocPtr *)(v187 + 64), *(xmlNsPtr *)(v187 + 72), *(const xmlChar **)(v187 + 16), 0);
          if (!v195)
          {
            v199 = *(_QWORD *)(*(_QWORD *)(v9[3] + 8 * v183) + 24);
            v200 = (uint64_t)v9;
            v201 = 1609;
            v202 = "failed to build node\n";
            goto LABEL_410;
          }
          v196 = v195;
          v195->type = XML_XINCLUDE_END;
          xmlAddNextSibling((xmlNodePtr)v187, v195);
          if (v188)
          {
            do
            {
              v197 = v188->next;
              xmlAddPrevSibling(v196, v188);
              v188 = v197;
            }
            while (v197);
          }
        }
      }
      else if ((v183 & 0x8000000000000000) == 0 && *(_DWORD *)(v185 + 52))
      {
        goto LABEL_384;
      }
LABEL_411:
      if (++v183 >= *((int *)v9 + 3))
        break;
      continue;
    }
  }
  if (*(_QWORD *)(v207 + 136))
    xmlXIncludeURLPop((uint64_t)v9);
  return v4;
}

int xmlXIncludeProcessFlagsData(xmlDocPtr doc, int flags, void *data)
{
  xmlNode *RootElement;

  if (doc && (RootElement = xmlDocGetRootElement(doc)) != 0)
    return xmlXIncludeProcessTreeFlagsData(RootElement, flags, data);
  else
    return -1;
}

int xmlXIncludeProcessFlags(xmlDocPtr doc, int flags)
{
  return xmlXIncludeProcessFlagsData(doc, flags, 0);
}

int xmlXIncludeProcess(xmlDocPtr doc)
{
  return xmlXIncludeProcessFlagsData(doc, 0, 0);
}

int xmlXIncludeProcessTreeFlags(xmlNodePtr tree, int flags)
{
  _xmlDoc *doc;
  xmlXIncludeCtxtPtr v5;
  uint64_t v6;
  int v7;
  int v8;

  if (!tree)
    return -1;
  if (tree->type == XML_NAMESPACE_DECL)
    return -1;
  doc = tree->doc;
  if (!doc)
    return -1;
  v5 = xmlXIncludeNewContext(doc);
  if (!v5)
    return -1;
  v6 = (uint64_t)v5;
  *((_QWORD *)v5 + 12) = xmlNodeGetBase(tree->doc, tree);
  *(_DWORD *)(v6 + 88) = flags;
  v7 = xmlXIncludeDoProcess(v6, (uint64_t)tree->doc, (uint64_t)tree, 0);
  v8 = v7;
  if ((v7 & 0x80000000) == 0)
  {
    if (*(int *)(v6 + 80) > 0)
      v8 = -1;
    else
      v8 = v7;
  }
  xmlXIncludeFreeContext((xmlXIncludeCtxtPtr)v6);
  return v8;
}

int xmlXIncludeProcessTree(xmlNodePtr tree)
{
  return xmlXIncludeProcessTreeFlags(tree, 0);
}

int xmlXIncludeProcessNode(xmlXIncludeCtxtPtr ctxt, xmlNodePtr tree)
{
  int result;
  _xmlDoc *doc;

  if (!tree)
    return -1;
  if (tree->type == XML_NAMESPACE_DECL)
    return -1;
  result = -1;
  if (ctxt)
  {
    doc = tree->doc;
    if (doc)
    {
      result = xmlXIncludeDoProcess((uint64_t)ctxt, (uint64_t)doc, (uint64_t)tree, 0);
      if ((result & 0x80000000) == 0 && *((int *)ctxt + 20) > 0)
        return -1;
    }
  }
  return result;
}

_DWORD *xmlXIncludeErr(uint64_t a1, uint64_t a2, int a3, const char *a4, const xmlChar *a5)
{
  ++*(_DWORD *)(a1 + 80);
  return __xmlRaiseError(0, 0, 0, (_QWORD *)a1, a2, 0xBu, a3, 2, 0, 0, a5, 0, 0, 0, 0, a4, (char)a5);
}

xmlChar *xmlXIncludeGetProp(uint64_t a1, xmlNode *node, const xmlChar *a3)
{
  xmlChar *result;

  result = xmlGetNsProp(node, (const xmlChar *)"http://www.w3.org/2003/XInclude", a3);
  if (!result)
  {
    if (!*(_DWORD *)(a1 + 84))
      return xmlGetProp(node, a3);
    result = xmlGetNsProp(node, (const xmlChar *)"http://www.w3.org/2001/XInclude", a3);
    if (!result)
      return xmlGetProp(node, a3);
  }
  return result;
}

xmlNodePtr xmlXIncludeCopyNodeList(xmlDoc *a1, uint64_t a2, xmlNode *a3)
{
  xmlNodePtr v3;
  xmlNode *v5;
  xmlNodePtr v7;
  xmlNodePtr v8;

  v3 = 0;
  if (a1)
  {
    if (a2)
    {
      v5 = a3;
      if (a3)
      {
        v7 = 0;
        v3 = 0;
        do
        {
          v8 = xmlXIncludeCopyNode(a1, a2, v5);
          if (v8)
          {
            if (v3)
            {
              v7->next = v8;
              v8->prev = v7;
            }
            else
            {
              v3 = v8;
            }
          }
          else
          {
            v8 = v7;
          }
          v5 = v5->next;
          v7 = v8;
        }
        while (v5);
      }
    }
  }
  return v3;
}

xmlNodePtr xmlXIncludeCopyXPointer(uint64_t *a1, xmlDoc *a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  xmlNode *v7;
  int v8;
  int *v9;
  uint64_t v10;
  xmlNode *v11;
  uint64_t v12;
  unsigned int v13;
  xmlNodePtr next;
  uint64_t v15;
  int v16;
  xmlNode *v18;
  xmlNode *v19;
  int *v20;
  uint64_t v21;
  xmlNode *v22;
  xmlNode *v23;
  xmlNode *v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  int v29;
  int v30;
  xmlNode *v31;
  xmlNodePtr v32;
  uint64_t NthChild;
  uint64_t v34;
  int v35;
  xmlNodePtr Sibling;
  xmlNode *v37;
  int v38;
  unsigned int v39;
  int v40;
  xmlNode *v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  uint64_t v46;
  xmlNodePtr v47;
  uint64_t v48;
  xmlNode *v49;
  xmlNode *v50;
  uint64_t v51;
  xmlNode *v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL4 v55;
  _BOOL4 v56;
  BOOL v57;
  uint64_t v58;
  const xmlChar *v59;
  int v60;
  int v61;
  xmlDoc *v62;
  xmlNode *v63;
  int v64;
  int v65;
  char v66;
  int v67;

  v4 = a3;
  if (!a3)
    v4 = *a1;
  v7 = 0;
  if (!a4 || !a2 || !v4)
    return v7;
  v8 = *a4;
  if (*a4 == 7)
  {
    v20 = (int *)*((_QWORD *)a4 + 5);
    if (!v20 || *v20 < 1)
      return 0;
    v21 = 0;
    v22 = 0;
    v7 = 0;
    while (1)
    {
      v23 = (xmlNode *)xmlXIncludeCopyXPointer(a1, a2, v4, *(_QWORD *)(*((_QWORD *)v20 + 1) + 8 * v21));
      v24 = v23;
      if (v22)
        break;
      v7 = v23;
      if (v23)
        goto LABEL_41;
      v22 = 0;
LABEL_42:
      if (++v21 >= *v20)
        return v7;
    }
    xmlAddNextSibling(v22, v23);
    v24 = v22;
    do
    {
LABEL_41:
      v22 = v24;
      v24 = v24->next;
    }
    while (v24);
    goto LABEL_42;
  }
  if (v8 != 6)
  {
    if (v8 == 1)
    {
      v9 = (int *)*((_QWORD *)a4 + 1);
      if (v9)
      {
        if (*v9 >= 1)
        {
          v10 = 0;
          v11 = 0;
          v7 = 0;
          while (1)
          {
            v12 = *(_QWORD *)(*((_QWORD *)v9 + 1) + 8 * v10);
            if (v12)
            {
              v13 = *(_DWORD *)(v12 + 8);
              if (v13 > 0x13)
                goto LABEL_30;
              if (((1 << v13) & 0x7DC04) == 0)
              {
                if (v13 != 19)
                {
LABEL_30:
                  v19 = xmlXIncludeCopyNode(a2, v4, (xmlNodePtr)v12);
                  next = v19;
                  if (v11)
                  {
                    xmlAddNextSibling(v11, v19);
                    if (v11->next)
                      next = v11->next;
                    else
                      next = v11;
                  }
                  else
                  {
                    v7 = v19;
                  }
                  goto LABEL_16;
                }
                v15 = *(_QWORD *)(v12 + 48);
                if (v15)
                {
                  while (1)
                  {
                    v16 = *(_DWORD *)(v15 + 8);
                    if ((v16 - 3) >= 6 && v16 != 1)
                      break;
                    v18 = xmlXIncludeCopyNode(a2, v4, (xmlNodePtr)v15);
                    next = v18;
                    if (v11)
                      next = xmlAddNextSibling(v11, v18);
                    else
                      v7 = v18;
                    v15 = *(_QWORD *)(v15 + 48);
                    v11 = next;
                    if (!v15)
                      goto LABEL_16;
                  }
                }
              }
            }
            next = v11;
LABEL_16:
            ++v10;
            v11 = next;
            if (v10 >= *v9)
              return v7;
          }
        }
      }
    }
    return 0;
  }
  v67 = 0;
  v25 = *((_QWORD *)a4 + 5);
  if (!v25 || *(_DWORD *)(v25 + 8) == 18)
    return 0;
  v26 = *((_QWORD *)a4 + 7);
  if (!v26)
    return xmlDocCopyNode(*((xmlNodePtr *)a4 + 5), a2, 1);
  if (*(_DWORD *)(v26 + 8) == 18)
    return 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v7 = 0;
  v64 = a4[16];
  v65 = a4[12];
  v66 = 1;
  NthChild = *((_QWORD *)a4 + 5);
  while (2)
  {
    v34 = v26;
    v35 = v29;
    v29 = v28;
    Sibling = v32;
    while (1)
    {
      if (v29 < 0)
      {
        do
        {
          v37 = v7;
          v7 = xmlDocCopyNode(v31, a2, 2);
          xmlAddChild(v7, v37);
          v31 = v31->parent;
          v38 = v67;
          v29 = ++v67;
        }
        while (v38 < -1);
        v30 = 0;
        Sibling = v7;
      }
      else if (v29 < v30)
      {
        do
        {
          Sibling = Sibling->parent;
          --v30;
        }
        while (v29 < v30);
        v30 = v29;
      }
      if (NthChild == v34)
        break;
      if (NthChild != v25)
      {
        v39 = *(_DWORD *)(NthChild + 8);
        v45 = v39 > 0x14;
        v40 = (1 << v39) & 0x1BC044;
        if (v45 || v40 == 0)
        {
          v42 = xmlDocCopyNode((xmlNodePtr)NthChild, a2, 2);
          if (v42)
          {
            if (v67 == v30)
            {
              Sibling = xmlAddNextSibling(Sibling, v42);
            }
            else
            {
              Sibling = xmlAddChild(Sibling, v42);
              v30 = v67;
            }
          }
        }
        goto LABEL_83;
      }
      if ((*(_DWORD *)(v25 + 8) - 3) <= 1)
      {
        v43 = *(_QWORD *)(v25 + 80);
        if (v43)
        {
          v44 = v65;
          LODWORD(v46) = v65 - 1;
          v45 = v65 <= 1;
          if (v65 > 1)
            v44 = 0;
          v65 = v44;
          if (v45)
            v46 = 0;
          else
            v46 = v46;
          v47 = xmlNewDocText(a2, (const xmlChar *)(v43 + v46));
        }
        else
        {
          v47 = xmlNewDocTextLen(a2, 0, 0);
        }
        v7 = v47;
        v31 = *(xmlNode **)(v25 + 40);
LABEL_82:
        Sibling = v7;
LABEL_83:
        v48 = xmlXPtrAdvanceNode(NthChild, &v67);
        v29 = v67;
        if (!(v66 & 1 | (v67 < v35)))
          return v7;
        NthChild = v48;
        goto LABEL_85;
      }
      v7 = xmlDocCopyNode((xmlNodePtr)v25, a2, 2);
      v31 = *(xmlNode **)(v25 + 40);
      if (v65 < 2)
        goto LABEL_82;
      NthChild = xmlXIncludeGetNthChild(v25, v65 - 1);
      v65 = 0;
      v29 = 1;
      v67 = 1;
      Sibling = v7;
      v30 = 1;
LABEL_85:
      if (!NthChild)
        return v7;
    }
    if (*(_DWORD *)(v34 + 8) != 3)
    {
      v49 = xmlDocCopyNode((xmlNodePtr)v34, a2, 2);
      v32 = v49;
      if (v7)
      {
        if (v67 == v30)
        {
          v32 = xmlAddNextSibling(Sibling, v49);
        }
        else
        {
          v32 = xmlAddChild(Sibling, v49);
          v30 = v67;
        }
      }
      else
      {
        v31 = *(xmlNode **)(v34 + 40);
        v7 = v49;
      }
      if (v64 >= 2)
      {
        v50 = v32;
        v51 = xmlXIncludeGetNthChild(v34, v64 - 1);
        v32 = v50;
        v26 = v51;
        v64 = 0;
      }
      else
      {
        v26 = v34;
      }
      if (v34 == v25 && v65 >= 2)
      {
        v52 = v32;
        v53 = xmlXIncludeGetNthChild(v25, v65 - 1);
        v32 = v52;
        NthChild = v53;
        v65 = 0;
      }
      else
      {
        NthChild = *(_QWORD *)(v34 + 24);
      }
      v28 = v67 + 1;
      v66 = 0;
      ++v67;
      if (!NthChild)
        return v7;
      continue;
    }
    break;
  }
  v54 = *(_QWORD *)(v34 + 80);
  if (v54)
  {
    v55 = v34 == v25;
    v56 = v65 > 1;
    v57 = !v55 || !v56;
    if (v55 && v56)
      v58 = (v65 - 1);
    else
      v58 = 0;
    v59 = (const xmlChar *)(v54 + v58);
    if (v57)
      v60 = 0;
    else
      v60 = v65 - 1;
    v61 = v64 - v60;
    v62 = a2;
  }
  else
  {
    v62 = a2;
    v59 = 0;
    v61 = 0;
  }
  v63 = xmlNewDocTextLen(v62, v59, v61);
  if (!v7)
    return v63;
  if (v67 == v30)
    xmlAddNextSibling(Sibling, v63);
  else
    xmlAddChild(Sibling, v63);
  return v7;
}

uint64_t xmlXIncludeMergeEntity(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  xmlDoc *v3;
  uint64_t v5;
  int v6;
  xmlEntityPtr v7;
  xmlEntityPtr v8;
  unsigned int v9;
  const xmlChar *v10;
  const xmlChar *v11;

  if (result && a2)
  {
    v3 = *(xmlDoc **)a2;
    v2 = *(_QWORD *)(a2 + 8);
    if (v2 && v3 != 0)
    {
      v5 = result;
      v6 = *(_DWORD *)(result + 92);
      if ((v6 - 4) >= 3)
      {
        v7 = xmlAddDocEntity(v3, *(const xmlChar **)(result + 16), v6, *(const xmlChar **)(result + 96), *(const xmlChar **)(result + 104), *(const xmlChar **)(result + 80));
        if (v7)
        {
          v8 = v7;
          result = *(_QWORD *)(v5 + 120);
          if (result)
          {
            result = (uint64_t)xmlStrdup((const xmlChar *)result);
            v8->URI = (const xmlChar *)result;
          }
          return result;
        }
        result = (uint64_t)xmlGetDocEntity(v3, *(const xmlChar **)(v5 + 16));
        if (!result)
          return result;
        v9 = *(_DWORD *)(v5 + 92);
        if (v9 != *(_DWORD *)(result + 92))
          goto LABEL_21;
        v10 = *(const xmlChar **)(v5 + 104);
        if ((!v10 || (v11 = *(const xmlChar **)(result + 104)) == 0)
          && ((v10 = *(const xmlChar **)(v5 + 96)) == 0 || (v11 = *(const xmlChar **)(result + 96)) == 0)
          && ((v10 = *(const xmlChar **)(v5 + 80)) == 0 || (v11 = *(const xmlChar **)(result + 80)) == 0)
          || (result = xmlStrEqual(v10, v11), !(_DWORD)result))
        {
          v9 = *(_DWORD *)(v5 + 92);
LABEL_21:
          if (v9 > 6 || ((1 << v9) & 0x76) == 0)
            return (uint64_t)xmlXIncludeErr(v2, v5, 1602, "mismatch in redefinition of entity %s\n", *(const xmlChar **)(v5 + 16));
        }
      }
    }
  }
  return result;
}

xmlNodePtr xmlXIncludeCopyNode(xmlDocPtr doc, uint64_t a2, xmlNodePtr node)
{
  xmlElementType type;

  type = node->type;
  if (type == XML_DTD_NODE)
    return 0;
  if (type == XML_DOCUMENT_NODE)
    return (xmlNodePtr)xmlXIncludeCopyNodeList(doc, a2, node->children);
  return xmlDocCopyNode(node, doc, 1);
}

uint64_t xmlXIncludeGetNthChild(uint64_t a1, int a2)
{
  uint64_t result;
  int v3;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (*(_DWORD *)(a1 + 8) == 18)
    return 0;
  result = *(_QWORD *)(a1 + 24);
  if ((a2 & 0x80000000) == 0)
  {
    v3 = 0;
    do
    {
      if (!result)
        break;
      v4 = *(_DWORD *)(result + 8);
      v5 = v4 > 0xD;
      v6 = (1 << v4) & 0x2202;
      if (!v5 && v6 != 0 && ++v3 == a2)
        break;
      result = *(_QWORD *)(result + 48);
    }
    while (v3 <= a2);
  }
  return result;
}

xmlChar *xmlXIncludeAddTxt(uint64_t a1, xmlChar *cur, const xmlChar *a3)
{
  int v6;
  void *v7;
  void *v8;
  int v9;
  void *v10;
  void *v11;
  xmlChar *result;
  uint64_t v13;

  v6 = *(_DWORD *)(a1 + 36);
  if (!v6)
  {
    *(_DWORD *)(a1 + 36) = 4;
    v7 = xmlMalloc(0x20uLL);
    *(_QWORD *)(a1 + 40) = v7;
    if (!v7)
      return (xmlChar *)xmlXIncludeErrMemory(a1, 0, (const xmlChar *)"processing text");
    v8 = xmlMalloc(8 * *(int *)(a1 + 36));
    *(_QWORD *)(a1 + 48) = v8;
    if (!v8)
      return (xmlChar *)xmlXIncludeErrMemory(a1, 0, (const xmlChar *)"processing text");
    v6 = *(_DWORD *)(a1 + 36);
  }
  if (*(_DWORD *)(a1 + 32) < v6
    || (v9 = 2 * v6,
        *(_DWORD *)(a1 + 36) = v9,
        v10 = xmlRealloc(*(void **)(a1 + 40), 8 * v9),
        (*(_QWORD *)(a1 + 40) = v10) != 0)
    && (v11 = xmlRealloc(*(void **)(a1 + 48), 8 * *(int *)(a1 + 36)), (*(_QWORD *)(a1 + 48) = v11) != 0))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * *(int *)(a1 + 32)) = xmlStrdup(cur);
    result = xmlStrdup(a3);
    v13 = *(int *)(a1 + 32);
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v13) = result;
    *(_DWORD *)(a1 + 32) = v13 + 1;
    return result;
  }
  return (xmlChar *)xmlXIncludeErrMemory(a1, 0, (const xmlChar *)"processing text");
}

xlinkHandlerPtr xlinkGetDefaultHandler(void)
{
  return (xlinkHandlerPtr)xlinkDefaultHandler;
}

void xlinkSetDefaultHandler(xlinkHandlerPtr handler)
{
  xlinkDefaultHandler = (uint64_t)handler;
}

xlinkNodeDetectFunc xlinkGetDefaultDetect(void)
{
  return (xlinkNodeDetectFunc)xlinkDefaultDetect;
}

void xlinkSetDefaultDetect(xlinkNodeDetectFunc func)
{
  xlinkDefaultDetect = (uint64_t)func;
}

xlinkType xlinkIsLink(xmlDocPtr doc, xmlNodePtr node)
{
  xmlNodePtr v2;
  xmlDocPtr v3;
  xmlNs *ns;
  xmlChar *NsProp;
  xmlChar *v6;
  xmlChar *v8;
  xmlChar *v9;
  xmlNsPtr v10;
  char *v11;
  char __str[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[24];
  uint64_t v24;

  v2 = node;
  v24 = *MEMORY[0x1E0C80C00];
  if (node)
  {
    v3 = doc;
    if (!doc && (v3 = node->doc) == 0 || v3->type != XML_HTML_DOCUMENT_NODE)
    {
      ns = node->ns;
      if (ns)
        xmlStrEqual(ns->href, (const xmlChar *)"http://www.w3.org/1999/xhtml/");
    }
    NsProp = xmlGetNsProp(v2, (const xmlChar *)"type", (const xmlChar *)"http://www.w3.org/1999/xlink/namespace/");
    if (!NsProp)
    {
      LODWORD(v2) = 0;
      return v2;
    }
    v6 = NsProp;
    if (xmlStrEqual(NsProp, (const xmlChar *)"simple"))
    {
      LODWORD(v2) = 1;
LABEL_10:
      xmlFree(v6);
      return v2;
    }
    if (!xmlStrEqual(v6, (const xmlChar *)"extended"))
    {
      LODWORD(v2) = 0;
      goto LABEL_10;
    }
    v8 = xmlGetNsProp(v2, (const xmlChar *)"role", (const xmlChar *)"http://www.w3.org/1999/xlink/namespace/");
    if (!v8)
    {
      LODWORD(v2) = 2;
      goto LABEL_10;
    }
    v9 = v8;
    v10 = xmlSearchNs(v3, v2, (const xmlChar *)"http://www.w3.org/1999/xlink/namespace/");
    if (v10)
    {
      v22 = 0u;
      memset(v23, 0, 23);
      v20 = 0u;
      v21 = 0u;
      v18 = 0u;
      v19 = 0u;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      *(_OWORD *)__str = 0u;
      v13 = 0u;
      snprintf(__str, 0xC8uLL, "%s:external-linkset", (const char *)v10->prefix);
      v23[23] = 0;
      v11 = __str;
    }
    else
    {
      v11 = "xlink:external-linkset";
    }
    xmlStrEqual(v9, (const xmlChar *)v11);
    xmlFree(v6);
    xmlFree(v9);
    LODWORD(v2) = 2;
  }
  return v2;
}

_DWORD *__xmlIOErr(unsigned int a1, int a2, const xmlChar *a3)
{
  int v5;

  if (!a2)
  {
    v5 = *__error();
    if (!v5)
    {
      a2 = 0;
      return __xmlSimpleError(a1, a2, 0, IOerr[v5], a3);
    }
    if (*__error() == 13)
    {
      a2 = 1501;
    }
    else if (*__error() == 35)
    {
      a2 = 1502;
    }
    else if (*__error() == 9)
    {
      a2 = 1503;
    }
    else if (*__error() == 94)
    {
      a2 = 1504;
    }
    else if (*__error() == 16)
    {
      a2 = 1505;
    }
    else if (*__error() == 89)
    {
      a2 = 1506;
    }
    else if (*__error() == 10)
    {
      a2 = 1507;
    }
    else if (*__error() == 11)
    {
      a2 = 1508;
    }
    else if (*__error() == 33)
    {
      a2 = 1509;
    }
    else if (*__error() == 17)
    {
      a2 = 1510;
    }
    else if (*__error() == 14)
    {
      a2 = 1511;
    }
    else if (*__error() == 27)
    {
      a2 = 1512;
    }
    else
    {
      if (*__error() != 36)
      {
        if (*__error() == 4)
        {
          a2 = 1514;
          goto LABEL_99;
        }
        if (*__error() == 22)
        {
          a2 = 1515;
          goto LABEL_99;
        }
        if (*__error() == 5)
        {
          a2 = 1516;
          goto LABEL_99;
        }
        if (*__error() == 21)
        {
          a2 = 1517;
          goto LABEL_99;
        }
        if (*__error() == 24)
        {
          a2 = 1518;
          goto LABEL_99;
        }
        if (*__error() == 31)
        {
          a2 = 1519;
          goto LABEL_99;
        }
        if (*__error() == 40)
        {
          a2 = 1520;
          goto LABEL_99;
        }
        if (*__error() == 63)
        {
          a2 = 1521;
          goto LABEL_99;
        }
        if (*__error() == 23)
        {
          a2 = 1522;
          goto LABEL_99;
        }
        if (*__error() == 19)
        {
          a2 = 1523;
          goto LABEL_99;
        }
        if (*__error() == 2)
        {
          a2 = 1524;
          goto LABEL_99;
        }
        if (*__error() == 8)
        {
          a2 = 1525;
          goto LABEL_99;
        }
        if (*__error() == 77)
        {
          a2 = 1526;
          goto LABEL_99;
        }
        if (*__error() == 12)
        {
          a2 = 1527;
          goto LABEL_99;
        }
        if (*__error() == 28)
        {
          a2 = 1528;
          goto LABEL_99;
        }
        if (*__error() == 78)
        {
          a2 = 1529;
          goto LABEL_99;
        }
        if (*__error() == 20)
        {
          a2 = 1530;
          goto LABEL_99;
        }
        if (*__error() == 66)
        {
          a2 = 1531;
          goto LABEL_99;
        }
        if (*__error() == 45)
        {
          a2 = 1532;
          goto LABEL_99;
        }
        if (*__error() == 25)
        {
          a2 = 1533;
          goto LABEL_99;
        }
        if (*__error() == 6)
        {
          a2 = 1534;
          goto LABEL_99;
        }
        if (*__error() == 1)
        {
          a2 = 1535;
          goto LABEL_99;
        }
        if (*__error() == 32)
        {
          a2 = 1536;
          goto LABEL_99;
        }
        if (*__error() == 34)
        {
          a2 = 1537;
          goto LABEL_99;
        }
        if (*__error() == 30)
        {
          a2 = 1538;
          goto LABEL_99;
        }
        if (*__error() == 29)
        {
          a2 = 1539;
          goto LABEL_99;
        }
        if (*__error() == 3)
        {
          a2 = 1540;
          goto LABEL_99;
        }
        if (*__error() == 60)
          goto LABEL_90;
        if (*__error() == 18)
        {
          a2 = 1542;
          goto LABEL_99;
        }
        if (*__error() == 38)
        {
          a2 = 1550;
          goto LABEL_99;
        }
        if (*__error() == 56)
        {
          a2 = 1551;
          goto LABEL_99;
        }
        if (*__error() == 61)
        {
          a2 = 1552;
          goto LABEL_99;
        }
        if (*__error() == 60)
        {
LABEL_90:
          a2 = 1541;
          goto LABEL_99;
        }
        if (*__error() == 51)
        {
          a2 = 1553;
          goto LABEL_99;
        }
        if (*__error() == 48)
        {
          a2 = 1554;
          goto LABEL_99;
        }
        if (*__error() != 36)
        {
          if (*__error() == 37)
          {
            a2 = 1555;
          }
          else if (*__error() == 47)
          {
            a2 = 1556;
          }
          else
          {
            a2 = 1500;
          }
          goto LABEL_99;
        }
      }
      a2 = 1513;
    }
LABEL_99:
    v5 = a2 - 1500;
    return __xmlSimpleError(a1, a2, 0, IOerr[v5], a3);
  }
  v5 = a2 - 1500;
  if ((a2 - 1500) > 0x38)
    v5 = 0;
  if (a2 < 1500)
    v5 = 0;
  return __xmlSimpleError(a1, a2, 0, IOerr[v5], a3);
}

_DWORD *__xmlLoaderErr(_DWORD *result, const char *a2, const xmlChar *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  void (*v7)(void *, const char *, ...);

  v3 = result;
  if (!result)
  {
    v7 = 0;
    v4 = 0;
    goto LABEL_12;
  }
  if (!result[83] || result[68] != -1)
  {
    v4 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v5 = 176;
      if (result[39])
      {
        v6 = 2;
      }
      else
      {
        v5 = 168;
        v6 = 1;
      }
      v7 = *(void (**)(void *, const char *, ...))(v4 + v5);
      if (*(_DWORD *)(v4 + 216) == -554844497)
        result = *(_DWORD **)(v4 + 248);
      else
        result = 0;
      v4 = v3[1];
      return __xmlRaiseError((xmlStructuredErrorFunc)result, v7, (void *)v4, v3, 0, 8u, 1549, v6, 0, 0, a3, 0, 0, 0, 0, a2, (char)a3);
    }
    result = 0;
    v7 = 0;
LABEL_12:
    v6 = 2;
    return __xmlRaiseError((xmlStructuredErrorFunc)result, v7, (void *)v4, v3, 0, 8u, 1549, v6, 0, 0, a3, 0, 0, 0, 0, a2, (char)a3);
  }
  return result;
}

void xmlCleanupInputCallbacks(void)
{
  if (xmlInputCallbackInitialized == 1)
  {
    if (xmlInputCallbackNr >= 1)
      bzero(&xmlInputCallbackTable, 32 * xmlInputCallbackNr);
    xmlInputCallbackNr = 0;
    xmlInputCallbackInitialized = 0;
  }
}

int xmlPopInputCallbacks(void)
{
  uint64_t v0;
  _OWORD *v1;

  if (xmlInputCallbackInitialized == 1 && (v0 = (xmlInputCallbackNr - 1), xmlInputCallbackNr >= 1))
  {
    --xmlInputCallbackNr;
    v1 = (_OWORD *)((char *)&xmlInputCallbackTable + 32 * v0);
    *v1 = 0u;
    v1[1] = 0u;
  }
  else
  {
    LODWORD(v0) = -1;
  }
  return v0;
}

void xmlCleanupOutputCallbacks(void)
{
  if (xmlOutputCallbackInitialized == 1)
  {
    if (xmlOutputCallbackNr >= 1)
      bzero(&xmlOutputCallbackTable, 32 * xmlOutputCallbackNr);
    xmlOutputCallbackNr = 0;
    xmlOutputCallbackInitialized = 0;
  }
}

int xmlPopOutputCallbacks(void)
{
  uint64_t v0;
  _OWORD *v1;

  if (xmlOutputCallbackInitialized == 1 && (v0 = (xmlOutputCallbackNr - 1), xmlOutputCallbackNr >= 1))
  {
    --xmlOutputCallbackNr;
    v1 = (_OWORD *)((char *)&xmlOutputCallbackTable + 32 * v0);
    *v1 = 0u;
    v1[1] = 0u;
  }
  else
  {
    LODWORD(v0) = -1;
  }
  return v0;
}

int xmlCheckFilename(const char *path)
{
  stat v2;

  if (path)
  {
    memset(&v2, 0, sizeof(v2));
    if (stat(path, &v2) == -1)
    {
      LODWORD(path) = 0;
    }
    else if ((v2.st_mode & 0xF000) == 0x4000)
    {
      LODWORD(path) = 2;
    }
    else
    {
      LODWORD(path) = 1;
    }
  }
  return (int)path;
}

int xmlFileMatch(const char *filename)
{
  return 1;
}

void *__cdecl xmlFileOpen(const char *filename)
{
  void *result;
  void *v3;
  FILE *v4;

  result = xmlFileOpen_real((FILE *)filename);
  if (!result)
  {
    result = xmlURIUnescapeString(filename, 0, 0);
    if (result)
    {
      v3 = result;
      v4 = xmlFileOpen_real((FILE *)result);
      xmlFree(v3);
      return v4;
    }
  }
  return result;
}

FILE *xmlFileOpen_real(FILE *result)
{
  const xmlChar *v1;
  int v2;
  uint64_t v3;
  const char *v4;
  stat v5;

  if (result)
  {
    v1 = (const xmlChar *)result;
    if (!strcmp((const char *)result, "-"))
      return (FILE *)*MEMORY[0x1E0C80C18];
    if (xmlStrncasecmp(v1, (const xmlChar *)"file://localhost/", 17))
    {
      if (xmlStrncasecmp(v1, (const xmlChar *)"file:///", 8))
      {
        v2 = xmlStrncasecmp(v1, (const xmlChar *)"file:/", 6);
        v3 = 5;
        if (v2)
          v3 = 0;
      }
      else
      {
        v3 = 7;
      }
    }
    else
    {
      v3 = 16;
    }
    v4 = (const char *)&v1[v3];
    memset(&v5, 0, sizeof(v5));
    if (stat(v4, &v5) != -1)
    {
      result = fopen(v4, "r");
      if (result)
        return result;
      __xmlIOErr(8u, 0, (const xmlChar *)v4);
    }
    return 0;
  }
  return result;
}

int xmlFileRead(void *context, char *buffer, int len)
{
  int v3;

  v3 = -1;
  if (context)
  {
    if (buffer)
    {
      v3 = fread(buffer, 1uLL, len, (FILE *)context);
      if (v3 < 0)
        __xmlIOErr(8u, 0, (const xmlChar *)"fread()");
    }
  }
  return v3;
}

int xmlFileClose(void *context)
{
  int v2;
  const char *v3;

  if (!context)
    return -1;
  if ((void *)*MEMORY[0x1E0C80C20] != context && *MEMORY[0x1E0C80C10] != (_QWORD)context)
  {
    if ((void *)*MEMORY[0x1E0C80C18] == context || fclose((FILE *)context) != -1)
      return 0;
    v2 = -1;
    v3 = "fclose()";
LABEL_14:
    __xmlIOErr(8u, 0, (const xmlChar *)v3);
    return v2;
  }
  v2 = 0;
  if (fflush((FILE *)context) < 0)
  {
    v3 = "fflush()";
    goto LABEL_14;
  }
  return v2;
}

int xmlIOHTTPMatch(const char *filename)
{
  return xmlStrncasecmp((const xmlChar *)filename, (const xmlChar *)"http://", 7) == 0;
}

void *__cdecl xmlIOHTTPOpen(const char *filename)
{
  return xmlNanoHTTPOpen(filename, 0);
}

void *__cdecl xmlIOHTTPOpenW(const char *post_uri, int compression)
{
  _QWORD *v4;
  _QWORD *v5;
  xmlChar *v6;
  _QWORD *v7;
  _QWORD *v8;
  void *v9;
  int v10;
  int v11;
  const char *v12;
  xmlChar *v13;
  int v14;
  int v15;
  xmlChar buf[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  if (!post_uri)
    return 0;
  v4 = xmlMalloc(0x18uLL);
  v5 = v4;
  if (!v4)
  {
    __xmlSimpleError(8u, 2, 0, 0, (const xmlChar *)"creating HTTP output context");
    return v5;
  }
  *v4 = 0;
  v4[1] = 0;
  v4[2] = 0;
  v6 = xmlStrdup((const xmlChar *)post_uri);
  v5[1] = v6;
  if (!v6)
  {
    __xmlSimpleError(8u, 2, 0, 0, (const xmlChar *)"copying URI");
LABEL_17:
    xmlFreeHTTPWriteCtxt(v5);
    return 0;
  }
  if ((compression - 1) > 8)
  {
    v8 = xmlAllocOutputBufferInternal(0);
    goto LABEL_16;
  }
  *(_DWORD *)v5 = compression;
  v7 = xmlMalloc(0x88uLL);
  v8 = v7;
  if (!v7)
  {
    __xmlSimpleError(8u, 2, 0, 0, (const xmlChar *)"creating buffer context");
    goto LABEL_16;
  }
  v7[16] = 0;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *v7 = 0x8000;
  v9 = xmlMalloc(0x8000uLL);
  v8[2] = v9;
  if (!v9)
  {
    xmlFree(0);
    deflateEnd((z_streamp)(v8 + 3));
    xmlFree(v8);
    v13 = (xmlChar *)"creating buffer";
    v14 = 2;
    v12 = 0;
    goto LABEL_14;
  }
  v10 = deflateInit2_((z_streamp)(v8 + 3), compression, 8, -15, 8, 0, "1.2.12", 112);
  if (v10)
  {
    v11 = v10;
    v48 = 0;
    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    *(_OWORD *)buf = 0u;
    xmlFree((void *)v8[2]);
    deflateEnd((z_streamp)(v8 + 3));
    xmlFree(v8);
    xmlStrPrintf(buf, 500, "xmlCreateZMemBuff:  %s %d\n", "Error initializing compression context.  ZLIB error:", v11);
    v12 = "write error";
    v13 = buf;
    v14 = 1546;
LABEL_14:
    __xmlSimpleError(8u, v14, 0, v12, v13);
    v8 = 0;
    goto LABEL_16;
  }
  v8[1] = crc32(0, 0, 0);
  v15 = snprintf((char *)v8[2], *v8, "%c%c%c%c%c%c%c%c%c%c", 31, 139, 8, 0, 0, 0, 0, 0, 0, 3);
  v8[6] = v8[2] + v15;
  *((_DWORD *)v8 + 14) = *(_DWORD *)v8 - v15;
LABEL_16:
  v5[2] = v8;
  if (!v8)
    goto LABEL_17;
  return v5;
}

void xmlFreeHTTPWriteCtxt(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)*((_QWORD *)a1 + 1);
  if (v2)
    xmlFree(v2);
  v3 = *((_QWORD *)a1 + 2);
  if (v3)
  {
    if (*(int *)a1 < 1)
    {
      xmlOutputBufferClose(*((xmlOutputBufferPtr *)a1 + 2));
    }
    else
    {
      xmlFree(*(void **)(v3 + 16));
      deflateEnd((z_streamp)(v3 + 24));
      xmlFree((void *)v3);
    }
  }
  xmlFree(a1);
}

int xmlIOHTTPRead(void *context, char *buffer, int len)
{
  if (!buffer || len < 0)
    return -1;
  else
    return xmlNanoHTTPRead(context, buffer, len);
}

int xmlIOHTTPClose(void *context)
{
  xmlNanoHTTPClose(context);
  return 0;
}

int xmlIOFTPMatch(const char *filename)
{
  return xmlStrncasecmp((const xmlChar *)filename, (const xmlChar *)"ftp://", 6) == 0;
}

int xmlIOFTPRead(void *context, char *buffer, int len)
{
  if (!buffer || len < 0)
    return -1;
  else
    return xmlNanoFTPRead(context, buffer, len);
}

int xmlRegisterInputCallbacks(xmlInputMatchCallback matchFunc, xmlInputOpenCallback openFunc, xmlInputReadCallback readFunc, xmlInputCloseCallback closeFunc)
{
  int result;
  xmlInputMatchCallback *v6;

  result = xmlInputCallbackNr;
  if (xmlInputCallbackNr > 14)
    return -1;
  v6 = (xmlInputMatchCallback *)((char *)&xmlInputCallbackTable + 32 * xmlInputCallbackNr);
  *v6 = matchFunc;
  v6[1] = (xmlInputMatchCallback)openFunc;
  v6[2] = (xmlInputMatchCallback)readFunc;
  v6[3] = (xmlInputMatchCallback)closeFunc;
  xmlInputCallbackInitialized = 1;
  xmlInputCallbackNr = result + 1;
  return result;
}

int xmlRegisterOutputCallbacks(xmlOutputMatchCallback matchFunc, xmlOutputOpenCallback openFunc, xmlOutputWriteCallback writeFunc, xmlOutputCloseCallback closeFunc)
{
  int result;
  xmlOutputMatchCallback *v6;

  result = xmlOutputCallbackNr;
  if (xmlOutputCallbackNr > 14)
    return -1;
  v6 = (xmlOutputMatchCallback *)((char *)&xmlOutputCallbackTable + 32 * xmlOutputCallbackNr);
  *v6 = matchFunc;
  v6[1] = (xmlOutputMatchCallback)openFunc;
  v6[2] = (xmlOutputMatchCallback)writeFunc;
  v6[3] = (xmlOutputMatchCallback)closeFunc;
  xmlOutputCallbackInitialized = 1;
  xmlOutputCallbackNr = result + 1;
  return result;
}

uint64_t xmlGzfileMatch()
{
  return 1;
}

gzFile xmlGzfileOpen(const char *a1)
{
  gzFile v2;
  char *v3;
  char *v4;

  v2 = xmlGzfileOpen_real(a1);
  if (!v2)
  {
    v3 = xmlURIUnescapeString(a1, 0, 0);
    v4 = v3;
    if (v3)
      v2 = xmlGzfileOpen_real(v3);
    else
      v2 = 0;
    xmlFree(v4);
  }
  return v2;
}

uint64_t xmlGzfileRead(gzFile_s *a1, void *a2, unsigned int a3)
{
  uint64_t v3;

  v3 = gzread(a1, a2, a3);
  if ((v3 & 0x80000000) != 0)
    __xmlIOErr(8u, 0, (const xmlChar *)"gzread()");
  return v3;
}

uint64_t xmlGzfileClose(gzFile_s *a1)
{
  if (!gzclose(a1))
    return 0;
  __xmlIOErr(8u, 0, (const xmlChar *)"gzclose()");
  return 0xFFFFFFFFLL;
}

FILE *xmlFileOpenW(const char *a1)
{
  const xmlChar *v1;
  FILE *result;

  v1 = (const xmlChar *)a1;
  if (!strcmp(a1, "-"))
    return (FILE *)*MEMORY[0x1E0C80C20];
  if (xmlStrncasecmp(v1, (const xmlChar *)"file://localhost/", 17))
  {
    if (xmlStrncasecmp(v1, (const xmlChar *)"file:///", 8))
    {
      if (!v1)
        return 0;
    }
    else
    {
      v1 += 7;
    }
  }
  else
  {
    v1 += 16;
  }
  result = fopen((const char *)v1, "wb");
  if (result)
    return result;
  __xmlIOErr(8u, 0, v1);
  return 0;
}

uint64_t xmlFileWrite(FILE *__stream, void *__ptr, int a3)
{
  uint64_t result;
  int v6;

  result = 0xFFFFFFFFLL;
  if (__stream && __ptr)
  {
    v6 = fwrite(__ptr, a3, 1uLL, __stream);
    if (v6 || !ferror(__stream))
    {
      return (v6 * a3);
    }
    else
    {
      __xmlIOErr(8u, 0, (const xmlChar *)"fwrite()");
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

void *xmlIOHTTPDfltOpenW(const char *a1)
{
  return xmlIOHTTPOpenW(a1, 0);
}

uint64_t xmlIOHTTPWrite(uint64_t a1, const Bytef *buf, uint64_t len)
{
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  xmlChar bufa[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (buf)
  {
    v6 = *(_QWORD *)(a1 + 16);
    if (v6)
    {
      v7 = len;
      if ((int)len < 1)
        return v7;
      if (*(int *)a1 >= 1)
      {
        *(_QWORD *)(v6 + 24) = buf;
        *(_DWORD *)(v6 + 32) = len;
        v8 = len;
        while (*(_DWORD *)(v6 + 56) > v8 / 5 || xmlZMemBuffExtend(v6, *(_QWORD *)v6) != -1)
        {
          v9 = deflate((z_streamp)(v6 + 24), 0);
          if (v9)
          {
            v41 = 0;
            v39 = 0u;
            v40 = 0u;
            v37 = 0u;
            v38 = 0u;
            v35 = 0u;
            v36 = 0u;
            v33 = 0u;
            v34 = 0u;
            v31 = 0u;
            v32 = 0u;
            v29 = 0u;
            v30 = 0u;
            v27 = 0u;
            v28 = 0u;
            v25 = 0u;
            v26 = 0u;
            v23 = 0u;
            v24 = 0u;
            v21 = 0u;
            v22 = 0u;
            v19 = 0u;
            v20 = 0u;
            v17 = 0u;
            v18 = 0u;
            v15 = 0u;
            v16 = 0u;
            v13 = 0u;
            v14 = 0u;
            v11 = 0u;
            v12 = 0u;
            *(_OWORD *)bufa = 0u;
            xmlStrPrintf(bufa, 500, "xmlZMemBuffAppend:  %s %d %s - %d", "Compression error while appending", v7, "bytes to buffer.  ZLIB error", v9);
            __xmlSimpleError(8u, 1546, 0, "write error", bufa);
            break;
          }
          v8 = *(_DWORD *)(v6 + 32);
          if (!v8)
          {
            *(_QWORD *)(v6 + 8) = crc32(*(_QWORD *)(v6 + 8), buf, v7);
            goto LABEL_14;
          }
        }
        v7 = 0xFFFFFFFFLL;
        goto LABEL_18;
      }
      v7 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)(a1 + 16), len, (const char *)buf);
LABEL_14:
      result = v7;
      if ((v7 & 0x80000000) != 0)
      {
LABEL_18:
        v41 = 0;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        v13 = 0u;
        v14 = 0u;
        v11 = 0u;
        v12 = 0u;
        *(_OWORD *)bufa = 0u;
        xmlStrPrintf(bufa, 500, "xmlIOHTTPWrite:  %s\n%s '%s'.\n", "Error appending to internal buffer.", "Error sending document to URI", *(const char **)(a1 + 8));
        __xmlSimpleError(8u, 1546, 0, "write error", bufa);
        return v7;
      }
    }
  }
  return result;
}

uint64_t xmlIOHTTPClosePut(int *a1)
{
  return xmlIOHTTPCloseWrite(a1, "PUT");
}

void xmlRegisterHTTPPostCallbacks(void)
{
  int v0;
  int (__cdecl **v1)(const char *);

  if ((xmlOutputCallbackInitialized & 1) == 0)
    xmlRegisterDefaultOutputCallbacks();
  v0 = xmlOutputCallbackNr;
  if (xmlOutputCallbackNr <= 14)
  {
    v1 = (int (__cdecl **)(const char *))((char *)&xmlOutputCallbackTable + 32 * xmlOutputCallbackNr);
    *v1 = xmlIOHTTPMatch;
    v1[1] = (int (__cdecl *)(const char *))xmlIOHTTPDfltOpenW;
    v1[2] = (int (__cdecl *)(const char *))xmlIOHTTPWrite;
    v1[3] = (int (__cdecl *)(const char *))xmlIOHTTPClosePost;
    xmlOutputCallbackInitialized = 1;
    xmlOutputCallbackNr = v0 + 1;
  }
}

uint64_t xmlIOHTTPClosePost(int *a1)
{
  return xmlIOHTTPCloseWrite(a1, "POST");
}

xmlOutputBufferPtr xmlAllocOutputBuffer(xmlCharEncodingHandlerPtr encoder)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *Size;

  v2 = xmlMalloc(0x38uLL);
  v3 = v2;
  if (v2)
  {
    v2[6] = 0;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
    v4 = xmlBufCreate();
    v3[4] = v4;
    if (v4)
    {
      if (xmlBufGetAllocationScheme((uint64_t)v4) == 1)
        xmlBufSetAllocationScheme(v3[4], 0);
      v3[3] = encoder;
      if (!encoder)
      {
        v3[5] = 0;
        goto LABEL_10;
      }
      Size = xmlBufCreateSize(4000);
      v3[5] = Size;
      if (Size)
      {
        xmlCharEncOutput(v3, 1);
LABEL_10:
        *((_DWORD *)v3 + 12) = 0;
        v3[1] = 0;
        v3[2] = 0;
        *v3 = 0;
        return (xmlOutputBufferPtr)v3;
      }
      xmlBufFree((_DWORD *)v3[4]);
    }
    xmlFree(v3);
    return 0;
  }
  __xmlSimpleError(8u, 2, 0, 0, (const xmlChar *)"creating output buffer");
  return (xmlOutputBufferPtr)v3;
}

xmlParserInputBufferPtr __xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(const char *);
  char *v7;
  gzFile (**v8)(const char *);
  uint64_t (*v9)(const char *);
  uint64_t v10;
  xmlParserInputBuffer *v11;
  gzFile_s *v13;
  xmlParserInputBufferPtr v14;

  if ((xmlInputCallbackInitialized & 1) == 0)
    xmlRegisterDefaultInputCallbacks();
  if (!URI || xmlInputCallbackNr < 1)
    return 0;
  v4 = xmlInputCallbackNr + 1;
  while (1)
  {
    v5 = (v4 - 2);
    v6 = (unsigned int (*)(const char *))*((_QWORD *)&xmlInputCallbackTable + 4 * v5);
    if (v6)
    {
      if (v6(URI))
      {
        v7 = (char *)&xmlInputCallbackTable + 32 * v5;
        v9 = (uint64_t (*)(const char *))*((_QWORD *)v7 + 1);
        v8 = (gzFile (**)(const char *))(v7 + 8);
        v10 = v9(URI);
        if (v10)
          break;
      }
    }
    if ((unint64_t)--v4 <= 1)
      return 0;
  }
  v13 = (gzFile_s *)v10;
  v14 = xmlAllocParserInputBuffer(enc);
  v11 = v14;
  if (v14)
  {
    v14->context = v13;
    *(_OWORD *)&v14->readcallback = *((_OWORD *)&xmlInputCallbackTable + 2 * v5 + 1);
    if (*v8 == xmlGzfileOpen && strcmp(URI, "-"))
      v11->compressed = gzdirect(v13) == 0;
  }
  else
  {
    (*((void (**)(gzFile_s *))&xmlInputCallbackTable + 4 * v5 + 3))(v13);
  }
  return v11;
}

xmlParserInputBufferPtr xmlParserInputBufferCreateFilename(const char *URI, xmlCharEncoding enc)
{
  uint64_t v2;
  xmlParserInputBufferCreateFilenameFunc v4;

  v2 = *(_QWORD *)&enc;
  if (!*__xmlParserInputBufferCreateFilenameValue())
    return __xmlParserInputBufferCreateFilename(URI, (xmlCharEncoding)v2);
  v4 = *__xmlParserInputBufferCreateFilenameValue();
  return (xmlParserInputBufferPtr)((uint64_t (*)(const char *, uint64_t))v4)(URI, v2);
}

xmlOutputBufferPtr __xmlOutputBufferCreateFilename(const char *URI, xmlCharEncodingHandlerPtr encoder, int compression)
{
  xmlURIPtr v6;
  xmlURI *v7;
  const xmlChar *scheme;
  _BOOL4 v9;
  char *v10;
  gzFile v11;
  gzFile v12;
  xmlOutputBuffer *v13;
  xmlOutputBuffer *v14;
  uint64_t v15;
  uint64_t v16;
  int (__cdecl **v17)(const char *);
  void *v18;
  void *v19;
  gzFile v20;
  gzFile_s *v21;
  xmlOutputBuffer *v22;
  uint64_t v23;
  uint64_t v24;
  int (__cdecl **v25)(const char *);
  void *v26;
  unsigned int v28;
  _QWORD *v29;

  if ((xmlOutputCallbackInitialized & 1) == 0)
    xmlRegisterDefaultOutputCallbacks();
  if (!URI)
    return 0;
  v6 = xmlParseURI(URI);
  if (!v6)
  {
    v9 = 1;
    goto LABEL_28;
  }
  v7 = v6;
  scheme = (const xmlChar *)v6->scheme;
  if (scheme)
  {
    v9 = xmlStrEqual(scheme, (const xmlChar *)"file") != 0;
    if (v7->scheme && !xmlStrEqual((const xmlChar *)v7->scheme, (const xmlChar *)"file"))
    {
      xmlFreeURI(v7);
LABEL_28:
      if ((compression - 1) <= 8 && v9)
      {
        v20 = xmlGzfileOpenW((const xmlChar *)URI, compression);
        if (v20)
        {
          v21 = v20;
          v22 = (xmlOutputBuffer *)xmlAllocOutputBufferInternal((uint64_t)encoder);
          v14 = v22;
          if (v22)
          {
            v22->context = v21;
            v22->writecallback = (xmlOutputWriteCallback)xmlGzfileWrite;
            v22->closecallback = (xmlOutputCloseCallback)xmlGzfileClose;
          }
          else
          {
            xmlGzfileClose(v21);
          }
          return v14;
        }
      }
      if (xmlOutputCallbackNr >= 1)
      {
        v23 = xmlOutputCallbackNr + 1;
        while (1)
        {
          v24 = (v23 - 2);
          v25 = (int (__cdecl **)(const char *))((char *)&xmlOutputCallbackTable + 32 * v24);
          if (*v25)
          {
            if (((unsigned int (*)(const char *))*v25)(URI))
            {
              v26 = *v25 == xmlIOHTTPMatch
                  ? xmlIOHTTPOpenW(URI, compression)
                  : (void *)(*((uint64_t (**)(const char *))&xmlOutputCallbackTable + 4 * v24 + 1))(URI);
              v19 = v26;
              if (v26)
                break;
            }
          }
          if ((unint64_t)--v23 <= 1)
            return 0;
        }
        v28 = v23 - 2;
LABEL_47:
        v29 = xmlAllocOutputBufferInternal((uint64_t)encoder);
        v14 = (xmlOutputBuffer *)v29;
        if (v29)
        {
          *v29 = v19;
          *(_OWORD *)(v29 + 1) = *((_OWORD *)&xmlOutputCallbackTable + 2 * v28 + 1);
        }
        return v14;
      }
      return 0;
    }
  }
  else
  {
    v9 = 1;
  }
  v10 = xmlURIUnescapeString(URI, 0, 0);
  xmlFreeURI(v7);
  if (!v10)
    goto LABEL_28;
  if ((compression - 1) > 8 || !v9 || (v11 = xmlGzfileOpenW((const xmlChar *)v10, compression)) == 0)
  {
    if (xmlOutputCallbackNr >= 1)
    {
      v15 = xmlOutputCallbackNr + 1;
      while (1)
      {
        v16 = (v15 - 2);
        v17 = (int (__cdecl **)(const char *))((char *)&xmlOutputCallbackTable + 32 * v16);
        if (*v17)
        {
          if (((unsigned int (*)(char *))*v17)(v10))
          {
            v18 = *v17 == xmlIOHTTPMatch
                ? xmlIOHTTPOpenW(v10, compression)
                : (void *)(*((uint64_t (**)(char *))&xmlOutputCallbackTable + 4 * v16 + 1))(v10);
            v19 = v18;
            if (v18)
              break;
          }
        }
        if ((unint64_t)--v15 <= 1)
          goto LABEL_27;
      }
      xmlFree(v10);
      v28 = v15 - 2;
      goto LABEL_47;
    }
LABEL_27:
    xmlFree(v10);
    goto LABEL_28;
  }
  v12 = v11;
  v13 = (xmlOutputBuffer *)xmlAllocOutputBufferInternal((uint64_t)encoder);
  v14 = v13;
  if (v13)
  {
    v13->context = v12;
    v13->writecallback = (xmlOutputWriteCallback)xmlGzfileWrite;
    v13->closecallback = (xmlOutputCloseCallback)xmlGzfileClose;
  }
  xmlFree(v10);
  return v14;
}

gzFile xmlGzfileOpenW(const xmlChar *a1, int a2)
{
  int v3;
  int v4;
  gzFile result;
  char __str[16];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&__str[7] = 0;
  *(_QWORD *)__str = 0;
  snprintf(__str, 0xFuLL, "wb%d", a2);
  if (!strcmp((const char *)a1, "-"))
  {
    v3 = fileno((FILE *)*MEMORY[0x1E0C80C20]);
    v4 = dup(v3);
    result = gzdopen(v4, "rb");
    if ((v4 & 0x80000000) == 0 && !result)
    {
      close(v4);
      return 0;
    }
  }
  else
  {
    if (xmlStrncasecmp(a1, (const xmlChar *)"file://localhost/", 17))
    {
      if (xmlStrncasecmp(a1, (const xmlChar *)"file:///", 8))
      {
        if (!a1)
          return 0;
      }
      else
      {
        a1 += 7;
      }
    }
    else
    {
      a1 += 16;
    }
    return gzopen((const char *)a1, __str);
  }
  return result;
}

uint64_t xmlGzfileWrite(gzFile_s *a1, const void *a2, unsigned int a3)
{
  uint64_t v3;

  v3 = gzwrite(a1, a2, a3);
  if ((v3 & 0x80000000) != 0)
    __xmlIOErr(8u, 0, (const xmlChar *)"gzwrite()");
  return v3;
}

xmlOutputBufferPtr xmlOutputBufferCreateFilename(const char *URI, xmlCharEncodingHandlerPtr encoder, int compression)
{
  uint64_t v3;
  xmlOutputBufferCreateFilenameFunc v6;

  v3 = *(_QWORD *)&compression;
  if (!*__xmlOutputBufferCreateFilenameValue())
    return __xmlOutputBufferCreateFilename(URI, encoder, v3);
  v6 = *__xmlOutputBufferCreateFilenameValue();
  return (xmlOutputBufferPtr)((uint64_t (*)(const char *, xmlCharEncodingHandlerPtr, uint64_t))v6)(URI, encoder, v3);
}

xmlParserInputBufferPtr xmlParserInputBufferCreateFile(FILE *file, xmlCharEncoding enc)
{
  xmlParserInputBufferPtr result;

  if ((xmlInputCallbackInitialized & 1) == 0)
    xmlRegisterDefaultInputCallbacks();
  if (!file)
    return 0;
  result = xmlAllocParserInputBuffer(enc);
  if (result)
  {
    result->context = file;
    result->readcallback = xmlFileRead;
    result->closecallback = (xmlInputCloseCallback)xmlFileFlush;
  }
  return result;
}

uint64_t xmlFileFlush(FILE *a1)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if (fflush(a1) != -1)
    return 0;
  __xmlIOErr(8u, 0, (const xmlChar *)"fflush()");
  return 0xFFFFFFFFLL;
}

xmlOutputBufferPtr xmlOutputBufferCreateFile(FILE *file, xmlCharEncodingHandlerPtr encoder)
{
  xmlOutputBufferPtr result;

  if ((xmlOutputCallbackInitialized & 1) == 0)
    xmlRegisterDefaultOutputCallbacks();
  if (!file)
    return 0;
  result = (xmlOutputBufferPtr)xmlAllocOutputBufferInternal((uint64_t)encoder);
  if (result)
  {
    result->context = file;
    result->writecallback = (xmlOutputWriteCallback)xmlFileWrite;
    result->closecallback = (xmlOutputCloseCallback)xmlFileFlush;
  }
  return result;
}

xmlOutputBufferPtr xmlOutputBufferCreateBuffer(xmlOutputBufferPtr buffer, xmlCharEncodingHandlerPtr encoder)
{
  xmlOutputBufferPtr v2;

  if (buffer)
  {
    v2 = buffer;
    buffer = (xmlOutputBufferPtr)xmlAllocOutputBufferInternal((uint64_t)encoder);
    if (buffer)
    {
      buffer->context = v2;
      buffer->writecallback = (xmlOutputWriteCallback)xmlBufferWrite;
      buffer->closecallback = 0;
    }
  }
  return buffer;
}

uint64_t xmlBufferWrite(xmlBuffer *a1, const xmlChar *a2, unsigned int a3)
{
  if (xmlBufferAdd(a1, a2, a3))
    return 0xFFFFFFFFLL;
  else
    return a3;
}

const xmlChar *__cdecl xmlOutputBufferGetContent(xmlOutputBufferPtr out)
{
  const xmlBuf *buffer;

  if (out && (buffer = out->buffer) != 0)
    return xmlBufContent(buffer);
  else
    return 0;
}

size_t xmlOutputBufferGetSize(xmlOutputBufferPtr out)
{
  xmlBuf *buffer;

  if (out && (buffer = out->buffer) != 0)
    return xmlBufUse(buffer);
  else
    return 0;
}

xmlParserInputBufferPtr xmlParserInputBufferCreateFd(int fd, xmlCharEncoding enc)
{
  xmlParserInputBufferPtr result;

  if (fd < 0)
    return 0;
  result = xmlAllocParserInputBuffer(enc);
  if (result)
  {
    result->context = (void *)fd;
    result->readcallback = (xmlInputReadCallback)xmlFdRead;
    result->closecallback = (xmlInputCloseCallback)xmlFdClose;
  }
  return result;
}

ssize_t xmlFdRead(int a1, void *a2, int a3)
{
  ssize_t v3;

  v3 = read(a1, a2, a3);
  if ((v3 & 0x80000000) != 0)
    __xmlIOErr(8u, 0, (const xmlChar *)"read()");
  return v3;
}

uint64_t xmlFdClose(int a1)
{
  uint64_t v1;

  v1 = close(a1);
  if ((v1 & 0x80000000) != 0)
    __xmlIOErr(8u, 0, (const xmlChar *)"close()");
  return v1;
}

xmlOutputBufferPtr xmlOutputBufferCreateFd(int fd, xmlCharEncodingHandlerPtr encoder)
{
  xmlOutputBufferPtr result;

  if (fd < 0)
    return 0;
  result = (xmlOutputBufferPtr)xmlAllocOutputBufferInternal((uint64_t)encoder);
  if (result)
  {
    result->context = (void *)fd;
    result->writecallback = (xmlOutputWriteCallback)xmlFdWrite;
    result->closecallback = 0;
  }
  return result;
}

ssize_t xmlFdWrite(int a1, const void *a2, size_t __nbyte)
{
  ssize_t v3;

  if ((int)__nbyte < 1)
    return 0;
  v3 = write(a1, a2, __nbyte);
  if ((v3 & 0x80000000) != 0)
    __xmlIOErr(8u, 0, (const xmlChar *)"write()");
  return v3;
}

xmlParserInputBufferPtr xmlParserInputBufferCreateIO(xmlParserInputBufferPtr ioread, xmlInputCloseCallback ioclose, void *ioctx, xmlCharEncoding enc)
{
  int (__cdecl *v6)(void *, char *, int);

  if (ioread)
  {
    v6 = (int (__cdecl *)(void *, char *, int))ioread;
    ioread = xmlAllocParserInputBuffer(enc);
    if (ioread)
    {
      ioread->context = ioctx;
      ioread->readcallback = v6;
      ioread->closecallback = ioclose;
    }
  }
  return ioread;
}

xmlParserInputBufferCreateFilenameFunc xmlParserInputBufferCreateFilenameDefault(xmlParserInputBufferCreateFilenameFunc func)
{
  xmlParserInputBufferCreateFilenameFunc *FilenameValue;
  xmlParserInputBufferPtr (__cdecl *v3)(const char *, xmlCharEncoding);

  FilenameValue = __xmlParserInputBufferCreateFilenameValue();
  if (*FilenameValue)
    v3 = *FilenameValue;
  else
    v3 = __xmlParserInputBufferCreateFilename;
  *__xmlParserInputBufferCreateFilenameValue() = func;
  return v3;
}

xmlOutputBufferCreateFilenameFunc xmlOutputBufferCreateFilenameDefault(xmlOutputBufferCreateFilenameFunc func)
{
  xmlOutputBufferCreateFilenameFunc *FilenameValue;
  xmlOutputBufferPtr (__cdecl *v3)(const char *, xmlCharEncodingHandlerPtr, int);

  FilenameValue = __xmlOutputBufferCreateFilenameValue();
  if (*FilenameValue)
    v3 = *FilenameValue;
  else
    v3 = __xmlOutputBufferCreateFilename;
  *__xmlOutputBufferCreateFilenameValue() = func;
  return v3;
}

char *__cdecl xmlParserGetDirectory(const char *filename)
{
  int64_t v2;
  char *v3;
  char *result;
  char __dst;
  _BYTE v6[7];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  if ((xmlInputCallbackInitialized & 1) == 0)
    xmlRegisterDefaultInputCallbacks();
  if (!filename)
    return 0;
  strncpy(&__dst, filename, 0x3FFuLL);
  v7 = 0;
  v2 = strlen(&__dst);
  v3 = &v6[v2 - 1];
  if (v2 >= 1)
  {
    while (*v3 != 47)
    {
      if (--v3 <= &__dst)
        goto LABEL_7;
    }
    goto LABEL_8;
  }
LABEL_7:
  if (*v3 == 47)
  {
LABEL_8:
    if (v3 == &__dst)
      v3 = v6;
    goto LABEL_14;
  }
  result = getcwd(&__dst, 0x400uLL);
  if (!result)
    return result;
  v3 = &v7;
LABEL_14:
  *v3 = 0;
  return xmlMemStrdup(&__dst);
}

xmlParserInputPtr xmlCheckHTTPInput(xmlParserCtxtPtr ctxt, xmlParserInputPtr ret)
{
  xmlParserInputPtr v2;
  xmlParserInputBufferPtr buf;
  const xmlChar *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  const xmlChar *v10;
  xmlCharEncodingHandler *CharEncodingHandler;
  const char *v12;
  const xmlChar *v13;
  char *filename;
  char *directory;

  v2 = ret;
  if (ret)
  {
    buf = ret->buf;
    if (ret->buf)
    {
      if (buf->readcallback == xmlIOHTTPRead && buf->context)
      {
        if (xmlNanoHTTPReturnCode(buf->context) < 400)
        {
          v8 = xmlNanoHTTPMimeType(v2->buf->context);
          if (xmlStrstr((const xmlChar *)v8, (const xmlChar *)"/xml")
            || xmlStrstr((const xmlChar *)v8, (const xmlChar *)"+xml"))
          {
            v9 = xmlNanoHTTPEncoding(v2->buf->context);
            if (v9)
            {
              v10 = (const xmlChar *)v9;
              CharEncodingHandler = xmlFindCharEncodingHandler(v9);
              if (CharEncodingHandler)
                xmlSwitchInputEncoding(ctxt, v2, CharEncodingHandler);
              else
                __xmlErrEncoding(ctxt, 31, "Unknown encoding %s", v10, 0);
              if (!v2->encoding)
                v2->encoding = xmlStrdup(v10);
            }
          }
          v12 = xmlNanoHTTPRedir(v2->buf->context);
          if (v12)
          {
            v13 = (const xmlChar *)v12;
            filename = (char *)v2->filename;
            if (filename)
              xmlFree(filename);
            directory = (char *)v2->directory;
            if (directory)
            {
              xmlFree(directory);
              v2->directory = 0;
            }
            v2->filename = (const char *)xmlStrdup(v13);
          }
        }
        else
        {
          v6 = (const xmlChar *)v2->filename;
          if (v6)
            v7 = "failed to load HTTP resource \"%s\"\n";
          else
            v7 = "failed to load HTTP resource\n";
          __xmlLoaderErr(ctxt, v7, v6);
          xmlFreeInputStream(v2);
          return 0;
        }
      }
    }
  }
  return v2;
}

xmlParserInputPtr xmlLoadExternalEntity(const char *URL, const char *ID, xmlParserCtxtPtr ctxt)
{
  char *v7;
  char *v8;
  xmlParserInput *v9;

  if (!URL || xmlNoNetExists((const xmlChar *)URL))
    return (xmlParserInputPtr)xmlCurrentExternalEntityLoader((char *)URL, (char *)ID, ctxt);
  v7 = (char *)xmlCanonicPath((const xmlChar *)URL);
  if (v7)
  {
    v8 = v7;
    v9 = (xmlParserInput *)xmlCurrentExternalEntityLoader(v7, (char *)ID, ctxt);
    xmlFree(v8);
    return v9;
  }
  else
  {
    __xmlSimpleError(8u, 2, 0, 0, (const xmlChar *)"building canonical path\n");
    return 0;
  }
}

const xmlChar *xmlNoNetExists(const xmlChar *result)
{
  const xmlChar *v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  stat v6;

  if (result)
  {
    v1 = result;
    if (xmlStrncasecmp(result, (const xmlChar *)"file://localhost/", 17))
    {
      v2 = xmlStrncasecmp(v1, (const xmlChar *)"file:///", 8);
      v3 = 7;
      if (v2)
        v3 = 0;
    }
    else
    {
      v3 = 16;
    }
    memset(&v6, 0, sizeof(v6));
    v4 = stat((const char *)&v1[v3], &v6);
    if ((v6.st_mode & 0xF000) == 0x4000)
      v5 = 2;
    else
      v5 = 1;
    if (v4 == -1)
      return 0;
    else
      return (const xmlChar *)v5;
  }
  return result;
}

xmlParserInputPtr xmlNoNetExternalEntityLoader(const char *URL, const char *ID, xmlParserCtxtPtr ctxt)
{
  xmlChar *v6;
  char *v7;
  xmlParserInput *v8;

  v6 = xmlResolveResourceFromCatalog((const xmlChar *)URL, (const xmlChar *)ID, (uint64_t)ctxt);
  if (v6)
    v7 = (char *)v6;
  else
    v7 = (char *)URL;
  if (!v7
    || xmlStrncasecmp((const xmlChar *)v7, (const xmlChar *)"ftp://", 6)
    && xmlStrncasecmp((const xmlChar *)v7, (const xmlChar *)"http://", 7))
  {
    v8 = xmlDefaultExternalEntityLoader(v7, (char *)ID, ctxt);
    if (v7 != URL)
      xmlFree(v7);
  }
  else
  {
    __xmlSimpleError(8u, 1543, 0, "Attempt to load network entity %s", (const xmlChar *)v7);
    if (v7 != URL)
      xmlFree(v7);
    return 0;
  }
  return v8;
}

xmlChar *xmlResolveResourceFromCatalog(const xmlChar *a1, const xmlChar *a2, uint64_t a3)
{
  xmlCatalogAllow Defaults;
  xmlCatalogAllow v7;
  xmlChar *v8;
  void *v10;
  xmlChar *v11;
  _BOOL4 v12;
  void *v13;
  xmlChar *v14;

  Defaults = xmlCatalogGetDefaults();
  if (Defaults == XML_CATA_ALLOW_NONE)
    return 0;
  v7 = Defaults;
  if (xmlNoNetExists(a1))
    return 0;
  if (a3)
  {
    if ((v7 & 0xFFFFFFFE) == 2)
    {
      v10 = *(void **)(a3 + 440);
      if (v10)
      {
        v11 = xmlCatalogLocalResolve(v10, a2, a1);
        if (v11)
        {
          v8 = v11;
          if (xmlNoNetExists(v11))
            return v8;
          v12 = 1;
LABEL_21:
          if (v12)
          {
            v13 = *(void **)(a3 + 440);
            if (v13)
            {
              v14 = xmlCatalogLocalResolveURI(v13, v8);
              if (v14)
                goto LABEL_26;
            }
          }
          goto LABEL_24;
        }
      }
    }
  }
  if ((v7 & 0xFFFFFFFD) == 1)
  {
    v8 = xmlCatalogResolve(a2, a1);
    if (!a1)
      goto LABEL_17;
  }
  else
  {
    v8 = 0;
    if (!a1)
      goto LABEL_17;
  }
  if (!v8)
    v8 = xmlStrdup(a1);
LABEL_17:
  if (!v8 || xmlNoNetExists(v8))
    return v8;
  if (a3)
  {
    v12 = (v7 & 0xFFFFFFFE) == 2;
    goto LABEL_21;
  }
LABEL_24:
  if ((v7 & 0xFFFFFFFD) == 1)
  {
    v14 = xmlCatalogResolveURI(v8);
    if (v14)
    {
LABEL_26:
      xmlFree(v8);
      return v14;
    }
  }
  return v8;
}

xmlParserInputPtr xmlDefaultExternalEntityLoader(char *URL, char *ID, xmlParserCtxtPtr ctxt)
{
  int options;
  xmlChar *v7;
  char *v8;
  xmlParserInputPtr v9;
  xmlParserInputPtr result;
  const char *v11;

  if (ctxt && (options = ctxt->options, (options & 0x800) != 0))
  {
    ctxt->options = options - 2048;
    result = xmlNoNetExternalEntityLoader(URL, ID, ctxt);
    ctxt->options = options;
  }
  else
  {
    v7 = xmlResolveResourceFromCatalog((const xmlChar *)URL, (const xmlChar *)ID, (uint64_t)ctxt);
    if (v7)
      v8 = (char *)v7;
    else
      v8 = URL;
    if (v8)
    {
      v9 = xmlNewInputFromFile(ctxt, v8);
      if (v8 != URL)
        xmlFree(v8);
    }
    else
    {
      if (ID)
        v11 = ID;
      else
        v11 = "NULL";
      __xmlLoaderErr(ctxt, "failed to load external entity \"%s\"\n", (const xmlChar *)v11);
      return 0;
    }
    return v9;
  }
  return result;
}

gzFile xmlGzfileOpen_real(const char *a1)
{
  const xmlChar *v1;
  int v2;
  int v3;
  gzFile result;
  stat v5;

  v1 = (const xmlChar *)a1;
  if (strcmp(a1, "-"))
  {
    if (xmlStrncasecmp(v1, (const xmlChar *)"file://localhost/", 17))
    {
      if (xmlStrncasecmp(v1, (const xmlChar *)"file:///", 8))
      {
        if (!v1)
          return 0;
      }
      else
      {
        v1 += 7;
      }
    }
    else
    {
      v1 += 16;
    }
    memset(&v5, 0, sizeof(v5));
    if (stat((const char *)v1, &v5) != -1)
      return gzopen((const char *)v1, "rb");
    return 0;
  }
  v2 = fileno((FILE *)*MEMORY[0x1E0C80C18]);
  v3 = dup(v2);
  result = gzdopen(v3, "rb");
  if ((v3 & 0x80000000) == 0 && !result)
  {
    close(v3);
    return 0;
  }
  return result;
}

uint64_t xmlZMemBuffExtend(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  size_t v5;
  char *v6;
  char *v7;
  uint64_t result;
  xmlChar buf[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (!a2)
      return 0;
    v3 = *(_QWORD *)(a1 + 48);
    v4 = *(void **)(a1 + 16);
    v5 = *(_QWORD *)a1 + a2;
    v6 = (char *)xmlRealloc(v4, v5);
    if (v6)
    {
      v7 = v6;
      result = 0;
      *(_QWORD *)a1 = v5;
      *(_QWORD *)(a1 + 16) = v7;
      *(_QWORD *)(a1 + 48) = &v7[v3 - (_QWORD)v4];
      *(_DWORD *)(a1 + 56) = v5 - (v3 - (_DWORD)v4);
      return result;
    }
    v40 = 0;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v10 = 0u;
    v11 = 0u;
    *(_OWORD *)buf = 0u;
    xmlStrPrintf(buf, 500, "xmlZMemBuffExtend:  %s %lu bytes.\n", "Allocation failure extending output buffer to", v5);
    __xmlSimpleError(8u, 1546, 0, "write error", buf);
  }
  return 0xFFFFFFFFLL;
}

uint64_t xmlIOHTTPCloseWrite(int *a1, const char *a2)
{
  uint64_t v2;
  uint64_t v5;
  int v6;
  xmlChar *v7;
  int v8;
  const char *v9;
  unint64_t v10;
  _BYTE *v11;
  int v12;
  unint64_t v13;
  int v14;
  void *v15;
  void *v16;
  int v17;
  char *contentType;
  xmlChar buf[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  contentType = "text/xml";
  v2 = 0xFFFFFFFFLL;
  if (a1 && a2)
  {
    v5 = *((_QWORD *)a1 + 2);
    if (*a1 < 1)
    {
      v7 = xmlBufContent(*(const xmlBuf **)(v5 + 32));
      v8 = xmlBufUse(*(const xmlBufPtr *)(v5 + 32));
      v9 = 0;
      if (v7)
        goto LABEL_18;
    }
    else if (v5)
    {
      while (1)
      {
        v6 = deflate((z_streamp)(v5 + 24), 4);
        if (v6)
          break;
        if (xmlZMemBuffExtend(v5, *(_QWORD *)v5) == -1)
          goto LABEL_22;
      }
      if (v6 == 1)
      {
        if (*(_DWORD *)(v5 + 56) > 0xFu || xmlZMemBuffExtend(v5, 16) != -1)
        {
          v10 = *(_QWORD *)(v5 + 8);
          v11 = *(_BYTE **)(v5 + 48);
          v12 = 4;
          do
          {
            *v11 = v10;
            v10 >>= 8;
            v11 = (_BYTE *)(*(_QWORD *)(v5 + 48) + 1);
            *(_QWORD *)(v5 + 48) = v11;
            --v12;
          }
          while (v12);
          v13 = *(_QWORD *)(v5 + 40);
          v14 = 4;
          do
          {
            *v11 = v13;
            v13 >>= 8;
            v11 = (_BYTE *)(*(_QWORD *)(v5 + 48) + 1);
            *(_QWORD *)(v5 + 48) = v11;
            --v14;
          }
          while (v14);
          v7 = *(xmlChar **)(v5 + 16);
          v8 = (_DWORD)v11 - (_DWORD)v7;
          v9 = "Content-Encoding: gzip";
          if (v7)
          {
LABEL_18:
            v15 = xmlNanoHTTPMethod(*((const char **)a1 + 1), a2, (const char *)v7, &contentType, v9, v8);
            if (v15)
            {
              v16 = v15;
              v17 = xmlNanoHTTPReturnCode(v15);
              if ((v17 - 200) >= 0x64)
              {
                v51 = 0;
                v49 = 0u;
                v50 = 0u;
                v47 = 0u;
                v48 = 0u;
                v45 = 0u;
                v46 = 0u;
                v43 = 0u;
                v44 = 0u;
                v41 = 0u;
                v42 = 0u;
                v39 = 0u;
                v40 = 0u;
                v37 = 0u;
                v38 = 0u;
                v35 = 0u;
                v36 = 0u;
                v33 = 0u;
                v34 = 0u;
                v31 = 0u;
                v32 = 0u;
                v29 = 0u;
                v30 = 0u;
                v28 = 0u;
                v26 = 0u;
                v27 = 0u;
                v24 = 0u;
                v25 = 0u;
                v22 = 0u;
                v23 = 0u;
                *(_OWORD *)buf = 0u;
                v21 = 0u;
                xmlStrPrintf(buf, 500, "xmlIOHTTPCloseWrite: HTTP '%s' of %d %s\n'%s' %s %d\n", a2, v8, "bytes to URI", *((const char **)a1 + 1), "failed.  HTTP return code:", v17);
                __xmlSimpleError(8u, 1546, 0, "write error", buf);
                v2 = 0xFFFFFFFFLL;
              }
              else
              {
                v2 = 0;
              }
              xmlNanoHTTPClose(v16);
              xmlFree(contentType);
              goto LABEL_24;
            }
LABEL_23:
            v2 = 0xFFFFFFFFLL;
LABEL_24:
            xmlFreeHTTPWriteCtxt(a1);
            return v2;
          }
        }
      }
      else
      {
        v51 = 0;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v41 = 0u;
        v42 = 0u;
        v39 = 0u;
        v40 = 0u;
        v37 = 0u;
        v38 = 0u;
        v35 = 0u;
        v36 = 0u;
        v33 = 0u;
        v34 = 0u;
        v31 = 0u;
        v32 = 0u;
        v29 = 0u;
        v30 = 0u;
        v28 = 0u;
        v26 = 0u;
        v27 = 0u;
        v24 = 0u;
        v25 = 0u;
        v22 = 0u;
        v23 = 0u;
        *(_OWORD *)buf = 0u;
        v21 = 0u;
        xmlStrPrintf(buf, 500, "xmlZMemBuffGetContent:  %s - %d\n", "Error flushing zlib buffers.  Error code", v6);
        __xmlSimpleError(8u, 1546, 0, "write error", buf);
      }
    }
LABEL_22:
    v51 = 0;
    v49 = 0u;
    v50 = 0u;
    v47 = 0u;
    v48 = 0u;
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v28 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    *(_OWORD *)buf = 0u;
    v21 = 0u;
    xmlStrPrintf(buf, 500, "xmlIOHTTPCloseWrite:  %s '%s' %s '%s'.\n", "Error retrieving content.\nUnable to", a2, "data to URI", *((const char **)a1 + 1));
    __xmlSimpleError(8u, 1546, 0, "write error", buf);
    goto LABEL_23;
  }
  return v2;
}

void *__cdecl xmlMallocLoc(size_t size, const char *file, int line)
{
  xmlGenericErrorFunc v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  xmlGenericErrorFunc v10;
  void **v11;
  xmlGenericErrorFunc v12;
  void **v13;
  xmlGenericErrorFunc v14;
  void *v15;
  xmlGenericErrorFunc v16;
  void *v17;

  if ((xmlMemInitialized & 1) == 0)
    xmlInitMemory();
  if (size < 0xFFFFFFFFFFFFFFD8)
  {
    v9 = malloc_type_malloc(size + 40, 0xE6250F13uLL);
    v8 = v9;
    if (v9)
    {
      *v9 = 0x100005AA5;
      v9[2] = size;
      v9[3] = file;
      *((_DWORD *)v9 + 8) = line;
      xmlMutexLock((xmlMutexPtr)xmlMemMutex);
      v8[1] = ++block;
      debugMemSize += size;
      ++debugMemBlocks;
      if (debugMemSize > (unint64_t)debugMaxMemSize)
        debugMaxMemSize = debugMemSize;
      xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
      if (v8[1] == xmlMemStopAtBlock)
      {
        v10 = *__xmlGenericError();
        v11 = __xmlGenericErrorContext();
        v10(*v11, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
      }
      v8 += 5;
      if ((_QWORD *)xmlMemTraceBlockAt == v8)
      {
        v12 = *__xmlGenericError();
        v13 = __xmlGenericErrorContext();
        v12(*v13, "%p : Malloc(%lu) Ok\n", (const void *)xmlMemTraceBlockAt, size);
        v14 = *__xmlGenericError();
        v15 = *__xmlGenericErrorContext();
        v14(v15, "xmlMallocBreakpoint reached on block %d\n");
      }
    }
    else
    {
      v16 = *__xmlGenericError();
      v17 = *__xmlGenericErrorContext();
      v16(v17, "xmlMallocLoc : Out of free space\n");
    }
  }
  else
  {
    v6 = *__xmlGenericError();
    v7 = __xmlGenericErrorContext();
    v6(*v7, "xmlMallocLoc : Unsigned overflow\n");
    return 0;
  }
  return v8;
}

void *__cdecl xmlMallocAtomicLoc(size_t size, const char *file, int line)
{
  xmlGenericErrorFunc v6;
  void **v7;
  _QWORD *v8;
  _QWORD *v9;
  xmlGenericErrorFunc v10;
  void **v11;
  xmlGenericErrorFunc v12;
  void **v13;
  xmlGenericErrorFunc v14;
  void *v15;
  xmlGenericErrorFunc v16;
  void *v17;

  if ((xmlMemInitialized & 1) == 0)
    xmlInitMemory();
  if (size < 0xFFFFFFFFFFFFFFD8)
  {
    v9 = malloc_type_malloc(size + 40, 0xCDE54481uLL);
    v8 = v9;
    if (v9)
    {
      *v9 = 0x400005AA5;
      v9[2] = size;
      v9[3] = file;
      *((_DWORD *)v9 + 8) = line;
      xmlMutexLock((xmlMutexPtr)xmlMemMutex);
      v8[1] = ++block;
      debugMemSize += size;
      ++debugMemBlocks;
      if (debugMemSize > (unint64_t)debugMaxMemSize)
        debugMaxMemSize = debugMemSize;
      xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
      if (v8[1] == xmlMemStopAtBlock)
      {
        v10 = *__xmlGenericError();
        v11 = __xmlGenericErrorContext();
        v10(*v11, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
      }
      v8 += 5;
      if ((_QWORD *)xmlMemTraceBlockAt == v8)
      {
        v12 = *__xmlGenericError();
        v13 = __xmlGenericErrorContext();
        v12(*v13, "%p : Malloc(%lu) Ok\n", (const void *)xmlMemTraceBlockAt, size);
        v14 = *__xmlGenericError();
        v15 = *__xmlGenericErrorContext();
        v14(v15, "xmlMallocBreakpoint reached on block %d\n");
      }
    }
    else
    {
      v16 = *__xmlGenericError();
      v17 = *__xmlGenericErrorContext();
      v16(v17, "xmlMallocAtomicLoc : Out of free space\n");
    }
  }
  else
  {
    v6 = *__xmlGenericError();
    v7 = __xmlGenericErrorContext();
    v6(*v7, "xmlMallocAtomicLoc : Unsigned overflow\n");
    return 0;
  }
  return v8;
}

void *__cdecl xmlMemMalloc(size_t size)
{
  return xmlMallocLoc(size, "none", 0);
}

void *__cdecl xmlReallocLoc(void *ptr, size_t size, const char *file, int line)
{
  uint64_t v8;
  xmlGenericErrorFunc v9;
  void **v10;
  xmlGenericErrorFunc v11;
  void *v12;
  xmlGenericErrorFunc v14;
  void *v15;
  _QWORD *v16;
  _QWORD *v17;
  xmlGenericErrorFunc v18;
  void **v19;
  xmlGenericErrorFunc v20;
  void **v21;
  size_t v22;

  if (!ptr)
    return xmlMallocLoc(size, file, line);
  if ((xmlMemInitialized & 1) == 0)
    xmlInitMemory();
  v8 = *((_QWORD *)ptr - 4);
  if (v8 == xmlMemStopAtBlock)
  {
    v9 = *__xmlGenericError();
    v10 = __xmlGenericErrorContext();
    v9(*v10, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
  }
  if (*((_DWORD *)ptr - 10) != 23205)
  {
    v14 = *__xmlGenericError();
    v15 = *__xmlGenericErrorContext();
    v14(v15, "Memory tag error occurs :%p \n\t bye\n");
    return 0;
  }
  *((_DWORD *)ptr - 10) = -23206;
  xmlMutexLock((xmlMutexPtr)xmlMemMutex);
  debugMemSize -= *((_QWORD *)ptr - 3);
  --debugMemBlocks;
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  if (size >= 0xFFFFFFFFFFFFFFD8)
  {
    v11 = *__xmlGenericError();
    v12 = *__xmlGenericErrorContext();
    v11(v12, "xmlReallocLoc : Unsigned overflow\n");
    return 0;
  }
  v16 = malloc_type_realloc((char *)ptr - 40, size + 40, 0x9214B86uLL);
  if (!v16)
  {
    free((char *)ptr - 40);
    return 0;
  }
  v17 = v16;
  if ((void *)xmlMemTraceBlockAt == ptr)
  {
    v18 = *__xmlGenericError();
    v19 = __xmlGenericErrorContext();
    v18(*v19, "%p : Realloced(%lu -> %lu) Ok\n", (const void *)xmlMemTraceBlockAt, v17[2], size);
    v20 = *__xmlGenericError();
    v21 = __xmlGenericErrorContext();
    v20(*v21, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
  }
  *v17 = 0x200005AA5;
  v17[1] = v8;
  v17[2] = size;
  v17[3] = file;
  *((_DWORD *)v17 + 8) = line;
  xmlMutexLock((xmlMutexPtr)xmlMemMutex);
  v22 = debugMemSize + size;
  debugMemSize = v22;
  ++debugMemBlocks;
  if (v22 > debugMaxMemSize)
    debugMaxMemSize = v22;
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  return v17 + 5;
}

void *__cdecl xmlMemRealloc(void *ptr, size_t size)
{
  return xmlReallocLoc(ptr, size, "none", 0);
}

void xmlMemFree(void *ptr)
{
  xmlGenericErrorFunc v2;
  void **v3;
  xmlGenericErrorFunc v4;
  void **v5;
  xmlGenericErrorFunc v6;
  void **v7;
  xmlGenericErrorFunc v8;
  void **v9;
  xmlGenericErrorFunc v10;
  void **v11;
  xmlGenericErrorFunc v12;
  void **v13;
  xmlGenericErrorFunc v14;
  void **v15;

  if (ptr)
  {
    if (ptr == (void *)-1)
    {
      v2 = *__xmlGenericError();
      v3 = __xmlGenericErrorContext();
      v2(*v3, "trying to free pointer from freed area\n");
LABEL_11:
      v12 = *__xmlGenericError();
      v13 = __xmlGenericErrorContext();
      v12(*v13, "xmlMemFree(%p) error\n", ptr);
      v14 = *__xmlGenericError();
      v15 = __xmlGenericErrorContext();
      v14(*v15, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
      return;
    }
    if ((void *)xmlMemTraceBlockAt == ptr)
    {
      v4 = *__xmlGenericError();
      v5 = __xmlGenericErrorContext();
      v4(*v5, "%p : Freed()\n", (const void *)xmlMemTraceBlockAt);
      v6 = *__xmlGenericError();
      v7 = __xmlGenericErrorContext();
      v6(*v7, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
    }
    if (*((_DWORD *)ptr - 10) != 23205)
    {
      v10 = *__xmlGenericError();
      v11 = __xmlGenericErrorContext();
      v10(*v11, "Memory tag error occurs :%p \n\t bye\n", (char *)ptr - 40);
      goto LABEL_11;
    }
    if (*((_QWORD *)ptr - 4) == xmlMemStopAtBlock)
    {
      v8 = *__xmlGenericError();
      v9 = __xmlGenericErrorContext();
      v8(*v9, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
    }
    *((_DWORD *)ptr - 10) = -23206;
    memset(ptr, 255, *((_QWORD *)ptr - 3));
    xmlMutexLock((xmlMutexPtr)xmlMemMutex);
    debugMemSize -= *((_QWORD *)ptr - 3);
    --debugMemBlocks;
    xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
    free((char *)ptr - 40);
  }
}

char *__cdecl xmlMemStrdupLoc(const char *str, const char *file, int line)
{
  size_t v6;
  size_t v7;
  xmlGenericErrorFunc v8;
  void **v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v12;
  xmlGenericErrorFunc v13;
  void **v14;
  xmlGenericErrorFunc v15;
  void **v16;
  xmlGenericErrorFunc v17;
  void **v18;

  v6 = strlen(str);
  v7 = v6 + 1;
  if ((xmlMemInitialized & 1) == 0)
    xmlInitMemory();
  if (v7 >= 0xFFFFFFFFFFFFFFD8)
  {
    v8 = *__xmlGenericError();
    v9 = __xmlGenericErrorContext();
    v8(*v9, "xmlMemStrdupLoc : Unsigned overflow\n");
    return 0;
  }
  v10 = malloc_type_malloc(v6 + 41, 0x53A685A0uLL);
  if (!v10)
    return 0;
  v11 = v10;
  *v10 = 0x300005AA5;
  v10[2] = v7;
  v10[3] = file;
  *((_DWORD *)v10 + 8) = line;
  xmlMutexLock((xmlMutexPtr)xmlMemMutex);
  v11[1] = ++block;
  debugMemSize += v7;
  ++debugMemBlocks;
  if (debugMemSize > (unint64_t)debugMaxMemSize)
    debugMaxMemSize = debugMemSize;
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  v12 = (char *)(v11 + 5);
  if (v11[1] == xmlMemStopAtBlock)
  {
    v13 = *__xmlGenericError();
    v14 = __xmlGenericErrorContext();
    v13(*v14, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
  }
  strncpy(v12, str, v7);
  v12[v6] = 0;
  if ((char *)xmlMemTraceBlockAt == v12)
  {
    v15 = *__xmlGenericError();
    v16 = __xmlGenericErrorContext();
    v15(*v16, "%p : Strdup() Ok\n", (const void *)xmlMemTraceBlockAt);
    v17 = *__xmlGenericError();
    v18 = __xmlGenericErrorContext();
    v17(*v18, "xmlMallocBreakpoint reached on block %d\n", xmlMemStopAtBlock);
  }
  return v12;
}

char *__cdecl xmlMemoryStrdup(const char *str)
{
  return xmlMemStrdupLoc(str, "none", 0);
}

size_t xmlMemSize(size_t ptr)
{
  if (ptr)
  {
    if (*(_DWORD *)(ptr - 40) == 23205)
      return *(_QWORD *)(ptr - 24);
    else
      return 0;
  }
  return ptr;
}

int xmlMemUsed(void)
{
  int v0;

  xmlMutexLock((xmlMutexPtr)xmlMemMutex);
  v0 = debugMemSize;
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  return v0;
}

int xmlMemBlocks(void)
{
  int v0;

  xmlMutexLock((xmlMutexPtr)xmlMemMutex);
  v0 = debugMemBlocks;
  xmlMutexUnlock((xmlMutexPtr)xmlMemMutex);
  return v0;
}

void xmlMemDisplayLast(FILE *fp, uint64_t nbBytes)
{
  FILE *v2;
  FILE *v3;

  if (nbBytes >= 1)
  {
    if (fp)
    {
      fwrite("Memory list not compiled (MEM_LIST not defined !)\n", 0x32uLL, 1uLL, fp);
    }
    else
    {
      v2 = fopen(".memorylist", "w");
      if (v2)
      {
        v3 = v2;
        fwrite("Memory list not compiled (MEM_LIST not defined !)\n", 0x32uLL, 1uLL, v2);
        fclose(v3);
      }
    }
  }
}

void xmlMemDisplay(FILE *fp)
{
  FILE *v1;
  FILE *v2;

  if (fp)
  {
    fwrite("Memory list not compiled (MEM_LIST not defined !)\n", 0x32uLL, 1uLL, fp);
  }
  else
  {
    v1 = fopen(".memorylist", "w");
    if (v1)
    {
      v2 = v1;
      fwrite("Memory list not compiled (MEM_LIST not defined !)\n", 0x32uLL, 1uLL, v1);
      fclose(v2);
    }
  }
}

void xmlMemShow(FILE *fp, int nr)
{
  if (fp)
    fprintf(fp, "      MEMORY ALLOCATED : %lu, MAX was %lu\n", debugMemSize, debugMaxMemSize);
}

void xmlCleanupMemory(void)
{
  if (xmlMemInitialized == 1)
  {
    xmlFreeMutex((xmlMutexPtr)xmlMemMutex);
    xmlMemMutex = 0;
    xmlMemInitialized = 0;
  }
}

int xmlMemSetup(xmlFreeFunc freeFunc, xmlMallocFunc mallocFunc, xmlReallocFunc reallocFunc, xmlStrdupFunc strdupFunc)
{
  int result;

  result = -1;
  if (freeFunc && mallocFunc && reallocFunc)
  {
    if (strdupFunc)
    {
      result = 0;
      xmlFree = freeFunc;
      xmlMalloc = mallocFunc;
      xmlMallocAtomic = mallocFunc;
      xmlRealloc = reallocFunc;
      xmlMemStrdup = strdupFunc;
    }
  }
  return result;
}

int xmlMemGet(xmlFreeFunc *freeFunc, xmlMallocFunc *mallocFunc, xmlReallocFunc *reallocFunc, xmlStrdupFunc *strdupFunc)
{
  if (freeFunc)
    *freeFunc = xmlFree;
  if (mallocFunc)
    *mallocFunc = xmlMalloc;
  if (reallocFunc)
    *reallocFunc = xmlRealloc;
  if (strdupFunc)
    *strdupFunc = xmlMemStrdup;
  return 0;
}

int xmlGcMemSetup(xmlFreeFunc freeFunc, xmlMallocFunc mallocFunc, xmlMallocFunc mallocAtomicFunc, xmlReallocFunc reallocFunc, xmlStrdupFunc strdupFunc)
{
  int result;

  result = -1;
  if (freeFunc && mallocFunc && mallocAtomicFunc && reallocFunc)
  {
    if (strdupFunc)
    {
      result = 0;
      xmlFree = freeFunc;
      xmlMalloc = mallocFunc;
      xmlMallocAtomic = mallocAtomicFunc;
      xmlRealloc = reallocFunc;
      xmlMemStrdup = strdupFunc;
    }
  }
  return result;
}

int xmlGcMemGet(xmlFreeFunc *freeFunc, xmlMallocFunc *mallocFunc, xmlMallocFunc *mallocAtomicFunc, xmlReallocFunc *reallocFunc, xmlStrdupFunc *strdupFunc)
{
  if (freeFunc)
    *freeFunc = xmlFree;
  if (mallocFunc)
    *mallocFunc = xmlMalloc;
  if (mallocAtomicFunc)
    *mallocAtomicFunc = xmlMallocAtomic;
  if (reallocFunc)
    *reallocFunc = xmlRealloc;
  if (strdupFunc)
    *strdupFunc = xmlMemStrdup;
  return 0;
}

xmlModulePtr xmlModuleOpen(const char *filename, int options)
{
  xmlChar **v3;
  xmlChar **v4;
  xmlChar *v5;

  v3 = (xmlChar **)xmlMalloc(0x10uLL);
  v4 = v3;
  if (v3)
  {
    *v3 = 0;
    v3[1] = 0;
    v5 = (xmlChar *)dlopen(filename, 10);
    v4[1] = v5;
    if (v5)
    {
      *v4 = xmlStrdup((const xmlChar *)filename);
    }
    else
    {
      xmlFree(v4);
      __xmlRaiseError(0, 0, 0, 0, 0, 0x1Au, 4900, 3, 0, 0, 0, (xmlChar *)filename, 0, 0, 0, "failed to open %s\n", (char)filename);
      return 0;
    }
  }
  else
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x1Au, 2, 3, 0, 0, (const xmlChar *)"creating module", 0, 0, 0, 0, "Memory allocation failed : %s\n", (char)"creating module");
  }
  return (xmlModulePtr)v4;
}

int xmlModuleSymbol(xmlModulePtr module, const char *name, void **result)
{
  char *v4;
  char v6;

  if (!name || !module || !result)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x1Au, 4900, 3, 0, 0, 0, 0, 0, 0, 0, "null parameter\n", v6);
    goto LABEL_7;
  }
  *result = dlsym(*((void **)module + 1), name);
  v4 = dlerror();
  if (v4)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x1Au, 4900, 3, 0, 0, 0, (xmlChar *)name, 0, 0, (unsigned __int128)0 >> 96, "failed to find symbol: %s\n", (char)name);
LABEL_7:
    LODWORD(v4) = -1;
  }
  return (int)v4;
}

int xmlModuleClose(xmlModulePtr module)
{
  char v3;

  if (module)
  {
    if (dlclose(*((void **)module + 1)))
    {
      __xmlRaiseError(0, 0, 0, 0, 0, 0x1Au, 4901, 3, 0, 0, 0, *(xmlChar **)module, 0, 0, 0, "failed to close: %s\n", *(_QWORD *)module);
      return -2;
    }
    else
    {
      xmlFree(*(void **)module);
      xmlFree(module);
      return 0;
    }
  }
  else
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x1Au, 4901, 3, 0, 0, 0, 0, 0, 0, 0, "null module pointer\n", v3);
    return -1;
  }
}

int xmlModuleFree(xmlModulePtr module)
{
  char v3;

  if (module)
  {
    xmlFree(*(void **)module);
    xmlFree(module);
    return 0;
  }
  else
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x1Au, 4901, 3, 0, 0, 0, 0, 0, 0, 0, "null module pointer\n", v3);
    return -1;
  }
}

void xmlTextReaderValidatePop(uint64_t a1)
{
  xmlNode *v2;
  int v3;
  uint64_t v4;
  xmlNs *ns;
  const xmlChar *prefix;
  xmlChar *v7;
  xmlChar *v8;
  xmlChar *v9;
  xmlRelaxNGValidCtxt *v10;
  xmlNode *v11;

  v2 = *(xmlNode **)(a1 + 112);
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 && *(_DWORD *)(v4 + 156) == 1)
    {
      ns = v2->ns;
      if (ns && (prefix = ns->prefix) != 0)
      {
        v7 = xmlStrdup(prefix);
        v8 = xmlStrcat(v7, (const xmlChar *)":");
        v9 = xmlStrcat(v8, v2->name);
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152) &= xmlValidatePopElement((xmlValidCtxtPtr)(*(_QWORD *)(a1 + 32) + 160), *(xmlDocPtr *)(*(_QWORD *)(a1 + 32) + 16), v2, v9);
        if (v9)
          xmlFree(v9);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152) &= xmlValidatePopElement((xmlValidCtxtPtr)(v4 + 160), *(xmlDocPtr *)(v4 + 16), v2, v2->name);
      }
    }
    v3 = *(_DWORD *)(a1 + 16);
  }
  if (v3 == 2)
  {
    v10 = *(xmlRelaxNGValidCtxt **)(a1 + 216);
    if (v10)
    {
      v11 = *(xmlNode **)(a1 + 232);
      if (v11)
      {
        if (v2 == v11)
          *(_QWORD *)(a1 + 232) = 0;
      }
      else if (xmlRelaxNGValidatePopElement(v10, *(xmlDocPtr *)(*(_QWORD *)(a1 + 32) + 16), v2) != 1)
      {
        ++*(_DWORD *)(a1 + 228);
      }
    }
  }
}

_QWORD *xmlTextReaderEntPush(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  int v6;
  _QWORD *result;
  void *v8;
  const char *v9;
  xmlGenericErrorFunc v10;

  v4 = *(_DWORD *)(a1 + 180);
  if (v4 <= 0)
  {
    *(_DWORD *)(a1 + 180) = 10;
    v5 = xmlMalloc(0x50uLL);
    *(_QWORD *)(a1 + 184) = v5;
    if (!v5)
    {
      v10 = *__xmlGenericError();
      v8 = *__xmlGenericErrorContext();
      v9 = "xmlMalloc failed !\n";
      return (_QWORD *)((uint64_t (*)(void *, const char *))v10)(v8, v9);
    }
    v4 = *(_DWORD *)(a1 + 180);
  }
  v6 = *(_DWORD *)(a1 + 176);
  if (v6 < v4)
  {
    result = *(_QWORD **)(a1 + 184);
LABEL_8:
    result[v6] = a2;
    *(_QWORD *)(a1 + 168) = a2;
    *(_DWORD *)(a1 + 176) = v6 + 1;
    return result;
  }
  *(_DWORD *)(a1 + 180) = 2 * v4;
  result = xmlRealloc(*(void **)(a1 + 184), 16 * v4);
  *(_QWORD *)(a1 + 184) = result;
  if (result)
  {
    v6 = *(_DWORD *)(a1 + 176);
    goto LABEL_8;
  }
  v10 = *__xmlGenericError();
  v8 = *__xmlGenericErrorContext();
  v9 = "xmlRealloc failed !\n";
  return (_QWORD *)((uint64_t (*)(void *, const char *))v10)(v8, v9);
}

void xmlTextReaderValidateEntity(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  xmlChar *v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 112);
  v3 = v2;
  while (1)
  {
    v4 = *(_DWORD *)(v3 + 8);
    if ((v4 - 3) < 2)
    {
      v7 = *(xmlChar **)(v3 + 80);
      v8 = xmlStrlen(v7);
      xmlTextReaderValidateCData(a1, v7, v8);
      goto LABEL_11;
    }
    if (v4 != 1)
      break;
    *(_QWORD *)(a1 + 112) = v3;
    xmlTextReaderValidatePush(a1);
LABEL_11:
    v6 = *(_QWORD *)(v3 + 24);
    if (!v6)
    {
      if (*(_DWORD *)(v3 + 8) == 1)
        xmlTextReaderValidatePop(a1);
      goto LABEL_20;
    }
LABEL_14:
    if (v6)
      v9 = v6 == v2;
    else
      v9 = 1;
    v3 = v6;
    if (v9)
      goto LABEL_38;
  }
  if (v4 != 5)
    goto LABEL_11;
  v5 = *(_QWORD *)(v3 + 24);
  if (v5 && *(_DWORD *)(v5 + 8) == 17 && *(_QWORD *)(v5 + 24))
  {
    xmlTextReaderEntPush(a1, v3);
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 24) + 24);
    goto LABEL_14;
  }
  while (v3 != v2)
  {
LABEL_20:
    v6 = *(_QWORD *)(v3 + 48);
    if (v6)
      goto LABEL_14;
    v3 = *(_QWORD *)(v3 + 40);
    v10 = *(_DWORD *)(v3 + 8);
    if (v10 == 1)
    {
      if (!*(_DWORD *)(a1 + 176))
      {
        while (1)
        {
          v15 = *(_QWORD *)(v3 + 32);
          if (!v15 || (*(_WORD *)(v15 + 114) & 2) != 0)
            break;
          xmlUnlinkNode(*(xmlNodePtr *)(v3 + 32));
          xmlTextReaderFreeNode(a1, (xmlAttr *)v15);
        }
      }
      *(_QWORD *)(a1 + 112) = v3;
      xmlTextReaderValidatePop(a1);
      v10 = *(_DWORD *)(v3 + 8);
    }
    if (v10 == 17)
    {
      v11 = *(_QWORD *)(a1 + 168);
      if (v11)
      {
        if (*(_QWORD *)(v11 + 24) == v3)
        {
          v12 = *(_DWORD *)(a1 + 176);
          v13 = v12 - 1;
          if (v12 < 1)
          {
            v3 = 0;
          }
          else
          {
            *(_DWORD *)(a1 + 176) = v13;
            v14 = *(_QWORD *)(a1 + 184);
            if (v12 == 1)
              v16 = 0;
            else
              v16 = *(_QWORD *)(v14 + 8 * (v12 - 2));
            *(_QWORD *)(a1 + 168) = v16;
            v3 = *(_QWORD *)(v14 + 8 * v13);
            *(_QWORD *)(v14 + 8 * v13) = 0;
          }
        }
      }
    }
  }
LABEL_38:
  *(_QWORD *)(a1 + 112) = v2;
}

void xmlTextReaderValidatePush(uint64_t a1)
{
  xmlNode *v2;
  int v3;
  uint64_t v4;
  xmlNs *ns;
  const xmlChar *prefix;
  xmlChar *v7;
  xmlChar *v8;
  xmlChar *v9;
  xmlRelaxNGValidCtxt *v10;
  int v11;
  xmlNode *v12;
  xmlNode *v13;

  v2 = *(xmlNode **)(a1 + 112);
  v3 = *(_DWORD *)(a1 + 16);
  if (v3 == 1)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 && *(_DWORD *)(v4 + 156) == 1)
    {
      ns = v2->ns;
      if (ns && (prefix = ns->prefix) != 0)
      {
        v7 = xmlStrdup(prefix);
        v8 = xmlStrcat(v7, (const xmlChar *)":");
        v9 = xmlStrcat(v8, v2->name);
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152) &= xmlValidatePushElement((xmlValidCtxtPtr)(*(_QWORD *)(a1 + 32) + 160), *(xmlDocPtr *)(*(_QWORD *)(a1 + 32) + 16), v2, v9);
        if (v9)
          xmlFree(v9);
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152) &= xmlValidatePushElement((xmlValidCtxtPtr)(v4 + 160), *(xmlDocPtr *)(v4 + 16), v2, v2->name);
      }
    }
    v3 = *(_DWORD *)(a1 + 16);
  }
  if (v3 == 2)
  {
    v10 = *(xmlRelaxNGValidCtxt **)(a1 + 216);
    if (v10)
    {
      if (!*(_QWORD *)(a1 + 232))
      {
        v11 = xmlRelaxNGValidatePushElement(v10, *(xmlDocPtr *)(*(_QWORD *)(a1 + 32) + 16), v2);
        if (!v11)
        {
          v12 = xmlTextReaderExpand((xmlTextReaderPtr)a1);
          if (!v12)
          {
LABEL_17:
            ++*(_DWORD *)(a1 + 228);
            return;
          }
          v13 = v12;
          v11 = xmlRelaxNGValidateFullElement(*(xmlRelaxNGValidCtxtPtr *)(a1 + 216), *(xmlDocPtr *)(*(_QWORD *)(a1 + 32) + 16), v12);
          *(_QWORD *)(a1 + 232) = v13;
        }
        if (v11 == 1)
          return;
        goto LABEL_17;
      }
    }
  }
}

uint64_t xmlTextReaderValidateCData(uint64_t result, xmlChar *data, int len)
{
  uint64_t v5;
  int v6;
  uint64_t v7;

  v5 = result;
  v6 = *(_DWORD *)(result + 16);
  if (v6 == 1)
  {
    v7 = *(_QWORD *)(result + 32);
    if (!v7 || *(_DWORD *)(v7 + 156) != 1)
      return result;
    result = xmlValidatePushCData((xmlValidCtxtPtr)(v7 + 160), data, len);
    *(_DWORD *)(*(_QWORD *)(v5 + 32) + 152) &= result;
    v6 = *(_DWORD *)(v5 + 16);
  }
  if (v6 == 2)
  {
    result = *(_QWORD *)(v5 + 216);
    if (result)
    {
      if (!*(_QWORD *)(v5 + 232))
      {
        result = xmlRelaxNGValidatePushCData((xmlRelaxNGValidCtxtPtr)result, data, len);
        if ((_DWORD)result != 1)
          ++*(_DWORD *)(v5 + 228);
      }
    }
  }
  return result;
}

xmlNodePtr xmlTextReaderPreserve(xmlNodePtr reader)
{
  xmlNodePtr v1;
  xmlElementType type;
  _xmlNode *i;

  if (reader)
  {
    v1 = reader;
    reader = (xmlNodePtr)reader[1]._private;
    if (reader || (reader = *(xmlNodePtr *)&v1->line) != 0)
    {
      type = reader->type;
      if (type != XML_DOCUMENT_NODE && type != XML_DTD_NODE)
        reader->extra |= 6u;
      ++LODWORD(v1[2].content);
      for (i = reader->parent; i; i = i->parent)
      {
        if (i->type == XML_ELEMENT_NODE)
          i->extra |= 2u;
      }
    }
  }
  return reader;
}

int xmlTextReaderReadState(xmlTextReaderPtr reader)
{
  if (reader)
    return *(_DWORD *)reader;
  else
    return -1;
}

int xmlTextReaderNext(xmlTextReaderPtr reader)
{
  int result;
  uint64_t v3;
  int v4;

  if (!reader)
    return -1;
  if (*((_QWORD *)reader + 1))
    return xmlTextReaderNextTree((uint64_t)reader);
  v3 = *((_QWORD *)reader + 14);
  if (!v3)
    return xmlTextReaderRead(reader);
  if (*(_DWORD *)(v3 + 8) != 1)
    return xmlTextReaderRead(reader);
  v4 = *((_DWORD *)reader + 6);
  if (v4 == 4 || v4 == 2 || (*(_WORD *)(v3 + 114) & 1) != 0)
    return xmlTextReaderRead(reader);
  while (1)
  {
    result = xmlTextReaderRead(reader);
    if (result != 1)
      break;
    if (*((_QWORD *)reader + 14) == v3)
      return xmlTextReaderRead(reader);
  }
  return result;
}

uint64_t xmlTextReaderNextTree(uint64_t a1)
{
  int v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;

  v1 = *(_DWORD *)(a1 + 24);
  if (v1 == 2)
    return 0;
  v4 = *(_QWORD *)(a1 + 112);
  if (v4)
  {
    if (v1 != 4)
    {
      v5 = *(_QWORD *)(v4 + 48);
      if (v5)
        goto LABEL_13;
      *(_DWORD *)(a1 + 24) = 4;
      xmlTextReaderRead((xmlTextReaderPtr)a1);
      v4 = *(_QWORD *)(a1 + 112);
    }
    v5 = *(_QWORD *)(v4 + 48);
    if (!v5)
    {
      v6 = *(_QWORD *)(v4 + 40);
      if (!v6)
      {
LABEL_11:
        result = 1;
LABEL_15:
        v7 = 2;
        goto LABEL_16;
      }
      if (*(_DWORD *)(v6 + 8) != 9)
      {
        *(_QWORD *)(a1 + 112) = v6;
        --*(_DWORD *)(a1 + 128);
        *(_DWORD *)(a1 + 24) = 4;
        xmlTextReaderNextTree(a1);
        goto LABEL_11;
      }
LABEL_14:
      result = 0;
      goto LABEL_15;
    }
  }
  else
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 24);
    if (!v5)
      goto LABEL_14;
  }
LABEL_13:
  v7 = 0;
  *(_QWORD *)(a1 + 112) = v5;
  result = 1;
LABEL_16:
  *(_DWORD *)(a1 + 24) = v7;
  return result;
}

xmlChar *__cdecl xmlTextReaderReadInnerXml(xmlTextReaderPtr reader)
{
  xmlDoc *v2;
  xmlBufferPtr v3;
  xmlBuffer *v4;
  xmlNode *v5;
  xmlNode *v6;
  xmlBuffer *v7;
  xmlChar *content;

  if (!xmlTextReaderExpand(reader))
    return 0;
  v2 = *(xmlDoc **)(*((_QWORD *)reader + 14) + 64);
  v3 = xmlBufferCreate();
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *(xmlNode **)(*((_QWORD *)reader + 14) + 24);
  if (v5)
  {
    while (1)
    {
      v6 = xmlDocCopyNode(v5, v2, 1);
      v7 = xmlBufferCreate();
      if (xmlNodeDump(v7, v2, v6, 0, 0) == -1)
        break;
      xmlBufferCat(v4, v7->content);
      xmlFreeNode(v6);
      xmlBufferFree(v7);
      v5 = v5->next;
      if (!v5)
        goto LABEL_6;
    }
    xmlFreeNode(v6);
    xmlBufferFree(v7);
    content = 0;
  }
  else
  {
LABEL_6:
    content = v4->content;
    v4->content = 0;
  }
  xmlBufferFree(v4);
  return content;
}

xmlChar *__cdecl xmlTextReaderReadOuterXml(xmlTextReaderPtr reader)
{
  uint64_t v2;
  xmlDoc *v3;
  xmlNode *v4;
  xmlNode *v5;
  xmlBuffer *v6;
  xmlChar *content;

  if (!xmlTextReaderExpand(reader))
    return 0;
  v2 = *((_QWORD *)reader + 14);
  v3 = *(xmlDoc **)(v2 + 64);
  if (*(_DWORD *)(v2 + 8) == 14)
    v4 = (xmlNode *)xmlCopyDtd((xmlDtdPtr)v2);
  else
    v4 = xmlDocCopyNode((xmlNodePtr)v2, *(xmlDocPtr *)(v2 + 64), 1);
  v5 = v4;
  v6 = xmlBufferCreate();
  if (xmlNodeDump(v6, v3, v5, 0, 0) == -1)
  {
    xmlFreeNode(v5);
    xmlBufferFree(v6);
    return 0;
  }
  content = v6->content;
  v6->content = 0;
  xmlFreeNode(v5);
  xmlBufferFree(v6);
  return content;
}

xmlChar *__cdecl xmlTextReaderReadString(xmlTextReaderPtr reader)
{
  uint64_t v1;
  int v2;
  const xmlChar *v3;
  xmlGenericErrorFunc v5;
  void **v6;

  if (reader && *((_QWORD *)reader + 14))
  {
    if (*((_QWORD *)reader + 15))
      v1 = *((_QWORD *)reader + 15);
    else
      v1 = *((_QWORD *)reader + 14);
    v2 = *(_DWORD *)(v1 + 8);
    switch(v2)
    {
      case 1:
        if (xmlTextReaderDoExpand((uint64_t)reader) != -1)
          return xmlTextReaderCollectSiblings(*(_QWORD *)(v1 + 24));
        break;
      case 2:
        v5 = *__xmlGenericError();
        v6 = __xmlGenericErrorContext();
        v5(*v6, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlreader.c", 1877);
        break;
      case 3:
        v3 = *(const xmlChar **)(v1 + 80);
        if (v3)
          return xmlStrdup(v3);
        break;
    }
  }
  return 0;
}

xmlChar *xmlTextReaderCollectSiblings(uint64_t a1)
{
  xmlChar *content;
  xmlBufferPtr v2;
  xmlBuffer *v3;
  int v4;
  xmlChar *v5;

  content = (xmlChar *)a1;
  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 18)
      return 0;
    v2 = xmlBufferCreate();
    if (!v2)
    {
      return 0;
    }
    else
    {
      v3 = v2;
      do
      {
        v4 = *((_DWORD *)content + 2);
        if ((v4 - 3) >= 2)
        {
          if (v4 == 1)
          {
            v5 = (xmlChar *)xmlTextReaderCollectSiblings(*((_QWORD *)content + 3));
            xmlBufferCat(v3, v5);
            xmlFree(v5);
          }
        }
        else
        {
          xmlBufferCat(v3, *((const xmlChar **)content + 10));
        }
        content = (xmlChar *)*((_QWORD *)content + 6);
      }
      while (content);
      content = v3->content;
      v3->content = 0;
      xmlBufferFree(v3);
    }
  }
  return content;
}

int xmlTextReaderNextSibling(xmlTextReaderPtr reader)
{
  uint64_t v2;
  uint64_t v3;

  if (!reader || !*((_QWORD *)reader + 1))
    return -1;
  if (*((_DWORD *)reader + 6) == 2)
    return 0;
  v2 = *((_QWORD *)reader + 14);
  if (!v2)
    return xmlTextReaderNextTree((uint64_t)reader);
  v3 = *(_QWORD *)(v2 + 48);
  if (!v3)
    return 0;
  *((_QWORD *)reader + 14) = v3;
  *((_DWORD *)reader + 6) = 0;
  return 1;
}

uint64_t xmlTextReaderStartElement(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;

  v1 = *(_QWORD *)(result + 424);
  if (v1)
  {
    v2 = *(uint64_t (**)(void))(v1 + 56);
    if (v2)
    {
      v3 = result;
      result = v2();
      v4 = *(_QWORD *)(v3 + 80);
      if (v4)
      {
        v5 = *(_QWORD *)(v3 + 56);
        if (v5)
        {
          v6 = *(_BYTE **)(v5 + 32);
          if (v6)
          {
            if (*v6 == 47 && v6[1] == 62)
              *(_WORD *)(v4 + 114) = 1;
          }
        }
      }
    }
    *(_DWORD *)(v1 + 24) = 1;
  }
  return result;
}

uint64_t xmlTextReaderEndElement(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(result + 424);
  if (v1)
  {
    v2 = *(uint64_t (**)(void))(v1 + 64);
    if (v2)
      return v2();
  }
  return result;
}

uint64_t xmlTextReaderCDataBlock(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(void);

  v1 = *(_QWORD *)(result + 424);
  if (v1)
  {
    v2 = *(uint64_t (**)(void))(v1 + 96);
    if (v2)
      return v2();
  }
  return result;
}

xmlTextReaderPtr xmlNewTextReaderFilename(const char *URI)
{
  xmlParserInputBuffer *Filename;
  xmlParserInputBuffer *v3;
  xmlTextReaderPtr v4;
  xmlTextReaderPtr v5;
  char *Directory;
  char *v7;
  BOOL v8;

  Filename = xmlParserInputBufferCreateFilename(URI, XML_CHAR_ENCODING_NONE);
  if (!Filename)
    return 0;
  v3 = Filename;
  v4 = xmlNewTextReader(Filename, URI);
  v5 = v4;
  if (v4)
  {
    *((_DWORD *)v4 + 5) |= 1u;
    if (!*(_QWORD *)(*((_QWORD *)v4 + 4) + 280))
    {
      Directory = xmlParserGetDirectory(URI);
      v7 = Directory;
      if (*(_QWORD *)(*((_QWORD *)v5 + 4) + 280))
        v8 = 1;
      else
        v8 = Directory == 0;
      if (v8)
      {
        if (!Directory)
          return v5;
      }
      else
      {
        *(_QWORD *)(*((_QWORD *)v5 + 4) + 280) = xmlStrdup((const xmlChar *)Directory);
      }
      xmlFree(v7);
    }
  }
  else
  {
    xmlFreeParserInputBuffer(v3);
  }
  return v5;
}

xmlChar *__cdecl xmlTextReaderGetAttributeNo(xmlChar *reader, int no)
{
  uint64_t v2;
  int v3;
  uint64_t **v4;
  int v5;
  uint64_t v6;
  int v7;

  if (reader)
  {
    v2 = *((_QWORD *)reader + 14);
    if (!v2 || *((_QWORD *)reader + 15) || *(_DWORD *)(v2 + 8) != 1)
      return 0;
    v3 = 0;
    v4 = (uint64_t **)(v2 + 96);
    do
    {
      v5 = v3;
      v4 = (uint64_t **)*v4;
      ++v3;
    }
    while (v5 < no && v4);
    if (v4)
      return xmlStrdup((const xmlChar *)v4[2]);
    v6 = *(_QWORD *)(v2 + 88);
    if (!v6)
      return 0;
    if (v5 < no)
    {
      v7 = no - v3 + 1;
      do
      {
        v6 = *(_QWORD *)(v6 + 48);
        if (!v6)
          return 0;
      }
      while (--v7);
    }
    reader = xmlNodeListGetString(*(xmlDocPtr *)(v2 + 64), *(const xmlNode **)(v6 + 24), 1);
    if (!reader)
      return xmlStrdup((const xmlChar *)&byte_1B0865C1A);
  }
  return reader;
}

xmlChar *__cdecl xmlTextReaderGetAttribute(xmlTextReaderPtr reader, const xmlChar *name)
{
  xmlChar *v2;
  uint64_t v5;
  xmlChar *v6;
  xmlChar *v7;
  int v8;
  xmlNode *v9;
  xmlNs *nsDef;
  const xmlChar *v11;
  int v12;
  const xmlNode *v13;
  xmlNs **p_nsDef;
  xmlNsPtr v17;
  xmlChar *NsProp;
  xmlChar *prefix;

  v2 = 0;
  prefix = 0;
  if (!reader || !name)
    return v2;
  v5 = *((_QWORD *)reader + 14);
  if (!v5 || *((_QWORD *)reader + 15) || *(_DWORD *)(v5 + 8) != 1)
    return 0;
  v6 = xmlSplitQName2(name, &prefix);
  if (v6)
  {
    v7 = v6;
    v8 = xmlStrEqual(prefix, (const xmlChar *)"xmlns");
    v9 = (xmlNode *)*((_QWORD *)reader + 14);
    if (v8)
    {
      nsDef = v9->nsDef;
      if (nsDef)
      {
        while (1)
        {
          v11 = nsDef->prefix;
          if (v11)
          {
            if (xmlStrEqual(v11, v7))
              break;
          }
          nsDef = nsDef->next;
          if (!nsDef)
            goto LABEL_22;
        }
        NsProp = xmlStrdup(nsDef->href);
        goto LABEL_26;
      }
    }
    else
    {
      v17 = xmlSearchNs(v9->doc, v9, prefix);
      if (v17)
      {
        NsProp = xmlGetNsProp(*((const xmlNode **)reader + 14), v7, v17->href);
LABEL_26:
        v2 = NsProp;
LABEL_27:
        xmlFree(v7);
        if (prefix)
          xmlFree(prefix);
        return v2;
      }
    }
LABEL_22:
    v2 = 0;
    goto LABEL_27;
  }
  v12 = xmlStrEqual(name, (const xmlChar *)"xmlns");
  v13 = (const xmlNode *)*((_QWORD *)reader + 14);
  if (v12)
  {
    p_nsDef = &v13->nsDef;
    while (1)
    {
      p_nsDef = (xmlNs **)*p_nsDef;
      if (!p_nsDef)
        break;
      if (!p_nsDef[3])
        return xmlStrdup((const xmlChar *)p_nsDef[2]);
    }
    return 0;
  }
  return xmlGetNoNsProp(v13, name);
}

xmlChar *__cdecl xmlTextReaderGetAttributeNs(xmlTextReaderPtr reader, const xmlChar *localName, const xmlChar *namespaceURI)
{
  uint64_t v5;
  int v7;
  uint64_t **v8;
  int v9;
  const xmlChar *v10;

  if (!reader)
    return 0;
  if (!localName)
    return 0;
  v5 = *((_QWORD *)reader + 14);
  if (!v5 || *((_QWORD *)reader + 15) || *(_DWORD *)(v5 + 8) != 1)
    return 0;
  if (!xmlStrEqual(namespaceURI, (const xmlChar *)"http://www.w3.org/2000/xmlns/"))
    return xmlGetNsProp(*((const xmlNode **)reader + 14), localName, namespaceURI);
  v7 = xmlStrEqual(localName, (const xmlChar *)"xmlns");
  v8 = *(uint64_t ***)(*((_QWORD *)reader + 14) + 96);
  if (!v8)
    return 0;
  v9 = v7;
  while (1)
  {
    v10 = (const xmlChar *)v8[3];
    if (v9)
      break;
    if (v10)
      goto LABEL_13;
LABEL_14:
    v8 = (uint64_t **)*v8;
    if (!v8)
      return 0;
  }
  if (!v10)
    return xmlStrdup((const xmlChar *)v8[2]);
LABEL_13:
  if (!xmlStrEqual(v10, localName))
    goto LABEL_14;
  return xmlStrdup((const xmlChar *)v8[2]);
}

xmlParserInputBufferPtr xmlTextReaderGetRemainder(xmlParserInputBufferPtr reader)
{
  xmlParserInputBufferPtr v1;
  xmlParserCtxt *buffer;
  xmlBufPtr v3;
  uint64_t v4;
  int closecallback_high;
  xmlGenericErrorFunc v6;
  void **v7;

  if (reader)
  {
    v1 = reader;
    if (!*(_QWORD *)&reader[1].compressed)
      return 0;
    *(_QWORD *)&reader[1].compressed = 0;
    reader[1].rawconsumed = 0;
    LODWORD(reader->context) = 3;
    buffer = (xmlParserCtxt *)reader->buffer;
    if (buffer)
    {
      xmlStopParser(buffer);
      v3 = v1->buffer;
      v4 = *((_QWORD *)v3 + 2);
      if (v4)
      {
        if (!LODWORD(v1[2].closecallback))
        {
          xmlTextReaderFreeDoc((uint64_t)v1, v4);
          v3 = v1->buffer;
        }
        *((_QWORD *)v3 + 2) = 0;
      }
    }
    closecallback_high = HIDWORD(v1->closecallback);
    if ((closecallback_high & 1) == 0)
    {
      v6 = *__xmlGenericError();
      v7 = __xmlGenericErrorContext();
      v6(*v7, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlreader.c", 2605);
      return 0;
    }
    reader = *(xmlParserInputBufferPtr *)&v1->compressed;
    *(_QWORD *)&v1->compressed = 0;
    HIDWORD(v1->closecallback) = closecallback_high - 1;
  }
  return reader;
}

xmlChar *__cdecl xmlTextReaderLookupNamespace(xmlTextReaderPtr reader, const xmlChar *prefix)
{
  xmlNode *v3;
  xmlNsPtr v4;

  if (reader && (v3 = (xmlNode *)*((_QWORD *)reader + 14)) != 0 && (v4 = xmlSearchNs(v3->doc, v3, prefix)) != 0)
    return xmlStrdup(v4->href);
  else
    return 0;
}

int xmlTextReaderMoveToAttributeNo(xmlTextReaderPtr reader, int no)
{
  uint64_t v2;
  int v3;
  _QWORD *v4;
  int v5;
  int v7;

  if (!reader)
    return -1;
  v2 = *((_QWORD *)reader + 14);
  if (!v2 || *(_DWORD *)(v2 + 8) != 1)
    return -1;
  v3 = 0;
  *((_QWORD *)reader + 15) = 0;
  v4 = (_QWORD *)(v2 + 96);
  do
  {
    v5 = v3;
    v4 = (_QWORD *)*v4;
    ++v3;
  }
  while (v5 < no && v4);
  if (v4)
    goto LABEL_8;
  v4 = *(_QWORD **)(v2 + 88);
  if (v4)
  {
    if (v5 >= no)
    {
LABEL_8:
      *((_QWORD *)reader + 15) = v4;
      return 1;
    }
    v7 = no - v3 + 1;
    while (1)
    {
      v4 = (_QWORD *)v4[6];
      if (!v4)
        break;
      if (!--v7)
        goto LABEL_8;
    }
  }
  return 0;
}

int xmlTextReaderMoveToAttribute(xmlTextReaderPtr reader, const xmlChar *name)
{
  int result;
  uint64_t v5;
  xmlChar *v6;
  xmlChar *v7;
  int v8;
  uint64_t v9;
  uint64_t **i;
  const xmlChar *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  xmlChar *prefix;

  prefix = 0;
  result = -1;
  if (reader)
  {
    if (name)
    {
      v5 = *((_QWORD *)reader + 14);
      if (v5)
      {
        if (*(_DWORD *)(v5 + 8) != 1)
          return 0;
        v6 = xmlSplitQName2(name, &prefix);
        if (!v6)
        {
          v12 = xmlStrEqual(name, (const xmlChar *)"xmlns");
          v13 = *((_QWORD *)reader + 14);
          if (v12)
          {
            v14 = (_QWORD *)(v13 + 96);
            while (1)
            {
              v14 = (_QWORD *)*v14;
              if (!v14)
                break;
              if (!v14[3])
              {
                *((_QWORD *)reader + 15) = v14;
                return 1;
              }
            }
          }
          else
          {
            v16 = *(_QWORD *)(v13 + 88);
            if (v16)
            {
              while (1)
              {
                if (xmlStrEqual(*(const xmlChar **)(v16 + 16), name))
                {
                  v17 = *(_QWORD *)(v16 + 72);
                  if (!v17 || !*(_QWORD *)(v17 + 24))
                    break;
                }
                result = 0;
                v16 = *(_QWORD *)(v16 + 48);
                if (!v16)
                  return result;
              }
              *((_QWORD *)reader + 15) = v16;
              return 1;
            }
          }
          return 0;
        }
        v7 = v6;
        v8 = xmlStrEqual(prefix, (const xmlChar *)"xmlns");
        v9 = *((_QWORD *)reader + 14);
        if (v8)
        {
          i = *(uint64_t ***)(v9 + 96);
          if (i)
          {
            while (1)
            {
              v11 = (const xmlChar *)i[3];
              if (v11)
              {
                if (xmlStrEqual(v11, v7))
                  break;
              }
              i = (uint64_t **)*i;
              if (!i)
                goto LABEL_22;
            }
LABEL_32:
            *((_QWORD *)reader + 15) = i;
            xmlFree(v7);
            if (prefix)
              xmlFree(prefix);
            return 1;
          }
        }
        else
        {
          for (i = *(uint64_t ***)(v9 + 88); i; i = (uint64_t **)i[6])
          {
            if (xmlStrEqual((const xmlChar *)i[2], v7))
            {
              v15 = i[9];
              if (v15)
              {
                if (xmlStrEqual((const xmlChar *)v15[3], prefix))
                  goto LABEL_32;
              }
            }
          }
        }
LABEL_22:
        xmlFree(v7);
        result = (int)prefix;
        if (prefix)
        {
          xmlFree(prefix);
          return 0;
        }
      }
    }
  }
  return result;
}

int xmlTextReaderMoveToAttributeNs(xmlTextReaderPtr reader, const xmlChar *localName, const xmlChar *namespaceURI)
{
  int result;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  int v10;
  const xmlChar *v11;
  uint64_t *v12;

  result = -1;
  if (reader)
  {
    if (localName)
    {
      if (namespaceURI)
      {
        v7 = *((_QWORD *)reader + 14);
        if (v7)
        {
          if (*(_DWORD *)(v7 + 8) != 1)
            return 0;
          if (xmlStrEqual(namespaceURI, (const xmlChar *)"http://www.w3.org/2000/xmlns/"))
          {
            v8 = xmlStrEqual(localName, (const xmlChar *)"xmlns");
            v9 = *(uint64_t ***)(*((_QWORD *)reader + 14) + 96);
            if (v9)
            {
              v10 = v8;
              while (1)
              {
                v11 = (const xmlChar *)v9[3];
                if (v10)
                  break;
                if (v11)
                  goto LABEL_13;
LABEL_14:
                result = 0;
                v9 = (uint64_t **)*v9;
                if (!v9)
                  return result;
              }
              if (!v11)
                goto LABEL_24;
LABEL_13:
              if (xmlStrEqual(v11, localName))
                goto LABEL_24;
              goto LABEL_14;
            }
            return 0;
          }
          v9 = *(uint64_t ***)(v7 + 88);
          if (!v9)
            return 0;
          while (1)
          {
            if (xmlStrEqual((const xmlChar *)v9[2], localName))
            {
              v12 = v9[9];
              if (v12)
              {
                if (xmlStrEqual((const xmlChar *)v12[2], namespaceURI))
                  break;
              }
            }
            result = 0;
            v9 = (uint64_t **)v9[6];
            if (!v9)
              return result;
          }
LABEL_24:
          *((_QWORD *)reader + 15) = v9;
          return 1;
        }
      }
    }
  }
  return result;
}

int xmlTextReaderMoveToFirstAttribute(xmlTextReaderPtr reader)
{
  uint64_t v1;
  uint64_t v2;

  if (!reader)
    return -1;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return -1;
  if (*(_DWORD *)(v1 + 8) != 1)
    return 0;
  v2 = *(_QWORD *)(v1 + 96);
  if (!v2)
  {
    v2 = *(_QWORD *)(v1 + 88);
    if (!v2)
      return 0;
  }
  *((_QWORD *)reader + 15) = v2;
  return 1;
}

int xmlTextReaderMoveToElement(xmlTextReaderPtr reader)
{
  uint64_t v1;

  if (!reader)
    return -1;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return -1;
  if (*(_DWORD *)(v1 + 8) != 1 || !*((_QWORD *)reader + 15))
    return 0;
  *((_QWORD *)reader + 15) = 0;
  return 1;
}

int xmlTextReaderReadAttributeValue(xmlTextReaderPtr reader)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  xmlNodePtr v5;
  uint64_t v6;
  void *v7;
  BOOL v8;
  xmlChar *v9;

  if (reader)
  {
    v2 = *((_QWORD *)reader + 14);
    if (v2)
    {
      v3 = *((_QWORD *)reader + 15);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 + 8);
        if (v4 == 18)
        {
          v6 = *((_QWORD *)reader + 17);
          if (v6)
          {
            v7 = *(void **)(v6 + 80);
            if (v7)
              v8 = v7 == (void *)(v6 + 88);
            else
              v8 = 1;
            if (!v8)
              xmlFree(v7);
            v9 = xmlStrdup(*(const xmlChar **)(v3 + 16));
            v5 = (xmlNodePtr)*((_QWORD *)reader + 17);
            v5->content = v9;
          }
          else
          {
            v5 = xmlNewDocText(*(const xmlDoc **)(v2 + 64), *(const xmlChar **)(v3 + 16));
            *((_QWORD *)reader + 17) = v5;
          }
        }
        else if (v4 == 2)
        {
          v5 = *(xmlNodePtr *)(v3 + 24);
          if (!v5)
            return (int)v5;
        }
        else
        {
          v5 = *(xmlNodePtr *)(v3 + 48);
          if (!v5)
            return (int)v5;
        }
        *((_QWORD *)reader + 15) = v5;
        LODWORD(v5) = 1;
      }
      else
      {
        LODWORD(v5) = 0;
      }
    }
    else
    {
      LODWORD(v5) = -1;
    }
  }
  else
  {
    LODWORD(v5) = -1;
  }
  return (int)v5;
}

const xmlChar *__cdecl xmlTextReaderConstEncoding(xmlTextReaderPtr reader)
{
  uint64_t v1;
  const xmlChar *v2;
  uint64_t v4;

  if (reader
    && ((v1 = *((_QWORD *)reader + 1)) != 0 || (v4 = *((_QWORD *)reader + 4)) != 0 && (v1 = *(_QWORD *)(v4 + 16)) != 0)
    && (v2 = *(const xmlChar **)(v1 + 112)) != 0)
  {
    return xmlDictLookup(*((xmlDictPtr *)reader + 20), v2, -1);
  }
  else
  {
    return 0;
  }
}

int xmlTextReaderAttributeCount(xmlTextReaderPtr reader)
{
  uint64_t v1;
  int v2;
  int result;
  uint64_t v5;
  int v6;
  _QWORD *v7;

  if (!reader)
    return -1;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return 0;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  if (*(_DWORD *)(v1 + 8) != 1)
    return 0;
  v2 = *((_DWORD *)reader + 6);
  if (v2 == 2 || v2 == 4)
    return 0;
  v5 = *(_QWORD *)(v1 + 88);
  if (v5)
  {
    v6 = 0;
    do
    {
      ++v6;
      v5 = *(_QWORD *)(v5 + 48);
    }
    while (v5);
  }
  else
  {
    v6 = 0;
  }
  v7 = (_QWORD *)(v1 + 96);
  result = v6 - 1;
  do
  {
    v7 = (_QWORD *)*v7;
    ++result;
  }
  while (v7);
  return result;
}

xmlChar *__cdecl xmlTextReaderLocalName(xmlTextReaderPtr reader)
{
  uint64_t v1;
  int v2;
  const xmlChar *v3;

  if (!reader)
    return 0;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return 0;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) >= 2)
  {
    if (v2 != 18)
      return xmlTextReaderName(reader);
    v3 = *(const xmlChar **)(v1 + 24);
    if (!v3)
      return xmlStrdup((const xmlChar *)"xmlns");
  }
  else
  {
    v3 = *(const xmlChar **)(v1 + 16);
  }
  return xmlStrdup(v3);
}

xmlChar *__cdecl xmlTextReaderName(xmlChar *reader)
{
  xmlChar *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  const xmlChar *v7;
  xmlChar *v8;
  xmlChar *v9;
  const xmlChar *v10;

  if (reader)
  {
    v1 = reader;
    v2 = *((_QWORD *)reader + 14);
    if (v2)
    {
      reader = 0;
      v3 = *((_QWORD *)v1 + 15);
      if (v3)
        v4 = v3;
      else
        v4 = v2;
      switch(*(_DWORD *)(v4 + 8))
      {
        case 1:
        case 2:
          v6 = *(_QWORD *)(v4 + 72);
          if (!v6)
            goto LABEL_7;
          v7 = *(const xmlChar **)(v6 + 24);
          if (!v7)
            goto LABEL_7;
          v8 = xmlStrdup(v7);
          v9 = xmlStrcat(v8, (const xmlChar *)":");
          v10 = *(const xmlChar **)(v4 + 16);
          goto LABEL_21;
        case 3:
          v5 = "#text";
          goto LABEL_18;
        case 4:
          v5 = "#cdata-section";
          goto LABEL_18;
        case 5:
        case 6:
        case 7:
        case 0xA:
        case 0xC:
        case 0xE:
LABEL_7:
          v5 = *(const char **)(v4 + 16);
          goto LABEL_18;
        case 8:
          v5 = "#comment";
          goto LABEL_18;
        case 9:
        case 0xD:
        case 0x15:
          v5 = "#document";
          goto LABEL_18;
        case 0xB:
          v5 = "#document-fragment";
LABEL_18:
          reader = xmlStrdup((const xmlChar *)v5);
          break;
        case 0x12:
          reader = xmlStrdup((const xmlChar *)"xmlns");
          if (*(_QWORD *)(v4 + 24))
          {
            v9 = xmlStrcat(reader, (const xmlChar *)":");
            v10 = *(const xmlChar **)(v4 + 24);
LABEL_21:
            reader = xmlStrcat(v9, v10);
          }
          break;
        default:
          return reader;
      }
    }
    else
    {
      return 0;
    }
  }
  return reader;
}

const xmlChar *__cdecl xmlTextReaderConstLocalName(xmlTextReaderPtr reader)
{
  uint64_t v1;
  int v2;

  if (!reader)
    return 0;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return (const xmlChar *)v1;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) < 2)
    return *(const xmlChar **)(v1 + 16);
  if (v2 != 18)
    return xmlTextReaderConstName(reader);
  v1 = *(_QWORD *)(v1 + 24);
  if (v1)
    return (const xmlChar *)v1;
  return xmlDictLookup(*((xmlDictPtr *)reader + 20), (const xmlChar *)"xmlns", -1);
}

xmlChar *__cdecl xmlTextReaderPrefix(xmlTextReaderPtr reader)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  const xmlChar *v4;

  if (!reader)
    return 0;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return 0;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) >= 2)
  {
    if (v2 == 18 && *(_QWORD *)(v1 + 24))
      return xmlStrdup((const xmlChar *)"xmlns");
    return 0;
  }
  v3 = *(_QWORD *)(v1 + 72);
  if (!v3)
    return 0;
  v4 = *(const xmlChar **)(v3 + 24);
  if (!v4)
    return 0;
  return xmlStrdup(v4);
}

const xmlChar *__cdecl xmlTextReaderConstPrefix(xmlTextReaderPtr reader)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  const xmlChar *v4;

  if (!reader)
    return 0;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return 0;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) >= 2)
  {
    if (v2 != 18 || !*(_QWORD *)(v1 + 24))
      return 0;
    v4 = (const xmlChar *)"xmlns";
    return xmlDictLookup(*((xmlDictPtr *)reader + 20), v4, -1);
  }
  v3 = *(_QWORD *)(v1 + 72);
  if (v3)
  {
    v4 = *(const xmlChar **)(v3 + 24);
    if (v4)
      return xmlDictLookup(*((xmlDictPtr *)reader + 20), v4, -1);
  }
  return 0;
}

xmlChar *__cdecl xmlTextReaderNamespaceUri(xmlTextReaderPtr reader)
{
  uint64_t v1;
  int v2;
  uint64_t v3;

  if (!reader)
    return 0;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return 0;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  v2 = *(_DWORD *)(v1 + 8);
  if ((v2 - 1) >= 2)
  {
    if (v2 == 18)
      return xmlStrdup((const xmlChar *)"http://www.w3.org/2000/xmlns/");
    return 0;
  }
  v3 = *(_QWORD *)(v1 + 72);
  if (!v3)
    return 0;
  return xmlStrdup(*(const xmlChar **)(v3 + 16));
}

const xmlChar *__cdecl xmlTextReaderConstNamespaceUri(xmlTextReaderPtr reader)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  xmlDict *v4;
  const xmlChar *v5;

  if (reader)
  {
    v1 = *((_QWORD *)reader + 14);
    if (v1)
    {
      if (*((_QWORD *)reader + 15))
        v1 = *((_QWORD *)reader + 15);
      v2 = *(_DWORD *)(v1 + 8);
      if ((v2 - 1) >= 2)
      {
        if (v2 == 18)
        {
          v4 = (xmlDict *)*((_QWORD *)reader + 20);
          v5 = (const xmlChar *)"http://www.w3.org/2000/xmlns/";
          return xmlDictLookup(v4, v5, -1);
        }
      }
      else
      {
        v3 = *(_QWORD *)(v1 + 72);
        if (v3)
        {
          v4 = (xmlDict *)*((_QWORD *)reader + 20);
          v5 = *(const xmlChar **)(v3 + 16);
          return xmlDictLookup(v4, v5, -1);
        }
      }
    }
  }
  return 0;
}

xmlChar *__cdecl xmlTextReaderBaseUri(xmlTextReaderPtr reader)
{
  const xmlNode *v1;

  if (reader && (v1 = (const xmlNode *)*((_QWORD *)reader + 14)) != 0)
    return xmlNodeGetBase(0, v1);
  else
    return 0;
}

const xmlChar *__cdecl xmlTextReaderConstBaseUri(xmlTextReaderPtr reader)
{
  const xmlNode *v2;
  xmlChar *Base;
  xmlChar *v4;
  const xmlChar *v5;

  if (!reader)
    return 0;
  v2 = (const xmlNode *)*((_QWORD *)reader + 14);
  if (!v2)
    return 0;
  Base = xmlNodeGetBase(0, v2);
  if (!Base)
    return 0;
  v4 = Base;
  v5 = xmlDictLookup(*((xmlDictPtr *)reader + 20), Base, -1);
  xmlFree(v4);
  return v5;
}

int xmlTextReaderDepth(xmlTextReaderPtr reader)
{
  uint64_t v1;

  if (!reader)
    return -1;
  if (!*((_QWORD *)reader + 14))
    return 0;
  v1 = *((_QWORD *)reader + 15);
  if (!v1)
    return *((_DWORD *)reader + 32);
  if ((*(_DWORD *)(v1 + 8) | 0x10) == 0x12)
    return *((_DWORD *)reader + 32) + 1;
  return *((_DWORD *)reader + 32) + 2;
}

int xmlTextReaderHasAttributes(xmlTextReaderPtr reader)
{
  uint64_t v1;

  if (!reader)
    return -1;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return 0;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  return *(_DWORD *)(v1 + 8) == 1 && (*(_QWORD *)(v1 + 88) || *(_QWORD *)(v1 + 96));
}

int xmlTextReaderHasValue(xmlTextReaderPtr reader)
{
  uint64_t v1;
  unsigned int v2;
  int result;
  BOOL v4;
  int v5;

  if (!reader)
    return -1;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return 0;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  v2 = *(_DWORD *)(v1 + 8);
  result = 1;
  v4 = v2 > 0x12;
  v5 = (1 << v2) & 0x4019C;
  if (v4 || v5 == 0)
    return 0;
  return result;
}

xmlChar *__cdecl xmlTextReaderValue(xmlTextReaderPtr reader)
{
  uint64_t v1;
  unsigned int v2;
  const xmlChar *v3;
  uint64_t v5;
  xmlDoc *v6;
  const xmlNode *v7;

  if (!reader)
    return 0;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return 0;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  v2 = *(_DWORD *)(v1 + 8);
  if (v2 > 0x12)
    return 0;
  if (((1 << v2) & 0x198) != 0)
  {
    v3 = *(const xmlChar **)(v1 + 80);
    if (v3)
      return xmlStrdup(v3);
    return 0;
  }
  if (v2 != 2)
  {
    if (v2 == 18)
      return xmlStrdup(*(const xmlChar **)(v1 + 16));
    return 0;
  }
  v5 = *(_QWORD *)(v1 + 40);
  if (v5)
  {
    v6 = *(xmlDoc **)(v5 + 64);
    v7 = *(const xmlNode **)(v1 + 24);
  }
  else
  {
    v7 = *(const xmlNode **)(v1 + 24);
    v6 = 0;
  }
  return xmlNodeListGetString(v6, v7, 1);
}

int xmlTextReaderIsDefault(xmlTextReaderPtr reader)
{
  if (reader)
    return 0;
  else
    return -1;
}

int xmlTextReaderQuoteChar(xmlTextReaderPtr reader)
{
  if (reader)
    return 34;
  else
    return -1;
}

xmlChar *__cdecl xmlTextReaderXmlLang(xmlTextReaderPtr reader)
{
  const xmlNode *v1;

  if (reader && (v1 = (const xmlNode *)*((_QWORD *)reader + 14)) != 0)
    return xmlNodeGetLang(v1);
  else
    return 0;
}

const xmlChar *__cdecl xmlTextReaderConstXmlLang(xmlTextReaderPtr reader)
{
  const xmlNode *v2;
  xmlChar *Lang;
  xmlChar *v4;
  const xmlChar *v5;

  if (!reader)
    return 0;
  v2 = (const xmlNode *)*((_QWORD *)reader + 14);
  if (!v2)
    return 0;
  Lang = xmlNodeGetLang(v2);
  if (!Lang)
    return 0;
  v4 = Lang;
  v5 = xmlDictLookup(*((xmlDictPtr *)reader + 20), Lang, -1);
  xmlFree(v4);
  return v5;
}

const xmlChar *__cdecl xmlTextReaderConstString(const xmlChar *reader, const xmlChar *str)
{
  if (reader)
    return xmlDictLookup(*((xmlDictPtr *)reader + 20), str, -1);
  return reader;
}

int xmlTextReaderNormalization(xmlTextReaderPtr reader)
{
  if (reader)
    return 1;
  else
    return -1;
}

int xmlTextReaderSetParserProp(xmlTextReaderPtr reader, int prop, int value)
{
  _DWORD *v4;
  int result;
  int v6;
  int v7;
  int v8;
  int v9;

  if (!reader)
    return -1;
  v4 = (_DWORD *)*((_QWORD *)reader + 4);
  if (!v4)
    return -1;
  switch(prop)
  {
    case 1:
      if (!value)
      {
        result = 0;
        v4[108] = 0;
        return result;
      }
      if (v4[108])
        return 0;
      if (*(_DWORD *)reader)
        return -1;
      result = 0;
      v7 = 2;
      goto LABEL_21;
    case 2:
      v6 = v4[108];
      if (value)
      {
        result = 0;
        v7 = v6 | 4;
      }
      else
      {
        if ((v6 & 4) == 0)
          return 0;
        result = 0;
        v7 = v6 - 4;
      }
LABEL_21:
      v4[108] = v7;
      break;
    case 3:
      v8 = v4[141];
      result = 0;
      if (value)
      {
        v4[141] = v8 | 0x10;
        v4[39] = 1;
        *((_DWORD *)reader + 4) = 1;
      }
      else
      {
        v4[141] = v8 & 0xFFFFFFEF;
        v4[39] = 0;
      }
      return result;
    case 4:
      v9 = v4[141];
      result = 0;
      if (value)
      {
        v4[141] = v9 | 2;
        v4[7] = 1;
      }
      else
      {
        v4[141] = v9 & 0xFFFFFFFD;
        v4[7] = 0;
      }
      return result;
    default:
      return -1;
  }
  return result;
}

int xmlTextReaderGetParserProp(xmlTextReaderPtr reader, int prop)
{
  int *v2;
  int result;

  if (!reader)
    return -1;
  v2 = (int *)*((_QWORD *)reader + 4);
  if (!v2)
    return -1;
  switch(prop)
  {
    case 1:
      if (v2[108])
        result = 1;
      else
        result = v2[39] != 0;
      break;
    case 2:
      result = (v2[108] >> 2) & 1;
      break;
    case 3:
      result = *((_DWORD *)reader + 4);
      break;
    case 4:
      result = v2[7];
      break;
    default:
      return -1;
  }
  return result;
}

xmlNodePtr xmlTextReaderCurrentNode(xmlNodePtr reader)
{
  xmlNodePtr v1;

  if (reader)
  {
    v1 = reader;
    reader = (xmlNodePtr)reader[1]._private;
    if (!reader)
      return *(xmlNodePtr *)&v1->line;
  }
  return reader;
}

int xmlTextReaderPreservePattern(xmlTextReaderPtr reader, const xmlChar *pattern, const xmlChar **namespaces)
{
  int result;
  xmlPatternPtr v5;
  xmlPatternPtr v6;
  int v7;
  void *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  xmlGenericErrorFunc v12;
  void **v13;
  xmlGenericErrorFunc v14;
  void **v15;

  result = -1;
  if (reader && pattern)
  {
    v5 = xmlPatterncompile(pattern, *((xmlDict **)reader + 20), 0, namespaces);
    if (v5)
    {
      v6 = v5;
      v7 = *((_DWORD *)reader + 76);
      if (v7 > 0)
      {
LABEL_7:
        result = *((_DWORD *)reader + 75);
        if (result < v7)
        {
          v9 = (_QWORD *)*((_QWORD *)reader + 39);
LABEL_11:
          v9[result] = v6;
          *((_DWORD *)reader + 75) = result + 1;
          return result;
        }
        v10 = 2 * v7;
        *((_DWORD *)reader + 76) = v10;
        v11 = xmlRealloc(*((void **)reader + 39), 8 * v10);
        if (v11)
        {
          v9 = v11;
          *((_QWORD *)reader + 39) = v11;
          result = *((_DWORD *)reader + 75);
          goto LABEL_11;
        }
        v12 = *__xmlGenericError();
        v13 = __xmlGenericErrorContext();
        v12(*v13, "xmlRealloc failed !\n");
        *((int *)reader + 76) /= 2;
        return -1;
      }
      *((_DWORD *)reader + 76) = 4;
      v8 = xmlMalloc(0x20uLL);
      *((_QWORD *)reader + 39) = v8;
      if (v8)
      {
        v7 = *((_DWORD *)reader + 76);
        goto LABEL_7;
      }
      v14 = *__xmlGenericError();
      v15 = __xmlGenericErrorContext();
      v14(*v15, "xmlMalloc failed !\n");
    }
    return -1;
  }
  return result;
}

xmlDocPtr xmlTextReaderCurrentDoc(xmlDocPtr reader)
{
  xmlDocPtr v1;
  _xmlNode *last;

  if (reader)
  {
    v1 = reader;
    reader = *(xmlDocPtr *)&reader->type;
    if (!reader)
    {
      last = v1->last;
      if (last)
      {
        reader = (xmlDocPtr)last->name;
        if (reader)
          v1->charset = 1;
      }
      else
      {
        return 0;
      }
    }
  }
  return reader;
}

int xmlTextReaderRelaxNGSetSchema(xmlTextReaderPtr reader, xmlRelaxNGPtr schema)
{
  int result;
  xmlRelaxNG *v5;
  xmlRelaxNGValidCtxt *v6;
  xmlRelaxNG *v7;
  xmlRelaxNGValidCtxt *v8;
  xmlRelaxNGValidCtxt *v9;

  if (!reader)
    return -1;
  if (schema)
  {
    if (*(_DWORD *)reader)
      return -1;
    v7 = (xmlRelaxNG *)*((_QWORD *)reader + 26);
    if (v7)
    {
      xmlRelaxNGFree(v7);
      *((_QWORD *)reader + 26) = 0;
    }
    v8 = (xmlRelaxNGValidCtxt *)*((_QWORD *)reader + 27);
    if (v8)
    {
      if (!*((_DWORD *)reader + 56))
        xmlRelaxNGFreeValidCtxt(v8);
      *((_QWORD *)reader + 27) = 0;
    }
    *((_DWORD *)reader + 56) = 0;
    v9 = xmlRelaxNGNewValidCtxt(schema);
    *((_QWORD *)reader + 27) = v9;
    if (!v9)
    {
      return -1;
    }
    else
    {
      if (*((_QWORD *)reader + 24))
        xmlRelaxNGSetValidErrors(v9, (xmlRelaxNGValidityErrorFunc)xmlTextReaderValidityErrorRelay, (xmlRelaxNGValidityWarningFunc)xmlTextReaderValidityWarningRelay, reader);
      if (*((_QWORD *)reader + 41))
        xmlRelaxNGSetValidStructuredErrors(*((xmlRelaxNGValidCtxtPtr *)reader + 27), (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay, reader);
      result = 0;
      *((_DWORD *)reader + 57) = 0;
      *((_QWORD *)reader + 29) = 0;
      *((_DWORD *)reader + 4) = 2;
    }
  }
  else
  {
    v5 = (xmlRelaxNG *)*((_QWORD *)reader + 26);
    if (v5)
    {
      xmlRelaxNGFree(v5);
      *((_QWORD *)reader + 26) = 0;
    }
    v6 = (xmlRelaxNGValidCtxt *)*((_QWORD *)reader + 27);
    if (v6)
    {
      if (!*((_DWORD *)reader + 56))
        xmlRelaxNGFreeValidCtxt(v6);
      *((_QWORD *)reader + 27) = 0;
    }
    result = 0;
    *((_DWORD *)reader + 56) = 0;
  }
  return result;
}

void xmlTextReaderValidityErrorRelay(uint64_t a1, char *__format, ...)
{
  char *v3;
  char *v4;
  void (*v5)(_QWORD, char *, uint64_t, _QWORD);
  va_list va;

  va_start(va, __format);
  v3 = xmlTextReaderBuildMessage(__format, va);
  v4 = v3;
  v5 = *(void (**)(_QWORD, char *, uint64_t, _QWORD))(a1 + 192);
  if (v5)
  {
    v5(*(_QWORD *)(a1 + 200), v3, 2, 0);
    if (!v4)
      return;
  }
  else
  {
    xmlTextReaderValidityError(a1, (xmlChar *)"%s", v3);
    if (!v4)
      return;
  }
  xmlFree(v4);
}

void xmlTextReaderValidityWarningRelay(uint64_t a1, char *__format, ...)
{
  char *v3;
  char *v4;
  void (*v5)(_QWORD, char *, uint64_t, _QWORD);
  va_list va;

  va_start(va, __format);
  v3 = xmlTextReaderBuildMessage(__format, va);
  v4 = v3;
  v5 = *(void (**)(_QWORD, char *, uint64_t, _QWORD))(a1 + 192);
  if (v5)
  {
    v5(*(_QWORD *)(a1 + 200), v3, 1, 0);
    if (!v4)
      return;
  }
  else
  {
    xmlTextReaderValidityWarning(a1, (xmlChar *)"%s", v3);
    if (!v4)
      return;
  }
  xmlFree(v4);
}

_QWORD *xmlTextReaderValidityStructuredRelay(_QWORD *result, uint64_t a2)
{
  uint64_t (*v2)(_QWORD);
  uint64_t v3;
  uint64_t (*v4)(_QWORD);

  v2 = (uint64_t (*)(_QWORD))result[41];
  if (v2)
    return (_QWORD *)v2(result[25]);
  if (a2)
  {
    v3 = result[53];
    v4 = *(uint64_t (**)(_QWORD))(v3 + 328);
    if (v4)
      return (_QWORD *)v4(*(_QWORD *)(v3 + 200));
  }
  return result;
}

int xmlTextReaderSetSchema(xmlTextReaderPtr reader, xmlSchemaPtr schema)
{
  xmlSchema *v4;
  xmlSchemaSAXPlugStruct *v5;
  xmlSchemaValidCtxt *v6;
  xmlSchemaSAXPlugStruct *v7;
  xmlSchemaValidCtxt *v8;
  xmlSchema *v9;
  xmlSchemaValidCtxt *v10;
  xmlSchemaSAXPlugPtr v11;

  if (!reader)
  {
    LODWORD(v4) = -1;
    return (int)v4;
  }
  if (schema)
  {
    if (*(_DWORD *)reader)
    {
LABEL_4:
      LODWORD(v4) = -1;
      return (int)v4;
    }
    v7 = (xmlSchemaSAXPlugStruct *)*((_QWORD *)reader + 33);
    if (v7)
    {
      xmlSchemaSAXUnplug(v7);
      *((_QWORD *)reader + 33) = 0;
    }
    v8 = (xmlSchemaValidCtxt *)*((_QWORD *)reader + 31);
    if (v8)
    {
      if (!*((_DWORD *)reader + 64))
        xmlSchemaFreeValidCtxt(v8);
      *((_QWORD *)reader + 31) = 0;
    }
    *((_DWORD *)reader + 64) = 0;
    v9 = (xmlSchema *)*((_QWORD *)reader + 30);
    if (v9)
    {
      xmlSchemaFree(v9);
      *((_QWORD *)reader + 30) = 0;
    }
    v10 = xmlSchemaNewValidCtxt(schema);
    *((_QWORD *)reader + 31) = v10;
    if (!v10)
    {
      xmlSchemaFree(*((xmlSchemaPtr *)reader + 30));
      *((_QWORD *)reader + 30) = 0;
      goto LABEL_4;
    }
    v11 = xmlSchemaSAXPlug(v10, *((xmlSAXHandlerPtr **)reader + 4), (void **)(*((_QWORD *)reader + 4) + 8));
    *((_QWORD *)reader + 33) = v11;
    if (!v11)
    {
      xmlSchemaFree(*((xmlSchemaPtr *)reader + 30));
      *((_QWORD *)reader + 30) = 0;
      xmlSchemaFreeValidCtxt(*((xmlSchemaValidCtxtPtr *)reader + 31));
      *((_QWORD *)reader + 31) = 0;
      goto LABEL_4;
    }
    xmlSchemaValidateSetLocator(*((xmlSchemaValidCtxtPtr *)reader + 31), (xmlSchemaValidityLocatorFunc)xmlTextReaderLocator, reader);
    if (*((_QWORD *)reader + 24))
      xmlSchemaSetValidErrors(*((xmlSchemaValidCtxtPtr *)reader + 31), (xmlSchemaValidityErrorFunc)xmlTextReaderValidityErrorRelay, (xmlSchemaValidityWarningFunc)xmlTextReaderValidityWarningRelay, reader);
    if (*((_QWORD *)reader + 41))
      xmlSchemaSetValidStructuredErrors(*((xmlSchemaValidCtxtPtr *)reader + 31), (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay, reader);
    LODWORD(v4) = 0;
    *((_DWORD *)reader + 65) = 0;
    *((_DWORD *)reader + 4) = 4;
  }
  else
  {
    v5 = (xmlSchemaSAXPlugStruct *)*((_QWORD *)reader + 33);
    if (v5)
    {
      xmlSchemaSAXUnplug(v5);
      *((_QWORD *)reader + 33) = 0;
    }
    v6 = (xmlSchemaValidCtxt *)*((_QWORD *)reader + 31);
    if (v6)
    {
      if (!*((_DWORD *)reader + 64))
        xmlSchemaFreeValidCtxt(v6);
      *((_QWORD *)reader + 31) = 0;
    }
    *((_DWORD *)reader + 64) = 0;
    v4 = (xmlSchema *)*((_QWORD *)reader + 30);
    if (v4)
    {
      xmlSchemaFree(v4);
      LODWORD(v4) = 0;
      *((_QWORD *)reader + 30) = 0;
    }
  }
  return (int)v4;
}

uint64_t xmlTextReaderLocator(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  const xmlNode *v9;
  uint64_t LineNo;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (!(a2 | a3))
    return 0xFFFFFFFFLL;
  if (a2)
    *(_QWORD *)a2 = 0;
  if (a3)
    *(_QWORD *)a3 = 0;
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7 || (v8 = *(_QWORD *)(v7 + 56)) == 0)
  {
    v9 = *(const xmlNode **)(a1 + 112);
    if (!v9)
      return 0xFFFFFFFFLL;
    if (a3)
    {
      LineNo = xmlGetLineNo(v9);
      if (LineNo < 1)
      {
        result = 0xFFFFFFFFLL;
        if (!a2)
          return result;
      }
      else
      {
        v11 = LineNo;
        result = 0;
        *(_QWORD *)a3 = v11;
        if (!a2)
          return result;
      }
    }
    else
    {
      result = 0;
      if (!a2)
        return result;
    }
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 112) + 64);
    if (v12)
    {
      v13 = *(_QWORD *)(v12 + 136);
      if (v13)
      {
        *(_QWORD *)a2 = v13;
        return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (a2)
    *(_QWORD *)a2 = *(_QWORD *)(v8 + 8);
  result = 0;
  if (a3)
    *(_QWORD *)a3 = *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) + 52);
  return result;
}

int xmlTextReaderSchemaValidateCtxt(xmlTextReaderPtr reader, xmlSchemaValidCtxtPtr ctxt, int options)
{
  return xmlTextReaderSchemaValidateInternal((uint64_t)reader, 0, ctxt);
}

uint64_t xmlTextReaderSchemaValidateInternal(uint64_t a1, char *URL, xmlSchemaValidCtxtPtr ctxt)
{
  uint64_t result;
  xmlSchemaSAXPlugStruct *v7;
  xmlSchemaValidCtxt *v8;
  xmlSchema *v9;
  xmlSchemaParserCtxt *v10;
  xmlSchemaParserCtxt *v11;
  xmlSchema *v12;
  xmlSchemaValidCtxt *v13;
  xmlSchemaSAXPlugPtr v14;
  xmlSchemaSAXPlugPtr v15;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (URL && ctxt || (unint64_t)URL | (unint64_t)ctxt && (*(_DWORD *)a1 || !*(_QWORD *)(a1 + 32)))
    return 0xFFFFFFFFLL;
  v7 = *(xmlSchemaSAXPlugStruct **)(a1 + 264);
  if (v7)
  {
    xmlSchemaSAXUnplug(v7);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v8 = *(xmlSchemaValidCtxt **)(a1 + 248);
  if (v8)
  {
    if (!*(_DWORD *)(a1 + 256))
      xmlSchemaFreeValidCtxt(v8);
    *(_QWORD *)(a1 + 248) = 0;
  }
  *(_DWORD *)(a1 + 256) = 0;
  v9 = *(xmlSchema **)(a1 + 240);
  if (v9)
  {
    xmlSchemaFree(v9);
    *(_QWORD *)(a1 + 240) = 0;
  }
  if (!((unint64_t)URL | (unint64_t)ctxt))
    return 0;
  if (URL)
  {
    v10 = xmlSchemaNewParserCtxt(URL);
    v11 = v10;
    if (*(_QWORD *)(a1 + 192))
      xmlSchemaSetParserErrors(v10, (xmlSchemaValidityErrorFunc)xmlTextReaderValidityErrorRelay, (xmlSchemaValidityWarningFunc)xmlTextReaderValidityWarningRelay, (void *)a1);
    *(_QWORD *)(a1 + 240) = xmlSchemaParse(v11);
    xmlSchemaFreeParserCtxt(v11);
    v12 = *(xmlSchema **)(a1 + 240);
    if (!v12)
      return 0xFFFFFFFFLL;
    v13 = xmlSchemaNewValidCtxt(v12);
    *(_QWORD *)(a1 + 248) = v13;
    if (!v13)
    {
      xmlSchemaFree(*(xmlSchemaPtr *)(a1 + 240));
      *(_QWORD *)(a1 + 240) = 0;
      return 0xFFFFFFFFLL;
    }
    v14 = xmlSchemaSAXPlug(v13, *(xmlSAXHandlerPtr **)(a1 + 32), (void **)(*(_QWORD *)(a1 + 32) + 8));
    *(_QWORD *)(a1 + 264) = v14;
    if (!v14)
    {
      xmlSchemaFree(*(xmlSchemaPtr *)(a1 + 240));
      *(_QWORD *)(a1 + 240) = 0;
      xmlSchemaFreeValidCtxt(*(xmlSchemaValidCtxtPtr *)(a1 + 248));
      *(_QWORD *)(a1 + 248) = 0;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 248) = ctxt;
    *(_DWORD *)(a1 + 256) = 1;
    v15 = xmlSchemaSAXPlug(ctxt, *(xmlSAXHandlerPtr **)(a1 + 32), (void **)(*(_QWORD *)(a1 + 32) + 8));
    *(_QWORD *)(a1 + 264) = v15;
    if (!v15)
    {
      *(_QWORD *)(a1 + 248) = 0;
      *(_DWORD *)(a1 + 256) = 0;
      return 0xFFFFFFFFLL;
    }
  }
  xmlSchemaValidateSetLocator(*(xmlSchemaValidCtxtPtr *)(a1 + 248), (xmlSchemaValidityLocatorFunc)xmlTextReaderLocator, (void *)a1);
  if (*(_QWORD *)(a1 + 192))
    xmlSchemaSetValidErrors(*(xmlSchemaValidCtxtPtr *)(a1 + 248), (xmlSchemaValidityErrorFunc)xmlTextReaderValidityErrorRelay, (xmlSchemaValidityWarningFunc)xmlTextReaderValidityWarningRelay, (void *)a1);
  if (*(_QWORD *)(a1 + 328))
    xmlSchemaSetValidStructuredErrors(*(xmlSchemaValidCtxtPtr *)(a1 + 248), (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay, (void *)a1);
  result = 0;
  *(_DWORD *)(a1 + 260) = 0;
  *(_DWORD *)(a1 + 16) = 4;
  return result;
}

int xmlTextReaderSchemaValidate(xmlTextReaderPtr reader, const char *xsd)
{
  return xmlTextReaderSchemaValidateInternal((uint64_t)reader, (char *)xsd, 0);
}

int xmlTextReaderRelaxNGValidateCtxt(xmlTextReaderPtr reader, xmlRelaxNGValidCtxtPtr ctxt, int options)
{
  return xmlTextReaderRelaxNGValidateInternal((uint64_t)reader, 0, ctxt);
}

uint64_t xmlTextReaderRelaxNGValidateInternal(uint64_t a1, char *URL, xmlRelaxNGValidCtxt *a3)
{
  xmlRelaxNGValidCtxt *v3;
  uint64_t result;
  xmlRelaxNGValidCtxt *v7;
  xmlRelaxNG *v8;
  xmlRelaxNGParserCtxt *v9;
  xmlRelaxNGParserCtxt *v10;
  xmlRelaxNG *v11;

  if (!a1)
    return 0xFFFFFFFFLL;
  v3 = a3;
  if (URL && a3 || (unint64_t)URL | (unint64_t)a3 && (*(_DWORD *)a1 || !*(_QWORD *)(a1 + 32)))
    return 0xFFFFFFFFLL;
  v7 = *(xmlRelaxNGValidCtxt **)(a1 + 216);
  if (v7)
  {
    if (!*(_DWORD *)(a1 + 224))
      xmlRelaxNGFreeValidCtxt(v7);
    *(_QWORD *)(a1 + 216) = 0;
  }
  *(_DWORD *)(a1 + 224) = 0;
  v8 = *(xmlRelaxNG **)(a1 + 208);
  if (v8)
  {
    xmlRelaxNGFree(v8);
    *(_QWORD *)(a1 + 208) = 0;
  }
  if (!((unint64_t)URL | (unint64_t)v3))
    return 0;
  if (URL)
  {
    v9 = xmlRelaxNGNewParserCtxt(URL);
    v10 = v9;
    if (*(_QWORD *)(a1 + 192))
      xmlRelaxNGSetParserErrors(v9, (xmlRelaxNGValidityErrorFunc)xmlTextReaderValidityErrorRelay, (xmlRelaxNGValidityWarningFunc)xmlTextReaderValidityWarningRelay, (void *)a1);
    if (*(_QWORD *)(a1 + 328))
      xmlRelaxNGSetValidStructuredErrors(*(xmlRelaxNGValidCtxtPtr *)(a1 + 216), (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay, (void *)a1);
    *(_QWORD *)(a1 + 208) = xmlRelaxNGParse(v10);
    xmlRelaxNGFreeParserCtxt(v10);
    v11 = *(xmlRelaxNG **)(a1 + 208);
    if (!v11)
      return 0xFFFFFFFFLL;
    v3 = xmlRelaxNGNewValidCtxt(v11);
    *(_QWORD *)(a1 + 216) = v3;
    if (!v3)
    {
      xmlRelaxNGFree(*(xmlRelaxNGPtr *)(a1 + 208));
      *(_QWORD *)(a1 + 208) = 0;
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 216) = v3;
    *(_DWORD *)(a1 + 224) = 1;
  }
  if (*(_QWORD *)(a1 + 192))
    xmlRelaxNGSetValidErrors(v3, (xmlRelaxNGValidityErrorFunc)xmlTextReaderValidityErrorRelay, (xmlRelaxNGValidityWarningFunc)xmlTextReaderValidityWarningRelay, (void *)a1);
  if (*(_QWORD *)(a1 + 328))
    xmlRelaxNGSetValidStructuredErrors(*(xmlRelaxNGValidCtxtPtr *)(a1 + 216), (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay, (void *)a1);
  result = 0;
  *(_DWORD *)(a1 + 228) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 16) = 2;
  return result;
}

int xmlTextReaderRelaxNGValidate(xmlTextReaderPtr reader, const char *rng)
{
  return xmlTextReaderRelaxNGValidateInternal((uint64_t)reader, (char *)rng, 0);
}

int xmlTextReaderIsNamespaceDecl(xmlTextReaderPtr reader)
{
  uint64_t v1;

  if (!reader)
    return -1;
  v1 = *((_QWORD *)reader + 14);
  if (!v1)
    return -1;
  if (*((_QWORD *)reader + 15))
    v1 = *((_QWORD *)reader + 15);
  return *(_DWORD *)(v1 + 8) == 18;
}

const xmlChar *__cdecl xmlTextReaderConstXmlVersion(xmlTextReaderPtr reader)
{
  uint64_t v1;
  const xmlChar *v2;
  uint64_t v4;

  if (reader
    && ((v1 = *((_QWORD *)reader + 1)) != 0 || (v4 = *((_QWORD *)reader + 4)) != 0 && (v1 = *(_QWORD *)(v4 + 16)) != 0)
    && (v2 = *(const xmlChar **)(v1 + 104)) != 0)
  {
    return xmlDictLookup(*((xmlDictPtr *)reader + 20), v2, -1);
  }
  else
  {
    return 0;
  }
}

int xmlTextReaderStandalone(xmlTextReaderPtr reader)
{
  uint64_t v1;
  uint64_t v3;

  if (reader
    && ((v1 = *((_QWORD *)reader + 1)) != 0 || (v3 = *((_QWORD *)reader + 4)) != 0 && (v1 = *(_QWORD *)(v3 + 16)) != 0))
  {
    return *(_DWORD *)(v1 + 76);
  }
  else
  {
    return -1;
  }
}

int xmlTextReaderLocatorLineNumber(xmlTextReaderLocatorPtr locator)
{
  uint64_t v2;
  int v3;
  BOOL v4;
  int v5;

  if (!locator)
    return -1;
  if (*((_QWORD *)locator + 10))
    return xmlGetLineNo(*((const xmlNode **)locator + 10));
  v2 = *((_QWORD *)locator + 7);
  if (*(_QWORD *)(v2 + 8))
    return *(_DWORD *)(v2 + 52);
  v3 = *((_DWORD *)locator + 16);
  v4 = __OFSUB__(v3, 2);
  v5 = v3 - 2;
  if (v5 < 0 != v4)
    return *(_DWORD *)(v2 + 52);
  v2 = *(_QWORD *)(*((_QWORD *)locator + 9) + 8 * v5);
  if (v2)
    return *(_DWORD *)(v2 + 52);
  else
    return -1;
}

xmlChar *__cdecl xmlTextReaderLocatorBaseURI(xmlTextReaderLocatorPtr locator)
{
  const xmlNode *v1;
  const xmlChar *v3;
  int v4;
  BOOL v5;
  int v6;
  uint64_t v7;

  if (!locator)
    return 0;
  v1 = (const xmlNode *)*((_QWORD *)locator + 10);
  if (v1)
    return xmlNodeGetBase(0, v1);
  v3 = *(const xmlChar **)(*((_QWORD *)locator + 7) + 8);
  if (!v3)
  {
    v4 = *((_DWORD *)locator + 16);
    v5 = __OFSUB__(v4, 2);
    v6 = v4 - 2;
    if (v6 < 0 == v5)
    {
      v7 = *(_QWORD *)(*((_QWORD *)locator + 9) + 8 * v6);
      if (v7)
        return xmlStrdup(*(const xmlChar **)(v7 + 8));
      return 0;
    }
    v3 = 0;
  }
  return xmlStrdup(v3);
}

void xmlTextReaderSetErrorHandler(xmlTextReaderPtr reader, xmlTextReaderErrorFunc f, void *arg)
{
  _QWORD *v4;
  _QWORD *v5;
  xmlRelaxNGValidCtxt *v6;
  xmlSchemaValidCtxt *v7;
  void (*v8)(uint64_t, char *, ...);
  void (*v9)(uint64_t, char *, ...);
  xmlRelaxNGValidCtxt *v10;

  v4 = (_QWORD *)*((_QWORD *)reader + 4);
  v5 = (_QWORD *)*v4;
  if (f)
  {
    v5[31] = 0;
    v5[21] = xmlTextReaderWarning;
    v5[22] = xmlTextReaderError;
    v4[21] = xmlTextReaderValidityError;
    v4[22] = xmlTextReaderValidityWarning;
    *((_QWORD *)reader + 41) = 0;
    *((_QWORD *)reader + 24) = f;
    *((_QWORD *)reader + 25) = arg;
    v6 = (xmlRelaxNGValidCtxt *)*((_QWORD *)reader + 27);
    if (v6)
    {
      xmlRelaxNGSetValidErrors(v6, (xmlRelaxNGValidityErrorFunc)xmlTextReaderValidityErrorRelay, (xmlRelaxNGValidityWarningFunc)xmlTextReaderValidityWarningRelay, reader);
      xmlRelaxNGSetValidStructuredErrors(*((xmlRelaxNGValidCtxtPtr *)reader + 27), 0, reader);
    }
    v7 = (xmlSchemaValidCtxt *)*((_QWORD *)reader + 31);
    if (v7)
    {
      v8 = xmlTextReaderValidityErrorRelay;
      v9 = xmlTextReaderValidityWarningRelay;
LABEL_10:
      xmlSchemaSetValidErrors(v7, (xmlSchemaValidityErrorFunc)v8, (xmlSchemaValidityWarningFunc)v9, reader);
      xmlSchemaSetValidStructuredErrors(*((xmlSchemaValidCtxtPtr *)reader + 31), 0, reader);
    }
  }
  else
  {
    v5[21] = xmlParserWarning;
    v5[22] = xmlParserError;
    v4[21] = xmlParserValidityError;
    v4[22] = xmlParserValidityWarning;
    *((_QWORD *)reader + 41) = 0;
    *((_QWORD *)reader + 24) = 0;
    *((_QWORD *)reader + 25) = 0;
    v10 = (xmlRelaxNGValidCtxt *)*((_QWORD *)reader + 27);
    if (v10)
    {
      xmlRelaxNGSetValidErrors(v10, 0, 0, reader);
      xmlRelaxNGSetValidStructuredErrors(*((xmlRelaxNGValidCtxtPtr *)reader + 27), 0, reader);
    }
    v7 = (xmlSchemaValidCtxt *)*((_QWORD *)reader + 31);
    if (v7)
    {
      v8 = 0;
      v9 = 0;
      goto LABEL_10;
    }
  }
}

void xmlTextReaderError(uint64_t a1, char *__format, ...)
{
  char *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(_QWORD, char *, uint64_t, uint64_t);
  va_list va;

  va_start(va, __format);
  v3 = xmlTextReaderBuildMessage(__format, va);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 424);
    v6 = *(void (**)(_QWORD, char *, uint64_t, uint64_t))(v5 + 192);
    if (v6)
      v6(*(_QWORD *)(v5 + 200), v3, 4, a1);
    xmlFree(v4);
  }
}

void xmlTextReaderValidityError(uint64_t a1, xmlChar *str, ...)
{
  int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(_QWORD, char *, uint64_t, uint64_t);
  va_list va;

  va_start(va, str);
  v4 = xmlStrlen(str);
  if (v4 >= 2 && str[v4 - 2] != 58)
  {
    v5 = xmlTextReaderBuildMessage((char *)str, va);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 424);
      v8 = *(void (**)(_QWORD, char *, uint64_t, uint64_t))(v7 + 192);
      if (v8)
        v8(*(_QWORD *)(v7 + 200), v5, 2, a1);
      xmlFree(v6);
    }
  }
}

void xmlTextReaderWarning(uint64_t a1, char *__format, ...)
{
  char *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(_QWORD, char *, uint64_t, uint64_t);
  va_list va;

  va_start(va, __format);
  v3 = xmlTextReaderBuildMessage(__format, va);
  if (v3)
  {
    v4 = v3;
    v5 = *(_QWORD *)(a1 + 424);
    v6 = *(void (**)(_QWORD, char *, uint64_t, uint64_t))(v5 + 192);
    if (v6)
      v6(*(_QWORD *)(v5 + 200), v3, 3, a1);
    xmlFree(v4);
  }
}

void xmlTextReaderValidityWarning(uint64_t a1, xmlChar *str, ...)
{
  int v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(_QWORD, char *, uint64_t, uint64_t);
  va_list va;

  va_start(va, str);
  v4 = xmlStrlen(str);
  if (v4)
  {
    if (str[v4 - 1] != 58)
    {
      v5 = xmlTextReaderBuildMessage((char *)str, va);
      if (v5)
      {
        v6 = v5;
        v7 = *(_QWORD *)(a1 + 424);
        v8 = *(void (**)(_QWORD, char *, uint64_t, uint64_t))(v7 + 192);
        if (v8)
          v8(*(_QWORD *)(v7 + 200), v5, 1, a1);
        xmlFree(v6);
      }
    }
  }
}

void xmlTextReaderSetStructuredErrorHandler(xmlTextReaderPtr reader, xmlStructuredErrorFunc f, void *arg)
{
  _QWORD *v4;
  _QWORD *v5;
  xmlRelaxNGValidCtxt *v6;
  xmlSchemaValidCtxt *v7;
  xmlSchemaValidCtxt *v8;
  void (__cdecl *v9)(void *, xmlErrorPtr);
  xmlRelaxNGValidCtxt *v10;
  xmlSchemaValidCtxt *v11;

  v4 = (_QWORD *)*((_QWORD *)reader + 4);
  v5 = (_QWORD *)*v4;
  if (f)
  {
    v5[31] = xmlTextReaderStructuredError;
    v5[21] = xmlTextReaderWarning;
    v5[22] = 0;
    v4[21] = xmlTextReaderValidityError;
    v4[22] = xmlTextReaderValidityWarning;
    *((_QWORD *)reader + 41) = f;
    *((_QWORD *)reader + 24) = 0;
    *((_QWORD *)reader + 25) = arg;
    v6 = (xmlRelaxNGValidCtxt *)*((_QWORD *)reader + 27);
    if (v6)
    {
      xmlRelaxNGSetValidErrors(v6, 0, 0, reader);
      xmlRelaxNGSetValidStructuredErrors(*((xmlRelaxNGValidCtxtPtr *)reader + 27), (xmlStructuredErrorFunc)xmlTextReaderValidityStructuredRelay, reader);
    }
    v7 = (xmlSchemaValidCtxt *)*((_QWORD *)reader + 31);
    if (v7)
    {
      xmlSchemaSetValidErrors(v7, 0, 0, reader);
      v8 = (xmlSchemaValidCtxt *)*((_QWORD *)reader + 31);
      v9 = (void (__cdecl *)(void *, xmlErrorPtr))xmlTextReaderValidityStructuredRelay;
LABEL_10:
      xmlSchemaSetValidStructuredErrors(v8, v9, reader);
    }
  }
  else
  {
    v5[31] = 0;
    v5[21] = xmlParserWarning;
    v5[22] = xmlParserError;
    v4[21] = xmlParserValidityError;
    v4[22] = xmlParserValidityWarning;
    *((_QWORD *)reader + 41) = 0;
    *((_QWORD *)reader + 24) = 0;
    *((_QWORD *)reader + 25) = 0;
    v10 = (xmlRelaxNGValidCtxt *)*((_QWORD *)reader + 27);
    if (v10)
    {
      xmlRelaxNGSetValidErrors(v10, 0, 0, reader);
      xmlRelaxNGSetValidStructuredErrors(*((xmlRelaxNGValidCtxtPtr *)reader + 27), 0, reader);
    }
    v11 = (xmlSchemaValidCtxt *)*((_QWORD *)reader + 31);
    if (v11)
    {
      xmlSchemaSetValidErrors(v11, 0, 0, reader);
      v8 = (xmlSchemaValidCtxt *)*((_QWORD *)reader + 31);
      v9 = 0;
      goto LABEL_10;
    }
  }
}

uint64_t xmlTextReaderStructuredError(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  if (a2)
  {
    v2 = *(_QWORD *)(result + 424);
    v3 = *(uint64_t (**)(_QWORD))(v2 + 328);
    if (v3)
      return v3(*(_QWORD *)(v2 + 200));
  }
  return result;
}

int xmlTextReaderIsValid(xmlTextReaderPtr reader)
{
  int v1;
  int v2;
  uint64_t v4;

  if (!reader)
    return -1;
  v1 = *((_DWORD *)reader + 4);
  if (v1 == 4)
  {
    v2 = *((_DWORD *)reader + 65);
    return v2 == 0;
  }
  if (v1 == 2)
  {
    v2 = *((_DWORD *)reader + 57);
    return v2 == 0;
  }
  v4 = *((_QWORD *)reader + 4);
  if (v4 && *(_DWORD *)(v4 + 156) == 1)
    return *(_DWORD *)(v4 + 152);
  else
    return 0;
}

void xmlTextReaderGetErrorHandler(xmlTextReaderPtr reader, xmlTextReaderErrorFunc *f, void **arg)
{
  if (f)
    *f = (xmlTextReaderErrorFunc)*((_QWORD *)reader + 24);
  if (arg)
    *arg = (void *)*((_QWORD *)reader + 25);
}

uint64_t xmlTextReaderByteConsumed(xmlTextReaderPtr reader)
{
  xmlParserCtxt *v1;

  if (reader && (v1 = (xmlParserCtxt *)*((_QWORD *)reader + 4)) != 0)
    return xmlByteConsumed(v1);
  else
    return -1;
}

xmlTextReaderPtr xmlReaderWalker(xmlDocPtr doc)
{
  char *v2;
  xmlTextReader *v3;
  xmlGenericErrorFunc v4;
  void **v5;

  if (!doc)
    return 0;
  v2 = (char *)xmlMalloc(0x150uLL);
  if (!v2)
  {
    v4 = *__xmlGenericError();
    v5 = __xmlGenericErrorContext();
    v4(*v5, "xmlNewTextReader : malloc failed\n");
    return 0;
  }
  v3 = (xmlTextReader *)v2;
  *((_OWORD *)v2 + 19) = 0u;
  *((_OWORD *)v2 + 20) = 0u;
  *((_OWORD *)v2 + 17) = 0u;
  *((_OWORD *)v2 + 18) = 0u;
  *((_OWORD *)v2 + 15) = 0u;
  *((_OWORD *)v2 + 16) = 0u;
  *((_OWORD *)v2 + 13) = 0u;
  *((_OWORD *)v2 + 14) = 0u;
  *((_OWORD *)v2 + 11) = 0u;
  *((_OWORD *)v2 + 12) = 0u;
  *((_OWORD *)v2 + 9) = 0u;
  *((_OWORD *)v2 + 10) = 0u;
  *((_OWORD *)v2 + 7) = 0u;
  *((_OWORD *)v2 + 8) = 0u;
  *((_OWORD *)v2 + 5) = 0u;
  *((_OWORD *)v2 + 6) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *((_OWORD *)v2 + 4) = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  *((_OWORD *)v2 + 2) = 0u;
  *(_OWORD *)v2 = 0u;
  *((_DWORD *)v2 + 44) = 0;
  *((_QWORD *)v2 + 6) = 0;
  *(_DWORD *)v2 = 0;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 13) = 0;
  *((_QWORD *)v2 + 1) = doc;
  *(_QWORD *)(v2 + 20) = 2;
  *((_QWORD *)v2 + 20) = xmlDictCreate();
  return v3;
}

xmlTextReaderPtr xmlReaderForDoc(xmlTextReaderPtr cur, const char *URL, const char *encoding, int options)
{
  const char *v7;
  int v8;

  if (cur)
  {
    v7 = (const char *)cur;
    v8 = xmlStrlen((const xmlChar *)cur);
    return xmlReaderForMemory(v7, v8, URL, encoding, options);
  }
  return cur;
}

xmlTextReaderPtr xmlReaderForFile(const char *filename, const char *encoding, int options)
{
  xmlTextReader *v5;
  xmlTextReader *v6;

  v5 = xmlNewTextReaderFilename(filename);
  v6 = v5;
  if (v5)
    xmlTextReaderSetup(v5, 0, 0, encoding, options);
  return v6;
}

xmlTextReaderPtr xmlReaderForFd(int fd, const char *URL, const char *encoding, int options)
{
  xmlParserInputBufferPtr v7;
  xmlParserInputBuffer *v8;
  xmlTextReaderPtr v9;
  xmlTextReader *v10;

  if (fd < 0)
    return 0;
  v7 = xmlParserInputBufferCreateFd(fd, XML_CHAR_ENCODING_NONE);
  if (!v7)
    return 0;
  v8 = v7;
  v7->closecallback = 0;
  v9 = xmlNewTextReader(v7, URL);
  v10 = v9;
  if (v9)
  {
    *((_DWORD *)v9 + 5) |= 1u;
    xmlTextReaderSetup(v9, 0, URL, encoding, options);
  }
  else
  {
    xmlFreeParserInputBuffer(v8);
  }
  return v10;
}

xmlTextReaderPtr xmlReaderForIO(xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options)
{
  xmlTextReader *v10;
  xmlParserInputBuffer *IO;
  xmlParserInputBuffer *v12;
  xmlTextReaderPtr v13;

  if (!ioread)
    return 0;
  v10 = (xmlTextReader *)ioclose;
  IO = xmlParserInputBufferCreateIO(ioread, ioclose, ioctx, XML_CHAR_ENCODING_NONE);
  if (!IO)
  {
    if (!v10)
      return v10;
    ((void (*)(void *))v10)(ioctx);
    return 0;
  }
  v12 = IO;
  v13 = xmlNewTextReader(IO, URL);
  v10 = v13;
  if (v13)
  {
    *((_DWORD *)v13 + 5) |= 1u;
    xmlTextReaderSetup(v13, 0, URL, encoding, options);
  }
  else
  {
    xmlFreeParserInputBuffer(v12);
  }
  return v10;
}

int xmlReaderNewWalker(xmlTextReaderPtr reader, xmlDocPtr doc)
{
  int result;
  xmlParserInputBuffer *v5;
  xmlParserCtxt *v6;
  uint64_t v7;
  xmlDictPtr v8;

  result = -1;
  if (reader && doc)
  {
    v5 = (xmlParserInputBuffer *)*((_QWORD *)reader + 6);
    if (v5)
      xmlFreeParserInputBuffer(v5);
    v6 = (xmlParserCtxt *)*((_QWORD *)reader + 4);
    if (v6)
      xmlCtxtReset(v6);
    result = 0;
    *((_DWORD *)reader + 44) = 0;
    *((_QWORD *)reader + 6) = 0;
    *(_DWORD *)reader = 0;
    *((_QWORD *)reader + 14) = 0;
    *((_QWORD *)reader + 15) = 0;
    *((_QWORD *)reader + 13) = 0;
    *((_QWORD *)reader + 1) = doc;
    *(_QWORD *)((char *)reader + 20) = 2;
    if (!*((_QWORD *)reader + 20))
    {
      v7 = *((_QWORD *)reader + 4);
      if (!v7 || (v8 = *(xmlDictPtr *)(v7 + 456)) == 0)
        v8 = xmlDictCreate();
      result = 0;
      *((_QWORD *)reader + 20) = v8;
    }
  }
  return result;
}

int xmlReaderNewDoc(xmlTextReaderPtr reader, const xmlChar *cur, const char *URL, const char *encoding, int options)
{
  int v10;

  if (!reader || !cur)
    return -1;
  v10 = xmlStrlen(cur);
  return xmlReaderNewMemory(reader, (const char *)cur, v10, URL, encoding, options);
}

int xmlReaderNewMemory(xmlTextReaderPtr reader, const char *buffer, int size, const char *URL, const char *encoding, int options)
{
  xmlParserInputBuffer *Static;

  if (reader && buffer && (Static = xmlParserInputBufferCreateStatic(buffer, size, XML_CHAR_ENCODING_NONE)) != 0)
    return xmlTextReaderSetup(reader, Static, URL, encoding, options);
  else
    return -1;
}

int xmlReaderNewFile(xmlTextReaderPtr reader, const char *filename, const char *encoding, int options)
{
  xmlParserInputBuffer *v8;

  if (reader && filename && (v8 = xmlParserInputBufferCreateFilename(filename, XML_CHAR_ENCODING_NONE)) != 0)
    return xmlTextReaderSetup(reader, v8, filename, encoding, options);
  else
    return -1;
}

int xmlReaderNewFd(xmlTextReaderPtr reader, int fd, const char *URL, const char *encoding, int options)
{
  xmlParserInputBufferPtr v9;

  if (!reader)
    return -1;
  if (fd < 0)
    return -1;
  v9 = xmlParserInputBufferCreateFd(fd, XML_CHAR_ENCODING_NONE);
  if (!v9)
    return -1;
  v9->closecallback = 0;
  return xmlTextReaderSetup(reader, v9, URL, encoding, options);
}

int xmlReaderNewIO(xmlTextReaderPtr reader, xmlInputReadCallback ioread, xmlInputCloseCallback ioclose, void *ioctx, const char *URL, const char *encoding, int options)
{
  xmlParserInputBuffer *IO;

  if (reader && ioread)
  {
    IO = xmlParserInputBufferCreateIO(ioread, ioclose, ioctx, XML_CHAR_ENCODING_NONE);
    if (IO)
      return xmlTextReaderSetup(reader, IO, URL, encoding, options);
    if (ioclose)
      ((void (*)(void *))ioclose)(ioctx);
  }
  return -1;
}

uint64_t xmlTextReaderWalkRemoveRef(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  xmlChar *v4;

  if (*(_QWORD *)(a1 + 16) != a2)
    return 1;
  v4 = xmlStrdup(*(const xmlChar **)(a2 + 16));
  result = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v4;
  return result;
}

void xmlTextReaderFreeIDTableEntry(_QWORD *a1)
{
  uint64_t v2;
  xmlDict *v3;
  xmlChar *v4;
  void *v5;

  if (a1)
  {
    v2 = a1[5];
    if (v2)
    {
      v3 = *(xmlDict **)(v2 + 152);
      v4 = (xmlChar *)a1[1];
      if (!v4)
        goto LABEL_11;
      if (v3)
      {
        if (xmlDictOwns(*(xmlDictPtr *)(v2 + 152), v4))
          goto LABEL_11;
        v4 = (xmlChar *)a1[1];
      }
    }
    else
    {
      v4 = (xmlChar *)a1[1];
      if (!v4)
      {
        v5 = (void *)a1[3];
        if (v5)
          goto LABEL_16;
        goto LABEL_17;
      }
      v3 = 0;
    }
    xmlFree(v4);
LABEL_11:
    v5 = (void *)a1[3];
    if (v5)
    {
      if (!v3)
      {
LABEL_16:
        xmlFree(v5);
        goto LABEL_17;
      }
      if (!xmlDictOwns(v3, (const xmlChar *)v5))
      {
        v5 = (void *)a1[3];
        goto LABEL_16;
      }
    }
LABEL_17:
    xmlFree(a1);
  }
}

char *xmlTextReaderBuildMessage(char *__format, va_list a2)
{
  size_t v3;
  char *v4;
  char *v5;
  unsigned int v6;
  xmlGenericErrorFunc v7;
  void *v8;
  const char *v9;

  LODWORD(v3) = 0;
  v4 = 0;
  while (1)
  {
    v5 = v4;
    v6 = vsnprintf(v4, v3, __format, a2);
    if ((v6 & 0x80000000) != 0)
      break;
    if ((_DWORD)v3 == 64000 || v6 < v3)
      return v5;
    if (v6 >> 9 < 0x7D)
      v3 = v6 + 1;
    else
      v3 = 64000;
    v4 = (char *)xmlRealloc(v5, v3);
    if (!v4)
    {
      v7 = *__xmlGenericError();
      v8 = *__xmlGenericErrorContext();
      v9 = "xmlRealloc failed !\n";
      goto LABEL_11;
    }
  }
  v7 = *__xmlGenericError();
  v8 = *__xmlGenericErrorContext();
  v9 = "vsnprintf failed !\n";
LABEL_11:
  v7(v8, v9);
  if (v5)
  {
    xmlFree(v5);
    return 0;
  }
  return v5;
}

xmlRegExecCtxtPtr xmlRegNewExecCtxt(xmlRegexpPtr comp, xmlRegExecCallbacks callback, void *data)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  if (!comp || !*((_QWORD *)comp + 9) && !*((_QWORD *)comp + 2))
    return 0;
  v6 = xmlMalloc(0x98uLL);
  v7 = v6;
  if (v6)
  {
    v6[18] = 0;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)v6 = 0u;
    v6[12] = 0;
    *((_DWORD *)v6 + 20) = 0;
    *v6 = 0x100000000;
    v6[6] = 0;
    v6[7] = 0;
    v6[1] = comp;
    if (!*((_QWORD *)comp + 9))
      v6[4] = **((_QWORD **)comp + 2);
    v6[5] = 0;
    v6[2] = callback;
    v6[3] = data;
    v8 = *((unsigned int *)comp + 10);
    if ((int)v8 < 1)
    {
      v10 = 0;
      v6[8] = 0;
      goto LABEL_12;
    }
    v9 = xmlMalloc(8 * v8);
    v7[8] = v9;
    if (v9)
    {
      bzero(v9, 8 * *((int *)comp + 10));
      v10 = v7[8] + 4 * *((int *)comp + 10);
LABEL_12:
      v7[9] = 0;
      v7[13] = 0;
      *((_DWORD *)v7 + 28) = -1;
      v7[16] = 0;
      v7[17] = v10;
      *((_DWORD *)v7 + 36) = 0;
      return (xmlRegExecCtxtPtr)v7;
    }
    xmlRegexpErrMemory(0, (const xmlChar *)"creating execution context");
    xmlFree(v7);
    return 0;
  }
  xmlRegexpErrMemory(0, (const xmlChar *)"creating execution context");
  return (xmlRegExecCtxtPtr)v7;
}

_DWORD *xmlRegexpErrMemory(uint64_t a1, const xmlChar *a2)
{
  xmlChar *v2;

  if (a1)
  {
    v2 = *(xmlChar **)a1;
    *(_DWORD *)(a1 + 16) = 2;
  }
  else
  {
    v2 = 0;
  }
  return __xmlRaiseError(0, 0, 0, 0, 0, 0xEu, 2, 3, 0, 0, a2, v2, 0, 0, 0, "Memory allocation failed : %s\n", (char)a2);
}

void xmlRegFreeExecCtxt(xmlRegExecCtxtPtr exec)
{
  void *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  int v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  void *v13;

  if (exec)
  {
    v2 = (void *)*((_QWORD *)exec + 7);
    if (v2)
    {
      if (*((_QWORD *)exec + 8))
      {
        v3 = *((_DWORD *)exec + 12);
        if (v3 >= 1)
        {
          v4 = 0;
          v5 = 16;
          do
          {
            v6 = *(void **)(*((_QWORD *)exec + 7) + v5);
            if (v6)
            {
              xmlFree(v6);
              v3 = *((_DWORD *)exec + 12);
            }
            ++v4;
            v5 += 24;
          }
          while (v4 < v3);
          v2 = (void *)*((_QWORD *)exec + 7);
        }
      }
      xmlFree(v2);
    }
    v7 = (void *)*((_QWORD *)exec + 8);
    if (v7)
      xmlFree(v7);
    v8 = (void *)*((_QWORD *)exec + 13);
    if (v8)
    {
      v9 = *((_DWORD *)exec + 19);
      if (v9 >= 1)
      {
        v10 = 0;
        for (i = 0; i < v9; ++i)
        {
          v12 = *(void **)(*((_QWORD *)exec + 13) + v10);
          if (v12)
          {
            xmlFree(v12);
            v9 = *((_DWORD *)exec + 19);
          }
          v10 += 16;
        }
        v8 = (void *)*((_QWORD *)exec + 13);
      }
      xmlFree(v8);
    }
    v13 = (void *)*((_QWORD *)exec + 16);
    if (v13)
      xmlFree(v13);
    xmlFree(exec);
  }
}

int xmlRegExecPushString(xmlRegExecCtxtPtr exec, const xmlChar *value, void *data)
{
  return xmlRegExecPushStringInternal((unsigned int *)exec, (xmlChar *)value, (uint64_t)data, 0);
}

uint64_t xmlRegExecPushStringInternal(unsigned int *a1, xmlChar *cur, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v10;
  xmlChar *v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  uint64_t v36;
  _DWORD *v37;
  int v38;
  xmlChar *v39;
  int v40;
  xmlChar *v41;
  int v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  xmlChar *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  int v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  const xmlChar *v61;
  xmlChar *v62;
  unsigned int v63;
  uint64_t v64;
  xmlChar *v65;
  int v66;
  void (*v67)(_QWORD, _QWORD, _QWORD, uint64_t);
  BOOL v68;
  BOOL v69;
  xmlChar *v70;
  unsigned int *v71;
  int v72;
  int v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  _DWORD *v77;
  void *v78;
  xmlChar *v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  xmlChar **v83;
  uint64_t *v84;
  xmlChar *v85;
  _DWORD *v86;
  void *v87;
  xmlChar *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  xmlChar *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  unsigned int *v98;
  unsigned int *v99;
  uint64_t v100;

  if (!a1)
    return 0xFFFFFFFFLL;
  v6 = *((_QWORD *)a1 + 1);
  if (!v6)
    return 0xFFFFFFFFLL;
  result = *a1;
  if ((_DWORD)result)
    return result;
  v8 = a3;
  if (*(_QWORD *)(v6 + 72))
    return xmlRegCompactPushString((uint64_t)a1, v6, cur, a3);
  if (cur)
  {
    if ((int)a1[19] < 1)
    {
      v11 = cur;
    }
    else
    {
      xmlFARegExecSaveInputString((uint64_t)a1, cur, a3);
      result = *a1;
      if ((_DWORD)result)
        return result;
      v10 = *((_QWORD *)a1 + 13) + 16 * (int)a1[20];
      v11 = *(xmlChar **)v10;
      v8 = *(_QWORD *)(v10 + 8);
    }
  }
  else
  {
    if (**((_DWORD **)a1 + 4) == 2)
      return 1;
    v11 = 0;
  }
  v12 = 1;
  v93 = cur;
  v92 = a4;
  do
  {
    v13 = (int *)*((_QWORD *)a1 + 4);
    if (!v11)
    {
      v14 = *v13;
      if (cur || v14 == 2)
        return v14 == 2;
      if (!*((_QWORD *)a1 + 8))
      {
        v11 = 0;
        if (!(_DWORD)v12)
          goto LABEL_136;
        goto LABEL_124;
      }
    }
    v100 = v12;
    a1[11] = 0;
    v15 = a1[10];
    v16 = v13[6];
    if (v15 >= (int)v16)
    {
LABEL_87:
      if (v15)
      {
LABEL_88:
        v12 = v100;
        if (!(_DWORD)v100)
          goto LABEL_136;
        goto LABEL_124;
      }
      goto LABEL_122;
    }
    while (1)
    {
      v17 = *((_QWORD *)v13 + 4);
      v18 = (unsigned int *)(v17 + 24 * v15);
      v19 = (int *)(v18 + 2);
      v20 = v18[2];
      if ((v18[2] & 0x80000000) != 0)
        goto LABEL_86;
      v21 = v15;
      v22 = *(_QWORD *)v18;
      v23 = v17 + 24 * v15;
      v26 = *(_DWORD *)(v23 + 16);
      v25 = (unsigned int *)(v23 + 16);
      v24 = v26;
      if (v26 == 1193047)
      {
        if ((unint64_t)cur | (unint64_t)v11)
        {
          if (!v11 || (int)v16 < 1)
            goto LABEL_86;
          v91 = *(_QWORD *)v18;
          v96 = v21;
          v98 = v25;
          v94 = v8;
          v33 = 0;
          v34 = 0;
          while (1)
          {
            v35 = (unsigned int *)(*((_QWORD *)v13 + 4) + v33);
            v36 = v35[3];
            if ((v36 & 0x80000000) == 0 && v35 != v18)
            {
              v37 = (_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 48) + 8 * v36);
              v38 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * v36);
              if (v38 < v37[1])
              {
                if (*(_QWORD *)v35)
                {
                  v39 = v11;
                  v40 = xmlStrEqual(v11, *(const xmlChar **)(*(_QWORD *)v35 + 24));
                  v11 = v39;
                  if (v40)
                  {
LABEL_47:
                    cur = v93;
                    v8 = v94;
                    a4 = v92;
                    goto LABEL_86;
                  }
                }
              }
              if (v38 >= *v37 && v38 < v37[1])
              {
                if (*(_QWORD *)v35)
                {
                  v41 = v11;
                  v42 = xmlStrEqual(v11, *(const xmlChar **)(*(_QWORD *)v35 + 24));
                  v11 = v41;
                  if (v42)
                    break;
                }
              }
            }
            ++v34;
            v13 = (int *)*((_QWORD *)a1 + 4);
            v33 += 24;
            if (v34 >= v13[6])
              goto LABEL_47;
          }
          cur = v93;
          v8 = v94;
          a4 = v92;
          v25 = v98;
          v19 = (int *)(v18 + 2);
          v21 = v96;
          v22 = v91;
        }
        else
        {
          v11 = 0;
        }
LABEL_94:
        v67 = (void (*)(_QWORD, _QWORD, _QWORD, uint64_t))*((_QWORD *)a1 + 2);
        if (v67)
          v68 = v22 == 0;
        else
          v68 = 1;
        v69 = v68 || v8 == 0;
        v70 = v11;
        if (!v69)
        {
          v71 = v25;
          v72 = v21;
          v67(*((_QWORD *)a1 + 3), *(_QWORD *)(v22 + 24), *(_QWORD *)(v22 + 88), v8);
          v21 = v72;
          v25 = v71;
        }
        if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 24) > (signed int)(a1[10] + 1))
        {
          v73 = v21;
          v74 = v25;
          if ((int)a1[19] <= 0)
            xmlFARegExecSaveInputString((uint64_t)a1, v70, v8);
          xmlFARegExecSave((uint64_t)a1);
          v25 = v74;
          v21 = v73;
        }
        v75 = *(unsigned int *)(v17 + 24 * v21 + 12);
        if ((v75 & 0x80000000) == 0)
          ++*(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * v75);
        v76 = *v25;
        if (v76 <= 0x123455)
          *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * v76) = 0;
        v77 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 16) + 8 * *v19);
        if (v77 && *v77 == 4)
        {
          v78 = (void *)*((_QWORD *)a1 + 16);
          if (v78)
            xmlFree(v78);
          v79 = xmlStrdup(v70);
          *((_QWORD *)a1 + 15) = *((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 16) = v79;
          memcpy(*((void **)a1 + 17), *((const void **)a1 + 8), 4 * *(int *)(*((_QWORD *)a1 + 1) + 40));
          v77 = *(_DWORD **)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 16) + 8 * *v19);
        }
        *((_QWORD *)a1 + 4) = v77;
        a1[10] = 0;
        if (!*(_QWORD *)v18)
        {
          v12 = 1;
          goto LABEL_141;
        }
        v80 = *((_QWORD *)a1 + 13);
        if (v80)
        {
          v81 = a1[19];
          v82 = (int)a1[20] + 1;
          a1[20] = v82;
          if ((int)v82 < v81)
          {
            v83 = (xmlChar **)(v80 + 16 * v82);
            v84 = (uint64_t *)(v83 + 1);
            v12 = 1;
            goto LABEL_140;
          }
        }
        v8 = 0;
        v11 = 0;
        v12 = 1;
        goto LABEL_142;
      }
      if ((_DWORD)v24 == 1193046)
      {
        if ((int)v16 < 1)
          goto LABEL_94;
        v27 = v21;
        v28 = (unsigned int *)(v17 + 12);
        while (1)
        {
          v30 = *v28;
          v28 += 6;
          v29 = v30;
          if (v27)
          {
            if ((v29 & 0x80000000) == 0)
            {
              v31 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 48);
              v32 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * v29);
              if (v32 < *(_DWORD *)(v31 + 8 * v29) || v32 > *(_DWORD *)(v31 + 8 * v29 + 4))
                goto LABEL_86;
            }
          }
          --v27;
          if (!--v16)
            goto LABEL_94;
        }
      }
      if ((v24 & 0x80000000) != 0)
        break;
      v43 = *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * v24);
      v44 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 48);
      v45 = v43 >= *(_DWORD *)(v44 + 8 * v24) && v43 <= *(_DWORD *)(v44 + 8 * v24 + 4);
LABEL_85:
      if (v45 == 1)
        goto LABEL_94;
LABEL_86:
      v15 = a1[10] + 1;
      a1[10] = v15;
      v13 = (int *)*((_QWORD *)a1 + 4);
      v16 = v13[6];
      if (v15 >= (int)v16)
        goto LABEL_87;
    }
    if (!v22)
    {
      v85 = v11;
      fwrite("epsilon transition left at runtime\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
      v11 = v85;
      *a1 = -2;
      if (a1[10])
        goto LABEL_88;
LABEL_122:
      v12 = v100;
      if (*(_DWORD *)(*((_QWORD *)a1 + 4) + 24))
        goto LABEL_142;
      if (!(_DWORD)v100)
        goto LABEL_136;
LABEL_124:
      v86 = (_DWORD *)*((_QWORD *)a1 + 4);
      if (v86)
      {
        v70 = v11;
        if (*v86 != 4)
        {
          v87 = (void *)*((_QWORD *)a1 + 16);
          if (v87)
            xmlFree(v87);
          v88 = xmlStrdup(v70);
          *((_QWORD *)a1 + 15) = *((_QWORD *)a1 + 4);
          *((_QWORD *)a1 + 16) = v88;
          v89 = *(int *)(*((_QWORD *)a1 + 1) + 40);
          if ((_DWORD)v89)
            memcpy(*((void **)a1 + 17), *((const void **)a1 + 8), 4 * v89);
          v12 = 0;
          goto LABEL_137;
        }
      }
      else
      {
        v70 = v11;
      }
      v12 = 1;
      goto LABEL_137;
    }
    if (!v11)
      goto LABEL_86;
    v97 = v21;
    v99 = v25;
    v46 = *(_QWORD *)v18;
    v47 = v11;
    v48 = xmlRegStrEqualWildcard(*(_BYTE **)(v22 + 24), v11);
    v49 = a4;
    v50 = v46;
    v51 = *(_DWORD *)(v46 + 40);
    v52 = v48 ^ 1;
    v53 = v49;
    if (!(_DWORD)v49)
      v52 = 0;
    if (v51)
      v54 = v52;
    else
      v54 = v48;
    if (!v54
      || (v21 = v97, v25 = v99, v55 = *(unsigned int *)(v17 + 24 * v97 + 12), (v55 & 0x80000000) == 0)
      && *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * v55) >= *(_DWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 48) + 8 * v55 + 4))
    {
      v11 = v47;
      a4 = v49;
      goto LABEL_86;
    }
    v22 = v50;
    if (*(int *)(v50 + 12) < 1)
    {
      v11 = v47;
LABEL_134:
      v19 = (int *)(v18 + 2);
      a4 = v49;
      goto LABEL_94;
    }
    v56 = *(_DWORD *)(v50 + 16);
    v11 = v47;
    if (v56 < 1)
      goto LABEL_134;
    v95 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 16) + 8 * v20);
    if ((int)v16 > v97 + 1)
    {
      if ((int)a1[19] <= 0)
        xmlFARegExecSaveInputString((uint64_t)a1, v47, v8);
      xmlFARegExecSave((uint64_t)a1);
      v56 = *(_DWORD *)(v50 + 16);
      v11 = v47;
    }
    v57 = 1;
    a1[11] = 1;
    v58 = 1;
    v19 = (int *)(v18 + 2);
    if (v56 != 1)
    {
      while (1)
      {
        v59 = a1[20];
        a1[20] = v59 + 1;
        v60 = *((_QWORD *)a1 + 13) + 16 * (int)(v59 + 1);
        v61 = *(const xmlChar **)v60;
        v8 = *(_QWORD *)(v60 + 8);
        if (!*(_QWORD *)v60)
          break;
        if (v57 >= *(_DWORD *)(v50 + 12))
        {
          v62 = *(xmlChar **)v60;
          v63 = a1[10];
          v64 = *((_QWORD *)a1 + 4);
          a1[10] = -1;
          *((_QWORD *)a1 + 4) = v95;
          if ((int)a1[19] <= 0)
            xmlFARegExecSaveInputString((uint64_t)a1, v62, v8);
          xmlFARegExecSave((uint64_t)a1);
          a1[10] = v63;
          *((_QWORD *)a1 + 4) = v64;
          v61 = v62;
          v19 = (int *)(v18 + 2);
        }
        v65 = (xmlChar *)v61;
        v58 = xmlStrEqual(v61, *(const xmlChar **)(v50 + 24));
        v57 = a1[11] + 1;
        a1[11] = v57;
        if (v58 != 1)
          goto LABEL_76;
        if (v57 == *(_DWORD *)(v50 + 16))
        {
          v58 = 1;
LABEL_76:
          v11 = v65;
          goto LABEL_80;
        }
      }
      v11 = 0;
      a1[20] = v59;
      v58 = 1;
    }
LABEL_80:
    if (v57 >= *(_DWORD *)(v50 + 12))
      v66 = v58;
    else
      v66 = 0;
    if (v66 >= 1)
    {
      v45 = v66 & ~(v66 >> 31);
      v21 = v97;
      v25 = v99;
      v22 = v50;
      a4 = v53;
      goto LABEL_85;
    }
    v12 = v100;
    a4 = v53;
    if ((_DWORD)v100)
      goto LABEL_124;
LABEL_136:
    v70 = v11;
LABEL_137:
    a1[1] = 0;
    xmlFARegExecRollBack((int *)a1);
    v90 = *((_QWORD *)a1 + 13);
    if (!v90)
    {
LABEL_141:
      v11 = v70;
      goto LABEL_142;
    }
    result = *a1;
    if ((_DWORD)result)
      break;
    v83 = (xmlChar **)(v90 + 16 * (int)a1[20]);
    v84 = (uint64_t *)(v83 + 1);
LABEL_140:
    v11 = *v83;
    v8 = *v84;
LABEL_142:
    result = *a1;
  }
  while (!(_DWORD)result);
  return result;
}

int xmlRegExecPushString2(xmlRegExecCtxtPtr exec, const xmlChar *value, const xmlChar *value2, void *data)
{
  int v5;
  int v9;
  int v10;
  int v11;
  _BYTE *v12;
  uint64_t v14;
  int v15;
  _BYTE v16[150];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!exec || !*((_QWORD *)exec + 1))
    return -1;
  v5 = *(_DWORD *)exec;
  if (*(_DWORD *)exec)
    return v5;
  if (value2)
  {
    v9 = strlen((const char *)value2);
    v10 = strlen((const char *)value);
    v11 = v10 + v9;
    if (v10 + v9 < 149)
    {
      v12 = v16;
    }
    else
    {
      v12 = xmlMallocAtomic((v11 + 2));
      if (!v12)
      {
        v5 = -1;
        *(_DWORD *)exec = -1;
        return v5;
      }
    }
    memset(v16, 0, sizeof(v16));
    memcpy(v12, value, v10);
    v12[v10] = 124;
    memcpy(&v12[v10 + 1], value2, v9);
    v12[v11 + 1] = 0;
    v14 = *((_QWORD *)exec + 1);
    if (*(_QWORD *)(v14 + 72))
      v15 = xmlRegCompactPushString((uint64_t)exec, v14, v12, (uint64_t)data);
    else
      v15 = xmlRegExecPushStringInternal((unsigned int *)exec, v12, (uint64_t)data, 1);
    v5 = v15;
    if (v12 != v16)
      xmlFree(v12);
    return v5;
  }
  return xmlRegExecPushStringInternal((unsigned int *)exec, (xmlChar *)value, (uint64_t)data, 0);
}

uint64_t xmlRegCompactPushString(uint64_t a1, uint64_t a2, xmlChar *cur, uint64_t a4)
{
  uint64_t v5;
  _BYTE **v6;
  int v9;
  uint64_t v10;
  int v12;
  int v13;
  int v14;
  int v15;
  void *v16;
  uint64_t result;
  void (*v18)(_QWORD, xmlChar *, _QWORD, uint64_t);
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;

  if (!a2)
    return 0xFFFFFFFFLL;
  v5 = *(_QWORD *)(a2 + 72);
  if (!v5)
    return 0xFFFFFFFFLL;
  v6 = *(_BYTE ***)(a2 + 96);
  if (!v6)
    return 0xFFFFFFFFLL;
  v9 = *(_DWORD *)(a1 + 80);
  v10 = *(unsigned int *)(a2 + 88);
  if (!cur)
    return *(_DWORD *)(v5 + 4 * (v9 + v9 * (int)v10)) == 2;
  v23 = *(_DWORD *)(a1 + 80);
  if ((int)v10 >= 1)
  {
    v12 = v10 * v9;
    v22 = v10 + 1;
    v13 = (v10 + 1) * v9 + 1;
    while (1)
    {
      v14 = *(_DWORD *)(v5 + 4 * v13);
      v15 = v14 - 1;
      if (v14 >= 1 && v14 <= *(_DWORD *)(a2 + 64) && xmlRegStrEqualWildcard(*v6, cur))
        break;
      ++v12;
      ++v6;
      ++v13;
      if (!--v10)
        goto LABEL_11;
    }
    *(_DWORD *)(a1 + 80) = v15;
    v18 = *(void (**)(_QWORD, xmlChar *, _QWORD, uint64_t))(a1 + 16);
    if (v18)
    {
      v19 = *(_QWORD *)(a2 + 80);
      v20 = v22;
      if (v19)
      {
        v18(*(_QWORD *)(a1 + 24), cur, *(_QWORD *)(v19 + 8 * v12), a4);
        v5 = *(_QWORD *)(a2 + 72);
        v20 = *(_DWORD *)(a2 + 88) + 1;
      }
    }
    else
    {
      v20 = v22;
    }
    v21 = *(_DWORD *)(v5 + 4 * v20 * v15);
    if (v21 == 2)
      return 1;
    if (v21 != 4)
      return 0;
  }
LABEL_11:
  v16 = *(void **)(a1 + 128);
  if (v16)
    xmlFree(v16);
  *(_QWORD *)(a1 + 128) = xmlStrdup(cur);
  *(_DWORD *)(a1 + 112) = v23;
  result = 0xFFFFFFFFLL;
  *(_DWORD *)a1 = -1;
  return result;
}

int xmlRegExecNextValues(xmlRegExecCtxtPtr exec, int *nbval, int *nbneg, xmlChar **values, int *terminal)
{
  return xmlRegExecGetValues((uint64_t)exec, 0, nbval, nbneg, (uint64_t)values, terminal);
}

uint64_t xmlRegExecGetValues(uint64_t a1, int a2, int *a3, _DWORD *a4, uint64_t a5, _DWORD *a6)
{
  uint64_t result;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  xmlGenericErrorFunc v25;
  void *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;

  result = 0xFFFFFFFFLL;
  if (!a1)
    return result;
  if (!a3)
    return result;
  if (!a4)
    return result;
  if (!a5)
    return result;
  v11 = *a3;
  if (*a3 < 1)
    return result;
  *a3 = 0;
  *a4 = 0;
  v12 = *(_QWORD *)(a1 + 8);
  if (!v12 || (v13 = *(_QWORD *)(v12 + 72)) == 0)
  {
    if (a6)
      *a6 = **(_DWORD **)(a1 + 32) == 2;
    if (a2)
    {
      v15 = *(_QWORD *)(a1 + 120);
      if (!v15)
        return result;
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 32);
      if (!v15)
        return result;
    }
    if (*(int *)(v15 + 24) < 1)
      return 0;
    v16 = 0;
    v17 = 0;
    v18 = 136;
    if (!a2)
      v18 = 64;
    v52 = v18;
    v19 = 1;
    while (1)
    {
      v20 = *(_QWORD *)(v15 + 32);
      v21 = *(unsigned int *)(v20 + v16 + 8);
      if ((v21 & 0x80000000) == 0)
      {
        v22 = *(_QWORD *)(v20 + v16);
        if (v22)
        {
          v23 = *(_QWORD *)(v22 + 24);
          if (v23)
          {
            v24 = *(_DWORD *)(v20 + v16 + 16);
            if (v24 == 1193046)
            {
              v25 = *__xmlGenericError();
              v26 = *__xmlGenericErrorContext();
              v27 = 4379;
              goto LABEL_28;
            }
            if (v24 == 1193047)
            {
              v25 = *__xmlGenericError();
              v26 = *__xmlGenericErrorContext();
              v27 = 4376;
LABEL_28:
              v25(v26, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlregexp.c", v27);
              goto LABEL_40;
            }
            v28 = *(unsigned int *)(v20 + v16 + 12);
            if ((v28 & 0x80000000) != 0)
            {
              v31 = *(_QWORD *)(a1 + 8);
              if (v31)
              {
                v32 = *(_DWORD **)(*(_QWORD *)(v31 + 16) + 8 * v21);
                if (v32)
                {
                  if (*v32 != 4)
                  {
LABEL_37:
                    if (*(_DWORD *)(v22 + 40))
                      v23 = *(_QWORD *)(v22 + 32);
                    *(_QWORD *)(a5 + 8 * v17++) = v23;
                    ++*a3;
                  }
                }
              }
            }
            else
            {
              v29 = *(_QWORD *)(a1 + 8);
              if (!v29)
                goto LABEL_37;
              v30 = *(_QWORD *)(v29 + 48);
              if (!v30 || *(_DWORD *)(*(_QWORD *)(a1 + v52) + 4 * v28) < *(_DWORD *)(v30 + 8 * v28 + 4))
                goto LABEL_37;
            }
          }
        }
      }
LABEL_40:
      v33 = *(int *)(v15 + 24);
      v16 += 24;
      v34 = v19++ < v33;
      v34 = v34 && v17 < v11;
      if (!v34)
      {
        if ((int)v33 < 1 || v17 >= v11)
          return 0;
        v36 = 0;
        v37 = 1;
        do
        {
          v38 = *(_QWORD *)(v15 + 32);
          v39 = *(unsigned int *)(v38 + v36 + 8);
          if ((v39 & 0x80000000) == 0)
          {
            v40 = *(_QWORD *)(v38 + v36);
            if (v40)
            {
              v41 = *(_QWORD *)(v40 + 24);
              if (v41)
              {
                v42 = v38 + v36;
                if (*(_DWORD *)(v42 + 16) >> 1 != 596523 && (*(_DWORD *)(v42 + 12) & 0x80000000) != 0)
                {
                  v43 = *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 8 * v39);
                  if (v43)
                  {
                    if (*v43 == 4)
                    {
                      if (*(_DWORD *)(v40 + 40))
                        v41 = *(_QWORD *)(v40 + 32);
                      *(_QWORD *)(a5 + 8 * v17++) = v41;
                      ++*a4;
                      LODWORD(v33) = *(_DWORD *)(v15 + 24);
                    }
                  }
                }
              }
            }
          }
          result = 0;
          if (v37 >= (int)v33)
            break;
          v36 += 24;
          ++v37;
        }
        while (v17 < v11);
        return result;
      }
    }
  }
  if (a2)
  {
    v14 = *(_DWORD *)(a1 + 112);
    if (v14 == -1)
      return result;
  }
  else
  {
    v14 = *(_DWORD *)(a1 + 80);
  }
  if (a6)
    *a6 = *(_DWORD *)(v13 + 4 * (v14 + v14 * *(_DWORD *)(v12 + 88))) == 2;
  v44 = *(_DWORD *)(v12 + 88);
  if (v44 < 1)
    return 0;
  v45 = 0;
  v46 = 0;
  do
  {
    v47 = *(_QWORD *)(v12 + 72);
    v48 = *(_DWORD *)(v47 + 4 * ((int)v45 + (v44 + 1) * v14 + 1));
    if (v48 >= 1 && v48 <= *(_DWORD *)(v12 + 64) && *(_DWORD *)(v47 + 4 * (v48 - 1) * (v44 + 1)) != 4)
    {
      *(_QWORD *)(a5 + 8 * v46++) = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 8 * v45);
      ++*a3;
      v44 = *(_DWORD *)(v12 + 88);
    }
    ++v45;
  }
  while (v45 < v44 && v46 < v11);
  result = 0;
  if (v44 >= 1 && v46 < v11)
  {
    v49 = 0;
    do
    {
      v50 = *(_QWORD *)(v12 + 72);
      v51 = *(_DWORD *)(v50 + 4 * ((int)v49 + (v44 + 1) * v14 + 1));
      if (v51 >= 1 && v51 <= *(_DWORD *)(v12 + 64) && *(_DWORD *)(v50 + 4 * (v51 - 1) * (v44 + 1)) == 4)
      {
        *(_QWORD *)(a5 + 8 * v46++) = *(_QWORD *)(*(_QWORD *)(v12 + 96) + 8 * v49);
        ++*a4;
        v44 = *(_DWORD *)(v12 + 88);
      }
      result = 0;
      ++v49;
    }
    while (v49 < v44 && v46 < v11);
  }
  return result;
}

int xmlRegExecErrInfo(xmlRegExecCtxtPtr exec, const xmlChar **string, int *nbval, int *nbneg, xmlChar **values, int *terminal)
{
  const xmlChar *v6;

  if (!exec)
    return -1;
  if (string)
  {
    if (*(_DWORD *)exec)
      v6 = (const xmlChar *)*((_QWORD *)exec + 16);
    else
      v6 = 0;
    *string = v6;
  }
  return xmlRegExecGetValues((uint64_t)exec, 1, nbval, nbneg, (uint64_t)values, terminal);
}

void xmlRegexpPrint(FILE *output, xmlRegexpPtr regexp)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  const char *v7;
  size_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t i;
  int *v13;
  int v14;
  uint64_t v15;
  uint64_t j;
  uint64_t v17;
  int v18;
  const char *v19;
  size_t v20;
  const char *v21;
  size_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (output)
  {
    fwrite(" regexp: ", 9uLL, 1uLL, output);
    if (regexp)
    {
      fprintf(output, "'%s' ", *(const char **)regexp);
      fputc(10, output);
      fprintf(output, "%d atoms:\n", *((_DWORD *)regexp + 6));
      if (*((int *)regexp + 6) >= 1)
      {
        v4 = 0;
        do
        {
          fprintf(output, " %02d ", v4);
          v5 = *(_QWORD *)(*((_QWORD *)regexp + 4) + 8 * v4);
          fwrite(" atom: ", 7uLL, 1uLL, output);
          if (v5)
          {
            if (*(_DWORD *)(v5 + 40))
              fwrite("not ", 4uLL, 1uLL, output);
            xmlRegPrintAtomType(output, *(_DWORD *)(v5 + 4));
            v6 = *(_DWORD *)(v5 + 8);
            switch(v6)
            {
              case 1:
                v7 = "epsilon ";
                v8 = 8;
                goto LABEL_19;
              case 2:
                v7 = "once ";
                v8 = 5;
                goto LABEL_19;
              case 3:
                v7 = "? ";
                goto LABEL_15;
              case 4:
                v7 = "* ";
                goto LABEL_15;
              case 5:
                v7 = "+ ";
LABEL_15:
                v8 = 2;
                goto LABEL_19;
              case 6:
                v7 = "onceonly ";
                v8 = 9;
                goto LABEL_19;
              case 7:
                v7 = "all ";
                v8 = 4;
                goto LABEL_19;
              case 8:
                v7 = "range ";
                v8 = 6;
LABEL_19:
                fwrite(v7, v8, 1uLL, output);
                v6 = *(_DWORD *)(v5 + 8);
                break;
              default:
                break;
            }
            if (v6 == 8)
              fprintf(output, "%d-%d ", *(_DWORD *)(v5 + 12), *(_DWORD *)(v5 + 16));
            v9 = *(_DWORD *)(v5 + 4);
            if (v9 == 5)
            {
              fprintf(output, "'%s' ", *(const char **)(v5 + 24));
              v9 = *(_DWORD *)(v5 + 4);
            }
            switch(v9)
            {
              case 4:
                fprintf(output, "start %d end %d\n");
                break;
              case 3:
                fprintf(output, "%d entries\n", *(_DWORD *)(v5 + 76));
                if (*(int *)(v5 + 76) >= 1)
                {
                  v10 = 0;
                  do
                  {
                    v11 = *(_DWORD **)(*(_QWORD *)(v5 + 80) + 8 * v10);
                    fwrite("  range: ", 9uLL, 1uLL, output);
                    if (*v11)
                      fwrite("negative ", 9uLL, 1uLL, output);
                    xmlRegPrintAtomType(output, v11[1]);
                    fprintf(output, "%c - %c\n", v11[2], v11[3]);
                    ++v10;
                  }
                  while (v10 < *(int *)(v5 + 76));
                }
                break;
              case 2:
                fprintf(output, "char %c\n");
                break;
              default:
                fputc(10, output);
                break;
            }
          }
          else
          {
            fwrite("NULL\n", 5uLL, 1uLL, output);
          }
          ++v4;
        }
        while (v4 < *((int *)regexp + 6));
      }
      fprintf(output, "%d states:", *((_DWORD *)regexp + 2));
      fputc(10, output);
      if (*((int *)regexp + 2) >= 1)
      {
        for (i = 0; i < *((int *)regexp + 2); ++i)
        {
          v13 = *(int **)(*((_QWORD *)regexp + 2) + 8 * i);
          fwrite(" state: ", 8uLL, 1uLL, output);
          if (v13)
          {
            v14 = *v13;
            if (*v13 == 1)
            {
              fwrite("START ", 6uLL, 1uLL, output);
              v14 = *v13;
            }
            if (v14 == 2)
              fwrite("FINAL ", 6uLL, 1uLL, output);
            fprintf(output, "%d, %d transitions:\n", v13[4], v13[6]);
            if (v13[6] >= 1)
            {
              v15 = 0;
              for (j = 0; j < v13[6]; ++j)
              {
                v17 = *((_QWORD *)v13 + 4);
                fwrite("  trans: ", 9uLL, 1uLL, output);
                if (v17)
                {
                  if ((*(_DWORD *)(v17 + v15 + 8) & 0x80000000) == 0)
                  {
                    v18 = *(_DWORD *)(v17 + v15 + 20);
                    if (v18)
                    {
                      if (v18 == 2)
                      {
                        v19 = "last not determinist, ";
                        v20 = 22;
                      }
                      else
                      {
                        v19 = "not determinist, ";
                        v20 = 17;
                      }
                      fwrite(v19, v20, 1uLL, output);
                    }
                    if ((*(_DWORD *)(v17 + v15 + 12) & 0x80000000) == 0)
                      fprintf(output, "counted %d, ", *(_DWORD *)(v17 + v15 + 12));
                    v23 = *(_DWORD *)(v17 + v15 + 16);
                    if (v23 == 1193046)
                    {
                      fwrite("all transition, ", 0x10uLL, 1uLL, output);
                    }
                    else if ((v23 & 0x80000000) == 0)
                    {
                      fprintf(output, "count based %d, ", *(_DWORD *)(v17 + v15 + 16));
                    }
                    v24 = *(_QWORD *)(v17 + v15);
                    if (v24)
                    {
                      if (*(_DWORD *)(v24 + 4) == 2)
                        fprintf(output, "char %c ", *(unsigned int *)(v24 + 44));
                      fprintf(output, "atom %d, to %d\n");
                    }
                    else
                    {
                      fprintf(output, "epsilon to %d\n");
                    }
                    goto LABEL_67;
                  }
                  v21 = "removed\n";
                  v22 = 8;
                }
                else
                {
                  v21 = "NULL\n";
                  v22 = 5;
                }
                fwrite(v21, v22, 1uLL, output);
LABEL_67:
                v15 += 24;
              }
            }
          }
          else
          {
            fwrite("NULL\n", 5uLL, 1uLL, output);
          }
        }
      }
      fprintf(output, "%d counters:\n", *((_DWORD *)regexp + 10));
      if (*((int *)regexp + 10) >= 1)
      {
        v25 = 0;
        v26 = 0;
        do
        {
          fprintf(output, " %d: min %d max %d\n", v26++, *(_DWORD *)(*((_QWORD *)regexp + 6) + v25), *(_DWORD *)(*((_QWORD *)regexp + 6) + v25 + 4));
          v25 += 8;
        }
        while (v26 < *((int *)regexp + 10));
      }
    }
    else
    {
      fwrite("NULL\n", 5uLL, 1uLL, output);
    }
  }
}

xmlRegexpPtr xmlRegexpCompile(const xmlChar *regexp)
{
  xmlChar **v1;
  uint64_t v2;
  _QWORD *v3;
  _DWORD *v4;
  xmlRegexp *v5;

  v1 = xmlRegNewParserCtxt(regexp);
  if (!v1)
    return 0;
  v2 = (uint64_t)v1;
  v1[4] = 0;
  v3 = xmlRegNewState((uint64_t)v1);
  *(_QWORD *)(v2 + 40) = v3;
  *(_QWORD *)(v2 + 24) = v3;
  xmlRegStatePush(v2, (uint64_t)v3);
  xmlFAParseRegExp(v2, 1);
  if (**(_BYTE **)(v2 + 8))
  {
    *(_DWORD *)(v2 + 16) = 1450;
    xmlRegexpErrCompile(v2, (const xmlChar *)"xmlFAParseRegExp: extra characters");
  }
  if (*(_DWORD *)(v2 + 16)
    || (v4 = *(_DWORD **)(v2 + 40),
        *(_QWORD *)(v2 + 32) = v4,
        **(_DWORD **)(v2 + 24) = 1,
        *v4 = 2,
        xmlFAEliminateEpsilonTransitions(v2),
        *(_DWORD *)(v2 + 16)))
  {
    v5 = 0;
  }
  else
  {
    v5 = (xmlRegexp *)xmlRegEpxFromParse(v2);
  }
  xmlRegFreeParserCtxt((int *)v2);
  return v5;
}

xmlChar **xmlRegNewParserCtxt(const xmlChar *a1)
{
  xmlChar **v2;
  xmlChar **v3;
  xmlChar *v4;

  v2 = (xmlChar **)xmlMalloc(0x78uLL);
  v3 = v2;
  if (v2)
  {
    v2[14] = 0;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 6) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
    if (a1)
    {
      v4 = xmlStrdup(a1);
      *v3 = v4;
    }
    else
    {
      v4 = *v2;
    }
    v3[1] = v4;
    v3[2] = 0;
    v3[13] = (xmlChar *)0xFFFFFFFFLL;
  }
  return v3;
}

_QWORD *xmlRegNewState(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = xmlMalloc(0x38uLL);
  v3 = v2;
  if (v2)
  {
    v2[6] = 0;
    *((_OWORD *)v2 + 1) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *(_OWORD *)v2 = 0u;
    *v2 = 3;
  }
  else
  {
    xmlRegexpErrMemory(a1, (const xmlChar *)"allocating state");
  }
  return v3;
}

uint64_t xmlRegStatePush(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v4 = *(int *)(a1 + 72);
    if ((_DWORD)v4)
    {
      if (*(_DWORD *)(a1 + 76) < (int)v4)
      {
        v5 = *(_QWORD **)(a1 + 80);
LABEL_10:
        v6 = 0;
        v7 = *(int *)(a1 + 76);
        *(_DWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a1 + 76) = v7 + 1;
        v5[v7] = a2;
        return v6;
      }
      *(_DWORD *)(a1 + 72) = 2 * v4;
      v5 = xmlRealloc(*(void **)(a1 + 80), 16 * v4);
      if (v5)
      {
        *(_QWORD *)(a1 + 80) = v5;
        goto LABEL_10;
      }
      xmlRegexpErrMemory(a1, (const xmlChar *)"adding state");
      *(int *)(a1 + 72) /= 2;
    }
    else
    {
      *(_DWORD *)(a1 + 72) = 4;
      v5 = xmlMalloc(0x20uLL);
      *(_QWORD *)(a1 + 80) = v5;
      if (v5)
        goto LABEL_10;
      xmlRegexpErrMemory(a1, (const xmlChar *)"adding state");
      *(_DWORD *)(a1 + 72) = 0;
    }
    return 0xFFFFFFFFLL;
  }
  return 0xFFFFFFFFLL;
}

uint64_t xmlFAParseRegExp(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t result;
  _BYTE *v6;
  _QWORD *v7;

  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = 0;
  result = xmlFAParseBranch(a1, 0);
  if (a2)
    **(_DWORD **)(a1 + 40) = 2;
  v6 = *(_BYTE **)(a1 + 8);
  v7 = *(_QWORD **)(a1 + 40);
  if (*v6 != 124)
    goto LABEL_8;
  do
  {
    if (*(_DWORD *)(a1 + 16))
      break;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v4;
    result = xmlFAParseBranch(a1, v7);
    v6 = *(_BYTE **)(a1 + 8);
  }
  while (*v6 == 124);
  if (!a2)
  {
    *(_QWORD *)(a1 + 40) = v7;
LABEL_8:
    *(_QWORD *)(a1 + 32) = v7;
  }
  return result;
}

_DWORD *xmlRegexpErrCompile(uint64_t a1, const xmlChar *a2)
{
  xmlChar *cur;
  int v3;

  cur = *(xmlChar **)a1;
  v3 = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 16) = 1450;
  return __xmlRaiseError(0, 0, 0, 0, 0, 0xEu, 1450, 3, 0, 0, a2, cur, 0, v3 - (int)cur, 0, "failed to compile: %s\n", (char)a2);
}

void xmlRegFreeParserCtxt(int *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = *(void **)a1;
  if (v2)
    xmlFree(v2);
  v3 = (void *)*((_QWORD *)a1 + 10);
  if (v3)
  {
    if (a1[19] >= 1)
    {
      v4 = 0;
      do
        xmlRegFreeState(*(_QWORD **)(*((_QWORD *)a1 + 10) + 8 * v4++));
      while (v4 < a1[19]);
      v3 = (void *)*((_QWORD *)a1 + 10);
    }
    xmlFree(v3);
  }
  v5 = (void *)*((_QWORD *)a1 + 8);
  if (v5)
  {
    if (a1[15] >= 1)
    {
      v6 = 0;
      do
        xmlRegFreeAtom(*(_QWORD *)(*((_QWORD *)a1 + 8) + 8 * v6++));
      while (v6 < a1[15]);
      v5 = (void *)*((_QWORD *)a1 + 8);
    }
    xmlFree(v5);
  }
  v7 = (void *)*((_QWORD *)a1 + 12);
  if (v7)
    xmlFree(v7);
  xmlFree(a1);
}

void xmlFAEliminateEpsilonTransitions(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t j;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  void *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t k;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t *v31;
  uint64_t m;
  uint64_t v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  void *v50;

  if (!*(_QWORD *)(a1 + 80))
    return;
  LODWORD(v2) = *(_DWORD *)(a1 + 76);
  if ((int)v2 < 1)
    goto LABEL_71;
  v3 = 0;
  do
  {
    v4 = *(int **)(*(_QWORD *)(a1 + 80) + 8 * v3);
    if (v4 && v4[6] == 1)
    {
      v5 = *v4;
      if (*v4 != 2 && v5 != 5)
      {
        v7 = *((_QWORD *)v4 + 4);
        if (!*(_QWORD *)v7)
        {
          v8 = *(unsigned int *)(v7 + 8);
          if ((v8 & 0x80000000) == 0
            && v3 != v8
            && (*(_DWORD *)(v7 + 12) & 0x80000000) != 0
            && v5 != 1
            && (*(_DWORD *)(v7 + 16) & 0x80000000) != 0)
          {
            v9 = v4[11];
            if (v9 >= 1)
            {
              for (i = 0; i < v9; ++i)
              {
                v11 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * *(int *)(*((_QWORD *)v4 + 6) + 4 * i));
                v12 = *(_DWORD *)(v11 + 24);
                if (v12 >= 1)
                {
                  v13 = 0;
                  for (j = 0; j < v12; ++j)
                  {
                    v15 = *(_QWORD *)(v11 + 32) + v13;
                    if (v3 == *(_DWORD *)(v15 + 8))
                    {
                      *(_DWORD *)(v15 + 8) = -1;
                      xmlRegStateAddTrans((_DWORD *)a1, v11, *(_QWORD *)v15, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v8), *(_DWORD *)(v15 + 12), *(_DWORD *)(v15 + 16));
                      v12 = *(_DWORD *)(v11 + 24);
                    }
                    v13 += 24;
                  }
                  v9 = v4[11];
                }
              }
              if (*v4 == 2)
                **(_DWORD **)(*(_QWORD *)(a1 + 80) + 8 * v8) = 2;
            }
            v4[6] = 0;
            *v4 = 5;
            LODWORD(v2) = *(_DWORD *)(a1 + 76);
          }
        }
      }
    }
    ++v3;
  }
  while (v3 < (int)v2);
  if ((int)v2 < 1)
    goto LABEL_71;
  v16 = 0;
  do
  {
    v17 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8 * v16);
    if (v17 && *(_DWORD *)v17 == 5)
    {
      v18 = (void *)v17[4];
      if (v18)
        xmlFree(v18);
      v19 = (void *)v17[6];
      if (v19)
        xmlFree(v19);
      xmlFree(v17);
      *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v16) = 0;
      LODWORD(v2) = *(_DWORD *)(a1 + 76);
    }
    ++v16;
  }
  while (v16 < (int)v2);
  if ((int)v2 < 1)
    goto LABEL_71;
  v20 = 0;
  v21 = v2;
  do
  {
    v22 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * (v21 - 1));
    if (v22)
    {
      v23 = *(_DWORD *)(v22 + 24);
      if (v23)
      {
        if (v23 >= 1)
        {
          v24 = 0;
          for (k = 0; k < v23; ++k)
          {
            v26 = *(_QWORD *)(v22 + 32);
            if (!*(_QWORD *)(v26 + v24))
            {
              v27 = v26 + v24;
              v28 = *(_DWORD *)(v26 + v24 + 8);
              if ((v28 & 0x80000000) == 0)
              {
                if (v28 == (_DWORD)v21 - 1)
                {
                  *(_DWORD *)(v27 + 8) = -1;
                }
                else
                {
                  v29 = v26 + v24;
                  if ((*(_DWORD *)(v29 + 16) & 0x80000000) != 0)
                  {
                    *(_DWORD *)(v27 + 8) = -2;
                    v20 = 1;
                    *(_DWORD *)(v22 + 4) = 1;
                    xmlFAReduceEpsilonTransitions((_DWORD *)a1, v21 - 1, v28, *(_DWORD *)(v29 + 12));
                    *(_DWORD *)(v22 + 4) = 0;
                    v23 = *(_DWORD *)(v22 + 24);
                  }
                }
              }
            }
            v24 += 24;
          }
        }
      }
      else if (*(_DWORD *)v22 != 2)
      {
        *(_DWORD *)v22 = 4;
      }
    }
  }
  while (v21-- > 1);
  v2 = *(unsigned int *)(a1 + 76);
  if (v20)
  {
    v31 = *(uint64_t **)(a1 + 80);
    if ((int)v2 < 1)
      goto LABEL_78;
    for (m = 0; m != v2; ++m)
    {
      v33 = v31[m];
      if (v33)
      {
        v34 = *(unsigned int *)(v33 + 24);
        if ((int)v34 >= 1)
        {
          v35 = (_DWORD *)(*(_QWORD *)(v33 + 32) + 8);
          do
          {
            if (!*((_QWORD *)v35 - 1) && (v35[2] & 0x80000000) != 0 && (*v35 & 0x80000000) == 0)
              *v35 = -1;
            v35 += 6;
            --v34;
          }
          while (v34);
        }
      }
    }
  }
  else
  {
LABEL_71:
    v31 = *(uint64_t **)(a1 + 80);
  }
  if ((int)v2 >= 1)
  {
    v36 = 0;
    do
    {
      v37 = v31[v36];
      if (v37)
        *(_DWORD *)(v37 + 12) = 0;
      ++v36;
    }
    while (v2 != v36);
    v38 = 1;
    goto LABEL_79;
  }
LABEL_78:
  v38 = 0;
LABEL_79:
  v39 = *v31;
  if (*v31)
  {
    *(_DWORD *)(v39 + 12) = 1;
    while (1)
    {
      *(_DWORD *)(v39 + 12) = 2;
      v40 = *(unsigned int *)(v39 + 24);
      if ((int)v40 < 1)
        break;
      v41 = *(_QWORD *)(v39 + 32);
      v39 = 0;
      v42 = (_DWORD *)(v41 + 16);
      do
      {
        v43 = *(v42 - 2);
        if ((v43 & 0x80000000) == 0 && (*((_QWORD *)v42 - 2) || (*v42 & 0x80000000) == 0))
        {
          v44 = v31[v43];
          if (v44)
          {
            if (!*(_DWORD *)(v44 + 12))
            {
              *(_DWORD *)(v44 + 12) = 1;
              v39 = v44;
            }
          }
        }
        v42 += 6;
        --v40;
      }
      while (v40);
      if (!v39)
        goto LABEL_93;
LABEL_99:
      if (!v39)
        goto LABEL_100;
    }
    v39 = 0;
LABEL_93:
    if ((int)v2 >= 2)
    {
      v45 = v2 - 1;
      v46 = v31 + 1;
      while (1)
      {
        v39 = *v46;
        if (*v46)
        {
          if (*(_DWORD *)(v39 + 12) == 1)
            break;
        }
        ++v46;
        if (!--v45)
          goto LABEL_100;
      }
    }
    goto LABEL_99;
  }
LABEL_100:
  if (v38)
  {
    v47 = 0;
    do
    {
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v47);
      if (v48 && !*(_DWORD *)(v48 + 12))
      {
        v49 = *(void **)(v48 + 32);
        if (v49)
          xmlFree(v49);
        v50 = *(void **)(v48 + 48);
        if (v50)
          xmlFree(v50);
        xmlFree((void *)v48);
        *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v47) = 0;
        LODWORD(v2) = *(_DWORD *)(a1 + 76);
      }
      ++v47;
    }
    while (v47 < (int)v2);
  }
}

_QWORD *xmlRegEpxFromParse(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  int v5;
  uint64_t *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  int v16;
  char *v17;
  char *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  const xmlChar *v24;
  int v25;
  uint64_t v26;
  xmlChar *v27;
  _DWORD *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _DWORD *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  int v39;
  int *v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  void *v44;
  int v45;
  int v46;
  void **v47;
  void *v48;
  uint64_t v49;
  void **v50;
  void *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void **v60;
  void *v61;
  int v62;
  int v63;
  int v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;

  v2 = xmlMalloc(0x68uLL);
  v3 = v2;
  if (v2)
  {
    v2[12] = 0;
    *((_OWORD *)v2 + 4) = 0u;
    *((_OWORD *)v2 + 5) = 0u;
    *((_OWORD *)v2 + 2) = 0u;
    *((_OWORD *)v2 + 3) = 0u;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *v2 = *(_QWORD *)a1;
    *((_DWORD *)v2 + 2) = *(_DWORD *)(a1 + 76);
    v2[2] = *(_QWORD *)(a1 + 80);
    *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 60);
    v2[4] = *(_QWORD *)(a1 + 64);
    *((_DWORD *)v2 + 10) = *(_DWORD *)(a1 + 92);
    v2[6] = *(_QWORD *)(a1 + 96);
    v4 = *(_DWORD *)(a1 + 104);
    v5 = *(_DWORD *)(a1 + 112);
    *((_DWORD *)v2 + 14) = v4;
    *((_DWORD *)v2 + 15) = v5;
    if (v4 == -1)
    {
      xmlRegexpIsDeterminist((xmlRegexpPtr)v2);
      if (!*((_DWORD *)v3 + 14))
      {
LABEL_9:
        *(_QWORD *)a1 = 0;
        *(_DWORD *)(a1 + 76) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        *(_DWORD *)(a1 + 60) = 0;
        *(_QWORD *)(a1 + 64) = 0;
        *(_DWORD *)(a1 + 92) = 0;
        *(_QWORD *)(a1 + 96) = 0;
        return v3;
      }
    }
    else if (!v4)
    {
      goto LABEL_9;
    }
    if (*((_DWORD *)v3 + 10))
      goto LABEL_9;
    if (*(_DWORD *)(a1 + 108))
      goto LABEL_9;
    v7 = (uint64_t *)v3[4];
    if (!v7)
      goto LABEL_9;
    v8 = *v7;
    if (!v8 || *(_DWORD *)(v8 + 4) != 5)
      goto LABEL_9;
    v9 = xmlMalloc(4 * *((int *)v3 + 2));
    if (!v9)
    {
      xmlRegexpErrMemory(a1, (const xmlChar *)"compiling regexp");
      ((void (*)(_QWORD *))xmlFree)(v3);
      return 0;
    }
    v10 = v9;
    if (*((int *)v3 + 2) < 1)
    {
      v12 = 0;
    }
    else
    {
      v11 = 0;
      v12 = 0;
      v13 = v3[2];
      do
      {
        v14 = *(_QWORD *)(v13 + 8 * v11);
        v15 = v14 == 0;
        if (v14)
          v16 = v12;
        else
          v16 = -1;
        if (!v15)
          ++v12;
        v9[v11++] = v16;
      }
      while (v11 < *((int *)v3 + 2));
    }
    v17 = (char *)xmlMalloc(8 * *((int *)v3 + 6));
    if (v17)
    {
      v18 = v17;
      v19 = xmlMalloc(4 * *((int *)v3 + 6));
      if (v19)
      {
        v69 = v19;
        if (*((int *)v3 + 6) < 1)
        {
          v21 = 0;
LABEL_46:
          v62 = v21 + 1;
          v28 = xmlRegCalloc2(v12 + 1, v21 + 1, 4uLL);
          if (v28)
          {
            LODWORD(v29) = *((_DWORD *)v3 + 2);
            v68 = v28;
            if ((int)v29 < 1)
            {
              v31 = 0;
            }
            else
            {
              v30 = 0;
              v31 = 0;
              v66 = v21;
              v32 = v69;
              v64 = v21;
              v65 = v18;
              do
              {
                v33 = v10[v30];
                v67 = v30;
                if (v33 != -1)
                {
                  v34 = *(_QWORD *)(v3[2] + 8 * v30);
                  v28[v33 * v62] = *(_DWORD *)v34;
                  if (*(int *)(v34 + 24) >= 1)
                  {
                    v35 = 0;
                    v36 = 0;
                    v37 = (v33 * v62 + 1);
                    v63 = v33 * v64;
                    do
                    {
                      v38 = (_DWORD *)(*(_QWORD *)(v34 + 32) + v35);
                      v39 = v38[2];
                      if (v39 != -1)
                      {
                        v40 = *(int **)v38;
                        if (*(_QWORD *)v38)
                        {
                          v41 = v32[*v40];
                          if (*((_QWORD *)v40 + 11))
                            v42 = v31 == 0;
                          else
                            v42 = 0;
                          if (v42)
                          {
                            v43 = v37;
                            v44 = xmlRegCalloc2(v12, v66, 8uLL);
                            if (!v44)
                            {
                              xmlRegexpErrMemory(a1, (const xmlChar *)"compiling regexp");
                              v31 = 0;
                              v28 = v68;
                              v32 = v69;
                              v18 = v65;
                              break;
                            }
                            v31 = v44;
                            v39 = v38[2];
                            v28 = v68;
                            v32 = v69;
                            v37 = v43;
                            v18 = v65;
                          }
                          v45 = v28[(int)v37 + v41];
                          v46 = v10[v39] + 1;
                          if (v45)
                          {
                            if (v45 != v46)
                            {
                              *((_DWORD *)v3 + 14) = 0;
                              if (v31)
                              {
                                xmlFree(v31);
                                v28 = v68;
                              }
                              xmlFree(v28);
                              xmlFree(v10);
                              xmlFree(v69);
                              if (v64 >= 1)
                              {
                                v52 = 0;
                                do
                                {
                                  xmlFree(*(void **)&v18[v52]);
                                  v52 += 8;
                                }
                                while (8 * v64 != v52);
                              }
                              v53 = v18;
                              goto LABEL_100;
                            }
                          }
                          else
                          {
                            v28[(int)v37 + v41] = v46;
                            if (v31)
                              *((_QWORD *)v31 + v41 + v63) = *(_QWORD *)(*(_QWORD *)v38 + 88);
                          }
                        }
                      }
                      ++v36;
                      v35 += 24;
                    }
                    while (v36 < *(int *)(v34 + 24));
                  }
                }
                v30 = v67 + 1;
                v29 = *((int *)v3 + 2);
                v21 = v64;
              }
              while (v67 + 1 < v29);
            }
            *((_DWORD *)v3 + 14) = 1;
            v54 = (void *)v3[2];
            if (v54)
            {
              v55 = v31;
              if ((int)v29 >= 1)
              {
                v56 = 0;
                do
                  xmlRegFreeState(*(_QWORD **)(v3[2] + 8 * v56++));
                while (v56 < *((int *)v3 + 2));
                v54 = (void *)v3[2];
              }
              xmlFree(v54);
              v31 = v55;
            }
            v3[2] = 0;
            *((_DWORD *)v3 + 2) = 0;
            v57 = (void *)v3[4];
            if (v57)
            {
              v58 = v31;
              if (*((int *)v3 + 6) >= 1)
              {
                v59 = 0;
                do
                  xmlRegFreeAtom(*(_QWORD *)(v3[4] + 8 * v59++));
                while (v59 < *((int *)v3 + 6));
                v57 = (void *)v3[4];
              }
              xmlFree(v57);
              v31 = v58;
            }
            v3[4] = 0;
            *((_DWORD *)v3 + 6) = 0;
            v3[9] = v68;
            v3[10] = v31;
            v3[12] = v18;
            *((_DWORD *)v3 + 22) = v21;
            *((_DWORD *)v3 + 16) = v12;
            xmlFree(v10);
            v53 = v69;
LABEL_100:
            xmlFree(v53);
            goto LABEL_9;
          }
          xmlFree(v10);
          xmlFree(v69);
          if (v21 >= 1)
          {
            v49 = v21;
            v50 = (void **)v18;
            do
            {
              v51 = *v50++;
              xmlFree(v51);
              --v49;
            }
            while (v49);
          }
        }
        else
        {
          v20 = 0;
          v21 = 0;
          while (1)
          {
            v22 = v21;
            v23 = *(_QWORD *)(v3[4] + 8 * v20);
            if (*(_DWORD *)(v23 + 4) != 5 || *(_DWORD *)(v23 + 8) != 2)
              break;
            v24 = *(const xmlChar **)(v23 + 24);
            v25 = v21;
            if (v21 < 1)
            {
LABEL_36:
              v69[v20] = v25;
              v27 = xmlStrdup(v24);
              *(_QWORD *)&v18[8 * v25] = v27;
              if (!v27)
              {
                if (v25 >= 1)
                {
                  v60 = (void **)v18;
                  do
                  {
                    v61 = *v60++;
                    xmlFree(v61);
                    --v22;
                  }
                  while (v22);
                }
                xmlFree(v69);
                goto LABEL_43;
              }
              v21 = v25 + 1;
            }
            else
            {
              v26 = 0;
              while (!xmlStrEqual(*(const xmlChar **)&v18[8 * v26], v24))
              {
                if (v22 == ++v26)
                  goto LABEL_36;
              }
              v69[v20] = v26;
              v21 = v22;
            }
            if (++v20 >= *((int *)v3 + 6))
              goto LABEL_46;
          }
          xmlFree(v10);
          xmlFree(v69);
          if (v21 >= 1)
          {
            v47 = (void **)v18;
            do
            {
              v48 = *v47++;
              xmlFree(v48);
              --v22;
            }
            while (v22);
          }
        }
        ((void (*)(char *))xmlFree)(v18);
        goto LABEL_78;
      }
      xmlRegexpErrMemory(a1, (const xmlChar *)"compiling regexp");
LABEL_43:
      xmlFree(v18);
    }
    else
    {
      xmlRegexpErrMemory(a1, (const xmlChar *)"compiling regexp");
    }
    ((void (*)(_DWORD *))xmlFree)(v10);
LABEL_78:
    ((void (*)(_QWORD *))xmlFree)(v3);
    return 0;
  }
  xmlRegexpErrMemory(a1, (const xmlChar *)"compiling regexp");
  return v3;
}

int xmlRegexpExec(xmlRegexpPtr comp, const xmlChar *value)
{
  int result;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  const xmlChar *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int *v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  void *v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  int v54;
  void **v55;
  unsigned int *v56;
  uint64_t v57;
  int len;
  uint64_t v59;
  xmlRegexpPtr v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  int v69;
  int v70;

  result = -1;
  if (!comp || !value)
    return result;
  v70 = 0;
  v68 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v61 = 0u;
  v66 = (unint64_t)value;
  LODWORD(v65) = 0;
  v69 = 0;
  v59 = 0x100000000;
  v63 = 0uLL;
  v60 = comp;
  v62 = **((unint64_t **)comp + 2);
  DWORD2(v64) = 0;
  v4 = *((unsigned int *)comp + 10);
  if ((int)v4 < 1)
  {
    *(_QWORD *)&v64 = 0;
  }
  else
  {
    v5 = xmlMalloc(4 * v4);
    *(_QWORD *)&v64 = v5;
    if (!v5)
    {
      xmlRegexpErrMemory(0, (const xmlChar *)"running regexp");
      return -1;
    }
    bzero(v5, 4 * *((int *)comp + 10));
  }
  len = 0;
  do
  {
    v6 = v62;
    if (!(_QWORD)v62 || !*(_BYTE *)(v66 + (int)v65) && *(_DWORD *)v62 == 2)
      break;
    len = 1;
    v7 = DWORD2(v62);
    v8 = *(_DWORD *)(v62 + 24);
    if (*(_BYTE *)(v66 + (int)v65))
      v9 = 0;
    else
      v9 = (_QWORD)v64 == 0;
    if (v9)
    {
      if (SDWORD2(v62) >= v8)
        goto LABEL_78;
      v46 = *(_QWORD *)(v62 + 32);
      if ((*(_DWORD *)(v46 + 24 * SDWORD2(v62) + 8) & 0x80000000) == 0)
      {
        v47 = *(_QWORD *)(v46 + 24 * SDWORD2(v62));
        if (*(_DWORD *)(v47 + 12) || *(int *)(v47 + 16) < 1)
          goto LABEL_78;
      }
    }
    HIDWORD(v62) = 0;
    if (SDWORD2(v62) >= v8)
    {
LABEL_77:
      if (!v7)
      {
LABEL_83:
        if (*(_DWORD *)(v62 + 24))
          continue;
      }
LABEL_78:
      HIDWORD(v59) = 0;
      xmlFARegExecRollBack((int *)&v59);
      continue;
    }
    while (1)
    {
      v10 = *(_QWORD *)(v6 + 32);
      v11 = v10 + 24 * v7;
      v12 = (int *)(v11 + 8);
      if ((*(_DWORD *)(v11 + 8) & 0x80000000) != 0)
        goto LABEL_59;
      v13 = v7;
      v14 = v10 + 24 * v7;
      v17 = *(_DWORD *)(v14 + 16);
      v16 = (_DWORD *)(v14 + 16);
      v15 = v17;
      if ((v17 & 0x80000000) != 0)
      {
        v23 = *(_QWORD *)v11;
        if (!*(_QWORD *)v11)
        {
          fwrite("epsilon transition left at runtime\n", 0x23uLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
          v49 = -2;
          goto LABEL_82;
        }
        v24 = (const xmlChar *)(v66 + (int)v65);
        if (!*v24 || (v25 = xmlStringCurrentChar(0, v24, &len), (v26 = xmlRegCheckCharacter(v23, v25)) == 0))
        {
          if (*(_DWORD *)(v23 + 12) || *(int *)(v23 + 16) < 1)
            goto LABEL_59;
          v22 = 1;
          HIDWORD(v62) = 1;
          len = 0;
          goto LABEL_49;
        }
        if (v26 != 1)
        {
          if ((v26 & 0x80000000) == 0)
            goto LABEL_59;
          v49 = -4;
LABEL_82:
          LODWORD(v59) = v49;
          if (DWORD2(v62))
            goto LABEL_78;
          goto LABEL_83;
        }
        if ((*(_DWORD *)(v23 + 12) & 0x80000000) != 0 || *(int *)(v23 + 16) < 1)
        {
          v22 = 1;
        }
        else
        {
          v57 = *(_QWORD *)(*((_QWORD *)comp + 2) + 8 * *v12);
          v27 = v10 + 24 * v13;
          v30 = *(_DWORD *)(v27 + 12);
          v29 = (unsigned int *)(v27 + 12);
          v28 = v30;
          if ((v30 & 0x80000000) == 0)
          {
            if (!(_QWORD)v64)
              goto LABEL_91;
            if (!v60)
              goto LABEL_91;
            v31 = *((_QWORD *)v60 + 6);
            if (!v31)
              goto LABEL_91;
            v32 = *(_DWORD *)(v64 + 4 * v28);
            if (v32 >= *(_DWORD *)(v31 + 8 * v28 + 4))
              goto LABEL_59;
            *(_DWORD *)(v64 + 4 * v28) = v32 + 1;
          }
          v56 = v29;
          if (*(_DWORD *)(v62 + 24) > DWORD2(v62) + 1)
            xmlFARegExecSave((uint64_t)&v59);
          v33 = 1;
          HIDWORD(v62) = 1;
          while (v33 != *(_DWORD *)(v23 + 16))
          {
            v34 = v65;
            v35 = (int)v65 + (uint64_t)len;
            LODWORD(v65) = v65 + len;
            v36 = v66;
            if (!*(_BYTE *)(v66 + v35))
            {
              LODWORD(v65) = v34;
              break;
            }
            if (v33 >= *(_DWORD *)(v23 + 12))
            {
              v37 = DWORD2(v62);
              v38 = v62;
              DWORD2(v62) = -1;
              *(_QWORD *)&v62 = v57;
              xmlFARegExecSave((uint64_t)&v59);
              DWORD2(v62) = v37;
              *(_QWORD *)&v62 = v38;
              v36 = v66;
              v35 = (int)v65;
            }
            v39 = xmlStringCurrentChar(0, (const xmlChar *)(v36 + v35), &len);
            v40 = xmlRegCheckCharacter(v23, v39);
            v33 = ++HIDWORD(v62);
            if (v40 != 1)
              goto LABEL_63;
          }
          v40 = 1;
LABEL_63:
          if (v33 >= *(_DWORD *)(v23 + 12))
            v44 = v40;
          else
            v44 = 0;
          if (v44 < 1)
            goto LABEL_78;
          v45 = *v56;
          if ((v45 & 0x80000000) == 0)
          {
            if (!(_QWORD)v64)
              goto LABEL_91;
            --*(_DWORD *)(v64 + 4 * v45);
          }
          v22 = v44 & ~(v44 >> 31);
          if (v22 != 1)
            goto LABEL_59;
        }
      }
      else
      {
        if (!(_QWORD)v64)
          goto LABEL_91;
        v18 = *(_DWORD *)(v64 + 4 * v15);
        v19 = *((_QWORD *)v60 + 6);
        v20 = *(_DWORD *)(v19 + 8 * v15);
        if (v18 < v20)
          goto LABEL_59;
        v21 = *(_DWORD *)(v19 + 8 * v15 + 4);
        if (v18 > v21)
          goto LABEL_59;
        v22 = v20 == v21;
      }
LABEL_49:
      if (*(_DWORD *)(v10 + 24 * v13 + 20) == 1
        || !v22 && (*v16 & 0x80000000) == 0 && *(_DWORD *)(v62 + 24) > DWORD2(v62) + 1)
      {
        xmlFARegExecSave((uint64_t)&v59);
      }
      v41 = *(unsigned int *)(v10 + 24 * v13 + 12);
      if ((v41 & 0x80000000) != 0)
        goto LABEL_86;
      if (!(_QWORD)v64)
        goto LABEL_91;
      if (!v60)
        goto LABEL_91;
      v42 = *((_QWORD *)v60 + 6);
      if (!v42)
        goto LABEL_91;
      v43 = *(_DWORD *)(v64 + 4 * v41);
      if (v43 < *(_DWORD *)(v42 + 8 * v41 + 4))
        break;
LABEL_59:
      v7 = DWORD2(v62) + 1;
      DWORD2(v62) = v7;
      v6 = v62;
      if (v7 >= *(_DWORD *)(v62 + 24))
        goto LABEL_77;
    }
    *(_DWORD *)(v64 + 4 * v41) = v43 + 1;
LABEL_86:
    v48 = *v16;
    if (v48 <= 0x123455)
    {
      if (!(_QWORD)v64)
      {
LABEL_91:
        LODWORD(v59) = -1;
        break;
      }
      *(_DWORD *)(v64 + 4 * v48) = 0;
    }
    *(_QWORD *)&v62 = *(_QWORD *)(*((_QWORD *)comp + 2) + 8 * *v12);
    DWORD2(v62) = 0;
    if (*(_QWORD *)v11)
      LODWORD(v65) = v65 + len;
  }
  while (!(_DWORD)v59);
  v50 = (void *)*((_QWORD *)&v63 + 1);
  if (*((_QWORD *)&v63 + 1))
  {
    v51 = v63;
    if ((_QWORD)v64)
      v52 = (int)v63 < 1;
    else
      v52 = 1;
    if (!v52)
    {
      v53 = 0;
      v54 = v63;
      v55 = (void **)(*((_QWORD *)&v63 + 1) + 16);
      do
      {
        if (*v55)
        {
          xmlFree(*v55);
          v51 = v54;
        }
        ++v53;
        v55 += 3;
      }
      while (v53 < v51);
      v50 = (void *)*((_QWORD *)&v63 + 1);
    }
    xmlFree(v50);
  }
  if (!(_QWORD)v62)
    return -1;
  if ((_QWORD)v64)
    xmlFree((void *)v64);
  result = v59;
  if (!(_DWORD)v59)
    return 1;
  if ((_DWORD)v59 == -1)
  {
    if (v69 <= 10000000)
      return 0;
    else
      return -1;
  }
  return result;
}

int xmlRegexpIsDeterminist(xmlRegexpPtr comp)
{
  int v2;
  xmlAutomataPtr v3;
  xmlAutomataPtr v4;
  void *v5;
  uint64_t v6;

  if (!comp)
    return -1;
  v2 = *((_DWORD *)comp + 14);
  if (v2 != -1)
    return v2;
  v3 = xmlNewAutomata();
  if (!v3)
    return -1;
  v4 = v3;
  v5 = (void *)*((_QWORD *)v3 + 10);
  if (v5)
  {
    if (*((int *)v4 + 19) >= 1)
    {
      v6 = 0;
      do
        xmlRegFreeState(*(_QWORD **)(*((_QWORD *)v4 + 10) + 8 * v6++));
      while (v6 < *((int *)v4 + 19));
      v5 = (void *)*((_QWORD *)v4 + 10);
    }
    xmlFree(v5);
  }
  *((_DWORD *)v4 + 15) = *((_DWORD *)comp + 6);
  *((_QWORD *)v4 + 8) = *((_QWORD *)comp + 4);
  *((_DWORD *)v4 + 19) = *((_DWORD *)comp + 2);
  *((_QWORD *)v4 + 10) = *((_QWORD *)comp + 2);
  *((_DWORD *)v4 + 26) = -1;
  *((_DWORD *)v4 + 28) = *((_DWORD *)comp + 15);
  v2 = xmlFAComputesDeterminism(v4);
  *((_QWORD *)v4 + 8) = 0;
  *((_QWORD *)v4 + 10) = 0;
  xmlRegFreeParserCtxt((int *)v4);
  *((_DWORD *)comp + 14) = v2;
  return v2;
}

xmlAutomataPtr xmlNewAutomata(void)
{
  xmlChar **v0;
  uint64_t v1;
  _QWORD *v2;

  v0 = xmlRegNewParserCtxt(0);
  v1 = (uint64_t)v0;
  if (v0)
  {
    v0[4] = 0;
    v2 = xmlRegNewState((uint64_t)v0);
    *(_QWORD *)(v1 + 40) = v2;
    *(_QWORD *)(v1 + 24) = v2;
    if (v2)
    {
      *(_DWORD *)v2 = 1;
      if ((xmlRegStatePush(v1, (uint64_t)v2) & 0x80000000) == 0)
      {
        *(_DWORD *)(v1 + 112) = 0;
        return (xmlAutomataPtr)v1;
      }
      xmlRegFreeState(*(_QWORD **)(v1 + 24));
    }
    xmlRegFreeParserCtxt((int *)v1);
    return 0;
  }
  return (xmlAutomataPtr)v1;
}

void xmlRegFreeState(_QWORD *a1)
{
  void *v2;
  void *v3;

  if (a1)
  {
    v2 = (void *)a1[4];
    if (v2)
      xmlFree(v2);
    v3 = (void *)a1[6];
    if (v3)
      xmlFree(v3);
    xmlFree(a1);
  }
}

uint64_t xmlFAComputesDeterminism(_DWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const xmlChar *v25;
  const xmlChar *v26;
  int v27;
  BOOL v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int *v37;
  int v38;
  uint64_t v40;
  _DWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  unsigned int v50;
  xmlChar *v52;
  _BOOL4 v53;
  int v54;
  uint64_t v55;
  _DWORD *v56;
  int v57;
  _DWORD *v58;
  int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unsigned int v66;
  unsigned int v67;
  BOOL v68;
  _DWORD *v69;
  char **v70;
  int v71;
  unsigned int v72;
  int v73;
  int v74;
  unsigned int v76;
  int v77;
  int v78;
  char **v79;
  _DWORD *v80;
  int v81;
  char v82;
  char v83;
  BOOL v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _DWORD *v89;
  uint64_t v90;
  _BOOL4 v91;
  BOOL v95;
  uint64_t v98;
  char v99;
  xmlChar *v100;
  char v101;
  _DWORD *v102;
  uint64_t v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v111;
  int *v112;
  char v113;
  uint64_t *v114;

  v1 = a1[26];
  if ((_DWORD)v1 == -1)
  {
    v2 = (uint64_t)a1;
    v3 = a1[19];
    if (v3 < 1)
      goto LABEL_239;
    v4 = 0;
    v5 = a1[28];
    v113 = v5;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + 8 * v4);
      if (v6)
      {
        v7 = *(_DWORD *)(v6 + 24);
        if (v7 >= 2)
        {
          v111 = v4;
          v8 = 0;
          v9 = 0;
          while (1)
          {
            v10 = *(_QWORD *)(v6 + 32);
            v11 = (uint64_t *)(v10 + 24 * v9);
            if (*v11)
            {
              v12 = v10 + 24 * v9;
              v14 = *(_DWORD *)(v12 + 8);
              v13 = (_DWORD *)(v12 + 8);
              if (v14 != -1 && v9 != 0)
                break;
            }
LABEL_35:
            ++v9;
            v8 += 24;
            if (v9 >= v7)
            {
              v4 = v111;
              v3 = a1[19];
              goto LABEL_37;
            }
          }
          v16 = 0;
          v17 = v10 + 24 * v9;
          v18 = (_DWORD *)(v17 + 12);
          v19 = (_DWORD *)(v17 + 16);
          while (1)
          {
            v20 = *(_QWORD *)(v6 + 32);
            v21 = *(_DWORD *)(v20 + v16 + 8);
            if (v21 == -1)
              goto LABEL_33;
            v22 = *(_QWORD *)(v20 + v16);
            if (!v22 || *v13 != v21)
              goto LABEL_33;
            v23 = *v11;
            if (*v11 == v22)
              goto LABEL_30;
            if (!v23)
              goto LABEL_33;
            v24 = *(_DWORD *)(v23 + 4);
            if (v24 != *(_DWORD *)(v22 + 4))
              goto LABEL_33;
            if (v24 == 2)
            {
              v28 = *(_DWORD *)(v23 + 44) == *(_DWORD *)(v22 + 44);
            }
            else
            {
              if (v24 != 5)
                goto LABEL_33;
              v25 = *(const xmlChar **)(v23 + 24);
              v26 = *(const xmlChar **)(v22 + 24);
              if ((v5 & 1) == 0)
              {
                v27 = xmlStrEqual(v25, v26);
                LOBYTE(v5) = v113;
                if (v27)
                  goto LABEL_30;
                goto LABEL_33;
              }
              v28 = v25 == v26;
            }
            if (v28)
            {
LABEL_30:
              if (*v18 == *(_DWORD *)(v20 + v16 + 12) && *v19 == *(_DWORD *)(v20 + v16 + 16))
                *(_DWORD *)(v20 + v16 + 8) = -1;
            }
LABEL_33:
            v16 += 24;
            if (v8 == v16)
            {
              v7 = *(_DWORD *)(v6 + 24);
              goto LABEL_35;
            }
          }
        }
      }
LABEL_37:
      ++v4;
      v2 = (uint64_t)a1;
    }
    while (v4 < v3);
    if (v3 < 1)
    {
LABEL_239:
      v1 = 1;
      goto LABEL_240;
    }
    v30 = 0;
    v1 = 1;
LABEL_40:
    v31 = *(_QWORD *)(*(_QWORD *)(v2 + 80) + 8 * v30);
    if (!v31)
      goto LABEL_237;
    v32 = *(_DWORD *)(v31 + 24);
    if (v32 < 2)
      goto LABEL_237;
    v98 = v30;
    v33 = 0;
    v114 = 0;
    while (1)
    {
      v34 = *(_QWORD *)(v31 + 32);
      v35 = (uint64_t *)(v34 + 24 * v33);
      if (*v35)
      {
        v36 = v34 + 24 * v33;
        v38 = *(_DWORD *)(v36 + 8);
        v37 = (int *)(v36 + 8);
        if (v38 != -1 && v33 != 0)
          break;
      }
LABEL_234:
      if (++v33 >= v32)
      {
        v30 = v98;
        if (v114)
          *((_DWORD *)v114 + 5) = 2;
LABEL_237:
        if (++v30 >= *(int *)(v2 + 76))
        {
LABEL_240:
          *(_DWORD *)(v2 + 104) = v1;
          return v1;
        }
        goto LABEL_40;
      }
    }
    v40 = 0;
    v41 = (_DWORD *)(v34 + 24 * v33 + 20);
    while (1)
    {
      v42 = *(_QWORD *)(v31 + 32);
      if (*(_DWORD *)(v42 + 24 * v40 + 8) != -1)
      {
        v43 = *(_QWORD *)(v42 + 24 * v40);
        if (v43)
        {
          v44 = *v35;
          if (*v35 == v43)
            goto LABEL_187;
          if (v44)
          {
            v45 = *(_DWORD *)(v44 + 4);
            if (v45 != 6)
            {
              v46 = *(_DWORD *)(v43 + 4);
              if (v46 != 6)
              {
                if (v45 <= v46)
                  v47 = *(_QWORD *)(v42 + 24 * v40);
                else
                  v47 = *v35;
                if (v45 <= v46)
                  v48 = *v35;
                else
                  v48 = *(_QWORD *)(v42 + 24 * v40);
                v49 = *(_DWORD *)(v48 + 4);
                v50 = *(_DWORD *)(v47 + 4);
                if (v49 != v50 && v49 - 1 >= 6 && v50 - 1 >= 6)
                {
                  if (v49 >= v50)
                    v59 = *(_DWORD *)(v47 + 4);
                  else
                    v59 = *(_DWORD *)(v48 + 4);
                  if (v49 <= v50)
                    v60 = *(_DWORD *)(v47 + 4);
                  else
                    v60 = *(_DWORD *)(v48 + 4);
                  switch(v59)
                  {
                    case 100:
                      if (v60 < 0x6A)
                        goto LABEL_66;
                      break;
                    case 101:
                    case 102:
                    case 103:
                    case 104:
                    case 105:
                    case 107:
                    case 108:
                    case 109:
                    case 111:
                    case 112:
                    case 113:
                    case 115:
                    case 116:
                    case 117:
                    case 118:
                    case 119:
                    case 120:
                    case 121:
                    case 123:
                    case 124:
                    case 125:
                    case 127:
                    case 128:
                    case 129:
                    case 130:
                    case 132:
                    case 133:
                    case 134:
                    case 135:
                      goto LABEL_189;
                    case 106:
                      if (v60 < 0x6E)
                        goto LABEL_66;
                      break;
                    case 110:
                      if (v60 < 0x72)
                        goto LABEL_66;
                      break;
                    case 114:
                      if (v60 < 0x7A)
                        goto LABEL_66;
                      break;
                    case 122:
                      if (v60 < 0x7E)
                        goto LABEL_66;
                      break;
                    case 126:
                      if (v60 < 0x83)
                        goto LABEL_66;
                      break;
                    case 131:
                      if (v60 <= 0x87)
                        goto LABEL_66;
                      break;
                    default:
                      switch(v59)
                      {
                        case 7:
                          if (v60 - 100 >= 0x16 && v60 - 126 >= 5 && v60 != 8)
                            goto LABEL_66;
                          break;
                        case 9:
                          if (v60 - 106 >= 0x1E && v60 != 10)
                            goto LABEL_66;
                          break;
                        case 11:
                          if (v60 - 114 >= 0x16 && v60 - 106 >= 4 && v60 != 12)
                            goto LABEL_66;
                          break;
                        case 13:
                          v95 = v60 - 100 > 0x23 || ((1 << (v60 - 100)) & 0xFFFFFC3FFLL) == 0;
                          if (v95 && v60 - 14 >= 2)
                            goto LABEL_66;
                          break;
                        case 15:
                          if (v60 - 114 >= 0x16 && v60 - 106 >= 4 && v60 != 14)
                            goto LABEL_66;
                          break;
                        default:
                          goto LABEL_66;
                      }
                      break;
                  }
                  goto LABEL_189;
                }
LABEL_66:
                switch(v49)
                {
                  case 2u:
                    v112 = v37;
                    v61 = *(_DWORD *)(v48 + 44);
                    if (v50 == 2)
                    {
                      v54 = v61 == *(_DWORD *)(v47 + 44);
                    }
                    else
                    {
                      v86 = v47;
                      v87 = v1;
                      v88 = v47;
                      v89 = v41;
                      v90 = v48;
                      v54 = xmlRegCheckCharacter(v86, v61);
                      v48 = v90;
                      v41 = v89;
                      v47 = v88;
                      v1 = v87;
                      if (v54 < 0)
                        v54 = 1;
                    }
LABEL_183:
                    if (*(_DWORD *)(v48 + 40) == *(_DWORD *)(v47 + 40))
                      v91 = v54;
                    else
                      v91 = v54 == 0;
                    v2 = (uint64_t)a1;
                    v37 = v112;
                    if (!v91)
                      goto LABEL_189;
                    break;
                  case 3u:
                    v112 = v37;
                    if (v50 != 3)
                    {
LABEL_178:
                      v54 = 1;
                      goto LABEL_183;
                    }
                    v62 = *(_DWORD *)(v48 + 76);
                    if (v62 < 1)
                    {
                      v54 = 0;
                      goto LABEL_183;
                    }
                    v63 = 0;
                    v64 = *(_DWORD *)(v47 + 76);
                    while (v64 < 1)
                    {
LABEL_176:
                      v54 = 0;
                      if (++v63 >= v62)
                        goto LABEL_183;
                    }
                    v65 = 0;
                    while (2)
                    {
                      v66 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v48 + 80) + 8 * v63) + 4);
                      if (v66 == 3
                        || ((v67 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v47 + 80) + 8 * v65) + 4),
                             (v66 & 0xFFFFFFFE) != 4)
                          ? (v68 = v67 - 3 >= 3)
                          : (v68 = 0),
                            !v68))
                      {
LABEL_109:
                        if (++v65 >= v64)
                        {
                          v62 = *(_DWORD *)(v48 + 76);
                          goto LABEL_176;
                        }
                        continue;
                      }
                      break;
                    }
                    if (v66 <= v67)
                      v69 = *(_DWORD **)(*(_QWORD *)(v48 + 80) + 8 * v63);
                    else
                      v69 = *(_DWORD **)(*(_QWORD *)(v47 + 80) + 8 * v65);
                    if (v66 <= v67)
                      v70 = *(char ***)(*(_QWORD *)(v47 + 80) + 8 * v65);
                    else
                      v70 = *(char ***)(*(_QWORD *)(v48 + 80) + 8 * v63);
                    v71 = v69[1];
                    if (v71 == 6 || (v72 = *((_DWORD *)v70 + 1), v72 == 6))
                    {
LABEL_104:
                      v73 = 1;
                      goto LABEL_105;
                    }
                    if (v71 == 1 || v72 == 1)
                      goto LABEL_109;
                    if (v71 == v72)
                    {
                      if (v71 != 2)
                        goto LABEL_104;
                      if (v69[3] >= *((_DWORD *)v70 + 2))
                        v73 = *((_DWORD *)v70 + 3) >= v69[2];
                      else
LABEL_120:
                        v73 = 0;
LABEL_105:
                      v74 = *(_DWORD *)v70;
                      if (*v69)
                      {
                        if (!v74)
                          goto LABEL_107;
                      }
                      else if (v74)
                      {
LABEL_107:
                        v73 ^= 1u;
                      }
                      if (v73)
                        goto LABEL_178;
                      goto LABEL_109;
                    }
                    if (v71 != 2)
                    {
                      if (v71 == 136 || v72 == 136)
                        goto LABEL_178;
                      if (v71 < 0x64 || v72 <= 0x63)
                      {
                        v54 = 1;
                        switch(v71)
                        {
                          case 7:
                            if (v72 == 8)
                              goto LABEL_120;
                            break;
                          case 9:
                            if (v72 == 10)
                              goto LABEL_120;
                            break;
                          case 11:
                            if (v72 == 12)
                              goto LABEL_120;
                            break;
                          case 13:
                            if (v72 == 14)
                              goto LABEL_120;
                            break;
                          case 15:
                            if (v72 == 16)
                              goto LABEL_120;
                            break;
                          default:
                            goto LABEL_183;
                        }
                        goto LABEL_183;
                      }
                      if (v71 <= 113)
                      {
                        switch(v71)
                        {
                          case 'd':
                            v85 = v72 - 101 >= 5;
                            goto LABEL_171;
                          case 'j':
                            v76 = v72 - 107;
                            break;
                          case 'n':
                            v76 = v72 - 111;
                            break;
                          default:
                            goto LABEL_174;
                        }
                      }
                      else
                      {
                        if (v71 <= 125)
                        {
                          if (v71 != 114)
                          {
                            if (v71 == 122)
                            {
                              v76 = v72 - 123;
                              goto LABEL_169;
                            }
LABEL_174:
                            if (v72 > 0x87)
                              goto LABEL_178;
                            goto LABEL_120;
                          }
                          v85 = v72 - 115 >= 7;
LABEL_171:
                          v73 = !v85;
                          goto LABEL_105;
                        }
                        if (v71 == 126)
                        {
                          v85 = v72 - 127 >= 4;
                          goto LABEL_171;
                        }
                        if (v71 != 131)
                          goto LABEL_174;
                        v76 = v72 - 132;
                      }
LABEL_169:
                      v85 = v76 >= 3;
                      goto LABEL_171;
                    }
                    v77 = *(_DWORD *)v70;
                    if (*v69)
                    {
                      if (v77)
                        goto LABEL_133;
LABEL_139:
                      v99 = 1;
                      v101 = 0;
                    }
                    else
                    {
                      if (v77)
                        goto LABEL_139;
LABEL_133:
                      v99 = 0;
                      v101 = 1;
                    }
                    v78 = v69[2];
                    v109 = v1;
                    v103 = v47;
                    v105 = v63;
                    v107 = v48;
                    v102 = v69;
                    if (v78 <= v69[3])
                    {
                      do
                      {
                        v79 = v70;
                        v80 = v41;
                        v81 = xmlRegCheckCharacterRange(*((_DWORD *)v70 + 1), v78, *((_DWORD *)v70 + 2), *((_DWORD *)v70 + 3), v70[2]);
                        v70 = v79;
                        v47 = v103;
                        v63 = v105;
                        v48 = v107;
                        v41 = v80;
                        v1 = v109;
                        if (v81 < 0)
                          break;
                        if (v81)
                          v82 = 0;
                        else
                          v82 = v99;
                        v83 = v101;
                        if (v81 != 1)
                          v83 = 0;
                        v54 = 1;
                        if ((v82 & 1) != 0 || (v83 & 1) != 0)
                          goto LABEL_183;
                      }
                      while (v78++ < v102[3]);
                      v64 = *(_DWORD *)(v103 + 76);
                    }
                    goto LABEL_109;
                  case 5u:
                    v104 = v41;
                    v106 = v48;
                    v112 = v37;
                    v108 = v1;
                    v52 = *(xmlChar **)(v47 + 24);
                    v100 = *(xmlChar **)(v48 + 24);
                    v53 = xmlStrchr(v100, 0x7Cu) == 0;
                    if (v53 != (xmlStrchr(v52, 0x7Cu) != 0))
                    {
                      v54 = xmlRegStrEqualWildcard(v100, v52);
                      v1 = v108;
                      v41 = v104;
                      v48 = v106;
                      goto LABEL_183;
                    }
                    v1 = v108;
                    v37 = v112;
                    v41 = v104;
                    goto LABEL_189;
                }
              }
            }
LABEL_187:
            *v41 = 1;
            v58 = (_DWORD *)(v42 + 24 * v40 + 20);
LABEL_188:
            v1 = 0;
            *v58 = 1;
            v114 = v35;
          }
        }
        else
        {
          v55 = *v37;
          if ((_DWORD)v55 != -1)
          {
            v56 = v41;
            v57 = xmlFARecurseDeterminism(v2, *(_QWORD *)(*(_QWORD *)(v2 + 80) + 8 * v55));
            xmlFAFinishRecurseDeterminism(v2, *(_QWORD *)(*(_QWORD *)(v2 + 80) + 8 * *v37));
            v41 = v56;
            v58 = v56;
            if (!v57)
              goto LABEL_188;
            v1 = 1;
          }
        }
      }
LABEL_189:
      if (++v40 == v33)
      {
        v32 = *(_DWORD *)(v31 + 24);
        goto LABEL_234;
      }
    }
  }
  return v1;
}

void xmlFreeAutomata(xmlAutomataPtr am)
{
  if (am)
    xmlRegFreeParserCtxt((int *)am);
}

void xmlRegFreeRegexp(xmlRegexpPtr regexp)
{
  void *v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  if (regexp)
  {
    v2 = *(void **)regexp;
    if (v2)
      xmlFree(v2);
    v3 = (void *)*((_QWORD *)regexp + 2);
    if (v3)
    {
      if (*((int *)regexp + 2) >= 1)
      {
        v4 = 0;
        do
          xmlRegFreeState(*(_QWORD **)(*((_QWORD *)regexp + 2) + 8 * v4++));
        while (v4 < *((int *)regexp + 2));
        v3 = (void *)*((_QWORD *)regexp + 2);
      }
      xmlFree(v3);
    }
    v5 = (void *)*((_QWORD *)regexp + 4);
    if (v5)
    {
      if (*((int *)regexp + 6) >= 1)
      {
        v6 = 0;
        do
          xmlRegFreeAtom(*(_QWORD *)(*((_QWORD *)regexp + 4) + 8 * v6++));
        while (v6 < *((int *)regexp + 6));
        v5 = (void *)*((_QWORD *)regexp + 4);
      }
      xmlFree(v5);
    }
    v7 = (void *)*((_QWORD *)regexp + 6);
    if (v7)
      xmlFree(v7);
    v8 = (void *)*((_QWORD *)regexp + 9);
    if (v8)
      xmlFree(v8);
    v9 = (void *)*((_QWORD *)regexp + 10);
    if (v9)
      xmlFree(v9);
    v10 = (void *)*((_QWORD *)regexp + 12);
    if (v10)
    {
      if (*((int *)regexp + 22) >= 1)
      {
        v11 = 0;
        do
          xmlFree(*(void **)(*((_QWORD *)regexp + 12) + 8 * v11++));
        while (v11 < *((int *)regexp + 22));
        v10 = (void *)*((_QWORD *)regexp + 12);
      }
      xmlFree(v10);
    }
    xmlFree(regexp);
  }
}

void xmlRegFreeAtom(uint64_t a1)
{
  int v2;
  uint64_t i;
  _QWORD *v4;
  void *v5;
  void *v6;
  int v7;
  void *v8;
  void *v9;
  void *v10;

  if (a1)
  {
    v2 = *(_DWORD *)(a1 + 76);
    if (v2 >= 1)
    {
      for (i = 0; i < v2; ++i)
      {
        v4 = *(_QWORD **)(*(_QWORD *)(a1 + 80) + 8 * i);
        if (v4)
        {
          v5 = (void *)v4[2];
          if (v5)
            xmlFree(v5);
          xmlFree(v4);
          v2 = *(_DWORD *)(a1 + 76);
        }
      }
    }
    v6 = *(void **)(a1 + 80);
    if (v6)
      xmlFree(v6);
    v7 = *(_DWORD *)(a1 + 4);
    if (v7 == 5)
    {
      v8 = *(void **)(a1 + 24);
      if (!v8 || (xmlFree(v8), v7 = *(_DWORD *)(a1 + 4), v7 == 5))
      {
        v9 = *(void **)(a1 + 32);
        if (!v9)
        {
LABEL_19:
          xmlFree((void *)a1);
          return;
        }
        xmlFree(v9);
        v7 = *(_DWORD *)(a1 + 4);
      }
    }
    if (v7 == 136)
    {
      v10 = *(void **)(a1 + 24);
      if (v10)
        xmlFree(v10);
    }
    goto LABEL_19;
  }
}

uint64_t xmlAutomataSetFlags(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 112) |= a2;
  return result;
}

xmlAutomataStatePtr xmlAutomataGetInitState(xmlAutomataStatePtr am)
{
  if (am)
    return (xmlAutomataStatePtr)*((_QWORD *)am + 3);
  return am;
}

int xmlAutomataSetFinalState(xmlAutomataPtr am, xmlAutomataStatePtr state)
{
  int result;

  result = -1;
  if (am)
  {
    if (state)
    {
      result = 0;
      *(_DWORD *)state = 2;
    }
  }
  return result;
}

xmlAutomataStatePtr xmlAutomataNewTransition(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, void *data)
{
  xmlAutomataStatePtr result;
  xmlAutomataStatePtr v11;

  result = 0;
  if (am)
  {
    if (from)
    {
      if (token)
      {
        result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
        if (result)
        {
          v11 = result;
          *((_QWORD *)result + 11) = data;
          *((_QWORD *)result + 3) = xmlStrdup(token);
          if ((xmlFAGenerateTransitions((uint64_t)am, (uint64_t)from, to, (uint64_t)v11) & 0x80000000) != 0)
          {
            xmlRegFreeAtom((uint64_t)v11);
            return 0;
          }
          else
          {
            result = to;
            if (!to)
              return (xmlAutomataStatePtr)*((_QWORD *)am + 5);
          }
        }
      }
    }
  }
  return result;
}

_OWORD *xmlRegNewAtom(uint64_t a1, int a2)
{
  _OWORD *v4;
  _OWORD *v5;

  v4 = xmlMalloc(0x60uLL);
  v5 = v4;
  if (v4)
  {
    *v4 = 0u;
    v4[1] = 0u;
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *((_DWORD *)v4 + 1) = a2;
    *((_QWORD *)v4 + 1) = 2;
    *((_DWORD *)v4 + 4) = 0;
  }
  else
  {
    xmlRegexpErrMemory(a1, (const xmlChar *)"allocating atom");
  }
  return v5;
}

uint64_t xmlFAGenerateTransitions(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int Counter;
  int v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;

  if (!a4)
  {
    *(_DWORD *)(a1 + 16) = 1450;
    xmlRegexpErrCompile(a1, (const xmlChar *)"generate transition: atom == NULL");
    return 0xFFFFFFFFLL;
  }
  v6 = a3;
  if (*(_DWORD *)(a4 + 4) == 4)
  {
    if ((xmlRegAtomPush(a1, (_DWORD *)a4) & 0x80000000) == 0)
    {
      if (v6)
      {
        v7 = *(_QWORD *)(a4 + 64);
        if ((_QWORD *)v7 != v6 && *(_DWORD *)(a4 + 8) != 8)
          xmlRegStateAddTrans((_DWORD *)a1, v7, 0, (uint64_t)v6, -1, -1);
      }
      result = 0;
      switch(*(_DWORD *)(a4 + 8))
      {
        case 3:
          *(_DWORD *)(a4 + 8) = 2;
          v9 = *(_QWORD *)(a4 + 48);
          if (v6)
          {
            v10 = (_DWORD *)a1;
            v11 = 0;
            v12 = (uint64_t)v6;
            goto LABEL_48;
          }
          xmlFAGenerateEpsilonTransition(a1, v9, 0);
          v19 = *(_QWORD *)(a4 + 64);
          v20 = *(_QWORD **)(a1 + 40);
          goto LABEL_35;
        case 4:
          *(_DWORD *)(a4 + 8) = 2;
          xmlFAGenerateEpsilonTransition(a1, *(_QWORD *)(a4 + 48), *(_QWORD **)(a4 + 64));
          goto LABEL_34;
        case 5:
          *(_DWORD *)(a4 + 8) = 2;
LABEL_34:
          v19 = *(_QWORD *)(a4 + 64);
          v20 = *(_QWORD **)(a4 + 48);
LABEL_35:
          v21 = a1;
          goto LABEL_51;
        case 8:
          if (!v6)
          {
            v6 = xmlRegNewState(a1);
            xmlRegStatePush(a1, (uint64_t)v6);
          }
          if (*(_DWORD *)(a4 + 12) || *(_QWORD *)(a4 + 56))
          {
            Counter = xmlRegGetCounter(a1);
            if ((Counter & 0x80000000) != 0)
              return 0xFFFFFFFFLL;
            v23 = Counter;
            *(int32x2_t *)(*(_QWORD *)(a1 + 96) + 8 * Counter) = vadd_s32(*(int32x2_t *)(a4 + 12), (int32x2_t)-1);
            xmlFAGenerateCountedEpsilonTransition(a1, *(_QWORD *)(a4 + 64), *(_QWORD **)(a4 + 48), Counter);
            xmlFAGenerateCountedTransition(a1, *(_QWORD *)(a4 + 64), v6, v23);
            if (*(_DWORD *)(a4 + 12))
              goto LABEL_44;
            v24 = (uint64_t *)(a4 + 56);
LABEL_43:
            xmlFAGenerateEpsilonTransition(a1, *v24, v6);
LABEL_44:
            result = 0;
            *(_DWORD *)(a4 + 16) = 0;
            *(_QWORD *)(a4 + 8) = 2;
            *(_QWORD *)(a1 + 40) = v6;
            return result;
          }
          v26 = xmlRegCopyAtom(a1, a4);
          if (v26)
          {
            *(_QWORD *)(v26 + 8) = 2;
            *(_DWORD *)(v26 + 16) = 0;
            v24 = (uint64_t *)(a4 + 48);
            if ((xmlFAGenerateTransitions(a1, *(_QWORD *)(a4 + 48), 0, v26) & 0x80000000) == 0)
            {
              v27 = *(_QWORD *)(a1 + 40);
              v28 = xmlRegGetCounter(a1);
              if ((v28 & 0x80000000) == 0)
              {
                v29 = v28;
                *(int32x2_t *)(*(_QWORD *)(a1 + 96) + 8 * v28) = vadd_s32(*(int32x2_t *)(a4 + 12), (int32x2_t)-1);
                xmlFAGenerateCountedEpsilonTransition(a1, v27, *(_QWORD **)(a4 + 64), v28);
                xmlFAGenerateCountedTransition(a1, v27, v6, v29);
                goto LABEL_43;
              }
            }
          }
          break;
        default:
          return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a4 + 12) || *(_DWORD *)(a4 + 16) || *(_DWORD *)(a4 + 8) != 8)
  {
    if (!a3)
    {
      v15 = xmlRegNewState(a1);
      if (!v15)
        return 0xFFFFFFFFLL;
      v6 = v15;
      xmlRegStatePush(a1, (uint64_t)v15);
    }
    v16 = v6;
    if ((*(_DWORD *)(a4 + 8) & 0xFFFFFFFE) == 4)
    {
      v17 = xmlRegNewState(a1);
      if (!v17)
        return 0xFFFFFFFFLL;
      v16 = v17;
      xmlRegStatePush(a1, (uint64_t)v17);
      xmlFAGenerateEpsilonTransition(a1, (uint64_t)v16, v6);
    }
    if ((xmlRegAtomPush(a1, (_DWORD *)a4) & 0x80000000) == 0)
    {
      if (*(_DWORD *)(a4 + 8) == 8 && !*(_DWORD *)(a4 + 12))
      {
        v25 = *(_DWORD *)(a4 + 16);
        v18 = 1;
        if (v25 >= 1)
        {
          *(_DWORD *)(a4 + 12) = 1;
          v18 = 0;
          if (v25 == 1)
            *(_DWORD *)(a4 + 8) = 3;
        }
      }
      else
      {
        v18 = 1;
      }
      xmlRegStateAddTrans((_DWORD *)a1, a2, a4, (uint64_t)v16, -1, -1);
      result = 0;
      *(_QWORD *)(a1 + 40) = v6;
      switch(*(_DWORD *)(a4 + 8))
      {
        case 3:
          *(_DWORD *)(a4 + 8) = 2;
          goto LABEL_50;
        case 4:
          *(_DWORD *)(a4 + 8) = 2;
          xmlFAGenerateEpsilonTransition(a1, a2, v16);
          goto LABEL_47;
        case 5:
          *(_DWORD *)(a4 + 8) = 2;
LABEL_47:
          v10 = (_DWORD *)a1;
          v9 = (uint64_t)v16;
          v11 = a4;
          v12 = (uint64_t)v16;
LABEL_48:
          xmlRegStateAddTrans(v10, v9, v11, v12, -1, -1);
          return 0;
        case 8:
          if ((v18 & 1) != 0)
            return 0;
LABEL_50:
          v21 = a1;
          v19 = a2;
          v20 = v16;
LABEL_51:
          xmlFAGenerateEpsilonTransition(v21, v19, v20);
          return 0;
        default:
          return result;
      }
    }
    return 0xFFFFFFFFLL;
  }
  if (a3)
    goto LABEL_19;
  v14 = xmlRegNewState(a1);
  if (!v14)
    return 0xFFFFFFFFLL;
  v6 = v14;
  xmlRegStatePush(a1, (uint64_t)v14);
LABEL_19:
  xmlFAGenerateEpsilonTransition(a1, a2, v6);
  *(_QWORD *)(a1 + 40) = v6;
  xmlRegFreeAtom(a4);
  return 0;
}

xmlAutomataStatePtr xmlAutomataNewTransition2(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, void *data)
{
  xmlAutomataStatePtr result;
  xmlAutomataStatePtr v13;
  int v14;
  int v15;
  xmlChar *v16;
  xmlChar *v17;

  result = 0;
  if (am)
  {
    if (from)
    {
      if (token)
      {
        result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
        if (result)
        {
          v13 = result;
          *((_QWORD *)result + 11) = data;
          if (token2 && *token2)
          {
            v14 = strlen((const char *)token2);
            v15 = strlen((const char *)token);
            v16 = (xmlChar *)xmlMallocAtomic(v15 + v14 + 2);
            if (!v16)
              goto LABEL_13;
            v17 = v16;
            memcpy(v16, token, v15);
            v17[v15] = 124;
            memcpy(&v17[v15 + 1], token2, v14);
            v17[v15 + 1 + v14] = 0;
          }
          else
          {
            v17 = xmlStrdup(token);
          }
          *((_QWORD *)v13 + 3) = v17;
          if ((xmlFAGenerateTransitions((uint64_t)am, (uint64_t)from, to, (uint64_t)v13) & 0x80000000) == 0)
          {
            result = to;
            if (!to)
              return (xmlAutomataStatePtr)*((_QWORD *)am + 5);
            return result;
          }
LABEL_13:
          xmlRegFreeAtom((uint64_t)v13);
          return 0;
        }
      }
    }
  }
  return result;
}

xmlAutomataStatePtr xmlAutomataNewNegTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, void *data)
{
  xmlAutomataStatePtr result;
  xmlAutomataStatePtr v13;
  int v14;
  int v15;
  xmlChar *v16;
  xmlChar *v17;
  char __str[16];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v29[32];
  uint64_t v30;

  result = 0;
  v30 = *MEMORY[0x1E0C80C00];
  if (am)
  {
    if (from)
    {
      if (token)
      {
        result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
        if (result)
        {
          v13 = result;
          v28 = 0u;
          memset(v29, 0, 23);
          v26 = 0u;
          v27 = 0u;
          v24 = 0u;
          v25 = 0u;
          v22 = 0u;
          v23 = 0u;
          v20 = 0u;
          v21 = 0u;
          *(_OWORD *)__str = 0u;
          v19 = 0u;
          *((_QWORD *)result + 11) = data;
          *((_DWORD *)result + 10) = 1;
          if (token2 && *token2)
          {
            v14 = strlen((const char *)token2);
            v15 = strlen((const char *)token);
            v16 = (xmlChar *)xmlMallocAtomic(v15 + v14 + 2);
            if (!v16)
              goto LABEL_13;
            v17 = v16;
            memcpy(v16, token, v15);
            v17[v15] = 124;
            memcpy(&v17[v15 + 1], token2, v14);
            v17[v15 + 1 + v14] = 0;
          }
          else
          {
            v17 = xmlStrdup(token);
          }
          *((_QWORD *)v13 + 3) = v17;
          snprintf(__str, 0xC7uLL, "not %s", (const char *)v17);
          v29[23] = 0;
          *((_QWORD *)v13 + 4) = xmlStrdup((const xmlChar *)__str);
          if ((xmlFAGenerateTransitions((uint64_t)am, (uint64_t)from, to, (uint64_t)v13) & 0x80000000) == 0)
          {
            ++*((_DWORD *)am + 27);
            result = to;
            if (!to)
              return (xmlAutomataStatePtr)*((_QWORD *)am + 5);
            return result;
          }
LABEL_13:
          xmlRegFreeAtom((uint64_t)v13);
          return 0;
        }
      }
    }
  }
  return result;
}

xmlAutomataStatePtr xmlAutomataNewCountTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, int min, int max, void *data)
{
  xmlAutomataStatePtr result;
  xmlAutomataStatePtr v17;
  xmlChar *v18;
  xmlChar *v19;
  int v20;
  unsigned int Counter;
  int v22;
  int *v23;
  int v24;
  int v25;

  result = 0;
  if (!am)
    return result;
  if (!from)
    return result;
  if (!token)
    return result;
  if (min < 0)
    return result;
  result = 0;
  if (max < min)
    return result;
  if (max < 1)
    return result;
  result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
  if (!result)
    return result;
  v17 = result;
  if (token2 && *token2)
  {
    v24 = strlen((const char *)token2);
    v25 = strlen((const char *)token);
    v18 = (xmlChar *)xmlMallocAtomic(v25 + v24 + 2);
    if (!v18)
    {
LABEL_23:
      xmlRegFreeAtom((uint64_t)v17);
      return 0;
    }
    v19 = v18;
    memcpy(v18, token, v25);
    v19[v25] = 124;
    memcpy(&v19[v25 + 1], token2, v24);
    v19[v25 + 1 + v24] = 0;
  }
  else
  {
    v19 = xmlStrdup(token);
  }
  *((_QWORD *)v17 + 3) = v19;
  *((_QWORD *)v17 + 11) = data;
  if (min)
    v20 = min;
  else
    v20 = 1;
  *((_DWORD *)v17 + 3) = v20;
  *((_DWORD *)v17 + 4) = max;
  Counter = xmlRegGetCounter((uint64_t)am);
  if ((Counter & 0x80000000) != 0)
    goto LABEL_23;
  v22 = Counter;
  v23 = (int *)(*((_QWORD *)am + 12) + 8 * Counter);
  *v23 = min;
  v23[1] = max;
  if (!to)
  {
    to = (xmlAutomataStatePtr)xmlRegNewState((uint64_t)am);
    xmlRegStatePush((uint64_t)am, (uint64_t)to);
  }
  xmlRegStateAddTrans(am, (uint64_t)from, (uint64_t)v17, (uint64_t)to, v22, -1);
  xmlRegAtomPush((uint64_t)am, v17);
  *((_QWORD *)am + 5) = to;
  if (!min)
  {
    if (to)
      xmlRegStateAddTrans(am, (uint64_t)from, 0, (uint64_t)to, -1, -1);
  }
  return to;
}

uint64_t xmlRegGetCounter(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = *(int *)(a1 + 88);
  if (!(_DWORD)v2)
  {
    *(_DWORD *)(a1 + 88) = 4;
    v3 = xmlMalloc(0x20uLL);
    *(_QWORD *)(a1 + 96) = v3;
    if (v3)
      goto LABEL_8;
    xmlRegexpErrMemory(a1, (const xmlChar *)"allocating counter");
    *(_DWORD *)(a1 + 88) = 0;
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 92) >= (int)v2)
  {
    *(_DWORD *)(a1 + 88) = 2 * v2;
    v3 = xmlRealloc(*(void **)(a1 + 96), 16 * v2);
    if (v3)
    {
      *(_QWORD *)(a1 + 96) = v3;
      goto LABEL_8;
    }
    xmlRegexpErrMemory(a1, (const xmlChar *)"allocating counter");
    *(int *)(a1 + 88) /= 2;
    return 0xFFFFFFFFLL;
  }
  v3 = *(_QWORD **)(a1 + 96);
LABEL_8:
  v4 = *(int *)(a1 + 92);
  v3[v4] = -1;
  *(_DWORD *)(a1 + 92) = v4 + 1;
  return v4;
}

_DWORD *xmlRegStateAddTrans(_DWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _DWORD *v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  int v19;
  char *v20;
  int v21;
  uint64_t v22;

  v6 = result;
  if (!a2)
  {
    result[4] = 1450;
    v18 = "add state: state is NULL";
    return xmlRegexpErrCompile((uint64_t)result, (const xmlChar *)v18);
  }
  if (!a4)
  {
    result[4] = 1450;
    v18 = "add state: target is NULL";
    return xmlRegexpErrCompile((uint64_t)result, (const xmlChar *)v18);
  }
  v12 = *(unsigned int *)(a2 + 24);
  if ((int)v12 < 1)
  {
LABEL_10:
    v16 = *(int *)(a2 + 20);
    if ((_DWORD)v16)
    {
      if ((int)v12 >= (int)v16)
      {
        *(_DWORD *)(a2 + 20) = 2 * v16;
        v17 = (char *)xmlRealloc(*(void **)(a2 + 32), 48 * v16);
        if (!v17)
        {
          result = xmlRegexpErrMemory((uint64_t)v6, (const xmlChar *)"adding transition");
          *(int *)(a2 + 20) /= 2;
          return result;
        }
        *(_QWORD *)(a2 + 32) = v17;
      }
      else
      {
        v17 = *(char **)(a2 + 32);
      }
    }
    else
    {
      *(_DWORD *)(a2 + 20) = 8;
      v17 = (char *)xmlMalloc(0xC0uLL);
      *(_QWORD *)(a2 + 32) = v17;
      if (!v17)
      {
        result = xmlRegexpErrMemory((uint64_t)v6, (const xmlChar *)"adding transition");
        *(_DWORD *)(a2 + 20) = 0;
        return result;
      }
    }
    v19 = *(_DWORD *)(a2 + 24);
    v20 = &v17[24 * v19];
    *(_QWORD *)v20 = a3;
    *((_DWORD *)v20 + 2) = *(_DWORD *)(a4 + 16);
    *((_DWORD *)v20 + 3) = a5;
    *((_DWORD *)v20 + 4) = a6;
    *((_DWORD *)v20 + 5) = 0;
    *(_DWORD *)(a2 + 24) = v19 + 1;
    v21 = *(_DWORD *)(a2 + 16);
    v22 = *(int *)(a4 + 40);
    if ((_DWORD)v22)
    {
      if (*(_DWORD *)(a4 + 44) >= (int)v22)
      {
        *(_DWORD *)(a4 + 40) = 2 * v22;
        result = xmlRealloc(*(void **)(a4 + 48), 8 * v22);
        if (!result)
        {
          result = xmlRegexpErrMemory((uint64_t)v6, (const xmlChar *)"adding transition");
          *(int *)(a4 + 40) /= 2;
          return result;
        }
        *(_QWORD *)(a4 + 48) = result;
      }
      else
      {
        result = *(_DWORD **)(a4 + 48);
      }
    }
    else
    {
      *(_DWORD *)(a4 + 40) = 8;
      result = xmlMalloc(0x20uLL);
      *(_QWORD *)(a4 + 48) = result;
      if (!result)
      {
        result = xmlRegexpErrMemory((uint64_t)v6, (const xmlChar *)"adding transition");
        *(_DWORD *)(a4 + 40) = 0;
        return result;
      }
    }
    result[(*(_DWORD *)(a4 + 44))++] = v21;
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 32);
    v14 = v12 + 1;
    while (1)
    {
      v15 = v14 - 2;
      if (*(_QWORD *)(v13 + 24 * (v14 - 2)) == a3
        && *(_DWORD *)(v13 + 24 * v15 + 8) == *(_DWORD *)(a4 + 16)
        && *(_DWORD *)(v13 + 24 * v15 + 12) == a5
        && *(_DWORD *)(v13 + 24 * v15 + 16) == a6)
      {
        break;
      }
      if ((unint64_t)--v14 <= 1)
        goto LABEL_10;
    }
  }
  return result;
}

uint64_t xmlRegAtomPush(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(int *)(a1 + 56);
  if (!(_DWORD)v4)
  {
    *(_DWORD *)(a1 + 56) = 4;
    v5 = xmlMalloc(0x20uLL);
    *(_QWORD *)(a1 + 64) = v5;
    if (v5)
      goto LABEL_8;
    xmlRegexpErrMemory(a1, (const xmlChar *)"pushing atom");
    *(_DWORD *)(a1 + 56) = 0;
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(a1 + 60) >= (int)v4)
  {
    *(_DWORD *)(a1 + 56) = 2 * v4;
    v5 = xmlRealloc(*(void **)(a1 + 64), 16 * v4);
    if (v5)
    {
      *(_QWORD *)(a1 + 64) = v5;
      goto LABEL_8;
    }
    xmlRegexpErrMemory(a1, (const xmlChar *)"allocating counter");
    *(int *)(a1 + 56) /= 2;
    return 0xFFFFFFFFLL;
  }
  v5 = *(_QWORD **)(a1 + 64);
LABEL_8:
  v6 = 0;
  v7 = *(int *)(a1 + 60);
  *a2 = v7;
  *(_DWORD *)(a1 + 60) = v7 + 1;
  v5[v7] = a2;
  return v6;
}

_DWORD *xmlFAGenerateEpsilonTransition(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v3;

  v3 = a3;
  if (!a3)
  {
    v3 = xmlRegNewState(a1);
    xmlRegStatePush(a1, (uint64_t)v3);
    *(_QWORD *)(a1 + 40) = v3;
  }
  return xmlRegStateAddTrans((_DWORD *)a1, a2, 0, (uint64_t)v3, -1, -1);
}

xmlAutomataStatePtr xmlAutomataNewCountTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, int min, int max, void *data)
{
  xmlAutomataStatePtr result;
  xmlAutomataStatePtr v15;
  int v16;
  unsigned int Counter;
  int v18;
  int *v19;

  result = 0;
  if (am)
  {
    if (from)
    {
      if (token)
      {
        if ((min & 0x80000000) == 0)
        {
          result = 0;
          if (max >= min && max >= 1)
          {
            result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
            if (result)
            {
              v15 = result;
              *((_QWORD *)result + 3) = xmlStrdup(token);
              *((_QWORD *)v15 + 11) = data;
              if (min)
                v16 = min;
              else
                v16 = 1;
              *((_DWORD *)v15 + 3) = v16;
              *((_DWORD *)v15 + 4) = max;
              Counter = xmlRegGetCounter((uint64_t)am);
              if ((Counter & 0x80000000) != 0)
              {
                xmlRegFreeAtom((uint64_t)v15);
                return 0;
              }
              else
              {
                v18 = Counter;
                v19 = (int *)(*((_QWORD *)am + 12) + 8 * Counter);
                *v19 = min;
                v19[1] = max;
                if (!to)
                {
                  to = (xmlAutomataStatePtr)xmlRegNewState((uint64_t)am);
                  xmlRegStatePush((uint64_t)am, (uint64_t)to);
                }
                xmlRegStateAddTrans(am, (uint64_t)from, (uint64_t)v15, (uint64_t)to, v18, -1);
                xmlRegAtomPush((uint64_t)am, v15);
                *((_QWORD *)am + 5) = to;
                if (!min)
                {
                  if (to)
                    xmlRegStateAddTrans(am, (uint64_t)from, 0, (uint64_t)to, -1, -1);
                }
                return to;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

xmlAutomataStatePtr xmlAutomataNewOnceTrans2(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, const xmlChar *token2, int min, int max, void *data)
{
  xmlAutomataStatePtr result;
  xmlAutomataStatePtr v17;
  xmlChar *v18;
  xmlChar *v19;
  unsigned int Counter;
  int v21;
  int v22;
  int v23;

  result = 0;
  if (!am)
    return result;
  if (!from)
    return result;
  if (!token)
    return result;
  if (min < 1)
    return result;
  if (max < min)
    return result;
  result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
  if (!result)
    return result;
  v17 = result;
  if (token2 && *token2)
  {
    v22 = strlen((const char *)token2);
    v23 = strlen((const char *)token);
    v18 = (xmlChar *)xmlMallocAtomic(v23 + v22 + 2);
    if (!v18)
    {
LABEL_16:
      xmlRegFreeAtom((uint64_t)v17);
      return 0;
    }
    v19 = v18;
    memcpy(v18, token, v23);
    v19[v23] = 124;
    memcpy(&v19[v23 + 1], token2, v22);
    v19[v23 + 1 + v22] = 0;
  }
  else
  {
    v19 = xmlStrdup(token);
  }
  *((_QWORD *)v17 + 3) = v19;
  *((_QWORD *)v17 + 11) = data;
  *((_DWORD *)v17 + 2) = 6;
  *((_DWORD *)v17 + 3) = min;
  *((_DWORD *)v17 + 4) = max;
  Counter = xmlRegGetCounter((uint64_t)am);
  if ((Counter & 0x80000000) != 0)
    goto LABEL_16;
  v21 = Counter;
  *(_QWORD *)(*((_QWORD *)am + 12) + 8 * Counter) = 0x100000001;
  if (!to)
  {
    to = (xmlAutomataStatePtr)xmlRegNewState((uint64_t)am);
    xmlRegStatePush((uint64_t)am, (uint64_t)to);
  }
  xmlRegStateAddTrans(am, (uint64_t)from, (uint64_t)v17, (uint64_t)to, v21, -1);
  xmlRegAtomPush((uint64_t)am, v17);
  *((_QWORD *)am + 5) = to;
  return to;
}

xmlAutomataStatePtr xmlAutomataNewOnceTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, const xmlChar *token, int min, int max, void *data)
{
  xmlAutomataStatePtr result;
  xmlAutomataStatePtr v15;
  unsigned int Counter;
  int v17;

  result = 0;
  if (am)
  {
    if (from)
    {
      if (token)
      {
        if (min >= 1 && max >= min)
        {
          result = (xmlAutomataStatePtr)xmlRegNewAtom((uint64_t)am, 5);
          if (result)
          {
            v15 = result;
            *((_QWORD *)result + 3) = xmlStrdup(token);
            *((_QWORD *)v15 + 11) = data;
            *((_DWORD *)v15 + 2) = 6;
            *((_DWORD *)v15 + 3) = min;
            *((_DWORD *)v15 + 4) = max;
            Counter = xmlRegGetCounter((uint64_t)am);
            if ((Counter & 0x80000000) != 0)
            {
              xmlRegFreeAtom((uint64_t)v15);
              return 0;
            }
            else
            {
              v17 = Counter;
              *(_QWORD *)(*((_QWORD *)am + 12) + 8 * Counter) = 0x100000001;
              if (!to)
              {
                to = (xmlAutomataStatePtr)xmlRegNewState((uint64_t)am);
                xmlRegStatePush((uint64_t)am, (uint64_t)to);
              }
              xmlRegStateAddTrans(am, (uint64_t)from, (uint64_t)v15, (uint64_t)to, v17, -1);
              xmlRegAtomPush((uint64_t)am, v15);
              *((_QWORD *)am + 5) = to;
              return to;
            }
          }
        }
      }
    }
  }
  return result;
}

xmlAutomataStatePtr xmlAutomataNewState(xmlAutomataPtr am)
{
  xmlAutomataState *v2;

  if (!am)
    return 0;
  v2 = (xmlAutomataState *)xmlRegNewState((uint64_t)am);
  xmlRegStatePush((uint64_t)am, (uint64_t)v2);
  return v2;
}

xmlAutomataStatePtr xmlAutomataNewEpsilon(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to)
{
  xmlAutomataStatePtr result;

  result = 0;
  if (am && from)
  {
    xmlFAGenerateEpsilonTransition((uint64_t)am, (uint64_t)from, to);
    result = to;
    if (!to)
      return (xmlAutomataStatePtr)*((_QWORD *)am + 5);
  }
  return result;
}

xmlAutomataStatePtr xmlAutomataNewAllTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int lax)
{
  xmlAutomataStatePtr result;
  int v9;
  _QWORD *v10;
  int v11;

  result = 0;
  if (am && from)
  {
    if (to)
    {
      if (lax)
        v9 = 1193047;
      else
        v9 = 1193046;
      xmlRegStateAddTrans(am, (uint64_t)from, 0, (uint64_t)to, -1, v9);
      return to;
    }
    else
    {
      v10 = xmlRegNewState((uint64_t)am);
      xmlRegStatePush((uint64_t)am, (uint64_t)v10);
      *((_QWORD *)am + 5) = v10;
      if (lax)
        v11 = 1193047;
      else
        v11 = 1193046;
      xmlRegStateAddTrans(am, (uint64_t)from, 0, (uint64_t)v10, -1, v11);
      return (xmlAutomataStatePtr)*((_QWORD *)am + 5);
    }
  }
  return result;
}

int xmlAutomataNewCounter(xmlAutomataPtr am, int min, int max)
{
  int result;
  int *v7;

  if (!am)
    return -1;
  result = xmlRegGetCounter((uint64_t)am);
  if (result < 0)
    return -1;
  v7 = (int *)(*((_QWORD *)am + 12) + 8 * result);
  *v7 = min;
  v7[1] = max;
  return result;
}

xmlAutomataStatePtr xmlAutomataNewCountedTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int counter)
{
  xmlAutomataStatePtr result;

  result = 0;
  if (am && from && (counter & 0x80000000) == 0)
  {
    xmlFAGenerateCountedEpsilonTransition((uint64_t)am, (uint64_t)from, to, counter);
    result = to;
    if (!to)
      return (xmlAutomataStatePtr)*((_QWORD *)am + 5);
  }
  return result;
}

_DWORD *xmlFAGenerateCountedEpsilonTransition(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  _QWORD *v5;

  v5 = a3;
  if (!a3)
  {
    v5 = xmlRegNewState(a1);
    xmlRegStatePush(a1, (uint64_t)v5);
    *(_QWORD *)(a1 + 40) = v5;
  }
  return xmlRegStateAddTrans((_DWORD *)a1, a2, 0, (uint64_t)v5, a4, -1);
}

xmlAutomataStatePtr xmlAutomataNewCounterTrans(xmlAutomataPtr am, xmlAutomataStatePtr from, xmlAutomataStatePtr to, int counter)
{
  xmlAutomataStatePtr result;

  result = 0;
  if (am && from && (counter & 0x80000000) == 0)
  {
    xmlFAGenerateCountedTransition((uint64_t)am, (uint64_t)from, to, counter);
    result = to;
    if (!to)
      return (xmlAutomataStatePtr)*((_QWORD *)am + 5);
  }
  return result;
}

_DWORD *xmlFAGenerateCountedTransition(uint64_t a1, uint64_t a2, _QWORD *a3, int a4)
{
  _QWORD *v5;

  v5 = a3;
  if (!a3)
  {
    v5 = xmlRegNewState(a1);
    xmlRegStatePush(a1, (uint64_t)v5);
    *(_QWORD *)(a1 + 40) = v5;
  }
  return xmlRegStateAddTrans((_DWORD *)a1, a2, 0, (uint64_t)v5, -1, a4);
}

xmlRegexpPtr xmlAutomataCompile(xmlAutomataPtr am)
{
  if (!am || *((_DWORD *)am + 4))
    return 0;
  xmlFAEliminateEpsilonTransitions((uint64_t)am);
  return (xmlRegexpPtr)xmlRegEpxFromParse((uint64_t)am);
}

int xmlAutomataIsDeterminist(xmlAutomataPtr am)
{
  if (am)
    return xmlFAComputesDeterminism(am);
  else
    return -1;
}

void *xmlFARegExecSaveInputString(uint64_t a1, xmlChar *cur, uint64_t a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  void *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;

  v6 = *(int *)(a1 + 72);
  if ((_DWORD)v6)
  {
    if (*(_DWORD *)(a1 + 76) + 1 < (int)v6)
    {
LABEL_6:
      result = xmlStrdup(cur);
      v10 = *(_QWORD *)(a1 + 104);
      v11 = *(int *)(a1 + 76);
      v12 = (_QWORD *)(v10 + 16 * v11);
      *v12 = result;
      v12[1] = a3;
      *(_DWORD *)(a1 + 76) = ++v11;
      v13 = (_QWORD *)(v10 + 16 * v11);
      *v13 = 0;
      v13[1] = 0;
      return result;
    }
    *(_DWORD *)(a1 + 72) = 2 * v6;
    v7 = xmlRealloc(*(void **)(a1 + 104), 32 * v6);
    if (v7)
    {
      *(_QWORD *)(a1 + 104) = v7;
      goto LABEL_6;
    }
    result = xmlRegexpErrMemory(0, (const xmlChar *)"pushing input string");
    *(int *)(a1 + 72) /= 2;
  }
  else
  {
    *(_DWORD *)(a1 + 72) = 4;
    v8 = xmlMalloc(0x40uLL);
    *(_QWORD *)(a1 + 104) = v8;
    if (v8)
      goto LABEL_6;
    result = xmlRegexpErrMemory(0, (const xmlChar *)"pushing input string");
    *(_DWORD *)(a1 + 72) = 0;
  }
  return result;
}

uint64_t xmlRegStrEqualWildcard(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  _BYTE *v5;
  int v6;

  if (a1 == a2)
    return 1;
  v2 = 0;
  if (a1 && a2)
  {
    v3 = *a2;
    while (1)
    {
      if (*a1 == v3)
      {
        v4 = *++a2;
        v3 = v4;
        v5 = a1;
      }
      else
      {
        if (v3 == 42)
          v5 = a2;
        else
          v5 = a1;
        if (v3 == 42)
          a2 = a1;
        v3 = *a2;
        if (!*a2 || *v5 != 42)
          return 0;
        while (v3 != 124)
        {
          v6 = *++a2;
          v3 = v6;
          if (!v6)
          {
            a1 = v5 + 1;
            return *a1 == 0;
          }
        }
      }
      a1 = v5 + 1;
      if (!v3)
        return *a1 == 0;
    }
  }
  return v2;
}

void xmlFARegExecSave(uint64_t a1)
{
  int v1;
  uint64_t v3;
  char *v4;
  char *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;

  v1 = *(_DWORD *)(a1 + 144);
  if (v1 > 10000000)
    return;
  *(_DWORD *)(a1 + 144) = v1 + 1;
  v3 = *(int *)(a1 + 48);
  if (!(_DWORD)v3)
  {
    *(_DWORD *)(a1 + 48) = 4;
    v5 = (char *)xmlMalloc(0x60uLL);
    *(_QWORD *)(a1 + 56) = v5;
    if (!v5)
    {
      xmlRegexpErrMemory(0, (const xmlChar *)"saving regexp");
      *(_DWORD *)(a1 + 48) = 0;
      return;
    }
    v6 = *(_DWORD *)(a1 + 48);
LABEL_8:
    bzero(v5, 24 * v6);
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 52) >= (int)v3)
  {
    *(_DWORD *)(a1 + 48) = 2 * v3;
    v4 = (char *)xmlRealloc(*(void **)(a1 + 56), 48 * v3);
    if (!v4)
    {
      xmlRegexpErrMemory(0, (const xmlChar *)"saving regexp");
      *(int *)(a1 + 48) /= 2;
      return;
    }
    *(_QWORD *)(a1 + 56) = v4;
    v5 = &v4[24 * (int)v3];
    v6 = *(_DWORD *)(a1 + 48) - v3;
    goto LABEL_8;
  }
LABEL_9:
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_DWORD *)(a1 + 52);
  v9 = v7 + 24 * v8;
  *(_QWORD *)v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_DWORD *)(a1 + 40) + 1;
  *(_DWORD *)(v9 + 8) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(v9 + 12) = v10;
  v11 = *(unsigned int *)(*(_QWORD *)(a1 + 8) + 40);
  if ((int)v11 >= 1)
  {
    v12 = *(void **)(v7 + 24 * v8 + 16);
    if (!v12)
    {
      v12 = xmlMalloc(4 * v11);
      *(_QWORD *)(*(_QWORD *)(a1 + 56) + 24 * *(int *)(a1 + 52) + 16) = v12;
      if (!v12)
      {
        xmlRegexpErrMemory(0, (const xmlChar *)"saving regexp");
        *(_DWORD *)a1 = -5;
        return;
      }
      LODWORD(v11) = *(_DWORD *)(*(_QWORD *)(a1 + 8) + 40);
    }
    memcpy(v12, *(const void **)(a1 + 64), 4 * (int)v11);
    v8 = *(_DWORD *)(a1 + 52);
  }
  *(_DWORD *)(a1 + 52) = v8 + 1;
}

int *xmlFARegExecRollBack(int *result)
{
  int *v1;
  int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const void *v8;
  int v9;

  v1 = result;
  v2 = result[13];
  if (v2 <= 0)
  {
    v9 = -1;
LABEL_8:
    *v1 = v9;
    return result;
  }
  v3 = v2 - 1;
  result[13] = v3;
  v4 = *((_QWORD *)result + 7);
  v5 = v4 + 24 * v3;
  *((_QWORD *)result + 4) = *(_QWORD *)v5;
  v6 = *(_DWORD *)(v5 + 8);
  LODWORD(v5) = *(_DWORD *)(v5 + 12);
  result[20] = v6;
  result[10] = v5;
  v7 = *(unsigned int *)(*((_QWORD *)result + 1) + 40);
  if ((int)v7 < 1)
    return result;
  v8 = *(const void **)(v4 + 24 * v3 + 16);
  if (!v8)
  {
    result = (int *)fwrite("exec save: allocation failed", 0x1CuLL, 1uLL, (FILE *)*MEMORY[0x1E0C80C10]);
    v9 = -6;
    goto LABEL_8;
  }
  result = (int *)*((_QWORD *)result + 8);
  if (result)
    return (int *)memcpy(result, v8, 4 * v7);
  return result;
}

FILE *xmlRegPrintAtomType(FILE *__stream, int a2)
{
  FILE *v2;
  const char *v3;
  size_t v4;

  v2 = __stream;
  switch(a2)
  {
    case 100:
      v3 = "LETTER ";
      goto LABEL_51;
    case 101:
      v3 = "LETTER_UPPERCASE ";
      goto LABEL_8;
    case 102:
      v3 = "LETTER_LOWERCASE ";
      goto LABEL_8;
    case 103:
      v3 = "LETTER_TITLECASE ";
LABEL_8:
      v4 = 17;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 104:
      v3 = "LETTER_MODIFIER ";
      goto LABEL_36;
    case 105:
      v3 = "LETTER_OTHERS ";
      goto LABEL_43;
    case 106:
      v3 = "MARK ";
      v4 = 5;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 107:
      v3 = "MARK_NONSPACING ";
      goto LABEL_36;
    case 108:
      v3 = "MARK_SPACECOMBINING ";
      v4 = 20;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 109:
      v3 = "MARK_ENCLOSING ";
      goto LABEL_26;
    case 110:
      v3 = "NUMBER ";
      goto LABEL_51;
    case 111:
      v3 = "NUMBER_DECIMAL ";
      goto LABEL_26;
    case 112:
      v3 = "NUMBER_LETTER ";
      goto LABEL_43;
    case 113:
      v3 = "NUMBER_OTHERS ";
      goto LABEL_43;
    case 114:
      v3 = "PUNCT ";
      goto LABEL_46;
    case 115:
      v3 = "PUNCT_CONNECTOR ";
      goto LABEL_36;
    case 116:
      v3 = "PUNCT_DASH ";
      goto LABEL_62;
    case 117:
      v3 = "PUNCT_OPEN ";
      goto LABEL_62;
    case 118:
      v3 = "PUNCT_CLOSE ";
      goto LABEL_66;
    case 119:
      v3 = "PUNCT_INITQUOTE ";
      goto LABEL_36;
    case 120:
      v3 = "PUNCT_FINQUOTE ";
LABEL_26:
      v4 = 15;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 121:
      v3 = "PUNCT_OTHERS ";
      goto LABEL_41;
    case 122:
      v3 = "SEPAR ";
      goto LABEL_46;
    case 123:
      v3 = "SEPAR_SPACE ";
      goto LABEL_66;
    case 124:
      v3 = "SEPAR_LINE ";
      goto LABEL_62;
    case 125:
      v3 = "SEPAR_PARA ";
LABEL_62:
      v4 = 11;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 126:
      v3 = "SYMBOL ";
LABEL_51:
      v4 = 7;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 127:
      v3 = "SYMBOL_MATH ";
LABEL_66:
      v4 = 12;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 128:
      v3 = "SYMBOL_CURRENCY ";
      goto LABEL_36;
    case 129:
      v3 = "SYMBOL_MODIFIER ";
LABEL_36:
      v4 = 16;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 130:
      v3 = "SYMBOL_OTHERS ";
      goto LABEL_43;
    case 131:
      v3 = "OTHER ";
      goto LABEL_46;
    case 132:
      v3 = "OTHER_CONTROL ";
      goto LABEL_43;
    case 133:
      v3 = "OTHER_FORMAT ";
LABEL_41:
      v4 = 13;
      return (FILE *)fwrite(v3, v4, 1uLL, v2);
    case 134:
      v3 = "OTHER_PRIVATE ";
LABEL_43:
      v4 = 14;
      break;
    case 135:
      v3 = "OTHER_NA ";
LABEL_64:
      v4 = 9;
      break;
    case 136:
      v3 = "BLOCK ";
LABEL_46:
      v4 = 6;
      break;
    default:
      switch(a2)
      {
        case 1:
          v3 = "epsilon ";
          goto LABEL_60;
        case 2:
          v3 = "charval ";
          goto LABEL_60;
        case 3:
          v3 = "ranges ";
          goto LABEL_51;
        case 4:
          v3 = "subexpr ";
          goto LABEL_60;
        case 5:
          v3 = "string ";
          goto LABEL_51;
        case 6:
          v3 = "anychar ";
          goto LABEL_60;
        case 7:
          v3 = "anyspace ";
          goto LABEL_64;
        case 8:
          v3 = "notspace ";
          goto LABEL_64;
        case 9:
          v3 = "initname ";
          goto LABEL_64;
        case 10:
          v3 = "notinitname ";
          goto LABEL_66;
        case 11:
          v3 = "namechar ";
          goto LABEL_64;
        case 12:
          v3 = "notnamechar ";
          goto LABEL_66;
        case 13:
          v3 = "decimal ";
LABEL_60:
          v4 = 8;
          return (FILE *)fwrite(v3, v4, 1uLL, v2);
        case 14:
          v3 = "notdecimal ";
          goto LABEL_62;
        case 15:
          v3 = "realchar ";
          goto LABEL_64;
        case 16:
          v3 = "notrealchar ";
          goto LABEL_66;
        default:
          return __stream;
      }
  }
  return (FILE *)fwrite(v3, v4, 1uLL, v2);
}

uint64_t xmlFAParseBranch(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 40);
  if (!xmlFAParsePiece(a1))
    return (uint64_t)xmlFAGenerateEpsilonTransition(a1, v4, a2);
  do
  {
    v5 = **(unsigned __int8 **)(a1 + 8);
    if (!**(_BYTE **)(a1 + 8) || v5 == 124 || v5 == 41)
      v6 = a2;
    else
      v6 = 0;
    result = xmlFAGenerateTransitions(a1, v4, v6, *(_QWORD *)(a1 + 48));
    if ((result & 0x80000000) != 0)
      break;
    v4 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 48) = 0;
    if (*(_DWORD *)(a1 + 16))
      break;
    result = xmlFAParsePiece(a1);
  }
  while ((_DWORD)result);
  return result;
}

uint64_t xmlFAParsePiece(uint64_t a1)
{
  int v2;
  BOOL v3;
  BOOL v4;
  unsigned __int8 *v5;
  unsigned int v6;
  const char *v8;
  _OWORD *v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _OWORD *v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  int v21;
  int v22;
  _BYTE *v23;
  int v24;
  _BYTE *v25;
  _DWORD *v26;
  int v27;
  int len[2];

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)len = 0;
  v2 = xmlStringCurrentChar(0, *(const xmlChar **)(a1 + 8), &len[1]);
  v3 = v2 > 0x3F || ((1 << v2) & 0x80004F0000000001) == 0;
  if (!v3
    || ((v2 - 91) <= 0x21 ? (v4 = ((1 << (v2 - 91)) & 0x200000007) == 0) : (v4 = 1),
        !v4 || v2 < 1))
  {
    v5 = *(unsigned __int8 **)(a1 + 8);
    v6 = *v5;
    if (v6 > 0x5A)
    {
      if (v6 != 91)
      {
        if (v6 != 92)
          return 0;
        goto LABEL_16;
      }
      *(_QWORD *)(a1 + 8) = v5 + 1;
      v9 = xmlRegNewAtom(a1, 3);
      *(_QWORD *)(a1 + 48) = v9;
      if (!v9)
        goto LABEL_34;
      xmlFAParseCharGroup((_DWORD *)a1);
      v10 = *(_BYTE **)(a1 + 8);
      if (*v10 == 93)
      {
        v11 = v10 + 1;
LABEL_27:
        *(_QWORD *)(a1 + 8) = v11;
        goto LABEL_33;
      }
      *(_DWORD *)(a1 + 16) = 1450;
      v8 = "xmlFAParseCharClass: ']' expected";
    }
    else
    {
      if (v6 != 40)
      {
        if (v6 != 46)
          return 0;
LABEL_16:
        xmlFAParseCharClassEsc((_DWORD *)a1);
        goto LABEL_33;
      }
      *(_QWORD *)(a1 + 8) = v5 + 1;
      if (*(int *)(a1 + 116) < 50)
      {
        xmlFAGenerateEpsilonTransition(a1, *(_QWORD *)(a1 + 40), 0);
        v12 = *(_QWORD *)(a1 + 40);
        xmlFAGenerateEpsilonTransition(a1, v12, 0);
        v13 = *(_QWORD *)(a1 + 32);
        v14 = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)(a1 + 48) = 0;
        ++*(_DWORD *)(a1 + 116);
        xmlFAParseRegExp(a1, 0);
        --*(_DWORD *)(a1 + 116);
        v15 = *(_BYTE **)(a1 + 8);
        if (*v15 == 41)
        {
          *(_QWORD *)(a1 + 8) = v15 + 1;
        }
        else
        {
          *(_DWORD *)(a1 + 16) = 1450;
          xmlRegexpErrCompile(a1, (const xmlChar *)"xmlFAParseAtom: expecting ')'");
        }
        v17 = xmlRegNewAtom(a1, 4);
        *(_QWORD *)(a1 + 48) = v17;
        if (!v17)
          goto LABEL_34;
        v17[6] = v14;
        v17[7] = v12;
        v17[8] = *(_QWORD *)(a1 + 40);
        *(_QWORD *)(a1 + 32) = v13;
LABEL_33:
        if (*(_QWORD *)(a1 + 48))
          goto LABEL_35;
        goto LABEL_34;
      }
      *(_DWORD *)(a1 + 16) = 1450;
      v8 = "xmlFAParseAtom: maximum nesting depth exceeded";
    }
    xmlRegexpErrCompile(a1, (const xmlChar *)v8);
    goto LABEL_33;
  }
  v16 = xmlRegNewAtom(a1, 2);
  *(_QWORD *)(a1 + 48) = v16;
  if (v16)
  {
    *(_DWORD *)(*(_QWORD *)(a1 + 48) + 44) = xmlStringCurrentChar(0, *(const xmlChar **)(a1 + 8), len);
    v11 = (_BYTE *)(*(_QWORD *)(a1 + 8) + len[0]);
    goto LABEL_27;
  }
LABEL_34:
  *(_DWORD *)(a1 + 16) = 1450;
  xmlRegexpErrCompile(a1, (const xmlChar *)"internal: no atom generated");
LABEL_35:
  v18 = *(unsigned __int8 **)(a1 + 8);
  v19 = *v18;
  if ((v19 - 42) < 2)
    goto LABEL_38;
  if (v19 == 123)
  {
    *(_QWORD *)(a1 + 8) = v18 + 1;
    v22 = xmlFAParseQuantExact(a1);
    if (v22 < 0)
    {
      *(_DWORD *)(a1 + 16) = 1450;
      xmlRegexpErrCompile(a1, (const xmlChar *)"Improper quantifier");
      v22 = 0;
    }
    v23 = *(_BYTE **)(a1 + 8);
    if (*v23 == 44)
    {
      *(_QWORD *)(a1 + 8) = v23 + 1;
      if (v23[1] == 125)
      {
        v24 = 0x7FFFFFFF;
        goto LABEL_56;
      }
      v24 = xmlFAParseQuantExact(a1);
      if ((v24 & 0x80000000) == 0)
      {
LABEL_56:
        v25 = *(_BYTE **)(a1 + 8);
        if (*v25 == 125)
        {
          *(_QWORD *)(a1 + 8) = v25 + 1;
        }
        else
        {
          *(_DWORD *)(a1 + 16) = 1450;
          xmlRegexpErrCompile(a1, (const xmlChar *)"Unterminated quantifier");
        }
        v26 = *(_DWORD **)(a1 + 48);
        if (v26)
        {
          if (v24)
            v27 = v24;
          else
            v27 = v22;
          v26[2] = 8;
          v26[3] = v22;
          v26[4] = v27;
        }
        return 1;
      }
      *(_DWORD *)(a1 + 16) = 1450;
      xmlRegexpErrCompile(a1, (const xmlChar *)"Improper quantifier");
    }
    v24 = 0;
    goto LABEL_56;
  }
  if (v19 == 63)
  {
LABEL_38:
    v20 = *(_QWORD *)(a1 + 48);
    if (v20)
    {
      switch(v19)
      {
        case '?':
          v21 = 3;
          goto LABEL_50;
        case '+':
          v21 = 5;
          goto LABEL_50;
        case '*':
          v21 = 4;
LABEL_50:
          *(_DWORD *)(v20 + 8) = v21;
          break;
      }
    }
    *(_QWORD *)(a1 + 8) = v18 + 1;
  }
  return 1;
}

_DWORD *xmlFAParseCharGroup(_DWORD *result)
{
  uint64_t v1;
  int v2;
  unsigned __int8 *v3;
  int v4;
  _BYTE *v5;

  v1 = (uint64_t)result;
  v2 = result[5];
  v3 = (unsigned __int8 *)*((_QWORD *)result + 1);
  v4 = *v3;
  if (v4 != 94)
    goto LABEL_4;
  *((_QWORD *)result + 1) = v3 + 1;
  result[5] = v2 == 0;
  result = (_DWORD *)xmlFAParsePosCharGroup((uint64_t)result);
  *(_DWORD *)(v1 + 20) = v2;
  while (1)
  {
    v3 = *(unsigned __int8 **)(v1 + 8);
    v4 = *v3;
LABEL_4:
    if (v4 == 93 || *(_DWORD *)(v1 + 16))
      break;
    if (v4 == 45 && v3[1] == 91)
    {
      *(_QWORD *)(v1 + 8) = v3 + 2;
      *(_DWORD *)(v1 + 20) = 2;
      result = (_DWORD *)xmlFAParseCharGroup(v1);
      *(_DWORD *)(v1 + 20) = v2;
      v5 = *(_BYTE **)(v1 + 8);
      if (*v5 == 93)
      {
        *(_QWORD *)(v1 + 8) = v5 + 1;
      }
      else
      {
        *(_DWORD *)(v1 + 16) = 1450;
        return xmlRegexpErrCompile(v1, (const xmlChar *)"charClassExpr: ']' expected");
      }
      return result;
    }
    result = (_DWORD *)xmlFAParsePosCharGroup(v1);
  }
  return result;
}

_DWORD *xmlFAParseCharClassEsc(_DWORD *result)
{
  _DWORD *v1;
  unsigned __int8 *v2;
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  const char *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;

  v1 = result;
  v2 = (unsigned __int8 *)*((_QWORD *)result + 1);
  v3 = *v2;
  if (v3 != 92)
  {
    if (v3 == 46)
    {
      v4 = *((_QWORD *)result + 6);
      if (!v4)
      {
        result = xmlRegNewAtom((uint64_t)result, 6);
        *((_QWORD *)v1 + 6) = result;
        goto LABEL_39;
      }
      if (*(_DWORD *)(v4 + 4) != 3)
        goto LABEL_39;
      v5 = result[5];
      v6 = 6;
      v7 = 0;
      v8 = 0;
LABEL_38:
      result = xmlRegAtomAddRange((uint64_t)result, v4, v5, v6, v7, v8, 0);
      goto LABEL_39;
    }
    result[4] = 1450;
    v12 = "Escaped sequence: expecting \\";
    return xmlRegexpErrCompile((uint64_t)v1, (const xmlChar *)v12);
  }
  *((_QWORD *)result + 1) = v2 + 1;
  v9 = v2[1];
  if (v9 > 0x43)
  {
    v10 = 7;
    switch(v2[1])
    {
      case 'P':
        *((_QWORD *)result + 1) = v2 + 2;
        if (v2[2] != 123)
          goto LABEL_57;
        *((_QWORD *)result + 1) = v2 + 3;
        result = xmlFAParseCharProp(result);
        v11 = *((_QWORD *)v1 + 6);
        if (v11)
          *(_DWORD *)(v11 + 40) = 1;
        goto LABEL_54;
      case 'Q':
      case 'R':
      case 'T':
      case 'U':
      case 'V':
      case 'X':
      case 'Y':
      case 'Z':
      case '_':
      case 'a':
      case 'b':
      case 'e':
      case 'f':
      case 'g':
      case 'h':
      case 'j':
      case 'k':
      case 'l':
      case 'm':
      case 'o':
      case 'q':
      case 'u':
      case 'v':
      case 'x':
      case 'y':
      case 'z':
        goto LABEL_42;
      case 'S':
        v10 = 8;
        goto LABEL_59;
      case 'W':
        v10 = 16;
        goto LABEL_59;
      case '[':
      case '\\':
      case ']':
      case '^':
      case 'n':
      case 'r':
      case 't':
      case '{':
      case '|':
      case '}':
        goto LABEL_21;
      case 'c':
        v10 = 11;
        goto LABEL_59;
      case 'd':
        v10 = 13;
        goto LABEL_59;
      case 'i':
        v10 = 9;
        goto LABEL_59;
      case 'p':
        *((_QWORD *)result + 1) = v2 + 2;
        if (v2[2] != 123)
        {
LABEL_57:
          result[4] = 1450;
          v12 = "Expecting '{'";
          return xmlRegexpErrCompile((uint64_t)v1, (const xmlChar *)v12);
        }
        *((_QWORD *)result + 1) = v2 + 3;
        result = xmlFAParseCharProp(result);
LABEL_54:
        v14 = (_BYTE *)*((_QWORD *)v1 + 1);
        if (*v14 != 125)
        {
          v1[4] = 1450;
          v12 = "Expecting '}'";
          return xmlRegexpErrCompile((uint64_t)v1, (const xmlChar *)v12);
        }
        goto LABEL_40;
      case 's':
        goto LABEL_59;
      case 'w':
        v10 = 15;
        goto LABEL_59;
      default:
        if (v9 == 68)
        {
          v10 = 14;
        }
        else
        {
          if (v9 != 73)
            goto LABEL_42;
          v10 = 10;
        }
        break;
    }
    goto LABEL_59;
  }
  if (v2[1] > 0x2Cu)
  {
    if (v9 - 45 >= 2 && v9 != 63)
    {
      if (v9 == 67)
      {
        v10 = 12;
LABEL_59:
        *((_QWORD *)result + 1) = v2 + 2;
        v15 = *((_QWORD *)result + 6);
        if (v15)
        {
          if (*(_DWORD *)(v15 + 4) == 3)
            return xmlRegAtomAddRange((uint64_t)result, v15, result[5], v10, 0, 0, 0);
        }
        else
        {
          result = xmlRegNewAtom((uint64_t)result, v10);
          *((_QWORD *)v1 + 6) = result;
        }
        return result;
      }
LABEL_42:
      result[4] = 1450;
      v12 = "Wrong escape sequence, misuse of character '\\'";
      return xmlRegexpErrCompile((uint64_t)v1, (const xmlChar *)v12);
    }
  }
  else if (v9 - 40 >= 4)
  {
    goto LABEL_42;
  }
LABEL_21:
  v4 = *((_QWORD *)result + 6);
  if (v4)
  {
    if (*(_DWORD *)(v4 + 4) != 3)
      goto LABEL_39;
    switch(v9)
    {
      case 't':
        v9 = 9;
        break;
      case 'r':
        v9 = 13;
        break;
      case 'n':
        v9 = 10;
        break;
    }
    v5 = result[5];
    v6 = 2;
    v7 = v9;
    v8 = v9;
    goto LABEL_38;
  }
  result = xmlRegNewAtom((uint64_t)result, 2);
  *((_QWORD *)v1 + 6) = result;
  if (!result)
    goto LABEL_39;
  switch(v9)
  {
    case 't':
      v13 = 9;
      goto LABEL_45;
    case 'r':
      v13 = 13;
      goto LABEL_45;
    case 'n':
      v13 = 10;
LABEL_45:
      result[11] = v13;
      goto LABEL_39;
  }
  result[11] = v9;
LABEL_39:
  v14 = (_BYTE *)*((_QWORD *)v1 + 1);
LABEL_40:
  *((_QWORD *)v1 + 1) = v14 + 1;
  return result;
}

uint64_t xmlFAParsePosCharGroup(uint64_t result)
{
  uint64_t v1;
  const xmlChar *v2;
  int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned __int8 *v6;
  uint64_t v7;
  const char *v8;
  int v9;
  unsigned __int8 *v10;
  const xmlChar *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int len;

  v1 = result;
  v2 = *(const xmlChar **)(result + 8);
  v3 = *v2;
  do
  {
    if (v3 != 92)
    {
      len = 0;
      v4 = *v2;
      if (v4 > 0x5B)
      {
        if (v4 == 92)
        {
          v6 = (unsigned __int8 *)(v2 + 1);
          *(_QWORD *)(v1 + 8) = v2 + 1;
          v5 = v2[1];
          if (v5 > 0x71)
          {
            if (v5 - 123 >= 3)
            {
              if (v5 == 116)
              {
                v5 = 9;
              }
              else
              {
                if (v5 != 114)
                  goto LABEL_49;
                v5 = 13;
              }
            }
          }
          else if (v5 - 40 > 0x36 || ((1 << (v5 - 40)) & 0x7800000080006FLL) == 0)
          {
            if (v5 != 110)
              goto LABEL_49;
            v5 = 10;
          }
          len = 1;
LABEL_23:
          if (v5 == 45 && v6[1] != 93)
          {
            v9 = *(v6 - 1);
            if (v9 != 91 && v9 != 94)
            {
              *(_QWORD *)(v1 + 8) = &v6[len];
              goto LABEL_55;
            }
          }
          v10 = &v6[len];
          *(_QWORD *)(v1 + 8) = v10;
          if (*v10 != 45 || (v11 = v10 + 1, v10[1] == 93))
          {
            v12 = *(_QWORD *)(v1 + 48);
            v13 = *(_DWORD *)(v1 + 20);
            v14 = v1;
            v15 = v5;
            v16 = v5;
LABEL_30:
            result = (uint64_t)xmlRegAtomAddRange(v14, v12, v13, 2, v15, v16, 0);
            goto LABEL_55;
          }
          *(_QWORD *)(v1 + 8) = v11;
          v17 = *v11;
          if (v17 > 0x5B)
          {
            if (v17 == 93)
              goto LABEL_42;
            if (v17 == 92)
            {
              *(_QWORD *)(v1 + 8) = v10 + 2;
              v16 = v10[2];
              if (v16 > 0x71)
              {
                if (v16 - 123 >= 3)
                {
                  if (v16 == 116)
                  {
                    v16 = 9;
                  }
                  else
                  {
                    if (v16 != 114)
                    {
LABEL_49:
                      *(_DWORD *)(v1 + 16) = 1450;
                      v7 = v1;
                      v8 = "Invalid escape value";
                      goto LABEL_54;
                    }
                    v16 = 13;
                  }
                }
              }
              else if (v16 - 40 > 0x36 || ((1 << (v16 - 40)) & 0x7800000080006FLL) == 0)
              {
                if (v16 != 110)
                  goto LABEL_49;
                v16 = 10;
              }
              len = 1;
              goto LABEL_52;
            }
          }
          else if (!*v11 || v17 == 91)
          {
LABEL_42:
            *(_DWORD *)(v1 + 16) = 1450;
            v7 = v1;
            v8 = "Expecting the end of a char range";
            goto LABEL_54;
          }
          v16 = xmlStringCurrentChar(0, v11, &len);
LABEL_52:
          if ((int)v16 < (int)v5)
          {
            *(_DWORD *)(v1 + 16) = 1450;
            v7 = v1;
            v8 = "End of range is before start of range";
            goto LABEL_54;
          }
          *(_QWORD *)(v1 + 8) += len;
          v12 = *(_QWORD *)(v1 + 48);
          v13 = *(_DWORD *)(v1 + 20);
          v14 = v1;
          v15 = v5;
          goto LABEL_30;
        }
        if (v4 != 93)
        {
LABEL_7:
          result = xmlStringCurrentChar(0, v2, &len);
          v5 = result;
          v6 = *(unsigned __int8 **)(v1 + 8);
          goto LABEL_23;
        }
LABEL_10:
        *(_DWORD *)(v1 + 16) = 1450;
        v7 = v1;
        v8 = "Expecting a char range";
      }
      else
      {
        if (*v2)
        {
          if (v4 == 91)
            goto LABEL_10;
          goto LABEL_7;
        }
        *(_DWORD *)(v1 + 16) = 1450;
        v7 = v1;
        v8 = "Expecting ']'";
      }
LABEL_54:
      result = (uint64_t)xmlRegexpErrCompile(v7, (const xmlChar *)v8);
      goto LABEL_55;
    }
    result = (uint64_t)xmlFAParseCharClassEsc((_DWORD *)v1);
LABEL_55:
    v2 = *(const xmlChar **)(v1 + 8);
    v3 = *v2;
  }
  while (*v2 && v3 != 45 && v3 != 93 && !*(_DWORD *)(v1 + 16));
  return result;
}

_DWORD *xmlRegAtomAddRange(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7)
{
  uint64_t v14;
  void *v15;
  const char *v16;
  _DWORD *result;
  void *v18;
  uint64_t v19;
  uint64_t v20;

  if (!a2)
  {
    *(_DWORD *)(a1 + 16) = 1450;
    v16 = "add range: atom is NULL";
    return xmlRegexpErrCompile(a1, (const xmlChar *)v16);
  }
  if (*(_DWORD *)(a2 + 4) != 3)
  {
    *(_DWORD *)(a1 + 16) = 1450;
    v16 = "add range: atom is not ranges";
    return xmlRegexpErrCompile(a1, (const xmlChar *)v16);
  }
  v14 = *(int *)(a2 + 72);
  if ((_DWORD)v14)
  {
    if (*(_DWORD *)(a2 + 76) >= (int)v14)
    {
      *(_DWORD *)(a2 + 72) = 2 * v14;
      v15 = xmlRealloc(*(void **)(a2 + 80), 16 * v14);
      if (!v15)
      {
        result = xmlRegexpErrMemory(a1, (const xmlChar *)"adding ranges");
        *(int *)(a2 + 72) /= 2;
        return result;
      }
      *(_QWORD *)(a2 + 80) = v15;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 72) = 4;
    v18 = xmlMalloc(0x20uLL);
    *(_QWORD *)(a2 + 80) = v18;
    if (!v18)
    {
      result = xmlRegexpErrMemory(a1, (const xmlChar *)"adding ranges");
      *(_DWORD *)(a2 + 72) = 0;
      return result;
    }
  }
  result = xmlMalloc(0x18uLL);
  if (!result)
    return xmlRegexpErrMemory(a1, (const xmlChar *)"allocating range");
  *result = a3;
  result[1] = a4;
  result[2] = a5;
  result[3] = a6;
  *((_QWORD *)result + 2) = a7;
  v19 = *(_QWORD *)(a2 + 80);
  v20 = *(int *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = v20 + 1;
  *(_QWORD *)(v19 + 8 * v20) = result;
  return result;
}

_DWORD *xmlFAParseCharProp(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  _DWORD *v3;
  unsigned int v4;
  int v5;
  int v6;
  const char *v7;
  int v8;
  BOOL v9;
  uint64_t i;
  int v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;

  v1 = result;
  v2 = *((_QWORD *)result + 1);
  switch(*(_BYTE *)v2)
  {
    case 'C':
      v3 = 0;
      *((_QWORD *)result + 1) = v2 + 1;
      v4 = *(unsigned __int8 *)(v2 + 1);
      v5 = 131;
      if (v4 > 0x6D)
      {
        if (v4 == 110)
        {
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 135;
        }
        else if (v4 == 111)
        {
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 134;
        }
      }
      else if (v4 == 99)
      {
        v3 = 0;
        *((_QWORD *)result + 1) = v2 + 2;
        v5 = 132;
      }
      else if (v4 == 102)
      {
        v3 = 0;
        *((_QWORD *)result + 1) = v2 + 2;
        v5 = 133;
      }
      goto LABEL_71;
    case 'D':
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'J':
    case 'K':
    case 'O':
    case 'Q':
    case 'R':
      goto LABEL_11;
    case 'I':
      *((_QWORD *)result + 1) = v2 + 1;
      if (*(_BYTE *)(v2 + 1) != 115)
      {
        result[4] = 1450;
        v7 = "IsXXXX expected";
        return xmlRegexpErrCompile((uint64_t)result, (const xmlChar *)v7);
      }
      *((_QWORD *)result + 1) = v2 + 2;
      v8 = *(unsigned __int8 *)(v2 + 2);
      if ((v8 & 0xFFFFFFDF) - 65 > 0x19 && (v8 != 45 ? (v9 = (v8 - 48) >= 0xA) : (v9 = 0), v9))
      {
        v15 = 0;
      }
      else
      {
        for (i = 3; ; ++i)
        {
          *((_QWORD *)result + 1) = v2 + i;
          v11 = *(unsigned __int8 *)(v2 + i);
          if ((v11 & 0xFFFFFFDF) - 65 > 0x19 && v11 != 45 && (v11 - 48) >= 0xA)
            break;
        }
        v15 = i - 2;
      }
      result = xmlStrndup((const xmlChar *)(v2 + 2), v15);
      v3 = result;
      v5 = 136;
      goto LABEL_71;
    case 'L':
      v3 = 0;
      *((_QWORD *)result + 1) = v2 + 1;
      v5 = 100;
      switch(*(_BYTE *)(v2 + 1))
      {
        case 'l':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 102;
          break;
        case 'm':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 104;
          break;
        case 'o':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 105;
          break;
        case 't':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 103;
          break;
        case 'u':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 101;
          break;
        default:
          goto LABEL_71;
      }
      goto LABEL_71;
    case 'M':
      *((_QWORD *)result + 1) = v2 + 1;
      v13 = *(unsigned __int8 *)(v2 + 1);
      if (v13 == 99)
      {
        v3 = 0;
        *((_QWORD *)result + 1) = v2 + 2;
        v5 = 108;
      }
      else if (v13 == 101)
      {
        v3 = 0;
        *((_QWORD *)result + 1) = v2 + 2;
        v5 = 109;
      }
      else
      {
        v3 = 0;
        if (v13 == 110)
        {
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 107;
        }
        else
        {
          v5 = 106;
        }
      }
      goto LABEL_71;
    case 'N':
      *((_QWORD *)result + 1) = v2 + 1;
      v14 = *(unsigned __int8 *)(v2 + 1);
      if (v14 == 111)
      {
        v3 = 0;
        *((_QWORD *)result + 1) = v2 + 2;
        v5 = 113;
      }
      else if (v14 == 108)
      {
        v3 = 0;
        *((_QWORD *)result + 1) = v2 + 2;
        v5 = 112;
      }
      else
      {
        v3 = 0;
        if (v14 == 100)
        {
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 111;
        }
        else
        {
          v5 = 110;
        }
      }
      goto LABEL_71;
    case 'P':
      v3 = 0;
      *((_QWORD *)result + 1) = v2 + 1;
      v5 = 114;
      switch(*(_BYTE *)(v2 + 1))
      {
        case 'c':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 115;
          break;
        case 'd':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 116;
          break;
        case 'e':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 118;
          break;
        case 'f':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 120;
          break;
        case 'i':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 119;
          break;
        case 'o':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 121;
          break;
        case 's':
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 117;
          break;
        default:
          goto LABEL_71;
      }
      goto LABEL_71;
    case 'S':
      v3 = 0;
      *((_QWORD *)result + 1) = v2 + 1;
      v5 = 126;
      switch(((*(_BYTE *)(v2 + 1) - 99) >> 1) | ((*(_BYTE *)(v2 + 1) - 99) << 7))
      {
        case 0:
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 128;
          break;
        case 4:
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 129;
          break;
        case 5:
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 127;
          break;
        case 6:
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 130;
          break;
        default:
          goto LABEL_71;
      }
      goto LABEL_71;
    default:
      if (*(_BYTE *)v2 == 90)
      {
        *((_QWORD *)result + 1) = v2 + 1;
        v6 = *(unsigned __int8 *)(v2 + 1);
        if (v6 == 108)
        {
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 124;
        }
        else if (v6 == 112)
        {
          v3 = 0;
          *((_QWORD *)result + 1) = v2 + 2;
          v5 = 125;
        }
        else
        {
          v3 = 0;
          if (v6 == 115)
          {
            *((_QWORD *)result + 1) = v2 + 2;
            v5 = 123;
          }
          else
          {
            v5 = 122;
          }
        }
LABEL_71:
        v16 = *((_QWORD *)v1 + 6);
        if (v16)
        {
          if (*(_DWORD *)(v16 + 4) == 3)
            return xmlRegAtomAddRange((uint64_t)v1, v16, v1[5], v5, 0, 0, (uint64_t)v3);
        }
        else
        {
          result = xmlRegNewAtom((uint64_t)v1, v5);
          *((_QWORD *)v1 + 6) = result;
          if (result)
            *((_QWORD *)result + 3) = v3;
        }
      }
      else
      {
LABEL_11:
        result[4] = 1450;
        v7 = "Unknown char property";
        return xmlRegexpErrCompile((uint64_t)result, (const xmlChar *)v7);
      }
      return result;
  }
}

uint64_t xmlFAParseQuantExact(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v1 = *(unsigned __int8 **)(a1 + 8);
  v2 = *v1;
  v3 = v2 - 58;
  if ((v2 - 58) >= 0xFFFFFFF6)
  {
    v5 = 0;
    v4 = 0;
    v6 = v1 + 1;
    do
    {
      v7 = -2147483601 - v2;
      v8 = v2 - 48;
      if (10 * v4 > v7)
        v8 = 0;
      v9 = v8 + 10 * v4;
      if (10 * v4 > v7)
        v5 = 1;
      if (v4 > 214748364)
        v5 = 1;
      else
        v4 = v9;
      *(_QWORD *)(a1 + 8) = v6;
      v10 = *v6++;
      v2 = v10;
    }
    while ((v10 - 48) < 0xA);
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  if (v5 != 1 && v3 >= 0xFFFFFFF6)
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_DWORD *xmlFAReduceEpsilonTransitions(_DWORD *result, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  _DWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v4 = *((_QWORD *)result + 10);
  v5 = *(_DWORD **)(v4 + 8 * a2);
  if (v5)
  {
    v6 = *(_QWORD *)(v4 + 8 * a3);
    if (v6)
    {
      if ((*(_DWORD *)(v6 + 4) - 1) >= 2)
      {
        v9 = result;
        *(_DWORD *)(v6 + 4) = 2;
        if (*(_DWORD *)v6 == 2)
          *v5 = 2;
        if (*(int *)(v6 + 24) >= 1)
        {
          v10 = 0;
          for (i = 0; i < *(int *)(v6 + 24); ++i)
          {
            v12 = *(_QWORD *)(v6 + 32);
            v13 = *(unsigned int *)(v12 + v10 + 8);
            if ((v13 & 0x80000000) == 0)
            {
              if (*(_QWORD *)(v12 + v10))
              {
                v14 = *(_DWORD *)(v12 + v10 + 12);
                v15 = *(_QWORD *)(*((_QWORD *)v9 + 10) + 8 * v13);
                v16 = v9;
                v17 = (uint64_t)v5;
                v18 = *(_QWORD *)(v12 + v10);
                if (v14 < 0)
                  v14 = a4;
                v19 = -1;
              }
              else
              {
                if ((_DWORD)v13 == (_DWORD)a2)
                  goto LABEL_14;
                v19 = *(_DWORD *)(v12 + v10 + 16);
                if (v19 < 0)
                {
                  result = (_DWORD *)xmlFAReduceEpsilonTransitions(v9, a2);
                  goto LABEL_14;
                }
                v15 = *(_QWORD *)(*((_QWORD *)v9 + 10) + 8 * v13);
                v16 = v9;
                v17 = (uint64_t)v5;
                v18 = 0;
                v14 = -1;
              }
              result = xmlRegStateAddTrans(v16, v17, v18, v15, v14, v19);
            }
LABEL_14:
            v10 += 24;
          }
        }
        *(_DWORD *)(v6 + 4) = 0;
      }
    }
  }
  return result;
}

void *xmlRegCalloc2(unint64_t a1, unint64_t a2, unint64_t a3)
{
  void *v3;
  size_t v4;
  void *v5;

  if (0xFFFFFFFFFFFFFFFFLL / a2 / a3 < a1)
    return 0;
  v4 = a2 * a1 * a3;
  v5 = xmlMalloc(v4);
  v3 = v5;
  if (v5)
    bzero(v5, v4);
  return v3;
}

uint64_t xmlRegCheckCharacter(uint64_t a1, unsigned int code)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;

  if ((int)code > 255)
  {
    if (code - 0x10000 >= 0x100000 && code >> 11 >= 0x1B && (code - 57344) >> 1 > 0xFFE)
      return 0xFFFFFFFFLL;
  }
  else if ((int)code <= 31)
  {
    v4 = 0xFFFFFFFFLL;
    if (code > 0xD || ((1 << code) & 0x2600) == 0)
      return v4;
  }
  v5 = *(_DWORD *)(a1 + 4);
  if ((v5 - 100) >= 0x25)
  {
    v4 = 0xFFFFFFFFLL;
    switch(v5)
    {
      case 1:
      case 4:
        return v4;
      case 2:
        return *(_DWORD *)(a1 + 44) == code;
      case 3:
        if (*(int *)(a1 + 76) < 1)
          return 0;
        v8 = 0;
        v4 = 0;
        break;
      case 5:
        puts("TODO: XML_REGEXP_STRING");
        return v4;
      case 6:
      case 7:
      case 8:
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 14:
      case 15:
      case 16:
        goto LABEL_12;
      default:
        return 0;
    }
    while (1)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v8);
      if (*(_DWORD *)v9)
      {
        if (*(_DWORD *)v9 == 2)
        {
          if (xmlRegCheckCharacterRange(*(_DWORD *)(v9 + 4), code, *(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 12), *(char **)(v9 + 16)))return 0;
        }
        else
        {
          if (xmlRegCheckCharacterRange(*(_DWORD *)(v9 + 4), code, *(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 12), *(char **)(v9 + 16)))return 0;
          v4 = 1;
        }
      }
      else if (xmlRegCheckCharacterRange(*(_DWORD *)(v9 + 4), code, *(_DWORD *)(v9 + 8), *(_DWORD *)(v9 + 12), *(char **)(v9 + 16)))
      {
        v4 = 1;
      }
      else
      {
        v4 = v4;
      }
      if (++v8 >= *(int *)(a1 + 76))
        return v4;
    }
  }
LABEL_12:
  v6 = xmlRegCheckCharacterRange(v5, code, 0, 0, *(char **)(a1 + 24));
  if (*(_DWORD *)(a1 + 40))
    return v6 == 0;
  else
    return v6;
}

uint64_t xmlRegCheckCharacterRange(int a1, int code, int a3, int a4, char *block)
{
  uint64_t v6;
  int v8;
  uint64_t result;
  BOOL v12;

  v6 = 0;
  switch(a1)
  {
    case 100:
      return xmlUCSIsCatL(code);
    case 101:
      return xmlUCSIsCatLu(code);
    case 102:
      return xmlUCSIsCatLl(code);
    case 103:
      return xmlUCSIsCatLt(code);
    case 104:
      return xmlUCSIsCatLm(code);
    case 105:
      return xmlUCSIsCatLo(code);
    case 106:
      return xmlUCSIsCatM(code);
    case 107:
      return xmlUCSIsCatMn(code);
    case 108:
      return xmlUCSIsCatMc(code);
    case 109:
      return xmlUCSIsCatMe(code);
    case 110:
      return xmlUCSIsCatN(code);
    case 111:
      return xmlUCSIsCatNd(code);
    case 112:
      return xmlUCSIsCatNl(code);
    case 113:
      return xmlUCSIsCatNo(code);
    case 114:
      return xmlUCSIsCatP(code);
    case 115:
      return xmlUCSIsCatPc(code);
    case 116:
      return xmlUCSIsCatPd(code);
    case 117:
      return xmlUCSIsCatPs(code);
    case 118:
      return xmlUCSIsCatPe(code);
    case 119:
      return xmlUCSIsCatPi(code);
    case 120:
      return xmlUCSIsCatPf(code);
    case 121:
      return xmlUCSIsCatPo(code);
    case 122:
      return xmlUCSIsCatZ(code);
    case 123:
      return xmlUCSIsCatZs(code);
    case 124:
      return xmlUCSIsCatZl(code);
    case 125:
      return xmlUCSIsCatZp(code);
    case 126:
      return xmlUCSIsCatS(code);
    case 127:
      return xmlUCSIsCatSm(code);
    case 128:
      return xmlUCSIsCatSc(code);
    case 129:
      return xmlUCSIsCatSk(code);
    case 130:
      return xmlUCSIsCatSo(code);
    case 131:
      return xmlUCSIsCatC(code);
    case 132:
      return xmlUCSIsCatCc(code);
    case 133:
      return xmlUCSIsCatCf(code);
    case 134:
      return xmlUCSIsCatCo(code);
    case 135:
      return v6;
    case 136:
      return xmlUCSIsBlock(code, block);
    default:
      v8 = a1 - 1;
      result = 0xFFFFFFFFLL;
      switch(v8)
      {
        case 0:
        case 2:
        case 3:
        case 4:
          return result;
        case 1:
          return code >= a3 && code <= a4;
        case 5:
          return code != 10 && code != 13;
        case 6:
          goto LABEL_54;
        case 7:
          LODWORD(v6) = 1;
LABEL_54:
          if (code <= 0xD)
          {
            LODWORD(result) = 1;
            if (((1 << code) & 0x2600) != 0)
              goto LABEL_97;
          }
          v12 = code == 32;
          goto LABEL_94;
        case 8:
          goto LABEL_58;
        case 9:
          LODWORD(v6) = 1;
LABEL_58:
          if (code > 255)
          {
            if (xmlCharInRange(code, &xmlIsBaseCharGroup))
              goto LABEL_85;
            LODWORD(result) = 1;
            if ((code - 12321) < 9 || code == 12295 || (code - 19968) < 0x51A6)
              goto LABEL_97;
          }
          else
          {
            LODWORD(result) = 1;
            if ((code - 192) < 0x17
              || (code & 0xFFFFFFDF) - 65 < 0x1A
              || code == 95
              || code > 247
              || (code - 216) < 0x1F)
            {
              goto LABEL_97;
            }
          }
          v12 = code == 58;
          goto LABEL_94;
        case 10:
          goto LABEL_66;
        case 11:
          LODWORD(v6) = 1;
LABEL_66:
          if (code > 255)
          {
            if (xmlCharInRange(code, &xmlIsBaseCharGroup))
              goto LABEL_85;
            LODWORD(result) = 1;
            if ((code - 12321) < 9 || code == 12295 || (code - 19968) < 0x51A6)
              goto LABEL_97;
            if (xmlCharInRange(code, &xmlIsDigitGroup))
            {
LABEL_85:
              LODWORD(result) = 1;
              goto LABEL_97;
            }
          }
          else
          {
            LODWORD(result) = 1;
            if ((code - 192) < 0x17
              || (code & 0xFFFFFFDF) - 65 < 0x1A
              || (code - 48) < 0xA
              || code > 247
              || (code - 216) < 0x1F)
            {
              goto LABEL_97;
            }
          }
          if ((code - 45) < 0x33 && ((0x4000000002003uLL >> (code - 45)) & 1) != 0)
            goto LABEL_85;
          if (code < 256)
          {
            v12 = code == 183;
LABEL_94:
            LODWORD(result) = v12;
            goto LABEL_97;
          }
          if (xmlCharInRange(code, &xmlIsCombiningGroup))
            goto LABEL_85;
          LODWORD(result) = xmlCharInRange(code, &xmlIsExtenderGroup) != 0;
LABEL_97:
          if ((_DWORD)v6)
            return (_DWORD)result == 0;
          else
            return result;
        case 12:
          goto LABEL_74;
        case 13:
          LODWORD(v6) = 1;
LABEL_74:
          LODWORD(result) = xmlUCSIsCatNd(code);
          goto LABEL_97;
        case 14:
          LODWORD(v6) = 1;
          goto LABEL_76;
        case 15:
LABEL_76:
          LODWORD(result) = xmlUCSIsCatP(code);
          if (!(_DWORD)result)
          {
            LODWORD(result) = xmlUCSIsCatZ(code);
            if (!(_DWORD)result)
              LODWORD(result) = xmlUCSIsCatC(code);
          }
          goto LABEL_97;
        default:
          return v6;
      }
  }
}

uint64_t xmlFARecurseDeterminism(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (!a2)
    return 1;
  if (*(_DWORD *)(a2 + 8) == 2)
    return 1;
  v3 = *(unsigned int *)(a2 + 24);
  if ((int)v3 < 1)
    return 1;
  v5 = 0;
  v6 = 24 * v3;
  v7 = 1;
  do
  {
    v8 = *(_QWORD *)(a2 + 32);
    if (!*(_QWORD *)(v8 + v5))
    {
      v9 = *(unsigned int *)(v8 + v5 + 8);
      if ((v9 & 0x80000000) == 0)
      {
        *(_DWORD *)(a2 + 8) = 2;
        if (xmlFARecurseDeterminism(a1, *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v9)))
          v7 = v7;
        else
          v7 = 0;
      }
    }
    v5 += 24;
  }
  while (v6 != v5);
  return v7;
}

uint64_t xmlFAFinishRecurseDeterminism(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2)
  {
    if (*(_DWORD *)(a2 + 8) == 2)
    {
      *(_DWORD *)(a2 + 8) = 0;
      v3 = *(unsigned int *)(a2 + 24);
      if ((int)v3 >= 1)
      {
        v4 = result;
        v5 = 0;
        v6 = 24 * v3;
        do
        {
          v7 = *(_QWORD *)(a2 + 32);
          if (!*(_QWORD *)(v7 + v5))
          {
            v8 = *(unsigned int *)(v7 + v5 + 8);
            if ((v8 & 0x80000000) == 0)
              result = xmlFAFinishRecurseDeterminism(v4, *(_QWORD *)(*(_QWORD *)(v4 + 80) + 8 * v8));
          }
          v5 += 24;
        }
        while (v6 != v5);
      }
    }
  }
  return result;
}

uint64_t xmlRegCopyAtom(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  __int128 *v9;
  _OWORD *v10;
  _QWORD *v11;
  const xmlChar *v12;
  xmlChar *v13;
  void *v14;
  __int128 v16;

  v4 = xmlMalloc(0x60uLL);
  v5 = (uint64_t)v4;
  if (v4)
  {
    v4[4] = 0u;
    v4[5] = 0u;
    v4[2] = 0u;
    v4[3] = 0u;
    *v4 = 0u;
    v4[1] = 0u;
    *(_OWORD *)((char *)v4 + 4) = *(_OWORD *)(a2 + 4);
    v6 = *(unsigned int *)(a2 + 76);
    if ((int)v6 >= 1)
    {
      v7 = xmlMalloc(8 * v6);
      *(_QWORD *)(v5 + 80) = v7;
      if (v7)
      {
        if (*(int *)(a2 + 76) >= 1)
        {
          v8 = 0;
          do
          {
            v9 = *(__int128 **)(*(_QWORD *)(a2 + 80) + 8 * v8);
            if (v9)
            {
              v16 = *v9;
              v10 = xmlMalloc(0x18uLL);
              v11 = v10;
              if (!v10)
              {
                xmlRegexpErrMemory(a1, (const xmlChar *)"allocating range");
                goto LABEL_15;
              }
              *v10 = v16;
              v12 = (const xmlChar *)*((_QWORD *)v9 + 2);
              if (!v12)
                goto LABEL_15;
              v13 = xmlStrdup(v12);
              v11[2] = v13;
              if (v13)
                goto LABEL_15;
              xmlRegexpErrMemory(a1, (const xmlChar *)"allocating range");
              v14 = (void *)v11[2];
              if (v14)
                xmlFree(v14);
              xmlFree(v11);
            }
            v11 = 0;
LABEL_15:
            *(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v8) = v11;
            if (!*(_QWORD *)(*(_QWORD *)(v5 + 80) + 8 * v8))
              goto LABEL_20;
            *(_DWORD *)(v5 + 76) = ++v8;
          }
          while (v8 < *(int *)(a2 + 76));
        }
      }
      else
      {
        xmlRegexpErrMemory(a1, (const xmlChar *)"copying atom");
LABEL_20:
        xmlRegFreeAtom(v5);
        return 0;
      }
    }
  }
  else
  {
    xmlRegexpErrMemory(a1, (const xmlChar *)"copying atom");
  }
  return v5;
}

int xmlIsXHTML(const xmlChar *systemID, const xmlChar *publicID)
{
  if (!((unint64_t)systemID | (unint64_t)publicID))
    return -1;
  return publicID
      && (xmlStrEqual(publicID, (const xmlChar *)"-//W3C//DTD XHTML 1.0 Strict//EN")
       || xmlStrEqual(publicID, (const xmlChar *)"-//W3C//DTD XHTML 1.0 Frameset//EN")
       || xmlStrEqual(publicID, (const xmlChar *)"-//W3C//DTD XHTML 1.0 Transitional//EN"))
      || systemID
      && (xmlStrEqual(systemID, (const xmlChar *)"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd")
       || xmlStrEqual(systemID, (const xmlChar *)"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd")
       || xmlStrEqual(systemID, (const xmlChar *)"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"));
}

xmlBuffer *xmlBufDumpNotationTable(uint64x2_t *a1, xmlNotationTable *a2)
{
  xmlBuffer *result;
  xmlBuffer *v5;

  result = xmlBufferCreate();
  if (result)
  {
    v5 = result;
    xmlDumpNotationTable(result, a2);
    return (xmlBuffer *)xmlBufMergeBuffer(a1, v5);
  }
  return result;
}

xmlBuffer *xmlBufDumpElementDecl(uint64x2_t *a1, xmlElement *a2)
{
  xmlBuffer *result;
  xmlBuffer *v5;

  result = xmlBufferCreate();
  if (result)
  {
    v5 = result;
    xmlDumpElementDecl(result, a2);
    return (xmlBuffer *)xmlBufMergeBuffer(a1, v5);
  }
  return result;
}

xmlBuffer *xmlBufDumpAttributeDecl(uint64x2_t *a1, xmlAttribute *a2)
{
  xmlBuffer *result;
  xmlBuffer *v5;

  result = xmlBufferCreate();
  if (result)
  {
    v5 = result;
    xmlDumpAttributeDecl(result, a2);
    return (xmlBuffer *)xmlBufMergeBuffer(a1, v5);
  }
  return result;
}

xmlBuffer *xmlBufDumpEntityDecl(uint64x2_t *a1, xmlEntity *a2)
{
  xmlBuffer *result;
  xmlBuffer *v5;

  result = xmlBufferCreate();
  if (result)
  {
    v5 = result;
    xmlDumpEntityDecl(result, a2);
    return (xmlBuffer *)xmlBufMergeBuffer(a1, v5);
  }
  return result;
}

uint64_t xmlNsListDumpOutput(uint64_t result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    do
    {
      result = xmlNsDumpOutput(v3, (uint64_t)v2, 0);
      v2 = (_QWORD *)*v2;
    }
    while (v2);
  }
  return result;
}

uint64_t xmlNsDumpOutput(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  if (result)
  {
    if (a2)
    {
      if (*(_DWORD *)(a2 + 8) == 18)
      {
        if (*(_QWORD *)(a2 + 16))
        {
          v5 = result;
          result = xmlStrEqual(*(const xmlChar **)(a2 + 24), (const xmlChar *)"xml");
          if (!(_DWORD)result)
          {
            if (a3 && *(_DWORD *)(a3 + 56) == 2)
              xmlOutputBufferWriteWSNonSig((xmlBufPtr)a3, 2);
            else
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, " ");
            if (*(_QWORD *)(a2 + 24))
            {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 6, "xmlns:");
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(a2 + 24));
            }
            else
            {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 5, "xmlns");
            }
            xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, "=");
            return xmlBufWriteQuotedString(*(uint64x2_t **)(v5 + 32), *(xmlChar **)(a2 + 16));
          }
        }
      }
    }
  }
  return result;
}

xmlSaveCtxtPtr xmlSaveToFd(int fd, const char *encoding, int options)
{
  int *v4;
  int *v5;
  xmlOutputBufferPtr v6;

  v4 = xmlNewSaveCtxt(encoding, options);
  v5 = v4;
  if (v4)
  {
    v6 = xmlOutputBufferCreateFd(fd, *((xmlCharEncodingHandlerPtr *)v4 + 4));
    *((_QWORD *)v5 + 5) = v6;
    if (!v6)
    {
      xmlCharEncCloseFunc(*((xmlCharEncodingHandler **)v5 + 4));
      xmlFreeSaveCtxt(v5);
      return 0;
    }
  }
  return (xmlSaveCtxtPtr)v5;
}

int *xmlNewSaveCtxt(const char *a1, int a2)
{
  int *v4;
  int *v5;
  xmlCharEncodingHandlerPtr CharEncodingHandler;
  int v7;
  int v8;

  v4 = (int *)xmlMalloc(0x98uLL);
  v5 = v4;
  if (v4)
  {
    *((_QWORD *)v4 + 18) = 0;
    *((_OWORD *)v4 + 7) = 0u;
    *((_OWORD *)v4 + 8) = 0u;
    *((_OWORD *)v4 + 5) = 0u;
    *((_OWORD *)v4 + 6) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *((_OWORD *)v4 + 4) = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *((_OWORD *)v4 + 2) = 0u;
    *(_OWORD *)v4 = 0u;
    if (a1)
    {
      CharEncodingHandler = xmlFindCharEncodingHandler(a1);
      *((_QWORD *)v5 + 4) = CharEncodingHandler;
      if (!CharEncodingHandler)
      {
        __xmlSimpleError(7u, 1403, 0, "unknown encoding %s\n", (const xmlChar *)a1);
        xmlFreeSaveCtxt(v5);
        return 0;
      }
      *((_QWORD *)v5 + 3) = xmlStrdup((const xmlChar *)a1);
      *((_QWORD *)v5 + 17) = 0;
    }
    xmlSaveCtxtInit(v5);
    if ((((a2 & 4) == 0) & ((v5[12] & 4u) >> 2)) != 0)
      v7 = a2 | 4;
    else
      v7 = a2;
    v5[12] = v7;
    if ((v7 & 1) != 0)
    {
      v8 = 1;
      goto LABEL_13;
    }
    if ((v7 & 0x80) != 0)
    {
      v8 = 2;
LABEL_13:
      v5[14] = v8;
    }
  }
  else
  {
    __xmlSimpleError(7u, 2, 0, 0, (const xmlChar *)"creating saving context");
  }
  return v5;
}

void xmlFreeSaveCtxt(_QWORD *a1)
{
  void *v2;
  xmlOutputBuffer *v3;

  v2 = (void *)a1[3];
  if (v2)
    xmlFree(v2);
  v3 = (xmlOutputBuffer *)a1[5];
  if (v3)
    xmlOutputBufferClose(v3);
  xmlFree(a1);
}

xmlSaveCtxtPtr xmlSaveToFilename(const char *filename, const char *encoding, int options)
{
  int *v4;
  int *v5;
  xmlOutputBufferPtr v6;

  v4 = xmlNewSaveCtxt(encoding, options);
  v5 = v4;
  if (v4)
  {
    v6 = xmlOutputBufferCreateFilename(filename, *((xmlCharEncodingHandlerPtr *)v4 + 4), 0);
    *((_QWORD *)v5 + 5) = v6;
    if (!v6)
    {
      xmlCharEncCloseFunc(*((xmlCharEncodingHandler **)v5 + 4));
      xmlFreeSaveCtxt(v5);
      return 0;
    }
  }
  return (xmlSaveCtxtPtr)v5;
}

xmlSaveCtxtPtr xmlSaveToBuffer(xmlBufferPtr buffer, const char *encoding, int options)
{
  int *v4;
  int *v5;
  xmlOutputBufferPtr v6;

  v4 = xmlNewSaveCtxt(encoding, options);
  v5 = v4;
  if (v4)
  {
    v6 = xmlOutputBufferCreateBuffer(buffer, *((xmlCharEncodingHandlerPtr *)v4 + 4));
    *((_QWORD *)v5 + 5) = v6;
    if (!v6)
    {
      xmlCharEncCloseFunc(*((xmlCharEncodingHandler **)v5 + 4));
      xmlFreeSaveCtxt(v5);
      return 0;
    }
  }
  return (xmlSaveCtxtPtr)v5;
}

xmlSaveCtxtPtr xmlSaveToIO(xmlOutputWriteCallback iowrite, xmlOutputCloseCallback ioclose, void *ioctx, const char *encoding, int options)
{
  int *v8;
  int *v9;
  xmlOutputBufferPtr IO;

  v8 = xmlNewSaveCtxt(encoding, options);
  v9 = v8;
  if (v8)
  {
    IO = xmlOutputBufferCreateIO(iowrite, ioclose, ioctx, *((xmlCharEncodingHandlerPtr *)v8 + 4));
    *((_QWORD *)v9 + 5) = IO;
    if (!IO)
    {
      xmlCharEncCloseFunc(*((xmlCharEncodingHandler **)v9 + 4));
      xmlFreeSaveCtxt(v9);
      return 0;
    }
  }
  return (xmlSaveCtxtPtr)v9;
}

uint64_t xmlSaveDoc(xmlSaveCtxtPtr ctxt, xmlDocPtr doc)
{
  uint64_t result;

  result = -1;
  if (ctxt)
  {
    if (doc)
      return (int)xmlDocContentDumpOutput((uint64_t)ctxt, (uint64_t)doc);
  }
  return result;
}

uint64_t xmlDocContentDumpOutput(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  char *MetaEncoding;
  uint64_t result;
  xmlCharEncoding v13;
  int v14;
  unsigned int v15;
  xmlChar *v16;
  int v17;
  const char *v18;
  xmlOutputBuffer *v19;
  int v20;
  int v21;
  xmlDtdPtr IntSubset;
  int IsXHTML;
  uint64_t i;
  __int128 v25;

  v4 = *(_QWORD *)(a2 + 112);
  v5 = *(char **)(a1 + 24);
  v25 = *(_OWORD *)(a1 + 136);
  v6 = *(_QWORD *)(a1 + 40);
  xmlInitParser();
  v7 = *(_DWORD *)(a2 + 8);
  if ((v7 | 4) != 0xD)
    return 0xFFFFFFFFLL;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    *(_QWORD *)(a2 + 112) = v8;
    MetaEncoding = v5;
  }
  else if (*(_QWORD *)(a2 + 112))
  {
    MetaEncoding = *(char **)(a2 + 112);
  }
  else
  {
    MetaEncoding = v5;
  }
  if (((*(_DWORD *)(a1 + 48) & 0x30) != 0 || v7 != 13) && (*(_DWORD *)(a1 + 48) & 0x40) == 0)
  {
    if (v7 != 9 && (*(_DWORD *)(a1 + 48) & 0x30) == 0)
    {
      result = 0;
LABEL_67:
      *(_QWORD *)(a2 + 112) = v4;
      return result;
    }
    v13 = xmlParseCharEncoding(MetaEncoding);
    v14 = 0;
    if (MetaEncoding && !v5)
    {
      if (*(_QWORD *)(v6 + 24) || *(_QWORD *)(v6 + 40) || (*(_BYTE *)(a1 + 48) & 2) != 0)
      {
        v14 = 0;
      }
      else
      {
        if (v13 <= XML_CHAR_ENCODING_ASCII && ((1 << v13) & 0x400003) != 0)
        {
          v14 = 0;
        }
        else
        {
          if ((xmlSaveSwitchEncoding(a1, MetaEncoding) & 0x80000000) != 0)
          {
LABEL_70:
            result = 0xFFFFFFFFLL;
            goto LABEL_67;
          }
          v14 = 1;
        }
        if (*(uint64_t (**)(_BYTE *, int *, unsigned __int8 *, int *))(a1 + 136) == xmlEscapeEntities)
          *(_QWORD *)(a1 + 136) = 0;
        if (*(uint64_t (**)(_BYTE *, int *, unsigned __int8 *, int *))(a1 + 144) == xmlEscapeEntities)
          *(_QWORD *)(a1 + 144) = 0;
      }
    }
    v15 = *(_DWORD *)(a1 + 48);
    if ((v15 & 2) != 0)
    {
LABEL_54:
      v21 = (v15 >> 4) & 1;
      if ((v15 & 8) == 0)
      {
        IntSubset = xmlGetIntSubset((const xmlDoc *)a2);
        if (IntSubset)
        {
          IsXHTML = xmlIsXHTML(IntSubset->SystemID, IntSubset->ExternalID);
          v21 = IsXHTML & ~(IsXHTML >> 31);
        }
      }
      for (i = *(_QWORD *)(a2 + 24); i; i = *(_QWORD *)(i + 48))
      {
        *(_DWORD *)(a1 + 52) = 0;
        if (v21)
          xhtmlNodeDumpOutput(a1, i);
        else
          xmlNodeDumpOutputInternal(a1, i);
        if ((*(_DWORD *)(i + 8) - 19) >= 2)
          xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 1, "\n");
      }
      result = 0;
      if (v14 && !v5)
      {
        xmlSaveClearEncoding(a1);
        result = 0;
        *(_OWORD *)(a1 + 136) = v25;
      }
      goto LABEL_67;
    }
    xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 14, "<?xml version=");
    v16 = *(xmlChar **)(a2 + 104);
    if (v16)
    {
      xmlBufWriteQuotedString(*(uint64x2_t **)(v6 + 32), v16);
      if (!MetaEncoding)
        goto LABEL_46;
    }
    else
    {
      xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 5, "\"1.0\"");
      if (!MetaEncoding)
      {
LABEL_46:
        v17 = *(_DWORD *)(a2 + 76);
        if (v17 == 1)
        {
          v18 = " standalone=\"yes\"";
          v19 = (xmlOutputBuffer *)v6;
          v20 = 17;
        }
        else
        {
          if (v17)
          {
LABEL_53:
            xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 3, "?>\n");
            v15 = *(_DWORD *)(a1 + 48);
            goto LABEL_54;
          }
          v18 = " standalone=\"no\"";
          v19 = (xmlOutputBuffer *)v6;
          v20 = 16;
        }
        xmlOutputBufferWrite(v19, v20, v18);
        goto LABEL_53;
      }
    }
    xmlOutputBufferWrite((xmlOutputBufferPtr)v6, 10, " encoding=");
    xmlBufWriteQuotedString(*(uint64x2_t **)(v6 + 32), (xmlChar *)MetaEncoding);
    goto LABEL_46;
  }
  if (MetaEncoding)
    htmlSetMetaEncoding((htmlDocPtr)a2, (const xmlChar *)MetaEncoding);
  else
    MetaEncoding = (char *)htmlGetMetaEncoding((htmlDocPtr)a2);
  if (!MetaEncoding)
    MetaEncoding = "HTML";
  if (!v5
    && !*(_QWORD *)(v6 + 24)
    && !*(_QWORD *)(v6 + 40)
    && (xmlSaveSwitchEncoding(a1, MetaEncoding) & 0x80000000) != 0)
  {
    goto LABEL_70;
  }
  htmlDocContentDumpFormatOutput((xmlOutputBufferPtr)v6, (xmlDocPtr)a2, MetaEncoding, *(_DWORD *)(a1 + 48) & 1);
  result = 0;
  if (*(_QWORD *)(a1 + 24))
    goto LABEL_67;
  return result;
}

uint64_t xmlSaveTree(xmlSaveCtxtPtr ctxt, xmlNodePtr node)
{
  uint64_t result;
  unsigned int v5;
  _xmlDoc *doc;
  BOOL v7;
  int v8;
  xmlChar *v9;
  xmlOutputBuffer *v10;
  _xmlDoc *v11;
  const xmlChar *encoding;
  const xmlChar *v13;
  xmlChar *MetaEncoding;
  int v15;

  result = -1;
  if (ctxt && node)
  {
    v5 = *((_DWORD *)ctxt + 12);
    if ((v5 & 0x10) != 0)
    {
      xhtmlNodeDumpOutput((uint64_t)ctxt, (uint64_t)node);
      return 0;
    }
    if (node->type == XML_NAMESPACE_DECL || (doc = node->doc) == 0)
    {
      if ((v5 & 0x40) == 0)
      {
LABEL_10:
        xmlNodeDumpOutputInternal((uint64_t)ctxt, (uint64_t)node);
        return 0;
      }
    }
    else
    {
      v7 = doc->type == XML_HTML_DOCUMENT_NODE;
      v8 = (v5 >> 5) & 1;
      if (!v7)
        LOBYTE(v8) = 1;
      if ((v5 & 0x40) == 0 && (v8 & 1) != 0)
        goto LABEL_10;
    }
    v9 = (xmlChar *)*((_QWORD *)ctxt + 3);
    v10 = (xmlOutputBuffer *)*((_QWORD *)ctxt + 5);
    xmlInitParser();
    v11 = node->doc;
    if (v11)
    {
      encoding = v11->encoding;
      v13 = (const xmlChar *)*((_QWORD *)ctxt + 3);
      if (v13)
      {
        v11->encoding = v13;
        MetaEncoding = v9;
      }
      else if (encoding)
      {
        MetaEncoding = (xmlChar *)v11->encoding;
      }
      else
      {
        MetaEncoding = v9;
      }
      if (MetaEncoding)
        htmlSetMetaEncoding(v11, MetaEncoding);
      else
        MetaEncoding = (xmlChar *)htmlGetMetaEncoding(v11);
    }
    else
    {
      encoding = 0;
      MetaEncoding = v9;
    }
    if (!MetaEncoding)
      MetaEncoding = (xmlChar *)"HTML";
    if (v9 || v10->encoder || v10->conv)
    {
      v15 = 0;
    }
    else
    {
      if ((xmlSaveSwitchEncoding((uint64_t)ctxt, (char *)MetaEncoding) & 0x80000000) != 0)
        goto LABEL_35;
      v15 = 1;
    }
    htmlNodeDumpFormatOutput(v10, v11, node, (const char *)MetaEncoding, *((_DWORD *)ctxt + 12) & 1);
    if (!v9)
    {
      if (v15)
        xmlSaveClearEncoding((uint64_t)ctxt);
    }
    if (!v11)
      return 0;
LABEL_35:
    result = 0;
    v11->encoding = encoding;
  }
  return result;
}

uint64_t xhtmlNodeDumpOutput(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  const char *v15;
  _QWORD *i;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  xmlNode *v22;
  xmlNodePtr v23;
  const xmlChar *v24;
  char *v26;
  int v27;
  char *v28;
  const char *v29;
  const char *v30;
  const char *v31;
  const char *v32;
  char *v33;
  const char *v34;
  int v35;
  const char *v36;
  uint64_t v37;
  const xmlChar *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int v44;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  const xmlNode *v53;
  xmlChar *Prop;
  xmlChar *v55;
  int v56;
  int v57;
  int v58;
  const char *v59;
  const xmlChar *v60;
  const char *v61;
  int v62;
  _BOOL4 v63;
  int v64;
  int v65;
  const char *v66;
  uint64_t v67;
  const char *v68;
  int v69;
  BOOL v70;
  int v71;
  int v72;
  uint64_t v73;
  const char *v74;
  xmlOutputBuffer *out;
  uint64_t v76;
  uint64_t v77;
  char *str;
  char *strb;
  char *stra;
  int strc;
  uint64_t v82;
  char *buf;
  int v84;

  v2 = a2;
  v3 = result;
  v4 = 0;
  v84 = *(_DWORD *)(result + 56);
  v5 = *(_QWORD *)(result + 40);
  v6 = "\n";
  v7 = "</";
  v8 = ">";
  v9 = ":";
  buf = (char *)(result + 60);
  v10 = a2;
LABEL_2:
  while (1)
  {
    v11 = v10;
    v12 = *(_DWORD *)(v10 + 8);
    if (v12 != 11)
      break;
    v10 = *(_QWORD *)(v11 + 24);
    if (!v10)
      goto LABEL_195;
  }
  switch(v12)
  {
    case 1:
      if (v11 != v2 && *(_DWORD *)(v3 + 56) == 1 && *__xmlIndentTreeOutput())
      {
        v13 = *(_DWORD *)(v3 + 52);
        if (v13 >= *(_DWORD *)(v3 + 124))
          v13 = *(_DWORD *)(v3 + 124);
        xmlOutputBufferWrite((xmlOutputBufferPtr)v5, v13 * *(_DWORD *)(v3 + 128), buf);
      }
      xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, "<");
      v14 = *(_QWORD *)(v11 + 72);
      if (v14)
      {
        v15 = *(const char **)(v14 + 24);
        if (v15)
        {
          xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v15);
          xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v9);
        }
      }
      xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
      for (i = *(_QWORD **)(v11 + 96); i; i = (_QWORD *)*i)
        xmlNsDumpOutput(*(_QWORD *)(v3 + 40), (uint64_t)i, v3);
      if (xmlStrEqual(*(const xmlChar **)(v11 + 16), (const xmlChar *)"html")
        && !*(_QWORD *)(v11 + 72)
        && !*(_QWORD *)(v11 + 96))
      {
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, " xmlns=\"http://www.w3.org/1999/xhtml\"");
      }
      v17 = *(_QWORD *)(v11 + 88);
      if (!v17)
        goto LABEL_103;
      v18 = 0;
      v19 = 0;
      out = *(xmlOutputBuffer **)(v3 + 40);
      v76 = 0;
      v77 = *(_QWORD *)(v17 + 40);
      str = 0;
      while (1)
      {
        if (!*(_QWORD *)(v17 + 72))
        {
          if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"id"))
          {
            v18 = v17;
            goto LABEL_39;
          }
          if (!*(_QWORD *)(v17 + 72))
          {
            if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"name"))
            {
              str = (char *)v17;
              goto LABEL_39;
            }
            if (!*(_QWORD *)(v17 + 72))
            {
              if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"lang"))
              {
                v76 = v17;
                goto LABEL_39;
              }
              if (!*(_QWORD *)(v17 + 72))
              {
LABEL_29:
                v20 = *(_QWORD *)(v17 + 24);
                if (!v20 || (v21 = *(_BYTE **)(v20 + 80)) == 0 || !*v21)
                {
                  if (htmlIsBooleanAttr(*(const xmlChar **)(v17 + 16)))
                  {
                    v22 = *(xmlNode **)(v17 + 24);
                    if (v22)
                      xmlFreeNode(v22);
                    v23 = xmlNewText(*(const xmlChar **)(v17 + 16));
                    *(_QWORD *)(v17 + 24) = v23;
                    if (v23)
                      v23->parent = (_xmlNode *)v17;
                  }
                }
                goto LABEL_39;
              }
            }
          }
        }
        if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"lang")
          && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v17 + 72) + 24), (const xmlChar *)"xml"))
        {
          v19 = v17;
        }
        else if (!*(_QWORD *)(v17 + 72))
        {
          goto LABEL_29;
        }
LABEL_39:
        xmlAttrDumpOutput(v3, v17);
        v17 = *(_QWORD *)(v17 + 48);
        if (!v17)
        {
          if (str)
          {
            if (!v18)
            {
              if (v77)
              {
                v38 = *(const xmlChar **)(v77 + 16);
                if (v38)
                {
                  if (xmlStrEqual(v38, (const xmlChar *)"a")
                    || xmlStrEqual(*(const xmlChar **)(v77 + 16), (const xmlChar *)"p")
                    || xmlStrEqual(*(const xmlChar **)(v77 + 16), (const xmlChar *)"div")
                    || xmlStrEqual(*(const xmlChar **)(v77 + 16), (const xmlChar *)"img")
                    || xmlStrEqual(*(const xmlChar **)(v77 + 16), (const xmlChar *)"map")
                    || xmlStrEqual(*(const xmlChar **)(v77 + 16), (const xmlChar *)"applet")
                    || xmlStrEqual(*(const xmlChar **)(v77 + 16), (const xmlChar *)"form")
                    || xmlStrEqual(*(const xmlChar **)(v77 + 16), (const xmlChar *)"frame")
                    || xmlStrEqual(*(const xmlChar **)(v77 + 16), (const xmlChar *)"iframe"))
                  {
                    xmlOutputBufferWrite(out, 5, " id=\"");
                    xmlAttrSerializeContent((uint64_t)out, (uint64_t)str);
                    xmlOutputBufferWrite(out, 1, "\"");
                  }
                }
              }
            }
          }
          v39 = v76;
          if (v76 && !v19)
          {
            xmlOutputBufferWrite(out, 11, " xml:lang=\"");
            goto LABEL_102;
          }
          if (v19 && !v76)
          {
            xmlOutputBufferWrite(out, 7, " lang=\"");
            v39 = v19;
LABEL_102:
            xmlAttrSerializeContent((uint64_t)out, v39);
            xmlOutputBufferWrite(out, 1, "\"");
          }
LABEL_103:
          v40 = *(_QWORD *)(v11 + 40);
          if (v40
            && *(_QWORD *)(v40 + 40) == *(_QWORD *)(v11 + 64)
            && xmlStrEqual(*(const xmlChar **)(v11 + 16), (const xmlChar *)"head")
            && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v11 + 40) + 16), (const xmlChar *)"html"))
          {
            v41 = v11 + 24;
            v53 = *(const xmlNode **)(v11 + 24);
            if (v53)
            {
              stra = (char *)(v11 + 24);
              do
              {
                if (xmlStrEqual(v53->name, (const xmlChar *)"meta"))
                {
                  Prop = xmlGetProp(v53, (const xmlChar *)"http-equiv");
                  if (Prop)
                  {
                    v55 = Prop;
                    v56 = xmlStrcasecmp(Prop, (const xmlChar *)"Content-Type");
                    xmlFree(v55);
                    if (!v56)
                      goto LABEL_105;
                  }
                }
                v53 = v53->next;
              }
              while (v53);
              v41 = v11 + 24;
              if (*(_QWORD *)stra)
              {
                xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
                v7 = "</";
                if (*(_DWORD *)(v3 + 56) == 1)
                {
                  xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
                  if (*__xmlIndentTreeOutput())
                  {
                    v57 = *(_DWORD *)(v3 + 52);
                    if (v57 < *(_DWORD *)(v3 + 124))
                      v58 = v57 + 1;
                    else
                      v58 = *(_DWORD *)(v3 + 124);
                    xmlOutputBufferWrite((xmlOutputBufferPtr)v5, v58 * *(_DWORD *)(v3 + 128), buf);
                  }
                }
                xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=");
                v59 = *(const char **)(v3 + 24);
                v9 = ":";
                if (v59)
                  xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v59);
                else
                  xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 5, "UTF-8");
                result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 4, "\" />");
LABEL_107:
                v42 = stra;
                if (*(_DWORD *)(v3 + 56) == 1)
                {
                  v43 = *(_QWORD *)stra;
                  if (*(_QWORD *)stra)
                  {
                    while (1)
                    {
                      v44 = *(_DWORD *)(v43 + 8);
                      if (v44 == 5 || v44 == 3)
                        break;
                      v43 = *(_QWORD *)(v43 + 48);
                      if (!v43)
                        goto LABEL_114;
                    }
                    *(_DWORD *)(v3 + 56) = 0;
                    v4 = v11;
                  }
                  else
                  {
LABEL_114:
                    result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
                    v42 = stra;
                  }
                }
                v62 = *(_DWORD *)(v3 + 52);
                if ((v62 & 0x80000000) == 0)
                  *(_DWORD *)(v3 + 52) = v62 + 1;
                v10 = *(_QWORD *)v42;
                goto LABEL_2;
              }
              v47 = 0;
              v46 = 1;
            }
            else
            {
              v47 = 0;
              v46 = 1;
            }
          }
          else
          {
LABEL_105:
            v41 = v11 + 24;
            if (*(_QWORD *)(v11 + 24))
            {
              stra = (char *)(v11 + 24);
              result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
              v7 = "</";
              v9 = ":";
              goto LABEL_107;
            }
            v46 = 0;
            v47 = 1;
          }
          v48 = *(_QWORD *)(v11 + 72);
          if (v48)
          {
            if (!*(_QWORD *)(v48 + 24) && *(_DWORD *)(v11 + 8) == 1)
            {
              strc = v46;
              v49 = v47;
              v50 = (_QWORD *)v41;
              v51 = xmlStrEqual(*(const xmlChar **)(v48 + 16), (const xmlChar *)"http://www.w3.org/1999/xhtml");
              v52 = v50;
              v47 = v49;
              v46 = strc;
              if (v51)
              {
                if (!*v52)
                {
LABEL_140:
                  v60 = *(const xmlChar **)(v11 + 16);
                  switch(*v60)
                  {
                    case 'a':
                      v61 = "area";
                      goto LABEL_162;
                    case 'b':
                      if (xmlStrEqual(v60, (const xmlChar *)"br")
                        || xmlStrEqual(*(const xmlChar **)(v11 + 16), (const xmlChar *)"base"))
                      {
                        goto LABEL_158;
                      }
                      v60 = *(const xmlChar **)(v11 + 16);
                      v61 = "basefont";
                      goto LABEL_162;
                    case 'c':
                      v61 = "col";
                      goto LABEL_162;
                    case 'f':
                      v61 = "frame";
                      goto LABEL_162;
                    case 'h':
                      v61 = "hr";
                      goto LABEL_162;
                    case 'i':
                      if (xmlStrEqual(v60, (const xmlChar *)"img")
                        || xmlStrEqual(*(const xmlChar **)(v11 + 16), (const xmlChar *)"input"))
                      {
LABEL_158:
                        v63 = 1;
                      }
                      else
                      {
                        v60 = *(const xmlChar **)(v11 + 16);
                        v61 = "isindex";
LABEL_162:
                        v63 = xmlStrEqual(v60, (const xmlChar *)v61) != 0;
                      }
                      if ((v47 & v63) != 1)
                        goto LABEL_165;
                      result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 3, " />");
                      v7 = "</";
                      v9 = ":";
                      break;
                    case 'l':
                      v61 = "link";
                      goto LABEL_162;
                    case 'm':
                      v61 = "meta";
                      goto LABEL_162;
                    case 'p':
                      v61 = "param";
                      goto LABEL_162;
                    default:
                      goto LABEL_165;
                  }
                  goto LABEL_195;
                }
              }
            }
          }
          else if (*(_DWORD *)(v11 + 8) == 1)
          {
            goto LABEL_140;
          }
LABEL_165:
          xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
          v9 = ":";
          if (v46)
          {
            if (*(_DWORD *)(v3 + 56) == 1)
            {
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
              if (*__xmlIndentTreeOutput())
              {
                v64 = *(_DWORD *)(v3 + 52);
                if (v64 < *(_DWORD *)(v3 + 124))
                  v65 = v64 + 1;
                else
                  v65 = *(_DWORD *)(v3 + 124);
                xmlOutputBufferWrite((xmlOutputBufferPtr)v5, v65 * *(_DWORD *)(v3 + 128), buf);
              }
            }
            xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=");
            v66 = *(const char **)(v3 + 24);
            if (v66)
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v66);
            else
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 5, "UTF-8");
            xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 4, "\" />");
            if (*(_DWORD *)(v3 + 56) == 1)
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
          }
          v7 = "</";
          xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 2, "</");
          v67 = *(_QWORD *)(v11 + 72);
          if (v67)
          {
            v68 = *(const char **)(v67 + 24);
            if (v68)
            {
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v68);
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, ":");
            }
          }
          xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
          result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
          goto LABEL_195;
        }
      }
    case 2:
      result = xmlAttrDumpOutput(v3, v11);
      goto LABEL_195;
    case 3:
      v24 = *(const xmlChar **)(v11 + 80);
      if (v24)
      {
        if (*(const xmlChar **)(v11 + 16) != "textnoenc" || "text" == "textnoenc")
          result = xmlOutputBufferWriteEscape((xmlOutputBufferPtr)v5, v24, *(xmlCharEncodingOutputFunc *)(v3 + 136));
        else
          result = xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, (const char *)v24);
      }
      goto LABEL_195;
    case 4:
      v26 = *(char **)(v11 + 80);
      if (!v26 || (v27 = *v26, v28 = *(char **)(v11 + 80), v82 = v2, !*v26))
      {
        result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 12, "<![CDATA[]]>");
        goto LABEL_195;
      }
      while (2)
      {
        if (v27 == 93)
        {
          if (v28[1] == 93)
          {
            v29 = v9;
            v30 = v6;
            v31 = v8;
            v32 = v7;
            v33 = v28 + 2;
            if (v28[2] == 62)
            {
              v34 = v26;
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 9, "<![CDATA[");
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, (_DWORD)v33 - (_DWORD)v34, v34);
              result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 3, "]]>");
              v26 = v33;
              v28 = v33;
            }
            v7 = v32;
            v8 = v31;
            v6 = v30;
            v9 = v29;
            v2 = v82;
          }
          goto LABEL_66;
        }
        if (v27)
        {
LABEL_66:
          v35 = *++v28;
          v27 = v35;
          continue;
        }
        break;
      }
      if (v26 != v28)
      {
        strb = v26;
        xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 9, "<![CDATA[");
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, strb);
        result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 3, "]]>");
      }
LABEL_195:
      while (v11 != v2)
      {
        if (*(_DWORD *)(v3 + 56) == 1)
          result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v6);
        v10 = *(_QWORD *)(v11 + 48);
        if (v10)
          goto LABEL_2;
        v11 = *(_QWORD *)(v11 + 40);
        if (!v11)
          return result;
        if (*(_DWORD *)(v11 + 8) == 1)
        {
          v69 = *(_DWORD *)(v3 + 52);
          v70 = __OFSUB__(v69, 1);
          v71 = v69 - 1;
          if (v71 < 0 == v70)
            *(_DWORD *)(v3 + 52) = v71;
          if (*__xmlIndentTreeOutput() && *(_DWORD *)(v3 + 56) == 1)
          {
            v72 = *(_DWORD *)(v3 + 52);
            if (v72 >= *(_DWORD *)(v3 + 124))
              v72 = *(_DWORD *)(v3 + 124);
            xmlOutputBufferWrite((xmlOutputBufferPtr)v5, v72 * *(_DWORD *)(v3 + 128), buf);
          }
          xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 2, v7);
          v73 = *(_QWORD *)(v11 + 72);
          if (v73)
          {
            v74 = *(const char **)(v73 + 24);
            if (v74)
            {
              xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, v74);
              xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v9);
            }
          }
          xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
          result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, v8);
          if (v11 == v4)
          {
            v4 = 0;
            *(_DWORD *)(v3 + 56) = v84;
          }
        }
      }
      return result;
    case 5:
      xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, "&");
      xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
      result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, ";");
      goto LABEL_195;
    case 7:
      v36 = v7;
      v37 = *(_QWORD *)(v11 + 80);
      xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 2, "<?");
      xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 16));
      if (v37 && *(_QWORD *)(v11 + 80))
      {
        xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 1, " ");
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 80));
      }
      result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 2, "?>");
      v7 = v36;
      goto LABEL_195;
    case 8:
      if (*(_QWORD *)(v11 + 80))
      {
        xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 4, "<!--");
        xmlOutputBufferWriteString((xmlOutputBufferPtr)v5, *(const char **)(v11 + 80));
        result = xmlOutputBufferWrite((xmlOutputBufferPtr)v5, 3, "-->");
      }
      goto LABEL_195;
    case 9:
    case 13:
      result = xmlDocContentDumpOutput(v3, v11);
      goto LABEL_195;
    case 14:
      result = xmlDtdDumpOutput(v3, v11);
      goto LABEL_195;
    case 15:
      result = (uint64_t)xmlBufDumpElementDecl(*(uint64x2_t **)(v5 + 32), (xmlElement *)v11);
      goto LABEL_195;
    case 16:
      result = (uint64_t)xmlBufDumpAttributeDecl(*(uint64x2_t **)(v5 + 32), (xmlAttribute *)v11);
      goto LABEL_195;
    case 17:
      result = (uint64_t)xmlBufDumpEntityDecl(*(uint64x2_t **)(v5 + 32), (xmlEntity *)v11);
      goto LABEL_195;
    case 18:
      result = xmlNsDumpOutput(*(_QWORD *)(v3 + 40), v11, v3);
      goto LABEL_195;
    default:
      goto LABEL_195;
  }
}

int xmlSaveFlush(xmlSaveCtxtPtr ctxt)
{
  xmlOutputBuffer *v1;

  if (ctxt && (v1 = (xmlOutputBuffer *)*((_QWORD *)ctxt + 5)) != 0)
    return xmlOutputBufferFlush(v1);
  else
    return -1;
}

int xmlSaveClose(xmlSaveCtxtPtr ctxt)
{
  xmlOutputBuffer *v2;
  int v3;

  if (!ctxt)
    return -1;
  v2 = (xmlOutputBuffer *)*((_QWORD *)ctxt + 5);
  if (v2)
    v3 = xmlOutputBufferFlush(v2);
  else
    v3 = -1;
  xmlFreeSaveCtxt(ctxt);
  return v3;
}

int xmlSaveSetEscape(xmlSaveCtxtPtr ctxt, xmlCharEncodingOutputFunc escape)
{
  int result;

  if (!ctxt)
    return -1;
  result = 0;
  *((_QWORD *)ctxt + 17) = escape;
  return result;
}

int xmlSaveSetAttrEscape(xmlSaveCtxtPtr ctxt, xmlCharEncodingOutputFunc escape)
{
  int result;

  if (!ctxt)
    return -1;
  result = 0;
  *((_QWORD *)ctxt + 18) = escape;
  return result;
}

uint64_t xmlSerializeHexCharRef(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  BOOL v5;
  uint64_t result;

  *(_WORD *)a1 = 8998;
  *(_BYTE *)(a1 + 2) = 120;
  if ((int)a2 >= 16)
  {
    if (a2 >> 20)
      v3 = a1 + 8;
    else
      v3 = a1 + 7;
    if (HIWORD(a2))
      v2 = v3;
    else
      v2 = a1 + 6;
    if (a2 <= 0xFFF)
      v2 = a1 + 5;
    if (a2 <= 0xFF)
      v2 = a1 + 4;
  }
  else
  {
    v2 = a1 + 3;
    if ((int)a2 < 1)
      goto LABEL_16;
  }
  v4 = (_BYTE *)v2;
  do
  {
    *v4-- = byte_1B0862840[a2 & 0xF];
    v5 = a2 > 0xF;
    a2 >>= 4;
  }
  while (v5);
LABEL_16:
  result = v2 + 2;
  *(_WORD *)(v2 + 1) = 59;
  return result;
}

void xmlAttrSerializeTxtContent(xmlBufferPtr buf, xmlDocPtr doc, xmlAttrPtr attr, const xmlChar *string)
{
  uint32x2_t *v7;
  uint64_t v8;

  if (buf && string)
  {
    v7 = xmlBufFromBuffer((uint32x2_t *)buf);
    if (v7)
    {
      v8 = (uint64_t)v7;
      xmlBufAttrSerializeTxtContent((uint64x2_t *)v7, (uint64_t)doc, (uint64_t)attr, string);
      xmlBufBackToBuffer(v8);
    }
  }
}

int xmlNodeDump(xmlBufferPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format)
{
  int result;
  uint32x2_t *v11;
  uint64_t v12;
  size_t v13;

  result = -1;
  if (buf && cur)
  {
    v11 = xmlBufFromBuffer((uint32x2_t *)buf);
    if (v11)
    {
      v12 = (uint64_t)v11;
      v13 = xmlBufNodeDump((xmlBufPtr)v11, doc, cur, level, format);
      xmlBufBackToBuffer(v12);
      if (v13 >> 31)
        return -1;
      else
        return v13;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

size_t xmlBufNodeDump(xmlBufPtr buf, xmlDocPtr doc, xmlNodePtr cur, int level, int format)
{
  size_t result;
  xmlOutputBuffer *v11;
  xmlOutputBuffer *v12;
  int v13;
  unsigned int AllocationScheme;

  xmlInitParser();
  result = -1;
  if (buf && cur)
  {
    v11 = (xmlOutputBuffer *)xmlMalloc(0x38uLL);
    if (v11)
    {
      v12 = v11;
      *(_OWORD *)&v11->closecallback = 0u;
      *(_OWORD *)&v11->buffer = 0u;
      *(_QWORD *)&v11->written = 0;
      *(_OWORD *)&v11->context = 0u;
      v11->buffer = buf;
      v11->written = 0;
      v13 = xmlBufUse(buf);
      AllocationScheme = xmlBufGetAllocationScheme((uint64_t)buf);
      xmlBufSetAllocationScheme((uint64_t)buf, 0);
      xmlNodeDumpOutput(v12, doc, cur, level, format, 0);
      xmlBufSetAllocationScheme((uint64_t)buf, AllocationScheme);
      xmlFree(v12);
      return (int)(xmlBufUse(buf) - v13);
    }
    else
    {
      __xmlSimpleError(7u, 2, 0, 0, (const xmlChar *)"creating buffer");
      return -1;
    }
  }
  return result;
}

void xmlElemDump(FILE *f, xmlDocPtr doc, xmlNodePtr cur)
{
  xmlOutputBuffer *File;
  xmlOutputBuffer *v7;

  xmlInitParser();
  if (cur)
  {
    File = xmlOutputBufferCreateFile(f, 0);
    if (File)
    {
      v7 = File;
      if (doc && doc->type == XML_HTML_DOCUMENT_NODE)
        htmlNodeDumpOutput(File, doc, cur, 0);
      else
        xmlNodeDumpOutput(File, doc, cur, 0, 1, 0);
      xmlOutputBufferClose(v7);
    }
  }
}

void xmlDocDumpFormatMemoryEnc(xmlDocPtr out_doc, xmlChar **doc_txt_ptr, int *doc_txt_len, const char *txt_encoding, int format)
{
  const char *encoding;
  xmlCharEncodingHandler *CharEncodingHandler;
  xmlOutputBufferPtr v11;
  xmlOutputBuffer *v12;
  xmlBuf *conv;
  int v14;
  int v15;
  xmlChar *v16;
  int v17;
  int v18;
  __int128 v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  xmlOutputBufferPtr v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (doc_txt_ptr)
  {
    encoding = txt_encoding;
    *doc_txt_ptr = 0;
    if (doc_txt_len)
      *doc_txt_len = 0;
    if (out_doc)
    {
      if (txt_encoding || (encoding = (const char *)out_doc->encoding) != 0)
      {
        CharEncodingHandler = xmlFindCharEncodingHandler(encoding);
        if (!CharEncodingHandler)
        {
          __xmlSimpleError(7u, 1403, (uint64_t)out_doc, "unknown encoding %s\n", (const xmlChar *)encoding);
          return;
        }
      }
      else
      {
        CharEncodingHandler = 0;
      }
      v11 = xmlAllocOutputBuffer(CharEncodingHandler);
      if (!v11)
      {
        __xmlSimpleError(7u, 2, 0, 0, (const xmlChar *)"creating buffer");
        return;
      }
      v12 = v11;
      v22 = 0;
      v24 = 0u;
      v30 = 0;
      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      v19 = 0u;
      v20 = 0;
      v23 = v11;
      DWORD2(v24) = format != 0;
      v21 = encoding;
      xmlSaveCtxtInit((int *)&v19);
      LODWORD(v24) = v24 | 0x20;
      xmlDocContentDumpOutput((uint64_t)&v19, (uint64_t)out_doc);
      xmlOutputBufferFlush(v12);
      conv = v12->conv;
      if (conv)
      {
        v14 = xmlBufUse(conv);
        v15 = v14;
        if (doc_txt_len)
        {
          *doc_txt_len = v14;
          v16 = xmlBufContent(v12->conv);
          v15 = 0;
          v17 = *doc_txt_len;
        }
        else
        {
          v16 = xmlBufContent(v12->conv);
          v17 = v15;
        }
      }
      else
      {
        v18 = xmlBufUse(v12->buffer);
        v15 = v18;
        if (doc_txt_len)
        {
          *doc_txt_len = v18;
          v16 = xmlBufContent(v12->buffer);
          v15 = 0;
          v17 = *doc_txt_len;
        }
        else
        {
          v16 = xmlBufContent(v12->buffer);
          v17 = v15;
        }
      }
      *doc_txt_ptr = xmlStrndup(v16, v17);
      xmlOutputBufferClose(v12);
      if (!*doc_txt_ptr)
      {
        if (doc_txt_len)
        {
          if (*doc_txt_len < 1)
            return;
          *doc_txt_len = 0;
        }
        else if (v15 <= 0)
        {
          return;
        }
        __xmlSimpleError(7u, 2, 0, 0, (const xmlChar *)"creating output");
      }
    }
  }
  else if (doc_txt_len)
  {
    *doc_txt_len = 0;
  }
}

void xmlDocDumpMemory(xmlDocPtr cur, xmlChar **mem, int *size)
{
  xmlDocDumpFormatMemoryEnc(cur, mem, size, 0, 0);
}

void xmlDocDumpFormatMemory(xmlDocPtr cur, xmlChar **mem, int *size, int format)
{
  xmlDocDumpFormatMemoryEnc(cur, mem, size, 0, format);
}

void xmlDocDumpMemoryEnc(xmlDocPtr out_doc, xmlChar **doc_txt_ptr, int *doc_txt_len, const char *txt_encoding)
{
  xmlDocDumpFormatMemoryEnc(out_doc, doc_txt_ptr, doc_txt_len, txt_encoding, 0);
}

int xmlDocFormatDump(FILE *f, xmlDocPtr cur, int format)
{
  const xmlChar *encoding;
  xmlCharEncodingHandler *CharEncodingHandler;
  xmlOutputBufferPtr File;
  xmlOutputBuffer *v9;
  __int128 v11;
  uint64_t v12;
  const xmlChar *v13;
  uint64_t v14;
  xmlOutputBufferPtr v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!cur)
    return -1;
  encoding = cur->encoding;
  if (encoding)
  {
    CharEncodingHandler = xmlFindCharEncodingHandler((const char *)cur->encoding);
    if (!CharEncodingHandler)
    {
      xmlFree((void *)cur->encoding);
      encoding = 0;
      CharEncodingHandler = 0;
      cur->encoding = 0;
    }
  }
  else
  {
    CharEncodingHandler = 0;
  }
  File = xmlOutputBufferCreateFile(f, CharEncodingHandler);
  if (!File)
    return -1;
  v9 = File;
  v14 = 0;
  v16 = 0u;
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v17 = 0u;
  v11 = 0u;
  v12 = 0;
  v15 = File;
  DWORD2(v16) = format != 0;
  v13 = encoding;
  xmlSaveCtxtInit((int *)&v11);
  LODWORD(v16) = v16 | 0x20;
  xmlDocContentDumpOutput((uint64_t)&v11, (uint64_t)cur);
  return xmlOutputBufferClose(v9);
}

int xmlDocDump(FILE *f, xmlDocPtr cur)
{
  return xmlDocFormatDump(f, cur, 0);
}

int xmlSaveFileTo(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding)
{
  __int128 v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  xmlOutputBufferPtr v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (buf)
  {
    if (cur)
    {
      v9 = 0;
      v11 = 0u;
      v17 = 0;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v12 = 0u;
      v6 = 0u;
      v7 = 0;
      v10 = buf;
      DWORD2(v11) = 0;
      v8 = encoding;
      xmlSaveCtxtInit((int *)&v6);
      LODWORD(v11) = v11 | 0x20;
      xmlDocContentDumpOutput((uint64_t)&v6, (uint64_t)cur);
      return xmlOutputBufferClose(buf);
    }
    xmlOutputBufferClose(buf);
  }
  return -1;
}

int xmlSaveFormatFileTo(xmlOutputBufferPtr buf, xmlDocPtr cur, const char *encoding, int format)
{
  __int128 v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  xmlOutputBufferPtr v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (buf)
  {
    if (cur && (cur->type | 4) == 0xD)
    {
      v10 = 0;
      v12 = 0u;
      v18 = 0;
      v16 = 0u;
      v17 = 0u;
      v14 = 0u;
      v15 = 0u;
      v13 = 0u;
      v7 = 0u;
      v8 = 0;
      v11 = buf;
      DWORD2(v12) = format != 0;
      v9 = encoding;
      xmlSaveCtxtInit((int *)&v7);
      LODWORD(v12) = v12 | 0x20;
      xmlDocContentDumpOutput((uint64_t)&v7, (uint64_t)cur);
      return xmlOutputBufferClose(buf);
    }
    xmlOutputBufferClose(buf);
  }
  return -1;
}

int xmlSaveFormatFileEnc(const char *filename, xmlDocPtr cur, const char *encoding, int format)
{
  const char *v5;
  xmlCharEncodingHandler *CharEncodingHandler;
  int compression;
  xmlOutputBufferPtr v10;
  xmlOutputBuffer *v11;
  __int128 v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  xmlOutputBufferPtr v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (!cur)
    return -1;
  v5 = encoding;
  if (encoding || (v5 = (const char *)cur->encoding) != 0)
  {
    CharEncodingHandler = xmlFindCharEncodingHandler(v5);
    if (!CharEncodingHandler)
      return -1;
  }
  else
  {
    CharEncodingHandler = 0;
  }
  compression = cur->compression;
  if (compression < 0)
  {
    compression = xmlGetCompressMode();
    cur->compression = compression;
  }
  v10 = xmlOutputBufferCreateFilename(filename, CharEncodingHandler, compression);
  if (v10)
  {
    v11 = v10;
    v16 = 0;
    v18 = 0u;
    v24 = 0;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v19 = 0u;
    v13 = 0u;
    v14 = 0;
    v17 = v10;
    DWORD2(v18) = format != 0;
    v15 = v5;
    xmlSaveCtxtInit((int *)&v13);
    LODWORD(v18) = v18 | 0x20;
    xmlDocContentDumpOutput((uint64_t)&v13, (uint64_t)cur);
    return xmlOutputBufferClose(v11);
  }
  return -1;
}

int xmlSaveFileEnc(const char *filename, xmlDocPtr cur, const char *encoding)
{
  return xmlSaveFormatFileEnc(filename, cur, encoding, 0);
}

int xmlSaveFormatFile(const char *filename, xmlDocPtr cur, int format)
{
  return xmlSaveFormatFileEnc(filename, cur, 0, format);
}

int xmlSaveFile(const char *filename, xmlDocPtr cur)
{
  return xmlSaveFormatFileEnc(filename, cur, 0, 0);
}

xmlBufPtr xmlOutputBufferWriteWSNonSig(xmlBufPtr result, int a2)
{
  xmlBufPtr v2;
  int v4;
  int v5;
  int v6;
  int v7;

  if (result)
  {
    v2 = result;
    result = (xmlBufPtr)*((_QWORD *)result + 5);
    if (result)
    {
      result = (xmlBufPtr)xmlOutputBufferWrite((xmlOutputBufferPtr)result, 1, "\n");
      v4 = *((_DWORD *)v2 + 13) + a2;
      if (v4 >= 1)
      {
        v5 = 0;
        v6 = *((_DWORD *)v2 + 31);
        do
        {
          v7 = v4 - v5;
          if (v7 >= v6)
            v7 = v6;
          result = (xmlBufPtr)xmlOutputBufferWrite(*((xmlOutputBufferPtr *)v2 + 5), v7 * *((_DWORD *)v2 + 32), (const char *)v2 + 60);
          v6 = *((_DWORD *)v2 + 31);
          v5 += v6;
          v4 = *((_DWORD *)v2 + 13) + a2;
        }
        while (v5 < v4);
      }
    }
  }
  return result;
}

uint64_t xmlSaveSwitchEncoding(uint64_t a1, char *name)
{
  uint64_t v2;
  xmlCharEncodingHandlerPtr CharEncodingHandler;
  _QWORD *v6;
  const char *v7;
  int v8;
  const char *v9;

  if (!name)
    return 0;
  v2 = *(_QWORD *)(a1 + 40);
  if (*(_QWORD *)(v2 + 24) || *(_QWORD *)(v2 + 40))
    return 0;
  CharEncodingHandler = xmlFindCharEncodingHandler(name);
  *(_QWORD *)(v2 + 24) = CharEncodingHandler;
  if (CharEncodingHandler)
  {
    v6 = xmlBufCreate();
    *(_QWORD *)(v2 + 40) = v6;
    if (v6)
    {
      xmlCharEncOutput((_QWORD *)v2, 1);
      return 0;
    }
    xmlCharEncCloseFunc(*(xmlCharEncodingHandler **)(v2 + 24));
    v9 = "creating encoding buffer";
    v8 = 2;
    v7 = 0;
  }
  else
  {
    v7 = "unknown encoding %s\n";
    v8 = 1403;
    v9 = name;
  }
  __xmlSimpleError(7u, v8, 0, v7, (const xmlChar *)v9);
  return 0xFFFFFFFFLL;
}

uint64_t xmlEscapeEntities(_BYTE *a1, int *a2, unsigned __int8 *a3, int *a4)
{
  int v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BYTE *v11;
  unsigned __int8 *v12;
  uint64_t result;
  unint64_t v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  int v21;
  xmlGenericErrorFunc v22;
  void **v23;

  v5 = (int)a3;
  v7 = (int)a1;
  v8 = *a2;
  v9 = *a4;
  v10 = (int)v9 < 1 || (int)v8 < 1;
  LODWORD(v11) = (_DWORD)a1;
  LODWORD(v12) = (_DWORD)a3;
  if (v10)
  {
LABEL_6:
    result = 0;
    goto LABEL_7;
  }
  v14 = (unint64_t)&a1[v8];
  v15 = (unint64_t)&a3[v9];
  v12 = a3;
  v11 = a1;
  while (1)
  {
    v16 = *v12;
    switch(v16)
    {
      case '&':
        if ((uint64_t)(v14 - (_QWORD)v11) < 5)
          goto LABEL_6;
        *(_DWORD *)v11 = 1886216486;
        v11[4] = 59;
        v11 += 5;
        goto LABEL_17;
      case '>':
        if ((uint64_t)(v14 - (_QWORD)v11) < 4)
          goto LABEL_6;
        *(_DWORD *)v11 = 997484326;
        v11 += 4;
        goto LABEL_17;
      case '<':
        if ((uint64_t)(v14 - (_QWORD)v11) < 4)
          goto LABEL_6;
        *(_DWORD *)v11 = 997485606;
        v11 += 4;
LABEL_17:
        ++v12;
        goto LABEL_27;
    }
    if ((char)v16 > 31 || v16 - 9 <= 1)
    {
      ++v12;
      *v11++ = v16;
      goto LABEL_27;
    }
    if ((v16 & 0x80) != 0)
    {
      if ((uint64_t)(v14 - (_QWORD)v11) < 11)
        goto LABEL_6;
      if (v16 <= 0xBF)
      {
        v20 = "string is not in UTF-8\n";
        v21 = 1400;
        goto LABEL_51;
      }
      if (v16 > 0xDF)
      {
        if (v16 > 0xEF)
        {
          if (v16 > 0xF7)
            goto LABEL_49;
          if ((uint64_t)(v15 - (_QWORD)v12) < 4)
            goto LABEL_6;
          v17 = ((v12[2] & 0x3F) << 6) | ((v12[1] & 0x3F | ((v16 & 7) << 6)) << 12);
          v18 = 3;
          v19 = 4;
        }
        else
        {
          if ((uint64_t)(v15 - (_QWORD)v12) < 3)
            goto LABEL_6;
          v17 = (v12[1] & 0x3F | ((v16 & 0xF) << 6)) << 6;
          v18 = 2;
          v19 = 3;
        }
      }
      else
      {
        if ((uint64_t)(v15 - (_QWORD)v12) < 2)
          goto LABEL_6;
        v17 = (v16 & 0x1F) << 6;
        v18 = 1;
        v19 = 2;
      }
      v16 = v17 | v12[v18] & 0x3F;
      v12 += v19;
      if (v16 > 0xFF)
      {
        if (v16 >> 11 >= 0x1B && (v16 - 57344) >> 1 >= 0xFFF && v16 - 0x10000 >= 0x100000)
        {
LABEL_49:
          v20 = "invalid character value\n";
          v21 = 1401;
LABEL_51:
          __xmlSimpleError(7u, v21, 0, v20, 0);
          goto LABEL_53;
        }
      }
      else if (v16 <= 0x1F && (v16 > 0xD || ((1 << v16) & 0x2600) == 0))
      {
        goto LABEL_49;
      }
      goto LABEL_26;
    }
    if (v16 > 0xD || ((1 << v16) & 0x2600) == 0)
      break;
    if ((uint64_t)(v14 - (_QWORD)v11) < 6)
      goto LABEL_6;
    ++v12;
LABEL_26:
    v11 = (_BYTE *)xmlSerializeHexCharRef((uint64_t)v11, v16);
LABEL_27:
    if ((unint64_t)v12 >= v15 || (unint64_t)v11 >= v14)
      goto LABEL_6;
  }
  v22 = *__xmlGenericError();
  v23 = __xmlGenericErrorContext();
  v22(*v23, "xmlEscapeEntities : char out of range\n");
LABEL_53:
  LODWORD(v12) = (_DWORD)v12 + 1;
  result = 0xFFFFFFFFLL;
LABEL_7:
  *a2 = (_DWORD)v11 - v7;
  *a4 = (_DWORD)v12 - v5;
  return result;
}

void xmlSaveClearEncoding(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 40);
  xmlOutputBufferFlush((xmlOutputBufferPtr)v1);
  xmlCharEncCloseFunc(*(xmlCharEncodingHandler **)(v1 + 24));
  xmlBufFree(*(_DWORD **)(v1 + 40));
  *(_QWORD *)(v1 + 24) = 0;
  *(_QWORD *)(v1 + 40) = 0;
}

uint64_t xmlDtdDumpOutput(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64x2_t **v5;
  xmlChar **v6;
  xmlNotationTable *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  const char *v11;
  xmlOutputBuffer *v12;
  int v13;

  if (!result)
    return result;
  if (!a2)
    return result;
  v3 = result;
  v4 = *(_QWORD *)(result + 40);
  if (!v4)
    return result;
  xmlOutputBufferWrite(*(xmlOutputBufferPtr *)(result + 40), 10, "<!DOCTYPE ");
  xmlOutputBufferWriteString((xmlOutputBufferPtr)v4, *(const char **)(a2 + 16));
  if (*(_QWORD *)(a2 + 104))
  {
    xmlOutputBufferWrite((xmlOutputBufferPtr)v4, 8, " PUBLIC ");
    v5 = (uint64x2_t **)(v4 + 32);
    xmlBufWriteQuotedString(*(uint64x2_t **)(v4 + 32), *(xmlChar **)(a2 + 104));
    xmlOutputBufferWrite((xmlOutputBufferPtr)v4, 1, " ");
    v6 = (xmlChar **)(a2 + 112);
  }
  else
  {
    v6 = (xmlChar **)(a2 + 112);
    if (!*(_QWORD *)(a2 + 112))
      goto LABEL_10;
    xmlOutputBufferWrite((xmlOutputBufferPtr)v4, 8, " SYSTEM ");
    v5 = (uint64x2_t **)(v4 + 32);
  }
  xmlBufWriteQuotedString(*v5, *v6);
LABEL_10:
  if (*(_QWORD *)(a2 + 96)
    || *(_QWORD *)(a2 + 80)
    || *(_QWORD *)(a2 + 88)
    || *(_QWORD *)(a2 + 72)
    || *(_QWORD *)(a2 + 120))
  {
    xmlOutputBufferWrite((xmlOutputBufferPtr)v4, 3, " [\n");
    v7 = *(xmlNotationTable **)(a2 + 72);
    if (v7)
    {
      v8 = *(_QWORD *)(a2 + 64);
      if (!v8 || *(_QWORD *)(v8 + 80) == a2)
        xmlBufDumpNotationTable(*(uint64x2_t **)(v4 + 32), v7);
    }
    v9 = *(_QWORD *)(v3 + 52);
    *(_QWORD *)(v3 + 52) = 0xFFFFFFFFLL;
    for (i = *(_QWORD *)(a2 + 24); i; i = *(_QWORD *)(i + 48))
      xmlNodeDumpOutputInternal(v3, i);
    *(_QWORD *)(v3 + 52) = v9;
    v11 = "]>";
    v12 = (xmlOutputBuffer *)v4;
    v13 = 2;
  }
  else
  {
    v11 = ">";
    v12 = (xmlOutputBuffer *)v4;
    v13 = 1;
  }
  return xmlOutputBufferWrite(v12, v13, v11);
}

xmlSchemaFacetPtr xmlSchemaNewFacet(void)
{
  xmlSchemaFacetPtr result;

  result = (xmlSchemaFacetPtr)xmlMalloc(0x48uLL);
  if (result)
  {
    result->regexp = 0;
    *(_OWORD *)&result->annot = 0u;
    *(_OWORD *)&result->fixed = 0u;
    *(_OWORD *)&result->type = 0u;
    *(_OWORD *)&result->value = 0u;
  }
  return result;
}

void xmlSchemaFreeWildcard(xmlSchemaWildcardPtr wildcard)
{
  xmlSchemaAnnotPtr annot;
  _xmlSchemaAnnot *next;
  _xmlSchemaAnnot *v4;
  xmlSchemaWildcardNsPtr nsSet;
  _xmlSchemaWildcardNs *v6;
  xmlSchemaWildcardNsPtr negNsSet;

  if (wildcard)
  {
    annot = wildcard->annot;
    if (annot)
    {
      next = annot->next;
      xmlFree(annot);
      if (next)
      {
        do
        {
          v4 = next->next;
          xmlFree(next);
          next = v4;
        }
        while (v4);
      }
    }
    nsSet = wildcard->nsSet;
    if (nsSet)
    {
      do
      {
        v6 = nsSet->next;
        xmlFree(nsSet);
        nsSet = v6;
      }
      while (v6);
    }
    negNsSet = wildcard->negNsSet;
    if (negNsSet)
      xmlFree(negNsSet);
    xmlFree(wildcard);
  }
}

void xmlSchemaFreeFacet(xmlSchemaFacetPtr facet)
{
  xmlSchemaVal *val;
  xmlRegexp *regexp;
  xmlSchemaAnnotPtr annot;
  _xmlSchemaAnnot *next;
  _xmlSchemaAnnot *v6;

  if (facet)
  {
    val = facet->val;
    if (val)
      xmlSchemaFreeValue(val);
    regexp = facet->regexp;
    if (regexp)
      xmlRegFreeRegexp(regexp);
    annot = facet->annot;
    if (annot)
    {
      next = annot->next;
      xmlFree(annot);
      if (next)
      {
        do
        {
          v6 = next->next;
          xmlFree(next);
          next = v6;
        }
        while (v6);
      }
    }
    xmlFree(facet);
  }
}

void xmlSchemaFreeType(xmlSchemaTypePtr type)
{
  xmlSchemaAnnotPtr annot;
  _xmlSchemaAnnot *next;
  _xmlSchemaAnnot *v4;
  xmlSchemaFacetPtr facets;
  _xmlSchemaFacet *v6;
  void **attrUses;
  xmlSchemaTypeLinkPtr memberTypes;
  _xmlSchemaTypeLink *v9;
  xmlSchemaFacetLinkPtr facetSet;
  _xmlSchemaFacetLink *v11;
  xmlRegexp *contModel;

  if (type)
  {
    annot = type->annot;
    if (annot)
    {
      next = annot->next;
      xmlFree(annot);
      if (next)
      {
        do
        {
          v4 = next->next;
          xmlFree(next);
          next = v4;
        }
        while (v4);
      }
    }
    facets = type->facets;
    if (facets)
    {
      do
      {
        v6 = facets->next;
        xmlSchemaFreeFacet(facets);
        facets = v6;
      }
      while (v6);
    }
    attrUses = (void **)type->attrUses;
    if (attrUses)
    {
      if (*attrUses)
        xmlFree(*attrUses);
      xmlFree(attrUses);
    }
    memberTypes = type->memberTypes;
    if (memberTypes)
    {
      do
      {
        v9 = memberTypes->next;
        xmlFree(memberTypes);
        memberTypes = v9;
      }
      while (v9);
    }
    facetSet = type->facetSet;
    if (facetSet)
    {
      do
      {
        v11 = facetSet->next;
        xmlFree(facetSet);
        facetSet = v11;
      }
      while (v11);
    }
    contModel = type->contModel;
    if (contModel)
      xmlRegFreeRegexp(contModel);
    xmlFree(type);
  }
}

void xmlSchemaFree(xmlSchemaPtr schema)
{
  xmlGenericErrorFunc v2;
  void **v3;
  xmlHashTable *notaDecl;
  xmlHashTable *attrDecl;
  xmlHashTable *attrgrpDecl;
  xmlHashTable *elemDecl;
  xmlHashTable *typeDecl;
  xmlHashTable *groupDecl;
  xmlHashTable *idcDef;
  xmlHashTable *schemasImports;
  int *includes;
  uint64_t v13;
  xmlSchemaAnnotPtr annot;
  _xmlSchemaAnnot *next;
  _xmlSchemaAnnot *v16;

  if (schema)
  {
    if (schema->volatiles)
    {
      v2 = *__xmlGenericError();
      v3 = __xmlGenericErrorContext();
      v2(*v3, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 4241);
    }
    notaDecl = schema->notaDecl;
    if (notaDecl)
      xmlHashFree(notaDecl, 0);
    attrDecl = schema->attrDecl;
    if (attrDecl)
      xmlHashFree(attrDecl, 0);
    attrgrpDecl = schema->attrgrpDecl;
    if (attrgrpDecl)
      xmlHashFree(attrgrpDecl, 0);
    elemDecl = schema->elemDecl;
    if (elemDecl)
      xmlHashFree(elemDecl, 0);
    typeDecl = schema->typeDecl;
    if (typeDecl)
      xmlHashFree(typeDecl, 0);
    groupDecl = schema->groupDecl;
    if (groupDecl)
      xmlHashFree(groupDecl, 0);
    idcDef = schema->idcDef;
    if (idcDef)
      xmlHashFree(idcDef, 0);
    schemasImports = schema->schemasImports;
    if (schemasImports)
      xmlHashFree(schemasImports, (xmlHashDeallocator)xmlSchemaBucketFreeEntry);
    includes = (int *)schema->includes;
    if (includes)
    {
      if (includes[2] >= 1)
      {
        v13 = 0;
        do
          xmlSchemaBucketFree(*(void **)(*(_QWORD *)includes + 8 * v13++));
        while (v13 < includes[2]);
      }
      if (*(_QWORD *)includes)
        xmlFree(*(void **)includes);
      xmlFree(includes);
    }
    annot = schema->annot;
    if (annot)
    {
      next = annot->next;
      xmlFree(annot);
      if (next)
      {
        do
        {
          v16 = next->next;
          xmlFree(next);
          next = v16;
        }
        while (v16);
      }
    }
    xmlDictFree(schema->dict);
    xmlFree(schema);
  }
}

void xmlSchemaBucketFree(void *a1)
{
  uint64_t *v2;
  void **v3;
  uint64_t *v4;
  void **v5;
  _QWORD *v6;
  _QWORD *v7;
  xmlDoc *v8;
  xmlSchema *v9;

  if (a1)
  {
    v2 = (uint64_t *)*((_QWORD *)a1 + 8);
    if (v2)
    {
      xmlSchemaComponentListFree(v2);
      v3 = (void **)*((_QWORD *)a1 + 8);
      if (v3)
      {
        if (*v3)
          xmlFree(*v3);
        xmlFree(v3);
      }
    }
    v4 = (uint64_t *)*((_QWORD *)a1 + 9);
    if (v4)
    {
      xmlSchemaComponentListFree(v4);
      v5 = (void **)*((_QWORD *)a1 + 9);
      if (v5)
      {
        if (*v5)
          xmlFree(*v5);
        xmlFree(v5);
      }
    }
    v6 = (_QWORD *)*((_QWORD *)a1 + 5);
    if (v6)
    {
      do
      {
        v7 = (_QWORD *)*v6;
        xmlFree(v6);
        v6 = v7;
      }
      while (v7);
    }
    if (!*((_DWORD *)a1 + 15))
    {
      v8 = (xmlDoc *)*((_QWORD *)a1 + 4);
      if (v8)
        xmlFreeDoc(v8);
    }
    if (*(_DWORD *)a1 == 1)
    {
      v9 = (xmlSchema *)*((_QWORD *)a1 + 10);
      if (v9)
        xmlSchemaFree(v9);
    }
    xmlFree(a1);
  }
}

void xmlSchemaDump(FILE *output, xmlSchemaPtr schema)
{
  const char *targetNamespace;
  xmlSchemaAnnotPtr annot;

  if (output)
  {
    if (schema)
    {
      fwrite("Schemas: ", 9uLL, 1uLL, output);
      if (schema->name)
        fprintf(output, "%s, ", (const char *)schema->name);
      else
        fwrite("no name, ", 9uLL, 1uLL, output);
      targetNamespace = (const char *)schema->targetNamespace;
      if (targetNamespace)
        fputs(targetNamespace, output);
      else
        fwrite("no target namespace", 0x13uLL, 1uLL, output);
      fputc(10, output);
      annot = schema->annot;
      if (annot)
        xmlSchemaAnnotDump(output, (uint64_t)annot);
      xmlHashScan(schema->typeDecl, (xmlHashScanner)xmlSchemaTypeDumpEntry, output);
      xmlHashScanFull(schema->elemDecl, (xmlHashScannerFull)xmlSchemaElementDump, output);
    }
    else
    {
      fwrite("Schemas: NULL\n", 0xEuLL, 1uLL, output);
    }
  }
}

void xmlSchemaAnnotDump(FILE *a1, uint64_t a2)
{
  xmlChar *Content;
  xmlChar *v4;

  Content = xmlNodeGetContent(*(const xmlNode **)(a2 + 8));
  if (Content)
  {
    v4 = Content;
    fprintf(a1, "  Annot: %s\n", (const char *)Content);
    xmlFree(v4);
  }
  else
  {
    fwrite("  Annot: empty\n", 0xFuLL, 1uLL, a1);
  }
}

void xmlSchemaElementDump(uint64_t a1, FILE *__stream, uint64_t a3, const char *a4)
{
  int v7;
  uint64_t v8;

  if (!a1)
    return;
  fwrite("Element", 7uLL, 1uLL, __stream);
  if ((*(_BYTE *)(a1 + 88) & 2) != 0)
    fwrite(" (global)", 9uLL, 1uLL, __stream);
  fprintf(__stream, ": '%s' ", *(const char **)(a1 + 16));
  if (a4)
    fprintf(__stream, "ns '%s'", a4);
  fputc(10, __stream);
  if ((*(_BYTE *)(a1 + 88) & 0x1D) != 0)
  {
    fwrite("  props: ", 9uLL, 1uLL, __stream);
    v7 = *(_DWORD *)(a1 + 88);
    if ((v7 & 8) != 0)
    {
      fwrite("[fixed] ", 8uLL, 1uLL, __stream);
      v7 = *(_DWORD *)(a1 + 88);
      if ((v7 & 4) == 0)
      {
LABEL_9:
        if ((v7 & 0x10) == 0)
          goto LABEL_10;
        goto LABEL_22;
      }
    }
    else if ((v7 & 4) == 0)
    {
      goto LABEL_9;
    }
    fwrite("[default] ", 0xAuLL, 1uLL, __stream);
    v7 = *(_DWORD *)(a1 + 88);
    if ((v7 & 0x10) == 0)
    {
LABEL_10:
      if ((v7 & 1) == 0)
      {
LABEL_12:
        fputc(10, __stream);
        goto LABEL_13;
      }
LABEL_11:
      fwrite("[nillable] ", 0xBuLL, 1uLL, __stream);
      goto LABEL_12;
    }
LABEL_22:
    fwrite("[abstract] ", 0xBuLL, 1uLL, __stream);
    if ((*(_DWORD *)(a1 + 88) & 1) == 0)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_13:
  if (*(_QWORD *)(a1 + 144))
    fprintf(__stream, "  value: '%s'\n", *(const char **)(a1 + 144));
  if (*(_QWORD *)(a1 + 104))
  {
    fprintf(__stream, "  type: '%s' ", *(const char **)(a1 + 104));
    if (*(_QWORD *)(a1 + 112))
      fprintf(__stream, "ns '%s'\n", *(const char **)(a1 + 112));
    else
      fputc(10, __stream);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 56);
    if (v8)
      xmlSchemaTypeDump(v8, __stream);
  }
  if (*(_QWORD *)(a1 + 120))
  {
    fprintf(__stream, "  substitutionGroup: '%s' ", *(const char **)(a1 + 120));
    if (*(_QWORD *)(a1 + 128))
      fprintf(__stream, "ns '%s'\n", *(const char **)(a1 + 128));
    else
      fputc(10, __stream);
  }
}

xmlSchemaParserCtxtPtr xmlSchemaNewParserCtxt(const char *URL)
{
  xmlSchemaParserCtxt *v2;
  xmlDict *v3;

  if (!URL)
    return 0;
  v2 = (xmlSchemaParserCtxt *)xmlSchemaParserCtxtCreate();
  if (v2)
  {
    v3 = xmlDictCreate();
    *((_QWORD *)v2 + 19) = v3;
    *((_QWORD *)v2 + 10) = xmlDictLookup(v3, (const xmlChar *)URL, -1);
  }
  return v2;
}

_QWORD *xmlSchemaParserCtxtCreate()
{
  _OWORD *v0;
  _QWORD *v1;
  _QWORD *v2;

  v0 = xmlMalloc(0xF0uLL);
  v1 = v0;
  if (v0)
  {
    v0[13] = 0u;
    v0[14] = 0u;
    v0[11] = 0u;
    v0[12] = 0u;
    v0[9] = 0u;
    v0[10] = 0u;
    v0[7] = 0u;
    v0[8] = 0u;
    v0[5] = 0u;
    v0[6] = 0u;
    v0[3] = 0u;
    v0[4] = 0u;
    v0[1] = 0u;
    v0[2] = 0u;
    *v0 = 0u;
    *(_DWORD *)v0 = 1;
    v2 = xmlSchemaItemListCreate();
    v1[29] = v2;
    if (!v2)
    {
      xmlFree(v1);
      return 0;
    }
  }
  else
  {
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating schema parser context");
  }
  return v1;
}

xmlSchemaParserCtxtPtr xmlSchemaNewMemParserCtxt(const char *buffer, int size)
{
  xmlSchemaParserCtxt *v2;
  xmlSchemaParserCtxt *v5;

  v2 = 0;
  if (buffer)
  {
    if (size >= 1)
    {
      v5 = (xmlSchemaParserCtxt *)xmlSchemaParserCtxtCreate();
      v2 = v5;
      if (v5)
      {
        *((_QWORD *)v5 + 13) = buffer;
        *((_DWORD *)v5 + 28) = size;
        *((_QWORD *)v5 + 19) = xmlDictCreate();
      }
    }
  }
  return v2;
}

xmlSchemaParserCtxtPtr xmlSchemaNewDocParserCtxt(xmlDocPtr doc)
{
  _QWORD *v2;
  _QWORD *v3;

  if (!doc)
    return 0;
  v2 = xmlSchemaParserCtxtCreate();
  v3 = v2;
  if (v2)
  {
    v2[11] = doc;
    v2[19] = xmlDictCreate();
    *((_DWORD *)v3 + 24) = 1;
  }
  return (xmlSchemaParserCtxtPtr)v3;
}

void xmlSchemaFreeParserCtxt(xmlSchemaParserCtxtPtr ctxt)
{
  xmlDoc *v2;
  xmlSchemaValidCtxt *v3;
  _QWORD *v4;
  void **v5;

  if (ctxt)
  {
    v2 = (xmlDoc *)*((_QWORD *)ctxt + 11);
    if (v2 && !*((_DWORD *)ctxt + 24))
      xmlFreeDoc(v2);
    v3 = (xmlSchemaValidCtxt *)*((_QWORD *)ctxt + 22);
    if (v3)
      xmlSchemaFreeValidCtxt(v3);
    if (*((_DWORD *)ctxt + 14))
    {
      v4 = (_QWORD *)*((_QWORD *)ctxt + 6);
      if (v4)
      {
        xmlSchemaConstructionCtxtFree(v4);
        *((_QWORD *)ctxt + 6) = 0;
        *((_DWORD *)ctxt + 14) = 0;
      }
    }
    v5 = (void **)*((_QWORD *)ctxt + 29);
    if (v5)
    {
      if (*v5)
        xmlFree(*v5);
      xmlFree(v5);
    }
    xmlDictFree(*((xmlDictPtr *)ctxt + 19));
    xmlFree(ctxt);
  }
}

void xmlSchemaFreeValidCtxt(xmlSchemaValidCtxtPtr ctxt)
{
  xmlSchemaVal *v2;
  xmlSchemaParserCtxt *v3;
  void *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  xmlSchemaVal *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18;
  void **v19;
  xmlDict *v20;
  void *v21;

  if (ctxt)
  {
    v2 = (xmlSchemaVal *)*((_QWORD *)ctxt + 17);
    if (v2)
      xmlSchemaFreeValue(v2);
    v3 = (xmlSchemaParserCtxt *)*((_QWORD *)ctxt + 20);
    if (v3)
      xmlSchemaFreeParserCtxt(v3);
    v4 = (void *)*((_QWORD *)ctxt + 29);
    if (v4)
    {
      if (*((int *)ctxt + 60) >= 1)
      {
        v5 = 0;
        do
        {
          v6 = *(void ***)(*((_QWORD *)ctxt + 29) + 8 * v5);
          xmlFree(v6[1]);
          xmlFree(v6);
          ++v5;
        }
        while (v5 < *((int *)ctxt + 60));
        v4 = (void *)*((_QWORD *)ctxt + 29);
      }
      xmlFree(v4);
    }
    v7 = (void *)*((_QWORD *)ctxt + 31);
    if (v7)
    {
      if (*((int *)ctxt + 64) >= 1)
      {
        v8 = 0;
        do
        {
          v9 = *(_QWORD **)(*((_QWORD *)ctxt + 31) + 8 * v8);
          v10 = (xmlSchemaVal *)v9[1];
          if (v10)
            xmlSchemaFreeValue(v10);
          xmlFree(v9);
          ++v8;
        }
        while (v8 < *((int *)ctxt + 64));
        v7 = (void *)*((_QWORD *)ctxt + 31);
      }
      xmlFree(v7);
    }
    v11 = (_QWORD *)*((_QWORD *)ctxt + 26);
    if (v11)
    {
      xmlSchemaFreeIDCStateObjList(v11);
      *((_QWORD *)ctxt + 26) = 0;
    }
    v12 = (_QWORD *)*((_QWORD *)ctxt + 27);
    if (v12)
    {
      xmlSchemaFreeIDCStateObjList(v12);
      *((_QWORD *)ctxt + 27) = 0;
    }
    v13 = (_QWORD *)*((_QWORD *)ctxt + 25);
    if (v13)
    {
      do
      {
        v14 = (_QWORD *)*v13;
        xmlFree(v13);
        v13 = v14;
      }
      while (v14);
    }
    if (*((_QWORD *)ctxt + 36))
    {
      if (*((_DWORD *)ctxt + 74))
        xmlSchemaClearAttrInfos((uint64_t)ctxt);
      if (*((int *)ctxt + 75) >= 1)
      {
        v15 = 0;
        do
          xmlFree(*(void **)(*((_QWORD *)ctxt + 36) + 8 * v15++));
        while (v15 < *((int *)ctxt + 75));
      }
      xmlFree(*((void **)ctxt + 36));
    }
    v16 = (_QWORD *)*((_QWORD *)ctxt + 22);
    if (v16)
    {
      if (*((int *)ctxt + 46) >= 1)
      {
        v17 = 0;
        while (1)
        {
          v16 = (_QWORD *)*((_QWORD *)ctxt + 22);
          v18 = (void *)v16[v17];
          if (!v18)
            break;
          xmlSchemaClearElemInfo((uint64_t)ctxt, (uint64_t)v18);
          xmlFree(v18);
          if (++v17 >= *((int *)ctxt + 46))
          {
            v16 = (_QWORD *)*((_QWORD *)ctxt + 22);
            break;
          }
        }
      }
      xmlFree(v16);
    }
    v19 = (void **)*((_QWORD *)ctxt + 39);
    if (v19)
    {
      if (*v19)
        xmlFree(*v19);
      xmlFree(v19);
    }
    v20 = (xmlDict *)*((_QWORD *)ctxt + 34);
    if (v20)
      xmlDictFree(v20);
    v21 = (void *)*((_QWORD *)ctxt + 12);
    if (v21)
      xmlFree(v21);
    xmlFree(ctxt);
  }
}

void xmlSchemaConstructionCtxtFree(_QWORD *a1)
{
  void **v2;
  void **v3;
  xmlHashTable *v4;
  _QWORD *v5;
  _QWORD *v6;
  xmlDict *v7;

  v2 = (void **)a1[3];
  if (v2)
  {
    if (*v2)
      xmlFree(*v2);
    xmlFree(v2);
  }
  v3 = (void **)a1[5];
  if (v3)
  {
    if (*v3)
      xmlFree(*v3);
    xmlFree(v3);
  }
  v4 = (xmlHashTable *)a1[6];
  if (v4)
    xmlHashFree(v4, (xmlHashDeallocator)xmlSchemaSubstGroupFreeEntry);
  v5 = (_QWORD *)a1[7];
  if (v5)
  {
    do
    {
      v6 = (_QWORD *)*v5;
      xmlFree(v5);
      v5 = v6;
    }
    while (v6);
  }
  v7 = (xmlDict *)a1[2];
  if (v7)
    xmlDictFree(v7);
  xmlFree(a1);
}

int xmlSchemaCheckFacet(xmlSchemaFacetPtr facet, xmlSchemaTypePtr typeDecl, xmlSchemaParserCtxtPtr ctxt, const xmlChar *name)
{
  int v4;
  xmlSchemaTypePtr baseType;
  unsigned __int32 v8;
  xmlSchemaValType v9;
  xmlSchemaParserCtxtPtr v10;
  int v11;
  xmlNodePtr node;
  const xmlChar *value;
  xmlChar *v14;
  xmlSchemaType *BuiltInType;
  int v16;
  xmlNodePtr v17;
  const xmlChar *v18;
  xmlSchemaTypeType type;
  xmlChar *v20;
  char *v21;
  xmlGenericErrorFunc v22;
  void **v23;
  const char *v24;
  xmlRegexp *v25;
  xmlNodePtr v26;
  const xmlChar *v27;
  const char *v28;
  xmlSchemaParserCtxtPtr v29;
  int v30;
  int v31;
  xmlNodePtr v32;
  const xmlChar *v33;
  xmlChar *v34;
  void *v36;

  v4 = -1;
  if (facet)
  {
    baseType = typeDecl;
    if (typeDecl)
    {
      v8 = facet->type - 1000;
      v9 = XML_SCHEMAS_PINTEGER;
      switch(v8)
      {
        case 0u:
        case 1u:
        case 2u:
        case 3u:
        case 7u:
          if (typeDecl->type != XML_SCHEMA_TYPE_BASIC)
          {
            baseType = typeDecl->baseType;
            if (!baseType)
            {
              v24 = "a type user derived type has no base type";
              goto LABEL_40;
            }
          }
          v10 = ctxt;
          if (ctxt || (v10 = xmlSchemaNewParserCtxt("*")) != 0)
          {
            v11 = xmlSchemaVCheckCVCSimpleType((uint64_t)v10, facet->node, (uint64_t)baseType, (xmlChar *)facet->value, &facet->val, 1u, 1, 0);
            if (!v11)
            {
              if (!facet->val)
              {
                if (ctxt)
                  xmlSchemaInternalErr2(v10, (const xmlChar *)"xmlSchemaCheckFacet", (const xmlChar *)"value was not computed", 0);
                v22 = *__xmlGenericError();
                v23 = __xmlGenericErrorContext();
                v22(*v23, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 18941);
              }
              v4 = 0;
              goto LABEL_52;
            }
            if ((v11 & 0x80000000) == 0)
            {
              if (!ctxt)
              {
                v4 = 1717;
                goto LABEL_52;
              }
              v36 = 0;
              node = facet->node;
              value = facet->value;
              v14 = xmlSchemaFormatQName(&v36, baseType->targetNamespace, (xmlChar *)baseType->name);
              xmlSchemaCustomErr4(v10, 1717, (uint64_t)node, facet, (const xmlChar *)"The value '%s' of the facet does not validate against the base type '%s'", value, v14, 0, 0);
              if (v36)
                xmlFree(v36);
              goto LABEL_57;
            }
            if (ctxt)
            {
              v32 = facet->node;
              v33 = facet->value;
              v34 = (xmlChar *)xmlSchemaFacetTypeToString(facet->type);
              xmlSchemaCustomErr4(v10, 3069, (uint64_t)v32, 0, (const xmlChar *)"Internal error: xmlSchemaCheckFacet, failed to validate the value '%s' of the facet '%s' against the base type", v33, v34, 0, 0);
            }
            else
            {
              xmlSchemaFreeParserCtxt(v10);
            }
            return -1;
          }
          return v4;
        case 4u:
          goto LABEL_14;
        case 5u:
        case 9u:
        case 0xAu:
        case 0xBu:
          v9 = XML_SCHEMAS_NNINTEGER;
LABEL_14:
          BuiltInType = xmlSchemaGetBuiltInType(v9);
          v16 = xmlSchemaValidatePredefinedType(BuiltInType, facet->value, &facet->val);
          if (!v16)
            goto LABEL_21;
          if (v16 < 0)
          {
            if (ctxt)
            {
              v24 = "validating facet value";
LABEL_40:
              xmlSchemaInternalErr2(ctxt, (const xmlChar *)"xmlSchemaCheckFacet", (const xmlChar *)v24, 0);
            }
          }
          else
          {
            if (!ctxt)
              goto LABEL_57;
            v17 = facet->node;
            v18 = facet->value;
            type = facet->type;
            v20 = (xmlChar *)xmlSchemaFacetTypeToString(type);
            if (type == XML_SCHEMA_FACET_TOTALDIGITS)
              v21 = "positiveInteger";
            else
              v21 = "nonNegativeInteger";
            v4 = 1717;
            xmlSchemaCustomErr4(ctxt, 1717, (uint64_t)v17, baseType, (const xmlChar *)"The value '%s' of the facet '%s' is not a valid '%s'", v18, v20, (xmlChar *)v21, 0);
          }
          return v4;
        case 6u:
          v25 = xmlRegexpCompile(facet->value);
          facet->regexp = v25;
          if (v25)
            v4 = 0;
          else
            v4 = 1756;
          if (!ctxt)
            goto LABEL_51;
          v10 = ctxt;
          if (v25)
            goto LABEL_52;
          v26 = facet->node;
          v27 = facet->value;
          v28 = "The value '%s' of the facet 'pattern' is not a valid regular expression";
          v4 = 1756;
          v29 = ctxt;
          v30 = 1756;
          goto LABEL_35;
        case 8u:
          if (xmlStrEqual(facet->value, (const xmlChar *)"preserve"))
          {
            v4 = 0;
            v31 = 1;
            goto LABEL_50;
          }
          if (xmlStrEqual(facet->value, (const xmlChar *)"replace"))
          {
            v4 = 0;
            v31 = 2;
            goto LABEL_50;
          }
          if (xmlStrEqual(facet->value, (const xmlChar *)"collapse"))
          {
            v4 = 0;
            v31 = 3;
LABEL_50:
            facet->whitespace = v31;
LABEL_51:
            v10 = ctxt;
LABEL_52:
            if (!ctxt && v10)
              xmlSchemaFreeParserCtxt(v10);
            return v4;
          }
          if (ctxt)
          {
            v26 = facet->node;
            v27 = facet->value;
            v28 = "The value '%s' of the facet 'whitespace' is not valid";
            v4 = 1717;
            v29 = ctxt;
            v30 = 1717;
LABEL_35:
            xmlSchemaCustomErr4(v29, v30, (uint64_t)v26, baseType, (const xmlChar *)v28, v27, 0, 0, 0);
          }
          else
          {
LABEL_57:
            v4 = 1717;
          }
          break;
        default:
LABEL_21:
          v4 = 0;
          goto LABEL_51;
      }
    }
  }
  return v4;
}

uint64_t xmlSchemaVCheckCVCSimpleType(uint64_t a1, xmlNode *a2, uint64_t a3, xmlChar *a4, xmlSchemaValPtr *a5, unsigned int a6, int a7, int a8)
{
  int v14;
  xmlChar *v15;
  int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  const char *v20;
  xmlChar *v21;
  xmlSchemaValPtr *p_val;
  uint64_t v23;
  xmlNode *v24;
  xmlChar *v25;
  int v26;
  xmlChar *v27;
  xmlSchemaType *v28;
  int builtInType;
  uint64_t v30;
  uint64_t v31;
  xmlNode *v32;
  const char *v33;
  int v34;
  xmlGenericErrorFunc v35;
  void **v36;
  xmlSchemaValPtr *v37;
  xmlSchemaType *v38;
  const xmlChar *v39;
  xmlChar *v40;
  int v41;
  uint64_t v42;
  _DWORD *v43;
  int v44;
  uint64_t v45;
  const xmlChar *v46;
  uint64_t v47;
  int v48;
  _DWORD *v49;
  int v50;
  unint64_t v51;
  xmlSchemaVal *v52;
  uint64_t v53;
  xmlChar *v54;
  const xmlChar *i;
  unsigned int v56;
  uint64_t v58;
  xmlChar j;
  xmlChar *v60;
  xmlSchemaValPtr *v61;
  uint64_t v62;
  xmlNode *v63;
  uint64_t v64;
  xmlChar *v65;
  int v66;
  xmlSchemaValPtr v67;
  _DWORD *v68;
  const xmlChar *v69;
  int v70;
  xmlChar *v71;
  xmlChar *v72;
  const xmlChar *v73;
  xmlChar *v74;
  int v75;
  xmlSchemaTypePtr v76;
  xmlChar *v77;
  int v78;
  int v80;
  xmlChar *v81;
  int v82[2];
  xmlChar *cur;
  _DWORD *v84;
  int v86;
  xmlSchemaValPtr val;
  xmlSchemaValPtr v89;

  val = 0;
  if (a5)
  {
    if (*a5)
    {
      xmlSchemaFreeValue(*a5);
      *a5 = 0;
    }
    v14 = 1;
  }
  else
  {
    v14 = (*(unsigned __int8 *)(a3 + 90) >> 5) & 1;
  }
  v86 = v14;
  if (a4)
    v15 = a4;
  else
    v15 = (xmlChar *)&byte_1B0865C1A;
  v16 = *(_DWORD *)a3;
  if (*(_DWORD *)a3 != 1 || *(_DWORD *)(a3 + 160) != 46)
  {
    v17 = *(_DWORD *)(a3 + 88);
    if ((v17 & 0x100) == 0)
    {
      if ((v17 & 0x40) == 0)
      {
        if ((v17 & 0x80) != 0)
        {
          v18 = a3;
          while (1)
          {
            if (*(_DWORD *)v18 != 4)
            {
LABEL_18:
              v20 = "union simple type has no member types";
LABEL_19:
              xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaVCheckCVCSimpleType", (const xmlChar *)v20, 0);
              goto LABEL_78;
            }
            v19 = *(_QWORD **)(v18 + 168);
            if (v19)
              break;
            v18 = *(_QWORD *)(v18 + 112);
            if (!v18)
              goto LABEL_18;
          }
          while (1)
          {
            if (v86)
            {
              p_val = &val;
              v23 = a1;
              v24 = a2;
              v25 = v15;
            }
            else
            {
              v23 = a1;
              v24 = a2;
              v25 = v15;
              p_val = 0;
            }
            v26 = xmlSchemaVCheckCVCSimpleType(v23, v24, v19[1], v25, p_val, 0, 1, 0);
            if (v26 < 1)
              break;
            v19 = (_QWORD *)*v19;
            if (!v19)
            {
              v21 = 0;
              goto LABEL_133;
            }
          }
          if (v26)
          {
            v20 = "validating members of union simple type";
            goto LABEL_19;
          }
          v75 = *(_DWORD *)(a3 + 88);
          if ((v75 & 0x8000000) == 0)
            goto LABEL_157;
          if (a8 || !(v75 & 0x10000000 | a7))
          {
            v21 = 0;
          }
          else
          {
            v77 = xmlSchemaNormalizeValue((_DWORD *)v19[1], v15);
            v21 = v77;
            if (v77)
              v15 = v77;
          }
          v78 = xmlSchemaValidateFacets((_DWORD *)a1, (uint64_t)a2, (int *)a3, XML_SCHEMAS_UNKNOWN, v15, val, 0, a6);
          if (!v78)
            goto LABEL_151;
          if (v78 < 0)
          {
            v33 = "validating facets of union simple type";
            goto LABEL_75;
          }
LABEL_133:
          if (a6)
          {
            v42 = 1826;
            v43 = (_DWORD *)a1;
            v44 = 1826;
            goto LABEL_67;
          }
          v42 = 1826;
          goto LABEL_152;
        }
        goto LABEL_157;
      }
      v89 = 0;
      if (a8)
      {
        cur = v15;
        v80 = 0;
        v81 = 0;
      }
      else if (v17 & 0x10000000 | a7)
      {
        v40 = xmlSchemaNormalizeValue((_DWORD *)a3, v15);
        v80 = 0;
        v81 = v40;
        if (v40)
          v15 = v40;
        cur = v15;
      }
      else
      {
        cur = v15;
        v81 = 0;
        v80 = 1;
      }
      v51 = 0;
      v52 = 0;
      *(_QWORD *)v82 = a3;
      v53 = *(_QWORD *)(a3 + 56);
      v54 = cur;
      v84 = (_DWORD *)a1;
      do
      {
        for (i = v54; ; ++i)
        {
          v56 = *i;
          if (v56 > 0x20 || ((1 << v56) & 0x100002600) == 0)
            break;
          ++v54;
        }
        v58 = 0;
        for (j = *i; j > 0x20u || ((1 << j) & 0x100002601) == 0; j = i[++v58])
          ;
        if (!v58)
          break;
        v60 = xmlStrndup(i, v58);
        if (v86)
        {
          v61 = &v89;
          v62 = a1;
          v63 = a2;
          v64 = v53;
          v65 = v60;
        }
        else
        {
          v62 = a1;
          v63 = a2;
          v64 = v53;
          v65 = v60;
          v61 = 0;
        }
        v66 = xmlSchemaVCheckCVCSimpleType(v62, v63, v64, v65, v61, a6, 0, 1);
        if (v60)
          xmlFree(v60);
        v67 = v89;
        if (v89)
        {
          if (val)
          {
            xmlSchemaValueAppend(v52, v89);
            v67 = v89;
          }
          else
          {
            val = v89;
          }
          v89 = 0;
          v52 = v67;
        }
        if (v66)
        {
          v68 = *(_DWORD **)v82;
          v21 = v81;
          v69 = cur;
          if ((v66 & 0x80000000) == 0)
          {
LABEL_115:
            if (!a6)
            {
              v42 = 1825;
              goto LABEL_152;
            }
            if (v80)
            {
              v71 = xmlSchemaNormalizeValue(v68, v69);
              v21 = v71;
              if (v71)
                v69 = v71;
            }
            v42 = 1825;
            v43 = v84;
            v44 = 1825;
            v45 = (uint64_t)a2;
            v46 = v69;
            v47 = (uint64_t)v68;
LABEL_120:
            xmlSchemaSimpleTypeErr(v43, v44, v45, v46, v47);
            goto LABEL_152;
          }
          v33 = "validating an item of list simple type";
LABEL_123:
          v49 = v84;
          goto LABEL_76;
        }
        v54 = (xmlChar *)&i[v58];
        ++v51;
        a1 = (uint64_t)v84;
      }
      while (i[v58]);
      v68 = *(_DWORD **)v82;
      if ((*(_BYTE *)(*(_QWORD *)v82 + 91) & 8) == 0)
      {
        v42 = 0;
        v21 = v81;
        goto LABEL_152;
      }
      v69 = cur;
      v70 = xmlSchemaValidateFacets((_DWORD *)a1, (uint64_t)a2, *(int **)v82, XML_SCHEMAS_UNKNOWN, cur, val, v51, a6);
      v21 = v81;
      if (v70)
      {
        if ((v70 & 0x80000000) == 0)
          goto LABEL_115;
        v33 = "validating facets of list simple type";
        goto LABEL_123;
      }
LABEL_151:
      v42 = 0;
      goto LABEL_152;
    }
  }
  if (!a8 && (a7 || (*(_BYTE *)(a3 + 91) & 0x10) != 0))
  {
    v27 = xmlSchemaNormalizeValue((_DWORD *)a3, v15);
    v21 = v27;
    if (v27)
      v15 = v27;
    v16 = *(_DWORD *)a3;
  }
  else
  {
    v21 = 0;
  }
  v28 = (xmlSchemaType *)a3;
  if (v16 != 1)
  {
    v28 = (xmlSchemaType *)a3;
    while (1)
    {
      v28 = v28->baseType;
      if (!v28)
        break;
      if (v28->type == XML_SCHEMA_TYPE_BASIC)
        goto LABEL_38;
    }
    v33 = "could not get the built-in type";
    goto LABEL_75;
  }
LABEL_38:
  if (*(_DWORD *)a1 == 1)
  {
    if (v28->builtInType == 28)
    {
      v30 = *(_QWORD *)(a1 + 64);
      v31 = 0;
      v32 = a2;
      goto LABEL_48;
    }
LABEL_51:
    if (v86)
    {
      v37 = &val;
      v38 = v28;
      v39 = v15;
    }
    else
    {
      v38 = v28;
      v39 = v15;
      v37 = 0;
    }
    v34 = xmlSchemaValPredefTypeNodeNoNorm(v38, v39, v37, a2);
    goto LABEL_59;
  }
  if (*(_DWORD *)a1 != 2)
  {
    v35 = *__xmlGenericError();
    v36 = __xmlGenericErrorContext();
    v35(*v36, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 24895);
    if (!v21)
      goto LABEL_78;
    goto LABEL_77;
  }
  builtInType = v28->builtInType;
  if (builtInType != 21)
  {
    if (builtInType == 28)
    {
      v30 = *(_QWORD *)(a1 + 40);
      v31 = a1;
      v32 = 0;
LABEL_48:
      v34 = xmlSchemaValidateNotation(v31, v30, v32, v15, &val, v86);
LABEL_59:
      v41 = v34;
      goto LABEL_60;
    }
    goto LABEL_51;
  }
  v89 = 0;
  v50 = xmlValidateQName(v15, 1);
  if (v50)
  {
    if (v50 == -1)
    {
      xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaValidateQName", (const xmlChar *)"calling xmlValidateQName()", 0);
      v41 = -1;
    }
    else
    {
      v41 = 1824;
    }
  }
  else
  {
    v72 = xmlSplitQName2(v15, (xmlChar **)&v89);
    if (!v72)
      v72 = xmlStrdup(v15);
    v73 = xmlSchemaLookupNamespace(a1, (xmlChar *)v89);
    if (v89 && (xmlFree(v89), !v73))
    {
      v76 = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
      v41 = 1824;
      xmlSchemaCustomErr4((_DWORD *)a1, 1824, 0, v76, (const xmlChar *)"The QName value '%s' has no corresponding namespace declaration in scope", v15, 0, 0, 0);
      if (v72)
        xmlFree(v72);
    }
    else if (v86)
    {
      if (v73)
        v74 = xmlStrdup(v73);
      else
        v74 = 0;
      v41 = 0;
      val = xmlSchemaNewQNameValue(v74, v72);
    }
    else
    {
      xmlFree(v72);
      v41 = 0;
    }
  }
LABEL_60:
  if (!v41)
  {
    if ((*(_BYTE *)(a3 + 91) & 8) == 0)
      goto LABEL_151;
    v48 = xmlSchemaValidateFacets((_DWORD *)a1, (uint64_t)a2, (int *)a3, (xmlSchemaValType)v28->builtInType, v15, val, 0, a6);
    if (!v48)
      goto LABEL_151;
    if ((v48 & 0x80000000) == 0)
    {
      if ((*(_BYTE *)(a3 + 88) & 0x40) != 0)
        v42 = 1825;
      else
        v42 = 1824;
      goto LABEL_152;
    }
    v33 = "validating facets of atomic simple type";
LABEL_75:
    v49 = (_DWORD *)a1;
LABEL_76:
    xmlSchemaInternalErr2(v49, (const xmlChar *)"xmlSchemaVCheckCVCSimpleType", (const xmlChar *)v33, 0);
    if (!v21)
      goto LABEL_78;
LABEL_77:
    xmlFree(v21);
LABEL_78:
    if (val)
      xmlSchemaFreeValue(val);
    return 0xFFFFFFFFLL;
  }
  if (v41 < 0)
  {
    v33 = "validating against a built-in type";
    goto LABEL_75;
  }
  if ((*(_BYTE *)(a3 + 88) & 0x40) != 0)
    v42 = 1825;
  else
    v42 = 1824;
  if (a6)
  {
    v43 = (_DWORD *)a1;
    v44 = v42;
LABEL_67:
    v45 = (uint64_t)a2;
    v46 = v15;
    v47 = a3;
    goto LABEL_120;
  }
LABEL_152:
  if (v21)
    xmlFree(v21);
  if ((_DWORD)v42)
  {
    if (val)
      xmlSchemaFreeValue(val);
    return v42;
  }
LABEL_157:
  if (a5)
  {
    v42 = 0;
    *a5 = val;
  }
  else
  {
    if (val)
      xmlSchemaFreeValue(val);
    return 0;
  }
  return v42;
}

const char *xmlSchemaFacetTypeToString(int a1)
{
  if ((a1 - 1000) > 0xB)
    return "Internal Error";
  else
    return off_1E6174270[a1 - 1000];
}

xmlChar *xmlSchemaFormatQName(void **a1, const xmlChar *a2, xmlChar *a3)
{
  void *v6;
  xmlChar *v7;
  xmlChar *v8;
  xmlChar *v9;
  const xmlChar *v10;

  v6 = *a1;
  if (v6)
  {
    xmlFree(v6);
    *a1 = 0;
  }
  if (a2)
  {
    v7 = xmlStrdup((const xmlChar *)"{");
    *a1 = v7;
    v8 = xmlStrcat(v7, a2);
    *a1 = v8;
    v9 = xmlStrcat(v8, (const xmlChar *)"}");
    *a1 = v9;
    if (a3)
    {
      v10 = a3;
LABEL_9:
      a3 = xmlStrcat(v9, v10);
      *a1 = a3;
      return a3;
    }
LABEL_8:
    v10 = (const xmlChar *)"(NULL)";
    goto LABEL_9;
  }
  if (!a3)
  {
    v9 = 0;
    goto LABEL_8;
  }
  return a3;
}

void xmlSchemaCustomErr4(_DWORD *a1, int a2, uint64_t a3, _DWORD *a4, const xmlChar *a5, const xmlChar *a6, xmlChar *a7, xmlChar *a8, uint64_t a9)
{
  uint64_t ComponentNode;
  xmlChar *v17;
  xmlChar *cur;

  ComponentNode = a3;
  cur = 0;
  if (!a3 && a4 && *a1 == 1)
  {
    ComponentNode = xmlSchemaGetComponentNode(a4);
    xmlSchemaFormatItemForReport(&cur, (uint64_t)a4, 0);
    v17 = xmlStrcat(cur, (const xmlChar *)": ");
    cur = v17;
  }
  else
  {
    xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, a3);
    v17 = cur;
  }
  cur = xmlStrcat(v17, a5);
  cur = xmlStrcat(cur, (const xmlChar *)".\n");
  xmlSchemaErr4Line(a1, 2, a2, ComponentNode, 0, (const char *)cur, a6, a7, a8, a9);
  if (cur)
    xmlFree(cur);
}

xmlSchemaPtr xmlSchemaParse(xmlSchemaParserCtxtPtr ctxt)
{
  xmlSchema *v2;
  xmlSchema *v3;
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  const xmlChar *v8;
  _QWORD *v9;
  const xmlChar **v10;

  v10 = 0;
  xmlSchemaInitTypes();
  if (!ctxt)
    return 0;
  *((_QWORD *)ctxt + 4) = 0;
  *((_DWORD *)ctxt + 18) = 0;
  v2 = (xmlSchema *)xmlSchemaNewSchema((uint64_t)ctxt);
  if (v2)
  {
    v3 = v2;
    v4 = (_QWORD *)*((_QWORD *)ctxt + 6);
    if (v4)
      goto LABEL_6;
    v4 = xmlSchemaConstructionCtxtCreate(*((xmlDict **)ctxt + 19));
    *((_QWORD *)ctxt + 6) = v4;
    if (v4)
    {
      *((_DWORD *)ctxt + 14) = 1;
LABEL_6:
      *v4 = v3;
      v5 = xmlSchemaAddSchemaDoc((uint64_t)ctxt, 0, *((const xmlChar **)ctxt + 10), *((xmlDoc **)ctxt + 11), *((const char **)ctxt + 13), *((_DWORD *)ctxt + 28), 0, 0, 0, &v10);
      if (v5 != -1)
      {
        if (v5)
          goto LABEL_23;
        if (!v10)
        {
          v8 = (const xmlChar *)*((_QWORD *)ctxt + 10);
          if (v8)
            xmlSchemaCustomErr4(ctxt, 1757, 0, 0, (const xmlChar *)"Failed to locate the main schema resource at '%s'", v8, 0, 0, 0);
          else
            xmlSchemaCustomErr4(ctxt, 1757, 0, 0, (const xmlChar *)"Failed to locate the main schema resource", 0, 0, 0, 0);
          goto LABEL_23;
        }
        if (xmlSchemaParseNewDocWithContext((uint64_t)ctxt, (uint64_t)v3, (uint64_t)v10) != -1)
        {
          if (*((_DWORD *)ctxt + 9))
          {
LABEL_24:
            xmlSchemaFree(v3);
            v9 = (_QWORD *)*((_QWORD *)ctxt + 6);
            if (v9)
            {
              xmlSchemaConstructionCtxtFree(v9);
              v3 = 0;
              *((_QWORD *)ctxt + 6) = 0;
              *((_DWORD *)ctxt + 14) = 0;
              goto LABEL_17;
            }
            goto LABEL_16;
          }
          v3->doc = (xmlDocPtr)v10[4];
          v3->preserve = *((_DWORD *)ctxt + 24);
          *((_QWORD *)ctxt + 8) = v3;
          if (xmlSchemaFixupComponents((uint64_t)ctxt, *(_QWORD *)(*((_QWORD *)ctxt + 6) + 8)) == -1)
            goto LABEL_12;
LABEL_23:
          if (!*((_DWORD *)ctxt + 9))
            goto LABEL_17;
          goto LABEL_24;
        }
      }
LABEL_12:
      xmlSchemaFree(v3);
      goto LABEL_13;
    }
    return 0;
  }
LABEL_13:
  v6 = (_QWORD *)*((_QWORD *)ctxt + 6);
  if (v6)
  {
    xmlSchemaConstructionCtxtFree(v6);
    *((_QWORD *)ctxt + 6) = 0;
    *((_DWORD *)ctxt + 14) = 0;
  }
  xmlSchemaInternalErr2(ctxt, (const xmlChar *)"xmlSchemaParse", (const xmlChar *)"An internal error occurred", 0);
LABEL_16:
  v3 = 0;
LABEL_17:
  *((_QWORD *)ctxt + 8) = 0;
  return v3;
}

_OWORD *xmlSchemaNewSchema(uint64_t a1)
{
  _OWORD *v2;
  _OWORD *v3;
  xmlDict *v4;

  v2 = xmlMalloc(0xA0uLL);
  v3 = v2;
  if (v2)
  {
    v2[8] = 0u;
    v2[9] = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *v2 = 0u;
    v2[1] = 0u;
    v4 = *(xmlDict **)(a1 + 152);
    *((_QWORD *)v3 + 15) = v4;
    xmlDictReference(v4);
  }
  else
  {
    if (a1)
      ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating schema");
  }
  return v3;
}

_QWORD *xmlSchemaConstructionCtxtCreate(xmlDict *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;

  v2 = xmlMalloc(0x48uLL);
  v3 = v2;
  if (!v2)
  {
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating schema construction context");
    return v3;
  }
  v2[8] = 0;
  *((_OWORD *)v2 + 2) = 0u;
  *((_OWORD *)v2 + 3) = 0u;
  *(_OWORD *)v2 = 0u;
  *((_OWORD *)v2 + 1) = 0u;
  v4 = xmlSchemaItemListCreate();
  v3[3] = v4;
  if (!v4)
  {
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating list of schema buckets");
    xmlFree(v3);
    return 0;
  }
  v5 = xmlSchemaItemListCreate();
  v3[5] = v5;
  if (!v5)
  {
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating list of pending global components");
    xmlSchemaConstructionCtxtFree(v3);
    return 0;
  }
  v3[2] = a1;
  xmlDictReference(a1);
  return v3;
}

uint64_t xmlSchemaAddSchemaDoc(uint64_t a1, unsigned int a2, const xmlChar *a3, xmlDoc *a4, const char *a5, int a6, uint64_t a7, uint64_t a8, xmlChar *a9, const xmlChar ***a10)
{
  uint64_t v14;
  _OWORD *v17;
  const xmlChar **v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const xmlChar ***v23;
  const xmlChar *URL;
  xmlParserCtxtPtr v25;
  xmlParserCtxt *v26;
  xmlDict *dict;
  xmlDict *v28;
  xmlDocPtr File;
  xmlNodePtr RootElement;
  xmlNode *v31;
  xmlNode *v32;
  xmlNodePtr children;
  xmlNode *v34;
  xmlElementType type;
  xmlChar *content;
  unsigned int v38;
  unsigned int v39;
  BOOL v40;
  int v41;
  BOOL v43;
  xmlChar *Prop;
  uint64_t result;
  _OWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *i;
  _QWORD *v50;
  _OWORD *v51;
  int v52;
  const char *v53;
  const char *v54;
  xmlDocPtr Memory;
  const xmlChar *v56;
  _DWORD *v57;
  const xmlChar *v58;
  const xmlChar *v59;
  _QWORD *v60;
  uint64_t v61;
  const char *v62;
  _OWORD *v63;
  uint64_t SchemaBucketByTNS;
  const xmlChar *v65;
  uint64_t ChameleonSchemaBucket;
  xmlErrorPtr LastError;
  uint64_t v68;
  _QWORD *v69;
  const xmlChar *v70;
  xmlHashTable *v71;
  const xmlChar *v72;
  _OWORD *v73;
  _OWORD *v74;

  v14 = (uint64_t)a3;
  if (a10)
    *a10 = 0;
  v17 = 0;
  v18 = 0;
  switch(a2)
  {
    case 0u:
      goto LABEL_16;
    case 1u:
      v19 = 3082;
      break;
    case 2u:
      v19 = 3050;
      break;
    case 3u:
      v19 = 3081;
      break;
    default:
      v19 = 0;
      break;
  }
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(v20 + 24);
  if (!v21 || (v22 = *(unsigned int *)(v21 + 8), (int)v22 < 1))
  {
    v17 = 0;
    v18 = 0;
    goto LABEL_16;
  }
  if (a3)
  {
    v23 = *(const xmlChar ****)v21;
    while (1)
    {
      v18 = *v23;
      if ((*v23)[1] == a3)
        break;
      ++v23;
      if (!--v22)
        goto LABEL_14;
    }
    if (*(const xmlChar ***)(v20 + 32) == v18)
    {
      xmlSchemaCustomErr4((_DWORD *)a1, v19, a7, 0, (const xmlChar *)"The schema must not import/include/redefine itself", 0, 0, 0, 0);
      goto LABEL_130;
    }
  }
  else
  {
LABEL_14:
    v18 = 0;
  }
  v46 = xmlMalloc(0x20uLL);
  if (!v46)
  {
    v54 = "allocating schema relation";
LABEL_94:
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)v54);
    return 0xFFFFFFFFLL;
  }
  v17 = v46;
  *v46 = 0u;
  v46[1] = 0u;
  v47 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
  v50 = *(_QWORD **)(v47 + 40);
  v48 = (_QWORD *)(v47 + 40);
  for (i = v50; i; i = (_QWORD *)*i)
    v48 = i;
  *v48 = v46;
  *((_DWORD *)v46 + 2) = a2;
  if (a2 != 1)
  {
    if (!v18)
      goto LABEL_16;
    if (*((_DWORD *)v18 + 14))
    {
      v74 = v46;
      if (!v14)
        v14 = (uint64_t)"in_memory_buffer";
      if (!xmlStrEqual((const xmlChar *)v14, v18[1]))
      {
        v53 = "The schema document '%s' cannot be included or redefined, since it was already imported";
        goto LABEL_118;
      }
      v17 = v74;
    }
    if (v18[2] || v18[3] == (const xmlChar *)a8)
    {
LABEL_92:
      *((_QWORD *)v17 + 3) = v18;
      goto LABEL_130;
    }
    v63 = v17;
    ChameleonSchemaBucket = xmlSchemaGetChameleonSchemaBucket(a1, v14, a8);
    if (ChameleonSchemaBucket)
    {
      *((_QWORD *)v63 + 3) = ChameleonSchemaBucket;
      goto LABEL_130;
    }
    v18 = 0;
    goto LABEL_139;
  }
  *((_QWORD *)v46 + 2) = a9;
  if (!v14)
    goto LABEL_130;
  if (v18)
  {
    if (!*((_DWORD *)v18 + 14))
    {
      v51 = v46;
      v52 = xmlStrEqual((const xmlChar *)v14, v18[1]);
      v17 = v51;
      if (!v52)
      {
        v53 = "The schema document '%s' cannot be imported, since it was already included or redefined";
LABEL_118:
        xmlSchemaCustomErr4((_DWORD *)a1, v19, a7, 0, (const xmlChar *)v53, (const xmlChar *)v14, 0, 0, 0);
        goto LABEL_130;
      }
    }
    goto LABEL_92;
  }
  v63 = v46;
  SchemaBucketByTNS = xmlSchemaGetSchemaBucketByTNS(a1, (uint64_t)a9);
  v18 = (const xmlChar **)SchemaBucketByTNS;
  if (!SchemaBucketByTNS)
  {
LABEL_139:
    v17 = v63;
    goto LABEL_16;
  }
  *((_QWORD *)v63 + 3) = SchemaBucketByTNS;
  v65 = *(const xmlChar **)(SchemaBucketByTNS + 8);
  if (v65)
  {
    if (!xmlStrEqual((const xmlChar *)v14, v65))
      xmlSchemaCustomWarning((_DWORD *)a1, 3083, a7, (const xmlChar *)"Skipping import of schema located at '%s' for the namespace '%s', since this namespace was already imported with the schema located at '%s'", (const xmlChar *)v14, a9, (xmlChar *)v18[1]);
    goto LABEL_130;
  }
  v17 = v63;
  *(_QWORD *)(SchemaBucketByTNS + 8) = v14;
  if (*(_QWORD *)(SchemaBucketByTNS + 32))
  {
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaAddSchemaDoc", (const xmlChar *)"trying to load a schema doc, but a doc is already assigned to the schema bucket", 0);
    return 0xFFFFFFFFLL;
  }
LABEL_16:
  if (a4)
  {
    v73 = v17;
    URL = a4->URL;
    if (URL)
      v14 = (uint64_t)xmlDictLookup(*(xmlDictPtr *)(a1 + 152), URL, -1);
    else
      v14 = (uint64_t)"in_memory_buffer";
    File = a4;
    goto LABEL_29;
  }
  if (!((unint64_t)a5 | v14))
  {
    xmlSchemaPErr(a1, 0, 1758, "No information for parsing was provided with the given schema parser context.\n", 0, 0);
    return 0xFFFFFFFFLL;
  }
  v73 = v17;
  v25 = xmlNewParserCtxt();
  if (!v25)
  {
    v54 = "xmlSchemaGetDoc, allocating a parser context";
    goto LABEL_94;
  }
  v26 = v25;
  if (*(_QWORD *)(a1 + 152))
  {
    dict = v25->dict;
    if (dict)
    {
      xmlDictFree(dict);
      v28 = *(xmlDict **)(a1 + 152);
      v26->dict = v28;
      xmlDictReference(v28);
    }
  }
  if (v14)
  {
    File = xmlCtxtReadFile(v26, (const char *)v14, 0, 2);
    if (!File)
    {
LABEL_122:
      LastError = xmlGetLastError();
      if (LastError && LastError->domain == 8)
      {
        xmlFreeParserCtxt(v26);
        if (v18)
        {
          v18[1] = (const xmlChar *)v14;
          *((_DWORD *)v18 + 12) = 0;
          goto LABEL_126;
        }
LABEL_130:
        result = 0;
        if (a10)
          *a10 = v18;
        return result;
      }
      xmlSchemaCustomErr4((_DWORD *)a1, 3067, a7, 0, (const xmlChar *)"Failed to parse the XML resource '%s'", (const xmlChar *)v14, 0, 0, 0);
      xmlFreeParserCtxt(v26);
      return *(unsigned int *)(a1 + 32);
    }
  }
  else
  {
    if (!a5)
    {
      v14 = 0;
      goto LABEL_122;
    }
    Memory = xmlCtxtReadMemory(v26, a5, a6, 0, 0, 2);
    if (!Memory)
    {
      v14 = (uint64_t)"in_memory_buffer";
      goto LABEL_122;
    }
    File = Memory;
    v14 = (uint64_t)"in_memory_buffer";
    Memory->URL = xmlStrdup((const xmlChar *)"in_memory_buffer");
  }
  xmlFreeParserCtxt(v26);
LABEL_29:
  RootElement = xmlDocGetRootElement(File);
  if (!RootElement)
  {
    xmlSchemaCustomErr4((_DWORD *)a1, 1759, a7, 0, (const xmlChar *)"The document '%s' has no document element", (const xmlChar *)v14, 0, 0, 0);
    goto LABEL_69;
  }
  v31 = RootElement;
  v32 = 0;
  children = RootElement;
  do
  {
LABEL_31:
    v34 = children;
    if (v32)
    {
      xmlUnlinkNode(v32);
      xmlFreeNode(v32);
    }
    type = v34->type;
    if (type != XML_ELEMENT_NODE && type != XML_CDATA_SECTION_NODE)
    {
      v32 = v34;
      if (type != XML_TEXT_NODE)
        goto LABEL_53;
      content = v34->content;
      if (!content)
      {
LABEL_45:
        if (xmlNodeGetSpacePreserve(v34) == 1)
          v32 = 0;
        else
          v32 = v34;
        goto LABEL_48;
      }
      while (1)
      {
        v38 = *content;
        if (v38 > 0x20)
          break;
        if (((1 << v38) & 0x100002600) == 0)
        {
          if (*content)
            break;
          goto LABEL_45;
        }
        ++content;
      }
    }
    v32 = 0;
LABEL_48:
    children = v34->children;
    if (!children)
      break;
    v39 = children->type;
    v40 = v39 > 0x11;
    v41 = (1 << v39) & 0x20060;
  }
  while (v40 || v41 == 0);
  do
  {
LABEL_53:
    children = v34->next;
    if (children)
      goto LABEL_31;
    v34 = v34->parent;
    if (v34)
      v43 = v34 == v31;
    else
      v43 = 1;
  }
  while (!v43);
  if (v32)
  {
    xmlUnlinkNode(v32);
    xmlFreeNode(v32);
  }
  if (!v31->ns
    || !xmlStrEqual(v31->name, (const xmlChar *)"schema")
    || !xmlStrEqual(v31->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    xmlSchemaCustomErr4((_DWORD *)a1, 1772, a7, 0, (const xmlChar *)"The XML document '%s' is not a schema document", (const xmlChar *)v14, 0, 0, 0);
LABEL_69:
    if (!a4)
    {
      xmlFreeDoc(File);
      if (v18)
        v18[4] = 0;
    }
    return *(unsigned int *)(a1 + 32);
  }
  Prop = xmlSchemaGetProp(a1, v31, (xmlChar *)"targetNamespace");
  if (v18)
  {
LABEL_65:
    *((_DWORD *)v18 + 12) = 1;
    v18[3] = Prop;
    v18[4] = (const xmlChar *)File;
    v18[1] = (const xmlChar *)v14;
    v18[2] = Prop;
    if (a4)
      *((_DWORD *)v18 + 15) = 1;
LABEL_126:
    if (a2 <= 1)
      ++*((_DWORD *)v18 + 14);
    if (v73)
      *((_QWORD *)v73 + 3) = v18;
    goto LABEL_130;
  }
  v56 = **(const xmlChar ***)(a1 + 48);
  if (!v56)
  {
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaBucketCreate", (const xmlChar *)"no main schema on constructor", 0);
    goto LABEL_159;
  }
  v57 = xmlMalloc(0x58uLL);
  if (!v57)
  {
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating schema bucket");
    goto LABEL_159;
  }
  v18 = (const xmlChar **)v57;
  *(_OWORD *)v57 = 0u;
  *((_OWORD *)v57 + 1) = 0u;
  *((_QWORD *)v57 + 10) = 0;
  *((_OWORD *)v57 + 3) = 0u;
  *((_OWORD *)v57 + 4) = 0u;
  *((_OWORD *)v57 + 2) = 0u;
  *((_QWORD *)v57 + 3) = Prop;
  *v57 = a2;
  v58 = (const xmlChar *)xmlSchemaItemListCreate();
  v18[8] = v58;
  if (!v58 || (v59 = (const xmlChar *)xmlSchemaItemListCreate(), (v18[9] = v59) == 0))
  {
    xmlFree(v18);
    goto LABEL_159;
  }
  v60 = *(_QWORD **)(a1 + 48);
  v61 = v60[3];
  if (!v61 || *(int *)(v61 + 8) <= 0)
  {
    if ((a2 & 0xFFFFFFFE) == 2)
    {
      v62 = "first bucket but it's an include or redefine";
LABEL_157:
      xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaBucketCreate", (const xmlChar *)v62, 0);
      goto LABEL_158;
    }
    *(_DWORD *)v18 = 0;
    v60[1] = v18;
    v18[10] = v56;
    *((_QWORD *)v56 + 1) = Prop;
    if (a2 > 1)
      goto LABEL_143;
LABEL_150:
    v71 = (xmlHashTable *)*((_QWORD *)v56 + 12);
    if (!v71)
    {
      v71 = xmlHashCreateDict(5, *(xmlDictPtr *)(*(_QWORD *)(a1 + 48) + 16));
      *((_QWORD *)v56 + 12) = v71;
      if (!v71)
        goto LABEL_158;
    }
    if (Prop)
      v72 = Prop;
    else
      v72 = (const xmlChar *)"##";
    if (!xmlHashAddEntry(v71, v72, v18))
      goto LABEL_161;
    v62 = "failed to add the schema bucket to the hash";
    goto LABEL_157;
  }
  if (a2 == 1)
  {
    v70 = (const xmlChar *)xmlSchemaNewSchema(a1);
    v18[10] = v70;
    if (!v70)
    {
LABEL_158:
      xmlSchemaBucketFree(v18);
      goto LABEL_159;
    }
    *((_QWORD *)v70 + 1) = Prop;
    goto LABEL_150;
  }
  if (!a2)
  {
    v62 = "main bucket but it's not the first one";
    goto LABEL_157;
  }
LABEL_143:
  v68 = v60[4];
  if (*(_DWORD *)v68 >= 2u)
    v68 = *(_QWORD *)(v68 + 80);
  v18[10] = (const xmlChar *)v68;
  v69 = (_QWORD *)*((_QWORD *)v56 + 16);
  if (!v69)
  {
    v69 = xmlSchemaItemListCreate();
    *((_QWORD *)v56 + 16) = v69;
    if (!v69)
      goto LABEL_158;
  }
  xmlSchemaItemListAdd((uint64_t)v69, (uint64_t)v18);
LABEL_161:
  if (xmlSchemaItemListAdd(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24), (uint64_t)v18) != -1)
    goto LABEL_65;
LABEL_159:
  result = 0xFFFFFFFFLL;
  if (!a4)
  {
    xmlFreeDoc(File);
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t xmlSchemaParseNewDocWithContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  const xmlChar *v20;
  xmlNodePtr RootElement;
  int v22;
  xmlNode *PropNode;
  uint64_t v24;
  uint64_t v25;
  xmlNode *v26;
  xmlSchemaType *BuiltInType;
  uint64_t v28;
  xmlNode *v29;
  uint64_t v30;
  const xmlChar *NodeContent;
  xmlNode *v32;
  uint64_t v33;
  const xmlChar *v34;
  xmlNode *v35;
  uint64_t v36;
  xmlChar *v37;
  uint64_t v38;
  xmlNode *v39;
  uint64_t v40;
  xmlChar *v41;
  uint64_t v42;
  xmlNode *children;
  const xmlChar *v45;
  const xmlChar *v46;
  const xmlChar *v47;
  _QWORD *v48;
  _QWORD *v49;
  const xmlChar *v50;
  const xmlChar *v51;
  const xmlChar *v52;
  _QWORD *v53;
  int v54;
  uint64_t properties;
  uint64_t v56;
  xmlSchemaType *v57;
  int v58;
  xmlSchemaType *v59;
  const xmlChar *v60;
  uint64_t v61;
  uint64_t v62;
  const xmlNode *v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  const char *v71;
  xmlChar *v72;
  const xmlChar **v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  xmlNode *v81;
  xmlChar *Prop;
  xmlNode *v83;
  xmlNode *v84;
  char *v85;
  uint64_t v86;
  uint64_t parent;
  uint64_t v88;
  uint64_t v89;
  xmlNode *v90;
  xmlSchemaType *v91;
  xmlSchemaTypePtr v92;
  xmlChar *v93;
  xmlChar *v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  xmlNode *v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  const xmlChar **v104;
  int v105[2];
  xmlChar *str2;

  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(v6 + 32);
  v8 = (int *)(a2 + 48);
  v9 = *(_DWORD *)(a2 + 48);
  if (v9)
  {
    v10 = v9 & 0xFFFFFFFE;
    if ((v9 & 2) != 0)
      v10 = v9 & 0xFFFFFFFE ^ 2;
    v11 = v10 & 4 | *(_DWORD *)(a2 + 48) & 3;
    v12 = v10 & 8;
    if ((v10 & 8) != 0)
      v13 = v10 & 0xFFFFFFFB ^ 8;
    else
      v13 = v10 & 0xFFFFFFFB;
    v14 = v13 & 0x10;
    v15 = v13 & 0x20;
    if ((v13 & 0x20) != 0)
      v16 = v13 & 0xFFFFFFEF ^ 0x20;
    else
      v16 = v13 & 0xFFFFFFEF;
    v17 = v16 & 0x40;
    v18 = v16 & 0x80;
    if ((v16 & 0x80) != 0)
      v19 = v16 & 0xFFFFFFBF ^ 0x80;
    else
      v19 = v16 & 0xFFFFFFBF;
    if (v11 | v14 | v17 | v12 | v15 | v19 & 0x100 | v18)
      *v8 = v19 & 0xFFFFFEAA;
  }
  v103 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 64) = a2;
  v20 = *(const xmlChar **)(a3 + 24);
  *(_QWORD *)(a1 + 200) = v20;
  *(_QWORD *)(v6 + 32) = a3;
  if (v20 && xmlStrEqual(v20, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    *(_DWORD *)(a1 + 184) = 1;
  ++*(_DWORD *)(a3 + 52);
  RootElement = xmlDocGetRootElement(*(const xmlDoc **)(a3 + 32));
  v22 = *(_DWORD *)(a1 + 36);
  PropNode = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"id");
  if (PropNode)
  {
    v24 = xmlSchemaPValAttrNodeID(a1, PropNode);
    if ((_DWORD)v24 == -1)
      goto LABEL_45;
  }
  else
  {
    v24 = 0;
  }
  v25 = xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"targetNamespace");
  if (!v25)
    goto LABEL_25;
  v26 = (xmlNode *)v25;
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
  v28 = xmlSchemaPValAttrNode((_DWORD *)a1, v26, BuiltInType, 0);
  v24 = v28;
  if ((_DWORD)v28 == -1)
    goto LABEL_45;
  if ((_DWORD)v28)
  {
    *(_DWORD *)(a1 + 196) = 3037;
  }
  else
  {
LABEL_25:
    v29 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"elementFormDefault");
    if (v29)
    {
      v30 = (uint64_t)v29;
      NodeContent = xmlSchemaGetNodeContent(a1, v29);
      if (xmlSchemaPValAttrFormDefault(NodeContent, v8, 1))
      {
        xmlSchemaPSimpleTypeErr(a1, 1705, v30, 0, "(qualified | unqualified)", NodeContent, 0, 0);
        v24 = 1;
      }
      else
      {
        v24 = 0;
      }
    }
    v32 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"attributeFormDefault");
    if (v32)
    {
      v33 = (uint64_t)v32;
      v34 = xmlSchemaGetNodeContent(a1, v32);
      if (xmlSchemaPValAttrFormDefault(v34, v8, 2))
      {
        xmlSchemaPSimpleTypeErr(a1, 1701, v33, 0, "(qualified | unqualified)", v34, 0, 0);
        v24 = 1;
      }
      else
      {
        v24 = 0;
      }
    }
    v35 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"finalDefault");
    if (v35)
    {
      v36 = (uint64_t)v35;
      v37 = (xmlChar *)xmlSchemaGetNodeContent(a1, v35);
      v38 = xmlSchemaPValAttrBlockFinal(v37, v8, 4, 8, -1, 16, 32);
      v24 = v38;
      if ((_DWORD)v38 == -1)
        goto LABEL_45;
      if ((_DWORD)v38)
      {
        xmlSchemaPSimpleTypeErr(a1, 3037, v36, 0, "(#all | List of (extension | restriction | list | union))", v37, 0, 0);
        v24 = 1;
      }
    }
    v39 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)RootElement, (xmlChar *)"blockDefault");
    if (v39)
    {
      v40 = (uint64_t)v39;
      v41 = (xmlChar *)xmlSchemaGetNodeContent(a1, v39);
      v42 = xmlSchemaPValAttrBlockFinal(v41, v8, 64, 128, 256, -1, -1);
      v24 = v42;
      if ((_DWORD)v42 == -1)
        goto LABEL_45;
      if ((_DWORD)v42)
      {
        xmlSchemaPSimpleTypeErr(a1, 3037, v40, 0, "(#all | List of (extension | restriction | substitution))", v41, 0, 0);
        v24 = 1;
      }
    }
  }
  if (v22 != *(_DWORD *)(a1 + 36))
    v24 = *(unsigned int *)(a1 + 32);
  if (!(_DWORD)v24)
  {
    children = RootElement->children;
    if (!children)
    {
      v24 = 0;
      goto LABEL_45;
    }
    v101 = *(_DWORD *)(a1 + 36);
    v102 = v7;
    v24 = 0;
    v45 = (const xmlChar *)"include";
    v46 = (const xmlChar *)"import";
    v47 = (const xmlChar *)"redefine";
    while (children->ns
         && (xmlStrEqual(children->name, v45)
          && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
          || children->ns
          && (xmlStrEqual(children->name, v46)
           && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
           || children->ns
           && (xmlStrEqual(children->name, v47)
            && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
            || children->ns
            && xmlStrEqual(children->name, (const xmlChar *)"annotation")
            && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")))))
    {
      if (children->ns)
      {
        if (xmlStrEqual(children->name, (const xmlChar *)"annotation")
          && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          v48 = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)children, 1);
          if (*(_QWORD *)(a2 + 40))
          {
            if (v48)
            {
              v49 = (_QWORD *)*v48;
              xmlFree(v48);
              if (v49)
              {
                v100 = v9;
                v50 = v47;
                v51 = v45;
                v52 = v46;
                do
                {
                  v53 = (_QWORD *)*v49;
                  xmlFree(v49);
                  v49 = v53;
                }
                while (v53);
                v46 = v52;
                v45 = v51;
                v47 = v50;
                v9 = v100;
              }
            }
          }
          else
          {
            *(_QWORD *)(a2 + 40) = v48;
          }
          goto LABEL_101;
        }
        if (children->ns)
        {
          if (!xmlStrEqual(children->name, v46)
            || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            if (!children->ns)
              goto LABEL_101;
            if (xmlStrEqual(children->name, v45)
              && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              v54 = *(_DWORD *)(a1 + 36);
              v61 = a1;
              v62 = a2;
              v63 = children;
              v64 = 2;
            }
            else
            {
              if (!children->ns
                || !xmlStrEqual(children->name, v47)
                || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                goto LABEL_101;
              }
              v54 = *(_DWORD *)(a1 + 36);
              v61 = a1;
              v62 = a2;
              v63 = children;
              v64 = 3;
            }
            v24 = xmlSchemaParseIncludeOrRedefine(v61, v62, v63, v64);
            if ((_DWORD)v24 == -1)
              goto LABEL_221;
            goto LABEL_99;
          }
          v54 = *(_DWORD *)(a1 + 36);
          *(_QWORD *)v105 = 0;
          str2 = 0;
          v104 = 0;
          properties = (uint64_t)children->properties;
          if (properties)
          {
            while (1)
            {
              v56 = *(_QWORD *)(properties + 72);
              if (!v56)
                break;
              if (xmlStrEqual(*(const xmlChar **)(v56 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                goto LABEL_76;
LABEL_80:
              properties = *(_QWORD *)(properties + 48);
              if (!properties)
                goto LABEL_81;
            }
            if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
              || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"namespace")
              || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"schemaLocation"))
            {
              goto LABEL_80;
            }
LABEL_76:
            xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
            goto LABEL_80;
          }
LABEL_81:
          v57 = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
          v58 = xmlSchemaPValAttr((_DWORD *)a1, (uint64_t)children, (xmlChar *)"namespace", v57, &str2);
          v59 = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
          if (v58)
          {
            v60 = str2;
LABEL_96:
            xmlSchemaPSimpleTypeErr(a1, 3037, (uint64_t)children, (uint64_t)v59, 0, v60, 0, 0);
LABEL_97:
            v24 = *(unsigned int *)(a1 + 32);
            goto LABEL_98;
          }
          if (xmlSchemaPValAttr((_DWORD *)a1, (uint64_t)children, (xmlChar *)"schemaLocation", v59, (xmlChar **)v105))
          {
            v59 = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
            v60 = *(const xmlChar **)v105;
            goto LABEL_96;
          }
          v65 = (uint64_t)children->children;
          if (v65)
          {
            if (!*(_QWORD *)(v65 + 72)
              || !xmlStrEqual(*(const xmlChar **)(v65 + 16), (const xmlChar *)"annotation")
              || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v65 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (v65 = *(_QWORD *)(v65 + 48)) != 0)
            {
              xmlSchemaPContentErr(a1, 3033, (uint64_t)children, v65, 0, (xmlChar *)"(annotation?)");
            }
          }
          v66 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
          v67 = *(_QWORD *)(v66 + 16);
          if (str2)
          {
            if (xmlStrEqual(*(const xmlChar **)(v66 + 16), str2))
            {
              v68 = a1;
              v69 = 3064;
              v70 = (uint64_t)children;
              v71 = "The value of the attribute 'namespace' must not match the target namespace '%s' of the importing schema";
LABEL_125:
              xmlSchemaPCustomErrExt(v68, v69, 0, v70, (const xmlChar *)v71);
              goto LABEL_97;
            }
          }
          else if (!v67)
          {
            v68 = a1;
            v69 = 3065;
            v70 = (uint64_t)children;
            v71 = "The attribute 'namespace' must be existent if the importing schema has no target namespace";
            goto LABEL_125;
          }
          if (*(_QWORD *)v105)
          {
            v72 = xmlSchemaBuildAbsoluteURI(*(xmlDict **)(a1 + 152), *(xmlChar **)v105, children);
            *(_QWORD *)v105 = v72;
          }
          else
          {
            v72 = 0;
          }
          v24 = xmlSchemaAddSchemaDoc(a1, 1u, v72, 0, 0, 0, (uint64_t)children, v67, str2, &v104);
          if (!(_DWORD)v24)
          {
            v73 = v104;
            if (!v104 && *(_QWORD *)v105)
            {
              xmlSchemaCustomWarning((_DWORD *)a1, 3084, (uint64_t)children, (const xmlChar *)"Failed to locate a schema at location '%s'. Skipping the import", *(const xmlChar **)v105, 0, 0);
              v73 = v104;
            }
            if (!v73 || !v73[4] || *((_DWORD *)v73 + 13))
            {
              v24 = 0;
LABEL_99:
              if (*(_DWORD *)(a1 + 196) || v54 != *(_DWORD *)(a1 + 36))
              {
LABEL_218:
                *(_QWORD *)(a1 + 160) = 0;
                v7 = v102;
                if (v101 != *(_DWORD *)(a1 + 36))
                  v24 = *(unsigned int *)(a1 + 32);
                goto LABEL_45;
              }
              goto LABEL_101;
            }
            v24 = xmlSchemaParseNewDoc(a1, a2, (uint64_t)v73);
          }
LABEL_98:
          if ((_DWORD)v24 == -1)
          {
LABEL_221:
            v7 = v102;
            goto LABEL_45;
          }
          goto LABEL_99;
        }
      }
LABEL_101:
      children = children->next;
      if (!children)
        goto LABEL_218;
    }
    while (1)
    {
      if (!children->ns)
        goto LABEL_215;
      if (xmlStrEqual(children->name, (const xmlChar *)"complexType")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        xmlSchemaParseComplexType(a1, a2, (uint64_t)children, 1);
        goto LABEL_217;
      }
      if (!children->ns)
        goto LABEL_215;
      if (xmlStrEqual(children->name, (const xmlChar *)"simpleType")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        xmlSchemaParseSimpleType(a1, a2, children, 1);
        goto LABEL_217;
      }
      if (!children->ns)
        goto LABEL_215;
      if (xmlStrEqual(children->name, (const xmlChar *)"element")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        xmlSchemaParseElement(a1, a2, children, 0, 1);
        goto LABEL_217;
      }
      if (!children->ns)
      {
LABEL_215:
        parent = (uint64_t)children->parent;
        v85 = "((include | import | redefine | annotation)*, (((simpleType | complexType | group | attributeGroup) | elem"
              "ent | attribute | notation), annotation*)*)";
        v86 = a1;
        v88 = (uint64_t)children;
        goto LABEL_216;
      }
      if (xmlStrEqual(children->name, (const xmlChar *)"attribute")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v89 = xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"name");
        if (!v89)
        {
          xmlSchemaPMissingAttrErr(a1, (uint64_t)children, (xmlChar *)"name");
          goto LABEL_217;
        }
        v90 = (xmlNode *)v89;
        str2 = 0;
        v91 = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
        if (xmlSchemaPValAttrNode((_DWORD *)a1, v90, v91, &str2))
          goto LABEL_217;
        if (xmlStrEqual(str2, (const xmlChar *)"xmlns"))
        {
          v92 = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
          xmlSchemaPSimpleTypeErr(a1, 3056, (uint64_t)v90, (uint64_t)v92, 0, 0, (const xmlChar *)"The value of the attribute must not match 'xmlns'", 0);
          goto LABEL_217;
        }
        if (xmlStrEqual(*(const xmlChar **)(a1 + 200), (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance"))
          xmlSchemaCustomErr4((_DWORD *)a1, 3057, (uint64_t)children, 0, (const xmlChar *)"The target namespace must not match '%s'", (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance", 0, 0, 0);
        v77 = xmlSchemaAddAttribute(a1, (uint64_t)str2, *(_QWORD *)(a1 + 200), (uint64_t)children, 1);
        if (v77)
        {
          v78 = v77;
          *(_DWORD *)(v77 + 120) |= 1u;
          v79 = (uint64_t)children->properties;
          if (v79)
          {
            while (1)
            {
              v80 = *(_QWORD *)(v79 + 72);
              if (!v80)
                break;
              if (xmlStrEqual(*(const xmlChar **)(v80 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                goto LABEL_144;
LABEL_150:
              v79 = *(_QWORD *)(v79 + 48);
              if (!v79)
                goto LABEL_151;
            }
            if (xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"id")
              || xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"default")
              || xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"fixed")
              || xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"name")
              || xmlStrEqual(*(const xmlChar **)(v79 + 16), (const xmlChar *)"type"))
            {
              goto LABEL_150;
            }
LABEL_144:
            xmlSchemaPIllegalAttrErr((_DWORD *)a1, v79);
            goto LABEL_150;
          }
LABEL_151:
          xmlSchemaPValAttrQName(a1, a2, (uint64_t)children, (xmlChar *)"type", (const xmlChar **)(v78 + 56), (const xmlChar **)(v78 + 48));
          v81 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"id");
          if (v81)
            xmlSchemaPValAttrNodeID(a1, v81);
          Prop = xmlSchemaGetProp(a1, children, (xmlChar *)"fixed");
          *(_QWORD *)(v78 + 88) = Prop;
          if (Prop)
            *(_DWORD *)(v78 + 120) |= 0x200u;
          v83 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"default");
          if (v83)
          {
            if ((*(_BYTE *)(v78 + 121) & 2) != 0)
              xmlSchemaPMutualExclAttrErr(a1, 3051, v78, (uint64_t)v83);
            else
              *(_QWORD *)(v78 + 88) = xmlSchemaGetNodeContent(a1, v83);
          }
          v84 = children->children;
          if (v84)
          {
            if (!v84->ns
              || !xmlStrEqual(v84->name, (const xmlChar *)"annotation")
              || !xmlStrEqual(v84->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
              || (*(_QWORD *)(v78 + 64) = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)v84, 1),
                  (v84 = v84->next) != 0))
            {
              if (!v84->ns
                || !xmlStrEqual(v84->name, (const xmlChar *)"simpleType")
                || !xmlStrEqual(v84->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                goto LABEL_173;
              }
              if (*(_QWORD *)(v78 + 48))
                xmlSchemaPContentErr(a1, 3055, (uint64_t)children, (uint64_t)v84, (xmlChar *)"The attribute 'type' and the <simpleType> child are mutually exclusive", 0);
              else
                *(_QWORD *)(v78 + 96) = xmlSchemaParseSimpleType(a1, a2, v84, 0);
              v84 = v84->next;
              if (v84)
              {
LABEL_173:
                v85 = "(annotation?, simpleType?)";
                v86 = a1;
                parent = (uint64_t)children;
                v88 = (uint64_t)v84;
LABEL_216:
                xmlSchemaPContentErr(v86, 3033, parent, v88, 0, (xmlChar *)v85);
              }
            }
          }
        }
      }
      else
      {
        if (!children->ns)
          goto LABEL_215;
        if (xmlStrEqual(children->name, (const xmlChar *)"attributeGroup")
          && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          xmlSchemaParseAttributeGroupDefinition(a1, a2, (uint64_t)children);
          goto LABEL_217;
        }
        if (!children->ns)
          goto LABEL_215;
        if (xmlStrEqual(children->name, (const xmlChar *)"group")
          && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          xmlSchemaParseModelGroupDefinition(a1, a2, (uint64_t)children);
          goto LABEL_217;
        }
        if (!children->ns
          || !xmlStrEqual(children->name, (const xmlChar *)"notation")
          || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          goto LABEL_215;
        }
        v93 = xmlSchemaGetProp(a1, children, (xmlChar *)"name");
        if (!v93)
        {
          xmlSchemaPErr(a1, (uint64_t)children, 1723, "Notation has no name\n", 0, 0);
          goto LABEL_217;
        }
        v94 = v93;
        v95 = *(_QWORD *)(a1 + 200);
        v96 = xmlMalloc(0x28uLL);
        if (!v96)
        {
          ++*(_DWORD *)(a1 + 36);
          __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"add annotation");
          goto LABEL_217;
        }
        v97 = v96;
        v96[4] = 0;
        *(_OWORD *)v96 = 0u;
        *((_OWORD *)v96 + 1) = 0u;
        *(_DWORD *)v96 = 18;
        v96[1] = v94;
        v96[4] = v95;
        xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 64), 5, (uint64_t)v96);
        v98 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"id");
        if (v98)
          xmlSchemaPValAttrNodeID(a1, v98);
        v99 = (uint64_t)children->children;
        if (v99)
        {
          if (!*(_QWORD *)(v99 + 72)
            || !xmlStrEqual(*(const xmlChar **)(v99 + 16), (const xmlChar *)"annotation")
            || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v99 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (v97[2] = xmlSchemaParseAnnotation((_DWORD *)a1, v99, 1), (v99 = *(_QWORD *)(v99 + 48)) != 0))
          {
            v85 = "(annotation?)";
            v86 = a1;
            parent = (uint64_t)children;
            v88 = v99;
            goto LABEL_216;
          }
        }
      }
LABEL_217:
      children = children->next;
      if (!children)
        goto LABEL_218;
      while (children->ns
           && xmlStrEqual(children->name, (const xmlChar *)"annotation")
           && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v74 = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)children, 1);
        if (*(_QWORD *)(a2 + 40))
        {
          if (v74)
          {
            v75 = (_QWORD *)*v74;
            xmlFree(v74);
            if (v75)
            {
              do
              {
                v76 = (_QWORD *)*v75;
                xmlFree(v75);
                v75 = v76;
              }
              while (v76);
            }
          }
        }
        else
        {
          *(_QWORD *)(a2 + 40) = v74;
        }
        children = children->next;
        if (!children)
          goto LABEL_218;
      }
    }
  }
LABEL_45:
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) = v7;
  *(_QWORD *)(a2 + 32) = v103;
  *(_DWORD *)(a2 + 48) = v9;
  return v24;
}

uint64_t xmlSchemaFixupComponents(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v7;
  int *RedefCompInGraph;
  int *v9;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t ComponentNode;
  const char *v15;
  int v16;
  xmlChar *v17;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  xmlChar *ComponentDesignation;
  uint64_t v23;
  _DWORD *v24;
  xmlSchemaFacet *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _DWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  xmlChar *v39;
  const xmlChar *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *Type;
  uint64_t v44;
  uint64_t v45;
  _QWORD *NamedComponent;
  _DWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  const xmlChar *v51;
  _DWORD *BuiltInType;
  const char *v53;
  int v54;
  uint64_t v55;
  const xmlChar *v56;
  uint64_t v57;
  const xmlChar *v58;
  void *v59;
  uint64_t v60;
  _QWORD *AttributeDecl;
  int v62;
  const xmlChar *v63;
  _DWORD *v64;
  uint64_t v65;
  xmlChar *v66;
  const xmlChar *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  const xmlChar *v72;
  const xmlChar *v73;
  void *v74;
  const xmlChar *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  uint64_t v80;
  xmlChar *v81;
  xmlChar *v82;
  _DWORD *v83;
  _QWORD *v84;
  const xmlChar *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  xmlChar *v91;
  uint64_t v92;
  _DWORD *v93;
  _DWORD *v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  uint64_t v98;
  _DWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t *v104;
  _DWORD *v105;
  _DWORD *v106;
  xmlHashTable *v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t v111;
  uint64_t *v112;
  _DWORD *v113;
  int v114;
  uint64_t v115;
  _DWORD *CircModelGrDefRef;
  _DWORD *v117;
  uint64_t v118;
  uint64_t *v119;
  _DWORD *v120;
  _DWORD *v121;
  uint64_t v122;
  uint64_t j;
  _DWORD *v124;
  uint64_t k;
  uint64_t v126;
  uint64_t v127;
  uint64_t *v128;
  _DWORD *v129;
  uint64_t v130;
  uint64_t *v131;
  _DWORD *v132;
  uint64_t v133;
  uint64_t *v134;
  _DWORD *v135;
  uint64_t v136;
  xmlSchemaType **v137;
  xmlSchemaType *v138;
  uint64_t v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t *v142;
  _DWORD *v143;
  uint64_t v144;
  _DWORD *v145;
  uint64_t v146;
  _DWORD *v147;
  uint64_t v148;
  _QWORD *v149;
  void *v150;

  v2 = *(_QWORD **)(a1 + 48);
  v3 = v2[5];
  if (!v3 || !*(_DWORD *)(v3 + 8))
    return 0;
  v148 = v2[4];
  if (!v148)
    v2[4] = a2;
  for (i = (_QWORD *)v2[7]; i; i = (_QWORD *)*i)
  {
    v7 = i[1];
    RedefCompInGraph = (int *)xmlSchemaFindRedefCompInGraph(i[6], *(_DWORD *)v7, i[4], i[5]);
    if (!RedefCompInGraph)
    {
      v150 = 0;
      if (i[2])
        v13 = (_DWORD *)i[2];
      else
        v13 = (_DWORD *)v7;
      ComponentNode = xmlSchemaGetComponentNode(v13);
      if (*(_DWORD *)v7 == 1)
      {
        if (*(_DWORD *)(v7 + 160) == 45)
          v15 = "complex type definition";
        else
          v15 = "simple type definition";
      }
      else
      {
        v15 = xmlSchemaItemTypeToStr(*(_DWORD *)v7);
      }
      v17 = xmlSchemaFormatQName(&v150, (const xmlChar *)i[5], (xmlChar *)i[4]);
      xmlSchemaCustomErr4((_DWORD *)a1, 3081, ComponentNode, 0, (const xmlChar *)"The %s '%s' to be redefined could not be found in the redefined schema", (const xmlChar *)v15, v17, 0, 0);
LABEL_30:
      if (v150)
      {
        xmlFree(v150);
        v150 = 0;
      }
      continue;
    }
    v9 = RedefCompInGraph;
    v10 = *(_DWORD *)v7;
    if ((*(_DWORD *)v7 - 4) < 2)
    {
      v16 = RedefCompInGraph[22];
      if ((v16 & 0x40000000) != 0)
        goto LABEL_27;
      RedefCompInGraph[22] = v16 | 0x40000000;
      *(_QWORD *)(v7 + 112) = RedefCompInGraph;
    }
    else
    {
      if (v10 != 16)
      {
        if (v10 != 17)
        {
          xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaResolveRedefReferences", (const xmlChar *)"Unexpected redefined component type", 0);
          break;
        }
        v11 = RedefCompInGraph[14];
        if ((v11 & 2) != 0)
        {
LABEL_27:
          v150 = 0;
          v20 = (_DWORD *)i[2];
          if (!v20)
            v20 = (_DWORD *)i[1];
          v21 = xmlSchemaGetComponentNode(v20);
          ComponentDesignation = xmlSchemaGetComponentDesignation((xmlChar **)&v150, v9);
          xmlSchemaCustomErr4((_DWORD *)a1, 3081, v21, 0, (const xmlChar *)"The referenced %s was already redefined. Multiple redefinition of the same component is not supported", ComponentDesignation, 0, 0, 0);
          goto LABEL_30;
        }
        RedefCompInGraph[14] = v11 | 2;
        v12 = i[2];
        if (v12)
          *(_QWORD *)(v12 + 24) = RedefCompInGraph;
LABEL_34:
        i[3] = RedefCompInGraph;
        continue;
      }
      v18 = RedefCompInGraph[18];
      if ((v18 & 8) != 0)
        goto LABEL_27;
      RedefCompInGraph[18] = v18 | 8;
      v19 = i[2];
      if (!v19)
        goto LABEL_34;
      *(_QWORD *)(v19 + 8) = RedefCompInGraph;
      i[3] = 0;
    }
  }
  xmlSchemaAddComponents(a1, a2);
  *(_QWORD *)(a1 + 160) = 0;
  v149 = v2;
  v26 = v2[5];
  v27 = *(unsigned int *)(v26 + 8);
  if ((int)v27 >= 1)
  {
    v28 = 0;
    v147 = (_DWORD *)(a1 + 36);
    v29 = *(uint64_t **)v26;
    while (2)
    {
      v30 = v29[v28];
      v31 = *(_DWORD *)v30;
      switch(*(_DWORD *)v30)
      {
        case 4:
        case 5:
          if (*(_QWORD *)(v30 + 112))
            goto LABEL_59;
          Type = xmlSchemaGetType(*(_QWORD *)(a1 + 64), *(const xmlChar **)(v30 + 96), *(xmlChar **)(v30 + 104));
          *(_QWORD *)(v30 + 112) = Type;
          if (Type)
          {
            v31 = *(_DWORD *)v30;
LABEL_59:
            if (v31 != 4 && (v31 != 1 || *(_DWORD *)(v30 + 160) == 45))
            {
              v44 = *(_QWORD *)(v30 + 56);
              if (!v44)
                goto LABEL_158;
              if (*(_DWORD *)v44 != 25)
                goto LABEL_158;
              v45 = *(_QWORD *)(v44 + 24);
              if (!v45 || *(_DWORD *)v45 != 2000)
                goto LABEL_158;
              *(_QWORD *)(v44 + 24) = 0;
              NamedComponent = xmlSchemaGetNamedComponent(*(_QWORD *)(a1 + 64), *(_DWORD *)(v45 + 16), *(const xmlChar **)(v45 + 24), *(xmlChar **)(v45 + 32));
              if (NamedComponent)
              {
                v47 = (_DWORD *)NamedComponent[3];
                if (v47)
                {
                  v48 = *(_QWORD *)(v30 + 56);
                  *(_QWORD *)(v48 + 24) = v47;
                  if (*v47 == 8 && *(_DWORD *)(v48 + 36) != 1)
                  {
                    v49 = xmlSchemaGetComponentNode((_DWORD *)v48);
                    xmlSchemaCustomErr4((_DWORD *)a1, 3091, v49, 0, (const xmlChar *)"The particle's {max occurs} must be 1, since the reference resolves to an 'all' model group", 0, 0, 0, 0);
                  }
                  goto LABEL_158;
                }
              }
              else
              {
                v92 = xmlSchemaGetComponentNode(*(_DWORD **)(v30 + 56));
                xmlSchemaPResCompAttrErr(a1, 0, v92, (uint64_t)"ref", *(xmlChar **)(v45 + 24), *(const xmlChar **)(v45 + 32), *(_DWORD *)(v45 + 16), 0);
              }
              *(_QWORD *)(v30 + 56) = 0;
              goto LABEL_158;
            }
            v62 = *(_DWORD *)(v30 + 88);
            if ((v62 & 0x80) != 0)
            {
              v77 = (_QWORD *)(v30 + 168);
              v78 = *(_QWORD **)(v30 + 168);
              if (v78)
              {
                v79 = 0;
                do
                {
                  v80 = v78[1];
                  v82 = *(xmlChar **)(v80 + 24);
                  v81 = *(xmlChar **)(v80 + 32);
                  v83 = xmlSchemaGetType(*(_QWORD *)(a1 + 64), v82, v81);
                  if (v83 && (*v83 == 4 || *v83 == 1 && v83[40] != 45))
                  {
                    v78[1] = v83;
                    v84 = (_QWORD *)*v78;
                    v79 = v78;
                  }
                  else
                  {
                    xmlSchemaPResCompAttrErr(a1, v30, *(_QWORD *)(v30 + 72), (uint64_t)"memberTypes", v82, v81, 4, 0);
                    v84 = (_QWORD *)*v78;
                    if (v79)
                    {
                      *v79 = v84;
                      v84 = (_QWORD *)*v78;
                    }
                    else
                    {
                      *v77 = v84;
                    }
                    xmlFree(v78);
                  }
                  v78 = v84;
                }
                while (v84);
              }
              else
              {
                v79 = 0;
              }
              v88 = *(_QWORD *)(v30 + 56);
              if (v88)
              {
                while (1)
                {
                  v89 = xmlMalloc(0x10uLL);
                  if (!v89)
                    break;
                  *v89 = 0;
                  v89[1] = v88;
                  if (v79)
                    v90 = v79;
                  else
                    v90 = v77;
                  *v90 = v89;
                  v88 = *(_QWORD *)(v88 + 8);
                  v79 = v89;
                  if (!v88)
                    goto LABEL_158;
                }
                ++*v147;
                __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating a type link");
              }
LABEL_158:
              if (*(_DWORD *)(a1 + 32) != 3069)
                goto LABEL_149;
              goto LABEL_159;
            }
            if ((v62 & 0x40) == 0)
              goto LABEL_158;
            if (*(_QWORD *)(v30 + 56))
              goto LABEL_158;
            v63 = *(const xmlChar **)(v30 + 96);
            if (!v63)
              goto LABEL_158;
            v64 = xmlSchemaGetType(*(_QWORD *)(a1 + 64), v63, *(xmlChar **)(v30 + 104));
            *(_QWORD *)(v30 + 56) = v64;
            if (v64)
            {
              if (*v64 == 4 || *v64 == 1 && v64[40] != 45)
                goto LABEL_158;
            }
            *(_QWORD *)(v30 + 56) = 0;
            v65 = *(_QWORD *)(v30 + 72);
            v66 = *(xmlChar **)(v30 + 96);
            v67 = *(const xmlChar **)(v30 + 104);
            v68 = a1;
            v69 = v30;
            v70 = "itemType";
          }
          else
          {
            v65 = *(_QWORD *)(v30 + 72);
            v66 = *(xmlChar **)(v30 + 96);
            v67 = *(const xmlChar **)(v30 + 104);
            v68 = a1;
            v69 = v30;
            v70 = "base";
          }
          xmlSchemaPResCompAttrErr(v68, v69, v65, (uint64_t)v70, v66, v67, 4, 0);
          goto LABEL_158;
        case 6:
        case 7:
        case 8:
          v32 = *(_QWORD *)(v30 + 24);
          if (!v32)
            goto LABEL_148;
          while (1)
          {
            v33 = *(_QWORD *)(v32 + 24);
            if (!v33 || *(_DWORD *)v33 != 2000)
              goto LABEL_50;
            *(_QWORD *)(v32 + 24) = 0;
            v34 = xmlSchemaGetNamedComponent(*(_QWORD *)(a1 + 64), *(_DWORD *)(v33 + 16), *(const xmlChar **)(v33 + 24), *(xmlChar **)(v33 + 32));
            if (!v34)
            {
              v37 = xmlSchemaGetComponentNode((_DWORD *)v32);
              xmlSchemaPResCompAttrErr(a1, 0, v37, (uint64_t)"ref", *(xmlChar **)(v33 + 24), *(const xmlChar **)(v33 + 32), *(_DWORD *)(v33 + 16), 0);
              goto LABEL_50;
            }
            if (*(_DWORD *)v34 != 17)
              break;
            v35 = (_DWORD *)v34[3];
            if (v35)
            {
              if (*v35 != 8)
                break;
              v36 = xmlSchemaGetComponentNode((_DWORD *)v32);
              xmlSchemaCustomErr4((_DWORD *)a1, 3091, v36, 0, (const xmlChar *)"A model group definition is referenced, but it contains an 'all' model group, which cannot be contained by model groups", 0, 0, 0, 0);
            }
LABEL_50:
            v32 = *(_QWORD *)(v32 + 16);
            if (!v32)
              goto LABEL_148;
          }
          *(_QWORD *)(v32 + 24) = v34;
          goto LABEL_50;
        case 9:
        case 0xA:
        case 0xB:
        case 0xC:
        case 0xD:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x15:
        case 0x19:
          goto LABEL_149;
        case 0xE:
          xmlSchemaResolveElementReferences((xmlSchemaTypePtr)v29[v28], a1);
          goto LABEL_148;
        case 0xF:
          v50 = *(_DWORD *)(v30 + 120);
          if ((v50 & 0x100) != 0)
            goto LABEL_148;
          *(_DWORD *)(v30 + 120) = v50 | 0x100;
          if (*(_QWORD *)(v30 + 96))
            goto LABEL_148;
          v51 = *(const xmlChar **)(v30 + 48);
          if (v51)
          {
            BuiltInType = xmlSchemaGetType(*(_QWORD *)(a1 + 64), v51, *(xmlChar **)(v30 + 56));
            if (!BuiltInType || *BuiltInType != 4 && (*BuiltInType != 1 || BuiltInType[40] == 45))
            {
              v38 = *(_QWORD *)(v30 + 104);
              v39 = *(xmlChar **)(v30 + 48);
              v40 = *(const xmlChar **)(v30 + 56);
              v41 = a1;
              v42 = v30;
              v53 = "type";
              v54 = 4;
              goto LABEL_147;
            }
          }
          else
          {
            BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYSIMPLETYPE);
          }
          *(_QWORD *)(v30 + 96) = BuiltInType;
          goto LABEL_148;
        case 0x16:
        case 0x17:
          goto LABEL_148;
        case 0x18:
          v55 = *(_QWORD *)(v30 + 72);
          v56 = *(const xmlChar **)(v55 + 24);
          if (!v56)
            goto LABEL_148;
          v57 = *(_QWORD *)(a1 + 64);
          if (!v57)
            goto LABEL_135;
          v58 = *(const xmlChar **)(v55 + 32);
          if (xmlStrEqual(v58, *(const xmlChar **)(v57 + 8))
            && (v59 = xmlHashLookup(*(xmlHashTablePtr *)(v57 + 144), v56)) != 0)
          {
            *(_QWORD *)(*(_QWORD *)(v30 + 72) + 8) = v59;
          }
          else
          {
            if (xmlHashSize(*(xmlHashTablePtr *)(v57 + 96)) < 2
              || (v58 ? (v85 = v58) : (v85 = (const xmlChar *)"##"),
                  (v86 = xmlHashLookup(*(xmlHashTablePtr *)(v57 + 96), v85)) == 0))
            {
LABEL_135:
              v87 = *(_QWORD **)(v30 + 72);
              v87[1] = 0;
LABEL_136:
              v38 = *(_QWORD *)(v30 + 24);
              v39 = (xmlChar *)v87[3];
              v40 = (const xmlChar *)v87[4];
              v41 = a1;
              v42 = v30;
              v53 = "refer";
              v54 = 23;
              goto LABEL_147;
            }
            v59 = xmlHashLookup(*(xmlHashTablePtr *)(v86[10] + 144), v56);
            v87 = *(_QWORD **)(v30 + 72);
            v87[1] = v59;
            if (!v59)
              goto LABEL_136;
          }
          if (*(_DWORD *)v59 == 24)
          {
            xmlSchemaCustomErr4((_DWORD *)a1, 3080, 0, (_DWORD *)v30, (const xmlChar *)"The keyref references a keyref", 0, 0, 0, 0);
            *(_QWORD *)(*(_QWORD *)(v30 + 72) + 8) = 0;
          }
          else if (*(_DWORD *)(v30 + 64) != *((_DWORD *)v59 + 16))
          {
            v150 = 0;
            v91 = xmlSchemaFormatQName(&v150, *((const xmlChar **)v59 + 5), *((xmlChar **)v59 + 4));
            xmlSchemaCustomErr4((_DWORD *)a1, 3080, 0, (_DWORD *)v30, (const xmlChar *)"The cardinality of the keyref differs from the cardinality of the referenced key/unique '%s'", v91, 0, 0, 0);
            if (v150)
              xmlFree(v150);
          }
          goto LABEL_148;
        case 0x1A:
          v60 = *(_QWORD *)(v30 + 24);
          if (!v60)
            goto LABEL_148;
          if (*(_DWORD *)v60 != 2000)
            goto LABEL_148;
          AttributeDecl = xmlSchemaGetAttributeDecl(*(_QWORD *)(a1 + 64), *(const xmlChar **)(v60 + 24), *(xmlChar **)(v60 + 32));
          *(_QWORD *)(v30 + 24) = AttributeDecl;
          if (AttributeDecl)
            goto LABEL_148;
          v38 = *(_QWORD *)(v30 + 40);
          v39 = *(xmlChar **)(v60 + 24);
          v40 = *(const xmlChar **)(v60 + 32);
          v41 = a1;
          v42 = v30;
          goto LABEL_89;
        default:
          if (v31 == 2000)
          {
            if (*(_DWORD *)(v30 + 16) == 16 && !*(_QWORD *)(v30 + 8))
            {
              v71 = *(_QWORD *)(a1 + 64);
              if (v71)
              {
                v72 = *(const xmlChar **)(v30 + 24);
                if (v72)
                {
                  if ((v73 = *(const xmlChar **)(v30 + 32), xmlStrEqual(v73, *(const xmlChar **)(v71 + 8)))
                    && (v74 = xmlHashLookup(*(xmlHashTablePtr *)(v71 + 72), v72)) != 0
                    || xmlHashSize(*(xmlHashTablePtr *)(v71 + 96)) >= 2
                    && (v73 ? (v75 = v73) : (v75 = (const xmlChar *)"##"),
                        (v76 = xmlHashLookup(*(xmlHashTablePtr *)(v71 + 96), v75)) != 0
                     && (v74 = xmlHashLookup(*(xmlHashTablePtr *)(v76[10] + 72), v72)) != 0))
                  {
                    *(_QWORD *)(v30 + 8) = v74;
                    goto LABEL_148;
                  }
                }
              }
              v40 = *(const xmlChar **)(v30 + 32);
              v38 = *(_QWORD *)(v30 + 40);
              v39 = *(xmlChar **)(v30 + 24);
              v54 = *(_DWORD *)(v30 + 16);
              v41 = a1;
              v42 = 0;
              v53 = "ref";
              goto LABEL_147;
            }
          }
          else
          {
            if (v31 != 2001)
              goto LABEL_149;
            if (!xmlSchemaGetAttributeDecl(*(_QWORD *)(a1 + 64), *(const xmlChar **)(v30 + 16), *(xmlChar **)(v30 + 24)))
            {
              v38 = *(_QWORD *)(v30 + 8);
              v39 = *(xmlChar **)(v30 + 16);
              v40 = *(const xmlChar **)(v30 + 24);
              v41 = a1;
              v42 = 0;
LABEL_89:
              v53 = "ref";
              v54 = 15;
LABEL_147:
              xmlSchemaPResCompAttrErr(v41, v42, v38, (uint64_t)v53, v39, v40, v54, 0);
            }
          }
LABEL_148:
          if (*(_DWORD *)(a1 + 32) == 3069)
            goto LABEL_159;
LABEL_149:
          if (++v28 != v27)
            continue;
          v106 = (_DWORD *)(a1 + 36);
          if (*v147)
            goto LABEL_183;
          v111 = v27;
          v112 = v29;
          break;
      }
      break;
    }
    while (1)
    {
      v113 = (_DWORD *)*v112;
      v114 = *(_DWORD *)*v112;
      if ((v114 - 4) < 2)
      {
        v24 = (_DWORD *)*((_QWORD *)v113 + 14);
        if (v24)
          xmlSchemaCheckTypeDefCircularInternal(a1, (_DWORD *)*v112, v24);
        goto LABEL_209;
      }
      if (v114 == 16)
        break;
      if (v114 == 17)
      {
        v115 = *((_QWORD *)v113 + 3);
        if (v115)
        {
          CircModelGrDefRef = (_DWORD *)xmlSchemaGetCircModelGrDefRef(*v112, *(_QWORD *)(v115 + 24));
          if (CircModelGrDefRef)
          {
            v117 = CircModelGrDefRef;
            v150 = 0;
            v118 = xmlSchemaGetComponentNode(CircModelGrDefRef);
            xmlSchemaFormatQName(&v150, *((const xmlChar **)v113 + 5), *((xmlChar **)v113 + 4));
            xmlSchemaPCustomErrExt(a1, 3075, 0, v118, (const xmlChar *)"Circular reference to the model group definition '%s' defined");
            if (v150)
              xmlFree(v150);
            *((_QWORD *)v117 + 3) = 0;
            goto LABEL_208;
          }
        }
        goto LABEL_209;
      }
LABEL_211:
      ++v112;
      if (!--v111)
      {
        for (j = 0; j != v27; ++j)
        {
          v124 = (_DWORD *)v29[j];
          if ((*v124 & 0xFFFFFFFE) == 6)
          {
            for (k = *((_QWORD *)v124 + 3); k; k = *(_QWORD *)(k + 16))
            {
              v126 = *(_QWORD *)(k + 24);
              if (v126 && *(_DWORD *)v126 == 17)
                *(_QWORD *)(k + 24) = *(_QWORD *)(v126 + 24);
            }
          }
        }
        v127 = v27;
        v128 = v29;
        while (1)
        {
          v129 = (_DWORD *)*v128;
          if (*(_DWORD *)*v128 == 16 && (v129[18] & 0x11) == 0x10)
          {
            xmlSchemaAttributeGroupExpandRefs(a1, (uint64_t)v129);
            if (*(_DWORD *)(a1 + 32) == 3069)
              break;
          }
          ++v128;
          if (!--v127)
          {
            if (*v106)
              goto LABEL_183;
            v130 = v27;
            v131 = v29;
            while (1)
            {
              v132 = (_DWORD *)*v131;
              if (*(_DWORD *)*v131 == 4 && (*((_BYTE *)v132 + 91) & 0x20) == 0)
              {
                xmlSchemaFixupSimpleTypeStageOne((_DWORD *)a1, (uint64_t)v132);
                if (*(_DWORD *)(a1 + 32) == 3069)
                  goto LABEL_159;
              }
              ++v131;
              if (!--v130)
              {
                if (*v106)
                  goto LABEL_183;
                v133 = v27;
                v134 = v29;
                while (1)
                {
                  v135 = (_DWORD *)*v134;
                  if (*(_DWORD *)*v134 == 4)
                  {
                    v24 = (_DWORD *)*((_QWORD *)v135 + 21);
                    if (v24)
                    {
                      if ((v135[22] & 0x80) != 0)
                        xmlSchemaCheckUnionTypeDefCircularRecur(a1, v135, v24);
                      if (*(_DWORD *)(a1 + 32) == 3069)
                        goto LABEL_159;
                    }
                  }
                  ++v134;
                  if (!--v133)
                  {
                    if (*v106)
                      goto LABEL_183;
                    v136 = v27;
                    v137 = (xmlSchemaType **)v29;
                    while (1)
                    {
                      v138 = *v137;
                      if ((*v137)->type == XML_SCHEMA_TYPE_SIMPLE && (v138->flags & 0x400000) == 0)
                      {
                        xmlSchemaFixupSimpleTypeStageTwo((xmlSchemaParserCtxt *)a1, v138, (uint64_t)v24, v25);
                        if (*(_DWORD *)(a1 + 32) == 3069)
                          goto LABEL_159;
                      }
                      ++v137;
                      if (!--v136)
                      {
                        if (*v106)
                          goto LABEL_183;
                        v139 = v27;
                        v140 = v29;
                        while (1)
                        {
                          if (*(_DWORD *)*v140 == 15)
                          {
                            xmlSchemaCheckAttrPropsCorrect((_DWORD *)a1, *v140);
                            if (*(_DWORD *)(a1 + 32) == 3069)
                              goto LABEL_159;
                          }
                          ++v140;
                          if (!--v139)
                          {
                            if (*v106)
                              goto LABEL_183;
                            v141 = v27;
                            v142 = v29;
                            while (1)
                            {
                              v143 = (_DWORD *)*v142;
                              if (*(_DWORD *)*v142 == 26)
                              {
                                if (*((_QWORD *)v143 + 7))
                                {
                                  xmlSchemaCheckAttrUsePropsCorrect((_DWORD *)a1, (uint64_t)v143);
                                  if (*(_DWORD *)(a1 + 32) == 3069)
                                    goto LABEL_159;
                                }
                              }
                              ++v142;
                              if (!--v141)
                              {
                                if (*v147)
                                  goto LABEL_183;
                                v144 = v27;
                                while (1)
                                {
                                  v145 = (_DWORD *)*v29;
                                  if (*(_DWORD *)*v29 == 16)
                                  {
                                    v146 = *((_QWORD *)v145 + 14);
                                    if (v146)
                                    {
                                      if (*(int *)(v146 + 8) >= 2)
                                      {
                                        xmlSchemaCheckAGPropsCorrect(a1, (uint64_t)v145);
                                        if (*(_DWORD *)(a1 + 32) == 3069)
                                          goto LABEL_159;
                                      }
                                    }
                                  }
                                  ++v29;
                                  if (!--v144)
                                  {
                                    v93 = (_DWORD *)(a1 + 36);
                                    if (*v147)
                                      goto LABEL_183;
                                    goto LABEL_161;
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_159:
        v23 = 0xFFFFFFFFLL;
LABEL_184:
        v97 = v149;
        goto LABEL_185;
      }
    }
    v119 = (uint64_t *)*((_QWORD *)v113 + 14);
    if (v119)
    {
      if ((v113[18] & 0x10) != 0)
      {
        v120 = (_DWORD *)xmlSchemaCheckAttrGroupCircularRecur(*v112, v119);
        if (v120)
        {
          v121 = v120;
          v150 = 0;
          v122 = xmlSchemaGetComponentNode(v120);
          xmlSchemaGetComponentQName(&v150, v113);
          xmlSchemaPCustomErrExt(a1, 3073, 0, v122, (const xmlChar *)"Circular reference to the attribute group '%s' defined");
          if (v150)
            xmlFree(v150);
          *((_QWORD *)v121 + 1) = 0;
LABEL_208:
          v106 = (_DWORD *)(a1 + 36);
        }
      }
    }
LABEL_209:
    if (*(_DWORD *)(a1 + 32) == 3069)
      goto LABEL_159;
    if (*v106)
      goto LABEL_183;
    goto LABEL_211;
  }
  v93 = (_DWORD *)(a1 + 36);
  if (*(_DWORD *)(a1 + 36))
  {
LABEL_183:
    v23 = *(unsigned int *)(a1 + 32);
    goto LABEL_184;
  }
LABEL_161:
  if (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56))
  {
    xmlSchemaCheckSRCRedefineSecond(a1);
    if (*(_DWORD *)(a1 + 36))
      goto LABEL_183;
  }
  if ((int)v27 < 1)
  {
LABEL_170:
    v99 = v93;
    v97 = v149;
    v100 = v149[5];
    v101 = *(unsigned int *)(v100 + 8);
    if ((int)v101 < 1)
    {
      v23 = 0;
      goto LABEL_185;
    }
    v102 = *(uint64_t **)v100;
    v103 = *(unsigned int *)(v100 + 8);
    v104 = *(uint64_t **)v100;
    while (1)
    {
      v105 = (_DWORD *)*v104;
      if (*(_DWORD *)*v104 == 14 && (*((_BYTE *)v105 + 90) & 4) == 0)
      {
        xmlSchemaCheckElementDeclComponent((uint64_t)v105, a1);
        if (*(_DWORD *)(a1 + 32) == 3069)
          break;
      }
      ++v104;
      if (!--v103)
      {
        if (!*v99)
        {
          do
          {
            if (*(_DWORD *)*v102 == 5)
              xmlSchemaBuildContentModel(*v102, a1);
            ++v102;
            --v101;
          }
          while (v101);
          if (!*v99)
          {
            v23 = 0;
            goto LABEL_184;
          }
        }
        goto LABEL_183;
      }
    }
  }
  else
  {
    v94 = v93;
    v95 = 0;
    v96 = 8 * v27;
    v97 = v149;
    while (1)
    {
      v98 = *(_QWORD *)(*(_QWORD *)v149[5] + v95);
      if (*(_DWORD *)v98 == 5 && (*(_BYTE *)(v98 + 90) & 0x40) == 0)
      {
        xmlSchemaFixupComplexType(a1, v98);
        if (*(_DWORD *)(a1 + 32) == 3069)
          break;
      }
      v95 += 8;
      if (v96 == v95)
      {
        v93 = v94;
        if (*v94)
          goto LABEL_183;
        goto LABEL_170;
      }
    }
  }
  v23 = 0xFFFFFFFFLL;
LABEL_185:
  v97[4] = v148;
  *(_DWORD *)(v97[5] + 8) = 0;
  v107 = (xmlHashTable *)v97[6];
  if (v107)
  {
    xmlHashFree(v107, (xmlHashDeallocator)xmlSchemaSubstGroupFreeEntry);
    v97[6] = 0;
  }
  v108 = (_QWORD *)v97[7];
  if (v108)
  {
    do
    {
      v109 = (_QWORD *)*v108;
      xmlFree(v108);
      v108 = v109;
    }
    while (v109);
    v97[7] = 0;
  }
  return v23;
}

void xmlSchemaSetParserErrors(xmlSchemaParserCtxtPtr ctxt, xmlSchemaValidityErrorFunc err, xmlSchemaValidityWarningFunc warn, void *ctx)
{
  uint64_t v4;

  do
  {
    if (!ctxt)
      break;
    *((_QWORD *)ctxt + 2) = err;
    *((_QWORD *)ctxt + 3) = warn;
    *((_QWORD *)ctxt + 1) = ctx;
    v4 = *((_QWORD *)ctxt + 22);
    if (!v4)
      break;
    *(_QWORD *)(v4 + 16) = err;
    *(_QWORD *)(v4 + 24) = warn;
    *(_QWORD *)(v4 + 8) = ctx;
    ctxt = *(xmlSchemaParserCtxtPtr *)(v4 + 160);
  }
  while (ctxt);
}

void xmlSchemaSetValidErrors(xmlSchemaValidCtxtPtr ctxt, xmlSchemaValidityErrorFunc err, xmlSchemaValidityWarningFunc warn, void *ctx)
{
  _QWORD *i;
  _QWORD *v5;

  if (ctxt)
  {
    *((_QWORD *)ctxt + 2) = err;
    *((_QWORD *)ctxt + 3) = warn;
    *((_QWORD *)ctxt + 1) = ctx;
    for (i = (_QWORD *)*((_QWORD *)ctxt + 20); i; i = (_QWORD *)v5[20])
    {
      i[2] = err;
      i[3] = warn;
      i[1] = ctx;
      v5 = (_QWORD *)i[22];
      if (!v5)
        break;
      v5[2] = err;
      v5[3] = warn;
      v5[1] = ctx;
    }
  }
}

void xmlSchemaSetParserStructuredErrors(xmlSchemaParserCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx)
{
  uint64_t v3;

  do
  {
    if (!ctxt)
      break;
    *((_QWORD *)ctxt + 5) = serror;
    *((_QWORD *)ctxt + 1) = ctx;
    v3 = *((_QWORD *)ctxt + 22);
    if (!v3)
      break;
    *(_QWORD *)(v3 + 24) = 0;
    *(_QWORD *)(v3 + 32) = serror;
    *(_QWORD *)(v3 + 8) = ctx;
    *(_QWORD *)(v3 + 16) = 0;
    ctxt = *(xmlSchemaParserCtxtPtr *)(v3 + 160);
  }
  while (ctxt);
}

void xmlSchemaSetValidStructuredErrors(xmlSchemaValidCtxtPtr ctxt, xmlStructuredErrorFunc serror, void *ctx)
{
  _QWORD *i;
  _QWORD *v4;

  if (ctxt)
  {
    *((_QWORD *)ctxt + 3) = 0;
    *((_QWORD *)ctxt + 4) = serror;
    *((_QWORD *)ctxt + 1) = ctx;
    *((_QWORD *)ctxt + 2) = 0;
    for (i = (_QWORD *)*((_QWORD *)ctxt + 20); i; i = (_QWORD *)v4[20])
    {
      i[5] = serror;
      i[1] = ctx;
      v4 = (_QWORD *)i[22];
      if (!v4)
        break;
      v4[3] = 0;
      v4[4] = serror;
      v4[1] = ctx;
      v4[2] = 0;
    }
  }
}

int xmlSchemaGetParserErrors(xmlSchemaParserCtxtPtr ctxt, xmlSchemaValidityErrorFunc *err, xmlSchemaValidityWarningFunc *warn, void **ctx)
{
  int v4;

  if (!ctxt)
    return -1;
  if (err)
    *err = (xmlSchemaValidityErrorFunc)*((_QWORD *)ctxt + 2);
  if (warn)
    *warn = (xmlSchemaValidityWarningFunc)*((_QWORD *)ctxt + 3);
  v4 = 0;
  if (ctx)
    *ctx = (void *)*((_QWORD *)ctxt + 1);
  return v4;
}

xmlSchemaValidCtxtPtr xmlSchemaNewValidCtxt(xmlSchemaPtr schema)
{
  _OWORD *v2;
  _OWORD *v3;

  v2 = xmlMalloc(0x160uLL);
  v3 = v2;
  if (v2)
  {
    v2[20] = 0u;
    v2[21] = 0u;
    v2[18] = 0u;
    v2[19] = 0u;
    v2[16] = 0u;
    v2[17] = 0u;
    v2[14] = 0u;
    v2[15] = 0u;
    v2[12] = 0u;
    v2[13] = 0u;
    v2[10] = 0u;
    v2[11] = 0u;
    v2[8] = 0u;
    v2[9] = 0u;
    v2[6] = 0u;
    v2[7] = 0u;
    v2[4] = 0u;
    v2[5] = 0u;
    v2[2] = 0u;
    v2[3] = 0u;
    *v2 = 0u;
    v2[1] = 0u;
    *(_DWORD *)v2 = 2;
    *((_QWORD *)v2 + 34) = xmlDictCreate();
    *((_QWORD *)v3 + 39) = xmlSchemaItemListCreate();
    *((_QWORD *)v3 + 5) = schema;
  }
  else
  {
    __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)"allocating validation context");
  }
  return (xmlSchemaValidCtxtPtr)v3;
}

_QWORD *xmlSchemaItemListCreate()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = xmlMalloc(0x10uLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 0;
    v0[1] = 0;
  }
  else
  {
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating an item list structure");
  }
  return v1;
}

void xmlSchemaValidateSetFilename(xmlSchemaValidCtxtPtr vctxt, const char *filename)
{
  void *v4;
  xmlChar *v5;

  if (vctxt)
  {
    v4 = (void *)*((_QWORD *)vctxt + 12);
    if (v4)
      xmlFree(v4);
    if (filename)
      v5 = xmlStrdup((const xmlChar *)filename);
    else
      v5 = 0;
    *((_QWORD *)vctxt + 12) = v5;
  }
}

void xmlSchemaFreeIDCStateObjList(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  void *v3;
  xmlStreamCtxt *v4;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)v1[1];
      v3 = (void *)v1[3];
      if (v3)
        xmlFree(v3);
      v4 = (xmlStreamCtxt *)v1[7];
      if (v4)
        xmlFreeStreamCtxt(v4);
      xmlFree(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void xmlSchemaClearAttrInfos(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  xmlSchemaVal *v8;

  v1 = *(_DWORD *)(a1 + 296);
  if (v1)
  {
    if (v1 >= 1)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v3);
        if ((*(_BYTE *)(v4 + 64) & 1) != 0)
        {
          v5 = *(void **)(v4 + 24);
          if (v5)
            xmlFree(v5);
          v6 = *(void **)(v4 + 32);
          if (v6)
            xmlFree(v6);
        }
        if ((*(_BYTE *)(v4 + 64) & 2) != 0)
        {
          v7 = *(void **)(v4 + 40);
          if (v7)
            xmlFree(v7);
        }
        v8 = *(xmlSchemaVal **)(v4 + 48);
        if (v8)
          xmlSchemaFreeValue(v8);
        *(_OWORD *)(v4 + 80) = 0u;
        *(_OWORD *)(v4 + 96) = 0u;
        *(_OWORD *)(v4 + 48) = 0u;
        *(_OWORD *)(v4 + 64) = 0u;
        *(_OWORD *)(v4 + 16) = 0u;
        *(_OWORD *)(v4 + 32) = 0u;
        *(_OWORD *)v4 = 0u;
        ++v3;
      }
      while (v3 < *(int *)(a1 + 296));
    }
    *(_DWORD *)(a1 + 296) = 0;
  }
}

void xmlSchemaClearElemInfo(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  void *v6;
  xmlSchemaVal *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  xmlHashTable *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  xmlRegExecCtxt *v20;
  void *v21;
  _QWORD *v22;
  void *v23;

  *(_QWORD *)(a2 + 136) = 0;
  v4 = (void **)(a2 + 24);
  if ((*(_BYTE *)(a2 + 64) & 1) != 0)
  {
    if (*v4)
    {
      xmlFree(*v4);
      *v4 = 0;
    }
    v5 = *(void **)(a2 + 32);
    if (v5)
    {
      xmlFree(v5);
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    *v4 = 0;
    *(_QWORD *)(a2 + 32) = 0;
  }
  if ((*(_BYTE *)(a2 + 64) & 2) != 0)
  {
    v6 = *(void **)(a2 + 40);
    if (!v6)
      goto LABEL_11;
    xmlFree(v6);
  }
  *(_QWORD *)(a2 + 40) = 0;
LABEL_11:
  v7 = *(xmlSchemaVal **)(a2 + 48);
  if (v7)
  {
    xmlSchemaFreeValue(v7);
    *(_QWORD *)(a2 + 48) = 0;
  }
  v8 = *(_QWORD *)(a2 + 104);
  if (v8)
  {
    do
    {
      v9 = *(_QWORD *)(v8 + 8);
      if (*(_QWORD *)(v8 + 40))
      {
        v10 = *(_DWORD *)(v8 + 48);
        if (v10 >= 1)
        {
          for (i = 0; i < v10; ++i)
          {
            v12 = *(void **)(*(_QWORD *)(v8 + 40) + 8 * i);
            if (v12)
            {
              xmlFree(v12);
              *(_QWORD *)(*(_QWORD *)(v8 + 40) + 8 * i) = 0;
              v10 = *(_DWORD *)(v8 + 48);
            }
          }
        }
      }
      v13 = *(_QWORD *)(v8 + 56);
      if (v13)
      {
        if (*(_DWORD *)(v8 + 32) == 24 && *(int *)(v13 + 8) >= 1)
        {
          v14 = 0;
          do
          {
            v15 = *(void ***)(*(_QWORD *)v13 + 8 * v14);
            xmlFree(v15[1]);
            xmlFree(v15);
            ++v14;
            v13 = *(_QWORD *)(v8 + 56);
          }
          while (v14 < *(int *)(v13 + 8));
        }
        if (*(_QWORD *)v13)
          xmlFree(*(void **)v13);
        xmlFree((void *)v13);
        *(_QWORD *)(v8 + 56) = 0;
      }
      v16 = *(xmlHashTable **)(v8 + 64);
      if (v16)
      {
        xmlHashFree(v16, (xmlHashDeallocator)xmlFreeIDCHashEntry);
        *(_QWORD *)(v8 + 64) = 0;
      }
      *(_QWORD *)(v8 + 8) = 0;
      v17 = *(_QWORD *)(a1 + 224);
      if (v17)
        *(_QWORD *)(v8 + 16) = v17;
      *(_QWORD *)(a1 + 224) = v8;
      v8 = v9;
    }
    while (v9);
    *(_QWORD *)(a2 + 104) = 0;
  }
  v18 = *(_QWORD **)(a2 + 96);
  if (v18)
  {
    do
    {
      v19 = (_QWORD *)*v18;
      xmlSchemaIDCFreeBinding(v18);
      v18 = v19;
    }
    while (v19);
    *(_QWORD *)(a2 + 96) = 0;
  }
  v20 = *(xmlRegExecCtxt **)(a2 + 112);
  if (v20)
  {
    xmlRegFreeExecCtxt(v20);
    *(_QWORD *)(a2 + 112) = 0;
  }
  v23 = *(void **)(a2 + 120);
  v22 = (_QWORD *)(a2 + 120);
  v21 = v23;
  if (v23)
  {
    xmlFree(v21);
    *v22 = 0;
    v22[1] = 0;
  }
}

int xmlSchemaIsValid(xmlSchemaValidCtxtPtr ctxt)
{
  if (ctxt)
    return *((_DWORD *)ctxt + 26) == 0;
  else
    return -1;
}

int xmlSchemaGetValidErrors(xmlSchemaValidCtxtPtr ctxt, xmlSchemaValidityErrorFunc *err, xmlSchemaValidityWarningFunc *warn, void **ctx)
{
  int v4;

  if (!ctxt)
    return -1;
  if (err)
    *err = (xmlSchemaValidityErrorFunc)*((_QWORD *)ctxt + 2);
  if (warn)
    *warn = (xmlSchemaValidityWarningFunc)*((_QWORD *)ctxt + 3);
  v4 = 0;
  if (ctx)
    *ctx = (void *)*((_QWORD *)ctxt + 1);
  return v4;
}

int xmlSchemaSetValidOptions(xmlSchemaValidCtxtPtr ctxt, int options)
{
  int v2;
  int v3;

  if (ctxt)
  {
    v2 = 1;
    while (((options >> v2) & 1) == 0)
    {
      if (++v2 == 32)
      {
        v3 = 0;
        *((_DWORD *)ctxt + 37) = options;
        return v3;
      }
    }
  }
  return -1;
}

int xmlSchemaValidCtxtGetOptions(xmlSchemaValidCtxtPtr ctxt)
{
  if (ctxt)
    return *((_DWORD *)ctxt + 37);
  else
    return -1;
}

int xmlSchemaValidateOneElement(xmlSchemaValidCtxtPtr ctxt, xmlNodePtr elem)
{
  if (!ctxt || !elem || elem->type != XML_ELEMENT_NODE || !*((_QWORD *)ctxt + 5))
    return -1;
  *((_QWORD *)ctxt + 6) = elem->doc;
  *((_QWORD *)ctxt + 14) = elem;
  *((_QWORD *)ctxt + 19) = elem;
  return xmlSchemaVStart((uint64_t)ctxt);
}

uint64_t xmlSchemaVStart(uint64_t a1)
{
  const xmlDoc *v2;
  xmlNodePtr RootElement;
  uint64_t v4;
  xmlNodePtr children;
  xmlNodePtr v6;
  int v7;
  int type;
  int v9;
  xmlNs *ns;
  _xmlAttr *properties;
  xmlNs *v12;
  const xmlChar *v13;
  int v14;
  const xmlChar *name;
  xmlChar *String;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  xmlParserCtxt *v21;
  const char *v22;
  const char *v23;

  if ((xmlSchemaPreRun((_QWORD *)a1) & 0x80000000) != 0)
    return 0xFFFFFFFFLL;
  v2 = *(const xmlDoc **)(a1 + 48);
  if (!v2)
  {
    if (*(_QWORD *)(a1 + 280))
    {
      xmlSchemaPostRun(a1);
    }
    else
    {
      if (!*(_QWORD *)(a1 + 72) || (v21 = *(xmlParserCtxt **)(a1 + 80)) == 0)
      {
        v22 = "xmlSchemaVStart";
        v23 = "no instance to validate";
        goto LABEL_53;
      }
      v19 = xmlParseDocument(v21);
LABEL_46:
      v20 = v19;
      xmlSchemaPostRun(a1);
      if ((_DWORD)v20)
        return v20;
    }
    return *(unsigned int *)(a1 + 104);
  }
  RootElement = *(xmlNodePtr *)(a1 + 152);
  if (!RootElement)
  {
    RootElement = xmlDocGetRootElement(v2);
    if (!RootElement)
    {
      v20 = 1;
      xmlSchemaCustomErr4((_DWORD *)a1, 1, 0, 0, (const xmlChar *)"The document has no document element", 0, 0, 0, 0);
      goto LABEL_55;
    }
  }
  v4 = 0;
  *(_DWORD *)(a1 + 172) = -1;
  *(_QWORD *)(a1 + 152) = RootElement;
  children = RootElement;
  while (1)
  {
    v6 = children;
    v7 = *(_DWORD *)(a1 + 304);
    if (v7 != -1 && *(_DWORD *)(a1 + 172) >= v7)
      goto LABEL_36;
    type = v6->type;
    if ((type - 3) < 2)
    {
      if (v4)
      {
        v9 = *(_DWORD *)(v4 + 64);
        if ((v9 & 0x20) != 0)
          *(_DWORD *)(v4 + 64) = v9 ^ 0x20;
      }
      if ((xmlSchemaVPushText(a1, type, v6->content, -1, 1) & 0x80000000) != 0)
      {
        v22 = "xmlSchemaVDocWalk";
        v23 = "calling xmlSchemaVPushText()";
        goto LABEL_53;
      }
      goto LABEL_16;
    }
    if (type != 1)
    {
      if ((type - 5) >= 2)
        goto LABEL_32;
      v22 = "xmlSchemaVDocWalk";
      v23 = "there is at least one entity reference in the node-tree currently being validated. Processing of entities wi"
            "th this XML Schema processor is not supported (yet). Please substitute entities before validation.";
      goto LABEL_53;
    }
    ++*(_DWORD *)(a1 + 172);
    if (xmlSchemaValidatorPushElem(a1) == -1)
      goto LABEL_54;
    v4 = *(_QWORD *)(a1 + 192);
    *(_QWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 16) = v6->line;
    *(_QWORD *)(v4 + 24) = v6->name;
    ns = v6->ns;
    if (ns)
      *(_QWORD *)(v4 + 32) = ns->href;
    *(_DWORD *)(v4 + 64) |= 0x20u;
    *(_DWORD *)(a1 + 296) = 0;
    properties = v6->properties;
    if (properties)
      break;
LABEL_27:
    v17 = xmlSchemaValidateElem((int *)a1);
    if (v17)
    {
      if (v17 != -1)
        goto LABEL_32;
      v22 = "xmlSchemaDocWalk";
      v23 = "calling xmlSchemaValidateElem()";
      goto LABEL_53;
    }
    v18 = *(_DWORD *)(a1 + 304);
    if (v18 == -1 || *(_DWORD *)(a1 + 172) < v18)
    {
LABEL_16:
      children = v6->children;
      if (!children)
        goto LABEL_32;
    }
    else
    {
      while (1)
      {
LABEL_32:
        if (v6->type == XML_ELEMENT_NODE)
        {
          if (v6 != *(xmlNodePtr *)(*(_QWORD *)(a1 + 192) + 8))
          {
            v22 = "xmlSchemaVDocWalk";
            v23 = "element position mismatch";
            goto LABEL_53;
          }
          v19 = xmlSchemaValidatorPopElem((_DWORD *)a1);
          if ((v19 & 0x80000000) != 0)
          {
            v22 = "xmlSchemaVDocWalk";
            v23 = "calling xmlSchemaValidatorPopElem()";
            goto LABEL_53;
          }
          if (v6 == RootElement)
            goto LABEL_46;
        }
LABEL_36:
        children = v6->next;
        if (children)
          break;
        v6 = v6->parent;
      }
    }
  }
  while (1)
  {
    v12 = properties->ns;
    v13 = v12 ? v12->href : 0;
    v14 = *(_DWORD *)(v4 + 16);
    name = properties->name;
    String = xmlNodeListGetString(properties->doc, properties->children, 1);
    if (xmlSchemaValidatorPushAttribute((_DWORD *)a1, (const xmlChar *)properties, v14, name, v13, String) == -1)break;
    properties = properties->next;
    if (!properties)
      goto LABEL_27;
  }
  v22 = "xmlSchemaDocWalk";
  v23 = "calling xmlSchemaValidatorPushAttribute()";
LABEL_53:
  xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)v22, (const xmlChar *)v23, 0);
LABEL_54:
  v20 = 0xFFFFFFFFLL;
LABEL_55:
  xmlSchemaPostRun(a1);
  return v20;
}

int xmlSchemaValidateDoc(xmlSchemaValidCtxtPtr ctxt, xmlDocPtr instance)
{
  int result;
  xmlNodePtr RootElement;

  result = -1;
  if (ctxt && instance)
  {
    *((_QWORD *)ctxt + 6) = instance;
    RootElement = xmlDocGetRootElement(instance);
    *((_QWORD *)ctxt + 14) = RootElement;
    if (RootElement)
    {
      *((_QWORD *)ctxt + 19) = RootElement;
      return xmlSchemaVStart((uint64_t)ctxt);
    }
    else
    {
      xmlSchemaCustomErr4(ctxt, 1872, (uint64_t)instance, 0, (const xmlChar *)"The document has no document element", 0, 0, 0, 0);
      return *((_DWORD *)ctxt + 26);
    }
  }
  return result;
}

xmlSchemaSAXPlugPtr xmlSchemaSAXPlug(xmlSchemaValidCtxtPtr ctxt, xmlSAXHandlerPtr *sax, void **user_data)
{
  xmlSchemaSAXPlugStruct *v3;
  xmlSAXHandlerPtr v7;
  char *v8;
  xmlSAXHandler *v9;
  void (__cdecl *ignorableWhitespace)(void *, const xmlChar *, int);
  void (*v11)(_QWORD *, xmlChar *, uint64_t);
  void *v12;
  xmlSchemaValidCtxtPtr v13;

  v3 = 0;
  if (ctxt && sax && user_data)
  {
    v7 = *sax;
    if (!*sax
      || v7->initialized == -554844497
      && (v7->startElementNs || v7->endElementNs || !v7->startElement && !v7->endElement))
    {
      v8 = (char *)xmlMalloc(0x130uLL);
      v3 = (xmlSchemaSAXPlugStruct *)v8;
      if (v8)
      {
        *((_OWORD *)v8 + 17) = 0u;
        *((_OWORD *)v8 + 18) = 0u;
        *((_OWORD *)v8 + 15) = 0u;
        *((_OWORD *)v8 + 16) = 0u;
        *((_OWORD *)v8 + 13) = 0u;
        *((_OWORD *)v8 + 14) = 0u;
        *((_OWORD *)v8 + 11) = 0u;
        *((_OWORD *)v8 + 12) = 0u;
        *((_OWORD *)v8 + 9) = 0u;
        *((_OWORD *)v8 + 10) = 0u;
        *((_OWORD *)v8 + 7) = 0u;
        *((_OWORD *)v8 + 8) = 0u;
        *((_OWORD *)v8 + 5) = 0u;
        *((_OWORD *)v8 + 6) = 0u;
        *((_OWORD *)v8 + 3) = 0u;
        *((_OWORD *)v8 + 4) = 0u;
        *((_OWORD *)v8 + 1) = 0u;
        *((_OWORD *)v8 + 2) = 0u;
        *(_OWORD *)v8 = 0u;
        *(_DWORD *)v8 = -599541215;
        v9 = (xmlSAXHandler *)(v8 + 40);
        *((_DWORD *)v8 + 64) = -554844497;
        *((_QWORD *)v8 + 37) = ctxt;
        *((_QWORD *)v8 + 1) = sax;
        *((_QWORD *)v8 + 2) = v7;
        if (v7)
        {
          if (v7->internalSubset)
            v9->internalSubset = (internalSubsetSAXFunc)internalSubsetSplit;
          if (v7->isStandalone)
            *((_QWORD *)v8 + 6) = isStandaloneSplit;
          if (v7->hasInternalSubset)
            *((_QWORD *)v8 + 7) = hasInternalSubsetSplit;
          if (v7->hasExternalSubset)
            *((_QWORD *)v8 + 8) = hasExternalSubsetSplit;
          if (v7->resolveEntity)
            *((_QWORD *)v8 + 9) = resolveEntitySplit;
          if (v7->getEntity)
            *((_QWORD *)v8 + 10) = getEntitySplit;
          if (v7->entityDecl)
            *((_QWORD *)v8 + 11) = entityDeclSplit;
          if (v7->notationDecl)
            *((_QWORD *)v8 + 12) = notationDeclSplit;
          if (v7->attributeDecl)
            *((_QWORD *)v8 + 13) = attributeDeclSplit;
          if (v7->elementDecl)
            *((_QWORD *)v8 + 14) = elementDeclSplit;
          if (v7->unparsedEntityDecl)
            *((_QWORD *)v8 + 15) = unparsedEntityDeclSplit;
          if (v7->setDocumentLocator)
            *((_QWORD *)v8 + 16) = setDocumentLocatorSplit;
          if (v7->startDocument)
            *((_QWORD *)v8 + 17) = startDocumentSplit;
          if (v7->endDocument)
            *((_QWORD *)v8 + 18) = endDocumentSplit;
          if (v7->processingInstruction)
            *((_QWORD *)v8 + 24) = processingInstructionSplit;
          if (v7->comment)
            *((_QWORD *)v8 + 25) = commentSplit;
          if (v7->warning)
            *((_QWORD *)v8 + 26) = warningSplit;
          if (v7->error)
            *((_QWORD *)v8 + 27) = errorSplit;
          if (v7->fatalError)
            *((_QWORD *)v8 + 28) = fatalErrorSplit;
          if (v7->getParameterEntity)
            *((_QWORD *)v8 + 29) = getParameterEntitySplit;
          if (v7->externalSubset)
            *((_QWORD *)v8 + 31) = externalSubsetSplit;
          *((_QWORD *)v8 + 22) = charactersSplit;
          ignorableWhitespace = v7->ignorableWhitespace;
          if (!ignorableWhitespace || ignorableWhitespace == v7->characters)
            v11 = charactersSplit;
          else
            v11 = ignorableWhitespaceSplit;
          *((_QWORD *)v8 + 23) = v11;
          *((_QWORD *)v8 + 30) = cdataBlockSplit;
          *((_QWORD *)v8 + 21) = referenceSplit;
          *((_QWORD *)v8 + 34) = startElementNsSplit;
          *((_QWORD *)v8 + 35) = endElementNsSplit;
          *((_QWORD *)v8 + 3) = user_data;
          v12 = *user_data;
          v13 = (xmlSchemaValidCtxtPtr)v8;
        }
        else
        {
          *((_QWORD *)v8 + 34) = xmlSchemaSAXHandleStartElementNs;
          *((_QWORD *)v8 + 35) = xmlSchemaSAXHandleEndElementNs;
          *((_QWORD *)v8 + 22) = xmlSchemaSAXHandleText;
          *((_QWORD *)v8 + 23) = xmlSchemaSAXHandleText;
          *((_QWORD *)v8 + 30) = xmlSchemaSAXHandleCDataSection;
          *((_QWORD *)v8 + 21) = xmlSchemaSAXHandleReference;
          v12 = ctxt;
          v13 = ctxt;
        }
        *((_QWORD *)v8 + 4) = v12;
        *user_data = v13;
        *sax = v9;
        *((_QWORD *)ctxt + 9) = v9;
        *((_DWORD *)ctxt + 66) |= 1u;
        xmlSchemaPreRun(ctxt);
      }
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

void xmlSchemaSAXHandleStartElementNs(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v10;
  uint64_t v18;
  _BYTE **v19;
  void *v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  uint64_t v25;
  int v26;
  int v27;
  const xmlChar *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  const char *v34;
  int v35;
  const char *v36;
  int v37;
  int v38;

  v9 = *(_DWORD *)(a1 + 172) + 1;
  *(_DWORD *)(a1 + 172) = v9;
  v10 = *(_DWORD *)(a1 + 304);
  if (v10 != -1 && v9 >= v10)
    return;
  if (xmlSchemaValidatorPushElem(a1) == -1)
  {
    v34 = "calling xmlSchemaValidatorPushElem()";
    goto LABEL_45;
  }
  v18 = *(_QWORD *)(a1 + 192);
  *(_DWORD *)(v18 + 16) = xmlSAX2GetLineNumber(*(void **)(a1 + 80));
  *(_QWORD *)(v18 + 24) = a2;
  *(_QWORD *)(v18 + 32) = a4;
  *(_DWORD *)(v18 + 64) |= 0x20u;
  if (a5 >= 1)
  {
    v19 = (_BYTE **)(a6 + 8);
    do
    {
      v20 = *(void **)(v18 + 120);
      if (v20)
      {
        v21 = *(_DWORD *)(v18 + 128);
        v22 = *(int *)(v18 + 132);
        if ((int)v22 <= v21)
        {
          *(_DWORD *)(v18 + 132) = 2 * v22;
          v20 = xmlRealloc(v20, 32 * v22);
          *(_QWORD *)(v18 + 120) = v20;
          if (!v20)
          {
            if (a1)
            {
              v38 = *(_DWORD *)(a1 + 108) + 1;
              *(_DWORD *)(a1 + 104) = 1818;
              *(_DWORD *)(a1 + 108) = v38;
            }
            v36 = "re-allocating namespace bindings for SAX validation";
            goto LABEL_52;
          }
          v21 = *(_DWORD *)(v18 + 128);
        }
      }
      else
      {
        v20 = xmlMalloc(0x50uLL);
        *(_QWORD *)(v18 + 120) = v20;
        if (!v20)
        {
          if (a1)
          {
            v37 = *(_DWORD *)(a1 + 108) + 1;
            *(_DWORD *)(a1 + 104) = 1818;
            *(_DWORD *)(a1 + 108) = v37;
          }
          v36 = "allocating namespace bindings for SAX validation";
          goto LABEL_52;
        }
        v21 = 0;
        *(_QWORD *)(v18 + 128) = 0x500000000;
      }
      *((_QWORD *)v20 + 2 * v21) = *(v19 - 1);
      v24 = *v19;
      v19 += 2;
      v23 = v24;
      if (!*v24)
        v23 = 0;
      *(_QWORD *)(*(_QWORD *)(v18 + 120) + 16 * v21 + 8) = v23;
      *(_DWORD *)(v18 + 128) = v21 + 1;
      --a5;
    }
    while (a5);
  }
  if (a7 < 1)
  {
LABEL_37:
    if (xmlSchemaValidateElem((int *)a1) == -1)
    {
      v34 = "calling xmlSchemaValidateElem()";
      goto LABEL_45;
    }
    return;
  }
  v25 = 0;
  v26 = 0;
  while (1)
  {
    v27 = *(_DWORD *)(a9 + 8 * v25 + 32) - *(_QWORD *)(a9 + 8 * (v25 + 3));
    v28 = (const xmlChar *)xmlMallocAtomic(v27 + 1);
    if (!v28)
    {
      if (a1)
      {
        v35 = *(_DWORD *)(a1 + 108) + 1;
        *(_DWORD *)(a1 + 104) = 1818;
        *(_DWORD *)(a1 + 108) = v35;
      }
      v36 = "allocating string for decoded attribute";
LABEL_52:
      __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)v36);
      goto LABEL_53;
    }
    if (v27 >= 1)
    {
      v29 = 0;
      v30 = 0;
      while (1)
      {
        v31 = *(_QWORD *)(a9 + 8 * (v25 + 3));
        v32 = *(unsigned __int8 *)(v31 + v30);
        if ((int)v30 >= v27 - 4 || v32 != 38)
          goto LABEL_31;
        if (*(_BYTE *)(v30 + v31 + 1) != 35 || *(_BYTE *)(v30 + v31 + 2) != 51 || *(_BYTE *)(v30 + v31 + 3) != 56)
          break;
        LOBYTE(v32) = 38;
        if (*(_BYTE *)(v30 + v31 + 4) != 59)
          goto LABEL_31;
        v33 = 5;
LABEL_32:
        v28[v29] = v32;
        v30 += v33;
        ++v29;
        if ((int)v30 >= v27)
          goto LABEL_35;
      }
      LOBYTE(v32) = 38;
LABEL_31:
      v33 = 1;
      goto LABEL_32;
    }
    LODWORD(v29) = 0;
LABEL_35:
    v28[v29] = 0;
    if (xmlSchemaValidatorPushAttribute((_DWORD *)a1, 0, *(_DWORD *)(v18 + 16), *(const xmlChar **)(a9 + 8 * v25), *(const xmlChar **)(a9 + 8 * v25 + 16), v28) == -1)break;
    ++v26;
    v25 += 5;
    if (v26 == a7)
      goto LABEL_37;
  }
  v34 = "calling xmlSchemaValidatorPushAttribute()";
LABEL_45:
  xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaSAXHandleStartElementNs", (const xmlChar *)v34, 0);
LABEL_53:
  *(_DWORD *)(a1 + 104) = -1;
  xmlStopParser(*(xmlParserCtxtPtr *)(a1 + 80));
}

void xmlSchemaSAXHandleEndElementNs(uint64_t a1, const xmlChar *a2, uint64_t a3, const xmlChar *a4)
{
  int v6;
  int v7;

  v6 = *(_DWORD *)(a1 + 304);
  if (v6 != -1)
  {
    v7 = *(_DWORD *)(a1 + 172);
    if (v7 > v6)
    {
      *(_DWORD *)(a1 + 172) = v7 - 1;
      return;
    }
    *(_DWORD *)(a1 + 304) = -1;
  }
  if (!xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(a1 + 192) + 24), a2)
    || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(a1 + 192) + 32), a4))
  {
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaSAXHandleEndElementNs", (const xmlChar *)"elem pop mismatch", 0);
  }
  if ((xmlSchemaValidatorPopElem((_DWORD *)a1) & 0x80000000) != 0)
  {
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaSAXHandleEndElementNs", (const xmlChar *)"calling xmlSchemaValidatorPopElem()", 0);
    *(_DWORD *)(a1 + 104) = -1;
    xmlStopParser(*(xmlParserCtxtPtr *)(a1 + 80));
  }
}

void xmlSchemaSAXHandleText(uint64_t a1, xmlChar *str2, int len)
{
  int v3;
  int v5;
  uint64_t v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 172);
  if ((v3 & 0x80000000) == 0)
  {
    v5 = *(_DWORD *)(a1 + 304);
    if (v5 == -1 || v3 < v5)
    {
      v7 = *(_QWORD *)(a1 + 192);
      v8 = *(_DWORD *)(v7 + 64);
      if ((v8 & 0x20) != 0)
        *(_DWORD *)(v7 + 64) = v8 ^ 0x20;
      if (xmlSchemaVPushText(a1, 3, str2, len, 3) == -1)
      {
        xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaSAXHandleCDataSection", (const xmlChar *)"calling xmlSchemaVPushText()", 0);
        *(_DWORD *)(a1 + 104) = -1;
        xmlStopParser(*(xmlParserCtxtPtr *)(a1 + 80));
      }
    }
  }
}

void xmlSchemaSAXHandleCDataSection(uint64_t a1, xmlChar *str2, int len)
{
  int v3;
  int v5;
  uint64_t v7;
  int v8;

  v3 = *(_DWORD *)(a1 + 172);
  if ((v3 & 0x80000000) == 0)
  {
    v5 = *(_DWORD *)(a1 + 304);
    if (v5 == -1 || v3 < v5)
    {
      v7 = *(_QWORD *)(a1 + 192);
      v8 = *(_DWORD *)(v7 + 64);
      if ((v8 & 0x20) != 0)
        *(_DWORD *)(v7 + 64) = v8 ^ 0x20;
      if (xmlSchemaVPushText(a1, 4, str2, len, 3) == -1)
      {
        xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaSAXHandleCDataSection", (const xmlChar *)"calling xmlSchemaVPushText()", 0);
        *(_DWORD *)(a1 + 104) = -1;
        xmlStopParser(*(xmlParserCtxtPtr *)(a1 + 80));
      }
    }
  }
}

uint64_t xmlSchemaSAXHandleReference(uint64_t result)
{
  int v1;
  int v2;
  xmlGenericErrorFunc v4;
  void **v5;

  v1 = *(_DWORD *)(result + 172);
  if ((v1 & 0x80000000) == 0)
  {
    v2 = *(_DWORD *)(result + 304);
    if (v2 == -1 || v1 < v2)
    {
      v4 = *__xmlGenericError();
      v5 = __xmlGenericErrorContext();
      return ((uint64_t (*)(void *, const char *, ...))v4)(*v5, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 27583);
    }
  }
  return result;
}

uint64_t internalSubsetSplit(uint64_t result)
{
  uint64_t (**v1)(_QWORD);

  if (result)
  {
    v1 = *(uint64_t (***)(_QWORD))(result + 16);
    if (v1)
    {
      if (*v1)
        return (*v1)(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t isStandaloneSplit(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(_QWORD))(v1 + 8)) != 0)
    return v2(*(_QWORD *)(a1 + 32));
  else
    return 0;
}

uint64_t hasInternalSubsetSplit(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(_QWORD))(v1 + 16)) != 0)
    return v2(*(_QWORD *)(a1 + 32));
  else
    return 0;
}

uint64_t hasExternalSubsetSplit(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(_QWORD))(v1 + 24)) != 0)
    return v2(*(_QWORD *)(a1 + 32));
  else
    return 0;
}

uint64_t resolveEntitySplit(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(_QWORD))(v1 + 32)) != 0)
    return v2(*(_QWORD *)(a1 + 32));
  else
    return 0;
}

uint64_t getEntitySplit(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(_QWORD))(v1 + 40)) != 0)
    return v2(*(_QWORD *)(a1 + 32));
  else
    return 0;
}

uint64_t entityDeclSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 48);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t notationDeclSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 56);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

void attributeDeclSplit(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, xmlEnumerationPtr cur)
{
  uint64_t v7;
  void (*v8)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, xmlEnumerationPtr);

  if (a1
    && (v7 = *(_QWORD *)(a1 + 16)) != 0
    && (v8 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, xmlEnumerationPtr))(v7 + 64)) != 0)
  {
    v8(*(_QWORD *)(a1 + 32), a2, a3, a4, a5, a6, cur);
  }
  else
  {
    xmlFreeEnumeration(cur);
  }
}

uint64_t elementDeclSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 72);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t unparsedEntityDeclSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 80);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t setDocumentLocatorSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 88);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t startDocumentSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 96);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t endDocumentSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 104);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t processingInstructionSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 152);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t commentSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 160);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

uint64_t warningSplit(uint64_t result)
{
  uint64_t v1;
  xmlGenericErrorFunc v2;
  void **v3;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      if (*(_QWORD *)(v1 + 168))
      {
        v2 = *__xmlGenericError();
        v3 = __xmlGenericErrorContext();
        return ((uint64_t (*)(void *, const char *, ...))v2)(*v3, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 28761);
      }
    }
  }
  return result;
}

uint64_t errorSplit(uint64_t result)
{
  uint64_t v1;
  xmlGenericErrorFunc v2;
  void **v3;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      if (*(_QWORD *)(v1 + 176))
      {
        v2 = *__xmlGenericError();
        v3 = __xmlGenericErrorContext();
        return ((uint64_t (*)(void *, const char *, ...))v2)(*v3, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 28769);
      }
    }
  }
  return result;
}

uint64_t fatalErrorSplit(uint64_t result)
{
  uint64_t v1;
  xmlGenericErrorFunc v2;
  void **v3;

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      if (*(_QWORD *)(v1 + 184))
      {
        v2 = *__xmlGenericError();
        v3 = __xmlGenericErrorContext();
        return ((uint64_t (*)(void *, const char *, ...))v2)(*v3, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 28777);
      }
    }
  }
  return result;
}

uint64_t getParameterEntitySplit(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (a1 && (v1 = *(_QWORD *)(a1 + 16)) != 0 && (v2 = *(uint64_t (**)(_QWORD))(v1 + 192)) != 0)
    return v2(*(_QWORD *)(a1 + 32));
  else
    return 0;
}

uint64_t externalSubsetSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    if (v1)
    {
      v2 = *(uint64_t (**)(_QWORD))(v1 + 208);
      if (v2)
        return v2(*(_QWORD *)(result + 32));
    }
  }
  return result;
}

void charactersSplit(_QWORD *a1, xmlChar *str2, uint64_t len)
{
  int v3;
  uint64_t v6;
  void (*v7)(_QWORD, xmlChar *, uint64_t);
  uint64_t v8;

  if (a1)
  {
    v3 = len;
    v6 = a1[2];
    if (v6)
    {
      v7 = *(void (**)(_QWORD, xmlChar *, uint64_t))(v6 + 136);
      if (v7)
        v7(a1[4], str2, len);
    }
    v8 = a1[37];
    if (v8)
      xmlSchemaSAXHandleText(v8, str2, v3);
  }
}

void ignorableWhitespaceSplit(_QWORD *a1, xmlChar *str2, uint64_t len)
{
  int v3;
  uint64_t v6;
  void (*v7)(_QWORD, xmlChar *, uint64_t);
  uint64_t v8;

  if (a1)
  {
    v3 = len;
    v6 = a1[2];
    if (v6)
    {
      v7 = *(void (**)(_QWORD, xmlChar *, uint64_t))(v6 + 144);
      if (v7)
        v7(a1[4], str2, len);
    }
    v8 = a1[37];
    if (v8)
      xmlSchemaSAXHandleText(v8, str2, v3);
  }
}

void cdataBlockSplit(_QWORD *a1, xmlChar *str2, uint64_t len)
{
  int v3;
  uint64_t v6;
  void (*v7)(_QWORD, xmlChar *, uint64_t);
  uint64_t v8;

  if (a1)
  {
    v3 = len;
    v6 = a1[2];
    if (v6)
    {
      v7 = *(void (**)(_QWORD, xmlChar *, uint64_t))(v6 + 200);
      if (v7)
        v7(a1[4], str2, len);
    }
    v8 = a1[37];
    if (v8)
      xmlSchemaSAXHandleCDataSection(v8, str2, v3);
  }
}

uint64_t referenceSplit(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(_QWORD);

  if (result)
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 16);
    if (v2)
    {
      v3 = *(uint64_t (**)(_QWORD))(v2 + 128);
      if (v3)
        result = v3(*(_QWORD *)(result + 32));
    }
    if (*(_QWORD *)(v1 + 296))
      return xmlSchemaSAXHandleReference(*(_QWORD *)(v1 + 32));
  }
  return result;
}

void startElementNsSplit(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v9;
  int v11;
  uint64_t v15;
  void (*v16)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;

  if (a1)
  {
    v9 = a7;
    v11 = a5;
    v15 = a1[2];
    if (v15)
    {
      v16 = *(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 232);
      if (v16)
        v16(a1[4], a2, a3, a4, a5, a6, a7);
    }
    v17 = a1[37];
    if (v17)
      xmlSchemaSAXHandleStartElementNs(v17, a2, a3, a4, v11, a6, v9, a8, a9);
  }
}

void endElementNsSplit(_QWORD *a1, const xmlChar *a2, uint64_t a3, const xmlChar *a4)
{
  uint64_t v7;
  void (*v8)(_QWORD, const xmlChar *, uint64_t, const xmlChar *);
  uint64_t v9;

  if (a1)
  {
    v7 = a1[2];
    if (v7)
    {
      v8 = *(void (**)(_QWORD, const xmlChar *, uint64_t, const xmlChar *))(v7 + 240);
      if (v8)
        v8(a1[4], a2, a3, a4);
    }
    v9 = a1[37];
    if (v9)
      xmlSchemaSAXHandleEndElementNs(v9, a2, a3, a4);
  }
}

uint64_t xmlSchemaPreRun(_QWORD *data)
{
  uint64_t v2;
  uint64_t v4;
  xmlSchemaParserCtxtPtr v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _OWORD *v14;
  _QWORD *v15;

  data[13] = 0;
  *((_DWORD *)data + 43) = -1;
  *((_DWORD *)data + 76) = -1;
  data[40] = 0;
  v2 = data[5];
  if (v2)
    goto LABEL_2;
  *((_DWORD *)data + 42) = 1;
  v4 = data[20];
  if (!v4)
  {
    v5 = xmlSchemaNewParserCtxt("*");
    data[20] = v5;
    if (!v5)
    {
      xmlSchemaInternalErr2(data, (const xmlChar *)"xmlSchemaCreatePCtxtOnVCtxt", (const xmlChar *)"failed to create a temp. parser context", 0);
      return 0xFFFFFFFFLL;
    }
    v7 = data[2];
    v6 = data[3];
    v8 = v5;
    v9 = data[1];
    do
    {
      v8[2] = v7;
      v8[3] = v6;
      v8[1] = v9;
      v10 = (_QWORD *)v8[22];
      if (!v10)
        break;
      v10[2] = v7;
      v10[3] = v6;
      v10[1] = v9;
      v8 = (_QWORD *)v10[20];
    }
    while (v8);
    v11 = data[4];
    v12 = data[1];
    do
    {
      *((_QWORD *)v5 + 5) = v11;
      *((_QWORD *)v5 + 1) = v12;
      v13 = (_QWORD *)*((_QWORD *)v5 + 22);
      if (!v13)
        break;
      v13[3] = 0;
      v13[4] = v11;
      v13[1] = v12;
      v13[2] = 0;
      v5 = (xmlSchemaParserCtxtPtr)v13[20];
    }
    while (v5);
    v4 = data[20];
  }
  *(_DWORD *)(v4 + 192) = 1;
  v14 = xmlSchemaNewSchema(v4);
  data[5] = v14;
  if (v14)
  {
    v15 = xmlSchemaConstructionCtxtCreate(*(xmlDict **)(v4 + 152));
    *(_QWORD *)(v4 + 48) = v15;
    if (v15)
    {
      v2 = data[5];
      *v15 = v2;
      *(_DWORD *)(v4 + 56) = 1;
LABEL_2:
      xmlHashScan(*(xmlHashTablePtr *)(v2 + 96), (xmlHashScanner)xmlSchemaAugmentImportedIDC, data);
      return 0;
    }
  }
  return 0xFFFFFFFFLL;
}

int xmlSchemaSAXUnplug(xmlSchemaSAXPlugPtr plug)
{
  if (!plug)
    return -1;
  if (*(_DWORD *)plug != -599541215)
    return -1;
  *(_DWORD *)plug = 0;
  xmlSchemaPostRun(*((_QWORD *)plug + 37));
  **((_QWORD **)plug + 1) = *((_QWORD *)plug + 2);
  if (*((_QWORD *)plug + 2))
    **((_QWORD **)plug + 3) = *((_QWORD *)plug + 4);
  xmlFree(plug);
  return 0;
}

void xmlSchemaPostRun(uint64_t a1)
{
  xmlSchema *v2;
  xmlSchemaVal *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  xmlHashTable *v16;
  void *v17;
  void **v18;
  uint64_t v19;
  void **v20;
  void *v21;
  void **v22;
  uint64_t v23;
  _QWORD *v24;
  xmlSchemaVal *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;

  if (*(_DWORD *)(a1 + 168))
  {
    v2 = *(xmlSchema **)(a1 + 40);
    if (v2)
    {
      xmlSchemaFree(v2);
      *(_QWORD *)(a1 + 40) = 0;
    }
  }
  *(_DWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_DWORD *)(a1 + 320) = 0;
  v3 = *(xmlSchemaVal **)(a1 + 136);
  if (v3)
  {
    xmlSchemaFreeValue(v3);
    *(_QWORD *)(a1 + 136) = 0;
  }
  v4 = *(_QWORD **)(a1 + 200);
  if (v4)
  {
    do
    {
      v5 = (_QWORD *)*v4;
      xmlFree(v4);
      v4 = v5;
    }
    while (v5);
    *(_QWORD *)(a1 + 200) = 0;
  }
  v6 = *(_QWORD *)(a1 + 224);
  if (v6)
  {
    do
    {
      v7 = v6;
      v6 = *(_QWORD *)(v6 + 16);
      do
      {
        v8 = *(_QWORD *)(v7 + 8);
        v9 = *(void **)(v7 + 40);
        if (v9)
        {
          v10 = *(_DWORD *)(v7 + 48);
          if (v10 >= 1)
          {
            for (i = 0; i < v10; ++i)
            {
              v12 = *(void **)(*(_QWORD *)(v7 + 40) + 8 * i);
              if (v12)
              {
                xmlFree(v12);
                v10 = *(_DWORD *)(v7 + 48);
              }
            }
            v9 = *(void **)(v7 + 40);
          }
          xmlFree(v9);
        }
        v13 = *(_QWORD *)(v7 + 56);
        if (v13)
        {
          if (*(_DWORD *)(v7 + 32) == 24 && *(int *)(v13 + 8) >= 1)
          {
            v14 = 0;
            do
            {
              v15 = *(void ***)(*(_QWORD *)v13 + 8 * v14);
              xmlFree(v15[1]);
              xmlFree(v15);
              ++v14;
              v13 = *(_QWORD *)(v7 + 56);
            }
            while (v14 < *(int *)(v13 + 8));
          }
          if (*(_QWORD *)v13)
            xmlFree(*(void **)v13);
          xmlFree((void *)v13);
        }
        v16 = *(xmlHashTable **)(v7 + 64);
        if (v16)
          xmlHashFree(v16, (xmlHashDeallocator)xmlFreeIDCHashEntry);
        xmlFree((void *)v7);
        v7 = v8;
      }
      while (v8);
    }
    while (v6);
    *(_QWORD *)(a1 + 224) = 0;
  }
  v18 = (void **)(a1 + 232);
  v17 = *(void **)(a1 + 232);
  if (v17)
  {
    if (*(int *)(a1 + 240) >= 1)
    {
      v19 = 0;
      do
      {
        v20 = *(void ***)(*(_QWORD *)(a1 + 232) + 8 * v19);
        xmlFree(v20[1]);
        xmlFree(v20);
        ++v19;
      }
      while (v19 < *(int *)(a1 + 240));
      v17 = *v18;
    }
    xmlFree(v17);
    *v18 = 0;
    *(_QWORD *)(a1 + 240) = 0;
  }
  v22 = (void **)(a1 + 248);
  v21 = *(void **)(a1 + 248);
  if (v21)
  {
    if (*(int *)(a1 + 256) >= 1)
    {
      v23 = 0;
      do
      {
        v24 = (_QWORD *)*((_QWORD *)*v22 + v23);
        v25 = (xmlSchemaVal *)v24[1];
        if (v25)
          xmlSchemaFreeValue(v25);
        xmlFree(v24);
        ++v23;
      }
      while (v23 < *(int *)(a1 + 256));
      v21 = *v22;
    }
    xmlFree(v21);
    *v22 = 0;
    *(_QWORD *)(a1 + 256) = 0;
  }
  v26 = *(_QWORD **)(a1 + 208);
  if (v26)
  {
    xmlSchemaFreeIDCStateObjList(v26);
    *(_QWORD *)(a1 + 208) = 0;
  }
  if (*(_DWORD *)(a1 + 296))
    xmlSchemaClearAttrInfos(a1);
  if (*(_QWORD *)(a1 + 176) && *(int *)(a1 + 184) >= 1)
  {
    v27 = 0;
    do
    {
      v28 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v27);
      if (!v28)
        break;
      xmlSchemaClearElemInfo(a1, v28);
      ++v27;
    }
    while (v27 < *(int *)(a1 + 184));
  }
  v29 = *(_QWORD *)(a1 + 312);
  if (*(_QWORD *)v29)
  {
    xmlFree(*(void **)v29);
    *(_QWORD *)v29 = 0;
  }
  *(_QWORD *)(v29 + 8) = 0;
  xmlDictFree(*(xmlDictPtr *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = xmlDictCreate();
  v30 = *(void **)(a1 + 96);
  if (v30)
  {
    xmlFree(v30);
    *(_QWORD *)(a1 + 96) = 0;
  }
}

void xmlSchemaValidateSetLocator(xmlSchemaValidCtxtPtr vctxt, xmlSchemaValidityLocatorFunc f, void *ctxt)
{
  if (vctxt)
  {
    *((_QWORD *)vctxt + 42) = f;
    *((_QWORD *)vctxt + 43) = ctxt;
  }
}

int xmlSchemaValidateStream(xmlSchemaValidCtxtPtr ctxt, xmlParserInputBufferPtr input, xmlCharEncoding enc, xmlSAXHandlerPtr sax, void *user_data)
{
  int v5;
  xmlParserCtxtPtr v11;
  xmlParserCtxt *v12;
  _xmlSAXHandler *v13;
  void **p_userData;
  xmlParserInput *v15;
  xmlSchemaSAXPlugPtr v16;
  xmlSchemaSAXPlugStruct *v17;
  uint64_t v18;
  unsigned int v19;

  v5 = -1;
  if (ctxt)
  {
    if (input)
    {
      v11 = xmlNewParserCtxt();
      if (v11)
      {
        v12 = v11;
        v13 = v11->sax;
        v11->sax = sax;
        v11->userData = user_data;
        p_userData = &v11->userData;
        v11->linenumbers = 1;
        *((_QWORD *)ctxt + 42) = xmlSchemaValidateStreamLocator;
        *((_QWORD *)ctxt + 43) = v11;
        v15 = xmlNewIOInputStream(v11, input, enc);
        if (v15
          && (inputPush(v12, v15),
              *((_QWORD *)ctxt + 10) = v12,
              *((_QWORD *)ctxt + 7) = input,
              (v16 = xmlSchemaSAXPlug(ctxt, &v12->sax, p_userData)) != 0))
        {
          v17 = v16;
          *((_QWORD *)ctxt + 7) = input;
          *((_DWORD *)ctxt + 16) = enc;
          *((_QWORD *)ctxt + 9) = v12->sax;
          *((_DWORD *)ctxt + 66) |= 1u;
          v5 = xmlSchemaVStart((uint64_t)ctxt);
          if (!v5)
          {
            v18 = *((_QWORD *)ctxt + 10);
            if (*(_DWORD *)(v18 + 24))
            {
              v5 = 0;
            }
            else
            {
              v19 = *(_DWORD *)(v18 + 136);
              if (v19 <= 1)
                v5 = 1;
              else
                v5 = v19;
            }
          }
          *((_QWORD *)ctxt + 7) = 0;
          *((_QWORD *)ctxt + 9) = 0;
          *((_QWORD *)ctxt + 10) = 0;
          xmlSchemaSAXUnplug(v17);
        }
        else
        {
          *((_QWORD *)ctxt + 7) = 0;
          v5 = -1;
          *((_QWORD *)ctxt + 9) = 0;
          *((_QWORD *)ctxt + 10) = 0;
        }
        v12->sax = v13;
        xmlFreeParserCtxt(v12);
      }
    }
  }
  return v5;
}

uint64_t xmlSchemaValidateStreamLocator(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  if (!a1 || !(a2 | a3))
    return 0xFFFFFFFFLL;
  if (a2)
    *(_QWORD *)a2 = 0;
  if (a3)
    *(_QWORD *)a3 = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if (!v3)
    return 0xFFFFFFFFLL;
  if (a2)
    *(_QWORD *)a2 = *(_QWORD *)(v3 + 8);
  v4 = 0;
  if (a3)
    *(_QWORD *)a3 = *(int *)(*(_QWORD *)(a1 + 56) + 52);
  return v4;
}

int xmlSchemaValidateFile(xmlSchemaValidCtxtPtr ctxt, const char *filename, int options)
{
  xmlParserInputBuffer *v4;

  if (ctxt && filename && (v4 = xmlParserInputBufferCreateFilename(filename, XML_CHAR_ENCODING_NONE)) != 0)
    return xmlSchemaValidateStream(ctxt, v4, XML_CHAR_ENCODING_NONE, 0, 0);
  else
    return -1;
}

xmlParserCtxtPtr xmlSchemaValidCtxtGetParserCtxt(xmlParserCtxtPtr ctxt)
{
  if (ctxt)
    return (xmlParserCtxtPtr)ctxt->node;
  return ctxt;
}

void xmlSchemaComponentListFree(uint64_t *a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  int v6;
  _QWORD **v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD **v10;
  _QWORD *v11;
  _QWORD *v12;
  xmlPatternPtr *v13;
  _QWORD *v14;
  _QWORD *v15;
  xmlPattern *v16;
  const char *v17;
  _QWORD **v18;
  _QWORD *v19;
  _QWORD *v20;
  xmlRegexp *v21;
  xmlSchemaVal *v22;
  _QWORD **v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD **v26;
  _QWORD *v27;
  _QWORD *v28;
  void **v29;
  _QWORD **v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD **v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD **v36;
  _QWORD *v37;
  _QWORD *v38;

  v1 = *((_DWORD *)a1 + 2);
  if (v1)
  {
    if (v1 >= 1)
    {
      v3 = 0;
      v4 = *a1;
      do
      {
        v5 = *(void **)(v4 + 8 * v3);
        if (v5)
        {
          v6 = *(_DWORD *)v5;
          switch(*(_DWORD *)v5)
          {
            case 1:
              if (*((_DWORD *)v5 + 40) == 45)
                v17 = "complex type definition";
              else
                v17 = "simple type definition";
              goto LABEL_30;
            case 2:
            case 0x15:
              xmlSchemaFreeWildcard(*(xmlSchemaWildcardPtr *)(v4 + 8 * v3));
              break;
            case 3:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x13:
            case 0x14:
              goto LABEL_24;
            case 4:
            case 5:
              xmlSchemaFreeType(*(xmlSchemaTypePtr *)(v4 + 8 * v3));
              break;
            case 6:
            case 7:
            case 8:
              v7 = (_QWORD **)*((_QWORD *)v5 + 1);
              if (v7)
              {
                v8 = *v7;
                xmlFree(v7);
                if (v8)
                {
                  do
                  {
                    v9 = (_QWORD *)*v8;
                    xmlFree(v8);
                    v8 = v9;
                  }
                  while (v9);
                }
              }
              goto LABEL_63;
            case 0xE:
              v18 = (_QWORD **)*((_QWORD *)v5 + 6);
              if (v18)
              {
                v19 = *v18;
                xmlFree(v18);
                if (v19)
                {
                  do
                  {
                    v20 = (_QWORD *)*v19;
                    xmlFree(v19);
                    v19 = v20;
                  }
                  while (v20);
                }
              }
              v21 = (xmlRegexp *)*((_QWORD *)v5 + 20);
              if (v21)
                xmlRegFreeRegexp(v21);
              v22 = (xmlSchemaVal *)*((_QWORD *)v5 + 23);
              if (!v22)
                goto LABEL_63;
              goto LABEL_62;
            case 0xF:
              v23 = (_QWORD **)*((_QWORD *)v5 + 8);
              if (v23)
              {
                v24 = *v23;
                xmlFree(v23);
                if (v24)
                {
                  do
                  {
                    v25 = (_QWORD *)*v24;
                    xmlFree(v24);
                    v24 = v25;
                  }
                  while (v25);
                }
              }
              v22 = (xmlSchemaVal *)*((_QWORD *)v5 + 17);
              if (!v22)
                goto LABEL_63;
              goto LABEL_62;
            case 0x10:
              v26 = (_QWORD **)*((_QWORD *)v5 + 6);
              if (v26)
              {
                v27 = *v26;
                xmlFree(v26);
                if (v27)
                {
                  do
                  {
                    v28 = (_QWORD *)*v27;
                    xmlFree(v27);
                    v27 = v28;
                  }
                  while (v28);
                }
              }
              v29 = (void **)*((_QWORD *)v5 + 14);
              if (v29)
              {
                if (*v29)
                  xmlFree(*v29);
                xmlFree(v29);
              }
              goto LABEL_63;
            case 0x11:
              v30 = (_QWORD **)*((_QWORD *)v5 + 1);
              if (v30)
              {
                v31 = *v30;
                xmlFree(v30);
                if (v31)
                {
                  do
                  {
                    v32 = (_QWORD *)*v31;
                    xmlFree(v31);
                    v31 = v32;
                  }
                  while (v32);
                }
              }
              goto LABEL_63;
            case 0x12:
              goto LABEL_63;
            case 0x16:
            case 0x17:
            case 0x18:
              v10 = (_QWORD **)*((_QWORD *)v5 + 1);
              if (v10)
              {
                v11 = *v10;
                xmlFree(v10);
                if (v11)
                {
                  do
                  {
                    v12 = (_QWORD *)*v11;
                    xmlFree(v11);
                    v11 = v12;
                  }
                  while (v12);
                }
              }
              v13 = (xmlPatternPtr *)*((_QWORD *)v5 + 6);
              if (v13)
              {
                if (v13[4])
                {
                  xmlFreePattern(v13[4]);
                  v13 = (xmlPatternPtr *)*((_QWORD *)v5 + 6);
                }
                xmlFree(v13);
              }
              v14 = (_QWORD *)*((_QWORD *)v5 + 7);
              if (v14)
              {
                do
                {
                  v15 = (_QWORD *)*v14;
                  v16 = (xmlPattern *)v14[4];
                  if (v16)
                    xmlFreePattern(v16);
                  xmlFree(v14);
                  v14 = v15;
                }
                while (v15);
              }
              goto LABEL_63;
            case 0x19:
              v33 = (_QWORD **)*((_QWORD *)v5 + 1);
              if (v33)
              {
                v34 = *v33;
                xmlFree(v33);
                if (v34)
                {
                  do
                  {
                    v35 = (_QWORD *)*v34;
                    xmlFree(v34);
                    v34 = v35;
                  }
                  while (v35);
                }
              }
              goto LABEL_63;
            case 0x1A:
              v36 = (_QWORD **)*((_QWORD *)v5 + 1);
              if (v36)
              {
                v37 = *v36;
                xmlFree(v36);
                if (v37)
                {
                  do
                  {
                    v38 = (_QWORD *)*v37;
                    xmlFree(v37);
                    v37 = v38;
                  }
                  while (v38);
                }
              }
              v22 = (xmlSchemaVal *)*((_QWORD *)v5 + 8);
              if (v22)
LABEL_62:
                xmlSchemaFreeValue(v22);
              goto LABEL_63;
            default:
              if (v6 == 2000 || v6 == 2001)
              {
LABEL_63:
                xmlFree(v5);
              }
              else
              {
LABEL_24:
                v17 = xmlSchemaItemTypeToStr(v6);
LABEL_30:
                __xmlSimpleError(0x10u, 3069, 0, "Internal error: xmlSchemaComponentListFree, unexpected component type '%s'\n", (const xmlChar *)v17);
              }
              break;
          }
        }
        ++v3;
      }
      while (v3 < *((int *)a1 + 2));
    }
    *((_DWORD *)a1 + 2) = 0;
  }
}

const char *xmlSchemaItemTypeToStr(int a1)
{
  int v1;
  const char *result;

  v1 = a1 - 1;
  result = "simple type definition";
  switch(v1)
  {
    case 0:
    case 3:
      return result;
    case 1:
      result = "wildcard (any)";
      break;
    case 2:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 18:
    case 19:
    case 20:
      goto LABEL_5;
    case 4:
      result = "complex type definition";
      break;
    case 5:
      result = "model group (sequence)";
      break;
    case 6:
      result = "model group (choice)";
      break;
    case 7:
      result = "model group (all)";
      break;
    case 13:
      result = "element declaration";
      break;
    case 14:
      result = "attribute declaration";
      break;
    case 15:
      result = "attribute group definition";
      break;
    case 16:
      result = "model group definition";
      break;
    case 17:
      result = "notation declaration";
      break;
    case 21:
      result = "unique identity-constraint";
      break;
    case 22:
      result = "key identity-constraint";
      break;
    case 23:
      result = "keyref identity-constraint";
      break;
    case 24:
      result = "particle";
      break;
    case 25:
      result = "attribute use";
      break;
    default:
      if ("simple type definition" == 2000)
      {
        result = "[helper component] QName reference";
      }
      else if ("simple type definition" == 2001)
      {
        result = "[helper component] attribute use prohibition";
      }
      else
      {
LABEL_5:
        result = "Not a schema component";
      }
      break;
  }
  return result;
}

void xmlSchemaTypeDump(uint64_t a1, FILE *__stream)
{
  const char *v4;
  size_t v5;
  const char *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xmlChar **v11;
  const xmlChar **v12;
  uint64_t v13;
  xmlChar *v14;
  uint64_t v15;
  size_t v16;
  void *v17;

  if (a1)
  {
    fwrite("Type: ", 6uLL, 1uLL, __stream);
    if (*(_QWORD *)(a1 + 16))
      fprintf(__stream, "'%s' ", *(const char **)(a1 + 16));
    else
      fwrite("(no name) ", 0xAuLL, 1uLL, __stream);
    if (*(_QWORD *)(a1 + 208))
      fprintf(__stream, "ns '%s' ", *(const char **)(a1 + 208));
    switch(*(_DWORD *)a1)
    {
      case 1:
        v4 = "[basic] ";
        v5 = 8;
        goto LABEL_20;
      case 4:
        v4 = "[simple] ";
        goto LABEL_15;
      case 5:
        v4 = "[complex] ";
        v5 = 10;
        goto LABEL_20;
      case 6:
        v4 = "[sequence] ";
        v5 = 11;
        goto LABEL_20;
      case 7:
        v4 = "[choice] ";
LABEL_15:
        v5 = 9;
        goto LABEL_20;
      case 8:
        v4 = "[all] ";
        v5 = 6;
        goto LABEL_20;
      case 0xB:
        v4 = "[ur] ";
        v5 = 5;
        goto LABEL_20;
      case 0xC:
        v4 = "[restriction] ";
        v5 = 14;
        goto LABEL_20;
      case 0xD:
        v4 = "[extension] ";
        v5 = 12;
LABEL_20:
        fwrite(v4, v5, 1uLL, __stream);
        break;
      default:
        fprintf(__stream, "[unknown type %d] ", *(_DWORD *)a1);
        break;
    }
    fwrite("content: ", 9uLL, 1uLL, __stream);
    switch(*(_DWORD *)(a1 + 92))
    {
      case 0:
        v6 = "[unknown] ";
        goto LABEL_25;
      case 1:
        v6 = "[empty] ";
        goto LABEL_29;
      case 2:
        v6 = "[element] ";
LABEL_25:
        v7 = 10;
        goto LABEL_31;
      case 3:
        v6 = "[mixed] ";
        goto LABEL_29;
      case 4:
        v6 = "[simple] ";
        v7 = 9;
        goto LABEL_31;
      case 6:
        v6 = "[basic] ";
LABEL_29:
        v7 = 8;
        goto LABEL_31;
      case 7:
        v6 = "[any] ";
        v7 = 6;
LABEL_31:
        fwrite(v6, v7, 1uLL, __stream);
        break;
      default:
        break;
    }
    fputc(10, __stream);
    if (*(_QWORD *)(a1 + 96))
    {
      fprintf(__stream, "  base type: '%s'", *(const char **)(a1 + 96));
      if (*(_QWORD *)(a1 + 104))
        fprintf(__stream, " ns '%s'\n", *(const char **)(a1 + 104));
      else
        fputc(10, __stream);
    }
    v8 = *(_QWORD *)(a1 + 216);
    if (v8)
    {
      v17 = 0;
      if (*(_DWORD *)(v8 + 8))
      {
        fwrite("  attributes:\n", 0xEuLL, 1uLL, __stream);
        if (*(int *)(v8 + 8) >= 1)
        {
          v9 = 0;
          do
          {
            v10 = *(_QWORD *)(*(_QWORD *)v8 + 8 * v9);
            if (*(_DWORD *)v10 == 2000)
            {
              fwrite("  [reference] ", 0xEuLL, 1uLL, __stream);
              v11 = (xmlChar **)(v10 + 24);
              v12 = (const xmlChar **)(v10 + 32);
            }
            else if (*(_DWORD *)v10 == 2001)
            {
              fwrite("  [prohibition] ", 0x10uLL, 1uLL, __stream);
              v11 = (xmlChar **)(v10 + 16);
              v12 = (const xmlChar **)(v10 + 24);
            }
            else
            {
              fwrite("  [use] ", 8uLL, 1uLL, __stream);
              v13 = *(_QWORD *)(v10 + 24);
              v11 = (xmlChar **)(v13 + 16);
              v12 = (const xmlChar **)(v13 + 112);
            }
            v14 = xmlSchemaFormatQName(&v17, *v12, *v11);
            fprintf(__stream, "'%s'\n", (const char *)v14);
            if (v17)
            {
              xmlFree(v17);
              v17 = 0;
            }
            ++v9;
          }
          while (v9 < *(int *)(v8 + 8));
        }
      }
    }
    v15 = *(_QWORD *)(a1 + 48);
    if (v15)
      xmlSchemaAnnotDump(__stream, v15);
    if (*(_DWORD *)a1 == 5)
    {
      v16 = *(_QWORD *)(a1 + 56);
      if (v16)
        xmlSchemaContentModelDump(v16, __stream, 1);
    }
  }
  else
  {
    fwrite("Type: NULL\n", 0xBuLL, 1uLL, __stream);
  }
}

size_t xmlSchemaContentModelDump(size_t result, FILE *a2, uint64_t a3)
{
  uint64_t v3;
  FILE *v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  const char *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  xmlChar *v15;
  void *v16;
  _OWORD __b[6];
  int v18;
  uint64_t v19;

  while (1)
  {
    v3 = a3;
    v4 = a2;
    v5 = result;
    v19 = *MEMORY[0x1E0C80C00];
    v16 = 0;
    v18 = 0;
    memset(__b, 0, sizeof(__b));
    v6 = a3 - 1;
    if ((int)a3 < 1)
    {
      v7 = 0;
    }
    else
    {
      if (v6 >= 0x18)
        v6 = 24;
      v7 = 2 * v6 + 2;
      memset(__b, 32, v7);
    }
    *((_BYTE *)__b + (v7 | 1)) = 0;
    *((_BYTE *)__b + v7) = 0;
    fputs((const char *)__b, v4);
    v8 = *(_QWORD *)(v5 + 24);
    if (!v8)
      break;
    switch(*(_DWORD *)v8)
    {
      case 6:
        v9 = "SEQUENCE";
        v10 = 8;
        goto LABEL_17;
      case 7:
        v9 = "CHOICE";
        v10 = 6;
        goto LABEL_17;
      case 8:
        v9 = "ALL";
        goto LABEL_16;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
        goto LABEL_12;
      case 0xE:
        v15 = xmlSchemaFormatQName(&v16, *(const xmlChar **)(v8 + 96), *(xmlChar **)(v8 + 16));
        fprintf(v4, "ELEM '%s'", (const char *)v15);
        if (v16)
          xmlFree(v16);
        goto LABEL_18;
      default:
        if (*(_DWORD *)v8 != 2)
        {
LABEL_12:
          v11 = "UNKNOWN\n";
          v12 = 8;
          return fwrite(v11, v12, 1uLL, v4);
        }
        v9 = "ANY";
LABEL_16:
        v10 = 3;
LABEL_17:
        fwrite(v9, v10, 1uLL, v4);
LABEL_18:
        if (*(_DWORD *)(v5 + 32) != 1)
          fprintf(v4, " min: %d", *(_DWORD *)(v5 + 32));
        v13 = *(_DWORD *)(v5 + 36);
        if (v13 < 0x40000000)
        {
          if (v13 != 1)
            fprintf(v4, " max: %d", *(_DWORD *)(v5 + 36));
        }
        else
        {
          fwrite(" max: unbounded", 0xFuLL, 1uLL, v4);
        }
        fputc(10, v4);
        if ((*(_DWORD *)v8 - 6) <= 2)
        {
          v14 = *(_QWORD *)(v8 + 24);
          if (v14)
            xmlSchemaContentModelDump(v14, v4, (v3 + 1));
        }
        result = *(_QWORD *)(v5 + 16);
        if (!result)
          return result;
        a2 = v4;
        a3 = v3;
        break;
    }
  }
  v11 = "MISSING particle term\n";
  v12 = 22;
  return fwrite(v11, v12, 1uLL, v4);
}

void xmlSchemaSubstGroupFree(_QWORD *a1)
{
  void **v2;

  if (a1)
  {
    v2 = (void **)a1[1];
    if (v2)
    {
      if (*v2)
        xmlFree(*v2);
      xmlFree(v2);
    }
    xmlFree(a1);
  }
}

void xmlSchemaInternalErr2(_DWORD *a1, const xmlChar *a2, const xmlChar *a3, xmlChar *a4)
{
  xmlChar *v8;
  xmlChar *v9;
  xmlChar *v10;
  int v11;

  if (a1)
  {
    v8 = xmlStrdup((const xmlChar *)"Internal error: %s, ");
    v9 = xmlStrcat(v8, a3);
    v10 = xmlStrcat(v9, (const xmlChar *)".\n");
    if (*a1 == 2)
    {
      v11 = 1818;
    }
    else
    {
      if (*a1 != 1)
        goto LABEL_7;
      v11 = 3069;
    }
    xmlSchemaErr4Line(a1, 2, v11, 0, 0, (const char *)v10, a2, a4, 0, 0);
LABEL_7:
    if (v10)
      xmlFree(v10);
  }
}

_DWORD *xmlSchemaErr4Line(_DWORD *result, int a2, int a3, uint64_t a4, int a5, const char *a6, const xmlChar *a7, xmlChar *cur, xmlChar *a9, uint64_t a10)
{
  uint64_t v12;
  int v13;
  _DWORD *v15;
  int v16;
  void (**v17)(void *, const char *, ...);
  void (**v18)(void *, const char *, ...);
  xmlGenericErrorFunc v19;
  void **v20;
  int v21;
  void (*v22)(void *, const char *, ...);
  void (__cdecl *v23)(void *, xmlErrorPtr);
  void *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(_QWORD, uint64_t *, uint64_t *);
  const char *v35;
  void (__cdecl *v36)(void *, xmlErrorPtr);
  void *v37;
  int v38[2];
  int v39;
  uint64_t v40;
  uint64_t v41;

  if (result)
  {
    v12 = a4;
    v13 = a3;
    v15 = result;
    if (*result != 1)
    {
      if (*result != 2)
      {
        v19 = *__xmlGenericError();
        v20 = __xmlGenericErrorContext();
        return (_DWORD *)((uint64_t (*)(void *, const char *, ...))v19)(*v20, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 2199);
      }
      v16 = a5;
      if (a2 == 1)
      {
        v17 = (void (**)(void *, const char *, ...))(result + 6);
      }
      else
      {
        v21 = result[27] + 1;
        result[26] = a3;
        result[27] = v21;
        v17 = (void (**)(void *, const char *, ...))(result + 4);
      }
      v22 = *v17;
      v23 = (void (__cdecl *)(void *, xmlErrorPtr))*((_QWORD *)result + 4);
      v24 = (void *)*((_QWORD *)v15 + 1);
      if (a5)
      {
        v25 = *((_QWORD *)v15 + 6);
        if (v25)
        {
          v12 = 0;
          v26 = 0;
          v27 = *(_QWORD *)(v25 + 136);
          goto LABEL_29;
        }
        v29 = *((_QWORD *)v15 + 10);
        if (v29)
        {
          v30 = *(_QWORD *)(v29 + 56);
          if (v30)
          {
            v12 = 0;
            v26 = 0;
            v27 = *(_QWORD *)(v30 + 8);
            goto LABEL_29;
          }
        }
      }
      else
      {
        if (a4
          || (v15[43] & 0x80000000) == 0 && (v31 = *((_QWORD *)v15 + 24)) != 0 && (v12 = *(_QWORD *)(v31 + 8)) != 0)
        {
          v16 = 0;
LABEL_28:
          v27 = 0;
          v26 = 0;
LABEL_29:
          v34 = (void (*)(_QWORD, uint64_t *, uint64_t *))*((_QWORD *)v15 + 42);
          if (v34)
          {
            if (v27 && v16)
              return __xmlRaiseError(v23, v22, v24, v15, v12, 0x11u, v13, a2, v27, v16, a7, cur, a9, 0, v26, a6, (char)a7);
            v40 = 0;
            v41 = 0;
            v36 = v23;
            v37 = v24;
            *(_QWORD *)v38 = v22;
            v35 = a6;
            v39 = v13;
            v34(*((_QWORD *)v15 + 43), &v40, &v41);
            v23 = v36;
            v24 = v37;
            v22 = *(void (**)(void *, const char *, ...))v38;
            v13 = v39;
            a6 = v35;
            if (!v27)
              v27 = v40;
            if (!v16)
              v16 = v41;
          }
          if (!v27)
            v27 = *((_QWORD *)v15 + 12);
          return __xmlRaiseError(v23, v22, v24, v15, v12, 0x11u, v13, a2, v27, v16, a7, cur, a9, 0, v26, a6, (char)a7);
        }
        v32 = *((_QWORD *)v15 + 10);
        if (v32)
        {
          v33 = *(_QWORD *)(v32 + 56);
          if (v33)
          {
            v12 = 0;
            v27 = *(_QWORD *)(v33 + 8);
            v16 = *(_DWORD *)(v33 + 52);
            v26 = *(_DWORD *)(v33 + 56);
            goto LABEL_29;
          }
        }
        v16 = 0;
      }
      v12 = 0;
      goto LABEL_28;
    }
    if (a2 == 1)
    {
      v18 = (void (**)(void *, const char *, ...))(result + 6);
    }
    else
    {
      v28 = result[9] + 1;
      result[8] = a3;
      result[9] = v28;
      v18 = (void (**)(void *, const char *, ...))(result + 4);
    }
    return __xmlRaiseError(*((xmlStructuredErrorFunc *)result + 5), *v18, *((void **)result + 1), result, a4, 0x10u, a3, a2, 0, 0, a7, cur, a9, 0, 0, a6, (char)a7);
  }
  return result;
}

uint64_t xmlSchemaGetComponentNode(_DWORD *a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = 0;
  switch(*a1)
  {
    case 2:
    case 0x15:
    case 0x16:
    case 0x17:
    case 0x18:
      v2 = a1 + 6;
      return *(_QWORD *)v2;
    case 3:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0x12:
    case 0x13:
    case 0x14:
      return v1;
    case 4:
    case 5:
    case 0xE:
      v2 = a1 + 18;
      return *(_QWORD *)v2;
    case 6:
    case 7:
    case 8:
      v2 = a1 + 8;
      return *(_QWORD *)v2;
    case 0xF:
      v2 = a1 + 26;
      return *(_QWORD *)v2;
    case 0x10:
      v2 = a1 + 16;
      return *(_QWORD *)v2;
    case 0x11:
      v2 = a1 + 12;
      return *(_QWORD *)v2;
    case 0x19:
    case 0x1A:
      goto LABEL_6;
    default:
      if (*a1 == 2000)
      {
LABEL_6:
        v2 = a1 + 10;
        return *(_QWORD *)v2;
      }
      return v1;
  }
}

_BYTE *xmlSchemaFormatItemForReport(xmlChar **a1, uint64_t a2, uint64_t a3)
{
  xmlChar *v6;
  int v7;
  const char *v8;
  const char *v9;
  xmlChar *v10;
  xmlChar *v11;
  const xmlChar *v12;
  const xmlChar *v13;
  xmlChar *v14;
  xmlChar *v15;
  const char *v16;
  unsigned int v17;
  const char *v18;
  int v19;
  const char *v20;
  const char *v21;
  const xmlChar *v22;
  char *v23;
  xmlChar *v24;
  int v25;
  const char *v26;
  const char *v27;
  const char *v28;
  char *v29;
  xmlChar *v30;
  xmlChar *v31;
  xmlChar *v32;
  xmlChar *v33;
  xmlChar *v34;
  xmlChar *v35;
  xmlChar *v36;
  xmlChar *ComponentQName;
  xmlChar *v38;
  const char *v39;
  xmlChar *v40;
  xmlChar *v41;
  xmlChar *v42;
  xmlChar *v43;
  uint64_t v44;
  xmlChar *v45;
  xmlChar *v46;
  uint64_t v47;
  xmlChar *v48;
  xmlChar *v49;
  xmlChar *v50;
  xmlChar *v51;
  uint64_t v52;
  xmlChar *v53;
  xmlChar *v54;
  void *v56;

  v56 = 0;
  v6 = *a1;
  if (v6)
  {
    xmlFree(v6);
    *a1 = 0;
  }
  if (a2)
  {
    v7 = *(_DWORD *)a2;
    v8 = "unique '";
    switch(*(_DWORD *)a2)
    {
      case 1:
        v19 = *(_DWORD *)(a2 + 88);
        v20 = "list type 'xs:";
        v21 = "union type 'xs:";
        if ((v19 & 0x80) == 0)
          v21 = "simple type 'xs:";
        if ((v19 & 0x40) == 0)
          v20 = v21;
        if ((v19 & 0x100) != 0)
          v22 = (const xmlChar *)"atomic type 'xs:";
        else
          v22 = (const xmlChar *)v20;
        v14 = xmlStrdup(v22);
        goto LABEL_41;
      case 2:
      case 0x15:
        v17 = *(_DWORD *)(a2 + 40) - 1;
        if (v17 > 2)
          v18 = "invalid process contents";
        else
          v18 = off_1E61742D0[v17];
        v15 = xmlStrdup((const xmlChar *)v18);
        *a1 = v15;
        v16 = " wildcard";
        goto LABEL_11;
      case 3:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0x13:
      case 0x14:
        break;
      case 4:
        if ((*(_DWORD *)(a2 + 88) & 8) != 0)
          v23 = &byte_1B0865C1A;
        else
          v23 = "local ";
        v24 = xmlStrdup((const xmlChar *)v23);
        *a1 = v24;
        v25 = *(_DWORD *)(a2 + 88);
        v26 = "list type";
        v27 = "union type";
        if ((v25 & 0x80) == 0)
          v27 = "simple type";
        if ((v25 & 0x40) == 0)
          v26 = v27;
        if ((v25 & 0x100) != 0)
          v28 = "atomic type";
        else
          v28 = v26;
        goto LABEL_39;
      case 5:
        if ((*(_DWORD *)(a2 + 88) & 8) != 0)
          v29 = &byte_1B0865C1A;
        else
          v29 = "local ";
        v24 = xmlStrdup((const xmlChar *)v29);
        *a1 = v24;
        v28 = "complex type";
LABEL_39:
        v30 = xmlStrcat(v24, (const xmlChar *)v28);
        *a1 = v30;
        if ((*(_BYTE *)(a2 + 88) & 8) == 0)
          goto LABEL_13;
        v14 = xmlStrcat(v30, (const xmlChar *)" '");
LABEL_41:
        *a1 = v14;
        v13 = *(const xmlChar **)(a2 + 16);
        goto LABEL_9;
      case 6:
      case 7:
      case 8:
      case 0x19:
        v9 = xmlSchemaItemTypeToStr(v7);
        v10 = xmlStrdup((const xmlChar *)v9);
        goto LABEL_12;
      case 0xE:
        v31 = xmlStrdup((const xmlChar *)"element decl.");
        *a1 = v31;
        v11 = xmlStrcat(v31, (const xmlChar *)" '");
        *a1 = v11;
        v12 = xmlSchemaFormatQName(&v56, *(const xmlChar **)(a2 + 96), *(xmlChar **)(a2 + 16));
        goto LABEL_8;
      case 0xF:
        v32 = xmlStrdup((const xmlChar *)"attribute decl.");
        *a1 = v32;
        v33 = xmlStrcat(v32, (const xmlChar *)" '");
        *a1 = v33;
        v34 = xmlSchemaFormatQName(&v56, *(const xmlChar **)(a2 + 112), *(xmlChar **)(a2 + 16));
        goto LABEL_71;
      case 0x10:
        xmlSchemaGetComponentDesignation(a1, (int *)a2);
        goto LABEL_13;
      case 0x11:
        v35 = xmlStrdup((const xmlChar *)"model group def.");
        *a1 = v35;
        v36 = xmlStrcat(v35, (const xmlChar *)" '");
        *a1 = v36;
        ComponentQName = xmlSchemaGetComponentQName(&v56, (int *)a2);
        v38 = xmlStrcat(v36, ComponentQName);
        *a1 = v38;
        *a1 = xmlStrcat(v38, (const xmlChar *)"'");
        if (v56)
        {
          xmlFree(v56);
          v56 = 0;
        }
        goto LABEL_13;
      case 0x12:
        v39 = xmlSchemaItemTypeToStr(18);
        v40 = xmlStrdup((const xmlChar *)v39);
        *a1 = v40;
        v41 = xmlStrcat(v40, (const xmlChar *)" '");
        *a1 = v41;
        v42 = xmlSchemaGetComponentQName(&v56, (int *)a2);
        v43 = xmlStrcat(v41, v42);
        *a1 = v43;
        *a1 = xmlStrcat(v43, (const xmlChar *)"'");
        if (v56)
        {
          xmlFree(v56);
          v56 = 0;
        }
        break;
      case 0x16:
        goto LABEL_68;
      case 0x17:
        v8 = "key '";
        goto LABEL_68;
      case 0x18:
        v8 = "keyRef '";
LABEL_68:
        v14 = xmlStrdup((const xmlChar *)v8);
        *a1 = v14;
        v13 = *(const xmlChar **)(a2 + 32);
        goto LABEL_9;
      case 0x1A:
        v15 = xmlStrdup((const xmlChar *)"attribute use ");
        *a1 = v15;
        if (*(_QWORD *)(a2 + 24))
        {
          v33 = xmlStrcat(v15, (const xmlChar *)"'");
          *a1 = v33;
          v34 = xmlSchemaGetComponentQName(&v56, *(int **)(a2 + 24));
LABEL_71:
          v15 = xmlStrcat(v33, v34);
          *a1 = v15;
          if (v56)
          {
            xmlFree(v56);
            v56 = 0;
            v15 = *a1;
          }
LABEL_10:
          v16 = "'";
        }
        else
        {
          v16 = "(unknown)";
        }
LABEL_11:
        v10 = xmlStrcat(v15, (const xmlChar *)v16);
LABEL_12:
        *a1 = v10;
LABEL_13:
        if (!a3)
          goto LABEL_63;
        goto LABEL_57;
      default:
        if ((v7 - 1000) >= 0xC)
          break;
        v11 = xmlStrdup((const xmlChar *)"facet '");
        *a1 = v11;
        v12 = (const xmlChar *)xmlSchemaFacetTypeToString(*(_DWORD *)a2);
LABEL_8:
        v13 = v12;
        v14 = v11;
LABEL_9:
        v15 = xmlStrcat(v14, v13);
        *a1 = v15;
        goto LABEL_10;
    }
  }
  if (a3)
  {
    v44 = a3;
    if (*(_DWORD *)(a3 + 8) == 2)
      v44 = *(_QWORD *)(a3 + 40);
    v45 = xmlStrdup((const xmlChar *)"Element '");
    v46 = v45;
    *a1 = v45;
    v47 = *(_QWORD *)(v44 + 72);
    if (v47)
    {
      v48 = xmlSchemaFormatQName(&v56, *(const xmlChar **)(v47 + 16), *(xmlChar **)(v44 + 16));
      v49 = xmlStrcat(v46, v48);
      *a1 = v49;
      if (v56)
      {
        xmlFree(v56);
        v56 = 0;
        v49 = *a1;
      }
    }
    else
    {
      v49 = xmlStrcat(v45, *(const xmlChar **)(v44 + 16));
      *a1 = v49;
    }
    *a1 = xmlStrcat(v49, (const xmlChar *)"'");
LABEL_57:
    if (*(_DWORD *)(a3 + 8) == 2)
    {
      v50 = xmlStrcat(*a1, (const xmlChar *)", attribute '");
      v51 = v50;
      *a1 = v50;
      v52 = *(_QWORD *)(a3 + 72);
      if (v52)
      {
        v53 = xmlSchemaFormatQName(&v56, *(const xmlChar **)(v52 + 16), *(xmlChar **)(a3 + 16));
        v54 = xmlStrcat(v51, v53);
        *a1 = v54;
        if (v56)
        {
          xmlFree(v56);
          v56 = 0;
          v54 = *a1;
        }
      }
      else
      {
        v54 = xmlStrcat(v50, *(const xmlChar **)(a3 + 16));
        *a1 = v54;
      }
      *a1 = xmlStrcat(v54, (const xmlChar *)"'");
    }
  }
LABEL_63:
  if (v56)
    xmlFree(v56);
  return xmlEscapeFormatString((void **)a1);
}

xmlChar *xmlSchemaFormatNodeForError(void **a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  xmlChar *v7;
  uint64_t v8;
  xmlChar *v9;
  xmlChar *v10;
  xmlChar *v11;
  uint64_t v13;
  xmlChar *v14;
  xmlChar *v15;
  xmlChar *v16;
  xmlChar *v17;
  xmlChar *v18;
  xmlChar *result;
  xmlChar *v20;
  xmlChar *v21;
  xmlGenericErrorFunc v22;
  void **v23;
  xmlChar *v24;
  xmlChar *v25;
  xmlChar *v26;
  const xmlChar *v27;
  xmlChar *v28;
  xmlChar *v29;
  uint64_t v30;
  xmlChar *v31;
  xmlChar *v32;
  const xmlChar *v33;
  xmlChar *v34;

  v34 = 0;
  *a1 = 0;
  if (a3)
  {
    v5 = *(_DWORD *)(a3 + 8);
    if ((v5 - 1) >= 2)
    {
      result = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
      *a1 = result;
      return result;
    }
    if (v5 == 2)
    {
      v6 = *(_QWORD *)(a3 + 40);
      v7 = xmlStrdup((const xmlChar *)"Element '");
      *a1 = v7;
      v8 = *(_QWORD *)(v6 + 72);
      if (v8)
      {
        v9 = xmlSchemaFormatQName((void **)&v34, *(const xmlChar **)(v8 + 16), *(xmlChar **)(v6 + 16));
        v10 = xmlStrcat(v7, v9);
        v11 = v34;
      }
      else
      {
        v27 = *(const xmlChar **)(v6 + 16);
        if (v27)
        {
          v11 = 0;
        }
        else
        {
          v11 = xmlStrcat(0, (const xmlChar *)"(NULL)");
          v34 = v11;
          v27 = v11;
        }
        v10 = xmlStrcat(v7, v27);
      }
      *a1 = v10;
      if (v11)
      {
        xmlFree(v11);
        v34 = 0;
        v10 = (xmlChar *)*a1;
      }
      v28 = xmlStrcat(v10, (const xmlChar *)"', ");
      *a1 = v28;
      v20 = xmlStrcat(v28, (const xmlChar *)"attribute '");
    }
    else
    {
      v20 = xmlStrdup((const xmlChar *)"Element '");
    }
    v29 = v20;
    *a1 = v20;
    v30 = *(_QWORD *)(a3 + 72);
    if (v30)
    {
      v31 = xmlSchemaFormatQName((void **)&v34, *(const xmlChar **)(v30 + 16), *(xmlChar **)(a3 + 16));
      v26 = xmlStrcat(v29, v31);
      v32 = v34;
    }
    else
    {
      v33 = *(const xmlChar **)(a3 + 16);
      if (v33)
      {
        v32 = 0;
      }
      else
      {
        v32 = xmlStrcat(0, (const xmlChar *)"(NULL)");
        v33 = v32;
      }
      v26 = xmlStrcat(v29, v33);
    }
    *a1 = v26;
    if (!v32)
      goto LABEL_36;
    xmlFree(v32);
    goto LABEL_35;
  }
  if (*(_DWORD *)a2 == 1)
  {
    v21 = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
LABEL_37:
    *a1 = v21;
    return xmlEscapeFormatString(a1);
  }
  if (*(_DWORD *)a2 == 2)
  {
    if (**(_DWORD **)(a2 + 192) == 2)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(a2 + 176) + 8 * *(int *)(a2 + 172));
      v14 = xmlStrdup((const xmlChar *)"Element '");
      *a1 = v14;
      v15 = xmlSchemaFormatQName((void **)&v34, *(const xmlChar **)(v13 + 32), *(xmlChar **)(v13 + 24));
      v16 = xmlStrcat(v14, v15);
      *a1 = v16;
      if (v34)
      {
        xmlFree(v34);
        v34 = 0;
        v16 = (xmlChar *)*a1;
      }
      v17 = xmlStrcat(v16, (const xmlChar *)"', ");
      *a1 = v17;
      v18 = xmlStrcat(v17, (const xmlChar *)"attribute '");
    }
    else
    {
      v18 = xmlStrdup((const xmlChar *)"Element '");
    }
    v24 = v18;
    *a1 = v18;
    v25 = xmlSchemaFormatQName((void **)&v34, *(const xmlChar **)(*(_QWORD *)(a2 + 192) + 32), *(xmlChar **)(*(_QWORD *)(a2 + 192) + 24));
    v26 = xmlStrcat(v24, v25);
    *a1 = v26;
    if (!v34)
      goto LABEL_36;
    xmlFree(v34);
LABEL_35:
    v26 = (xmlChar *)*a1;
LABEL_36:
    v21 = xmlStrcat(v26, (const xmlChar *)"': ");
    goto LABEL_37;
  }
  v22 = *__xmlGenericError();
  v23 = __xmlGenericErrorContext();
  return (xmlChar *)((uint64_t (*)(void *, const char *, ...))v22)(*v23, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 2320);
}

xmlChar *xmlSchemaGetComponentQName(void **a1, int *a2)
{
  int *v2;
  const char *v3;
  int *v4;
  int v5;
  const xmlChar *v6;
  int v7;
  xmlChar *v8;
  xmlChar **v9;

  v2 = a2;
  v3 = "http://www.w3.org/2001/XMLSchema";
  v4 = a2;
  while (1)
  {
    if (!v4)
    {
      v3 = 0;
LABEL_10:
      v6 = (const xmlChar *)v3;
      goto LABEL_16;
    }
    v5 = *v4;
    if (*v4 != 26)
      break;
    v4 = (int *)*((_QWORD *)v4 + 3);
    if (!v4)
    {
      v6 = 0;
      goto LABEL_16;
    }
  }
  v6 = 0;
  switch(v5)
  {
    case 1:
      goto LABEL_10;
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 19:
    case 20:
    case 21:
      goto LABEL_16;
    case 4:
    case 5:
      v6 = (const xmlChar *)*((_QWORD *)v4 + 26);
      goto LABEL_16;
    case 14:
      v6 = (const xmlChar *)*((_QWORD *)v4 + 12);
      goto LABEL_16;
    case 15:
      v6 = (const xmlChar *)*((_QWORD *)v4 + 14);
      goto LABEL_16;
    case 16:
      v6 = (const xmlChar *)*((_QWORD *)v4 + 13);
      goto LABEL_16;
    case 17:
    case 22:
    case 23:
    case 24:
      v6 = (const xmlChar *)*((_QWORD *)v4 + 5);
      goto LABEL_16;
    case 18:
      goto LABEL_12;
    default:
      if (v5 == 2000)
LABEL_12:
        v6 = (const xmlChar *)*((_QWORD *)v4 + 4);
      break;
  }
  while (1)
  {
LABEL_16:
    if (!v2)
    {
LABEL_19:
      v8 = 0;
      return xmlSchemaFormatQName(a1, v6, v8);
    }
    v7 = *v2;
    if (*v2 != 26)
      break;
    v2 = (int *)*((_QWORD *)v2 + 3);
    if (!v2)
      goto LABEL_19;
  }
  v8 = 0;
  switch(v7)
  {
    case 1:
    case 4:
    case 5:
    case 14:
    case 15:
    case 16:
      v9 = (xmlChar **)(v2 + 4);
      goto LABEL_24;
    case 2:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 19:
    case 20:
    case 21:
      return xmlSchemaFormatQName(a1, v6, v8);
    case 17:
    case 22:
    case 23:
    case 24:
      v9 = (xmlChar **)(v2 + 8);
      goto LABEL_24;
    case 18:
      v9 = (xmlChar **)(v2 + 2);
      goto LABEL_24;
    default:
      if (v7 != 2000)
        return xmlSchemaFormatQName(a1, v6, v8);
      v9 = (xmlChar **)(v2 + 6);
LABEL_24:
      v8 = *v9;
      break;
  }
  return xmlSchemaFormatQName(a1, v6, v8);
}

xmlChar *xmlSchemaGetComponentDesignation(xmlChar **a1, int *a2)
{
  xmlChar *v4;
  const char *v5;
  xmlChar *v6;
  xmlChar *v7;
  xmlChar *ComponentQName;
  xmlChar *v9;
  xmlChar *result;
  void *v11;

  v11 = 0;
  v4 = *a1;
  if (*a2 == 1)
  {
    if (a2[40] == 45)
      v5 = "complex type definition";
    else
      v5 = "simple type definition";
  }
  else
  {
    v5 = xmlSchemaItemTypeToStr(*a2);
  }
  v6 = xmlStrcat(v4, (const xmlChar *)v5);
  *a1 = v6;
  v7 = xmlStrcat(v6, (const xmlChar *)" '");
  *a1 = v7;
  ComponentQName = xmlSchemaGetComponentQName(&v11, a2);
  v9 = xmlStrcat(v7, ComponentQName);
  *a1 = v9;
  result = xmlStrcat(v9, (const xmlChar *)"'");
  *a1 = result;
  if (v11)
  {
    xmlFree(v11);
    return *a1;
  }
  return result;
}

uint64_t xmlSchemaGetSchemaBucketByTNS(uint64_t a1, uint64_t a2)
{
  uint64_t **v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t result;

  v2 = *(uint64_t ***)(*(_QWORD *)(a1 + 48) + 24);
  v3 = *((unsigned int *)v2 + 2);
  if ((int)v3 < 1)
    return 0;
  for (i = *v2; ; ++i)
  {
    result = *i;
    if ((*(_QWORD *)(*i + 32) || !*(_QWORD *)(result + 8))
      && *(_QWORD *)(result + 16) == a2
      && *(_DWORD *)(result + 56))
    {
      break;
    }
    if (!--v3)
      return 0;
  }
  return result;
}

void xmlSchemaCustomWarning(_DWORD *a1, int a2, uint64_t a3, const xmlChar *a4, const xmlChar *a5, xmlChar *a6, xmlChar *a7)
{
  xmlChar *cur;

  cur = 0;
  xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, a3);
  cur = xmlStrcat(cur, a4);
  cur = xmlStrcat(cur, (const xmlChar *)".\n");
  xmlSchemaErr4Line(a1, 1, a2, a3, 0, (const char *)cur, a5, a6, a7, 0);
  if (cur)
    xmlFree(cur);
}

uint64_t xmlSchemaGetChameleonSchemaBucket(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t *i;
  uint64_t result;

  v3 = *(uint64_t ***)(*(_QWORD *)(a1 + 48) + 24);
  v4 = *((unsigned int *)v3 + 2);
  if ((int)v4 < 1)
    return 0;
  for (i = *v3; ; ++i)
  {
    result = *i;
    if (!*(_QWORD *)(*i + 16) && *(_QWORD *)(result + 8) == a2 && *(_QWORD *)(result + 24) == a3)
      break;
    if (!--v4)
      return 0;
  }
  return result;
}

_DWORD *xmlSchemaPErr(uint64_t a1, uint64_t a2, int a3, const char *a4, const xmlChar *a5, xmlChar *a6)
{
  _QWORD *v8;
  int v9;
  void (*v10)(void *, const char *, ...);
  void *v11;

  v8 = (_QWORD *)a1;
  if (a1)
  {
    v9 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 32) = a3;
    *(_DWORD *)(a1 + 36) = v9;
    v11 = *(void **)(a1 + 8);
    v10 = *(void (**)(void *, const char *, ...))(a1 + 16);
    a1 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    v11 = 0;
  }
  return __xmlRaiseError((xmlStructuredErrorFunc)a1, v10, v11, v8, a2, 0x10u, a3, 2, 0, 0, a5, a6, 0, 0, 0, a4, (char)a5);
}

xmlChar *xmlSchemaGetProp(uint64_t a1, xmlNode *node, xmlChar *name)
{
  xmlChar *result;
  xmlChar *v5;
  const xmlChar *v6;

  result = xmlGetNoNsProp(node, name);
  if (result)
  {
    v5 = result;
    v6 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), result, -1);
    xmlFree(v5);
    return (xmlChar *)v6;
  }
  return result;
}

uint64_t xmlSchemaItemListAdd(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(void **)a1;
  if (v4)
  {
    v5 = *(int *)(a1 + 12);
    if ((int)v5 <= *(_DWORD *)(a1 + 8))
    {
      *(_DWORD *)(a1 + 12) = 2 * v5;
      v4 = xmlRealloc(v4, 16 * v5);
      *(_QWORD *)a1 = v4;
      if (!v4)
      {
        __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"growing item list");
        *(_DWORD *)(a1 + 12) = 0;
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    v4 = xmlMalloc(0xA0uLL);
    *(_QWORD *)a1 = v4;
    if (!v4)
    {
      __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating new item list");
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)(a1 + 12) = 20;
  }
  v6 = 0;
  v7 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v7 + 1;
  *((_QWORD *)v4 + v7) = a2;
  return v6;
}

uint64_t xmlSchemaGetPropNode(uint64_t a1, xmlChar *str2)
{
  uint64_t i;

  i = 0;
  if (a1)
  {
    if (str2)
    {
      for (i = *(_QWORD *)(a1 + 88); i; i = *(_QWORD *)(i + 48))
      {
        if (!*(_QWORD *)(i + 72) && xmlStrEqual(*(const xmlChar **)(i + 16), str2))
          break;
      }
    }
  }
  return i;
}

uint64_t xmlSchemaPValAttrNode(_DWORD *a1, xmlNode *a2, xmlSchemaType *a3, xmlChar **a4)
{
  xmlChar *NodeContent;

  if (!a2 || !a3)
    return 0xFFFFFFFFLL;
  NodeContent = (xmlChar *)xmlSchemaGetNodeContent((uint64_t)a1, a2);
  if (a4)
    *a4 = NodeContent;
  return xmlSchemaPValAttrNodeValue(a1, a2, NodeContent, a3);
}

const xmlChar *xmlSchemaGetNodeContent(uint64_t a1, xmlNode *cur)
{
  xmlChar *Content;
  const xmlChar *v4;

  Content = xmlNodeGetContent(cur);
  if (!Content)
    Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
  v4 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), Content, -1);
  xmlFree(Content);
  return v4;
}

BOOL xmlSchemaPValAttrFormDefault(const xmlChar *a1, _DWORD *a2, int a3)
{
  if (xmlStrEqual(a1, (const xmlChar *)"qualified"))
  {
    if ((*a2 & a3) == 0)
      *a2 |= a3;
    return 0;
  }
  return !xmlStrEqual(a1, (const xmlChar *)"unqualified");
}

void xmlSchemaPSimpleTypeErr(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const char *a5, const xmlChar *a6, const xmlChar *a7, char a8)
{
  int v16;
  const char *v17;
  xmlChar *v18;
  const char *v19;
  xmlChar *v20;
  xmlChar *v21;
  int v22;
  const char *v23;
  const char *v24;
  xmlChar *v25;
  xmlChar *v26;
  xmlChar *v27;
  const xmlChar *v28;
  xmlChar *v29;
  const xmlChar *v30;
  xmlChar *v31;
  const char *v32;
  xmlChar *v33;
  const xmlChar *v34;
  xmlChar *v35;
  xmlChar *cur;

  cur = 0;
  xmlSchemaFormatNodeForError((void **)&cur, a1, a3);
  if (a7)
  {
    cur = xmlStrcat(cur, a7);
    cur = xmlStrcat(cur, (const xmlChar *)".\n");
    xmlSchemaPErrExt(a1, a3, a2, (const char *)cur, a8);
    goto LABEL_37;
  }
  v16 = *(_DWORD *)(a3 + 8);
  if (!a4)
  {
    if (v16 == 2)
      v24 = "The value '%s' is not valid.";
    else
      v24 = "The character content is not valid.";
    cur = xmlStrcat(cur, (const xmlChar *)v24);
    goto LABEL_28;
  }
  if (v16 == 2)
    v17 = "'%s' is not a valid value of ";
  else
    v17 = "The character content is not a valid value of ";
  v18 = xmlStrcat(cur, (const xmlChar *)v17);
  cur = v18;
  if (xmlSchemaIsGlobalItem((int *)a4))
    v19 = "the ";
  else
    v19 = "the local ";
  v20 = xmlStrcat(v18, (const xmlChar *)v19);
  v21 = v20;
  cur = v20;
  v22 = *(_DWORD *)(a4 + 88);
  if ((v22 & 0x100) != 0)
  {
    v23 = "atomic type";
  }
  else if ((v22 & 0x40) != 0)
  {
    v23 = "list type";
  }
  else
  {
    if ((v22 & 0x80) == 0)
      goto LABEL_21;
    v23 = "union type";
  }
  v21 = xmlStrcat(v20, (const xmlChar *)v23);
  cur = v21;
LABEL_21:
  if (xmlSchemaIsGlobalItem((int *)a4))
  {
    v35 = 0;
    v25 = xmlStrcat(v21, (const xmlChar *)" '");
    cur = v25;
    if (*(_DWORD *)(a4 + 160))
    {
      cur = xmlStrcat(v25, (const xmlChar *)"xs:");
      v26 = *(xmlChar **)(a4 + 16);
    }
    else
    {
      v26 = xmlSchemaFormatQName((void **)&v35, *(const xmlChar **)(a4 + 208), *(xmlChar **)(a4 + 16));
      if (v35)
      {
LABEL_26:
        v27 = cur;
        v28 = xmlEscapeFormatString((void **)&v35);
        cur = xmlStrcat(v27, v28);
        cur = xmlStrcat(cur, (const xmlChar *)"'.");
        if (v35)
          xmlFree(v35);
        goto LABEL_28;
      }
    }
    v35 = xmlStrdup(v26);
    goto LABEL_26;
  }
LABEL_28:
  if (a5)
  {
    v35 = xmlCharStrdup(a5);
    v29 = xmlStrcat(cur, (const xmlChar *)" Expected is '");
    cur = v29;
    v30 = xmlEscapeFormatString((void **)&v35);
    v31 = xmlStrcat(v29, v30);
    cur = v31;
    if (v35)
    {
      xmlFree(v35);
      v35 = 0;
      v31 = cur;
    }
    v32 = "'.\n";
  }
  else
  {
    v31 = cur;
    v32 = "\n";
  }
  v33 = xmlStrcat(v31, (const xmlChar *)v32);
  cur = v33;
  if (*(_DWORD *)(a3 + 8) == 2)
    v34 = a6;
  else
    v34 = 0;
  xmlSchemaPErr(a1, a3, a2, (const char *)v33, v34, 0);
LABEL_37:
  if (cur)
    xmlFree(cur);
}

uint64_t xmlSchemaPValAttrBlockFinal(xmlChar *str1, int *a2, int a3, int a4, int a5, int a6, int a7)
{
  uint64_t result;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v22;
  xmlChar *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;

  result = 0xFFFFFFFFLL;
  if (str1 && a2)
  {
    if (!*str1)
      return 0;
    if (xmlStrEqual(str1, (const xmlChar *)"#all"))
    {
      if (a3 == -1)
        v15 = 0;
      else
        v15 = a3;
      if (a5 == -1)
        v16 = 0;
      else
        v16 = a5;
      v17 = v15 | v16;
      if (a6 == -1)
        v18 = 0;
      else
        v18 = a6;
      v19 = *a2 | v17 | v18 | a4;
      *a2 = v19;
      if (a7 != -1)
      {
        result = 0;
        *a2 = v19 | a7;
        return result;
      }
      return 0;
    }
    v29 = a4;
    while (1)
    {
      while (1)
      {
        v20 = *str1;
        if (v20 > 0x20 || ((1 << v20) & 0x100002600) == 0)
          break;
        ++str1;
      }
      v22 = 0;
      while (v20 > 0x20u || ((1 << v20) & 0x100002601) == 0)
        LOBYTE(v20) = str1[++v22];
      if (!v22)
        return 0;
      v23 = xmlStrndup(str1, v22);
      if (xmlStrEqual(v23, (const xmlChar *)"extension"))
        break;
      if (xmlStrEqual(v23, (const xmlChar *)"restriction"))
      {
        v25 = *a2;
        v26 = v29;
        goto LABEL_33;
      }
      if (xmlStrEqual(v23, (const xmlChar *)"substitution"))
      {
        if (a5 != -1)
        {
          if ((*a2 & a5) == 0)
          {
            v24 = *a2 | a5;
LABEL_35:
            *a2 = v24;
          }
          goto LABEL_36;
        }
        goto LABEL_44;
      }
      if (xmlStrEqual(v23, (const xmlChar *)"list"))
      {
        v26 = a6;
        if (a6 != -1)
        {
          v25 = *a2;
          goto LABEL_33;
        }
LABEL_44:
        v27 = 0;
        goto LABEL_45;
      }
      v28 = xmlStrEqual(v23, (const xmlChar *)"union");
      v27 = 0;
      if (a7 != -1 && v28)
      {
        v25 = *a2;
        v26 = a7;
LABEL_33:
        if ((v25 & v26) == 0)
        {
          v24 = v25 | v26;
          goto LABEL_35;
        }
LABEL_36:
        v27 = 1;
      }
LABEL_45:
      if (v23)
        xmlFree(v23);
      if (!v27)
        return 1;
      str1 += v22;
      if (!*str1)
        return 0;
    }
    if (a3 != -1)
    {
      if ((*a2 & a3) == 0)
      {
        v24 = *a2 | a3;
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    goto LABEL_44;
  }
  return result;
}

uint64_t xmlSchemaPValAttrNodeID(uint64_t a1, xmlNode *cur)
{
  xmlChar *Content;
  uint64_t v5;
  uint64_t v6;
  xmlSchemaTypePtr BuiltInType;
  const char *v8;
  xmlChar *v10;
  xmlChar *v11;

  Content = xmlNodeGetContent(cur);
  v5 = xmlValidateNCName(Content, 1);
  if ((_DWORD)v5)
  {
    v6 = v5;
    if ((int)v5 >= 1)
    {
      BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ID);
      v8 = "The value '%s' of simple type 'xs:ID' is not a valid 'xs:NCName'";
      goto LABEL_4;
    }
  }
  else
  {
    if (LODWORD(cur->content) != 2)
    {
      v10 = xmlSchemaCollapseString(Content);
      if (v10)
      {
        v11 = v10;
        xmlFree(Content);
        Content = v11;
      }
      if (!xmlAddID(0, cur->doc, Content, (xmlAttrPtr)cur))
      {
        BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ID);
        v8 = "Duplicate value '%s' of simple type 'xs:ID'";
LABEL_4:
        v6 = 3037;
        xmlSchemaPSimpleTypeErr(a1, 3037, (uint64_t)cur, (uint64_t)BuiltInType, 0, 0, (const xmlChar *)v8, (char)Content);
        if (!Content)
          return v6;
        goto LABEL_9;
      }
      v6 = 0;
      LODWORD(cur->content) = 2;
      if (!Content)
        return v6;
LABEL_9:
      xmlFree(Content);
      return v6;
    }
    v6 = 0;
  }
  if (Content)
    goto LABEL_9;
  return v6;
}

uint64_t xmlSchemaPValAttrNodeValue(_DWORD *a1, xmlNodePtr node, xmlChar *value, xmlSchemaTypePtr type)
{
  unsigned int builtInType;
  BOOL v7;
  int v8;
  int v12;
  uint64_t v13;
  const char *v14;

  if (!type)
    return 0xFFFFFFFFLL;
  if (type->type != XML_SCHEMA_TYPE_BASIC)
  {
    v14 = "the given type is not a built-in type";
LABEL_17:
    xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaPValAttrNodeValue", (const xmlChar *)v14, 0);
    return 0xFFFFFFFFLL;
  }
  builtInType = type->builtInType;
  v7 = builtInType > 0x1D;
  v8 = (1 << builtInType) & 0x20630000;
  if (v7 || v8 == 0)
  {
    v14 = "validation using the given type is not supported while parsing a schema";
    goto LABEL_17;
  }
  v12 = xmlSchemaValPredefTypeNode(type, value, 0, node);
  if (v12 < 0)
  {
    v14 = "failed to validate a schema attribute value";
    goto LABEL_17;
  }
  if (!v12)
    return 0;
  if ((type->flags & 0x40) != 0)
    v13 = 1825;
  else
    v13 = 1824;
  xmlSchemaPSimpleTypeErr((uint64_t)a1, v13, (uint64_t)node, (uint64_t)type, 0, value, 0, 0);
  return v13;
}

BOOL xmlSchemaIsGlobalItem(int *a1)
{
  int v1;

  v1 = *a1;
  if ((*a1 - 4) < 2)
  {
    if ((a1[22] & 8) == 0)
      return 0;
  }
  else
  {
    if (v1 != 14)
      return v1 != 15 || (a1[30] & 1) != 0;
    if ((a1[22] & 2) == 0)
      return 0;
  }
  return 1;
}

_DWORD *xmlSchemaPErrExt(uint64_t a1, uint64_t a2, int a3, const char *a4, char a5)
{
  _QWORD *v7;
  int v8;
  void (*v9)(void *, const char *, ...);
  void *v10;

  v7 = (_QWORD *)a1;
  if (a1)
  {
    v8 = *(_DWORD *)(a1 + 36) + 1;
    *(_DWORD *)(a1 + 32) = a3;
    *(_DWORD *)(a1 + 36) = v8;
    v10 = *(void **)(a1 + 8);
    v9 = *(void (**)(void *, const char *, ...))(a1 + 16);
    a1 = *(_QWORD *)(a1 + 40);
  }
  else
  {
    v9 = 0;
    v10 = 0;
  }
  return __xmlRaiseError((xmlStructuredErrorFunc)a1, v9, v10, v7, a2, 0x10u, a3, 2, 0, 0, 0, 0, 0, 0, 0, a4, a5);
}

_QWORD *xmlSchemaParseAnnotation(_DWORD *a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  xmlNode *PropNode;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  xmlSchemaType *BuiltInType;
  uint64_t v15;
  uint64_t v16;
  const xmlChar *v17;
  const char *v18;
  xmlNode *v19;
  xmlSchemaType *v20;
  _QWORD *v22;

  if (!a2)
    return 0;
  if (a3)
  {
    v5 = xmlMalloc(0x10uLL);
    if (v5)
    {
      v6 = v5;
      *v5 = 0;
      v5[1] = a2;
      goto LABEL_10;
    }
    if (a1)
      ++a1[9];
    __xmlSimpleError(0x10u, 2, a2, 0, (const xmlChar *)"allocating annotation");
  }
  v6 = 0;
LABEL_10:
  v7 = *(_QWORD *)(a2 + 88);
  if (v7)
  {
    while (1)
    {
      v8 = *(_QWORD *)(v7 + 72);
      if (v8)
        goto LABEL_12;
      if (xmlStrEqual(*(const xmlChar **)(v7 + 16), (const xmlChar *)"id"))
        break;
LABEL_17:
      xmlSchemaPIllegalAttrErr(a1, v7);
LABEL_18:
      v7 = *(_QWORD *)(v7 + 48);
      if (!v7)
        goto LABEL_19;
    }
    v8 = *(_QWORD *)(v7 + 72);
    if (!v8)
      goto LABEL_18;
LABEL_12:
    if (!xmlStrEqual(*(const xmlChar **)(v8 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      goto LABEL_18;
    goto LABEL_17;
  }
LABEL_19:
  PropNode = (xmlNode *)xmlSchemaGetPropNode(a2, (xmlChar *)"id");
  if (PropNode)
    xmlSchemaPValAttrNodeID((uint64_t)a1, PropNode);
  v10 = *(_QWORD *)(a2 + 24);
  if (v10)
  {
    v22 = v6;
    v11 = 0;
    while (1)
    {
      if (!*(_QWORD *)(v10 + 72))
      {
LABEL_54:
        if (!v11)
          xmlSchemaPContentErr((uint64_t)a1, 3033, a2, v10, 0, (xmlChar *)"(appinfo | documentation)*");
        v11 = 1;
        goto LABEL_57;
      }
      if (xmlStrEqual(*(const xmlChar **)(v10 + 16), (const xmlChar *)"appinfo")
        && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v10 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v12 = *(_QWORD *)(v10 + 88);
        if (!v12)
        {
LABEL_35:
          BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
          xmlSchemaPValAttr(a1, v10, (xmlChar *)"source", BuiltInType, 0);
          goto LABEL_57;
        }
        while (2)
        {
          v13 = *(_QWORD *)(v12 + 72);
          if (v13)
          {
LABEL_28:
            if (!xmlStrEqual(*(const xmlChar **)(v13 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              goto LABEL_34;
          }
          else if (xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"source"))
          {
            v13 = *(_QWORD *)(v12 + 72);
            if (v13)
              goto LABEL_28;
LABEL_34:
            v12 = *(_QWORD *)(v12 + 48);
            if (!v12)
              goto LABEL_35;
            continue;
          }
          break;
        }
        xmlSchemaPIllegalAttrErr(a1, v12);
        goto LABEL_34;
      }
      if (!*(_QWORD *)(v10 + 72)
        || !xmlStrEqual(*(const xmlChar **)(v10 + 16), (const xmlChar *)"documentation")
        || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v10 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        goto LABEL_54;
      }
      v15 = *(_QWORD *)(v10 + 88);
      if (!v15)
        goto LABEL_57;
      do
      {
        v16 = *(_QWORD *)(v15 + 72);
        if (!v16)
        {
          v17 = *(const xmlChar **)(v15 + 16);
          v18 = "source";
          goto LABEL_45;
        }
        if (!xmlStrEqual(*(const xmlChar **)(v16 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          if (!xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"lang"))
            goto LABEL_47;
          v17 = *(const xmlChar **)(*(_QWORD *)(v15 + 72) + 16);
          v18 = "http://www.w3.org/XML/1998/namespace";
LABEL_45:
          if (xmlStrEqual(v17, (const xmlChar *)v18))
            goto LABEL_47;
        }
        xmlSchemaPIllegalAttrErr(a1, v15);
LABEL_47:
        v15 = *(_QWORD *)(v15 + 48);
      }
      while (v15);
      v19 = *(xmlNode **)(v10 + 88);
      if (v19)
      {
        while (!v19->ns
             || !xmlStrEqual(v19->name, (const xmlChar *)"lang")
             || !xmlStrEqual(v19->ns->href, (const xmlChar *)"http://www.w3.org/XML/1998/namespace"))
        {
          v19 = v19->next;
          if (!v19)
            goto LABEL_57;
        }
        v20 = xmlSchemaGetBuiltInType(XML_SCHEMAS_LANGUAGE);
        xmlSchemaPValAttrNode(a1, v19, v20, 0);
      }
LABEL_57:
      v10 = *(_QWORD *)(v10 + 48);
      if (!v10)
        return v22;
    }
  }
  return v6;
}

uint64_t xmlSchemaParseComplexType(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v8;
  uint64_t PropNode;
  xmlSchemaType *BuiltInType;
  _QWORD *v11;
  _QWORD *v12;
  xmlNode *v13;
  int v14;
  int *v15;
  xmlNs *ns;
  xmlNode *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  int v23;
  xmlNode *v24;
  char v25;
  int v26;
  xmlNs *v27;
  int v28;
  uint64_t v29;
  uint64_t properties;
  uint64_t v31;
  xmlNode *v32;
  uint64_t children;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  xmlNode *v38;
  int v39;
  uint64_t v40;
  _QWORD *v41;
  int v42;
  xmlNs *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;
  xmlNs *v50;
  int v51;
  xmlNs *v52;
  _QWORD *v53;
  xmlChar *NodeContent;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  xmlChar *v61;
  xmlNode *next;

  v4 = a4;
  v61 = 0;
  next = 0;
  v8 = *(_QWORD *)(a1 + 160);
  if (a4)
  {
    PropNode = xmlSchemaGetPropNode(a3, (xmlChar *)"name");
    if (!PropNode)
    {
      xmlSchemaPMissingAttrErr(a1, a3, (xmlChar *)"name");
      return PropNode;
    }
    BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
    if (xmlSchemaPValAttrNode((_DWORD *)a1, (xmlNode *)PropNode, BuiltInType, &v61))
      return 0;
    v11 = xmlSchemaAddType(a1, a2, 5, (uint64_t)v61, *(_QWORD *)(a1 + 200), a3, 1);
    PropNode = (uint64_t)v11;
    if (!v11)
      return PropNode;
    v11[9] = a3;
    *(_DWORD *)v11 = 5;
    *((_DWORD *)v11 + 22) |= 8u;
  }
  else
  {
    v12 = xmlSchemaAddType(a1, a2, 5, 0, *(_QWORD *)(a1 + 200), a3, 0);
    PropNode = (uint64_t)v12;
    if (!v12)
      return PropNode;
    v61 = (xmlChar *)v12[2];
    v12[9] = a3;
    *(_DWORD *)v12 = 5;
  }
  *(_QWORD *)(PropNode + 208) = *(_QWORD *)(a1 + 200);
  v13 = *(xmlNode **)(a3 + 88);
  if (!v13)
  {
    v14 = 0;
    goto LABEL_40;
  }
  v58 = v8;
  v56 = 0;
  v14 = 0;
  v15 = (int *)(PropNode + 88);
  do
  {
    ns = v13->ns;
    if (ns)
    {
      if (!xmlStrEqual(ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_22;
LABEL_12:
      xmlSchemaPIllegalAttrErr((_DWORD *)a1, (uint64_t)v13);
      goto LABEL_22;
    }
    if (xmlStrEqual(v13->name, (const xmlChar *)"id"))
    {
      v17 = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
      if (v17)
        xmlSchemaPValAttrNodeID(a1, v17);
    }
    else
    {
      if (xmlStrEqual(v13->name, (const xmlChar *)"mixed"))
      {
        if (!xmlSchemaPGetBoolNodeValue(a1, v13))
          goto LABEL_22;
        v18 = *v15 | 1;
        goto LABEL_19;
      }
      if (!v4)
        goto LABEL_12;
      if (!xmlStrEqual(v13->name, (const xmlChar *)"name"))
      {
        if (xmlStrEqual(v13->name, (const xmlChar *)"abstract"))
        {
          if (xmlSchemaPGetBoolNodeValue(a1, v13))
          {
            v18 = *v15 | 0x100000;
LABEL_19:
            *v15 = v18;
          }
        }
        else if (xmlStrEqual(v13->name, (const xmlChar *)"final"))
        {
          NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, v13);
          if (xmlSchemaPValAttrBlockFinal(NodeContent, (int *)(PropNode + 88), 512, 1024, -1, -1, -1))
          {
            v19 = a1;
            v20 = (uint64_t)v13;
            v21 = "(#all | List of (extension | restriction))";
LABEL_33:
            xmlSchemaPSimpleTypeErr(v19, 3037, v20, 0, v21, NodeContent, 0, 0);
            goto LABEL_22;
          }
          v14 = 1;
        }
        else
        {
          if (!xmlStrEqual(v13->name, (const xmlChar *)"block"))
            goto LABEL_12;
          NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, v13);
          if (xmlSchemaPValAttrBlockFinal(NodeContent, (int *)(PropNode + 88), 0x40000, 0x80000, -1, -1, -1))
          {
            v19 = a1;
            v20 = (uint64_t)v13;
            v21 = "(#all | List of (extension | restriction)) ";
            goto LABEL_33;
          }
          v56 = 1;
        }
      }
    }
LABEL_22:
    v13 = v13->next;
  }
  while (v13);
  v8 = v58;
  if (!v56)
  {
LABEL_40:
    v22 = *(_DWORD *)(a2 + 48);
    if ((v22 & 0x80) != 0)
      *(_DWORD *)(PropNode + 88) |= 0x80000u;
    if ((v22 & 0x40) != 0)
      *(_DWORD *)(PropNode + 88) |= 0x40000u;
  }
  if (!v14)
  {
    v23 = *(_DWORD *)(a2 + 48);
    if ((v23 & 8) != 0)
      *(_DWORD *)(PropNode + 88) |= 0x400u;
    if ((v23 & 4) != 0)
      *(_DWORD *)(PropNode + 88) |= 0x200u;
  }
  v24 = *(xmlNode **)(a3 + 24);
  next = v24;
  if (v24)
  {
    if (v24->ns
      && xmlStrEqual(v24->name, (const xmlChar *)"annotation")
      && xmlStrEqual(v24->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      v25 = 1;
      *(_QWORD *)(PropNode + 48) = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)v24, 1);
      v24 = v24->next;
      next = v24;
      *(_QWORD *)(a1 + 160) = PropNode;
      if (!v24)
        goto LABEL_107;
    }
    else
    {
      *(_QWORD *)(a1 + 160) = PropNode;
    }
    if (v24->ns)
    {
      v26 = xmlStrEqual(v24->name, (const xmlChar *)"simpleContent");
      v27 = v24->ns;
      if (v26)
      {
        if (xmlStrEqual(v27->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          v57 = v4;
          v59 = v8;
          v28 = *(_DWORD *)(PropNode + 88);
          if ((v28 & 1) != 0)
            *(_DWORD *)(PropNode + 88) = v28 ^ 1;
          v29 = *(_QWORD *)(a1 + 160);
          *(_DWORD *)(v29 + 92) = 4;
          properties = (uint64_t)v24->properties;
          if (properties)
          {
            while (1)
            {
              v31 = *(_QWORD *)(properties + 72);
              if (!v31)
                break;
              if (xmlStrEqual(*(const xmlChar **)(v31 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                goto LABEL_64;
LABEL_65:
              properties = *(_QWORD *)(properties + 48);
              if (!properties)
                goto LABEL_70;
            }
            if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id"))
              goto LABEL_65;
LABEL_64:
            xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
            goto LABEL_65;
          }
LABEL_70:
          v32 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)v24, (xmlChar *)"id");
          if (v32)
            xmlSchemaPValAttrNodeID(a1, v32);
          children = (uint64_t)v24->children;
          if (!children
            || *(_QWORD *)(children + 72)
            && xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"annotation")
            && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")&& (v34 = xmlSchemaParseAnnotation((_DWORD *)a1, children, 1), xmlSchemaAddAnnotation(v29, (uint64_t)v34), (children = *(_QWORD *)(children + 48)) == 0))
          {
            xmlSchemaPContentErr(a1, 3034, (uint64_t)v24, 0, 0, (xmlChar *)"(annotation?, (restriction | extension))");
            xmlSchemaPContentErr(a1, 3034, (uint64_t)v24, 0, 0, (xmlChar *)"(annotation?, (restriction | extension))");
            v48 = 0;
            v8 = v59;
            v4 = v57;
            goto LABEL_142;
          }
          if (*(_QWORD *)(children + 72))
          {
            if (xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"restriction")
              && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              xmlSchemaParseRestriction(a1, a2, children, 9);
              v4 = v57;
              goto LABEL_122;
            }
            v4 = v57;
            if (*(_QWORD *)(children + 72)
              && xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"extension")
              && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              xmlSchemaParseExtension(a1, a2, children, 9);
LABEL_122:
              children = *(_QWORD *)(children + 48);
              v48 = 1;
              if (!children)
              {
LABEL_128:
                v8 = v59;
                goto LABEL_142;
              }
            }
            else
            {
              v48 = 0;
            }
          }
          else
          {
            v48 = 0;
            v4 = v57;
          }
          xmlSchemaPContentErr(a1, 3033, (uint64_t)v24, children, 0, (xmlChar *)"(annotation?, (restriction | extension))");
          v24 = next;
          goto LABEL_128;
        }
        v27 = v24->ns;
      }
      if (v27
        && xmlStrEqual(v24->name, (const xmlChar *)"complexContent")
        && xmlStrEqual(v24->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v60 = v8;
        *(_DWORD *)(PropNode + 92) = 1;
        v35 = *(_QWORD *)(a1 + 160);
        v36 = (uint64_t)v24->properties;
        if (v36)
        {
          while (1)
          {
            v37 = *(_QWORD *)(v36 + 72);
            if (!v37)
              break;
            if (xmlStrEqual(*(const xmlChar **)(v37 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              goto LABEL_88;
LABEL_91:
            v36 = *(_QWORD *)(v36 + 48);
            if (!v36)
              goto LABEL_92;
          }
          if (xmlStrEqual(*(const xmlChar **)(v36 + 16), (const xmlChar *)"id")
            || xmlStrEqual(*(const xmlChar **)(v36 + 16), (const xmlChar *)"mixed"))
          {
            goto LABEL_91;
          }
LABEL_88:
          xmlSchemaPIllegalAttrErr((_DWORD *)a1, v36);
          goto LABEL_91;
        }
LABEL_92:
        v38 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)v24, (xmlChar *)"id");
        if (v38)
          xmlSchemaPValAttrNodeID(a1, v38);
        if (xmlGetBooleanProp(a1, v24, (xmlChar *)"mixed"))
        {
          v39 = *(_DWORD *)(v35 + 88);
          if ((v39 & 1) == 0)
            *(_DWORD *)(v35 + 88) = v39 | 1;
        }
        v40 = (uint64_t)v24->children;
        if (!v40
          || *(_QWORD *)(v40 + 72)
          && xmlStrEqual(*(const xmlChar **)(v40 + 16), (const xmlChar *)"annotation")
          && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v40 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")&& (v41 = xmlSchemaParseAnnotation((_DWORD *)a1, v40, 1), xmlSchemaAddAnnotation(v35, (uint64_t)v41), (v40 = *(_QWORD *)(v40 + 48)) == 0))
        {
          xmlSchemaPContentErr(a1, 3034, (uint64_t)v24, 0, 0, (xmlChar *)"(annotation?, (restriction | extension))");
          xmlSchemaPContentErr(a1, 3034, (uint64_t)v24, 0, 0, (xmlChar *)"(annotation?, (restriction | extension))");
          v48 = 0;
          goto LABEL_162;
        }
        if (!*(_QWORD *)(v40 + 72))
          goto LABEL_160;
        if (xmlStrEqual(*(const xmlChar **)(v40 + 16), (const xmlChar *)"restriction")
          && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v40 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          xmlSchemaParseRestriction(a1, a2, v40, 10);
          goto LABEL_158;
        }
        if (*(_QWORD *)(v40 + 72)
          && xmlStrEqual(*(const xmlChar **)(v40 + 16), (const xmlChar *)"extension")
          && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v40 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          xmlSchemaParseExtension(a1, a2, v40, 10);
LABEL_158:
          v40 = *(_QWORD *)(v40 + 48);
          v48 = 1;
          if (!v40)
          {
LABEL_162:
            v24 = v24->next;
            next = v24;
            v8 = v60;
            if (!v24)
              goto LABEL_148;
            goto LABEL_146;
          }
        }
        else
        {
LABEL_160:
          v48 = 0;
        }
        xmlSchemaPContentErr(a1, 3033, (uint64_t)v24, v40, 0, (xmlChar *)"(annotation?, (restriction | extension))");
        v24 = next;
        goto LABEL_162;
      }
    }
    v25 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 160) = PropNode;
    v25 = 1;
  }
LABEL_107:
  *(_QWORD *)(PropNode + 112) = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYTYPE);
  *(_DWORD *)(PropNode + 88) |= 4u;
  if ((v25 & 1) != 0 || !v24->ns)
    goto LABEL_136;
  v42 = xmlStrEqual(v24->name, (const xmlChar *)"all");
  v43 = v24->ns;
  if (v42)
  {
    if (xmlStrEqual(v43->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      v44 = a1;
      v45 = a2;
      v46 = (uint64_t)v24;
      v47 = 8;
      goto LABEL_134;
    }
    v43 = v24->ns;
  }
  if (!v43)
    goto LABEL_136;
  v49 = xmlStrEqual(v24->name, (const xmlChar *)"choice");
  v50 = v24->ns;
  if (v49)
  {
    if (xmlStrEqual(v50->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      v44 = a1;
      v45 = a2;
      v46 = (uint64_t)v24;
      v47 = 7;
      goto LABEL_134;
    }
    v50 = v24->ns;
  }
  if (!v50)
    goto LABEL_136;
  v51 = xmlStrEqual(v24->name, (const xmlChar *)"sequence");
  v52 = v24->ns;
  if (v51)
  {
    if (xmlStrEqual(v52->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      v44 = a1;
      v45 = a2;
      v46 = (uint64_t)v24;
      v47 = 6;
LABEL_134:
      v53 = xmlSchemaParseModelGroup(v44, v45, v46, v47, 1);
LABEL_135:
      *(_QWORD *)(PropNode + 56) = v53;
      next = v24->next;
      goto LABEL_136;
    }
    v52 = v24->ns;
  }
  if (v52
    && xmlStrEqual(v24->name, (const xmlChar *)"group")
    && xmlStrEqual(v24->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    v53 = xmlSchemaParseModelGroupDefRef((_DWORD *)a1, a2, (uint64_t)v24);
    goto LABEL_135;
  }
LABEL_136:
  if (xmlSchemaParseLocalAttributes(a1, a2, (uint64_t *)&next, (void *****)(PropNode + 216), 12, 0) == -1)
    return 0;
  v24 = next;
  if (next)
  {
    if (!next->ns
      || !xmlStrEqual(next->name, (const xmlChar *)"anyAttribute")
      || !xmlStrEqual(v24->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      v48 = 0;
      goto LABEL_146;
    }
    v48 = 0;
    *(_QWORD *)(PropNode + 152) = xmlSchemaParseAnyAttribute((_DWORD *)a1, a2, v24);
LABEL_142:
    v24 = v24->next;
    next = v24;
    if (v24)
LABEL_146:
      xmlSchemaPContentErr(a1, 3033, a3, (uint64_t)v24, 0, (xmlChar *)"(annotation?, (simpleContent | complexContent | ((group | all | choice | sequence)?, ((attribute | attributeGroup)*, anyAttribute?))))");
  }
  else
  {
    v48 = 0;
  }
LABEL_148:
  if (v4 && !v48 && *(_DWORD *)(a1 + 188))
    xmlSchemaPCustomErrExt(a1, 3081, 0, a3, (const xmlChar *)"This is a redefinition, thus the <complexType> must have a <restriction> or <extension> grand-child");
  *(_QWORD *)(a1 + 160) = v8;
  return PropNode;
}

uint64_t xmlSchemaParseSimpleType(uint64_t a1, uint64_t a2, xmlNode *a3, int a4)
{
  uint64_t PropNode;
  xmlSchemaType *BuiltInType;
  _DWORD *v10;
  uint64_t properties;
  uint64_t v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  xmlNode *v20;
  uint64_t v21;
  uint64_t children;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  xmlNode *v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  char v31;
  xmlChar *name;

  name = 0;
  if (!a3)
    return 0;
  if (!a4)
  {
    v10 = xmlSchemaAddType(a1, a2, 4, 0, *(_QWORD *)(a1 + 200), (uint64_t)a3, 0);
    PropNode = (uint64_t)v10;
    if (!v10)
      return PropNode;
    *v10 = 4;
    v10[23] = 4;
    properties = (uint64_t)a3->properties;
    if (!properties)
      goto LABEL_36;
    while (1)
    {
      v12 = *(_QWORD *)(properties + 72);
      if (!v12)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_10;
LABEL_11:
      properties = *(_QWORD *)(properties + 48);
      if (!properties)
        goto LABEL_36;
    }
    if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id"))
      goto LABEL_11;
LABEL_10:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
    goto LABEL_11;
  }
  PropNode = xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"name");
  if (!PropNode)
  {
    xmlSchemaPMissingAttrErr(a1, (uint64_t)a3, (xmlChar *)"name");
    return PropNode;
  }
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (xmlSchemaPValAttrNode((_DWORD *)a1, (xmlNode *)PropNode, BuiltInType, &name))
    return 0;
  if (*(_DWORD *)(a1 + 184))
  {
    if (*(_DWORD *)(a1 + 188))
    {
      xmlSchemaPCustomErrExt(a1, 3081, 0, (uint64_t)a3, (const xmlChar *)"Redefinition of built-in simple types is not supported");
      return 0;
    }
    PropNode = (uint64_t)xmlSchemaGetPredefinedType(name, (const xmlChar *)"http://www.w3.org/2001/XMLSchema");
    if (PropNode)
      return PropNode;
  }
  v13 = xmlSchemaAddType(a1, a2, 4, (uint64_t)name, *(_QWORD *)(a1 + 200), (uint64_t)a3, 1);
  PropNode = (uint64_t)v13;
  if (!v13)
    return PropNode;
  *v13 = 4;
  v13[23] = 4;
  v14 = v13 + 22;
  v13[22] |= 8u;
  v15 = (uint64_t)a3->properties;
  if (v15)
  {
    while (1)
    {
      v16 = *(_QWORD *)(v15 + 72);
      if (!v16)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v16 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_24;
LABEL_28:
      v15 = *(_QWORD *)(v15 + 48);
      if (!v15)
        goto LABEL_29;
    }
    if (xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"name")
      || xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"final"))
    {
      goto LABEL_28;
    }
LABEL_24:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v15);
    goto LABEL_28;
  }
LABEL_29:
  v17 = xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"final");
  if (v17)
  {
    v18 = v17;
    name = xmlSchemaGetProp(a1, a3, (xmlChar *)"final");
    if (xmlSchemaPValAttrBlockFinal(name, (int *)(PropNode + 88), -1, 1024, -1, 2048, 4096))
      xmlSchemaPSimpleTypeErr(a1, 3037, v18, 0, "(#all | List of (list | union | restriction)", name, 0, 0);
    goto LABEL_36;
  }
  v19 = *(_DWORD *)(a2 + 48);
  if ((v19 & 8) == 0)
  {
    if ((v19 & 0x10) == 0)
      goto LABEL_34;
LABEL_78:
    *v14 |= 0x800u;
    if ((v19 & 0x20) == 0)
      goto LABEL_36;
    goto LABEL_35;
  }
  *v14 |= 0x400u;
  if ((v19 & 0x10) != 0)
    goto LABEL_78;
LABEL_34:
  if ((v19 & 0x20) != 0)
LABEL_35:
    *v14 |= 0x1000u;
LABEL_36:
  *(_QWORD *)(PropNode + 208) = *(_QWORD *)(a1 + 200);
  v20 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"id");
  if (v20)
    xmlSchemaPValAttrNodeID(a1, v20);
  v21 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = PropNode;
  children = (uint64_t)a3->children;
  if (!children
    || *(_QWORD *)(children + 72)
    && xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"annotation")
    && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")&& (*(_QWORD *)(PropNode + 48) = xmlSchemaParseAnnotation((_DWORD *)a1, children, 1), (children = *(_QWORD *)(children + 48)) == 0))
  {
    xmlSchemaPContentErr(a1, 3034, (uint64_t)a3, 0, 0, (xmlChar *)"(annotation?, (restriction | list | union))");
    v23 = 0;
    goto LABEL_91;
  }
  if (!*(_QWORD *)(children + 72))
    goto LABEL_74;
  if (xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"restriction")
    && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    xmlSchemaParseRestriction(a1, a2, children, 4);
    v23 = 1;
    goto LABEL_89;
  }
  if (!*(_QWORD *)(children + 72))
    goto LABEL_74;
  if (!xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"list")
    || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    if (*(_QWORD *)(children + 72)
      && xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"union")
      && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      xmlSchemaParseUnion(a1, a2, children);
      goto LABEL_88;
    }
LABEL_74:
    v23 = 0;
LABEL_90:
    xmlSchemaPContentErr(a1, 3033, (uint64_t)a3, children, 0, (xmlChar *)"(annotation?, (restriction | list | union))");
    goto LABEL_91;
  }
  v24 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(v24 + 88) |= 0x40u;
  *(_QWORD *)(v24 + 112) = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYSIMPLETYPE);
  v25 = *(_QWORD *)(children + 88);
  if (v25)
  {
    while (1)
    {
      v26 = *(_QWORD *)(v25 + 72);
      if (!v26)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v26 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_54;
LABEL_57:
      v25 = *(_QWORD *)(v25 + 48);
      if (!v25)
        goto LABEL_58;
    }
    if (xmlStrEqual(*(const xmlChar **)(v25 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v25 + 16), (const xmlChar *)"itemType"))
    {
      goto LABEL_57;
    }
LABEL_54:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v25);
    goto LABEL_57;
  }
LABEL_58:
  v27 = (xmlNode *)xmlSchemaGetPropNode(children, (xmlChar *)"id");
  if (v27)
    xmlSchemaPValAttrNodeID(a1, v27);
  v28 = (_QWORD *)(v24 + 96);
  xmlSchemaPValAttrQName(a1, a2, children, (xmlChar *)"itemType", (const xmlChar **)(v24 + 104), (const xmlChar **)(v24 + 96));
  v29 = *(_QWORD *)(children + 24);
  if (v29
    && (!*(_QWORD *)(v29 + 72)
     || !xmlStrEqual(*(const xmlChar **)(v29 + 16), (const xmlChar *)"annotation")
     || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v29 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (v30 = xmlSchemaParseAnnotation((_DWORD *)a1, v29, 1), xmlSchemaAddAnnotation(v24, (uint64_t)v30), (v29 = *(_QWORD *)(v29 + 48)) != 0))&& *(_QWORD *)(v29 + 72)&& xmlStrEqual(*(const xmlChar **)(v29 + 16), (const xmlChar *)"simpleType")&& xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v29 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    if (*v28)
      xmlSchemaPCustomErrExt(a1, 3000, 0, children, (const xmlChar *)"The attribute 'itemType' and the <simpleType> child are mutually exclusive");
    else
      *(_QWORD *)(v24 + 56) = xmlSchemaParseSimpleType(a1, a2, v29, 0);
    v29 = *(_QWORD *)(v29 + 48);
  }
  else if (!*v28)
  {
    xmlSchemaPCustomErrExt(a1, 3000, 0, children, (const xmlChar *)"Either the attribute 'itemType' or the <simpleType> child must be present");
  }
  if (v29)
    xmlSchemaPContentErr(a1, 3033, children, v29, 0, (xmlChar *)"(annotation?, simpleType?)");
  if (!*v28 && !*(_QWORD *)(v24 + 56) && !xmlSchemaGetPropNode(children, (xmlChar *)"itemType"))
    xmlSchemaPCustomErrExt(a1, 3000, 0, children, (const xmlChar *)"Either the attribute 'itemType' or the <simpleType> child must be present");
LABEL_88:
  v23 = 0;
LABEL_89:
  children = *(_QWORD *)(children + 48);
  if (children)
    goto LABEL_90;
LABEL_91:
  if (a4)
  {
    if (*(_DWORD *)(a1 + 188))
      v31 = v23;
    else
      v31 = 1;
    if ((v31 & 1) == 0)
      xmlSchemaPCustomErrExt(a1, 3081, 0, (uint64_t)a3, (const xmlChar *)"This is a redefinition, thus the <simpleType> must have a <restriction> child");
  }
  *(_QWORD *)(a1 + 160) = v21;
  return PropNode;
}

_QWORD *xmlSchemaParseElement(uint64_t a1, uint64_t a2, xmlNode *a3, _DWORD *a4, int a5)
{
  xmlNode *PropNode;
  uint64_t v11;
  BOOL v12;
  xmlNode *v14;
  xmlNode *v15;
  xmlNode *children;
  _QWORD *v17;
  int MinOccurs;
  int MaxOccurs;
  xmlChar *NodeContent;
  xmlChar *v21;
  uint64_t properties;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  xmlSchemaType *BuiltInType;
  uint64_t v27;
  xmlChar *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD **v32;
  int v33;
  _QWORD *v34;
  _QWORD *v35;
  xmlNode *v37;
  uint64_t v38;
  const xmlChar *v39;
  uint64_t i;
  uint64_t v41;
  const xmlChar *v42;
  const xmlChar *v43;
  const char *v44;
  _DWORD *v45;
  xmlNode *v46;
  uint64_t v47;
  xmlChar *v48;
  int v49;
  xmlNode *v50;
  uint64_t v51;
  xmlChar *v52;
  int v53;
  xmlNode *v54;
  uint64_t v55;
  xmlChar *v56;
  xmlNode *v57;
  uint64_t v58;
  const xmlChar *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  xmlNode *v68;
  xmlSchemaType *v69;
  xmlChar *v70;
  _OWORD *v71;
  xmlNode *v72;
  uint64_t v73;
  xmlNode *v74;
  _QWORD *v75;
  xmlChar *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  int v83;
  _QWORD *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  const xmlChar **v90;
  int v91;
  const xmlChar **v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  xmlChar *v98;
  xmlChar *str2;

  if (a4)
    *a4 = 0;
  PropNode = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"name");
  v11 = xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"ref");
  if (v11)
    v12 = a5 == 0;
  else
    v12 = 0;
  if (!v12 && PropNode == 0)
  {
    xmlSchemaPMissingAttrErr(a1, (uint64_t)a3, (xmlChar *)"name");
    return 0;
  }
  v14 = (xmlNode *)v11;
  v15 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"id");
  if (v15)
    xmlSchemaPValAttrNodeID(a1, v15);
  children = a3->children;
  if (!children
    || !children->ns
    || !xmlStrEqual(children->name, (const xmlChar *)"annotation")
    || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    v17 = 0;
    if (!a5)
      goto LABEL_17;
LABEL_40:
    v25 = 0;
    goto LABEL_41;
  }
  v17 = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)children, 1);
  children = children->next;
  if (a5)
    goto LABEL_40;
LABEL_17:
  v96 = v17;
  MinOccurs = xmlGetMinOccurs(a1, (uint64_t)a3, -1, "xs:nonNegativeInteger");
  MaxOccurs = xmlGetMaxOccurs(a1, (uint64_t)a3, 0, 0x40000000, "(xs:nonNegativeInteger | unbounded)");
  xmlSchemaPCheckParticleCorrect_2(a1, (uint64_t)a3, MinOccurs, MaxOccurs);
  v95 = xmlSchemaAddParticle(a1, (uint64_t)a3, MinOccurs, MaxOccurs);
  if (!v95)
  {
    v17 = v96;
    if (v96)
      goto LABEL_52;
    return 0;
  }
  if (v14)
  {
    v98 = 0;
    str2 = 0;
    if (a4)
      *a4 = 1;
    NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, v14);
    xmlSchemaPValAttrNodeQNameValue(a1, a2, (uint64_t)v14, NodeContent, (const xmlChar **)&str2, (const xmlChar **)&v98);
    v21 = str2;
    xmlSchemaCheckReference(a1, (uint64_t)a3, (uint64_t)v14, str2);
    if (PropNode)
      xmlSchemaPMutualExclAttrErr(a1, 3039, 0, (uint64_t)PropNode);
    properties = (uint64_t)a3->properties;
    if (!properties)
    {
LABEL_33:
      if (children)
        goto LABEL_34;
      goto LABEL_35;
    }
    while (1)
    {
      v23 = *(_QWORD *)(properties + 72);
      if (v23)
      {
        if (xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
      }
      else if (!xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"ref")
             && !xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"name")
             && !xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
             && !xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"maxOccurs")
             && !xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"minOccurs"))
      {
        xmlSchemaPCustomAttrErr(a1, 3040, properties);
        if (!children)
          goto LABEL_35;
LABEL_34:
        xmlSchemaPContentErr(a1, 3033, (uint64_t)a3, (uint64_t)children, 0, (xmlChar *)"(annotation?)");
LABEL_35:
        if (MaxOccurs | MinOccurs)
        {
          v24 = xmlSchemaNewQNameRef(a1, 14, (uint64_t)v98, (uint64_t)v21);
          if (v24)
          {
            v25 = v95;
            v95[3] = v24;
            v95[1] = v96;
            xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, (uint64_t)v95);
            return v25;
          }
        }
        v25 = v95;
        v17 = v96;
LABEL_42:
        if (v17)
        {
          if (v25)
            v25[1] = 0;
LABEL_52:
          v34 = (_QWORD *)*v17;
          xmlFree(v17);
          if (v34)
          {
            do
            {
              v35 = (_QWORD *)*v34;
              xmlFree(v34);
              v34 = v35;
            }
            while (v35);
          }
        }
        return 0;
      }
      properties = *(_QWORD *)(properties + 48);
      if (!properties)
        goto LABEL_33;
    }
  }
  v25 = v95;
  v17 = v96;
LABEL_41:
  v98 = 0;
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (xmlSchemaPValAttrNode((_DWORD *)a1, PropNode, BuiltInType, &v98))
    goto LABEL_42;
  if (a5)
    goto LABEL_46;
  v37 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"form");
  if (v37)
  {
    v38 = (uint64_t)v37;
    v39 = xmlSchemaGetNodeContent(a1, v37);
    if (!xmlStrEqual(v39, (const xmlChar *)"qualified"))
    {
      if (!xmlStrEqual(v39, (const xmlChar *)"unqualified"))
        xmlSchemaPSimpleTypeErr(a1, 3037, v38, 0, "(qualified | unqualified)", v39, 0, 0);
      goto LABEL_95;
    }
LABEL_46:
    v27 = *(_QWORD *)(a1 + 200);
    goto LABEL_47;
  }
  if ((*(_BYTE *)(a2 + 48) & 1) != 0)
    goto LABEL_46;
LABEL_95:
  v27 = 0;
LABEL_47:
  v28 = v98;
  if (!v98)
    goto LABEL_42;
  v29 = xmlMalloc(0xC8uLL);
  if (!v29)
  {
    if (a1)
      ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating element");
    goto LABEL_42;
  }
  v30 = (uint64_t)v29;
  *v29 = 0u;
  v29[1] = 0u;
  *((_QWORD *)v29 + 24) = 0;
  v29[10] = 0u;
  v29[11] = 0u;
  v29[8] = 0u;
  v29[9] = 0u;
  v29[6] = 0u;
  v29[7] = 0u;
  v29[4] = 0u;
  v29[5] = 0u;
  v29[2] = 0u;
  v29[3] = 0u;
  *(_DWORD *)v29 = 14;
  *((_QWORD *)v29 + 2) = v28;
  *((_QWORD *)v29 + 12) = v27;
  *((_QWORD *)v29 + 9) = a3;
  v31 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
  v97 = v17;
  if (a5)
  {
    v32 = (_QWORD **)(v31 + 64);
    v33 = 5;
  }
  else
  {
    v32 = (_QWORD **)(v31 + 72);
    v33 = 10;
  }
  xmlSchemaAddItemSize(v32, v33, v30);
  xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, v30);
  for (i = (uint64_t)a3->properties; i; i = *(_QWORD *)(i + 48))
  {
    v41 = *(_QWORD *)(i + 72);
    if (v41)
    {
      if (xmlStrEqual(*(const xmlChar **)(v41 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_69;
    }
    else
    {
      if (xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"name")
        || xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"type")
        || xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"id")
        || xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"default")
        || xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"fixed")
        || xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"block")
        || xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"nillable"))
      {
        continue;
      }
      v42 = *(const xmlChar **)(i + 16);
      if (a5)
      {
        if (xmlStrEqual(v42, (const xmlChar *)"final")
          || xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"abstract"))
        {
          continue;
        }
        v43 = *(const xmlChar **)(i + 16);
        v44 = "substitutionGroup";
      }
      else
      {
        if (xmlStrEqual(v42, (const xmlChar *)"maxOccurs")
          || xmlStrEqual(*(const xmlChar **)(i + 16), (const xmlChar *)"minOccurs"))
        {
          continue;
        }
        v43 = *(const xmlChar **)(i + 16);
        v44 = "form";
      }
      if (!xmlStrEqual(v43, (const xmlChar *)v44))
LABEL_69:
        xmlSchemaPIllegalAttrErr((_DWORD *)a1, i);
    }
  }
  if (a5)
  {
    v45 = (_DWORD *)(v30 + 88);
    *(_DWORD *)(v30 + 88) |= 0x22u;
    xmlSchemaPValAttrQName(a1, a2, (uint64_t)a3, (xmlChar *)"substitutionGroup", (const xmlChar **)(v30 + 128), (const xmlChar **)(v30 + 120));
    if (xmlGetBooleanProp(a1, a3, (xmlChar *)"abstract"))
      *v45 |= 0x10u;
    v46 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"final");
    if (v46)
    {
      v47 = (uint64_t)v46;
      v48 = (xmlChar *)xmlSchemaGetNodeContent(a1, v46);
      if (xmlSchemaPValAttrBlockFinal(v48, (int *)(v30 + 88), 0x8000, 0x10000, -1, -1, -1))
        xmlSchemaPSimpleTypeErr(a1, 3037, v47, 0, "(#all | List of (extension | restriction))", v48, 0, 0);
    }
    else
    {
      v49 = *(_DWORD *)(a2 + 48);
      if ((v49 & 4) != 0)
        *v45 |= 0x8000u;
      if ((v49 & 8) != 0)
        *v45 |= 0x10000u;
    }
  }
  v50 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"block");
  if (!v50)
  {
    v53 = *(_DWORD *)(a2 + 48);
    if ((v53 & 0x80) != 0)
    {
      *(_DWORD *)(v30 + 88) |= 0x1000u;
      if ((v53 & 0x40) == 0)
      {
LABEL_105:
        if ((v53 & 0x100) == 0)
          goto LABEL_107;
        goto LABEL_106;
      }
    }
    else if ((v53 & 0x40) == 0)
    {
      goto LABEL_105;
    }
    *(_DWORD *)(v30 + 88) |= 0x800u;
    if ((v53 & 0x100) == 0)
      goto LABEL_107;
LABEL_106:
    *(_DWORD *)(v30 + 88) |= 0x2000u;
    goto LABEL_107;
  }
  v51 = (uint64_t)v50;
  v52 = (xmlChar *)xmlSchemaGetNodeContent(a1, v50);
  if (xmlSchemaPValAttrBlockFinal(v52, (int *)(v30 + 88), 2048, 4096, 0x2000, -1, -1))
    xmlSchemaPSimpleTypeErr(a1, 3037, v51, 0, "(#all | List of (extension | restriction | substitution))", v52, 0, 0);
LABEL_107:
  if (xmlGetBooleanProp(a1, a3, (xmlChar *)"nillable"))
    *(_DWORD *)(v30 + 88) |= 1u;
  v54 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"type");
  if (v54)
  {
    v55 = (uint64_t)v54;
    v56 = (xmlChar *)xmlSchemaGetNodeContent(a1, v54);
    xmlSchemaPValAttrNodeQNameValue(a1, a2, v55, v56, (const xmlChar **)(v30 + 112), (const xmlChar **)(v30 + 104));
    xmlSchemaCheckReference(a1, (uint64_t)a3, v55, *(xmlChar **)(v30 + 112));
  }
  *(_QWORD *)(v30 + 144) = xmlSchemaGetProp(a1, a3, (xmlChar *)"default");
  v57 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"fixed");
  if (v57)
  {
    v58 = (uint64_t)v57;
    v59 = xmlSchemaGetNodeContent(a1, v57);
    if (*(_QWORD *)(v30 + 144))
    {
      xmlSchemaPMutualExclAttrErr(a1, 3038, 0, v58);
    }
    else
    {
      *(_DWORD *)(v30 + 88) |= 8u;
      *(_QWORD *)(v30 + 144) = v59;
    }
  }
  if (!children)
    goto LABEL_220;
  if (children->ns)
  {
    if (xmlStrEqual(children->name, (const xmlChar *)"complexType")
      && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      if (*(_QWORD *)(v30 + 104))
      {
        v60 = "The attribute 'type' and the <complexType> child are mutually exclusive";
LABEL_126:
        xmlSchemaPContentErr(a1, 3041, (uint64_t)a3, (uint64_t)children, (xmlChar *)v60, 0);
        goto LABEL_133;
      }
      v61 = xmlSchemaParseComplexType(a1, a2, (int)children);
      goto LABEL_132;
    }
    if (children->ns
      && xmlStrEqual(children->name, (const xmlChar *)"simpleType")
      && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      if (*(_QWORD *)(v30 + 104))
      {
        v60 = "The attribute 'type' and the <simpleType> child are mutually exclusive";
        goto LABEL_126;
      }
      v61 = xmlSchemaParseSimpleType(a1, a2, children, 0);
LABEL_132:
      *(_QWORD *)(v30 + 56) = v61;
LABEL_133:
      children = children->next;
      if (!children)
        goto LABEL_220;
    }
  }
  v62 = 0;
  while (children->ns
       && (xmlStrEqual(children->name, (const xmlChar *)"unique")
        && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
        || children->ns
        && (xmlStrEqual(children->name, (const xmlChar *)"key")
         && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
         || children->ns
         && xmlStrEqual(children->name, (const xmlChar *)"keyref")
         && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))))
  {
    v63 = v62;
    if (!children->ns)
      goto LABEL_182;
    if (xmlStrEqual(children->name, (const xmlChar *)"unique")
      && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      v91 = 0;
      v64 = 22;
    }
    else
    {
      v63 = v62;
      if (!children->ns)
        goto LABEL_182;
      if (!xmlStrEqual(children->name, (const xmlChar *)"key")
        || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v63 = v62;
        if (!children->ns)
          goto LABEL_182;
        v63 = v62;
        if (!xmlStrEqual(children->name, (const xmlChar *)"keyref"))
          goto LABEL_182;
        v63 = v62;
        if (!xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          goto LABEL_182;
        v88 = 24;
        v91 = 1;
        goto LABEL_153;
      }
      v91 = 0;
      v64 = 23;
    }
    v88 = v64;
LABEL_153:
    v89 = *(_QWORD *)(v30 + 96);
    str2 = 0;
    v65 = (uint64_t)children->properties;
    if (v65)
    {
      while (1)
      {
        v66 = *(_QWORD *)(v65 + 72);
        if (!v66)
          break;
        if (xmlStrEqual(*(const xmlChar **)(v66 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          goto LABEL_156;
LABEL_159:
        v65 = *(_QWORD *)(v65 + 48);
        if (!v65)
          goto LABEL_164;
      }
      if (xmlStrEqual(*(const xmlChar **)(v65 + 16), (const xmlChar *)"id")
        || xmlStrEqual(*(const xmlChar **)(v65 + 16), (const xmlChar *)"name")
        || v91 && xmlStrEqual(*(const xmlChar **)(v65 + 16), (const xmlChar *)"refer"))
      {
        goto LABEL_159;
      }
LABEL_156:
      xmlSchemaPIllegalAttrErr((_DWORD *)a1, v65);
      goto LABEL_159;
    }
LABEL_164:
    v67 = xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"name");
    if (!v67)
    {
      xmlSchemaPMissingAttrErr(a1, (uint64_t)children, (xmlChar *)"name");
LABEL_181:
      v63 = 0;
      goto LABEL_182;
    }
    v68 = (xmlNode *)v67;
    v69 = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
    if (xmlSchemaPValAttrNode((_DWORD *)a1, v68, v69, &str2))
      goto LABEL_181;
    v70 = str2;
    if (!str2)
      goto LABEL_181;
    v71 = xmlMalloc(0x50uLL);
    if (!v71)
    {
      if (a1)
        ++*(_DWORD *)(a1 + 36);
      __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating an identity-constraint definition");
      v63 = 0;
      goto LABEL_182;
    }
    v63 = (uint64_t)v71;
    *v71 = 0u;
    v71[1] = 0u;
    v71[3] = 0u;
    v71[4] = 0u;
    v71[2] = 0u;
    *((_QWORD *)v71 + 4) = v70;
    *((_QWORD *)v71 + 5) = v89;
    *(_DWORD *)v71 = v88;
    *((_QWORD *)v71 + 3) = children;
    xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 64), 5, (uint64_t)v71);
    if (v91)
      xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, v63);
    v72 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"id");
    if (v72)
      xmlSchemaPValAttrNodeID(a1, v72);
    if (v91)
    {
      v73 = xmlSchemaGetPropNode((uint64_t)children, (xmlChar *)"refer");
      if (v73)
      {
        v74 = (xmlNode *)v73;
        v75 = xmlSchemaNewQNameRef(a1, 23, 0, 0);
        *(_QWORD *)(v63 + 72) = v75;
        if (!v75)
          goto LABEL_181;
        v90 = (const xmlChar **)(v75 + 3);
        v92 = (const xmlChar **)(v75 + 4);
        v76 = (xmlChar *)xmlSchemaGetNodeContent(a1, v74);
        xmlSchemaPValAttrNodeQNameValue(a1, a2, (uint64_t)v74, v76, v92, v90);
        xmlSchemaCheckReference(a1, (uint64_t)children, (uint64_t)v74, *(xmlChar **)(*(_QWORD *)(v63 + 72) + 32));
      }
      else
      {
        xmlSchemaPMissingAttrErr(a1, (uint64_t)children, (xmlChar *)"refer");
      }
    }
    v78 = (uint64_t)children->children;
    if (v78)
    {
      if (!*(_QWORD *)(v78 + 72))
        goto LABEL_197;
      v93 = (uint64_t)children->children;
      if (!xmlStrEqual(*(const xmlChar **)(v78 + 16), (const xmlChar *)"annotation")
        || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v93 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v78 = v93;
LABEL_197:
        if (!*(_QWORD *)(v78 + 72))
          goto LABEL_216;
        v79 = v78;
        if (!xmlStrEqual(*(const xmlChar **)(v78 + 16), (const xmlChar *)"selector")
          || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v79 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          goto LABEL_215;
        }
        *(_QWORD *)(v63 + 48) = xmlSchemaParseIDCSelectorAndField((_DWORD *)a1, v63, v79, 0);
        v80 = *(_QWORD *)(v79 + 48);
        if (v80)
        {
          v79 = *(_QWORD *)(v79 + 48);
          if (*(_QWORD *)(v80 + 72)
            && xmlStrEqual(*(const xmlChar **)(v80 + 16), (const xmlChar *)"field")
            && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v79 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            v78 = v79;
            v94 = 0;
            while (1)
            {
              v81 = v78;
              v82 = xmlSchemaParseIDCSelectorAndField((_DWORD *)a1, v63, v78, 1);
              if (v82)
              {
                v83 = *(_DWORD *)(v63 + 64);
                *((_DWORD *)v82 + 4) = v83;
                *(_DWORD *)(v63 + 64) = v83 + 1;
                v84 = (_QWORD *)(v63 + 56);
                if (v94)
                  v84 = v94;
                *v84 = v82;
                v94 = v82;
              }
              v78 = *(_QWORD *)(v81 + 48);
              if (!v78)
                goto LABEL_182;
              if (!*(_QWORD *)(v78 + 72))
                goto LABEL_216;
              v79 = *(_QWORD *)(v81 + 48);
              if (!xmlStrEqual(*(const xmlChar **)(v78 + 16), (const xmlChar *)"field"))
                goto LABEL_215;
              v85 = xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v79 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema");
              v78 = v79;
              if (!v85)
                goto LABEL_216;
            }
          }
          xmlSchemaPContentErr(a1, 3033, (uint64_t)children, v79, 0, (xmlChar *)"(annotation?, (selector, field+))");
LABEL_215:
          v78 = v79;
LABEL_216:
          v86 = a1;
          v87 = (uint64_t)children;
        }
        else
        {
          v86 = a1;
          v87 = (uint64_t)children;
          v78 = 0;
        }
        xmlSchemaPContentErr(v86, 3033, v87, v78, 0, (xmlChar *)"(annotation?, (selector, field+))");
        goto LABEL_182;
      }
      *(_QWORD *)(v63 + 8) = xmlSchemaParseAnnotation((_DWORD *)a1, v93, 1);
      v78 = *(_QWORD *)(v93 + 48);
      if (v78)
        goto LABEL_197;
    }
    xmlSchemaPContentErr(a1, 3034, (uint64_t)children, 0, (xmlChar *)"A child element is missing", (xmlChar *)"(annotation?, (selector, field+))");
LABEL_182:
    v77 = (uint64_t *)(v62 + 16);
    if (!v62)
      v77 = (uint64_t *)(v30 + 192);
    *v77 = v63;
    children = children->next;
    v62 = v63;
    if (!children)
      goto LABEL_220;
  }
  xmlSchemaPContentErr(a1, 3033, (uint64_t)a3, (uint64_t)children, 0, (xmlChar *)"(annotation?, ((simpleType | complexType)?, (unique | key | keyref)*))");
LABEL_220:
  *(_QWORD *)(v30 + 48) = v97;
  if (a5)
    return (_QWORD *)v30;
  v25[3] = v30;
  return v25;
}

void xmlSchemaParseAttributeGroupDefinition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t PropNode;
  xmlNode *v7;
  xmlSchemaType *BuiltInType;
  xmlChar *v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  xmlNode *v16;
  uint64_t v17;
  xmlNode *v18;
  int v19;
  xmlNode *v20;
  xmlChar *v21;

  v19 = 0;
  PropNode = xmlSchemaGetPropNode(a3, (xmlChar *)"name");
  if (!PropNode)
  {
    xmlSchemaPMissingAttrErr(a1, a3, (xmlChar *)"name");
    return;
  }
  v7 = (xmlNode *)PropNode;
  v21 = 0;
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (!xmlSchemaPValAttrNode((_DWORD *)a1, v7, BuiltInType, &v21))
  {
    v9 = v21;
    if (v21)
    {
      v10 = *(_QWORD *)(a1 + 200);
      v11 = xmlMalloc(0x78uLL);
      if (!v11)
      {
        ++*(_DWORD *)(a1 + 36);
        __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating attribute group");
        return;
      }
      v12 = (uint64_t)v11;
      *v11 = 0u;
      v11[1] = 0u;
      v11[5] = 0u;
      v11[6] = 0u;
      v11[3] = 0u;
      v11[4] = 0u;
      v11[2] = 0u;
      *(_DWORD *)v11 = 16;
      *((_QWORD *)v11 + 2) = v9;
      *((_QWORD *)v11 + 13) = v10;
      *((_QWORD *)v11 + 14) = 0;
      *((_QWORD *)v11 + 8) = a3;
      *((_DWORD *)v11 + 18) |= 2u;
      if (*(_DWORD *)(a1 + 188))
      {
        v13 = xmlSchemaAddRedef(a1, *(_QWORD *)(a1 + 208), (uint64_t)v11, (uint64_t)v9, v10);
        *(_QWORD *)(a1 + 216) = v13;
        if (!v13)
        {
          xmlFree((void *)v12);
          return;
        }
        *(_DWORD *)(a1 + 224) = 0;
      }
      xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 64), 5, v12);
      xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, v12);
      v14 = *(_QWORD *)(a3 + 88);
      if (v14)
      {
        while (1)
        {
          v15 = *(_QWORD *)(v14 + 72);
          if (!v15)
            break;
          if (xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            goto LABEL_13;
LABEL_16:
          v14 = *(_QWORD *)(v14 + 48);
          if (!v14)
            goto LABEL_17;
        }
        if (xmlStrEqual(*(const xmlChar **)(v14 + 16), (const xmlChar *)"name")
          || xmlStrEqual(*(const xmlChar **)(v14 + 16), (const xmlChar *)"id"))
        {
          goto LABEL_16;
        }
LABEL_13:
        xmlSchemaPIllegalAttrErr((_DWORD *)a1, v14);
        goto LABEL_16;
      }
LABEL_17:
      v16 = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
      if (v16)
        xmlSchemaPValAttrNodeID(a1, v16);
      v17 = *(_QWORD *)(a3 + 24);
      v20 = (xmlNode *)v17;
      if (v17
        && *(_QWORD *)(v17 + 72)
        && xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"annotation")
        && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v17 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        *(_QWORD *)(v12 + 48) = xmlSchemaParseAnnotation((_DWORD *)a1, v17, 1);
        v20 = *(xmlNode **)(v17 + 48);
      }
      if (xmlSchemaParseLocalAttributes(a1, a2, (uint64_t *)&v20, (void *****)(v12 + 112), 16, &v19) != -1)
      {
        if (v19)
          *(_DWORD *)(v12 + 72) |= 0x10u;
        v18 = v20;
        if (v20)
        {
          if (!v20->ns
            || !xmlStrEqual(v20->name, (const xmlChar *)"anyAttribute")
            || !xmlStrEqual(v18->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
            || (*(_QWORD *)(v12 + 80) = xmlSchemaParseAnyAttribute((_DWORD *)a1, a2, v18), (v18 = v18->next) != 0))
          {
            xmlSchemaPContentErr(a1, 3033, a3, (uint64_t)v18, 0, (xmlChar *)"(annotation?, ((attribute | attributeGroup)*, anyAttribute?))");
          }
        }
      }
    }
  }
}

void xmlSchemaParseModelGroupDefinition(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t PropNode;
  xmlNode *v7;
  xmlSchemaType *BuiltInType;
  xmlChar *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  xmlNode *v16;
  uint64_t v17;
  int v18;
  xmlChar *v19;

  PropNode = xmlSchemaGetPropNode(a3, (xmlChar *)"name");
  if (!PropNode)
  {
    xmlSchemaPMissingAttrErr(a1, a3, (xmlChar *)"name");
    return;
  }
  v7 = (xmlNode *)PropNode;
  v19 = 0;
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (xmlSchemaPValAttrNode((_DWORD *)a1, v7, BuiltInType, &v19))
    return;
  v9 = v19;
  if (!v19)
    return;
  v10 = *(_QWORD *)(a1 + 200);
  v11 = xmlMalloc(0x40uLL);
  if (!v11)
  {
    ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"adding group");
    return;
  }
  v12 = v11;
  *((_OWORD *)v11 + 2) = 0u;
  *((_OWORD *)v11 + 3) = 0u;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  *(_DWORD *)v11 = 17;
  v11[5] = v10;
  v11[6] = a3;
  v11[4] = v9;
  if (*(_DWORD *)(a1 + 188))
  {
    v13 = xmlSchemaAddRedef(a1, *(_QWORD *)(a1 + 208), (uint64_t)v11, (uint64_t)v9, v10);
    *(_QWORD *)(a1 + 216) = v13;
    if (!v13)
    {
      xmlFree(v12);
      return;
    }
    *(_DWORD *)(a1 + 224) = 0;
  }
  xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 64), 5, (uint64_t)v12);
  xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, (uint64_t)v12);
  v14 = *(_QWORD *)(a3 + 88);
  if (v14)
  {
    while (1)
    {
      v15 = *(_QWORD *)(v14 + 72);
      if (!v15)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v15 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_13;
LABEL_16:
      v14 = *(_QWORD *)(v14 + 48);
      if (!v14)
        goto LABEL_17;
    }
    if (xmlStrEqual(*(const xmlChar **)(v14 + 16), (const xmlChar *)"name")
      || xmlStrEqual(*(const xmlChar **)(v14 + 16), (const xmlChar *)"id"))
    {
      goto LABEL_16;
    }
LABEL_13:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v14);
    goto LABEL_16;
  }
LABEL_17:
  v16 = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
  if (v16)
    xmlSchemaPValAttrNodeID(a1, v16);
  v17 = *(_QWORD *)(a3 + 24);
  if (!v17)
    return;
  if (*(_QWORD *)(v17 + 72))
  {
    if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"annotation"))
    {
      if (xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v17 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v12[1] = xmlSchemaParseAnnotation((_DWORD *)a1, v17, 1);
        v17 = *(_QWORD *)(v17 + 48);
        if (!v17)
          return;
      }
    }
  }
  if (!*(_QWORD *)(v17 + 72))
    goto LABEL_39;
  if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"all")
    && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v17 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    v18 = 8;
    goto LABEL_38;
  }
  if (!*(_QWORD *)(v17 + 72))
  {
LABEL_39:
    xmlSchemaPContentErr(a1, 3033, a3, v17, 0, (xmlChar *)"(annotation?, (all | choice | sequence)?)");
    return;
  }
  if (xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"choice")
    && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v17 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    v18 = 7;
  }
  else
  {
    if (!*(_QWORD *)(v17 + 72)
      || !xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"sequence")
      || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v17 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      goto LABEL_39;
    }
    v18 = 6;
  }
LABEL_38:
  v12[3] = xmlSchemaParseModelGroup(a1, a2, v17, v18, 0);
  v17 = *(_QWORD *)(v17 + 48);
  if (v17)
    goto LABEL_39;
}

void xmlSchemaPContentErr(uint64_t a1, int a2, uint64_t a3, uint64_t a4, xmlChar *a5, xmlChar *a6)
{
  const xmlChar *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  xmlChar *v18;
  uint64_t v19;

  v19 = 0;
  xmlSchemaFormatItemForReport((xmlChar **)&v19, 0, a3);
  if (a5)
  {
    v12 = (const xmlChar *)v19;
    v13 = "%s: %s.\n";
    v14 = a1;
    v15 = a3;
    v16 = a4;
    v17 = a2;
    v18 = a5;
  }
  else
  {
    v12 = (const xmlChar *)v19;
    if (a6)
    {
      v13 = "%s: The content is not valid. Expected is %s.\n";
      v14 = a1;
      v15 = a3;
      v16 = a4;
      v17 = a2;
      v18 = a6;
    }
    else
    {
      v13 = "%s: The content is not valid.\n";
      v14 = a1;
      v15 = a3;
      v16 = a4;
      v17 = a2;
      v18 = 0;
    }
  }
  xmlSchemaPErr2(v14, v15, v16, v17, v13, v12, v18);
  if (v19)
    xmlFree((void *)v19);
}

void xmlSchemaPIllegalAttrErr(_DWORD *a1, uint64_t a2)
{
  const xmlChar *v4;
  uint64_t v5;
  xmlChar *v6;
  xmlChar *v7;
  xmlChar *v8;

  v7 = 0;
  v8 = 0;
  xmlSchemaFormatNodeForError((void **)&v8, (uint64_t)a1, *(_QWORD *)(a2 + 40));
  v4 = v8;
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(xmlChar **)(a2 + 16);
  if (v5)
  {
    v6 = xmlSchemaFormatQName((void **)&v7, *(const xmlChar **)(v5 + 16), *(xmlChar **)(a2 + 16));
  }
  else if (!v6)
  {
    v6 = xmlStrcat(0, (const xmlChar *)"(NULL)");
    v7 = v6;
  }
  xmlSchemaErr4Line(a1, 2, 3035, a2, 0, "%sThe attribute '%s' is not allowed.\n", v4, v6, 0, 0);
  if (v8)
  {
    xmlFree(v8);
    v8 = 0;
  }
  if (v7)
    xmlFree(v7);
}

uint64_t xmlSchemaPValAttr(_DWORD *a1, uint64_t a2, xmlChar *str2, xmlSchemaType *a4, xmlChar **a5)
{
  xmlNode *PropNode;
  uint64_t result;

  if (!a4)
  {
    if (a5)
      *a5 = 0;
    return 0xFFFFFFFFLL;
  }
  if (a4->type != XML_SCHEMA_TYPE_BASIC)
  {
    if (a5)
      *a5 = 0;
    xmlSchemaPErr((uint64_t)a1, a2, 3069, "Internal error: xmlSchemaPValAttr, the given type '%s' is not a built-in type.\n", a4->name, 0);
    return 0xFFFFFFFFLL;
  }
  PropNode = (xmlNode *)xmlSchemaGetPropNode(a2, str2);
  if (PropNode)
    return xmlSchemaPValAttrNode(a1, PropNode, a4, a5);
  result = 0;
  if (a5)
    *a5 = 0;
  return result;
}

xmlChar *xmlSchemaBuildAbsoluteURI(xmlDict *a1, xmlChar *a2, xmlNode *cur)
{
  xmlChar *v3;
  xmlChar *Base;
  xmlChar *v7;
  const xmlChar *v8;

  v3 = a2;
  if (a2 && cur)
  {
    Base = xmlNodeGetBase(cur->doc, cur);
    if (Base)
    {
      v7 = Base;
      v3 = xmlBuildURI(v3, Base);
      xmlFree(v7);
      if (v3)
      {
LABEL_5:
        v8 = xmlDictLookup(a1, v3, -1);
        xmlFree(v3);
        return (xmlChar *)v8;
      }
    }
    else
    {
      v3 = xmlBuildURI(v3, cur->doc->URL);
      if (v3)
        goto LABEL_5;
    }
  }
  return v3;
}

uint64_t xmlSchemaParseNewDoc(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char *v5;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v3 = a3;
  if (a3)
  {
    if (*(_DWORD *)(a3 + 52))
    {
      v5 = "reparsing a schema doc";
LABEL_4:
      xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaParseNewDoc", (const xmlChar *)v5, 0);
      return 0xFFFFFFFFLL;
    }
    if (!*(_QWORD *)(a3 + 32))
    {
      v5 = "parsing a schema doc, but there's no doc";
      goto LABEL_4;
    }
    if (!*(_QWORD *)(a1 + 48))
    {
      v5 = "no constructor";
      goto LABEL_4;
    }
    v8 = xmlSchemaNewParserCtxtUseDict(*(const xmlChar **)(a3 + 8), *(xmlDict **)(a1 + 152));
    if (!v8)
      return 0xFFFFFFFFLL;
    v9 = v8;
    v8[6] = *(_QWORD *)(a1 + 48);
    v8[8] = a2;
    v11 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v8;
    do
    {
      v13[2] = v11;
      v13[3] = v10;
      v13[1] = v12;
      v14 = (_QWORD *)v13[22];
      if (!v14)
        break;
      v14[2] = v11;
      v14[3] = v10;
      v14[1] = v12;
      v13 = (_QWORD *)v14[20];
    }
    while (v13);
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(_QWORD *)(a1 + 8);
    v17 = v8;
    do
    {
      v17[5] = v15;
      v17[1] = v16;
      v18 = (_QWORD *)v17[22];
      if (!v18)
        break;
      v18[3] = 0;
      v18[4] = v15;
      v18[1] = v16;
      v18[2] = 0;
      v17 = (_QWORD *)v18[20];
    }
    while (v17);
    *((_DWORD *)v8 + 18) = *(_DWORD *)(a1 + 72);
    v19 = xmlSchemaParseNewDocWithContext(v8, a2, v3);
    v3 = v19;
    if ((_DWORD)v19)
      *(_DWORD *)(a1 + 32) = v19;
    *(_DWORD *)(a1 + 36) += *((_DWORD *)v9 + 9);
    *(_DWORD *)(a1 + 72) = *((_DWORD *)v9 + 18);
    v9[6] = 0;
    xmlSchemaFreeParserCtxt((xmlSchemaParserCtxtPtr)v9);
  }
  return v3;
}

void xmlSchemaPCustomErrExt(uint64_t a1, int a2, _DWORD *a3, uint64_t a4, const xmlChar *a5)
{
  uint64_t ComponentNode;
  xmlChar *v10;
  xmlChar *v11;
  xmlChar *v12;
  xmlChar *v13;

  ComponentNode = a4;
  v13 = 0;
  xmlSchemaFormatItemForReport(&v13, (uint64_t)a3, a4);
  v10 = xmlStrdup((const xmlChar *)"%s: ");
  v11 = xmlStrcat(v10, a5);
  v12 = xmlStrcat(v11, (const xmlChar *)".\n");
  if (a3 && !ComponentNode)
    ComponentNode = xmlSchemaGetComponentNode(a3);
  xmlSchemaPErrExt(a1, ComponentNode, a2, (const char *)v12, (char)v13);
  if (v13)
  {
    xmlFree(v13);
    v13 = 0;
  }
  if (v12)
    xmlFree(v12);
}

_QWORD *xmlSchemaNewParserCtxtUseDict(const xmlChar *a1, xmlDict *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = xmlSchemaParserCtxtCreate();
  v5 = v4;
  if (v4)
  {
    v4[19] = a2;
    xmlDictReference(a2);
    if (a1)
      v5[10] = xmlDictLookup(a2, a1, -1);
  }
  return v5;
}

uint64_t xmlSchemaParseIncludeOrRedefine(uint64_t a1, uint64_t a2, const xmlNode *a3, unsigned int a4)
{
  uint64_t properties;
  uint64_t v9;
  xmlNode *PropNode;
  uint64_t v11;
  xmlNode *v12;
  xmlSchemaType *BuiltInType;
  xmlChar *Base;
  xmlChar *v15;
  int v16;
  xmlChar *v17;
  const char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const xmlChar *v22;
  const xmlChar *v23;
  char v24;
  const xmlChar **v25;
  int v26;
  xmlNode *children;
  char *v28;
  const xmlChar **v30;
  xmlChar *URI;

  v30 = 0;
  URI = 0;
  properties = (uint64_t)a3->properties;
  if (properties)
  {
    while (1)
    {
      v9 = *(_QWORD *)(properties + 72);
      if (!v9)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_4;
LABEL_7:
      properties = *(_QWORD *)(properties + 48);
      if (!properties)
        goto LABEL_8;
    }
    if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"schemaLocation"))
    {
      goto LABEL_7;
    }
LABEL_4:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
    goto LABEL_7;
  }
LABEL_8:
  PropNode = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"id");
  if (PropNode)
    xmlSchemaPValAttrNodeID(a1, PropNode);
  v11 = xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"schemaLocation");
  if (!v11)
  {
    xmlSchemaPMissingAttrErr(a1, (uint64_t)a3, (xmlChar *)"schemaLocation");
    goto LABEL_18;
  }
  v12 = (xmlNode *)v11;
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
  if (!xmlSchemaPValAttrNode((_DWORD *)a1, v12, BuiltInType, &URI))
  {
    Base = xmlNodeGetBase(a3->doc, a3);
    if (Base)
    {
      v15 = xmlBuildURI(URI, Base);
      xmlFree(Base);
      if (v15)
      {
LABEL_14:
        URI = (xmlChar *)xmlDictLookup(*(xmlDictPtr *)(a1 + 152), v15, -1);
        xmlFree(v15);
        v16 = xmlStrEqual(URI, *(const xmlChar **)(a1 + 80));
        v17 = URI;
        if (!v16)
          goto LABEL_20;
        if (a4 == 3)
        {
          v18 = "The schema document '%s' cannot redefine itself.";
          v19 = a1;
          v20 = 3081;
        }
        else
        {
          v18 = "The schema document '%s' cannot include itself.";
          v19 = a1;
          v20 = 3050;
        }
        xmlSchemaPCustomErrExt(v19, v20, 0, (uint64_t)a3, (const xmlChar *)v18);
        goto LABEL_18;
      }
    }
    else
    {
      v15 = xmlBuildURI(URI, a3->doc->URL);
      if (v15)
        goto LABEL_14;
    }
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaParseIncludeOrRedefine", (const xmlChar *)"could not build an URI from the schemaLocation", 0);
    return 0xFFFFFFFFLL;
  }
LABEL_18:
  v21 = *(unsigned int *)(a1 + 32);
  if ((_DWORD)v21)
    return v21;
  v17 = URI;
LABEL_20:
  v21 = xmlSchemaAddSchemaDoc(a1, a4, v17, 0, 0, 0, (uint64_t)a3, *(_QWORD *)(a1 + 200), 0, &v30);
  if ((_DWORD)v21)
    return v21;
  if (v30 && v30[4])
  {
    v22 = v30[2];
    v23 = *(const xmlChar **)(a1 + 200);
    if (v22)
    {
      if (!v23)
      {
        xmlSchemaCustomErr4((_DWORD *)a1, 3050, (uint64_t)a3, 0, (const xmlChar *)"The target namespace of the included/redefined schema '%s' has to be absent, since the including/redefining schema has no target namespace", URI, 0, 0, 0);
        return *(unsigned int *)(a1 + 32);
      }
      if (!xmlStrEqual(v22, v23))
      {
        xmlSchemaPCustomErrExt(a1, 3050, 0, (uint64_t)a3, (const xmlChar *)"The target namespace '%s' of the included/redefined schema '%s' differs from '%s' of the including/redefining schema");
        return *(unsigned int *)(a1 + 32);
      }
    }
    else if (v23)
    {
      v21 = 0;
      v24 = 0;
      v30[3] = v23;
      goto LABEL_35;
    }
    v21 = 0;
  }
  else if (a4 == 2)
  {
    v21 = 3050;
    xmlSchemaCustomErr4((_DWORD *)a1, 3050, (uint64_t)a3, 0, (const xmlChar *)"Failed to load the document '%s' for inclusion", URI, 0, 0, 0);
  }
  else
  {
    v21 = 3081;
    xmlSchemaCustomErr4((_DWORD *)a1, 3081, (uint64_t)a3, 0, (const xmlChar *)"Failed to load the document '%s' for redefinition", URI, 0, 0, 0);
  }
  v24 = 1;
LABEL_35:
  v25 = v30;
  if (v30 && !*((_DWORD *)v30 + 13) && v30[4])
  {
    if ((v24 & 1) != 0 || (v26 = *(_DWORD *)(a2 + 48), (v26 & 0x200) != 0))
    {
      xmlSchemaParseNewDoc(a1, a2, (uint64_t)v30);
    }
    else
    {
      *(_DWORD *)(a2 + 48) = v26 | 0x200;
      xmlSchemaParseNewDoc(a1, a2, (uint64_t)v25);
      *(_DWORD *)(a2 + 48) ^= 0x200u;
    }
  }
  children = a3->children;
  if (a4 == 3)
  {
    *(_QWORD *)(a1 + 208) = v30;
    *(_DWORD *)(a1 + 188) = 1;
    if (children)
    {
      while (children->ns
           && (xmlStrEqual(children->name, (const xmlChar *)"annotation")
            && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
            || children->ns
            && (xmlStrEqual(children->name, (const xmlChar *)"simpleType")
             && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
             || children->ns
             && (xmlStrEqual(children->name, (const xmlChar *)"complexType")
              && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
              || children->ns
              && (xmlStrEqual(children->name, (const xmlChar *)"group")
               && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
               || children->ns
               && xmlStrEqual(children->name, (const xmlChar *)"attributeGroup")
               && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))))))
      {
        if (children->ns
          && (!xmlStrEqual(children->name, (const xmlChar *)"annotation")
           || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          && children->ns)
        {
          if (xmlStrEqual(children->name, (const xmlChar *)"simpleType")
            && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            xmlSchemaParseSimpleType(a1, a2, children, 1);
          }
          else if (children->ns)
          {
            if (xmlStrEqual(children->name, (const xmlChar *)"complexType")
              && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              xmlSchemaParseComplexType(a1, a2, (uint64_t)children, 1);
            }
            else if (children->ns)
            {
              if (xmlStrEqual(children->name, (const xmlChar *)"group")
                && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                xmlSchemaParseModelGroupDefinition(a1, a2, (uint64_t)children);
              }
              else if (children->ns
                     && xmlStrEqual(children->name, (const xmlChar *)"attributeGroup")
                     && xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                xmlSchemaParseAttributeGroupDefinition(a1, a2, (uint64_t)children);
              }
            }
          }
        }
        children = children->next;
        if (!children)
          goto LABEL_82;
      }
      *(_QWORD *)(a1 + 208) = 0;
      *(_DWORD *)(a1 + 188) = 0;
      v28 = "(annotation | (simpleType | complexType | group | attributeGroup))*";
      goto LABEL_90;
    }
LABEL_82:
    *(_QWORD *)(a1 + 208) = 0;
    *(_DWORD *)(a1 + 188) = 0;
  }
  else if (children)
  {
    if (!children->ns
      || !xmlStrEqual(children->name, (const xmlChar *)"annotation")
      || !xmlStrEqual(children->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema")
      || (children = children->next) != 0)
    {
      v28 = "(annotation?)";
LABEL_90:
      v21 = 3033;
      xmlSchemaPContentErr(a1, 3033, (uint64_t)a3, (uint64_t)children, 0, (xmlChar *)v28);
    }
  }
  return v21;
}

void xmlSchemaPMissingAttrErr(uint64_t a1, uint64_t a2, xmlChar *a3)
{
  uint64_t v6;

  v6 = 0;
  xmlSchemaFormatItemForReport((xmlChar **)&v6, 0, a2);
  xmlSchemaPErr(a1, a2, 3036, "%s: The attribute '%s' is required but missing.\n", (const xmlChar *)v6, a3);
  if (v6)
    xmlFree((void *)v6);
}

void *xmlSchemaAddType(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  void *v7;
  _OWORD *v14;
  _QWORD *v15;
  _QWORD **v16;
  int v17;

  v7 = 0;
  if (a1 && a2)
  {
    v14 = xmlMalloc(0xE0uLL);
    v7 = v14;
    if (v14)
    {
      *v14 = 0u;
      v14[1] = 0u;
      v14[12] = 0u;
      v14[13] = 0u;
      v14[10] = 0u;
      v14[11] = 0u;
      v14[8] = 0u;
      v14[9] = 0u;
      v14[6] = 0u;
      v14[7] = 0u;
      v14[4] = 0u;
      v14[5] = 0u;
      v14[2] = 0u;
      v14[3] = 0u;
      *(_DWORD *)v14 = a3;
      *((_QWORD *)v14 + 2) = a4;
      *((_QWORD *)v14 + 26) = a5;
      *((_QWORD *)v14 + 9) = a6;
      if (a7)
      {
        if (*(_DWORD *)(a1 + 188))
        {
          v15 = xmlSchemaAddRedef(a1, *(_QWORD *)(a1 + 208), (uint64_t)v14, a4, a5);
          *(_QWORD *)(a1 + 216) = v15;
          if (!v15)
          {
            xmlFree(v7);
            return 0;
          }
          *(_DWORD *)(a1 + 224) = 0;
        }
        v16 = (_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 64);
        v17 = 5;
      }
      else
      {
        v16 = (_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 72);
        v17 = 10;
      }
      xmlSchemaAddItemSize(v16, v17, (uint64_t)v7);
      xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, (uint64_t)v7);
    }
    else
    {
      ++*(_DWORD *)(a1 + 36);
      __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating type");
    }
  }
  return v7;
}

uint64_t xmlSchemaPGetBoolNodeValue(uint64_t a1, xmlNode *cur)
{
  xmlChar *Content;
  uint64_t v5;
  xmlSchemaTypePtr BuiltInType;

  Content = xmlNodeGetContent(cur);
  if (!xmlStrEqual(Content, (const xmlChar *)"true"))
  {
    if (!xmlStrEqual(Content, (const xmlChar *)"false"))
    {
      if (xmlStrEqual(Content, (const xmlChar *)"1"))
        goto LABEL_2;
      if (!xmlStrEqual(Content, (const xmlChar *)"0"))
      {
        BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_BOOLEAN);
        xmlSchemaPSimpleTypeErr(a1, 1714, (uint64_t)cur, (uint64_t)BuiltInType, 0, Content, 0, 0);
      }
    }
    v5 = 0;
    if (!Content)
      return v5;
    goto LABEL_3;
  }
LABEL_2:
  v5 = 1;
  if (Content)
LABEL_3:
    xmlFree(Content);
  return v5;
}

_QWORD *xmlSchemaParseModelGroup(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  int MinOccurs;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  xmlNode *PropNode;
  xmlNode *v26;
  int *v27;
  int *v28;
  int *v29;
  int v30;
  int **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  _QWORD *v35;
  BOOL v36;
  int v37;
  _QWORD *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  xmlChar *v42;
  const xmlChar *v43;
  xmlChar *v44;
  uint64_t properties;
  uint64_t v46;
  xmlNode *v47;
  int MaxOccurs;
  _OWORD *v49;
  uint64_t children;
  uint64_t v51;
  uint64_t v52;
  xmlNode *v53;
  uint64_t v54;
  uint64_t *v55;
  _QWORD *v56;
  xmlChar *v57;
  char *v58;
  _QWORD *v60;
  _OWORD *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  int v65;
  void *v66;
  int v67;

  if (!a3)
    return 0;
  v10 = xmlSchemaAddModelGroup(a1, a2, a4, a3);
  if (!v10)
    return 0;
  v11 = v10;
  if (!a5)
  {
    v18 = *(_QWORD *)(a3 + 88);
    if (!v18)
    {
LABEL_14:
      v64 = 0x100000001;
      v20 = (_QWORD *)v11;
LABEL_25:
      PropNode = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
      if (PropNode)
        xmlSchemaPValAttrNodeID(a1, PropNode);
      v67 = 0;
      v26 = *(xmlNode **)(a3 + 24);
      v63 = v11;
      if (!v26)
        goto LABEL_143;
      if (v26->ns
        && xmlStrEqual(v26->name, (const xmlChar *)"annotation")
        && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        *(_QWORD *)(v11 + 8) = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)v26, 1);
        v26 = v26->next;
      }
      if (a4 == 8)
      {
        if (v26)
        {
          v27 = 0;
          v65 = 0;
          while (v26->ns
               && xmlStrEqual(v26->name, (const xmlChar *)"element")
               && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            v28 = (int *)xmlSchemaParseElement(a1, a2, v26, &v67, 0);
            if (v28)
            {
              v29 = v28;
              v30 = v65;
              if (v67)
                v30 = v65 + 1;
              v65 = v30;
              if (v28[8] >= 2)
              {
                xmlSchemaPCustomErrExt(a1, 3091, 0, (uint64_t)v26, (const xmlChar *)"Invalid value for minOccurs (must be 0 or 1)");
                v29[8] = 1;
              }
              if (v29[9] >= 2)
              {
                xmlSchemaPCustomErrExt(a1, 3091, 0, (uint64_t)v26, (const xmlChar *)"Invalid value for maxOccurs (must be 0 or 1)");
                v29[9] = 1;
              }
              v31 = (int **)(v27 + 4);
              if (!v27)
                v31 = (int **)(v63 + 24);
              *v31 = v29;
              v27 = v29;
            }
            v26 = v26->next;
            if (!v26)
              goto LABEL_147;
          }
          v58 = "(annotation?, (annotation?, element*)";
          goto LABEL_146;
        }
LABEL_143:
        v65 = 0;
        goto LABEL_147;
      }
      if (!v26)
        goto LABEL_143;
      v32 = 0;
      v33 = 0;
      v65 = 0;
      v34 = (uint64_t *)(v11 + 24);
      while (1)
      {
        if (!v26->ns
          || (!xmlStrEqual(v26->name, (const xmlChar *)"element")
           || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          && (!v26->ns
           || (!xmlStrEqual(v26->name, (const xmlChar *)"group")
            || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
           && (!v26->ns
            || (!xmlStrEqual(v26->name, (const xmlChar *)"any")
             || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            && (!v26->ns
             || (!xmlStrEqual(v26->name, (const xmlChar *)"choice")
              || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
             && (!v26->ns
              || !xmlStrEqual(v26->name, (const xmlChar *)"sequence")
              || !xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))))))
        {
          v58 = "(annotation?, (element | group | choice | sequence | any)*)";
LABEL_146:
          xmlSchemaPContentErr(a1, 3033, a3, (uint64_t)v26, 0, (xmlChar *)v58);
          goto LABEL_147;
        }
        if (v26->ns)
        {
          if (xmlStrEqual(v26->name, (const xmlChar *)"element")
            && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            v35 = xmlSchemaParseElement(a1, a2, v26, &v67, 0);
            v33 = (uint64_t)v35;
            if (v35)
              v36 = v67 == 0;
            else
              v36 = 1;
            v37 = v65;
            if (!v36)
              v37 = v65 + 1;
            v65 = v37;
            if (!v35)
              goto LABEL_126;
            goto LABEL_123;
          }
          if (v26->ns)
          {
            if (xmlStrEqual(v26->name, (const xmlChar *)"group")
              && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              v38 = xmlSchemaParseModelGroupDefRef((_DWORD *)a1, a2, (uint64_t)v26);
              v33 = (uint64_t)v38;
              v39 = v65;
              if (v38)
                v39 = v65 + 1;
              v65 = v39;
              if (*(_DWORD *)(a1 + 188))
              {
                v40 = *(_QWORD *)(a1 + 216);
                if (v40)
                {
                  if (v38 && **(_DWORD **)(v40 + 8) == 17)
                  {
                    v41 = v38[3];
                    if (!v41)
                      goto LABEL_123;
                    v42 = *(xmlChar **)(v41 + 24);
                    if (v42 != *(xmlChar **)(v40 + 32))
                      goto LABEL_123;
                    v43 = *(const xmlChar **)(v41 + 32);
                    if (v43 != *(const xmlChar **)(v40 + 40))
                      goto LABEL_123;
                    if (*(_DWORD *)(a1 + 224))
                    {
                      v66 = 0;
                      v44 = xmlSchemaFormatQName(&v66, v43, v42);
                      xmlSchemaCustomErr4((_DWORD *)a1, 3081, (uint64_t)v26, 0, (const xmlChar *)"The redefining model group definition '%s' must not contain more than one reference to the redefined definition", v44, 0, 0, 0);
                    }
                    else
                    {
                      if (*((_DWORD *)v38 + 8) == 1 && *((_DWORD *)v38 + 9) == 1)
                        goto LABEL_141;
                      v66 = 0;
                      v57 = xmlSchemaFormatQName(&v66, v43, v42);
                      xmlSchemaCustomErr4((_DWORD *)a1, 3081, (uint64_t)v26, 0, (const xmlChar *)"The redefining model group definition '%s' must not contain a reference to the redefined definition with a maxOccurs/minOccurs other than 1", v57, 0, 0, 0);
                    }
                    if (v66)
                      xmlFree(v66);
                    v33 = 0;
LABEL_141:
                    *(_QWORD *)(*(_QWORD *)(a1 + 216) + 16) = v33;
                    ++*(_DWORD *)(a1 + 224);
                    if (!v33)
                      goto LABEL_126;
LABEL_123:
                    v55 = (uint64_t *)(v32 + 16);
                    if (!v32)
                      v55 = v34;
                    *v55 = v33;
                    v32 = v33;
                    goto LABEL_126;
                  }
                }
              }
              goto LABEL_122;
            }
            if (v26->ns)
            {
              if (xmlStrEqual(v26->name, (const xmlChar *)"any")
                && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                properties = (uint64_t)v26->properties;
                if (properties)
                {
                  while (1)
                  {
                    v46 = *(_QWORD *)(properties + 72);
                    if (!v46)
                      break;
                    if (xmlStrEqual(*(const xmlChar **)(v46 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                      goto LABEL_97;
LABEL_103:
                    properties = *(_QWORD *)(properties + 48);
                    if (!properties)
                      goto LABEL_104;
                  }
                  if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
                    || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"minOccurs")
                    || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"maxOccurs")
                    || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"namespace")
                    || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"processContents"))
                  {
                    goto LABEL_103;
                  }
LABEL_97:
                  xmlSchemaPIllegalAttrErr((_DWORD *)a1, properties);
                  goto LABEL_103;
                }
LABEL_104:
                v47 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)v26, (xmlChar *)"id");
                if (v47)
                  xmlSchemaPValAttrNodeID(a1, v47);
                MaxOccurs = xmlGetMaxOccurs(a1, (uint64_t)v26, 0, 0x40000000, "(xs:nonNegativeInteger | unbounded)");
                HIDWORD(v62) = xmlGetMinOccurs(a1, (uint64_t)v26, -1, "xs:nonNegativeInteger");
                xmlSchemaPCheckParticleCorrect_2(a1, (uint64_t)v26, SHIDWORD(v62), MaxOccurs);
                v49 = xmlSchemaAddWildcard(a1, a2, 2, (uint64_t)v26);
                if (v49)
                {
                  LODWORD(v62) = MaxOccurs;
                  v61 = v49;
                  xmlSchemaParseWildcardNs(a1, (uint64_t)v49, v26);
                  children = (uint64_t)v26->children;
                  if (children)
                  {
                    if (*(_QWORD *)(children + 72)
                      && xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"annotation")
                      && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                    {
                      v60 = xmlSchemaParseAnnotation((_DWORD *)a1, children, 1);
                      children = *(_QWORD *)(children + 48);
                      if (!children)
                        goto LABEL_131;
                    }
                    else
                    {
                      v60 = 0;
                    }
                    xmlSchemaPContentErr(a1, 3033, (uint64_t)v26, children, 0, (xmlChar *)"(annotation?)");
                  }
                  else
                  {
                    v60 = 0;
                  }
LABEL_131:
                  if (v62)
                  {
                    v56 = xmlSchemaAddParticle(a1, (uint64_t)v26, SHIDWORD(v62), v62);
                    v33 = (uint64_t)v56;
                    if (v56)
                    {
                      v56[1] = v60;
                      v56[3] = v61;
                      goto LABEL_123;
                    }
                    goto LABEL_126;
                  }
                }
                v33 = 0;
                goto LABEL_126;
              }
              if (v26->ns)
              {
                if (xmlStrEqual(v26->name, (const xmlChar *)"choice")
                  && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                {
                  v51 = a1;
                  v52 = a2;
                  v53 = v26;
                  v54 = 7;
LABEL_121:
                  v33 = xmlSchemaParseModelGroup(v51, v52, v53, v54, 1);
                  goto LABEL_122;
                }
                if (v26->ns
                  && xmlStrEqual(v26->name, (const xmlChar *)"sequence")
                  && xmlStrEqual(v26->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                {
                  v51 = a1;
                  v52 = a2;
                  v53 = v26;
                  v54 = 6;
                  goto LABEL_121;
                }
              }
            }
          }
        }
LABEL_122:
        if (v33)
          goto LABEL_123;
LABEL_126:
        v26 = v26->next;
        if (!v26)
        {
LABEL_147:
          if (v64)
          {
            if (v65)
              xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, v63);
            return v20;
          }
          return 0;
        }
      }
    }
    while (1)
    {
      v19 = *(_QWORD *)(v18 + 72);
      if (!v19)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v19 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_9;
LABEL_10:
      v18 = *(_QWORD *)(v18 + 48);
      if (!v18)
        goto LABEL_14;
    }
    if (xmlStrEqual(*(const xmlChar **)(v18 + 16), (const xmlChar *)"id"))
      goto LABEL_10;
LABEL_9:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v18);
    goto LABEL_10;
  }
  if (a4 == 8)
  {
    MinOccurs = xmlGetMinOccurs(a1, a3, 1, "(0 | 1)");
    v13 = "1";
    v14 = a1;
    v15 = a3;
    v16 = 1;
    v17 = 1;
  }
  else
  {
    MinOccurs = xmlGetMinOccurs(a1, a3, -1, "xs:nonNegativeInteger");
    v13 = "(xs:nonNegativeInteger | unbounded)";
    v14 = a1;
    v15 = a3;
    v16 = 0;
    v17 = 0x40000000;
  }
  v21 = xmlGetMaxOccurs(v14, v15, v16, v17, v13);
  xmlSchemaPCheckParticleCorrect_2(a1, a3, MinOccurs, v21);
  v22 = xmlSchemaAddParticle(a1, a3, MinOccurs, v21);
  v20 = v22;
  if (v22)
  {
    v64 = __PAIR64__(MinOccurs, v21);
    v22[3] = v11;
    v23 = *(_QWORD *)(a3 + 88);
    if (v23)
    {
      while (1)
      {
        v24 = *(_QWORD *)(v23 + 72);
        if (!v24)
          break;
        if (xmlStrEqual(*(const xmlChar **)(v24 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          goto LABEL_20;
LABEL_24:
        v23 = *(_QWORD *)(v23 + 48);
        if (!v23)
          goto LABEL_25;
      }
      if (xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"id")
        || xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"maxOccurs")
        || xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"minOccurs"))
      {
        goto LABEL_24;
      }
LABEL_20:
      xmlSchemaPIllegalAttrErr((_DWORD *)a1, v23);
      goto LABEL_24;
    }
    goto LABEL_25;
  }
  return v20;
}

_QWORD *xmlSchemaParseModelGroupDefRef(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  xmlNode *PropNode;
  uint64_t v7;
  xmlChar *NodeContent;
  xmlChar *v9;
  int MinOccurs;
  int MaxOccurs;
  uint64_t v12;
  uint64_t v13;
  xmlNode *v14;
  _QWORD *result;
  uint64_t v16;
  uint64_t v17;
  xmlChar *str2;
  const xmlChar *v19;

  str2 = 0;
  v19 = 0;
  if (!a3)
    return 0;
  PropNode = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"ref");
  if (!PropNode)
  {
    xmlSchemaPMissingAttrErr((uint64_t)a1, a3, (xmlChar *)"ref");
    return 0;
  }
  v7 = (uint64_t)PropNode;
  NodeContent = (xmlChar *)xmlSchemaGetNodeContent((uint64_t)a1, PropNode);
  if (xmlSchemaPValAttrNodeQNameValue((uint64_t)a1, a2, v7, NodeContent, (const xmlChar **)&str2, &v19))
    return 0;
  v9 = str2;
  xmlSchemaCheckReference((uint64_t)a1, a3, v7, str2);
  MinOccurs = xmlGetMinOccurs((uint64_t)a1, a3, -1, "xs:nonNegativeInteger");
  MaxOccurs = xmlGetMaxOccurs((uint64_t)a1, a3, 0, 0x40000000, "(xs:nonNegativeInteger | unbounded)");
  v12 = *(_QWORD *)(a3 + 88);
  if (v12)
  {
    while (1)
    {
      v13 = *(_QWORD *)(v12 + 72);
      if (!v13)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v13 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_7;
LABEL_12:
      v12 = *(_QWORD *)(v12 + 48);
      if (!v12)
        goto LABEL_13;
    }
    if (xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"ref")
      || xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"minOccurs")
      || xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"maxOccurs"))
    {
      goto LABEL_12;
    }
LABEL_7:
    xmlSchemaPIllegalAttrErr(a1, v12);
    goto LABEL_12;
  }
LABEL_13:
  v14 = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
  if (v14)
    xmlSchemaPValAttrNodeID((uint64_t)a1, v14);
  result = xmlSchemaAddParticle((uint64_t)a1, a3, MinOccurs, MaxOccurs);
  if (result)
  {
    v16 = (uint64_t)result;
    result[3] = xmlSchemaNewQNameRef((uint64_t)a1, 17, (uint64_t)v19, (uint64_t)v9);
    xmlSchemaPCheckParticleCorrect_2((uint64_t)a1, a3, MinOccurs, MaxOccurs);
    v17 = *(_QWORD *)(a3 + 24);
    if (v17)
    {
      if (!*(_QWORD *)(v17 + 72)
        || !xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"annotation")
        || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v17 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (*(_QWORD *)(v16 + 8) = xmlSchemaParseAnnotation(a1, v17, 1), (v17 = *(_QWORD *)(v17 + 48)) != 0))
      {
        xmlSchemaPContentErr((uint64_t)a1, 3033, a3, v17, 0, (xmlChar *)"(annotation?)");
      }
    }
    if (MinOccurs | MaxOccurs)
      return (_QWORD *)v16;
    else
      return 0;
  }
  return result;
}

uint64_t xmlSchemaParseLocalAttributes(uint64_t a1, uint64_t a2, uint64_t *a3, void *****a4, int a5, _DWORD *a6)
{
  uint64_t v6;
  const xmlChar *v9;
  xmlChar *v10;
  int v11;
  uint64_t result;
  uint64_t v13;
  int v14;
  int v15;
  void ****v16;
  xmlNode *v17;
  xmlChar *v18;
  xmlNode *v19;
  xmlNs *ns;
  const xmlChar *name;
  xmlChar *v22;
  void ****v23;
  xmlChar *v24;
  const xmlChar *v25;
  int v26;
  int v27;
  const xmlChar *v28;
  int v29;
  xmlChar *v30;
  xmlNode *PropNode;
  uint64_t v32;
  xmlChar *NodeContent;
  const xmlChar *v34;
  int v35;
  const xmlChar *v36;
  uint64_t v37;
  uint64_t v38;
  xmlNode *v39;
  uint64_t v40;
  uint64_t v41;
  xmlChar *v42;
  _QWORD *v43;
  uint64_t v44;
  void ****v45;
  _QWORD *v46;
  _QWORD *v47;
  _DWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  xmlNode *v54;
  xmlSchemaType *BuiltInType;
  xmlSchemaTypePtr v56;
  xmlChar *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  xmlChar *v61;
  uint64_t v62;
  _DWORD *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  void ***v67;
  void **v68;
  _QWORD *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  xmlChar *v74;
  int v75;
  xmlChar *str1;
  const xmlChar *v77;
  int v78;
  int v79;
  int v80;
  void *v85;
  void *v86;
  xmlChar *str2;
  xmlChar *v88;

  v6 = *a3;
  if (!*a3)
    return 0;
  v9 = (const xmlChar *)"attributeGroup";
  v10 = (xmlChar *)"name";
  while (1)
  {
    if (*(_QWORD *)(v6 + 72))
    {
      v11 = xmlStrEqual(*(const xmlChar **)(v6 + 16), (const xmlChar *)"attribute");
      v6 = *a3;
      if (v11)
      {
        if (xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v6 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          goto LABEL_11;
        }
        v6 = *a3;
      }
      if (!v6)
        return 0;
    }
    if (!*(_QWORD *)(v6 + 72))
      return 0;
    result = xmlStrEqual(*(const xmlChar **)(v6 + 16), v9);
    if (!(_DWORD)result)
      return result;
    result = xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(*a3 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema");
    if (!(_DWORD)result)
      return result;
LABEL_11:
    v13 = *a3;
    if (!*a3)
      goto LABEL_158;
    if (!*(_QWORD *)(v13 + 72))
    {
      v88 = 0;
      str2 = 0;
      goto LABEL_63;
    }
    v14 = xmlStrEqual(*(const xmlChar **)(v13 + 16), (const xmlChar *)"attribute");
    v13 = *a3;
    if (!v14
      || (v15 = xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v13 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"), v13 = *a3, !v15))
    {
      v88 = 0;
      str2 = 0;
      if (!v13)
        goto LABEL_158;
LABEL_63:
      v30 = v10;
      PropNode = (xmlNode *)xmlSchemaGetPropNode(v13, (xmlChar *)"ref");
      if (!PropNode)
      {
        xmlSchemaPMissingAttrErr(a1, v13, (xmlChar *)"ref");
        goto LABEL_158;
      }
      v32 = (uint64_t)PropNode;
      NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, PropNode);
      xmlSchemaPValAttrNodeQNameValue(a1, a2, v32, NodeContent, (const xmlChar **)&v88, (const xmlChar **)&str2);
      v34 = v88;
      v35 = xmlSchemaCheckReference(a1, v13, v32, v88);
      v10 = v30;
      if (v35)
        goto LABEL_158;
      v36 = v9;
      v37 = *(_QWORD *)(v13 + 88);
      if (!v37)
      {
LABEL_72:
        v39 = (xmlNode *)xmlSchemaGetPropNode(v13, (xmlChar *)"id");
        if (v39)
          xmlSchemaPValAttrNodeID(a1, v39);
        v40 = *(_QWORD *)(v13 + 24);
        if (v40)
        {
          if (!*(_QWORD *)(v40 + 72)
            || !xmlStrEqual(*(const xmlChar **)(v40 + 16), (const xmlChar *)"annotation")
            || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v40 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (xmlSchemaParseAnnotation((_DWORD *)a1, v40, 0), (v40 = *(_QWORD *)(v40 + 48)) != 0))
          {
            xmlSchemaPContentErr(a1, 3033, v13, v40, 0, (xmlChar *)"(annotation?)");
          }
        }
        if (*(_DWORD *)(a1 + 188)
          && (v41 = *(_QWORD *)(a1 + 216)) != 0
          && **(_DWORD **)(v41 + 8) == 16
          && (v42 = str2, str2 == *(xmlChar **)(v41 + 32))
          && v34 == *(const xmlChar **)(v41 + 40))
        {
          v9 = v36;
          if (*(_DWORD *)(a1 + 224))
          {
            v86 = 0;
            v57 = xmlSchemaFormatQName(&v86, v34, str2);
            xmlSchemaCustomErr4((_DWORD *)a1, 3081, v13, 0, (const xmlChar *)"The redefining attribute group definition '%s' must not contain more than one reference to the redefined definition", v57, 0, 0, 0);
            v10 = v30;
            if (v86)
              xmlFree(v86);
            goto LABEL_158;
          }
          *(_DWORD *)(a1 + 224) = 1;
          v58 = xmlSchemaNewQNameRef(a1, 16, (uint64_t)v42, (uint64_t)v34);
          v10 = v30;
          if (!v58)
            goto LABEL_158;
          v44 = (uint64_t)v58;
          v58[5] = v13;
          *(_QWORD *)(*(_QWORD *)(a1 + 216) + 16) = v58;
        }
        else
        {
          v43 = xmlSchemaNewQNameRef(a1, 16, (uint64_t)str2, (uint64_t)v34);
          v9 = v36;
          v10 = v30;
          if (!v43)
            goto LABEL_158;
          v44 = (uint64_t)v43;
          v43[5] = v13;
          xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, (uint64_t)v43);
        }
        if (a6)
          *a6 = 1;
        goto LABEL_89;
      }
      while (1)
      {
        v38 = *(_QWORD *)(v37 + 72);
        if (!v38)
          break;
        if (xmlStrEqual(*(const xmlChar **)(v38 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          goto LABEL_68;
LABEL_71:
        v37 = *(_QWORD *)(v37 + 48);
        if (!v37)
          goto LABEL_72;
      }
      if (xmlStrEqual(*(const xmlChar **)(v37 + 16), (const xmlChar *)"ref")
        || xmlStrEqual(*(const xmlChar **)(v37 + 16), (const xmlChar *)"id"))
      {
        goto LABEL_71;
      }
LABEL_68:
      xmlSchemaPIllegalAttrErr((_DWORD *)a1, v37);
      goto LABEL_71;
    }
    v16 = *a4;
    v88 = 0;
    v86 = 0;
    str2 = 0;
    if (!v13)
      goto LABEL_157;
    v17 = (xmlNode *)xmlSchemaGetPropNode(v13, (xmlChar *)"ref");
    if (v17)
    {
      v18 = (xmlChar *)xmlSchemaGetNodeContent(a1, v17);
      if (xmlSchemaPValAttrNodeQNameValue(a1, a2, (uint64_t)v17, v18, (const xmlChar **)&str2, (const xmlChar **)&v86)|| xmlSchemaCheckReference(a1, v13, (uint64_t)v17, str2))
      {
        goto LABEL_157;
      }
    }
    v78 = *(_DWORD *)(a1 + 36);
    v19 = *(xmlNode **)(v13 + 88);
    if (!v19)
    {
      v75 = 0;
      str1 = 0;
      v77 = 0;
      v79 = 0;
      v80 = 2;
LABEL_95:
      v29 = v78;
      goto LABEL_96;
    }
    v75 = 0;
    str1 = 0;
    v77 = 0;
    v79 = 0;
    v80 = 2;
    do
    {
      ns = v19->ns;
      if (ns)
      {
        if (!xmlStrEqual(ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          goto LABEL_56;
LABEL_23:
        xmlSchemaPIllegalAttrErr((_DWORD *)a1, (uint64_t)v19);
        goto LABEL_56;
      }
      name = v19->name;
      if (v17)
      {
        if (xmlStrEqual(name, (const xmlChar *)"id"))
          goto LABEL_26;
        if (xmlStrEqual(v19->name, (const xmlChar *)"ref"))
          goto LABEL_56;
      }
      else
      {
        if (xmlStrEqual(name, v10))
          goto LABEL_56;
        if (xmlStrEqual(v19->name, (const xmlChar *)"id"))
        {
LABEL_26:
          xmlSchemaPValAttrNodeID(a1, v19);
          goto LABEL_56;
        }
        if (xmlStrEqual(v19->name, (const xmlChar *)"type"))
        {
          v22 = (xmlChar *)xmlSchemaGetNodeContent(a1, v19);
          xmlSchemaPValAttrNodeQNameValue(a1, a2, (uint64_t)v19, v22, (const xmlChar **)&str2, (const xmlChar **)&v86);
          goto LABEL_56;
        }
        if (xmlStrEqual(v19->name, (const xmlChar *)"form"))
        {
          v23 = v16;
          v24 = v10;
          v28 = xmlSchemaGetNodeContent(a1, v19);
          if (xmlStrEqual(v28, (const xmlChar *)"qualified"))
          {
            str1 = *(xmlChar **)(a1 + 200);
          }
          else if (!xmlStrEqual(v28, (const xmlChar *)"unqualified"))
          {
            xmlSchemaPSimpleTypeErr(a1, 3037, (uint64_t)v19, 0, "(qualified | unqualified)", v28, 0, 0);
          }
          v75 = 1;
          goto LABEL_55;
        }
      }
      if (xmlStrEqual(v19->name, (const xmlChar *)"use"))
      {
        v23 = v16;
        v24 = v10;
        v25 = xmlSchemaGetNodeContent(a1, v19);
        if (xmlStrEqual(v25, (const xmlChar *)"optional"))
        {
          v26 = 2;
        }
        else
        {
          if (xmlStrEqual(v25, (const xmlChar *)"prohibited"))
          {
            v80 = 0;
            goto LABEL_55;
          }
          if (!xmlStrEqual(v25, (const xmlChar *)"required"))
          {
            xmlSchemaPSimpleTypeErr(a1, 1774, (uint64_t)v19, 0, "(optional | prohibited | required)", v25, 0, 0);
            goto LABEL_55;
          }
          v26 = 1;
        }
        v80 = v26;
LABEL_55:
        v10 = v24;
        v16 = v23;
        goto LABEL_56;
      }
      if (xmlStrEqual(v19->name, (const xmlChar *)"default"))
      {
        if (v77)
          goto LABEL_46;
        v77 = xmlSchemaGetNodeContent(a1, v19);
        v27 = 1;
      }
      else
      {
        if (!xmlStrEqual(v19->name, (const xmlChar *)"fixed"))
          goto LABEL_23;
        if (v77)
        {
LABEL_46:
          xmlSchemaPMutualExclAttrErr(a1, 3051, 0, (uint64_t)v19);
          goto LABEL_56;
        }
        v77 = xmlSchemaGetNodeContent(a1, v19);
        v27 = 2;
      }
      v79 = v27;
LABEL_56:
      v19 = v19->next;
    }
    while (v19);
    if (v79 != 1)
      goto LABEL_95;
    v29 = v78;
    if (v80 != 2)
    {
      xmlSchemaPSimpleTypeErr(a1, 3052, v13, 0, "(optional | prohibited | required)", 0, (const xmlChar *)"The value of the attribute 'use' must be 'optional' if the attribute 'default' is present", 0);
      v79 = 1;
    }
LABEL_96:
    if (v29 != *(_DWORD *)(a1 + 36))
      goto LABEL_157;
    if (!v17)
      break;
    if (!v80)
      goto LABEL_146;
    v46 = xmlSchemaAddAttributeUse(a1, v13);
    if (v46)
    {
      v44 = (uint64_t)v46;
      xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, (uint64_t)v46);
      *(_DWORD *)(v44 + 48) = v80;
      v47 = xmlSchemaNewQNameRef(a1, 15, (uint64_t)v86, (uint64_t)str2);
      if (v47)
      {
        *(_QWORD *)(v44 + 24) = v47;
        if (v77)
          *(_QWORD *)(v44 + 56) = v77;
        if (v79 == 2)
        {
          v48 = (_DWORD *)(v44 + 32);
          v49 = 1;
          goto LABEL_105;
        }
        goto LABEL_106;
      }
    }
LABEL_157:
    v9 = (const xmlChar *)"attributeGroup";
LABEL_158:
    v6 = *(_QWORD *)(*a3 + 48);
    *a3 = v6;
    if (!v6)
      return 0;
  }
  if (!v75 && (*(_BYTE *)(a2 + 48) & 2) != 0)
    str1 = *(xmlChar **)(a1 + 200);
  if (xmlStrEqual(str1, (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance"))
    xmlSchemaCustomErr4((_DWORD *)a1, 3057, v13, 0, (const xmlChar *)"The target namespace must not match '%s'", (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance", 0, 0, 0);
  v53 = xmlSchemaGetPropNode(v13, v10);
  if (!v53)
  {
    xmlSchemaPMissingAttrErr(a1, v13, v10);
    goto LABEL_157;
  }
  v54 = (xmlNode *)v53;
  BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
  if (xmlSchemaPValAttrNode((_DWORD *)a1, v54, BuiltInType, &v88))
    goto LABEL_157;
  if (xmlStrEqual(v88, (const xmlChar *)"xmlns"))
  {
    v56 = xmlSchemaGetBuiltInType(XML_SCHEMAS_NCNAME);
    xmlSchemaPSimpleTypeErr(a1, 3056, (uint64_t)v54, (uint64_t)v56, 0, 0, (const xmlChar *)"The value of the attribute must not match 'xmlns'", 0);
    goto LABEL_157;
  }
  if (!v80)
  {
LABEL_146:
    v62 = *(_QWORD *)(v13 + 24);
    if (v62)
    {
      if (!*(_QWORD *)(v62 + 72)
        || !xmlStrEqual(*(const xmlChar **)(v62 + 16), (const xmlChar *)"annotation")
        || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v62 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (xmlSchemaParseAnnotation((_DWORD *)a1, v62, 0), (v62 = *(_QWORD *)(v62 + 48)) != 0))
      {
        xmlSchemaPContentErr(a1, 3033, v13, v62, 0, (xmlChar *)"(annotation?)");
      }
    }
    if (a5 == 13)
    {
      v63 = (_DWORD *)a1;
      v64 = v13;
      v65 = "Skipping attribute use prohibition, since it is pointless when extending a type";
    }
    else
    {
      if (a5 != 16)
      {
        if (!v17)
        {
          v86 = v88;
          str2 = str1;
        }
        if (v16)
        {
          v66 = *((unsigned int *)v16 + 2);
          if ((int)v66 >= 1)
          {
            v67 = *v16;
            while (1)
            {
              v68 = *v67;
              if (*(_DWORD *)*v67 == 2001 && v86 == v68[2] && str2 == v68[3])
                break;
              ++v67;
              if (!--v66)
                goto LABEL_169;
            }
            v85 = 0;
            v74 = xmlSchemaFormatQName(&v85, str2, (xmlChar *)v86);
            xmlSchemaCustomWarning((_DWORD *)a1, 3086, v13, (const xmlChar *)"Skipping duplicate attribute use prohibition '%s'", v74, 0, 0);
            if (v85)
              xmlFree(v85);
            goto LABEL_157;
          }
        }
LABEL_169:
        v69 = xmlSchemaAddAttributeUseProhib(a1);
        if (!v69)
          goto LABEL_157;
        v44 = (uint64_t)v69;
        v70 = v86;
        v69[1] = v13;
        v69[2] = v70;
        v69[3] = str2;
        if (v17)
          xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, (uint64_t)v69);
        goto LABEL_172;
      }
      v63 = (_DWORD *)a1;
      v64 = v13;
      v65 = "Skipping attribute use prohibition, since it is pointless inside an <attributeGroup>";
    }
    xmlSchemaCustomWarning(v63, 3086, v64, (const xmlChar *)v65, 0, 0, 0);
    goto LABEL_157;
  }
  v59 = xmlSchemaAddAttributeUse(a1, v13);
  if (!v59)
    goto LABEL_157;
  v44 = (uint64_t)v59;
  *((_DWORD *)v59 + 12) = v80;
  v60 = (_QWORD *)xmlSchemaAddAttribute(a1, (uint64_t)v88, (uint64_t)str1, v13, 0);
  if (!v60)
    goto LABEL_157;
  if (v86)
  {
    v61 = str2;
    v60[6] = v86;
    v60[7] = v61;
  }
  *(_QWORD *)(v44 + 24) = v60;
  if (v77)
  {
    v60[11] = v77;
    if (v79 == 2)
    {
      v48 = v60 + 15;
      v49 = 512;
LABEL_105:
      *v48 |= v49;
    }
  }
LABEL_106:
  v50 = *(_QWORD *)(v13 + 24);
  if (!v50)
  {
LABEL_172:
    v9 = (const xmlChar *)"attributeGroup";
    goto LABEL_89;
  }
  if (*(_QWORD *)(v50 + 72)
    && xmlStrEqual(*(const xmlChar **)(v50 + 16), (const xmlChar *)"annotation")
    && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v50 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    *(_QWORD *)(v44 + 8) = xmlSchemaParseAnnotation((_DWORD *)a1, v50, 1);
    v50 = *(_QWORD *)(v50 + 48);
  }
  if (v17)
  {
    if (v50)
    {
      v9 = (const xmlChar *)"attributeGroup";
      if (*(_QWORD *)(v50 + 72)
        && xmlStrEqual(*(const xmlChar **)(v50 + 16), (const xmlChar *)"simpleType")
        && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v50 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v51 = a1;
        v52 = 3054;
      }
      else
      {
        v51 = a1;
        v52 = 3033;
      }
      v71 = v13;
      v72 = v50;
      v73 = "(annotation?)";
LABEL_180:
      xmlSchemaPContentErr(v51, v52, v71, v72, 0, (xmlChar *)v73);
      goto LABEL_89;
    }
    goto LABEL_172;
  }
  if (!v50)
    goto LABEL_172;
  v9 = (const xmlChar *)"attributeGroup";
  if (!*(_QWORD *)(v50 + 72)
    || !xmlStrEqual(*(const xmlChar **)(v50 + 16), (const xmlChar *)"simpleType")
    || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v50 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    goto LABEL_179;
  }
  if (*(_QWORD *)(*(_QWORD *)(v44 + 24) + 48))
    xmlSchemaPContentErr(a1, 3055, v13, v50, (xmlChar *)"The attribute 'type' and the <simpleType> child are mutually exclusive", 0);
  else
    *(_QWORD *)(*(_QWORD *)(v44 + 24) + 96) = xmlSchemaParseSimpleType(a1, a2, v50, 0);
  v50 = *(_QWORD *)(v50 + 48);
  if (v50)
  {
LABEL_179:
    v51 = a1;
    v52 = 3033;
    v71 = v13;
    v72 = v50;
    v73 = "(annotation?, simpleType?)";
    goto LABEL_180;
  }
LABEL_89:
  v45 = *a4;
  if (!*a4)
  {
    v45 = (void ****)xmlSchemaItemListCreate();
    *a4 = v45;
    if (!v45)
      return 0xFFFFFFFFLL;
  }
  result = xmlSchemaItemListAddSize((uint64_t)v45, 2, v44);
  if ((_DWORD)result != -1)
    goto LABEL_158;
  return result;
}

_OWORD *xmlSchemaParseAnyAttribute(_DWORD *a1, uint64_t a2, xmlNode *a3)
{
  _OWORD *v5;
  uint64_t properties;
  uint64_t v7;
  xmlNode *PropNode;
  uint64_t children;

  if (!a3)
    return 0;
  v5 = xmlSchemaAddWildcard((uint64_t)a1, a2, 21, (uint64_t)a3);
  if (v5)
  {
    properties = (uint64_t)a3->properties;
    if (properties)
    {
      while (1)
      {
        v7 = *(_QWORD *)(properties + 72);
        if (!v7)
          break;
        if (xmlStrEqual(*(const xmlChar **)(v7 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          goto LABEL_6;
LABEL_10:
        properties = *(_QWORD *)(properties + 48);
        if (!properties)
          goto LABEL_11;
      }
      if (xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"id")
        || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"namespace")
        || xmlStrEqual(*(const xmlChar **)(properties + 16), (const xmlChar *)"processContents"))
      {
        goto LABEL_10;
      }
LABEL_6:
      xmlSchemaPIllegalAttrErr(a1, properties);
      goto LABEL_10;
    }
LABEL_11:
    PropNode = (xmlNode *)xmlSchemaGetPropNode((uint64_t)a3, (xmlChar *)"id");
    if (PropNode)
      xmlSchemaPValAttrNodeID((uint64_t)a1, PropNode);
    if (xmlSchemaParseWildcardNs((uint64_t)a1, (uint64_t)v5, a3))
      return 0;
    children = (uint64_t)a3->children;
    if (children)
    {
      if (!*(_QWORD *)(children + 72)
        || !xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"annotation")
        || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (*((_QWORD *)v5 + 2) = xmlSchemaParseAnnotation(a1, children, 1), (children = *(_QWORD *)(children + 48)) != 0))
      {
        xmlSchemaPContentErr((uint64_t)a1, 3033, (uint64_t)a3, children, 0, (xmlChar *)"(annotation?)");
      }
    }
  }
  return v5;
}

_QWORD *xmlSchemaAddRedef(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;

  v10 = xmlMalloc(0x38uLL);
  v11 = v10;
  if (v10)
  {
    v10[6] = 0;
    *((_OWORD *)v10 + 1) = 0u;
    *((_OWORD *)v10 + 2) = 0u;
    *(_OWORD *)v10 = 0u;
    v10[1] = a3;
    v10[5] = a5;
    v10[6] = a2;
    v10[4] = a4;
    v12 = *(_QWORD *)(a1 + 48);
    v13 = (_QWORD *)(v12 + 56);
    if (*(_QWORD *)(v12 + 56))
      v13 = *(_QWORD **)(v12 + 64);
    *v13 = v10;
    *(_QWORD *)(v12 + 64) = v10;
  }
  else
  {
    if (a1)
      ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating redefinition info");
  }
  return v11;
}

_QWORD *xmlSchemaAddItemSize(_QWORD **a1, int a2, uint64_t a3)
{
  _QWORD *result;

  result = *a1;
  if (result)
    return (_QWORD *)xmlSchemaItemListAddSize((uint64_t)result, a2, a3);
  result = xmlSchemaItemListCreate();
  *a1 = result;
  if (result)
    return (_QWORD *)xmlSchemaItemListAddSize((uint64_t)result, a2, a3);
  return result;
}

uint64_t xmlSchemaItemListAddSize(uint64_t a1, int a2, uint64_t a3)
{
  void *v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(void **)a1;
  if (v5)
  {
    v6 = *(int *)(a1 + 12);
    if ((int)v6 <= *(_DWORD *)(a1 + 8))
    {
      *(_DWORD *)(a1 + 12) = 2 * v6;
      v5 = xmlRealloc(v5, 16 * v6);
      *(_QWORD *)a1 = v5;
      if (!v5)
      {
        __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"growing item list");
        *(_DWORD *)(a1 + 12) = 0;
        return 0xFFFFFFFFLL;
      }
    }
  }
  else
  {
    if (a2 <= 1)
      v7 = 1;
    else
      v7 = a2;
    v5 = xmlMalloc(8 * v7);
    *(_QWORD *)a1 = v5;
    if (!v5)
    {
      __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating new item list");
      return 0xFFFFFFFFLL;
    }
    *(_DWORD *)(a1 + 12) = v7;
  }
  v8 = 0;
  v9 = *(int *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = v9 + 1;
  *((_QWORD *)v5 + v9) = a3;
  return v8;
}

void xmlSchemaAddAnnotation(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  if (a1 && a2)
  {
    switch(*(_DWORD *)a1)
    {
      case 2:
      case 0x12:
      case 0x15:
        v2 = *(_QWORD **)(a1 + 16);
        if (v2)
          goto LABEL_15;
        *(_QWORD *)(a1 + 16) = a2;
        return;
      case 3:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0x13:
      case 0x14:
        goto LABEL_13;
      case 4:
      case 5:
      case 0xE:
      case 0x10:
        v2 = *(_QWORD **)(a1 + 48);
        if (v2)
          goto LABEL_15;
        *(_QWORD *)(a1 + 48) = a2;
        break;
      case 6:
      case 7:
      case 8:
      case 0x11:
      case 0x16:
      case 0x17:
      case 0x18:
      case 0x19:
        v2 = *(_QWORD **)(a1 + 8);
        if (v2)
          goto LABEL_15;
        *(_QWORD *)(a1 + 8) = a2;
        break;
      case 0xF:
        v2 = *(_QWORD **)(a1 + 64);
        if (v2)
          goto LABEL_15;
        *(_QWORD *)(a1 + 64) = a2;
        break;
      default:
        if ((*(_DWORD *)a1 - 1000) >= 0xC)
        {
LABEL_13:
          xmlSchemaPCustomErrExt(0, 3069, 0, 0, (const xmlChar *)"Internal error: xmlSchemaAddAnnotation, The item is not a annotated schema component");
        }
        else
        {
          v2 = *(_QWORD **)(a1 + 32);
          if (v2)
          {
LABEL_15:
            if (*v2)
              v2 = (_QWORD *)*v2;
            *v2 = a2;
          }
          else
          {
            *(_QWORD *)(a1 + 32) = a2;
          }
        }
        break;
    }
  }
}

void xmlSchemaParseRestriction(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xmlNode *PropNode;
  const xmlChar **v12;
  xmlNode *v13;
  _QWORD *v14;
  const xmlChar *v15;
  int v16;
  xmlNs *ns;
  uint64_t v18;
  uint64_t v19;
  xmlNode *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  xmlNs *v24;
  xmlSchemaFacet *v25;
  int v26;
  xmlNs *v27;
  int v28;
  xmlNs *v29;
  int v30;
  xmlNs *v31;
  int v32;
  xmlNs *v33;
  int v34;
  xmlNs *v35;
  int v36;
  xmlNs *v37;
  int v38;
  xmlNs *v39;
  int v40;
  xmlNs *v41;
  int v42;
  xmlNs *v43;
  int v44;
  xmlNs *v45;
  int v46;
  xmlNs *v47;
  xmlSchemaFacet *v48;
  xmlSchemaFacet *v49;
  xmlChar *Prop;
  xmlChar *v51;
  int v52;
  const xmlChar *name;
  uint64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  xmlNode *v58;
  xmlChar *v59;
  uint64_t children;
  xmlSchemaFacet **p_next;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  int v66;
  xmlNs *v67;
  _QWORD *v68;
  char *v69;
  int v70;
  void *v71;
  void *v72;
  xmlNode *v73;

  v73 = 0;
  v8 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(v8 + 88) |= 4u;
  v9 = *(_QWORD *)(a3 + 88);
  if (v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 72);
      if (!v10)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v10 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_4;
LABEL_7:
      v9 = *(_QWORD *)(v9 + 48);
      if (!v9)
        goto LABEL_8;
    }
    if (xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"base"))
    {
      goto LABEL_7;
    }
LABEL_4:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v9);
    goto LABEL_7;
  }
LABEL_8:
  PropNode = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
  if (PropNode)
    xmlSchemaPValAttrNodeID(a1, PropNode);
  v12 = (const xmlChar **)(v8 + 96);
  if (!xmlSchemaPValAttrQName(a1, a2, a3, (xmlChar *)"base", (const xmlChar **)(v8 + 104), (const xmlChar **)(v8 + 96)))
  {
    v15 = *v12;
    if (!*v12 && *(_DWORD *)v8 == 5)
      goto LABEL_52;
    if (!*(_DWORD *)(a1 + 188) || (*(_BYTE *)(v8 + 88) & 8) == 0)
      goto LABEL_11;
    if (!v15)
    {
LABEL_52:
      xmlSchemaPMissingAttrErr(a1, a3, (xmlChar *)"base");
      goto LABEL_11;
    }
    if (!xmlStrEqual(v15, *(const xmlChar **)(v8 + 16))
      || !xmlStrEqual(*(const xmlChar **)(v8 + 104), *(const xmlChar **)(v8 + 208)))
    {
      v71 = 0;
      v72 = 0;
      xmlSchemaFormatQName(&v72, *(const xmlChar **)(v8 + 104), *(xmlChar **)(v8 + 96));
      xmlSchemaFormatQName(&v71, *(const xmlChar **)(v8 + 208), *(xmlChar **)(v8 + 16));
      xmlSchemaPCustomErrExt(a1, 3081, 0, a3, (const xmlChar *)"This is a redefinition, but the QName value '%s' of the 'base' attribute does not match the type's designation '%s'");
      if (v72)
        xmlFree(v72);
      if (v71)
        xmlFree(v71);
      *v12 = 0;
      *(_QWORD *)(v8 + 104) = 0;
    }
  }
LABEL_11:
  v13 = *(xmlNode **)(a3 + 24);
  v73 = v13;
  if (v13
    && v13->ns
    && xmlStrEqual(v13->name, (const xmlChar *)"annotation")
    && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    v14 = xmlSchemaParseAnnotation((_DWORD *)a1, (uint64_t)v13, 1);
    xmlSchemaAddAnnotation(v8, (uint64_t)v14);
    v13 = v13->next;
    v73 = v13;
  }
  if (a4 == 10)
  {
    if (!v13 || !v13->ns)
      goto LABEL_200;
    v16 = xmlStrEqual(v13->name, (const xmlChar *)"all");
    ns = v13->ns;
    if (v16)
    {
      if (xmlStrEqual(ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v18 = a1;
        v19 = a2;
        v20 = v13;
        v21 = 8;
LABEL_198:
        v68 = (_QWORD *)xmlSchemaParseModelGroup(v18, v19, v20, v21, 1);
        goto LABEL_199;
      }
      ns = v13->ns;
    }
    if (!ns)
      goto LABEL_200;
    v23 = xmlStrEqual(v13->name, (const xmlChar *)"choice");
    v24 = v13->ns;
    if (v23)
    {
      if (xmlStrEqual(v24->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v18 = a1;
        v19 = a2;
        v20 = v13;
        v21 = 7;
        goto LABEL_198;
      }
      v24 = v13->ns;
    }
    if (!v24)
      goto LABEL_200;
    v66 = xmlStrEqual(v13->name, (const xmlChar *)"sequence");
    v67 = v13->ns;
    if (v66)
    {
      if (xmlStrEqual(v67->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v18 = a1;
        v19 = a2;
        v20 = v13;
        v21 = 6;
        goto LABEL_198;
      }
      v67 = v13->ns;
    }
    if (!v67
      || !xmlStrEqual(v13->name, (const xmlChar *)"group")
      || !xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      goto LABEL_200;
    }
    v68 = xmlSchemaParseModelGroupDefRef((_DWORD *)a1, a2, (uint64_t)v13);
LABEL_199:
    *(_QWORD *)(v8 + 56) = v68;
    v13 = v13->next;
    v73 = v13;
    goto LABEL_200;
  }
  if (a4 == 4)
  {
    if (!v13
      || !v13->ns
      || !xmlStrEqual(v13->name, (const xmlChar *)"simpleType")
      || !xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      if (!*v12)
        xmlSchemaPContentErr(a1, 3005, a3, (uint64_t)v13, (xmlChar *)"Either the attribute 'base' or a <simpleType> child must be present", 0);
LABEL_60:
      if (!v13)
        goto LABEL_182;
      goto LABEL_61;
    }
    if (*v12)
      xmlSchemaPContentErr(a1, 3005, a3, (uint64_t)v13, (xmlChar *)"The attribute 'base' and the <simpleType> child are mutually exclusive", 0);
    else
      *(_QWORD *)(v8 + 112) = xmlSchemaParseSimpleType(a1, a2, v13, 0);
LABEL_59:
    v13 = v13->next;
    v73 = v13;
    goto LABEL_60;
  }
  if (a4 != 9 || !v13)
  {
    if (a4 != 9)
      goto LABEL_200;
    goto LABEL_60;
  }
  if (v13->ns
    && xmlStrEqual(v13->name, (const xmlChar *)"simpleType")
    && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    v22 = xmlSchemaParseSimpleType(a1, a2, v13, 0);
    *(_QWORD *)(v8 + 192) = v22;
    if (!v22)
      return;
    goto LABEL_59;
  }
LABEL_61:
  v70 = a4;
  v25 = 0;
  while (v13->ns)
  {
    v26 = xmlStrEqual(v13->name, (const xmlChar *)"minInclusive");
    v27 = v13->ns;
    if (v26)
    {
      if (xmlStrEqual(v27->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v27 = v13->ns;
    }
    if (!v27)
      break;
    v28 = xmlStrEqual(v13->name, (const xmlChar *)"minExclusive");
    v29 = v13->ns;
    if (v28)
    {
      if (xmlStrEqual(v29->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v29 = v13->ns;
    }
    if (!v29)
      break;
    v30 = xmlStrEqual(v13->name, (const xmlChar *)"maxInclusive");
    v31 = v13->ns;
    if (v30)
    {
      if (xmlStrEqual(v31->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v31 = v13->ns;
    }
    if (!v31)
      break;
    v32 = xmlStrEqual(v13->name, (const xmlChar *)"maxExclusive");
    v33 = v13->ns;
    if (v32)
    {
      if (xmlStrEqual(v33->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v33 = v13->ns;
    }
    if (!v33)
      break;
    v34 = xmlStrEqual(v13->name, (const xmlChar *)"totalDigits");
    v35 = v13->ns;
    if (v34)
    {
      if (xmlStrEqual(v35->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v35 = v13->ns;
    }
    if (!v35)
      break;
    v36 = xmlStrEqual(v13->name, (const xmlChar *)"fractionDigits");
    v37 = v13->ns;
    if (v36)
    {
      if (xmlStrEqual(v37->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v37 = v13->ns;
    }
    if (!v37)
      break;
    v38 = xmlStrEqual(v13->name, (const xmlChar *)"pattern");
    v39 = v13->ns;
    if (v38)
    {
      if (xmlStrEqual(v39->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v39 = v13->ns;
    }
    if (!v39)
      break;
    v40 = xmlStrEqual(v13->name, (const xmlChar *)"enumeration");
    v41 = v13->ns;
    if (v40)
    {
      if (xmlStrEqual(v41->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v41 = v13->ns;
    }
    if (!v41)
      break;
    v42 = xmlStrEqual(v13->name, (const xmlChar *)"whiteSpace");
    v43 = v13->ns;
    if (v42)
    {
      if (xmlStrEqual(v43->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v43 = v13->ns;
    }
    if (!v43)
      break;
    v44 = xmlStrEqual(v13->name, (const xmlChar *)"length");
    v45 = v13->ns;
    if (v44)
    {
      if (xmlStrEqual(v45->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v45 = v13->ns;
    }
    if (!v45)
      break;
    v46 = xmlStrEqual(v13->name, (const xmlChar *)"maxLength");
    v47 = v13->ns;
    if (v46)
    {
      if (xmlStrEqual(v47->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_109;
      v47 = v13->ns;
    }
    if (!v47
      || !xmlStrEqual(v13->name, (const xmlChar *)"minLength")
      || !xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
    {
      break;
    }
LABEL_109:
    v48 = (xmlSchemaFacet *)xmlMalloc(0x48uLL);
    if (!v48)
    {
      if (a1)
        ++*(_DWORD *)(a1 + 36);
      __xmlSimpleError(0x10u, 2, (uint64_t)v13, 0, (const xmlChar *)"allocating facet");
      goto LABEL_180;
    }
    v49 = v48;
    v48->regexp = 0;
    *(_OWORD *)&v48->annot = 0u;
    *(_OWORD *)&v48->fixed = 0u;
    *(_OWORD *)&v48->type = 0u;
    *(_OWORD *)&v48->value = 0u;
    v48->node = v13;
    Prop = xmlSchemaGetProp(a1, v13, (xmlChar *)"value");
    if (Prop)
    {
      if (v13->ns)
      {
        v51 = Prop;
        if (xmlStrEqual(v13->name, (const xmlChar *)"minInclusive")
          && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          v52 = 1000;
LABEL_163:
          v49->type = v52;
          v58 = (xmlNode *)xmlSchemaGetPropNode((uint64_t)v13, (xmlChar *)"id");
          if (v58)
            xmlSchemaPValAttrNodeID(a1, v58);
          v49->value = v51;
          if ((v49->type & 0xFFFFFFFE) != 0x3EE)
          {
            v59 = xmlSchemaGetProp(a1, v13, (xmlChar *)"fixed");
            if (v59)
            {
              if (xmlStrEqual(v59, (const xmlChar *)"true"))
                v49->fixed = 1;
            }
          }
          children = (uint64_t)v13->children;
          if (children)
          {
            if (!*(_QWORD *)(children + 72)
              || !xmlStrEqual(*(const xmlChar **)(children + 16), (const xmlChar *)"annotation")
              || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(children + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (v49->annot = (xmlSchemaAnnotPtr)xmlSchemaParseAnnotation((_DWORD *)a1, children, 1), (children = *(_QWORD *)(children + 48)) != 0))
            {
              xmlSchemaPErr(a1, children, 1740, "Facet %s has unexpected child content\n", v13->name, 0);
            }
          }
          p_next = &v25->next;
          if (!v25)
            p_next = (xmlSchemaFacet **)(v8 + 120);
          *p_next = v49;
          v49->next = 0;
          v25 = v49;
          goto LABEL_180;
        }
        if (v13->ns)
        {
          if (xmlStrEqual(v13->name, (const xmlChar *)"minExclusive")
            && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            v52 = 1001;
            goto LABEL_163;
          }
          if (v13->ns)
          {
            if (xmlStrEqual(v13->name, (const xmlChar *)"maxInclusive")
              && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
            {
              v52 = 1002;
              goto LABEL_163;
            }
            if (v13->ns)
            {
              if (xmlStrEqual(v13->name, (const xmlChar *)"maxExclusive")
                && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
              {
                v52 = 1003;
                goto LABEL_163;
              }
              if (v13->ns)
              {
                if (xmlStrEqual(v13->name, (const xmlChar *)"totalDigits")
                  && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                {
                  v52 = 1004;
                  goto LABEL_163;
                }
                if (v13->ns)
                {
                  if (xmlStrEqual(v13->name, (const xmlChar *)"fractionDigits")
                    && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                  {
                    v52 = 1005;
                    goto LABEL_163;
                  }
                  if (v13->ns)
                  {
                    if (xmlStrEqual(v13->name, (const xmlChar *)"pattern")
                      && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                    {
                      v52 = 1006;
                      goto LABEL_163;
                    }
                    if (v13->ns)
                    {
                      if (xmlStrEqual(v13->name, (const xmlChar *)"enumeration")
                        && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                      {
                        v52 = 1007;
                        goto LABEL_163;
                      }
                      if (v13->ns)
                      {
                        if (xmlStrEqual(v13->name, (const xmlChar *)"whiteSpace")
                          && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                        {
                          v52 = 1008;
                          goto LABEL_163;
                        }
                        if (v13->ns)
                        {
                          if (xmlStrEqual(v13->name, (const xmlChar *)"length")
                            && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                          {
                            v52 = 1009;
                            goto LABEL_163;
                          }
                          if (v13->ns)
                          {
                            if (xmlStrEqual(v13->name, (const xmlChar *)"maxLength")
                              && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                            {
                              v52 = 1010;
                              goto LABEL_163;
                            }
                            if (v13->ns
                              && xmlStrEqual(v13->name, (const xmlChar *)"minLength")
                              && xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
                            {
                              v52 = 1011;
                              goto LABEL_163;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      name = v13->name;
      v54 = a1;
      v55 = (uint64_t)v13;
      v56 = 1741;
      v57 = "Unknown facet type %s\n";
    }
    else
    {
      name = v13->name;
      v54 = a1;
      v55 = (uint64_t)v13;
      v56 = 1708;
      v57 = "Facet %s has no value\n";
    }
    xmlSchemaPErr(v54, v55, v56, v57, name, 0);
    xmlSchemaFreeFacet(v49);
LABEL_180:
    v13 = v13->next;
    if (!v13)
      break;
  }
  a4 = v70;
LABEL_182:
  v73 = v13;
  v62 = *(_QWORD *)(v8 + 120);
  if (!v62)
  {
LABEL_200:
    if (*(_DWORD *)v8 == 5)
    {
      if (xmlSchemaParseLocalAttributes(a1, a2, (uint64_t *)&v73, (void *****)(v8 + 216), 12, 0) == -1)
        return;
      v13 = v73;
      if (!v73)
        return;
      if (!v73->ns
        || !xmlStrEqual(v73->name, (const xmlChar *)"anyAttribute")
        || !xmlStrEqual(v13->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        goto LABEL_208;
      }
      *(_QWORD *)(v8 + 152) = xmlSchemaParseAnyAttribute((_DWORD *)a1, a2, v13);
      v13 = v13->next;
    }
    if (!v13)
      return;
LABEL_208:
    if (a4 == 9)
    {
      v69 = "(annotation?, (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fract"
            "ionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*)?, ((attribute | attribute"
            "Group)*, anyAttribute?))";
    }
    else if (a4 == 10)
    {
      v69 = "annotation?, (group | all | choice | sequence)?, ((attribute | attributeGroup)*, anyAttribute?))";
    }
    else
    {
      v69 = "(annotation?, (simpleType?, (minExclusive | minInclusive | maxExclusive | maxInclusive | totalDigits | fract"
            "ionDigits | length | minLength | maxLength | enumeration | whiteSpace | pattern)*))";
    }
    xmlSchemaPContentErr(a1, 3033, a3, (uint64_t)v13, 0, (xmlChar *)v69);
    return;
  }
  v63 = 0;
  while (1)
  {
    v64 = xmlMalloc(0x10uLL);
    if (!v64)
      break;
    *v64 = 0;
    v64[1] = v62;
    if (v63)
      v65 = v63;
    else
      v65 = (_QWORD *)(v8 + 176);
    *v65 = v64;
    v62 = *(_QWORD *)(v62 + 8);
    v63 = v64;
    if (!v62)
      goto LABEL_200;
  }
  if (a1)
    ++*(_DWORD *)(a1 + 36);
  __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating a facet link");
  xmlFree(0);
}

void xmlSchemaParseExtension(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  xmlNode *PropNode;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;
  _BOOL4 v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  xmlNode *v27;
  char *v28;
  xmlNode *v29;

  v8 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(v8 + 88) |= 2u;
  v9 = *(_QWORD *)(a3 + 88);
  if (v9)
  {
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 72);
      if (!v10)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v10 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_4;
LABEL_7:
      v9 = *(_QWORD *)(v9 + 48);
      if (!v9)
        goto LABEL_8;
    }
    if (xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"base"))
    {
      goto LABEL_7;
    }
LABEL_4:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v9);
    goto LABEL_7;
  }
LABEL_8:
  PropNode = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
  if (PropNode)
    xmlSchemaPValAttrNodeID(a1, PropNode);
  if (!xmlSchemaPValAttrQName(a1, a2, a3, (xmlChar *)"base", (const xmlChar **)(v8 + 104), (const xmlChar **)(v8 + 96))&& !*(_QWORD *)(v8 + 96))
  {
    xmlSchemaPMissingAttrErr(a1, a3, (xmlChar *)"base");
  }
  v12 = *(_QWORD *)(a3 + 24);
  v29 = (xmlNode *)v12;
  if (!v12)
    return;
  if (*(_QWORD *)(v12 + 72)
    && xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"annotation")
    && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v12 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    v13 = xmlSchemaParseAnnotation((_DWORD *)a1, v12, 1);
    xmlSchemaAddAnnotation(v8, (uint64_t)v13);
    v12 = *(_QWORD *)(v12 + 48);
    v29 = (xmlNode *)v12;
  }
  v14 = a4 == 10;
  v15 = a4 == 10;
  if (!v14)
    goto LABEL_37;
  if (!v12)
    return;
  if (!*(_QWORD *)(v12 + 72))
    goto LABEL_44;
  v16 = xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"all");
  v17 = *(_QWORD *)(v12 + 72);
  if (!v16)
  {
LABEL_26:
    if (v17)
    {
      v22 = xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"choice");
      v23 = *(_QWORD *)(v12 + 72);
      if (v22)
      {
        if (xmlStrEqual(*(const xmlChar **)(v23 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          v18 = a1;
          v19 = a2;
          v20 = v12;
          v21 = 7;
          goto LABEL_35;
        }
        v23 = *(_QWORD *)(v12 + 72);
      }
      if (v23)
      {
        v24 = xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"sequence");
        v25 = *(_QWORD *)(v12 + 72);
        if (v24)
        {
          if (xmlStrEqual(*(const xmlChar **)(v25 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
          {
            v18 = a1;
            v19 = a2;
            v20 = v12;
            v21 = 6;
            goto LABEL_35;
          }
          v25 = *(_QWORD *)(v12 + 72);
        }
        if (v25
          && xmlStrEqual(*(const xmlChar **)(v12 + 16), (const xmlChar *)"group")
          && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v12 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          v26 = xmlSchemaParseModelGroupDefRef((_DWORD *)a1, a2, v12);
          goto LABEL_36;
        }
      }
    }
LABEL_44:
    v15 = 1;
    goto LABEL_45;
  }
  if (!xmlStrEqual(*(const xmlChar **)(v17 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    v17 = *(_QWORD *)(v12 + 72);
    goto LABEL_26;
  }
  v18 = a1;
  v19 = a2;
  v20 = v12;
  v21 = 8;
LABEL_35:
  v26 = xmlSchemaParseModelGroup(v18, v19, v20, v21, 1);
LABEL_36:
  *(_QWORD *)(v8 + 56) = v26;
  v12 = *(_QWORD *)(v12 + 48);
  v29 = (xmlNode *)v12;
LABEL_37:
  if (!v12)
    return;
LABEL_45:
  if (xmlSchemaParseLocalAttributes(a1, a2, (uint64_t *)&v29, (void *****)(v8 + 216), 13, 0) != -1)
  {
    v27 = v29;
    if (v29)
    {
      if (!v29->ns
        || !xmlStrEqual(v29->name, (const xmlChar *)"anyAttribute")
        || !xmlStrEqual(v27->ns->href, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        if (!v15)
          goto LABEL_52;
        goto LABEL_55;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 160) + 152) = xmlSchemaParseAnyAttribute((_DWORD *)a1, a2, v27);
      v27 = v27->next;
      if (v27)
      {
        if (!v15)
        {
LABEL_52:
          v28 = "(annotation?, ((attribute | attributeGroup)*, anyAttribute?))";
LABEL_56:
          xmlSchemaPContentErr(a1, 3033, a3, (uint64_t)v27, 0, (xmlChar *)v28);
          return;
        }
LABEL_55:
        v28 = "(annotation?, ((group | all | choice | sequence)?, ((attribute | attributeGroup)*, anyAttribute?)))";
        goto LABEL_56;
      }
    }
  }
}

xmlNode *xmlSchemaPValAttrQName(uint64_t a1, uint64_t a2, uint64_t a3, xmlChar *str2, const xmlChar **a5, const xmlChar **a6)
{
  xmlNode *result;
  uint64_t v11;
  xmlChar *NodeContent;

  result = (xmlNode *)xmlSchemaGetPropNode(a3, str2);
  if (result)
  {
    v11 = (uint64_t)result;
    NodeContent = (xmlChar *)xmlSchemaGetNodeContent(a1, result);
    return (xmlNode *)xmlSchemaPValAttrNodeQNameValue(a1, a2, v11, NodeContent, a5, a6);
  }
  else
  {
    *a6 = 0;
    *a5 = 0;
  }
  return result;
}

uint64_t xmlSchemaPValAttrNodeQNameValue(uint64_t a1, uint64_t a2, uint64_t a3, xmlChar *value, const xmlChar **a5, const xmlChar **a6)
{
  int v12;
  xmlSchemaTypePtr v13;
  uint64_t result;
  const xmlChar *v15;
  const xmlChar *v16;
  xmlNsPtr v17;
  const xmlChar *v18;
  xmlNsPtr v19;
  const xmlChar *href;
  const xmlChar *v21;
  const xmlChar *v22;
  xmlSchemaTypePtr BuiltInType;
  int len;

  *a5 = 0;
  *a6 = 0;
  v12 = xmlValidateQName(value, 1);
  if (v12 < 1)
  {
    if (v12 < 0)
      return 0xFFFFFFFFLL;
    len = 0;
    if (strchr((char *)value, 58))
    {
      v15 = xmlSplitQName3(value, &len);
      *a6 = v15;
      *a6 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), v15, -1);
      v16 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), value, len);
      v17 = xmlSearchNs(*(xmlDocPtr *)(a3 + 64), *(xmlNodePtr *)(a3 + 40), v16);
      if (v17)
      {
        v18 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), v17->href, -1);
        result = 0;
        *a5 = v18;
        return result;
      }
      BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
      xmlSchemaPSimpleTypeErr(a1, 3037, a3, (uint64_t)BuiltInType, 0, value, (const xmlChar *)"The value '%s' of simple type 'xs:QName' has no corresponding namespace declaration in scope", (char)value);
      return *(unsigned int *)(a1 + 32);
    }
    v19 = xmlSearchNs(*(xmlDocPtr *)(a3 + 64), *(xmlNodePtr *)(a3 + 40), 0);
    if (v19 && (href = v19->href) != 0 && *href)
    {
      v21 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), href, -1);
    }
    else
    {
      if ((*(_BYTE *)(a2 + 49) & 2) == 0)
      {
LABEL_17:
        v22 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), value, -1);
        result = 0;
        *a6 = v22;
        return result;
      }
      v21 = *(const xmlChar **)(a1 + 200);
    }
    *a5 = v21;
    goto LABEL_17;
  }
  v13 = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
  xmlSchemaPSimpleTypeErr(a1, 3037, a3, (uint64_t)v13, 0, value, 0, 0);
  *a6 = value;
  return *(unsigned int *)(a1 + 32);
}

_DWORD *xmlSchemaPErr2(uint64_t a1, uint64_t a2, uint64_t a3, int a4, const char *a5, const xmlChar *a6, xmlChar *a7)
{
  if (a3)
    a2 = a3;
  return xmlSchemaPErr(a1, a2, a4, a5, a6, a7);
}

xmlChar *xmlGetBooleanProp(uint64_t a1, xmlNode *a2, xmlChar *a3)
{
  xmlChar *result;
  const xmlChar *v7;
  uint64_t PropNode;
  xmlSchemaTypePtr BuiltInType;

  result = xmlSchemaGetProp(a1, a2, a3);
  if (result)
  {
    v7 = result;
    if (xmlStrEqual(result, (const xmlChar *)"true"))
      return (xmlChar *)1;
    if (!xmlStrEqual(v7, (const xmlChar *)"false"))
    {
      if (xmlStrEqual(v7, (const xmlChar *)"1"))
        return (xmlChar *)1;
      if (!xmlStrEqual(v7, (const xmlChar *)"0"))
      {
        PropNode = xmlSchemaGetPropNode((uint64_t)a2, a3);
        BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_BOOLEAN);
        xmlSchemaPSimpleTypeErr(a1, 1714, PropNode, (uint64_t)BuiltInType, 0, v7, 0, 0);
      }
    }
    return 0;
  }
  return result;
}

uint64_t xmlSchemaAddModelGroup(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v8;

  v4 = 0;
  if (a1 && a2)
  {
    v8 = xmlMalloc(0x28uLL);
    v4 = (uint64_t)v8;
    if (v8)
    {
      v8[4] = 0;
      *(_OWORD *)v8 = 0u;
      *((_OWORD *)v8 + 1) = 0u;
      *(_DWORD *)v8 = a3;
      v8[4] = a4;
      xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 72), 10, (uint64_t)v8);
      if ((a3 & 0xFFFFFFFE) == 6)
        xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, v4);
    }
    else
    {
      ++*(_DWORD *)(a1 + 36);
      __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating model group component");
    }
  }
  return v4;
}

uint64_t xmlGetMinOccurs(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  xmlNode *PropNode;
  uint64_t v8;
  const xmlChar *NodeContent;
  const xmlChar *i;
  unsigned int v11;
  uint64_t result;
  int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned int v17;

  PropNode = (xmlNode *)xmlSchemaGetPropNode(a2, (xmlChar *)"minOccurs");
  if (PropNode)
  {
    v8 = (uint64_t)PropNode;
    NodeContent = xmlSchemaGetNodeContent(a1, PropNode);
    for (i = NodeContent; ; ++i)
    {
      v11 = *i;
      if (v11 > 0x20)
        break;
      if (((1 << v11) & 0x100002600) == 0)
      {
        if (!*i)
          goto LABEL_25;
        break;
      }
    }
    if (v11 - 48 > 9)
    {
      result = 0;
    }
    else
    {
      LODWORD(result) = 0;
      do
      {
        v13 = -2147483601 - v11;
        v14 = v11 + 10 * result - 48;
        if (10 * (int)result > v13)
          v14 = 0x7FFFFFFF;
        if ((int)result <= 214748364)
          result = v14;
        else
          result = 0x7FFFFFFFLL;
        v15 = *++i;
        v11 = v15;
      }
      while (v15 - 48 < 0xA);
    }
    v16 = (unsigned __int8 *)(i + 1);
    while (v11 <= 0x20)
    {
      if (((1 << v11) & 0x100002600) == 0)
      {
        if (!v11 && (result & 0x80000000) == 0 && (a3 == -1 || (int)result <= a3))
          return result;
        break;
      }
      v17 = *v16++;
      v11 = v17;
    }
LABEL_25:
    xmlSchemaPSimpleTypeErr(a1, 3037, v8, 0, a4, NodeContent, 0, 0);
  }
  return 1;
}

uint64_t xmlGetMaxOccurs(uint64_t a1, uint64_t a2, int a3, int a4, const char *a5)
{
  xmlNode *PropNode;
  uint64_t v10;
  const xmlChar *NodeContent;
  uint64_t result;
  const xmlChar *i;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  unsigned int v19;

  PropNode = (xmlNode *)xmlSchemaGetPropNode(a2, (xmlChar *)"maxOccurs");
  if (PropNode)
  {
    v10 = (uint64_t)PropNode;
    NodeContent = xmlSchemaGetNodeContent(a1, PropNode);
    if (xmlStrEqual(NodeContent, (const xmlChar *)"unbounded"))
    {
      result = 0x40000000;
      if (a4 == 0x40000000)
        return result;
    }
    else
    {
      for (i = NodeContent; ; ++i)
      {
        v14 = *i;
        if (v14 > 0x20)
          break;
        if (((1 << v14) & 0x100002600) == 0)
        {
          if (!*i)
            goto LABEL_10;
          break;
        }
      }
      if (v14 - 48 > 9)
      {
        result = 0;
      }
      else
      {
        LODWORD(result) = 0;
        do
        {
          v15 = -2147483601 - v14;
          v16 = v14 + 10 * result - 48;
          if (10 * (int)result > v15)
            v16 = 0x7FFFFFFF;
          if ((int)result <= 214748364)
            result = v16;
          else
            result = 0x7FFFFFFFLL;
          v17 = *++i;
          v14 = v17;
        }
        while (v17 - 48 < 0xA);
      }
      v18 = (unsigned __int8 *)(i + 1);
      while (v14 <= 0x20)
      {
        if (((1 << v14) & 0x100002600) == 0)
        {
          if (!v14 && (int)result >= a3 && (int)result <= a4)
            return result;
          break;
        }
        v19 = *v18++;
        v14 = v19;
      }
    }
LABEL_10:
    xmlSchemaPSimpleTypeErr(a1, 3037, v10, 0, a5, NodeContent, 0, 0);
  }
  return 1;
}

void xmlSchemaPCheckParticleCorrect_2(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t PropNode;
  uint64_t v7;
  int v8;

  if (a4 != 0x40000000 && (a4 | a3) != 0)
  {
    if (a4 <= 0)
    {
      PropNode = xmlSchemaGetPropNode(a2, (xmlChar *)"maxOccurs");
      v7 = a1;
      v8 = 3044;
      goto LABEL_10;
    }
    if (a3 > a4)
    {
      PropNode = xmlSchemaGetPropNode(a2, (xmlChar *)"minOccurs");
      v7 = a1;
      v8 = 3043;
LABEL_10:
      xmlSchemaPCustomAttrErr(v7, v8, PropNode);
    }
  }
}

_QWORD *xmlSchemaAddParticle(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v8;
  _QWORD *v9;

  if (!a1)
    return 0;
  v8 = xmlMalloc(0x30uLL);
  v9 = v8;
  if (v8)
  {
    *(_DWORD *)v8 = 25;
    v8[5] = a2;
    *((_DWORD *)v8 + 8) = a3;
    *((_DWORD *)v8 + 9) = a4;
    v8[2] = 0;
    v8[3] = 0;
    v8[1] = 0;
    xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 72), 10, (uint64_t)v8);
  }
  else
  {
    ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating particle component");
  }
  return v9;
}

void xmlSchemaPCustomAttrErr(uint64_t a1, int a2, uint64_t a3)
{
  xmlChar *v6;

  v6 = 0;
  xmlSchemaFormatItemForReport(&v6, 0, *(_QWORD *)(a3 + 40));
  xmlSchemaPErrExt(a1, a3, a2, "%s, attribute '%s': %s.\n", (char)v6);
  if (v6)
    xmlFree(v6);
}

_OWORD *xmlSchemaAddWildcard(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _OWORD *v4;
  _OWORD *v8;

  v4 = 0;
  if (a1 && a2)
  {
    v8 = xmlMalloc(0x48uLL);
    v4 = v8;
    if (v8)
    {
      *v8 = 0u;
      v8[1] = 0u;
      *((_QWORD *)v8 + 8) = 0;
      v8[2] = 0u;
      v8[3] = 0u;
      *(_DWORD *)v8 = a3;
      *((_QWORD *)v8 + 3) = a4;
      xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 72), 10, (uint64_t)v8);
    }
    else
    {
      ++*(_DWORD *)(a1 + 36);
      __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"adding wildcard");
    }
  }
  return v4;
}

uint64_t xmlSchemaParseWildcardNs(uint64_t a1, uint64_t a2, xmlNode *node)
{
  xmlChar *Prop;
  const xmlChar *v7;
  uint64_t v8;
  int v9;
  xmlNode *PropNode;
  const xmlChar *NodeContent;
  const xmlChar *v12;
  _QWORD *v14;
  const xmlChar *i;
  unsigned int v16;
  uint64_t v18;
  xmlChar *v19;
  const xmlChar *v20;
  xmlSchemaType *BuiltInType;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;

  Prop = xmlSchemaGetProp(a1, node, (xmlChar *)"processContents");
  if (Prop && (v7 = Prop, !xmlStrEqual(Prop, (const xmlChar *)"strict")))
  {
    if (xmlStrEqual(v7, (const xmlChar *)"skip"))
    {
      v8 = 0;
      v9 = 1;
      goto LABEL_5;
    }
    if (xmlStrEqual(v7, (const xmlChar *)"lax"))
    {
      v8 = 0;
      v9 = 2;
      goto LABEL_5;
    }
    v8 = 3037;
    xmlSchemaPSimpleTypeErr(a1, 3037, (uint64_t)node, 0, "(strict | skip | lax)", v7, 0, 0);
  }
  else
  {
    v8 = 0;
  }
  v9 = 3;
LABEL_5:
  *(_DWORD *)(a2 + 40) = v9;
  PropNode = (xmlNode *)xmlSchemaGetPropNode((uint64_t)node, (xmlChar *)"namespace");
  NodeContent = xmlSchemaGetNodeContent(a1, PropNode);
  if (PropNode && (v12 = NodeContent, !xmlStrEqual(NodeContent, (const xmlChar *)"##any")))
  {
    if (xmlStrEqual(v12, (const xmlChar *)"##other"))
    {
      v14 = xmlSchemaNewWildcardNsConstraint(a1);
      *(_QWORD *)(a2 + 56) = v14;
      if (v14)
        v14[1] = *(_QWORD *)(a1 + 200);
      else
        return 0xFFFFFFFFLL;
    }
    else
    {
      v24 = 0;
      v25 = (_QWORD *)(a2 + 48);
      do
      {
        for (i = v12; ; ++i)
        {
          v16 = *i;
          if (v16 > 0x20 || ((1 << v16) & 0x100002600) == 0)
            break;
          ++v12;
        }
        v18 = 0;
        while (v16 > 0x20u || ((1 << v16) & 0x100002601) == 0)
          LOBYTE(v16) = i[++v18];
        if (!v18)
          break;
        v19 = xmlStrndup(i, v18);
        if (xmlStrEqual(v19, (const xmlChar *)"##other") || xmlStrEqual(v19, (const xmlChar *)"##any"))
        {
          v8 = 1792;
          xmlSchemaPSimpleTypeErr(a1, 1792, (uint64_t)PropNode, 0, "((##any | ##other) | List of (xs:anyURI | (##targetNamespace | ##local)))", v19, 0, 0);
        }
        else
        {
          if (xmlStrEqual(v19, (const xmlChar *)"##targetNamespace"))
          {
            v20 = *(const xmlChar **)(a1 + 200);
          }
          else if (xmlStrEqual(v19, (const xmlChar *)"##local"))
          {
            v20 = 0;
          }
          else
          {
            BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYURI);
            xmlSchemaPValAttrNodeValue((_DWORD *)a1, PropNode, v19, BuiltInType);
            v20 = xmlDictLookup(*(xmlDictPtr *)(a1 + 152), v19, -1);
          }
          v22 = (_QWORD *)(a2 + 48);
          while (1)
          {
            v22 = (_QWORD *)*v22;
            if (!v22)
              break;
            if (v20 == (const xmlChar *)v22[1])
              goto LABEL_31;
          }
          v23 = xmlSchemaNewWildcardNsConstraint(a1);
          if (!v23)
          {
            xmlFree(v19);
            return 0xFFFFFFFFLL;
          }
          *v23 = 0;
          v23[1] = v20;
          if (*v25)
          {
            if (v24)
              *v24 = v23;
          }
          else
          {
            *v25 = v23;
          }
          v24 = v23;
        }
LABEL_31:
        v12 = &i[v18];
        xmlFree(v19);
      }
      while (*v12);
    }
  }
  else
  {
    *(_DWORD *)(a2 + 44) = 1;
  }
  return v8;
}

_QWORD *xmlSchemaNewWildcardNsConstraint(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = xmlMalloc(0x10uLL);
  v3 = v2;
  if (v2)
  {
    *v2 = 0;
    v2[1] = 0;
  }
  else
  {
    if (a1)
      ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"creating wildcard namespace constraint");
  }
  return v3;
}

uint64_t xmlSchemaCheckReference(uint64_t a1, uint64_t a2, uint64_t a3, xmlChar *str2)
{
  uint64_t v8;
  uint64_t *v10;
  uint64_t v11;

  if (xmlStrEqual(*(const xmlChar **)(a1 + 200), str2)
    || xmlStrEqual((const xmlChar *)"http://www.w3.org/2001/XMLSchema", str2))
  {
    return 0;
  }
  v10 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 40);
  if (v10)
  {
    while (*((_DWORD *)v10 + 2) > 1u || !xmlStrEqual(str2, (const xmlChar *)v10[2]))
    {
      v10 = (uint64_t *)*v10;
      if (!v10)
        goto LABEL_9;
    }
    return 0;
  }
LABEL_9:
  if (a3)
    v11 = a3;
  else
    v11 = a2;
  if (str2)
  {
    v8 = 3004;
    xmlSchemaCustomErr4((_DWORD *)a1, 3004, v11, 0, (const xmlChar *)"References from this schema to components in the namespace '%s' are not allowed, since not indicated by an import statement", str2, 0, 0, 0);
  }
  else
  {
    v8 = 3004;
    xmlSchemaCustomErr4((_DWORD *)a1, 3004, v11, 0, (const xmlChar *)"References from this schema to components in no namespace are not allowed, since not indicated by an import statement", 0, 0, 0, 0);
  }
  return v8;
}

_QWORD *xmlSchemaNewQNameRef(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  _QWORD *v9;

  v8 = xmlMalloc(0x30uLL);
  v9 = v8;
  if (v8)
  {
    v8[4] = a4;
    v8[5] = 0;
    *(_DWORD *)v8 = 2000;
    v8[3] = a3;
    v8[1] = 0;
    *((_DWORD *)v8 + 4) = a2;
    xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 72), 10, (uint64_t)v8);
  }
  else
  {
    if (a1)
      ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating QName reference item");
  }
  return v9;
}

void xmlSchemaPMutualExclAttrErr(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  xmlChar *v7;

  v7 = 0;
  xmlSchemaFormatItemForReport(&v7, a3, *(_QWORD *)(a4 + 40));
  xmlSchemaPErrExt(a1, a4, a2, "%s: The attributes '%s' and '%s' are mutually exclusive.\n", (char)v7);
  if (v7)
    xmlFree(v7);
}

_QWORD *xmlSchemaAddAttributeUse(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = xmlMalloc(0x48uLL);
  v5 = v4;
  if (v4)
  {
    v4[8] = 0;
    *((_OWORD *)v4 + 2) = 0u;
    *((_OWORD *)v4 + 3) = 0u;
    *(_OWORD *)v4 = 0u;
    *((_OWORD *)v4 + 1) = 0u;
    *(_DWORD *)v4 = 26;
    v4[5] = a2;
    xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 72), 10, (uint64_t)v4);
  }
  else
  {
    if (a1)
      ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating attribute");
  }
  return v5;
}

uint64_t xmlSchemaAddAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD **v13;
  int v14;

  v10 = xmlMalloc(0x98uLL);
  v11 = (uint64_t)v10;
  if (v10)
  {
    *v10 = 0u;
    v10[1] = 0u;
    v10[6] = 0u;
    v10[7] = 0u;
    *((_QWORD *)v10 + 18) = 0;
    v10[8] = 0u;
    v10[4] = 0u;
    v10[5] = 0u;
    v10[2] = 0u;
    v10[3] = 0u;
    *(_DWORD *)v10 = 15;
    *((_QWORD *)v10 + 2) = a2;
    *((_QWORD *)v10 + 13) = a4;
    *((_QWORD *)v10 + 14) = a3;
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 32);
    if (a5)
    {
      v13 = (_QWORD **)(v12 + 64);
      v14 = 5;
    }
    else
    {
      v13 = (_QWORD **)(v12 + 72);
      v14 = 10;
    }
    xmlSchemaAddItemSize(v13, v14, v11);
    xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(a1 + 48) + 40), 10, v11);
  }
  else
  {
    if (a1)
      ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating attribute");
  }
  return v11;
}

_QWORD *xmlSchemaAddAttributeUseProhib(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = xmlMalloc(0x28uLL);
  v3 = v2;
  if (v2)
  {
    v2[4] = 0;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    *(_DWORD *)v2 = 2001;
    xmlSchemaAddItemSize((_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 32) + 72), 10, (uint64_t)v2);
  }
  else
  {
    if (a1)
      ++*(_DWORD *)(a1 + 36);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating attribute use prohibition");
  }
  return v3;
}

void xmlSchemaParseUnion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  xmlNode *PropNode;
  xmlNode *v9;
  const xmlChar *NodeContent;
  _QWORD *v11;
  uint64_t v12;
  const xmlChar *i;
  unsigned int v14;
  uint64_t v16;
  xmlChar *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  const xmlChar *v31;
  const xmlChar *v32;

  v5 = *(_QWORD *)(a1 + 160);
  *(_DWORD *)(v5 + 88) |= 0x80u;
  *(_QWORD *)(v5 + 112) = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYSIMPLETYPE);
  v6 = *(_QWORD *)(a3 + 88);
  if (v6)
  {
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 72);
      if (!v7)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v7 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_4;
LABEL_7:
      v6 = *(_QWORD *)(v6 + 48);
      if (!v6)
        goto LABEL_8;
    }
    if (xmlStrEqual(*(const xmlChar **)(v6 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v6 + 16), (const xmlChar *)"memberTypes"))
    {
      goto LABEL_7;
    }
LABEL_4:
    xmlSchemaPIllegalAttrErr((_DWORD *)a1, v6);
    goto LABEL_7;
  }
LABEL_8:
  PropNode = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
  if (PropNode)
    xmlSchemaPValAttrNodeID(a1, PropNode);
  v9 = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"memberTypes");
  if (v9)
  {
    v28 = a3;
    v31 = 0;
    v32 = 0;
    NodeContent = xmlSchemaGetNodeContent(a1, v9);
    v11 = 0;
    *(_QWORD *)(v5 + 96) = NodeContent;
    v27 = v5;
    v29 = (_QWORD *)(v5 + 168);
    v12 = a2;
    while (1)
    {
      for (i = NodeContent; ; ++i)
      {
        v14 = *i;
        if (v14 > 0x20 || ((1 << v14) & 0x100002600) == 0)
          break;
        ++NodeContent;
      }
      v16 = 0;
      while (v14 > 0x20u || ((1 << v14) & 0x100002601) == 0)
        LOBYTE(v14) = i[++v16];
      if (!v16)
      {
LABEL_34:
        v5 = v27;
        a3 = v28;
        break;
      }
      v17 = xmlStrndup(i, v16);
      if (xmlSchemaPValAttrNodeQNameValue(a1, v12, (uint64_t)v9, v17, &v31, &v32))
      {
        if (v17)
          goto LABEL_25;
      }
      else
      {
        v18 = xmlMalloc(0x10uLL);
        if (!v18)
        {
          if (a1)
            ++*(_DWORD *)(a1 + 36);
          __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"xmlSchemaParseUnion, allocating a type link");
          return;
        }
        v19 = v18;
        *v18 = 0;
        v18[1] = 0;
        v20 = v29;
        if (v11)
          v20 = v11;
        *v20 = v18;
        v21 = xmlSchemaNewQNameRef(a1, 4, (uint64_t)v32, (uint64_t)v31);
        if (!v21)
        {
          if (v17)
            xmlFree(v17);
          return;
        }
        v19[1] = v21;
        v11 = v19;
        v12 = a2;
        if (v17)
LABEL_25:
          xmlFree(v17);
      }
      NodeContent = &i[v16];
      if (!i[v16])
        goto LABEL_34;
    }
  }
  v22 = *(_QWORD *)(a3 + 24);
  if (v22)
  {
    if (!*(_QWORD *)(v22 + 72)
      || !xmlStrEqual(*(const xmlChar **)(v22 + 16), (const xmlChar *)"annotation")
      || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v22 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (v23 = xmlSchemaParseAnnotation((_DWORD *)a1, v22, 1), xmlSchemaAddAnnotation(v5, (uint64_t)v23), (v22 = *(_QWORD *)(v22 + 48)) != 0))
    {
      if (*(_QWORD *)(v22 + 72)
        && xmlStrEqual(*(const xmlChar **)(v22 + 16), (const xmlChar *)"simpleType")
        && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v22 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
      {
        v24 = 0;
        while (*(_QWORD *)(v22 + 72)
             && xmlStrEqual(*(const xmlChar **)(v22 + 16), (const xmlChar *)"simpleType")
             && xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v22 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        {
          v25 = xmlSchemaParseSimpleType(a1, a2, v22, 0);
          if (v25)
          {
            v26 = (uint64_t *)(v24 + 8);
            if (!v24)
              v26 = (uint64_t *)(v5 + 56);
            *v26 = v25;
            *(_QWORD *)(v25 + 8) = 0;
            v24 = v25;
          }
          v22 = *(_QWORD *)(v22 + 48);
          if (!v22)
            goto LABEL_54;
        }
      }
      xmlSchemaPContentErr(a1, 3033, a3, v22, 0, (xmlChar *)"(annotation?, simpleType*)");
    }
  }
LABEL_54:
  if (!v9 && !*(_QWORD *)(v5 + 56))
    xmlSchemaPCustomErrExt(a1, 3007, 0, a3, (const xmlChar *)"Either the attribute 'memberTypes' or at least one <simpleType> child must be present");
}

_QWORD *xmlSchemaParseIDCSelectorAndField(_DWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  xmlNode *PropNode;
  uint64_t v13;
  const xmlChar *NodeContent;
  xmlNsPtr *NsList;
  xmlNsPtr *v16;
  uint64_t v17;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const xmlChar **v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  xmlNsPtr *v26;
  uint64_t v27;
  int v28;
  xmlPatternPtr v29;
  xmlNode *v30;
  uint64_t v31;
  _QWORD *v32;

  v8 = *(_QWORD *)(a3 + 88);
  if (v8)
  {
    while (1)
    {
      v9 = *(_QWORD *)(v8 + 72);
      if (!v9)
        break;
      if (xmlStrEqual(*(const xmlChar **)(v9 + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
        goto LABEL_4;
LABEL_7:
      v8 = *(_QWORD *)(v8 + 48);
      if (!v8)
        goto LABEL_8;
    }
    if (xmlStrEqual(*(const xmlChar **)(v8 + 16), (const xmlChar *)"id")
      || xmlStrEqual(*(const xmlChar **)(v8 + 16), (const xmlChar *)"xpath"))
    {
      goto LABEL_7;
    }
LABEL_4:
    xmlSchemaPIllegalAttrErr(a1, v8);
    goto LABEL_7;
  }
LABEL_8:
  v10 = xmlMalloc(0x28uLL);
  v11 = v10;
  if (v10)
  {
    v10[4] = 0;
    *(_OWORD *)v10 = 0u;
    *((_OWORD *)v10 + 1) = 0u;
    PropNode = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"xpath");
    if (PropNode)
    {
      v13 = (uint64_t)PropNode;
      NodeContent = xmlSchemaGetNodeContent((uint64_t)a1, PropNode);
      v11[3] = NodeContent;
      if (!NodeContent)
      {
        v19 = "The XPath expression of the selector is not valid";
        v20 = (uint64_t)a1;
        v21 = v13;
LABEL_35:
        xmlSchemaPCustomErrExt(v20, 3037, 0, v21, (const xmlChar *)v19);
        goto LABEL_39;
      }
      NsList = xmlGetNsList(*(const xmlDoc **)(v13 + 64), *(const xmlNode **)(v13 + 40));
      if (NsList)
      {
        v16 = NsList;
        if (*NsList)
        {
          v17 = 0;
          while (NsList[++v17])
            ;
        }
        else
        {
          LODWORD(v17) = 0;
        }
        v23 = (char *)xmlMalloc(8 * ((2 * (_DWORD)v17) | 1u));
        if (!v23)
        {
          if (a1)
            ++a1[9];
          __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating a namespace array");
          xmlFree(v16);
          xmlSchemaPErr((uint64_t)a1, v13, 3069, "Internal error: xmlSchemaParseIDCSelectorAndField, validating the XPath expression of a IDC selector.\n", 0, 0);
          goto LABEL_39;
        }
        v22 = (const xmlChar **)v23;
        if ((_DWORD)v17)
        {
          v24 = v17;
          v25 = v23 + 8;
          v26 = v16;
          do
          {
            *(v25 - 1) = (*v26)->href;
            v27 = (uint64_t)*v26++;
            *v25 = *(_QWORD *)(v27 + 24);
            v25 += 2;
            --v24;
          }
          while (v24);
        }
        *(_QWORD *)&v23[8 * (2 * v17)] = 0;
        xmlFree(v16);
      }
      else
      {
        v22 = 0;
      }
      if (a4)
        v28 = 4;
      else
        v28 = 2;
      v29 = xmlPatterncompile((const xmlChar *)v11[3], 0, v28, v22);
      v11[4] = v29;
      if (v22)
      {
        xmlFree(v22);
        v29 = (xmlPatternPtr)v11[4];
      }
      if (!v29)
      {
        v19 = "The XPath expression '%s' could not be compiled";
        v20 = (uint64_t)a1;
        v21 = v13;
        goto LABEL_35;
      }
    }
    else
    {
      xmlSchemaPMissingAttrErr((uint64_t)a1, a3, (xmlChar *)"name");
    }
LABEL_39:
    v30 = (xmlNode *)xmlSchemaGetPropNode(a3, (xmlChar *)"id");
    if (v30)
      xmlSchemaPValAttrNodeID((uint64_t)a1, v30);
    v31 = *(_QWORD *)(a3 + 24);
    if (v31)
    {
      if (!*(_QWORD *)(v31 + 72)
        || !xmlStrEqual(*(const xmlChar **)(v31 + 16), (const xmlChar *)"annotation")
        || !xmlStrEqual(*(const xmlChar **)(*(_QWORD *)(v31 + 72) + 16), (const xmlChar *)"http://www.w3.org/2001/XMLSchema")|| (v32 = xmlSchemaParseAnnotation(a1, v31, 1), xmlSchemaAddAnnotation(a2, (uint64_t)v32), (v31 = *(_QWORD *)(v31 + 48)) != 0))
      {
        xmlSchemaPContentErr((uint64_t)a1, 3033, a3, v31, 0, (xmlChar *)"(annotation?)");
      }
    }
    return v11;
  }
  if (a1)
    ++a1[9];
  __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating a 'selector' of an identity-constraint definition");
  return v11;
}

uint64_t xmlSchemaAddComponents(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const xmlChar *v8;
  uint64_t v9;
  xmlHashTable **v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  xmlHashTable *Dict;
  uint64_t ComponentNode;
  const char *v19;
  xmlChar *ComponentQName;
  _QWORD *v21;
  uint64_t v22;
  uint64_t result;
  void *v24;

  if (!a2)
    return 0xFFFFFFFFLL;
  v3 = *(_DWORD *)(a2 + 4);
  if ((v3 & 2) != 0)
    return 0;
  *(_DWORD *)(a2 + 4) = v3 | 2;
  v5 = *(_QWORD *)(a2 + 64);
  if (*(int *)(v5 + 8) < 1)
  {
LABEL_42:
    v21 = *(_QWORD **)(a2 + 40);
    if (v21)
    {
      while (1)
      {
        v22 = v21[3];
        if (v22)
        {
          if ((*(_BYTE *)(v22 + 4) & 2) == 0)
          {
            result = xmlSchemaAddComponents(a1);
            if ((_DWORD)result == -1)
              break;
          }
        }
        v21 = (_QWORD *)*v21;
        if (!v21)
          return 0;
      }
      return result;
    }
    return 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD *)(*(_QWORD *)v5 + 8 * v6);
    switch(*(_DWORD *)v7)
    {
      case 4:
      case 5:
        if ((*(_BYTE *)(v7 + 91) & 0x40) != 0)
          goto LABEL_41;
        v8 = *(const xmlChar **)(v7 + 16);
        v11 = *(_QWORD *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u)
          v11 = *(_QWORD *)(v11 + 80);
        v10 = (xmlHashTable **)(v11 + 56);
        break;
      case 0xE:
        v8 = *(const xmlChar **)(v7 + 16);
        v12 = *(_QWORD *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u)
          v12 = *(_QWORD *)(v12 + 80);
        v10 = (xmlHashTable **)(v12 + 80);
        break;
      case 0xF:
        v8 = *(const xmlChar **)(v7 + 16);
        v13 = *(_QWORD *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u)
          v13 = *(_QWORD *)(v13 + 80);
        v10 = (xmlHashTable **)(v13 + 64);
        break;
      case 0x10:
        if ((*(_BYTE *)(v7 + 72) & 8) != 0)
          goto LABEL_41;
        v8 = *(const xmlChar **)(v7 + 16);
        v14 = *(_QWORD *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u)
          v14 = *(_QWORD *)(v14 + 80);
        v10 = (xmlHashTable **)(v14 + 72);
        break;
      case 0x11:
        if ((*(_BYTE *)(v7 + 56) & 2) != 0)
          goto LABEL_41;
        v8 = *(const xmlChar **)(v7 + 32);
        v15 = *(_QWORD *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u)
          v15 = *(_QWORD *)(v15 + 80);
        v10 = (xmlHashTable **)(v15 + 112);
        break;
      case 0x12:
        v8 = *(const xmlChar **)(v7 + 8);
        v16 = *(_QWORD *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u)
          v16 = *(_QWORD *)(v16 + 80);
        v10 = (xmlHashTable **)(v16 + 88);
        break;
      case 0x16:
      case 0x17:
      case 0x18:
        v8 = *(const xmlChar **)(v7 + 32);
        v9 = *(_QWORD *)(a2 + 80);
        if (*(_DWORD *)a2 > 1u)
          v9 = *(_QWORD *)(v9 + 80);
        v10 = (xmlHashTable **)(v9 + 144);
        break;
      default:
        xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaAddComponents", (const xmlChar *)"Unexpected global component type", 0);
        goto LABEL_41;
    }
    Dict = *v10;
    if (!*v10)
    {
      Dict = xmlHashCreateDict(10, *(xmlDictPtr *)(a1 + 152));
      *v10 = Dict;
      if (!Dict)
        break;
    }
    if (xmlHashAddEntry(Dict, v8, (void *)v7))
    {
      v24 = 0;
      ComponentNode = xmlSchemaGetComponentNode((_DWORD *)v7);
      if (*(_DWORD *)v7 == 1)
      {
        if (*(_DWORD *)(v7 + 160) == 45)
          v19 = "complex type definition";
        else
          v19 = "simple type definition";
      }
      else
      {
        v19 = xmlSchemaItemTypeToStr(*(_DWORD *)v7);
      }
      ComponentQName = xmlSchemaGetComponentQName(&v24, (int *)v7);
      xmlSchemaCustomErr4((_DWORD *)a1, 1761, ComponentNode, (_DWORD *)v7, (const xmlChar *)"A global %s '%s' does already exist", (const xmlChar *)v19, ComponentQName, 0, 0);
      if (v24)
        xmlFree(v24);
    }
LABEL_41:
    ++v6;
    v5 = *(_QWORD *)(a2 + 64);
    if (v6 >= *(int *)(v5 + 8))
      goto LABEL_42;
  }
  xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaAddComponents", (const xmlChar *)"failed to create a component hash table", 0);
  return 0xFFFFFFFFLL;
}

xmlSchemaTypePtr xmlSchemaResolveElementReferences(xmlSchemaTypePtr result, uint64_t a2)
{
  uint64_t v2;
  int flags;
  const xmlChar *v5;
  _QWORD *Elem;
  _QWORD *v7;
  const xmlChar *baseNs;
  _QWORD *Type;

  if (!result)
    return result;
  v2 = (uint64_t)result;
  flags = result->flags;
  if ((flags & 0x100) != 0)
    return result;
  result->flags = flags | 0x100;
  if (!result->subtypes)
  {
    baseNs = result->baseNs;
    if (baseNs)
    {
      Type = xmlSchemaGetType(*(_QWORD *)(a2 + 64), baseNs, (xmlChar *)result->baseType);
      if (Type)
        *(_QWORD *)(v2 + 56) = Type;
      else
        xmlSchemaPResCompAttrErr(a2, v2, *(_QWORD *)(v2 + 72), (uint64_t)"type", *(xmlChar **)(v2 + 104), *(const xmlChar **)(v2 + 112), 1, (uint64_t)"type definition");
    }
  }
  v5 = *(const xmlChar **)(v2 + 120);
  if (!v5)
    goto LABEL_13;
  Elem = xmlSchemaGetElem(*(_QWORD *)(a2 + 64), v5, *(xmlChar **)(v2 + 128));
  if (!Elem)
  {
    xmlSchemaPResCompAttrErr(a2, v2, 0, (uint64_t)"substitutionGroup", *(xmlChar **)(v2 + 120), *(const xmlChar **)(v2 + 128), 14, 0);
LABEL_13:
    result = *(xmlSchemaTypePtr *)(v2 + 56);
    goto LABEL_14;
  }
  v7 = Elem;
  result = (xmlSchemaTypePtr)xmlSchemaResolveElementReferences(Elem, a2);
  *(_QWORD *)(v2 + 152) = v7;
  if (*(_QWORD *)(v2 + 56))
    return result;
  result = (xmlSchemaTypePtr)v7[7];
  if (result)
    goto LABEL_18;
  result = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYTYPE);
  *(_QWORD *)(v2 + 56) = result;
LABEL_14:
  if (!result && !*(_QWORD *)(v2 + 104) && !*(_QWORD *)(v2 + 120))
  {
    result = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYTYPE);
LABEL_18:
    *(_QWORD *)(v2 + 56) = result;
  }
  return result;
}

uint64_t xmlSchemaAttributeGroupExpandRefs(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(a2 + 112);
  if (!v2)
    return 0;
  v3 = *(_DWORD *)(a2 + 72);
  if ((v3 & 1) != 0)
    return 0;
  *(_DWORD *)(a2 + 72) = v3 | 1;
  if (xmlSchemaExpandAttributeGroupRefs(a1, (_DWORD *)a2, (uint64_t *)(a2 + 80), v2, 0) == -1)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t xmlSchemaFixupSimpleTypeStageOne(_DWORD *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t result;
  int v6;
  int v7;
  const char *v8;

  if (*(_DWORD *)a2 != 4)
    return 0;
  v3 = *(_DWORD *)(a2 + 88);
  if ((v3 & 0x20000000) != 0)
    return 0;
  *(_DWORD *)(a2 + 88) = v3 | 0x20000000;
  if ((v3 & 0x40) != 0)
  {
    if (*(_QWORD *)(a2 + 56))
      return 0;
    v8 = "list type has no item-type assigned";
LABEL_21:
    xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaFixupSimpleTypeStageOne", (const xmlChar *)v8, 0);
    return 0xFFFFFFFFLL;
  }
  if ((v3 & 0x80) != 0)
  {
    if (*(_QWORD *)(a2 + 168))
      return 0;
    v8 = "union type has no member-types assigned";
    goto LABEL_21;
  }
  v4 = *(_QWORD *)(a2 + 112);
  if (!v4)
  {
    v8 = "type has no base-type assigned";
    goto LABEL_21;
  }
  if (*(_DWORD *)v4 != 1 && (*(_BYTE *)(v4 + 91) & 0x20) == 0)
  {
    result = xmlSchemaFixupSimpleTypeStageOne();
    if ((_DWORD)result == -1)
      return result;
    v4 = *(_QWORD *)(a2 + 112);
  }
  v6 = *(_DWORD *)(v4 + 88);
  if ((v6 & 0x100) != 0)
  {
    result = 0;
    v7 = *(_DWORD *)(a2 + 88) | 0x100;
    goto LABEL_23;
  }
  if ((v6 & 0x40) != 0)
  {
    result = 0;
    *(_DWORD *)(a2 + 88) |= 0x40u;
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(v4 + 56);
    return result;
  }
  if ((v6 & 0x80) != 0)
  {
    result = 0;
    v7 = *(_DWORD *)(a2 + 88) | 0x80;
LABEL_23:
    *(_DWORD *)(a2 + 88) = v7;
    return result;
  }
  return 0;
}

uint64_t xmlSchemaFixupSimpleTypeStageTwo(xmlSchemaParserCtxt *ctxt, xmlSchemaTypePtr typeDecl, uint64_t a3, xmlSchemaFacetPtr i)
{
  int flags;
  int v7;
  xmlSchemaTypePtr baseType;
  xmlSchemaTypeLinkPtr *p_memberTypes;
  xmlSchemaTypeLinkPtr memberTypes;
  uint64_t type;
  uint64_t v12;
  _QWORD *v13;
  _xmlSchemaTypeLink *next;
  _QWORD *p_next;
  _QWORD *v16;
  int *v17;
  int v18;
  const char *v19;
  const char *v20;
  const char *v21;
  uint64_t result;
  const char *v23;
  xmlSchemaParserCtxtPtr v24;
  int v25;
  int v26;
  int v27;
  xmlSchemaTypeLinkPtr *v28;
  xmlSchemaTypeLinkPtr v29;
  xmlSchemaParserCtxtPtr v30;
  int v31;
  void *v32;
  xmlSchemaTypePtr subtypes;
  xmlSchemaFacetPtr facets;
  xmlSchemaTypePtr v35;
  char v36;
  xmlSchemaTypePtr v37;
  int *v38;
  int v39;
  int v40;
  xmlSchemaTypePtr v41;
  int v42;
  int v43;
  xmlSchemaTypeLinkPtr *v44;
  xmlSchemaTypeLinkPtr v45;
  xmlSchemaTypeLinkPtr v46;
  xmlSchemaTypeLinkPtr v47;
  uint64_t v48;
  xmlSchemaFacetPtr v49;
  char v50;
  int *v51;
  const char *v52;
  xmlSchemaParserCtxtPtr v53;
  int v54;
  xmlSchemaFacetPtr v55;
  void *v56;
  void *v57;
  void *v58;

  if (typeDecl->type != XML_SCHEMA_TYPE_SIMPLE)
    return 0xFFFFFFFFLL;
  flags = typeDecl->flags;
  if ((flags & 0x400000) != 0)
    return 0;
  v7 = *((_DWORD *)ctxt + 9);
  typeDecl->flags = flags | 0x400000;
  typeDecl->contentType = XML_SCHEMA_CONTENT_SIMPLE;
  baseType = typeDecl->baseType;
  if (!baseType)
  {
    v20 = "xmlSchemaFixupSimpleTypeStageTwo";
    v21 = "missing baseType";
LABEL_27:
    xmlSchemaInternalErr2(ctxt, (const xmlChar *)v20, (const xmlChar *)v21, 0);
    return 0xFFFFFFFFLL;
  }
  if (baseType->type != XML_SCHEMA_TYPE_BASIC && (baseType->flags & 0x400000) == 0)
    xmlSchemaTypeFixup((uint64_t)baseType, ctxt);
  p_memberTypes = &typeDecl->memberTypes;
  memberTypes = typeDecl->memberTypes;
  if (memberTypes)
  {
    while (1)
    {
      type = (uint64_t)memberTypes->type;
      if (*(_DWORD *)type != 1 && (*(_BYTE *)(type + 90) & 0x40) == 0)
      {
        xmlSchemaTypeFixup(type, ctxt);
        type = (uint64_t)memberTypes->type;
      }
      if ((*(_BYTE *)(type + 88) & 0x80) != 0)
      {
        while (1)
        {
          if (*(_DWORD *)type != 4)
            goto LABEL_20;
          v12 = *(_QWORD *)(type + 168);
          if (v12)
            break;
          type = *(_QWORD *)(type + 112);
          if (!type)
            goto LABEL_20;
        }
        memberTypes->type = *(xmlSchemaTypePtr *)(v12 + 8);
        v13 = *(_QWORD **)v12;
        if (*(_QWORD *)v12)
          break;
      }
LABEL_20:
      memberTypes = memberTypes->next;
      if (!memberTypes)
        goto LABEL_21;
    }
    next = memberTypes->next;
    p_next = &memberTypes->next;
    while (1)
    {
      v16 = xmlMalloc(0x10uLL);
      if (!v16)
        break;
      v16[1] = v13[1];
      *p_next = v16;
      *v16 = next;
      v13 = (_QWORD *)*v13;
      p_next = v16;
      if (!v13)
        goto LABEL_20;
    }
    if (ctxt)
      ++*((_DWORD *)ctxt + 9);
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating a type link");
    return 0xFFFFFFFFLL;
  }
LABEL_21:
  v17 = (int *)typeDecl->baseType;
  v58 = 0;
  if (!v17)
  {
    v23 = "No base type existent";
LABEL_33:
    v24 = ctxt;
    v25 = 3008;
LABEL_34:
    xmlSchemaPCustomErrExt((uint64_t)v24, v25, typeDecl, 0, (const xmlChar *)v23);
    goto LABEL_58;
  }
  v18 = *v17;
  if (*v17 != 4 && (v18 != 1 || v17[40] == 45))
  {
    xmlSchemaGetComponentQName(&v58, v17);
    v19 = "The base type '%s' is not a simple type";
LABEL_55:
    v30 = ctxt;
    v31 = 3008;
    goto LABEL_56;
  }
  v26 = typeDecl->flags;
  if ((v26 & 0xC0) != 0 && (v26 & 4) == 0 && v18 != 4 && (v18 != 1 || v17[40] != 46))
  {
    xmlSchemaGetComponentQName(&v58, v17);
    v19 = "A type, derived by list or union, must have the simple ur-type definition as base type, not '%s'";
    goto LABEL_55;
  }
  if ((v26 & 0x1C0) == 0)
  {
    v23 = "The variety is absent";
    goto LABEL_33;
  }
  v27 = v17[22];
  if ((v27 & 0x400) != 0)
  {
    xmlSchemaGetComponentQName(&v58, v17);
    v19 = "The 'final' of its base type '%s' must not contain 'restriction'";
    v30 = ctxt;
    v31 = 3010;
    goto LABEL_56;
  }
  v58 = 0;
  if (typeDecl->type != XML_SCHEMA_TYPE_SIMPLE)
  {
    v20 = "xmlSchemaCheckCOSSTRestricts";
    v21 = "given type is not a user-derived simpleType";
    goto LABEL_27;
  }
  if ((v26 & 0x100) != 0)
  {
    if ((v27 & 0x100) != 0)
    {
      facets = typeDecl->facets;
      if (facets)
      {
        v21 = "failed to get primitive type";
        v35 = typeDecl;
        while (v35->builtInType != 46 && (v35->flags & 0x4000) == 0)
        {
          v35 = v35->baseType;
          if (!v35)
            goto LABEL_76;
        }
        v36 = 0;
        do
        {
          while (!xmlSchemaIsBuiltInTypeFacet(v35, facets->type))
          {
            xmlSchemaPIllegalFacetAtomicErr((uint64_t)ctxt, (uint64_t)typeDecl, (uint64_t)v35, (int *)facets);
            facets = facets->next;
            v36 = 1;
            if (!facets)
              goto LABEL_58;
          }
          facets = facets->next;
        }
        while (facets);
        if ((v36 & 1) != 0)
          goto LABEL_58;
      }
      goto LABEL_84;
    }
    xmlSchemaGetComponentQName(&v58, v17);
    v19 = "The base type '%s' is not an atomic simple type";
    v30 = ctxt;
    v31 = 3011;
LABEL_56:
    xmlSchemaPCustomErrExt((uint64_t)v30, v31, typeDecl, 0, (const xmlChar *)v19);
    v32 = v58;
    if (!v58)
      goto LABEL_58;
    goto LABEL_57;
  }
  if ((v26 & 0x40) != 0)
  {
    subtypes = typeDecl->subtypes;
    if (subtypes)
    {
      if (subtypes->type == XML_SCHEMA_TYPE_SIMPLE)
      {
        if ((subtypes->flags & 0x400000) == 0)
          xmlSchemaTypeFixup((uint64_t)typeDecl->subtypes, ctxt);
      }
      else if (subtypes->type != XML_SCHEMA_TYPE_BASIC || subtypes->builtInType == 45)
      {
        goto LABEL_70;
      }
      v40 = subtypes->flags;
      if ((v40 & 0x180) != 0)
      {
        if ((v40 & 0x80) == 0)
        {
LABEL_104:
          v41 = typeDecl->baseType;
          if (v41->type == XML_SCHEMA_TYPE_BASIC && v41->builtInType == 46)
          {
            if ((v40 & 0x800) == 0)
            {
              for (i = typeDecl->facets; i; i = i->next)
              {
                if (i->type != XML_SCHEMA_FACET_WHITESPACE)
                {
                  xmlSchemaPIllegalFacetListUnionErr((uint64_t)ctxt, 3017, (uint64_t)typeDecl, (int *)i);
                  goto LABEL_58;
                }
              }
              goto LABEL_84;
            }
            xmlSchemaGetComponentQName(&v58, (int *)subtypes);
            v19 = "The final of its item type '%s' must not contain 'list'";
            v30 = ctxt;
            v31 = 3016;
            goto LABEL_56;
          }
          v43 = v41->flags;
          if ((v43 & 0x40) == 0)
          {
            xmlSchemaGetComponentQName(&v58, (int *)v41);
            v19 = "The base type '%s' must be a list type";
            v30 = ctxt;
            v31 = 3018;
            goto LABEL_56;
          }
          if ((v43 & 0x400) != 0)
          {
            xmlSchemaGetComponentQName(&v58, (int *)v41);
            v19 = "The 'final' of the base type '%s' must not contain 'restriction'";
            v30 = ctxt;
            v31 = 3019;
            goto LABEL_56;
          }
          v51 = (int *)v41->subtypes;
          if (v51 && (*v51 == 4 || *v51 == 1 && v51[40] != 45))
          {
            if (subtypes != (xmlSchemaTypePtr)v51
              && xmlSchemaCheckCOSSTDerivedOK(ctxt, (uint64_t)subtypes, (uint64_t)v51, 0))
            {
              v56 = 0;
              v57 = 0;
              xmlSchemaGetComponentQName(&v58, (int *)subtypes);
              xmlSchemaGetComponentQName(&v57, v51);
              xmlSchemaGetComponentQName(&v56, (int *)typeDecl->baseType);
              v52 = "The item type '%s' is not validly derived from the item type '%s' of the base type '%s'";
              v53 = ctxt;
              v54 = 3020;
              goto LABEL_156;
            }
            v55 = typeDecl->facets;
            if (v55)
            {
              v50 = 0;
              do
              {
                while (v55->type - 1006 > 5)
                {
                  xmlSchemaPIllegalFacetListUnionErr((uint64_t)ctxt, 3021, (uint64_t)typeDecl, (int *)v55);
                  v55 = v55->next;
                  v50 = 1;
                  if (!v55)
                    goto LABEL_58;
                }
                v55 = v55->next;
              }
              while (v55);
LABEL_169:
              if ((v50 & 1) != 0)
                goto LABEL_58;
            }
            goto LABEL_84;
          }
          v21 = "failed to eval the item type of a base type";
          goto LABEL_76;
        }
        v44 = &subtypes->memberTypes;
        do
        {
          v44 = (xmlSchemaTypeLinkPtr *)*v44;
          if (!v44)
            goto LABEL_104;
          v45 = v44[1];
        }
        while ((BYTE1(v45[5].type) & 1) != 0);
        xmlSchemaGetComponentQName(&v58, (int *)v45);
        v19 = "The item type is a union type, but the member type '%s' of this item type is not atomic";
      }
      else
      {
        xmlSchemaGetComponentQName(&v58, (int *)subtypes);
        v19 = "The item type '%s' does not have a variety of atomic or union";
      }
      v30 = ctxt;
      v31 = 3015;
      goto LABEL_56;
    }
LABEL_70:
    v21 = "failed to evaluate the item type";
LABEL_76:
    v20 = "xmlSchemaCheckCOSSTRestricts";
    goto LABEL_27;
  }
  if ((v26 & 0x80) == 0)
    goto LABEL_84;
  v28 = &typeDecl->memberTypes;
  while (1)
  {
    v28 = (xmlSchemaTypeLinkPtr *)*v28;
    if (!v28)
      break;
    v29 = v28[1];
    if (LODWORD(v29->next) != 1 && (BYTE2(v29[5].type) & 0x40) == 0)
    {
      xmlSchemaTypeFixup((uint64_t)v28[1], ctxt);
      v29 = v28[1];
    }
    if (((uint64_t)v29[5].type & 0x140) == 0)
    {
      xmlSchemaGetComponentQName(&v58, (int *)v29);
      v19 = "The member type '%s' is neither an atomic, nor a list type";
      v30 = ctxt;
      v31 = 3023;
      goto LABEL_56;
    }
  }
  v37 = typeDecl->baseType;
  if (v37->builtInType != 46)
  {
    v42 = v37->flags;
    if ((v42 & 0x80) != 0)
    {
      if ((v42 & 0x400) == 0)
      {
        v46 = *p_memberTypes;
        if (*p_memberTypes)
        {
          do
          {
            if (v37->type != XML_SCHEMA_TYPE_SIMPLE)
              break;
            v47 = v37->memberTypes;
            if (v47)
              goto LABEL_129;
            v37 = v37->baseType;
          }
          while (v37);
          v47 = 0;
          do
          {
LABEL_129:
            if (v47)
            {
              v48 = (uint64_t)v46->type;
              a3 = (uint64_t)v47->type;
              if (v48 != a3 && xmlSchemaCheckCOSSTDerivedOK(ctxt, v48, a3, 0))
              {
                v56 = 0;
                v57 = 0;
                xmlSchemaGetComponentQName(&v58, (int *)v46->type);
                xmlSchemaGetComponentQName(&v57, (int *)v47->type);
                xmlSchemaGetComponentQName(&v56, (int *)typeDecl->baseType);
                v52 = "The member type %s is not validly derived from its corresponding member type %s of the base type %s";
                v53 = ctxt;
                v54 = 3028;
LABEL_156:
                xmlSchemaPCustomErrExt((uint64_t)v53, v54, typeDecl, 0, (const xmlChar *)v52);
                if (v58)
                  xmlFree(v58);
                if (v57)
                  xmlFree(v57);
                v32 = v56;
                if (!v56)
                {
LABEL_58:
                  if (v7 == *((_DWORD *)ctxt + 9))
                    return 0;
                  else
                    return *((unsigned int *)ctxt + 8);
                }
LABEL_57:
                xmlFree(v32);
                goto LABEL_58;
              }
              v47 = v47->next;
            }
            else
            {
              xmlSchemaInternalErr2(ctxt, (const xmlChar *)"xmlSchemaCheckCOSSTRestricts", (const xmlChar *)"different number of member types in base", 0);
            }
            v46 = v46->next;
          }
          while (v46);
        }
        v49 = typeDecl->facets;
        if (v49)
        {
          v50 = 0;
          do
          {
            while ((v49->type & 0xFFFFFFFE) == 0x3EE)
            {
              v49 = v49->next;
              if (!v49)
                goto LABEL_169;
            }
            xmlSchemaPIllegalFacetListUnionErr((uint64_t)ctxt, 3029, (uint64_t)typeDecl, (int *)v49);
            v49 = v49->next;
            v50 = 1;
          }
          while (v49);
          goto LABEL_58;
        }
        goto LABEL_84;
      }
      xmlSchemaGetComponentQName(&v58, (int *)v37);
      v19 = "The 'final' of its base type '%s' must not contain 'restriction'";
      v30 = ctxt;
      v31 = 3026;
    }
    else
    {
      xmlSchemaGetComponentQName(&v58, (int *)v37);
      v19 = "The base type '%s' is not a union type";
      v30 = ctxt;
      v31 = 3027;
    }
    goto LABEL_56;
  }
  while (1)
  {
    p_memberTypes = (xmlSchemaTypeLinkPtr *)*p_memberTypes;
    if (!p_memberTypes)
      break;
    v38 = (int *)p_memberTypes[1];
    if (v38)
      v39 = (v38[22] >> 12) & 1;
    else
      v39 = 0;
    if (v39)
    {
      xmlSchemaGetComponentQName(&v58, v38);
      v19 = "The 'final' of member type '%s' contains 'union'";
      v30 = ctxt;
      v31 = 3024;
      goto LABEL_56;
    }
  }
  if (typeDecl->facetSet)
  {
    v23 = "No facets allowed";
    v24 = ctxt;
    v25 = 3025;
    goto LABEL_34;
  }
LABEL_84:
  result = xmlSchemaCheckFacetValues(typeDecl, ctxt, a3, (const xmlChar *)i);
  if ((_DWORD)result == -1)
    return result;
  if ((_DWORD)result)
    goto LABEL_58;
  if (typeDecl->facetSet || typeDecl->baseType->facetSet)
  {
    result = xmlSchemaDeriveAndValidateFacets(ctxt, (uint64_t)typeDecl);
    if ((_DWORD)result == -1)
      return result;
    if ((_DWORD)result)
      goto LABEL_58;
  }
  result = xmlSchemaTypeFixupWhitespace((uint64_t)typeDecl);
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result)
      xmlSchemaTypeFixupOptimFacets((uint64_t)typeDecl);
    goto LABEL_58;
  }
  return result;
}

void xmlSchemaCheckAttrPropsCorrect(_DWORD *a1, uint64_t a2)
{
  uint64_t v2;
  xmlChar *v4;
  uint64_t v6;
  int v7;
  int v8;

  v2 = *(_QWORD *)(a2 + 96);
  if (v2)
  {
    v4 = *(xmlChar **)(a2 + 88);
    if (v4)
    {
      v6 = *(_QWORD *)(a2 + 96);
      do
      {
        if (*(_DWORD *)v6 == 5)
          break;
        v7 = *(_DWORD *)(v6 + 160);
        if (v7 == 45)
          break;
        if (*(_DWORD *)v6 == 1)
        {
          if (v7 == 23)
          {
            xmlSchemaCustomErr4(a1, 3090, 0, (_DWORD *)a2, (const xmlChar *)"Value constraints are not allowed if the type definition is or is derived from xs:ID", 0, 0, 0, 0);
            return;
          }
          if (v7 == 46)
            break;
        }
        v6 = *(_QWORD *)(v6 + 56);
      }
      while (v6);
      v8 = xmlSchemaVCheckCVCSimpleType((uint64_t)a1, *(xmlNode **)(a2 + 104), v2, v4, (xmlSchemaValPtr *)(a2 + 136), 1u, 1, 0);
      if (v8)
      {
        if (v8 < 0)
          xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaCheckAttrPropsCorrect", (const xmlChar *)"calling xmlSchemaVCheckCVCSimpleType()", 0);
        else
          xmlSchemaCustomErr4(a1, 3079, 0, (_DWORD *)a2, (const xmlChar *)"The value of the value constraint is not valid", 0, 0, 0, 0);
      }
    }
  }
}

void xmlSchemaCheckAttrUsePropsCorrect(_DWORD *a1, uint64_t a2)
{
  xmlChar *v3;
  uint64_t v4;
  _DWORD *v5;
  const char *v6;
  _DWORD *v7;
  xmlSchemaValPtr *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  xmlSchemaVal *v13;

  if (a2)
  {
    v3 = *(xmlChar **)(a2 + 56);
    if (v3)
    {
      v4 = *(_QWORD *)(a2 + 24);
      if (v4)
      {
        if (*(_DWORD *)v4 == 15)
        {
          v5 = a1;
          if (*(_QWORD *)(v4 + 88) && (*(_BYTE *)(v4 + 121) & 2) != 0 && (*(_BYTE *)(a2 + 32) & 1) == 0)
          {
            v6 = "The attribute declaration has a 'fixed' value constraint , thus the attribute use must also have a 'fix"
                 "ed' value constraint";
            v7 = (_DWORD *)a2;
LABEL_26:
            xmlSchemaPCustomErrExt((uint64_t)a1, 3078, v7, 0, (const xmlChar *)v6);
            return;
          }
          v8 = (xmlSchemaValPtr *)(a2 + 64);
          if (*(_QWORD *)(a2 + 64) && (v9 = *(_QWORD *)(v4 + 96)) != 0)
          {
            v10 = *(_QWORD *)(v4 + 96);
            do
            {
              if (*(_DWORD *)v10 == 5)
                break;
              v11 = *(_DWORD *)(v10 + 160);
              if (v11 == 45)
                break;
              if (*(_DWORD *)v10 == 1)
              {
                if (v11 == 23)
                {
                  xmlSchemaCustomErr4(a1, 3089, 0, (_DWORD *)a2, (const xmlChar *)"Value constraints are not allowed if the type definition is or is derived from xs:ID", 0, 0, 0, 0);
                  return;
                }
                if (v11 == 46)
                  break;
              }
              v10 = *(_QWORD *)(v10 + 56);
            }
            while (v10);
            v12 = xmlSchemaVCheckCVCSimpleType((uint64_t)a1, *(xmlNode **)(a2 + 40), v9, v3, (xmlSchemaValPtr *)(a2 + 64), 1u, 1, 0);
            if (!v12)
            {
              v4 = *(_QWORD *)(a2 + 24);
              goto LABEL_22;
            }
            if (v12 < 0)
              xmlSchemaInternalErr2(v5, (const xmlChar *)"xmlSchemaCheckAttrUsePropsCorrect", (const xmlChar *)"calling xmlSchemaVCheckCVCSimpleType()", 0);
            else
              xmlSchemaCustomErr4(v5, 3089, 0, (_DWORD *)a2, (const xmlChar *)"The value of the value constraint is not valid", 0, 0, 0, 0);
          }
          else
          {
LABEL_22:
            v13 = *(xmlSchemaVal **)(v4 + 136);
            if (v13 && (*(_BYTE *)(v4 + 120) & 1) == 0 && !xmlSchemaAreValuesEqual(*v8, v13))
            {
              v6 = "The 'fixed' value constraint of the attribute use must match the attribute declaration's value constraint '%s'";
              a1 = v5;
              v7 = (_DWORD *)a2;
              goto LABEL_26;
            }
          }
        }
      }
    }
  }
}

uint64_t xmlSchemaCheckAGPropsCorrect(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  int v15;
  uint64_t v16;
  xmlChar *v17;
  uint64_t v18;
  xmlChar *ComponentDesignation;
  xmlChar *v21;

  v2 = *(_QWORD *)(a2 + 112);
  if (v2)
  {
    v3 = *(unsigned int *)(v2 + 8);
    if ((int)v3 >= 2)
    {
      v5 = (_DWORD *)result;
      v6 = 0;
      v7 = v3 - 2;
      v8 = v3 - 1;
      do
      {
        v9 = *(_QWORD *)(*(_QWORD *)v2 + 8 * (v3 - 1));
        if (v3 == 1)
        {
LABEL_9:
          for (i = *(_QWORD *)(*(_QWORD *)(v9 + 24) + 96); i; i = *(_QWORD *)(i + 56))
          {
            if (*(_DWORD *)i == 5)
              break;
            v15 = *(_DWORD *)(i + 160);
            if (v15 == 45)
              break;
            if (*(_DWORD *)i == 1)
            {
              if (v15 == 23)
              {
                if (!v6)
                  goto LABEL_25;
                v21 = 0;
                v18 = *(_QWORD *)(a2 + 64);
                ComponentDesignation = xmlSchemaGetComponentDesignation(&v21, (int *)v9);
                xmlSchemaCustomErr4(v5, 3087, v18, (_DWORD *)a2, (const xmlChar *)"There must not exist more than one attribute declaration of type 'xs:ID' (or derived from 'xs:ID'). The %s violates this constraint", ComponentDesignation, 0, 0, 0);
                if (v21)
                  xmlFree(v21);
                result = xmlSchemaItemListRemove(v2, (int)v3 - 1);
                if ((_DWORD)result != -1)
                {
LABEL_25:
                  v6 = 1;
                  break;
                }
                return result;
              }
              if (v15 == 46)
                break;
            }
          }
        }
        else
        {
          v10 = *(_QWORD *)(v9 + 24);
          v11 = *(_QWORD *)v2 + 8 * v7;
          v12 = v8;
          while (1)
          {
            v13 = *(_QWORD *)(*(_QWORD *)v11 + 24);
            if (*(_QWORD *)(v10 + 16) == *(_QWORD *)(v13 + 16) && *(_QWORD *)(v10 + 112) == *(_QWORD *)(v13 + 112))
              break;
            --v12;
            v11 -= 8;
            if (v12 <= 0)
              goto LABEL_9;
          }
          v21 = 0;
          v16 = *(_QWORD *)(a2 + 64);
          v17 = xmlSchemaGetComponentDesignation(&v21, (int *)v9);
          xmlSchemaCustomErr4(v5, 3087, v16, (_DWORD *)a2, (const xmlChar *)"Duplicate %s", v17, 0, 0, 0);
          if (v21)
            xmlFree(v21);
          result = xmlSchemaItemListRemove(v2, (int)v3 - 1);
          if ((_DWORD)result == -1)
            return result;
        }
        --v7;
        --v8;
      }
      while (v3-- > 1);
    }
  }
  return result;
}

uint64_t xmlSchemaCheckSRCRedefineSecond(uint64_t result)
{
  _QWORD *v1;
  xmlSchemaParserCtxt *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD **)(*(_QWORD *)(result + 48) + 56);
  if (v1)
  {
    v2 = (xmlSchemaParserCtxt *)result;
    do
    {
      v3 = v1[3];
      if (v3)
      {
        v4 = v1[1];
        if ((*(_DWORD *)v4 - 4) >= 2)
        {
          if (*(_DWORD *)v4 == 16)
          {
            result = xmlSchemaCheckDerivationOKRestriction2to4(v2, 1, (int *)v4, (int *)v3, *(int **)(v4 + 112), *(uint64_t ***)(v3 + 112), *(_QWORD *)(v4 + 80), *(_QWORD *)(v3 + 80));
            if ((_DWORD)result == -1)
              return result;
          }
        }
        else
        {
          *(_QWORD *)(v3 + 16) = 0;
        }
      }
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  return result;
}

uint64_t xmlSchemaFixupComplexType(uint64_t a1, uint64_t a2)
{
  int v3;
  int v5;
  xmlSchemaType *v6;
  uint64_t v7;
  int v8;
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  const char *v19;
  xmlSchemaTypeType type;
  xmlSchemaTypePtr contentTypeDef;
  _QWORD *v22;
  int *v23;
  int v24;
  BOOL v25;
  int v26;
  xmlSchemaTypePtr v27;
  xmlSchemaType *v28;
  xmlSchemaType *v29;
  int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  char v34;
  int v35;
  uint64_t v36;
  uint64_t ComponentNode;
  xmlSchemaTypePtr subtypes;
  const xmlChar *id;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  const xmlChar *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  int v95;
  int v96;
  void *v97;

  if (*(_DWORD *)a2 == 1)
    return 0;
  v3 = *(_DWORD *)(a2 + 88);
  if ((v3 & 0x400000) != 0)
    return 0;
  v5 = *(_DWORD *)(a1 + 36);
  v6 = *(xmlSchemaType **)(a2 + 112);
  *(_DWORD *)(a2 + 88) = v3 | 0x400000;
  if (!v6)
  {
    v11 = "xmlSchemaFixupComplexType";
    v12 = "missing baseType";
LABEL_18:
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)v11, (const xmlChar *)v12, 0);
LABEL_19:
    *(_DWORD *)(a2 + 88) |= 0x800000u;
    return 0xFFFFFFFFLL;
  }
  if (v6->type != XML_SCHEMA_TYPE_BASIC && (v6->flags & 0x400000) == 0)
    xmlSchemaTypeFixup(v6, (xmlSchemaParserCtxtPtr)a1);
  if ((v6->flags & 0x800000) != 0)
    return 0;
  v7 = *(_QWORD *)(a2 + 112);
  v8 = *(_DWORD *)(a2 + 92);
  if ((v8 | 2) != 6)
  {
    if (*(_DWORD *)v7 == 5 || *(_DWORD *)(v7 + 160) == 45)
      goto LABEL_38;
    v97 = 0;
    v14 = *(_QWORD *)(a2 + 72);
    xmlSchemaFormatQName(&v97, *(const xmlChar **)(v7 + 208), *(xmlChar **)(v7 + 16));
    v15 = "If using <complexContent>, the base type is expected to be a complex type. The base type '%s' is a simple type";
    v16 = a1;
    v17 = (_DWORD *)a2;
    v18 = v14;
LABEL_32:
    xmlSchemaPCustomErrExt(v16, 3076, v17, v18, (const xmlChar *)v15);
    if (v97)
      xmlFree(v97);
LABEL_34:
    *(_DWORD *)(a2 + 88) |= 0x800000u;
    return *(unsigned int *)(a1 + 32);
  }
  if (*(_DWORD *)v7 == 4 || *(_DWORD *)v7 == 1 && *(_DWORD *)(v7 + 160) != 45)
  {
    if ((*(_BYTE *)(a2 + 88) & 2) != 0)
      goto LABEL_38;
    v97 = 0;
    xmlSchemaFormatQName(&v97, *(const xmlChar **)(v7 + 208), *(xmlChar **)(v7 + 16));
    v15 = "If using <simpleContent> and <restriction>, the base type must be a complex type. The base type '%s' is a simple type";
    goto LABEL_25;
  }
  v9 = *(_DWORD *)(v7 + 92);
  if (v9 == 3)
  {
    if ((*(_BYTE *)(a2 + 88) & 4) == 0)
    {
      v19 = "If <simpleContent> and <extension> is used, the base type must be a simple type. The base type '%s' is a complex type";
LABEL_31:
      v97 = 0;
      xmlSchemaFormatQName(&v97, *(const xmlChar **)(v7 + 208), *(xmlChar **)(v7 + 16));
      v16 = a1;
      v17 = (_DWORD *)a2;
      v18 = 0;
      v15 = v19;
      goto LABEL_32;
    }
    if (!xmlSchemaIsParticleEmptiable(*(_QWORD *)(v7 + 56)))
    {
      v19 = "If <simpleContent> and <restriction> is used, the base type must be a simple type or a complex type with mix"
            "ed content and particle emptiable. The base type '%s' is none of those";
      goto LABEL_31;
    }
    if (*(_QWORD *)(a2 + 192))
      goto LABEL_38;
    v97 = 0;
    xmlSchemaFormatQName(&v97, *(const xmlChar **)(v7 + 208), *(xmlChar **)(v7 + 16));
    v15 = "A <simpleType> is expected among the children of <restriction>, if <simpleContent> is used and the base type '"
          "%s' is a complex type";
LABEL_25:
    v16 = a1;
    v17 = (_DWORD *)a2;
    v18 = 0;
    goto LABEL_32;
  }
  if (v9 != 4 && v9 != 6)
  {
    if ((*(_DWORD *)(a2 + 88) & 4) != 0)
      v19 = "If <simpleContent> and <restriction> is used, the base type must be a simple type or a complex type with mix"
            "ed content and particle emptiable. The base type '%s' is none of those";
    else
      v19 = "If <simpleContent> and <extension> is used, the base type must be a simple type. The base type '%s' is a complex type";
    goto LABEL_31;
  }
  if (!*(_QWORD *)(v7 + 192))
  {
    v10 = "Internal error: xmlSchemaCheckSRCCT, '%s', base type has no content type";
LABEL_55:
    xmlSchemaPCustomErrExt(a1, 3069, (_DWORD *)a2, 0, (const xmlChar *)v10);
    goto LABEL_19;
  }
LABEL_38:
  if (v8 != 4)
  {
    v22 = *(_QWORD **)(a2 + 56);
    if (v22)
    {
      if (*(_DWORD *)v22 != 25
        || ((v23 = (int *)v22[3], v24 = *v23, *v23 != 6) ? (v25 = v24 == 8) : (v25 = 1),
            !v25 && (v24 != 7 || *((_DWORD *)v22 + 8)) || *((_QWORD *)v23 + 3)))
      {
        v34 = 0;
        goto LABEL_88;
      }
      v26 = *(_DWORD *)(a2 + 88);
      if ((v26 & 1) != 0)
      {
        if (v24 == 6)
        {
LABEL_84:
          v34 = 1;
LABEL_88:
          *(_DWORD *)(a2 + 92) = 2;
          v35 = *(_DWORD *)(a2 + 88);
          if ((v35 & 4) != 0 || v6->contentType == XML_SCHEMA_CONTENT_EMPTY)
          {
            if ((v35 & 1) != 0)
              *(_DWORD *)(a2 + 92) = 3;
          }
          else
          {
            if ((v35 & 1) != 0)
              *(_DWORD *)(a2 + 92) = 3;
            v36 = v22[3];
            if (v36 && *(_DWORD *)v36 == 8)
            {
              ComponentNode = xmlSchemaGetComponentNode((_DWORD *)a2);
              xmlSchemaCustomErr4((_DWORD *)a1, 3091, ComponentNode, 0, (const xmlChar *)"The type has an 'all' model group in its {content type} and thus cannot be derived from a non-empty type, since this would produce a 'sequence' model group containing the 'all' model group; 'all' model groups are not allowed to appear inside other model groups",
                0,
                0,
                0,
                0);
              goto LABEL_110;
            }
            subtypes = v6->subtypes;
            if (!subtypes)
              goto LABEL_109;
            id = subtypes->id;
            if (id && *(_DWORD *)id == 8)
            {
              v40 = xmlSchemaGetComponentNode((_DWORD *)a2);
              xmlSchemaCustomErr4((_DWORD *)a1, 3091, v40, 0, (const xmlChar *)"A type cannot be derived by extension from a type which has an 'all' model group in its {content type}, since this would produce a 'sequence' model group containing the 'all' model group; 'all' model groups are not allowed to appear inside other model groups",
                0,
                0,
                0,
                0);
              goto LABEL_110;
            }
            if ((v34 & 1) == 0)
            {
              v74 = xmlSchemaAddParticle(a1, *(_QWORD *)(a2 + 72), 1, 1);
              if (!v74)
                goto LABEL_19;
              v75 = v74;
              v76 = xmlSchemaAddModelGroup(a1, *(_QWORD *)(a1 + 64), 6, *(_QWORD *)(a2 + 72));
              v75[3] = v76;
              if (!v76)
                goto LABEL_19;
              *(_QWORD *)(a2 + 56) = v75;
              v77 = xmlSchemaAddParticle(a1, *(_QWORD *)(a2 + 72), (int)v6->subtypes->ref, HIDWORD(v6->subtypes->ref));
              *(_QWORD *)(v75[3] + 24) = v77;
              if (!v77)
                goto LABEL_19;
              v78 = v6->subtypes->id;
              v77[2] = v22;
              v77[3] = v78;
            }
            else
            {
LABEL_109:
              *(_QWORD *)(v36 + 24) = subtypes;
            }
          }
          goto LABEL_110;
        }
LABEL_81:
        v32 = xmlSchemaAddParticle(a1, *(_QWORD *)(a2 + 72), 1, 1);
        if (!v32)
          goto LABEL_19;
        v22 = v32;
        v33 = xmlSchemaAddModelGroup(a1, *(_QWORD *)(a1 + 64), 6, *(_QWORD *)(a2 + 72));
        v22[3] = v33;
        if (!v33)
          goto LABEL_19;
        *(_QWORD *)(a2 + 56) = v22;
        goto LABEL_84;
      }
    }
    else
    {
      v26 = *(_DWORD *)(a2 + 88);
      if ((v26 & 1) != 0)
        goto LABEL_81;
    }
    *(_DWORD *)(a2 + 92) = 1;
    if ((v26 & 4) == 0)
    {
      *(_DWORD *)(a2 + 92) = v6->contentType;
      *(_QWORD *)(a2 + 56) = v6->subtypes;
      *(_QWORD *)(a2 + 192) = v6->contentTypeDef;
    }
    goto LABEL_110;
  }
  type = v6->type;
  if (v6->type != XML_SCHEMA_TYPE_COMPLEX && v6->builtInType != 45)
  {
LABEL_50:
    if (type != XML_SCHEMA_TYPE_SIMPLE && (type != XML_SCHEMA_TYPE_BASIC || v6->builtInType == 45)
      || (*(_BYTE *)(a2 + 88) & 2) == 0)
    {
      v10 = "Internal error: xmlSchemaTypeFixup, complex type '%s' with <simpleContent>: unhandled derivation case";
      goto LABEL_55;
    }
    *(_QWORD *)(a2 + 192) = v6;
    goto LABEL_110;
  }
  contentTypeDef = v6->contentTypeDef;
  if (!contentTypeDef || (*(_BYTE *)(a2 + 88) & 4) == 0)
  {
    if (type == XML_SCHEMA_TYPE_COMPLEX || v6->builtInType == 45)
    {
      if (v6->contentType == XML_SCHEMA_CONTENT_MIXED && (*(_BYTE *)(a2 + 88) & 4) != 0)
      {
        v41 = *(_QWORD *)(a2 + 192);
        if (!v41 || !*(_QWORD *)(v41 + 112))
        {
          v10 = "Internal error: xmlSchemaTypeFixup, complex type '%s': the <simpleContent><restriction> is missing a <si"
                "mpleType> child, but was not caught by xmlSchemaCheckSRCCT()";
          goto LABEL_55;
        }
        goto LABEL_110;
      }
      if ((type == XML_SCHEMA_TYPE_COMPLEX || v6->builtInType == 45) && (*(_BYTE *)(a2 + 88) & 2) != 0)
      {
        if (!contentTypeDef)
        {
          v10 = "Internal error: xmlSchemaTypeFixup, complex type '%s': the <extension>ed base type is a complex type wit"
                "h no simple content type";
          goto LABEL_55;
        }
        *(_QWORD *)(a2 + 192) = contentTypeDef;
        goto LABEL_110;
      }
    }
    goto LABEL_50;
  }
  v27 = *(xmlSchemaTypePtr *)(a2 + 192);
  if (v27)
  {
    *(_QWORD *)(a2 + 192) = 0;
    contentTypeDef = v27;
  }
  v28 = (xmlSchemaType *)xmlSchemaAddType(a1, *(_QWORD *)(a1 + 64), 4, 0, *(_QWORD *)(a2 + 208), *(_QWORD *)(a2 + 72), 0);
  if (!v28)
    goto LABEL_19;
  v29 = v28;
  v28->type = XML_SCHEMA_TYPE_SIMPLE;
  v28->baseType = contentTypeDef;
  v28->facets = *(xmlSchemaFacetPtr *)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;
  v28->facetSet = *(xmlSchemaFacetLinkPtr *)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;
  *(_QWORD *)(a2 + 192) = v28;
  if (contentTypeDef->type != XML_SCHEMA_TYPE_BASIC && (contentTypeDef->flags & 0x400000) == 0)
    xmlSchemaTypeFixup(contentTypeDef, (xmlSchemaParserCtxtPtr)a1);
  v30 = xmlSchemaFixupSimpleTypeStageOne((_DWORD *)a1, (uint64_t)v29);
  if (v30 == -1)
    goto LABEL_19;
  if (v30)
    goto LABEL_34;
  v31 = xmlSchemaFixupSimpleTypeStageTwo((xmlSchemaParserCtxtPtr)a1, v29);
  if (v31 == -1)
    goto LABEL_19;
  if (v31)
    goto LABEL_34;
LABEL_110:
  v42 = *(_QWORD *)(a2 + 112);
  if (!v42)
  {
    v11 = "xmlSchemaFixupTypeAttributeUses";
    v12 = "no base type";
    goto LABEL_18;
  }
  v96 = v5;
  if (*(_DWORD *)v42 != 1
    && (*(_BYTE *)(v42 + 90) & 0x40) == 0
    && xmlSchemaTypeFixup((xmlSchemaTypePtr)v42, (xmlSchemaParserCtxtPtr)a1) == -1)
  {
    goto LABEL_19;
  }
  v43 = *(_QWORD **)(a2 + 216);
  v44 = *(_QWORD *)(v42 + 216);
  if (v43)
  {
    v45 = (uint64_t *)(a2 + 152);
    if ((*(_BYTE *)(a2 + 88) & 4) != 0)
    {
      if (xmlSchemaExpandAttributeGroupRefs(a1, (_DWORD *)a2, v45, *(_QWORD *)(a2 + 216), *(_QWORD *)(a1 + 232)) == -1)
      {
LABEL_135:
        v11 = "xmlSchemaFixupTypeAttributeUses";
        v12 = "failed to expand attributes";
        goto LABEL_18;
      }
      if (*(_DWORD *)(*(_QWORD *)(a1 + 232) + 8))
        v46 = *(uint64_t **)(a1 + 232);
      else
        v46 = 0;
    }
    else
    {
      v46 = 0;
      if (xmlSchemaExpandAttributeGroupRefs(a1, (_DWORD *)a2, v45, *(_QWORD *)(a2 + 216), 0) == -1)
        goto LABEL_135;
    }
  }
  else
  {
    v46 = 0;
  }
  if (!v44)
  {
LABEL_154:
    if (!v43)
      goto LABEL_159;
    goto LABEL_155;
  }
  if ((*(_BYTE *)(a2 + 88) & 4) != 0)
  {
    if (v43)
      v51 = *((_DWORD *)v43 + 2);
    else
      v51 = 0;
    v52 = *(_DWORD *)(v44 + 8);
    if (v52 >= 1)
    {
      v53 = 0;
      while (1)
      {
        v54 = *(_QWORD *)(*(_QWORD *)v44 + 8 * v53);
        if (v46 && (v55 = *((unsigned int *)v46 + 2), (int)v55 >= 1))
        {
          v56 = *v46;
          v57 = *(_QWORD *)(v54 + 24);
          while (*(_QWORD *)(v57 + 16) != *(_QWORD *)(*(_QWORD *)v56 + 16)
               || *(_QWORD *)(v57 + 112) != *(_QWORD *)(*(_QWORD *)v56 + 24))
          {
            v56 += 8;
            if (!--v55)
              goto LABEL_145;
          }
        }
        else
        {
LABEL_145:
          if (v51 < 1)
          {
LABEL_150:
            if (!v43)
            {
              v43 = xmlSchemaItemListCreate();
              *(_QWORD *)(a2 + 216) = v43;
              if (!v43)
                goto LABEL_19;
            }
            xmlSchemaItemListAddSize((uint64_t)v43, 2, v54);
            v52 = *(_DWORD *)(v44 + 8);
          }
          else
          {
            v58 = (char *)*v43;
            v59 = *(_QWORD *)(v54 + 24);
            v60 = v51;
            while (1)
            {
              v61 = *(_QWORD *)(*(_QWORD *)v58 + 24);
              if (*(_QWORD *)(v59 + 16) == *(_QWORD *)(v61 + 16) && *(_QWORD *)(v59 + 112) == *(_QWORD *)(v61 + 112))
                break;
              v58 += 8;
              if (!--v60)
                goto LABEL_150;
            }
          }
        }
        if (++v53 >= v52)
          goto LABEL_154;
      }
    }
    goto LABEL_154;
  }
  LODWORD(v47) = *(_DWORD *)(v44 + 8);
  if ((int)v47 < 1)
    goto LABEL_154;
  v48 = 0;
  do
  {
    v49 = *(_QWORD *)(*(_QWORD *)v44 + 8 * v48);
    if (!v43)
    {
      v50 = xmlSchemaItemListCreate();
      *(_QWORD *)(a2 + 216) = v50;
      if (!v50)
        goto LABEL_19;
      v43 = v50;
      LODWORD(v47) = *(_DWORD *)(v44 + 8);
    }
    xmlSchemaItemListAddSize((uint64_t)v43, v47, v49);
    ++v48;
    v47 = *(int *)(v44 + 8);
  }
  while (v48 < v47);
LABEL_155:
  if (!*((_DWORD *)v43 + 2))
  {
    if (*v43)
      xmlFree((void *)*v43);
    xmlFree(v43);
    *(_QWORD *)(a2 + 216) = 0;
  }
LABEL_159:
  if ((*(_BYTE *)(a2 + 88) & 2) == 0)
    goto LABEL_261;
  v62 = *(_QWORD *)(v42 + 152);
  if (!v62)
    goto LABEL_261;
  v63 = *(_QWORD *)(a2 + 152);
  if (!v63)
  {
    *(_QWORD *)(a2 + 152) = v62;
    goto LABEL_261;
  }
  v64 = *(_DWORD *)(v63 + 44);
  if (v64 != *(_DWORD *)(v62 + 44))
  {
    if (v64)
      goto LABEL_261;
    *(_DWORD *)(v63 + 44) = 1;
    v71 = *(_QWORD **)(v63 + 48);
    if (!v71)
      goto LABEL_181;
    do
    {
      v72 = (_QWORD *)*v71;
      xmlFree(v71);
      v71 = v72;
    }
    while (v72);
    goto LABEL_180;
  }
  v65 = *(_QWORD **)(v63 + 48);
  v66 = *(_QWORD **)(v62 + 48);
  if ((v65 != 0) != (v66 == 0))
  {
    v67 = *(_QWORD *)(v63 + 56);
    v68 = *(_QWORD *)(v62 + 56);
    if ((v67 == 0) != (v68 != 0) && (!v67 || *(_QWORD *)(v67 + 8) == *(_QWORD *)(v68 + 8)))
    {
      if (!v65)
        goto LABEL_261;
      v86 = *(_QWORD **)(v63 + 48);
LABEL_219:
      v87 = (_QWORD *)(v62 + 48);
      while (1)
      {
        v87 = (_QWORD *)*v87;
        if (!v87)
          break;
        if (v86[1] == v87[1])
        {
          v86 = (_QWORD *)*v86;
          if (v86)
            goto LABEL_219;
          goto LABEL_261;
        }
      }
    }
  }
  if (v65 && v66)
  {
    do
    {
      v69 = v65;
      while (v66[1] != v69[1])
      {
        v69 = (_QWORD *)*v69;
        if (!v69)
        {
          v70 = xmlSchemaNewWildcardNsConstraint(a1);
          if (!v70)
            goto LABEL_19;
          v70[1] = v66[1];
          *v70 = *(_QWORD *)(v63 + 48);
          *(_QWORD *)(v63 + 48) = v70;
          break;
        }
      }
      v66 = (_QWORD *)*v66;
    }
    while (v66);
    goto LABEL_261;
  }
  v73 = *(_QWORD **)(v63 + 56);
  v79 = *(_QWORD *)(v62 + 56);
  if (!v73)
    goto LABEL_267;
  v80 = v73[1];
  if (v79 && v80 != *(_QWORD *)(v79 + 8))
  {
LABEL_193:
    v73[1] = 0;
    goto LABEL_261;
  }
  if (!v66 || !v80)
  {
LABEL_267:
    if (v79 && v65 && *(_QWORD *)(v79 + 8))
      goto LABEL_201;
    if (v73 && v66 && !v73[1])
    {
      if (v65)
        v85 = *(_QWORD **)(v63 + 48);
      else
        v85 = *(_QWORD **)(v62 + 48);
      goto LABEL_227;
    }
    if (!v79)
      goto LABEL_261;
    if (!v65)
      goto LABEL_261;
    v88 = *(_QWORD *)(v79 + 8);
    v85 = *(_QWORD **)(v63 + 48);
    if (v88)
      goto LABEL_261;
LABEL_227:
    while (v85[1])
    {
      v85 = (_QWORD *)*v85;
      if (!v85)
      {
        if (v73)
          goto LABEL_261;
        if (v65)
        {
          do
          {
            v89 = (_QWORD *)*v65;
            xmlFree(v65);
            v65 = v89;
          }
          while (v89);
          *(_QWORD *)(v63 + 48) = 0;
        }
        goto LABEL_245;
      }
    }
    *(_DWORD *)(v63 + 44) = 1;
    if (!v65)
      goto LABEL_182;
    do
    {
      v92 = (_QWORD *)*v65;
      xmlFree(v65);
      v65 = v92;
    }
    while (v92);
LABEL_180:
    *(_QWORD *)(v63 + 48) = 0;
LABEL_181:
    v73 = *(_QWORD **)(v63 + 56);
    goto LABEL_182;
  }
  v81 = *(_QWORD *)(v63 + 56);
  if (v65)
  {
LABEL_201:
    v81 = *(_QWORD *)(v62 + 56);
    v66 = *(_QWORD **)(v63 + 48);
  }
  v82 = 0;
  v83 = 0;
  while (1)
  {
    v84 = v66[1];
    if (v84)
    {
      if (v84 == *(_QWORD *)(v81 + 8))
        v83 = 1;
    }
    else
    {
      v82 = 1;
    }
    if (v83 && v82)
      break;
    v66 = (_QWORD *)*v66;
    if (!v66)
      goto LABEL_234;
  }
  v83 = 1;
  v82 = 1;
LABEL_234:
  if (v83 && v82)
  {
    *(_DWORD *)(v63 + 44) = 1;
    if (!v65)
    {
LABEL_182:
      if (v73)
      {
        xmlFree(v73);
        *(_QWORD *)(v63 + 56) = 0;
      }
      goto LABEL_261;
    }
    do
    {
      v90 = (_QWORD *)*v65;
      xmlFree(v65);
      v65 = v90;
    }
    while (v90);
    goto LABEL_180;
  }
  if (v83 && !v82)
  {
    if (v65)
    {
      do
      {
        v91 = (_QWORD *)*v65;
        xmlFree(v65);
        v65 = v91;
      }
      while (v91);
      *(_QWORD *)(v63 + 48) = 0;
      v73 = *(_QWORD **)(v63 + 56);
    }
    if (!v73)
    {
LABEL_245:
      v73 = xmlSchemaNewWildcardNsConstraint(a1);
      *(_QWORD *)(v63 + 56) = v73;
      if (!v73)
        goto LABEL_19;
    }
    goto LABEL_193;
  }
  if (v83 || !v82)
  {
    if (!v73 && !v83 && !v82)
    {
      if (v65)
      {
        do
        {
          v93 = (_QWORD *)*v65;
          xmlFree(v65);
          v65 = v93;
        }
        while (v93);
        *(_QWORD *)(v63 + 48) = 0;
      }
      v94 = xmlSchemaNewWildcardNsConstraint(a1);
      *(_QWORD *)(v63 + 56) = v94;
      if (!v94)
        goto LABEL_19;
      v94[1] = *(_QWORD *)(*(_QWORD *)(v62 + 56) + 8);
    }
  }
  else
  {
    xmlSchemaPErr(a1, *(_QWORD *)(v63 + 24), 1794, "The union of the wildcard is not expressible.\n", 0, 0);
  }
LABEL_261:
  v95 = xmlSchemaCheckCTComponent((xmlSchemaParserCtxt *)a1, a2);
  if (v95 == -1)
    goto LABEL_19;
  if (v95)
    goto LABEL_34;
  if (v96 != *(_DWORD *)(a1 + 36))
    return *(unsigned int *)(a1 + 32);
  return 0;
}

void xmlSchemaCheckElementDeclComponent(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int *v8;
  int v9;
  uint64_t v10;
  int v11;
  const xmlNode *v12;
  const char *v13;
  xmlAttrPtr v14;
  xmlChar *v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  xmlNode *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unsigned int v30;
  xmlHashTable *v31;
  uint64_t *v32;
  xmlHashTablePtr Dict;
  uint64_t *v34;
  _QWORD *v35;
  void **v36;
  int v37;
  void *v38;
  void *v39;
  void *v40;

  if (!a1)
    return;
  v3 = *(_DWORD *)(a1 + 88);
  if ((v3 & 0x40000) != 0)
    return;
  *(_DWORD *)(a1 + 88) = v3 | 0x40000;
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 152);
  if (v6)
  {
    xmlSchemaCheckElementDeclComponent(*(_QWORD *)(a1 + 152), a2);
    if ((*(_BYTE *)(a1 + 88) & 2) != 0)
    {
      v7 = 0;
    }
    else
    {
      v7 = 3046;
      xmlSchemaPCustomErrExt(a2, 3046, (_DWORD *)a1, 0, (const xmlChar *)"Only global element declarations can have a substitution group affiliation");
    }
    v8 = (int *)a1;
    if (v6 == a1 || *(_QWORD *)(v6 + 152) && (v8 = (int *)xmlSchemaCheckSubstGroupCircular(v6, v6)) != 0)
    {
      v39 = 0;
      v40 = 0;
      xmlSchemaGetComponentQName(&v40, v8);
      xmlSchemaGetComponentQName(&v39, (int *)v6);
      xmlSchemaPCustomErrExt(a2, 3049, v8, 0, (const xmlChar *)"The element declaration '%s' defines a circular substitution group to element declaration '%s'");
      if (v40)
        xmlFree(v40);
      if (v39)
        xmlFree(v39);
      v7 = 3049;
    }
    if (v5 != *(_QWORD *)(*(_QWORD *)(a1 + 152) + 56)
      && xmlSchemaCheckCOSDerivedOK((xmlSchemaParserCtxt *)a2, v5, *(_QWORD *)(v6 + 56), (*(_DWORD *)(v6 + 88) >> 14) & 2 | HIWORD(*(_DWORD *)(v6 + 88)) & 1u))
    {
      v39 = 0;
      v40 = 0;
      v38 = 0;
      xmlSchemaGetComponentQName(&v40, (int *)v5);
      xmlSchemaGetComponentQName(&v39, (int *)v6);
      xmlSchemaGetComponentQName(&v38, *(int **)(v6 + 56));
      xmlSchemaPCustomErrExt(a2, 3047, (_DWORD *)a1, 0, (const xmlChar *)"The type definition '%s' was either rejected by the substitution group affiliation '%s', or not validly derived from its type definition '%s'");
      if (v40)
        xmlFree(v40);
      if (v39)
        xmlFree(v39);
      if (v38)
        xmlFree(v38);
      v7 = 3047;
    }
  }
  else
  {
    v7 = 0;
  }
  if (!*(_QWORD *)(a1 + 144))
    goto LABEL_58;
  v9 = *(_DWORD *)v5;
  if (*(_DWORD *)v5 == 5)
    goto LABEL_111;
  if (v9 == 4 || v9 == 1 && *(_DWORD *)(v5 + 160) != 45)
  {
    v10 = v5;
    do
    {
      if (*(_DWORD *)v10 == 5)
        break;
      v11 = *(_DWORD *)(v10 + 160);
      if (v11 == 45)
        break;
      if (*(_DWORD *)v10 == 1)
      {
        if (v11 == 23)
          goto LABEL_40;
        if (v11 == 46)
          break;
      }
      v10 = *(_QWORD *)(v10 + 56);
    }
    while (v10);
  }
  if (*(_DWORD *)(v5 + 160) == 45)
  {
LABEL_111:
    if ((*(_DWORD *)(v5 + 92) | 2) == 6 && xmlSchemaIsDerivedFromBuiltInType(*(_QWORD *)(v5 + 192)))
    {
LABEL_40:
      xmlSchemaPCustomErrExt(a2, 3048, (_DWORD *)a1, 0, (const xmlChar *)"The type definition (or type definition's content type) is or is derived from ID; value constra"
                         "ints are not allowed in conjunction with such a type definition");
      return;
    }
  }
  v12 = *(const xmlNode **)(a1 + 72);
  if (v12)
  {
    if ((*(_DWORD *)(a1 + 88) & 8) != 0)
      v13 = "fixed";
    else
      v13 = "default";
    v14 = xmlHasProp(v12, (const xmlChar *)v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(xmlChar **)(a1 + 144);
  v16 = *(_DWORD *)v5;
  if (*(_DWORD *)v5 == 5 || *(_DWORD *)(v5 + 160) == 45)
  {
    v17 = *(_DWORD *)(v5 + 92);
    if (v17 != 6 && v17 != 4 && (v17 != 3 || !xmlSchemaIsParticleEmptiable(*(_QWORD *)(v5 + 56))))
    {
      xmlSchemaPCustomErrExt(a2, 3059, (_DWORD *)v5, *(_QWORD *)(v5 + 72), (const xmlChar *)"For a string to be a valid default, the type definition must be a simple type or a complex type with mixed content and a particle emptiable");
      return;
    }
  }
  if (v16 != 4 && (v16 != 1 || *(_DWORD *)(v5 + 160) == 45))
  {
    if ((*(_DWORD *)(v5 + 92) | 2) == 6)
    {
      v18 = *(_QWORD *)(v5 + 192);
      v19 = a2;
      v20 = (xmlNode *)v14;
      goto LABEL_61;
    }
LABEL_58:
    if (v7)
      return;
    goto LABEL_63;
  }
  v19 = a2;
  v20 = (xmlNode *)v14;
  v18 = v5;
LABEL_61:
  v21 = xmlSchemaVCheckCVCSimpleType(v19, v20, v18, v15, (xmlSchemaValPtr *)(a1 + 184), 1u, 1, 0);
  if (v21 < 0)
  {
    xmlSchemaInternalErr2((_DWORD *)a2, (const xmlChar *)"xmlSchemaParseCheckCOSValidDefault", (const xmlChar *)"calling xmlSchemaVCheckCVCSimpleType()", 0);
    xmlSchemaInternalErr2((_DWORD *)a2, (const xmlChar *)"xmlSchemaElemCheckValConstr", (const xmlChar *)"failed to validate the value constraint of an element declaration", 0);
    return;
  }
  if (!(v21 | v7))
  {
LABEL_63:
    v22 = *(_QWORD *)(a1 + 152);
    if (v22 && (*(_BYTE *)(a1 + 88) & 0x10) == 0)
    {
      while (1)
      {
        v23 = *(_DWORD *)(v22 + 88);
        if ((v23 & 0x2000) != 0)
          goto LABEL_105;
        v24 = *(_QWORD *)(v22 + 56);
        v25 = *(_QWORD *)(a1 + 56);
        if (v24 != v25)
        {
          v26 = 0;
          if (v25)
          {
            v27 = *(_QWORD *)(a1 + 56);
            do
            {
              v28 = *(_DWORD *)(v27 + 88);
              if ((((v26 & 0x80000) == 0) & (v28 >> 1)) != 0)
                v26 |= 0x40000u;
              if ((((v26 & 0x80000) == 0) & (v28 >> 2)) != 0)
                v26 |= 0x80000u;
              v27 = *(_QWORD *)(v27 + 112);
            }
            while (v27 && v27 != v24);
          }
          v29 = (v23 << 7) & 0xC0000;
          do
          {
            v25 = *(_QWORD *)(v25 + 112);
            if (!v25 || *(_DWORD *)v25 != 5 && *(_DWORD *)(v25 + 160) != 45)
              break;
            v30 = *(_DWORD *)(v25 + 88);
            if ((((v29 & 0x40000) == 0) & (v30 >> 18)) != 0)
              v29 |= 0x40000u;
            if ((((v29 & 0x80000) == 0) & (v30 >> 19)) != 0)
              v29 |= 0x80000u;
          }
          while (v25 != v24);
          if (v29 && ((v29 & 0x40000) != 0 && (v26 & 0x40000) != 0 || (v29 & 0x80000) != 0 && (v26 & 0x80000) != 0))
            goto LABEL_105;
        }
        v31 = *(xmlHashTable **)(*(_QWORD *)(a2 + 48) + 48);
        if (v31)
        {
          v32 = (uint64_t *)xmlHashLookup2(v31, *(const xmlChar **)(v22 + 16), *(const xmlChar **)(v22 + 96));
          if (v32)
            goto LABEL_91;
          if (*(_QWORD *)(*(_QWORD *)(a2 + 48) + 48))
            goto LABEL_94;
        }
        Dict = xmlHashCreateDict(10, *(xmlDictPtr *)(a2 + 152));
        *(_QWORD *)(*(_QWORD *)(a2 + 48) + 48) = Dict;
        if (Dict)
        {
LABEL_94:
          v34 = (uint64_t *)xmlMalloc(0x10uLL);
          if (v34)
          {
            v32 = v34;
            *v34 = v22;
            v34[1] = 0;
            v35 = xmlSchemaItemListCreate();
            v32[1] = (uint64_t)v35;
            if (v35)
            {
              if (!xmlHashAddEntry2(*(xmlHashTablePtr *)(*(_QWORD *)(a2 + 48) + 48), *(const xmlChar **)(v22 + 16), *(const xmlChar **)(v22 + 96), v32))
              {
LABEL_91:
                xmlSchemaItemListAdd(v32[1], a1);
                goto LABEL_103;
              }
              xmlSchemaInternalErr2((_DWORD *)a2, (const xmlChar *)"xmlSchemaSubstGroupAdd", (const xmlChar *)"failed to add a new substitution container", 0);
              v36 = (void **)v32[1];
              if (v36)
              {
                if (*v36)
                  xmlFree(*v36);
                xmlFree(v36);
              }
            }
            xmlFree(v32);
          }
          else
          {
            __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating a substitution group container");
          }
        }
LABEL_103:
        v37 = *(_DWORD *)(v22 + 88);
        if ((v37 & 0x20000) == 0)
          *(_DWORD *)(v22 + 88) = v37 | 0x20000;
LABEL_105:
        v22 = *(_QWORD *)(v22 + 152);
        if (!v22)
          return;
      }
    }
  }
}

void xmlSchemaBuildContentModel(uint64_t a1, uint64_t a2)
{
  xmlAutomata *v4;
  xmlRegexp *v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  xmlGenericErrorFunc v10;
  void **v11;

  if (*(_DWORD *)a1 == 5 && !*(_QWORD *)(a1 + 200) && (*(_DWORD *)(a1 + 92) & 0xFFFFFFFE) == 2)
  {
    *(_QWORD *)(a2 + 120) = 0;
    v4 = xmlNewAutomata();
    *(_QWORD *)(a2 + 120) = v4;
    if (!v4)
    {
      v10 = *__xmlGenericError();
      v11 = __xmlGenericErrorContext();
      v10(*v11, "Cannot create automata for complex type %s\n", *(const char **)(a1 + 16));
      return;
    }
    *(_QWORD *)(a2 + 144) = xmlAutomataGetInitState(v4);
    xmlSchemaBuildAContentModel(a2, *(_QWORD *)(a1 + 56));
    xmlAutomataSetFinalState(*(xmlAutomataPtr *)(a2 + 120), *(xmlAutomataStatePtr *)(a2 + 144));
    v5 = xmlAutomataCompile(*(xmlAutomataPtr *)(a2 + 120));
    *(_QWORD *)(a1 + 200) = v5;
    if (v5)
    {
      if (xmlRegexpIsDeterminist(v5) == 1)
      {
LABEL_11:
        *(_QWORD *)(a2 + 144) = 0;
        xmlFreeAutomata(*(xmlAutomataPtr *)(a2 + 120));
        *(_QWORD *)(a2 + 120) = 0;
        return;
      }
      v6 = *(_QWORD *)(a1 + 72);
      v7 = "The content model is not determinist";
      v8 = a2;
      v9 = 3070;
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 72);
      v7 = "Failed to compile the content model";
      v8 = a2;
      v9 = 3069;
    }
    xmlSchemaPCustomErrExt(v8, v9, (_DWORD *)a1, v6, (const xmlChar *)v7);
    goto LABEL_11;
  }
}

_QWORD *xmlSchemaFindRedefCompInGraph(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  result = 0;
  if (a1 && a3)
  {
    v6 = *(_QWORD *)(a1 + 64);
    if (v6)
    {
      v7 = *(unsigned int *)(v6 + 8);
      if ((int)v7 >= 1)
      {
        v8 = *(_QWORD **)v6;
        do
        {
          result = (_QWORD *)*v8;
          if (*(_DWORD *)*v8 == a2)
          {
            if ((a2 - 4) < 2)
            {
              if (result[2] == a3)
              {
                v9 = result[26];
                goto LABEL_16;
              }
            }
            else if (a2 == 16)
            {
              if (result[2] == a3)
              {
                v9 = result[13];
LABEL_16:
                if (v9 == a4)
                  return result;
              }
            }
            else
            {
              if (a2 != 17)
                return 0;
              if (result[4] == a3)
              {
                v9 = result[5];
                goto LABEL_16;
              }
            }
          }
          ++v8;
          --v7;
        }
        while (v7);
      }
    }
    v10 = *(_QWORD **)(a1 + 40);
    if (v10)
    {
      *(_DWORD *)(a1 + 4) |= 1u;
      while (1)
      {
        v11 = v10[3];
        if (v11)
        {
          if ((*(_BYTE *)(v11 + 4) & 1) == 0)
          {
            result = (_QWORD *)xmlSchemaFindRedefCompInGraph();
            if (result)
              break;
          }
        }
        v10 = (_QWORD *)*v10;
        if (!v10)
        {
          result = 0;
          *(_DWORD *)(a1 + 4) ^= 1u;
          return result;
        }
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

_QWORD *xmlSchemaGetType(uint64_t a1, const xmlChar *a2, xmlChar *str1)
{
  _QWORD *result;
  const xmlChar *v7;

  if (!a2)
    return 0;
  if (str1 && xmlStrEqual(str1, (const xmlChar *)"http://www.w3.org/2001/XMLSchema"))
  {
    result = xmlSchemaGetPredefinedType(a2, str1);
    if (!a1 || result)
      return result;
  }
  else if (!a1)
  {
    return 0;
  }
  if (xmlStrEqual(str1, *(const xmlChar **)(a1 + 8)))
  {
    result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 56), a2);
    if (result)
      return result;
  }
  if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2)
    return 0;
  if (str1)
    v7 = str1;
  else
    v7 = (const xmlChar *)"##";
  result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v7);
  if (result)
    return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 56), a2);
  return result;
}

void xmlSchemaPResCompAttrErr(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, xmlChar *a5, const xmlChar *a6, int a7, uint64_t a8)
{
  char v14;
  void *v15;
  xmlChar *v16;

  v15 = 0;
  v16 = 0;
  xmlSchemaFormatItemForReport(&v16, a2, a3);
  if (!a8)
    xmlSchemaItemTypeToStr(a7);
  v14 = (char)v16;
  xmlSchemaFormatQName(&v15, a6, a5);
  xmlSchemaPErrExt(a1, a3, 3004, "%s, attribute '%s': The QName value '%s' does not resolve to a(n) %s.\n", v14);
  if (v16)
  {
    xmlFree(v16);
    v16 = 0;
  }
  if (v15)
    xmlFree(v15);
}

_QWORD *xmlSchemaGetElem(uint64_t a1, const xmlChar *a2, xmlChar *str1)
{
  _QWORD *result;
  const xmlChar *v7;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      if (!xmlStrEqual(str1, *(const xmlChar **)(a1 + 8))
        || (result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 80), a2)) == 0)
      {
        if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2)
        {
          return 0;
        }
        else
        {
          if (str1)
            v7 = str1;
          else
            v7 = (const xmlChar *)"##";
          result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v7);
          if (result)
            return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 80), a2);
        }
      }
    }
  }
  return result;
}

_QWORD *xmlSchemaGetNamedComponent(uint64_t a1, int a2, const xmlChar *a3, xmlChar *str1)
{
  _QWORD *result;
  const xmlChar *v8;
  xmlGenericErrorFunc v9;
  void **v10;

  if (a2 == 14)
    return xmlSchemaGetElem(a1, a3, str1);
  if (a2 != 17)
  {
    v9 = *__xmlGenericError();
    v10 = __xmlGenericErrorContext();
    v9(*v10, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 5113);
    return 0;
  }
  result = 0;
  if (!a1)
    return result;
  if (!a3)
    return result;
  if (xmlStrEqual(str1, *(const xmlChar **)(a1 + 8)))
  {
    result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 112), a3);
    if (result)
      return result;
  }
  if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2)
    return 0;
  if (str1)
    v8 = str1;
  else
    v8 = (const xmlChar *)"##";
  result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v8);
  if (result)
    return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 112), a3);
  return result;
}

_QWORD *xmlSchemaGetAttributeDecl(uint64_t a1, const xmlChar *a2, xmlChar *str1)
{
  _QWORD *result;
  const xmlChar *v7;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      if (!xmlStrEqual(str1, *(const xmlChar **)(a1 + 8))
        || (result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 64), a2)) == 0)
      {
        if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2)
        {
          return 0;
        }
        else
        {
          if (str1)
            v7 = str1;
          else
            v7 = (const xmlChar *)"##";
          result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v7);
          if (result)
            return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 64), a2);
        }
      }
    }
  }
  return result;
}

uint64_t xmlSchemaCheckTypeDefCircularInternal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t ComponentNode;

  if (a3 && *a3 != 1)
  {
    if (a2 == a3)
    {
      ComponentNode = xmlSchemaGetComponentNode(a3);
      v7 = 3009;
      xmlSchemaPCustomErrExt(a1, 3009, a3, ComponentNode, (const xmlChar *)"The definition is circular");
      return v7;
    }
    v5 = a3[22];
    if ((v5 & 0x10000) == 0)
    {
      a3[22] = v5 | 0x10000;
      result = xmlSchemaCheckTypeDefCircularInternal(a1);
      a3[22] ^= 0x10000u;
      return result;
    }
  }
  return 0;
}

uint64_t xmlSchemaGetCircModelGrDefRef(uint64_t a1, uint64_t a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t CircModelGrDefRef;
  int v6;
  uint64_t v7;

  for (i = a2; i; i = *(_QWORD *)(i + 16))
  {
    v4 = *(_QWORD *)(i + 24);
    if (v4)
    {
      if ((*(_DWORD *)v4 - 6) >= 3)
      {
        if (*(_DWORD *)v4 == 17)
        {
          if (v4 == a1)
            return i;
          v6 = *(_DWORD *)(v4 + 56);
          if ((v6 & 1) == 0)
          {
            v7 = *(_QWORD *)(v4 + 24);
            if (v7)
            {
              *(_DWORD *)(v4 + 56) = v6 | 1;
              CircModelGrDefRef = xmlSchemaGetCircModelGrDefRef(a1, *(_QWORD *)(v7 + 24));
              *(_DWORD *)(v4 + 56) ^= 1u;
              if (CircModelGrDefRef)
                return CircModelGrDefRef;
            }
          }
        }
      }
      else
      {
        CircModelGrDefRef = xmlSchemaGetCircModelGrDefRef(a1, *(_QWORD *)(v4 + 24));
        if (CircModelGrDefRef)
          return CircModelGrDefRef;
      }
    }
  }
  return i;
}

uint64_t xmlSchemaCheckAttrGroupCircularRecur(uint64_t a1, uint64_t *a2)
{
  int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;

  v2 = *((_DWORD *)a2 + 2);
  if (v2 >= 1)
  {
    v5 = 0;
    v6 = *a2;
    do
    {
      result = *(_QWORD *)(v6 + 8 * v5);
      if (*(_DWORD *)result == 2000 && *(_DWORD *)(result + 16) == 16)
      {
        v8 = *(_QWORD *)(result + 8);
        if (v8)
        {
          if (v8 == a1)
            return result;
          v9 = *(_DWORD *)(v8 + 72);
          if ((v9 & 4) == 0 && (v9 & 0x10) != 0 && *(_QWORD *)(v8 + 112))
          {
            *(_DWORD *)(v8 + 72) = v9 | 4;
            result = xmlSchemaCheckAttrGroupCircularRecur(a1);
            *(_DWORD *)(v8 + 72) ^= 4u;
            if (result)
              return result;
            v6 = *a2;
            v2 = *((_DWORD *)a2 + 2);
          }
        }
      }
      ++v5;
    }
    while (v5 < v2);
  }
  return 0;
}

uint64_t xmlSchemaExpandAttributeGroupRefs(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _BOOL4 v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t ComponentNode;
  _OWORD *v19;
  int v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  xmlChar *v59;
  uint64_t v60;
  const xmlChar *v61;
  uint64_t v62;
  xmlChar *v63;
  void *v67;

  v8 = a1;
  v9 = *a3 != 0;
  if (a5)
    *(_DWORD *)(a5 + 8) = 0;
  v10 = *(_DWORD *)(a4 + 8);
  if (v10 < 1)
  {
LABEL_103:
    if (!a5)
      return 0;
    result = 0;
    if (v10)
    {
      v55 = *(unsigned int *)(a5 + 8);
      if ((int)v55 >= 1)
      {
        while (1)
        {
          v56 = *(unsigned int *)(a4 + 8);
          if ((int)v56 >= 1)
          {
            v57 = *(_QWORD **)(*(_QWORD *)a5 + 8 * (v55 - 1));
            v58 = *(char **)a4;
            v59 = (xmlChar *)v57[2];
            while (1)
            {
              v60 = *(_QWORD *)(*(_QWORD *)v58 + 24);
              if (v59 == *(xmlChar **)(v60 + 16))
              {
                v61 = (const xmlChar *)v57[3];
                if (v61 == *(const xmlChar **)(v60 + 112))
                  break;
              }
              v58 += 8;
              if (!--v56)
                goto LABEL_115;
            }
            v67 = 0;
            v62 = v57[1];
            v63 = xmlSchemaFormatQName(&v67, v61, v59);
            xmlSchemaCustomWarning((_DWORD *)v8, 3086, v62, (const xmlChar *)"Skipping pointless attribute use prohibition '%s', since a corresponding attribute use exists already in the type definition", v63, 0, 0);
            if (v67)
              xmlFree(v67);
            result = xmlSchemaItemListRemove(a5, (int)v55 - 1);
            if ((_DWORD)result == -1)
              break;
          }
LABEL_115:
          if (v55-- <= 1)
            return 0;
        }
      }
    }
    return result;
  }
  v11 = 0;
  while (1)
  {
    v12 = *(_QWORD *)(*(_QWORD *)a4 + 8 * v11);
    if (*(_DWORD *)v12 == 2000)
    {
      if (*(_DWORD *)(v12 + 16) != 16)
        goto LABEL_102;
      v14 = *(_QWORD *)(v12 + 8);
      if (!v14)
        return 0xFFFFFFFFLL;
      if ((*(_BYTE *)(v14 + 72) & 1) == 0)
      {
        result = xmlSchemaAttributeGroupExpandRefs(v8, v14);
        if ((_DWORD)result == -1)
          return result;
      }
      v15 = *(_QWORD *)(v14 + 80);
      if (!v15)
      {
LABEL_83:
        v46 = *(_QWORD *)(v14 + 112);
        if (v46 && (v47 = *(_DWORD *)(v46 + 8)) != 0)
        {
          v48 = v11;
          *(_QWORD *)(*(_QWORD *)a4 + 8 * v11) = **(_QWORD **)v46;
          if (v47 >= 2)
          {
            v49 = 1;
            v8 = a1;
            while (1)
            {
              v50 = *(_QWORD *)(*(_QWORD *)v46 + 8 * v49);
              v51 = *(char **)a4;
              if (*(_QWORD *)a4)
              {
                v52 = *(int *)(a4 + 12);
                if ((int)v52 <= *(_DWORD *)(a4 + 8))
                {
                  *(_DWORD *)(a4 + 12) = 2 * v52;
                  v51 = (char *)xmlRealloc(v51, 16 * v52);
                  *(_QWORD *)a4 = v51;
                  if (!v51)
                  {
                    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"growing item list");
                    *(_DWORD *)(a4 + 12) = 0;
                    return 0xFFFFFFFFLL;
                  }
                }
              }
              else
              {
                v51 = (char *)xmlMalloc(0xA0uLL);
                *(_QWORD *)a4 = v51;
                if (!v51)
                {
                  __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"allocating new item list");
                  return 0xFFFFFFFFLL;
                }
                *(_DWORD *)(a4 + 12) = 20;
              }
              ++v48;
              v53 = *(int *)(a4 + 8);
              v54 = v53;
              if (v48 >= v53)
              {
                *(_DWORD *)(a4 + 8) = v53 + 1;
                *(_QWORD *)&v51[8 * v53] = v50;
              }
              else
              {
                do
                {
                  *(_QWORD *)(*(_QWORD *)a4 + 8 * v54) = *(_QWORD *)(*(_QWORD *)a4 + 8 * v54 - 8);
                  --v54;
                }
                while (v54 > v48);
                *(_QWORD *)(*(_QWORD *)a4 + 8 * v48) = v50;
                *(_DWORD *)(a4 + 8) = v53 + 1;
              }
              if (++v49 >= *(int *)(v46 + 8))
              {
                v11 = v48;
                goto LABEL_102;
              }
            }
          }
        }
        else
        {
          result = xmlSchemaItemListRemove(a4, v11);
          if ((_DWORD)result == -1)
            return result;
          --v11;
        }
        v8 = a1;
        goto LABEL_102;
      }
      v16 = *a3;
      if (!*a3)
      {
        *a3 = v15;
        goto LABEL_83;
      }
      if (!v9)
      {
        v17 = *(_QWORD *)(v8 + 64);
        ComponentNode = xmlSchemaGetComponentNode(a2);
        v19 = xmlSchemaAddWildcard(v8, v17, 21, ComponentNode);
        if (!v19)
          return 0xFFFFFFFFLL;
        v16 = (uint64_t)v19;
        result = xmlSchemaCloneWildcardNsConstraints(v8, (uint64_t)v19, *a3);
        if ((_DWORD)result == -1)
          return result;
        *(_DWORD *)(v16 + 40) = *(_DWORD *)(*a3 + 40);
        *a3 = v16;
        v15 = *(_QWORD *)(v14 + 80);
      }
      v20 = *(_DWORD *)(v16 + 44);
      v21 = *(_DWORD *)(v15 + 44);
      if (v20 == v21)
      {
        v22 = *(_QWORD **)(v16 + 48);
        if ((v22 != 0) == (*(_QWORD *)(v15 + 48) == 0))
          goto LABEL_36;
        v23 = *(_QWORD *)(v16 + 56);
        v24 = *(_QWORD *)(v15 + 56);
        if ((v23 == 0) == (v24 != 0) || v23 && *(_QWORD *)(v23 + 8) != *(_QWORD *)(v24 + 8))
          goto LABEL_36;
        if (!v22)
        {
LABEL_82:
          v9 = 1;
          goto LABEL_83;
        }
LABEL_26:
        v25 = (_QWORD *)(v15 + 48);
        while (1)
        {
          v25 = (_QWORD *)*v25;
          if (!v25)
            break;
          if (v22[1] == v25[1])
          {
            v22 = (_QWORD *)*v22;
            v9 = 1;
            if (v22)
              goto LABEL_26;
            goto LABEL_83;
          }
        }
      }
      if (v20 && v20 != v21)
      {
        result = xmlSchemaCloneWildcardNsConstraints(a1, v16, v15);
        if ((_DWORD)result == -1)
          return result;
        goto LABEL_82;
      }
LABEL_36:
      v26 = *(_QWORD *)(v16 + 56);
      if (v26 && *(_QWORD *)(v15 + 48))
      {
        v27 = (_QWORD *)(v16 + 48);
        if (!*(_QWORD *)(v16 + 48))
        {
          v30 = *(_QWORD *)(v26 + 8);
          result = xmlSchemaCloneWildcardNsConstraints(a1, v16, v15);
          if ((_DWORD)result == -1)
            return result;
LABEL_57:
          v36 = 0;
          v37 = v27;
          while (1)
          {
            v37 = (_QWORD *)*v37;
            if (!v37)
              break;
            v38 = v36;
            v36 = v37;
            if (!v37[1])
            {
              if (!v38)
                v38 = v27;
              *v38 = *v37;
              xmlFree(v37);
              break;
            }
          }
          if (v30)
          {
            v39 = 0;
            v40 = v27;
            while (1)
            {
              v40 = (_QWORD *)*v40;
              if (!v40)
                break;
              v41 = v39;
              v39 = v40;
              if (v40[1] == v30)
              {
                if (!v41)
                  v41 = v27;
                *v41 = *v40;
                xmlFree(v40);
                goto LABEL_82;
              }
            }
          }
          goto LABEL_82;
        }
        v28 = *(_QWORD *)(v15 + 56);
      }
      else
      {
        v28 = *(_QWORD *)(v15 + 56);
        v27 = (_QWORD *)(v16 + 48);
        v29 = *(_QWORD **)(v16 + 48);
        if (!v28)
        {
          if (v29)
          {
            v32 = *(_QWORD *)(v15 + 48);
            v31 = (_QWORD *)(v15 + 48);
            if (v32)
            {
              v33 = 0;
LABEL_46:
              while (2)
              {
                v34 = v31;
                while (1)
                {
                  v34 = (_QWORD *)*v34;
                  if (!v34)
                    break;
                  if (v29[1] == v34[1])
                  {
                    v9 = 1;
                    v33 = v29;
                    v29 = (_QWORD *)*v29;
                    if (v29)
                      goto LABEL_46;
                    goto LABEL_83;
                  }
                }
                v35 = (_QWORD *)*v29;
                if (v33)
                {
                  *v33 = v35;
                  v35 = (_QWORD *)*v29;
                }
                else
                {
                  *v27 = v35;
                }
                xmlFree(v29);
                v9 = 1;
                v29 = v35;
                if (v35)
                  continue;
                goto LABEL_83;
              }
            }
          }
          goto LABEL_82;
        }
        if (!v29)
        {
          if (v26)
          {
            v42 = *(_QWORD *)(v26 + 8);
            v43 = *(_QWORD *)(v28 + 8);
            if (v42)
              v44 = v42 == v43;
            else
              v44 = 1;
            if (v44 || v43 == 0)
            {
              v9 = 1;
              if (!v42 && v43)
                *(_QWORD *)(v26 + 8) = v43;
              goto LABEL_83;
            }
            xmlSchemaPErr(a1, *(_QWORD *)(v16 + 24), 1793, "The intersection of the wildcard is not expressible.\n", 0, 0);
          }
          goto LABEL_82;
        }
      }
      v30 = *(_QWORD *)(v28 + 8);
      goto LABEL_57;
    }
    if (*(_DWORD *)v12 == 2001)
      break;
LABEL_102:
    ++v11;
    v10 = *(_DWORD *)(a4 + 8);
    if (v11 >= v10)
      goto LABEL_103;
  }
  if (!a5)
  {
    xmlSchemaInternalErr2((_DWORD *)v8, (const xmlChar *)"xmlSchemaExpandAttributeGroupRefs", (const xmlChar *)"unexpected attr prohibition found", 0);
    return 0xFFFFFFFFLL;
  }
  result = xmlSchemaItemListRemove(a4, v11);
  if ((_DWORD)result != -1)
  {
    --v11;
    xmlSchemaItemListAddSize(a5, 2, v12);
    goto LABEL_102;
  }
  return result;
}

uint64_t xmlSchemaItemListRemove(uint64_t a1, int a2)
{
  void *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v3 = *(void **)a1;
  if (v3 && (v4 = *(int *)(a1 + 8), (int)v4 > a2))
  {
    if ((_DWORD)v4 == 1)
    {
      xmlFree(v3);
      result = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    else
    {
      v6 = v4 - 1;
      if ((_DWORD)v6 == a2)
      {
        result = 0;
        *(_DWORD *)(a1 + 8) = a2;
      }
      else
      {
        if ((int)v6 > a2)
        {
          v7 = a2;
          do
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v7) = *(_QWORD *)(*(_QWORD *)a1 + 8 * v7 + 8);
            ++v7;
          }
          while (v6 != v7);
        }
        result = 0;
        *(_DWORD *)(a1 + 8) = v6;
      }
    }
  }
  else
  {
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"Internal error: xmlSchemaItemListRemove, index error.\n");
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t xmlSchemaCloneWildcardNsConstraints(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  result = 0xFFFFFFFFLL;
  if (a2 && a3)
  {
    *(_DWORD *)(a2 + 44) = *(_DWORD *)(a3 + 44);
    v7 = *(_QWORD **)(a3 + 48);
    if (v7)
    {
      v8 = 0;
      do
      {
        v9 = xmlSchemaNewWildcardNsConstraint(a1);
        if (!v9)
          return 0xFFFFFFFFLL;
        v9[1] = v7[1];
        if (v8)
          v10 = v8;
        else
          v10 = (_QWORD *)(a2 + 48);
        *v10 = v9;
        v7 = (_QWORD *)*v7;
        v8 = v9;
      }
      while (v7);
    }
    v11 = *(_QWORD **)(a2 + 56);
    if (v11)
    {
      do
      {
        v12 = (_QWORD *)*v11;
        xmlFree(v11);
        v11 = v12;
      }
      while (v12);
    }
    if (*(_QWORD *)(a3 + 56))
    {
      v13 = xmlSchemaNewWildcardNsConstraint(a1);
      *(_QWORD *)(a2 + 56) = v13;
      if (v13)
      {
        v14 = v13;
        result = 0;
        v14[1] = *(_QWORD *)(*(_QWORD *)(a3 + 56) + 8);
        return result;
      }
      return 0xFFFFFFFFLL;
    }
    result = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  return result;
}

uint64_t xmlSchemaCheckUnionTypeDefCircularRecur(uint64_t a1, _DWORD *a2, _QWORD *a3)
{
  _QWORD *v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (a3)
  {
    v3 = a3;
    do
    {
      v6 = v3[1];
      if (v6)
      {
        while (*(_DWORD *)v6 != 1)
        {
          if ((_DWORD *)v6 == a2)
          {
            v11 = 3003;
            xmlSchemaPCustomErrExt(a1, 3003, a2, 0, (const xmlChar *)"The union type definition is circular");
            return v11;
          }
          v7 = *(_DWORD *)(v6 + 88);
          if ((v7 & 0x10080) == 0x80)
          {
            *(_DWORD *)(v6 + 88) = v7 | 0x10000;
            v8 = v6;
            do
            {
              if (*(_DWORD *)v8 != 4)
                break;
              v9 = *(_QWORD *)(v8 + 168);
              if (v9)
                goto LABEL_12;
              v8 = *(_QWORD *)(v8 + 112);
            }
            while (v8);
            v9 = 0;
LABEL_12:
            v10 = xmlSchemaCheckUnionTypeDefCircularRecur(a1, a2, v9);
            *(_DWORD *)(v6 + 88) ^= 0x10000u;
            if ((_DWORD)v10)
              return v10;
          }
          v6 = *(_QWORD *)(v6 + 112);
          if (!v6)
            break;
        }
      }
      v3 = (_QWORD *)*v3;
    }
    while (v3);
  }
  return 0;
}

uint64_t xmlSchemaTypeFixup(uint64_t typeDecl, xmlSchemaParserCtxtPtr ctxt)
{
  int v2;

  if (typeDecl)
  {
    if (*(_DWORD *)ctxt != 1)
    {
      xmlSchemaInternalErr2(ctxt, (const xmlChar *)"xmlSchemaTypeFixup", (const xmlChar *)"this function needs a parser context", 0);
      return 0xFFFFFFFFLL;
    }
    v2 = *(_DWORD *)typeDecl;
    if (*(_DWORD *)typeDecl != 1 && (*(_BYTE *)(typeDecl + 90) & 0x40) == 0)
    {
      if (v2 == 4)
        return xmlSchemaFixupSimpleTypeStageTwo(ctxt, (xmlSchemaTypePtr)typeDecl);
      if (v2 == 5)
        return xmlSchemaFixupComplexType((uint64_t)ctxt, typeDecl);
    }
    return 0;
  }
  return typeDecl;
}

uint64_t xmlSchemaCheckFacetValues(xmlSchemaTypePtr typeDecl, _DWORD *ctxt, uint64_t a3, const xmlChar *a4)
{
  xmlSchemaFacetPtr facets;
  int v7;
  uint64_t result;
  xmlSchemaValidCtxtPtr v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  facets = typeDecl->facets;
  if (!facets)
    return 0;
  v7 = ctxt[9];
  if (!*((_QWORD *)ctxt + 22))
  {
    v9 = xmlSchemaNewValidCtxt(0);
    *((_QWORD *)ctxt + 22) = v9;
    if (!v9)
    {
      xmlSchemaPErr((uint64_t)ctxt, 0, 3069, "Internal error: xmlSchemaCreateVCtxtOnPCtxt, failed to create a temp. validation context.\n", 0, 0);
      return 0xFFFFFFFFLL;
    }
    v11 = *((_QWORD *)ctxt + 2);
    v10 = *((_QWORD *)ctxt + 3);
    v12 = *((_QWORD *)ctxt + 1);
    *((_QWORD *)v9 + 2) = v11;
    *((_QWORD *)v9 + 3) = v10;
    v13 = (_QWORD *)((char *)v9 + 16);
    v14 = (_QWORD *)*((_QWORD *)v9 + 20);
    if (v14)
    {
      v15 = (_QWORD *)*((_QWORD *)v9 + 20);
      do
      {
        v15[2] = v11;
        v15[3] = v10;
        v15[1] = v12;
        v16 = (_QWORD *)v15[22];
        if (!v16)
          break;
        v16[2] = v11;
        v16[3] = v10;
        v16[1] = v12;
        v15 = (_QWORD *)v16[20];
      }
      while (v15);
      v17 = *((_QWORD *)ctxt + 1);
      v18 = *((_QWORD *)ctxt + 5);
      *((_QWORD *)v9 + 4) = v18;
      *v13 = 0;
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 1) = v17;
      do
      {
        v14[5] = v18;
        v14[1] = v17;
        v19 = (_QWORD *)v14[22];
        if (!v19)
          break;
        v19[3] = 0;
        v19[4] = v18;
        v19[1] = v17;
        v19[2] = 0;
        v14 = (_QWORD *)v19[20];
      }
      while (v14);
    }
    else
    {
      *((_QWORD *)v9 + 4) = *((_QWORD *)ctxt + 5);
      *v13 = 0;
      *((_QWORD *)v9 + 3) = 0;
      *((_QWORD *)v9 + 1) = v12;
    }
  }
  *(_QWORD *)(*((_QWORD *)ctxt + 22) + 40) = *((_QWORD *)ctxt + 8);
  while (1)
  {
    result = xmlSchemaCheckFacet(facets, typeDecl, (xmlSchemaParserCtxtPtr)ctxt, a4);
    if ((_DWORD)result == -1)
      break;
    facets = facets->next;
    if (!facets)
    {
      *(_QWORD *)(*((_QWORD *)ctxt + 22) + 40) = 0;
      if (v7 == ctxt[9])
        return 0;
      return ctxt[8];
    }
  }
  return result;
}

uint64_t xmlSchemaDeriveAndValidateFacets(_DWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  int v63;
  _QWORD *v64;
  int *v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t result;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v5 = *(_QWORD **)(a2 + 176);
  v3 = (_QWORD *)(a2 + 176);
  v4 = v5;
  v6 = *(v3 - 8);
  if (!v5)
  {
    if (!*(_QWORD *)(v6 + 176))
      return 0;
    v8 = 0;
    goto LABEL_20;
  }
  v7 = v4;
  do
  {
    v8 = v7;
    v7 = (_QWORD *)*v7;
  }
  while (v7);
  if (!v4)
  {
LABEL_20:
    v17 = 0;
    v16 = 0;
    v15 = 0;
    v14 = 0;
    v13 = 0;
    v12 = 0;
    v11 = 0;
    v10 = 0;
    v9 = 0;
    goto LABEL_21;
  }
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  do
  {
    switch(*(_DWORD *)v4[1])
    {
      case 0x3E8:
        v12 = v4[1];
        break;
      case 0x3E9:
        v10 = v4[1];
        break;
      case 0x3EA:
        v11 = v4[1];
        break;
      case 0x3EB:
        v9 = v4[1];
        break;
      case 0x3EC:
        v16 = v4[1];
        break;
      case 0x3ED:
        v15 = v4[1];
        break;
      case 0x3F1:
        v17 = v4[1];
        break;
      case 0x3F2:
        v14 = v4[1];
        break;
      case 0x3F3:
        v13 = v4[1];
        break;
      default:
        break;
    }
    v4 = (_QWORD *)*v4;
  }
  while (v4);
LABEL_21:
  v83 = v14;
  v84 = v11;
  v74 = v15;
  v75 = v3;
  v76 = v16;
  v18 = *(_QWORD **)(v6 + 176);
  if (v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v85 = 0;
    v86 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    do
    {
      switch(*(_DWORD *)v18[1])
      {
        case 0x3E8:
          v22 = v18[1];
          break;
        case 0x3E9:
          v20 = v18[1];
          break;
        case 0x3EA:
          v21 = v18[1];
          break;
        case 0x3EB:
          v19 = v18[1];
          break;
        case 0x3EC:
          v25 = v18[1];
          break;
        case 0x3ED:
          v24 = v18[1];
          break;
        case 0x3F1:
          v85 = v18[1];
          break;
        case 0x3F2:
          v23 = v18[1];
          break;
        case 0x3F3:
          v86 = v18[1];
          break;
        default:
          break;
      }
      v18 = (_QWORD *)*v18;
    }
    while (v18);
  }
  else
  {
    v85 = 0;
    v86 = 0;
    v25 = 0;
    v24 = 0;
    v23 = 0;
    v22 = 0;
    v21 = 0;
    v20 = 0;
    v19 = 0;
  }
  v82 = v23;
  v80 = v22;
  v77 = v24;
  v78 = v25;
  v73 = *(v3 - 8);
  if (v17 && v13 | v83)
    xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v17, *(_QWORD *)(v17 + 40), (const xmlChar *)"It is an error for both 'length' and either of 'minLength' or 'maxLength' to be specified on the same type definition");
  v79 = v20;
  v81 = v21;
  if (v84 && v9)
  {
    v72 = v19;
    v26 = v10;
    v27 = *(_QWORD *)(v84 + 40);
    xmlSchemaFacetTypeToString(*(_DWORD *)v84);
    xmlSchemaFacetTypeToString(*(_DWORD *)v9);
    v28 = v27;
    v10 = v26;
    v19 = v72;
    xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v84, v28, (const xmlChar *)"It is an error for both '%s' and '%s' to be specified on the same type definition");
  }
  if (v12 && v10)
  {
    v29 = *(_QWORD *)(v12 + 40);
    xmlSchemaFacetTypeToString(*(_DWORD *)v12);
    xmlSchemaFacetTypeToString(*(_DWORD *)v10);
    xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v12, v29, (const xmlChar *)"It is an error for both '%s' and '%s' to be specified on the same type definition");
  }
  v30 = v83;
  if (v17 && v85)
  {
    v31 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v17 + 56), *(xmlSchemaValPtr *)(v85 + 56));
    if (v31 == -2)
      goto LABEL_222;
    if (v31)
    {
      xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v17, (int *)v85, 0, 0, 1);
      if (*(_DWORD *)(v85 + 48))
        xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v17, *(_QWORD *)(v17 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
    }
  }
  if (v13 && v86)
  {
    v32 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v13 + 56), *(xmlSchemaValPtr *)(v86 + 56));
    if (v32 == -2)
      goto LABEL_222;
    if (v32)
    {
      if (v32 == -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v13, (int *)v86, 1, 1, 1);
      if (*(_DWORD *)(v86 + 48))
        xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v13, *(_QWORD *)(v13 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
    }
  }
  if (v83 && v82)
  {
    v33 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v83 + 56), *(xmlSchemaValPtr *)(v82 + 56));
    if (v33 == -2)
      goto LABEL_222;
    if (v33)
    {
      if (v33 == 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v83, (int *)v82, -1, 1, 1);
      if (*(_DWORD *)(v82 + 48))
        xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v83, *(_QWORD *)(v83 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
    }
  }
  if (!v17)
    v17 = v85;
  if (v17)
  {
    if (v13)
      v34 = v13;
    else
      v34 = v86;
    if (v34)
    {
      v35 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v17 + 56), *(xmlSchemaValPtr *)(v34 + 56));
      if (v35 == -2)
        goto LABEL_222;
      if (v35 == -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v17, (int *)v34, 1, 1, 0);
    }
    if (!v83)
      v30 = v82;
    if (v30)
    {
      v36 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v17 + 56), *(xmlSchemaValPtr *)(v30 + 56));
      if (v36 == -2)
        goto LABEL_222;
      if (v36 == 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v17, (int *)v30, -1, 1, 0);
    }
  }
  v37 = v84;
  if (v84)
  {
    if (v12)
    {
      v38 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v84 + 56), *(xmlSchemaValPtr *)(v12 + 56));
      if (v38 == -2)
        goto LABEL_222;
      v37 = v84;
      if (v38 == -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v12, 1, 1, 0);
    }
    if (v81)
    {
      v39 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v37 + 56), *(xmlSchemaValPtr *)(v81 + 56));
      if (v39 == -2)
        goto LABEL_222;
      v37 = v84;
      if (v39)
      {
        if (v39 == 1)
          xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v81, -1, 1, 1);
        if (*(_DWORD *)(v81 + 48))
          xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v84, *(_QWORD *)(v84 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
    if (v19)
    {
      v40 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v37 + 56), *(xmlSchemaValPtr *)(v19 + 56));
      if (v40 == -2)
        goto LABEL_222;
      v37 = v84;
      if (v40 != -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v19, -1, 0, 1);
    }
    if (v80)
    {
      v41 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v37 + 56), *(xmlSchemaValPtr *)(v80 + 56));
      if (v41 == -2)
        goto LABEL_222;
      v37 = v84;
      if (v41 == -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v80, 1, 1, 1);
    }
    if (v79)
    {
      v42 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v37 + 56), *(xmlSchemaValPtr *)(v79 + 56));
      if (v42 == -2)
        goto LABEL_222;
      v37 = v84;
      if (v42 != 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v84, (int *)v79, 1, 0, 1);
    }
  }
  if (v9)
  {
    if (v10)
    {
      v43 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v10 + 56));
      if (v43 == -2)
        goto LABEL_222;
      if (v43 == -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v10, 1, 1, 0);
    }
    if (v19)
    {
      v44 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v19 + 56));
      if (v44 == -2)
        goto LABEL_222;
      if (v44)
      {
        if (v44 == 1)
          xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v19, -1, 1, 1);
        if (*(_DWORD *)(v19 + 48))
          xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v9, *(_QWORD *)(v9 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
    if (v81)
    {
      v45 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v81 + 56));
      if (v45 == -2)
        goto LABEL_222;
      if (v45 == 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v81, -1, 1, 1);
    }
    if (v80)
    {
      v46 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v80 + 56));
      if (v46 == -2)
        goto LABEL_222;
      if (v46 != 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v80, 1, 0, 1);
    }
    v37 = v84;
    if (v79)
    {
      v47 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v9 + 56), *(xmlSchemaValPtr *)(v79 + 56));
      if (v47 == -2)
        goto LABEL_222;
      v37 = v84;
      if (v47 != 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v9, (int *)v79, 1, 0, 1);
    }
  }
  if (v10)
  {
    if (v37)
    {
      v48 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v37 + 56));
      if (v48 == -2)
        goto LABEL_222;
      if (v48 != -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v84, -1, 0, 0);
    }
    if (v79)
    {
      v49 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v79 + 56));
      if (v49 == -2)
        goto LABEL_222;
      if (v49)
      {
        if (v49 == -1)
          xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v79, 1, 1, 1);
        if (*(_DWORD *)(v79 + 48))
          xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v10, *(_QWORD *)(v10 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
    if (v81)
    {
      v50 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v81 + 56));
      if (v50 == -2)
        goto LABEL_222;
      if (v50 == 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v81, -1, 1, 1);
    }
    if (v80)
    {
      v51 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v80 + 56));
      if (v51 == -2)
        goto LABEL_222;
      if (v51 == -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v80, 1, 1, 1);
    }
    if (v19)
    {
      v52 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v10 + 56), *(xmlSchemaValPtr *)(v19 + 56));
      if (v52 == -2)
        goto LABEL_222;
      if (v52 != -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v10, (int *)v19, -1, 0, 1);
    }
  }
  if (v12)
  {
    if (v9)
    {
      v53 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v9 + 56));
      if (v53 == -2)
        goto LABEL_222;
      if (v53 != -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v9, -1, 0, 0);
    }
    if (v80)
    {
      v54 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v80 + 56));
      if (v54 == -2)
        goto LABEL_222;
      if (v54)
      {
        if (v54 == -1)
          xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v80, 1, 1, 1);
        if (*(_DWORD *)(v80 + 48))
          xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v12, *(_QWORD *)(v12 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
      }
    }
    if (v81)
    {
      v55 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v81 + 56));
      if (v55 == -2)
        goto LABEL_222;
      if (v55 == 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v81, -1, 1, 1);
    }
    if (v79)
    {
      v56 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v79 + 56));
      if (v56 == -2)
        goto LABEL_222;
      if (v56 != 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v79, 1, 0, 1);
    }
    if (v19)
    {
      v57 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v12 + 56), *(xmlSchemaValPtr *)(v19 + 56));
      if (v57 == -2)
        goto LABEL_222;
      if (v57 != -1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v12, (int *)v19, -1, 0, 1);
    }
  }
  v58 = v76;
  if (v76 && v78)
  {
    v59 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v76 + 56), *(xmlSchemaValPtr *)(v78 + 56));
    if (v59 == -2)
      goto LABEL_222;
    v58 = v76;
    if (v59)
    {
      if (v59 == 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v76, (int *)v78, -1, 1, 1);
      if (*(_DWORD *)(v78 + 48))
        xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v76, *(_QWORD *)(v76 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
    }
  }
  v60 = v74;
  v61 = v75;
  if (v74 && v77)
  {
    v62 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v74 + 56), *(xmlSchemaValPtr *)(v77 + 56));
    if (v62 == -2)
      goto LABEL_222;
    v61 = v75;
    v58 = v76;
    v60 = v74;
    if (v62)
    {
      if (v62 == 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v74, (int *)v77, -1, 1, 1);
      if (*(_DWORD *)(v77 + 48))
        xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v74, *(_QWORD *)(v74 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
    }
  }
  if (!v58)
    v58 = v78;
  if (!v60)
    v60 = v77;
  if (v58 && v60)
  {
    v63 = xmlSchemaCompareValues(*(xmlSchemaValPtr *)(v60 + 56), *(xmlSchemaValPtr *)(v58 + 56));
    if (v63 != -2)
    {
      v61 = v75;
      if (v63 == 1)
        xmlSchemaDeriveFacetErr((uint64_t)a1, (int *)v60, (int *)v58, -1, 1, 0);
      goto LABEL_204;
    }
LABEL_222:
    xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaDeriveAndValidateFacets", (const xmlChar *)"an error occurred", 0);
    return 0xFFFFFFFFLL;
  }
LABEL_204:
  v64 = *(_QWORD **)(v73 + 176);
  if (v64)
  {
    while (1)
    {
      v65 = (int *)v64[1];
      v66 = *v65;
      if ((*v65 & 0xFFFFFFFE) != 0x3EE)
        break;
LABEL_220:
      result = 0;
      v64 = (_QWORD *)*v64;
      if (!v64)
        return result;
    }
    v67 = v61;
    while (1)
    {
      v67 = (_QWORD *)*v67;
      if (!v67)
        break;
      v68 = v67[1];
      if (*(_DWORD *)v68 == v66)
      {
        if (v66 == 1008)
        {
          if (*(_DWORD *)(v68 + 52) < v65[13])
            xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v68, *(_QWORD *)(v68 + 40), (const xmlChar *)"The 'whitespace' value has to be equal to or stronger than the 'whitespace' value of the base type");
          if (v65[12])
          {
            if (*(_DWORD *)(v68 + 52) != v65[13])
              xmlSchemaPCustomErrExt((uint64_t)a1, 1717, (_DWORD *)v68, *(_QWORD *)(v68 + 40), (const xmlChar *)"The base type's facet is 'fixed', thus the value must not differ");
          }
        }
        goto LABEL_220;
      }
    }
    v69 = xmlMalloc(0x10uLL);
    if (v69)
    {
      v70 = v64[1];
      *v69 = 0;
      v69[1] = v70;
      if (v8)
        *v8 = v69;
      else
        *v61 = v69;
      v8 = v69;
      goto LABEL_220;
    }
    if (a1)
      ++a1[9];
    __xmlSimpleError(0x10u, 2, 0, 0, (const xmlChar *)"deriving facets, creating a facet link");
    return 0xFFFFFFFFLL;
  }
  return 0;
}

uint64_t xmlSchemaTypeFixupWhitespace(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  _DWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v9;

  v1 = *(_DWORD *)(a1 + 88);
  if ((v1 & 0x40) != 0)
  {
LABEL_14:
    v6 = 0x4000000;
  }
  else
  {
    if ((v1 & 0x80) != 0)
      return 0;
    v2 = *(_QWORD **)(a1 + 176);
    if (v2)
    {
      while (1)
      {
        v3 = (_DWORD *)v2[1];
        if (*v3 == 1008)
          break;
        v2 = (_QWORD *)*v2;
        if (!v2)
          goto LABEL_6;
      }
      v9 = v3[13] - 1;
      if (v9 >= 3)
        return 0xFFFFFFFFLL;
      v6 = dword_1B08629D4[v9];
      goto LABEL_15;
    }
LABEL_6:
    v4 = a1;
    do
    {
      v4 = *(_QWORD *)(v4 + 112);
      if (v4)
      {
        v5 = *(_DWORD *)(v4 + 160);
        if (v5 != 45)
          continue;
      }
      return 0;
    }
    while (*(_DWORD *)v4 != 1);
    if (v5 == 46)
    {
LABEL_13:
      v6 = 0x1000000;
      goto LABEL_15;
    }
    if (v5 != 2)
    {
      if (v5 != 1)
        goto LABEL_14;
      goto LABEL_13;
    }
    v6 = 0x2000000;
  }
LABEL_15:
  v7 = 0;
  *(_DWORD *)(a1 + 88) = v1 | v6;
  return v7;
}

uint64_t xmlSchemaTypeFixupOptimFacets(uint64_t result)
{
  int *v1;
  unsigned int v2;
  int v3;
  unsigned int v4;
  unsigned int i;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  int v12;

  v1 = *(int **)(result + 120);
  v2 = *(_DWORD *)(*(_QWORD *)(result + 112) + 88);
  v3 = (v2 >> 27) & 1;
  v4 = (v2 >> 21) & ((16 * v2) >> 31);
  for (i = (v2 >> 28) & ((16 * v2) >> 31); v1; v1 = (int *)*((_QWORD *)v1 + 1))
  {
    v6 = *v1;
    if (*v1 == 1006)
      v7 = 1;
    else
      v7 = i;
    if (v6 == 1007)
      v8 = 1;
    else
      v8 = v4;
    if (v6 == 1007)
      v7 = 1;
    if (v6 != 1008)
    {
      v3 = 1;
      v4 = v8;
      i = v7;
    }
  }
  if (i)
    *(_DWORD *)(result + 88) |= 0x10000000u;
  if (v4)
  {
    v10 = *(_DWORD *)(result + 88);
    result += 88;
    v9 = v10;
    *(_DWORD *)result = v10 | 0x200000;
    if (v3)
LABEL_17:
      *(_DWORD *)result = v9 | 0x8200000;
  }
  else if (v3)
  {
    v11 = result + 88;
    v9 = *(_DWORD *)(result + 88);
    *(_DWORD *)(result + 88) = v9 | 0x8000000;
    if ((v9 & 0x100) != 0)
    {
      while (1)
      {
        v12 = *(_DWORD *)(result + 160);
        if (v12 == 46)
          break;
        if ((*(_BYTE *)(result + 89) & 0x40) != 0)
        {
          if (v12 == 1)
            return result;
          result = v11;
          goto LABEL_17;
        }
        result = *(_QWORD *)(result + 112);
      }
    }
  }
  return result;
}

void xmlSchemaPIllegalFacetAtomicErr(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  char v9;
  xmlChar *v10;
  xmlChar *v11;

  v10 = 0;
  v11 = 0;
  xmlSchemaFormatItemForReport(&v11, a2, *(_QWORD *)(a2 + 72));
  v8 = *(_QWORD *)(a2 + 72);
  v9 = (char)v11;
  xmlSchemaFacetTypeToString(*a4);
  xmlSchemaFormatItemForReport(&v10, a3, 0);
  xmlSchemaPErrExt(a1, v8, 3013, "%s: The facet '%s' is not allowed on types derived from the type %s.\n", v9);
  if (v11)
  {
    xmlFree(v11);
    v11 = 0;
  }
  if (v10)
    xmlFree(v10);
}

void xmlSchemaPIllegalFacetListUnionErr(uint64_t a1, int a2, uint64_t a3, int *a4)
{
  uint64_t v8;
  const xmlChar *v9;
  xmlChar *v10;
  xmlChar *v11;

  v11 = 0;
  xmlSchemaFormatItemForReport(&v11, a3, *(_QWORD *)(a3 + 72));
  v8 = *(_QWORD *)(a3 + 72);
  v9 = v11;
  v10 = (xmlChar *)xmlSchemaFacetTypeToString(*a4);
  xmlSchemaPErr(a1, v8, a2, "%s: The facet '%s' is not allowed.\n", v9, v10);
  if (v11)
    xmlFree(v11);
}

uint64_t xmlSchemaCheckCOSSTDerivedOK(xmlSchemaParserCtxt *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  int v12;

  if (a2 == a3)
    return 0;
  if (*(_DWORD *)a2 == 1
    || (*(_BYTE *)(a2 + 90) & 0x40) != 0
    || (result = xmlSchemaTypeFixup((xmlSchemaTypePtr)a2, a1), (_DWORD)result != -1))
  {
    if (*(_DWORD *)a3 == 1
      || (*(_BYTE *)(a3 + 90) & 0x40) != 0
      || (result = xmlSchemaTypeFixup((xmlSchemaTypePtr)a3, a1), (_DWORD)result != -1))
    {
      if ((a4 & 1) != 0)
        return 3031;
      v9 = *(_QWORD *)(a2 + 112);
      if (v9 && (*(_BYTE *)(v9 + 89) & 4) != 0)
      {
        return 3031;
      }
      else
      {
        if (v9 == a3)
          return 0;
        if (*(_DWORD *)v9 == 1 && *(_DWORD *)(v9 + 160) == 45
          || (result = xmlSchemaCheckCOSSTDerivedOK(a1), (_DWORD)result))
        {
          if (*(_DWORD *)a3 == 1 && *(_DWORD *)(a3 + 160) == 46 && (*(_BYTE *)(a2 + 88) & 0xC0) != 0)
            return 0;
          if ((*(_BYTE *)(a3 + 88) & 0x80) != 0)
          {
            v10 = (uint64_t **)(a3 + 168);
            while (1)
            {
              v10 = (uint64_t **)*v10;
              if (!v10)
                break;
              v11 = v10[1];
              if (*(_DWORD *)v11 == 1
                || (*((_BYTE *)v11 + 90) & 0x40) != 0
                || (result = xmlSchemaTypeFixup((xmlSchemaTypePtr)v10[1], a1), (_DWORD)result != -1))
              {
                v12 = xmlSchemaCheckCOSSTDerivedOK(a1);
                result = 0;
                if (v12)
                  continue;
              }
              return result;
            }
          }
          return 3032;
        }
      }
    }
  }
  return result;
}

void xmlSchemaDeriveFacetErr(uint64_t a1, int *a2, int *a3, int a4, int a5, int a6)
{
  xmlChar *v12;
  const char *v13;
  xmlChar *v14;
  xmlChar *v15;
  const char *v16;
  xmlChar *v17;
  xmlChar *v18;
  const char *v19;
  xmlChar *v20;
  const char *v21;
  xmlChar *v22;

  v12 = xmlStrdup((const xmlChar *)"'");
  v13 = xmlSchemaFacetTypeToString(*a2);
  v14 = xmlStrcat(v12, (const xmlChar *)v13);
  v15 = xmlStrcat(v14, (const xmlChar *)"' has to be");
  if (a4 == 1)
  {
    v16 = " greater than";
  }
  else
  {
    if (!a4)
      v15 = xmlStrcat(v15, (const xmlChar *)" equal to");
    v16 = " less than";
  }
  v17 = xmlStrcat(v15, (const xmlChar *)v16);
  if (a5)
    v17 = xmlStrcat(v17, (const xmlChar *)" or equal to");
  v18 = xmlStrcat(v17, (const xmlChar *)" '");
  v19 = xmlSchemaFacetTypeToString(*a3);
  v20 = xmlStrcat(v18, (const xmlChar *)v19);
  if (a6)
    v21 = "' of the base type";
  else
    v21 = "'";
  v22 = xmlStrcat(v20, (const xmlChar *)v21);
  xmlSchemaPCustomErrExt(a1, 1717, a2, 0, v22);
  if (v22)
    xmlFree(v22);
}

uint64_t xmlSchemaIsDerivedFromBuiltInType(uint64_t result)
{
  int v1;

  for (; result; result = *(_QWORD *)(result + 56))
  {
    if (*(_DWORD *)result == 5)
      return 0;
    v1 = *(_DWORD *)(result + 160);
    if (v1 == 45)
      return 0;
    if (*(_DWORD *)result == 1)
    {
      if (v1 == 23)
        return 1;
      if (v1 == 46)
        return 0;
    }
  }
  return result;
}

uint64_t xmlSchemaAreValuesEqual(xmlSchemaValPtr val, xmlSchemaVal *a2)
{
  xmlSchemaValType ValType;
  xmlSchemaTypePtr BuiltInType;
  xmlSchemaValType v6;
  xmlSchemaTypePtr i;
  int v8;
  int v10;
  const xmlChar *AsString;
  const xmlChar *v12;
  uint64_t result;
  xmlSchemaValPtr Next;

  while (1)
  {
    if (!val)
      return 0;
    ValType = xmlSchemaGetValType(val);
    BuiltInType = xmlSchemaGetBuiltInType(ValType);
    v6 = xmlSchemaGetValType(a2);
    for (i = xmlSchemaGetBuiltInType(v6); BuiltInType; BuiltInType = BuiltInType->baseType)
    {
      if (BuiltInType->builtInType == 46)
        break;
      if ((BuiltInType->flags & 0x4000) != 0)
        break;
    }
    for (; i; i = i->baseType)
    {
      if (i->builtInType == 46)
        break;
      if ((i->flags & 0x4000) != 0)
        break;
    }
    if (BuiltInType != i)
      return 0;
    v8 = BuiltInType->builtInType;
    if (v8 != 1 && (v8 != 46 || BuiltInType->type != XML_SCHEMA_TYPE_BASIC))
      break;
    AsString = xmlSchemaValueGetAsString(val);
    v12 = xmlSchemaValueGetAsString(a2);
    result = xmlStrEqual(AsString, v12);
    if (!(_DWORD)result)
      return result;
LABEL_19:
    val = xmlSchemaValueGetNext(val);
    Next = xmlSchemaValueGetNext(a2);
    a2 = Next;
    if (!val)
      return Next == 0;
    if (!Next)
      return 0;
  }
  v10 = xmlSchemaCompareValuesWhtsp(val, XML_SCHEMA_WHITESPACE_PRESERVE, a2, XML_SCHEMA_WHITESPACE_PRESERVE);
  if (!v10)
    goto LABEL_19;
  if (v10 == -2)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t xmlSchemaCheckDerivationOKRestriction2to4(xmlSchemaParserCtxt *a1, int a2, int *a3, int *a4, int *a5, uint64_t **a6, uint64_t a7, uint64_t a8)
{
  xmlSchemaParserCtxt *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  xmlChar *v23;
  xmlChar *v24;
  uint64_t v25;
  xmlChar *v26;
  xmlChar *v27;
  xmlChar *v28;
  int v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  xmlChar *v37;
  xmlChar *v38;
  xmlSchemaParserCtxt *v39;
  int v40;
  const char *v41;
  char *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  xmlChar *v48;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  xmlChar *v56;
  xmlChar *ComponentQName;
  xmlChar *ComponentDesignation;
  uint64_t ComponentNode;
  xmlChar *v63;
  xmlChar *v64;
  void *v65;

  if (a5 && a5[2] >= 1)
  {
    v13 = a1;
    v14 = 0;
    if (a2)
      v15 = "redefined";
    else
      v15 = "base";
    do
    {
      v16 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v14);
      if (a6 && (v17 = *((unsigned int *)a6 + 2), (int)v17 >= 1))
      {
        v18 = *a6;
        v19 = *(_QWORD **)(v16 + 24);
        while (1)
        {
          v20 = *v18;
          v21 = *(_QWORD **)(*v18 + 24);
          if (v19[2] == v21[2] && v19[14] == v21[14])
            break;
          ++v18;
          if (!--v17)
            goto LABEL_12;
        }
        if (*(_DWORD *)(v16 + 48) != 2 || *(_DWORD *)(v20 + 48) != 1)
        {
          if (!xmlSchemaCheckCOSSTDerivedOK(v13, v19[12], v21[12], 0))
            goto LABEL_17;
          v64 = 0;
          v65 = 0;
          v63 = 0;
          ComponentNode = xmlSchemaGetComponentNode(a3);
          ComponentDesignation = xmlSchemaGetComponentDesignation((xmlChar **)&v65, *(int **)(*(_QWORD *)(v16 + 24) + 96));
          v27 = xmlSchemaGetComponentDesignation(&v64, *(int **)(*(_QWORD *)(v20 + 24) + 96));
          v28 = xmlSchemaGetComponentDesignation(&v63, a4);
          xmlSchemaPAttrUseErr4(v13, 1789, ComponentNode, (uint64_t)a3, v16, (const xmlChar *)"The attribute declaration's %s is not validly derived from the corresponding %s of the attribute declaration in the %s %s", ComponentDesignation, v27, (xmlChar *)v15, (uint64_t)v28);
          if (v65)
            xmlFree(v65);
          if (v64)
            xmlFree(v64);
          v13 = a1;
          v24 = v63;
          if (!v63)
            goto LABEL_17;
LABEL_16:
          xmlFree(v24);
          goto LABEL_17;
        }
        v65 = 0;
        v25 = xmlSchemaGetComponentNode(a3);
        v26 = xmlSchemaGetComponentDesignation((xmlChar **)&v65, a4);
        xmlSchemaPAttrUseErr4(v13, 1788, v25, (uint64_t)a3, v16, (const xmlChar *)"The 'optional' attribute use is inconsistent with the corresponding 'required' attribute use of the %s %s", (const xmlChar *)v15, v26, 0, 0);
      }
      else
      {
LABEL_12:
        if (a8 && !xmlSchemaCheckCVCWildcardNamespace(a8, *(xmlChar **)(*(_QWORD *)(v16 + 24) + 112)))
          goto LABEL_17;
        v65 = 0;
        v22 = xmlSchemaGetComponentNode(a3);
        v23 = xmlSchemaGetComponentDesignation((xmlChar **)&v65, a4);
        xmlSchemaPAttrUseErr4(v13, 1790, v22, (uint64_t)a3, v16, (const xmlChar *)"Neither a matching attribute use, nor a matching wildcard exists in the %s %s", (const xmlChar *)v15, v23, 0, 0);
      }
      v24 = (xmlChar *)v65;
      if (v65)
        goto LABEL_16;
LABEL_17:
      ++v14;
    }
    while (v14 < a5[2]);
  }
  if (a6)
  {
    v29 = *((_DWORD *)a6 + 2);
    if (v29 >= 1)
    {
      v30 = 0;
      if (a2)
        v31 = "redefined";
      else
        v31 = "base";
      do
      {
        v32 = (*a6)[v30];
        if (*(_DWORD *)(v32 + 48) == 1)
        {
          if (a5 && (v33 = a5[2], (int)v33 >= 1))
          {
            v34 = *(_QWORD *)a5;
            v35 = *(_QWORD *)(v32 + 24);
            while (1)
            {
              v36 = *(_QWORD *)(*(_QWORD *)v34 + 24);
              if (*(_QWORD *)(v36 + 16) == *(_QWORD *)(v35 + 16) && *(_QWORD *)(v36 + 112) == *(_QWORD *)(v35 + 112))
                break;
              v34 += 8;
              if (!--v33)
                goto LABEL_41;
            }
          }
          else
          {
LABEL_41:
            v64 = 0;
            v65 = 0;
            v37 = xmlSchemaGetComponentDesignation((xmlChar **)&v65, (int *)v32);
            v38 = xmlSchemaGetComponentDesignation(&v64, a4);
            xmlSchemaCustomErr4(a1, 1791, 0, a3, (const xmlChar *)"A matching attribute use for the 'required' %s of the %s %s is missing", v37, (xmlChar *)v31, v38, 0);
            if (v65)
              xmlFree(v65);
            if (v64)
              xmlFree(v64);
            v29 = *((_DWORD *)a6 + 2);
          }
        }
        ++v30;
      }
      while (v30 < v29);
    }
  }
  if (!a7)
    return 0;
  if (!a8)
  {
    v65 = 0;
    if (*a3 == 1)
    {
      if (a3[40] == 45)
        v43 = "complex type definition";
      else
        v43 = "simple type definition";
    }
    else
    {
      v43 = xmlSchemaItemTypeToStr(*a3);
    }
    v39 = a1;
    if (a2)
      v50 = "redefined";
    else
      v50 = "base";
    if (*a4 == 1)
    {
      if (a4[40] == 45)
        v51 = "complex type definition";
      else
        v51 = "simple type definition";
    }
    else
    {
      v51 = (char *)xmlSchemaItemTypeToStr(*a4);
    }
    ComponentQName = xmlSchemaGetComponentQName(&v65, a4);
    xmlSchemaCustomErr4(a1, 1797, 0, a3, (const xmlChar *)"The %s has an attribute wildcard, but the %s %s '%s' does not have one", (const xmlChar *)v43, (xmlChar *)v50, (xmlChar *)v51, (uint64_t)ComponentQName);
    goto LABEL_102;
  }
  v39 = a1;
  if (!*(_DWORD *)(a8 + 44))
  {
    v44 = *(_QWORD *)(a7 + 56);
    if (!v44 || (v45 = *(_QWORD *)(a8 + 56)) == 0 || *(_QWORD *)(v44 + 8) != *(_QWORD *)(v45 + 8))
    {
      v46 = *(_QWORD **)(a7 + 48);
      if (v46)
      {
        if (*(_QWORD *)(a8 + 48))
        {
LABEL_66:
          v47 = (_QWORD *)(a8 + 48);
          while (1)
          {
            v47 = (_QWORD *)*v47;
            if (!v47)
              break;
            if (v46[1] == v47[1])
            {
              v46 = (_QWORD *)*v46;
              if (v46)
                goto LABEL_66;
              goto LABEL_50;
            }
          }
        }
        else
        {
          v52 = *(_QWORD *)(a8 + 56);
          if (v52)
          {
            v53 = *(_QWORD *)(v52 + 8);
            while (v46[1] != v53)
            {
              v46 = (_QWORD *)*v46;
              if (!v46)
                goto LABEL_50;
            }
          }
        }
      }
      v65 = 0;
      if (a2)
        v54 = "redefined";
      else
        v54 = "base";
      if (*a4 == 1)
      {
        if (a4[40] == 45)
          v55 = "complex type definition";
        else
          v55 = "simple type definition";
      }
      else
      {
        v55 = (char *)xmlSchemaItemTypeToStr(*a4);
      }
      v56 = xmlSchemaGetComponentQName(&v65, a4);
      xmlSchemaCustomErr4(a1, 1798, 0, a3, (const xmlChar *)"The attribute wildcard is not a valid subset of the wildcard in the %s %s '%s'", (const xmlChar *)v54, (xmlChar *)v55, v56, 0);
      goto LABEL_102;
    }
  }
LABEL_50:
  v40 = *a4;
  if (*a4 != 1)
  {
    if (*(_DWORD *)(a7 + 40) < *(_DWORD *)(a8 + 40))
    {
      v65 = 0;
      if (a2)
        v41 = "redefined";
      else
        v41 = "base";
      v42 = (char *)xmlSchemaItemTypeToStr(v40);
      goto LABEL_76;
    }
    return 0;
  }
  if (a4[40] == 45 || *(_DWORD *)(a7 + 40) >= *(_DWORD *)(a8 + 40))
    return 0;
  v65 = 0;
  if (a2)
    v41 = "redefined";
  else
    v41 = "base";
  v42 = "simple type definition";
LABEL_76:
  v48 = xmlSchemaGetComponentQName(&v65, a4);
  xmlSchemaCustomErr4(a1, 1799, 0, a4, (const xmlChar *)"The {process contents} of the attribute wildcard is weaker than the one in the %s %s '%s'", (const xmlChar *)v41, (xmlChar *)v42, v48, 0);
LABEL_102:
  if (v65)
    xmlFree(v65);
  return *((unsigned int *)v39 + 8);
}

void xmlSchemaPAttrUseErr4(_DWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const xmlChar *a6, const xmlChar *a7, xmlChar *a8, xmlChar *a9, uint64_t a10)
{
  xmlChar *v17;
  const xmlChar *v18;
  xmlChar *v19;
  xmlChar *cur;
  xmlChar *v21;

  cur = 0;
  v21 = 0;
  xmlSchemaFormatItemForReport(&cur, a4, 0);
  v17 = xmlStrcat(cur, (const xmlChar *)", ");
  cur = v17;
  v18 = xmlSchemaFormatItemForReport(&v21, a5, 0);
  v19 = xmlStrcat(v17, v18);
  cur = v19;
  if (v21)
  {
    xmlFree(v21);
    v21 = 0;
    v19 = cur;
  }
  cur = xmlStrcat(v19, (const xmlChar *)": ");
  cur = xmlStrcat(cur, a6);
  cur = xmlStrcat(cur, (const xmlChar *)".\n");
  xmlSchemaErr4Line(a1, 2, a2, a3, 0, (const char *)cur, a7, a8, a9, a10);
  xmlFree(cur);
}

uint64_t xmlSchemaCheckCVCWildcardNamespace(uint64_t a1, xmlChar *str2)
{
  uint64_t result;
  uint64_t **v4;
  uint64_t v5;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)(a1 + 44))
    return 0;
  v4 = *(uint64_t ***)(a1 + 48);
  if (v4)
  {
    while (!xmlStrEqual((const xmlChar *)v4[1], str2))
    {
      v4 = (uint64_t **)*v4;
      if (!v4)
        return 1;
    }
    return 0;
  }
  if (!str2)
    return 1;
  v5 = *(_QWORD *)(a1 + 56);
  if (!v5)
    return 1;
  result = xmlStrEqual(*(const xmlChar **)(v5 + 8), str2);
  if ((_DWORD)result)
    return 1;
  return result;
}

uint64_t xmlSchemaCheckCTComponent(xmlSchemaParserCtxt *a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  xmlChar *v18;
  xmlChar *v19;
  int *v21;
  int v22;
  int v23;
  int v24;
  xmlChar *ComponentDesignation;
  xmlChar *v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  int v32;
  const char *v33;
  xmlChar *v34;
  xmlChar *v35;

  v4 = *(_DWORD **)(a2 + 112);
  if (v4 && (*v4 == 4 || *v4 == 1 && v4[40] != 45) && (*(_BYTE *)(a2 + 88) & 2) == 0)
  {
    v5 = 3076;
    xmlSchemaCustomErr4(a1, 3076, 0, (_DWORD *)a2, (const xmlChar *)"If the base type is a simple type, the derivation method must be 'extension'", 0, 0, 0, 0);
    return v5;
  }
  v6 = *(_QWORD *)(a2 + 216);
  if (!v6 || (v7 = *(unsigned int *)(v6 + 8), (int)v7 < 2))
  {
LABEL_35:
    v21 = *(int **)(a2 + 112);
    v22 = *v21;
    if ((*(_BYTE *)(a2 + 88) & 2) == 0)
    {
      if (v22 == 5 || v21[40] == 45)
      {
        if ((*((_BYTE *)v21 + 89) & 4) == 0)
        {
          if (xmlSchemaCheckDerivationOKRestriction2to4(a1, 0, (int *)a2, *(int **)(a2 + 112), *(int **)(a2 + 216), *((uint64_t ***)v21 + 27), *(_QWORD *)(a2 + 152), *((_QWORD *)v21 + 19)) == -1)return 0xFFFFFFFFLL;
          if (v21[40] != 45)
          {
            v5 = 0;
            switch(*(_DWORD *)(a2 + 92))
            {
              case 1:
                v32 = v21[23];
                if ((v32 - 2) >= 2)
                {
                  if (v32 == 1)
                    return 0;
                }
                else if (xmlSchemaIsParticleEmptiable(*((_QWORD *)v21 + 7)))
                {
                  return 0;
                }
                v33 = "The content type of the base type must be either empty or 'mixed' (or 'elements-only') and an emptiable particle";
                goto LABEL_85;
              case 2:
                return v5;
              case 3:
                if (v21[23] == 3)
                  return 0;
                v33 = "If the content type is 'mixed', then the content type of the base type must also be 'mixed'";
                goto LABEL_85;
              case 4:
              case 6:
                v23 = v21[23];
                if (v23 == 3)
                {
                  if (xmlSchemaIsParticleEmptiable(*((_QWORD *)v21 + 7)))
                    return 0;
                }
                else if (v23 == 6 || v23 == 4)
                {
                  v24 = xmlSchemaCheckCOSSTDerivedOK(a1, *(_QWORD *)(a2 + 192), *((_QWORD *)v21 + 24), 0);
                  if (!v24)
                    return 0;
                  v34 = 0;
                  v35 = 0;
                  if (v24 != -1)
                  {
                    ComponentDesignation = xmlSchemaGetComponentDesignation(&v35, *(int **)(a2 + 192));
                    v26 = xmlSchemaGetComponentDesignation(&v34, *((int **)v21 + 24));
                    xmlSchemaCustomErr4(a1, 1787, 0, (_DWORD *)a2, (const xmlChar *)"The {content type} %s is not validly derived from the base type's {content type} %s", ComponentDesignation, v26, 0, 0);
                    if (v35)
                      xmlFree(v35);
                    if (v34)
                      xmlFree(v34);
                    return *((unsigned int *)a1 + 8);
                  }
                  return 0xFFFFFFFFLL;
                }
                v33 = "The content type of the base type must be either a simple type or 'mixed' and an emptiable particle";
LABEL_85:
                xmlSchemaPCustomErrExt((uint64_t)a1, 1787, (_DWORD *)a2, 0, (const xmlChar *)v33);
                return *((unsigned int *)a1 + 8);
              default:
                v33 = "The type is not a valid restriction of its base type";
                goto LABEL_85;
            }
          }
          return 0;
        }
        xmlSchemaCustomErr4(a1, 1787, *(_QWORD *)(a2 + 72), (_DWORD *)a2, (const xmlChar *)"The 'final' of the base type definition contains 'restriction'", 0, 0, 0, 0);
      }
      else
      {
        xmlSchemaCustomErr4(a1, 1787, *(_QWORD *)(a2 + 72), (_DWORD *)a2, (const xmlChar *)"The base type must be a complex type", 0, 0, 0, 0);
      }
      return *((unsigned int *)a1 + 8);
    }
    if (v22 == 5 || v21[40] == 45)
    {
      if ((*((_BYTE *)v21 + 89) & 2) == 0)
      {
        v27 = *(_QWORD *)(a2 + 192);
        if (v27 && v27 == *((_QWORD *)v21 + 24))
          return 0;
        v28 = *(_DWORD *)(a2 + 92);
        if (v28 == 1 && v21[23] == 1)
          return 0;
        if (*(_QWORD *)(a2 + 56))
        {
          v29 = v21[23];
          if (v29 != 1)
          {
            v30 = "The content type of both, the type and its base type, must either 'mixed' or 'element-only'";
            if ((v28 & 0xFFFFFFFE) != 2 || v28 != v29)
              goto LABEL_72;
          }
          return 0;
        }
        v30 = "The content type must specify a particle";
LABEL_72:
        v5 = 3063;
        xmlSchemaPCustomErrExt((uint64_t)a1, 3063, (_DWORD *)a2, 0, (const xmlChar *)v30);
        return v5;
      }
    }
    else
    {
      if (*(int **)(a2 + 192) != v21)
      {
        v30 = "The content type must be the simple base type";
        goto LABEL_72;
      }
      if ((*((_BYTE *)v21 + 89) & 2) == 0)
        return 0;
    }
    v30 = "The 'final' of the base type definition contains 'extension'";
    goto LABEL_72;
  }
  v8 = 0;
  v9 = v7 - 2;
  v10 = v7 - 1;
  while (1)
  {
    v11 = *(_QWORD *)(*(_QWORD *)v6 + 8 * (v7 - 1));
    if (v7 == 1)
      break;
    v12 = *(_QWORD **)(v11 + 24);
    v13 = *(_QWORD *)v6 + 8 * v9;
    v14 = v10;
    while (1)
    {
      v15 = *(_QWORD *)(*(_QWORD *)v13 + 24);
      if (v12[2] == *(_QWORD *)(v15 + 16) && v12[14] == *(_QWORD *)(v15 + 112))
        break;
      --v14;
      v13 -= 8;
      if (v14 <= 0)
        goto LABEL_16;
    }
    v35 = 0;
    v18 = xmlSchemaGetComponentDesignation(&v35, (int *)v11);
    xmlSchemaCustomErr4(a1, 3087, 0, (_DWORD *)a2, (const xmlChar *)"Duplicate %s", v18, 0, 0, 0);
    if (v35)
      xmlFree(v35);
    if (xmlSchemaItemListRemove(v6, (int)v7 - 1) == -1)
      return 0xFFFFFFFFLL;
LABEL_33:
    --v9;
    --v10;
    if (v7-- <= 1)
      goto LABEL_35;
  }
  v12 = *(_QWORD **)(v11 + 24);
LABEL_16:
  v16 = v12[12];
  if (!v16)
    goto LABEL_33;
  while (1)
  {
    if (*(_DWORD *)v16 == 5)
      goto LABEL_33;
    v17 = *(_DWORD *)(v16 + 160);
    if (v17 == 45)
      goto LABEL_33;
    if (*(_DWORD *)v16 == 1)
      break;
LABEL_22:
    v16 = *(_QWORD *)(v16 + 56);
    if (!v16)
      goto LABEL_33;
  }
  if (v17 != 23)
  {
    if (v17 == 46)
      goto LABEL_33;
    goto LABEL_22;
  }
  if (!v8)
    goto LABEL_32;
  v35 = 0;
  v19 = xmlSchemaGetComponentDesignation(&v35, (int *)v11);
  xmlSchemaCustomErr4(a1, 3087, 0, (_DWORD *)a2, (const xmlChar *)"There must not exist more than one attribute declaration of type 'xs:ID' (or derived from 'xs:ID'). The %s violates this constraint", v19, 0, 0, 0);
  if (v35)
    xmlFree(v35);
  if (xmlSchemaItemListRemove(v6, (int)v7 - 1) != -1)
  {
LABEL_32:
    v8 = 1;
    goto LABEL_33;
  }
  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaIsParticleEmptiable(uint64_t a1)
{
  _DWORD *v1;

  if (!a1)
    return 1;
  if (!*(_DWORD *)(a1 + 32))
    return 1;
  v1 = *(_DWORD **)(a1 + 24);
  if (!v1)
    return 1;
  if ((*v1 - 6) > 2)
    return 0;
  return xmlSchemaGetParticleEmptiable(a1);
}

uint64_t xmlSchemaGetParticleEmptiable(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t result;

  v1 = *(_QWORD *)(a1 + 24);
  if (!v1)
    return 1;
  if (!*(_DWORD *)(a1 + 32))
    return 1;
  v2 = *(_QWORD *)(v1 + 24);
  if (!v2)
    return 1;
  do
  {
    v3 = **(_DWORD **)(v2 + 24);
    if (v3 == 14 || v3 == 2)
      result = *(_DWORD *)(v2 + 32) == 0;
    else
      result = xmlSchemaGetParticleEmptiable(v2);
    if (*(_DWORD *)v1 == 7)
    {
      if ((_DWORD)result)
        return 1;
    }
    else if (!(_DWORD)result)
    {
      return result;
    }
    v2 = *(_QWORD *)(v2 + 16);
  }
  while (v2);
  return *(_DWORD *)v1 != 7;
}

uint64_t xmlSchemaCheckSubstGroupCircular(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t result;

  v2 = a2;
  v3 = *(_QWORD *)(a2 + 152);
  if (!v3)
    return 0;
  if (v3 != a1)
  {
    v4 = *(_DWORD *)(v3 + 88);
    if ((v4 & 0x200) == 0)
    {
      *(_DWORD *)(v3 + 88) = v4 | 0x200;
      result = xmlSchemaCheckSubstGroupCircular();
      *(_DWORD *)(*(_QWORD *)(v2 + 152) + 88) ^= 0x200u;
      return result;
    }
    return 0;
  }
  return v2;
}

uint64_t xmlSchemaCheckCOSDerivedOK(xmlSchemaParserCtxt *a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(_DWORD *)a2 == 4 || *(_DWORD *)a2 == 1 && *(_DWORD *)(a2 + 160) != 45)
    return xmlSchemaCheckCOSSTDerivedOK(a1, a2, a3, a4);
  if (a2 == a3 && a3)
    return 0;
  while (((a4 & 2) == 0 || (*(_BYTE *)(a2 + 88) & 2) == 0) && ((a4 & 1) == 0 || (*(_BYTE *)(a2 + 88) & 4) == 0))
  {
    a2 = *(_QWORD *)(a2 + 112);
    if (a2 == a3)
      return 0;
    if (*(_DWORD *)a2 != 5)
    {
      if (*(_DWORD *)a2 == 1)
      {
        if (*(_DWORD *)(a2 + 160) != 45)
          return xmlSchemaCheckCOSSTDerivedOK(a1, a2, a3, a4);
        return 1;
      }
      if (*(_DWORD *)(a2 + 160) != 45)
        return xmlSchemaCheckCOSSTDerivedOK(a1, a2, a3, a4);
    }
  }
  return 1;
}

uint64_t xmlSchemaBuildAContentModel(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  char *v6;
  xmlAutomataState *v8;
  xmlAutomataState *v9;
  int v10;
  xmlAutomataState *v11;
  xmlAutomataState *v12;
  const char *v13;
  _DWORD *v14;
  int v15;
  int v16;
  uint64_t i;
  xmlAutomataState *v18;
  xmlAutomataState *v19;
  int v20;
  uint64_t v21;
  xmlAutomataState *v22;
  xmlAutomataState *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  xmlAutomataState *v29;
  xmlAutomata *v30;
  const xmlChar *v31;
  const xmlChar *v32;
  xmlAutomataState *v33;
  xmlAutomataState *v34;
  int v35;
  int v36;
  int v37;
  xmlAutomataState *v38;
  xmlAutomataState *v39;
  xmlAutomataState *v40;
  int v41;
  int v42;
  int v43;
  xmlAutomataState *v44;
  xmlAutomataState *v45;
  uint64_t v46;
  xmlAutomataState *v47;
  xmlAutomataState **v48;
  int v49;
  xmlAutomataState *v50;
  int v51;
  uint64_t j;
  xmlAutomataState *v53;
  xmlAutomataState *v54;
  uint64_t **v55;
  xmlAutomataState *v56;
  xmlAutomataStatePtr v57;
  xmlAutomataStatePtr v58;
  uint64_t v59;
  xmlAutomataState *v60;
  uint64_t v61;
  xmlAutomataState *v62;
  uint64_t **v63;
  xmlAutomataState *v64;
  int v65;
  xmlAutomataStatePtr v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  _BOOL4 v71;
  xmlAutomataState *v72;
  xmlAutomata *v73;
  xmlAutomataState *v74;
  xmlAutomataStatePtr v75;
  xmlAutomataState *v76;
  uint64_t v77;
  int v78;
  int v79;
  int v80;
  xmlAutomataState *v81;

  if (a2)
  {
    v4 = *(_DWORD **)(a2 + 24);
    if (v4)
    {
      v5 = 1;
      switch(*v4)
      {
        case 1:
          if (v4[40] == 45)
            v6 = "complex type definition";
          else
            v6 = "simple type definition";
          goto LABEL_15;
        case 2:
          v8 = *(xmlAutomataState **)(a1 + 144);
          v9 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
          v10 = *(_DWORD *)(a2 + 36);
          if (v10 == 0x40000000 || (--v10, v10))
          {
            v35 = *(_DWORD *)(a2 + 32);
            if (v35 <= 0)
              v36 = 0;
            else
              v36 = v35 - 1;
            v37 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), v36, v10);
            v38 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
            if (v4[11] == 1)
            {
              v39 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v8, 0, (const xmlChar *)"*", (const xmlChar *)"*", v4);
              *(_QWORD *)(a1 + 144) = v39;
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v39, v38);
              v40 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v8, 0, (const xmlChar *)"*", 0, v4);
              *(_QWORD *)(a1 + 144) = v40;
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v40, v38);
            }
            else
            {
              v55 = (uint64_t **)*((_QWORD *)v4 + 6);
              if (v55)
              {
                do
                {
                  v56 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v8, 0, (const xmlChar *)"*", (const xmlChar *)v55[1], v4);
                  *(_QWORD *)(a1 + 144) = v56;
                  xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v56, v38);
                  v55 = (uint64_t **)*v55;
                }
                while (v55);
              }
              else
              {
                v67 = *((_QWORD *)v4 + 7);
                if (v67)
                  *(_QWORD *)(a1 + 144) = xmlAutomataNewNegTrans(*(xmlAutomataPtr *)(a1 + 120), v8, v38, (const xmlChar *)"*", *(const xmlChar **)(v67 + 8), v4);
              }
            }
            xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v38, v8, v37);
            xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v38, v9, v37);
          }
          else if (v4[11] == 1)
          {
            v11 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v8, 0, (const xmlChar *)"*", (const xmlChar *)"*", v4);
            *(_QWORD *)(a1 + 144) = v11;
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v11, v9);
            v12 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v8, 0, (const xmlChar *)"*", 0, v4);
            *(_QWORD *)(a1 + 144) = v12;
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v12, v9);
          }
          else
          {
            v63 = (uint64_t **)*((_QWORD *)v4 + 6);
            if (v63)
            {
              do
              {
                *(_QWORD *)(a1 + 144) = v8;
                v64 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v8, 0, (const xmlChar *)"*", (const xmlChar *)v63[1], v4);
                *(_QWORD *)(a1 + 144) = v64;
                xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v64, v9);
                v63 = (uint64_t **)*v63;
              }
              while (v63);
            }
            else
            {
              v77 = *((_QWORD *)v4 + 7);
              if (v77)
                *(_QWORD *)(a1 + 144) = xmlAutomataNewNegTrans(*(xmlAutomataPtr *)(a1 + 120), v8, v9, (const xmlChar *)"*", *(const xmlChar **)(v77 + 8), v4);
            }
          }
          if (*(_DWORD *)(a2 + 32))
          {
            v5 = 0;
          }
          else
          {
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v8, v9);
            v5 = 1;
          }
          *(_QWORD *)(a1 + 144) = v9;
          return v5;
        case 6:
          v15 = *(_DWORD *)(a2 + 32);
          if (v15 == 1)
          {
            v16 = *(_DWORD *)(a2 + 36);
            if (v16 == 1)
            {
              for (i = *((_QWORD *)v4 + 3); i; i = *(_QWORD *)(i + 16))
              {
                if (xmlSchemaBuildAContentModel(a1, i))
                  v5 = v5;
                else
                  v5 = 0;
              }
              return v5;
            }
            v48 = (xmlAutomataState **)(a1 + 144);
            v47 = *(xmlAutomataState **)(a1 + 144);
            if (v16 > 0x3FFFFFFF)
            {
LABEL_82:
              v58 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v47, 0);
              v22 = v58;
              *(_QWORD *)(a1 + 144) = v58;
              v59 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
              if (v59)
              {
                do
                {
                  if (xmlSchemaBuildAContentModel(a1, v59))
                    v5 = v5;
                  else
                    v5 = 0;
                  v59 = *(_QWORD *)(v59 + 16);
                }
                while (v59);
                v60 = *v48;
              }
              else
              {
                v60 = v58;
              }
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v60, v22);
              v57 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0);
              goto LABEL_126;
            }
            if (v16 >= 2)
              goto LABEL_118;
          }
          else
          {
            v48 = (xmlAutomataState **)(a1 + 144);
            v47 = *(xmlAutomataState **)(a1 + 144);
            v49 = *(_DWORD *)(a2 + 36);
            if (v49 > 0x3FFFFFFF)
            {
              if (v15 >= 2)
              {
                v50 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0);
                *(_QWORD *)(a1 + 144) = v50;
                v51 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), *(_DWORD *)(a2 + 32) - 1, 0x40000000);
                for (j = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24); j; j = *(_QWORD *)(j + 16))
                {
                  if (xmlSchemaBuildAContentModel(a1, j))
                    v5 = v5;
                  else
                    v5 = 0;
                }
                v53 = *(xmlAutomataState **)(a1 + 144);
                xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v53, v50, v51);
                v54 = xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v53, 0, v51);
                *(_QWORD *)(a1 + 144) = v54;
                if ((_DWORD)v5 == 1)
                  xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v50, v54);
                return v5;
              }
              goto LABEL_82;
            }
            if (v15 > 1 || v49 > 1)
            {
LABEL_118:
              v22 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v47, 0);
              *(_QWORD *)(a1 + 144) = v22;
              v68 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), *(_DWORD *)(a2 + 32) - 1, *(_DWORD *)(a2 + 36) - 1);
              v69 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
              if (v69)
              {
                v70 = 1;
                do
                {
                  if (!xmlSchemaBuildAContentModel(a1, v69))
                    v70 = 0;
                  v69 = *(_QWORD *)(v69 + 16);
                }
                while (v69);
                v71 = v70 == 1;
              }
              else
              {
                v71 = 1;
              }
              v76 = *(xmlAutomataState **)(a1 + 144);
              xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v76, v22, v68);
              v72 = xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v76, 0, v68);
              *(_QWORD *)(a1 + 144) = v72;
              if (!*(_DWORD *)(a2 + 32) || v71)
              {
LABEL_128:
                v73 = *(xmlAutomata **)(a1 + 120);
                v74 = v22;
LABEL_147:
                xmlAutomataNewEpsilon(v73, v74, v72);
                return 1;
              }
              return 0;
            }
          }
          v61 = *((_QWORD *)v4 + 3);
          if (v61)
          {
            do
            {
              if (xmlSchemaBuildAContentModel(a1, v61))
                v5 = v5;
              else
                v5 = 0;
              v61 = *(_QWORD *)(v61 + 16);
            }
            while (v61);
            v62 = *v48;
          }
          else
          {
            v62 = v47;
          }
          v75 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v62, 0);
          *(_QWORD *)(a1 + 144) = v75;
          if (!*(_DWORD *)(a2 + 32))
          {
            v72 = v75;
            v73 = *(xmlAutomata **)(a1 + 120);
            v74 = v47;
            goto LABEL_147;
          }
          return v5;
        case 7:
          v18 = *(xmlAutomataState **)(a1 + 144);
          v19 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
          v20 = *(_DWORD *)(a2 + 36);
          if (v20 == 0x40000000 || (--v20, v20))
          {
            v41 = *(_DWORD *)(a2 + 32);
            if (v41 <= 0)
              v42 = 0;
            else
              v42 = v41 - 1;
            v43 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), v42, v20);
            v44 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
            v45 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
            v46 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
            if (v46)
            {
              LODWORD(v5) = 0;
              do
              {
                *(_QWORD *)(a1 + 144) = v45;
                if (xmlSchemaBuildAContentModel(a1, v46))
                  v5 = 1;
                else
                  v5 = v5;
                xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), v44);
                v46 = *(_QWORD *)(v46 + 16);
              }
              while (v46);
            }
            else
            {
              v5 = 0;
            }
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v18, v45);
            xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v44, v45, v43);
            xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v44, v19, v43);
            if ((_DWORD)v5 == 1)
              xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v45, v19);
          }
          else
          {
            v21 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 24);
            if (v21)
            {
              LODWORD(v5) = 0;
              do
              {
                *(_QWORD *)(a1 + 144) = v18;
                if (xmlSchemaBuildAContentModel(a1, v21))
                  v5 = 1;
                else
                  v5 = v5;
                xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), v19);
                v21 = *(_QWORD *)(v21 + 16);
              }
              while (v21);
            }
            else
            {
              v5 = 0;
            }
          }
          if (!*(_DWORD *)(a2 + 32))
          {
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v18, v19);
            v5 = 1;
          }
          *(_QWORD *)(a1 + 144) = v19;
          return v5;
        case 8:
          v5 = *((_QWORD *)v4 + 3);
          if (!v5)
            return 1;
          v22 = *(xmlAutomataState **)(a1 + 144);
          v23 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
          xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), v23);
          do
          {
            *(_QWORD *)(a1 + 144) = v23;
            v24 = *(_QWORD *)(v5 + 24);
            if (!v24)
            {
              v13 = "<element> particle has no term";
              v14 = (_DWORD *)a1;
              v6 = 0;
LABEL_16:
              xmlSchemaInternalErr2(v14, (const xmlChar *)"xmlSchemaBuildAContentModel", (const xmlChar *)v13, (xmlChar *)v6);
              return 0;
            }
            if ((*(_BYTE *)(v24 + 90) & 2) != 0)
            {
              v26 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), *(_DWORD *)(v5 + 32), *(_DWORD *)(v5 + 36));
              xmlSchemaBuildContentModelForSubstGroup(a1, v5, v26, *(xmlAutomataState **)(a1 + 144));
            }
            else
            {
              v25 = *(_DWORD *)(v5 + 32);
              if (v25)
              {
                if (v25 == 1 && *(_DWORD *)(v5 + 36) == 1)
                  xmlAutomataNewOnceTrans2(*(xmlAutomataPtr *)(a1 + 120), v23, v23, *(const xmlChar **)(v24 + 16), *(const xmlChar **)(v24 + 96), 1, 1, (void *)v24);
              }
              else if (*(_DWORD *)(v5 + 36) == 1)
              {
                xmlAutomataNewCountTrans2(*(xmlAutomataPtr *)(a1 + 120), v23, v23, *(const xmlChar **)(v24 + 16), *(const xmlChar **)(v24 + 96), 0, 1, (void *)v24);
              }
            }
            v5 = *(_QWORD *)(v5 + 16);
          }
          while (v5);
          v57 = xmlAutomataNewAllTrans(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0, 0);
LABEL_126:
          *(_QWORD *)(a1 + 144) = v57;
          if (!*(_DWORD *)(a2 + 32))
          {
            v72 = v57;
            goto LABEL_128;
          }
          return v5;
        case 0xE:
          v27 = v4[22];
          if ((v27 & 0x20000) != 0)
            return xmlSchemaBuildContentModelForSubstGroup(a1, a2, -1, 0);
          if ((v27 & 0x10) != 0)
            return 0;
          v28 = *(_DWORD *)(a2 + 36);
          if (v28 == 1)
          {
            v29 = *(xmlAutomataState **)(a1 + 144);
            v30 = *(xmlAutomata **)(a1 + 120);
            v31 = (const xmlChar *)*((_QWORD *)v4 + 2);
            v32 = (const xmlChar *)*((_QWORD *)v4 + 12);
            v33 = *(xmlAutomataState **)(a1 + 144);
            v34 = 0;
          }
          else
          {
            v65 = *(_DWORD *)(a2 + 32);
            if (v28 < 0x40000000 || v65 > 1)
            {
              if (v28 == 0x40000000)
                v78 = 0x40000000;
              else
                v78 = v28 - 1;
              if (v65 <= 0)
                v79 = 0;
              else
                v79 = v65 - 1;
              v29 = xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0);
              v80 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), v79, v78);
              v81 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v29, 0, *((const xmlChar **)v4 + 2), *((const xmlChar **)v4 + 12), v4);
              *(_QWORD *)(a1 + 144) = v81;
              xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v81, v29, v80);
              v66 = xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), *(xmlAutomataStatePtr *)(a1 + 144), 0, v80);
LABEL_145:
              v72 = v66;
              *(_QWORD *)(a1 + 144) = v66;
              if (!*(_DWORD *)(a2 + 32))
              {
                v73 = *(xmlAutomata **)(a1 + 120);
                v74 = v29;
                goto LABEL_147;
              }
              return 0;
            }
            v29 = *(xmlAutomataState **)(a1 + 144);
            v33 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v29, 0, *((const xmlChar **)v4 + 2), *((const xmlChar **)v4 + 12), v4);
            *(_QWORD *)(a1 + 144) = v33;
            v30 = *(xmlAutomata **)(a1 + 120);
            v31 = (const xmlChar *)*((_QWORD *)v4 + 2);
            v32 = (const xmlChar *)*((_QWORD *)v4 + 12);
            v34 = v33;
          }
          v66 = xmlAutomataNewTransition2(v30, v33, v34, v31, v32, v4);
          goto LABEL_145;
        case 0x11:
          return v5;
        default:
          v6 = (char *)xmlSchemaItemTypeToStr(*v4);
LABEL_15:
          v13 = "found unexpected term of type '%s' in content model";
          v14 = (_DWORD *)a1;
          goto LABEL_16;
      }
    }
  }
  else
  {
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaBuildAContentModel", (const xmlChar *)"particle is NULL", 0);
  }
  return 1;
}

uint64_t xmlSchemaBuildContentModelForSubstGroup(uint64_t a1, uint64_t a2, int a3, xmlAutomataState *a4)
{
  xmlAutomataState *v4;
  const xmlChar **v8;
  xmlAutomataState *v9;
  xmlHashTable *v10;
  _QWORD *v11;
  _QWORD *v12;
  xmlAutomataState *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t ComponentNode;
  uint64_t result;
  int v18;
  xmlAutomata *v19;
  xmlAutomataState *v20;
  uint64_t v21;
  uint64_t v22;
  xmlAutomataState *v23;
  int v24;
  int v25;
  int v26;
  xmlAutomataState *v27;
  xmlAutomata *v28;
  xmlAutomataState *v29;
  uint64_t v30;
  uint64_t v31;
  xmlAutomata *v32;
  xmlAutomataState *v33;

  v4 = a4;
  v8 = *(const xmlChar ***)(a2 + 24);
  v9 = *(xmlAutomataState **)(a1 + 144);
  if (!a4)
    v4 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
  v10 = *(xmlHashTable **)(*(_QWORD *)(a1 + 48) + 48);
  if (v10 && (v11 = xmlHashLookup2(v10, v8[2], v8[12])) != 0)
  {
    v12 = v11;
    if (a3 < 0)
    {
      v18 = *(_DWORD *)(a2 + 36);
      if (v18 == 0x40000000 || (--v18, v18))
      {
        v24 = *(_DWORD *)(a2 + 32);
        if (v24 <= 0)
          v25 = 0;
        else
          v25 = v24 - 1;
        v26 = xmlAutomataNewCounter(*(xmlAutomataPtr *)(a1 + 120), v25, v18);
        v27 = xmlAutomataNewState(*(xmlAutomataPtr *)(a1 + 120));
        v28 = *(xmlAutomata **)(a1 + 120);
        v29 = xmlAutomataNewTransition2(v28, v9, 0, v8[2], v8[12], v8);
        xmlAutomataNewEpsilon(v28, v29, v27);
        v30 = v12[1];
        if (*(int *)(v30 + 8) >= 1)
        {
          v31 = 0;
          do
          {
            v32 = *(xmlAutomata **)(a1 + 120);
            v33 = xmlAutomataNewTransition2(v32, v9, 0, *(const xmlChar **)(*(_QWORD *)(*(_QWORD *)v30 + 8 * v31) + 16), *(const xmlChar **)(*(_QWORD *)(*(_QWORD *)v30 + 8 * v31) + 96), *(void **)(*(_QWORD *)v30 + 8 * v31));
            xmlAutomataNewEpsilon(v32, v33, v27);
            ++v31;
            v30 = v12[1];
          }
          while (v31 < *(int *)(v30 + 8));
        }
        xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v27, v9, v26);
        xmlAutomataNewCounterTrans(*(xmlAutomataPtr *)(a1 + 120), v27, v4, v26);
      }
      else
      {
        v19 = *(xmlAutomata **)(a1 + 120);
        v20 = xmlAutomataNewTransition2(v19, v9, 0, v8[2], v8[12], v8);
        xmlAutomataNewEpsilon(v19, v20, v4);
        v21 = v12[1];
        if (*(int *)(v21 + 8) >= 1)
        {
          v22 = 0;
          do
          {
            v23 = xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v9, 0, *(const xmlChar **)(*(_QWORD *)(*(_QWORD *)v21 + 8 * v22) + 16), *(const xmlChar **)(*(_QWORD *)(*(_QWORD *)v21 + 8 * v22) + 96), *(void **)(*(_QWORD *)v21 + 8 * v22));
            xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v23, v4);
            ++v22;
            v21 = v12[1];
          }
          while (v22 < *(int *)(v21 + 8));
        }
      }
    }
    else
    {
      v13 = xmlAutomataNewCountedTrans(*(xmlAutomataPtr *)(a1 + 120), v9, 0, a3);
      xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v13, v4, v8[2], v8[12], v8);
      v14 = v12[1];
      if (*(int *)(v14 + 8) >= 1)
      {
        v15 = 0;
        do
        {
          xmlAutomataNewTransition2(*(xmlAutomataPtr *)(a1 + 120), v13, v4, *(const xmlChar **)(*(_QWORD *)(*(_QWORD *)v14 + 8 * v15) + 16), *(const xmlChar **)(*(_QWORD *)(*(_QWORD *)v14 + 8 * v15) + 96), *(void **)(*(_QWORD *)v14 + 8 * v15));
          ++v15;
          v14 = v12[1];
        }
        while (v15 < *(int *)(v14 + 8));
      }
    }
    if (*(_DWORD *)(a2 + 32))
    {
      result = 0;
    }
    else
    {
      xmlAutomataNewEpsilon(*(xmlAutomataPtr *)(a1 + 120), v9, v4);
      result = 1;
    }
    *(_QWORD *)(a1 + 144) = v4;
  }
  else
  {
    ComponentNode = xmlSchemaGetComponentNode((_DWORD *)a2);
    xmlSchemaPErr(a1, ComponentNode, 3069, "Internal error: xmlSchemaBuildContentModelForSubstGroup, declaration is marked having a subst. group but none available.\n", v8[2], 0);
    return 0;
  }
  return result;
}

xmlChar *xmlSchemaNormalizeValue(_DWORD *a1, const xmlChar *a2)
{
  int WhiteSpaceFacetValue;

  WhiteSpaceFacetValue = xmlSchemaGetWhiteSpaceFacetValue(a1);
  if (WhiteSpaceFacetValue == 2)
    return xmlSchemaWhiteSpaceReplace(a2);
  if (WhiteSpaceFacetValue == 3)
    return xmlSchemaCollapseString(a2);
  return 0;
}

uint64_t xmlSchemaValidateNotation(uint64_t a1, uint64_t a2, xmlNode *a3, xmlChar *value, xmlSchemaValPtr *a5, int a6)
{
  uint64_t v12;
  xmlChar *v13;
  xmlChar *v14;
  xmlChar *href;
  xmlChar *v16;
  xmlChar *v17;
  xmlSchemaValPtr v18;
  xmlChar *v19;
  xmlSchemaValPtr v20;
  xmlNsPtr v21;
  xmlChar *prefix;

  if (a1 && !*(_QWORD *)(a1 + 40))
  {
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaValidateNotation", (const xmlChar *)"a schema is needed on the validation context", 0);
    return 0xFFFFFFFFLL;
  }
  v12 = xmlValidateQName(value, 1);
  if (!(_DWORD)v12)
  {
    prefix = 0;
    v13 = xmlSplitQName2(value, &prefix);
    if (prefix)
    {
      v14 = v13;
      if (a1)
      {
        href = (xmlChar *)xmlSchemaLookupNamespace(a1, prefix);
        if (href)
        {
LABEL_7:
          if (xmlSchemaGetNotation(a2, v14, href))
          {
            v12 = 0;
            if (a5 && a6)
            {
              v16 = xmlStrdup(v14);
              v17 = xmlStrdup(href);
              v18 = xmlSchemaNewNOTATIONValue(v16, v17);
              *a5 = v18;
              if (v18)
                v12 = 0;
              else
                v12 = 0xFFFFFFFFLL;
            }
          }
          else
          {
            v12 = 1;
          }
          xmlFree(prefix);
          xmlFree(v14);
          return v12;
        }
      }
      else if (a3)
      {
        v21 = xmlSearchNs(a3->doc, a3, prefix);
        if (v21)
        {
          href = (xmlChar *)v21->href;
          if (href)
            goto LABEL_7;
        }
      }
      ((void (*)(xmlChar *))xmlFree)(prefix);
      xmlFree(v14);
      return 1;
    }
    if (!xmlSchemaGetNotation(a2, value, 0))
      return 1;
    v12 = 0;
    if (a5 && a6)
    {
      v19 = xmlStrdup(value);
      v20 = xmlSchemaNewNOTATIONValue(v19, 0);
      *a5 = v20;
      if (v20)
        return 0;
      else
        return 0xFFFFFFFFLL;
    }
  }
  return v12;
}

uint64_t xmlSchemaValidateFacets(_DWORD *a1, uint64_t a2, int *a3, xmlSchemaValType ValType, xmlChar *value, xmlSchemaVal *a6, unint64_t actualLen, int a8)
{
  uint64_t v8;
  uint64_t **v13;
  int v15;
  uint64_t i;
  int v18;
  int *v19;
  xmlSchemaWhitespaceValueType WhiteSpaceFacetValue;
  xmlSchemaFacet *v21;
  uint64_t v22;
  uint64_t **v23;
  xmlSchemaFacet *v24;
  uint64_t v25;
  int *v26;
  uint64_t v27;
  int v28;
  int v29;
  xmlSchemaFacet *v30;
  int *v31;
  _QWORD *v32;
  int v33;
  uint64_t v34;
  int v35;
  const char *v36;
  unint64_t length;

  length = 0;
  if (*a3 == 1)
    return 0;
  v13 = (uint64_t **)*((_QWORD *)a3 + 22);
  if (!v13)
  {
    i = 0;
    goto LABEL_41;
  }
  v15 = a3[22];
  if ((v15 & 0x100) != 0)
  {
    v18 = a3[40];
    v19 = a3;
    if (v18 != 46)
    {
      if ((*((_BYTE *)a3 + 89) & 0x40) != 0)
      {
LABEL_14:
        if (v18 == 1)
        {
          WhiteSpaceFacetValue = xmlSchemaGetWhiteSpaceFacetValue(a3);
          if (!a6)
          {
LABEL_19:
            for (i = 0; v13; v13 = (uint64_t **)*v13)
            {
              v21 = (xmlSchemaFacet *)v13[1];
              if (v21->type - 1006 >= 3)
              {
                if (v21->type - 1009 > 2)
                  v22 = xmlSchemaValidateFacetWhtsp(v21, WhiteSpaceFacetValue, ValType, value, a6, WhiteSpaceFacetValue);
                else
                  v22 = xmlSchemaValidateLengthFacetWhtsp(v21, ValType, value, a6, &length, WhiteSpaceFacetValue);
                v8 = v22;
                if ((v22 & 0x80000000) != 0)
                {
                  v36 = "validating against a atomic type facet";
                  goto LABEL_69;
                }
                if ((_DWORD)v22)
                {
                  if (!a8)
                    return v8;
                  xmlSchemaFacetErr((uint64_t)a1, v22, a2, value, length, a3, (xmlSchemaFacet *)v13[1]);
                  if ((_DWORD)i)
                    i = i;
                  else
                    i = v8;
                }
              }
            }
            goto LABEL_31;
          }
        }
        else
        {
          WhiteSpaceFacetValue = XML_SCHEMA_WHITESPACE_COLLAPSE;
          if (!a6)
            goto LABEL_19;
        }
        ValType = xmlSchemaGetValType(a6);
        v13 = (uint64_t **)*((_QWORD *)a3 + 22);
        goto LABEL_19;
      }
      v19 = a3;
      while (1)
      {
        v19 = (int *)*((_QWORD *)v19 + 14);
        v18 = v19[40];
        if (v18 == 46)
          break;
        if ((*((_BYTE *)v19 + 89) & 0x40) != 0)
          goto LABEL_14;
      }
    }
    v18 = *v19;
    goto LABEL_14;
  }
  i = 0;
  if ((v15 & 0x40) == 0)
    goto LABEL_41;
LABEL_31:
  if ((a3[22] & 0x40) == 0 || (v23 = (uint64_t **)*((_QWORD *)a3 + 22)) == 0)
  {
LABEL_41:
    v26 = a3;
    while (1)
    {
      v27 = *((_QWORD *)v26 + 15);
      if (v27)
        break;
LABEL_50:
      v26 = (int *)*((_QWORD *)v26 + 14);
      if (!v26 || *v26 == 1)
      {
        LODWORD(v8) = 0;
        goto LABEL_54;
      }
    }
    v28 = 0;
    do
    {
      if (*(_DWORD *)v27 == 1007)
      {
        v29 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(v27 + 56), a6);
        if (v29 == 1)
        {
          LODWORD(v8) = 1;
          goto LABEL_54;
        }
        if (v29 < 0)
        {
          v36 = "validating against an enumeration facet";
          goto LABEL_69;
        }
        v28 = 1;
      }
      v27 = *(_QWORD *)(v27 + 8);
    }
    while (v27);
    if (!v28)
      goto LABEL_50;
    v8 = 1840;
    if (a8)
    {
      xmlSchemaFacetErr((uint64_t)a1, 1840, a2, value, 0, a3, 0);
      if ((_DWORD)i)
        i = i;
      else
        i = 1840;
LABEL_54:
      v30 = 0;
      v31 = a3;
      while (1)
      {
        v32 = (_QWORD *)*((_QWORD *)v31 + 22);
        if (v32)
        {
          v33 = 0;
          do
          {
            v34 = v32[1];
            if (*(_DWORD *)v34 == 1006)
            {
              v35 = xmlRegexpExec(*(xmlRegexpPtr *)(v34 + 64), value);
              LODWORD(v8) = v35;
              if (v35 == 1)
                goto LABEL_64;
              if (v35 < 0)
              {
                v36 = "validating against a pattern facet";
                goto LABEL_69;
              }
              v30 = (xmlSchemaFacet *)v32[1];
              v33 = 1;
            }
            v32 = (_QWORD *)*v32;
          }
          while (v32);
          if (v33 && (_DWORD)v8 != 1)
            break;
        }
LABEL_64:
        v31 = (int *)*((_QWORD *)v31 + 14);
        if (!v31 || *v31 == 1)
          return i;
      }
      v8 = 1839;
      if (a8)
      {
        xmlSchemaFacetErr((uint64_t)a1, 1839, a2, value, 0, a3, v30);
        if ((_DWORD)i)
          return i;
        else
          return 1839;
      }
      return v8;
    }
    return v8;
  }
  while (1)
  {
    v24 = (xmlSchemaFacet *)v23[1];
    if (v24->type - 1009 <= 2)
      break;
LABEL_40:
    v23 = (uint64_t **)*v23;
    if (!v23)
      goto LABEL_41;
  }
  v25 = xmlSchemaValidateListSimpleTypeFacet(v24, value, actualLen, 0);
  if ((v25 & 0x80000000) == 0)
  {
    v8 = v25;
    if ((_DWORD)v25)
    {
      if (!a8)
        return v8;
      xmlSchemaFacetErr((uint64_t)a1, v25, a2, value, actualLen, a3, (xmlSchemaFacet *)v23[1]);
      if ((_DWORD)i)
        i = i;
      else
        i = v8;
    }
    goto LABEL_40;
  }
  v36 = "validating against a list type facet";
LABEL_69:
  xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaValidateFacets", (const xmlChar *)v36, 0);
  return 0xFFFFFFFFLL;
}

void xmlSchemaSimpleTypeErr(_DWORD *a1, int a2, uint64_t a3, const xmlChar *a4, uint64_t a5)
{
  xmlChar *v10;
  const char *v11;
  xmlChar *v12;
  xmlChar *v13;
  int v14;
  const char *v15;
  xmlChar *v16;
  xmlChar *v17;
  xmlChar *v18;
  const xmlChar *v19;
  xmlChar *v20;
  xmlChar *cur;

  cur = 0;
  xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, a3);
  v10 = xmlStrcat(cur, (const xmlChar *)"'%s' is not a valid value of ");
  cur = v10;
  if (xmlSchemaIsGlobalItem((int *)a5))
    v11 = "the ";
  else
    v11 = "the local ";
  v12 = xmlStrcat(v10, (const xmlChar *)v11);
  v13 = v12;
  cur = v12;
  v14 = *(_DWORD *)(a5 + 88);
  if ((v14 & 0x100) != 0)
  {
    v15 = "atomic type";
  }
  else if ((v14 & 0x40) != 0)
  {
    v15 = "list type";
  }
  else
  {
    if ((v14 & 0x80) == 0)
      goto LABEL_11;
    v15 = "union type";
  }
  v13 = xmlStrcat(v12, (const xmlChar *)v15);
  cur = v13;
LABEL_11:
  if (!xmlSchemaIsGlobalItem((int *)a5))
    goto LABEL_18;
  v20 = 0;
  v16 = xmlStrcat(v13, (const xmlChar *)" '");
  cur = v16;
  if (*(_DWORD *)(a5 + 160))
  {
    cur = xmlStrcat(v16, (const xmlChar *)"xs:");
    v17 = *(xmlChar **)(a5 + 16);
LABEL_14:
    v20 = xmlStrdup(v17);
    goto LABEL_16;
  }
  v17 = xmlSchemaFormatQName((void **)&v20, *(const xmlChar **)(a5 + 208), *(xmlChar **)(a5 + 16));
  if (!v20)
    goto LABEL_14;
LABEL_16:
  v18 = cur;
  v19 = xmlEscapeFormatString((void **)&v20);
  cur = xmlStrcat(v18, v19);
  v13 = xmlStrcat(cur, (const xmlChar *)"'");
  cur = v13;
  if (v20)
  {
    xmlFree(v20);
    v13 = cur;
  }
LABEL_18:
  cur = xmlStrcat(v13, (const xmlChar *)".\n");
  xmlSchemaErr4Line(a1, 2, a2, a3, 0, (const char *)cur, a4, 0, 0, 0);
  if (cur)
    xmlFree(cur);
}

uint64_t xmlSchemaGetWhiteSpaceFacetValue(_DWORD *a1)
{
  int v1;
  unsigned int v2;
  int v4;
  int v5;
  int v6;
  unsigned int v7;

  if (*a1 == 1)
  {
    v1 = a1[40];
    if (v1 == 2)
      v2 = 2;
    else
      v2 = 3;
    if (v1 == 46)
      v2 = 1;
    if (v1 == 1)
      return 1;
    else
      return v2;
  }
  else
  {
    v4 = a1[22];
    if ((v4 & 0x40) != 0)
    {
      return 3;
    }
    else
    {
      if ((v4 & 0x2000000) != 0)
        v5 = 2;
      else
        v5 = 3;
      if ((v4 & 0x1000000) != 0)
        v6 = 1;
      else
        v6 = v5;
      if ((v4 & 0x100) != 0)
        v7 = v6;
      else
        v7 = -1;
      if ((v4 & 0x80) != 0)
        return 0;
      else
        return v7;
    }
  }
}

const xmlChar *xmlSchemaLookupNamespace(uint64_t a1, xmlChar *nameSpace)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  const xmlChar *v9;
  xmlTextReader *v11;
  const xmlChar *result;
  xmlChar *v13;
  const xmlChar *v14;
  xmlNode *v15;
  xmlDoc *doc;

  if (!*(_QWORD *)(a1 + 72))
  {
    v11 = *(xmlTextReader **)(a1 + 280);
    if (v11)
    {
      result = xmlTextReaderLookupNamespace(v11, nameSpace);
      if (result)
      {
        v13 = (xmlChar *)result;
        v14 = xmlDictLookup(*(xmlDictPtr *)(a1 + 272), result, -1);
        xmlFree(v13);
        return v14;
      }
      return result;
    }
    v15 = *(xmlNode **)(*(_QWORD *)(a1 + 192) + 8);
    if (v15)
    {
      doc = v15->doc;
      if (doc)
      {
        result = (const xmlChar *)xmlSearchNs(doc, v15, nameSpace);
        if (result)
          return (const xmlChar *)*((_QWORD *)result + 2);
        return result;
      }
    }
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaLookupNamespace", (const xmlChar *)"no node or node's doc available", 0);
    return 0;
  }
  v4 = *(unsigned int *)(a1 + 172);
  if ((v4 & 0x80000000) != 0)
    return 0;
  while (1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v4);
    v6 = *(_DWORD *)(v5 + 128);
    if (v6 >= 1)
      break;
LABEL_10:
    if (v4-- <= 0)
      return 0;
  }
  v7 = 0;
  while (1)
  {
    v8 = *(_QWORD *)(v5 + 120);
    v9 = *(const xmlChar **)(v8 + 8 * v7);
    if (nameSpace)
      break;
    if (!v9)
      return *(const xmlChar **)(v8 + 8 * v7 + 8);
LABEL_9:
    v7 += 2;
    if (v7 >= 2 * v6)
      goto LABEL_10;
  }
  if (!xmlStrEqual(nameSpace, v9))
  {
    v6 = *(_DWORD *)(v5 + 128);
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v5 + 120);
  return *(const xmlChar **)(v8 + 8 * v7 + 8);
}

_QWORD *xmlSchemaGetNotation(uint64_t a1, const xmlChar *a2, xmlChar *str1)
{
  _QWORD *result;
  const xmlChar *v7;

  result = 0;
  if (a1)
  {
    if (a2)
    {
      if (!xmlStrEqual(str1, *(const xmlChar **)(a1 + 8))
        || (result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 88), a2)) == 0)
      {
        if (xmlHashSize(*(xmlHashTablePtr *)(a1 + 96)) < 2)
        {
          return 0;
        }
        else
        {
          if (str1)
            v7 = str1;
          else
            v7 = (const xmlChar *)"##";
          result = xmlHashLookup(*(xmlHashTablePtr *)(a1 + 96), v7);
          if (result)
            return xmlHashLookup(*(xmlHashTablePtr *)(result[10] + 88), a2);
        }
      }
    }
  }
  return result;
}

uint64_t xmlSchemaFacetErr(uint64_t a1, uint64_t a2, uint64_t a3, const xmlChar *a4, uint64_t a5, _DWORD *a6, xmlSchemaFacet *a7)
{
  _DWORD *v13;
  int *v14;
  int v15;
  int type;
  xmlChar *v17;
  const char *v18;
  xmlChar *v19;
  xmlFreeFunc *v20;
  const char *v21;
  unint64_t FacetValueAsULong;
  xmlChar *v23;
  const char *v24;
  const char *v25;
  xmlChar *v26;
  char *value;
  _DWORD *v28;
  int v29;
  uint64_t v30;
  const xmlChar *v31;
  xmlChar *v33;
  const xmlChar *v34;
  const xmlChar *v35;
  _DWORD *v36;
  _DWORD *v37;
  const xmlChar *v38;
  uint64_t v39;
  const xmlChar *v40;
  xmlFreeFunc *v41;
  _DWORD *v42;
  int WhiteSpaceFacetValue;
  _DWORD *v44;
  uint64_t v45;
  int v46;
  int v47;
  _DWORD *v48;
  xmlChar *v49;
  xmlChar *v50;
  const xmlChar *v51;
  _DWORD *v52;
  char *v53;
  xmlChar *v54;
  uint64_t v55;
  xmlChar *cur;
  char v57[8];
  uint64_t v58;
  uint64_t v59;
  char v60;
  char __str[8];
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v13 = (_DWORD *)a1;
  v65 = *MEMORY[0x1E0C80C00];
  cur = 0;
  if (a3)
  {
    v14 = (int *)(a3 + 8);
LABEL_3:
    v15 = *v14;
    goto LABEL_7;
  }
  if (*(_DWORD *)a1 == 2)
  {
    v14 = *(int **)(a1 + 192);
    if (v14)
      goto LABEL_3;
  }
  v15 = -1;
LABEL_7:
  xmlSchemaFormatNodeForError((void **)&cur, a1, a3);
  if ((_DWORD)a2 == 1840)
    type = 1007;
  else
    type = a7->type;
  cur = xmlStrcat(cur, (const xmlChar *)"[");
  v17 = xmlStrcat(cur, (const xmlChar *)"facet '");
  cur = v17;
  v18 = xmlSchemaFacetTypeToString(type);
  cur = xmlStrcat(v17, (const xmlChar *)v18);
  v19 = xmlStrcat(cur, (const xmlChar *)"'] ");
  cur = v19;
  v20 = &xmlFree;
  if ((type - 1009) <= 2)
  {
    *(_QWORD *)__str = 0;
    v62 = 0;
    v64 = 0;
    v63 = 0;
    *(_QWORD *)v57 = 0;
    v58 = 0;
    v60 = 0;
    if (v15 == 2)
      v21 = "The value '%s' has a length of '%s'; ";
    else
      v21 = "The value has a length of '%s'; ";
    v59 = 0;
    cur = xmlStrcat(v19, (const xmlChar *)v21);
    FacetValueAsULong = xmlSchemaGetFacetValueAsULong(a7);
    snprintf(__str, 0x18uLL, "%lu", FacetValueAsULong);
    snprintf(v57, 0x18uLL, "%lu", a5);
    switch(type)
    {
      case 1011:
        v23 = cur;
        v24 = "this underruns the allowed minimum length of '%s'.\n";
        break;
      case 1010:
        v23 = cur;
        v24 = "this exceeds the allowed maximum length of '%s'.\n";
        break;
      case 1009:
        v23 = cur;
        v24 = "this differs from the allowed length of '%s'.\n";
        break;
      default:
        goto LABEL_23;
    }
    cur = xmlStrcat(v23, (const xmlChar *)v24);
LABEL_23:
    v26 = cur;
    if (v15 == 2)
    {
      v53 = __str;
      value = v57;
LABEL_35:
      v28 = v13;
      v29 = a2;
      v30 = a3;
      v31 = a4;
LABEL_36:
      xmlSchemaErr4Line(v28, 2, v29, v30, 0, (const char *)v26, v31, (xmlChar *)value, (xmlChar *)v53, 0);
    }
    else
    {
      xmlSchemaErr4Line(v13, 2, a2, a3, 0, (const char *)cur, (const xmlChar *)v57, (xmlChar *)__str, 0, 0);
    }
    return ((uint64_t (*)(xmlChar *))*v20)(cur);
  }
  switch(type)
  {
    case 1000:
      v25 = "The value '%s' is less than the minimum value allowed ('%s').\n";
      goto LABEL_34;
    case 1001:
      v25 = "The value '%s' must be greater than '%s'.\n";
      goto LABEL_34;
    case 1002:
      v25 = "The value '%s' is greater than the maximum value allowed ('%s').\n";
      goto LABEL_34;
    case 1003:
      v25 = "The value '%s' must be less than '%s'.\n";
      goto LABEL_34;
    case 1004:
      v25 = "The value '%s' has more digits than are allowed ('%s').\n";
      goto LABEL_34;
    case 1005:
      v25 = "The value '%s' has more fractional digits than are allowed ('%s').\n";
      goto LABEL_34;
    case 1006:
      v25 = "The value '%s' is not accepted by the pattern '%s'.\n";
LABEL_34:
      v26 = xmlStrcat(v19, (const xmlChar *)v25);
      cur = v26;
      value = (char *)a7->value;
      v53 = 0;
      goto LABEL_35;
    case 1007:
      v33 = 0;
      v54 = xmlStrcat(v19, (const xmlChar *)"The value '%s' is not an element of the set {%s}.\n");
      v55 = (uint64_t)a4;
      cur = v54;
      *(_QWORD *)__str = 0;
      v34 = (const xmlChar *)"'";
      v35 = (const xmlChar *)", '";
      break;
    default:
      if (v15 == 2)
      {
        v26 = xmlStrcat(v19, (const xmlChar *)"The value '%s' is not facet-valid.\n");
        cur = v26;
        v53 = 0;
        v28 = v13;
        v29 = a2;
        v30 = a3;
        v31 = a4;
      }
      else
      {
        v26 = xmlStrcat(v19, (const xmlChar *)"The value is not facet-valid.\n");
        cur = v26;
        v53 = 0;
        v28 = v13;
        v29 = a2;
        v30 = a3;
        v31 = 0;
      }
      goto LABEL_60;
  }
  while (1)
  {
    v36 = a6;
    v37 = v13;
    v38 = v34;
    v39 = a2;
    v40 = v35;
    v41 = v20;
    v42 = (_DWORD *)*((_QWORD *)v36 + 14);
    WhiteSpaceFacetValue = xmlSchemaGetWhiteSpaceFacetValue(v42);
    v44 = v36;
    v45 = *((_QWORD *)v36 + 15);
    if (v45)
      break;
    v52 = v42;
    v20 = v41;
    v51 = (const xmlChar *)v55;
    v35 = v40;
    a2 = v39;
    v34 = v38;
    v13 = v37;
    a6 = v52;
LABEL_53:
    if (!a6 || *a6 == 1)
      goto LABEL_62;
  }
  v46 = WhiteSpaceFacetValue;
  v47 = 0;
  v20 = v41;
  v35 = v40;
  a2 = v39;
  v34 = v38;
  v13 = v37;
  v48 = v44;
  do
  {
    if (*(_DWORD *)v45 == 1007)
    {
      if (xmlSchemaGetCanonValueWhtspExt_1(*(xmlSchemaValPtr *)(v45 + 56), v46, (xmlChar **)__str, 0) == -1)
      {
        xmlSchemaInternalErr2(v13, (const xmlChar *)"xmlSchemaFormatFacetEnumSet", (const xmlChar *)"compute the canonical lexical representation", 0);
        if (v33)
          ((void (*)(xmlChar *))*v20)(v33);
        v53 = 0;
        v28 = v13;
        v29 = a2;
        v30 = a3;
        v26 = v54;
        v31 = (const xmlChar *)v55;
LABEL_60:
        value = 0;
        goto LABEL_36;
      }
      if (v33)
        v49 = xmlStrcat(v33, v35);
      else
        v49 = xmlStrdup(v34);
      v50 = xmlStrcat(v49, *(const xmlChar **)__str);
      v33 = xmlStrcat(v50, v34);
      if (*(_QWORD *)__str)
      {
        ((void (*)(void))*v20)();
        *(_QWORD *)__str = 0;
      }
      v47 = 1;
    }
    v45 = *(_QWORD *)(v45 + 8);
  }
  while (v45);
  if (!v47)
  {
    a6 = (_DWORD *)*((_QWORD *)v48 + 14);
    v51 = (const xmlChar *)v55;
    goto LABEL_53;
  }
  v51 = (const xmlChar *)v55;
LABEL_62:
  xmlSchemaErr4Line(v13, 2, a2, a3, 0, (const char *)v54, v51, v33, 0, 0);
  if (v33)
    ((void (*)(xmlChar *))*v20)(v33);
  return ((uint64_t (*)(xmlChar *))*v20)(cur);
}

uint64_t xmlSchemaGetCanonValueWhtspExt_1(xmlSchemaValPtr cur, int a2, xmlChar **a3, int a4)
{
  uint64_t result;
  xmlSchemaValPtr Next;
  xmlSchemaValType ValType;
  xmlSchemaValType v11;
  const xmlChar *AsString;
  xmlChar *v13;
  xmlChar *v14;
  int v15;
  uint64_t v16;
  xmlChar *v17;
  xmlChar *v18;
  const xmlChar *v19;
  xmlChar *retValue;

  retValue = 0;
  result = 0xFFFFFFFFLL;
  if (!cur || !a3)
    return result;
  Next = xmlSchemaValueGetNext(cur);
  *a3 = 0;
  while (1)
  {
    ValType = xmlSchemaGetValType(cur);
    v11 = ValType;
    if (ValType <= XML_SCHEMAS_ANYSIMPLETYPE && ((1 << ValType) & 0x400000000006) != 0)
    {
      AsString = xmlSchemaValueGetAsString(cur);
      if (!AsString)
      {
        if ((unint64_t)*a3 | (unint64_t)Next)
          goto LABEL_33;
LABEL_30:
        v19 = (const xmlChar *)&byte_1B0865C1A;
LABEL_31:
        v18 = xmlStrdup(v19);
LABEL_32:
        *a3 = v18;
        goto LABEL_33;
      }
      v13 = (xmlChar *)AsString;
      if (a2 == 2)
      {
        v14 = xmlSchemaWhiteSpaceReplace(AsString);
      }
      else
      {
        if (a2 != 3)
        {
          v14 = retValue;
LABEL_22:
          if (v14)
            v13 = v14;
          goto LABEL_24;
        }
        v14 = xmlSchemaCollapseString(AsString);
      }
      retValue = v14;
      goto LABEL_22;
    }
    if (xmlSchemaGetCanonValue(cur, (const xmlChar **)&retValue) == -1)
      break;
    v13 = retValue;
    if (a4)
    {
      if (v11 == XML_SCHEMAS_DECIMAL)
      {
        v15 = xmlStrlen(retValue);
        v13 = retValue;
        if (v15 >= 3 && retValue[v15 - 1] == 48)
        {
          v16 = (v15 - 2);
          if (retValue[v16] == 46)
          {
            retValue[v16] = 0;
            v13 = retValue;
          }
        }
      }
    }
LABEL_24:
    if (*a3)
    {
      if (v13)
      {
        v17 = xmlStrcat(*a3, (const xmlChar *)" ");
        *a3 = v17;
        v18 = xmlStrcat(v17, v13);
        goto LABEL_32;
      }
    }
    else
    {
      if (v13)
      {
        v19 = v13;
        goto LABEL_31;
      }
      if (!Next)
        goto LABEL_30;
    }
LABEL_33:
    if (retValue)
    {
      xmlFree(retValue);
      retValue = 0;
    }
    result = (uint64_t)xmlSchemaValueGetNext(cur);
    cur = (xmlSchemaValPtr)result;
    if (!result)
      return result;
  }
  if (retValue)
    xmlFree(retValue);
  if (*a3)
    xmlFree(*a3);
  if (retValue)
    xmlFree(retValue);
  return 0xFFFFFFFFLL;
}

_QWORD *xmlFreeIDCHashEntry(_QWORD *result)
{
  _QWORD *v1;

  if (result)
  {
    do
    {
      v1 = (_QWORD *)*result;
      xmlFree(result);
      result = v1;
    }
    while (v1);
  }
  return result;
}

void xmlSchemaIDCFreeBinding(_QWORD *a1)
{
  void *v2;
  void **v3;

  v2 = (void *)a1[2];
  if (v2)
    xmlFree(v2);
  v3 = (void **)a1[4];
  if (v3)
  {
    if (*v3)
      xmlFree(*v3);
    xmlFree(v3);
  }
  xmlFree(a1);
}

uint64_t xmlSchemaValidatorPushElem(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  void *v5;
  _QWORD *v6;
  _OWORD *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  int v13;
  int v14;

  v2 = *(int *)(a1 + 172);
  v3 = *(int *)(a1 + 184);
  if ((int)v2 > (int)v3)
  {
    v4 = "inconsistent depth encountered";
LABEL_3:
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaGetFreshElemInfo", (const xmlChar *)v4, 0);
LABEL_21:
    *(_QWORD *)(a1 + 192) = 0;
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaValidatorPushElem", (const xmlChar *)"calling xmlSchemaGetFreshElemInfo()", 0);
    return 0xFFFFFFFFLL;
  }
  v5 = *(void **)(a1 + 176);
  if (!v5)
  {
    v7 = xmlMalloc(0x50uLL);
    *(_QWORD *)(a1 + 176) = v7;
    if (!v7)
    {
      v13 = *(_DWORD *)(a1 + 108) + 1;
      *(_DWORD *)(a1 + 104) = 1818;
      *(_DWORD *)(a1 + 108) = v13;
      v12 = "allocating the element info array";
      goto LABEL_20;
    }
    v7[3] = 0u;
    v7[4] = 0u;
    v7[1] = 0u;
    v7[2] = 0u;
    *v7 = 0u;
    *(_DWORD *)(a1 + 184) = 10;
    goto LABEL_14;
  }
  if ((int)v3 <= (int)v2)
  {
    *(_DWORD *)(a1 + 184) = 2 * v3;
    v8 = xmlRealloc(v5, 16 * v3);
    *(_QWORD *)(a1 + 176) = v8;
    if (!v8)
    {
      v14 = *(_DWORD *)(a1 + 108) + 1;
      *(_DWORD *)(a1 + 104) = 1818;
      *(_DWORD *)(a1 + 108) = v14;
      v12 = "re-allocating the element info array";
      goto LABEL_20;
    }
    v9 = *(int *)(a1 + 184);
    if ((int)v3 < (int)v9)
    {
      do
        *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * v3++) = 0;
      while (v9 != v3);
    }
    goto LABEL_14;
  }
  v6 = (_QWORD *)*((_QWORD *)v5 + v2);
  if (!v6)
  {
LABEL_14:
    v6 = xmlMalloc(0x90uLL);
    if (v6)
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * *(int *)(a1 + 172)) = v6;
      goto LABEL_16;
    }
    v11 = *(_DWORD *)(a1 + 108) + 1;
    *(_DWORD *)(a1 + 104) = 1818;
    *(_DWORD *)(a1 + 108) = v11;
    v12 = "allocating an element info";
LABEL_20:
    __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)v12);
    goto LABEL_21;
  }
  if (v6[3])
  {
    v4 = "elem info has not been cleared";
    goto LABEL_3;
  }
LABEL_16:
  v10 = 0;
  *((_OWORD *)v6 + 7) = 0u;
  *((_OWORD *)v6 + 8) = 0u;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((_OWORD *)v6 + 1) = 0u;
  *((_OWORD *)v6 + 2) = 0u;
  *(_OWORD *)v6 = 0u;
  *(_DWORD *)v6 = 1;
  *((_DWORD *)v6 + 22) = *(_DWORD *)(a1 + 172);
  *(_QWORD *)(a1 + 192) = v6;
  *(_DWORD *)(a1 + 296) = 0;
  return v10;
}

uint64_t xmlSchemaValidatorPushAttribute(_DWORD *a1, const xmlChar *a2, int a3, const xmlChar *a4, const xmlChar *a5, const xmlChar *a6)
{
  const xmlChar **FreshAttrInfo;
  const xmlChar **v13;
  int v14;
  uint64_t result;
  int v16;
  const xmlChar *v17;

  FreshAttrInfo = (const xmlChar **)xmlSchemaGetFreshAttrInfo((uint64_t)a1);
  if (!FreshAttrInfo)
  {
    xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaPushAttribute", (const xmlChar *)"calling xmlSchemaGetFreshAttrInfo()", 0);
    return 0xFFFFFFFFLL;
  }
  v13 = FreshAttrInfo;
  FreshAttrInfo[1] = a2;
  *((_DWORD *)FreshAttrInfo + 4) = a3;
  *((_DWORD *)FreshAttrInfo + 22) = 1;
  FreshAttrInfo[3] = a4;
  FreshAttrInfo[4] = a5;
  if (a5)
  {
    if (xmlStrEqual(a4, (const xmlChar *)"nil"))
    {
      if (!xmlStrEqual(v13[4], (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance"))
        goto LABEL_19;
      v14 = 2;
    }
    else if (xmlStrEqual(a4, (const xmlChar *)"type"))
    {
      if (!xmlStrEqual(v13[4], (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance"))
        goto LABEL_19;
      v14 = 1;
    }
    else if (xmlStrEqual(a4, (const xmlChar *)"schemaLocation"))
    {
      if (!xmlStrEqual(v13[4], (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance"))
        goto LABEL_19;
      v14 = 3;
    }
    else
    {
      v16 = xmlStrEqual(a4, (const xmlChar *)"noNamespaceSchemaLocation");
      v17 = v13[4];
      if (v16)
      {
        if (!xmlStrEqual(v17, (const xmlChar *)"http://www.w3.org/2001/XMLSchema-instance"))
          goto LABEL_19;
        v14 = 4;
      }
      else
      {
        if (!xmlStrEqual(v17, (const xmlChar *)"http://www.w3.org/2000/xmlns/"))
          goto LABEL_19;
        v14 = 5;
      }
    }
    *((_DWORD *)v13 + 23) = v14;
  }
LABEL_19:
  v13[5] = a6;
  *((_DWORD *)v13 + 16) |= 2u;
  result = 0;
  if (*((_DWORD *)v13 + 23))
    *((_DWORD *)v13 + 22) = 17;
  return result;
}

uint64_t xmlSchemaValidateElem(int *data)
{
  int *v1;
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const xmlChar *v9;
  const xmlChar *i;
  unsigned int v11;
  uint64_t v13;
  xmlChar j;
  const xmlChar *v15;
  const xmlChar *k;
  unsigned int v17;
  uint64_t v19;
  xmlChar *v20;
  uint64_t v21;
  xmlNode *v22;
  uint64_t v23;
  int *v24;
  xmlChar *v25;
  uint64_t v26;
  xmlChar *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const xmlChar *v31;
  const char *v32;
  const char *v33;
  int v34;
  BOOL v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  _QWORD *Elem;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  xmlRegexp *v49;
  xmlRegExecCtxt *v50;
  xmlRegExecCtxtPtr v51;
  int v52;
  const char *v53;
  const char *v54;
  _DWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  xmlChar *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  xmlSchemaTypePtr BuiltInType;
  int v63;
  uint64_t v64;
  uint64_t *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  xmlChar *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int v76;
  int v77;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  int v88;
  xmlChar *v89;
  int nbneg;
  int nbval;
  int terminal;
  xmlChar *values[2];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;

  v1 = data;
  v98 = *MEMORY[0x1E0C80C00];
  v2 = data[76];
  if (v2 != -1 && data[43] >= v2)
  {
    v32 = "xmlSchemaValidateElem";
    v33 = "in skip-state";
    goto LABEL_227;
  }
  if (!data[42])
    goto LABEL_69;
  v3 = data[74];
  if ((int)v3 < 1)
    goto LABEL_68;
  v4 = (uint64_t *)*((_QWORD *)data + 36);
  v5 = v4;
  v6 = data[74];
  while (1)
  {
    v7 = *v5;
    if (*(_DWORD *)(*v5 + 92) == 3)
      break;
    ++v5;
    if (!--v6)
    {
      while (1)
      {
        v7 = *v4;
        if (*(_DWORD *)(*v4 + 92) == 4)
          goto LABEL_11;
        ++v4;
        if (!--v3)
          goto LABEL_68;
      }
    }
  }
LABEL_11:
  v89 = 0;
  v8 = 0;
  v9 = *(const xmlChar **)(v7 + 40);
  while (1)
  {
    if (*(_DWORD *)(v7 + 92) == 3)
    {
      for (i = v9; ; ++i)
      {
        v11 = *v9;
        if (v11 > 0x20 || ((1 << v11) & 0x100002600) == 0)
          break;
        ++v9;
      }
      v13 = 0;
      for (j = *v9; j > 0x20u || ((1 << j) & 0x100002601) == 0; j = v9[++v13])
        ;
      if (!v13)
        goto LABEL_66;
      v15 = &v9[v13];
      v89 = (xmlChar *)xmlDictLookup(*(xmlDictPtr *)(*((_QWORD *)v1 + 5) + 120), v9, v13);
      v9 = v15;
    }
    for (k = v9; ; ++k)
    {
      v17 = *k;
      if (v17 > 0x20 || ((1 << v17) & 0x100002600) == 0)
        break;
      ++v9;
    }
    v19 = 0;
    while (v17 > 0x20u || ((1 << v17) & 0x100002601) == 0)
      LOBYTE(v17) = k[++v19];
    if (!v19)
      break;
    v20 = (xmlChar *)xmlDictLookup(*(xmlDictPtr *)(*((_QWORD *)v1 + 5) + 120), k, v19);
    v21 = *((_QWORD *)v1 + 5);
    v22 = *(xmlNode **)(v7 + 8);
    values[0] = 0;
    if (!v1 || !v21)
      goto LABEL_99;
    v23 = *((_QWORD *)v1 + 20);
    if (!v23)
    {
      v54 = "no parser context available";
      v55 = v1;
      goto LABEL_98;
    }
    if (!*(_QWORD *)(v23 + 48))
    {
      v54 = "no constructor";
      v55 = (_DWORD *)*((_QWORD *)v1 + 20);
LABEL_98:
      xmlSchemaInternalErr2(v55, (const xmlChar *)"xmlSchemaAssembleByLocation", (const xmlChar *)v54, 0);
LABEL_99:
      v32 = "xmlSchemaAssembleByXSI";
      v33 = "assembling schemata";
      goto LABEL_227;
    }
    v24 = v1;
    v25 = xmlSchemaBuildAbsoluteURI(*(xmlDict **)(v23 + 152), v20, v22);
    v26 = xmlSchemaAddSchemaDoc(v23, 1u, v25, 0, 0, 0, (uint64_t)v22, 0, v89, (const xmlChar ***)values);
    if ((_DWORD)v26)
      goto LABEL_41;
    v27 = values[0];
    if (values[0])
    {
      v28 = *(_QWORD *)(v23 + 48);
      if (!*(_QWORD *)(v28 + 32))
        *(xmlChar **)(v28 + 32) = values[0];
      v29 = *((_QWORD *)v27 + 4);
      v1 = v24;
      if (v29 && !*((_DWORD *)v27 + 13))
      {
        *(_QWORD *)(v23 + 32) = 0;
        *(_QWORD *)(v23 + 88) = v29;
        v26 = xmlSchemaParseNewDocWithContext(v23, v21, (uint64_t)v27);
        if ((_DWORD)v26)
        {
          if ((_DWORD)v26 == -1)
          {
            *(_QWORD *)(v23 + 88) = 0;
            goto LABEL_99;
          }
          v30 = *(_DWORD *)(v23 + 36);
          if (!v30)
          {
LABEL_58:
            xmlSchemaFixupComponents(v23, (uint64_t)values[0]);
            v26 = *(unsigned int *)(v23 + 32);
            if ((_DWORD)v26 && !v24[26])
              v24[26] = v26;
            v30 = *(_DWORD *)(v23 + 36);
          }
        }
        else
        {
          v30 = *(_DWORD *)(v23 + 36);
          if (!v30)
            goto LABEL_58;
          v26 = *(unsigned int *)(v23 + 32);
        }
        v24[27] += v30;
        *(_QWORD *)(v23 + 88) = 0;
LABEL_41:
        v1 = v24;
        v8 = v26;
        if ((_DWORD)v26 == -1)
          goto LABEL_99;
        goto LABEL_54;
      }
    }
    else
    {
      v31 = v25;
      v1 = v24;
      xmlSchemaCustomWarning(v24, 1879, (uint64_t)v22, (const xmlChar *)"The document at location '%s' could not be acquired", v31, 0, 0);
    }
    v8 = 0;
LABEL_54:
    v9 = &k[v19];
    if (!k[v19])
      goto LABEL_66;
  }
  if (*(_DWORD *)(v7 + 92) == 3)
    xmlSchemaCustomWarning(v1, 1879, *(_QWORD *)(v7 + 8), (const xmlChar *)"The value must consist of tuples: the target namespace name and the document's URI", 0, 0, 0);
LABEL_66:
  if ((_DWORD)v8 == -1)
    return v8;
  if ((_DWORD)v8)
  {
    v1[76] = 0;
    return v8;
  }
LABEL_68:
  xmlHashScan(*(xmlHashTablePtr *)(*((_QWORD *)v1 + 5) + 96), (xmlHashScanner)xmlSchemaAugmentImportedIDC, v1);
LABEL_69:
  v34 = v1[43];
  v35 = __OFSUB__(v34, 1);
  v36 = v34 - 1;
  if (v36 < 0 != v35)
  {
    Elem = xmlSchemaGetElem(*((_QWORD *)v1 + 5), *(const xmlChar **)(*((_QWORD *)v1 + 24) + 24), *(xmlChar **)(*((_QWORD *)v1 + 24) + 32));
    v45 = *((_QWORD *)v1 + 24);
    *(_QWORD *)(v45 + 80) = Elem;
    if (!Elem)
    {
      v8 = 1845;
      xmlSchemaCustomErr4(v1, 1845, 0, 0, (const xmlChar *)"No matching global declaration available for the validation root", 0, 0, 0, 0);
LABEL_207:
      v1[76] = v1[43];
      return v8;
    }
    v46 = (uint64_t)Elem;
    goto LABEL_117;
  }
  v37 = *(_QWORD *)(*((_QWORD *)v1 + 22) + 8 * v36);
  v38 = *(_DWORD *)(v37 + 64);
  if ((v38 & 0x20) != 0)
  {
    v38 ^= 0x20u;
    *(_DWORD *)(v37 + 64) = v38;
  }
  if ((v38 & 4) != 0)
  {
    *((_QWORD *)v1 + 24) = v37;
    v8 = 1848;
    xmlSchemaCustomErr4(v1, 1848, 0, 0, (const xmlChar *)"Neither character nor element content is allowed, because the element was 'nilled'", 0, 0, 0, 0);
LABEL_83:
    v47 = v1[43];
    v48 = *(_QWORD *)(*((_QWORD *)v1 + 22) + 8 * v47);
    *((_QWORD *)v1 + 24) = v48;
LABEL_84:
    v1[76] = v47;
    *(_DWORD *)(v48 + 64) |= 0x200u;
    *(_DWORD *)(v37 + 64) |= 0x100u;
    if ((_DWORD)v8)
    {
LABEL_85:
      if ((v8 & 0x80000000) != 0)
        goto LABEL_112;
      goto LABEL_207;
    }
    goto LABEL_114;
  }
  v39 = *(_QWORD *)(v37 + 56);
  if (*(_DWORD *)(v39 + 160) != 45)
  {
    switch(*(_DWORD *)(v39 + 92))
    {
      case 1:
        *((_QWORD *)v1 + 24) = v37;
        v8 = 1841;
        xmlSchemaCustomErr4(v1, 1841, 0, 0, (const xmlChar *)"Element content is not allowed, because the content type is empty", 0, 0, 0, 0);
        goto LABEL_83;
      case 2:
      case 3:
        v96 = 0u;
        v97 = 0u;
        v94 = 0u;
        v95 = 0u;
        *(_OWORD *)values = 0u;
        nbval = 10;
        terminal = 0;
        nbneg = 0;
        v49 = *(xmlRegexp **)(v39 + 200);
        if (!v49)
        {
          v53 = "type has elem content but no content model";
          goto LABEL_111;
        }
        if ((v38 & 0x100) != 0)
        {
          v53 = "validating elem, but elem content is already invalid";
          goto LABEL_111;
        }
        v50 = *(xmlRegExecCtxt **)(v37 + 112);
        if (v50)
          goto LABEL_93;
        v51 = xmlRegNewExecCtxt(v49, (xmlRegExecCallbacks)xmlSchemaVContentModelCallback, v1);
        if (!v51)
        {
          v53 = "failed to create a regex context";
          goto LABEL_111;
        }
        v50 = v51;
        *(_QWORD *)(v37 + 112) = v51;
LABEL_93:
        v52 = xmlRegExecPushString2(v50, *(const xmlChar **)(*((_QWORD *)v1 + 24) + 24), *(const xmlChar **)(*((_QWORD *)v1 + 24) + 32), *((void **)v1 + 24));
        if (v1[26] == 1818)
        {
          v53 = "calling xmlRegExecPushString2()";
          goto LABEL_111;
        }
        if (v52 < 0)
        {
          xmlRegExecErrInfo(v50, 0, &nbval, &nbneg, values, &terminal);
          xmlSchemaComplexTypeErr(v1, (const xmlChar *)"This element is not expected", nbval, nbneg, (uint64_t)values);
          v8 = v1[26];
          LODWORD(v47) = v1[43];
          v48 = *((_QWORD *)v1 + 24);
          goto LABEL_84;
        }
        break;
      case 4:
      case 6:
        *((_QWORD *)v1 + 24) = v37;
        if (*(_DWORD *)v39 == 5)
          xmlSchemaCustomErr4(v1, 1842, 0, 0, (const xmlChar *)"Element content is not allowed, because the content type is a simple type definition", 0, 0, 0, 0);
        else
          xmlSchemaCustomErr4(v1, 1828, 0, 0, (const xmlChar *)"Element content is not allowed, because the type definition is simple", 0, 0, 0, 0);
        v47 = v1[43];
        v48 = *(_QWORD *)(*((_QWORD *)v1 + 22) + 8 * v47);
        *((_QWORD *)v1 + 24) = v48;
        v8 = v1[26];
        goto LABEL_84;
      default:
        goto LABEL_114;
    }
    goto LABEL_114;
  }
  v40 = xmlSchemaGetElem(*((_QWORD *)v1 + 5), *(const xmlChar **)(*((_QWORD *)v1 + 24) + 24), *(xmlChar **)(*((_QWORD *)v1 + 24) + 32));
  v41 = *((_QWORD *)v1 + 24);
  *(_QWORD *)(v41 + 80) = v40;
  if (v40)
    goto LABEL_114;
  v42 = v1[74];
  if ((int)v42 < 1)
  {
LABEL_79:
    *(_QWORD *)(*((_QWORD *)v1 + 24) + 56) = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYTYPE);
    goto LABEL_114;
  }
  v43 = (uint64_t *)*((_QWORD *)v1 + 36);
  while (*(_DWORD *)(*v43 + 92) != 1)
  {
    ++v43;
    if (!--v42)
      goto LABEL_79;
  }
  v56 = xmlSchemaProcessXSIType((uint64_t)v1, *v43, v41 + 56, 0);
  if (!(_DWORD)v56)
  {
LABEL_114:
    if (v1[43] == v1[76])
      return 0;
    v45 = *((_QWORD *)v1 + 24);
    v46 = *(_QWORD *)(v45 + 80);
    if (!v46)
    {
      if (!*(_QWORD *)(v45 + 56))
      {
        v32 = "xmlSchemaValidateElem";
        v33 = "the child element was valid but neither the declaration nor the type was set";
        goto LABEL_227;
      }
      goto LABEL_199;
    }
LABEL_117:
    if (*(_DWORD *)v46 != 2)
      goto LABEL_123;
    if (*(_DWORD *)(v46 + 40) == 1)
    {
      v8 = 0;
      goto LABEL_207;
    }
    v57 = xmlSchemaGetElem(*((_QWORD *)v1 + 5), *(const xmlChar **)(v45 + 24), *(xmlChar **)(v45 + 32));
    if (v57)
    {
      *(_QWORD *)(*((_QWORD *)v1 + 24) + 80) = v57;
      goto LABEL_122;
    }
    if (*(_DWORD *)(v46 + 40) == 3)
    {
      xmlSchemaCustomErr4(v1, 1845, 0, 0, (const xmlChar *)"No matching global element declaration available, but demanded by the strict wildcard", 0, 0, 0, 0);
      v8 = v1[26];
      if ((_DWORD)v8)
      {
        if ((v8 & 0x80000000) == 0)
          goto LABEL_207;
LABEL_153:
        v32 = "xmlSchemaValidateElem";
        v33 = "calling xmlSchemaValidateElemWildcard()";
        goto LABEL_227;
      }
    }
    else
    {
      v64 = v1[74];
      if ((int)v64 < 1)
      {
LABEL_149:
        *(_QWORD *)(*((_QWORD *)v1 + 24) + 56) = xmlSchemaGetBuiltInType(XML_SCHEMAS_ANYTYPE);
      }
      else
      {
        v65 = (uint64_t *)*((_QWORD *)v1 + 36);
        while (*(_DWORD *)(*v65 + 92) != 1)
        {
          ++v65;
          if (!--v64)
            goto LABEL_149;
        }
        if (xmlSchemaProcessXSIType((uint64_t)v1, *v65, *((_QWORD *)v1 + 24) + 56, 0) == -1)
        {
          xmlSchemaInternalErr2(v1, (const xmlChar *)"xmlSchemaValidateElemWildcard", (const xmlChar *)"calling xmlSchemaProcessXSIType() to process the attribute 'xsi:nil'", 0);
          goto LABEL_153;
        }
      }
    }
LABEL_122:
    v45 = *((_QWORD *)v1 + 24);
    v46 = *(_QWORD *)(v45 + 80);
    if (*(_DWORD *)v46 != 14)
    {
      *(_QWORD *)(v45 + 80) = 0;
      goto LABEL_199;
    }
LABEL_123:
    if ((*(_BYTE *)(v46 + 88) & 0x10) != 0)
    {
      xmlSchemaCustomErr4(v1, 1846, 0, 0, (const xmlChar *)"The element declaration is abstract", 0, 0, 0, 0);
      v8 = v1[26];
      if ((_DWORD)v8)
      {
        if ((v8 & 0x80000000) == 0)
          goto LABEL_207;
LABEL_226:
        v32 = "xmlSchemaValidateElem";
        v33 = "calling xmlSchemaValidateElemDecl()";
        goto LABEL_227;
      }
      v45 = *((_QWORD *)v1 + 24);
    }
    else
    {
      v58 = *(xmlChar **)(v46 + 56);
      if (!v58)
        goto LABEL_205;
      v59 = v1[74];
      if ((int)v59 >= 1)
      {
        v60 = (uint64_t *)*((_QWORD *)v1 + 36);
        while (1)
        {
          v61 = *v60;
          if (*(_DWORD *)(*v60 + 92) == 2)
            break;
          ++v60;
          if (!--v59)
            goto LABEL_162;
        }
        *((_QWORD *)v1 + 24) = v61;
        BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_BOOLEAN);
        v63 = xmlSchemaVCheckCVCSimpleType((uint64_t)v1, 0, (uint64_t)BuiltInType, *(xmlChar **)(v61 + 40), (xmlSchemaValPtr *)(v61 + 48), 1u, 0, 0);
        *((_QWORD *)v1 + 24) = *(_QWORD *)(*((_QWORD *)v1 + 22) + 8 * v1[43]);
        if (v63 < 0)
        {
          v66 = "xmlSchemaValidateElemDecl";
          v67 = "calling xmlSchemaVCheckCVCSimpleType() to validate the attribute 'xsi:nil'";
          goto LABEL_225;
        }
        if (!v63)
        {
          if ((*(_BYTE *)(v46 + 88) & 1) != 0)
          {
            if (xmlSchemaValueGetAsBoolean(*(xmlSchemaValPtr *)(v61 + 48)))
            {
              if ((*(_BYTE *)(v46 + 88) & 8) != 0 && *(_QWORD *)(v46 + 144))
                xmlSchemaCustomErr4(v1, 1849, 0, 0, (const xmlChar *)"The element cannot be 'nilled' because there is a fixed value constraint defined for it", 0, 0, 0, 0);
              else
                *(_DWORD *)(*((_QWORD *)v1 + 24) + 64) |= 4u;
            }
          }
          else
          {
            xmlSchemaCustomErr4(v1, 1847, 0, 0, (const xmlChar *)"The element is not 'nillable'", 0, 0, 0, 0);
          }
        }
LABEL_162:
        v68 = v1[74];
        if ((int)v68 >= 1)
        {
          v69 = (uint64_t *)*((_QWORD *)v1 + 36);
          while (1)
          {
            v70 = *v69;
            if (*(_DWORD *)(*v69 + 92) == 1)
              break;
            ++v69;
            if (!--v68)
              goto LABEL_170;
          }
          values[0] = 0;
          if (xmlSchemaProcessXSIType((uint64_t)v1, v70, (uint64_t)values, v46) == -1)
          {
            v66 = "xmlSchemaValidateElemDecl";
            v67 = "calling xmlSchemaProcessXSIType() to process the attribute 'xsi:type'";
LABEL_225:
            xmlSchemaInternalErr2(v1, (const xmlChar *)v66, (const xmlChar *)v67, 0);
            goto LABEL_226;
          }
          v71 = values[0];
          if (values[0])
          {
            *(_DWORD *)(*((_QWORD *)v1 + 24) + 64) |= 8u;
            v58 = v71;
          }
        }
      }
LABEL_170:
      v72 = *(_QWORD *)(v46 + 192);
      v45 = *((_QWORD *)v1 + 24);
      if (v72)
      {
        if (*(_QWORD *)(v45 + 104))
        {
          v66 = "xmlSchemaIDCRegisterMatchers";
          v67 = "The chain of IDC matchers is expected to be empty";
        }
        else
        {
          v73 = 0;
LABEL_174:
          if (*(_DWORD *)v72 == 24 && (v74 = *(_QWORD *)(*(_QWORD *)(v72 + 72) + 8)) != 0)
          {
            *(_DWORD *)(*((_QWORD *)v1 + 24) + 136) = 1;
            v75 = (char *)(v1 + 50);
            while (1)
            {
              v75 = *(char **)v75;
              if (!v75)
                break;
              if (*((_QWORD *)v75 + 1) == v74)
              {
                v76 = *((_DWORD *)v75 + 4);
                v77 = v1[43];
                if (v76 == -1 || v77 < v76)
                  *((_DWORD *)v75 + 4) = v77;
                goto LABEL_185;
              }
            }
          }
          else
          {
LABEL_185:
            v79 = (char *)(v1 + 50);
            while (1)
            {
              v79 = *(char **)v79;
              if (!v79)
                break;
              if (*((_QWORD *)v79 + 1) == v72)
              {
                v80 = *((_QWORD *)v1 + 28);
                if (v80)
                {
                  *((_QWORD *)v1 + 28) = *(_QWORD *)(v80 + 16);
                  *(_QWORD *)(v80 + 16) = 0;
                }
                else
                {
                  v81 = xmlMalloc(0x48uLL);
                  if (!v81)
                  {
                    v88 = v1[27] + 1;
                    v1[26] = 1818;
                    v1[27] = v88;
                    __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)"allocating an IDC matcher");
                    goto LABEL_226;
                  }
                  v80 = (uint64_t)v81;
                  v81[8] = 0;
                  *((_OWORD *)v81 + 2) = 0u;
                  *((_OWORD *)v81 + 3) = 0u;
                  *(_OWORD *)v81 = 0u;
                  *((_OWORD *)v81 + 1) = 0u;
                }
                if (v73)
                  v82 = (uint64_t *)(v73 + 8);
                else
                  v82 = (uint64_t *)(*((_QWORD *)v1 + 24) + 104);
                *v82 = v80;
                *(_DWORD *)v80 = 0;
                *(_DWORD *)(v80 + 4) = v1[43];
                *(_QWORD *)(v80 + 24) = v79;
                *(_DWORD *)(v80 + 32) = **((_DWORD **)v79 + 1);
                if (xmlSchemaIDCAddStateObject((uint64_t)v1, v80, *(_QWORD *)(v72 + 48), 1) != -1)
                {
                  v72 = *(_QWORD *)(v72 + 16);
                  v73 = v80;
                  if (v72)
                    goto LABEL_174;
                  v45 = *((_QWORD *)v1 + 24);
                  goto LABEL_198;
                }
                goto LABEL_226;
              }
            }
          }
          v66 = "xmlSchemaIDCRegisterMatchers";
          v67 = "Could not find an augmented IDC item for an IDC definition";
        }
        goto LABEL_225;
      }
LABEL_198:
      *(_QWORD *)(v45 + 56) = v58;
    }
LABEL_199:
    v83 = *(_QWORD *)(v45 + 56);
    if (v83)
    {
      if ((*(_BYTE *)(v83 + 90) & 0x10) != 0)
      {
        *(_DWORD *)(v45 + 64) |= 0x400u;
        v8 = 1876;
        xmlSchemaCustomErr4(v1, 1876, 0, 0, (const xmlChar *)"The type definition is abstract", 0, 0, 0, 0);
        goto LABEL_207;
      }
      if (*((_QWORD *)v1 + 26))
      {
        v8 = xmlSchemaXPathEvaluate((uint64_t)v1, 1);
        v84 = *((_QWORD *)v1 + 24);
        *(_DWORD *)(v84 + 140) = 1;
        if ((_DWORD)v8 == -1)
        {
          v86 = "calling xmlSchemaXPathEvaluate()";
          goto LABEL_221;
        }
        v83 = *(_QWORD *)(v84 + 56);
      }
      else
      {
        v8 = 0;
      }
      if (*(_DWORD *)v83 == 5 || *(_DWORD *)(v83 + 160) == 45)
      {
        if (!v1[74] && !*(_QWORD *)(v83 + 216))
          goto LABEL_215;
        v85 = xmlSchemaVAttributesComplex((uint64_t)v1);
      }
      else
      {
        if (!v1[74])
          goto LABEL_215;
        v85 = xmlSchemaVAttributesSimple((uint64_t)v1);
      }
      v8 = v85;
LABEL_215:
      if (v1[74])
        xmlSchemaClearAttrInfos((uint64_t)v1);
      if ((_DWORD)v8 != -1)
        return 0;
      v86 = "calling attributes validation";
LABEL_221:
      xmlSchemaInternalErr2(v1, (const xmlChar *)"xmlSchemaValidateElem", (const xmlChar *)v86, 0);
      return v8;
    }
    *(_DWORD *)(v45 + 64) |= 0x400u;
LABEL_205:
    v8 = 1875;
    xmlSchemaCustomErr4(v1, 1875, 0, 0, (const xmlChar *)"The type definition is absent", 0, 0, 0, 0);
    goto LABEL_207;
  }
  v8 = v56;
  if ((_DWORD)v56 != -1)
    goto LABEL_85;
  v53 = "calling xmlSchemaProcessXSIType() to process the attribute 'xsi:nil'";
LABEL_111:
  xmlSchemaInternalErr2(v1, (const xmlChar *)"xmlSchemaValidateChildElem", (const xmlChar *)v53, 0);
LABEL_112:
  v32 = "xmlSchemaValidateElem";
  v33 = "calling xmlSchemaStreamValidateChildElement()";
LABEL_227:
  xmlSchemaInternalErr2(v1, (const xmlChar *)v32, (const xmlChar *)v33, 0);
  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaVPushText(uint64_t a1, int a2, xmlChar *str2, int len, int a5)
{
  uint64_t v6;
  int v7;
  const xmlChar *v8;
  int v9;
  uint64_t result;
  unsigned int v11;
  int v12;
  xmlChar *v13;
  unsigned int v14;
  BOOL v16;
  uint64_t v17;
  xmlChar *v18;
  xmlChar *v19;
  xmlChar *v20;
  uint64_t v21;
  unsigned int v22;
  xmlChar *v23;

  v6 = *(_QWORD *)(a1 + 192);
  v7 = *(_DWORD *)(v6 + 64);
  if ((v7 & 4) != 0)
  {
    xmlSchemaCustomErr4((_DWORD *)a1, 1848, 0, 0, (const xmlChar *)"Neither character nor element content is allowed because the element is 'nilled'", 0, 0, 0, 0);
    return *(unsigned int *)(a1 + 104);
  }
  v8 = str2;
  v9 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 92);
  if (v9 != 2)
  {
    if (v9 == 1)
    {
      xmlSchemaCustomErr4((_DWORD *)a1, 1841, 0, 0, (const xmlChar *)"Character content is not allowed, because the content type is empty", 0, 0, 0, 0);
      return *(unsigned int *)(a1 + 104);
    }
    if (str2)
    {
      if (*str2)
      {
        if (v9 != 3 || (v17 = *(_QWORD *)(v6 + 80)) != 0 && *(_QWORD *)(v17 + 144))
        {
          if (*(_QWORD *)(v6 + 40))
          {
            if (len < 0)
            {
              len = xmlStrlen(str2);
              v6 = *(_QWORD *)(a1 + 192);
              v7 = *(_DWORD *)(v6 + 64);
            }
            v18 = *(xmlChar **)(v6 + 40);
            if ((v7 & 2) != 0)
            {
              v23 = xmlStrncat(v18, v8, len);
              result = 0;
              *(_QWORD *)(*(_QWORD *)(a1 + 192) + 40) = v23;
              return result;
            }
            v19 = xmlStrncatNew(v18, v8, len);
LABEL_32:
            v20 = v19;
            result = 0;
            v21 = *(_QWORD *)(a1 + 192);
            *(_QWORD *)(v21 + 40) = v20;
            *(_DWORD *)(v21 + 64) |= 2u;
            return result;
          }
          switch(a5)
          {
            case 3:
              if (len == -1)
                v19 = xmlStrdup(str2);
              else
                v19 = xmlStrndup(str2, len);
              goto LABEL_32;
            case 2:
              result = 0;
              *(_QWORD *)(v6 + 40) = str2;
              *(_DWORD *)(v6 + 64) = v7 | 2;
              return result;
            case 1:
              result = 0;
              *(_QWORD *)(v6 + 40) = str2;
              return result;
          }
        }
      }
    }
    return 0;
  }
  if (a2 != 3)
  {
LABEL_42:
    xmlSchemaCustomErr4((_DWORD *)a1, 1843, 0, 0, (const xmlChar *)"Character content other than whitespace is not allowed because the content type is 'element-only'", 0, 0, 0, 0);
    return *(unsigned int *)(a1 + 104);
  }
  if (!str2)
    return 0;
  if (len < 0)
  {
    while (1)
    {
      v22 = *v8;
      if (v22 > 0x20)
        goto LABEL_42;
      if (((1 << v22) & 0x100002600) == 0)
      {
        if (*v8)
          goto LABEL_42;
        return 0;
      }
      ++v8;
    }
  }
  result = 0;
  if (len)
  {
    v11 = *str2;
    if (*str2)
    {
      v12 = len - 1;
      v13 = str2 + 1;
      while (v11 <= 0x20 && ((1 << v11) & 0x100002600) != 0)
      {
        result = 0;
        v14 = *v13++;
        v11 = v14;
        v16 = v12-- != 0;
        if (!v11 || !v16)
          return result;
      }
      goto LABEL_42;
    }
  }
  return result;
}

uint64_t xmlSchemaValidatorPopElem(_DWORD *data)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  int v17;
  uint64_t *v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t i;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  xmlHashTable *v48;
  uint64_t v49;
  uint64_t j;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  xmlHashTable *v56;
  uint64_t v57;
  _DWORD *v58;
  xmlChar *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  xmlChar *v64;
  void **v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  xmlChar *v76;
  xmlChar *v77;
  xmlChar *v78;
  xmlChar *ComponentQName;
  int v80;
  BOOL v81;
  int v82;
  uint64_t *v83;
  int v84;
  uint64_t v85;
  int v86;
  uint64_t *v87;
  uint64_t v88;
  int v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  _QWORD *v94;
  _QWORD *v95;
  int v96;
  void *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  int v117;
  uint64_t v118;
  void *v119;
  int v120;
  int v121;
  _QWORD *v122;
  void *v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  void **v127;
  int v128;
  uint64_t *v129;
  uint64_t result;
  int v131;
  xmlRegExecCtxt *v132;
  int v133;
  int v134;
  xmlSchemaVal *v135;
  uint64_t v136;
  xmlChar *v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  const char *v142;
  int v143;
  xmlChar *v144;
  xmlChar *v145;
  xmlNode *v146;
  uint64_t v147;
  const xmlChar *v148;
  int v149;
  const xmlChar *v150;
  xmlChar *v151;
  const char *v152;
  _DWORD *v153;
  int v154;
  const char *v155;
  int v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  int v165;
  uint64_t v166;
  void *v167;
  unsigned int v168;
  uint64_t v169;
  _BOOL4 v170;
  int v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  uint64_t v175;
  _DWORD *v176;
  int nbneg;
  int nbval[2];
  int terminal[2];
  xmlChar *name[2];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;

  v185 = *MEMORY[0x1E0C80C00];
  v2 = *((_QWORD *)data + 24);
  if (data[74])
    xmlSchemaClearAttrInfos((uint64_t)data);
  v3 = *(_DWORD *)(v2 + 64);
  v176 = data;
  v4 = 0;
  if ((v3 & 0x200) != 0)
  {
    data[76] = data[43] - 1;
    goto LABEL_10;
  }
  if ((v3 & 0x400) != 0)
    goto LABEL_10;
  v5 = *(_QWORD *)(v2 + 56);
  if (!v5)
    goto LABEL_10;
  v6 = *(_DWORD *)(v5 + 92);
  if ((v6 & 0xFFFFFFFE) != 2)
    goto LABEL_270;
  if (*(_DWORD *)(v5 + 160) == 45)
  {
    v4 = 0;
    goto LABEL_272;
  }
  if ((v3 & 0x100) != 0)
  {
LABEL_270:
    v4 = 0;
    goto LABEL_271;
  }
  v183 = 0u;
  v184 = 0u;
  v181 = 0u;
  v182 = 0u;
  *(_OWORD *)name = 0u;
  terminal[0] = 0;
  nbneg = 0;
  nbval[0] = 10;
  v132 = *(xmlRegExecCtxt **)(v2 + 112);
  if (!v132)
  {
    v132 = xmlRegNewExecCtxt(*(xmlRegexpPtr *)(v5 + 200), (xmlRegExecCallbacks)xmlSchemaVContentModelCallback, data);
    *(_QWORD *)(v2 + 112) = v132;
    if (!v132)
    {
      v142 = "failed to create a regex context";
      goto LABEL_303;
    }
    v3 = *(_DWORD *)(v2 + 64);
  }
  if ((v3 & 4) != 0)
    goto LABEL_269;
  xmlRegExecNextValues(v132, nbval, &nbneg, name, terminal);
  v133 = xmlRegExecPushString(*(xmlRegExecCtxtPtr *)(v2 + 112), 0, 0);
  if (v133 < 0)
  {
    v134 = *(_DWORD *)(v2 + 64);
LABEL_321:
    *(_DWORD *)(v2 + 64) = v134 | 0x100;
    xmlSchemaComplexTypeErr(data, (const xmlChar *)"Missing child element(s)", nbval[0], nbneg, (uint64_t)name);
    v4 = 1;
    goto LABEL_322;
  }
  if (!v133)
  {
    v134 = *(_DWORD *)(v2 + 64);
    if ((v134 & 4) == 0)
      goto LABEL_321;
  }
LABEL_269:
  v4 = 0;
LABEL_322:
  v6 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + 92);
LABEL_271:
  if (v6 == 2)
    goto LABEL_10;
LABEL_272:
  v135 = (xmlSchemaVal *)*((_QWORD *)data + 17);
  if (v135)
  {
    xmlSchemaFreeValue(v135);
    *((_QWORD *)data + 17) = 0;
  }
  v136 = *(_QWORD *)(v2 + 80);
  if (!v136)
  {
    v140 = *(_QWORD *)(v2 + 56);
    if (*(_DWORD *)v140 != 4 && (*(_DWORD *)v140 != 1 || *(_DWORD *)(v140 + 160) == 45))
    {
      if ((*(_DWORD *)(v140 + 92) | 2) != 6)
        goto LABEL_10;
      v140 = *(_QWORD *)(v140 + 192);
    }
    v4 = xmlSchemaVCheckINodeDataType((uint64_t)data, v2, v140, *(xmlChar **)(v2 + 40));
    goto LABEL_301;
  }
  v137 = *(xmlChar **)(v136 + 144);
  v138 = *(_DWORD *)(v2 + 64);
  if (!v137 || (*(_DWORD *)(v2 + 64) & 0x24) != 0x20)
  {
    if ((v138 & 4) != 0)
      goto LABEL_10;
    v141 = *(_QWORD *)(v2 + 56);
    if (*(_DWORD *)v141 != 4 && (*(_DWORD *)v141 != 1 || *(_DWORD *)(v141 + 160) == 45))
    {
      if ((*(_DWORD *)(v141 + 92) | 2) != 6)
        goto LABEL_300;
      v141 = *(_QWORD *)(v141 + 192);
    }
    v4 = xmlSchemaVCheckINodeDataType((uint64_t)data, v2, v141, *(xmlChar **)(v2 + 40));
LABEL_300:
    if (!v4)
    {
      v147 = *(_QWORD *)(v2 + 80);
      v148 = *(const xmlChar **)(v147 + 144);
      if (!v148 || (*(_BYTE *)(v147 + 88) & 8) == 0)
        goto LABEL_327;
      if ((*(_BYTE *)(v2 + 64) & 0x80) != 0)
      {
        v4 = 1856;
        xmlSchemaCustomErr4(data, 1856, 0, 0, (const xmlChar *)"The content must not contain element nodes since there is a fixed value constraint", 0, 0, 0, 0);
        goto LABEL_10;
      }
      v149 = *(_DWORD *)(*(_QWORD *)(v2 + 56) + 92);
      if (v149 == 6 || v149 == 4)
      {
        if (xmlStrEqual(*(const xmlChar **)(v2 + 40), v148))
          goto LABEL_327;
        v150 = *(const xmlChar **)(v2 + 40);
        v151 = *(xmlChar **)(*(_QWORD *)(v2 + 80) + 144);
        v152 = "The actual value '%s' does not match the fixed value constraint '%s'";
        v4 = 1858;
        v153 = data;
        v154 = 1858;
      }
      else
      {
        if (v149 != 3 || xmlStrEqual(*(const xmlChar **)(v2 + 40), v148))
          goto LABEL_327;
        v150 = *(const xmlChar **)(v2 + 40);
        v151 = *(xmlChar **)(*(_QWORD *)(v2 + 80) + 144);
        v152 = "The initial value '%s' does not match the fixed value constraint '%s'";
        v4 = 1857;
        v153 = data;
        v154 = 1857;
      }
      xmlSchemaCustomErr4(v153, v154, 0, 0, (const xmlChar *)v152, v150, v151, 0, 0);
      goto LABEL_10;
    }
LABEL_301:
    if (v4 < 0)
    {
      v142 = "calling xmlSchemaVCheckCVCSimpleType()";
      goto LABEL_303;
    }
    goto LABEL_10;
  }
  if ((v138 & 8) == 0)
  {
    v139 = *(_QWORD *)(v2 + 56);
    if (*(_DWORD *)v139 != 4 && (*(_DWORD *)v139 != 1 || *(_DWORD *)(v139 + 160) == 45))
    {
      if ((*(_DWORD *)(v139 + 92) | 2) != 6)
        goto LABEL_284;
      v139 = *(_QWORD *)(v139 + 192);
    }
    v4 = xmlSchemaVCheckINodeDataType((uint64_t)data, v2, v139, v137);
LABEL_284:
    if (!v4)
    {
LABEL_308:
      if ((data[37] & 1) == 0 || !*(_QWORD *)(v2 + 8))
        goto LABEL_327;
      v144 = xmlSchemaNormalizeValue(*(_DWORD **)(v2 + 56), *(const xmlChar **)(*(_QWORD *)(v2 + 80) + 144));
      if (v144)
      {
        v145 = v144;
        v146 = xmlNewText(v144);
        xmlFree(v145);
      }
      else
      {
        v146 = xmlNewText(*(const xmlChar **)(*(_QWORD *)(v2 + 80) + 144));
      }
      if (v146)
      {
        xmlAddChild(*(xmlNodePtr *)(v2 + 8), v146);
LABEL_327:
        v4 = 0;
        goto LABEL_10;
      }
      v142 = "calling xmlNewText()";
LABEL_303:
      xmlSchemaInternalErr2(data, (const xmlChar *)"xmlSchemaValidatorPopElem", (const xmlChar *)v142, 0);
      goto LABEL_304;
    }
    goto LABEL_301;
  }
  v143 = xmlSchemaCheckCOSValidDefault((uint64_t)data, v137, (xmlSchemaValPtr *)(v2 + 48));
  if (!v143)
    goto LABEL_308;
  v4 = v143;
  if (v143 < 0)
  {
    v142 = "calling xmlSchemaCheckCOSValidDefault()";
    goto LABEL_303;
  }
LABEL_10:
  v7 = data[43];
  if (v7 < 0)
    return 0;
  v168 = v4;
  if (v7 == data[76])
    data[76] = -1;
  v175 = v2;
  if (*(_DWORD *)(v2 + 140) && xmlSchemaXPathProcessHistory((uint64_t)data, v7) == -1)
    goto LABEL_304;
  v8 = data;
  v9 = *(_QWORD *)(v2 + 104);
  if (v9 && (data[80] || data[81]))
  {
    while (1)
    {
      v10 = *(_QWORD *)(v9 + 24);
      v11 = *(_DWORD **)(v10 + 8);
      if (*v11 == 24)
        goto LABEL_90;
      v12 = *(_QWORD *)(v9 + 56);
      if (!v12)
        goto LABEL_90;
      if (!*(_DWORD *)(v12 + 8))
        goto LABEL_90;
      if (!v8[81])
      {
        v17 = *(_DWORD *)(v10 + 16);
        if (v17 == -1 || v17 > v8[43])
          goto LABEL_90;
      }
      v13 = *(_QWORD *)(*((_QWORD *)v8 + 22) + 8 * *(int *)(v9 + 4));
      v14 = *(_QWORD **)(v13 + 96);
      if (v14)
      {
        do
        {
          v15 = v14;
          if ((_DWORD *)v14[1] == v11)
            goto LABEL_31;
          v14 = (_QWORD *)*v14;
        }
        while (*v15);
        v16 = xmlSchemaIDCNewBinding((uint64_t)v11);
        *v15 = v16;
        v15 = v16;
      }
      else
      {
        v15 = xmlSchemaIDCNewBinding((uint64_t)v11);
        *(_QWORD *)(v13 + 96) = v15;
      }
      if (!v15)
        goto LABEL_304;
LABEL_31:
      v18 = (uint64_t *)v15[4];
      if (!v18)
        break;
      v19 = *((_DWORD *)v18 + 2);
      if (!v19)
        goto LABEL_35;
      v172 = *v18;
LABEL_36:
      if (v15[2])
        v20 = *((_DWORD *)v15 + 6);
      else
        v20 = 0;
      v8 = v176;
      v21 = *(_QWORD **)(v9 + 56);
      if (!(v20 | v19))
      {
        v15[2] = *v21;
        v15[3] = v21[1];
        *v21 = 0;
        v21[1] = 0;
        v48 = *(xmlHashTable **)(v9 + 64);
        if (v48)
        {
          xmlHashFree(v48, (xmlHashDeallocator)xmlFreeIDCHashEntry);
          *(_QWORD *)(v9 + 64) = 0;
        }
        goto LABEL_90;
      }
      v22 = 0;
      v23 = *((_DWORD *)v21 + 2);
      v24 = *v21;
      v25 = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 64);
      if (v19 <= 1)
        v26 = 1;
      else
        v26 = v19;
      v169 = v26;
      v160 = v20;
      if (v20 <= 1)
        v27 = 1;
      else
        v27 = v20;
      v162 = v27;
      if (v23 <= 1)
        v28 = 1;
      else
        v28 = v23;
      v164 = v28;
      v166 = v24;
      do
      {
        v29 = *(_QWORD *)(*(_QWORD *)(v24 + 8 * v22) + 8);
        if (v19)
        {
          for (i = 0; i != v169; ++i)
          {
            if ((_DWORD)v25 == 1)
            {
              v31 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)v29 + 8), *(xmlSchemaVal **)(**(_QWORD **)(*(_QWORD *)(v172 + 8 * i) + 8) + 8));
              if (v31 == -1)
                goto LABEL_304;
              if (v31 == 1)
                goto LABEL_84;
            }
            else if ((int)v25 >= 1)
            {
              v32 = *(_QWORD *)(*(_QWORD *)(v172 + 8 * i) + 8);
              v33 = v29;
              v34 = v25;
              while (1)
              {
                v35 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)v33 + 8), *(xmlSchemaVal **)(*(_QWORD *)v32 + 8));
                if (v35 == -1)
                  goto LABEL_304;
                if (!v35)
                  break;
                v32 += 8;
                v33 += 8;
                if (!--v34)
                  goto LABEL_84;
              }
            }
          }
        }
        if (!v160)
        {
LABEL_78:
          v44 = *(_QWORD *)(v166 + 8 * v22);
          v45 = (void *)v15[2];
          if (v45)
          {
            v46 = *((int *)v15 + 7);
            if ((int)v46 <= *((_DWORD *)v15 + 6))
            {
              *((_DWORD *)v15 + 7) = 2 * v46;
              v45 = xmlRealloc(v45, 16 * v46);
              v15[2] = v45;
              if (!v45)
              {
                v155 = "re-allocating an array of IDC node-table items";
LABEL_336:
                __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)v155);
                goto LABEL_304;
              }
            }
          }
          else
          {
            *((_DWORD *)v15 + 7) = 10;
            v45 = xmlMalloc(0x50uLL);
            v15[2] = v45;
            if (!v45)
            {
              v155 = "allocating an array of IDC node-table items";
              goto LABEL_336;
            }
          }
          v47 = *((int *)v15 + 6);
          *((_DWORD *)v15 + 6) = v47 + 1;
          *((_QWORD *)v45 + v47) = v44;
          goto LABEL_84;
        }
        v36 = 0;
        while ((_DWORD)v25 != 1)
        {
          if ((int)v25 < 1)
            goto LABEL_74;
          v38 = *(_QWORD *)(*(_QWORD *)(v15[2] + 8 * v36) + 8);
          v39 = v29;
          v40 = v25;
          while (1)
          {
            v41 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)v39 + 8), *(xmlSchemaVal **)(*(_QWORD *)v38 + 8));
            if (v41 == -1)
              goto LABEL_304;
            if (!v41)
              break;
            v38 += 8;
            v39 += 8;
            if (!--v40)
              goto LABEL_74;
          }
LABEL_67:
          if (++v36 == v162)
            goto LABEL_78;
        }
        v37 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)v29 + 8), *(xmlSchemaVal **)(**(_QWORD **)(*(_QWORD *)(v15[2] + 8 * v36) + 8) + 8));
        if (!v37)
          goto LABEL_67;
        if (v37 == -1)
          goto LABEL_304;
LABEL_74:
        v42 = (_QWORD *)v15[4];
        if (!v42)
        {
          v42 = xmlSchemaItemListCreate();
          v15[4] = v42;
          if (!v42)
            goto LABEL_304;
        }
        if (xmlSchemaItemListAdd((uint64_t)v42, *(_QWORD *)(v15[2] + 8 * v36)) == -1)
          goto LABEL_304;
        v43 = *((int *)v15 + 6) - 1;
        *(_QWORD *)(v15[2] + 8 * v36) = *(_QWORD *)(v15[2] + 8 * v43);
        *((_DWORD *)v15 + 6) = v43;
LABEL_84:
        ++v22;
        v24 = v166;
        v8 = v176;
      }
      while (v22 != v164);
LABEL_90:
      v9 = *(_QWORD *)(v9 + 8);
      if (!v9)
        goto LABEL_91;
    }
    v19 = 0;
LABEL_35:
    v172 = 0;
    goto LABEL_36;
  }
LABEL_91:
  v49 = *((_QWORD *)v8 + 24);
  if (*(_DWORD *)(v49 + 136))
  {
    for (j = *(_QWORD *)(v49 + 104); j; j = *(_QWORD *)(j + 8))
    {
      if (*(_DWORD *)(j + 32) == 24)
      {
        v51 = *(_QWORD *)(j + 56);
        if (v51)
        {
          if (*(_DWORD *)(v51 + 8))
          {
            v52 = *(_QWORD *)(*(_QWORD *)(j + 24) + 8);
            v53 = *(unsigned int *)(v52 + 64);
            v54 = *((_QWORD *)v8 + 24) + 96;
            do
            {
              v54 = *(_QWORD *)v54;
              if (!v54)
              {
                v170 = 0;
                v56 = 0;
                goto LABEL_112;
              }
            }
            while (*(_QWORD *)(*(_QWORD *)(v52 + 72) + 8) != *(_QWORD *)(v54 + 8));
            v55 = *(_QWORD *)(v54 + 32);
            if (v55)
              v170 = *(_DWORD *)(v55 + 8) != 0;
            else
              v170 = 0;
            v56 = xmlHashCreate(2 * *(_DWORD *)(v54 + 24));
            if (*(int *)(v54 + 24) >= 1)
            {
              v57 = 0;
              while (1)
              {
                name[0] = 0;
                xmlSchemaFormatIDCKeySequence_1(v8, name, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * v57) + 8), v53, 1);
                v58 = xmlMalloc(0x10uLL);
                v58[2] = v57;
                v59 = name[0];
                v60 = xmlHashLookup(v56, name[0]);
                if (!v60)
                  break;
                *(_QWORD *)v58 = *v60;
                *v60 = v58;
                if (v59)
                  goto LABEL_107;
LABEL_108:
                if (++v57 >= *(int *)(v54 + 24))
                  goto LABEL_112;
              }
              *(_QWORD *)v58 = 0;
              xmlHashAddEntry(v56, v59, v58);
              if (!v59)
                goto LABEL_108;
LABEL_107:
              xmlFree(v59);
              goto LABEL_108;
            }
LABEL_112:
            v61 = *(_QWORD *)(j + 56);
            if (*(int *)(v61 + 8) >= 1)
            {
              v62 = 0;
              do
              {
                v63 = *(_QWORD *)(*(_QWORD *)v61 + 8 * v62);
                if (!v54)
                  goto LABEL_136;
                name[0] = 0;
                v173 = *(_QWORD *)(v63 + 8);
                xmlSchemaFormatIDCKeySequence_1(v8, name, v173, v53, 1);
                v64 = name[0];
                v65 = (void **)xmlHashLookup(v56, name[0]);
                if (v64)
                {
                  xmlFree(v64);
                  name[0] = 0;
                }
                for (; v65; v65 = (void **)*v65)
                {
                  if ((int)v53 >= 1)
                  {
                    v66 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v54 + 16) + 8 * *((int *)v65 + 2)) + 8);
                    v67 = v173;
                    v68 = v53;
                    while (1)
                    {
                      v69 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)v66 + 8), *(xmlSchemaVal **)(*(_QWORD *)v67 + 8));
                      if (v69 == -1)
                        goto LABEL_304;
                      if (!v69)
                        break;
                      v67 += 8;
                      v66 += 8;
                      if (!--v68)
                        goto LABEL_144;
                    }
                  }
                }
                v8 = v176;
                if (v170 && (v70 = *(_QWORD *)(v54 + 32), *(int *)(v70 + 8) >= 1))
                {
                  v71 = 0;
                  while ((int)v53 < 1)
                  {
LABEL_135:
                    if (++v71 >= *(int *)(v70 + 8))
                      goto LABEL_136;
                  }
                  v72 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v70 + 8 * v71) + 8);
                  v73 = v173;
                  v74 = v53;
                  do
                  {
                    v75 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)v72 + 8), *(xmlSchemaVal **)(*(_QWORD *)v73 + 8));
                    if (v75 == -1)
                      goto LABEL_304;
                    if (!v75)
                    {
                      v70 = *(_QWORD *)(v54 + 32);
                      v8 = v176;
                      goto LABEL_135;
                    }
                    v73 += 8;
                    v72 += 8;
                    --v74;
                  }
                  while (v74);
                  *(_QWORD *)nbval = 0;
                  *(_QWORD *)terminal = 0;
                  v78 = xmlSchemaFormatIDCKeySequence_1(v176, (xmlChar **)terminal, *(_QWORD *)(v63 + 8), v53, 0);
                  ComponentQName = xmlSchemaGetComponentQName((void **)nbval, *(int **)(*(_QWORD *)(j + 24) + 8));
                  xmlSchemaKeyrefErr((uint64_t)v176, v63, (const xmlChar *)"More than one match found for key-sequence %s of keyref '%s'", v78, ComponentQName);
                  if (*(_QWORD *)terminal)
                    xmlFree(*(void **)terminal);
                  if (*(_QWORD *)nbval)
                    xmlFree(*(void **)nbval);
LABEL_144:
                  v8 = v176;
                }
                else
                {
LABEL_136:
                  *(_QWORD *)terminal = 0;
                  name[0] = 0;
                  v76 = xmlSchemaFormatIDCKeySequence_1(v8, name, *(_QWORD *)(v63 + 8), v53, 0);
                  v77 = xmlSchemaGetComponentQName((void **)terminal, *(int **)(*(_QWORD *)(j + 24) + 8));
                  xmlSchemaKeyrefErr((uint64_t)v8, v63, (const xmlChar *)"No match found for key-sequence %s of keyref '%s'", v76, v77);
                  if (name[0])
                    xmlFree(name[0]);
                  if (*(_QWORD *)terminal)
                    xmlFree(*(void **)terminal);
                }
                ++v62;
                v61 = *(_QWORD *)(j + 56);
              }
              while (v62 < *(int *)(v61 + 8));
            }
            if (v56)
              xmlHashFree(v56, (xmlHashDeallocator)xmlFreeIDCHashEntry);
          }
        }
      }
    }
  }
  if (!*(_QWORD *)(v175 + 96)
    || (v80 = v8[43], v81 = __OFSUB__(v80, 1), v82 = v80 - 1, (v82 < 0) ^ v81)
    || !v8[80] && !v8[81]
    || (v83 = *(uint64_t **)(*((_QWORD *)v8 + 24) + 96)) == 0)
  {
LABEL_254:
    xmlSchemaClearElemInfo((uint64_t)v8, v175);
    v128 = v8[43];
    if (v128)
    {
      v129 = (uint64_t *)*((_QWORD *)v8 + 25);
      for (result = v168; v129; v129 = (uint64_t *)*v129)
      {
        if (*((_DWORD *)v129 + 4) == v128)
          *((_DWORD *)v129 + 4) = -1;
      }
      v131 = v128 - 1;
      v8[43] = v131;
      *((_QWORD *)v8 + 24) = *(_QWORD *)(*((_QWORD *)v8 + 22) + 8 * v131);
    }
    else
    {
      result = 0;
      v8[43] = -1;
      *((_QWORD *)v8 + 24) = 0;
    }
    return result;
  }
  v84 = 0;
  v85 = 0;
  v174 = (_QWORD *)(*(_QWORD *)(*((_QWORD *)v8 + 22) + 8 * v82) + 96);
  while (1)
  {
    v86 = *((_DWORD *)v83 + 6);
    if (!v86)
    {
      v88 = v83[4];
      if (!v88 || !*(_DWORD *)(v88 + 8))
        goto LABEL_253;
    }
    if (!v8[81])
    {
      v87 = (uint64_t *)*((_QWORD *)v8 + 25);
      while (v87[1] != v83[1])
      {
        v87 = (uint64_t *)*v87;
        if (!v87)
          goto LABEL_166;
      }
      v89 = *((_DWORD *)v87 + 4);
      if (v89 == -1 || v89 >= v8[43])
        goto LABEL_253;
    }
LABEL_166:
    v90 = v174;
    do
    {
      v90 = (_QWORD *)*v90;
      if (!v90)
      {
        v94 = xmlSchemaIDCNewBinding(v83[1]);
        if (!v94)
          goto LABEL_304;
        v95 = v94;
        v96 = *((_DWORD *)v83 + 6);
        if (v96)
        {
          if (v176[82])
          {
            v97 = xmlMalloc(8 * v96);
            v95[2] = v97;
            if (!v97)
            {
              __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)"allocating an array of IDC node-table items");
              xmlSchemaIDCFreeBinding(v95);
              goto LABEL_304;
            }
            v98 = *((_DWORD *)v83 + 6);
            *((_DWORD *)v95 + 6) = v98;
            *((_DWORD *)v95 + 7) = v98;
            memcpy(v97, (const void *)v83[2], 8 * *((int *)v83 + 6));
          }
          else
          {
            v94[2] = v83[2];
            v83[2] = 0;
            v125 = *((_DWORD *)v83 + 7);
            *((_DWORD *)v94 + 6) = v96;
            *((_DWORD *)v94 + 7) = v125;
            v83[3] = 0;
          }
        }
        v126 = v83[4];
        if (v126)
        {
          v127 = (void **)v95[4];
          if (v127)
          {
            if (*v127)
              xmlFree(*v127);
            xmlFree(v127);
            v126 = v83[4];
          }
          v95[4] = v126;
          v83[4] = 0;
        }
        if (*v174)
          *v95 = *v174;
        *v174 = v95;
        goto LABEL_253;
      }
      v91 = v90[1];
    }
    while (v91 != v83[1]);
    v92 = v90[4];
    if (v92)
    {
      v93 = *(_DWORD *)(v92 + 8);
      v163 = v93 ? *(_QWORD *)v92 : 0;
    }
    else
    {
      v163 = 0;
      v93 = 0;
    }
    if (v86 >= 1)
      break;
LABEL_253:
    v83 = (uint64_t *)*v83;
    v8 = v176;
    if (!v83)
      goto LABEL_254;
  }
  v99 = 0;
  v165 = *((_DWORD *)v90 + 6);
  v100 = *(unsigned int *)(v91 + 64);
  v167 = (void *)v90[2];
  v101 = v93;
  v158 = v93;
  v159 = v93;
  if (v93 <= 1)
    v102 = 1;
  else
    v102 = v93;
  v156 = v102;
  v171 = v100;
  v103 = 8 * v100;
  v161 = v93;
  while (1)
  {
    v104 = *(_QWORD *)(v83[2] + 8 * v99);
    if (!v104)
      goto LABEL_241;
    if (v93)
    {
      if (v93 < 1)
      {
        LODWORD(v105) = 0;
      }
      else
      {
        if (v171 == 1)
        {
          v105 = 0;
          while (1)
          {
            v106 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(**(_QWORD **)(v104 + 8) + 8), *(xmlSchemaVal **)(**(_QWORD **)(*(_QWORD *)(v163 + 8 * v105) + 8) + 8));
            if (v106)
              break;
            if (++v105 >= v101)
            {
              v84 = 0;
              LODWORD(v105) = v156;
              goto LABEL_209;
            }
          }
          if (v106 == -1)
            goto LABEL_304;
          v84 = 1;
LABEL_207:
          v93 = v161;
        }
        else
        {
          v105 = 0;
          v108 = 1;
          do
          {
            v109 = v108;
            v85 = *(_QWORD *)(v163 + 8 * v105);
            if (v171 < 1)
            {
              if (v84 == 1)
                goto LABEL_207;
            }
            else
            {
              v110 = 0;
              while (1)
              {
                v111 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)(*(_QWORD *)(v104 + 8) + v110) + 8), *(xmlSchemaVal **)(*(_QWORD *)(*(_QWORD *)(v85 + 8) + v110) + 8));
                if (v111 == -1)
                  goto LABEL_304;
                v84 = v111;
                if (!v111)
                  break;
                v110 += 8;
                if (v103 == v110)
                {
                  v84 = 1;
                  goto LABEL_207;
                }
              }
            }
            v108 = v109 + 1;
            v105 = v109;
          }
          while (v109 != v158);
          v93 = v161;
          LODWORD(v105) = v161;
        }
        v101 = v159;
      }
LABEL_209:
      v107 = v165;
      if ((_DWORD)v105 != v93 || !v165)
        goto LABEL_241;
    }
    else
    {
      v107 = v165;
      if (!v165)
      {
        v165 = 0;
        goto LABEL_241;
      }
    }
    v112 = v107 - 1;
    if (v107 >= 1)
      break;
    LODWORD(v113) = 0;
LABEL_228:
    if ((_DWORD)v113 == v107)
    {
LABEL_229:
      v167 = (void *)v90[2];
      if (v167)
      {
        v118 = *((int *)v90 + 7);
        v101 = v159;
        v93 = v161;
        if (*((_DWORD *)v90 + 6) >= (int)v118)
        {
          *((_DWORD *)v90 + 7) = 2 * v118;
          v119 = xmlRealloc(v167, 16 * v118);
          v90[2] = v119;
          v167 = v119;
          if (!v119)
          {
            v155 = "re-allocating IDC list of node-table items";
            goto LABEL_336;
          }
        }
      }
      else
      {
        v123 = xmlMalloc(0x50uLL);
        v90[2] = v123;
        v101 = v159;
        v93 = v161;
        v167 = v123;
        if (!v123)
        {
          v155 = "allocating IDC list of node-table items";
          goto LABEL_336;
        }
        *((_DWORD *)v90 + 7) = 1;
      }
      v124 = *((int *)v90 + 6);
      *((_DWORD *)v90 + 6) = v124 + 1;
      *((_QWORD *)v167 + v124) = v104;
    }
    else
    {
      v120 = *((_DWORD *)v90 + 6);
      *((_DWORD *)v90 + 6) = v120 - 1;
      *((_QWORD *)v167 + (int)v113) = *((_QWORD *)v167 + v112);
      if (v120 != v107)
        *((_QWORD *)v167 + v112) = *((_QWORD *)v167 + v120 - 1);
      v121 = v112;
      v122 = (_QWORD *)v90[4];
      if (!v122)
      {
        v122 = xmlSchemaItemListCreate();
        v90[4] = v122;
        if (!v122)
          goto LABEL_304;
      }
      xmlSchemaItemListAdd((uint64_t)v122, v85);
      v165 = v121;
      v101 = v159;
      v93 = v161;
    }
LABEL_241:
    if (++v99 >= *((int *)v83 + 6))
      goto LABEL_253;
  }
  v157 = v107 - 1;
  v113 = 0;
  v114 = v107;
  while (1)
  {
    v85 = *((_QWORD *)v167 + v113);
    if (v171 != 1)
      break;
    v115 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(**(_QWORD **)(v104 + 8) + 8), *(xmlSchemaVal **)(**(_QWORD **)(v85 + 8) + 8));
    v84 = v115;
    if (v115)
    {
      if (v115 == -1)
        goto LABEL_304;
LABEL_227:
      v84 = 1;
      v107 = v165;
      v112 = v157;
      goto LABEL_228;
    }
LABEL_223:
    if (++v113 == v114)
      goto LABEL_229;
  }
  if (v171 < 1)
  {
    if (v84 == 1)
      goto LABEL_227;
    goto LABEL_223;
  }
  v116 = 0;
  while (1)
  {
    v117 = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)(*(_QWORD *)(v104 + 8) + v116) + 8), *(xmlSchemaVal **)(*(_QWORD *)(*(_QWORD *)(v85 + 8) + v116) + 8));
    if (v117 == -1)
      break;
    v84 = v117;
    if (!v117)
      goto LABEL_223;
    v116 += 8;
    if (v103 == v116)
      goto LABEL_227;
  }
LABEL_304:
  result = 0xFFFFFFFFLL;
  v176[26] = -1;
  return result;
}

_OWORD *xmlSchemaGetFreshAttrInfo(uint64_t a1)
{
  void *v2;
  int v3;
  uint64_t v4;
  _OWORD *result;
  void *v6;
  int v7;
  const char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = *(void **)(a1 + 288);
  if (!v2)
  {
    v6 = xmlMalloc(8uLL);
    *(_QWORD *)(a1 + 288) = v6;
    *(_DWORD *)(a1 + 300) = 1;
    if (v6)
    {
LABEL_8:
      result = xmlMalloc(0x70uLL);
      if (result)
      {
        result[5] = 0u;
        result[6] = 0u;
        result[3] = 0u;
        result[4] = 0u;
        result[1] = 0u;
        result[2] = 0u;
        *result = 0u;
        *(_DWORD *)result = 2;
        v10 = *(_QWORD *)(a1 + 288);
        v11 = *(int *)(a1 + 296);
        *(_DWORD *)(a1 + 296) = v11 + 1;
        *(_QWORD *)(v10 + 8 * v11) = result;
        return result;
      }
      v12 = *(_DWORD *)(a1 + 108) + 1;
      *(_DWORD *)(a1 + 104) = 1818;
      *(_DWORD *)(a1 + 108) = v12;
      v8 = "creating new attribute info";
      goto LABEL_13;
    }
    v7 = *(_DWORD *)(a1 + 108) + 1;
    *(_DWORD *)(a1 + 104) = 1818;
    *(_DWORD *)(a1 + 108) = v7;
    v8 = "allocating attribute info list";
LABEL_13:
    __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)v8);
    return 0;
  }
  v3 = *(_DWORD *)(a1 + 300);
  v4 = *(int *)(a1 + 296);
  if (v3 <= (int)v4)
  {
    *(_DWORD *)(a1 + 300) = v3 + 1;
    v9 = xmlRealloc(v2, 8 * (v3 + 1));
    *(_QWORD *)(a1 + 288) = v9;
    if (v9)
      goto LABEL_8;
    v13 = *(_DWORD *)(a1 + 108) + 1;
    *(_DWORD *)(a1 + 104) = 1818;
    *(_DWORD *)(a1 + 108) = v13;
    v8 = "re-allocating attribute info list";
    goto LABEL_13;
  }
  *(_DWORD *)(a1 + 296) = v4 + 1;
  result = (_OWORD *)*((_QWORD *)v2 + v4);
  if (!*((_QWORD *)result + 3))
  {
    *(_DWORD *)result = 2;
    return result;
  }
  xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaGetFreshAttrInfo", (const xmlChar *)"attr info not cleared", 0);
  return 0;
}

void xmlSchemaAugmentImportedIDC(uint64_t a1, void *data)
{
  xmlHashTable *v2;

  v2 = *(xmlHashTable **)(*(_QWORD *)(a1 + 80) + 144);
  if (v2)
    xmlHashScan(v2, (xmlHashScanner)xmlSchemaAugmentIDC, data);
}

uint64_t xmlSchemaXPathEvaluate(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  xmlReallocFunc *v8;
  uint64_t v9;
  xmlStreamCtxt *v10;
  uint64_t v11;
  const xmlChar *v12;
  const xmlChar *v13;
  int v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  xmlReallocFunc *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  const char *v22;

  v2 = *(_QWORD *)(a1 + 208);
  if (!v2)
    return 0;
  v5 = 0;
  v6 = 0;
  if (a2 == 2)
    v7 = *(_DWORD *)(a1 + 172) + 1;
  else
    v7 = *(_DWORD *)(a1 + 172);
  v8 = &xmlRealloc;
  v9 = *(_QWORD *)(a1 + 208);
  while (1)
  {
    v10 = *(xmlStreamCtxt **)(v9 + 56);
    v11 = *(_QWORD *)(a1 + 192);
    v12 = *(const xmlChar **)(v11 + 24);
    v13 = *(const xmlChar **)(v11 + 32);
    if (a2 != 1)
      break;
    v14 = xmlStreamPush(v10, v12, v13);
    if (v14)
      goto LABEL_10;
LABEL_28:
    v9 = *(_QWORD *)(v9 + 8);
    if (!v9)
    {
      v9 = *(_QWORD *)(a1 + 208);
      v6 = v2;
    }
    if (v9 == v6)
      return v5;
  }
  v14 = xmlStreamPushAttr(v10, v12, v13);
  if (!v14)
    goto LABEL_28;
LABEL_10:
  if (v14 == -1)
  {
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaXPathEvaluate", (const xmlChar *)"calling xmlStreamPush()", 0);
    return 0xFFFFFFFFLL;
  }
  v15 = *(_DWORD **)(v9 + 24);
  if (v15)
  {
    v16 = *(_DWORD *)(v9 + 36);
    if (v16 <= *(_DWORD *)(v9 + 32))
    {
      *(_DWORD *)(v9 + 36) = 2 * v16;
      v15 = (_DWORD *)((uint64_t (*)(void))*v8)();
      *(_QWORD *)(v9 + 24) = v15;
      if (!v15)
      {
        v22 = "re-allocating the state object history";
        goto LABEL_35;
      }
    }
    goto LABEL_17;
  }
  v15 = xmlMalloc(0x14uLL);
  *(_QWORD *)(v9 + 24) = v15;
  if (v15)
  {
    *(_DWORD *)(v9 + 36) = 5;
LABEL_17:
    v17 = *(int *)(v9 + 32);
    *(_DWORD *)(v9 + 32) = v17 + 1;
    v15[v17] = v7;
    if (*(_DWORD *)v9 == 2)
    {
      if (!(_DWORD)v5)
      {
        v20 = *(_QWORD *)(a1 + 192);
        v21 = *(_DWORD *)(v20 + 64);
        if ((v21 & 0x10) == 0)
          *(_DWORD *)(v20 + 64) = v21 | 0x10;
      }
      v5 = (v5 + 1);
    }
    else if (*(_DWORD *)v9 == 1)
    {
      v18 = v8;
      v19 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 40) + 24) + 8) + 56);
      while (1)
      {
        v19 = (_QWORD *)*v19;
        if (!v19)
          break;
        if (xmlSchemaIDCAddStateObject(a1, *(_QWORD *)(v9 + 40), (uint64_t)v19, 2) == -1)
          return 0xFFFFFFFFLL;
      }
      v8 = v18;
    }
    goto LABEL_28;
  }
  v22 = "allocating the state object history";
LABEL_35:
  __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)v22);
  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaVAttributesComplex(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const xmlChar *v12;
  const xmlChar *v13;
  int v14;
  _OWORD *v15;
  _OWORD *FreshAttrInfo;
  BOOL v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *AttributeDecl;
  uint64_t v23;
  xmlGenericErrorFunc v24;
  void *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  xmlGenericErrorFunc v29;
  void *v30;
  uint64_t v31;
  xmlNode *v32;
  xmlNode *v33;
  uint64_t result;
  uint64_t v35;
  xmlFreeFunc *v36;
  uint64_t v37;
  int v38;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  xmlSchemaVal **v44;
  xmlSchemaVal *v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  xmlSchemaVal *v50;
  xmlSchemaValPtr v51;
  const xmlChar *v52;
  xmlChar *v53;
  xmlChar *v54;
  const xmlChar *v55;
  xmlNs *v56;
  xmlFreeFunc *v57;
  int v58;
  xmlNsPtr v59;
  xmlSchemaVal *v60;
  uint64_t v61;
  uint64_t v62;
  xmlSchemaVal *v63;
  xmlGenericErrorFunc v64;
  void *v65;
  int v66;
  uint64_t v67;
  xmlGenericErrorFunc v68;
  void *v69;
  uint64_t j;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  int v77;
  xmlChar *v78;
  _DWORD *v79;
  int v80;
  const char *v81;
  const char *v82;
  uint64_t v83;
  char __str[8];
  int v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 56);
  v3 = *(uint64_t **)(v2 + 216);
  v4 = *(unsigned int *)(a1 + 296);
  v5 = *(_DWORD *)(a1 + 296);
  v83 = v2;
  if (v3)
  {
    v6 = *((unsigned int *)v3 + 2);
    if ((int)v6 >= 1)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = *(_QWORD *)(*v3 + 8 * i);
        v9 = *(_QWORD *)(v8 + 24);
        if ((int)v4 < 1)
        {
LABEL_11:
          v14 = *(_DWORD *)(v8 + 48);
          if (v14 == 2)
          {
            if (*(_QWORD *)(v8 + 56) || *(_QWORD *)(v9 + 88))
            {
              FreshAttrInfo = xmlSchemaGetFreshAttrInfo(a1);
              if (!FreshAttrInfo)
              {
LABEL_150:
                xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaVAttributesComplex", (const xmlChar *)"calling xmlSchemaGetFreshAttrInfo()", 0);
                return 0xFFFFFFFFLL;
              }
              *((_DWORD *)FreshAttrInfo + 22) = 8;
              *((_QWORD *)FreshAttrInfo + 9) = v9;
              *((_QWORD *)FreshAttrInfo + 10) = v8;
              *((_QWORD *)FreshAttrInfo + 7) = *(_QWORD *)(v9 + 96);
              *((_QWORD *)FreshAttrInfo + 3) = *(_QWORD *)(v9 + 16);
              *((_QWORD *)FreshAttrInfo + 4) = *(_QWORD *)(v9 + 112);
            }
          }
          else if (v14 == 1)
          {
            v15 = xmlSchemaGetFreshAttrInfo(a1);
            if (!v15)
              goto LABEL_150;
            *((_DWORD *)v15 + 22) = 4;
            *((_QWORD *)v15 + 9) = v9;
            *((_QWORD *)v15 + 10) = v8;
          }
        }
        else
        {
          v10 = 0;
          while (1)
          {
            v11 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + v10);
            if (!*(_DWORD *)(v11 + 92))
            {
              v12 = *(const xmlChar **)(v11 + 24);
              v13 = *(const xmlChar **)(v9 + 16);
              if (*v12 == *v13
                && xmlStrEqual(v12, v13)
                && xmlStrEqual(*(const xmlChar **)(v11 + 32), *(const xmlChar **)(v9 + 112)))
              {
                break;
              }
            }
            v10 += 8;
            if (8 * v4 == v10)
              goto LABEL_11;
          }
          *(_DWORD *)(v11 + 88) = 2;
          *(_QWORD *)(v11 + 72) = v9;
          *(_QWORD *)(v11 + 80) = v8;
          *(_QWORD *)(v11 + 56) = *(_QWORD *)(v9 + 96);
        }
      }
      v5 = *(_DWORD *)(a1 + 296);
      v2 = v83;
    }
  }
  if (!v5)
    return 0;
  if (*(_QWORD *)(v2 + 152))
    v17 = (int)v4 < 1;
  else
    v17 = 1;
  if (v17)
    goto LABEL_54;
  v18 = 0;
  v19 = 0;
  do
  {
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v18);
    if (*(_DWORD *)(v20 + 88) != 1)
      goto LABEL_43;
    v21 = v2;
    if (xmlSchemaCheckCVCWildcardNamespace(*(_QWORD *)(v2 + 152), *(xmlChar **)(v20 + 32)))
    {
      v2 = v21;
      goto LABEL_43;
    }
    if (*(_DWORD *)(*(_QWORD *)(v21 + 152) + 40) == 1)
    {
      v2 = v21;
      *(_DWORD *)(v20 + 88) = 13;
      goto LABEL_43;
    }
    AttributeDecl = xmlSchemaGetAttributeDecl(*(_QWORD *)(a1 + 40), *(const xmlChar **)(v20 + 24), *(xmlChar **)(v20 + 32));
    *(_QWORD *)(v20 + 72) = AttributeDecl;
    if (AttributeDecl)
    {
      *(_DWORD *)(v20 + 88) = 2;
      v23 = AttributeDecl[12];
      *(_QWORD *)(v20 + 56) = v23;
      if (!xmlSchemaIsDerivedFromBuiltInType(v23))
        goto LABEL_38;
      if (v19)
      {
        *(_DWORD *)(v20 + 88) = 15;
        v24 = *__xmlGenericError();
        v25 = *__xmlGenericErrorContext();
        v24(v25, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 25708);
LABEL_37:
        v19 = 1;
LABEL_38:
        v2 = v83;
        goto LABEL_43;
      }
      if (!v3)
        goto LABEL_37;
      v27 = *((unsigned int *)v3 + 2);
      v2 = v83;
      if ((int)v27 >= 1)
      {
        v28 = *v3;
        while (!xmlSchemaIsDerivedFromBuiltInType(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v28 + 24) + 96)))
        {
          v28 += 8;
          v19 = 1;
          --v27;
          v2 = v83;
          if (!v27)
            goto LABEL_43;
        }
        *(_DWORD *)(v20 + 88) = 16;
        v29 = *__xmlGenericError();
        v30 = *__xmlGenericErrorContext();
        v29(v30, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 25726);
        goto LABEL_37;
      }
      v19 = 1;
    }
    else
    {
      v2 = v83;
      if (*(_DWORD *)(*(_QWORD *)(v83 + 152) + 40) == 2)
        v26 = 14;
      else
        v26 = 10;
      *(_DWORD *)(v20 + 88) = v26;
    }
LABEL_43:
    ++v18;
  }
  while (v18 != v4);
  v5 = *(_DWORD *)(a1 + 296);
  if (!v5)
    return 0;
LABEL_54:
  if ((*(_BYTE *)(a1 + 148) & 1) != 0
    && (v31 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * *(int *)(a1 + 172))) != 0
    && (v32 = *(xmlNode **)(v31 + 8)) != 0)
  {
    if (v32->doc)
      v33 = v32;
    else
      v33 = 0;
  }
  else
  {
    v33 = 0;
  }
  if (v5 < 1)
    goto LABEL_149;
  v35 = 0;
  v36 = &xmlFree;
  while (2)
  {
    v37 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v35);
    v38 = *(_DWORD *)(v37 + 88);
    if (v38 == 8 || v38 == 2)
    {
      if (!*(_QWORD *)(v37 + 56))
      {
        *(_DWORD *)(v37 + 88) = 6;
        goto LABEL_127;
      }
      *(_QWORD *)(a1 + 192) = v37;
      if (*(_QWORD *)(a1 + 208))
      {
        v40 = xmlSchemaXPathEvaluate(a1, 2);
        if (v40 == -1)
          goto LABEL_151;
        v41 = v40;
        v38 = *(_DWORD *)(v37 + 88);
      }
      else
      {
        v41 = 0;
      }
      if (v38 == 8)
      {
        if (!v33 && !v41)
          goto LABEL_124;
        v42 = *(_QWORD *)(v37 + 80);
        v43 = *(_QWORD *)(v42 + 56);
        if (v43)
        {
          v44 = (xmlSchemaVal **)(v42 + 64);
        }
        else
        {
          v49 = *(_QWORD *)(v37 + 72);
          v43 = *(_QWORD *)(v49 + 88);
          v44 = (xmlSchemaVal **)(v49 + 136);
        }
        v50 = *v44;
        *(_QWORD *)(v37 + 40) = v43;
        *(_QWORD *)(v37 + 48) = v50;
        if (!v50)
        {
          v82 = "default/fixed value on an attribute use was not precomputed";
          goto LABEL_152;
        }
        v51 = xmlSchemaCopyValue(v50);
        *(_QWORD *)(v37 + 48) = v51;
        if (!v51)
        {
          v82 = "calling xmlSchemaCopyValue()";
LABEL_152:
          xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaVAttributesComplex", (const xmlChar *)v82, 0);
LABEL_153:
          *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * *(int *)(a1 + 172));
          return 0xFFFFFFFFLL;
        }
        if (v33)
        {
          v52 = *(const xmlChar **)(v37 + 40);
          v53 = xmlSchemaNormalizeValue(*(_DWORD **)(v37 + 56), v52);
          v54 = v53;
          if (v53)
            v52 = v53;
          v55 = *(const xmlChar **)(v37 + 32);
          if (v55)
          {
            v56 = xmlSearchNsByHref(v33->doc, v33, v55);
            if (!v56)
            {
              v57 = v36;
              v58 = 0;
              v85 = 0;
              *(_QWORD *)__str = 0;
              while (1)
              {
                snprintf(__str, 0xCuLL, "p%d", v58);
                v59 = xmlSearchNs(v33->doc, v33, (const xmlChar *)__str);
                if (v58 == 1000)
                  break;
                ++v58;
                if (!v59)
                {
                  v56 = xmlNewNs(*(xmlNodePtr *)(a1 + 152), *(const xmlChar **)(v37 + 32), (const xmlChar *)__str);
                  v36 = v57;
                  goto LABEL_103;
                }
              }
              xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaVAttributesComplex", (const xmlChar *)"could not compute a ns prefix for a default/fixed attribute", 0);
              if (v54)
                ((void (*)(xmlChar *))*v57)(v54);
              goto LABEL_153;
            }
LABEL_103:
            xmlNewNsProp(v33, v56, *(const xmlChar **)(v37 + 24), v52);
          }
          else if (!xmlNewProp(v33, *(const xmlChar **)(v37 + 24), v52))
          {
            xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaVAttributesComplex", (const xmlChar *)"calling xmlNewProp()", 0);
            if (v54)
              ((void (*)(xmlChar *))*v36)(v54);
            goto LABEL_153;
          }
          if (v54)
            ((void (*)(xmlChar *))*v36)(v54);
        }
LABEL_121:
        if (v41)
        {
          if (xmlSchemaXPathProcessHistory(a1, *(_DWORD *)(a1 + 172) + 1) == -1)
          {
LABEL_151:
            v82 = "calling xmlSchemaXPathEvaluate()";
            goto LABEL_152;
          }
          goto LABEL_127;
        }
LABEL_124:
        for (j = *(_QWORD *)(a1 + 208); j; j = *(_QWORD *)(j + 8))
        {
          if (xmlStreamPop(*(xmlStreamCtxtPtr *)(j + 56)) == -1)
            break;
        }
        goto LABEL_127;
      }
      v45 = *(xmlSchemaVal **)(a1 + 136);
      if (v45)
      {
        xmlSchemaFreeValue(v45);
        *(_QWORD *)(a1 + 136) = 0;
      }
      if ((*(_BYTE *)(*(_QWORD *)(v37 + 72) + 121) & 2) != 0
        || (v46 = *(_QWORD *)(v37 + 80)) != 0 && (*(_BYTE *)(v46 + 33) & 2) != 0)
      {
        v47 = 1;
      }
      else
      {
        if (!v41)
        {
          v48 = xmlSchemaVCheckCVCSimpleType(a1, *(xmlNode **)(v37 + 8), *(_QWORD *)(v37 + 56), *(xmlChar **)(v37 + 40), 0, 1u, 0, 0);
          v47 = 0;
          if (v48)
            goto LABEL_89;
          goto LABEL_105;
        }
        v47 = 0;
      }
      *(_DWORD *)(v37 + 64) |= 0x10u;
      v48 = xmlSchemaVCheckCVCSimpleType(a1, *(xmlNode **)(v37 + 8), *(_QWORD *)(v37 + 56), *(xmlChar **)(v37 + 40), (xmlSchemaValPtr *)(v37 + 48), 1u, 1, 0);
      if (v48)
      {
LABEL_89:
        if (v48 == -1)
        {
          v82 = "calling xmlSchemaStreamValidateSimpleTypeValue()";
          goto LABEL_152;
        }
        *(_DWORD *)(v37 + 88) = 5;
        goto LABEL_121;
      }
LABEL_105:
      if (!v47)
        goto LABEL_121;
      v60 = *(xmlSchemaVal **)(v37 + 48);
      if (!v60)
      {
        v68 = *__xmlGenericError();
        v69 = *__xmlGenericErrorContext();
        v68(v69, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", 25980);
        goto LABEL_121;
      }
      v61 = *(_QWORD *)(v37 + 80);
      if (v61 && (v62 = *(_QWORD *)(v61 + 56)) != 0)
      {
        v63 = *(xmlSchemaVal **)(v61 + 64);
        if (!v63)
        {
          v64 = *__xmlGenericError();
          v65 = *__xmlGenericErrorContext();
          v66 = 25987;
LABEL_120:
          v64(v65, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemas.c", v66);
          goto LABEL_121;
        }
      }
      else
      {
        v67 = *(_QWORD *)(v37 + 72);
        v63 = *(xmlSchemaVal **)(v67 + 136);
        if (!v63)
        {
          v64 = *__xmlGenericError();
          v65 = *__xmlGenericErrorContext();
          v66 = 26002;
          goto LABEL_120;
        }
        v62 = *(_QWORD *)(v67 + 88);
      }
      *(_QWORD *)(v37 + 96) = v62;
      if (!xmlSchemaAreValuesEqual(v60, v63))
        *(_DWORD *)(v37 + 88) = 7;
      goto LABEL_121;
    }
LABEL_127:
    ++v35;
    v71 = *(int *)(a1 + 296);
    if (v35 < v71)
      continue;
    break;
  }
  v72 = v83;
  if ((int)v71 >= 1)
  {
    v73 = 0;
    do
    {
      v74 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v73);
      v75 = *(_DWORD *)(v74 + 88);
      if (v75 > 0x11 || ((1 << v75) & 0x26004) == 0)
      {
        *(_QWORD *)(a1 + 192) = v74;
        switch(v75)
        {
          case 1u:
            if (!*(_DWORD *)(v74 + 92))
            {
              if (*(_QWORD *)(v72 + 152))
                v77 = 1867;
              else
                v77 = 1866;
              xmlSchemaIllegalAttrErr((_DWORD *)a1, v77, v74);
              goto LABEL_146;
            }
            break;
          case 4u:
            *(_QWORD *)__str = 0;
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * *(int *)(a1 + 172));
            v78 = xmlSchemaFormatQName((void **)__str, *(const xmlChar **)(*(_QWORD *)(v74 + 72) + 112), *(xmlChar **)(*(_QWORD *)(v74 + 72) + 16));
            xmlSchemaCustomErr4((_DWORD *)a1, 1868, 0, 0, (const xmlChar *)"The attribute '%s' is required but missing", v78, 0, 0, 0);
            if (*(_QWORD *)__str)
              ((void (*)(void))*v36)();
            goto LABEL_146;
          case 6u:
            v79 = (_DWORD *)a1;
            v80 = 1862;
            v81 = "The type definition is absent";
            goto LABEL_145;
          case 7u:
            xmlSchemaCustomErr4((_DWORD *)a1, 1874, 0, 0, (const xmlChar *)"The value '%s' does not match the fixed value constraint '%s'", *(const xmlChar **)(v74 + 40), *(xmlChar **)(v74 + 96), 0, 0);
            goto LABEL_146;
          case 0xAu:
            v79 = (_DWORD *)a1;
            v80 = 1878;
            v81 = "No matching global attribute declaration available, but demanded by the strict wildcard";
LABEL_145:
            xmlSchemaCustomErr4(v79, v80, 0, 0, (const xmlChar *)v81, 0, 0, 0, 0);
LABEL_146:
            v72 = v83;
            break;
          default:
            break;
        }
      }
      ++v73;
    }
    while (v73 < *(int *)(a1 + 296));
  }
LABEL_149:
  result = 0;
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * *(int *)(a1 + 172));
  return result;
}

uint64_t xmlSchemaVAttributesSimple(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(a1 + 296);
  if (!v1)
    return 0;
  if (v1 < 1)
  {
    v4 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8 * v3);
      if (!*(_DWORD *)(v5 + 92))
      {
        *(_QWORD *)(a1 + 192) = v5;
        v4 = 1827;
        xmlSchemaIllegalAttrErr((_DWORD *)a1, 1827, v5);
        v1 = *(_DWORD *)(a1 + 296);
      }
      ++v3;
    }
    while (v3 < v1);
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * *(int *)(a1 + 172));
  return v4;
}

_DWORD *xmlSchemaAugmentIDC(_DWORD *a1, uint64_t a2)
{
  _DWORD *result;
  int v5;

  result = xmlMalloc(0x18uLL);
  if (result)
  {
    result[4] = -1;
    *(_QWORD *)result = *(_QWORD *)(a2 + 200);
    *((_QWORD *)result + 1) = a1;
    *(_QWORD *)(a2 + 200) = result;
    if (!*(_DWORD *)(a2 + 320) && *a1 == 24)
      *(_DWORD *)(a2 + 320) = 1;
  }
  else
  {
    if (a2)
    {
      v5 = *(_DWORD *)(a2 + 108) + 1;
      *(_DWORD *)(a2 + 104) = 1818;
      *(_DWORD *)(a2 + 108) = v5;
    }
    return __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)"xmlSchemaAugmentIDC: allocating an augmented IDC definition");
  }
  return result;
}

uint64_t xmlSchemaProcessXSIType(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const xmlChar *v7;
  int v8;
  xmlSchemaTypePtr v9;
  uint64_t result;
  xmlChar *v11;
  xmlDict *v12;
  xmlChar *v13;
  xmlChar *v14;
  _QWORD *Type;
  int v16;
  char v17;
  xmlSchemaTypePtr v18;
  xmlChar *v19;
  xmlSchemaTypePtr BuiltInType;
  uint64_t v21;
  xmlChar *v22;
  xmlChar *prefix;

  if (!a3)
    return 0xFFFFFFFFLL;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a1 + 192) = a2;
  v7 = *(const xmlChar **)(a2 + 40);
  v8 = xmlValidateQName(v7, 1);
  if (v8 == -1)
  {
    xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaValidateElementByDeclaration", (const xmlChar *)"calling xmlSchemaQNameExpand() to validate the attribute 'xsi:type'", 0);
    result = 0xFFFFFFFFLL;
  }
  else if (v8 < 1)
  {
    prefix = 0;
    v11 = xmlSplitQName2(v7, &prefix);
    v12 = *(xmlDict **)(a1 + 272);
    if (v11)
    {
      v13 = (xmlChar *)xmlDictLookup(v12, v11, -1);
      xmlFree(v11);
    }
    else
    {
      v13 = (xmlChar *)xmlDictLookup(v12, v7, -1);
    }
    v14 = (xmlChar *)xmlSchemaLookupNamespace(a1, prefix);
    if (prefix && (xmlFree(prefix), !v14))
    {
      BuiltInType = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
      xmlSchemaCustomErr4((_DWORD *)a1, 1824, 0, BuiltInType, (const xmlChar *)"The QName value '%s' has no corresponding namespace declaration in scope", v7, 0, 0, 0);
      result = 2;
    }
    else
    {
      Type = xmlSchemaGetType(*(_QWORD *)(a1 + 40), v13, v14);
      *(_QWORD *)a3 = Type;
      if (Type)
      {
        if (a4)
        {
          v16 = *(_DWORD *)(a4 + 88);
          if ((v16 & 0x800) != 0 || (*(_BYTE *)(*(_QWORD *)(a4 + 56) + 90) & 4) != 0)
            v17 = 2;
          else
            v17 = 0;
          v21 = *(_QWORD *)(a4 + 56);
          if ((v16 & 0x1000) != 0 || (*(_BYTE *)(v21 + 90) & 8) != 0)
            v17 |= 1u;
          result = xmlSchemaCheckCOSDerivedOK((xmlSchemaParserCtxt *)a1, (uint64_t)Type, v21, v17);
          if ((_DWORD)result)
          {
            prefix = 0;
            v22 = xmlSchemaFormatQName((void **)&prefix, *(const xmlChar **)(*(_QWORD *)a3 + 208), *(xmlChar **)(*(_QWORD *)a3 + 16));
            xmlSchemaCustomErr4((_DWORD *)a1, 1852, 0, 0, (const xmlChar *)"The type definition '%s', specified by xsi:type, is blocked or not validly derived from the type definition of the element declaration", v22, 0, 0, 0);
            if (prefix)
              xmlFree(prefix);
            result = *(unsigned int *)(a1 + 104);
            *(_QWORD *)a3 = 0;
          }
        }
        else
        {
          result = 0;
        }
      }
      else
      {
        prefix = 0;
        v18 = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
        v19 = xmlSchemaFormatQName((void **)&prefix, v14, v13);
        xmlSchemaCustomErr4((_DWORD *)a1, 1851, 0, v18, (const xmlChar *)"The QName value '%s' of the xsi:type attribute does not resolve to a type definition", v19, 0, 0, 0);
        if (prefix)
          xmlFree(prefix);
        result = *(unsigned int *)(a1 + 104);
      }
    }
  }
  else
  {
    v9 = xmlSchemaGetBuiltInType(XML_SCHEMAS_QNAME);
    xmlSchemaSimpleTypeErr((_DWORD *)a1, 1824, 0, v7, (uint64_t)v9);
    result = 1;
  }
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * *(int *)(a1 + 172));
  return result;
}

void xmlSchemaVContentModelCallback(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_QWORD *)(a4 + 80) = a3;
}

void xmlSchemaComplexTypeErr(_DWORD *a1, const xmlChar *a2, int a3, int a4, uint64_t a5)
{
  xmlChar *v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  int64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  xmlChar *v18;
  unsigned __int8 *v19;
  uint64_t i;
  const xmlChar *v21;
  int v22;
  BOOL v23;
  xmlChar *v24;
  xmlChar *v25;
  int v26;
  const xmlChar *v27;
  int v28;
  const char *v29;
  xmlChar *v30;
  xmlChar *v31;
  xmlChar *v32;
  xmlChar *v33;
  xmlChar *v34;
  const xmlChar *v35;
  xmlChar *v36;
  xmlChar *cur;
  xmlChar *v38;

  cur = 0;
  v38 = 0;
  xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, 0);
  cur = xmlStrcat(cur, a2);
  v10 = xmlStrcat(cur, (const xmlChar *)".");
  cur = v10;
  v11 = (a4 + a3);
  if ((int)v11 < 1)
  {
    v36 = xmlStrcat(v10, (const xmlChar *)"\n");
    cur = v36;
    goto LABEL_46;
  }
  if ((_DWORD)v11 == 1)
    v12 = " Expected is(";
  else
    v12 = " Expected is one of(";
  v13 = 0;
  v38 = xmlStrdup((const xmlChar *)v12);
  v14 = a3;
  do
  {
    v15 = *(unsigned __int8 **)(a5 + 8 * v13);
    if (!v15)
      goto LABEL_41;
    v16 = *v15;
    if (v16 == 110)
    {
      if (v15[1] != 111 || v15[2] != 116 || v15[3] != 32)
      {
        v16 = 110;
        goto LABEL_15;
      }
      v38 = xmlStrcat(v38, (const xmlChar *)"##other");
      v17 = v15[4];
      v15 += 4;
      v16 = v17;
    }
    if (v16 == 42)
    {
      v18 = xmlStrdup((const xmlChar *)"*");
      v19 = v15 + 1;
      goto LABEL_19;
    }
LABEL_15:
    for (i = 0; v16; v16 = v15[++i])
    {
      if (v16 == 124)
        break;
    }
    v18 = xmlStrncat(0, v15, i);
    v19 = &v15[i];
LABEL_19:
    if (*v19)
    {
      v22 = v19[1];
      v21 = v19 + 1;
      v23 = v22 == 42;
      if (a4)
      {
        if (!v23)
          goto LABEL_29;
        if (*v18 == 42)
        {
          xmlFree(v18);
          goto LABEL_41;
        }
      }
      else if (!v23)
      {
LABEL_29:
        v26 = -1;
        v27 = v21;
        do
        {
          v28 = *v27++;
          ++v26;
        }
        while (v28);
        if ((uint64_t)v13 >= v14)
          v29 = "{##other:";
        else
          v29 = "{";
        v30 = xmlStrdup((const xmlChar *)v29);
        v31 = xmlStrncat(v30, v21, v26);
        v25 = xmlStrcat(v31, (const xmlChar *)"}");
LABEL_35:
        v32 = v25;
        v24 = xmlStrcat(v38, v25);
        if (v32)
          xmlFree(v32);
        goto LABEL_37;
      }
      v25 = xmlStrdup((const xmlChar *)"{*}");
      goto LABEL_35;
    }
    v24 = v38;
LABEL_37:
    v33 = xmlStrcat(v24, v18);
    v38 = v33;
    if (v18)
      xmlFree(v18);
    if (v13 < (v11 - 1))
      v38 = xmlStrcat(v33, (const xmlChar *)", ");
LABEL_41:
    ++v13;
  }
  while (v13 != v11);
  v38 = xmlStrcat(v38, (const xmlChar *)").\n");
  v34 = cur;
  v35 = xmlEscapeFormatString((void **)&v38);
  v36 = xmlStrcat(v34, v35);
  cur = v36;
  if (v38)
  {
    xmlFree(v38);
    v38 = 0;
    v36 = cur;
  }
LABEL_46:
  xmlSchemaErr4Line(a1, 2, 1871, 0, 0, (const char *)v36, 0, 0, 0, 0);
  xmlFree(cur);
}

uint64_t xmlSchemaIDCAddStateObject(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _OWORD *v8;
  _OWORD *v9;
  uint64_t v10;
  xmlStreamCtxt *v11;
  xmlStreamCtxtPtr StreamCtxt;
  uint64_t result;

  v8 = *(_OWORD **)(a1 + 216);
  if (v8)
  {
    *(_QWORD *)(a1 + 216) = *((_QWORD *)v8 + 1);
    *((_QWORD *)v8 + 1) = 0;
  }
  else
  {
    v9 = xmlMalloc(0x40uLL);
    if (!v9)
    {
      __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)"allocating an IDC state object");
      return 0xFFFFFFFFLL;
    }
    v8 = v9;
    v9[2] = 0u;
    v9[3] = 0u;
    *v9 = 0u;
    v9[1] = 0u;
  }
  v10 = *(_QWORD *)(a1 + 208);
  if (v10)
    *((_QWORD *)v8 + 1) = v10;
  *(_QWORD *)(a1 + 208) = v8;
  v11 = (xmlStreamCtxt *)*((_QWORD *)v8 + 7);
  if (v11)
    xmlFreeStreamCtxt(v11);
  StreamCtxt = xmlPatternGetStreamCtxt(*(xmlPatternPtr *)(a3 + 32));
  *((_QWORD *)v8 + 7) = StreamCtxt;
  if (StreamCtxt)
  {
    result = 0;
    *(_DWORD *)v8 = a4;
    *((_DWORD *)v8 + 4) = *(_DWORD *)(a1 + 172);
    *((_QWORD *)v8 + 5) = a2;
    *((_QWORD *)v8 + 6) = a3;
    *((_DWORD *)v8 + 8) = 0;
    return result;
  }
  xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaIDCAddStateObject", (const xmlChar *)"failed to create an XPath validation context", 0);
  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaXPathProcessHistory(uint64_t a1, int a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  xmlChar *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  const xmlChar *v29;
  const xmlChar *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  xmlChar *v36;
  void **v37;
  int *v38;
  const xmlChar *v39;
  xmlChar *ComponentDesignation;
  int v41;
  unsigned int v42;
  void *v43;
  uint64_t v44;
  _QWORD *v45;
  int *v46;
  const xmlChar *v47;
  xmlChar *v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  int v59;
  int v60;
  _DWORD *v61;
  xmlChar *v62;
  _QWORD *v63;
  _QWORD *v64;
  void **v65;
  uint64_t v66;
  xmlChar *v67;
  xmlChar *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  int v72;
  xmlSchemaVal *v73;
  int v74;
  void **v75;
  _QWORD *v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t *v81;
  uint64_t v82;
  xmlChar *v83;
  xmlChar *name;

  v2 = *(_QWORD *)(a1 + 208);
  if (!v2)
    return 0;
  v5 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 56);
  while (1)
  {
    if (xmlStreamPop(*(xmlStreamCtxtPtr *)(v2 + 56)) == -1)
    {
      v69 = "calling xmlStreamPop()";
      goto LABEL_124;
    }
    v7 = *(_DWORD *)(v2 + 32);
    if (v7)
      break;
LABEL_113:
    if (*(_DWORD *)(v2 + 16) == a2)
    {
      if (*(_QWORD *)(a1 + 208) != v2)
        xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaXPathProcessHistory", (const xmlChar *)"The state object to be removed is not the first in the list", 0);
      v66 = *(_QWORD *)(v2 + 8);
      *(_QWORD *)(a1 + 208) = v66;
      *(_QWORD *)(v2 + 8) = *(_QWORD *)(a1 + 216);
      *(_QWORD *)(a1 + 216) = v2;
      v2 = v66;
      goto LABEL_7;
    }
LABEL_6:
    v2 = *(_QWORD *)(v2 + 8);
LABEL_7:
    if (!v2)
      return 0;
  }
  if (*(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * (v7 - 1)) != a2)
    goto LABEL_6;
  if (*(_DWORD *)v2 != 1)
  {
    if (*(_DWORD *)v2 != 2)
      goto LABEL_111;
    if (*(_DWORD *)v6 == 5 || (v8 = v6, *(_DWORD *)(v6 + 160) == 45))
    {
      if ((*(_DWORD *)(v6 + 92) | 2) == 6)
      {
        v8 = *(_QWORD *)(v6 + 192);
        if (v8)
          goto LABEL_15;
        v69 = "field resolves to a CT with simple content but the CT is missing the ST definition";
LABEL_124:
        xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaXPathProcessHistory", (const xmlChar *)v69, 0);
        return 0xFFFFFFFFLL;
      }
      name = 0;
      v38 = *(int **)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 24) + 8);
      v39 = *(const xmlChar **)(*(_QWORD *)(v2 + 48) + 24);
      ComponentDesignation = xmlSchemaGetComponentDesignation(&name, v38);
      xmlSchemaCustomErr4((_DWORD *)a1, 1877, 0, v38, (const xmlChar *)"The XPath '%s' of a field of %s does evaluate to a node of non-simple type", v39, ComponentDesignation, 0, 0);
      if (name)
        xmlFree(name);
      v41 = *(_DWORD *)(v2 + 32) - 1;
      *(_DWORD *)(v2 + 32) = v41;
LABEL_112:
      if (v41)
        goto LABEL_6;
      goto LABEL_113;
    }
LABEL_15:
    if (!v5 && !*(_QWORD *)(*(_QWORD *)(a1 + 192) + 48))
    {
      xmlSchemaCustomErr4((_DWORD *)a1, 1877, 0, *(_DWORD **)(*(_QWORD *)(*(_QWORD *)(v2 + 40) + 24) + 8), (const xmlChar *)"Warning: No precomputed value available, the value was either invalid or something strange happened", 0, 0, 0, 0);
      v5 = 0;
      v41 = *(_DWORD *)(v2 + 32) - 1;
      *(_DWORD *)(v2 + 32) = v41;
      goto LABEL_112;
    }
    v9 = *(_QWORD *)(v2 + 40);
    v10 = *(_DWORD *)(v2 + 16) - *(_DWORD *)(v9 + 4);
    v11 = *(int *)(*(_QWORD *)(v2 + 48) + 16);
    v12 = *(void **)(v9 + 40);
    if (v12)
    {
      v13 = *(int *)(v9 + 48);
      if (v10 >= (int)v13)
      {
        *(_DWORD *)(v9 + 48) = 2 * v10;
        v14 = xmlRealloc(v12, 16 * v10);
        *(_QWORD *)(v9 + 40) = v14;
        if (!v14)
        {
          v70 = "reallocating an array of key-sequences";
          goto LABEL_131;
        }
        v15 = *(int *)(v9 + 48);
        if ((int)v13 < (int)v15)
        {
          do
            *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8 * v13++) = 0;
          while (v15 != v13);
        }
      }
    }
    else
    {
      v42 = 2 * v10;
      if (v10 < 10)
        v42 = 10;
      *(_DWORD *)(v9 + 48) = v42;
      v43 = xmlMalloc(8 * v42);
      *(_QWORD *)(v9 + 40) = v43;
      if (!v43)
      {
        v70 = "allocating an array of key-sequences";
        goto LABEL_131;
      }
      bzero(v43, 8 * *(int *)(v9 + 48));
    }
    v44 = v10;
    v45 = *(_QWORD **)(*(_QWORD *)(v9 + 40) + 8 * v10);
    if (v45)
    {
      if (v45[v11])
      {
        name = 0;
        v46 = *(int **)(*(_QWORD *)(v9 + 24) + 8);
        v47 = *(const xmlChar **)(*(_QWORD *)(v2 + 48) + 24);
        v48 = xmlSchemaGetComponentDesignation(&name, v46);
        xmlSchemaCustomErr4((_DWORD *)a1, 1877, 0, v46, (const xmlChar *)"The XPath '%s' of a field of %s evaluates to a node-set with more than one member", v47, v48, 0, 0);
        if (name)
          xmlFree(name);
        v41 = *(_DWORD *)(v2 + 32) - 1;
        *(_DWORD *)(v2 + 32) = v41;
        goto LABEL_112;
      }
      goto LABEL_76;
    }
    v49 = xmlMalloc(8 * *(int *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 64));
    if (v49)
    {
      v45 = v49;
      bzero(v49, 8 * *(int *)(*(_QWORD *)(*(_QWORD *)(v9 + 24) + 8) + 64));
      *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8 * v44) = v45;
LABEL_76:
      if (!v5)
      {
        v50 = xmlMalloc(0x10uLL);
        if (!v50)
        {
          __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)"allocating a IDC key");
          xmlFree(v45);
          *(_QWORD *)(*(_QWORD *)(v9 + 40) + 8 * v44) = 0;
          return 0xFFFFFFFFLL;
        }
        v5 = v50;
        *v50 = v8;
        v51 = *(_QWORD *)(a1 + 192);
        v50[1] = *(_QWORD *)(v51 + 48);
        *(_QWORD *)(v51 + 48) = 0;
        v52 = *(void **)(a1 + 248);
        if (v52)
        {
          v53 = *(int *)(a1 + 260);
          if ((int)v53 <= *(_DWORD *)(a1 + 256))
          {
            *(_DWORD *)(a1 + 260) = 2 * v53;
            v52 = xmlRealloc(v52, 16 * v53);
            *(_QWORD *)(a1 + 248) = v52;
            if (!v52)
            {
              v71 = "re-allocating the IDC key storage list";
LABEL_139:
              v72 = *(_DWORD *)(a1 + 108) + 1;
              *(_DWORD *)(a1 + 104) = 1818;
              *(_DWORD *)(a1 + 108) = v72;
              __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)v71);
              v73 = (xmlSchemaVal *)v5[1];
              if (v73)
                xmlSchemaFreeValue(v73);
              ((void (*)(_QWORD *))xmlFree)(v5);
              return 0xFFFFFFFFLL;
            }
          }
        }
        else
        {
          v52 = xmlMalloc(0x140uLL);
          *(_QWORD *)(a1 + 248) = v52;
          if (!v52)
          {
            v71 = "allocating the IDC key storage list";
            goto LABEL_139;
          }
          *(_DWORD *)(a1 + 260) = 40;
        }
        v56 = *(int *)(a1 + 256);
        *(_DWORD *)(a1 + 256) = v56 + 1;
        *((_QWORD *)v52 + v56) = v5;
      }
      v45[v11] = v5;
LABEL_111:
      v41 = *(_DWORD *)(v2 + 32) - 1;
      *(_DWORD *)(v2 + 32) = v41;
      goto LABEL_112;
    }
    v70 = "allocating an IDC key-sequence";
LABEL_131:
    __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)v70);
    return 0xFFFFFFFFLL;
  }
  v16 = *(_QWORD *)(v2 + 40);
  v17 = *(_QWORD *)(*(_QWORD *)(v16 + 24) + 8);
  v18 = *(_QWORD *)(v16 + 40);
  if (!v18 || (v19 = a2 - *(_DWORD *)(v16 + 4), *(_DWORD *)(v16 + 48) <= v19))
  {
    if (*(_DWORD *)v17 != 23)
      goto LABEL_111;
    v81 = 0;
    goto LABEL_58;
  }
  v81 = (uint64_t *)(v18 + 8 * v19);
  v20 = (_QWORD *)*v81;
  if (!*v81)
  {
    if (*(_DWORD *)v17 != 23)
      goto LABEL_111;
    goto LABEL_58;
  }
  v21 = *(unsigned int *)(v17 + 64);
  v79 = v21;
  if ((int)v21 >= 1)
  {
    while (*v20)
    {
      ++v20;
      if (!--v21)
        goto LABEL_29;
    }
    if (*(_DWORD *)v17 != 23)
    {
LABEL_60:
      v37 = (void **)v81;
      if (!v81)
        goto LABEL_111;
LABEL_109:
      if (*v37)
      {
        v82 = v6;
        v64 = v5;
        v65 = v37;
        xmlFree(*v37);
        *v65 = 0;
        v5 = v64;
        v6 = v82;
      }
      goto LABEL_111;
    }
LABEL_58:
    name = 0;
    v36 = xmlSchemaGetComponentDesignation(&name, (int *)v17);
    xmlSchemaCustomErr4((_DWORD *)a1, 1877, 0, (_DWORD *)v17, (const xmlChar *)"Not all fields of %s evaluate to a node", v36, 0, 0, 0);
    if (name)
      xmlFree(name);
    goto LABEL_60;
  }
LABEL_29:
  v80 = *(_QWORD **)(v16 + 56);
  if (!v80)
  {
    v80 = xmlSchemaItemListCreate();
    *(_QWORD *)(v16 + 56) = v80;
  }
  if (*(_DWORD *)v17 == 24 || !*((_DWORD *)v80 + 2) || !*(_QWORD *)(v16 + 64))
    goto LABEL_44;
  name = 0;
  xmlSchemaFormatIDCKeySequence_1((_DWORD *)a1, &name, *v81, v79, 1);
  v22 = name;
  v75 = (void **)xmlHashLookup(*(xmlHashTablePtr *)(v16 + 64), name);
  if (v22)
    xmlFree(v22);
  if (!v75)
  {
LABEL_44:
    v26 = xmlMalloc(0x18uLL);
    if (v26)
    {
      v27 = (uint64_t)v26;
      *v26 = 0;
      v26[1] = 0;
      v26[2] = 0;
      if (*(_DWORD *)v17 != 24)
      {
        v54 = *(void **)(a1 + 232);
        if (v54)
        {
          v55 = *(int *)(a1 + 244);
          if ((int)v55 <= *(_DWORD *)(a1 + 240))
          {
            *(_DWORD *)(a1 + 244) = 2 * v55;
            v77 = v27;
            v54 = xmlRealloc(v54, 16 * v55);
            v27 = v77;
            *(_QWORD *)(a1 + 232) = v54;
            if (!v54)
            {
              v57 = "re-allocating the IDC node table item list";
LABEL_143:
              v74 = *(_DWORD *)(a1 + 108) + 1;
              *(_DWORD *)(a1 + 104) = 1818;
              *(_DWORD *)(a1 + 108) = v74;
              __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)v57);
              ((void (*)(uint64_t))xmlFree)(v77);
              goto LABEL_144;
            }
          }
        }
        else
        {
          v77 = v27;
          v54 = xmlMalloc(0xA0uLL);
          *(_QWORD *)(a1 + 232) = v54;
          v57 = "allocating the IDC node table item list";
          if (!v54)
            goto LABEL_143;
          *(_DWORD *)(a1 + 244) = 20;
          v27 = v77;
        }
        v34 = *(int *)(a1 + 240);
        *(_DWORD *)(a1 + 240) = v34 + 1;
        *((_QWORD *)v54 + v34) = v27;
        LODWORD(v34) = -1;
        goto LABEL_98;
      }
      v76 = v26;
      v28 = *(_QWORD *)(a1 + 192);
      v29 = *(const xmlChar **)(v28 + 32);
      v30 = xmlDictLookup(*(xmlDictPtr *)(a1 + 272), *(const xmlChar **)(v28 + 24), -1);
      if (v30)
      {
        v31 = (uint64_t)v30;
        if (!v29 || (v29 = xmlDictLookup(*(xmlDictPtr *)(a1 + 272), v29, -1)) != 0)
        {
          v32 = *(_QWORD *)(a1 + 312);
          v33 = *(_DWORD *)(v32 + 8);
          if (v33 < 1)
          {
LABEL_54:
            xmlSchemaItemListAdd(v32, v31);
            xmlSchemaItemListAdd(*(_QWORD *)(a1 + 312), (uint64_t)v29);
            v27 = (uint64_t)v76;
            *((_DWORD *)v76 + 5) = v33;
            if (v33 == -1)
              goto LABEL_137;
            goto LABEL_99;
          }
          v34 = 0;
          v35 = *(_QWORD *)v32;
          while (*(_QWORD *)(v35 + 8 * v34) != v31 || *(const xmlChar **)(v35 + 8 * v34 + 8) != v29)
          {
            v34 += 2;
            if (v33 <= (int)v34)
              goto LABEL_54;
          }
          v27 = (uint64_t)v76;
LABEL_98:
          *(_DWORD *)(v27 + 20) = v34;
LABEL_99:
          *(_QWORD *)v27 = *(_QWORD *)(a1 + 112);
          *(_DWORD *)(v27 + 16) = *(_DWORD *)(*(_QWORD *)(a1 + 192) + 16);
          *(_QWORD *)(v27 + 8) = *v81;
          *v81 = 0;
          v78 = (int *)v17;
          v58 = v27;
          v59 = xmlSchemaItemListAdd((uint64_t)v80, v27);
          v60 = *v78;
          if (v59 == -1)
          {
            if (v60 == 24)
            {
              xmlFree(*(void **)(v58 + 8));
              ((void (*)(uint64_t))xmlFree)(v58);
            }
            return 0xFFFFFFFFLL;
          }
          if (v60 != 24)
          {
            name = 0;
            if (!*(_QWORD *)(v16 + 64))
              *(_QWORD *)(v16 + 64) = xmlHashCreate(4);
            xmlSchemaFormatIDCKeySequence_1((_DWORD *)a1, &name, *(_QWORD *)(v58 + 8), v79, 1);
            v61 = xmlMalloc(0x10uLL);
            v61[2] = *((_DWORD *)v80 + 2) - 1;
            v62 = name;
            v63 = xmlHashLookup(*(xmlHashTablePtr *)(v16 + 64), name);
            if (v63)
            {
              *(_QWORD *)v61 = *v63;
              *v63 = v61;
            }
            else
            {
              *(_QWORD *)v61 = 0;
              xmlHashAddEntry(*(xmlHashTablePtr *)(v16 + 64), v62, v61);
            }
            if (v62)
              xmlFree(v62);
          }
LABEL_108:
          v37 = (void **)v81;
          goto LABEL_109;
        }
      }
      v27 = (uint64_t)v76;
      *((_DWORD *)v76 + 5) = -1;
LABEL_137:
      ((void (*)(uint64_t))xmlFree)(v27);
    }
    else
    {
      __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)"allocating an IDC node-table item");
    }
LABEL_144:
    xmlFree((void *)*v81);
    *v81 = 0;
    return 0xFFFFFFFFLL;
  }
  while ((int)v79 < 1)
  {
LABEL_43:
    v75 = (void **)*v75;
    if (!v75)
      goto LABEL_44;
  }
  v23 = 0;
  v24 = *(_QWORD *)(*(_QWORD *)(*v80 + 8 * *((int *)v75 + 2)) + 8);
  while (1)
  {
    result = xmlSchemaAreValuesEqual(*(xmlSchemaValPtr *)(*(_QWORD *)(*v81 + v23) + 8), *(xmlSchemaVal **)(*(_QWORD *)(v24 + v23) + 8));
    if ((_DWORD)result == -1)
      return result;
    if (!(_DWORD)result)
      goto LABEL_43;
    v23 += 8;
    if (8 * v79 == v23)
    {
      v83 = 0;
      name = 0;
      v67 = xmlSchemaFormatIDCKeySequence_1((_DWORD *)a1, &name, *v81, v79, 0);
      v68 = xmlSchemaGetComponentDesignation(&v83, (int *)v17);
      xmlSchemaCustomErr4((_DWORD *)a1, 1877, 0, (_DWORD *)v17, (const xmlChar *)"Duplicate key-sequence %s in %s", v67, v68, 0, 0);
      if (name)
        xmlFree(name);
      if (v83)
        xmlFree(v83);
      goto LABEL_108;
    }
  }
}

void xmlSchemaIllegalAttrErr(_DWORD *a1, int a2, uint64_t a3)
{
  xmlChar *v6;
  xmlChar *v7;
  void *v8;
  void *v9;
  xmlChar *cur;

  v9 = 0;
  cur = 0;
  xmlSchemaFormatNodeForError((void **)&cur, (uint64_t)a1, 0);
  v6 = xmlStrcat(cur, (const xmlChar *)"The attribute '%s' is not allowed.\n");
  cur = v6;
  if (a3)
  {
    v7 = xmlSchemaFormatQName(&v9, *(const xmlChar **)(a3 + 32), *(xmlChar **)(a3 + 24));
    v8 = v9;
    xmlSchemaErr4Line(a1, 2, a2, 0, 0, (const char *)v6, v7, 0, 0, 0);
    if (v8)
      xmlFree(v8);
  }
  else
  {
    xmlSchemaErr4Line(a1, 2, a2, 0, 0, (const char *)v6, 0, 0, 0, 0);
  }
  if (cur)
    xmlFree(cur);
}

xmlChar *xmlSchemaFormatIDCKeySequence_1(_DWORD *a1, xmlChar **a2, uint64_t a3, int a4, int a5)
{
  xmlChar *v10;
  unint64_t v11;
  uint64_t v12;
  xmlSchemaVal *v13;
  xmlSchemaVal *v14;
  int WhiteSpaceFacetValue;
  int v16;
  xmlChar *v17;
  xmlChar *v18;
  xmlChar *v19;
  const char *v20;
  xmlChar *result;
  xmlChar *add;

  add = 0;
  v10 = xmlStrdup((const xmlChar *)"[");
  *a2 = v10;
  if (a4 >= 1)
  {
    v11 = 0;
    do
    {
      *a2 = xmlStrcat(*a2, (const xmlChar *)"'");
      v12 = *(_QWORD *)(a3 + 8 * v11);
      v13 = *(xmlSchemaVal **)(v12 + 8);
      if (a5)
      {
        v14 = *(xmlSchemaVal **)(v12 + 8);
        WhiteSpaceFacetValue = 3;
        v16 = 1;
      }
      else
      {
        WhiteSpaceFacetValue = xmlSchemaGetWhiteSpaceFacetValue(*(_DWORD **)v12);
        v14 = v13;
        v16 = 0;
      }
      if (xmlSchemaGetCanonValueWhtspExt_1(v14, WhiteSpaceFacetValue, &add, v16))
      {
        xmlSchemaInternalErr2(a1, (const xmlChar *)"xmlSchemaFormatIDCKeySequence", (const xmlChar *)"failed to compute a canonical value", 0);
        v17 = *a2;
        v18 = (xmlChar *)"???";
      }
      else
      {
        v17 = *a2;
        v18 = add;
      }
      v19 = xmlStrcat(v17, v18);
      *a2 = v19;
      if (v11 >= (a4 - 1))
        v20 = "'";
      else
        v20 = "', ";
      *a2 = xmlStrcat(v19, (const xmlChar *)v20);
      if (add)
      {
        xmlFree(add);
        add = 0;
      }
      ++v11;
    }
    while (a4 != v11);
    v10 = *a2;
  }
  result = xmlStrcat(v10, (const xmlChar *)"]");
  *a2 = result;
  return result;
}

uint64_t xmlSchemaVCheckINodeDataType(uint64_t a1, uint64_t a2, uint64_t a3, xmlChar *a4)
{
  xmlSchemaValPtr *v4;
  int v5;

  if ((*(_BYTE *)(a2 + 64) & 0x10) != 0)
  {
    v4 = (xmlSchemaValPtr *)(a2 + 48);
    v5 = 1;
  }
  else
  {
    v4 = 0;
    v5 = 0;
  }
  return xmlSchemaVCheckCVCSimpleType(a1, 0, a3, a4, v4, 1u, v5, 0);
}

uint64_t xmlSchemaCheckCOSValidDefault(uint64_t a1, xmlChar *a2, xmlSchemaValPtr *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 192) + 56);
  v7 = *(_DWORD *)v6;
  if (*(_DWORD *)v6 != 5 && *(_DWORD *)(v6 + 160) != 45
    || ((v8 = *(_DWORD *)(v6 + 92), v8 != 6) ? (v9 = v8 == 4) : (v9 = 1),
        v9 || v8 == 3 && xmlSchemaIsParticleEmptiable(*(_QWORD *)(v6 + 56))))
  {
    if (v7 == 4 || v7 == 1 && *(_DWORD *)(v6 + 160) != 45)
    {
      v11 = a1;
      v10 = v6;
    }
    else
    {
      if ((*(_DWORD *)(v6 + 92) | 2) != 6)
        return 0;
      v10 = *(_QWORD *)(v6 + 192);
      v11 = a1;
    }
    v12 = xmlSchemaVCheckCVCSimpleType(v11, 0, v10, a2, a3, 1u, 1, 0);
    if ((v12 & 0x80000000) != 0)
      xmlSchemaInternalErr2((_DWORD *)a1, (const xmlChar *)"xmlSchemaCheckCOSValidDefault", (const xmlChar *)"calling xmlSchemaVCheckCVCSimpleType()", 0);
  }
  else
  {
    v12 = 3059;
    xmlSchemaCustomErr4((_DWORD *)a1, 3059, 0, 0, (const xmlChar *)"For a string to be a valid default, the type definition must be a simple type or a complex type with simple content or mixed content and a particle emptiable", 0, 0, 0, 0);
  }
  return v12;
}

_QWORD *xmlSchemaIDCNewBinding(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;

  v2 = xmlMalloc(0x28uLL);
  v3 = v2;
  if (v2)
  {
    v2[4] = 0;
    *(_OWORD *)v2 = 0u;
    *((_OWORD *)v2 + 1) = 0u;
    v2[1] = a1;
  }
  else
  {
    __xmlSimpleError(0x11u, 2, 0, 0, (const xmlChar *)"allocating a PSVI IDC binding item");
  }
  return v3;
}

void xmlSchemaKeyrefErr(uint64_t a1, uint64_t a2, const xmlChar *a3, xmlChar *a4, xmlChar *a5)
{
  xmlChar *v10;
  xmlChar *v11;
  xmlChar *v12;
  int v13;
  uint64_t v14;
  xmlChar *v15;
  void *v16;

  v16 = 0;
  v10 = xmlStrdup((const xmlChar *)"Element '%s': ");
  v11 = xmlStrcat(v10, a3);
  v12 = xmlStrcat(v11, (const xmlChar *)".\n");
  v13 = *(_DWORD *)(a2 + 16);
  v14 = **(_QWORD **)(a1 + 312) + 8 * *(int *)(a2 + 20);
  v15 = xmlSchemaFormatQName(&v16, *(const xmlChar **)(v14 + 8), *(xmlChar **)v14);
  xmlSchemaErr4Line((_DWORD *)a1, 2, 1877, 0, v13, (const char *)v12, v15, a4, a5, 0);
  if (v16)
    xmlFree(v16);
  if (v12)
    xmlFree(v12);
}

void xmlSchemaInitTypes(void)
{
  int *inited;
  _OWORD *v1;
  _OWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;

  if ((xmlSchemaTypesInitialized & 1) == 0)
  {
    xmlSchemaTypesBank = (uint64_t)xmlHashCreate(40);
    inited = xmlSchemaInitBasicType((const xmlChar *)"anyType", 0x2Du, 0);
    xmlSchemaTypeAnyTypeDef = (uint64_t)inited;
    *((_QWORD *)inited + 14) = inited;
    inited[23] = 3;
    v1 = xmlSchemaAddParticle_0();
    if (v1)
    {
      v2 = v1;
      *(_QWORD *)(xmlSchemaTypeAnyTypeDef + 56) = v1;
      v3 = xmlMalloc(0x28uLL);
      if (v3)
      {
        v4 = v3;
        v3[4] = 0;
        *(_OWORD *)v3 = 0u;
        *((_OWORD *)v3 + 1) = 0u;
        *(_DWORD *)v3 = 6;
        *((_QWORD *)v2 + 3) = v3;
        v5 = xmlSchemaAddParticle_0();
        if (!v5)
          return;
        v6 = v5;
        *((_QWORD *)v5 + 4) = 0x4000000000000000;
        v4[3] = v5;
        v7 = xmlMalloc(0x48uLL);
        if (v7)
        {
          v7[8] = 0;
          *((_OWORD *)v7 + 2) = 0u;
          *((_OWORD *)v7 + 3) = 0u;
          *(_OWORD *)v7 = 0u;
          *((_OWORD *)v7 + 1) = 0u;
          *(_DWORD *)v7 = 2;
          v7[5] = 0x100000002;
          *((_QWORD *)v6 + 3) = v7;
          v8 = xmlMalloc(0x48uLL);
          if (v8)
          {
            v8[8] = 0;
            *((_OWORD *)v8 + 2) = 0u;
            *((_OWORD *)v8 + 3) = 0u;
            *(_OWORD *)v8 = 0u;
            *((_OWORD *)v8 + 1) = 0u;
            v8[5] = 0x100000002;
            v9 = xmlSchemaTypeAnyTypeDef;
            *(_QWORD *)(xmlSchemaTypeAnyTypeDef + 152) = v8;
            xmlSchemaTypeAnySimpleTypeDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"anySimpleType", 0x2Eu, v9);
            xmlSchemaTypeStringDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"string", 1u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDecimalDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"decimal", 3u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDateDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"date", 0xAu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDatetimeDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"dateTime", 0xBu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeTimeDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"time", 4u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGYearDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"gYear", 8u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGYearMonthDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"gYearMonth", 9u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGMonthDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"gMonth", 6u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGMonthDayDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"gMonthDay", 7u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeGDayDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"gDay", 5u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDurationDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"duration", 0xCu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeFloatDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"float", 0xDu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeDoubleDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"double", 0xEu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeBooleanDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"BOOLean", 0xFu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeAnyURIDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"anyURI", 0x1Du, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeHexBinaryDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"hexBinary", 0x2Bu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeBase64BinaryDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"base64Binary", 0x2Cu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeNotationDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"NOTATION", 0x1Cu, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeQNameDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"QName", 0x15u, xmlSchemaTypeAnySimpleTypeDef);
            xmlSchemaTypeIntegerDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"integer", 0x1Eu, xmlSchemaTypeDecimalDef);
            xmlSchemaTypeNonPositiveIntegerDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"nonPositiveInteger", 0x1Fu, xmlSchemaTypeIntegerDef);
            xmlSchemaTypeNegativeIntegerDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"negativeInteger", 0x20u, xmlSchemaTypeNonPositiveIntegerDef);
            xmlSchemaTypeLongDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"long", 0x25u, xmlSchemaTypeIntegerDef);
            xmlSchemaTypeIntDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"int", 0x23u, xmlSchemaTypeLongDef);
            xmlSchemaTypeShortDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"short", 0x27u, xmlSchemaTypeIntDef);
            xmlSchemaTypeByteDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"byte", 0x29u, xmlSchemaTypeShortDef);
            xmlSchemaTypeNonNegativeIntegerDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"nonNegativeInteger", 0x21u, xmlSchemaTypeIntegerDef);
            xmlSchemaTypeUnsignedLongDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"unsignedLong", 0x26u, xmlSchemaTypeNonNegativeIntegerDef);
            xmlSchemaTypeUnsignedIntDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"unsignedInt", 0x24u, xmlSchemaTypeUnsignedLongDef);
            xmlSchemaTypeUnsignedShortDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"unsignedShort", 0x28u, xmlSchemaTypeUnsignedIntDef);
            xmlSchemaTypeUnsignedByteDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"unsignedByte", 0x2Au, xmlSchemaTypeUnsignedShortDef);
            xmlSchemaTypePositiveIntegerDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"positiveInteger", 0x22u, xmlSchemaTypeNonNegativeIntegerDef);
            xmlSchemaTypeNormStringDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"normalizedString", 2u, xmlSchemaTypeStringDef);
            xmlSchemaTypeTokenDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"token", 0x10u, xmlSchemaTypeNormStringDef);
            xmlSchemaTypeLanguageDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"language", 0x11u, xmlSchemaTypeTokenDef);
            xmlSchemaTypeNameDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"Name", 0x14u, xmlSchemaTypeTokenDef);
            xmlSchemaTypeNmtokenDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"NMTOKEN", 0x12u, xmlSchemaTypeTokenDef);
            xmlSchemaTypeNCNameDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"NCName", 0x16u, xmlSchemaTypeNameDef);
            xmlSchemaTypeIdDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"ID", 0x17u, xmlSchemaTypeNCNameDef);
            xmlSchemaTypeIdrefDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"IDREF", 0x18u, xmlSchemaTypeNCNameDef);
            xmlSchemaTypeEntityDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"ENTITY", 0x1Au, xmlSchemaTypeNCNameDef);
            xmlSchemaTypeEntitiesDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"ENTITIES", 0x1Bu, xmlSchemaTypeAnySimpleTypeDef);
            *(_QWORD *)(xmlSchemaTypeEntitiesDef + 56) = xmlSchemaTypeEntityDef;
            xmlSchemaTypeIdrefsDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"IDREFS", 0x19u, xmlSchemaTypeAnySimpleTypeDef);
            *(_QWORD *)(xmlSchemaTypeIdrefsDef + 56) = xmlSchemaTypeIdrefDef;
            xmlSchemaTypeNmtokensDef = (uint64_t)xmlSchemaInitBasicType((const xmlChar *)"NMTOKENS", 0x13u, xmlSchemaTypeAnySimpleTypeDef);
            *(_QWORD *)(xmlSchemaTypeNmtokensDef + 56) = xmlSchemaTypeNmtokenDef;
            xmlSchemaTypesInitialized = 1;
            return;
          }
          v10 = "could not create an attribute wildcard on anyType";
        }
        else
        {
          v10 = "allocating wildcard component";
        }
      }
      else
      {
        v10 = "allocating model group component";
      }
      __xmlSimpleError(0xFu, 2, 0, 0, (const xmlChar *)v10);
    }
  }
}

int *xmlSchemaInitBasicType(const xmlChar *a1, unsigned int a2, uint64_t a3)
{
  int *v6;
  int *v7;
  int v8;
  xmlSchemaFacetPtr v9;
  _QWORD *v10;
  _OWORD *v11;

  v6 = (int *)xmlMalloc(0xE0uLL);
  v7 = v6;
  if (v6)
  {
    *(_OWORD *)v6 = 0u;
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 12) = 0u;
    *((_OWORD *)v6 + 13) = 0u;
    *((_OWORD *)v6 + 10) = 0u;
    *((_OWORD *)v6 + 11) = 0u;
    *((_OWORD *)v6 + 8) = 0u;
    *((_OWORD *)v6 + 9) = 0u;
    *((_OWORD *)v6 + 6) = 0u;
    *((_OWORD *)v6 + 7) = 0u;
    *((_OWORD *)v6 + 4) = 0u;
    *((_OWORD *)v6 + 5) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *((_OWORD *)v6 + 3) = 0u;
    *((_QWORD *)v6 + 2) = a1;
    *((_QWORD *)v6 + 26) = "http://www.w3.org/2001/XMLSchema";
    *v6 = 1;
    *((_QWORD *)v6 + 14) = a3;
    v6[23] = 6;
    if (a2 <= 0x2E)
    {
      if (((1 << a2) & 0x18003020FFFALL) != 0)
      {
        v8 = v6[22] | 0x4000;
        v6[22] = v8;
        if (a2 <= 0x1B && ((1 << a2) & 0xA080000) != 0)
          goto LABEL_6;
        goto LABEL_13;
      }
      if (((1 << a2) & 0xA080000) != 0)
      {
LABEL_6:
        v6[22] |= 0x40u;
        v9 = xmlSchemaNewFacet();
        v10 = v9;
        if (v9)
        {
          v9->type = XML_SCHEMA_FACET_MINLENGTH;
          v11 = xmlMalloc(0x30uLL);
          if (v11)
          {
            v11[1] = 0u;
            v11[2] = 0u;
            *v11 = 0u;
            *(_DWORD *)v11 = 33;
            v10[7] = v11;
            *((_QWORD *)v11 + 2) = 1;
          }
          else
          {
            v10[7] = 0;
            xmlFree(v10);
            v10 = 0;
          }
        }
        *((_QWORD *)v7 + 15) = v10;
        v7[22] |= 0x8000000u;
        a1 = (const xmlChar *)*((_QWORD *)v7 + 2);
        goto LABEL_16;
      }
      if (((1 << a2) & 0x600000000000) != 0)
      {
LABEL_16:
        xmlHashAddEntry2((xmlHashTablePtr)xmlSchemaTypesBank, a1, (const xmlChar *)"http://www.w3.org/2001/XMLSchema", v7);
        v7[40] = a2;
        return v7;
      }
    }
    v8 = v6[22];
LABEL_13:
    v6[22] = v8 | 0x100;
    goto LABEL_16;
  }
  __xmlSimpleError(0xFu, 2, 0, 0, (const xmlChar *)"could not initialize basic types");
  return v7;
}

_OWORD *xmlSchemaAddParticle_0()
{
  _OWORD *v0;
  _OWORD *v1;

  v0 = xmlMalloc(0x30uLL);
  v1 = v0;
  if (v0)
  {
    v0[1] = 0u;
    v0[2] = 0u;
    *v0 = 0u;
    *(_DWORD *)v0 = 25;
    *((_QWORD *)v0 + 4) = 0x100000001;
  }
  else
  {
    __xmlSimpleError(0xFu, 2, 0, 0, (const xmlChar *)"allocating particle component");
  }
  return v1;
}

void xmlSchemaCleanupTypes(void)
{
  void **v0;

  if (xmlSchemaTypesInitialized == 1)
  {
    xmlSchemaFreeWildcard(*(xmlSchemaWildcardPtr *)(xmlSchemaTypeAnyTypeDef + 152));
    v0 = *(void ***)(xmlSchemaTypeAnyTypeDef + 56);
    xmlSchemaFreeWildcard(*(xmlSchemaWildcardPtr *)(*((_QWORD *)v0[3] + 3) + 24));
    xmlFree(*((void **)v0[3] + 3));
    xmlFree(v0[3]);
    xmlFree(v0);
    *(_QWORD *)(xmlSchemaTypeAnyTypeDef + 56) = 0;
    xmlHashFree((xmlHashTablePtr)xmlSchemaTypesBank, (xmlHashDeallocator)xmlSchemaFreeTypeEntry);
    xmlSchemaTypesInitialized = 0;
  }
}

int xmlSchemaIsBuiltInTypeFacet(xmlSchemaTypePtr type, int facetType)
{
  int result;
  BOOL v4;

  if (!type || type->type != XML_SCHEMA_TYPE_BASIC)
    return -1;
  result = 0;
  switch(type->builtInType)
  {
    case 1:
    case 0x15:
    case 0x1C:
    case 0x1D:
    case 0x2B:
    case 0x2C:
      v4 = (facetType - 1006) >= 6;
      goto LABEL_8;
    case 3:
      v4 = (facetType - 1000) >= 9;
LABEL_8:
      result = !v4;
      break;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
      if ((facetType - 1000) > 8)
        result = 0;
      else
        result = dword_1B0862DF0[facetType - 1000];
      break;
    case 0xF:
      result = ((facetType - 1006) & 0xFFFFFFFD) == 0;
      break;
    default:
      return result;
  }
  return result;
}

xmlSchemaTypePtr xmlSchemaGetBuiltInType(xmlSchemaValType type)
{
  xmlSchemaTypePtr result;

  if ((xmlSchemaTypesInitialized & 1) == 0)
    xmlSchemaInitTypes();
  switch(type)
  {
    case XML_SCHEMAS_STRING:
      result = (xmlSchemaTypePtr)xmlSchemaTypeStringDef;
      break;
    case XML_SCHEMAS_NORMSTRING:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNormStringDef;
      break;
    case XML_SCHEMAS_DECIMAL:
      result = (xmlSchemaTypePtr)xmlSchemaTypeDecimalDef;
      break;
    case XML_SCHEMAS_TIME:
      result = (xmlSchemaTypePtr)xmlSchemaTypeTimeDef;
      break;
    case XML_SCHEMAS_GDAY:
      result = (xmlSchemaTypePtr)xmlSchemaTypeGDayDef;
      break;
    case XML_SCHEMAS_GMONTH:
      result = (xmlSchemaTypePtr)xmlSchemaTypeGMonthDef;
      break;
    case XML_SCHEMAS_GMONTHDAY:
      result = (xmlSchemaTypePtr)xmlSchemaTypeGMonthDayDef;
      break;
    case XML_SCHEMAS_GYEAR:
      result = (xmlSchemaTypePtr)xmlSchemaTypeGYearDef;
      break;
    case XML_SCHEMAS_GYEARMONTH:
      result = (xmlSchemaTypePtr)xmlSchemaTypeGYearMonthDef;
      break;
    case XML_SCHEMAS_DATE:
      result = (xmlSchemaTypePtr)xmlSchemaTypeDateDef;
      break;
    case XML_SCHEMAS_DATETIME:
      result = (xmlSchemaTypePtr)xmlSchemaTypeDatetimeDef;
      break;
    case XML_SCHEMAS_DURATION:
      result = (xmlSchemaTypePtr)xmlSchemaTypeDurationDef;
      break;
    case XML_SCHEMAS_FLOAT:
      result = (xmlSchemaTypePtr)xmlSchemaTypeFloatDef;
      break;
    case XML_SCHEMAS_DOUBLE:
      result = (xmlSchemaTypePtr)xmlSchemaTypeDoubleDef;
      break;
    case XML_SCHEMAS_BOOLEAN:
      result = (xmlSchemaTypePtr)xmlSchemaTypeBooleanDef;
      break;
    case XML_SCHEMAS_TOKEN:
      result = (xmlSchemaTypePtr)xmlSchemaTypeTokenDef;
      break;
    case XML_SCHEMAS_LANGUAGE:
      result = (xmlSchemaTypePtr)xmlSchemaTypeLanguageDef;
      break;
    case XML_SCHEMAS_NMTOKEN:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNmtokenDef;
      break;
    case XML_SCHEMAS_NMTOKENS:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNmtokensDef;
      break;
    case XML_SCHEMAS_NAME:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNameDef;
      break;
    case XML_SCHEMAS_QNAME:
      result = (xmlSchemaTypePtr)xmlSchemaTypeQNameDef;
      break;
    case XML_SCHEMAS_NCNAME:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNCNameDef;
      break;
    case XML_SCHEMAS_ID:
      result = (xmlSchemaTypePtr)xmlSchemaTypeIdDef;
      break;
    case XML_SCHEMAS_IDREF:
      result = (xmlSchemaTypePtr)xmlSchemaTypeIdrefDef;
      break;
    case XML_SCHEMAS_IDREFS:
      result = (xmlSchemaTypePtr)xmlSchemaTypeIdrefsDef;
      break;
    case XML_SCHEMAS_ENTITY:
      result = (xmlSchemaTypePtr)xmlSchemaTypeEntityDef;
      break;
    case XML_SCHEMAS_ENTITIES:
      result = (xmlSchemaTypePtr)xmlSchemaTypeEntitiesDef;
      break;
    case XML_SCHEMAS_NOTATION:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNotationDef;
      break;
    case XML_SCHEMAS_ANYURI:
      result = (xmlSchemaTypePtr)xmlSchemaTypeAnyURIDef;
      break;
    case XML_SCHEMAS_INTEGER:
      result = (xmlSchemaTypePtr)xmlSchemaTypeIntegerDef;
      break;
    case XML_SCHEMAS_NPINTEGER:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNonPositiveIntegerDef;
      break;
    case XML_SCHEMAS_NINTEGER:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNegativeIntegerDef;
      break;
    case XML_SCHEMAS_NNINTEGER:
      result = (xmlSchemaTypePtr)xmlSchemaTypeNonNegativeIntegerDef;
      break;
    case XML_SCHEMAS_PINTEGER:
      result = (xmlSchemaTypePtr)xmlSchemaTypePositiveIntegerDef;
      break;
    case XML_SCHEMAS_INT:
      result = (xmlSchemaTypePtr)xmlSchemaTypeIntDef;
      break;
    case XML_SCHEMAS_UINT:
      result = (xmlSchemaTypePtr)xmlSchemaTypeUnsignedIntDef;
      break;
    case XML_SCHEMAS_LONG:
      result = (xmlSchemaTypePtr)xmlSchemaTypeLongDef;
      break;
    case XML_SCHEMAS_ULONG:
      result = (xmlSchemaTypePtr)xmlSchemaTypeUnsignedLongDef;
      break;
    case XML_SCHEMAS_SHORT:
      result = (xmlSchemaTypePtr)xmlSchemaTypeShortDef;
      break;
    case XML_SCHEMAS_USHORT:
      result = (xmlSchemaTypePtr)xmlSchemaTypeUnsignedShortDef;
      break;
    case XML_SCHEMAS_BYTE:
      result = (xmlSchemaTypePtr)xmlSchemaTypeByteDef;
      break;
    case XML_SCHEMAS_UBYTE:
      result = (xmlSchemaTypePtr)xmlSchemaTypeUnsignedByteDef;
      break;
    case XML_SCHEMAS_HEXBINARY:
      result = (xmlSchemaTypePtr)xmlSchemaTypeHexBinaryDef;
      break;
    case XML_SCHEMAS_BASE64BINARY:
      result = (xmlSchemaTypePtr)xmlSchemaTypeBase64BinaryDef;
      break;
    case XML_SCHEMAS_ANYTYPE:
      result = (xmlSchemaTypePtr)xmlSchemaTypeAnyTypeDef;
      break;
    case XML_SCHEMAS_ANYSIMPLETYPE:
      result = (xmlSchemaTypePtr)xmlSchemaTypeAnySimpleTypeDef;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

int xmlSchemaValueAppend(xmlSchemaValPtr prev, xmlSchemaValPtr cur)
{
  int result;

  result = -1;
  if (prev)
  {
    if (cur)
    {
      result = 0;
      *((_QWORD *)prev + 1) = cur;
    }
  }
  return result;
}

xmlSchemaValPtr xmlSchemaValueGetNext(xmlSchemaValPtr cur)
{
  if (cur)
    return (xmlSchemaValPtr)*((_QWORD *)cur + 1);
  return cur;
}

const xmlChar *__cdecl xmlSchemaValueGetAsString(const xmlChar *val)
{
  if (val)
  {
    if (*(_DWORD *)val > 0x2Eu || ((1 << *(_DWORD *)val) & 0x400025D70006) == 0)
      return 0;
    else
      return (const xmlChar *)*((_QWORD *)val + 2);
  }
  return val;
}

int xmlSchemaValueGetAsBoolean(xmlSchemaValPtr val)
{
  if (val)
  {
    if (*(_DWORD *)val == 15)
      LODWORD(val) = *((_DWORD *)val + 4);
    else
      LODWORD(val) = 0;
  }
  return (int)val;
}

xmlSchemaValPtr xmlSchemaNewStringValue(xmlSchemaValType type, const xmlChar *value)
{
  xmlSchemaValPtr result;

  if (type != XML_SCHEMAS_STRING)
    return 0;
  result = (xmlSchemaValPtr)xmlMalloc(0x30uLL);
  if (result)
  {
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_DWORD *)result = 1;
    *((_QWORD *)result + 2) = value;
  }
  return result;
}

xmlSchemaValPtr xmlSchemaNewNOTATIONValue(const xmlChar *name, const xmlChar *ns)
{
  xmlSchemaValPtr result;

  result = (xmlSchemaValPtr)xmlMalloc(0x30uLL);
  if (result)
  {
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_DWORD *)result = 28;
    *((_QWORD *)result + 2) = name;
    if (ns)
      *((_QWORD *)result + 3) = ns;
  }
  return result;
}

double xmlSchemaNewValue(int a1)
{
  _OWORD *v2;
  double result;

  v2 = xmlMalloc(0x30uLL);
  if (v2)
  {
    result = 0.0;
    v2[1] = 0u;
    v2[2] = 0u;
    *v2 = 0u;
    *(_DWORD *)v2 = a1;
  }
  return result;
}

xmlSchemaValPtr xmlSchemaNewQNameValue(const xmlChar *namespaceName, const xmlChar *localName)
{
  xmlSchemaValPtr result;

  result = (xmlSchemaValPtr)xmlMalloc(0x30uLL);
  if (result)
  {
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_DWORD *)result = 21;
    *((_QWORD *)result + 2) = localName;
    *((_QWORD *)result + 3) = namespaceName;
  }
  return result;
}

void xmlSchemaFreeValue(xmlSchemaValPtr val)
{
  xmlSchemaValPtr v1;
  void *v2;
  xmlSchemaVal *v3;
  void *v4;

  if (val)
  {
    v1 = val;
    do
    {
      switch(*(_DWORD *)v1)
      {
        case 1:
        case 2:
        case 0x10:
        case 0x11:
        case 0x12:
        case 0x13:
        case 0x14:
        case 0x16:
        case 0x17:
        case 0x18:
        case 0x19:
        case 0x1A:
        case 0x1B:
        case 0x1D:
        case 0x2B:
        case 0x2C:
        case 0x2E:
          goto LABEL_4;
        case 0x15:
        case 0x1C:
          v4 = (void *)*((_QWORD *)v1 + 3);
          if (v4)
            xmlFree(v4);
LABEL_4:
          v2 = (void *)*((_QWORD *)v1 + 2);
          if (v2)
            xmlFree(v2);
          break;
        default:
          break;
      }
      v3 = (xmlSchemaVal *)*((_QWORD *)v1 + 1);
      xmlFree(v1);
      v1 = v3;
    }
    while (v3);
  }
}

xmlSchemaTypePtr xmlSchemaGetPredefinedType(const xmlChar *name, const xmlChar *ns)
{
  if ((xmlSchemaTypesInitialized & 1) == 0)
    xmlSchemaInitTypes();
  if (name)
    return (xmlSchemaTypePtr)xmlHashLookup2((xmlHashTablePtr)xmlSchemaTypesBank, name, ns);
  else
    return 0;
}

xmlSchemaTypePtr xmlSchemaGetBuiltInListSimpleTypeItemType(xmlSchemaTypePtr type)
{
  int builtInType;

  if (type)
  {
    if (type->type != XML_SCHEMA_TYPE_BASIC)
      return 0;
    builtInType = type->builtInType;
    switch(builtInType)
    {
      case 27:
        return (xmlSchemaTypePtr)xmlSchemaTypeEntityDef;
      case 25:
        return (xmlSchemaTypePtr)xmlSchemaTypeIdrefDef;
      case 19:
        return (xmlSchemaTypePtr)xmlSchemaTypeNmtokenDef;
      default:
        return 0;
    }
  }
  return type;
}

xmlChar *__cdecl xmlSchemaWhiteSpaceReplace(xmlChar *value)
{
  uint64_t i;
  int v2;
  xmlChar *v3;
  unsigned int v4;
  unsigned int v5;

  if (value)
  {
    for (i = 0; ; ++i)
    {
      v2 = value[i];
      if ((v2 - 9) < 2)
        break;
      if (!value[i])
        return 0;
      if (v2 == 13)
        break;
    }
    value = xmlStrdup(value);
    v3 = &value[i + 1];
    v4 = value[i];
    do
    {
      if (v4 <= 0xD && ((1 << v4) & 0x2600) != 0)
        *(v3 - 1) = 32;
      v5 = *v3++;
      v4 = v5;
    }
    while (v5);
  }
  return value;
}

xmlChar *__cdecl xmlSchemaCollapseString(xmlChar *value)
{
  uint64_t i;
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  xmlChar *v6;
  xmlChar *v8;
  xmlChar *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  xmlChar *v13;
  xmlChar *v14;
  unsigned __int8 *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;

  if (!value)
    return value;
  for (i = 0; ; ++i)
  {
    v2 = value[i];
    if (v2 > 0x20 || ((1 << v2) & 0x100002600) == 0)
      break;
  }
  v4 = 0;
  v5 = 0;
  v6 = &value[i];
  while (1)
  {
    if (v2 <= 0x1Fu)
    {
      if (v2 - 9 < 2)
        break;
      if (!(_BYTE)v2)
        goto LABEL_33;
      if (v2 == 13)
        break;
LABEL_19:
      LOBYTE(v2) = value[v5 + 1 + i];
      goto LABEL_20;
    }
    if (v2 != 32)
      goto LABEL_19;
    v2 = value[v5 + 1 + i];
    if (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0)
      break;
LABEL_20:
    ++v5;
    v4 += 0x100000000;
  }
  if ((_DWORD)v5)
  {
    value = xmlStrdup(&value[i]);
    if (!value)
      return value;
    v8 = &value[v4 >> 32];
    v9 = v8;
LABEL_24:
    while (2)
    {
      v10 = *v8;
      if (v10 <= 0x20)
      {
        if (((1 << v10) & 0x100002600) != 0)
        {
          while (1)
          {
            v12 = *++v8;
            v11 = v12;
            if (v12 > 0x20)
              break;
            if (((1 << v11) & 0x100002600) == 0)
            {
              if (!v11)
                goto LABEL_24;
              break;
            }
          }
          LOBYTE(v10) = 32;
          goto LABEL_32;
        }
        if (!*v8)
        {
          *v9 = 0;
          return value;
        }
      }
      ++v8;
LABEL_32:
      *v9++ = v10;
      continue;
    }
  }
LABEL_33:
  v13 = &value[i + v5];
  v14 = v13 - 1;
  v15 = v13;
  if (v13 - 1 > v6)
  {
    do
    {
      v16 = *v14;
      v17 = v16 > 0x20;
      v18 = (1 << v16) & 0x100002600;
      if (v17 || v18 == 0)
        break;
      --v14;
    }
    while (v14 > v6);
    v15 = v14 + 1;
  }
  if (i || v13 != v15)
    return xmlStrndup(&value[i], (int)v15 - (int)value - (int)i);
  else
    return 0;
}

int xmlSchemaValPredefTypeNode(xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val, xmlNodePtr node)
{
  return xmlSchemaValAtomicType((uint64_t)type, (char *)value, (xmlChar **)val, (uint64_t)node, 0, 1, 0);
}

uint64_t xmlSchemaValAtomicType(uint64_t a1, char *a2, xmlChar **a3, uint64_t a4, int a5, int a6, int a7)
{
  int v14;
  BOOL v15;
  xmlChar *v16;
  int v17;
  xmlChar *i;
  unsigned int v19;
  uint64_t v20;
  _OWORD *v22;
  _OWORD *v23;
  int v24;
  int v25;
  int v26;
  xmlChar *v27;
  unsigned int v28;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  BOOL v35;
  xmlChar **v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  BOOL v41;
  int v42;
  xmlChar *v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  xmlChar *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  BOOL v58;
  _BOOL4 v59;
  _DWORD *v60;
  char *k;
  unsigned int v62;
  int v64;
  int v65;
  int v66;
  uint64_t v67;
  double *v68;
  char *v69;
  int v70;
  int v71;
  unsigned __int8 *v72;
  unsigned int v73;
  unsigned int v75;
  unsigned int v76;
  int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  xmlChar *v81;
  unsigned int v82;
  uint64_t v83;
  _OWORD *v84;
  unsigned int v85;
  xmlChar *v87;
  xmlNsPtr v88;
  xmlFreeFunc v89;
  uint64_t v90;
  uint64_t v91;
  xmlChar *v92;
  xmlChar *v93;
  xmlDoc *v94;
  xmlChar *v95;
  unsigned int v96;
  int v97;
  xmlChar v98;
  unsigned int v99;
  char *v100;
  int v101;
  int v102;
  int v103;
  __int16 v104;
  xmlChar **v105;
  BOOL v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  const xmlChar *v111;
  xmlChar *v112;
  unsigned int v113;
  _BYTE *v114;
  unsigned int v115;
  uint64_t v116;
  xmlChar *v117;
  uint64_t v118;
  _OWORD *v119;
  xmlChar *v120;
  uint64_t v121;
  uint64_t v122;
  xmlChar *v123;
  xmlChar *v124;
  xmlDoc *v125;
  xmlChar *v126;
  xmlIDPtr v127;
  uint64_t v128;
  xmlChar *v129;
  const xmlDoc *v130;
  xmlEntityPtr DocEntity;
  uint64_t v132;
  xmlChar *v133;
  xmlNsPtr v134;
  xmlChar *v135;
  const char *v136;
  char *v137;
  unsigned __int8 v138;
  unsigned __int8 *v139;
  int v140;
  xmlURI *v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v145;
  int v146;
  char *v147;
  char v148;
  uint64_t v149;
  xmlChar *v150;
  xmlChar *v151;
  xmlChar *v152;
  unsigned int v153;
  xmlChar *v154;
  int v155;
  int v156;
  unint64_t v157;
  unint64_t v158;
  BOOL v159;
  int v160;
  BOOL v161;
  _DWORD *v162;
  __int16 v163;
  uint64_t v164;
  int v165;
  unint64_t v166;
  unint64_t v167;
  __int16 v168;
  uint64_t v169;
  __int16 v170;
  int v171;
  uint64_t v172;
  xmlChar *v173;
  xmlChar *v174;
  xmlChar v175;
  unsigned __int8 *v176;
  int v177;
  int v178;
  unsigned int v179;
  int v180;
  uint64_t v181;
  int v182;
  int v183;
  int v184;
  uint64_t v185;
  int v186;
  xmlChar **v187;
  unsigned int v188;
  uint64_t m;
  int v190;
  unsigned __int8 *v191;
  int v192;
  unsigned int v193;
  unsigned __int8 *v194;
  unsigned int v195;
  uint64_t v196;
  double v197;
  int v198;
  unint64_t v199;
  int v201;
  uint64_t v202;
  unint64_t v203;
  xmlChar **v204;
  BOOL v205;
  uint64_t v206;
  unint64_t v207;
  uint64_t v208;
  xmlDoc *v209;
  int v210;
  _OWORD *v211;
  _OWORD *v212;
  const xmlChar *href;
  uint64_t v214;
  int v215;
  xmlEntityType etype;
  _BOOL4 v217;
  _BOOL4 v218;
  xmlGenericErrorFunc v219;
  void **v220;
  double *v221;
  _OWORD *v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  unsigned int v226;
  uint64_t v227;
  double v228;
  unsigned int v229;
  uint64_t v231;
  uint64_t v232;
  xmlChar **v233;
  int v234;
  __int16 v235;
  float v236;
  xmlChar *v238;
  int v239;
  int v240;
  int v241;
  xmlChar *j;
  unsigned int v243;
  uint64_t v245;
  unsigned int v246;
  uint64_t v247;
  unint64_t v248;
  BOOL v249;
  _BOOL4 v250;
  BOOL v251;
  _DWORD *v252;
  double v253;
  __int128 v254;
  xmlChar **v255;
  xmlChar *prefix[3];
  char v257;
  uint64_t v258;

  v258 = *MEMORY[0x1E0C80C00];
  if ((xmlSchemaTypesInitialized & 1) == 0)
    xmlSchemaInitTypes();
  if (!a1)
    return 0xFFFFFFFFLL;
  if (!a2)
    a2 = &byte_1B0865C1A;
  if (a3)
    *a3 = 0;
  if (a5 || ((v14 = *(_DWORD *)(a1 + 160), (v14 - 45) >= 2) ? (v15 = v14 == 1) : (v15 = 1), v15))
  {
    v16 = 0;
  }
  else
  {
    if (v14 == 2)
      v27 = xmlSchemaWhiteSpaceReplace((const xmlChar *)a2);
    else
      v27 = xmlSchemaCollapseString((const xmlChar *)a2);
    v16 = v27;
    if (v27)
      a2 = (char *)v27;
  }
  v17 = *(_DWORD *)(a1 + 160);
  switch(v17)
  {
    case 0:
      goto LABEL_599;
    case 1:
      if (!a3 || !a7)
        goto LABEL_631;
      xmlSchemaNewValue(1);
      if (!v108)
        goto LABEL_599;
      v109 = v108;
      if (v16)
        v110 = a6 == 0;
      else
        v110 = 1;
      if (v110)
        v111 = (const xmlChar *)a2;
      else
        v111 = v16;
      goto LABEL_299;
    case 2:
      if (a6)
      {
        v112 = xmlSchemaWhiteSpaceReplace((const xmlChar *)a2);
        v16 = v112;
        if (v112)
          a2 = (char *)v112;
      }
      if (!a3)
        goto LABEL_631;
      v64 = 2;
      goto LABEL_297;
    case 3:
      memset(prefix, 0, sizeof(prefix));
      v257 = 0;
      v255 = prefix;
      v113 = *a2;
      if (!*a2)
        goto LABEL_625;
      v114 = a2 + 1;
      while (2)
      {
        if (v113 > 0x2D)
          goto LABEL_409;
        if (((1 << v113) & 0x100002600) != 0)
        {
          v115 = *v114++;
          v113 = v115;
          continue;
        }
        break;
      }
      if (v113 == 43)
      {
        v163 = 0;
      }
      else if (v113 == 45)
      {
        v163 = 1;
      }
      else
      {
LABEL_409:
        v163 = 0;
        --v114;
      }
      v182 = *v114;
      if (!*v114)
        goto LABEL_625;
      v183 = 0;
      while (v182 == 48)
      {
        v184 = *++v114;
        v182 = v184;
        v183 = 1;
      }
      if (!v182)
      {
        LODWORD(v185) = 0;
        v186 = -1;
        v187 = prefix;
        goto LABEL_606;
      }
      v185 = 0;
      while (1)
      {
        v190 = v114[v185];
        if ((v190 - 48) > 9)
          break;
        *((_BYTE *)prefix + v185) = v190;
        v255 = (xmlChar **)((char *)prefix + ++v185);
        if ((_DWORD)v185 == 24)
        {
          v187 = (xmlChar **)((char *)prefix + v185);
          v114 += v185;
          v186 = -1;
LABEL_546:
          LODWORD(v185) = 24;
          goto LABEL_606;
        }
      }
      v114 += v185;
      if (v190 == 46)
      {
        ++v114;
        v214 = v185;
        while (1)
        {
          v215 = *v114;
          if ((v215 - 48) > 9)
            break;
          ++v114;
          *((_BYTE *)prefix + v214) = v215;
          v255 = (xmlChar **)((char *)prefix + ++v214);
          if ((_DWORD)v214 == 24)
          {
            v187 = (xmlChar **)((char *)prefix + v214);
            v186 = v185;
            goto LABEL_546;
          }
        }
        if ((((_DWORD)v214 == 0) & ~v183) != 0)
          goto LABEL_625;
        v187 = (xmlChar **)((char *)prefix + v214);
        v186 = v185;
        LODWORD(v185) = v214;
      }
      else
      {
        v187 = (xmlChar **)((char *)prefix + v185);
        v186 = -1;
      }
LABEL_606:
      while (1)
      {
        v229 = *v114;
        if (v229 > 0x20 || ((1 << v229) & 0x100002600) == 0)
          break;
        ++v114;
      }
      if (a3 && !*v114)
      {
        xmlSchemaNewValue(3);
        if (v231)
        {
          v232 = v231;
          if (!(_DWORD)v185)
            goto LABEL_628;
          if (v186 == -1 || (_DWORD)v185 == v186)
            goto LABEL_622;
          v233 = v187;
          while (1)
          {
            v234 = *((unsigned __int8 *)v233 - 1);
            v233 = (xmlChar **)((char *)v233 - 1);
            if (v234 != 48)
              break;
            LODWORD(v185) = v185 - 1;
            v187 = v233;
            if (v186 == (_DWORD)v185)
            {
              v187 = v233;
              LODWORD(v185) = v186;
              break;
            }
          }
          if ((_DWORD)v185)
          {
LABEL_622:
            *(_BYTE *)v187 = 0;
            v255 = prefix;
            xmlSchemaParseUInt((unsigned __int8 **)&v255, (uint64_t *)(v231 + 16), (uint64_t *)(v231 + 24), (uint64_t *)(v231 + 32));
            if (v186 == -1)
              v235 = ((_WORD)v185 << 8) | v163 & 0xFF01;
            else
              v235 = ((_WORD)v185 << 8) | v163 & 0xFF01 | (2 * (((_BYTE)v185 - (_BYTE)v186) & 0x7F));
          }
          else
          {
LABEL_628:
            v235 = v163 | *(_WORD *)(v231 + 44) & 0xFE | 0x100;
          }
          *(_WORD *)(v232 + 44) = v235;
          *a3 = (xmlChar *)v232;
        }
        goto LABEL_631;
      }
      if (!*v114)
        goto LABEL_631;
      goto LABEL_625;
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      for (i = (xmlChar *)a2; ; ++i)
      {
        prefix[0] = i;
        v19 = *i;
        v58 = v19 > 0x20;
        v20 = (1 << v19) & 0x100002600;
        if (v58 || v20 == 0)
          break;
      }
      v22 = xmlMalloc(0x30uLL);
      if (!v22)
      {
        v38 = 0xFFFFFFFFLL;
        goto LABEL_656;
      }
      v23 = v22;
      v22[1] = 0u;
      v22[2] = 0u;
      *v22 = 0u;
      *(_DWORD *)v22 = 0;
      v24 = *i;
      if (v24 == 45)
      {
        if (i[1] == 45)
        {
          prefix[0] = i + 2;
          if (i[2] == 45)
          {
            if (v17 == 6)
              goto LABEL_649;
            prefix[0] = i + 3;
            if (_xmlSchemaParseGDay((uint64_t)(v22 + 1), prefix))
              goto LABEL_649;
            v25 = *prefix[0];
            if ((v25 - 43) > 0x2F || ((1 << (v25 - 43)) & 0x800000000005) == 0)
            {
              if (*prefix[0])
                goto LABEL_649;
            }
            if (_xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix) || *prefix[0])
              goto LABEL_649;
            v26 = 5;
            goto LABEL_647;
          }
          if (!_xmlSchemaParseGMonth((uint64_t)(v22 + 1), prefix))
          {
            v154 = prefix[0];
            v155 = *prefix[0];
            if (v155 != 45)
              goto LABEL_641;
            ++prefix[0];
            if (_xmlSchemaParseGDay((uint64_t)(v23 + 1), prefix)
              || (v156 = *prefix[0], v156 == 58)
              || ((v157 = 0x8F5C28F5C28F5C29 * *((_QWORD *)v23 + 2),
                   v158 = __ROR8__(v157 + 0x51EB851EB851EB8, 2),
                   (v23[1] & 3) == 0)
                ? (v159 = v158 > 0x28F5C28F5C28F5CLL)
                : (v159 = 0),
                  !v159 ? (v160 = 0) : (v160 = 1),
                  __ROR8__(v157 + 0x51EB851EB851EB0, 4) >= 0xA3D70A3D70A3D7uLL ? (v161 = v160 == 0) : (v161 = 0),
                  v161 ? (v162 = &daysInMonth) : (v162 = &daysInMonthLeap),
                  ((*((_DWORD *)v23 + 6) >> 4) & 0x1Fu) > v162[(*((_DWORD *)v23 + 6) & 0xF) - 1]))
            {
              prefix[0] = v154;
              v155 = *v154;
LABEL_641:
              if (((v155 - 43) > 0x2F || ((1 << (v155 - 43)) & 0x800000000005) == 0)
                && v155
                || _xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix)
                || *prefix[0])
              {
                goto LABEL_649;
              }
              v26 = 6;
              goto LABEL_647;
            }
            if (((v156 - 43) > 0x2F || ((1 << (v156 - 43)) & 0x800000000005) == 0)
              && *prefix[0]
              || _xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix)
              || *prefix[0])
            {
              goto LABEL_649;
            }
            v26 = 7;
LABEL_647:
            *(_DWORD *)v23 = v26;
            if (v17 && v26 != v17)
              goto LABEL_649;
            if (a3)
              goto LABEL_652;
            xmlSchemaFreeValue((xmlSchemaValPtr)v23);
            goto LABEL_655;
          }
          goto LABEL_649;
        }
      }
      else if ((v24 - 48) <= 9 && !_xmlSchemaParseTime((uint64_t)(v22 + 1), prefix))
      {
        v39 = *prefix[0];
        v40 = (v39 - 43) > 0x2F || ((1 << (v39 - 43)) & 0x800000000005) == 0;
        v41 = !v40 || v39 == 0;
        if (v41 && !_xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix))
        {
          if (!*prefix[0])
          {
            v26 = 4;
            goto LABEL_647;
          }
          goto LABEL_649;
        }
      }
      prefix[0] = (xmlChar *)a2;
      v42 = *a2;
      if ((v42 - 58) > 0xFFFFFFF5 || v42 == 45 || v42 == 43)
      {
        v43 = (xmlChar *)(v42 == 45 ? a2 + 1 : a2);
        v44 = *v43;
        if ((v44 - 48) <= 9)
        {
          v45 = (uint64_t *)(v23 + 1);
          v46 = *((_QWORD *)v23 + 2);
          v47 = -1;
          v48 = v43;
          do
          {
            if (v46 > 0xCCCCCCCCCCCCCCCLL)
              goto LABEL_649;
            v49 = (v44 - 48);
            v50 = 10 * v46;
            *v45 = v50;
            if (v50 > (v49 ^ 0x7FFFFFFFFFFFFFFFLL))
              goto LABEL_649;
            v46 = v49 + v50;
            *v45 = v46;
            v51 = *++v48;
            v44 = v51;
            ++v47;
          }
          while ((v51 - 48) < 0xA);
          if (v47 >= 3 && (v47 == 3 || *v43 != 48))
          {
            if (v42 == 45)
            {
              v46 = -v46;
              *v45 = v46;
            }
            if (v46)
            {
              if ((prefix[0] = v48, v52 = *v48, (v52 - 43) <= 0x2F)
                && ((1 << (v52 - 43)) & 0x800000000005) != 0
                || !*v48)
              {
                if (_xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix))
                {
                  if (*prefix[0] != 45)
                    goto LABEL_649;
                  ++prefix[0];
                  if (_xmlSchemaParseGMonth((uint64_t)(v23 + 1), prefix))
                    goto LABEL_649;
                  v53 = *prefix[0];
                  if ((v53 - 43) > 0x2F || ((1 << (v53 - 43)) & 0x800000000005) == 0)
                  {
                    if (*prefix[0])
                      goto LABEL_649;
                  }
                  if (_xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix))
                  {
                    if (*prefix[0] != 45)
                      goto LABEL_649;
                    ++prefix[0];
                    if (_xmlSchemaParseGDay((uint64_t)(v23 + 1), prefix))
                      goto LABEL_649;
                    v54 = *v45;
                    if (!*v45)
                      goto LABEL_649;
                    v55 = (*((_DWORD *)v23 + 6) & 0xFu) - 1;
                    if (v55 > 0xB)
                      goto LABEL_649;
                    v56 = 0x8F5C28F5C28F5C29 * v54;
                    v57 = __ROR8__(0x8F5C28F5C28F5C29 * v54 + 0x51EB851EB851EB8, 2);
                    v58 = (*v45 & 3) == 0 && v57 > 0x28F5C28F5C28F5CLL;
                    v59 = v58;
                    v60 = __ROR8__(v56 + 0x51EB851EB851EB0, 4) < 0xA3D70A3D70A3D7uLL || v59
                        ? &daysInMonthLeap
                        : &daysInMonth;
                    if (((*((_DWORD *)v23 + 6) >> 4) & 0x1Fu) > v60[v55])
                      goto LABEL_649;
                    v238 = prefix[0];
                    v239 = *prefix[0];
                    if (((v239 - 43) > 0x2F
                       || ((1 << (v239 - 43)) & 0x800000000005) == 0)
                      && *prefix[0]
                      || (v240 = _xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix),
                          v238 = prefix[0],
                          v239 = *prefix[0],
                          v240))
                    {
                      if (v239 != 84)
                        goto LABEL_649;
                      prefix[0] = v238 + 1;
                      if (_xmlSchemaParseTime((uint64_t)(v23 + 1), prefix))
                        goto LABEL_649;
                      v241 = _xmlSchemaParseTimeZone((uint64_t)(v23 + 1), prefix);
                      for (j = prefix[0] + 1; ; prefix[0] = j++)
                      {
                        v243 = *(j - 1);
                        if (v243 > 0x20 || ((1 << v243) & 0x100002600) == 0)
                          break;
                      }
                      if (v241 | v243)
                        goto LABEL_649;
                      v245 = *v45;
                      if (!*v45)
                        goto LABEL_649;
                      v246 = *((_DWORD *)v23 + 6);
                      v247 = (v246 & 0xF) - 1;
                      if (v247 > 0xB)
                        goto LABEL_649;
                      v248 = __ROR8__(0x8F5C28F5C28F5C29 * v245 + 0x51EB851EB851EB8, 2);
                      v249 = (v245 & 3) == 0 && v248 > 0x28F5C28F5C28F5CLL;
                      v250 = v249;
                      v251 = __ROR8__(0x8F5C28F5C28F5C29 * v245 + 0x51EB851EB851EB0, 4) >= 0xA3D70A3D70A3D7uLL
                          && !v250;
                      v252 = v251 ? &daysInMonth : &daysInMonthLeap;
                      if (((v246 >> 4) & 0x1F) > v252[v247])
                        goto LABEL_649;
                      if ((~v246 & 0x3000) == 0
                        || (v246 & 0xF0000) == 0xF0000
                        || (v253 = *((double *)v23 + 4), v253 < 0.0)
                        || v253 >= 60.0)
                      {
                        if ((v246 & 0xFFE00) != 0x3000 || *((double *)v23 + 4) != 0.0)
                          goto LABEL_649;
                      }
                      if ((unsigned __int16)((unsigned __int16)(8 * *((_WORD *)v23 + 20) + 13440) >> 4) > 0x690u)
                        goto LABEL_649;
                      v26 = 11;
                      goto LABEL_647;
                    }
                    if (!*prefix[0])
                    {
                      v26 = 10;
                      goto LABEL_647;
                    }
                  }
                  else if (!*prefix[0])
                  {
                    v26 = 9;
                    goto LABEL_647;
                  }
                }
                else if (!*prefix[0])
                {
                  v26 = 8;
                  goto LABEL_647;
                }
              }
            }
          }
        }
      }
LABEL_649:
      xmlSchemaFreeValue((xmlSchemaValPtr)v23);
      goto LABEL_650;
    case 12:
      v38 = xmlSchemaValidateDuration((unsigned __int8 *)a2, a3);
      goto LABEL_656;
    case 13:
    case 14:
      for (k = a2; ; ++k)
      {
        v62 = *k;
        if (v62 > 0x20 || ((1 << v62) & 0x100002600) == 0)
          break;
      }
      if (v62 == 78 && k[1] == 97 && k[2] == 78)
      {
        v65 = k[3];
        if (k[3])
          v66 = 7;
        else
          v66 = 4;
        if (a3 && !v65)
        {
          if (xmlSchemaTypeFloatDef != a1)
          {
            xmlSchemaNewValue(14);
            if (!v67)
              goto LABEL_599;
            v68 = &xmlXPathNAN;
LABEL_635:
            *(double *)(v67 + 16) = *v68;
            goto LABEL_512;
          }
          xmlSchemaNewValue(13);
          if (!v67)
            goto LABEL_599;
          v221 = &xmlXPathNAN;
LABEL_637:
          v236 = *v221;
          *(float *)(v67 + 16) = v236;
LABEL_512:
          *a3 = (xmlChar *)v67;
          goto LABEL_631;
        }
        goto LABEL_513;
      }
      if (v62 == 45)
        v69 = k + 1;
      else
        v69 = k;
      v70 = *v69;
      if (v70 == 73 && v69[1] == 78 && v69[2] == 70)
      {
        v71 = v69[3];
        if (v71)
          v66 = 7;
        else
          v66 = 4;
        if (a3 && !v71)
        {
          if (xmlSchemaTypeFloatDef != a1)
          {
            xmlSchemaNewValue(14);
            if (!v67)
              goto LABEL_599;
            if (v62 == 45)
              v68 = &xmlXPathNINF;
            else
              v68 = &xmlXPathPINF;
            goto LABEL_635;
          }
          xmlSchemaNewValue(13);
          if (!v67)
            goto LABEL_599;
          if (v62 == 45)
            v221 = &xmlXPathNINF;
          else
            v221 = &xmlXPathPINF;
          goto LABEL_637;
        }
        goto LABEL_513;
      }
      v72 = (unsigned __int8 *)(k + 1);
      if (v70 == 43)
        ++k;
      if (v62 == 45)
        k = (char *)v72;
      v73 = *k;
      if (v73 <= 0x2D && ((1 << v73) & 0x280000000001) != 0)
        goto LABEL_625;
      v75 = v73 - 58;
      if (v73 - 58 >= 0xFFFFFFF6)
      {
        do
        {
          v76 = *++k;
          v73 = v76;
        }
        while (v76 - 48 < 0xA);
      }
      if (v73 == 46)
      {
        v77 = -1;
        do
        {
          v78 = *++k;
          v73 = v78;
          ++v77;
        }
        while (v78 - 48 < 0xA);
      }
      else
      {
        v77 = 0;
      }
      if (v75 <= 0xFFFFFFF5 && !v77)
        goto LABEL_625;
      if ((v73 | 0x20) == 0x65)
      {
        v191 = (unsigned __int8 *)(k + 1);
        v192 = k[1];
        if (v192 == 45 || v192 == 43)
          v191 = (unsigned __int8 *)(k + 2);
        k = (char *)(v191 - 1);
        do
        {
          v193 = *++k;
          v73 = v193;
        }
        while (v193 - 48 < 0xA);
      }
      v194 = (unsigned __int8 *)(k + 1);
      while (v73 <= 0x20 && ((1 << v73) & 0x100002600) != 0)
      {
        v195 = *v194++;
        v73 = v195;
      }
      if (v73)
        v66 = 7;
      else
        v66 = 4;
      if (!a3 || v73)
      {
LABEL_513:
        if (v66 == 4)
          goto LABEL_631;
LABEL_625:
        if (v16)
          xmlFree(v16);
        return 1;
      }
      if (xmlSchemaTypeFloatDef == a1)
      {
        v228 = xmlSchemaNewValue(13);
        if (!v227)
          goto LABEL_599;
        v109 = v227;
        v198 = sscanf(a2, "%f", v228);
      }
      else
      {
        v197 = xmlSchemaNewValue(14);
        if (!v196)
          goto LABEL_599;
        v109 = v196;
        v198 = sscanf(a2, "%lf", v197);
      }
      if (v198 != 1)
      {
        xmlSchemaFreeValue((xmlSchemaValPtr)v109);
        goto LABEL_625;
      }
      goto LABEL_300;
    case 15:
      while (2)
      {
        v116 = *a2;
        if (v116 > 0x31)
          goto LABEL_349;
        if (((1 << v116) & 0x100002600) != 0)
        {
          ++a2;
          continue;
        }
        break;
      }
      if (v116 == 48)
      {
        v165 = 0;
        v164 = 1;
      }
      else if (v116 == 49)
      {
        v164 = 1;
        v165 = 1;
      }
      else
      {
LABEL_349:
        if ((_DWORD)v116 == 102)
        {
          if (a2[1] != 97 || a2[2] != 108 || a2[3] != 115 || a2[4] != 101)
            goto LABEL_625;
          v165 = 0;
          v164 = 5;
        }
        else
        {
          if ((_DWORD)v116 != 116 || a2[1] != 114 || a2[2] != 117 || a2[3] != 101)
            goto LABEL_625;
          v165 = 1;
          v164 = 4;
        }
      }
      v188 = a2[v164];
      if (a2[v164])
      {
        for (m = v164 + 1; ; ++m)
        {
          if (v188 > 0x20)
            goto LABEL_625;
          if (((1 << v188) & 0x100002600) == 0)
            break;
          v188 = a2[m];
        }
        if (v188)
          goto LABEL_625;
      }
      if (!a3)
        goto LABEL_631;
      xmlSchemaNewValue(15);
      if (v67)
      {
        *(_DWORD *)(v67 + 16) = v165;
        goto LABEL_512;
      }
      goto LABEL_599;
    case 16:
      if (!a3)
        goto LABEL_631;
      v64 = 16;
      goto LABEL_297;
    case 17:
      if (!v16)
      {
        v117 = xmlSchemaCollapseString((const xmlChar *)a2);
        v16 = v117;
        if (v117)
          a2 = (char *)v117;
      }
      if (!xmlSchemaCheckLanguageType(a2))
        goto LABEL_625;
      if (!a3)
        goto LABEL_631;
      v64 = 17;
      goto LABEL_297;
    case 18:
      if (xmlValidateNMToken((const xmlChar *)a2, 1))
        goto LABEL_625;
      if (!a3)
        goto LABEL_631;
      v64 = 18;
      goto LABEL_297;
    case 19:
      v38 = (int)xmlSchemaValAtomicListNode(xmlSchemaTypeNmtokenDef, (xmlChar *)a2, a3, a4) < 1;
      goto LABEL_656;
    case 20:
      v83 = xmlValidateName((const xmlChar *)a2, 1);
      v38 = v83;
      if (!a3 || (_DWORD)v83)
        goto LABEL_656;
      xmlSchemaNewValue(20);
      if (!v84)
        goto LABEL_599;
      v23 = v84;
      while (1)
      {
        v85 = *a2;
        if (v85 > 0x20 || ((1 << v85) & 0x100002600) == 0)
          break;
        ++a2;
      }
      v181 = 0;
      while (v85 > 0x20u || ((1 << v85) & 0x100002601) == 0)
        LOBYTE(v85) = a2[++v181];
      v120 = xmlStrndup((const xmlChar *)a2, v181);
      goto LABEL_407;
    case 21:
      v38 = xmlValidateQName((const xmlChar *)a2, 1);
      if ((_DWORD)v38)
        goto LABEL_656;
      if (a4)
      {
        prefix[0] = 0;
        v87 = xmlSplitQName2((const xmlChar *)a2, prefix);
        v88 = xmlSearchNs(*(xmlDocPtr *)(a4 + 64), (xmlNodePtr)a4, prefix[0]);
        if (!v88 && prefix[0])
        {
          xmlFree(prefix[0]);
          if (!v87)
            goto LABEL_625;
          v89 = xmlFree;
LABEL_540:
          ((void (*)(xmlChar *))v89)(v87);
          goto LABEL_625;
        }
        if (v88)
          href = v88->href;
        else
          href = 0;
        if (prefix[0])
          xmlFree(prefix[0]);
        if (!a3)
        {
          if (v87)
            xmlFree(v87);
LABEL_655:
          v38 = 0;
          goto LABEL_656;
        }
        xmlSchemaNewValue(21);
        if (!v222)
          goto LABEL_597;
        v23 = v222;
        if (v87)
        {
LABEL_570:
          *((_QWORD *)v23 + 2) = v87;
          if (href)
            *((_QWORD *)v23 + 3) = xmlStrdup(href);
          goto LABEL_652;
        }
LABEL_569:
        v87 = xmlStrdup((const xmlChar *)a2);
        goto LABEL_570;
      }
      if (!a3)
        goto LABEL_655;
      xmlSchemaNewValue(21);
      if (v212)
      {
        v23 = v212;
        href = 0;
        goto LABEL_569;
      }
      goto LABEL_599;
    case 22:
      v118 = xmlValidateNCName((const xmlChar *)a2, 1);
      v38 = v118;
      if (!a3 || (_DWORD)v118)
        goto LABEL_656;
      xmlSchemaNewValue(22);
      if (!v119)
        goto LABEL_599;
      v23 = v119;
      v120 = xmlStrdup((const xmlChar *)a2);
LABEL_407:
      v38 = 0;
      *((_QWORD *)v23 + 2) = v120;
      goto LABEL_653;
    case 23:
      v121 = xmlValidateNCName((const xmlChar *)a2, 1);
      v38 = v121;
      if (!a3 || (_DWORD)v121)
        goto LABEL_259;
      xmlSchemaNewValue(23);
      if (!v122)
        goto LABEL_599;
      v123 = (xmlChar *)v122;
      *(_QWORD *)(v122 + 16) = xmlStrdup((const xmlChar *)a2);
      *a3 = v123;
LABEL_259:
      if (!a4 || (_DWORD)v38)
        goto LABEL_656;
      if (*(_DWORD *)(a4 + 8) != 2 || *(_DWORD *)(a4 + 80) == 2)
        goto LABEL_655;
      v124 = xmlSchemaStrip((uint64_t)a2);
      v125 = *(xmlDoc **)(a4 + 64);
      if (v124)
      {
        v126 = v124;
        v127 = xmlAddID(0, v125, v124, (xmlAttrPtr)a4);
        xmlFree(v126);
      }
      else
      {
        v127 = xmlAddID(0, v125, (const xmlChar *)a2, (xmlAttrPtr)a4);
      }
      v38 = 2;
      if (!v127)
        goto LABEL_656;
      *(_DWORD *)(a4 + 80) = 2;
      goto LABEL_655;
    case 24:
      v90 = xmlValidateNCName((const xmlChar *)a2, 1);
      v38 = v90;
      if (!a3 || (_DWORD)v90)
        goto LABEL_195;
      xmlSchemaNewValue(24);
      if (!v91)
        goto LABEL_599;
      v92 = (xmlChar *)v91;
      *(_QWORD *)(v91 + 16) = xmlStrdup((const xmlChar *)a2);
      *a3 = v92;
LABEL_195:
      if (!a4 || (_DWORD)v38)
        goto LABEL_656;
      if (*(_DWORD *)(a4 + 8) != 2)
        goto LABEL_655;
      v93 = xmlSchemaStrip((uint64_t)a2);
      v94 = *(xmlDoc **)(a4 + 64);
      if (v93)
      {
        v95 = v93;
        xmlAddRef(0, v94, v93, (xmlAttrPtr)a4);
        xmlFree(v95);
      }
      else
      {
        xmlAddRef(0, v94, (const xmlChar *)a2, (xmlAttrPtr)a4);
      }
      v38 = 0;
      v97 = 3;
      goto LABEL_549;
    case 25:
      v96 = xmlSchemaValAtomicListNode(xmlSchemaTypeIdrefDef, (xmlChar *)a2, a3, a4);
      v38 = (v96 >> 30) & 2;
      if (!a4 || (v96 & 0x80000000) != 0)
        goto LABEL_656;
      if (*(_DWORD *)(a4 + 8) != 2)
        goto LABEL_655;
      v38 = 0;
      v97 = 4;
      goto LABEL_549;
    case 26:
      v128 = xmlValidateNCName((const xmlChar *)a2, 1);
      if (!a4 || !*(_QWORD *)(a4 + 64))
        goto LABEL_531;
      v38 = v128;
      if ((_DWORD)v128)
        goto LABEL_656;
      v129 = xmlSchemaStrip((uint64_t)a2);
      v130 = *(const xmlDoc **)(a4 + 64);
      if (v129)
      {
        DocEntity = xmlGetDocEntity(v130, v129);
        xmlFree(v129);
      }
      else
      {
        DocEntity = xmlGetDocEntity(v130, (const xmlChar *)a2);
      }
      if (DocEntity)
      {
        etype = DocEntity->etype;
        v15 = etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY;
        v217 = etype != XML_EXTERNAL_GENERAL_UNPARSED_ENTITY;
        v218 = etype == XML_EXTERNAL_GENERAL_UNPARSED_ENTITY;
        v38 = (4 * v217);
        if (v15 && a3)
        {
          v219 = *__xmlGenericError();
          v220 = __xmlGenericErrorContext();
          v219(*v220, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c", 2947);
          v38 = 0;
          v218 = 1;
        }
        if (v218 && *(_DWORD *)(a4 + 8) == 2)
        {
          v97 = 5;
          goto LABEL_549;
        }
      }
      else
      {
        v38 = 4;
      }
      goto LABEL_656;
    case 27:
      if (!a4 || !*(_QWORD *)(a4 + 64))
      {
        if (v16)
          xmlFree(v16);
        return 3;
      }
      if ((int)xmlSchemaValAtomicListNode(xmlSchemaTypeEntityDef, (xmlChar *)a2, a3, a4) < 1)
      {
LABEL_650:
        v38 = 1;
      }
      else
      {
        if (*(_DWORD *)(a4 + 8) != 2)
          goto LABEL_655;
        v38 = 0;
        v97 = 6;
LABEL_549:
        *(_DWORD *)(a4 + 80) = v97;
      }
      goto LABEL_656;
    case 28:
      v132 = xmlValidateQName((const xmlChar *)a2, 1);
      v38 = v132;
      if (!a4 || (_DWORD)v132)
      {
        if (!a4)
        {
LABEL_531:
          v38 = 3;
          goto LABEL_656;
        }
        v133 = 0;
        v87 = 0;
      }
      else
      {
        prefix[0] = 0;
        v133 = xmlSplitQName2((const xmlChar *)a2, prefix);
        if (prefix[0])
        {
          v134 = xmlSearchNs(*(xmlDocPtr *)(a4 + 64), (xmlNodePtr)a4, prefix[0]);
          v87 = 0;
          v38 = v134 == 0;
          if (a3 && v134)
          {
            v87 = xmlStrdup(v134->href);
            v38 = 0;
          }
        }
        else
        {
          v38 = 0;
          v87 = 0;
        }
        if (v133 && (!a3 || (_DWORD)v38))
          xmlFree(v133);
        if (prefix[0])
          xmlFree(prefix[0]);
      }
      v209 = *(xmlDoc **)(a4 + 64);
      if (!v209)
        goto LABEL_531;
      if (!(_DWORD)v38)
      {
        v210 = xmlValidateNotationUse(0, v209, (const xmlChar *)a2);
        v38 = v210 != 1;
        if (a3)
        {
          if (v210 == 1)
          {
            xmlSchemaNewValue(28);
            if (v211)
            {
              v23 = v211;
              if (!v133)
                v133 = xmlStrdup((const xmlChar *)a2);
              *((_QWORD *)v23 + 2) = v133;
              if (v87)
                *((_QWORD *)v23 + 3) = v87;
LABEL_652:
              v38 = 0;
LABEL_653:
              *a3 = (xmlChar *)v23;
              goto LABEL_656;
            }
            if (v133)
              xmlFree(v133);
LABEL_597:
            if (v87)
              xmlFree(v87);
LABEL_599:
            if (v16)
              xmlFree(v16);
            return 0xFFFFFFFFLL;
          }
        }
      }
LABEL_656:
      if (v16)
        xmlFree(v16);
      return v38;
    case 29:
      if (!*a2)
        goto LABEL_295;
      if (!v16)
      {
        v135 = xmlSchemaCollapseString((const xmlChar *)a2);
        v16 = v135;
        if (v135)
          a2 = (char *)v135;
      }
      v136 = (const char *)xmlStrdup((const xmlChar *)a2);
      v137 = (char *)v136;
      v138 = *v136;
      if (*v136)
      {
        v139 = (unsigned __int8 *)(v136 + 1);
        do
        {
          if ((v138 - 127) < 0xA2u
            || v138 - 34 <= 0x3E && ((1 << (v138 - 34)) & 0x5400000014000021) != 0
            || v138 - 123 < 3)
          {
            *(v139 - 1) = 95;
          }
          v140 = *v139++;
          v138 = v140;
        }
        while (v140);
      }
      v141 = xmlParseURI(v136);
      xmlFree(v137);
      if (!v141)
        goto LABEL_625;
      xmlFreeURI(v141);
LABEL_295:
      if (!a3)
        goto LABEL_631;
      v64 = 29;
LABEL_297:
      xmlSchemaNewValue(v64);
      if (!v142)
        goto LABEL_599;
      v109 = v142;
      v111 = (const xmlChar *)a2;
LABEL_299:
      *(_QWORD *)(v109 + 16) = xmlStrdup(v111);
      goto LABEL_300;
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
      v255 = 0;
      v254 = 0uLL;
      while (1)
      {
        v28 = *a2;
        if (v28 > 0x20 || ((1 << v28) & 0x100002600) == 0)
          break;
        ++a2;
      }
      prefix[0] = (xmlChar *)a2;
      if (v28 == 45)
      {
        prefix[0] = (xmlChar *)(a2 + 1);
        v30 = 1;
      }
      else
      {
        v30 = 0;
        if (v28 == 43)
          prefix[0] = (xmlChar *)(a2 + 1);
      }
      v79 = xmlSchemaParseUInt(prefix, (uint64_t *)&v255, (uint64_t *)&v254 + 1, (uint64_t *)&v254);
      if ((v79 & 0x80000000) != 0)
        goto LABEL_625;
      v80 = v79;
      v81 = prefix[0];
      while (2)
      {
        v82 = *v81;
        if (v82 > 0x20)
          goto LABEL_625;
        if (((1 << v82) & 0x100002600) != 0)
        {
          ++v81;
          continue;
        }
        break;
      }
      if (*v81)
        goto LABEL_625;
      if (v17 == 34)
      {
        if (v28 == 45)
          goto LABEL_625;
      }
      else
      {
        if (v17 != 32)
        {
          if (v17 == 31)
          {
            if (v28 == 45)
            {
LABEL_375:
              if (!a3)
                goto LABEL_631;
LABEL_376:
              xmlSchemaNewValue(v17);
              if (!v67)
                goto LABEL_631;
              if (v80 <= 1)
                v168 = 1;
              else
                v168 = v80;
              v169 = *((_QWORD *)&v254 + 1);
              *(_QWORD *)(v67 + 16) = v255;
              *(_QWORD *)(v67 + 24) = v169;
              *(_QWORD *)(v67 + 32) = v254;
              v170 = v30 | (v168 << 8);
LABEL_511:
              *(_WORD *)(v67 + 44) = v170;
              goto LABEL_512;
            }
          }
          else if (v17 != 33 || v28 != 45)
          {
            goto LABEL_375;
          }
          v167 = v254 | *((_QWORD *)&v254 + 1) | (unint64_t)v255;
          if (v167)
            v66 = 7;
          else
            v66 = 4;
          if (v167)
            goto LABEL_513;
LABEL_373:
          if (!a3)
            goto LABEL_513;
          goto LABEL_376;
        }
        if (v28 != 45)
          goto LABEL_625;
      }
      v166 = v254 | *((_QWORD *)&v254 + 1) | (unint64_t)v255;
      if (v166)
        v66 = 4;
      else
        v66 = 7;
      if (!v166)
        goto LABEL_513;
      goto LABEL_373;
    case 35:
    case 37:
    case 39:
    case 41:
      v255 = 0;
      prefix[0] = (xmlChar *)a2;
      v254 = 0uLL;
      v31 = *a2;
      if (v31 == 45)
      {
        prefix[0] = (xmlChar *)(a2 + 1);
        v32 = 1;
      }
      else
      {
        v32 = 0;
        if (v31 == 43)
          prefix[0] = (xmlChar *)(a2 + 1);
      }
      v103 = xmlSchemaParseUInt(prefix, (uint64_t *)&v255, (uint64_t *)&v254 + 1, (uint64_t *)&v254);
      if (v103 < 0 || *prefix[0])
        goto LABEL_625;
      v104 = v103;
      switch(v17)
      {
        case '#':
          if ((_QWORD)v254)
            goto LABEL_625;
          if (*((_QWORD *)&v254 + 1) < 0x15uLL)
            goto LABEL_495;
          if (*((_QWORD *)&v254 + 1) != 21)
            goto LABEL_625;
          v105 = v255;
          v106 = v31 == 45;
          v107 = 47483647;
          goto LABEL_486;
        case '%':
          if ((unint64_t)v254 < 0x39A)
            goto LABEL_495;
          if ((_QWORD)v254 != 922)
            goto LABEL_625;
          if (*((_QWORD *)&v254 + 1) <= 0x202882FuLL)
          {
LABEL_495:
            if (!a3)
              goto LABEL_631;
          }
          else
          {
            if (*((_QWORD *)&v254 + 1) != 33720368)
              goto LABEL_625;
            v105 = v255;
            v106 = v31 == 45;
            v107 = 54775807;
LABEL_486:
            if (v106)
              v203 = v107 + 1;
            else
              v203 = v107;
            if ((unint64_t)v105 > v203)
              v66 = 7;
            else
              v66 = 4;
            if (!a3 || (unint64_t)v105 > v203)
              goto LABEL_513;
          }
LABEL_509:
          xmlSchemaNewValue(v17);
          if (!v67)
            goto LABEL_631;
          v208 = *((_QWORD *)&v254 + 1);
          *(_QWORD *)(v67 + 16) = v255;
          *(_QWORD *)(v67 + 24) = v208;
          *(_QWORD *)(v67 + 32) = v254;
          v170 = v32 | (v104 << 8);
          break;
        case '\'':
          if (v254 != 0)
            goto LABEL_625;
          v204 = v255;
          v205 = v31 == 45;
          v206 = 0x8000;
          goto LABEL_501;
        case ')':
          if (v254 != 0)
            goto LABEL_625;
          v204 = v255;
          v205 = v31 == 45;
          v206 = 128;
LABEL_501:
          if (v205)
            v207 = v206 + 1;
          else
            v207 = v206;
          if ((unint64_t)v204 >= v207)
            v66 = 7;
          else
            v66 = 4;
          if (a3 && (unint64_t)v204 < v207)
            goto LABEL_509;
          goto LABEL_513;
        default:
          goto LABEL_495;
      }
      goto LABEL_511;
    case 36:
    case 38:
    case 40:
    case 42:
      v255 = 0;
      prefix[0] = (xmlChar *)a2;
      v254 = 0uLL;
      v33 = xmlSchemaParseUInt(prefix, (uint64_t *)&v255, (uint64_t *)&v254 + 1, (uint64_t *)&v254);
      if (v33 < 0 || *prefix[0])
        goto LABEL_625;
      v34 = v33;
      switch(v17)
      {
        case '$':
          if ((_QWORD)v254)
            goto LABEL_625;
          v35 = *((_QWORD *)&v254 + 1) == 42;
          if (*((_QWORD *)&v254 + 1) < 0x2AuLL)
            goto LABEL_460;
          v36 = v255;
          v37 = 94967295;
          goto LABEL_468;
        case '&':
          if ((unint64_t)v254 < 0x734)
            goto LABEL_460;
          if ((_QWORD)v254 != 1844)
            goto LABEL_625;
          if (*((_QWORD *)&v254 + 1) <= 0x4051060uLL)
          {
LABEL_460:
            if (!a3)
              goto LABEL_631;
          }
          else
          {
            v35 = *((_QWORD *)&v254 + 1) == 67440737;
            v36 = v255;
            v37 = 9551615;
LABEL_468:
            v201 = !v35 || (unint64_t)v36 > v37;
            if (v201)
              v66 = 7;
            else
              v66 = 4;
            if ((v201 & 1) != 0)
              goto LABEL_513;
LABEL_478:
            if (!a3)
              goto LABEL_513;
          }
          xmlSchemaNewValue(v17);
          if (!v67)
            goto LABEL_631;
          v202 = *((_QWORD *)&v254 + 1);
          *(_QWORD *)(v67 + 16) = v255;
          *(_QWORD *)(v67 + 24) = v202;
          *(_QWORD *)(v67 + 32) = v254;
          v170 = v34 << 8;
          break;
        case '(':
          v199 = *((_QWORD *)&v254 + 1) | v254 | ((unint64_t)v255 >> 16);
          if (v199)
            v66 = 7;
          else
            v66 = 4;
          if (v199)
            goto LABEL_513;
          goto LABEL_478;
        case '*':
          v35 = v254 == 0;
          v36 = v255;
          v37 = 255;
          goto LABEL_468;
        default:
          goto LABEL_460;
      }
      goto LABEL_511;
    case 43:
      while (1)
      {
        v143 = *a2;
        if (v143 > 0x20 || ((1 << v143) & 0x100002600) == 0)
          break;
        ++a2;
      }
      v145 = 0;
      v146 = 1;
      v147 = a2;
      while ((v143 - 48) < 0xAu
           || v143 - 65 <= 0x25
           && ((1 << (v143 - 65)) & 0x3F0000003FLL) != 0)
      {
        ++v145;
        v148 = *++v147;
        LOBYTE(v143) = v148;
        ++v146;
      }
      v149 = 1;
      while (v143 <= 0x20u && ((1 << v143) & 0x100002600) != 0)
        LOBYTE(v143) = v147[v149++];
      if ((v143 != 0) | v145 & 1 || !a3)
      {
        if ((v143 != 0) | v145 & 1)
          goto LABEL_625;
      }
      else
      {
        xmlSchemaNewValue(43);
        if (!v150)
          goto LABEL_599;
        v87 = v150;
        v151 = xmlStrndup((const xmlChar *)a2, v145);
        if (!v151)
        {
          __xmlSimpleError(0xFu, 2, a4, 0, (const xmlChar *)"allocating hexbin data");
          v89 = xmlFree;
          goto LABEL_540;
        }
        if (v145)
        {
          v152 = v151;
          do
          {
            v153 = *v152;
            if (v153 >= 0x61)
              *v152 = v153 - 32;
            ++v152;
            --v146;
          }
          while (v146 > 1);
        }
        *((_QWORD *)v87 + 2) = v151;
        *((_DWORD *)v87 + 6) = v145 >> 1;
        *a3 = v87;
      }
      goto LABEL_631;
    case 44:
      v98 = *a2;
      if (*a2)
      {
        v99 = 0;
        v100 = a2;
        while (1)
        {
          v101 = _xmlSchemaBase64Decode(v98);
          if (v101 < 0x40)
            ++v99;
          if (v101 >= 64)
            break;
          v102 = *++v100;
          v98 = v102;
          if (!v102)
            goto LABEL_382;
        }
        v178 = 0;
        do
        {
          v179 = _xmlSchemaBase64Decode(v98);
          if (v179 < 0x40)
            goto LABEL_625;
          if (v179 == 64)
            ++v178;
          v180 = *++v100;
          v98 = v180;
        }
        while (v180);
        v171 = 3 * (v99 >> 2);
        if (v178 == 2)
        {
          if ((v99 & 3) != 2)
            goto LABEL_625;
          v223 = -1;
          do
            v224 = _xmlSchemaBase64Decode(v100[v223--]);
          while (v224 > 0x3F);
          if ((v224 & 0xFFFFFFCF) != 0)
            goto LABEL_625;
          ++v171;
        }
        else
        {
          if (v178 != 1)
          {
            if (v178)
              goto LABEL_625;
            goto LABEL_383;
          }
          if ((~v99 & 3) != 0)
            goto LABEL_625;
          v225 = -1;
          do
            v226 = _xmlSchemaBase64Decode(v100[v225--]);
          while (v226 > 0x3F);
          if ((v226 & 0xFFFFFFC3) != 0)
            goto LABEL_625;
          v171 += 2;
        }
LABEL_385:
        if (!a3)
          goto LABEL_631;
        xmlSchemaNewValue(44);
        if (v172)
        {
          v109 = v172;
          v173 = (xmlChar *)xmlMallocAtomic((int)(v99 + v178 + 1));
          if (!v173)
          {
            __xmlSimpleError(0xFu, 2, a4, 0, (const xmlChar *)"allocating base64 data");
            ((void (*)(uint64_t))xmlFree)(v109);
            goto LABEL_625;
          }
          v174 = v173;
          *(_QWORD *)(v109 + 16) = v173;
          v175 = *a2;
          if (*a2)
          {
            v176 = (unsigned __int8 *)(a2 + 1);
            do
            {
              if ((_xmlSchemaBase64Decode(v175) & 0x80000000) == 0)
                *v174++ = v175;
              v177 = *v176++;
              v175 = v177;
            }
            while (v177);
          }
          *v174 = 0;
          *(_DWORD *)(v109 + 24) = v171;
LABEL_300:
          *a3 = (xmlChar *)v109;
LABEL_631:
          if (v16)
            xmlFree(v16);
          return 0;
        }
        goto LABEL_599;
      }
      v99 = 0;
LABEL_382:
      v171 = 3 * ((int)v99 / 4);
LABEL_383:
      if ((v99 & 3) != 0)
        goto LABEL_625;
      v178 = 0;
      goto LABEL_385;
    case 45:
    case 46:
      if (!a3 || !a7)
        goto LABEL_631;
      v64 = 46;
      goto LABEL_297;
    default:
      goto LABEL_655;
  }
}

int xmlSchemaValPredefTypeNodeNoNorm(xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val, xmlNodePtr node)
{
  return xmlSchemaValAtomicType((uint64_t)type, (char *)value, (xmlChar **)val, (uint64_t)node, 1, 0, 1);
}

int xmlSchemaValidatePredefinedType(xmlSchemaTypePtr type, const xmlChar *value, xmlSchemaValPtr *val)
{
  return xmlSchemaValAtomicType((uint64_t)type, (char *)value, (xmlChar **)val, 0, 0, 1, 0);
}

xmlSchemaValPtr xmlSchemaCopyValue(xmlSchemaValPtr val)
{
  __n128 *v1;
  uint64_t v2;
  xmlSchemaVal *v3;
  uint64_t v4;
  uint64_t v5;
  const xmlChar *v6;
  uint64_t v7;
  const xmlChar *v8;
  const xmlChar *v9;
  uint64_t v10;

  if (val)
  {
    v1 = (__n128 *)val;
    v2 = 0;
    v3 = 0;
    while (2)
    {
      switch(v1->n128_u32[0])
      {
        case 1u:
        case 2u:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x14u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x1Au:
        case 0x1Du:
        case 0x2Bu:
        case 0x2Cu:
        case 0x2Eu:
          xmlSchemaDupVal(v1);
          v5 = v4;
          v6 = (const xmlChar *)v1[1].n128_u64[0];
          if (v6)
            *(_QWORD *)(v5 + 16) = xmlStrdup(v6);
          goto LABEL_6;
        case 0x13u:
        case 0x19u:
        case 0x1Bu:
        case 0x2Du:
          xmlSchemaFreeValue(v3);
          return 0;
        case 0x15u:
        case 0x1Cu:
          xmlSchemaDupVal(v1);
          v5 = v7;
          v8 = (const xmlChar *)v1[1].n128_u64[0];
          if (v8)
            *(_QWORD *)(v5 + 16) = xmlStrdup(v8);
          v9 = (const xmlChar *)v1[1].n128_u64[1];
          if (v9)
            *(_QWORD *)(v5 + 24) = xmlStrdup(v9);
          goto LABEL_6;
        default:
          xmlSchemaDupVal(v1);
          v5 = v10;
LABEL_6:
          val = (xmlSchemaValPtr)v5;
          if (v3)
          {
            *(_QWORD *)(v2 + 8) = v5;
            val = v3;
          }
          v1 = (__n128 *)v1->n128_u64[1];
          v2 = v5;
          v3 = val;
          if (!v1)
            return val;
          continue;
      }
    }
  }
  return val;
}

__n128 xmlSchemaDupVal(__n128 *a1)
{
  unsigned __int32 v2;
  _OWORD *v3;
  __n128 result;
  __n128 v5;

  v2 = a1->n128_u32[0];
  v3 = xmlMalloc(0x30uLL);
  if (v3)
  {
    v3[1] = 0u;
    v3[2] = 0u;
    *v3 = 0u;
    *(_DWORD *)v3 = v2;
    result = a1[2];
    v5 = *a1;
    v3[1] = a1[1];
    v3[2] = result;
    *v3 = v5;
    *((_QWORD *)v3 + 1) = 0;
  }
  return result;
}

int xmlSchemaCompareValues(xmlSchemaValPtr x, xmlSchemaValPtr y)
{
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  int v9;

  if (!x || !y)
    return -2;
  v4 = *(_DWORD *)x;
  if (v4 == 2)
    v5 = 2;
  else
    v5 = 3;
  if (v4 == 1)
    v6 = 1;
  else
    v6 = v5;
  v7 = *(_DWORD *)y;
  if (*(_DWORD *)y == 2)
    v8 = 2;
  else
    v8 = 3;
  if (v7 == 1)
    v9 = 1;
  else
    v9 = v8;
  return xmlSchemaCompareValuesInternal(v4, (uint64_t)x, 0, v6, v7, (uint64_t)y, 0, v9);
}

uint64_t xmlSchemaCompareValuesInternal(int a1, uint64_t a2, xmlChar *str1, int a4, unsigned int a5, uint64_t a6, xmlChar *str2, int a8)
{
  uint64_t v8;
  _BOOL4 v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  double v28;
  double v29;
  double v30;
  xmlGenericErrorFunc v31;
  void *v32;
  xmlChar *v33;
  unsigned __int8 *v34;
  int v35;
  xmlChar *v36;
  xmlChar *v37;
  int v38;
  double v39;
  xmlGenericErrorFunc v40;
  void *v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  int v49;
  unsigned int v50;
  xmlChar *v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  int64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  double v60;
  int IsNaN;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int64_t v66;
  uint64_t v67;
  uint64_t v68;
  int64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  int64_t v74;
  double v75;
  int v76;
  int v77;
  int v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  double v92;
  double v93;

  v8 = 4294967294;
  switch(a1)
  {
    case 1:
    case 2:
    case 16:
    case 17:
    case 18:
    case 20:
    case 22:
    case 23:
    case 24:
    case 26:
    case 29:
    case 46:
      if (a2)
        str1 = *(xmlChar **)(a2 + 16);
      if (a6)
        str2 = *(xmlChar **)(a6 + 16);
      if (a5 > 0x2E)
        return v8;
      if (((1 << a5) & 0x400025D70006) == 0)
      {
        if (a5 == 21)
        {
          v40 = *__xmlGenericError();
          v41 = *__xmlGenericErrorContext();
          v40(v41, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c", 4909);
        }
        return v8;
      }
      if (a4 == 3)
      {
        if (a8 == 3)
          return xmlSchemaCompareNormStrings(str1, str2);
        if (a8 != 2)
        {
          if (a8 != 1)
            return v8;
          v33 = str2;
          v34 = str1;
          v35 = 1;
          return xmlSchemaComparePreserveCollapseStrings(v33, v34, v35);
        }
        v51 = str2;
        v52 = str1;
        v53 = 1;
        return xmlSchemaCompareReplaceCollapseStrings(v51, v52, v53);
      }
      if (a4 != 2)
      {
        if (a4 != 1)
          return v8;
        if (a8 != 3)
        {
          if (a8 != 2)
          {
            if (a8 != 1)
              return v8;
            v12 = xmlStrEqual(str1, str2) == 0;
            return (2 * v12);
          }
          v36 = str1;
          v37 = str2;
          v38 = 0;
          return xmlSchemaComparePreserveReplaceStrings(v36, v37, v38);
        }
        v33 = str1;
        v34 = str2;
        v35 = 0;
        return xmlSchemaComparePreserveCollapseStrings(v33, v34, v35);
      }
      if (a8 == 3)
      {
        v51 = str1;
        v52 = str2;
        v53 = 0;
        return xmlSchemaCompareReplaceCollapseStrings(v51, v52, v53);
      }
      if (a8 != 2)
      {
        if (a8 != 1)
          return v8;
        v36 = str2;
        v37 = str1;
        v38 = 1;
        return xmlSchemaComparePreserveReplaceStrings(v36, v37, v38);
      }
      return xmlSchemaCompareReplacedStrings(str1, str2);
    case 3:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
      if (!a2 || !a6 || a5 != a1 && a5 - 30 >= 0xD && a5 != 3)
        return v8;
      return xmlSchemaCompareDecimals(a2, a6);
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      if (a5 - 4 > 7
        || !a2
        || !a6
        || (unint64_t)(*(_QWORD *)(a2 + 16) - 0x5987B1A9448BE5) < 0xFF4CF09CAD76E837
        || (unint64_t)(*(_QWORD *)(a6 + 16) - 0x5987B1A9448BE5) < 0xFF4CF09CAD76E837)
      {
        return v8;
      }
      v13 = *(_WORD *)(a6 + 40);
      if ((*(_WORD *)(a2 + 40) & 1) != 0)
      {
        if ((v13 & 1) != 0)
          goto LABEL_122;
        xmlSchemaDateNormalize((__n128 *)a2, 0.0);
        v18 = v54;
        v55 = _xmlSchemaDateCastYMToDays(v54) + (((unint64_t)*(unsigned int *)(v54 + 24) >> 4) & 0x1F);
        xmlSchemaDateNormalize((__n128 *)a6, 50400.0);
        v15 = v56;
        v57 = _xmlSchemaDateCastYMToDays(v56);
        v58 = *(unsigned int *)(v15 + 24);
        v59 = v57 + ((v58 >> 4) & 0x1F);
        if (v55 < v59)
          goto LABEL_99;
        if (v55 == v59)
        {
          if (*(double *)(v18 + 32)
             + (double)(3600 * ((*(_DWORD *)(v18 + 24) >> 9) & 0x1F)
                      + 60 * (((*(_DWORD *)(v18 + 24) >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v18 + 40)) >> 4)))
             - (*(double *)(v15 + 32)
              + (double)(int)(3600 * ((v58 >> 9) & 0x1F)
                            + 60 * (((v58 >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v15 + 40)) >> 4)))) >= 0.0)
          {
            xmlSchemaDateNormalize((__n128 *)a6, -50400.0);
            v23 = v63;
            v64 = _xmlSchemaDateCastYMToDays(v63);
            v65 = *(unsigned int *)(v23 + 24);
            v66 = v64 + ((v65 >> 4) & 0x1F);
            if (v55 <= v66)
            {
              if (v55 == v66)
              {
                v27 = 0;
                v28 = *(double *)(v18 + 32)
                    + (double)(3600 * ((*(_DWORD *)(v18 + 24) >> 9) & 0x1F)
                             + 60
                             * (((*(_DWORD *)(v18 + 24) >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v18 + 40)) >> 4)));
                v29 = (double)(int)(3600 * ((v65 >> 9) & 0x1F)
                                  + 60
                                  * (((v65 >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v23 + 40)) >> 4)));
                v30 = *(double *)(v23 + 32);
LABEL_164:
                if (v28 - (v30 + v29) > 0.0)
                  v8 = 1;
                else
                  v8 = 2;
LABEL_168:
                xmlSchemaFreeValue((xmlSchemaValPtr)v18);
                xmlSchemaFreeValue((xmlSchemaValPtr)v15);
                xmlSchemaFreeValue((xmlSchemaValPtr)v23);
                if ((v27 & 1) == 0)
                  return v8;
LABEL_122:
                if (*(_DWORD *)a2 == *(_DWORD *)a6)
                {
                  xmlSchemaDateNormalize((__n128 *)a6, 0.0);
                  v68 = v67;
                  v69 = _xmlSchemaDateCastYMToDays(v67) + (((unint64_t)*(unsigned int *)(v67 + 24) >> 4) & 0x1F);
                  xmlSchemaDateNormalize((__n128 *)a2, 0.0);
                  v71 = v70;
                  v72 = _xmlSchemaDateCastYMToDays(v70);
                  v73 = *(unsigned int *)(v71 + 24);
                  v74 = v72 + ((v73 >> 4) & 0x1F);
                  if (v74 >= v69)
                  {
                    if (v74 <= v69)
                    {
                      v75 = *(double *)(v71 + 32)
                          + (double)(int)(3600 * ((v73 >> 9) & 0x1F)
                                        + 60
                                        * (((v73 >> 14) & 0x3F)
                                         + ((__int16)(8 * *(_WORD *)(v71 + 40)) >> 4)))
                          - (*(double *)(v68 + 32)
                           + (double)(3600 * ((*(_DWORD *)(v68 + 24) >> 9) & 0x1F)
                                    + 60
                                    * (((*(_DWORD *)(v68 + 24) >> 14) & 0x3F)
                                     + ((__int16)(8 * *(_WORD *)(v68 + 40)) >> 4))));
                      if (v75 < 0.0)
                        goto LABEL_126;
                      if (v75 <= 0.0)
                      {
                        v8 = 0;
                        goto LABEL_155;
                      }
                    }
                    v8 = 1;
                    goto LABEL_155;
                  }
LABEL_126:
                  v8 = 0xFFFFFFFFLL;
LABEL_155:
                  xmlSchemaFreeValue((xmlSchemaValPtr)v71);
                  xmlSchemaFreeValue((xmlSchemaValPtr)v68);
                  return v8;
                }
                v76 = *(_DWORD *)a2 - 4;
                if (v76 > 7)
                  v77 = 0;
                else
                  v77 = dword_1B0862E14[v76];
                v78 = *(_DWORD *)a6 - 4;
                if (v78 > 7)
                  v79 = 0;
                else
                  v79 = dword_1B0862E14[v78];
                v80 = v79 ^ v77;
                if (((v79 ^ v77) & 1) == 0)
                {
                  v81 = v79 & v77;
                  if ((v81 & 1) != 0)
                  {
                    v82 = *(_QWORD *)(a2 + 16);
                    v83 = *(_QWORD *)(a6 + 16);
                    if (v82 < v83)
                      return 0xFFFFFFFFLL;
                    if (v82 > v83)
                      return 1;
                  }
                  if ((v80 & 2) == 0)
                  {
                    if ((v81 & 2) != 0)
                    {
                      if ((*(_DWORD *)(a2 + 24) & 0xFu) < (*(_DWORD *)(a6 + 24) & 0xFu))
                        return 0xFFFFFFFFLL;
                      if ((*(_DWORD *)(a2 + 24) & 0xFu) > (*(_DWORD *)(a6 + 24) & 0xFu))
                        return 1;
                    }
                    if ((v80 & 4) == 0)
                    {
                      if ((v81 & 4) != 0)
                      {
                        v84 = (*(_DWORD *)(a2 + 24) >> 4) & 0x1F;
                        v85 = (*(_DWORD *)(a6 + 24) >> 4) & 0x1F;
                        if (v84 < v85)
                          return 0xFFFFFFFFLL;
                        if (v84 > v85)
                          return 1;
                      }
                      if (v80 <= 7)
                      {
                        if (v81 < 8)
                          return 0;
                        v86 = *(_DWORD *)(a2 + 24);
                        v87 = (v86 >> 9) & 0x1F;
                        v88 = *(_DWORD *)(a6 + 24);
                        v89 = (v88 >> 9) & 0x1F;
                        if (v87 < v89)
                          return 0xFFFFFFFFLL;
                        if (v87 <= v89)
                        {
                          v90 = (v86 >> 14) & 0x3F;
                          v91 = (v88 >> 14) & 0x3F;
                          if (v90 < v91)
                            return 0xFFFFFFFFLL;
                          if (v90 <= v91)
                          {
                            v92 = *(double *)(a2 + 32);
                            v93 = *(double *)(a6 + 32);
                            if (v92 >= v93)
                              return v92 > v93;
                            return 0xFFFFFFFFLL;
                          }
                        }
                        return 1;
                      }
                    }
                  }
                }
                return 2;
              }
LABEL_167:
              v8 = 0;
              v27 = 1;
              goto LABEL_168;
            }
LABEL_120:
            v27 = 0;
            v8 = 1;
            goto LABEL_168;
          }
LABEL_99:
          xmlSchemaFreeValue((xmlSchemaValPtr)v18);
          xmlSchemaFreeValue((xmlSchemaValPtr)v15);
          return 0xFFFFFFFFLL;
        }
      }
      else
      {
        if ((v13 & 1) == 0)
          goto LABEL_122;
        xmlSchemaDateNormalize((__n128 *)a6, 0.0);
        v15 = v14;
        v16 = _xmlSchemaDateCastYMToDays(v14) + (((unint64_t)*(unsigned int *)(v14 + 24) >> 4) & 0x1F);
        xmlSchemaDateNormalize((__n128 *)a2, -50400.0);
        v18 = v17;
        v19 = _xmlSchemaDateCastYMToDays(v17);
        v20 = *(unsigned int *)(v18 + 24);
        v21 = v19 + ((v20 >> 4) & 0x1F);
        if (v21 < v16)
          goto LABEL_99;
        if (v21 == v16)
        {
          if (*(double *)(v18 + 32)
             + (double)(int)(3600 * ((v20 >> 9) & 0x1F)
                           + 60 * (((v20 >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v18 + 40)) >> 4)))
             - (*(double *)(v15 + 32)
              + (double)(3600 * ((*(_DWORD *)(v15 + 24) >> 9) & 0x1F)
                       + 60 * (((*(_DWORD *)(v15 + 24) >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v15 + 40)) >> 4)))) >= 0.0)
          {
            xmlSchemaDateNormalize((__n128 *)a2, 50400.0);
            v23 = v22;
            v24 = _xmlSchemaDateCastYMToDays(v22);
            v25 = *(unsigned int *)(v23 + 24);
            v26 = v24 + ((v25 >> 4) & 0x1F);
            if (v26 <= v16)
            {
              if (v26 == v16)
              {
                v27 = 0;
                v28 = *(double *)(v23 + 32)
                    + (double)(int)(3600 * ((v25 >> 9) & 0x1F)
                                  + 60
                                  * (((v25 >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v23 + 40)) >> 4)));
                v29 = (double)(3600 * ((*(_DWORD *)(v15 + 24) >> 9) & 0x1F)
                             + 60
                             * (((*(_DWORD *)(v15 + 24) >> 14) & 0x3F) + ((__int16)(8 * *(_WORD *)(v15 + 40)) >> 4)));
                v30 = *(double *)(v15 + 32);
                goto LABEL_164;
              }
              goto LABEL_167;
            }
            goto LABEL_120;
          }
          goto LABEL_99;
        }
      }
      xmlSchemaFreeValue((xmlSchemaValPtr)v18);
      xmlSchemaFreeValue((xmlSchemaValPtr)v15);
      goto LABEL_122;
    case 12:
      if (a5 != 12 || !a2 || !a6)
        return v8;
      return xmlSchemaCompareDurations(a2, a6);
    case 13:
    case 14:
      if (a5 - 13 > 1 || !a2 || !a6)
        return v8;
      if (*(_DWORD *)a2 == 13)
      {
        v39 = *(float *)(a2 + 16);
      }
      else
      {
        if (*(_DWORD *)a2 != 14)
          return v8;
        v39 = *(double *)(a2 + 16);
      }
      if (*(_DWORD *)a6 == 13)
      {
        v60 = *(float *)(a6 + 16);
      }
      else
      {
        if (*(_DWORD *)a6 != 14)
          return v8;
        v60 = *(double *)(a6 + 16);
      }
      IsNaN = xmlXPathIsNaN(v39);
      v62 = xmlXPathIsNaN(v60);
      if (IsNaN)
        return v62 == 0;
      if (v62)
        return 0xFFFFFFFFLL;
      if (v39 == xmlXPathPINF)
        return v60 != xmlXPathPINF;
      if (v60 == xmlXPathPINF)
        return 0xFFFFFFFFLL;
      if (v39 == xmlXPathNINF)
      {
        if (v60 == xmlXPathNINF)
          return 0;
        else
          return 0xFFFFFFFFLL;
      }
      if (v60 == xmlXPathNINF)
        return 1;
      if (v39 < v60)
        return 0xFFFFFFFFLL;
      if (v39 > v60)
        return 1;
      v12 = v39 != v60;
      return (2 * v12);
    case 15:
      if (a5 == 15 && a2 && a6)
      {
        v42 = *(_DWORD *)(a2 + 16);
        if (v42)
          v43 = 1;
        else
          v43 = -1;
        if (v42 == *(_DWORD *)(a6 + 16))
          return 0;
        else
          return v43;
      }
      return v8;
    case 19:
    case 25:
    case 27:
      v31 = *__xmlGenericError();
      v32 = *__xmlGenericErrorContext();
      v31(v32, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c", 5034);
      return v8;
    case 21:
    case 28:
      if (!a2 || !a6 || a5 != 28 && a5 != 21)
        return v8;
      if (xmlStrEqual(*(const xmlChar **)(a2 + 16), *(const xmlChar **)(a6 + 16))
        && xmlStrEqual(*(const xmlChar **)(a2 + 24), *(const xmlChar **)(a6 + 24)))
      {
        return 0;
      }
      return 2;
    case 43:
      if (a5 != 43 || !a2 || !a6)
        return v8;
      v44 = *(_DWORD *)(a2 + 24);
      v45 = *(_DWORD *)(a6 + 24);
      if (v44 == v45)
      {
        v46 = xmlStrcmp(*(const xmlChar **)(a2 + 16), *(const xmlChar **)(a6 + 16));
        v8 = v46 > 0;
        if ((v46 & 0x80000000) == 0)
          return v8;
        return 0xFFFFFFFFLL;
      }
      if (v44 <= v45)
        return 0xFFFFFFFFLL;
      return 1;
    case 44:
      if (a5 == 44 && a2 && a6)
      {
        v47 = *(_DWORD *)(a2 + 24);
        v48 = *(_DWORD *)(a6 + 24);
        if (v47 == v48)
        {
          v49 = xmlStrcmp(*(const xmlChar **)(a2 + 16), *(const xmlChar **)(a6 + 16));
          if (v49)
            v50 = -1;
          else
            v50 = 0;
          if (v49 >= 1)
            return 1;
          else
            return v50;
        }
        else if (v47 > v48)
        {
          return 1;
        }
        else
        {
          return 0xFFFFFFFFLL;
        }
      }
      return v8;
    default:
      return v8;
  }
}

int xmlSchemaCompareValuesWhtsp(xmlSchemaValPtr x, xmlSchemaWhitespaceValueType xws, xmlSchemaValPtr y, xmlSchemaWhitespaceValueType yws)
{
  if (x && y)
    return xmlSchemaCompareValuesInternal(*(_DWORD *)x, (uint64_t)x, 0, xws, *(_DWORD *)y, (uint64_t)y, 0, yws);
  else
    return -2;
}

unint64_t xmlSchemaGetFacetValueAsULong(unint64_t facet)
{
  uint64_t v1;

  if (facet)
  {
    v1 = *(_QWORD *)(facet + 56);
    if (v1)
      return *(_QWORD *)(v1 + 16);
    else
      return 0;
  }
  return facet;
}

int xmlSchemaValidateListSimpleTypeFacet(xmlSchemaFacetPtr facet, const xmlChar *value, unint64_t actualLen, unint64_t *expectedLen)
{
  xmlSchemaTypeType type;
  unint64_t v5;
  int result;

  if (!facet)
    return -1;
  type = facet->type;
  if (facet->type == XML_SCHEMA_FACET_MINLENGTH)
  {
    v5 = *((_QWORD *)facet->val + 2);
    if (v5 <= actualLen)
      return 0;
    result = 1831;
    if (expectedLen)
      goto LABEL_15;
  }
  else
  {
    if (type != XML_SCHEMA_FACET_MAXLENGTH)
    {
      if (type == XML_SCHEMA_FACET_LENGTH)
      {
        v5 = *((_QWORD *)facet->val + 2);
        if (v5 != actualLen)
        {
          result = 1830;
          if (!expectedLen)
            return result;
LABEL_15:
          *expectedLen = v5;
          return result;
        }
        return 0;
      }
      return -1;
    }
    v5 = *((_QWORD *)facet->val + 2);
    if (v5 >= actualLen)
      return 0;
    result = 1832;
    if (expectedLen)
      goto LABEL_15;
  }
  return result;
}

int xmlSchemaValidateFacet(xmlSchemaTypePtr base, xmlSchemaFacetPtr facet, const xmlChar *value, xmlSchemaValPtr val)
{
  unsigned int builtInType;
  int *v7;

  if (val)
  {
    builtInType = *(_DWORD *)val;
    v7 = (int *)facet;
    return xmlSchemaValidateFacetInternal(v7, 0, builtInType, (xmlChar *)value, (uint64_t)val, 0);
  }
  if (base)
  {
    builtInType = base->builtInType;
    v7 = (int *)facet;
    val = 0;
    return xmlSchemaValidateFacetInternal(v7, 0, builtInType, (xmlChar *)value, (uint64_t)val, 0);
  }
  return -1;
}

int xmlSchemaValidateLengthFacet(xmlSchemaTypePtr type, xmlSchemaFacetPtr facet, const xmlChar *value, xmlSchemaValPtr val, unint64_t *length)
{
  if (type)
    return xmlSchemaValidateLengthFacetInternal((uint64_t)facet, type->builtInType, (xmlChar *)value, val, length, 0);
  else
    return -1;
}

uint64_t xmlSchemaValidateLengthFacetInternal(uint64_t a1, unsigned int a2, xmlChar *utf, _DWORD *a4, _QWORD *a5, int a6)
{
  uint64_t result;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  xmlGenericErrorFunc v12;
  void **v13;

  result = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a5)
    {
      *a5 = 0;
      if ((*(_DWORD *)a1 - 1009) <= 2)
      {
        v9 = *(_QWORD *)(a1 + 56);
        if (v9)
        {
          v10 = *(_DWORD *)v9 == 33 || *(_DWORD *)v9 == 3;
          if (v10 && (*(_WORD *)(v9 + 44) & 0xFE) == 0)
          {
            if (a4 && (*a4 == 44 || *a4 == 43))
            {
              v11 = a4[6];
              goto LABEL_27;
            }
            if (a2 <= 0x1D)
            {
              if (((1 << a2) & 0x21D70000) != 0)
              {
                if (utf)
                {
LABEL_18:
                  v11 = xmlSchemaNormLen(utf);
                  goto LABEL_27;
                }
                goto LABEL_26;
              }
              if (((1 << a2) & 6) != 0)
              {
                if (a6)
                {
                  if (!utf)
                    goto LABEL_26;
                  if (a6 == 3)
                    goto LABEL_18;
                }
                else if (a2 != 1)
                {
                  goto LABEL_18;
                }
                v11 = xmlUTF8Strlen(utf);
LABEL_27:
                *a5 = v11;
                if (*(_DWORD *)a1 == 1011)
                {
                  if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) > (unint64_t)v11)
                    return 1831;
                }
                else if (*(_DWORD *)a1 == 1009)
                {
                  if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) != v11)
                    return 1830;
                }
                else if (*(_QWORD *)(*(_QWORD *)(a1 + 56) + 16) < (unint64_t)v11)
                {
                  return 1832;
                }
                return 0;
              }
              if (((1 << a2) & 0x10200000) != 0)
                return 0;
            }
            v12 = *__xmlGenericError();
            v13 = __xmlGenericErrorContext();
            v12(*v13, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c", 5335);
LABEL_26:
            v11 = 0;
            goto LABEL_27;
          }
        }
      }
    }
  }
  return result;
}

uint64_t xmlSchemaValidateFacetInternal(int *a1, int a2, unsigned int a3, xmlChar *str2, uint64_t a5, int a6)
{
  int v7;
  const xmlChar *v8;
  uint64_t result;
  uint64_t v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  xmlGenericErrorFunc v14;
  void **v15;
  unsigned int v16;
  BOOL v17;
  unsigned int v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  const xmlChar *v25;
  xmlGenericErrorFunc v26;
  void **v27;

  if (!a1)
    return 0xFFFFFFFFLL;
  v7 = *a1;
  v8 = str2;
  result = 0;
  switch(v7)
  {
    case 1000:
      v16 = xmlSchemaCompareValues((xmlSchemaValPtr)a5, *((xmlSchemaValPtr *)a1 + 7));
      v17 = v16 >= 2;
      v18 = 1833;
      goto LABEL_30;
    case 1001:
      v19 = xmlSchemaCompareValues((xmlSchemaValPtr)a5, *((xmlSchemaValPtr *)a1 + 7));
      v20 = v19 == 1;
      v21 = 1835;
      goto LABEL_52;
    case 1002:
      v16 = xmlSchemaCompareValues((xmlSchemaValPtr)a5, *((xmlSchemaValPtr *)a1 + 7));
      v17 = v16 + 1 >= 2;
      v18 = 1834;
LABEL_30:
      if (!v17)
        v18 = 0;
      if (v16 == -2)
        return 0xFFFFFFFFLL;
      else
        return v18;
    case 1003:
      v19 = xmlSchemaCompareValues((xmlSchemaValPtr)a5, *((xmlSchemaValPtr *)a1 + 7));
      v20 = v19 == -1;
      v21 = 1836;
      goto LABEL_52;
    case 1004:
    case 1005:
      v13 = *((_QWORD *)a1 + 7);
      if (!v13 || (*(_DWORD *)v13 - 33) > 1)
        return 0xFFFFFFFFLL;
      result = 0xFFFFFFFFLL;
      if (!a5 || (*(_WORD *)(v13 + 44) & 0xFE) != 0 || (*(_DWORD *)a5 - 30) >= 0xD && *(_DWORD *)a5 != 3)
        return result;
      if (v7 != 1005)
      {
        if (v7 == 1004 && *(_QWORD *)(v13 + 16) < (unint64_t)*(unsigned __int8 *)(a5 + 45))
          return 1837;
        return 0;
      }
      if (*(_QWORD *)(v13 + 16) >= (unint64_t)(*(_WORD *)(a5 + 44) >> 1))
        return 0;
      return 1838;
    case 1006:
      if (!str2)
        return 0xFFFFFFFFLL;
      if (a5)
      {
        if (*(_QWORD *)(a5 + 16))
        {
          v22 = *(_DWORD *)a5;
          if ((*(_DWORD *)a5 - 1) < 2 || v22 != 21 && (v22 - 28) >= 0xFFFFFFF4)
            v8 = *(const xmlChar **)(a5 + 16);
        }
      }
      v23 = xmlRegexpExec(*((xmlRegexpPtr *)a1 + 8), v8);
      if (v23)
        v24 = v23;
      else
        v24 = 1839;
      if (v23 == 1)
        return 0;
      else
        return v24;
    case 1007:
      if (a6)
      {
        v19 = xmlSchemaCompareValuesInternal(**((_DWORD **)a1 + 7), *((_QWORD *)a1 + 7), *((xmlChar **)a1 + 2), a2, a3, a5, str2, a6);
        v20 = v19 == 0;
        v21 = 1840;
LABEL_52:
        if (v20)
          v21 = 0;
        if (v19 == -2)
          return 0xFFFFFFFFLL;
        else
          return v21;
      }
      v25 = (const xmlChar *)*((_QWORD *)a1 + 2);
      if (!v25 || !xmlStrEqual(v25, str2))
        return 1840;
      return 0;
    case 1008:
      return result;
    case 1009:
    case 1010:
    case 1011:
      result = 0;
      if (a3 == 21 || a3 == 28)
        return result;
      v10 = *((_QWORD *)a1 + 7);
      if (!v10)
        return 0xFFFFFFFFLL;
      v11 = *(_DWORD *)v10 == 33 || *(_DWORD *)v10 == 3;
      if (!v11 || (*(_WORD *)(v10 + 44) & 0xFE) != 0)
        return 0xFFFFFFFFLL;
      if (a5 && (*(_DWORD *)a5 == 44 || *(_DWORD *)a5 == 43))
      {
        v12 = *(_DWORD *)(a5 + 24);
        goto LABEL_76;
      }
      if (a3 > 0x1D)
        goto LABEL_74;
      if (((1 << a3) & 0x21D70000) != 0)
      {
        if (str2)
        {
LABEL_66:
          v12 = xmlSchemaNormLen(str2);
          goto LABEL_76;
        }
        goto LABEL_75;
      }
      if (((1 << a3) & 6) == 0)
      {
LABEL_74:
        v26 = *__xmlGenericError();
        v27 = __xmlGenericErrorContext();
        v26(*v27, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c", 5589);
        goto LABEL_75;
      }
      if (a6)
      {
        if (str2)
        {
          if (a6 == 3)
            goto LABEL_66;
          goto LABEL_85;
        }
LABEL_75:
        v12 = 0;
        goto LABEL_76;
      }
      if (a3 != 1)
        goto LABEL_66;
LABEL_85:
      v12 = xmlUTF8Strlen(str2);
LABEL_76:
      if (*a1 == 1011)
      {
        if (*(_QWORD *)(*((_QWORD *)a1 + 7) + 16) <= (unint64_t)v12)
          return 0;
        return 1831;
      }
      else
      {
        if (*a1 == 1009)
        {
          if (*(_QWORD *)(*((_QWORD *)a1 + 7) + 16) != v12)
            return 1830;
          return 0;
        }
        if (*(_QWORD *)(*((_QWORD *)a1 + 7) + 16) >= (unint64_t)v12)
          return 0;
        return 1832;
      }
    default:
      v14 = *__xmlGenericError();
      v15 = __xmlGenericErrorContext();
      v14(*v15, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xmlschemastypes.c", 5640);
      return 0;
  }
}

int xmlSchemaGetCanonValue(xmlSchemaValPtr val, const xmlChar **retValue)
{
  int result;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  size_t v11;
  xmlChar *v12;
  const char *v13;
  const xmlChar *v14;
  xmlChar *v15;
  char *v16;
  const xmlChar *v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  size_t v27;
  _BYTE *v28;
  const xmlChar *v29;
  char *v30;
  size_t v31;
  unsigned int v32;
  const char *v33;
  size_t v34;
  xmlChar *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  double v42;
  double v43;
  unint64_t v44;
  double v45;
  double v46;
  unint64_t v47;
  double v48;
  unint64_t v49;
  size_t v50;
  xmlChar *v51;
  xmlChar *v52;
  xmlChar *v53;
  xmlChar *v54;
  uint64_t v55;
  xmlSchemaVal *v56;
  unsigned int v57;
  const char *v58;
  uint64_t v59;
  unsigned int v60;
  size_t v61;
  uint64_t v62;
  unsigned int v63;
  const char *v65;
  xmlChar *v66;
  unsigned int v67;
  size_t v68;
  char *v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char __str[16];
  _OWORD v81[2];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  result = -1;
  if (!val || !retValue)
    return result;
  *retValue = 0;
  switch(*(_DWORD *)val)
  {
    case 1:
      v16 = (char *)*((_QWORD *)val + 2);
      if (v16)
        goto LABEL_102;
      goto LABEL_75;
    case 2:
      v17 = (const xmlChar *)*((_QWORD *)val + 2);
      if (!v17)
      {
LABEL_75:
        v16 = &byte_1B0865C1A;
        goto LABEL_102;
      }
      v15 = xmlSchemaWhiteSpaceReplace(v17);
LABEL_14:
      *retValue = v15;
      if (!v15)
      {
LABEL_15:
        v16 = (char *)*((_QWORD *)val + 2);
        goto LABEL_102;
      }
      goto LABEL_109;
    case 3:
      v18 = *((unsigned __int16 *)val + 22);
      if ((v18 & 0xFF00) == 0x100 && *((_QWORD *)val + 2) == 0)
      {
        v16 = "0.0";
        goto LABEL_102;
      }
      v20 = *((_QWORD *)val + 3);
      v21 = *((_QWORD *)val + 4);
      v22 = v18 >> 8;
      if ((v18 & 1) != 0)
        v23 = 3;
      else
        v23 = 2;
      v24 = v23 + (v18 >> 8);
      v25 = v18 >> 1;
      if (v18 >> 1)
        v26 = v22 == (_DWORD)v25;
      else
        v26 = 1;
      if (v26)
        v27 = v24 + 1;
      else
        v27 = v24;
      v28 = xmlMalloc(v27);
      if (!v28)
        return -1;
      v29 = v28;
      v30 = v28;
      if ((v18 & 1) != 0)
      {
        *v28 = 45;
        v30 = v28 + 1;
      }
      if (v22 == (_DWORD)v25)
      {
        *(_WORD *)v30 = 11824;
        v30 += 2;
      }
      v31 = &v28[v27] - v30;
      if (v21)
      {
        snprintf(v30, v31, "%lu%lu%lu");
      }
      else if (v20)
      {
        snprintf(v30, v31, "%lu%lu");
      }
      else
      {
        snprintf(v30, v31, "%lu");
      }
      if (!(v18 >> 1))
      {
        v69 = (char *)&v29[v27 - 3];
        *(_WORD *)&v29[v27 - 2] = 48;
LABEL_124:
        *v69 = 46;
        goto LABEL_125;
      }
      if (v22 != (_DWORD)v25)
      {
        v69 = &v30[(int)(v22 - v25)];
        memmove(v69 + 1, v69, v25 + 1);
        goto LABEL_124;
      }
      v67 = -1;
      do
        ++v67;
      while (v30[v67]);
      v68 = v22 - v67;
      if (v22 > v67)
      {
        memmove(&v30[v68], v30, v67 + 1);
        memset(v30, 48, v68);
      }
LABEL_125:
      *retValue = v29;
LABEL_109:
      if (*retValue)
        return 0;
      else
        return -1;
    case 4:
      memset(__str, 0, sizeof(__str));
      *(_QWORD *)((char *)v81 + 6) = 0;
      *(_QWORD *)&v81[0] = 0;
      if ((*((_BYTE *)val + 40) & 1) == 0)
      {
        v32 = *((_DWORD *)val + 6);
        v75 = *((_QWORD *)val + 4);
        *(_QWORD *)&v71 = (v32 >> 9) & 0x1F;
        v73 = (v32 >> 14) & 0x3F;
        v33 = "%02u:%02u:%02.14g";
        goto LABEL_68;
      }
      xmlSchemaDateNormalize((__n128 *)val, 0.0);
      if (!v55)
        return -1;
      v56 = (xmlSchemaVal *)v55;
      v57 = *(_DWORD *)(v55 + 24);
      v76 = *(_QWORD *)(v55 + 32);
      v72 = (v57 >> 9) & 0x1F;
      v74 = (v57 >> 14) & 0x3F;
      v58 = "%02u:%02u:%02.14gZ";
      goto LABEL_83;
    case 5:
      v12 = (xmlChar *)xmlMalloc(6uLL);
      *retValue = v12;
      if (!v12)
        return -1;
      v70 = (*((_DWORD *)val + 6) >> 4) & 0x1F;
      v13 = "---%02u";
      goto LABEL_51;
    case 6:
      v12 = (xmlChar *)xmlMalloc(6uLL);
      *retValue = v12;
      if (!v12)
        return -1;
      v70 = *((_DWORD *)val + 6) & 0xF;
      v13 = "--%02u";
LABEL_51:
      v34 = 6;
      goto LABEL_108;
    case 7:
      v35 = (xmlChar *)xmlMalloc(8uLL);
      *retValue = v35;
      if (!v35)
        return -1;
      snprintf((char *)v35, 8uLL, "--%02u-%02u");
      goto LABEL_109;
    case 8:
      memset(__str, 0, sizeof(__str));
      *(_QWORD *)((char *)v81 + 6) = 0;
      *(_QWORD *)&v81[0] = 0;
      v71 = *((double *)val + 2);
      v33 = "%04ld";
      goto LABEL_68;
    case 9:
      *(_OWORD *)__str = 0u;
      memset(v81, 0, 19);
      v36 = *((_QWORD *)val + 2);
      if (v36 < 0)
      {
        *(_QWORD *)&v71 = -v36;
        v73 = *((_DWORD *)val + 6) & 0xF;
        v33 = "-%04ld-%02u";
      }
      else
      {
        v71 = *((double *)val + 2);
        v73 = *((_DWORD *)val + 6) & 0xF;
        v33 = "%04ld-%02u";
      }
      v50 = 35;
      goto LABEL_100;
    case 0xA:
      memset(__str, 0, sizeof(__str));
      *(_QWORD *)((char *)v81 + 6) = 0;
      *(_QWORD *)&v81[0] = 0;
      if ((*((_BYTE *)val + 40) & 1) == 0)
      {
        v37 = *((_DWORD *)val + 6);
        v73 = v37 & 0xF;
        v75 = (v37 >> 4) & 0x1F;
        v71 = *((double *)val + 2);
        v33 = "%04ld-%02u-%02u";
LABEL_68:
        v50 = 30;
LABEL_100:
        snprintf(__str, v50, v33, *(_QWORD *)&v71, v73, v75, v77, v78, v79, *(_QWORD *)__str, *(_QWORD *)&__str[8], v81[0], v81[1], v82, v83, v84, v85);
        goto LABEL_101;
      }
      xmlSchemaDateNormalize((__n128 *)val, 0.0);
      if (!v59)
        return -1;
      v56 = (xmlSchemaVal *)v59;
      v60 = *(_DWORD *)(v59 + 24);
      v74 = v60 & 0xF;
      v76 = (v60 >> 4) & 0x1F;
      v72 = *(_QWORD *)(v59 + 16);
      v58 = "%04ld-%02u-%02uZ";
LABEL_83:
      v61 = 30;
      goto LABEL_86;
    case 0xB:
      LOWORD(v82) = 0;
      memset(v81, 0, sizeof(v81));
      *(_OWORD *)__str = 0u;
      if ((*((_WORD *)val + 20) & 1) == 0)
      {
        snprintf(__str, 0x32uLL, "%04ld-%02u-%02uT%02u:%02u:%02.14g");
        goto LABEL_101;
      }
      xmlSchemaDateNormalize((__n128 *)val, 0.0);
      if (!v62)
        return -1;
      v56 = (xmlSchemaVal *)v62;
      v63 = *(_DWORD *)(v62 + 24);
      v79 = *(_QWORD *)(v62 + 32);
      v77 = (v63 >> 9) & 0x1F;
      v78 = (v63 >> 14) & 0x3F;
      v74 = v63 & 0xF;
      v76 = (v63 >> 4) & 0x1F;
      v72 = *(_QWORD *)(v62 + 16);
      v58 = "%04ld-%02u-%02uT%02u:%02u:%02.14gZ";
      v61 = 50;
LABEL_86:
      snprintf(__str, v61, v58, v72, v74, v76, v77, v78, v79, *(_QWORD *)__str, *(_QWORD *)&__str[8], v81[0], v81[1], (_QWORD)v82);
      xmlSchemaFreeValue(v56);
      goto LABEL_101;
    case 0xC:
      LODWORD(v85) = 0;
      v83 = 0u;
      v84 = 0u;
      v82 = 0u;
      *(_OWORD *)__str = 0u;
      memset(v81, 0, sizeof(v81));
      v38 = *((_QWORD *)val + 2);
      if (v38 >= 0)
        v39 = *((_QWORD *)val + 2);
      else
        v39 = -v38;
      v40 = vcvtmd_u64_f64((double)v39 / 12.0);
      v41 = v39 - 12 * v40;
      v42 = *((double *)val + 4);
      v43 = fabs(v42);
      v44 = vcvtmd_u64_f64(v43 / 86400.0);
      v45 = v43 - (double)(86400 * v44);
      v46 = 0.0;
      if (v45 <= 0.0)
      {
        v47 = 0;
      }
      else
      {
        v47 = vcvtmd_u64_f64(v45 / 3600.0);
        v48 = v45 - (double)(3600 * v47);
        if (v48 > 0.0)
        {
          v49 = vcvtmd_u64_f64(v48 / 60.0);
          v46 = v48 - (double)(60 * v49);
          goto LABEL_90;
        }
      }
      v49 = 0;
LABEL_90:
      if (v42 < 0.0 || v38 < 0)
        v65 = "P%luY%luM%luDT%luH%luM%.14gS";
      else
        v65 = "-P%luY%luM%luDT%luH%luM%.14gS";
      snprintf(__str, 0x64uLL, v65, v40, v41, v44, v47, v49, *(_QWORD *)&v46, *(_QWORD *)__str, *(_QWORD *)&__str[8], v81[0], v81[1], v82, v83, v84, v85);
LABEL_101:
      v16 = __str;
      goto LABEL_102;
    case 0xD:
      memset(__str, 0, sizeof(__str));
      *(_QWORD *)((char *)v81 + 6) = 0;
      *(_QWORD *)&v81[0] = 0;
      v71 = *((float *)val + 4);
      v33 = "%01.14e";
      goto LABEL_68;
    case 0xE:
      snprintf(__str, 0x28uLL, "%01.14e");
      goto LABEL_101;
    case 0xF:
      if (*((_DWORD *)val + 4))
        v16 = "true";
      else
        v16 = "false";
      goto LABEL_102;
    case 0x10:
    case 0x11:
    case 0x12:
    case 0x14:
    case 0x16:
    case 0x17:
    case 0x18:
    case 0x1A:
    case 0x1C:
    case 0x1D:
      v14 = (const xmlChar *)*((_QWORD *)val + 2);
      if (!v14)
        return -1;
      v15 = xmlSchemaCollapseString(v14);
      goto LABEL_14;
    case 0x15:
      if (*((_QWORD *)val + 3))
      {
        v51 = xmlStrdup((const xmlChar *)"{");
        *retValue = v51;
        v52 = xmlStrcat(v51, *((const xmlChar **)val + 3));
        *retValue = v52;
        v53 = xmlStrcat(v52, (const xmlChar *)"}");
        *retValue = v53;
        v54 = xmlStrcat(v53, *((const xmlChar **)val + 3));
        goto LABEL_103;
      }
      v66 = xmlStrdup(*((const xmlChar **)val + 2));
      result = 0;
      *retValue = v66;
      return result;
    case 0x1E:
    case 0x1F:
    case 0x20:
    case 0x21:
    case 0x22:
    case 0x23:
    case 0x24:
    case 0x25:
    case 0x26:
    case 0x27:
    case 0x28:
    case 0x29:
    case 0x2A:
      v5 = *((unsigned __int16 *)val + 22);
      v6 = *((_QWORD *)val + 2);
      if ((v5 & 0xFF00) == 0x100 && v6 == 0)
      {
        v16 = "0";
LABEL_102:
        v54 = xmlStrdup((const xmlChar *)v16);
LABEL_103:
        *retValue = v54;
      }
      else
      {
        v8 = *((_QWORD *)val + 3);
        v9 = *((_QWORD *)val + 4);
        v10 = v5 & 1;
        v11 = v10 + (v5 >> 8) + 1;
        v12 = (xmlChar *)xmlMalloc(v11);
        *retValue = v12;
        if (!v12)
          return -1;
        if (v9)
        {
          v73 = v8;
          v75 = v6;
          v70 = v9;
          if (v10)
            v13 = "-%lu%lu%lu";
          else
            v13 = "%lu%lu%lu";
        }
        else if (v8)
        {
          v70 = v8;
          v73 = v6;
          if (v10)
            v13 = "-%lu%lu";
          else
            v13 = "%lu%lu";
        }
        else
        {
          v70 = v6;
          if (v10)
            v13 = "-%lu";
          else
            v13 = "%lu";
        }
        v34 = v11;
LABEL_108:
        snprintf((char *)v12, v34, v13, v70, v73, v75);
      }
      goto LABEL_109;
    case 0x2B:
    case 0x2C:
      goto LABEL_15;
    default:
      *retValue = xmlStrdup((const xmlChar *)"???");
      return 1;
  }
}

void xmlSchemaDateNormalize(__n128 *a1, double a2)
{
  BOOL v3;
  double *v5;
  double *v6;
  unsigned __int32 v7;
  xmlSchemaVal *v8;
  xmlSchemaVal *v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  double v13;
  unsigned int v14;
  unsigned int v15;
  int64_t v16;
  __int16 v17;
  double v18;
  unint64_t v19;
  double v20;
  double v21;
  unsigned int v22;
  double v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  unint64_t v40;
  unsigned int *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  uint64_t v46;
  int v47;
  int v48;
  int v49;

  v3 = a1->n128_u32[0] > 0xB || ((1 << a1->n128_u32[0]) & 0xC10) == 0;
  if (v3 || (a1[2].n128_u16[4] & 0x1FFE) == 0)
  {
    xmlSchemaDupVal(a1);
    return;
  }
  v5 = (double *)xmlMalloc(0x30uLL);
  if (v5)
  {
    v6 = v5;
    *((_OWORD *)v5 + 1) = 0u;
    *((_OWORD *)v5 + 2) = 0u;
    *(_OWORD *)v5 = 0u;
    *(_DWORD *)v5 = 12;
    v5[4] = v5[4] - a2;
    v7 = a1->n128_u32[0];
    v8 = (xmlSchemaVal *)xmlMalloc(0x30uLL);
    v9 = v8;
    if (v8)
    {
      *((_OWORD *)v8 + 1) = 0u;
      *((_OWORD *)v8 + 2) = 0u;
      *(_OWORD *)v8 = 0u;
      *(_DWORD *)v8 = v7;
      xmlSchemaDupVal(a1);
      if (!v10)
      {
        xmlSchemaFreeValue(v9);
        return;
      }
      v11 = *(_DWORD *)(v10 + 24);
      if ((v11 & 0xF) == 0)
        *(_DWORD *)(v10 + 24) = v11 & 0xFFFFFFF0 | 1;
      v6[4] = v6[4] - (double)(60 * (*(unsigned __int16 *)(v10 + 40) << 19 >> 20));
      *(_WORD *)(v10 + 40) &= 0xE001u;
      v12 = *(_DWORD *)(v10 + 24);
      if ((v12 & 0x1F0) == 0)
      {
        v12 = v12 & 0xFFFFFE0F | 0x10;
        *(_DWORD *)(v10 + 24) = v12;
      }
      v13 = (double)(*((_QWORD *)v6 + 2) + (v12 & 0xF) - 1);
      v14 = (v13 - floor(v13 / 12.0) * 12.0 + 1.0);
      v15 = *((_DWORD *)v9 + 6) & 0xFFFFFFF0 | v14 & 0xF;
      *((_DWORD *)v9 + 6) = v15;
      v16 = *(_QWORD *)(v10 + 16) + vcvtmd_s64_f64(v13 / 12.0);
      *((_QWORD *)v9 + 2) = v16;
      if (!v16)
      {
        v16 = 1;
        if (*(uint64_t *)(v10 + 16) >= 1)
          v16 = -1;
        *((_QWORD *)v9 + 2) = v16;
      }
      v17 = *((_WORD *)v9 + 20) & 0xE001 | (2 * ((*(_WORD *)(v10 + 40) >> 1) & 0xFFF));
      *((_WORD *)v9 + 20) = v17;
      *((_WORD *)v9 + 20) = v17 & 0xFFFE | *(_WORD *)(v10 + 40) & 1;
      v18 = *(double *)(v10 + 32) + v6[4];
      v19 = vcvtmd_s64_f64((double)(uint64_t)v18 / 60.0);
      v20 = floor(v18 / 60.0);
      if (v18 != 0.0)
        v18 = v18 - v20 * 60.0;
      *((double *)v9 + 4) = v18;
      v21 = (double)(uint64_t)((((unint64_t)*(unsigned int *)(v10 + 24) >> 14) & 0x3F) + v19);
      v22 = v15 & 0xFFF03FFF | (((v21 - floor(v21 / 60.0) * 60.0) & 0x3F) << 14);
      *((_DWORD *)v9 + 6) = v22;
      v23 = (double)(uint64_t)(vcvtmd_s64_f64(v21 / 60.0) + (((unint64_t)*(unsigned int *)(v10 + 24) >> 9) & 0x1F));
      v24 = v22 & 0xFFFFC1FF | (((v23 - floor(v23 / 24.0) * 24.0) & 0x1F) << 9);
      *((_DWORD *)v9 + 6) = v24;
      v25 = vcvtmd_s64_f64(v23 / 24.0);
      v26 = (v14 & 0xF) - 1;
      v27 = *(_DWORD *)(v10 + 24);
      if (v26 > 0xB
        || ((v16 & 3) != 0 || !(v16 % 100)
          ? (__ROR8__(0x8F5C28F5C28F5C29 * v16 + 0x51EB851EB851EB0, 4) <= 0xA3D70A3D70A3D6uLL
           ? (v28 = daysInMonthLeap[v26])
           : (v28 = daysInMonth[v26]))
          : (v28 = daysInMonthLeap[v26]),
            ((v27 >> 4) & 0x1F) <= v28))
      {
        v28 = (v27 >> 4) & 0x1F;
        if (((v27 >> 4) & 0x1E) == 0)
          v28 = 1;
      }
      v29 = *((_QWORD *)v6 + 3) + v25 + v28;
      while (1)
      {
        if (v29 <= 0)
        {
          v30 = v24 & 0xF;
          v33 = (double)(int)(v30 - 2);
          v34 = (uint64_t)(v33 - floor(v33 / 12.0) * 12.0 + 1.0);
          v35 = v16 + vcvtmd_s64_f64(v33 / 12.0);
          if (!v35)
            v35 = -1;
          if (v34 <= 1)
            v34 = 1;
          if ((unint64_t)v34 >= 0xC)
            v34 = 12;
          v36 = 0x8F5C28F5C28F5C29 * v35;
          v37 = __ROR8__(0x8F5C28F5C28F5C29 * v35 + 0x51EB851EB851EB8, 2);
          v38 = v35 & 3;
          v39 = v37 > 0x28F5C28F5C28F5CLL && v38 == 0;
          v40 = __ROR8__(v36 + 0x51EB851EB851EB0, 4);
          if (!v39 && v40 >= 0xA3D70A3D70A3D7)
            v42 = daysInMonth;
          else
            v42 = daysInMonthLeap;
          v29 += v42[v34 - 1];
          v43 = -1;
        }
        else
        {
          v30 = v24 & 0xF;
          v31 = v30 - 1;
          if (v31 > 0xB
            || ((v16 & 3) != 0 || !(v16 % 100)
              ? (__ROR8__(0x51EB851EB851EB0 - 0x70A3D70A3D70A3D7 * v16, 4) <= 0xA3D70A3D70A3D6uLL
               ? (v32 = daysInMonthLeap[v31])
               : (v32 = daysInMonth[v31]))
              : (v32 = daysInMonthLeap[v31]),
                v29 <= v32))
          {
            *((_DWORD *)v9 + 6) = v24 & 0xFFFFFE0F | (16 * (v29 & 0x1F));
            v47 = *(_DWORD *)v9;
            if (*(_DWORD *)v9 != 11)
            {
              v48 = 11;
              if (v18 != 0.0 || (v24 & 0xFFE00) != 0)
              {
LABEL_75:
                *(_DWORD *)v9 = v48;
              }
              else if (v47 != 10)
              {
                v49 = v24 & 0xF;
                if (v49 != 1 && (v29 & 0x1F) != 1)
                {
                  v48 = 10;
                  goto LABEL_75;
                }
                if (v49 != 1 && v47 != 9)
                {
                  v48 = 9;
                  goto LABEL_75;
                }
              }
            }
            xmlSchemaFreeValue((xmlSchemaValPtr)v10);
            xmlSchemaFreeValue((xmlSchemaValPtr)v6);
            return;
          }
          v29 -= v32;
          v43 = 1;
        }
        v44 = v43 + v30;
        v45 = (double)(v44 - 1);
        v24 = v24 & 0xFFFFFFF0 | (v45 - floor(v45 / 12.0) * 12.0 + 1.0) & 0xF;
        *((_DWORD *)v9 + 6) = v24;
        v16 += vcvtmd_s64_f64(v45 / 12.0);
        if (v44 < 1)
          v46 = -1;
        else
          v46 = 1;
        if (!v16)
          v16 = v46;
        *((_QWORD *)v9 + 2) = v16;
      }
    }
  }
}

int xmlSchemaGetCanonValueWhtsp(xmlSchemaValPtr val, const xmlChar **retValue, xmlSchemaWhitespaceValueType ws)
{
  int result;
  const xmlChar *v6;
  xmlChar *v7;
  const xmlChar *v8;
  xmlChar *v9;

  result = -1;
  if (val && retValue && ws - 4 >= 0xFFFFFFFD)
  {
    *retValue = 0;
    if (*(_DWORD *)val == 2)
    {
      v6 = (const xmlChar *)*((_QWORD *)val + 2);
      if (!v6)
      {
        v8 = (const xmlChar *)&byte_1B0865C1A;
        goto LABEL_20;
      }
      if (ws == XML_SCHEMA_WHITESPACE_COLLAPSE)
      {
LABEL_12:
        v7 = xmlSchemaCollapseString(v6);
        goto LABEL_16;
      }
    }
    else
    {
      if (*(_DWORD *)val != 1)
        return xmlSchemaGetCanonValue(val, retValue);
      v6 = (const xmlChar *)*((_QWORD *)val + 2);
      if (!v6)
      {
        v7 = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
LABEL_16:
        *retValue = v7;
        if (v7)
          return 0;
        goto LABEL_18;
      }
      if (ws != XML_SCHEMA_WHITESPACE_REPLACE)
      {
        if (ws != XML_SCHEMA_WHITESPACE_COLLAPSE)
        {
LABEL_18:
          v8 = (const xmlChar *)*((_QWORD *)val + 2);
LABEL_20:
          v9 = xmlStrdup(v8);
          result = 0;
          *retValue = v9;
          return result;
        }
        goto LABEL_12;
      }
    }
    v7 = xmlSchemaWhiteSpaceReplace(v6);
    goto LABEL_16;
  }
  return result;
}

xmlSchemaValType xmlSchemaGetValType(xmlSchemaValPtr val)
{
  if (val)
    LODWORD(val) = *(_DWORD *)val;
  return val;
}

uint64_t xmlSchemaParseUInt(unsigned __int8 **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  int v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned __int8 *v26;
  unsigned int v27;

  v4 = *a1;
  v5 = **a1;
  if ((v5 - 48) > 9)
    return 4294967294;
  if (v5 == 48)
  {
    do
    {
      v6 = *++v4;
      v7 = v6 - 48;
    }
    while (v6 == 48);
    if (v7 > 9)
    {
      v19 = 0;
      v12 = 0;
      v13 = 0;
      v20 = 0;
LABEL_22:
      *a1 = v4;
      *a2 = v20;
      *a3 = v19;
      *a4 = v13;
      return v12;
    }
  }
  LODWORD(v8) = -17;
  v9 = v4;
  do
  {
    v10 = *++v9;
    v8 = (v8 + 1);
  }
  while ((v10 - 48) < 0xA);
  v11 = v8 + 16;
  if ((v8 + 16) <= 0x17)
  {
    v12 = (v8 + 17);
    if (v11 < 0x10)
    {
      v13 = 0;
      v19 = 0;
      v18 = v12;
      v21 = v12;
      if (v11 < 8)
      {
LABEL_19:
        v20 = 0;
        v25 = v21 + 1;
        v26 = v4;
        do
        {
          v27 = *v26++;
          v20 = v27 + 10 * v20 - 48;
          --v25;
        }
        while (v25 > 1);
        v4 += v21;
        goto LABEL_22;
      }
    }
    else
    {
      v13 = 0;
      v14 = v8 + 1;
      v15 = v12;
      v16 = v4;
      do
      {
        v17 = *v16++;
        v13 = v17 + 10 * v13 - 48;
        --v15;
      }
      while (v15 > 0x10);
      v4 += v14;
      v18 = 16;
    }
    v19 = 0;
    v22 = v18 - 9 + 1;
    v23 = v4;
    do
    {
      v24 = *v23++;
      v19 = v24 + 10 * v19 - 48;
      --v18;
    }
    while (v18 > 8);
    v4 += v22;
    v21 = 8;
    goto LABEL_19;
  }
  *a1 = v9;
  return 0xFFFFFFFFLL;
}

uint64_t xmlSchemaValidateDuration(unsigned __int8 *a1, _QWORD *a2)
{
  unsigned int v3;
  BOOL v4;
  unsigned __int8 *v5;
  _BYTE *v6;
  int v7;
  void *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  double v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  int v20;
  double v21;
  int v22;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  double v35;

  if (!a1)
    return 0xFFFFFFFFLL;
  while (1)
  {
    v3 = *a1;
    v4 = v3 > 0x20 || ((1 << v3) & 0x100002600) == 0;
    if (v4)
      break;
    ++a1;
  }
  if (v3 == 45)
    v5 = a1 + 1;
  else
    v5 = a1;
  v7 = *v5;
  v6 = v5 + 1;
  if (v7 != 80 || !*v6)
    return 1;
  v8 = xmlMalloc(0x30uLL);
  if (!v8)
    return 0xFFFFFFFFLL;
  *((_OWORD *)v8 + 1) = 0u;
  *((_OWORD *)v8 + 2) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_DWORD *)v8 = 12;
  v9 = *v6;
  if (*v6)
  {
    v10 = 0;
    v11 = 0u;
    v12 = 0.0;
    while (v11 <= 5)
    {
      if (v9 == 84)
      {
        if (v11 > 3)
          goto LABEL_65;
        v13 = *++v6;
        v9 = v13;
        v11 = 3u;
      }
      else if (v11 == 3)
      {
        goto LABEL_65;
      }
      if ((v9 - 48) <= 9)
      {
        v14 = 0;
        while (v14 <= 0xCCCCCCCCCCCCCCCLL)
        {
          v15 = (v9 - 48);
          v16 = 10 * v14;
          if (v16 > (v15 ^ 0x7FFFFFFFFFFFFFFFLL))
            break;
          v14 = v15 + v16;
          v17 = *++v6;
          v9 = v17;
          if ((v17 - 48) >= 0xA)
          {
            v18 = 1;
            goto LABEL_27;
          }
        }
        goto LABEL_65;
      }
      v14 = 0;
      v18 = 0;
LABEL_27:
      if (v9 == 46)
      {
        v20 = *++v6;
        v19 = v20;
        if ((v20 - 48) <= 9)
        {
          v21 = 1.0;
          do
          {
            v21 = v21 / 10.0;
            v12 = v12 + (double)(v19 - 48) * v21;
            v22 = *++v6;
            v19 = v22;
          }
          while ((v22 - 48) < 0xA);
          v18 = 1;
        }
      }
      else
      {
        v19 = v9;
      }
      while (v19 != aYmdhms[v11])
      {
        if (v11 != 2)
        {
          v4 = v11++ == 5;
          if (!v4)
            continue;
        }
        goto LABEL_65;
      }
      v24 = v9 == 46 && v11 != 5;
      if (!v18 || v24)
        goto LABEL_65;
      switch(v11)
      {
        case 0u:
          if (v14 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_65;
          v25 = 12 * v14;
          goto LABEL_51;
        case 1u:
          v26 = *((_QWORD *)v8 + 2);
          if (v26 > (v14 ^ 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_65;
          v25 = v26 + v14;
LABEL_51:
          *((_QWORD *)v8 + 2) = v25;
          break;
        case 2u:
          *((_QWORD *)v8 + 3) = v14;
          break;
        case 3u:
          v27 = *((_QWORD *)v8 + 3);
          if (v27 > ((v14 / 24) ^ 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_65;
          *((_QWORD *)v8 + 3) = v27 + v14 / 24;
          v10 = 3600 * (v14 % 24);
          break;
        case 4u:
          v28 = *((_QWORD *)v8 + 3);
          if (v28 > ((v14 / 1440) ^ 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_65;
          *((_QWORD *)v8 + 3) = v28 + v14 / 1440;
          v10 += 60 * (v14 % 1440);
          break;
        case 5u:
          v29 = *((_QWORD *)v8 + 3);
          if (v29 > ((v14 / 86400) ^ 0x7FFFFFFFFFFFFFFFLL))
            goto LABEL_65;
          *((_QWORD *)v8 + 3) = v29 + v14 / 86400;
          v10 += v14 % 86400;
          break;
        default:
          break;
      }
      ++v11;
      v30 = *++v6;
      v9 = v30;
      if (!v30)
        goto LABEL_64;
    }
    goto LABEL_65;
  }
  v10 = 0;
  v12 = 0.0;
LABEL_64:
  v32 = *((_QWORD *)v8 + 3);
  if (v32 > ((v10 / 86400) ^ 0x7FFFFFFFFFFFFFFFLL))
  {
LABEL_65:
    xmlSchemaFreeValue((xmlSchemaValPtr)v8);
    return 1;
  }
  v34 = v32 + v10 / 86400;
  *((_QWORD *)v8 + 3) = v34;
  v35 = v12 + (double)(v10 % 86400);
  *((double *)v8 + 4) = v35;
  if (v3 == 45)
  {
    *((_QWORD *)v8 + 2) = -*((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 3) = -v34;
    *((double *)v8 + 4) = -v35;
  }
  if (a2)
  {
    v31 = 0;
    *a2 = v8;
  }
  else
  {
    xmlSchemaFreeValue((xmlSchemaValPtr)v8);
    return 0;
  }
  return v31;
}

_BYTE *xmlSchemaCheckLanguageType(_BYTE *result)
{
  int v1;
  int v2;
  unsigned __int8 *v3;
  int v4;
  unsigned int v5;
  int v6;

  if (result)
  {
    v1 = *result;
    if (*result)
    {
      v2 = 0;
      v3 = result + 1;
      v4 = 1;
      while (1)
      {
        if ((v1 & 0xDFu) - 65 >= 0x1A)
        {
          if (v1 == 45)
          {
            v4 = 0;
            result = 0;
            v5 = v2 - 9;
            v2 = 0;
            if (v5 < 0xFFFFFFF8)
              return result;
            goto LABEL_11;
          }
          result = 0;
          if (v4 || (v1 - 48) >= 0xA)
            return result;
        }
        ++v2;
LABEL_11:
        v6 = *v3++;
        v1 = v6;
        if (!v6)
          return (_BYTE *)((v2 - 1) < 8);
      }
    }
    v2 = 0;
    return (_BYTE *)((v2 - 1) < 8);
  }
  return result;
}

uint64_t xmlSchemaValAtomicListNode(uint64_t a1, xmlChar *cur, _QWORD *a3, uint64_t a4)
{
  xmlChar *v7;
  xmlChar *v8;
  xmlChar *i;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v14;
  uint64_t v15;
  xmlChar *v17;
  int v18;
  int v19;
  int v21;
  int v22;
  unsigned __int8 *v23;

  if (!cur)
    return 0xFFFFFFFFLL;
  v7 = xmlStrdup(cur);
  if (!v7)
    return 0xFFFFFFFFLL;
  v8 = v7;
  if (a3)
    *a3 = 0;
  for (i = v7; ; ++i)
  {
    v10 = *i;
    v11 = v10 > 0x20 || ((1 << v10) & 0x100002600) == 0;
    if (v11)
      break;
    *i = 0;
  }
  v12 = 0;
  while (1)
  {
    while (v10 > 0x20u)
    {
LABEL_22:
      v12 = (v12 + 1);
      do
      {
        v14 = *++i;
        LOBYTE(v10) = v14;
        v15 = (1 << v14) & 0x100002601;
      }
      while (v14 > 0x20 || v15 == 0);
    }
    if (((1 << v10) & 0x100002600) == 0)
      break;
    do
    {
      *i++ = 0;
      v10 = *i;
    }
    while (v10 <= 0x20 && ((1 << v10) & 0x100002600) != 0);
  }
  if ((_BYTE)v10)
    goto LABEL_22;
  if ((_DWORD)v12)
  {
    v17 = v7;
    do
    {
      v11 = v17 == i;
      v19 = *v17++;
      v18 = v19;
    }
    while (!v11 && !v18);
    while (1)
    {
      v23 = v17 - 1;
      if (v17 - 1 == i)
        break;
      if (xmlSchemaValAtomicType(a1, v17 - 1, 0, a4, 0, 1, 0))
      {
        v12 = 0xFFFFFFFFLL;
        break;
      }
      v17 = v23 - 1;
      while (*++v17)
        ;
      do
      {
        v11 = v17 == i;
        v22 = *v17++;
        v21 = v22;
      }
      while (!v11 && !v21);
    }
  }
  xmlFree(v8);
  return v12;
}

xmlChar *xmlSchemaStrip(uint64_t a1)
{
  uint64_t i;
  unsigned int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v5;
  unint64_t v6;
  unsigned __int8 *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t v10;

  if (!a1)
    return 0;
  for (i = 0; ; ++i)
  {
    v2 = *(unsigned __int8 *)(a1 + i);
    if (v2 > 0x20)
      break;
    if (((1 << v2) & 0x100002600) == 0)
    {
      if (!*(_BYTE *)(a1 + i))
      {
        v3 = (unsigned __int8 *)(a1 + i);
        goto LABEL_10;
      }
      break;
    }
  }
  v3 = (unsigned __int8 *)(a1 + i);
  while (*++v3)
    ;
LABEL_10:
  v5 = v3 - 1;
  v6 = a1 + i;
  v7 = v3;
  if ((unint64_t)(v3 - 1) <= a1 + i)
  {
LABEL_17:
    if (i)
      return xmlStrndup((const xmlChar *)(a1 + i), (int)v7 - (int)a1 - (int)i);
  }
  else
  {
    v7 = (unsigned __int8 *)(v6 + 1);
    while (1)
    {
      v8 = *v5;
      v9 = v8 > 0x20;
      v10 = (1 << v8) & 0x100002600;
      if (v9 || v10 == 0)
        break;
      if ((unint64_t)--v5 <= v6)
        goto LABEL_17;
    }
    v7 = v5 + 1;
    if (i)
      return xmlStrndup((const xmlChar *)(a1 + i), (int)v7 - (int)a1 - (int)i);
  }
  if (v3 == v7)
    return 0;
  return xmlStrndup((const xmlChar *)(a1 + i), (int)v7 - (int)a1 - (int)i);
}

uint64_t _xmlSchemaBase64Decode(int a1)
{
  unsigned int v1;
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;

  v1 = a1 - 65;
  if (a1 == 47)
    v2 = 63;
  else
    v2 = -1;
  if (a1 == 61)
    v3 = 64;
  else
    v3 = v2;
  if (a1 == 43)
    v4 = 62;
  else
    v4 = v3;
  if ((a1 - 48) <= 9)
    v5 = a1 + 4;
  else
    v5 = v4;
  if ((a1 - 97) <= 0x19)
    v6 = a1 - 71;
  else
    v6 = v5;
  if (v1 <= 0x19)
    return v1;
  else
    return v6;
}

uint64_t _xmlSchemaParseGDay(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  int v6;

  v2 = (uint64_t)*a2;
  v3 = **a2;
  if ((v3 - 58) < 0xFFFFFFF6)
    return 1;
  v4 = *(unsigned __int8 *)(v2 + 1);
  if ((v4 - 58) < 0xFFFFFFF6)
    return 1;
  v6 = v4 + 10 * v3;
  if ((v6 - 529) > 0x1E)
    return 2;
  result = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFE0F | (16 * (((16 * v6 + 256) >> 4) & 0x1F));
  *a2 = (unsigned __int8 *)(v2 + 2);
  return result;
}

uint64_t _xmlSchemaParseTimeZone(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  int v6;
  __int16 v7;
  unsigned int v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int v13;
  int v14;
  unsigned int v15;
  __int16 v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  __int16 v20;

  if (!a2)
    return 0xFFFFFFFFLL;
  v2 = *a2;
  v3 = **a2;
  v4 = 1;
  if (v3 <= 0x2C)
  {
    if (!**a2)
    {
      v7 = *(_WORD *)(a1 + 24) & 0xE000;
LABEL_14:
      *(_WORD *)(a1 + 24) = v7;
      goto LABEL_15;
    }
    if (v3 != 43)
      return v4;
LABEL_10:
    v5 = v2[1];
    if ((v5 - 58) < 0xFFFFFFF6)
      return 1;
    v6 = v2[2];
    if ((v6 - 58) < 0xFFFFFFF6)
      return 1;
    v9 = v6 + 10 * v5;
    if (v9 > 0x227)
      return 2;
    if (v2[3] != 58)
      return 1;
    v10 = 120 * v9;
    v11 = (120 * v9 + 2176) & 0x1FF8;
    v12 = *(_WORD *)(a1 + 24) & 0xE001;
    *(_WORD *)(a1 + 24) = v12 | v11;
    v13 = v2[4];
    if ((v13 - 58) < 0xFFFFFFF6)
      return 1;
    v14 = v2[5];
    if ((v14 - 58) < 0xFFFFFFF6)
      return 1;
    v15 = v14 + 10 * v13;
    if (v15 > 0x24B)
      return 2;
    v16 = v10 + 2 * v15;
    v17 = v16 + 9312;
    v18 = -9312 - v16;
    v19 = v3 == 45 ? v18 : v17;
    v20 = v19 & 0x1FFE | v12;
    *(_WORD *)(a1 + 24) = v20;
    if ((unsigned __int16)((unsigned __int16)(8 * v19 + 13440) >> 4) > 0x690u)
      return 2;
    v2 += 6;
    v7 = v20 | 1;
    goto LABEL_14;
  }
  if (v3 == 45)
    goto LABEL_10;
  if (v3 == 90)
  {
    *(_WORD *)(a1 + 24) = *(_WORD *)(a1 + 24) & 0xE000 | 1;
    ++v2;
LABEL_15:
    v4 = 0;
    *a2 = v2;
  }
  return v4;
}

uint64_t _xmlSchemaParseGMonth(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t result;
  int v6;

  v2 = (uint64_t)*a2;
  v3 = **a2;
  if ((v3 - 58) < 0xFFFFFFF6)
    return 1;
  v4 = *(unsigned __int8 *)(v2 + 1);
  if ((v4 - 58) < 0xFFFFFFF6)
    return 1;
  v6 = v4 + 10 * v3;
  if ((v6 - 529) > 0xB)
    return 2;
  result = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a1 + 8) & 0xFFFFFFF0 | (v6 - 528);
  *a2 = (unsigned __int8 *)(v2 + 2);
  return result;
}

uint64_t _xmlSchemaParseTime(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  double v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned int v22;
  double v23;
  int v24;
  BOOL v25;

  v2 = *a2;
  v3 = **a2;
  if ((v3 - 58) < 0xFFFFFFF6)
    return 1;
  v4 = v2[1];
  if ((v4 - 58) < 0xFFFFFFF6 || v2[2] != 58)
    return 1;
  v5 = v4 + 10 * v3;
  if (v5 > 0x228)
    return 2;
  v7 = (v5 << 9) + 0x2000;
  v8 = v7 & 0x3E00;
  v9 = *(_DWORD *)(a1 + 8) & 0xFFFFC1FF | v8;
  *(_DWORD *)(a1 + 8) = v9;
  v10 = v2[3];
  if ((v10 - 58) < 0xFFFFFFF6)
    return 1;
  v11 = v2[4];
  if ((v11 - 58) < 0xFFFFFFF6)
    return 1;
  v13 = v11 + 10 * v10;
  if (v13 > 0x24B)
    return 2;
  v14 = (v13 << 14) + 786432;
  *(_DWORD *)(a1 + 8) = v14 & 0xFC000 | v9 & 0xFFF03FFF;
  if (v2[5] != 58)
    return 1;
  v15 = v2[6];
  if ((v15 - 58) < 0xFFFFFFF6)
    return 1;
  v16 = v2[7];
  if ((v16 - 58) < 0xFFFFFFF6)
    return 1;
  v17 = (double)(v16 + 10 * v15 - 528);
  *(double *)(a1 + 16) = v17;
  v18 = v2 + 8;
  if (v2[8] == 46)
  {
    v21 = v2[9];
    v19 = v2 + 9;
    v20 = v21;
    v22 = v21 - 48;
    if ((v21 - 48) > 9)
      return 1;
    v23 = 1.0;
    v18 = v19;
    do
    {
      v23 = v23 / 10.0;
      v17 = v17 + (double)(v20 - 48) * v23;
      *(double *)(a1 + 16) = v17;
      v24 = *++v18;
      v20 = v24;
    }
    while ((v24 - 48) < 0xA);
    if (v22 > 9)
      return 1;
  }
  if ((~v7 & 0x3000) != 0 && (v14 & 0xF0000) != 0xF0000 && (v17 >= 0.0 ? (v25 = v17 < 60.0) : (v25 = 0), v25)
    || (v6 = 2, v8 == 12288) && (v14 & 0xFC000) == 0 && v17 == 0.0)
  {
    if ((unsigned __int16)((unsigned __int16)(8 * *(_WORD *)(a1 + 24) + 13440) >> 4) <= 0x690u)
    {
      v6 = 0;
      *a2 = v18;
      return v6;
    }
    return 2;
  }
  return v6;
}

uint64_t xmlSchemaCompareDecimals(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  int v6;
  int v7;
  int v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;

  v2 = (_QWORD *)a1;
  v3 = *(unsigned __int16 *)(a1 + 44);
  if ((v3 & 1) != 0 && (*(_QWORD *)(a1 + 16) || *(_QWORD *)(a1 + 24) || *(_QWORD *)(a1 + 32)))
  {
    v4 = *(unsigned __int16 *)(a2 + 44);
    if ((v4 & 1) == 0)
      return 0xFFFFFFFFLL;
    if (*(_QWORD *)(a2 + 16) || *(_QWORD *)(a2 + 24))
    {
      result = 0xFFFFFFFFLL;
    }
    else
    {
      result = 0xFFFFFFFFLL;
      if (!*(_QWORD *)(a2 + 32))
        return result;
    }
  }
  else
  {
    v4 = *(unsigned __int16 *)(a2 + 44);
    if ((v4 & 1) != 0)
    {
      if (*(_QWORD *)(a2 + 16) || *(_QWORD *)(a2 + 24))
        return 1;
      result = 1;
      if (*(_QWORD *)(a2 + 32))
        return result;
    }
    else
    {
      result = 1;
    }
  }
  v6 = (v3 >> 8) - (v3 >> 1);
  v7 = (v4 >> 8) - (v4 >> 1);
  if (v6 == 1 && !v2[2])
  {
    if (v7 != 1)
      return -(int)result;
    if (*(_QWORD *)(a2 + 16))
      return -(int)result;
    else
      return 0;
  }
  else if (v7 == 1 && !*(_QWORD *)(a2 + 16))
  {
    if (v6 == 1)
    {
      if (v2[2])
        return result;
      else
        return 0;
    }
  }
  else
  {
    if (v6 > v7)
      return result;
    if (v7 > v6)
      return -(int)result;
    v8 = (v3 >> 8) - (v4 >> 8);
    if (v8 < 0)
    {
      v8 = (v4 >> 8) - (v3 >> 8);
      result = -(int)result;
      v9 = (_QWORD *)a2;
    }
    else
    {
      v9 = v2;
      v2 = (_QWORD *)a2;
    }
    v10 = v9[2];
    v11 = v9[3];
    v12 = v8 + 8;
    v13 = v9[4];
    do
    {
      v14 = v10;
      v10 = v11;
      v11 = v13;
      v12 -= 8;
      v13 = 0;
    }
    while (v12 > 8);
    if (v12)
    {
      v15 = v12 + 1;
      do
      {
        v16 = v11 / 0xA;
        v17 = v10 % 0xA;
        v10 = (v10 + 100000000 * (v11 % 0xA)) / 0xA;
        v14 = (v14 + 100000000 * v17) / 0xA;
        --v15;
        v11 /= 0xAuLL;
      }
      while (v15 > 1);
    }
    else
    {
      v16 = v11;
    }
    v18 = v2[4];
    if (v16 <= v18)
    {
      if (v16 == v18)
      {
        v19 = v2[3];
        if (v10 > v19)
          return result;
        if (v10 == v19)
        {
          v20 = v2[2];
          if (v14 > v20)
            return result;
          if (v14 == v20)
          {
            if ((v4 ^ v3) >= 0x100)
              return result;
            else
              return 0;
          }
        }
      }
      return -(int)result;
    }
  }
  return result;
}

uint64_t xmlSchemaCompareDurations(uint64_t a1, uint64_t a2)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(double *)(a1 + 32) - *(double *)(a2 + 32);
  v3 = (uint64_t)(v2 / 86400.0);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = v2 - (double)v3 * 86400.0;
  v6 = *(_QWORD *)(a1 + 24) - *(_QWORD *)(a2 + 24) + v3;
  v7 = *(_QWORD *)(a1 + 16) - v4;
  if (v7)
  {
    if ((uint64_t)v7 < 1)
    {
      if (v6 <= 0 && v5 <= 0.0)
        return 0xFFFFFFFFLL;
      v7 = v4 - *(_QWORD *)(a1 + 16);
      v9 = -1;
    }
    else
    {
      if ((v6 & 0x8000000000000000) == 0 && v5 >= 0.0)
        return 1;
      v6 = -v6;
      v9 = 1;
    }
    if (v7 >= 0xC)
    {
      if (v7 > 0x4325C53EF368EBBLL)
        return 4294967294;
      v11 = 365 * (v7 / 0xC) + ((v7 / 0xC + 3) >> 2);
      v10 = v11 - 1;
    }
    else
    {
      v10 = 0;
      v11 = 0;
    }
    v12 = (_QWORD *)((char *)&xmlSchemaCompareDurations_dayRange + 8 * (v7 % 0xC));
    v13 = *v12 + v10;
    v14 = v12[12] + v11;
    if (v14 != v13 || v14 != v6)
    {
      if (v14 < v6)
        return -v9;
      if (v13 <= v6)
        return 2;
      return v9;
    }
    return 0;
  }
  if (v6)
  {
    if (v6 < 0)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  else
  {
    if (v5 == 0.0)
      return 0;
    if (v5 >= 0.0)
      return 1;
    else
      return 0xFFFFFFFFLL;
  }
}

uint64_t xmlSchemaComparePreserveReplaceStrings(_BYTE *a1, _BYTE *a2, int a3)
{
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned int v5;
  unsigned int v7;
  unsigned int v8;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *a1;
  if (!*a1)
  {
LABEL_14:
    if (a3)
      v8 = 1;
    else
      v8 = -1;
    if (*a2)
      return v8;
    else
      return 0;
  }
  v4 = a1 + 1;
  while (1)
  {
    v5 = *a2;
    if (v5 - 9 < 2 || v5 == 13)
      break;
    if (!*a2)
      goto LABEL_29;
    if (v3 < v5)
    {
      v12 = a3 == 0;
      v13 = -1;
LABEL_31:
      if (v12)
        return v13;
      else
        return -v13;
    }
    if (v3 != v5)
    {
LABEL_29:
      v12 = a3 == 0;
      v13 = 1;
      goto LABEL_31;
    }
LABEL_13:
    ++a2;
    v7 = *v4++;
    v3 = v7;
    if (!v7)
      goto LABEL_14;
  }
  if (v3 == 32)
    goto LABEL_13;
  if (a3)
    v10 = -1;
  else
    v10 = 1;
  if (a3)
    v11 = 1;
  else
    v11 = -1;
  if (v3 <= 0x1F)
    return v11;
  else
    return v10;
}

uint64_t xmlSchemaComparePreserveCollapseStrings(_BYTE *a1, unsigned __int8 *a2, int a3)
{
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;

  while (1)
  {
    v3 = *a2;
    if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
      break;
    ++a2;
  }
  v5 = *a1;
  if (*a1)
  {
    while (1)
    {
      if (v3 > 0x20)
        goto LABEL_18;
      if (((1 << v3) & 0x100002600) == 0)
        break;
      if (v5 != 32)
      {
        if (a3)
          v15 = -1;
        else
          v15 = 1;
        if (a3)
          v16 = 1;
        else
          v16 = -1;
        if (v5 <= 0x1F)
          return v16;
        else
          return v15;
      }
      do
      {
        v6 = *++a2;
        v7 = (1 << v6) & 0x100002600;
      }
      while (v6 <= 0x20 && v7 != 0);
LABEL_15:
      v9 = *++a1;
      v5 = v9;
      v3 = *a2;
      if (!v9)
        goto LABEL_21;
    }
    if (!v3)
      goto LABEL_38;
LABEL_18:
    if (v5 < v3)
      goto LABEL_28;
    if (v5 != v3)
    {
LABEL_38:
      v13 = a3 == 0;
      v14 = 1;
      goto LABEL_39;
    }
    ++a2;
    goto LABEL_15;
  }
LABEL_21:
  if (!v3)
    return 0;
  v10 = a2 + 1;
  while (v3 <= 0x20)
  {
    if (((1 << v3) & 0x100002600) == 0)
    {
      if (v3)
        break;
      return 0;
    }
    v11 = *v10++;
    v3 = v11;
  }
LABEL_28:
  v13 = a3 == 0;
  v14 = -1;
LABEL_39:
  if (v13)
    return v14;
  else
    return -v14;
}

uint64_t xmlSchemaCompareReplacedStrings(_BYTE *a1, _BYTE *a2)
{
  unsigned int v2;
  unsigned __int8 *v3;
  unsigned int v4;
  unsigned int v5;

  v2 = *a1;
  if (!*a1)
  {
LABEL_15:
    if (*a2)
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  v3 = a1 + 1;
  while (1)
  {
    v4 = *a2;
    if (v4 > 0x20)
      break;
    if (((1 << v4) & 0x100002600) == 0)
    {
      if (!*a2)
        return 1;
      break;
    }
    if (v2 > 0x20 || ((1 << v2) & 0x100002600) == 0)
    {
      if (v2 < 0x20)
        return 0xFFFFFFFFLL;
      else
        return 1;
    }
LABEL_7:
    ++a2;
    v5 = *v3++;
    v2 = v5;
    if (!v5)
      goto LABEL_15;
  }
  if (v2 > 0x20 || ((1 << v2) & 0x100002600) == 0)
  {
    if (v2 < v4)
      return 0xFFFFFFFFLL;
    if (v2 != v4)
      return 1;
    goto LABEL_7;
  }
  if (v4 > 0x20)
    return 0xFFFFFFFFLL;
  else
    return 1;
}

uint64_t xmlSchemaCompareReplaceCollapseStrings(_BYTE *a1, unsigned __int8 *a2, int a3)
{
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v9;
  unsigned __int8 *v10;
  unsigned int v11;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;

  while (1)
  {
    v3 = *a2;
    if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
      break;
    ++a2;
  }
  v5 = *a1;
  if (*a1)
  {
    do
    {
      if (v3 <= 0x20)
      {
        if (((1 << v3) & 0x100002600) != 0)
        {
          if (v5 > 0x20 || ((1 << v5) & 0x100002600) == 0)
          {
            if (a3)
              v17 = -1;
            else
              v17 = 1;
            if (a3)
              v18 = 1;
            else
              v18 = -1;
            if (v5 <= 0x1F)
              return v18;
            else
              return v17;
          }
          do
          {
            v6 = *++a2;
            v7 = (1 << v6) & 0x100002600;
          }
          while (v6 <= 0x20 && v7 != 0);
          goto LABEL_16;
        }
        if (!v3)
        {
          v13 = a3 == 0;
          v14 = 1;
          goto LABEL_51;
        }
      }
      if (v5 <= 0x20 && ((1 << v5) & 0x100002600) != 0)
      {
        if (a3)
          v15 = -1;
        else
          v15 = 1;
        if (a3)
          v16 = 1;
        else
          v16 = -1;
        if (v3 >= 0x21)
          return v16;
        else
          return v15;
      }
      if (v5 < v3)
        return 0xFFFFFFFFLL;
      if (v5 != v3)
        return 1;
      ++a2;
LABEL_16:
      v9 = *++a1;
      v5 = v9;
      v3 = *a2;
    }
    while (v9);
  }
  if (!v3)
    return 0;
  v10 = a2 + 1;
  while (v3 <= 0x20)
  {
    if (((1 << v3) & 0x100002600) == 0)
    {
      if (!v3)
        return 0;
      break;
    }
    v11 = *v10++;
    v3 = v11;
  }
  v13 = a3 == 0;
  v14 = -1;
LABEL_51:
  if (v13)
    return v14;
  else
    return -v14;
}

uint64_t xmlSchemaCompareNormStrings(_BYTE *a1, _BYTE *a2)
{
  unsigned int v2;
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  unsigned __int8 *v11;
  unsigned int v12;

  while (1)
  {
    v2 = *a1;
    if (v2 > 0x20 || ((1 << v2) & 0x100002600) == 0)
      break;
    ++a1;
  }
  while (1)
  {
    v4 = *a2;
    if (v4 > 0x20 || ((1 << v4) & 0x100002600) == 0)
      break;
    ++a2;
  }
  if (*a1)
  {
    for (; *a2; v4 = *a2)
    {
      if (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0)
      {
        if (v4 > 0x20 || ((1 << v4) & 0x100002600) == 0)
          return v2 - v4;
        while (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0)
        {
          v6 = *++a1;
          v2 = v6;
        }
        while (v4 <= 0x20 && ((1 << v4) & 0x100002600) != 0)
        {
          v7 = *++a2;
          v4 = v7;
        }
        if (!v2)
          goto LABEL_35;
      }
      else
      {
        if (v2 < v4)
          return 0xFFFFFFFFLL;
        if (v2 != v4)
          return 1;
        v8 = *++a1;
        v2 = v8;
        ++a2;
        if (!v8)
        {
LABEL_35:
          v4 = *a2;
          goto LABEL_36;
        }
      }
    }
    v9 = a1 + 1;
    while (v2 <= 0x20)
    {
      if (((1 << v2) & 0x100002600) == 0)
      {
        if (v2)
          return 1;
        goto LABEL_35;
      }
      v10 = *v9++;
      v2 = v10;
    }
    return 1;
  }
  else
  {
LABEL_36:
    if (v4)
    {
      v11 = a2 + 1;
      while (v4 <= 0x20)
      {
        if (((1 << v4) & 0x100002600) == 0)
        {
          if (v4)
            return 0xFFFFFFFFLL;
          return 0;
        }
        v12 = *v11++;
        v4 = v12;
      }
      return 0xFFFFFFFFLL;
    }
    else
    {
      return 0;
    }
  }
}

uint64_t _xmlSchemaDateCastYMToDays(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  BOOL v20;
  _QWORD *v21;

  if ((*(_DWORD *)(a1 + 24) & 0xE) != 0)
    v1 = *(_DWORD *)(a1 + 24) & 0xF;
  else
    v1 = 1;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = (v1 - 1);
  if (v2 <= 0)
  {
    v11 = 365 * v2;
    v12 = v2 + 1;
    v13 = v2 + 4;
    if (v2 >= -1)
      v13 = v2 + 1;
    v14 = ((unsigned __int128)(v12 * (__int128)0x5C28F5C28F5C28F5) >> 64) + ~v2;
    v15 = (v14 >> 6) + ((unint64_t)v14 >> 63);
    v16 = v12 / 400;
    v17 = 0x70A3D70A3D70A3D7 * v2;
    v18 = __ROR8__(v17, 2) > 0x28F5C28F5C28F5CuLL && (*(_QWORD *)(a1 + 16) & 3) == 0;
    v19 = __ROR8__(v17, 4);
    v20 = !v18 && v19 >= 0xA3D70A3D70A3D8;
    v21 = &dayInYearByMonth;
    if (!v20)
      v21 = &dayInLeapYearByMonth;
    return v11 + (v13 >> 2) + v15 + v16 + v21[v3];
  }
  else
  {
    v4 = (v2 - 1) / 0x190uLL - (v2 - 1) / 0x64uLL + ((unint64_t)(v2 - 1) >> 2) + 365 * (v2 - 1);
    v5 = 0x8F5C28F5C28F5C29 * v2;
    v6 = __ROR8__(v5, 2) > 0x28F5C28F5C28F5CuLL && (*(_QWORD *)(a1 + 16) & 3) == 0;
    v7 = __ROR8__(v5, 4);
    v8 = !v6 && v7 >= 0xA3D70A3D70A3D8;
    v9 = &dayInYearByMonth;
    if (!v8)
      v9 = &dayInLeapYearByMonth;
    return v4 + v9[v3];
  }
}

uint64_t xmlSchemaNormLen(unsigned __int8 *a1)
{
  unsigned __int8 *i;
  unsigned int v2;
  uint64_t result;
  unsigned int v4;

  if (!a1)
    return 0xFFFFFFFFLL;
  for (i = a1; ; ++i)
  {
    v2 = *i;
    if (v2 > 0x20)
      goto LABEL_8;
    if (((1 << v2) & 0x100002600) == 0)
      break;
  }
  if (*i)
  {
LABEL_8:
    result = 0;
    while (1)
    {
      if ((v2 & 0x80) != 0)
      {
        if ((i[1] & 0xC0) != 0x80)
          return 0xFFFFFFFFLL;
        if ((~v2 & 0xE0) != 0)
        {
          i += 2;
        }
        else
        {
          if ((i[2] & 0xC0) != 0x80)
            return 0xFFFFFFFFLL;
          if ((~v2 & 0xF0) != 0)
          {
            i += 3;
          }
          else
          {
            if ((v2 & 0xF8) != 0xF0 || (i[3] & 0xC0) != 0x80)
              return 0xFFFFFFFFLL;
            i += 4;
          }
        }
      }
      else if (v2 <= 0x20 && ((1 << v2) & 0x100002600) != 0)
      {
        while (v2 <= 0x20)
        {
          if (((1 << v2) & 0x100002600) == 0)
          {
            if (!v2)
              return result;
            break;
          }
          v4 = *++i;
          v2 = v4;
        }
      }
      else
      {
        ++i;
      }
      result = (result + 1);
      v2 = *i;
      if (!*i)
        return result;
    }
  }
  return 0;
}

int xmlStrcmp(const xmlChar *str1, const xmlChar *str2)
{
  int v2;
  int v3;

  if (str1 == str2)
    return 0;
  if (!str1)
    return -1;
  if (!str2)
    return 1;
  while (1)
  {
    v2 = *str2;
    v3 = *str1 - v2;
    if (v3)
      break;
    ++str1;
    ++str2;
    if (!v2)
      return 0;
  }
  return v3;
}

int xmlStrQEqual(const xmlChar *pref, const xmlChar *name, const xmlChar *str)
{
  int v3;
  const xmlChar *v4;
  int v5;
  int v6;
  const xmlChar *v7;
  const xmlChar *v8;
  int v9;
  uint64_t i;
  int v11;
  int v12;

  if (pref)
  {
    v3 = 0;
    if (name && str)
    {
      v6 = *pref;
      v4 = pref + 1;
      v5 = v6;
      v7 = str + 2;
      while (1)
      {
        v8 = v7;
        if (v5 != *(v7 - 2))
          break;
        if (v5)
        {
          v9 = *v4++;
          v5 = v9;
          ++v7;
          if (v9)
            continue;
        }
        if (*(v8 - 1) == 58)
        {
          for (i = 0; ; ++i)
          {
            v11 = name[i];
            if (v11 != v8[i])
              break;
            if (!v11)
              return 1;
          }
        }
        return 0;
      }
      return 0;
    }
  }
  else if (name == str)
  {
    return 1;
  }
  else
  {
    v3 = 0;
    if (name && str)
    {
      while (1)
      {
        v12 = *name;
        if (v12 != *str)
          break;
        ++name;
        ++str;
        if (!v12)
          return 1;
      }
      return 0;
    }
  }
  return v3;
}

int xmlStrncmp(const xmlChar *str1, const xmlChar *str2, int len)
{
  int result;
  int v5;
  int v6;
  int v7;

  result = 0;
  if (str1 != str2)
  {
    v5 = len - 1;
    if (len >= 1)
    {
      if (str1)
      {
        if (str2)
        {
          do
          {
            v6 = *str1;
            v7 = *str2;
            result = v6 - v7;
            if (v6 != v7)
              break;
            if (!v5)
              break;
            ++str1;
            ++str2;
            --v5;
          }
          while (v7);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return -1;
      }
    }
  }
  return result;
}

int xmlStrncasecmp(const xmlChar *str1, const xmlChar *str2, int len)
{
  int v3;
  int v4;
  uint64_t v5;

  v3 = 0;
  if (str1 != str2)
  {
    v4 = len - 1;
    if (len >= 1)
    {
      if (str1)
      {
        if (str2)
        {
          do
          {
            v5 = *str2;
            v3 = casemap[*str1] - casemap[v5];
            if (v3)
              break;
            if (!v4)
              break;
            ++str1;
            ++str2;
            --v4;
          }
          while ((_DWORD)v5);
        }
        else
        {
          return 1;
        }
      }
      else
      {
        return -1;
      }
    }
  }
  return v3;
}

const xmlChar *__cdecl xmlStrchr(const xmlChar *str, xmlChar val)
{
  int v2;
  int v3;

  if (str)
  {
    v2 = *str;
    if (*str)
    {
      while (v2 != val)
      {
        v3 = *++str;
        v2 = v3;
        if (!v3)
          return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return str;
}

const xmlChar *__cdecl xmlStrstr(const xmlChar *str, const xmlChar *val)
{
  const xmlChar *v2;
  unint64_t v3;
  const xmlChar *v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;

  v2 = 0;
  if (str && val)
  {
    if (!*val)
      return str;
    v3 = 0;
    do
      v4 = &val[v3++];
    while (v4[1]);
    if (!(v3 >> 31) && (_DWORD)v3)
    {
      v5 = *str;
      if (*str)
      {
        while (1)
        {
          if (v5 == *val)
          {
            if ((int)v3 < 1 || str == val)
              return str;
            v6 = 0;
            while (1)
            {
              v7 = str[v6];
              if (v7 != val[v6])
                break;
              if ((_DWORD)v3 - 1 != (_DWORD)v6)
              {
                ++v6;
                if (v7)
                  continue;
              }
              return str;
            }
          }
          v2 = 0;
          v8 = *++str;
          v5 = v8;
          if (!v8)
            return v2;
        }
      }
      return 0;
    }
    else
    {
      return str;
    }
  }
  return v2;
}

const xmlChar *__cdecl xmlStrcasestr(const xmlChar *str, const xmlChar *val)
{
  const xmlChar *v2;
  unint64_t v3;
  const xmlChar *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = 0;
  if (str && val)
  {
    if (!*val)
      return str;
    v3 = 0;
    do
      v4 = &val[v3++];
    while (v4[1]);
    if (!(v3 >> 31) && (_DWORD)v3)
    {
      v5 = *str;
      if (*str)
      {
        while (1)
        {
          if (casemap[v5] == casemap[*val])
          {
            if ((int)v3 < 1 || str == val)
              return str;
            v6 = 0;
            while (1)
            {
              v7 = val[v6];
              if (casemap[str[v6]] != casemap[v7])
                break;
              if ((_DWORD)v3 - 1 != (_DWORD)v6)
              {
                ++v6;
                if ((_DWORD)v7)
                  continue;
              }
              return str;
            }
          }
          v2 = 0;
          v8 = *++str;
          v5 = v8;
          if (!v8)
            return v2;
        }
      }
      return 0;
    }
    else
    {
      return str;
    }
  }
  return v2;
}

xmlChar *__cdecl xmlStrsub(const xmlChar *str, int start, int len)
{
  const xmlChar *v3;

  if (str && ((len | start) & 0x80000000) == 0)
  {
    if (start < 1)
    {
LABEL_8:
      if (*str)
        return xmlStrndup(str, len);
    }
    else
    {
      v3 = &str[start];
      while (*str)
      {
        ++str;
        if (!--start)
        {
          str = v3;
          goto LABEL_8;
        }
      }
    }
  }
  return 0;
}

xmlChar *__cdecl xmlStrncat(xmlChar *cur, const xmlChar *add, int len)
{
  xmlChar *v3;
  unint64_t v6;
  unsigned int v8;
  xmlChar *v9;

  v3 = cur;
  if (add && len)
  {
    if (len < 0)
    {
      return 0;
    }
    else if (cur)
    {
      if (*cur)
      {
        v6 = 0;
        while (cur[++v6])
          ;
        if (v6 >> 31)
          v8 = 0;
        else
          v8 = v6;
      }
      else
      {
        v8 = 0;
      }
      cur = 0;
      if ((v8 & 0x80000000) == 0 && (int)v8 <= (len ^ 0x7FFFFFFF))
      {
        v9 = (xmlChar *)xmlRealloc(v3, len + (unint64_t)v8 + 1);
        cur = v3;
        if (v9)
        {
          memcpy(&v9[v8], add, len);
          v9[v8 + len] = 0;
          return v9;
        }
      }
    }
    else
    {
      return xmlStrndup(add, len);
    }
  }
  return cur;
}

xmlChar *__cdecl xmlStrncatNew(const xmlChar *str1, const xmlChar *str2, int len)
{
  unint64_t v3;
  const xmlChar *v5;
  unint64_t v6;
  unsigned int v8;
  uint64_t v10;
  int v12;
  xmlChar *v13;
  xmlChar *v14;

  LODWORD(v3) = len;
  v5 = str1;
  if (len < 0)
  {
    if (!str2)
      goto LABEL_16;
    if (!*str2)
      goto LABEL_16;
    v3 = 0;
    while (str2[++v3])
      ;
    if (v3 >> 31)
      goto LABEL_16;
  }
  if (str2 && (_DWORD)v3)
  {
    if (str1)
    {
      if (*str1)
      {
        v6 = 0;
        while (str1[++v6])
          ;
        if (v6 >> 31)
          v8 = 0;
        else
          v8 = v6;
      }
      else
      {
        v8 = 0;
      }
      v13 = 0;
      if ((v8 & 0x80000000) != 0 || (int)v8 > (int)(v3 ^ 0x7FFFFFFF))
        return v13;
      v14 = (xmlChar *)xmlMalloc(v3 + (unint64_t)v8 + 1);
      if (v14)
      {
        v13 = v14;
        memcpy(v14, v5, v8);
        memcpy(&v13[v8], str2, v3);
        v13[(int)(v8 + v3)] = 0;
        return v13;
      }
      str1 = v5;
      v12 = v8;
    }
    else
    {
      str1 = str2;
      v12 = v3;
    }
  }
  else
  {
LABEL_16:
    if (!str1)
      return 0;
    v10 = 0;
    while (str1[v10++])
      ;
    v12 = v10 - 1;
  }
  return xmlStrndup(str1, v12);
}

xmlChar *__cdecl xmlStrcat(xmlChar *cur, const xmlChar *add)
{
  uint64_t v2;

  if (add)
  {
    v2 = 0;
    if (cur)
    {
      while (add[v2++])
        ;
      return xmlStrncat(cur, add, (int)v2 - 1);
    }
    else
    {
      while (add[v2++])
        ;
      return xmlStrndup(add, (int)v2 - 1);
    }
  }
  return cur;
}

int xmlStrPrintf(xmlChar *buf, int len, const char *msg, ...)
{
  int result;
  va_list va;

  va_start(va, msg);
  result = -1;
  if (buf)
  {
    if (msg)
    {
      result = vsnprintf((char *)buf, len, msg, va);
      buf[len - 1] = 0;
    }
  }
  return result;
}

int xmlStrVPrintf(xmlChar *buf, int len, const char *msg, va_list ap)
{
  int result;

  if (!buf || !msg)
    return -1;
  result = vsnprintf((char *)buf, len, msg, ap);
  buf[len - 1] = 0;
  return result;
}

int xmlUTF8Size(const xmlChar *utf)
{
  int result;
  int v2;
  unsigned int v3;

  if (!utf)
    return -1;
  if ((*(char *)utf & 0x80000000) == 0)
    return 1;
  v2 = *utf;
  if ((v2 & 0x40) == 0)
    return -1;
  v3 = 32;
  result = 2;
  while ((v3 & v2) != 0)
  {
    ++result;
    v3 >>= 1;
    if (result == 8)
      return -1;
  }
  return result;
}

int xmlUTF8Charcmp(const xmlChar *utf1, const xmlChar *utf2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;

  if (!utf1)
  {
    if (utf2)
      return -1;
    else
      return 0;
  }
  v2 = *(char *)utf1;
  if (v2 < 0)
  {
    if ((v2 & 0x40) == 0)
      return 0;
    v7 = 32;
    v3 = 2;
    while ((v7 & *utf1) != 0)
    {
      ++v3;
      v7 >>= 1;
      if (v3 == 8)
        return 0;
    }
  }
  else
  {
    v3 = 1;
  }
  if (utf1 == utf2)
    return 0;
  if (!utf2)
    return 1;
  v4 = v3 - 1;
  do
  {
    v5 = *utf2;
    v6 = *utf1 - v5;
    if (v6)
      break;
    if (!v4)
      break;
    ++utf1;
    ++utf2;
    --v4;
  }
  while (v5);
  return v6;
}

int xmlUTF8Strlen(const xmlChar *utf)
{
  int v1;
  unint64_t v2;
  const xmlChar *v3;

  if (!utf)
    return -1;
  v1 = *utf;
  if (!*utf)
    return 0;
  v2 = 0;
  do
  {
    v3 = utf + 1;
    if ((v1 & 0x80) != 0)
    {
      if ((*v3 & 0xC0) != 0x80)
        return -1;
      v3 = utf + 2;
      if ((~v1 & 0xE0) == 0)
      {
        if ((*v3 & 0xC0) != 0x80)
          return -1;
        if ((~v1 & 0xF0) != 0)
        {
          v3 = utf + 3;
        }
        else
        {
          if ((v1 & 0xF8) != 0xF0 || (utf[3] & 0xC0) != 0x80)
            return -1;
          v3 = utf + 4;
        }
      }
    }
    ++v2;
    v1 = *v3;
    utf = v3;
  }
  while (*v3);
  if (v2 >> 31)
    return 0;
  else
    return v2;
}

int xmlGetUTF8Char(const unsigned __int8 *utf, int *len)
{
  int v3;
  int result;
  int v5;
  unsigned __int8 v6;
  __int16 v7;
  int v8;

  if (!utf || !len)
  {
    if (!len)
      return -1;
    goto LABEL_22;
  }
  v3 = *(char *)utf;
  result = *utf;
  v5 = *len;
  if ((v3 & 0x80000000) == 0)
  {
    if (v5 >= 1)
    {
      *len = 1;
      return result;
    }
    goto LABEL_22;
  }
  if (v5 < 2 || (utf[1] & 0xC0) != 0x80)
    goto LABEL_22;
  if (result <= 0xDF)
  {
    if (result >= 0xC2)
    {
      *len = 2;
      return utf[1] & 0x3F | ((result & 0x1F) << 6);
    }
    goto LABEL_22;
  }
  if (v5 < 3 || (utf[2] & 0xC0) != 0x80)
    goto LABEL_22;
  if (result > 0xEF)
  {
    if (v5 >= 4 && (utf[3] & 0xC0) == 0x80)
    {
      *len = 4;
      v8 = ((result & 7) << 18) | ((utf[1] & 0x3F) << 12);
      if ((v8 - 1114112) >= 0xFFF00000)
        return utf[3] & 0x3F | ((utf[2] & 0x3F) << 6) | v8;
    }
    goto LABEL_22;
  }
  *len = 3;
  v6 = utf[1];
  v7 = ((result & 0xF) << 12) | ((v6 & 0x3F) << 6);
  result = ((result & 0xF) << 12) | ((v6 & 0x3F) << 6) | utf[2] & 0x3F;
  if (result < 0x800 || (v7 & 0xF800) == 0xD800)
  {
LABEL_22:
    *len = 0;
    return -1;
  }
  return result;
}

int xmlCheckUTF8(const unsigned __int8 *utf)
{
  unsigned __int8 v1;
  uint64_t v2;

  if (utf)
  {
    while (1)
    {
      v1 = *utf;
      if (!*utf)
      {
        LODWORD(utf) = 1;
        return (int)utf;
      }
      if ((*utf & 0x80) != 0)
      {
        if ((v1 & 0xE0) == 0xC0)
        {
          if ((utf[1] & 0xC0) != 0x80)
            goto LABEL_19;
          v2 = 2;
        }
        else if ((v1 & 0xF0) == 0xE0)
        {
          if ((utf[1] & 0xC0) != 0x80 || (utf[2] & 0xC0) != 0x80)
            goto LABEL_19;
          v2 = 3;
        }
        else
        {
          if ((v1 & 0xF8) != 0xF0 || (utf[1] & 0xC0) != 0x80 || (utf[2] & 0xC0) != 0x80 || (utf[3] & 0xC0) != 0x80)
          {
LABEL_19:
            LODWORD(utf) = 0;
            return (int)utf;
          }
          v2 = 4;
        }
      }
      else
      {
        v2 = 1;
      }
      utf += v2;
    }
  }
  return (int)utf;
}

int xmlUTF8Strsize(const xmlChar *utf, int len)
{
  unint64_t v2;
  const xmlChar *v3;
  xmlChar v4;
  xmlChar v5;

  LODWORD(v2) = 0;
  if (utf && len >= 1)
  {
    v3 = utf;
    do
    {
      v4 = *v3;
      if (!*v3)
        break;
      ++v3;
      if ((v4 & 0x80) != 0 && (v4 & 0x40) != 0)
      {
        do
        {
          v5 = v4;
          if (!*v3)
            break;
          v4 *= 2;
          ++v3;
        }
        while ((v5 & 0x20) != 0);
      }
    }
    while (len-- > 1);
    v2 = v3 - utf;
    if (v2 >> 31)
      LODWORD(v2) = 0;
  }
  return v2;
}

xmlChar *__cdecl xmlUTF8Strndup(const xmlChar *utf, int len)
{
  xmlChar *v2;
  size_t v4;
  xmlChar *v5;

  v2 = 0;
  if (utf)
  {
    if ((len & 0x80000000) == 0)
    {
      v4 = xmlUTF8Strsize(utf, len);
      v5 = (xmlChar *)xmlMallocAtomic(v4 + 1);
      v2 = v5;
      if (v5)
      {
        memcpy(v5, utf, v4);
        v2[v4] = 0;
      }
    }
  }
  return v2;
}

const xmlChar *__cdecl xmlUTF8Strpos(const xmlChar *utf, int pos)
{
  const xmlChar *result;
  int v4;
  int v5;
  char v6;

  result = 0;
  if (utf && (pos & 0x80000000) == 0)
  {
    if (pos)
    {
      result = utf;
      while (1)
      {
        v5 = *result++;
        v4 = v5;
        if (!v5)
          break;
        if ((v4 & 0x80) != 0)
        {
          if ((~v4 & 0xC0) != 0)
            return 0;
          while ((v4 & 0x40) != 0)
          {
            LOBYTE(v4) = 2 * v4;
            v6 = *result++;
            if ((v6 & 0xC0) != 0x80)
              return 0;
          }
        }
        if (!--pos)
          return result;
      }
      return 0;
    }
    else
    {
      return utf;
    }
  }
  return result;
}

int xmlUTF8Strloc(const xmlChar *utf, const xmlChar *utfchar)
{
  int v2;
  const xmlChar *v4;
  int v5;
  int v6;
  unint64_t v7;
  int v8;
  const xmlChar *v9;
  const xmlChar *v10;
  int v11;
  char v12;

  v2 = -1;
  if (utf && utfchar)
  {
    v4 = utf;
    v5 = xmlUTF8Strsize(utfchar, 1);
    v6 = *v4;
    if (*v4)
    {
      v7 = 0;
      while (v5 >= 1 && v4 != utfchar)
      {
        v8 = v5 - 1;
        v9 = v4;
        v10 = utfchar;
        while (1)
        {
          v11 = *v9;
          if (v11 != *v10)
            break;
          if (v8)
          {
            ++v9;
            ++v10;
            --v8;
            if (v11)
              continue;
          }
          goto LABEL_19;
        }
        ++v4;
        if ((v6 & 0x80) != 0)
        {
          if ((~v6 & 0xC0) != 0)
            return -1;
          while ((v6 & 0x40) != 0)
          {
            LOBYTE(v6) = 2 * v6;
            v12 = *v4++;
            if ((v12 & 0xC0) != 0x80)
              return -1;
          }
        }
        ++v7;
        v6 = *v4;
        v2 = -1;
        if (!*v4)
          return v2;
      }
LABEL_19:
      if (v7 >> 31)
        return 0;
      else
        return v7;
    }
    else
    {
      return -1;
    }
  }
  return v2;
}

xmlChar *__cdecl xmlUTF8Strsub(const xmlChar *utf, int start, int len)
{
  int v3;
  int v4;
  int v5;
  char v6;

  if (!utf || (len | start) < 0)
    return 0;
  if (start >= 1)
  {
    v3 = 0;
    while (1)
    {
      v5 = *utf++;
      v4 = v5;
      if (!v5)
        break;
      if ((v4 & 0x80) != 0)
      {
        if ((~v4 & 0xC0) != 0)
          return 0;
        while ((v4 & 0x40) != 0)
        {
          LOBYTE(v4) = 2 * v4;
          v6 = *utf++;
          if ((v6 & 0xC0) != 0x80)
            return 0;
        }
      }
      if (++v3 == start)
        return xmlUTF8Strndup(utf, len);
    }
    return 0;
  }
  return xmlUTF8Strndup(utf, len);
}

_BYTE *xmlEscapeFormatString(void **a1)
{
  _BYTE *v2;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  _BYTE *v8;
  unint64_t v9;
  _BYTE *v10;
  char v11;
  unsigned __int8 *v12;
  _BYTE *v13;
  int v14;
  unint64_t v15;

  if (!a1)
    return 0;
  v2 = *a1;
  if (*a1)
  {
    v3 = *v2;
    if (*v2)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        v6 = v5;
        v7 = v3;
        v8 = &v2[v4++];
        if (v7 == 37)
          ++v5;
        v3 = v8[1];
      }
      while (v3);
      if (v5)
      {
        v2 = 0;
        if (!(v5 >> 31) && v4 <= 0x7FFFFFFF - v5)
        {
          if (v7 == 37)
            v9 = v6 + 1;
          else
            v9 = v6;
          v10 = xmlMallocAtomic(v9 + v4 + 1);
          v2 = v10;
          if (v10)
          {
            v11 = *(_BYTE *)*a1;
            if (v11)
            {
              v12 = (unsigned __int8 *)*a1 + 1;
              v13 = v10;
              do
              {
                *v13 = v11;
                if (*(v12 - 1) == 37)
                  *++v13 = 37;
                ++v13;
                v14 = *v12++;
                v11 = v14;
              }
              while (v14);
            }
            if (v7 == 37)
              v15 = v6 + 1;
            else
              v15 = v6;
            v10[v15 + v4] = 0;
          }
          xmlFree(*a1);
          *a1 = v2;
        }
      }
    }
  }
  return v2;
}

int xmlUCSIsAegeanNumbers(int code)
{
  return code >> 6 == 1028;
}

int xmlUCSIsAlphabeticPresentationForms(int code)
{
  return (code - 64256) < 0x50;
}

int xmlUCSIsArabic(int code)
{
  return (code & 0xFFFFFF00) == 1536;
}

int xmlUCSIsArabicPresentationFormsA(int code)
{
  return (code - 64336) < 0x2B0;
}

int xmlUCSIsArabicPresentationFormsB(int code)
{
  return (code - 65136) < 0x90;
}

int xmlUCSIsArmenian(int code)
{
  return (code - 1328) < 0x60;
}

int xmlUCSIsArrows(int code)
{
  return (code - 8592) < 0x70;
}

int xmlUCSIsBasicLatin(int code)
{
  return code < 0x80;
}

int xmlUCSIsBengali(int code)
{
  return (code & 0xFFFFFF80) == 2432;
}

int xmlUCSIsBlockElements(int code)
{
  return code >> 5 == 300;
}

int xmlUCSIsBopomofo(int code)
{
  return (code - 12544) < 0x30;
}

int xmlUCSIsBopomofoExtended(int code)
{
  return code >> 5 == 397;
}

int xmlUCSIsBoxDrawing(int code)
{
  return code >> 7 == 74;
}

int xmlUCSIsBraillePatterns(int code)
{
  return code >> 8 == 40;
}

int xmlUCSIsBuhid(int code)
{
  return code >> 5 == 186;
}

int xmlUCSIsByzantineMusicalSymbols(int code)
{
  return (code & 0xFFFFFF00) == 118784;
}

int xmlUCSIsCJKCompatibility(int code)
{
  return code >> 8 == 51;
}

int xmlUCSIsCJKCompatibilityForms(int code)
{
  return (code - 65072) < 0x20;
}

int xmlUCSIsCJKCompatibilityIdeographs(int code)
{
  return (code - 63744) < 0x200;
}

int xmlUCSIsCJKCompatibilityIdeographsSupplement(int code)
{
  return (code - 194560) < 0x220;
}

int xmlUCSIsCJKRadicalsSupplement(int code)
{
  return code >> 7 == 93;
}

int xmlUCSIsCJKSymbolsandPunctuation(int code)
{
  return (code & 0xFFFFFFC0) == 12288;
}

int xmlUCSIsCJKUnifiedIdeographs(int code)
{
  return (code - 19968) >> 9 < 0x29;
}

int xmlUCSIsCJKUnifiedIdeographsExtensionA(int code)
{
  return (code - 13312) >> 6 < 0x67;
}

int xmlUCSIsCJKUnifiedIdeographsExtensionB(int code)
{
  return (code - 0x20000) >> 5 < 0x537;
}

int xmlUCSIsCherokee(int code)
{
  return (code - 5024) < 0x60;
}

int xmlUCSIsCombiningDiacriticalMarks(int code)
{
  return (code - 768) < 0x70;
}

int xmlUCSIsCombiningDiacriticalMarksforSymbols(int code)
{
  return (code - 8400) < 0x30;
}

int xmlUCSIsCombiningHalfMarks(int code)
{
  return code >> 4 == 4066;
}

int xmlUCSIsCombiningMarksforSymbols(int code)
{
  return (code - 8400) < 0x30;
}

int xmlUCSIsControlPictures(int code)
{
  return code >> 6 == 144;
}

int xmlUCSIsCurrencySymbols(int code)
{
  return (code - 8352) < 0x30;
}

int xmlUCSIsCypriotSyllabary(int code)
{
  return code >> 6 == 1056;
}

int xmlUCSIsCyrillic(int code)
{
  return (code & 0xFFFFFF00) == 1024;
}

int xmlUCSIsCyrillicSupplement(int code)
{
  return (code - 1280) < 0x30;
}

int xmlUCSIsDeseret(int code)
{
  return (code - 66560) < 0x50;
}

int xmlUCSIsDevanagari(int code)
{
  return (code & 0xFFFFFF80) == 2304;
}

int xmlUCSIsDingbats(int code)
{
  return (code - 9984) < 0xC0;
}

int xmlUCSIsEnclosedAlphanumerics(int code)
{
  return (code - 9312) < 0xA0;
}

int xmlUCSIsEnclosedCJKLettersandMonths(int code)
{
  return code >> 8 == 50;
}

int xmlUCSIsEthiopic(int code)
{
  return (code - 4608) < 0x180;
}

int xmlUCSIsGeneralPunctuation(int code)
{
  return (code - 0x2000) < 0x70;
}

int xmlUCSIsGeometricShapes(int code)
{
  return (code - 9632) < 0x60;
}

int xmlUCSIsGeorgian(int code)
{
  return (code - 4256) < 0x60;
}

int xmlUCSIsGothic(int code)
{
  return (code - 66352) < 0x20;
}

int xmlUCSIsGreek(int code)
{
  return (code - 880) < 0x90;
}

int xmlUCSIsGreekExtended(int code)
{
  return code >> 8 == 31;
}

int xmlUCSIsGreekandCoptic(int code)
{
  return (code - 880) < 0x90;
}

int xmlUCSIsGujarati(int code)
{
  return (code & 0xFFFFFF80) == 2688;
}

int xmlUCSIsGurmukhi(int code)
{
  return (code & 0xFFFFFF80) == 2560;
}

int xmlUCSIsHalfwidthandFullwidthForms(int code)
{
  return (code - 65280) < 0xF0;
}

int xmlUCSIsHangulCompatibilityJamo(int code)
{
  return (code - 12592) < 0x60;
}

int xmlUCSIsHangulJamo(int code)
{
  return code >> 8 == 17;
}

int xmlUCSIsHangulSyllables(int code)
{
  return (code - 44032) >> 4 < 0x2BB;
}

int xmlUCSIsHanunoo(int code)
{
  return code >> 5 == 185;
}

int xmlUCSIsHebrew(int code)
{
  return (code - 1424) < 0x70;
}

int xmlUCSIsHighPrivateUseSurrogates(int code)
{
  return code >> 7 == 439;
}

int xmlUCSIsHighSurrogates(int code)
{
  return (code - 55296) < 0x380;
}

int xmlUCSIsHiragana(int code)
{
  return (code - 12352) < 0x60;
}

int xmlUCSIsIPAExtensions(int code)
{
  return (code - 592) < 0x60;
}

int xmlUCSIsIdeographicDescriptionCharacters(int code)
{
  return code >> 4 == 767;
}

int xmlUCSIsKanbun(int code)
{
  return code >> 4 == 793;
}

int xmlUCSIsKangxiRadicals(int code)
{
  return (code - 12032) < 0xE0;
}

int xmlUCSIsKannada(int code)
{
  return (code & 0xFFFFFF80) == 3200;
}

int xmlUCSIsKatakana(int code)
{
  return (code - 12448) < 0x60;
}

int xmlUCSIsKatakanaPhoneticExtensions(int code)
{
  return code >> 4 == 799;
}

int xmlUCSIsKhmer(int code)
{
  return code >> 7 == 47;
}

int xmlUCSIsKhmerSymbols(int code)
{
  return code >> 5 == 207;
}

int xmlUCSIsLao(int code)
{
  return (code & 0xFFFFFF80) == 3712;
}

int xmlUCSIsLatin1Supplement(int code)
{
  return (code & 0xFFFFFF80) == 128;
}

int xmlUCSIsLatinExtendedA(int code)
{
  return (code & 0xFFFFFF80) == 256;
}

int xmlUCSIsLatinExtendedB(int code)
{
  return (code - 384) < 0xD0;
}

int xmlUCSIsLatinExtendedAdditional(int code)
{
  return code >> 8 == 30;
}

int xmlUCSIsLetterlikeSymbols(int code)
{
  return (code - 8448) < 0x50;
}

int xmlUCSIsLimbu(int code)
{
  return (code - 6400) < 0x50;
}

int xmlUCSIsLinearBIdeograms(int code)
{
  return code >> 7 == 513;
}

int xmlUCSIsLinearBSyllabary(int code)
{
  return (code & 0xFFFFFF80) == 0x10000;
}

int xmlUCSIsLowSurrogates(int code)
{
  return code >> 10 == 55;
}

int xmlUCSIsMalayalam(int code)
{
  return (code & 0xFFFFFF80) == 3328;
}

int xmlUCSIsMathematicalAlphanumericSymbols(int code)
{
  return code >> 10 == 117;
}

int xmlUCSIsMathematicalOperators(int code)
{
  return code >> 8 == 34;
}

int xmlUCSIsMiscellaneousMathematicalSymbolsA(int code)
{
  return (code - 10176) < 0x30;
}

int xmlUCSIsMiscellaneousMathematicalSymbolsB(int code)
{
  return code >> 7 == 83;
}

int xmlUCSIsMiscellaneousSymbols(int code)
{
  return code >> 8 == 38;
}

int xmlUCSIsMiscellaneousSymbolsandArrows(int code)
{
  return code >> 8 == 43;
}

int xmlUCSIsMiscellaneousTechnical(int code)
{
  return code >> 8 == 35;
}

int xmlUCSIsMongolian(int code)
{
  return (code - 6144) < 0xB0;
}

int xmlUCSIsMusicalSymbols(int code)
{
  return code >> 8 == 465;
}

int xmlUCSIsMyanmar(int code)
{
  return (code - 4096) < 0xA0;
}

int xmlUCSIsNumberForms(int code)
{
  return (code - 8528) < 0x40;
}

int xmlUCSIsOgham(int code)
{
  return code >> 5 == 180;
}

int xmlUCSIsOldItalic(int code)
{
  return (code - 66304) < 0x30;
}

int xmlUCSIsOpticalCharacterRecognition(int code)
{
  return code >> 5 == 290;
}

int xmlUCSIsOriya(int code)
{
  return (code & 0xFFFFFF80) == 2816;
}

int xmlUCSIsOsmanya(int code)
{
  return (code - 66688) < 0x30;
}

int xmlUCSIsPhoneticExtensions(int code)
{
  return code >> 7 == 58;
}

int xmlUCSIsPrivateUse(int code)
{
  unsigned int v1;

  v1 = code & 0xFFFF0000;
  return (code - 57344) >> 8 < 0x19 || v1 == 983040 || v1 == 0x100000;
}

int xmlUCSIsPrivateUseArea(int code)
{
  return (code - 57344) >> 8 < 0x19;
}

int xmlUCSIsRunic(int code)
{
  return (code - 5792) < 0x60;
}

int xmlUCSIsShavian(int code)
{
  return (code - 66640) < 0x30;
}

int xmlUCSIsSinhala(int code)
{
  return (code & 0xFFFFFF80) == 3456;
}

int xmlUCSIsSmallFormVariants(int code)
{
  return (code - 65104) < 0x20;
}

int xmlUCSIsSpacingModifierLetters(int code)
{
  return (code - 688) < 0x50;
}

int xmlUCSIsSpecials(int code)
{
  return code >> 4 == 4095;
}

int xmlUCSIsSuperscriptsandSubscripts(int code)
{
  return (code - 8304) < 0x30;
}

int xmlUCSIsSupplementalArrowsA(int code)
{
  return code >> 4 == 639;
}

int xmlUCSIsSupplementalArrowsB(int code)
{
  return code >> 7 == 82;
}

int xmlUCSIsSupplementalMathematicalOperators(int code)
{
  return code >> 8 == 42;
}

int xmlUCSIsSupplementaryPrivateUseAreaA(int code)
{
  return (code & 0xFFFF0000) == 983040;
}

int xmlUCSIsSupplementaryPrivateUseAreaB(int code)
{
  return (code & 0xFFFF0000) == 0x100000;
}

int xmlUCSIsSyriac(int code)
{
  return (code - 1792) < 0x50;
}

int xmlUCSIsTagalog(int code)
{
  return code >> 5 == 184;
}

int xmlUCSIsTagbanwa(int code)
{
  return code >> 5 == 187;
}

int xmlUCSIsTags(int code)
{
  return (code & 0xFFFFFF80) == 917504;
}

int xmlUCSIsTaiLe(int code)
{
  return (code - 6480) < 0x30;
}

int xmlUCSIsTaiXuanJingSymbols(int code)
{
  return (code - 119552) < 0x60;
}

int xmlUCSIsTamil(int code)
{
  return (code & 0xFFFFFF80) == 2944;
}

int xmlUCSIsTelugu(int code)
{
  return (code & 0xFFFFFF80) == 3072;
}

int xmlUCSIsThaana(int code)
{
  return (code & 0xFFFFFFC0) == 1920;
}

int xmlUCSIsThai(int code)
{
  return (code & 0xFFFFFF80) == 3584;
}

int xmlUCSIsTibetan(int code)
{
  return (code & 0xFFFFFF00) == 3840;
}

int xmlUCSIsUgaritic(int code)
{
  return code >> 5 == 2076;
}

int xmlUCSIsUnifiedCanadianAboriginalSyllabics(int code)
{
  return (code - 5120) < 0x280;
}

int xmlUCSIsVariationSelectors(int code)
{
  return code >> 4 == 4064;
}

int xmlUCSIsVariationSelectorsSupplement(int code)
{
  return (code - 917760) < 0xF0;
}

int xmlUCSIsYiRadicals(int code)
{
  return (code - 42128) < 0x40;
}

int xmlUCSIsYiSyllables(int code)
{
  return (code - 40960) < 0x490;
}

int xmlUCSIsYijingHexagramSymbols(int code)
{
  return code >> 6 == 311;
}

int xmlUCSIsBlock(int code, const char *block)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)&code;
  v3 = (uint64_t (*)(uint64_t))xmlUnicodeLookup((uint64_t *)&xmlUnicodeBlockTbl, (char *)block);
  if (v3)
    return v3(v2);
  else
    return -1;
}

uint64_t xmlUnicodeLookup(uint64_t *a1, char *__s1)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  result = 0;
  if (a1 && __s1)
  {
    v5 = *((_DWORD *)a1 + 2);
    v6 = v5 - 1;
    if (v5 < 1)
    {
      return 0;
    }
    else
    {
      v7 = 0;
      v8 = *a1;
      while (1)
      {
        v9 = v6 + v7;
        if (v6 + v7 < 0 != __OFADD__(v6, v7))
          ++v9;
        v10 = (uint64_t)v9 >> 1;
        v11 = strcmp(__s1, *(const char **)(v8 + 16 * (v9 >> 1)));
        if (!v11)
          break;
        if (v11 < 0)
          v6 = v10 - 1;
        else
          v7 = v10 + 1;
        if (v7 > v6)
          return 0;
      }
      return *(_QWORD *)(v8 + 16 * v10 + 8);
    }
  }
  return result;
}

int xmlUCSIsCatC(int code)
{
  return xmlCharInRange(code, &xmlCG);
}

int xmlUCSIsCatCc(int code)
{
  return code < 0x20 || (code - 127) < 0x21;
}

int xmlUCSIsCatCf(int code)
{
  return xmlCharInRange(code, &xmlCfG);
}

int xmlUCSIsCatCo(int code)
{
  int result;

  result = 1;
  if (code >= 983040)
  {
    if (code == 983040 || code == 1048573 || code == 0x100000)
      return result;
    return code == 1114109;
  }
  if (code != 57344 && code != 63743)
    return code == 1114109;
  return result;
}

int xmlUCSIsCatCs(int code)
{
  return code == 55296 || (code - 56191) < 2 || (code - 56319) < 2 || code == 57343;
}

int xmlUCSIsCatL(int code)
{
  return xmlCharInRange(code, &xmlLG);
}

int xmlUCSIsCatLl(int code)
{
  return xmlCharInRange(code, &xmlLlG);
}

int xmlUCSIsCatLm(int code)
{
  return xmlCharInRange(code, &xmlLmG);
}

int xmlUCSIsCatLo(int code)
{
  return xmlCharInRange(code, &xmlLoG);
}

int xmlUCSIsCatLt(int code)
{
  return xmlCharInRange(code, &xmlLtG);
}

int xmlUCSIsCatLu(int code)
{
  return xmlCharInRange(code, &xmlLuG);
}

int xmlUCSIsCatM(int code)
{
  return xmlCharInRange(code, &xmlMG);
}

int xmlUCSIsCatMc(int code)
{
  return xmlCharInRange(code, &xmlMcG);
}

int xmlUCSIsCatMe(int code)
{
  int v1;

  v1 = (code - 8413) < 4 || (code - 8418) < 3;
  if (code == 1758)
    v1 = 1;
  if ((code - 1160) >= 2)
    return v1;
  else
    return 1;
}

int xmlUCSIsCatMn(int code)
{
  return xmlCharInRange(code, &xmlMnG);
}

int xmlUCSIsCatN(int code)
{
  return xmlCharInRange(code, &xmlNG);
}

int xmlUCSIsCatNd(int code)
{
  return xmlCharInRange(code, &xmlNdG);
}

int xmlUCSIsCatNl(int code)
{
  int v1;

  v1 = (code - 8544) < 0x24 || code == 66378;
  if (code == 12295)
    v1 = 1;
  if ((code - 12321) < 9)
    v1 = 1;
  if ((code - 12344) < 3)
    v1 = 1;
  if ((code - 5870) >= 3)
    return v1;
  else
    return 1;
}

int xmlUCSIsCatNo(int code)
{
  return xmlCharInRange(code, &xmlNoG);
}

int xmlUCSIsCatP(int code)
{
  return xmlCharInRange(code, &xmlPG);
}

int xmlUCSIsCatPc(int code)
{
  unsigned int v1;
  _BOOL4 v2;
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v7;

  v1 = code - 8255;
  v2 = code == 65343 || code == 65381;
  v3 = (code - 65101) < 3 || v2;
  if ((code - 65075) >= 2)
    v4 = v3;
  else
    v4 = 1;
  if (code == 12539)
    v5 = 1;
  else
    v5 = v4;
  if (code == 95)
    v5 = 1;
  v6 = v1 > 0x15;
  v7 = (1 << v1) & 0x200003;
  if (v6 || v7 == 0)
    return v5;
  else
    return 1;
}

int xmlUCSIsCatPd(int code)
{
  return xmlCharInRange(code, &xmlPdG);
}

int xmlUCSIsCatPe(int code)
{
  return xmlCharInRange(code, &xmlPeG);
}

int xmlUCSIsCatPf(int code)
{
  _BOOL4 v1;
  int v2;

  v1 = code == 8221 || code == 8250;
  v2 = code == 8217 || v1;
  if (code == 187)
    return 1;
  else
    return v2;
}

int xmlUCSIsCatPi(int code)
{
  unsigned int v1;
  _BOOL4 v2;
  BOOL v3;
  int v4;

  v1 = code - 8216;
  v2 = code == 8249;
  if (code == 171)
    v2 = 1;
  v3 = v1 > 7;
  v4 = (1 << v1) & 0x99;
  return !v3 && v4 != 0 || v2;
}

int xmlUCSIsCatPo(int code)
{
  return xmlCharInRange(code, &xmlPoG);
}

int xmlUCSIsCatPs(int code)
{
  return xmlCharInRange(code, &xmlPsG);
}

int xmlUCSIsCatS(int code)
{
  return xmlCharInRange(code, &xmlSG);
}

int xmlUCSIsCatSc(int code)
{
  return xmlCharInRange(code, &xmlScG);
}

int xmlUCSIsCatSk(int code)
{
  return xmlCharInRange(code, &xmlSkG);
}

int xmlUCSIsCatSm(int code)
{
  return xmlCharInRange(code, &xmlSmG);
}

int xmlUCSIsCatSo(int code)
{
  return xmlCharInRange(code, &xmlSoG);
}

int xmlUCSIsCatZ(int code)
{
  return xmlCharInRange(code, &xmlZG);
}

int xmlUCSIsCatZl(int code)
{
  return code == 8232;
}

int xmlUCSIsCatZp(int code)
{
  return code == 8233;
}

int xmlUCSIsCatZs(int code)
{
  int v1;
  _BOOL4 v2;
  int v3;

  v1 = 1;
  if (code > 5759)
  {
    if (code == 5760 || code == 6158)
      return v1;
  }
  else if (code == 32 || code == 160)
  {
    return v1;
  }
  v2 = code == 8287 || code == 12288;
  v3 = code == 8239 || v2;
  if ((code - 0x2000) >= 0xB)
    return v3;
  else
    return 1;
}

int xmlUCSIsCat(int code, const char *cat)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);

  v2 = *(_QWORD *)&code;
  v3 = (uint64_t (*)(uint64_t))xmlUnicodeLookup((uint64_t *)&xmlUnicodeCatTbl, (char *)cat);
  if (v3)
    return v3(v2);
  else
    return -1;
}

uint64_t linkedOnOrAfterFall2022OSVersions()
{
  if (linkedOnOrAfterFall2022OSVersions_once != -1)
    dispatch_once(&linkedOnOrAfterFall2022OSVersions_once, &__block_literal_global_1);
  return linkedOnOrAfterFall2022OSVersions_result;
}

uint64_t __linkedOnOrAfterFall2022OSVersions_block_invoke()
{
  uint64_t result;

  result = dyld_program_minos_at_least();
  linkedOnOrAfterFall2022OSVersions_result = result;
  return result;
}

xmlTextWriterPtr xmlNewTextWriter(xmlOutputBufferPtr out)
{
  _OWORD *v2;
  _OWORD *v3;
  xmlListPtr v4;
  xmlListPtr v5;
  xmlChar *v6;

  v2 = xmlMalloc(0x50uLL);
  v3 = v2;
  if (!v2)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriter : out of memory!\n");
    return (xmlTextWriterPtr)v3;
  }
  v2[3] = 0u;
  v2[4] = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  *v2 = 0u;
  v4 = xmlListCreate((xmlListDeallocator)xmlFreeTextWriterStackEntry, (xmlListDataCompare)xmlCmpTextWriterStackEntry);
  *((_QWORD *)v3 + 1) = v4;
  if (!v4)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriter : out of memory!\n");
LABEL_9:
    xmlFree(v3);
    return 0;
  }
  v5 = xmlListCreate((xmlListDeallocator)xmlFreeTextWriterNsStackEntry, (xmlListDataCompare)xmlCmpTextWriterNsStackEntry);
  *((_QWORD *)v3 + 2) = v5;
  if (!v5)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriter : out of memory!\n");
    xmlListDelete(*((xmlListPtr *)v3 + 1));
    goto LABEL_9;
  }
  *(_QWORD *)v3 = out;
  v6 = xmlStrdup((const xmlChar *)" ");
  *((_QWORD *)v3 + 5) = v6;
  *((_BYTE *)v3 + 48) = 34;
  if (!v6)
  {
    xmlListDelete(*((xmlListPtr *)v3 + 1));
    xmlListDelete(*((xmlListPtr *)v3 + 2));
    xmlFree(v3);
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriter : out of memory!\n");
    return 0;
  }
  *((_QWORD *)v3 + 9) = xmlNewDoc(0);
  *((_DWORD *)v3 + 16) = 0;
  return (xmlTextWriterPtr)v3;
}

_DWORD *xmlWriterErrMsg(uint64_t a1, int a2, char a3)
{
  _QWORD *v3;

  if (a1)
    v3 = *(_QWORD **)(a1 + 56);
  else
    v3 = 0;
  return __xmlRaiseError(0, 0, 0, v3, 0, 0x19u, a2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", a3);
}

void xmlFreeTextWriterStackEntry(xmlLink *a1)
{
  void **Data;
  void **v2;
  void *v3;

  Data = (void **)xmlLinkGetData(a1);
  if (Data)
  {
    v2 = Data;
    v3 = *Data;
    if (v3)
      xmlFree(v3);
    xmlFree(v2);
  }
}

uint64_t xmlCmpTextWriterStackEntry(const xmlChar **a1, const xmlChar **a2)
{
  if (a1 == a2)
    return 0;
  if (!a1)
    return 0xFFFFFFFFLL;
  if (a2)
    return xmlStrcmp(*a1, *a2);
  return 1;
}

void xmlFreeTextWriterNsStackEntry(xmlLink *a1)
{
  void **Data;
  void **v2;
  void *v3;
  void *v4;

  Data = (void **)xmlLinkGetData(a1);
  if (Data)
  {
    v2 = Data;
    v3 = *Data;
    if (v3)
      xmlFree(v3);
    v4 = v2[1];
    if (v4)
      xmlFree(v4);
    xmlFree(v2);
  }
}

uint64_t xmlCmpTextWriterNsStackEntry(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
    return 0;
  if (!a1)
    return 0xFFFFFFFFLL;
  if (!a2)
    return 1;
  if (xmlStrcmp(*(const xmlChar **)a1, *(const xmlChar **)a2) || *(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0xFFFFFFFFLL;
  return 0;
}

xmlTextWriterPtr xmlNewTextWriterFilename(const char *uri, int compression)
{
  xmlOutputBuffer *Filename;
  xmlOutputBuffer *v3;
  xmlTextWriterPtr result;

  Filename = xmlOutputBufferCreateFilename(uri, 0, compression);
  if (Filename)
  {
    v3 = Filename;
    result = xmlNewTextWriter(Filename);
    if (result)
    {
      *((_DWORD *)result + 7) = 0;
      *((_DWORD *)result + 8) = 0;
      return result;
    }
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterFilename : out of memory!\n");
    xmlOutputBufferClose(v3);
  }
  else
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1516, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterFilename : cannot open uri\n");
  }
  return 0;
}

xmlTextWriterPtr xmlNewTextWriterMemory(xmlBufferPtr buf, int compression)
{
  xmlOutputBuffer *Buffer;
  xmlOutputBuffer *v3;
  xmlTextWriterPtr result;

  Buffer = xmlOutputBufferCreateBuffer(buf, 0);
  if (Buffer)
  {
    v3 = Buffer;
    result = xmlNewTextWriter(Buffer);
    if (result)
      return result;
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterMemory : out of memory!\n");
    xmlOutputBufferClose(v3);
  }
  else
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterMemory : out of memory!\n");
  }
  return 0;
}

xmlTextWriterPtr xmlNewTextWriterPushParser(xmlParserCtxtPtr ctxt, int compression)
{
  xmlOutputBuffer *IO;
  xmlOutputBuffer *v4;
  xmlTextWriterPtr result;
  const char *v6;

  if (!ctxt)
  {
    v6 = "xmlNewTextWriterPushParser : invalid context!\n";
LABEL_7:
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)v6);
    return 0;
  }
  IO = xmlOutputBufferCreateIO((xmlOutputWriteCallback)xmlTextWriterWriteDocCallback, (xmlOutputCloseCallback)xmlTextWriterCloseDocCallback, ctxt, 0);
  if (!IO)
  {
    v6 = "xmlNewTextWriterPushParser : error at xmlOutputBufferCreateIO!\n";
    goto LABEL_7;
  }
  v4 = IO;
  result = xmlNewTextWriter(IO);
  if (result)
  {
    *((_QWORD *)result + 7) = ctxt;
    return result;
  }
  __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterPushParser : error at xmlNewTextWriter!\n");
  xmlOutputBufferClose(v4);
  return 0;
}

uint64_t xmlTextWriterWriteDocCallback(xmlParserCtxt *a1, const char *a2, uint64_t a3)
{
  uint64_t v3;
  int v4;

  v3 = a3;
  v4 = xmlParseChunk(a1, a2, a3, 0);
  if (v4)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, v4, 0, "xmlTextWriterWriteDocCallback : XML error %d !\n", v4);
    return 0xFFFFFFFFLL;
  }
  return v3;
}

uint64_t xmlTextWriterCloseDocCallback(xmlParserCtxt *a1)
{
  uint64_t result;

  result = xmlParseChunk(a1, 0, 0, 1);
  if ((_DWORD)result)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, result, 0, "xmlTextWriterCloseDocCallback : XML error %d !\n", result);
    return 0xFFFFFFFFLL;
  }
  return result;
}

xmlTextWriterPtr xmlNewTextWriterDoc(xmlDocPtr *doc, int compression)
{
  xmlParserCtxtPtr v4;
  xmlParserCtxt *v5;
  xmlDocPtr v6;
  int v7;
  xmlTextWriterPtr v8;
  xmlDoc *myDoc;
  xmlSAXHandler hdlr;

  memset(&hdlr, 0, sizeof(hdlr));
  xmlSAX2InitDefaultSAXHandler(&hdlr, 1);
  hdlr.startDocument = (startDocumentSAXFunc)xmlTextWriterStartDocumentCallback;
  hdlr.startElement = xmlSAX2StartElement;
  hdlr.endElement = xmlSAX2EndElement;
  v4 = xmlCreatePushParserCtxt(&hdlr, 0, 0, 0, 0);
  if (!v4)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterDoc : error at xmlCreatePushParserCtxt!\n");
    return 0;
  }
  v5 = v4;
  v4->dictNames = 0;
  v6 = xmlNewDoc((const xmlChar *)"1.0");
  v5->myDoc = v6;
  if (!v6)
  {
    xmlFreeParserCtxt(v5);
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterDoc : error at xmlNewDoc!\n");
    return 0;
  }
  v8 = xmlNewTextWriterPushParser(v5, v7);
  myDoc = v5->myDoc;
  if (v8)
  {
    xmlSetDocCompressMode(myDoc, compression);
    if (doc)
    {
      *doc = v5->myDoc;
      *((_DWORD *)v8 + 16) = 1;
    }
  }
  else
  {
    xmlFreeDoc(myDoc);
    xmlFreeParserCtxt(v5);
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterDoc : error at xmlNewTextWriterPushParser!\n");
  }
  return v8;
}

const xmlChar **xmlTextWriterStartDocumentCallback(const xmlChar **result)
{
  const xmlChar **v1;
  const xmlChar **v2;
  const xmlChar *v3;
  uint64_t (*v4)(const xmlChar *, const char *);

  v1 = result;
  v2 = (const xmlChar **)result[2];
  if (*((_DWORD *)result + 13))
  {
    if (!v2)
    {
      result = (const xmlChar **)htmlNewDocNoDtD(0, 0);
      v2 = result;
      v1[2] = (const xmlChar *)result;
      if (!result)
      {
LABEL_16:
        if (*v1)
        {
          v4 = (uint64_t (*)(const xmlChar *, const char *))*((_QWORD *)*v1 + 22);
          if (v4)
            result = (const xmlChar **)v4(v1[1], "SAX.startDocument(): out of memory\n");
        }
        *((_DWORD *)v1 + 34) = 2;
        *((_DWORD *)v1 + 68) = -1;
        *((_DWORD *)v1 + 83) = 1;
        return result;
      }
    }
LABEL_11:
    if (!v2[17])
    {
      v3 = v1[7];
      if (v3)
      {
        result = (const xmlChar **)*((_QWORD *)v3 + 1);
        if (result)
        {
          result = (const xmlChar **)xmlCanonicPath((const xmlChar *)result);
          *((_QWORD *)v1[2] + 17) = result;
          if (!result)
          {
            result = (const xmlChar **)xmlStrdup(*((const xmlChar **)v1[7] + 1));
            *((_QWORD *)v1[2] + 17) = result;
          }
        }
      }
    }
    return result;
  }
  if (!v2)
  {
    result = (const xmlChar **)xmlNewDoc(result[4]);
    v2 = result;
    v1[2] = (const xmlChar *)result;
    if (!result)
      goto LABEL_16;
  }
  if (v2[3])
    goto LABEL_11;
  result = (const xmlChar **)v1[5];
  if (result)
    result = (const xmlChar **)xmlStrdup((const xmlChar *)result);
  v2[14] = (const xmlChar *)result;
  *((_DWORD *)v2 + 19) = *((_DWORD *)v1 + 12);
  v2 = (const xmlChar **)v1[2];
  if (v2)
    goto LABEL_11;
  return result;
}

xmlTextWriterPtr xmlNewTextWriterTree(xmlDocPtr doc, xmlNodePtr node, int compression)
{
  xmlParserCtxtPtr v6;
  int v7;
  xmlParserCtxt *v8;
  xmlTextWriterPtr v9;
  xmlTextWriter *v10;
  const char *v11;
  xmlSAXHandler hdlr;

  if (!doc)
  {
    v11 = "xmlNewTextWriterTree : invalid document tree!\n";
LABEL_7:
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)v11);
    return 0;
  }
  memset(&hdlr, 0, sizeof(hdlr));
  xmlSAX2InitDefaultSAXHandler(&hdlr, 1);
  hdlr.startDocument = (startDocumentSAXFunc)xmlTextWriterStartDocumentCallback;
  hdlr.startElement = xmlSAX2StartElement;
  hdlr.endElement = xmlSAX2EndElement;
  v6 = xmlCreatePushParserCtxt(&hdlr, 0, 0, 0, 0);
  if (!v6)
  {
    v11 = "xmlNewTextWriterDoc : error at xmlCreatePushParserCtxt!\n";
    goto LABEL_7;
  }
  v8 = v6;
  v6->dictNames = 0;
  v9 = xmlNewTextWriterPushParser(v6, v7);
  v10 = v9;
  if (v9)
  {
    v8->myDoc = doc;
    v8->node = node;
    *((_DWORD *)v9 + 16) = 1;
    xmlSetDocCompressMode(doc, compression);
  }
  else
  {
    xmlFreeParserCtxt(v8);
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlNewTextWriterDoc : error at xmlNewTextWriterPushParser!\n");
  }
  return v10;
}

void xmlFreeTextWriter(xmlTextWriterPtr writer)
{
  xmlOutputBuffer *v2;
  xmlList *v3;
  xmlList *v4;
  xmlParserCtxt *v5;
  xmlDoc *v6;
  void *v7;

  if (writer)
  {
    v2 = *(xmlOutputBuffer **)writer;
    if (v2)
      xmlOutputBufferClose(v2);
    v3 = (xmlList *)*((_QWORD *)writer + 1);
    if (v3)
      xmlListDelete(v3);
    v4 = (xmlList *)*((_QWORD *)writer + 2);
    if (v4)
      xmlListDelete(v4);
    v5 = (xmlParserCtxt *)*((_QWORD *)writer + 7);
    if (v5)
    {
      if (v5->myDoc && !*((_DWORD *)writer + 16))
      {
        xmlFreeDoc(v5->myDoc);
        v5 = (xmlParserCtxt *)*((_QWORD *)writer + 7);
        v5->myDoc = 0;
      }
      xmlFreeParserCtxt(v5);
    }
    v6 = (xmlDoc *)*((_QWORD *)writer + 9);
    if (v6)
      xmlFreeDoc(v6);
    v7 = (void *)*((_QWORD *)writer + 5);
    if (v7)
      xmlFree(v7);
    xmlFree(writer);
  }
}

int xmlTextWriterStartDocument(xmlTextWriterPtr writer, const char *version, const char *encoding, const char *standalone)
{
  xmlLink *v8;
  const char *v9;
  xmlTextWriterPtr v10;
  int v11;
  xmlCharEncodingHandlerPtr CharEncodingHandler;
  xmlCharEncodingHandlerPtr v14;
  _QWORD *v15;
  _QWORD *Size;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  const char *v23;
  int v24;
  int v25;
  int v26;
  int v27;
  xmlOutputBuffer *v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;

  if (!writer || !*(_QWORD *)writer)
  {
    v9 = "xmlTextWriterStartDocument : invalid writer!\n";
    goto LABEL_7;
  }
  v8 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (v8 && xmlLinkGetData(v8))
  {
    v9 = "xmlTextWriterStartDocument : not allowed in this context!\n";
LABEL_7:
    v10 = writer;
    v11 = 1;
LABEL_8:
    xmlWriterErrMsg((uint64_t)v10, v11, (char)v9);
    return -1;
  }
  if (encoding)
  {
    CharEncodingHandler = xmlFindCharEncodingHandler(encoding);
    if (!CharEncodingHandler)
    {
      v9 = "xmlTextWriterStartDocument : unsupported encoding\n";
      v10 = writer;
      v11 = 32;
      goto LABEL_8;
    }
    v14 = CharEncodingHandler;
    v15 = *(_QWORD **)writer;
    v15[3] = v14;
    if (!v15[5])
    {
      Size = xmlBufCreateSize(4000);
      v15 = *(_QWORD **)writer;
      *(_QWORD *)(*(_QWORD *)writer + 40) = Size;
    }
    xmlCharEncOutput(v15, 1);
    v17 = *((_QWORD *)writer + 9);
    if (v17 && !*(_QWORD *)(v17 + 112))
      *(_QWORD *)(*((_QWORD *)writer + 9) + 112) = xmlStrdup(**(const xmlChar ***)(*(_QWORD *)writer + 24));
  }
  else
  {
    v18 = *(_QWORD *)writer;
    *(_QWORD *)(v18 + 24) = 0;
    *(_QWORD *)(v18 + 40) = 0;
  }
  v19 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<?xml version=");
  if (v19 < 0)
    return -1;
  v20 = v19;
  v21 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
  if (v21 < 0)
    return -1;
  v22 = v21;
  v23 = version ? version : "1.0";
  v24 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, v23);
  if (v24 < 0)
    return -1;
  v25 = v24;
  v26 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
  if (v26 < 0)
    return -1;
  v27 = v22 + v20 + v25 + v26;
  v28 = *(xmlOutputBuffer **)writer;
  if (*(_QWORD *)(*(_QWORD *)writer + 24))
  {
    v29 = xmlOutputBufferWriteString(v28, " encoding=");
    if (v29 < 0)
      return -1;
    v30 = v29;
    v31 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v31 < 0)
      return -1;
    v32 = v31;
    v33 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, **(const char ***)(*(_QWORD *)writer + 24));
    if (v33 < 0)
      return -1;
    v34 = v33;
    v35 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v35 < 0)
      return -1;
    v27 += v30 + v32 + v35 + v34;
    v28 = *(xmlOutputBuffer **)writer;
  }
  if (standalone)
  {
    v36 = xmlOutputBufferWriteString(v28, " standalone=");
    if (v36 < 0)
      return -1;
    v37 = v36;
    v38 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v38 < 0)
      return -1;
    v39 = v38;
    v40 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, standalone);
    if (v40 < 0)
      return -1;
    v41 = v40;
    v42 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v42 < 0)
      return -1;
    v27 += v37 + v39 + v41 + v42;
    v28 = *(xmlOutputBuffer **)writer;
  }
  v43 = xmlOutputBufferWriteString(v28, "?>\n");
  if (v43 < 0)
    return -1;
  return v43 + v27;
}

int xmlTextWriterEndDocument(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  int i;
  _DWORD *Data;
  int v5;
  int v6;
  xmlOutputBuffer *v7;

  if (!writer)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlTextWriterEndDocument : invalid writer!\n");
    return -1;
  }
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  for (i = 0; v2; v2 = xmlListFront(*((xmlListPtr *)writer + 1)))
  {
    Data = xmlLinkGetData(v2);
    if (!Data)
      break;
    switch(Data[2])
    {
      case 1:
      case 2:
      case 3:
        v5 = xmlTextWriterEndElement(writer);
        if (v5 < 0)
          return -1;
        goto LABEL_14;
      case 4:
      case 5:
        v5 = xmlTextWriterEndPI(writer);
        if (v5 < 0)
          return -1;
        goto LABEL_14;
      case 6:
        v5 = xmlTextWriterEndCDATA(writer);
        if (v5 < 0)
          return -1;
        goto LABEL_14;
      case 7:
      case 8:
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
        v5 = xmlTextWriterEndDTD(writer);
        if (v5 < 0)
          return -1;
        goto LABEL_14;
      case 0x10:
        v5 = xmlTextWriterEndComment(writer);
        if (v5 < 0)
          return -1;
LABEL_14:
        i += v5;
        break;
      default:
        continue;
    }
  }
  if (*((_DWORD *)writer + 7))
    goto LABEL_19;
  v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
  if (v6 < 0)
    return -1;
  i += v6;
LABEL_19:
  v7 = *(xmlOutputBuffer **)writer;
  if (*(_QWORD *)writer)
    LODWORD(v7) = xmlOutputBufferFlush(v7);
  return (_DWORD)v7 + i;
}

int xmlTextWriterEndElement(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  const char **Data;
  const char **v4;
  int v5;
  int v6;
  int v7;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
    goto LABEL_8;
  Data = (const char **)xmlLinkGetData(v2);
  if (!Data)
    goto LABEL_8;
  v4 = Data;
  v5 = *((_DWORD *)Data + 2);
  if (v5 == 1)
  {
    v6 = 0;
LABEL_12:
    v9 = xmlTextWriterOutputNSDecl((uint64_t)writer);
    if (v9 < 0)
      return -1;
    v10 = v9;
    if (*((_DWORD *)writer + 7))
      *((_DWORD *)writer + 8) = 1;
    v11 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "/>");
    if (v11 < 0)
      return -1;
    v7 = v10 + v6 + v11;
    goto LABEL_25;
  }
  if (v5 != 3)
  {
    if (v5 != 2)
      return -1;
    v6 = xmlTextWriterEndAttribute(writer);
    if (v6 < 0)
    {
LABEL_8:
      xmlListDelete(*((xmlListPtr *)writer + 2));
      *((_QWORD *)writer + 2) = 0;
      return -1;
    }
    goto LABEL_12;
  }
  if (*((_DWORD *)writer + 7) && *((_DWORD *)writer + 8))
    v12 = xmlTextWriterWriteIndent((uint64_t)writer);
  else
    v12 = 0;
  *((_DWORD *)writer + 8) = 1;
  v13 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "</");
  if (v13 < 0)
    return -1;
  v14 = v13;
  v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, *v4);
  if (v15 < 0)
    return -1;
  v16 = v15;
  v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v17 < 0)
    return -1;
  v7 = v14 + v12 + v17 + v16;
LABEL_25:
  if (*((_DWORD *)writer + 7))
    v7 += xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v7;
}

int xmlTextWriterEndPI(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  int v4;
  int v5;
  int v6;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
    return 0;
  Data = xmlLinkGetData(v2);
  if (!Data)
    return 0;
  if ((Data[2] & 0xFFFFFFFE) != 4)
    return -1;
  v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "?>");
  if (v4 < 0)
    return -1;
  v5 = v4;
  if (*((_DWORD *)writer + 7))
  {
    v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v6 & 0x80000000) == 0)
    {
      v5 += v6;
      goto LABEL_9;
    }
    return -1;
  }
LABEL_9:
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v5;
}

int xmlTextWriterEndCDATA(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  int v4;
  int v5;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
    return -1;
  Data = xmlLinkGetData(v2);
  if (!Data)
    return -1;
  if (Data[2] != 6)
    return -1;
  v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "]]>");
  if (v4 < 0)
    return -1;
  v5 = v4;
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v5;
}

int xmlTextWriterEndDTD(xmlTextWriterPtr writer)
{
  int v2;
  xmlLink *v3;
  _DWORD *Data;
  int v5;
  int v6;
  int v7;
  int v8;

  if (!writer)
    return -1;
  v2 = 0;
  while (2)
  {
    v3 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v3)
    {
      Data = xmlLinkGetData(v3);
      if (Data)
      {
        switch(Data[2])
        {
          case 7:
            goto LABEL_11;
          case 8:
            v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "]");
            if (v6 < 0)
              return -1;
            v2 += v6;
LABEL_11:
            v7 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
            v8 = v7;
            if (!*((_DWORD *)writer + 7))
              goto LABEL_14;
            if (v7 < 0)
              return -1;
            v2 += v7;
            v8 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
LABEL_14:
            xmlListPopFront(*((xmlListPtr *)writer + 1));
LABEL_17:
            v2 += v8;
            if (v8 < 0)
              return -1;
            continue;
          case 9:
          case 0xA:
            v5 = xmlTextWriterEndDTDElement(writer);
            goto LABEL_16;
          case 0xB:
          case 0xC:
            v5 = xmlTextWriterEndDTDAttlist(writer);
            goto LABEL_16;
          case 0xD:
          case 0xE:
          case 0xF:
            v5 = xmlTextWriterEndDTDEntity(writer);
            goto LABEL_16;
          case 0x10:
            v5 = xmlTextWriterEndComment(writer);
LABEL_16:
            v8 = v5;
            goto LABEL_17;
          default:
            return v2;
        }
      }
    }
    return v2;
  }
}

int xmlTextWriterEndComment(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  int v4;
  int v5;
  int v6;

  if (!writer)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlTextWriterEndComment : invalid writer!\n");
    return -1;
  }
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
  {
    xmlWriterErrMsg((uint64_t)writer, 1, (char)"xmlTextWriterEndComment : not allowed in this context!\n");
    return -1;
  }
  Data = xmlLinkGetData(v2);
  if (!Data)
    return -1;
  if (Data[2] != 16)
    return -1;
  v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "-->");
  if (v4 < 0)
    return -1;
  v5 = v4;
  if (*((_DWORD *)writer + 7))
  {
    v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v6 & 0x80000000) == 0)
    {
      v5 += v6;
      goto LABEL_9;
    }
    return -1;
  }
LABEL_9:
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v5;
}

int xmlTextWriterFlush(xmlTextWriterPtr writer)
{
  xmlOutputBuffer *v1;

  if (writer)
  {
    v1 = *(xmlOutputBuffer **)writer;
    if (v1)
      LODWORD(v1) = xmlOutputBufferFlush(v1);
  }
  else
  {
    LODWORD(v1) = -1;
  }
  return (int)v1;
}

int xmlTextWriterStartComment(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  _DWORD *v4;
  int v5;
  BOOL v6;
  int v7;
  _DWORD *v8;
  int v9;
  int v10;
  int v12;
  int v13;
  int v14;
  int v15;

  if (!writer)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlTextWriterStartComment : invalid writer!\n");
    return -1;
  }
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (v2 && (Data = xmlLinkGetData(v2)) != 0 && ((v4 = Data, (v5 = Data[2]) != 0) ? (v6 = v5 == 3) : (v6 = 1), !v6))
  {
    if (v5 != 1)
      return -1;
    v12 = xmlTextWriterOutputNSDecl((uint64_t)writer);
    if (v12 < 0)
      return -1;
    v13 = v12;
    v14 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
    if (v14 < 0)
      return -1;
    v7 = v14 + v13;
    if (*((_DWORD *)writer + 7))
    {
      v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
      if (v15 < 0)
        return -1;
      v7 += v15;
    }
    v4[2] = 3;
  }
  else
  {
    v7 = 0;
  }
  v8 = xmlMalloc(0x10uLL);
  if (!v8)
  {
    xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartElement : out of memory!\n");
    return -1;
  }
  *(_QWORD *)v8 = 0;
  v8[2] = 16;
  xmlListPushFront(*((xmlListPtr *)writer + 1), v8);
  if (!*((_DWORD *)writer + 7))
    goto LABEL_14;
  v9 = xmlTextWriterWriteIndent((uint64_t)writer);
  if (v9 < 0)
    return -1;
  v7 += v9;
LABEL_14:
  v10 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!--");
  if (v10 >= 0)
    return v10 + v7;
  else
    return -1;
}

uint64_t xmlTextWriterOutputNSDecl(uint64_t a1)
{
  uint64_t v2;
  xmlLink *v3;
  const xmlChar **Data;
  const xmlChar **v5;
  xmlChar *v6;
  xmlChar *v7;
  int v8;

  v2 = 0;
  while (!xmlListEmpty(*(xmlListPtr *)(a1 + 16)))
  {
    v3 = xmlListFront(*(xmlListPtr *)(a1 + 16));
    Data = (const xmlChar **)xmlLinkGetData(v3);
    if (Data)
    {
      v5 = Data;
      v6 = xmlStrdup(Data[1]);
      v7 = xmlStrdup(*v5);
      xmlListPopFront(*(xmlListPtr *)(a1 + 16));
      v8 = xmlTextWriterWriteAttribute((xmlTextWriterPtr)a1, v7, v6);
      xmlFree(v6);
      xmlFree(v7);
      if (v8 < 0)
      {
        xmlListDelete(*(xmlListPtr *)(a1 + 16));
        *(_QWORD *)(a1 + 16) = 0;
        return 0xFFFFFFFFLL;
      }
      v2 = (v8 + v2);
    }
    else
    {
      xmlListPopFront(*(xmlListPtr *)(a1 + 16));
    }
  }
  return v2;
}

uint64_t xmlTextWriterWriteIndent(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;

  v2 = xmlListSize(*(xmlListPtr *)(a1 + 8));
  v3 = (v2 - 1);
  if (v2 < 1)
    return 0xFFFFFFFFLL;
  if (v2 != 1)
  {
    v4 = v2 - 1;
    while (xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)a1, *(const char **)(a1 + 40)) != -1)
    {
      if (!--v4)
        return v3;
    }
    return 0xFFFFFFFFLL;
  }
  return 0;
}

int xmlTextWriterWriteFormatComment(xmlTextWriterPtr writer, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatComment(writer, format, va);
}

int xmlTextWriterWriteVFormatComment(xmlTextWriterPtr writer, const char *format, va_list argptr)
{
  void (__cdecl *v4)(void *, xmlErrorPtr);
  void (__cdecl *v5)(void *, xmlErrorPtr);
  int v6;

  if (writer)
  {
    v4 = xmlTextWriterVSprintf(format, argptr);
    if (v4)
    {
      v5 = v4;
      v6 = xmlTextWriterWriteComment(writer, (const xmlChar *)v4);
      xmlFree(v5);
      return v6;
    }
  }
  else
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlTextWriterWriteVFormatComment : invalid writer!\n");
  }
  return -1;
}

void (__cdecl *xmlTextWriterVSprintf(const char *a1, va_list a2))(void *, xmlErrorPtr)
{
  void (__cdecl *v3)(void *, xmlErrorPtr);
  void (__cdecl *v4)(void *, xmlErrorPtr);
  uint64_t i;
  unsigned int v6;

  v3 = (void (__cdecl *)(void *, xmlErrorPtr))xmlMalloc(0x400uLL);
  v4 = v3;
  if (!v3)
  {
LABEL_10:
    __xmlRaiseError(v3, 0, 0, 0, 0, 0x19u, 2, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlTextWriterVSprintf : out of memory!\n");
    return v4;
  }
  if (vsnprintf((char *)v3, 0x400uLL, a1, a2) >= 0x3FF)
  {
    for (i = 2047; ; i += 1024)
    {
      xmlFree(v4);
      v3 = (void (__cdecl *)(void *, xmlErrorPtr))xmlMalloc(i + 1);
      v4 = v3;
      if (!v3)
        break;
      v6 = vsnprintf((char *)v3, i + 1, a1, a2);
      if (i + 1 > (unint64_t)v6 && i != v6)
        return v4;
    }
    goto LABEL_10;
  }
  return v4;
}

int xmlTextWriterWriteComment(xmlTextWriterPtr writer, const xmlChar *content)
{
  int started;
  int v5;
  int v6;
  int v7;
  int v8;

  started = xmlTextWriterStartComment(writer);
  if (started < 0)
    return -1;
  v5 = started;
  v6 = xmlTextWriterWriteString(writer, content);
  if (v6 < 0)
    return -1;
  v7 = v6;
  v8 = xmlTextWriterEndComment(writer);
  if (v8 >= 0)
    return v7 + v5 + v8;
  else
    return -1;
}

int xmlTextWriterWriteString(xmlTextWriterPtr writer, const xmlChar *content)
{
  int v2;
  xmlLink *v5;
  xmlChar *v6;
  _DWORD *Data;
  int v8;
  int v10;

  v2 = -1;
  if (writer && content)
  {
    v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    v6 = (xmlChar *)content;
    if (v5)
    {
      Data = xmlLinkGetData(v5);
      v6 = (xmlChar *)content;
      if (Data)
      {
        v8 = Data[2];
        if (v8 == 1 || v8 == 3)
        {
          v6 = xmlEncodeSpecialChars(0, content);
          if (!v6)
            return 0;
        }
        else
        {
          v6 = (xmlChar *)content;
          if (v8 == 2)
          {
            xmlBufAttrSerializeTxtContent(*(uint64x2_t **)(*(_QWORD *)writer + 32), *((_QWORD *)writer + 9), 0, content);
            return 0;
          }
        }
      }
    }
    v10 = xmlStrlen(v6);
    v2 = xmlTextWriterWriteRawLen(writer, v6, v10);
    if (v6 != content)
      xmlFree(v6);
    if (v2 < 0)
      return -1;
  }
  return v2;
}

int xmlTextWriterStartElement(xmlTextWriterPtr writer, const xmlChar *name)
{
  int result;
  xmlLink *v5;
  _DWORD *Data;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  xmlChar *v15;
  int v16;
  int v17;
  int v18;

  result = -1;
  if (writer && name && *name)
  {
    v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v5 && (Data = xmlLinkGetData(v5)) != 0)
    {
      v7 = Data;
      v8 = Data[2];
      if ((v8 - 4) < 2)
        return -1;
      v9 = 0;
      if (v8 != 1)
      {
        if (v8 != 2)
          goto LABEL_16;
        v9 = xmlTextWriterEndAttribute(writer);
        if (v9 < 0)
          return -1;
      }
      v10 = xmlTextWriterOutputNSDecl((uint64_t)writer);
      if (v10 < 0)
        return -1;
      v11 = v10;
      v12 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
      if (v12 < 0)
        return -1;
      v9 += v11 + v12;
      if (*((_DWORD *)writer + 7))
        xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
      v7[2] = 3;
    }
    else
    {
      v9 = 0;
    }
LABEL_16:
    v13 = xmlMalloc(0x10uLL);
    if (v13)
    {
      v14 = v13;
      v15 = xmlStrdup(name);
      *(_QWORD *)v14 = v15;
      if (v15)
      {
        v14[2] = 1;
        xmlListPushFront(*((xmlListPtr *)writer + 1), v14);
        if (*((_DWORD *)writer + 7))
          v9 += xmlTextWriterWriteIndent((uint64_t)writer);
        v16 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<");
        if ((v16 & 0x80000000) == 0)
        {
          v17 = v16;
          v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, *(const char **)v14);
          if ((v18 & 0x80000000) == 0)
            return v17 + v9 + v18;
        }
      }
      else
      {
        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartElement : out of memory!\n");
        xmlFree(v14);
      }
    }
    else
    {
      xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartElement : out of memory!\n");
    }
    return -1;
  }
  return result;
}

int xmlTextWriterEndAttribute(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  int result;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
    return -1;
  Data = xmlLinkGetData(v2);
  if (!Data || Data[2] != 2)
    return -1;
  Data[2] = 1;
  result = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
  if (result < 0)
    return -1;
  return result;
}

int xmlTextWriterStartElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI)
{
  int started;
  xmlChar *v9;
  xmlChar *v10;
  xmlChar *v11;
  xmlChar **v12;
  xmlChar **v13;
  xmlChar *v14;
  xmlChar *v15;
  xmlChar *v16;

  started = -1;
  if (writer && name && *name)
  {
    if (prefix)
    {
      v9 = xmlStrdup(prefix);
      v10 = xmlStrcat(v9, (const xmlChar *)":");
    }
    else
    {
      v10 = 0;
    }
    v11 = xmlStrcat(v10, name);
    started = xmlTextWriterStartElement(writer, v11);
    xmlFree(v11);
    if (started < 0)
      return -1;
    if (namespaceURI)
    {
      v12 = (xmlChar **)xmlMalloc(0x18uLL);
      if (v12)
      {
        v13 = v12;
        v14 = xmlStrdup((const xmlChar *)"xmlns");
        if (prefix)
        {
          v15 = xmlStrcat(v14, (const xmlChar *)":");
          v14 = xmlStrcat(v15, prefix);
        }
        *v13 = v14;
        v16 = xmlStrdup(namespaceURI);
        v13[1] = v16;
        if (v16)
        {
          v13[2] = (xmlChar *)xmlListFront(*((xmlListPtr *)writer + 1));
          xmlListPushFront(*((xmlListPtr *)writer + 2), v13);
          return started;
        }
        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartElementNS : out of memory!\n");
        xmlFree(v13);
      }
      else
      {
        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartElementNS : out of memory!\n");
      }
      return -1;
    }
  }
  return started;
}

int xmlTextWriterFullEndElement(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  const char **Data;
  const char **v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
    return -1;
  Data = (const char **)xmlLinkGetData(v2);
  if (!Data)
    return -1;
  v4 = Data;
  v5 = *((_DWORD *)Data + 2);
  switch(v5)
  {
    case 1:
      v6 = 0;
      break;
    case 3:
      v10 = 0;
      v11 = (_DWORD *)((char *)writer + 28);
      if (!*((_DWORD *)writer + 7))
        goto LABEL_17;
      goto LABEL_15;
    case 2:
      v6 = xmlTextWriterEndAttribute(writer);
      if (v6 < 0)
        return -1;
      break;
    default:
      return -1;
  }
  v7 = xmlTextWriterOutputNSDecl((uint64_t)writer);
  if (v7 < 0)
    return -1;
  v8 = v7;
  v9 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v9 < 0)
    return -1;
  v10 = v8 + v6 + v9;
  v11 = (_DWORD *)((char *)writer + 28);
  if (!*((_DWORD *)writer + 7))
    goto LABEL_17;
  *((_DWORD *)writer + 8) = 0;
LABEL_15:
  if (*((_DWORD *)writer + 8))
    v10 += xmlTextWriterWriteIndent((uint64_t)writer);
LABEL_17:
  *((_DWORD *)writer + 8) = 1;
  v12 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "</");
  if (v12 < 0)
    return -1;
  v13 = v12;
  v14 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, *v4);
  if (v14 < 0)
    return -1;
  v15 = v14;
  v16 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v16 < 0)
    return -1;
  v17 = v13 + v10 + v16 + v15;
  if (*v11)
    v17 += xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v17;
}

int xmlTextWriterWriteFormatRaw(xmlTextWriterPtr writer, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatRaw(writer, format, va);
}

int xmlTextWriterWriteVFormatRaw(xmlTextWriterPtr writer, const char *format, va_list argptr)
{
  void (__cdecl *v4)(void *, xmlErrorPtr);
  xmlChar *v5;
  int v6;
  int v7;

  if (!writer)
    return -1;
  v4 = xmlTextWriterVSprintf(format, argptr);
  if (!v4)
    return -1;
  v5 = (xmlChar *)v4;
  v6 = xmlStrlen((const xmlChar *)v4);
  v7 = xmlTextWriterWriteRawLen(writer, v5, v6);
  xmlFree(v5);
  return v7;
}

int xmlTextWriterWriteRaw(xmlTextWriterPtr writer, const xmlChar *content)
{
  int v4;

  v4 = xmlStrlen(content);
  return xmlTextWriterWriteRawLen(writer, content, v4);
}

int xmlTextWriterWriteRawLen(xmlTextWriterPtr writer, const xmlChar *content, int len)
{
  xmlLink *v6;
  void *Data;
  int v8;
  int v10;

  if (!writer)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlTextWriterWriteRawLen : invalid writer!\n");
    return -1;
  }
  if (!content || len < 0)
  {
    xmlWriterErrMsg((uint64_t)writer, 1, (char)"xmlTextWriterWriteRawLen : invalid content!\n");
    return -1;
  }
  v6 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (v6)
  {
    Data = xmlLinkGetData(v6);
    v8 = xmlTextWriterHandleStateDependencies((uint64_t)writer, (uint64_t)Data);
    if (v8 < 0)
      return -1;
  }
  else
  {
    v8 = 0;
  }
  if (*((_DWORD *)writer + 7))
    *((_DWORD *)writer + 8) = 0;
  v10 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, len, (const char *)content);
  if (v10 < 0)
    return -1;
  else
    return v10 + v8;
}

uint64_t xmlTextWriterHandleStateDependencies(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  char str[2];
  char v10;

  if (!a2)
    return 0;
  result = 0;
  *(_WORD *)str = 0;
  v10 = 0;
  switch(*(_DWORD *)(a2 + 8))
  {
    case 1:
      v7 = xmlTextWriterOutputNSDecl(a1);
      if ((v7 & 0x80000000) == 0)
      {
        v5 = v7;
        str[0] = 62;
        v6 = 3;
        goto LABEL_11;
      }
      return 0xFFFFFFFFLL;
    case 4:
      v5 = 0;
      str[0] = 32;
      v6 = 5;
      goto LABEL_11;
    case 7:
      v5 = 0;
      *(_WORD *)str = 23328;
      v6 = 8;
      goto LABEL_11;
    case 9:
      v5 = 0;
      str[0] = 32;
      v6 = 10;
      goto LABEL_11;
    case 0xB:
      v5 = 0;
      str[0] = 32;
      v6 = 12;
      goto LABEL_11;
    case 0xD:
    case 0xF:
      v5 = 0;
      str[0] = 32;
      str[1] = *(_BYTE *)(a1 + 48);
      v6 = 14;
LABEL_11:
      *(_DWORD *)(a2 + 8) = v6;
      v8 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)a1, str);
      if (v8 < 0)
        result = 0xFFFFFFFFLL;
      else
        result = (v8 + v5);
      break;
    default:
      return result;
  }
  return result;
}

int xmlTextWriterWriteFormatString(xmlTextWriterPtr writer, const char *format, ...)
{
  int result;
  va_list va;

  va_start(va, format);
  result = -1;
  if (writer)
  {
    if (format)
      return xmlTextWriterWriteVFormatString(writer, format, va);
  }
  return result;
}

int xmlTextWriterWriteVFormatString(xmlTextWriterPtr writer, const char *format, va_list argptr)
{
  void (__cdecl *v4)(void *, xmlErrorPtr);
  void (__cdecl *v5)(void *, xmlErrorPtr);
  int v6;

  if (!writer)
    return -1;
  if (!format)
    return -1;
  v4 = xmlTextWriterVSprintf(format, argptr);
  if (!v4)
    return -1;
  v5 = v4;
  v6 = xmlTextWriterWriteString(writer, (const xmlChar *)v4);
  xmlFree(v5);
  return v6;
}

int xmlTextWriterWriteBase64(xmlTextWriterPtr writer, const char *data, int start, int len)
{
  int v4;
  xmlLink *v9;
  void *v10;
  xmlOutputBuffer *v11;
  int v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  int v19;
  int v20;
  const char *v22;
  char buf[2];
  char v24;
  char v25;
  __int16 __dst;
  unsigned __int8 v27;

  v4 = -1;
  if (writer && data && ((len | start) & 0x80000000) == 0)
  {
    v9 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v9 && (v10 = xmlLinkGetData(v9)) != 0)
    {
      v4 = xmlTextWriterHandleStateDependencies((uint64_t)writer, (uint64_t)v10);
      if (v4 < 0)
        return -1;
    }
    else
    {
      v4 = 0;
    }
    if (*((_DWORD *)writer + 7))
      *((_DWORD *)writer + 8) = 0;
    v11 = *(xmlOutputBuffer **)writer;
    if (!v11)
      return -1;
    v27 = 0;
    __dst = 0;
    if (len >= 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v22 = &data[start];
      while (1)
      {
        v15 = ~v14 + len;
        if (v15 >= 2)
          v15 = 2;
        memcpy(&__dst, &v22[v14], v15 + 1);
        v16 = 0;
        do
        {
          v17 = v16++;
          v18 = v14 + 1 + v17;
        }
        while (v17 <= 1 && v18 < len);
        buf[0] = xmlOutputBufferWriteBase64_dtable[(unint64_t)__dst >> 2];
        buf[1] = xmlOutputBufferWriteBase64_dtable[((unint64_t)HIBYTE(__dst) >> 4) & 0xFFFFFFFFFFFFFFCFLL | (16 * (__dst & 3))];
        v24 = xmlOutputBufferWriteBase64_dtable[((unint64_t)v27 >> 6) & 0xFFFFFFFFFFFFFFC3 | (4 * (HIBYTE(__dst) & 0xF))];
        v25 = xmlOutputBufferWriteBase64_dtable[v27 & 0x3F];
        if (v17 <= 1)
        {
          v25 = 61;
          if (v16 != 2)
            v24 = 61;
        }
        if (v13 >= 72)
        {
          v19 = xmlOutputBufferWrite(v11, 2, "\r\n");
          if (v19 == -1)
            return -1;
          v13 = 0;
          v12 += v19;
        }
        v20 = xmlOutputBufferWrite(v11, 4, buf);
        if (v20 == -1)
          break;
        v12 += v20;
        if (v18 < len)
        {
          v13 += 4;
          v27 = 0;
          __dst = 0;
          v14 += v16;
          if (v14 < len)
            continue;
        }
        if (v12 < 0)
          return -1;
        v4 += v12;
        return v4;
      }
      return -1;
    }
  }
  return v4;
}

int xmlTextWriterWriteBinHex(xmlTextWriterPtr writer, const char *data, int start, int len)
{
  int v4;
  xmlLink *v9;
  void *v10;
  xmlOutputBuffer *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;

  v4 = -1;
  if (writer && data && ((len | start) & 0x80000000) == 0)
  {
    v9 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v9 && (v10 = xmlLinkGetData(v9)) != 0)
    {
      v4 = xmlTextWriterHandleStateDependencies((uint64_t)writer, (uint64_t)v10);
      if (v4 < 0)
        return -1;
    }
    else
    {
      v4 = 0;
    }
    if (*((_DWORD *)writer + 7))
      *((_DWORD *)writer + 8) = 0;
    v11 = *(xmlOutputBuffer **)writer;
    if (!v11)
      return -1;
    if (len >= 1)
    {
      v12 = 0;
      v13 = &data[start];
      v14 = len;
      while (1)
      {
        v15 = xmlOutputBufferWrite(v11, 1, &xmlOutputBufferWriteBinHex_hex[(unint64_t)*(unsigned __int8 *)v13 >> 4]);
        if (v15 == -1)
          break;
        v16 = v15;
        v17 = xmlOutputBufferWrite(v11, 1, &xmlOutputBufferWriteBinHex_hex[*v13 & 0xF]);
        if (v17 == -1)
          break;
        v12 += v16 + v17;
        ++v13;
        if (!--v14)
        {
          if (v12 < 0)
            return -1;
          v4 += v12;
          return v4;
        }
      }
      return -1;
    }
  }
  return v4;
}

int xmlTextWriterStartAttribute(xmlTextWriterPtr writer, const xmlChar *name)
{
  int result;
  xmlLink *v5;
  _DWORD *Data;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;

  result = -1;
  if (writer && name && *name)
  {
    v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (!v5)
      return -1;
    Data = xmlLinkGetData(v5);
    if (!Data)
      return -1;
    v7 = Data;
    v8 = Data[2];
    if (v8 == 1)
    {
      v9 = 0;
    }
    else
    {
      if (v8 != 2)
        return -1;
      v9 = xmlTextWriterEndAttribute(writer);
      if (v9 < 0)
        return -1;
    }
    v10 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " ");
    if ((v10 & 0x80000000) == 0)
    {
      v11 = v10;
      v12 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
      if ((v12 & 0x80000000) == 0)
      {
        v13 = v12;
        v14 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "=");
        if ((v14 & 0x80000000) == 0)
        {
          v15 = v14;
          v16 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
          if ((v16 & 0x80000000) == 0)
          {
            result = v11 + v9 + v13 + v15 + v16;
            v7[2] = 2;
            return result;
          }
        }
      }
    }
    return -1;
  }
  return result;
}

int xmlTextWriterStartAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI)
{
  int result;
  xmlChar *v9;
  xmlChar *v10;
  xmlChar *v11;
  const xmlChar **v12;
  const xmlChar **v13;
  _QWORD *v14;
  _QWORD *v15;
  xmlChar *v16;
  xmlChar *v17;
  xmlChar *v18;
  xmlChar *v19;
  int started;
  _QWORD data[3];

  result = -1;
  if (writer && name && *name)
  {
    if (namespaceURI)
    {
      v9 = xmlStrdup((const xmlChar *)"xmlns");
      v10 = v9;
      if (prefix)
      {
        v11 = xmlStrcat(v9, (const xmlChar *)":");
        v10 = xmlStrcat(v11, prefix);
      }
      data[0] = v10;
      data[1] = namespaceURI;
      data[2] = xmlListFront(*((xmlListPtr *)writer + 1));
      v12 = (const xmlChar **)xmlListSearch(*((xmlListPtr *)writer + 2), data);
      if (v12)
      {
        v13 = v12;
        xmlFree(v10);
        if (xmlStrcmp(v13[1], namespaceURI))
          return -1;
      }
      else if (v10)
      {
        v14 = xmlMalloc(0x18uLL);
        if (!v14)
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartAttributeNS : out of memory!\n");
          return -1;
        }
        v15 = v14;
        *v14 = v10;
        v16 = xmlStrdup(namespaceURI);
        v15[1] = v16;
        if (!v16)
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartAttributeNS : out of memory!\n");
          xmlFree(v15);
          return -1;
        }
        v15[2] = xmlListFront(*((xmlListPtr *)writer + 1));
        xmlListPushFront(*((xmlListPtr *)writer + 2), v15);
      }
    }
    if (prefix)
    {
      v17 = xmlStrdup(prefix);
      v18 = xmlStrcat(v17, (const xmlChar *)":");
    }
    else
    {
      v18 = 0;
    }
    v19 = xmlStrcat(v18, name);
    started = xmlTextWriterStartAttribute(writer, v19);
    xmlFree(v19);
    if (started < 0)
      return -1;
    else
      return started;
  }
  return result;
}

int xmlTextWriterWriteFormatAttribute(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatAttribute(writer, name, format, va);
}

int xmlTextWriterWriteVFormatAttribute(xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr)
{
  void (__cdecl *v6)(void *, xmlErrorPtr);
  void (__cdecl *v7)(void *, xmlErrorPtr);
  int v8;

  if (!writer)
    return -1;
  v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6)
    return -1;
  v7 = v6;
  v8 = xmlTextWriterWriteAttribute(writer, name, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWriteAttribute(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  int started;
  int v6;
  int v7;
  int v8;
  int v9;

  started = xmlTextWriterStartAttribute(writer, name);
  if (started < 0)
    return -1;
  v6 = started;
  v7 = xmlTextWriterWriteString(writer, content);
  if (v7 < 0)
    return -1;
  v8 = v7;
  v9 = xmlTextWriterEndAttribute(writer);
  if (v9 >= 0)
    return v8 + v6 + v9;
  else
    return -1;
}

int xmlTextWriterWriteFormatAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatAttributeNS(writer, prefix, name, namespaceURI, format, va);
}

int xmlTextWriterWriteVFormatAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, va_list argptr)
{
  void (__cdecl *v10)(void *, xmlErrorPtr);
  void (__cdecl *v11)(void *, xmlErrorPtr);
  int v12;

  if (!writer)
    return -1;
  v10 = xmlTextWriterVSprintf(format, argptr);
  if (!v10)
    return -1;
  v11 = v10;
  v12 = xmlTextWriterWriteAttributeNS(writer, prefix, name, namespaceURI, (const xmlChar *)v10);
  xmlFree(v11);
  return v12;
}

int xmlTextWriterWriteAttributeNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const xmlChar *content)
{
  int result;
  int started;
  int v9;
  int v10;
  int v11;
  int v12;

  result = -1;
  if (writer && name && *name)
  {
    started = xmlTextWriterStartAttributeNS(writer, prefix, name, namespaceURI);
    if (started < 0)
      return -1;
    v9 = started;
    v10 = xmlTextWriterWriteString(writer, content);
    if (v10 < 0)
    {
      return -1;
    }
    else
    {
      v11 = v10;
      v12 = xmlTextWriterEndAttribute(writer);
      if (v12 >= 0)
        return v11 + v9 + v12;
      else
        return -1;
    }
  }
  return result;
}

int xmlTextWriterWriteFormatElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatElement(writer, name, format, va);
}

int xmlTextWriterWriteVFormatElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr)
{
  void (__cdecl *v6)(void *, xmlErrorPtr);
  void (__cdecl *v7)(void *, xmlErrorPtr);
  int v8;

  if (!writer)
    return -1;
  v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6)
    return -1;
  v7 = v6;
  v8 = xmlTextWriterWriteElement(writer, name, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWriteElement(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  int result;
  int v6;
  int v7;

  result = xmlTextWriterStartElement(writer, name);
  if (result != -1)
  {
    v6 = result;
    if (content)
    {
      result = xmlTextWriterWriteString(writer, content);
      if (result == -1)
        return result;
      v6 += result;
    }
    v7 = xmlTextWriterEndElement(writer);
    if (v7 == -1)
      return -1;
    else
      return v7 + v6;
  }
  return result;
}

int xmlTextWriterWriteFormatElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatElementNS(writer, prefix, name, namespaceURI, format, va);
}

int xmlTextWriterWriteVFormatElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const char *format, va_list argptr)
{
  void (__cdecl *v10)(void *, xmlErrorPtr);
  void (__cdecl *v11)(void *, xmlErrorPtr);
  int v12;

  if (!writer)
    return -1;
  v10 = xmlTextWriterVSprintf(format, argptr);
  if (!v10)
    return -1;
  v11 = v10;
  v12 = xmlTextWriterWriteElementNS(writer, prefix, name, namespaceURI, (const xmlChar *)v10);
  xmlFree(v11);
  return v12;
}

int xmlTextWriterWriteElementNS(xmlTextWriterPtr writer, const xmlChar *prefix, const xmlChar *name, const xmlChar *namespaceURI, const xmlChar *content)
{
  int result;
  int started;
  int v9;
  int v10;
  int v11;

  result = -1;
  if (writer && name && *name)
  {
    started = xmlTextWriterStartElementNS(writer, prefix, name, namespaceURI);
    if (started < 0)
    {
      return -1;
    }
    else
    {
      v9 = started;
      result = xmlTextWriterWriteString(writer, content);
      if (result != -1)
      {
        v10 = result;
        v11 = xmlTextWriterEndElement(writer);
        if (v11 == -1)
          return -1;
        else
          return v10 + v9 + v11;
      }
    }
  }
  return result;
}

int xmlTextWriterStartPI(xmlTextWriterPtr writer, const xmlChar *target)
{
  int result;
  xmlLink *v5;
  _DWORD *Data;
  _DWORD *v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  _DWORD *v12;
  _DWORD *v13;
  xmlChar *v14;
  int v15;
  int v16;
  int v17;
  xmlTextWriterPtr v18;
  int v19;
  int v20;
  int v21;
  int v22;

  result = -1;
  if (writer && target && *target)
  {
    if (xmlStrcasecmp(target, (const xmlChar *)"xml"))
    {
      v5 = xmlListFront(*((xmlListPtr *)writer + 1));
      if (v5 && (Data = xmlLinkGetData(v5)) != 0)
      {
        v7 = Data;
        v8 = Data[2];
        result = -1;
        v9 = 0;
        v10 = 0;
        switch(v8)
        {
          case 0:
          case 3:
          case 7:
            break;
          case 1:
            goto LABEL_23;
          case 2:
            v9 = xmlTextWriterEndAttribute(writer);
            if (v9 < 0)
              return -1;
LABEL_23:
            v20 = xmlTextWriterOutputNSDecl((uint64_t)writer);
            if (v20 < 0)
              return -1;
            v21 = v20;
            v22 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
            if (v22 < 0)
              return -1;
            v10 = v21 + v9 + v22;
            v7[2] = 3;
            break;
          case 4:
          case 5:
            v11 = "xmlTextWriterStartPI : nested PI!\n";
            goto LABEL_16;
          default:
            return result;
        }
      }
      else
      {
        v10 = 0;
      }
      v12 = xmlMalloc(0x10uLL);
      if (v12)
      {
        v13 = v12;
        v14 = xmlStrdup(target);
        *(_QWORD *)v13 = v14;
        if (v14)
        {
          v13[2] = 4;
          xmlListPushFront(*((xmlListPtr *)writer + 1), v13);
          v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<?");
          if ((v15 & 0x80000000) == 0)
          {
            v16 = v15;
            v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, *(const char **)v13);
            if ((v17 & 0x80000000) == 0)
              return v16 + v10 + v17;
          }
        }
        else
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartPI : out of memory!\n");
          xmlFree(v13);
        }
        return -1;
      }
      v11 = "xmlTextWriterStartPI : out of memory!\n";
      v18 = writer;
      v19 = 2;
    }
    else
    {
      v11 = "xmlTextWriterStartPI : target name [Xx][Mm][Ll] is reserved for xml standardization!\n";
LABEL_16:
      v18 = writer;
      v19 = 1;
    }
    xmlWriterErrMsg((uint64_t)v18, v19, (char)v11);
    return -1;
  }
  return result;
}

int xmlTextWriterWriteFormatPI(xmlTextWriterPtr writer, const xmlChar *target, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatPI(writer, target, format, va);
}

int xmlTextWriterWriteVFormatPI(xmlTextWriterPtr writer, const xmlChar *target, const char *format, va_list argptr)
{
  void (__cdecl *v6)(void *, xmlErrorPtr);
  void (__cdecl *v7)(void *, xmlErrorPtr);
  int v8;

  if (!writer)
    return -1;
  v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6)
    return -1;
  v7 = v6;
  v8 = xmlTextWriterWritePI(writer, target, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWritePI(xmlTextWriterPtr writer, const xmlChar *target, const xmlChar *content)
{
  int result;
  int v6;
  int v7;

  result = xmlTextWriterStartPI(writer, target);
  if (result != -1)
  {
    v6 = result;
    if (content)
    {
      result = xmlTextWriterWriteString(writer, content);
      if (result == -1)
        return result;
      v6 += result;
    }
    v7 = xmlTextWriterEndPI(writer);
    if (v7 == -1)
      return -1;
    else
      return v7 + v6;
  }
  return result;
}

int xmlTextWriterStartCDATA(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  _DWORD *v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD *v10;
  int v11;
  const char *v13;
  xmlTextWriterPtr v14;
  int v15;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (v2 && (Data = xmlLinkGetData(v2)) != 0)
  {
    v4 = Data;
    v5 = 0;
    v6 = 0;
    switch(Data[2])
    {
      case 0:
      case 3:
      case 4:
      case 5:
        goto LABEL_10;
      case 1:
        break;
      case 2:
        v5 = xmlTextWriterEndAttribute(writer);
        if (v5 < 0)
          return -1;
        break;
      case 6:
        v13 = "xmlTextWriterStartCDATA : CDATA not allowed in this context!\n";
        v14 = writer;
        v15 = 1;
        goto LABEL_16;
      default:
        return -1;
    }
    v7 = xmlTextWriterOutputNSDecl((uint64_t)writer);
    if (v7 < 0)
      return -1;
    v8 = v7;
    v9 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
    if (v9 < 0)
      return -1;
    v6 = v8 + v5 + v9;
    v4[2] = 3;
  }
  else
  {
    v6 = 0;
  }
LABEL_10:
  v10 = xmlMalloc(0x10uLL);
  if (!v10)
  {
    v13 = "xmlTextWriterStartCDATA : out of memory!\n";
    v14 = writer;
    v15 = 2;
LABEL_16:
    xmlWriterErrMsg((uint64_t)v14, v15, (char)v13);
    return -1;
  }
  *(_QWORD *)v10 = 0;
  v10[2] = 6;
  xmlListPushFront(*((xmlListPtr *)writer + 1), v10);
  v11 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<![CDATA[");
  if (v11 < 0)
    return -1;
  else
    return v11 + v6;
}

int xmlTextWriterWriteFormatCDATA(xmlTextWriterPtr writer, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatCDATA(writer, format, va);
}

int xmlTextWriterWriteVFormatCDATA(xmlTextWriterPtr writer, const char *format, va_list argptr)
{
  void (__cdecl *v4)(void *, xmlErrorPtr);
  void (__cdecl *v5)(void *, xmlErrorPtr);
  int v6;

  if (!writer)
    return -1;
  v4 = xmlTextWriterVSprintf(format, argptr);
  if (!v4)
    return -1;
  v5 = v4;
  v6 = xmlTextWriterWriteCDATA(writer, (const xmlChar *)v4);
  xmlFree(v5);
  return v6;
}

int xmlTextWriterWriteCDATA(xmlTextWriterPtr writer, const xmlChar *content)
{
  int result;
  int v5;
  int v6;

  result = xmlTextWriterStartCDATA(writer);
  if (result != -1)
  {
    v5 = result;
    if (content)
    {
      result = xmlTextWriterWriteString(writer, content);
      if (result == -1)
        return result;
      v5 += result;
    }
    v6 = xmlTextWriterEndCDATA(writer);
    if (v6 == -1)
      return -1;
    else
      return v6 + v5;
  }
  return result;
}

int xmlTextWriterStartDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid)
{
  int v4;
  xmlLink *v9;
  const char *v10;
  xmlTextWriterPtr v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  xmlChar *v15;
  int v16;
  int v17;
  int v18;
  const char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  xmlOutputBuffer *v30;
  int v31;
  const char *v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;

  v4 = -1;
  if (writer && name && *name)
  {
    v9 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v9 && xmlLinkGetData(v9))
    {
      v10 = "xmlTextWriterStartDTD : DTD allowed only in prolog!\n";
      v11 = writer;
      v12 = 1;
LABEL_24:
      xmlWriterErrMsg((uint64_t)v11, v12, (char)v10);
      return v4;
    }
    v13 = xmlMalloc(0x10uLL);
    if (!v13)
    {
      v10 = "xmlTextWriterStartDTD : out of memory!\n";
      v11 = writer;
      v12 = 2;
      goto LABEL_24;
    }
    v14 = v13;
    v15 = xmlStrdup(name);
    *(_QWORD *)v14 = v15;
    if (v15)
    {
      v14[2] = 7;
      xmlListPushFront(*((xmlListPtr *)writer + 1), v14);
      v16 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!DOCTYPE ");
      if ((v16 & 0x80000000) == 0)
      {
        v17 = v16;
        v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
        if ((v18 & 0x80000000) == 0)
        {
          v4 = v18 + v17;
          if (!pubid)
          {
            if (!sysid)
              return v4;
            if (*((_DWORD *)writer + 7))
              v33 = "\n";
            else
              v33 = " ";
            v34 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, v33);
            if (v34 < 0)
              return -1;
            v35 = v34;
            v31 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "SYSTEM ");
            if (v31 < 0)
              return -1;
            v36 = v35 + v4;
            goto LABEL_39;
          }
          if (sysid)
          {
            if (*((_DWORD *)writer + 7))
              v19 = "\n";
            else
              v19 = " ";
            v20 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, v19);
            if ((v20 & 0x80000000) == 0)
            {
              v21 = v20;
              v22 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "PUBLIC ");
              if ((v22 & 0x80000000) == 0)
              {
                v23 = v22;
                v24 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
                if ((v24 & 0x80000000) == 0)
                {
                  v25 = v24;
                  v26 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)pubid);
                  if ((v26 & 0x80000000) == 0)
                  {
                    v27 = v26;
                    v28 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
                    if ((v28 & 0x80000000) == 0)
                    {
                      v29 = v28;
                      v30 = *(xmlOutputBuffer **)writer;
                      v31 = *((_DWORD *)writer + 7)
                          ? xmlOutputBufferWriteString(v30, "\n       ")
                          : xmlOutputBufferWrite(v30, 1, " ");
                      if ((v31 & 0x80000000) == 0)
                      {
                        v36 = v21 + v4 + v23 + v25 + v27 + v29;
LABEL_39:
                        v37 = v36 + v31;
                        v38 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
                        if ((v38 & 0x80000000) == 0)
                        {
                          v39 = v38;
                          v40 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)sysid);
                          if ((v40 & 0x80000000) == 0)
                          {
                            v41 = v40;
                            v42 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
                            if ((v42 & 0x80000000) == 0)
                              return v39 + v37 + v41 + v42;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          else
          {
            xmlWriterErrMsg((uint64_t)writer, 1, (char)"xmlTextWriterStartDTD : system identifier needed!\n");
          }
        }
      }
    }
    else
    {
      xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTD : out of memory!\n");
      xmlFree(v14);
    }
    return -1;
  }
  return v4;
}

int xmlTextWriterEndDTDElement(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  int v4;
  int v5;
  int v6;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
    return -1;
  Data = xmlLinkGetData(v2);
  if (!Data)
    return -1;
  if ((Data[2] - 9) > 1)
    return -1;
  v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v4 < 0)
    return -1;
  v5 = v4;
  if (*((_DWORD *)writer + 7))
  {
    v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v6 & 0x80000000) == 0)
    {
      v5 += v6;
      goto LABEL_9;
    }
    return -1;
  }
LABEL_9:
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v5;
}

int xmlTextWriterEndDTDAttlist(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  int v4;
  int v5;
  int v6;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
    return -1;
  Data = xmlLinkGetData(v2);
  if (!Data)
    return -1;
  if ((Data[2] - 11) > 1)
    return -1;
  v4 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v4 < 0)
    return -1;
  v5 = v4;
  if (*((_DWORD *)writer + 7))
  {
    v6 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v6 & 0x80000000) == 0)
    {
      v5 += v6;
      goto LABEL_9;
    }
    return -1;
  }
LABEL_9:
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v5;
}

int xmlTextWriterEndDTDEntity(xmlTextWriterPtr writer)
{
  xmlLink *v2;
  _DWORD *Data;
  int v4;
  int v6;
  int v7;
  int v8;
  int v9;

  if (!writer)
    return -1;
  v2 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v2)
    return -1;
  Data = xmlLinkGetData(v2);
  if (!Data)
    return -1;
  v4 = Data[2];
  if (v4 == 13 || v4 == 15)
  {
    v6 = 0;
  }
  else
  {
    if (v4 != 14)
      return -1;
    v6 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v6 < 0)
      return -1;
  }
  v7 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
  if (v7 < 0)
    return -1;
  v8 = v7 + v6;
  if (*((_DWORD *)writer + 7))
  {
    v9 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
    if ((v9 & 0x80000000) == 0)
    {
      v8 += v9;
      goto LABEL_16;
    }
    return -1;
  }
LABEL_16:
  xmlListPopFront(*((xmlListPtr *)writer + 1));
  return v8;
}

int xmlTextWriterWriteFormatDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatDTD(writer, name, pubid, sysid, format, va);
}

int xmlTextWriterWriteVFormatDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const char *format, va_list argptr)
{
  void (__cdecl *v10)(void *, xmlErrorPtr);
  void (__cdecl *v11)(void *, xmlErrorPtr);
  int v12;

  if (!writer)
    return -1;
  v10 = xmlTextWriterVSprintf(format, argptr);
  if (!v10)
    return -1;
  v11 = v10;
  v12 = xmlTextWriterWriteDTD(writer, name, pubid, sysid, (const xmlChar *)v10);
  xmlFree(v11);
  return v12;
}

int xmlTextWriterWriteDTD(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *subset)
{
  int result;
  int v8;
  int v9;

  result = xmlTextWriterStartDTD(writer, name, pubid, sysid);
  if (result != -1)
  {
    v8 = result;
    if (subset)
    {
      result = xmlTextWriterWriteString(writer, subset);
      if (result == -1)
        return result;
      v8 += result;
    }
    v9 = xmlTextWriterEndDTD(writer);
    if (v9 == -1)
      return -1;
    else
      return v9 + v8;
  }
  return result;
}

int xmlTextWriterStartDTDElement(xmlTextWriterPtr writer, const xmlChar *name)
{
  int result;
  xmlLink *v5;
  _DWORD *Data;
  _DWORD *v7;
  int v8;
  BOOL v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  xmlChar *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  result = -1;
  if (writer && name && *name)
  {
    v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v5)
    {
      Data = xmlLinkGetData(v5);
      if (!Data || ((v7 = Data, (v8 = Data[2]) != 0) ? (v9 = v8 == 8) : (v9 = 1), v9))
      {
        v10 = 0;
      }
      else
      {
        if (v8 != 7)
          return -1;
        v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " [");
        if (v18 < 0)
          return -1;
        v10 = v18;
        if (*((_DWORD *)writer + 7))
        {
          v19 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
          if (v19 < 0)
            return -1;
          v10 += v19;
        }
        v7[2] = 8;
      }
      v11 = xmlMalloc(0x10uLL);
      if (v11)
      {
        v12 = v11;
        v13 = xmlStrdup(name);
        *(_QWORD *)v12 = v13;
        if (v13)
        {
          v12[2] = 9;
          xmlListPushFront(*((xmlListPtr *)writer + 1), v12);
          if (!*((_DWORD *)writer + 7))
          {
LABEL_17:
            v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!ELEMENT ");
            if ((v15 & 0x80000000) == 0)
            {
              v16 = v15;
              v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
              if ((v17 & 0x80000000) == 0)
                return v16 + v10 + v17;
            }
            return -1;
          }
          v14 = xmlTextWriterWriteIndent((uint64_t)writer);
          if ((v14 & 0x80000000) == 0)
          {
            v10 += v14;
            goto LABEL_17;
          }
        }
        else
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDElement : out of memory!\n");
          xmlFree(v12);
        }
      }
      else
      {
        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDElement : out of memory!\n");
      }
    }
    return -1;
  }
  return result;
}

int xmlTextWriterWriteFormatDTDElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatDTDElement(writer, name, format, va);
}

int xmlTextWriterWriteVFormatDTDElement(xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr)
{
  void (__cdecl *v6)(void *, xmlErrorPtr);
  void (__cdecl *v7)(void *, xmlErrorPtr);
  int v8;

  if (!writer)
    return -1;
  v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6)
    return -1;
  v7 = v6;
  v8 = xmlTextWriterWriteDTDElement(writer, name, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWriteDTDElement(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  int result;
  int v6;
  int v7;
  int v8;

  if (!content)
    return -1;
  result = xmlTextWriterStartDTDElement(writer, name);
  if (result != -1)
  {
    v6 = result;
    result = xmlTextWriterWriteString(writer, content);
    if (result != -1)
    {
      v7 = result;
      v8 = xmlTextWriterEndDTDElement(writer);
      if (v8 == -1)
        return -1;
      else
        return v7 + v6 + v8;
    }
  }
  return result;
}

int xmlTextWriterStartDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name)
{
  int result;
  xmlLink *v5;
  _DWORD *Data;
  _DWORD *v7;
  int v8;
  BOOL v9;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  xmlChar *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;

  result = -1;
  if (writer && name && *name)
  {
    v5 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v5)
    {
      Data = xmlLinkGetData(v5);
      if (!Data || ((v7 = Data, (v8 = Data[2]) != 0) ? (v9 = v8 == 8) : (v9 = 1), v9))
      {
        v10 = 0;
      }
      else
      {
        if (v8 != 7)
          return -1;
        v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " [");
        if (v18 < 0)
          return -1;
        v10 = v18;
        if (*((_DWORD *)writer + 7))
        {
          v19 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
          if (v19 < 0)
            return -1;
          v10 += v19;
        }
        v7[2] = 8;
      }
      v11 = xmlMalloc(0x10uLL);
      if (v11)
      {
        v12 = v11;
        v13 = xmlStrdup(name);
        *(_QWORD *)v12 = v13;
        if (v13)
        {
          v12[2] = 11;
          xmlListPushFront(*((xmlListPtr *)writer + 1), v12);
          if (!*((_DWORD *)writer + 7))
          {
LABEL_17:
            v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!ATTLIST ");
            if ((v15 & 0x80000000) == 0)
            {
              v16 = v15;
              v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
              if ((v17 & 0x80000000) == 0)
                return v16 + v10 + v17;
            }
            return -1;
          }
          v14 = xmlTextWriterWriteIndent((uint64_t)writer);
          if ((v14 & 0x80000000) == 0)
          {
            v10 += v14;
            goto LABEL_17;
          }
        }
        else
        {
          xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDAttlist : out of memory!\n");
          xmlFree(v12);
        }
      }
      else
      {
        xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDAttlist : out of memory!\n");
      }
    }
    return -1;
  }
  return result;
}

int xmlTextWriterWriteFormatDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatDTDAttlist(writer, name, format, va);
}

int xmlTextWriterWriteVFormatDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name, const char *format, va_list argptr)
{
  void (__cdecl *v6)(void *, xmlErrorPtr);
  void (__cdecl *v7)(void *, xmlErrorPtr);
  int v8;

  if (!writer)
    return -1;
  v6 = xmlTextWriterVSprintf(format, argptr);
  if (!v6)
    return -1;
  v7 = v6;
  v8 = xmlTextWriterWriteDTDAttlist(writer, name, (const xmlChar *)v6);
  xmlFree(v7);
  return v8;
}

int xmlTextWriterWriteDTDAttlist(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *content)
{
  int result;
  int v6;
  int v7;
  int v8;

  if (!content)
    return -1;
  result = xmlTextWriterStartDTDAttlist(writer, name);
  if (result != -1)
  {
    v6 = result;
    result = xmlTextWriterWriteString(writer, content);
    if (result != -1)
    {
      v7 = result;
      v8 = xmlTextWriterEndDTDAttlist(writer);
      if (v8 == -1)
        return -1;
      else
        return v7 + v6 + v8;
    }
  }
  return result;
}

int xmlTextWriterStartDTDEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name)
{
  int result;
  xmlLink *v7;
  _DWORD *Data;
  _DWORD *v9;
  int v10;
  BOOL v11;
  int v12;
  _DWORD *v13;
  _DWORD *v14;
  xmlChar *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;

  result = -1;
  if (writer && name && *name)
  {
    v7 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (v7
      && (Data = xmlLinkGetData(v7)) != 0
      && ((v9 = Data, (v10 = Data[2]) != 0) ? (v11 = v10 == 8) : (v11 = 1), !v11))
    {
      if (v10 != 7)
        return -1;
      v22 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " [");
      if (v22 < 0)
        return -1;
      v12 = v22;
      if (*((_DWORD *)writer + 7))
      {
        v23 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
        if (v23 < 0)
          return -1;
        v12 += v23;
      }
      v9[2] = 8;
    }
    else
    {
      v12 = 0;
    }
    v13 = xmlMalloc(0x10uLL);
    if (!v13)
    {
      xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDElement : out of memory!\n");
      return -1;
    }
    v14 = v13;
    v15 = xmlStrdup(name);
    *(_QWORD *)v14 = v15;
    if (!v15)
    {
      xmlWriterErrMsg((uint64_t)writer, 2, (char)"xmlTextWriterStartDTDElement : out of memory!\n");
      xmlFree(v14);
      return -1;
    }
    if (pe)
      v16 = 15;
    else
      v16 = 13;
    v14[2] = v16;
    xmlListPushFront(*((xmlListPtr *)writer + 1), v14);
    if (*((_DWORD *)writer + 7))
    {
      v17 = xmlTextWriterWriteIndent((uint64_t)writer);
      if (v17 < 0)
        return -1;
      v12 += v17;
    }
    v18 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!ENTITY ");
    if ((v18 & 0x80000000) == 0)
    {
      v19 = v18 + v12;
      if (!pe)
        goto LABEL_24;
      v20 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "% ");
      if ((v20 & 0x80000000) == 0)
      {
        v19 += v20;
LABEL_24:
        v21 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
        if (v21 >= 0)
          return v21 + v19;
        else
          return -1;
      }
    }
    return -1;
  }
  return result;
}

int xmlTextWriterWriteFormatDTDInternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const char *format, ...)
{
  va_list va;

  va_start(va, format);
  return xmlTextWriterWriteVFormatDTDInternalEntity(writer, pe, name, format, va);
}

int xmlTextWriterWriteVFormatDTDInternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const char *format, va_list argptr)
{
  void (__cdecl *v8)(void *, xmlErrorPtr);
  void (__cdecl *v9)(void *, xmlErrorPtr);
  int v10;

  if (!writer)
    return -1;
  v8 = xmlTextWriterVSprintf(format, argptr);
  if (!v8)
    return -1;
  v9 = v8;
  v10 = xmlTextWriterWriteDTDInternalEntity(writer, pe, name, (const xmlChar *)v8);
  xmlFree(v9);
  return v10;
}

int xmlTextWriterWriteDTDInternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *content)
{
  int result;
  int v7;
  int v8;
  int v9;

  if (!name)
    return -1;
  result = -1;
  if (content)
  {
    if (*name)
    {
      result = xmlTextWriterStartDTDEntity(writer, pe, name);
      if (result != -1)
      {
        v7 = result;
        result = xmlTextWriterWriteString(writer, content);
        if (result != -1)
        {
          v8 = result;
          v9 = xmlTextWriterEndDTDEntity(writer);
          if (v9 == -1)
            return -1;
          else
            return v8 + v7 + v9;
        }
      }
    }
  }
  return result;
}

int xmlTextWriterWriteDTDEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid, const xmlChar *content)
{
  if (!sysid && !pubid && !content || pe && ndataid)
    return -1;
  if ((unint64_t)pubid | (unint64_t)sysid)
    return xmlTextWriterWriteDTDExternalEntity(writer, pe, name, pubid, sysid, ndataid);
  return xmlTextWriterWriteDTDInternalEntity(writer, pe, name, content);
}

int xmlTextWriterWriteDTDExternalEntity(xmlTextWriterPtr writer, int pe, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid)
{
  int result;
  int v11;
  int v12;
  int v13;
  int v14;

  if (!((unint64_t)pubid | (unint64_t)sysid))
    return -1;
  if (pe && ndataid)
    return -1;
  result = xmlTextWriterStartDTDEntity(writer, pe, name);
  if (result == -1)
    return result;
  v11 = result;
  v12 = xmlTextWriterWriteDTDExternalEntityContents(writer, pubid, sysid, ndataid);
  if (v12 < 0)
    return -1;
  v13 = v12;
  v14 = xmlTextWriterEndDTDEntity(writer);
  if (v14 == -1)
    return -1;
  else
    return v13 + v11 + v14;
}

int xmlTextWriterWriteDTDExternalEntityContents(xmlTextWriterPtr writer, const xmlChar *pubid, const xmlChar *sysid, const xmlChar *ndataid)
{
  xmlLink *v8;
  _DWORD *Data;
  int v10;
  const char *v11;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;

  if (!writer)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0x19u, 1, 3, 0, 0, 0, 0, 0, 0, 0, "%s", (char)"xmlTextWriterWriteDTDExternalEntityContents: xmlTextWriterPtr invalid!\n");
    goto LABEL_11;
  }
  v8 = xmlListFront(*((xmlListPtr *)writer + 1));
  if (!v8)
    goto LABEL_9;
  Data = xmlLinkGetData(v8);
  if (!Data)
  {
LABEL_11:
    LODWORD(sysid) = -1;
    return (int)sysid;
  }
  v10 = Data[2];
  if (v10 == 13)
    goto LABEL_13;
  if (v10 != 15)
  {
LABEL_9:
    v11 = "xmlTextWriterWriteDTDExternalEntityContents: you must call xmlTextWriterStartDTDEntity before the call to this function!\n";
    goto LABEL_10;
  }
  if (ndataid)
  {
    v11 = "xmlTextWriterWriteDTDExternalEntityContents: notation not allowed with parameter entities!\n";
LABEL_10:
    xmlWriterErrMsg((uint64_t)writer, 1, (char)v11);
    goto LABEL_11;
  }
LABEL_13:
  if (pubid)
  {
    if (!sysid)
    {
      v11 = "xmlTextWriterWriteDTDExternalEntityContents: system identifier needed!\n";
      goto LABEL_10;
    }
    v13 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " PUBLIC ");
    if (v13 < 0)
      goto LABEL_11;
    v14 = v13;
    v15 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v15 < 0)
      goto LABEL_11;
    v16 = v15;
    v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)pubid);
    if (v17 < 0)
      goto LABEL_11;
    v18 = v17;
    v19 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
    if (v19 < 0)
      goto LABEL_11;
    v20 = v16 + v14 + v18 + v19;
  }
  else
  {
    if (!sysid)
      goto LABEL_27;
    v20 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " SYSTEM");
    if (v20 < 0)
      goto LABEL_11;
  }
  v21 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " ");
  if (v21 < 0)
    goto LABEL_11;
  v22 = v21;
  v23 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
  if (v23 < 0)
    goto LABEL_11;
  v24 = v23;
  v25 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)sysid);
  if (v25 < 0)
    goto LABEL_11;
  v26 = v25;
  v27 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
  if (v27 < 0)
    goto LABEL_11;
  LODWORD(sysid) = v22 + v20 + v24 + v26 + v27;
LABEL_27:
  if (!ndataid)
    return (int)sysid;
  v28 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " NDATA ");
  if (v28 < 0)
    goto LABEL_11;
  v29 = v28;
  v30 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)ndataid);
  if (v30 >= 0)
    LODWORD(sysid) = v29 + (_DWORD)sysid + v30;
  else
    LODWORD(sysid) = -1;
  return (int)sysid;
}

int xmlTextWriterWriteDTDNotation(xmlTextWriterPtr writer, const xmlChar *name, const xmlChar *pubid, const xmlChar *sysid)
{
  int result;
  xmlLink *v9;
  _DWORD *Data;
  _DWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;

  result = -1;
  if (writer && name && *name)
  {
    v9 = xmlListFront(*((xmlListPtr *)writer + 1));
    if (!v9)
      return -1;
    Data = xmlLinkGetData(v9);
    if (!Data || (v11 = Data, v12 = Data[2], v12 == 8))
    {
      v14 = 0;
    }
    else
    {
      if (v12 != 7)
        return -1;
      v13 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " [");
      if (v13 < 0)
        return -1;
      v14 = v13;
      if (*((_DWORD *)writer + 7))
      {
        v15 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "\n");
        if (v15 < 0)
          return -1;
        v14 += v15;
      }
      v11[2] = 8;
    }
    if (*((_DWORD *)writer + 7))
    {
      v16 = xmlTextWriterWriteIndent((uint64_t)writer);
      if (v16 < 0)
        return -1;
      v14 += v16;
    }
    v17 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, "<!NOTATION ");
    if (v17 < 0)
      return -1;
    v18 = v17;
    v19 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)name);
    if (v19 < 0)
      return -1;
    v20 = v18 + v14 + v19;
    if (pubid)
    {
      v21 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " PUBLIC ");
      if (v21 < 0)
        return -1;
      v22 = v21;
      v23 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
      if (v23 < 0)
        return -1;
      v24 = v23;
      v25 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)pubid);
      if (v25 < 0)
        return -1;
      v26 = v25;
      v27 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
      if (v27 < 0)
        return -1;
      v20 += v22 + v24 + v26 + v27;
      if (!sysid)
      {
LABEL_34:
        v36 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, ">");
        if (v36 >= 0)
          return v36 + v20;
        else
          return -1;
      }
    }
    else
    {
      if (!sysid)
        goto LABEL_34;
      v28 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " SYSTEM");
      if (v28 < 0)
        return -1;
      v20 += v28;
    }
    v29 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, " ");
    if ((v29 & 0x80000000) == 0)
    {
      v30 = v29;
      v31 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
      if ((v31 & 0x80000000) == 0)
      {
        v32 = v31;
        v33 = xmlOutputBufferWriteString(*(xmlOutputBufferPtr *)writer, (const char *)sysid);
        if ((v33 & 0x80000000) == 0)
        {
          v34 = v33;
          v35 = xmlOutputBufferWrite(*(xmlOutputBufferPtr *)writer, 1, (const char *)writer + 48);
          if ((v35 & 0x80000000) == 0)
          {
            v20 += v30 + v32 + v34 + v35;
            goto LABEL_34;
          }
        }
      }
    }
    return -1;
  }
  return result;
}

int xmlTextWriterSetIndent(xmlTextWriterPtr writer, int indent)
{
  int result;

  result = -1;
  if (writer)
  {
    if ((indent & 0x80000000) == 0)
    {
      result = 0;
      *((_DWORD *)writer + 7) = indent;
      *((_DWORD *)writer + 8) = 1;
    }
  }
  return result;
}

int xmlTextWriterSetIndentString(xmlTextWriterPtr writer, const xmlChar *str)
{
  int result;
  void *v5;
  xmlChar *v6;

  result = -1;
  if (writer && str)
  {
    v5 = (void *)*((_QWORD *)writer + 5);
    if (v5)
      xmlFree(v5);
    v6 = xmlStrdup(str);
    *((_QWORD *)writer + 5) = v6;
    if (v6)
      return 0;
    else
      return -1;
  }
  return result;
}

int xmlTextWriterSetQuoteChar(xmlTextWriterPtr writer, xmlChar quotechar)
{
  int result;

  if (!writer || quotechar != 39 && quotechar != 34)
    return -1;
  result = 0;
  *((_BYTE *)writer + 48) = quotechar;
  return result;
}

uint64_t libxml_domnode_binary_insertion_sort_start(uint64_t result, unint64_t a2, unint64_t a3)
{
  unint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;

  if (a2 < a3)
  {
    v4 = a2;
    v5 = (uint64_t *)result;
    v6 = a2 - 2;
    v7 = (_QWORD *)(result + 8 * a2);
    do
    {
      v8 = v4 - 1;
      v9 = v5[v4 - 1];
      v10 = v5[v4];
      result = xmlXPathCmpNodesExt(v9, v10);
      if ((_DWORD)result != -2 && (result & 0x80000000) != 0)
      {
        result = xmlXPathCmpNodesExt(v10, *v5);
        if ((_DWORD)result == -2 || (int)result > 0)
        {
          v8 = 0;
          goto LABEL_25;
        }
        result = xmlXPathCmpNodesExt(v10, v9);
        if ((_DWORD)result == -2 || (result & 0x80000000) == 0)
        {
          v12 = 0;
          v13 = v8 >> 1;
          v14 = v4 - 1;
          while (1)
          {
            result = xmlXPathCmpNodesExt(v10, v5[v13]);
            if ((_DWORD)result != -2 && (int)result < 1)
            {
              v16 = v14 - v13;
              if (v14 - v13 <= 1)
              {
                ++v13;
LABEL_23:
                v17 = v8 >= v13;
                v8 = v13;
                if (!v17)
                {
LABEL_28:
                  v5[v8] = v10;
                  goto LABEL_29;
                }
                break;
              }
              v12 = v13;
              v13 = v14;
            }
            else
            {
              v16 = v13 - v12;
              if (v13 - v12 < 2)
                goto LABEL_23;
            }
            v14 = v13;
            v13 = v12 + (v16 >> 1);
          }
        }
LABEL_25:
        v18 = v7;
        v19 = v6;
        v20 = v7;
        do
        {
          v21 = *--v20;
          *v18 = v21;
          if (v19 == -1)
            break;
          v18 = v20;
          v17 = v19-- >= v8;
        }
        while (v17);
        goto LABEL_28;
      }
LABEL_29:
      ++v4;
      ++v6;
      ++v7;
    }
    while (v4 != a3);
  }
  return result;
}

uint64_t libxml_domnode_tim_sort(uint64_t result, unint64_t a2)
{
  unint64_t v2;
  char v3;
  int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  _BOOL4 v21;
  _BYTE *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[2];
  _BYTE v36[8];
  _QWORD v37[2];
  unint64_t v38;
  uint64_t v39;

  v32 = result;
  v39 = *MEMORY[0x1E0C80C00];
  v33 = 0;
  v34 = 0;
  if (a2 >= 2)
  {
    v2 = a2;
    if (a2 <= 0x3F)
      return libxml_domnode_binary_insertion_sort_start(result, 1uLL, a2);
    bzero(v36, 0x800uLL);
    v3 = 58 - __clz(v2);
    v4 = (v2 & ~(-1 << v3)) != 0 ? (v2 >> v3) + 1 : v2 >> v3;
    v5 = v4;
    v35[0] = 0;
    v35[1] = 0;
    result = PUSH_NEXT(v32, v2, (uint64_t)v35, v4, (uint64_t)v36, &v34, &v33);
    if ((_DWORD)result)
    {
      result = PUSH_NEXT(v32, v2, (uint64_t)v35, v5, (uint64_t)v36, &v34, &v33);
      if ((_DWORD)result)
      {
        result = PUSH_NEXT(v32, v2, (uint64_t)v35, v5, (uint64_t)v36, &v34, &v33);
        if ((_DWORD)result)
        {
          v28 = v5;
          v29 = v2;
          while (1)
          {
            while (1)
            {
              v6 = v34;
              if ((int)v34 >= 2)
                break;
LABEL_13:
              result = PUSH_NEXT(v32, v2, (uint64_t)v35, v5, (uint64_t)v36, &v34, &v33);
              if (!(_DWORD)result)
                return result;
            }
            if ((_DWORD)v34 == 2)
            {
              if (v37[0] > v38)
                goto LABEL_13;
            }
            else
            {
              v7 = v37[2 * (v34 - 2)];
              v8 = v37[2 * (v34 - 1)];
              if (v7 > v8 && v37[2 * (v34 - 3)] > v8 + v7)
                goto LABEL_13;
            }
            v10 = v34;
            if (v34 == 2)
            {
LABEL_38:
              v26 = v38 + v37[0];
              v2 = v29;
              if (v37[0] <= v38 || v26 == v29)
              {
                libxml_domnode_tim_sort_merge(v32, (uint64_t)v36, 2, (uint64_t)v35);
                v37[0] = v26;
                v27 = 1;
              }
              else
              {
                v27 = 2;
              }
            }
            else
            {
              v11 = 0;
              v31 = v34 - 2;
              v30 = v34 - 1;
              v12 = v34;
              while (1)
              {
                v13 = &v36[16 * (v10 - 3 + v11)];
                v16 = *((_QWORD *)v13 + 1);
                v14 = v13 + 8;
                v15 = v16;
                v17 = &v36[16 * (v31 + v11)];
                v20 = *((_QWORD *)v17 + 1);
                v19 = (unint64_t *)(v17 + 8);
                v18 = v20;
                v21 = (unint64_t)(v10 + v11) >= 4 && v37[2 * (v10 - 4 + v11)] <= v18 + v15;
                v22 = &v36[16 * (v10 + v11 - 1)];
                v23 = *((_QWORD *)v22 + 1);
                v24 = v23 + v18;
                if (v15 <= v23 + v18)
                  v21 = 1;
                if (!v21 && v18 > v23)
                  break;
                if (v21 && v18 > v23)
                {
                  libxml_domnode_tim_sort_merge(v32, (uint64_t)v36, v30 + v11, (uint64_t)v35);
                  *v14 = v18 + v15;
                  *(_OWORD *)&v36[16 * (v31 + v11)] = *(_OWORD *)v22;
                }
                else
                {
                  libxml_domnode_tim_sort_merge(v32, (uint64_t)v36, v6, (uint64_t)v35);
                  *v19 = v24;
                }
                --v11;
                v6 = --v12;
                if (v10 + v11 == 2)
                  goto LABEL_38;
              }
              v27 = v10 + v11;
              v2 = v29;
            }
            v34 = v27;
            v5 = v28;
          }
        }
      }
    }
  }
  return result;
}

uint64_t PUSH_NEXT(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t *a6, unint64_t *a7)
{
  unint64_t *v7;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t result;
  unint64_t v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;

  v7 = a7;
  v12 = *a7;
  v13 = a2 - *a7;
  if (v13 == 1)
  {
    v14 = 1;
    goto LABEL_30;
  }
  v43 = a2 - *a7;
  v44 = a4;
  v16 = a2 - 2;
  if (a2 - 2 > v12)
  {
    v17 = v12 + 2;
    v18 = (uint64_t *)(a1 + 8 * v12);
    v19 = v18[1];
    v20 = xmlXPathCmpNodesExt(*v18, v19);
    v21 = a2 - 1;
    if (v20 != -2 && v20 < 0)
    {
      if (v17 != v21)
      {
        v40 = a2 - 1;
        v41 = v7;
        v22 = a2 - 3;
        v23 = v12;
        while (1)
        {
          v24 = *(_QWORD *)(a1 + 16 + 8 * v23);
          v25 = xmlXPathCmpNodesExt(v19, v24);
          if (v25 == -2 || (v25 & 0x80000000) == 0)
            break;
          ++v23;
          v19 = v24;
          if (v22 == v23)
          {
            v21 = v40;
            v7 = v41;
            goto LABEL_22;
          }
        }
        v21 = v23 + 2;
        v7 = v41;
      }
LABEL_22:
      v33 = v21 - 1;
      a4 = v44;
      if (v21 - 1 > v12)
      {
        v34 = v12;
        do
        {
          v35 = *(_QWORD *)(a1 + 8 * v34);
          *(_QWORD *)(a1 + 8 * v34) = *(_QWORD *)(a1 + 8 * v33);
          *(_QWORD *)(a1 + 8 * v33) = v35;
          ++v34;
          --v33;
        }
        while (v34 < v33);
      }
      v14 = v21 - v12;
      goto LABEL_29;
    }
    if (v17 != v21)
    {
      v42 = v7;
      v30 = v12;
      while (1)
      {
        v31 = *(_QWORD *)(a1 + 16 + 8 * v30);
        v32 = xmlXPathCmpNodesExt(v19, v31);
        if (v32 != -2 && v32 < 0)
          break;
        ++v30;
        v19 = v31;
        if (a2 - 3 == v30)
        {
          v21 = a2 - 1;
          v7 = v42;
          goto LABEL_27;
        }
      }
      v21 = v30 + 2;
      v7 = v42;
    }
LABEL_27:
    v14 = v21 - v12;
LABEL_28:
    a4 = v44;
LABEL_29:
    v13 = v43;
    goto LABEL_30;
  }
  v26 = *(_QWORD *)(a1 + 8 * v16);
  v27 = a2 - 1;
  v28 = *(_QWORD *)(a1 + 8 * (a2 - 1));
  v29 = xmlXPathCmpNodesExt(v26, v28);
  v14 = 2;
  if (v29 == -2)
    goto LABEL_28;
  v13 = v43;
  a4 = v44;
  if (v29 < 0)
  {
    *(_QWORD *)(a1 + 8 * v16) = v28;
    *(_QWORD *)(a1 + 8 * v27) = v26;
    v14 = 2;
  }
LABEL_30:
  if (v13 >= a4)
    v36 = a4;
  else
    v36 = v13;
  if (v36 > v14)
  {
    libxml_domnode_binary_insertion_sort_start(a1 + 8 * v12, v14, v36);
    v12 = *v7;
    v14 = v36;
  }
  *(_QWORD *)(a5 + 16 * *a6) = v12;
  *(_QWORD *)(a5 + 16 * (*a6)++ + 8) = v14;
  v37 = *v7 + v14;
  *v7 = v37;
  if (v37 != a2)
    return 1;
  v38 = *a6;
  if (*a6 >= 2)
  {
    do
    {
      libxml_domnode_tim_sort_merge(a1, a5, v38, a3);
      *(_QWORD *)(a5 + 16 * *a6 - 24) += *(_QWORD *)(a5 + 16 * *a6 - 8);
      v38 = *a6 - 1;
      *a6 = v38;
    }
    while (v38 > 1);
  }
  result = *(_QWORD *)(a3 + 8);
  if (result)
  {
    free((void *)result);
    result = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
  return result;
}

int xmlXPathIsNaN(double val)
{
  return 0;
}

int xmlXPathIsInf(double val)
{
  double v1;
  int v2;

  v1 = fabs(val);
  if (val > 0.0)
    v2 = 1;
  else
    v2 = -1;
  if (v1 == INFINITY)
    return v2;
  else
    return 0;
}

xmlChar *xmlXPathErrMemory(uint64_t a1, const char *a2)
{
  uint64_t v4;
  xmlChar *v5;
  xmlChar *result;
  uint64_t (*v7)(_QWORD, uint64_t);
  char v8;
  xmlChar buf[16];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1 + 232;
    xmlResetError((xmlErrorPtr)(a1 + 232));
    if (a2)
    {
      v21 = 0;
      v19 = 0u;
      v20 = 0u;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      v12 = 0u;
      *(_OWORD *)buf = 0u;
      v10 = 0u;
      xmlStrPrintf(buf, 200, "Memory allocation failed : %s\n", a2);
      v5 = buf;
    }
    else
    {
      v5 = (xmlChar *)"Memory allocation failed\n";
    }
    result = xmlStrdup(v5);
    *(_QWORD *)(a1 + 240) = result;
    *(_QWORD *)(a1 + 232) = 0x20000000CLL;
    v7 = *(uint64_t (**)(_QWORD, uint64_t))(a1 + 224);
    if (v7)
      return (xmlChar *)v7(*(_QWORD *)(a1 + 216), v4);
  }
  else if (a2)
  {
    return (xmlChar *)__xmlRaiseError(0, 0, 0, 0, 0, 0xCu, 2, 3, 0, 0, (const xmlChar *)a2, 0, 0, 0, (unsigned __int128)0 >> 96, "Memory allocation failed : %s\n", (char)a2);
  }
  else
  {
    return (xmlChar *)__xmlRaiseError(0, 0, 0, 0, 0, 0xCu, 2, 3, 0, 0, 0, 0, 0, 0, 0, "Memory allocation failed\n", v8);
  }
  return result;
}

xmlChar *xmlXPathPErrMemory(uint64_t a1, const char *a2)
{
  if (a1)
  {
    *(_DWORD *)(a1 + 16) = 15;
    a1 = *(_QWORD *)(a1 + 24);
  }
  return xmlXPathErrMemory(a1, a2);
}

void xmlXPathErr(xmlXPathParserContextPtr ctxt, int error)
{
  int v2;
  xmlXPathContextPtr context;
  xmlXPathContextPtr v5;
  xmlChar *v6;
  xmlXPathContextPtr v7;
  const xmlChar *base;
  unsigned int v9;
  uint64_t debugNode;
  void (*v11)(void *, xmlError *);
  int v12;
  xmlChar *cur[2];
  int v14[4];
  char *v15;

  if (error >= 0x1B)
    v2 = 27;
  else
    v2 = error;
  if (!ctxt)
  {
    v12 = v2 + 1200;
    v15 = (&xmlXPathErrorMessages)[v2];
    *(_OWORD *)cur = 0u;
    *(_OWORD *)v14 = 0u;
LABEL_10:
    debugNode = 0;
    goto LABEL_12;
  }
  ctxt->error = v2;
  context = ctxt->context;
  if (!context)
  {
    v12 = v2 + 1200;
    *(_QWORD *)v14 = 0;
    v15 = (&xmlXPathErrorMessages)[v2];
    *(_QWORD *)&v14[2] = LODWORD(ctxt->cur) - ctxt->base;
    *(_OWORD *)cur = (unint64_t)ctxt->base;
    goto LABEL_10;
  }
  xmlResetError(&context->lastError);
  v5 = ctxt->context;
  v5->lastError.domain = 12;
  v5->lastError.code = v2 + 1200;
  v5->lastError.level = XML_ERR_ERROR;
  v6 = xmlStrdup(ctxt->base);
  v7 = ctxt->context;
  v7->lastError.str1 = (char *)v6;
  base = ctxt->base;
  v9 = LODWORD(ctxt->cur) - (_DWORD)base;
  v7->lastError.int1 = v9;
  debugNode = (uint64_t)v7->debugNode;
  v7->lastError.node = (void *)debugNode;
  v11 = (void (*)(void *, xmlError *))v7->error;
  if (v11)
  {
    v11(v7->userData, &v7->lastError);
    return;
  }
  *(_QWORD *)v14 = 0;
  v15 = (&xmlXPathErrorMessages)[v2];
  *(_QWORD *)&v14[2] = v9;
  *(_OWORD *)cur = (unint64_t)base;
  v12 = v2 + 1200;
LABEL_12:
  __xmlRaiseError(0, 0, 0, 0, debugNode, 0xCu, v12, 2, 0, 0, cur[0], cur[1], *(xmlChar **)v14, v14[2], v14[3], "%s", (char)v15);
}

void xmlXPatherror(xmlXPathParserContextPtr ctxt, const char *file, int line, int no)
{
  xmlXPathErr(ctxt, no);
}

void xmlXPathFreeCompExpr(xmlXPathCompExprPtr comp)
{
  xmlDict *v2;
  int v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  xmlXPathObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  xmlXPathObject *v12;
  void *v13;
  void *v14;
  xmlPattern *v15;
  void *v16;

  if (comp)
  {
    v2 = (xmlDict *)*((_QWORD *)comp + 4);
    v3 = *(_DWORD *)comp;
    if (v2)
    {
      if (v3 >= 1)
      {
        v4 = 0;
        for (i = 0; i < v3; ++i)
        {
          v6 = *((_QWORD *)comp + 1);
          v7 = *(xmlXPathObject **)(v6 + v4 + 24);
          if (v7 && *(_DWORD *)(v6 + v4) == 11)
          {
            xmlXPathFreeObject(v7);
            v3 = *(_DWORD *)comp;
          }
          v4 += 56;
        }
        v2 = (xmlDict *)*((_QWORD *)comp + 4);
      }
      xmlDictFree(v2);
    }
    else if (v3 >= 1)
    {
      v8 = 0;
      v9 = 0;
      do
      {
        v10 = *((_QWORD *)comp + 1);
        v11 = v10 + v8;
        v12 = *(xmlXPathObject **)(v10 + v8 + 24);
        if (v12)
        {
          if (*(_DWORD *)(v10 + v8) == 11)
            xmlXPathFreeObject(v12);
          else
            xmlFree(v12);
        }
        v13 = *(void **)(v11 + 32);
        if (v13)
          xmlFree(v13);
        ++v9;
        v8 += 56;
      }
      while (v9 < *(int *)comp);
    }
    v14 = (void *)*((_QWORD *)comp + 1);
    if (v14)
      xmlFree(v14);
    v15 = (xmlPattern *)*((_QWORD *)comp + 5);
    if (v15)
      xmlFreePatternList(v15);
    v16 = (void *)*((_QWORD *)comp + 3);
    if (v16)
      xmlFree(v16);
    xmlFree(comp);
  }
}

void xmlXPathFreeObject(xmlXPathObjectPtr obj)
{
  xmlNodeSet *nodesetval;
  xmlChar *stringval;
  xmlLocationSet *user;

  if (obj)
  {
    switch(obj->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        nodesetval = obj->nodesetval;
        if (nodesetval)
          xmlXPathFreeNodeSet(nodesetval);
        break;
      case XPATH_STRING:
        stringval = obj->stringval;
        if (stringval)
          xmlFree(stringval);
        break;
      case XPATH_LOCATIONSET:
        user = (xmlLocationSet *)obj->user;
        if (user)
          xmlXPtrFreeLocationSet(user);
        break;
      default:
        break;
    }
    xmlFree(obj);
  }
}

void xmlXPathDebugDumpObject(FILE *output, xmlXPathObjectPtr cur, int depth)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  size_t v10;
  xmlNodeSetPtr nodesetval;
  unsigned int v12;
  unsigned int v13;
  double floatval;
  double v15;
  int v16;
  void *user;
  int v18;
  FILE *v19;
  void *user2;
  int *v21;
  unsigned int v22;
  unsigned int v23;
  xmlNodeSetPtr v24;
  int v25;
  unsigned int v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  xmlNode *children;
  int v34;
  unsigned int v35;
  const char *v36;
  size_t v37;
  int v38;
  xmlNode *next;
  _OWORD __b[6];
  int v41;
  char v42[16];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  int v48;
  char v49[16];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (output)
  {
    v41 = 0;
    memset(__b, 0, sizeof(__b));
    if (depth < 1)
    {
      v7 = 0;
    }
    else
    {
      if ((depth - 1) >= 0x18)
        v6 = 24;
      else
        v6 = depth - 1;
      memset(__b, 32, (2 * v6 + 2));
      v7 = v6 + 1;
    }
    v8 = 2 * v7;
    *((_BYTE *)__b + (v8 & 0xFFFFFFFE) + 1) = 0;
    *((_BYTE *)__b + v8) = 0;
    fputs((const char *)__b, output);
    if (cur)
    {
      switch(cur->type)
      {
        case XPATH_UNDEFINED:
          v9 = "Object is uninitialized\n";
          v10 = 24;
          goto LABEL_13;
        case XPATH_NODESET:
          fwrite("Object is a Node Set :\n", 0x17uLL, 1uLL, output);
          nodesetval = cur->nodesetval;
          v55 = 0;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          *(_OWORD *)v49 = 0u;
          v50 = 0u;
          v12 = depth - 1;
          if (depth < 1)
          {
            v13 = 0;
          }
          else
          {
            if (v12 >= 0x18)
              v12 = 24;
            v13 = 2 * v12 + 2;
            memset(v49, 32, v13);
          }
          v49[v13 | 1] = 0;
          v49[v13] = 0;
          if (!nodesetval)
          {
            fputs(v49, output);
            v36 = "NodeSet is NULL !\n";
            v37 = 18;
            goto LABEL_78;
          }
          fprintf(output, "Set contains %d nodes:\n", nodesetval->nodeNr);
          if (nodesetval->nodeNr >= 1)
          {
            v28 = 0;
            v29 = depth + 1;
            do
            {
              fputs(v49, output);
              fprintf(output, "%d", v28 + 1);
              xmlXPathDebugDumpNode(output, (uint64_t)nodesetval->nodeTab[v28++], v29);
            }
            while (v28 < nodesetval->nodeNr);
          }
          return;
        case XPATH_BOOLEAN:
          fwrite("Object is a Boolean : ", 0x16uLL, 1uLL, output);
          if (cur->BOOLval)
          {
            v9 = "true\n";
            v10 = 5;
          }
          else
          {
            v9 = "false\n";
            v10 = 6;
          }
          goto LABEL_13;
        case XPATH_NUMBER:
          floatval = cur->floatval;
          v15 = fabs(floatval);
          if (floatval > 0.0)
            v16 = 1;
          else
            v16 = -1;
          if (v15 != INFINITY)
            v16 = 0;
          if (v16 == -1)
          {
            v9 = "Object is a number : -Infinity\n";
            v10 = 31;
            goto LABEL_13;
          }
          if (v16 == 1)
          {
            v9 = "Object is a number : Infinity\n";
            v10 = 30;
            goto LABEL_13;
          }
          if (floatval == 0.0)
          {
            v9 = "Object is a number : 0\n";
            goto LABEL_12;
          }
          fprintf(output, "Object is a number : %0g\n", cur->floatval);
          return;
        case XPATH_STRING:
          fwrite("Object is a string : ", 0x15uLL, 1uLL, output);
          xmlDebugDumpString(output, cur->stringval);
          goto LABEL_52;
        case XPATH_POINT:
          fprintf(output, "Object is a point : index %d in node", cur->index);
          user = cur->user;
          v18 = depth + 1;
          v19 = output;
          goto LABEL_51;
        case XPATH_RANGE:
          user2 = cur->user2;
          if (!user2 || user2 == cur->user && cur->index == cur->index2)
          {
            fwrite("Object is a collapsed range :\n", 0x1EuLL, 1uLL, output);
            fputs((const char *)__b, output);
            if ((cur->index & 0x80000000) == 0)
              fprintf(output, "index %d in ", cur->index);
            fwrite("node\n", 5uLL, 1uLL, output);
            xmlXPathDebugDumpNode(output, (uint64_t)cur->user, depth + 1);
          }
          else
          {
            fwrite("Object is a range :\n", 0x14uLL, 1uLL, output);
            fputs((const char *)__b, output);
            fwrite("From ", 5uLL, 1uLL, output);
            if ((cur->index & 0x80000000) == 0)
              fprintf(output, "index %d in ", cur->index);
            fwrite("node\n", 5uLL, 1uLL, output);
            v27 = depth + 1;
            xmlXPathDebugDumpNode(output, (uint64_t)cur->user, v27);
            fputs((const char *)__b, output);
            fwrite("To ", 3uLL, 1uLL, output);
            if ((cur->index2 & 0x80000000) == 0)
              fprintf(output, "index %d in ", cur->index2);
            fwrite("node\n", 5uLL, 1uLL, output);
            user = cur->user2;
            v19 = output;
            v18 = v27;
LABEL_51:
            xmlXPathDebugDumpNode(v19, (uint64_t)user, v18);
LABEL_52:
            fputc(10, output);
          }
          return;
        case XPATH_LOCATIONSET:
          fwrite("Object is a Location Set:\n", 0x1AuLL, 1uLL, output);
          v21 = (int *)cur->user;
          v55 = 0;
          v53 = 0u;
          v54 = 0u;
          v51 = 0u;
          v52 = 0u;
          *(_OWORD *)v49 = 0u;
          v50 = 0u;
          v22 = depth - 1;
          if (depth < 1)
          {
            v23 = 0;
          }
          else
          {
            if (v22 >= 0x18)
              v22 = 24;
            v23 = 2 * v22 + 2;
            memset(v49, 32, v23);
          }
          v49[v23 | 1] = 0;
          v49[v23] = 0;
          if (!v21)
          {
            fputs(v49, output);
            v36 = "LocationSet is NULL !\n";
            v37 = 22;
            goto LABEL_78;
          }
          if (*v21 >= 1)
          {
            v30 = 0;
            v31 = depth + 1;
            do
            {
              fputs(v49, output);
              fprintf(output, "%d : ", v30 + 1);
              xmlXPathDebugDumpObject(output, *(xmlXPathObjectPtr *)(*((_QWORD *)v21 + 1) + 8 * v30++), v31);
            }
            while (v30 < *v21);
          }
          return;
        case XPATH_USERS:
          v9 = "Object is user defined\n";
          goto LABEL_12;
        case XPATH_XSLT_TREE:
          fwrite("Object is an XSLT value tree :\n", 0x1FuLL, 1uLL, output);
          v24 = cur->nodesetval;
          v48 = 0;
          v46 = 0u;
          v47 = 0u;
          v44 = 0u;
          v45 = 0u;
          *(_OWORD *)v42 = 0u;
          v43 = 0u;
          if (depth < 1)
          {
            v26 = 0;
          }
          else
          {
            if ((depth - 1) >= 0x18)
              v25 = 24;
            else
              v25 = depth - 1;
            memset(v42, 32, (2 * v25 + 2));
            v26 = v25 + 1;
          }
          v32 = 2 * v26;
          v42[(v32 & 0xFFFFFFFE) + 1] = 0;
          v42[v32] = 0;
          if (v24 && v24->nodeNr && *v24->nodeTab)
          {
            fputs(v42, output);
            fprintf(output, "%d", v26 + 1);
            children = (*v24->nodeTab)->children;
            v55 = 0;
            v53 = 0u;
            v54 = 0u;
            v51 = 0u;
            v52 = 0u;
            *(_OWORD *)v49 = 0u;
            v50 = 0u;
            if (depth < 0)
            {
              v35 = 0;
            }
            else
            {
              if (depth >= 0x18)
                v34 = 24;
              else
                v34 = depth;
              v35 = 2 * v34 + 2;
              memset(v49, 32, v35);
            }
            v49[v35 | 1] = 0;
            v49[v35] = 0;
            if (children)
            {
              v38 = depth + 1;
              do
              {
                next = children->next;
                xmlDebugDumpOneNode(output, children, v38);
                children = next;
              }
              while (next);
              return;
            }
            fputs(v49, output);
            v36 = "Node is NULL !\n";
            v37 = 15;
          }
          else
          {
            fputs(v42, output);
            v36 = "Value Tree is NULL !\n";
            v37 = 21;
          }
LABEL_78:
          fwrite(v36, v37, 1uLL, output);
          return;
        default:
          return;
      }
    }
    v9 = "Object is empty (NULL)\n";
LABEL_12:
    v10 = 23;
LABEL_13:
    fwrite(v9, v10, 1uLL, output);
  }
}

void xmlXPathDebugDumpNode(FILE *a1, uint64_t a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  int v8;
  const char *v9;
  size_t v10;
  _OWORD v11[6];
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  v6 = a3 - 1;
  if (a3 < 1)
  {
    v7 = 0;
  }
  else
  {
    if (v6 >= 0x18)
      v6 = 24;
    v7 = 2 * v6 + 2;
    memset(v11, 32, v7);
  }
  *((_BYTE *)v11 + (v7 | 1)) = 0;
  *((_BYTE *)v11 + v7) = 0;
  if (!a2)
  {
    fputs((const char *)v11, a1);
    v9 = "Node is NULL !\n";
    v10 = 15;
    goto LABEL_12;
  }
  v8 = *(_DWORD *)(a2 + 8);
  if (v8 == 2)
  {
    xmlDebugDumpAttr(a1, (xmlAttrPtr)a2, a3);
  }
  else
  {
    if (v8 == 13 || v8 == 9)
    {
      fputs((const char *)v11, a1);
      v9 = " /\n";
      v10 = 3;
LABEL_12:
      fwrite(v9, v10, 1uLL, a1);
      return;
    }
    xmlDebugDumpOneNode(a1, (xmlNodePtr)a2, a3);
  }
}

void xmlXPathDebugDumpCompExpr(FILE *output, xmlXPathCompExprPtr comp, int depth)
{
  unsigned int v6;
  unsigned int v7;
  _OWORD __b[6];
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (output && comp)
  {
    v9 = 0;
    memset(__b, 0, sizeof(__b));
    v6 = depth - 1;
    if (depth < 1)
    {
      v7 = 0;
    }
    else
    {
      if (v6 >= 0x18)
        v6 = 24;
      v7 = 2 * v6 + 2;
      memset(__b, 32, v7);
    }
    *((_BYTE *)__b + (v7 | 1)) = 0;
    *((_BYTE *)__b + v7) = 0;
    fputs((const char *)__b, output);
    if (*((_QWORD *)comp + 5))
    {
      fwrite("Streaming Expression\n", 0x15uLL, 1uLL, output);
    }
    else
    {
      fprintf(output, "Compiled Expression : %d elements\n", *(_DWORD *)comp);
      xmlXPathDebugDumpStepOp(output, (uint64_t)comp, *((_QWORD *)comp + 1) + 56 * *((int *)comp + 4), depth + 1);
    }
  }
}

void xmlXPathDebugDumpStepOp(FILE *a1, uint64_t a2, uint64_t a3, int a4)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  FILE *v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  const char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  const char *v19;
  const char *v20;
  xmlXPathObject *v21;
  unsigned int v22;
  unsigned int v23;
  size_t v24;
  const char *v25;
  size_t v26;
  const char *v27;
  size_t v28;
  _OWORD __b[6];
  int v30;
  uint64_t v31;

  while (1)
  {
    v4 = a4;
    v5 = a3;
    v6 = a2;
    v7 = a1;
    v31 = *MEMORY[0x1E0C80C00];
    v30 = 0;
    memset(__b, 0, sizeof(__b));
    if (a4 < 1)
    {
      v9 = 0;
    }
    else
    {
      v8 = (a4 - 1) >= 0x18 ? 24 : a4 - 1;
      memset(__b, 32, (2 * v8 + 2));
      v9 = v8 + 1;
    }
    v10 = 2 * v9;
    *((_BYTE *)__b + (v10 & 0xFFFFFFFE) + 1) = 0;
    *((_BYTE *)__b + v10) = 0;
    fputs((const char *)__b, v7);
    if (!v5)
      break;
    switch(*(_DWORD *)v5)
    {
      case 0:
        v11 = "END";
        goto LABEL_37;
      case 1:
        v11 = "AND";
        goto LABEL_37;
      case 2:
        v11 = "OR";
        v12 = 2;
        goto LABEL_52;
      case 3:
        if (!*(_DWORD *)(v5 + 12))
        {
          v11 = "EQUAL !=";
          goto LABEL_51;
        }
        v11 = "EQUAL =";
LABEL_44:
        v12 = 7;
        goto LABEL_52;
      case 4:
        if (*(_DWORD *)(v5 + 12))
          v13 = "CMP <";
        else
          v13 = "CMP >";
        fwrite(v13, 5uLL, 1uLL, v7);
        if (!*(_DWORD *)(v5 + 16))
          fputc(61, v7);
        goto LABEL_53;
      case 5:
        switch(*(_DWORD *)(v5 + 12))
        {
          case 0:
            v11 = "PLUS -";
            goto LABEL_40;
          case 1:
            v11 = "PLUS +";
            goto LABEL_40;
          case 2:
            v11 = "PLUS unary -";
            v12 = 12;
            goto LABEL_52;
          case 3:
            v11 = "PLUS unary - -";
            v12 = 14;
            goto LABEL_52;
          default:
            goto LABEL_53;
        }
        goto LABEL_53;
      case 6:
        v14 = *(_DWORD *)(v5 + 12);
        if (v14 == 1)
        {
          v11 = "MULT div";
LABEL_51:
          v12 = 8;
          goto LABEL_52;
        }
        if (v14)
        {
          v11 = "MULT mod";
          goto LABEL_51;
        }
        v11 = "MULT *";
LABEL_40:
        v12 = 6;
LABEL_52:
        fwrite(v11, v12, 1uLL, v7);
LABEL_53:
        fputc(10, v7);
LABEL_54:
        v22 = *(_DWORD *)(v5 + 4);
        if ((v22 & 0x80000000) == 0)
          xmlXPathDebugDumpStepOp(v7, v6, *(_QWORD *)(v6 + 8) + 56 * v22, (v4 + 1));
        v23 = *(_DWORD *)(v5 + 8);
        if ((v23 & 0x80000000) != 0)
          return;
        a3 = *(_QWORD *)(v6 + 8) + 56 * v23;
        a4 = v4 + 1;
        a1 = v7;
        a2 = v6;
        break;
      case 7:
        v11 = "UNION";
        v12 = 5;
        goto LABEL_52;
      case 8:
        v11 = "ROOT";
        goto LABEL_42;
      case 9:
        v11 = "NODE";
        goto LABEL_42;
      case 0xA:
        v16 = *(_DWORD *)(v5 + 12);
        v15 = *(_DWORD *)(v5 + 16);
        v17 = *(_DWORD *)(v5 + 20);
        v19 = *(const char **)(v5 + 24);
        v18 = *(const char **)(v5 + 32);
        fwrite("COLLECT ", 8uLL, 1uLL, v7);
        switch(v16)
        {
          case 1:
            v20 = " 'ancestors' ";
            goto LABEL_74;
          case 2:
            v20 = " 'ancestors-or-self' ";
            goto LABEL_76;
          case 3:
            v20 = " 'attributes' ";
            goto LABEL_66;
          case 4:
            v20 = " 'child' ";
            v24 = 9;
            goto LABEL_78;
          case 5:
            v20 = " 'descendant' ";
LABEL_66:
            v24 = 14;
            goto LABEL_78;
          case 6:
            v20 = " 'descendant-or-self' ";
            goto LABEL_70;
          case 7:
            v20 = " 'following' ";
            goto LABEL_74;
          case 8:
            v20 = " 'following-siblings' ";
LABEL_70:
            v24 = 22;
            goto LABEL_78;
          case 9:
            v20 = " 'namespace' ";
            goto LABEL_74;
          case 10:
            v20 = " 'parent' ";
            v24 = 10;
            goto LABEL_78;
          case 11:
            v20 = " 'preceding' ";
LABEL_74:
            v24 = 13;
            goto LABEL_78;
          case 12:
            v20 = " 'preceding-sibling' ";
LABEL_76:
            v24 = 21;
            goto LABEL_78;
          case 13:
            v20 = " 'self' ";
            v24 = 8;
LABEL_78:
            fwrite(v20, v24, 1uLL, v7);
            break;
          default:
            break;
        }
        switch(v15)
        {
          case 0:
            v25 = "'none' ";
            goto LABEL_86;
          case 1:
            v25 = "'type' ";
            goto LABEL_86;
          case 2:
            v25 = "'PI' ";
            v26 = 5;
            goto LABEL_87;
          case 3:
            v25 = "'all' ";
            v26 = 6;
            goto LABEL_87;
          case 4:
            v25 = "'namespace' ";
            v26 = 12;
            goto LABEL_87;
          case 5:
            v25 = "'name' ";
LABEL_86:
            v26 = 7;
LABEL_87:
            fwrite(v25, v26, 1uLL, v7);
            break;
          default:
            break;
        }
        switch(v17)
        {
          case 0:
            v27 = "'node' ";
            goto LABEL_91;
          case 3:
            v27 = "'text' ";
LABEL_91:
            v28 = 7;
            goto LABEL_94;
          case 7:
            v27 = "'PI' ";
            v28 = 5;
            goto LABEL_94;
          case 8:
            v27 = "'comment' ";
            v28 = 10;
LABEL_94:
            fwrite(v27, v28, 1uLL, v7);
            break;
          default:
            break;
        }
        if (v19)
          fprintf(v7, "%s:", v19);
        if (v18)
          fputs(v18, v7);
        goto LABEL_53;
      case 0xB:
        v21 = *(xmlXPathObject **)(v5 + 24);
        fwrite("ELEM ", 5uLL, 1uLL, v7);
        xmlXPathDebugDumpObject(v7, v21, 0);
        goto LABEL_54;
      case 0xC:
        if (*(_QWORD *)(v5 + 32))
          fprintf(v7, "VARIABLE %s:%s");
        else
          fprintf(v7, "VARIABLE %s");
        goto LABEL_53;
      case 0xD:
        if (*(_QWORD *)(v5 + 32))
          fprintf(v7, "FUNCTION %s:%s(%d args)");
        else
          fprintf(v7, "FUNCTION %s(%d args)");
        goto LABEL_53;
      case 0xE:
        v11 = "ARG";
LABEL_37:
        v12 = 3;
        goto LABEL_52;
      case 0xF:
        v11 = "PREDICATE";
        v12 = 9;
        goto LABEL_52;
      case 0x10:
        v11 = "FILTER";
        goto LABEL_40;
      case 0x11:
        v11 = "SORT";
LABEL_42:
        v12 = 4;
        goto LABEL_52;
      case 0x12:
        v11 = "RANGETO";
        goto LABEL_44;
      default:
        fprintf(v7, "UNKNOWN %d\n", *(_DWORD *)v5);
        return;
    }
  }
  fwrite("Step is NULL\n", 0xDuLL, 1uLL, v7);
}

int xmlXPathContextSetCache(xmlXPathContextPtr ctxt, int active, int value, int options)
{
  char *cache;
  int v8;
  __int128 v9;
  unsigned int v10;

  if (!ctxt)
    return -1;
  cache = (char *)ctxt->cache;
  if (!active)
  {
    if (cache)
    {
      xmlXPathFreeCache((uint64_t *)cache);
      v8 = 0;
      ctxt->cache = 0;
      return v8;
    }
    return 0;
  }
  if (!cache)
  {
    cache = (char *)xmlMalloc(0x40uLL);
    if (!cache)
    {
      xmlXPathErrMemory(0, "creating object cache\n");
      ctxt->cache = 0;
      return -1;
    }
    *((_OWORD *)cache + 2) = 0u;
    *((_OWORD *)cache + 3) = 0u;
    *(_OWORD *)cache = 0u;
    *((_OWORD *)cache + 1) = 0u;
    *(_QWORD *)&v9 = 0x6400000064;
    *((_QWORD *)&v9 + 1) = 0x6400000064;
    *(_OWORD *)(cache + 40) = v9;
    *((_DWORD *)cache + 14) = 100;
    ctxt->cache = cache;
    if (!options)
      goto LABEL_12;
    return 0;
  }
  if (options)
    return 0;
LABEL_12:
  v8 = 0;
  if (value >= 0)
    v10 = value;
  else
    v10 = 100;
  *(int32x4_t *)(cache + 40) = vdupq_n_s32(v10);
  *((_DWORD *)cache + 14) = v10;
  return v8;
}

void xmlXPathFreeCache(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (v2)
    xmlXPathCacheFreeObjectList(v2);
  v3 = a1[1];
  if (v3)
    xmlXPathCacheFreeObjectList(v3);
  v4 = a1[2];
  if (v4)
    xmlXPathCacheFreeObjectList(v4);
  v5 = a1[3];
  if (v5)
    xmlXPathCacheFreeObjectList(v5);
  v6 = a1[4];
  if (v6)
    xmlXPathCacheFreeObjectList(v6);
  xmlFree(a1);
}

xmlXPathObjectPtr valuePop(xmlXPathObjectPtr ctxt)
{
  int user;
  unsigned int v2;
  uint64_t v3;
  xmlChar *v4;

  if (ctxt)
  {
    user = (int)ctxt->user;
    v2 = user - 1;
    if (user < 1)
    {
      return 0;
    }
    else
    {
      LODWORD(ctxt->user) = v2;
      v3 = *(_QWORD *)&ctxt->index;
      if (user == 1)
        v4 = 0;
      else
        v4 = *(xmlChar **)(v3 + 8 * (user - 2));
      ctxt->stringval = v4;
      ctxt = *(xmlXPathObjectPtr *)(v3 + 8 * v2);
      *(_QWORD *)(v3 + 8 * v2) = 0;
    }
  }
  return ctxt;
}

int valuePush(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr value)
{
  int result;
  uint64_t valueMax;
  xmlXPathObjectPtr *valueTab;
  xmlXPathContextPtr context;
  const char *v8;
  xmlXPathObjectPtr *v9;

  if (!ctxt)
    return -1;
  if (value)
  {
    result = ctxt->valueNr;
    valueMax = ctxt->valueMax;
    if (result < (int)valueMax)
    {
      valueTab = ctxt->valueTab;
LABEL_11:
      valueTab[result] = value;
      ctxt->value = value;
      ctxt->valueNr = result + 1;
      return result;
    }
    if ((int)valueMax < 1000000)
    {
      v9 = (xmlXPathObjectPtr *)xmlRealloc(ctxt->valueTab, 16 * valueMax);
      if (v9)
      {
        valueTab = v9;
        result = ctxt->valueNr;
        ctxt->valueMax *= 2;
        ctxt->valueTab = valueTab;
        goto LABEL_11;
      }
      ctxt->error = 15;
      context = ctxt->context;
      v8 = "pushing value\n";
    }
    else
    {
      ctxt->error = 15;
      context = ctxt->context;
      v8 = "XPath stack depth limit reached\n";
    }
    xmlXPathErrMemory((uint64_t)context, v8);
  }
  else
  {
    ctxt->error = 15;
  }
  return -1;
}

int xmlXPathPopBoolean(xmlXPathParserContextPtr ctxt)
{
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  int BOOLval;
  xmlXPathObject *v6;
  xmlXPathObject *v7;

  if (ctxt)
  {
    valueNr = ctxt->valueNr;
    v3 = valueNr - 1;
    if (valueNr >= 1
      && ((ctxt->valueNr = v3, valueTab = ctxt->valueTab, valueNr == 1) ? (v6 = 0) : (v6 = valueTab[valueNr - 2]),
          ctxt->value = v6,
          v7 = valueTab[v3],
          valueTab[v3] = 0,
          v7))
    {
      if (v7->type == XPATH_BOOLEAN)
        BOOLval = v7->BOOLval;
      else
        BOOLval = xmlXPathCastToBoolean(v7);
      xmlXPathReleaseObject((uint64_t)ctxt->context, v7);
    }
    else
    {
      xmlXPathErr(ctxt, 10);
      BOOLval = 0;
      ctxt->error = 10;
    }
  }
  else
  {
    xmlXPathErr(0, 10);
    return 0;
  }
  return BOOLval;
}

int xmlXPathCastToBoolean(xmlXPathObjectPtr val)
{
  xmlGenericErrorFunc v1;
  void **v2;
  xmlNodeSetPtr nodesetval;
  BOOL v4;
  double floatval;

  if (val)
  {
    switch(val->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        nodesetval = val->nodesetval;
        if (!nodesetval)
          goto LABEL_4;
        v4 = nodesetval->nodeNr == 0;
        goto LABEL_13;
      case XPATH_BOOLEAN:
        LODWORD(val) = val->BOOLval;
        return (int)val;
      case XPATH_NUMBER:
        floatval = val->floatval;
        LODWORD(val) = floatval > 0.0 || floatval < 0.0;
        return (int)val;
      case XPATH_STRING:
        val = (xmlXPathObjectPtr)val->stringval;
        if (val)
        {
          v4 = xmlStrlen((const xmlChar *)val) == 0;
LABEL_13:
          LODWORD(val) = !v4;
        }
        return (int)val;
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        v1 = *__xmlGenericError();
        v2 = __xmlGenericErrorContext();
        v1(*v2, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 5995);
        goto LABEL_4;
      default:
LABEL_4:
        LODWORD(val) = 0;
        break;
    }
  }
  return (int)val;
}

double xmlXPathReleaseObject(uint64_t a1, xmlXPathObjectPtr obj)
{
  uint64_t v3;
  xmlNodeSetPtr nodesetval;
  _QWORD *v5;
  double result;
  _QWORD *v7;
  int v8;
  int v9;
  xmlChar *stringval;
  xmlLocationSet *user;
  xmlNodeSetPtr v12;
  int nodeNr;
  uint64_t v14;
  xmlNodePtr v15;
  xmlNodeSet *v16;
  xmlNodePtr v17;

  if (obj)
  {
    if (a1 && (v3 = *(_QWORD *)(a1 + 344)) != 0)
    {
      switch(obj->type)
      {
        case XPATH_NODESET:
        case XPATH_XSLT_TREE:
          nodesetval = obj->nodesetval;
          if (!nodesetval)
            goto LABEL_20;
          if (nodesetval->nodeMax > 40)
            goto LABEL_9;
          v5 = *(_QWORD **)v3;
          if (*(_QWORD *)v3)
          {
            if (*((_DWORD *)v5 + 2) >= *(_DWORD *)(v3 + 40))
            {
LABEL_9:
              xmlXPathFreeNodeSet(nodesetval);
              obj->nodesetval = 0;
              goto LABEL_20;
            }
          }
          else
          {
            v5 = xmlPointerListCreate();
            *(_QWORD *)v3 = v5;
            if (!v5)
              goto LABEL_44;
          }
          v7 = v5;
          goto LABEL_35;
        case XPATH_BOOLEAN:
          v7 = *(_QWORD **)(v3 + 16);
          if (v7)
          {
            v8 = *((_DWORD *)v7 + 2);
            v9 = *(_DWORD *)(v3 + 48);
            goto LABEL_19;
          }
          v7 = xmlPointerListCreate();
          *(_QWORD *)(v3 + 16) = v7;
          if (!v7)
            goto LABEL_44;
          goto LABEL_35;
        case XPATH_NUMBER:
          v7 = *(_QWORD **)(v3 + 24);
          if (v7)
          {
            v8 = *((_DWORD *)v7 + 2);
            v9 = *(_DWORD *)(v3 + 52);
            goto LABEL_19;
          }
          v7 = xmlPointerListCreate();
          *(_QWORD *)(v3 + 24) = v7;
          if (!v7)
            goto LABEL_44;
          goto LABEL_35;
        case XPATH_STRING:
          stringval = obj->stringval;
          if (stringval)
            xmlFree(stringval);
          v7 = *(_QWORD **)(v3 + 8);
          if (v7)
          {
            v8 = *((_DWORD *)v7 + 2);
            v9 = *(_DWORD *)(v3 + 44);
LABEL_19:
            if (v8 >= v9)
            {
LABEL_20:
              v7 = *(_QWORD **)(v3 + 32);
              if (v7)
              {
                if (*((_DWORD *)v7 + 2) >= *(_DWORD *)(v3 + 56))
                  goto LABEL_44;
              }
              else
              {
                v7 = xmlPointerListCreate();
                *(_QWORD *)(v3 + 32) = v7;
                if (!v7)
                  goto LABEL_44;
              }
            }
          }
          else
          {
            v7 = xmlPointerListCreate();
            *(_QWORD *)(v3 + 8) = v7;
            if (!v7)
              goto LABEL_44;
          }
LABEL_35:
          if (xmlPointerListAddSize((uint64_t)v7, (uint64_t)obj, 0) == -1)
          {
LABEL_44:
            v16 = obj->nodesetval;
            if (v16)
              xmlXPathFreeNodeSet(v16);
            xmlFree(obj);
            return result;
          }
          v12 = obj->nodesetval;
          if (v12)
          {
            nodeNr = v12->nodeNr;
            if (v12->nodeNr < 2)
            {
              if (nodeNr == 1)
              {
                v17 = *v12->nodeTab;
                if (v17)
                {
                  if (v17->type == XML_NAMESPACE_DECL)
                    xmlXPathNodeSetFreeNs((xmlNsPtr)v17);
                }
              }
            }
            else
            {
              v14 = 0;
              do
              {
                v15 = v12->nodeTab[v14];
                if (v15 && v15->type == XML_NAMESPACE_DECL)
                {
                  xmlXPathNodeSetFreeNs((xmlNsPtr)v15);
                  nodeNr = v12->nodeNr;
                }
                ++v14;
              }
              while (v14 < nodeNr);
            }
            v12->nodeNr = 0;
            result = 0.0;
            *(_QWORD *)&obj->index2 = 0;
            *(_OWORD *)&obj->stringval = 0u;
            *(_OWORD *)&obj->index = 0u;
            *(_OWORD *)&obj->type = 0u;
            *(_OWORD *)&obj->BOOLval = 0u;
            obj->nodesetval = v12;
          }
          else
          {
            *(_QWORD *)&obj->index2 = 0;
            result = 0.0;
            *(_OWORD *)&obj->stringval = 0u;
            *(_OWORD *)&obj->index = 0u;
            *(_OWORD *)&obj->type = 0u;
            *(_OWORD *)&obj->BOOLval = 0u;
          }
          break;
        case XPATH_LOCATIONSET:
          user = (xmlLocationSet *)obj->user;
          if (user)
            xmlXPtrFreeLocationSet(user);
          goto LABEL_44;
        default:
          goto LABEL_44;
      }
    }
    else
    {
      xmlXPathFreeObject(obj);
    }
  }
  return result;
}

double xmlXPathPopNumber(xmlXPathParserContextPtr ctxt)
{
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v5;
  xmlXPathObjectPtr v6;
  double floatval;

  if (!ctxt)
  {
    xmlXPathErr(0, 10);
    return 0.0;
  }
  valueNr = ctxt->valueNr;
  v3 = valueNr - 1;
  if (valueNr < 1
    || ((ctxt->valueNr = v3, valueTab = ctxt->valueTab, valueNr == 1) ? (v5 = 0) : (v5 = valueTab[valueNr - 2]),
        ctxt->value = v5,
        v6 = valueTab[v3],
        valueTab[v3] = 0,
        !v6))
  {
    xmlXPathErr(ctxt, 10);
    ctxt->error = 10;
    return 0.0;
  }
  if (v6->type == XPATH_NUMBER)
    floatval = v6->floatval;
  else
    floatval = xmlXPathCastToNumber(v6);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v6);
  return floatval;
}

double xmlXPathCastToNumber(xmlXPathObjectPtr val)
{
  xmlGenericErrorFunc v1;
  void **v2;
  double result;

  if (!val)
    return xmlXPathNAN;
  switch(val->type)
  {
    case XPATH_UNDEFINED:
      return xmlXPathNAN;
    case XPATH_NODESET:
    case XPATH_XSLT_TREE:
      result = xmlXPathCastNodeSetToNumber(val->nodesetval);
      break;
    case XPATH_BOOLEAN:
      result = 1.0;
      if (!val->BOOLval)
        result = 0.0;
      break;
    case XPATH_NUMBER:
      result = val->floatval;
      break;
    case XPATH_STRING:
      result = xmlXPathStringEvalNumber(val->stringval);
      break;
    case XPATH_POINT:
    case XPATH_RANGE:
    case XPATH_LOCATIONSET:
    case XPATH_USERS:
      v1 = *__xmlGenericError();
      v2 = __xmlGenericErrorContext();
      v1(*v2, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 5881);
      return xmlXPathNAN;
    default:
      result = 0.0;
      break;
  }
  return result;
}

xmlChar *__cdecl xmlXPathPopString(xmlXPathParserContextPtr ctxt)
{
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlChar *v5;
  xmlXPathObject *v6;
  xmlXPathObject *v7;

  if (ctxt)
  {
    valueNr = ctxt->valueNr;
    v3 = valueNr - 1;
    if (valueNr >= 1
      && ((ctxt->valueNr = v3, valueTab = ctxt->valueTab, valueNr == 1) ? (v6 = 0) : (v6 = valueTab[valueNr - 2]),
          ctxt->value = v6,
          v7 = valueTab[v3],
          valueTab[v3] = 0,
          v7))
    {
      v5 = xmlXPathCastToString(v7);
      if (v7->stringval == v5)
        v7->stringval = 0;
      xmlXPathReleaseObject((uint64_t)ctxt->context, v7);
    }
    else
    {
      xmlXPathErr(ctxt, 10);
      v5 = 0;
      ctxt->error = 10;
    }
  }
  else
  {
    xmlXPathErr(0, 10);
    return 0;
  }
  return v5;
}

xmlChar *__cdecl xmlXPathCastToString(xmlXPathObjectPtr val)
{
  xmlGenericErrorFunc v1;
  void **v2;
  char *stringval;
  xmlChar *result;

  if (val)
  {
    switch(val->type)
    {
      case XPATH_UNDEFINED:
        goto LABEL_4;
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        result = xmlXPathCastNodeSetToString(val->nodesetval);
        break;
      case XPATH_BOOLEAN:
        if (val->BOOLval)
          stringval = "true";
        else
          stringval = "false";
        return xmlStrdup((const xmlChar *)stringval);
      case XPATH_NUMBER:
        result = xmlXPathCastNumberToString(val->floatval);
        break;
      case XPATH_STRING:
        stringval = (char *)val->stringval;
        return xmlStrdup((const xmlChar *)stringval);
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        v1 = *__xmlGenericError();
        v2 = __xmlGenericErrorContext();
        v1(*v2, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 5712);
        goto LABEL_4;
      default:
        result = 0;
        break;
    }
  }
  else
  {
LABEL_4:
    stringval = &byte_1B0865C1A;
    return xmlStrdup((const xmlChar *)stringval);
  }
  return result;
}

xmlNodeSetPtr xmlXPathPopNodeSet(xmlXPathParserContextPtr ctxt)
{
  xmlXPathObjectPtr value;
  int valueNr;
  xmlXPathObjectPtr *valueTab;
  int v5;
  xmlXPathObject *v6;
  xmlNodeSet *nodesetval;
  int v8;
  int v9;
  xmlXPathObject *v10;

  if (!ctxt)
    return 0;
  value = ctxt->value;
  if (!value)
  {
    v8 = 10;
    v9 = 10;
LABEL_9:
    xmlXPathErr(ctxt, v9);
    nodesetval = 0;
    ctxt->error = v8;
    return nodesetval;
  }
  if ((value->type | 8) != 9)
  {
    v8 = 11;
    v9 = 11;
    goto LABEL_9;
  }
  valueNr = ctxt->valueNr;
  valueTab = ctxt->valueTab;
  v5 = valueNr - 1;
  ctxt->valueNr = valueNr - 1;
  if (valueNr == 1)
    v6 = 0;
  else
    v6 = valueTab[valueNr - 2];
  ctxt->value = v6;
  v10 = valueTab[v5];
  valueTab[v5] = 0;
  nodesetval = v10->nodesetval;
  v10->nodesetval = 0;
  xmlXPathReleaseObject((uint64_t)ctxt->context, v10);
  return nodesetval;
}

void *__cdecl xmlXPathPopExternal(xmlXPathParserContextPtr ctxt)
{
  xmlXPathObjectPtr value;
  int valueNr;
  xmlXPathObjectPtr *valueTab;
  int v5;
  xmlXPathObject *v6;
  void *user;
  int v8;
  int v9;
  xmlXPathObject *v10;

  if (!ctxt)
  {
    xmlXPathErr(0, 10);
    return 0;
  }
  value = ctxt->value;
  if (!value)
  {
    v8 = 10;
    v9 = 10;
LABEL_9:
    xmlXPathErr(ctxt, v9);
    user = 0;
    ctxt->error = v8;
    return user;
  }
  if (value->type != XPATH_USERS)
  {
    v8 = 11;
    v9 = 11;
    goto LABEL_9;
  }
  valueNr = ctxt->valueNr;
  valueTab = ctxt->valueTab;
  v5 = valueNr - 1;
  ctxt->valueNr = valueNr - 1;
  if (valueNr == 1)
    v6 = 0;
  else
    v6 = valueTab[valueNr - 2];
  ctxt->value = v6;
  v10 = valueTab[v5];
  valueTab[v5] = 0;
  user = v10->user;
  v10->user = 0;
  xmlXPathReleaseObject((uint64_t)ctxt->context, v10);
  return user;
}

uint64_t xmlXPathOrderDocElems(xmlDocPtr doc)
{
  _xmlNode *children;
  uint64_t v2;
  xmlDocPtr v3;
  uint64_t v4;
  BOOL v5;

  if (!doc)
    return -1;
  children = doc->children;
  if (children)
  {
    v2 = 0;
    while (1)
    {
      do
      {
        v3 = (xmlDocPtr)children;
        if (children->type != XML_ELEMENT_NODE)
          break;
        v4 = ~v2++;
        v3->intSubset = (_xmlDtd *)v4;
        children = v3->children;
      }
      while (children);
      while (1)
      {
        children = v3->next;
        if (children)
          break;
        v3 = (xmlDocPtr)v3->parent;
        if (v3)
          v5 = v3 == doc;
        else
          v5 = 1;
        if (v5)
          return v2;
      }
    }
  }
  return 0;
}

int xmlXPathCmpNodes(xmlNodePtr node1, xmlNodePtr node2)
{
  int result;
  xmlElementType type;
  _xmlNode *parent;
  int v6;
  xmlElementType v7;
  _xmlNode *v8;
  int v9;
  xmlElementType v10;
  xmlElementType v11;
  _xmlNode *next;
  xmlChar *content;
  xmlChar *v14;
  _xmlNode *v15;
  int v16;
  _xmlNode *v17;
  _xmlNode *v18;
  int v19;
  _xmlNode *v20;
  _xmlNode *v21;
  _xmlNode *v22;
  BOOL v23;
  xmlChar *v24;
  xmlChar *v25;

  result = -2;
  if (!node1 || !node2)
    return result;
  if (node1 == node2)
    return 0;
  type = node1->type;
  if (type == XML_ATTRIBUTE_NODE)
  {
    parent = node1->parent;
    v6 = 1;
  }
  else
  {
    v6 = 0;
    parent = node1;
    node1 = 0;
  }
  v7 = node2->type;
  if (v7 == XML_ATTRIBUTE_NODE)
  {
    v8 = node2->parent;
    v9 = 1;
  }
  else
  {
    v9 = 0;
    v8 = node2;
    node2 = 0;
  }
  if (parent == v8)
  {
    if (v6 != v9)
    {
      if (v7 == XML_ATTRIBUTE_NODE)
        return 1;
      else
        return -1;
    }
    if (type == XML_ATTRIBUTE_NODE)
    {
      result = 1;
      while (1)
      {
        node2 = node2->prev;
        if (!node2)
          break;
        if (node2 == node1)
          return result;
      }
      return -1;
    }
    return 0;
  }
  v10 = parent->type;
  if (v10 == XML_NAMESPACE_DECL)
    return 1;
  v11 = v8->type;
  if (v11 == XML_NAMESPACE_DECL || parent == v8->prev)
    return 1;
  next = v8->next;
  if (parent == next)
    return -1;
  if (v10 == XML_ELEMENT_NODE && v11 == XML_ELEMENT_NODE)
  {
    content = parent->content;
    if (((unint64_t)content & 0x8000000000000000) != 0)
    {
      v14 = v8->content;
      if (((unint64_t)v14 & 0x8000000000000000) != 0 && parent->doc == v8->doc)
      {
        LODWORD(next) = (uint64_t)v14 < (uint64_t)content ? 1 : -1;
        result = (int)next;
        if (v14 != content)
          return result;
      }
    }
  }
  v15 = v8->parent;
  if (v15)
  {
    v16 = 0;
    while (v15 != parent)
    {
      ++v16;
      v17 = v15;
      v15 = v15->parent;
      if (!v15)
        goto LABEL_37;
    }
    return 1;
  }
  v16 = 0;
  v17 = v8;
LABEL_37:
  v18 = parent->parent;
  if (v18)
  {
    v19 = 0;
    while (v18 != v8)
    {
      v20 = v18;
      ++v19;
      v18 = v18->parent;
      if (!v18)
        goto LABEL_43;
    }
    return -1;
  }
  v19 = 0;
  v20 = parent;
LABEL_43:
  if (v17 != v20)
    return -2;
  if (v19 > v16)
  {
    do
    {
      --v19;
      parent = parent->parent;
    }
    while (v19 > v16);
    v19 = v16;
  }
  while (v16 > v19)
  {
    --v16;
    v8 = v8->parent;
  }
  result = -2;
  while (1)
  {
    v21 = parent->parent;
    v22 = v8->parent;
    if (v21 == v22)
      break;
    if (v21)
      v23 = v22 == 0;
    else
      v23 = 1;
    parent = parent->parent;
    v8 = v8->parent;
    if (v23)
      return result;
  }
  if (parent == v8->prev)
    return 1;
  if (parent == v8->next)
    return -1;
  if (parent->type != XML_ELEMENT_NODE)
    goto LABEL_71;
  if (v8->type != XML_ELEMENT_NODE)
    goto LABEL_71;
  v24 = parent->content;
  if (((unint64_t)v24 & 0x8000000000000000) == 0)
    goto LABEL_71;
  v25 = v8->content;
  if (((unint64_t)v25 & 0x8000000000000000) == 0 || parent->doc != v8->doc)
    goto LABEL_71;
  if ((uint64_t)v25 > (uint64_t)v24)
    LODWORD(next) = -1;
  result = (uint64_t)v25 < (uint64_t)v24 ? 1 : (int)next;
  if (v25 == v24)
  {
LABEL_71:
    result = 1;
    while (1)
    {
      parent = parent->next;
      if (!parent)
        break;
      if (parent == v8)
        return result;
    }
    return -1;
  }
  return result;
}

void xmlXPathNodeSetSort(xmlNodeSetPtr set)
{
  if (set)
    libxml_domnode_tim_sort((uint64_t)set->nodeTab, set->nodeNr);
}

void xmlXPathNodeSetFreeNs(xmlNsPtr ns)
{
  xmlChar *href;
  xmlChar *prefix;

  if (ns && ns->type == XML_NAMESPACE_DECL && ns->next && ns->next->type != XML_NAMESPACE_DECL)
  {
    href = (xmlChar *)ns->href;
    if (href)
      xmlFree(href);
    prefix = (xmlChar *)ns->prefix;
    if (prefix)
      xmlFree(prefix);
    xmlFree(ns);
  }
}

xmlNodeSetPtr xmlXPathNodeSetCreate(xmlNodePtr val)
{
  xmlNodeSet *v2;
  xmlNodeSet *v3;
  xmlNodePtr *v4;
  xmlNode *v5;
  xmlNodePtr *nodeTab;
  uint64_t nodeNr;
  xmlNodePtr *v8;
  uint64_t v9;

  v2 = (xmlNodeSet *)xmlMalloc(0x10uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)&v2->nodeNr = 0;
    v2->nodeTab = 0;
    if (val)
    {
      v4 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      v3->nodeTab = v4;
      if (v4)
      {
        *((_OWORD *)v4 + 3) = 0u;
        *((_OWORD *)v4 + 4) = 0u;
        *((_OWORD *)v4 + 1) = 0u;
        *((_OWORD *)v4 + 2) = 0u;
        *(_OWORD *)v4 = 0u;
        v3->nodeMax = 10;
        if (val->type == XML_NAMESPACE_DECL)
        {
          v5 = (xmlNode *)xmlXPathNodeSetDupNs((uint64_t)val->_private, (uint64_t)val);
          nodeTab = v3->nodeTab;
          nodeNr = v3->nodeNr;
          v3->nodeNr = nodeNr + 1;
          nodeTab[nodeNr] = v5;
        }
        else
        {
          v8 = v3->nodeTab;
          v9 = v3->nodeNr;
          v3->nodeNr = v9 + 1;
          v8[v9] = val;
        }
      }
      else
      {
        xmlXPathErrMemory(0, "creating nodeset\n");
        xmlFree(v3);
        return 0;
      }
    }
  }
  else
  {
    xmlXPathErrMemory(0, "creating nodeset\n");
  }
  return v3;
}

_QWORD *xmlXPathNodeSetDupNs(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v6;
  const xmlChar *v7;
  const xmlChar *v8;

  if (!a2 || *(_DWORD *)(a2 + 8) != 18)
    return 0;
  if (!a1 || *(_DWORD *)(a1 + 8) == 18)
    return (_QWORD *)a2;
  v6 = xmlMalloc(0x30uLL);
  v4 = v6;
  if (v6)
  {
    *((_OWORD *)v6 + 1) = 0u;
    *((_OWORD *)v6 + 2) = 0u;
    *(_OWORD *)v6 = 0u;
    *((_DWORD *)v6 + 2) = 18;
    v7 = *(const xmlChar **)(a2 + 16);
    if (v7)
      v4[2] = xmlStrdup(v7);
    v8 = *(const xmlChar **)(a2 + 24);
    if (v8)
      v4[3] = xmlStrdup(v8);
    *v4 = a1;
  }
  else
  {
    xmlXPathErrMemory(0, "duplicating namespace\n");
  }
  return v4;
}

int xmlXPathNodeSetContains(xmlNodeSetPtr cur, xmlNodePtr val)
{
  int result;
  int nodeNr;
  uint64_t v6;
  xmlNodePtr v7;
  uint64_t v8;
  xmlNodePtr *i;

  result = 0;
  if (cur && val)
  {
    if (val->type == XML_NAMESPACE_DECL)
    {
      nodeNr = cur->nodeNr;
      if (cur->nodeNr >= 1)
      {
        v6 = 0;
        do
        {
          v7 = cur->nodeTab[v6];
          if (v7->type == XML_NAMESPACE_DECL)
          {
            if (v7 == val)
              return 1;
            if (val->_private && v7->_private == val->_private)
            {
              if (xmlStrEqual((const xmlChar *)val->children, (const xmlChar *)v7->children))
                return 1;
              nodeNr = cur->nodeNr;
            }
          }
          ++v6;
        }
        while (v6 < nodeNr);
      }
      return 0;
    }
    v8 = cur->nodeNr;
    if ((int)v8 < 1)
      return 0;
    for (i = cur->nodeTab; *i != val; ++i)
    {
      if (!--v8)
        return 0;
    }
    return 1;
  }
  return result;
}

int xmlXPathNodeSetAddNs(xmlNodeSetPtr cur, xmlNodePtr node, xmlNsPtr ns)
{
  int result;
  int nodeNr;
  uint64_t i;
  xmlNodePtr v9;
  int nodeMax;
  const char *v11;
  xmlNodePtr *v12;
  xmlNode *v13;
  xmlNodePtr *nodeTab;
  uint64_t v15;

  result = -1;
  if (node && cur && ns && ns->type == XML_NAMESPACE_DECL && node->type == XML_ELEMENT_NODE)
  {
    nodeNr = cur->nodeNr;
    if (cur->nodeNr >= 1)
    {
      for (i = 0; i < nodeNr; ++i)
      {
        v9 = cur->nodeTab[i];
        if (v9 && v9->type == XML_NAMESPACE_DECL && v9->_private == node)
        {
          if (xmlStrEqual(ns->prefix, (const xmlChar *)v9->children))
            return 0;
          nodeNr = cur->nodeNr;
        }
      }
    }
    nodeMax = cur->nodeMax;
    if (nodeMax)
    {
      if (nodeNr == nodeMax)
      {
        if (nodeNr >= 10000000)
        {
          v11 = "growing nodeset hit limit\n";
          v12 = 0;
LABEL_24:
          xmlXPathErrMemory((uint64_t)v12, v11);
          return -1;
        }
        v12 = (xmlNodePtr *)xmlRealloc(cur->nodeTab, 16 * nodeNr);
        if (v12)
        {
          cur->nodeMax *= 2;
          cur->nodeTab = v12;
          goto LABEL_22;
        }
LABEL_23:
        v11 = "growing nodeset\n";
        goto LABEL_24;
      }
    }
    else
    {
      v12 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      cur->nodeTab = v12;
      if (!v12)
        goto LABEL_23;
      *((_OWORD *)v12 + 3) = 0u;
      *((_OWORD *)v12 + 4) = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *((_OWORD *)v12 + 2) = 0u;
      *(_OWORD *)v12 = 0u;
      cur->nodeMax = 10;
    }
LABEL_22:
    v13 = (xmlNode *)xmlXPathNodeSetDupNs((uint64_t)node, (uint64_t)ns);
    result = 0;
    nodeTab = cur->nodeTab;
    v15 = cur->nodeNr;
    cur->nodeNr = v15 + 1;
    nodeTab[v15] = v13;
  }
  return result;
}

int xmlXPathNodeSetAdd(xmlNodeSetPtr cur, xmlNodePtr val)
{
  int result;
  int nodeNr;
  xmlNodePtr *v6;
  uint64_t v7;
  int nodeMax;
  const char *v9;
  xmlNodePtr *v10;
  xmlNode *v11;
  xmlNodePtr *nodeTab;
  uint64_t v13;
  xmlNodePtr *v14;
  uint64_t v15;

  result = -1;
  if (!cur || !val)
    return result;
  nodeNr = cur->nodeNr;
  if (cur->nodeNr < 1)
  {
LABEL_7:
    nodeMax = cur->nodeMax;
    if (nodeMax)
    {
      if (nodeNr != nodeMax)
        goto LABEL_16;
      if (nodeNr >= 10000000)
      {
        v9 = "growing nodeset hit limit\n";
        v10 = 0;
LABEL_20:
        xmlXPathErrMemory((uint64_t)v10, v9);
        return -1;
      }
      v10 = (xmlNodePtr *)xmlRealloc(cur->nodeTab, 16 * nodeNr);
      if (v10)
      {
        cur->nodeMax *= 2;
        cur->nodeTab = v10;
LABEL_16:
        if (val->type == XML_NAMESPACE_DECL)
        {
          v11 = (xmlNode *)xmlXPathNodeSetDupNs((uint64_t)val->_private, (uint64_t)val);
          result = 0;
          nodeTab = cur->nodeTab;
          v13 = cur->nodeNr;
          cur->nodeNr = v13 + 1;
          nodeTab[v13] = v11;
        }
        else
        {
          result = 0;
          v14 = cur->nodeTab;
          v15 = cur->nodeNr;
          cur->nodeNr = v15 + 1;
          v14[v15] = val;
        }
        return result;
      }
    }
    else
    {
      v10 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      cur->nodeTab = v10;
      if (v10)
      {
        *((_OWORD *)v10 + 3) = 0u;
        *((_OWORD *)v10 + 4) = 0u;
        *((_OWORD *)v10 + 1) = 0u;
        *((_OWORD *)v10 + 2) = 0u;
        *(_OWORD *)v10 = 0u;
        cur->nodeMax = 10;
        goto LABEL_16;
      }
    }
    v9 = "growing nodeset\n";
    goto LABEL_20;
  }
  v6 = cur->nodeTab;
  v7 = cur->nodeNr;
  while (*v6 != val)
  {
    ++v6;
    if (!--v7)
      goto LABEL_7;
  }
  return 0;
}

int xmlXPathNodeSetAddUnique(xmlNodeSetPtr cur, xmlNodePtr val)
{
  int result;
  uint64_t nodeMax;
  const char *v6;
  xmlNodePtr *v7;
  int v8;
  xmlNode *v9;
  xmlNodePtr *nodeTab;
  uint64_t nodeNr;
  xmlNodePtr *v12;
  uint64_t v13;

  result = -1;
  if (cur && val)
  {
    nodeMax = cur->nodeMax;
    if ((_DWORD)nodeMax)
    {
      if (cur->nodeNr != (_DWORD)nodeMax)
        goto LABEL_12;
      if ((int)nodeMax >= 10000000)
      {
        v6 = "growing nodeset hit limit\n";
        v7 = 0;
LABEL_16:
        xmlXPathErrMemory((uint64_t)v7, v6);
        return -1;
      }
      v7 = (xmlNodePtr *)xmlRealloc(cur->nodeTab, 16 * nodeMax);
      if (v7)
      {
        cur->nodeTab = v7;
        v8 = 2 * cur->nodeMax;
        goto LABEL_11;
      }
    }
    else
    {
      v7 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      cur->nodeTab = v7;
      if (v7)
      {
        *((_OWORD *)v7 + 3) = 0u;
        *((_OWORD *)v7 + 4) = 0u;
        *((_OWORD *)v7 + 1) = 0u;
        *((_OWORD *)v7 + 2) = 0u;
        *(_OWORD *)v7 = 0u;
        v8 = 10;
LABEL_11:
        cur->nodeMax = v8;
LABEL_12:
        if (val->type == XML_NAMESPACE_DECL)
        {
          v9 = (xmlNode *)xmlXPathNodeSetDupNs((uint64_t)val->_private, (uint64_t)val);
          result = 0;
          nodeTab = cur->nodeTab;
          nodeNr = cur->nodeNr;
          cur->nodeNr = nodeNr + 1;
          nodeTab[nodeNr] = v9;
        }
        else
        {
          result = 0;
          v12 = cur->nodeTab;
          v13 = cur->nodeNr;
          cur->nodeNr = v13 + 1;
          v12[v13] = val;
        }
        return result;
      }
    }
    v6 = "growing nodeset\n";
    goto LABEL_16;
  }
  return result;
}

xmlNodeSetPtr xmlXPathNodeSetMerge(xmlNodeSetPtr val1, xmlNodeSetPtr val2)
{
  xmlNodeSetPtr v2;
  uint64_t v4;
  uint64_t nodeNr;
  xmlNodePtr v6;
  uint64_t i;
  xmlNodePtr v8;
  uint64_t nodeMax;
  xmlNodePtr *v10;
  int v11;
  xmlNodePtr *v12;
  xmlNodePtr *nodeTab;
  uint64_t v14;
  const char *v15;

  v2 = val1;
  if (!val2)
    return v2;
  if (!val1)
  {
    v2 = xmlXPathNodeSetCreate(0);
    if (!v2)
      return v2;
  }
  if (val2->nodeNr < 1)
    return v2;
  v4 = 0;
  nodeNr = v2->nodeNr;
  while (1)
  {
    v6 = val2->nodeTab[v4];
    if ((int)nodeNr >= 1)
    {
      for (i = 0; i != nodeNr; ++i)
      {
        v8 = v2->nodeTab[i];
        if (v8 == v6
          || v8->type == XML_NAMESPACE_DECL
          && v6->type == XML_NAMESPACE_DECL
          && v8->_private == v6->_private
          && xmlStrEqual((const xmlChar *)v8->children, (const xmlChar *)v6->children))
        {
          goto LABEL_25;
        }
      }
    }
    nodeMax = v2->nodeMax;
    if (!(_DWORD)nodeMax)
    {
      v12 = (xmlNodePtr *)xmlMalloc(0x50uLL);
      v2->nodeTab = v12;
      if (!v12)
      {
LABEL_27:
        v15 = "merging nodeset\n";
        goto LABEL_29;
      }
      *((_OWORD *)v12 + 3) = 0u;
      *((_OWORD *)v12 + 4) = 0u;
      *((_OWORD *)v12 + 1) = 0u;
      *((_OWORD *)v12 + 2) = 0u;
      v11 = 10;
      *(_OWORD *)v12 = 0u;
      goto LABEL_21;
    }
    if (v2->nodeNr == (_DWORD)nodeMax)
      break;
LABEL_22:
    if (v6->type == XML_NAMESPACE_DECL)
      v6 = (xmlNodePtr)xmlXPathNodeSetDupNs((uint64_t)v6->_private, (uint64_t)v6);
    nodeTab = v2->nodeTab;
    v14 = v2->nodeNr;
    v2->nodeNr = v14 + 1;
    nodeTab[v14] = v6;
LABEL_25:
    if (++v4 >= val2->nodeNr)
      return v2;
  }
  if ((int)nodeMax <= 9999999)
  {
    v10 = (xmlNodePtr *)xmlRealloc(v2->nodeTab, 16 * nodeMax);
    if (!v10)
      goto LABEL_27;
    v2->nodeTab = v10;
    v11 = 2 * v2->nodeMax;
LABEL_21:
    v2->nodeMax = v11;
    goto LABEL_22;
  }
  v15 = "merging nodeset hit limit\n";
LABEL_29:
  xmlXPathErrMemory(0, v15);
  return 0;
}

void xmlXPathNodeSetDel(xmlNodeSetPtr cur, xmlNodePtr val)
{
  uint64_t nodeNr;
  uint64_t v4;
  xmlNodePtr *nodeTab;
  xmlNodePtr v6;
  uint64_t v7;

  if (cur)
  {
    if (val)
    {
      nodeNr = cur->nodeNr;
      if ((int)nodeNr >= 1)
      {
        v4 = 0;
        nodeTab = cur->nodeTab;
        while (nodeTab[v4] != val)
        {
          if (nodeNr == ++v4)
            return;
        }
        v6 = nodeTab[v4];
        if (v6 && v6->type == XML_NAMESPACE_DECL)
        {
          xmlXPathNodeSetFreeNs((xmlNsPtr)v6);
          LODWORD(nodeNr) = cur->nodeNr;
        }
        v7 = (nodeNr - 1);
        cur->nodeNr = v7;
        if ((int)v7 > (int)v4)
        {
          do
          {
            cur->nodeTab[v4] = cur->nodeTab[v4 + 1];
            ++v4;
          }
          while (v7 != v4);
        }
        cur->nodeTab[(int)v7] = 0;
      }
    }
  }
}

void xmlXPathNodeSetRemove(xmlNodeSetPtr cur, int val)
{
  int nodeNr;
  xmlNodePtr v5;
  int v6;
  uint64_t v7;
  uint64_t v8;

  if (cur)
  {
    nodeNr = cur->nodeNr;
    if (cur->nodeNr > val)
    {
      v5 = cur->nodeTab[val];
      if (v5 && v5->type == XML_NAMESPACE_DECL)
      {
        xmlXPathNodeSetFreeNs((xmlNsPtr)v5);
        nodeNr = cur->nodeNr;
      }
      v6 = nodeNr - 1;
      cur->nodeNr = nodeNr - 1;
      v7 = nodeNr - 1;
      if (v6 > val)
      {
        v8 = val;
        do
        {
          cur->nodeTab[v8] = cur->nodeTab[v8 + 1];
          ++v8;
        }
        while (v7 != v8);
      }
      cur->nodeTab[v7] = 0;
    }
  }
}

void xmlXPathFreeNodeSet(xmlNodeSetPtr obj)
{
  xmlNodePtr *nodeTab;
  int nodeNr;
  uint64_t v4;
  xmlNodePtr v5;

  if (obj)
  {
    nodeTab = obj->nodeTab;
    if (nodeTab)
    {
      nodeNr = obj->nodeNr;
      if (obj->nodeNr >= 1)
      {
        v4 = 0;
        do
        {
          v5 = obj->nodeTab[v4];
          if (v5)
          {
            if (v5->type == XML_NAMESPACE_DECL)
            {
              xmlXPathNodeSetFreeNs((xmlNsPtr)v5);
              nodeNr = obj->nodeNr;
            }
          }
          ++v4;
        }
        while (v4 < nodeNr);
        nodeTab = obj->nodeTab;
      }
      xmlFree(nodeTab);
    }
    xmlFree(obj);
  }
}

xmlXPathObjectPtr xmlXPathNewNodeSet(xmlNodePtr val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;

  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->type = 0u;
    *(_OWORD *)&v2->BOOLval = 0u;
    *(_QWORD *)&v2->index2 = 0;
    *(_OWORD *)&v2->stringval = 0u;
    *(_OWORD *)&v2->index = 0u;
    v2->type = XPATH_NODESET;
    v2->BOOLval = 0;
    v2->nodesetval = xmlXPathNodeSetCreate(val);
  }
  else
  {
    xmlXPathErrMemory(0, "creating nodeset\n");
  }
  return v3;
}

xmlXPathObjectPtr xmlXPathNewValueTree(xmlNodePtr val)
{
  xmlXPathObjectPtr v1;
  xmlXPathObject *v2;

  v1 = xmlXPathNewNodeSet(val);
  v2 = v1;
  if (v1)
    v1->type = XPATH_XSLT_TREE;
  else
    xmlXPathErrMemory(0, "creating result value tree\n");
  return v2;
}

xmlXPathObjectPtr xmlXPathNewNodeSetList(xmlNodeSetPtr val)
{
  xmlNodePtr *nodeTab;
  xmlXPathObjectPtr v3;
  uint64_t v4;

  if (!val)
    return 0;
  nodeTab = val->nodeTab;
  if (nodeTab)
  {
    v3 = xmlXPathNewNodeSet(*nodeTab);
    if (v3 && val->nodeNr >= 2)
    {
      v4 = 1;
      do
      {
        if (xmlXPathNodeSetAddUnique(v3->nodesetval, val->nodeTab[v4]) < 0)
          break;
        ++v4;
      }
      while (v4 < val->nodeNr);
    }
    return v3;
  }
  return xmlXPathNewNodeSet(0);
}

xmlXPathObjectPtr xmlXPathWrapNodeSet(xmlNodeSetPtr val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;

  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)&v2->index2 = 0;
    *(_OWORD *)&v2->stringval = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->type = 0u;
    *(_OWORD *)&v2->BOOLval = 0u;
    v2->type = XPATH_NODESET;
    v2->nodesetval = val;
  }
  else
  {
    xmlXPathErrMemory(0, "creating node set object\n");
  }
  return v3;
}

void xmlXPathFreeNodeSetList(xmlXPathObjectPtr obj)
{
  if (obj)
    xmlFree(obj);
}

xmlNodeSetPtr xmlXPathDifference(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodeSet *v4;
  int nodeNr;
  uint64_t v6;
  int i;
  xmlNode *v8;

  if (nodes2 && nodes2->nodeNr && nodes2->nodeTab)
  {
    v4 = xmlXPathNodeSetCreate(0);
    if (nodes1)
    {
      nodeNr = nodes1->nodeNr;
      if (nodes1->nodeNr)
      {
        if (nodes1->nodeTab && nodeNr >= 1)
        {
          v6 = 0;
          for (i = nodes1->nodeNr; ; i = nodes1->nodeNr)
          {
            v8 = (int)v6 >= i ? 0 : nodes1->nodeTab[v6];
            if (!xmlXPathNodeSetContains(nodes2, v8) && xmlXPathNodeSetAddUnique(v4, v8) < 0)
              break;
            if ((int)++v6 >= nodeNr)
              break;
          }
        }
      }
    }
    return v4;
  }
  return nodes1;
}

xmlNodeSetPtr xmlXPathIntersection(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodeSetPtr v4;
  xmlNodeSet *v5;
  int nodeNr;
  uint64_t v7;
  int i;
  xmlNode *v9;

  v4 = xmlXPathNodeSetCreate(0);
  v5 = v4;
  if (nodes1)
  {
    if (v4)
    {
      nodeNr = nodes1->nodeNr;
      if (nodes1->nodeNr)
      {
        if (nodes2 && nodes1->nodeTab && nodes2->nodeNr && nodes2->nodeTab && nodeNr >= 1)
        {
          v7 = 0;
          for (i = nodes1->nodeNr; ; i = nodes1->nodeNr)
          {
            v9 = (int)v7 >= i ? 0 : nodes1->nodeTab[v7];
            if (xmlXPathNodeSetContains(nodes2, v9) && xmlXPathNodeSetAddUnique(v5, v9) < 0)
              break;
            if ((int)++v7 >= nodeNr)
              break;
          }
        }
      }
    }
  }
  return v5;
}

xmlNodeSetPtr xmlXPathDistinctSorted(xmlNodeSetPtr nodes)
{
  xmlNodeSet *v2;
  int nodeNr;
  xmlHashTable *v4;
  uint64_t v5;
  xmlNodePtr v6;
  xmlChar *Content;

  if (!nodes)
    return 0;
  if (!nodes->nodeNr || !nodes->nodeTab)
    return nodes;
  v2 = xmlXPathNodeSetCreate(0);
  if (v2)
  {
    nodeNr = nodes->nodeNr;
    v4 = xmlHashCreate(nodes->nodeNr);
    if (nodeNr >= 1)
    {
      v5 = 0;
      do
      {
        if ((int)v5 >= nodes->nodeNr)
          v6 = 0;
        else
          v6 = nodes->nodeTab[v5];
        Content = xmlNodeGetContent(v6);
        if (!Content)
          Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
        if (xmlHashLookup(v4, Content))
        {
          xmlFree(Content);
        }
        else
        {
          xmlHashAddEntry(v4, Content, Content);
          if (xmlXPathNodeSetAddUnique(v2, v6) < 0)
            break;
        }
        ++v5;
      }
      while ((int)v5 < nodeNr);
    }
    xmlHashFree(v4, xmlHashDefaultDeallocator);
  }
  return v2;
}

xmlChar *__cdecl xmlXPathCastNodeToString(xmlNodePtr node)
{
  xmlChar *result;

  result = xmlNodeGetContent(node);
  if (!result)
    return xmlStrdup((const xmlChar *)&byte_1B0865C1A);
  return result;
}

xmlNodeSetPtr xmlXPathDistinct(xmlNodeSetPtr nodes)
{
  unint64_t nodeNr;
  xmlNodePtr *nodeTab;

  if (!nodes)
    return nodes;
  nodeNr = nodes->nodeNr;
  if (!(_DWORD)nodeNr)
    return nodes;
  nodeTab = nodes->nodeTab;
  if (!nodeTab)
    return nodes;
  libxml_domnode_tim_sort((uint64_t)nodeTab, nodeNr);
  return xmlXPathDistinctSorted(nodes);
}

int xmlXPathHasSameNodes(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodeSetPtr v2;
  uint64_t nodeNr;
  uint64_t v5;
  xmlNode *v6;

  if (nodes1)
  {
    v2 = nodes1;
    nodeNr = nodes1->nodeNr;
    if (!(_DWORD)nodeNr)
      goto LABEL_15;
    LODWORD(nodes1) = 0;
    if (!nodes2 || !v2->nodeTab)
      return (int)nodes1;
    if (!nodes2->nodeNr)
    {
LABEL_15:
      LODWORD(nodes1) = 0;
      return (int)nodes1;
    }
    LODWORD(nodes1) = 0;
    if (nodes2->nodeTab && (int)nodeNr >= 1)
    {
      v5 = 0;
      while (1)
      {
        v6 = v5 >= v2->nodeNr ? 0 : v2->nodeTab[v5];
        LODWORD(nodes1) = xmlXPathNodeSetContains(nodes2, v6);
        if ((_DWORD)nodes1)
          break;
        if (nodeNr == ++v5)
          return (int)nodes1;
      }
      LODWORD(nodes1) = 1;
    }
  }
  return (int)nodes1;
}

xmlNodeSetPtr xmlXPathNodeLeadingSorted(xmlNodeSetPtr nodes, xmlNodePtr node)
{
  xmlNodeSetPtr v4;
  xmlNodeSet *v5;
  uint64_t nodeNr;
  uint64_t v7;
  uint64_t v8;
  xmlNode *v9;

  if (node)
  {
    v4 = xmlXPathNodeSetCreate(0);
    if (v4)
    {
      v5 = v4;
      if (nodes)
      {
        if (nodes->nodeNr)
        {
          if (nodes->nodeTab)
          {
            if (xmlXPathNodeSetContains(nodes, node))
            {
              nodeNr = nodes->nodeNr;
              if ((int)nodeNr >= 1)
              {
                v7 = 0;
                v8 = nodeNr - 1;
                do
                {
                  if (v7 >= nodes->nodeNr)
                    v9 = 0;
                  else
                    v9 = nodes->nodeTab[v7];
                  if (v9 == node)
                    break;
                  if (xmlXPathNodeSetAddUnique(v5, v9) < 0)
                    break;
                }
                while (v8 != v7++);
              }
            }
          }
        }
      }
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return nodes;
}

xmlNodeSetPtr xmlXPathNodeLeading(xmlNodeSetPtr nodes, xmlNodePtr node)
{
  if (nodes)
    libxml_domnode_tim_sort((uint64_t)nodes->nodeTab, nodes->nodeNr);
  return xmlXPathNodeLeadingSorted(nodes, node);
}

xmlNodeSetPtr xmlXPathLeadingSorted(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodePtr *nodeTab;
  xmlNode *v3;

  if (nodes2)
  {
    if (nodes2->nodeNr)
    {
      nodeTab = nodes2->nodeTab;
      if (nodeTab)
      {
        if (nodes2->nodeNr < 2)
          v3 = 0;
        else
          v3 = nodeTab[1];
        return xmlXPathNodeLeadingSorted(nodes1, v3);
      }
    }
  }
  return nodes1;
}

xmlNodeSetPtr xmlXPathLeading(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodeSet *v2;
  unint64_t nodeNr;
  xmlNodePtr *nodeTab;
  xmlNode *v6;

  v2 = nodes1;
  if (nodes2 && nodes2->nodeNr && nodes2->nodeTab)
  {
    if (nodes1 && (nodeNr = nodes1->nodeNr, (_DWORD)nodeNr) && (nodeTab = nodes1->nodeTab) != 0)
    {
      libxml_domnode_tim_sort((uint64_t)nodeTab, nodeNr);
      libxml_domnode_tim_sort((uint64_t)nodes2->nodeTab, nodes2->nodeNr);
      if (nodes2->nodeNr < 2)
        v6 = 0;
      else
        v6 = (xmlNode *)*((_QWORD *)nodes2->nodeTab + 1);
      return xmlXPathNodeLeadingSorted(v2, v6);
    }
    else
    {
      return xmlXPathNodeSetCreate(0);
    }
  }
  return nodes1;
}

xmlNodeSetPtr xmlXPathNodeTrailingSorted(xmlNodeSetPtr nodes, xmlNodePtr node)
{
  xmlNodeSetPtr v4;
  uint64_t nodeNr;
  xmlNode *v6;

  if (!node)
    return nodes;
  v4 = xmlXPathNodeSetCreate(0);
  if (v4 && nodes && nodes->nodeNr && nodes->nodeTab && xmlXPathNodeSetContains(nodes, node))
  {
    nodeNr = nodes->nodeNr;
    do
    {
      if ((int)nodeNr < 1)
        break;
      v6 = nodes->nodeNr >= (int)nodeNr ? nodes->nodeTab[nodeNr - 1] : 0;
      if (v6 == node)
        break;
      --nodeNr;
    }
    while ((xmlXPathNodeSetAddUnique(v4, v6) & 0x80000000) == 0);
    libxml_domnode_tim_sort((uint64_t)v4->nodeTab, v4->nodeNr);
  }
  return v4;
}

xmlNodeSetPtr xmlXPathNodeTrailing(xmlNodeSetPtr nodes, xmlNodePtr node)
{
  if (nodes)
    libxml_domnode_tim_sort((uint64_t)nodes->nodeTab, nodes->nodeNr);
  return xmlXPathNodeTrailingSorted(nodes, node);
}

xmlNodeSetPtr xmlXPathTrailingSorted(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodePtr *nodeTab;
  xmlNode *v3;

  if (nodes2)
  {
    if (nodes2->nodeNr)
    {
      nodeTab = nodes2->nodeTab;
      if (nodeTab)
      {
        if (nodes2->nodeNr < 1)
          v3 = 0;
        else
          v3 = *nodeTab;
        return xmlXPathNodeTrailingSorted(nodes1, v3);
      }
    }
  }
  return nodes1;
}

xmlNodeSetPtr xmlXPathTrailing(xmlNodeSetPtr nodes1, xmlNodeSetPtr nodes2)
{
  xmlNodeSet *v2;
  unint64_t nodeNr;
  xmlNodePtr *nodeTab;
  xmlNode *v6;

  v2 = nodes1;
  if (nodes2 && nodes2->nodeNr && nodes2->nodeTab)
  {
    if (nodes1 && (nodeNr = nodes1->nodeNr, (_DWORD)nodeNr) && (nodeTab = nodes1->nodeTab) != 0)
    {
      libxml_domnode_tim_sort((uint64_t)nodeTab, nodeNr);
      libxml_domnode_tim_sort((uint64_t)nodes2->nodeTab, nodes2->nodeNr);
      if (nodes2->nodeNr < 1)
        v6 = 0;
      else
        v6 = *nodes2->nodeTab;
      return xmlXPathNodeTrailingSorted(v2, v6);
    }
    else
    {
      return xmlXPathNodeSetCreate(0);
    }
  }
  return nodes1;
}

int xmlXPathRegisterFunc(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathFunction f)
{
  return xmlXPathRegisterFuncNS(ctxt, name, 0, f);
}

int xmlXPathRegisterFuncNS(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri, xmlXPathFunction f)
{
  xmlHashTable *funcHash;

  if (!ctxt)
    return -1;
  if (!name)
    return -1;
  funcHash = ctxt->funcHash;
  if (!funcHash)
  {
    funcHash = xmlHashCreate(0);
    ctxt->funcHash = funcHash;
    if (!funcHash)
      return -1;
  }
  if (f)
    return xmlHashAddEntry2(funcHash, name, ns_uri, f);
  return xmlHashRemoveEntry2(funcHash, name, ns_uri, 0);
}

void xmlXPathRegisterFuncLookup(xmlXPathContextPtr ctxt, xmlXPathFuncLookupFunc f, void *funcCtxt)
{
  if (ctxt)
  {
    ctxt->funcLookupFunc = f;
    ctxt->funcLookupData = funcCtxt;
  }
}

xmlXPathFunction xmlXPathFunctionLookup(xmlXPathFunction ctxt, const xmlChar *name)
{
  xmlXPathContext *v3;
  uint64_t (*v4)(_QWORD, const xmlChar *, _QWORD);

  if (ctxt)
  {
    v3 = (xmlXPathContext *)ctxt;
    v4 = (uint64_t (*)(_QWORD, const xmlChar *, _QWORD))*((_QWORD *)ctxt + 23);
    if (!v4)
      return xmlXPathFunctionLookupNS(v3, name, 0);
    ctxt = (xmlXPathFunction)v4(*((_QWORD *)ctxt + 24), name, 0);
    if (!ctxt)
      return xmlXPathFunctionLookupNS(v3, name, 0);
  }
  return ctxt;
}

xmlXPathFunction xmlXPathFunctionLookupNS(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri)
{
  xmlXPathFunction result;
  xmlXPathFuncLookupFunc funcLookupFunc;

  result = 0;
  if (ctxt)
  {
    if (name)
    {
      funcLookupFunc = ctxt->funcLookupFunc;
      if (!funcLookupFunc
        || (result = (xmlXPathFunction)((uint64_t (*)(void *, const xmlChar *, const xmlChar *))funcLookupFunc)(ctxt->funcLookupData, name, ns_uri)) == 0)
      {
        result = (xmlXPathFunction)ctxt->funcHash;
        if (result)
          return (xmlXPathFunction)xmlHashLookup2((xmlHashTablePtr)result, name, ns_uri);
      }
    }
  }
  return result;
}

void xmlXPathRegisteredFuncsCleanup(xmlXPathContextPtr ctxt)
{
  if (ctxt)
  {
    xmlHashFree(ctxt->funcHash, 0);
    ctxt->funcHash = 0;
  }
}

int xmlXPathRegisterVariable(xmlXPathContextPtr ctxt, const xmlChar *name, xmlXPathObjectPtr value)
{
  return xmlXPathRegisterVariableNS(ctxt, name, 0, value);
}

int xmlXPathRegisterVariableNS(xmlXPathContextPtr ctxt, const xmlChar *name, const xmlChar *ns_uri, xmlXPathObjectPtr value)
{
  xmlHashTable *varHash;

  if (!ctxt)
    return -1;
  if (!name)
    return -1;
  varHash = ctxt->varHash;
  if (!varHash)
  {
    varHash = xmlHashCreate(0);
    ctxt->varHash = varHash;
    if (!varHash)
      return -1;
  }
  if (value)
    return xmlHashUpdateEntry2(varHash, name, ns_uri, value, (xmlHashDeallocator)xmlXPathFreeObjectEntry);
  return xmlHashRemoveEntry2(varHash, name, ns_uri, (xmlHashDeallocator)xmlXPathFreeObjectEntry);
}

void xmlXPathRegisterVariableLookup(xmlXPathContextPtr ctxt, xmlXPathVariableLookupFunc f, void *data)
{
  if (ctxt)
  {
    ctxt->varLookupFunc = f;
    ctxt->varLookupData = data;
  }
}

xmlXPathObjectPtr xmlXPathVariableLookup(xmlXPathObjectPtr ctxt, const xmlChar *name)
{
  uint64_t (*v2)(xmlNodeSetPtr, const xmlChar *, _QWORD);

  if (ctxt)
  {
    v2 = *(uint64_t (**)(xmlNodeSetPtr, const xmlChar *, _QWORD))&ctxt[2].type;
    if (v2)
      return (xmlXPathObjectPtr)v2(ctxt[2].nodesetval, name, 0);
    else
      return xmlXPathVariableLookupNS((xmlXPathContextPtr)ctxt, name, 0);
  }
  return ctxt;
}

xmlXPathObjectPtr xmlXPathVariableLookupNS(xmlXPathObjectPtr ctxt, const xmlChar *name, const xmlChar *ns_uri)
{
  xmlXPathObjectPtr v5;
  uint64_t (*v6)(xmlNodeSetPtr, const xmlChar *, const xmlChar *);
  xmlXPathObject *v7;

  if (ctxt)
  {
    v5 = ctxt;
    v6 = *(uint64_t (**)(xmlNodeSetPtr, const xmlChar *, const xmlChar *))&ctxt[2].type;
    if (!v6 || (ctxt = (xmlXPathObjectPtr)v6(ctxt[2].nodesetval, name, ns_uri)) == 0)
    {
      ctxt = 0;
      if (name)
      {
        if (*(_QWORD *)&v5->floatval)
        {
          v7 = (xmlXPathObject *)xmlHashLookup2(*(xmlHashTablePtr *)&v5->floatval, name, ns_uri);
          return xmlXPathCacheObjectCopy((uint64_t)v5, v7);
        }
      }
    }
  }
  return ctxt;
}

xmlXPathObjectPtr xmlXPathCacheObjectCopy(uint64_t a1, xmlXPathObjectPtr val)
{
  xmlNodeSet *v3;
  xmlXPathObjectPtr result;

  if (!val)
    return 0;
  if (!a1 || !*(_QWORD *)(a1 + 344))
    return xmlXPathObjectCopy(val);
  switch(val->type)
  {
    case XPATH_NODESET:
      v3 = xmlXPathNodeSetMerge(0, val->nodesetval);
      result = xmlXPathCacheWrapNodeSet(a1, v3);
      break;
    case XPATH_BOOLEAN:
      result = xmlXPathCacheNewBoolean(a1, val->BOOLval);
      break;
    case XPATH_NUMBER:
      result = xmlXPathCacheNewFloat(val->floatval, a1);
      break;
    case XPATH_STRING:
      result = xmlXPathCacheNewString(a1, val->stringval);
      break;
    default:
      return xmlXPathObjectCopy(val);
  }
  return result;
}

void xmlXPathRegisteredVariablesCleanup(xmlXPathContextPtr ctxt)
{
  if (ctxt)
  {
    xmlHashFree(ctxt->varHash, (xmlHashDeallocator)xmlXPathFreeObjectEntry);
    ctxt->varHash = 0;
  }
}

int xmlXPathRegisterNs(xmlXPathContextPtr ctxt, const xmlChar *prefix, const xmlChar *ns_uri)
{
  int result;
  xmlHashTable *nsHash;
  xmlChar *v8;
  xmlChar *v9;

  result = -1;
  if (ctxt && prefix && *prefix)
  {
    nsHash = ctxt->nsHash;
    if (nsHash || (nsHash = xmlHashCreate(10), (ctxt->nsHash = nsHash) != 0))
    {
      if (!ns_uri)
        return xmlHashRemoveEntry(nsHash, prefix, xmlHashDefaultDeallocator);
      v8 = xmlStrdup(ns_uri);
      if (v8)
      {
        v9 = v8;
        if ((xmlHashUpdateEntry(ctxt->nsHash, prefix, v8, xmlHashDefaultDeallocator) & 0x80000000) == 0)
          return 0;
        xmlFree(v9);
      }
    }
    return -1;
  }
  return result;
}

const xmlChar *__cdecl xmlXPathNsLookup(xmlXPathContextPtr ctxt, const xmlChar *prefix)
{
  const xmlChar *result;
  int nsNr;
  uint64_t v6;
  xmlNsPtr v7;

  result = 0;
  if (ctxt && prefix)
  {
    if (!xmlStrEqual(prefix, (const xmlChar *)"xml"))
    {
      if (!ctxt->namespaces)
        return (const xmlChar *)xmlHashLookup(ctxt->nsHash, prefix);
      nsNr = ctxt->nsNr;
      if (nsNr < 1)
        return (const xmlChar *)xmlHashLookup(ctxt->nsHash, prefix);
      v6 = 0;
      while (1)
      {
        v7 = ctxt->namespaces[v6];
        if (v7)
        {
          if (xmlStrEqual(v7->prefix, prefix))
            return ctxt->namespaces[v6]->href;
          nsNr = ctxt->nsNr;
        }
        if (++v6 >= nsNr)
          return (const xmlChar *)xmlHashLookup(ctxt->nsHash, prefix);
      }
    }
    return (const xmlChar *)"http://www.w3.org/XML/1998/namespace";
  }
  return result;
}

void xmlXPathRegisteredNsCleanup(xmlXPathContextPtr ctxt)
{
  if (ctxt)
  {
    xmlHashFree(ctxt->nsHash, xmlHashDefaultDeallocator);
    ctxt->nsHash = 0;
  }
}

xmlXPathObjectPtr xmlXPathNewFloat(double val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;

  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->type = 0u;
    *(_OWORD *)&v2->BOOLval = 0u;
    *(_QWORD *)&v2->index2 = 0;
    *(_OWORD *)&v2->stringval = 0u;
    *(_OWORD *)&v2->index = 0u;
    v2->type = XPATH_NUMBER;
    v2->floatval = val;
  }
  else
  {
    xmlXPathErrMemory(0, "creating float object\n");
  }
  return v3;
}

xmlXPathObjectPtr xmlXPathNewBoolean(int val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;

  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->type = 0u;
    *(_OWORD *)&v2->BOOLval = 0u;
    *(_QWORD *)&v2->index2 = 0;
    *(_OWORD *)&v2->stringval = 0u;
    *(_OWORD *)&v2->index = 0u;
    v2->type = XPATH_BOOLEAN;
    v2->BOOLval = val != 0;
  }
  else
  {
    xmlXPathErrMemory(0, "creating BOOLean object\n");
  }
  return v3;
}

xmlXPathObjectPtr xmlXPathNewString(const xmlChar *val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;
  const xmlChar *v4;

  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)&v2->index2 = 0;
    *(_OWORD *)&v2->stringval = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->type = 0u;
    *(_OWORD *)&v2->BOOLval = 0u;
    v2->type = XPATH_STRING;
    if (val)
      v4 = val;
    else
      v4 = (const xmlChar *)&byte_1B0865C1A;
    v3->stringval = xmlStrdup(v4);
  }
  else
  {
    xmlXPathErrMemory(0, "creating string object\n");
  }
  return v3;
}

xmlXPathObjectPtr xmlXPathWrapString(xmlChar *val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;

  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)&v2->index2 = 0;
    *(_OWORD *)&v2->stringval = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->type = 0u;
    *(_OWORD *)&v2->BOOLval = 0u;
    v2->type = XPATH_STRING;
    v2->stringval = val;
  }
  else
  {
    xmlXPathErrMemory(0, "creating string object\n");
  }
  return v3;
}

xmlXPathObjectPtr xmlXPathNewCString(const char *val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;

  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)&v2->index2 = 0;
    *(_OWORD *)&v2->stringval = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->type = 0u;
    *(_OWORD *)&v2->BOOLval = 0u;
    v2->type = XPATH_STRING;
    v2->stringval = xmlStrdup((const xmlChar *)val);
  }
  else
  {
    xmlXPathErrMemory(0, "creating string object\n");
  }
  return v3;
}

xmlXPathObjectPtr xmlXPathWrapExternal(void *val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;

  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)&v2->index2 = 0;
    *(_OWORD *)&v2->stringval = 0u;
    *(_OWORD *)&v2->index = 0u;
    *(_OWORD *)&v2->type = 0u;
    *(_OWORD *)&v2->BOOLval = 0u;
    v2->type = XPATH_USERS;
    v2->user = val;
  }
  else
  {
    xmlXPathErrMemory(0, "creating user object\n");
  }
  return v3;
}

xmlXPathObjectPtr xmlXPathObjectCopy(xmlXPathObjectPtr val)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  xmlGenericErrorFunc v7;
  void **v8;

  if (!val)
    return 0;
  v2 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v3 = v2;
  if (v2)
  {
    *(_OWORD *)&v2->type = *(_OWORD *)&val->type;
    v4 = *(_OWORD *)&val->BOOLval;
    v5 = *(_OWORD *)&val->stringval;
    v6 = *(_OWORD *)&val->index;
    *(_QWORD *)&v2->index2 = *(_QWORD *)&val->index2;
    *(_OWORD *)&v2->stringval = v5;
    *(_OWORD *)&v2->index = v6;
    *(_OWORD *)&v2->BOOLval = v4;
    switch(val->type)
    {
      case XPATH_UNDEFINED:
        v7 = *__xmlGenericError();
        v8 = __xmlGenericErrorContext();
        v7(*v8, "xmlXPathObjectCopy: unsupported type %d\n", val->type);
        break;
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        v2->nodesetval = xmlXPathNodeSetMerge(0, val->nodesetval);
        v3->BOOLval = 0;
        break;
      case XPATH_STRING:
        v2->stringval = xmlStrdup(val->stringval);
        break;
      case XPATH_LOCATIONSET:
        v2->user = xmlXPtrLocationSetMerge(0, (xmlLocationSetPtr)val->user);
        break;
      case XPATH_USERS:
        v2->user = val->user;
        break;
      default:
        return v3;
    }
  }
  else
  {
    xmlXPathErrMemory(0, "copying object\n");
  }
  return v3;
}

xmlChar *__cdecl xmlXPathCastBooleanToString(int val)
{
  if (val)
    return xmlStrdup((const xmlChar *)"true");
  else
    return xmlStrdup((const xmlChar *)"false");
}

xmlChar *__cdecl xmlXPathCastNumberToString(double val)
{
  double v2;
  int v3;
  const char *v4;
  int v6;
  BOOL v7;
  int v8;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  xmlChar *v15;
  char *v16;
  int v17;
  uint64_t v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  xmlChar cur[16];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  char __str[8];
  uint64_t v31;
  _QWORD v32[3];

  v32[2] = *MEMORY[0x1E0C80C00];
  v2 = fabs(val);
  if (val > 0.0)
    v3 = 1;
  else
    v3 = -1;
  if (v2 != INFINITY)
    v3 = 0;
  if (v3 == -1)
  {
    v4 = "-Infinity";
    return xmlStrdup((const xmlChar *)v4);
  }
  if (v3 == 1)
  {
    v4 = "Infinity";
    return xmlStrdup((const xmlChar *)v4);
  }
  if (val == 0.0)
  {
    v4 = "0";
    return xmlStrdup((const xmlChar *)v4);
  }
  v29 = 0;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  *(_OWORD *)cur = 0u;
  v24 = 0u;
  if (val > 0.0 && v2 == INFINITY)
  {
    strcpy((char *)cur, "Infinity");
  }
  else if (val > -2147483650.0 && ((v6 = (int)val, val < 2147483650.0) ? (v7 = (double)v6 == val) : (v7 = 0), v7))
  {
    *(_QWORD *)__str = 0;
    v31 = 0;
    memset(v32, 0, 14);
    if (v6)
    {
      snprintf(__str, 0x1DuLL, "%d", (int)val);
      LOBYTE(v13) = __str[0];
      if (__str[0])
      {
        v14 = 0;
        do
        {
          cur[v14] = v13;
          v13 = __str[++v14];
        }
        while (v13 && v14 < 99);
        v15 = &cur[v14];
      }
      else
      {
        v15 = cur;
      }
    }
    else
    {
      v15 = &cur[1];
      cur[0] = 48;
    }
    v15[-(v15 - cur > 98)] = 0;
  }
  else
  {
    *(_QWORD *)__str = 0;
    v31 = 0;
    LODWORD(v32[1]) = 0;
    v32[0] = 0;
    if (v2 > 1000000000.0 || v2 < 0.00001)
    {
      v11 = snprintf(__str, 0x1CuLL, "%*.*e", 21, 14, val);
      if (v11 >= 1)
      {
        while (__str[v11] != 101)
        {
          v12 = __OFSUB__(v11--, 1);
          if ((v11 < 0) ^ v12 | (v11 == 0))
          {
            v11 = 0;
            break;
          }
        }
      }
    }
    else
    {
      v8 = 1;
      if (val != 0.0)
      {
        v9 = (int)log10(v2);
        if (v9 < 1)
          v10 = 15;
        else
          v10 = 14;
        v8 = v10 - v9;
      }
      v11 = snprintf(__str, 0x1CuLL, "%0.*f", v8, val);
    }
    while (__str[0] == 32)
    {
      v16 = &__str[1];
      do
      {
        v17 = *v16;
        *(v16++ - 1) = v17;
      }
      while (v17);
      --v11;
    }
    v18 = v11;
    v19 = &__str[v11];
    do
    {
      v21 = *--v19;
      v20 = v21;
    }
    while (v21 == 48);
    if (v20 != 46)
      ++v19;
    do
    {
      v22 = __str[v18];
      *v19++ = v22;
      ++v18;
    }
    while (v22);
    strlen(__str);
    __memmove_chk();
  }
  HIBYTE(v29) = 0;
  return xmlStrdup(cur);
}

xmlChar *__cdecl xmlXPathCastNodeSetToString(xmlNodeSetPtr ns)
{
  unint64_t nodeNr;
  const xmlNode **nodeTab;
  xmlChar *result;

  if (!ns)
    return xmlStrdup((const xmlChar *)&byte_1B0865C1A);
  nodeNr = ns->nodeNr;
  if (!(_DWORD)nodeNr)
    return xmlStrdup((const xmlChar *)&byte_1B0865C1A);
  nodeTab = (const xmlNode **)ns->nodeTab;
  if (!nodeTab)
    return xmlStrdup((const xmlChar *)&byte_1B0865C1A);
  if ((int)nodeNr >= 2)
  {
    libxml_domnode_tim_sort((uint64_t)nodeTab, nodeNr);
    nodeTab = (const xmlNode **)ns->nodeTab;
  }
  result = xmlNodeGetContent(*nodeTab);
  if (!result)
    return xmlStrdup((const xmlChar *)&byte_1B0865C1A);
  return result;
}

xmlXPathObjectPtr xmlXPathConvertString(xmlXPathObjectPtr val)
{
  xmlXPathObject *v1;
  xmlGenericErrorFunc v2;
  void **v3;
  xmlChar *v4;
  const char *v5;
  xmlChar *v6;

  if (val)
  {
    v1 = val;
    switch(val->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        v4 = xmlXPathCastNodeSetToString(val->nodesetval);
        goto LABEL_11;
      case XPATH_BOOLEAN:
        if (val->BOOLval)
          v5 = "true";
        else
          v5 = "false";
        v4 = xmlStrdup((const xmlChar *)v5);
        goto LABEL_11;
      case XPATH_NUMBER:
        v4 = xmlXPathCastNumberToString(val->floatval);
LABEL_11:
        v6 = v4;
        xmlXPathFreeObject(v1);
        if (!v6)
          return xmlXPathNewCString(&byte_1B0865C1A);
        return xmlXPathWrapString(v6);
      case XPATH_STRING:
        return val;
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        v2 = *__xmlGenericError();
        v3 = __xmlGenericErrorContext();
        v2(*v3, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 5759);
        goto LABEL_4;
      default:
LABEL_4:
        xmlXPathFreeObject(v1);
        return xmlXPathNewCString(&byte_1B0865C1A);
    }
  }
  return xmlXPathNewCString(&byte_1B0865C1A);
}

double xmlXPathCastBooleanToNumber(int val)
{
  double result;

  result = 1.0;
  if (!val)
    return 0.0;
  return result;
}

double xmlXPathStringEvalNumber(const xmlChar *str)
{
  uint64_t v1;
  uint64_t v3;
  const xmlChar *v4;
  unsigned int v5;
  unsigned int v6;
  double v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v11;
  double v12;
  unsigned int v13;
  unsigned int v14;
  double v16;
  double v17;
  unsigned int v18;
  const xmlChar *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  unsigned int v26;
  unsigned __int8 *v27;
  unsigned int v28;
  int v29;

  if (!str)
    return 0.0;
  while (1)
  {
    v1 = *str;
    if (v1 > 0x2E)
      break;
    if (((1 << v1) & 0x100002600) == 0)
    {
      if (v1 == 46)
        goto LABEL_10;
      break;
    }
    ++str;
  }
  if ((_DWORD)v1 != 45 && (v1 - 48) >= 0xA)
    return xmlXPathNAN;
LABEL_10:
  v3 = (_DWORD)v1 == 45;
  if ((_DWORD)v1 == 45)
    v4 = str + 1;
  else
    v4 = str;
  v5 = *v4;
  v6 = v5 - 48;
  v7 = 0.0;
  if (v5 - 48 <= 9)
  {
    do
    {
      v7 = v7 * 10.0 + (double)(v5 - 48);
      v5 = str[++v3];
    }
    while (v5 - 48 < 0xA);
    v4 = &str[v3];
  }
  if (v5 == 46)
  {
    v9 = (uint64_t)(v4 + 1);
    v8 = v4[1];
    if (v8 >= 0x30)
    {
      if (v6 >= 0xA && v8 >= 0x3A)
        return xmlXPathNAN;
      if (v8 == 48)
      {
        v11 = 0;
        do
          v8 = v4[v11++ + 2];
        while (v8 == 48);
        v9 = (uint64_t)&v4[v11 + 1];
        goto LABEL_28;
      }
    }
    else if (v6 >= 0xA)
    {
      return xmlXPathNAN;
    }
    LODWORD(v11) = 0;
LABEL_28:
    v12 = 0.0;
    if (v8 - 48 <= 9)
    {
      v13 = v11 + 20;
      do
      {
        v12 = (double)(int)(v8 - 48) + v12 * 10.0;
        LODWORD(v11) = v11 + 1;
        v14 = *(unsigned __int8 *)++v9;
        v8 = v14;
      }
      while (v14 - 48 <= 9 && v11 < v13);
    }
    v16 = __exp10((double)(int)v11);
    v4 = (const xmlChar *)(v9 - 1);
    v17 = v12 / v16;
    do
    {
      v18 = *++v4;
      v5 = v18;
    }
    while (v18 - 48 < 0xA);
    v7 = v7 + v17;
  }
  if ((v5 | 0x20) == 0x65)
  {
    v19 = v4 + 2;
    v21 = *++v4;
    v20 = v21;
    if (v21 == 45)
    {
      v4 = v19;
      v22 = 1;
    }
    else
    {
      v22 = 0;
    }
    if (v20 == 43)
    {
      v4 = v19;
      v23 = 0;
    }
    else
    {
      v23 = v22;
    }
    v5 = *v4;
    if (v5 - 48 > 9)
    {
      v24 = 0;
    }
    else
    {
      v24 = 0;
      do
      {
        v25 = v5 + 10 * v24 - 48;
        if (v24 < 1000000)
          v24 = v25;
        v26 = *++v4;
        v5 = v26;
      }
      while (v26 - 48 < 0xA);
    }
  }
  else
  {
    v24 = 0;
    v23 = 0;
  }
  v27 = (unsigned __int8 *)(v4 + 1);
  while (v5 <= 0x20)
  {
    if (((1 << v5) & 0x100002600) == 0)
    {
      if (v5)
        return xmlXPathNAN;
      if ((_DWORD)v1 == 45)
        v7 = -v7;
      if (v23)
        v29 = -v24;
      else
        v29 = v24;
      return v7 * __exp10((double)v29);
    }
    v28 = *v27++;
    v5 = v28;
  }
  return xmlXPathNAN;
}

double xmlXPathCastNodeToNumber(xmlNodePtr node)
{
  xmlChar *Content;
  double v2;

  if (!node)
    return xmlXPathNAN;
  Content = xmlNodeGetContent(node);
  if (!Content)
  {
    Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
    if (!Content)
      return xmlXPathNAN;
  }
  v2 = xmlXPathStringEvalNumber(Content);
  xmlFree(Content);
  return v2;
}

double xmlXPathCastNodeSetToNumber(xmlNodeSetPtr ns)
{
  xmlChar *v1;
  double v2;

  if (!ns)
    return xmlXPathNAN;
  v1 = xmlXPathCastNodeSetToString(ns);
  v2 = xmlXPathStringEvalNumber(v1);
  xmlFree(v1);
  return v2;
}

xmlXPathObjectPtr xmlXPathConvertNumber(xmlXPathObjectPtr val)
{
  xmlXPathObject *v1;
  double v2;
  xmlXPathObject *v3;

  if (!val)
    return xmlXPathNewFloat(0.0);
  v1 = val;
  if (val->type != XPATH_NUMBER)
  {
    v2 = xmlXPathCastToNumber(val);
    v3 = xmlXPathNewFloat(v2);
    xmlXPathFreeObject(v1);
    return v3;
  }
  return val;
}

int xmlXPathCastNumberToBoolean(double val)
{
  return val > 0.0 || val < 0.0;
}

int xmlXPathCastStringToBoolean(const xmlChar *val)
{
  if (val)
    LODWORD(val) = xmlStrlen(val) != 0;
  return (int)val;
}

int xmlXPathCastNodeSetToBoolean(xmlNodeSetPtr ns)
{
  if (ns)
    LODWORD(ns) = ns->nodeNr != 0;
  return (int)ns;
}

xmlXPathObjectPtr xmlXPathConvertBoolean(xmlXPathObjectPtr val)
{
  xmlXPathObject *v1;
  int v2;
  xmlXPathObject *v3;

  if (!val)
    return xmlXPathNewBoolean(0);
  v1 = val;
  if (val->type != XPATH_BOOLEAN)
  {
    v2 = xmlXPathCastToBoolean(val);
    v3 = xmlXPathNewBoolean(v2);
    xmlXPathFreeObject(v1);
    return v3;
  }
  return val;
}

xmlXPathContextPtr xmlXPathNewContext(xmlDocPtr doc)
{
  xmlXPathContext *v2;
  xmlXPathContext *v3;
  xmlHashTablePtr v4;

  v2 = (xmlXPathContext *)xmlMalloc(0x178uLL);
  v3 = v2;
  if (v2)
  {
    *(_QWORD *)&v2->depth = 0;
    *(_OWORD *)&v2->flags = 0u;
    *(_OWORD *)&v2->opLimit = 0u;
    *(_OWORD *)&v2->lastError.ctxt = 0u;
    *(_OWORD *)&v2->debugNode = 0u;
    *(_OWORD *)&v2->lastError.str1 = 0u;
    *(_OWORD *)&v2->lastError.str3 = 0u;
    *(_OWORD *)&v2->lastError.message = 0u;
    *(_OWORD *)&v2->lastError.file = 0u;
    *(_OWORD *)&v2->tmpNsNr = 0u;
    *(_OWORD *)&v2->error = 0u;
    *(_OWORD *)&v2->functionURI = 0u;
    *(_OWORD *)&v2->funcLookupData = 0u;
    *(_OWORD *)&v2->varLookupFunc = 0u;
    *(_OWORD *)&v2->extra = 0u;
    *(_OWORD *)&v2->xptr = 0u;
    *(_OWORD *)&v2->origin = 0u;
    *(_OWORD *)&v2->namespaces = 0u;
    *(_OWORD *)&v2->user = 0u;
    *(_OWORD *)&v2->nb_funcs_unused = 0u;
    *(_OWORD *)&v2->nb_axis = 0u;
    *(_OWORD *)&v2->nb_variables_unused = 0u;
    *(_OWORD *)&v2->nb_types = 0u;
    *(_OWORD *)&v2->doc = 0u;
    v2->doc = doc;
    v2->node = 0;
    v2->varHash = 0;
    *(_QWORD *)&v2->nb_types = 0;
    v2->types = 0;
    v4 = xmlHashCreate(0);
    v3->nsHash = 0;
    v3->user = 0;
    *(_QWORD *)&v3->nb_axis = 0;
    v3->axis = 0;
    v3->funcHash = v4;
    *(_QWORD *)&v3->contextSize = -1;
    xmlXPathRegisterAllFunctions(v3);
  }
  else
  {
    xmlXPathErrMemory(0, "creating context\n");
  }
  return v3;
}

void xmlXPathRegisterAllFunctions(xmlXPathContextPtr ctxt)
{
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"BOOLean", 0, xmlXPathBooleanFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"ceiling", 0, xmlXPathCeilingFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"count", 0, xmlXPathCountFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"concat", 0, xmlXPathConcatFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"contains", 0, xmlXPathContainsFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"id", 0, xmlXPathIdFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"false", 0, xmlXPathFalseFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"floor", 0, xmlXPathFloorFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"last", 0, xmlXPathLastFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"lang", 0, xmlXPathLangFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"local-name", 0, xmlXPathLocalNameFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"not", 0, xmlXPathNotFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"name", 0, (xmlXPathFunction)xmlXPathNameFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"namespace-uri", 0, xmlXPathNamespaceURIFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"normalize-space", 0, xmlXPathNormalizeFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"number", 0, xmlXPathNumberFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"position", 0, xmlXPathPositionFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"round", 0, xmlXPathRoundFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"string", 0, xmlXPathStringFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"string-length", 0, xmlXPathStringLengthFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"starts-with", 0, xmlXPathStartsWithFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"substring", 0, xmlXPathSubstringFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"substring-before", 0, xmlXPathSubstringBeforeFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"substring-after", 0, xmlXPathSubstringAfterFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"sum", 0, xmlXPathSumFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"true", 0, xmlXPathTrueFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"translate", 0, xmlXPathTranslateFunction);
  xmlXPathRegisterFuncNS(ctxt, (const xmlChar *)"escape-uri", (const xmlChar *)"http://www.w3.org/2002/08/xquery-functions", (xmlXPathFunction)xmlXPathEscapeUriFunction);
}

void xmlXPathFreeContext(xmlXPathContextPtr ctxt)
{
  uint64_t *cache;

  if (ctxt)
  {
    cache = (uint64_t *)ctxt->cache;
    if (cache)
      xmlXPathFreeCache(cache);
    xmlHashFree(ctxt->nsHash, xmlHashDefaultDeallocator);
    ctxt->nsHash = 0;
    xmlHashFree(ctxt->funcHash, 0);
    ctxt->funcHash = 0;
    xmlHashFree(ctxt->varHash, (xmlHashDeallocator)xmlXPathFreeObjectEntry);
    ctxt->varHash = 0;
    xmlResetError(&ctxt->lastError);
    xmlFree(ctxt);
  }
}

xmlXPathParserContextPtr xmlXPathNewParserContext(const xmlChar *str, xmlXPathContextPtr ctxt)
{
  xmlXPathParserContext *v4;
  xmlXPathParserContext *v5;
  xmlXPathCompExpr *v6;
  xmlDict *dict;

  v4 = (xmlXPathParserContext *)xmlMalloc(0x58uLL);
  v5 = v4;
  if (v4)
  {
    *(_OWORD *)&v4->cur = 0u;
    *(_OWORD *)&v4->error = 0u;
    *(_QWORD *)&v4->valueFrame = 0;
    *(_OWORD *)&v4->valueTab = 0u;
    *(_OWORD *)&v4->xptr = 0u;
    *(_OWORD *)&v4->value = 0u;
    v4->cur = str;
    v4->base = str;
    v4->context = ctxt;
    v6 = (xmlXPathCompExpr *)xmlXPathNewCompExpr();
    v5->comp = v6;
    if (v6)
    {
      if (ctxt)
      {
        dict = ctxt->dict;
        if (dict)
        {
          *((_QWORD *)v6 + 4) = dict;
          xmlDictReference(dict);
        }
      }
    }
    else
    {
      xmlFree(v5->valueTab);
      xmlFree(v5);
      return 0;
    }
  }
  else
  {
    xmlXPathErrMemory((uint64_t)ctxt, "creating parser context\n");
  }
  return v5;
}

_OWORD *xmlXPathNewCompExpr()
{
  _OWORD *v0;
  _OWORD *v1;
  void *v2;

  v0 = xmlMalloc(0x30uLL);
  v1 = v0;
  if (v0)
  {
    v0[1] = 0u;
    v0[2] = 0u;
    *v0 = 0u;
    *(_QWORD *)v0 = 0xA00000000;
    v2 = xmlMalloc(0x230uLL);
    *((_QWORD *)v1 + 1) = v2;
    if (v2)
    {
      bzero(v2, 56 * *((int *)v1 + 1));
      *((_DWORD *)v1 + 4) = -1;
    }
    else
    {
      xmlXPathErrMemory(0, "allocating steps\n");
      xmlFree(v1);
      return 0;
    }
  }
  else
  {
    xmlXPathErrMemory(0, "allocating component\n");
  }
  return v1;
}

void xmlXPathFreeParserContext(xmlXPathParserContextPtr ctxt)
{
  xmlXPathObjectPtr *valueTab;
  uint64_t v3;
  xmlXPathContextPtr context;
  xmlXPathObjectPtr *v5;
  xmlXPathCompExprPtr comp;

  valueTab = ctxt->valueTab;
  if (valueTab)
  {
    if (ctxt->valueNr >= 1)
    {
      v3 = 0;
      do
      {
        context = ctxt->context;
        v5 = ctxt->valueTab;
        if (context)
          xmlXPathReleaseObject((uint64_t)context, v5[v3]);
        else
          xmlXPathFreeObject(v5[v3]);
        ++v3;
      }
      while (v3 < ctxt->valueNr);
      valueTab = ctxt->valueTab;
    }
    xmlFree(valueTab);
  }
  comp = ctxt->comp;
  if (comp)
  {
    if (*((_QWORD *)comp + 5))
    {
      xmlFreePatternList(*((xmlPatternPtr *)comp + 5));
      comp = ctxt->comp;
      *((_QWORD *)comp + 5) = 0;
    }
    xmlXPathFreeCompExpr(comp);
  }
  xmlFree(ctxt);
}

int xmlXPathEqualValues(xmlXPathParserContextPtr ctxt)
{
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v5;
  xmlXPathContextPtr context;
  xmlXPathObject *v7;
  _BOOL4 v8;
  xmlXPathObject *v10;
  uint64_t v11;
  xmlXPathObjectPtr *v12;
  BOOL v13;
  xmlXPathObjectType type;
  xmlXPathObjectType v15;
  int v16;
  xmlXPathObject *v17;
  xmlXPathObject *v18;
  xmlGenericErrorFunc v19;
  void **v20;
  int v21;
  _DWORD *p_nodeNr;

  if (!ctxt || !ctxt->context)
    return 0;
  valueNr = ctxt->valueNr;
  v3 = valueNr - 1;
  if (valueNr < 1)
  {
    v5 = 0;
    goto LABEL_7;
  }
  ctxt->valueNr = v3;
  valueTab = ctxt->valueTab;
  if (valueNr == 1)
  {
    ctxt->value = 0;
    v5 = valueTab[v3];
    valueTab[v3] = 0;
LABEL_7:
    context = ctxt->context;
LABEL_8:
    v7 = v5;
LABEL_9:
    xmlXPathReleaseObject((uint64_t)context, v7);
    xmlXPathErr(ctxt, 10);
    return 0;
  }
  v10 = 0;
  v11 = (valueNr - 2);
  ctxt->value = valueTab[v11];
  v5 = valueTab[v3];
  valueTab[v3] = 0;
  ctxt->valueNr = v11;
  v12 = ctxt->valueTab;
  if (valueNr != 2)
    v10 = v12[valueNr - 3];
  ctxt->value = v10;
  v7 = v12[v11];
  v12[v11] = 0;
  if (v7)
    v13 = v5 == 0;
  else
    v13 = 1;
  if (v13)
  {
    context = ctxt->context;
    if (v7)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v7 == v5)
  {
    xmlXPathFreeObject(v5);
    return 1;
  }
  type = v5->type;
  if ((v5->type | 8) == 9)
  {
    v15 = v7->type;
LABEL_26:
    v16 = v15 | 8;
    if ((v15 | 8) != 9)
      type = v15;
    if (v16 == 9)
      v17 = v7;
    else
      v17 = v5;
    if (v16 == 9)
      v18 = v5;
    else
      v18 = v7;
    switch(type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        v21 = xmlXPathEqualNodeSets((uint64_t)v17, (uint64_t)v18, 0);
        goto LABEL_44;
      case XPATH_BOOLEAN:
        p_nodeNr = &v17->nodesetval->nodeNr;
        if (p_nodeNr)
          LODWORD(p_nodeNr) = *p_nodeNr != 0;
        v8 = (_DWORD)p_nodeNr == v18->BOOLval;
        goto LABEL_45;
      case XPATH_NUMBER:
        v21 = xmlXPathEqualNodeSetFloat((uint64_t)ctxt, (uint64_t)v17, 0, v18->floatval);
        goto LABEL_44;
      case XPATH_STRING:
        v21 = xmlXPathEqualNodeSetString((uint64_t)v17, v18->stringval, 0);
LABEL_44:
        v8 = v21;
        goto LABEL_45;
      case XPATH_POINT:
      case XPATH_RANGE:
      case XPATH_LOCATIONSET:
      case XPATH_USERS:
        v19 = *__xmlGenericError();
        v20 = __xmlGenericErrorContext();
        v19(*v20, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 7158);
        goto LABEL_36;
      default:
LABEL_36:
        v8 = 0;
LABEL_45:
        xmlXPathReleaseObject((uint64_t)ctxt->context, v17);
        xmlXPathReleaseObject((uint64_t)ctxt->context, v18);
        break;
    }
    return v8;
  }
  v15 = v7->type;
  if ((v7->type | 8) == 9)
    goto LABEL_26;
  return xmlXPathEqualValuesCommon(ctxt, v7, v5);
}

uint64_t xmlXPathEqualNodeSets(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int *v3;
  unsigned int *v4;
  uint64_t v5;
  BOOL v6;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  xmlChar *Content;
  xmlChar *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  xmlFreeFunc v26;
  uint64_t v28;
  void *v29;
  int v30;
  uint64_t v31;
  void *v32;

  if ((*(_DWORD *)a1 | 8) != 9)
    return 0;
  if ((*(_DWORD *)a2 | 8) != 9)
    return 0;
  v3 = *(unsigned int **)(a1 + 8);
  if (!v3)
    return 0;
  v4 = *(unsigned int **)(a2 + 8);
  v5 = *v3;
  v6 = (int)v5 < 1 || v4 == 0;
  if (v6 || (int)*v4 < 1)
    return 0;
  if (!a3)
  {
    v23 = 0;
    do
    {
      v24 = *v4;
      v25 = (_QWORD *)*((_QWORD *)v4 + 1);
      do
      {
        if (*(_QWORD *)(*((_QWORD *)v3 + 1) + 8 * v23) == *v25)
          return 1;
        ++v25;
        --v24;
      }
      while (v24);
      ++v23;
    }
    while (v23 != v5);
  }
  v8 = xmlMalloc(8 * (int)v5);
  if (!v8)
  {
    xmlXPathErrMemory(0, "comparing nodesets\n");
    return 0;
  }
  v9 = v8;
  v10 = xmlMalloc(4 * (int)*v3);
  if (!v10)
  {
    xmlXPathErrMemory(0, "comparing nodesets\n");
    v26 = xmlFree;
LABEL_42:
    ((void (*)(void *))v26)(v9);
    return 0;
  }
  v11 = v10;
  bzero(v9, 8 * (int)*v3);
  v12 = xmlMalloc(8 * (int)*v4);
  if (!v12)
  {
    xmlXPathErrMemory(0, "comparing nodesets\n");
    xmlFree(v11);
    v26 = xmlFree;
    goto LABEL_42;
  }
  v13 = v12;
  v14 = xmlMalloc(4 * (int)*v4);
  if (!v14)
  {
    xmlXPathErrMemory(0, "comparing nodesets\n");
    xmlFree(v11);
    xmlFree(v9);
    ((void (*)(void *))xmlFree)(v13);
    return 0;
  }
  v15 = v14;
  bzero(v13, 8 * (int)*v4);
  if ((int)*v3 < 1)
  {
    v21 = 0;
    goto LABEL_54;
  }
  v16 = 0;
  while (1)
  {
    *((_DWORD *)v11 + v16) = xmlXPathNodeValHash(*(xmlDoc **)(*((_QWORD *)v3 + 1) + 8 * v16));
    if ((int)*v4 >= 1)
      break;
LABEL_30:
    ++v16;
    v22 = (int)*v3;
    if (v16 >= v22)
    {
      v21 = 0;
      goto LABEL_49;
    }
  }
  v17 = 0;
  while (1)
  {
    if (v16)
    {
      v18 = v15[v17];
    }
    else
    {
      v18 = xmlXPathNodeValHash(*(xmlDoc **)(*((_QWORD *)v4 + 1) + 8 * v17));
      v15[v17] = v18;
    }
    if (*((_DWORD *)v11 + v16) != v18)
      break;
    Content = (xmlChar *)*((_QWORD *)v9 + v16);
    if (!Content)
    {
      Content = xmlNodeGetContent(*(const xmlNode **)(*((_QWORD *)v3 + 1) + 8 * v16));
      *((_QWORD *)v9 + v16) = Content;
    }
    v20 = (xmlChar *)*((_QWORD *)v13 + v17);
    if (!v20)
    {
      v20 = xmlNodeGetContent(*(const xmlNode **)(*((_QWORD *)v4 + 1) + 8 * v17));
      *((_QWORD *)v13 + v17) = v20;
      Content = (xmlChar *)*((_QWORD *)v9 + v16);
    }
    v21 = xmlStrEqual(Content, v20) ^ a3;
    if ((_DWORD)v21)
      goto LABEL_48;
LABEL_29:
    if (++v17 >= (int)*v4)
      goto LABEL_30;
  }
  if (!a3)
    goto LABEL_29;
  v21 = 1;
LABEL_48:
  LODWORD(v22) = *v3;
LABEL_49:
  if ((int)v22 >= 1)
  {
    v28 = 0;
    do
    {
      v29 = (void *)*((_QWORD *)v9 + v28);
      if (v29)
      {
        xmlFree(v29);
        LODWORD(v22) = *v3;
      }
      ++v28;
    }
    while (v28 < (int)v22);
  }
LABEL_54:
  v30 = *v4;
  if ((int)*v4 >= 1)
  {
    v31 = 0;
    do
    {
      v32 = (void *)*((_QWORD *)v13 + v31);
      if (v32)
      {
        xmlFree(v32);
        v30 = *v4;
      }
      ++v31;
    }
    while (v31 < v30);
  }
  xmlFree(v9);
  xmlFree(v13);
  xmlFree(v11);
  xmlFree(v15);
  return v21;
}

uint64_t xmlXPathEqualNodeSetFloat(uint64_t a1, uint64_t a2, int a3, double a4)
{
  int *v4;
  uint64_t v8;
  uint64_t v9;
  xmlChar *Content;
  xmlXPathObject *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  xmlXPathObject *v16;
  double floatval;
  BOOL v18;

  if ((*(_DWORD *)a2 | 8) != 9)
    return 0;
  v4 = *(int **)(a2 + 8);
  if (!v4 || *v4 < 1)
    return 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    Content = xmlNodeGetContent(*(const xmlNode **)(*((_QWORD *)v4 + 1) + 8 * v8));
    if (Content || (Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A)) != 0)
    {
      v11 = xmlXPathCacheNewString(*(_QWORD *)(a1 + 24), Content);
      valuePush((xmlXPathParserContextPtr)a1, v11);
      xmlFree(Content);
      xmlXPathNumberFunction((xmlXPathParserContextPtr)a1, 1);
      v12 = *(_DWORD *)(a1 + 40);
      v13 = *(_QWORD *)(a1 + 48);
      v14 = v12 - 1;
      *(_DWORD *)(a1 + 40) = v12 - 1;
      v15 = v12 == 1 ? 0 : *(_QWORD *)(v13 + 8 * (v12 - 2));
      *(_QWORD *)(a1 + 32) = v15;
      v16 = *(xmlXPathObject **)(v13 + 8 * v14);
      *(_QWORD *)(v13 + 8 * v14) = 0;
      floatval = v16->floatval;
      xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v16);
      v18 = floatval != a4;
      if (a3)
        v18 = floatval == a4;
      if (!v18)
        break;
    }
    if (++v8 >= *v4)
      return v9;
  }
  return 1;
}

uint64_t xmlXPathEqualNodeSetString(uint64_t a1, const xmlChar *a2, int a3)
{
  int *v3;
  int v6;
  uint64_t v8;
  xmlChar *Content;
  xmlChar *v10;
  int v11;

  if (!a2)
    return 0;
  if ((*(_DWORD *)a1 | 8) != 9)
    return 0;
  v3 = *(int **)(a1 + 8);
  if (!v3 || *v3 < 1)
    return 0;
  if (*a2)
    v6 = *a2 | (a2[1] << 8);
  else
    v6 = 0;
  v8 = 0;
  while (xmlXPathNodeValHash(*(xmlDoc **)(*((_QWORD *)v3 + 1) + 8 * v8)) == v6)
  {
    Content = xmlNodeGetContent(*(const xmlNode **)(*((_QWORD *)v3 + 1) + 8 * v8));
    if (Content)
    {
      v10 = Content;
      v11 = xmlStrEqual(a2, Content);
      xmlFree(v10);
      if (!v11)
        break;
    }
    else if (!xmlStrEqual(a2, (const xmlChar *)&byte_1B0865C1A))
    {
      break;
    }
    if (!a3)
      return 1;
LABEL_17:
    if (++v8 >= *v3)
      return 0;
  }
  if (!a3)
    goto LABEL_17;
  return 1;
}

uint64_t xmlXPathEqualValuesCommon(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr obj, xmlXPathObjectPtr value)
{
  xmlXPathObjectPtr v3;
  xmlXPathObjectPtr v4;
  xmlGenericErrorFunc v6;
  void *v7;
  uint64_t v8;
  xmlGenericErrorFunc v10;
  void *v11;
  xmlGenericErrorFunc v12;
  void *v13;
  xmlGenericErrorFunc v14;
  void *v15;
  int BOOLval;
  int v17;
  double floatval;
  xmlChar *stringval;
  int v20;
  BOOL v21;
  int valueNr;
  unsigned int v23;
  xmlXPathObjectPtr *valueTab;
  int v25;
  xmlXPathObject *v26;
  xmlXPathObject *v27;
  double v28;
  double v29;
  double v30;
  int v31;
  double v32;
  double v33;
  int v34;

  v3 = value;
  v4 = obj;
  switch(obj->type)
  {
    case XPATH_BOOLEAN:
      switch(value->type)
      {
        case XPATH_BOOLEAN:
          BOOLval = obj->BOOLval;
          v17 = value->BOOLval;
          goto LABEL_19;
        case XPATH_NUMBER:
          BOOLval = obj->BOOLval;
          floatval = value->floatval;
          goto LABEL_17;
        case XPATH_STRING:
          stringval = value->stringval;
          if (stringval)
            LODWORD(stringval) = *stringval != 0;
          v20 = obj->BOOLval;
          goto LABEL_28;
        case XPATH_POINT:
        case XPATH_RANGE:
        case XPATH_LOCATIONSET:
        case XPATH_USERS:
          v10 = *__xmlGenericError();
          v11 = *__xmlGenericErrorContext();
          v10(v11, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 6936);
          goto LABEL_3;
        default:
          goto LABEL_3;
      }
    case XPATH_NUMBER:
      switch(value->type)
      {
        case XPATH_BOOLEAN:
          BOOLval = value->BOOLval;
          floatval = obj->floatval;
LABEL_17:
          v17 = floatval < 0.0;
          if (floatval > 0.0)
            v17 = 1;
LABEL_19:
          v21 = BOOLval == v17;
          goto LABEL_50;
        case XPATH_NUMBER:
          goto LABEL_40;
        case XPATH_STRING:
          valuePush(ctxt, value);
          xmlXPathNumberFunction(ctxt, 1);
          if (!ctxt || (valueNr = ctxt->valueNr, v23 = valueNr - 1, valueNr < 1))
          {
            v3 = 0;
            goto LABEL_40;
          }
          ctxt->valueNr = v23;
          valueTab = ctxt->valueTab;
          if (valueNr == 1)
            v26 = 0;
          else
            v26 = valueTab[valueNr - 2];
          ctxt->value = v26;
          v3 = valueTab[v23];
          break;
        case XPATH_POINT:
        case XPATH_RANGE:
        case XPATH_LOCATIONSET:
        case XPATH_USERS:
          v12 = *__xmlGenericError();
          v13 = *__xmlGenericErrorContext();
          v12(v13, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 6995);
          goto LABEL_3;
        default:
          goto LABEL_3;
      }
      goto LABEL_39;
    case XPATH_STRING:
      switch(value->type)
      {
        case XPATH_BOOLEAN:
          stringval = obj->stringval;
          if (stringval)
            LODWORD(stringval) = *stringval != 0;
          v20 = value->BOOLval;
LABEL_28:
          v21 = v20 == (_DWORD)stringval;
          goto LABEL_50;
        case XPATH_NUMBER:
          valuePush(ctxt, obj);
          xmlXPathNumberFunction(ctxt, 1);
          if (!ctxt || (v25 = ctxt->valueNr, v23 = v25 - 1, v25 < 1))
          {
            v4 = 0;
            goto LABEL_40;
          }
          ctxt->valueNr = v23;
          valueTab = ctxt->valueTab;
          if (v25 == 1)
            v27 = 0;
          else
            v27 = valueTab[v25 - 2];
          ctxt->value = v27;
          v4 = valueTab[v23];
          break;
        case XPATH_STRING:
          v8 = xmlStrEqual(obj->stringval, value->stringval);
          goto LABEL_4;
        case XPATH_POINT:
        case XPATH_RANGE:
        case XPATH_LOCATIONSET:
        case XPATH_USERS:
          v14 = *__xmlGenericError();
          v15 = *__xmlGenericErrorContext();
          v14(v15, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 7058);
          goto LABEL_3;
        default:
          goto LABEL_3;
      }
LABEL_39:
      valueTab[v23] = 0;
LABEL_40:
      v28 = v4->floatval;
      v29 = v3->floatval;
      v30 = fabs(v28);
      if (v28 > 0.0)
        v31 = 1;
      else
        v31 = -1;
      if (v30 != INFINITY)
        v31 = 0;
      if (v31 == -1)
      {
        v32 = -INFINITY;
        goto LABEL_49;
      }
      if (v31 == 1)
      {
        v32 = INFINITY;
LABEL_49:
        v21 = v29 == v32;
        goto LABEL_50;
      }
      v33 = fabs(v29);
      if (v29 > 0.0)
        v34 = 1;
      else
        v34 = -1;
      if (v33 != INFINITY)
        v34 = 0;
      if (v34 == -1 || v34 == 1)
      {
LABEL_3:
        v8 = 0;
        goto LABEL_4;
      }
      v21 = v28 == v29;
LABEL_50:
      v8 = v21;
LABEL_4:
      xmlXPathReleaseObject((uint64_t)ctxt->context, v4);
      xmlXPathReleaseObject((uint64_t)ctxt->context, v3);
      return v8;
    case XPATH_POINT:
    case XPATH_RANGE:
    case XPATH_LOCATIONSET:
    case XPATH_USERS:
      v6 = *__xmlGenericError();
      v7 = *__xmlGenericErrorContext();
      v6(v7, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 7071);
      goto LABEL_3;
    default:
      goto LABEL_3;
  }
}

int xmlXPathNotEqualValues(xmlXPathParserContextPtr ctxt)
{
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v5;
  xmlXPathContextPtr context;
  xmlXPathObject *v7;
  _BOOL4 v8;
  xmlXPathObject *v10;
  uint64_t v11;
  xmlXPathObjectPtr *v12;
  BOOL v13;
  xmlXPathObjectType type;
  xmlXPathObjectType v15;
  int v16;
  xmlXPathObject *v17;
  xmlXPathObject *v18;
  xmlGenericErrorFunc v19;
  void **v20;
  int v21;
  _DWORD *p_nodeNr;

  if (!ctxt || !ctxt->context)
    return 0;
  valueNr = ctxt->valueNr;
  v3 = valueNr - 1;
  if (valueNr < 1)
  {
    v5 = 0;
    goto LABEL_7;
  }
  ctxt->valueNr = v3;
  valueTab = ctxt->valueTab;
  if (valueNr == 1)
  {
    ctxt->value = 0;
    v5 = valueTab[v3];
    valueTab[v3] = 0;
LABEL_7:
    context = ctxt->context;
LABEL_8:
    v7 = v5;
LABEL_9:
    xmlXPathReleaseObject((uint64_t)context, v7);
    xmlXPathErr(ctxt, 10);
    return 0;
  }
  v10 = 0;
  v11 = (valueNr - 2);
  ctxt->value = valueTab[v11];
  v5 = valueTab[v3];
  valueTab[v3] = 0;
  ctxt->valueNr = v11;
  v12 = ctxt->valueTab;
  if (valueNr != 2)
    v10 = v12[valueNr - 3];
  ctxt->value = v10;
  v7 = v12[v11];
  v12[v11] = 0;
  if (v7)
    v13 = v5 == 0;
  else
    v13 = 1;
  if (v13)
  {
    context = ctxt->context;
    if (v7)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (v7 == v5)
  {
    xmlXPathReleaseObject((uint64_t)ctxt->context, v5);
    return 0;
  }
  type = v5->type;
  if ((v5->type | 8) == 9)
  {
    v15 = v7->type;
  }
  else
  {
    v15 = v7->type;
    if ((v7->type | 8) != 9)
      return xmlXPathEqualValuesCommon(ctxt, v7, v5) == 0;
  }
  v16 = v15 | 8;
  if ((v15 | 8) != 9)
    type = v15;
  if (v16 == 9)
    v17 = v7;
  else
    v17 = v5;
  if (v16 == 9)
    v18 = v5;
  else
    v18 = v7;
  switch(type)
  {
    case XPATH_NODESET:
    case XPATH_XSLT_TREE:
      v21 = xmlXPathEqualNodeSets((uint64_t)v17, (uint64_t)v18, 1u);
      goto LABEL_44;
    case XPATH_BOOLEAN:
      p_nodeNr = &v17->nodesetval->nodeNr;
      if (p_nodeNr)
        LODWORD(p_nodeNr) = *p_nodeNr != 0;
      v8 = (_DWORD)p_nodeNr != v18->BOOLval;
      goto LABEL_45;
    case XPATH_NUMBER:
      v21 = xmlXPathEqualNodeSetFloat((uint64_t)ctxt, (uint64_t)v17, 1, v18->floatval);
      goto LABEL_44;
    case XPATH_STRING:
      v21 = xmlXPathEqualNodeSetString((uint64_t)v17, v18->stringval, 1);
LABEL_44:
      v8 = v21;
      goto LABEL_45;
    case XPATH_POINT:
    case XPATH_RANGE:
    case XPATH_LOCATIONSET:
    case XPATH_USERS:
      v19 = *__xmlGenericError();
      v20 = __xmlGenericErrorContext();
      v19(*v20, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 7245);
      goto LABEL_36;
    default:
LABEL_36:
      v8 = 0;
LABEL_45:
      xmlXPathReleaseObject((uint64_t)ctxt->context, v17);
      xmlXPathReleaseObject((uint64_t)ctxt->context, v18);
      break;
  }
  return v8;
}

int xmlXPathCompareValues(xmlXPathParserContextPtr ctxt, int inf, int strict)
{
  int valueNr;
  unsigned int v5;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v7;
  xmlXPathContextPtr context;
  xmlXPathObject *v9;
  int v10;
  int v13;
  xmlXPathObject *v14;
  uint64_t v15;
  xmlXPathObjectPtr *v16;
  xmlXPathObject *v17;
  BOOL v18;
  xmlXPathObjectType type;
  xmlXPathObjectType v20;
  xmlXPathObject *v21;
  xmlXPathObject *v22;
  int v23;
  unsigned int v24;
  xmlXPathObjectPtr *v25;
  xmlXPathObject *v26;
  int v27;
  xmlXPathObjectPtr *v28;
  int v29;
  xmlXPathObject *v30;
  double floatval;
  double v32;
  double v33;
  int v34;
  double v35;
  int v36;
  BOOL v37;
  BOOL v38;
  _BOOL4 v40;
  BOOL v41;
  _BOOL4 v42;
  BOOL v45;

  if (!ctxt || !ctxt->context)
    return 0;
  valueNr = ctxt->valueNr;
  v5 = valueNr - 1;
  if (valueNr < 1)
  {
    v7 = 0;
    goto LABEL_7;
  }
  ctxt->valueNr = v5;
  valueTab = ctxt->valueTab;
  if (valueNr == 1)
  {
    ctxt->value = 0;
    v7 = valueTab[v5];
    valueTab[v5] = 0;
LABEL_7:
    context = ctxt->context;
    goto LABEL_8;
  }
  v13 = inf;
  v14 = 0;
  v15 = (valueNr - 2);
  ctxt->value = valueTab[v15];
  v7 = valueTab[v5];
  valueTab[v5] = 0;
  ctxt->valueNr = v15;
  v16 = ctxt->valueTab;
  if (valueNr != 2)
    v14 = v16[valueNr - 3];
  ctxt->value = v14;
  v17 = v16[v15];
  v16[v15] = 0;
  if (v17)
    v18 = v7 == 0;
  else
    v18 = 1;
  if (v18)
  {
    context = ctxt->context;
    if (v17)
    {
      v9 = v17;
      goto LABEL_9;
    }
LABEL_8:
    v9 = v7;
LABEL_9:
    xmlXPathReleaseObject((uint64_t)context, v9);
LABEL_10:
    xmlXPathErr(ctxt, 10);
    return 0;
  }
  type = v7->type;
  if ((v7->type | 8) != 9)
  {
    v20 = v17->type;
    if (v17->type == XPATH_XSLT_TREE)
      goto LABEL_28;
    if (v20 != XPATH_NUMBER)
    {
      if (v20 == XPATH_NODESET)
      {
LABEL_28:
        if (type != XPATH_NODESET)
          goto LABEL_29;
        goto LABEL_23;
      }
      valuePush(ctxt, v17);
      xmlXPathNumberFunction(ctxt, 1);
      v23 = ctxt->valueNr;
      v24 = v23 - 1;
      if (v23 < 1)
      {
        v17 = 0;
      }
      else
      {
        ctxt->valueNr = v24;
        v25 = ctxt->valueTab;
        if (v23 == 1)
          v26 = 0;
        else
          v26 = v25[v23 - 2];
        ctxt->value = v26;
        v17 = v25[v24];
        v25[v24] = 0;
      }
      if (v17->type != XPATH_NUMBER)
      {
        xmlXPathFreeObject(v17);
        xmlXPathFreeObject(v7);
        goto LABEL_10;
      }
      type = v7->type;
    }
    if (type != XPATH_NUMBER)
    {
      valuePush(ctxt, v7);
      xmlXPathNumberFunction(ctxt, 1);
      v27 = ctxt->valueNr;
      v28 = ctxt->valueTab;
      v29 = v27 - 1;
      ctxt->valueNr = v27 - 1;
      v30 = v27 == 1 ? 0 : v28[v27 - 2];
      ctxt->value = v30;
      v7 = v28[v29];
      v28[v29] = 0;
      if (v7->type != XPATH_NUMBER)
      {
        xmlXPathReleaseObject((uint64_t)ctxt->context, v17);
        goto LABEL_7;
      }
    }
    floatval = v17->floatval;
    v32 = v7->floatval;
    v33 = fabs(floatval);
    if (floatval > 0.0)
      v34 = 1;
    else
      v34 = -1;
    if (v33 != INFINITY)
      v34 = 0;
    v35 = fabs(v32);
    if (v32 > 0.0)
      v36 = 1;
    else
      v36 = -1;
    if (v35 != INFINITY)
      v36 = 0;
    if (v13 && strict)
    {
      v37 = v32 > 0.0;
      if (v35 != INFINITY)
        v37 = 1;
      if (v34 != -1 || !v37)
      {
        v38 = v32 <= 0.0 || v34 == 1;
        if (v38 || v35 != INFINITY)
        {
          v40 = floatval < v32;
LABEL_71:
          if (v35 == INFINITY)
            v40 = 0;
          v10 = v33 != INFINITY && v40;
          goto LABEL_117;
        }
      }
    }
    else
    {
      if (v13 && !strict)
      {
        v41 = v32 > 0.0;
        if (v35 != INFINITY)
          v41 = 0;
        v10 = 1;
        if (v34 != -1)
        {
          v42 = floatval <= v32;
          if (v35 == INFINITY)
            v42 = 0;
          if (v33 == INFINITY)
            v42 = 0;
          v10 = v41 || v42;
        }
        goto LABEL_117;
      }
      if (v13 || !strict)
      {
        if (strict | v13)
        {
          v10 = 0;
LABEL_117:
          xmlXPathReleaseObject((uint64_t)ctxt->context, v17);
          xmlXPathReleaseObject((uint64_t)ctxt->context, v7);
          return v10;
        }
        if ((v33 != INFINITY || floatval <= 0.0) && v36 != -1)
        {
          v40 = floatval >= v32;
          goto LABEL_71;
        }
      }
      else if (floatval <= 0.0 || v36 == 1 || v33 != INFINITY)
      {
        v45 = v33 == INFINITY && floatval <= 0.0;
        if (v45 || v36 != -1)
        {
          v40 = floatval > v32;
          goto LABEL_71;
        }
      }
    }
    v10 = 1;
    goto LABEL_117;
  }
LABEL_23:
  v20 = v17->type;
  if ((v17->type | 8) == 9)
    return xmlXPathCompareNodeSets(inf, strict, v17, v7);
LABEL_29:
  if ((v20 | 8) == 9)
  {
    v21 = v17;
    v22 = v7;
  }
  else
  {
    inf = inf == 0;
    v21 = v7;
    v22 = v17;
  }
  return xmlXPathCompareNodeSetValue(ctxt, inf, strict, v21, v22);
}

uint64_t xmlXPathCompareNodeSets(int a1, int a2, xmlXPathObjectPtr obj, xmlXPathObjectPtr a4)
{
  xmlNodeSetPtr nodesetval;
  xmlNodeSetPtr v7;
  uint64_t nodeNr;
  double *v11;
  double *v12;
  uint64_t v13;
  int v14;
  _BOOL4 v15;
  _BOOL4 v16;
  _BOOL4 v17;
  int v18;
  double v19;
  double v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  _BOOL4 v25;
  _BOOL4 v26;

  if ((obj->type | 8) != 9)
    goto LABEL_41;
  if ((a4->type | 8) != 9
    || (nodesetval = obj->nodesetval) == 0
    || nodesetval->nodeNr <= 0
    || (v7 = a4->nodesetval) == 0
    || (nodeNr = v7->nodeNr, (int)nodeNr <= 0))
  {
LABEL_40:
    xmlXPathFreeObject(obj);
LABEL_41:
    xmlXPathFreeObject(a4);
    return 0;
  }
  v11 = (double *)xmlMalloc(8 * nodeNr);
  if (!v11)
  {
    xmlXPathErrMemory(0, "comparing nodesets\n");
    goto LABEL_40;
  }
  v12 = v11;
  if (nodesetval->nodeNr < 1)
  {
LABEL_38:
    v23 = 0;
    goto LABEL_44;
  }
  v13 = 0;
  v14 = 0;
  if (a2)
    v15 = a1 != 0;
  else
    v15 = 0;
  if (a2)
    v16 = 1;
  else
    v16 = a1 == 0;
  if (a2)
    v17 = a1 == 0;
  else
    v17 = 0;
  v25 = v17;
  v26 = v16;
  v18 = a2 | a1;
  while (1)
  {
    v19 = xmlXPathCastNodeToNumber(nodesetval->nodeTab[v13]);
    if (v7->nodeNr >= 1)
      break;
LABEL_37:
    v14 = 1;
    if (++v13 >= nodesetval->nodeNr)
      goto LABEL_38;
  }
  v20 = v19;
  v21 = 0;
  while (1)
  {
    if (v14)
    {
      v22 = v12[v21];
    }
    else
    {
      v22 = xmlXPathCastNodeToNumber(v7->nodeTab[v21]);
      v12[v21] = v22;
    }
    if (v15)
    {
      if (v20 < v22)
        goto LABEL_43;
      goto LABEL_32;
    }
    if (v26)
      break;
    if (v20 <= v22)
      goto LABEL_43;
LABEL_32:
    if (++v21 >= v7->nodeNr)
      goto LABEL_37;
  }
  if (v25)
  {
    if (v20 > v22)
      goto LABEL_43;
    goto LABEL_32;
  }
  if (v18 || v20 < v22)
    goto LABEL_32;
LABEL_43:
  v23 = 1;
LABEL_44:
  xmlFree(v12);
  xmlXPathFreeObject(obj);
  xmlXPathFreeObject(a4);
  return v23;
}

uint64_t xmlXPathCompareNodeSetValue(xmlXPathParserContextPtr ctxt, int a2, int a3, xmlXPathObjectPtr obj, xmlXPathObjectPtr a5)
{
  xmlXPathObjectType type;
  xmlNodeSetPtr nodesetval;
  uint64_t v13;
  xmlChar *v14;
  xmlXPathObject *v15;
  xmlXPathObject *v16;
  uint64_t v17;
  xmlNodeSetPtr v18;
  uint64_t v19;
  xmlChar *Content;
  xmlXPathObject *v21;
  xmlXPathObject *v22;
  uint64_t v23;
  xmlGenericErrorFunc v24;
  void **v25;

  type = obj->type;
  if ((obj->type | 8) != 9)
    return 0;
  switch(a5->type)
  {
    case XPATH_NODESET:
    case XPATH_XSLT_TREE:
      return xmlXPathCompareNodeSets(a2, a3, obj, a5);
    case XPATH_BOOLEAN:
      valuePush(ctxt, obj);
      xmlXPathBooleanFunction(ctxt, 1);
      valuePush(ctxt, a5);
      return xmlXPathCompareValues(ctxt, a2, a3);
    case XPATH_NUMBER:
      if ((type | 8) != 9)
        goto LABEL_25;
      nodesetval = obj->nodesetval;
      if (!nodesetval || nodesetval->nodeNr < 1)
        goto LABEL_22;
      v13 = 0;
      break;
    case XPATH_STRING:
      if ((type | 8) != 9)
      {
LABEL_25:
        xmlXPathReleaseObject((uint64_t)ctxt->context, obj);
        xmlXPathReleaseObject((uint64_t)ctxt->context, a5);
        return 0;
      }
      v18 = obj->nodesetval;
      if (!v18 || v18->nodeNr < 1)
        goto LABEL_22;
      v19 = 0;
      while (1)
      {
        Content = xmlNodeGetContent(v18->nodeTab[v19]);
        if (Content || (Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A)) != 0)
        {
          v21 = xmlXPathCacheNewString((uint64_t)ctxt->context, Content);
          valuePush(ctxt, v21);
          xmlFree(Content);
          v22 = xmlXPathCacheObjectCopy((uint64_t)ctxt->context, a5);
          valuePush(ctxt, v22);
          v17 = xmlXPathCompareValues(ctxt, a2, a3);
          if ((_DWORD)v17)
            goto LABEL_28;
        }
        if (++v19 >= v18->nodeNr)
          goto LABEL_22;
      }
    default:
      v24 = *__xmlGenericError();
      v25 = __xmlGenericErrorContext();
      v24(*v25, "xmlXPathCompareNodeSetValue: Can't compare node set and object of type %d\n", a5->type);
      xmlXPathReleaseObject((uint64_t)ctxt->context, obj);
      xmlXPathReleaseObject((uint64_t)ctxt->context, a5);
      xmlXPathErr(ctxt, 11);
      return 0;
  }
  while (1)
  {
    v14 = xmlNodeGetContent(nodesetval->nodeTab[v13]);
    if (v14 || (v14 = xmlStrdup((const xmlChar *)&byte_1B0865C1A)) != 0)
    {
      v15 = xmlXPathCacheNewString((uint64_t)ctxt->context, v14);
      valuePush(ctxt, v15);
      xmlFree(v14);
      xmlXPathNumberFunction(ctxt, 1);
      v16 = xmlXPathCacheObjectCopy((uint64_t)ctxt->context, a5);
      valuePush(ctxt, v16);
      v17 = xmlXPathCompareValues(ctxt, a2, a3);
      if ((_DWORD)v17)
        break;
    }
    if (++v13 >= nodesetval->nodeNr)
    {
LABEL_22:
      v23 = 0;
      goto LABEL_23;
    }
  }
LABEL_28:
  v23 = v17;
LABEL_23:
  xmlXPathReleaseObject((uint64_t)ctxt->context, obj);
  xmlXPathReleaseObject((uint64_t)ctxt->context, a5);
  return v23;
}

void xmlXPathNumberFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathContextPtr v3;
  xmlChar *Content;
  double v5;
  xmlXPathObject *v6;
  int valueNr;
  xmlXPathObjectPtr *valueTab;
  int v9;
  xmlXPathObject *v10;
  int v11;
  xmlXPathObject *v12;
  xmlXPathParserContext *v13;
  xmlXPathObject *v14;
  xmlXPathContextPtr context;
  double v16;
  xmlXPathObjectPtr v17;

  if (ctxt)
  {
    if (nargs == 1)
    {
      valueNr = ctxt->valueNr;
      if (valueNr > 0)
      {
        valueTab = ctxt->valueTab;
        v9 = valueNr - 1;
        ctxt->valueNr = valueNr - 1;
        if (valueNr == 1)
          v10 = 0;
        else
          v10 = valueTab[valueNr - 2];
        ctxt->value = v10;
        v14 = valueTab[v9];
        valueTab[v9] = 0;
        context = ctxt->context;
        if (v14)
        {
          if (v14->type != XPATH_NUMBER)
          {
            v16 = xmlXPathCastToNumber(v14);
            v17 = xmlXPathCacheNewFloat(v16, (uint64_t)context);
            xmlXPathReleaseObject((uint64_t)context, v14);
            v14 = v17;
          }
        }
        else
        {
          v14 = xmlXPathCacheNewFloat(0.0, (uint64_t)ctxt->context);
        }
        v13 = ctxt;
        v12 = v14;
LABEL_20:
        valuePush(v13, v12);
        return;
      }
      v11 = 23;
    }
    else
    {
      if (!nargs)
      {
        v3 = ctxt->context;
        if (v3->node)
        {
          Content = xmlNodeGetContent(v3->node);
          v5 = xmlXPathStringEvalNumber(Content);
          v6 = xmlXPathCacheNewFloat(v5, (uint64_t)ctxt->context);
          valuePush(ctxt, v6);
          xmlFree(Content);
          return;
        }
        v12 = xmlXPathCacheNewFloat(0.0, (uint64_t)v3);
        v13 = ctxt;
        goto LABEL_20;
      }
      v11 = 12;
    }
    xmlXPathErr(ctxt, v11);
  }
}

void xmlXPathValueFlipSign(xmlXPathParserContextPtr ctxt)
{
  xmlXPathObjectPtr value;

  if (ctxt && ctxt->context)
  {
    value = ctxt->value;
    if (value
      && (value->type == XPATH_NUMBER
       || (xmlXPathNumberFunction(ctxt, 1), (value = ctxt->value) != 0) && value->type == XPATH_NUMBER))
    {
      value->floatval = -value->floatval;
    }
    else
    {
      xmlXPathErr(ctxt, 11);
    }
  }
}

void xmlXPathAddValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1;
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v5;
  xmlXPathObject *v6;
  double v7;
  xmlXPathObjectPtr value;
  int v9;

  v1 = ctxt;
  if (!ctxt)
    goto LABEL_12;
  valueNr = ctxt->valueNr;
  v3 = valueNr - 1;
  if (valueNr < 1)
    goto LABEL_12;
  ctxt->valueNr = v3;
  valueTab = ctxt->valueTab;
  v5 = valueNr == 1 ? 0 : valueTab[valueNr - 2];
  ctxt->value = v5;
  v6 = valueTab[v3];
  valueTab[v3] = 0;
  if (v6)
  {
    v7 = xmlXPathCastToNumber(v6);
    xmlXPathReleaseObject((uint64_t)v1->context, v6);
    value = v1->value;
    if (value)
    {
      if (value->type == XPATH_NUMBER
        || (xmlXPathNumberFunction(v1, 1), (value = v1->value) != 0) && value->type == XPATH_NUMBER)
      {
        value->floatval = v7 + value->floatval;
        return;
      }
    }
    ctxt = v1;
    v9 = 11;
  }
  else
  {
LABEL_12:
    v9 = 10;
  }
  xmlXPathErr(ctxt, v9);
}

void xmlXPathSubValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1;
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v5;
  xmlXPathObject *v6;
  double v7;
  xmlXPathObjectPtr value;
  int v9;

  v1 = ctxt;
  if (!ctxt)
    goto LABEL_12;
  valueNr = ctxt->valueNr;
  v3 = valueNr - 1;
  if (valueNr < 1)
    goto LABEL_12;
  ctxt->valueNr = v3;
  valueTab = ctxt->valueTab;
  v5 = valueNr == 1 ? 0 : valueTab[valueNr - 2];
  ctxt->value = v5;
  v6 = valueTab[v3];
  valueTab[v3] = 0;
  if (v6)
  {
    v7 = xmlXPathCastToNumber(v6);
    xmlXPathReleaseObject((uint64_t)v1->context, v6);
    value = v1->value;
    if (value)
    {
      if (value->type == XPATH_NUMBER
        || (xmlXPathNumberFunction(v1, 1), (value = v1->value) != 0) && value->type == XPATH_NUMBER)
      {
        value->floatval = value->floatval - v7;
        return;
      }
    }
    ctxt = v1;
    v9 = 11;
  }
  else
  {
LABEL_12:
    v9 = 10;
  }
  xmlXPathErr(ctxt, v9);
}

void xmlXPathMultValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1;
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v5;
  xmlXPathObject *v6;
  double v7;
  xmlXPathObjectPtr value;
  int v9;

  v1 = ctxt;
  if (!ctxt)
    goto LABEL_12;
  valueNr = ctxt->valueNr;
  v3 = valueNr - 1;
  if (valueNr < 1)
    goto LABEL_12;
  ctxt->valueNr = v3;
  valueTab = ctxt->valueTab;
  v5 = valueNr == 1 ? 0 : valueTab[valueNr - 2];
  ctxt->value = v5;
  v6 = valueTab[v3];
  valueTab[v3] = 0;
  if (v6)
  {
    v7 = xmlXPathCastToNumber(v6);
    xmlXPathReleaseObject((uint64_t)v1->context, v6);
    value = v1->value;
    if (value)
    {
      if (value->type == XPATH_NUMBER
        || (xmlXPathNumberFunction(v1, 1), (value = v1->value) != 0) && value->type == XPATH_NUMBER)
      {
        value->floatval = v7 * value->floatval;
        return;
      }
    }
    ctxt = v1;
    v9 = 11;
  }
  else
  {
LABEL_12:
    v9 = 10;
  }
  xmlXPathErr(ctxt, v9);
}

void xmlXPathDivValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1;
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v5;
  xmlXPathObject *v6;
  double v7;
  xmlXPathObjectPtr value;
  int v9;

  v1 = ctxt;
  if (!ctxt)
    goto LABEL_12;
  valueNr = ctxt->valueNr;
  v3 = valueNr - 1;
  if (valueNr < 1)
    goto LABEL_12;
  ctxt->valueNr = v3;
  valueTab = ctxt->valueTab;
  v5 = valueNr == 1 ? 0 : valueTab[valueNr - 2];
  ctxt->value = v5;
  v6 = valueTab[v3];
  valueTab[v3] = 0;
  if (v6)
  {
    v7 = xmlXPathCastToNumber(v6);
    xmlXPathReleaseObject((uint64_t)v1->context, v6);
    value = v1->value;
    if (value)
    {
      if (value->type == XPATH_NUMBER
        || (xmlXPathNumberFunction(v1, 1), (value = v1->value) != 0) && value->type == XPATH_NUMBER)
      {
        value->floatval = value->floatval / v7;
        return;
      }
    }
    ctxt = v1;
    v9 = 11;
  }
  else
  {
LABEL_12:
    v9 = 10;
  }
  xmlXPathErr(ctxt, v9);
}

void xmlXPathModValues(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1;
  int valueNr;
  unsigned int v3;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v5;
  xmlXPathObject *v6;
  long double v7;
  xmlXPathObjectPtr value;
  double v9;
  int v10;

  v1 = ctxt;
  if (!ctxt)
    goto LABEL_13;
  valueNr = ctxt->valueNr;
  v3 = valueNr - 1;
  if (valueNr < 1)
    goto LABEL_13;
  ctxt->valueNr = v3;
  valueTab = ctxt->valueTab;
  v5 = valueNr == 1 ? 0 : valueTab[valueNr - 2];
  ctxt->value = v5;
  v6 = valueTab[v3];
  valueTab[v3] = 0;
  if (!v6)
  {
LABEL_13:
    v10 = 10;
LABEL_14:
    xmlXPathErr(ctxt, v10);
    return;
  }
  v7 = xmlXPathCastToNumber(v6);
  xmlXPathReleaseObject((uint64_t)v1->context, v6);
  value = v1->value;
  if (!value
    || value->type != XPATH_NUMBER
    && ((xmlXPathNumberFunction(v1, 1), (value = v1->value) == 0) || value->type != XPATH_NUMBER))
  {
    ctxt = v1;
    v10 = 11;
    goto LABEL_14;
  }
  if (v7 == 0.0)
    v9 = xmlXPathNAN;
  else
    v9 = fmod(value->floatval, v7);
  value->floatval = v9;
}

xmlNodePtr xmlXPathNextSelf(xmlNodePtr ctxt, xmlNodePtr cur)
{
  xmlNodePtr v2;
  _xmlNode *children;

  if (ctxt)
  {
    v2 = ctxt;
    ctxt = 0;
    if (!cur)
    {
      children = v2->children;
      if (children)
        return *(xmlNodePtr *)&children->type;
    }
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextChild(xmlNodePtr ctxt, xmlNodePtr cur)
{
  _xmlNode *children;
  _xmlNode **p_next;
  uint64_t v4;
  unsigned int v5;
  int v6;

  if (ctxt)
  {
    children = ctxt->children;
    if (!children)
      return 0;
    if (cur)
    {
      if ((cur->type | 4) != 0xD)
      {
        p_next = &cur->next;
        return *p_next;
      }
      return 0;
    }
    v4 = *(_QWORD *)&children->type;
    if (!v4)
      return 0;
    ctxt = 0;
    v5 = *(_DWORD *)(v4 + 8);
    if (v5 <= 0x15)
    {
      v6 = 1 << v5;
      if ((v6 & 0x51FA) != 0 || (v6 & 0x202E00) != 0)
      {
        p_next = (_xmlNode **)(v4 + 24);
        return *p_next;
      }
    }
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextDescendant(xmlXPathParserContextPtr ctxt, xmlNodePtr cur)
{
  xmlXPathContextPtr context;
  _xmlNode *children;
  xmlElementType v4;
  xmlNode *v5;
  _xmlNode *next;
  xmlElementType type;
  xmlNodePtr node;
  xmlNodePtr v11;

  if (!ctxt)
    return 0;
  context = ctxt->context;
  if (!context)
    return 0;
  if (!cur)
  {
    node = context->node;
    if (node && (node->type | 0x10) != 0x12)
      return node->children;
    return 0;
  }
  if (cur->type == XML_NAMESPACE_DECL)
    return 0;
  children = cur->children;
  if (!children || (v4 = children->type, v4 == XML_ENTITY_DECL) || (cur = cur->children, v4 == XML_DTD_NODE))
  {
    v5 = context->node;
    if (cur != v5)
    {
      while (1)
      {
        next = cur->next;
        if (!next)
          break;
        cur = cur->next;
        type = next->type;
        if (type != XML_ENTITY_DECL && type != XML_DTD_NODE)
          return cur;
      }
      v11 = cur;
      while (1)
      {
        v11 = v11->parent;
        if (!v11 || v11 == v5)
          break;
        cur = v11->next;
        if (cur)
          return cur;
      }
    }
    return 0;
  }
  return cur;
}

xmlNodePtr xmlXPathNextDescendantOrSelf(xmlNodePtr ctxt, xmlNodePtr cur)
{
  xmlXPathParserContext *v2;
  _xmlNode *children;

  if (ctxt)
  {
    v2 = (xmlXPathParserContext *)ctxt;
    children = ctxt->children;
    if (!children)
      return 0;
    ctxt = *(xmlNodePtr *)&children->type;
    if (cur && ctxt)
    {
      if ((ctxt->type | 0x10) != 0x12)
        return xmlXPathNextDescendant(v2, cur);
      return 0;
    }
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextParent(xmlNodePtr ctxt, xmlNodePtr cur)
{
  xmlNodePtr v2;
  _xmlNode *children;
  uint64_t v4;
  unsigned int v5;
  const xmlChar *name;

  if (ctxt)
  {
    v2 = ctxt;
    ctxt = 0;
    if (!cur)
    {
      children = v2->children;
      if (children)
      {
        v4 = *(_QWORD *)&children->type;
        if (!v4)
          return 0;
        ctxt = 0;
        v5 = *(_DWORD *)(v4 + 8);
        if (v5 > 0x14)
          return ctxt;
        if (((1 << v5) & 0x1BD1FA) != 0)
        {
          ctxt = *(xmlNodePtr *)(v4 + 40);
          if (!ctxt)
            return (xmlNodePtr)children->_private;
          if (ctxt->type == XML_ELEMENT_NODE)
          {
            name = ctxt->name;
            if (*name != 32 && !xmlStrEqual(name, (const xmlChar *)"fake node libxslt"))
            {
              v4 = *(_QWORD *)&v2->children->type;
              return *(xmlNodePtr *)(v4 + 40);
            }
            return 0;
          }
        }
        else
        {
          if (v5 == 2)
            return *(xmlNodePtr *)(v4 + 40);
          if (v5 == 18)
          {
            ctxt = *(xmlNodePtr *)v4;
            if (!*(_QWORD *)v4 || ctxt->type == XML_NAMESPACE_DECL)
              return 0;
          }
        }
      }
    }
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextAncestor(xmlNodePtr ctxt, xmlNodePtr cur)
{
  xmlNodePtr v2;
  _xmlNode *children;
  xmlElementType type;
  const xmlChar *v6;
  uint64_t v7;
  unsigned int v8;
  const xmlChar *name;

  if (!ctxt)
    return ctxt;
  v2 = ctxt;
  children = ctxt->children;
  if (!children)
    return 0;
  if (!cur)
  {
    v7 = *(_QWORD *)&children->type;
    if (!v7)
      return 0;
    ctxt = 0;
    v8 = *(_DWORD *)(v7 + 8);
    if (v8 > 0x14)
      return ctxt;
    if (((1 << v8) & 0x1BD1FA) != 0)
    {
      ctxt = *(xmlNodePtr *)(v7 + 40);
      if (!ctxt)
        return (xmlNodePtr)children->_private;
      if (ctxt->type != XML_ELEMENT_NODE)
        return ctxt;
      name = ctxt->name;
      if (*name != 32 && !xmlStrEqual(name, (const xmlChar *)"fake node libxslt"))
        return *(xmlNodePtr *)(*(_QWORD *)&v2->children->type + 40);
      return 0;
    }
    if (v8 == 2)
      return *(xmlNodePtr *)(v7 + 40);
    if (v8 != 18)
      return ctxt;
    ctxt = *(xmlNodePtr *)v7;
    if (!*(_QWORD *)v7)
      return 0;
LABEL_29:
    if (ctxt->type != XML_NAMESPACE_DECL)
      return ctxt;
    return 0;
  }
  ctxt = (xmlNodePtr)children->_private;
  if (*((xmlNodePtr *)children->_private + 3) == cur)
    return ctxt;
  if (ctxt == cur)
    return 0;
  ctxt = 0;
  type = cur->type;
  if (type > XML_XINCLUDE_END)
    return ctxt;
  if (((1 << type) & 0x1BD1FA) == 0)
  {
    if (type == XML_ATTRIBUTE_NODE)
      return cur->parent;
    if (type != XML_NAMESPACE_DECL)
      return ctxt;
    ctxt = (xmlNodePtr)cur->_private;
    if (!cur->_private)
      return 0;
    goto LABEL_29;
  }
  ctxt = cur->parent;
  if (ctxt && ctxt->type == XML_ELEMENT_NODE)
  {
    v6 = ctxt->name;
    if (*v6 != 32 && !xmlStrEqual(v6, (const xmlChar *)"fake node libxslt"))
      return cur->parent;
    return 0;
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextAncestorOrSelf(xmlNodePtr ctxt, xmlNodePtr cur)
{
  _xmlNode *children;

  if (ctxt)
  {
    children = ctxt->children;
    if (children)
    {
      if (cur)
        return xmlXPathNextAncestor((xmlXPathParserContextPtr)ctxt, cur);
      else
        return *(xmlNodePtr *)&children->type;
    }
    else
    {
      return 0;
    }
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextFollowingSibling(xmlNodePtr ctxt, xmlNodePtr cur)
{
  _xmlNode *children;
  xmlNodePtr v3;

  if (ctxt)
  {
    children = ctxt->children;
    if (!children)
      return 0;
    v3 = *(xmlNodePtr *)&children->type;
    if ((v3->type | 0x10) == 0x12 || children->_private == cur)
    {
      return 0;
    }
    else
    {
      if (cur)
        v3 = cur;
      return v3->next;
    }
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextPrecedingSibling(xmlNodePtr ctxt, xmlNodePtr cur)
{
  _xmlNode *children;
  _xmlNode *prev;

  if (ctxt)
  {
    children = ctxt->children;
    if (children)
    {
      prev = *(_xmlNode **)&children->type;
      if ((prev->type | 0x10) != 0x12 && children->_private != cur)
      {
        if (!cur)
          return prev->prev;
        prev = cur->prev;
        if (prev)
        {
          if (prev->type != XML_DTD_NODE)
            prev = cur;
          return prev->prev;
        }
      }
    }
    return 0;
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextFollowing(xmlNodePtr ctxt, xmlNodePtr cur)
{
  xmlNodePtr *children;
  xmlElementType type;

  if (!ctxt)
    return ctxt;
  children = (xmlNodePtr *)ctxt->children;
  if (!children)
    return 0;
  if (cur)
  {
    if ((cur->type | 0x10) == 0x12)
      goto LABEL_13;
    ctxt = cur->children;
    if (!ctxt)
      goto LABEL_13;
    return ctxt;
  }
  cur = children[1];
  type = cur->type;
  if (type == XML_ATTRIBUTE_NODE)
  {
    cur = cur->parent;
    if (cur)
      goto LABEL_13;
    return 0;
  }
  if (type == XML_NAMESPACE_DECL)
  {
    cur = (xmlNodePtr)cur->_private;
    if (!cur || cur->type == XML_NAMESPACE_DECL)
      return 0;
  }
LABEL_13:
  while (1)
  {
    ctxt = cur->next;
    if (ctxt)
      break;
    cur = cur->parent;
    if (!cur || cur == *children)
      return 0;
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextPreceding(xmlXPathParserContextPtr ctxt, xmlNodePtr cur)
{
  xmlXPathContextPtr context;
  _xmlNode *prev;
  xmlElementType type;
  _xmlNode *v6;
  xmlNodePtr node;
  xmlNode *doc;

  if (!ctxt)
    return 0;
  context = ctxt->context;
  if (!context)
    return 0;
  if (!cur)
  {
    cur = context->node;
    type = cur->type;
    if (type == XML_ATTRIBUTE_NODE)
    {
      cur = cur->parent;
      if (!cur)
        return cur;
    }
    else if (type == XML_NAMESPACE_DECL)
    {
      cur = (xmlNodePtr)cur->_private;
      if (!cur)
        return cur;
      if (cur->type == XML_NAMESPACE_DECL)
        return 0;
    }
  }
  if (cur->type == XML_NAMESPACE_DECL)
    return 0;
  prev = cur->prev;
  if (!prev)
    goto LABEL_19;
  if (prev->type == XML_DTD_NODE)
    cur = cur->prev;
  do
  {
LABEL_18:
    v6 = cur->prev;
    if (v6)
    {
      do
      {
        cur = v6;
        v6 = v6->last;
      }
      while (v6);
      return cur;
    }
LABEL_19:
    cur = cur->parent;
    if (!cur)
      return cur;
    if (cur == context->doc->children)
      return 0;
    node = context->node;
    if (node)
    {
      if (node->type != XML_NAMESPACE_DECL && cur->type != XML_NAMESPACE_DECL)
      {
        doc = (xmlNode *)cur->doc;
        if (doc == (xmlNode *)node->doc)
          continue;
      }
    }
    return cur;
  }
  while (doc == cur);
  if (doc != node)
  {
    while (1)
    {
      node = node->parent;
      if (!node)
        break;
      if (node == cur)
        goto LABEL_18;
    }
  }
  return cur;
}

xmlNodePtr xmlXPathNextNamespace(xmlNodePtr ctxt, xmlNodePtr cur)
{
  xmlNodePtr v2;
  _xmlNode *children;
  uint64_t v5;
  int properties;
  xmlChar *content;
  BOOL v8;
  int v9;
  xmlChar *v10;
  xmlNsPtr *NsList;
  _xmlNode *v12;
  uint64_t v13;

  if (ctxt)
  {
    v2 = ctxt;
    children = ctxt->children;
    if (children && (v5 = *(_QWORD *)&children->type, *(_DWORD *)(v5 + 8) == 1))
    {
      if (cur)
      {
        properties = (int)children[1].properties;
        content = children[1].content;
        v8 = __OFSUB__(properties, 1);
        v9 = properties - 1;
        if (v9 < 0 != v8)
        {
          if (content)
          {
            xmlFree(content);
            children = v2->children;
          }
          ctxt = 0;
          children[1].content = 0;
        }
        else
        {
          LODWORD(children[1].properties) = v9;
          return *(xmlNodePtr *)&content[8 * v9];
        }
      }
      else
      {
        v10 = children[1].content;
        if (v10)
        {
          xmlFree(v10);
          children = v2->children;
          v5 = *(_QWORD *)&children->type;
        }
        NsList = xmlGetNsList((const xmlDoc *)children->_private, (const xmlNode *)v5);
        v12 = v2->children;
        v12[1].content = (xmlChar *)NsList;
        LODWORD(v12[1].properties) = 0;
        if (NsList && *NsList)
        {
          v13 = 0;
          while (NsList[++v13])
            ;
          LODWORD(v12[1].properties) = v13;
        }
        return (xmlNodePtr)&xmlXPathXMLNamespaceStruct;
      }
    }
    else
    {
      return 0;
    }
  }
  return ctxt;
}

xmlNodePtr xmlXPathNextAttribute(xmlNodePtr ctxt, xmlNodePtr cur)
{
  _xmlNode *children;
  uint64_t v3;
  _xmlNode **p_next;

  if (ctxt)
  {
    children = ctxt->children;
    if (children)
    {
      v3 = *(_QWORD *)&children->type;
      if (v3)
      {
        if (*(_DWORD *)(v3 + 8) == 1)
        {
          if (cur)
          {
            p_next = &cur->next;
            return *p_next;
          }
          if ((void *)v3 != children->_private)
          {
            p_next = (_xmlNode **)(v3 + 88);
            return *p_next;
          }
        }
      }
    }
    return 0;
  }
  return ctxt;
}

void xmlXPathRoot(xmlXPathParserContextPtr ctxt)
{
  xmlNodePtr *context;
  xmlXPathObject *v3;

  if (ctxt)
  {
    context = (xmlNodePtr *)ctxt->context;
    if (context)
    {
      v3 = xmlXPathCacheNewNodeSet((uint64_t)context, *context);
      valuePush(ctxt, v3);
    }
  }
}

xmlXPathObjectPtr xmlXPathCacheNewNodeSet(uint64_t a1, xmlNodePtr val)
{
  uint64_t **v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  xmlNodeSet *v9;
  uint64_t *v10;
  int v11;
  uint64_t v12;
  int v13;
  xmlNodeSetPtr v14;

  if (!a1)
    return xmlXPathNewNodeSet(val);
  v3 = *(uint64_t ***)(a1 + 344);
  if (!v3)
    return xmlXPathNewNodeSet(val);
  v4 = *v3;
  if (!*v3 || (v5 = *((_DWORD *)v4 + 2)) == 0)
  {
    v10 = v3[4];
    if (v10)
    {
      v11 = *((_DWORD *)v10 + 2);
      if (v11)
      {
        v12 = *v10;
        v13 = v11 - 1;
        *((_DWORD *)v10 + 2) = v13;
        v8 = *(_QWORD *)(v12 + 8 * v13);
        *(_DWORD *)v8 = 1;
        *(_DWORD *)(v8 + 16) = 0;
        v14 = xmlXPathNodeSetCreate(val);
        *(_QWORD *)(v8 + 8) = v14;
        if (!v14)
        {
          v8 = 0;
          *(_QWORD *)(a1 + 232) = 0x20000000CLL;
        }
        return (xmlXPathObjectPtr)v8;
      }
    }
    return xmlXPathNewNodeSet(val);
  }
  v6 = *v4;
  v7 = v5 - 1;
  *((_DWORD *)v4 + 2) = v7;
  v8 = *(_QWORD *)(v6 + 8 * v7);
  *(_DWORD *)v8 = 1;
  *(_DWORD *)(v8 + 16) = 0;
  if (val)
  {
    v9 = *(xmlNodeSet **)(v8 + 8);
    if (v9->nodeMax && val->type != XML_NAMESPACE_DECL)
    {
      *v9->nodeTab = val;
      **(_DWORD **)(v8 + 8) = 1;
    }
    else
    {
      xmlXPathNodeSetAddUnique(v9, val);
    }
  }
  return (xmlXPathObjectPtr)v8;
}

void xmlXPathLastFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContext *v2;
  int v3;
  xmlXPathContextPtr context;
  int contextSize;
  xmlXPathObject *v6;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs)
    {
      v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }
    if (ctxt->valueNr < 0)
    {
      v3 = 23;
      goto LABEL_4;
    }
    context = ctxt->context;
    contextSize = context->contextSize;
    if (contextSize < 0)
    {
      ctxt = v2;
      v3 = 13;
      goto LABEL_4;
    }
    v6 = xmlXPathCacheNewFloat((double)contextSize, (uint64_t)context);
    valuePush(v2, v6);
  }
}

xmlXPathObjectPtr xmlXPathCacheNewFloat(double val, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  int v6;
  xmlXPathObjectPtr result;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a2)
  {
    v2 = *(_QWORD *)(a2 + 344);
    if (v2)
    {
      v3 = *(uint64_t **)(v2 + 24);
      if (v3)
      {
        v4 = *((_DWORD *)v3 + 2);
        if (v4)
        {
          v5 = *v3;
          v6 = v4 - 1;
          *((_DWORD *)v3 + 2) = v6;
          result = *(xmlXPathObjectPtr *)(v5 + 8 * v6);
LABEL_9:
          result->type = XPATH_NUMBER;
          result->floatval = val;
          return result;
        }
      }
      v8 = *(uint64_t **)(v2 + 32);
      if (v8)
      {
        v9 = *((_DWORD *)v8 + 2);
        if (v9)
        {
          v10 = *v8;
          v11 = v9 - 1;
          *((_DWORD *)v8 + 2) = v11;
          result = *(xmlXPathObjectPtr *)(v10 + 8 * v11);
          goto LABEL_9;
        }
      }
    }
  }
  return xmlXPathNewFloat(val);
}

void xmlXPathPositionFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContext *v2;
  int v3;
  xmlXPathContextPtr context;
  int proximityPosition;
  xmlXPathObject *v6;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs)
    {
      v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }
    if (ctxt->valueNr < 0)
    {
      v3 = 23;
      goto LABEL_4;
    }
    context = ctxt->context;
    proximityPosition = context->proximityPosition;
    if (proximityPosition < 0)
    {
      ctxt = v2;
      v3 = 14;
      goto LABEL_4;
    }
    v6 = xmlXPathCacheNewFloat((double)proximityPosition, (uint64_t)context);
    valuePush(v2, v6);
  }
}

void xmlXPathCountFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int valueNr;
  xmlXPathObjectPtr value;
  xmlXPathObjectPtr *valueTab;
  int v6;
  xmlXPathObject *v7;
  int v8;
  xmlXPathObject *v9;
  int *p_nodeNr;
  xmlXPathContextPtr context;
  double v12;
  xmlXPathObject *v13;

  if (!ctxt)
    return;
  if (nargs != 1)
  {
    v8 = 12;
LABEL_12:
    xmlXPathErr(ctxt, v8);
    return;
  }
  valueNr = ctxt->valueNr;
  if (valueNr <= 0)
  {
    v8 = 23;
    goto LABEL_12;
  }
  value = ctxt->value;
  if (!value || (value->type | 8) != 9)
  {
    v8 = 11;
    goto LABEL_12;
  }
  valueTab = ctxt->valueTab;
  v6 = valueNr - 1;
  ctxt->valueNr = valueNr - 1;
  if (valueNr == 1)
    v7 = 0;
  else
    v7 = valueTab[valueNr - 2];
  ctxt->value = v7;
  v9 = valueTab[v6];
  valueTab[v6] = 0;
  if (v9 && (p_nodeNr = &v9->nodesetval->nodeNr) != 0)
  {
    context = ctxt->context;
    v12 = (double)*p_nodeNr;
  }
  else
  {
    context = ctxt->context;
    v12 = 0.0;
  }
  v13 = xmlXPathCacheNewFloat(v12, (uint64_t)context);
  valuePush(ctxt, v13);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v9);
}

void xmlXPathIdFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int valueNr;
  xmlXPathObjectPtr *valueTab;
  int v5;
  xmlXPathObject *v6;
  int v7;
  xmlXPathObject *v8;
  xmlNodeSet *v9;
  int *p_nodeNr;
  uint64_t v11;
  xmlChar *Content;
  xmlNodeSet *ElementsByIds;
  xmlXPathObject *v14;
  xmlXPathObjectPtr v15;
  xmlXPathObject *v16;
  xmlNodeSet *v17;
  xmlXPathObject *v18;

  if (!ctxt)
    return;
  if (nargs != 1)
  {
    v7 = 12;
LABEL_21:
    xmlXPathErr(ctxt, v7);
    return;
  }
  valueNr = ctxt->valueNr;
  if (valueNr <= 0)
  {
    v7 = 23;
    goto LABEL_21;
  }
  valueTab = ctxt->valueTab;
  v5 = valueNr - 1;
  ctxt->valueNr = valueNr - 1;
  if (valueNr == 1)
    v6 = 0;
  else
    v6 = valueTab[valueNr - 2];
  ctxt->value = v6;
  v8 = valueTab[v5];
  valueTab[v5] = 0;
  if (!v8)
  {
    v7 = 10;
    goto LABEL_21;
  }
  if ((v8->type | 8) == 9)
  {
    v9 = xmlXPathNodeSetCreate(0);
    p_nodeNr = &v8->nodesetval->nodeNr;
    if (p_nodeNr && *p_nodeNr >= 1)
    {
      v11 = 0;
      do
      {
        Content = xmlNodeGetContent(*(const xmlNode **)(*((_QWORD *)p_nodeNr + 1) + 8 * v11));
        if (!Content)
          Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
        ElementsByIds = xmlXPathGetElementsByIds(ctxt->context->doc, Content);
        v9 = xmlXPathNodeSetMerge(v9, ElementsByIds);
        xmlXPathFreeNodeSet(ElementsByIds);
        if (Content)
          xmlFree(Content);
        ++v11;
        p_nodeNr = &v8->nodesetval->nodeNr;
      }
      while (v11 < *p_nodeNr);
    }
    xmlXPathReleaseObject((uint64_t)ctxt->context, v8);
    v14 = xmlXPathCacheWrapNodeSet((uint64_t)ctxt->context, v9);
    valuePush(ctxt, v14);
  }
  else
  {
    v15 = xmlXPathCacheConvertString((uint64_t)ctxt->context, v8);
    if (v15)
    {
      v16 = v15;
      v17 = xmlXPathGetElementsByIds(ctxt->context->doc, v15->stringval);
      v18 = xmlXPathCacheWrapNodeSet((uint64_t)ctxt->context, v17);
      valuePush(ctxt, v18);
      xmlXPathReleaseObject((uint64_t)ctxt->context, v16);
    }
  }
}

xmlNodeSet *xmlXPathGetElementsByIds(xmlDoc *a1, const xmlChar *a2)
{
  const xmlChar *v2;
  xmlNodeSet *v4;
  const xmlChar *i;
  unsigned int v6;
  unsigned int v7;
  int v8;
  char v9;
  xmlChar *v10;
  xmlChar *v11;
  xmlAttrPtr ID;
  xmlNode *parent;
  xmlElementType type;

  if (!a2)
    return 0;
  v2 = a2;
  v4 = xmlXPathNodeSetCreate(0);
  if (v4)
  {
    for (i = v2; ; ++i)
    {
      v6 = *i;
      if (v6 > 0x20)
      {
        LOBYTE(v7) = *i;
        goto LABEL_12;
      }
      if (((1 << v6) & 0x100002600) == 0)
        break;
    }
    LOBYTE(v7) = *i;
    if (!*i)
      return v4;
LABEL_12:
    v8 = (_DWORD)i - (_DWORD)v2;
    while (v7 > 0x20u || ((1 << v7) & 0x100002601) == 0)
    {
      v9 = *++i;
      LOBYTE(v7) = v9;
      ++v8;
    }
    v10 = xmlStrndup(v2, v8);
    if (v10)
    {
      v11 = v10;
      ID = xmlGetID(a1, v10);
      if (ID)
      {
        parent = (xmlNode *)ID;
        type = ID->type;
        if (type == XML_ELEMENT_NODE || type == XML_ATTRIBUTE_NODE && (parent = ID->parent) != 0)
          xmlXPathNodeSetAdd(v4, parent);
      }
      xmlFree(v11);
    }
    while (1)
    {
      v7 = *i;
      if (v7 > 0x20)
      {
LABEL_11:
        v2 = i;
        goto LABEL_12;
      }
      if (((1 << v7) & 0x100002600) == 0)
        break;
      ++i;
    }
    if (*i)
      goto LABEL_11;
  }
  return v4;
}

xmlXPathObjectPtr xmlXPathCacheWrapNodeSet(uint64_t a1, xmlNodeSetPtr val)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  int v6;
  xmlXPathObjectPtr result;

  if (!a1)
    return xmlXPathWrapNodeSet(val);
  v2 = *(_QWORD *)(a1 + 344);
  if (!v2)
    return xmlXPathWrapNodeSet(val);
  v3 = *(uint64_t **)(v2 + 32);
  if (!v3)
    return xmlXPathWrapNodeSet(val);
  v4 = *((_DWORD *)v3 + 2);
  if (!v4)
    return xmlXPathWrapNodeSet(val);
  v5 = *v3;
  v6 = v4 - 1;
  *((_DWORD *)v3 + 2) = v6;
  result = *(xmlXPathObjectPtr *)(v5 + 8 * v6);
  result->type = XPATH_NODESET;
  result->nodesetval = val;
  return result;
}

xmlXPathObjectPtr xmlXPathCacheConvertString(uint64_t a1, xmlXPathObjectPtr obj)
{
  xmlGenericErrorFunc v4;
  void **v5;
  xmlChar *v6;
  const char *v7;
  xmlXPathObjectPtr result;
  xmlChar *v9;

  switch(obj->type)
  {
    case XPATH_NODESET:
    case XPATH_XSLT_TREE:
      v6 = xmlXPathCastNodeSetToString(obj->nodesetval);
      goto LABEL_11;
    case XPATH_BOOLEAN:
      if (obj->BOOLval)
        v7 = "true";
      else
        v7 = "false";
      v6 = xmlStrdup((const xmlChar *)v7);
      goto LABEL_11;
    case XPATH_NUMBER:
      v6 = xmlXPathCastNumberToString(obj->floatval);
LABEL_11:
      v9 = v6;
      xmlXPathReleaseObject(a1, obj);
      if (!v9)
        goto LABEL_13;
      result = xmlXPathCacheWrapString(a1, v9);
      break;
    case XPATH_STRING:
      return obj;
    case XPATH_POINT:
    case XPATH_RANGE:
    case XPATH_LOCATIONSET:
    case XPATH_USERS:
      v4 = *__xmlGenericError();
      v5 = __xmlGenericErrorContext();
      v4(*v5, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 2730);
      goto LABEL_3;
    default:
LABEL_3:
      xmlXPathReleaseObject(a1, obj);
LABEL_13:
      result = xmlXPathCacheNewCString(a1);
      break;
  }
  return result;
}

void xmlXPathLocalNameFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObject *v3;
  int valueNr;
  _DWORD *value;
  xmlXPathObjectPtr *valueTab;
  unsigned int v7;
  xmlXPathObject *v8;
  int v9;
  xmlXPathObject *v10;
  xmlNodeSetPtr nodesetval;
  xmlNodePtr v12;
  xmlElementType type;
  xmlChar *children;
  uint64_t context;
  xmlXPathObject *v16;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs != 1)
    {
      if (nargs)
      {
        v9 = 12;
        goto LABEL_14;
      }
      v3 = xmlXPathCacheNewNodeSet((uint64_t)ctxt->context, ctxt->context->node);
      valuePush(v2, v3);
    }
    valueNr = v2->valueNr;
    if (valueNr <= 0)
    {
      ctxt = v2;
      v9 = 23;
    }
    else
    {
      value = v2->value;
      if (value && (*value | 8) == 9)
      {
        valueTab = v2->valueTab;
        v7 = valueNr - 1;
        v2->valueNr = valueNr - 1;
        if (valueNr == 1)
          v8 = 0;
        else
          v8 = valueTab[valueNr - 2];
        v2->value = v8;
        v10 = valueTab[v7];
        valueTab[v7] = 0;
        nodesetval = v10->nodesetval;
        if (!nodesetval || !nodesetval->nodeNr)
          goto LABEL_23;
        v12 = *nodesetval->nodeTab;
        type = v12->type;
        if (type - 1 < 2)
          goto LABEL_21;
        if (type == XML_NAMESPACE_DECL)
        {
          context = (uint64_t)v2->context;
          children = (xmlChar *)v12->children;
LABEL_27:
          v16 = xmlXPathCacheNewString(context, children);
          goto LABEL_25;
        }
        if (type == XML_PI_NODE)
        {
LABEL_21:
          children = (xmlChar *)v12->name;
          context = (uint64_t)v2->context;
          if (*children != 32)
            goto LABEL_27;
        }
        else
        {
LABEL_23:
          context = (uint64_t)v2->context;
        }
        v16 = xmlXPathCacheNewCString(context);
LABEL_25:
        valuePush(v2, v16);
        xmlXPathReleaseObject((uint64_t)v2->context, v10);
        return;
      }
      ctxt = v2;
      v9 = 11;
    }
LABEL_14:
    xmlXPathErr(ctxt, v9);
  }
}

xmlXPathObjectPtr xmlXPathCacheNewCString(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  int v10;

  if (a1)
  {
    v1 = *(_QWORD *)(a1 + 344);
    if (v1)
    {
      v2 = *(uint64_t **)(v1 + 8);
      if (v2)
      {
        v3 = *((_DWORD *)v2 + 2);
        if (v3)
        {
          v4 = *v2;
          v5 = v3 - 1;
          *((_DWORD *)v2 + 2) = v5;
          v6 = *(_QWORD *)(v4 + 8 * v5);
LABEL_9:
          *(_DWORD *)v6 = 4;
          *(_QWORD *)(v6 + 32) = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
          return (xmlXPathObjectPtr)v6;
        }
      }
      v7 = *(uint64_t **)(v1 + 32);
      if (v7)
      {
        v8 = *((_DWORD *)v7 + 2);
        if (v8)
        {
          v9 = *v7;
          v10 = v8 - 1;
          *((_DWORD *)v7 + 2) = v10;
          v6 = *(_QWORD *)(v9 + 8 * v10);
          goto LABEL_9;
        }
      }
    }
  }
  return xmlXPathNewCString(&byte_1B0865C1A);
}

xmlXPathObjectPtr xmlXPathCacheNewString(uint64_t a1, xmlChar *val)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;
  const xmlChar *v12;

  if (!a1)
    return xmlXPathNewString(val);
  v2 = *(_QWORD *)(a1 + 344);
  if (!v2)
    return xmlXPathNewString(val);
  v3 = *(uint64_t **)(v2 + 8);
  if (!v3 || (v4 = *((_DWORD *)v3 + 2)) == 0)
  {
    v8 = *(uint64_t **)(v2 + 32);
    if (v8)
    {
      v9 = *((_DWORD *)v8 + 2);
      if (v9)
      {
        v10 = *v8;
        v11 = v9 - 1;
        *((_DWORD *)v8 + 2) = v11;
        v7 = *(_QWORD *)(v10 + 8 * v11);
        goto LABEL_9;
      }
    }
    return xmlXPathNewString(val);
  }
  v5 = *v3;
  v6 = v4 - 1;
  *((_DWORD *)v3 + 2) = v6;
  v7 = *(_QWORD *)(v5 + 8 * v6);
LABEL_9:
  *(_DWORD *)v7 = 4;
  if (val)
    v12 = val;
  else
    v12 = (const xmlChar *)&byte_1B0865C1A;
  *(_QWORD *)(v7 + 32) = xmlStrdup(v12);
  return (xmlXPathObjectPtr)v7;
}

void xmlXPathNamespaceURIFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObject *v3;
  int valueNr;
  _DWORD *value;
  xmlXPathObjectPtr *valueTab;
  unsigned int v7;
  xmlXPathObject *v8;
  int v9;
  xmlXPathObject *v10;
  xmlNodeSetPtr nodesetval;
  xmlNodePtr v12;
  xmlNs *ns;
  uint64_t context;
  xmlXPathObject *v15;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs != 1)
    {
      if (nargs)
      {
        v9 = 12;
        goto LABEL_14;
      }
      v3 = xmlXPathCacheNewNodeSet((uint64_t)ctxt->context, ctxt->context->node);
      valuePush(v2, v3);
    }
    valueNr = v2->valueNr;
    if (valueNr <= 0)
    {
      ctxt = v2;
      v9 = 23;
    }
    else
    {
      value = v2->value;
      if (value && (*value | 8) == 9)
      {
        valueTab = v2->valueTab;
        v7 = valueNr - 1;
        v2->valueNr = valueNr - 1;
        if (valueNr == 1)
          v8 = 0;
        else
          v8 = valueTab[valueNr - 2];
        v2->value = v8;
        v10 = valueTab[v7];
        valueTab[v7] = 0;
        nodesetval = v10->nodesetval;
        if (nodesetval && nodesetval->nodeNr && (v12 = *nodesetval->nodeTab, v12->type - 1 <= 1))
        {
          ns = v12->ns;
          context = (uint64_t)v2->context;
          if (ns)
          {
            v15 = xmlXPathCacheNewString(context, (xmlChar *)ns->href);
LABEL_23:
            valuePush(v2, v15);
            xmlXPathReleaseObject((uint64_t)v2->context, v10);
            return;
          }
        }
        else
        {
          context = (uint64_t)v2->context;
        }
        v15 = xmlXPathCacheNewCString(context);
        goto LABEL_23;
      }
      ctxt = v2;
      v9 = 11;
    }
LABEL_14:
    xmlXPathErr(ctxt, v9);
  }
}

void xmlXPathStringFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathContextPtr context;
  xmlChar *Content;
  xmlXPathObject *v5;
  int valueNr;
  xmlXPathObjectPtr *valueTab;
  int v8;
  xmlXPathObject *v9;
  int v10;
  xmlXPathObject *v11;

  if (ctxt)
  {
    if (nargs == 1)
    {
      valueNr = ctxt->valueNr;
      if (valueNr <= 0)
      {
        v10 = 23;
      }
      else
      {
        valueTab = ctxt->valueTab;
        v8 = valueNr - 1;
        ctxt->valueNr = valueNr - 1;
        if (valueNr == 1)
          v9 = 0;
        else
          v9 = valueTab[valueNr - 2];
        ctxt->value = v9;
        v11 = valueTab[v8];
        valueTab[v8] = 0;
        if (v11)
        {
          v5 = xmlXPathCacheConvertString((uint64_t)ctxt->context, v11);
LABEL_16:
          valuePush(ctxt, v5);
          return;
        }
        v10 = 10;
      }
    }
    else
    {
      if (!nargs)
      {
        context = ctxt->context;
        Content = xmlNodeGetContent(context->node);
        if (!Content)
          Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
        v5 = xmlXPathCacheWrapString((uint64_t)context, Content);
        goto LABEL_16;
      }
      v10 = 12;
    }
    xmlXPathErr(ctxt, v10);
  }
}

xmlXPathObjectPtr xmlXPathCacheWrapString(uint64_t a1, xmlChar *val)
{
  uint64_t v2;
  uint64_t *v3;
  int v4;
  uint64_t v5;
  int v6;
  xmlXPathObjectPtr result;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  int v11;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 344);
    if (v2)
    {
      v3 = *(uint64_t **)(v2 + 8);
      if (v3)
      {
        v4 = *((_DWORD *)v3 + 2);
        if (v4)
        {
          v5 = *v3;
          v6 = v4 - 1;
          *((_DWORD *)v3 + 2) = v6;
          result = *(xmlXPathObjectPtr *)(v5 + 8 * v6);
LABEL_9:
          result->type = XPATH_STRING;
          result->stringval = val;
          return result;
        }
      }
      v8 = *(uint64_t **)(v2 + 32);
      if (v8)
      {
        v9 = *((_DWORD *)v8 + 2);
        if (v9)
        {
          v10 = *v8;
          v11 = v9 - 1;
          *((_DWORD *)v8 + 2) = v11;
          result = *(xmlXPathObjectPtr *)(v10 + 8 * v11);
          goto LABEL_9;
        }
      }
    }
  }
  return xmlXPathWrapString(val);
}

void xmlXPathStringLengthFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  int valueNr;
  xmlXPathObjectPtr value;
  _DWORD *v5;
  xmlXPathObjectPtr *valueTab;
  unsigned int v7;
  xmlXPathObject *v8;
  xmlXPathContextPtr v9;
  xmlChar *Content;
  uint64_t v11;
  int v12;
  xmlXPathObject *v13;
  int v14;
  xmlXPathObject *v15;
  xmlXPathObject *v16;
  uint64_t context;
  int v18;
  xmlXPathObject *v19;

  v2 = ctxt;
  if (nargs)
  {
    if (!ctxt)
      return;
    if (nargs == 1)
    {
      valueNr = ctxt->valueNr;
      if (valueNr <= 0)
      {
        v14 = 23;
      }
      else
      {
        value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_STRING)
          {
LABEL_10:
            valueTab = v2->valueTab;
            v7 = valueNr - 1;
            v2->valueNr = valueNr - 1;
            if (valueNr == 1)
              v8 = 0;
            else
              v8 = valueTab[valueNr - 2];
            v2->value = v8;
            v16 = valueTab[v7];
            valueTab[v7] = 0;
            context = (uint64_t)v2->context;
            v18 = xmlUTF8Strlen(v16->stringval);
            v19 = xmlXPathCacheNewFloat((double)v18, context);
            valuePush(v2, v19);
            xmlXPathReleaseObject((uint64_t)v2->context, v16);
            return;
          }
          xmlXPathStringFunction(ctxt, 1);
          v5 = v2->value;
          if (v5 && *v5 == 4)
          {
            valueNr = v2->valueNr;
            goto LABEL_10;
          }
        }
        ctxt = v2;
        v14 = 11;
      }
    }
    else
    {
      v14 = 12;
    }
    xmlXPathErr(ctxt, v14);
    return;
  }
  if (ctxt)
  {
    v9 = ctxt->context;
    if (v9)
    {
      if (v9->node)
      {
        Content = xmlNodeGetContent(v9->node);
        if (!Content)
          Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
        v11 = (uint64_t)v2->context;
        v12 = xmlUTF8Strlen(Content);
        v13 = xmlXPathCacheNewFloat((double)v12, v11);
        valuePush(v2, v13);
        xmlFree(Content);
      }
      else
      {
        v15 = xmlXPathCacheNewFloat(0.0, (uint64_t)v9);
        valuePush(v2, v15);
      }
    }
  }
}

void xmlXPathConcatFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v3;
  int v4;
  xmlXPathObjectPtr value;
  int valueNr;
  unsigned int v7;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v9;
  xmlXPathObject *v10;
  int v11;
  _DWORD *v12;
  int v13;
  unsigned int v14;
  xmlXPathObjectPtr *v15;
  xmlXPathObject *v16;
  xmlXPathObject *v17;
  xmlChar *v18;

  if (ctxt)
  {
    v3 = ctxt;
    if (nargs <= 1)
    {
      v4 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v4);
      return;
    }
    value = ctxt->value;
    if (value && value->type != XPATH_STRING)
      xmlXPathStringFunction(ctxt, 1);
    valueNr = v3->valueNr;
    v7 = valueNr - 1;
    if (valueNr < 1)
    {
      v9 = 0;
    }
    else
    {
      v3->valueNr = v7;
      valueTab = v3->valueTab;
      if (valueNr == 1)
        v10 = 0;
      else
        v10 = valueTab[valueNr - 2];
      v3->value = v10;
      v9 = valueTab[v7];
      valueTab[v7] = 0;
      if (v9 && v9->type == XPATH_STRING)
      {
        v11 = nargs + 1;
        while (1)
        {
          v12 = v3->value;
          if (v12 && *v12 != 4)
            xmlXPathStringFunction(v3, 1);
          v13 = v3->valueNr;
          v14 = v13 - 1;
          if (v13 < 1)
            break;
          v3->valueNr = v14;
          v15 = v3->valueTab;
          if (v13 == 1)
            v16 = 0;
          else
            v16 = v15[v13 - 2];
          v3->value = v16;
          v17 = v15[v14];
          v15[v14] = 0;
          if (!v17 || v17->type != XPATH_STRING)
            goto LABEL_30;
          v18 = xmlStrcat(v17->stringval, v9->stringval);
          v17->stringval = v9->stringval;
          v9->stringval = v18;
          xmlXPathReleaseObject((uint64_t)v3->context, v17);
          if (--v11 <= 2)
          {
            valuePush(v3, v9);
            return;
          }
        }
        v17 = 0;
LABEL_30:
        xmlXPathReleaseObject((uint64_t)v3->context, v17);
        xmlXPathReleaseObject((uint64_t)v3->context, v9);
        ctxt = v3;
        v4 = 11;
        goto LABEL_4;
      }
    }
    xmlXPathReleaseObject((uint64_t)v3->context, v9);
  }
}

void xmlXPathContainsFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  int valueNr;
  int v4;
  int v5;
  xmlXPathObjectPtr value;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v8;
  xmlXPathObject *v9;
  _DWORD *v10;
  unsigned int v11;
  xmlXPathObjectPtr *v12;
  _DWORD *v13;
  xmlXPathObject *v14;
  xmlXPathObject *v15;
  _BOOL4 v16;
  xmlXPathObject *v17;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs != 2)
    {
      v5 = 12;
      goto LABEL_30;
    }
    valueNr = ctxt->valueNr;
    v4 = valueNr - 1;
    if (valueNr <= 1)
    {
      v5 = 23;
LABEL_30:
      xmlXPathErr(ctxt, v5);
      return;
    }
    value = ctxt->value;
    if (!value)
    {
LABEL_29:
      ctxt = v2;
      v5 = 11;
      goto LABEL_30;
    }
    if (value->type == XPATH_STRING)
    {
      ctxt->valueNr = v4;
      valueTab = ctxt->valueTab;
    }
    else
    {
      xmlXPathStringFunction(ctxt, 1);
      v13 = v2->value;
      if (!v13 || *v13 != 4)
        goto LABEL_29;
      valueNr = v2->valueNr;
      v4 = valueNr - 1;
      if (valueNr < 1)
      {
        v9 = 0;
        goto LABEL_27;
      }
      v2->valueNr = v4;
      valueTab = v2->valueTab;
      if (valueNr == 1)
      {
        v4 = 0;
        v8 = 0;
        goto LABEL_11;
      }
    }
    v8 = valueTab[valueNr - 2];
LABEL_11:
    v2->value = v8;
    v9 = valueTab[v4];
    valueTab[v4] = 0;
    v10 = v2->value;
    if (v10 && *v10 != 4)
    {
      xmlXPathStringFunction(v2, 1);
      v4 = v2->valueNr;
    }
    v11 = v4 - 1;
    if (v4 >= 1)
    {
      v2->valueNr = v11;
      v12 = v2->valueTab;
      if (v4 == 1)
        v14 = 0;
      else
        v14 = v12[v4 - 2];
      v2->value = v14;
      v15 = v12[v11];
      v12[v11] = 0;
      if (v15 && v15->type == XPATH_STRING)
      {
        v16 = xmlStrstr(v15->stringval, v9->stringval) != 0;
        v17 = xmlXPathCacheNewBoolean((uint64_t)v2->context, v16);
        valuePush(v2, v17);
        xmlXPathReleaseObject((uint64_t)v2->context, v15);
        xmlXPathReleaseObject((uint64_t)v2->context, v9);
        return;
      }
      goto LABEL_28;
    }
LABEL_27:
    v15 = 0;
LABEL_28:
    xmlXPathReleaseObject((uint64_t)v2->context, v15);
    xmlXPathReleaseObject((uint64_t)v2->context, v9);
    goto LABEL_29;
  }
}

xmlXPathObjectPtr xmlXPathCacheNewBoolean(uint64_t a1, int val)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  xmlXPathObjectPtr result;
  uint64_t v7;
  int v8;
  int v9;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 344);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        v4 = *(_DWORD *)(v3 + 8);
        if (v4)
        {
          v5 = v4 - 1;
          result = *(xmlXPathObjectPtr *)(*(_QWORD *)v3 + 8 * v5);
          *(_DWORD *)(v3 + 8) = v5;
LABEL_9:
          result->type = XPATH_BOOLEAN;
          result->BOOLval = val != 0;
          return result;
        }
      }
      v7 = *(_QWORD *)(v2 + 32);
      if (v7)
      {
        v8 = *(_DWORD *)(v7 + 8);
        if (v8)
        {
          v9 = v8 - 1;
          result = *(xmlXPathObjectPtr *)(*(_QWORD *)v7 + 8 * v9);
          *(_DWORD *)(v7 + 8) = v9;
          goto LABEL_9;
        }
      }
    }
  }
  return xmlXPathNewBoolean(val);
}

void xmlXPathStartsWithFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  int valueNr;
  int v4;
  int v5;
  xmlXPathObjectPtr value;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v8;
  xmlXPathObject *v9;
  _DWORD *v10;
  unsigned int v11;
  xmlXPathObjectPtr *v12;
  _DWORD *v13;
  xmlXPathObject *v14;
  xmlXPathObject *v15;
  int v16;
  _BOOL4 v17;
  xmlXPathObject *v18;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs != 2)
    {
      v5 = 12;
      goto LABEL_30;
    }
    valueNr = ctxt->valueNr;
    v4 = valueNr - 1;
    if (valueNr <= 1)
    {
      v5 = 23;
LABEL_30:
      xmlXPathErr(ctxt, v5);
      return;
    }
    value = ctxt->value;
    if (!value)
    {
LABEL_29:
      ctxt = v2;
      v5 = 11;
      goto LABEL_30;
    }
    if (value->type == XPATH_STRING)
    {
      ctxt->valueNr = v4;
      valueTab = ctxt->valueTab;
    }
    else
    {
      xmlXPathStringFunction(ctxt, 1);
      v13 = v2->value;
      if (!v13 || *v13 != 4)
        goto LABEL_29;
      valueNr = v2->valueNr;
      v4 = valueNr - 1;
      if (valueNr < 1)
      {
        v9 = 0;
        goto LABEL_27;
      }
      v2->valueNr = v4;
      valueTab = v2->valueTab;
      if (valueNr == 1)
      {
        v4 = 0;
        v8 = 0;
        goto LABEL_11;
      }
    }
    v8 = valueTab[valueNr - 2];
LABEL_11:
    v2->value = v8;
    v9 = valueTab[v4];
    valueTab[v4] = 0;
    v10 = v2->value;
    if (v10 && *v10 != 4)
    {
      xmlXPathStringFunction(v2, 1);
      v4 = v2->valueNr;
    }
    v11 = v4 - 1;
    if (v4 >= 1)
    {
      v2->valueNr = v11;
      v12 = v2->valueTab;
      if (v4 == 1)
        v14 = 0;
      else
        v14 = v12[v4 - 2];
      v2->value = v14;
      v15 = v12[v11];
      v12[v11] = 0;
      if (v15 && v15->type == XPATH_STRING)
      {
        v16 = xmlStrlen(v9->stringval);
        v17 = xmlStrncmp(v15->stringval, v9->stringval, v16) == 0;
        v18 = xmlXPathCacheNewBoolean((uint64_t)v2->context, v17);
        valuePush(v2, v18);
        xmlXPathReleaseObject((uint64_t)v2->context, v15);
        xmlXPathReleaseObject((uint64_t)v2->context, v9);
        return;
      }
      goto LABEL_28;
    }
LABEL_27:
    v15 = 0;
LABEL_28:
    xmlXPathReleaseObject((uint64_t)v2->context, v15);
    xmlXPathReleaseObject((uint64_t)v2->context, v9);
    goto LABEL_29;
  }
}

void xmlXPathSubstringFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  int v3;
  double floatval;
  xmlXPathObjectPtr value;
  _DWORD *v7;
  int valueNr;
  xmlXPathObjectPtr *valueTab;
  int v10;
  xmlXPathObject *v11;
  xmlXPathObject *v12;
  _DWORD *v13;
  _DWORD *v14;
  int v15;
  xmlXPathObjectPtr *v16;
  int v17;
  xmlXPathObject *v18;
  xmlXPathObject *v19;
  double v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  unsigned int v24;
  xmlXPathObjectPtr *v25;
  xmlXPathObject *v26;
  xmlXPathObject *v27;
  int v28;
  double v29;
  double v30;
  double v31;
  int v32;
  xmlChar *v33;
  xmlXPathObject *v34;
  xmlXPathObject *v35;

  v2 = ctxt;
  if (nargs > 1)
  {
    if (nargs >= 4)
    {
      if (ctxt)
        goto LABEL_3;
      return;
    }
    floatval = 0.0;
    if (nargs == 3)
    {
      value = ctxt->value;
      if (!value)
        goto LABEL_31;
      if (value->type != XPATH_NUMBER)
      {
        xmlXPathNumberFunction(ctxt, 1);
        v7 = v2->value;
        if (!v7 || *v7 != 3)
          goto LABEL_31;
      }
      valueNr = v2->valueNr;
      valueTab = v2->valueTab;
      v10 = valueNr - 1;
      v2->valueNr = valueNr - 1;
      if (valueNr == 1)
        v11 = 0;
      else
        v11 = valueTab[valueNr - 2];
      v2->value = v11;
      v12 = valueTab[v10];
      valueTab[v10] = 0;
      floatval = v12->floatval;
      xmlXPathReleaseObject((uint64_t)v2->context, v12);
    }
    v13 = v2->value;
    if (v13)
    {
      if (*v13 == 3 || (xmlXPathNumberFunction(v2, 1), (v14 = v2->value) != 0) && *v14 == 3)
      {
        v15 = v2->valueNr;
        v16 = v2->valueTab;
        v17 = v15 - 1;
        v2->valueNr = v15 - 1;
        v18 = v15 == 1 ? 0 : v16[v15 - 2];
        v2->value = v18;
        v19 = v16[v17];
        v16[v17] = 0;
        v20 = v19->floatval;
        xmlXPathReleaseObject((uint64_t)v2->context, v19);
        v21 = v2->value;
        if (v21)
        {
          if (*v21 == 4 || (xmlXPathStringFunction(v2, 1), (v22 = v2->value) != 0) && *v22 == 4)
          {
            v23 = v2->valueNr;
            v24 = v23 - 1;
            if (v23 < 1)
            {
              v26 = 0;
            }
            else
            {
              v2->valueNr = v24;
              v25 = v2->valueTab;
              if (v23 == 1)
                v27 = 0;
              else
                v27 = v25[v23 - 2];
              v2->value = v27;
              v26 = v25[v24];
              v25[v24] = 0;
            }
            if (v20 >= 2147483650.0)
            {
              v28 = 0x7FFFFFFF;
            }
            else if (v20 >= 1.0)
            {
              v28 = (int)v20;
              if (v20 - floor(v20) >= 0.5)
                ++v28;
            }
            else
            {
              v28 = 1;
            }
            if (nargs == 3)
            {
              v29 = floor(v20);
              if (v20 - v29 >= 0.5)
                v29 = v29 + 1.0;
              v30 = floor(floatval);
              if (floatval - v30 >= 0.5)
                v30 = v30 + 1.0;
              v31 = v30 + v29;
              if (v31 < 1.0)
              {
                v32 = 1;
LABEL_51:
                if (v32 <= v28)
                {
                  v35 = xmlXPathCacheNewCString((uint64_t)v2->context);
                  valuePush(v2, v35);
                }
                else
                {
                  v33 = xmlUTF8Strsub(v26->stringval, v28 - 1, v32 - v28);
                  v34 = xmlXPathCacheNewString((uint64_t)v2->context, v33);
                  valuePush(v2, v34);
                  xmlFree(v33);
                }
                xmlXPathReleaseObject((uint64_t)v2->context, v26);
                return;
              }
              if (v31 < 2147483650.0)
              {
                v32 = (int)v31;
                goto LABEL_51;
              }
            }
            v32 = 0x7FFFFFFF;
            goto LABEL_51;
          }
        }
      }
    }
LABEL_31:
    ctxt = v2;
    v3 = 11;
    goto LABEL_32;
  }
  if (ctxt)
  {
LABEL_3:
    v3 = 12;
LABEL_32:
    xmlXPathErr(ctxt, v3);
  }
}

void xmlXPathSubstringBeforeFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int valueNr;
  unsigned int v4;
  int v5;
  xmlXPathObjectPtr value;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v8;
  xmlXPathObject *v9;
  xmlXPathObjectPtr v10;
  unsigned int v11;
  xmlXPathObjectPtr *v12;
  xmlXPathObject *v13;
  xmlXPathObject *v14;
  uint64x2_t *v15;
  uint64x2_t *v16;
  const xmlChar *v17;
  xmlXPathContextPtr context;
  xmlChar *v19;
  xmlXPathObject *v20;

  if (!ctxt)
    return;
  if (nargs != 2)
  {
    v5 = 12;
    goto LABEL_7;
  }
  valueNr = ctxt->valueNr;
  v4 = valueNr - 1;
  if (valueNr <= 1)
  {
    v5 = 23;
LABEL_7:
    xmlXPathErr(ctxt, v5);
    return;
  }
  value = ctxt->value;
  if (!value || value->type == XPATH_STRING)
  {
    ctxt->valueNr = v4;
    valueTab = ctxt->valueTab;
    goto LABEL_11;
  }
  xmlXPathStringFunction(ctxt, 1);
  valueNr = ctxt->valueNr;
  v4 = valueNr - 1;
  if (valueNr >= 1)
  {
    ctxt->valueNr = v4;
    valueTab = ctxt->valueTab;
    if (valueNr == 1)
    {
      v4 = 0;
      v8 = 0;
      goto LABEL_12;
    }
LABEL_11:
    v8 = valueTab[valueNr - 2];
LABEL_12:
    ctxt->value = v8;
    v9 = valueTab[v4];
    valueTab[v4] = 0;
    valueNr = v4;
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  v10 = ctxt->value;
  if (v10 && v10->type != XPATH_STRING)
  {
    xmlXPathStringFunction(ctxt, 1);
    valueNr = ctxt->valueNr;
  }
  v11 = valueNr - 1;
  if (valueNr < 1)
  {
    v13 = 0;
  }
  else
  {
    ctxt->valueNr = v11;
    v12 = ctxt->valueTab;
    if (valueNr == 1)
      v14 = 0;
    else
      v14 = v12[valueNr - 2];
    ctxt->value = v14;
    v13 = v12[v11];
    v12[v11] = 0;
  }
  v15 = (uint64x2_t *)xmlBufCreate();
  if (v15)
  {
    v16 = v15;
    v17 = xmlStrstr(v13->stringval, v9->stringval);
    if (v17)
      xmlBufAdd(v16, v13->stringval, v17 - v13->stringval);
    context = ctxt->context;
    v19 = xmlBufContent((const xmlBuf *)v16);
    v20 = xmlXPathCacheNewString((uint64_t)context, v19);
    valuePush(ctxt, v20);
    xmlBufFree(v16);
  }
  xmlXPathReleaseObject((uint64_t)ctxt->context, v13);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v9);
}

void xmlXPathSubstringAfterFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int valueNr;
  unsigned int v4;
  int v5;
  xmlXPathObjectPtr value;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v8;
  xmlXPathObject *v9;
  xmlXPathObjectPtr v10;
  unsigned int v11;
  xmlXPathObjectPtr *v12;
  xmlXPathObject *v13;
  xmlXPathObject *v14;
  uint64x2_t *v15;
  uint64x2_t *v16;
  const xmlChar *v17;
  int v18;
  int v19;
  const xmlChar *stringval;
  const xmlChar *v21;
  int v22;
  xmlXPathContextPtr context;
  xmlChar *v24;
  xmlXPathObject *v25;

  if (!ctxt)
    return;
  if (nargs != 2)
  {
    v5 = 12;
    goto LABEL_7;
  }
  valueNr = ctxt->valueNr;
  v4 = valueNr - 1;
  if (valueNr <= 1)
  {
    v5 = 23;
LABEL_7:
    xmlXPathErr(ctxt, v5);
    return;
  }
  value = ctxt->value;
  if (!value || value->type == XPATH_STRING)
  {
    ctxt->valueNr = v4;
    valueTab = ctxt->valueTab;
    goto LABEL_11;
  }
  xmlXPathStringFunction(ctxt, 1);
  valueNr = ctxt->valueNr;
  v4 = valueNr - 1;
  if (valueNr >= 1)
  {
    ctxt->valueNr = v4;
    valueTab = ctxt->valueTab;
    if (valueNr == 1)
    {
      v4 = 0;
      v8 = 0;
      goto LABEL_12;
    }
LABEL_11:
    v8 = valueTab[valueNr - 2];
LABEL_12:
    ctxt->value = v8;
    v9 = valueTab[v4];
    valueTab[v4] = 0;
    valueNr = v4;
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  v10 = ctxt->value;
  if (v10 && v10->type != XPATH_STRING)
  {
    xmlXPathStringFunction(ctxt, 1);
    valueNr = ctxt->valueNr;
  }
  v11 = valueNr - 1;
  if (valueNr < 1)
  {
    v13 = 0;
  }
  else
  {
    ctxt->valueNr = v11;
    v12 = ctxt->valueTab;
    if (valueNr == 1)
      v14 = 0;
    else
      v14 = v12[valueNr - 2];
    ctxt->value = v14;
    v13 = v12[v11];
    v12[v11] = 0;
  }
  v15 = (uint64x2_t *)xmlBufCreate();
  if (v15)
  {
    v16 = v15;
    v17 = xmlStrstr(v13->stringval, v9->stringval);
    if (v17)
    {
      v18 = (_DWORD)v17 - LODWORD(v13->stringval);
      v19 = xmlStrlen(v9->stringval) + v18;
      stringval = v13->stringval;
      v21 = &stringval[v19];
      v22 = xmlStrlen(stringval);
      xmlBufAdd(v16, v21, (v22 - v19));
    }
    context = ctxt->context;
    v24 = xmlBufContent((const xmlBuf *)v16);
    v25 = xmlXPathCacheNewString((uint64_t)context, v24);
    valuePush(ctxt, v25);
    xmlBufFree(v16);
  }
  xmlXPathReleaseObject((uint64_t)ctxt->context, v13);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v9);
}

void xmlXPathNormalizeFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  xmlXPathContextPtr context;
  xmlChar *Content;
  xmlXPathObject *v5;
  int valueNr;
  _DWORD *value;
  _DWORD *v8;
  xmlXPathObjectPtr *valueTab;
  unsigned int v10;
  xmlXPathObject *v11;
  int v12;
  xmlXPathObject *v13;
  const xmlChar *stringval;
  const xmlBuf *v15;
  const xmlBuf *v16;
  unsigned int v17;
  char v19;
  uint64_t v20;
  xmlChar *v21;
  xmlXPathObject *v22;
  xmlChar __src;

  if (!ctxt)
    return;
  v2 = ctxt;
  if (nargs != 1)
  {
    if (nargs)
    {
      v12 = 12;
LABEL_18:
      xmlXPathErr(ctxt, v12);
      return;
    }
    context = ctxt->context;
    Content = xmlNodeGetContent(context->node);
    if (!Content)
      Content = xmlStrdup((const xmlChar *)&byte_1B0865C1A);
    v5 = xmlXPathCacheWrapString((uint64_t)context, Content);
    valuePush(v2, v5);
  }
  valueNr = v2->valueNr;
  if (valueNr <= 0)
  {
    xmlXPathErr(v2, 23);
    return;
  }
  value = v2->value;
  if (!value)
  {
LABEL_17:
    ctxt = v2;
    v12 = 11;
    goto LABEL_18;
  }
  if (*value != 4)
  {
    xmlXPathStringFunction(v2, 1);
    v8 = v2->value;
    if (v8 && *v8 == 4)
    {
      valueNr = v2->valueNr;
      goto LABEL_13;
    }
    goto LABEL_17;
  }
LABEL_13:
  valueTab = v2->valueTab;
  v10 = valueNr - 1;
  v2->valueNr = valueNr - 1;
  if (valueNr == 1)
    v11 = 0;
  else
    v11 = valueTab[valueNr - 2];
  __src = 0;
  v2->value = v11;
  v13 = valueTab[v10];
  valueTab[v10] = 0;
  stringval = v13->stringval;
  v15 = (const xmlBuf *)xmlBufCreate();
  if (v15 && stringval)
  {
    v16 = v15;
    while (1)
    {
      v17 = *stringval;
      if (v17 > 0x20 || ((1 << v17) & 0x100002600) == 0)
        break;
      ++stringval;
    }
    __src = 0;
    while (1)
    {
      if (v17 <= 0x20u)
      {
        if (((1 << v17) & 0x100002600) != 0)
        {
          __src = 32;
          goto LABEL_33;
        }
        if (!(_BYTE)v17)
        {
          v20 = (uint64_t)v2->context;
          v21 = xmlBufContent(v16);
          v22 = xmlXPathCacheNewString(v20, v21);
          valuePush(v2, v22);
          xmlBufFree(v16);
          break;
        }
      }
      if (__src)
      {
        xmlBufAdd((uint64x2_t *)v16, &__src, 1uLL);
        __src = 0;
      }
      xmlBufAdd((uint64x2_t *)v16, stringval, 1uLL);
LABEL_33:
      v19 = *++stringval;
      LOBYTE(v17) = v19;
    }
  }
  xmlXPathReleaseObject((uint64_t)v2->context, v13);
}

void xmlXPathTranslateFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int valueNr;
  int v4;
  xmlXPathObjectPtr value;
  unsigned int v6;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v8;
  xmlXPathObject *v9;
  xmlXPathObjectPtr v10;
  int v11;
  xmlXPathObjectPtr *v12;
  xmlXPathObject *v13;
  xmlXPathObject *v14;
  xmlXPathObjectPtr v15;
  unsigned int v16;
  xmlXPathObjectPtr *v17;
  xmlXPathObject *v18;
  xmlXPathObject *v19;
  uint64x2_t *v20;
  int v21;
  const xmlChar *stringval;
  int v23;
  int v24;
  int v25;
  const xmlChar *v26;
  size_t v27;
  char v28;
  xmlGenericErrorFunc v29;
  void **v30;
  xmlXPathContextPtr context;
  xmlChar *v32;
  xmlXPathObject *v33;

  if (!ctxt)
    return;
  if (nargs != 3)
  {
    v4 = 12;
    goto LABEL_7;
  }
  valueNr = ctxt->valueNr;
  if (valueNr <= 2)
  {
    v4 = 23;
LABEL_7:
    xmlXPathErr(ctxt, v4);
    return;
  }
  value = ctxt->value;
  if (!value || value->type == XPATH_STRING)
  {
    v6 = valueNr - 1;
    ctxt->valueNr = valueNr - 1;
    valueTab = ctxt->valueTab;
    goto LABEL_11;
  }
  xmlXPathStringFunction(ctxt, 1);
  valueNr = ctxt->valueNr;
  v6 = valueNr - 1;
  if (valueNr >= 1)
  {
    ctxt->valueNr = v6;
    valueTab = ctxt->valueTab;
    if (valueNr == 1)
    {
      v6 = 0;
      v8 = 0;
      goto LABEL_12;
    }
LABEL_11:
    v8 = valueTab[valueNr - 2];
LABEL_12:
    ctxt->value = v8;
    v9 = valueTab[v6];
    valueTab[v6] = 0;
    valueNr = v6;
    goto LABEL_13;
  }
  v9 = 0;
LABEL_13:
  v10 = ctxt->value;
  if (v10 && v10->type != XPATH_STRING)
  {
    xmlXPathStringFunction(ctxt, 1);
    valueNr = ctxt->valueNr;
  }
  v11 = valueNr - 1;
  if (valueNr < 1)
  {
    v13 = 0;
    v11 = valueNr;
  }
  else
  {
    ctxt->valueNr = v11;
    v12 = ctxt->valueTab;
    if (valueNr == 1)
      v14 = 0;
    else
      v14 = v12[valueNr - 2];
    ctxt->value = v14;
    v13 = v12[v11];
    v12[v11] = 0;
  }
  v15 = ctxt->value;
  if (v15 && v15->type != XPATH_STRING)
  {
    xmlXPathStringFunction(ctxt, 1);
    v11 = ctxt->valueNr;
  }
  v16 = v11 - 1;
  if (v11 < 1)
  {
    v18 = 0;
  }
  else
  {
    ctxt->valueNr = v16;
    v17 = ctxt->valueTab;
    if (v11 == 1)
      v19 = 0;
    else
      v19 = v17[v11 - 2];
    ctxt->value = v19;
    v18 = v17[v16];
    v17[v16] = 0;
  }
  v20 = (uint64x2_t *)xmlBufCreate();
  if (v20)
  {
    v21 = xmlUTF8Strlen(v9->stringval);
    stringval = v18->stringval;
    v23 = *stringval;
    if (*stringval)
    {
      v24 = v21;
      do
      {
        v25 = xmlUTF8Strloc(v13->stringval, stringval);
        v26 = stringval;
        if (v25 < 0 || v25 < v24 && (v26 = xmlUTF8Strpos(v9->stringval, v25)) != 0)
        {
          v27 = xmlUTF8Strsize(v26, 1);
          xmlBufAdd(v20, v26, v27);
        }
        ++stringval;
        if ((v23 & 0x80) != 0)
        {
          if ((~v23 & 0xC0) != 0)
          {
LABEL_47:
            v29 = *__xmlGenericError();
            v30 = __xmlGenericErrorContext();
            v29(*v30, "xmlXPathTranslateFunction: Invalid UTF8 string\n");
            break;
          }
          while ((v23 & 0x40) != 0)
          {
            LOBYTE(v23) = 2 * v23;
            v28 = *stringval++;
            if ((v28 & 0xC0) != 0x80)
              goto LABEL_47;
          }
        }
        v23 = *stringval;
      }
      while (*stringval);
    }
  }
  context = ctxt->context;
  v32 = xmlBufContent((const xmlBuf *)v20);
  v33 = xmlXPathCacheNewString((uint64_t)context, v32);
  valuePush(ctxt, v33);
  xmlBufFree(v20);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v18);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v13);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v9);
}

void xmlXPathBooleanFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int valueNr;
  xmlXPathObjectPtr *valueTab;
  int v5;
  xmlXPathObject *v6;
  int v7;
  xmlXPathObject *v8;
  xmlXPathContextPtr context;
  int v10;
  xmlXPathObjectPtr v11;

  if (!ctxt)
    return;
  if (nargs != 1)
  {
    v7 = 12;
LABEL_15:
    xmlXPathErr(ctxt, v7);
    return;
  }
  valueNr = ctxt->valueNr;
  if (valueNr <= 0)
  {
    v7 = 23;
    goto LABEL_15;
  }
  valueTab = ctxt->valueTab;
  v5 = valueNr - 1;
  ctxt->valueNr = valueNr - 1;
  if (valueNr == 1)
    v6 = 0;
  else
    v6 = valueTab[valueNr - 2];
  ctxt->value = v6;
  v8 = valueTab[v5];
  valueTab[v5] = 0;
  if (!v8)
  {
    v7 = 10;
    goto LABEL_15;
  }
  if (v8->type != XPATH_BOOLEAN)
  {
    context = ctxt->context;
    v10 = xmlXPathCastToBoolean(v8);
    v11 = xmlXPathCacheNewBoolean((uint64_t)context, v10);
    xmlXPathReleaseObject((uint64_t)context, v8);
    v8 = v11;
  }
  valuePush(ctxt, v8);
}

void xmlXPathNotFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObjectPtr value;
  int v4;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs == 1)
    {
      if (ctxt->valueNr <= 0)
      {
        v4 = 23;
      }
      else
      {
        value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_BOOLEAN
            || (xmlXPathBooleanFunction(ctxt, 1), (value = v2->value) != 0) && value->type == XPATH_BOOLEAN)
          {
            value->BOOLval = value->BOOLval == 0;
            return;
          }
        }
        ctxt = v2;
        v4 = 11;
      }
    }
    else
    {
      v4 = 12;
    }
    xmlXPathErr(ctxt, v4);
  }
}

void xmlXPathTrueFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int v3;
  xmlXPathObject *v4;

  if (ctxt)
  {
    if (nargs)
    {
      v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }
    if (ctxt->valueNr < 0)
    {
      v3 = 23;
      goto LABEL_4;
    }
    v4 = xmlXPathCacheNewBoolean((uint64_t)ctxt->context, 1);
    valuePush(ctxt, v4);
  }
}

void xmlXPathFalseFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int v3;
  xmlXPathObject *v4;

  if (ctxt)
  {
    if (nargs)
    {
      v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }
    if (ctxt->valueNr < 0)
    {
      v3 = 23;
      goto LABEL_4;
    }
    v4 = xmlXPathCacheNewBoolean((uint64_t)ctxt->context, 0);
    valuePush(ctxt, v4);
  }
}

void xmlXPathLangFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  int valueNr;
  xmlXPathObjectPtr value;
  _DWORD *v5;
  xmlXPathObjectPtr *valueTab;
  unsigned int v7;
  xmlXPathObject *v8;
  int v9;
  xmlXPathObject *v10;
  xmlChar *stringval;
  xmlChar *Lang;
  xmlChar *v13;
  BOOL v14;
  int v15;
  __darwin_ct_rune_t v16;
  uint64_t v17;
  _BYTE *v18;
  __darwin_ct_rune_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  xmlXPathObject *v23;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs == 1)
    {
      valueNr = ctxt->valueNr;
      if (valueNr <= 0)
      {
        v9 = 23;
      }
      else
      {
        value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_STRING)
            goto LABEL_9;
          xmlXPathStringFunction(ctxt, 1);
          v5 = v2->value;
          if (v5 && *v5 == 4)
          {
            valueNr = v2->valueNr;
LABEL_9:
            valueTab = v2->valueTab;
            v7 = valueNr - 1;
            v2->valueNr = valueNr - 1;
            if (valueNr == 1)
              v8 = 0;
            else
              v8 = valueTab[valueNr - 2];
            v2->value = v8;
            v10 = valueTab[v7];
            valueTab[v7] = 0;
            stringval = v10->stringval;
            Lang = xmlNodeGetLang(v2->context->node);
            v13 = Lang;
            if (Lang)
              v14 = stringval == 0;
            else
              v14 = 1;
            if (v14)
            {
              v15 = 0;
              if (!Lang)
                goto LABEL_38;
            }
            else
            {
              v16 = *stringval;
              if (*stringval)
              {
                v17 = 0;
                v18 = stringval + 1;
                while (1)
                {
                  v19 = __toupper(v16);
                  if (v19 != __toupper(v13[v17]))
                    break;
                  v20 = v17 + 1;
                  v16 = v18[v17++];
                  if (!v16)
                    goto LABEL_30;
                }
                v15 = 0;
              }
              else
              {
                v20 = 0;
LABEL_30:
                v21 = v13[v20];
                if (v21)
                  v22 = v21 == 45;
                else
                  v22 = 1;
                v15 = v22;
              }
            }
            xmlFree(v13);
LABEL_38:
            xmlXPathReleaseObject((uint64_t)v2->context, v10);
            v23 = xmlXPathCacheNewBoolean((uint64_t)v2->context, v15);
            valuePush(v2, v23);
            return;
          }
        }
        ctxt = v2;
        v9 = 11;
      }
    }
    else
    {
      v9 = 12;
    }
    xmlXPathErr(ctxt, v9);
  }
}

void xmlXPathSumFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  int valueNr;
  xmlXPathObjectPtr value;
  xmlXPathObjectPtr *valueTab;
  int v6;
  xmlXPathObject *v7;
  int v8;
  xmlXPathObject *v9;
  int *p_nodeNr;
  double v11;
  uint64_t v12;
  xmlXPathObject *v13;

  if (!ctxt)
    return;
  if (nargs != 1)
  {
    v8 = 12;
LABEL_12:
    xmlXPathErr(ctxt, v8);
    return;
  }
  valueNr = ctxt->valueNr;
  if (valueNr <= 0)
  {
    v8 = 23;
    goto LABEL_12;
  }
  value = ctxt->value;
  if (!value || (value->type | 8) != 9)
  {
    v8 = 11;
    goto LABEL_12;
  }
  valueTab = ctxt->valueTab;
  v6 = valueNr - 1;
  ctxt->valueNr = valueNr - 1;
  if (valueNr == 1)
    v7 = 0;
  else
    v7 = valueTab[valueNr - 2];
  ctxt->value = v7;
  v9 = valueTab[v6];
  valueTab[v6] = 0;
  p_nodeNr = &v9->nodesetval->nodeNr;
  v11 = 0.0;
  if (p_nodeNr && *p_nodeNr >= 1)
  {
    v12 = 0;
    do
    {
      v11 = v11 + xmlXPathCastNodeToNumber(*(xmlNodePtr *)(*((_QWORD *)p_nodeNr + 1) + 8 * v12++));
      p_nodeNr = &v9->nodesetval->nodeNr;
    }
    while (v12 < *p_nodeNr);
  }
  v13 = xmlXPathCacheNewFloat(v11, (uint64_t)ctxt->context);
  valuePush(ctxt, v13);
  xmlXPathReleaseObject((uint64_t)ctxt->context, v9);
}

void xmlXPathFloorFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObjectPtr value;
  int v4;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs == 1)
    {
      if (ctxt->valueNr <= 0)
      {
        v4 = 23;
      }
      else
      {
        value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_NUMBER
            || (xmlXPathNumberFunction(ctxt, 1), (value = v2->value) != 0) && value->type == XPATH_NUMBER)
          {
            value->floatval = floor(value->floatval);
            return;
          }
        }
        ctxt = v2;
        v4 = 11;
      }
    }
    else
    {
      v4 = 12;
    }
    xmlXPathErr(ctxt, v4);
  }
}

void xmlXPathCeilingFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObjectPtr value;
  int v4;

  if (ctxt)
  {
    v2 = ctxt;
    if (nargs == 1)
    {
      if (ctxt->valueNr <= 0)
      {
        v4 = 23;
      }
      else
      {
        value = ctxt->value;
        if (value)
        {
          if (value->type == XPATH_NUMBER
            || (xmlXPathNumberFunction(ctxt, 1), (value = v2->value) != 0) && value->type == XPATH_NUMBER)
          {
            value->floatval = ceil(value->floatval);
            return;
          }
        }
        ctxt = v2;
        v4 = 11;
      }
    }
    else
    {
      v4 = 12;
    }
    xmlXPathErr(ctxt, v4);
  }
}

void xmlXPathRoundFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObjectPtr value;
  double floatval;
  double v6;
  double v7;
  int v8;

  if (!ctxt)
    return;
  v2 = ctxt;
  if (nargs != 1)
  {
    v8 = 12;
LABEL_18:
    xmlXPathErr(ctxt, v8);
    return;
  }
  if (ctxt->valueNr <= 0)
  {
    v8 = 23;
    goto LABEL_18;
  }
  value = ctxt->value;
  if (!value
    || value->type != XPATH_NUMBER
    && ((xmlXPathNumberFunction(ctxt, 1), (value = v2->value) == 0) || value->type != XPATH_NUMBER))
  {
    ctxt = v2;
    v8 = 11;
    goto LABEL_18;
  }
  floatval = value->floatval;
  if (floatval >= -0.5 && floatval < 0.5)
  {
    v7 = floatval * 0.0;
  }
  else
  {
    v6 = floor(floatval);
    if (floatval - v6 >= 0.5)
      v7 = v6 + 1.0;
    else
      v7 = v6;
  }
  value->floatval = v7;
}

xmlChar *__cdecl xmlXPathParseNCName(xmlXPathParserContextPtr ctxt)
{
  const xmlChar *cur;
  int v3;
  BOOL v4;
  uint64_t i;
  int v6;
  unsigned int v8;
  const xmlChar *v9;
  xmlChar *result;

  if (!ctxt)
    return 0;
  cur = ctxt->cur;
  if (!cur)
    return 0;
  v3 = *cur;
  if ((v3 - 97) < 0x1A || (v3 != 95 ? (v4 = (v3 - 65) > 0x19) : (v4 = 0), !v4))
  {
    for (i = 1; ; ++i)
    {
      v6 = cur[i];
      if ((v6 - 48) >= 0xA && (v6 & 0xFFFFFFDF) - 65 >= 0x1A)
      {
        v8 = v6 - 32;
        if (v8 > 0x3F)
          return xmlXPathParseNameComplex(ctxt, 0);
        if (((1 << v8) & 0x8000000000006000) == 0)
          break;
      }
    }
    if (((1 << v8) & 0x2800000144008401) != 0)
    {
      if ((_DWORD)i)
      {
        v9 = &cur[i];
        result = xmlStrndup(cur, i);
        ctxt->cur = v9;
        return result;
      }
      return 0;
    }
  }
  return xmlXPathParseNameComplex(ctxt, 0);
}

xmlChar *xmlXPathParseNameComplex(xmlXPathParserContext *a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  _BYTE *v6;
  BOOL v9;
  int v12;
  BOOL v13;
  BOOL v15;
  uint64_t v16;
  int v17;
  int v18;
  _BYTE *v19;
  BOOL v20;
  BOOL v21;
  BOOL v23;
  _BYTE *v24;
  int v25;
  xmlXPathParserContext *v26;
  int v27;
  int len;
  xmlChar cur[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[25];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v33 = 0u;
  memset(v34, 0, sizeof(v34));
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)cur = 0u;
  v30 = 0u;
  len = 0;
  v4 = xmlXPathCurrentChar(a1, &len);
  v5 = v4;
  if (v4 - 32 <= 0x3D && ((1 << (v4 - 32)) & 0x2800000140008401) != 0)
    return 0;
  if (v4 > 0xFF)
  {
    if (xmlCharInRange(v4, &xmlIsBaseCharGroup))
      v9 = 1;
    else
      v9 = v5 == 12295;
    if (!v9 && v5 - 40870 <= 0xFFFFAE59 && v5 - 12330 < 0xFFFFFFF7)
      return 0;
  }
  else if ((v4 & 0x1FFFDF) - 65 >= 0x1A && v4 - 192 >= 0x17 && v4 != 95 && v4 <= 0xF7 && v4 - 216 >= 0x1F)
  {
    v6 = 0;
    if (!a2 || v4 != 58)
      return v6;
  }
  v12 = 0;
  do
  {
    if (v5 <= 0x3E && ((1 << v5) & 0x4000800100000000) != 0)
    {
LABEL_64:
      if (!v12)
        return 0;
      return xmlStrndup(cur, v12);
    }
    if (v5 > 0xFF)
    {
      if (xmlCharInRange(v5, &xmlIsBaseCharGroup))
        v13 = 1;
      else
        v13 = v5 == 12295;
      v15 = !v13 && v5 - 19968 >= 0x51A6 && v5 - 12321 >= 9;
      if (!v15 || xmlCharInRange(v5, &xmlIsDigitGroup))
        goto LABEL_52;
    }
    else if ((v5 & 0x1FFFDF) - 65 < 0x1A || v5 - 192 < 0x17 || v5 > 0xF7 || v5 - 216 < 0x1F || v5 - 48 < 0xA)
    {
      goto LABEL_52;
    }
    if ((v5 - 45 > 0x32 || ((1 << (v5 - 45)) & 0x4000000000003) == 0) && (!a2 || v5 != 58))
    {
      if (v5 >= 0x100)
      {
        if (xmlCharInRange(v5, &xmlIsCombiningGroup))
          goto LABEL_52;
        v17 = xmlCharInRange(v5, &xmlIsExtenderGroup);
      }
      else
      {
        v17 = v5 == 183;
      }
      if (!v17)
        goto LABEL_64;
    }
LABEL_52:
    v16 = len;
    if (len == 1)
      cur[v12++] = v5;
    else
      v12 += xmlCopyChar(len, &cur[v12], v5);
    a1->cur += v16;
    v5 = xmlXPathCurrentChar(a1, &len);
  }
  while (v12 < 100);
  if (v12 >= 0xC351)
  {
LABEL_111:
    v26 = a1;
    v27 = 7;
    goto LABEL_112;
  }
  v18 = 2 * v12;
  v19 = xmlMallocAtomic((2 * v12));
  v6 = v19;
  if (!v19)
  {
    xmlXPathErr(a1, 15);
    return v6;
  }
  memcpy(v19, cur, v12);
  while (2)
  {
    if (v5 > 0xFF)
    {
      if (xmlCharInRange(v5, &xmlIsBaseCharGroup))
        v21 = 1;
      else
        v21 = v5 == 12295;
      v23 = !v21 && v5 - 19968 >= 0x51A6 && v5 - 12321 >= 9;
      if (v23 && !xmlCharInRange(v5, &xmlIsDigitGroup))
        goto LABEL_91;
    }
    else
    {
      v20 = (v5 & 0x1FFFDF) - 65 >= 0x1A && v5 - 192 >= 0x17;
      if (!v20 || v5 > 0xF7 || v5 - 216 < 0x1F || v5 - 48 < 0xA)
        goto LABEL_93;
LABEL_91:
      if ((v5 - 45 > 0x32 || ((1 << (v5 - 45)) & 0x4000000000003) == 0) && (!a2 || v5 != 58))
      {
        if (v5 >= 0x100)
        {
          if (xmlCharInRange(v5, &xmlIsCombiningGroup))
            goto LABEL_93;
          v25 = xmlCharInRange(v5, &xmlIsExtenderGroup);
        }
        else
        {
          v25 = v5 == 183;
        }
        if (!v25)
        {
          v6[v12] = 0;
          return v6;
        }
      }
    }
LABEL_93:
    if (v12 + 10 <= v18)
    {
LABEL_97:
      if (len == 1)
        v6[v12++] = v5;
      else
        v12 += xmlCopyChar(len, &v6[v12], v5);
      a1->cur += len;
      v5 = xmlXPathCurrentChar(a1, &len);
      continue;
    }
    break;
  }
  if (v18 >= 50001)
  {
    xmlFree(v6);
    goto LABEL_111;
  }
  v18 *= 2;
  v24 = xmlRealloc(v6, v18);
  if (v24)
  {
    v6 = v24;
    goto LABEL_97;
  }
  xmlFree(v6);
  v26 = a1;
  v27 = 15;
LABEL_112:
  xmlXPathErr(v26, v27);
  return 0;
}

xmlChar *__cdecl xmlXPathParseName(xmlXPathParserContextPtr ctxt)
{
  const xmlChar *cur;
  int v3;
  unint64_t i;
  int v5;
  const xmlChar *v8;
  xmlChar *result;

  if (!ctxt)
    return 0;
  cur = ctxt->cur;
  if (!cur)
    return 0;
  v3 = *cur;
  if ((v3 & 0xFFFFFFDF) - 65 >= 0x1A && v3 != 95 && v3 != 58)
    return xmlXPathParseNameComplex(ctxt, 1);
  for (i = 1; ; ++i)
  {
    v5 = cur[i];
    if ((v5 - 48) >= 0xA
      && (v5 & 0xFFFFFFDF) - 65 >= 0x1A
      && ((v5 - 45) > 0x32 || ((1 << (v5 - 45)) & 0x4000000002003) == 0))
    {
      break;
    }
  }
  if (!cur[i] || (v5 & 0x80) != 0)
    return xmlXPathParseNameComplex(ctxt, 1);
  v8 = &cur[i];
  if (i >= 0xC351)
  {
    ctxt->cur = v8;
    xmlXPathErr(ctxt, 7);
    return 0;
  }
  result = xmlStrndup(cur, i);
  ctxt->cur = v8;
  return result;
}

int xmlXPathIsNodeType(const xmlChar *name)
{
  const xmlChar *v1;

  if (name)
  {
    v1 = name;
    LODWORD(name) = xmlStrEqual(name, (const xmlChar *)"node")
                 || xmlStrEqual(v1, (const xmlChar *)"text")
                 || xmlStrEqual(v1, (const xmlChar *)"comment")
                 || xmlStrEqual(v1, (const xmlChar *)"processing-instruction") != 0;
  }
  return (int)name;
}

int xmlXPathEvalPredicate(xmlXPathContextPtr ctxt, xmlXPathObjectPtr res)
{
  xmlXPathContextPtr v2;
  xmlNodeSetPtr nodesetval;
  BOOL v4;
  xmlGenericErrorFunc v5;
  void **v6;

  v2 = ctxt;
  LODWORD(ctxt) = 0;
  if (v2 && res)
  {
    switch(res->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        nodesetval = res->nodesetval;
        if (!nodesetval)
          goto LABEL_14;
        v4 = nodesetval->nodeNr == 0;
        goto LABEL_10;
      case XPATH_BOOLEAN:
        LODWORD(ctxt) = res->BOOLval;
        break;
      case XPATH_NUMBER:
        LODWORD(ctxt) = res->floatval == (double)v2->proximityPosition;
        break;
      case XPATH_STRING:
        ctxt = (xmlXPathContextPtr)res->stringval;
        if (ctxt)
        {
          v4 = xmlStrlen((const xmlChar *)ctxt) == 0;
LABEL_10:
          LODWORD(ctxt) = !v4;
        }
        break;
      default:
        v5 = *__xmlGenericError();
        v6 = __xmlGenericErrorContext();
        v5(*v6, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 14036);
LABEL_14:
        LODWORD(ctxt) = 0;
        break;
    }
  }
  return (int)ctxt;
}

int xmlXPathEvaluatePredicateResult(xmlXPathParserContextPtr ctxt, xmlXPathObjectPtr res)
{
  int result;
  int *p_nodeNr;
  xmlChar *stringval;
  int v6;
  xmlGenericErrorFunc v7;
  void **v8;

  result = 0;
  if (ctxt && res)
  {
    switch(res->type)
    {
      case XPATH_NODESET:
      case XPATH_XSLT_TREE:
        p_nodeNr = &res->nodesetval->nodeNr;
        if (p_nodeNr)
          goto LABEL_12;
        goto LABEL_14;
      case XPATH_BOOLEAN:
        return res->BOOLval;
      case XPATH_NUMBER:
        return res->floatval == (double)ctxt->context->proximityPosition;
      case XPATH_STRING:
        stringval = res->stringval;
        if (!stringval)
          goto LABEL_14;
        v6 = *stringval;
        goto LABEL_13;
      case XPATH_LOCATIONSET:
        p_nodeNr = (int *)res->user;
        if (!p_nodeNr)
          goto LABEL_14;
LABEL_12:
        v6 = *p_nodeNr;
LABEL_13:
        result = v6 != 0;
        break;
      default:
        v7 = *__xmlGenericError();
        v8 = __xmlGenericErrorContext();
        v7(*v8, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 14087);
LABEL_14:
        result = 0;
        break;
    }
  }
  return result;
}

xmlXPathCompExprPtr xmlXPathCtxtCompile(xmlXPathContextPtr ctxt, const xmlChar *str)
{
  const xmlChar **comp;
  xmlXPathParserContextPtr v5;
  xmlXPathParserContext *v6;
  int v7;
  int v9;

  comp = xmlXPathTryStreamCompile((uint64_t)ctxt, (xmlChar *)str);
  if (!comp)
  {
    xmlInitParser();
    v5 = xmlXPathNewParserContext(str, ctxt);
    if (!v5)
      return 0;
    v6 = v5;
    v7 = linkedOnOrAfterFall2022OSVersions();
    if (ctxt && v7)
      ctxt->depth = 0;
    xmlXPathCompileExpr(v6, 1);
    if (v6->error)
    {
LABEL_9:
      xmlXPathFreeParserContext(v6);
      return 0;
    }
    if (*v6->cur)
    {
      xmlXPathErr(v6, 7);
      goto LABEL_9;
    }
    comp = (const xmlChar **)v6->comp;
    if (*(int *)comp >= 2 && ((_DWORD)comp[2] & 0x80000000) == 0)
    {
      v9 = linkedOnOrAfterFall2022OSVersions();
      if (ctxt && v9)
        ctxt->depth = 0;
      xmlXPathOptimizeExpression((uint64_t)v6, &comp[1][56 * *((int *)comp + 4)]);
    }
    v6->comp = 0;
    xmlXPathFreeParserContext(v6);
    comp[3] = xmlStrdup(str);
  }
  return (xmlXPathCompExprPtr)comp;
}

const xmlChar **xmlXPathTryStreamCompile(uint64_t a1, xmlChar *str)
{
  const xmlChar **v4;
  const xmlChar *v6;
  int v7;
  xmlDict *v8;
  const xmlChar **v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  xmlPattern *v16;
  const char *v17;
  const xmlChar **v18;

  if (xmlStrchr(str, 0x5Bu) || xmlStrchr(str, 0x28u) || xmlStrchr(str, 0x40u))
    return 0;
  v6 = xmlStrchr(str, 0x3Au);
  if (v6)
  {
    if (!a1)
      return 0;
    v7 = *(_DWORD *)(a1 + 88);
    if (!v7 || v6[1] == 58)
      return 0;
  }
  else
  {
    if (!a1)
    {
      v8 = 0;
      goto LABEL_20;
    }
    v7 = *(_DWORD *)(a1 + 88);
  }
  v8 = *(xmlDict **)(a1 + 328);
  if (v7 < 1)
  {
LABEL_20:
    v16 = xmlPatterncompile(str, v8, 1, 0);
    goto LABEL_24;
  }
  v9 = (const xmlChar **)xmlMalloc(8 * (2 * v7 + 2));
  v4 = v9;
  if (!v9)
  {
    v17 = "allocating namespaces array\n";
LABEL_31:
    xmlXPathErrMemory(a1, v17);
    return v4;
  }
  v10 = *(unsigned int *)(a1 + 88);
  if ((int)v10 < 1)
  {
    v14 = 0;
  }
  else
  {
    v11 = 0;
    v12 = v9 + 1;
    v13 = 8 * v10;
    v14 = 2 * v10;
    do
    {
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + v11);
      *(v12 - 1) = *(_QWORD *)(v15 + 16);
      *v12 = *(_QWORD *)(v15 + 24);
      v12 += 2;
      v11 += 8;
    }
    while (v13 != v11);
  }
  v9[v14] = 0;
  v9[v14 | 1u] = 0;
  v16 = xmlPatterncompile(str, v8, 1, v9);
  xmlFree(v4);
LABEL_24:
  if (!v16 || xmlPatternStreamable(v16) != 1)
  {
    xmlFreePattern(v16);
    return 0;
  }
  v18 = (const xmlChar **)xmlXPathNewCompExpr();
  v4 = v18;
  if (!v18)
  {
    v17 = "allocating streamable expression\n";
    goto LABEL_31;
  }
  v18[4] = (const xmlChar *)v8;
  v18[5] = (const xmlChar *)v16;
  if (v8)
    xmlDictReference(v8);
  return v4;
}

void xmlXPathCompileExpr(xmlXPathParserContext *a1, int a2)
{
  xmlXPathContextPtr context;
  int depth;
  const xmlChar *i;
  unsigned int v7;
  unsigned int v9;
  const xmlChar *j;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v15;
  xmlXPathCompExprPtr comp;
  signed int v18;

  context = a1->context;
  if (linkedOnOrAfterFall2022OSVersions() && context)
  {
    depth = context->depth;
    if (depth >= 5000)
    {
      xmlXPathErr(a1, 26);
      return;
    }
    context->depth = depth + 10;
  }
  xmlXPathCompAndExpr(a1);
  if (!a1->error)
  {
    for (i = a1->cur; ; a1->cur = i)
    {
      v7 = *i;
      if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0)
        break;
      ++i;
    }
    if (v7 == 111)
    {
      while (i[1] == 114)
      {
        v9 = *((_DWORD *)a1->comp + 4);
        for (j = i + 2; ; ++j)
        {
          a1->cur = j;
          v11 = *j;
          v12 = v11 > 0x20;
          v13 = (1 << v11) & 0x100002600;
          if (v12 || v13 == 0)
            break;
        }
        xmlXPathCompAndExpr(a1);
        if (a1->error)
          return;
        xmlXPathCompExprAdd((uint64_t)a1, v9, *((_DWORD *)a1->comp + 4), 2u, 0, 0, 0, 0, 0);
        for (i = a1->cur; ; a1->cur = i)
        {
          v15 = *i;
          if (v15 > 0x20 || ((1 << v15) & 0x100002600) == 0)
            break;
          ++i;
        }
        if (v15 != 111)
          break;
      }
    }
    if (a2)
    {
      comp = a1->comp;
      v18 = *((_DWORD *)comp + 4);
      if (*(_DWORD *)(*((_QWORD *)comp + 1) + 56 * v18) != 11)
        xmlXPathCompExprAdd((uint64_t)a1, v18, 0xFFFFFFFF, 0x11u, 0, 0, 0, 0, 0);
    }
    if (linkedOnOrAfterFall2022OSVersions())
    {
      if (context)
        context->depth -= 10;
    }
  }
}

uint64_t xmlXPathOptimizeExpression(uint64_t result, _DWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;

  if (*a2 != 11)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 56);
    if (*a2 == 10)
    {
      v5 = a2[1];
      if (v5 != -1 && a2[2] == -1)
      {
        v6 = *(_QWORD *)(v4 + 8);
        if (*(_DWORD *)(v6 + 56 * v5) == 10
          && *(_DWORD *)(v6 + 56 * v5 + 12) == 6
          && *(_DWORD *)(v6 + 56 * v5 + 8) == -1
          && *(_DWORD *)(v6 + 56 * v5 + 16) == 1
          && !*(_DWORD *)(v6 + 56 * v5 + 20))
        {
          v7 = a2[3] - 4;
          if (v7 <= 9 && ((0x207u >> v7) & 1) != 0)
          {
            v8 = dword_1B0865BD4[v7];
            a2[1] = *(_DWORD *)(v6 + 56 * v5 + 4);
            a2[3] = v8;
          }
        }
      }
    }
    result = linkedOnOrAfterFall2022OSVersions();
    if ((_DWORD)result)
    {
      v9 = *(_QWORD *)(v3 + 24);
      if (v9)
      {
        v10 = *(_DWORD *)(v9 + 368);
        if (v10 > 4999)
          return result;
        *(_DWORD *)(v9 + 368) = v10 + 1;
      }
    }
    else
    {
      v9 = 0;
    }
    v11 = a2[1];
    if (v11 != -1)
      xmlXPathOptimizeExpression(v3, *(_QWORD *)(v4 + 8) + 56 * v11);
    v12 = a2[2];
    if (v12 != -1)
      xmlXPathOptimizeExpression(v3, *(_QWORD *)(v4 + 8) + 56 * v12);
    result = linkedOnOrAfterFall2022OSVersions();
    if (v9)
    {
      if ((_DWORD)result)
        --*(_DWORD *)(v9 + 368);
    }
  }
  return result;
}

xmlXPathCompExprPtr xmlXPathCompile(const xmlChar *str)
{
  return xmlXPathCtxtCompile(0, str);
}

xmlXPathObjectPtr xmlXPathCompiledEval(xmlXPathCompExprPtr comp, xmlXPathContextPtr ctx)
{
  xmlXPathObject *v3;

  v3 = 0;
  xmlXPathCompiledEvalInternal((uint64_t)comp, (uint64_t)ctx, &v3, 0);
  return v3;
}

uint64_t xmlXPathCompiledEvalInternal(uint64_t a1, uint64_t a2, xmlXPathObject **a3, int a4)
{
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  xmlXPathObject *v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  xmlGenericErrorFunc v17;
  void **v18;
  xmlGenericErrorFunc v19;
  void **v20;
  char v21;

  if (!a2)
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0xCu, 1, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 14373, 0, 0, 0, 0, 0, "NULL context pointer\n", v21);
    return 0xFFFFFFFFLL;
  }
  if (!a1)
    return 0xFFFFFFFFLL;
  xmlInitParser();
  v8 = xmlMalloc(0x58uLL);
  v9 = (uint64_t)v8;
  if (v8)
  {
    v8[10] = 0;
    *((_OWORD *)v8 + 3) = 0u;
    *((_OWORD *)v8 + 4) = 0u;
    *((_OWORD *)v8 + 1) = 0u;
    *((_OWORD *)v8 + 2) = 0u;
    *(_OWORD *)v8 = 0u;
    v10 = xmlMalloc(0x50uLL);
    *(_QWORD *)(v9 + 48) = v10;
    if (v10)
    {
      *(_QWORD *)(v9 + 40) = 0xA00000000;
      *(_QWORD *)(v9 + 24) = a2;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 56) = a1;
    }
    else
    {
      xmlFree((void *)v9);
      xmlXPathErrMemory(a2, "creating evaluation context\n");
      v9 = 0;
    }
  }
  else
  {
    xmlXPathErrMemory(a2, "creating evaluation context\n");
  }
  v11 = xmlXPathRunEval(v9, a4);
  if (!*(_DWORD *)(v9 + 16))
  {
    v13 = *(_DWORD *)(v9 + 40);
    v14 = v13 - 1;
    if (v13 >= 1)
    {
      *(_DWORD *)(v9 + 40) = v14;
      v15 = *(_QWORD *)(v9 + 48);
      if (v13 == 1)
      {
        *(_QWORD *)(v9 + 32) = 0;
        v12 = *(xmlXPathObject **)(v15 + 8 * v14);
        *(_QWORD *)(v15 + 8 * v14) = 0;
        if (v12)
          goto LABEL_12;
      }
      else
      {
        *(_QWORD *)(v9 + 32) = *(_QWORD *)(v15 + 8 * (v13 - 2));
        v12 = *(xmlXPathObject **)(v15 + 8 * v14);
        *(_QWORD *)(v15 + 8 * v14) = 0;
        if (v12)
        {
          v17 = *__xmlGenericError();
          v18 = __xmlGenericErrorContext();
          v17(*v18, "xmlXPathCompiledEval: %d object(s) left on the stack.\n", *(_DWORD *)(v9 + 40));
          goto LABEL_12;
        }
      }
    }
    if (!a4)
    {
      v19 = *__xmlGenericError();
      v20 = __xmlGenericErrorContext();
      v19(*v20, "xmlXPathCompiledEval: No result on the stack.\n");
    }
  }
  v12 = 0;
LABEL_12:
  if (a3)
    *a3 = v12;
  else
    xmlXPathReleaseObject(a2, v12);
  *(_QWORD *)(v9 + 56) = 0;
  xmlXPathFreeParserContext((xmlXPathParserContextPtr)v9);
  return v11;
}

int xmlXPathCompiledEvalToBoolean(xmlXPathCompExprPtr comp, xmlXPathContextPtr ctxt)
{
  return xmlXPathCompiledEvalInternal((uint64_t)comp, (uint64_t)ctxt, 0, 1);
}

void xmlXPathEvalExpr(xmlXPathParserContextPtr ctxt)
{
  const xmlChar **v2;
  xmlXPathCompExpr *v3;
  xmlXPathCompExpr *comp;
  xmlXPathContextPtr context;
  int *v6;
  xmlXPathContextPtr v7;

  if (ctxt)
  {
    v2 = xmlXPathTryStreamCompile((uint64_t)ctxt->context, (xmlChar *)ctxt->base);
    if (v2)
    {
      v3 = (xmlXPathCompExpr *)v2;
      comp = ctxt->comp;
      if (comp)
        xmlXPathFreeCompExpr(comp);
      ctxt->comp = v3;
LABEL_6:
      xmlXPathRunEval((uint64_t)ctxt, 0);
      return;
    }
    if (linkedOnOrAfterFall2022OSVersions())
    {
      context = ctxt->context;
      if (context)
        context->depth = 0;
    }
    xmlXPathCompileExpr(ctxt, 1);
    if (!ctxt->error)
    {
      if (!*ctxt->cur)
      {
        v6 = (int *)ctxt->comp;
        if (*v6 >= 2 && (v6[4] & 0x80000000) == 0)
        {
          if (linkedOnOrAfterFall2022OSVersions())
          {
            v7 = ctxt->context;
            if (v7)
              v7->depth = 0;
          }
          xmlXPathOptimizeExpression((uint64_t)ctxt, (_DWORD *)(*((_QWORD *)ctxt->comp + 1) + 56 * *((int *)ctxt->comp + 4)));
        }
        goto LABEL_6;
      }
      xmlXPathErr(ctxt, 7);
    }
  }
}

uint64_t xmlXPathRunEval(uint64_t a1, int a2)
{
  void *v4;
  uint64_t v5;
  xmlPattern *v6;
  uint64_t result;
  unsigned int v8;
  xmlGenericErrorFunc v10;
  void **v11;
  xmlXPathObjectPtr value;

  if (!a1 || !*(_QWORD *)(a1 + 56))
    return 0xFFFFFFFFLL;
  if (linkedOnOrAfterFall2022OSVersions())
    *(_DWORD *)(*(_QWORD *)(a1 + 24) + 368) = 0;
  if (!*(_QWORD *)(a1 + 48))
  {
    v4 = xmlMalloc(0x50uLL);
    *(_QWORD *)(a1 + 48) = v4;
    if (!v4)
    {
      *(_DWORD *)(a1 + 16) = 15;
      xmlXPathErrMemory(*(_QWORD *)(a1 + 24), "creating evaluation context\n");
      return 0xFFFFFFFFLL;
    }
    *(_QWORD *)(a1 + 40) = 0xA00000000;
    *(_QWORD *)(a1 + 32) = 0;
  }
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(xmlPattern **)(v5 + 40);
  if (v6)
  {
    if (!a2)
    {
      value = 0;
      if (xmlXPathRunStreamEval(*(_QWORD *)(a1 + 24), v6, (uint64_t)&value, 0) != -1 && value != 0)
      {
        valuePush((xmlXPathParserContextPtr)a1, value);
        return 0;
      }
      if (value)
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), value);
      v5 = *(_QWORD *)(a1 + 56);
      v8 = *(_DWORD *)(v5 + 16);
      if ((v8 & 0x80000000) == 0)
      {
LABEL_23:
        xmlXPathCompOpEval(a1, (unsigned int *)(*(_QWORD *)(v5 + 8) + 56 * v8));
        return 0;
      }
      goto LABEL_24;
    }
    result = xmlXPathRunStreamEval(*(_QWORD *)(a1 + 24), v6, 0, 1);
    if ((_DWORD)result != -1)
      return result;
    v5 = *(_QWORD *)(a1 + 56);
  }
  v8 = *(_DWORD *)(v5 + 16);
  if ((v8 & 0x80000000) == 0)
  {
    if (a2)
      return xmlXPathCompOpEvalToBoolean(a1, (unsigned int *)(*(_QWORD *)(v5 + 8) + 56 * v8), 0);
    goto LABEL_23;
  }
LABEL_24:
  v10 = *__xmlGenericError();
  v11 = __xmlGenericErrorContext();
  v10(*v11, "xmlXPathRunEval: last is less than zero\n");
  return 0xFFFFFFFFLL;
}

xmlXPathObjectPtr xmlXPathEval(const xmlChar *str, xmlXPathContextPtr ctx)
{
  xmlXPathParserContext *v4;
  xmlXPathParserContext *v5;
  int valueNr;
  unsigned int v7;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v9;
  xmlGenericErrorFunc v10;
  void **v11;
  xmlGenericErrorFunc v12;
  void **v13;
  char v15;

  if (ctx)
  {
    xmlInitParser();
    v4 = xmlXPathNewParserContext(str, ctx);
    if (v4)
    {
      v5 = v4;
      xmlXPathEvalExpr(v4);
      if (v5->error)
      {
LABEL_13:
        v9 = 0;
        goto LABEL_14;
      }
      valueNr = v5->valueNr;
      v7 = valueNr - 1;
      if (valueNr >= 1)
      {
        v5->valueNr = v7;
        valueTab = v5->valueTab;
        if (valueNr == 1)
        {
          v5->value = 0;
          v9 = valueTab[v7];
          valueTab[v7] = 0;
          if (!v9)
            goto LABEL_12;
LABEL_14:
          xmlXPathFreeParserContext(v5);
          return v9;
        }
        v5->value = valueTab[valueNr - 2];
        v9 = valueTab[v7];
        valueTab[v7] = 0;
        if (v9)
        {
          v10 = *__xmlGenericError();
          v11 = __xmlGenericErrorContext();
          v10(*v11, "xmlXPathCompiledEval: %d object(s) left on the stack.\n", v5->valueNr);
          goto LABEL_14;
        }
      }
LABEL_12:
      v12 = *__xmlGenericError();
      v13 = __xmlGenericErrorContext();
      v12(*v13, "xmlXPathCompiledEval: No result on the stack.\n");
      goto LABEL_13;
    }
  }
  else
  {
    __xmlRaiseError(0, 0, 0, 0, 0, 0xCu, 1, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 14528, 0, 0, 0, 0, 0, "NULL context pointer\n", v15);
  }
  return 0;
}

int xmlXPathSetContextNode(xmlNodePtr node, xmlXPathContextPtr ctx)
{
  int result;

  result = -1;
  if (node && ctx && node->doc == ctx->doc)
  {
    result = 0;
    ctx->node = node;
  }
  return result;
}

xmlXPathObjectPtr xmlXPathNodeEval(xmlNodePtr node, const xmlChar *str, xmlXPathContextPtr ctx)
{
  if (!str || !node || !ctx || node->doc != ctx->doc)
    return 0;
  ctx->node = node;
  return xmlXPathEval(str, ctx);
}

double xmlXPathNameFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathParserContextPtr v2;
  int v3;
  xmlXPathObject *v4;
  int valueNr;
  _DWORD *value;
  xmlXPathObjectPtr *valueTab;
  unsigned int v8;
  xmlXPathObject *v9;
  double result;
  xmlXPathObject *v11;
  xmlNodeSetPtr nodesetval;
  xmlNodePtr v13;
  xmlChar *name;
  xmlXPathObject *v15;
  xmlXPathObject *v16;
  xmlNs *ns;
  const xmlChar *prefix;
  xmlChar *v19;
  xmlChar *v20;

  v2 = ctxt;
  if (!a2)
  {
    v4 = xmlXPathCacheNewNodeSet((uint64_t)ctxt->context, ctxt->context->node);
    valuePush(v2, v4);
LABEL_6:
    valueNr = v2->valueNr;
    if (valueNr <= 0)
    {
      ctxt = v2;
      v3 = 23;
      goto LABEL_14;
    }
    value = v2->value;
    if (!value || (*value | 8) != 9)
    {
      ctxt = v2;
      v3 = 11;
      goto LABEL_14;
    }
    valueTab = v2->valueTab;
    v8 = valueNr - 1;
    v2->valueNr = valueNr - 1;
    if (valueNr == 1)
      v9 = 0;
    else
      v9 = valueTab[valueNr - 2];
    v2->value = v9;
    v11 = valueTab[v8];
    valueTab[v8] = 0;
    nodesetval = v11->nodesetval;
    if (!nodesetval || !nodesetval->nodeNr)
      goto LABEL_20;
    v13 = *nodesetval->nodeTab;
    if (v13->type - 1 > 1)
    {
      v16 = xmlXPathCacheNewNodeSet((uint64_t)v2->context, v13);
      valuePush(v2, v16);
      xmlXPathLocalNameFunction(v2, 1);
      return xmlXPathReleaseObject((uint64_t)v2->context, v11);
    }
    name = (xmlChar *)v13->name;
    if (*name != 32)
    {
      ns = v13->ns;
      if (ns && (prefix = ns->prefix) != 0)
      {
        v19 = xmlBuildQName(name, prefix, 0, 0);
        v20 = v19;
        if (v19 == (*v11->nodesetval->nodeTab)->name)
          v20 = xmlStrdup(v19);
        if (!v20)
        {
          ctxt = v2;
          v3 = 15;
          goto LABEL_14;
        }
        v15 = xmlXPathCacheWrapString((uint64_t)v2->context, v20);
      }
      else
      {
        v15 = xmlXPathCacheNewString((uint64_t)v2->context, name);
      }
    }
    else
    {
LABEL_20:
      v15 = xmlXPathCacheNewCString((uint64_t)v2->context);
    }
    valuePush(v2, v15);
    return xmlXPathReleaseObject((uint64_t)v2->context, v11);
  }
  if (ctxt)
  {
    if (a2 != 1)
    {
      v3 = 12;
LABEL_14:
      xmlXPathErr(ctxt, v3);
      return result;
    }
    goto LABEL_6;
  }
  return result;
}

double xmlXPathEscapeUriFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  int v3;
  double result;
  int v5;
  xmlXPathObjectPtr value;
  int valueNr;
  unsigned int v8;
  xmlXPathObjectPtr *valueTab;
  xmlXPathObject *v10;
  xmlXPathObject *v11;
  const xmlBuf *v12;
  xmlChar *stringval;
  unsigned int v14;
  uint64_t v15;
  uint64x2_t *v16;
  const xmlChar *v17;
  size_t v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  int v22;
  char v23;
  xmlXPathContextPtr context;
  xmlChar *v25;
  xmlXPathObject *v26;
  int v27;

  if (ctxt)
  {
    if (a2 != 2)
    {
      v3 = 12;
      goto LABEL_6;
    }
    if (ctxt->valueNr <= 1)
    {
      v3 = 23;
LABEL_6:
      xmlXPathErr(ctxt, v3);
      return result;
    }
    v27 = 37;
    v5 = xmlXPathPopBoolean(ctxt);
    value = ctxt->value;
    if (value && value->type != XPATH_STRING)
      xmlXPathStringFunction(ctxt, 1);
    valueNr = ctxt->valueNr;
    v8 = valueNr - 1;
    if (valueNr < 1)
    {
      v10 = 0;
    }
    else
    {
      ctxt->valueNr = v8;
      valueTab = ctxt->valueTab;
      if (valueNr == 1)
        v11 = 0;
      else
        v11 = valueTab[valueNr - 2];
      ctxt->value = v11;
      v10 = valueTab[v8];
      valueTab[v8] = 0;
    }
    v12 = (const xmlBuf *)xmlBufCreate();
    if (v12)
    {
      stringval = v10->stringval;
      v14 = *stringval;
      if (*stringval)
      {
        do
        {
          if (v14 - 48 < 0xA || (v14 & 0xDF) - 65 < 0x1A)
            goto LABEL_22;
          v15 = v14 - 33;
          if (v15 > 0x3E)
            goto LABEL_33;
          if (((1 << (v14 - 33)) & 0x40000000000033C1) != 0)
            goto LABEL_22;
          if (v15 == 4)
          {
            if ((stringval[1] - 48) < 0xAu
              || (v20 = stringval[1] - 65, v20 <= 0x25) && ((1 << v20) & 0x3F0000003FLL) != 0)
            {
              if ((stringval[2] - 48) < 0xAu)
                goto LABEL_22;
              v21 = stringval[2] - 65;
              if (v21 <= 0x25 && ((1 << v21) & 0x3F0000003FLL) != 0)
                goto LABEL_22;
            }
          }
          else
          {
LABEL_33:
            if (v14 == 126)
              goto LABEL_22;
          }
          if (v5 || v14 - 36 > 0x1C || ((1 << (v14 - 36)) & 0x1AC00985) == 0)
          {
            v22 = (v14 >> 4) | 0x30;
            if (v14 >= 0xA0)
              LOBYTE(v22) = (v14 >> 4) + 55;
            BYTE1(v27) = v22;
            if ((v14 & 0xF) >= 0xA)
              v23 = (v14 & 0xF) + 55;
            else
              v23 = v14 & 0xF | 0x30;
            BYTE2(v27) = v23;
            v17 = (const xmlChar *)&v27;
            v16 = (uint64x2_t *)v12;
            v18 = 3;
            goto LABEL_23;
          }
LABEL_22:
          v16 = (uint64x2_t *)v12;
          v17 = stringval;
          v18 = 1;
LABEL_23:
          xmlBufAdd(v16, v17, v18);
          v19 = *++stringval;
          v14 = v19;
        }
        while (v19);
      }
    }
    context = ctxt->context;
    v25 = xmlBufContent(v12);
    v26 = xmlXPathCacheNewString((uint64_t)context, v25);
    valuePush(ctxt, v26);
    xmlBufFree(v12);
    return xmlXPathReleaseObject((uint64_t)ctxt->context, v10);
  }
  return result;
}

uint64_t xmlXPathCmpNodesExt(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;

  v2 = 4294967294;
  if (!a1 || !a2)
    return v2;
  if (a1 == a2)
    return 0;
  v3 = *(_DWORD *)(a1 + 8);
  v2 = 1;
  if (v3 > 0x12)
  {
LABEL_15:
    if (v3 == 1)
    {
      if (*(_DWORD *)(a2 + 8) == 1)
      {
        v7 = *(_QWORD *)(a1 + 80);
        if ((v7 & 0x8000000000000000) == 0
          || (v8 = *(_QWORD *)(a2 + 80), (v8 & 0x8000000000000000) == 0)
          || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a2 + 64))
        {
          v9 = a1;
LABEL_57:
          if (v9 != *(_QWORD *)(a2 + 56))
          {
            if (v9 == *(_QWORD *)(a2 + 48))
              return 0xFFFFFFFFLL;
            v20 = *(_QWORD *)(a2 + 40);
            if (v20)
            {
              v21 = 0;
              while (v20 != v9)
              {
                ++v21;
                v22 = v20;
                v20 = *(_QWORD *)(v20 + 40);
                if (!v20)
                  goto LABEL_90;
              }
              return 1;
            }
            v21 = 0;
            v22 = a2;
LABEL_90:
            v25 = *(_QWORD *)(v9 + 40);
            if (v25)
            {
              v26 = 0;
              while (v25 != a2)
              {
                v27 = v25;
                ++v26;
                v25 = *(_QWORD *)(v25 + 40);
                if (!v25)
                  goto LABEL_96;
              }
              return 0xFFFFFFFFLL;
            }
            v26 = 0;
            v27 = v9;
LABEL_96:
            if (v22 != v27)
              return 4294967294;
            if (v26 > v21)
            {
              do
              {
                --v26;
                v9 = *(_QWORD *)(v9 + 40);
              }
              while (v26 > v21);
              v26 = v21;
            }
            while (v21 > v26)
            {
              --v21;
              a2 = *(_QWORD *)(a2 + 40);
            }
            v2 = 4294967294;
            while (1)
            {
              v28 = *(_QWORD *)(v9 + 40);
              v29 = *(_QWORD *)(a2 + 40);
              if (v28 == v29)
                break;
              if (v28)
                v30 = v29 == 0;
              else
                v30 = 1;
              v9 = *(_QWORD *)(v9 + 40);
              a2 = *(_QWORD *)(a2 + 40);
              if (v30)
                return v2;
            }
            if (v9 != *(_QWORD *)(a2 + 56))
            {
              if (v9 == *(_QWORD *)(a2 + 48))
                return 0xFFFFFFFFLL;
              if (*(_DWORD *)(v9 + 8) != 1
                || *(_DWORD *)(a2 + 8) != 1
                || (v31 = *(_QWORD *)(v9 + 80), (v31 & 0x8000000000000000) == 0)
                || (v32 = *(_QWORD *)(a2 + 80), (v32 & 0x8000000000000000) == 0)
                || *(_QWORD *)(v9 + 64) != *(_QWORD *)(a2 + 64))
              {
LABEL_118:
                v2 = 1;
                while (1)
                {
                  v9 = *(_QWORD *)(v9 + 48);
                  if (!v9)
                    break;
                  if (v9 == a2)
                    return v2;
                }
                return 0xFFFFFFFFLL;
              }
              if (v32 >= v31)
              {
                if (v32 <= v31)
                  goto LABEL_118;
                return 0xFFFFFFFFLL;
              }
            }
          }
          return 1;
        }
        if (v8 < v7)
          return 1;
        if (v8 > v7)
          return 0xFFFFFFFFLL;
      }
      v6 = 0;
      v10 = 1;
      v9 = a1;
    }
    else
    {
      v6 = 0;
      v9 = a1;
      v10 = 1;
    }
    a1 = 0;
    goto LABEL_38;
  }
  if (((1 << v3) & 0x198) == 0)
  {
    if (v3 == 2)
    {
      v10 = 0;
      v9 = *(_QWORD *)(a1 + 40);
      v6 = 1;
      goto LABEL_38;
    }
    if (v3 == 18)
      return v2;
    goto LABEL_15;
  }
  v4 = *(_QWORD *)(a1 + 56);
  v5 = a1;
  if (v4)
  {
    while (1)
    {
      v5 = v4;
      if (*(_DWORD *)(v4 + 8) == 1)
        break;
      v4 = *(_QWORD *)(v4 + 56);
      if (!v4)
        goto LABEL_9;
    }
    v6 = 3;
  }
  else
  {
LABEL_9:
    v5 = *(_QWORD *)(v5 + 40);
    if (!v5 || *(_DWORD *)(v5 + 8) != 1)
    {
      v6 = 0;
      v10 = 1;
      v9 = a1;
      goto LABEL_38;
    }
    v6 = 2;
  }
  v11 = *(_QWORD *)(v5 + 80);
  v12 = v11 >= 0;
  if (v11 < 0)
    v9 = v5;
  else
    v9 = a1;
  v10 = v12;
  if (v12)
    v6 = 0;
LABEL_38:
  v13 = 0;
  v14 = *(_DWORD *)(a2 + 8);
  if (v14 > 0x12)
    goto LABEL_51;
  v2 = 1;
  if (((1 << v14) & 0x198) != 0)
  {
    v15 = *(_QWORD *)(a2 + 56);
    v16 = a2;
    if (v15)
    {
      while (1)
      {
        v16 = v15;
        if (*(_DWORD *)(v15 + 8) == 1)
          break;
        v15 = *(_QWORD *)(v15 + 56);
        if (!v15)
          goto LABEL_43;
      }
      v17 = 3;
    }
    else
    {
LABEL_43:
      v16 = *(_QWORD *)(v16 + 40);
      v13 = a2;
      if (!v16)
        goto LABEL_51;
      v13 = a2;
      if (*(_DWORD *)(v16 + 8) != 1)
        goto LABEL_51;
      v17 = 2;
    }
    v13 = a2;
    if ((*(_QWORD *)(v16 + 80) & 0x8000000000000000) == 0)
    {
LABEL_51:
      if ((v10 & 1) != 0)
        goto LABEL_52;
      v17 = 0;
      goto LABEL_67;
    }
    v13 = a2;
    a2 = v16;
  }
  else
  {
    if (v14 != 2)
    {
      if (v14 == 18)
        return v2;
      goto LABEL_51;
    }
    v13 = a2;
    a2 = *(_QWORD *)(a2 + 40);
    v17 = 1;
  }
LABEL_67:
  if (v9 != a2)
  {
    if (v6 >= 2 && v17 == 3)
    {
      v23 = v9;
      v2 = 1;
      while (1)
      {
        v23 = *(_QWORD *)(v23 + 40);
        if (!v23)
          break;
        if (v23 == a2)
          return v2;
      }
    }
    if (v6 == 3 && v17 >= 2)
    {
      v24 = a2;
      v2 = 0xFFFFFFFFLL;
      while (1)
      {
        v24 = *(_QWORD *)(v24 + 40);
        if (!v24)
          break;
        if (v24 == v9)
          return v2;
      }
    }
LABEL_52:
    if (*(_DWORD *)(v9 + 8) == 1 && *(_DWORD *)(a2 + 8) == 1)
    {
      v18 = *(_QWORD *)(v9 + 80);
      if (v18 < 0)
      {
        v19 = *(_QWORD *)(a2 + 80);
        if (v19 < 0 && *(_QWORD *)(v9 + 64) == *(_QWORD *)(a2 + 64))
        {
          if (v19 < v18)
            return 1;
          if (v19 > v18)
            return 0xFFFFFFFFLL;
        }
      }
    }
    goto LABEL_57;
  }
  if (v6 == v17)
  {
    v2 = 0xFFFFFFFFLL;
    while (1)
    {
      v13 = *(_QWORD *)(v13 + 56);
      if (!v13)
        break;
      if (v13 == a1)
        return 1;
      if (*(_DWORD *)(v13 + 8) == 1)
        return v2;
    }
    return 0xFFFFFFFFLL;
  }
  if (v6 < v17)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t libxml_domnode_tim_sort_merge(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  void *v12;
  uint64_t *v13;
  uint64_t result;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;

  v5 = a2 + 16 * a3;
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v5 - 32);
  v8 = *(_QWORD *)(v5 - 24);
  if (v8 >= v6)
    v9 = *(_QWORD *)(v5 - 8);
  else
    v9 = *(_QWORD *)(v5 - 24);
  v10 = *(void **)(a4 + 8);
  if (*(_QWORD *)a4 < v9)
  {
    v12 = malloc_type_realloc(*(void **)(a4 + 8), 8 * v9, 0x2004093837F09uLL);
    if (!v12)
    {
      fprintf((FILE *)*MEMORY[0x1E0C80C10], "Error allocating temporary storage for tim sort: need %lu bytes", 8 * v9);
      exit(1);
    }
    v10 = v12;
    *(_QWORD *)a4 = v9;
    *(_QWORD *)(a4 + 8) = v12;
  }
  if (v8 >= v6)
  {
    v22 = v7 + v8;
    result = (uint64_t)memcpy(v10, (const void *)(a1 + 8 * (v7 + v8)), 8 * v6);
    v23 = v7 + v8 + v6;
    if (v23 > v7)
    {
      v24 = a1 - 8;
      do
      {
        if (v6 && v22 > v7)
        {
          v25 = v7;
          v26 = v10;
          v27 = v24;
          v31 = v22--;
          v28 = *(_QWORD *)(a1 + 8 * v22);
          v29 = v26;
          v30 = *((_QWORD *)v26 + v6 - 1);
          result = xmlXPathCmpNodesExt(v28, v30);
          if ((_DWORD)result == -2 || (result & 0x80000000) == 0)
          {
            v24 = v27;
            *(_QWORD *)(v27 + 8 * v23) = v30;
            --v6;
            v10 = v29;
            v7 = v25;
            v22 = v31;
          }
          else
          {
            v24 = v27;
            *(_QWORD *)(v27 + 8 * v23) = v28;
            v10 = v29;
            v7 = v25;
          }
        }
        else
        {
          if (!v6)
            return result;
          --v6;
          *(_QWORD *)(v24 + 8 * v23) = *((_QWORD *)v10 + v6);
        }
        --v23;
      }
      while (v23 > v7);
    }
  }
  else
  {
    v13 = (uint64_t *)(a1 + 8 * v7);
    result = (uint64_t)memcpy(v10, v13, 8 * v8);
    v15 = v7 + v8;
    v16 = v7 + v8 + v6;
    if (v7 < v16)
    {
      v17 = 0;
      v18 = v8 + v6;
      do
      {
        if (v17 >= v8 || v15 >= v16)
        {
          if (v17 >= v8)
            return result;
          v21 = *((_QWORD *)v10 + v17++);
          *v13 = v21;
        }
        else
        {
          v19 = *((_QWORD *)v10 + v17);
          v20 = *(_QWORD *)(a1 + 8 * v15);
          result = xmlXPathCmpNodesExt(v19, v20);
          if ((_DWORD)result == -2 || (result & 0x80000000) == 0)
          {
            ++v17;
            *v13 = v19;
          }
          else
          {
            ++v15;
            *v13 = v20;
          }
        }
        ++v13;
        --v18;
      }
      while (v18);
    }
  }
  return result;
}

void xmlXPathCacheFreeObjectList(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  void **v4;

  if (*(int *)(a1 + 8) >= 1)
  {
    v2 = 0;
    do
    {
      v3 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v2);
      v4 = (void **)v3[1];
      if (v4)
      {
        if (v4[1])
        {
          xmlFree(v4[1]);
          v4 = (void **)v3[1];
        }
        xmlFree(v4);
      }
      xmlFree(v3);
      ++v2;
    }
    while (v2 < *(int *)(a1 + 8));
  }
  if (*(_QWORD *)a1)
    xmlFree(*(void **)a1);
  xmlFree((void *)a1);
}

_QWORD *xmlPointerListCreate()
{
  _QWORD *v0;
  _QWORD *v1;

  v0 = xmlMalloc(0x10uLL);
  v1 = v0;
  if (v0)
  {
    *v0 = 0;
    v0[1] = 0;
    xmlPointerListAddSize((uint64_t)v0, 0, 10);
    *((_DWORD *)v1 + 2) = 0;
  }
  else
  {
    xmlXPathErrMemory(0, "xmlPointerListCreate: allocating item\n");
  }
  return v1;
}

uint64_t xmlPointerListAddSize(uint64_t a1, uint64_t a2, int a3)
{
  void *v5;
  int v6;
  uint64_t v7;
  const char *v8;
  unsigned int v9;
  uint64_t v10;

  v5 = *(void **)a1;
  if (v5)
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(int *)(a1 + 12);
    if ((int)v7 <= v6)
    {
      if ((int)v7 >= 50000001)
      {
        v8 = "xmlPointerListAddSize: re-allocating item\n";
LABEL_14:
        xmlXPathErrMemory(0, v8);
        return 0xFFFFFFFFLL;
      }
      *(_DWORD *)(a1 + 12) = 2 * v7;
      v5 = xmlRealloc(v5, 16 * v7);
      *(_QWORD *)a1 = v5;
      if (!v5)
      {
        xmlXPathErrMemory(0, "xmlPointerListAddSize: re-allocating item\n");
        *(_DWORD *)(a1 + 12) = 0;
        return 0xFFFFFFFFLL;
      }
      v6 = *(_DWORD *)(a1 + 8);
    }
  }
  else
  {
    if (a3 <= 1)
      v9 = 1;
    else
      v9 = a3;
    v5 = xmlMalloc(8 * v9);
    *(_QWORD *)a1 = v5;
    if (!v5)
    {
      v8 = "xmlPointerListCreate: allocating item\n";
      goto LABEL_14;
    }
    v6 = 0;
    *(_DWORD *)(a1 + 12) = v9;
  }
  v10 = 0;
  *(_DWORD *)(a1 + 8) = v6 + 1;
  *((_QWORD *)v5 + v6) = a2;
  return v10;
}

unsigned __int8 *xmlXPathNodeValHash(xmlDoc *doc)
{
  xmlDoc *v1;
  unsigned __int8 *intSubset;
  xmlElementType type;
  _xmlNode *children;
  int v5;
  xmlDoc *v6;
  xmlElementType v7;
  xmlChar *content;
  int v9;
  BOOL v10;
  BOOL v11;
  BOOL v12;

  if (!doc)
    return 0;
  v1 = doc;
  if (doc->type == XML_DOCUMENT_NODE)
  {
    doc = (xmlDoc *)xmlDocGetRootElement(doc);
    if (!doc)
    {
      doc = (xmlDoc *)v1->children;
      if (!doc)
        return 0;
    }
  }
  type = doc->type;
  if (type > XML_NAMESPACE_DECL)
    goto LABEL_16;
  if (((1 << type) & 0x198) != 0)
  {
    intSubset = (unsigned __int8 *)doc->intSubset;
    if (!intSubset)
      return intSubset;
LABEL_14:
    if (*intSubset)
      return (unsigned __int8 *)(*intSubset | (intSubset[1] << 8));
    return 0;
  }
  if (type == XML_ATTRIBUTE_NODE)
  {
LABEL_17:
    children = doc->children;
    if (children)
    {
      intSubset = 0;
      v5 = 2;
      while (1)
      {
        v6 = (xmlDoc *)children;
        v7 = children->type;
        if (v7 - 3 <= 1)
        {
          content = children->content;
          if (content)
          {
            v9 = *content;
            if (*content)
            {
              if (v5 == 1)
                return (unsigned __int8 *)((_DWORD)intSubset + (v9 << 8));
              if (content[1])
                return (unsigned __int8 *)(v9 | (content[1] << 8));
              v5 = 1;
              intSubset = (unsigned __int8 *)*content;
            }
          }
        }
        children = v6->children;
        if (children)
          v10 = v7 == XML_ENTITY_REF_NODE;
        else
          v10 = 1;
        v11 = v10 || v7 == XML_DTD_NODE;
        if (v11 || children->type == XML_ENTITY_DECL)
        {
          if (v6 == doc)
            return intSubset;
          while (1)
          {
            children = v6->next;
            if (children)
              break;
            v6 = (xmlDoc *)v6->parent;
            if (v6)
              v12 = v6 == doc;
            else
              v12 = 1;
            if (v12)
              return intSubset;
          }
        }
      }
    }
    return 0;
  }
  if (type != XML_NAMESPACE_DECL)
  {
LABEL_16:
    if (type != XML_ELEMENT_NODE)
      return 0;
    goto LABEL_17;
  }
  intSubset = (unsigned __int8 *)doc->name;
  if (intSubset)
    goto LABEL_14;
  return intSubset;
}

uint64_t xmlXPathCurrentChar(xmlXPathParserContext *a1, _DWORD *a2)
{
  const xmlChar *cur;
  uint64_t v3;
  _BYTE *v4;
  int v5;
  int v6;
  unsigned __int8 v7;
  int v8;
  unsigned int v10;

  cur = a1->cur;
  if ((*(char *)a1->cur & 0x80000000) == 0)
  {
    *a2 = 1;
    return *cur;
  }
  v4 = cur + 1;
  if ((cur[1] & 0xC0) != 0x80)
    goto LABEL_10;
  v5 = *a1->cur;
  if ((~v5 & 0xE0) != 0)
  {
    *a2 = 2;
    v10 = (*cur & 0x1F) << 6;
    goto LABEL_16;
  }
  v4 = cur + 2;
  if ((cur[2] & 0xC0) != 0x80)
    goto LABEL_10;
  if ((~v5 & 0xF0) != 0)
  {
    *a2 = 3;
    v6 = (*cur & 0xF) << 12;
    v7 = cur[1];
    goto LABEL_15;
  }
  if ((v5 & 0xF8) != 0xF0 || (v4 = cur + 3, (cur[3] & 0xC0) != 0x80))
  {
LABEL_10:
    *a2 = 0;
    v8 = 20;
LABEL_11:
    xmlXPathErr(a1, v8);
    return 0;
  }
  *a2 = 4;
  v6 = ((*cur & 7) << 18) | ((cur[1] & 0x3F) << 12);
  v7 = cur[2];
LABEL_15:
  v10 = v6 & 0xFFFFF03F | ((v7 & 0x3F) << 6);
LABEL_16:
  v3 = v10 | *v4 & 0x3F;
  if (v3 > 0xFF)
  {
    if (v3 >> 11 < 0x1B
      || (v3 - 57344) >> 1 < 0xFFF
      || (v3 - 0x10000) < 0x100000)
    {
      return v3;
    }
    goto LABEL_27;
  }
  if (v3 <= 0x1F && (v3 > 0xD || ((1 << v3) & 0x2600) == 0))
  {
LABEL_27:
    v8 = 21;
    goto LABEL_11;
  }
  return v3;
}

void xmlXPathCompAndExpr(xmlXPathParserContext *a1)
{
  const xmlChar *i;
  unsigned int v3;
  unsigned int v5;
  const xmlChar *j;
  unsigned int v7;
  BOOL v8;
  uint64_t v9;
  unsigned int v11;

  xmlXPathCompEqualityExpr(a1);
  if (!a1->error)
  {
    for (i = a1->cur; ; a1->cur = i)
    {
      v3 = *i;
      if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
        break;
      ++i;
    }
    if (v3 == 97)
    {
      do
      {
        if (i[1] != 110 || i[2] != 100)
          break;
        v5 = *((_DWORD *)a1->comp + 4);
        for (j = i + 3; ; ++j)
        {
          a1->cur = j;
          v7 = *j;
          v8 = v7 > 0x20;
          v9 = (1 << v7) & 0x100002600;
          if (v8 || v9 == 0)
            break;
        }
        xmlXPathCompEqualityExpr(a1);
        if (a1->error)
          break;
        xmlXPathCompExprAdd((uint64_t)a1, v5, *((_DWORD *)a1->comp + 4), 1u, 0, 0, 0, 0, 0);
        for (i = a1->cur; ; a1->cur = ++i)
        {
          v11 = *i;
          if (v11 > 0x20 || ((1 << v11) & 0x100002600) == 0)
            break;
        }
      }
      while (v11 == 97);
    }
  }
}

uint64_t xmlXPathCompExprAdd(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, xmlChar *name, xmlChar *a9)
{
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  int v21;
  unsigned int *v22;
  BOOL v23;
  char *v25;

  v16 = *(unsigned int **)(a1 + 56);
  v17 = *v16;
  v18 = (int)v16[1];
  if ((int)v17 < (int)v18)
  {
    v19 = (_QWORD *)*((_QWORD *)v16 + 1);
    goto LABEL_6;
  }
  if ((int)v18 >= 1000000)
  {
LABEL_22:
    *(_DWORD *)(a1 + 16) = 15;
    xmlXPathErrMemory(*(_QWORD *)(a1 + 24), "adding step\n");
    return 0xFFFFFFFFLL;
  }
  v16[1] = 2 * v18;
  v19 = xmlRealloc(*((void **)v16 + 1), 112 * v18);
  if (!v19)
  {
    v16[1] = (int)v16[1] / 2;
    goto LABEL_22;
  }
  *((_QWORD *)v16 + 1) = v19;
  v17 = *v16;
LABEL_6:
  v16[4] = v17;
  v21 = v17;
  v22 = (unsigned int *)&v19[7 * (int)v17];
  *v22 = a4;
  v22[1] = a2;
  v22[2] = a3;
  v22[3] = a5;
  v22[4] = a6;
  v22[5] = a7;
  if (*((_QWORD *)v16 + 4))
    v23 = a4 > 0xD;
  else
    v23 = 1;
  if (!v23 && ((1 << a4) & 0x3400) != 0)
  {
    if (name)
    {
      *(_QWORD *)(*((_QWORD *)v16 + 1) + 56 * (int)*v16 + 24) = xmlDictLookup(*((xmlDictPtr *)v16 + 4), name, -1);
      xmlFree(name);
      if (a9)
      {
LABEL_17:
        *(_QWORD *)(*((_QWORD *)v16 + 1) + 56 * (int)*v16 + 32) = xmlDictLookup(*((xmlDictPtr *)v16 + 4), a9, -1);
        xmlFree(a9);
        v19 = (_QWORD *)*((_QWORD *)v16 + 1);
        v17 = *v16;
        v21 = *v16;
        goto LABEL_20;
      }
    }
    else
    {
      v19[7 * (int)v17 + 3] = 0;
      if (a9)
        goto LABEL_17;
    }
    v19 = (_QWORD *)*((_QWORD *)v16 + 1);
    v17 = *v16;
    v21 = v17;
    v19[7 * (int)v17 + 4] = 0;
    goto LABEL_20;
  }
  v25 = (char *)&v19[7 * (int)v17];
  *((_QWORD *)v25 + 3) = name;
  *((_QWORD *)v25 + 4) = a9;
LABEL_20:
  v19[7 * v21 + 5] = 0;
  *v16 = v17 + 1;
  return v17;
}

void xmlXPathCompEqualityExpr(xmlXPathParserContext *a1)
{
  const xmlChar *i;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  const xmlChar *v9;
  const xmlChar *j;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;

  xmlXPathCompRelationalExpr(a1);
  if (!a1->error)
  {
    for (i = a1->cur; ; a1->cur = i)
    {
      v3 = *i;
      if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
        break;
      ++i;
    }
    LOBYTE(v5) = *i;
    while (v5 == 33)
    {
      v9 = i + 1;
      if (i[1] != 61)
        return;
      v8 = 0;
      v6 = *((_DWORD *)a1->comp + 4);
      a1->cur = v9;
      if (*v9)
      {
        v7 = 2;
LABEL_16:
        v9 = &i[v7];
        a1->cur = v9;
      }
      for (j = v9 + 1; ; ++j)
      {
        v11 = *(j - 1);
        v12 = v11 > 0x20;
        v13 = (1 << v11) & 0x100002600;
        if (v12 || v13 == 0)
          break;
        a1->cur = j;
      }
      xmlXPathCompRelationalExpr(a1);
      if (a1->error)
        return;
      xmlXPathCompExprAdd((uint64_t)a1, v6, *((_DWORD *)a1->comp + 4), 3u, v8, 0, 0, 0, 0);
      for (i = a1->cur; ; a1->cur = i)
      {
        v5 = *i;
        if (v5 > 0x20 || ((1 << v5) & 0x100002600) == 0)
          break;
        ++i;
      }
    }
    if (v5 != 61)
      return;
    v6 = *((_DWORD *)a1->comp + 4);
    v7 = 1;
    v8 = 1;
    goto LABEL_16;
  }
}

void xmlXPathCompRelationalExpr(xmlXPathParserContext *a1)
{
  const xmlChar *i;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  const xmlChar *v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v12;
  uint64_t v13;

  xmlXPathCompAdditiveExpr(a1);
  if (!a1->error)
  {
    for (i = a1->cur; ; a1->cur = i)
    {
      v3 = *i;
      if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
        break;
      ++i;
    }
    v5 = *i;
    while ((v5 | 2) == 0x3E)
    {
      v6 = *((_DWORD *)a1->comp + 4);
      v7 = v5 == 60;
      v8 = i + 1;
      v9 = i[1];
      a1->cur = i + 1;
      v10 = v9 != 61;
      if (v9 == 61 && *v8)
      {
        v8 = i + 2;
        goto LABEL_14;
      }
      while (1)
      {
        v11 = *v8;
        v12 = v11 > 0x20;
        v13 = (1 << v11) & 0x100002600;
        if (v12 || v13 == 0)
          break;
        ++v8;
LABEL_14:
        a1->cur = v8;
      }
      xmlXPathCompAdditiveExpr(a1);
      if (a1->error)
        break;
      xmlXPathCompExprAdd((uint64_t)a1, v6, *((_DWORD *)a1->comp + 4), 4u, v7, v10, 0, 0, 0);
      for (i = a1->cur; ; a1->cur = i)
      {
        v5 = *i;
        if (v5 > 0x20 || ((1 << v5) & 0x100002600) == 0)
          break;
        ++i;
      }
    }
  }
}

void xmlXPathCompAdditiveExpr(xmlXPathParserContext *a1)
{
  const xmlChar *i;
  unsigned int v3;
  unsigned int v5;
  const xmlChar *v6;
  unsigned int v7;
  uint64_t v8;

  xmlXPathCompMultiplicativeExpr(a1);
  if (!a1->error)
  {
    for (i = a1->cur; ; a1->cur = i)
    {
      v3 = *i;
      if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
        break;
      ++i;
    }
    while (v3 == 45 || v3 == 43)
    {
      v5 = *((_DWORD *)a1->comp + 4);
      v6 = i + 1;
      do
      {
        a1->cur = v6;
        v7 = *v6++;
        v8 = (1 << v7) & 0x100002600;
      }
      while (v7 <= 0x20 && v8 != 0);
      xmlXPathCompMultiplicativeExpr(a1);
      if (a1->error)
        break;
      xmlXPathCompExprAdd((uint64_t)a1, v5, *((_DWORD *)a1->comp + 4), 5u, v3 == 43, 0, 0, 0, 0);
      for (i = a1->cur; ; a1->cur = i)
      {
        v3 = *i;
        if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
          break;
        ++i;
      }
    }
  }
}

void xmlXPathCompMultiplicativeExpr(xmlXPathParserContext *a1)
{
  const xmlChar *i;
  unsigned int v3;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  const xmlChar *v8;
  unsigned int v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;

  xmlXPathCompUnaryExpr(a1);
  if (!a1->error)
  {
    for (i = a1->cur; ; a1->cur = i)
    {
      v3 = *i;
      if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
        break;
      ++i;
    }
    LOBYTE(v5) = *i;
    while (1)
    {
      if (v5 == 42)
      {
        v6 = 0;
        v7 = 1;
      }
      else
      {
        if (v5 == 109)
        {
          if (i[1] != 111 || i[2] != 100)
            return;
          v6 = 2;
        }
        else
        {
          if (v5 != 100 || i[1] != 105 || i[2] != 118)
            return;
          v6 = 1;
        }
        v7 = 3;
      }
      v8 = &i[v7];
      v9 = *((_DWORD *)a1->comp + 4);
      while (1)
      {
        a1->cur = v8;
        v10 = *v8;
        v11 = v10 > 0x20;
        v12 = (1 << v10) & 0x100002600;
        if (v11 || v12 == 0)
          break;
        ++v8;
      }
      xmlXPathCompUnaryExpr(a1);
      if (a1->error)
        break;
      xmlXPathCompExprAdd((uint64_t)a1, v9, *((_DWORD *)a1->comp + 4), 6u, v6, 0, 0, 0, 0);
      for (i = a1->cur; ; a1->cur = i)
      {
        v5 = *i;
        if (v5 > 0x20 || ((1 << v5) & 0x100002600) == 0)
          break;
        ++i;
      }
    }
  }
}

void xmlXPathCompUnaryExpr(xmlXPathParserContext *a1)
{
  const xmlChar *i;
  unsigned int v3;
  int v5;
  unsigned int v6;
  uint64_t j;
  unsigned int v9;
  unsigned int v11;
  const xmlChar *cur;
  unsigned int v13;
  BOOL v14;
  uint64_t v15;
  const xmlChar *k;
  unsigned int v18;
  BOOL v20;
  unsigned int v21;

  for (i = a1->cur; ; a1->cur = i)
  {
    v3 = *i;
    if (v3 > 0x20 || ((1 << v3) & 0x100002600) == 0)
      break;
    ++i;
  }
  if (v3 == 45)
  {
    v5 = 0;
    while (1)
    {
      a1->cur = ++i;
      v6 = *i;
      if (v6 > 0x20 || ((1 << v6) & 0x100002600) == 0)
      {
        v5 = 1 - v5;
        if (v6 != 45)
          break;
      }
    }
  }
  else
  {
    v5 = 0;
  }
  xmlXPathCompPathExpr(a1);
  if (!a1->error)
  {
    for (j = (uint64_t)(a1->cur + 1); ; ++j)
    {
      v9 = *(unsigned __int8 *)(j - 1);
      if (v9 > 0x20 || ((1 << v9) & 0x100002600) == 0)
        break;
      a1->cur = (const xmlChar *)j;
    }
    if (v9 == 124)
    {
      while (1)
      {
        v11 = *((_DWORD *)a1->comp + 4);
        xmlXPathCompExprAdd((uint64_t)a1, 0xFFFFFFFF, 0xFFFFFFFF, 9u, 0, 0, 0, 0, 0);
        cur = a1->cur;
        if (!*a1->cur)
          goto LABEL_26;
        do
        {
          a1->cur = ++cur;
LABEL_26:
          v13 = *cur;
          v14 = v13 > 0x20;
          v15 = (1 << v13) & 0x100002600;
        }
        while (!v14 && v15 != 0);
        xmlXPathCompPathExpr(a1);
        xmlXPathCompExprAdd((uint64_t)a1, v11, *((_DWORD *)a1->comp + 4), 7u, 0, 0, 0, 0, 0);
        for (k = a1->cur; ; a1->cur = k)
        {
          v18 = *k++;
          if (v18 > 0x20 || ((1 << v18) & 0x100002600) == 0)
            break;
        }
        if (v18 != 124)
        {
          v20 = a1->error != 0;
          goto LABEL_40;
        }
      }
    }
    v20 = 0;
LABEL_40:
    if (v3 == 45 && !v20)
    {
      if (v5)
        v21 = 2;
      else
        v21 = 3;
      xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 5u, v21, 0, 0, 0, 0);
    }
  }
}

void xmlXPathCompPathExpr(xmlXPathParserContext *a1)
{
  const xmlChar *v2;
  const xmlChar *i;
  unsigned int v4;
  unsigned __int8 *v5;
  const xmlChar *v6;
  const xmlChar *n;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  const xmlChar *v12;
  unsigned int v13;
  uint64_t v14;
  xmlChar *v16;
  xmlChar *v17;
  void *v18;
  uint64_t ii;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v24;
  xmlXPathParserContext *v25;
  int v26;
  unsigned __int8 *context;
  xmlChar *v28;
  xmlChar *v29;
  const xmlChar *mm;
  uint64_t v31;
  uint64_t jj;
  unsigned int v33;
  uint64_t v34;
  unsigned int v36;
  unsigned int v37;
  uint64_t k;
  uint64_t v39;
  const xmlChar *v40;
  const xmlChar *v41;
  const xmlChar *m;
  unsigned int v43;
  uint64_t v44;
  unsigned int v46;
  const xmlChar *nn;
  unsigned int v49;
  unsigned int v51;
  const xmlChar *i1;
  unsigned int v54;
  uint64_t v55;
  uint64_t i2;
  unsigned int v58;
  uint64_t v59;
  const xmlChar *kk;
  unsigned int v62;
  unsigned int v63;
  xmlChar *v64;
  xmlChar *v65;
  xmlChar *v66;
  __n128 v67;
  xmlXPathObject *v68;
  double v69;
  int v70;
  unsigned __int8 *v71;
  unsigned int v72;
  unsigned int v73;
  unsigned int v74;
  uint64_t v75;
  void *v77;
  _BOOL8 v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  int v83;
  __n128 v84;
  uint64_t v85;
  const xmlChar *v86;
  double v87;
  unsigned int v88;
  const xmlChar *v89;
  unsigned int v90;
  const xmlChar *v92;
  int v93;
  unsigned __int8 *v94;
  int v95;
  int v96;
  int v97;
  const xmlChar *v98;
  int v99;
  int v100;
  int v101;
  xmlChar *v102;
  xmlXPathObject *v103;
  BOOL v104;
  BOOL v106;
  int v107;
  xmlChar *v108;
  xmlChar *v109;
  unsigned int v110;
  int v111;
  const xmlChar *v112;
  uint64_t v113;
  unsigned int v114;
  unsigned __int8 *comp;
  uint64_t j;
  int v117;
  _BOOL4 v118;
  int v120;
  const xmlChar *v121;
  unsigned int v122;
  uint64_t v123;
  xmlChar *cur;
  uint64_t v126;

  v2 = a1->cur;
  for (i = a1->cur + 1; ; ++i)
  {
    v4 = *(i - 1);
    if (v4 > 0x28)
      goto LABEL_27;
    if (((1 << v4) & 0x100002600) == 0)
      break;
    a1->cur = i;
    LODWORD(v2) = (_DWORD)v2 + 1;
  }
  if (((1 << v4) & 0x11000000000) != 0)
  {
    v5 = (unsigned __int8 *)(i - 1);
    goto LABEL_7;
  }
LABEL_27:
  v5 = (unsigned __int8 *)(i - 1);
  if (v4 - 48 < 0xA)
    goto LABEL_7;
  switch(*(i - 1))
  {
    case '\'':
      goto LABEL_7;
    case '(':
    case ')':
    case '+':
    case ',':
    case '-':
      goto LABEL_68;
    case '*':
    case '/':
      goto LABEL_71;
    case '.':
      if (*i - 48 < 0xA)
        goto LABEL_7;
      goto LABEL_30;
    default:
      if (v4 == 64)
        goto LABEL_71;
      if (v4 == 34)
        goto LABEL_7;
LABEL_68:
      while (v4 <= 0x20 && ((1 << v4) & 0x100002600) != 0)
      {
        a1->cur = i;
        v36 = *i++;
        v4 = v36;
        LODWORD(v2) = (_DWORD)v2 + 1;
      }
      LODWORD(v126) = 0;
      v72 = xmlXPathCurrentChar(a1, &v126);
      v73 = v72;
      if (v72 <= 0x3E && ((1 << v72) & 0x4000800100000000) != 0)
        goto LABEL_162;
      if (v72 > 0xFF)
      {
        if (!xmlCharInRange(v72, &xmlIsBaseCharGroup) && v73 != 12295 && v73 - 19968 >= 0x51A6 && v73 - 12321 >= 9)
          goto LABEL_162;
      }
      else if ((v72 & 0x1FFFDF) - 65 >= 0x1A
             && v72 - 192 >= 0x17
             && v72 <= 0xF7
             && v72 - 216 >= 0x1F
             && v72 != 95
             && v72 != 58)
      {
        goto LABEL_162;
      }
      cur = (xmlChar *)(i - 1);
      break;
  }
  while (v73 > 0x3E || ((1 << v73) & 0x4000800100000000) == 0)
  {
    if (v73 > 0xFF)
    {
      if (xmlCharInRange(v73, &xmlIsBaseCharGroup))
        v104 = 1;
      else
        v104 = v73 == 12295;
      v106 = !v104 && v73 - 19968 >= 0x51A6 && v73 - 12321 >= 9;
      if (!v106 || xmlCharInRange(v73, &xmlIsDigitGroup))
        goto LABEL_260;
    }
    else if ((v73 & 0x1FFFDF) - 65 < 0x1A || v73 - 192 < 0x17 || v73 > 0xF7 || v73 - 216 < 0x1F || v73 - 48 < 0xA)
    {
      goto LABEL_260;
    }
    if (v73 - 45 > 0x32 || ((1 << (v73 - 45)) & 0x4000000002003) == 0)
    {
      if (v73 >= 0x100)
      {
        if (xmlCharInRange(v73, &xmlIsCombiningGroup))
          goto LABEL_260;
        v107 = xmlCharInRange(v73, &xmlIsExtenderGroup);
      }
      else
      {
        v107 = v73 == 183;
      }
      if (!v107)
        break;
    }
LABEL_260:
    a1->cur += (int)v126;
    v73 = xmlXPathCurrentChar(a1, &v126);
  }
  v108 = xmlStrndup(cur, LODWORD(a1->cur) - (int)v2);
  a1->cur = cur;
  if (!v108)
  {
LABEL_162:
    xmlXPathErr(a1, 7);
    return;
  }
  v109 = v108;
  if (xmlStrstr(v108, (const xmlChar *)"::"))
  {
    xmlFree(v109);
    v5 = (unsigned __int8 *)a1->cur;
    goto LABEL_30;
  }
  for (j = xmlStrlen(v109); ; ++j)
  {
    v117 = a1->cur[j];
    if (v117 != 32)
    {
      v118 = 0;
      if (!a1->cur[j] || v117 == 47)
        goto LABEL_295;
      if ((v117 - 9) >= 2 && v117 != 13)
        break;
    }
  }
  v118 = v117 == 40 && !xmlXPathIsNodeType(v109) && (!a1->xptr || !xmlStrEqual(v109, (const xmlChar *)"range-to"));
LABEL_295:
  v120 = a1->cur[j];
  xmlFree(v109);
  v5 = (unsigned __int8 *)a1->cur;
  if (!v118 || !v120)
  {
LABEL_30:
    v4 = *v5;
LABEL_71:
    if (v4 == 47)
      v37 = 8;
    else
      v37 = 9;
    xmlXPathCompExprAdd((uint64_t)a1, 0xFFFFFFFF, 0xFFFFFFFF, v37, 0, 0, 0, 0, 0);
    for (k = (uint64_t)(a1->cur + 1); ; ++k)
    {
      v39 = *(unsigned __int8 *)(k - 1);
      if (v39 > 0x2F)
        goto LABEL_129;
      if (((1 << v39) & 0x100002600) == 0)
        break;
      a1->cur = (const xmlChar *)k;
    }
    if (v39 != 47)
      goto LABEL_129;
    while (2)
    {
      v40 = a1->cur;
      if (*a1->cur != 47)
        goto LABEL_130;
      v41 = v40 + 1;
      if (v40[1] == 47)
      {
        for (m = v40 + 2; ; ++m)
        {
          a1->cur = m;
          v43 = *m;
          v21 = v43 > 0x20;
          v44 = (1 << v43) & 0x100002600;
          if (v21 || v44 == 0)
            break;
        }
        xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xAu, 6u, 1u, 0, 0, 0);
LABEL_97:
        xmlXPathCompRelativeLocationPath(a1);
      }
      else
      {
        while (1)
        {
          a1->cur = v41;
          v46 = *v41;
          if (v46 > 0x20)
            goto LABEL_92;
          if (((1 << v46) & 0x100002600) == 0)
            break;
          ++v41;
        }
        if (*v41)
        {
LABEL_92:
          if ((v46 & 0xFFFFFFDF) - 65 < 0x1A)
            goto LABEL_97;
          if (v46 - 42 <= 0x35 && ((1 << (v46 - 42)) & 0x20000000400011) != 0)
            goto LABEL_97;
        }
      }
      if (a1->error)
        goto LABEL_130;
      continue;
    }
  }
LABEL_7:
  v6 = v5 + 1;
  for (n = v6; ; ++n)
  {
    v8 = *(n - 1);
    if (v8 > 0x28)
      goto LABEL_40;
    if (((1 << v8) & 0x100002600) == 0)
      break;
    a1->cur = n;
    LODWORD(v6) = (_DWORD)v6 + 1;
  }
  if (v8 == 36)
  {
    v126 = 0;
    a1->cur = n;
    v16 = xmlXPathParseQName(a1, (xmlChar **)&v126);
    if (v16)
    {
      v17 = v16;
      *((_DWORD *)a1->comp + 4) = -1;
      v18 = (void *)v126;
      if (xmlXPathCompExprAdd((uint64_t)a1, 0xFFFFFFFF, 0xFFFFFFFF, 0xCu, 0, 0, 0, v16, (xmlChar *)v126) == -1)
      {
        xmlFree(v18);
        xmlFree(v17);
      }
      for (ii = (uint64_t)(a1->cur + 1); ; ++ii)
      {
        v20 = *(unsigned __int8 *)(ii - 1);
        v21 = v20 > 0x20;
        v22 = (1 << v20) & 0x100002600;
        if (v21 || v22 == 0)
          break;
        a1->cur = (const xmlChar *)ii;
      }
      context = (unsigned __int8 *)a1->context;
      if (!context || (context[336] & 2) == 0)
      {
LABEL_60:
        for (jj = (uint64_t)(a1->cur + 1); ; ++jj)
        {
          v33 = *(unsigned __int8 *)(jj - 1);
          v21 = v33 > 0x20;
          v34 = (1 << v33) & 0x100002600;
          if (v21 || v34 == 0)
            break;
          a1->cur = (const xmlChar *)jj;
        }
        goto LABEL_101;
      }
      v26 = 24;
    }
    else
    {
      xmlFree((void *)v126);
      v26 = 4;
    }
    v25 = a1;
    goto LABEL_59;
  }
  if (v8 != 40)
  {
LABEL_40:
    v24 = v8 - 48;
    if ((v8 - 48) >= 0xA)
    {
      if ((_DWORD)v8 == 34)
      {
        for (kk = n; ; ++kk)
        {
          a1->cur = kk;
          v62 = *kk;
          if (v62 <= 0x1F)
          {
            if (v62 > 0xD || ((1 << v62) & 0x2600) == 0)
            {
LABEL_291:
              v25 = a1;
              v26 = 2;
              goto LABEL_59;
            }
          }
          else if (v62 == 34)
          {
LABEL_150:
            v64 = xmlStrndup(n, (int)kk - (int)v6);
            v65 = v64;
            if (*a1->cur)
              ++a1->cur;
            if (v64)
            {
              v66 = (xmlChar *)xmlXPathCacheNewString((uint64_t)a1->context, v64);
              if (v66)
              {
                v68 = (xmlXPathObject *)v66;
                if (xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xBu, 4u, 0, 0, v66, 0) == -1)v67.n128_f64[0] = xmlXPathReleaseObject((uint64_t)a1->context, v68);
              }
              else
              {
                a1->error = 15;
              }
              ((void (*)(xmlChar *, __n128))xmlFree)(v65, v67);
            }
            else
            {
              a1->error = 15;
              xmlXPathErrMemory((uint64_t)a1->context, 0);
            }
            goto LABEL_60;
          }
        }
      }
      if ((_DWORD)v8 == 39)
      {
        for (kk = n; ; ++kk)
        {
          a1->cur = kk;
          v63 = *kk;
          if (v63 <= 0x1F)
          {
            if (v63 > 0xD || ((1 << v63) & 0x2600) == 0)
              goto LABEL_291;
          }
          else if (v63 == 39)
          {
            goto LABEL_150;
          }
        }
      }
      if ((_DWORD)v8 != 46 || *n - 48 > 9)
      {
        v126 = 0;
        v28 = xmlXPathParseQName(a1, (xmlChar **)&v126);
        if (v28)
        {
          v29 = v28;
          for (mm = a1->cur + 1; ; ++mm)
          {
            v31 = *(mm - 1);
            if (v31 > 0x28)
              goto LABEL_171;
            if (((1 << v31) & 0x100002600) == 0)
              break;
            a1->cur = mm;
          }
          if (v31 != 40)
          {
LABEL_171:
            xmlFree(v28);
            goto LABEL_172;
          }
          while (1)
          {
            a1->cur = mm;
            v74 = *mm;
            v21 = v74 > 0x20;
            v75 = (1 << v74) & 0x100002600;
            if (v21 || v75 == 0)
              break;
            ++mm;
          }
          v77 = (void *)v126;
          if (v126 || *v28 != 99)
          {
            v78 = 1;
          }
          else
          {
            v78 = xmlStrEqual(v28, (const xmlChar *)"count") == 0;
            mm = a1->cur;
          }
          v81 = 0;
          v82 = -1;
          *((_DWORD *)a1->comp + 4) = -1;
          v83 = *mm;
          if (!v83 || v83 == 41)
            goto LABEL_300;
          xmlXPathCompileExpr(a1, v78);
          if (a1->error)
          {
LABEL_188:
            xmlFree(v29);
            ((void (*)(void *, __n128))xmlFree)(v77, v84);
            goto LABEL_60;
          }
          v81 = 0;
          v110 = -1;
          while (1)
          {
            xmlXPathCompExprAdd((uint64_t)a1, v110, *((_DWORD *)a1->comp + 4), 0xEu, 0, 0, 0, 0, 0);
            ++v81;
            v111 = *a1->cur;
            if (v111 != 44)
              break;
            v112 = a1->cur + 1;
            while (1)
            {
              a1->cur = v112;
              v114 = *v112++;
              v113 = v114;
              if (v114 > 0x20)
                break;
              if (((1 << v113) & 0x100002600) == 0)
              {
                if (!v113)
                  goto LABEL_299;
                break;
              }
            }
            comp = (unsigned __int8 *)a1->comp;
            v110 = *((_DWORD *)comp + 4);
            *((_DWORD *)comp + 4) = -1;
            xmlXPathCompileExpr(a1, v78);
            if (a1->error)
              goto LABEL_188;
          }
          if (v111 == 41)
          {
LABEL_299:
            v82 = *((_DWORD *)a1->comp + 4);
LABEL_300:
            if (xmlXPathCompExprAdd((uint64_t)a1, v82, 0xFFFFFFFF, 0xDu, v81, 0, 0, v29, (xmlChar *)v77) == -1)
            {
              xmlFree(v77);
              xmlFree(v29);
            }
            v121 = a1->cur;
            if (*a1->cur)
              goto LABEL_308;
            while (1)
            {
              v122 = *v121;
              v21 = v122 > 0x20;
              v123 = (1 << v122) & 0x100002600;
              if (v21 || v123 == 0)
                break;
LABEL_308:
              a1->cur = ++v121;
            }
            goto LABEL_60;
          }
          xmlFree(v29);
          ((void (*)(void *))xmlFree)(v77);
        }
        else
        {
LABEL_172:
          ((void (*)(uint64_t))xmlFree)(v126);
        }
        v25 = a1;
        v26 = 7;
LABEL_59:
        xmlXPathErr(v25, v26);
        goto LABEL_60;
      }
    }
    if (a1->error)
      goto LABEL_60;
    if ((_DWORD)v8 != 46 && v8 < 0x30)
    {
LABEL_44:
      v25 = a1;
      v26 = 1;
      goto LABEL_59;
    }
    if (v24 > 9)
    {
      v71 = (unsigned __int8 *)(n - 1);
      v69 = 0.0;
    }
    else
    {
      v69 = 0.0;
      do
      {
        a1->cur = n;
        v69 = v69 * 10.0 + (double)(v8 - 48);
        v70 = *n++;
        LODWORD(v8) = v70;
      }
      while ((v70 - 48) < 0xA);
      v71 = (unsigned __int8 *)(n - 1);
    }
    if ((_DWORD)v8 != 46)
    {
LABEL_215:
      if ((v8 | 0x20) == 0x65)
      {
        v94 = v71 + 1;
        a1->cur = v71 + 1;
        v95 = v71[1];
        if (v95 == 45 || v95 == 43)
        {
          v94 = v71 + 2;
          a1->cur = v71 + 2;
          v96 = v71[2];
        }
        else
        {
          v96 = v71[1];
        }
        if ((v96 - 48) > 9)
        {
          v97 = 0;
        }
        else
        {
          v97 = 0;
          v98 = v94 + 1;
          do
          {
            v99 = v96 + 10 * v97 - 48;
            if (v97 < 1000000)
              v97 = v99;
            a1->cur = v98;
            v100 = *v98++;
            v96 = v100;
          }
          while ((v100 - 48) < 0xA);
        }
        if (v95 == 45)
          v101 = -v97;
        else
          v101 = v97;
        v69 = v69 * __exp10((double)v101);
      }
      v102 = (xmlChar *)xmlXPathCacheNewFloat(v69, (uint64_t)a1->context);
      if (v102)
      {
        v103 = (xmlXPathObject *)v102;
        if (xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xBu, 3u, 0, 0, v102, 0) == -1)xmlXPathReleaseObject((uint64_t)a1->context, v103);
      }
      else
      {
        a1->error = 15;
      }
      goto LABEL_60;
    }
    v79 = (uint64_t)(v71 + 1);
    a1->cur = v71 + 1;
    v80 = v71[1];
    if (v80 >= 0x30)
    {
      if (v24 >= 0xA && v80 >= 0x3A)
        goto LABEL_44;
      if (v80 == 48)
      {
        v85 = 0;
        do
        {
          v86 = &v71[v85 + 2];
          a1->cur = v86;
          v80 = *v86;
          ++v85;
        }
        while (v80 == 48);
        v79 = (uint64_t)&v71[v85 + 1];
        goto LABEL_204;
      }
    }
    else if (v24 >= 0xA)
    {
      goto LABEL_44;
    }
    LODWORD(v85) = 0;
LABEL_204:
    v87 = 0.0;
    if (v80 - 48 <= 9)
    {
      v88 = v85 + 20;
      v89 = (const xmlChar *)(v79 + 1);
      do
      {
        v87 = (double)(int)(v80 - 48) + v87 * 10.0;
        LODWORD(v85) = v85 + 1;
        a1->cur = v89;
        v90 = *v89++;
        v80 = v90;
      }
      while (v90 - 48 <= 9 && v85 < v88);
    }
    v69 = v69 + v87 / __exp10((double)(int)v85);
    v71 = (unsigned __int8 *)a1->cur;
    LODWORD(v8) = *a1->cur;
    if ((v8 - 48) <= 9)
    {
      v92 = v71 + 1;
      do
      {
        a1->cur = v92;
        v93 = *v92++;
        LODWORD(v8) = v93;
      }
      while ((v93 - 48) < 0xA);
      v71 = (unsigned __int8 *)(v92 - 1);
    }
    goto LABEL_215;
  }
  do
  {
    a1->cur = n;
    v9 = *n++;
    v10 = (1 << v9) & 0x100002600;
  }
  while (v9 <= 0x20 && v10 != 0);
  xmlXPathCompileExpr(a1, 1);
  if (!a1->error)
  {
    if (*a1->cur == 41)
    {
      v12 = a1->cur + 1;
      do
      {
        a1->cur = v12;
        v13 = *v12++;
        v14 = (1 << v13) & 0x100002600;
      }
      while (v13 <= 0x20 && v14 != 0);
      goto LABEL_60;
    }
    xmlXPathErr(a1, 7);
  }
LABEL_101:
  if (a1->error)
    return;
  for (nn = a1->cur; ; a1->cur = nn)
  {
    v49 = *nn;
    if (v49 > 0x20 || ((1 << v49) & 0x100002600) == 0)
      break;
    ++nn;
  }
  if (v49 != 91)
  {
    v51 = *nn;
LABEL_120:
    if (v51 != 47)
      goto LABEL_130;
    if (nn[1] == 47)
    {
      for (i1 = nn + 2; ; ++i1)
      {
        a1->cur = i1;
        v54 = *i1;
        v21 = v54 > 0x20;
        v55 = (1 << v54) & 0x100002600;
        if (v21 || v55 == 0)
          break;
      }
      xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xAu, 6u, 1u, 0, 0, 0);
    }
LABEL_129:
    xmlXPathCompRelativeLocationPath(a1);
LABEL_130:
    for (i2 = (uint64_t)(a1->cur + 1); ; ++i2)
    {
      v58 = *(unsigned __int8 *)(i2 - 1);
      v21 = v58 > 0x20;
      v59 = (1 << v58) & 0x100002600;
      if (v21 || v59 == 0)
        break;
      a1->cur = (const xmlChar *)i2;
    }
    return;
  }
  do
  {
    xmlXPathCompPredicate(a1, 1);
    for (nn = a1->cur; ; a1->cur = nn)
    {
      v51 = *nn;
      if (v51 > 0x20 || ((1 << v51) & 0x100002600) == 0)
        break;
      ++nn;
    }
  }
  while (v51 == 91);
  if (!a1->error)
    goto LABEL_120;
}

void xmlXPathCompRelativeLocationPath(xmlXPathParserContext *a1)
{
  const xmlChar *i;
  uint64_t v3;
  const xmlChar *j;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  unsigned int v9;
  uint64_t v10;
  const xmlChar *k;
  uint64_t v13;
  const xmlChar *v14;
  const xmlChar *m;
  unsigned int v16;
  uint64_t v17;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;

  for (i = a1->cur + 1; ; ++i)
  {
    v3 = *(i - 1);
    if (v3 > 0x2F)
      break;
    if (((1 << v3) & 0x100002600) == 0)
    {
      if (v3 == 47)
      {
        if (*i == 47)
        {
          for (j = i + 1; ; ++j)
          {
            a1->cur = j;
            v5 = *j;
            v6 = v5 > 0x20;
            v7 = (1 << v5) & 0x100002600;
            if (v6 || v7 == 0)
              break;
          }
          xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xAu, 6u, 1u, 0, 0, 0);
        }
        else
        {
          do
          {
            a1->cur = i;
            v9 = *i++;
            v10 = (1 << v9) & 0x100002600;
          }
          while (v9 <= 0x20 && v10 != 0);
        }
      }
      break;
    }
    a1->cur = i;
  }
  xmlXPathCompStep(a1);
  if (!a1->error)
  {
    for (k = a1->cur; ; a1->cur = k)
    {
      v13 = *k;
      if (v13 > 0x2F)
        break;
      if (((1 << v13) & 0x100002600) == 0)
      {
        if (v13 == 47)
        {
LABEL_27:
          v14 = k + 1;
          if (k[1] == 47)
          {
            for (m = k + 2; ; ++m)
            {
              a1->cur = m;
              v16 = *m;
              v6 = v16 > 0x20;
              v17 = (1 << v16) & 0x100002600;
              if (v6 || v17 == 0)
                break;
            }
            xmlXPathCompExprAdd((uint64_t)a1, *((_DWORD *)a1->comp + 4), 0xFFFFFFFF, 0xAu, 6u, 1u, 0, 0, 0);
          }
          else
          {
            while (1)
            {
              a1->cur = v14;
              v19 = *v14;
              v6 = v19 > 0x20;
              v20 = (1 << v19) & 0x100002600;
              if (v6 || v20 == 0)
                break;
              ++v14;
            }
          }
          xmlXPathCompStep(a1);
          for (k = a1->cur; ; a1->cur = k)
          {
            v22 = *k;
            if (v22 > 0x2F)
              break;
            if (((1 << v22) & 0x100002600) == 0)
            {
              if (v22 == 47)
                goto LABEL_27;
              return;
            }
            ++k;
          }
        }
        return;
      }
      ++k;
    }
  }
}

void xmlXPathCompPredicate(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathCompExprPtr comp;
  unsigned int v5;
  const xmlChar *i;
  unsigned int v7;
  unsigned int v9;
  uint64_t v10;
  unsigned int v12;
  const xmlChar *cur;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;

  comp = ctxt->comp;
  v5 = *((_DWORD *)comp + 4);
  for (i = ctxt->cur + 1; ; ++i)
  {
    v7 = *(i - 1);
    if (v7 > 0x20 || ((1 << v7) & 0x100002600) == 0)
      break;
    ctxt->cur = i;
  }
  if (v7 != 91)
    goto LABEL_20;
  do
  {
    ctxt->cur = i;
    v9 = *i++;
    v10 = (1 << v9) & 0x100002600;
  }
  while (v9 <= 0x20 && v10 != 0);
  *((_DWORD *)comp + 4) = -1;
  xmlXPathCompileExpr(ctxt, a2 != 0);
  if (ctxt->error)
    return;
  if (*ctxt->cur != 93)
  {
LABEL_20:
    xmlXPathErr(ctxt, 6);
    return;
  }
  if (a2)
    v12 = 16;
  else
    v12 = 15;
  xmlXPathCompExprAdd((uint64_t)ctxt, v5, *((_DWORD *)ctxt->comp + 4), v12, 0, 0, 0, 0, 0);
  cur = ctxt->cur;
  if (*ctxt->cur)
    goto LABEL_21;
  while (1)
  {
    v14 = *cur;
    v15 = v14 > 0x20;
    v16 = (1 << v14) & 0x100002600;
    if (v15 || v16 == 0)
      break;
LABEL_21:
    ctxt->cur = ++cur;
  }
}

xmlChar *xmlXPathParseQName(xmlXPathParserContext *a1, xmlChar **a2)
{
  xmlChar *result;

  *a2 = 0;
  result = xmlXPathParseNCName(a1);
  if (result && *a1->cur == 58)
  {
    *a2 = result;
    if (*a1->cur)
      ++a1->cur;
    return xmlXPathParseNCName(a1);
  }
  return result;
}

void xmlXPathCompStep(xmlXPathParserContextPtr ctxt)
{
  const xmlChar *i;
  uint64_t v3;
  const xmlChar *mm;
  unsigned int v5;
  BOOL v6;
  uint64_t v7;
  xmlChar *v9;
  xmlChar *v10;
  unsigned int v11;
  const xmlChar *j;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v17;
  xmlFreeFunc v18;
  unsigned int v19;
  const xmlChar *m;
  unsigned int v21;
  xmlChar *v23;
  unsigned int v24;
  char v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  const xmlChar *k;
  uint64_t v31;
  xmlChar *v32;
  BOOL v34;
  const xmlChar *ii;
  unsigned int v36;
  int v37;
  char v38;
  const xmlChar *kk;
  uint64_t v40;
  xmlChar *v41;
  xmlXPathContextPtr context;
  const xmlChar *jj;
  unsigned int v44;
  unsigned int v46;
  xmlXPathCompExprPtr comp;
  unsigned int v49;
  const xmlChar *n;
  unsigned int v51;

  for (i = ctxt->cur + 1; ; ++i)
  {
    v3 = *(i - 1);
    if (v3 > 0x2E)
      goto LABEL_13;
    if (((1 << v3) & 0x100002600) == 0)
      break;
    ctxt->cur = i;
  }
  if (v3 != 46)
  {
LABEL_13:
    if (ctxt->xptr)
    {
      v9 = xmlXPathParseNCName(ctxt);
      v10 = v9;
      if (v9 && xmlStrEqual(v9, (const xmlChar *)"range-to"))
      {
        v11 = *((_DWORD *)ctxt->comp + 4);
        xmlFree(v10);
        for (j = ctxt->cur + 1; ; ++j)
        {
          v13 = *(j - 1);
          if (v13 > 0x28)
            break;
          if (((1 << v13) & 0x100002600) == 0)
          {
            if (v13 != 40)
              goto LABEL_177;
            do
            {
              ctxt->cur = j;
              v27 = *j++;
              v28 = (1 << v27) & 0x100002600;
            }
            while (v27 <= 0x20 && v28 != 0);
            xmlXPathCompileExpr(ctxt, 1);
            if (!ctxt->error)
            {
              for (k = ctxt->cur + 1; ; ++k)
              {
                v31 = *(k - 1);
                if (v31 > 0x29)
                  break;
                if (((1 << v31) & 0x100002600) == 0)
                {
                  if (v31 != 41)
                    goto LABEL_177;
                  v23 = 0;
                  v26 = 0;
                  v24 = 0;
                  v25 = 0;
                  v17 = 0;
                  ctxt->cur = k;
                  goto LABEL_162;
                }
                ctxt->cur = k;
              }
              goto LABEL_177;
            }
            return;
          }
          ctxt->cur = j;
        }
        goto LABEL_177;
      }
    }
    else
    {
      v10 = 0;
    }
    if (*ctxt->cur == 42)
      goto LABEL_29;
    if (v10 || (v10 = xmlXPathParseNCName(ctxt)) != 0)
    {
      v19 = *v10;
      v17 = 4;
      if (v19 <= 0x6D)
      {
        switch(*v10)
        {
          case 'a':
            v17 = xmlStrEqual(v10, (const xmlChar *)"ancestor") != 0;
            if (xmlStrEqual(v10, (const xmlChar *)"ancestor-or-self"))
              v17 = 2;
            if (!xmlStrEqual(v10, (const xmlChar *)"attribute"))
              goto LABEL_112;
            v17 = 3;
            goto LABEL_113;
          case 'c':
            if (xmlStrEqual(v10, (const xmlChar *)"child"))
              goto LABEL_113;
            break;
          case 'd':
            if (xmlStrEqual(v10, (const xmlChar *)"descendant"))
              v17 = 5;
            else
              v17 = 0;
            if (!xmlStrEqual(v10, (const xmlChar *)"descendant-or-self"))
              goto LABEL_112;
            v17 = 6;
            goto LABEL_113;
          case 'f':
            if (xmlStrEqual(v10, (const xmlChar *)"following"))
              v17 = 7;
            else
              v17 = 0;
            if (!xmlStrEqual(v10, (const xmlChar *)"following-sibling"))
              goto LABEL_112;
            v17 = 8;
            goto LABEL_113;
          default:
            break;
        }
LABEL_30:
        if (ctxt->error)
        {
          v18 = xmlFree;
          goto LABEL_32;
        }
        for (m = ctxt->cur; ; ctxt->cur = m)
        {
          v21 = *m;
          if (v21 > 0x20 || ((1 << v21) & 0x100002600) == 0)
            break;
          ++m;
        }
        if (!v10 && v21 == 42)
        {
          v23 = 0;
          v24 = 0;
          v10 = 0;
          ctxt->cur = m + 1;
          v11 = -1;
          v25 = 1;
          v26 = 3;
LABEL_162:
          comp = ctxt->comp;
          v49 = *((_DWORD *)comp + 4);
          *((_DWORD *)comp + 4) = -1;
          for (n = ctxt->cur + 1; ; ++n)
          {
            v51 = *(n - 1);
            if (v51 > 0x20 || ((1 << v51) & 0x100002600) == 0)
              break;
            ctxt->cur = n;
          }
          if (v51 == 91)
          {
            do
              xmlXPathCompPredicate(ctxt, 0);
            while (*ctxt->cur == 91);
          }
          if ((v25 & 1) == 0)
          {
            xmlXPathCompExprAdd((uint64_t)ctxt, v11, v49, 0x12u, 0, 0, 0, 0, 0);
            return;
          }
          if (xmlXPathCompExprAdd((uint64_t)ctxt, v49, *((_DWORD *)ctxt->comp + 4), 0xAu, v17, v26, v24, v23, v10) != -1)return;
          xmlFree(v23);
          v18 = xmlFree;
LABEL_32:
          ((void (*)(xmlChar *))v18)(v10);
          return;
        }
        if (!v10)
        {
          v32 = xmlXPathParseNCName(ctxt);
          if (!v32)
            goto LABEL_177;
          v10 = v32;
          m = ctxt->cur;
          v21 = *ctxt->cur;
        }
        v34 = v21 == 13 || v21 - 9 < 2;
        if (v21 == 32)
          v34 = 1;
        for (ii = m + 1; ; ++ii)
        {
          if (v21 > 0x28)
            goto LABEL_84;
          if (((1 << v21) & 0x100002600) == 0)
            break;
          ctxt->cur = ii;
          v36 = *ii;
          v21 = v36;
        }
        if (v21 != 40)
        {
LABEL_84:
          v38 = v21 != 58 || v34;
          if ((v38 & 1) != 0)
          {
            v23 = 0;
            v24 = 0;
            v11 = -1;
            v25 = 1;
            v26 = 5;
          }
          else
          {
            ctxt->cur = ii;
            if (*ii == 42)
            {
              v41 = 0;
              ctxt->cur = ii + 1;
              v26 = 3;
            }
            else
            {
              v41 = xmlXPathParseNCName(ctxt);
              if (!v41)
                xmlXPathErr(ctxt, 7);
              v26 = 5;
            }
            context = ctxt->context;
            if (context && (context->flags & 1) != 0 && !xmlXPathNsLookup(context, v10))
              xmlXPathErr(ctxt, 19);
            v24 = 0;
            v11 = -1;
            v25 = 1;
            v23 = v10;
            v10 = v41;
          }
          goto LABEL_162;
        }
        ctxt->cur = ii;
        if (xmlStrEqual(v10, (const xmlChar *)"comment"))
        {
          v37 = 0;
          v24 = 8;
LABEL_139:
          for (jj = ctxt->cur; ; ctxt->cur = jj)
          {
            v44 = *jj;
            if (v44 > 0x20 || ((1 << v44) & 0x100002600) == 0)
              break;
            ++jj;
          }
          if (v37)
          {
            xmlFree(v10);
            jj = ctxt->cur;
            if (*ctxt->cur == 41)
            {
              v10 = 0;
              v26 = 1;
              goto LABEL_158;
            }
            v10 = xmlXPathParseLiteral(ctxt);
            if (!v10)
            {
              v24 = 7;
              xmlXPathErr(ctxt, 7);
              v23 = 0;
              v11 = -1;
              v26 = 1;
              goto LABEL_161;
            }
            for (jj = ctxt->cur; ; ctxt->cur = jj)
            {
              v46 = *jj;
              if (v46 > 0x20 || ((1 << v46) & 0x100002600) == 0)
                break;
              ++jj;
            }
            v26 = 2;
            v44 = *jj;
          }
          else
          {
            v26 = 1;
          }
          if (v44 != 41)
          {
            xmlFree(v10);
            xmlXPathErr(ctxt, 8);
            v23 = 0;
            v10 = 0;
            goto LABEL_160;
          }
LABEL_158:
          v23 = 0;
          ctxt->cur = jj + 1;
LABEL_160:
          v11 = -1;
LABEL_161:
          v25 = 1;
          goto LABEL_162;
        }
        if (xmlStrEqual(v10, (const xmlChar *)"node"))
        {
          v37 = 0;
          v24 = 0;
          goto LABEL_139;
        }
        if (xmlStrEqual(v10, (const xmlChar *)"processing-instruction"))
        {
          v24 = 7;
          v37 = 1;
          goto LABEL_139;
        }
        if (xmlStrEqual(v10, (const xmlChar *)"text"))
        {
          v37 = 0;
          v24 = 3;
          goto LABEL_139;
        }
        xmlFree(v10);
LABEL_177:
        xmlXPathErr(ctxt, 7);
        return;
      }
      if (v19 == 110)
      {
        if (!xmlStrEqual(v10, (const xmlChar *)"namespace"))
          goto LABEL_30;
        v17 = 9;
        goto LABEL_113;
      }
      if (v19 != 112)
      {
        if (v19 != 115 || !xmlStrEqual(v10, (const xmlChar *)"self"))
          goto LABEL_30;
        v17 = 13;
        goto LABEL_113;
      }
      if (xmlStrEqual(v10, (const xmlChar *)"parent"))
        v17 = 10;
      else
        v17 = 0;
      if (xmlStrEqual(v10, (const xmlChar *)"preceding"))
        v17 = 11;
      if (xmlStrEqual(v10, (const xmlChar *)"preceding-sibling"))
      {
        v17 = 12;
        goto LABEL_113;
      }
LABEL_112:
      if (v17)
      {
LABEL_113:
        for (kk = ctxt->cur + 1; ; ++kk)
        {
          v40 = *(kk - 1);
          if (v40 > 0x3A)
            break;
          if (((1 << v40) & 0x100002600) == 0)
          {
            if (v40 == 58 && *kk == 58)
            {
              ctxt->cur = kk + 1;
              xmlFree(v10);
              v10 = 0;
              goto LABEL_30;
            }
            break;
          }
          ctxt->cur = kk;
        }
      }
    }
    else
    {
      if (*ctxt->cur == 64)
      {
        v10 = 0;
        ++ctxt->cur;
        v17 = 3;
        goto LABEL_30;
      }
      v10 = 0;
    }
LABEL_29:
    v17 = 4;
    goto LABEL_30;
  }
  if (*i == 46)
  {
    for (mm = i + 1; ; ++mm)
    {
      ctxt->cur = mm;
      v5 = *mm;
      v6 = v5 > 0x20;
      v7 = (1 << v5) & 0x100002600;
      if (v6 || v7 == 0)
        break;
    }
    xmlXPathCompExprAdd((uint64_t)ctxt, *((_DWORD *)ctxt->comp + 4), 0xFFFFFFFF, 0xAu, 0xAu, 1u, 0, 0, 0);
  }
  else
  {
    do
    {
      ctxt->cur = i;
      v14 = *i++;
      v15 = (1 << v14) & 0x100002600;
    }
    while (v14 <= 0x20 && v15 != 0);
  }
}

xmlChar *xmlXPathParseLiteral(xmlXPathParserContextPtr ctxt)
{
  xmlXPathParserContextPtr v1;
  const xmlChar *cur;
  int v3;
  const xmlChar *v4;
  const xmlChar *i;
  unsigned int v6;
  unsigned int v7;
  xmlChar *result;
  int v9;

  v1 = ctxt;
  cur = ctxt->cur;
  v3 = *ctxt->cur;
  if (v3 == 39)
  {
    v4 = cur + 1;
    for (i = cur + 1; ; ++i)
    {
      v1->cur = i;
      v7 = *i;
      if (v7 <= 0x1F)
      {
        if (v7 > 0xD || ((1 << v7) & 0x2600) == 0)
        {
LABEL_22:
          ctxt = v1;
          v9 = 2;
          goto LABEL_20;
        }
      }
      else if (v7 == 39)
      {
LABEL_17:
        result = xmlStrndup(v4, (int)i - (int)v4);
        if (*v1->cur)
          ++v1->cur;
        return result;
      }
    }
  }
  if (v3 == 34)
  {
    v4 = cur + 1;
    for (i = cur + 1; ; ++i)
    {
      v1->cur = i;
      v6 = *i;
      if (v6 <= 0x1F)
      {
        if (v6 > 0xD || ((1 << v6) & 0x2600) == 0)
          goto LABEL_22;
      }
      else if (v6 == 34)
      {
        goto LABEL_17;
      }
    }
  }
  v9 = 3;
LABEL_20:
  xmlXPathErr(ctxt, v9);
  return 0;
}

uint64_t xmlXPathRunStreamEval(uint64_t a1, xmlPatternPtr comp, uint64_t a3, int a4)
{
  uint64_t v4;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  xmlNodePtr v15;
  uint64_t v16;
  char v17;
  xmlXPathObjectPtr v18;
  unsigned int v19;
  unint64_t v20;
  xmlStreamCtxt *StreamCtxt;
  xmlStreamCtxt *v22;
  int v23;
  int v25;
  _xmlNode *children;
  BOOL v27;
  xmlElementType type;
  _xmlNode *v29;
  xmlElementType v30;
  unsigned int v33;
  int v34;
  unint64_t v36;
  unint64_t v37;
  unsigned int v38;
  int v39;
  xmlNs *ns;
  const xmlChar *href;
  _xmlNode *next;
  xmlElementType v43;
  xmlGenericErrorFunc v45;
  void **v46;

  v4 = 0xFFFFFFFFLL;
  if (!a1)
    return v4;
  if (!comp)
    return v4;
  v9 = xmlPatternMaxDepth(comp);
  if (v9 == -1)
    return v4;
  v10 = v9 == -2 ? 10000 : v9;
  v11 = xmlPatternMinDepth(comp);
  if (v11 == -1)
    return v4;
  v12 = v11;
  v13 = xmlPatternFromRoot(comp);
  if (v13 < 0)
    return v4;
  v14 = v13;
  if (!a4)
  {
    if (!a3)
      return v4;
    v18 = xmlXPathCacheNewNodeSet(a1, 0);
    *(_QWORD *)a3 = v18;
    if (!v18)
      return v4;
  }
  if (!v12)
  {
    if (v14)
    {
      if (!a4)
      {
        xmlXPathNodeSetAddUnique(*(xmlNodeSetPtr *)(*(_QWORD *)a3 + 8), *(xmlNodePtr *)a1);
        if (!v10)
          return 0;
        goto LABEL_12;
      }
    }
    else if (!a4)
    {
      xmlXPathNodeSetAddUnique(*(xmlNodeSetPtr *)(*(_QWORD *)a3 + 8), *(xmlNodePtr *)(a1 + 8));
      if (!v10)
        return 0;
      goto LABEL_25;
    }
    return 1;
  }
  if (!v10)
    return 0;
LABEL_12:
  if (v14)
  {
    v15 = *(xmlNodePtr *)a1;
    if (*(_QWORD *)a1)
    {
      v16 = 0;
      v17 = 0;
      goto LABEL_28;
    }
    return 0;
  }
LABEL_25:
  v16 = *(_QWORD *)(a1 + 8);
  if (!v16)
    return 0;
  v4 = 0;
  HIDWORD(v20) = *(_DWORD *)(v16 + 8) - 1;
  LODWORD(v20) = HIDWORD(v20);
  v19 = v20 >> 1;
  if (v19 > 0xA)
    return v4;
  v17 = 1;
  v15 = *(xmlNodePtr *)(a1 + 8);
  if (((1 << v19) & 0x471) == 0)
    return v4;
LABEL_28:
  StreamCtxt = xmlPatternGetStreamCtxt(comp);
  if (!StreamCtxt)
    return 0;
  v22 = StreamCtxt;
  v23 = xmlStreamWantsAnyNode(StreamCtxt);
  if ((v17 & 1) == 0 && xmlStreamPush(v22, 0, 0) == 1)
  {
    if (a4)
    {
LABEL_32:
      v4 = 1;
      goto LABEL_37;
    }
    xmlXPathNodeSetAddUnique(*(xmlNodeSetPtr *)(*(_QWORD *)a3 + 8), v15);
  }
  if (v15->type == XML_NAMESPACE_DECL)
    goto LABEL_36;
  v25 = 0;
  while (1)
  {
    children = v15->children;
    v27 = children && v25 < v10;
    if (!v27)
      break;
    type = children->type;
    if (type == XML_ENTITY_DECL)
      break;
    ++v25;
    if (type == XML_DTD_NODE)
      goto LABEL_47;
LABEL_69:
    if (v25 < 0)
      goto LABEL_36;
LABEL_70:
    v15 = children;
LABEL_71:
    if (linkedOnOrAfterFall2022OSVersions())
    {
      v36 = *(_QWORD *)(a1 + 352);
      if (v36)
      {
        v37 = *(_QWORD *)(a1 + 360);
        if (v37 >= v36)
        {
          v45 = *__xmlGenericError();
          v46 = __xmlGenericErrorContext();
          v45(*v46, "XPath operation limit exceeded\n");
          v4 = 0xFFFFFFFFLL;
          goto LABEL_37;
        }
        *(_QWORD *)(a1 + 360) = v37 + 1;
      }
    }
    v38 = v15->type;
    if (v38 <= 8)
    {
      if (((1 << v38) & 0x198) != 0)
      {
        if (v23)
        {
          v39 = xmlStreamPushNode(v22, 0, 0, v38);
LABEL_84:
          if (v39 == 1)
          {
            if (a4)
              goto LABEL_32;
            if (xmlXPathNodeSetAddUnique(*(xmlNodeSetPtr *)(*(_QWORD *)a3 + 8), v15) < 0)
              *(_QWORD *)(a1 + 232) = 0x20000000CLL;
          }
          if (!v15->children || v25 >= v10)
          {
            xmlStreamPop(v22);
            while (1)
            {
              next = v15->next;
              if (!next)
                break;
              v15 = v15->next;
              v43 = next->type;
              if (v43 != XML_ENTITY_DECL && v43 != XML_DTD_NODE)
                goto LABEL_71;
            }
          }
        }
      }
      else if (v38 == 1)
      {
        ns = v15->ns;
        if (ns)
          href = ns->href;
        else
          href = 0;
        v39 = xmlStreamPush(v22, v15->name, href);
        goto LABEL_84;
      }
    }
    v4 = 0;
    if (v15->type == XML_NAMESPACE_DECL)
      goto LABEL_37;
  }
  children = v15;
LABEL_47:
  if (children != (_xmlNode *)v16)
  {
    while (1)
    {
      v29 = children->next;
      if (!v29)
        break;
      children = children->next;
      v30 = v29->type;
      if (v30 != XML_DTD_NODE && v30 != XML_ENTITY_DECL)
        goto LABEL_70;
    }
    while (1)
    {
      children = children->parent;
      if (!children || children == (_xmlNode *)v16)
        break;
      v33 = children->type;
      if (v33 == 1)
        goto LABEL_65;
      if (v33 == 9)
        break;
      if (v23)
      {
        v27 = v33 > 8;
        v34 = (1 << v33) & 0x198;
        if (!v27 && v34 != 0)
LABEL_65:
          xmlStreamPop(v22);
      }
      --v25;
      if (children->next)
      {
        children = children->next;
        goto LABEL_69;
      }
    }
  }
LABEL_36:
  v4 = 0;
LABEL_37:
  xmlFreeStreamCtxt(v22);
  return v4;
}

uint64_t xmlXPathCompOpEvalToBoolean(uint64_t a1, unsigned int *a2, int a3)
{
  uint64_t BOOLval;
  signed int v7;
  signed int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  xmlXPathObject *v14;
  uint64_t v15;

  while (1)
  {
    if (linkedOnOrAfterFall2022OSVersions()
      && *(_QWORD *)(*(_QWORD *)(a1 + 24) + 352)
      && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, 1uLL) & 0x80000000) != 0)
    {
      return 0;
    }
    BOOLval = *a2;
    if ((_DWORD)BOOLval != 17)
      break;
    v7 = a2[1];
    if (v7 == -1)
      return 0;
    a2 = (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 56 * v7);
  }
  if (!(_DWORD)BOOLval)
    return BOOLval;
  if ((_DWORD)BOOLval == 10)
  {
    v9 = a2[1];
    if (v9 != -1)
    {
      xmlXPathCompOpEval(a1, (unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 56 * v9));
      if (*(_DWORD *)(a1 + 16))
        return 0xFFFFFFFFLL;
      xmlXPathNodeCollectAndTest((xmlXPathParserContextPtr)a1, (uint64_t)a2, 0, 0, 1);
LABEL_17:
      if (!*(_DWORD *)(a1 + 16))
      {
        v10 = *(_DWORD *)(a1 + 40);
        v11 = v10 - 1;
        if (v10 >= 1)
        {
          *(_DWORD *)(a1 + 40) = v11;
          v12 = *(_QWORD *)(a1 + 48);
          v13 = v10 == 1 ? 0 : *(_QWORD *)(v12 + 8 * (v10 - 2));
          *(_QWORD *)(a1 + 32) = v13;
          v14 = *(xmlXPathObject **)(v12 + 8 * v11);
          *(_QWORD *)(v12 + 8 * v11) = 0;
          if (v14)
          {
            if (v14->type == XPATH_BOOLEAN)
            {
              BOOLval = v14->BOOLval;
            }
            else
            {
              if (a3)
                v15 = xmlXPathEvaluatePredicateResult((xmlXPathParserContextPtr)a1, v14);
              else
                v15 = xmlXPathCastToBoolean(v14);
              BOOLval = v15;
            }
            xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v14);
            return BOOLval;
          }
        }
      }
      return 0xFFFFFFFFLL;
    }
    return 0;
  }
  if ((_DWORD)BOOLval != 11)
  {
    xmlXPathCompOpEval(a1, a2);
    goto LABEL_17;
  }
  if (a3)
    return xmlXPathEvaluatePredicateResult((xmlXPathParserContextPtr)a1, *((xmlXPathObjectPtr *)a2 + 3));
  else
    return xmlXPathCastToBoolean(*((xmlXPathObjectPtr *)a2 + 3));
}

uint64_t xmlXPathCompOpEval(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v6;
  int v7;
  xmlXPathParserContext *v8;
  int v9;
  uint64_t v10;
  signed int v11;
  signed int v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  int v16;
  xmlGenericErrorFunc v17;
  void **v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  signed int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  unsigned int v47;
  uint64_t v48;
  xmlXPathObject *v49;
  xmlXPathObject *v50;
  signed int v51;
  signed int v52;
  int v53;
  xmlXPathObject *v54;
  signed int v55;
  int v56;
  signed int v57;
  int v58;
  signed int v59;
  uint64_t v60;
  signed int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  signed int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  signed int v69;
  int v70;
  xmlXPathObjectPtr v71;
  const xmlChar *v72;
  xmlXPathContext *v73;
  const xmlChar *v74;
  uint64_t v75;
  xmlGenericErrorFunc v76;
  void **v77;
  int v78;
  signed int v79;
  int v80;
  uint64_t v81;
  unsigned int *v82;
  unint64_t v83;
  uint64_t v84;
  _DWORD *v85;
  int v86;
  uint64_t v87;
  unsigned int v88;
  uint64_t v89;
  int v90;
  xmlGenericErrorFunc v91;
  void *v92;
  const char *v93;
  xmlGenericErrorFunc v94;
  void **v95;
  xmlXPathFunction v96;
  const xmlChar *v97;
  const xmlChar *v98;
  xmlXPathContext *v99;
  const xmlChar *v100;
  int v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  xmlXPathObject *v105;
  xmlXPathObject *v106;
  xmlXPathParserContext *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _DWORD *v111;
  _DWORD *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  BOOL v116;
  int *p_nodeNr;
  int *v118;
  xmlNodeSet *nodesetval;
  xmlNodeSet *v120;
  uint64_t v121;
  xmlXPathObject *v122;
  uint64_t v123;
  uint64_t v124;
  xmlXPathObject *v125;
  int *v126;
  xmlXPathObject *v127;
  uint64_t v128;
  xmlNode *v129;
  uint64_t v130;
  xmlXPathObject *v131;
  signed int v132;
  int v133;
  unsigned int v134;
  uint64_t v135;
  xmlXPathObject *v136;
  uint64_t v137;
  xmlXPathObject *v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  xmlXPathObject *v142;
  uint64_t v143;
  uint64_t v144;
  xmlGenericErrorFunc v145;
  void **v146;
  xmlXPathObject *v147;
  int *user;
  uint64_t v149;
  uint64_t v150;
  xmlNode *v151;
  uint64_t v152;
  xmlXPathObject *v153;
  signed int v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  xmlXPathObject *v158;
  uint64_t v159;
  int *v160;
  uint64_t v161;
  uint64_t v162;
  xmlNode *v163;
  int v164;
  uint64_t v165;
  xmlXPathObject *v166;
  xmlXPathObject *v167;
  int v168;
  unsigned int v169;
  uint64_t v170;
  xmlXPathObject *v171;
  uint64_t v172;
  xmlXPathObject *v173;
  uint64_t v174;
  uint64_t v175;
  int *v176;
  const xmlChar *v177;
  int v178;
  signed int v179;
  uint64_t v180;
  uint64_t v181;
  int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  xmlXPathObject *v188;
  int *v189;
  xmlXPathObject *v190;
  uint64_t v191;
  uint64_t v192;
  xmlLocationSetPtr cura[2];
  xmlLocationSet *cur;
  uint64_t v195;

  if (*(_DWORD *)(a1 + 16))
    return 0;
  if (linkedOnOrAfterFall2022OSVersions())
  {
    v6 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(v6 + 352))
    {
      if ((xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, 1uLL) & 0x80000000) != 0)
        return 0;
      v6 = *(_QWORD *)(a1 + 24);
    }
    v7 = *(_DWORD *)(v6 + 368);
    if (v7 >= 5000)
    {
      v8 = (xmlXPathParserContext *)a1;
      v9 = 26;
LABEL_10:
      xmlXPathErr(v8, v9);
      return 0;
    }
    *(_DWORD *)(v6 + 368) = v7 + 1;
  }
  v2 = *a2;
  v10 = *(_QWORD *)(a1 + 56);
  switch((int)v2)
  {
    case 0:
      goto LABEL_287;
    case 1:
      v19 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = v19;
      xmlXPathBooleanFunction((xmlXPathParserContextPtr)a1, 1);
      v20 = *(_QWORD *)(a1 + 32);
      if (!v20 || !*(_DWORD *)(v20 + 16))
        goto LABEL_287;
      v21 = *(_DWORD *)(a1 + 40);
      v22 = v21 - 1;
      if (v21 < 1)
      {
        v105 = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 40) = v22;
        v23 = *(_QWORD *)(a1 + 48);
        if (v21 == 1)
          v108 = 0;
        else
          v108 = *(_QWORD *)(v23 + 8 * (v21 - 2));
        *(_QWORD *)(a1 + 32) = v108;
        v105 = *(xmlXPathObject **)(v23 + 8 * v22);
        *(_QWORD *)(v23 + 8 * v22) = 0;
      }
      v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[2]) + v2;
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_217;
      xmlXPathBooleanFunction((xmlXPathParserContextPtr)a1, 1);
      v109 = *(_QWORD *)(a1 + 32);
      if (!v109)
        goto LABEL_221;
      v110 = *(_DWORD *)(v109 + 16) & v105->BOOLval;
      goto LABEL_220;
    case 2:
      v24 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = v24;
      xmlXPathBooleanFunction((xmlXPathParserContextPtr)a1, 1);
      v25 = *(_QWORD *)(a1 + 32);
      if (!v25 || *(_DWORD *)(v25 + 16) == 1)
        goto LABEL_287;
      v26 = *(_DWORD *)(a1 + 40);
      v27 = v26 - 1;
      if (v26 < 1)
      {
        v105 = 0;
      }
      else
      {
        *(_DWORD *)(a1 + 40) = v27;
        v28 = *(_QWORD *)(a1 + 48);
        if (v26 == 1)
          v144 = 0;
        else
          v144 = *(_QWORD *)(v28 + 8 * (v26 - 2));
        *(_QWORD *)(a1 + 32) = v144;
        v105 = *(xmlXPathObject **)(v28 + 8 * v27);
        *(_QWORD *)(v28 + 8 * v27) = 0;
      }
      v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[2]) + v2;
      if (*(_DWORD *)(a1 + 16))
      {
LABEL_217:
        xmlXPathFreeObject(v105);
        goto LABEL_287;
      }
      xmlXPathBooleanFunction((xmlXPathParserContextPtr)a1, 1);
      v109 = *(_QWORD *)(a1 + 32);
      if (v109)
      {
        v110 = *(_DWORD *)(v109 + 16) | v105->BOOLval;
LABEL_220:
        *(_DWORD *)(v109 + 16) = v110;
      }
LABEL_221:
      v121 = *(_QWORD *)(a1 + 24);
      v122 = v105;
      goto LABEL_222;
    case 3:
      v29 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v30 = v29;
      v31 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[2]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = (v31 + v30);
      if (a2[3])
        v32 = xmlXPathEqualValues((xmlXPathParserContextPtr)a1);
      else
        v32 = xmlXPathNotEqualValues((xmlXPathParserContextPtr)a1);
      goto LABEL_145;
    case 4:
      v33 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v34 = v33;
      v35 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[2]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = (v35 + v34);
      v32 = xmlXPathCompareValues((xmlXPathParserContextPtr)a1, a2[3], a2[4]);
LABEL_145:
      v71 = xmlXPathCacheNewBoolean(*(_QWORD *)(a1 + 24), v32);
      goto LABEL_146;
    case 5:
      v36 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = v36;
      v37 = a2[2];
      if (v37 == -1)
        goto LABEL_48;
      v38 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v37);
      if (!*(_DWORD *)(a1 + 16))
      {
        v2 = (v38 + v2);
LABEL_48:
        switch(a2[3])
        {
          case 0u:
            xmlXPathSubValues((xmlXPathParserContextPtr)a1);
            goto LABEL_287;
          case 1u:
            xmlXPathAddValues((xmlXPathParserContextPtr)a1);
            goto LABEL_287;
          case 2u:
            xmlXPathValueFlipSign((xmlXPathParserContextPtr)a1);
            goto LABEL_287;
          case 3u:
            v111 = *(_DWORD **)(a1 + 32);
            if (!v111)
              goto LABEL_289;
            if (*v111 != 3)
            {
              xmlXPathNumberFunction((xmlXPathParserContextPtr)a1, 1);
              v112 = *(_DWORD **)(a1 + 32);
              if (!v112 || *v112 != 3)
                goto LABEL_289;
            }
            goto LABEL_287;
          default:
            goto LABEL_287;
        }
      }
      return 0;
    case 6:
      v39 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v40 = v39;
      v41 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[2]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = (v41 + v40);
      v42 = a2[3];
      switch(v42)
      {
        case 2u:
          xmlXPathModValues((xmlXPathParserContextPtr)a1);
          break;
        case 1u:
          xmlXPathDivValues((xmlXPathParserContextPtr)a1);
          break;
        case 0u:
          xmlXPathMultValues((xmlXPathParserContextPtr)a1);
          break;
      }
      goto LABEL_287;
    case 7:
      v43 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[1]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v44 = v43;
      v45 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * (int)a2[2]);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v46 = *(_DWORD *)(a1 + 40);
      v47 = v46 - 1;
      if (v46 < 1)
      {
        v50 = 0;
        v49 = 0;
        goto LABEL_181;
      }
      *(_DWORD *)(a1 + 40) = v47;
      v48 = *(_QWORD *)(a1 + 48);
      if (v46 == 1)
      {
        v49 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v50 = *(xmlXPathObject **)(v48 + 8 * v47);
        *(_QWORD *)(v48 + 8 * v47) = 0;
LABEL_181:
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v49);
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v50);
        goto LABEL_289;
      }
      v113 = 0;
      v114 = (v46 - 2);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v48 + 8 * v114);
      v50 = *(xmlXPathObject **)(v48 + 8 * v47);
      *(_QWORD *)(v48 + 8 * v47) = 0;
      *(_DWORD *)(a1 + 40) = v114;
      v115 = *(_QWORD *)(a1 + 48);
      if (v46 != 2)
        v113 = *(_QWORD *)(v115 + 8 * (v46 - 3));
      *(_QWORD *)(a1 + 32) = v113;
      v49 = *(xmlXPathObject **)(v115 + 8 * v114);
      *(_QWORD *)(v115 + 8 * v114) = 0;
      if (!v49)
        goto LABEL_181;
      v116 = v49->type != XPATH_NODESET || v50 == 0;
      if (v116 || v50->type != XPATH_NODESET)
        goto LABEL_181;
      v2 = (v45 + v44);
      if (linkedOnOrAfterFall2022OSVersions()
        && *(_QWORD *)(*(_QWORD *)(a1 + 24) + 352)
        && ((p_nodeNr = &v49->nodesetval->nodeNr) != 0
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *p_nodeNr) & 0x80000000) != 0
         || (v118 = &v50->nodesetval->nodeNr) != 0
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *v118) & 0x80000000) != 0))
      {
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v49);
      }
      else
      {
        nodesetval = v49->nodesetval;
        v120 = v50->nodesetval;
        if (!nodesetval || v120 && v120->nodeNr)
          v49->nodesetval = xmlXPathNodeSetMerge(nodesetval, v120);
        valuePush((xmlXPathParserContextPtr)a1, v49);
      }
      v121 = *(_QWORD *)(a1 + 24);
      v122 = v50;
LABEL_222:
      xmlXPathReleaseObject(v121, v122);
      goto LABEL_287;
    case 8:
      xmlXPathRoot((xmlXPathParserContextPtr)a1);
      goto LABEL_68;
    case 9:
      v51 = a2[1];
      if (v51 == -1)
        v2 = 0;
      else
        v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v51);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v69 = a2[2];
      if (v69 == -1)
        goto LABEL_94;
      v70 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v69);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = (v70 + v2);
LABEL_94:
      v71 = xmlXPathCacheNewNodeSet(*(_QWORD *)(a1 + 24), *(xmlNodePtr *)(*(_QWORD *)(a1 + 24) + 8));
      goto LABEL_146;
    case 10:
      v52 = a2[1];
      if (v52 == -1)
        goto LABEL_68;
      v53 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v52);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = xmlXPathNodeCollectAndTest((xmlXPathParserContextPtr)a1, (uint64_t)a2, 0, 0, 0) + v53;
      goto LABEL_287;
    case 11:
      v54 = xmlXPathCacheObjectCopy(*(_QWORD *)(a1 + 24), *((xmlXPathObjectPtr *)a2 + 3));
      valuePush((xmlXPathParserContextPtr)a1, v54);
LABEL_68:
      v2 = 0;
      goto LABEL_287;
    case 12:
      v55 = a2[1];
      if (v55 == -1)
        v2 = 0;
      else
        v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v55);
      v72 = (const xmlChar *)*((_QWORD *)a2 + 4);
      v73 = *(xmlXPathContext **)(a1 + 24);
      if (v72)
      {
        v74 = xmlXPathNsLookup(v73, v72);
        if (!v74)
        {
          v91 = *__xmlGenericError();
          v92 = *__xmlGenericErrorContext();
          v93 = "xmlXPathCompOpEval: variable %s bound to undefined prefix %s\n";
LABEL_133:
          v91(v92, v93);
          v78 = 19;
LABEL_104:
          *(_DWORD *)(a1 + 16) = v78;
          goto LABEL_287;
        }
        v71 = xmlXPathVariableLookupNS(*(xmlXPathContextPtr *)(a1 + 24), *((const xmlChar **)a2 + 3), v74);
        if (!v71)
          goto LABEL_126;
      }
      else
      {
        v71 = xmlXPathVariableLookup(v73, *((const xmlChar **)a2 + 3));
        if (!v71)
        {
LABEL_126:
          v8 = (xmlXPathParserContext *)a1;
          v9 = 5;
          goto LABEL_10;
        }
      }
LABEL_146:
      v106 = v71;
      v107 = (xmlXPathParserContext *)a1;
LABEL_147:
      valuePush(v107, v106);
      goto LABEL_287;
    case 13:
      v56 = *(_DWORD *)(a1 + 40);
      v57 = a2[1];
      if (v57 == -1)
      {
        v2 = 0;
        v58 = *(_DWORD *)(a1 + 40);
      }
      else
      {
        v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v57);
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_287;
        v58 = *(_DWORD *)(a1 + 40);
      }
      v75 = a2[3];
      if (v58 < (int)v75 + v56)
      {
        v76 = *__xmlGenericError();
        v77 = __xmlGenericErrorContext();
        v76(*v77, "xmlXPathCompOpEval: parameter error\n");
LABEL_103:
        v78 = 10;
        goto LABEL_104;
      }
      if ((int)v75 < 1)
        goto LABEL_136;
      v90 = v58 - 1;
      while (*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v90))
      {
        --v90;
        if (!--v75)
          goto LABEL_136;
      }
      v94 = *__xmlGenericError();
      v95 = __xmlGenericErrorContext();
      v94(*v95, "xmlXPathCompOpEval: parameter error\n");
      *(_DWORD *)(a1 + 16) = 10;
LABEL_136:
      v96 = (xmlXPathFunction)*((_QWORD *)a2 + 5);
      if (v96)
      {
        v97 = (const xmlChar *)*((_QWORD *)a2 + 6);
      }
      else
      {
        v98 = (const xmlChar *)*((_QWORD *)a2 + 4);
        v99 = *(xmlXPathContext **)(a1 + 24);
        if (v98)
        {
          v100 = xmlXPathNsLookup(v99, v98);
          if (!v100)
          {
            v91 = *__xmlGenericError();
            v92 = *__xmlGenericErrorContext();
            v93 = "xmlXPathCompOpEval: function %s bound to undefined prefix %s\n";
            goto LABEL_133;
          }
          v97 = v100;
          v96 = xmlXPathFunctionLookupNS(*(xmlXPathContextPtr *)(a1 + 24), *((const xmlChar **)a2 + 3), v100);
        }
        else
        {
          v96 = xmlXPathFunctionLookup(v99, *((const xmlChar **)a2 + 3));
          v97 = 0;
        }
        if (!v96)
        {
          v145 = *__xmlGenericError();
          v146 = __xmlGenericErrorContext();
          v145(*v146, "xmlXPathCompOpEval: function %s not found\n", *((const char **)a2 + 3));
          v8 = (xmlXPathParserContext *)a1;
          v9 = 9;
          goto LABEL_10;
        }
        *((_QWORD *)a2 + 5) = v96;
        *((_QWORD *)a2 + 6) = v97;
      }
      v123 = *(_QWORD *)(a1 + 24);
      v124 = a2[3];
      *(_OWORD *)cura = *(_OWORD *)(v123 + 168);
      *(_QWORD *)(v123 + 168) = *((_QWORD *)a2 + 3);
      *(_QWORD *)(v123 + 176) = v97;
      ((void (*)(uint64_t, uint64_t))v96)(a1, v124);
      *(_OWORD *)(*(_QWORD *)(a1 + 24) + 168) = *(_OWORD *)cura;
      if (!*(_DWORD *)(a1 + 16) && *(_DWORD *)(a1 + 40) != v56 + 1)
      {
        v8 = (xmlXPathParserContext *)a1;
        v9 = 23;
        goto LABEL_10;
      }
      goto LABEL_287;
    case 14:
      v59 = a2[1];
      if (v59 == -1)
      {
        v2 = 0;
      }
      else
      {
        v60 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v59);
        if (*(_DWORD *)(a1 + 16))
          return 0;
        v2 = v60;
      }
      v79 = a2[2];
      if (v79 == -1)
        goto LABEL_287;
      v80 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v79);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v2 = (v80 + v2);
      goto LABEL_287;
    case 15:
    case 16:
      v11 = a2[1];
      if (v11 == -1)
        goto LABEL_280;
      v12 = a2[2];
      if (v12 == -1)
        goto LABEL_88;
      v13 = *(_QWORD *)(v10 + 8);
      v14 = (unsigned int *)(v13 + 56 * v11);
      if ((*v14 & 0xFFFFFFFE) == 0x10 && *(_DWORD *)(v13 + 56 * v12) == 11)
      {
        v15 = *(_QWORD *)(v13 + 56 * v12 + 24);
        if (v15)
        {
          if (*(_DWORD *)v15 == 3 && *(double *)(v15 + 24) == 1.0)
          {
            v195 = 0;
            v2 = xmlXPathCompOpEvalFirst(a1, v14, &v195);
            if (*(_DWORD *)(a1 + 16))
            {
LABEL_21:
              v16 = 1;
              goto LABEL_277;
            }
            v175 = *(_QWORD *)(a1 + 32);
            if (v175)
            {
              if (*(_DWORD *)v175 == 1)
              {
                v176 = *(int **)(v175 + 8);
                if (v176)
                {
                  if (*v176 >= 2)
                    xmlXPathNodeSetClearFromPos(v176, 1, 1);
                }
              }
            }
LABEL_276:
            v16 = 2;
LABEL_277:
            if (v16 != 2)
              return 0;
            goto LABEL_287;
          }
        }
      }
      v67 = *(_QWORD *)(v10 + 8);
      if (*(_DWORD *)(v67 + 56 * v11) != 17)
        goto LABEL_88;
      if (*(_DWORD *)(v67 + 56 * v12) != 17)
        goto LABEL_88;
      v68 = *(_DWORD *)(v67 + 56 * v12 + 4);
      if (v68 == -1)
        goto LABEL_88;
      if (*(_DWORD *)(v67 + 56 * v68) != 13)
        goto LABEL_88;
      if (*(_QWORD *)(v67 + 56 * v68 + 32))
        goto LABEL_88;
      if (*(_DWORD *)(v67 + 56 * v68 + 12))
        goto LABEL_88;
      v177 = *(const xmlChar **)(v67 + 56 * v68 + 24);
      if (!v177)
        goto LABEL_88;
      v178 = xmlStrEqual(v177, (const xmlChar *)"last");
      v179 = a2[1];
      if (v178)
      {
        v195 = 0;
        v2 = xmlXPathCompOpEvalLast(a1, (unsigned int *)(*(_QWORD *)(v10 + 8) + 56 * v179), &v195);
        if (*(_DWORD *)(a1 + 16))
          goto LABEL_21;
        v180 = *(_QWORD *)(a1 + 32);
        if (v180)
        {
          if (*(_DWORD *)v180 == 1)
          {
            v181 = *(_QWORD *)(v180 + 8);
            if (v181)
            {
              if (*(_QWORD *)(v181 + 8) && *(int *)v181 >= 2)
                xmlXPathNodeSetKeepLast(v181);
            }
          }
        }
        goto LABEL_276;
      }
      v11 = a2[1];
      if (v179 == -1)
LABEL_280:
        v2 = 0;
      else
LABEL_88:
        v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v11);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v182 = a2[2];
      if (v182 != -1)
      {
        v183 = *(_QWORD *)(a1 + 32);
        if (v183)
        {
          if (*(_DWORD *)v183 == 1)
          {
            v184 = *(_DWORD *)(a1 + 40);
            v185 = *(_QWORD *)(a1 + 48);
            v186 = v184 - 1;
            *(_DWORD *)(a1 + 40) = v184 - 1;
            if (v184 == 1)
              v187 = 0;
            else
              v187 = *(_QWORD *)(v185 + 8 * (v184 - 2));
            *(_QWORD *)(a1 + 32) = v187;
            v188 = *(xmlXPathObject **)(v185 + 8 * v186);
            *(_QWORD *)(v185 + 8 * v186) = 0;
            v189 = &v188->nodesetval->nodeNr;
            if (v189)
              xmlXPathNodeSetFilter((xmlXPathParserContext *)a1, v189, a2[2], 1, *v189, 1);
            v107 = (xmlXPathParserContext *)a1;
            v106 = v188;
            goto LABEL_147;
          }
          if (*(_DWORD *)v183 != 7)
            goto LABEL_289;
          xmlXPathLocationSetFilter((xmlXPathParserContext *)a1, *(int **)(v183 + 40), v182, **(_DWORD **)(v183 + 40));
        }
      }
      goto LABEL_287;
    case 17:
      v61 = a2[1];
      if (v61 == -1)
        v2 = 0;
      else
        v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v61);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v81 = *(_QWORD *)(a1 + 32);
      if (v81)
      {
        if (*(_DWORD *)v81 == 1)
        {
          v82 = *(unsigned int **)(v81 + 8);
          if (v82)
          {
            v83 = *v82;
            if ((int)v83 >= 2)
              libxml_domnode_tim_sort(*((_QWORD *)v82 + 1), v83);
          }
        }
      }
      goto LABEL_287;
    case 18:
      v62 = *(_QWORD *)(a1 + 24);
      v63 = *(_QWORD *)(v62 + 8);
      v64 = *(_QWORD *)(v62 + 104);
      v65 = a2[1];
      if (v65 == -1)
      {
        v2 = 0;
      }
      else
      {
        v66 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v65);
        if (*(_DWORD *)(a1 + 16))
          return 0;
        v2 = v66;
      }
      v84 = *(_QWORD *)(a1 + 32);
      if (!v84)
      {
        v8 = (xmlXPathParserContext *)a1;
        v9 = 10;
        goto LABEL_10;
      }
      if (a2[2] == -1)
        goto LABEL_287;
      if (*(_DWORD *)v84 == 1)
      {
        v101 = *(_DWORD *)(a1 + 40);
        v102 = *(_QWORD *)(a1 + 48);
        v103 = v101 - 1;
        *(_DWORD *)(a1 + 40) = v101 - 1;
        if (v101 == 1)
          v104 = 0;
        else
          v104 = *(_QWORD *)(v102 + 8 * (v101 - 2));
        *(_QWORD *)(a1 + 32) = v104;
        v125 = *(xmlXPathObject **)(v102 + 8 * v103);
        *(_QWORD *)(v102 + 8 * v103) = 0;
        v126 = &v125->nodesetval->nodeNr;
        cur = xmlXPtrLocationSetCreate(0);
        if (v126 && *v126 >= 1)
        {
          v127 = v125;
          v128 = 0;
          while (1)
          {
            v129 = *(xmlNode **)(*((_QWORD *)v126 + 1) + 8 * v128);
            v130 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(v130 + 8) = v129;
            v131 = xmlXPathCacheNewNodeSet(v130, v129);
            valuePush((xmlXPathParserContextPtr)a1, v131);
            v132 = a2[2];
            if (v132 != -1)
              v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v132) + v2;
            if (*(_DWORD *)(a1 + 16))
              break;
            v133 = *(_DWORD *)(a1 + 40);
            v134 = v133 - 1;
            if (v133 < 1)
            {
              v136 = 0;
            }
            else
            {
              *(_DWORD *)(a1 + 40) = v134;
              v135 = *(_QWORD *)(a1 + 48);
              if (v133 == 1)
                v137 = 0;
              else
                v137 = *(_QWORD *)(v135 + 8 * (v133 - 2));
              *(_QWORD *)(a1 + 32) = v137;
              v136 = *(xmlXPathObject **)(v135 + 8 * v134);
              *(_QWORD *)(v135 + 8 * v134) = 0;
            }
            v138 = xmlXPtrNewRangeNodeObject(*(xmlNodePtr *)(*((_QWORD *)v126 + 1) + 8 * v128), v136);
            if (v138)
              xmlXPtrLocationSetAdd(cur, v138);
            if (v136)
              xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v136);
            if (*(xmlXPathObject **)(a1 + 32) == v131)
            {
              v139 = *(_DWORD *)(a1 + 40);
              v140 = v139 - 1;
              if (v139 < 1)
              {
                v142 = 0;
              }
              else
              {
                *(_DWORD *)(a1 + 40) = v140;
                v141 = *(_QWORD *)(a1 + 48);
                if (v139 == 1)
                  v143 = 0;
                else
                  v143 = *(_QWORD *)(v141 + 8 * (v139 - 2));
                *(_QWORD *)(a1 + 32) = v143;
                v142 = *(xmlXPathObject **)(v141 + 8 * v140);
                *(_QWORD *)(v141 + 8 * v140) = 0;
              }
              xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v142);
            }
            if (++v128 >= *v126)
            {
              v125 = v127;
              goto LABEL_259;
            }
          }
          xmlXPtrFreeLocationSet(cur);
          v125 = v127;
LABEL_260:
          xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v125);
          v174 = *(_QWORD *)(a1 + 24);
          *(_QWORD *)(v174 + 8) = v63;
          *(_QWORD *)(v174 + 104) = v64;
          goto LABEL_287;
        }
LABEL_259:
        v173 = xmlXPtrWrapLocationSet(cur);
        valuePush((xmlXPathParserContextPtr)a1, v173);
        goto LABEL_260;
      }
      if (*(_DWORD *)v84 != 7)
      {
LABEL_289:
        v8 = (xmlXPathParserContext *)a1;
        v9 = 11;
        goto LABEL_10;
      }
      v85 = *(_DWORD **)(v84 + 40);
      if (v85 && *v85)
      {
        v86 = *(_DWORD *)(a1 + 40);
        v87 = *(_QWORD *)(a1 + 48);
        v88 = v86 - 1;
        *(_DWORD *)(a1 + 40) = v86 - 1;
        v191 = v63;
        if (v86 == 1)
          v89 = 0;
        else
          v89 = *(_QWORD *)(v87 + 8 * (v86 - 2));
        *(_QWORD *)(a1 + 32) = v89;
        v147 = *(xmlXPathObject **)(v87 + 8 * v88);
        *(_QWORD *)(v87 + 8 * v88) = 0;
        v190 = v147;
        user = (int *)v147->user;
        cur = xmlXPtrLocationSetCreate(0);
        LODWORD(v149) = *user;
        if (*user >= 1)
        {
          v150 = 0;
          while (1)
          {
            v151 = *(xmlNode **)(*(_QWORD *)(*((_QWORD *)user + 1) + 8 * v150) + 40);
            v152 = *(_QWORD *)(a1 + 24);
            *(_QWORD *)(v152 + 8) = v151;
            *(_DWORD *)(v152 + 104) = v149;
            *(_DWORD *)(v152 + 108) = v150 + 1;
            v153 = xmlXPathCacheNewNodeSet(v152, v151);
            valuePush((xmlXPathParserContextPtr)a1, v153);
            v154 = a2[2];
            if (v154 != -1)
              v2 = xmlXPathCompOpEval(a1, *(_QWORD *)(v10 + 8) + 56 * v154) + v2;
            if (*(_DWORD *)(a1 + 16))
              break;
            v155 = *(_DWORD *)(a1 + 40);
            v156 = v155 - 1;
            v192 = v150 + 1;
            if (v155 < 1)
            {
              v158 = 0;
            }
            else
            {
              *(_DWORD *)(a1 + 40) = v156;
              v157 = *(_QWORD *)(a1 + 48);
              if (v155 == 1)
                v159 = 0;
              else
                v159 = *(_QWORD *)(v157 + 8 * (v155 - 2));
              *(_QWORD *)(a1 + 32) = v159;
              v158 = *(xmlXPathObject **)(v157 + 8 * v156);
              *(_QWORD *)(v157 + 8 * v156) = 0;
            }
            if (v158->type == XPATH_LOCATIONSET)
            {
              v160 = (int *)v158->user;
              if (*v160 >= 1)
              {
                v161 = 0;
                do
                {
                  v162 = *(_QWORD *)(*((_QWORD *)user + 1) + 8 * v150);
                  v163 = *(xmlNode **)(v162 + 40);
                  v164 = *(_DWORD *)(v162 + 48);
                  v165 = *(_QWORD *)(*((_QWORD *)v160 + 1) + 8 * v161);
                  v166 = xmlXPtrNewRange(v163, v164, *(xmlNodePtr *)(v165 + 56), *(_DWORD *)(v165 + 64));
                  if (v166)
                    xmlXPtrLocationSetAdd(cur, v166);
                  ++v161;
                }
                while (v161 < *v160);
              }
            }
            else
            {
              v167 = xmlXPtrNewRangeNodeObject(*(xmlNodePtr *)(*(_QWORD *)(*((_QWORD *)user + 1) + 8 * v150) + 40), v158);
              if (v167)
                xmlXPtrLocationSetAdd(cur, v167);
            }
            xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v158);
            if (*(xmlXPathObject **)(a1 + 32) == v153)
            {
              v168 = *(_DWORD *)(a1 + 40);
              v169 = v168 - 1;
              if (v168 < 1)
              {
                v171 = 0;
              }
              else
              {
                *(_DWORD *)(a1 + 40) = v169;
                v170 = *(_QWORD *)(a1 + 48);
                if (v168 == 1)
                  v172 = 0;
                else
                  v172 = *(_QWORD *)(v170 + 8 * (v168 - 2));
                *(_QWORD *)(a1 + 32) = v172;
                v171 = *(xmlXPathObject **)(v170 + 8 * v169);
                *(_QWORD *)(v170 + 8 * v169) = 0;
              }
              xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v171);
            }
            v149 = *user;
            ++v150;
            if (v192 >= v149)
              goto LABEL_258;
          }
          xmlXPtrFreeLocationSet(cur);
          v125 = v190;
          v63 = v191;
          goto LABEL_260;
        }
LABEL_258:
        v125 = v190;
        v63 = v191;
        goto LABEL_259;
      }
LABEL_287:
      if (linkedOnOrAfterFall2022OSVersions())
        --*(_DWORD *)(*(_QWORD *)(a1 + 24) + 368);
      return v2;
    default:
      v17 = *__xmlGenericError();
      v18 = __xmlGenericErrorContext();
      v17(*v18, "XPath: unknown precompiled operation %d\n", *a2);
      v2 = 0;
      goto LABEL_103;
  }
}

uint64_t xmlXPathCheckOpLimit(xmlXPathParserContext *a1, unint64_t a2)
{
  uint64_t result;
  xmlXPathContextPtr context;
  unint64_t opLimit;
  unint64_t opCount;

  result = linkedOnOrAfterFall2022OSVersions();
  if ((_DWORD)result)
  {
    context = a1->context;
    opLimit = context->opLimit;
    if (opLimit >= a2 && (opCount = context->opCount, opCount <= opLimit - a2))
    {
      result = 0;
      context->opCount = opCount + a2;
    }
    else
    {
      context->opCount = opLimit;
      xmlXPathErr(a1, 25);
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t xmlXPathNodeCollectAndTest(xmlXPathParserContextPtr ctxt, uint64_t a2, uint64_t *a3, uint64_t *a4, int a5)
{
  xmlXPathParserContextPtr v5;
  xmlXPathObjectPtr value;
  xmlChar *v11;
  const xmlChar *v12;
  xmlXPathContextPtr context;
  int valueNr;
  unsigned int v15;
  xmlXPathObjectPtr *valueTab;
  int v17;
  uint64_t v18;
  xmlXPathObject *v20;
  const xmlChar *v21;
  xmlXPathObject *v22;
  uint64_t *v23;
  xmlNodePtr (__cdecl *v24)(xmlXPathParserContextPtr, xmlNodePtr);
  BOOL v26;
  xmlNodePtr (__cdecl *v27)(xmlXPathParserContextPtr, xmlNodePtr);
  int *p_nodeNr;
  int v29;
  uint64_t v30;
  _DWORD *v31;
  int v32;
  uint64_t v33;
  double v34;
  int v35;
  xmlXPathObject *v36;
  uint64_t v37;
  BOOL v38;
  char v39;
  int v40;
  uint64_t v41;
  xmlNodeSetPtr v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  const xmlChar *v51;
  const xmlChar *v52;
  xmlXPathObject *v53;
  xmlXPathContext *v54;
  xmlGenericErrorFunc v55;
  void **v56;
  uint64_t v57;
  const xmlChar *v58;
  int nodeNr;
  int v60;
  int *v61;
  xmlGenericErrorFunc v62;
  void **v63;
  void *user;
  xmlXPathObjectPtr v65;
  xmlNodeSet *v66;
  xmlXPathObject *v67;
  xmlNsPtr *tmpNsList;
  char v69;
  xmlNode *node;
  uint64_t v71;
  xmlNodeSetPtr nodesetval;
  const xmlChar *v73;
  int v74;
  unsigned int v75;
  char v76;
  xmlNodeSetPtr val;
  xmlChar *v78;
  int v79;
  xmlChar *str1;
  int *(*v81)(unsigned int *, int *);
  char v82;
  int v83;
  xmlNodeSetPtr cur;
  int v85;
  int v86;
  xmlNodePtr (__cdecl *v87)(xmlXPathParserContextPtr, xmlNodePtr);

  v5 = ctxt;
  value = ctxt->value;
  if (!value || value->type != XPATH_NODESET)
  {
    v17 = 11;
    goto LABEL_8;
  }
  v85 = *(_DWORD *)(a2 + 12);
  v86 = *(_DWORD *)(a2 + 16);
  v83 = *(_DWORD *)(a2 + 20);
  v12 = *(const xmlChar **)(a2 + 24);
  v11 = *(xmlChar **)(a2 + 32);
  context = ctxt->context;
  valueNr = ctxt->valueNr;
  v15 = valueNr - 1;
  if (valueNr < 1)
  {
    v20 = 0;
    if (v12)
    {
LABEL_14:
      v21 = xmlXPathNsLookup(context, v12);
      if (v21)
        goto LABEL_15;
      xmlXPathReleaseObject((uint64_t)context, v20);
      ctxt = v5;
      v17 = 19;
LABEL_8:
      xmlXPathErr(ctxt, v17);
      return 0;
    }
  }
  else
  {
    ctxt->valueNr = v15;
    valueTab = ctxt->valueTab;
    if (valueNr == 1)
      v22 = 0;
    else
      v22 = valueTab[valueNr - 2];
    ctxt->value = v22;
    v20 = valueTab[v15];
    valueTab[v15] = 0;
    if (v12)
      goto LABEL_14;
  }
  v21 = 0;
LABEL_15:
  v78 = (xmlChar *)v21;
  str1 = v11;
  v23 = 0;
  v81 = xmlXPathNodeSetMergeAndClear;
  v87 = xmlXPathNextAncestor;
  switch(v85)
  {
    case 1:
      goto LABEL_39;
    case 2:
      v23 = 0;
      v81 = xmlXPathNodeSetMergeAndClear;
      v24 = xmlXPathNextAncestorOrSelf;
      goto LABEL_38;
    case 3:
      v23 = 0;
      a4 = 0;
      v81 = (int *(*)(unsigned int *, int *))xmlXPathNodeSetMergeAndClearNoDupls;
      v24 = xmlXPathNextAttribute;
      goto LABEL_38;
    case 4:
      a4 = 0;
      v26 = (v86 == 3 || v86 == 5) && v83 == 0;
      v27 = xmlXPathNextChild;
      if (v26)
        v27 = (xmlNodePtr (__cdecl *)(xmlXPathParserContextPtr, xmlNodePtr))xmlXPathNextChildElement;
      v87 = v27;
      v81 = (int *(*)(unsigned int *, int *))xmlXPathNodeSetMergeAndClearNoDupls;
      v23 = a3;
      goto LABEL_39;
    case 5:
      a4 = 0;
      v81 = xmlXPathNodeSetMergeAndClear;
      v23 = a3;
      v24 = xmlXPathNextDescendant;
      goto LABEL_38;
    case 6:
      a4 = 0;
      v81 = xmlXPathNodeSetMergeAndClear;
      v23 = a3;
      v24 = xmlXPathNextDescendantOrSelf;
      goto LABEL_38;
    case 7:
      a4 = 0;
      v81 = xmlXPathNodeSetMergeAndClear;
      v23 = a3;
      v24 = xmlXPathNextFollowing;
      goto LABEL_38;
    case 8:
      a4 = 0;
      v81 = xmlXPathNodeSetMergeAndClear;
      v23 = a3;
      v24 = xmlXPathNextFollowingSibling;
      goto LABEL_38;
    case 9:
      v23 = 0;
      a4 = 0;
      v81 = (int *(*)(unsigned int *, int *))xmlXPathNodeSetMergeAndClearNoDupls;
      v24 = xmlXPathNextNamespace;
      goto LABEL_38;
    case 10:
      v23 = 0;
      v81 = xmlXPathNodeSetMergeAndClear;
      v24 = xmlXPathNextParent;
      goto LABEL_38;
    case 11:
      v23 = 0;
      v81 = xmlXPathNodeSetMergeAndClear;
      v24 = (xmlNodePtr (__cdecl *)(xmlXPathParserContextPtr, xmlNodePtr))xmlXPathNextPrecedingInternal;
      goto LABEL_38;
    case 12:
      v23 = 0;
      v81 = xmlXPathNodeSetMergeAndClear;
      v24 = xmlXPathNextPrecedingSibling;
      goto LABEL_38;
    case 13:
      v23 = 0;
      a4 = 0;
      v81 = (int *(*)(unsigned int *, int *))xmlXPathNodeSetMergeAndClearNoDupls;
      v24 = xmlXPathNextSelf;
LABEL_38:
      v87 = v24;
LABEL_39:
      p_nodeNr = &v20->nodesetval->nodeNr;
      if (!p_nodeNr || *p_nodeNr <= 0)
      {
        xmlXPathReleaseObject((uint64_t)context, v20);
        v36 = xmlXPathCacheWrapNodeSet((uint64_t)context, 0);
        valuePush(v5, v36);
        return 0;
      }
      v29 = *(_DWORD *)(a2 + 8);
      v74 = a5;
      v73 = v12;
      if (v29 == -1)
      {
        v79 = 0;
        v31 = 0;
        goto LABEL_56;
      }
      v30 = *((_QWORD *)v5->comp + 1);
      v31 = (_DWORD *)(v30 + 56 * v29);
      if ((*v31 - 15) > 1
        || (v32 = *(_DWORD *)(v30 + 56 * v29 + 8), v32 == -1)
        || *(_DWORD *)(v30 + 56 * v32) != 11
        || (v33 = *(_QWORD *)(v30 + 56 * v32 + 24)) == 0
        || *(_DWORD *)v33 != 3)
      {
        v79 = 0;
LABEL_56:
        v69 = 1;
LABEL_57:
        v82 = 1;
        goto LABEL_58;
      }
      v79 = 0;
      v34 = *(double *)(v33 + 24);
      v69 = 1;
      if (v34 <= -2147483650.0 || v34 >= 2147483650.0)
        goto LABEL_57;
      v79 = (int)v34;
      if (v34 != (double)(int)v34)
        goto LABEL_56;
      v35 = *(_DWORD *)(v30 + 56 * v29 + 4);
      if (v35 != -1)
      {
        v69 = 0;
        v31 = (_DWORD *)(v30 + 56 * v35);
        goto LABEL_57;
      }
      v31 = 0;
      v82 = 0;
      v69 = 1;
LABEL_58:
      v37 = 0;
      cur = 0;
      val = 0;
      v18 = 0;
      if (a5)
        v38 = v31 == 0;
      else
        v38 = 0;
      v39 = v38;
      v76 = v39;
      node = context->node;
      v40 = v85;
      v71 = (uint64_t)v31;
      nodesetval = v20->nodesetval;
      while (1)
      {
        if (v5->error)
          goto LABEL_184;
        context->node = *(xmlNodePtr *)(*((_QWORD *)p_nodeNr + 1) + 8 * v37);
        if (!cur)
        {
          v41 = v37;
          v42 = xmlXPathNodeSetCreate(0);
          v37 = v41;
          cur = v42;
          if (!v42)
          {
            v18 = 0;
            goto LABEL_183;
          }
        }
        v75 = 0;
        v43 = 0;
        v44 = 0;
        v45 = v37 + 1;
LABEL_69:
        v46 = v45;
        if (linkedOnOrAfterFall2022OSVersions()
          && v5->context->opLimit
          && (xmlXPathCheckOpLimit(v5, 1uLL) & 0x80000000) != 0)
        {
          goto LABEL_184;
        }
        v47 = ((uint64_t (*)(xmlXPathParserContextPtr, uint64_t))v87)(v5, v43);
        if (v47)
        {
          v43 = v47;
          if (!v23
            || (v48 = *v23) == 0
            || v48 != v43 && ((_BYTE)v18 || (xmlXPathCmpNodesExt(v48, v43) & 0x80000000) != 0))
          {
            if (!a4)
              break;
            v49 = *a4;
            if (!*a4 || v49 != v43 && ((_BYTE)v18 || (xmlXPathCmpNodesExt(v43, v49) & 0x80000000) != 0))
              break;
          }
        }
        if (v5->error)
          goto LABEL_184;
        p_nodeNr = &nodesetval->nodeNr;
        v37 = v46;
        if (v71)
        {
          nodeNr = cur->nodeNr;
          if (cur->nodeNr < 1)
            goto LABEL_173;
          if ((v69 & 1) != 0)
          {
            v60 = 1;
          }
          else
          {
            v60 = v79;
            nodeNr = v79;
          }
          xmlXPathCompOpEvalPredicate(v5, v71, &cur->nodeNr, v60, nodeNr, v75);
          v37 = v46;
          if (v5->error)
          {
LABEL_178:
            v18 = 0;
            goto LABEL_184;
          }
        }
        if (cur->nodeNr >= 1)
        {
          if (val)
          {
            v61 = v81((unsigned int *)val, &cur->nodeNr);
            v37 = v46;
            val = (xmlNodeSetPtr)v61;
          }
          else
          {
            val = cur;
            cur = 0;
          }
          goto LABEL_172;
        }
LABEL_173:
        if (v37 >= *p_nodeNr)
          goto LABEL_184;
      }
      v18 = (v18 + 1);
      switch(v86)
      {
        case 0:
          v62 = *__xmlGenericError();
          v63 = __xmlGenericErrorContext();
          v62(*v63, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 12249);
          goto LABEL_178;
        case 1:
          v50 = *(_DWORD *)(v43 + 8);
          if (v83)
          {
            if (v50 == v83)
            {
              if (v83 == 18)
                goto LABEL_126;
              goto LABEL_138;
            }
            if (v83 != 3)
              goto LABEL_96;
            v45 = v46;
            if (v50 != 4)
              goto LABEL_97;
            goto LABEL_143;
          }
          if (v50 > 0x15)
            goto LABEL_96;
          if (((1 << v50) & 0x20239E) == 0)
          {
            v45 = v46;
            if (v50 == 18)
            {
              if (v40 != 9)
              {
                if ((v82 & 1) != 0)
                {
                  if (xmlXPathNodeSetAddUnique(cur, (xmlNodePtr)v43) < 0)
LABEL_128:
                    v5->error = 15;
LABEL_129:
                  if ((v76 & 1) != 0)
                    goto LABEL_179;
                  v45 = v46;
                }
                else if (++v44 == v79)
                {
LABEL_155:
                  if (xmlXPathNodeSetAddUnique(cur, (xmlNodePtr)v43) < 0)
                    goto LABEL_156;
                  goto LABEL_157;
                }
                v75 = 1;
                goto LABEL_97;
              }
LABEL_115:
              if ((v82 & 1) != 0)
                goto LABEL_127;
              if (++v44 == v79)
                goto LABEL_175;
            }
            goto LABEL_97;
          }
          goto LABEL_138;
        case 2:
          if (*(_DWORD *)(v43 + 8) != 7)
            goto LABEL_96;
          v51 = str1;
          if (!str1)
            goto LABEL_138;
          v52 = *(const xmlChar **)(v43 + 16);
          goto LABEL_137;
        case 3:
          if (v40 == 9)
          {
            v45 = v46;
            if (*(_DWORD *)(v43 + 8) != 18)
              goto LABEL_97;
            goto LABEL_115;
          }
          v45 = v46;
          if (v40 == 3)
          {
            if (*(_DWORD *)(v43 + 8) != 2)
              goto LABEL_97;
          }
          else if (*(_DWORD *)(v43 + 8) != 1)
          {
            goto LABEL_97;
          }
          if (!v73)
            goto LABEL_143;
          v57 = *(_QWORD *)(v43 + 72);
          if (v57)
            goto LABEL_136;
          goto LABEL_97;
        case 4:
          v53 = v20;
          v54 = context;
          v55 = *__xmlGenericError();
          v56 = __xmlGenericErrorContext();
          v55(*v56, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpath.c", 12330);
          context = v54;
          v20 = v53;
          v40 = v85;
          goto LABEL_96;
        case 5:
          if (v40 != 9)
          {
            v45 = v46;
            if (v40 == 3)
            {
              if (*(_DWORD *)(v43 + 8) != 2)
                goto LABEL_97;
              if (!xmlStrEqual(str1, *(const xmlChar **)(v43 + 16)))
                goto LABEL_96;
              v57 = *(_QWORD *)(v43 + 72);
              if (v73)
              {
LABEL_135:
                if (!v57)
                  goto LABEL_96;
LABEL_136:
                v52 = *(const xmlChar **)(v57 + 16);
                v51 = v78;
LABEL_137:
                if (!xmlStrEqual(v51, v52))
                  goto LABEL_96;
LABEL_138:
                if ((v82 & 1) == 0)
                {
                  ++v44;
                  v45 = v46;
                  if (v44 == v79)
                    goto LABEL_155;
                  goto LABEL_97;
                }
                goto LABEL_144;
              }
              v45 = v46;
              if (v57 && *(_QWORD *)(v57 + 24))
                goto LABEL_97;
            }
            else
            {
              if (*(_DWORD *)(v43 + 8) != 1)
                goto LABEL_97;
              if (!xmlStrEqual(str1, *(const xmlChar **)(v43 + 16)))
                goto LABEL_96;
              v57 = *(_QWORD *)(v43 + 72);
              if (v73)
                goto LABEL_135;
              v45 = v46;
              if (v57)
                goto LABEL_97;
            }
LABEL_143:
            if ((v82 & 1) == 0)
            {
              if (++v44 == v79)
                goto LABEL_155;
              goto LABEL_97;
            }
LABEL_144:
            if (xmlXPathNodeSetAddUnique(cur, (xmlNodePtr)v43) < 0)
              v5->error = 15;
            v45 = v46;
            if ((v76 & 1) != 0)
            {
LABEL_179:
              if (val)
              {
                val = (xmlNodeSetPtr)v81((unsigned int *)val, &cur->nodeNr);
                goto LABEL_184;
              }
              val = cur;
LABEL_183:
              cur = 0;
              goto LABEL_184;
            }
LABEL_97:
            if (v5->error)
              goto LABEL_184;
            goto LABEL_69;
          }
          v45 = v46;
          if (*(_DWORD *)(v43 + 8) != 18)
            goto LABEL_97;
          v58 = *(const xmlChar **)(v43 + 24);
          if (!v58 || !str1)
            goto LABEL_97;
          if (!xmlStrEqual(v58, str1))
          {
LABEL_96:
            v45 = v46;
            goto LABEL_97;
          }
LABEL_126:
          if ((v82 & 1) != 0)
          {
LABEL_127:
            if (xmlXPathNodeSetAddNs(cur, context->node, (xmlNsPtr)v43) < 0)
              goto LABEL_128;
            goto LABEL_129;
          }
          ++v44;
          v45 = v46;
          if (v44 != v79)
            goto LABEL_97;
LABEL_175:
          if (xmlXPathNodeSetAddNs(cur, context->node, (xmlNsPtr)v43) < 0)
LABEL_156:
            v5->error = 15;
LABEL_157:
          p_nodeNr = &nodesetval->nodeNr;
          if (val)
          {
            val = (xmlNodeSetPtr)v81((unsigned int *)val, &cur->nodeNr);
          }
          else
          {
            val = cur;
            cur = 0;
          }
          v37 = v46;
LABEL_172:
          if (!v74)
            goto LABEL_173;
LABEL_184:
          if (v20->BOOLval)
          {
            user = v20->user;
            if (user)
            {
              v65 = v5->value;
              v65->BOOLval = 1;
              v65->user = user;
              v20->user = 0;
              v20->BOOLval = 0;
            }
          }
          xmlXPathReleaseObject((uint64_t)context, v20);
          v66 = val;
          if (!val)
          {
            if (!cur || (v66 = cur, cur->nodeNr))
              v66 = xmlXPathNodeSetCreate(0);
          }
          if (cur && cur != v66)
            xmlXPathFreeNodeSet(cur);
          v67 = xmlXPathCacheWrapNodeSet((uint64_t)context, v66);
          valuePush(v5, v67);
          context->node = node;
          tmpNsList = context->tmpNsList;
          if (tmpNsList)
          {
            xmlFree(tmpNsList);
            context->tmpNsList = 0;
          }
          return v18;
        default:
          goto LABEL_96;
      }
    default:
      xmlXPathReleaseObject((uint64_t)context, v20);
      return 0;
  }
}

int *xmlXPathNodeSetMergeAndClear(unsigned int *a1, int *a2)
{
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;

  v3 = (int *)a1;
  if (*a2 < 1)
  {
LABEL_23:
    *a2 = 0;
    return v3;
  }
  v4 = 0;
  v5 = *a1;
  while (1)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v4);
    if ((int)v5 >= 1)
    {
      v7 = 0;
      do
      {
        v8 = *(_QWORD *)(*((_QWORD *)v3 + 1) + v7);
        if (v8 == v6)
          goto LABEL_20;
        if (*(_DWORD *)(v8 + 8) == 18
          && *(_DWORD *)(v6 + 8) == 18
          && *(_QWORD *)v8 == *(_QWORD *)v6
          && xmlStrEqual(*(const xmlChar **)(v8 + 24), *(const xmlChar **)(v6 + 24)))
        {
          *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v4) = 0;
          xmlXPathNodeSetFreeNs((xmlNsPtr)v6);
          goto LABEL_20;
        }
        v7 += 8;
      }
      while (8 * v5 != v7);
    }
    v9 = v3[1];
    if (!(_DWORD)v9)
    {
      v10 = xmlMalloc(0x50uLL);
      *((_QWORD *)v3 + 1) = v10;
      if (!v10)
      {
LABEL_24:
        v14 = "merging nodeset\n";
        goto LABEL_26;
      }
      v10[3] = 0u;
      v10[4] = 0u;
      v10[1] = 0u;
      v10[2] = 0u;
      v11 = 10;
      *v10 = 0u;
      goto LABEL_18;
    }
    if (*v3 >= (int)v9)
      break;
LABEL_19:
    v12 = *((_QWORD *)v3 + 1);
    v13 = *v3;
    *v3 = v13 + 1;
    *(_QWORD *)(v12 + 8 * v13) = v6;
LABEL_20:
    if (++v4 >= *a2)
      goto LABEL_23;
  }
  if ((int)v9 < 10000000)
  {
    v10 = xmlRealloc(*((void **)v3 + 1), 16 * v9);
    if (!v10)
      goto LABEL_24;
    *((_QWORD *)v3 + 1) = v10;
    v11 = 2 * v3[1];
LABEL_18:
    v3[1] = v11;
    goto LABEL_19;
  }
  v14 = "merging nodeset hit limit\n";
  v10 = 0;
LABEL_26:
  xmlXPathErrMemory((uint64_t)v10, v14);
  return 0;
}

int *xmlXPathNodeSetMergeAndClearNoDupls(int *a1, int *a2)
{
  int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;

  v3 = a1;
  if (*a2 < 1)
  {
LABEL_12:
    *a2 = 0;
    return v3;
  }
  v4 = 0;
  v5 = a1[1];
  while (1)
  {
    v6 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v4);
    if (!v5)
    {
      v7 = xmlMalloc(0x50uLL);
      *((_QWORD *)v3 + 1) = v7;
      if (!v7)
      {
LABEL_13:
        v10 = "merging nodeset\n";
        goto LABEL_15;
      }
      v7[3] = 0u;
      v7[4] = 0u;
      v7[1] = 0u;
      v7[2] = 0u;
      v5 = 10;
      *v7 = 0u;
      goto LABEL_10;
    }
    if (*v3 >= v5)
      break;
LABEL_11:
    v8 = *((_QWORD *)v3 + 1);
    v9 = *v3;
    *v3 = v9 + 1;
    *(_QWORD *)(v8 + 8 * v9) = v6;
    if (++v4 >= *a2)
      goto LABEL_12;
  }
  if (v5 < 10000000)
  {
    v7 = xmlRealloc(*((void **)v3 + 1), 16 * v5);
    if (!v7)
      goto LABEL_13;
    *((_QWORD *)v3 + 1) = v7;
    v5 = 2 * v3[1];
LABEL_10:
    v3[1] = v5;
    goto LABEL_11;
  }
  v10 = "merging nodeset hit limit\n";
  v7 = 0;
LABEL_15:
  xmlXPathErrMemory((uint64_t)v7, v10);
  return 0;
}

xmlNodePtr xmlXPathNextChildElement(xmlNodePtr result, uint64_t a2)
{
  _xmlNode *children;
  int v3;
  uint64_t v6;
  unsigned int v7;
  int v8;

  if (!result)
    return result;
  children = result->children;
  if (!children)
    return 0;
  if (!a2)
  {
    v6 = *(_QWORD *)&children->type;
    if (v6)
    {
      result = 0;
      v7 = *(_DWORD *)(v6 + 8);
      if (v7 <= 0x15)
      {
        v8 = 1 << v7;
        if ((v8 & 0x862) != 0)
        {
          for (result = *(xmlNodePtr *)(v6 + 24); result; result = result->next)
          {
            if (result->type == XML_ELEMENT_NODE)
              break;
          }
        }
        else if ((v8 & 0x202200) != 0)
        {
          return xmlDocGetRootElement((const xmlDoc *)v6);
        }
      }
      return result;
    }
    return 0;
  }
  v3 = *(_DWORD *)(a2 + 8);
  if ((v3 - 3) >= 6 && v3 != 20 && v3 != 1)
    return 0;
  for (result = *(xmlNodePtr *)(a2 + 48); result; result = result->next)
  {
    if (result->type == XML_ELEMENT_NODE)
      break;
  }
  return result;
}

uint64_t xmlXPathNextPrecedingInternal(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    return 0;
  v2 = *(_QWORD **)(a1 + 24);
  if (!v2)
    return 0;
  if (!a2)
  {
    a2 = (uint64_t *)v2[1];
    if (!a2)
      return 0;
    v3 = *((_DWORD *)a2 + 2);
    if (v3 == 18)
    {
      a2 = (uint64_t *)*a2;
      if (!a2 || *((_DWORD *)a2 + 2) == 18)
        return 0;
    }
    else if (v3 == 2)
    {
      a2 = (uint64_t *)a2[5];
    }
    *(_QWORD *)(a1 + 72) = a2[5];
  }
  if (*((_DWORD *)a2 + 2) == 18)
    return 0;
  v6 = a2[7];
  if (!v6)
    goto LABEL_18;
  if (*(_DWORD *)(v6 + 8) == 14)
    a2 = (uint64_t *)a2[7];
  v7 = a2[7];
  if (v7)
  {
    do
    {
LABEL_23:
      v4 = v7;
      v7 = *(_QWORD *)(v7 + 32);
    }
    while (v7);
  }
  else
  {
LABEL_18:
    v4 = a2[5];
    while (v4)
    {
      if (v4 == *(_QWORD *)(*v2 + 24))
        return 0;
      if (v4 != *(_QWORD *)(a1 + 72))
        break;
      v7 = *(_QWORD *)(v4 + 56);
      v4 = *(_QWORD *)(v4 + 40);
      *(_QWORD *)(a1 + 72) = v4;
      if (v7)
        goto LABEL_23;
    }
  }
  return v4;
}

void xmlXPathCompOpEvalPredicate(xmlXPathParserContext *a1, uint64_t a2, int *a3, int a4, int a5, uint64_t a6)
{
  int v12;
  xmlXPathCompExprPtr comp;
  xmlXPathContextPtr context;
  int depth;
  xmlXPathParserContext *v16;
  int v17;
  xmlGenericErrorFunc v18;
  void **v19;
  int v20;

  v12 = *(_DWORD *)(a2 + 4);
  if (v12 == -1)
    goto LABEL_12;
  comp = a1->comp;
  if (*(_DWORD *)(*((_QWORD *)comp + 1) + 56 * v12) != 15)
  {
    v18 = *__xmlGenericError();
    v19 = __xmlGenericErrorContext();
    v18(*v19, "xmlXPathCompOpEvalPredicate: Expected a predicate\n");
    v16 = a1;
    v17 = 10;
    goto LABEL_7;
  }
  if (linkedOnOrAfterFall2022OSVersions())
  {
    context = a1->context;
    depth = context->depth;
    if (depth >= 5000)
    {
      v16 = a1;
      v17 = 26;
LABEL_7:
      xmlXPathErr(v16, v17);
      return;
    }
    context->depth = depth + 1;
  }
  xmlXPathCompOpEvalPredicate(a1, *((_QWORD *)comp + 1) + 56 * *(int *)(a2 + 4), a3, 1, *a3, a6);
  if (linkedOnOrAfterFall2022OSVersions())
    --a1->context->depth;
  if (!a1->error)
  {
LABEL_12:
    v20 = *(_DWORD *)(a2 + 8);
    if (v20 != -1)
      xmlXPathNodeSetFilter(a1, a3, v20, a4, a5, a6);
  }
}

void xmlXPathNodeSetFilter(xmlXPathParserContext *a1, int *a2, int a3, int a4, int a5, int a6)
{
  int v6;
  xmlXPathContextPtr context;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  xmlDoc *v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v25;
  void *v26;
  uint64_t v27;
  __int128 v29;
  uint64_t v31;

  v6 = *a2;
  if (*a2)
  {
    if (v6 < a4)
    {
      xmlXPathNodeSetClearFromPos(a2, 0, a6);
      return;
    }
    context = a1->context;
    v29 = *(_OWORD *)&context->doc;
    v10 = *(_QWORD *)&context->contextSize;
    v11 = *((_QWORD *)a1->comp + 1);
    context->contextSize = v6;
    if (v6 >= 1)
    {
      v13 = 0;
      v14 = 0;
      v31 = v11 + 56 * a3;
      v15 = 1;
      while (1)
      {
        v16 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v13);
        context->node = (xmlNodePtr)v16;
        v17 = v13 + 1;
        context->proximityPosition = v13 + 1;
        if (*(_DWORD *)(v16 + 8) != 18)
        {
          v18 = *(xmlDoc **)(v16 + 64);
          if (v18)
            context->doc = v18;
        }
        v19 = xmlXPathCompOpEvalToBoolean(a1, v31, 1);
        if (a1->error)
        {
LABEL_28:
          if (a6)
            goto LABEL_29;
          goto LABEL_35;
        }
        v20 = v19;
        if (v19 < 0)
        {
          xmlXPathErr(a1, 7);
          goto LABEL_28;
        }
        if (v19 && v15 >= a4 && v15 <= a5)
        {
          if (v13 != v14)
          {
            *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v14) = v16;
            *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v13) = 0;
          }
          ++v14;
        }
        else
        {
          *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v13) = 0;
          if (*(_DWORD *)(v16 + 8) == 18)
            xmlXPathNodeSetFreeNs((xmlNsPtr)v16);
          if (!v20)
            goto LABEL_22;
        }
        if (v15 == a5)
        {
          LODWORD(v13) = v13 + 1;
          goto LABEL_28;
        }
        ++v15;
LABEL_22:
        ++v13;
        if (v17 >= *a2)
        {
          LODWORD(v13) = v17;
          goto LABEL_28;
        }
      }
    }
    LODWORD(v13) = 0;
    v14 = 0;
    if (a6)
    {
LABEL_29:
      v21 = *a2;
      if ((int)v13 < *a2)
      {
        v13 = v13;
        do
        {
          v22 = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v13);
          if (v22 && *(_DWORD *)(v22 + 8) == 18)
          {
            xmlXPathNodeSetFreeNs((xmlNsPtr)v22);
            v21 = *a2;
          }
          ++v13;
        }
        while (v13 < v21);
      }
    }
LABEL_35:
    *a2 = v14;
    v23 = a2[1];
    if (v23 >= 11 && v14 < (int)(v23 >> 1))
    {
      if (v14 <= 10)
        v25 = 10;
      else
        v25 = v14;
      v26 = xmlRealloc(*((void **)a2 + 1), 8 * v25);
      if (v26)
      {
        *((_QWORD *)a2 + 1) = v26;
        a2[1] = v25;
      }
      else
      {
        if (a1)
        {
          a1->error = 15;
          v27 = (uint64_t)a1->context;
        }
        else
        {
          v27 = 0;
        }
        xmlXPathErrMemory(v27, "shrinking nodeset\n");
      }
    }
    *(_OWORD *)&context->doc = v29;
    *(_QWORD *)&context->contextSize = v10;
  }
}

void xmlXPathNodeSetClearFromPos(int *a1, int a2, int a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;

  v3 = *a1;
  if (*a1 > a2)
  {
    if (a3)
    {
      v6 = a2;
      do
      {
        v7 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 8 * v6);
        if (v7)
        {
          if (*(_DWORD *)(v7 + 8) == 18)
          {
            xmlXPathNodeSetFreeNs((xmlNsPtr)v7);
            v3 = *a1;
          }
        }
        ++v6;
      }
      while (v6 < v3);
    }
    *a1 = a2;
  }
}

uint64_t xmlXPathCompOpEvalFirst(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v8;
  int v9;
  xmlXPathParserContext *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  xmlXPathObject *v21;
  xmlXPathObject *v22;
  signed int v23;
  signed int v24;
  int v25;
  xmlXPathObject *v26;
  signed int v27;
  signed int v28;
  uint64_t v29;
  int v30;
  signed int v31;
  signed int v32;
  int v33;
  xmlXPathObject *v34;
  xmlXPathParserContext *v35;
  uint64_t v36;
  unsigned int *v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  int *p_nodeNr;
  int *v45;
  const xmlChar *v46;
  int v47;
  signed int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  xmlXPathObject *v60;
  xmlNodeSetPtr nodesetval;
  uint64_t v62;

  if (*(_DWORD *)(a1 + 16))
    return 0;
  if (linkedOnOrAfterFall2022OSVersions())
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(v8 + 352))
    {
      if ((xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, 1uLL) & 0x80000000) != 0)
        return 0;
      v8 = *(_QWORD *)(a1 + 24);
    }
    v9 = *(_DWORD *)(v8 + 368);
    if (v9 >= 5000)
    {
      v10 = (xmlXPathParserContext *)a1;
      v11 = 26;
LABEL_10:
      xmlXPathErr(v10, v11);
      return 0;
    }
    *(_DWORD *)(v8 + 368) = v9 + 1;
  }
  v3 = *a2;
  v12 = *(_QWORD *)(a1 + 56);
  switch((int)v3)
  {
    case 0:
      goto LABEL_92;
    case 7:
      v13 = xmlXPathCompOpEvalFirst(a1, *(_QWORD *)(v12 + 8) + 56 * (int)a2[1], a3);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v3 = v13;
      v14 = *(_QWORD *)(a1 + 32);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          v15 = *(unsigned int **)(v14 + 8);
          if (v15)
          {
            v16 = *v15;
            if ((int)v16 >= 1)
            {
              if ((_DWORD)v16 != 1)
              {
                libxml_domnode_tim_sort(*((_QWORD *)v15 + 1), v16);
                v15 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 8);
              }
              *a3 = **((_QWORD **)v15 + 1);
            }
          }
        }
      }
      v17 = xmlXPathCompOpEvalFirst(a1, *(_QWORD *)(v12 + 8) + 56 * (int)a2[2], a3);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v18 = *(_DWORD *)(a1 + 40);
      v19 = v18 - 1;
      if (v18 < 1)
      {
        v22 = 0;
        v21 = 0;
        goto LABEL_77;
      }
      *(_DWORD *)(a1 + 40) = v19;
      v20 = *(_QWORD *)(a1 + 48);
      if (v18 == 1)
      {
        v21 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v22 = *(xmlXPathObject **)(v20 + 8 * v19);
        *(_QWORD *)(v20 + 8 * v19) = 0;
LABEL_77:
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v21);
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v22);
        v10 = (xmlXPathParserContext *)a1;
        v11 = 11;
        goto LABEL_10;
      }
      v39 = v17;
      v40 = 0;
      v41 = (v18 - 2);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v20 + 8 * v41);
      v22 = *(xmlXPathObject **)(v20 + 8 * v19);
      *(_QWORD *)(v20 + 8 * v19) = 0;
      *(_DWORD *)(a1 + 40) = v41;
      v42 = *(_QWORD *)(a1 + 48);
      if (v18 != 2)
        v40 = *(_QWORD *)(v42 + 8 * (v18 - 3));
      *(_QWORD *)(a1 + 32) = v40;
      v21 = *(xmlXPathObject **)(v42 + 8 * v41);
      *(_QWORD *)(v42 + 8 * v41) = 0;
      if (!v21)
        goto LABEL_77;
      v43 = v21->type != XPATH_NODESET || v22 == 0;
      if (v43 || v22->type != XPATH_NODESET)
        goto LABEL_77;
      if (linkedOnOrAfterFall2022OSVersions()
        && *(_QWORD *)(*(_QWORD *)(a1 + 24) + 352)
        && ((p_nodeNr = &v21->nodesetval->nodeNr) != 0
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *p_nodeNr) & 0x80000000) != 0
         || (v45 = &v22->nodesetval->nodeNr) != 0
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *v45) & 0x80000000) != 0))
      {
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v21);
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v22);
      }
      else
      {
        v21->nodesetval = xmlXPathNodeSetMerge(v21->nodesetval, v22->nodesetval);
        valuePush((xmlXPathParserContextPtr)a1, v21);
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v22);
        if ((int)v3 > v39)
          *(int32x2_t *)(a2 + 1) = vrev64_s32(*(int32x2_t *)(a2 + 1));
        v3 = (v39 + v3);
      }
      goto LABEL_92;
    case 8:
      xmlXPathRoot((xmlXPathParserContextPtr)a1);
      goto LABEL_91;
    case 9:
      v23 = a2[1];
      if (v23 == -1)
        v3 = 0;
      else
        v3 = xmlXPathCompOpEval(a1, *(_QWORD *)(v12 + 8) + 56 * v23);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v32 = a2[2];
      if (v32 == -1)
        goto LABEL_50;
      v33 = xmlXPathCompOpEval(a1, *(_QWORD *)(v12 + 8) + 56 * v32);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v3 = (v33 + v3);
LABEL_50:
      v34 = xmlXPathCacheNewNodeSet(*(_QWORD *)(a1 + 24), *(xmlNodePtr *)(*(_QWORD *)(a1 + 24) + 8));
      v35 = (xmlXPathParserContext *)a1;
      goto LABEL_51;
    case 10:
      v24 = a2[1];
      if (v24 == -1)
        goto LABEL_91;
      v25 = xmlXPathCompOpEval(a1, *(_QWORD *)(v12 + 8) + 56 * v24);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v3 = xmlXPathNodeCollectAndTest((xmlXPathParserContextPtr)a1, (uint64_t)a2, a3, 0, 0) + v25;
      goto LABEL_92;
    case 11:
      v26 = xmlXPathCacheObjectCopy(*(_QWORD *)(a1 + 24), *((xmlXPathObjectPtr *)a2 + 3));
      valuePush((xmlXPathParserContextPtr)a1, v26);
      goto LABEL_91;
    case 16:
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_91;
      v27 = a2[1];
      if (v27 == -1)
        goto LABEL_89;
      v28 = a2[2];
      if (v28 == -1)
        goto LABEL_42;
      v29 = *(_QWORD *)(v12 + 8);
      if (*(_DWORD *)(v29 + 56 * v27) != 17)
        goto LABEL_42;
      if (*(_DWORD *)(v29 + 56 * v28) != 17)
        goto LABEL_42;
      v30 = *(_DWORD *)(v29 + 56 * v28 + 4);
      if (v30 == -1)
        goto LABEL_42;
      if (*(_DWORD *)(v29 + 56 * v30) != 13)
        goto LABEL_42;
      if (*(_QWORD *)(v29 + 56 * v30 + 32))
        goto LABEL_42;
      if (*(_DWORD *)(v29 + 56 * v30 + 12))
        goto LABEL_42;
      v46 = *(const xmlChar **)(v29 + 56 * v30 + 24);
      if (!v46)
        goto LABEL_42;
      v47 = xmlStrEqual(v46, (const xmlChar *)"last");
      v48 = a2[1];
      if (v47)
      {
        v62 = 0;
        v49 = xmlXPathCompOpEvalLast(a1, (unsigned int *)(*(_QWORD *)(v12 + 8) + 56 * v48), &v62);
        if (!*(_DWORD *)(a1 + 16))
        {
          v3 = v49;
          v50 = *(_QWORD *)(a1 + 32);
          if (v50)
          {
            if (*(_DWORD *)v50 == 1)
            {
              v51 = *(_QWORD *)(v50 + 8);
              if (v51)
              {
                if (*(_QWORD *)(v51 + 8) && *(int *)v51 >= 2)
                {
                  xmlXPathNodeSetKeepLast(v51);
                  v52 = **(_QWORD **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 8);
LABEL_101:
                  *a3 = v52;
                  goto LABEL_92;
                }
              }
            }
          }
          goto LABEL_92;
        }
LABEL_91:
        v3 = 0;
        goto LABEL_92;
      }
      v27 = a2[1];
      if (v48 == -1)
LABEL_89:
        v3 = 0;
      else
LABEL_42:
        v3 = xmlXPathCompOpEval(a1, *(_QWORD *)(v12 + 8) + 56 * v27);
      if (*(_DWORD *)(a1 + 16))
        goto LABEL_91;
      v53 = a2[2];
      if (v53 == -1)
        goto LABEL_92;
      v54 = *(_QWORD *)(a1 + 32);
      if (!v54)
        goto LABEL_92;
      if (*(_DWORD *)v54 == 1)
      {
        v56 = *(_DWORD *)(a1 + 40);
        v57 = *(_QWORD *)(a1 + 48);
        v58 = v56 - 1;
        *(_DWORD *)(a1 + 40) = v56 - 1;
        if (v56 == 1)
          v59 = 0;
        else
          v59 = *(_QWORD *)(v57 + 8 * (v56 - 2));
        *(_QWORD *)(a1 + 32) = v59;
        v60 = *(xmlXPathObject **)(v57 + 8 * v58);
        *(_QWORD *)(v57 + 8 * v58) = 0;
        nodesetval = v60->nodesetval;
        if (nodesetval)
        {
          xmlXPathNodeSetFilter((xmlXPathParserContext *)a1, &v60->nodesetval->nodeNr, a2[2], 1, 1, 1);
          if (nodesetval->nodeNr >= 1)
            *a3 = (uint64_t)*nodesetval->nodeTab;
        }
        v35 = (xmlXPathParserContext *)a1;
        v34 = v60;
LABEL_51:
        valuePush(v35, v34);
        goto LABEL_92;
      }
      if (*(_DWORD *)v54 != 7)
      {
        xmlXPathErr((xmlXPathParserContextPtr)a1, 11);
        goto LABEL_91;
      }
      v55 = *(_QWORD *)(v54 + 40);
      if (v55)
      {
        xmlXPathLocationSetFilter((xmlXPathParserContext *)a1, *(int **)(v54 + 40), v53, 1);
        if (*(int *)v55 >= 1)
        {
          v52 = *(_QWORD *)(**(_QWORD **)(v55 + 8) + 40);
          goto LABEL_101;
        }
      }
LABEL_92:
      if (linkedOnOrAfterFall2022OSVersions())
        --*(_DWORD *)(*(_QWORD *)(a1 + 24) + 368);
      return v3;
    case 17:
      v31 = a2[1];
      if (v31 == -1)
        v3 = 0;
      else
        v3 = xmlXPathCompOpEvalFirst(a1, *(_QWORD *)(v12 + 8) + 56 * v31, a3);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v36 = *(_QWORD *)(a1 + 32);
      if (v36)
      {
        if (*(_DWORD *)v36 == 1)
        {
          v37 = *(unsigned int **)(v36 + 8);
          if (v37)
          {
            v38 = *v37;
            if ((int)v38 >= 2)
              libxml_domnode_tim_sort(*((_QWORD *)v37 + 1), v38);
          }
        }
      }
      goto LABEL_92;
    default:
      v3 = xmlXPathCompOpEval(a1, a2);
      goto LABEL_92;
  }
}

uint64_t xmlXPathCompOpEvalLast(uint64_t a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v8;
  int v9;
  xmlXPathParserContext *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unint64_t v16;
  uint64_t v17;
  signed int v18;
  signed int v19;
  int v20;
  xmlXPathObject *v21;
  signed int v22;
  signed int v23;
  int v24;
  xmlXPathObject *v25;
  uint64_t v26;
  unsigned int *v27;
  unint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  xmlXPathObject *v33;
  xmlXPathObject *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  int *p_nodeNr;
  int *v41;

  if (*(_DWORD *)(a1 + 16))
    return 0;
  if (linkedOnOrAfterFall2022OSVersions())
  {
    v8 = *(_QWORD *)(a1 + 24);
    if (*(_QWORD *)(v8 + 352))
    {
      if ((xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, 1uLL) & 0x80000000) != 0)
        return 0;
      v8 = *(_QWORD *)(a1 + 24);
    }
    v9 = *(_DWORD *)(v8 + 368);
    if (v9 >= 5000)
    {
      v10 = (xmlXPathParserContext *)a1;
      v11 = 26;
LABEL_10:
      xmlXPathErr(v10, v11);
      return 0;
    }
    *(_DWORD *)(v8 + 368) = v9 + 1;
  }
  v3 = *a2;
  v12 = *(_QWORD *)(a1 + 56);
  switch((int)v3)
  {
    case 7:
      v13 = xmlXPathCompOpEvalLast(a1, *(_QWORD *)(v12 + 8) + 56 * (int)a2[1], a3);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v3 = v13;
      v14 = *(_QWORD *)(a1 + 32);
      if (v14)
      {
        if (*(_DWORD *)v14 == 1)
        {
          v15 = *(unsigned int **)(v14 + 8);
          if (v15)
          {
            v16 = *v15;
            if ((int)v16 >= 1)
            {
              if ((_DWORD)v16 == 1)
              {
                v17 = 0;
              }
              else
              {
                libxml_domnode_tim_sort(*((_QWORD *)v15 + 1), v16);
                v15 = *(unsigned int **)(*(_QWORD *)(a1 + 32) + 8);
                v17 = (int)*v15 - 1;
              }
              *a3 = *(_QWORD *)(*((_QWORD *)v15 + 1) + 8 * v17);
            }
          }
        }
      }
      v29 = xmlXPathCompOpEvalLast(a1, *(_QWORD *)(v12 + 8) + 56 * (int)a2[2], a3);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v30 = *(_DWORD *)(a1 + 40);
      v31 = v30 - 1;
      if (v30 < 1)
      {
        v34 = 0;
        v33 = 0;
        goto LABEL_71;
      }
      *(_DWORD *)(a1 + 40) = v31;
      v32 = *(_QWORD *)(a1 + 48);
      if (v30 == 1)
      {
        v33 = 0;
        *(_QWORD *)(a1 + 32) = 0;
        v34 = *(xmlXPathObject **)(v32 + 8 * v31);
        *(_QWORD *)(v32 + 8 * v31) = 0;
LABEL_71:
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v33);
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v34);
        v10 = (xmlXPathParserContext *)a1;
        v11 = 11;
        goto LABEL_10;
      }
      v35 = v29;
      v36 = 0;
      v37 = (v30 - 2);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v32 + 8 * v37);
      v34 = *(xmlXPathObject **)(v32 + 8 * v31);
      *(_QWORD *)(v32 + 8 * v31) = 0;
      *(_DWORD *)(a1 + 40) = v37;
      v38 = *(_QWORD *)(a1 + 48);
      if (v30 != 2)
        v36 = *(_QWORD *)(v38 + 8 * (v30 - 3));
      *(_QWORD *)(a1 + 32) = v36;
      v33 = *(xmlXPathObject **)(v38 + 8 * v37);
      *(_QWORD *)(v38 + 8 * v37) = 0;
      if (!v33)
        goto LABEL_71;
      v39 = v33->type != XPATH_NODESET || v34 == 0;
      if (v39 || v34->type != XPATH_NODESET)
        goto LABEL_71;
      if (linkedOnOrAfterFall2022OSVersions()
        && *(_QWORD *)(*(_QWORD *)(a1 + 24) + 352)
        && ((p_nodeNr = &v33->nodesetval->nodeNr) != 0
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *p_nodeNr) & 0x80000000) != 0
         || (v41 = &v34->nodesetval->nodeNr) != 0
         && (xmlXPathCheckOpLimit((xmlXPathParserContext *)a1, *v41) & 0x80000000) != 0))
      {
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v33);
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v34);
      }
      else
      {
        v33->nodesetval = xmlXPathNodeSetMerge(v33->nodesetval, v34->nodesetval);
        valuePush((xmlXPathParserContextPtr)a1, v33);
        xmlXPathReleaseObject(*(_QWORD *)(a1 + 24), v34);
        if ((int)v3 > v35)
          *(int32x2_t *)(a2 + 1) = vrev64_s32(*(int32x2_t *)(a2 + 1));
        v3 = (v35 + v3);
      }
LABEL_30:
      if (linkedOnOrAfterFall2022OSVersions())
        --*(_DWORD *)(*(_QWORD *)(a1 + 24) + 368);
      return v3;
    case 8:
      xmlXPathRoot((xmlXPathParserContextPtr)a1);
      goto LABEL_29;
    case 9:
      v18 = a2[1];
      if (v18 == -1)
        v3 = 0;
      else
        v3 = xmlXPathCompOpEval(a1, *(_QWORD *)(v12 + 8) + 56 * v18);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v23 = a2[2];
      if (v23 == -1)
        goto LABEL_39;
      v24 = xmlXPathCompOpEval(a1, *(_QWORD *)(v12 + 8) + 56 * v23);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v3 = (v24 + v3);
LABEL_39:
      v25 = xmlXPathCacheNewNodeSet(*(_QWORD *)(a1 + 24), *(xmlNodePtr *)(*(_QWORD *)(a1 + 24) + 8));
      valuePush((xmlXPathParserContextPtr)a1, v25);
      goto LABEL_30;
    case 10:
      v19 = a2[1];
      if (v19 == -1)
        goto LABEL_29;
      v20 = xmlXPathCompOpEval(a1, *(_QWORD *)(v12 + 8) + 56 * v19);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v3 = xmlXPathNodeCollectAndTest((xmlXPathParserContextPtr)a1, (uint64_t)a2, 0, a3, 0) + v20;
      goto LABEL_30;
    case 11:
      v21 = xmlXPathCacheObjectCopy(*(_QWORD *)(a1 + 24), *((xmlXPathObjectPtr *)a2 + 3));
      valuePush((xmlXPathParserContextPtr)a1, v21);
LABEL_29:
      v3 = 0;
      goto LABEL_30;
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      goto LABEL_21;
    case 17:
      v22 = a2[1];
      if (v22 == -1)
        v3 = 0;
      else
        v3 = xmlXPathCompOpEvalLast(a1, *(_QWORD *)(v12 + 8) + 56 * v22, a3);
      if (*(_DWORD *)(a1 + 16))
        return 0;
      v26 = *(_QWORD *)(a1 + 32);
      if (v26)
      {
        if (*(_DWORD *)v26 == 1)
        {
          v27 = *(unsigned int **)(v26 + 8);
          if (v27)
          {
            v28 = *v27;
            if ((int)v28 >= 2)
              libxml_domnode_tim_sort(*((_QWORD *)v27 + 1), v28);
          }
        }
      }
      goto LABEL_30;
    default:
      if ((_DWORD)v3)
LABEL_21:
        v3 = xmlXPathCompOpEval(a1, a2);
      goto LABEL_30;
  }
}

void xmlXPathNodeSetKeepLast(uint64_t a1)
{
  int v1;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_DWORD *)a1;
  if (*(int *)a1 >= 2)
  {
    v3 = 0;
    do
    {
      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * v3);
      if (v4)
      {
        if (*(_DWORD *)(v4 + 8) == 18)
        {
          xmlXPathNodeSetFreeNs((xmlNsPtr)v4);
          v1 = *(_DWORD *)a1;
        }
      }
      ++v3;
    }
    while (v3 < v1 - 1);
    **(_QWORD **)(a1 + 8) = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * (v1 - 1));
    *(_DWORD *)a1 = 1;
  }
}

void xmlXPathLocationSetFilter(xmlXPathParserContext *a1, int *a2, int a3, int a4)
{
  int v5;
  xmlXPathContextPtr context;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  xmlDoc *v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  unsigned int v23;
  void *v24;
  uint64_t v25;
  __int128 v26;

  if (a2)
  {
    v5 = *a2;
    if (*a2)
    {
      context = a1->context;
      v26 = *(_OWORD *)&context->doc;
      v8 = *(_QWORD *)&context->contextSize;
      v9 = *((_QWORD *)a1->comp + 1);
      context->contextSize = v5;
      if (v5 >= 1)
      {
        v11 = 0;
        v12 = 0;
        v13 = v9 + 56 * a3;
        v14 = 1;
        while (1)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v11) + 40);
          context->node = (xmlNodePtr)v15;
          v16 = v11 + 1;
          context->proximityPosition = v11 + 1;
          if (*(_DWORD *)(v15 + 8) != 18)
          {
            v17 = *(xmlDoc **)(v15 + 64);
            if (v17)
              context->doc = v17;
          }
          v18 = xmlXPathCompOpEvalToBoolean(a1, v13, 1);
          if (a1->error)
            goto LABEL_24;
          v19 = v18;
          if (v18 < 0)
          {
            xmlXPathErr(a1, 7);
            goto LABEL_24;
          }
          if (v18 && v14 >= 1 && v14 <= a4)
          {
            if (v11 != v12)
            {
              *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v12) = *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v11);
              *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v11) = 0;
            }
            ++v12;
          }
          else
          {
            xmlXPathFreeObject(*(xmlXPathObjectPtr *)(*((_QWORD *)a2 + 1) + 8 * v11));
            *(_QWORD *)(*((_QWORD *)a2 + 1) + 8 * v11) = 0;
            if (!v19)
              goto LABEL_19;
          }
          if (v14 == a4)
          {
            LODWORD(v11) = v11 + 1;
            goto LABEL_24;
          }
          ++v14;
LABEL_19:
          ++v11;
          if (v16 >= *a2)
          {
            LODWORD(v11) = v16;
            goto LABEL_24;
          }
        }
      }
      LODWORD(v11) = 0;
      v12 = 0;
LABEL_24:
      if ((int)v11 < *a2)
      {
        v20 = v11;
        do
          xmlXPathFreeObject(*(xmlXPathObjectPtr *)(*((_QWORD *)a2 + 1) + 8 * v20++));
        while (v20 < *a2);
      }
      *a2 = v12;
      v21 = a2[1];
      if (v21 >= 11 && v12 < (int)(v21 >> 1))
      {
        if (v12 <= 10)
          v23 = 10;
        else
          v23 = v12;
        v24 = xmlRealloc(*((void **)a2 + 1), 8 * v23);
        if (v24)
        {
          *((_QWORD *)a2 + 1) = v24;
          a2[1] = v23;
        }
        else
        {
          if (a1)
          {
            a1->error = 15;
            v25 = (uint64_t)a1->context;
          }
          else
          {
            v25 = 0;
          }
          xmlXPathErrMemory(v25, "shrinking locset\n");
        }
      }
      *(_OWORD *)&context->doc = v26;
      *(_QWORD *)&context->contextSize = v8;
    }
  }
}

xmlXPathObjectPtr xmlXPtrNewRange(xmlNodePtr start, int startindex, xmlNodePtr end, int endindex)
{
  char v8;
  xmlNode *v9;

  v8 = linkedOnOrAfterFall2022OSVersions();
  v9 = 0;
  if (((endindex | startindex) & 0x80000000) == 0 && end && start && (v8 & 1) == 0)
  {
    v9 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start, startindex, (uint64_t)end, endindex);
    xmlXPtrRangeCheckOrder(v9);
  }
  return (xmlXPathObjectPtr)v9;
}

_OWORD *xmlXPtrNewRangeInternal(uint64_t a1, int a2, uint64_t a3, int a4)
{
  _OWORD *result;

  if ((!a1 || *(_DWORD *)(a1 + 8) != 18) && (!a3 || *(_DWORD *)(a3 + 8) != 18))
  {
    result = xmlMalloc(0x48uLL);
    if (result)
    {
      result[2] = 0u;
      result[3] = 0u;
      *result = 0u;
      result[1] = 0u;
      *(_DWORD *)result = 6;
      *((_QWORD *)result + 5) = a1;
      *((_DWORD *)result + 12) = a2;
      *((_QWORD *)result + 7) = a3;
      *((_QWORD *)result + 8) = 0;
      *((_DWORD *)result + 16) = a4;
      return result;
    }
    xmlXPtrErrMemory((const xmlChar *)"allocating range");
  }
  return 0;
}

xmlNode *xmlXPtrRangeCheckOrder(xmlNode *result)
{
  xmlNode *v1;
  xmlNode *prev;
  _xmlNode *parent;

  if (result)
  {
    v1 = result;
    if (LODWORD(result->_private) == 6)
    {
      prev = result->prev;
      if (prev)
      {
        result = result->parent;
        if (result)
        {
          if (result == prev)
          {
            if (SLODWORD(v1->next) <= SLODWORD(v1->doc))
              return result;
          }
          else
          {
            result = (xmlNode *)xmlXPathCmpNodes(result, prev);
            if ((_DWORD)result != -1)
              return result;
          }
          parent = v1->parent;
          v1->parent = v1->prev;
          v1->prev = parent;
          LODWORD(parent) = v1->next;
          LODWORD(v1->next) = v1->doc;
          LODWORD(v1->doc) = (_DWORD)parent;
        }
      }
    }
  }
  return result;
}

xmlXPathObjectPtr xmlXPtrNewRangePoints(xmlXPathObjectPtr start, xmlXPathObjectPtr end)
{
  char v4;
  xmlNode *v5;

  v4 = linkedOnOrAfterFall2022OSVersions();
  v5 = 0;
  if (end && start && (v4 & 1) == 0)
  {
    if (start->type == XPATH_POINT && end->type == XPATH_POINT)
    {
      v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start->user, start->index, (uint64_t)end->user, end->index);
      xmlXPtrRangeCheckOrder(v5);
    }
    else
    {
      return 0;
    }
  }
  return (xmlXPathObjectPtr)v5;
}

xmlXPathObjectPtr xmlXPtrNewRangePointNode(xmlXPathObjectPtr start, xmlNodePtr end)
{
  char v4;
  xmlNode *v5;

  v4 = linkedOnOrAfterFall2022OSVersions();
  v5 = 0;
  if (end && start && (v4 & 1) == 0)
  {
    if (start->type == XPATH_POINT)
    {
      v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start->user, start->index, (uint64_t)end, -1);
      xmlXPtrRangeCheckOrder(v5);
    }
    else
    {
      return 0;
    }
  }
  return (xmlXPathObjectPtr)v5;
}

xmlXPathObjectPtr xmlXPtrNewRangeNodePoint(xmlNodePtr start, xmlXPathObjectPtr end)
{
  char v4;
  xmlNode *v5;

  v4 = linkedOnOrAfterFall2022OSVersions();
  v5 = 0;
  if (end && start && (v4 & 1) == 0)
  {
    if (end->type == XPATH_POINT)
    {
      v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start, -1, (uint64_t)end->user, end->index);
      xmlXPtrRangeCheckOrder(v5);
    }
    else
    {
      return 0;
    }
  }
  return (xmlXPathObjectPtr)v5;
}

xmlXPathObjectPtr xmlXPtrNewRangeNodes(xmlNodePtr start, xmlNodePtr end)
{
  char v4;
  xmlNode *v5;

  v4 = linkedOnOrAfterFall2022OSVersions();
  v5 = 0;
  if (end && start && (v4 & 1) == 0)
  {
    v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start, -1, (uint64_t)end, -1);
    xmlXPtrRangeCheckOrder(v5);
  }
  return (xmlXPathObjectPtr)v5;
}

xmlXPathObjectPtr xmlXPtrNewCollapsedRange(xmlNodePtr start)
{
  char v2;

  v2 = linkedOnOrAfterFall2022OSVersions();
  if (!start || (v2 & 1) != 0)
    return 0;
  else
    return (xmlXPathObjectPtr)xmlXPtrNewRangeInternal((uint64_t)start, -1, 0, -1);
}

xmlXPathObjectPtr xmlXPtrNewRangeNodeObject(xmlNodePtr start, xmlXPathObjectPtr end)
{
  char v4;
  xmlNode *v5;
  xmlXPathObjectType type;
  uint64_t *p_user2;
  int index2;
  xmlNodeSetPtr nodesetval;

  v4 = linkedOnOrAfterFall2022OSVersions();
  v5 = 0;
  if (end && start && (v4 & 1) == 0)
  {
    type = end->type;
    if (end->type == XPATH_NODESET)
    {
      nodesetval = end->nodesetval;
      if (nodesetval && nodesetval->nodeNr >= 1)
      {
        p_user2 = (uint64_t *)&nodesetval->nodeTab[nodesetval->nodeNr - 1];
        index2 = -1;
        goto LABEL_13;
      }
    }
    else
    {
      if (type == XPATH_RANGE)
      {
        p_user2 = (uint64_t *)&end->user2;
        index2 = end->index2;
        goto LABEL_13;
      }
      if (type == XPATH_POINT)
      {
        p_user2 = (uint64_t *)&end->user;
        index2 = end->index;
LABEL_13:
        v5 = (xmlNode *)xmlXPtrNewRangeInternal((uint64_t)start, -1, *p_user2, index2);
        xmlXPtrRangeCheckOrder(v5);
        return (xmlXPathObjectPtr)v5;
      }
    }
    return 0;
  }
  return (xmlXPathObjectPtr)v5;
}

xmlLocationSetPtr xmlXPtrLocationSetCreate(xmlXPathObjectPtr val)
{
  xmlLocationSet *v2;
  xmlLocationSet *v3;
  xmlXPathObjectPtr *v4;
  xmlXPathObjectPtr *locTab;
  uint64_t locNr;

  if ((linkedOnOrAfterFall2022OSVersions() & 1) != 0)
    return 0;
  v3 = (xmlLocationSet *)xmlMalloc(0x10uLL);
  v2 = v3;
  if (!v3)
  {
    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
    return v2;
  }
  *(_QWORD *)&v3->locNr = 0;
  v3->locTab = 0;
  if (val)
  {
    v4 = (xmlXPathObjectPtr *)xmlMalloc(0x50uLL);
    v2->locTab = v4;
    if (v4)
    {
      *((_OWORD *)v4 + 3) = 0u;
      *((_OWORD *)v4 + 4) = 0u;
      *((_OWORD *)v4 + 1) = 0u;
      *((_OWORD *)v4 + 2) = 0u;
      *(_OWORD *)v4 = 0u;
      locTab = v2->locTab;
      locNr = v2->locNr;
      v2->locNr = locNr + 1;
      v2->locMax = 10;
      locTab[locNr] = val;
      return v2;
    }
    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
    xmlFree(v2);
    return 0;
  }
  return v2;
}

_DWORD *xmlXPtrErrMemory(const xmlChar *a1)
{
  return __xmlRaiseError(0, 0, 0, 0, 0, 0xDu, 2, 2, 0, 0, a1, 0, 0, 0, 0, "Memory allocation failed : %s\n", (char)a1);
}

void xmlXPtrLocationSetAdd(xmlLocationSetPtr cur, xmlXPathObjectPtr val)
{
  int locNr;
  xmlXPathObjectPtr *v5;
  uint64_t v6;
  xmlXPathObjectPtr v7;
  BOOL v8;
  int locMax;
  int v10;
  xmlXPathObjectPtr *v11;
  xmlXPathObjectPtr *v12;
  xmlXPathObjectPtr *locTab;
  uint64_t v14;

  if ((linkedOnOrAfterFall2022OSVersions() & 1) != 0 || !cur || !val)
    return;
  locNr = cur->locNr;
  if (cur->locNr < 1)
  {
LABEL_19:
    locMax = cur->locMax;
    if (locMax)
    {
      if (locNr != locMax)
      {
LABEL_26:
        locTab = cur->locTab;
        v14 = cur->locNr;
        cur->locNr = v14 + 1;
        locTab[v14] = val;
        return;
      }
      v10 = 2 * locNr;
      cur->locMax = v10;
      v11 = (xmlXPathObjectPtr *)xmlRealloc(cur->locTab, 8 * v10);
      if (v11)
      {
        cur->locTab = v11;
        goto LABEL_26;
      }
    }
    else
    {
      v12 = (xmlXPathObjectPtr *)xmlMalloc(0x50uLL);
      cur->locTab = v12;
      if (v12)
      {
        *((_OWORD *)v12 + 3) = 0u;
        *((_OWORD *)v12 + 4) = 0u;
        *((_OWORD *)v12 + 1) = 0u;
        *((_OWORD *)v12 + 2) = 0u;
        *(_OWORD *)v12 = 0u;
        cur->locMax = 10;
        goto LABEL_26;
      }
    }
    xmlXPtrErrMemory((const xmlChar *)"adding location to set");
    return;
  }
  v5 = cur->locTab;
  v6 = cur->locNr;
  while (1)
  {
    v7 = *v5;
    if (*v5 == val)
      break;
    if (v7)
    {
      v8 = v7->type == XPATH_RANGE && val->type == XPATH_RANGE;
      if (v8
        && v7->user == val->user
        && v7->index == val->index
        && v7->user2 == val->user2
        && v7->index2 == val->index2)
      {
        break;
      }
    }
    ++v5;
    if (!--v6)
      goto LABEL_19;
  }
  xmlXPathFreeObject(val);
}

xmlLocationSetPtr xmlXPtrLocationSetMerge(xmlLocationSetPtr val1, xmlLocationSetPtr val2)
{
  char v4;
  xmlLocationSetPtr result;
  uint64_t v6;

  v4 = linkedOnOrAfterFall2022OSVersions();
  result = 0;
  if (val1 && (v4 & 1) == 0)
  {
    if (val2 && val2->locNr >= 1)
    {
      v6 = 0;
      do
        xmlXPtrLocationSetAdd(val1, val2->locTab[v6++]);
      while (v6 < val2->locNr);
    }
    return val1;
  }
  return result;
}

void xmlXPtrLocationSetDel(xmlLocationSetPtr cur, xmlXPathObjectPtr val)
{
  char v4;
  uint64_t locNr;
  uint64_t v6;
  xmlXPathObjectPtr *locTab;
  uint64_t v8;

  v4 = linkedOnOrAfterFall2022OSVersions();
  if (val)
  {
    if (cur)
    {
      if ((v4 & 1) == 0)
      {
        locNr = cur->locNr;
        if ((int)locNr >= 1)
        {
          v6 = 0;
          locTab = cur->locTab;
          while (locTab[v6] != val)
          {
            if (locNr == ++v6)
              return;
          }
          v8 = (locNr - 1);
          cur->locNr = v8;
          if ((int)v8 > (int)v6)
          {
            do
            {
              cur->locTab[v6] = cur->locTab[v6 + 1];
              ++v6;
            }
            while (v8 != v6);
            locTab = cur->locTab;
          }
          locTab[(int)v8] = 0;
        }
      }
    }
  }
}

void xmlXPtrLocationSetRemove(xmlLocationSetPtr cur, int val)
{
  char v4;
  uint64_t locNr;
  uint64_t v6;
  uint64_t v7;

  v4 = linkedOnOrAfterFall2022OSVersions();
  if (cur)
  {
    if ((v4 & 1) == 0)
    {
      locNr = cur->locNr;
      if ((int)locNr > val)
      {
        v6 = locNr - 1;
        cur->locNr = v6;
        if ((int)v6 > val)
        {
          v7 = val;
          v6 = (int)v6;
          do
          {
            cur->locTab[v7] = cur->locTab[v7 + 1];
            ++v7;
          }
          while ((int)v6 != v7);
        }
        cur->locTab[v6] = 0;
      }
    }
  }
}

void xmlXPtrFreeLocationSet(xmlLocationSetPtr obj)
{
  char v2;
  xmlXPathObjectPtr *locTab;
  uint64_t v4;

  v2 = linkedOnOrAfterFall2022OSVersions();
  if (obj && (v2 & 1) == 0)
  {
    locTab = obj->locTab;
    if (locTab)
    {
      if (obj->locNr >= 1)
      {
        v4 = 0;
        do
          xmlXPathFreeObject(obj->locTab[v4++]);
        while (v4 < obj->locNr);
        locTab = obj->locTab;
      }
      xmlFree(locTab);
    }
    xmlFree(obj);
  }
}

xmlXPathObjectPtr xmlXPtrNewLocationSetNodes(xmlNodePtr start, xmlNodePtr end)
{
  xmlXPathObject *v4;
  xmlXPathObject *v5;
  xmlXPathObject *v6;

  if ((linkedOnOrAfterFall2022OSVersions() & 1) != 0)
    return 0;
  v5 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v4 = v5;
  if (v5)
  {
    *(_QWORD *)&v5->index2 = 0;
    *(_OWORD *)&v5->stringval = 0u;
    *(_OWORD *)&v5->index = 0u;
    *(_OWORD *)&v5->type = 0u;
    *(_OWORD *)&v5->BOOLval = 0u;
    v5->type = XPATH_LOCATIONSET;
    if (end)
      v6 = xmlXPtrNewRangeNodes(start, end);
    else
      v6 = xmlXPtrNewCollapsedRange(start);
    v4->user = xmlXPtrLocationSetCreate(v6);
  }
  else
  {
    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
  }
  return v4;
}

xmlXPathObjectPtr xmlXPtrNewLocationSetNodeSet(xmlNodeSetPtr set)
{
  xmlXPathObject *v2;
  xmlXPathObject *v3;
  xmlLocationSetPtr v4;
  xmlLocationSet *v5;
  uint64_t v6;
  xmlXPathObject *v7;

  if ((linkedOnOrAfterFall2022OSVersions() & 1) != 0)
    return 0;
  v3 = (xmlXPathObject *)xmlMalloc(0x48uLL);
  v2 = v3;
  if (v3)
  {
    *(_QWORD *)&v3->index2 = 0;
    *(_OWORD *)&v3->stringval = 0u;
    *(_OWORD *)&v3->index = 0u;
    *(_OWORD *)&v3->type = 0u;
    *(_OWORD *)&v3->BOOLval = 0u;
    v3->type = XPATH_LOCATIONSET;
    if (set)
    {
      v4 = xmlXPtrLocationSetCreate(0);
      if (v4)
      {
        v5 = v4;
        if (set->nodeNr >= 1)
        {
          v6 = 0;
          do
          {
            v7 = xmlXPtrNewCollapsedRange(set->nodeTab[v6]);
            xmlXPtrLocationSetAdd(v5, v7);
            ++v6;
          }
          while (v6 < set->nodeNr);
        }
        v2->user = v5;
      }
    }
  }
  else
  {
    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
  }
  return v2;
}

xmlXPathObjectPtr xmlXPtrWrapLocationSet(xmlLocationSetPtr val)
{
  xmlXPathObjectPtr result;

  if ((linkedOnOrAfterFall2022OSVersions() & 1) == 0)
  {
    result = (xmlXPathObjectPtr)xmlMalloc(0x48uLL);
    if (result)
    {
      *(_QWORD *)&result->index2 = 0;
      *(_OWORD *)&result->stringval = 0u;
      *(_OWORD *)&result->index = 0u;
      *(_OWORD *)&result->type = 0u;
      *(_OWORD *)&result->BOOLval = 0u;
      result->type = XPATH_LOCATIONSET;
      result->user = val;
      return result;
    }
    xmlXPtrErrMemory((const xmlChar *)"allocating locationset");
  }
  return 0;
}

xmlXPathContextPtr xmlXPtrNewContext(xmlDocPtr doc, xmlNodePtr here, xmlNodePtr origin)
{
  xmlXPathContextPtr v5;
  xmlXPathContext *v6;

  v5 = xmlXPathNewContext(doc);
  v6 = v5;
  if (v5)
  {
    v5->xptr = 1;
    v5->here = here;
    v5->origin = origin;
    xmlXPathRegisterFunc(v5, (const xmlChar *)"range", (xmlXPathFunction)xmlXPtrRangeFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"range-inside", (xmlXPathFunction)xmlXPtrRangeInsideFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"string-range", (xmlXPathFunction)xmlXPtrStringRangeFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"start-point", (xmlXPathFunction)xmlXPtrStartPointFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"end-point", (xmlXPathFunction)xmlXPtrEndPointFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)"here", (xmlXPathFunction)xmlXPtrHereFunction);
    xmlXPathRegisterFunc(v6, (const xmlChar *)" origin", (xmlXPathFunction)xmlXPtrOriginFunction);
  }
  return v6;
}

void xmlXPtrRangeFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObjectPtr value;
  xmlXPathObjectType type;
  BOOL v5;
  xmlXPathObjectPtr v6;
  xmlXPathObject *v7;
  xmlXPathObjectPtr v8;
  int *user;
  xmlLocationSetPtr v10;
  xmlLocationSet *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *p_doc;
  uint64_t v15;
  uint64_t v16;
  int v17;
  xmlNode *v18;
  int v19;
  xmlGenericErrorFunc v20;
  void **v21;
  xmlXPathObject *v22;
  unsigned int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  int v28;
  uint64_t v30;
  unsigned int v31;
  int v32;
  uint64_t v34;
  unsigned int v35;
  int v36;
  int v38;
  xmlXPathObject *v39;

  if (ctxt)
  {
    v2 = ctxt;
    if (a2 == 1)
    {
      if (ctxt->valueNr > 0)
      {
        value = ctxt->value;
        if (!value || ((type = value->type, type != XPATH_NODESET) ? (v5 = type == XPATH_LOCATIONSET) : (v5 = 1), !v5))
        {
          v38 = 11;
          goto LABEL_73;
        }
        v6 = valuePop(ctxt);
        v7 = v6;
        if (v6->type != XPATH_NODESET
          || (v8 = xmlXPtrNewLocationSetNodeSet(v6->nodesetval), xmlXPathFreeObject(v7), (v7 = v8) != 0))
        {
          user = (int *)v7->user;
          v10 = xmlXPtrLocationSetCreate(0);
          if (v10)
          {
            v11 = v10;
            if (!user || *user < 1)
            {
LABEL_70:
              v39 = xmlXPtrWrapLocationSet(v11);
              valuePush(v2, v39);
              xmlXPathFreeObject(v7);
              return;
            }
            v12 = 0;
            while (1)
            {
              v13 = *(_QWORD *)(*((_QWORD *)user + 1) + 8 * v12);
              if (!v13)
                goto LABEL_25;
              p_doc = &v2->context->doc;
              if (!p_doc)
                goto LABEL_25;
              v15 = *p_doc;
              if (!v15)
                goto LABEL_25;
              if (*(_DWORD *)v13 != 6)
                break;
              v18 = *(xmlNode **)(v13 + 56);
              v16 = *(_QWORD *)(v13 + 40);
              if (v18)
              {
                v17 = *(_DWORD *)(v13 + 48);
                v19 = *(_DWORD *)(v13 + 64);
                goto LABEL_63;
              }
              if (v16 == v15)
              {
                if (*(_DWORD *)(v15 + 8) == 18)
                {
                  v19 = -1;
                }
                else
                {
                  v30 = *(_QWORD *)(v15 + 24);
                  if (v30)
                  {
                    v19 = 0;
                    do
                    {
                      v31 = *(_DWORD *)(v30 + 8);
                      v27 = v31 > 0xD;
                      v32 = (1 << v31) & 0x2202;
                      if (!v27 && v32 != 0)
                        ++v19;
                      v30 = *(_QWORD *)(v30 + 48);
                    }
                    while (v30);
                  }
                  else
                  {
                    v19 = 0;
                  }
                }
                v16 = v15;
                v17 = 0;
                v18 = (xmlNode *)v15;
                goto LABEL_63;
              }
              v22 = 0;
              v23 = *(_DWORD *)(v16 + 8);
              if (v23 <= 0xD)
              {
                if (((1 << v23) & 0x33BA) != 0)
                {
                  v24 = 1;
                  v25 = *(_QWORD *)(v13 + 40);
                  do
                  {
                    v26 = *(_DWORD *)(v25 + 8);
                    v27 = v26 > 0xD;
                    v28 = (1 << v26) & 0x2202;
                    if (!v27 && v28 != 0)
                      ++v24;
                    v25 = *(_QWORD *)(v25 + 56);
                  }
                  while (v25);
                  v16 = *(_QWORD *)(v16 + 40);
                  v17 = v24 - 1;
                  v19 = v24 + 1;
                  goto LABEL_39;
                }
                if (v23 == 2)
                {
                  v34 = *(_QWORD *)(v16 + 24);
                  if (v34)
                  {
                    v19 = 0;
                    do
                    {
                      v35 = *(_DWORD *)(v34 + 8);
                      v27 = v35 > 0xD;
                      v36 = (1 << v35) & 0x2202;
                      if (!v27 && v36 != 0)
                        ++v19;
                      v34 = *(_QWORD *)(v34 + 48);
                    }
                    while (v34);
                  }
                  else
                  {
                    v19 = 0;
                  }
                  v17 = 0;
LABEL_39:
                  v18 = (xmlNode *)v16;
LABEL_63:
                  v22 = xmlXPtrNewRange((xmlNodePtr)v16, v17, v18, v19);
                }
              }
LABEL_26:
              xmlXPtrLocationSetAdd(v11, v22);
              if (++v12 >= *user)
                goto LABEL_70;
            }
            if (*(_DWORD *)v13 == 5)
            {
              v16 = *(_QWORD *)(v13 + 40);
              v17 = *(_DWORD *)(v13 + 48);
              v18 = (xmlNode *)v16;
              v19 = v17;
              goto LABEL_63;
            }
            v20 = *__xmlGenericError();
            v21 = __xmlGenericErrorContext();
            v20(*v21, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c", 2105);
LABEL_25:
            v22 = 0;
            goto LABEL_26;
          }
          xmlXPathFreeObject(v7);
        }
        ctxt = v2;
        v38 = 15;
        goto LABEL_73;
      }
      v38 = 23;
    }
    else
    {
      v38 = 12;
    }
LABEL_73:
    xmlXPathErr(ctxt, v38);
  }
}

void xmlXPtrRangeInsideFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObjectPtr value;
  xmlXPathObjectType type;
  BOOL v5;
  xmlXPathObjectPtr v6;
  xmlXPathObject *v7;
  xmlXPathObjectPtr v8;
  xmlLocationSetPtr v9;
  xmlLocationSet *v10;
  int *user;
  uint64_t v12;
  uint64_t v13;
  _QWORD *p_doc;
  xmlXPathObject *v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  BOOL v22;
  int v23;
  xmlNode *v25;
  int v26;
  xmlNode *v27;
  xmlGenericErrorFunc v28;
  void **v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  const xmlChar *v35;
  int v36;
  xmlXPathObject *v37;

  if (ctxt)
  {
    v2 = ctxt;
    if (a2 == 1)
    {
      if (ctxt->valueNr > 0)
      {
        value = ctxt->value;
        if (!value || ((type = value->type, type != XPATH_NODESET) ? (v5 = type == XPATH_LOCATIONSET) : (v5 = 1), !v5))
        {
          v36 = 11;
          goto LABEL_63;
        }
        v6 = valuePop(ctxt);
        v7 = v6;
        if (v6->type != XPATH_NODESET
          || (v8 = xmlXPtrNewLocationSetNodeSet(v6->nodesetval), xmlXPathFreeObject(v7), (v7 = v8) != 0))
        {
          v9 = xmlXPtrLocationSetCreate(0);
          if (v9)
          {
            v10 = v9;
            user = (int *)v7->user;
            if (!user || *user < 1)
            {
LABEL_60:
              v37 = xmlXPtrWrapLocationSet(v10);
              valuePush(v2, v37);
              xmlXPathFreeObject(v7);
              return;
            }
            v12 = 0;
            while (1)
            {
              v13 = *(_QWORD *)(*((_QWORD *)user + 1) + 8 * v12);
              if (!v13)
                goto LABEL_35;
              p_doc = &v2->context->doc;
              if (!p_doc || !*p_doc)
                goto LABEL_35;
              if (*(_DWORD *)v13 == 6)
              {
                v16 = *(_QWORD *)(v13 + 40);
                v25 = *(xmlNode **)(v13 + 56);
                if (v25)
                {
                  v26 = *(_DWORD *)(v13 + 48);
                  v20 = *(_DWORD *)(v13 + 64);
                  v27 = *(xmlNode **)(v13 + 40);
                  goto LABEL_54;
                }
                v15 = 0;
                v30 = *(_DWORD *)(v16 + 8);
                if (v30 <= 0xD)
                {
                  v18 = 1 << v30;
                  if ((v18 & 0x3226) != 0)
                  {
                    v31 = *(_QWORD *)(v16 + 24);
                    if (v31)
                    {
                      v20 = 0;
                      do
                      {
                        v32 = *(_DWORD *)(v31 + 8);
                        v22 = v32 > 0xD;
                        v33 = (1 << v32) & 0x2202;
                        if (!v22 && v33 != 0)
                          ++v20;
                        v31 = *(_QWORD *)(v31 + 48);
                      }
                      while (v31);
                      goto LABEL_53;
                    }
LABEL_52:
                    v20 = 0;
LABEL_53:
                    v27 = (xmlNode *)v16;
                    v26 = 0;
                    v25 = (xmlNode *)v16;
                    goto LABEL_54;
                  }
                  goto LABEL_49;
                }
              }
              else
              {
                if (*(_DWORD *)v13 != 5)
                {
                  v28 = *__xmlGenericError();
                  v29 = __xmlGenericErrorContext();
                  v28(*v29, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c", 2252);
LABEL_35:
                  v15 = 0;
                  goto LABEL_36;
                }
                v15 = 0;
                v16 = *(_QWORD *)(v13 + 40);
                v17 = *(_DWORD *)(v16 + 8);
                if (v17 <= 0xD)
                {
                  v18 = 1 << v17;
                  if ((v18 & 0x3226) != 0)
                  {
                    v19 = *(_QWORD *)(v16 + 24);
                    if (!v19)
                      goto LABEL_52;
                    v20 = 0;
                    do
                    {
                      v21 = *(_DWORD *)(v19 + 8);
                      v22 = v21 > 0xD;
                      v23 = (1 << v21) & 0x2202;
                      if (!v22 && v23 != 0)
                        ++v20;
                      v19 = *(_QWORD *)(v19 + 48);
                    }
                    while (v19);
                    goto LABEL_53;
                  }
LABEL_49:
                  if ((v18 & 0x198) != 0)
                  {
                    v35 = *(const xmlChar **)(v16 + 80);
                    if (v35)
                    {
                      v20 = xmlStrlen(v35);
                      goto LABEL_53;
                    }
                    v27 = (xmlNode *)v16;
                    v26 = 0;
                    v25 = (xmlNode *)v16;
                    v20 = 0;
LABEL_54:
                    v15 = xmlXPtrNewRange(v27, v26, v25, v20);
                  }
                }
              }
LABEL_36:
              xmlXPtrLocationSetAdd(v10, v15);
              if (++v12 >= *user)
                goto LABEL_60;
            }
          }
          xmlXPathFreeObject(v7);
        }
        ctxt = v2;
        v36 = 15;
        goto LABEL_63;
      }
      v36 = 23;
    }
    else
    {
      v36 = 12;
    }
LABEL_63:
    xmlXPathErr(ctxt, v36);
  }
}

void xmlXPtrStringRangeFunction(xmlXPathParserContextPtr ctxt, unsigned int a2)
{
  xmlXPathParserContextPtr v2;
  xmlXPathObjectPtr value;
  xmlXPathObjectPtr v4;
  xmlXPathObject *v5;
  int floatval;
  _DWORD *v7;
  xmlXPathObjectPtr v8;
  xmlXPathObject *v9;
  int v10;
  _DWORD *v11;
  xmlXPathObject *v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  xmlXPathObjectPtr v16;
  xmlNodeSet *nodesetval;
  xmlXPathObjectPtr v18;
  int *user;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  xmlXPathObject *v26;
  int v27;
  uint64_t NthChild;
  uint64_t v30;
  const xmlChar *v31;
  const xmlChar *stringval;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  const xmlChar *v37;
  int v38;
  int v39;
  const xmlChar *v40;
  int v41;
  int v42;
  int v44;
  const xmlChar *v45;
  int v46;
  int v47;
  const xmlChar *v48;
  int v49;
  uint64_t v50;
  xmlXPathObject *v51;
  xmlNode *v52;
  int v53;
  xmlNode *v54;
  int v55;
  xmlXPathObject *v56;
  xmlXPathObject *v57;
  xmlXPathObject *v58;
  xmlXPathObject *v59;
  xmlXPathParserContext *v60;
  xmlXPathObject *v61;
  _BOOL4 v62;
  int v63;
  _BOOL4 v64;
  int v65;
  xmlLocationSet *cur;
  xmlXPathObject *v67;
  int v68;
  int *v69;
  xmlXPathObject *v70;
  uint64_t v71;
  int v72;
  const xmlChar *v73;
  int v74;
  xmlNode *v75;
  int v76;
  xmlNode *v77;
  int v78;

  v2 = ctxt;
  if (a2 - 5 <= 0xFFFFFFFC)
  {
    xmlXPathErr(ctxt, 12);
    return;
  }
  v78 = 0;
  v77 = 0;
  if (a2 < 4)
  {
    v5 = 0;
    floatval = 0;
    if (a2 != 3)
    {
      v10 = -1;
      v9 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    value = ctxt->value;
    if (!value || value->type != XPATH_NUMBER)
    {
      xmlXPathErr(ctxt, 11);
      v5 = 0;
LABEL_15:
      v9 = 0;
LABEL_118:
      v12 = 0;
LABEL_119:
      v16 = 0;
      goto LABEL_120;
    }
    v4 = valuePop(ctxt);
    v5 = v4;
    if (v4)
      floatval = (int)v4->floatval;
    else
      floatval = 0;
  }
  v7 = v2->value;
  if (!v7 || *v7 != 3)
  {
    xmlXPathErr(v2, 11);
    goto LABEL_15;
  }
  v8 = valuePop(v2);
  v9 = v8;
  if (v8)
    v10 = (int)v8->floatval - 1;
  else
    v10 = -1;
LABEL_17:
  v11 = v2->value;
  if (!v11 || *v11 != 4)
  {
    xmlXPathErr(v2, 11);
    goto LABEL_118;
  }
  v12 = valuePop(v2);
  v13 = v2->value;
  if (!v13 || ((v14 = *v13, v14 != 1) ? (v15 = v14 == 7) : (v15 = 1), !v15))
  {
    xmlXPathErr(v2, 11);
    goto LABEL_119;
  }
  v16 = valuePop(v2);
  cur = xmlXPtrLocationSetCreate(0);
  if (cur)
  {
    nodesetval = v16->nodesetval;
    if (!nodesetval)
      goto LABEL_130;
    if (v16->type == XPATH_NODESET)
    {
      v18 = xmlXPtrNewLocationSetNodeSet(nodesetval);
      xmlXPathFreeObject(v16);
      v16 = v18;
      if (!v18)
      {
        xmlXPathErr(v2, 15);
LABEL_130:
        v58 = xmlXPtrWrapLocationSet(cur);
        valuePush(v2, v58);
        goto LABEL_120;
      }
    }
    user = (int *)v16->user;
    if (*user < 1)
      goto LABEL_130;
    v59 = v16;
    v60 = v2;
    v69 = (int *)v16->user;
    v70 = v12;
    v67 = v9;
    v20 = 0;
    v21 = 0;
    v74 = 0;
    v61 = v5;
    v22 = v5 != 0;
    v23 = floatval > 0 && v5 != 0;
    v64 = v23;
    v65 = v10;
    if (floatval >= 1)
      v22 = 0;
    v62 = v22;
    v63 = floatval;
LABEL_36:
    v24 = *((_QWORD *)user + 1);
    v25 = *(_QWORD *)(v24 + 8 * v20);
    if (v25
      && ((*(_DWORD *)v25 - 5) > 1
       || (v77 = *(xmlNode **)(v25 + 40),
           v78 = *(_DWORD *)(v25 + 48) & ~(*(int *)(v25 + 48) >> 31),
           (v25 = *(_QWORD *)(v24 + 8 * v20)) != 0)))
    {
      v26 = v70;
      if ((*(_DWORD *)v25 - 5) <= 1)
      {
        v21 = *(_QWORD *)(v25 + 40);
        v74 = *(_DWORD *)(v25 + 48) & ~(*(int *)(v25 + 48) >> 31);
      }
    }
    else
    {
      v26 = v70;
    }
    xmlXPtrAdvanceChar((uint64_t *)&v77, &v78, 0);
    v71 = v20;
    if (v21)
    {
      v27 = *(_DWORD *)(v21 + 8);
      if (v27 == 1 || v27 == 9)
      {
        NthChild = v21;
        if (v74 < 1)
          goto LABEL_54;
LABEL_53:
        NthChild = xmlXPtrGetNthChild(v21, v74);
        goto LABEL_54;
      }
      if (v27 != 18)
      {
        NthChild = v21;
        if (v27 == 13)
        {
          NthChild = v21;
          if (v74 > 0)
            goto LABEL_53;
        }
        do
        {
LABEL_54:
          if (!NthChild)
            goto LABEL_59;
          v30 = NthChild;
          NthChild = *(_QWORD *)(NthChild + 32);
        }
        while (NthChild);
        if (*(_DWORD *)(v30 + 8) != 1)
        {
          v31 = *(const xmlChar **)(v30 + 80);
          if (v31)
          {
            v74 = xmlStrlen(v31);
            v21 = v30;
          }
        }
      }
    }
LABEL_59:
    stringval = v26->stringval;
    if (!stringval)
      goto LABEL_115;
    v33 = (uint64_t)v77;
    if (!v77)
      goto LABEL_115;
LABEL_61:
    if (*(_DWORD *)(v33 + 8) == 18)
      goto LABEL_115;
    v34 = v78 - 1;
    v35 = *stringval;
    v36 = v33;
    while (1)
    {
      if (*(_DWORD *)(v36 + 8) != 1)
      {
        v37 = *(const xmlChar **)(v36 + 80);
        if (v37)
        {
          v38 = xmlStrlen(v37);
          if (v34 <= v38)
          {
            if (!v35)
            {
              v77 = (xmlNode *)v36;
              v47 = ++v34;
              v33 = v36;
              goto LABEL_95;
            }
            v39 = v38;
            v68 = v38 + 1;
            v73 = stringval;
            v72 = v35;
LABEL_72:
            v40 = xmlStrchr((const xmlChar *)(*(_QWORD *)(v36 + 80) + v34), v35);
            if (v40)
            {
              v41 = (_DWORD)v40 - *(_DWORD *)(v36 + 80);
              v34 = v41 + 1;
              v42 = *(_DWORD *)(v36 + 8);
              if (v42 == 18 || v21 == 0)
              {
                if (v42 == 18)
                  v33 = v21;
                else
                  v33 = 0;
                v47 = v74;
              }
              else
              {
                if (*(_DWORD *)(v21 + 8) != 18)
                {
                  v44 = xmlStrlen(stringval);
                  v45 = stringval;
                  v33 = v36;
                  v46 = v41;
                  while (v44 >= 1)
                  {
                    v47 = v44 + v46;
                    if (v33 == v21 && v47 > v74)
                      goto LABEL_90;
                    if (*(_DWORD *)(v33 + 8) != 1)
                    {
                      v48 = *(const xmlChar **)(v33 + 80);
                      if (v48)
                      {
                        v49 = xmlStrlen(v48);
                        if (v49 >= v47)
                        {
                          if (!xmlStrncmp((const xmlChar *)(*(_QWORD *)(v33 + 80) + v46), v45, v44))
                            goto LABEL_94;
LABEL_90:
                          stringval = v73;
                          v35 = v72;
                          if (v39 > v41)
                            goto LABEL_72;
                          goto LABEL_66;
                        }
                        v50 = v49 - (uint64_t)v46;
                        if (xmlStrncmp((const xmlChar *)(*(_QWORD *)(v33 + 80) + v46), v45, v50))
                          goto LABEL_90;
                        v45 += v50;
                        v44 -= v50;
                      }
                    }
                    v33 = xmlXPtrAdvanceNode(v33, 0);
                    v46 = 0;
                    if (!v33)
                      goto LABEL_90;
                  }
                }
                v47 = v74;
                v33 = v21;
              }
LABEL_94:
              v77 = (xmlNode *)v36;
LABEL_95:
              v78 = v34;
              if (v67)
              {
                v51 = v70;
                if (!xmlXPtrAdvanceChar((uint64_t *)&v77, &v78, v65))
                {
                  if (v64)
                  {
                    v75 = v77;
                    v76 = v78 - 1;
                    if (!xmlXPtrAdvanceChar((uint64_t *)&v75, &v76, v63))
                    {
                      v52 = v77;
                      v53 = v78;
                      v54 = v75;
                      v55 = v76;
                      goto LABEL_108;
                    }
                  }
                  else
                  {
                    v52 = v77;
                    v53 = v78;
                    if (v62)
                    {
                      v54 = v77;
                      v55 = v78;
                    }
                    else
                    {
                      v54 = (xmlNode *)v33;
                      v55 = v47;
                    }
LABEL_108:
                    v57 = xmlXPtrNewRange(v52, v53, v54, v55);
                    xmlXPtrLocationSetAdd(cur, v57);
                  }
                }
              }
              else
              {
                v56 = xmlXPtrNewRange((xmlNodePtr)v36, v34, (xmlNodePtr)v33, v47);
                xmlXPtrLocationSetAdd(cur, v56);
                v51 = v70;
              }
              v77 = (xmlNode *)v33;
              v78 = v47;
              stringval = v51->stringval;
              if (*stringval)
              {
                if (!v33)
                  goto LABEL_115;
                goto LABEL_61;
              }
              v78 = v47 + 1;
              if (!v33)
              {
LABEL_115:
                v20 = v71 + 1;
                user = v69;
                if (v71 + 1 >= *v69)
                {
                  v2 = v60;
                  v5 = v61;
                  v9 = v67;
                  v12 = v70;
                  v16 = v59;
                  goto LABEL_130;
                }
                goto LABEL_36;
              }
              goto LABEL_61;
            }
            v34 = v68;
          }
        }
      }
LABEL_66:
      if (v36 != v21 || v34 < v74)
      {
        v36 = xmlXPtrAdvanceNode(v36, 0);
        v34 = 1;
        if (v36)
          continue;
      }
      goto LABEL_115;
    }
  }
  xmlXPathErr(v2, 15);
LABEL_120:
  xmlXPathFreeObject(v16);
  xmlXPathFreeObject(v12);
  if (v9)
    xmlXPathFreeObject(v9);
  if (v5)
    xmlXPathFreeObject(v5);
}

void xmlXPtrStartPointFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathParserContext *v2;
  xmlXPathObjectPtr value;
  xmlXPathObjectType type;
  BOOL v5;
  xmlXPathObjectPtr v6;
  xmlXPathObject *v7;
  xmlXPathObjectPtr v8;
  xmlLocationSetPtr v9;
  xmlLocationSet *v10;
  int *user;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  xmlXPathObject *v15;
  xmlXPathObject *v16;
  int v17;

  if (!ctxt)
    return;
  v2 = ctxt;
  if (a2 != 1)
  {
    v17 = 12;
    goto LABEL_32;
  }
  if (ctxt->valueNr <= 0)
  {
    v17 = 23;
    goto LABEL_32;
  }
  value = ctxt->value;
  if (!value || ((type = value->type, type != XPATH_NODESET) ? (v5 = type == XPATH_LOCATIONSET) : (v5 = 1), !v5))
  {
    v17 = 11;
    goto LABEL_32;
  }
  v6 = valuePop(ctxt);
  v7 = v6;
  if (v6->type == XPATH_NODESET)
  {
    v8 = xmlXPtrNewLocationSetNodeSet(v6->nodesetval);
    xmlXPathFreeObject(v7);
    v7 = v8;
    if (!v8)
    {
LABEL_31:
      ctxt = v2;
      v17 = 15;
      goto LABEL_32;
    }
  }
  v9 = xmlXPtrLocationSetCreate(0);
  if (!v9)
  {
    xmlXPathFreeObject(v7);
    goto LABEL_31;
  }
  v10 = v9;
  user = (int *)v7->user;
  if (!user || *user < 1)
  {
LABEL_25:
    xmlXPathFreeObject(v7);
    v16 = xmlXPtrWrapLocationSet(v10);
    valuePush(v2, v16);
    return;
  }
  v12 = 0;
  while (1)
  {
    v13 = *(_QWORD *)(*((_QWORD *)user + 1) + 8 * v12);
    if (!v13)
      goto LABEL_24;
    if (*(_DWORD *)v13 == 6)
      break;
    if (*(_DWORD *)v13 == 5)
    {
      v14 = *(_QWORD *)(v13 + 40);
      goto LABEL_22;
    }
LABEL_24:
    if (++v12 >= *user)
      goto LABEL_25;
  }
  v14 = *(_QWORD *)(v13 + 40);
  if (!v14)
    goto LABEL_24;
  if ((*(_DWORD *)(v14 + 8) | 0x10) != 0x12)
  {
LABEL_22:
    v15 = (xmlXPathObject *)xmlXPtrNewPoint(v14, *(_DWORD *)(v13 + 48));
    if (v15)
      xmlXPtrLocationSetAdd(v10, v15);
    goto LABEL_24;
  }
  xmlXPathFreeObject(v7);
  xmlXPtrFreeLocationSet(v10);
  ctxt = v2;
  v17 = 16;
LABEL_32:
  xmlXPathErr(ctxt, v17);
}

void xmlXPtrEndPointFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathParserContext *v2;
  xmlXPathObjectPtr value;
  xmlXPathObjectType type;
  BOOL v5;
  xmlXPathObjectPtr v6;
  xmlXPathObject *v7;
  xmlXPathObjectPtr v8;
  xmlLocationSetPtr v9;
  xmlLocationSet *v10;
  int *user;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  xmlXPathObject *v16;
  xmlXPathObject *v17;
  int v18;

  if (!ctxt)
    return;
  v2 = ctxt;
  if (a2 != 1)
  {
    v18 = 12;
    goto LABEL_33;
  }
  if (ctxt->valueNr <= 0)
  {
    v18 = 23;
    goto LABEL_33;
  }
  value = ctxt->value;
  if (!value || ((type = value->type, type != XPATH_NODESET) ? (v5 = type == XPATH_LOCATIONSET) : (v5 = 1), !v5))
  {
    v18 = 11;
    goto LABEL_33;
  }
  v6 = valuePop(ctxt);
  v7 = v6;
  if (v6->type == XPATH_NODESET)
  {
    v8 = xmlXPtrNewLocationSetNodeSet(v6->nodesetval);
    xmlXPathFreeObject(v7);
    v7 = v8;
    if (!v8)
    {
LABEL_32:
      ctxt = v2;
      v18 = 15;
      goto LABEL_33;
    }
  }
  v9 = xmlXPtrLocationSetCreate(0);
  if (!v9)
  {
    xmlXPathFreeObject(v7);
    goto LABEL_32;
  }
  v10 = v9;
  user = (int *)v7->user;
  if (!user || *user < 1)
  {
LABEL_26:
    xmlXPathFreeObject(v7);
    v17 = xmlXPtrWrapLocationSet(v10);
    valuePush(v2, v17);
    return;
  }
  v12 = 0;
  while (1)
  {
    v13 = *(_QWORD *)(*((_QWORD *)user + 1) + 8 * v12);
    if (!v13)
      goto LABEL_25;
    if (*(_DWORD *)v13 == 6)
      break;
    if (*(_DWORD *)v13 == 5)
    {
      v14 = *(_QWORD *)(v13 + 40);
      v15 = *(_DWORD *)(v13 + 48);
      goto LABEL_23;
    }
LABEL_25:
    if (++v12 >= *user)
      goto LABEL_26;
  }
  v14 = *(_QWORD *)(v13 + 56);
  if (!v14)
    goto LABEL_25;
  if ((*(_DWORD *)(v14 + 8) | 0x10) != 0x12)
  {
    v15 = *(_DWORD *)(v13 + 64);
LABEL_23:
    v16 = (xmlXPathObject *)xmlXPtrNewPoint(v14, v15);
    if (v16)
      xmlXPtrLocationSetAdd(v10, v16);
    goto LABEL_25;
  }
  xmlXPathFreeObject(v7);
  xmlXPtrFreeLocationSet(v10);
  ctxt = v2;
  v18 = 16;
LABEL_33:
  xmlXPathErr(ctxt, v18);
}

void xmlXPtrHereFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathParserContext *v2;
  int v3;
  xmlNode *here;
  xmlXPathObject *v5;

  if (ctxt)
  {
    v2 = ctxt;
    if (a2)
    {
      v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }
    if (ctxt->valueNr < 0)
    {
      v3 = 23;
      goto LABEL_4;
    }
    here = ctxt->context->here;
    if (!here)
    {
      ctxt = v2;
      v3 = 16;
      goto LABEL_4;
    }
    v5 = xmlXPtrNewLocationSetNodes(here, 0);
    valuePush(v2, v5);
  }
}

void xmlXPtrOriginFunction(xmlXPathParserContextPtr ctxt, int a2)
{
  xmlXPathParserContext *v2;
  int v3;
  xmlNode *origin;
  xmlXPathObject *v5;

  if (ctxt)
  {
    v2 = ctxt;
    if (a2)
    {
      v3 = 12;
LABEL_4:
      xmlXPathErr(ctxt, v3);
      return;
    }
    if (ctxt->valueNr < 0)
    {
      v3 = 23;
      goto LABEL_4;
    }
    origin = ctxt->context->origin;
    if (!origin)
    {
      ctxt = v2;
      v3 = 16;
      goto LABEL_4;
    }
    v5 = xmlXPtrNewLocationSetNodes(origin, 0);
    valuePush(v2, v5);
  }
}

xmlXPathObjectPtr xmlXPtrEval(const xmlChar *str, xmlXPathContextPtr ctx)
{
  xmlXPathObject *v4;
  xmlXPathParserContextPtr v5;
  uint64_t v6;
  void *v7;
  uint64_t i;
  uint64_t v9;
  xmlXPathParserContext *v10;
  xmlChar *v11;
  xmlChar *v12;
  xmlChar *v13;
  xmlMallocFunc *v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  _BYTE *v18;
  unsigned __int8 *v19;
  int v20;
  _BYTE *k;
  unsigned int v22;
  _BYTE *v23;
  int v24;
  uint64_t v25;
  xmlXPathParserContext *v27;
  int v28;
  _QWORD *v29;
  xmlMallocFunc *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  xmlXPathParserContext *v33;
  xmlChar *v34;
  uint64_t v35;
  unsigned __int8 *v36;
  xmlChar *v37;
  unsigned __int8 *v38;
  const xmlChar *m;
  uint64_t v40;
  xmlChar *v41;
  unsigned int v42;
  BOOL v43;
  uint64_t v44;
  xmlChar *v46;
  int v47;
  uint64_t v49;
  int *v50;
  xmlXPathObject *v51;
  unsigned __int8 *n;
  unsigned int v53;
  uint64_t v54;
  uint64_t j;
  unsigned int v57;
  int *v58;
  int v59;
  BOOL v60;
  xmlXPathObjectPtr v61;
  int v62;
  xmlNodeSetPtr nodesetval;
  __int128 v65;
  unsigned __int8 *v66;

  xmlInitParser();
  v4 = 0;
  if (!str || !ctx)
    return v4;
  v5 = xmlXPathNewParserContext(str, ctx);
  if (!v5)
    return 0;
  v6 = (uint64_t)v5;
  v5->xptr = 1;
  if (!v5->valueTab)
  {
    v7 = xmlMalloc(0x50uLL);
    *(_QWORD *)(v6 + 48) = v7;
    if (!v7)
    {
      xmlXPtrErrMemory((const xmlChar *)"allocating evaluation context");
      goto LABEL_105;
    }
    *(_QWORD *)(v6 + 40) = 0xA00000000;
    *(_QWORD *)(v6 + 32) = 0;
  }
  for (i = *(_QWORD *)v6 + 1; ; ++i)
  {
    v9 = *(unsigned __int8 *)(i - 1);
    if (v9 > 0x2F)
      goto LABEL_14;
    if (((1 << v9) & 0x100002600) == 0)
      break;
    *(_QWORD *)v6 = i;
  }
  if (v9 == 47)
  {
    xmlXPathRoot((xmlXPathParserContextPtr)v6);
    v10 = (xmlXPathParserContext *)v6;
    v11 = 0;
    goto LABEL_99;
  }
LABEL_14:
  v12 = xmlXPathParseName((xmlXPathParserContextPtr)v6);
  if (!v12)
  {
LABEL_104:
    xmlXPathErr((xmlXPathParserContextPtr)v6, 7);
    goto LABEL_105;
  }
  v13 = v12;
  if (**(_BYTE **)v6 != 40)
  {
    v10 = (xmlXPathParserContext *)v6;
    v11 = v13;
LABEL_99:
    xmlXPtrEvalChildSeq(v10, v11);
    for (j = *(_QWORD *)v6 + 1; ; ++j)
    {
      v57 = *(unsigned __int8 *)(j - 1);
      if (v57 > 0x20)
        break;
      if (((1 << v57) & 0x100002600) == 0)
      {
        if (!*(_BYTE *)(j - 1))
          goto LABEL_105;
        goto LABEL_104;
      }
      *(_QWORD *)v6 = j;
    }
    goto LABEL_104;
  }
  v14 = &xmlMallocAtomic;
  while (2)
  {
    *(_DWORD *)(v6 + 16) = 0;
    v15 = *(unsigned __int8 **)v6;
    if (**(_BYTE **)v6 != 40)
    {
      xmlFree(v13);
      v27 = (xmlXPathParserContext *)v6;
      v28 = 7;
      goto LABEL_38;
    }
    *(_QWORD *)v6 = v15 + 1;
    v16 = xmlStrlen(v15 + 1);
    v17 = ((uint64_t (*)(_QWORD))*v14)(v16 + 1);
    if (!v17)
    {
      xmlXPtrErrMemory((const xmlChar *)"allocating buffer");
LABEL_72:
      xmlFree(v13);
      goto LABEL_73;
    }
    v18 = (_BYTE *)v17;
    v19 = *(unsigned __int8 **)v6;
    v20 = 1;
    for (k = (_BYTE *)v17; ; ++k)
    {
      v22 = *v19;
      if (v22 <= 0x28)
        break;
      if (v22 == 94)
      {
        v24 = v19[1];
        v23 = v19 + 1;
        v25 = (1 << (v24 - 40)) & 0x40000000000003;
        if ((v24 - 40) > 0x36 || v25 == 0)
        {
          LOBYTE(v22) = 94;
        }
        else
        {
          *(_QWORD *)v6 = v23;
          LOBYTE(v22) = *v23;
        }
      }
      else if (v22 == 41)
      {
        if (!--v20)
        {
          *(_QWORD *)v6 = v19 + 1;
          *k = 0;
LABEL_45:
          if (xmlStrEqual(v13, (const xmlChar *)"xpointer"))
          {
            v29 = *(_QWORD **)(v6 + 24);
            v29[1] = *v29;
            v29[13] = 0x100000001;
            v65 = *(_OWORD *)v6;
            *(_QWORD *)v6 = v18;
            *(_QWORD *)(v6 + 8) = v18;
            xmlXPathEvalExpr((xmlXPathParserContextPtr)v6);
            *(_OWORD *)v6 = v65;
          }
          else if (xmlStrEqual(v13, (const xmlChar *)"element"))
          {
            v30 = v14;
            v32 = *(unsigned __int8 **)v6;
            v31 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)v6 = v18;
            *(_QWORD *)(v6 + 8) = v18;
            if (*v18 == 47)
            {
              xmlXPathRoot((xmlXPathParserContextPtr)v6);
              v33 = (xmlXPathParserContext *)v6;
              v34 = 0;
            }
            else
            {
              v41 = xmlXPathParseName((xmlXPathParserContextPtr)v6);
              if (!v41)
              {
                *(_QWORD *)v6 = v32;
                *(_QWORD *)(v6 + 8) = v31;
                xmlFree(v18);
                xmlFree(v13);
                xmlXPathErr((xmlXPathParserContextPtr)v6, 7);
                v14 = v30;
                goto LABEL_73;
              }
              v34 = v41;
              v33 = (xmlXPathParserContext *)v6;
            }
            xmlXPtrEvalChildSeq(v33, v34);
            *(_QWORD *)v6 = v32;
            *(_QWORD *)(v6 + 8) = v31;
            v14 = v30;
          }
          else if (xmlStrEqual(v13, (const xmlChar *)"xmlns"))
          {
            v36 = *(unsigned __int8 **)v6;
            v35 = *(_QWORD *)(v6 + 8);
            *(_QWORD *)v6 = v18;
            *(_QWORD *)(v6 + 8) = v18;
            v37 = xmlXPathParseNCName((xmlXPathParserContextPtr)v6);
            if (!v37)
            {
              *(_QWORD *)v6 = v36;
              *(_QWORD *)(v6 + 8) = v35;
              xmlFree(v18);
              xmlFree(v13);
              xmlXPathErr((xmlXPathParserContextPtr)v6, 16);
              goto LABEL_73;
            }
            v38 = *(unsigned __int8 **)v6;
            for (m = (const xmlChar *)(*(_QWORD *)v6 + 1); ; ++m)
            {
              v40 = *v38;
              if (v40 > 0x3D)
                goto LABEL_62;
              if (((1 << v40) & 0x100002600) == 0)
                break;
              *(_QWORD *)v6 = ++v38;
            }
            if (v40 != 61)
            {
LABEL_62:
              *(_QWORD *)v6 = v36;
              *(_QWORD *)(v6 + 8) = v35;
              xmlFree(v37);
              xmlFree(v18);
              ((void (*)(xmlChar *))xmlFree)(v13);
              goto LABEL_43;
            }
            while (1)
            {
              *(_QWORD *)v6 = m;
              v42 = *m;
              v43 = v42 > 0x20;
              v44 = (1 << v42) & 0x100002600;
              if (v43 || v44 == 0)
                break;
              ++m;
            }
            v66 = v36;
            v46 = v37;
            if (xmlXPathRegisterNs(*(xmlXPathContextPtr *)(v6 + 24), v37, m) < 0)
              xmlXPathPErrMemory(v6, 0);
            *(_QWORD *)v6 = v66;
            *(_QWORD *)(v6 + 8) = v35;
            xmlFree(v46);
          }
          else
          {
            xmlXPtrErr(v6, 1900, "unsupported scheme '%s'\n", v13);
          }
          xmlFree(v18);
          goto LABEL_72;
        }
        LOBYTE(v22) = 41;
      }
LABEL_35:
      *k = v22;
      v19 = *(unsigned __int8 **)v6;
      if (**(_BYTE **)v6)
        *(_QWORD *)v6 = ++v19;
    }
    if (v22 == 40)
    {
      ++v20;
      LOBYTE(v22) = 40;
      goto LABEL_35;
    }
    if (*v19)
      goto LABEL_35;
    *k = 0;
    if (!v20 || **(_BYTE **)v6)
      goto LABEL_45;
    xmlFree(v13);
    ((void (*)(_BYTE *))xmlFree)(v18);
LABEL_43:
    v27 = (xmlXPathParserContext *)v6;
    v28 = 16;
LABEL_38:
    xmlXPathErr(v27, v28);
LABEL_73:
    v47 = *(_DWORD *)(v6 + 16);
    if (v47 == 1900 || v47 == 0)
    {
      v49 = *(_QWORD *)(v6 + 32);
      if (!v49)
      {
LABEL_88:
        for (n = *(unsigned __int8 **)v6; ; *(_QWORD *)v6 = n)
        {
          v53 = *n++;
          v43 = v53 > 0x20;
          v54 = (1 << v53) & 0x100002600;
          if (v43 || v54 == 0)
            break;
        }
        v13 = xmlXPathParseName((xmlXPathParserContextPtr)v6);
        if (!v13)
          break;
        continue;
      }
      if (*(_DWORD *)v49 == 1)
      {
        v50 = *(int **)(v49 + 8);
        if (!v50)
        {
LABEL_87:
          while (1)
          {
            v51 = valuePop((xmlXPathParserContextPtr)v6);
            if (!v51)
              break;
            xmlXPathFreeObject(v51);
          }
          goto LABEL_88;
        }
      }
      else
      {
        if (*(_DWORD *)v49 != 7)
          goto LABEL_87;
        v50 = *(int **)(v49 + 40);
        if (!v50)
          goto LABEL_87;
      }
      if (*v50 > 0)
        break;
      goto LABEL_87;
    }
    break;
  }
LABEL_105:
  v58 = *(int **)(v6 + 32);
  if (!v58 || ((v59 = *v58, v59 != 1) ? (v60 = v59 == 7) : (v60 = 1), v60))
  {
    v4 = valuePop((xmlXPathParserContextPtr)v6);
  }
  else
  {
    xmlXPtrErr(v6, 1902, "xmlXPtrEval: evaluation failed to return a node set\n", 0);
    v4 = 0;
  }
  v61 = valuePop((xmlXPathParserContextPtr)v6);
  if (v61)
  {
    v62 = 0;
    do
    {
      if (v61->type != XPATH_NODESET
        || (nodesetval = v61->nodesetval) == 0
        || nodesetval->nodeNr != 1
        || *nodesetval->nodeTab != (xmlNodePtr)ctx->doc)
      {
        ++v62;
      }
      xmlXPathFreeObject(v61);
      v61 = valuePop((xmlXPathParserContextPtr)v6);
    }
    while (v61);
    if (v62)
      xmlXPtrErr(v6, 1903, "xmlXPtrEval: object(s) left on the eval stack\n", 0);
  }
  if (*(_DWORD *)(v6 + 16))
  {
    xmlXPathFreeObject(v4);
    v4 = 0;
  }
  xmlXPathFreeParserContext((xmlXPathParserContextPtr)v6);
  return v4;
}

_DWORD *xmlXPtrErr(uint64_t a1, int a2, const char *a3, const xmlChar *a4)
{
  uint64_t v7;
  _DWORD *v9;
  xmlChar *v10;
  uint64_t v11;
  xmlChar *cur;
  int v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD, uint64_t);

  *(_DWORD *)(a1 + 16) = a2;
  v7 = *(_QWORD *)(a1 + 24);
  if (!v7)
    return __xmlRaiseError(0, 0, 0, 0, 0, 0xDu, a2, 2, 0, 0, a4, 0, 0, 0, 0, a3, (char)a4);
  xmlResetError((xmlErrorPtr)(v7 + 232));
  v9 = *(_DWORD **)(a1 + 24);
  v9[58] = 13;
  v9[59] = a2;
  v9[62] = 2;
  v10 = xmlStrdup(*(const xmlChar **)(a1 + 8));
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v11 + 272) = v10;
  cur = *(xmlChar **)(a1 + 8);
  v13 = *(_DWORD *)a1 - (_DWORD)cur;
  *(_DWORD *)(v11 + 296) = v13;
  v14 = *(_QWORD *)(v11 + 320);
  *(_QWORD *)(v11 + 312) = v14;
  v15 = *(uint64_t (**)(_QWORD, uint64_t))(v11 + 224);
  if (v15)
    return (_DWORD *)v15(*(_QWORD *)(v11 + 216), v11 + 232);
  else
    return __xmlRaiseError(0, 0, 0, 0, v14, 0xDu, a2, 2, 0, 0, a4, cur, 0, v13, 0, a3, (char)a4);
}

xmlNodePtr xmlXPtrBuildNodeList(xmlXPathObjectPtr obj)
{
  char v2;
  xmlNode *v3;
  xmlNodeSetPtr nodesetval;
  uint64_t v5;
  xmlNode *v6;
  xmlNodePtr v7;
  unsigned int type;
  BOOL v9;
  int v10;
  xmlNode *v12;
  xmlNode *user;
  int v14;
  xmlNode *v16;
  uint64_t user2;
  xmlNode *v18;
  int index;
  uint64_t NthChild;
  uint64_t v21;
  xmlNode *v22;
  xmlNode *v23;
  uint64_t v24;
  xmlChar *content;
  xmlNodePtr v26;
  unsigned int v27;
  xmlGenericErrorFunc v28;
  void *v29;
  const char *v30;
  xmlNode *v31;
  xmlNode *v32;
  xmlNodePtr Sibling;
  int *v34;
  uint64_t v35;
  xmlNode *v36;
  xmlNode *v37;
  xmlNode *v38;
  xmlGenericErrorFunc v39;
  void *v40;
  xmlGenericErrorFunc v41;
  void *v42;
  uint64_t v43;
  _BOOL4 v44;
  _BOOL4 v45;
  BOOL v46;
  uint64_t v47;
  const xmlChar *v48;
  int v49;
  int v50;
  xmlNode *v51;
  int index2;

  v2 = linkedOnOrAfterFall2022OSVersions();
  v3 = 0;
  if (obj && (v2 & 1) == 0)
  {
    v3 = 0;
    switch(obj->type)
    {
      case XPATH_NODESET:
        nodesetval = obj->nodesetval;
        if (!nodesetval || nodesetval->nodeNr < 1)
          return 0;
        v5 = 0;
        v6 = 0;
        v3 = 0;
        do
        {
          v7 = nodesetval->nodeTab[v5];
          if (v7)
          {
            type = v7->type;
            v9 = type > 0x12;
            v10 = (1 << type) & 0x7DC04;
            if (v9 || v10 == 0)
            {
              v12 = xmlCopyNode(v7, 1);
              if (v6)
              {
                xmlAddNextSibling(v6, v12);
                if (v6->next)
                  v6 = v6->next;
              }
              else
              {
                v3 = v12;
                v6 = v12;
              }
            }
          }
          ++v5;
        }
        while (v5 < nodesetval->nodeNr);
        return v3;
      case XPATH_POINT:
        user = (xmlNode *)obj->user;
        v14 = 0;
        return xmlCopyNode(user, v14);
      case XPATH_RANGE:
        v16 = (xmlNode *)obj->user;
        if (!v16 || v16->type == XML_NAMESPACE_DECL)
          return 0;
        user2 = (uint64_t)obj->user2;
        if (user2)
        {
          if (*(_DWORD *)(user2 + 8) == 18)
            return 0;
          v18 = 0;
          v3 = 0;
          index = obj->index;
          index2 = obj->index2;
          NthChild = (uint64_t)obj->user;
          while (1)
          {
            v21 = user2;
            v22 = v18;
            while (1)
            {
              v23 = 0;
              v24 = index <= 1 ? 0 : (index - 1);
LABEL_30:
              if (NthChild == v21)
                break;
              if ((xmlNode *)NthChild != v16 || v3)
              {
                v27 = *(_DWORD *)(NthChild + 8);
                if (v27 <= 0x14)
                {
                  if (((1 << v27) & 0x19C040) != 0)
                    goto LABEL_46;
                  if (v27 == 2)
                  {
                    v28 = *__xmlGenericError();
                    v29 = *__xmlGenericErrorContext();
                    v30 = "Internal error at %s:%d\n";
LABEL_51:
                    v28(v29, v30);
LABEL_46:
                    if (!v3)
                      goto LABEL_87;
                    goto LABEL_47;
                  }
                  if (v27 == 17)
                  {
                    v28 = *__xmlGenericError();
                    v29 = *__xmlGenericErrorContext();
                    v30 = "Unimplemented block at %s:%d\n";
                    goto LABEL_51;
                  }
                }
                v31 = xmlCopyNode((xmlNodePtr)NthChild, 1);
                if (!v31)
                  goto LABEL_46;
                if (!v3 || !((unint64_t)v23 | (unint64_t)v22))
                {
                  v41 = *__xmlGenericError();
                  v42 = *__xmlGenericErrorContext();
                  v41(v42, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c", 1654);
                  return 0;
                }
                if (v23)
                {
                  xmlAddNextSibling(v23, v31);
                  goto LABEL_48;
                }
                v23 = xmlAddChild(v22, v31);
LABEL_47:
                if (!((unint64_t)v23 | (unint64_t)v22))
                {
LABEL_87:
                  v39 = *__xmlGenericError();
                  v40 = *__xmlGenericErrorContext();
                  v39(v40, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c", 1668);
                  return 0;
                }
LABEL_48:
                NthChild = xmlXPtrAdvanceNode(NthChild, 0);
                if (!NthChild)
                  return v3;
                goto LABEL_30;
              }
              if (v16->type - 3 <= 1)
              {
                content = v16->content;
                if (content)
                  v26 = xmlNewText(&content[v24]);
                else
                  v26 = xmlNewTextLen(0, 0);
                v3 = v26;
                goto LABEL_45;
              }
              if (index < 2)
              {
                v26 = xmlCopyNode(v16, 1);
                v3 = v26;
                v22 = 0;
LABEL_45:
                v23 = v26;
                goto LABEL_46;
              }
              v22 = xmlCopyNode(v16, 0);
              NthChild = xmlXPtrGetNthChild((uint64_t)v16, index - 1);
              index = 0;
              v3 = v22;
              if (!NthChild)
                return v3;
            }
            if (*(_DWORD *)(v21 + 8) == 3)
            {
              v43 = *(_QWORD *)(v21 + 80);
              if (v43)
              {
                v44 = index > 1;
                v45 = v21 == (_QWORD)v16;
                v46 = !v45 || !v44;
                if (v45 && v44)
                  v47 = (index - 1);
                else
                  v47 = 0;
                v48 = (const xmlChar *)(v43 + v47);
                if (v46)
                  v49 = 0;
                else
                  v49 = index - 1;
                v50 = index2 - v49;
              }
              else
              {
                v48 = 0;
                v50 = 0;
              }
              v51 = xmlNewTextLen(v48, v50);
              if (!v3)
                return v51;
              if (v23)
                xmlAddNextSibling(v23, v51);
              else
                xmlAddChild(v22, v51);
              return v3;
            }
            v32 = xmlCopyNode((xmlNodePtr)v21, 0);
            v18 = v32;
            if (v3)
            {
              if (v23)
                Sibling = xmlAddNextSibling(v23, v32);
              else
                Sibling = xmlAddChild(v22, v32);
              v18 = Sibling;
            }
            else
            {
              v3 = v32;
            }
            if (index2 >= 2)
            {
              user2 = xmlXPtrGetNthChild(v21, index2 - 1);
              index2 = 0;
            }
            else
            {
              user2 = v21;
            }
            if ((xmlNode *)v21 == v16 && index >= 2)
            {
              NthChild = xmlXPtrGetNthChild((uint64_t)v16, index - 1);
              index = 0;
            }
            else
            {
              NthChild = *(_QWORD *)(v21 + 24);
            }
            if (!NthChild)
              return v3;
          }
        }
        user = (xmlNode *)obj->user;
        v14 = 1;
        return xmlCopyNode(user, v14);
      case XPATH_LOCATIONSET:
        v34 = (int *)obj->user;
        if (!v34 || *v34 < 1)
          return 0;
        v35 = 0;
        v36 = 0;
        v3 = 0;
        break;
      default:
        return v3;
    }
    while (1)
    {
      v37 = xmlXPtrBuildNodeList(*(xmlXPathObjectPtr *)(*((_QWORD *)v34 + 1) + 8 * v35));
      v38 = v37;
      if (v36)
        break;
      v3 = v37;
      if (v37)
        goto LABEL_82;
      v36 = 0;
LABEL_83:
      if (++v35 >= *v34)
        return v3;
    }
    xmlAddNextSibling(v36, v37);
    v38 = v36;
    do
    {
LABEL_82:
      v36 = v38;
      v38 = v38->next;
    }
    while (v38);
    goto LABEL_83;
  }
  return v3;
}

void xmlXPtrRangeToFunction(xmlXPathParserContextPtr ctxt, int nargs)
{
  if ((linkedOnOrAfterFall2022OSVersions() & 1) == 0)
    xmlXPathErr(ctxt, 7);
}

uint64_t xmlXPtrAdvanceNode(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  xmlGenericErrorFunc v7;
  void **v8;

LABEL_1:
  while (a1)
  {
    if (*(_DWORD *)(a1 + 8) == 18)
      return 0;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = a1;
    if (!v4)
      goto LABEL_10;
    if (a2)
      ++*a2;
    a1 = v4;
    while (1)
    {
      v6 = *(_DWORD *)(a1 + 8);
      if (v6 > 0xD)
        break;
      if (v6 != 5)
      {
        if (((1 << v6) & 0x221A) == 0)
          goto LABEL_1;
        return a1;
      }
      v7 = *__xmlGenericError();
      v8 = __xmlGenericErrorContext();
      v7(*v8, "Unimplemented block at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c", 2391);
      v5 = a1;
LABEL_10:
      while (1)
      {
        a1 = *(_QWORD *)(v5 + 48);
        if (a1)
          break;
        v5 = *(_QWORD *)(v5 + 40);
        if (a2)
          --*a2;
        if (!v5)
          return 0;
      }
    }
  }
  return a1;
}

void xmlXPtrEvalRangePredicate(xmlXPathParserContextPtr ctxt)
{
  char v2;
  const xmlChar *i;
  unsigned int v4;
  unsigned int v6;
  uint64_t v7;
  xmlXPathObjectPtr value;
  xmlXPathObjectPtr v10;
  int *user;
  xmlXPathContextPtr context;
  const xmlChar *cur;
  xmlLocationSet *v14;
  uint64_t v15;
  xmlXPathContextPtr v16;
  xmlNode *v17;
  xmlXPathObject *v18;
  xmlXPathContextPtr v19;
  uint64_t v20;
  xmlXPathObject *v21;
  xmlXPathObject *v22;
  xmlXPathObject *v23;
  xmlXPathContextPtr v24;
  xmlXPathObject *v25;
  int v26;
  xmlXPathObject *v27;
  const xmlChar *v28;
  unsigned int v29;
  uint64_t v30;

  v2 = linkedOnOrAfterFall2022OSVersions();
  if (!ctxt || (v2 & 1) != 0)
    return;
  for (i = ctxt->cur + 1; ; ++i)
  {
    v4 = *(i - 1);
    if (v4 > 0x20 || ((1 << v4) & 0x100002600) == 0)
      break;
    ctxt->cur = i;
  }
  if (v4 != 91)
  {
LABEL_42:
    v26 = 6;
    goto LABEL_43;
  }
  do
  {
    ctxt->cur = i;
    v6 = *i++;
    v7 = (1 << v6) & 0x100002600;
  }
  while (v6 <= 0x20 && v7 != 0);
  value = ctxt->value;
  if (!value || value->type != XPATH_LOCATIONSET)
  {
    v26 = 11;
LABEL_43:
    xmlXPathErr(ctxt, v26);
    return;
  }
  v10 = valuePop(ctxt);
  user = (int *)v10->user;
  context = ctxt->context;
  context->node = 0;
  if (!user || !*user)
  {
    *(_QWORD *)&context->contextSize = 0;
    xmlXPathEvalExpr(ctxt);
    v27 = valuePop(ctxt);
    if (v27)
      xmlXPathFreeObject(v27);
    valuePush(ctxt, v10);
    if (ctxt->error)
      return;
    goto LABEL_34;
  }
  cur = ctxt->cur;
  v14 = xmlXPtrLocationSetCreate(0);
  if (*user < 1)
  {
LABEL_29:
    xmlXPathFreeObject(v10);
    v24 = ctxt->context;
    v24->node = 0;
    *(_QWORD *)&v24->contextSize = -1;
    v25 = xmlXPtrWrapLocationSet(v14);
    valuePush(ctxt, v25);
LABEL_34:
    if (*ctxt->cur == 93)
    {
      v28 = ctxt->cur + 1;
      do
      {
        ctxt->cur = v28;
        v29 = *v28++;
        v30 = (1 << v29) & 0x100002600;
      }
      while (v29 <= 0x20 && v30 != 0);
      return;
    }
    goto LABEL_42;
  }
  v15 = 0;
  v16 = ctxt->context;
  while (1)
  {
    ctxt->cur = cur;
    v17 = *(xmlNode **)(*(_QWORD *)(*((_QWORD *)user + 1) + 8 * v15) + 40);
    v16->node = v17;
    v18 = xmlXPathNewNodeSet(v17);
    valuePush(ctxt, v18);
    v19 = ctxt->context;
    v20 = v15 + 1;
    v19->contextSize = *user;
    v19->proximityPosition = v15 + 1;
    xmlXPathEvalExpr(ctxt);
    if (ctxt->error)
      break;
    v21 = valuePop(ctxt);
    if (xmlXPathEvaluatePredicateResult(ctxt, v21))
    {
      v22 = xmlXPathObjectCopy(*(xmlXPathObjectPtr *)(*((_QWORD *)user + 1) + 8 * v15));
      xmlXPtrLocationSetAdd(v14, v22);
    }
    if (v21)
      xmlXPathFreeObject(v21);
    if (ctxt->value == v18)
    {
      v23 = valuePop(ctxt);
      xmlXPathFreeObject(v23);
    }
    v16 = ctxt->context;
    v16->node = 0;
    ++v15;
    if (v20 >= *user)
      goto LABEL_29;
  }
}

void xmlXPtrEvalChildSeq(xmlXPathParserContext *a1, xmlChar *val)
{
  xmlXPathObject *v4;
  const xmlChar *i;
  int v6;
  int v7;
  int v8;
  const xmlChar *v9;
  int v10;
  BOOL v11;
  int v12;
  int v13;
  BOOL v14;
  int v15;
  char v16;
  int v17;
  _DWORD *value;
  xmlXPathObjectPtr v19;
  xmlXPathObject *v20;
  xmlNodeSetPtr nodesetval;
  uint64_t *nodeTab;
  uint64_t NthChild;
  xmlXPathParserContext *v24;
  xmlXPathObject *v25;

  if (val)
  {
    v4 = xmlXPathNewString(val);
    valuePush(a1, v4);
    xmlFree(val);
    xmlXPathIdFunction(a1, 1);
    if (a1->error)
      return;
  }
  else if (*a1->cur == 47 && *((_BYTE *)a1->cur + 1) != 49)
  {
    xmlXPtrErr((uint64_t)a1, 1901, "warning: ChildSeq not starting by /1\n", 0);
  }
  for (i = a1->cur; *a1->cur == 47; i = a1->cur)
  {
    a1->cur = i + 1;
    v6 = i[1];
    if ((v6 - 48) > 9)
      goto LABEL_22;
    v7 = 0;
    v8 = 0;
    v9 = i + 2;
    do
    {
      v10 = v6 - 48;
      v11 = v8 > 214748364;
      v12 = 10 * v8;
      if (v8 > 214748364)
        v12 = v8;
      v13 = -2147483601 - v6;
      v14 = v12 <= v13;
      if (v12 <= v13)
        v15 = v10;
      else
        v15 = 0;
      v8 = v15 + v12;
      v16 = !v14 || v11;
      if ((v16 & 1) != 0)
        v7 = 1;
      a1->cur = v9;
      v17 = *v9++;
      v6 = v17;
    }
    while ((v17 - 48) < 0xA);
    if (v7)
LABEL_22:
      v8 = 0;
    value = a1->value;
    if (value && *value == 1)
    {
      v19 = valuePop(a1);
      v20 = v19;
      if (v8 >= 1
        && (nodesetval = v19->nodesetval) != 0
        && nodesetval->nodeNr == 1
        && (nodeTab = (uint64_t *)nodesetval->nodeTab, (NthChild = xmlXPtrGetNthChild(*nodeTab, v8)) != 0))
      {
        *nodeTab = NthChild;
        v24 = a1;
        v25 = v20;
      }
      else
      {
        xmlXPathFreeObject(v20);
        v25 = xmlXPathNewNodeSet(0);
        v24 = a1;
      }
      valuePush(v24, v25);
    }
    else
    {
      xmlXPathErr(a1, 11);
    }
  }
}

uint64_t xmlXPtrGetNthChild(uint64_t result, int a2)
{
  int v2;
  unsigned int v3;
  BOOL v4;
  int v5;

  if (result)
  {
    if (*(_DWORD *)(result + 8) != 18)
    {
      result = *(_QWORD *)(result + 24);
      if ((a2 & 0x80000000) == 0)
      {
        v2 = 0;
        do
        {
          if (!result)
            break;
          v3 = *(_DWORD *)(result + 8);
          v4 = v3 > 0xD;
          v5 = (1 << v3) & 0x2202;
          if (!v4 && v5 != 0 && ++v2 == a2)
            break;
          result = *(_QWORD *)(result + 48);
        }
        while (v2 <= a2);
      }
    }
  }
  return result;
}

_OWORD *xmlXPtrNewPoint(uint64_t a1, int a2)
{
  _OWORD *result;

  result = 0;
  if (a1 && (a2 & 0x80000000) == 0)
  {
    result = xmlMalloc(0x48uLL);
    if (result)
    {
      result[2] = 0u;
      result[3] = 0u;
      *((_QWORD *)result + 8) = 0;
      *result = 0u;
      result[1] = 0u;
      *(_DWORD *)result = 5;
      *((_QWORD *)result + 5) = a1;
      *((_DWORD *)result + 12) = a2;
    }
    else
    {
      xmlXPtrErrMemory((const xmlChar *)"allocating point");
      return 0;
    }
  }
  return result;
}

uint64_t xmlXPtrAdvanceChar(uint64_t *a1, int *a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  uint64_t NthChild;
  const xmlChar *v12;
  int v13;
  xmlGenericErrorFunc v14;
  void **v15;

  result = 0xFFFFFFFFLL;
  if (a1)
  {
    if (a2)
    {
      v6 = *a1;
      if (*a1)
      {
        if (*(_DWORD *)(v6 + 8) != 18)
        {
          v7 = a3;
          if ((a3 & 0x80000000) == 0)
          {
            v8 = *a2;
            while (v6)
            {
              while (1)
              {
                v9 = *(_DWORD *)(v6 + 8);
                if (v9 > 0xD || ((1 << v9) & 0x2202) == 0)
                  break;
                if (v8 < 1)
                  NthChild = xmlXPtrAdvanceNode(v6, 0);
                else
                  NthChild = xmlXPtrGetNthChild(v6, v8);
                v6 = NthChild;
                v8 = 0;
                if (!NthChild)
                  goto LABEL_30;
              }
              if (v8 <= 1)
                v8 = 1;
              if (!v7)
              {
                result = 0;
                goto LABEL_31;
              }
              if (v9 == 1 || (v12 = *(const xmlChar **)(v6 + 80)) == 0)
                v13 = 0;
              else
                v13 = xmlStrlen(v12);
              if (v8 > v13)
              {
                v14 = *__xmlGenericError();
                v15 = __xmlGenericErrorContext();
                v14(*v15, "Internal error at %s:%d\n", "/Library/Caches/com.apple.xbs/Sources/libxml2/libxml2/xpointer.c", 2465);
                v8 = v13;
              }
              if (v8 + v7 < v13)
              {
                result = 0;
                v8 += v7;
                goto LABEL_31;
              }
              v6 = xmlXPtrAdvanceNode(v6, 0);
              result = 0xFFFFFFFFLL;
              v7 = v7 - v13 + v8;
              v8 = 0;
              if (v7 < 0)
                return result;
            }
            v8 = 0;
LABEL_30:
            result = 0xFFFFFFFFLL;
LABEL_31:
            *a1 = v6;
            *a2 = v8;
          }
        }
      }
    }
  }
  return result;
}

BOOL xmlDetectSAX2_cold_1(_DWORD *a1)
{
  uint8_t v3[16];

  *(_WORD *)v3 = 0;
  _os_log_fault_impl(&dword_1B079F000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "XML SAX2 parser requested but SAX1 used due to startElement/endElement handlers--switch to startElementNs/endElementNs", v3, 2u);
  return *a1 == -554844497;
}

void xmlBufferLength_cold_1(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1[0] = 67240192;
  v1[1] = a1;
  _os_log_error_impl(&dword_1B079F000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "xmlBufferLength() int overflow: %{public}u", (uint8_t *)v1, 8u);
}

int __darwin_check_fd_set_overflow(int a1, const void *a2, int a3)
{
  return MEMORY[0x1E0C80AA0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

double __exp10(double a1)
{
  double result;

  MEMORY[0x1E0C80AC8](a1);
  return result;
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __memmove_chk()
{
  return MEMORY[0x1E0C80B70]();
}

uint64_t __strncat_chk()
{
  return MEMORY[0x1E0C80C50]();
}

__darwin_ct_rune_t __toupper(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C78](*(_QWORD *)&a1);
}

const char *__cdecl _dyld_get_image_name(uint32_t image_index)
{
  return (const char *)MEMORY[0x1E0C80E68](*(_QWORD *)&image_index);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

int bind(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1E0C816F0](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

void *__cdecl bsearch(const void *__key, const void *__base, size_t __nel, size_t __width, int (__cdecl *__compar)(const void *, const void *))
{
  return (void *)MEMORY[0x1E0C81738](__key, __base, __nel, __width, __compar);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

int connect(int a1, const sockaddr *a2, socklen_t a3)
{
  return MEMORY[0x1E0C826D8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3);
}

uLong crc32(uLong crc, const Bytef *buf, uInt len)
{
  return MEMORY[0x1E0DE92B0](crc, buf, *(_QWORD *)&len);
}

int deflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE92C0](strm, *(_QWORD *)&flush);
}

int deflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE92D0](strm);
}

int deflateInit2_(z_streamp strm, int level, int method, int windowBits, int memLevel, int strategy, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE92D8](strm, *(_QWORD *)&level, *(_QWORD *)&method, *(_QWORD *)&windowBits, *(_QWORD *)&memLevel, *(_QWORD *)&strategy, version, *(_QWORD *)&stream_size);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

int dlclose(void *__handle)
{
  return MEMORY[0x1E0C83030](__handle);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

int dup(int a1)
{
  return MEMORY[0x1E0C83078](*(_QWORD *)&a1);
}

uint64_t dyld_get_program_sdk_version()
{
  return MEMORY[0x1E0C830B8]();
}

uint64_t dyld_program_minos_at_least()
{
  return MEMORY[0x1E0C83150]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int fcntl(int a1, int a2, ...)
{
  return MEMORY[0x1E0C83300](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

int ferror(FILE *a1)
{
  return MEMORY[0x1E0C83348](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int fileno(FILE *a1)
{
  return MEMORY[0x1E0C833B0](a1);
}

long double fmod(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C83440](__x, __y);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C834A0](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

void freeaddrinfo(addrinfo *a1)
{
  MEMORY[0x1E0C834C0](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getaddrinfo(const char *a1, const char *a2, const addrinfo *a3, addrinfo **a4)
{
  return MEMORY[0x1E0C835F8](a1, a2, a3, a4);
}

char *__cdecl getcwd(char *a1, size_t a2)
{
  return (char *)MEMORY[0x1E0C83648](a1, a2);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

hostent *__cdecl gethostbyname(const char *a1)
{
  return (hostent *)MEMORY[0x1E0C836B0](a1);
}

int getsockname(int a1, sockaddr *a2, socklen_t *a3)
{
  return MEMORY[0x1E0C83810](*(_QWORD *)&a1, a2, a3);
}

int getsockopt(int a1, int a2, int a3, void *a4, socklen_t *a5)
{
  return MEMORY[0x1E0C83818](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3, a4, a5);
}

int gzclose(gzFile file)
{
  return MEMORY[0x1E0DE9310](file);
}

int gzdirect(gzFile file)
{
  return MEMORY[0x1E0DE9318](file);
}

gzFile gzdopen(int fd, const char *mode)
{
  return (gzFile)MEMORY[0x1E0DE9320](*(_QWORD *)&fd, mode);
}

gzFile gzopen(const char *a1, const char *a2)
{
  return (gzFile)MEMORY[0x1E0DE9358](a1, a2);
}

int gzread(gzFile file, voidp buf, unsigned int len)
{
  return MEMORY[0x1E0DE9370](file, buf, *(_QWORD *)&len);
}

int gzwrite(gzFile file, voidpc buf, unsigned int len)
{
  return MEMORY[0x1E0DE9390](file, buf, *(_QWORD *)&len);
}

const char *__cdecl inet_ntop(int a1, const void *a2, char *a3, socklen_t a4)
{
  return (const char *)MEMORY[0x1E0C83968](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int inflate(z_streamp strm, int flush)
{
  return MEMORY[0x1E0DE93A0](strm, *(_QWORD *)&flush);
}

int inflateEnd(z_streamp strm)
{
  return MEMORY[0x1E0DE93B8](strm);
}

int inflateInit2_(z_streamp strm, int windowBits, const char *version, int stream_size)
{
  return MEMORY[0x1E0DE93C8](strm, *(_QWORD *)&windowBits, version, *(_QWORD *)&stream_size);
}

int listen(int a1, int a2)
{
  return MEMORY[0x1E0C83B80](*(_QWORD *)&a1, *(_QWORD *)&a2);
}

long double log10(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BC0](__x);
  return result;
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

void *__cdecl malloc_type_realloc(void *ptr, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F10](ptr, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

int poll(pollfd *a1, nfds_t a2, int a3)
{
  return MEMORY[0x1E0C84B20](a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int pthread_cond_destroy(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D20](a1);
}

int pthread_cond_init(pthread_cond_t *a1, const pthread_condattr_t *a2)
{
  return MEMORY[0x1E0C84D28](a1, a2);
}

int pthread_cond_signal(pthread_cond_t *a1)
{
  return MEMORY[0x1E0C84D30](a1);
}

int pthread_cond_wait(pthread_cond_t *a1, pthread_mutex_t *a2)
{
  return MEMORY[0x1E0C84D48](a1, a2);
}

int pthread_equal(pthread_t a1, pthread_t a2)
{
  return MEMORY[0x1E0C84D80](a1, a2);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_main_np(void)
{
  return MEMORY[0x1E0C84E08]();
}

int pthread_mutex_destroy(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E18](a1);
}

int pthread_mutex_init(pthread_mutex_t *a1, const pthread_mutexattr_t *a2)
{
  return MEMORY[0x1E0C84E20](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_once(pthread_once_t *a1, void (*a2)(void))
{
  return MEMORY[0x1E0C84E68](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int puts(const char *a1)
{
  return MEMORY[0x1E0C84F60](a1);
}

int rand_r(unsigned int *a1)
{
  return MEMORY[0x1E0C84FB8](a1);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

ssize_t recv(int a1, void *a2, size_t a3, int a4)
{
  return MEMORY[0x1E0C85060](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int select(int a1, fd_set *a2, fd_set *a3, fd_set *a4, timeval *a5)
{
  return MEMORY[0x1E0C85280](*(_QWORD *)&a1, a2, a3, a4, a5);
}

ssize_t send(int a1, const void *a2, size_t a3, int a4)
{
  return MEMORY[0x1E0C852F8](*(_QWORD *)&a1, a2, a3, *(_QWORD *)&a4);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int socket(int a1, int a2, int a3)
{
  return MEMORY[0x1E0C85450](*(_QWORD *)&a1, *(_QWORD *)&a2, *(_QWORD *)&a3);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

char *__cdecl strchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C85518](__s, *(_QWORD *)&__c);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

char *__cdecl strncat(char *__s1, const char *__s2, size_t __n)
{
  return (char *)MEMORY[0x1E0C855A0](__s1, __s2, __n);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

char *__cdecl strncpy(char *__dst, const char *__src, size_t __n)
{
  return (char *)MEMORY[0x1E0C855B0](__dst, __src, __n);
}

char *__cdecl strrchr(char *__s, int __c)
{
  return (char *)MEMORY[0x1E0C855E8](__s, *(_QWORD *)&__c);
}

uint64_t strtol(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85658](__str, __endptr, *(_QWORD *)&__base);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

uint64_t ucnv_close()
{
  return MEMORY[0x1E0DE5E98]();
}

uint64_t ucnv_convertEx()
{
  return MEMORY[0x1E0DE5EA8]();
}

uint64_t ucnv_open()
{
  return MEMORY[0x1E0DE5F20]();
}

uint64_t ucnv_setFromUCallBack()
{
  return MEMORY[0x1E0DE5F48]();
}

uint64_t ucnv_setToUCallBack()
{
  return MEMORY[0x1E0DE5F58]();
}

int vfprintf(FILE *a1, const char *a2, va_list a3)
{
  return MEMORY[0x1E0C85A68](a1, a2, a3);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

