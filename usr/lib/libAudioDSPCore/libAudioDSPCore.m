double IR::IRCoordinates::IRCoordinates(IR::IRCoordinates *this)
{
  double result;

  *((_DWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

{
  double result;

  *((_DWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

double IR::IRCoordinates::reset(IR::IRCoordinates *this)
{
  double result;

  *((_DWORD *)this + 8) = 0;
  result = 0.0;
  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  return result;
}

_QWORD *IR::IRCoordinates::getParameterString@<X0>(unsigned int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (a1 > 8)
    v2 = "";
  else
    v2 = off_24CA2CBE0[a1];
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

double IR::IRCoordinates::getAllCoordinates@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 32) = 8;
  *(_QWORD *)&result = 0x100000000;
  *(_OWORD *)a1 = xmmword_2105DDD40;
  *(_OWORD *)(a1 + 16) = unk_2105DDD50;
  return result;
}

uint64_t IR::IRCoordinates::set(uint64_t result, unsigned int a2, float a3)
{
  *(float *)(result + 4 * a2) = a3;
  return result;
}

float IR::IRCoordinates::get(uint64_t a1, unsigned int a2)
{
  return *(float *)(a1 + 4 * a2);
}

BOOL IR::IRCoordinates::operator==(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  BOOL v5;

  v2 = 0;
  do
  {
    v3 = *(float *)(a1 + v2);
    v4 = *(float *)(a2 + v2);
    if (v3 != v4)
      break;
    v5 = v2 == 32;
    v2 += 4;
  }
  while (!v5);
  return v3 == v4;
}

BOOL IR::IRCoordinates::operator!=(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  float v3;
  float v4;
  BOOL v5;

  v2 = 0;
  do
  {
    v3 = *(float *)(a1 + v2);
    v4 = *(float *)(a2 + v2);
    if (v3 != v4)
      break;
    v5 = v2 == 32;
    v2 += 4;
  }
  while (!v5);
  return v3 != v4;
}

_QWORD *std::string::basic_string[abi:ne180100]<0>(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void std::string::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("basic_string");
}

void std::__throw_length_error[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::length_error::length_error[abi:ne180100](exception, a1);
}

void sub_21057126C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::length_error::length_error[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B8] + 16);
  return result;
}

void applesauce::CF::construct_error(applesauce::CF *this)
{
  JUMPOUT(0x212BC76A0);
}

void std::__throw_bad_optional_access[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = MEMORY[0x24BEDB8E0] + 16;
}

void applesauce::CF::ArrayRef::~ArrayRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void applesauce::CF::DictionaryRef::~DictionaryRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

const void *applesauce::CF::details::at_key<std::string const&>(const __CFDictionary *a1, const UInt8 *a2)
{
  const void *Value;
  CFIndex v4;
  CFIndex v5;
  CFStringRef v6;
  void *exception;

  v4 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v5 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v5 = v4;
  }
  v6 = CFStringCreateWithBytes(0, a2, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  if (a1)
    Value = CFDictionaryGetValue(a1, v6);
  CFRelease(v6);
  if (!a1)
    return 0;
  return Value;
}

void sub_21057140C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2105713BCLL);
}

void __clang_call_terminate(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

void applesauce::CF::StringRef::~StringRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

applesauce::CF::DictionaryRef *applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, applesauce::CF::DictionaryRef *a3@<X8>)
{
  const void *ValueAtIndex;
  const void *v7;
  applesauce::CF *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = CFArrayGetValueAtIndex(a1, a2), (v7 = ValueAtIndex) == 0))
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  CFRetain(ValueAtIndex);
  return applesauce::CF::DictionaryRef::DictionaryRef(a3, v7);
}

void sub_210571538()
{
  void *v0;

}

void sub_21057155C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::not_found(applesauce::CF *this)
{
  JUMPOUT(0x212BC76A0);
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_2105715FC(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void std::__throw_bad_array_new_length[abi:ne180100]()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

uint64_t applesauce::CF::convert_to<unsigned int,0>(const __CFNumber *a1)
{
  uint64_t result;
  applesauce::CF *exception;

  result = applesauce::CF::convert_as<unsigned int,0>(a1);
  if ((result & 0xFF00000000) == 0)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return result;
}

void sub_21057168C()
{
  void *v0;

}

void sub_2105716A4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  void *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_21057176C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::convert_as<unsigned int,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return applesauce::CF::details::number_convert_as<unsigned int>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<unsigned int>(a1);
}

void applesauce::CF::convert_error(applesauce::CF *this)
{
  JUMPOUT(0x212BC76A0);
}

uint64_t applesauce::CF::details::treat_as_BOOL_for_convert_as<unsigned int>(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  uint64_t Value;
  uint64_t v4;

  if (a1 && (TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    Value = CFBooleanGetValue(a1);
    v4 = 0x100000000;
  }
  else
  {
    Value = 0;
    v4 = 0;
  }
  return v4 | Value;
}

uint64_t applesauce::CF::details::number_convert_as<unsigned int>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value != 0;
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0)
        v18 = 0;
      v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr))
        v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      else
        v6 = 0;
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_24:
      v19 = CFNumberGetValue(v11, v12, &valuePtr);
      v20 = *(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_28:
      v19 = CFNumberGetValue(v9, v10, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_30:
      v19 = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = valuePtr;
LABEL_31:
      v6 = v20 | 0x100000000;
      if (!v19)
        v6 = 0;
LABEL_33:
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

uint64_t applesauce::CF::convert_as<float,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
    return applesauce::CF::details::number_convert_as<float>(a1);
  else
    return applesauce::CF::details::treat_as_BOOL_for_convert_as<float>(a1);
}

uint64_t applesauce::CF::details::treat_as_BOOL_for_convert_as<float>(const __CFBoolean *a1)
{
  CFTypeID TypeID;
  uint64_t v3;
  uint64_t v4;

  if (a1 && (TypeID = CFBooleanGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    v3 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(a1));
    v4 = 0x100000000;
  }
  else
  {
    v4 = 0;
    v3 = 0;
  }
  return v3 | v4;
}

uint64_t applesauce::CF::details::number_convert_as<float>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  const __CFNumber *v15;
  CFNumberType v16;
  int Value;
  int v18;
  float v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_15;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberSInt64Type;
      goto LABEL_23;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloat32Type;
      goto LABEL_19;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberFloat64Type;
      goto LABEL_25;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v18 = SLOBYTE(valuePtr);
      goto LABEL_13;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_12:
      Value = CFNumberGetValue(v7, v8, &valuePtr);
      v18 = SLOWORD(valuePtr);
LABEL_13:
      v19 = (float)v18;
      goto LABEL_26;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
LABEL_15:
      Value = CFNumberGetValue(v9, v10, &valuePtr);
      v19 = (float)SLODWORD(valuePtr);
      goto LABEL_26;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongType;
      goto LABEL_23;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongLongType;
      goto LABEL_23;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloatType;
LABEL_19:
      Value = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_27;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberDoubleType;
      goto LABEL_25;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberCFIndexType;
      goto LABEL_23;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberNSIntegerType;
LABEL_23:
      Value = CFNumberGetValue(v11, v12, &valuePtr);
      v19 = (float)*(uint64_t *)&valuePtr;
      goto LABEL_26;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberCGFloatType;
LABEL_25:
      Value = CFNumberGetValue(v15, v16, &valuePtr);
      v19 = valuePtr;
LABEL_26:
      v20 = LODWORD(v19);
LABEL_27:
      v6 = v20 | 0x100000000;
      if (!Value)
        v6 = 0;
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

_QWORD *applesauce::CF::details::CFString_get_value<true>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void sub_210571E30(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *std::string::basic_string[abi:ne180100](_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

const void *applesauce::CF::details::at_key<char const* const&>(const __CFDictionary *a1, char **a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, *a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_210571F58(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210571F3CLL);
}

uint64_t IR::FFTFilterTranspose::Implementation::initialize(IR::FFTFilterTranspose::Implementation *this, int a2, int a3, unsigned int a4, int a5, int a6, int a7, char a8, BOOL a9, BOOL a10)
{
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned int v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t i;
  char *v63;
  uint64_t *v64;
  caulk::pooled_semaphore_mutex *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  int v70;
  int v71;

  if (*((_BYTE *)this + 45))
    (*(void (**)(IR::FFTFilterTranspose::Implementation *))(*(_QWORD *)this + 32))(this);
  if (!a2)
  {
    (*(void (**)(IR::FFTFilterTranspose::Implementation *))(*(_QWORD *)this + 40))(this);
    return 4294967246;
  }
  *((_DWORD *)this + 6) = a4;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 8) = a7;
  v18 = a4;
  *((_BYTE *)this + 46) = a8;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 64, a4);
  std::vector<std::vector<float>>::resize((uint64_t *)this + 67, (2 * *((_DWORD *)this + 6)));
  v19 = *((_DWORD *)this + 3);
  if (!v19)
  {
    v20 = *((_DWORD *)this + 2);
LABEL_16:
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 5) = v20;
    *((_DWORD *)this + 3) = 0;
    v28 = *((_QWORD *)this + 64);
    if (*((_QWORD *)this + 65) != v28)
    {
      v29 = 0;
      v30 = 1;
      do
      {
        std::vector<float>::resize(v28 + 24 * v29, (*((_DWORD *)this + 5) + a6));
        v29 = v30;
        v28 = *((_QWORD *)this + 64);
        v27 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 65) - v28) >> 3) > v30++;
      }
      while (v27);
    }
    v31 = *((_QWORD *)this + 67);
    if (*((_QWORD *)this + 68) != v31)
    {
      v32 = 0;
      v33 = 1;
      do
      {
        std::vector<float>::resize(v31 + 24 * v32, (*((_DWORD *)this + 5) + a6));
        v32 = v33;
        v31 = *((_QWORD *)this + 67);
        v27 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 68) - v31) >> 3) > v33++;
      }
      while (v27);
    }
    std::vector<float>::resize((uint64_t)this + 560, (*((_DWORD *)this + 5) + a6));
    goto LABEL_31;
  }
  if (a5)
  {
    v20 = *((_DWORD *)this + 2);
    if (v20 <= v19)
      goto LABEL_16;
  }
  v21 = MultiRadixRealFFT::Size((IR::FFTFilterTranspose::Implementation *)((char *)this + 168));
  v22 = *((_DWORD *)this + 3);
  if (v21 != 2 * v22)
  {
    result = MultiRadixRealFFT::Initialize((IR::FFTFilterTranspose::Implementation *)((char *)this + 168), 2 * v22);
    if ((_DWORD)result)
      return result;
  }
  if (a5)
  {
    *((_DWORD *)this + 5) = *((_DWORD *)this + 3);
    v24 = *((_QWORD *)this + 64);
    if (*((_QWORD *)this + 65) != v24)
    {
      v25 = 0;
      v26 = 1;
      do
      {
        std::vector<float>::resize(v24 + 24 * v25, (*((_DWORD *)this + 5) + a6));
        v25 = v26;
        v24 = *((_QWORD *)this + 64);
        v27 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 65) - v24) >> 3) > v26++;
      }
      while (v27);
    }
  }
  else
  {
    *((_DWORD *)this + 5) = 0;
    v34 = *((_QWORD *)this + 64);
    if (*((_QWORD *)this + 65) != v34)
    {
      v35 = 0;
      v36 = 1;
      do
      {
        std::vector<float>::resize(v34 + 24 * v35, 0);
        v35 = v36;
        v34 = *((_QWORD *)this + 64);
        v27 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 65) - v34) >> 3) > v36++;
      }
      while (v27);
    }
  }
  v37 = *((_QWORD *)this + 67);
  if (*((_QWORD *)this + 68) != v37)
  {
    v38 = 0;
    v39 = 1;
    do
    {
      std::vector<float>::resize(v37 + 24 * v38, (a6 + 2 * *((_DWORD *)this + 3)));
      v38 = v39;
      v37 = *((_QWORD *)this + 67);
      v27 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 68) - v37) >> 3) > v39++;
    }
    while (v27);
  }
  std::vector<float>::resize((uint64_t)this + 560, (a6 + 2 * *((_DWORD *)this + 3)));
  v40 = *((_DWORD *)this + 3);
  v41 = *((_DWORD *)this + 2) - *((_DWORD *)this + 5);
  *((_DWORD *)this + 4) = v41 / v40;
  if (v41 / v40 * v40 < v41)
    *((_DWORD *)this + 4) = v41 / v40 + 1;
LABEL_31:
  if (*((_BYTE *)this + 46))
  {
    v42 = *((_DWORD *)this + 3);
    if (v42)
      *((_DWORD *)this + 8) = v42;
    else
      *((_BYTE *)this + 46) = 0;
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 61, *((unsigned int *)this + 6));
  std::vector<std::vector<float>>::resize((uint64_t *)this + 58, (2 * *((_DWORD *)this + 6)));
  if (*((_DWORD *)this + 6))
  {
    v43 = 0;
    v44 = 0;
    v45 = 1;
    do
    {
      std::vector<float>::resize(*((_QWORD *)this + 61) + v43, (a6 + 2 * *((_DWORD *)this + 3)));
      std::vector<float>::resize(*((_QWORD *)this + 58) + 24 * (v45 - 1), (a6 + 2 * *((_DWORD *)this + 3)));
      std::vector<float>::resize(*((_QWORD *)this + 58) + 24 * v45, (a6 + 2 * *((_DWORD *)this + 3)));
      ++v44;
      v46 = *((unsigned int *)this + 6);
      v43 += 24;
      v45 += 2;
    }
    while (v44 < v46);
    v47 = (2 * v46);
  }
  else
  {
    v47 = 0;
  }
  v48 = (uint64_t *)((char *)this + 208);
  if (*((_DWORD *)this + 3))
  {
    std::vector<std::vector<DSPSplitComplex>>::resize(v48, v47);
    v49 = (4 * *((_DWORD *)this + 6) * *((_DWORD *)this + 3));
    v71 = 0;
    std::vector<float>::resize((uint64_t)this + 184, v49, &v71);
    v50 = *((_QWORD *)this + 26);
    if (*((_QWORD *)this + 27) != v50)
    {
      v51 = 0;
      v52 = 0;
      v53 = 1;
      do
      {
        v54 = 3 * v51;
        std::vector<DSPSplitComplex>::resize(v50 + 24 * v51, 1uLL);
        v55 = *((_QWORD *)this + 23);
        v50 = *((_QWORD *)this + 26);
        v56 = *((_QWORD *)this + 27);
        v57 = *(_QWORD **)(v50 + 8 * v54);
        v58 = *((_DWORD *)this + 3);
        *v57 = v55 + 4 * v52;
        v57[1] = v55 + 4 * (v58 + v52);
        v52 += v58 + v58;
        v51 = v53;
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v56 - v50) >> 3) > v53++;
      }
      while (v27);
    }
  }
  else
  {
    std::vector<std::vector<DSPSplitComplex>>::resize(v48, 0);
    std::vector<float>::resize((uint64_t)this + 184, 0);
  }
  if (*((_BYTE *)this + 46))
  {
    v59 = (4 * *((_DWORD *)this + 3));
    v70 = 0;
    std::vector<float>::resize((uint64_t)this + 240, v59, &v70);
    v60 = *((_QWORD *)this + 30);
    v61 = *((unsigned int *)this + 3);
    *((_QWORD *)this + 35) = v60;
    *((_QWORD *)this + 36) = v60 + 4 * v61;
    *((_QWORD *)this + 37) = v60 + 4 * (2 * v61);
    *((_QWORD *)this + 38) = v60 + 4 * (3 * v61);
  }
  *((_BYTE *)this + 47) = a9;
  if (a9)
  {
    for (i = 0; i != 3; ++i)
    {
      v63 = (char *)this + 32 * i;
      v64 = (uint64_t *)(v63 + 48);
      v65 = (caulk::pooled_semaphore_mutex *)(v63 + 72);
      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v63 + 72));
      std::vector<IR::FFTFilterKernel>::resize(v64, a4);
      if (a4)
      {
        v66 = 0;
        do
        {
          IR::FFTFilterKernel::initialize((IR::FFTFilterKernel *)(*v64 + v66), *((_DWORD *)this + 2), *((_DWORD *)this + 3), a5);
          IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(*v64 + v66));
          v66 += 40;
        }
        while (40 * a4 != v66);
      }
      caulk::pooled_semaphore_mutex::_unlock(v65);
    }
  }
  else
  {
    caulk::pooled_semaphore_mutex::_lock((IR::FFTFilterTranspose::Implementation *)((char *)this + 72));
    std::vector<IR::FFTFilterKernel>::resize((uint64_t *)this + 6, a4);
    if (a4)
    {
      v67 = 0;
      v68 = 40 * v18;
      do
      {
        IR::FFTFilterKernel::initialize((IR::FFTFilterKernel *)(*((_QWORD *)this + 6) + v67), *((_DWORD *)this + 2), *((_DWORD *)this + 3), a5);
        IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(*((_QWORD *)this + 6) + v67));
        v67 += 40;
      }
      while (v68 != v67);
    }
    caulk::pooled_semaphore_mutex::_unlock((IR::FFTFilterTranspose::Implementation *)((char *)this + 72));
  }
  *((_QWORD *)this + 19) = (char *)this + 48;
  *((_QWORD *)this + 20) = (char *)this + 48;
  if (*((_BYTE *)this + 47))
    v69 = (char *)this + 80;
  else
    v69 = (char *)this + 48;
  *((_QWORD *)this + 18) = v69;
  (*(void (**)(IR::FFTFilterTranspose::Implementation *))(*(_QWORD *)this + 40))(this);
  result = 0;
  *((_BYTE *)this + 45) = 1;
  return result;
}

void std::vector<std::vector<float>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<float>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<std::vector<DSPSplitComplex>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<DSPSplitComplex>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3;

  v3 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 4 * a2;
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

void std::vector<DSPSplitComplex>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    std::vector<DSPSplitComplex>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<IR::FFTFilterKernel>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v3 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<IR::FFTFilterKernel>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 40 * a2;
    while (v3 != v7)
      IR::FFTFilterKernel::~FFTFilterKernel((IR::FFTFilterKernel *)(v3 - 40));
    a1[1] = v7;
  }
}

void IR::FFTFilterTranspose::Implementation::uninitialize(IR::FFTFilterTranspose::Implementation *this)
{
  IR::FFTFilter::Implementation::uninitialize(this);
  *((_DWORD *)this + 114) = 0;
  *((_WORD *)this + 230) = 256;
  *((_DWORD *)this + 146) = 0;
  *((_QWORD *)this + 31) = *((_QWORD *)this + 30);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 64);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 61);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 58);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 67);
  *((_QWORD *)this + 71) = *((_QWORD *)this + 70);
}

void IR::FFTFilterTranspose::Implementation::reset(float **this)
{
  float *v2;
  uint64_t v3;
  unsigned int v4;
  BOOL v5;
  float *v6;
  uint64_t v7;
  unsigned int v8;
  float *v9;
  uint64_t v10;
  unsigned int v11;

  IR::FFTFilter::Implementation::reset(this);
  vDSP_vclr(this[30], 1, this[31] - this[30]);
  v2 = this[61];
  if (this[62] != v2)
  {
    v3 = 0;
    v4 = 1;
    do
    {
      vDSP_vclr(*(float **)&v2[6 * v3], 1, (uint64_t)(*(_QWORD *)&v2[6 * v3 + 2] - *(_QWORD *)&v2[6 * v3]) >> 2);
      v3 = v4;
      v2 = this[61];
      v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)this[62] - (char *)v2) >> 3) > v4++;
    }
    while (v5);
  }
  v6 = this[58];
  if (this[59] != v6)
  {
    v7 = 0;
    v8 = 1;
    do
    {
      vDSP_vclr(*(float **)&v6[6 * v7], 1, (uint64_t)(*(_QWORD *)&v6[6 * v7 + 2] - *(_QWORD *)&v6[6 * v7]) >> 2);
      v7 = v8;
      v6 = this[58];
      v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)this[59] - (char *)v6) >> 3) > v8++;
    }
    while (v5);
  }
  v9 = this[64];
  if (this[65] != v9)
  {
    v10 = 0;
    v11 = 1;
    do
    {
      vDSP_vclr(*(float **)&v9[6 * v10], 1, (uint64_t)(*(_QWORD *)&v9[6 * v10 + 2] - *(_QWORD *)&v9[6 * v10]) >> 2);
      v10 = v11;
      v9 = this[64];
      v5 = 0xAAAAAAAAAAAAAAABLL * (((char *)this[65] - (char *)v9) >> 3) > v11++;
    }
    while (v5);
  }
  *((_WORD *)this + 230) = 256;
  *((_DWORD *)this + 146) = 0;
  *((_DWORD *)this + 114) = 0;
}

uint64_t IR::FFTFilterTranspose::Implementation::forwardTransform(IR::FFTFilterTranspose::Implementation *this, DSPSplitComplex *__Z, DSPComplex *__C)
{
  vDSP_Length v5;
  float *v6;
  float *v7;

  v5 = (unint64_t)*((unsigned int *)this + 3) >> 1;
  v6 = &__Z->realp[v5];
  v7 = &__Z->imagp[v5];
  vDSP_ctoz(__C, 2, __Z, 1, v5);
  vDSP_vclr(v6, 1, (unint64_t)*((unsigned int *)this + 3) >> 1);
  vDSP_vclr(v7, 1, (unint64_t)*((unsigned int *)this + 3) >> 1);
  return MultiRadixRealFFT::RealInPlaceTransform((IR::FFTFilterTranspose::Implementation *)((char *)this + 168), __Z, 1, 1.0);
}

void IR::FFTFilterTranspose::Implementation::fftBlockConvolution(uint64_t a1, const DSPSplitComplex *a2, IR::FFTFilterKernel *this, uint64_t *a4, unsigned int a5)
{
  const DSPSplitComplex *FFTSubFilters;
  unsigned int NumActiveFFTSubFilters;
  unint64_t v12;
  uint64_t v13;
  uint64_t ComplexMultiplicationLengths;
  unsigned int *v15;
  uint64_t v16;
  const DSPSplitComplex *v17;
  float v18;
  float v19;
  int v20;

  FFTSubFilters = (const DSPSplitComplex *)IR::FFTFilterKernel::getFFTSubFilters(this);
  NumActiveFFTSubFilters = IR::FFTFilterKernel::getNumActiveFFTSubFilters(this);
  v12 = (unint64_t)(a4[1] - *a4) >> 4;
  if (NumActiveFFTSubFilters >= v12)
    v13 = v12;
  else
    v13 = NumActiveFFTSubFilters;
  ComplexMultiplicationLengths = IR::FFTFilterKernel::getComplexMultiplicationLengths(this);
  if ((_DWORD)v13)
  {
    v15 = (unsigned int *)ComplexMultiplicationLengths;
    v16 = *a4;
    do
    {
      v17 = (const DSPSplitComplex *)(v16 + 16 * a5);
      v18 = *v17->realp;
      v19 = *v17->imagp;
      vDSP_zvma(a2, 1, FFTSubFilters, 1, v17, 1, v17, 1, *v15);
      *v17->realp = v18 + (float)(*a2->realp * *FFTSubFilters->realp);
      v20 = *v15++;
      if (v20 == *(_DWORD *)(a1 + 12))
        *v17->imagp = v19 + (float)(*a2->imagp * *FFTSubFilters->imagp);
      v16 = *a4;
      if (a5 + 1 == ((unint64_t)(a4[1] - *a4) >> 4))
        a5 = 0;
      else
        ++a5;
      ++FFTSubFilters;
      --v13;
    }
    while (v13);
  }
}

_DWORD *IR::FFTFilterTranspose::Implementation::dualFFTBlockConvolution(uint64_t a1, const DSPSplitComplex *a2, const DSPSplitComplex *a3, IR::FFTFilterKernel *this, IR::FFTFilterKernel *a5, uint64_t *a6, unsigned int a7)
{
  const DSPSplitComplex *FFTSubFilters;
  const DSPSplitComplex *v12;
  unsigned int NumActiveFFTSubFilters;
  unint64_t v14;
  uint64_t v15;
  _DWORD *result;
  unint64_t v17;
  _DWORD *ComplexMultiplicationLengths;
  uint64_t v19;
  float **v20;
  vDSP_Length v21;
  float v22;
  float **v23;
  float v24;
  uint64_t *v26;
  _DWORD *v29;
  _DWORD *v30;

  FFTSubFilters = (const DSPSplitComplex *)IR::FFTFilterKernel::getFFTSubFilters(this);
  v12 = (const DSPSplitComplex *)IR::FFTFilterKernel::getFFTSubFilters(a5);
  NumActiveFFTSubFilters = IR::FFTFilterKernel::getNumActiveFFTSubFilters(this);
  v14 = (unint64_t)(a6[1] - *a6) >> 4;
  if (NumActiveFFTSubFilters >= v14)
    v15 = v14;
  else
    v15 = NumActiveFFTSubFilters;
  result = (_DWORD *)IR::FFTFilterKernel::getNumActiveFFTSubFilters(a5);
  v26 = a6;
  v17 = (unint64_t)(a6[1] - *a6) >> 4;
  if (result < v17)
    LODWORD(v17) = (_DWORD)result;
  if ((_DWORD)v15 == (_DWORD)v17)
  {
    ComplexMultiplicationLengths = (_DWORD *)IR::FFTFilterKernel::getComplexMultiplicationLengths(this);
    result = (_DWORD *)IR::FFTFilterKernel::getComplexMultiplicationLengths(a5);
    if ((_DWORD)v15)
    {
      v19 = *v26;
      do
      {
        v20 = (float **)(v19 + 16 * a7);
        v29 = result + 1;
        v30 = ComplexMultiplicationLengths + 1;
        if (*ComplexMultiplicationLengths <= *result)
          v21 = *result;
        else
          v21 = *ComplexMultiplicationLengths;
        v22 = **v20;
        v23 = v20 + 1;
        v24 = *v20[1];
        vDSP_zvmmaa(a2, 1, FFTSubFilters, 1, a3, 1, v12, 1, (const DSPSplitComplex *)(v19 + 16 * a7), 1, (const DSPSplitComplex *)(v19 + 16 * a7), 1, v21);
        **(float **)(v19 + 16 * a7) = v22
                                      + (float)((float)(*a3->realp * *v12->realp)
                                              + (float)(*a2->realp * *FFTSubFilters->realp));
        if ((_DWORD)v21 == *(_DWORD *)(a1 + 12))
          **v23 = v24 + (float)((float)(*a3->imagp * *v12->imagp) + (float)(*a2->imagp * *FFTSubFilters->imagp));
        v19 = *v26;
        if (a7 + 1 == ((unint64_t)(v26[1] - *v26) >> 4))
          a7 = 0;
        else
          ++a7;
        ++FFTSubFilters;
        ++v12;
        --v15;
        result = v29;
        ComplexMultiplicationLengths = v30;
      }
      while (v15);
    }
  }
  return result;
}

void IR::FFTFilterTranspose::Implementation::timeDomainTransposeDualFIR(IR::FFTFilterTranspose::Implementation *this, const float *__B, const float *a3, float *__C, const float *__A, const float *a6, vDSP_Length __N, unsigned int a8)
{
  vDSP_Length v13;
  uint64_t v14;

  if (a8)
  {
    v13 = __N;
    v14 = a8;
    do
    {
      vDSP_vsma(__A, 1, __B, __C, 1, __C, 1, v13);
      vDSP_vsma(a6, 1, a3, __C, 1, __C, 1, v13);
      ++__B;
      ++__C;
      ++a3;
      --v14;
    }
    while (v14);
  }
}

void IR::FFTFilterTranspose::Implementation::firFilterSingleInput(IR::FFTFilterTranspose::Implementation *this, float *const *a2, unsigned int a3, unsigned int a4)
{
  int v8;
  vDSP_Length v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int v14;
  vDSP_Length v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  vDSP_Length v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const float **v26;
  unsigned int v27;
  vDSP_Length v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  vDSP_Length v33;
  char *v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v40;
  const float *v41;
  float *v42;
  const float *v43;
  unsigned int v44;
  unsigned int v45;
  vDSP_Length v46;
  uint64_t v47;
  uint64_t v48;
  vDSP_Length v49;
  size_t v50;
  uint64_t v51;
  void *v52;
  unsigned int v53;
  unsigned int v54;
  uint64_t v55;

  v8 = *((unsigned __int8 *)this + 460);
  if (*((_BYTE *)this + 462))
  {
    v9 = a3;
    v10 = 4 * a3;
    memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * *((unsigned int *)this + 146))+ 4 * *((unsigned int *)this + 5)- 4), (const void *)(**((_QWORD **)this + 58) + 4 * *((unsigned int *)this + 9)), v10);
    if (v8)
    {
      if (a4)
      {
        v11 = 0;
        v12 = 24;
        do
        {
          v13 = (unsigned int *)(**((_QWORD **)this + 19) + v12);
          v14 = *((_DWORD *)this + 5);
          if (*v13 >= v14)
            v15 = v14;
          else
            v15 = *v13;
          vDSP_conv((const float *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * *((unsigned int *)this + 146))+ 4 * (v14 - v15)), 1, (const float *)(*((_QWORD *)v13 - 3) + 4 * v15 - 4), -1, *(float **)(*((_QWORD *)this + 64) + v11), 1, a3, v15);
          v12 += 40;
          v11 += 24;
        }
        while (24 * a4 != v11);
      }
      v16 = *(char **)(*((_QWORD *)this + 67) + 24 * *((unsigned int *)this + 146));
      memmove(v16, &v16[4 * a3], 4 * (*((_DWORD *)this + 5) - 1));
      memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (*((_DWORD *)this + 146) ^ 1u))+ 4 * (*((_DWORD *)this + 5) - 1)), (const void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24) + 4 * *((unsigned int *)this + 9)), 4 * a3);
      if (a4)
      {
        v17 = 0;
        v18 = 24;
        do
        {
          v19 = (unsigned int *)(**((_QWORD **)this + 18) + v18);
          v20 = *((_DWORD *)this + 5);
          if (*v19 >= v20)
            v21 = v20;
          else
            v21 = *v19;
          vDSP_conv((const float *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (*((_DWORD *)this + 146) ^ 1u))+ 4 * (v20 - v21)), 1, (const float *)(*((_QWORD *)v19 - 3) + 4 * v21 - 4), -1, *((float **)this + 70), 1, a3, v21);
          vDSP_vadd(*((const float **)this + 70), 1, *(const float **)(*((_QWORD *)this + 64) + v17), 1, *(float **)(*((_QWORD *)this + 64) + v17), 1, a3);
          v18 += 40;
          v17 += 24;
        }
        while (24 * a4 != v17);
      }
      v22 = *(char **)(*((_QWORD *)this + 67) + 24 * (*((_DWORD *)this + 146) ^ 1u));
      memmove(v22, &v22[4 * a3], 4 * (*((_DWORD *)this + 5) - 1));
      if (!*((_DWORD *)this + 10))
        *((_DWORD *)this + 114) -= a3;
    }
    else
    {
      memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (*((_DWORD *)this + 146) ^ 1u))+ 4 * *((unsigned int *)this + 5)- 4), (const void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24) + 4 * *((unsigned int *)this + 9)), v10);
      if (a4)
      {
        v29 = 0;
        v30 = 24;
        do
        {
          v31 = (unsigned int *)(**((_QWORD **)this + 19) + v30);
          v32 = *((_DWORD *)this + 5);
          if (*v31 >= v32)
            v33 = v32;
          else
            v33 = *v31;
          vDSP_conv((const float *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * *((unsigned int *)this + 146))+ 4 * (v32 - v33)), 1, (const float *)(*((_QWORD *)v31 - 3) + 4 * v33 - 4), -1, *(float **)(*((_QWORD *)this + 64) + v29), 1, v9, v33);
          v30 += 40;
          v29 += 24;
        }
        while (24 * a4 != v29);
      }
      v34 = *(char **)(*((_QWORD *)this + 67) + 24 * *((unsigned int *)this + 146));
      memmove(v34, &v34[4 * v9], 4 * (*((_DWORD *)this + 5) - 1));
      v35 = *(char **)(*((_QWORD *)this + 67) + 24 * (*((_DWORD *)this + 146) ^ 1u));
      memmove(v35, &v35[4 * v9], 4 * (*((_DWORD *)this + 5) - 1));
    }
    if (a4)
    {
      v36 = 0;
      do
      {
        v37 = *a2++;
        memcpy(v37, *(const void **)(*((_QWORD *)this + 64) + v36), v10);
        v36 += 24;
      }
      while (24 * a4 != v36);
    }
  }
  else
  {
    if (*((_BYTE *)this + 460))
    {
      if (a4)
      {
        v23 = 0;
        v24 = 24;
        v25 = 24 * a4;
        do
        {
          v26 = (const float **)(**((_QWORD **)this + 19) + v24);
          v27 = *((_DWORD *)this + 5);
          if (*(_DWORD *)v26 >= v27)
            v28 = v27;
          else
            v28 = *(unsigned int *)v26;
          IR::FFTFilterTranspose::Implementation::timeDomainTransposeDualFIR(this, (const float *)(**((_QWORD **)this + 58) + 4 * *((unsigned int *)this + 9)), (const float *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24) + 4 * *((unsigned int *)this + 9)), *(float **)(*((_QWORD *)this + 64) + v23), *(v26 - 3), *(const float **)(**((_QWORD **)this + 18) + v24 - 24), v28, a3);
          v24 += 40;
          v23 += 24;
        }
        while (v25 != v23);
      }
      v54 = a4;
      if (!*((_DWORD *)this + 10))
        *((_DWORD *)this + 114) -= a3;
    }
    else
    {
      if (!a4)
        return;
      v38 = 0;
      v55 = a3;
      v54 = a4;
      do
      {
        if (a3)
        {
          v40 = **((_QWORD **)this + 19);
          v41 = (const float *)(**((_QWORD **)this + 58) + 4 * *((unsigned int *)this + 9));
          v42 = *(float **)(*((_QWORD *)this + 64) + 24 * v38);
          v43 = *(const float **)(v40 + 40 * v38);
          v44 = *(_DWORD *)(v40 + 40 * v38 + 24);
          v45 = *((_DWORD *)this + 5);
          if (v44 >= v45)
            v46 = v45;
          else
            v46 = v44;
          v47 = v55;
          do
          {
            vDSP_vsma(v43, 1, v41, v42, 1, v42, 1, v46);
            ++v42;
            ++v41;
            --v47;
          }
          while (v47);
        }
        ++v38;
      }
      while (v38 != a4);
    }
    if (v54)
    {
      v48 = 0;
      v49 = a3;
      v50 = 4 * a3;
      v51 = 24;
      do
      {
        v52 = *a2++;
        memcpy(v52, *(const void **)(*((_QWORD *)this + 64) + v48), v50);
        if (*(_DWORD *)(**((_QWORD **)this + 19) + v51) >= *((_DWORD *)this + 5))
          v53 = *((_DWORD *)this + 5);
        else
          v53 = *(_DWORD *)(**((_QWORD **)this + 19) + v51);
        memmove(*(void **)(*((_QWORD *)this + 64) + v48), (const void *)(*(_QWORD *)(*((_QWORD *)this + 64) + v48) + 4 * v49), 4 * v53);
        vDSP_vclr((float *)(*(_QWORD *)(*((_QWORD *)this + 64) + v48) + 4 * v53), 1, v49);
        v48 += 24;
        v51 += 40;
      }
      while (24 * v54 != v48);
    }
  }
}

void IR::FFTFilterTranspose::Implementation::firFilterMultipleInput(IR::FFTFilterTranspose::Implementation *this, float *const *a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  vDSP_Length v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  vDSP_Length v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  const float **v27;
  unsigned int v28;
  vDSP_Length v29;
  unsigned int v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  vDSP_Length v35;
  unsigned int *v36;
  unsigned int v37;
  vDSP_Length v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const float *v47;
  float *v48;
  const float *v49;
  unsigned int v50;
  unsigned int v51;
  vDSP_Length v52;
  uint64_t v53;
  uint64_t v54;
  vDSP_Length v55;
  size_t v56;
  uint64_t v57;
  void *v58;
  unsigned int v59;
  unsigned int v61;

  v4 = a4;
  v5 = a3;
  if (*((_BYTE *)this + 462))
  {
    if (*((_BYTE *)this + 460))
    {
      if (a4)
      {
        v8 = 0;
        v9 = 0;
        v10 = 0;
        v11 = 4 * a3;
        v12 = 2 * a4;
        do
        {
          memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (v8 + *((_DWORD *)this + 146)))+ 4 * (*((_DWORD *)this + 5) - 1)), (const void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24 * v8)+ 4 * *((unsigned int *)this + 9)), v11);
          v13 = **((_QWORD **)this + 19) + v10;
          v14 = *(_DWORD *)(v13 + 24);
          v15 = *((_DWORD *)this + 5);
          if (v14 >= v15)
            v16 = v15;
          else
            v16 = v14;
          vDSP_conv((const float *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (v8 + *((_DWORD *)this + 146)))+ 4 * (v15 - v16)), 1, (const float *)(*(_QWORD *)v13 + 4 * v16 - 4), -1, *(float **)(*((_QWORD *)this + 64) + v9), 1, a3, v16);
          v17 = *(char **)(*((_QWORD *)this + 67) + 24 * (v8 + *((_DWORD *)this + 146)));
          memmove(v17, &v17[4 * a3], 4 * (*((_DWORD *)this + 5) - 1));
          memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (v8 + (*((_DWORD *)this + 146) ^ 1)))+ 4 * (*((_DWORD *)this + 5) - 1)), (const void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24 * (v8 + 1))+ 4 * *((unsigned int *)this + 9)), v11);
          v18 = **((_QWORD **)this + 18) + v10;
          v19 = *(_DWORD *)(v18 + 24);
          v20 = *((_DWORD *)this + 5);
          if (v19 >= v20)
            v21 = v20;
          else
            v21 = v19;
          vDSP_conv((const float *)(*(_QWORD *)(*((_QWORD *)this + 67)+ 24 * (v8 + (*((_DWORD *)this + 146) ^ 1)))+ 4 * (v20 - v21)), 1, (const float *)(*(_QWORD *)v18 + 4 * v16 - 4), -1, *((float **)this + 70), 1, a3, v21);
          vDSP_vadd(*((const float **)this + 70), 1, *(const float **)(*((_QWORD *)this + 64) + v9), 1, *(float **)(*((_QWORD *)this + 64) + v9), 1, a3);
          v22 = *(char **)(*((_QWORD *)this + 67) + 24 * (v8 + (*((_DWORD *)this + 146) ^ 1)));
          memmove(v22, &v22[4 * a3], 4 * (*((_DWORD *)this + 5) - 1));
          v10 += 40;
          v9 += 24;
          v8 += 2;
        }
        while (v12 != v8);
      }
      v4 = a4;
      if (!*((_DWORD *)this + 10))
        *((_DWORD *)this + 114) -= a3;
    }
    else
    {
      if (!a4)
        return;
      v30 = 0;
      v31 = 0;
      v32 = 4 * a3;
      v33 = 24 * a4;
      v34 = 24;
      v35 = a3;
      do
      {
        memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (v30 + *((_DWORD *)this + 146)))+ 4 * (*((_DWORD *)this + 5) - 1)), (const void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24 * v30) + 4 * *((unsigned int *)this + 9)), v32);
        memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (v30 + (*((_DWORD *)this + 146) ^ 1)))+ 4 * (*((_DWORD *)this + 5) - 1)), (const void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24 * (v30 + 1)) + 4 * *((unsigned int *)this + 9)), v32);
        v36 = (unsigned int *)(**((_QWORD **)this + 19) + v34);
        v37 = *((_DWORD *)this + 5);
        if (*v36 >= v37)
          v38 = v37;
        else
          v38 = *v36;
        vDSP_conv((const float *)(*(_QWORD *)(*((_QWORD *)this + 67) + 24 * (v30 + *((_DWORD *)this + 146)))+ 4 * (v37 - v38)), 1, (const float *)(*((_QWORD *)v36 - 3) + 4 * v38 - 4), -1, *(float **)(*((_QWORD *)this + 64) + v31), 1, v35, v38);
        v39 = *(char **)(*((_QWORD *)this + 67) + 24 * (v30 + *((_DWORD *)this + 146)));
        memmove(v39, &v39[4 * v35], 4 * (*((_DWORD *)this + 5) - 1));
        v40 = *(char **)(*((_QWORD *)this + 67) + 24 * (v30 + (*((_DWORD *)this + 146) ^ 1)));
        memmove(v40, &v40[4 * v35], 4 * (*((_DWORD *)this + 5) - 1));
        v34 += 40;
        v31 += 24;
        v30 += 2;
      }
      while (v33 != v31);
    }
    if (v4)
    {
      v41 = 0;
      do
      {
        v42 = *a2++;
        memcpy(v42, *(const void **)(*((_QWORD *)this + 64) + v41), 4 * a3);
        v41 += 24;
      }
      while (24 * v4 != v41);
    }
  }
  else
  {
    if (*((_BYTE *)this + 460))
    {
      if (a4)
      {
        v23 = 0;
        v24 = 24 * a4;
        v25 = 1;
        v26 = 24;
        do
        {
          v27 = (const float **)(**((_QWORD **)this + 19) + v26);
          v28 = *((_DWORD *)this + 5);
          if (*(_DWORD *)v27 >= v28)
            v29 = v28;
          else
            v29 = *(unsigned int *)v27;
          IR::FFTFilterTranspose::Implementation::timeDomainTransposeDualFIR(this, (const float *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24 * (v25 - 1)) + 4 * *((unsigned int *)this + 9)), (const float *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24 * v25) + 4 * *((unsigned int *)this + 9)), *(float **)(*((_QWORD *)this + 64) + v23), *(v27 - 3), *(const float **)(**((_QWORD **)this + 18) + v26 - 24), v29, v5);
          v26 += 40;
          v23 += 24;
          v25 += 2;
        }
        while (v24 != v23);
      }
      v61 = v4;
      if (!*((_DWORD *)this + 10))
        *((_DWORD *)this + 114) -= v5;
    }
    else
    {
      if (!a4)
        return;
      v43 = 0;
      v44 = a3;
      v61 = a4;
      v45 = a4;
      do
      {
        if (v5)
        {
          v46 = **((_QWORD **)this + 19);
          v47 = (const float *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24 * (2 * v43))
                              + 4 * *((unsigned int *)this + 9));
          v48 = *(float **)(*((_QWORD *)this + 64) + 24 * v43);
          v49 = *(const float **)(v46 + 40 * v43);
          v50 = *(_DWORD *)(v46 + 40 * v43 + 24);
          v51 = *((_DWORD *)this + 5);
          if (v50 >= v51)
            v52 = v51;
          else
            v52 = v50;
          v53 = v44;
          do
          {
            vDSP_vsma(v49, 1, v47, v48, 1, v48, 1, v52);
            ++v48;
            ++v47;
            --v53;
          }
          while (v53);
        }
        ++v43;
        v5 = a3;
      }
      while (v43 != v45);
    }
    if (v61)
    {
      v54 = 0;
      v55 = v5;
      v56 = 4 * v5;
      v57 = 24;
      do
      {
        v58 = *a2++;
        memcpy(v58, *(const void **)(*((_QWORD *)this + 64) + v54), v56);
        if (*(_DWORD *)(**((_QWORD **)this + 19) + v57) >= *((_DWORD *)this + 5))
          v59 = *((_DWORD *)this + 5);
        else
          v59 = *(_DWORD *)(**((_QWORD **)this + 19) + v57);
        memmove(*(void **)(*((_QWORD *)this + 64) + v54), (const void *)(*(_QWORD *)(*((_QWORD *)this + 64) + v54) + 4 * v55), 4 * v59);
        vDSP_vclr((float *)(*(_QWORD *)(*((_QWORD *)this + 64) + v54) + 4 * v59), 1, v55);
        v54 += 24;
        v57 += 40;
      }
      while (24 * v61 != v54);
    }
  }
}

uint64_t IR::FFTFilterTranspose::Implementation::processMultipleInputs(IR::FFTFilterTranspose::Implementation *this, float *const *a2, float *const *a3, uint64_t a4, unsigned int a5, unsigned int a6, IR::ComplexDataCircBuffer::Implementation **a7)
{
  uint64_t v7;
  IR::FFTFilterTranspose::Implementation *v9;
  int v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  size_t v29;
  unsigned int v30;
  vDSP_Length v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  unsigned int v39;
  vDSP_Length v40;
  float v41;
  unint64_t v42;
  float v43;
  unsigned int v44;
  const float *v45;
  unint64_t v46;
  unsigned int v47;
  int v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  float *v52;
  _QWORD *v53;
  _QWORD *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  const DSPSplitComplex *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  unsigned int v64;
  const DSPSplitComplex *v65;
  const DSPSplitComplex *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *FFTBufferVec;
  uint64_t v76;
  int v77;
  unint64_t v78;
  const DSPSplitComplex *v79;
  uint64_t v80;
  uint64_t *v81;
  int NumFFTBuffers;
  unsigned int v83;
  unsigned int v84;
  float v85;
  vDSP_Length v86;
  unint64_t v87;
  float v88;
  unsigned int v89;
  const float *v90;
  unint64_t v91;
  unsigned int v92;
  uint64_t v93;
  unsigned int v94;
  const DSPSplitComplex *v95;
  const DSPSplitComplex *v96;
  vDSP_Length v97;
  size_t v98;
  uint64_t v99;
  IR::ComplexDataCircBuffer::Implementation **v100;
  unsigned int CircularIndex;
  unint64_t v102;
  _QWORD *v103;
  float __Start;
  float __Step;
  uint64_t v106;
  char v107;
  uint64_t v108;

  v108 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 45))
    return 4294956429;
  v7 = a4;
  if ((_DWORD)a4)
  {
    if (!a6)
      return 4294967246;
    v9 = this;
    if (*((_DWORD *)this + 6) != a6 || a6 > a5)
      return 4294967246;
    if (*((_DWORD *)this + 2))
    {
      if (*((_BYTE *)this + 44))
      {
        if (caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)this + 20) + 24)))
          *((_QWORD *)v9 + 19) = *((_QWORD *)v9 + 20);
        v106 = 0;
        v107 = 0;
        *((_BYTE *)v9 + 44) = 0;
        this = (IR::FFTFilterTranspose::Implementation *)std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v106);
      }
      v14 = *((_DWORD *)v9 + 4);
      v99 = v7;
      v94 = a6;
      if (v14)
      {
        v93 = (uint64_t)&v93;
        MEMORY[0x24BDAC7A8](this);
        v16 = (char *)&v93 - ((v15 + 15) & 0xFFFFFFFF0);
        if (v15 >= 0x200)
          v17 = 512;
        else
          v17 = v15;
        bzero((char *)&v93 - ((v15 + 15) & 0xFFFFFFFF0), v17);
        v18 = *((unsigned int *)v9 + 6);
        v19 = 8 * v18;
        MEMORY[0x24BDAC7A8](v20);
        if ((unint64_t)(8 * v18) >= 0x200)
          v21 = 512;
        else
          v21 = 8 * v18;
        bzero((char *)&v93 - ((v19 + 15) & 0xFFFFFFFF0), v21);
        if ((_DWORD)v18)
        {
          memcpy(v16, a2, 8 * v18);
          memcpy((char *)&v93 - ((v19 + 15) & 0xFFFFFFFF0), a3, 8 * v18);
        }
        v102 = (unint64_t)&v93 - ((v19 + 15) & 0xFFFFFFFF0);
        v103 = v16;
        if (!a7)
          return 4294967246;
        v100 = a7;
        if (IR::ComplexDataCircBuffer::getNumOutputChannels((IR::ComplexDataCircBuffer *)a7) != *((_DWORD *)v9 + 6)
          || IR::ComplexDataCircBuffer::getNumFFTBuffers((IR::ComplexDataCircBuffer *)v100) < *((_DWORD *)v9 + 4))
        {
          return 4294967246;
        }
        CircularIndex = IR::ComplexDataCircBuffer::getCircularIndex((IR::ComplexDataCircBuffer *)v100);
        *((_DWORD *)v9 + 9) = IR::ComplexDataCircBuffer::getFFTProcPos((IR::ComplexDataCircBuffer *)v100);
        v95 = (const DSPSplitComplex *)((char *)v9 + 296);
        v96 = (const DSPSplitComplex *)((char *)v9 + 280);
        v28 = v99;
        v29 = (size_t)v103;
        while (1)
        {
          v30 = *((_DWORD *)v9 + 3) - *((_DWORD *)v9 + 9);
          v99 = v28;
          if (v30 >= v28)
            v31 = v28;
          else
            v31 = v30;
          if (*((_BYTE *)v9 + 46) && *((_DWORD *)v9 + 6))
          {
            v32 = 0;
            v33 = 0;
            do
            {
              memcpy((void *)(*(_QWORD *)(*((_QWORD *)v9 + 61) + v32) + 4 * *((unsigned int *)v9 + 9)), *(const void **)(v29 + 8 * v33++), 4 * v31);
              v32 += 24;
            }
            while (v33 < *((unsigned int *)v9 + 6));
          }
          if (*((_BYTE *)v9 + 47))
          {
            v34 = *((_QWORD *)v9 + 20);
            if (v34 != *((_QWORD *)v9 + 19) && !*((_BYTE *)v9 + 460) && !*((_DWORD *)v9 + 9))
            {
              v106 = v34 + 24;
              v35 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v34 + 24));
              v107 = v35;
              v29 = (size_t)v103;
              if (v35)
              {
                v36 = *((_QWORD *)v9 + 19);
                v37 = *((_QWORD *)v9 + 20);
                if (v37 != v36)
                {
                  *((_QWORD *)v9 + 18) = v36;
                  *((_QWORD *)v9 + 19) = v37;
                  v106 = 0;
                  v107 = 0;
                  v38 = *((_DWORD *)v9 + 8);
                  if (v38)
                  {
                    *((_DWORD *)v9 + 10) = v38;
                    *((_DWORD *)v9 + 146) ^= 1u;
                  }
                  else
                  {
                    caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v36 + 24));
                  }
                }
              }
              std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v106);
            }
          }
          v39 = *((_DWORD *)v9 + 10);
          if (v39)
          {
            if (v31 >= v39)
              v40 = v39;
            else
              v40 = v31;
            if (*((_DWORD *)v9 + 5) || !*((_BYTE *)v9 + 46))
            {
              v41 = (float)*((unsigned int *)v9 + 8);
              *(float *)&v106 = -1.0 / v41;
              __Step = -(float)(-1.0 / v41);
              if (*((_DWORD *)v9 + 6))
              {
                v42 = 0;
                v43 = (float)v39 / v41;
                v97 = (v31 - v40);
                v98 = 4 * v97;
                v44 = 1;
                do
                {
                  __Start = 1.0 - v43;
                  v45 = *(const float **)(v29 + 8 * v42);
                  vDSP_vrampmul(v45, 1, &__Start, &__Step, (float *)(*(_QWORD *)(*((_QWORD *)v9 + 58) + 24 * (v44 - 1)) + 4 * *((unsigned int *)v9 + 9)), 1, v40);
                  if (v31 > v39)
                    memcpy((void *)(*(_QWORD *)(*((_QWORD *)v9 + 58) + 24 * (v44 - 1))+ 4 * *((unsigned int *)v9 + 9)+ 4 * v40), &v45[v40], v98);
                  __Start = v43;
                  vDSP_vrampmul(v45, 1, &__Start, (const float *)&v106, (float *)(*(_QWORD *)(*((_QWORD *)v9 + 58) + 24 * v44) + 4 * *((unsigned int *)v9 + 9)), 1, v40);
                  if (v31 > v39)
                    vDSP_vclr((float *)(*(_QWORD *)(*((_QWORD *)v9 + 58) + 24 * v44)+ 4 * *((unsigned int *)v9 + 9)+ 4 * v40), 1, v97);
                  ++v42;
                  v44 += 2;
                  v29 = (size_t)v103;
                }
                while (v42 < *((unsigned int *)v9 + 6));
                v39 = *((_DWORD *)v9 + 10);
              }
            }
            *((_DWORD *)v9 + 10) = v39 - v40;
            if (v39 == (_DWORD)v40)
            {
              v48 = v31;
              if (*((_BYTE *)v9 + 462))
              {
                v49 = *((_DWORD *)v9 + 5);
                if (v49 >= *((_DWORD *)v9 + 3))
                  v49 = *((_DWORD *)v9 + 3);
                v48 = v49 + v40;
              }
              *((_DWORD *)v9 + 114) = v48;
              *((_BYTE *)v9 + 461) = 0;
            }
            *((_BYTE *)v9 + 460) = 1;
          }
          else
          {
            if (!*((_DWORD *)v9 + 5) && *((_BYTE *)v9 + 46))
              goto LABEL_81;
            if (*((_DWORD *)v9 + 6))
            {
              v46 = 0;
              v47 = 1;
              do
              {
                memcpy((void *)(*(_QWORD *)(*((_QWORD *)v9 + 58) + 24 * (v47 - 1)) + 4 * *((unsigned int *)v9 + 9)), *(const void **)(v29 + 8 * v46), 4 * v31);
                vDSP_vclr((float *)(*(_QWORD *)(*((_QWORD *)v9 + 58) + 24 * v47) + 4 * *((unsigned int *)v9 + 9)), 1, v31);
                ++v46;
                v47 += 2;
                v29 = (size_t)v103;
              }
              while (v46 < *((unsigned int *)v9 + 6));
            }
          }
          if (*((_DWORD *)v9 + 5))
          {
            IR::FFTFilterTranspose::Implementation::firFilterMultipleInput(v9, (float *const *)v102, v31, v94);
            v50 = *((unsigned int *)v9 + 6);
            goto LABEL_86;
          }
LABEL_81:
          if (!*((_DWORD *)v9 + 6))
          {
            LOBYTE(v50) = 1;
            goto LABEL_92;
          }
          v51 = 0;
          do
          {
            v52 = *(float **)(v102 + 8 * v51);
            vDSP_vclr(v52, 1, v31);
            if ((_DWORD)v31)
              *v52 = 0.00000011921;
            ++v51;
            v50 = *((unsigned int *)v9 + 6);
          }
          while (v51 < v50);
LABEL_86:
          if (v50)
          {
            v53 = (_QWORD *)v102;
            v29 = (size_t)v103;
            v54 = v103;
            do
            {
              *v54++ += 4 * v31;
              *v53++ += 4 * v31;
              --v50;
            }
            while (v50);
          }
          else
          {
            LOBYTE(v50) = 1;
            v29 = (size_t)v103;
          }
LABEL_92:
          v55 = *((_DWORD *)v9 + 9) + v31;
          *((_DWORD *)v9 + 9) = v55;
          if (v55 >= *((_DWORD *)v9 + 3))
          {
            if (*((_BYTE *)v9 + 46))
            {
              if (*((_BYTE *)v9 + 460) && !*((_BYTE *)v9 + 461))
              {
                if ((v50 & 1) == 0)
                {
                  v70 = 0;
                  v71 = 0;
                  v72 = 0;
                  do
                  {
                    IR::FFTFilterTranspose::Implementation::forwardTransform(v9, *(DSPSplitComplex **)(*((_QWORD *)v9 + 26) + v71), *(DSPComplex **)(*((_QWORD *)v9 + 61) + v71));
                    (*(void (**)(IR::FFTFilterTranspose::Implementation *, _QWORD, const DSPSplitComplex *, _QWORD, float))(*(_QWORD *)v9 + 112))(v9, *(_QWORD *)(*((_QWORD *)v9 + 26) + v71), v96, *((unsigned int *)v9 + 3), 0.5);
                    (*(void (**)(IR::FFTFilterTranspose::Implementation *, _QWORD, const DSPSplitComplex *, _QWORD, float))(*(_QWORD *)v9 + 112))(v9, *(_QWORD *)(*((_QWORD *)v9 + 26) + v71), v95, *((unsigned int *)v9 + 3), -0.5);
                    v73 = **((_QWORD **)v9 + 18);
                    v74 = **((_QWORD **)v9 + 19);
                    FFTBufferVec = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec(v100, v72);
                    IR::FFTFilterTranspose::Implementation::dualFFTBlockConvolution((uint64_t)v9, v96, v95, (IR::FFTFilterKernel *)(v73 + v70), (IR::FFTFilterKernel *)(v74 + v70), FFTBufferVec, CircularIndex);
                    ++v72;
                    v71 += 24;
                    v70 += 40;
                  }
                  while (v72 < *((unsigned int *)v9 + 6));
                }
                if (!*((_DWORD *)v9 + 10) && !*((_DWORD *)v9 + 5))
                  *((_DWORD *)v9 + 114) -= *((_DWORD *)v9 + 3);
                *((_BYTE *)v9 + 461) = 1;
              }
              else if ((v50 & 1) == 0)
              {
                v56 = 0;
                v57 = 0;
                v58 = 0;
                do
                {
                  IR::FFTFilterTranspose::Implementation::forwardTransform(v9, *(DSPSplitComplex **)(*((_QWORD *)v9 + 26) + v57), *(DSPComplex **)(*((_QWORD *)v9 + 61) + v57));
                  v59 = *(const DSPSplitComplex **)(*((_QWORD *)v9 + 26) + v57);
                  v60 = **((_QWORD **)v9 + 19);
                  v61 = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec(v100, v58);
                  IR::FFTFilterTranspose::Implementation::fftBlockConvolution((uint64_t)v9, v59, (IR::FFTFilterKernel *)(v60 + v56), v61, CircularIndex);
                  ++v58;
                  v57 += 24;
                  v56 += 40;
                }
                while (v58 < *((unsigned int *)v9 + 6));
              }
            }
            else if (*((_BYTE *)v9 + 460))
            {
              if ((v50 & 1) == 0)
              {
                v62 = 0;
                v63 = 0;
                v64 = 1;
                do
                {
                  IR::FFTFilterTranspose::Implementation::forwardTransform(v9, *(DSPSplitComplex **)(*((_QWORD *)v9 + 26) + 24 * (v64 - 1)), *(DSPComplex **)(*((_QWORD *)v9 + 58) + 24 * (v64 - 1)));
                  IR::FFTFilterTranspose::Implementation::forwardTransform(v9, *(DSPSplitComplex **)(*((_QWORD *)v9 + 26) + 24 * v64), *(DSPComplex **)(*((_QWORD *)v9 + 58) + 24 * v64));
                  v65 = *(const DSPSplitComplex **)(*((_QWORD *)v9 + 26) + 24 * v64);
                  v66 = *(const DSPSplitComplex **)(*((_QWORD *)v9 + 26) + 24 * (v64 - 1));
                  v67 = **((_QWORD **)v9 + 18);
                  v68 = **((_QWORD **)v9 + 19);
                  v69 = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec(v100, v63);
                  IR::FFTFilterTranspose::Implementation::dualFFTBlockConvolution((uint64_t)v9, v65, v66, (IR::FFTFilterKernel *)(v67 + v62), (IR::FFTFilterKernel *)(v68 + v62), v69, CircularIndex);
                  ++v63;
                  v62 += 40;
                  v64 += 2;
                }
                while (v63 < *((unsigned int *)v9 + 6));
              }
              if (!*((_DWORD *)v9 + 10) && !*((_DWORD *)v9 + 5))
                *((_DWORD *)v9 + 114) -= *((_DWORD *)v9 + 3);
            }
            else if ((v50 & 1) == 0)
            {
              v76 = 0;
              v77 = 0;
              v78 = 0;
              do
              {
                IR::FFTFilterTranspose::Implementation::forwardTransform(v9, *(DSPSplitComplex **)(*((_QWORD *)v9 + 26) + 24 * (v77 & 0xFFFFFFFE)), *(DSPComplex **)(*((_QWORD *)v9 + 58) + 24 * (v77 & 0xFFFFFFFE)));
                v79 = *(const DSPSplitComplex **)(*((_QWORD *)v9 + 26) + 24 * (v77 & 0xFFFFFFFE));
                v80 = **((_QWORD **)v9 + 19);
                v81 = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec(v100, v78);
                IR::FFTFilterTranspose::Implementation::fftBlockConvolution((uint64_t)v9, v79, (IR::FFTFilterKernel *)(v80 + v76), v81, CircularIndex);
                ++v78;
                v77 += 2;
                v76 += 40;
              }
              while (v78 < *((unsigned int *)v9 + 6));
            }
            NumFFTBuffers = IR::ComplexDataCircBuffer::getNumFFTBuffers((IR::ComplexDataCircBuffer *)v100);
            v83 = CircularIndex + 1;
            if (CircularIndex + 1 == NumFFTBuffers)
              v83 = 0;
            CircularIndex = v83;
            *((_DWORD *)v9 + 9) = 0;
            if (*((_BYTE *)v9 + 460))
            {
              v29 = (size_t)v103;
              if (*((_DWORD *)v9 + 10) || *((int *)v9 + 114) > 0)
                goto LABEL_124;
              *((_BYTE *)v9 + 460) = 0;
              caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)v9 + 18) + 24));
            }
            v29 = (size_t)v103;
          }
LABEL_124:
          v28 = (v99 - v31);
          if (!(_DWORD)v28)
            return 0;
        }
      }
      if (*((_BYTE *)v9 + 47))
      {
        v23 = *((_QWORD *)v9 + 20);
        if (v23 != *((_QWORD *)v9 + 19) && !*((_BYTE *)v9 + 460))
        {
          v106 = v23 + 24;
          v24 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v23 + 24));
          v107 = v24;
          LODWORD(v7) = v99;
          if (v24)
          {
            v25 = *((_QWORD *)v9 + 19);
            v26 = *((_QWORD *)v9 + 20);
            if (v26 != v25)
            {
              *((_QWORD *)v9 + 18) = v25;
              *((_QWORD *)v9 + 19) = v26;
              v106 = 0;
              v107 = 0;
              v27 = *((_DWORD *)v9 + 8);
              if (v27)
              {
                *((_DWORD *)v9 + 10) = v27;
                *((_DWORD *)v9 + 146) ^= 1u;
              }
              else
              {
                caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v25 + 24));
              }
            }
          }
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v106);
        }
      }
      v84 = *((_DWORD *)v9 + 10);
      if (v84)
      {
        v85 = (float)*((unsigned int *)v9 + 8);
        *(float *)&v106 = -1.0 / v85;
        __Step = -(float)(-1.0 / v85);
        if (v84 >= v7)
          v86 = v7;
        else
          v86 = v84;
        if (*((_DWORD *)v9 + 6))
        {
          v87 = 0;
          v88 = (float)v84 / v85;
          v102 = (v7 - v86);
          v103 = (_QWORD *)(4 * v102);
          v89 = 1;
          do
          {
            v90 = a2[v87];
            __Start = 1.0 - v88;
            vDSP_vrampmul(v90, 1, &__Start, &__Step, *(float **)(*((_QWORD *)v9 + 58) + 24 * (v89 - 1)), 1, v86);
            if (v84 < v99)
              memcpy((void *)(*(_QWORD *)(*((_QWORD *)v9 + 58) + 24 * (v89 - 1)) + 4 * v86), &a2[v87][v86], (size_t)v103);
            __Start = v88;
            vDSP_vrampmul(a2[v87], 1, &__Start, (const float *)&v106, *(float **)(*((_QWORD *)v9 + 58) + 24 * v89), 1, v86);
            if (v84 < v99)
              vDSP_vclr((float *)(*(_QWORD *)(*((_QWORD *)v9 + 58) + 24 * v89) + 4 * v86), 1, v102);
            ++v87;
            v89 += 2;
          }
          while (v87 < *((unsigned int *)v9 + 6));
          v84 = *((_DWORD *)v9 + 10);
        }
        *((_DWORD *)v9 + 10) = v84 - v86;
        if (v84 == (_DWORD)v86)
        {
          if (*((_BYTE *)v9 + 462))
            LODWORD(v86) = *((_DWORD *)v9 + 5) + v86;
          *((_DWORD *)v9 + 114) = v86;
        }
        *((_BYTE *)v9 + 460) = 1;
      }
      else if (*((_DWORD *)v9 + 6))
      {
        v91 = 0;
        v92 = 1;
        do
        {
          memcpy(*(void **)(*((_QWORD *)v9 + 58) + 24 * (v92 - 1)), a2[v91], 4 * v99);
          vDSP_vclr(*(float **)(*((_QWORD *)v9 + 58) + 24 * v92), 1, v99);
          ++v91;
          v92 += 2;
        }
        while (v91 < *((unsigned int *)v9 + 6));
      }
      IR::FFTFilterTranspose::Implementation::firFilterMultipleInput(v9, a3, v99, v94);
      if (*((_BYTE *)v9 + 460) && !*((_DWORD *)v9 + 10) && *((int *)v9 + 114) <= 0)
      {
        *((_BYTE *)v9 + 460) = 0;
        caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)v9 + 18) + 24));
      }
      return 0;
    }
    return 4294956429;
  }
  return 0;
}

void sub_210574530(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v1 - 144);
  _Unwind_Resume(a1);
}

uint64_t IR::FFTFilterTranspose::Implementation::process(IR::FFTFilterTranspose::Implementation *this, const float *__I, float *const *a3, unsigned int a4, unsigned int a5, IR::ComplexDataCircBuffer *a6)
{
  unsigned int v6;
  IR::FFTFilterTranspose::Implementation *v8;
  unint64_t v12;
  char *v13;
  size_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int CircularIndex;
  uint64_t v23;
  unsigned int v24;
  vDSP_Length v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  vDSP_Length v33;
  float v34;
  float v35;
  const float *v36;
  int v37;
  unsigned int v38;
  unint64_t v39;
  unint64_t v40;
  float *const *v41;
  unsigned int v42;
  uint64_t v43;
  unint64_t v44;
  const DSPSplitComplex *v45;
  uint64_t v46;
  uint64_t *v47;
  DSPSplitComplex **v48;
  uint64_t v49;
  unint64_t v50;
  const DSPSplitComplex *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  const DSPSplitComplex *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *FFTBufferVec;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  const DSPSplitComplex *v69;
  uint64_t v70;
  uint64_t *v71;
  unsigned int v72;
  unsigned int v73;
  float v74;
  float v75;
  vDSP_Length v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  unsigned int v80;
  const DSPSplitComplex *v81;
  const DSPSplitComplex *v82;
  const float *v83;
  float *const *v84;
  float __Start;
  float __Step;
  uint64_t v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 45))
    return 4294956429;
  v6 = a4;
  if (a4)
  {
    if (!a5)
      return 4294967246;
    v8 = this;
    if (*((_DWORD *)this + 6) != a5)
      return 4294967246;
    if (*((_DWORD *)this + 2))
    {
      if (*((_BYTE *)this + 44))
      {
        if (caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)this + 20) + 24)))
          *((_QWORD *)v8 + 19) = *((_QWORD *)v8 + 20);
        v87 = 0;
        v88 = 0;
        *((_BYTE *)v8 + 44) = 0;
        this = (IR::FFTFilterTranspose::Implementation *)std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v87);
      }
      if (*((_DWORD *)v8 + 4))
      {
        v80 = a5;
        v79 = (uint64_t)&v79;
        MEMORY[0x24BDAC7A8](this);
        v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFF0);
        if (v12 >= 0x200)
          v14 = 512;
        else
          v14 = v12;
        bzero((char *)&v79 - ((v12 + 15) & 0xFFFFFFFF0), v14);
        v15 = *((unsigned int *)v8 + 6);
        if ((_DWORD)v15)
          memcpy(v13, a3, 8 * v15);
        v84 = (float *const *)v13;
        if (!a6
          || IR::ComplexDataCircBuffer::getNumOutputChannels(a6) != *((_DWORD *)v8 + 6)
          || IR::ComplexDataCircBuffer::getNumFFTBuffers(a6) < *((_DWORD *)v8 + 4))
        {
          return 4294967246;
        }
        CircularIndex = IR::ComplexDataCircBuffer::getCircularIndex(a6);
        *((_DWORD *)v8 + 9) = IR::ComplexDataCircBuffer::getFFTProcPos(a6);
        v81 = (const DSPSplitComplex *)((char *)v8 + 296);
        v82 = (const DSPSplitComplex *)((char *)v8 + 280);
        while (1)
        {
          v23 = *((unsigned int *)v8 + 9);
          v24 = *((_DWORD *)v8 + 3) - v23;
          if (v24 >= v6)
            v25 = v6;
          else
            v25 = v24;
          if (*((_BYTE *)v8 + 46))
            memcpy((void *)(**((_QWORD **)v8 + 61) + 4 * v23), __I, 4 * v25);
          v26 = *((unsigned __int8 *)v8 + 47);
          v83 = __I;
          if (v26)
          {
            v27 = *((_QWORD *)v8 + 20);
            if (v27 != *((_QWORD *)v8 + 19) && !*((_BYTE *)v8 + 460) && !*((_DWORD *)v8 + 9))
            {
              v87 = v27 + 24;
              v28 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v27 + 24));
              v88 = v28;
              __I = v83;
              if (v28)
              {
                v29 = *((_QWORD *)v8 + 19);
                v30 = *((_QWORD *)v8 + 20);
                if (v30 != v29)
                {
                  *((_QWORD *)v8 + 18) = v29;
                  *((_QWORD *)v8 + 19) = v30;
                  v87 = 0;
                  v88 = 0;
                  v31 = *((_DWORD *)v8 + 8);
                  if (v31)
                  {
                    *((_DWORD *)v8 + 10) = v31;
                    *((_DWORD *)v8 + 146) ^= 1u;
                  }
                  else
                  {
                    caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v29 + 24));
                  }
                }
              }
              std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v87);
            }
          }
          v32 = *((_DWORD *)v8 + 10);
          if (v32)
          {
            if (v25 >= v32)
              v33 = v32;
            else
              v33 = v25;
            if (*((_DWORD *)v8 + 5) || !*((_BYTE *)v8 + 46))
            {
              v34 = (float)*((unsigned int *)v8 + 8);
              v35 = (float)v32 / v34;
              __Step = -(float)(-1.0 / v34);
              *(float *)&v87 = -1.0 / v34;
              __Start = 1.0 - v35;
              vDSP_vrampmul(__I, 1, &__Start, &__Step, (float *)(**((_QWORD **)v8 + 58) + 4 * *((unsigned int *)v8 + 9)), 1, v33);
              if (v25 <= v32)
              {
                __Start = v35;
                vDSP_vrampmul(v83, 1, &__Start, (const float *)&v87, (float *)(*(_QWORD *)(*((_QWORD *)v8 + 58) + 24) + 4 * *((unsigned int *)v8 + 9)), 1, v33);
              }
              else
              {
                v36 = v83;
                memcpy((void *)(**((_QWORD **)v8 + 58) + 4 * *((unsigned int *)v8 + 9) + 4 * v33), &v83[v33], 4 * (v25 - v33));
                __Start = v35;
                vDSP_vrampmul(v36, 1, &__Start, (const float *)&v87, (float *)(*(_QWORD *)(*((_QWORD *)v8 + 58) + 24) + 4 * *((unsigned int *)v8 + 9)), 1, v33);
                vDSP_vclr((float *)(*(_QWORD *)(*((_QWORD *)v8 + 58) + 24) + 4 * *((unsigned int *)v8 + 9) + 4 * v33), 1, (v25 - v33));
              }
              v32 = *((_DWORD *)v8 + 10);
              __I = v83;
            }
            *((_DWORD *)v8 + 10) = v32 - v33;
            if (v32 == (_DWORD)v33)
            {
              v37 = v25;
              if (*((_BYTE *)v8 + 462))
              {
                v38 = *((_DWORD *)v8 + 3);
                if (v38 >= *((_DWORD *)v8 + 5))
                  v38 = *((_DWORD *)v8 + 5);
                v37 = v38 + v33;
              }
              *((_DWORD *)v8 + 114) = v37;
              *((_BYTE *)v8 + 461) = 0;
            }
            *((_BYTE *)v8 + 460) = 1;
          }
          else
          {
            if (!*((_DWORD *)v8 + 5) && *((_BYTE *)v8 + 46))
              goto LABEL_66;
            memcpy((void *)(**((_QWORD **)v8 + 58) + 4 * *((unsigned int *)v8 + 9)), __I, 4 * v25);
            vDSP_vclr((float *)(*(_QWORD *)(*((_QWORD *)v8 + 58) + 24) + 4 * *((unsigned int *)v8 + 9)), 1, v25);
            __I = v83;
          }
          if (*((_DWORD *)v8 + 5))
          {
            IR::FFTFilterTranspose::Implementation::firFilterSingleInput(v8, v84, v25, v80);
            v39 = *((unsigned int *)v8 + 6);
            goto LABEL_69;
          }
LABEL_66:
          if (*((_DWORD *)v8 + 6))
          {
            v40 = 0;
            do
            {
              vDSP_vclr(v84[v40++], 1, v25);
              v39 = *((unsigned int *)v8 + 6);
            }
            while (v40 < v39);
LABEL_69:
            __I = &v83[v25];
            if (v39)
            {
              v41 = v84;
              do
              {
                *v41++ += v25;
                --v39;
              }
              while (v39);
            }
            goto LABEL_74;
          }
          __I += v25;
LABEL_74:
          v42 = *((_DWORD *)v8 + 9) + v25;
          *((_DWORD *)v8 + 9) = v42;
          if (v42 >= *((_DWORD *)v8 + 3))
          {
            if (*((_BYTE *)v8 + 46))
            {
              if (*((_BYTE *)v8 + 460) && !*((_BYTE *)v8 + 461))
              {
                IR::FFTFilterTranspose::Implementation::forwardTransform(v8, **((DSPSplitComplex ***)v8 + 26), **((DSPComplex ***)v8 + 61));
                (*(void (**)(IR::FFTFilterTranspose::Implementation *, _QWORD, const DSPSplitComplex *, _QWORD, float))(*(_QWORD *)v8 + 112))(v8, **((_QWORD **)v8 + 26), v82, *((unsigned int *)v8 + 3), 0.5);
                if (*((_DWORD *)v8 + 6))
                {
                  v59 = 0;
                  v60 = 0;
                  do
                  {
                    v61 = **((_QWORD **)v8 + 18);
                    FFTBufferVec = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec((IR::ComplexDataCircBuffer::Implementation **)a6, v60);
                    IR::FFTFilterTranspose::Implementation::fftBlockConvolution((uint64_t)v8, v82, (IR::FFTFilterKernel *)(v61 + v59), FFTBufferVec, CircularIndex);
                    ++v60;
                    v59 += 40;
                  }
                  while (v60 < *((unsigned int *)v8 + 6));
                }
                (*(void (**)(IR::FFTFilterTranspose::Implementation *, _QWORD, const DSPSplitComplex *, _QWORD, float))(*(_QWORD *)v8 + 112))(v8, **((_QWORD **)v8 + 26), v81, *((unsigned int *)v8 + 3), -0.5);
                if (*((_DWORD *)v8 + 6))
                {
                  v63 = 0;
                  v64 = 0;
                  do
                  {
                    v65 = **((_QWORD **)v8 + 19);
                    v66 = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec((IR::ComplexDataCircBuffer::Implementation **)a6, v64);
                    IR::FFTFilterTranspose::Implementation::fftBlockConvolution((uint64_t)v8, v81, (IR::FFTFilterKernel *)(v65 + v63), v66, CircularIndex);
                    ++v64;
                    v63 += 40;
                  }
                  while (v64 < *((unsigned int *)v8 + 6));
                }
                if (!*((_DWORD *)v8 + 10) && !*((_DWORD *)v8 + 5))
                  *((_DWORD *)v8 + 114) -= *((_DWORD *)v8 + 3);
                *((_BYTE *)v8 + 461) = 1;
              }
              else
              {
                IR::FFTFilterTranspose::Implementation::forwardTransform(v8, **((DSPSplitComplex ***)v8 + 26), **((DSPComplex ***)v8 + 61));
                if (*((_DWORD *)v8 + 6))
                {
                  v43 = 0;
                  v44 = 0;
                  do
                  {
                    v45 = (const DSPSplitComplex *)**((_QWORD **)v8 + 26);
                    v46 = **((_QWORD **)v8 + 19);
                    v47 = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec((IR::ComplexDataCircBuffer::Implementation **)a6, v44);
                    IR::FFTFilterTranspose::Implementation::fftBlockConvolution((uint64_t)v8, v45, (IR::FFTFilterKernel *)(v46 + v43), v47, CircularIndex);
                    ++v44;
                    v43 += 40;
                  }
                  while (v44 < *((unsigned int *)v8 + 6));
                }
              }
            }
            else
            {
              v48 = (DSPSplitComplex **)*((_QWORD *)v8 + 26);
              if (*((_BYTE *)v8 + 460))
              {
                IR::FFTFilterTranspose::Implementation::forwardTransform(v8, v48[3], *(DSPComplex **)(*((_QWORD *)v8 + 58) + 24));
                if (*((_DWORD *)v8 + 6))
                {
                  v49 = 0;
                  v50 = 0;
                  do
                  {
                    v51 = *(const DSPSplitComplex **)(*((_QWORD *)v8 + 26) + 24);
                    v52 = **((_QWORD **)v8 + 18);
                    v53 = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec((IR::ComplexDataCircBuffer::Implementation **)a6, v50);
                    IR::FFTFilterTranspose::Implementation::fftBlockConvolution((uint64_t)v8, v51, (IR::FFTFilterKernel *)(v52 + v49), v53, CircularIndex);
                    ++v50;
                    v49 += 40;
                  }
                  while (v50 < *((unsigned int *)v8 + 6));
                }
                IR::FFTFilterTranspose::Implementation::forwardTransform(v8, **((DSPSplitComplex ***)v8 + 26), **((DSPComplex ***)v8 + 58));
                if (*((_DWORD *)v8 + 6))
                {
                  v54 = 0;
                  v55 = 0;
                  do
                  {
                    v56 = (const DSPSplitComplex *)**((_QWORD **)v8 + 26);
                    v57 = **((_QWORD **)v8 + 19);
                    v58 = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec((IR::ComplexDataCircBuffer::Implementation **)a6, v55);
                    IR::FFTFilterTranspose::Implementation::fftBlockConvolution((uint64_t)v8, v56, (IR::FFTFilterKernel *)(v57 + v54), v58, CircularIndex);
                    ++v55;
                    v54 += 40;
                  }
                  while (v55 < *((unsigned int *)v8 + 6));
                }
                if (!*((_DWORD *)v8 + 10) && !*((_DWORD *)v8 + 5))
                  *((_DWORD *)v8 + 114) -= *((_DWORD *)v8 + 3);
              }
              else
              {
                IR::FFTFilterTranspose::Implementation::forwardTransform(v8, *v48, **((DSPComplex ***)v8 + 58));
                if (*((_DWORD *)v8 + 6))
                {
                  v67 = 0;
                  v68 = 0;
                  do
                  {
                    v69 = (const DSPSplitComplex *)**((_QWORD **)v8 + 26);
                    v70 = **((_QWORD **)v8 + 19);
                    v71 = (uint64_t *)IR::ComplexDataCircBuffer::getFFTBufferVec((IR::ComplexDataCircBuffer::Implementation **)a6, v68);
                    IR::FFTFilterTranspose::Implementation::fftBlockConvolution((uint64_t)v8, v69, (IR::FFTFilterKernel *)(v70 + v67), v71, CircularIndex);
                    ++v68;
                    v67 += 40;
                  }
                  while (v68 < *((unsigned int *)v8 + 6));
                }
              }
            }
            if (CircularIndex + 1 == IR::ComplexDataCircBuffer::getNumFFTBuffers(a6))
              CircularIndex = 0;
            else
              ++CircularIndex;
            *((_DWORD *)v8 + 9) = 0;
            if (*((_BYTE *)v8 + 460) && !*((_DWORD *)v8 + 10) && *((int *)v8 + 114) <= 0)
            {
              *((_BYTE *)v8 + 460) = 0;
              caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)v8 + 18) + 24));
            }
          }
          v6 -= v25;
          if (!v6)
            return 0;
        }
      }
      if (*((_BYTE *)v8 + 47))
      {
        v17 = *((_QWORD *)v8 + 20);
        if (v17 != *((_QWORD *)v8 + 19) && !*((_BYTE *)v8 + 460))
        {
          v87 = v17 + 24;
          v18 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v17 + 24));
          v88 = v18;
          if (v18)
          {
            v19 = *((_QWORD *)v8 + 19);
            v20 = *((_QWORD *)v8 + 20);
            if (v20 != v19)
            {
              *((_QWORD *)v8 + 18) = v19;
              *((_QWORD *)v8 + 19) = v20;
              v87 = 0;
              v88 = 0;
              v21 = *((_DWORD *)v8 + 8);
              if (v21)
              {
                *((_DWORD *)v8 + 10) = v21;
                *((_DWORD *)v8 + 146) ^= 1u;
              }
              else
              {
                caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v19 + 24));
              }
            }
          }
          std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v87);
        }
      }
      v72 = a5;
      v73 = *((_DWORD *)v8 + 10);
      if (v73)
      {
        v74 = (float)*((unsigned int *)v8 + 8);
        v75 = (float)v73 / v74;
        __Step = -(float)(-1.0 / v74);
        *(float *)&v87 = -1.0 / v74;
        if (v73 >= v6)
          v76 = v6;
        else
          v76 = v73;
        __Start = 1.0 - v75;
        vDSP_vrampmul(__I, 1, &__Start, &__Step, **((float ***)v8 + 58), 1, v76);
        if (v73 >= v6)
        {
          __Start = v75;
          vDSP_vrampmul(__I, 1, &__Start, (const float *)&v87, *(float **)(*((_QWORD *)v8 + 58) + 24), 1, v76);
        }
        else
        {
          memcpy((void *)(**((_QWORD **)v8 + 58) + 4 * v76), &__I[v76], 4 * (v6 - v76));
          __Start = v75;
          vDSP_vrampmul(__I, 1, &__Start, (const float *)&v87, *(float **)(*((_QWORD *)v8 + 58) + 24), 1, v76);
          vDSP_vclr((float *)(*(_QWORD *)(*((_QWORD *)v8 + 58) + 24) + 4 * v76), 1, v6 - v76);
        }
        v78 = *((_DWORD *)v8 + 10) - v76;
        *((_DWORD *)v8 + 10) = v78;
        v77 = v72;
        if (!v78)
        {
          if (*((_BYTE *)v8 + 462))
            LODWORD(v76) = *((_DWORD *)v8 + 5) + v76;
          *((_DWORD *)v8 + 114) = v76;
        }
        *((_BYTE *)v8 + 460) = 1;
      }
      else
      {
        memcpy(**((void ***)v8 + 58), __I, 4 * v6);
        vDSP_vclr(*(float **)(*((_QWORD *)v8 + 58) + 24), 1, v6);
        v77 = v72;
      }
      IR::FFTFilterTranspose::Implementation::firFilterSingleInput(v8, a3, v6, v77);
      if (*((_BYTE *)v8 + 460) && !*((_DWORD *)v8 + 10) && *((int *)v8 + 114) <= 0)
      {
        *((_BYTE *)v8 + 460) = 0;
        caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)v8 + 18) + 24));
      }
      return 0;
    }
    return 4294956429;
  }
  return 0;
}

void sub_210574FD0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](v1 - 136);
  _Unwind_Resume(a1);
}

IR::FFTFilterTranspose *IR::FFTFilterTranspose::FFTFilterTranspose(IR::FFTFilterTranspose *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = operator new();
  v3 = v2 + 48;
  bzero((void *)(v2 + 48), 0x220uLL);
  v4 = 0;
  *(_QWORD *)v2 = &off_24CA2C570;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_DWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 44) = 16777217;
  do
  {
    v5 = (_QWORD *)(v2 + v4);
    v5[6] = 0;
    v5[7] = 0;
    v5[8] = 0;
    caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v2 + v4 + 72));
    v4 += 32;
  }
  while (v4 != 96);
  *(_QWORD *)(v2 + 144) = v3;
  *(_QWORD *)(v2 + 152) = v3;
  *(_QWORD *)(v2 + 160) = v3;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_QWORD *)v2 = &off_24CA2C4C0;
  *(_DWORD *)(v2 + 456) = 0;
  *(_WORD *)(v2 + 460) = 256;
  *(_BYTE *)(v2 + 462) = 0;
  *(_OWORD *)(v2 + 464) = 0u;
  *(_OWORD *)(v2 + 480) = 0u;
  *(_OWORD *)(v2 + 496) = 0u;
  *(_OWORD *)(v2 + 512) = 0u;
  *(_OWORD *)(v2 + 528) = 0u;
  *(_OWORD *)(v2 + 544) = 0u;
  *(_OWORD *)(v2 + 560) = 0u;
  *(_OWORD *)(v2 + 572) = 0u;
  v8 = v2;
  IR::FFTFilter::FFTFilter(this, &v8);
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  *(_QWORD *)this = &off_24CA2C548;
  return this;
}

void sub_210575144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a9)
    (*(void (**)(uint64_t))(*(_QWORD *)a9 + 8))(a9);
  _Unwind_Resume(exception_object);
}

void IR::FFTFilterTranspose::~FFTFilterTranspose(IR::FFTFilterTranspose *this)
{
  IR::FFTFilter::~FFTFilter(this);
  JUMPOUT(0x212BC7928);
}

void IR::FFTFilterTranspose::Implementation::~Implementation(IR::FFTFilterTranspose::Implementation *this)
{
  IR::FFTFilterTranspose::Implementation::~Implementation(this);
  JUMPOUT(0x212BC7928);
}

{
  void *v2;
  void **v3;

  *(_QWORD *)this = &off_24CA2C4C0;
  v2 = (void *)*((_QWORD *)this + 70);
  if (v2)
  {
    *((_QWORD *)this + 71) = v2;
    operator delete(v2);
  }
  v3 = (void **)((char *)this + 536);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 512);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 488);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  v3 = (void **)((char *)this + 464);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
  IR::FFTFilter::Implementation::~Implementation(this);
}

__n128 IR::FFTFilter::Implementation::getConfigParams@<Q0>(IR::FFTFilter::Implementation *this@<X0>, uint64_t a2@<X8>)
{
  __n128 result;

  *(_OWORD *)a2 = *(_OWORD *)((char *)this + 8);
  result = *(__n128 *)((char *)this + 20);
  *(__n128 *)(a2 + 12) = result;
  return result;
}

void std::vector<std::vector<float>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_210575374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t std::__split_buffer<std::vector<float>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<float>>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = v5 - v8;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(4 * a2);
}

void std::vector<std::vector<DSPSplitComplex>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<DSPSplitComplex>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_210575884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<DSPSplitComplex>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DSPSplitComplex>>,std::reverse_iterator<std::vector<DSPSplitComplex>*>,std::reverse_iterator<std::vector<DSPSplitComplex>*>,std::reverse_iterator<std::vector<DSPSplitComplex>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<DSPSplitComplex>>,std::reverse_iterator<std::vector<DSPSplitComplex>*>,std::reverse_iterator<std::vector<DSPSplitComplex>*>,std::reverse_iterator<std::vector<DSPSplitComplex>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DSPSplitComplex>>,std::reverse_iterator<std::vector<DSPSplitComplex>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<DSPSplitComplex>>,std::reverse_iterator<std::vector<DSPSplitComplex>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _DWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  _DWORD *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *i;
  int v25;

  v8 = a1[2];
  v6 = (uint64_t)(a1 + 2);
  v7 = v8;
  v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (_BYTE *)v9) >> 2)
  {
    if (a2)
    {
      v16 = 4 * a2;
      v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    v10 = (char *)v9 - (_BYTE *)*a1;
    v11 = a2 + (v10 >> 2);
    if (v11 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v12 = v10 >> 2;
    v13 = v7 - (_BYTE *)*a1;
    if (v13 >> 1 > v11)
      v11 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v11;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v6, v14);
    else
      v15 = 0;
    v18 = &v15[4 * v12];
    v19 = &v18[4 * a2];
    v20 = 4 * a2;
    v21 = v18;
    do
    {
      *(_DWORD *)v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    v22 = &v15[4 * v14];
    v23 = (char *)*a1;
    for (i = (char *)a1[1]; i != v23; i -= 4)
    {
      v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
      operator delete(v23);
  }
}

void std::vector<DSPSplitComplex>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DSPSplitComplex>>(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<DSPSplitComplex>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a2);
}

uint64_t std::vector<IR::FFTFilterKernel>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  uint64_t v20;
  char *v21;
  uint64_t v22;

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = v7 + 40 * a2;
      v14 = 40 * a2;
      do
      {
        result = IR::FFTFilterKernel::FFTFilterKernel(v7);
        v7 += 40;
        v14 -= 40;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0x666666666666666)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x333333333333333)
      v11 = 0x666666666666666;
    else
      v11 = v9;
    v22 = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::FFTFilterKernel>>(result, v11);
    else
      v12 = 0;
    v15 = (uint64_t)&v12[40 * v8];
    v19[0] = v12;
    v19[1] = v15;
    v20 = v15;
    v21 = &v12[40 * v11];
    v16 = 5 * a2;
    v17 = v15 + 40 * a2;
    v18 = 8 * v16;
    do
    {
      IR::FFTFilterKernel::FFTFilterKernel(v15);
      v15 += 40;
      v18 -= 40;
    }
    while (v18);
    v20 = v17;
    std::vector<IR::FFTFilterKernel>::__swap_out_circular_buffer(a1, v19);
    return std::__split_buffer<IR::FFTFilterKernel>::~__split_buffer((uint64_t)v19);
  }
  return result;
}

void sub_210575D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<IR::FFTFilterKernel>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<IR::FFTFilterKernel>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<IR::FFTFilterKernel>,std::reverse_iterator<IR::FFTFilterKernel*>,std::reverse_iterator<IR::FFTFilterKernel*>,std::reverse_iterator<IR::FFTFilterKernel*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IR::FFTFilterKernel>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(40 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<IR::FFTFilterKernel>,std::reverse_iterator<IR::FFTFilterKernel*>,std::reverse_iterator<IR::FFTFilterKernel*>,std::reverse_iterator<IR::FFTFilterKernel*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  IR::FFTFilterKernel *v12;

  v10 = 0;
  v11 = a7 - 40;
  while (a3 + v10 != a5)
  {
    v12 = (IR::FFTFilterKernel *)(v11 + v10);
    v10 -= 40;
    IR::FFTFilterKernel::FFTFilterKernel(v12, (const IR::FFTFilterKernel *)(v10 + a3));
  }
  return a6;
}

uint64_t std::__split_buffer<IR::FFTFilterKernel>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 40;
    IR::FFTFilterKernel::~FFTFilterKernel((IR::FFTFilterKernel *)(i - 40));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::vector<float>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void IR::FFTFilter::Implementation::~Implementation(IR::FFTFilter::Implementation *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  uint64_t i;
  void **v8;

  *(_QWORD *)this = &off_24CA2C570;
  v2 = (void *)*((_QWORD *)this + 54);
  if (v2)
  {
    *((_QWORD *)this + 55) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 51);
  if (v3)
  {
    *((_QWORD *)this + 52) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 48);
  if (v4)
  {
    *((_QWORD *)this + 49) = v4;
    operator delete(v4);
  }
  v8 = (void **)((char *)this + 360);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 336);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v8 = (void **)((char *)this + 312);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v5 = (void *)*((_QWORD *)this + 30);
  if (v5)
  {
    *((_QWORD *)this + 31) = v5;
    operator delete(v5);
  }
  v8 = (void **)((char *)this + 208);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)this + 168);
  for (i = 112; i != 16; i -= 32)
  {
    v8 = (void **)((char *)this + i);
    std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
}

{
  IR::FFTFilter::Implementation::~Implementation(this);
  JUMPOUT(0x212BC7928);
}

void std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

uint64_t std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        IR::FFTFilterKernel::~FFTFilterKernel((IR::FFTFilterKernel *)(v4 - 40));
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    caulk::pooled_semaphore_mutex::_unlock(*(caulk::pooled_semaphore_mutex **)a1);
  return a1;
}

uint64_t IR::getIRDataLog(IR *this)
{
  if (IR::getIRDataLog(void)::onceToken != -1)
    dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
  return IR::getIRDataLog(void)::gLog;
}

os_log_t ___ZN2IR12getIRDataLogEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "IRData");
  IR::getIRDataLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t IR::IRData::Implementation::getFileByteSize(FILE **a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x212BC7BB0](*a1);
  fseek(*a1, 0, 2);
  v3 = MEMORY[0x212BC7BB0](*a1);
  fseek(*a1, v2, 0);
  return v3;
}

void IR::IRData::Implementation::readIRPlist(FILE **a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t FileByteSize;
  size_t v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  CFDataRef v17;
  const void *v18;
  int v19;
  NSObject *v20;
  void *exception;
  CFDataRef v22;
  const void *v23;
  UInt8 *bytes[3];
  unsigned int __ptr;
  CFTypeRef v26;

  FileByteSize = IR::IRData::Implementation::getFileByteSize(a1);
  v26 = 0;
  *a2 = 0;
  __ptr = 0;
  if (fread(&__ptr, 4uLL, 1uLL, *a1) != 1)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v8 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::readIRPlist(v8, v9, v10, v11, v12, v13, v14, v15);
    goto LABEL_11;
  }
  v7 = __ptr;
  if (FileByteSize - 4 < (unint64_t)__ptr)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::readIRPlist();
LABEL_11:
    *a3 = 0;
    return;
  }
  std::vector<unsigned char>::vector(bytes, __ptr);
  v16 = fread(bytes[0], 1uLL, v7, *a1);
  if (v16 == v7)
  {
    v17 = CFDataCreate(0, bytes[0], v7);
    if (!v17)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v22, v17);
    applesauce::CF::make_DictionaryRef(&v22, (applesauce::CF::DictionaryRef *)&v23);
    v18 = v23;
    v26 = v23;
    v23 = 0;
    if (v22)
      CFRelease(v22);
    *a3 = v18;
  }
  else
  {
    v19 = v16;
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v20 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::readIRPlist(v19, v7, v20);
    *a3 = 0;
  }
  v26 = 0;
  if (bytes[0])
  {
    bytes[1] = bytes[0];
    operator delete(bytes[0]);
  }
  if (v26)
    CFRelease(v26);
}

void sub_210576540(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _QWORD *v10;
  void *v11;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  __cxa_free_exception(v11);
  __cxa_begin_catch(a1);
  if (IR::getIRDataLog(void)::onceToken != -1)
    dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
  v13 = IR::getIRDataLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
    IR::IRData::Implementation::readIRPlist(v13, v14, v15, v16, v17, v18, v19, v20);
  *v10 = 0;
  __cxa_end_catch();
  JUMPOUT(0x210576484);
}

void sub_2105765E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  JUMPOUT(0x21057656CLL);
}

applesauce::CF::DictionaryRef *applesauce::CF::make_DictionaryRef@<X0>(CFDataRef *a1@<X0>, applesauce::CF::DictionaryRef *a2@<X8>)
{
  CFPropertyListRef v3;
  const void *v4;
  CFTypeID v5;
  applesauce::CF *exception;

  if (!*a1)
    goto LABEL_7;
  v3 = CFPropertyListCreateWithData(0, *a1, 0, 0, 0);
  v4 = v3;
  if (!v3)
  {
    if (!CFDictionaryGetTypeID())
      return applesauce::CF::DictionaryRef::DictionaryRef(a2, v4);
LABEL_7:
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  v5 = CFGetTypeID(v3);
  if (v5 != CFDictionaryGetTypeID())
  {
    CFRelease(v4);
    goto LABEL_7;
  }
  return applesauce::CF::DictionaryRef::DictionaryRef(a2, v4);
}

void sub_210576688()
{
  void *v0;

}

void sub_2105766A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::~DataRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void IR::IRData::Implementation::extractIRDataTypePlist(const __CFDictionary **a1@<X0>, int a2@<W1>, _DWORD *a3@<X2>, applesauce::CF::DictionaryRef *a4@<X8>)
{
  const __CFDictionary *v6;
  const __CFArray *v9;
  CFIndex Count;
  CFIndex v11;
  CFArrayRef v12;
  CFIndex v13;
  unint64_t v14;
  const __CFDictionary *v15;
  const __CFDictionary *v16;
  void *exception;
  void *v18;
  CFTypeRef cf;
  const __CFString *v20;
  CFArrayRef theArray;

  v6 = *a1;
  if (!a2 || !v6)
  {
    *(_QWORD *)a4 = v6;
    *a1 = 0;
    return;
  }
  cf = 0;
  v20 = CFSTR("ImpulseResponses");
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(v6, (const void **)&v20, &cf, &theArray);
  if (cf)
    CFRelease(cf);
  v9 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v11 = Count;
    v12 = theArray;
    if (theArray)
    {
      v13 = CFArrayGetCount(theArray);
      if (!v11)
        goto LABEL_20;
    }
    else
    {
      v13 = 0;
      if (!Count)
        goto LABEL_20;
    }
    v14 = 0;
    while (v9 != v12 || v13 != v14)
    {
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v9, v14, a4);
      v15 = *(const __CFDictionary **)a4;
      if (!*(_QWORD *)a4)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](exception, "Could not construct");
      }
      v20 = CFSTR("Type");
      LODWORD(cf) = 0;
      if (applesauce::CF::at_or<unsigned int,__CFString const*>(v15, (const void **)&v20, (unsigned int *)&cf) == a2)goto LABEL_21;
      v16 = *(const __CFDictionary **)a4;
      if (!*(_QWORD *)a4)
      {
        v18 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](v18, "Could not construct");
      }
      v20 = CFSTR("DataLengthBytes");
      LODWORD(cf) = 0;
      *a3 += applesauce::CF::at_or<unsigned int,__CFString const*>(v16, (const void **)&v20, (unsigned int *)&cf);
      if (*(_QWORD *)a4)
        CFRelease(*(CFTypeRef *)a4);
      if (v11 == ++v14)
        break;
    }
  }
LABEL_20:
  *(_QWORD *)a4 = 0;
LABEL_21:
  if (theArray)
    CFRelease(theArray);
}

void sub_2105768D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12)
{
  const void **v12;

  applesauce::CF::DictionaryRef::~DictionaryRef(v12);
  applesauce::CF::ArrayRef::~ArrayRef(&a12);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::DictionaryRef::operator->(_QWORD *result)
{
  applesauce::CF *exception;

  if (!*result)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_210576948()
{
  void *v0;

}

void sub_210576960(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::readIRPlist(CFTypeRef *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, CFTypeRef *a4@<X8>)
{
  CFTypeRef v7;
  CFTypeRef v8;
  FILE *v9;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef cf;
  FILE *v13[2];

  v7 = *a1;
  if (*a1)
    CFRetain(*a1);
  cf = v7;
  IR::getFilePtr((const __CFURL **)&cf, 1, v13);
  if (cf)
    CFRelease(cf);
  if (v13[0])
  {
    IR::IRData::Implementation::readIRPlist(v13, a2, a4);
    v8 = *a4;
    if (*a4)
      CFRetain(*a4);
    v10 = v8;
    IR::IRData::Implementation::extractIRDataTypePlist((const __CFDictionary **)&v10, a3, a2, (applesauce::CF::DictionaryRef *)&v11);
    *a4 = v11;
    v11 = v8;
    if (v8)
      CFRelease(v8);
    if (v10)
      CFRelease(v10);
    v9 = v13[0];
    v13[0] = 0;
    if (v9)
      ((void (*)(void))v13[1])();
  }
  else
  {
    *a4 = 0;
  }
}

void sub_210576A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(void))
{
  const void **v14;
  uint64_t v16;

  applesauce::CF::DictionaryRef::~DictionaryRef(&a10);
  applesauce::CF::DictionaryRef::~DictionaryRef(v14);
  v16 = a13;
  a13 = 0;
  if (v16)
    a14();
  _Unwind_Resume(a1);
}

void applesauce::CF::URLRef::~URLRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void IR::IRData::Implementation::readIRPlist(IR::IRData::Implementation *this@<X0>, CFTypeRef *a2@<X8>)
{
  CFTypeRef v5;
  CFTypeRef v6;
  int v7;

  v7 = 0;
  v5 = *(CFTypeRef *)this;
  if (*(_QWORD *)this)
    CFRetain(*(CFTypeRef *)this);
  v6 = v5;
  IR::IRData::Implementation::readIRPlist(&v6, &v7, *((_DWORD *)this + 10), a2);
  if (v5)
    CFRelease(v5);
}

void sub_210576B5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::URLRef::~URLRef(&a9);
  _Unwind_Resume(a1);
}

void IR::IRData::~IRData(IR::IRData::Implementation **this)
{
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](this, 0);
}

uint64_t IR::IRData::Implementation::Implementation(uint64_t a1, int a2, int a3, char a4, int a5, int a6, int a7, uint64_t a8, float a9, float a10, uint64_t a11, uint64_t a12, int a13, const void **a14, const void **a15)
{
  const void **v19;
  const void *v20;
  const void *v21;
  const void *v22;
  const void *v23;
  const void **v25;

  *(float *)a1 = a9;
  *(float *)(a1 + 4) = a9;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 16) = a3;
  *(float *)(a1 + 20) = a10;
  *(_BYTE *)(a1 + 24) = a4;
  *(_DWORD *)(a1 + 28) = a5;
  *(_DWORD *)(a1 + 32) = a6;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = a7;
  *(_DWORD *)(a1 + 76) = a7;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  std::vector<IR::IRCoordinateType>::__init_with_size[abi:ne180100]<IR::IRCoordinateType*,IR::IRCoordinateType*>((_QWORD *)(a1 + 80), *(const void **)a8, *(_QWORD *)(a8 + 8), (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 2);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 128), *(const void **)a11, *(_QWORD *)(a11 + 8), (uint64_t)(*(_QWORD *)(a11 + 8) - *(_QWORD *)a11) >> 2);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  std::vector<IR::IRInterpolationMethod>::__init_with_size[abi:ne180100]<IR::IRInterpolationMethod*,IR::IRInterpolationMethod*>((_QWORD *)(a1 + 200), *(const void **)a12, *(_QWORD *)(a12 + 8), (uint64_t)(*(_QWORD *)(a12 + 8) - *(_QWORD *)a12) >> 2);
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)(a1 + 224));
  v25 = (const void **)(a1 + 288);
  v19 = (const void **)(a1 + 296);
  *(_BYTE *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  IR::IRDataAttributes::IRDataAttributes(a1 + 336, &stru_24CA2D4D8, a3, a4, a13, a9);
  *(_BYTE *)(a1 + 488) = a13 == 1;
  *(_QWORD *)(a1 + 492) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  v20 = *a14;
  if (*a14)
  {
    v21 = *v25;
    *v25 = v20;
    CFRetain(v20);
    if (v21)
      CFRelease(v21);
  }
  v22 = *a15;
  if (*a15)
  {
    v23 = *v19;
    *v19 = v22;
    CFRetain(v22);
    if (v23)
      CFRelease(v23);
  }
  IR::IRData::Implementation::createEmptyIRObject((IR::IRData::Implementation *)a1);
  return a1;
}

void sub_210576DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, const void **a11, uint64_t a12)
{
  uint64_t v12;
  void **v13;
  void **v14;
  uint64_t v15;
  void **v16;
  const void **v17;
  IR::IRDataAttributes *v18;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  IR::IRDataAttributes::~IRDataAttributes(v18);
  a12 = v12 + 304;
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  applesauce::CF::DictionaryRef::~DictionaryRef(v17);
  applesauce::CF::DictionaryRef::~DictionaryRef(a11);
  applesauce::CF::StringRef::~StringRef((const void **)(v12 + 280));
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](v15);
  v20 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v12 + 208) = v20;
    operator delete(v20);
  }
  v21 = *(void **)(v12 + 176);
  if (v21)
  {
    *(_QWORD *)(v12 + 184) = v21;
    operator delete(v21);
  }
  v22 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 160) = v22;
    operator delete(v22);
  }
  v23 = *a9;
  if (*a9)
  {
    *(_QWORD *)(v12 + 136) = v23;
    operator delete(v23);
  }
  v24 = *v13;
  if (*v13)
  {
    *(_QWORD *)(v12 + 112) = v24;
    operator delete(v24);
  }
  v25 = *a10;
  if (*a10)
  {
    *(_QWORD *)(v12 + 88) = v25;
    operator delete(v25);
  }
  v26 = *(void **)(v12 + 40);
  if (v26)
  {
    *(_QWORD *)(v12 + 48) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataAttributes::IRDataAttributes(uint64_t a1, const __CFString *a2, int a3, char a4, int a5, float a6)
{
  void *exception;
  CFTypeRef cf;

  cf = CFURLCreateWithString(0, a2, 0);
  if (!cf)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  IR::IRDataAttributes::IRDataAttributes(a1, (CFURLRef *)&cf, a3, a4, 0, 0, a5, a6);
  if (cf)
    CFRelease(cf);
  return a1;
}

void sub_210576F54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  __cxa_free_exception(v10);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::createEmptyIRObject(IR::IRData::Implementation *this)
{
  _QWORD *v2;
  IR::IRData::Implementation *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _DWORD *v7;
  _DWORD *v8;
  _DWORD *v9;
  char v10;
  _DWORD *v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  _DWORD *v15;
  _DWORD *v16;
  int v17;
  unint64_t v18;
  char *v19;
  void **v20;
  _QWORD *v21;
  int v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  int v31;
  __int128 v32;

  v2 = operator new(0x30uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24CA2CAA8;
  v2[4] = 0;
  v2[5] = 0;
  *((_QWORD *)&v32 + 1) = v2;
  v2[3] = 0;
  *(_QWORD *)&v32 = v2 + 3;
  v3 = (IR::IRData::Implementation *)std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100]((uint64_t)this + 264, &v32);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
  if (*((_QWORD *)&v32 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  IR::IRData::Implementation::getEmptyIRDataNode(v3);
  IR::IRCoordinates::reset((IR::IRData::Implementation *)((char *)this + 224));
  if (!*((_BYTE *)this + 488))
    goto LABEL_18;
  v7 = (_DWORD *)*((_QWORD *)this + 10);
  v8 = (_DWORD *)*((_QWORD *)this + 11);
  if (v7 == v8)
  {
LABEL_11:
    *((_BYTE *)this + 488) = 0;
    v10 = 1;
  }
  else
  {
    v9 = (_DWORD *)*((_QWORD *)this + 10);
    while (*v9)
    {
      if (++v9 == v8)
        goto LABEL_11;
    }
    v10 = 0;
  }
  if (v7 == v8)
  {
LABEL_17:
    *((_BYTE *)this + 488) = 0;
LABEL_18:
    std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 104), *((unsigned int *)this + 7));
    v12 = (_DWORD *)*((_QWORD *)this + 13);
    v13 = (_DWORD *)*((_QWORD *)this + 14);
    if (v12 != v13)
    {
      v14 = 0;
      do
        *v12++ = v14++;
      while (v12 != v13);
    }
    goto LABEL_21;
  }
  v11 = v7;
  while (*v11 != 1)
  {
    if (++v11 == v8)
      goto LABEL_17;
  }
  if ((v10 & 1) != 0)
    goto LABEL_18;
  v18 = 0;
  v20 = (void **)((char *)this + 104);
  v19 = (char *)*((_QWORD *)this + 13);
  *((_QWORD *)this + 14) = v19;
  v21 = (_QWORD *)((char *)this + 120);
  do
  {
    v22 = v7[v18];
    if (v22)
    {
      if (v22 == 1)
      {
        *((_DWORD *)this + 124) = v18;
      }
      else
      {
        if ((unint64_t)v19 >= *v21)
        {
          v24 = (char *)*v20;
          v25 = (v19 - (_BYTE *)*v20) >> 2;
          v26 = v25 + 1;
          if ((unint64_t)(v25 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v27 = *v21 - (_QWORD)v24;
          if (v27 >> 1 > v26)
            v26 = v27 >> 1;
          if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
            v28 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v28 = v26;
          if (v28)
          {
            v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 120, v28);
            v24 = (char *)*((_QWORD *)this + 13);
            v19 = (char *)*((_QWORD *)this + 14);
          }
          else
          {
            v29 = 0;
          }
          v30 = &v29[4 * v25];
          *(_DWORD *)v30 = v18;
          v23 = v30 + 4;
          while (v19 != v24)
          {
            v31 = *((_DWORD *)v19 - 1);
            v19 -= 4;
            *((_DWORD *)v30 - 1) = v31;
            v30 -= 4;
          }
          *((_QWORD *)this + 13) = v30;
          *((_QWORD *)this + 14) = v23;
          *((_QWORD *)this + 15) = &v29[4 * v28];
          if (v24)
            operator delete(v24);
        }
        else
        {
          *(_DWORD *)v19 = v18;
          v23 = v19 + 4;
        }
        *((_QWORD *)this + 14) = v23;
        v19 = v23;
        v7 = (_DWORD *)*((_QWORD *)this + 10);
        v8 = (_DWORD *)*((_QWORD *)this + 11);
      }
    }
    else
    {
      *((_DWORD *)this + 123) = v18;
    }
    ++v18;
  }
  while (v18 < v8 - v7);
LABEL_21:
  std::vector<int>::resize((std::vector<unsigned int> *)((char *)this + 40), *((unsigned int *)this + 8));
  v15 = (_DWORD *)*((_QWORD *)this + 5);
  v16 = (_DWORD *)*((_QWORD *)this + 6);
  if (v15 != v16)
  {
    v17 = 0;
    do
      *v15++ = v17++;
    while (v15 != v16);
  }
}

uint64_t std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

int *IR::IRData::Implementation::getEmptyIRDataNode(IR::IRData::Implementation *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    IR::IRData::Implementation::getEmptyIRDataNode(void)::emptyIRDataNode = 0;
    unk_253ED6ED8 = 0u;
    unk_253ED6EE8 = 0u;
    unk_253ED6EF8 = 0u;
    unk_253ED6F08 = 0u;
    unk_253ED6F18 = 0u;
    qword_253ED6F28 = 0;
    __cxa_atexit((void (*)(void *))IR::IRDataNode::~IRDataNode, &IR::IRData::Implementation::getEmptyIRDataNode(void)::emptyIRDataNode, &dword_210570000);
  }
  return &IR::IRData::Implementation::getEmptyIRDataNode(void)::emptyIRDataNode;
}

void std::vector<int>::resize(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __sz)
{
  std::vector<unsigned int>::size_type v2;

  v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2)
      this->__end_ = &this->__begin_[__sz];
  }
  else
  {
    std::vector<int>::__append(this, __sz - v2);
  }
}

unint64_t IR::IRData::Implementation::Implementation(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, const void **a10, uint64_t a11, unsigned int a12, unsigned __int8 a13, int a14, int a15, uint64_t *a16)
{
  int v23;
  const UInt8 *v24;
  CFIndex v25;
  CFStringRef v26;
  const void *v27;
  const void *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  const void *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  unint64_t v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v57;
  vDSP_Length v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  float v62;
  unsigned int v63;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  std::vector<int>::const_iterator v82;
  float v83;
  const __CFNumber *v84;
  uint64_t v85;
  _DWORD *v86;
  unint64_t v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  int v93;
  IR::FFTFilterKernel *v94;
  BOOL inited;
  char v96;
  NSObject *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  void *exception;
  _BOOL4 SizeDimension;
  unint64_t v107;
  unint64_t v108;
  unsigned int v109;
  unsigned int v110;
  uint64_t v111;
  const void **v113;
  const void *v115;
  _QWORD v116[3];
  __n128 __p;
  void **v118[3];
  const __CFDictionary **__C[6];

  *(float *)a1 = a9;
  *(float *)(a1 + 4) = a9;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a12;
  *(_BYTE *)(a1 + 24) = a13;
  *(_DWORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = a6;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_OWORD *)(a1 + 52) = 0u;
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = a14;
  *(_DWORD *)(a1 + 76) = a14;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v111 = a1 + 80;
  std::vector<IR::IRCoordinateType>::__init_with_size[abi:ne180100]<IR::IRCoordinateType*,IR::IRCoordinateType*>((_QWORD *)(a1 + 80), *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 128), *(const void **)a7, *(_QWORD *)(a7 + 8), (uint64_t)(*(_QWORD *)(a7 + 8) - *(_QWORD *)a7) >> 2);
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  std::vector<IR::IRInterpolationMethod>::__init_with_size[abi:ne180100]<IR::IRInterpolationMethod*,IR::IRInterpolationMethod*>((_QWORD *)(a1 + 200), *(const void **)a8, *(_QWORD *)(a8 + 8), (uint64_t)(*(_QWORD *)(a8 + 8) - *(_QWORD *)a8) >> 2);
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)(a1 + 224));
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  v23 = *(char *)(a11 + 23);
  if (v23 >= 0)
    v24 = (const UInt8 *)a11;
  else
    v24 = *(const UInt8 **)a11;
  if (v23 >= 0)
    v25 = *(unsigned __int8 *)(a11 + 23);
  else
    v25 = *(_QWORD *)(a11 + 8);
  v26 = CFStringCreateWithBytes(0, v24, v25, 0x8000100u, 0);
  *(_QWORD *)(a1 + 280) = v26;
  if (!v26)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  v113 = (const void **)(a1 + 296);
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 313) = 0u;
  IR::IRDataAttributes::IRDataAttributes(a1 + 336, &stru_24CA2D4D8, a12, a13, a15, a9);
  *(_BYTE *)(a1 + 488) = a15 == 1;
  *(_QWORD *)(a1 + 492) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  v27 = *a10;
  if (*a10)
  {
    v28 = *v113;
    *v113 = v27;
    CFRetain(v27);
    if (v28)
      CFRelease(v28);
  }
  v29 = *(_QWORD **)a2;
  v30 = *(_QWORD *)(a2 + 8);
  if (*(_QWORD *)a2 == v30)
    goto LABEL_22;
  v31 = *(_QWORD **)a3;
  v32 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v32
    || !a6
    || (v34 = *(const void **)a4, v33 = *(_QWORD *)(a4 + 8), *(_QWORD *)a4 == v33)
    || (v35 = *(const void **)a7, v36 = *(_QWORD *)(a7 + 8), *(_QWORD *)a7 == v36)
    || (v37 = *(const void **)a8, v38 = *(_QWORD *)(a8 + 8), *(_QWORD *)a8 == v38))
  {
LABEL_22:
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v48 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v48, v49, v50, v51, v52, v53, v54, v55);
  }
  else
  {
    v39 = (uint64_t)(v29[1] - *v29) >> 2;
    if (v39 % a6)
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v40 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::Implementation(v40, v41, v42, v43, v44, v45, v46, v47);
      return a1;
    }
    v57 = 0xAAAAAAAAAAAAAAABLL * ((v30 - (uint64_t)v29) >> 3);
    *(_DWORD *)(a1 + 64) = v57;
    if (0xAAAAAAAAAAAAAAABLL * ((v32 - (uint64_t)v31) >> 3) == v57
      && (v58 = (uint64_t)(v31[1] - *v31) >> 2, v58 == ((unint64_t)(v33 - (_QWORD)v34) >> 2))
      && v58 == (v36 - (uint64_t)v35) >> 2
      && v58 == (v38 - (uint64_t)v37) >> 2)
    {
      v59 = *(_QWORD **)a5;
      v60 = *(_QWORD *)(a5 + 8);
      if (*(_QWORD *)a5 == v60)
      {
        v107 = a6;
        v108 = (unint64_t)(v33 - (_QWORD)v34) >> 2;
        v62 = 0.0;
LABEL_48:
        v110 = v39 / a6;
        *(_DWORD *)(a1 + 8) = v39 / a6;
        *(float *)(a1 + 20) = v62;
        *(_DWORD *)(a1 + 28) = v108;
        if (!*(_DWORD *)(a1 + 16))
          *(_DWORD *)(a1 + 16) = v110;
        v81 = v107;
        SizeDimension = IR::IRData::Implementation::canCreateSizeDimension(a1, a16);
        if (SizeDimension)
        {
          LODWORD(__C[0]) = 8;
          std::vector<IR::IRCoordinateType>::push_back[abi:ne180100](v111, __C);
          LODWORD(__C[0]) = 1;
          std::vector<IR::IRCoordinateType>::push_back[abi:ne180100](a1 + 200, __C);
          LODWORD(__C[0]) = 0;
          std::vector<float>::push_back[abi:ne180100](a1 + 128, __C);
          if (*(_BYTE *)(a1 + 488))
          {
            LODWORD(__C[0]) = *(_DWORD *)(a1 + 28);
            std::vector<IR::IRCoordinateType>::push_back[abi:ne180100](a1 + 104, __C);
          }
          else
          {
            v82.__i_ = *(std::__wrap_iter<const int *>::iterator_type *)(a1 + 104);
            LODWORD(__C[0]) = *(_DWORD *)(a1 + 28);
            std::vector<int>::insert((std::vector<int> *)(a1 + 104), v82, 1uLL, (std::vector<int>::const_reference)__C);
          }
          ++*(_DWORD *)(a1 + 28);
        }
        v83 = 1.0;
        if (*a10)
        {
          __C[0] = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(a10);
          v84 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[21]>(__C, "DiffuseFieldPowerRMS");
          if (((unint64_t)v84 & 0xFF00000000) != 0 && fabsf(*(float *)&v84) > 0.00000011921)
            v83 = 1.0 / *(float *)&v84;
        }
        IR::IRData::Implementation::createEmptyIRObject((IR::IRData::Implementation *)a1);
        if (*(_QWORD *)(a3 + 8) != *(_QWORD *)a3)
        {
          v85 = 0;
          v109 = 0;
          do
          {
            IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)__C);
            v86 = *(_DWORD **)a4;
            if (*(_QWORD *)(a4 + 8) != *(_QWORD *)a4)
            {
              v87 = 0;
              v88 = 1;
              do
              {
                IR::IRCoordinates::set((uint64_t)__C, v86[v87], *(float *)(*(_QWORD *)(*(_QWORD *)a3 + 24 * v85) + 4 * v87));
                v87 = v88;
                v86 = *(_DWORD **)a4;
                ++v88;
              }
              while (v87 < (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
            }
            std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(v118, v81);
            LODWORD(v116[0]) = 0;
            std::vector<float>::vector(&__p, v81, v116);
            if (*(_QWORD *)(a5 + 8) - *(_QWORD *)a5 == *(_QWORD *)(a3 + 8) - *(_QWORD *)a3)
            {
              v89 = *(_QWORD *)a5 + 24 * v85;
              v90 = *(_QWORD *)(v89 + 8);
              if (&__p != (__n128 *)v89 && (v90 - *(_QWORD *)v89) >> 2 == v81)
                std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)&__p, *(char **)v89, v90, v81);
            }
            v92 = 0;
            v93 = 0;
            do
            {
              v94 = (IR::FFTFilterKernel *)operator new();
              IR::FFTFilterKernel::FFTFilterKernel((uint64_t)v94);
              std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)&v118[0][v92], v94);
              IR::FFTFilterKernel::initializeAndStoreCoeffs((IR::FFTFilterKernel *)v118[0][v92++], (const float *)(*(_QWORD *)(*(_QWORD *)a2 + 24 * v85) + 4 * v110 * v93++), v110, a12, a13, 0, 0, 0, v83);
              --v81;
            }
            while (v81);
            memset(v116, 0, sizeof(v116));
            IR::IRData::Implementation::insertIRDataInTree(a1, *(uint64_t **)(a1 + 264), (uint64_t)__C, (uint64_t)v118, &__p, 0xFFFFFFFF, v116);
            v81 = v107;
            if (__p.n128_u64[0])
            {
              __p.n128_u64[1] = __p.n128_u64[0];
              operator delete((void *)__p.n128_u64[0]);
            }
            __p.n128_u64[0] = (unint64_t)v118;
            std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
            v85 = ++v109;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 3) > v109);
        }
        if (a15 != 1
          || (memset(__C, 0, 24),
              memset(v118, 0, sizeof(v118)),
              inited = IR::IRData::Implementation::initVBAPTriangulation(a1, (uint64_t *)__C, v118, 0),
              __p.n128_u64[0] = (unint64_t)v118,
              std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p),
              v118[0] = (void **)__C,
              std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v118),
              inited))
        {
          if (SizeDimension
            && (v115 = 0,
                v96 = IR::IRData::Implementation::createSizeDimension(a1, a16, (CFArrayRef *)&v115, 0),
                applesauce::CF::ArrayRef::~ArrayRef(&v115),
                (v96 & 1) == 0))
          {
            if (IR::getIRDataLog(void)::onceToken != -1)
              dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
            v97 = IR::getIRDataLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              IR::IRData::Implementation::Implementation(v97, v98, v99, v100, v101, v102, v103, v104);
          }
          else
          {
            IR::IRData::Implementation::findDimensionsWithMoreThanOneNode((IR::IRData::Implementation *)a1);
          }
        }
        return a1;
      }
      if (0xAAAAAAAAAAAAAAABLL * ((v60 - (uint64_t)v59) >> 3) == v57 && a6 == (uint64_t)(v59[1] - *v59) >> 2)
      {
        v107 = a6;
        v108 = (unint64_t)(v33 - (_QWORD)v34) >> 2;
        v61 = 0;
        v62 = 0.0;
        v63 = 1;
        do
        {
          LODWORD(__C[0]) = 0;
          vDSP_maxv(*(const float **)(*(_QWORD *)a5 + 24 * v61), 1, (float *)__C, v58);
          if (*(float *)__C > v62)
            v62 = *(float *)__C;
          v61 = v63;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3) > v63++);
        goto LABEL_48;
      }
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v73 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::Implementation(v73, v74, v75, v76, v77, v78, v79, v80);
    }
    else
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v65 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::Implementation(v65, v66, v67, v68, v69, v70, v71, v72);
    }
  }
  return a1;
}

void sub_210577BB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, IR::IRDataAttributes *a14, const void **a15, const void **a16, void **a17, void **a18, void **a19, uint64_t a20,uint64_t a21,const void **a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  _QWORD *v30;
  void **v31;
  void **v32;
  uint64_t v33;
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  *(_QWORD *)(v33 - 144) = v30 + 63;
  std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 144));
  IR::IRDataAttributes::~IRDataAttributes(a14);
  *(_QWORD *)(v33 - 144) = v30 + 38;
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100]((void ***)(v33 - 144));
  applesauce::CF::DictionaryRef::~DictionaryRef(a22);
  applesauce::CF::DictionaryRef::~DictionaryRef(a15);
  applesauce::CF::StringRef::~StringRef(a16);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)(v30 + 33));
  v35 = *a17;
  if (*a17)
  {
    v30[26] = v35;
    operator delete(v35);
  }
  v36 = (void *)v30[22];
  if (v36)
  {
    v30[23] = v36;
    operator delete(v36);
  }
  v37 = *v32;
  if (*v32)
  {
    v30[20] = v37;
    operator delete(v37);
  }
  v38 = *a18;
  if (*a18)
  {
    v30[17] = v38;
    operator delete(v38);
  }
  v39 = *v31;
  if (*v31)
  {
    v30[14] = v39;
    operator delete(v39);
  }
  v40 = *a19;
  if (*a19)
  {
    v30[11] = v40;
    operator delete(v40);
  }
  v41 = (void *)v30[5];
  if (v41)
  {
    v30[6] = v41;
    operator delete(v41);
  }
  _Unwind_Resume(a1);
}

void sub_210577D90()
{
  JUMPOUT(0x210577D78);
}

BOOL IR::IRData::Implementation::canCreateSizeDimension(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  NSObject *v8;
  _BOOL8 result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  float v20;
  BOOL v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = *a2;
  v3 = a2[1];
  if (*a2 == v3)
    return 0;
  v4 = *(_DWORD **)(a1 + 80);
  v5 = *(_DWORD **)(a1 + 88);
  if (v4 == v5)
  {
LABEL_9:
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v8 = IR::getIRDataLog(void)::gLog;
    result = os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    IR::IRData::Implementation::canCreateSizeDimension(v8, v10, v11, v12, v13, v14, v15, v16);
    return 0;
  }
  v6 = *(_DWORD **)(a1 + 80);
  do
  {
    if (*v6 == 8)
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v22 = IR::getIRDataLog(void)::gLog;
      result = os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR);
      if (result)
      {
        IR::IRData::Implementation::canCreateSizeDimension(v22, v23, v24, v25, v26, v27, v28, v29);
        return 0;
      }
      return result;
    }
    ++v6;
  }
  while (v6 != v5);
  v7 = *(_DWORD **)(a1 + 80);
  while (*v7)
  {
    if (++v7 == v5)
      goto LABEL_9;
  }
  while (*v4 != 1)
  {
    if (++v4 == v5)
      goto LABEL_9;
  }
  v17 = 0;
  v18 = (v3 - v2) >> 2;
  v19 = 1;
  result = 1;
  while (1)
  {
    v20 = *(float *)(v2 + 4 * v17);
    v21 = v20 >= 0.0 && v20 <= 1.0;
    if (!v21)
      break;
    v17 = v19;
    v21 = v18 > v19++;
    if (!v21)
      return result;
  }
  if (IR::getIRDataLog(void)::onceToken != -1)
    dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
  v30 = IR::getIRDataLog(void)::gLog;
  result = os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR);
  if (result)
  {
    IR::IRData::Implementation::canCreateSizeDimension(v30, v31, v32, v33, v34, v35, v36, v37);
    return 0;
  }
  return result;
}

void std::vector<IR::IRCoordinateType>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

void std::vector<float>::push_back[abi:ne180100](uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _DWORD *v6;
  _DWORD *v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  int v16;

  v4 = a1 + 16;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    v8 = *(_DWORD **)a1;
    v9 = ((uint64_t)v6 - *(_QWORD *)a1) >> 2;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v4, v12);
      v8 = *(_DWORD **)a1;
      v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = &v13[4 * v12];
    *(_DWORD *)v14 = *a2;
    v7 = v14 + 4;
    while (v6 != v8)
    {
      v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = v15;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v6 = *a2;
    v7 = v6 + 1;
  }
  *(_QWORD *)(a1 + 8) = v7;
}

std::vector<int>::iterator std::vector<int>::insert(std::vector<int> *this, std::vector<int>::const_iterator __position, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  unsigned int *i;
  int *v5;
  std::__compressed_pair<int *> *p_end_cap;
  int *v9;
  int *value;
  const int *v11;
  std::vector<int>::pointer begin;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unint64_t v19;
  std::vector<int>::size_type v20;
  int *v21;
  const int *v22;
  const int *v23;
  int *v24;
  int v25;
  std::vector<int>::size_type v26;
  int *v27;
  unsigned int *v28;
  std::vector<int>::size_type v29;
  unsigned int *v30;
  std::__split_buffer<unsigned int> __v;

  i = (unsigned int *)__position.__i_;
  if (__n)
  {
    v5 = (int *)__x;
    value = this->__end_cap_.__value_;
    p_end_cap = &this->__end_cap_;
    v9 = value;
    v11 = p_end_cap[-1].__value_;
    if (__n <= value - v11)
    {
      v18 = (char *)v11 - (char *)__position.__i_;
      if (__n <= v11 - __position.__i_)
      {
        v21 = p_end_cap[-1].__value_;
        v20 = __n;
      }
      else
      {
        v19 = 0;
        v20 = v18 >> 2;
        v21 = (int *)&v11[__n - (v18 >> 2)];
        do
        {
          v11[v19 / 4] = *__x;
          v19 += 4;
        }
        while (4 * __n - 4 * v20 != v19);
        this->__end_ = v21;
        if (v11 == __position.__i_)
          return (std::vector<int>::iterator)i;
      }
      v22 = &__position.__i_[__n];
      v23 = &v21[-__n];
      v24 = v21;
      if (v23 < v11)
      {
        v24 = v21;
        do
        {
          v25 = *v23++;
          *v24++ = v25;
        }
        while (v23 < v11);
      }
      this->__end_ = v24;
      if (v21 != v22)
        memmove(&v21[-(v21 - v22)], __position.__i_, (char *)v21 - (char *)v22);
      if (i <= (unsigned int *)v5)
      {
        if (this->__end_ <= v5)
          v26 = 0;
        else
          v26 = __n;
        v5 += v26;
      }
      v27 = (int *)i;
      do
      {
        *v27++ = *v5;
        --v20;
      }
      while (v20);
    }
    else
    {
      begin = this->__begin_;
      v13 = __n + v11 - this->__begin_;
      if (v13 >> 62)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v14 = __position.__i_ - begin;
      v15 = (char *)v9 - (char *)begin;
      if (v15 >> 1 > v13)
        v13 = v15 >> 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v13;
      __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)p_end_cap;
      if (v16)
        v17 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v16);
      else
        v17 = 0;
      v28 = &v17[v14];
      __v.__first_ = v17;
      __v.__begin_ = v28;
      __v.__end_cap_.__value_ = &v17[v16];
      v29 = 4 * __n;
      v30 = &v28[__n];
      do
      {
        *v28++ = *v5;
        v29 -= 4;
      }
      while (v29);
      __v.__end_ = v30;
      i = std::vector<int>::__swap_out_circular_buffer((std::vector<unsigned int> *)this, &__v, i);
      if (__v.__end_ != __v.__begin_)
        __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                                + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
      if (__v.__first_)
        operator delete(__v.__first_);
    }
  }
  return (std::vector<int>::iterator)i;
}

void sub_2105782E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[21]>(const __CFDictionary ***a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[21]>(**a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

void IR::IRData::Implementation::insertIRDataInTree(uint64_t a1, uint64_t a2, uint64_t a3, __n128 *a4, unsigned int a5, _QWORD *a6)
{
  IR::IRData::Implementation::insertIRDataInTree(a1, *(uint64_t **)(a1 + 264), a2, a3, a4, a5, a6);
}

uint64_t IR::IRData::Implementation::createSizeDimension(unint64_t a1, _QWORD *a2, CFArrayRef *a3, int a4)
{
  void *v4;
  _BOOL4 v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unint64_t v20;
  float v21;
  float v22;
  float v23;
  unint64_t v24;
  float *v25;
  float v26;
  uint64_t v27;
  unsigned int TDesign;
  unint64_t v29;
  int v30;
  float *v31;
  float v32;
  unint64_t v33;
  float v34;
  NSObject *v36;
  float v37;
  unint64_t v38;
  float v39;
  float v40;
  float v41;
  float i;
  float j;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  unsigned int v49;
  unsigned int v50;
  int v51;
  IR::FFTFilterKernel *v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  float v57;
  uint64_t v58;
  unint64_t v59;
  float v60;
  unint64_t v61;
  unint64_t v62;
  unsigned int v63;
  float v64;
  unint64_t v65;
  unsigned int v66;
  float v67;
  double v68;
  const char *v69;
  BOOL inited;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *exception;
  void *v82;
  int v83;
  const __CFArray **v84;
  int v85;
  char v86;
  unsigned int v87;
  _BYTE *v88;
  _BYTE *v89;
  unint64_t v90;
  void *v91;
  unint64_t __p;
  char v93;
  _QWORD v94[3];
  float __B;
  _QWORD v96[3];
  __n128 __C;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  _BYTE *v102;
  unint64_t v103[3];
  _BYTE v104[36];
  void *v105;
  _BYTE *v106;
  uint64_t v107;
  uint8_t buf[48];
  int v109;
  _BYTE v110[24];
  _BYTE *v111;
  _BYTE v112[24];
  _BYTE *v113;
  uint64_t v114;

  v114 = *MEMORY[0x24BDAC8D0];
  std::chrono::system_clock::now();
  v84 = a3;
  if (*a3)
    v9 = CFArrayGetCount(*a3) == (uint64_t)(a2[1] - *a2) >> 2;
  else
    v9 = 0;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  std::vector<IR::IRCoordinates>::reserve(&v105, *(unsigned int *)(a1 + 64));
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)v104);
  if (*(_BYTE *)(a1 + 488))
  {
    v111 = 0;
    v10 = operator new(0x20uLL);
    *v10 = &off_24CA2CD40;
    v10[1] = a1;
    v10[2] = v104;
    v10[3] = &v105;
    v111 = v10;
    IR::IRData::Implementation::forEachNode((_BYTE *)a1, (uint64_t)v110, 0, 0);
    v11 = v111;
    if (v111 == v110)
    {
      v12 = 4;
      v11 = v110;
      goto LABEL_11;
    }
  }
  else
  {
    v113 = 0;
    v13 = operator new(0x20uLL);
    *v13 = &off_24CA2CCF8;
    v13[1] = v104;
    v13[2] = a1;
    v13[3] = &v105;
    v113 = v13;
    IR::IRData::Implementation::forEachNode((_BYTE *)a1, (uint64_t)v112, 0, 0);
    v11 = v113;
    if (v113 == v112)
    {
      v12 = 4;
      v11 = v112;
      goto LABEL_11;
    }
  }
  if (!v11)
    goto LABEL_12;
  v12 = 5;
LABEL_11:
  (*(void (**)(void))(*(_QWORD *)v11 + 8 * v12))();
LABEL_12:
  v88 = v105;
  v89 = v106;
  std::vector<IR::FFTFilterKernel>::vector(v103, *(unsigned int *)(a1 + 32));
  LODWORD(v14) = *(_DWORD *)(a1 + 32);
  if ((_DWORD)v14)
  {
    v15 = 0;
    v16 = 0;
    do
    {
      IR::FFTFilterKernel::initialize((IR::FFTFilterKernel *)(v103[0] + v15), *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
      ++v16;
      v14 = *(unsigned int *)(a1 + 32);
      v15 += 40;
    }
    while (v16 < v14);
  }
  *(_DWORD *)buf = 0;
  std::vector<float>::vector(&v101, v14, buf);
  v17 = *a2;
  if (a2[1] != *a2)
  {
    v18 = 0;
    v19 = 0;
    v85 = a4 & v9;
    v83 = v9 & ~a4;
    v20 = 0x8E38E38E38E38E39 * ((v89 - v88) >> 2);
    v21 = (float)v20;
    v22 = (float)v20 * 0.5;
    while (1)
    {
      v23 = *(float *)(v17 + 4 * v18);
      if (v23 != 0.0)
        break;
LABEL_100:
      v17 = *a2;
      v18 = ++v19;
      if (v19 >= (unint64_t)((uint64_t)(a2[1] - *a2) >> 2))
        goto LABEL_106;
    }
    __p &= 0xFFFFFFFFFFFFFF00;
    v87 = v19;
    if (v85 && *(_BYTE *)(a1 + 488))
    {
      if (!*v84)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](exception, "Could not construct");
      }
      v24 = applesauce::CF::details::at_as<unsigned int>(*v84, v18);
      v26 = 1.0;
      if ((v24 & 0xFF00000000) != 0)
      {
        if (v24 <= 1)
          v27 = 1;
        else
          v27 = v24;
        TDesign = HOA::getTDesign((HOA *)v27, 0, 0, 0, v25);
        v109 = 0;
        v29 = TDesign;
        memset(buf, 0, sizeof(buf));
        LODWORD(v98) = 0;
        std::vector<float>::resize((uint64_t)buf, TDesign, &v98);
        LODWORD(v98) = 0;
        std::vector<float>::resize((uint64_t)&buf[24], TDesign, &v98);
        v4 = *(void **)&buf[24];
        v30 = 1;
        __p = *(_QWORD *)buf;
        HOA::getTDesign((HOA *)v27, *(_OWORD **)buf, *(float **)&buf[24], 0, v31);
        v86 = 0;
        v32 = (float)TDesign;
LABEL_46:
        if (IR::getIRDataLog(void)::onceToken != -1)
          dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
        v36 = IR::getIRDataLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_DEBUG))
        {
          v68 = *(float *)(*a2 + 4 * v18);
          v69 = "uniform";
          if (v30)
            v69 = "t-grid";
          *(_DWORD *)buf = 136315906;
          *(_QWORD *)&buf[4] = "createSizeDimension";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v32;
          *(_WORD *)&buf[18] = 2048;
          *(double *)&buf[20] = v68;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v69;
          _os_log_debug_impl(&dword_210570000, v36, OS_LOG_TYPE_DEBUG, "IRData::%s: Using %u points to calculate size = %.2f based on %s sampling.", buf, 0x26u);
          if (!v29)
            goto LABEL_93;
        }
        else if (!v29)
        {
LABEL_93:
          if ((v86 & 1) != 0)
          {
            v19 = v87;
          }
          else
          {
            v19 = v87;
            if (v4)
              operator delete(v4);
            if (__p)
              operator delete((void *)__p);
            else
              __p = 0;
          }
          goto LABEL_100;
        }
        v37 = 0.0;
        v90 = v18;
        v91 = v4;
        v93 = v30;
        do
        {
          v38 = llroundf(v37);
          if (v38 > v20)
            break;
          if ((v30 & 1) != 0)
          {
            v39 = *(float *)(__p + 4 * v38);
            v40 = *((float *)v4 + v38);
          }
          else
          {
            v39 = IR::IRCoordinates::get((uint64_t)v105 + 36 * v38, 0);
            v40 = IR::IRCoordinates::get((uint64_t)v105 + 36 * v38, 1u);
          }
          v41 = *(float *)(*a2 + 4 * v18);
          for (i = v39 + (float)(v41 * 180.0); i >= 360.0; i = i + -360.0)
            ;
          for (j = v39 - (float)(v41 * 180.0); j < 0.0; j = j + 360.0)
            ;
          v44 = v20;
          LODWORD(v98) = 0;
          *((float *)&v98 + 1) = v40 - (float)(v41 * 180.0);
          *(float *)&v99 = v40 + (float)(v41 * 180.0);
          *((float *)&v99 + 1) = j;
          *(float *)&v100 = i;
          v45 = *(unsigned int *)(a1 + 32);
          *(_DWORD *)buf = 0;
          std::vector<float>::vector(&__C, v45, buf);
          v46 = a2;
          std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(v96, *(unsigned int *)(a1 + 32));
          if (*(_DWORD *)(a1 + 32))
          {
            v47 = 0;
            v48 = 0;
            do
            {
              v49 = *(_DWORD *)(a1 + 8);
              v50 = *(_DWORD *)(a1 + 16);
              v51 = *(unsigned __int8 *)(a1 + 24);
              v52 = (IR::FFTFilterKernel *)operator new();
              IR::FFTFilterKernel::FFTFilterKernel(v52, v49, v50, v51 != 0);
              std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)(v96[0] + v47), v52);
              ++v48;
              v47 += 8;
            }
            while (v48 < *(unsigned int *)(a1 + 32));
          }
          if (v89 == v88)
          {
            v60 = 0.0;
            a2 = v46;
            v20 = v44;
            v18 = v90;
            v4 = v91;
          }
          else
          {
            v53 = 0;
            v54 = 0;
            v55 = 0;
            a2 = v46;
            v20 = v44;
            v18 = v90;
            do
            {
              if (*(float *)(*a2 + 4 * v90) == 1.0
                || (v56 = IR::IRCoordinates::get((uint64_t)v105 + 36 * v53, 0),
                    v57 = IR::IRCoordinates::get((uint64_t)v105 + 36 * v53, 1u),
                    AUSM::ExclusionZone::isInExclusionZone((AUSM::ExclusionZone *)&v98, v56, v57, 1.0, 0.000001, (BOOL)"0_C")))
              {
                IR::IRData::Implementation::getInterpolatedCoeffs(a1, (uint64_t)v105 + 36 * v53, v103[0], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v103[1] - v103[0]) >> 3), (unint64_t)v101, (v102 - (_BYTE *)v101) >> 2, 3u);
                if (*(_DWORD *)(a1 + 32))
                {
                  v58 = 0;
                  v59 = 0;
                  do
                  {
                    IR::FFTFilterKernel::accumulate(*(IR::FFTFilterKernel **)(v96[0] + 8 * v59), (const IR::FFTFilterKernel *)(v103[0] + v58), 1.0);
                    *(float *)(__C.n128_u64[0] + 4 * v59) = *((float *)v101 + v59)
                                                          + *(float *)(__C.n128_u64[0] + 4 * v59);
                    ++v59;
                    v58 += 40;
                  }
                  while (v59 < *(unsigned int *)(a1 + 32));
                }
                ++v55;
              }
              v53 = ++v54;
            }
            while (v20 > v54);
            v60 = v55 ? 1.0 / (float)v55 : 0.0;
            v4 = v91;
          }
          __B = v60;
          vDSP_vsmul((const float *)__C.n128_u64[0], 1, &__B, (float *)__C.n128_u64[0], 1, *(unsigned int *)(a1 + 32));
          if (*(_DWORD *)(a1 + 32))
          {
            v61 = 0;
            do
              IR::FFTFilterKernel::scale(*(IR::FFTFilterKernel **)(v96[0] + 8 * v61++), __B);
            while (v61 < *(unsigned int *)(a1 + 32));
          }
          IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)buf);
          IR::IRCoordinates::set((uint64_t)buf, 8u, *(float *)(*a2 + 4 * v18));
          if (*(_BYTE *)(a1 + 488))
          {
            if ((v93 & 1) != 0)
            {
              IR::IRCoordinates::set((uint64_t)buf, 1u, *((float *)v4 + v38));
              IR::IRCoordinates::set((uint64_t)buf, 0, *(float *)(__p + 4 * v38));
            }
            else if (*(_DWORD *)(a1 + 28) != 1)
            {
              v65 = 0;
              do
              {
                v66 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v65);
                v67 = IR::IRCoordinates::get((uint64_t)v105 + 36 * v38, v66);
                IR::IRCoordinates::set((uint64_t)buf, v66, v67);
                ++v65;
              }
              while (v65 < (*(_DWORD *)(a1 + 28) - 1));
            }
          }
          else if (*(_DWORD *)(a1 + 28) >= 2u)
          {
            v62 = 1;
            do
            {
              v63 = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * *(int *)(*(_QWORD *)(a1 + 104) + 4 * v62));
              v64 = IR::IRCoordinates::get((uint64_t)v105 + 36 * v38, v63);
              IR::IRCoordinates::set((uint64_t)buf, v63, v64);
              ++v62;
            }
            while (v62 < *(unsigned int *)(a1 + 28));
          }
          memset(v94, 0, sizeof(v94));
          IR::IRData::Implementation::insertIRDataInTree(a1, *(uint64_t **)(a1 + 264), (uint64_t)buf, (uint64_t)v96, &__C, 0xFFFFFFFF, v94);
          *(_QWORD *)buf = v96;
          std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          LOBYTE(v30) = v93;
          if (__C.n128_u64[0])
          {
            __C.n128_u64[1] = __C.n128_u64[0];
            operator delete((void *)__C.n128_u64[0]);
          }
          v37 = v26 + v37;
        }
        while (v37 < v32);
        goto LABEL_93;
      }
      v30 = 0;
LABEL_45:
      v86 = 1;
      v32 = v21;
      v29 = v20;
      goto LABEL_46;
    }
    if (v23 == 1.0)
    {
      v30 = 0;
      if (*(_BYTE *)(a1 + 488))
        v26 = v22;
      else
        v26 = v21;
      goto LABEL_45;
    }
    if (v83)
    {
      if (!*v84)
      {
        v82 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](v82, "Could not construct");
      }
      v33 = applesauce::CF::details::at_as<float>(*v84, v18);
      if ((v33 & 0xFF00000000) != 0)
      {
        v34 = *(float *)&v33;
        if (*(float *)&v33 < 1.0)
          v34 = 1.0;
        goto LABEL_39;
      }
      v23 = *(float *)(*a2 + 4 * v18);
    }
    v34 = 1.0 / (float)(1.0 - v23);
LABEL_39:
    v30 = 0;
    if (v34 <= v22 || *(_BYTE *)(a1 + 488) == 0)
      v26 = v34;
    else
      v26 = v22;
    goto LABEL_45;
  }
LABEL_106:
  if (!*(_BYTE *)(a1 + 488))
    goto LABEL_112;
  std::chrono::system_clock::now();
  memset(buf, 0, 24);
  v98 = 0;
  v99 = 0;
  v100 = 0;
  inited = IR::IRData::Implementation::initVBAPTriangulation(a1, (uint64_t *)buf, &v98, 1u);
  __C.n128_u64[0] = (unint64_t)&v98;
  std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__C);
  v98 = buf;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v98);
  if (inited)
  {
    std::chrono::system_clock::now();
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      IR::IRData::Implementation::createSizeDimension();
LABEL_112:
    std::chrono::system_clock::now();
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_DEBUG))
      IR::IRData::Implementation::createSizeDimension();
    v71 = 1;
    goto LABEL_122;
  }
  if (IR::getIRDataLog(void)::onceToken != -1)
    dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
  v72 = IR::getIRDataLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
    IR::IRData::Implementation::createSizeDimension(v72, v73, v74, v75, v76, v77, v78, v79);
  v71 = 0;
LABEL_122:
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  *(_QWORD *)buf = v103;
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  return v71;
}

void sub_210578EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,int a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56)
{
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v59;
  uint64_t v60;

  v59 = *(_QWORD **)(v57 - 176);
  if (v59 == v56)
  {
    v60 = 4;
    v59 = (_QWORD *)(v57 - 200);
  }
  else
  {
    if (!v59)
      goto LABEL_6;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(IR::IRData::Implementation *this)
{
  void **v1;
  std::vector<unsigned int>::size_type v3;
  _QWORD *v4;
  int *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  unint64_t i;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  _DWORD *v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  int v32;
  std::vector<unsigned int>::value_type __u;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v1 = (void **)((char *)this + 152);
  *((_QWORD *)this + 20) = *((_QWORD *)this + 19);
  if (**((_QWORD **)this + 33) == *(_QWORD *)(*((_QWORD *)this + 33) + 8))
    return;
  v3 = *((unsigned int *)this + 7);
  if (!(_DWORD)v3)
    return;
  v4 = (_QWORD *)((char *)this + 176);
  __u = 0;
  std::vector<IR::IRInterpolationMethod>::assign((std::vector<unsigned int> *)((char *)this + 176), v3, &__u);
  if (*((_BYTE *)this + 488))
  {
    v5 = (int *)*((_QWORD *)this + 13);
    if (v5 != *((int **)this + 14))
    {
      *(_DWORD *)(*((_QWORD *)this + 22) + 4 * *v5) = -1431655765
                                                      * ((*(_QWORD *)(*((_QWORD *)this + 33) + 8)
                                                        - **((_QWORD **)this + 33)) >> 5);
      v36[0] = &off_24CA2CD88;
      v36[1] = this;
      v37 = v36;
      IR::IRData::Implementation::forEachNode(this, (uint64_t)v36, 0, 0);
      v6 = v37;
      if (v37 == v36)
      {
        v7 = 4;
        v6 = v36;
        goto LABEL_12;
      }
      if (v37)
      {
        v7 = 5;
LABEL_12:
        (*(void (**)(void))(*v6 + 8 * v7))();
      }
    }
    v10 = (uint64_t *)*((_QWORD *)this + 63);
    v11 = (uint64_t *)*((_QWORD *)this + 64);
    if (v10 == v11)
    {
      v12 = 0;
    }
    else
    {
      v12 = 0;
      do
      {
        v13 = *v10;
        v10 += 2;
        v14 = (uint64_t)(*(_QWORD *)(v13 + 48) - *(_QWORD *)(v13 + 40)) >> 2;
        if (v14 > v12)
          v12 = v14;
      }
      while (v10 != v11);
    }
    v15 = (char *)*((_QWORD *)this + 10);
    v16 = (char *)*((_QWORD *)this + 11);
    v17 = v15;
    if (v15 != v16)
    {
      while (*(_DWORD *)v17)
      {
        v17 += 4;
        if (v17 == v16)
        {
          v17 = (char *)*((_QWORD *)this + 11);
          break;
        }
      }
    }
    if (v17 != v16)
      *(_DWORD *)(*v4 + ((v17 - v15) & 0x3FFFFFFFCLL)) = v12;
    v18 = v15;
    if (v15 != v16)
    {
      while (*(_DWORD *)v18 != 1)
      {
        v18 += 4;
        if (v18 == v16)
        {
          v18 = v16;
          break;
        }
      }
    }
    if (v18 != v16)
      *(_DWORD *)(*v4 + ((v18 - v15) & 0x3FFFFFFFCLL)) = v12;
    goto LABEL_34;
  }
  **((_DWORD **)this + 22) = -1431655765 * ((*(_QWORD *)(*((_QWORD *)this + 33) + 8) - **((_QWORD **)this + 33)) >> 5);
  v34[0] = &off_24CA2CDD0;
  v34[1] = this;
  v35 = v34;
  IR::IRData::Implementation::forEachNode(this, (uint64_t)v34, 0, 0);
  v8 = v35;
  if (v35 == v34)
  {
    v9 = 4;
    v8 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_34;
    v9 = 5;
  }
  (*(void (**)(void))(*v8 + 8 * v9))();
LABEL_34:
  v19 = *((unsigned int *)this + 7);
  if ((_DWORD)v19)
  {
    for (i = 0; i < v19; ++i)
    {
      if (*(_DWORD *)(*v4 + 4 * i) >= 2u)
      {
        v21 = *((_QWORD *)this + 10);
        v23 = (char *)*((_QWORD *)this + 20);
        v22 = *((_QWORD *)this + 21);
        if ((unint64_t)v23 >= v22)
        {
          v25 = (char *)*v1;
          v26 = (v23 - (_BYTE *)*v1) >> 2;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v28 = v22 - (_QWORD)v25;
          if (v28 >> 1 > v27)
            v27 = v28 >> 1;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v29 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 168, v29);
            v25 = (char *)*((_QWORD *)this + 19);
            v23 = (char *)*((_QWORD *)this + 20);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[4 * v26];
          *(_DWORD *)v31 = *(_DWORD *)(v21 + 4 * i);
          v24 = v31 + 4;
          while (v23 != v25)
          {
            v32 = *((_DWORD *)v23 - 1);
            v23 -= 4;
            *((_DWORD *)v31 - 1) = v32;
            v31 -= 4;
          }
          *((_QWORD *)this + 19) = v31;
          *((_QWORD *)this + 20) = v24;
          *((_QWORD *)this + 21) = &v30[4 * v29];
          if (v25)
            operator delete(v25);
        }
        else
        {
          *(_DWORD *)v23 = *(_DWORD *)(v21 + 4 * i);
          v24 = v23 + 4;
        }
        *((_QWORD *)this + 20) = v24;
        v19 = *((unsigned int *)this + 7);
      }
    }
  }
}

void sub_2105793F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

unint64_t IR::IRData::Implementation::Implementation(unint64_t a1, uint64_t a2, CFDataRef *a3, uint64_t *a4)
{
  _QWORD *v8;
  IR::IRData::Implementation *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  UInt8 *BytePtr;
  CFIndex Length;
  uint64_t FileByteSize;
  const void *v16;
  const __CFDictionary *v17;
  const __CFDictionary *v18;
  float v19;
  const void *v20;
  float v21;
  unint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  std::logic_error *exception;
  int v33;
  const __CFDictionary *v34;
  uint64_t v35;
  const __CFDictionary *v36;
  float v37;
  const __CFDictionary *v38;
  int v39;
  const __CFDictionary *v40;
  int v41;
  const __CFDictionary *v42;
  int v43;
  const void *v44;
  const void *v45;
  const void *v46;
  CFDictionaryRef v47;
  CFTypeRef v48;
  uint64_t j;
  const void *v50;
  const void *v51;
  const void *v52;
  const void *v53;
  const void *v54;
  CFDictionaryRef CFDictionaryRef;
  CFTypeRef v56;
  uint64_t i;
  const void *v58;
  const void *v59;
  NSObject *v60;
  CFStringRef v61;
  const char *CStringPtr;
  double v63;
  CFTypeRef v64;
  unint64_t v65;
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  unint64_t v71;
  BOOL v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  char *v77;
  float v78;
  float *v79;
  unint64_t v80;
  float v81;
  unint64_t v82;
  int v83;
  unsigned int v84;
  const __CFDictionary *v85;
  IR::IRDataLoader *v86;
  unsigned int v87;
  _DWORD *v88;
  std::string::size_type size;
  std::string *v90;
  std::string *v91;
  int data;
  int v93;
  std::string::size_type v95;
  std::string *v96;
  int v97;
  int v98;
  unsigned int Count;
  unint64_t v101;
  uint64_t v102;
  std::vector<unsigned int>::size_type v103;
  char v104;
  _DWORD *v105;
  _DWORD *v106;
  int v107;
  unint64_t v108;
  std::vector<unsigned int>::size_type v109;
  unint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  unsigned int v113;
  std::string::size_type v114;
  void *v115;
  int v116;
  CFTypeRef *v117;
  uint64_t v118;
  std::string *p_theString;
  int v120;
  int v121;
  int v122;
  int v123;
  BOOL v125;
  _BOOL4 v126;
  unsigned int *v127;
  unsigned int *v128;
  unsigned int *v129;
  _DWORD *v130;
  unint64_t v131;
  char *v132;
  _DWORD *v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unsigned int *v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int v145;
  float v146;
  int v147;
  int v148;
  const __CFDictionary *v149;
  const void *v150;
  unsigned int v151;
  IR::IRDataLoader::Implementation **v152;
  void *v153;
  __int32 v154;
  NSObject *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  void *v166;
  void *v167;
  std::string::size_type v168;
  uint64_t v169;
  NSObject *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  unint64_t v179;
  unsigned int v180;
  _DWORD *v181;
  _DWORD *v182;
  _DWORD *v183;
  char v184;
  _DWORD *v185;
  _DWORD *v186;
  _DWORD *v187;
  int v188;
  const __CFNumber *v189;
  const __CFNumber *v190;
  float v191;
  BOOL v192;
  const void *v193;
  int64_t v194;
  _BYTE *v195;
  _BYTE *v196;
  CFArrayRef *v197;
  BOOL v198;
  uint64_t *p_cf;
  int SizeDimension;
  unint64_t v201;
  char *v202;
  _DWORD *v203;
  char *v204;
  uint64_t v205;
  unint64_t v206;
  uint64_t v207;
  unint64_t v208;
  char *v209;
  unint64_t v210;
  _DWORD *v211;
  _QWORD *v212;
  int v213;
  _DWORD *v214;
  std::vector<unsigned int>::pointer begin;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  unint64_t v219;
  char *v220;
  char *v221;
  int v222;
  int v223;
  char *v224;
  char *v225;
  int v226;
  unint64_t v227;
  _DWORD *v228;
  _DWORD *v229;
  std::vector<unsigned int>::pointer v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  char *v235;
  char *v236;
  char *v237;
  int v238;
  unint64_t v239;
  char *v240;
  _DWORD *v241;
  char *v242;
  uint64_t v243;
  unint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  char *v248;
  char *v249;
  int v250;
  unint64_t v251;
  int v252;
  _DWORD *v253;
  _DWORD *v254;
  std::vector<int>::const_iterator v255;
  std::vector<unsigned int>::pointer v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  char *v261;
  uint8x8_t v262;
  char *v263;
  char *v264;
  int v265;
  unsigned int v266;
  unint64_t v267;
  float **p_C;
  float *v269;
  float *v270;
  float *v271;
  IR::DelayLine *v272;
  IR::DelayLine *v273;
  unsigned int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  unint64_t v280;
  float v281;
  float v282;
  int v283;
  vDSP_Length v284;
  IR::FFTFilterKernel *v285;
  void *v286;
  int v287;
  CFArrayRef v288;
  int v289;
  int v290;
  CFArrayRef v291;
  char v292;
  IR::DelayLine *v293;
  FILE *v294;
  NSObject *v296;
  int v297;
  const char *v298;
  std::logic_error *v299;
  NSObject *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  std::logic_error *v308;
  NSObject *v309;
  std::logic_error *v310;
  NSObject *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  NSObject *v319;
  std::logic_error *v320;
  void *v321;
  void *v322;
  void *v323;
  void *v324;
  void *v325;
  std::logic_error *v326;
  std::logic_error *v327;
  NSObject *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  std::logic_error *v336;
  NSObject *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  std::logic_error *v345;
  NSObject *v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  std::logic_error *v354;
  NSObject *v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  std::logic_error *v363;
  NSObject *v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  std::logic_error *v372;
  NSObject *v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  NSObject *v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  void *v389;
  void *v390;
  NSObject *v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  std::logic_error *v399;
  NSObject *v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  void *v408;
  NSObject *v409;
  uint64_t v410;
  std::logic_error *v411;
  std::logic_error *v412;
  void *v413;
  void *v414;
  void *v415;
  std::logic_error *v416;
  void *v417;
  uint64_t *v418;
  uint64_t k;
  uint64_t v420;
  std::logic_error *v421;
  void *v422;
  NSObject *v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  void *v431;
  void *v432;
  void *v433;
  uint64_t *v434;
  char v435;
  int *v436;
  std::vector<unsigned int> *v437;
  std::vector<unsigned int> *v438;
  unsigned int v439;
  unsigned int v440;
  const void **v441;
  CFDataRef *v442;
  unint64_t v443;
  uint64_t *v444;
  int v445;
  std::vector<unsigned int> *v446;
  char **v447;
  unsigned int v448;
  int *v449;
  unint64_t v450;
  uint64_t v451;
  unsigned int v452;
  IR::IRCoordinates *v453;
  unsigned int v454;
  int v455;
  void **v456;
  uint64_t v457;
  unsigned int *v458;
  uint64_t v459;
  CFTypeRef v461;
  __n128 __p;
  _QWORD v463[3];
  std::string theString;
  IR::DelayLine *v465;
  __int16 *__A;
  __int16 *v467;
  uint64_t v468;
  void *v469;
  void *v470;
  uint64_t v471;
  float *__C;
  float *v473;
  uint64_t v474;
  CFArrayRef v475;
  char v476;
  CFArrayRef v477;
  unsigned __int8 v478;
  CFTypeRef cf;
  void *v480;
  uint64_t v481;
  char v482;
  CFTypeRef v483;
  void *v484;
  const float *v485;
  float *v486[3];
  uint64_t v487;
  std::string::size_type v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  std::vector<unsigned int> v493;
  CFDictionaryRef theDict;
  CFArrayRef theArray;
  std::string v496;
  CFTypeRef v497;
  _BYTE *v498;
  uint64_t v499;
  CFTypeRef v500;
  float __B;
  const __CFDictionary *v502;
  const __CFDictionary *v503;
  unsigned int v504;
  FILE *v505;
  void (*v506)(void);
  _BYTE __ptr[12];
  __int16 v508;
  int v509;
  __int16 v510;
  unsigned int v511;
  __int16 v512;
  int v513;
  _BYTE buf[38];
  __int16 v515;
  double v516;
  __int16 v517;
  unsigned int v518;
  uint64_t v519;

  v519 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  v458 = (unsigned int *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  v436 = (int *)(a1 + 16);
  *(_OWORD *)(a1 + 28) = 0u;
  v449 = (int *)(a1 + 28);
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 24) = 0;
  v437 = (std::vector<unsigned int> *)(a1 + 40);
  *(_OWORD *)(a1 + 44) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0xFFFF0000FFFF0000;
  *(_OWORD *)(a1 + 80) = 0u;
  v456 = (void **)(a1 + 80);
  v438 = (std::vector<unsigned int> *)(a1 + 104);
  *(_OWORD *)(a1 + 128) = 0u;
  v447 = (char **)(a1 + 128);
  v446 = (std::vector<unsigned int> *)(a1 + 200);
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  v453 = (IR::IRCoordinates *)(a1 + 224);
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)(a1 + 224));
  *(_BYTE *)(a1 + 328) = 0;
  v441 = (const void **)(a1 + 296);
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)(a1 + 336), (const IR::IRDataAttributes *)a2);
  *(_BYTE *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 496) = 0;
  *(_DWORD *)(a1 + 492) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_QWORD *)(a1 + 504) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  v8 = operator new(0x30uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_24CA2CAA8;
  v8[4] = 0;
  v8[5] = 0;
  v8[3] = 0;
  *(_QWORD *)buf = v8 + 3;
  *(_QWORD *)&buf[8] = v8;
  v9 = (IR::IRData::Implementation *)std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](a1 + 264, (__int128 *)buf);
  v10 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v11 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  IR::IRData::Implementation::getEmptyIRDataNode(v9);
  IR::IRCoordinates::reset(v453);
  *(_BYTE *)(a1 + 488) = *(_DWORD *)(a2 + 20) == 1;
  if (!*a3)
  {
    IR::getFilePtr((CFTypeRef *)a2, (const IR::IRDataAttributes *)1, &v505);
    if (v505)
      goto LABEL_9;
LABEL_28:
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v23 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v23, v24, v25, v26, v27, v28, v29, v30);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Unable to load IR file");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  BytePtr = (UInt8 *)CFDataGetBytePtr(*a3);
  if (!*a3)
  {
    v414 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v414, "Could not construct");
  }
  Length = CFDataGetLength(*a3);
  v505 = fmemopen(BytePtr, Length, "r");
  v506 = (void (*)(void))MEMORY[0x24BDAE2E0];
  if (!v505)
    goto LABEL_28;
LABEL_9:
  v442 = a3;
  FileByteSize = IR::IRData::Implementation::getFileByteSize(&v505);
  v504 = 0;
  IR::IRData::Implementation::readIRPlist(&v505, &v504, &v503);
  v16 = *(const void **)(a1 + 288);
  v17 = v503;
  *(_QWORD *)(a1 + 288) = v503;
  if (v17)
    CFRetain(v17);
  if (v16)
    CFRelease(v16);
  if (!v17)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v328 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v328, v329, v330, v331, v332, v333, v334, v335);
    v336 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v336, "Unable to load IR file header");
    v336->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (*(_DWORD *)(a2 + 40))
  {
    CFRetain(v17);
    v502 = v17;
    IR::IRData::Implementation::extractIRDataTypePlist(&v502, *(_DWORD *)(a2 + 40), &v504, (applesauce::CF::DictionaryRef *)buf);
    v18 = *(const __CFDictionary **)buf;
    v503 = *(const __CFDictionary **)buf;
    *(_QWORD *)buf = v17;
    CFRelease(v17);
    if (v502)
      CFRelease(v502);
    v17 = v18;
    if (!v18)
    {
      v415 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v415, "Could not construct");
    }
  }
  *(_DWORD *)buf = 0;
  v19 = applesauce::CF::at_or<float,char const(&)[11]>(v17, "SampleRate", (uint64_t)buf);
  if (fabsf(v19) < 0.1)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v337 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v337, v338, v339, v340, v341, v342, v343, v344);
    v345 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v345, "IR file's native sample rate is zero.");
    v345->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  *(float *)(a1 + 4) = v19;
  *(_DWORD *)buf = 0;
  v440 = applesauce::CF::at_or<unsigned int,char const(&)[13]>(v17, "FilterLength", (unsigned int *)buf);
  if (!v440)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v346 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v346, v347, v348, v349, v350, v351, v352, v353);
    v354 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v354, "Invalid filter length.");
    v354->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  theString.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("UserData");
  cf = 0;
  applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*>(v17, (const void **)&theString.__r_.__value_.__l.__data_, &cf, buf);
  v20 = *v441;
  *v441 = *(const void **)buf;
  *(_QWORD *)buf = v20;
  if (v20)
    CFRelease(v20);
  if (cf)
    CFRelease(cf);
  __B = 0.0;
  *(_DWORD *)buf = 1065353216;
  __B = applesauce::CF::at_or<float,char const(&)[18]>(v17, "FilterScaleFactor", (uint64_t)buf);
  v21 = *(float *)(a2 + 8);
  if (v21 == 0.0)
  {
    v457 = 0;
    *(float *)a1 = v19;
    LODWORD(v22) = v440;
    goto LABEL_107;
  }
  *(float *)a1 = v21;
  if (vabds_f32(v19, v21) < 0.1)
  {
    v457 = 0;
    LODWORD(v22) = v440;
    v19 = v21;
    goto LABEL_107;
  }
  v33 = v440 < 0x101 || *(_DWORD *)(a2 + 48) != 0;
  if (*v441)
  {
    *(_QWORD *)buf = v441;
    v34 = applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const*&>((const __CFDictionary ***)buf, (const void **)IR::kIRDataResamplerTypeKey);
    if (((unint64_t)v34 & 0xFF00000000) != 0 && v34 < 3)
      v33 = (int)v34;
  }
  cf = 0;
  if (v33 == 2)
  {
    v457 = operator new();
    IR::MPResampler<float>::MPResampler(v457, v440, v19, *(float *)a1);
    LODWORD(v496.__r_.__value_.__l.__data_) = 0;
    v42 = (const __CFDictionary *)*v441;
    if (*v441)
    {
      *(_DWORD *)buf = 0;
      v43 = applesauce::CF::at_or<unsigned int,__CFString const*&>(v42, (const void **)&IR::kMPResamplerConfigExtrapMethodKey, (unsigned int *)buf);
      v42 = (const __CFDictionary *)*v441;
      LODWORD(v496.__r_.__value_.__l.__data_) = v43;
      LODWORD(v493.__begin_) = 0;
      if (v42)
      {
        *(_DWORD *)buf = 0;
        LODWORD(v42) = applesauce::CF::at_or<unsigned int,__CFString const*&>(v42, (const void **)&IR::kMPResamplerConfigInterpMethodKey, (unsigned int *)buf);
      }
    }
    else
    {
      LODWORD(v496.__r_.__value_.__l.__data_) = 0;
    }
    LODWORD(v493.__begin_) = (_DWORD)v42;
    v53 = (const void *)IR::kMPResamplerConfigExtrapMethodKey;
    if (IR::kMPResamplerConfigExtrapMethodKey)
      CFRetain((CFTypeRef)IR::kMPResamplerConfigExtrapMethodKey);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__ptr, v53);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int &>(buf, (CFTypeRef *)__ptr, (int *)&v496);
    v54 = (const void *)IR::kMPResamplerConfigInterpMethodKey;
    if (IR::kMPResamplerConfigInterpMethodKey)
      CFRetain((CFTypeRef)IR::kMPResamplerConfigInterpMethodKey);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v497, v54);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int &>(&buf[16], &v497, (int *)&v493);
    theString.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
    theString.__r_.__value_.__l.__size_ = 2;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&theString);
    v56 = cf;
    cf = CFDictionaryRef;
    if (v56)
      CFRelease(v56);
    for (i = 0; i != -32; i -= 16)
    {
      v58 = *(const void **)&buf[i + 24];
      if (v58)
        CFRelease(v58);
      v59 = *(const void **)&buf[i + 16];
      if (v59)
        CFRelease(v59);
    }
    if (v497)
      CFRelease(v497);
    v52 = *(const void **)__ptr;
    if (!*(_QWORD *)__ptr)
      goto LABEL_93;
LABEL_92:
    CFRelease(v52);
    goto LABEL_93;
  }
  if (v33 == 1)
  {
    v457 = operator new();
    IR::MatrixResampler<float>::MatrixResampler(v457, v440, v19, *(float *)a1);
    LODWORD(v493.__begin_) = 0;
    v36 = (const __CFDictionary *)*v441;
    if (*v441)
    {
      *(_DWORD *)buf = 1064011039;
      v37 = applesauce::CF::at_or<float,__CFString const*&>(v36, (const void **)&IR::kIRDataResamplerConfigQualityKey, (uint64_t)buf);
      v38 = (const __CFDictionary *)*v441;
      *(float *)&v493.__begin_ = v37;
      LODWORD(v490) = 0;
      if (v38)
      {
        *(_DWORD *)buf = 5;
        v39 = applesauce::CF::at_or<unsigned int,__CFString const*&>(v38, (const void **)&IR::kMatrixResamplerConfigLatencySamplesKey, (unsigned int *)buf);
        v40 = (const __CFDictionary *)*v441;
        LODWORD(v490) = v39;
        LODWORD(v487) = 0;
        v41 = 20;
        if (v40)
        {
          *(_DWORD *)buf = 20;
          v41 = applesauce::CF::at_or<unsigned int,__CFString const*&>(v40, (const void **)&IR::kMatrixResamplerConfigPostRingSamplesKey, (unsigned int *)buf);
        }
LABEL_56:
        LODWORD(v487) = v41;
        v44 = (const void *)IR::kIRDataResamplerConfigQualityKey;
        if (IR::kIRDataResamplerConfigQualityKey)
          CFRetain((CFTypeRef)IR::kIRDataResamplerConfigQualityKey);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__ptr, v44);
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float &>(buf, (CFTypeRef *)__ptr, (int *)&v493);
        v45 = (const void *)IR::kMatrixResamplerConfigLatencySamplesKey;
        if (IR::kMatrixResamplerConfigLatencySamplesKey)
          CFRetain((CFTypeRef)IR::kMatrixResamplerConfigLatencySamplesKey);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v497, v45);
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int &>(&buf[16], &v497, (int *)&v490);
        v46 = (const void *)IR::kMatrixResamplerConfigPostRingSamplesKey;
        if (IR::kMatrixResamplerConfigPostRingSamplesKey)
          CFRetain((CFTypeRef)IR::kMatrixResamplerConfigPostRingSamplesKey);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v496, v46);
        applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int &>(&buf[32], (CFTypeRef *)&v496.__r_.__value_.__l.__data_, (int *)&v487);
        theString.__r_.__value_.__r.__words[0] = (std::string::size_type)buf;
        theString.__r_.__value_.__l.__size_ = 3;
        v47 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&theString);
        v48 = cf;
        cf = v47;
        if (v48)
          CFRelease(v48);
        for (j = 0; j != -48; j -= 16)
        {
          v50 = *(const void **)((char *)&v516 + j);
          if (v50)
            CFRelease(v50);
          v51 = *(const void **)&buf[j + 32];
          if (v51)
            CFRelease(v51);
        }
        if (v496.__r_.__value_.__r.__words[0])
          CFRelease(v496.__r_.__value_.__l.__data_);
        if (v497)
          CFRelease(v497);
        v52 = *(const void **)__ptr;
        if (!*(_QWORD *)__ptr)
          goto LABEL_93;
        goto LABEL_92;
      }
    }
    else
    {
      LODWORD(v493.__begin_) = 1064011039;
    }
    LODWORD(v490) = 5;
    v41 = 20;
    goto LABEL_56;
  }
  v35 = operator new();
  IR::DataResampler<float>::DataResampler(v35, v440, v19, *(float *)a1);
  v457 = v35;
  __B = __B * (float)(*(float *)(v35 + 12) / *(float *)(v35 + 16));
LABEL_93:
  if (IR::getIRDataLog(void)::onceToken != -1)
    dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
  v60 = IR::getIRDataLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
  {
    if (!*(_QWORD *)a2)
    {
      v432 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v432, "Could not construct");
    }
    v61 = CFURLCopyFileSystemPath(*(CFURLRef *)a2, kCFURLPOSIXPathStyle);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v61);
    CStringPtr = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
    v63 = *(float *)a1;
    *(_DWORD *)buf = 136316418;
    *(_QWORD *)&buf[4] = "Implementation";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v33;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = CStringPtr;
    *(_WORD *)&buf[28] = 2048;
    *(double *)&buf[30] = v19;
    v515 = 2048;
    v516 = v63;
    v517 = 1024;
    v518 = v440;
    _os_log_impl(&dword_210570000, v60, OS_LOG_TYPE_DEFAULT, "IRData::%s: Resampler type = %u for fileURL: %s. input SR = %.1f, output SR = %.1f, nativeFilterLength = %u", buf, 0x36u);
    if (theString.__r_.__value_.__r.__words[0])
      CFRelease(theString.__r_.__value_.__l.__data_);
  }
  v64 = cf;
  if (cf)
    CFRetain(cf);
  v500 = v64;
  v22 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)v457 + 16))(v457, &v500);
  if (v500)
    CFRelease(v500);
  v65 = HIDWORD(v22);
  if (HIDWORD(v22) || !(_DWORD)v22)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v296 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
    {
      v297 = *(_DWORD *)(a2 + 40);
      *(_QWORD *)__ptr = applesauce::CF::URLRef::operator->((_QWORD *)a2);
      applesauce::CF::URLRef_proxy::get_filesystem_path((CFURLRef **)__ptr, (applesauce::CF::StringRef *)&theString);
      v298 = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "Implementation";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v65;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v297;
      *(_WORD *)&buf[24] = 2080;
      *(_QWORD *)&buf[26] = v298;
      _os_log_error_impl(&dword_210570000, v296, OS_LOG_TYPE_ERROR, "IRData::%s: SRC builder returned error: %d. IRType: %u, fileURL: %s", buf, 0x22u);
      applesauce::CF::StringRef::~StringRef((const void **)&theString.__r_.__value_.__l.__data_);
    }
    v299 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v299, "SRC failed to initialize");
    v299->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (cf)
    CFRelease(cf);
LABEL_107:
  v66 = *(_DWORD *)(a2 + 24);
  if (v22 <= v66)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v355 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v355, v356, v357, v358, v359, v360, v361, v362);
    v363 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v363, "Window start sample beyond end of filter");
    v363->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v67 = FileByteSize;
  v68 = *(_DWORD *)(a2 + 32);
  v69 = *(_DWORD *)(a2 + 36);
  v70 = *(_DWORD *)(a2 + 28);
  LODWORD(v71) = v68 + v66;
  if (v68)
    v72 = v71 > v22;
  else
    v72 = 1;
  v73 = v72;
  v459 = *(unsigned int *)(a2 + 24);
  v74 = v22 - v66;
  if (v73)
  {
    v68 = v74;
    v71 = v22;
  }
  else
  {
    v71 = v71;
  }
  v450 = v71;
  if (v69 + v70 <= v68)
  {
    v75 = *(_DWORD *)(a2 + 28);
  }
  else
  {
    do
    {
      v75 = v70 >> 1;
      v69 >>= 1;
      v76 = v69 + (v70 >> 1);
      v70 >>= 1;
    }
    while (v76 > v68);
  }
  v498 = 0;
  v497 = 0;
  v499 = 0;
  if ((int)v450 >= 1 && *(float *)(a2 + 116) > 0.00000011921)
  {
    *(_DWORD *)buf = 0;
    std::vector<float>::assign((char **)&v497, v450, buf);
    v77 = (char *)v497;
    *(_DWORD *)v497 = 1065353216;
    v78 = expf((float)-*(float *)(a2 + 116) / *(float *)a1);
    if (v450 >= 2)
    {
      v79 = (float *)(v77 + 4);
      v80 = v450 - 1;
      v81 = 1.0;
      do
      {
        v81 = v78 * v81;
        *v79++ = v81;
        --v80;
      }
      while (v80);
    }
  }
  v82 = v450 - v69;
  if (v450 < v69)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v364 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v364, v365, v366, v367, v368, v369, v370, v371);
    v372 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v372, "Length of fadeout is greater than filter");
LABEL_681:
    v372->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  if (v82 < v75 + v459)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v373 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v373, v374, v375, v376, v377, v378, v379, v380);
    v372 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v372, "Start of fadeout is before window fadein");
    goto LABEL_681;
  }
  if (v450 <= v459)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v381 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v381, v382, v383, v384, v385, v386, v387, v388);
    v372 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v372, "Start of fadeout is beyond end of filter");
    goto LABEL_681;
  }
  *v458 = v450 - v459;
  v439 = v450;
  if (v457)
  {
    v439 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v457 + 40))(v457, v450);
    v17 = v503;
  }
  if (!v17)
  {
    v389 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v389, "Could not construct");
  }
  *(_QWORD *)buf = CFSTR("AudioChannelLayoutTag");
  if (applesauce::CF::details::has_key<__CFString const*>(v17, (const void **)buf))
  {
    if (!v503)
    {
      v422 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v422, "Could not construct");
    }
    v83 = applesauce::CF::details::find_at_key<unsigned int,char const(&)[22]>(v503, "AudioChannelLayoutTag");
    *(_DWORD *)(a1 + 72) = v83;
    *(_DWORD *)(a1 + 76) = v83;
  }
  v84 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = v84;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 16);
  if (v84)
  {
    if (v84 <= 2)
      v84 = 2;
    *v436 = v84;
  }
  v85 = v503;
  if (!v503)
  {
    v390 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v390, "Could not construct");
  }
  *(_DWORD *)buf = 0;
  v86 = (IR::IRDataLoader *)applesauce::CF::at_or<unsigned int,char const(&)[12]>(v503, "NumChannels", (unsigned int *)buf);
  *(_DWORD *)(a1 + 68) = (_DWORD)v86;
  if (!(_DWORD)v86)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v391 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v391, v392, v393, v394, v395, v396, v397, v398);
    v399 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v399, "NumChannels was either not specified or read as 0");
    v399->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v87 = *(_DWORD *)(a2 + 100);
  if ((v87 | 0x10000) == 0x10000)
  {
    v88 = (_DWORD *)a1;
    *(_DWORD *)(a1 + 32) = 0;
LABEL_143:
    v88[8] = (_DWORD)v86;
    goto LABEL_144;
  }
  v152 = IR::IRDataLoader::instance(v86);
  IR::IRDataLoader::getCustomLayoutFromTag(v152, v87, (uint64_t)buf);
  if (buf[24])
  {
    v153 = *(void **)buf;
    if (**(_DWORD **)buf == 0x10000)
    {
      v262 = (uint8x8_t)vcnt_s8((int8x8_t)*(unsigned int *)(*(_QWORD *)buf + 4));
      v262.i16[0] = vaddlv_u8(v262);
      v154 = v262.i32[0];
    }
    else if (**(_DWORD **)buf)
    {
      v154 = (unsigned __int16)**(_DWORD **)buf;
    }
    else
    {
      v154 = *(_DWORD *)(*(_QWORD *)buf + 8);
    }
    v88 = (_DWORD *)a1;
    *(_DWORD *)(a1 + 32) = v154;
    *(_QWORD *)&buf[8] = v153;
    operator delete(v153);
    v223 = *(_DWORD *)(a1 + 32);
  }
  else
  {
    v223 = (unsigned __int16)v87;
    v88 = (_DWORD *)a1;
    *(_DWORD *)(a1 + 32) = (unsigned __int16)v87;
  }
  LODWORD(v86) = v88[17];
  if (v223 - 1 >= v86)
    goto LABEL_143;
LABEL_144:
  *(_DWORD *)buf = 0;
  v88[16] = applesauce::CF::at_or<unsigned int,char const(&)[20]>(v85, "TotalNumCoordinates", (unsigned int *)buf);
  memset(buf, 0, 24);
  applesauce::CF::at_or<std::string,char const(&)[18]>(v85, "CoefficientFormat", (uint64_t)buf, &v496);
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v496.__r_.__value_.__r.__words[2]);
  else
    size = v496.__r_.__value_.__l.__size_;
  if (size == 5)
  {
    v91 = &v496;
    if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v91 = (std::string *)v496.__r_.__value_.__r.__words[0];
    data = (int)v91->__r_.__value_.__l.__data_;
    v93 = v91->__r_.__value_.__s.__data_[4];
    if (data == 829714025 && v93 == 54)
    {
      v455 = 1;
      goto LABEL_164;
    }
    goto LABEL_694;
  }
  if (size != 7)
  {
    if (!size)
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v400 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::Implementation(v400, v401, v402, v403, v404, v405, v406, v407);
      goto LABEL_698;
    }
LABEL_694:
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation();
LABEL_698:
    v327 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v327, "Uunsupported coefficient format");
    goto LABEL_699;
  }
  if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v90 = &v496;
  else
    v90 = (std::string *)v496.__r_.__value_.__r.__words[0];
  if (memcmp(v90, "float32", 7uLL))
    goto LABEL_694;
  v455 = 0;
LABEL_164:
  memset(&theString, 0, sizeof(theString));
  applesauce::CF::at_or<std::string,char const(&)[12]>(v85, "DelayFormat", (uint64_t)&theString, (std::string *)buf);
  if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v496.__r_.__value_.__l.__data_);
  v496 = *(std::string *)buf;
  buf[23] = 0;
  buf[0] = 0;
  if (SHIBYTE(theString.__r_.__value_.__r.__words[2]) < 0)
    operator delete(theString.__r_.__value_.__l.__data_);
  v95 = HIBYTE(v496.__r_.__value_.__r.__words[2]);
  if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v95 = v496.__r_.__value_.__l.__size_;
  if (v95 != 7)
    goto LABEL_641;
  v96 = &v496;
  if ((v496.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v96 = (std::string *)v496.__r_.__value_.__r.__words[0];
  v97 = (int)v96->__r_.__value_.__l.__data_;
  v98 = *(_DWORD *)((char *)v96->__r_.__value_.__r.__words + 3);
  if (v97 != 1634692198 || v98 != 842232929)
  {
LABEL_641:
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation();
    v327 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v327, "Unsupported delay format");
LABEL_699:
    v327->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  *(_QWORD *)buf = CFSTR("Dimensions");
  theString.__r_.__value_.__r.__words[0] = 0;
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(v85, (const void **)buf, &theString, &theArray);
  if (theString.__r_.__value_.__r.__words[0])
    CFRelease(theString.__r_.__value_.__l.__data_);
  if (!theArray)
  {
    v408 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v408, "Could not construct");
  }
  Count = CFArrayGetCount(theArray);
  *v449 = Count;
  if (Count >= 0xA)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v409 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation(v449, v409, v410);
    v411 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v411, "size of Dimensions array goes beyond scope");
    v411->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  v101 = v67 - MEMORY[0x212BC7BB0](v505);
  v102 = v504;
  if (v504)
  {
    if (v101 < v504)
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::Implementation();
      v416 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v416, "Not enough bytes to skip");
      v416->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    }
    fseek(v505, v504, 1);
    v101 -= v102;
  }
  v103 = *(unsigned int *)(a1 + 32);
  v104 = 1;
  if (!v455)
    v104 = 2;
  v435 = v104;
  if (v101 < ((((unint64_t)v439 << v104) + 4) * v103 + 4 * *(unsigned int *)(a1 + 28))
            * *(unsigned int *)(a1 + 64))
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::Implementation();
    v412 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v412, "Not enough bytes to read");
    v412->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  std::vector<int>::resize(v437, v103);
  v105 = *(_DWORD **)(a1 + 40);
  v106 = *(_DWORD **)(a1 + 48);
  if (v105 != v106)
  {
    v107 = 0;
    do
      *v105++ = v107++;
    while (v105 != v106);
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a1 + 80);
  v108 = *(unsigned int *)(a1 + 28);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(v447, v108, buf);
  v444 = a4;
  v109 = *v449;
  *(_DWORD *)buf = 1;
  std::vector<IR::IRInterpolationMethod>::assign(v446, v109, (std::vector<unsigned int>::const_reference)buf);
  memset(buf, 0, 36);
  IR::IRCoordinates::getAllCoordinates((uint64_t)buf);
  v451 = a2;
  if (!*v449)
    goto LABEL_278;
  v110 = 0;
  v111 = (_QWORD *)(a1 + 96);
  do
  {
    if (!theArray)
    {
      v321 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v321, "Could not construct");
    }
    theString.__r_.__value_.__r.__words[0] = 0;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef>(theArray, v110, &theString, __ptr);
    if (theString.__r_.__value_.__r.__words[0])
      CFRelease(theString.__r_.__value_.__l.__data_);
    if (!*(_QWORD *)__ptr)
    {
      v322 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v322, "Could not construct");
    }
    cf = 0;
    v480 = 0;
    v481 = 0;
    applesauce::CF::at_or<std::string,char const(&)[5]>(*(const __CFDictionary **)__ptr, "Name", (uint64_t)&cf, &theString);
    if (SHIBYTE(v481) < 0)
      operator delete((void *)cf);
    v112 = 0;
    while (1)
    {
      v113 = *(_DWORD *)&buf[4 * v112];
      IR::IRCoordinates::getParameterString(v113, &cf);
      if ((theString.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v114 = HIBYTE(theString.__r_.__value_.__r.__words[2]);
      else
        v114 = theString.__r_.__value_.__l.__size_;
      v115 = (void *)HIBYTE(v481);
      v116 = SHIBYTE(v481);
      if (v481 < 0)
        v115 = v480;
      if ((void *)v114 == v115)
      {
        v117 = v481 >= 0 ? &cf : (CFTypeRef *)cf;
        if ((*((_BYTE *)&theString.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          v126 = memcmp(theString.__r_.__value_.__l.__data_, v117, theString.__r_.__value_.__l.__size_) == 0;
          if ((v116 & 0x80000000) == 0)
            goto LABEL_218;
        }
        else if (*((_BYTE *)&theString.__r_.__value_.__s + 23))
        {
          v118 = HIBYTE(theString.__r_.__value_.__r.__words[2]) - 1;
          p_theString = &theString;
          do
          {
            v121 = p_theString->__r_.__value_.__s.__data_[0];
            p_theString = (std::string *)((char *)p_theString + 1);
            v120 = v121;
            v123 = *(unsigned __int8 *)v117;
            v117 = (CFTypeRef *)((char *)v117 + 1);
            v122 = v123;
            v125 = v118-- != 0;
            v126 = v120 == v122;
          }
          while (v120 == v122 && v125);
          if ((SHIBYTE(v481) & 0x80000000) == 0)
          {
LABEL_218:
            if (v126)
              break;
            goto LABEL_222;
          }
        }
        else
        {
          v126 = 1;
          if ((SHIBYTE(v481) & 0x80000000) == 0)
            goto LABEL_218;
        }
      }
      else
      {
        v126 = 0;
        if ((SHIBYTE(v481) & 0x80000000) == 0)
          goto LABEL_218;
      }
      operator delete((void *)cf);
      if (v126)
        break;
LABEL_222:
      ++v112;
      a2 = v451;
      if (v112 == 9)
      {
        v132 = *(char **)(a1 + 88);
        v131 = *(_QWORD *)(a1 + 96);
        if ((unint64_t)v132 < v131)
        {
          *(_DWORD *)v132 = 6;
          v130 = v132 + 4;
          goto LABEL_238;
        }
        v127 = (unsigned int *)*v456;
        v139 = (v132 - (_BYTE *)*v456) >> 2;
        v140 = v139 + 1;
        if ((unint64_t)(v139 + 1) >> 62)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v141 = v131 - (_QWORD)v127;
        if (v141 >> 1 > v140)
          v140 = v141 >> 1;
        if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL)
          v137 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v137 = v140;
        if (v137)
        {
          v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v111, v137);
          v127 = *(unsigned int **)(a1 + 80);
          v132 = *(char **)(a1 + 88);
        }
        else
        {
          v138 = 0;
        }
        v142 = (unsigned int *)&v138[4 * v139];
        *v142 = 6;
        v133 = v142 + 1;
        while (v132 != (char *)v127)
        {
          v144 = *((_DWORD *)v132 - 1);
          v132 -= 4;
          *--v142 = v144;
        }
        goto LABEL_263;
      }
    }
    v127 = *(unsigned int **)(a1 + 80);
    v128 = *(unsigned int **)(a1 + 88);
    v129 = v127;
    if (v127 != v128)
    {
      while (*v129 != v113)
      {
        if (++v129 == v128)
        {
          v129 = *(unsigned int **)(a1 + 88);
          break;
        }
      }
    }
    if (v113 != 6 && v129 != v128)
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::Implementation();
      v326 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v326, "Duplicate coordinate");
      v326->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    }
    a2 = v451;
    if ((unint64_t)v128 < *v111)
    {
      *v128 = v113;
      v130 = v128 + 1;
LABEL_238:
      v133 = v130;
      goto LABEL_265;
    }
    v134 = v128 - v127;
    v135 = v134 + 1;
    if ((unint64_t)(v134 + 1) >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v136 = *v111 - (_QWORD)v127;
    if (v136 >> 1 > v135)
      v135 = v136 >> 1;
    if ((unint64_t)v136 >= 0x7FFFFFFFFFFFFFFCLL)
      v137 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v137 = v135;
    if (v137)
    {
      v138 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v111, v137);
      v127 = *(unsigned int **)(a1 + 80);
      v128 = *(unsigned int **)(a1 + 88);
    }
    else
    {
      v138 = 0;
    }
    v142 = (unsigned int *)&v138[4 * v134];
    *v142 = v113;
    v133 = v142 + 1;
    while (v128 != v127)
    {
      v143 = *--v128;
      *--v142 = v143;
    }
LABEL_263:
    *(_QWORD *)(a1 + 80) = v142;
    *(_QWORD *)(a1 + 88) = v133;
    *(_QWORD *)(a1 + 96) = &v138[4 * v137];
    if (v127)
      operator delete(v127);
LABEL_265:
    *(_QWORD *)(a1 + 88) = v133;
    if (!*(_QWORD *)__ptr)
    {
      v323 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v323, "Could not construct");
    }
    v145 = *((_DWORD *)*v456 + v110);
    LODWORD(cf) = 0;
    v146 = applesauce::CF::at_or<float,char const(&)[13]>(*(const __CFDictionary **)__ptr, "DefaultValue", (uint64_t)&cf);
    IR::IRCoordinates::set((uint64_t)v453, v145, v146);
    if (!*(_QWORD *)__ptr)
    {
      v324 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v324, "Could not construct");
    }
    LODWORD(cf) = 0;
    *(float *)&(*v447)[4 * v110] = applesauce::CF::at_or<float,char const(&)[12]>(*(const __CFDictionary **)__ptr, "Periodicity", (uint64_t)&cf);
    if (!*(_QWORD *)__ptr)
    {
      v325 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v325, "Could not construct");
    }
    LODWORD(cf) = 0;
    v147 = applesauce::CF::at_or<unsigned int,char const(&)[14]>(*(const __CFDictionary **)__ptr, "Interpolation", (unsigned int *)&cf);
    if (v147 == 2)
      v148 = 2;
    else
      v148 = 1;
    if (!v147)
      v148 = 0;
    v446->__begin_[v110] = v148;
    if (SHIBYTE(theString.__r_.__value_.__r.__words[2]) < 0)
      operator delete(theString.__r_.__value_.__l.__data_);
    if (*(_QWORD *)__ptr)
      CFRelease(*(CFTypeRef *)__ptr);
    ++v110;
  }
  while (v110 < *v449);
LABEL_278:
  cf = CFSTR("Description");
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__ptr, "");
  v149 = v503;
  applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>(v503, &cf, __ptr, &theString);
  v150 = *(const void **)(a1 + 280);
  *(_QWORD *)(a1 + 280) = theString.__r_.__value_.__r.__words[0];
  theString.__r_.__value_.__r.__words[0] = (std::string::size_type)v150;
  v151 = v450;
  if (v150)
    CFRelease(v150);
  if (*(_QWORD *)__ptr)
    CFRelease(*(CFTypeRef *)__ptr);
  if (!v149)
  {
    v413 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v413, "Could not construct");
  }
  theString.__r_.__value_.__r.__words[0] = (std::string::size_type)CFSTR("TriangulationData");
  cf = 0;
  applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*>(v149, (const void **)&theString.__r_.__value_.__l.__data_, &cf, &theDict);
  if (cf)
    CFRelease(cf);
  memset(&v493, 0, sizeof(v493));
  v491 = 0;
  v490 = 0;
  v492 = 0;
  v488 = 0;
  v487 = 0;
  v489 = 0;
  if (theDict)
  {
    if (CFDictionaryGetCount(theDict) >= 1 && *(_DWORD *)(a2 + 20))
    {
      if (IR::IRData::Implementation::loadTriangulationData(a1, *(_DWORD *)(a1 + 64), &theDict, &v493, &v490, &v487))
      {
        *(_BYTE *)(a1 + 488) = 1;
      }
      else
      {
        v163 = v490;
        v164 = v491;
        if (v491 != v490)
        {
          v165 = v491;
          do
          {
            v167 = *(void **)(v165 - 24);
            v165 -= 24;
            v166 = v167;
            if (v167)
            {
              *(_QWORD *)(v164 - 16) = v166;
              operator delete(v166);
            }
            v164 = v165;
          }
          while (v165 != v163);
        }
        v491 = v163;
        v168 = v488;
        v169 = v487;
        while (v168 != v169)
        {
          v168 -= 24;
          theString.__r_.__value_.__r.__words[0] = v168;
          std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&theString);
        }
        v488 = v169;
        v493.__end_ = v493.__begin_;
        if (IR::getIRDataLog(void)::onceToken != -1)
          dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
        v170 = IR::getIRDataLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
          IR::IRData::Implementation::Implementation(v170, v171, v172, v173, v174, v175, v176, v177);
      }
    }
    else if (theDict && !CFDictionaryGetCount(theDict))
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v155 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::Implementation(v155, v156, v157, v158, v159, v160, v161, v162);
    }
  }
  std::vector<float>::vector(v486, v75);
  if (v75)
  {
    IR::calculateFadeInWindow(v75, v486);
    v178 = v450 - v459;
    if (v75 + v459 <= v450)
      v178 = v75;
    v454 = v178;
  }
  else
  {
    v454 = 0;
  }
  if ((int)v82 >= (int)v450)
    v179 = 0;
  else
    v179 = v69;
  std::vector<float>::vector(&v484, v179);
  if ((_DWORD)v179)
  {
    IR::calculateFadeInWindow(v179, (float **)&v484);
    if ((int)v179 + (int)v82 <= v450)
      v180 = v179;
    else
      v180 = v69;
    v452 = v180;
  }
  else
  {
    v452 = 0;
  }
  if (!*(_BYTE *)(a1 + 488))
  {
LABEL_338:
    std::vector<int>::resize(v438, *v449);
    v186 = *(_DWORD **)(a1 + 104);
    v187 = *(_DWORD **)(a1 + 112);
    if (v186 != v187)
    {
      v188 = 0;
      do
        *v186++ = v188++;
      while (v186 != v187);
    }
    goto LABEL_341;
  }
  v181 = *(_DWORD **)(a1 + 80);
  v182 = *(_DWORD **)(a1 + 88);
  if (v181 == v182)
  {
LABEL_331:
    *(_BYTE *)(a1 + 488) = 0;
    v184 = 1;
  }
  else
  {
    v183 = *(_DWORD **)(a1 + 80);
    while (*v183)
    {
      if (++v183 == v182)
        goto LABEL_331;
    }
    v184 = 0;
  }
  if (v181 == v182)
  {
LABEL_337:
    *(_BYTE *)(a1 + 488) = 0;
    goto LABEL_338;
  }
  v185 = v181;
  while (*v185 != 1)
  {
    if (++v185 == v182)
      goto LABEL_337;
  }
  if ((v184 & 1) != 0)
    goto LABEL_338;
  v210 = 0;
  v211 = *(_DWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 112) = v211;
  v212 = (_QWORD *)(a1 + 120);
  do
  {
    v213 = v181[v210];
    if (v213)
    {
      if (v213 == 1)
      {
        *(_DWORD *)(a1 + 496) = v210;
      }
      else
      {
        if ((unint64_t)v211 >= *v212)
        {
          begin = v438->__begin_;
          v216 = v211 - v438->__begin_;
          v217 = v216 + 1;
          if ((unint64_t)(v216 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v218 = *v212 - (_QWORD)begin;
          if (v218 >> 1 > v217)
            v217 = v218 >> 1;
          if ((unint64_t)v218 >= 0x7FFFFFFFFFFFFFFCLL)
            v219 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v219 = v217;
          if (v219)
          {
            v220 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v212, v219);
            begin = *(std::vector<unsigned int>::pointer *)(a1 + 104);
            v211 = *(_DWORD **)(a1 + 112);
          }
          else
          {
            v220 = 0;
          }
          v221 = &v220[4 * v216];
          *(_DWORD *)v221 = v210;
          v214 = v221 + 4;
          while (v211 != begin)
          {
            v222 = *--v211;
            *((_DWORD *)v221 - 1) = v222;
            v221 -= 4;
          }
          *(_QWORD *)(a1 + 104) = v221;
          *(_QWORD *)(a1 + 112) = v214;
          *(_QWORD *)(a1 + 120) = &v220[4 * v219];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *v211 = v210;
          v214 = v211 + 1;
        }
        *(_QWORD *)(a1 + 112) = v214;
        v211 = v214;
        v181 = *(_DWORD **)(a1 + 80);
        v182 = *(_DWORD **)(a1 + 88);
        v151 = v450;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 492) = v210;
    }
    ++v210;
  }
  while (v210 < v182 - v181);
LABEL_341:
  if (*v441)
  {
    theString.__r_.__value_.__r.__words[0] = (std::string::size_type)v441;
    v189 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[21]>((const __CFDictionary ***)&theString, "DiffuseFieldPowerRMS");
    if (((unint64_t)v189 & 0xFF00000000) != 0 && fabsf(*(float *)&v189) > 0.00000011921)
      __B = __B / *(float *)&v189;
    if (!*v441)
    {
      v417 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v417, "Could not construct");
    }
    theString.__r_.__value_.__r.__words[0] = (std::string::size_type)v441;
    v190 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[14]>((const __CFDictionary ***)&theString, "ModelingDelay");
    if (((unint64_t)v190 & 0xFF00000000) != 0)
    {
      v191 = *(float *)&v190;
      goto LABEL_354;
    }
  }
  if (*v442)
    v192 = *(_DWORD *)(a2 + 48) == 1;
  else
    v192 = 0;
  if (v192)
  {
    v191 = 48.0;
LABEL_354:
    *(_DWORD *)(a1 + 36) = vcvtas_u32_f32((float)(*(float *)a1 * v191) / v19);
  }
  v193 = *(const void **)(a2 + 128);
  if (!v193)
  {
    v483 = 0;
    LOBYTE(cf) = 0;
    v482 = 0;
    goto LABEL_360;
  }
  CFRetain(*(CFTypeRef *)(a2 + 128));
  v483 = v193;
  applesauce::CF::details::find_at_key_or_optional<std::vector<float>,__CFString const*&>((const __CFDictionary *)v193, (const void **)IR::kDynamicSizeDimensionValuesKey, &cf);
  if (!v483)
  {
LABEL_360:
    LOBYTE(v477) = 0;
    v478 = 0;
    goto LABEL_361;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>((const __CFDictionary *)v483, (const void **)IR::kDynamicSizeDimensionTGridOrdersKey, &v477);
  if (v483)
  {
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>((const __CFDictionary *)v483, (const void **)IR::kDynamicSizeDimensionSamplingFactorsKey, &v475);
    goto LABEL_362;
  }
LABEL_361:
  LOBYTE(v475) = 0;
  v476 = 0;
LABEL_362:
  if (!v482)
    goto LABEL_376;
  if (v480 == cf)
  {
    if (v480)
      operator delete(v480);
    v482 = 0;
LABEL_376:
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::reset[abi:ne180100]((uint64_t)&v477);
    goto LABEL_377;
  }
  if (!v478)
    goto LABEL_372;
  if (!v477)
  {
    v431 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v431, "Could not construct");
  }
  v194 = (_BYTE *)v480 - (_BYTE *)cf;
  if (v194 >> 2 != CFArrayGetCount(v477))
  {
LABEL_372:
    v197 = &v477;
LABEL_378:
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::reset[abi:ne180100]((uint64_t)v197);
    goto LABEL_379;
  }
  if (!v476)
    goto LABEL_377;
  if (!v482)
    std::__throw_bad_optional_access[abi:ne180100]();
  if (!v475)
  {
    v433 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v433, "Could not construct");
  }
  v196 = cf;
  v195 = v480;
  if ((v195 - v196) >> 2 != CFArrayGetCount(v475))
  {
LABEL_377:
    v197 = &v475;
    goto LABEL_378;
  }
LABEL_379:
  if (v482)
    v198 = *v444 == v444[1];
  else
    v198 = 0;
  if (v198)
    p_cf = (uint64_t *)&cf;
  else
    p_cf = v444;
  v434 = p_cf;
  SizeDimension = IR::IRData::Implementation::canCreateSizeDimension(a1, p_cf);
  if (SizeDimension)
  {
    v201 = *(_QWORD *)(a1 + 96);
    v202 = *(char **)(a1 + 88);
    if ((unint64_t)v202 >= v201)
    {
      v204 = (char *)*v456;
      v205 = (v202 - (_BYTE *)*v456) >> 2;
      v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v207 = v201 - (_QWORD)v204;
      if (v207 >> 1 > v206)
        v206 = v207 >> 1;
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL)
        v208 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v208 = v206;
      if (v208)
      {
        v209 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 96, v208);
        v204 = *(char **)(a1 + 80);
        v202 = *(char **)(a1 + 88);
      }
      else
      {
        v209 = 0;
      }
      v224 = &v209[4 * v205];
      v225 = &v209[4 * v208];
      *(_DWORD *)v224 = 8;
      v203 = v224 + 4;
      while (v202 != v204)
      {
        v226 = *((_DWORD *)v202 - 1);
        v202 -= 4;
        *((_DWORD *)v224 - 1) = v226;
        v224 -= 4;
      }
      *(_QWORD *)(a1 + 80) = v224;
      *(_QWORD *)(a1 + 88) = v203;
      *(_QWORD *)(a1 + 96) = v225;
      if (v204)
        operator delete(v204);
    }
    else
    {
      *(_DWORD *)v202 = 8;
      v203 = v202 + 4;
    }
    v227 = *(_QWORD *)(a1 + 216);
    *(_QWORD *)(a1 + 88) = v203;
    v228 = *(_DWORD **)(a1 + 208);
    if ((unint64_t)v228 >= v227)
    {
      v230 = v446->__begin_;
      v231 = v228 - v446->__begin_;
      v232 = v231 + 1;
      if ((unint64_t)(v231 + 1) >> 62)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v233 = v227 - (_QWORD)v230;
      if (v233 >> 1 > v232)
        v232 = v233 >> 1;
      if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL)
        v234 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v234 = v232;
      if (v234)
      {
        v235 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 216, v234);
        v230 = *(std::vector<unsigned int>::pointer *)(a1 + 200);
        v228 = *(_DWORD **)(a1 + 208);
      }
      else
      {
        v235 = 0;
      }
      v236 = &v235[4 * v231];
      v237 = &v235[4 * v234];
      *(_DWORD *)v236 = 1;
      v229 = v236 + 4;
      while (v228 != v230)
      {
        v238 = *--v228;
        *((_DWORD *)v236 - 1) = v238;
        v236 -= 4;
      }
      *(_QWORD *)(a1 + 200) = v236;
      *(_QWORD *)(a1 + 208) = v229;
      *(_QWORD *)(a1 + 216) = v237;
      if (v230)
        operator delete(v230);
    }
    else
    {
      *v228 = 1;
      v229 = v228 + 1;
    }
    v239 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 208) = v229;
    v240 = *(char **)(a1 + 136);
    if ((unint64_t)v240 >= v239)
    {
      v242 = *v447;
      v243 = (v240 - *v447) >> 2;
      v244 = v243 + 1;
      if ((unint64_t)(v243 + 1) >> 62)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v245 = v239 - (_QWORD)v242;
      if (v245 >> 1 > v244)
        v244 = v245 >> 1;
      if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFFCLL)
        v246 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v246 = v244;
      if (v246)
      {
        v247 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 144, v246);
        v242 = *(char **)(a1 + 128);
        v240 = *(char **)(a1 + 136);
      }
      else
      {
        v247 = 0;
      }
      v248 = &v247[4 * v243];
      v249 = &v247[4 * v246];
      *(_DWORD *)v248 = 0;
      v241 = v248 + 4;
      while (v240 != v242)
      {
        v250 = *((_DWORD *)v240 - 1);
        v240 -= 4;
        *((_DWORD *)v248 - 1) = v250;
        v248 -= 4;
      }
      *(_QWORD *)(a1 + 128) = v248;
      *(_QWORD *)(a1 + 136) = v241;
      *(_QWORD *)(a1 + 144) = v249;
      if (v242)
        operator delete(v242);
    }
    else
    {
      *(_DWORD *)v240 = 0;
      v241 = v240 + 4;
    }
    *(_QWORD *)(a1 + 136) = v241;
    if (*(_BYTE *)(a1 + 488))
    {
      v251 = *(_QWORD *)(a1 + 120);
      v252 = *(_DWORD *)(a1 + 28);
      v253 = *(_DWORD **)(a1 + 112);
      if ((unint64_t)v253 >= v251)
      {
        v256 = v438->__begin_;
        v257 = v253 - v438->__begin_;
        v258 = v257 + 1;
        if ((unint64_t)(v257 + 1) >> 62)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v259 = v251 - (_QWORD)v256;
        if (v259 >> 1 > v258)
          v258 = v259 >> 1;
        if ((unint64_t)v259 >= 0x7FFFFFFFFFFFFFFCLL)
          v260 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v260 = v258;
        if (v260)
        {
          v261 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 120, v260);
          v256 = *(std::vector<unsigned int>::pointer *)(a1 + 104);
          v253 = *(_DWORD **)(a1 + 112);
        }
        else
        {
          v261 = 0;
        }
        v263 = &v261[4 * v257];
        v264 = &v261[4 * v260];
        *(_DWORD *)v263 = v252;
        v254 = v263 + 4;
        while (v253 != v256)
        {
          v265 = *--v253;
          *((_DWORD *)v263 - 1) = v265;
          v263 -= 4;
        }
        *(_QWORD *)(a1 + 104) = v263;
        *(_QWORD *)(a1 + 112) = v254;
        *(_QWORD *)(a1 + 120) = v264;
        if (v256)
          operator delete(v256);
      }
      else
      {
        *v253 = v252;
        v254 = v253 + 1;
      }
      *(_QWORD *)(a1 + 112) = v254;
    }
    else
    {
      v255.__i_ = (std::__wrap_iter<const int *>::iterator_type)v438->__begin_;
      LODWORD(theString.__r_.__value_.__l.__data_) = *v449;
      std::vector<int>::insert((std::vector<int> *)v438, v255, 1uLL, (std::vector<int>::const_reference)&theString);
    }
    ++*v449;
  }
  __C = 0;
  v473 = 0;
  v474 = 0;
  v469 = 0;
  v470 = 0;
  v471 = 0;
  __A = 0;
  v467 = 0;
  v266 = v439;
  if (v439 <= v151)
    v266 = v151;
  if (v440 <= v266)
    v267 = v266;
  else
    v267 = v440;
  v468 = 0;
  std::vector<float>::resize((uint64_t)&__C, v267);
  if (v455)
    std::vector<short>::resize((uint64_t)&__A, v473 - __C);
  if (v457)
  {
    p_C = (float **)&v469;
    std::vector<float>::resize((uint64_t)&v469, v473 - __C);
  }
  else
  {
    p_C = &__C;
  }
  v269 = *p_C;
  v465 = 0;
  if (*(_BYTE *)(a2 + 17))
  {
    v271 = __C;
    v270 = v473;
    v272 = (IR::DelayLine *)operator new();
    IR::DelayLine::DelayLine(v272, 256, 5, 1, 0, (unint64_t)((char *)v270 - (char *)v271) >> 2);
    v273 = v465;
    v465 = v272;
    if (v273)
    {
      IR::DelayLine::~DelayLine(v273);
      MEMORY[0x212BC7928]();
    }
    *(_DWORD *)(a1 + 12) = IR::DelayLine::getLatencyFrames(5);
  }
  if (*(_DWORD *)(a1 + 64))
  {
    v274 = 0;
    v275 = (int)v82;
    v445 = SizeDimension << 31 >> 31;
    v443 = (((unint64_t)v440 << v435) + 4) * (*(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 32));
    while (1)
    {
      v448 = v274;
      IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&theString);
      if (*v449 + v445)
      {
        v276 = 0;
        v277 = 4 * (*v449 + v445);
        do
        {
          *(_DWORD *)__ptr = 0;
          if (fread(__ptr, 4uLL, 1uLL, v505) != 1)
          {
            if (IR::getIRDataLog(void)::onceToken != -1)
              dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
            v300 = IR::getIRDataLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              IR::IRData::Implementation::Implementation(v300, v301, v302, v303, v304, v305, v306, v307);
            v308 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v308, "Failed to read float dimensionVal from file");
            v308->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          }
          IR::IRCoordinates::set((uint64_t)&theString, *(_DWORD *)((char *)*v456 + v276), *(float *)__ptr);
          v276 += 4;
        }
        while (v277 != v276);
      }
      std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(v463, *(unsigned int *)(a1 + 32));
      std::vector<float>::vector(&__p, *(unsigned int *)(a1 + 32));
      if (*(_DWORD *)(a1 + 32))
      {
        v278 = 0;
        v279 = 0;
        v280 = 0;
        v281 = *(float *)a1 / v19;
        do
        {
          if (v455)
          {
            if (fread(__A, 2uLL, v440, v505) != v440)
            {
              if (IR::getIRDataLog(void)::onceToken != -1)
                dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
              if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
                IR::IRData::Implementation::Implementation();
              bzero(__A, 2 * v440);
              v310 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v310, "Failed to read int16 values from file");
              goto LABEL_628;
            }
            vDSP_vflt16(__A, 1, __C, 1, v439);
          }
          else if (fread(__C, 4uLL, v440, v505) != v440)
          {
            if (IR::getIRDataLog(void)::onceToken != -1)
              dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
            if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              IR::IRData::Implementation::Implementation();
            vDSP_vclr(__C, 1, v440);
            v310 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v310, "Failed to read float values from file");
LABEL_628:
            v310->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
          }
          if (fread((void *)(__p.n128_u64[0] + v279), 4uLL, 1uLL, v505) != 1)
          {
            if (IR::getIRDataLog(void)::onceToken != -1)
              dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
            v311 = IR::getIRDataLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              IR::IRData::Implementation::Implementation(v311, v312, v313, v314, v315, v316, v317, v318);
            *(_DWORD *)(__p.n128_u64[0] + v279) = 0;
            v310 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v310, "Failed to read float value from file");
            goto LABEL_628;
          }
          *(float *)(__p.n128_u64[0] + v279) = v281 * *(float *)(__p.n128_u64[0] + v279);
          vDSP_vsmul(__C, 1, &__B, v269, 1, v439);
          v282 = *(float *)(__p.n128_u64[0] + v279);
          if (v465)
          {
            IR::DelayLine::setDelay(v465, v282);
            IR::DelayLine::process(v465, v269, v269, (unint64_t)((char *)v473 - (char *)__C) >> 2);
            IR::DelayLine::reset(v465);
            *(_DWORD *)(__p.n128_u64[0] + v279) = 0;
            v282 = 0.0;
          }
          if (v282 > *(float *)(a1 + 20))
            *(float *)(a1 + 20) = v282;
          if (v457)
          {
            v283 = (*(uint64_t (**)(uint64_t, float *, _QWORD, float *, unint64_t))(*(_QWORD *)v457
                                                                                                  + 32))(v457, v269, v439, __C, v450);
            if (v283)
            {
              if (IR::getIRDataLog(void)::onceToken != -1)
                dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
              v319 = IR::getIRDataLog(void)::gLog;
              if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)__ptr = 136315906;
                *(_QWORD *)&__ptr[4] = "Implementation";
                v508 = 1024;
                v509 = v283;
                v510 = 1024;
                v511 = v439;
                v512 = 1024;
                v513 = v450;
                _os_log_error_impl(&dword_210570000, v319, OS_LOG_TYPE_ERROR, "IRData::%s: SRC error %d. input length = %d, output length = %d", __ptr, 0x1Eu);
              }
              v320 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
              std::logic_error::logic_error(v320, "SRC error");
              v320->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
            }
          }
          if (v454)
            vDSP_vmul(&__C[v459], 1, v486[0], 1, &__C[v459], 1, v454);
          if (v452)
            vDSP_vmul(&__C[v275], 1, v485 - 1, -1, &__C[v275], 1, v452);
          v284 = *v458;
          if ((v284 + v459) <= (unint64_t)((v498 - (_BYTE *)v497) >> 2))
            vDSP_vmul(&__C[v459], 1, (const float *)v497 + v459, 1, &__C[v459], 1, v284);
          v285 = (IR::FFTFilterKernel *)operator new();
          IR::FFTFilterKernel::FFTFilterKernel(v285, *v458, 0, 0);
          std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)(v463[0] + v278), v285);
          v82 = v82 & 0xFFFFFFFF00000000 | *(unsigned int *)(a1 + 480);
          if (IR::FFTFilterKernel::initializeAndStoreCoeffs(*(IR::FFTFilterKernel **)(v463[0] + v278), &__C[v459], *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 16), *(unsigned __int8 *)(a1 + 24), 0, *(_QWORD *)(a1 + 472), v82, 1.0))
          {
            if (IR::getIRDataLog(void)::onceToken != -1)
              dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
            v309 = IR::getIRDataLog(void)::gLog;
            if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              IR::IRData::Implementation::Implementation((int *)v458, v436, v309);
            v310 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
            std::logic_error::logic_error(v310, "Failed to initialize and store coeffs");
            goto LABEL_628;
          }
          ++v280;
          v279 += 4;
          v278 += 8;
        }
        while (v280 < *(unsigned int *)(a1 + 32));
      }
      if (v443)
        fseek(v505, v443, 1);
      a2 = v451;
      if (v463[0] == v463[1])
        goto LABEL_531;
      v286 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0] != __p.n128_u64[1])
        break;
LABEL_532:
      if (v286)
      {
        __p.n128_u64[1] = (unint64_t)v286;
        operator delete(v286);
      }
      *(_QWORD *)__ptr = v463;
      std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)__ptr);
      v274 = v448 + 1;
      if (v448 + 1 >= *(_DWORD *)(a1 + 64))
        goto LABEL_535;
    }
    IR::IRData::Implementation::insertIRDataInTree(a1, *(uint64_t **)(a1 + 264), (uint64_t)&theString, (uint64_t)v463, &__p, v448, &v493);
LABEL_531:
    v286 = (void *)__p.n128_u64[0];
    goto LABEL_532;
  }
LABEL_535:
  if (*(_BYTE *)(a1 + 488) && !IR::IRData::Implementation::initVBAPTriangulation(a1, &v490, &v487, 0))
  {
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a1 + 152);
    v418 = *(uint64_t **)(a1 + 264);
    v420 = *v418;
    for (k = v418[1]; k != v420; std::__destroy_at[abi:ne180100]<IR::IRDataNode,0>(k))
      k -= 96;
    v418[1] = v420;
    *v449 = 0;
    v421 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v421, "VBAP Triangulation failed");
    goto LABEL_731;
  }
  if (*(_BYTE *)(a2 + 120))
    IR::IRData::Implementation::computeAverageIR((IR::IRData::Implementation *)a1);
  if (SizeDimension)
  {
    v287 = v478;
    if (v478)
    {
      v288 = v477;
      if (v477)
        CFRetain(v477);
      v289 = 0;
      v290 = 0;
      v461 = v288;
    }
    else if (v476)
    {
      v291 = v475;
      if (v475)
        CFRetain(v475);
      v290 = 0;
      v461 = v291;
      v289 = 1;
    }
    else
    {
      v289 = 0;
      v461 = 0;
      v290 = 1;
    }
    v292 = IR::IRData::Implementation::createSizeDimension(a1, v434, (CFArrayRef *)&v461, v478);
    if (v290 && v461)
      CFRelease(v461);
    if (v289 && v461)
      CFRelease(v461);
    if (v287 && v461)
      CFRelease(v461);
    if ((v292 & 1) == 0)
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v423 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::Implementation(v423, v424, v425, v426, v427, v428, v429, v430);
      v421 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(v421, "Unable to create user-defined size dimension");
LABEL_731:
      v421->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    }
  }
  IR::IRData::Implementation::findDimensionsWithMoreThanOneNode((IR::IRData::Implementation *)a1);
  v293 = v465;
  v465 = 0;
  if (v293)
  {
    IR::DelayLine::~DelayLine(v293);
    MEMORY[0x212BC7928]();
  }
  if (__A)
  {
    v467 = __A;
    operator delete(__A);
  }
  if (v469)
  {
    v470 = v469;
    operator delete(v469);
  }
  if (__C)
  {
    v473 = __C;
    operator delete(__C);
  }
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v475);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v477);
  if (v482 && cf)
  {
    v480 = (void *)cf;
    operator delete((void *)cf);
  }
  if (v483)
    CFRelease(v483);
  if (v484)
  {
    v485 = (const float *)v484;
    operator delete(v484);
  }
  if (v486[0])
  {
    v486[1] = v486[0];
    operator delete(v486[0]);
  }
  theString.__r_.__value_.__r.__words[0] = (std::string::size_type)&v487;
  std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&theString);
  theString.__r_.__value_.__r.__words[0] = (std::string::size_type)&v490;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&theString);
  if (v493.__begin_)
  {
    v493.__end_ = v493.__begin_;
    operator delete(v493.__begin_);
  }
  if (theDict)
    CFRelease(theDict);
  if (theArray)
    CFRelease(theArray);
  if (SHIBYTE(v496.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v496.__r_.__value_.__l.__data_);
  if (v497)
  {
    v498 = v497;
    operator delete((void *)v497);
  }
  if (v457)
    (*(void (**)(uint64_t))(*(_QWORD *)v457 + 8))(v457);
  if (v503)
    CFRelease(v503);
  v294 = v505;
  v505 = 0;
  if (v294)
    v506();
  return a1;
}

void sub_21057C848(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, IR::IRDataAttributes *a11, uint64_t a12, uint64_t a13, uint64_t a14, void **a15, uint64_t a16, void **a17, uint64_t a18, CFTypeRef *a19, uint64_t a20,uint64_t a21,void **a22,void **a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void **a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,_QWORD *a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60,char a61,uint64_t a62,void *__p)
{
  uint64_t a64;
  char a66;
  const void *a67;
  void *a68;
  uint64_t a69;
  void *a71;
  uint64_t a72;
  uint64_t v72;
  void *v74;
  void *v75;
  const void *v76;
  uint64_t v77;
  const void *v78;
  const void *v79;
  void *v80;
  void *v81;
  void *v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;

  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a59);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a61);
  if (a66 && __p)
  {
    a64 = (uint64_t)__p;
    operator delete(__p);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a67);
  if (a68)
  {
    a69 = (uint64_t)a68;
    operator delete(a68);
  }
  if (a71)
  {
    a72 = (uint64_t)a71;
    operator delete(a71);
  }
  a44 = &STACK[0x208];
  std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  a44 = &STACK[0x220];
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a44);
  v74 = (void *)STACK[0x238];
  if (STACK[0x238])
  {
    STACK[0x240] = (unint64_t)v74;
    operator delete(v74);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&STACK[0x250]);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&STACK[0x258]);
  if (SLOBYTE(STACK[0x277]) < 0)
    operator delete((void *)STACK[0x260]);
  v75 = (void *)STACK[0x280];
  if (STACK[0x280])
  {
    STACK[0x288] = (unint64_t)v75;
    operator delete(v75);
  }
  if (a32)
    (*(void (**)(uint64_t))(*(_QWORD *)a32 + 8))(a32);
  v76 = *(const void **)(v72 - 240);
  if (v76)
    CFRelease(v76);
  v77 = *(_QWORD *)(v72 - 224);
  *(_QWORD *)(v72 - 224) = 0;
  if (v77)
    (*(void (**)(void))(v72 - 216))();
  *(_QWORD *)(v72 - 176) = a36 + 63;
  std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 176));
  IR::IRDataAttributes::~IRDataAttributes(a11);
  *(_QWORD *)(v72 - 176) = a36 + 38;
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100]((void ***)(v72 - 176));
  if (*a19)
    CFRelease(*a19);
  v78 = (const void *)a36[36];
  if (v78)
    CFRelease(v78);
  v79 = (const void *)a36[35];
  if (v79)
    CFRelease(v79);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](a10);
  v80 = *a22;
  if (*a22)
  {
    a36[26] = v80;
    operator delete(v80);
  }
  v81 = (void *)a36[22];
  if (v81)
  {
    a36[23] = v81;
    operator delete(v81);
  }
  v82 = (void *)a36[19];
  if (v82)
  {
    a36[20] = v82;
    operator delete(v82);
  }
  v83 = *a23;
  if (*a23)
  {
    a36[17] = v83;
    operator delete(v83);
  }
  v84 = *a17;
  if (*a17)
  {
    a36[14] = v84;
    operator delete(v84);
  }
  v85 = *a31;
  if (*a31)
  {
    a36[11] = v85;
    operator delete(v85);
  }
  v86 = *a15;
  if (*a15)
  {
    a36[6] = v86;
    operator delete(v86);
  }
  _Unwind_Resume(a1);
}

const __CFDictionary *applesauce::CF::DictionaryRef_proxy::at_as<unsigned int,__CFString const*&>(const __CFDictionary ***a1, const void **a2)
{
  const __CFDictionary *result;

  result = applesauce::CF::details::at_key<__CFString const*&>(**a1, a2);
  if (result)
    return (const __CFDictionary *)applesauce::CF::convert_as<unsigned int,0>(result);
  return result;
}

void applesauce::CF::TypeRefPair::~TypeRefPair(applesauce::CF::TypeRefPair *this)
{
  const void *v2;

  v2 = (const void *)*((_QWORD *)this + 1);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

_QWORD *applesauce::CF::URLRef::operator->(_QWORD *result)
{
  applesauce::CF *exception;

  if (!*result)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_21057D0FC()
{
  void *v0;

}

void sub_21057D114(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::StringRef *applesauce::CF::URLRef_proxy::get_filesystem_path@<X0>(CFURLRef **this@<X0>, applesauce::CF::StringRef *a2@<X8>)
{
  CFStringRef v3;

  v3 = CFURLCopyFileSystemPath(**this, kCFURLPOSIXPathStyle);
  return applesauce::CF::StringRef::StringRef(a2, v3);
}

char *std::vector<float>::assign(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void std::vector<IR::IRInterpolationMethod>::assign(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, std::vector<unsigned int>::const_reference __u)
{
  uint64_t value;
  unsigned int *begin;
  std::vector<unsigned int>::size_type v8;
  unint64_t v9;
  std::vector<unsigned int>::pointer v10;
  unsigned int *v11;
  std::vector<unsigned int>::size_type v12;
  std::vector<unsigned int>::pointer end;
  std::vector<unsigned int>::size_type v14;
  std::vector<unsigned int>::size_type v15;
  unsigned int *v16;
  unsigned int *v17;
  std::vector<unsigned int>::size_type v18;

  value = (uint64_t)this->__end_cap_.__value_;
  begin = this->__begin_;
  if (__n <= (value - (uint64_t)begin) >> 2)
  {
    end = this->__end_;
    v14 = end - begin;
    if (v14 >= __n)
      v15 = __n;
    else
      v15 = end - begin;
    if (v15)
    {
      v16 = begin;
      do
      {
        *v16++ = *__u;
        --v15;
      }
      while (v15);
    }
    if (__n <= v14)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v17 = &end[__n - v14];
      v18 = 4 * __n - 4 * v14;
      do
      {
        *end++ = *__u;
        v18 -= 4;
      }
      while (v18);
      this->__end_ = v17;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v8 = value >> 1;
    if (value >> 1 <= __n)
      v8 = __n;
    if ((unint64_t)value >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](this, v9);
    v10 = this->__end_;
    v11 = &v10[__n];
    v12 = 4 * __n;
    do
    {
      *v10++ = *__u;
      v12 -= 4;
    }
    while (v12);
    this->__end_ = v11;
  }
}

void IR::calculateFadeInWindow(unsigned int a1, float **a2)
{
  uint64_t v4;
  float *v5;
  double v6;
  float v7;

  v4 = a1;
  if (a1 != a2[1] - *a2)
    std::vector<float>::resize((uint64_t)a2, a1);
  if (a1)
  {
    v5 = *a2;
    v6 = 3.14159265 / (double)(a1 + 1);
    do
    {
      v7 = cos(v6) * -0.5 + 0.5;
      *v5++ = v7;
      v6 = 3.14159265 / (double)(a1 + 1) + v6;
      --v4;
    }
    while (v4);
  }
}

const __CFNumber *applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[14]>(const __CFDictionary ***a1, char *a2)
{
  const __CFNumber *result;

  result = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[14]>(**a1, a2);
  if (result)
    return (const __CFNumber *)applesauce::CF::convert_as<float,0>(result);
  return result;
}

void std::vector<short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 2 * a2;
  }
  else
  {
    std::vector<short>::__append((char **)a1, a2 - v2);
  }
}

uint64_t IR::IRData::Implementation::computeAverageIR(IR::IRData::Implementation *this)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  float v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t j;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *i;
  float v23;
  _QWORD v24[3];
  _QWORD *v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 328))
    return 1;
  v3 = *((_DWORD *)this + 16);
  v4 = *((_DWORD *)this + 8);
  if (!(v4 * v3))
    return 0;
  v5 = 1.0 / (float)v3;
  v23 = v5;
  v6 = (_QWORD *)((char *)this + 304);
  v8 = *((_QWORD *)this + 38);
  v7 = *((_QWORD *)this + 39);
  if (v7 != v8)
  {
    do
      IR::FFTFilterKernel::~FFTFilterKernel((IR::FFTFilterKernel *)(v7 - 40));
    while (v7 != v8);
    v4 = *((_DWORD *)this + 8);
  }
  *((_QWORD *)this + 39) = v8;
  std::vector<IR::FFTFilterKernel>::resize((uint64_t *)this + 38, v4);
  if (*((_DWORD *)this + 8))
  {
    v9 = 0;
    v10 = 0;
    do
    {
      IR::FFTFilterKernel::initialize((IR::FFTFilterKernel *)(*((_QWORD *)this + 38) + v9), *((_DWORD *)this + 2), *((_DWORD *)this + 4), *((unsigned __int8 *)this + 24));
      ++v10;
      v9 += 40;
    }
    while (v10 < *((unsigned int *)this + 8));
  }
  if (*((_BYTE *)this + 488))
  {
    v11 = (uint64_t *)*((_QWORD *)this + 63);
    for (i = (uint64_t *)*((_QWORD *)this + 64); v11 != i; v11 += 2)
    {
      v12 = *v11;
      v13 = *(_QWORD *)(*v11 + 88);
      if (*(_QWORD *)(*v11 + 96) != v13)
      {
        v14 = 0;
        v15 = 0;
        do
        {
          v16 = (*(_QWORD *)(v13 + 24 * v14 + 8) - *(_QWORD *)(v13 + 24 * v14)) >> 3;
          v17 = *((_DWORD *)this + 8);
          if (v17 >= v16)
            v18 = v16;
          else
            v18 = v17;
          if ((_DWORD)v18)
          {
            for (j = 0; j != v18; ++j)
              IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*v6 + 40 * j), *(const IR::FFTFilterKernel **)(*(_QWORD *)(*(_QWORD *)(*v11 + 88) + 24 * v14) + 8 * j), v5);
            v12 = *v11;
          }
          v13 = *(_QWORD *)(v12 + 88);
          v14 = ++v15;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v12 + 96) - v13) >> 3) > v15);
      }
    }
    goto LABEL_30;
  }
  v24[0] = &off_24CA2CE60;
  v24[1] = this;
  v24[2] = &v23;
  v25 = v24;
  IR::IRData::Implementation::forEachNode(this, (uint64_t)v24, 0, 0);
  v20 = v25;
  if (v25 == v24)
  {
    v21 = 4;
    v20 = v24;
    goto LABEL_29;
  }
  if (v25)
  {
    v21 = 5;
LABEL_29:
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
LABEL_30:
  result = 1;
  *((_BYTE *)this + 328) = 1;
  return result;
}

void sub_21057D6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  char *v15;
  char *v17;
  uint64_t v18;

  v17 = a15;
  if (a15 == v15)
  {
    v18 = 4;
    v17 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v17 + 8 * v18))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRData::Implementation::getNumSpatialPoints(IR::IRData::Implementation *this, const IR::IRDataAttributes *a2)
{
  uint64_t v2;
  unsigned int v4;
  CFTypeRef cf;

  IR::IRData::Implementation::readIRPlist(this, &cf);
  if (!cf)
    return 0;
  v4 = 0;
  v2 = applesauce::CF::at_or<unsigned int,char const(&)[20]>((const __CFDictionary *)cf, "TotalNumCoordinates", &v4);
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t IR::IRData::Implementation::getNumFiltersPerSpatialPoint(IR::IRData::Implementation *this, const IR::IRDataAttributes *a2)
{
  uint64_t v2;
  unsigned int v4;
  CFTypeRef cf;

  IR::IRData::Implementation::readIRPlist(this, &cf);
  if (!cf)
    return 0;
  v4 = 0;
  v2 = applesauce::CF::at_or<unsigned int,char const(&)[12]>((const __CFDictionary *)cf, "NumChannels", &v4);
  if (cf)
    CFRelease(cf);
  return v2;
}

uint64_t IR::IRData::Implementation::getFilterLength(IR::IRData::Implementation *this, const IR::IRDataAttributes *a2)
{
  int v3;
  int v4;
  unsigned int v5;
  float v6;
  float v7;
  unsigned int v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  void *exception;
  unsigned int v15;
  CFTypeRef cf;

  IR::IRData::Implementation::readIRPlist(this, &cf);
  if (!cf)
    return 0;
  v3 = *((_DWORD *)this + 8);
  v4 = *((_DWORD *)this + 6);
  v15 = 0;
  v5 = applesauce::CF::at_or<unsigned int,char const(&)[13]>((const __CFDictionary *)cf, "FilterLength", &v15);
  if (!cf)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  v15 = 0;
  v6 = applesauce::CF::at_or<float,char const(&)[11]>((const __CFDictionary *)cf, "SampleRate", (uint64_t)&v15);
  v7 = *((float *)this + 2);
  if (v7 != 0.0)
    v5 = (float)((float)(v7 / v6) * (float)v5);
  if (v4 + v3 > v5 || v3 == 0)
    v9 = v5;
  else
    v9 = v4 + v3;
  v10 = __OFSUB__(v9, v4);
  v11 = v9 - v4;
  if ((v11 < 0) ^ v10 | (v11 == 0))
    v12 = 0;
  else
    v12 = v11;
  if (cf)
    CFRelease(cf);
  return v12;
}

void sub_21057D8C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRData::Implementation::getModelingDelay(IR::IRData::Implementation *this, const IR::IRDataAttributes *a2)
{
  uint64_t v2;
  int v3;
  void *exception;
  const __CFString *v6;
  const __CFDictionary *v7;
  unsigned __int8 v8;
  CFTypeRef cf;

  IR::IRData::Implementation::readIRPlist(this, &cf);
  if (!cf)
    return 0;
  v6 = CFSTR("UserData");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>((const __CFDictionary *)cf, (const void **)&v6, &v7);
  v3 = v8;
  if (v8)
  {
    if (!v7)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
    LODWORD(v6) = 0;
    v2 = applesauce::CF::at_or<unsigned int,char const(&)[14]>(v7, "ModelingDelay", (unsigned int *)&v6);
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
  }
  else
  {
    std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v7);
  }
  if (cf)
    CFRelease(cf);
  if (!v3)
    return 0;
  return v2;
}

void sub_21057D9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::getUserData(IR::IRData::Implementation *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef cf;
  const __CFString *v5;
  CFTypeRef v6;

  IR::IRData::Implementation::readIRPlist(this, &v6);
  if (v6)
  {
    cf = 0;
    v5 = CFSTR("UserData");
    applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*>((const __CFDictionary *)v6, (const void **)&v5, &cf, a2);
    if (cf)
      CFRelease(cf);
    if (v6)
      CFRelease(v6);
  }
  else
  {
    *a2 = 0;
  }
}

void IR::IRData::Implementation::getIRDataTypes(CFTypeRef *this@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  CFTypeRef v4;
  const __CFArray *v5;
  std::vector<unsigned int>::size_type Count;
  const __CFArray *v7;
  CFIndex v8;
  CFIndex v9;
  CFArrayRef v10;
  CFIndex v11;
  unint64_t v12;
  const __CFDictionary *v13;
  unsigned int v14;
  unsigned int *value;
  std::vector<unsigned int>::pointer end;
  unsigned int *v17;
  std::vector<unsigned int>::pointer begin;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  void *v26;
  void *exception;
  const __CFString *v28;
  CFTypeRef cf;
  CFTypeRef v30;
  CFArrayRef theArray;
  CFTypeRef v32;
  CFTypeRef v33;
  int v34;

  v34 = 0;
  v4 = *this;
  if (*this)
    CFRetain(*this);
  v32 = v4;
  IR::IRData::Implementation::readIRPlist(&v32, &v34, 0, &v33);
  if (v4)
    CFRelease(v4);
  if (!v33)
    goto LABEL_15;
  theArray = (CFArrayRef)CFSTR("ImpulseResponses");
  if (!applesauce::CF::details::has_key<__CFString const*>((const __CFDictionary *)v33, (const void **)&theArray))goto LABEL_15;
  if (!v33)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  cf = 0;
  v30 = CFSTR("ImpulseResponses");
  applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>((const __CFDictionary *)v33, &v30, &cf, &theArray);
  if (cf)
    CFRelease(cf);
  v5 = theArray;
  if (!theArray)
  {
LABEL_15:
    a2->__begin_ = 0;
    a2->__end_ = 0;
    a2->__end_cap_.__value_ = 0;
    goto LABEL_16;
  }
  a2->__begin_ = 0;
  a2->__end_ = 0;
  a2->__end_cap_.__value_ = 0;
  Count = CFArrayGetCount(v5);
  std::vector<IR::IRDataType>::reserve(a2, Count);
  v7 = theArray;
  if (!theArray)
    goto LABEL_16;
  v8 = CFArrayGetCount(theArray);
  v9 = v8;
  v10 = theArray;
  if (!theArray)
  {
    v11 = 0;
    if (!v8)
      goto LABEL_45;
LABEL_20:
    v12 = 0;
    do
    {
      if (v7 == v10 && v12 == v11)
        break;
      applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v7, v12, (applesauce::CF::DictionaryRef *)&v30);
      if (!v30)
      {
        v26 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](v26, "Could not construct");
      }
      v28 = CFSTR("Type");
      cf = &v30;
      v13 = applesauce::CF::DictionaryRef_proxy::at_as<IR::IRDataType,__CFString const*>((const __CFDictionary ***)&cf, (const void **)&v28);
      if (((unint64_t)v13 & 0xFF00000000) != 0)
      {
        v14 = v13;
        end = a2->__end_;
        value = a2->__end_cap_.__value_;
        if (end >= value)
        {
          begin = a2->__begin_;
          v19 = end - a2->__begin_;
          v20 = v19 + 1;
          if ((unint64_t)(v19 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v21 = (char *)value - (char *)begin;
          if (v21 >> 1 > v20)
            v20 = v21 >> 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
            v22 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v22 = v20;
          if (v22)
          {
            v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&a2->__end_cap_, v22);
            begin = a2->__begin_;
            end = a2->__end_;
          }
          else
          {
            v23 = 0;
          }
          v24 = (unsigned int *)&v23[4 * v19];
          *v24 = v14;
          v17 = v24 + 1;
          while (end != begin)
          {
            v25 = *--end;
            *--v24 = v25;
          }
          a2->__begin_ = v24;
          a2->__end_ = v17;
          a2->__end_cap_.__value_ = (unsigned int *)&v23[4 * v22];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v13;
          v17 = end + 1;
        }
        a2->__end_ = v17;
      }
      if (v30)
        CFRelease(v30);
      ++v12;
    }
    while (v12 != v9);
    goto LABEL_45;
  }
  v11 = CFArrayGetCount(theArray);
  if (v9)
    goto LABEL_20;
LABEL_45:
  if (theArray)
    CFRelease(theArray);
LABEL_16:
  if (v33)
    CFRelease(v33);
}

void sub_21057DD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

void std::vector<IR::IRDataType>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *value;
  int64_t v5;
  char *v6;
  unsigned int *v7;
  uint64_t v8;
  unsigned int *v9;
  std::vector<unsigned int>::pointer begin;
  unsigned int *end;
  unsigned int *v12;
  unsigned int v13;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v5 = (char *)this->__end_ - (char *)this->__begin_;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = (unsigned int *)&v6[4 * v8];
    begin = this->__begin_;
    end = this->__end_;
    v12 = v7;
    if (end != this->__begin_)
    {
      v12 = v7;
      do
      {
        v13 = *--end;
        *--v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
      operator delete(begin);
  }
}

const __CFDictionary *applesauce::CF::DictionaryRef_proxy::at_as<IR::IRDataType,__CFString const*>(const __CFDictionary ***a1, const void **a2)
{
  const __CFDictionary *result;

  result = applesauce::CF::details::at_key<__CFString const*>(**a1, a2);
  if (result)
    return (const __CFDictionary *)applesauce::CF::convert_as<IR::IRDataType,0>(result);
  return result;
}

void IR::IRData::Implementation::getGlobalUserData(CFTypeRef *this@<X0>, _QWORD *a2@<X8>)
{
  CFTypeRef v4;
  NSObject *v5;
  void *exception;
  CFTypeRef cf;
  CFTypeRef v8;
  CFTypeRef v9;
  int v10;
  _BYTE buf[24];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v10 = 0;
  v4 = *this;
  if (*this)
    CFRetain(*this);
  v8 = v4;
  IR::IRData::Implementation::readIRPlist(&v8, &v10, 0, &v9);
  if (v4)
    CFRelease(v4);
  if (v9
    && (*(_QWORD *)buf = CFSTR("ImpulseResponses"),
        (applesauce::CF::details::has_key<__CFString const*>((const __CFDictionary *)v9, (const void **)buf) & 1) != 0))
  {
    if (!v9)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
    *(_QWORD *)buf = CFSTR("UserData");
    cf = 0;
    applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*>((const __CFDictionary *)v9, (const void **)buf, &cf, a2);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v5 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = "getGlobalUserData";
      _os_log_impl(&dword_210570000, v5, OS_LOG_TYPE_DEFAULT, "IRData::%s: Not a consolidated IR file, use IRData::getUserData() instead.", buf, 0xCu);
    }
    *a2 = 0;
  }
  if (v9)
    CFRelease(v9);
}

void sub_21057E02C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

float IR::IRData::Implementation::getOriginalSampleRate(IR::IRData::Implementation *this, const IR::IRDataAttributes *a2)
{
  float v2;
  void *exception;
  int v5;
  CFTypeRef cf;

  IR::IRData::Implementation::readIRPlist(this, &cf);
  if (!cf)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  v5 = 0;
  v2 = applesauce::CF::at_or<float,char const(&)[11]>((const __CFDictionary *)cf, "SampleRate", (uint64_t)&v5);
  if (cf)
    CFRelease(cf);
  return v2;
}

void sub_21057E110(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRData::Implementation::getAudioChannelLayoutTag(IR::IRData::Implementation *this, const IR::IRDataAttributes *a2)
{
  uint64_t v2;
  unsigned int v4;
  CFTypeRef cf;

  IR::IRData::Implementation::readIRPlist(this, &cf);
  if (!cf)
    return 0;
  v4 = 0;
  v2 = applesauce::CF::at_or<unsigned int,char const(&)[22]>((const __CFDictionary *)cf, "AudioChannelLayoutTag", &v4);
  if (cf)
    CFRelease(cf);
  return v2;
}

const __CFDictionary *IR::IRData::Implementation::isConsolidatedIR(IR::IRData::Implementation *this, const IR::IRDataAttributes *a2)
{
  const __CFDictionary *v2;
  const __CFString *v4;
  CFTypeRef cf;
  CFTypeRef v6[5];
  int v7;
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef v10;

  IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)v6, this);
  v7 = 0;
  IR::IRData::Implementation::readIRPlist((IR::IRData::Implementation *)v6, &cf);
  if (cf)
  {
    v4 = CFSTR("ImpulseResponses");
    v2 = applesauce::CF::details::has_key<__CFString const*>((const __CFDictionary *)cf, (const void **)&v4);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v2 = 0;
  }
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v6[0])
    CFRelease(v6[0]);
  return v2;
}

void sub_21057E254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRData::Implementation::hasType(IR::IRDataAttributes *a1, int a2)
{
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFArrayRef v6;
  CFIndex v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  void *v12;
  void *exception;
  unsigned int v14;
  CFTypeRef cf;
  CFTypeRef v16;
  CFArrayRef theArray;
  CFTypeRef v18;
  CFTypeRef v19[5];
  int v20;
  CFTypeRef v21;
  CFTypeRef v22;
  CFTypeRef v23;

  IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)v19, a1);
  v20 = 0;
  IR::IRData::Implementation::readIRPlist((IR::IRData::Implementation *)v19, &v18);
  if (!v18)
  {
    v8 = 0;
    goto LABEL_25;
  }
  theArray = (CFArrayRef)CFSTR("ImpulseResponses");
  if (applesauce::CF::details::has_key<__CFString const*>((const __CFDictionary *)v18, (const void **)&theArray))
  {
    if (!v18)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
    cf = 0;
    v16 = CFSTR("ImpulseResponses");
    applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>((const __CFDictionary *)v18, &v16, &cf, &theArray);
    if (cf)
      CFRelease(cf);
    v3 = theArray;
    if (theArray)
    {
      Count = CFArrayGetCount(theArray);
      v5 = Count;
      v6 = theArray;
      if (theArray)
      {
        v7 = CFArrayGetCount(theArray);
        if (!v5)
        {
LABEL_20:
          if (theArray)
            CFRelease(theArray);
          goto LABEL_22;
        }
      }
      else
      {
        v7 = 0;
        if (!Count)
          goto LABEL_20;
      }
      v9 = 0;
      while (v3 != v6 || v7 != v9)
      {
        applesauce::CF::details::at_to<applesauce::CF::DictionaryRef>(v3, v9, (applesauce::CF::DictionaryRef *)&v16);
        if (!v16)
        {
          v12 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x212BC76A0](v12, "Could not construct");
        }
        cf = CFSTR("Type");
        v14 = 0;
        v10 = applesauce::CF::at_or<unsigned int,__CFString const*>((const __CFDictionary *)v16, &cf, &v14);
        if (v16)
          CFRelease(v16);
        if (v10 == a2)
        {
          if (theArray)
            CFRelease(theArray);
          v8 = 1;
          goto LABEL_23;
        }
        if (v5 == ++v9)
          goto LABEL_20;
      }
      goto LABEL_20;
    }
  }
LABEL_22:
  v8 = 0;
LABEL_23:
  if (v18)
    CFRelease(v18);
LABEL_25:
  if (v23)
    CFRelease(v23);
  if (v22)
    CFRelease(v22);
  if (v21)
    CFRelease(v21);
  if (v19[0])
    CFRelease(v19[0]);
  return v8;
}

void sub_21057E494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  const void *v6;
  va_list va;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va1);
  _Unwind_Resume(a1);
}

CFDataRef IR::IRData::Implementation::createSoundProfilePack(CFTypeRef *this, CFTypeRef *a2, CFTypeRef cf, const void *a4, const __CFString *a5)
{
  CFTypeID v9;
  const __CFString *v10;
  CFDataRef SerializedIRData;
  CFDataRef v12;
  CFDictionaryRef CFDictionaryRef;
  uint64_t v14;
  const void *v15;
  const void *v16;
  CFDataRef Data;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFTypeRef cfa;
  CFTypeRef v28;
  CFTypeRef v29;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  CFTypeRef v33;
  CFTypeRef v34;
  CFTypeRef v35;
  _QWORD v36[3];
  CFTypeRef v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];

  v42[2] = *MEMORY[0x24BDAC8D0];
  v9 = CFGetTypeID(cf);
  if (v9 == CFDictionaryGetTypeID())
  {
    v10 = (const __CFString *)MGCopyAnswer();
    if (!v10)
    {
      v10 = &stru_24CA2D4D8;
      CFRetain(&stru_24CA2D4D8);
    }
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v37, v10);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v35, "HRIR_ITDMod");
    SerializedIRData = IR::IRData::Implementation::createSerializedIRData(this, 1, 0);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v34, SerializedIRData);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::DataRef>(v38, &v35, &v34);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v33, "HRIR_DFEQ");
    v12 = IR::IRData::Implementation::createSerializedIRData(a2, 1, 0);
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v32, v12);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::DataRef>(&v39, &v33, &v32);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v31, "EQ");
    if (cf)
      CFRetain(cf);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v30, cf);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(&v40, &v31, &v30);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v29, "version");
    if (a4)
      CFRetain(a4);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v28, a4);
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(&v41, &v29, &v28);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cfa, "device");
    applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef&>(v42, &cfa, &v37);
    v36[0] = v38;
    v36[1] = 5;
    CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v36);
    v14 = 0;
    v36[2] = CFDictionaryRef;
    do
    {
      v15 = (const void *)v42[v14 + 1];
      if (v15)
        CFRelease(v15);
      v16 = (const void *)v42[v14];
      if (v16)
        CFRelease(v16);
      v14 -= 2;
    }
    while (v14 != -10);
    if (cfa)
      CFRelease(cfa);
    if (v28)
      CFRelease(v28);
    if (v29)
      CFRelease(v29);
    if (v30)
      CFRelease(v30);
    if (v31)
      CFRelease(v31);
    if (v32)
      CFRelease(v32);
    if (v33)
      CFRelease(v33);
    if (v34)
      CFRelease(v34);
    if (v35)
      CFRelease(v35);
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x24BDBD240], CFDictionaryRef, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    if (CFDictionaryRef)
      CFRelease(CFDictionaryRef);
    if (v37)
      CFRelease(v37);
  }
  else
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v18 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::createSoundProfilePack(v18, v19, v20, v21, v22, v23, v24, v25);
    return 0;
  }
  return Data;
}

void sub_21057E83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,int a42,__int16 a43,char a44,char a45,int a46,__int16 a47,char a48,char a49)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  __clang_call_terminate(exception_object);
}

CFDataRef IR::IRData::Implementation::createSerializedIRData(CFTypeRef *a1, int a2, int a3)
{
  _DWORD *v3;
  unint64_t v7;
  _BYTE *v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  CFDataRef v20;
  _QWORD *v21;
  const __CFNumber *v22;
  float v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  unsigned int v28;
  CFTypeRef v30;
  CFTypeRef v31;
  CFTypeRef v32;
  __int128 v33;
  uint64_t i;
  CFDictionaryRef CFDictionaryRef;
  CFTypeRef v36;
  uint64_t j;
  const void *v38;
  const void *v39;
  char *v40;
  const void *v41;
  const void *v42;
  CFDictionaryRef v43;
  uint64_t v44;
  const void *v45;
  const void *v46;
  const __CFData *Data;
  const __CFData *v48;
  unsigned int v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  unint64_t v55;
  uint64_t v56;
  unsigned int v57;
  size_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  size_t v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  CFIndex length;
  const __CFData *v73;
  const __CFDictionary *v74;
  _QWORD v75[2];
  CFTypeRef v76;
  CFTypeRef v77;
  CFTypeRef v78;
  _QWORD v79[2];
  CFTypeRef v80;
  int v81;
  CFDictionaryRef v82;
  CFTypeRef v83;
  CFTypeRef v84;
  void *__p[2];
  char v86;
  void ***__C;
  uint64_t v88;
  void *v89;
  void *v90;
  uint64_t v91;
  _OWORD v92[2];
  int v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  uint64_t v99;
  char *v100[3];
  CFTypeRef cf;
  float __B;
  unint64_t v103;
  CFTypeRef v104;
  void *v105[3];
  void *v106[3];
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD v110[3];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int __N;
  void **__N_4[2];
  _BYTE v117[16];
  _BYTE v118[16];
  _BYTE v119[16];
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE v126[16];
  _BYTE v127[24];
  _BYTE *v128;
  _BYTE v129[24];
  _BYTE *v130;
  uint64_t v131;
  CFRange v132;

  v131 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  if (*((_BYTE *)*a1 + 24))
  {
    __N = v3[2];
    v7 = v3[7];
    v114 = v3[8];
    v111 = 0;
    v112 = 0;
    v113 = 0;
    memset(v110, 0, sizeof(v110));
    v107 = 0;
    v108 = 0;
    v109 = 0;
    std::vector<float>::vector(v106, v114 * __N);
    std::vector<float>::vector(v105, v7);
    v8 = *a1;
    if (*((_BYTE *)*a1 + 488))
    {
      v128 = 0;
      v9 = operator new(0x48uLL);
      *v9 = &off_24CA2CCB0;
      v9[1] = a1;
      v9[2] = v105;
      v9[3] = &v111;
      v9[4] = &v114;
      v9[5] = &__N;
      v9[6] = v106;
      v9[7] = &v107;
      v9[8] = v110;
      v128 = v9;
      IR::IRData::Implementation::forEachNode(v8, (uint64_t)v127, 0, 0);
      v10 = v128;
      if (v128 == v127)
      {
        v11 = 4;
        v10 = v127;
        goto LABEL_14;
      }
    }
    else
    {
      v130 = 0;
      v21 = operator new(0x40uLL);
      *v21 = &off_24CA2CC68;
      v21[1] = v105;
      v21[2] = &v114;
      v21[3] = &__N;
      v21[4] = v106;
      v21[5] = &v107;
      v21[6] = v110;
      v21[7] = &v111;
      v130 = v21;
      IR::IRData::Implementation::forEachNode(v8, (uint64_t)v129, 0, 0);
      v10 = v130;
      if (v130 == v129)
      {
        v11 = 4;
        v10 = v129;
        goto LABEL_14;
      }
    }
    if (!v10)
      goto LABEL_15;
    v11 = 5;
LABEL_14:
    (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_15:
    IR::IRData::Implementation::getUserData(*a1, &v104);
    if (v104)
    {
      __N_4[0] = (void **)&v104;
      v22 = applesauce::CF::DictionaryRef_proxy::at_as<float,char const(&)[21]>((const __CFDictionary ***)__N_4, "DiffuseFieldPowerRMS");
      if (fabsf(*(float *)&v22) <= 0.00000011921 || ((unint64_t)v22 & 0xFF00000000) == 0)
        v24 = 1.0;
      else
        v24 = *(float *)&v22;
    }
    else
    {
      v24 = 1.0;
    }
    v103 = 0xAAAAAAAAAAAAAAABLL * ((v112 - v111) >> 3);
    __B = 0.0;
    if (a3)
    {
      __B = 1.0;
    }
    else
    {
      LODWORD(__N_4[0]) = 0;
      v25 = v107;
      if (v108 == v107)
      {
        v27 = 0.0;
      }
      else
      {
        v26 = 0;
        v27 = 0.0;
        v28 = 1;
        do
        {
          vDSP_maxmgv(*(const float **)(v25 + 24 * v26), 1, (float *)__N_4, (uint64_t)(*(_QWORD *)(v25 + 24 * v26 + 8) - *(_QWORD *)(v25 + 24 * v26)) >> 2);
          if (*(float *)__N_4 > v27)
            v27 = *(float *)__N_4;
          v26 = v28;
          v25 = v107;
        }
        while (0xAAAAAAAAAAAAAAABLL * ((v108 - v107) >> 3) > v28++);
      }
      __B = (float)(v24 * v27) * 0.000030518;
    }
    cf = 0;
    memset(v100, 0, sizeof(v100));
    v30 = *a1;
    v98 = 0;
    v99 = 0;
    v97 = 0;
    std::vector<IR::IRInterpolationMethod>::__init_with_size[abi:ne180100]<IR::IRInterpolationMethod*,IR::IRInterpolationMethod*>(&v97, *((const void **)v30 + 25), *((_QWORD *)v30 + 26), (uint64_t)(*((_QWORD *)v30 + 26) - *((_QWORD *)v30 + 25)) >> 2);
    v31 = *a1;
    v95 = 0;
    v96 = 0;
    v94 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v94, *((const void **)v31 + 16), *((_QWORD *)v31 + 17), (uint64_t)(*((_QWORD *)v31 + 17) - *((_QWORD *)v31 + 16)) >> 2);
    v32 = *a1;
    v33 = *((_OWORD *)*a1 + 15);
    v92[0] = *((_OWORD *)*a1 + 14);
    v92[1] = v33;
    v93 = *((_DWORD *)v32 + 64);
    v89 = 0;
    v90 = 0;
    v91 = 0;
    std::vector<IR::IRCoordinateType>::__init_with_size[abi:ne180100]<IR::IRCoordinateType*,IR::IRCoordinateType*>(&v89, *((const void **)v32 + 10), *((_QWORD *)v32 + 11), (uint64_t)(*((_QWORD *)v32 + 11) - *((_QWORD *)v32 + 10)) >> 2);
    if ((_DWORD)v7)
    {
      for (i = 0; i != v7; ++i)
      {
        IR::IRCoordinates::getParameterString(*((_DWORD *)v89 + i), __p);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],std::string>((applesauce::CF::TypeRef *)__N_4, "Name", (uint64_t)__p);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],float &>((applesauce::CF::TypeRef *)v117, "Periodicity", (int *)v94 + i);
        LODWORD(v79[0]) = *((_DWORD *)v97 + i);
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],int>((applesauce::CF::TypeRef *)v118, "Interpolation", (int *)v79);
        LODWORD(v75[0]) = IR::IRCoordinates::get((uint64_t)v92, *((_DWORD *)v89 + i));
        applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],float>((applesauce::CF::TypeRef *)v119, "DefaultValue", (int *)v75);
        __C = __N_4;
        v88 = 4;
        CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__C);
        v36 = cf;
        cf = CFDictionaryRef;
        if (v36)
          CFRelease(v36);
        for (j = 0; j != -64; j -= 16)
        {
          v38 = *(const void **)&v119[j + 8];
          if (v38)
            CFRelease(v38);
          v39 = *(const void **)&v119[j];
          if (v39)
            CFRelease(v39);
        }
        if (v86 < 0)
          operator delete(__p[0]);
        std::vector<applesauce::CF::DictionaryRef>::push_back[abi:ne180100](v100, &cf);
      }
    }
    v84 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)v100);
    IR::IRData::getTriangulationData((IR::IRData::Implementation **)a1, (CFDictionaryRef *)&v83);
    if (a3)
      v40 = "float32";
    else
      v40 = "int16";
    std::string::basic_string[abi:ne180100]<0>(__p, v40);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],std::string>((applesauce::CF::TypeRef *)__N_4, "CoefficientFormat", (uint64_t)__p);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],unsigned int &>((applesauce::CF::TypeRef *)v117, "FilterLength", (int *)&__N);
    v81 = *(_DWORD *)*a1;
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float>((applesauce::CF::TypeRef *)v118, "SampleRate", &v81);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],char const(&)[8]>((applesauce::CF::TypeRef *)v119, "DelayFormat", "float32");
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[20],unsigned long &>((applesauce::CF::TypeRef *)&v120, "TotalNumCoordinates", (uint64_t *)&v103);
    v41 = v104;
    if (v104)
    {
      CFRetain(v104);
    }
    else
    {
      v79[0] = 0;
      v79[1] = 0;
      v41 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v79);
    }
    v80 = v41;
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)&v121, "UserData", &v80);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef &>((applesauce::CF::TypeRef *)&v122, "Dimensions", &v84);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],float &>((applesauce::CF::TypeRef *)&v123, "FilterScaleFactor", (int *)&__B);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],unsigned int &>((applesauce::CF::TypeRef *)&v124, "NumChannels", (int *)&v114);
    IR::IRData::Implementation::getDescription(*a1, &v77);
    if (v77)
      IR::IRData::Implementation::getDescription(*a1, &v78);
    else
      applesauce::CF::make_StringRef(&stru_24CA2D4D8, (applesauce::CF::StringRef *)&v78);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],applesauce::CF::StringRef>((applesauce::CF::TypeRef *)&v125, "Description", &v78);
    v42 = v83;
    if (v83 && a2)
    {
      CFRetain(v83);
    }
    else
    {
      v75[0] = 0;
      v75[1] = 0;
      v42 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v75);
    }
    v76 = v42;
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)v126, "TriangulationData", &v76);
    __C = __N_4;
    v88 = 11;
    v43 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__C);
    v44 = 0;
    v82 = v43;
    do
    {
      v45 = *(const void **)&v126[v44 + 8];
      if (v45)
        CFRelease(v45);
      v46 = *(const void **)&v126[v44];
      if (v46)
        CFRelease(v46);
      v44 -= 16;
    }
    while (v44 != -176);
    if (v76)
      CFRelease(v76);
    if (v78)
      CFRelease(v78);
    if (v77)
      CFRelease(v77);
    if (v80)
      CFRelease(v80);
    if (v86 < 0)
      operator delete(__p[0]);
    Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x24BDBD240], v43, kCFPropertyListBinaryFormat_v1_0, 0, 0);
    v48 = Data;
    if (Data)
    {
      v74 = v43;
      v49 = CFDataGetLength(Data);
      v50 = v49 + 4;
      v51 = 1;
      if (a3)
        v51 = 2;
      v52 = v50 + 4 * v103 * (v114 + v7) + ((v103 * v114 * __N) << v51);
      v53 = operator new[]();
      *(_DWORD *)v53 = v49;
      v132.location = 0;
      v132.length = v49;
      CFDataGetBytes(v48, v132, (UInt8 *)(v53 + 4));
      std::vector<short>::vector(__N_4, __N);
      length = v52;
      v73 = v48;
      std::vector<float>::vector(__p, __N);
      LODWORD(__C) = 1191181824;
      LODWORD(v79[0]) = -956301312;
      v54 = 0.0;
      if (__B != 0.0)
        v54 = v24 / __B;
      __B = v54;
      v55 = v103;
      if (v103)
      {
        v56 = 0;
        v57 = 0;
        v58 = 4 * v7;
        v59 = v114;
        v60 = v114;
        do
        {
          memcpy((void *)(v53 + v50), *(const void **)(v111 + 24 * v56), v58);
          v50 += v58;
          if (v60)
          {
            v61 = 0;
            do
            {
              if (a3)
              {
                v62 = 4 * __N;
                memcpy((void *)(v53 + v50), (const void *)(*(_QWORD *)(v107 + 24 * v56) + 4 * __N * v61), v62);
              }
              else
              {
                vDSP_vsmul((const float *)(*(_QWORD *)(v107 + 24 * v56) + 4 * __N * v61), 1, &__B, (float *)__p[0], 1, __N);
                vDSP_vclip((const float *)__p[0], 1, (const float *)v79, (const float *)&__C, (float *)__p[0], 1, __N);
                vDSP_vfix16((const float *)__p[0], 1, (__int16 *)__N_4[0], 1, __N);
                v62 = 2 * __N;
                memcpy((void *)(v53 + v50), __N_4[0], v62);
                v59 = v114;
              }
              *(_DWORD *)(v53 + v62 + v50) = *(_DWORD *)(*(_QWORD *)(v110[0] + 24 * v56) + 4 * v61);
              v50 += v62 + 4;
              ++v61;
            }
            while (v61 < v59);
            v55 = v103;
            v60 = v59;
          }
          v56 = ++v57;
        }
        while (v55 > v57);
      }
      CFRelease(v73);
      v20 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)v53, length, 0);
      v43 = v74;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      if (__N_4[0])
      {
        __N_4[1] = __N_4[0];
        operator delete(__N_4[0]);
      }
      if (!v74)
        goto LABEL_102;
    }
    else
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v63 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::createSerializedIRData(v63, v64, v65, v66, v67, v68, v69, v70);
      v20 = 0;
      if (!v43)
        goto LABEL_102;
    }
    CFRelease(v43);
LABEL_102:
    if (v83)
      CFRelease(v83);
    if (v84)
      CFRelease(v84);
    if (v89)
    {
      v90 = v89;
      operator delete(v89);
    }
    if (v94)
    {
      v95 = v94;
      operator delete(v94);
    }
    if (v97)
    {
      v98 = v97;
      operator delete(v97);
    }
    __N_4[0] = (void **)v100;
    std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](__N_4);
    if (cf)
      CFRelease(cf);
    if (v104)
      CFRelease(v104);
    if (v105[0])
    {
      v105[1] = v105[0];
      operator delete(v105[0]);
    }
    if (v106[0])
    {
      v106[1] = v106[0];
      operator delete(v106[0]);
    }
    __N_4[0] = (void **)&v107;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](__N_4);
    __N_4[0] = (void **)v110;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](__N_4);
    __N_4[0] = (void **)&v111;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](__N_4);
    return v20;
  }
  if (IR::getIRDataLog(void)::onceToken != -1)
    dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
  v12 = IR::getIRDataLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
    IR::IRData::Implementation::createSerializedIRData(v12, v13, v14, v15, v16, v17, v18, v19);
  return 0;
}

void sub_21057F4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, const void *a16, uint64_t a17, uint64_t a18, uint64_t a19, const void *a20,uint64_t a21,uint64_t a22,const void *a23,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,char a47,uint64_t a48,uint64_t a49,const void *a50,uint64_t a51,uint64_t a52,const void *a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,char a63)
{
  char a66;
  void *a70;
  applesauce::CF::TypeRefPair *v70;

  applesauce::CF::StringRef::~StringRef(&a16);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a20);
  if (a30 < 0)
    operator delete(__p);
  while (v70 != (applesauce::CF::TypeRefPair *)&a70)
  {
    v70 = (applesauce::CF::TypeRefPair *)((char *)v70 - 16);
    applesauce::CF::TypeRefPair::~TypeRefPair(v70);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a23);
  applesauce::CF::ArrayRef::~ArrayRef(&a24);
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  if (a41)
  {
    a42 = (uint64_t)a41;
    operator delete(a41);
  }
  if (a44)
  {
    a45 = (uint64_t)a44;
    operator delete(a44);
  }
  a70 = &a47;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a50);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a53);
  if (a54)
  {
    a55 = (uint64_t)a54;
    operator delete(a54);
  }
  if (a57)
  {
    a58 = (uint64_t)a57;
    operator delete(a57);
  }
  a70 = &a60;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  a70 = &a63;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  a70 = &a66;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a70);
  _Unwind_Resume(a1);
}

CFDictionaryRef IR::IRData::Implementation::createSoundProfileMetaDataDictionary(IR::IRData::Implementation *this, const __CFData *a2)
{
  CFPropertyListRef v3;
  CFDictionaryRef CFDictionaryRef;
  uint64_t i;
  const void *v6;
  const void *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *exception;
  CFTypeRef v26;
  CFTypeRef cf;
  CFTypeRef v28;
  CFTypeRef v29;
  _QWORD v30[2];
  CFTypeRef v31;
  _BYTE v32[16];
  _QWORD v33[3];

  v33[2] = *MEMORY[0x24BDAC8D0];
  if (!CFDataGetLength(this))
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v8 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::createSoundProfileMetaDataDictionary(v8, v9, v10, v11, v12, v13, v14, v15);
    return 0;
  }
  v3 = CFPropertyListCreateWithData(0, this, 1uLL, 0, 0);
  if (!v3)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v16 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::createSoundProfileMetaDataDictionary(v16, v17, v18, v19, v20, v21, v22, v23);
    return 0;
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v31, v3);
  if (!v31)
    return 0;
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v28, "");
  applesauce::CF::at_or<applesauce::CF::StringRef,char const* const&>((const __CFDictionary *)v31, IR::kCloudIRDataKey_Version, &v28, &v29);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::StringRef>((applesauce::CF::TypeRef *)v32, IR::kCloudIRDataKey_Version, &v29);
  if (!v31)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v26, "");
  applesauce::CF::at_or<applesauce::CF::StringRef,char const* const&>((const __CFDictionary *)v31, &IR::kCloudIRDataKey_DeviceName, &v26, &cf);
  applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::StringRef>((applesauce::CF::TypeRef *)v33, &IR::kCloudIRDataKey_DeviceName, &cf);
  v30[0] = v32;
  v30[1] = 2;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v30);
  for (i = 0; i != -4; i -= 2)
  {
    v6 = (const void *)v33[i + 1];
    if (v6)
      CFRelease(v6);
    v7 = *(const void **)&v32[i * 8 + 16];
    if (v7)
      CFRelease(v7);
  }
  if (cf)
    CFRelease(cf);
  if (v26)
    CFRelease(v26);
  if (v29)
    CFRelease(v29);
  if (v28)
    CFRelease(v28);
  if (v31)
    CFRelease(v31);
  return CFDictionaryRef;
}

void sub_21057FA60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, uint64_t a14, const void *a15, char a16)
{
  applesauce::CF::TypeRefPair *v16;

  applesauce::CF::StringRef::~StringRef(&a12);
  applesauce::CF::StringRef::~StringRef(&a11);
  while (v16 != (applesauce::CF::TypeRefPair *)&a16)
  {
    v16 = (applesauce::CF::TypeRefPair *)((char *)v16 - 16);
    applesauce::CF::TypeRefPair::~TypeRefPair(v16);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a15);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::getSoundProfileVersion(IR::IRData::Implementation *this@<X0>, std::string *a2@<X8>)
{
  CFPropertyListRef v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__p[2];
  uint64_t v23;
  CFTypeRef cf;

  if (!CFDataGetLength(this))
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v6 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::getSoundProfileVersion(v6, v7, v8, v9, v10, v11, v12, v13);
    goto LABEL_16;
  }
  v5 = CFPropertyListCreateWithData(0, this, 1uLL, 0, 0);
  if (!v5)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v14 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::getSoundProfileVersion(v14, v15, v16, v17, v18, v19, v20, v21);
    goto LABEL_16;
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, v5);
  if (!cf)
  {
LABEL_16:
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    return;
  }
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  applesauce::CF::at_or<std::string,char const* const&>((const __CFDictionary *)cf, IR::kCloudIRDataKey_Version, (uint64_t)__p, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (cf)
    CFRelease(cf);
}

CFDictionaryRef IR::IRData::Implementation::createDictionaryIRData(unsigned int **this, const IR::IRData *a2)
{
  int v2;
  unsigned int *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t i;
  float v13;
  unsigned int *v14;
  std::vector<unsigned int>::pointer begin;
  unsigned int *v16;
  std::vector<unsigned int>::pointer v17;
  unsigned int v18;
  unsigned int v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CFDictionaryRef v28;
  const void *v29;
  uint64_t j;
  const void *v31;
  const void *v32;
  _QWORD v34[2];
  CFTypeRef v35;
  _QWORD v36[2];
  CFTypeRef v37;
  CFTypeRef CFDictionaryRef;
  CFTypeRef v39;
  CFTypeRef v40;
  unsigned int v41;
  _QWORD v42[2];
  CFTypeRef cf;
  void *__p[3];
  std::vector<unsigned int> v45;
  std::vector<unsigned int> v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[32];
  int v51;
  _OWORD v52[2];
  int v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57[3];
  _QWORD v58[3];
  uint64_t *v59[3];
  uint64_t v60[3];
  uint64_t v61[3];
  void **v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[16];
  uint64_t v73;

  v2 = (int)a2;
  v73 = *MEMORY[0x24BDAC8D0];
  v4 = *this;
  if (*((_BYTE *)*this + 24) || !v4[4])
  {
    v5 = v4[2];
    v6 = v4[7];
    v7 = v4[8];
    memset(v61, 0, sizeof(v61));
    memset(v60, 0, sizeof(v60));
    memset(v59, 0, sizeof(v59));
    std::vector<float>::vector(v62, v5);
    std::vector<std::vector<float>>::vector(v58, v7, (uint64_t)v62);
    if (v62[0])
    {
      v62[1] = v62[0];
      operator delete(v62[0]);
    }
    std::vector<float>::vector(v57, v6);
    IR::IRData::Implementation::vectorizeIRData<std::vector<float>>((uint64_t)*this, v61, v60, (uint64_t *)v59);
    v8 = (uint64_t)*this;
    v55 = 0;
    v56 = 0;
    v54 = 0;
    std::vector<IR::IRInterpolationMethod>::__init_with_size[abi:ne180100]<IR::IRInterpolationMethod*,IR::IRInterpolationMethod*>(&v54, *(const void **)(v8 + 200), *(_QWORD *)(v8 + 208), (uint64_t)(*(_QWORD *)(v8 + 208) - *(_QWORD *)(v8 + 200)) >> 2);
    v9 = (uint64_t)*this;
    v10 = *((_OWORD *)*this + 15);
    v52[0] = *((_OWORD *)*this + 14);
    v52[1] = v10;
    v53 = *(_DWORD *)(v9 + 256);
    v51 = 0;
    memset(v50, 0, sizeof(v50));
    IR::IRCoordinates::getAllCoordinates((uint64_t)v50);
    v11 = (uint64_t)*this;
    v48 = 0;
    v49 = 0;
    v47 = 0;
    std::vector<IR::IRCoordinateType>::__init_with_size[abi:ne180100]<IR::IRCoordinateType*,IR::IRCoordinateType*>(&v47, *(const void **)(v11 + 80), *(_QWORD *)(v11 + 88), (uint64_t)(*(_QWORD *)(v11 + 88) - *(_QWORD *)(v11 + 80)) >> 2);
    std::vector<unsigned int>::vector(&v46, v6);
    std::vector<unsigned int>::vector(&v45, v6);
    std::vector<float>::vector(__p, 9uLL);
    for (i = 0; i != 36; i += 4)
    {
      v13 = IR::IRCoordinates::get((uint64_t)v52, *(_DWORD *)&v50[i]);
      *(float *)((char *)__p[0] + i) = v13;
    }
    if ((_DWORD)v6)
    {
      v14 = (unsigned int *)v47;
      begin = v46.__begin_;
      v16 = (unsigned int *)v54;
      v17 = v45.__begin_;
      do
      {
        v18 = *v14++;
        *begin++ = v18;
        v19 = *v16++;
        *v17++ = v19;
        --v6;
      }
      while (v6);
    }
    IR::IRData::getTriangulationData((IR::IRData::Implementation **)this, (CFDictionaryRef *)&cf);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],std::vector<std::vector<std::vector<float>>> &>((applesauce::CF::TypeRef *)v62, "coefficients", v59);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],std::vector<std::vector<float>> &>((applesauce::CF::TypeRef *)&v63, "coordinates", v61);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],std::vector<std::vector<float>> &>((applesauce::CF::TypeRef *)&v64, "delays", v60);
    v41 = **this;
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float>((applesauce::CF::TypeRef *)&v65, "sampleRate", (int *)&v41);
    IR::IRData::Implementation::getDescription(*this, &v39);
    if (v39)
      IR::IRData::Implementation::getDescription(*this, &v40);
    else
      applesauce::CF::make_StringRef(&stru_24CA2D4D8, (applesauce::CF::StringRef *)&v40);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],applesauce::CF::StringRef>((applesauce::CF::TypeRef *)&v66, "description", &v40);
    IR::IRData::Implementation::getUserData(*this, &v37);
    if (v37)
    {
      IR::IRData::Implementation::getUserData(*this, &CFDictionaryRef);
    }
    else
    {
      v36[0] = 0;
      v36[1] = 0;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v36);
    }
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)&v67, "userData", &CFDictionaryRef);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],std::vector<unsigned int> &>((applesauce::CF::TypeRef *)&v68, "interpolationMethods", &v45);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],std::vector<unsigned int> &>((applesauce::CF::TypeRef *)&v69, "dimensions", &v46);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[19],std::vector<float> &>((applesauce::CF::TypeRef *)&v70, "defaultCoordinates", __p);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[29],std::vector<float> const&>((applesauce::CF::TypeRef *)&v71, "periodsForCyclicalDimensions", (_QWORD *)*this + 16);
    v29 = cf;
    if (cf && v2)
    {
      CFRetain(cf);
    }
    else
    {
      v34[0] = 0;
      v34[1] = 0;
      v29 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v34);
    }
    v35 = v29;
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::DictionaryRef>((applesauce::CF::TypeRef *)v72, "triangulationData", &v35);
    v42[0] = v62;
    v42[1] = 11;
    v28 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v42);
    for (j = 0; j != -176; j -= 16)
    {
      v31 = *(const void **)&v72[j + 8];
      if (v31)
        CFRelease(v31);
      v32 = *(const void **)&v72[j];
      if (v32)
        CFRelease(v32);
    }
    if (v35)
      CFRelease(v35);
    if (CFDictionaryRef)
      CFRelease(CFDictionaryRef);
    if (v37)
      CFRelease(v37);
    if (v40)
      CFRelease(v40);
    if (v39)
      CFRelease(v39);
    if (cf)
      CFRelease(cf);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v45.__begin_)
    {
      v45.__end_ = v45.__begin_;
      operator delete(v45.__begin_);
    }
    if (v46.__begin_)
    {
      v46.__end_ = v46.__begin_;
      operator delete(v46.__begin_);
    }
    if (v47)
    {
      v48 = v47;
      operator delete(v47);
    }
    if (v54)
    {
      v55 = v54;
      operator delete(v54);
    }
    if (v57[0])
    {
      v57[1] = v57[0];
      operator delete(v57[0]);
    }
    v62[0] = (void **)v58;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v62);
    v62[0] = (void **)v59;
    std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](v62);
    v62[0] = (void **)v60;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v62);
    v62[0] = (void **)v61;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v62);
  }
  else
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v20 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::createDictionaryIRData(v20, v21, v22, v23, v24, v25, v26, v27);
    return 0;
  }
  return v28;
}

void sub_2105801A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t IR::IRData::getMixedTimeFrequencyDomain(IR::IRData *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 24);
}

uint64_t IR::IRData::getPartitionLength(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 16);
}

uint64_t IR::IRData::getNumDimensions(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 28);
}

uint64_t IR::IRData::getFilterLength(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 8);
}

uint64_t IR::IRData::getNumFiltersPerSpatialPoint(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 32);
}

void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v8;
  _QWORD *v9;
  _BYTE *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  void *__p[3];
  _BYTE v15[24];
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  std::vector<std::vector<float>>::resize(a2, 0);
  std::vector<std::vector<float>>::resize(a3, 0);
  std::vector<std::vector<std::vector<float>>>::resize(a4, 0);
  v8 = *(unsigned int *)(a1 + 28);
  v13 = 0;
  std::vector<float>::vector(__p, v8, &v13);
  if (*(_BYTE *)(a1 + 488))
  {
    v16 = 0;
    v9 = operator new(0x30uLL);
    *v9 = &off_24CA2C8D8;
    v9[1] = a1;
    v9[2] = __p;
    v9[3] = a2;
    v9[4] = a4;
    v9[5] = a3;
    v16 = v9;
    IR::IRData::Implementation::forEachNode((_BYTE *)a1, (uint64_t)v15, 0, 0);
    v10 = v16;
    if (v16 == v15)
    {
      v11 = 4;
      v10 = v15;
      goto LABEL_8;
    }
  }
  else
  {
    v18 = 0;
    v12 = operator new(0x30uLL);
    *v12 = &off_24CA2C920;
    v12[1] = __p;
    v12[2] = a3;
    v12[3] = a2;
    v12[4] = a1;
    v12[5] = a4;
    v18 = v12;
    IR::IRData::Implementation::forEachNode((_BYTE *)a1, (uint64_t)v17, 0, 0);
    v10 = v18;
    if (v18 == v17)
    {
      v11 = 4;
      v10 = v17;
      goto LABEL_8;
    }
  }
  if (!v10)
    goto LABEL_9;
  v11 = 5;
LABEL_8:
  (*(void (**)(void))(*(_QWORD *)v10 + 8 * v11))();
LABEL_9:
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_210580564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  char *v21;
  char *v23;
  uint64_t v24;

  v23 = a21;
  if (a21 == v21)
  {
    v24 = 4;
    v23 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v24 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
LABEL_6:
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRData::getInterpolationMethod(IR::IRData *this)
{
  return *(_QWORD *)this + 200;
}

__n128 IR::IRData::getDefaultCoordinates@<Q0>(__n128 **this@<X0>, __n128 *a2@<X8>)
{
  __n128 *v2;
  __n128 result;
  __n128 v4;

  v2 = *this;
  result = (*this)[14];
  v4 = (*this)[15];
  *a2 = result;
  a2[1] = v4;
  a2[2].n128_u32[0] = v2[16].n128_u32[0];
  return result;
}

uint64_t IR::IRData::getDataLayout(IR::IRData *this)
{
  return *(_QWORD *)this + 80;
}

float IR::IRData::getSampleRate(IR::IRData *this)
{
  return **(float **)this;
}

CFTypeRef IR::IRData::getDescription@<X0>(CFTypeRef *this@<X0>, _QWORD *a2@<X8>)
{
  return IR::IRData::Implementation::getDescription(*this, a2);
}

applesauce::CF::StringRef *applesauce::CF::make_StringRef@<X0>(CFStringRef format@<X0>, applesauce::CF::StringRef *a2@<X8>, ...)
{
  CFStringRef v4;
  applesauce::CF *exception;
  va_list va;

  va_start(va, a2);
  v4 = CFStringCreateWithFormatAndArguments(0, 0, format, va);
  if (!v4)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return applesauce::CF::StringRef::StringRef(a2, v4);
}

void sub_210580680()
{
  void *v0;

}

void sub_210580698(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFTypeRef IR::IRData::getUserData@<X0>(CFTypeRef *this@<X0>, _QWORD *a2@<X8>)
{
  return IR::IRData::Implementation::getUserData(*this, a2);
}

uint64_t IR::IRData::getPeriodForCyclicalDimensions(IR::IRData *this)
{
  return *(_QWORD *)this + 128;
}

CFDataRef IR::IRData::Implementation::createSerializedIRData(CFTypeRef **a1, int a2, int a3)
{
  CFTypeRef *v3;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a1;
  if (v3)
    return IR::IRData::Implementation::createSerializedIRData(v3, a2, a3);
  if (IR::getIRDataLog(void)::onceToken != -1)
    dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
  v5 = IR::getIRDataLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
    IR::IRData::Implementation::createSerializedIRData(v5, v6, v7, v8, v9, v10, v11, v12);
  return 0;
}

uint64_t IR::IRData::usesVBAP(IR::IRData *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 488);
}

_BYTE *IR::IRData::Implementation::forEachNode(_BYTE *result, uint64_t a2, uint64_t a3, int a4)
{
  _BYTE *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v5 = result;
  v22 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v13 = (uint64_t *)*((_QWORD *)result + 33);
    v14 = *v13;
    v15 = v13[1];
    while (1)
    {
      if (v14 == v15)
        return result;
      std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v20, a2);
      IR::IRData::Implementation::forEachNode(v5, v20, v14, 0);
      result = v21;
      if (v21 == v20)
      {
        result = v20;
        v16 = 4;
      }
      else
      {
        if (!v21)
          goto LABEL_19;
        v16 = 5;
      }
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v16))();
LABEL_19:
      v14 += 96;
    }
  }
  v17 = a4;
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, a3, &v17);
  v9 = *(_QWORD *)(a3 + 72);
  v10 = *(_QWORD *)(a3 + 80);
  if (v9 != v10)
  {
    v11 = (a4 + 1);
    while (1)
    {
      std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
      IR::IRData::Implementation::forEachNode(v5, v18, v9, v11);
      result = v19;
      if (v19 == v18)
        break;
      if (v19)
      {
        v12 = 5;
LABEL_9:
        result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
      }
      v9 += 96;
      if (v9 == v10)
        return result;
    }
    result = v18;
    v12 = 4;
    goto LABEL_9;
  }
  return result;
}

{
  _BYTE *v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  _BYTE v18[24];
  _BYTE *v19;
  _BYTE v20[24];
  _BYTE *v21;
  uint64_t v22;

  v5 = result;
  v22 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    v13 = (uint64_t *)*((_QWORD *)result + 33);
    v14 = *v13;
    v15 = v13[1];
    while (1)
    {
      if (v14 == v15)
        return result;
      std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v20, a2);
      IR::IRData::Implementation::forEachNode(v5, v20, v14, 0);
      result = v21;
      if (v21 == v20)
      {
        result = v20;
        v16 = 4;
      }
      else
      {
        if (!v21)
          goto LABEL_19;
        v16 = 5;
      }
      result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v16))();
LABEL_19:
      v14 += 96;
    }
  }
  v17 = a4;
  v7 = *(_QWORD *)(a2 + 24);
  if (!v7)
    std::__throw_bad_function_call[abi:ne180100]();
  result = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)v7 + 48))(v7, a3, &v17);
  v9 = *(_QWORD *)(a3 + 72);
  v10 = *(_QWORD *)(a3 + 80);
  if (v9 != v10)
  {
    v11 = (a4 + 1);
    while (1)
    {
      std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v18, a2);
      IR::IRData::Implementation::forEachNode(v5, v18, v9, v11);
      result = v19;
      if (v19 == v18)
        break;
      if (v19)
      {
        v12 = 5;
LABEL_9:
        result = (_BYTE *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
      }
      v9 += 96;
      if (v9 == v10)
        return result;
    }
    result = v18;
    v12 = 4;
    goto LABEL_9;
  }
  return result;
}

void sub_2105808B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<applesauce::CF::DictionaryRef>::push_back[abi:ne180100](char **a1, CFTypeRef *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int64x2_t v20;
  char *v21;
  uint64_t v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v10 = (uint64_t)(v7 - (_QWORD)*a1) >> 3;
    if ((unint64_t)(v10 + 1) >> 61)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = v5 - (_QWORD)*a1;
    v12 = v11 >> 2;
    if (v11 >> 2 <= (unint64_t)(v10 + 1))
      v12 = v10 + 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    v25 = v4;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(v4, v13);
    else
      v14 = 0;
    v15 = &v14[8 * v10];
    v16 = &v14[8 * v13];
    v24 = v16;
    std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef*>(v15, a2);
    v9 = v15 + 8;
    v23.i64[1] = (uint64_t)(v15 + 8);
    v18 = *a1;
    v17 = a1[1];
    if (v17 == *a1)
    {
      v20 = vdupq_n_s64((unint64_t)v17);
    }
    else
    {
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v15 - 1) = v19;
        v15 -= 8;
        *(_QWORD *)v17 = 0;
      }
      while (v17 != v18);
      v20 = *(int64x2_t *)a1;
      v9 = (char *)v23.i64[1];
      v16 = v24;
    }
    *a1 = v15;
    a1[1] = v9;
    v23 = v20;
    v21 = a1[2];
    a1[2] = v16;
    v24 = v21;
    v22 = v20.i64[0];
    result = std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer((uint64_t)&v22);
  }
  else
  {
    result = (uint64_t)std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef*>(*(_QWORD **)(v4 - 8), a2);
    v9 = (char *)(v7 + 8);
  }
  a1[1] = v9;
  return result;
}

__CFData *IR::IRData::Implementation::createSerializedIRDataWithNoise(IR::IRData::Implementation *this, const __CFData *a2)
{
  UInt8 *BytePtr;
  CFIndex Length;
  FILE *v5;
  FILE *v6;
  uint64_t FileByteSize;
  const __CFDictionary *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  std::string::size_type size;
  std::string *v16;
  int data;
  int v18;
  char v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __CFData *MutableCopy;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  std::string *v63;
  std::string::size_type v64;
  std::string *v65;
  int v66;
  int v67;
  unsigned int Count;
  uint64_t v70;
  char v71;
  void **v72;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v73;
  uint64_t i;
  int v75;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  int j;
  CFIndex v81;
  uint64_t v82;
  _WORD *v83;
  CFIndex v84;
  float *v85;
  unsigned int v86;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v87;
  float v88;
  NSObject *v89;
  NSObject *v90;
  void *exception;
  const __CFDictionary *v92;
  int v93;
  int v94;
  uint64_t v95;
  _WORD *v96;
  int v97;
  int v98;
  CFIndex v99;
  const UInt8 *v100;
  float __B;
  uint64_t v102;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> __p;
  std::random_device v104;
  _WORD *v105;
  void *v106;
  uint64_t v107;
  float *v108;
  float *v109;
  uint64_t v110;
  const __CFArray *v111;
  void *v112;
  void *v113;
  uint64_t v114;
  std::string v115;
  const __CFDictionary *v116;
  int v117;
  FILE *v118[2];
  float __C;
  const char *v120;
  __int16 v121;
  unsigned int v122;
  uint64_t v123;
  CFRange v124;

  v123 = *MEMORY[0x24BDAC8D0];
  BytePtr = (UInt8 *)CFDataGetBytePtr(this);
  Length = CFDataGetLength(this);
  v5 = fmemopen(BytePtr, Length, "r");
  v118[0] = v5;
  v118[1] = (FILE *)MEMORY[0x24BDAE2E0];
  if (v5)
  {
    v6 = v5;
    FileByteSize = IR::IRData::Implementation::getFileByteSize(v118);
    v117 = 0;
    IR::IRData::Implementation::readIRPlist(v118, &v117, &v116);
    v8 = v116;
    if (!v116)
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v30 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::createSerializedIRDataWithNoise(v30, v31, v32, v33, v34, v35, v36, v37);
      MutableCopy = 0;
      goto LABEL_45;
    }
    __p.__x_[0] = 0;
    v9 = applesauce::CF::at_or<unsigned int,char const(&)[13]>(v116, "FilterLength", __p.__x_);
    if (v9)
    {
      v10 = v9;
      __p.__x_[0] = 0;
      v11 = applesauce::CF::at_or<unsigned int,char const(&)[20]>(v8, "TotalNumCoordinates", __p.__x_);
      if (v11)
      {
        v12 = v11;
        __p.__x_[0] = 0;
        v13 = applesauce::CF::at_or<unsigned int,char const(&)[12]>(v8, "NumChannels", __p.__x_);
        if (v13)
        {
          v14 = v13;
          memset(&__p, 0, 24);
          applesauce::CF::at_or<std::string,char const(&)[18]>(v8, "CoefficientFormat", (uint64_t)&__p, &v115);
          if (SHIBYTE(__p.__x_[5]) < 0)
            operator delete(*(void **)__p.__x_);
          if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = HIBYTE(v115.__r_.__value_.__r.__words[2]);
          else
            size = v115.__r_.__value_.__l.__size_;
          if (size == 7)
          {
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v63 = &v115;
            else
              v63 = (std::string *)v115.__r_.__value_.__r.__words[0];
            if (memcmp(v63, "float32", 7uLL))
            {
LABEL_51:
              if (IR::getIRDataLog(void)::onceToken != -1)
                dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
              if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
                IR::IRData::Implementation::createSerializedIRDataWithNoise();
LABEL_73:
              MutableCopy = 0;
LABEL_74:
              if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v115.__r_.__value_.__l.__data_);
              goto LABEL_44;
            }
            v97 = 0;
            v20 = 2;
          }
          else
          {
            if (size != 5)
              goto LABEL_51;
            v16 = &v115;
            if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v16 = (std::string *)v115.__r_.__value_.__r.__words[0];
            data = (int)v16->__r_.__value_.__l.__data_;
            v18 = v16->__r_.__value_.__s.__data_[4];
            if (data != 829714025 || v18 != 54)
              goto LABEL_51;
            v20 = 1;
            v97 = 1;
          }
          v113 = 0;
          v112 = 0;
          v114 = 0;
          applesauce::CF::at_or<std::string,char const(&)[12]>(v8, "DelayFormat", (uint64_t)&v112, (std::string *)&__p);
          if (SHIBYTE(v115.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v115.__r_.__value_.__l.__data_);
          *(_OWORD *)&v115.__r_.__value_.__l.__data_ = *(_OWORD *)__p.__x_;
          v115.__r_.__value_.__r.__words[2] = *(_QWORD *)&__p.__x_[4];
          HIBYTE(__p.__x_[5]) = 0;
          LOBYTE(__p.__x_[0]) = 0;
          if (SHIBYTE(v114) < 0)
            operator delete(v112);
          v64 = HIBYTE(v115.__r_.__value_.__r.__words[2]);
          if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v64 = v115.__r_.__value_.__l.__size_;
          if (v64 != 7)
            goto LABEL_69;
          v65 = &v115;
          if ((v115.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v65 = (std::string *)v115.__r_.__value_.__r.__words[0];
          v66 = (int)v65->__r_.__value_.__l.__data_;
          v67 = *(_DWORD *)((char *)v65->__r_.__value_.__r.__words + 3);
          if (v66 != 1634692198 || v67 != 842232929)
          {
LABEL_69:
            if (IR::getIRDataLog(void)::onceToken != -1)
              dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
            if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              IR::IRData::Implementation::createSerializedIRDataWithNoise();
            goto LABEL_73;
          }
          *(_QWORD *)__p.__x_ = CFSTR("Dimensions");
          v112 = 0;
          applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>(v8, (const void **)&__p, &v112, &v111);
          if (v112)
            CFRelease(v112);
          if (!v111)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x212BC76A0](exception, "Could not construct");
          }
          Count = CFArrayGetCount(v111);
          if (Count < 0xA)
          {
            v70 = MEMORY[0x212BC7BB0](v6);
            v71 = 1;
            if (!v97)
              v71 = 2;
            if (FileByteSize - v70 >= (((unint64_t)(v14 * v10) << v71) + 4 * v14 + 4 * Count) * v12)
            {
              v113 = 0;
              v112 = 0;
              v114 = 0;
              v109 = 0;
              v108 = 0;
              v110 = 0;
              v106 = 0;
              v105 = 0;
              v107 = 0;
              if (v97)
              {
                v72 = (void **)&v105;
                std::vector<short>::resize((uint64_t)&v105, v10);
              }
              else
              {
                std::vector<float>::resize((uint64_t)&v112, v10);
                std::vector<float>::resize((uint64_t)&v108, v10);
                v72 = &v112;
              }
              v100 = (const UInt8 *)*v72;
              std::random_device::random_device[abi:ne180100](&v104);
              v73 = MEMORY[0x212BC779C](&v104);
              v92 = v8;
              v99 = (unint64_t)v10 << v20;
              __p.__x_[0] = v73;
              for (i = 1; i != 624; ++i)
              {
                v73 = i + 1812433253 * (v73 ^ (v73 >> 30));
                __p.__x_[i] = v73;
              }
              __p.__i_ = 0;
              v102 = 0x100000000;
              v96 = v105;
              v75 = v97;
              MutableCopy = CFDataCreateMutableCopy(0, 0, this);
              v76 = 0;
              if (v10 <= 1)
                v77 = 1;
              else
                v77 = v10;
              v95 = v77;
              if (v14 <= 1)
                v78 = 1;
              else
                v78 = v14;
              v98 = v78;
              if (v12 <= 1)
                v79 = 1;
              else
                v79 = v12;
              v93 = v79;
              do
              {
                v94 = v76;
                fseek(v6, 4 * Count, 1);
                for (j = 0; j != v98; ++j)
                {
                  v81 = MEMORY[0x212BC7BB0](v6);
                  if (v75)
                  {
                    v82 = v95;
                    v83 = v96;
                    if (fread(v105, 2uLL, v10, v6) == v10)
                    {
                      do
                      {
                        *v83 = *v83 & 0xFFFE | (std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>((int)&v102, &__p, &v102) != 0);
                        ++v83;
                        --v82;
                      }
                      while (v82);
                      v84 = 2 * v10;
                      v75 = v97;
                    }
                    else
                    {
                      if (IR::getIRDataLog(void)::onceToken != -1)
                        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
                      v75 = v97;
                      v89 = IR::getIRDataLog(void)::gLog;
                      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
                      {
                        __C = 4.8151e-34;
                        v120 = "createSerializedIRDataWithNoise";
                        v121 = 1024;
                        v122 = v10;
                        _os_log_error_impl(&dword_210570000, v89, OS_LOG_TYPE_ERROR, "IRData::%s: failed to read %d int16 values from input data", (uint8_t *)&__C, 0x12u);
                      }
                      bzero(v105, 2 * v10);
                      v84 = 2 * v10;
                    }
                  }
                  else if (fread(v112, 4uLL, v10, v6) == v10)
                  {
                    v85 = v108;
                    v86 = v10;
                    do
                    {
                      v87 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&__p);
                      v88 = ((double)v87
                           + (double)std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(&__p)
                           * 4294967300.0)
                          * 5.42101086e-20
                          + 0.0;
                      *v85++ = v88;
                      --v86;
                    }
                    while (v86);
                    __C = 0.0;
                    vDSP_svesq(v108, 1, &__C, v10);
                    __B = sqrtf((float)((float)v10 * 1.0e-10) / __C);
                    vDSP_vsmul(v108, 1, &__B, v108, 1, v10);
                    v75 = v97;
                    vDSP_vadd((const float *)v112, 1, v108, 1, (float *)v112, 1, v10);
                    v84 = 4 * v10;
                  }
                  else
                  {
                    if (IR::getIRDataLog(void)::onceToken != -1)
                      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
                    v90 = IR::getIRDataLog(void)::gLog;
                    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
                    {
                      __C = 4.8151e-34;
                      v120 = "createSerializedIRDataWithNoise";
                      v121 = 1024;
                      v122 = v10;
                      _os_log_error_impl(&dword_210570000, v90, OS_LOG_TYPE_ERROR, "IRData::%s: failed to read %d float values from input data", (uint8_t *)&__C, 0x12u);
                    }
                    vDSP_vclr((float *)v112, 1, v10);
                    v84 = 4 * v10;
                  }
                  v124.location = v81;
                  v124.length = v99;
                  CFDataReplaceBytes(MutableCopy, v124, v100, v84);
                  fseek(v6, 4, 1);
                }
                v76 = v94 + 1;
              }
              while (v94 + 1 != v93);
              std::random_device::~random_device(&v104);
              if (v105)
              {
                v106 = v105;
                operator delete(v105);
              }
              v8 = v92;
              if (v108)
              {
                v109 = v108;
                operator delete(v108);
              }
              if (v112)
              {
                v113 = v112;
                operator delete(v112);
              }
              goto LABEL_92;
            }
            if (IR::getIRDataLog(void)::onceToken != -1)
              dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
            if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              IR::IRData::Implementation::createSerializedIRDataWithNoise();
          }
          else
          {
            if (IR::getIRDataLog(void)::onceToken != -1)
              dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
            if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
              IR::IRData::Implementation::createSerializedIRDataWithNoise();
          }
          MutableCopy = 0;
LABEL_92:
          if (v111)
            CFRelease(v111);
          goto LABEL_74;
        }
        if (IR::getIRDataLog(void)::onceToken != -1)
          dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
        v54 = IR::getIRDataLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
          IR::IRData::Implementation::createSerializedIRDataWithNoise(v54, v55, v56, v57, v58, v59, v60, v61);
      }
      else
      {
        if (IR::getIRDataLog(void)::onceToken != -1)
          dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
        v46 = IR::getIRDataLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
          IR::IRData::Implementation::createSerializedIRDataWithNoise(v46, v47, v48, v49, v50, v51, v52, v53);
      }
    }
    else
    {
      if (IR::getIRDataLog(void)::onceToken != -1)
        dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
      v38 = IR::getIRDataLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::createSerializedIRDataWithNoise(v38, v39, v40, v41, v42, v43, v44, v45);
    }
    MutableCopy = 0;
LABEL_44:
    CFRelease(v8);
LABEL_45:
    v118[0] = 0;
    fclose(v6);
    return MutableCopy;
  }
  if (IR::getIRDataLog(void)::onceToken != -1)
    dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
  v21 = IR::getIRDataLog(void)::gLog;
  if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
    IR::IRData::Implementation::createSerializedIRDataWithNoise(v21, v22, v23, v24, v25, v26, v27, v28);
  return 0;
}

void sub_210581530(_Unwind_Exception *a1)
{
  FILE *v1;
  uint64_t v2;
  void *v4;
  void *v5;
  void *v6;

  std::random_device::~random_device((std::random_device *)&STACK[0xA4C]);
  v4 = (void *)STACK[0xA50];
  if (STACK[0xA50])
  {
    STACK[0xA58] = (unint64_t)v4;
    operator delete(v4);
  }
  v5 = (void *)STACK[0xA68];
  if (STACK[0xA68])
  {
    STACK[0xA70] = (unint64_t)v5;
    operator delete(v5);
  }
  v6 = (void *)STACK[0xA88];
  if (STACK[0xA88])
  {
    STACK[0xA90] = (unint64_t)v6;
    operator delete(v6);
  }
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v2 - 240));
  if (*(char *)(v2 - 185) < 0)
    operator delete((void *)STACK[0xAA0]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v2 - 176));
  STACK[0xAD0] = 0;
  fclose(v1);
  _Unwind_Resume(a1);
}

std::random_device *std::random_device::random_device[abi:ne180100](std::random_device *a1)
{
  std::string __token;

  std::string::basic_string[abi:ne180100]<0>(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_21058167C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFDataRef IR::IRData::Implementation::createNoisySoundProfilePack(IR::IRData::Implementation *this, const __CFData *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFStringRef v5;
  IR::IRData::Implementation *Value;
  const __CFData *v7;
  __CFData *SerializedIRDataWithNoise;
  CFStringRef v9;
  IR::IRData::Implementation *v10;
  const __CFData *v11;
  __CFData *v12;
  CFDataRef Data;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (!CFDataGetLength(this))
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v15 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::createNoisySoundProfilePack(v15, v16, v17, v18, v19, v20, v21, v22);
    return 0;
  }
  v3 = (const __CFDictionary *)CFPropertyListCreateWithData(0, this, 1uLL, 0, 0);
  if (!v3)
  {
    if (IR::getIRDataLog(void)::onceToken != -1)
      dispatch_once(&IR::getIRDataLog(void)::onceToken, &__block_literal_global);
    v23 = IR::getIRDataLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getIRDataLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::createNoisySoundProfilePack(v23, v24, v25, v26, v27, v28, v29, v30);
    return 0;
  }
  v4 = v3;
  v5 = CFStringCreateWithCString(0, "HRIR_ITDMod", 0x8000100u);
  if (CFDictionaryContainsKey(v4, v5))
  {
    Value = (IR::IRData::Implementation *)CFDictionaryGetValue(v4, v5);
    SerializedIRDataWithNoise = IR::IRData::Implementation::createSerializedIRDataWithNoise(Value, v7);
    CFDictionaryReplaceValue(v4, v5, SerializedIRDataWithNoise);
    CFRelease(SerializedIRDataWithNoise);
  }
  CFRelease(v5);
  v9 = CFStringCreateWithCString(0, "HRIR_DFEQ", 0x8000100u);
  if (CFDictionaryContainsKey(v4, v9))
  {
    v10 = (IR::IRData::Implementation *)CFDictionaryGetValue(v4, v9);
    v12 = IR::IRData::Implementation::createSerializedIRDataWithNoise(v10, v11);
    CFDictionaryReplaceValue(v4, v9, v12);
    CFRelease(v12);
  }
  CFRelease(v9);
  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x24BDBD240], v4, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  CFRelease(v4);
  return Data;
}

void IR::IRData::Implementation::insertIRDataInTree(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, __n128 *a5, unsigned int a6, _QWORD *a7)
{
  _QWORD *v7;
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  float v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float *v22;
  float *v23;
  float v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD *v42;
  __int128 v43;
  __int128 v44;
  float v45;
  float v46;
  unint64_t v47;
  float *v48;
  float *v49;
  float *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  float *v56;
  char *v57;
  int v58;
  _QWORD *v59;
  float v60;
  float v61;
  float *v62;
  unint64_t v63;
  float *v64;
  float *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  char *v70;
  float *v71;
  char *v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  void *__p[2];
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  void **v87[2];

  v7 = a7;
  v8 = a6;
  v12 = *(_QWORD *)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  if (v13 == v12)
  {
    v19 = 0;
    v12 = *(_QWORD *)(a1 + 112);
    goto LABEL_40;
  }
  v14 = 0;
  do
  {
    v15 = IR::IRCoordinates::get(a3, *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * *(int *)(v12 + 4 * v14)));
    v16 = *(int *)(*(_QWORD *)(a1 + 104) + 4 * v14);
    v17 = *(float *)(*(_QWORD *)(a1 + 128) + 4 * v16);
    if (v17 != 0.0)
    {
      v15 = fmodf(v15, *(float *)(*(_QWORD *)(a1 + 128) + 4 * v16));
      if (v15 < 0.0)
        v15 = v17 + v15;
    }
    v19 = *a2;
    v18 = a2[1];
    if (*a2 == v18)
    {
      *(float *)&v80 = v15;
      v81 = 0u;
      v82 = 0u;
      *(_OWORD *)__p = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0;
      std::vector<IR::IRDataNode>::push_back[abi:ne180100](a2, (uint64_t)&v80);
      v87[0] = (void **)&v85;
      std::vector<IR::IRDataNode>::__destroy_vector::operator()[abi:ne180100](v87);
      if (__p[1])
      {
        *(void **)&v84 = __p[1];
        operator delete(__p[1]);
      }
      v28 = (std::__shared_weak_count *)__p[0];
      if (!__p[0])
        goto LABEL_35;
      v29 = (unint64_t *)((char *)__p[0] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      goto LABEL_33;
    }
    v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v19) >> 5);
    do
    {
      v21 = v20 >> 1;
      v22 = (float *)(v19 + 96 * (v20 >> 1));
      v24 = *v22;
      v23 = v22 + 24;
      v20 += ~(v20 >> 1);
      if (v24 < v15)
        v19 = (uint64_t)v23;
      else
        v20 = v21;
    }
    while (v20);
    if (v19 == v18)
    {
      *(float *)&v80 = v15;
      v81 = 0u;
      v82 = 0u;
      *(_OWORD *)__p = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0;
      std::vector<IR::IRDataNode>::push_back[abi:ne180100](a2, (uint64_t)&v80);
      v87[0] = (void **)&v85;
      std::vector<IR::IRDataNode>::__destroy_vector::operator()[abi:ne180100](v87);
      if (__p[1])
      {
        *(void **)&v84 = __p[1];
        operator delete(__p[1]);
      }
      v28 = (std::__shared_weak_count *)__p[0];
      if (!__p[0])
        goto LABEL_35;
      v31 = (unint64_t *)((char *)__p[0] + 8);
      do
        v30 = __ldaxr(v31);
      while (__stlxr(v30 - 1, v31));
LABEL_33:
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
LABEL_35:
      v87[0] = (void **)&v81;
      std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](v87);
      v19 = a2[1] - 96;
      goto LABEL_36;
    }
    if (*(float *)v19 != v15)
    {
      *(float *)&v80 = v15;
      v81 = 0u;
      v82 = 0u;
      *(_OWORD *)__p = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0;
      v19 = (uint64_t)std::vector<IR::IRDataNode>::insert(a2, v19, (uint64_t)&v80);
      v87[0] = (void **)&v85;
      std::vector<IR::IRDataNode>::__destroy_vector::operator()[abi:ne180100](v87);
      if (__p[1])
      {
        *(void **)&v84 = __p[1];
        operator delete(__p[1]);
      }
      v25 = (std::__shared_weak_count *)__p[0];
      if (__p[0])
      {
        v26 = (unint64_t *)((char *)__p[0] + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      v87[0] = (void **)&v81;
      std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](v87);
    }
LABEL_36:
    a2 = (uint64_t *)(v19 + 72);
    ++v14;
    v12 = *(_QWORD *)(a1 + 104);
    v13 = *(_QWORD *)(a1 + 112);
  }
  while (v14 < (v13 - v12) >> 2);
  v8 = a6;
  v7 = a7;
  if (v19)
    goto LABEL_51;
LABEL_40:
  if (v12 == v13)
  {
    v32 = a2[1];
    if (*a2 == v32)
    {
      LODWORD(v80) = 0;
      v81 = 0u;
      v82 = 0u;
      *(_OWORD *)__p = 0u;
      v84 = 0u;
      v85 = 0u;
      v86 = 0;
      std::vector<IR::IRDataNode>::push_back[abi:ne180100](a2, (uint64_t)&v80);
      v87[0] = (void **)&v85;
      std::vector<IR::IRDataNode>::__destroy_vector::operator()[abi:ne180100](v87);
      if (__p[1])
      {
        *(void **)&v84 = __p[1];
        operator delete(__p[1]);
      }
      v33 = (std::__shared_weak_count *)__p[0];
      if (__p[0])
      {
        v34 = (unint64_t *)((char *)__p[0] + 8);
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      v87[0] = (void **)&v81;
      std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](v87);
      v32 = a2[1];
    }
    v19 = v32 - 96;
  }
  else
  {
LABEL_51:
    if (!v19)
      IR::IRData::Implementation::insertIRDataInTree();
  }
  if (*(_BYTE *)(a1 + 488))
  {
    v38 = *(_QWORD **)(v19 + 32);
    v37 = v19 + 32;
    v36 = v38;
    if (!v38)
    {
      _ZNSt3__115allocate_sharedB8ne180100IN2IR23VBAPTriangulationKernelENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v80);
      std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](v37, (__int128 *)&v80);
      v39 = (std::__shared_weak_count *)v81;
      if ((_QWORD)v81)
      {
        v40 = (unint64_t *)(v81 + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      v42 = *(_QWORD **)v37;
      v43 = *(_OWORD *)a3;
      v44 = *(_OWORD *)(a3 + 16);
      *((_DWORD *)v42 + 44) = *(_DWORD *)(a3 + 32);
      *((_OWORD *)v42 + 9) = v43;
      *((_OWORD *)v42 + 10) = v44;
      v36 = *(_QWORD **)v37;
    }
    v45 = IR::IRCoordinates::get(a3, 0);
    v46 = v45;
    v47 = v36[7];
    v48 = (float *)v36[6];
    if ((unint64_t)v48 < v47)
    {
      *v48 = v45;
      v49 = v48 + 1;
      goto LABEL_77;
    }
    v50 = (float *)v36[5];
    v51 = v48 - v50;
    if ((unint64_t)(v51 + 1) >> 62)
      goto LABEL_100;
    v52 = v47 - (_QWORD)v50;
    v53 = (uint64_t)(v47 - (_QWORD)v50) >> 1;
    if (v53 <= v51 + 1)
      v53 = v51 + 1;
    if (v52 >= 0x7FFFFFFFFFFFFFFCLL)
      v54 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v54 = v53;
    if (v54)
    {
      v55 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v36 + 7), v54);
      v50 = (float *)v36[5];
      v48 = (float *)v36[6];
    }
    else
    {
      v55 = 0;
    }
    v56 = (float *)&v55[4 * v51];
    v57 = &v55[4 * v54];
    *v56 = v46;
    v49 = v56 + 1;
    while (v48 != v50)
    {
      v58 = *((_DWORD *)v48-- - 1);
      *((_DWORD *)v56-- - 1) = v58;
    }
    v36[5] = v56;
    v36[6] = v49;
    v36[7] = v57;
    if (v50)
      operator delete(v50);
LABEL_77:
    v36[6] = v49;
    v59 = *(_QWORD **)v37;
    v60 = IR::IRCoordinates::get(a3, 1u);
    v61 = v60;
    v62 = (float *)v59[9];
    v63 = v59[10];
    if ((unint64_t)v62 < v63)
    {
      *v62 = v60;
      v64 = v62 + 1;
      goto LABEL_93;
    }
    v65 = (float *)v59[8];
    v66 = v62 - v65;
    if ((unint64_t)(v66 + 1) >> 62)
LABEL_100:
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v67 = v63 - (_QWORD)v65;
    v68 = (uint64_t)(v63 - (_QWORD)v65) >> 1;
    if (v68 <= v66 + 1)
      v68 = v66 + 1;
    if (v67 >= 0x7FFFFFFFFFFFFFFCLL)
      v69 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v69 = v68;
    if (v69)
    {
      v70 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(v59 + 10), v69);
      v65 = (float *)v59[8];
      v62 = (float *)v59[9];
    }
    else
    {
      v70 = 0;
    }
    v71 = (float *)&v70[4 * v66];
    v72 = &v70[4 * v69];
    *v71 = v61;
    v64 = v71 + 1;
    while (v62 != v65)
    {
      v73 = *((_DWORD *)v62-- - 1);
      *((_DWORD *)v71-- - 1) = v73;
    }
    v59[8] = v71;
    v59[9] = v64;
    v59[10] = v72;
    if (v65)
      operator delete(v65);
LABEL_93:
    v59[9] = v64;
    std::vector<std::vector<float>>::push_back[abi:ne180100]((uint64_t *)(*(_QWORD *)v37 + 112), (uint64_t)a5);
    std::vector<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::push_back[abi:ne180100]((uint64_t *)(*(_QWORD *)v37 + 88), a4);
    if ((v8 & 0x80000000) == 0 && v8 < (unint64_t)((uint64_t)(v7[1] - *v7) >> 2))
    {
      v74 = *(_DWORD *)(*v7 + 4 * v8);
      v75 = *(_QWORD *)v37;
      if (*(_DWORD *)(*(_QWORD *)v37 + 136) == v74)
      {
        ++*(_DWORD *)(v75 + 140);
      }
      else
      {
        *(_DWORD *)(v75 + 136) = v74;
        *(_DWORD *)(v75 + 140) = 1;
      }
    }
  }
  else
  {
    std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vdeallocate((IR::FFTFilterKernel ***)(v19 + 8));
    *(_OWORD *)(v19 + 8) = *(_OWORD *)a4;
    *(_QWORD *)(v19 + 24) = *(_QWORD *)(a4 + 16);
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_QWORD *)(a4 + 16) = 0;
    std::vector<float>::__move_assign(v19 + 48, a5);
  }
}

void sub_210581EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  IR::IRDataNode::~IRDataNode((IR::IRDataNode *)va);
  _Unwind_Resume(a1);
}

void std::vector<IR::IRDataNode>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    if (v9 + 1 > 0x2AAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    v11 = 2 * v10;
    if (2 * v10 <= v9 + 1)
      v11 = v9 + 1;
    if (v10 >= 0x155555555555555)
      v12 = 0x2AAAAAAAAAAAAAALL;
    else
      v12 = v11;
    v18 = v4;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRDataNode>>(v4, v12);
    else
      v13 = 0;
    v14 = v13;
    v15 = &v13[96 * v9];
    v17 = &v13[96 * v12];
    std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>((uint64_t)v15, a2);
    v16 = v15 + 96;
    std::vector<IR::IRDataNode>::__swap_out_circular_buffer(a1, &v14);
    v8 = a1[1];
    std::__split_buffer<IR::IRDataNode>::~__split_buffer((uint64_t)&v14);
  }
  else
  {
    std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(*(_QWORD *)(v4 - 8), a2);
    v8 = v7 + 96;
    a1[1] = v7 + 96;
  }
  a1[1] = v8;
}

void sub_210581FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<IR::IRDataNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void IR::IRDataNode::~IRDataNode(IR::IRDataNode *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 72);
  std::vector<IR::IRDataNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2)
  {
    *((_QWORD *)this + 7) = v2;
    operator delete(v2);
  }
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v3 = (void **)((char *)this + 8);
  std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

_DWORD *std::vector<IR::IRDataNode>::insert(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _DWORD *v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = (_DWORD *)a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *a1) >> 5);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 5) + 1;
    if (v13 > 0x2AAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 5);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x155555555555555)
      v15 = 0x2AAAAAAAAAAAAAALL;
    else
      v15 = v13;
    v22 = v9;
    if (v15)
      v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRDataNode>>(v9, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[96 * v8];
    v20 = v19;
    v21 = &v16[96 * v15];
    std::__split_buffer<IR::IRDataNode>::push_back(&v18, a3);
    v4 = (_DWORD *)std::vector<IR::IRDataNode>::__swap_out_circular_buffer(a1, &v18, (uint64_t)v4);
    std::__split_buffer<IR::IRDataNode>::~__split_buffer((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(a2, a3);
    a1[1] = (uint64_t)(v4 + 24);
  }
  else
  {
    std::vector<IR::IRDataNode>::__move_range((uint64_t)a1, a2, v6, a2 + 96);
    *v4 = *(_DWORD *)a3;
    v12 = v7 + 96 * v8;
    std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vdeallocate((IR::FFTFilterKernel ***)(v12 + 8));
    *(_OWORD *)(v12 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(v12 + 24) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](v12 + 32, (__int128 *)(a3 + 32));
    std::vector<float>::__move_assign(v12 + 48, (__n128 *)(a3 + 48));
    std::vector<IR::IRDataNode>::__vdeallocate((void **)(v12 + 72));
    *(_OWORD *)(v12 + 72) = *(_OWORD *)(a3 + 72);
    *(_QWORD *)(v12 + 88) = *(_QWORD *)(a3 + 88);
    *(_QWORD *)(a3 + 72) = 0;
    *(_QWORD *)(a3 + 80) = 0;
    *(_QWORD *)(a3 + 88) = 0;
  }
  return v4;
}

void sub_2105821E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<IR::IRDataNode>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_210582324(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_210582460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::getCoordinateTree(IR::IRData::Implementation *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  __int128 v10;
  uint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t *v16;
  _OWORD v17[2];
  int v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  *(_DWORD *)a2 = 6;
  *(_OWORD *)(a2 + 8) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  if (*((_BYTE *)this + 488))
  {
    v4 = (uint64_t *)*((_QWORD *)this + 63);
    v5 = (uint64_t *)*((_QWORD *)this + 64);
    while (v4 != v5)
    {
      v7 = *v4;
      v6 = (std::__shared_weak_count *)v4[1];
      v19 = *v4;
      v20 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
      }
      v10 = *(_OWORD *)(v7 + 160);
      v17[0] = *(_OWORD *)(v7 + 144);
      v17[1] = v10;
      v18 = *(_DWORD *)(v7 + 176);
      v11 = *(_QWORD *)(v7 + 40);
      if (*(_QWORD *)(v7 + 48) != v11)
      {
        v12 = 0;
        v13 = 1;
        do
        {
          IR::IRCoordinates::set((uint64_t)v17, 0, *(float *)(v11 + 4 * v12));
          IR::IRCoordinates::set((uint64_t)v17, 1u, *(float *)(*(_QWORD *)(v7 + 64) + 4 * v12));
          IR::IRData::Implementation::insertInCoordinateTree(this, (const IR::IRCoordinates *)v17, (IR::IRCoordinateTree *)a2);
          v12 = v13;
          v11 = *(_QWORD *)(v7 + 40);
          ++v13;
        }
        while (v12 < (*(_QWORD *)(v7 + 48) - v11) >> 2);
      }
      if (v6)
      {
        v14 = (unint64_t *)&v6->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v4 += 2;
    }
  }
  else
  {
    v16 = (uint64_t *)*((_QWORD *)this + 33);
    if (*v16 != v16[1])
    {
      *(_DWORD *)a2 = **((_DWORD **)this + 10);
      IR::IRData::Implementation::recursiveGetCoordinateTree((uint64_t)this, v16, 0, (_QWORD *)a2);
    }
  }
}

void sub_2105825D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  IR::IRCoordinateTree *v15;

  IR::IRCoordinateTree::~IRCoordinateTree(v15);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::recursiveGetCoordinateTree(uint64_t a1, uint64_t *a2, int a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  _DWORD *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  void *__p[2];
  _QWORD v28[4];
  void **v29;

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    v8 = (void **)(a4 + 1);
    v24 = (uint64_t)(a4 + 3);
    v25 = a4 + 4;
    v9 = (a3 + 1);
    do
    {
      v11 = (char *)a4[2];
      v10 = a4[3];
      if ((unint64_t)v11 >= v10)
      {
        v13 = (char *)*v8;
        v14 = (v11 - (_BYTE *)*v8) >> 2;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v16 = v10 - (_QWORD)v13;
        if (v16 >> 1 > v15)
          v15 = v16 >> 1;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
          v17 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v24, v17);
          v13 = (char *)a4[1];
          v11 = (char *)a4[2];
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[4 * v14];
        *(_DWORD *)v19 = *(_DWORD *)v4;
        v12 = v19 + 4;
        while (v11 != v13)
        {
          v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        a4[1] = v19;
        a4[2] = v12;
        a4[3] = &v18[4 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v11 = *(_DWORD *)v4;
        v12 = v11 + 4;
      }
      a4[2] = v12;
      if (*(_QWORD *)(v4 + 72) != *(_QWORD *)(v4 + 80))
      {
        v26 = 6;
        *(_OWORD *)__p = 0u;
        memset(v28, 0, sizeof(v28));
        v21 = a4[5];
        if (v21 >= a4[6])
        {
          v22 = std::vector<IR::IRCoordinateTree>::__push_back_slow_path<IR::IRCoordinateTree>(v25, (uint64_t)&v26);
        }
        else
        {
          *(_DWORD *)v21 = 6;
          *(_QWORD *)(v21 + 8) = 0;
          *(_QWORD *)(v21 + 16) = 0;
          *(_QWORD *)(v21 + 24) = 0;
          *(_QWORD *)(v21 + 32) = 0;
          *(_OWORD *)(v21 + 8) = *(_OWORD *)__p;
          *(_QWORD *)(v21 + 24) = v28[0];
          __p[0] = 0;
          __p[1] = 0;
          v28[0] = 0;
          *(_QWORD *)(v21 + 40) = 0;
          *(_QWORD *)(v21 + 48) = 0;
          *(_OWORD *)(v21 + 32) = *(_OWORD *)&v28[1];
          *(_QWORD *)(v21 + 48) = v28[3];
          memset(&v28[1], 0, 24);
          v22 = v21 + 56;
        }
        a4[5] = v22;
        v29 = (void **)&v28[1];
        std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v29);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        v23 = a4[5];
        *(_DWORD *)(v23 - 56) = *(_DWORD *)(*(_QWORD *)(a1 + 80) + 4 * v9);
        IR::IRData::Implementation::recursiveGetCoordinateTree(a1, v4 + 72, v9, v23 - 56);
      }
      v4 += 96;
    }
    while (v4 != v5);
  }
}

void sub_2105827F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  IR::IRCoordinateTree::~IRCoordinateTree((IR::IRCoordinateTree *)va);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::insertInCoordinateTree(IR::IRData::Implementation *this, const IR::IRCoordinates *a2, IR::IRCoordinateTree *a3)
{
  uint64_t v3;
  unint64_t v7;
  float v8;
  uint64_t v9;
  uint64_t v10;
  float v11;
  float *v12;
  float *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  float *v18;
  char *v19;
  float v20;
  unint64_t v21;
  float *v22;
  uint64_t *v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  float *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *__p[2];
  _QWORD v38[4];
  float v39;
  void **v40;

  v3 = *((_QWORD *)this + 10);
  if (*((_QWORD *)this + 11) != v3)
  {
    v7 = 0;
    do
    {
      v39 = 0.0;
      v8 = IR::IRCoordinates::get((uint64_t)a2, *(_DWORD *)(v3 + 4 * v7));
      v39 = v8;
      v9 = *((_QWORD *)this + 10);
      *(_DWORD *)a3 = *(_DWORD *)(v9 + 4 * v7);
      v10 = *((_QWORD *)this + 16);
      v11 = *(float *)(v10 + 4 * v7);
      if (v11 != 0.0)
      {
        v8 = fmodf(v8, v11);
        v39 = v8;
        if (v8 < 0.0)
        {
          v8 = v8 + *(float *)(v10 + 4 * v7);
          v39 = v8;
        }
      }
      v12 = (float *)*((_QWORD *)a3 + 1);
      v13 = (float *)*((_QWORD *)a3 + 2);
      v14 = (char *)v13 - (char *)v12;
      if (v13 == v12)
      {
        v16 = (char *)*((_QWORD *)a3 + 2);
      }
      else
      {
        v15 = v14 >> 2;
        v16 = (char *)*((_QWORD *)a3 + 1);
        do
        {
          v17 = v15 >> 1;
          v18 = (float *)&v16[4 * (v15 >> 1)];
          v20 = *v18;
          v19 = (char *)(v18 + 1);
          v15 += ~(v15 >> 1);
          if (v20 < v8)
            v16 = v19;
          else
            v15 = v17;
        }
        while (v15);
      }
      if (v13 == (float *)v16)
      {
        v21 = *((_QWORD *)a3 + 3);
        if ((unint64_t)v13 >= v21)
        {
          v26 = v14 >> 2;
          v27 = (v14 >> 2) + 1;
          if (v27 >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v28 = v21 - (_QWORD)v12;
          v29 = (uint64_t)(v21 - (_QWORD)v12) >> 1;
          if (v29 > v27)
            v27 = v29;
          if (v28 >= 0x7FFFFFFFFFFFFFFCLL)
            v30 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v30 = v27;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)a3 + 24, v30);
            v12 = (float *)*((_QWORD *)a3 + 1);
            v13 = (float *)*((_QWORD *)a3 + 2);
            v8 = v39;
          }
          else
          {
            v31 = 0;
          }
          v32 = (float *)&v31[4 * v26];
          *v32 = v8;
          v22 = v32 + 1;
          while (v13 != v12)
          {
            v33 = *((_DWORD *)v13-- - 1);
            *((_DWORD *)v32-- - 1) = v33;
          }
          *((_QWORD *)a3 + 1) = v32;
          *((_QWORD *)a3 + 2) = v22;
          *((_QWORD *)a3 + 3) = &v31[4 * v30];
          if (v12)
            operator delete(v12);
        }
        else
        {
          *v13 = v8;
          v22 = v13 + 1;
        }
        *((_QWORD *)a3 + 2) = v22;
        if (((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2) - 1 > v7)
        {
          v36 = 6;
          memset(v38, 0, sizeof(v38));
          *(_OWORD *)__p = 0u;
          v34 = *((_QWORD *)a3 + 5);
          if (v34 >= *((_QWORD *)a3 + 6))
          {
            v35 = std::vector<IR::IRCoordinateTree>::__push_back_slow_path<IR::IRCoordinateTree>((uint64_t *)a3 + 4, (uint64_t)&v36);
          }
          else
          {
            *(_DWORD *)v34 = 6;
            *(_QWORD *)(v34 + 8) = 0;
            *(_QWORD *)(v34 + 16) = 0;
            *(_QWORD *)(v34 + 24) = 0;
            *(_QWORD *)(v34 + 32) = 0;
            *(_OWORD *)(v34 + 8) = *(_OWORD *)__p;
            *(_QWORD *)(v34 + 24) = v38[0];
            __p[0] = 0;
            __p[1] = 0;
            v38[0] = 0;
            *(_QWORD *)(v34 + 40) = 0;
            *(_QWORD *)(v34 + 48) = 0;
            *(_OWORD *)(v34 + 32) = *(_OWORD *)&v38[1];
            *(_QWORD *)(v34 + 48) = v38[3];
            memset(&v38[1], 0, 24);
            v35 = v34 + 56;
          }
          *((_QWORD *)a3 + 5) = v35;
          v40 = (void **)&v38[1];
          std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v40);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          a3 = (IR::IRCoordinateTree *)(*((_QWORD *)a3 + 5) - 56);
        }
      }
      else if (*(float *)v16 == v8)
      {
        if (((*((_QWORD *)this + 11) - v9) >> 2) - 1 > v7)
          a3 = (IR::IRCoordinateTree *)(*((_QWORD *)a3 + 4) + 56 * ((v16 - (char *)v12) >> 2));
      }
      else
      {
        std::vector<float>::insert((uint64_t)a3 + 8, v16, (char *)&v39);
        if (((uint64_t)(*((_QWORD *)this + 11) - *((_QWORD *)this + 10)) >> 2) - 1 > v7)
        {
          v24 = *((_QWORD *)a3 + 4);
          v23 = (uint64_t *)((char *)a3 + 32);
          v25 = (_DWORD *)(v24 + 56 * ((uint64_t)&v16[-*(v23 - 3)] >> 2));
          v36 = 6;
          *(_OWORD *)__p = 0u;
          memset(v38, 0, sizeof(v38));
          a3 = (IR::IRCoordinateTree *)std::vector<IR::IRCoordinateTree>::insert(v23, v25, (uint64_t)&v36);
          v40 = (void **)&v38[1];
          std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v40);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
      }
      ++v7;
      v3 = *((_QWORD *)this + 10);
    }
    while (v7 < (*((_QWORD *)this + 11) - v3) >> 2);
  }
}

void sub_210582B48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRCoordinateTree::~IRCoordinateTree((IR::IRCoordinateTree *)va);
  _Unwind_Resume(a1);
}

void IR::IRCoordinateTree::~IRCoordinateTree(IR::IRCoordinateTree *this)
{
  void *v2;
  void **v3;

  v3 = (void **)((char *)this + 32);
  std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = (void *)*((_QWORD *)this + 1);
  if (v2)
  {
    *((_QWORD *)this + 2) = v2;
    operator delete(v2);
  }
}

char *std::vector<float>::insert(uint64_t a1, char *__src, char *a3)
{
  char *v3;
  char *v4;
  char *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  _DWORD *v11;
  int v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  void *__p;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;

  v3 = a3;
  v4 = __src;
  v6 = *(char **)(a1 + 8);
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    v13 = *(char **)a1;
    v14 = ((uint64_t)&v6[-*(_QWORD *)a1] >> 2) + 1;
    if (v14 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v15 = __src - v13;
    v16 = (__src - v13) >> 2;
    v17 = v7 - (_QWORD)v13;
    if (v17 >> 1 > v14)
      v14 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v14;
    v30 = a1 + 16;
    if (v18)
      v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(a1 + 16, v18);
    else
      v19 = 0;
    v20 = &v19[4 * v16];
    __p = v19;
    v27 = v20;
    v28 = v20;
    v29 = &v19[4 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4)
          v22 = 1;
        else
          v22 = v15 >> 1;
        v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v8, v22);
        v20 = &v23[v22 & 0xFFFFFFFFFFFFFFFCLL];
        __p = v23;
        v27 = v20;
        v29 = &v23[4 * v24];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v21 = v16 + 2;
        if (v16 >= -1)
          v21 = v16 + 1;
        v20 -= 4 * (v21 >> 1);
        v27 = v20;
      }
    }
    *(_DWORD *)v20 = *(_DWORD *)v3;
    v28 = v20 + 4;
    v4 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27)
      v28 += (v27 - v28 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
  }
  else if (__src == v6)
  {
    *(_DWORD *)__src = *(_DWORD *)a3;
    *(_QWORD *)(a1 + 8) = __src + 4;
  }
  else
  {
    v9 = __src + 4;
    v10 = v6 - 4;
    v11 = *(_DWORD **)(a1 + 8);
    while (v10 < v6)
    {
      v12 = *(_DWORD *)v10;
      v10 += 4;
      *v11++ = v12;
    }
    *(_QWORD *)(a1 + 8) = v11;
    if (v6 != v9)
      memmove(&v6[-4 * ((v6 - v9) >> 2)], __src, v6 - v9);
    if (v4 <= v3)
      v3 += 4 * (*(_QWORD *)(a1 + 8) > (unint64_t)v3);
    *(_DWORD *)v4 = *(_DWORD *)v3;
  }
  return v4;
}

void sub_210582DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *std::vector<IR::IRCoordinateTree>::insert(uint64_t *a1, _DWORD *a2, uint64_t a3)
{
  _DWORD *v4;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0x6DB6DB6DB6DB6DB7 * (((uint64_t)a2 - *a1) >> 3);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v14 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v7) >> 3) + 1;
    if (v14 > 0x492492492492492)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v15 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v10 - v7) >> 3);
    if (2 * v15 > v14)
      v14 = 2 * v15;
    if (v15 >= 0x249249249249249)
      v16 = 0x492492492492492;
    else
      v16 = v14;
    v24 = v9;
    if (v16)
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinateTree>>(v9, v16);
    else
      v17 = 0;
    v20 = v17;
    v21 = &v17[56 * v8];
    v22 = v21;
    v23 = &v17[56 * v16];
    std::__split_buffer<IR::IRCoordinateTree>::push_back(&v20, a3);
    v4 = (_DWORD *)std::vector<IR::IRCoordinateTree>::__swap_out_circular_buffer(a1, &v20, (uint64_t)v4);
    std::__split_buffer<IR::IRCoordinateTree>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    v12 = (_QWORD *)(v7 + 56 * v8 + 48);
    if (a2 == (_DWORD *)v6)
    {
      *a2 = *(_DWORD *)a3;
      v18 = (_QWORD *)(v7 + 56 * v8);
      v18[2] = 0;
      v18[3] = 0;
      v18[1] = 0;
      *(_OWORD *)(v18 + 1) = *(_OWORD *)(a3 + 8);
      v18[3] = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      v18[4] = 0;
      v18[5] = 0;
      v18[6] = 0;
      *((_OWORD *)v18 + 2) = *(_OWORD *)(a3 + 32);
      *v12 = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      a1[1] = (uint64_t)(a2 + 14);
    }
    else
    {
      std::vector<IR::IRCoordinateTree>::__move_range((uint64_t)a1, (uint64_t)a2, v6, (uint64_t)(a2 + 14));
      *v4 = *(_DWORD *)a3;
      v13 = v7 + 56 * v8;
      std::vector<float>::__move_assign(v13 + 8, (__n128 *)(a3 + 8));
      std::vector<IR::IRCoordinateTree>::__vdeallocate(v13 + 32);
      *(_OWORD *)(v13 + 32) = *(_OWORD *)(a3 + 32);
      *v12 = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
    }
  }
  return v4;
}

void sub_210582FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<IR::IRCoordinateTree>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<IR::IRCoordinates>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (0x8E38E38E38E38E39 * ((v4 - (_BYTE *)*a1) >> 2) < a2)
  {
    if (a2 >= 0x71C71C71C71C71DLL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v5 = ((_BYTE *)a1[1] - (_BYTE *)*a1) / 36;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinates>>(v3, a2);
    v7 = &v6[36 * v5];
    v9 = &v6[36 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *(_OWORD *)(v10 - 36);
        v14 = *(_OWORD *)(v10 - 20);
        *((_DWORD *)v12 - 1) = *((_DWORD *)v10 - 1);
        *(_OWORD *)(v12 - 20) = v14;
        *(_OWORD *)(v12 - 36) = v13;
        v12 -= 36;
        v10 -= 36;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

BOOL AUSM::ExclusionZone::isInExclusionZone@<W0>(AUSM::ExclusionZone *this@<X0>, float a2@<S0>, float a3@<S1>, float a4@<S2>, float a5@<S3>, BOOL a6@<W8>)
{
  float v9;
  float v10;
  float v11;
  BOOL v12;
  BOOL v13;
  float v14;
  float v15;
  BOOL v16;
  BOOL v17;
  __float2 v19;
  __float2 v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  _BOOL4 v26;
  _BOOL4 v27;
  _BOOL4 v28;
  float v29;
  float v30;
  BOOL v31;
  float v32;
  float v33;
  BOOL v34;

  if (*(_DWORD *)this == 1)
  {
    v19 = __sincosf_stret(a2 * 0.017453);
    v20 = __sincosf_stret(a3 * 0.017453);
    v21 = v19.__sinval * (float)(v20.__cosval * a4);
    v22 = v19.__cosval * (float)(v20.__cosval * a4);
    v23 = v20.__sinval * a4;
    v24 = *((float *)this + 1);
    v25 = *((float *)this + 2);
    v26 = v21 >= (float)(v24 - a5);
    if (v21 <= (float)(v25 + a5))
      v26 = 1;
    v27 = v21 >= (float)(v24 - a5);
    if (v21 > (float)(v25 + a5))
      v27 = 0;
    if (v24 <= v25)
      v28 = v27;
    else
      v28 = v26;
    v29 = *((float *)this + 3);
    v30 = *((float *)this + 4);
    v12 = v22 >= (float)(v29 - a5);
    if (v22 <= (float)(v30 + a5))
      v12 = 1;
    v31 = v22 >= (float)(v29 - a5);
    if (v22 > (float)(v30 + a5))
      v31 = 0;
    if (v29 <= v30)
      v12 = v31;
    v32 = *((float *)this + 5);
    v33 = *((float *)this + 6);
    v16 = v23 >= (float)(v32 - a5);
    if (v23 <= (float)(v33 + a5))
      v16 = 1;
    v34 = v23 >= (float)(v32 - a5);
    if (v23 > (float)(v33 + a5))
      v34 = 0;
    if (v32 <= v33)
      v16 = v34;
    if (!v28)
      return 0;
    return v12 && v16;
  }
  if (!*(_DWORD *)this)
  {
    v9 = *((float *)this + 3);
    v10 = *((float *)this + 4);
    v11 = v9 - a5;
    v12 = (float)(v9 - a5) <= a2;
    if ((float)(v10 + a5) >= a2)
      v12 = 1;
    v13 = v11 <= a2;
    if ((float)(v10 + a5) < a2)
      v13 = 0;
    if (v9 <= v10)
      v12 = v13;
    v14 = *((float *)this + 1);
    v15 = *((float *)this + 2);
    v16 = (float)(v14 - a5) <= a3;
    if ((float)(v15 + a5) >= a3)
      v16 = 1;
    v17 = (float)(v14 - a5) <= a3;
    if ((float)(v15 + a5) < a3)
      v17 = 0;
    if (v14 <= v15)
      v16 = v17;
    return v12 && v16;
  }
  return a6;
}

float IR::IRData::Implementation::estimateAverageDelay(IR::IRData::Implementation *this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  float *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  float v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD v19[3];
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  if (!*((_BYTE *)this + 488))
  {
    v19[0] = &off_24CA2CE18;
    v19[1] = (char *)&v18 + 4;
    v19[2] = &v18;
    v20 = v19;
    IR::IRData::Implementation::forEachNode(this, (uint64_t)v19, 0, 0);
    v15 = v20;
    if (v20 == v19)
    {
      v16 = 4;
      v15 = v19;
    }
    else
    {
      if (!v20)
        return *((float *)&v18 + 1) / (float)(int)v18;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
    return *((float *)&v18 + 1) / (float)(int)v18;
  }
  v1 = *((_QWORD *)this + 63);
  v2 = *((_QWORD *)this + 64);
  if (v1 == v2)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = 0.0;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)v1 + 112);
      v6 = *(_QWORD *)(*(_QWORD *)v1 + 120);
      v7 = v6 - v5;
      if (v6 != v5)
      {
        v8 = 0;
        v9 = v7 / 24;
        if (v9 <= 1)
          v9 = 1;
        do
        {
          v10 = *(float **)(v5 + 24 * v8);
          v11 = *(_QWORD *)(v5 + 24 * v8 + 8) - (_QWORD)v10;
          if (v11)
          {
            v12 = v11 >> 2;
            if (v12 <= 1)
              v12 = 1;
            v13 = v12;
            do
            {
              v14 = *v10++;
              v4 = v14 + v4;
              *((float *)&v18 + 1) = v4;
              --v13;
            }
            while (v13);
            v3 += v12;
          }
          ++v8;
        }
        while (v8 != v9);
      }
      v1 += 16;
    }
    while (v1 != v2);
  }
  LODWORD(v18) = v3;
  return *((float *)&v18 + 1) / (float)(int)v18;
}

void sub_2105833E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_210583584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  char *v18;
  uint64_t v19;

  v18 = a17;
  if (a17 == &a14)
  {
    v19 = 4;
    v18 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRData::Implementation::getBooleanFromDictionary(const __CFDictionary **a1, const UInt8 *a2, int a3)
{
  const __CFDictionary **v4;
  const __CFDictionary *v5;
  const __CFBoolean *v7;
  CFTypeID TypeID;
  int v9;
  float v10;
  uint64_t v11;
  float v12;
  CFTypeID v13;
  unsigned __int16 v14;
  void *exception;
  void *v17;
  void *v18;
  const __CFNumber *v19;
  unsigned __int8 v20;
  const __CFBoolean *v21;
  char v22;

  v4 = a1;
  v5 = *a1;
  if (!v5)
  {
LABEL_19:
    LOBYTE(v4) = a3;
    return v4 & 1;
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,std::string const&>(v5, a2, &v21);
  if (v22)
  {
    v7 = v21;
    if (!v21)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v7))
    {
      LOBYTE(a3) = CFBooleanGetValue(v7) != 0;
    }
    else
    {
      v13 = CFNumberGetTypeID();
      if (v13 == CFGetTypeID(v7))
      {
        v14 = applesauce::CF::details::number_convert_as<BOOL>(v7);
        if (v14 >= 0x100u)
          LOBYTE(a3) = v14 != 0;
      }
    }
    std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v21);
    goto LABEL_19;
  }
  if (!*v4)
  {
    v17 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v17, "Could not construct");
  }
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,std::string const&>(*v4, a2, &v19);
  v9 = v20;
  if (v20)
  {
    if (!v19)
    {
      v18 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v18, "Could not construct");
    }
    if (a3)
      v10 = 1.0;
    else
      v10 = 0.0;
    v11 = applesauce::CF::convert_as<float,0>(v19);
    v12 = *(float *)&v11;
    if ((v11 & 0xFF00000000) == 0)
      v12 = v10;
    LOBYTE(v4) = v12 > 0.5;
  }
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v19);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v21);
  if (!v9)
    goto LABEL_19;
  return v4 & 1;
}

void sub_2105837BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a9);
  std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *IR::IRData::Implementation::printNodes(IR::IRData::Implementation *this)
{
  _QWORD *v2;
  const std::locale::facet *v3;
  _QWORD *result;
  uint64_t v5;
  std::locale v6;
  _QWORD v7[3];
  _QWORD *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (**((_QWORD **)this + 33) == *(_QWORD *)(*((_QWORD *)this + 33) + 8))
  {
    v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(MEMORY[0x24BEDB318], (uint64_t)"Empty!", 6);
    std::ios_base::getloc((const std::ios_base *)((char *)v2 + *(_QWORD *)(*v2 - 24)));
    v3 = std::locale::use_facet(&v6, MEMORY[0x24BEDB350]);
    ((void (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
    std::locale::~locale(&v6);
    std::ostream::put();
    std::ostream::flush();
  }
  v7[0] = &off_24CA2CEA8;
  v8 = v7;
  IR::IRData::Implementation::forEachNode(this, (uint64_t)v7, 0, 0);
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_210583938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  std::locale::~locale((std::locale *)&a9);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::generatePanningIRData(IR::IRData::Implementation *this@<X0>, float a2@<S0>, IR::IRData::Implementation *a3@<X1>, IR *a4@<X2>, int a5@<W3>, float *a6@<X4>, IR::IRData::Implementation ***a7@<X8>)
{
  if ((_DWORD)this == 6619138)
    IR::IRData::Implementation::generateStereoPanningIRData(a3, a2, a6, a7);
  else
    IR::IRData::Implementation::generateMultiChannelPanningIRData(this, a2, (int)a3, a4, a5, (__int128 *)a7);
}

void IR::IRData::Implementation::generateStereoPanningIRData(IR::IRData::Implementation *this@<X0>, float a2@<S0>, float *a3@<X4>, IR::IRData::Implementation ***a4@<X8>)
{
  float *v6;
  int v7;
  float *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  IR::IRData::Implementation **v12;
  float *v13;
  float *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  uint64_t v21;
  char v22;
  char v23;
  IR::FFTFilterKernel *v24;
  IR::IRData::Implementation *v25;
  uint64_t v26;
  BOOL inited;
  IR::IRData::Implementation ***v28;
  float v29;
  float v30;
  float *v31;
  float v32;
  float v33;
  uint64_t v34;
  char v35;
  char v36;
  IR::FFTFilterKernel *v37;
  uint64_t v38;
  IR::IRData::Implementation **v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  IR::IRData::Implementation ***v43;
  float *v44;
  float *v45;
  float *v46;
  float *v47;
  CFTypeRef cf;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  void *__p;
  void *v54;
  _QWORD *v55;
  void *v56;
  void *v57;
  _QWORD *v58;
  char *v59;
  std::__shared_weak_count *v60;
  void *v61;
  float *v62;
  _QWORD *v63;
  float *v64;
  float *v65;
  unsigned __int8 v66;
  _QWORD v67[4];

  v67[2] = *MEMORY[0x24BDAC8D0];
  IR::generateGrid((IR *)2, (int)this, a3, (uint64_t)&v61);
  v6 = v62;
  v46 = v64;
  v47 = (float *)v61;
  v44 = v65;
  v7 = v66;
  v8 = (float *)operator new(8uLL);
  v61 = v8;
  *(_QWORD *)v8 = 1;
  v62 = v8 + 2;
  v63 = v8 + 2;
  v9 = operator new(8uLL);
  v56 = v9;
  *v9 = 0x43B4000000000000;
  v57 = v9 + 1;
  v58 = v9 + 1;
  v10 = operator new(8uLL);
  __p = v10;
  *v10 = 0x100000001;
  v54 = v10 + 1;
  v55 = v10 + 1;
  v67[0] = 0;
  v11 = (char *)operator new(0x20uLL);
  *((_QWORD *)v11 + 2) = 0;
  *(_QWORD *)v11 = &unk_24CA2CA38;
  *((_QWORD *)v11 + 1) = 0;
  v12 = (IR::IRData::Implementation **)(v11 + 24);
  v51.n128_u64[0] = 0;
  v67[0] = 0;
  cf = 0;
  v52 = 0;
  IR::IRData::IRData((IR::IRData::Implementation **)v11 + 3, 1, 0, 0, 2, 2, 6619138, (uint64_t)&v61, a2, 0.0, (uint64_t)&v56, (uint64_t)&__p, v7, (CFTypeRef *)&v51, &cf);
  if (cf)
    CFRelease(cf);
  if (v51.n128_u64[0])
    CFRelease((CFTypeRef)v51.n128_u64[0]);
  v59 = v11 + 24;
  v60 = (std::__shared_weak_count *)v11;
  if (__p)
  {
    v54 = __p;
    operator delete(__p);
  }
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v61)
  {
    v62 = (float *)v61;
    operator delete(v61);
  }
  v43 = a4;
  LODWORD(v61) = 0;
  std::vector<float>::vector(&v56, 2uLL, &v61);
  v13 = (float *)v56;
  v67[0] = v56;
  v67[1] = (char *)v56 + 4;
  if (v7)
  {
    v14 = v47;
    v15 = (char *)v6 - (char *)v47;
    if (v6 != v47)
    {
      v16 = 0;
      v17 = v15 >> 2;
      if (v17 <= 1)
        v18 = 1;
      else
        v18 = v17;
      do
      {
        v19 = sinf((float)(v14[v16] * 3.1416) / 180.0);
        v20 = cosf((float)(v46[v16] * 3.1416) / 180.0);
        *v13 = (float)(1.0 - (float)(v19 * v20)) * 0.5;
        v13[1] = (float)((float)(v19 * v20) + 1.0) * 0.5;
        IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&v61);
        IR::IRCoordinates::set((uint64_t)&v61, 0, v47[v16]);
        IR::IRCoordinates::set((uint64_t)&v61, 1u, v46[v16]);
        std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(&__p, 2uLL);
        LODWORD(cf) = 0;
        std::vector<float>::vector(&v51, 2uLL, &cf);
        v21 = 0;
        v22 = 1;
        do
        {
          v23 = v22;
          v24 = (IR::FFTFilterKernel *)operator new();
          IR::FFTFilterKernel::FFTFilterKernel((uint64_t)v24);
          std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)__p + v21, v24);
          IR::FFTFilterKernel::initializeAndStoreCoeffs(*((IR::FFTFilterKernel **)__p + v21), (const float *)v67[v21], 1u, 0, 0, 0);
          v22 = 0;
          v21 = 1;
        }
        while ((v23 & 1) != 0);
        v25 = *v12;
        cf = 0;
        v49 = 0;
        v50 = 0;
        IR::IRData::Implementation::insertIRDataInTree((uint64_t)v25, *((uint64_t **)v25 + 33), (uint64_t)&v61, (uint64_t)&__p, &v51, 0xFFFFFFFF, &cf);
        if (v51.n128_u64[0])
        {
          v51.n128_u64[1] = v51.n128_u64[0];
          operator delete((void *)v51.n128_u64[0]);
        }
        v51.n128_u64[0] = (unint64_t)&__p;
        std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
        ++v16;
        v14 = v47;
      }
      while (v16 != v18);
    }
    v26 = (uint64_t)*v12;
    v61 = 0;
    v62 = 0;
    v63 = 0;
    __p = 0;
    v54 = 0;
    v55 = 0;
    inited = IR::IRData::Implementation::initVBAPTriangulation(v26, (uint64_t *)&v61, &__p, 0);
    v51.n128_u64[0] = (unint64_t)&__p;
    std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
    __p = &v61;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
    if (!inited)
    {
      v28 = v43;
      goto LABEL_34;
    }
  }
  else if (v46 != v44)
  {
    v45 = v46;
    do
    {
      if (v47 != v6)
      {
        v29 = *v45;
        v30 = cosf((float)(*v45 * 3.1416) / 180.0);
        v31 = v47;
        do
        {
          v32 = *v31;
          v33 = sinf((float)(*v31 * 3.1416) / 180.0);
          *v13 = (float)(1.0 - (float)(v33 * v30)) * 0.5;
          v13[1] = (float)((float)(v33 * v30) + 1.0) * 0.5;
          IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&v61);
          IR::IRCoordinates::set((uint64_t)&v61, 0, v32);
          IR::IRCoordinates::set((uint64_t)&v61, 1u, v29);
          std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(&__p, 2uLL);
          LODWORD(cf) = 0;
          std::vector<float>::vector(&v51, 2uLL, &cf);
          v34 = 0;
          v35 = 1;
          do
          {
            v36 = v35;
            v37 = (IR::FFTFilterKernel *)operator new();
            IR::FFTFilterKernel::FFTFilterKernel((uint64_t)v37);
            std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)__p + v34, v37);
            IR::FFTFilterKernel::initializeAndStoreCoeffs(*((IR::FFTFilterKernel **)__p + v34), (const float *)v67[v34], 1u, 0, 0, 0);
            v35 = 0;
            v34 = 1;
          }
          while ((v36 & 1) != 0);
          v38 = (uint64_t)*v12;
          cf = 0;
          v49 = 0;
          v50 = 0;
          IR::IRData::Implementation::insertIRDataInTree(v38, *(uint64_t **)(v38 + 264), (uint64_t)&v61, (uint64_t)&__p, &v51, 0xFFFFFFFF, &cf);
          if (v51.n128_u64[0])
          {
            v51.n128_u64[1] = v51.n128_u64[0];
            operator delete((void *)v51.n128_u64[0]);
          }
          v51.n128_u64[0] = (unint64_t)&__p;
          std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
          ++v31;
        }
        while (v31 != v6);
      }
      ++v45;
    }
    while (v45 != v44);
  }
  IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(*v12);
  v39 = (IR::IRData::Implementation **)v60;
  *v43 = v12;
  v43[1] = v39;
  v28 = (IR::IRData::Implementation ***)&v59;
LABEL_34:
  *v28 = 0;
  v28[1] = 0;
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  v40 = v60;
  if (v60)
  {
    p_shared_owners = (unint64_t *)&v60->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v46)
    operator delete(v46);
  if (v47)
    operator delete(v47);
}

void sub_210583F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, CFTypeRef cf, uint64_t a20,uint64_t a21,CFTypeRef a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35)
{
  std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a22);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  if (a17)
    operator delete(a17);
  if (a18)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void IR::IRData::Implementation::generateMultiChannelPanningIRData(IR::IRData::Implementation *this@<X0>, float a2@<S0>, int a3@<W1>, IR *a4@<X2>, int a5@<W3>, __int128 *a6@<X8>)
{
  unsigned int v9;
  IR::IRDataLoader::Implementation **v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  char *v25;
  char *v26;
  int64_t v27;
  char *v28;
  char *v29;
  int64_t v30;
  char *v32;
  char *v33;
  float *v34;
  float *v35;
  float *v36;
  int v37;
  float *v38;
  float *v39;
  float *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  float v46;
  float *v47;
  float v48;
  float *v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  IR::FFTFilterKernel *v53;
  char *v54;
  __int32 *v55;
  __int32 *v56;
  IR::FFTFilterKernel *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL inited;
  __int128 *v61;
  unint64_t v62;
  float *v63;
  float v64;
  float *v65;
  float v66;
  float *v67;
  float *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  IR::FFTFilterKernel *v72;
  char *v73;
  __int32 *v74;
  __int32 *v75;
  IR::FFTFilterKernel *v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  __int128 *v81;
  float *v82;
  float *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 cf;
  CFTypeRef v88;
  CFTypeRef v89;
  _DWORD *v90;
  int v91;
  float *__A;
  float *v93;
  float *v94;
  float *__C;
  float *v96;
  float *v97;
  int v98;
  int v99;
  unsigned __int8 v100;
  uint64_t v101;
  __int128 v102;
  void *v103;
  float *v104;
  _DWORD *v105;
  float *v106;
  float *v107;
  unsigned __int8 v108;
  unsigned int v109[98];
  void *__p;
  char *v111;
  char *v112;
  std::vector<unsigned int> v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  float *v118;
  float *v119;
  void *v120[3];
  char v121;
  float v122;
  AudioChannelLayoutTag v123;

  v9 = this;
  v123 = this;
  v122 = a2;
  v11 = IR::IRDataLoader::instance(this);
  IR::IRDataLoader::getCustomLayoutFromTag(v11, v9, (uint64_t)v120);
  if (v121)
    GetChannelLayoutSphericalCoordinates((const AudioChannelLayout *)v120[0], &v114);
  else
    GetChannelLayoutSphericalCoordinates(v9, &v114);
  v81 = a6;
  if (v121)
    GetChannelLayoutChannelLabels((const AudioChannelLayout *)v120[0], &v113);
  else
    GetChannelLayoutChannelLabels(v123, &v113);
  v111 = 0;
  __p = 0;
  v112 = 0;
  v12 = (char *)v113.__end_ - (char *)v113.__begin_;
  if ((int)((unint64_t)((char *)v113.__end_ - (char *)v113.__begin_) >> 2) >= 1)
  {
    v13 = (int)((uint64_t)v12 >> 2);
    do
    {
      v14 = v13 - 1;
      if ((IsLFEChannelLabel(v113.__begin_[v13 - 1]) & 1) != 0 || v118[v14] == 0.0)
      {
        v15 = v111;
        if (v111 >= v112)
        {
          v17 = (char *)__p;
          v18 = (v111 - (_BYTE *)__p) >> 2;
          v19 = v18 + 1;
          if ((unint64_t)(v18 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v20 = v112 - (_BYTE *)__p;
          if ((v112 - (_BYTE *)__p) >> 1 > v19)
            v19 = v20 >> 1;
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
            v21 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v21 = v19;
          if (v21)
          {
            v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v112, v21);
            v15 = v111;
            v17 = (char *)__p;
          }
          else
          {
            v22 = 0;
          }
          v23 = &v22[4 * v18];
          *(_DWORD *)v23 = v14;
          v16 = v23 + 4;
          while (v15 != v17)
          {
            v24 = *((_DWORD *)v15 - 1);
            v15 -= 4;
            *((_DWORD *)v23 - 1) = v24;
            v23 -= 4;
          }
          __p = v23;
          v111 = v16;
          v112 = &v22[4 * v21];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *(_DWORD *)v111 = v14;
          v16 = v15 + 4;
        }
        v111 = v16;
        v25 = &v114[4 * v14];
        v26 = &v114[4 * v13];
        v27 = v115 - v26;
        if (v115 != v26)
          memmove(&v114[4 * v14], v26, v115 - v26);
        v115 = &v25[v27];
        v28 = &v116[4 * v14];
        v29 = &v116[4 * v13];
        v30 = v117 - v29;
        if (v117 != v29)
          memmove(&v116[4 * v14], v29, v117 - v29);
        v117 = &v28[v30];
      }
    }
    while (v13-- > 1);
    v12 = (char *)v113.__end_ - (char *)v113.__begin_;
  }
  if (!(v12 >> 2))
  {
    *(_QWORD *)v81 = 0;
    *((_QWORD *)v81 + 1) = 0;
    goto LABEL_106;
  }
  v33 = v114;
  v32 = v115;
  HOA::HOA((int *)v109, a4, a5, 0);
  HOA::createDecoder(v109, (uint64_t)&v114, (uint64_t)&v116, 0, 0);
  IR::generateGrid(a4, a3, v34, (uint64_t)&v103);
  v35 = (float *)v103;
  v36 = v104;
  v82 = v107;
  v83 = v106;
  v37 = v108;
  LODWORD(v84) = 1;
  v101 = 0;
  v100 = 0;
  v98 = v12 >> 2;
  v99 = 2;
  v38 = (float *)operator new(8uLL);
  v103 = v38;
  *(_QWORD *)v38 = 1;
  v104 = v38 + 2;
  v105 = v38 + 2;
  v39 = (float *)operator new(8uLL);
  __C = v39;
  *(_QWORD *)v39 = 0x43B4000000000000;
  v96 = v39 + 2;
  v97 = v39 + 2;
  v40 = (float *)operator new(8uLL);
  __A = v40;
  *(_QWORD *)v40 = 0x100000001;
  v93 = v40 + 2;
  v94 = v40 + 2;
  v91 = v37;
  v88 = 0;
  cf.n128_u64[0] = 0;
  std::allocate_shared[abi:ne180100]<IR::IRData const,std::allocator<IR::IRData const>,float &,int,int,float,BOOL,unsigned int,unsigned int,unsigned int &,std::vector<IR::IRCoordinateType>,std::vector<float>,std::vector<IR::IRInterpolationMethod>,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,void>(&v122, (int *)&v84, (int *)&v101 + 1, (float *)&v101, &v100, &v99, &v98, &v102, (int *)&v123, (uint64_t)&v103, (uint64_t)&__C, (uint64_t)&__A, &v91, &v88, (CFTypeRef *)&cf);
  if (cf.n128_u64[0])
    CFRelease((CFTypeRef)cf.n128_u64[0]);
  if (v88)
    CFRelease(v88);
  if (__A)
  {
    v93 = __A;
    operator delete(__A);
  }
  if (__C)
  {
    v96 = __C;
    operator delete(__C);
  }
  if (v103)
  {
    v104 = (float *)v103;
    operator delete(v103);
  }
  if ((_QWORD)v102)
  {
    LODWORD(v103) = 0;
    std::vector<float>::vector(&__C, ((unint64_t)(v32 - v33) >> 2), &v103);
    HIDWORD(v101) = 1065353216;
    std::vector<float>::vector(&__A, (((_DWORD)a4 + 1) * ((_DWORD)a4 + 1)));
    LODWORD(v101) = 0;
    if (v37)
    {
      v41 = (char *)v36 - (char *)v35;
      if (v36 != v35)
      {
        v42 = 0;
        v43 = v41 >> 2;
        v44 = (v12 >> 2);
        if (v43 <= 1)
          v45 = 1;
        else
          v45 = v43;
        do
        {
          v46 = v35[v42];
          v47 = (float *)operator new(4uLL);
          v103 = v47;
          *v47 = v46;
          v104 = v47 + 1;
          v105 = v47 + 1;
          v48 = v83[v42];
          v49 = (float *)operator new(4uLL);
          v88 = v49;
          *v49 = v48;
          v89 = v49 + 1;
          v90 = v49 + 1;
          HOA::createEncoder((uint64_t)v109, (uint64_t)&v103, (uint64_t)&v88);
          if (v88)
          {
            v89 = v88;
            operator delete((void *)v88);
          }
          if (v103)
          {
            v104 = (float *)v103;
            operator delete(v103);
          }
          HOA::encodeData((HOA *)v109, (const float *)&v101 + 1, __A, 1uLL);
          HOA::decodeData((HOA *)v109, __A, __C, 1uLL);
          IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&v103);
          IR::IRCoordinates::set((uint64_t)&v103, 0, v35[v42]);
          IR::IRCoordinates::set((uint64_t)&v103, 1u, v83[v42]);
          std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(&v88, v44);
          LODWORD(v84) = 0;
          std::vector<float>::vector(&cf, v44, &v84);
          v50 = 0;
          v51 = 0;
          v52 = 0;
          do
          {
            v53 = (IR::FFTFilterKernel *)operator new();
            IR::FFTFilterKernel::FFTFilterKernel((uint64_t)v53);
            std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)((char *)v88 + v50), v53);
            v54 = v111;
            v55 = wmemchr((__int32 *)__p, v51, (v111 - (_BYTE *)__p) >> 2);
            if (v55)
              v56 = v55;
            else
              v56 = (__int32 *)v54;
            v57 = (IR::FFTFilterKernel *)*((_QWORD *)v88 + v51);
            if (v56 == (__int32 *)v111)
              IR::FFTFilterKernel::initializeAndStoreCoeffs(v57, &__C[v52++], 1u, 0, 0, 0);
            else
              IR::FFTFilterKernel::initializeAndStoreCoeffs(v57, (const float *)&v101, 1u, 0, 0, 0);
            ++v51;
            v50 += 8;
          }
          while (v44 != v51);
          v58 = *(_QWORD *)v102;
          v84 = 0;
          v85 = 0;
          v86 = 0;
          IR::IRData::Implementation::insertIRDataInTree(v58, *(uint64_t **)(v58 + 264), (uint64_t)&v103, (uint64_t)&v88, &cf, 0xFFFFFFFF, &v84);
          if (cf.n128_u64[0])
          {
            cf.n128_u64[1] = cf.n128_u64[0];
            operator delete((void *)cf.n128_u64[0]);
          }
          cf.n128_u64[0] = (unint64_t)&v88;
          std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
          ++v42;
        }
        while (v42 != v45);
      }
      v59 = *(_QWORD *)v102;
      v103 = 0;
      v104 = 0;
      v105 = 0;
      v88 = 0;
      v89 = 0;
      v90 = 0;
      inited = IR::IRData::Implementation::initVBAPTriangulation(v59, (uint64_t *)&v103, &v88, 0);
      cf.n128_u64[0] = (unint64_t)&v88;
      std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
      v88 = &v103;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v88);
      if (!inited)
      {
        v61 = v81;
LABEL_92:
        *(_QWORD *)v61 = 0;
        *((_QWORD *)v61 + 1) = 0;
        if (__A)
        {
          v93 = __A;
          operator delete(__A);
        }
        if (__C)
        {
          v96 = __C;
          operator delete(__C);
        }
        goto LABEL_96;
      }
    }
    else if (v83 != v82)
    {
      v62 = (v12 >> 2);
      v63 = v83;
      do
      {
        if (v35 != v36)
        {
          v64 = *v63;
          v65 = v35;
          do
          {
            v66 = *v65;
            v67 = (float *)operator new(4uLL);
            v103 = v67;
            *v67 = v66;
            v104 = v67 + 1;
            v105 = v67 + 1;
            v68 = (float *)operator new(4uLL);
            v88 = v68;
            *v68 = v64;
            v89 = v68 + 1;
            v90 = v68 + 1;
            HOA::createEncoder((uint64_t)v109, (uint64_t)&v103, (uint64_t)&v88);
            if (v88)
            {
              v89 = v88;
              operator delete((void *)v88);
            }
            if (v103)
            {
              v104 = (float *)v103;
              operator delete(v103);
            }
            HOA::encodeData((HOA *)v109, (const float *)&v101 + 1, __A, 1uLL);
            HOA::decodeData((HOA *)v109, __A, __C, 1uLL);
            IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&v103);
            IR::IRCoordinates::set((uint64_t)&v103, 0, v66);
            IR::IRCoordinates::set((uint64_t)&v103, 1u, v64);
            std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(&v88, v62);
            LODWORD(v84) = 0;
            std::vector<float>::vector(&cf, v62, &v84);
            v69 = 0;
            v70 = 0;
            v71 = 0;
            do
            {
              v72 = (IR::FFTFilterKernel *)operator new();
              IR::FFTFilterKernel::FFTFilterKernel((uint64_t)v72);
              std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)((char *)v88 + v69), v72);
              v73 = v111;
              v74 = wmemchr((__int32 *)__p, v70, (v111 - (_BYTE *)__p) >> 2);
              if (v74)
                v75 = v74;
              else
                v75 = (__int32 *)v73;
              v76 = (IR::FFTFilterKernel *)*((_QWORD *)v88 + v70);
              if (v75 == (__int32 *)v111)
                IR::FFTFilterKernel::initializeAndStoreCoeffs(v76, &__C[v71++], 1u, 0, 0, 0);
              else
                IR::FFTFilterKernel::initializeAndStoreCoeffs(v76, (const float *)&v101, 1u, 0, 0, 0);
              ++v70;
              v69 += 8;
            }
            while (v62 != v70);
            v77 = *(_QWORD *)v102;
            v84 = 0;
            v85 = 0;
            v86 = 0;
            IR::IRData::Implementation::insertIRDataInTree(v77, *(uint64_t **)(v77 + 264), (uint64_t)&v103, (uint64_t)&v88, &cf, 0xFFFFFFFF, &v84);
            if (cf.n128_u64[0])
            {
              cf.n128_u64[1] = cf.n128_u64[0];
              operator delete((void *)cf.n128_u64[0]);
            }
            cf.n128_u64[0] = (unint64_t)&v88;
            std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&cf);
            ++v65;
          }
          while (v65 != v36);
        }
        ++v63;
      }
      while (v63 != v82);
    }
    IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(*(IR::IRData::Implementation **)v102);
    *v81 = v102;
    v61 = &v102;
    goto LABEL_92;
  }
  *(_QWORD *)v81 = 0;
  *((_QWORD *)v81 + 1) = 0;
LABEL_96:
  v78 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v79 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
  if (v83)
    operator delete(v83);
  if (v35)
    operator delete(v35);
  HOA::~HOA((HOA *)v109);
LABEL_106:
  if (__p)
  {
    v111 = (char *)__p;
    operator delete(__p);
  }
  if (v113.__begin_)
  {
    v113.__end_ = v113.__begin_;
    operator delete(v113.__begin_);
  }
  if (v118)
  {
    v119 = v118;
    operator delete(v118);
  }
  if (v116)
  {
    v117 = v116;
    operator delete(v116);
  }
  if (v114)
  {
    v115 = v114;
    operator delete(v114);
  }
  if (v121)
  {
    if (v120[0])
    {
      v120[1] = v120[0];
      operator delete(v120[0]);
    }
  }
}

void sub_210584A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  void *v48;
  uint64_t v49;
  void *v51;
  void *v52;
  void *v53;

  std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a26);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a33)
  {
    a34 = (uint64_t)a33;
    operator delete(a33);
  }
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a39);
  if (a19)
    operator delete(a19);
  if (v48)
    operator delete(v48);
  HOA::~HOA((HOA *)&a48);
  v51 = (void *)STACK[0x2C0];
  if (STACK[0x2C0])
  {
    STACK[0x2C8] = (unint64_t)v51;
    operator delete(v51);
  }
  v52 = *(void **)(v49 - 248);
  if (v52)
  {
    *(_QWORD *)(v49 - 240) = v52;
    operator delete(v52);
  }
  std::tuple<std::vector<float>,std::vector<float>,std::vector<float>>::~tuple(v49 - 224);
  if (*(_BYTE *)(v49 - 128))
  {
    v53 = *(void **)(v49 - 152);
    if (v53)
    {
      *(_QWORD *)(v49 - 144) = v53;
      operator delete(v53);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t std::tuple<std::vector<float>,std::vector<float>,std::vector<float>>::~tuple(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

IR::IRData::Implementation **IR::IRData::IRData(IR::IRData::Implementation **a1, uint64_t a2, const void **a3, uint64_t *a4)
{
  IR::IRData::Implementation *v8;
  const void *v9;
  CFDataRef v11;

  *a1 = 0;
  v8 = (IR::IRData::Implementation *)operator new();
  v9 = *a3;
  if (v9)
    CFRetain(v9);
  v11 = (CFDataRef)v9;
  IR::IRData::Implementation::Implementation((unint64_t)v8, a2, &v11, a4);
  if (v9)
    CFRelease(v9);
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](a1, v8);
  return a1;
}

void sub_210584D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  IR::IRData::Implementation **v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  MEMORY[0x212BC7928](v3, 0x10F0C407D891152);
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](v2, 0);
  _Unwind_Resume(a1);
}

IR::IRData::Implementation **IR::IRData::IRData(IR::IRData::Implementation **a1, int a2, int a3, unsigned __int8 a4, int a5, int a6, int a7, uint64_t a8, float a9, float a10, uint64_t a11, uint64_t a12, int a13, CFTypeRef *a14, CFTypeRef *a15)
{
  CFTypeRef *v16;
  CFTypeRef *v17;
  IR::IRData::Implementation *v18;
  IR::IRData::Implementation *v19;
  IR::IRData::Implementation *v21;
  int v22;
  int v23;
  int v24;
  unsigned __int8 v25;
  float v26;
  int v27;
  int v28;
  float v29;

  v16 = a14;
  v17 = a15;
  v29 = a9;
  v27 = a3;
  v28 = a2;
  v26 = a10;
  v25 = a4;
  v23 = a6;
  v24 = a5;
  v22 = a7;
  *a1 = 0;
  std::make_unique[abi:ne180100]<IR::IRData::Implementation,float &,unsigned int &,unsigned int &,float &,BOOL &,unsigned int &,unsigned int &,unsigned int &,std::vector<IR::IRCoordinateType> const&,std::vector<float> const&,std::vector<IR::IRInterpolationMethod> const&,IR::IRSphericalInterpolation &,applesauce::CF::DictionaryRef &,applesauce::CF::DictionaryRef &>(&v29, &v28, &v27, &v26, &v25, &v24, &v23, &v22, (uint64_t *)&v21, a8, a11, a12, &a13, v16, v17);
  v18 = v21;
  v21 = 0;
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](a1, v18);
  v19 = v21;
  v21 = 0;
  if (v19)
  {
    IR::IRData::Implementation::~Implementation(v19);
    MEMORY[0x212BC7928]();
  }
  return a1;
}

{
  return IR::IRData::IRData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

void sub_210584E90(_Unwind_Exception *a1)
{
  IR::IRData::Implementation **v1;

  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::make_unique[abi:ne180100]<IR::IRData::Implementation,float &,unsigned int &,unsigned int &,float &,BOOL &,unsigned int &,unsigned int &,unsigned int &,std::vector<IR::IRCoordinateType> const&,std::vector<float> const&,std::vector<IR::IRInterpolationMethod> const&,IR::IRSphericalInterpolation &,applesauce::CF::DictionaryRef &,applesauce::CF::DictionaryRef &>(float *a1@<X0>, int *a2@<X1>, int *a3@<X2>, float *a4@<X3>, unsigned __int8 *a5@<X4>, int *a6@<X5>, int *a7@<X6>, int *a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, CFTypeRef *a14, CFTypeRef *a15)
{
  float v23;
  int v24;
  float v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  CFTypeRef v31;
  CFTypeRef v32;
  int v34;
  uint64_t v35;
  const void *v36;
  const void *v37;

  v35 = operator new();
  v23 = *a1;
  v34 = *a2;
  v24 = *a3;
  v25 = *a4;
  v26 = *a5;
  v27 = *a6;
  v28 = *a7;
  v29 = *a8;
  v30 = *a13;
  v31 = *a14;
  if (*a14)
    CFRetain(*a14);
  v37 = v31;
  v32 = *a15;
  if (*a15)
    CFRetain(*a15);
  v36 = v32;
  IR::IRData::Implementation::Implementation(v35, v34, v24, v26 != 0, v27, v28, v29, a10, v23, v25, a11, a12, v30, &v37, &v36);
  *a9 = v35;
  if (v32)
    CFRelease(v32);
  if (v31)
    CFRelease(v31);
}

void sub_210585004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  const void *v11;
  va_list va;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v11 = va_arg(va1, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  MEMORY[0x212BC7928](v9, 0x10F0C407D891152);
  _Unwind_Resume(a1);
}

IR::IRData::Implementation **IR::IRData::IRData(IR::IRData::Implementation **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, float a9, const void **a10, uint64_t a11, unsigned int a12, unsigned __int8 a13, int a14, int a15, uint64_t *a16)
{
  IR::IRData::Implementation *v25;

  *a1 = 0;
  v25 = (IR::IRData::Implementation *)operator new();
  IR::IRData::Implementation::Implementation((unint64_t)v25, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](a1, v25);
  return a1;
}

{
  return IR::IRData::IRData(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16);
}

void sub_21058513C(_Unwind_Exception *a1)
{
  IR::IRData::Implementation **v1;
  uint64_t v2;

  MEMORY[0x212BC7928](v2, 0x10F0C407D891152);
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

IR::IRData::Implementation **IR::IRData::IRData(IR::IRData::Implementation **this, const IR::IRData::Implementation **a2)
{
  const IR::IRData::Implementation *v3;
  IR::IRData::Implementation *v4;

  *this = 0;
  v3 = *a2;
  v4 = (IR::IRData::Implementation *)operator new();
  IR::IRData::Implementation::Implementation(v4, v3);
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](this, v4);
  return this;
}

void sub_210585200(_Unwind_Exception *a1)
{
  IR::IRData::Implementation **v1;
  uint64_t v2;

  MEMORY[0x212BC7928](v2, 0x10F0C407D891152);
  std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

float IR::IRData::getOriginalSampleRate(IR::IRData *this)
{
  return *(float *)(*(_QWORD *)this + 4);
}

uint64_t IR::IRData::getProcessingDelay(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 12);
}

uint64_t IR::IRData::getTimeDomainFilterLength(IR::IRData *this)
{
  return IR::FFTFilterKernel::calculateFIRFilterLength(*(unsigned int *)(*(_QWORD *)this + 8), *(_DWORD *)(*(_QWORD *)this + 16), *(unsigned __int8 *)(*(_QWORD *)this + 24));
}

float IR::IRData::getMaxDelay(IR::IRData *this)
{
  return *(float *)(*(_QWORD *)this + 20);
}

uint64_t IR::IRData::getNumSpatialPoints(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 64);
}

void IR::IRData::extractIRDataTypePlist(CFTypeRef *a1@<X0>, int a2@<W1>, _DWORD *a3@<X2>, applesauce::CF::DictionaryRef *a4@<X8>)
{
  CFTypeRef v7;
  CFTypeRef cf;

  v7 = *a1;
  if (*a1)
    CFRetain(*a1);
  cf = v7;
  IR::IRData::Implementation::extractIRDataTypePlist((const __CFDictionary **)&cf, a2, a3, a4);
  if (cf)
    CFRelease(cf);
}

void sub_2105852F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRData::getOriginalNumFiltersPerSpatialPoint(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 68);
}

uint64_t IR::IRData::getModelingDelay(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 36);
}

uint64_t IR::IRData::getAudioChannelLayoutTag(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 72);
}

uint64_t IR::IRData::getOriginalAudioChannelLayoutTag(IR::IRData *this)
{
  return *(unsigned int *)(*(_QWORD *)this + 76);
}

CFTypeRef IR::IRData::Implementation::getDescription@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 35);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 35));
  *a2 = v3;
  return this;
}

CFTypeRef IR::IRData::getFilePlistDict@<X0>(CFTypeRef *this@<X0>, _QWORD *a2@<X8>)
{
  return IR::IRData::Implementation::getFilePlistDict(*this, a2);
}

CFTypeRef IR::IRData::Implementation::getFilePlistDict@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 36);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 36));
  *a2 = v3;
  return this;
}

CFTypeRef IR::IRData::Implementation::getUserData@<X0>(CFTypeRef this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 37);
  if (v3)
    this = CFRetain(*((CFTypeRef *)this + 37));
  *a2 = v3;
  return this;
}

void IR::IRData::getCoordinateTree(IR::IRData::Implementation **this@<X0>, uint64_t a2@<X8>)
{
  IR::IRData::Implementation::getCoordinateTree(*this, a2);
}

{
  IR::IRData::Implementation::getCoordinateTree(*this, a2);
}

float IR::IRData::estimateAverageDelay(IR::IRData::Implementation **this)
{
  return IR::IRData::Implementation::estimateAverageDelay(*this);
}

uint64_t IR::IRData::isAverageIRComputed(IR::IRData *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 328);
}

uint64_t IR::IRData::getAverageIR(IR::IRData *this)
{
  return *(_QWORD *)this + 304;
}

uint64_t IR::IRData::getIRDataAttributes(IR::IRData *this)
{
  return *(_QWORD *)this + 336;
}

uint64_t IR::IRData::getBooleanFromDictionary(CFTypeRef *a1, const UInt8 *a2, int a3)
{
  const __CFDictionary *v5;
  uint64_t BooleanFromDictionary;
  const __CFDictionary *v8;

  v5 = (const __CFDictionary *)*a1;
  if (*a1)
    CFRetain(*a1);
  v8 = v5;
  BooleanFromDictionary = IR::IRData::Implementation::getBooleanFromDictionary(&v8, a2, a3);
  if (v5)
    CFRelease(v5);
  return BooleanFromDictionary;
}

void sub_2105854B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  _Unwind_Resume(a1);
}

CFDataRef IR::IRData::createSerializedIRData(uint64_t a1, int a2, int a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  CFDataRef SerializedIRData;
  unint64_t *v7;
  unint64_t v8;
  CFTypeRef *v10[2];

  v3 = *(std::__shared_weak_count **)(a1 + 8);
  v10[0] = *(CFTypeRef **)a1;
  v10[1] = (CFTypeRef *)&v3->__vftable;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  SerializedIRData = IR::IRData::Implementation::createSerializedIRData(v10, a2, a3);
  if (v3)
  {
    v7 = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return SerializedIRData;
}

void sub_210585548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IR::IRData::loadSerializedIRData(IR::IRData *this@<X0>, const applesauce::CF::DataRef *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v7;
  const void *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  CFTypeRef cf;
  void *v13[2];
  char v14;
  __int128 v15;

  v7 = (uint64_t *)IR::IRDataLoader::instance(this);
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  v8 = *(const void **)this;
  if (v8)
    CFRetain(v8);
  v11 = 0;
  cf = v8;
  __p = 0;
  v10 = 0;
  IR::IRDataLoader::load(v7, (uint64_t)v13, a2, &cf, (uint64_t)&__p, (uint64_t)&v15);
  *a3 = v15;
  v15 = 0uLL;
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (cf)
    CFRelease(cf);
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_210585628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, const void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
    operator delete(__p);
  applesauce::CF::DataRef::~DataRef(&a13);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

void IR::IRData::loadSerializedIRData(IR::IRData *this@<X0>, const __CFData *const *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v7;
  const void *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  CFTypeRef cf;
  void *v13[2];
  char v14;
  __int128 v15;

  v7 = (uint64_t *)IR::IRDataLoader::instance(this);
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  v8 = *(const void **)this;
  if (v8)
    CFRetain(v8);
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v8);
  __p = 0;
  v10 = 0;
  v11 = 0;
  IR::IRDataLoader::load(v7, (uint64_t)v13, (const IR::IRDataAttributes *)a2, &cf, (uint64_t)&__p, (uint64_t)&v15);
  *a3 = v15;
  v15 = 0uLL;
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
  if (cf)
    CFRelease(cf);
  if (v14 < 0)
    operator delete(v13[0]);
}

void sub_210585728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, const void *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (__p)
    operator delete(__p);
  applesauce::CF::DataRef::~DataRef(&a13);
  if (a19 < 0)
    operator delete(a14);
  _Unwind_Resume(a1);
}

CFDataRef IR::IRData::packSerializedIRData(CFTypeRef *this, CFTypeRef *a2, const IR::IRData *a3, const void *a4, const __CFString *a5)
{
  return IR::IRData::Implementation::createSoundProfilePack(this, a2, a3, &stru_24CA2D4D8, a5);
}

CFDictionaryRef IR::IRData::createDictionaryIRData(unsigned int ***a1, const IR::IRData *a2)
{
  return IR::IRData::Implementation::createDictionaryIRData(*a1, a2);
}

_QWORD *IR::IRData::printNodes(IR::IRData::Implementation **this)
{
  return IR::IRData::Implementation::printNodes(*this);
}

_QWORD *std::vector<unsigned char>::vector(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_2105857E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned char>::__vallocate[abi:ne180100](_QWORD *a1, size_t __sz)
{
  char *result;

  if ((__sz & 0x8000000000000000) != 0)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

_QWORD *std::vector<IR::IRCoordinateType>::__init_with_size[abi:ne180100]<IR::IRCoordinateType*,IR::IRCoordinateType*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2105858A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

_QWORD *std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210585958(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IR::IRInterpolationMethod>::__init_with_size[abi:ne180100]<IR::IRInterpolationMethod*,IR::IRInterpolationMethod*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2105859D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRDataAttributes::IRDataAttributes(uint64_t a1, CFURLRef *a2, int a3, char a4, uint64_t a5, uint64_t a6, int a7, float a8)
{
  CFURLRef v9;
  const void *v10;
  const void *v12;

  *(_QWORD *)a1 = 0;
  *(float *)(a1 + 8) = a8;
  *(_DWORD *)(a1 + 12) = a3;
  *(_BYTE *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 17) = 0;
  *(_DWORD *)(a1 + 20) = a7;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  *(_OWORD *)(a1 + 40) = xmmword_2105DDE20;
  *(_BYTE *)(a1 + 56) = 1;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 92) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 108) = 1500;
  *(_BYTE *)(a1 + 112) = 1;
  *(_DWORD *)(a1 + 116) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  if (*a2)
  {
    v9 = CFURLCopyAbsoluteURL(*a2);
    applesauce::CF::URLRef::URLRef((applesauce::CF::URLRef *)&v12, v9);
    v10 = *(const void **)a1;
    *(_QWORD *)a1 = v12;
    v12 = v10;
    if (v10)
      CFRelease(v10);
  }
  return a1;
}

void sub_210585AC0(_Unwind_Exception *a1)
{
  const void **v1;
  const void **v2;
  const void **v3;

  applesauce::CF::DictionaryRef::~DictionaryRef(v3);
  applesauce::CF::URLRef::~URLRef(v1 + 11);
  applesauce::CF::URLRef::~URLRef(v2);
  applesauce::CF::URLRef::~URLRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_210585B6C(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void IR::IRDataAttributes::~IRDataAttributes(IR::IRDataAttributes *this)
{
  const void *v2;
  const void *v3;
  const void *v4;

  v2 = (const void *)*((_QWORD *)this + 16);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 11);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 8);
  if (v4)
    CFRelease(v4);
  if (*(_QWORD *)this)
    CFRelease(*(CFTypeRef *)this);
}

void std::vector<int>::__append(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v5;
  unsigned int *value;
  unsigned int *end;
  std::vector<unsigned int>::pointer begin;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  unsigned int *v16;
  unsigned int *v17;
  int v18;

  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v5 = value;
  end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begin = this->__begin_;
    v9 = (char *)end - (char *)this->__begin_;
    v10 = __n + (v9 >> 2);
    if (v10 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 2;
    v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10)
      v10 = v12 >> 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL)
      v13 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begin = this->__begin_;
      end = this->__end_;
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[4 * v11];
    v16 = (unsigned int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    v17 = (unsigned int *)&v15[4 * __n];
    while (end != begin)
    {
      v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<unsigned int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
      operator delete(begin);
  }
}

std::vector<unsigned int>::pointer std::vector<int>::__swap_out_circular_buffer(std::vector<unsigned int> *this, std::__split_buffer<unsigned int> *__v, std::vector<unsigned int>::pointer __p)
{
  unsigned int *begin;
  std::vector<unsigned int>::pointer v6;
  unsigned int *v7;
  std::vector<unsigned int>::pointer v8;
  unsigned int v9;
  unsigned int *end;
  std::__split_buffer<unsigned int>::pointer v11;
  int64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int *value;

  begin = __v->__begin_;
  v6 = this->__begin_;
  v7 = begin;
  if (this->__begin_ != __p)
  {
    v8 = __p;
    v7 = __v->__begin_;
    do
    {
      v9 = *--v8;
      *--v7 = v9;
    }
    while (v8 != v6);
  }
  __v->__begin_ = v7;
  end = this->__end_;
  v11 = __v->__end_;
  v12 = (char *)end - (char *)__p;
  if (end != __p)
  {
    memmove(__v->__end_, __p, (char *)end - (char *)__p);
    v7 = __v->__begin_;
  }
  __v->__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)v11 + v12);
  v13 = this->__begin_;
  this->__begin_ = v7;
  __v->__begin_ = v13;
  v14 = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = v14;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

_QWORD *std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_210585EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(8 * a2);
}

void std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  IR::FFTFilterKernel **v2;
  IR::FFTFilterKernel **v4;
  void *v5;

  v1 = *a1;
  v2 = (IR::FFTFilterKernel **)**a1;
  if (v2)
  {
    v4 = (IR::FFTFilterKernel **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100](--v4, 0);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_210586000(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        std::__list_imp<int>::clear(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::__list_imp<int>::clear(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  if (result[2])
  {
    v1 = result;
    result = (_QWORD *)result[1];
    v2 = *v1;
    v3 = *result;
    *(_QWORD *)(v3 + 8) = *(_QWORD *)(*v1 + 8);
    **(_QWORD **)(v2 + 8) = v3;
    v1[2] = 0;
    if (result != v1)
    {
      do
      {
        v4 = (_QWORD *)result[1];
        operator delete(result);
        result = v4;
      }
      while (v4 != v1);
    }
  }
  return result;
}

IR::IRDataAttributes *IR::IRDataAttributes::IRDataAttributes(IR::IRDataAttributes *this, const IR::IRDataAttributes *a2)
{
  CFTypeRef v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(CFTypeRef *)a2;
  if (*(_QWORD *)a2)
    CFRetain(*(CFTypeRef *)a2);
  *(_QWORD *)this = v4;
  v5 = *(_OWORD *)((char *)a2 + 8);
  v6 = *(_OWORD *)((char *)a2 + 24);
  v7 = *(_OWORD *)((char *)a2 + 40);
  *((_BYTE *)this + 56) = *((_BYTE *)a2 + 56);
  *(_OWORD *)((char *)this + 40) = v7;
  *(_OWORD *)((char *)this + 24) = v6;
  *(_OWORD *)((char *)this + 8) = v5;
  v8 = *((_QWORD *)a2 + 8);
  if (v8)
    CFRetain(*((CFTypeRef *)a2 + 8));
  *((_QWORD *)this + 8) = v8;
  *(_OWORD *)((char *)this + 72) = *(_OWORD *)((char *)a2 + 72);
  v9 = *((_QWORD *)a2 + 11);
  if (v9)
    CFRetain(*((CFTypeRef *)a2 + 11));
  *((_QWORD *)this + 11) = v9;
  v10 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)this + 105) = *(_OWORD *)((char *)a2 + 105);
  *((_OWORD *)this + 6) = v10;
  v11 = *((_QWORD *)a2 + 16);
  if (v11)
    CFRetain(*((CFTypeRef *)a2 + 16));
  *((_QWORD *)this + 16) = v11;
  v12 = *((_QWORD *)a2 + 17);
  *((_DWORD *)this + 36) = *((_DWORD *)a2 + 36);
  *((_QWORD *)this + 17) = v12;
  return this;
}

CFDictionaryRef applesauce::CF::details::make_CFDictionaryRef(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  void *v6;
  void **v7;
  void **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  void **v13;
  void **v14;
  void **v15;
  void *v16;
  void *v17;
  void **v18;
  void **v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  void **v24;
  void **v25;
  void **v26;
  void *v27;
  CFDictionaryRef v28;
  void *exception;
  void **values;
  void **v32;
  void **v33;
  void **keys;
  void **v35;
  void **v36;

  v2 = *(_QWORD *)(a1 + 8);
  keys = 0;
  v35 = 0;
  v36 = 0;
  std::vector<void const*>::reserve((void **)&keys, v2);
  values = 0;
  v32 = 0;
  v33 = 0;
  std::vector<void const*>::reserve((void **)&values, v2);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    v4 = *(void ***)a1;
    v5 = *(_QWORD *)a1 + 16 * v3;
    do
    {
      v6 = *v4;
      v7 = v35;
      if (v35 >= v36)
      {
        v9 = v35 - keys;
        if ((unint64_t)(v9 + 1) >> 61)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v10 = ((char *)v36 - (char *)keys) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)((char *)v36 - (char *)keys) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>((uint64_t)&v36, v11);
        else
          v12 = 0;
        v13 = (void **)&v12[8 * v9];
        *v13 = v6;
        v8 = v13 + 1;
        v15 = keys;
        v14 = v35;
        if (v35 != keys)
        {
          do
          {
            v16 = *--v14;
            *--v13 = v16;
          }
          while (v14 != v15);
          v14 = keys;
        }
        keys = v13;
        v35 = v8;
        v36 = (void **)&v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v35 = v6;
        v8 = v7 + 1;
      }
      v35 = v8;
      v17 = v4[1];
      v18 = v32;
      if (v32 >= v33)
      {
        v20 = v32 - values;
        if ((unint64_t)(v20 + 1) >> 61)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v21 = ((char *)v33 - (char *)values) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if ((unint64_t)((char *)v33 - (char *)values) >= 0x7FFFFFFFFFFFFFF8)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>((uint64_t)&v33, v22);
        else
          v23 = 0;
        v24 = (void **)&v23[8 * v20];
        *v24 = v17;
        v19 = v24 + 1;
        v26 = values;
        v25 = v32;
        if (v32 != values)
        {
          do
          {
            v27 = *--v25;
            *--v24 = v27;
          }
          while (v25 != v26);
          v25 = values;
        }
        values = v24;
        v32 = v19;
        v33 = (void **)&v23[8 * v22];
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v32 = v17;
        v19 = v18 + 1;
      }
      v32 = v19;
      v4 += 2;
    }
    while (v4 != (void **)v5);
  }
  v28 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, v2, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!v28)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  if (values)
  {
    v32 = values;
    operator delete(values);
  }
  if (keys)
  {
    v35 = keys;
    operator delete(keys);
  }
  return v28;
}

void sub_2105865C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  void *v13;

  __cxa_free_exception(v13);
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void std::vector<void const*>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

applesauce::CF::StringRef *applesauce::CF::StringRef::StringRef(applesauce::CF::StringRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_210586728(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void applesauce::CF::TypeRef::~TypeRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

_QWORD *std::vector<float>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 4 * a2);
    a1[1] = &v4[4 * a2];
  }
  return a1;
}

void sub_2105867E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::reset[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (v2)
      CFRelease(v2);
    *(_BYTE *)(a1 + 8) = 0;
  }
}

void std::vector<short>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  __int16 v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 1);
    if (v10 < 0)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 1;
    v12 = v5 - v8;
    if (v12 > v10)
      v10 = v12;
    if (v12 >= 0x7FFFFFFFFFFFFFFELL)
      v13 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[2 * v11];
    v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a2);
}

void std::__destroy_at[abi:ne180100]<IR::IRDataNode,0>(uint64_t a1)
{
  void *v2;
  void **v3;

  v3 = (void **)(a1 + 72);
  std::vector<IR::IRDataNode>::__destroy_vector::operator()[abi:ne180100](&v3);
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](a1 + 32);
  v3 = (void **)(a1 + 8);
  std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](&v3);
}

uint64_t std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDataGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_210586A74(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = 3 * a2;
    v8 = &v6[3 * a2];
    v9 = 8 * v7;
    do
    {
      *v6 = 0;
      v6[1] = 0;
      v6[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v6, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 3;
      v9 -= 24;
    }
    while (v9);
    a1[1] = v8;
  }
  return a1;
}

void sub_210586B3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::vector<float>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  std::vector<unsigned int>::pointer end;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    bzero(end, 4 * __n);
    this->__end_ = &end[__n];
  }
  return this;
}

void sub_210586C04(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_QWORD *std::construct_at[abi:ne180100]<applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef const&,applesauce::CF::DictionaryRef*>(_QWORD *a1, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v3;
  return a1;
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__split_buffer<applesauce::CF::DictionaryRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>((const void **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<short>::vector(_QWORD *a1, uint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<short>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 2 * a2);
    a1[1] = &v4[2 * a2];
  }
  return a1;
}

void sub_210586D8C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<short>::__vallocate[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 < 0)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

void std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::__destroy_at[abi:ne180100]<applesauce::CF::DictionaryRef,0>(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this)
{
  size_t i;
  size_t v2;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v3;

  i = this->__i_;
  v2 = (i + 1) % 0x270;
  v3 = this->__x_[(i + 397) % 0x270] ^ ((this->__x_[v2] & 0x7FFFFFFE | this->__x_[i] & 0x80000000) >> 1) ^ ((int)(this->__x_[v2] << 31) >> 31) & 0x9908B0DF;
  this->__x_[i] = v3;
  this->__i_ = v2;
  LODWORD(i) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)i << 15) & 0xEFC60000 ^ i ^ ((((_DWORD)i << 15) & 0xEFC60000 ^ i) >> 18);
}

__n128 std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  return result;
}

void std::vector<IR::IRDataNode>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  while (v4 != v5)
  {
    v6 -= 96;
    v4 -= 96;
    std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRDataNode>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(96 * a2);
}

uint64_t std::__split_buffer<IR::IRDataNode>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<IR::IRDataNode,0>(i - 96);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<IR::IRDataNode>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<IR::IRDataNode,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::vector<IR::IRDataNode>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v10;
  char v12;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v10 = a2 + v6 - a4;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(v8, v10);
      v10 += 96;
      v8 += 96;
    }
    while (v10 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<IR::IRDataNode *,IR::IRDataNode *,IR::IRDataNode *>((uint64_t)&v12, a2, v7, v6);
}

void std::__split_buffer<IR::IRDataNode>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int64x2_t v23;
  uint64_t v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v10 = 1;
      else
        v10 = 0x5555555555555556 * ((v4 - *a1) >> 5);
      v11 = v10 >> 2;
      v12 = a1[4];
      v28 = a1[4];
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRDataNode>>(v12, v10);
      v14 = &v13[96 * v11];
      v16 = &v13[96 * v15];
      v17 = a1[1];
      v18 = a1[2] - v17;
      if (v18)
      {
        v19 = v18 / 96;
        v20 = &v14[96 * v19];
        v21 = 96 * v19;
        v22 = (uint64_t)v14;
        do
        {
          std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(v22, v17);
          v22 += 96;
          v17 += 96;
          v21 -= 96;
        }
        while (v21);
        v23 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v23 = vdupq_n_s64(v17);
        v20 = v14;
      }
      v25 = *a1;
      *a1 = v13;
      a1[1] = v14;
      v26 = v23;
      v24 = a1[3];
      a1[2] = v20;
      a1[3] = v16;
      v27 = v24;
      std::__split_buffer<IR::IRDataNode>::~__split_buffer((uint64_t)&v25);
      v4 = a1[2];
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<IR::IRDataNode *,IR::IRDataNode *,IR::IRDataNode *>((uint64_t)&v25, v5, v4, v5 - 96 * (v7 >> 1));
      v4 = v9;
      a1[1] += 32 * v8;
      a1[2] = v9;
    }
  }
  std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(v4, a2);
  a1[2] += 96;
}

uint64_t std::vector<IR::IRDataNode>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a3;
  v6 = a2[1];
  v7 = *a1;
  v8 = v6;
  if (*a1 != a3)
  {
    v9 = a3;
    v8 = a2[1];
    do
    {
      v8 -= 96;
      v9 -= 96;
      std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(v8, v9);
    }
    while (v9 != v7);
  }
  a2[1] = v8;
  v10 = a1[1];
  v11 = a2[2];
  if (v10 != v3)
  {
    do
    {
      std::construct_at[abi:ne180100]<IR::IRDataNode,IR::IRDataNode,IR::IRDataNode*>(v11, v3);
      v3 += 96;
      v11 += 96;
    }
    while (v3 != v10);
    v8 = a2[1];
  }
  a2[2] = v11;
  v12 = *a1;
  *a1 = v8;
  a2[1] = v12;
  v13 = a1[1];
  a1[1] = a2[2];
  a2[2] = v13;
  v14 = a1[2];
  a1[2] = a2[3];
  a2[3] = v14;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<IR::IRDataNode *,IR::IRDataNode *,IR::IRDataNode *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      *(_DWORD *)(a4 + v7 - 96) = *(_DWORD *)(a3 + v7 - 96);
      std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vdeallocate((IR::FFTFilterKernel ***)(a4 + v7 - 88));
      *(_OWORD *)(v9 - 88) = *(_OWORD *)(a3 + v7 - 88);
      *(_QWORD *)(v9 - 72) = *(_QWORD *)(a3 + v7 - 72);
      *(_QWORD *)(v8 - 88) = 0;
      *(_QWORD *)(v8 - 80) = 0;
      *(_QWORD *)(v8 - 72) = 0;
      std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](a4 + v7 - 64, (__int128 *)(a3 + v7 - 64));
      std::vector<float>::__move_assign(a4 + v7 - 48, (__n128 *)(a3 + v7 - 48));
      std::vector<IR::IRDataNode>::__vdeallocate((void **)(a4 + v7 - 24));
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      v7 -= 96;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void std::vector<IR::IRDataNode>::__vdeallocate(void **a1)
{
  void *v1;
  uint64_t v3;
  void *v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = (uint64_t)a1[1];
    v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 96;
        std::__destroy_at[abi:ne180100]<IR::IRDataNode,0>(v3);
      }
      while ((void *)v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<IR::IRDataNode *,IR::IRDataNode *,IR::IRDataNode *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vdeallocate((IR::FFTFilterKernel ***)(a4 + 8));
    *(_OWORD *)(a4 + 8) = *(_OWORD *)(v5 + 8);
    *(_QWORD *)(a4 + 24) = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 8) = 0;
    *(_QWORD *)(v5 + 16) = 0;
    *(_QWORD *)(v5 + 24) = 0;
    std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](a4 + 32, (__int128 *)(v5 + 32));
    std::vector<float>::__move_assign(a4 + 48, (__n128 *)(v5 + 48));
    std::vector<IR::IRDataNode>::__vdeallocate((void **)(a4 + 72));
    *(_OWORD *)(a4 + 72) = *(_OWORD *)(v5 + 72);
    *(_QWORD *)(a4 + 88) = *(_QWORD *)(v5 + 88);
    *(_QWORD *)(v5 + 72) = 0;
    *(_QWORD *)(v5 + 80) = 0;
    *(_QWORD *)(v5 + 88) = 0;
    a4 += 96;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::vector<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>,std::reverse_iterator<std::vector<std::unique_ptr<IR::FFTFilterKernel>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vdeallocate(IR::FFTFilterKernel ***a1)
{
  IR::FFTFilterKernel **v1;
  IR::FFTFilterKernel **v3;
  IR::FFTFilterKernel **v4;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
        std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100](--v3, 0);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__n128 std::vector<float>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = (uint64_t)v4 - 24;
      do
      {
        v9 = v6;
        std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v9);
        v7 = *(void **)(v6 - 24);
        if (v7)
        {
          *(_QWORD *)(v6 - 16) = v7;
          operator delete(v7);
        }
        v8 = (void *)(v6 - 32);
        v6 -= 56;
      }
      while (v8 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<IR::IRCoordinateTree>::__base_destruct_at_end[abi:ne180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void *v6;
  void **v7;
  void **v8;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    v5 = v4 - 3;
    do
    {
      v8 = v5;
      std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v8);
      v6 = *(v5 - 3);
      if (v6)
      {
        *(v5 - 2) = v6;
        operator delete(v6);
      }
      v7 = v5 - 4;
      v5 -= 7;
    }
    while (v7 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::allocator_traits<std::allocator<IR::IRCoordinateTree>>::destroy[abi:ne180100]<IR::IRCoordinateTree,void,void>(uint64_t a1, uint64_t a2)
{
  void *v3;
  void **v4;

  v4 = (void **)(a2 + 32);
  std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100](&v4);
  v3 = *(void **)(a2 + 8);
  if (v3)
  {
    *(_QWORD *)(a2 + 16) = v3;
    operator delete(v3);
  }
}

uint64_t std::vector<IR::IRCoordinateTree>::__push_back_slow_path<IR::IRCoordinateTree>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[5];

  v3 = *a1;
  v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x249249249249249)
    v9 = 0x492492492492492;
  else
    v9 = v5;
  v15[4] = a1 + 2;
  v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinateTree>>(v7, v9);
  v11 = &v10[56 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v15[3] = &v10[56 * v12];
  *(_DWORD *)v11 = *(_DWORD *)a2;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = 0;
  *((_QWORD *)v11 + 1) = 0;
  *(_OWORD *)(v11 + 8) = *(_OWORD *)(a2 + 8);
  *((_QWORD *)v11 + 3) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_OWORD *)v11 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v11 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  v15[2] = v11 + 56;
  std::vector<IR::IRCoordinateTree>::__swap_out_circular_buffer(a1, v15);
  v13 = a1[1];
  std::__split_buffer<IR::IRCoordinateTree>::~__split_buffer((uint64_t)v15);
  return v13;
}

void sub_210587B0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<IR::IRCoordinateTree>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<IR::IRCoordinateTree>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<IR::IRCoordinateTree>,std::reverse_iterator<IR::IRCoordinateTree*>,std::reverse_iterator<IR::IRCoordinateTree*>,std::reverse_iterator<IR::IRCoordinateTree*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinateTree>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a2);
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<IR::IRCoordinateTree>,std::reverse_iterator<IR::IRCoordinateTree*>,std::reverse_iterator<IR::IRCoordinateTree*>,std::reverse_iterator<IR::IRCoordinateTree*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      v8 = *(_DWORD *)(a3 - 56);
      a3 -= 56;
      *(_DWORD *)(v7 - 56) = v8;
      *(_QWORD *)(v7 - 40) = 0;
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 48) = 0;
      *(_OWORD *)(v7 - 48) = *(_OWORD *)(a3 + 8);
      *(_QWORD *)(v7 - 32) = *(_QWORD *)(a3 + 24);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)(a3 + 24) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      *(_OWORD *)(v7 - 24) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(v7 - 8) = *(_QWORD *)(a3 + 48);
      *(_QWORD *)(a3 + 32) = 0;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      v7 = *((_QWORD *)&v14 + 1) - 56;
      *((_QWORD *)&v14 + 1) -= 56;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<IR::IRCoordinateTree>,std::reverse_iterator<IR::IRCoordinateTree*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<IR::IRCoordinateTree>,std::reverse_iterator<IR::IRCoordinateTree*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<IR::IRCoordinateTree>,std::reverse_iterator<IR::IRCoordinateTree*>>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<IR::IRCoordinateTree>,std::reverse_iterator<IR::IRCoordinateTree*>>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      std::allocator_traits<std::allocator<IR::IRCoordinateTree>>::destroy[abi:ne180100]<IR::IRCoordinateTree,void,void>(v3, v1);
      v1 += 56;
    }
    while (v1 != v2);
  }
}

uint64_t std::__split_buffer<IR::IRCoordinateTree>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<IR::IRCoordinateTree>::__destruct_at_end[abi:ne180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<IR::IRCoordinateTree>::__destruct_at_end[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  while (1)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 == a2)
      break;
    v5 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = v4 - 56;
    std::allocator_traits<std::allocator<IR::IRCoordinateTree>>::destroy[abi:ne180100]<IR::IRCoordinateTree,void,void>(v5, v4 - 56);
  }
}

char *std::vector<float>::__swap_out_circular_buffer(void **a1, uint64_t a2, char *__src)
{
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  int64_t v12;
  char *v13;
  void *v14;
  void *v15;

  v5 = *(char **)(a2 + 8);
  v6 = (char *)*a1;
  v7 = v5;
  if (*a1 != __src)
  {
    v8 = __src;
    v7 = *(char **)(a2 + 8);
    do
    {
      v9 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v7 - 1) = v9;
      v7 -= 4;
    }
    while (v8 != v6);
  }
  *(_QWORD *)(a2 + 8) = v7;
  v10 = a1[1];
  v11 = *(_QWORD *)(a2 + 16);
  v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    v7 = *(char **)(a2 + 8);
  }
  *(_QWORD *)(a2 + 16) = v11 + v12;
  v13 = (char *)*a1;
  *a1 = v7;
  *(_QWORD *)(a2 + 8) = v13;
  v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v14;
  v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)a2 = *(_QWORD *)(a2 + 8);
  return v5;
}

uint64_t std::vector<IR::IRCoordinateTree>::__move_range(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      *(_DWORD *)v8 = *(_DWORD *)v9;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      *(_OWORD *)(v8 + 8) = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v8 + 24) = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 40) = 0;
      *(_QWORD *)(v8 + 48) = 0;
      *(_OWORD *)(v8 + 32) = *(_OWORD *)(v9 + 32);
      *(_QWORD *)(v8 + 48) = *(_QWORD *)(v9 + 48);
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 48) = 0;
      v8 += 56;
      v9 += 56;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<IR::IRCoordinateTree *,IR::IRCoordinateTree *,IR::IRCoordinateTree *>((uint64_t)&v11, a2, v7, v6);
}

__n128 std::__split_buffer<IR::IRCoordinateTree>::push_back(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = a1[1];
    if (v5 <= *a1)
    {
      if (v4 == *a1)
        v10 = 1;
      else
        v10 = 0xDB6DB6DB6DB6DB6ELL * ((v4 - *a1) >> 3);
      v11 = v10 >> 2;
      v12 = a1[4];
      v20 = a1[4];
      *(_QWORD *)&v18 = std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinateTree>>(v12, v10);
      *((_QWORD *)&v18 + 1) = v18 + 56 * v11;
      *(_QWORD *)&v19 = *((_QWORD *)&v18 + 1);
      *((_QWORD *)&v19 + 1) = v18 + 56 * v13;
      std::__split_buffer<IR::IRCoordinateTree>::__construct_at_end_with_size<std::move_iterator<IR::IRCoordinateTree*>>((uint64_t)&v18, a1[1], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - a1[1]) >> 3));
      v14 = v19;
      v15 = *(_OWORD *)a1;
      v16 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v18;
      *((_OWORD *)a1 + 1) = v14;
      v18 = v15;
      v19 = v16;
      std::__split_buffer<IR::IRCoordinateTree>::~__split_buffer((uint64_t)&v18);
      v4 = a1[2];
    }
    else
    {
      v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - *a1) >> 3);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -56 * (v7 >> 1);
      std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<IR::IRCoordinateTree *,IR::IRCoordinateTree *,IR::IRCoordinateTree *>((uint64_t)&v18, v5, v4, v5 - 56 * (v7 >> 1));
      v4 = v9;
      a1[1] += v8;
      a1[2] = v9;
    }
  }
  *(_DWORD *)v4 = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 16) = 0;
  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  result = *(__n128 *)(a2 + 32);
  *(__n128 *)(v4 + 32) = result;
  *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  a1[2] += 56;
  return result;
}

void sub_21058807C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__split_buffer<IR::IRCoordinateTree>::~__split_buffer((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<IR::IRCoordinateTree>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<IR::IRCoordinateTree>,std::reverse_iterator<IR::IRCoordinateTree*>,std::reverse_iterator<IR::IRCoordinateTree*>,std::reverse_iterator<IR::IRCoordinateTree*>>((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<IR::IRCoordinateTree>,IR::IRCoordinateTree*,IR::IRCoordinateTree*,IR::IRCoordinateTree*>(v7, a3, a1[1], a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<IR::IRCoordinateTree *,IR::IRCoordinateTree *,IR::IRCoordinateTree *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      *(_DWORD *)(a4 + v7 - 56) = *(_DWORD *)(a3 + v7 - 56);
      std::vector<float>::__move_assign(a4 + v7 - 48, (__n128 *)(a3 + v7 - 48));
      std::vector<IR::IRCoordinateTree>::__vdeallocate(a4 + v7 - 24);
      *(_OWORD *)(v9 - 24) = *(_OWORD *)(a3 + v7 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 + v7 - 8);
      *(_QWORD *)(v8 - 24) = 0;
      *(_QWORD *)(v8 - 16) = 0;
      *(_QWORD *)(v8 - 8) = 0;
      v7 -= 56;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

void std::vector<IR::IRCoordinateTree>::__vdeallocate(uint64_t a1)
{
  if (*(_QWORD *)a1)
  {
    std::vector<IR::IRCoordinateTree>::__base_destruct_at_end[abi:ne180100](a1, *(void ***)a1);
    operator delete(*(void **)a1);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
}

uint64_t std::__move_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<IR::IRCoordinateTree *,IR::IRCoordinateTree *,IR::IRCoordinateTree *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = a2;
  if (a2 == a3)
    return a2;
  v6 = a3;
  do
  {
    *(_DWORD *)a4 = *(_DWORD *)v5;
    std::vector<float>::__move_assign(a4 + 8, (__n128 *)(v5 + 8));
    std::vector<IR::IRCoordinateTree>::__vdeallocate(a4 + 32);
    *(_OWORD *)(a4 + 32) = *(_OWORD *)(v5 + 32);
    *(_QWORD *)(a4 + 48) = *(_QWORD *)(v5 + 48);
    *(_QWORD *)(v5 + 32) = 0;
    *(_QWORD *)(v5 + 40) = 0;
    *(_QWORD *)(v5 + 48) = 0;
    a4 += 56;
    v5 += 56;
  }
  while (v5 != v6);
  return v6;
}

uint64_t std::__split_buffer<IR::IRCoordinateTree>::__construct_at_end_with_size<std::move_iterator<IR::IRCoordinateTree*>>(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(result + 16);
  if (a3)
  {
    v4 = v3 + 56 * a3;
    do
    {
      *(_DWORD *)v3 = *(_DWORD *)a2;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v3 + 8) = 0;
      *(_OWORD *)(v3 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(v3 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(v3 + 32) = 0;
      *(_QWORD *)(v3 + 40) = 0;
      *(_QWORD *)(v3 + 48) = 0;
      *(_OWORD *)(v3 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(v3 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v3 += 56;
      a2 += 56;
    }
    while (v3 != v4);
    v3 = v4;
  }
  *(_QWORD *)(result + 16) = v3;
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<IR::IRCoordinateTree>,IR::IRCoordinateTree*,IR::IRCoordinateTree*,IR::IRCoordinateTree*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD v6[3];
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *(_DWORD *)v4 = *(_DWORD *)a2;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)(v4 + 24) = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
      *(_QWORD *)(v4 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(v4 + 32) = 0;
      *(_QWORD *)(v4 + 40) = 0;
      *(_QWORD *)(v4 + 48) = 0;
      *(_OWORD *)(v4 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(v4 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      v4 += 56;
      a2 += 56;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<IR::IRCoordinateTree>,IR::IRCoordinateTree*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<IR::IRCoordinateTree>,IR::IRCoordinateTree*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<IR::IRCoordinateTree>,IR::IRCoordinateTree*>::operator()[abi:ne180100]((uint64_t *)a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<IR::IRCoordinateTree>,IR::IRCoordinateTree*>::operator()[abi:ne180100](uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[1];
  v1 = (uint64_t *)a1[2];
  v3 = *v1;
  v4 = *v2;
  if (*v1 != *v2)
  {
    v5 = *a1;
    do
    {
      v3 -= 56;
      std::allocator_traits<std::allocator<IR::IRCoordinateTree>>::destroy[abi:ne180100]<IR::IRCoordinateTree,void,void>(v5, v3);
    }
    while (v3 != v4);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinates>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x71C71C71C71C71DLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(36 * a2);
}

_QWORD *std::vector<IR::FFTFilterKernel>::vector(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<IR::FFTFilterKernel>::__vallocate[abi:ne180100](a1, a2);
    v4 = a1[1];
    v5 = 5 * a2;
    v6 = v4 + 40 * a2;
    v7 = 8 * v5;
    do
    {
      IR::FFTFilterKernel::FFTFilterKernel(v4);
      v4 += 40;
      v7 -= 40;
    }
    while (v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_210588504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<IR::FFTFilterKernel>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x666666666666667)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::FFTFilterKernel>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

uint64_t applesauce::CF::details::number_convert_as<BOOL>(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  const __CFNumber *v5;
  CFNumberType v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  BOOL v16;
  int v17;
  BOOL v18;
  BOOL v19;
  int v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v5 = a1;
      v6 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_25;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_21;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_29;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value == 0;
      v17 = LOBYTE(valuePtr);
      goto LABEL_15;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v5 = a1;
      v6 = kCFNumberShortType;
LABEL_12:
      Value = CFNumberGetValue(v5, v6, &valuePtr);
      v16 = Value == 0;
      v17 = LOWORD(valuePtr);
      goto LABEL_15;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberIntType;
LABEL_14:
      Value = CFNumberGetValue(v7, v8, &valuePtr);
      v16 = Value == 0;
      v17 = LODWORD(valuePtr);
LABEL_15:
      v18 = v16 || v17 == 0;
      goto LABEL_33;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_25;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_25;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_21:
      Value = CFNumberGetValue(v11, v12, &valuePtr);
      v19 = *(float *)&valuePtr == 0.0;
      goto LABEL_30;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_29;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_25;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_25:
      Value = CFNumberGetValue(v9, v10, &valuePtr);
      if (Value)
        v18 = *(_QWORD *)&valuePtr == 0;
      else
        v18 = 1;
      goto LABEL_33;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_29:
      Value = CFNumberGetValue(v13, v14, &valuePtr);
      v19 = valuePtr == 0.0;
LABEL_30:
      v18 = v19 || Value == 0;
LABEL_33:
      v4 = !v18;
      if (!Value)
        goto LABEL_38;
      v20 = 256;
      break;
    default:
      v4 = 0;
LABEL_38:
      v20 = 0;
      break;
  }
  return v20 | v4;
}

uint64_t std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::BooleanRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

IR::FFTFilterKernel *std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100](IR::FFTFilterKernel **a1, IR::FFTFilterKernel *a2)
{
  IR::FFTFilterKernel *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IR::FFTFilterKernel::~FFTFilterKernel(result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  CFArrayRef CFArray;
  void *__p[3];

  std::vector<void const*>::vector(__p, a1[1] - *a1);
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = __p[0];
    do
    {
      v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_210588894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<void const*>(uint64_t a1)
{
  CFArrayRef result;
  applesauce::CF *exception;

  result = CFArrayCreate(0, *(const void ***)a1, (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3, MEMORY[0x24BDBD690]);
  if (!result)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_2105888FC()
{
  void *v0;

}

void sub_210588914(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<void const*>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_210588980(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t applesauce::CF::at_or<applesauce::CF::DictionaryRef>@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(a1, a2, &cf);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v6;
  }
  else
  {
    *a4 = *a3;
    *a3 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::at_as<applesauce::CF::DictionaryRef>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  char v9;

  if (!a1)
    goto LABEL_7;
  if (CFArrayGetCount(a1) <= a2)
    goto LABEL_7;
  ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  v7 = ValueAtIndex;
  if (!ValueAtIndex)
    goto LABEL_7;
  CFRetain(ValueAtIndex);
  v8 = CFGetTypeID(v7);
  if (v8 != CFDictionaryGetTypeID())
  {
    CFRelease(v7);
LABEL_7:
    v9 = 0;
    *a3 = 0;
    goto LABEL_8;
  }
  *(_QWORD *)a3 = v7;
  v9 = 1;
LABEL_8:
  a3[8] = v9;
}

float applesauce::CF::at_or<float,char const(&)[13]>(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  const __CFNumber *v4;
  uint64_t v5;
  float result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[13]>(a1, a2);
  if (!v4)
    return *(float *)a3;
  v5 = applesauce::CF::convert_as<float,0>(v4);
  result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0)
    return *(float *)a3;
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[13]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_210588B4C(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210588B30);
}

float applesauce::CF::at_or<float,char const(&)[11]>(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  const __CFNumber *v4;
  uint64_t v5;
  float result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[11]>(a1, a2);
  if (!v4)
    return *(float *)a3;
  v5 = applesauce::CF::convert_as<float,0>(v4);
  result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0)
    return *(float *)a3;
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[11]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_210588C14(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210588BF8);
}

uint64_t applesauce::CF::at_or<applesauce::CF::ArrayRef,__CFString const*>@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(a1, a2, &cf);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v6;
  }
  else
  {
    *a4 = *a3;
    *a3 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _BYTE *a3@<X8>)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

const __CFDictionary *applesauce::CF::details::at_key<__CFString const*>(const __CFDictionary *result, const void **a2)
{
  const void *v2;

  if (result)
  {
    v2 = *a2;
    if (v2)
      return (const __CFDictionary *)CFDictionaryGetValue(result, v2);
    else
      return 0;
  }
  return result;
}

uint64_t applesauce::CF::at_or<unsigned int,__CFString const*>(const __CFDictionary *a1, const void **a2, unsigned int *a3)
{
  const __CFDictionary *v4;
  uint64_t result;

  v4 = applesauce::CF::details::at_key<__CFString const*>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

IR::IRData::Implementation *std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100](IR::IRData::Implementation **a1, IR::IRData::Implementation *a2)
{
  IR::IRData::Implementation *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IR::IRData::Implementation::~Implementation(result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

void IR::IRData::Implementation::~Implementation(IR::IRData::Implementation *this)
{
  const void *v2;
  const void *v3;
  const void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void **v12;

  v12 = (void **)((char *)this + 504);
  std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__destroy_vector::operator()[abi:ne180100](&v12);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRData::Implementation *)((char *)this + 336));
  v12 = (void **)((char *)this + 304);
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&v12);
  v2 = (const void *)*((_QWORD *)this + 37);
  if (v2)
    CFRelease(v2);
  v3 = (const void *)*((_QWORD *)this + 36);
  if (v3)
    CFRelease(v3);
  v4 = (const void *)*((_QWORD *)this + 35);
  if (v4)
    CFRelease(v4);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  v5 = (void *)*((_QWORD *)this + 25);
  if (v5)
  {
    *((_QWORD *)this + 26) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 22);
  if (v6)
  {
    *((_QWORD *)this + 23) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 19);
  if (v7)
  {
    *((_QWORD *)this + 20) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 16);
  if (v8)
  {
    *((_QWORD *)this + 17) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 13);
  if (v9)
  {
    *((_QWORD *)this + 14) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 10);
  if (v10)
  {
    *((_QWORD *)this + 11) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 5);
  if (v11)
  {
    *((_QWORD *)this + 6) = v11;
    operator delete(v11);
  }
}

void std::__shared_ptr_emplace<std::vector<IR::IRDataNode>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2CAA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::vector<IR::IRDataNode>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2CAA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

void std::__shared_ptr_emplace<std::vector<IR::IRDataNode>>::__on_zero_shared(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 24);
  std::vector<IR::IRDataNode>::__destroy_vector::operator()[abi:ne180100](&v1);
}

const void *applesauce::CF::details::at_key<char const(&)[21]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_210588F88(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210588F6CLL);
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[13]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  uint64_t result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[13]>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

uint64_t applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*>@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(a1, a2, &cf);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v6;
  }
  else
  {
    *a4 = *a3;
    *a3 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DictionaryRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DictionaryRef,__CFString const*>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _BYTE *a3@<X8>)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDictionaryGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

float applesauce::CF::at_or<float,char const(&)[18]>(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  const __CFNumber *v4;
  uint64_t v5;
  float result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[18]>(a1, a2);
  if (!v4)
    return *(float *)a3;
  v5 = applesauce::CF::convert_as<float,0>(v4);
  result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0)
    return *(float *)a3;
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[18]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_210589170(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210589154);
}

const __CFDictionary *applesauce::CF::details::at_key<__CFString const*&>(const __CFDictionary *result, const void **a2)
{
  const void *v2;

  if (result)
  {
    v2 = *a2;
    if (v2)
      return (const __CFDictionary *)CFDictionaryGetValue(result, v2);
    else
      return 0;
  }
  return result;
}

float applesauce::CF::at_or<float,__CFString const*&>(const __CFDictionary *a1, const void **a2, uint64_t a3)
{
  const __CFDictionary *v4;
  uint64_t v5;
  float result;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (!v4)
    return *(float *)a3;
  v5 = applesauce::CF::convert_as<float,0>(v4);
  result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0)
    return *(float *)a3;
  return result;
}

uint64_t applesauce::CF::at_or<unsigned int,__CFString const*&>(const __CFDictionary *a1, const void **a2, unsigned int *a3)
{
  const __CFDictionary *v4;
  uint64_t result;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,float &>(_QWORD *a1, CFTypeRef *a2, int *a3)
{
  CFTypeRef v5;
  CFNumberRef v6;
  void *exception;
  int valuePtr;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105892DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,unsigned int &>(_QWORD *a1, CFTypeRef *a2, int *a3)
{
  CFTypeRef v5;
  CFNumberRef v6;
  void *exception;
  int valuePtr;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105893B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

const __CFDictionary *applesauce::CF::details::has_key<__CFString const*>(const __CFDictionary *result, const void **a2)
{
  const void *v2;

  if (result)
  {
    v2 = *a2;
    if (v2)
      return (const __CFDictionary *)(CFDictionaryContainsKey(result, v2) != 0);
    else
      return 0;
  }
  return result;
}

uint64_t applesauce::CF::details::find_at_key<unsigned int,char const(&)[22]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *v2;
  applesauce::CF *exception;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[22]>(a1, a2);
  if (!v2)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  return applesauce::CF::convert_to<unsigned int,0>(v2);
}

void sub_210589460()
{
  void *v0;

}

void sub_210589478(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void *applesauce::CF::details::at_key<char const(&)[22]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_2105894EC(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2105894D0);
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[12]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  uint64_t result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[12]>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

const void *applesauce::CF::details::at_key<char const(&)[12]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_2105895B0(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210589594);
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[20]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  uint64_t result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[20]>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

const void *applesauce::CF::details::at_key<char const(&)[20]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_210589674(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210589658);
}

void applesauce::CF::at_or<std::string,char const(&)[18]>(const __CFDictionary *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void *__p[2];
  std::string::size_type v7;
  char v8;

  applesauce::CF::details::find_at_key_or_optional<std::string,char const(&)[18]>(a1, a2, __p);
  if (v8)
  {
    if (SHIBYTE(v7) < 0)
    {
      std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (v8)
      {
        if (SHIBYTE(v7) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      a4->__r_.__value_.__r.__words[2] = v7;
    }
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
  }
}

const void *applesauce::CF::details::find_at_key_or_optional<std::string,char const(&)[18]>@<X0>(const __CFDictionary *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  const void *result;

  result = applesauce::CF::details::at_key<char const(&)[18]>(a1, a2);
  if (result)
    return (const void *)applesauce::CF::convert_as<std::string,0>((CFTypeID)result, (uint64_t)a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

CFTypeID applesauce::CF::convert_as<std::string,0>@<X0>(CFTypeID result@<X0>, uint64_t a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  __int128 v5;
  uint64_t v6;

  if (result
    && (v3 = (const __CFString *)result, TypeID = CFStringGetTypeID(), result = CFGetTypeID(v3), TypeID == result))
  {
    result = (CFTypeID)applesauce::CF::details::CFString_get_value<false>(v3, (uint64_t)&v5);
    *(_OWORD *)a2 = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
  }
  return result;
}

_QWORD *applesauce::CF::details::CFString_get_value<false>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  char *CStringPtr;
  CFIndex Length;
  UInt8 *v7;
  CFIndex maxBufLen;
  CFRange v9;
  CFRange v10;

  CStringPtr = (char *)CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
    return std::string::basic_string[abi:ne180100]<0>((_QWORD *)a2, CStringPtr);
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v9.location = 0;
  v9.length = Length;
  CFStringGetBytes(a1, v9, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  std::string::basic_string[abi:ne180100]((_QWORD *)a2, maxBufLen, 0);
  if (*(char *)(a2 + 23) >= 0)
    v7 = (UInt8 *)a2;
  else
    v7 = *(UInt8 **)a2;
  v10.location = 0;
  v10.length = Length;
  return (_QWORD *)CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, v7, maxBufLen, &maxBufLen);
}

void std::string::__init_copy_ctor_external(std::string *this, const std::string::value_type *__s, std::string::size_type __sz)
{
  std::string *v5;
  std::string::size_type v6;
  std::string::size_type v7;
  std::string *v8;

  v5 = this;
  if (__sz > 0x16)
  {
    if (__sz >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    v6 = (__sz & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__sz | 7) != 0x17)
      v6 = __sz | 7;
    v7 = v6 + 1;
    v8 = (std::string *)operator new(v6 + 1);
    v5->__r_.__value_.__l.__size_ = __sz;
    v5->__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    v5->__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    v5 = v8;
  }
  else
  {
    *((_BYTE *)&this->__r_.__value_.__s + 23) = __sz;
  }
  memmove(v5, __s, __sz + 1);
}

void applesauce::CF::at_or<std::string,char const(&)[12]>(const __CFDictionary *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void *__p[2];
  std::string::size_type v7;
  char v8;

  applesauce::CF::details::find_at_key_or_optional<std::string,char const(&)[12]>(a1, a2, __p);
  if (v8)
  {
    if (SHIBYTE(v7) < 0)
    {
      std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (v8)
      {
        if (SHIBYTE(v7) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      a4->__r_.__value_.__r.__words[2] = v7;
    }
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
  }
}

const void *applesauce::CF::details::find_at_key_or_optional<std::string,char const(&)[12]>@<X0>(const __CFDictionary *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  const void *result;

  result = applesauce::CF::details::at_key<char const(&)[12]>(a1, a2);
  if (result)
    return (const void *)applesauce::CF::convert_as<std::string,0>((CFTypeID)result, (uint64_t)a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

void applesauce::CF::at_or<std::string,char const(&)[5]>(const __CFDictionary *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void *__p[2];
  std::string::size_type v7;
  char v8;

  applesauce::CF::details::find_at_key_or_optional<std::string,char const(&)[5]>(a1, a2, __p);
  if (v8)
  {
    if (SHIBYTE(v7) < 0)
    {
      std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (v8)
      {
        if (SHIBYTE(v7) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      a4->__r_.__value_.__r.__words[2] = v7;
    }
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
  }
}

const void *applesauce::CF::details::find_at_key_or_optional<std::string,char const(&)[5]>@<X0>(const __CFDictionary *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  const void *result;

  result = applesauce::CF::details::at_key<char const(&)[5]>(a1, a2);
  if (result)
    return (const void *)applesauce::CF::convert_as<std::string,0>((CFTypeID)result, (uint64_t)a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

const void *applesauce::CF::details::at_key<char const(&)[5]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_210589B60(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210589B44);
}

float applesauce::CF::at_or<float,char const(&)[12]>(const __CFDictionary *a1, char *a2, uint64_t a3)
{
  const __CFNumber *v4;
  uint64_t v5;
  float result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[12]>(a1, a2);
  if (!v4)
    return *(float *)a3;
  v5 = applesauce::CF::convert_as<float,0>(v4);
  result = *(float *)&v5;
  if ((v5 & 0xFF00000000) == 0)
    return *(float *)a3;
  return result;
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[14]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  uint64_t result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[14]>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

const void *applesauce::CF::details::at_key<char const(&)[14]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_210589C64(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x210589C48);
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,__CFString const*>@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(a1, a2, &cf);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v6;
  }
  else
  {
    *a4 = *a3;
    *a3 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,__CFString const*>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _BYTE *a3@<X8>)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

uint64_t std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

void applesauce::CF::details::find_at_key_or_optional<std::vector<float>,__CFString const*&>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _BYTE *a3@<X8>)
{
  const __CFArray *v4;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (v4)
  {
    applesauce::CF::convert_as<std::vector<float>,0>(v4, a3);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
}

void applesauce::CF::convert_as<std::vector<float>,0>(const __CFArray *a1@<X0>, _BYTE *a2@<X8>)
{
  CFTypeID TypeID;

  if (a1 && (TypeID = CFArrayGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    applesauce::CF::details::CFArray_get_value_as<std::vector<float>>(a1, (uint64_t)a2);
  }
  else
  {
    *a2 = 0;
    a2[24] = 0;
  }
}

void applesauce::CF::details::CFArray_get_value_as<std::vector<float>>(const __CFArray *a1@<X0>, uint64_t a2@<X8>)
{
  int Count;
  CFIndex v5;
  uint64_t v6;
  const __CFNumber *ValueAtIndex;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  void *__p;
  char *v22;
  char *v23;

  Count = CFArrayGetCount(a1);
  __p = 0;
  v22 = 0;
  v23 = 0;
  std::vector<float>::reserve(&__p, Count);
  if (Count <= 0)
  {
    v11 = v22;
LABEL_23:
    v20 = v23;
    *(_QWORD *)a2 = __p;
    *(_QWORD *)(a2 + 8) = v11;
    *(_QWORD *)(a2 + 16) = v20;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    v5 = 0;
    v6 = Count;
    while (1)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, v5);
      v8 = applesauce::CF::convert_as<float,0>(ValueAtIndex);
      if ((v8 & 0xFF00000000) == 0)
        break;
      v9 = v8;
      v10 = v22;
      if (v22 >= v23)
      {
        v12 = (char *)__p;
        v13 = (v22 - (_BYTE *)__p) >> 2;
        v14 = v13 + 1;
        if ((unint64_t)(v13 + 1) >> 62)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v15 = v23 - (_BYTE *)__p;
        if ((v23 - (_BYTE *)__p) >> 1 > v14)
          v14 = v15 >> 1;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
          v16 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
        {
          v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v23, v16);
          v12 = (char *)__p;
          v10 = v22;
        }
        else
        {
          v17 = 0;
        }
        v18 = &v17[4 * v13];
        *(_DWORD *)v18 = v9;
        v11 = v18 + 4;
        while (v10 != v12)
        {
          v19 = *((_DWORD *)v10 - 1);
          v10 -= 4;
          *((_DWORD *)v18 - 1) = v19;
          v18 -= 4;
        }
        __p = v18;
        v22 = v11;
        v23 = &v17[4 * v16];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *(_DWORD *)v22 = v8;
        v11 = v10 + 4;
      }
      v22 = v11;
      if (++v5 == v6)
        goto LABEL_23;
    }
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (__p)
    {
      v22 = (char *)__p;
      operator delete(__p);
    }
  }
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*&>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _BYTE *a3@<X8>)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFArrayGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

IR::DelayLine *std::unique_ptr<IR::DelayLine>::reset[abi:ne180100](IR::DelayLine **a1, IR::DelayLine *a2)
{
  IR::DelayLine *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IR::DelayLine::~DelayLine(result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

unint64_t applesauce::CF::convert_as<IR::IRDataType,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  unsigned int v4;
  int v5;
  unint64_t v6;
  int valuePtr;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    valuePtr = 0;
    Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
    v4 = valuePtr & 0xFFFFFF00;
    v5 = valuePtr;
    if (!Value)
    {
      v4 = 0;
      v5 = 0;
    }
    v6 = (unint64_t)(Value != 0) << 32;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v4 = 0;
  }
  return v6 | v4 | v5;
}

uint64_t applesauce::CF::at_or<unsigned int,char const(&)[22]>(const __CFDictionary *a1, char *a2, unsigned int *a3)
{
  const __CFNumber *v4;
  uint64_t result;

  v4 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[22]>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<unsigned int,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::DataRef>(_QWORD *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5;
  const void *v6;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  a1[1] = v6;
  return a1;
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::DictionaryRef>(_QWORD *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5;
  const void *v6;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  a1[1] = v6;
  return a1;
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef>(_QWORD *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5;
  const void *v6;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  a1[1] = v6;
  return a1;
}

_QWORD *applesauce::CF::TypeRefPair::TypeRefPair<applesauce::CF::StringRef,applesauce::CF::StringRef&>(_QWORD *a1, CFTypeRef *a2, const void **a3)
{
  CFTypeRef v5;
  const void *v6;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  v6 = *a3;
  if (v6)
    CFRetain(v6);
  a1[1] = v6;
  return a1;
}

uint64_t applesauce::CF::at_or<applesauce::CF::StringRef,char const* const&>@<X0>(const __CFDictionary *a1@<X0>, char **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,char const* const&>(a1, a2, &cf);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v6;
  }
  else
  {
    *a4 = *a3;
    *a3 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::StringRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::StringRef,char const* const&>(const __CFDictionary *a1@<X0>, char **a2@<X1>, _BYTE *a3@<X8>)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<char const* const&>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFStringGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const* const&,applesauce::CF::StringRef>(applesauce::CF::TypeRef *a1, char **a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, *a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRef::TypeRef(applesauce::CF::TypeRef *this, char *a2)
{
  void **v3;
  CFIndex v4;
  CFStringRef v5;
  void *exception;
  void *__p[2];
  unsigned __int8 v9;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v9 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v9 & 0x80u) == 0)
    v4 = v9;
  else
    v4 = (CFIndex)__p[1];
  v5 = CFStringCreateWithBytes(0, (const UInt8 *)v3, v4, 0x8000100u, 0);
  *(_QWORD *)this = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  if ((char)v9 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_21058A548(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void applesauce::CF::at_or<std::string,char const* const&>(const __CFDictionary *a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  void *__p[2];
  std::string::size_type v7;
  char v8;

  applesauce::CF::details::find_at_key_or_optional<std::string,char const* const&>(a1, a2, __p);
  if (v8)
  {
    if (SHIBYTE(v7) < 0)
    {
      std::string::__init_copy_ctor_external(a4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (v8)
      {
        if (SHIBYTE(v7) < 0)
          operator delete(__p[0]);
      }
    }
    else
    {
      *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      a4->__r_.__value_.__r.__words[2] = v7;
    }
  }
  else
  {
    *(_OWORD *)&a4->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    a4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a3 + 16);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
  }
}

const void *applesauce::CF::details::find_at_key_or_optional<std::string,char const* const&>@<X0>(const __CFDictionary *a1@<X0>, char **a2@<X1>, _BYTE *a3@<X8>)
{
  const void *result;

  result = applesauce::CF::details::at_key<char const* const&>(a1, a2);
  if (result)
    return (const void *)applesauce::CF::convert_as<std::string,0>((CFTypeID)result, (uint64_t)a3);
  *a3 = 0;
  a3[24] = 0;
  return result;
}

void std::vector<std::vector<std::vector<float>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::vector<float>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

void std::vector<std::vector<std::vector<float>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(&v15);
  }
}

void sub_21058A844(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>,std::reverse_iterator<std::vector<std::vector<float>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::vector<float>>>,std::reverse_iterator<std::vector<std::vector<float>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::vector<float>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

void std::__function::__func<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1},std::allocator<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1}>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1},std::allocator<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1}>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24CA2C920;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1},std::allocator<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1}>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24CA2C920;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1},std::allocator<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1}>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1}::operator()(a1 + 8, a2, *a3);
}

void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#1}::operator()(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const void *v16;
  uint64_t v17;
  _QWORD v18[3];
  void **v19;

  v3 = *(_QWORD *)(a1 + 24);
  *(_DWORD *)(**(_QWORD **)a1 + 4 * a3) = *(_DWORD *)a2;
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8))
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = a2 + 48;
    v8 = v6[1];
    if (v8 >= v6[2])
    {
      v9 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v6, v7);
    }
    else
    {
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v6, v7);
      v9 = v8 + 24;
    }
    v6[1] = v9;
    v10 = *(uint64_t **)(a1 + 16);
    v11 = *(_QWORD **)a1;
    v12 = v10[1];
    if (v12 >= v10[2])
    {
      v13 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v10, (uint64_t)v11);
    }
    else
    {
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v10, (uint64_t)v11);
      v13 = v12 + 24;
    }
    v10[1] = v13;
    std::vector<std::vector<float>>::vector(v18, *(unsigned int *)(v3 + 32));
    if (*(_DWORD *)(v3 + 32))
    {
      v14 = 0;
      v15 = 0;
      do
      {
        v16 = **(const void ***)(*(_QWORD *)(a2 + 8) + 8 * v15);
        std::vector<float>::resize(v18[0] + v14, *(unsigned int *)(v3 + 8));
        v17 = *(unsigned int *)(v3 + 8);
        if ((_DWORD)v17)
          memmove(*(void **)(v18[0] + v14), v16, 4 * v17);
        ++v15;
        v14 += 24;
      }
      while (v15 < *(unsigned int *)(v3 + 32));
    }
    std::vector<std::vector<std::vector<float>>>::push_back[abi:ne180100](*(uint64_t **)(a1 + 32), (uint64_t)v18);
    v19 = (void **)v18;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v19);
  }
}

void sub_21058AC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

void **std::vector<std::vector<std::vector<float>>>::push_back[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  void **result;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void *v16[5];

  v6 = a1[2];
  result = (void **)(a1 + 2);
  v5 = v6;
  v7 = *(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x555555555555555)
      v12 = 0xAAAAAAAAAAAAAAALL;
    else
      v12 = v10;
    v16[4] = result;
    v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)result, v12);
    v14 = &v13[24 * v9];
    v16[0] = v13;
    v16[1] = v14;
    v16[3] = &v13[24 * v15];
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = 0;
    *(_QWORD *)v14 = 0;
    *(_OWORD *)v14 = *(_OWORD *)a2;
    *((_QWORD *)v14 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v16[2] = v14 + 24;
    std::vector<std::vector<std::vector<float>>>::__swap_out_circular_buffer(a1, v16);
    v8 = (_QWORD *)a1[1];
    result = std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer(v16);
  }
  else
  {
    *v7 = 0;
    v7[1] = 0;
    v7[2] = 0;
    *(_OWORD *)v7 = *(_OWORD *)a2;
    v7[2] = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    v8 = v7 + 3;
    a1[1] = (uint64_t)(v7 + 3);
  }
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_21058AD80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::vector<float>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_21058ADDC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, v14);
  v12 = a1[1];
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)v14);
  return v12;
}

void sub_21058AEE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<float>>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_21058AF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__function::__func<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2},std::allocator<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2}>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2},std::allocator<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2}>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_24CA2C8D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 std::__function::__func<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2},std::allocator<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2}>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_24CA2C8D8;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

__n128 *std::__function::__func<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2},std::allocator<void IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2}>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2}::operator()((__n128 *)(a1 + 8), a2, *a3);
}

__n128 *IR::IRData::Implementation::vectorizeIRData<std::vector<float>>(std::vector<std::vector<float>> &,std::vector<std::vector<float>> &,std::vector<std::vector<std::vector<float>>> &)::{lambda(IR::IRDataNode &,unsigned int)#2}::operator()(__n128 *result, uint64_t a2, unsigned int a3)
{
  __n128 *v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const void *v18;
  uint64_t v19;
  _QWORD v20[3];
  void **v21;

  v4 = result;
  v5 = (unsigned int *)result->n128_u64[0];
  v6 = *(_QWORD *)(result->n128_u64[0] + 104);
  if (a3 < (unint64_t)((*(_QWORD *)(result->n128_u64[0] + 112) - v6) >> 2))
    *(_DWORD *)(*(_QWORD *)result->n128_u64[1] + 4 * *(int *)(v6 + 4 * a3)) = *(_DWORD *)a2;
  v7 = *(_QWORD **)(a2 + 32);
  if (v7)
  {
    v8 = v7[5];
    if (v7[6] != v8)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = (uint64_t *)v4->n128_u64[1];
        v12 = *v11;
        *(_DWORD *)(*v11 + 4 * v5[124]) = *(_DWORD *)(v7[8] + 4 * v9);
        *(_DWORD *)(v12 + 4 * v5[123]) = *(_DWORD *)(v8 + 4 * v9);
        v13 = (uint64_t *)v4[1].n128_u64[0];
        v14 = v13[1];
        if (v14 >= v13[2])
        {
          v15 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v13, (uint64_t)v11);
        }
        else
        {
          std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v13, (uint64_t)v11);
          v15 = v14 + 24;
        }
        v13[1] = v15;
        std::vector<std::vector<float>>::vector(v20, v5[8]);
        if (v5[8])
        {
          v16 = 0;
          v17 = 0;
          do
          {
            v18 = **(const void ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 88) + 24 * v9) + 8 * v17);
            std::vector<float>::resize(v20[0] + v16, v5[2]);
            v19 = v5[2];
            if ((_DWORD)v19)
              memmove(*(void **)(v20[0] + v16), v18, 4 * v19);
            ++v17;
            v16 += 24;
          }
          while (v17 < v5[8]);
        }
        std::vector<std::vector<std::vector<float>>>::push_back[abi:ne180100]((uint64_t *)v4[1].n128_u64[1], (uint64_t)v20);
        v21 = (void **)v20;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v21);
        v7 = *(_QWORD **)(a2 + 32);
        v8 = v7[5];
        v9 = ++v10;
      }
      while (v10 < (unint64_t)((v7[6] - v8) >> 2));
    }
    return std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>((uint64_t *)v4[2].n128_u64[0], *(__n128 **)(v4[2].n128_u64[0] + 8), v7[14], v7[15], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[15] - v7[14]) >> 3));
  }
  return result;
}

void sub_21058B1E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

__n128 *std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(uint64_t *a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __n128 *v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;

  v5 = a2;
  if (a5 >= 1)
  {
    v11 = a1[2];
    v9 = (uint64_t)(a1 + 2);
    v10 = v11;
    v12 = *(_QWORD *)(v9 - 8);
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v12) >> 3)) >= a5)
    {
      v20 = v12 - (_QWORD)a2;
      if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)a2) >> 3)) >= a5)
      {
        v21 = a3 + 24 * a5;
      }
      else
      {
        v21 = a3 + 8 * ((uint64_t)(v12 - (_QWORD)a2) >> 3);
        a1[1] = (uint64_t)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v9, v21, a4, *(_QWORD **)(v9 - 8));
        if (v20 < 1)
          return v5;
      }
      std::vector<std::vector<float>>::__move_range((uint64_t)a1, v5, v12, (uint64_t)v5 + 24 * a5);
      std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v23, a3, v21, (char *)v5);
    }
    else
    {
      v13 = *a1;
      v14 = a5 - 0x5555555555555555 * ((uint64_t)(v12 - *a1) >> 3);
      if (v14 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v15 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)a2 - v13) >> 3);
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v10 - v13) >> 3);
      v17 = 2 * v16;
      if (2 * v16 <= v14)
        v17 = v14;
      if (v16 >= 0x555555555555555)
        v18 = 0xAAAAAAAAAAAAAAALL;
      else
        v18 = v17;
      v27 = v9;
      if (v18)
        v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v9, v18);
      else
        v19 = 0;
      v23 = v19;
      v24 = &v19[24 * v15];
      v25 = v24;
      v26 = &v19[24 * v18];
      std::__split_buffer<std::vector<float>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<float>*>>(&v23, a3, a5);
      v5 = (__n128 *)std::vector<std::vector<float>>::__swap_out_circular_buffer(a1, &v23, v5);
      std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v23);
    }
  }
  return v5;
}

void sub_21058B3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

__n128 *std::vector<std::vector<float>>::__move_range(uint64_t a1, __n128 *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  __n128 *v7;
  __n128 *v8;
  __n128 *v9;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = (__n128 *)((char *)a2 + v6 - a4);
  v8 = (__n128 *)v6;
  if ((unint64_t)v7 < a3)
  {
    v9 = v7;
    v8 = *(__n128 **)(a1 + 8);
    do
    {
      v8->n128_u64[0] = 0;
      v8->n128_u64[1] = 0;
      v8[1].n128_u64[0] = 0;
      *v8 = *v9;
      v8[1].n128_u64[0] = v9[1].n128_u64[0];
      v9->n128_u64[0] = 0;
      v9->n128_u64[1] = 0;
      v9[1].n128_u64[0] = 0;
      v8 = (__n128 *)((char *)v8 + 24);
      v9 = (__n128 *)((char *)v9 + 24);
    }
    while ((unint64_t)v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<float> *,std::vector<float> *,std::vector<float> *,0>(a2, v7, v6);
}

_QWORD *std::__split_buffer<std::vector<float>>::__construct_at_end_with_size<std::__wrap_iter<std::vector<float>*>>(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a3)
  {
    v6 = &v4[3 * a3];
    v7 = 24 * a3;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
      v4 += 3;
      a2 += 24;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_21058B4A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<float>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = (uint64_t)(a1 + 2);
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>,std::reverse_iterator<std::vector<float>*>>((uint64_t)(a1 + 2), (uint64_t)a3, a3, *a1, (_QWORD *)*a1, v6, v6);
  a2[1] = v8;
  a2[2] = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v7, (uint64_t)a3, a1[1], (_QWORD *)a2[2]);
  v9 = *a1;
  *a1 = a2[1];
  a2[1] = v9;
  v10 = a1[1];
  a1[1] = a2[2];
  a2[2] = v10;
  v11 = a1[2];
  a1[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  _QWORD *v10;
  _QWORD *v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 2);
      v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  v9 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v8);
  return v4;
}

void sub_21058B5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 24);
      v3 -= 24;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 16) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

__n128 *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_backward_loop<std::_ClassicAlgPolicy>,std::__move_backward_trivial>,std::vector<float> *,std::vector<float> *,std::vector<float> *,0>(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v6;

  if (a2 != a1)
  {
    v6 = a2;
    do
    {
      v6 = (__n128 *)((char *)v6 - 24);
      a3 -= 24;
      std::vector<float>::__move_assign(a3, v6);
    }
    while (v6 != a1);
  }
  return a2;
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>(int a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v5;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      if ((char *)v5 != a4)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a4, *(char **)v5, *(_QWORD *)(v5 + 8), (uint64_t)(*(_QWORD *)(v5 + 8) - *(_QWORD *)v5) >> 2);
      v5 += 24;
      a4 += 24;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_QWORD *std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD v6[3];
  char v7;
  _QWORD *v8;
  _QWORD *v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v6[0] = a1;
  v6[1] = &v8;
  v6[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      *(_OWORD *)v4 = *(_OWORD *)a2;
      v4[2] = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      v4 += 3;
      a2 += 24;
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::vector<float>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v6);
  return v4;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],std::vector<std::vector<std::vector<float>>> &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t **a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  *((_QWORD *)a1 + 1) = applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<float>>>(a3);
  return a1;
}

void sub_21058B818(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<std::vector<float>>>(uint64_t **a1)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  CFArrayRef *v5;
  uint64_t v6;
  CFArrayRef v7;
  void **v9[3];
  uint64_t *v10;
  CFArrayRef *v11;
  unint64_t v12;
  void ***v13;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v10 = 0;
  v11 = 0;
  v12 = 0;
  std::vector<applesauce::CF::ArrayRef>::reserve((char **)&v10, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    do
    {
      memset(v9, 0, sizeof(v9));
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v9, *v3, v3[1], 0xAAAAAAAAAAAAAAABLL * ((v3[1] - *v3) >> 3));
      v5 = v11;
      if ((unint64_t)v11 >= v12)
      {
        v6 = std::vector<applesauce::CF::ArrayRef>::__emplace_back_slow_path<std::vector<std::vector<float>>>((uint64_t *)&v10, (uint64_t *)v9);
      }
      else
      {
        *v5 = applesauce::CF::details::make_CFArrayRef<std::vector<float>>((uint64_t *)v9);
        v6 = (uint64_t)(v5 + 1);
      }
      v11 = (CFArrayRef *)v6;
      v13 = v9;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
      v3 += 3;
    }
    while (v3 != v4);
  }
  v7 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>(&v10);
  v9[0] = (void **)&v10;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](v9);
  return v7;
}

void sub_21058B928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, char a13)
{
  a10 = (void **)&a13;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::ArrayRef>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
        *(_QWORD *)v8 = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  CFArrayRef CFArray;
  void *__p[3];

  std::vector<void const*>::vector(__p, a1[1] - *a1);
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = __p[0];
    do
    {
      v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_21058BAA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::ArrayRef,0>(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::ArrayRef,0>((const void **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>((uint64_t)(v6 + 2), a2, a3, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21058BB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::ArrayRef>::__emplace_back_slow_path<std::vector<std::vector<float>>>(uint64_t *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[8 * v9];
  *(_QWORD *)v20.i64[0] = applesauce::CF::details::make_CFArrayRef<std::vector<float>>(a2);
  v11 = v20.i64[0];
  v12 = v20.i64[1] + 8;
  v20.i64[1] += 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_21058BCB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<std::vector<float>>(uint64_t *a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  CFArrayRef *v5;
  uint64_t v6;
  CFArrayRef v7;
  void *__p;
  void *v10;
  uint64_t v11;
  uint64_t *v12;
  CFArrayRef *v13;
  unint64_t v14;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  std::vector<applesauce::CF::ArrayRef>::reserve((char **)&v12, v2);
  v3 = *a1;
  v4 = a1[1];
  while (v3 != v4)
  {
    __p = 0;
    v10 = 0;
    v11 = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)v3, *(_QWORD *)(v3 + 8), (uint64_t)(*(_QWORD *)(v3 + 8) - *(_QWORD *)v3) >> 2);
    v5 = v13;
    if ((unint64_t)v13 >= v14)
    {
      v6 = std::vector<applesauce::CF::ArrayRef>::__emplace_back_slow_path<std::vector<float>>((uint64_t *)&v12, &__p);
    }
    else
    {
      *v5 = applesauce::CF::details::make_CFArrayRef<float>(&__p);
      v6 = (uint64_t)(v5 + 1);
    }
    v13 = (CFArrayRef *)v6;
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
    v3 += 24;
  }
  v7 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::ArrayRef>(&v12);
  __p = &v12;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  return v7;
}

void sub_21058BDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, uint64_t a11, char a12, uint64_t a13)
{
  __p = &a12;
  std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::ArrayRef>::__emplace_back_slow_path<std::vector<float>>(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v20.i64[1] = v20.i64[0];
  v21 = &v10[8 * v9];
  *(_QWORD *)v20.i64[0] = applesauce::CF::details::make_CFArrayRef<float>(a2);
  v11 = v20.i64[0];
  v12 = v20.i64[1] + 8;
  v20.i64[1] += 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_21058BF04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::ArrayRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<float>(_QWORD *a1)
{
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  uint64_t *v8;
  CFNumberRef *v9;
  unint64_t v10;
  void **v11;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v8, v2);
  v3 = (_DWORD *)*a1;
  v4 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v4)
  {
    v5 = v9;
    do
    {
      LODWORD(v11) = *v3;
      if ((unint64_t)v5 >= v10)
        v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float>((uint64_t *)&v8, (int *)&v11);
      else
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>(v5++, (int *)&v11);
      v9 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v8);
  v11 = (void **)&v8;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v6;
}

void sub_21058BFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
        *(_QWORD *)v8 = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  CFArrayRef CFArray;
  void *__p[3];

  std::vector<void const*>::vector(__p, a1[1] - *a1);
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = __p[0];
    do
    {
      v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_21058C134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::NumberRef,0>(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::NumberRef,0>((const void **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<float>(uint64_t *a1, int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_21058C2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,float,applesauce::CF::NumberRef*>(CFNumberRef *a1, int *a2)
{
  CFNumberRef v3;
  void *exception;
  int valuePtr;

  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058C360(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::__destroy_at[abi:ne180100]<applesauce::CF::NumberRef,0>(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<applesauce::CF::ArrayRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::__destroy_at[abi:ne180100]<applesauce::CF::ArrayRef,0>(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],std::vector<std::vector<float>> &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  *((_QWORD *)a1 + 1) = applesauce::CF::details::make_CFArrayRef<std::vector<float>>(a3);
  return a1;
}

void sub_21058C4A0(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[7],std::vector<std::vector<float>> &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  *((_QWORD *)a1 + 1) = applesauce::CF::details::make_CFArrayRef<std::vector<float>>(a3);
  return a1;
}

void sub_21058C4E8(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058C588(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],applesauce::CF::StringRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::DictionaryRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[21],std::vector<unsigned int> &>(applesauce::CF::TypeRef *a1, char *a2, _QWORD *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  *((_QWORD *)a1 + 1) = applesauce::CF::details::make_CFArrayRef<unsigned int>(a3);
  return a1;
}

void sub_21058C678(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<unsigned int>(_QWORD *a1)
{
  unint64_t v2;
  _DWORD *v3;
  _DWORD *v4;
  CFNumberRef *v5;
  CFArrayRef v6;
  uint64_t *v8;
  CFNumberRef *v9;
  unint64_t v10;
  void **v11;

  v2 = (uint64_t)(a1[1] - *a1) >> 2;
  v8 = 0;
  v9 = 0;
  v10 = 0;
  std::vector<applesauce::CF::NumberRef>::reserve((char **)&v8, v2);
  v3 = (_DWORD *)*a1;
  v4 = (_DWORD *)a1[1];
  if ((_DWORD *)*a1 != v4)
  {
    v5 = v9;
    do
    {
      LODWORD(v11) = *v3;
      if ((unint64_t)v5 >= v10)
        v5 = (CFNumberRef *)std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<unsigned int>((uint64_t *)&v8, (int *)&v11);
      else
        std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned int,applesauce::CF::NumberRef*>(v5++, (int *)&v11);
      v9 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v6 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::NumberRef>(&v8);
  v11 = (void **)&v8;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&v11);
  return v6;
}

void sub_21058C74C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  std::vector<applesauce::CF::NumberRef>::__destroy_vector::operator()[abi:ne180100](&a12);
  _Unwind_Resume(a1);
}

uint64_t std::vector<applesauce::CF::NumberRef>::__emplace_back_slow_path<unsigned int>(uint64_t *a1, int *a2)
{
  _QWORD *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int64x2_t v16;
  char *v17;
  char *v19;
  int64x2_t v20;
  char *v21;
  _QWORD *v22;

  v3 = (_QWORD *)*a1;
  v4 = (a1[1] - *a1) >> 3;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 61)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = a1[2] - (_QWORD)v3;
  if (v8 >> 2 > v5)
    v5 = v8 >> 2;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
    v9 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v9 = v5;
  v22 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(v7, v9);
  else
    v10 = 0;
  v19 = v10;
  v20.i64[0] = (uint64_t)&v10[8 * v4];
  v21 = &v10[8 * v9];
  std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned int,applesauce::CF::NumberRef*>((CFNumberRef *)v20.i64[0], a2);
  v11 = v20.i64[0];
  v12 = v20.i64[0] + 8;
  v20.i64[1] = v20.i64[0] + 8;
  v14 = (_QWORD *)*a1;
  v13 = (_QWORD *)a1[1];
  if (v13 == (_QWORD *)*a1)
  {
    v16 = vdupq_n_s64((unint64_t)v13);
  }
  else
  {
    do
    {
      v15 = *--v13;
      *(_QWORD *)(v11 - 8) = v15;
      v11 -= 8;
      *v13 = 0;
    }
    while (v13 != v14);
    v16 = *(int64x2_t *)a1;
    v12 = v20.i64[1];
  }
  *a1 = v11;
  a1[1] = v12;
  v20 = v16;
  v17 = (char *)a1[2];
  a1[2] = (uint64_t)v21;
  v21 = v17;
  v19 = (char *)v16.i64[0];
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)&v19);
  return v12;
}

void sub_21058C884(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<applesauce::CF::NumberRef>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

CFNumberRef *std::construct_at[abi:ne180100]<applesauce::CF::NumberRef,unsigned int,applesauce::CF::NumberRef*>(CFNumberRef *a1, int *a2)
{
  CFNumberRef v3;
  void *exception;
  int valuePtr;

  valuePtr = *a2;
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v3;
  if (!v3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058C91C(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],std::vector<unsigned int> &>(applesauce::CF::TypeRef *a1, char *a2, _QWORD *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  *((_QWORD *)a1 + 1) = applesauce::CF::details::make_CFArrayRef<unsigned int>(a3);
  return a1;
}

void sub_21058C97C(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[19],std::vector<float> &>(applesauce::CF::TypeRef *a1, char *a2, _QWORD *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  *((_QWORD *)a1 + 1) = applesauce::CF::details::make_CFArrayRef<float>(a3);
  return a1;
}

void sub_21058C9C4(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[29],std::vector<float> const&>(applesauce::CF::TypeRef *a1, char *a2, _QWORD *a3)
{
  applesauce::CF::TypeRef::TypeRef(a1, a2);
  *((_QWORD *)a1 + 1) = applesauce::CF::details::make_CFArrayRef<float>(a3);
  return a1;
}

void sub_21058CA0C(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::DictionaryRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

void std::__function::__func<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_0,std::allocator<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_0,std::allocator<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x40uLL);
  *(_QWORD *)v2 = &off_24CA2CC68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  result = *(__n128 *)(a1 + 40);
  *(__n128 *)(v2 + 40) = result;
  *((_QWORD *)v2 + 7) = *(_QWORD *)(a1 + 56);
  return result;
}

__n128 std::__function::__func<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_0,std::allocator<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24CA2CC68;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_0,std::allocator<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;

  *(_DWORD *)(**(_QWORD **)(result + 8) + 4 * *a3) = *(_DWORD *)a2;
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8))
  {
    v4 = result;
    v5 = **(unsigned int **)(result + 16);
    if ((_DWORD)v5)
    {
      for (i = 0; i < v5; ++i)
      {
        v7 = **(unsigned int **)(v4 + 24);
        if ((_DWORD)v7)
        {
          memmove((void *)(**(_QWORD **)(v4 + 32) + 4 * (v7 * i)), **(const void ***)(*(_QWORD *)(a2 + 8) + 8 * i), 4 * v7);
          v5 = **(unsigned int **)(v4 + 16);
        }
      }
    }
    v8 = *(_QWORD *)(v4 + 32);
    v9 = *(uint64_t **)(v4 + 40);
    v10 = v9[1];
    if (v10 >= v9[2])
    {
      v11 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v9, v8);
    }
    else
    {
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v9, v8);
      v11 = v10 + 24;
    }
    v9[1] = v11;
    v12 = *(uint64_t **)(v4 + 48);
    v13 = a2 + 48;
    v14 = v12[1];
    if (v14 >= v12[2])
    {
      v15 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v12, v13);
    }
    else
    {
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v12, v13);
      v15 = v14 + 24;
    }
    v12[1] = v15;
    v16 = *(uint64_t **)(v4 + 56);
    v17 = *(_QWORD *)(v4 + 8);
    v18 = v16[1];
    if (v18 >= v16[2])
    {
      result = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v16, v17);
    }
    else
    {
      std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v16, v17);
      result = v18 + 24;
    }
    v16[1] = result;
  }
  return result;
}

void std::__function::__func<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_1,std::allocator<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_1,std::allocator<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_24CA2CCB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 std::__function::__func<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_1,std::allocator<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_24CA2CCB0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_1,std::allocator<IR::IRData::Implementation::createSerializedIRData(IR::IRData const&,BOOL,IR::IRCoeffFormat)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t i;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t j;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *__p;
  _BYTE *v51;
  uint64_t v52;

  v5 = *a3;
  v6 = *(_QWORD *)(**(_QWORD **)(a1 + 8) + 104);
  if (v5 < (*(_QWORD *)(**(_QWORD **)(a1 + 8) + 112) - v6) >> 2)
    *(_DWORD *)(**(_QWORD **)(a1 + 16) + 4 * *(int *)(v6 + 4 * v5)) = *(_DWORD *)a2;
  v7 = *(_QWORD **)(a2 + 32);
  if (v7)
  {
    v8 = v7[5];
    if (v7[6] != v8)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        v11 = *(_DWORD *)(v7[8] + 4 * v9);
        v12 = *(uint64_t **)(a1 + 16);
        v13 = **(_QWORD **)(a1 + 8);
        v14 = *v12;
        *(_DWORD *)(*v12 + 4 * *(unsigned int *)(v13 + 496)) = v11;
        *(_DWORD *)(v14 + 4 * *(unsigned int *)(v13 + 492)) = *(_DWORD *)(v8 + 4 * v9);
        v15 = *(uint64_t **)(a1 + 24);
        v16 = v15[1];
        if (v16 >= v15[2])
        {
          v17 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v15, (uint64_t)v12);
        }
        else
        {
          std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v15, (uint64_t)v12);
          v17 = v16 + 24;
        }
        v15[1] = v17;
        v18 = **(unsigned int **)(a1 + 32);
        if ((_DWORD)v18)
        {
          for (i = 0; i < v18; ++i)
          {
            v20 = **(unsigned int **)(a1 + 40);
            if ((_DWORD)v20)
            {
              memmove((void *)(**(_QWORD **)(a1 + 48) + 4 * (v20 * i)), **(const void ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 88) + 24 * v9) + 8 * i), 4 * v20);
              v18 = **(unsigned int **)(a1 + 32);
            }
          }
        }
        v21 = *(_QWORD *)(a1 + 48);
        v22 = *(uint64_t **)(a1 + 56);
        v23 = v22[1];
        if (v23 >= v22[2])
        {
          v24 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v22, v21);
        }
        else
        {
          std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v22, v21);
          v24 = v23 + 24;
        }
        v22[1] = v24;
        v7 = *(_QWORD **)(a2 + 32);
        v8 = v7[5];
        v9 = ++v10;
      }
      while (v10 < (unint64_t)((v7[6] - v8) >> 2));
    }
    std::vector<std::vector<float>>::__insert_with_size[abi:ne180100]<std::__wrap_iter<std::vector<float>*>,std::__wrap_iter<std::vector<float>*>>(*(uint64_t **)(a1 + 64), *(__n128 **)(*(_QWORD *)(a1 + 64) + 8), v7[14], v7[15], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[15] - v7[14]) >> 3));
    v25 = **(_QWORD **)(a2 + 32);
    v51 = 0;
    v52 = 0;
    __p = 0;
    std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(v25 + 80), *(_QWORD *)(v25 + 88), (uint64_t)(*(_QWORD *)(v25 + 88) - *(_QWORD *)(v25 + 80)) >> 2);
    v26 = __p;
    v27 = (((v51 - (_BYTE *)__p) >> 2) / 3uLL);
    if ((((v51 - (_BYTE *)__p) >> 2) / 3uLL))
    {
      v28 = *(_QWORD **)(a2 + 32);
      v29 = (uint64_t)(v28[6] - v28[5]) >> 2;
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28[12] - v28[11]) >> 3) >= v29
                                                                       + (((v51 - (_BYTE *)__p) >> 2)
                                                                                      / 3uLL))
      {
        v30 = 0;
        do
        {
          v31 = *((float *)__p + (3 * v30));
          v32 = *((float *)__p + (3 * v30 + 1));
          v33 = *((float *)__p + (3 * v30 + 2));
          v34 = atan2f(v32, v31) * 57.296;
          v35 = hypotf(v31, v32);
          v36 = atan2f(-v33, v35);
          v37 = *(uint64_t **)(a1 + 16);
          v38 = **(_QWORD **)(a1 + 8);
          v39 = *v37;
          *(float *)(*v37 + 4 * *(unsigned int *)(v38 + 496)) = v36 * -57.296;
          *(float *)(v39 + 4 * *(unsigned int *)(v38 + 492)) = v34;
          v40 = *(_QWORD *)(a1 + 24);
          v41 = *(_QWORD *)(v40 + 8);
          if (v41 >= *(_QWORD *)(v40 + 16))
          {
            v42 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(*(uint64_t **)(a1 + 24), (uint64_t)v37);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(*(_QWORD *)(a1 + 24), (uint64_t)v37);
            v42 = v41 + 24;
          }
          *(_QWORD *)(v40 + 8) = v42;
          v43 = **(unsigned int **)(a1 + 32);
          if ((_DWORD)v43)
          {
            for (j = 0; j < v43; ++j)
            {
              v45 = **(unsigned int **)(a1 + 40);
              if ((_DWORD)v45)
              {
                memmove((void *)(**(_QWORD **)(a1 + 48) + 4 * (v45 * j)), **(const void ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 88)+ 24 * (v30 + v29))+ 8 * j), 4 * v45);
                v43 = **(unsigned int **)(a1 + 32);
              }
            }
          }
          v46 = *(_QWORD *)(a1 + 48);
          v47 = *(_QWORD *)(a1 + 56);
          v48 = *(_QWORD *)(v47 + 8);
          if (v48 >= *(_QWORD *)(v47 + 16))
          {
            v49 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(*(uint64_t **)(a1 + 56), v46);
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>(*(_QWORD *)(a1 + 56), v46);
            v49 = v48 + 24;
          }
          *(_QWORD *)(v47 + 8) = v49;
          ++v30;
        }
        while (v30 != v27);
        v26 = __p;
      }
    }
    if (v26)
    {
      v51 = v26;
      operator delete(v26);
    }
  }
}

void sub_21058D040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],std::string>(applesauce::CF::TypeRef *a1, char *a2, uint64_t a3)
{
  int v5;
  const UInt8 *v6;
  CFIndex v7;
  CFStringRef v8;
  void *exception;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = (const UInt8 *)a3;
  else
    v6 = *(const UInt8 **)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = CFStringCreateWithBytes(0, v6, v7, 0x8000100u, 0);
  *((_QWORD *)a1 + 1) = v8;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D0F4(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],float &>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D1BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],int>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D284(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],float>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D34C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],std::string>(applesauce::CF::TypeRef *a1, char *a2, uint64_t a3)
{
  int v5;
  const UInt8 *v6;
  CFIndex v7;
  CFStringRef v8;
  void *exception;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = (const UInt8 *)a3;
  else
    v6 = *(const UInt8 **)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = CFStringCreateWithBytes(0, v6, v7, 0x8000100u, 0);
  *((_QWORD *)a1 + 1) = v8;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D420(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],unsigned int &>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D4E8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],char const(&)[8]>(applesauce::CF::TypeRef *a1, char *a2, char *a3)
{
  applesauce::CF::TypeRef *v5;

  v5 = applesauce::CF::TypeRef::TypeRef(a1, a2);
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)((char *)v5 + 8), a3);
  return a1;
}

void sub_21058D558(_Unwind_Exception *a1)
{
  const void **v1;

  applesauce::CF::TypeRef::~TypeRef(v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[20],unsigned long &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  CFNumberRef v5;
  void *exception;
  uint64_t valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D5F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef &>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],float &>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D700(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],unsigned int &>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_21058D7C8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

uint64_t std::uniform_int_distribution<int>::operator()<std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>>(int a1, std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253> *this, _DWORD *a3)
{
  uint64_t result;
  int v4;
  unsigned int v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  std::mersenne_twister_engine<unsigned int, 32, 624, 397, 31, 2567483615, 11, 4294967295, 7, 2636928640, 15, 4022730752, 18, 1812433253>::result_type v13;

  result = a3[1];
  v4 = result - *a3;
  if ((_DWORD)result != *a3)
  {
    v6 = v4 + 1;
    if (v4 == -1)
    {
      return std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this);
    }
    else
    {
      v8 = __clz(v6);
      v9 = 31;
      if (((v6 << v8) & 0x7FFFFFFF) != 0)
        v9 = 32;
      v10 = v9 - v8;
      v11 = v10 >> 5;
      if ((v10 & 0x1F) != 0)
        ++v11;
      if (v11 <= v10)
        v12 = 0xFFFFFFFF >> -(v10 / v11);
      else
        v12 = 0;
      do
        v13 = std::mersenne_twister_engine<unsigned int,32ul,624ul,397ul,31ul,2567483615u,11ul,4294967295u,7ul,2636928640u,15ul,4022730752u,18ul,1812433253u>::operator()(this) & v12;
      while (v13 >= v6);
      return *a3 + v13;
    }
  }
  return result;
}

_QWORD *_ZNSt3__115allocate_sharedB8ne180100IN2IR23VBAPTriangulationKernelENS_9allocatorIS2_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0xD0uLL);
  result = _ZNSt3__120__shared_ptr_emplaceIN2IR23VBAPTriangulationKernelENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_21058D8E8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__120__shared_ptr_emplaceIN2IR23VBAPTriangulationKernelENS_9allocatorIS2_EEEC2B8ne180100IJES4_Li0EEES4_DpOT_(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CA2CA00;
  IR::VBAPTriangulationKernel::VBAPTriangulationKernel((IR::VBAPTriangulationKernel *)(a1 + 3));
  return a1;
}

void sub_21058D930(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IR::VBAPTriangulationKernel>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2CA00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IR::VBAPTriangulationKernel>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2CA00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

uint64_t std::__shared_ptr_emplace<IR::VBAPTriangulationKernel>::__on_zero_shared(uint64_t a1)
{
  return std::__destroy_at[abi:ne180100]<IR::VBAPTriangulationKernel,0>(a1 + 24);
}

IR::VBAPTriangulationKernel *IR::VBAPTriangulationKernel::VBAPTriangulationKernel(IR::VBAPTriangulationKernel *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 16) = 0;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 7) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *((_OWORD *)this + 3) = 0u;
  *(_OWORD *)this = 0u;
  *((_QWORD *)this + 17) = 0xFFFFFFFFLL;
  IR::IRCoordinates::IRCoordinates((IR::VBAPTriangulationKernel *)((char *)this + 144));
  return this;
}

void sub_21058D9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  void **v11;
  void **v12;
  void *v14;

  a10 = (void **)(v10 + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + 88);
  std::vector<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::__destroy_vector::operator()[abi:ne180100](&a10);
  v14 = *(void **)(v10 + 64);
  if (v14)
  {
    *(_QWORD *)(v10 + 72) = v14;
    operator delete(v14);
  }
  IR::VBAPTriangulationKernel::VBAPTriangulationKernel(v12, v11, v10);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100](&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__destroy_at[abi:ne180100]<IR::VBAPTriangulationKernel,0>(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  v6 = (void **)(a1 + 112);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v6 = (void **)(a1 + 88);
  std::vector<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::__destroy_vector::operator()[abi:ne180100](&v6);
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 40);
  if (v3)
  {
    *(_QWORD *)(a1 + 48) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 16);
  if (v4)
  {
    *(_QWORD *)(a1 + 24) = v4;
    operator delete(v4);
  }
  return std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](a1);
}

void std::__function::__func<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_0,std::allocator<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_0,std::allocator<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24CA2CCF8;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_0,std::allocator<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA2CCF8;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_0,std::allocator<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t *a1, uint64_t a2, unsigned int *a3)
{
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  __int128 v24;

  IR::IRCoordinates::set(a1[1], *(_DWORD *)(*(_QWORD *)(a1[2] + 80) + 4 * *a3), *(float *)a2);
  if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8))
  {
    v5 = (void **)a1[3];
    v6 = a1[1];
    v7 = (char *)v5[1];
    v8 = (char *)v5[2];
    if (v7 >= v8)
    {
      v12 = 0x8E38E38E38E38E39 * ((v7 - (_BYTE *)*v5) >> 2);
      v13 = v12 + 1;
      if (v12 + 1 > 0x71C71C71C71C71CLL)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v14 = 0x8E38E38E38E38E39 * ((v8 - (_BYTE *)*v5) >> 2);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x38E38E38E38E38ELL)
        v15 = 0x71C71C71C71C71CLL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinates>>((uint64_t)(v5 + 2), v15);
      else
        v16 = 0;
      v17 = &v16[36 * v12];
      v18 = &v16[36 * v15];
      v19 = *(_OWORD *)v6;
      v20 = *(_OWORD *)(v6 + 16);
      *((_DWORD *)v17 + 8) = *(_DWORD *)(v6 + 32);
      *(_OWORD *)v17 = v19;
      *((_OWORD *)v17 + 1) = v20;
      v11 = v17 + 36;
      v22 = (char *)*v5;
      v21 = (char *)v5[1];
      if (v21 != *v5)
      {
        do
        {
          v23 = *(_OWORD *)(v21 - 36);
          v24 = *(_OWORD *)(v21 - 20);
          *((_DWORD *)v17 - 1) = *((_DWORD *)v21 - 1);
          *(_OWORD *)(v17 - 20) = v24;
          *(_OWORD *)(v17 - 36) = v23;
          v17 -= 36;
          v21 -= 36;
        }
        while (v21 != v22);
        v21 = (char *)*v5;
      }
      *v5 = v17;
      v5[1] = v11;
      v5[2] = v18;
      if (v21)
        operator delete(v21);
    }
    else
    {
      v9 = *(_OWORD *)v6;
      v10 = *(_OWORD *)(v6 + 16);
      *((_DWORD *)v7 + 8) = *(_DWORD *)(v6 + 32);
      *(_OWORD *)v7 = v9;
      *((_OWORD *)v7 + 1) = v10;
      v11 = v7 + 36;
    }
    v5[1] = v11;
  }
}

void std::__function::__func<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_1,std::allocator<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_1,std::allocator<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_24CA2CD40;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_1,std::allocator<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA2CD40;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_1,std::allocator<IR::IRData::Implementation::createSizeDimension(std::vector<float> const&,applesauce::CF::ArrayRef,BOOL)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::operator()(_QWORD *a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  void **v11;
  __int128 *v12;
  char *v13;
  char *v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;

  v5 = *a3;
  v6 = a1[1];
  v7 = *(_QWORD *)(v6 + 104);
  if (v5 < (*(_QWORD *)(v6 + 112) - v7) >> 2)
    IR::IRCoordinates::set(a1[2], *(_DWORD *)(*(_QWORD *)(v6 + 80) + 4 * *(int *)(v7 + 4 * v5)), *(float *)a2);
  v8 = *(_QWORD **)(a2 + 32);
  if (v8 && v8[6] != v8[5])
  {
    v9 = 0;
    v10 = 0;
    do
    {
      IR::IRCoordinates::set(a1[2], *(_DWORD *)(*(_QWORD *)(v6 + 80) + 4 * *(unsigned int *)(v6 + 496)), *(float *)(v8[8] + 4 * v9));
      IR::IRCoordinates::set(a1[2], *(_DWORD *)(*(_QWORD *)(v6 + 80) + 4 * *(unsigned int *)(v6 + 492)), *(float *)(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 40) + 4 * v9));
      v12 = (__int128 *)a1[2];
      v11 = (void **)a1[3];
      v13 = (char *)v11[1];
      v14 = (char *)v11[2];
      if (v13 >= v14)
      {
        v18 = 0x8E38E38E38E38E39 * ((v13 - (_BYTE *)*v11) >> 2);
        v19 = v18 + 1;
        if (v18 + 1 > 0x71C71C71C71C71CLL)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v20 = 0x8E38E38E38E38E39 * ((v14 - (_BYTE *)*v11) >> 2);
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x38E38E38E38E38ELL)
          v21 = 0x71C71C71C71C71CLL;
        else
          v21 = v19;
        if (v21)
          v22 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinates>>((uint64_t)(v11 + 2), v21);
        else
          v22 = 0;
        v23 = &v22[36 * v18];
        v24 = *v12;
        v25 = v12[1];
        *((_DWORD *)v23 + 8) = *((_DWORD *)v12 + 8);
        *(_OWORD *)v23 = v24;
        *((_OWORD *)v23 + 1) = v25;
        v27 = (char *)*v11;
        v26 = (char *)v11[1];
        v28 = v23;
        if (v26 != *v11)
        {
          do
          {
            v29 = *(_OWORD *)(v26 - 36);
            v30 = *(_OWORD *)(v26 - 20);
            *((_DWORD *)v28 - 1) = *((_DWORD *)v26 - 1);
            *(_OWORD *)(v28 - 20) = v30;
            *(_OWORD *)(v28 - 36) = v29;
            v28 -= 36;
            v26 -= 36;
          }
          while (v26 != v27);
          v26 = (char *)*v11;
        }
        v17 = v23 + 36;
        *v11 = v28;
        v11[1] = v23 + 36;
        v11[2] = &v22[36 * v21];
        if (v26)
          operator delete(v26);
      }
      else
      {
        v15 = *v12;
        v16 = v12[1];
        *((_DWORD *)v13 + 8) = *((_DWORD *)v12 + 8);
        *(_OWORD *)v13 = v15;
        *((_OWORD *)v13 + 1) = v16;
        v17 = v13 + 36;
      }
      v11[1] = v17;
      v8 = *(_QWORD **)(a2 + 32);
      v9 = ++v10;
    }
    while (v10 < (unint64_t)((uint64_t)(v8[6] - v8[5]) >> 2));
  }
}

unint64_t applesauce::CF::details::at_as<unsigned int>(const __CFArray *a1, unint64_t a2)
{
  const __CFNumber *ValueAtIndex;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 && CFArrayGetCount(a1) > a2 && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2)) != 0)
  {
    v5 = applesauce::CF::convert_as<unsigned int,0>(ValueAtIndex);
    v6 = v5 & 0xFFFFFF0000000000;
    v7 = v5 & 0xFF00000000;
    v8 = v5 & 0xFFFFFF00;
    v9 = v5;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v7 = 0;
    v9 = 0;
  }
  return v6 | v8 | v7 | v9;
}

unint64_t applesauce::CF::details::at_as<float>(const __CFArray *a1, unint64_t a2)
{
  const __CFNumber *ValueAtIndex;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a1 && CFArrayGetCount(a1) > a2 && (ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(a1, a2)) != 0)
  {
    v5 = applesauce::CF::convert_as<float,0>(ValueAtIndex);
    v6 = v5 & 0xFFFFFF0000000000;
    v7 = v5 & 0xFF00000000;
    v8 = v5 & 0xFFFFFF00;
    v9 = v5;
  }
  else
  {
    v8 = 0;
    v6 = 0;
    v7 = 0;
    v9 = 0;
  }
  return v6 | v8 | v7 | v9;
}

void std::__function::__func<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_0,std::allocator<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_0,std::allocator<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2CD88;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_0,std::allocator<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA2CD88;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_0,std::allocator<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  if (v3 != v4)
  {
    v5 = *a3;
    v6 = *(_QWORD **)(result + 8);
    v7 = v6[13];
    if (((v6[14] - v7) >> 2) - 1 > v5)
    {
      v8 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 5);
      v9 = *(int *)(v7 + 4 * (v5 + 1));
      v10 = v6[22];
      if (v8 > *(unsigned int *)(v10 + 4 * v9))
        *(_DWORD *)(v10 + 4 * v9) = v8;
    }
  }
  return result;
}

void std::__function::__func<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_1,std::allocator<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_1,std::allocator<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2CDD0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_1,std::allocator<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA2CDD0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_1,std::allocator<IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(void)::$_1>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t result, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(a2 + 72);
  v4 = *(_QWORD *)(a2 + 80);
  if (v3 != v4)
  {
    v5 = *a3;
    v6 = *(_QWORD *)(*(_QWORD *)(result + 8) + 176);
    if (((*(_QWORD *)(*(_QWORD *)(result + 8) + 184) - v6) >> 2) - 1 > v5)
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 5);
      v8 = (v5 + 1);
      if (v7 > *(unsigned int *)(v6 + 4 * v8))
        *(_DWORD *)(v6 + 4 * v8) = v7;
    }
  }
  return result;
}

void std::__function::__func<IR::IRData::Implementation::estimateAverageDelay(void)::$_0,std::allocator<IR::IRData::Implementation::estimateAverageDelay(void)::$_0>,void ()(IR::IRDataNode const&,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<IR::IRData::Implementation::estimateAverageDelay(void)::$_0,std::allocator<IR::IRData::Implementation::estimateAverageDelay(void)::$_0>,void ()(IR::IRDataNode const&,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA2CE18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<IR::IRData::Implementation::estimateAverageDelay(void)::$_0,std::allocator<IR::IRData::Implementation::estimateAverageDelay(void)::$_0>,void ()(IR::IRDataNode const&,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA2CE18;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<IR::IRData::Implementation::estimateAverageDelay(void)::$_0,std::allocator<IR::IRData::Implementation::estimateAverageDelay(void)::$_0>,void ()(IR::IRDataNode const&,unsigned int)>::operator()(uint64_t result, uint64_t a2)
{
  float *v2;
  uint64_t v3;
  unint64_t v4;
  int *v5;
  float *v6;
  float v7;
  int v8;
  unint64_t v9;
  float v10;

  v2 = *(float **)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56) - (_QWORD)v2;
  if (v3)
  {
    v4 = v3 >> 2;
    v6 = *(float **)(result + 8);
    v5 = *(int **)(result + 16);
    v7 = *v6;
    v8 = *v5;
    if (v4 <= 1)
      v4 = 1;
    v9 = v4;
    do
    {
      v10 = *v2++;
      v7 = v7 + v10;
      *v6 = v7;
      --v9;
    }
    while (v9);
    *v5 = v8 + v4;
  }
  return result;
}

void std::__function::__func<IR::IRData::Implementation::computeAverageIR(void)::$_0,std::allocator<IR::IRData::Implementation::computeAverageIR(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<IR::IRData::Implementation::computeAverageIR(void)::$_0,std::allocator<IR::IRData::Implementation::computeAverageIR(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_24CA2CE60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<IR::IRData::Implementation::computeAverageIR(void)::$_0,std::allocator<IR::IRData::Implementation::computeAverageIR(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA2CE60;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<IR::IRData::Implementation::computeAverageIR(void)::$_0,std::allocator<IR::IRData::Implementation::computeAverageIR(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(result + 8);
  v3 = (*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3;
  v4 = *(_DWORD *)(v2 + 32);
  if (v4 >= v3)
    v3 = v3;
  else
    v3 = v4;
  if ((_DWORD)v3)
  {
    v6 = result;
    v7 = 0;
    v8 = 0;
    v9 = 40 * v3;
    do
    {
      result = IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)(v2 + 304) + v8), *(const IR::FFTFilterKernel **)(*(_QWORD *)(a2 + 8) + v7), **(float **)(v6 + 16));
      v8 += 40;
      v7 += 8;
    }
    while (v9 != v8);
  }
  return result;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::BooleanRef,std::string const&>(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, _BYTE *a3@<X8>)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<std::string const&>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFBooleanGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,std::string const&>(const __CFDictionary *a1@<X0>, const UInt8 *a2@<X1>, _BYTE *a3@<X8>)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<std::string const&>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFNumberGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

uint64_t std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x212BC7754](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x24BEDB350]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x212BC7760](v13);
  return a1;
}

void sub_21058E6B0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x212BC7760](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x21058E690);
}

void sub_21058E6F8(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t std::__pad_and_output[abi:ne180100]<char,std::char_traits<char>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      std::string::basic_string[abi:ne180100](__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_21058E82C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__function::__func<IR::IRData::Implementation::printNodes(void)::$_0,std::allocator<IR::IRData::Implementation::printNodes(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<IR::IRData::Implementation::printNodes(void)::$_0,std::allocator<IR::IRData::Implementation::printNodes(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CA2CEA8;
  return result;
}

void std::__function::__func<IR::IRData::Implementation::printNodes(void)::$_0,std::allocator<IR::IRData::Implementation::printNodes(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CA2CEA8;
}

uint64_t std::__function::__func<IR::IRData::Implementation::printNodes(void)::$_0,std::allocator<IR::IRData::Implementation::printNodes(void)::$_0>,void ()(IR::IRDataNode &,unsigned int)>::operator()(uint64_t a1, uint64_t a2, int *a3)
{
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  const std::locale::facet *v6;
  std::locale v8;

  v3 = *a3;
  if (*a3)
  {
    v4 = (_QWORD *)MEMORY[0x24BEDB318];
    do
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)"\t", 1);
      --v3;
    }
    while (v3);
  }
  v5 = (_QWORD *)std::ostream::operator<<();
  std::ios_base::getloc((const std::ios_base *)((char *)v5 + *(_QWORD *)(*v5 - 24)));
  v6 = std::locale::use_facet(&v8, MEMORY[0x24BEDB350]);
  ((void (*)(const std::locale::facet *, uint64_t))v6->__vftable[2].~facet_0)(v6, 10);
  std::locale::~locale(&v8);
  std::ostream::put();
  return std::ostream::flush();
}

void sub_21058E960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IR::IRData>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA2CA38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IR::IRData>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA2CA38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

IR::IRData::Implementation *std::__shared_ptr_emplace<IR::IRData>::__on_zero_shared(uint64_t a1)
{
  return std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100]((IR::IRData::Implementation **)(a1 + 24), 0);
}

uint64_t std::allocate_shared[abi:ne180100]<IR::IRData const,std::allocator<IR::IRData const>,float &,int,int,float,BOOL,unsigned int,unsigned int,unsigned int &,std::vector<IR::IRCoordinateType>,std::vector<float>,std::vector<IR::IRInterpolationMethod>,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,void>@<X0>(float *a1@<X1>, int *a2@<X2>, int *a3@<X3>, float *a4@<X4>, unsigned __int8 *a5@<X5>, int *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>, int *a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, const void **a14, CFTypeRef *a15)
{
  char *v23;
  uint64_t result;

  v23 = (char *)operator new(0x20uLL);
  result = std::__shared_ptr_emplace<IR::IRData const>::__shared_ptr_emplace[abi:ne180100]<float &,int,int,float,BOOL,unsigned int,unsigned int,unsigned int &,std::vector<IR::IRCoordinateType>,std::vector<float>,std::vector<IR::IRInterpolationMethod>,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,std::allocator<IR::IRData const>,0>((uint64_t)v23, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15);
  *a8 = v23 + 24;
  a8[1] = v23;
  return result;
}

void sub_21058EA94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<IR::IRData const>::__shared_ptr_emplace[abi:ne180100]<float &,int,int,float,BOOL,unsigned int,unsigned int,unsigned int &,std::vector<IR::IRCoordinateType>,std::vector<float>,std::vector<IR::IRInterpolationMethod>,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,std::allocator<IR::IRData const>,0>(uint64_t a1, float *a2, int *a3, int *a4, float *a5, unsigned __int8 *a6, int *a7, int *a8, int *a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, const void **a14, CFTypeRef *a15)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24CA2C9C8;
  *(_QWORD *)(a1 + 8) = 0;
  std::construct_at[abi:ne180100]<IR::IRData const,float &,int,int,float,BOOL,unsigned int,unsigned int,unsigned int &,std::vector<IR::IRCoordinateType>,std::vector<float>,std::vector<IR::IRInterpolationMethod>,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,IR::IRData const*>((IR::IRData::Implementation **)(a1 + 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

void sub_21058EB00(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<IR::IRData const>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA2C9C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IR::IRData const>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24CA2C9C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

IR::IRData::Implementation *std::__shared_ptr_emplace<IR::IRData const>::__on_zero_shared(uint64_t a1)
{
  return std::unique_ptr<IR::IRData::Implementation>::reset[abi:ne180100]((IR::IRData::Implementation **)(a1 + 24), 0);
}

IR::IRData::Implementation **std::construct_at[abi:ne180100]<IR::IRData const,float &,int,int,float,BOOL,unsigned int,unsigned int,unsigned int &,std::vector<IR::IRCoordinateType>,std::vector<float>,std::vector<IR::IRInterpolationMethod>,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,IR::IRData const*>(IR::IRData::Implementation **a1, float *a2, int *a3, int *a4, float *a5, unsigned __int8 *a6, int *a7, int *a8, int *a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, const void **a14, CFTypeRef *a15)
{
  float v16;
  int v17;
  int v18;
  float v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const void *v25;
  CFTypeRef v27;
  CFTypeRef v28;

  v16 = *a2;
  v17 = *a3;
  v18 = *a4;
  v19 = *a5;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  v23 = *a9;
  v24 = *a13;
  v25 = *a14;
  *a14 = 0;
  v27 = *a15;
  v28 = v25;
  *a15 = 0;
  IR::IRData::IRData(a1, v17, v18, v20, v21, v22, v23, a10, v16, v19, a11, a12, v24, &v28, &v27);
  if (v27)
    CFRelease(v27);
  if (v28)
    CFRelease(v28);
  return a1;
}

void sub_21058EC18(_Unwind_Exception *a1)
{
  uint64_t v1;

  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v1 - 32));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v1 - 24));
  _Unwind_Resume(a1);
}

IR::IRData::Implementation *IR::IRData::Implementation::Implementation(IR::IRData::Implementation *this, const IR::IRData::Implementation *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_OWORD *)a2;
  v5 = *((_OWORD *)a2 + 1);
  *((_QWORD *)this + 4) = *((_QWORD *)a2 + 4);
  *(_OWORD *)this = v4;
  *((_OWORD *)this + 1) = v5;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_QWORD *)this + 7) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)this + 5, *((const void **)a2 + 5), *((_QWORD *)a2 + 6), (uint64_t)(*((_QWORD *)a2 + 6) - *((_QWORD *)a2 + 5)) >> 2);
  v6 = *((_OWORD *)a2 + 4);
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 4) = v6;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  std::vector<IR::IRCoordinateType>::__init_with_size[abi:ne180100]<IR::IRCoordinateType*,IR::IRCoordinateType*>((_QWORD *)this + 10, *((const void **)a2 + 10), *((_QWORD *)a2 + 11), (uint64_t)(*((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10)) >> 2);
  *((_QWORD *)this + 13) = 0;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>((_QWORD *)this + 13, *((const void **)a2 + 13), *((_QWORD *)a2 + 14), (uint64_t)(*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 2);
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 17) = 0;
  *((_QWORD *)this + 18) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)this + 16, *((const void **)a2 + 16), *((_QWORD *)a2 + 17), (uint64_t)(*((_QWORD *)a2 + 17) - *((_QWORD *)a2 + 16)) >> 2);
  *((_QWORD *)this + 19) = 0;
  *((_QWORD *)this + 20) = 0;
  *((_QWORD *)this + 21) = 0;
  std::vector<IR::IRCoordinateType>::__init_with_size[abi:ne180100]<IR::IRCoordinateType*,IR::IRCoordinateType*>((_QWORD *)this + 19, *((const void **)a2 + 19), *((_QWORD *)a2 + 20), (uint64_t)(*((_QWORD *)a2 + 20) - *((_QWORD *)a2 + 19)) >> 2);
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_QWORD *)this + 24) = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>((_QWORD *)this + 22, *((const void **)a2 + 22), *((_QWORD *)a2 + 23), (uint64_t)(*((_QWORD *)a2 + 23) - *((_QWORD *)a2 + 22)) >> 2);
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  std::vector<IR::IRInterpolationMethod>::__init_with_size[abi:ne180100]<IR::IRInterpolationMethod*,IR::IRInterpolationMethod*>((_QWORD *)this + 25, *((const void **)a2 + 25), *((_QWORD *)a2 + 26), (uint64_t)(*((_QWORD *)a2 + 26) - *((_QWORD *)a2 + 25)) >> 2);
  v7 = *((_OWORD *)a2 + 14);
  v8 = *((_OWORD *)a2 + 15);
  *((_DWORD *)this + 64) = *((_DWORD *)a2 + 64);
  *((_OWORD *)this + 14) = v7;
  *((_OWORD *)this + 15) = v8;
  v9 = *((_QWORD *)a2 + 34);
  *((_QWORD *)this + 33) = *((_QWORD *)a2 + 33);
  *((_QWORD *)this + 34) = v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *((_QWORD *)a2 + 35);
  if (v12)
    CFRetain(*((CFTypeRef *)a2 + 35));
  *((_QWORD *)this + 35) = v12;
  v13 = *((_QWORD *)a2 + 36);
  if (v13)
    CFRetain(*((CFTypeRef *)a2 + 36));
  *((_QWORD *)this + 36) = v13;
  v14 = *((_QWORD *)a2 + 37);
  if (v14)
    CFRetain(*((CFTypeRef *)a2 + 37));
  *((_QWORD *)this + 37) = v14;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  std::vector<IR::FFTFilterKernel>::__init_with_size[abi:ne180100]<IR::FFTFilterKernel*,IR::FFTFilterKernel*>((_QWORD *)this + 38, *((_QWORD *)a2 + 38), *((_QWORD *)a2 + 39), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)a2 + 39) - *((_QWORD *)a2 + 38)) >> 3));
  *((_BYTE *)this + 328) = *((_BYTE *)a2 + 328);
  IR::IRDataAttributes::IRDataAttributes((IR::IRData::Implementation *)((char *)this + 336), (const IR::IRData::Implementation *)((char *)a2 + 336));
  v15 = *((_QWORD *)a2 + 61);
  *((_DWORD *)this + 124) = *((_DWORD *)a2 + 124);
  *((_QWORD *)this + 61) = v15;
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 63) = 0;
  *((_QWORD *)this + 64) = 0;
  std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__init_with_size[abi:ne180100]<std::shared_ptr<IR::VBAPTriangulationKernel>*,std::shared_ptr<IR::VBAPTriangulationKernel>*>((char *)this + 504, *((_QWORD **)a2 + 63), *((_QWORD **)a2 + 64), (uint64_t)(*((_QWORD *)a2 + 64) - *((_QWORD *)a2 + 63)) >> 4);
  return this;
}

void sub_21058EE64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, uint64_t a12)
{
  uint64_t v12;
  IR::IRDataAttributes *v13;
  void **v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  IR::IRDataAttributes::~IRDataAttributes(v13);
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v12 + 296));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v12 + 288));
  applesauce::CF::StringRef::~StringRef((const void **)(v12 + 280));
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](v12 + 264);
  v20 = *v19;
  if (*v19)
  {
    *(_QWORD *)(v12 + 208) = v20;
    operator delete(v20);
  }
  v21 = *v18;
  if (*v18)
  {
    *(_QWORD *)(v12 + 184) = v21;
    operator delete(v21);
  }
  v22 = *v17;
  if (*v17)
  {
    *(_QWORD *)(v12 + 160) = v22;
    operator delete(v22);
  }
  v23 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v12 + 136) = v23;
    operator delete(v23);
  }
  v24 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v12 + 112) = v24;
    operator delete(v24);
  }
  v25 = *v14;
  if (*v14)
  {
    *(_QWORD *)(v12 + 88) = v25;
    operator delete(v25);
  }
  v26 = *a11;
  if (*a11)
  {
    *(_QWORD *)(v12 + 48) = v26;
    operator delete(v26);
  }
  _Unwind_Resume(a1);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21058EFB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_21058F030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IR::FFTFilterKernel>::__init_with_size[abi:ne180100]<IR::FFTFilterKernel*,IR::FFTFilterKernel*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<IR::FFTFilterKernel>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<IR::FFTFilterKernel>,IR::FFTFilterKernel*,IR::FFTFilterKernel*,IR::FFTFilterKernel*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_21058F0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<IR::FFTFilterKernel>,IR::FFTFilterKernel*,IR::FFTFilterKernel*,IR::FFTFilterKernel*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      IR::FFTFilterKernel::FFTFilterKernel((IR::FFTFilterKernel *)(a4 + v7), (const IR::FFTFilterKernel *)(a2 + v7));
      v7 += 40;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_21058F12C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 40;
    do
    {
      IR::FFTFilterKernel::~FFTFilterKernel((IR::FFTFilterKernel *)(v4 + v2));
      v2 -= 40;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__init_with_size[abi:ne180100]<std::shared_ptr<IR::VBAPTriangulationKernel>*,std::shared_ptr<IR::VBAPTriangulationKernel>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_21058F1DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DSPSplitComplex>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void OUTLINED_FUNCTION_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void OUTLINED_FUNCTION_2(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void OUTLINED_FUNCTION_3(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_6(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x18u);
}

void OUTLINED_FUNCTION_7(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

void OUTLINED_FUNCTION_9(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x1Cu);
}

void OUTLINED_FUNCTION_10(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x20u);
}

void OUTLINED_FUNCTION_13(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0x16u);
}

uint64_t IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  int v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  __int128 v25;
  float **v26;
  _QWORD *v27;
  uint64_t v28;
  float **v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unsigned int v40;
  __int128 v41;
  __int128 v42;
  int v43;
  int v44;
  unsigned int *v45;
  unsigned int v46;
  _QWORD v47[3];
  _QWORD *v48;
  _QWORD v49[3];
  _QWORD *v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v15 = *(unsigned __int8 *)(a1 + 488);
  if (*(_BYTE *)(a1 + 488))
  {
    if (*(_QWORD *)(a1 + 504) == *(_QWORD *)(a1 + 512))
      IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
  }
  else if (*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8) == **(_QWORD **)(a1 + 264))
  {
    IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
  }
  if (a6 != a8)
    IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
  if (a6 < a4)
    IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
  result = 1667786857;
  v17 = *(unsigned int *)(a1 + 32);
  if (a4 > v17)
    return result;
  if (!a4)
  {
    v19 = 0;
LABEL_14:
    if (a6 >= v19)
      v20 = v19;
    else
      v20 = a6;
    if (!v20)
    {
      if ((_DWORD)v17)
        return 1701671028;
      else
        return 1852793972;
    }
    if (!*(_BYTE *)(a1 + 24) && *(_DWORD *)(a1 + 16))
      return 1852793702;
    if (a6)
    {
      v21 = 0;
      v22 = (_QWORD *)(a5 + 8);
      do
      {
        v23 = (void *)*(v22 - 1);
        v24 = *v22 - (_QWORD)v23;
        if (v24 >= 1)
          bzero(v23, 4 * (((unint64_t)v24 >> 2) - ((unint64_t)v24 > 3)) + 4);
        *(_DWORD *)(a7 + 4 * v21++) = 0;
        v22 += 3;
      }
      while (a6 > v21);
    }
    v46 = 0;
    if (v15)
    {
      v25 = *(_OWORD *)(a2 + 16);
      v41 = *(_OWORD *)a2;
      v33 = a1;
      v34 = a5;
      v35 = a6;
      v36 = a7;
      v37 = a6;
      v38 = a3;
      v39 = a4;
      v40 = a9;
      v42 = v25;
      v43 = *(_DWORD *)(a2 + 32);
      v44 = v20;
      v45 = &v46;
      v26 = *(float ***)(a1 + 264);
      v49[0] = &off_24CA2CF80;
      v49[1] = &v33;
      v50 = v49;
      IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights((IR::IRData::Implementation *)a1, a2, 0, v26, a9, (uint64_t)v49, 1.0);
      v27 = v50;
      if (v50 == v49)
      {
        v28 = 4;
        v27 = v49;
      }
      else
      {
        if (!v50)
          return v46;
        v28 = 5;
      }
      (*(void (**)(void))(*v27 + 8 * v28))();
      return v46;
    }
    v33 = a5;
    v34 = a6;
    v35 = a7;
    v36 = a6;
    v37 = a3;
    v38 = a4;
    LODWORD(v39) = v20;
    v29 = *(float ***)(a1 + 264);
    v47[0] = &off_24CA2CFC8;
    v47[1] = &v33;
    v48 = v47;
    IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights((IR::IRData::Implementation *)a1, a2, 0, v29, a9, (uint64_t)v47, 1.0);
    v30 = v48;
    if (v48 == v47)
    {
      v31 = 4;
      v30 = v47;
    }
    else
    {
      if (!v48)
        return 0;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
    return 0;
  }
  v18 = 0;
  while (*(_DWORD *)(a3 + 4 * v18) < v17)
  {
    if (++v18 >= a4)
    {
      v19 = a4;
      goto LABEL_14;
    }
  }
  return result;
}

void sub_21058F610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights(IR::IRData::Implementation *a1, uint64_t a2, unsigned int a3, float **a4, uint64_t a5, uint64_t a6, float a7)
{
  float *v7;
  uint64_t v11;
  IR::IRData::Implementation *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  float *v22;
  float *v23;
  uint64_t v24;
  unint64_t v25;
  float *v26;
  unint64_t v27;
  float *v28;
  float *v29;
  float v30;
  int *EmptyIRDataNode;
  float v32;
  uint64_t v33;
  int *v34;
  float v35;
  unsigned int v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  int v43;
  float v44;
  float v45;
  unsigned int v46;
  float v47;
  float v48;
  unsigned int v49;
  unint64_t v50;
  unint64_t v51;
  float v52;
  float v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  float *v57;
  float **v58;
  _QWORD *v59;
  uint64_t v60;
  _BYTE v61[24];
  _BYTE *v62;
  _BYTE v63[24];
  _BYTE *v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v7 = *a4;
  if (*a4 == a4[1])
    return;
  v11 = *((_QWORD *)a1 + 13);
  if (v11 == *((_QWORD *)a1 + 14))
  {
    EmptyIRDataNode = IR::IRData::Implementation::getEmptyIRDataNode(a1);
    v32 = 0.0;
    v33 = a6;
    v34 = (int *)v7;
    v35 = a7;
    goto LABEL_58;
  }
  v17 = IR::IRCoordinates::get(a2, *(_DWORD *)(*((_QWORD *)a1 + 10) + 4 * *(int *)(v11 + 4 * a3)));
  v18 = *((_QWORD *)a1 + 13);
  v19 = *(int *)(v18 + 4 * a3);
  v20 = *((_QWORD *)a1 + 16);
  v21 = *(float *)(v20 + 4 * v19);
  if (v21 != 0.0)
  {
    v17 = fmodf(v17, *(float *)(v20 + 4 * v19));
    if (v17 < 0.0)
      v17 = v21 + v17;
  }
  v23 = *a4;
  v22 = a4[1];
  v24 = (char *)v22 - (char *)*a4;
  if (v22 == *a4)
  {
    v26 = a4[1];
  }
  else
  {
    v25 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 5);
    v26 = *a4;
    do
    {
      v27 = v25 >> 1;
      v28 = &v26[24 * (v25 >> 1)];
      v30 = *v28;
      v29 = v28 + 24;
      v25 += ~(v25 >> 1);
      if (v30 < v17)
        v26 = v29;
      else
        v25 = v27;
    }
    while (v25);
  }
  if (v22 == v26)
  {
    v36 = -1431655765 * ((unint64_t)v24 >> 5) - 1;
    if (v21 == 0.0)
      goto LABEL_27;
    LODWORD(v37) = 0;
    v38 = v23[24 * v36];
    v39 = v17 - v38;
    goto LABEL_20;
  }
  if (*v26 != v17)
  {
    if (v23 != v26)
    {
      v37 = 0xAAAAAAAAAAAAAAABLL * (((char *)v26 - (char *)v23) >> 5);
      v36 = v37 - 1;
      v38 = v23[24 * (v37 - 1)];
      v39 = v17 - v38;
      v40 = v23[24 * v37];
      goto LABEL_23;
    }
    if (v21 == 0.0)
    {
      v36 = 0;
      goto LABEL_27;
    }
    LODWORD(v37) = 0;
    v36 = -1431655765 * ((unint64_t)v24 >> 5) - 1;
    v38 = v23[24 * v36];
    v39 = v21 + (float)(v17 - v38);
LABEL_20:
    v40 = v21 + *v23;
LABEL_23:
    v41 = v39 / (float)(v40 - v38);
    v42 = 1.0 - v41;
    goto LABEL_28;
  }
  v36 = -1431655765 * ((unint64_t)((char *)v26 - (char *)v23) >> 5);
LABEL_27:
  LODWORD(v37) = -1;
  v41 = 1.0;
  v42 = 1.0;
LABEL_28:
  v43 = a5;
  if ((_DWORD)a5 == 3)
    v43 = *(_DWORD *)(*((_QWORD *)a1 + 25) + 4 * v19);
  v44 = sqrtf(v42);
  v45 = sqrtf(v41);
  if (v41 <= v42)
    v46 = v36;
  else
    v46 = v37;
  v47 = 1.0;
  v48 = 0.0;
  if ((_DWORD)v37 == -1)
  {
    v48 = v41;
    v47 = v42;
    v46 = v36;
  }
  if (v43)
  {
    v49 = v37;
  }
  else
  {
    v41 = v48;
    v42 = v47;
    v49 = -1;
  }
  if (v43)
    v46 = v36;
  if (v43 == 2)
  {
    v41 = v45;
    v42 = v44;
    v50 = v37;
  }
  else
  {
    v50 = v49;
  }
  if (v43 == 2)
    v51 = v36;
  else
    v51 = v46;
  v52 = v42 * a7;
  v53 = v41 * a7;
  v54 = 0xAAAAAAAAAAAAAAABLL * (v24 >> 5);
  if (((*((_QWORD *)a1 + 14) - v18) >> 2) - 1 <= (unint64_t)a3)
  {
    if (v54 <= v51)
    {
      if (v54 <= v50)
        return;
      v34 = IR::IRData::Implementation::getEmptyIRDataNode(v16);
      EmptyIRDataNode = (int *)&(*a4)[24 * v50];
      v35 = 0.0;
      v33 = a6;
    }
    else
    {
      if (v54 <= v50)
      {
        EmptyIRDataNode = IR::IRData::Implementation::getEmptyIRDataNode(v16);
        v32 = 0.0;
        v33 = a6;
        v34 = (int *)&v23[24 * v51];
        v35 = v52;
        goto LABEL_58;
      }
      EmptyIRDataNode = (int *)&v23[24 * v50];
      v33 = a6;
      v34 = (int *)&v23[24 * v51];
      v35 = v52;
    }
    v32 = v53;
LABEL_58:
    std::function<void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::operator()(v33, (uint64_t)v34, (uint64_t)EmptyIRDataNode, v35, v32);
    return;
  }
  if (v54 > v51)
  {
    std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v63, a6);
    IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights(a1, a2, a3 + 1, &v23[24 * v51 + 18], a5, v63, v52);
    v55 = v64;
    if (v64 == v63)
    {
      v56 = 4;
      v55 = v63;
      goto LABEL_60;
    }
    if (v64)
    {
      v56 = 5;
LABEL_60:
      (*(void (**)(void))(*v55 + 8 * v56))();
    }
  }
  v58 = a4;
  v57 = *a4;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)v58[1] - (char *)v57) >> 5) <= v50)
    return;
  std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v61, a6);
  IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights(a1, a2, a3 + 1, &v57[24 * v50 + 18], a5, v61, v53);
  v59 = v62;
  if (v62 == v61)
  {
    v60 = 4;
    v59 = v61;
  }
  else
  {
    if (!v62)
      return;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
}

void sub_21058FB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  char *v17;
  char *v19;
  uint64_t v20;

  v19 = a13;
  if (a13 == v17)
  {
    v20 = 4;
    v19 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v20 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v19 + 8 * v20))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs<std::vector<float>>(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  return IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(*a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  return IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(*a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  int v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  float **v27;
  _QWORD *v28;
  uint64_t v29;
  float **v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unsigned int v41;
  __int128 v42;
  __int128 v43;
  int v44;
  int v45;
  unsigned int *v46;
  unsigned int v47;
  _QWORD v48[3];
  _QWORD *v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v15 = *(unsigned __int8 *)(a1 + 488);
  if (*(_BYTE *)(a1 + 488))
  {
    if (*(_QWORD *)(a1 + 504) == *(_QWORD *)(a1 + 512))
      IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
  }
  else if (*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8) == **(_QWORD **)(a1 + 264))
  {
    IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
  }
  if (a6 != a8)
    IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
  if (a6 < a4)
    IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>();
  result = 1667786857;
  v17 = *(unsigned int *)(a1 + 32);
  if (a4 > v17)
    return result;
  if (!a4)
  {
    v19 = 0;
LABEL_14:
    if (a6 >= v19)
      v20 = v19;
    else
      v20 = a6;
    if (!v20)
    {
      if ((_DWORD)v17)
        return 1701671028;
      else
        return 1852793972;
    }
    if (!*(_BYTE *)(a1 + 24) && *(_DWORD *)(a1 + 16))
      return 1852793702;
    if (a6)
    {
      v21 = 0;
      v22 = (uint64_t *)(a5 + 8);
      v23 = (uint64_t *)(a5 + 8);
      do
      {
        v25 = *v23;
        v23 += 2;
        v24 = v25;
        if (v25 >= 1)
          bzero((void *)*(v22 - 1), 4 * (v24 - ((v24 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
        *(_DWORD *)(a7 + 4 * v21++) = 0;
        v22 = v23;
      }
      while (a6 > v21);
    }
    v47 = 0;
    if (v15)
    {
      v26 = *(_OWORD *)(a2 + 16);
      v42 = *(_OWORD *)a2;
      v34 = a1;
      v35 = a5;
      v36 = a6;
      v37 = a7;
      v38 = a6;
      v39 = a3;
      v40 = a4;
      v41 = a9;
      v43 = v26;
      v44 = *(_DWORD *)(a2 + 32);
      v45 = v20;
      v46 = &v47;
      v27 = *(float ***)(a1 + 264);
      v50[0] = &off_24CA2D010;
      v50[1] = &v34;
      v51 = v50;
      IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights((IR::IRData::Implementation *)a1, a2, 0, v27, a9, (uint64_t)v50, 1.0);
      v28 = v51;
      if (v51 == v50)
      {
        v29 = 4;
        v28 = v50;
      }
      else
      {
        if (!v51)
          return v47;
        v29 = 5;
      }
      (*(void (**)(void))(*v28 + 8 * v29))();
      return v47;
    }
    v34 = a5;
    v35 = a6;
    v36 = a7;
    v37 = a6;
    v38 = a3;
    v39 = a4;
    LODWORD(v40) = v20;
    v30 = *(float ***)(a1 + 264);
    v48[0] = &off_24CA2D058;
    v48[1] = &v34;
    v49 = v48;
    IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights((IR::IRData::Implementation *)a1, a2, 0, v30, a9, (uint64_t)v48, 1.0);
    v31 = v49;
    if (v49 == v48)
    {
      v32 = 4;
      v31 = v48;
    }
    else
    {
      if (!v49)
        return 0;
      v32 = 5;
    }
    (*(void (**)(void))(*v31 + 8 * v32))();
    return 0;
  }
  v18 = 0;
  while (*(_DWORD *)(a3 + 4 * v18) < v17)
  {
    if (++v18 >= a4)
    {
      v19 = a4;
      goto LABEL_14;
    }
  }
  return result;
}

void sub_21058FE94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs<std::vector<float>>(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  return IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(*a1, a2, *(_QWORD *)(*a1 + 40), (uint64_t)(*(_QWORD *)(*a1 + 48) - *(_QWORD *)(*a1 + 40)) >> 2, a3, a4, a5, a6, a7);
}

{
  return __ZNK2IR6IRData31getInterpolatedTimeDomainCoeffsINSt3__16vectorIfNS2_9allocatorIfEEEEEEiRKNS_13IRCoordinatesENS2_4spanIT_Lm18446744073709551615EEENSA_IfLm18446744073709551615EEENS_21IRInterpolationMethodE(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  return IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(*a1, a2, *(_QWORD *)(*a1 + 40), (uint64_t)(*(_QWORD *)(*a1 + 48) - *(_QWORD *)(*a1 + 40)) >> 2, a3, a4, a5, a6, a7);
}

uint64_t IR::IRData::Implementation::getInterpolatedCoeffs(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  int v15;
  uint64_t result;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int v22;
  __int128 v24;
  float **v25;
  _QWORD *v26;
  uint64_t v27;
  float **v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __int128 v39;
  __int128 v40;
  int v41;
  unsigned int v42;
  int v43;
  unsigned int *v44;
  unsigned int v45;
  _QWORD v46[3];
  _QWORD *v47;
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v15 = *(unsigned __int8 *)(a1 + 488);
  if (*(_BYTE *)(a1 + 488))
  {
    if (*(_QWORD *)(a1 + 504) == *(_QWORD *)(a1 + 512))
      IR::IRData::Implementation::getInterpolatedCoeffs();
  }
  else if (*(_QWORD *)(*(_QWORD *)(a1 + 264) + 8) == **(_QWORD **)(a1 + 264))
  {
    IR::IRData::Implementation::getInterpolatedCoeffs();
  }
  if (a6 != a8)
    IR::IRData::Implementation::getInterpolatedCoeffs();
  if (a6 < a4)
    IR::IRData::Implementation::getInterpolatedCoeffs();
  result = 1667786857;
  v17 = *(unsigned int *)(a1 + 32);
  if (a4 > v17)
    return result;
  if (!a4)
  {
    v19 = 0;
LABEL_14:
    if (a6 >= v19)
      v20 = v19;
    else
      v20 = a6;
    if (!v20)
    {
      if ((_DWORD)v17)
        return 1701671028;
      else
        return 1852793972;
    }
    if (a6)
    {
      v31 = a2;
      v21 = 0;
      v22 = 1;
      do
      {
        IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(a5 + 40 * v21));
        *(_DWORD *)(a7 + 4 * v21) = 0;
        v21 = v22;
      }
      while (a6 > v22++);
      v15 = *(unsigned __int8 *)(a1 + 488);
      a2 = v31;
    }
    v45 = 0;
    if (v15)
    {
      v24 = *(_OWORD *)(a2 + 16);
      v39 = *(_OWORD *)a2;
      v40 = v24;
      v32 = a1;
      v33 = a5;
      v34 = a6;
      v35 = a3;
      v36 = a4;
      v37 = a7;
      v38 = a6;
      v41 = *(_DWORD *)(a2 + 32);
      v42 = a9;
      v43 = v20;
      v44 = &v45;
      v25 = *(float ***)(a1 + 264);
      v48[0] = &off_24CA2CEF0;
      v48[1] = &v32;
      v49 = v48;
      IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights((IR::IRData::Implementation *)a1, a2, 0, v25, a9, (uint64_t)v48, 1.0);
      v26 = v49;
      if (v49 == v48)
      {
        v27 = 4;
        v26 = v48;
      }
      else
      {
        if (!v49)
          return v45;
        v27 = 5;
      }
      (*(void (**)(void))(*v26 + 8 * v27))();
      return v45;
    }
    v32 = a5;
    v33 = a6;
    v34 = a7;
    v35 = a6;
    v36 = a3;
    v37 = a4;
    LODWORD(v38) = v20;
    v28 = *(float ***)(a1 + 264);
    v46[0] = &off_24CA2CF38;
    v46[1] = &v32;
    v47 = v46;
    IR::IRData::Implementation::getNearbyNodesAndInterpolationWeights((IR::IRData::Implementation *)a1, a2, 0, v28, a9, (uint64_t)v46, 1.0);
    v29 = v47;
    if (v47 == v46)
    {
      v30 = 4;
      v29 = v46;
    }
    else
    {
      if (!v47)
        return 0;
      v30 = 5;
    }
    (*(void (**)(void))(*v29 + 8 * v30))();
    return 0;
  }
  v18 = 0;
  while (*(_DWORD *)(a3 + 4 * v18) < v17)
  {
    if (++v18 >= a4)
    {
      v19 = a4;
      goto LABEL_14;
    }
  }
  return result;
}

void sub_2105901FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char *a28)
{
  char *v28;
  char *v30;
  uint64_t v31;

  v30 = a28;
  if (a28 == v28)
  {
    v31 = 4;
    v30 = &a25;
  }
  else
  {
    if (!a28)
      goto LABEL_6;
    v31 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v30 + 8 * v31))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRData::Implementation::getInterpolatedCoeffs(unint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  return IR::IRData::Implementation::getInterpolatedCoeffs(a1, a2, *(_QWORD *)(a1 + 40), (uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 2, a3, a4, a5, a6, a7);
}

uint64_t std::function<void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v5;
  float v7;
  float v8;

  v8 = a4;
  v7 = a5;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, float *, float *))(*(_QWORD *)v5 + 48))(v5, a2, a3, &v8, &v7);
}

uint64_t IR::IRData::getInterpolatedCoeffs(unint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unsigned int a6)
{
  return IR::IRData::Implementation::getInterpolatedCoeffs(*a1, a2, *a3, (uint64_t)(a3[1] - *a3) >> 2, *a4, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a4[1] - *a4) >> 3), *a5, (uint64_t)(a5[1] - *a5) >> 2, a6);
}

uint64_t IR::IRData::getInterpolatedCoeffs(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, unsigned int a9)
{
  return IR::IRData::Implementation::getInterpolatedCoeffs(*a1, a2, a3, a4, a5, a6, a7, a8, a9);
}

uint64_t IR::IRData::getInterpolatedCoeffs(unint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unsigned int a5)
{
  return IR::IRData::Implementation::getInterpolatedCoeffs(*a1, a2, *(_QWORD *)(*a1 + 40), (uint64_t)(*(_QWORD *)(*a1 + 48) - *(_QWORD *)(*a1 + 40)) >> 2, *a3, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a3[1] - *a3) >> 3), *a4, (uint64_t)(a4[1] - *a4) >> 2, a5);
}

uint64_t IR::IRData::getInterpolatedCoeffs(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, uint64_t a6, unsigned int a7)
{
  return IR::IRData::Implementation::getInterpolatedCoeffs(*a1, a2, *(_QWORD *)(*a1 + 40), (uint64_t)(*(_QWORD *)(*a1 + 48) - *(_QWORD *)(*a1 + 40)) >> 2, a3, a4, a5, a6, a7);
}

uint64_t IR::IRData::getInterpolatedCoeffs(unint64_t *a1, uint64_t a2, int a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6;
  int v8;

  v6 = *a1;
  v8 = a3;
  return IR::IRData::Implementation::getInterpolatedCoeffs(v6, a2, (unint64_t)&v8, 1uLL, a4, 1uLL, a5, 1, a6);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs(unint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unint64_t *a5, unsigned int a6)
{
  return IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(*a1, a2, *a3, (uint64_t)(a3[1] - *a3) >> 2, *a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a4[1] - *a4) >> 3), *a5, (uint64_t)(a5[1] - *a5) >> 2, a6);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs(unint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t *a4, unsigned int a5)
{
  return IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(*a1, a2, *(_QWORD *)(*a1 + 40), (uint64_t)(*(_QWORD *)(*a1 + 48) - *(_QWORD *)(*a1 + 40)) >> 2, *a3, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3), *a4, (uint64_t)(a4[1] - *a4) >> 2, a5);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs(unint64_t *a1, uint64_t a2, int a3, _QWORD *a4, unint64_t a5, unsigned int a6)
{
  unint64_t v6;
  uint64_t v7;
  int v9;
  _QWORD v10[2];

  v6 = *a1;
  v7 = (uint64_t)(a4[1] - *a4) >> 2;
  v10[0] = *a4;
  v10[1] = v7;
  v9 = a3;
  return IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(v6, a2, (unint64_t)&v9, 1uLL, (unint64_t)v10, 1uLL, a5, 1, a6);
}

uint64_t IR::IRData::getInterpolatedTimeDomainCoeffs(unint64_t *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6, unsigned int a7)
{
  unint64_t v7;
  int v9;
  _QWORD v10[2];

  v7 = *a1;
  v10[0] = a4;
  v10[1] = a5;
  v9 = a3;
  return IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(v7, a2, (unint64_t)&v9, 1uLL, (unint64_t)v10, 1uLL, a6, 1, a7);
}

BOOL IR::IRData::canInterpolateInDimension(uint64_t a1, int a2)
{
  _DWORD *v2;
  _DWORD *v3;

  v2 = *(_DWORD **)(*(_QWORD *)a1 + 152);
  v3 = *(_DWORD **)(*(_QWORD *)a1 + 160);
  if (v2 != v3)
  {
    while (*v2 != a2)
    {
      if (++v2 == v3)
      {
        v2 = *(_DWORD **)(*(_QWORD *)a1 + 160);
        return v2 != v3;
      }
    }
  }
  return v2 != v3;
}

void std::__function::__func<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_0>,std::allocator<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_0>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_0>,std::allocator<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_0>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2CEF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_0>,std::allocator<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_0>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24CA2CEF0;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_0>,std::allocator<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_0>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::operator()(uint64_t result, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  uint64_t *v11;
  __int128 v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  float v22;
  float v23;
  _QWORD *v24;
  VBAP ***v25;
  _QWORD *v26;
  __int128 v27;
  unsigned int v28;
  uint64_t v29;
  unint64_t v30;
  VBAP **v31;
  int v32;
  uint64_t v33;
  VBAP *v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  float v38;
  _OWORD v39[2];
  int v40;
  _OWORD v41[2];
  int v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  int v49;
  int v50;
  int v51;

  v7 = *(_QWORD *)(result + 8);
  v8 = *a4;
  v9 = *a5;
  v10 = *(_QWORD *)v7;
  if (*a4 != 0.0)
  {
    v11 = (uint64_t *)(a2 + 32);
    if (*(_QWORD *)(a2 + 32))
    {
      v12 = *(_OWORD *)(v7 + 72);
      v41[0] = *(_OWORD *)(v7 + 56);
      v41[1] = v12;
      v13 = *(_DWORD *)(v7 + 92);
      v42 = *(_DWORD *)(v7 + 88);
      result = IR::IRData::Implementation::getTriangleIndicesAndCoordinates(v10, (uint64_t)v41, v13, &v49, (uint64_t)&v46, (uint64_t)&v43, *(_DWORD *)(v10 + 492), (VBAP ***)(a2 + 32));
      **(_DWORD **)(v7 + 104) = result;
      if ((_DWORD)result)
        return result;
      if (*(_DWORD *)(v7 + 96))
      {
        v14 = 0;
        v15 = 0;
        v16 = *v11;
        v17 = v49;
        v18 = *(_QWORD *)(v7 + 24);
        do
        {
          IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)(v7 + 8) + v14), *(const IR::FFTFilterKernel **)(*(_QWORD *)(*(_QWORD *)(v16 + 88) + 24 * v17)+ 8 * *(unsigned int *)(v18 + 4 * v15)), v8 * v46);
          IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)(v7 + 8) + v14), *(const IR::FFTFilterKernel **)(*(_QWORD *)(*(_QWORD *)(*v11 + 88) + 24 * v50)+ 8 * *(unsigned int *)(*(_QWORD *)(v7 + 24) + 4 * v15)), v8 * v47);
          result = IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)(v7 + 8) + v14), *(const IR::FFTFilterKernel **)(*(_QWORD *)(*(_QWORD *)(*v11 + 88) + 24 * v51)+ 8 * *(unsigned int *)(*(_QWORD *)(v7 + 24) + 4 * v15)), v8 * v48);
          v16 = *v11;
          v17 = v49;
          v19 = *(_QWORD *)(*v11 + 112);
          v18 = *(_QWORD *)(v7 + 24);
          v20 = *(unsigned int *)(v18 + 4 * v15);
          v21 = *(_QWORD *)(v7 + 40);
          v22 = *(float *)(v21 + 4 * v15)
              + (float)((float)(v8 * v43) * *(float *)(*(_QWORD *)(v19 + 24 * v49) + 4 * v20));
          *(float *)(v21 + 4 * v15) = v22;
          v23 = v22 + (float)((float)(v8 * v44) * *(float *)(*(_QWORD *)(v19 + 24 * v50) + 4 * v20));
          *(float *)(v21 + 4 * v15) = v23;
          *(float *)(v21 + 4 * v15++) = v23
                                      + (float)((float)(v8 * v45) * *(float *)(*(_QWORD *)(v19 + 24 * v51) + 4 * v20));
          v14 += 40;
        }
        while (v15 < *(unsigned int *)(v7 + 96));
      }
    }
  }
  if (v9 != 0.0)
  {
    v26 = *(_QWORD **)(a3 + 32);
    v25 = (VBAP ***)(a3 + 32);
    v24 = v26;
    if (v26)
    {
      if (*v24 == **(_QWORD **)(a2 + 32)
        || (v27 = *(_OWORD *)(v7 + 72),
            v39[0] = *(_OWORD *)(v7 + 56),
            v39[1] = v27,
            v28 = *(_DWORD *)(v7 + 92),
            v40 = *(_DWORD *)(v7 + 88),
            result = IR::IRData::Implementation::getTriangleIndicesAndCoordinates(v10, (uint64_t)v39, v28, &v49, (uint64_t)&v46, (uint64_t)&v43, *(_DWORD *)(v10 + 492), v25), (**(_DWORD **)(v7 + 104) = result) == 0))
      {
        if (*(_DWORD *)(v7 + 96))
        {
          v29 = 0;
          v30 = 0;
          v31 = *v25;
          v32 = v49;
          v33 = *(_QWORD *)(v7 + 24);
          do
          {
            IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)(v7 + 8) + v29), *(const IR::FFTFilterKernel **)(*((_QWORD *)v31[11] + 3 * v32) + 8 * *(unsigned int *)(v33 + 4 * v30)), v9 * v46);
            IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)(v7 + 8) + v29), *(const IR::FFTFilterKernel **)(*((_QWORD *)(*v25)[11] + 3 * v50)+ 8 * *(unsigned int *)(*(_QWORD *)(v7 + 24) + 4 * v30)), v9 * v47);
            result = IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)(v7 + 8) + v29), *(const IR::FFTFilterKernel **)(*((_QWORD *)(*v25)[11] + 3 * v51)+ 8 * *(unsigned int *)(*(_QWORD *)(v7 + 24) + 4 * v30)), v9 * v48);
            v31 = *v25;
            v32 = v49;
            v34 = (*v25)[14];
            v33 = *(_QWORD *)(v7 + 24);
            v35 = *(unsigned int *)(v33 + 4 * v30);
            v36 = *(_QWORD *)(v7 + 40);
            v37 = *(float *)(v36 + 4 * v30)
                + (float)((float)(v9 * v43) * *(float *)(*((_QWORD *)v34 + 3 * v49) + 4 * v35));
            *(float *)(v36 + 4 * v30) = v37;
            v38 = v37 + (float)((float)(v9 * v44) * *(float *)(*((_QWORD *)v34 + 3 * v50) + 4 * v35));
            *(float *)(v36 + 4 * v30) = v38;
            *(float *)(v36 + 4 * v30++) = v38
                                        + (float)((float)(v9 * v45) * *(float *)(*((_QWORD *)v34 + 3 * v51) + 4 * v35));
            v29 += 40;
          }
          while (v30 < *(unsigned int *)(v7 + 96));
        }
      }
    }
  }
  return result;
}

void std::__function::__func<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_1>,std::allocator<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_1>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_1>,std::allocator<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_1>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2CF38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_1>,std::allocator<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_1>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24CA2CF38;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

uint64_t std::__function::__func<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_1>,std::allocator<std::reference_wrapper<IR::IRData::Implementation::getInterpolatedCoeffs(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<IR::FFTFilterKernel,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::$_1>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::operator()(uint64_t result, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  uint64_t v5;
  uint64_t v8;
  unint64_t v9;
  float v10;
  float v11;

  v5 = *(_QWORD *)(result + 8);
  if (*(_DWORD *)(v5 + 48))
  {
    v8 = 0;
    v9 = 0;
    v10 = *a4;
    v11 = *a5;
    do
    {
      if (v10 != 0.0)
      {
        result = IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)v5 + v8), *(const IR::FFTFilterKernel **)(*(_QWORD *)(a2 + 8)+ 8 * *(unsigned int *)(*(_QWORD *)(v5 + 32) + 4 * v9)), v10);
        *(float *)(*(_QWORD *)(v5 + 16) + 4 * v9) = *(float *)(*(_QWORD *)(v5 + 16) + 4 * v9)
                                                  + (float)(*(float *)(*(_QWORD *)(a2 + 48)
                                                                     + 4
                                                                     * *(unsigned int *)(*(_QWORD *)(v5 + 32) + 4 * v9))
                                                          * v10);
      }
      if (v11 != 0.0)
      {
        result = IR::FFTFilterKernel::accumulate((IR::FFTFilterKernel *)(*(_QWORD *)v5 + v8), *(const IR::FFTFilterKernel **)(*(_QWORD *)(a3 + 8)+ 8 * *(unsigned int *)(*(_QWORD *)(v5 + 32) + 4 * v9)), v11);
        *(float *)(*(_QWORD *)(v5 + 16) + 4 * v9) = *(float *)(*(_QWORD *)(v5 + 16) + 4 * v9)
                                                  + (float)(*(float *)(*(_QWORD *)(a3 + 48)
                                                                     + 4
                                                                     * *(unsigned int *)(*(_QWORD *)(v5 + 32) + 4 * v9))
                                                          * v11);
      }
      ++v9;
      v8 += 40;
    }
    while (v9 < *(unsigned int *)(v5 + 48));
  }
  return result;
}

void std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2CF80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24CA2CF80;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)const::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}::operator()(*(_QWORD *)(a1 + 8), a2, a3, *a4, *a5);
}

void IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)const::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v9;
  uint64_t *v10;
  __int128 v12;
  int TriangleIndicesAndCoordinates;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  float *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  vDSP_Length v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float v28;
  float v29;
  _QWORD *v30;
  VBAP ***v31;
  _QWORD *v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  VBAP **v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  vDSP_Length v45;
  VBAP *v46;
  uint64_t v47;
  uint64_t v48;
  float v49;
  float v50;
  _OWORD v51[2];
  int v52;
  float __B;
  _OWORD v54[2];
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  int v62;
  int v63;
  int v64;

  v9 = *(_QWORD *)a1;
  if (a4 != 0.0)
  {
    v10 = (uint64_t *)(a2 + 32);
    if (*(_QWORD *)(a2 + 32))
    {
      v12 = *(_OWORD *)(a1 + 76);
      v54[0] = *(_OWORD *)(a1 + 60);
      v54[1] = v12;
      v55 = *(_DWORD *)(a1 + 92);
      TriangleIndicesAndCoordinates = IR::IRData::Implementation::getTriangleIndicesAndCoordinates(v9, (uint64_t)v54, *(_DWORD *)(a1 + 56), &v62, (uint64_t)&v59, (uint64_t)&v56, *(_DWORD *)(v9 + 492), (VBAP ***)(a2 + 32));
      **(_DWORD **)(a1 + 104) = TriangleIndicesAndCoordinates;
      if (TriangleIndicesAndCoordinates)
        return;
      if (*(_DWORD *)(a1 + 96))
      {
        v14 = 0;
        v15 = 0;
        v16 = *v10;
        v17 = v62;
        v18 = *(_QWORD *)(a1 + 40);
        do
        {
          v19 = *(_QWORD *)(a1 + 8) + v14;
          v20 = *(float **)v19;
          v21 = (*(_QWORD *)(v19 + 8) - *(_QWORD *)v19) >> 2;
          v22 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24 * v17);
          v23 = (*(_QWORD *)(*(_QWORD *)(v22 + 8 * *(unsigned int *)(v18 + 4 * v15)) + 8)
               - **(_QWORD **)(v22 + 8 * *(unsigned int *)(v18 + 4 * v15))) >> 2;
          if (v23 >= v21)
            v24 = v21;
          else
            v24 = v23;
          __B = v59 * a4;
          vDSP_vsma(**(const float ***)(v22 + 8 * *(unsigned int *)(v18 + 4 * v15)), 1, &__B, v20, 1, v20, 1, v24);
          __B = v60 * a4;
          vDSP_vsma(**(const float ***)(*(_QWORD *)(*(_QWORD *)(*v10 + 88) + 24 * v63)+ 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v15)), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 8) + v14), 1, *(float **)(*(_QWORD *)(a1 + 8) + v14), 1, v24);
          __B = v61 * a4;
          vDSP_vsma(**(const float ***)(*(_QWORD *)(*(_QWORD *)(*v10 + 88) + 24 * v64)+ 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v15)), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 8) + v14), 1, *(float **)(*(_QWORD *)(a1 + 8) + v14), 1, v24);
          v16 = *v10;
          v17 = v62;
          v25 = *(_QWORD *)(*v10 + 112);
          v18 = *(_QWORD *)(a1 + 40);
          v26 = *(unsigned int *)(v18 + 4 * v15);
          v27 = *(_QWORD *)(a1 + 24);
          v28 = *(float *)(v27 + 4 * v15)
              + (float)((float)(*(float *)(*(_QWORD *)(v25 + 24 * v62) + 4 * v26) * v56) * a4);
          *(float *)(v27 + 4 * v15) = v28;
          v29 = v28 + (float)((float)(*(float *)(*(_QWORD *)(v25 + 24 * v63) + 4 * v26) * v57) * a4);
          *(float *)(v27 + 4 * v15) = v29;
          *(float *)(v27 + 4 * v15++) = v29
                                      + (float)((float)(*(float *)(*(_QWORD *)(v25 + 24 * v64) + 4 * v26) * v58) * a4);
          v14 += 24;
        }
        while (v15 < *(unsigned int *)(a1 + 96));
      }
    }
  }
  if (a5 != 0.0)
  {
    v32 = *(_QWORD **)(a3 + 32);
    v31 = (VBAP ***)(a3 + 32);
    v30 = v32;
    if (v32)
    {
      if (*v30 == **(_QWORD **)(a2 + 32)
        || (v33 = *(_OWORD *)(a1 + 76),
            v51[0] = *(_OWORD *)(a1 + 60),
            v51[1] = v33,
            v52 = *(_DWORD *)(a1 + 92),
            v34 = IR::IRData::Implementation::getTriangleIndicesAndCoordinates(v9, (uint64_t)v51, *(_DWORD *)(a1 + 56), &v62, (uint64_t)&v59, (uint64_t)&v56, *(_DWORD *)(v9 + 492), v31), (**(_DWORD **)(a1 + 104) = v34) == 0))
      {
        if (*(_DWORD *)(a1 + 96))
        {
          v35 = 0;
          v36 = 0;
          v37 = *v31;
          v38 = v62;
          v39 = *(_QWORD *)(a1 + 40);
          do
          {
            v40 = *(_QWORD *)(a1 + 8) + v35;
            v41 = *(float **)v40;
            v42 = (*(_QWORD *)(v40 + 8) - *(_QWORD *)v40) >> 2;
            v43 = *((_QWORD *)v37[11] + 3 * v38);
            v44 = (*(_QWORD *)(*(_QWORD *)(v43 + 8 * *(unsigned int *)(v39 + 4 * v36)) + 8)
                 - **(_QWORD **)(v43 + 8 * *(unsigned int *)(v39 + 4 * v36))) >> 2;
            if (v44 >= v42)
              v45 = v42;
            else
              v45 = v44;
            __B = v59 * a5;
            vDSP_vsma(**(const float ***)(v43 + 8 * *(unsigned int *)(v39 + 4 * v36)), 1, &__B, v41, 1, v41, 1, v45);
            __B = v60 * a5;
            vDSP_vsma(**(const float ***)(*((_QWORD *)(*v31)[11] + 3 * v63)+ 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v36)), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 8) + v35), 1, *(float **)(*(_QWORD *)(a1 + 8) + v35), 1, v45);
            __B = v61 * a5;
            vDSP_vsma(**(const float ***)(*((_QWORD *)(*v31)[11] + 3 * v64)+ 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v36)), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 8) + v35), 1, *(float **)(*(_QWORD *)(a1 + 8) + v35), 1, v45);
            v37 = *v31;
            v38 = v62;
            v46 = (*v31)[14];
            v39 = *(_QWORD *)(a1 + 40);
            v47 = *(unsigned int *)(v39 + 4 * v36);
            v48 = *(_QWORD *)(a1 + 24);
            v49 = *(float *)(v48 + 4 * v36)
                + (float)((float)(*(float *)(*((_QWORD *)v46 + 3 * v62) + 4 * v47) * v56) * a5);
            *(float *)(v48 + 4 * v36) = v49;
            v50 = v49 + (float)((float)(*(float *)(*((_QWORD *)v46 + 3 * v63) + 4 * v47) * v57) * a5);
            *(float *)(v48 + 4 * v36) = v50;
            *(float *)(v48 + 4 * v36++) = v50
                                        + (float)((float)(*(float *)(*((_QWORD *)v46 + 3 * v64) + 4 * v47) * v58) * a5);
            v35 += 24;
          }
          while (v36 < *(unsigned int *)(a1 + 96));
        }
      }
    }
  }
}

void std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2CFC8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24CA2CFC8;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)const::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}::operator()(*(_QWORD *)(a1 + 8), a2, a3, *a4, *a5);
}

void IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::vector<float>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)const::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  float *v11;
  uint64_t v12;
  uint64_t v13;
  const float *v14;
  uint64_t v15;
  vDSP_Length v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  const float *v21;
  uint64_t v22;
  vDSP_Length v23;
  float v24;
  float __B;

  v24 = a5;
  __B = a4;
  if (*(_DWORD *)(a1 + 48))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (__B != 0.0)
      {
        v10 = *(_QWORD *)a1 + v8;
        v11 = *(float **)v10;
        v12 = (*(_QWORD *)(v10 + 8) - *(_QWORD *)v10) >> 2;
        v13 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v9));
        v14 = *(const float **)v13;
        v15 = (*(_QWORD *)(v13 + 8) - *(_QWORD *)v13) >> 2;
        if (v15 >= v12)
          v16 = v12;
        else
          v16 = v15;
        vDSP_vsma(v14, 1, &__B, v11, 1, v11, 1, v16);
        *(float *)(*(_QWORD *)(a1 + 16) + 4 * v9) = *(float *)(*(_QWORD *)(a1 + 16) + 4 * v9)
                                                  + (float)(*(float *)(*(_QWORD *)(a2 + 48)
                                                                     + 4
                                                                     * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v9))
                                                          * __B);
      }
      if (v24 != 0.0)
      {
        v17 = *(_QWORD *)a1 + v8;
        v18 = *(float **)v17;
        v19 = (*(_QWORD *)(v17 + 8) - *(_QWORD *)v17) >> 2;
        v20 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v9));
        v21 = *(const float **)v20;
        v22 = (*(_QWORD *)(v20 + 8) - *(_QWORD *)v20) >> 2;
        if (v22 >= v19)
          v23 = v19;
        else
          v23 = v22;
        vDSP_vsma(v21, 1, &v24, v18, 1, v18, 1, v23);
        *(float *)(*(_QWORD *)(a1 + 16) + 4 * v9) = *(float *)(*(_QWORD *)(a1 + 16) + 4 * v9)
                                                  + (float)(*(float *)(*(_QWORD *)(a3 + 48)
                                                                     + 4
                                                                     * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v9))
                                                          * v24);
      }
      ++v9;
      v8 += 24;
    }
    while (v9 < *(unsigned int *)(a1 + 48));
  }
}

void std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2D010;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24CA2D010;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)const::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}::operator()(*(_QWORD *)(a1 + 8), a2, a3, *a4, *a5);
}

void IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)const::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#1}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v9;
  uint64_t *v10;
  __int128 v12;
  int TriangleIndicesAndCoordinates;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  vDSP_Length v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  float v28;
  _QWORD *v29;
  VBAP ***v30;
  _QWORD *v31;
  __int128 v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  VBAP **v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t v42;
  vDSP_Length v43;
  VBAP *v44;
  uint64_t v45;
  uint64_t v46;
  float v47;
  float v48;
  _OWORD v49[2];
  int v50;
  float __B;
  _OWORD v52[2];
  int v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  int v60;
  int v61;
  int v62;

  v9 = *(_QWORD *)a1;
  if (a4 != 0.0)
  {
    v10 = (uint64_t *)(a2 + 32);
    if (*(_QWORD *)(a2 + 32))
    {
      v12 = *(_OWORD *)(a1 + 76);
      v52[0] = *(_OWORD *)(a1 + 60);
      v52[1] = v12;
      v53 = *(_DWORD *)(a1 + 92);
      TriangleIndicesAndCoordinates = IR::IRData::Implementation::getTriangleIndicesAndCoordinates(v9, (uint64_t)v52, *(_DWORD *)(a1 + 56), &v60, (uint64_t)&v57, (uint64_t)&v54, *(_DWORD *)(v9 + 492), (VBAP ***)(a2 + 32));
      **(_DWORD **)(a1 + 104) = TriangleIndicesAndCoordinates;
      if (TriangleIndicesAndCoordinates)
        return;
      if (*(_DWORD *)(a1 + 96))
      {
        v14 = 0;
        v15 = 0;
        v16 = *v10;
        v17 = v60;
        v18 = *(_QWORD *)(a1 + 40);
        do
        {
          v19 = *(_QWORD *)(a1 + 8) + v14;
          v20 = *(_QWORD *)(*(_QWORD *)(v16 + 88) + 24 * v17);
          v21 = *(_DWORD *)(v19 + 8);
          v22 = (*(_QWORD *)(*(_QWORD *)(v20 + 8 * *(unsigned int *)(v18 + 4 * v15)) + 8)
               - **(_QWORD **)(v20 + 8 * *(unsigned int *)(v18 + 4 * v15))) >> 2;
          if (v22 >= v21)
            v23 = v21;
          else
            v23 = v22;
          __B = v57 * a4;
          vDSP_vsma(**(const float ***)(v20 + 8 * *(unsigned int *)(v18 + 4 * v15)), 1, &__B, *(const float **)v19, 1, *(float **)v19, 1, v23);
          __B = v58 * a4;
          vDSP_vsma(**(const float ***)(*(_QWORD *)(*(_QWORD *)(*v10 + 88) + 24 * v61)+ 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v15)), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 8) + v14), 1, *(float **)(*(_QWORD *)(a1 + 8) + v14), 1, v23);
          __B = v59 * a4;
          vDSP_vsma(**(const float ***)(*(_QWORD *)(*(_QWORD *)(*v10 + 88) + 24 * v62)+ 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v15)), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 8) + v14), 1, *(float **)(*(_QWORD *)(a1 + 8) + v14), 1, v23);
          v16 = *v10;
          v17 = v60;
          v24 = *(_QWORD *)(*v10 + 112);
          v18 = *(_QWORD *)(a1 + 40);
          v25 = *(unsigned int *)(v18 + 4 * v15);
          v26 = *(_QWORD *)(a1 + 24);
          v27 = *(float *)(v26 + 4 * v15)
              + (float)((float)(*(float *)(*(_QWORD *)(v24 + 24 * v60) + 4 * v25) * v54) * a4);
          *(float *)(v26 + 4 * v15) = v27;
          v28 = v27 + (float)((float)(*(float *)(*(_QWORD *)(v24 + 24 * v61) + 4 * v25) * v55) * a4);
          *(float *)(v26 + 4 * v15) = v28;
          *(float *)(v26 + 4 * v15++) = v28
                                      + (float)((float)(*(float *)(*(_QWORD *)(v24 + 24 * v62) + 4 * v25) * v56) * a4);
          v14 += 16;
        }
        while (v15 < *(unsigned int *)(a1 + 96));
      }
    }
  }
  if (a5 != 0.0)
  {
    v31 = *(_QWORD **)(a3 + 32);
    v30 = (VBAP ***)(a3 + 32);
    v29 = v31;
    if (v31)
    {
      if (*v29 == **(_QWORD **)(a2 + 32)
        || (v32 = *(_OWORD *)(a1 + 76),
            v49[0] = *(_OWORD *)(a1 + 60),
            v49[1] = v32,
            v50 = *(_DWORD *)(a1 + 92),
            v33 = IR::IRData::Implementation::getTriangleIndicesAndCoordinates(v9, (uint64_t)v49, *(_DWORD *)(a1 + 56), &v60, (uint64_t)&v57, (uint64_t)&v54, *(_DWORD *)(v9 + 492), v30), (**(_DWORD **)(a1 + 104) = v33) == 0))
      {
        if (*(_DWORD *)(a1 + 96))
        {
          v34 = 0;
          v35 = 0;
          v36 = *v30;
          v37 = v60;
          v38 = *(_QWORD *)(a1 + 40);
          do
          {
            v39 = *(_QWORD *)(a1 + 8) + v34;
            v40 = *((_QWORD *)v36[11] + 3 * v37);
            v41 = *(_DWORD *)(v39 + 8);
            v42 = (*(_QWORD *)(*(_QWORD *)(v40 + 8 * *(unsigned int *)(v38 + 4 * v35)) + 8)
                 - **(_QWORD **)(v40 + 8 * *(unsigned int *)(v38 + 4 * v35))) >> 2;
            if (v42 >= v41)
              v43 = v41;
            else
              v43 = v42;
            __B = v57 * a5;
            vDSP_vsma(**(const float ***)(v40 + 8 * *(unsigned int *)(v38 + 4 * v35)), 1, &__B, *(const float **)v39, 1, *(float **)v39, 1, v43);
            __B = v58 * a5;
            vDSP_vsma(**(const float ***)(*((_QWORD *)(*v30)[11] + 3 * v61)+ 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v35)), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 8) + v34), 1, *(float **)(*(_QWORD *)(a1 + 8) + v34), 1, v43);
            __B = v59 * a5;
            vDSP_vsma(**(const float ***)(*((_QWORD *)(*v30)[11] + 3 * v62)+ 8 * *(unsigned int *)(*(_QWORD *)(a1 + 40) + 4 * v35)), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 8) + v34), 1, *(float **)(*(_QWORD *)(a1 + 8) + v34), 1, v43);
            v36 = *v30;
            v37 = v60;
            v44 = (*v30)[14];
            v38 = *(_QWORD *)(a1 + 40);
            v45 = *(unsigned int *)(v38 + 4 * v35);
            v46 = *(_QWORD *)(a1 + 24);
            v47 = *(float *)(v46 + 4 * v35)
                + (float)((float)(*(float *)(*((_QWORD *)v44 + 3 * v60) + 4 * v45) * v54) * a5);
            *(float *)(v46 + 4 * v35) = v47;
            v48 = v47 + (float)((float)(*(float *)(*((_QWORD *)v44 + 3 * v61) + 4 * v45) * v55) * a5);
            *(float *)(v46 + 4 * v35) = v48;
            *(float *)(v46 + 4 * v35++) = v48
                                        + (float)((float)(*(float *)(*((_QWORD *)v44 + 3 * v62) + 4 * v45) * v56) * a5);
            v34 += 16;
          }
          while (v35 < *(unsigned int *)(a1 + 96));
        }
      }
    }
  }
}

void std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2D058;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::__clone(uint64_t result, _QWORD *a2)
{
  *a2 = &off_24CA2D058;
  a2[1] = *(_QWORD *)(result + 8);
  return result;
}

void std::__function::__func<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>,std::allocator<std::reference_wrapper<int IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}>>,void ()(IR::IRDataNode const&,IR::IRDataNode const&,float,float)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, float *a5)
{
  IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)const::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}::operator()(*(_QWORD *)(a1 + 8), a2, a3, *a4, *a5);
}

void IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::span<float,18446744073709551615ul>>(IR::IRCoordinates const&,std::span<unsigned int const,18446744073709551615ul>,std::span<std::span<float,18446744073709551615ul>,18446744073709551615ul>,std::span<float,18446744073709551615ul>,IR::IRInterpolationMethod)const::{lambda(IR::IRDataNode const&,IR::IRDataNode const&,float,float)#2}::operator()(uint64_t a1, uint64_t a2, uint64_t a3, float a4, float a5)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  const float *v13;
  uint64_t v14;
  vDSP_Length v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  const float *v19;
  uint64_t v20;
  vDSP_Length v21;
  float v22;
  float __B;

  v22 = a5;
  __B = a4;
  if (*(_DWORD *)(a1 + 48))
  {
    v8 = 0;
    v9 = 0;
    do
    {
      if (__B != 0.0)
      {
        v10 = *(_QWORD *)a1 + v8;
        v11 = *(_DWORD *)(v10 + 8);
        v12 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v9));
        v13 = *(const float **)v12;
        v14 = (*(_QWORD *)(v12 + 8) - *(_QWORD *)v12) >> 2;
        if (v14 >= v11)
          v15 = v11;
        else
          v15 = v14;
        vDSP_vsma(v13, 1, &__B, *(const float **)v10, 1, *(float **)v10, 1, v15);
        *(float *)(*(_QWORD *)(a1 + 16) + 4 * v9) = *(float *)(*(_QWORD *)(a1 + 16) + 4 * v9)
                                                  + (float)(*(float *)(*(_QWORD *)(a2 + 48)
                                                                     + 4
                                                                     * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v9))
                                                          * __B);
      }
      if (v22 != 0.0)
      {
        v16 = *(_QWORD *)a1 + v8;
        v17 = *(_DWORD *)(v16 + 8);
        v18 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8 * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v9));
        v19 = *(const float **)v18;
        v20 = (*(_QWORD *)(v18 + 8) - *(_QWORD *)v18) >> 2;
        if (v20 >= v17)
          v21 = v17;
        else
          v21 = v20;
        vDSP_vsma(v19, 1, &v22, *(const float **)v16, 1, *(float **)v16, 1, v21);
        *(float *)(*(_QWORD *)(a1 + 16) + 4 * v9) = *(float *)(*(_QWORD *)(a1 + 16) + 4 * v9)
                                                  + (float)(*(float *)(*(_QWORD *)(a3 + 48)
                                                                     + 4
                                                                     * *(unsigned int *)(*(_QWORD *)(a1 + 32) + 4 * v9))
                                                          * v22);
      }
      ++v9;
      v8 += 16;
    }
    while (v9 < *(unsigned int *)(a1 + 48));
  }
}

void sub_210591A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13, int a14, IR::IRData::Implementation *a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  uint64_t v23;

  IR::IRData::~IRData(&a15);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a20);
  applesauce::CF::URLRef::~URLRef((const void **)(v23 - 48));
  applesauce::CF::DataRef::~DataRef((const void **)(v23 - 40));

  _Unwind_Resume(a1);
}

void applesauce::CF::DataRef::from_ns_noexcept(applesauce::CF::DataRef *this@<X0>, applesauce::CF::DataRef **a2@<X8>)
{
  applesauce::CF::DataRef *v4;
  CFTypeID v5;
  BOOL v6;
  applesauce::CF::DataRef *cf;

  v4 = this;
  if (!v4 || (cf = v4, CFRetain(v4), v5 = CFGetTypeID(cf), v6 = v5 == CFDataGetTypeID(), v4 = cf, v6))
  {
    *a2 = v4;
  }
  else
  {
    *a2 = 0;
    CFRelease(cf);
    v4 = cf;
  }

}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, char *a2, const __CFURL *a3)
{
  void **v5;
  CFIndex v6;
  CFURLRef v7;
  void *exception;
  void *__p[2];
  unsigned __int8 v11;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v11 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v6 = v11;
  else
    v6 = (CFIndex)__p[1];
  v7 = CFURLCreateWithBytes(0, (const UInt8 *)v5, v6, 0, a3);
  *(_QWORD *)this = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  if ((char)v11 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_210591C1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRDataAttributes::IRDataAttributes(uint64_t a1, CFTypeRef *a2, int a3, char a4, int a5, float a6)
{
  CFTypeRef v11;
  CFTypeRef cf;

  v11 = *a2;
  if (*a2)
    CFRetain(*a2);
  cf = v11;
  IR::IRDataAttributes::IRDataAttributes(a1, (CFURLRef *)&cf, a3, a4, 0, 0, a5, a6);
  if (cf)
    CFRelease(cf);
  return a1;
}

void sub_210591CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

os_log_t ___ZN2IR28getHOA2BinauralIRRendererLogEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "HOA2BinauralIRRenderer");
  IR::getHOA2BinauralIRRendererLog(void)::gLog = (uint64_t)result;
  return result;
}

HOA *std::unique_ptr<HOA>::reset[abi:ne180100](HOA **a1, HOA *a2)
{
  HOA *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    HOA::~HOA(result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

uint64_t IR::HOA2BinauralIRRenderer::setEnvironment(IR::HOA2BinauralIRRenderer *this, unsigned int a2, int a3, unsigned int a4)
{
  uint64_t v4;
  float v8;
  char *v9;
  IR::IRDataLoader::Implementation **v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int FilterLength;
  unsigned int v29;
  unint64_t v30;
  void **v31;
  uint64_t PeriodForCyclicalDimensions;
  uint64_t InterpolationMethod;
  int **DataLayout;
  int *v35;
  int *v36;
  int v37;
  int v38;
  _DWORD *v39;
  _DWORD *v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  _DWORD *v52;
  unint64_t v53;
  char *v54;
  _DWORD *v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  _DWORD *v63;
  unint64_t v64;
  char *v65;
  _DWORD *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char *v72;
  int v73;
  void *v74;
  float *v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  int v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  IR::IRDataLoader *v85;
  IR::IRDataLoader::Implementation **v86;
  int v87;
  float MaxDelay;
  unsigned int v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  unsigned int v93;
  unsigned int v94;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103;
  float v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  vDSP_Length v130;
  float v131;
  float v132;
  float v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  DSPSplitComplex *v138;
  float *v139;
  int *v140;
  uint64_t v141;
  int v142;
  unint64_t v143;
  unint64_t v144;
  std::__shared_weak_count *v145;
  unint64_t *p_shared_owners;
  unint64_t v147;
  std::__shared_weak_count *v148;
  unint64_t *v149;
  unint64_t v150;
  int v152;
  void **v153;
  void **v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  void *v158;
  void *v159;
  uint64_t v160;
  CFTypeRef cf;
  IR::IRData *v162;
  std::__shared_weak_count *v163;
  float *__A;
  __int128 v165;
  void *__p;
  void *v167;
  void *v168;
  uint64_t v169;
  _DWORD *v170;
  _DWORD *v171;
  uint64_t v172;
  _DWORD *v173;
  _DWORD *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  unint64_t v178;
  uint64_t v179;
  void *v180;
  void *v181;
  uint64_t v182;
  CFTypeRef v183;
  IR::IRData *v184;
  std::__shared_weak_count *v185;
  void **v186[2];

  v8 = (float)a2;
  *((float *)this + 32) = (float)a2;
  v9 = (char *)this + 120;
  *((_DWORD *)this + 33) = 0;
  *((_BYTE *)this + 136) = 0;
  v10 = IR::IRDataLoader::instance(this);
  std::string::basic_string[abi:ne180100]<0>(&__p, "HOA2BinauralIRRenderer|");
  v183 = 0;
  v180 = 0;
  v181 = 0;
  v182 = 0;
  IR::IRDataLoader::load(&v184, v10, &__p, v9, &v183, &v180);
  if (v180)
  {
    v181 = v180;
    operator delete(v180);
  }
  if (v183)
    CFRelease(v183);
  if (SHIBYTE(v168) < 0)
    operator delete(__p);
  if (!v184)
  {
    if (IR::getHOA2BinauralIRRendererLog(void)::onceToken != -1)
      dispatch_once(&IR::getHOA2BinauralIRRendererLog(void)::onceToken, &__block_literal_global_0);
    v19 = IR::getHOA2BinauralIRRendererLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getHOA2BinauralIRRendererLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::HOA2BinauralIRRenderer::setEnvironment(v19, v20, v21, v22, v23, v24, v25, v26);
    goto LABEL_17;
  }
  if (IR::IRData::getNumFiltersPerSpatialPoint(v184) < *((_DWORD *)this + 113))
  {
    if (IR::getHOA2BinauralIRRendererLog(void)::onceToken != -1)
      dispatch_once(&IR::getHOA2BinauralIRRendererLog(void)::onceToken, &__block_literal_global_0);
    v11 = IR::getHOA2BinauralIRRendererLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getHOA2BinauralIRRendererLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::HOA2BinauralIRRenderer::setEnvironment(v11, v12, v13, v14, v15, v16, v17, v18);
LABEL_17:
    v27 = 4294956425;
    goto LABEL_161;
  }
  FilterLength = IR::IRData::getFilterLength(v184);
  if (FilterLength >= a4)
    v29 = a4;
  else
    v29 = FilterLength;
  if (!a4)
    v29 = FilterLength;
  *((_DWORD *)this + 111) = v29;
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)&v180);
  v30 = *((unsigned int *)this + 113);
  std::vector<float>::vector(&__p, *((unsigned int *)this + 111));
  std::vector<std::vector<float>>::vector(&v178, v30, (uint64_t)&__p);
  if (__p)
  {
    v167 = __p;
    operator delete(__p);
  }
  std::vector<float>::vector(&v176, *((unsigned int *)this + 113));
  v31 = (void **)((char *)this + 48);
  *((_QWORD *)this + 7) = *((_QWORD *)this + 6);
  v154 = (void **)((char *)this + 72);
  *((_QWORD *)this + 10) = *((_QWORD *)this + 9);
  v153 = (void **)((char *)this + 96);
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  PeriodForCyclicalDimensions = IR::IRData::getPeriodForCyclicalDimensions(v184);
  v173 = 0;
  v174 = 0;
  v175 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v173, *(const void **)PeriodForCyclicalDimensions, *(_QWORD *)(PeriodForCyclicalDimensions + 8), (uint64_t)(*(_QWORD *)(PeriodForCyclicalDimensions + 8) - *(_QWORD *)PeriodForCyclicalDimensions) >> 2);
  InterpolationMethod = IR::IRData::getInterpolationMethod(v184);
  v170 = 0;
  v171 = 0;
  v172 = 0;
  std::vector<IR::IRInterpolationMethod>::__init_with_size[abi:ne180100]<IR::IRInterpolationMethod*,IR::IRInterpolationMethod*>(&v170, *(const void **)InterpolationMethod, *(_QWORD *)(InterpolationMethod + 8), (uint64_t)(*(_QWORD *)(InterpolationMethod + 8) - *(_QWORD *)InterpolationMethod) >> 2);
  v152 = a3;
  DataLayout = (int **)IR::IRData::getDataLayout(v184);
  v36 = *DataLayout;
  v35 = DataLayout[1];
  if (*DataLayout != v35)
  {
    v37 = 0;
    do
    {
      v38 = *v36;
      v40 = (_DWORD *)*((_QWORD *)this + 3);
      v39 = (_DWORD *)*((_QWORD *)this + 4);
      if (v40 != v39)
      {
        while (*v40 != v38)
        {
          if (++v40 == v39)
          {
            v40 = (_DWORD *)*((_QWORD *)this + 4);
            break;
          }
        }
      }
      if (v40 != v39)
      {
        v42 = (char *)*((_QWORD *)this + 7);
        v41 = *((_QWORD *)this + 8);
        if ((unint64_t)v42 >= v41)
        {
          v44 = (char *)*v31;
          v45 = (v42 - (_BYTE *)*v31) >> 2;
          v46 = v45 + 1;
          if ((unint64_t)(v45 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v47 = v41 - (_QWORD)v44;
          if (v47 >> 1 > v46)
            v46 = v47 >> 1;
          if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
            v48 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v48 = v46;
          if (v48)
          {
            v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 64, v48);
            v44 = (char *)*((_QWORD *)this + 6);
            v42 = (char *)*((_QWORD *)this + 7);
          }
          else
          {
            v49 = 0;
          }
          v50 = &v49[4 * v45];
          *(_DWORD *)v50 = v38;
          v43 = v50 + 4;
          while (v42 != v44)
          {
            v51 = *((_DWORD *)v42 - 1);
            v42 -= 4;
            *((_DWORD *)v50 - 1) = v51;
            v50 -= 4;
          }
          *((_QWORD *)this + 6) = v50;
          *((_QWORD *)this + 7) = v43;
          *((_QWORD *)this + 8) = &v49[4 * v48];
          if (v44)
            operator delete(v44);
        }
        else
        {
          *(_DWORD *)v42 = v38;
          v43 = v42 + 4;
        }
        *((_QWORD *)this + 7) = v43;
        v52 = v173;
        v54 = (char *)*((_QWORD *)this + 10);
        v53 = *((_QWORD *)this + 11);
        if ((unint64_t)v54 >= v53)
        {
          v56 = (char *)*v154;
          v4 = (v54 - (_BYTE *)*v154) >> 2;
          v57 = v4 + 1;
          if ((unint64_t)(v4 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v58 = v53 - (_QWORD)v56;
          if (v58 >> 1 > v57)
            v57 = v58 >> 1;
          if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
            v59 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v59 = v57;
          if (v59)
          {
            v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 88, v59);
            v56 = (char *)*((_QWORD *)this + 9);
            v54 = (char *)*((_QWORD *)this + 10);
          }
          else
          {
            v60 = 0;
          }
          v61 = &v60[4 * v4];
          *(_DWORD *)v61 = v52[v37];
          v55 = v61 + 4;
          while (v54 != v56)
          {
            v62 = *((_DWORD *)v54 - 1);
            v54 -= 4;
            *((_DWORD *)v61 - 1) = v62;
            v61 -= 4;
          }
          *((_QWORD *)this + 9) = v61;
          *((_QWORD *)this + 10) = v55;
          *((_QWORD *)this + 11) = &v60[4 * v59];
          if (v56)
            operator delete(v56);
        }
        else
        {
          *(_DWORD *)v54 = v173[v37];
          v55 = v54 + 4;
        }
        *((_QWORD *)this + 10) = v55;
        v63 = v170;
        v65 = (char *)*((_QWORD *)this + 13);
        v64 = *((_QWORD *)this + 14);
        if ((unint64_t)v65 >= v64)
        {
          v67 = (char *)*v153;
          v4 = (v65 - (_BYTE *)*v153) >> 2;
          v68 = v4 + 1;
          if ((unint64_t)(v4 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v69 = v64 - (_QWORD)v67;
          if (v69 >> 1 > v68)
            v68 = v69 >> 1;
          if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL)
            v70 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v70 = v68;
          if (v70)
          {
            v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)this + 112, v70);
            v67 = (char *)*((_QWORD *)this + 12);
            v65 = (char *)*((_QWORD *)this + 13);
          }
          else
          {
            v71 = 0;
          }
          v72 = &v71[4 * v4];
          *(_DWORD *)v72 = v63[v37];
          v66 = v72 + 4;
          while (v65 != v67)
          {
            v73 = *((_DWORD *)v65 - 1);
            v65 -= 4;
            *((_DWORD *)v72 - 1) = v73;
            v72 -= 4;
          }
          *((_QWORD *)this + 12) = v72;
          *((_QWORD *)this + 13) = v66;
          *((_QWORD *)this + 14) = &v71[4 * v70];
          if (v67)
            operator delete(v67);
        }
        else
        {
          *(_DWORD *)v65 = v170[v37];
          v66 = v65 + 4;
        }
        *((_QWORD *)this + 13) = v66;
      }
      ++v37;
      ++v36;
    }
    while (v36 != v35);
  }
  IR::IRData::getCoordinateTree((IR::IRData::Implementation **)v184, (uint64_t)&__p);
  IR::HOA2BinauralIRRenderer::flattenIRCoordinateTree(this, (const IR::IRCoordinateTree *)&__p, (unint64_t *)&__A);
  v74 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v74;
    operator delete(v74);
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    *((_QWORD *)this + 2) = 0;
  }
  v75 = __A;
  *(_QWORD *)this = __A;
  v155 = v165;
  *(_OWORD *)((char *)this + 8) = v165;
  v76 = (*((_DWORD *)this + 113) * *((_DWORD *)this + 111));
  LODWORD(v158) = 0;
  std::vector<float>::vector(&__A, v76, &v158);
  std::vector<std::vector<float>>::assign((uint64_t *)this + 58, 0x8E38E38E38E38E39 * ((v155 - (uint64_t)v75) >> 2), (uint64_t)&__A);
  if (__A)
  {
    *(_QWORD *)&v165 = __A;
    operator delete(__A);
  }
  v77 = *(_QWORD *)this;
  if (*((_QWORD *)this + 1) != *(_QWORD *)this)
  {
    v78 = 0;
    LODWORD(v4) = 0;
    do
    {
      IR::IRData::getInterpolatedTimeDomainCoeffs<std::vector<float>>((unint64_t *)v184, v77 + 36 * v78, v178, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v178) >> 3), (unint64_t)v176, (v177 - v176) >> 2, 0);
      if (*((_DWORD *)this + 113))
      {
        v79 = 0;
        v80 = 0;
        do
        {
          memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 58) + 24 * v78)+ 4 * (*((_DWORD *)this + 111) * v80++)), *(const void **)(v178 + v79), 4 * *((unsigned int *)this + 111));
          v79 += 24;
        }
        while (v80 < *((unsigned int *)this + 113));
      }
      v78 = (v4 + 1);
      v77 = *(_QWORD *)this;
      v4 = v78;
    }
    while (0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2) > v78);
  }
  HOA::createSphericalGridDecoder(*((unsigned int **)this + 54), 0);
  v81 = *(_DWORD *)(*((_QWORD *)this + 54) + 24);
  *((_DWORD *)this + 114) = v81;
  v82 = (*((_DWORD *)this + 113) * v81);
  LODWORD(__A) = 0;
  std::vector<float>::resize((uint64_t)this + 488, v82, &__A);
  v83 = *((_QWORD *)this + 54);
  v165 = 0uLL;
  __A = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__A, *(const void **)(v83 + 56), *(_QWORD *)(v83 + 64), (uint64_t)(*(_QWORD *)(v83 + 64) - *(_QWORD *)(v83 + 56)) >> 2);
  vDSP_mtrans(__A, 1, *((float **)this + 61), 1, *((unsigned int *)this + 114), *((unsigned int *)this + 113));
  if (__A)
  {
    *(_QWORD *)&v165 = __A;
    operator delete(__A);
  }
  v84 = (*((_DWORD *)this + 113) * *((_DWORD *)this + 113));
  LODWORD(__A) = 0;
  std::vector<float>::resize((uint64_t)this + 520, v84, &__A);
  v156 = *((_QWORD *)this + 54);
  *((float *)this + 70) = v8;
  v86 = IR::IRDataLoader::instance(v85);
  std::string::basic_string[abi:ne180100]<0>(&__A, "HOA2BinauralIRRenderer|");
  v160 = 0;
  cf = 0;
  v158 = 0;
  v159 = 0;
  IR::IRDataLoader::load(&v162, v86, &__A, (char *)this + 272, &cf, &v158);
  if (v158)
  {
    v159 = v158;
    operator delete(v158);
  }
  if (cf)
    CFRelease(cf);
  if (SHIBYTE(v165) < 0)
    operator delete(__A);
  if (v162)
  {
    v87 = IR::IRData::getFilterLength(v162);
    MaxDelay = IR::IRData::getMaxDelay(v162);
    v89 = *((_DWORD *)this + 111) + v87;
    v90 = v89 - 1;
    *((_DWORD *)this + 112) = v89 - 1;
    if (v87 == 1)
    {
      *((_BYTE *)this + 460) = 0;
      v91 = *((unsigned int *)this + 110);
      v92 = *((unsigned int *)this + 114);
      LODWORD(v158) = 0;
      std::vector<float>::vector(&__A, v92, &v158);
      std::vector<std::vector<float>>::assign((uint64_t *)this + 98, v91, (uint64_t)&__A);
      if (__A)
      {
        *(_QWORD *)&v165 = __A;
        operator delete(__A);
      }
      v93 = *((_DWORD *)this + 110);
      v94 = 1;
    }
    else
    {
      *((_BYTE *)this + 460) = 1;
      if ((v90 & 1) != 0)
      {
        *((_DWORD *)this + 112) = v89;
        v90 = v89;
      }
      v103 = vcvtps_u32_f32(log2f((float)v90));
      *((_DWORD *)this + 142) = 1 << v103;
      *((_DWORD *)this + 143) = (1 << v103) >> 1;
      v104 = 1.0 / (double)(4 << v103);
      *((float *)this + 144) = v104;
      vDSP_DFT_DestroySetup(*((vDSP_DFT_Setup *)this + 73));
      *((_QWORD *)this + 73) = vDSP_DFT_zrop_CreateSetup(0, *((unsigned int *)this + 142), vDSP_DFT_FORWARD);
      vDSP_DFT_DestroySetup(*((vDSP_DFT_Setup *)this + 74));
      *((_QWORD *)this + 74) = vDSP_DFT_zrop_CreateSetup(*((vDSP_DFT_Setup *)this + 73), *((unsigned int *)this + 142), vDSP_DFT_INVERSE);
      v105 = *((unsigned int *)this + 110);
      v106 = *((unsigned int *)this + 114);
      v107 = *((unsigned int *)this + 143);
      v157 = 0;
      std::vector<float>::vector(&v158, v107, &v157);
      std::vector<std::vector<float>>::vector(&__A, v106, (uint64_t)&v158);
      std::vector<std::vector<std::vector<float>>>::assign((uint64_t)this + 600, v105, (uint64_t *)&__A);
      v186[0] = (void **)&__A;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v186);
      if (v158)
      {
        v159 = v158;
        operator delete(v158);
      }
      v108 = *((unsigned int *)this + 110);
      v109 = *((unsigned int *)this + 114);
      v110 = *((unsigned int *)this + 143);
      v157 = 0;
      std::vector<float>::vector(&v158, v110, &v157);
      std::vector<std::vector<float>>::vector(&__A, v109, (uint64_t)&v158);
      std::vector<std::vector<std::vector<float>>>::assign((uint64_t)this + 624, v108, (uint64_t *)&__A);
      v186[0] = (void **)&__A;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v186);
      if (v158)
      {
        v159 = v158;
        operator delete(v158);
      }
      v111 = *((unsigned int *)this + 110);
      std::vector<DSPSplitComplex>::vector(&__A, *((unsigned int *)this + 114));
      std::vector<std::vector<DSPSplitComplex>>::resize((uint64_t *)this + 81, v111, (uint64_t)&__A);
      if (__A)
      {
        *(_QWORD *)&v165 = __A;
        operator delete(__A);
      }
      v112 = *((unsigned int *)this + 110);
      v113 = *((unsigned int *)this + 114);
      LODWORD(v158) = 0;
      std::vector<float>::vector(&__A, v113, &v158);
      std::vector<std::vector<float>>::assign((uint64_t *)this + 84, v112, (uint64_t)&__A);
      if (__A)
      {
        *(_QWORD *)&v165 = __A;
        operator delete(__A);
      }
      v114 = *((unsigned int *)this + 143);
      LODWORD(__A) = 0;
      std::vector<float>::assign((char **)this + 90, v114, &__A);
      v115 = *((unsigned int *)this + 143);
      LODWORD(__A) = 0;
      std::vector<float>::assign((char **)this + 93, v115, &__A);
      *((_QWORD *)this + 96) = *((_QWORD *)this + 90);
      *((_QWORD *)this + 97) = *((_QWORD *)this + 93);
      v116 = *((unsigned int *)this + 110);
      v117 = *((unsigned int *)this + 143);
      LODWORD(v158) = 0;
      std::vector<float>::vector(&__A, v117, &v158);
      std::vector<std::vector<float>>::assign((uint64_t *)this + 98, v116, (uint64_t)&__A);
      if (__A)
      {
        *(_QWORD *)&v165 = __A;
        operator delete(__A);
      }
      v118 = *((unsigned int *)this + 110);
      v119 = *((unsigned int *)this + 143);
      LODWORD(v158) = 0;
      std::vector<float>::vector(&__A, v119, &v158);
      std::vector<std::vector<float>>::assign((uint64_t *)this + 101, v118, (uint64_t)&__A);
      if (__A)
      {
        *(_QWORD *)&v165 = __A;
        operator delete(__A);
      }
      std::vector<DSPSplitComplex>::resize((uint64_t)this + 832, *((unsigned int *)this + 110));
      v94 = (v87 & 1) + v87;
      v93 = *((_DWORD *)this + 110);
      if (v93)
      {
        v120 = (uint64_t *)*((_QWORD *)this + 98);
        v121 = (uint64_t *)*((_QWORD *)this + 101);
        v122 = (_QWORD *)(*((_QWORD *)this + 104) + 8);
        v123 = *((unsigned int *)this + 110);
        do
        {
          v124 = *v120;
          v120 += 3;
          *(v122 - 1) = v124;
          v125 = *v121;
          v121 += 3;
          *v122 = v125;
          v122 += 2;
          --v123;
        }
        while (v123);
      }
    }
    LODWORD(__A) = 0;
    std::vector<float>::assign(&v176, v93, &__A);
    v126 = *((unsigned int *)this + 110);
    LODWORD(v158) = 0;
    std::vector<float>::vector(&__A, v94, &v158);
    std::vector<std::vector<float>>::assign((uint64_t *)&v178, v126, (uint64_t)&__A);
    if (__A)
    {
      *(_QWORD *)&v165 = __A;
      operator delete(__A);
    }
    LODWORD(v127) = *((_DWORD *)this + 114);
    if ((_DWORD)v127)
    {
      v128 = 0;
      if (fabsf(MaxDelay) > 0.00000011921)
        v129 = v152;
      else
        v129 = 0;
      v130 = v94 >> 1;
      do
      {
        v131 = (float)(*(float *)(*(_QWORD *)(v156 + 128) + 4 * v128) * 180.0) / 3.14159265;
        v132 = *(float *)(*(_QWORD *)(v156 + 152) + 4 * v128);
        IR::IRCoordinates::set((uint64_t)&v180, 0, v131);
        v133 = (float)(v132 * 180.0) / 3.14159265;
        IR::IRCoordinates::set((uint64_t)&v180, 1u, v133);
        IR::IRCoordinates::set((uint64_t)&v180, 2u, 1.0);
        IR::IRCoordinates::set((uint64_t)&v180, 5u, (float)*((unsigned int *)this + 106));
        IR::IRData::getInterpolatedTimeDomainCoeffs<std::vector<float>>((unint64_t *)v162, (uint64_t)&v180, v178, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v179 - v178) >> 3), (unint64_t)v176, (v177 - v176) >> 2, 3u);
        if (*((_DWORD *)this + 110))
        {
          v134 = 0;
          v135 = 0;
          do
          {
            if (v129)
            {
              LODWORD(v4) = vcvtas_u32_f32(*(float *)&v176[4 * v135]);
              if ((_DWORD)v4)
              {
                v136 = *(char **)(v178 + v134);
                v137 = *(_QWORD *)(v178 + v134 + 8) - 4 * v4;
                if ((char *)v137 != v136)
                {
                  memmove(&v136[4 * v4], *(const void **)(v178 + v134), v137 - (_QWORD)v136);
                  v136 = *(char **)(v178 + v134);
                }
                bzero(v136, 4 * v4);
              }
            }
            if (*((_BYTE *)this + 460))
            {
              v4 = 3 * v128;
              v138 = (DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 81) + v134) + 16 * v128);
              v138->realp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 75) + v134) + 24 * v128);
              v138->imagp = *(float **)(*(_QWORD *)(*((_QWORD *)this + 78) + v134) + 24 * v128);
              vDSP_ctoz(*(const DSPComplex **)(v178 + v134), 2, v138, 1, v130);
              v139 = *(float **)(*(_QWORD *)(*((_QWORD *)this + 78) + v134) + 24 * v128);
              vDSP_DFT_Execute(*((const vDSP_DFT_SetupStruct **)this + 73), *(const float **)(*(_QWORD *)(*((_QWORD *)this + 75) + v134) + 24 * v128), v139, *(float **)(*(_QWORD *)(*((_QWORD *)this + 75) + v134) + 24 * v128), v139);
              v140 = *(int **)(*(_QWORD *)(*((_QWORD *)this + 78) + v134) + 24 * v128);
              v141 = *(_QWORD *)(*((_QWORD *)this + 84) + v134);
              v142 = *v140;
              *v140 = *(_DWORD *)(v141 + 4 * v128);
              *(_DWORD *)(v141 + 4 * v128) = v142;
            }
            else
            {
              *(_DWORD *)(*(_QWORD *)(*((_QWORD *)this + 98) + v134) + 4 * v128) = **(_DWORD **)(v178 + v134);
            }
            ++v135;
            v134 += 24;
          }
          while (v135 < *((unsigned int *)this + 110));
        }
        ++v128;
        v127 = *((unsigned int *)this + 114);
      }
      while (v128 < v127);
    }
    v143 = (*((_DWORD *)this + 111) * v127);
    LODWORD(__A) = 0;
    std::vector<float>::assign((char **)this + 87, v143, &__A);
    v144 = (*((_DWORD *)this + 113) * *((_DWORD *)this + 114));
    LODWORD(__A) = 0;
    std::vector<float>::assign((char **)this + 68, v144, &__A);
    v27 = 0;
  }
  else
  {
    if (IR::getHOA2BinauralIRRendererLog(void)::onceToken != -1)
      dispatch_once(&IR::getHOA2BinauralIRRendererLog(void)::onceToken, &__block_literal_global_0);
    v95 = IR::getHOA2BinauralIRRendererLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getHOA2BinauralIRRendererLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::HOA2BinauralIRRenderer::setEnvironment(v95, v96, v97, v98, v99, v100, v101, v102);
    v27 = 4294956425;
  }
  v145 = v163;
  if (v163)
  {
    p_shared_owners = (unint64_t *)&v163->__shared_owners_;
    do
      v147 = __ldaxr(p_shared_owners);
    while (__stlxr(v147 - 1, p_shared_owners));
    if (!v147)
    {
      ((void (*)(std::__shared_weak_count *))v145->__on_zero_shared)(v145);
      std::__shared_weak_count::__release_weak(v145);
    }
  }
  __A = (float *)&v169;
  std::vector<IR::IRCoordinateTree>::__destroy_vector::operator()[abi:ne180100]((void ***)&__A);
  if (v167)
  {
    v168 = v167;
    operator delete(v167);
  }
  if (v170)
  {
    v171 = v170;
    operator delete(v170);
  }
  if (v173)
  {
    v174 = v173;
    operator delete(v173);
  }
  if (v176)
  {
    v177 = v176;
    operator delete(v176);
  }
  __p = &v178;
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
LABEL_161:
  v148 = v185;
  if (v185)
  {
    v149 = (unint64_t *)&v185->__shared_owners_;
    do
      v150 = __ldaxr(v149);
    while (__stlxr(v150 - 1, v149));
    if (!v150)
    {
      ((void (*)(std::__shared_weak_count *))v148->__on_zero_shared)(v148);
      std::__shared_weak_count::__release_weak(v148);
    }
  }
  return v27;
}

void sub_210592BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;
  uint64_t v40;
  void *v42;
  void *v43;
  void *v44;

  if (__p)
  {
    a29 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  IR::IRCoordinateTree::~IRCoordinateTree((IR::IRCoordinateTree *)&a34);
  v42 = *(void **)v39;
  if (*(_QWORD *)v39)
  {
    *(_QWORD *)(v39 + 8) = v42;
    operator delete(v42);
  }
  v43 = *(void **)(v39 + 24);
  if (v43)
  {
    *(_QWORD *)(v39 + 32) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(v39 + 48);
  if (v44)
  {
    *(_QWORD *)(v39 + 56) = v44;
    operator delete(v44);
  }
  a34 = (void *)(v40 - 200);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a34);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](v40 - 128);
  _Unwind_Resume(a1);
}

uint64_t IR::HOA2BinauralIRRenderer::initialize(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5, unsigned int a6, int a7)
{
  int *v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)(a1 + 424) = a7;
  v13 = (int *)operator new();
  HOA::HOA(v13, a2, a5, 0);
  std::unique_ptr<HOA>::reset[abi:ne180100]((HOA **)(a1 + 432), (HOA *)v13);
  *(_DWORD *)(a1 + 452) = *(_DWORD *)(*(_QWORD *)(a1 + 432) + 12);
  v14 = operator new();
  HOA::RotationMatrix::RotationMatrix(v14, a2, a5, 0);
  v15 = *(_QWORD *)(a1 + 512);
  *(_QWORD *)(a1 + 512) = v14;
  if (v15)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](a1 + 512, v15);
  return IR::HOA2BinauralIRRenderer::setEnvironment((IR::HOA2BinauralIRRenderer *)a1, a3, a4, a6);
}

void sub_210592EC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC7928](v1, 0x10A0C40B42DDE52);
  _Unwind_Resume(a1);
}

void IR::HOA2BinauralIRRenderer::flattenIRCoordinateTree(IR::HOA2BinauralIRRenderer *this@<X0>, const IR::IRCoordinateTree *a2@<X1>, unint64_t *a3@<X8>)
{
  _OWORD v6[2];
  int v7;
  _OWORD v8[2];
  int v9;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  IR::IRCoordinates::IRCoordinates((IR::IRCoordinates *)v8);
  v6[0] = v8[0];
  v6[1] = v8[1];
  v7 = v9;
  IR::HOA2BinauralIRRenderer::extractSubNodesFromIRTree((uint64_t)this, a3, (uint64_t)a2, (uint64_t)v6, 1);
}

void sub_210592F68(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<std::vector<float>>::assign(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  char *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;

  v6 = (char *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= a2)
  {
    v13 = (a1[1] - (uint64_t)v6) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (a1[1] - (uint64_t)v6) / 24;
    for (; v14; --v14)
    {
      if (v6 != (char *)a3)
        std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v6, *(char **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v6 += 24;
    }
    if (a2 <= v13)
    {
      v18 = a1[1];
      v19 = *a1 + 24 * a2;
      if (v18 != v19)
      {
        v20 = a1[1];
        do
        {
          v22 = *(void **)(v20 - 24);
          v20 -= 24;
          v21 = v22;
          if (v22)
          {
            *(_QWORD *)(v18 - 16) = v21;
            operator delete(v21);
          }
          v18 = v20;
        }
        while (v20 != v19);
      }
      a1[1] = v19;
    }
    else
    {
      v15 = (_QWORD *)a1[1];
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v15, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      a1[1] = (uint64_t)v16;
    }
  }
  else
  {
    std::vector<std::vector<float>>::__vdeallocate(a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v7 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](a1, v8);
    v9 = (_QWORD *)a1[1];
    v10 = 3 * a2;
    v11 = &v9[3 * a2];
    v12 = 8 * v10;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    a1[1] = (uint64_t)v11;
  }
}

void sub_210593158(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<std::vector<float>>>::assign(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  void **v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void **v18;
  uint64_t v19;
  void **v20;

  v6 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= a2)
  {
    v13 = (*(_QWORD *)(a1 + 8) - (_QWORD)v6) / 24;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (*(_QWORD *)(a1 + 8) - (_QWORD)v6) / 24;
    for (; v14; --v14)
    {
      if (v6 != (void **)a3)
        std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)v6, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      v6 += 3;
    }
    if (a2 <= v13)
    {
      v18 = *(void ***)(a1 + 8);
      v19 = *(_QWORD *)a1 + 24 * a2;
      while (v18 != (void **)v19)
      {
        v18 -= 3;
        v20 = v18;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v20);
      }
      *(_QWORD *)(a1 + 8) = v19;
    }
    else
    {
      v15 = *(_QWORD **)(a1 + 8);
      v16 = &v15[3 * (a2 - v13)];
      v17 = -24 * v13 + 24 * a2;
      do
      {
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
        std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v15, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
        v15 += 3;
        v17 -= 24;
      }
      while (v17);
      *(_QWORD *)(a1 + 8) = v16;
    }
  }
  else
  {
    std::vector<std::vector<std::vector<float>>>::__vdeallocate((void ***)a1);
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v7 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v7 <= a2)
      v7 = a2;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v8 = 0xAAAAAAAAAAAAAAALL;
    else
      v8 = v7;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v8);
    v9 = *(_QWORD **)(a1 + 8);
    v10 = 3 * a2;
    v11 = &v9[3 * a2];
    v12 = 8 * v10;
    do
    {
      *v9 = 0;
      v9[1] = 0;
      v9[2] = 0;
      std::vector<std::vector<float>>::__init_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(v9, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3));
      v9 += 3;
      v12 -= 24;
    }
    while (v12);
    *(_QWORD *)(a1 + 8) = v11;
  }
}

void sub_210593358(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::vector<DSPSplitComplex>>::resize(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;

  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = a2 >= v5;
  v7 = a2 - v5;
  if (v7 != 0 && v6)
  {
    std::vector<std::vector<DSPSplitComplex>>::__append(a1, v7, a3);
  }
  else if (!v6)
  {
    v8 = *a1 + 24 * a2;
    if (v4 != v8)
    {
      v9 = a1[1];
      do
      {
        v11 = *(void **)(v9 - 24);
        v9 -= 24;
        v10 = v11;
        if (v11)
        {
          *(_QWORD *)(v4 - 16) = v10;
          operator delete(v10);
        }
        v4 = v9;
      }
      while (v9 != v8);
    }
    a1[1] = v8;
  }
}

void IR::HOA2BinauralIRRenderer::process(uint64_t a1, void **a2, int a3, unsigned int a4, uint64_t a5, float a6, float a7, float a8)
{
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;
  unsigned int v18;
  float *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;

  LODWORD(v12) = a3;
  v15 = *(_QWORD *)a1;
  v16 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v16)
  {
    while (!IR::IRCoordinates::operator==(v15, a5))
    {
      v15 += 36;
      if (v15 == v16)
      {
        v15 = v16;
        break;
      }
    }
  }
  if (*(_DWORD *)(a1 + 440) == (_DWORD)v12 && *(_DWORD *)(a1 + 448) == a4 && v15 != *(_QWORD *)(a1 + 8))
  {
    v18 = 954437177 * ((unint64_t)(v15 - *(_QWORD *)a1) >> 2);
    HOA::RotationMatrix::setRotationMatrixYPR(*(float ***)(a1 + 512), a6, a7, a8);
    HOA::RotationMatrix::toRegularMatrix(*(_QWORD *)(a1 + 512), *(char **)(a1 + 520), (uint64_t)(*(_QWORD *)(a1 + 528) - *(_QWORD *)(a1 + 520)) >> 2, 0);
    vDSP_mmul(*(const float **)(a1 + 488), 1, *(const float **)(a1 + 520), 1, *(float **)(a1 + 544), 1, *(unsigned int *)(a1 + 456), *(unsigned int *)(a1 + 452), *(unsigned int *)(a1 + 452));
    vDSP_mmul(*(const float **)(a1 + 544), 1, *(const float **)(*(_QWORD *)(a1 + 464) + 24 * v18), 1, *(float **)(a1 + 696), 1, *(unsigned int *)(a1 + 456), *(unsigned int *)(a1 + 444), *(unsigned int *)(a1 + 452));
    LODWORD(v19) = *(_DWORD *)(a1 + 440);
    if (*(_BYTE *)(a1 + 460))
    {
      if ((_DWORD)v19)
      {
        v20 = 0;
        v21 = 0;
        do
        {
          bzero(*(void **)(*(_QWORD *)(a1 + 784) + v20), 4 * *(unsigned int *)(a1 + 572));
          bzero(*(void **)(*(_QWORD *)(a1 + 808) + v20), 4 * *(unsigned int *)(a1 + 572));
          ++v21;
          v19 = (float *)*(unsigned int *)(a1 + 440);
          v20 += 24;
        }
        while (v21 < (unint64_t)v19);
      }
      if (*(_DWORD *)(a1 + 456))
      {
        v22 = 0;
        do
        {
          bzero(*(void **)(a1 + 720), 4 * *(unsigned int *)(a1 + 572));
          bzero(*(void **)(a1 + 744), 4 * *(unsigned int *)(a1 + 572));
          vDSP_ctoz((const DSPComplex *)(*(_QWORD *)(a1 + 696) + 4 * (*(_DWORD *)(a1 + 444) * v22)), 2, (const DSPSplitComplex *)(a1 + 768), 1, (unint64_t)*(unsigned int *)(a1 + 444) >> 1);
          vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(a1 + 584), *(const float **)(a1 + 720), *(const float **)(a1 + 744), *(float **)(a1 + 720), *(float **)(a1 + 744));
          v19 = *(float **)(a1 + 744);
          v23 = *v19;
          *v19 = 0.0;
          LODWORD(v19) = *(_DWORD *)(a1 + 440);
          if ((_DWORD)v19)
          {
            v24 = 0;
            v25 = 0;
            v26 = 0;
            do
            {
              vDSP_zvma((const DSPSplitComplex *)(a1 + 768), 1, (const DSPSplitComplex *)(*(_QWORD *)(*(_QWORD *)(a1 + 648) + v25) + 16 * v22), 1, (const DSPSplitComplex *)(*(_QWORD *)(a1 + 832) + v24), 1, (const DSPSplitComplex *)(*(_QWORD *)(a1 + 832) + v24), 1, *(unsigned int *)(a1 + 572));
              **(float **)(*(_QWORD *)(a1 + 808) + v25) = **(float **)(*(_QWORD *)(a1 + 808) + v25)
                                                        + (float)(v23
                                                                * *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 672) + v25)
                                                                           + 4 * v22));
              ++v26;
              v19 = (float *)*(unsigned int *)(a1 + 440);
              v25 += 24;
              v24 += 16;
            }
            while (v26 < (unint64_t)v19);
          }
          ++v22;
        }
        while (v22 < *(unsigned int *)(a1 + 456));
      }
      if ((_DWORD)v19)
      {
        v27 = 0;
        v28 = 0;
        v29 = 0;
        do
        {
          vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(a1 + 592), *(const float **)(*(_QWORD *)(a1 + 784) + v28), *(const float **)(*(_QWORD *)(a1 + 808) + v28), *(float **)(*(_QWORD *)(a1 + 784) + v28), *(float **)(*(_QWORD *)(a1 + 808) + v28));
          vDSP_ztoc((const DSPSplitComplex *)(*(_QWORD *)(a1 + 832) + v27), 1, (DSPComplex *)a2[v29], 2, (unint64_t)*(unsigned int *)(a1 + 448) >> 1);
          vDSP_vsmul((const float *)a2[v29], 1, (const float *)(a1 + 576), (float *)a2[v29], 1, *(unsigned int *)(a1 + 448));
          ++v29;
          v28 += 24;
          v27 += 16;
        }
        while (v29 < *(unsigned int *)(a1 + 440));
      }
    }
    else if ((_DWORD)v19)
    {
      v31 = 0;
      v32 = 0;
      do
      {
        vDSP_mmul(*(const float **)(*(_QWORD *)(a1 + 784) + v31), 1, *(const float **)(a1 + 696), 1, (float *)a2[v32++], 1, 1uLL, *(unsigned int *)(a1 + 444), *(unsigned int *)(a1 + 456));
        v31 += 24;
      }
      while (v32 < *(unsigned int *)(a1 + 440));
    }
  }
  else if ((_DWORD)v12)
  {
    v12 = v12;
    do
    {
      v30 = *a2++;
      bzero(v30, 4 * a4);
      --v12;
    }
    while (v12);
  }
}

void IR::HOA2BinauralIRRenderer::extractSubNodesFromIRTree(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10;
  unsigned int v11;
  unint64_t *v12;
  _DWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  char *v31;
  char *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  _OWORD v36[2];
  int v37;

  if (*(_QWORD *)(a3 + 16) != *(_QWORD *)(a3 + 8))
  {
    v10 = 0;
    v11 = 0;
    v12 = a2 + 2;
    do
    {
      if (a5)
        IR::IRCoordinates::reset((IR::IRCoordinates *)a4);
      v14 = *(_DWORD **)(a1 + 24);
      v13 = *(_DWORD **)(a1 + 32);
      if (v14 != v13)
      {
        while (*v14 != *(_DWORD *)a3)
        {
          if (++v14 == v13)
          {
            v14 = *(_DWORD **)(a1 + 32);
            break;
          }
        }
      }
      if (v14 != v13)
        IR::IRCoordinates::set(a4, *(_DWORD *)a3, *(float *)(*(_QWORD *)(a3 + 8) + 4 * v10));
      v15 = *(_QWORD *)(a3 + 32);
      if (v15 == *(_QWORD *)(a3 + 40))
      {
        v17 = *a2;
        v18 = a2[1];
        if (*a2 == v18)
        {
          v19 = *a2;
          v20 = *a2;
        }
        else
        {
          while (!IR::IRCoordinates::operator==(v17, a4))
          {
            v17 += 36;
            if (v17 == v18)
            {
              v17 = v18;
              break;
            }
          }
          v19 = a2[1];
          v20 = v17;
          v17 = v19;
        }
        if (v20 == v17)
        {
          if (v17 >= *v12)
          {
            v24 = 0x8E38E38E38E38E39 * ((uint64_t)(v19 - *a2) >> 2);
            v25 = v24 + 1;
            if (v24 + 1 > 0x71C71C71C71C71CLL)
              std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
            if (0x1C71C71C71C71C72 * ((uint64_t)(*v12 - *a2) >> 2) > v25)
              v25 = 0x1C71C71C71C71C72 * ((uint64_t)(*v12 - *a2) >> 2);
            if (0x8E38E38E38E38E39 * ((uint64_t)(*v12 - *a2) >> 2) >= 0x38E38E38E38E38ELL)
              v26 = 0x71C71C71C71C71CLL;
            else
              v26 = v25;
            if (v26)
              v27 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinates>>((uint64_t)v12, v26);
            else
              v27 = 0;
            v28 = &v27[36 * v24];
            v29 = *(_OWORD *)a4;
            v30 = *(_OWORD *)(a4 + 16);
            *((_DWORD *)v28 + 8) = *(_DWORD *)(a4 + 32);
            *(_OWORD *)v28 = v29;
            *((_OWORD *)v28 + 1) = v30;
            v32 = (char *)*a2;
            v31 = (char *)a2[1];
            v33 = (unint64_t)v28;
            if (v31 != (char *)*a2)
            {
              do
              {
                v34 = *(_OWORD *)(v31 - 36);
                v35 = *(_OWORD *)(v31 - 20);
                *(_DWORD *)(v33 - 4) = *((_DWORD *)v31 - 1);
                *(_OWORD *)(v33 - 20) = v35;
                *(_OWORD *)(v33 - 36) = v34;
                v33 -= 36;
                v31 -= 36;
              }
              while (v31 != v32);
              v31 = (char *)*a2;
            }
            v23 = (unint64_t)(v28 + 36);
            *a2 = v33;
            a2[1] = (unint64_t)(v28 + 36);
            a2[2] = (unint64_t)&v27[36 * v26];
            if (v31)
              operator delete(v31);
          }
          else
          {
            v21 = *(_OWORD *)a4;
            v22 = *(_OWORD *)(a4 + 16);
            *(_DWORD *)(v17 + 32) = *(_DWORD *)(a4 + 32);
            *(_OWORD *)v17 = v21;
            *(_OWORD *)(v17 + 16) = v22;
            v23 = v17 + 36;
          }
          a2[1] = v23;
        }
      }
      else
      {
        v16 = *(_OWORD *)(a4 + 16);
        v36[0] = *(_OWORD *)a4;
        v36[1] = v16;
        v37 = *(_DWORD *)(a4 + 32);
        IR::HOA2BinauralIRRenderer::extractSubNodesFromIRTree(a1, a2, v15 + 56 * v10, v36, 0);
      }
      v10 = ++v11;
    }
    while (v11 < (unint64_t)((uint64_t)(*(_QWORD *)(a3 + 16) - *(_QWORD *)(a3 + 8)) >> 2));
  }
}

uint64_t IR::HOA2BinauralIRRenderer::getOutputLength(IR::HOA2BinauralIRRenderer *this)
{
  return *((unsigned int *)this + 112);
}

_QWORD *IR::HOA2BinauralIRRenderer::getRefHOAIRCoordinates@<X0>(IR::HOA2BinauralIRRenderer *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<IR::IRCoordinates>::__init_with_size[abi:ne180100]<IR::IRCoordinates*,IR::IRCoordinates*>(a2, *(const void **)this, *((_QWORD *)this + 1), 0x8E38E38E38E38E39 * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2));
}

_QWORD *IR::HOA2BinauralIRRenderer::getVariableDimensionsInRefHOAIR@<X0>(IR::HOA2BinauralIRRenderer *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<IR::IRCoordinateType>::__init_with_size[abi:ne180100]<IR::IRCoordinateType*,IR::IRCoordinateType*>(a2, *((const void **)this + 6), *((_QWORD *)this + 7), (uint64_t)(*((_QWORD *)this + 7) - *((_QWORD *)this + 6)) >> 2);
}

_QWORD *IR::HOA2BinauralIRRenderer::getInterpolationMethodForVariableDimensionsInRefHOAIR@<X0>(IR::HOA2BinauralIRRenderer *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<IR::IRInterpolationMethod>::__init_with_size[abi:ne180100]<IR::IRInterpolationMethod*,IR::IRInterpolationMethod*>(a2, *((const void **)this + 12), *((_QWORD *)this + 13), (uint64_t)(*((_QWORD *)this + 13) - *((_QWORD *)this + 12)) >> 2);
}

_QWORD *IR::HOA2BinauralIRRenderer::getPeriodForVariableDimensionsInRefHOAIR@<X0>(IR::HOA2BinauralIRRenderer *this@<X0>, _QWORD *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a2, *((const void **)this + 9), *((_QWORD *)this + 10), (uint64_t)(*((_QWORD *)this + 10) - *((_QWORD *)this + 9)) >> 2);
}

void std::vector<std::vector<float>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::vector<float>>::__clear[abi:ne180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::vector<std::vector<float>>>::__vdeallocate(void ***a1)
{
  void **v1;
  void **v3;
  void **v4;
  void **v5;

  v1 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v3 -= 3;
        v5 = v3;
        std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v5);
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char v20;
  char v21;

  v8 = a1 + 16;
  v9 = *(char **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    std::vector<std::vector<float>>::__vdeallocate((uint64_t *)a1);
    if (a4 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v10 <= a4)
      v10 = a4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v10;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100]((_QWORD *)a1, v11);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, a2, a3, *(_QWORD **)(a1 + 8));
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3) < a4)
  {
    v13 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v9) >> 3);
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v20, a2, v13, v9);
    v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<float>>,std::vector<float>*,std::vector<float>*,std::vector<float>*>(v8, v13, a3, *(_QWORD **)(a1 + 8));
LABEL_11:
    *(_QWORD *)(a1 + 8) = v12;
    return;
  }
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::vector<float> *,std::vector<float> *,std::vector<float> *>((int)&v21, a2, a3, v9);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if (v16 != v14)
  {
    v17 = *(_QWORD *)(a1 + 8);
    do
    {
      v19 = *(void **)(v17 - 24);
      v17 -= 24;
      v18 = v19;
      if (v19)
      {
        *(_QWORD *)(v16 - 16) = v18;
        operator delete(v18);
      }
      v16 = v17;
    }
    while (v17 != v15);
  }
  *(_QWORD *)(a1 + 8) = v15;
}

void sub_210593CEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_210593CF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<std::vector<DSPSplitComplex>>::__append(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;

  v8 = a1[2];
  result = a1 + 2;
  v7 = v8;
  v9 = (_QWORD *)*(result - 1);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 3) >= a2)
  {
    if (a2)
    {
      v15 = &v9[3 * a2];
      v16 = 24 * a2;
      do
      {
        *v9 = 0;
        v9[1] = 0;
        v9[2] = 0;
        result = std::vector<DSPSplitComplex>::__init_with_size[abi:ne180100]<DSPSplitComplex*,DSPSplitComplex*>(v9, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
        v9 += 3;
        v16 -= 24;
      }
      while (v16);
      v9 = v15;
    }
    a1[1] = (uint64_t)v9;
  }
  else
  {
    v10 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v9 - *a1) >> 3);
    v11 = v10 + a2;
    if (v10 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    if (2 * v12 > v11)
      v11 = 2 * v12;
    if (v12 >= 0x555555555555555)
      v13 = 0xAAAAAAAAAAAAAAALL;
    else
      v13 = v11;
    v21 = result;
    if (v13)
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>((uint64_t)result, v13);
    else
      v14 = 0;
    v17 = v14;
    v18 = &v14[24 * v10];
    v19 = v18;
    v20 = &v14[24 * v13];
    std::__split_buffer<std::vector<DSPSplitComplex>>::__construct_at_end(&v17, a2, a3);
    std::vector<std::vector<DSPSplitComplex>>::__swap_out_circular_buffer(a1, &v17);
    return (_QWORD *)std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v17);
  }
  return result;
}

void sub_210593E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__split_buffer<std::vector<DSPSplitComplex>>::__construct_at_end(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;

  v3 = result;
  v4 = (_QWORD *)result[2];
  if (a2)
  {
    v6 = &v4[3 * a2];
    v7 = 24 * a2;
    do
    {
      *v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      result = std::vector<DSPSplitComplex>::__init_with_size[abi:ne180100]<DSPSplitComplex*,DSPSplitComplex*>(v4, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 4);
      v4 += 3;
      v7 -= 24;
    }
    while (v7);
    v4 = v6;
  }
  v3[2] = v4;
  return result;
}

void sub_210593EE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

_QWORD *std::vector<DSPSplitComplex>::__init_with_size[abi:ne180100]<DSPSplitComplex*,DSPSplitComplex*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210593F48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<DSPSplitComplex>::vector(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__vallocate[abi:ne180100](a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_210593FBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<IR::IRCoordinates>::__init_with_size[abi:ne180100]<IR::IRCoordinates*,IR::IRCoordinates*>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<IR::IRCoordinates>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_210594034(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<IR::IRCoordinates>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x71C71C71C71C71DLL)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IR::IRCoordinates>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[36 * v4];
  return result;
}

void std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  if (a2)
  {
    v3 = *(void **)(a2 + 24);
    if (v3)
    {
      *(_QWORD *)(a2 + 32) = v3;
      operator delete(v3);
    }
    v4 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v4;
      operator delete(v4);
    }
    JUMPOUT(0x212BC7928);
  }
}

void IR::IRData::getTriangulationData(IR::IRData::Implementation **this@<X0>, CFDictionaryRef *a2@<X8>)
{
  IR::IRData::Implementation::getTriangulationData(*this, a2);
}

void IR::IRData::Implementation::getTriangulationData(IR::IRData::Implementation *this@<X0>, CFDictionaryRef *a2@<X8>)
{
  uint64_t v3;
  IR::IRData::Implementation *v4;
  uint64_t v5;
  unsigned int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  std::vector<unsigned int>::pointer end;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int *v15;
  std::vector<unsigned int>::pointer begin;
  uint64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  unsigned int *v22;
  unsigned int v23;
  CFDataRef v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  unsigned int *value;
  uint64_t v35;
  __int128 v36;
  char *v37;
  uint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  uint64_t v43;
  unsigned int *v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  std::vector<unsigned int>::pointer v56;
  unsigned int *v57;
  std::vector<unsigned int>::pointer v58;
  int64_t v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  unsigned int *v64;
  unsigned int v65;
  CFDataRef v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  char *v75;
  unsigned int *v76;
  uint64_t v77;
  __int128 v78;
  char *v79;
  CFDataRef v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  unsigned int *v90;
  uint64_t v91;
  __int128 v92;
  char *v93;
  unsigned int v94;
  std::vector<unsigned int>::size_type v95;
  CFDataRef v96;
  uint64_t v97;
  const void *v98;
  const void *v99;
  void *exception;
  void *v101;
  void *v102;
  void *v103;
  CFDictionaryRef *v104;
  unsigned int v106;
  uint64_t v107;
  CFTypeRef v108;
  std::vector<unsigned int> v109;
  void *__p;
  unsigned int *v111;
  unsigned int *v112;
  CFTypeRef cf;
  _BYTE *v114;
  uint64_t v115;
  std::vector<unsigned int> v116;
  std::vector<unsigned int>::value_type __x[2];
  uint64_t v118;
  uint64_t v119;
  std::vector<unsigned int> v120;
  __int128 v121;
  _QWORD v122[2];
  __int128 v123;
  _QWORD v124[2];
  __int128 v125;
  _QWORD v126[2];
  char *v127;
  char *v128;
  uint64_t v129;
  std::vector<unsigned int> v130;
  char *v131;
  _QWORD *v132;
  uint64_t v133;
  _BYTE v134[16];
  uint64_t v135;

  v135 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 63);
  if (v3 == *((_QWORD *)this + 64))
  {
    v130.__begin_ = 0;
    v130.__end_ = 0;
    *a2 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&v130);
  }
  else
  {
    v4 = this;
    v104 = a2;
    v5 = 0;
    v6 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
    v125 = 0uLL;
    v126[0] = 0;
    v123 = 0uLL;
    v124[0] = 0;
    v121 = 0uLL;
    v122[0] = 0;
    memset(&v120, 0, sizeof(v120));
    do
    {
      v7 = v127;
      v107 = 16 * v5;
      v8 = *(_QWORD *)(v3 + 16 * v5);
      if (v127 != v128)
      {
        while (*(_QWORD *)v7 != *(_QWORD *)v8)
        {
          v7 += 16;
          if (v7 == v128)
          {
            v7 = v128;
            break;
          }
        }
      }
      if (v7 == v128)
      {
        std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::push_back[abi:ne180100](&v127, (__int128 *)v8);
        v9 = **(_QWORD **)(*((_QWORD *)v4 + 63) + v107);
        v118 = 0;
        v119 = 0;
        *(_QWORD *)__x = 0;
        std::vector<int>::__init_with_size[abi:ne180100]<int *,int *>(__x, *(const void **)(v9 + 224), *(_QWORD *)(v9 + 232), (uint64_t)(*(_QWORD *)(v9 + 232) - *(_QWORD *)(v9 + 224)) >> 2);
        memset(&v116, 0, sizeof(v116));
        std::vector<IR::IRDataType>::reserve(&v116, (v118 - *(_QWORD *)__x) >> 2);
        v10 = *(_DWORD **)__x;
        end = v116.__end_;
        if (v118 == *(_QWORD *)__x)
        {
          v15 = v116.__end_;
        }
        else
        {
          v12 = 0;
          v13 = 0;
          do
          {
            v14 = bswap32(v10[v12]);
            if (end >= v116.__end_cap_.__value_)
            {
              begin = v116.__begin_;
              v17 = end - v116.__begin_;
              v18 = v17 + 1;
              if ((unint64_t)(v17 + 1) >> 62)
                std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
              v19 = (char *)v116.__end_cap_.__value_ - (char *)v116.__begin_;
              if (((char *)v116.__end_cap_.__value_ - (char *)v116.__begin_) >> 1 > v18)
                v18 = v19 >> 1;
              if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
                v20 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v20 = v18;
              if (v20)
              {
                v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v116.__end_cap_, v20);
                begin = v116.__begin_;
                end = v116.__end_;
              }
              else
              {
                v21 = 0;
              }
              v22 = (unsigned int *)&v21[4 * v17];
              *v22 = v14;
              v15 = v22 + 1;
              while (end != begin)
              {
                v23 = *--end;
                *--v22 = v23;
              }
              v116.__begin_ = v22;
              v116.__end_ = v15;
              v116.__end_cap_.__value_ = (unsigned int *)&v21[4 * v20];
              if (begin)
                operator delete(begin);
            }
            else
            {
              *end = v14;
              v15 = end + 1;
            }
            v116.__end_ = v15;
            v10 = *(_DWORD **)__x;
            end = v15;
            v12 = ++v13;
          }
          while (v13 < (unint64_t)((v118 - *(_QWORD *)__x) >> 2));
        }
        v24 = CFDataCreate(0, (const UInt8 *)v116.__begin_, (char *)v15 - (char *)v116.__begin_);
        if (!v24)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x212BC76A0](exception, "Could not construct");
        }
        applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&cf, v24);
        v25 = (_QWORD *)*((_QWORD *)&v125 + 1);
        v106 = v6;
        if (*((_QWORD *)&v125 + 1) >= v126[0])
        {
          v26 = (_QWORD *)v125;
          v27 = (uint64_t)(*((_QWORD *)&v125 + 1) - v125) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v29 = v126[0] - v125;
          if ((uint64_t)(v126[0] - v125) >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          v132 = v126;
          if (v30)
          {
            v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>((uint64_t)v126, v30);
            v25 = (_QWORD *)*((_QWORD *)&v125 + 1);
            v26 = (_QWORD *)v125;
          }
          else
          {
            v31 = 0;
          }
          v32 = &v31[8 * v27];
          v33 = &v31[8 * v30];
          v131 = v33;
          *(_QWORD *)v32 = cf;
          value = (unsigned int *)(v32 + 8);
          cf = 0;
          v130.__end_cap_.__value_ = (unsigned int *)(v32 + 8);
          if (v25 != v26)
          {
            do
            {
              v35 = *--v25;
              *((_QWORD *)v32 - 1) = v35;
              v32 -= 8;
              *v25 = 0;
            }
            while (v25 != v26);
            value = v130.__end_cap_.__value_;
            v33 = v131;
          }
          v36 = v125;
          *(_QWORD *)&v125 = v32;
          *((_QWORD *)&v125 + 1) = value;
          *(_OWORD *)&v130.__end_ = v36;
          v37 = (char *)v126[0];
          v126[0] = v33;
          v131 = v37;
          v130.__begin_ = (std::vector<unsigned int>::pointer)v36;
          std::__split_buffer<applesauce::CF::DataRef>::~__split_buffer((uint64_t)&v130);
          *((_QWORD *)&v125 + 1) = value;
          if (cf)
            CFRelease(cf);
        }
        else
        {
          **((_QWORD **)&v125 + 1) = cf;
          *((_QWORD *)&v125 + 1) = v25 + 1;
        }
        v38 = **(_QWORD **)(*((_QWORD *)this + 63) + v107);
        v114 = 0;
        v115 = 0;
        cf = 0;
        std::vector<std::list<int>>::__init_with_size[abi:ne180100]<std::list<int>*,std::list<int>*>(&cf, *(_QWORD *)(v38 + 272), *(_QWORD *)(v38 + 280), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v38 + 280) - *(_QWORD *)(v38 + 272)) >> 3));
        __p = 0;
        v111 = 0;
        v112 = 0;
        memset(&v109, 0, sizeof(v109));
        std::vector<IR::IRDataType>::reserve(&v109, 0xAAAAAAAAAAAAAAABLL * ((v114 - (_BYTE *)cf) >> 3));
        v39 = cf;
        if (v114 != cf)
        {
          v40 = 0;
          v41 = 0;
          do
          {
            v42 = (char *)&v39[6 * v40];
            v43 = *((_QWORD *)v42 + 1);
            if ((char *)v43 != v42)
            {
              v44 = v111;
              do
              {
                v45 = bswap32(*(_DWORD *)(v43 + 16));
                if (v44 >= v112)
                {
                  v47 = (unsigned int *)__p;
                  v48 = ((char *)v44 - (_BYTE *)__p) >> 2;
                  v49 = v48 + 1;
                  if ((unint64_t)(v48 + 1) >> 62)
                    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
                  v50 = (char *)v112 - (_BYTE *)__p;
                  if (((char *)v112 - (_BYTE *)__p) >> 1 > v49)
                    v49 = v50 >> 1;
                  if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL)
                    v51 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v51 = v49;
                  if (v51)
                  {
                    v52 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v112, v51);
                    v47 = (unsigned int *)__p;
                    v44 = v111;
                  }
                  else
                  {
                    v52 = 0;
                  }
                  v53 = (unsigned int *)&v52[4 * v48];
                  *v53 = v45;
                  v46 = v53 + 1;
                  while (v44 != v47)
                  {
                    v54 = *--v44;
                    *--v53 = v54;
                  }
                  __p = v53;
                  v111 = v46;
                  v112 = (unsigned int *)&v52[4 * v51];
                  if (v47)
                    operator delete(v47);
                }
                else
                {
                  *v44 = v45;
                  v46 = v44 + 1;
                }
                v111 = v46;
                v43 = *(_QWORD *)(v43 + 8);
                v44 = v46;
              }
              while ((char *)v43 != v42);
              v39 = cf;
            }
            v55 = bswap32(v39[6 * v40 + 4]);
            v56 = v109.__end_;
            if (v109.__end_ >= v109.__end_cap_.__value_)
            {
              v58 = v109.__begin_;
              v59 = v109.__end_ - v109.__begin_;
              v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 62)
                std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
              v61 = (char *)v109.__end_cap_.__value_ - (char *)v109.__begin_;
              if (((char *)v109.__end_cap_.__value_ - (char *)v109.__begin_) >> 1 > v60)
                v60 = v61 >> 1;
              if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFFCLL)
                v62 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v62 = v60;
              if (v62)
              {
                v63 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v109.__end_cap_, v62);
                v58 = v109.__begin_;
                v56 = v109.__end_;
              }
              else
              {
                v63 = 0;
              }
              v64 = (unsigned int *)&v63[4 * v59];
              *v64 = v55;
              v57 = v64 + 1;
              while (v56 != v58)
              {
                v65 = *--v56;
                *--v64 = v65;
              }
              v109.__begin_ = v64;
              v109.__end_ = v57;
              v109.__end_cap_.__value_ = (unsigned int *)&v63[4 * v62];
              if (v58)
                operator delete(v58);
            }
            else
            {
              *v109.__end_ = v55;
              v57 = v56 + 1;
            }
            v109.__end_ = v57;
            v39 = cf;
            v40 = ++v41;
          }
          while (0xAAAAAAAAAAAAAAABLL * ((v114 - (_BYTE *)cf) >> 3) > v41);
        }
        v66 = CFDataCreate(0, (const UInt8 *)__p, (char *)v111 - (_BYTE *)__p);
        v6 = v106;
        if (!v66)
        {
          v101 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x212BC76A0](v101, "Could not construct");
        }
        applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v108, v66);
        v67 = (_QWORD *)*((_QWORD *)&v123 + 1);
        if (*((_QWORD *)&v123 + 1) >= v124[0])
        {
          v68 = (_QWORD *)v123;
          v69 = (uint64_t)(*((_QWORD *)&v123 + 1) - v123) >> 3;
          v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 61)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v71 = v124[0] - v123;
          if ((uint64_t)(v124[0] - v123) >> 2 > v70)
            v70 = v71 >> 2;
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF8)
            v72 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v72 = v70;
          v132 = v124;
          v4 = this;
          if (v72)
          {
            v73 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>((uint64_t)v124, v72);
            v67 = (_QWORD *)*((_QWORD *)&v123 + 1);
            v68 = (_QWORD *)v123;
          }
          else
          {
            v73 = 0;
          }
          v74 = &v73[8 * v69];
          v75 = &v73[8 * v72];
          v131 = v75;
          *(_QWORD *)v74 = v108;
          v76 = (unsigned int *)(v74 + 8);
          v108 = 0;
          v130.__end_cap_.__value_ = (unsigned int *)(v74 + 8);
          if (v67 != v68)
          {
            do
            {
              v77 = *--v67;
              *((_QWORD *)v74 - 1) = v77;
              v74 -= 8;
              *v67 = 0;
            }
            while (v67 != v68);
            v76 = v130.__end_cap_.__value_;
            v75 = v131;
          }
          v78 = v123;
          *(_QWORD *)&v123 = v74;
          *((_QWORD *)&v123 + 1) = v76;
          *(_OWORD *)&v130.__end_ = v78;
          v79 = (char *)v124[0];
          v124[0] = v75;
          v131 = v79;
          v130.__begin_ = (std::vector<unsigned int>::pointer)v78;
          std::__split_buffer<applesauce::CF::DataRef>::~__split_buffer((uint64_t)&v130);
          *((_QWORD *)&v123 + 1) = v76;
          v6 = v106;
          if (v108)
            CFRelease(v108);
        }
        else
        {
          **((_QWORD **)&v123 + 1) = v108;
          *((_QWORD *)&v123 + 1) = v67 + 1;
          v4 = this;
        }
        v80 = CFDataCreate(0, (const UInt8 *)v109.__begin_, (char *)v109.__end_ - (char *)v109.__begin_);
        if (!v80)
        {
          v102 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x212BC76A0](v102, "Could not construct");
        }
        applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v108, v80);
        v81 = (_QWORD *)*((_QWORD *)&v121 + 1);
        if (*((_QWORD *)&v121 + 1) >= v122[0])
        {
          v82 = (_QWORD *)v121;
          v83 = (uint64_t)(*((_QWORD *)&v121 + 1) - v121) >> 3;
          v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 61)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v85 = v122[0] - v121;
          if ((uint64_t)(v122[0] - v121) >> 2 > v84)
            v84 = v85 >> 2;
          if ((unint64_t)v85 >= 0x7FFFFFFFFFFFFFF8)
            v86 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v86 = v84;
          v132 = v122;
          if (v86)
          {
            v87 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>((uint64_t)v122, v86);
            v81 = (_QWORD *)*((_QWORD *)&v121 + 1);
            v82 = (_QWORD *)v121;
          }
          else
          {
            v87 = 0;
          }
          v88 = &v87[8 * v83];
          v89 = &v87[8 * v86];
          v131 = v89;
          *(_QWORD *)v88 = v108;
          v90 = (unsigned int *)(v88 + 8);
          v108 = 0;
          v130.__end_cap_.__value_ = (unsigned int *)(v88 + 8);
          if (v81 != v82)
          {
            do
            {
              v91 = *--v81;
              *((_QWORD *)v88 - 1) = v91;
              v88 -= 8;
              *v81 = 0;
            }
            while (v81 != v82);
            v90 = v130.__end_cap_.__value_;
            v89 = v131;
          }
          v92 = v121;
          *(_QWORD *)&v121 = v88;
          *((_QWORD *)&v121 + 1) = v90;
          *(_OWORD *)&v130.__end_ = v92;
          v93 = (char *)v122[0];
          v122[0] = v89;
          v131 = v93;
          v130.__begin_ = (std::vector<unsigned int>::pointer)v92;
          std::__split_buffer<applesauce::CF::DataRef>::~__split_buffer((uint64_t)&v130);
          *((_QWORD *)&v121 + 1) = v90;
          v6 = v106;
          if (v108)
            CFRelease(v108);
        }
        else
        {
          **((_QWORD **)&v121 + 1) = v108;
          *((_QWORD *)&v121 + 1) = v81 + 1;
        }
        if (v109.__begin_)
        {
          v109.__end_ = v109.__begin_;
          operator delete(v109.__begin_);
        }
        if (__p)
        {
          v111 = (unsigned int *)__p;
          operator delete(__p);
        }
        v130.__begin_ = (std::vector<unsigned int>::pointer)&cf;
        std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
        if (v116.__begin_)
        {
          v116.__end_ = v116.__begin_;
          operator delete(v116.__begin_);
        }
        if (*(_QWORD *)__x)
        {
          v118 = *(_QWORD *)__x;
          operator delete(*(void **)__x);
        }
        v8 = *(_QWORD *)(*((_QWORD *)v4 + 63) + v107);
      }
      v94 = bswap32(*(_DWORD *)(v8 + 136));
      v95 = ((((uint64_t)(*(_QWORD *)(*(_QWORD *)v8 + 232) - *(_QWORD *)(*(_QWORD *)v8 + 224)) >> 2)
                          / 3uLL)
           + 4) >> 1;
      __x[0] = v94;
      std::vector<unsigned int>::vector(&v130, v95, __x);
      std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(&v120, (uint64_t)v120.__end_, (char *)v130.__begin_, (char *)v130.__end_, v130.__end_ - v130.__begin_);
      if (v130.__begin_)
      {
        v130.__end_ = v130.__begin_;
        operator delete(v130.__begin_);
      }
      v3 = *((_QWORD *)v4 + 63);
      v5 = ++v6;
    }
    while (v6 < (unint64_t)((*((_QWORD *)v4 + 64) - v3) >> 4));
    LODWORD(v108) = (unint64_t)(v128 - v127) >> 4;
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],unsigned int>((applesauce::CF::TypeRef *)&v130, "NumTriangulations", (int *)&v108);
    v96 = CFDataCreate(0, (const UInt8 *)v120.__begin_, (char *)v120.__end_ - (char *)v120.__begin_);
    if (!v96)
    {
      v103 = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](v103, "Could not construct");
    }
    applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v116, v96);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],applesauce::CF::DataRef>((applesauce::CF::TypeRef *)&v130.__end_cap_, "TriAssignment", (const void **)&v116.__begin_);
    cf = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DataRef>((uint64_t **)&v125);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v132, "TriVertices", &cf);
    __p = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DataRef>((uint64_t **)&v123);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)&v133, "TriBinSerial", (const void **)&__p);
    v109.__begin_ = (std::vector<unsigned int>::pointer)applesauce::CF::details::make_CFArrayRef<applesauce::CF::DataRef>((uint64_t **)&v121);
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],applesauce::CF::ArrayRef>((applesauce::CF::TypeRef *)v134, "TriBinLengths", (const void **)&v109.__begin_);
    *(_QWORD *)__x = &v130;
    v118 = 5;
    v97 = 0;
    *v104 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)__x);
    do
    {
      v98 = *(const void **)&v134[v97 + 8];
      if (v98)
        CFRelease(v98);
      v99 = *(const void **)&v134[v97];
      if (v99)
        CFRelease(v99);
      v97 -= 16;
    }
    while (v97 != -80);
    if (v109.__begin_)
      CFRelease(v109.__begin_);
    if (__p)
      CFRelease(__p);
    if (cf)
      CFRelease(cf);
    if (v116.__begin_)
      CFRelease(v116.__begin_);
    if (v120.__begin_)
    {
      v120.__end_ = v120.__begin_;
      operator delete(v120.__begin_);
    }
    v130.__begin_ = (std::vector<unsigned int>::pointer)&v121;
    std::vector<applesauce::CF::DataRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
    v130.__begin_ = (std::vector<unsigned int>::pointer)&v123;
    std::vector<applesauce::CF::DataRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
    v130.__begin_ = (std::vector<unsigned int>::pointer)&v125;
    std::vector<applesauce::CF::DataRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
    v130.__begin_ = (std::vector<unsigned int>::pointer)&v127;
    std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v130);
  }
}

void sub_210594C5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,uint64_t **__p,uint64_t **a35,uint64_t a36,uint64_t *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  applesauce::CF::TypeRefPair *v41;
  void *v42;
  uint64_t v43;

  __cxa_free_exception(v42);
  if ((applesauce::CF::TypeRefPair *)(v43 - 184) != v41)
  {
    do
    {
      v41 = (applesauce::CF::TypeRefPair *)((char *)v41 - 16);
      applesauce::CF::TypeRefPair::~TypeRefPair(v41);
    }
    while (v41 != (applesauce::CF::TypeRefPair *)(v43 - 184));
  }
  if (__p)
  {
    a35 = __p;
    operator delete(__p);
  }
  __p = &a37;
  std::vector<applesauce::CF::DataRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  a37 = &a41;
  std::vector<applesauce::CF::DataRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a37);
  a41 = v43 - 240;
  std::vector<applesauce::CF::DataRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&a41);
  *(_QWORD *)(v43 - 240) = v43 - 208;
  std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v43 - 240));
  _Unwind_Resume(a1);
}

uint64_t IR::IRData::Implementation::flattenVBAPTree(uint64_t result, uint64_t *a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v3 = result;
  v4 = *a2;
  v5 = (_QWORD *)a2[1];
  if (((uint64_t)(*(_QWORD *)(result + 112) - *(_QWORD *)(result + 104)) >> 2) - 1 == a3)
  {
    if ((_QWORD *)v4 != v5)
    {
      v6 = (char **)(result + 504);
      do
      {
        result = std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::push_back[abi:ne180100](v6, (__int128 *)(v4 + 32));
        v4 += 96;
      }
      while ((_QWORD *)v4 != v5);
    }
  }
  else if ((_QWORD *)v4 != v5)
  {
    v7 = (a3 + 1);
    v8 = (_QWORD *)(v4 + 72);
    do
    {
      if (*v8 != v8[1])
        result = IR::IRData::Implementation::flattenVBAPTree(v3, v8, v7);
      v9 = v8 + 3;
      v8 += 12;
    }
    while (v9 != v5);
  }
  return result;
}

uint64_t std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::push_back[abi:ne180100](char **a1, __int128 *a2)
{
  uint64_t result;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  unint64_t *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  int64x2_t v26;
  char *v27;
  uint64_t v28;
  int64x2_t v29;
  char *v30;
  uint64_t v31;

  v6 = (unint64_t)a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(result - 8);
  if ((unint64_t)v7 >= v6)
  {
    v12 = (v7 - *a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v14 = v5 - (_QWORD)*a1;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    v31 = result;
    v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DSPSplitComplex>>(result, v15);
    v18 = &v16[16 * v12];
    v19 = *a2;
    *(_OWORD *)v18 = *a2;
    if (*((_QWORD *)&v19 + 1))
    {
      v20 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    v23 = *a1;
    v22 = a1[1];
    if (v22 == *a1)
    {
      v26 = vdupq_n_s64((unint64_t)v22);
      v24 = &v16[16 * v12];
    }
    else
    {
      v24 = &v16[16 * v12];
      do
      {
        v25 = *((_OWORD *)v22 - 1);
        v22 -= 16;
        *((_OWORD *)v24 - 1) = v25;
        v24 -= 16;
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
      }
      while (v22 != v23);
      v26 = *(int64x2_t *)a1;
    }
    v11 = v18 + 16;
    *a1 = v24;
    a1[1] = v18 + 16;
    v29 = v26;
    v27 = a1[2];
    a1[2] = &v16[16 * v17];
    v30 = v27;
    v28 = v26.i64[0];
    result = std::__split_buffer<std::shared_ptr<IR::VBAPTriangulationKernel>>::~__split_buffer((uint64_t)&v28);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    *((_QWORD *)v7 + 1) = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    v11 = v7 + 16;
  }
  a1[1] = v11;
  return result;
}

uint64_t IR::IRData::Implementation::normalizeTriangleCoeffs(uint64_t a1, float *a2, int a3, int a4)
{
  float v4;
  uint64_t v5;
  float v6;
  float v7;
  float *v8;
  uint64_t v9;
  float v10;
  uint64_t v11;
  float v12;

  if (a3 == 3)
    a3 = *(_DWORD *)(*(_QWORD *)(a1 + 200) + 4 * a4);
  if (a3)
  {
    if (a3 == 2)
    {
      v4 = sqrtf((float)((float)(a2[1] * a2[1]) + (float)(*a2 * *a2)) + (float)(a2[2] * a2[2]));
      if (v4 > 0.0)
      {
        v5 = 0;
        v6 = 1.0 / v4;
        do
        {
          a2[v5] = v6 * a2[v5];
          ++v5;
        }
        while (v5 != 3);
      }
    }
    else
    {
      v9 = 0;
      v10 = 0.0;
      do
        v10 = v10 + fabsf(a2[v9++]);
      while (v9 != 3);
      if (v10 > 0.0)
      {
        v11 = 0;
        v12 = 1.0 / v10;
        do
        {
          a2[v11] = v12 * a2[v11];
          ++v11;
        }
        while (v11 != 3);
      }
    }
  }
  else
  {
    v7 = *a2;
    v8 = a2 + 1;
    if (*a2 >= a2[1])
      v8 = a2;
    else
      v7 = a2[1];
    if (v7 < a2[2])
      v8 = a2 + 2;
    *(_QWORD *)a2 = 0;
    a2[2] = 0.0;
    *v8 = 1.0;
  }
  return 0;
}

uint64_t IR::IRData::Implementation::getTriangleIndicesAndCoordinates(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, uint64_t a5, uint64_t a6, int a7, VBAP ***a8)
{
  uint64_t result;
  float v17;
  float v18;
  float *v19;
  int v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  float v24;
  int v25;
  VBAP *v26;
  char *v27;
  int v28;
  _DWORD v29[5];

  *(_QWORD *)&v29[3] = *MEMORY[0x24BDAC8D0];
  result = 1852793972;
  if (*a8)
  {
    if (**a8)
    {
      v17 = IR::IRCoordinates::get(a2, 0);
      v18 = IR::IRCoordinates::get(a2, 1u);
      VBAP::convertSphericalDegreesToCartesian((VBAP *)v29, v17, v18, v19);
      v28 = 0;
      result = VBAP::triangleLookup(**a8, (float32x2_t *)v29, &v28, (float *)a5);
      if (!(_DWORD)result)
      {
        IR::IRData::Implementation::normalizeTriangleCoeffs(a1, (float *)a5, a3, a7);
        v20 = *(_DWORD *)(a5 + 8);
        *(_QWORD *)a6 = *(_QWORD *)a5;
        *(_DWORD *)(a6 + 8) = v20;
        if (a3 >= 2 && (a3 != 3 || *(_DWORD *)(*(_QWORD *)(a1 + 200) + 4 * a7) >= 2u))
        {
          v21 = 0;
          v22 = 0.0;
          do
          {
            v22 = v22 + fabsf(*(float *)(a6 + v21));
            v21 += 4;
          }
          while (v21 != 12);
          if (v22 > 0.0)
          {
            v23 = 0;
            v24 = 1.0 / v22;
            do
            {
              *(float *)(a6 + v23) = v24 * *(float *)(a6 + v23);
              v23 += 4;
            }
            while (v23 != 12);
          }
        }
        result = 0;
        v25 = 3 * v28;
        v26 = (*a8)[2];
        *a4 = *((_DWORD *)v26 + 3 * v28);
        v27 = (char *)v26 + 4 * v25;
        a4[1] = *((_DWORD *)v27 + 1);
        a4[2] = *((_DWORD *)v27 + 2);
      }
    }
  }
  return result;
}

BOOL IR::IRData::Implementation::loadTriangulationData(uint64_t a1, unsigned int a2, const __CFDictionary **a3, std::vector<unsigned int> *a4, uint64_t *a5, uint64_t *a6)
{
  const __CFDictionary *v6;
  IR *v12;
  unsigned int v13;
  IR *v14;
  const __CFDictionary *v15;
  IR *v16;
  const __CFDictionary *v17;
  IR *v18;
  const __CFString *v19;
  IR *Count;
  unint64_t v21;
  unsigned int Length;
  std::vector<unsigned int> *v23;
  const UInt8 *BytePtr;
  unsigned int *v25;
  int v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int *v30;
  unsigned int **v31;
  unint64_t v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  unsigned int *v41;
  unsigned int v42;
  NSObject *IRDataLog;
  _BOOL8 result;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const __CFDictionary *v84;
  IR *v85;
  const __CFDictionary *v86;
  IR *v87;
  unsigned int byte_length;
  const UInt8 *raw_data;
  unsigned int *v90;
  int v91;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  int v93;
  std::vector<unsigned int>::pointer end;
  unsigned int v95;
  unsigned int *v96;
  std::vector<unsigned int>::pointer begin;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  unsigned int *v103;
  unsigned int v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  NSObject *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  const __CFDictionary **v129;
  IR *v130;
  const __CFDictionary **v131;
  const __CFDictionary **v132;
  const __CFDictionary **v133;
  IR *v134;
  IR *size;
  unint64_t v136;
  uint64_t v137;
  const __CFArray **v138;
  const __CFArray **v139;
  unsigned int v140;
  unsigned int v141;
  IR *v142;
  unsigned int v143;
  unsigned int v144;
  unsigned int *v145;
  IR *v146;
  int v147;
  unint64_t v148;
  unsigned int *v149;
  uint64_t v150;
  int v151;
  IR *v152;
  uint64_t *v153;
  int v154;
  uint64_t v155;
  unsigned int v156;
  IR **v157;
  IR *v158;
  unsigned int v159;
  int v160;
  int v162;
  NSObject *v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  NSObject *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  NSObject *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  void *v211;
  void *v212;
  applesauce::CF *exception;
  applesauce::CF *v214;
  void *v215;
  void *v216;
  applesauce::CF *v217;
  applesauce::CF *v218;
  void *v219;
  applesauce::CF *v220;
  applesauce::CF *v221;
  unsigned int v222;
  unsigned int __n;
  std::vector<unsigned int>::size_type __na;
  const __CFDictionary **v225;
  unsigned int v226;
  IR *v227;
  unint64_t v228;
  uint64_t *v229;
  std::vector<unsigned int> *v230;
  unint64_t v231;
  const __CFString *v232;
  uint64_t v233;
  unint64_t v234;
  unsigned int *v235;
  const UInt8 **v236;
  const __CFArray **v237;
  const __CFArray **v238;
  const __CFString *v239;
  char v240;
  const void *valuePtr;
  const __CFString *v242;
  char v243;
  const UInt8 **v244;

  v6 = *a3;
  if (!*a3)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  v242 = CFSTR("NumTriangulations");
  v12 = applesauce::CF::details::has_key<__CFString const*>(v6, (const void **)&v242);
  if (!(_DWORD)v12)
  {
    IRDataLog = IR::getIRDataLog(v12);
    result = os_log_type_enabled(IRDataLog, OS_LOG_TYPE_ERROR);
    if (result)
    {
      IR::IRData::Implementation::loadTriangulationData(IRDataLog, v45, v46, v47, v48, v49, v50, v51);
      return 0;
    }
    return result;
  }
  if (!*a3)
  {
    v214 = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v214);
  }
  v239 = CFSTR("NumTriangulations");
  LODWORD(valuePtr) = 0;
  v244 = (const UInt8 **)CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v244)
  {
    v215 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v215, "Could not construct");
  }
  applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>(*a3, (const void **)&v239, &v244, &v242);
  if (!v242)
  {
    v216 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v216, "Could not construct");
  }
  v13 = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)v242);
  if (v242)
    CFRelease(v242);
  v14 = (IR *)v244;
  if (v244)
    CFRelease(v244);
  if (!v13)
  {
    v52 = IR::getIRDataLog(v14);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v52, v53, v54, v55, v56, v57, v58, v59);
    goto LABEL_123;
  }
  v234 = v13;
  std::vector<std::vector<int>>::resize(a5, v13);
  v15 = *a3;
  if (!*a3)
  {
    v217 = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v217);
  }
  v242 = CFSTR("TriVertices");
  v16 = applesauce::CF::details::has_key<__CFString const*>(v15, (const void **)&v242);
  if (!(_DWORD)v16)
  {
    v60 = IR::getIRDataLog(v16);
    if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v60, v61, v62, v63, v64, v65, v66, v67);
    goto LABEL_123;
  }
  v17 = *a3;
  if (!*a3)
  {
    v218 = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v218);
  }
  v239 = CFSTR("TriVertices");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(v17, (const void **)&v239, &v242);
  if (!v243)
  {
    v68 = IR::getIRDataLog(v18);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v68, v69, v70, v71, v72, v73, v74, v75);
    std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v242);
    goto LABEL_123;
  }
  v19 = v242;
  if (!v242)
  {
    v239 = 0;
    v219 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v219, "Could not construct");
  }
  CFRetain(v242);
  v239 = v19;
  Count = (IR *)CFArrayGetCount((CFArrayRef)v19);
  v229 = a6;
  v230 = a4;
  v222 = v13;
  __n = a2;
  v225 = a3;
  v227 = Count;
  if (Count == (IR *)v13)
  {
    v21 = 0;
    v232 = v19;
    do
    {
      valuePtr = 0;
      applesauce::CF::at_or<applesauce::CF::DataRef>((const __CFArray *)v19, v21, &valuePtr, &v244);
      if (valuePtr)
        CFRelease(valuePtr);
      if (!v244)
      {
        v211 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](v211, "Could not construct");
      }
      Length = CFDataGetLength((CFDataRef)v244);
      v23 = (std::vector<unsigned int> *)(*a5 + 24 * v21);
      v23->__end_ = v23->__begin_;
      std::vector<IR::IRDataType>::reserve(v23, Length >> 2);
      if (!v244)
      {
        v212 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](v212, "Could not construct");
      }
      BytePtr = CFDataGetBytePtr((CFDataRef)v244);
      if (Length >= 4)
      {
        v25 = (unsigned int *)BytePtr;
        v26 = 0;
        if (Length >> 2 <= 1)
          v27 = 1;
        else
          v27 = Length >> 2;
        do
        {
          v28 = *a5 + 24 * v21;
          v29 = bswap32(*v25);
          v31 = (unsigned int **)(v28 + 8);
          v30 = *(unsigned int **)(v28 + 8);
          v33 = (_QWORD *)(v28 + 16);
          v32 = *(_QWORD *)(v28 + 16);
          if ((unint64_t)v30 >= v32)
          {
            v35 = *(unsigned int **)v28;
            v36 = ((uint64_t)v30 - *(_QWORD *)v28) >> 2;
            v37 = v36 + 1;
            if ((unint64_t)(v36 + 1) >> 62)
              std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
            v38 = v32 - (_QWORD)v35;
            if (v38 >> 1 > v37)
              v37 = v38 >> 1;
            if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL)
              v39 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v39 = v37;
            if (v39)
            {
              v40 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)v33, v39);
              v30 = *v31;
              v35 = *(unsigned int **)v28;
            }
            else
            {
              v40 = 0;
            }
            v41 = (unsigned int *)&v40[4 * v36];
            *v41 = v29;
            v34 = v41 + 1;
            while (v30 != v35)
            {
              v42 = *--v30;
              *--v41 = v42;
            }
            *(_QWORD *)v28 = v41;
            *v31 = v34;
            *v33 = &v40[4 * v39];
            if (v35)
              operator delete(v35);
          }
          else
          {
            *v30 = v29;
            v34 = v30 + 1;
          }
          *v31 = v34;
          ++v25;
          ++v26;
        }
        while (v26 != v27);
      }
      if (v244)
        CFRelease(v244);
      ++v21;
      v19 = v232;
    }
    while (v21 != v234);
  }
  else
  {
    v76 = IR::getIRDataLog(Count);
    if (os_log_type_enabled(v76, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v76, v77, v78, v79, v80, v81, v82, v83);
  }
  CFRelease(v19);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v242);
  if (v227 != (IR *)v234)
    goto LABEL_123;
  v84 = *v225;
  if (!*v225)
  {
    v220 = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v220);
  }
  v242 = CFSTR("TriAssignment");
  v85 = applesauce::CF::details::has_key<__CFString const*>(v84, (const void **)&v242);
  if (!(_DWORD)v85)
  {
    v105 = IR::getIRDataLog(v85);
    if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v105, v106, v107, v108, v109, v110, v111, v112);
    goto LABEL_123;
  }
  v86 = *v225;
  if (!*v225)
  {
    v221 = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(v221);
  }
  v239 = CFSTR("TriAssignment");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,__CFString const*>(v86, (const void **)&v239, &v242);
  if (!v243)
  {
    v113 = IR::getIRDataLog(v87);
    if (os_log_type_enabled(v113, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v113, v114, v115, v116, v117, v118, v119, v120);
    std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v242);
    goto LABEL_123;
  }
  applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)&v239, (CFTypeRef *)&v242);
  v244 = (const UInt8 **)applesauce::CF::DataRef::operator->(&v239);
  byte_length = applesauce::CF::DataRef_proxy::get_byte_length((const __CFData ***)&v244);
  v230->__end_ = v230->__begin_;
  if (byte_length >> 2 == __n)
  {
    std::vector<IR::IRDataType>::reserve(v230, __n);
    v244 = (const UInt8 **)applesauce::CF::DataRef::operator->(&v239);
    raw_data = applesauce::CF::DataRef_proxy::get_raw_data(&v244);
    if (byte_length >= 4)
    {
      v90 = (unsigned int *)raw_data;
      v91 = 0;
      p_end_cap = &v230->__end_cap_;
      if (__n <= 1)
        v93 = 1;
      else
        v93 = __n;
      end = v230->__end_;
      do
      {
        v95 = bswap32(*v90);
        if (end >= p_end_cap->__value_)
        {
          begin = v230->__begin_;
          v98 = end - v230->__begin_;
          v99 = v98 + 1;
          if ((unint64_t)(v98 + 1) >> 62)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v100 = (char *)p_end_cap->__value_ - (char *)begin;
          if (v100 >> 1 > v99)
            v99 = v100 >> 1;
          if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL)
            v101 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v101 = v99;
          if (v101)
          {
            v102 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v101);
            begin = v230->__begin_;
            end = v230->__end_;
          }
          else
          {
            v102 = 0;
          }
          v103 = (unsigned int *)&v102[4 * v98];
          *v103 = v95;
          v96 = v103 + 1;
          while (end != begin)
          {
            v104 = *--end;
            *--v103 = v104;
          }
          v230->__begin_ = v103;
          v230->__end_ = v96;
          v230->__end_cap_.__value_ = (unsigned int *)&v102[4 * v101];
          if (begin)
            operator delete(begin);
        }
        else
        {
          *end = v95;
          v96 = end + 1;
        }
        v230->__end_ = v96;
        ++v90;
        ++v91;
        end = v96;
      }
      while (v91 != v93);
    }
  }
  else
  {
    v121 = IR::getIRDataLog((IR *)v230);
    if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v121, v122, v123, v124, v125, v126, v127, v128);
  }
  applesauce::CF::DataRef::~DataRef((const void **)&v239);
  std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v242);
  if (byte_length >> 2 != __n)
  {
LABEL_123:
    v162 = 1;
    return v162 == 0;
  }
  v129 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(v225);
  v242 = CFSTR("TriBinLengths");
  v130 = applesauce::CF::details::has_key<__CFString const*>(*v129, (const void **)&v242);
  if (!(_DWORD)v130
    || (v131 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(v225),
        v239 = CFSTR("TriBinSerial"),
        v130 = applesauce::CF::details::has_key<__CFString const*>(*v131, (const void **)&v239),
        !(_DWORD)v130))
  {
    v163 = IR::getIRDataLog(v130);
    if (os_log_type_enabled(v163, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v163, v164, v165, v166, v167, v168, v169, v170);
    goto LABEL_123;
  }
  v132 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(v225);
  v239 = CFSTR("TriBinLengths");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(*v132, (const void **)&v239, &v242);
  v133 = (const __CFDictionary **)applesauce::CF::DictionaryRef::operator->(v225);
  v244 = (const UInt8 **)CFSTR("TriBinSerial");
  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::ArrayRef,__CFString const*>(*v133, (const void **)&v244, &v239);
  if (!v243 || !v240)
  {
    v171 = IR::getIRDataLog(v134);
    if (os_log_type_enabled(v171, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v171, v172, v173, v174, v175, v176, v177, v178);
    v162 = 1;
    goto LABEL_136;
  }
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&v244, (CFTypeRef *)&v242);
  applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&valuePtr, (CFTypeRef *)&v239);
  std::vector<std::vector<std::list<int>>>::resize(v229, v234);
  v238 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&v244);
  size = applesauce::CF::ArrayRef_proxy::get_size(&v238);
  if (size != (IR *)v234
    || (v237 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&valuePtr),
        size = applesauce::CF::ArrayRef_proxy::get_size(&v237),
        size != (IR *)v234))
  {
    v179 = IR::getIRDataLog(size);
    if (os_log_type_enabled(v179, OS_LOG_TYPE_ERROR))
      IR::IRData::Implementation::loadTriangulationData(v179, v180, v181, v182, v183, v184, v185, v186);
    goto LABEL_134;
  }
  v136 = 0;
  if (v222 <= 1)
    v137 = 1;
  else
    v137 = v222;
  __na = v137;
  while (1)
  {
    v138 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&v244);
    v237 = 0;
    applesauce::CF::at_or<applesauce::CF::DataRef>(*v138, v136, &v237, &v238);
    applesauce::CF::DataRef::~DataRef((const void **)&v237);
    v139 = (const __CFArray **)applesauce::CF::ArrayRef::operator->(&valuePtr);
    v236 = 0;
    applesauce::CF::at_or<applesauce::CF::DataRef>(*v139, v136, &v236, &v237);
    applesauce::CF::DataRef::~DataRef((const void **)&v236);
    v236 = (const UInt8 **)applesauce::CF::DataRef::operator->(&v238);
    v140 = applesauce::CF::DataRef_proxy::get_byte_length((const __CFData ***)&v236);
    v141 = v140 >> 2;
    v236 = (const UInt8 **)applesauce::CF::DataRef::operator->(&v237);
    v142 = applesauce::CF::DataRef_proxy::get_byte_length((const __CFData ***)&v236);
    v143 = v142 >> 2;
    if (v142 >> 2 < v140 >> 2)
    {
      v195 = IR::getIRDataLog(v142);
      if (os_log_type_enabled(v195, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::loadTriangulationData(v195, v196, v197, v198, v199, v200, v201, v202);
      goto LABEL_133;
    }
    v144 = v142;
    v231 = v141;
    std::vector<std::list<int>>::resize((uint64_t *)(*v229 + 24 * v136), v141);
    v236 = (const UInt8 **)applesauce::CF::DataRef::operator->(&v238);
    v145 = (unsigned int *)applesauce::CF::DataRef_proxy::get_raw_data(&v236);
    v236 = (const UInt8 **)applesauce::CF::DataRef::operator->(&v237);
    v146 = (IR *)applesauce::CF::DataRef_proxy::get_raw_data(&v236);
    v147 = 0;
    if (v140 < 4)
    {
      LODWORD(v148) = 0;
      goto LABEL_117;
    }
    LODWORD(v148) = 0;
    if (v144 >= 4)
      break;
LABEL_117:
    if ((_DWORD)v148 != v141 || v147 != v143)
    {
      v203 = IR::getIRDataLog(v146);
      if (os_log_type_enabled(v203, OS_LOG_TYPE_ERROR))
        IR::IRData::Implementation::loadTriangulationData(v203, v204, v205, v206, v207, v208, v209, v210);
      goto LABEL_133;
    }
    applesauce::CF::DataRef::~DataRef((const void **)&v237);
    applesauce::CF::DataRef::~DataRef((const void **)&v238);
    v162 = 0;
    if (++v136 == v137)
      goto LABEL_135;
  }
  v149 = (unsigned int *)v146;
  v226 = v141;
  v228 = v136;
  v148 = 0;
  v147 = 0;
  v150 = *v229;
  while (1)
  {
    v235 = v145 + 1;
    v151 = bswap32(*v145);
    v152 = (IR *)std::__list_imp<int>::clear((_QWORD *)(*(_QWORD *)(v150 + 24 * v136) + 24 * v148));
    if (v151 < 1)
      break;
    v233 = *v229;
    v153 = (uint64_t *)(*v229 + 24 * v136);
    v154 = 1;
    do
    {
      v155 = *v153;
      v156 = *v149;
      v146 = (IR *)operator new(0x18uLL);
      ++v149;
      v157 = (IR **)(v155 + 24 * v148);
      *((_DWORD *)v146 + 4) = bswap32(v156);
      *((_QWORD *)v146 + 1) = v157;
      v158 = *v157;
      *(_QWORD *)v146 = *v157;
      *((_QWORD *)v158 + 1) = v146;
      *v157 = v146;
      v157[2] = (IR *)((char *)v157[2] + 1);
      v159 = v147 + v154;
      v160 = v154 + 1;
      if (v147 + v154 >= v143)
        break;
    }
    while (v154++ < v151);
    ++v148;
    v147 = v147 + v160 - 1;
    v136 = v228;
    v150 = v233;
    v145 = v235;
    if (v148 >= v231 || v159 >= v143)
    {
      v137 = __na;
      v141 = v226;
      goto LABEL_117;
    }
  }
  v187 = IR::getIRDataLog(v152);
  if (os_log_type_enabled(v187, OS_LOG_TYPE_ERROR))
    IR::IRData::Implementation::loadTriangulationData(v187, v188, v189, v190, v191, v192, v193, v194);
LABEL_133:
  applesauce::CF::DataRef::~DataRef((const void **)&v237);
  applesauce::CF::DataRef::~DataRef((const void **)&v238);
LABEL_134:
  v162 = 1;
LABEL_135:
  applesauce::CF::ArrayRef::~ArrayRef(&valuePtr);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&v244);
LABEL_136:
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v239);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&v242);
  return v162 == 0;
}

void sub_210595EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  const void *v13;
  va_list va;
  const void *v15;
  va_list va1;
  uint64_t v17;
  va_list va2;
  uint64_t v19;
  va_list va3;

  va_start(va3, a11);
  va_start(va2, a11);
  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, const void *);
  va_copy(va2, va1);
  v15 = va_arg(va2, const void *);
  va_copy(va3, va2);
  v17 = va_arg(va3, _QWORD);
  v19 = va_arg(va3, _QWORD);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  applesauce::CF::DataRef::~DataRef((const void **)va1);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)va3);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)(v11 - 88));
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)va2);
  std::__optional_destruct_base<applesauce::CF::ArrayRef,false>::~__optional_destruct_base[abi:ne180100](v11 - 104);
  _Unwind_Resume(a1);
}

void applesauce::CF::NumberRef::~NumberRef(const void **this)
{
  const void *v1;

  v1 = *this;
  if (v1)
    CFRelease(v1);
}

void std::vector<std::vector<int>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<int>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)this = v3;
  return this;
}

_QWORD *applesauce::CF::ArrayRef::operator->(_QWORD *result)
{
  applesauce::CF *exception;

  if (!*result)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_2105961E0()
{
  void *v0;

}

void sub_2105961F8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFArray *applesauce::CF::ArrayRef_proxy::get_size(const __CFArray ***this)
{
  const __CFArray *result;

  result = **this;
  if (result)
    return (const __CFArray *)CFArrayGetCount(result);
  return result;
}

_QWORD *applesauce::CF::DataRef::operator->(_QWORD *result)
{
  applesauce::CF *exception;

  if (!*result)
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::construct_error(exception);
  }
  return result;
}

void sub_210596264()
{
  void *v0;

}

void sub_21059627C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const __CFData *applesauce::CF::DataRef_proxy::get_byte_length(const __CFData ***this)
{
  const __CFData *result;

  result = **this;
  if (result)
    return (const __CFData *)CFDataGetLength(result);
  return result;
}

const UInt8 *applesauce::CF::DataRef_proxy::get_raw_data(const UInt8 ***this)
{
  const UInt8 *result;

  result = **this;
  if (result)
    return CFDataGetBytePtr((CFDataRef)result);
  return result;
}

applesauce::CF::DataRef *applesauce::CF::DataRef::DataRef(applesauce::CF::DataRef *this, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)this = v3;
  return this;
}

void std::vector<std::vector<std::list<int>>>::resize(uint64_t *a1, unint64_t a2)
{
  void **v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void **v8;

  v3 = (void **)a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<std::vector<std::list<int>>>::__append(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    while (v3 != (void **)v7)
    {
      v3 -= 3;
      v8 = v3;
      std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v8);
    }
    a1[1] = v7;
  }
}

uint64_t *std::vector<std::list<int>>::resize(uint64_t *result, unint64_t a2)
{
  uint64_t *v2;
  _QWORD *v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;

  v2 = result;
  v3 = (_QWORD *)result[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *result) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
    return (uint64_t *)std::vector<std::list<int>>::__append(result, v6);
  if (!v5)
  {
    v7 = *result + 24 * a2;
    while (v3 != (_QWORD *)v7)
    {
      v3 -= 3;
      result = std::__list_imp<int>::clear(v3);
    }
    v2[1] = v7;
  }
  return result;
}

BOOL IR::IRData::Implementation::initVBAPTriangulation(uint64_t a1, uint64_t *a2, _QWORD *a3, unsigned int a4)
{
  IR *v7;
  IR *v8;
  _QWORD *v9;
  uint64_t *v10;
  IR *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  IR **v16;
  uint64_t v17;
  uint64_t *v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  float *v23;
  float *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  int v37;
  NSObject *IRDataLog;
  uint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  IR *v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  IR *v50;
  uint64_t v51;
  int v52;
  int *v53;
  int *v54;
  int v55;
  int v56;
  int *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const IR::FFTFilterKernel *v62;
  IR::FFTFilterKernel *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  IR::FFTFilterKernel **v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  IR::FFTFilterKernel *v75;
  int64x2_t v76;
  IR::FFTFilterKernel *v77;
  char *v78;
  unint64_t v79;
  uint64_t *v80;
  float v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  BOOL v87;
  uint64_t *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  NSObject *v94;
  _QWORD *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL8 result;
  NSObject *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BOOL4 v112;
  int v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  int v117;
  int v118;
  int64x2_t v119;
  char *v120;
  uint64_t *v121;
  _QWORD *v122;
  unint64_t v123;
  void *__p;
  _BYTE *v125;
  uint64_t v126;
  IR::FFTFilterKernel *v127;
  _BYTE buf[24];
  char *v129;
  char **v130;
  uint64_t v131;

  v131 = *MEMORY[0x24BDAC8D0];
  v7 = *(IR **)(a1 + 512);
  v8 = *(IR **)(a1 + 504);
  while (v7 != v8)
    v7 = (IR *)std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)v7 - 16);
  v9 = (_QWORD *)(a1 + 504);
  *(_QWORD *)(a1 + 512) = v8;
  v10 = *(uint64_t **)(a1 + 264);
  if (*(_QWORD *)(a1 + 104) != *(_QWORD *)(a1 + 112))
  {
    v11 = (IR *)IR::IRData::Implementation::flattenVBAPTree(a1, v10, 0);
    goto LABEL_8;
  }
  if (*v10 != v10[1])
  {
    v11 = (IR *)std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::push_back[abi:ne180100]((char **)(a1 + 504), (__int128 *)(*v10 + 32));
LABEL_8:
    v12 = a4;
    v13 = *(_QWORD *)(a1 + 504);
    if (a4 < (unint64_t)((*(_QWORD *)(a1 + 512) - v13) >> 4))
    {
      v113 = 0;
      v114 = a1;
      while (1)
      {
        v14 = 16 * v12;
        if (v12)
        {
          v15 = 0;
          v16 = (IR **)(v13 + 16 * v12);
          while (1)
          {
            v17 = 16 * v15;
            v18 = *(uint64_t **)(v13 + 16 * v15);
            if (*v18)
            {
              v11 = *v16;
              v20 = (float *)v18[5];
              v19 = (float *)v18[6];
              v21 = (float *)*((_QWORD *)*v16 + 5);
              if ((char *)v19 - (char *)v20 == *((_QWORD *)*v16 + 6) - (_QWORD)v21)
              {
                while (v20 != v19)
                {
                  if (*v20 != *v21)
                    goto LABEL_21;
                  ++v20;
                  ++v21;
                }
                v23 = (float *)v18[8];
                v22 = (float *)v18[9];
                v24 = (float *)*((_QWORD *)v11 + 8);
                if ((char *)v22 - (char *)v23 == *((_QWORD *)v11 + 9) - (_QWORD)v24)
                  break;
              }
            }
LABEL_21:
            if (++v15 == v12)
              goto LABEL_22;
          }
          while (v23 != v22)
          {
            if (*v23 != *v24)
              goto LABEL_21;
            ++v23;
            ++v24;
          }
          std::shared_ptr<VBAP>::operator=[abi:ne180100](v11, v18);
          v36 = *(uint64_t **)(*v9 + 16 * v12);
          *((_DWORD *)v36 + 34) = *(_DWORD *)(*(_QWORD *)(*v9 + v17) + 136);
        }
        else
        {
LABEL_22:
          v25 = *a2;
          v26 = a2[1];
          if (*a2 == v26
            || (v27 = *(_QWORD *)(v13 + 16 * v12), v28 = *(unsigned int *)(v27 + 136), (v28 & 0x80000000) != 0)
            || 0xAAAAAAAAAAAAAAABLL * ((v26 - v25) >> 3) <= v28
            || (v29 = (uint64_t)(*(_QWORD *)(v25 + 24 * v28 + 8)
                              - *(_QWORD *)(v25 + 24 * v28)) >> 2,
                v30 = *(_QWORD *)(v27 + 48) - *(_QWORD *)(v27 + 40),
                (v30 >> 1) - 4 != v29 / 3)
            || *(_DWORD *)(v27 + 140) != v30 >> 2)
          {
            IRDataLog = IR::getIRDataLog(v11);
            if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEFAULT))
            {
              v39 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*v9 + 16 * v12) + 48)
                            - *(_QWORD *)(*(_QWORD *)(*v9 + 16 * v12) + 40)) >> 2;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "initVBAPTriangulation";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v39;
              _os_log_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEFAULT, "IRData::%s: creating new VBAP instance with %lu vertices, no precomputed triangulation", buf, 0x16u);
            }
            v40 = *(_QWORD *)(*v9 + 16 * v12);
            LODWORD(__p) = 0;
            std::allocate_shared[abi:ne180100]<VBAP,std::allocator<VBAP>,std::vector<float> &,std::vector<float> &,VBAP::Algorithm,void>(v40 + 40, v40 + 64, (int *)&__p, buf);
            std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](*(_QWORD *)(*v9 + 16 * v12), (__int128 *)buf);
            v41 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v42 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
            v36 = *(uint64_t **)(*v9 + 16 * v12);
            v37 = v113;
            *((_DWORD *)v36 + 34) = v113;
          }
          else
          {
            v31 = IR::getIRDataLog(v11);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
            {
              v101 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*v9 + 16 * v12) + 48)
                             - *(_QWORD *)(*(_QWORD *)(*v9 + 16 * v12) + 40)) >> 2;
              *(_DWORD *)buf = 136315394;
              *(_QWORD *)&buf[4] = "initVBAPTriangulation";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v101;
              _os_log_debug_impl(&dword_210570000, v31, OS_LOG_TYPE_DEBUG, "IRData::%s: creating new VBAP instance with %lu vertices and precomputed triangulation", buf, 0x16u);
            }
            v32 = *(_QWORD *)(*v9 + 16 * v12);
            LODWORD(__p) = 0;
            std::allocate_shared[abi:ne180100]<VBAP,std::allocator<VBAP>,std::vector<float> &,std::vector<float> &,VBAP::Algorithm,std::vector<int> const&,std::vector<std::list<int>> const&,void>(v32 + 40, v32 + 64, (int *)&__p, (char **)(*a2 + 24 * v28), (uint64_t *)(*a3 + 24 * v28), buf);
            std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](*(_QWORD *)(*v9 + 16 * v12), (__int128 *)buf);
            v33 = *(std::__shared_weak_count **)&buf[8];
            if (*(_QWORD *)&buf[8])
            {
              v34 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
              do
                v35 = __ldaxr(v34);
              while (__stlxr(v35 - 1, v34));
              if (!v35)
              {
                ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                std::__shared_weak_count::__release_weak(v33);
              }
            }
            v36 = *(uint64_t **)(*v9 + 16 * v12);
            v37 = v113;
          }
          v113 = v37 + 1;
        }
        v44 = *v36;
        __p = 0;
        v125 = 0;
        v126 = 0;
        v45 = (IR *)std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)(v44 + 80), *(_QWORD *)(v44 + 88), (uint64_t)(*(_QWORD *)(v44 + 88) - *(_QWORD *)(v44 + 80)) >> 2);
        v46 = (unint64_t)(v125 - (_BYTE *)__p) >> 2;
        v47 = *(_QWORD **)(*v9 + 16 * v12);
        v48 = (v47[6] - v47[5]) >> 2;
        v117 = (int)v46 / 3;
        v49 = ((uint64_t)(*(_QWORD *)(*v47 + 232) - *(_QWORD *)(*v47 + 224)) >> 2) / 3uLL;
        v112 = 2 * ((int)v46 / 3 + (_DWORD)v48) - 4 == v49;
        if (2 * ((int)v46 / 3 + (_DWORD)v48) - 4 != (_DWORD)v49)
        {
          v94 = IR::getIRDataLog(v45);
          if (os_log_type_enabled(v94, OS_LOG_TYPE_ERROR))
          {
            v100 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*v9 + 16 * v12) + 48)
                           - *(_QWORD *)(*(_QWORD *)(*v9 + 16 * v12) + 40)) >> 2;
            *(_DWORD *)buf = 136315394;
            *(_QWORD *)&buf[4] = "initVBAPTriangulation";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v100;
            _os_log_error_impl(&dword_210570000, v94, OS_LOG_TYPE_ERROR, "IRData::%s: failed to initialize VBAP triangulation with %lu vertices", buf, 0x16u);
          }
          v96 = *(_QWORD **)(*v9 + 16 * v12);
          v96[3] = v96[2];
          v96[6] = v96[5];
          v96[9] = v96[8];
          std::vector<std::vector<float>>::__clear[abi:ne180100](v96 + 14);
          v97 = *(_QWORD *)(*v9 + 16 * v12);
          v98 = *(_QWORD *)(v97 + 88);
          v99 = *(_QWORD *)(v97 + 96);
          while (v99 != v98)
          {
            v99 -= 24;
            *(_QWORD *)buf = v99;
            std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          }
          *(_QWORD *)(v97 + 96) = v98;
          *(_BYTE *)(v114 + 488) = 0;
          goto LABEL_111;
        }
        std::vector<int>::resize((std::vector<unsigned int> *)(v47 + 2), 3 * (int)v49);
        v50 = (IR *)memcpy(*(void **)(*(_QWORD *)(*v9 + 16 * v12) + 16), *(const void **)(**(_QWORD **)(*v9 + 16 * v12) + 224), *(_QWORD *)(**(_QWORD **)(*v9 + 16 * v12) + 232)- *(_QWORD *)(**(_QWORD **)(*v9 + 16 * v12) + 224));
        if ((int)v46 < 3)
          goto LABEL_103;
        v118 = 0;
        v115 = v49;
        v116 = v12;
        do
        {
          v51 = *(_QWORD *)(*(_QWORD *)(*v9 + v14) + 16);
          v122 = 0;
          v123 = 0;
          v121 = (uint64_t *)&v122;
          if ((int)v49 < 1)
LABEL_120:
            __assert_rtn("initVBAPTriangulation", "IRDataTriangulation.cpp", 395, "!realSpeakersConnected.empty()");
          v52 = v118 + v48;
          v53 = (int *)(v51 + 4);
          do
          {
            v54 = v53 - 1;
            v55 = *(v53 - 1);
            v56 = *v53;
            if (v55 == v52)
            {
              if (v56 < (int)v48)
                std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v121, v53, v53);
LABEL_57:
              if (v53[1] >= (int)v48)
                goto LABEL_64;
              v57 = (int *)(v51 + 8);
LABEL_59:
              std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v121, v57, v57);
              goto LABEL_64;
            }
            if (v56 == v52)
            {
              if (v55 < (int)v48)
                std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v121, v54, v53 - 1);
              goto LABEL_57;
            }
            if (v53[1] == v52)
            {
              if (v55 < (int)v48)
              {
                std::__tree<int>::__emplace_unique_key_args<int,int const&>(&v121, v54, v53 - 1);
                v56 = *v53;
              }
              v57 = v53;
              if (v56 < (int)v48)
                goto LABEL_59;
            }
LABEL_64:
            v51 += 12;
            v53 += 3;
            LODWORD(v49) = v49 - 1;
          }
          while ((_DWORD)v49);
          if (!v123)
            goto LABEL_120;
          v119 = 0uLL;
          v120 = 0;
          v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v9 + v14) + 88) + 8)
              - **(_QWORD **)(*(_QWORD *)(*v9 + v14) + 88);
          v59 = (v58 >> 3);
          std::vector<std::unique_ptr<IR::FFTFilterKernel>>::reserve((char **)&v119, v59);
          v60 = v58 & 0x7FFFFFFF8;
          if ((v58 & 0x7FFFFFFF8) != 0)
          {
            v61 = 0;
            do
            {
              v62 = *(const IR::FFTFilterKernel **)(**(_QWORD **)(*(_QWORD *)(*v9 + v14) + 88) + 8 * v61);
              v63 = (IR::FFTFilterKernel *)operator new();
              IR::FFTFilterKernel::FFTFilterKernel(v63, v62);
              v127 = v63;
              IR::FFTFilterKernel::reset(v63);
              v64 = v119.i64[1];
              if (v119.i64[1] >= (unint64_t)v120)
              {
                v65 = (v119.i64[1] - v119.i64[0]) >> 3;
                v66 = v65 + 1;
                if ((unint64_t)(v65 + 1) >> 61)
                  std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
                v67 = (uint64_t)&v120[-v119.i64[0]];
                if ((uint64_t)&v120[-v119.i64[0]] >> 2 > v66)
                  v66 = v67 >> 2;
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
                  v68 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v68 = v66;
                v130 = &v120;
                if (v68)
                  v69 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>((uint64_t)&v120, v68);
                else
                  v69 = 0;
                v70 = (IR::FFTFilterKernel **)&v69[8 * v65];
                v71 = &v69[8 * v68];
                v129 = v71;
                v127 = 0;
                *v70 = v63;
                v72 = v70 + 1;
                *(_QWORD *)&buf[16] = v70 + 1;
                v73 = (_QWORD *)v119.i64[1];
                v74 = (_QWORD *)v119.i64[0];
                if (v119.i64[1] == v119.i64[0])
                {
                  v77 = 0;
                  v76 = vdupq_n_s64(v119.u64[1]);
                }
                else
                {
                  do
                  {
                    v75 = (IR::FFTFilterKernel *)*--v73;
                    *v73 = 0;
                    *--v70 = v75;
                  }
                  while (v73 != v74);
                  v76 = v119;
                  v72 = *(_QWORD **)&buf[16];
                  v71 = v129;
                  v77 = v127;
                }
                v119.i64[0] = (uint64_t)v70;
                v119.i64[1] = (uint64_t)v72;
                *(int64x2_t *)&buf[8] = v76;
                v78 = v120;
                v120 = v71;
                v129 = v78;
                *(_QWORD *)buf = v76.i64[0];
                std::__split_buffer<std::unique_ptr<IR::FFTFilterKernel>>::~__split_buffer((uint64_t)buf);
                v119.i64[1] = (uint64_t)v72;
                if (v77)
                {
                  IR::FFTFilterKernel::~FFTFilterKernel(v77);
                  MEMORY[0x212BC7928]();
                }
              }
              else
              {
                v127 = 0;
                *(_QWORD *)v119.i64[1] = v63;
                v119.i64[1] = v64 + 8;
              }
              ++v61;
            }
            while (v61 != v59);
          }
          v79 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*v9 + v14) + 112) + 8)
                        - **(_QWORD **)(*(_QWORD *)(*v9 + v14) + 112)) >> 2;
          LODWORD(v127) = 0;
          std::vector<float>::vector(buf, v79, &v127);
          v80 = v121;
          if (v121 != (uint64_t *)&v122)
          {
            v81 = 1.0 / (float)v123;
            do
            {
              if (v60)
              {
                v82 = 0;
                v83 = *((_DWORD *)v80 + 7);
                v84 = *(_QWORD *)(*v9 + v14);
                do
                {
                  IR::FFTFilterKernel::accumulate(*(IR::FFTFilterKernel **)(v119.i64[0] + 8 * v82), *(const IR::FFTFilterKernel **)(*(_QWORD *)(*(_QWORD *)(v84 + 88) + 24 * v83) + 8 * v82), v81);
                  v84 = *(_QWORD *)(*v9 + v14);
                  *(float *)(*(_QWORD *)buf + 4 * v82) = *(float *)(*(_QWORD *)buf + 4 * v82)
                                                       + (float)(v81
                                                               * *(float *)(*(_QWORD *)(*(_QWORD *)(v84 + 112)
                                                                                      + 24 * v83)
                                                                          + 4 * v82));
                  ++v82;
                }
                while (v59 != v82);
              }
              v85 = (uint64_t *)v80[1];
              if (v85)
              {
                do
                {
                  v86 = v85;
                  v85 = (uint64_t *)*v85;
                }
                while (v85);
              }
              else
              {
                do
                {
                  v86 = (uint64_t *)v80[2];
                  v87 = *v86 == (_QWORD)v80;
                  v80 = v86;
                }
                while (!v87);
              }
              v80 = v86;
            }
            while (v86 != (uint64_t *)&v122);
          }
          v88 = *(uint64_t **)(*v9 + v14);
          v89 = v88 + 14;
          v90 = v88[15];
          LODWORD(v49) = v115;
          if (v90 >= v88[16])
          {
            v91 = std::vector<std::vector<float>>::__push_back_slow_path<std::vector<float> const&>(v89, (uint64_t)buf);
            v12 = v116;
          }
          else
          {
            std::vector<std::vector<float>>::__construct_one_at_end[abi:ne180100]<std::vector<float> const&>((uint64_t)v89, (uint64_t)buf);
            v12 = v116;
            v91 = v90 + 24;
          }
          v88[15] = v91;
          std::vector<std::vector<std::unique_ptr<IR::FFTFilterKernel>>>::push_back[abi:ne180100]((uint64_t *)(*(_QWORD *)(*v9 + v14) + 88), (uint64_t)&v119);
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
          *(_QWORD *)buf = &v119;
          std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
          std::__tree<int>::destroy((uint64_t)&v121, v122);
          ++v118;
        }
        while (v118 != v117);
LABEL_103:
        v92 = IR::getIRDataLog(v50);
        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
        {
          v93 = (uint64_t)(*(_QWORD *)(*(_QWORD *)(*v9 + v14) + 48) - *(_QWORD *)(*(_QWORD *)(*v9 + v14) + 40)) >> 2;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = "initVBAPTriangulation";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v93;
          *(_WORD *)&buf[22] = 1024;
          LODWORD(v129) = v117;
          _os_log_debug_impl(&dword_210570000, v92, OS_LOG_TYPE_DEBUG, "IRData::%s: initialized VBAP triangulation with %lu vertices and %d virtual speakers", buf, 0x1Cu);
        }
LABEL_111:
        v11 = (IR *)__p;
        if (__p)
        {
          v125 = __p;
          operator delete(__p);
        }
        ++v12;
        v13 = *(_QWORD *)(v114 + 504);
        if (v12 >= (*(_QWORD *)(v114 + 512) - v13) >> 4)
          return v112;
      }
    }
    return 0;
  }
  v103 = IR::getIRDataLog(v7);
  result = os_log_type_enabled(v103, OS_LOG_TYPE_ERROR);
  if (!result)
    return result;
  IR::IRData::Implementation::initVBAPTriangulation(v103, v104, v105, v106, v107, v108, v109, v110);
  return 0;
}

void sub_210596F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::shared_ptr<VBAP>::operator=[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v4 = *a2;
  v3 = a2[1];
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  v7 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return a1;
}

uint64_t std::vector<std::unique_ptr<IR::FFTFilterKernel>>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v8 = 0;
        *((_QWORD *)v10 - 1) = v11;
        v10 -= 8;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<std::unique_ptr<IR::FFTFilterKernel>>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

uint64_t std::__split_buffer<std::shared_ptr<IR::VBAPTriangulationKernel>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__destroy_at[abi:ne180100]<applesauce::CF::DataRef,0>(const void **a1)
{
  const void *v1;

  v1 = *a1;
  if (v1)
    CFRelease(v1);
}

uint64_t std::__split_buffer<applesauce::CF::DataRef>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::__destroy_at[abi:ne180100]<applesauce::CF::DataRef,0>((const void **)(i - 8));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *std::vector<std::list<int>>::__init_with_size[abi:ne180100]<std::list<int>*,std::list<int>*>(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::vector<float>>::__vallocate[abi:ne180100](result, a4);
    result = (_QWORD *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_210597214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  if (a2 != a3)
  {
    v7 = 0;
    do
    {
      std::list<int>::list((_QWORD *)(a4 + v7), a2 + v7);
      v7 += 24;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_210597290(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  if (v2)
  {
    v4 = v1 - 24;
    do
    {
      std::__list_imp<int>::clear((_QWORD *)(v4 + v2));
      v2 -= 24;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::list<int>::list(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _DWORD *v7;

  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 != a2)
  {
    v5 = 1;
    v6 = a1;
    do
    {
      v7 = operator new(0x18uLL);
      v7[4] = *(_DWORD *)(v3 + 16);
      *(_QWORD *)v7 = v6;
      *((_QWORD *)v7 + 1) = a1;
      *((_QWORD *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      v3 = *(_QWORD *)(v3 + 8);
      ++v5;
      v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_210597338(_Unwind_Exception *a1)
{
  _QWORD *v1;

  std::__list_imp<int>::clear(v1);
  _Unwind_Resume(a1);
}

std::vector<unsigned int> *__cdecl std::vector<unsigned int>::vector(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n, const std::vector<unsigned int>::value_type *__x)
{
  std::vector<unsigned int>::pointer end;
  unsigned int *v7;
  std::vector<unsigned int>::size_type v8;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[__n];
    v8 = 4 * __n;
    do
    {
      *end++ = *__x;
      v8 -= 4;
    }
    while (v8);
    this->__end_ = v7;
  }
  return this;
}

void sub_2105973B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unsigned int *std::vector<unsigned int>::__insert_with_size[abi:ne180100]<std::__wrap_iter<unsigned int *>,std::__wrap_iter<unsigned int *>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v7;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *v10;
  unsigned int *value;
  unint64_t v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__split_buffer<unsigned int> __v;

  v5 = (unsigned int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (unsigned int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2105975A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::vector<applesauce::CF::DataRef>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  const void **v2;
  const void **v4;
  void *v5;

  v1 = *a1;
  v2 = (const void **)**a1;
  if (v2)
  {
    v4 = (const void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
        std::__destroy_at[abi:ne180100]<applesauce::CF::DataRef,0>(--v4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::vector<std::vector<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<int>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)&v15);
  }
}

void sub_210597798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<float>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<int>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>,std::reverse_iterator<std::vector<int>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<int>>,std::reverse_iterator<std::vector<int>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<float>>,std::reverse_iterator<std::vector<float>*>>::operator()[abi:ne180100](a1);
  return a1;
}

uint64_t std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

void std::vector<std::vector<std::list<int>>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  void *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    std::vector<std::vector<std::list<int>>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<std::vector<std::list<int>>>::~__split_buffer(&v15);
  }
}

void sub_210597A7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::vector<std::list<int>>>::~__split_buffer((void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::vector<std::list<int>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::list<int>>>,std::reverse_iterator<std::vector<std::list<int>>*>,std::reverse_iterator<std::vector<std::list<int>>*>,std::reverse_iterator<std::vector<std::list<int>>*>>((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::vector<std::list<int>>>,std::reverse_iterator<std::vector<std::list<int>>*>,std::reverse_iterator<std::vector<std::list<int>>*>,std::reverse_iterator<std::vector<std::list<int>>*>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::list<int>>>,std::reverse_iterator<std::vector<std::list<int>>*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v9;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::list<int>>>,std::reverse_iterator<std::vector<std::list<int>>*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::list<int>>>,std::reverse_iterator<std::vector<std::list<int>>*>>::operator()[abi:ne180100](a1);
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<std::list<int>>>,std::reverse_iterator<std::vector<std::list<int>>*>>::operator()[abi:ne180100](uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v3);
    v1 += 3;
  }
}

void **std::__split_buffer<std::vector<std::list<int>>>::~__split_buffer(void **a1)
{
  std::__split_buffer<std::vector<std::list<int>>>::clear[abi:ne180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void std::__split_buffer<std::vector<std::list<int>>>::clear[abi:ne180100](uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v5);
  }
}

uint64_t std::vector<std::list<int>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  char *v15;
  _QWORD v16[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD **)(result - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[3 * a2];
      do
      {
        *v7 = v7;
        v7[1] = v7;
        v7[2] = 0;
        v7 += 3;
      }
      while (v7 != v13);
      v7 = v13;
    }
    a1[1] = (uint64_t)v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v16[4] = result;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::vector<float>>>(result, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v16[0] = v12;
    v16[1] = v14;
    v16[3] = &v12[24 * v11];
    v15 = &v14[24 * a2];
    do
    {
      *(_QWORD *)v14 = v14;
      *((_QWORD *)v14 + 1) = v14;
      *((_QWORD *)v14 + 2) = 0;
      v14 += 24;
    }
    while (v14 != v15);
    v16[2] = v15;
    std::vector<std::list<int>>::__swap_out_circular_buffer(a1, v16);
    return std::__split_buffer<std::list<int>>::~__split_buffer((uint64_t)v16);
  }
  return result;
}

void sub_210597DCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::list<int>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::list<int>>::__swap_out_circular_buffer(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = result;
  v5 = (_QWORD *)*result;
  v4 = (_QWORD *)result[1];
  v6 = (uint64_t *)a2[1];
  while (v4 != v5)
  {
    v6 -= 3;
    v4 -= 3;
    result = std::construct_at[abi:ne180100]<std::list<int>,std::list<int>,std::list<int>*>(v6, v4);
  }
  a2[1] = v6;
  v7 = *v3;
  *v3 = (uint64_t)v6;
  a2[1] = v7;
  v8 = v3[1];
  v3[1] = a2[2];
  a2[2] = v8;
  v9 = v3[2];
  v3[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t *std::construct_at[abi:ne180100]<std::list<int>,std::list<int>,std::list<int>*>(uint64_t *a1, _QWORD *a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  std::list<int>::splice((uint64_t)a1, a1, a2);
  return a1;
}

uint64_t std::list<int>::splice(uint64_t result, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a3[2];
  if (v3)
  {
    v5 = *a3;
    v4 = (uint64_t *)a3[1];
    v6 = *v4;
    *(_QWORD *)(v6 + 8) = *(_QWORD *)(*a3 + 8);
    **(_QWORD **)(v5 + 8) = v6;
    v7 = *a2;
    *(_QWORD *)(v7 + 8) = v4;
    *v4 = v7;
    *a2 = v5;
    *(_QWORD *)(v5 + 8) = a2;
    *(_QWORD *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

uint64_t std::__split_buffer<std::list<int>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 24;
    std::__list_imp<int>::clear((_QWORD *)(i - 24));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__split_buffer<std::unique_ptr<IR::FFTFilterKernel>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 8;
    std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)(i - 8), 0);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

CFArrayRef applesauce::CF::details::make_CFArrayRef<applesauce::CF::DataRef>(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  CFArrayRef CFArray;
  void *__p[3];

  std::vector<void const*>::vector(__p, a1[1] - *a1);
  v2 = *a1;
  v3 = a1[1];
  if (*a1 != v3)
  {
    v4 = __p[0];
    do
    {
      v5 = *v2++;
      *v4++ = v5;
    }
    while (v2 != v3);
  }
  CFArray = applesauce::CF::details::make_CFArrayRef<void const*>((uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return CFArray;
}

void sub_210598004(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],unsigned int>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105980AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],applesauce::CF::DataRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],applesauce::CF::ArrayRef>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

uint64_t applesauce::CF::at_or<applesauce::CF::NumberRef,__CFString const*>@<X0>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(a1, a2, &cf);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v6;
  }
  else
  {
    *a4 = *a3;
    *a3 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::NumberRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::NumberRef,__CFString const*>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _BYTE *a3@<X8>)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFNumberGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

uint64_t applesauce::CF::at_or<applesauce::CF::DataRef>@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  CFTypeRef v6;
  CFTypeRef cf;
  char v9;

  applesauce::CF::details::at_as<applesauce::CF::DataRef>(a1, a2, &cf);
  if (v9)
  {
    v6 = cf;
    if (cf)
      CFRetain(cf);
    *a4 = v6;
  }
  else
  {
    *a4 = *a3;
    *a3 = 0;
  }
  return std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
}

void applesauce::CF::details::at_as<applesauce::CF::DataRef>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  char v9;

  if (!a1)
    goto LABEL_7;
  if (CFArrayGetCount(a1) <= a2)
    goto LABEL_7;
  ValueAtIndex = CFArrayGetValueAtIndex(a1, a2);
  v7 = ValueAtIndex;
  if (!ValueAtIndex)
    goto LABEL_7;
  CFRetain(ValueAtIndex);
  v8 = CFGetTypeID(v7);
  if (v8 != CFDataGetTypeID())
  {
    CFRelease(v7);
LABEL_7:
    v9 = 0;
    *a3 = 0;
    goto LABEL_8;
  }
  *(_QWORD *)a3 = v7;
  v9 = 1;
LABEL_8:
  a3[8] = v9;
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,__CFString const*>(const __CFDictionary *a1@<X0>, const void **a2@<X1>, _BYTE *a3@<X8>)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<__CFString const*>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDataGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

_QWORD *std::allocate_shared[abi:ne180100]<VBAP,std::allocator<VBAP>,std::vector<float> &,std::vector<float> &,VBAP::Algorithm,std::vector<int> const&,std::vector<std::list<int>> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, char **a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X8>)
{
  _QWORD *v12;
  _QWORD *result;

  v12 = operator new(0x158uLL);
  result = std::__shared_ptr_emplace<VBAP>::__shared_ptr_emplace[abi:ne180100]<std::vector<float> &,std::vector<float> &,VBAP::Algorithm,std::vector<int> const&,std::vector<std::list<int>> const&,std::allocator<VBAP>,0>(v12, a1, a2, a3, a4, a5);
  *a6 = v12 + 3;
  a6[1] = v12;
  return result;
}

void sub_2105984CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<VBAP>::__shared_ptr_emplace[abi:ne180100]<std::vector<float> &,std::vector<float> &,VBAP::Algorithm,std::vector<int> const&,std::vector<std::list<int>> const&,std::allocator<VBAP>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4, char **a5, uint64_t *a6)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CA2C990;
  std::construct_at[abi:ne180100]<VBAP,std::vector<float> &,std::vector<float> &,VBAP::Algorithm,std::vector<int> const&,std::vector<std::list<int>> const&,VBAP*>((uint64_t)(a1 + 3), a2, a3, a4, a5, a6);
  return a1;
}

void sub_210598514(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<VBAP>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2C990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<VBAP>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2C990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

void std::__shared_ptr_emplace<VBAP>::__on_zero_shared(uint64_t a1)
{
  VBAP::~VBAP((VBAP *)(a1 + 24));
}

uint64_t std::construct_at[abi:ne180100]<VBAP,std::vector<float> &,std::vector<float> &,VBAP::Algorithm,std::vector<int> const&,std::vector<std::list<int>> const&,VBAP*>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, char **a5, uint64_t *a6)
{
  void *__p;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;

  v15 = 0;
  v16 = 0;
  v17 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v15, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  __p = 0;
  v13 = 0;
  v14 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  VBAP::VBAP(a1, (uint64_t *)&v15, (uint64_t *)&__p, *a4, a5, a6);
  if (__p)
  {
    v13 = __p;
    operator delete(__p);
  }
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  return a1;
}

void sub_210598634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *std::allocate_shared[abi:ne180100]<VBAP,std::allocator<VBAP>,std::vector<float> &,std::vector<float> &,VBAP::Algorithm,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, int *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x158uLL);
  result = std::__shared_ptr_emplace<VBAP>::__shared_ptr_emplace[abi:ne180100]<std::vector<float> &,std::vector<float> &,VBAP::Algorithm,std::allocator<VBAP>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_2105986C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<VBAP>::__shared_ptr_emplace[abi:ne180100]<std::vector<float> &,std::vector<float> &,VBAP::Algorithm,std::allocator<VBAP>,0>(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_24CA2C990;
  std::construct_at[abi:ne180100]<VBAP,std::vector<float> &,std::vector<float> &,VBAP::Algorithm,VBAP*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_21059870C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<VBAP,std::vector<float> &,std::vector<float> &,VBAP::Algorithm,VBAP*>(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v7;
  uint64_t v9[3];
  void *__p;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  uint64_t v18;
  void **v19;

  v16 = 0;
  v17 = 0;
  v18 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v16, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v13, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  v7 = *a4;
  __p = 0;
  v11 = 0;
  v12 = 0;
  memset(v9, 0, sizeof(v9));
  VBAP::VBAP(a1, (uint64_t *)&v16, (uint64_t *)&v13, v7, (char **)&__p, v9);
  v19 = (void **)v9;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100](&v19);
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    v17 = v16;
    operator delete(v16);
  }
  return a1;
}

void sub_210598800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  void *v20;

  *(_QWORD *)(v18 - 40) = v17;
  std::vector<std::list<int>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v18 - 40));
  if (__p)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  v20 = *(void **)(v18 - 64);
  if (v20)
  {
    *(_QWORD *)(v18 - 56) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

void std::__tree<int>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<int>::destroy(a1, *a2);
    std::__tree<int>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t **std::__tree<int>::__emplace_unique_key_args<int,int const&>(uint64_t **a1, int *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *std::__tree<int>::__insert_node_at(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

id AudioDSP::Core::getADCHeadTrackerLog(AudioDSP::Core *this)
{
  if (AudioDSP::Core::getADCHeadTrackerLog(void)::onceToken != -1)
    dispatch_once(&AudioDSP::Core::getADCHeadTrackerLog(void)::onceToken, &__block_literal_global_1);
  return (id)AudioDSP::Core::getADCHeadTrackerLog(void)::gLog;
}

void ___ZN8AudioDSP4Core20getADCHeadTrackerLogEv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.coreaudio", "ADCHeadTracker");
  v1 = (void *)AudioDSP::Core::getADCHeadTrackerLog(void)::gLog;
  AudioDSP::Core::getADCHeadTrackerLog(void)::gLog = (uint64_t)v0;

}

uint64_t AudioDSP::Core::HeadTracker::Implementation::Initialize(AudioDSP::Core::HeadTracker::Implementation *this)
{
  unsigned __int8 v2;
  uint64_t *v3;
  uint64_t v4;
  caulk::concurrent::messenger *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  std::string __p;
  std::string v11;
  char v12;
  __int128 v13;
  int v14;
  char v15;
  char v16;
  char v17;
  char *v18;
  char v19;

  v18 = (char *)this + 56;
  v19 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 56);
  v2 = atomic_load((unsigned __int8 *)this + 41);
  if ((v2 & 1) != 0)
  {
    v4 = *((_QWORD *)this + 9);
    v3 = (uint64_t *)((char *)this + 72);
    if (!v4)
    {
      v5 = (caulk::concurrent::messenger *)std::string::basic_string[abi:ne180100]<0>(&__p, "adc_headtracker_messenger_for_bt_llm_update");
      v6 = caulk::concurrent::messenger::shared_high_priority(v5);
      if (!*(_BYTE *)(v6 + 52))
        std::__throw_bad_optional_access[abi:ne180100]();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v11 = __p;
      v12 = 1;
      v7 = *(_DWORD *)(v6 + 48);
      v13 = *(_OWORD *)(v6 + 32);
      v14 = v7;
      v15 = 1;
      v16 = 0;
      v17 = 0;
      v8 = operator new();
      MEMORY[0x212BC75EC](v8, 1, &v11);
      std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](v3, v8);
      if (v12 && SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v18);
}

void sub_210598CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  MEMORY[0x212BC7928](v22, 0x20C40A4A59CD2);
  if (a22 && a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100](v23 - 32);
  _Unwind_Resume(a1);
}

uint64_t AudioDSP::Core::HeadTracker::Implementation::ConnectRM(id *a1, unsigned int a2)
{
  _BOOL4 v4;
  AudioDSP::Core *v5;
  NSObject *v6;
  _QWORD *v7;
  uint64_t v8;
  caulk::concurrent::messenger *v9;
  AudioDSP::Core *v10;
  uint64_t v11;
  id v12;
  double v13;
  AudioDSP::Core *v14;
  NSObject *v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD *v18;
  _QWORD *v19;
  id v20;
  AudioDSP::Core *v21;
  _QWORD *v22;
  id *v24;
  uint64_t v25;
  uint8_t buf[4];
  _QWORD *v27;
  __int16 v28;
  const char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v4 = getRMMediaSessionClass()
    && objc_msgSend(getRMMediaSessionClass(), "isAvailable")
    && getRMMediaSessionOptionsClass() != 0;
  v24 = a1 + 7;
  LOBYTE(v25) = 1;
  v5 = (AudioDSP::Core *)caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)(a1 + 7));
  *((_DWORD *)a1 + 11) = 0;
  if (a2 && v4)
  {
    if (*((_DWORD *)a1 + 12) == a2 && *((_BYTE *)a1 + 42))
    {
      AudioDSP::Core::getADCHeadTrackerLog(v5);
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *a1;
        if (*((char *)*a1 + 23) < 0)
          v7 = (_QWORD *)*v7;
        *(_DWORD *)buf = 136315394;
        v27 = v7;
        v28 = 2080;
        v29 = "ConnectRM";
        _os_log_impl(&dword_210570000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] RelativeMotion MediaSession is already connected.", buf, 0x16u);
      }
LABEL_25:
      v8 = 0;
LABEL_44:

      goto LABEL_45;
    }
    v9 = (caulk::concurrent::messenger *)a1[9];
    if (v9)
      caulk::concurrent::messenger::drain(v9);
    v6 = objc_alloc_init((Class)getRMMediaSessionOptionsClass());
    v10 = (AudioDSP::Core *)-[NSObject setPredictionIntervalMicroseconds:](v6, "setPredictionIntervalMicroseconds:", 100000, v24, v25);
    if (a2 >= 6)
    {
      AudioDSP::Core::getADCHeadTrackerLog(v10);
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v18 = *a1;
        if (*((char *)*a1 + 23) < 0)
          v18 = (_QWORD *)*v18;
        *(_DWORD *)buf = 136315394;
        v27 = v18;
        v28 = 2080;
        v29 = "ConnectRM";
        _os_log_impl(&dword_210570000, v17, OS_LOG_TYPE_DEFAULT, "[%s|%s] Invalid head tracking mode.", buf, 0x16u);
      }
      v8 = 103;
    }
    else
    {
      -[NSObject setClientMode:](v6, "setClientMode:", qword_2105DDED0[a2 - 1]);
      v11 = objc_msgSend(objc_alloc((Class)getRMMediaSessionClass()), "_initWithOptions:", v6);
      v12 = a1[4];
      a1[4] = (id)v11;

      if ((objc_msgSend(a1[4], "_start") & 1) != 0)
      {
        objc_msgSend(getRMMediaSessionClass(), "defaultFaceToDevicePitchAngle");
        *(float *)&v13 = v13;
        *((_DWORD *)a1 + 11) = LODWORD(v13);
        *((_BYTE *)a1 + 42) = 1;
        *((_DWORD *)a1 + 12) = a2;
        *((_BYTE *)a1 + 40) = 0;
        AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode((AudioDSP::Core::HeadTracker::Implementation *)a1, 1);
        AudioDSP::Core::getADCHeadTrackerLog(v14);
        v15 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v16 = *a1;
          if (*((char *)*a1 + 23) < 0)
            v16 = (_QWORD *)*v16;
          *(_DWORD *)buf = 136315394;
          v27 = v16;
          v28 = 2080;
          v29 = "ConnectRM";
          _os_log_impl(&dword_210570000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] RelativeMotion MediaSession has started.", buf, 0x16u);
        }

        goto LABEL_25;
      }
      v20 = a1[4];
      a1[4] = 0;

      AudioDSP::Core::getADCHeadTrackerLog(v21);
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *a1;
        if (*((char *)*a1 + 23) < 0)
          v22 = (_QWORD *)*v22;
        *(_DWORD *)buf = 136315394;
        v27 = v22;
        v28 = 2080;
        v29 = "ConnectRM";
        _os_log_impl(&dword_210570000, v17, OS_LOG_TYPE_DEFAULT, "[%s|%s] Could not initialize RelativeMotion MediaSession.", buf, 0x16u);
      }
      v8 = 104;
    }

    goto LABEL_44;
  }
  if (!a2)
  {
    v8 = 4294900553;
    AudioDSP::Core::getADCHeadTrackerLog(v5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      AudioDSP::Core::HeadTracker::Implementation::ConnectRM();
    goto LABEL_44;
  }
  if (!v4)
  {
    AudioDSP::Core::getADCHeadTrackerLog(v5);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *a1;
      if (*((char *)*a1 + 23) < 0)
        v19 = (_QWORD *)*v19;
      *(_DWORD *)buf = 136315394;
      v27 = v19;
      v28 = 2080;
      v29 = "ConnectRM";
      _os_log_impl(&dword_210570000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] RelativeMotion is not available.", buf, 0x16u);
    }
    v8 = 105;
    goto LABEL_44;
  }
  v8 = 0;
LABEL_45:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v24);
  return v8;
}

void sub_21059913C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id getRMMediaSessionClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getRMMediaSessionClass(void)::softClass;
  v7 = getRMMediaSessionClass(void)::softClass;
  if (!getRMMediaSessionClass(void)::softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = ___ZL22getRMMediaSessionClassv_block_invoke;
    v3[3] = &unk_24CA2D0F8;
    v3[4] = &v4;
    ___ZL22getRMMediaSessionClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_210599208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id getRMMediaSessionOptionsClass(void)
{
  void *v0;
  id v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2050000000;
  v0 = (void *)getRMMediaSessionOptionsClass(void)::softClass;
  v7 = getRMMediaSessionOptionsClass(void)::softClass;
  if (!getRMMediaSessionOptionsClass(void)::softClass)
  {
    v3[0] = MEMORY[0x24BDAC760];
    v3[1] = 3221225472;
    v3[2] = ___ZL29getRMMediaSessionOptionsClassv_block_invoke;
    v3[3] = &unk_24CA2D0F8;
    v3[4] = &v4;
    ___ZL29getRMMediaSessionOptionsClassv_block_invoke((uint64_t)v3);
    v0 = (void *)v5[3];
  }
  v1 = v0;
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_2105992C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(AudioDSP::Core::HeadTracker::Implementation *this, int a2)
{
  unsigned __int8 v3;
  NSObject *v4;
  caulk::concurrent::messenger *v5;
  _QWORD *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  _QWORD *v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)this + 41);
  if ((v3 & 1) != 0)
  {
    v5 = (caulk::concurrent::messenger *)*((_QWORD *)this + 9);
    if (v5)
    {
      v7 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v7 = (_QWORD *)*v7;
      v8 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 16))(*MEMORY[0x24BEC6EA8], 40, 8);
      *(_QWORD *)(v8 + 8) = 0;
      *(_DWORD *)(v8 + 16) = 0;
      v9 = *((_DWORD *)this + 12);
      *(_DWORD *)(v8 + 24) = a2;
      *(_DWORD *)(v8 + 28) = v9;
      *(_QWORD *)(v8 + 32) = v7;
      *(_QWORD *)v8 = &off_24CA2D140;
      caulk::concurrent::messenger::enqueue(v5, (caulk::concurrent::message *)v8);
    }
    else
    {
      AudioDSP::Core::getADCHeadTrackerLog(this);
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD **)this;
        if (*(char *)(*(_QWORD *)this + 23) < 0)
          v11 = (_QWORD *)*v11;
        v12 = 136315394;
        v13 = v11;
        v14 = 2080;
        v15 = "SetBluetoothLowLatencyMode";
        _os_log_impl(&dword_210570000, v10, OS_LOG_TYPE_DEFAULT, "[%s|%s] Messenger was not initialized. Bluetooth latency mode could not be updated.", (uint8_t *)&v12, 0x16u);
      }

    }
  }
  else
  {
    AudioDSP::Core::getADCHeadTrackerLog(this);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode();

  }
}

uint64_t AudioDSP::Core::HeadTracker::Implementation::DisconnectRM(AudioDSP::Core::HeadTracker::Implementation *this)
{
  caulk::concurrent::messenger *v2;
  void *v3;
  AudioDSP::Core *v4;
  NSObject *v5;
  _QWORD *v6;
  char *v8;
  uint64_t v9;
  uint8_t buf[4];
  _QWORD *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)this + 56;
  LOBYTE(v9) = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 56);
  if (*((_BYTE *)this + 42))
  {
    *((_BYTE *)this + 42) = 0;
    *((_DWORD *)this + 11) = 0;
    v2 = (caulk::concurrent::messenger *)*((_QWORD *)this + 9);
    if (v2)
      caulk::concurrent::messenger::drain(v2);
    objc_msgSend(*((id *)this + 4), "_stop", v8, v9);
    v3 = (void *)*((_QWORD *)this + 4);
    *((_QWORD *)this + 4) = 0;

    AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(this, 0);
    AudioDSP::Core::getADCHeadTrackerLog(v4);
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136315394;
      v11 = v6;
      v12 = 2080;
      v13 = "DisconnectRM";
      _os_log_impl(&dword_210570000, v5, OS_LOG_TYPE_DEFAULT, "[%s|%s] RelativeMotion MediaSession has stopped.", buf, 0x16u);
    }

  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v8);
}

void sub_21059958C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t AudioDSP::Core::HeadTracker::Implementation::GetCurrentHeadPose(AudioDSP::Core::HeadTracker::Implementation *this, float32x4_t *a2, BOOL *a3)
{
  int v6;
  unsigned __int8 v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  double v12;
  float64x2_t v13[2];
  char *v14;
  char v15;

  *a2 = (float32x4_t)xmmword_2105DDE90;
  v14 = (char *)this + 56;
  v6 = caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock((uint64_t)this + 56);
  v15 = v6;
  if (!v6)
  {
    v8 = 102;
    goto LABEL_23;
  }
  if (!*((_BYTE *)this + 42))
  {
    v8 = 107;
    goto LABEL_23;
  }
  v7 = atomic_load((unsigned __int8 *)this + 12);
  if ((v7 & 1) == 0)
  {
    *a3 = 1;
    if (!*((_BYTE *)this + 40))
    {
      *((_BYTE *)this + 40) = 1;
      AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(this, 0);
    }
    v8 = 109;
    goto LABEL_23;
  }
  v12 = 0.0;
  v9 = objc_msgSend(*((id *)this + 4), "_currentAudioListenerPose:timestamp:", v13, &v12);
  if (v12 > 0.0)
  {
    v8 = v9;
    if (v9 == 4)
    {
      if (*((_BYTE *)this + 40))
        goto LABEL_22;
      v10 = 0;
    }
    else
    {
      if (!*((_BYTE *)this + 40) || v9)
      {
LABEL_20:
        if (v8 > 4 || ((1 << v8) & 0x15) == 0)
          goto LABEL_23;
LABEL_22:
        v8 = 0;
        *a2 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v13[0]), v13[1]);
        *a3 = *((_BYTE *)this + 40);
        goto LABEL_23;
      }
      v10 = 1;
    }
    *((_BYTE *)this + 40) = v10 ^ 1;
    AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(this, v10);
    goto LABEL_20;
  }
  *a3 = 1;
  if (!*((_BYTE *)this + 40))
  {
    *((_BYTE *)this + 40) = 1;
    AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(this, 0);
  }
  v8 = 106;
LABEL_23:
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v14);
  return v8;
}

void sub_21059970C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AudioDSP::Core::HeadTracker::Implementation::SetCanAccessHALAPIs(AudioDSP::Core::HeadTracker::Implementation *this, int a2)
{
  AudioDSP::Core *v4;
  unsigned __int8 v5;
  NSObject *v6;
  _QWORD *v7;
  const char *v8;
  unsigned __int8 v9;
  char *v11;
  char v12;
  uint8_t buf[4];
  _QWORD *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v11 = (char *)this + 56;
  v12 = 1;
  v4 = (AudioDSP::Core *)caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock((uint64_t)this + 56);
  v5 = atomic_load((unsigned __int8 *)this + 41);
  if ((v5 & 1) != a2)
  {
    atomic_store(a2, (unsigned __int8 *)this + 41);
    AudioDSP::Core::getADCHeadTrackerLog(v4);
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v7 = (_QWORD *)*v7;
      v8 = "false";
      *(_DWORD *)buf = 136315650;
      v14 = v7;
      v15 = 2080;
      v16 = "SetCanAccessHALAPIs";
      if (a2)
        v8 = "true";
      v17 = 2080;
      v18 = v8;
      _os_log_impl(&dword_210570000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] CanAccessHALAPIs = %s", buf, 0x20u);
    }

    v9 = atomic_load((unsigned __int8 *)this + 41);
    if ((v9 & 1) != 0)
      AudioDSP::Core::HeadTracker::Implementation::Initialize(this);
    else
      std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)this + 9, 0);
  }
  return std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v11);
}

void sub_21059986C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t AudioDSP::Core::HeadTracker::CanAccessHALAPIs(AudioDSP::Core::HeadTracker *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 41));
  return v1 & 1;
}

AudioDSP::Core *AudioDSP::Core::HeadTracker::Implementation::GetUserChoice(AudioDSP::Core::HeadTracker::Implementation *this, AudioObjectID a2, unsigned int *a3)
{
  void *v6;
  uint64_t v7;
  AudioDSP::Core *PropertyData;
  NSObject *v9;
  _QWORD *v10;
  int v11;
  void *v12;
  id v13;
  uint64_t v14;
  AudioDSP::Core *v15;
  NSObject *v16;
  _QWORD *v17;
  uint64_t inQualifierData;
  uint64_t outData;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  outData = 0x100000000;
  objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  v7 = objc_msgSend(v6, "bundleIdentifier");

  inQualifierData = v7;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6273706366;
  inAddress.mElement = 0;
  ioDataSize = 8;
  PropertyData = (AudioDSP::Core *)AudioObjectGetPropertyData(a2, &inAddress, 8u, &inQualifierData, &ioDataSize, &outData);
  AudioDSP::Core::getADCHeadTrackerLog(PropertyData);
  v9 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v10 = *(_QWORD **)this;
    if (*(char *)(*(_QWORD *)this + 23) < 0)
      v10 = (_QWORD *)*v10;
    v11 = BYTE4(outData);
    objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend(v12, "bundleIdentifier");
    v13 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
    v14 = objc_msgSend(v13, "UTF8String");
    inAddress.mSelector = 136315906;
    *(_QWORD *)&inAddress.mScope = v10;
    v23 = 2080;
    v24 = "GetUserChoice";
    v25 = 1024;
    v26 = v11;
    v27 = 2080;
    v28 = v14;
    _os_log_impl(&dword_210570000, v9, OS_LOG_TYPE_DEFAULT, "[%s|%s] Accessibility option for head tracking = %u, client BundleID = %s", (uint8_t *)&inAddress, 0x26u);

  }
  if ((_DWORD)PropertyData)
  {
    AudioDSP::Core::getADCHeadTrackerLog(v15);
    v16 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_QWORD **)this;
      if (*(char *)(*(_QWORD *)this + 23) < 0)
        v17 = (_QWORD *)*v17;
      inAddress.mSelector = 136315650;
      *(_QWORD *)&inAddress.mScope = v17;
      v23 = 2080;
      v24 = "GetUserChoice";
      v25 = 1024;
      v26 = (int)PropertyData;
      _os_log_impl(&dword_210570000, v16, OS_LOG_TYPE_DEFAULT, "[%s|%s] Accessibility option for head tracking is unavailable. Error: %d", (uint8_t *)&inAddress, 0x1Cu);
    }

  }
  else
  {
    *a3 = BYTE4(outData);
  }
  return PropertyData;
}

void sub_210599ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

std::string *AudioDSP::Core::HeadTracker::HeadTracker(std::string *this, __int128 *a2, char a3)
{
  __int128 v5;
  std::string::size_type v6;
  PlatformUtilities_iOS *v7;
  std::string::pointer data;
  char IsMuseDevice;
  std::string::pointer v10;
  _QWORD block[5];

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v5;
  }
  this[1].__r_.__value_.__r.__words[0] = 0;
  v6 = operator new();
  v7 = (PlatformUtilities_iOS *)AudioDSP::Core::HeadTracker::Implementation::Implementation(v6, (uint64_t)this, a3);
  data = this[1].__r_.__value_.__l.__data_;
  this[1].__r_.__value_.__r.__words[0] = v6;
  if (data)
    std::default_delete<AudioDSP::Core::HeadTracker::Implementation>::operator()[abi:ne180100]((uint64_t)&this[1], (uint64_t)data);
  IsMuseDevice = PlatformUtilities_iOS::ProductIsMuseDevice(v7);
  v10 = this[1].__r_.__value_.__l.__data_;
  v10[14] = IsMuseDevice;
  v10[13] = 0;
  block[0] = MEMORY[0x24BDAC760];
  block[1] = 3221225472;
  block[2] = ___ZN8AudioDSP4Core11HeadTrackerC2ERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEb_block_invoke;
  block[3] = &__block_descriptor_40_e5_v8__0l;
  block[4] = this;
  if (AudioDSP::Core::HeadTracker::HeadTracker(std::string const&,BOOL)::once != -1)
    dispatch_once(&AudioDSP::Core::HeadTracker::HeadTracker(std::string const&,BOOL)::once, block);
  return this;
}

void sub_210599C00(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  *v2 = 0;
  if (v4)
    std::default_delete<AudioDSP::Core::HeadTracker::Implementation>::operator()[abi:ne180100]((uint64_t)v2, v4);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *CASmartPreferences::Read(CASmartPreferences *this, const __CFString *a2, const __CFString *a3, BOOL *a4)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v6[0] = &off_24CA2C848;
  v6[1] = a3;
  v7 = v6;
  CASmartPreferences::AddHandler<BOOL>(this, a2, (uint64_t)CASmartPreferences::InterpretBoolean, (uint64_t)v6);
  result = v7;
  if (v7 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v7)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_210599D10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

std::string *AudioDSP::Core::HeadTracker::HeadTracker(std::string *this, const void *a2, char a3)
{
  void *__p[2];
  char v7;

  caulk::make_string((caulk *)"%p", (uint64_t)__p, a2);
  AudioDSP::Core::HeadTracker::HeadTracker(this, (__int128 *)__p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
  return this;
}

{
  void *__p[2];
  char v7;

  caulk::make_string((caulk *)"%p", (uint64_t)__p, a2);
  AudioDSP::Core::HeadTracker::HeadTracker(this, (__int128 *)__p, a3);
  if (v7 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_210599DB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void caulk::make_string(caulk *this@<X0>, uint64_t a2@<X8>, ...)
{
  int v5;
  int v6;
  char *v7;
  size_t v8;
  int v9;
  va_list va;

  va_start(va, a2);
  v5 = vsnprintf(0, 0, (const char *)this, va);
  if (v5 <= 0)
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    std::string::resize((std::string *)a2, (v5 + 1), 0);
    v6 = *(char *)(a2 + 23);
    if (v6 >= 0)
      v7 = (char *)a2;
    else
      v7 = *(char **)a2;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a2 + 23);
    else
      v8 = *(_QWORD *)(a2 + 8);
    v9 = vsnprintf(v7, v8, (const char *)this, va);
    std::string::resize((std::string *)a2, v9, 0);
  }
}

void sub_210599ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void AudioDSP::Core::HeadTracker::~HeadTracker(AudioDSP::Core::HeadTracker::Implementation **this)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(this + 3);
  AudioDSP::Core::HeadTracker::Implementation::DisconnectRM(this[3]);
  AudioDSP::Core::HeadTracker::UnregisterUserChoiceListener((AudioDSP::Core::HeadTracker *)this);
  v3 = *v2;
  *v2 = 0;
  if (v3)
    std::default_delete<AudioDSP::Core::HeadTracker::Implementation>::operator()[abi:ne180100]((uint64_t)v2, v3);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t AudioDSP::Core::HeadTracker::DisconnectRM(AudioDSP::Core::HeadTracker::Implementation **this)
{
  return AudioDSP::Core::HeadTracker::Implementation::DisconnectRM(this[3]);
}

void AudioDSP::Core::HeadTracker::UnregisterUserChoiceListener(AudioDSP::Core::HeadTracker *this)
{
  AudioDSP::Core::HeadTracker *v1;
  unsigned __int8 v2;
  NSObject *v3;
  AudioDSP::Core *v4;
  AudioDSP::Core *v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  AudioDSP::Core::HeadTracker *v9;
  int v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  NSObject *v14;
  AudioDSP::Core::HeadTracker *v15;
  int v16;
  AudioObjectPropertyAddress v17;
  uint64_t v18;
  char v19;
  uint8_t buf[4];
  AudioDSP::Core::HeadTracker *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;

  v1 = this;
  v28 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 41));
  if ((v2 & 1) != 0)
  {
    atomic_store(1u, (unsigned __int8 *)(*((_QWORD *)this + 3) + 12));
    v18 = *((_QWORD *)this + 3) + 16;
    v19 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v18);
    v4 = (AudioDSP::Core *)*(unsigned int *)(*((_QWORD *)v1 + 3) + 8);
    if (!(_DWORD)v4)
    {
      AudioDSP::Core::getADCHeadTrackerLog(v4);
      v14 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        AudioDSP::Core::HeadTracker::UnregisterUserChoiceListener();

      goto LABEL_22;
    }
    *(_QWORD *)&v17.mSelector = 0x676C6F6273706366;
    v17.mElement = 0;
    v5 = (AudioDSP::Core *)AudioObjectRemovePropertyListener((AudioObjectID)v4, &v17, (AudioObjectPropertyListenerProc)AudioDSP::Core::HeadTracker::CallbackFunction, v1);
    v6 = (int)v5;
    AudioDSP::Core::getADCHeadTrackerLog(v5);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v8)
      {
        v9 = v1;
        if (*((char *)v1 + 23) < 0)
          v9 = *(AudioDSP::Core::HeadTracker **)v1;
        v10 = *(_DWORD *)(*((_QWORD *)v1 + 3) + 8);
        *(_DWORD *)buf = 136315906;
        v21 = v9;
        v22 = 2080;
        v23 = "UnregisterUserChoiceListener";
        v24 = 1024;
        v25 = v10;
        v26 = 1024;
        v27 = v6;
        v11 = "[%s|%s] Failed to unregister SpatialConfig listener. Device ID: %u. Error: %d";
        v12 = v7;
        v13 = 34;
LABEL_20:
        _os_log_impl(&dword_210570000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
      }
    }
    else if (v8)
    {
      v15 = v1;
      if (*((char *)v1 + 23) < 0)
        v15 = *(AudioDSP::Core::HeadTracker **)v1;
      v16 = *(_DWORD *)(*((_QWORD *)v1 + 3) + 8);
      *(_DWORD *)buf = 136315650;
      v21 = v15;
      v22 = 2080;
      v23 = "UnregisterUserChoiceListener";
      v24 = 1024;
      v25 = v16;
      v11 = "[%s|%s] SpatialConfig listener is unregistered for device ID: %u";
      v12 = v7;
      v13 = 28;
      goto LABEL_20;
    }

    *(_DWORD *)(*((_QWORD *)v1 + 3) + 8) = 0;
LABEL_22:
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v18);
    return;
  }
  AudioDSP::Core::getADCHeadTrackerLog(this);
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)v1 + 23) < 0)
      v1 = *(AudioDSP::Core::HeadTracker **)v1;
    *(_DWORD *)buf = 136315394;
    v21 = v1;
    v22 = 2080;
    v23 = "UnregisterUserChoiceListener";
    _os_log_impl(&dword_210570000, v3, OS_LOG_TYPE_DEFAULT, "[%s|%s] Host disallowed HAL API access. Control center listener is not available.", buf, 0x16u);
  }

}

void sub_21059A1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t AudioDSP::Core::HeadTracker::Initialize(uint64_t a1, __int16 a2)
{
  if ((a2 & 0xFF00) != 0)
    AudioDSP::Core::HeadTracker::Implementation::SetCanAccessHALAPIs(*(AudioDSP::Core::HeadTracker::Implementation **)(a1 + 24), a2 != 0);
  return AudioDSP::Core::HeadTracker::Implementation::Initialize(*(AudioDSP::Core::HeadTracker::Implementation **)(a1 + 24));
}

uint64_t AudioDSP::Core::HeadTracker::SetCanAccessHALAPIs(AudioDSP::Core::HeadTracker::Implementation **this, int a2)
{
  return AudioDSP::Core::HeadTracker::Implementation::SetCanAccessHALAPIs(this[3], a2);
}

uint64_t AudioDSP::Core::HeadTracker::ConnectRM(uint64_t a1, unsigned int a2)
{
  AudioDSP::Core *v2;
  NSObject *v3;

  v2 = *(AudioDSP::Core **)(a1 + 24);
  if (*((_BYTE *)v2 + 13))
  {
    AudioDSP::Core::getADCHeadTrackerLog(v2);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      AudioDSP::Core::HeadTracker::ConnectRM();
LABEL_7:

    return 108;
  }
  if (*((_BYTE *)v2 + 14))
  {
    AudioDSP::Core::getADCHeadTrackerLog(v2);
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
      AudioDSP::Core::HeadTracker::ConnectRM();
    goto LABEL_7;
  }
  return AudioDSP::Core::HeadTracker::Implementation::ConnectRM((id *)v2, a2);
}

uint64_t AudioDSP::Core::HeadTracker::HasActiveRMConnection(AudioDSP::Core::HeadTracker *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;

  v1 = *((_QWORD *)this + 3);
  v4 = v1 + 56;
  v5 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v1 + 56);
  v2 = *(unsigned __int8 *)(v1 + 42);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v4);
  return v2;
}

unint64_t AudioDSP::Core::HeadTracker::GetCurrentHeadPose(AudioDSP::Core::HeadTracker::Implementation **this, float32x4_t *a2)
{
  BOOL v3;

  return AudioDSP::Core::HeadTracker::Implementation::GetCurrentHeadPose(this[3], a2, &v3);
}

unint64_t AudioDSP::Core::HeadTracker::GetCurrentHeadPose(AudioDSP::Core::HeadTracker::Implementation **this, float32x4_t *a2, BOOL *a3)
{
  return AudioDSP::Core::HeadTracker::Implementation::GetCurrentHeadPose(this[3], a2, a3);
}

uint64_t AudioDSP::Core::HeadTracker::IsEnable(AudioDSP::Core::HeadTracker *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 12));
  return v1 & 1;
}

float AudioDSP::Core::HeadTracker::GetAppliedFaceToDevicePitchAngleOffset(AudioDSP::Core::HeadTracker *this)
{
  uint64_t v1;
  float v2;
  uint64_t v4;
  char v5;

  v1 = *((_QWORD *)this + 3);
  v4 = v1 + 56;
  v5 = 1;
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v1 + 56);
  v2 = *(float *)(v1 + 44);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v4);
  return v2;
}

float AudioDSP::Core::HeadTracker::GetDefaultFaceToDevicePitchAngleOffset(AudioDSP::Core::HeadTracker *this)
{
  double v1;

  objc_msgSend(getRMMediaSessionClass(), "defaultFaceToDevicePitchAngle");
  return v1;
}

BOOL AudioDSP::Core::HeadTracker::HardwareSupportsHeadTracking(AudioDSP::Core::HeadTracker *this, unsigned int *a2)
{
  AudioDSP::Core *DeviceOrPortID;
  int v4;
  AudioDSP::Core *HasProperty;
  AudioObjectID v6;
  AudioDSP::Core *PropertyData;
  int v8;
  NSObject *v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  int v13;
  _BOOL8 v14;
  AudioDSP::Core *v16;
  char v17;
  NSObject *v18;
  int v19;
  AudioObjectID v20;
  AudioDSP::Core *v21;
  NSObject *v22;
  NSObject *v23;
  void *exception;
  CFTypeRef cf;
  CFTypeRef outData;
  AudioObjectPropertyAddress inAddress;
  AudioObjectPropertyAddress ioDataSize;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  DeviceOrPortID = (AudioDSP::Core *)AudioDSPCoreUtility::GetDeviceOrPortID(this, a2);
  v4 = (int)DeviceOrPortID;
  if ((_DWORD)DeviceOrPortID || (DeviceOrPortID = (AudioDSP::Core *)*(unsigned int *)this, !(_DWORD)DeviceOrPortID))
  {
    AudioDSP::Core::getADCHeadTrackerLog(DeviceOrPortID);
    v11 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      ioDataSize.mSelector = 136315394;
      *(_QWORD *)&ioDataSize.mScope = "HardwareSupportsHeadTracking";
      v29 = 1024;
      v30 = v4;
      _os_log_impl(&dword_210570000, v11, OS_LOG_TYPE_DEFAULT, "%s: Could not extract device ID. Error %d", (uint8_t *)&ioDataSize, 0x12u);
    }

    goto LABEL_15;
  }
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6262747366;
  inAddress.mElement = 0;
  HasProperty = (AudioDSP::Core *)AudioObjectHasProperty((AudioObjectID)DeviceOrPortID, &inAddress);
  if (!(_DWORD)HasProperty)
  {
    AudioDSP::Core::getADCHeadTrackerLog(HasProperty);
    v12 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = *(_DWORD *)this;
      ioDataSize.mSelector = 136315394;
      *(_QWORD *)&ioDataSize.mScope = "HardwareSupportsHeadTracking";
      v29 = 1024;
      v30 = v13;
      _os_log_impl(&dword_210570000, v12, OS_LOG_TYPE_DEFAULT, "%s: Head-tracking is not supported, feature dictionary not available. Device ID: %d", (uint8_t *)&ioDataSize, 0x12u);
    }

    goto LABEL_15;
  }
  outData = 0;
  v6 = *(_DWORD *)this;
  ioDataSize.mSelector = 8;
  PropertyData = (AudioDSP::Core *)AudioObjectGetPropertyData(v6, &inAddress, 0, 0, &ioDataSize.mSelector, &outData);
  v8 = (int)PropertyData;
  if ((_DWORD)PropertyData)
  {
    AudioDSP::Core::getADCHeadTrackerLog(PropertyData);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *(_DWORD *)this;
      ioDataSize.mSelector = 136315650;
      *(_QWORD *)&ioDataSize.mScope = "HardwareSupportsHeadTracking";
      v29 = 1024;
      v30 = v8;
      v31 = 1024;
      v32 = v10;
      _os_log_impl(&dword_210570000, v9, OS_LOG_TYPE_DEFAULT, "%s: Head-tracking is not supported, Error %d, Device ID: %d", (uint8_t *)&ioDataSize, 0x18u);
    }

    if (outData)
      CFRelease(outData);
LABEL_15:
    v14 = 0;
LABEL_16:
    *(_DWORD *)this = 0;
    return v14;
  }
  applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, outData);
  if (!cf)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  v16 = (AudioDSP::Core *)applesauce::CF::details::find_at_key_or_optional<BOOL,char const(&)[52]>((const __CFDictionary *)cf, "kBluetoothAudioDeviceFeatureHeadTrackedSpatialAudio");
  if ((unsigned __int16)v16 <= 0x100u)
    v17 = 0;
  else
    v17 = (char)v16;
  if (!v17)
  {
    AudioDSP::Core::getADCHeadTrackerLog(v16);
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_DWORD *)this;
      ioDataSize.mSelector = 136315394;
      *(_QWORD *)&ioDataSize.mScope = "HardwareSupportsHeadTracking";
      v29 = 1024;
      v30 = v19;
      _os_log_impl(&dword_210570000, v18, OS_LOG_TYPE_DEFAULT, "%s: Head-tracking is not supported, HeadTrackedSpatialAudio = false. Device ID: %d", (uint8_t *)&ioDataSize, 0x12u);
    }

    *(_DWORD *)this = 0;
  }
  if (cf)
    CFRelease(cf);
  if (!v17)
    return 0;
  LODWORD(cf) = 0;
  v20 = *(_DWORD *)this;
  *(_QWORD *)&ioDataSize.mSelector = 0x676C6F6273706873;
  ioDataSize.mElement = 0;
  LODWORD(outData) = 4;
  v21 = (AudioDSP::Core *)AudioObjectGetPropertyData(v20, &ioDataSize, 0, 0, (UInt32 *)&outData, &cf);
  if ((_DWORD)v21)
  {
    AudioDSP::Core::getADCHeadTrackerLog(v21);
    v22 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      ioDataSize.mSelector = 136315138;
      *(_QWORD *)&ioDataSize.mScope = "HardwareSupportsHeadTracking";
      _os_log_impl(&dword_210570000, v22, OS_LOG_TYPE_DEFAULT, "%s: Error getting HAL property.", (uint8_t *)&ioDataSize, 0xCu);
    }

  }
  v14 = (_DWORD)cf != 0;
  if (!(_DWORD)cf)
  {
    AudioDSP::Core::getADCHeadTrackerLog(v21);
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      ioDataSize.mSelector = 136315138;
      *(_QWORD *)&ioDataSize.mScope = "HardwareSupportsHeadTracking";
      _os_log_impl(&dword_210570000, v23, OS_LOG_TYPE_DEFAULT, "%s: Head-tracking is disabled by the user.", (uint8_t *)&ioDataSize, 0xCu);
    }

    goto LABEL_16;
  }
  return v14;
}

void sub_21059A7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  applesauce::CF::DictionaryRef::~DictionaryRef(&a9);
  _Unwind_Resume(a1);
}

void AudioDSP::Core::HeadTracker::RegisterUserChoiceListener(AudioDSP::Core::HeadTracker *this, unsigned int *a2)
{
  AudioDSP::Core::HeadTracker *v2;
  unsigned __int8 v3;
  NSObject *v4;
  _BOOL4 v5;
  AudioObjectID v6;
  _BOOL4 v7;
  int v8;
  NSObject *v9;
  AudioDSP::Core::HeadTracker *v10;
  NSObject *v11;
  AudioDSP::Core *v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  AudioDSP::Core::HeadTracker *v16;
  AudioDSP::Core *UserChoice;
  NSObject *v18;
  AudioDSP::Core::HeadTracker *v19;
  unsigned int v20;
  AudioDSP::Core::HeadTracker *v21;
  unsigned int v22;
  AudioObjectPropertyAddress inAddress;
  uint64_t v24;
  char v25;
  AudioObjectID inObjectID;
  uint8_t buf[4];
  AudioDSP::Core::HeadTracker *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  AudioObjectID v32;
  __int16 v33;
  int v34;
  uint64_t v35;

  v2 = this;
  v35 = *MEMORY[0x24BDAC8D0];
  v3 = atomic_load((unsigned __int8 *)(*((_QWORD *)this + 3) + 41));
  if ((v3 & 1) != 0)
  {
    inObjectID = 0;
    v5 = AudioDSP::Core::HeadTracker::HardwareSupportsHeadTracking((AudioDSP::Core::HeadTracker *)&inObjectID, a2);
    v24 = *((_QWORD *)v2 + 3) + 16;
    v25 = 1;
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(v24);
    v6 = inObjectID;
    if (inObjectID)
      v7 = v5;
    else
      v7 = 0;
    if (v7)
    {
      v8 = *(_DWORD *)(*((_QWORD *)v2 + 3) + 8);
      if (inObjectID == v8)
      {
        AudioDSP::Core::getADCHeadTrackerLog((AudioDSP::Core *)inObjectID);
        v9 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v10 = v2;
          if (*((char *)v2 + 23) < 0)
            v10 = *(AudioDSP::Core::HeadTracker **)v2;
          *(_DWORD *)buf = 136315650;
          v28 = v10;
          v29 = 2080;
          v30 = "RegisterUserChoiceListener";
          v31 = 1024;
          v32 = inObjectID;
          _os_log_impl(&dword_210570000, v9, OS_LOG_TYPE_DEFAULT, "[%s|%s] SpatialConfig listener is already registered for device ID: %u", buf, 0x1Cu);
        }

      }
      else
      {
        if (v8)
        {
          AudioDSP::Core::HeadTracker::UnregisterUserChoiceListener(v2);
          v6 = inObjectID;
        }
        *(_QWORD *)&inAddress.mSelector = 0x676C6F6273706366;
        inAddress.mElement = 0;
        v12 = (AudioDSP::Core *)AudioObjectAddPropertyListener(v6, &inAddress, (AudioObjectPropertyListenerProc)AudioDSP::Core::HeadTracker::CallbackFunction, v2);
        v13 = (int)v12;
        AudioDSP::Core::getADCHeadTrackerLog(v12);
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = v14;
        if (v13)
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v21 = v2;
            if (*((char *)v2 + 23) < 0)
              v21 = *(AudioDSP::Core::HeadTracker **)v2;
            *(_DWORD *)buf = 136315906;
            v28 = v21;
            v29 = 2080;
            v30 = "RegisterUserChoiceListener";
            v31 = 1024;
            v32 = inObjectID;
            v33 = 1024;
            v34 = v13;
            _os_log_error_impl(&dword_210570000, v15, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to register SpatialConfig listener for device ID: %u. Error: %d", buf, 0x22u);
          }

        }
        else
        {
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            v16 = v2;
            if (*((char *)v2 + 23) < 0)
              v16 = *(AudioDSP::Core::HeadTracker **)v2;
            *(_DWORD *)buf = 136315650;
            v28 = v16;
            v29 = 2080;
            v30 = "RegisterUserChoiceListener";
            v31 = 1024;
            v32 = inObjectID;
            _os_log_impl(&dword_210570000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] SpatialConfig listener is registered for device ID: %u.", buf, 0x1Cu);
          }

          v22 = 0;
          UserChoice = AudioDSP::Core::HeadTracker::Implementation::GetUserChoice(*((AudioDSP::Core::HeadTracker::Implementation **)v2 + 3), inObjectID, &v22);
          if (!(_DWORD)UserChoice)
          {
            AudioDSP::Core::getADCHeadTrackerLog(UserChoice);
            v18 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              v19 = v2;
              if (*((char *)v2 + 23) < 0)
                v19 = *(AudioDSP::Core::HeadTracker **)v2;
              v20 = v22;
              *(_DWORD *)buf = 136315650;
              v28 = v19;
              v29 = 2080;
              v30 = "RegisterUserChoiceListener";
              v31 = 1024;
              v32 = v22;
              _os_log_impl(&dword_210570000, v18, OS_LOG_TYPE_DEFAULT, "[%s|%s] Setting mIsEnabled = %u.", buf, 0x1Cu);
            }
            else
            {
              v20 = v22;
            }

            atomic_store(v20 != 0, (unsigned __int8 *)(*((_QWORD *)v2 + 3) + 12));
          }
        }
      }
    }
    else
    {
      AudioDSP::Core::getADCHeadTrackerLog((AudioDSP::Core *)inObjectID);
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        AudioDSP::Core::HeadTracker::RegisterUserChoiceListener();

      if (*(_DWORD *)(*((_QWORD *)v2 + 3) + 8))
        AudioDSP::Core::HeadTracker::UnregisterUserChoiceListener(v2);
    }
    *(_DWORD *)(*((_QWORD *)v2 + 3) + 8) = inObjectID;
    std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)&v24);
  }
  else
  {
    AudioDSP::Core::getADCHeadTrackerLog(this);
    v4 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v2 + 23) < 0)
        v2 = *(AudioDSP::Core::HeadTracker **)v2;
      *(_DWORD *)buf = 136315394;
      v28 = v2;
      v29 = 2080;
      v30 = "RegisterUserChoiceListener";
      _os_log_impl(&dword_210570000, v4, OS_LOG_TYPE_DEFAULT, "[%s|%s] Host disallowed HAL API access. Control center listener is not available.", buf, 0x16u);
    }

  }
}

void sub_21059ABF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

AudioDSP::Core *AudioDSP::Core::HeadTracker::CallbackFunction(AudioDSP::Core::HeadTracker *this, unsigned int a2, unsigned int a3, const AudioObjectPropertyAddress *a4, void *a5)
{
  const AudioObjectPropertyAddress *v5;
  AudioDSP::Core *UserChoice;
  AudioDSP::Core *v7;
  unsigned int v8;
  NSObject *v9;
  const char *v10;
  unsigned int v12;
  uint8_t buf[4];
  const AudioObjectPropertyAddress *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  v5 = a4;
  v19 = *MEMORY[0x24BDAC8D0];
  v12 = 0;
  UserChoice = AudioDSP::Core::HeadTracker::Implementation::GetUserChoice(*(AudioDSP::Core::HeadTracker::Implementation **)&a4[2].mSelector, (AudioObjectID)this, &v12);
  v7 = UserChoice;
  if (!(_DWORD)UserChoice)
  {
    v8 = v12;
    atomic_store(v12 != 0, (unsigned __int8 *)(*(_QWORD *)&v5[2].mSelector + 12));
    AudioDSP::Core::getADCHeadTrackerLog(UserChoice);
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      if (SHIBYTE(v5[1].mElement) < 0)
        v5 = *(const AudioObjectPropertyAddress **)&v5->mSelector;
      v10 = "enabled";
      *(_DWORD *)buf = 136315650;
      v14 = v5;
      v15 = 2080;
      v16 = "CallbackFunction";
      if (!v8)
        v10 = "disabled";
      v17 = 2080;
      v18 = v10;
      _os_log_impl(&dword_210570000, v9, OS_LOG_TYPE_DEFAULT, "[%s|%s] User has %s head-tracking.", buf, 0x20u);
    }

  }
  return v7;
}

Class ___ZL22getRMMediaSessionClassv_block_invoke(uint64_t a1)
{
  Class result;

  RelativeMotionLibrary();
  result = objc_getClass("RMMediaSession");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    ___ZL22getRMMediaSessionClassv_block_invoke_cold_1();
  getRMMediaSessionClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void RelativeMotionLibrary(void)
{
  void *v0;

  if (!RelativeMotionLibraryCore(char **)::frameworkLibrary)
    RelativeMotionLibraryCore(char **)::frameworkLibrary = _sl_dlopen();
  if (!RelativeMotionLibraryCore(char **)::frameworkLibrary)
  {
    v0 = (void *)abort_report_np();
    free(v0);
  }
}

Class ___ZL29getRMMediaSessionOptionsClassv_block_invoke(uint64_t a1)
{
  Class result;

  RelativeMotionLibrary();
  result = objc_getClass("RMMediaSessionOptions");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    ___ZL29getRMMediaSessionOptionsClassv_block_invoke_cold_1();
  getRMMediaSessionOptionsClass(void)::softClass = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

_QWORD *CASmartPreferences::AddHandler<BOOL>(CASmartPreferences *a1, const void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  _QWORD v17[3];
  _QWORD *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = CASmartPreferences::instance(a1);
  v14 = a3;
  v9 = v15;
  std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v15, a4);
  v18 = 0;
  v10 = operator new(0x30uLL);
  *v10 = &off_24CA2C800;
  v10[1] = v14;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)(v10 + 2), (uint64_t)v15);
  v18 = v10;
  CASmartPreferences::_RegisterFirstHandler((uint64_t)v8, a1, a2, v17);
  result = v18;
  if (v18 == v17)
  {
    v12 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_6;
    v12 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v12))();
LABEL_6:
  if (v16 == v15)
  {
    v13 = 4;
  }
  else
  {
    if (!v16)
      return result;
    v13 = 5;
    v9 = v16;
  }
  return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v9 + 8 * v13))(v9);
}

void sub_21059AFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, _QWORD *a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  _QWORD *v17;
  char *v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a13 == v17)
  {
    v22 = 4;
  }
  else
  {
    if (!a13)
      goto LABEL_11;
    v22 = 5;
    v17 = a13;
  }
  (*(void (**)(_QWORD *))(*v17 + 8 * v22))(v17);
LABEL_11:
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24CA2C800;
  v2 = a1 + 2;
  v3 = (_QWORD *)a1[5];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::~__func(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24CA2C800;
  v1 = a1 + 2;
  v2 = (_QWORD *)a1[5];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = operator new(0x30uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *v2 = &off_24CA2C800;
  v2[1] = v3;
  std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_21059B140(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::__clone(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *a2 = &off_24CA2C800;
  a2[1] = v2;
  return std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)(a2 + 2), a1 + 16);
}

_QWORD *std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 16);
  result = *(_QWORD **)(a1 + 40);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::destroy_deallocate(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 16;
  v3 = (char *)*((_QWORD *)__p + 5);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

BOOL std::__function::__func<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1},std::allocator<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1}>,BOOL ()(void const*)>::operator()(uint64_t a1, uint64_t *a2)
{
  return std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1} &,void const*>(a1 + 8, a2);
}

uint64_t std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

BOOL std::__invoke_void_return_wrapper<BOOL,false>::__call[abi:ne180100]<void CASmartPreferences::AddHandler<BOOL>(__CFString const*,__CFString const*,BOOL (*)(void const*,BOOL &),std::function<void ()(BOOL)>)::{lambda(void const*)#1} &,void const*>(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v7;
  char v8;

  v3 = *a2;
  v7 = 0;
  v4 = (*(uint64_t (**)(uint64_t, char *))a1)(v3, &v7);
  if (!v7)
    return 0;
  v8 = v4;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    std::__throw_bad_function_call[abi:ne180100]();
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v5 + 48))(v5, &v8);
  return v7 != 0;
}

void std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,BOOL &)::{lambda(BOOL)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,BOOL &)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,BOOL &)::{lambda(BOOL)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,BOOL &)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2C848;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,BOOL &)::{lambda(BOOL)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,BOOL &)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA2C848;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<CASmartPreferences::Read(__CFString const*,__CFString const*,BOOL &)::{lambda(BOOL)#1},std::allocator<CASmartPreferences::Read(__CFString const*,__CFString const*,BOOL &)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t result, _BYTE *a2)
{
  **(_BYTE **)(result + 8) = *a2;
  return result;
}

uint64_t std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x212BC75F8]();
    JUMPOUT(0x212BC7928);
  }
  return result;
}

uint64_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::lock(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  int v6;

  result = (uint64_t)pthread_self();
  v3 = result;
  v4 = atomic_load((unint64_t *)a1);
  if (result)
  {
    if (v4)
      v5 = result == v4;
    else
      v5 = 0;
    if (!v5)
      goto LABEL_9;
  }
  else if (v4)
  {
LABEL_9:
    result = caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 12));
    atomic_store(v3, (unint64_t *)a1);
    v6 = 1;
    goto LABEL_10;
  }
  v6 = *(_DWORD *)(a1 + 8) + 1;
LABEL_10:
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

uint64_t std::unique_lock<caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(*(_QWORD *)a1);
  return a1;
}

pthread_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock(uint64_t a1)
{
  pthread_t result;
  unint64_t v3;
  BOOL v4;
  int v5;
  int v6;

  result = pthread_self();
  v3 = atomic_load((unint64_t *)a1);
  if (result)
  {
    if (v3)
      v4 = result == (pthread_t)v3;
    else
      v4 = 0;
    if (!v4)
LABEL_11:
      caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock();
  }
  else if (v3)
  {
    goto LABEL_11;
  }
  v5 = *(_DWORD *)(a1 + 8);
  if (v5 <= 0)
    caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock();
  v6 = v5 - 1;
  *(_DWORD *)(a1 + 8) = v6;
  if (!v6)
  {
    atomic_store(0, (unint64_t *)a1);
    return (pthread_t)caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(a1 + 12));
  }
  return result;
}

void caulk::concurrent::details::rt_message_call<AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(unsigned int)::$_0,unsigned int &,HeadTrackingMode &,char const*>::~rt_message_call(caulk::concurrent::message *a1)
{
  caulk::concurrent::message::~message(a1);
  JUMPOUT(0x212BC7928);
}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(unsigned int)::$_0,unsigned int &,HeadTrackingMode &,char const*>::perform(caulk::concurrent::message *a1, unsigned int *a2)
{
  caulk::concurrent::message *v3;

  v3 = a1;
  caulk::concurrent::details::message_call<AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode::$_0,unsigned int &,HeadTrackingMode &,char const*>::perform((uint64_t)a1, a2);
  return caulk::concurrent::details::rt_message_call<AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode::$_0,unsigned int &,HeadTrackingMode &,char const*>::rt_cleanup::~rt_cleanup(&v3);
}

void sub_21059B4E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  caulk::concurrent::details::rt_message_call<AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode::$_0,unsigned int &,HeadTrackingMode &,char const*>::rt_cleanup::~rt_cleanup((caulk::concurrent::message **)va);
  _Unwind_Resume(a1);
}

void caulk::concurrent::details::message_call<AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(unsigned int)::$_0,unsigned int &,HeadTrackingMode &,char const*>::perform(uint64_t a1, unsigned int *a2)
{
  int v2;
  int v3;
  uint64_t v4;
  AudioDSP::Core *DeviceOrPortID;
  AudioDSP::Core *PropertyData;
  int v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  int v12;
  int v14;
  int v16;
  AudioDSP::Core *v17;
  int v18;
  _BOOL4 v19;
  const char *v20;
  int outData;
  AudioObjectID inObjectID;
  UInt32 ioDataSize;
  AudioObjectPropertyAddress inAddress;
  __int16 v25;
  const char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v3 = *(_DWORD *)(a1 + 24);
  v2 = *(_DWORD *)(a1 + 28);
  v4 = *(_QWORD *)(a1 + 32);
  inObjectID = 0;
  DeviceOrPortID = (AudioDSP::Core *)AudioDSPCoreUtility::GetDeviceOrPortID((AudioDSPCoreUtility *)&inObjectID, a2);
  if ((_DWORD)DeviceOrPortID || (DeviceOrPortID = (AudioDSP::Core *)inObjectID, !inObjectID))
  {
    AudioDSP::Core::getADCHeadTrackerLog(DeviceOrPortID);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      inAddress.mSelector = 136315394;
      *(_QWORD *)&inAddress.mScope = v4;
      v25 = 2080;
      v26 = "operator()";
      v9 = "[%s|%s] Could not update bluetooth low latency mode. Unknown port ID.";
      v10 = v8;
      v11 = 22;
LABEL_32:
      _os_log_impl(&dword_210570000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&inAddress, v11);
      goto LABEL_33;
    }
    goto LABEL_33;
  }
  outData = 0;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F627370656ELL;
  inAddress.mElement = 0;
  ioDataSize = 4;
  PropertyData = (AudioDSP::Core *)AudioObjectGetPropertyData(inObjectID, &inAddress, 0, 0, &ioDataSize, &outData);
  if ((_DWORD)PropertyData)
  {
    v7 = (int)PropertyData;
    AudioDSP::Core::getADCHeadTrackerLog(PropertyData);
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      inAddress.mSelector = 136315650;
      *(_QWORD *)&inAddress.mScope = v4;
      v25 = 2080;
      v26 = "operator()";
      v27 = 1024;
      LODWORD(v28) = v7;
      v9 = "[%s|%s] Could not get current bluetooth low latency mode. Error %d";
LABEL_31:
      v10 = v8;
      v11 = 28;
      goto LABEL_32;
    }
    goto LABEL_33;
  }
  if (v3)
  {
    if (v2 == 1)
    {
      v12 = 1;
    }
    else
    {
      if (v2 == 4 || v2 == 2)
        v14 = 1;
      else
        v14 = 2;
      v12 = outData | v14;
    }
  }
  else
  {
    if (v2 == 1)
    {
      outData = 0;
      goto LABEL_28;
    }
    if (v2 == 4 || v2 == 2)
      v16 = -2;
    else
      v16 = -3;
    v12 = outData & v16;
  }
  outData = v12;
LABEL_28:
  *(_QWORD *)&inAddress.mSelector = 0x676C6F627370656ELL;
  inAddress.mElement = 0;
  v17 = (AudioDSP::Core *)AudioObjectSetPropertyData(inObjectID, &inAddress, 0, 0, 4u, &outData);
  v18 = (int)v17;
  AudioDSP::Core::getADCHeadTrackerLog(v17);
  v8 = objc_claimAutoreleasedReturnValue();
  v19 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (!v18)
  {
    if (!v19)
      goto LABEL_33;
    v20 = "enabled";
    inAddress.mSelector = 136315650;
    *(_QWORD *)&inAddress.mScope = v4;
    v25 = 2080;
    v26 = "operator()";
    if (!v3)
      v20 = "disabled";
    v27 = 2080;
    v28 = v20;
    v9 = "[%s|%s] Bluetooth low latency mode %s";
    v10 = v8;
    v11 = 32;
    goto LABEL_32;
  }
  if (v19)
  {
    inAddress.mSelector = 136315650;
    *(_QWORD *)&inAddress.mScope = v4;
    v25 = 2080;
    v26 = "operator()";
    v27 = 1024;
    LODWORD(v28) = v18;
    v9 = "[%s|%s] Setting bluetooth low latency mode failed with error %d";
    goto LABEL_31;
  }
LABEL_33:

}

caulk::concurrent::message **caulk::concurrent::details::rt_message_call<AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode(unsigned int)::$_0,unsigned int &,HeadTrackingMode &,char const*>::rt_cleanup::~rt_cleanup(caulk::concurrent::message **a1)
{
  caulk::concurrent::message *v2;

  v2 = *a1;
  caulk::concurrent::message::~message(*a1);
  (*(void (**)(_QWORD, caulk::concurrent::message *, uint64_t, uint64_t))(*(_QWORD *)*MEMORY[0x24BEC6EA8] + 24))(*MEMORY[0x24BEC6EA8], v2, 40, 8);
  return a1;
}

uint64_t caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::try_lock(uint64_t a1)
{
  pthread_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t result;

  v2 = pthread_self();
  v3 = (unint64_t)v2;
  v4 = atomic_load((unint64_t *)a1);
  if (v2)
  {
    if (v4)
      v5 = v2 == (pthread_t)v4;
    else
      v5 = 0;
    if (!v5)
      goto LABEL_9;
LABEL_7:
    ++*(_DWORD *)(a1 + 8);
    return 1;
  }
  if (!v4)
    goto LABEL_7;
LABEL_9:
  result = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(a1 + 12));
  if ((_DWORD)result)
  {
    atomic_store(v3, (unint64_t *)a1);
    result = 1;
    *(_DWORD *)(a1 + 8) = 1;
  }
  return result;
}

void std::default_delete<AudioDSP::Core::HeadTracker::Implementation>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    std::unique_ptr<caulk::concurrent::messenger>::reset[abi:ne180100]((uint64_t *)(a2 + 72), 0);

    JUMPOUT(0x212BC7928);
  }
}

uint64_t AudioDSP::Core::HeadTracker::Implementation::Implementation(uint64_t a1, uint64_t a2, char a3)
{
  *(_QWORD *)a1 = a2;
  *(_DWORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 12) = 1;
  *(_BYTE *)(a1 + 14) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 28));
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 41) = a3;
  *(_BYTE *)(a1 + 42) = 0;
  *(_QWORD *)(a1 + 44) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(a1 + 68));
  *(_QWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_21059B94C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Unwind_Resume(a1);
}

uint64_t applesauce::CF::details::find_at_key_or_optional<BOOL,char const(&)[52]>(const __CFDictionary *a1, char *a2)
{
  const __CFNumber *v2;
  int v3;

  v2 = (const __CFNumber *)applesauce::CF::details::at_key<char const(&)[52]>(a1, a2);
  if (v2)
  {
    LOWORD(v2) = applesauce::CF::convert_as<BOOL,0>(v2);
    v3 = BYTE1(v2);
  }
  else
  {
    v3 = 0;
  }
  return v2 | (v3 << 8);
}

const void *applesauce::CF::details::at_key<char const(&)[52]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_21059B9F0(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x21059B9D4);
}

uint64_t applesauce::CF::convert_as<BOOL,0>(const __CFNumber *a1)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  int v3;
  CFTypeID v4;

  if (!a1)
    goto LABEL_7;
  v1 = a1;
  TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(v1))
  {
    v4 = CFNumberGetTypeID();
    if (v4 == CFGetTypeID(v1))
    {
      LOWORD(a1) = applesauce::CF::details::number_convert_as<BOOL>(v1);
      v3 = BYTE1(a1);
      return a1 | (v3 << 8);
    }
    LOBYTE(a1) = 0;
LABEL_7:
    v3 = 0;
    return a1 | (v3 << 8);
  }
  LOBYTE(a1) = CFBooleanGetValue(v1) != 0;
  v3 = 1;
  return a1 | (v3 << 8);
}

void OUTLINED_FUNCTION_0_0(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void OUTLINED_FUNCTION_4_0(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

double IR::DataResampler<float>::DataResampler(uint64_t a1, int a2, float a3, float a4)
{
  double v4;
  double result;
  std::logic_error *exception;

  *(_QWORD *)a1 = &off_24CA2D168;
  *(_DWORD *)(a1 + 8) = a2;
  *(float *)(a1 + 12) = a3;
  *(float *)(a1 + 16) = a4;
  *(_BYTE *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 20) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v4 = a3;
  result = 0.1;
  if (v4 < 0.1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid input sample rate, must be > 0.1)");
    goto LABEL_8;
  }
  if (a4 < 0.1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid output sample rate, must be > 0.1)");
    goto LABEL_8;
  }
  if (!a2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid input length, must be > 0)");
LABEL_8:
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  return result;
}

void sub_21059BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void *v10;

  __cxa_free_exception(v10);
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](a10);
  _Unwind_Resume(a1);
}

std::logic_error *std::invalid_argument::invalid_argument[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

_QWORD *IR::DataResampler<float>::~DataResampler(_QWORD *a1)
{
  *a1 = &off_24CA2D168;
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

{
  *a1 = &off_24CA2D168;
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a1 + 3));
  return a1;
}

void IR::DataResampler<float>::~DataResampler(_QWORD *a1)
{
  *a1 = &off_24CA2D168;
  std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)(a1 + 3));
  JUMPOUT(0x212BC7928);
}

unint64_t IR::DataResampler<float>::Initialize(uint64_t a1, const __CFDictionary **a2)
{
  const __CFDictionary *v3;
  unsigned int v4;
  unsigned int v6;

  v3 = *a2;
  v4 = 64;
  if (v3)
  {
    v6 = 64;
    v4 = applesauce::CF::at_or<unsigned int,__CFString const*&>(v3, (const void **)&IR::kIRDataResamplerConfigQualityKey, &v6);
  }
  return IR::DataResampler<float>::Initialize(a1, v4);
}

unint64_t IR::DataResampler<float>::Initialize(uint64_t a1, unsigned int a2)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  unsigned int ExpectedNumberOfOutputFrames;
  NSObject *v13;
  double v15;
  double v16;
  unsigned int v17;
  char v18;
  uint8_t v19[16];
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 20) = 0;
  if (a2 < 0x80)
  {
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder((uint64_t)v19, 1);
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>((uint64_t)v19, (const void *)*MEMORY[0x24BE0AA08], *(float *)(a1 + 12));
    CA::AudioSampleRateConverterBuilder::SetAttribute<double>((uint64_t)v19, (const void *)*MEMORY[0x24BE0AA20], *(float *)(a1 + 16));
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>((uint64_t)v19, (const void *)*MEMORY[0x24BE0AA18], 1);
    CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>((uint64_t)v19, (const void *)*MEMORY[0x24BE0AA28], a2);
    CA::AudioSampleRateConverterBuilder::Build((uint64_t)&v17);
    if (v18)
    {
      v7 = (_QWORD *)caulk::expected<CA::AudioSampleRateConverter,int>::value((uint64_t)&v17);
      v8 = v7;
      if (*(_BYTE *)(a1 + 32))
      {
        v9 = *(_QWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 24) = *v7;
        *v7 = v9;
      }
      else
      {
        v11 = *v7;
        *v8 = 0;
        *(_QWORD *)(a1 + 24) = v11;
        *(_BYTE *)(a1 + 32) = 1;
      }
      *(_DWORD *)buf = 0;
      ExpectedNumberOfOutputFrames = AudioSampleRateConverterGetExpectedNumberOfOutputFrames();
      if (*(_DWORD *)buf)
      {
        v4 = ExpectedNumberOfOutputFrames;
        v5 = 0;
        *(_BYTE *)(a1 + 20) = 1;
      }
      else
      {
        if (IR::getDataResamplerLog(void)::onceToken != -1)
          dispatch_once(&IR::getDataResamplerLog(void)::onceToken, &__block_literal_global_2);
        v13 = IR::getDataResamplerLog(void)::gLog;
        if (os_log_type_enabled((os_log_t)IR::getDataResamplerLog(void)::gLog, OS_LOG_TYPE_ERROR))
          IR::DataResampler<float>::Initialize(v13);
        v4 = 0;
        v5 = 101;
      }
    }
    else
    {
      v5 = v17;
      if (IR::getDataResamplerLog(void)::onceToken != -1)
        dispatch_once(&IR::getDataResamplerLog(void)::onceToken, &__block_literal_global_2);
      v10 = IR::getDataResamplerLog(void)::gLog;
      if (os_log_type_enabled((os_log_t)IR::getDataResamplerLog(void)::gLog, OS_LOG_TYPE_ERROR))
      {
        v15 = *(float *)(a1 + 12);
        v16 = *(float *)(a1 + 16);
        *(_DWORD *)buf = 136315906;
        v21 = "Initialize";
        v22 = 1024;
        v23 = v5;
        v24 = 2048;
        v25 = v15;
        v26 = 2048;
        v27 = v16;
        _os_log_error_impl(&dword_210570000, v10, OS_LOG_TYPE_ERROR, "IRDataResampler::%s: SRC builder returned error: %d. Native IR SampleRate: %.2f, target SampleRate: %.2f", buf, 0x26u);
      }
      v4 = 0;
    }
    caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base((uint64_t)&v17);
    CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder((CA::AudioSampleRateConverterBuilder *)v19);
  }
  else
  {
    if (IR::getDataResamplerLog(void)::onceToken != -1)
      dispatch_once(&IR::getDataResamplerLog(void)::onceToken, &__block_literal_global_2);
    v3 = IR::getDataResamplerLog(void)::gLog;
    if (os_log_type_enabled((os_log_t)IR::getDataResamplerLog(void)::gLog, OS_LOG_TYPE_ERROR))
      IR::DataResampler<float>::Initialize(a2, v3);
    v4 = 0;
    v5 = 102;
  }
  return v4 | (unint64_t)(v5 << 32);
}

void sub_21059BFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t CA::AudioSampleRateConverterBuilder::Build@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = 0;
  result = AudioSampleRateConverterCreate();
  if ((_DWORD)result)
  {
    *(_DWORD *)a1 = result;
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    CA::AudioSampleRateConverter::AudioSampleRateConverter(&v5, v6);
    v4 = v5;
    v5 = 0;
    *(_QWORD *)a1 = v4;
    *(_BYTE *)(a1 + 8) = 1;
    return AudioSampleRateConverterDispose();
  }
  return result;
}

uint64_t caulk::expected<CA::AudioSampleRateConverter,int>::value(uint64_t result)
{
  int *v1;
  _DWORD *exception;
  int v3;

  if (!*(_BYTE *)(result + 8))
  {
    v1 = (int *)result;
    exception = __cxa_allocate_exception(0x10uLL);
    v3 = *v1;
    *(_QWORD *)exception = &off_24CA2D1F8;
    exception[2] = v3;
  }
  return result;
}

uint64_t IR::DataResampler<float>::CleanUp(uint64_t result)
{
  *(_BYTE *)(result + 20) = 0;
  return result;
}

uint64_t IR::DataResampler<float>::GetRequiredNumberOfInputFrames(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;

  LODWORD(result) = AudioSampleRateConverterGetRequiredNumberOfInputFrames();
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= result)
    return result;
  else
    return v3;
}

os_log_t ___ZN2IR19getDataResamplerLogEv_block_invoke()
{
  os_log_t result;

  result = os_log_create("com.apple.coreaudio", "DataResampler");
  IR::getDataResamplerLog(void)::gLog = (uint64_t)result;
  return result;
}

uint64_t IR::DataResampler<float>::Process(uint64_t a1, float *a2, unsigned int a3, float *a4, vDSP_Length a5)
{
  CA::AudioSampleRateConverter *v9;
  unsigned int RequiredNumberOfInputFrames;
  uint64_t v11;
  float *v13;
  float *v14[2];

  v14[1] = *(float **)MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 20))
    return 103;
  v9 = (CA::AudioSampleRateConverter *)(a1 + 24);
  AudioSampleRateConverterReset();
  RequiredNumberOfInputFrames = AudioSampleRateConverterGetRequiredNumberOfInputFrames();
  if (RequiredNumberOfInputFrames <= a3)
  {
    v13 = a4;
    v14[0] = a2;
    v11 = CA::AudioSampleRateConverter::Process(v9, (const float *const *)v14, 1, RequiredNumberOfInputFrames, &v13);
    if ((_DWORD)v11)
      vDSP_vclr(a4, 1, a5);
  }
  else
  {
    vDSP_vclr(a4, 1, a5);
    return 4294956422;
  }
  return v11;
}

void sub_21059C250(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

uint64_t CA::AudioSampleRateConverter::Process(CA::AudioSampleRateConverter *this, const float *const *a2, int a3, unsigned int a4, float *const *a5)
{
  return AudioSampleRateConverterProcess();
}

uint64_t std::__optional_destruct_base<CA::AudioSampleRateConverter,false>::~__optional_destruct_base[abi:ne180100](uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    AudioSampleRateConverterDispose();
  return a1;
}

uint64_t CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder(uint64_t a1, int a2)
{
  CFMutableDictionaryRef Mutable;
  uint64_t v5;

  *(_DWORD *)a1 = a2;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0, MEMORY[0x24BDBD6A0], MEMORY[0x24BDBD6B0]);
  if (!Mutable)
  {
    _os_assert_log();
    v5 = _os_crash();
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder(v5);
  }
  *(_QWORD *)(a1 + 8) = Mutable;
  return a1;
}

void CA::AudioSampleRateConverterBuilder::SetAttribute<double>(uint64_t a1, const void *a2, double a3)
{
  __CFDictionary *v4;
  CFNumberRef v5;
  void *exception;
  double valuePtr;

  v4 = *(__CFDictionary **)(a1 + 8);
  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberDoubleType, &valuePtr);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  CFDictionarySetValue(v4, a2, v5);
  CFRelease(v5);
}

void sub_21059C3C0(void *a1)
{
  __clang_call_terminate(a1);
}

void CA::AudioSampleRateConverterBuilder::SetAttribute<unsigned int>(uint64_t a1, const void *a2, int a3)
{
  __CFDictionary *v4;
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  v4 = *(__CFDictionary **)(a1 + 8);
  valuePtr = a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  CFDictionarySetValue(v4, a2, v5);
  CFRelease(v5);
}

void sub_21059C47C(void *a1)
{
  __clang_call_terminate(a1);
}

_QWORD *CA::AudioSampleRateConverter::AudioSampleRateConverter(_QWORD *result, uint64_t a2)
{
  uint64_t v2;

  *result = a2;
  if (!a2)
  {
    _os_assert_log();
    v2 = _os_crash();
    CA::AudioSampleRateConverterBuilder::AudioSampleRateConverterBuilder(v2);
  }
  return result;
}

void caulk::bad_expected_access<int>::~bad_expected_access(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x212BC7928);
}

uint64_t caulk::__expected_detail::base<CA::AudioSampleRateConverter,int>::~base(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    AudioSampleRateConverterDispose();
  return a1;
}

void CA::AudioSampleRateConverterBuilder::~AudioSampleRateConverterBuilder(CA::AudioSampleRateConverterBuilder *this)
{
  const void *v1;

  v1 = (const void *)*((_QWORD *)this + 1);
  if (v1)
    CFRelease(v1);
}

uint64_t AudioDSPCoreUtility::GetDeviceOrPortID(AudioDSPCoreUtility *this, unsigned int *a2)
{
  uint64_t PropertyData;
  uint64_t v4;
  const __CFArray *v6;
  void *exception;
  CFTypeRef cf;
  UInt32 ioDataSize[2];
  AudioObjectPropertyAddress inAddress;
  _QWORD outData[4];
  AudioObjectID v12;
  const __CFString *v13;

  v13 = CFSTR("VirtualAudioDevice_Default");
  v12 = 0;
  outData[0] = &v13;
  outData[1] = 8;
  outData[2] = &v12;
  outData[3] = 4;
  *(_QWORD *)&inAddress.mSelector = 0x676C6F6264756964;
  inAddress.mElement = 0;
  ioDataSize[0] = 32;
  PropertyData = AudioObjectGetPropertyData(1u, &inAddress, 0, 0, ioDataSize, outData);
  if ((_DWORD)PropertyData
    || (*(_QWORD *)ioDataSize = 0,
        *(_QWORD *)&inAddress.mSelector = 0x6F75747064616370,
        inAddress.mElement = 0,
        LODWORD(cf) = 8,
        PropertyData = AudioObjectGetPropertyData(v12, &inAddress, 0, 0, (UInt32 *)&cf, ioDataSize),
        (_DWORD)PropertyData))
  {
    v4 = PropertyData;
    *(_DWORD *)this = 0;
  }
  else
  {
    applesauce::CF::ArrayRef::ArrayRef((applesauce::CF::ArrayRef *)&inAddress, *(CFTypeRef *)ioDataSize);
    if (!*(_QWORD *)&inAddress.mSelector)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
    if (CFArrayGetCount(*(CFArrayRef *)&inAddress.mSelector) == 1)
    {
      v6 = *(const __CFArray **)&inAddress.mSelector;
      if (*(_QWORD *)&inAddress.mSelector)
        CFArrayGetCount(*(CFArrayRef *)&inAddress.mSelector);
      applesauce::CF::details::at_to<applesauce::CF::TypeRef>(v6, 0, &cf);
      *(_DWORD *)this = applesauce::CF::convert_to<unsigned int,0>((const __CFNumber *)cf);
      if (cf)
        CFRelease(cf);
      v4 = 0;
    }
    else
    {
      *(_DWORD *)this = 0;
      v4 = 0xFFFFFFFFLL;
    }
    if (*(_QWORD *)&inAddress.mSelector)
      CFRelease(*(CFTypeRef *)&inAddress.mSelector);
  }
  return v4;
}

void sub_21059C6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11)
{
  applesauce::CF::TypeRef::~TypeRef((const void **)&a9);
  applesauce::CF::ArrayRef::~ArrayRef(&a11);
  _Unwind_Resume(a1);
}

applesauce::CF::ArrayRef *applesauce::CF::ArrayRef::ArrayRef(applesauce::CF::ArrayRef *this, CFTypeRef cf)
{
  CFTypeID v3;
  void *exception;

  *(_QWORD *)this = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
  }
  return this;
}

void sub_21059C7A4(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

CFTypeRef applesauce::CF::details::at_to<applesauce::CF::TypeRef>@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const void *ValueAtIndex;
  const void *v7;
  CFTypeRef result;
  applesauce::CF *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = CFArrayGetValueAtIndex(a1, a2), (v7 = ValueAtIndex) == 0))
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::not_found(exception);
  }
  result = CFRetain(ValueAtIndex);
  *a3 = v7;
  return result;
}

void sub_21059C844()
{
  void *v0;

}

void sub_21059C868(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t GetAcousticID(void)
{
  unint64_t v0;
  char v2;
  char **v3;
  char *v4;

  v0 = atomic_load(&GetAcousticID(void)::sOnceFlag);
  if (v0 != -1)
  {
    v4 = &v2;
    v3 = &v4;
    std::__call_once(&GetAcousticID(void)::sOnceFlag, &v3, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<GetAcousticID(void)::$_0 &&>>);
  }
  return GetAcousticID(void)::optionalValue;
}

CFIndex std::__call_once_proxy[abi:ne180100]<std::tuple<GetAcousticID(void)::$_0 &&>>()
{
  CFIndex result;

  result = CFPreferencesGetAppIntegerValue(CFSTR("acoustic_id"), CFSTR("com.apple.coreaudio"), 0);
  if (result)
  {
    if (!BYTE4(GetAcousticID(void)::optionalValue))
      BYTE4(GetAcousticID(void)::optionalValue) = 1;
    LODWORD(GetAcousticID(void)::optionalValue) = result;
  }
  else
  {
    result = MGIsQuestionValid();
    if ((_DWORD)result)
    {
      result = MGGetSInt32Answer();
      LODWORD(GetAcousticID(void)::optionalValue) = result;
      BYTE4(GetAcousticID(void)::optionalValue) = (_DWORD)result != 0;
    }
    else if (BYTE4(GetAcousticID(void)::optionalValue))
    {
      BYTE4(GetAcousticID(void)::optionalValue) = 0;
    }
  }
  return result;
}

void SincKernelFactorySingleton::SincKernelFactorySingleton(SincKernelFactorySingleton *this)
{
  SincKernelFactory *v2;
  uint64_t v3;

  *(_QWORD *)this = 0;
  caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((SincKernelFactorySingleton *)((char *)this + 8));
  v2 = (SincKernelFactory *)operator new();
  SincKernelFactory::SincKernelFactory(v2);
  v3 = *(_QWORD *)this;
  *(_QWORD *)this = v2;
  if (v3)
    std::default_delete<SincKernelFactory>::operator()[abi:ne180100]((uint64_t)this, v3);
}

void sub_21059C9CC(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = v2;
  MEMORY[0x212BC7928](v3, 0x80C40D6874129);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    std::default_delete<SincKernelFactory>::operator()[abi:ne180100]((uint64_t)v1, v5);
  _Unwind_Resume(a1);
}

void *SincKernelFactorySingleton::instance(SincKernelFactorySingleton *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
    SincKernelFactorySingleton::SincKernelFactorySingleton((SincKernelFactorySingleton *)&SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton);
  }
  return &SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton;
}

void sub_21059CA70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t SincKernelFactorySingleton::ReferenceSincKernel(SincKernelFactory **this, int a2, int a3, double a4, double a5)
{
  uint64_t v10;
  char *v12;
  char v13;

  v12 = (char *)(this + 1);
  v13 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(this + 1));
  v10 = SincKernelFactory::ReferenceSincKernel(*this, a2, a3, a4, a5);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v12);
  return v10;
}

void sub_21059CB08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SincKernelFactorySingleton::ReleaseSincKernel(_QWORD **a1, uint64_t a2)
{
  _QWORD **v5;
  char v6;

  v5 = a1 + 1;
  v6 = 1;
  caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(a1 + 1));
  SincKernelFactory::ReleaseSincKernel(*a1, a2);
  return std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v5);
}

void sub_21059CB6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IR::DelayLine::processPolyphaseQ22_10(IR::DelayLine *this, int a2, int a3, float *__C, vDSP_Length __N)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  vDSP_Length v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  const float *v16;
  vDSP_Length v17;
  const float *v18;
  vDSP_Length v19;
  const float *v20;
  float *v21;
  const float *v22;

  v5 = *((_DWORD *)this + 32);
  v6 = a3 + (1 << (9 - v5)) - 512;
  v7 = (unsigned __int16)(v6 & 0x3FF) >> (10 - v5);
  if (v7 >= *((_DWORD *)this + 30))
    IR::DelayLine::processPolyphaseQ22_10();
  v8 = __N;
  v11 = *((unsigned int *)this + 33);
  v12 = (v11 - 1);
  v13 = *((_QWORD *)this + 2);
  v14 = (*((_QWORD *)this + 3) - v13) >> 2;
  v15 = (a2 - (v11 + (v6 >> 10)) + v14 + 1) & *((_DWORD *)this + 10);
  v16 = (const float *)(*((_QWORD *)this + 13) + 4 * v7 * v11);
  if ((_DWORD)__N == 1)
  {
    vDSP_dotpr((const float *)(v13 + 4 * v15 + 4 * v12), -1, v16, 1, __C, v11);
  }
  else
  {
    if (v14 >= (_DWORD)v12 + (_DWORD)__N + v15)
    {
      v20 = (const float *)(v13 + 4 * v15);
      v22 = &v16[v12];
      v19 = __N;
      v21 = __C;
    }
    else
    {
      if (v14 < (v12 + __N))
        IR::DelayLine::processPolyphaseQ22_10();
      v17 = v14 - (v12 + v15);
      v18 = &v16[v12];
      vDSP_conv((const float *)(v13 + 4 * v15), 1, v18, -1, __C, 1, v17, v11);
      v19 = v8 - v17;
      v20 = (const float *)*((_QWORD *)this + 2);
      v21 = &__C[v17];
      v11 = *((unsigned int *)this + 33);
      v22 = v18;
    }
    vDSP_conv(v20, 1, v22, -1, v21, 1, v19, v11);
  }
}

uint64_t IR::DelayLine::DelayLine(uint64_t a1, int a2, int a3, std::vector<unsigned int>::size_type __n, unsigned int a5, int a6)
{
  uint64_t v7;
  char **v8;
  std::vector<unsigned int> *v9;
  const float **v10;
  uint64_t v11;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  int8x8_t v21;
  uint8x8_t v22;
  int v23;
  BOOL v24;
  unsigned int v25;
  unint64_t v26;
  unint64_t v27;
  std::vector<unsigned int>::size_type v28;
  float v29;
  float v30;
  unint64_t v31;
  int v32;
  uint64_t v34;
  float **v35;
  char **v36;
  char **v37;
  float v38;
  float __C;
  float __B;
  std::vector<unsigned int>::value_type __u;

  *(_DWORD *)a1 = a2;
  *(_DWORD *)(a1 + 4) = a3;
  *(_DWORD *)(a1 + 8) = __n;
  *(_BYTE *)(a1 + 12) = 1;
  *(_OWORD *)(a1 + 16) = 0u;
  v7 = a1 + 16;
  *(_OWORD *)(a1 + 48) = 0u;
  v8 = (char **)(a1 + 48);
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_DWORD *)(a1 + 96) = 1065347625;
  *(_OWORD *)(a1 + 136) = 0u;
  v9 = (std::vector<unsigned int> *)(a1 + 136);
  *(_OWORD *)(a1 + 184) = 0u;
  v10 = (const float **)(a1 + 184);
  v34 = a1 + 208;
  *(_OWORD *)(a1 + 232) = 0u;
  v11 = a1 + 232;
  v36 = (char **)(a1 + 256);
  v37 = (char **)(a1 + 72);
  v35 = (float **)(a1 + 160);
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_QWORD *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  if (!(_DWORD)__n)
    __assert_rtn("DelayLine", "DelayLine.cpp", 236, "inNumTaps > 0");
  switch(a3)
  {
    case 1:
    case 3:
      *(float *)&__u = 2.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      v14 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = 2.0;
      std::vector<float>::assign(v37, v14, &__u);
      v15 = 0;
      v16 = a2 + 4;
      break;
    case 2:
    case 4:
      *(float *)&__u = 3.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      v17 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = 3.0;
      std::vector<float>::assign(v37, v17, &__u);
      v15 = 0;
      v16 = a2 + 6;
      break;
    case 5:
    case 7:
      goto LABEL_7;
    case 6:
      *(float *)&__u = 0.0;
      std::vector<IR::IRInterpolationMethod>::assign((std::vector<unsigned int> *)(a1 + 280), __n, &__u);
      std::vector<float>::resize((uint64_t)v35, a5);
      std::vector<float>::resize((uint64_t)v10, a5);
      std::vector<float>::resize(v34, a5);
      std::vector<float>::resize(v11, a5);
      *(float *)&__u = 0.0;
      __B = 1.0 / (float)a5;
      vDSP_vramp((const float *)&__u, &__B, *(float **)(a1 + 184), 1, (uint64_t)(*(_QWORD *)(a1 + 192) - *(_QWORD *)(a1 + 184)) >> 2);
      v38 = -1.0;
      __C = 1.0;
      vDSP_vsmsa(*v10, 1, &v38, &__C, *v35, 1, a5);
LABEL_7:
      SincKernelFactorySingleton::instance((SincKernelFactorySingleton *)a1);
      v20 = SincKernelFactorySingleton::ReferenceSincKernel((SincKernelFactory **)&SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton, 11, 128, 80.0, 0.9);
      *(_QWORD *)(a1 + 112) = v20;
      v21 = (int8x8_t)*(unsigned int *)(v20 + 16);
      *(_DWORD *)(a1 + 120) = v21.i32[0];
      v22 = (uint8x8_t)vcnt_s8(v21);
      v22.i16[0] = vaddlv_u8(v22);
      if (v22.i32[0] != 1)
        __assert_rtn("DelayLine", "DelayLine.cpp", 285, "isPowerOfTwo(mFractionalPhases)");
      *(_DWORD *)(a1 + 124) = v21.i32[0] - 1;
      if (v21.i32[0] >= 2u)
      {
        v23 = 0;
        do
        {
          ++v23;
          v24 = v21.i32[0] > 3u;
          v21.i32[0] = (unsigned __int32)v21.i32[0] >> 1;
        }
        while (v24);
      }
      else
      {
        v23 = 0;
      }
      *(_DWORD *)(a1 + 128) = v23;
      v25 = *(_DWORD *)(v20 + 12);
      *(_DWORD *)(a1 + 132) = v25;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)v20;
      v26 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = (float)v25;
      std::vector<float>::assign(v8, v26, &__u);
      v27 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = (float)*(unsigned int *)(a1 + 132);
      std::vector<float>::assign(v36, v27, &__u);
      v28 = *(unsigned int *)(a1 + 8);
      v29 = (float)*(unsigned int *)(a1 + 132) * 1024.0;
      v30 = -1.0;
      if (v29 >= 0.0)
        v30 = 1.0;
      __u = (uint64_t)(float)(v29 + (float)(v30 * 0.5));
      std::vector<IR::IRInterpolationMethod>::assign(v9, v28, &__u);
      v31 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = (float)*(unsigned int *)(a1 + 132);
      std::vector<float>::assign(v37, v31, &__u);
      v16 = a6 + a2 + v25;
      v15 = v25 - 1;
      break;
    default:
      *(float *)&__u = 0.0;
      std::vector<float>::assign((char **)(a1 + 48), __n, &__u);
      v18 = *(unsigned int *)(a1 + 8);
      *(float *)&__u = 0.0;
      std::vector<float>::assign(v37, v18, &__u);
      v15 = 0;
      v16 = a2 + 1;
      break;
  }
  v32 = 1 << -(char)__clz(v16 - 1);
  *(float *)&__u = 0.0;
  std::vector<float>::resize(v7, v32 + v15, &__u);
  *(_DWORD *)(a1 + 40) = v32 - 1;
  IR::DelayLine::reset((IR::DelayLine *)a1);
  return a1;
}

void sub_21059D0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, void **a11, void **a12, void **a13, void **a14)
{
  _QWORD *v14;
  void **v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  v21 = *a11;
  if (*a11)
  {
    v14[36] = v21;
    operator delete(v21);
  }
  v22 = *a13;
  if (*a13)
  {
    v14[33] = v22;
    operator delete(v22);
  }
  v23 = *v19;
  if (*v19)
  {
    v14[30] = v23;
    operator delete(v23);
  }
  v24 = *a10;
  if (*a10)
  {
    v14[27] = v24;
    operator delete(v24);
  }
  v25 = *v18;
  if (*v18)
  {
    v14[24] = v25;
    operator delete(v25);
  }
  v26 = *a12;
  if (*a12)
  {
    v14[21] = v26;
    operator delete(v26);
  }
  v27 = *v17;
  if (*v17)
  {
    v14[18] = v27;
    operator delete(v27);
  }
  v28 = *a14;
  if (*a14)
  {
    v14[10] = v28;
    operator delete(v28);
  }
  v29 = *v16;
  if (*v16)
  {
    v14[7] = v29;
    operator delete(v29);
  }
  v30 = *v15;
  if (*v15)
  {
    v14[3] = v30;
    operator delete(v30);
  }
  _Unwind_Resume(exception_object);
}

void IR::DelayLine::reset(IR::DelayLine *this)
{
  int v2;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v2 = *((_DWORD *)this + 1);
  if (v2 == 5 || v2 == 7)
  {
LABEL_12:
    v10 = (void *)*((_QWORD *)this + 2);
    v11 = *((_QWORD *)this + 3) - (_QWORD)v10;
    if (v11 >= 1)
      bzero(v10, 4 * (((unint64_t)v11 >> 2) - ((unint64_t)v11 > 3)) + 4);
    *((_DWORD *)this + 11) = *((_DWORD *)this + 33) - 1;
    goto LABEL_15;
  }
  if (v2 == 6)
  {
    v4 = (void *)*((_QWORD *)this + 29);
    v5 = *((_QWORD *)this + 30) - (_QWORD)v4;
    if (v5 >= 1)
      bzero(v4, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
    v6 = (void *)*((_QWORD *)this + 26);
    v7 = *((_QWORD *)this + 27) - (_QWORD)v6;
    if (v7 >= 1)
      bzero(v6, 4 * (((unint64_t)v7 >> 2) - ((unint64_t)v7 > 3)) + 4);
    v8 = (void *)*((_QWORD *)this + 35);
    v9 = *((_QWORD *)this + 36) - (_QWORD)v8;
    if (v9 >= 1)
      bzero(v8, 4 * (((unint64_t)v9 >> 2) - ((unint64_t)v9 > 3)) + 4);
    goto LABEL_12;
  }
  v12 = (void *)*((_QWORD *)this + 2);
  v13 = *((_QWORD *)this + 3) - (_QWORD)v12;
  if (v13 >= 1)
    bzero(v12, 4 * (((unint64_t)v13 >> 2) - ((unint64_t)v13 > 3)) + 4);
LABEL_15:
  *((_BYTE *)this + 12) = 1;
}

void IR::DelayLine::~DelayLine(IR::DelayLine *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;

  if ((*((_DWORD *)this + 1) - 5) <= 2)
  {
    SincKernelFactorySingleton::instance(this);
    SincKernelFactorySingleton::ReleaseSincKernel((_QWORD **)&SincKernelFactorySingleton::instance(void)::gSincKernelFactorySingleton, *((_QWORD *)this + 14));
  }
  v2 = (void *)*((_QWORD *)this + 35);
  if (v2)
  {
    *((_QWORD *)this + 36) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 32);
  if (v3)
  {
    *((_QWORD *)this + 33) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 29);
  if (v4)
  {
    *((_QWORD *)this + 30) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 26);
  if (v5)
  {
    *((_QWORD *)this + 27) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 23);
  if (v6)
  {
    *((_QWORD *)this + 24) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 20);
  if (v7)
  {
    *((_QWORD *)this + 21) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 17);
  if (v8)
  {
    *((_QWORD *)this + 18) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 9);
  if (v9)
  {
    *((_QWORD *)this + 10) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 6);
  if (v10)
  {
    *((_QWORD *)this + 7) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 2);
  if (v11)
  {
    *((_QWORD *)this + 3) = v11;
    operator delete(v11);
  }
}

uint64_t IR::DelayLine::setDelay(uint64_t this, float a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  float v5;

  if (*(_DWORD *)(this + 8) <= a3)
    IR::DelayLine::setDelay();
  if ((float)*(unsigned int *)this < a2)
    a2 = (float)*(unsigned int *)this;
  v3 = *(_DWORD *)(this + 4);
  if (v3 <= 7)
  {
    v4 = 1 << v3;
    if ((v4 & 0xE0) != 0)
    {
      a2 = a2 + (float)*(unsigned int *)(this + 132);
    }
    else
    {
      v5 = a2 + 2.0;
      if ((v4 & 0x14) != 0)
        a2 = a2 + 3.0;
      if ((v4 & 0xA) != 0)
        a2 = v5;
    }
  }
  *(float *)(*(_QWORD *)(this + 48) + 4 * a3) = a2;
  return this;
}

uint64_t IR::DelayLine::setDelay(IR::DelayLine *this, float a2)
{
  return IR::DelayLine::setDelay((uint64_t)this, a2, 0);
}

uint64_t IR::DelayLine::getLatencyFrames(int a1)
{
  if ((a1 - 1) > 6)
    return 0;
  else
    return dword_2105DDF9C[a1 - 1];
}

void IR::DelayLine::process(IR::DelayLine *this, const float *__src, float **a3, unsigned int a4, vDSP_Length a5)
{
  IR::DelayLine *v5;
  float v6;
  const float *v7;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  float *v16;
  uint64_t v17;
  _DWORD *v18;
  float v19;
  float v20;
  float v21;
  vDSP_Length v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  float **v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  float v33;
  uint64_t v34;
  float v35;
  float v36;
  float v37;
  char v38;
  char v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  vDSP_Length v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  unsigned int v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  float v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  double v93;
  float v94;
  float v95;
  float v96;
  float v97;
  float v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  float v105;
  float v106;
  float v107;
  float v108;
  float v109;
  float v110;
  float v111;
  float v112;
  float v113;
  float v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  int v118;
  unsigned int v119;
  uint64_t v120;
  uint64_t v121;
  float v122;
  float v123;
  float v124;
  float v125;
  float v126;
  float v127;
  float v128;
  float v129;
  float v130;
  float v131;
  float v132;
  float v133;
  unint64_t v134;
  unsigned int v135;
  uint64_t v136;
  float **v137;
  uint64_t v138;
  uint64_t v139;
  float v140;
  int v141;
  float *v142;
  float v143;
  float v144;
  unsigned int v145;
  int v146;
  vDSP_Length v147;
  float v148;
  _BOOL4 v149;
  BOOL v150;
  vDSP_Length v151;
  int v152;
  float v153;
  uint64_t v154;
  int v155;
  int v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  float v160;
  unsigned int v161;
  BOOL v162;
  uint64_t v163;
  float v164;
  float **v165;
  uint64_t v166;
  char *v167;
  unsigned int v168;
  unsigned int v169;
  uint64_t v170;
  int v171;
  float *__E;
  int v173;
  vDSP_Length v174;
  uint64_t v175;
  unsigned int v176;
  vDSP_Length v177;
  float v178;
  float v179;
  float v180;
  float v181;
  uint64_t v182;
  unint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  float v187;
  float v188;
  float v189;
  uint64_t v190;
  unsigned int v191;
  int v192;
  float **v193;
  vDSP_Length v194;
  const float *v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;

  v5 = this;
  v198 = *MEMORY[0x24BDAC8D0];
  v6 = *((float *)this + 24);
  if ((_DWORD)a5)
  {
    v7 = __src;
    if (!__src)
      IR::DelayLine::process();
    v194 = a5;
    v9 = *((_DWORD *)this + 2);
    if (v9 >= a4)
      v10 = a4;
    else
      v10 = v9;
    v11 = (*((_QWORD *)this + 3) - *((_QWORD *)this + 2)) >> 2;
    if (*((_BYTE *)this + 12))
    {
      this = (IR::DelayLine *)IR::DelayLine::swapDelays(this);
      *((_BYTE *)v5 + 12) = 0;
    }
    switch(*((_DWORD *)v5 + 1))
    {
      case 1:
        v99 = 0;
        v100 = *((_QWORD *)v5 + 2);
        v101 = v194;
        v102 = *((_DWORD *)v5 + 10);
        v48 = *((_DWORD *)v5 + 11);
        do
        {
          *(float *)(v100 + 4 * v48) = v7[v99];
          if ((_DWORD)v10)
          {
            v103 = 0;
            v104 = *((_QWORD *)v5 + 9);
            do
            {
              if (v6 == 2.7183)
              {
                v105 = *(float *)(v104 + 4 * v103)
                     + (float)((float)(*(float *)(*((_QWORD *)v5 + 6) + 4 * v103) - *(float *)(v104 + 4 * v103))
                             / (float)(v101 - v99));
              }
              else
              {
                v106 = *(float *)(*((_QWORD *)v5 + 6) + 4 * v103);
                v105 = v106 + (float)(*((float *)v5 + 24) * (float)(*(float *)(v104 + 4 * v103) - v106));
              }
              *(float *)(v104 + 4 * v103) = v105;
              v107 = (float)v48 - v105;
              if (v107 >= 0.0)
                v108 = -0.0;
              else
                v108 = (float)v11;
              v109 = v107 + v108;
              v110 = *(float *)(v100 + 4 * (v102 & (int)v109));
              v111 = *(float *)(v100 + 4 * (((int)v109 + 1) & v102));
              v112 = *(float *)(v100 + 4 * (((int)v109 + 2) & v102));
              v113 = *(float *)(v100 + 4 * (((int)v109 - 1) & v102));
              v114 = v113 + v110 * -2.5 + (float)(v111 + v111) + v112 * -0.5;
              v115 = (float)(v110 - v111) * 1.5 + (float)(v112 - v113) * 0.5;
              a3[v103++][v99] = v110
                              + (float)((float)((float)((float)(v111 - v113) * 0.5)
                                              + (float)((float)(v114 + (float)(v115 * (float)(v109 - (float)(int)v109)))
                                                      * (float)(v109 - (float)(int)v109)))
                                      * (float)(v109 - (float)(int)v109));
            }
            while (v10 != v103);
          }
          v48 = v102 & (v48 + 1);
          ++v99;
        }
        while (v99 != v101);
        goto LABEL_98;
      case 2:
        v116 = 0;
        v117 = *((_QWORD *)v5 + 2);
        v118 = v194;
        v119 = *((_DWORD *)v5 + 10);
        v48 = *((_DWORD *)v5 + 11);
        do
        {
          *(float *)(v117 + 4 * v48) = v7[v116];
          if ((_DWORD)v10)
          {
            v120 = 0;
            v121 = *((_QWORD *)v5 + 9);
            do
            {
              if (v6 == 2.7183)
              {
                v122 = *(float *)(v121 + 4 * v120)
                     + (float)((float)(*(float *)(*((_QWORD *)v5 + 6) + 4 * v120) - *(float *)(v121 + 4 * v120))
                             / (float)(v118 - v116));
              }
              else
              {
                v123 = *(float *)(*((_QWORD *)v5 + 6) + 4 * v120);
                v122 = v123 + (float)(*((float *)v5 + 24) * (float)(*(float *)(v121 + 4 * v120) - v123));
              }
              *(float *)(v121 + 4 * v120) = v122;
              v124 = (float)v48 - v122;
              if (v124 >= 0.0)
                v125 = -0.0;
              else
                v125 = (float)v11;
              v126 = v124 + v125;
              v127 = *(float *)(v117 + 4 * (v119 & (int)v126));
              v128 = *(float *)(v117 + 4 * (((int)v126 + 1) & v119));
              v129 = *(float *)(v117 + 4 * (((int)v126 + 2) & v119));
              v130 = *(float *)(v117 + 4 * (((int)v126 + 3) & v119));
              v131 = *(float *)(v117 + 4 * (((int)v126 - 1) & v119));
              v132 = *(float *)(v117 + 4 * (((int)v126 - 2) & v119));
              v133 = (float)(v127 * -2.3333)
                   + v131 * 1.25
                   + (float)(v128 * 1.6667)
                   + v129 * -0.5
                   + (float)(v130 * 0.083333)
                   + (float)(v132 * -0.16667);
              a3[v120++][v116] = v127
                               + (float)((float)((float)((float)((float)(v128 - v131) * 0.66667)
                                                       + (float)((float)(v132 - v129) * 0.083333))
                                               + (float)((float)(v133
                                                               + (float)((float)((float)((float)((float)(v129 - v131)
                                                                                               * 0.58333)
                                                                                       + (float)((float)(v132 - v130)
                                                                                               * 0.083333))
                                                                               + (float)((float)(v127 - v128) * 1.3333))
                                                                       * (float)(v126 - (float)(int)v126)))
                                                       * (float)(v126 - (float)(int)v126)))
                                       * (float)(v126 - (float)(int)v126));
            }
            while (v10 != v120);
          }
          v48 = v119 & (v48 + 1);
          ++v116;
        }
        while (v116 != v118);
        goto LABEL_98;
      case 3:
        v44 = 0;
        v45 = *((_QWORD *)v5 + 2);
        v46 = v194;
        v47 = *((_DWORD *)v5 + 10);
        v48 = *((_DWORD *)v5 + 11);
        do
        {
          *(float *)(v45 + 4 * v48) = v7[v44];
          if ((_DWORD)v10)
          {
            v49 = 0;
            v50 = *((_QWORD *)v5 + 9);
            do
            {
              if (v6 == 2.7183)
              {
                v51 = *(float *)(v50 + 4 * v49)
                    + (float)((float)(*(float *)(*((_QWORD *)v5 + 6) + 4 * v49) - *(float *)(v50 + 4 * v49))
                            / (float)(v46 - v44));
              }
              else
              {
                v52 = *(float *)(*((_QWORD *)v5 + 6) + 4 * v49);
                v51 = v52 + (float)(*((float *)v5 + 24) * (float)(*(float *)(v50 + 4 * v49) - v52));
              }
              *(float *)(v50 + 4 * v49) = v51;
              v53 = (float)v48 - v51;
              if (v53 >= 0.0)
                v54 = -0.0;
              else
                v54 = (float)v11;
              v55 = v53 + v54;
              v56 = *(float *)(v45 + 4 * (v47 & (int)v55));
              v57 = *(float *)(v45 + 4 * (((int)v55 + 1) & v47));
              v58 = *(float *)(v45 + 4 * (((int)v55 - 1) & v47));
              v59 = (float)(v57 + (float)(v58 * -0.33333)) + v56 * -0.5 - (float)(v57 * 0.16667);
              v60 = -(v56 - (float)(v57 + v58) * 0.5);
              v61 = (float)((float)(v57 - v58) * 0.16667) + (float)(v56 - v57) * 0.5;
              a3[v49++][v44] = v56
                             + (float)((float)(v59
                                             + (float)((float)(v60 + (float)(v61 * (float)(v55 - (float)(int)v55)))
                                                     * (float)(v55 - (float)(int)v55)))
                                     * (float)(v55 - (float)(int)v55));
            }
            while (v10 != v49);
          }
          v48 = v47 & (v48 + 1);
          ++v44;
        }
        while (v44 != v46);
        goto LABEL_98;
      case 4:
        v75 = 0;
        v76 = *((_QWORD *)v5 + 2);
        v77 = v194;
        v78 = *((_DWORD *)v5 + 10);
        v48 = *((_DWORD *)v5 + 11);
        do
        {
          *(float *)(v76 + 4 * v48) = v7[v75];
          if ((_DWORD)v10)
          {
            v79 = 0;
            v80 = *((_QWORD *)v5 + 9);
            do
            {
              if (v6 == 2.7183)
              {
                v81 = *(float *)(v80 + 4 * v79)
                    + (float)((float)(*(float *)(*((_QWORD *)v5 + 6) + 4 * v79) - *(float *)(v80 + 4 * v79))
                            / (float)(v77 - v75));
              }
              else
              {
                v82 = *(float *)(*((_QWORD *)v5 + 6) + 4 * v79);
                v81 = v82 + (float)(*((float *)v5 + 24) * (float)(*(float *)(v80 + 4 * v79) - v82));
              }
              *(float *)(v80 + 4 * v79) = v81;
              v83 = (float)v48 - v81;
              if (v83 >= 0.0)
                v84 = -0.0;
              else
                v84 = (float)v11;
              v85 = v83 + v84;
              v86 = *(float *)(v76 + 4 * (v78 & (int)v85));
              v87 = *(float *)(v76 + 4 * (((int)v85 + 1) & v78));
              v88 = *(float *)(v76 + 4 * (((int)v85 + 2) & v78));
              v89 = *(float *)(v76 + 4 * (((int)v85 + 3) & v78));
              v90 = *(float *)(v76 + 4 * (((int)v85 - 1) & v78));
              v91 = *(float *)(v76 + 4 * (((int)v85 - 2) & v78));
              v92 = v85 - (float)(int)v85;
              v93 = (float)((float)(v88 + v91) * 0.041667);
              v94 = (float)((float)(v87 + v90) * -0.16667) + v86 * 0.25 + v93;
              v95 = (float)((float)((float)((float)(v87 * -0.58333) + (float)(v86 * 0.41667)) + (float)(v88 * 0.29167))
                          + (float)((float)(v89 + (float)(v90 + v91)) * -0.041667))
                  + (float)((float)(v94
                                  + (float)((float)((float)((float)((float)(v90 - v88) * 0.041667)
                                                          + (float)((float)(v89 - v91) * 0.0083333))
                                                  + (float)((float)(v87 - v86) * 0.083333))
                                          * v92))
                          * v92);
              v96 = (float)((float)(v87 + v90) * 0.66667) + v86 * -1.25 - v93;
              v97 = v96 + (float)(v95 * v92);
              v98 = v90 * -0.5 + v91 * 0.05 + (float)(v86 * -0.33333) + v87 + v88 * -0.25 + (float)(v89 * 0.033333);
              a3[v79++][v75] = v86 + (float)((float)(v98 + (float)(v97 * v92)) * v92);
            }
            while (v10 != v79);
          }
          v48 = v78 & (v48 + 1);
          ++v75;
        }
        while (v75 != v77);
LABEL_98:
        *((_DWORD *)v5 + 11) = v48;
        return;
      case 5:
      case 7:
        v193 = a3;
        v12 = *((_DWORD *)v5 + 33);
        if (v12)
          v13 = v12 - 1;
        else
          v13 = 0;
        v192 = *((_DWORD *)v5 + 11);
        MEMORY[0x24BDAC7A8](this);
        v197 = (char *)&v190 - v15;
        if ((_DWORD)v10)
        {
          v16 = (float *)*((_QWORD *)v5 + 6);
          v17 = v10;
          v18 = v197;
          do
          {
            v19 = *v16++;
            v20 = v19 * 1024.0;
            if ((float)(v19 * 1024.0) < 0.0)
              v21 = -1.0;
            else
              v21 = 1.0;
            *v18++ = (uint64_t)(float)(v20 + (float)(v21 * 0.5));
            --v17;
          }
          while (v17);
        }
        v191 = v11 - v13;
        v22 = v194;
        v23 = v194 - v11;
        v190 = v14;
        if (v194 <= v11)
        {
          v42 = *((unsigned int *)v5 + 11);
          if ((int)v42 + (int)v194 >= v11)
          {
            v136 = (v11 - v42);
            if ((_DWORD)v42 != (_DWORD)v11)
              memmove((void *)(*((_QWORD *)v5 + 2) + 4 * v42), v7, 4 * v136);
            v43 = v194;
            if ((_DWORD)v136 != (_DWORD)v194)
              memmove((void *)(*((_QWORD *)v5 + 2) + 4 * v13), &v7[v136], 4 * v194 - 4 * v136);
            *((_DWORD *)v5 + 11) += v23 + v13;
            if (v191 < v43)
              IR::DelayLine::process();
          }
          else
          {
            memmove((void *)(*((_QWORD *)v5 + 2) + 4 * v42), v7, 4 * v194);
            *((_DWORD *)v5 + 11) += v22;
            v43 = v22;
          }
          v137 = v193;
          if (v12 >= 2)
            memmove(*((void **)v5 + 2), (const void *)(*((_QWORD *)v5 + 3) - 4 * v13), 4 * v13);
          if ((_DWORD)v10)
          {
            v138 = 0;
            v139 = *((_QWORD *)v5 + 9);
            do
            {
              v140 = *(float *)(*((_QWORD *)v5 + 6) + 4 * v138);
              v141 = *(_DWORD *)&v197[4 * v138];
              v142 = v137[v138];
              v143 = *(float *)(v139 + 4 * v138);
              if ((float)(v143 * 1024.0) < 0.0)
                v144 = -1.0;
              else
                v144 = 1.0;
              if ((int)((uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5)) - v141) >= 0)
                v145 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5)) - v141;
              else
                v145 = v141 - (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v144 * 0.5));
              v146 = *((_DWORD *)v5 + 1);
              if (v146 == 7)
                v147 = 8;
              else
                v147 = 1;
              v148 = powf(*((float *)v5 + 24), (float)(int)v147);
              v149 = v145 > 0x20;
              v150 = v145 >= 0x21 && (int)v147 <= (int)v43;
              if (v150)
              {
                v153 = v148;
                v154 = *((_QWORD *)v5 + 17);
                v196 = v138;
                v155 = *(_DWORD *)(v154 + 4 * v138);
                if (v146 == 7)
                  v156 = 3;
                else
                  v156 = 0;
                LODWORD(v195) = v156;
                v152 = v192;
                v157 = v43;
                do
                {
                  if (v6 == 2.7183)
                  {
                    if (!(v157 >> (char)v195))
                      IR::DelayLine::process();
                    v158 = *((_QWORD *)v5 + 17);
                    LODWORD(v159) = (v141 - *(_DWORD *)(v158 + 4 * v196)) / (int)(v157 >> (char)v195)
                                  + *(_DWORD *)(v158 + 4 * v196);
                    *(_DWORD *)(v158 + 4 * v196) = v159;
                  }
                  else
                  {
                    v143 = v140 + (float)(v153 * (float)(v143 - v140));
                    if ((float)(v143 * 1024.0) < 0.0)
                      v160 = -1.0;
                    else
                      v160 = 1.0;
                    v159 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v160 * 0.5));
                    v155 = v159;
                  }
                  IR::DelayLine::processPolyphaseQ22_10(v5, v152, v159, v142, v147);
                  if (v155 - v141 >= 0)
                    v161 = v155 - v141;
                  else
                    v161 = v141 - v155;
                  v152 = *((_DWORD *)v5 + 10) & (v152 + v147);
                  v151 = v157 - v147;
                  v149 = v161 > 0x20;
                  v142 += v147;
                  v162 = v161 < 0x21 || (int)(v157 - v147) < (int)v147;
                  v157 -= v147;
                }
                while (!v162);
                v43 = v194;
                v138 = v196;
              }
              else
              {
                v151 = v43;
                v152 = v192;
              }
              v137 = v193;
              if ((int)v151 >= 1)
              {
                if (v6 == 2.7183)
                {
                  LODWORD(v163) = *(_DWORD *)(*((_QWORD *)v5 + 17) + 4 * v138);
                }
                else
                {
                  if (!v149)
                    v143 = v140;
                  if ((float)(v143 * 1024.0) < 0.0)
                    v164 = -1.0;
                  else
                    v164 = 1.0;
                  v163 = (uint64_t)(float)((float)(v143 * 1024.0) + (float)(v164 * 0.5));
                }
                IR::DelayLine::processPolyphaseQ22_10(v5, v152, v163, v142, v151);
              }
              v139 = *((_QWORD *)v5 + 9);
              *(float *)(v139 + 4 * v138++) = v143;
            }
            while (v138 != v10);
          }
        }
        else
        {
          v24 = 0;
          v196 = v194;
          v25 = *((_DWORD *)v5 + 11);
          v26 = v193;
          v195 = v7;
          do
          {
            v27 = v7[v24];
            v28 = *((_QWORD *)v5 + 2);
            *(float *)(v28 + 4 * v25) = v27;
            if (v25 < v13)
              *(float *)(v28 + 4 * (v25 + v191)) = v27;
            if ((_DWORD)v10)
            {
              v29 = 0;
              v30 = v22 - v24;
              do
              {
                if (v6 == 2.7183)
                {
                  v31 = *((_QWORD *)v5 + 17);
                  LODWORD(v32) = (*(_DWORD *)&v197[4 * v29] - *(_DWORD *)(v31 + 4 * v29)) / v30
                               + *(_DWORD *)(v31 + 4 * v29);
                }
                else
                {
                  v33 = *(float *)(*((_QWORD *)v5 + 6) + 4 * v29);
                  v34 = *((_QWORD *)v5 + 9);
                  v35 = v33 + (float)(*((float *)v5 + 24) * (float)(*(float *)(v34 + 4 * v29) - v33));
                  *(float *)(v34 + 4 * v29) = v35;
                  v36 = v35 * 1024.0;
                  if (v36 < 0.0)
                    v37 = -1.0;
                  else
                    v37 = 1.0;
                  v32 = (uint64_t)(float)(v36 + (float)(v37 * 0.5));
                  v31 = *((_QWORD *)v5 + 17);
                }
                *(_DWORD *)(v31 + 4 * v29) = v32;
                v38 = *((_DWORD *)v5 + 32);
                v39 = 10 - v38;
                v40 = v32 + (1 << (9 - v38)) - 512;
                v41 = (unsigned __int16)(v40 & 0x3FF) >> v39;
                if (*((_DWORD *)v5 + 30) <= v41)
                  IR::DelayLine::process();
                vDSP_dotpr((const float *)(*((_QWORD *)v5 + 2)+ 4* ((v11 - (v13 + (v40 >> 10)) + *((_DWORD *)v5 + 11)) & *((_DWORD *)v5 + 10))+ 4 * v13), -1, (const float *)(*((_QWORD *)v5 + 13) + 4 * *((_DWORD *)v5 + 33) * v41), 1, &v26[v29++][v24], *((unsigned int *)v5 + 33));
              }
              while (v10 != v29);
              v25 = *((_DWORD *)v5 + 11);
              LODWORD(v22) = v194;
              v7 = v195;
            }
            v25 = *((_DWORD *)v5 + 10) & (v25 + 1);
            *((_DWORD *)v5 + 11) = v25;
            ++v24;
          }
          while (v24 != v196);
        }
        return;
      case 6:
        v134 = *((unsigned int *)v5 + 11);
        v135 = *((_DWORD *)v5 + 33) - 1;
        if ((int)v134 + (int)v194 >= v11)
        {
          v165 = a3;
          v166 = (v11 - v134);
          if ((_DWORD)v11 != (_DWORD)v134)
            memmove((void *)(*((_QWORD *)v5 + 2) + 4 * v134), v7, 4 * v166);
          v167 = (char *)v134;
          v168 = v194;
          if ((_DWORD)v166 != (_DWORD)v194)
            memmove((void *)(*((_QWORD *)v5 + 2) + 4 * v135), &v7[v166], 4 * v194 - 4 * v166);
          *((_DWORD *)v5 + 11) += v194 - v11 + v135;
          v150 = v11 - v135 > v168;
          a3 = v165;
          v134 = (unint64_t)v167;
          if (!v150)
            IR::DelayLine::process();
        }
        else
        {
          memmove((void *)(*((_QWORD *)v5 + 2) + 4 * v134), v7, 4 * v194);
          *((_DWORD *)v5 + 11) += v194;
        }
        v169 = v11;
        if (v135)
          memmove(*((void **)v5 + 2), (const void *)(*((_QWORD *)v5 + 3) - 4 * v135), 4 * v135);
        if (!(_DWORD)v10)
          return;
        v170 = 0;
        v171 = v135 - v11;
        v197 = (char *)v134;
        break;
      default:
        v62 = 0;
        v63 = *((_QWORD *)v5 + 2);
        v64 = *((_DWORD *)v5 + 10);
        v65 = *((_DWORD *)v5 + 11);
        v66 = v194;
        do
        {
          *(float *)(v63 + 4 * v65) = v7[v62];
          if ((_DWORD)v10)
          {
            v67 = 0;
            v68 = *((_QWORD *)v5 + 9);
            do
            {
              if (v6 == 2.7183)
              {
                v69 = *(float *)(v68 + 4 * v67)
                    + (float)((float)(*(float *)(*((_QWORD *)v5 + 6) + 4 * v67) - *(float *)(v68 + 4 * v67))
                            / (float)(v66 - v62));
              }
              else
              {
                v70 = *(float *)(*((_QWORD *)v5 + 6) + 4 * v67);
                v69 = v70 + (float)(*((float *)v5 + 24) * (float)(*(float *)(v68 + 4 * v67) - v70));
              }
              *(float *)(v68 + 4 * v67) = v69;
              v71 = (float)v65 - v69;
              if (v71 >= 0.0)
                v72 = -0.0;
              else
                v72 = (float)v11;
              v73 = v71 + v72;
              v74 = *(float *)(v63 + 4 * (v64 & (int)v73));
              a3[v67++][v62] = v74
                             + (float)((float)(v73 - (float)(int)v73)
                                     * (float)(*(float *)(v63 + 4 * (((int)v73 + 1) & v64)) - v74));
            }
            while (v10 != v67);
          }
          v65 = v64 & (v65 + 1);
          ++v62;
        }
        while (v62 != v66);
        *((_DWORD *)v5 + 11) = v65;
        return;
    }
    do
    {
      __E = a3[v170];
      v173 = v134;
      v174 = v194;
      while (1)
      {
        while (1)
        {
          v175 = *((_QWORD *)v5 + 35);
          v176 = *(_DWORD *)(v175 + 4 * v170);
          if (!v176)
            break;
          if (v174 >= v176)
            v177 = v176;
          else
            v177 = v174;
          v178 = *(float *)(*((_QWORD *)v5 + 9) + 4 * v170) * 1024.0;
          if (v178 < 0.0)
            v179 = -1.0;
          else
            v179 = 1.0;
          IR::DelayLine::processPolyphaseQ22_10(v5, v173, (uint64_t)(float)(v178 + (float)(v179 * 0.5)), *((float **)v5 + 29), v177);
          v180 = *(float *)(*((_QWORD *)v5 + 32) + 4 * v170) * 1024.0;
          if (v180 < 0.0)
            v181 = -1.0;
          else
            v181 = 1.0;
          IR::DelayLine::processPolyphaseQ22_10(v5, v173, (uint64_t)(float)(v180 + (float)(v181 * 0.5)), *((float **)v5 + 26), v177);
          v182 = *((_QWORD *)v5 + 20);
          v183 = ((unint64_t)(*((_QWORD *)v5 + 21) - v182) >> 2)
               - *(unsigned int *)(*((_QWORD *)v5 + 35) + 4 * v170);
          vDSP_vmma((const float *)(v182 + 4 * v183), 1, *((const float **)v5 + 26), 1, (const float *)(*((_QWORD *)v5 + 23) + 4 * v183), 1, *((const float **)v5 + 29), 1, __E, 1, v177);
          *(_DWORD *)(*((_QWORD *)v5 + 35) + 4 * v170) -= v177;
          v174 = (v174 - v177);
          if ((int)v177 + v173 >= v169)
            v184 = v171;
          else
            v184 = 0;
          v173 += v177 + v184;
          __E += v177;
          if (!(_DWORD)v174)
            goto LABEL_190;
        }
        v185 = *((_QWORD *)v5 + 6);
        v186 = *((_QWORD *)v5 + 9);
        v187 = *(float *)(v186 + 4 * v170);
        if (*(float *)(v185 + 4 * v170) == v187)
          break;
        *(_DWORD *)(v175 + 4 * v170) = (*((_QWORD *)v5 + 21) - *((_QWORD *)v5 + 20)) >> 2;
        *(float *)(*((_QWORD *)v5 + 32) + 4 * v170) = v187;
        *(_DWORD *)(v186 + 4 * v170) = *(_DWORD *)(v185 + 4 * v170);
        if (!(_DWORD)v174)
          goto LABEL_190;
      }
      v188 = v187 * 1024.0;
      if (v188 < 0.0)
        v189 = -1.0;
      else
        v189 = 1.0;
      IR::DelayLine::processPolyphaseQ22_10(v5, v173, (uint64_t)(float)(v188 + (float)(v189 * 0.5)), __E, v174);
LABEL_190:
      ++v170;
      LODWORD(v134) = (_DWORD)v197;
    }
    while (v170 != v10);
  }
  else if (v6 == 2.7183)
  {
    IR::DelayLine::swapDelays(this);
  }
}

void *IR::DelayLine::swapDelays(IR::DelayLine *this)
{
  const void *v2;
  unint64_t v3;
  void *result;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  float *v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;

  v2 = (const void *)*((_QWORD *)this + 6);
  v3 = (uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v2) >> 2;
  v5 = (char *)this + 72;
  result = (void *)*((_QWORD *)this + 9);
  v6 = (uint64_t)(*((_QWORD *)v5 + 1) - (_QWORD)result) >> 2;
  if (v6 >= v3)
    v7 = v3;
  else
    v7 = v6;
  if (v7)
    result = memmove(result, v2, 4 * v7);
  if ((*((_DWORD *)this + 1) | 2) == 7)
  {
    v8 = (_DWORD *)*((_QWORD *)this + 17);
    v9 = *((_QWORD *)this + 18) - (_QWORD)v8;
    v10 = (float *)*((_QWORD *)this + 6);
    v11 = (uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v10) >> 2 >= (unint64_t)(v9 >> 2)
        ? v9 >> 2
        : (uint64_t)(*((_QWORD *)this + 7) - (_QWORD)v10) >> 2;
    v11 = v11;
    if ((_DWORD)v11)
    {
      do
      {
        v12 = *v10++;
        v13 = v12 * 1024.0;
        if ((float)(v12 * 1024.0) < 0.0)
          v14 = -1.0;
        else
          v14 = 1.0;
        *v8++ = (uint64_t)(float)(v13 + (float)(v14 * 0.5));
        --v11;
      }
      while (v11);
    }
  }
  return result;
}

void IR::DelayLine::process(IR::DelayLine *this, const float *a2, float *a3, vDSP_Length a4)
{
  float *v4[2];

  v4[1] = *(float **)MEMORY[0x24BDAC8D0];
  v4[0] = a3;
  IR::DelayLine::process(this, a2, v4, 1u, a4);
}

void std::default_delete<SincKernelFactory>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x212BC7928);
  }
}

void SincKernelFactory::SincKernelFactory(SincKernelFactory *this)
{
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  std::vector<void const*>::reserve((void **)this, 0x20uLL);
}

void sub_21059E6F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *AudioDSP::Core::VBAP::VBAP(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  *a1 = 0;
  v8 = operator new();
  AudioDSP::Core::VBAP::Implementation::Implementation(v8, a2, a3, a4);
  std::unique_ptr<AudioDSP::Core::VBAP::Implementation>::reset[abi:ne180100](a1, v8);
  return a1;
}

void sub_21059E784(void *a1)
{
  uint64_t *v1;
  uint64_t v2;

  MEMORY[0x212BC7928](v2, 0x10B0C403CF8D957);
  __cxa_begin_catch(a1);
  std::unique_ptr<AudioDSP::Core::VBAP::Implementation>::reset[abi:ne180100](v1, 0);
  __cxa_rethrow();
}

void sub_21059E7C4(_Unwind_Exception *a1)
{
  uint64_t *v1;

  __cxa_end_catch();
  std::unique_ptr<AudioDSP::Core::VBAP::Implementation>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<AudioDSP::Core::VBAP::Implementation>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    VBAP::~VBAP((VBAP *)(v2 + 8));
    JUMPOUT(0x212BC7928);
  }
  return result;
}

void AudioDSP::Core::VBAP::~VBAP(AudioDSP::Core::VBAP *this)
{
  std::unique_ptr<AudioDSP::Core::VBAP::Implementation>::reset[abi:ne180100]((uint64_t *)this, 0);
}

{
  std::unique_ptr<AudioDSP::Core::VBAP::Implementation>::reset[abi:ne180100]((uint64_t *)this, 0);
}

uint64_t AudioDSP::Core::VBAP::calculateVBAPGains(uint64_t a1, float32x2_t *a2, float **a3)
{
  if (*(_QWORD *)a1)
    return VBAP::calculateVBAPGains((VBAP *)(*(_QWORD *)a1 + 8), a2, *a3);
  else
    return 4294956429;
}

uint64_t AudioDSP::Core::VBAP::triangleLookup(uint64_t a1, float32x2_t *a2, int *a3, float *a4)
{
  if (*(_QWORD *)a1)
    return VBAP::triangleLookup((VBAP *)(*(_QWORD *)a1 + 8), a2, a3, a4);
  else
    return 4294956429;
}

uint64_t AudioDSP::Core::VBAP::changeSpeakerLocations(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  if (*a1)
    return VBAP::changeSpeakerLocations(*a1 + 8, a2, a3);
  else
    return 4294956429;
}

uint64_t AudioDSP::Core::VBAP::Implementation::Implementation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const void *v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  std::logic_error *exception;
  void *__p;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;

  v7 = *(const void **)a2;
  v8 = *(_QWORD *)(a2 + 8);
  v10 = (v8 - (uint64_t)v7) >> 2;
  *(_QWORD *)a1 = v10;
  v11 = a1 + 8;
  v18 = 0;
  v19 = 0;
  v17 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&v17, v7, v8, v10);
  __p = 0;
  v15 = 0;
  v16 = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(&__p, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  VBAP::VBAP(v11, (uint64_t *)&v17, (uint64_t *)&__p, *(_DWORD *)a4, (char **)(a4 + 8), (uint64_t *)(a4 + 32));
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  if (v17)
  {
    v18 = v17;
    operator delete(v17);
  }
  if (!*(_BYTE *)(a1 + 323))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Failed to initialize VBAP with the arguments provided.");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  return a1;
}

void sub_21059E9D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  VBAP *v13;

  VBAP::~VBAP(v13);
  _Unwind_Resume(a1);
}

void IR::getFilePtr(const __CFURL **a1@<X0>, int a2@<W1>, FILE **a3@<X8>)
{
  const __CFURL *v5;
  FILE *v6;
  IR *v7;
  IR *v8;
  int v9;
  NSObject *IRDataLog;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  FILE *v28;
  NSObject *v29;
  stat v30;
  UInt8 buffer[1024];
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = (FILE *)MEMORY[0x24BDAE2E0];
  *a3 = 0;
  a3[1] = v6;
  if (v5)
  {
    v7 = (IR *)CFURLGetFileSystemRepresentation(v5, 1u, buffer, 1024);
    if ((_DWORD)v7)
    {
      v8 = (IR *)stat((const char *)buffer, &v30);
      v9 = (int)v8;
      if ((_DWORD)v8)
      {
        if (a2)
        {
          IRDataLog = IR::getIRDataLog(v8);
          if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_ERROR))
            IR::getFilePtr(v9, IRDataLog);
        }
      }
      else if ((v30.st_mode & 0xF000) == 0x4000)
      {
        if (a2)
        {
          v27 = IR::getIRDataLog(v8);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            IR::getFilePtr();
        }
      }
      else
      {
        v28 = fopen((const char *)buffer, "r");
        *a3 = v28;
        a3[1] = v6;
        if (!v28)
        {
          if (a2)
          {
            v29 = IR::getIRDataLog(0);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
              IR::getFilePtr();
          }
        }
      }
    }
    else if (a2)
    {
      v19 = IR::getIRDataLog(v7);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        IR::getFilePtr(v19, v20, v21, v22, v23, v24, v25, v26);
    }
  }
  else if (a2)
  {
    v11 = IR::getIRDataLog(0);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      IR::getFilePtr(v11, v12, v13, v14, v15, v16, v17, v18);
  }
}

void sub_21059EBA8(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = 0;
  _Unwind_Resume(a1);
}

void IR::getFilePtr(CFTypeRef *this@<X0>, const IR::IRDataAttributes *a2@<X1>, FILE **a3@<X8>)
{
  int v3;
  const __CFURL *v5;
  const __CFURL *v6;

  v3 = (int)a2;
  v5 = (const __CFURL *)*this;
  if (*this)
    CFRetain(*this);
  v6 = v5;
  IR::getFilePtr(&v6, v3, a3);
  if (v5)
    CFRelease(v5);
}

void sub_21059EC38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::~Implementation(IR::IRDataLoader::Implementation *this)
{
  IR::PersonalizedIRData *v2;
  IR *v3;
  NSObject *IRDataLog;
  _BYTE v5[24];
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = (IR::IRDataLoader::Implementation *)((char *)this + 160);
  IR::PersonalizedIRData::UnregisterObservers((IR::PersonalizedIRData::Implementation **)this + 20);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 88));
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::clear((uint64_t)this + 168);
  IRDataLog = IR::getIRDataLog(v3);
  if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v5 = 136315138;
    *(_QWORD *)&v5[4] = "~Implementation";
    _os_log_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEFAULT, "%s: Personalized HRTF listener is unregistered, all callbacks are cleared.", v5, 0xCu);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 88));
  std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::destroy((uint64_t)this + 208, *((_QWORD **)this + 27));
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::~__hash_table((uint64_t)this + 168);
  IR::PersonalizedIRData::~PersonalizedIRData(v2);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 88));
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 24));
  *(_QWORD *)v5 = this;
  std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)v5);
}

void sub_21059ED64(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void IR::IRDataLoader::Implementation::load(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, float a7@<S0>)
{
  const void *v13;
  CFTypeRef v14;
  float v15;
  int v16;
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a3);
  v15 = a7;
  v16 = a4;
  v13 = 0;
  IR::IRDataLoader::Implementation::load(a1, a2, (const IR::IRDataAttributes *)&v14, &v13, a5, a6);
  if (cf)
    CFRelease(cf);
  if (v18)
    CFRelease(v18);
  if (v17)
    CFRelease(v17);
  if (v14)
    CFRelease(v14);
}

void sub_21059EE34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  applesauce::CF::DataRef::~DataRef((const void **)&a9);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a10);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::load(uint64_t a1@<X0>, uint64_t a2@<X1>, const IR::IRDataAttributes *a3@<X2>, const void **a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::recursive_mutex *v12;
  const void *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  CFTypeRef cf;

  v12 = (std::recursive_mutex *)(a1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  v13 = *a4;
  if (v13)
    CFRetain(v13);
  cf = v13;
  IR::IRDataLoader::Implementation::loadPrivate(a1, a2, a3, &cf, a5, a6);
  if (cf)
    CFRelease(cf);
  v15 = *(uint64_t **)a1;
  v14 = *(uint64_t **)(a1 + 8);
  if (*(uint64_t **)a1 == v14)
  {
    v14 = *(uint64_t **)a1;
  }
  else
  {
    v16 = v15 + 21;
    while (1)
    {
      v17 = *(v16 - 1);
      if (!v17 || *(_QWORD *)(v17 + 8) == -1)
        break;
      v18 = v16 == v14;
      v16 += 21;
      if (v18)
      {
        v15 = *(uint64_t **)(a1 + 8);
        goto LABEL_20;
      }
    }
    v15 = v16 - 21;
    if (v16 - 21 != v14 && v16 != v14)
    {
      do
      {
        v19 = v16[20];
        if (v19 && *(_QWORD *)(v19 + 8) != -1)
        {
          std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>::operator=[abi:ne180100](v15, v16);
          v15 += 21;
        }
        v16 += 21;
      }
      while (v16 != v14);
      v14 = *(uint64_t **)(a1 + 8);
    }
  }
LABEL_20:
  std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::erase(a1, v15, v14);
  std::recursive_mutex::unlock(v12);
}

void sub_21059EF94(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  uint64_t v2;

  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::create(uint64_t a1@<X0>, uint64_t a2@<X2>, CFTypeRef *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unsigned int a7@<W7>, uint64_t a8@<X8>, float a9@<S0>, uint64_t a10, uint64_t a11, const void **a12, uint64_t a13, int a14, unsigned __int8 a15, int a16, int a17, uint64_t *a18)
{
  int v24;
  int v25;
  int v26;
  CFTypeRef v27;
  IR *v28;
  NSObject *IRDataLog;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  CFTypeRef cf;
  CFTypeRef v36[8];
  CFTypeRef v37;
  CFTypeRef v38;
  CFTypeRef v39;
  unsigned __int8 v40;
  unsigned int v41;
  float v42;

  v24 = a17;
  v25 = a14;
  v26 = a15;
  v42 = a9;
  v41 = a7;
  v40 = a15;
  v27 = *a3;
  if (*a3)
  {
    CFRetain(*a3);
    a9 = v42;
    v25 = a14;
    v26 = v40;
    v24 = a17;
  }
  cf = v27;
  IR::IRDataAttributes::IRDataAttributes((uint64_t)v36, &cf, v25, v26 != 0, v24, a9);
  if (cf)
    CFRelease(cf);
  v28 = (IR *)std::allocate_shared[abi:ne180100]<IR::IRData,std::allocator<IR::IRData>,std::vector<std::vector<float>> const&,std::vector<std::vector<float>> const&,std::vector<IR::IRCoordinateType> const&,std::vector<std::vector<float>> const&,float &,unsigned int &,std::vector<float> const&,std::vector<IR::IRInterpolationMethod> const&,applesauce::CF::DictionaryRef const&,std::string const&,unsigned int &,BOOL &,unsigned int &,IR::IRSphericalInterpolation &,std::vector<float> const&,void>(a2, a4, a5, a6, &v42, &v41, a10, &v33, a11, a12, a13, (unsigned int *)&a14, &v40, &a16, &a17, a18);
  v34 = v33;
  if ((_QWORD)v33)
  {
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
    IR::IRDataLoader::Implementation::swapLoadedIR(a1, (float *)v36, (uint64_t *)&v34);
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 24));
    *(_OWORD *)a8 = v34;
  }
  else
  {
    IRDataLog = IR::getIRDataLog(v28);
    if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_ERROR))
      IR::IRDataLoader::Implementation::create();
    *(_QWORD *)a8 = 0;
    *(_QWORD *)(a8 + 8) = 0;
    v30 = (std::__shared_weak_count *)*((_QWORD *)&v34 + 1);
    if (*((_QWORD *)&v34 + 1))
    {
      v31 = (unint64_t *)(*((_QWORD *)&v34 + 1) + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
  if (v39)
    CFRelease(v39);
  if (v38)
    CFRelease(v38);
  if (v37)
    CFRelease(v37);
  if (v36[0])
    CFRelease(v36[0]);
}

void sub_21059F198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)va);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va1);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::swapLoadedIR(uint64_t a1, float *a2, uint64_t *a3)
{
  std::recursive_mutex *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  IR::IRData *v16;
  float OriginalSampleRate;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v6 = (std::recursive_mutex *)(a1 + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
  v8 = *a3;
  v7 = (std::__shared_weak_count *)a3[1];
  if (v7)
  {
    p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
  }
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 != v12)
  {
    while ((IR::IRDataAttributes::operator==(v11, (uint64_t)a2) & 1) == 0)
    {
      if (a2[2] == 0.0)
      {
        if (IR::IRDataAttributes::equalsExceptSampleRate((IR::IRDataAttributes *)a2, (const IR::IRDataAttributes *)v11))
        {
          v13 = *(std::__shared_weak_count **)(v11 + 160);
          if (v13)
          {
            v14 = std::__shared_weak_count::lock(v13);
            if (v14)
            {
              v15 = v14;
              v16 = *(IR::IRData **)(v11 + 152);
              if (v16)
              {
                OriginalSampleRate = IR::IRData::getOriginalSampleRate(*(IR::IRData **)(v11 + 152));
                if (OriginalSampleRate == IR::IRData::getSampleRate(v16))
                {
                  p_shared_owners = (unint64_t *)&v15->__shared_owners_;
                  do
                    v27 = __ldaxr(p_shared_owners);
                  while (__stlxr(v27 - 1, p_shared_owners));
                  if (!v27)
                  {
                    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                    std::__shared_weak_count::__release_weak(v15);
                  }
                  break;
                }
              }
              v18 = (unint64_t *)&v15->__shared_owners_;
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 - 1, v18));
              if (!v19)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
          }
        }
      }
      v11 += 168;
      if (v11 == v12)
      {
        v11 = v12;
        break;
      }
    }
  }
  if (v11 == *(_QWORD *)(a1 + 8))
  {
    if (v11 >= *(_QWORD *)(a1 + 16))
    {
      v25 = std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__emplace_back_slow_path<IR::IRDataAttributes const&,std::shared_ptr<IR::IRData const> const&>((uint64_t *)a1, (const IR::IRDataAttributes *)a2, a3);
    }
    else
    {
      IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)v11, (const IR::IRDataAttributes *)a2);
      v22 = a3[1];
      *(_QWORD *)(v11 + 152) = *a3;
      *(_QWORD *)(v11 + 160) = v22;
      if (v22)
      {
        v23 = (unint64_t *)(v22 + 16);
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = v11 + 168;
    }
    *(_QWORD *)(a1 + 8) = v25;
    if (v7)
      goto LABEL_20;
  }
  else
  {
    v20 = *(std::__shared_weak_count **)(v11 + 160);
    *(_QWORD *)(v11 + 152) = v8;
    *(_QWORD *)(v11 + 160) = v7;
    v7 = v20;
    if (v20)
LABEL_20:
      std::__shared_weak_count::__release_weak(v7);
  }
  std::recursive_mutex::unlock(v6);
  return 1;
}

void sub_21059F3DC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;
  std::__shared_weak_count *v2;

  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::loadPrivate(uint64_t a1@<X0>, uint64_t a2@<X1>, const IR::IRDataAttributes *a3@<X2>, CFTypeRef *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  IR *v11;
  int v12;
  NSObject *IRDataLog;
  uint64_t v14;
  IR::DataCache ***v15;
  int IsPersonalizedHRIRAllowed;
  _BOOL8 PersonalizedHRTF;
  _BOOL4 v18;
  NSObject *v19;
  uint64_t v20;
  const char *v21;
  CFStringRef v22;
  const char *CStringPtr;
  const void *size;
  IR *v25;
  __int128 v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  char Status;
  IR *v31;
  IR *v32;
  NSObject *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  int v37;
  CFStringRef v38;
  const char *v39;
  IR *v40;
  __int128 v41;
  std::__shared_weak_count *v42;
  unint64_t *p_shared_owners;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  NSObject *v48;
  int AudioChannelLayoutTagPrivate;
  _BOOL8 IsSupportedHOA;
  IR *v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  NSObject *v59;
  std::string::size_type v60;
  uint64_t v61;
  CFStringRef v62;
  const char *v63;
  NSObject *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  std::string *p_theString;
  __int128 v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  IR *FilterLength;
  NSObject *v77;
  std::string::size_type v78;
  uint64_t v79;
  CFStringRef v80;
  const char *v81;
  int v82;
  uint64_t v83;
  NSObject *v84;
  CFTypeRef v85;
  NSObject *v86;
  uint64_t v87;
  const char *v88;
  const char *v89;
  CFStringRef v90;
  const char *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  IR *v95;
  IR *v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  const char *v101;
  uint64_t v102;
  const char *v103;
  void *v104;
  void *exception;
  void *v106;
  void *v107;
  void *v108;
  CFTypeRef v109;
  std::string theString;
  CFStringRef v111;
  IR *v112[2];
  CFURLRef anURL[6];
  int v114;
  unsigned int v115;
  char v116;
  CFTypeRef v117;
  CFTypeRef v118;
  unsigned int v119;
  CFTypeRef v120;
  uint8_t buf[24];
  _BYTE v122[14];
  __int16 v123;
  const char *v124;
  uint64_t v125;

  v125 = *MEMORY[0x24BDAC8D0];
  v11 = IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)anURL, a3);
  v112[0] = 0;
  v112[1] = 0;
  v12 = v114;
  if (*a4)
  {
    if ((v114 - 1) <= 1)
    {
      IRDataLog = IR::getIRDataLog(v11);
      if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v14 = a2;
        else
          v14 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "loadPrivate";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)v122 = v12;
        _os_log_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEFAULT, "%s%s: Caching host-provided CFData for personalized HRIR type %u in IRDataLoader cache.", buf, 0x1Cu);
      }
    }
    goto LABEL_47;
  }
  if ((v114 - 1) <= 1)
  {
    v15 = (IR::DataCache ***)(a1 + 160);
    IsPersonalizedHRIRAllowed = IR::PersonalizedIRData::IsPersonalizedHRIRAllowed((IR::PersonalizedIRData *)(a1 + 160));
    PersonalizedHRTF = IR::IRDataLoader::Implementation::hasFailedToFetchPersonalizedHRTF((IR::IRDataLoader::Implementation *)a1);
    v18 = PersonalizedHRTF;
    if (PersonalizedHRTF | IsPersonalizedHRIRAllowed ^ 1u)
    {
      v19 = IR::getIRDataLog((IR *)PersonalizedHRTF);
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        goto LABEL_46;
      if (*(char *)(a2 + 23) >= 0)
        v20 = a2;
      else
        v20 = *(_QWORD *)a2;
      if (v18)
        v21 = "not available";
      else
        v21 = "available but not allowed";
      if (!anURL[0])
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](exception, "Could not construct");
      }
      v22 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v22);
      CStringPtr = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
      *(_DWORD *)buf = 136316162;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "loadPrivate";
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v122 = v12;
      *(_WORD *)&v122[4] = 2080;
      *(_QWORD *)&v122[6] = v21;
      v123 = 2080;
      v124 = CStringPtr;
      _os_log_impl(&dword_210570000, v19, OS_LOG_TYPE_DEFAULT, "%s%s: Personalized HRIR type %u is %s. Reverting back to generic HRIR: %s.", buf, 0x30u);
      size = (const void *)theString.__r_.__value_.__r.__words[0];
      if (!theString.__r_.__value_.__r.__words[0])
        goto LABEL_46;
    }
    else
    {
      IR::IRDataLoader::Implementation::getLoadedIR((IR::IRDataLoader::Implementation *)a1, (const IR::IRDataAttributes *)anURL, (IR::IRData::Implementation ***)buf);
      v26 = *(_OWORD *)buf;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      *(_OWORD *)v112 = v26;
      if ((_QWORD)v26)
      {
        v27 = IR::getIRDataLog(v25);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
          IR::IRDataLoader::Implementation::loadPrivate();
        goto LABEL_59;
      }
      v28 = IR::getIRDataLog(v25);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v29 = a2;
        else
          v29 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v29;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "loadPrivate";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)v122 = v12;
        _os_log_impl(&dword_210570000, v28, OS_LOG_TYPE_DEFAULT, "%s%s: Could not find personalized HRIR type %u in IRDataLoader cache. Searching CFData cache.", buf, 0x1Cu);
      }
      Status = IR::PersonalizedIRData::GetStatus((IR::PersonalizedIRData *)(a1 + 160));
      IR::PersonalizedIRData::GetCFData((uint64_t *)(a1 + 160), v12, Status & 1 | (v116 == 0), v115, (uint64_t)&theString);
      if (!theString.__r_.__value_.__s.__data_[0])
      {
        if (theString.__r_.__value_.__l.__size_)
        {
          std::allocate_shared[abi:ne180100]<IR::IRData,std::allocator<IR::IRData>,IR::IRDataAttributes &,applesauce::CF::DataRef &,std::vector<float> const&,void>((uint64_t)anURL, (CFTypeRef *)&theString.__r_.__value_.__l.__size_, a5, buf);
          std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100]((uint64_t)v112, (__int128 *)buf);
          v31 = (IR *)std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)buf);
          if (v112[0])
          {
            IR::IRDataLoader::Implementation::addIRDataToCache(a1, (uint64_t *)a2, (IR::IRDataAttributes *)anURL, v112);
            v33 = IR::getIRDataLog(v32);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a2 + 23) >= 0)
                v34 = a2;
              else
                v34 = *(_QWORD *)a2;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v34;
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = "loadPrivate";
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)v122 = v114;
              _os_log_impl(&dword_210570000, v33, OS_LOG_TYPE_DEFAULT, "%s%s: Personalized HRIR type %u is stored in IRDataLoader cache.", buf, 0x1Cu);
            }
            IR::PersonalizedIRData::ClearCache(v15);
            *(_OWORD *)a6 = *(_OWORD *)v112;
            v112[0] = 0;
            v112[1] = 0;
            std::pair<BOOL,applesauce::CF::DataRef>::~pair((uint64_t)&theString);
            goto LABEL_145;
          }
        }
      }
      v35 = IR::getIRDataLog(v31);
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v36 = a2;
        else
          v36 = *(_QWORD *)a2;
        if (!anURL[0])
        {
          v108 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x212BC76A0](v108, "Could not construct");
        }
        v37 = v114;
        v38 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&v111, v38);
        v39 = CFStringGetCStringPtr(v111, 0x8000100u);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v36;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "loadPrivate";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)v122 = v37;
        *(_WORD *)&v122[4] = 2080;
        *(_QWORD *)&v122[6] = v39;
        _os_log_impl(&dword_210570000, v35, OS_LOG_TYPE_DEFAULT, "%s%s: Could not find Personalized HRIR type %u. Reverting back to generic HRIR: %s.", buf, 0x26u);
        if (v111)
          CFRelease(v111);
      }
      size = (const void *)theString.__r_.__value_.__l.__size_;
      if (!theString.__r_.__value_.__l.__size_)
        goto LABEL_46;
    }
    CFRelease(size);
LABEL_46:
    v114 = 0;
  }
LABEL_47:
  IR::IRDataLoader::Implementation::getLoadedIR((IR::IRDataLoader::Implementation *)a1, (const IR::IRDataAttributes *)anURL, (IR::IRData::Implementation ***)buf);
  v41 = *(_OWORD *)buf;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  v42 = (std::__shared_weak_count *)v112[1];
  *(_OWORD *)v112 = v41;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(p_shared_owners);
    while (__stlxr(v44 - 1, p_shared_owners));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v46 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v112[0])
  {
    v48 = IR::getIRDataLog(v40);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
    {
      if (*(char *)(a2 + 23) < 0)
        a2 = *(_QWORD *)a2;
      if (!anURL[0])
      {
        v104 = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](v104, "Could not construct");
      }
      v90 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v90);
      v91 = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "loadPrivate";
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)v122 = v91;
      _os_log_debug_impl(&dword_210570000, v48, OS_LOG_TYPE_DEBUG, "%s%s: Fetched IR from cache: %s", buf, 0x20u);
      if (theString.__r_.__value_.__r.__words[0])
        CFRelease(theString.__r_.__value_.__l.__data_);
    }
LABEL_59:
    *(_OWORD *)a6 = *(_OWORD *)v112;
LABEL_144:
    v112[0] = 0;
    v112[1] = 0;
    goto LABEL_145;
  }
  if (!v118 && (!v119 || ChannelLayoutTagIsHOAWithAnyNumberOfChannels(v119)))
  {
    std::allocate_shared[abi:ne180100]<IR::IRData,std::allocator<IR::IRData>,IR::IRDataAttributes &,applesauce::CF::DataRef &,std::vector<float> const&,void>((uint64_t)anURL, a4, a5, buf);
    v69 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v70 = (std::__shared_weak_count *)v112[1];
    *(_OWORD *)v112 = v69;
    if (v70)
    {
      v71 = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
    v73 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v74 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v75 = __ldaxr(v74);
      while (__stlxr(v75 - 1, v74));
      if (!v75)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
    FilterLength = v112[0];
    if (v112[0])
    {
      FilterLength = (IR *)IR::IRData::getFilterLength(v112[0]);
      if ((_DWORD)FilterLength)
        goto LABEL_101;
      v92 = (std::__shared_weak_count *)v112[1];
      v112[0] = 0;
      v112[1] = 0;
      if (v92)
      {
        v93 = (unint64_t *)&v92->__shared_owners_;
        do
          v94 = __ldaxr(v93);
        while (__stlxr(v94 - 1, v93));
        if (!v94)
        {
          ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
          std::__shared_weak_count::__release_weak(v92);
        }
LABEL_101:
        if (v112[0])
        {
          v77 = IR::getIRDataLog(FilterLength);
          v78 = os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT);
          if ((_DWORD)v78)
          {
            if (*(char *)(a2 + 23) >= 0)
              v79 = a2;
            else
              v79 = *(_QWORD *)a2;
            if (!anURL[0])
            {
              v107 = __cxa_allocate_exception(0x10uLL);
              MEMORY[0x212BC76A0](v107, "Could not construct");
            }
            v80 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
            applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v80);
            v81 = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v79;
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = "loadPrivate";
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)v122 = v81;
            _os_log_impl(&dword_210570000, v77, OS_LOG_TYPE_DEFAULT, "%s%s: IR loaded: %s", buf, 0x20u);
            v78 = theString.__r_.__value_.__r.__words[0];
            if (theString.__r_.__value_.__r.__words[0])
              CFRelease(theString.__r_.__value_.__l.__data_);
          }
          v64 = IR::getIRDataLog((IR *)v78);
          if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            goto LABEL_141;
          v82 = *(char *)(a2 + 23);
          v83 = *(_QWORD *)a2;
          IR::IRDataAttributes::description((IR::IRDataAttributes *)anURL, 0, &theString);
          if (v82 >= 0)
            v67 = a2;
          else
            v67 = v83;
          if ((theString.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            p_theString = &theString;
          else
            p_theString = (std::string *)theString.__r_.__value_.__r.__words[0];
          goto LABEL_116;
        }
      }
    }
    v86 = IR::getIRDataLog(FilterLength);
    if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
      goto LABEL_141;
    if (*(char *)(a2 + 23) >= 0)
      v102 = a2;
    else
      v102 = *(_QWORD *)a2;
    v111 = (CFStringRef)applesauce::CF::URLRef::operator->(anURL);
    applesauce::CF::URLRef_proxy::get_filesystem_path((CFURLRef **)&v111, (applesauce::CF::StringRef *)&theString);
    v103 = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v102;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "loadPrivate";
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)v122 = v103;
    v89 = "%s%s: Failed to load IR: %s";
    goto LABEL_167;
  }
  AudioChannelLayoutTagPrivate = IR::IRDataLoader::Implementation::getAudioChannelLayoutTagPrivate((IR::IRDataLoader::Implementation *)a1, (const IR::IRDataAttributes *)anURL, 0);
  IsSupportedHOA = ChannelLayoutTagIsSupportedHOA(AudioChannelLayoutTagPrivate);
  if (IsSupportedHOA)
  {
    IR::IRDataLoader::Implementation::loadAndDecode((IR::IRDataAttributes *)anURL, (IR::IRDataLoader::Implementation *)a1, (char *)a2, (IR::IRData::Implementation ***)buf);
    v52 = *(_OWORD *)buf;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    v53 = (std::__shared_weak_count *)v112[1];
    *(_OWORD *)v112 = v52;
    if (v53)
    {
      v54 = (unint64_t *)&v53->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
        std::__shared_weak_count::__release_weak(v53);
      }
    }
    v56 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v57 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
        std::__shared_weak_count::__release_weak(v56);
      }
    }
    if (v112[0])
    {
      v59 = IR::getIRDataLog(v51);
      v60 = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
      if ((_DWORD)v60)
      {
        if (*(char *)(a2 + 23) >= 0)
          v61 = a2;
        else
          v61 = *(_QWORD *)a2;
        if (!anURL[0])
        {
          v106 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x212BC76A0](v106, "Could not construct");
        }
        v62 = CFURLCopyFileSystemPath(anURL[0], kCFURLPOSIXPathStyle);
        applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&theString, v62);
        v63 = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v61;
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = "loadPrivate";
        *(_WORD *)&buf[22] = 2080;
        *(_QWORD *)v122 = v63;
        _os_log_impl(&dword_210570000, v59, OS_LOG_TYPE_DEFAULT, "%s%s: Decoded HOA IR: %s", buf, 0x20u);
        v60 = theString.__r_.__value_.__r.__words[0];
        if (theString.__r_.__value_.__r.__words[0])
          CFRelease(theString.__r_.__value_.__l.__data_);
      }
      v64 = IR::getIRDataLog((IR *)v60);
      if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
        goto LABEL_141;
      v65 = *(char *)(a2 + 23);
      v66 = *(_QWORD *)a2;
      IR::IRDataAttributes::description((IR::IRDataAttributes *)anURL, 0, &theString);
      if (v65 >= 0)
        v67 = a2;
      else
        v67 = v66;
      if ((theString.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_theString = &theString;
      else
        p_theString = (std::string *)theString.__r_.__value_.__r.__words[0];
LABEL_116:
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v67;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "loadPrivate";
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)v122 = p_theString;
      _os_log_debug_impl(&dword_210570000, v64, OS_LOG_TYPE_DEBUG, "%s%s: IR attributes: %s", buf, 0x20u);
      if (SHIBYTE(theString.__r_.__value_.__r.__words[2]) < 0)
        operator delete(theString.__r_.__value_.__l.__data_);
      goto LABEL_141;
    }
    v86 = IR::getIRDataLog(v51);
    if (!os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
    {
LABEL_141:
      v95 = v112[0];
      if (v112[0])
      {
        IR::IRDataLoader::Implementation::addIRDataToCache(a1, (uint64_t *)a2, (IR::IRDataAttributes *)anURL, v112);
        v95 = v112[0];
      }
      v96 = v112[1];
      *(_QWORD *)a6 = v95;
      *(_QWORD *)(a6 + 8) = v96;
      goto LABEL_144;
    }
    if (*(char *)(a2 + 23) >= 0)
      v87 = a2;
    else
      v87 = *(_QWORD *)a2;
    v111 = (CFStringRef)applesauce::CF::URLRef::operator->(anURL);
    applesauce::CF::URLRef_proxy::get_filesystem_path((CFURLRef **)&v111, (applesauce::CF::StringRef *)&theString);
    v88 = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v87;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "loadPrivate";
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)v122 = v88;
    v89 = "%s%s: Failed to decode HOA IR: %s";
LABEL_167:
    _os_log_error_impl(&dword_210570000, v86, OS_LOG_TYPE_ERROR, v89, buf, 0x20u);
    applesauce::CF::StringRef::~StringRef((const void **)&theString.__r_.__value_.__l.__data_);
    goto LABEL_141;
  }
  v84 = IR::getIRDataLog((IR *)IsSupportedHOA);
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
  {
    if (*(char *)(a2 + 23) >= 0)
      v100 = a2;
    else
      v100 = *(_QWORD *)a2;
    v111 = (CFStringRef)applesauce::CF::URLRef::operator->(anURL);
    applesauce::CF::URLRef_proxy::get_filesystem_path((CFURLRef **)&v111, (applesauce::CF::StringRef *)&theString);
    v101 = CFStringGetCStringPtr((CFStringRef)theString.__r_.__value_.__l.__data_, 0x8000100u);
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v100;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "loadPrivate";
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)v122 = v101;
    _os_log_debug_impl(&dword_210570000, v84, OS_LOG_TYPE_DEBUG, "%s%s: HOA decoder attributes set, but IR is not HOA; loading without decoding: %s",
      buf,
      0x20u);
    applesauce::CF::StringRef::~StringRef((const void **)&theString.__r_.__value_.__l.__data_);
  }
  v85 = v118;
  v118 = 0;
  if (v85)
    CFRelease(v85);
  v119 = 0;
  v109 = 0;
  memset(buf, 0, sizeof(buf));
  IR::IRDataLoader::Implementation::loadPrivate(a1, a2, anURL, &v109, buf);
  if (*(_QWORD *)buf)
  {
    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
    operator delete(*(void **)buf);
  }
  if (v109)
    CFRelease(v109);
LABEL_145:
  v97 = (std::__shared_weak_count *)v112[1];
  if (v112[1])
  {
    v98 = (unint64_t *)((char *)v112[1] + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v120)
    CFRelease(v120);
  if (v118)
    CFRelease(v118);
  if (v117)
    CFRelease(v117);
  if (anURL[0])
    CFRelease(anURL[0]);
}

void sub_2105A02E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  void *v23;

  __cxa_free_exception(v23);
  std::pair<BOOL,applesauce::CF::DataRef>::~pair((uint64_t)&a12);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a23);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::erase(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  IR::IRDataAttributes *v5;
  IR::IRDataAttributes *v6;
  IR::IRDataAttributes *v7;

  if (a2 != a3)
  {
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,0>(a3, *(uint64_t **)(a1 + 8), a2);
    v6 = v5;
    v7 = *(IR::IRDataAttributes **)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 = (IR::IRDataAttributes *)((char *)v7 - 168);
        std::__destroy_at[abi:ne180100]<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>,0>(v7);
      }
      while (v7 != v6);
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  return a2;
}

void IR::IRDataLoader::Implementation::getLoadedIR(const IR::IRDataAttributes **this@<X0>, const void **a2@<X1>, _QWORD *a3@<X8>)
{
  const IR::IRDataAttributes *v4;
  const IR::IRDataAttributes *v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  const void *v11;
  BOOL v12;
  BOOL v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  CFTypeRef cf1[8];
  CFTypeRef v17;
  CFTypeRef v18;
  CFTypeRef cf;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *this;
  v5 = this[1];
  if (*this == v5)
    goto LABEL_27;
  while (1)
  {
    IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)cf1, v4);
    v8 = (std::__shared_weak_count *)*((_QWORD *)v4 + 20);
    v20 = *((_QWORD *)v4 + 19);
    v21 = v8;
    if (v8)
    {
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
    }
    v11 = *a2;
    v12 = ((unint64_t)cf1[0] | (unint64_t)*a2) == 0;
    if (cf1[0])
      v13 = v11 == 0;
    else
      v13 = 1;
    if (!v13)
      v12 = CFEqual(cf1[0], v11) != 0;
    if (v21)
      std::__shared_weak_count::__release_weak(v21);
    if (cf)
      CFRelease(cf);
    if (v18)
      CFRelease(v18);
    if (v17)
      CFRelease(v17);
    if (cf1[0])
      CFRelease(cf1[0]);
    if (v12)
      break;
    v4 = (const IR::IRDataAttributes *)((char *)v4 + 168);
    if (v4 == v5)
    {
      v4 = v5;
      break;
    }
  }
  if (v4 == this[1])
  {
LABEL_27:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    v14 = (std::__shared_weak_count *)*((_QWORD *)v4 + 20);
    if (v14)
    {
      v15 = std::__shared_weak_count::lock(v14);
      a3[1] = v15;
      if (v15)
        *a3 = *((_QWORD *)v4 + 19);
    }
  }
}

void IR::IRDataLoader::Implementation::getLoadedIR(IR::IRDataLoader::Implementation *this@<X0>, const IR::IRDataAttributes *a2@<X1>, IR::IRData::Implementation ***a3@<X8>)
{
  int v6;
  void *v7;
  BOOL (*v8)(IR::IRDataAttributes *, const IR::IRDataAttributes *);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  const IR::IRData *v20;
  IR::IRData *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *p_shared_owners;
  unint64_t v34;
  IR::IRDataAttributes *v35;
  IR::IRDataAttributes *v36;
  IR::IRDataAttributes *v37;
  uint64_t v38;
  IR::IRData::Implementation **v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  IR::IRData::Implementation **v43;
  std::__shared_weak_count *v44;
  void *__p[2];
  char v46;
  IR::IRData::Implementation **v47;
  std::__shared_weak_count *v48;
  _QWORD v49[7];
  _QWORD v50[7];
  _QWORD v51[7];
  CFTypeRef v52[8];
  CFTypeRef v53;
  CFTypeRef v54;
  char v55;
  CFTypeRef cf;
  const IR::IRData *v57;
  std::__shared_weak_count *v58;

  v57 = 0;
  v58 = 0;
  IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)v52, a2);
  v6 = *((_DWORD *)a2 + 12);
  if (v6)
    v7 = IR::IRDataAttributes::equalsForPersonalizedHRIR;
  else
    v7 = IR::IRDataAttributes::operator==;
  if (v6)
    v8 = IR::IRDataAttributes::equalsForPersonalizedHRIRExceptSampleRate;
  else
    v8 = (BOOL (*)(IR::IRDataAttributes *, const IR::IRDataAttributes *))IR::IRDataAttributes::equalsExceptSampleRate;
  v9 = *(_QWORD *)this;
  v10 = *((_QWORD *)this + 1);
  v51[0] = v52;
  v51[1] = v7;
  v51[2] = 0;
  v51[3] = v52;
  v51[4] = v8;
  v51[5] = 0;
  v51[6] = v52;
  v11 = (uint64_t *)std::find_if[abi:ne180100]<std::__wrap_iter<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *>,IR::IRDataLoader::Implementation::getLoadedIR(IR::IRDataAttributes const&)::$_0>(v9, v10, v51);
  v12 = *((_QWORD *)this + 1);
  if ((uint64_t *)v12 != v11)
    goto LABEL_8;
  if (!*((_BYTE *)a2 + 120))
  {
    v55 = 1;
    v38 = *(_QWORD *)this;
    v50[0] = v52;
    v50[1] = v7;
    v50[2] = 0;
    v50[3] = v52;
    v50[4] = v8;
    v50[5] = 0;
    v50[6] = v52;
    v11 = (uint64_t *)std::find_if[abi:ne180100]<std::__wrap_iter<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *>,IR::IRDataLoader::Implementation::getLoadedIR(IR::IRDataAttributes const&)::$_0>(v38, v12, v50);
    goto LABEL_8;
  }
  v55 = 0;
  v16 = *(_QWORD *)this;
  v49[0] = v52;
  v49[1] = v7;
  v49[2] = 0;
  v49[3] = v52;
  v49[4] = v8;
  v49[5] = 0;
  v49[6] = v52;
  v17 = std::find_if[abi:ne180100]<std::__wrap_iter<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *>,IR::IRDataLoader::Implementation::getLoadedIR(IR::IRDataAttributes const&)::$_0>(v16, v12, v49);
  v11 = (uint64_t *)v17;
  if (*((_QWORD *)this + 1) == v17)
  {
LABEL_8:
    v13 = 0;
    goto LABEL_9;
  }
  v18 = *(std::__shared_weak_count **)(v17 + 160);
  if (!v18 || (v19 = std::__shared_weak_count::lock(v18)) == 0)
  {
    v13 = 0;
    v57 = 0;
    v58 = 0;
    goto LABEL_9;
  }
  v13 = v19;
  v20 = (const IR::IRData *)v11[19];
  v57 = v20;
  v58 = v19;
  if (!v20)
  {
LABEL_9:
    if (v11 == *((uint64_t **)this + 1))
    {
      v15 = 0;
    }
    else
    {
      v14 = (std::__shared_weak_count *)v11[20];
      if (v14 && (v14 = std::__shared_weak_count::lock(v14)) != 0)
        v15 = v11[19];
      else
        v15 = 0;
      v57 = (const IR::IRData *)v15;
      v58 = v14;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v34 = __ldaxr(p_shared_owners);
        while (__stlxr(v34 - 1, p_shared_owners));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v15 = (uint64_t)v57;
      }
      if (!v15)
      {
        std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,0>(v11 + 21, *((uint64_t **)this + 1), v11);
        v36 = v35;
        v37 = (IR::IRDataAttributes *)*((_QWORD *)this + 1);
        if (v37 == v35)
        {
          v15 = 0;
        }
        else
        {
          do
          {
            v37 = (IR::IRDataAttributes *)((char *)v37 - 168);
            std::__destroy_at[abi:ne180100]<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>,0>(v37);
          }
          while (v37 != v36);
          v15 = (uint64_t)v57;
        }
        *((_QWORD *)this + 1) = v36;
      }
    }
    v39 = (IR::IRData::Implementation **)v58;
    *a3 = (IR::IRData::Implementation **)v15;
    a3[1] = v39;
    v57 = 0;
    v58 = 0;
    goto LABEL_53;
  }
  v21 = (IR::IRData *)operator new();
  IR::IRData::IRData(v21, v20);
  std::shared_ptr<IR::IRData>::shared_ptr[abi:ne180100]<IR::IRData,void>(&v47, (uint64_t)v21);
  IR::IRData::Implementation::computeAverageIR(*v47);
  std::string::basic_string[abi:ne180100]<0>(__p, "computeAverage");
  v43 = v47;
  v44 = v48;
  if (v48)
  {
    v22 = (unint64_t *)&v48->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  IR::IRDataLoader::Implementation::addIRDataToCache((uint64_t)this, (uint64_t *)__p, a2, (IR::IRData **)&v43);
  v24 = v44;
  if (v44)
  {
    v25 = (unint64_t *)&v44->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v46 < 0)
    operator delete(__p[0]);
  v27 = v48;
  *a3 = v47;
  a3[1] = (IR::IRData::Implementation **)v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = v48;
    if (v48)
    {
      v31 = (unint64_t *)&v48->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        std::__shared_weak_count::__release_weak(v30);
      }
    }
  }
LABEL_53:
  if (cf)
    CFRelease(cf);
  if (v54)
    CFRelease(v54);
  if (v53)
    CFRelease(v53);
  if (v52[0])
    CFRelease(v52[0]);
  v40 = v58;
  if (v58)
  {
    v41 = (unint64_t *)&v58->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
}

void sub_2105A0AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a41);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](v41 - 80);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataAttributes::operator==(uint64_t a1, uint64_t a2)
{
  const void *v2;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v2 = *(const void **)a1;
  if (!(*(_QWORD *)a1 | *(_QWORD *)a2))
    return 1;
  if (*(float *)(a1 + 8) != *(float *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(_DWORD *)(a1 + 12) != *(_DWORD *)(a2 + 12)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28)
    || *(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32)
    || *(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
  {
    return 0;
  }
  result = 0;
  if (v2)
  {
    if (*(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20))
    {
      if (*(_QWORD *)a2)
      {
        result = applesauce::CF::operator==((const void **)a1, (const void **)a2);
        if ((_DWORD)result)
        {
          v6 = *(_QWORD *)(a2 + 64);
          if (*(_QWORD *)(a1 + 64))
          {
            if (!v6)
              return 0;
            result = applesauce::CF::operator==((const void **)(a1 + 64), (const void **)(a2 + 64));
            if (!(_DWORD)result)
              return result;
          }
          else if (v6)
          {
            return 0;
          }
          if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(a2 + 72)
            && *(_DWORD *)(a1 + 76) == *(_DWORD *)(a2 + 76)
            && *(_DWORD *)(a1 + 80) == *(_DWORD *)(a2 + 80)
            && *(_DWORD *)(a1 + 84) == *(_DWORD *)(a2 + 84))
          {
            v7 = *(_QWORD *)(a2 + 88);
            if (*(_QWORD *)(a1 + 88))
            {
              if (v7)
              {
                result = applesauce::CF::operator==((const void **)(a1 + 88), (const void **)(a2 + 88));
                if (!(_DWORD)result)
                  return result;
                goto LABEL_28;
              }
            }
            else if (!v7)
            {
LABEL_28:
              if (*(_DWORD *)(a1 + 100) == *(_DWORD *)(a2 + 100)
                && *(_DWORD *)(a1 + 104) == *(_DWORD *)(a2 + 104)
                && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
                && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
                && *(float *)(a1 + 116) == *(float *)(a2 + 116)
                && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
                && *(float *)(a1 + 136) == *(float *)(a2 + 136)
                && *(float *)(a1 + 140) == *(float *)(a2 + 140)
                && *(_DWORD *)(a1 + 144) == *(_DWORD *)(a2 + 144)
                && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17))
              {
                return *(unsigned __int8 *)(a1 + 120) == *(unsigned __int8 *)(a2 + 120);
              }
            }
          }
          return 0;
        }
      }
    }
  }
  return result;
}

BOOL IR::IRDataAttributes::equalsForPersonalizedHRIR(IR::IRDataAttributes *this, const IR::IRDataAttributes *a2)
{
  return *((float *)this + 2) == *((float *)a2 + 2)
      && *((unsigned __int8 *)this + 16) == *((unsigned __int8 *)a2 + 16)
      && *((_DWORD *)this + 6) == *((_DWORD *)a2 + 6)
      && *((_DWORD *)this + 7) == *((_DWORD *)a2 + 7)
      && *((_DWORD *)this + 8) == *((_DWORD *)a2 + 8)
      && *((_DWORD *)this + 9) == *((_DWORD *)a2 + 9)
      && *((_DWORD *)this + 5) == *((_DWORD *)a2 + 5)
      && *((_DWORD *)this + 12) == *((_DWORD *)a2 + 12)
      && *((float *)this + 34) == *((float *)a2 + 34)
      && *((float *)this + 35) == *((float *)a2 + 35)
      && *((_DWORD *)this + 36) == *((_DWORD *)a2 + 36)
      && *((unsigned __int8 *)this + 17) == *((unsigned __int8 *)a2 + 17)
      && *((unsigned __int8 *)this + 120) == *((unsigned __int8 *)a2 + 120);
}

uint64_t IR::IRDataAttributes::equalsExceptSampleRate(IR::IRDataAttributes *this, const IR::IRDataAttributes *a2)
{
  uint64_t v3;
  CFTypeRef v5;
  int v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;

  IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)&v5, this);
  v6 = *((_DWORD *)a2 + 2);
  v3 = IR::IRDataAttributes::operator==((uint64_t)&v5, (uint64_t)a2);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (v5)
    CFRelease(v5);
  return v3;
}

void sub_2105A0EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

BOOL IR::IRDataAttributes::equalsForPersonalizedHRIRExceptSampleRate(IR::IRDataAttributes *this, const IR::IRDataAttributes *a2)
{
  _BOOL8 v3;
  CFTypeRef v5;
  int v6;
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;

  IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)&v5, this);
  v6 = *((_DWORD *)a2 + 2);
  v3 = IR::IRDataAttributes::equalsForPersonalizedHRIR((IR::IRDataAttributes *)&v5, a2);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (v5)
    CFRelease(v5);
  return v3;
}

uint64_t std::find_if[abi:ne180100]<std::__wrap_iter<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *>,IR::IRDataLoader::Implementation::getLoadedIR(IR::IRDataAttributes const&)::$_0>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t (*v7)(_QWORD *, uint64_t);
  _QWORD *v8;
  uint64_t v9;
  unsigned int (*v10)(_QWORD *, uint64_t);
  _QWORD *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  IR::IRData *v15;
  float OriginalSampleRate;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v21;

  v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      v6 = a3[2];
      v7 = (uint64_t (*)(_QWORD *, uint64_t))a3[1];
      v8 = (_QWORD *)(a3[3] + (v6 >> 1));
      if ((v6 & 1) != 0)
        v7 = *(uint64_t (**)(_QWORD *, uint64_t))(*v8 + v7);
      if ((v7(v8, v3) & 1) != 0)
        break;
      if (*(float *)(*a3 + 8) == 0.0)
      {
        v9 = a3[5];
        v10 = (unsigned int (*)(_QWORD *, uint64_t))a3[4];
        v11 = (_QWORD *)(a3[6] + (v9 >> 1));
        if ((v9 & 1) != 0)
          v10 = *(unsigned int (**)(_QWORD *, uint64_t))(*v11 + v10);
        if (v10(v11, v3))
        {
          v12 = *(std::__shared_weak_count **)(v3 + 160);
          if (v12)
          {
            v13 = std::__shared_weak_count::lock(v12);
            if (v13)
            {
              v14 = v13;
              v15 = *(IR::IRData **)(v3 + 152);
              if (v15)
              {
                OriginalSampleRate = IR::IRData::getOriginalSampleRate(*(IR::IRData **)(v3 + 152));
                if (OriginalSampleRate == IR::IRData::getSampleRate(v15))
                {
                  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
                  do
                    v21 = __ldaxr(p_shared_owners);
                  while (__stlxr(v21 - 1, p_shared_owners));
                  if (!v21)
                  {
                    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                    std::__shared_weak_count::__release_weak(v14);
                  }
                  return v3;
                }
              }
              v17 = (unint64_t *)&v14->__shared_owners_;
              do
                v18 = __ldaxr(v17);
              while (__stlxr(v18 - 1, v17));
              if (!v18)
              {
                ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                std::__shared_weak_count::__release_weak(v14);
              }
            }
          }
        }
      }
      v3 += 168;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void sub_2105A10AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  unint64_t *v3;
  unint64_t v4;

  v3 = (unint64_t *)(v1 + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
    IR::IRDataLoader::Implementation::swapLoadedIR(v1);
  _Unwind_Resume(exception_object);
}

void IR::IRDataLoader::Implementation::addIRDataToCache(uint64_t a1, uint64_t *a2, IR::IRDataAttributes *a3, IR::IRData **a4)
{
  IR::IRData *v7;
  float v8;
  IR *v9;
  NSObject *IRDataLog;
  IR::IRDataAttributes *v11;
  IR::IRDataAttributes *v12;
  IR::IRData *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  IR *v17;
  NSObject *v18;
  const char *CStringPtr;
  CFURLRef *v20;
  CFStringRef theString;
  CFTypeRef v22;
  float SampleRate;
  CFTypeRef v24;
  CFTypeRef v25;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)&v22, a3);
  v7 = *a4;
  if (!*a4)
    goto LABEL_11;
  v8 = SampleRate;
  if (SampleRate == 0.0)
  {
    SampleRate = IR::IRData::getSampleRate(v7);
    IRDataLog = IR::getIRDataLog(v9);
    if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEBUG))
    {
      if (*((char *)a2 + 23) < 0)
        a2 = (uint64_t *)*a2;
      v20 = (CFURLRef *)applesauce::CF::URLRef::operator->(&v22);
      applesauce::CF::URLRef_proxy::get_filesystem_path(&v20, (applesauce::CF::StringRef *)&theString);
      CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
      *(_DWORD *)buf = 136315650;
      v28 = a2;
      v29 = 2080;
      v30 = "addIRDataToCache";
      v31 = 2080;
      v32 = CStringPtr;
      _os_log_debug_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEBUG, "%s%s: Added to cache: %s", buf, 0x20u);
      applesauce::CF::StringRef::~StringRef((const void **)&theString);
    }
    goto LABEL_4;
  }
  if (v8 == IR::IRData::getSampleRate(v7))
  {
LABEL_4:
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 24));
    v11 = *(IR::IRDataAttributes **)(a1 + 8);
    if ((unint64_t)v11 >= *(_QWORD *)(a1 + 16))
    {
      v16 = std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__emplace_back_slow_path<IR::IRDataAttributes&,std::shared_ptr<IR::IRData const> const&>((uint64_t *)a1, (const IR::IRDataAttributes *)&v22, a4);
    }
    else
    {
      v12 = IR::IRDataAttributes::IRDataAttributes(v11, (const IR::IRDataAttributes *)&v22);
      *((_QWORD *)v12 + 19) = *a4;
      v13 = a4[1];
      *((_QWORD *)v12 + 20) = v13;
      if (v13)
      {
        v14 = (unint64_t *)((char *)v13 + 16);
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      v16 = (uint64_t)v12 + 168;
    }
    *(_QWORD *)(a1 + 8) = v16;
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 24));
    goto LABEL_11;
  }
  v18 = IR::getIRDataLog(v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    IR::IRDataLoader::Implementation::addIRDataToCache();
LABEL_11:
  if (cf)
    CFRelease(cf);
  if (v25)
    CFRelease(v25);
  if (v24)
    CFRelease(v24);
  if (v22)
    CFRelease(v22);
}

void sub_2105A12E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void IR::IRDataLoader::Implementation::rebuildPersonalizedHRTFCache(IR::IRDataLoader::Implementation *this)
{
  unsigned __int8 *v2;
  uint64_t v4;
  uint64_t *v5;
  NSObject *IRDataLog;
  uint64_t v7;
  _QWORD *v8;
  int *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  int *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = (unsigned __int8 *)this + 152;
  do
  {
    if (__ldaxr(v2))
    {
      __clrex();
      IRDataLog = IR::getIRDataLog(this);
      if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEFAULT))
      {
        v11 = 136315138;
        v12 = "rebuildPersonalizedHRTFCache";
        _os_log_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEFAULT, "%s: Personalized HRTF cache rebuilding is already in progress.", (uint8_t *)&v11, 0xCu);
      }
      return;
    }
  }
  while (__stlxr(1u, v2));
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  v4 = *(_QWORD *)this;
  v5 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this == v5)
  {
    v5 = *(uint64_t **)this;
  }
  else
  {
    while (!*(_DWORD *)(v4 + 48))
    {
      v4 += 168;
      if ((uint64_t *)v4 == v5)
      {
        v4 = *((_QWORD *)this + 1);
        goto LABEL_17;
      }
    }
    if ((uint64_t *)v4 != v5)
    {
      v7 = v4 + 168;
      if ((uint64_t *)(v4 + 168) != v5)
      {
        do
        {
          if (!*(_DWORD *)(v7 + 48))
          {
            std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>::operator=[abi:ne180100]((uint64_t *)v4, (uint64_t *)v7);
            v4 += 168;
          }
          v7 += 168;
        }
        while ((uint64_t *)v7 != v5);
        v5 = (uint64_t *)*((_QWORD *)this + 1);
      }
    }
  }
LABEL_17:
  std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::erase((uint64_t)this, (uint64_t *)v4, v5);
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 24));
  v8 = operator new(0x28uLL);
  *v8 = &off_24CA2D220;
  v8[1] = IR::IRDataLoader::Implementation::executePersonalizedHRTFListenerCallbacks;
  v8[2] = 0;
  v8[3] = this;
  *((_BYTE *)v8 + 32) = 1;
  v13 = (int *)v8;
  IR::PersonalizedIRData::RebuildCFDataCache((IR::DataCache ***)this + 20, (uint64_t)&v11);
  v9 = v13;
  if (v13 == &v11)
  {
    v10 = 4;
    v9 = &v11;
  }
  else
  {
    if (!v13)
      return;
    v10 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v9 + 8 * v10))();
}

void sub_2105A151C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void IR::IRDataLoader::Implementation::executePersonalizedHRTFListenerCallbacks(IR::IRDataLoader::Implementation *this, unsigned int *a2, int a3)
{
  int v3;
  int v5;
  IR *v6;
  uint64_t *v7;
  const char *v8;
  const char *v9;
  NSObject *IRDataLog;
  _QWORD *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  _QWORD *v19;
  uint64_t v20;

  v3 = (int)a2;
  v20 = *MEMORY[0x24BDAC8D0];
  if (a3)
    v5 = IR::PersonalizedIRData::CheckIfPersonalizedHRIRIsAllowed((IR::PersonalizedIRData::Implementation **)this + 20, a2);
  else
    v5 = 0;
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 88));
  v7 = (uint64_t *)*((_QWORD *)this + 23);
  if (v7)
  {
    if (v3)
      v8 = "true";
    else
      v8 = "false";
    if (v5)
      v9 = "true";
    else
      v9 = "false";
    do
    {
      if (v7[8])
      {
        IRDataLog = IR::getIRDataLog(v6);
        if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEFAULT))
        {
          v11 = v7 + 2;
          if (*((char *)v7 + 39) < 0)
            v11 = (_QWORD *)*v11;
          *(_DWORD *)buf = 136315906;
          v13 = "executePersonalizedHRTFListenerCallbacks";
          v14 = 2080;
          v15 = v8;
          v16 = 2080;
          v17 = v9;
          v18 = 2080;
          v19 = v11;
          _os_log_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEFAULT, "%s: Executing client callback with (isDataChanged, isDataValid) = (%s, %s) for clientID = %s.", buf, 0x2Au);
        }
        v6 = (IR *)std::function<void ()(BOOL,BOOL)>::operator()((uint64_t)(v7 + 5), v3, v5);
      }
      v7 = (uint64_t *)*v7;
    }
    while (v7);
  }
  if ((v3 & 1) != 0)
    atomic_store(0, (unsigned __int8 *)this + 152);
  std::recursive_mutex::unlock((std::recursive_mutex *)((char *)this + 88));
}

void sub_2105A16EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::recursive_mutex *a10)
{
  std::recursive_mutex::unlock(a10);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::checkIfPersonalizedHRTFIsAllowed(IR::PersonalizedIRData::Implementation **this)
{
  std::recursive_mutex *v2;
  unsigned int *v3;
  uint64_t v4;

  v2 = (std::recursive_mutex *)(this + 3);
  std::recursive_mutex::lock((std::recursive_mutex *)(this + 3));
  v4 = IR::PersonalizedIRData::CheckIfPersonalizedHRIRIsAllowed(this + 20, v3);
  std::recursive_mutex::unlock(v2);
  return v4;
}

void sub_2105A1744(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

BOOL IR::IRDataLoader::Implementation::hasFailedToFetchPersonalizedHRTF(IR::IRDataLoader::Implementation *this)
{
  std::recursive_mutex *v2;
  IR *Status;
  uint64_t v4;
  NSObject *IRDataLog;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  Status = (IR *)IR::PersonalizedIRData::GetStatus((IR::IRDataLoader::Implementation *)((char *)this + 160));
  v4 = (unsigned __int16)Status & 0x101;
  if (v4 == 1)
  {
    IRDataLog = IR::getIRDataLog(Status);
    if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEFAULT))
    {
      v7 = 136315138;
      v8 = "hasFailedToFetchPersonalizedHRTF";
      _os_log_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEFAULT, "%s: Personalized HRTF is invalid/not enrolled.", (uint8_t *)&v7, 0xCu);
    }
  }
  std::recursive_mutex::unlock(v2);
  return v4 == 1;
}

void sub_2105A1838(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(BOOL,BOOL)>::operator()(uint64_t a1, char a2, char a3)
{
  uint64_t v3;
  char v5;
  char v6;

  v6 = a2;
  v5 = a3;
  v3 = *(_QWORD *)(a1 + 24);
  if (!v3)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t, char *, char *))(*(_QWORD *)v3 + 48))(v3, &v6, &v5);
}

void IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  std::recursive_mutex *v6;
  unsigned __int8 *v7;
  NSObject *IRDataLog;
  unsigned __int8 *v9;
  IR *v10;
  NSObject *v11;
  unsigned __int8 v12;
  uint64_t Status;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE buf[12];
  __int16 v18;
  unsigned __int8 *v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v6 = (std::recursive_mutex *)(a1 + 88);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 88));
  v7 = std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::find<std::string>((_QWORD *)(a1 + 168), a2);
  if (v7)
  {
    IRDataLog = IR::getIRDataLog((IR *)v7);
    if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEFAULT))
    {
      if ((char)a2[23] < 0)
        a2 = *(unsigned __int8 **)a2;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "addPersonalizedHRTFListenerCallback";
      v18 = 2080;
      v19 = a2;
      _os_log_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEFAULT, "%s: ID %s already exists in PersonalizedHRTFListenerCallback.", buf, 0x16u);
    }
  }
  else
  {
    *(_QWORD *)buf = a2;
    v9 = std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 168, a2, (uint64_t)&std::piecewise_construct, (__int128 **)buf);
    v10 = (IR *)std::function<void ()(BOOL,BOOL)>::operator=((_QWORD *)v9 + 5, a3);
    v11 = IR::getIRDataLog(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if ((char)a2[23] < 0)
        a2 = *(unsigned __int8 **)a2;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "addPersonalizedHRTFListenerCallback";
      v18 = 2080;
      v19 = a2;
      _os_log_impl(&dword_210570000, v11, OS_LOG_TYPE_DEFAULT, "%s: New callback is added in the personalized HRTF listener queue with caller ID %s.", buf, 0x16u);
    }
    v12 = atomic_load(IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::sCalledOnce);
    if ((v12 & 1) != 0 && *(_QWORD *)(a3 + 24))
    {
      Status = IR::PersonalizedIRData::GetStatus((IR::PersonalizedIRData *)(a1 + 160));
      std::function<void ()(BOOL,BOOL)>::operator()(a3, 1, BYTE1(Status) & 1);
    }
    v15 = a1;
    v14 = atomic_load(&IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::sOnceflag);
    if (v14 != -1)
    {
      *(_QWORD *)buf = &v15;
      v16 = buf;
      std::__call_once(&IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::sOnceflag, &v16, (void (__cdecl *)(void *))std::__call_once_proxy[abi:ne180100]<std::tuple<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0 &&>>);
    }
  }
  std::recursive_mutex::unlock(v6);
}

void sub_2105A1A90(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::function<void ()(BOOL,BOOL)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(BOOL,BOOL)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void IR::IRDataLoader::Implementation::removePersonalizedHRTFListenerCallback(uint64_t a1, unsigned __int8 *a2)
{
  std::recursive_mutex *v4;
  _QWORD *v5;
  unsigned __int8 *v6;
  NSObject *IRDataLog;
  int v8;
  const char *v9;
  __int16 v10;
  unsigned __int8 *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = (std::recursive_mutex *)(a1 + 88);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 88));
  v5 = (_QWORD *)(a1 + 168);
  if (std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::find<std::string>(v5, a2))
  {
    v6 = std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__erase_unique<std::string>(v5, a2);
    IRDataLog = IR::getIRDataLog((IR *)v6);
    if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEFAULT))
    {
      if ((char)a2[23] < 0)
        a2 = *(unsigned __int8 **)a2;
      v8 = 136315394;
      v9 = "removePersonalizedHRTFListenerCallback";
      v10 = 2080;
      v11 = a2;
      _os_log_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_DEFAULT, "%s: Callback for caller ID %s is removed from Personalized HRTF listener queue.", (uint8_t *)&v8, 0x16u);
    }
  }
  std::recursive_mutex::unlock(v4);
}

void sub_2105A1C44(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getPersonalizedHRTFStatus(IR::IRDataLoader::Implementation *this)
{
  std::recursive_mutex *v2;
  uint64_t Status;

  v2 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  Status = IR::PersonalizedIRData::GetStatus((IR::IRDataLoader::Implementation *)((char *)this + 160));
  std::recursive_mutex::unlock(v2);
  return Status;
}

void sub_2105A1CAC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::clearPersonalizedIRDataCache(IR::IRDataLoader::Implementation *this)
{
  std::recursive_mutex *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;

  v2 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  v3 = *(_QWORD *)this;
  v4 = (uint64_t *)*((_QWORD *)this + 1);
  if (*(uint64_t **)this == v4)
  {
    v4 = *(uint64_t **)this;
  }
  else
  {
    while (!*(_DWORD *)(v3 + 48))
    {
      v3 += 168;
      if ((uint64_t *)v3 == v4)
      {
        v3 = *((_QWORD *)this + 1);
        goto LABEL_12;
      }
    }
    if ((uint64_t *)v3 != v4)
    {
      v5 = v3 + 168;
      if ((uint64_t *)(v3 + 168) != v4)
      {
        do
        {
          if (!*(_DWORD *)(v5 + 48))
          {
            std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>::operator=[abi:ne180100]((uint64_t *)v3, (uint64_t *)v5);
            v3 += 168;
          }
          v5 += 168;
        }
        while ((uint64_t *)v5 != v4);
        v4 = (uint64_t *)*((_QWORD *)this + 1);
      }
    }
  }
LABEL_12:
  std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::erase((uint64_t)this, (uint64_t *)v3, v4);
  IR::PersonalizedIRData::ClearCache((IR::DataCache ***)this + 20);
  std::recursive_mutex::unlock(v2);
}

void sub_2105A1D80(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

_QWORD *IR::IRDataLoader::Implementation::getCustomLayoutFromTag@<X0>(IR::IRDataLoader::Implementation *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned int v8;
  BOOL v9;
  uint64_t *v10;
  char v11;

  v6 = *((_QWORD *)this + 27);
  result = (_QWORD *)((char *)this + 216);
  v5 = v6;
  if (!v6)
    goto LABEL_12;
  v7 = result;
  do
  {
    v8 = *(_DWORD *)(v5 + 32);
    v9 = v8 >= a2;
    if (v8 >= a2)
      v10 = (uint64_t *)v5;
    else
      v10 = (uint64_t *)(v5 + 8);
    if (v9)
      v7 = (_QWORD *)v5;
    v5 = *v10;
  }
  while (*v10);
  if (v7 != result && *((_DWORD *)v7 + 8) <= a2)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>((_QWORD *)a3, (const void *)v7[5], v7[6], v7[6] - v7[5]);
    v11 = 1;
  }
  else
  {
LABEL_12:
    v11 = 0;
    *(_BYTE *)a3 = 0;
  }
  *(_BYTE *)(a3 + 24) = v11;
  return result;
}

uint64_t IR::IRDataLoader::Implementation::registerCustomLayoutIfNecessary(IR::IRDataLoader::Implementation *this, const AudioChannelLayout *a2)
{
  uint64_t mChannelLayoutTag;
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  UInt32 v8;
  int *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  int v27;
  int v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  UInt32 v33;
  UInt32 mNumberChannelDescriptions;
  uint64_t *v35;
  void *v36;
  std::vector<char> __dst;
  _BYTE v38[32];
  unsigned int v39;

  mChannelLayoutTag = a2->mChannelLayoutTag;
  if ((mChannelLayoutTag & 0xFFFEFFFF) != 0)
    return mChannelLayoutTag;
  v5 = (uint64_t **)((char *)this + 208);
  if (!*((_QWORD *)this + 28))
  {
    v39 = -268435456;
    mNumberChannelDescriptions = a2->mNumberChannelDescriptions;
    if (mNumberChannelDescriptions <= 1)
      mNumberChannelDescriptions = 1;
    std::vector<char>::vector((std::vector<char> *)v38, 20 * mNumberChannelDescriptions + 12);
    memcpy(*(void **)v38, a2, 20 * a2->mNumberChannelDescriptions + 12);
    __dst.__begin_ = (std::vector<char>::pointer)&v39;
    v35 = std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v5, &v39, (uint64_t)&std::piecewise_construct, &__dst);
    v36 = (void *)v35[5];
    if (v36)
    {
      v35[6] = (uint64_t)v36;
      operator delete(v36);
      v35[5] = 0;
      v35[6] = 0;
      v35[7] = 0;
    }
    *(_OWORD *)(v35 + 5) = *(_OWORD *)v38;
    v35[7] = *(_QWORD *)&v38[16];
    return v39;
  }
  v6 = (uint64_t *)*((_QWORD *)this + 26);
  v7 = (uint64_t *)((char *)this + 216);
  if (v6 == (uint64_t *)((char *)this + 216))
  {
LABEL_33:
    v31 = *v7;
    if (*v7)
    {
      do
      {
        v32 = v31;
        v31 = *(_QWORD *)(v31 + 8);
      }
      while (v31);
    }
    else
    {
      do
      {
        v32 = v7[2];
        v25 = *(_QWORD *)v32 == (_QWORD)v7;
        v7 = (uint64_t *)v32;
      }
      while (v25);
    }
    mChannelLayoutTag = (*(_DWORD *)(v32 + 32) + 1);
    v33 = a2->mNumberChannelDescriptions;
    if (v33 <= 1)
      v33 = 1;
    std::vector<char>::vector(&__dst, 20 * v33 + 12);
    memcpy(__dst.__begin_, a2, 20 * a2->mNumberChannelDescriptions + 12);
    *(_DWORD *)v38 = mChannelLayoutTag;
    *(std::vector<char> *)&v38[8] = __dst;
    memset(&__dst, 0, sizeof(__dst));
    std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,CA::ChannelLayout>>(v5, (unsigned int *)v38, (uint64_t)v38);
    if (*(_QWORD *)&v38[8])
    {
      *(_QWORD *)&v38[16] = *(_QWORD *)&v38[8];
      operator delete(*(void **)&v38[8]);
    }
    if (__dst.__begin_)
    {
      __dst.__end_ = __dst.__begin_;
      operator delete(__dst.__begin_);
    }
    return mChannelLayoutTag;
  }
  while (1)
  {
    v8 = a2->mNumberChannelDescriptions;
    if (v8 <= 1)
      v8 = 1;
    std::vector<char>::vector((std::vector<char> *)v38, 20 * v8 + 12);
    memcpy(*(void **)v38, a2, 20 * a2->mNumberChannelDescriptions + 12);
    v9 = (int *)v6[5];
    v10 = *v9;
    if (*v9 != **(_DWORD **)v38)
      goto LABEL_25;
    if (v10 != 0x10000)
      break;
    v27 = v9[1];
    v28 = *(_DWORD *)(*(_QWORD *)v38 + 4);
    *(_QWORD *)&v38[8] = *(_QWORD *)v38;
    operator delete(*(void **)v38);
    if (v27 == v28)
      return *((unsigned int *)v6 + 8);
LABEL_27:
    v29 = (uint64_t *)v6[1];
    if (v29)
    {
      do
      {
        v30 = v29;
        v29 = (uint64_t *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        v30 = (uint64_t *)v6[2];
        v25 = *v30 == (_QWORD)v6;
        v6 = v30;
      }
      while (!v25);
    }
    v6 = v30;
    if (v30 == v7)
      goto LABEL_33;
  }
  if (v10)
    goto LABEL_48;
  v11 = v9[2];
  if ((_DWORD)v11 != *(_DWORD *)(*(_QWORD *)v38 + 8))
  {
LABEL_25:
    *(_QWORD *)&v38[8] = *(_QWORD *)v38;
    operator delete(*(void **)v38);
    goto LABEL_27;
  }
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 20 * v11;
    v14 = *(_QWORD *)v38 + 12;
    v15 = v9 + 3;
    do
    {
      v16 = &v15[v12 / 4];
      v17 = (uint64_t *)(v14 + v12);
      v18 = v15[v12 / 4];
      if (v18 != *(_DWORD *)(v14 + v12))
        goto LABEL_25;
      if (v18 == 100)
      {
        v19 = *(_QWORD *)v16;
        v20 = *((_QWORD *)v16 + 1);
        v21 = *v17;
        v22 = v17[1];
        v23 = v16[4];
        v24 = *((unsigned int *)v17 + 4);
        v25 = v19 == v21 && v20 == v22;
        if (!v25 || v23 != v24)
          goto LABEL_25;
      }
      v12 += 20;
    }
    while (v13 != v12);
  }
LABEL_48:
  *(_QWORD *)&v38[8] = *(_QWORD *)v38;
  operator delete(*(void **)v38);
  return *((unsigned int *)v6 + 8);
}

void sub_2105A211C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRDataLoader::Implementation::getFilterLength(IR::IRDataLoader::Implementation *a1, int a2, float a3)
{
  uint64_t FilterLength;
  CFTypeRef v7;
  float v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  v8 = a3;
  FilterLength = IR::IRDataLoader::Implementation::getFilterLength(a1, (const IR::IRDataAttributes *)&v7);
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
  return FilterLength;
}

void sub_2105A21F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getFilterLength(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2)
{
  std::recursive_mutex *v4;
  uint64_t FilterLengthPrivate;

  v4 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  FilterLengthPrivate = IR::IRDataLoader::Implementation::getFilterLengthPrivate(this, a2);
  std::recursive_mutex::unlock(v4);
  return FilterLengthPrivate;
}

void sub_2105A2254(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getFilterLengthPrivate(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2)
{
  const char *v3;
  uint64_t FilterLength;
  const IR::IRDataAttributes *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  IR::IRData *v11;
  std::__shared_weak_count *v12;

  IR::IRDataLoader::Implementation::getLoadedIR(this, a2, (IR::IRData::Implementation ***)&v11);
  if (v11)
  {
    FilterLength = IR::IRData::getFilterLength(v11);
  }
  else
  {
    IR::IRDataLoader::Implementation::cacheMiss((IR::IRDataLoader::Implementation *)"getFilterLengthPrivate", v3);
    FilterLength = IR::IRData::getFilterLength(a2, v5);
  }
  v6 = FilterLength;
  v7 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v6;
}

void sub_2105A22F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::cacheMiss(IR::IRDataLoader::Implementation *this, const char *a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  IR::IRDataLoader::Implementation *v6;
  __int16 v7;
  unsigned int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  if (_os_feature_enabled_impl())
  {
    do
      v3 = __ldaxr((unsigned int *)&IR::IRDataLoader::Implementation::cacheMiss(char const*)::sCacheMisses);
    while (__stlxr(v3 + 1, (unsigned int *)&IR::IRDataLoader::Implementation::cacheMiss(char const*)::sCacheMisses));
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO))
    {
      v4 = atomic_load((unsigned int *)&IR::IRDataLoader::Implementation::cacheMiss(char const*)::sCacheMisses);
      v5 = 136315394;
      v6 = this;
      v7 = 1024;
      v8 = v4;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_INFO, "IRDataLoader: cache miss in %s, total = %u", (uint8_t *)&v5, 0x12u);
    }
  }
}

uint64_t IR::IRDataLoader::Implementation::getNumSpatialPoints(IR::IRDataLoader::Implementation *a1, int a2, float a3)
{
  uint64_t NumSpatialPoints;
  CFTypeRef v7;
  float v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  v8 = a3;
  NumSpatialPoints = IR::IRDataLoader::Implementation::getNumSpatialPoints(a1, (const IR::IRDataAttributes *)&v7);
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
  return NumSpatialPoints;
}

void sub_2105A247C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getNumSpatialPoints(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2)
{
  std::recursive_mutex *v4;
  const char *v5;
  uint64_t NumSpatialPoints;
  const IR::IRDataAttributes *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  IR::IRData *v13;
  std::__shared_weak_count *v14;

  v4 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  IR::IRDataLoader::Implementation::getLoadedIR(this, a2, (IR::IRData::Implementation ***)&v13);
  if (v13)
  {
    NumSpatialPoints = IR::IRData::getNumSpatialPoints(v13);
  }
  else
  {
    IR::IRDataLoader::Implementation::cacheMiss((IR::IRDataLoader::Implementation *)"getNumSpatialPoints", v5);
    NumSpatialPoints = IR::IRData::getNumSpatialPoints(a2, v7);
  }
  v8 = NumSpatialPoints;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::recursive_mutex::unlock(v4);
  return v8;
}

void sub_2105A2548(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getNumFiltersPerSpatialPoint(IR::IRDataLoader::Implementation *a1, int a2, float a3)
{
  uint64_t NumFiltersPerSpatialPoint;
  CFTypeRef v7;
  float v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  v8 = a3;
  NumFiltersPerSpatialPoint = IR::IRDataLoader::Implementation::getNumFiltersPerSpatialPoint(a1, (const IR::IRDataAttributes *)&v7);
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
  return NumFiltersPerSpatialPoint;
}

void sub_2105A2600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getNumFiltersPerSpatialPoint(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2)
{
  std::recursive_mutex *v4;
  const char *v5;
  uint64_t NumFiltersPerSpatialPoint;
  const IR::IRDataAttributes *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  IR::IRData *v13;
  std::__shared_weak_count *v14;

  v4 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  IR::IRDataLoader::Implementation::getLoadedIR(this, a2, (IR::IRData::Implementation ***)&v13);
  if (v13)
  {
    NumFiltersPerSpatialPoint = IR::IRData::getNumFiltersPerSpatialPoint(v13);
  }
  else
  {
    IR::IRDataLoader::Implementation::cacheMiss((IR::IRDataLoader::Implementation *)"getNumFiltersPerSpatialPoint", v5);
    NumFiltersPerSpatialPoint = IR::IRData::getNumFiltersPerSpatialPoint(a2, v7);
  }
  v8 = NumFiltersPerSpatialPoint;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::recursive_mutex::unlock(v4);
  return v8;
}

void sub_2105A26CC(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getModelingDelay(IR::IRDataLoader::Implementation *a1, int a2, float a3)
{
  uint64_t ModelingDelay;
  CFTypeRef v7;
  float v8;
  CFTypeRef v9;
  CFTypeRef v10;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  v8 = a3;
  ModelingDelay = IR::IRDataLoader::Implementation::getModelingDelay(a1, (const IR::IRDataAttributes *)&v7);
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  if (v9)
    CFRelease(v9);
  if (v7)
    CFRelease(v7);
  return ModelingDelay;
}

void sub_2105A2784(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getModelingDelay(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2)
{
  std::recursive_mutex *v4;
  const char *v5;
  uint64_t ModelingDelay;
  const IR::IRDataAttributes *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  IR::IRData *v13;
  std::__shared_weak_count *v14;

  v4 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  IR::IRDataLoader::Implementation::getLoadedIR(this, a2, (IR::IRData::Implementation ***)&v13);
  if (v13)
  {
    ModelingDelay = IR::IRData::getModelingDelay(v13);
  }
  else
  {
    IR::IRDataLoader::Implementation::cacheMiss((IR::IRDataLoader::Implementation *)"getModelingDelay", v5);
    ModelingDelay = IR::IRData::getModelingDelay(a2, v7);
  }
  v8 = ModelingDelay;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::recursive_mutex::unlock(v4);
  return v8;
}

void sub_2105A2850(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::getUserData(const IR::IRDataAttributes **a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  CFTypeRef v5[8];
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  IR::IRDataLoader::Implementation::getUserData(a1, (const IR::IRDataAttributes *)v5, a3);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  if (v5[0])
    CFRelease(v5[0]);
}

void sub_2105A28F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::getUserData(const IR::IRDataAttributes **this@<X0>, const IR::IRDataAttributes *a2@<X1>, _QWORD *a3@<X8>)
{
  std::recursive_mutex *v6;
  const char *v7;
  CFTypeRef v8;
  const IR::IRDataAttributes *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  CFTypeRef v13;
  const __CFString *v14;
  CFTypeRef v15;
  CFTypeRef v16;
  int v17;
  CFTypeRef cf;
  IR::IRData *v19;
  std::__shared_weak_count *v20;

  v6 = (std::recursive_mutex *)(this + 3);
  std::recursive_mutex::lock((std::recursive_mutex *)(this + 3));
  IR::IRDataLoader::Implementation::getLoadedIR(this, (const void **)a2, &v19);
  if (!v19)
  {
LABEL_15:
    IR::IRDataLoader::Implementation::cacheMiss((IR::IRDataLoader::Implementation *)"getUserData", v7);
    IR::IRData::getUserData(a2, v9);
    goto LABEL_16;
  }
  IR::IRData::getFilePlistDict((CFTypeRef *)v19, &cf);
  v17 = 0;
  v8 = cf;
  if (cf)
    CFRetain(cf);
  v15 = v8;
  IR::IRData::extractIRDataTypePlist(&v15, *((_DWORD *)a2 + 10), &v17, (applesauce::CF::DictionaryRef *)&v16);
  if (v15)
    CFRelease(v15);
  if (!v16)
  {
    if (cf)
      CFRelease(cf);
    goto LABEL_15;
  }
  v13 = 0;
  v14 = CFSTR("UserData");
  applesauce::CF::at_or<applesauce::CF::DictionaryRef,__CFString const*>((const __CFDictionary *)v16, (const void **)&v14, &v13, a3);
  if (v13)
    CFRelease(v13);
  if (v16)
    CFRelease(v16);
  if (cf)
    CFRelease(cf);
LABEL_16:
  v10 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::recursive_mutex::unlock(v6);
}

void sub_2105A2A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  std::recursive_mutex *v3;
  const void *v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  const void *v9;
  va_list va1;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, const void *);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v9 = va_arg(va2, const void *);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)va1);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::recursive_mutex::unlock(v3);
  _Unwind_Resume(a1);
}

applesauce::CF::DictionaryRef *applesauce::CF::DictionaryRef::DictionaryRef(applesauce::CF::DictionaryRef *this, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)this = v3;
  return this;
}

void IR::IRDataLoader::Implementation::getGlobalUserData(IR::IRDataLoader::Implementation *a1, int a2)
{
  CFTypeRef v3[8];
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  IR::IRDataLoader::Implementation::getGlobalUserData(a1, (const IR::IRDataAttributes *)v3);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
  if (v3[0])
    CFRelease(v3[0]);
}

void sub_2105A2B60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::getGlobalUserData(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2)
{
  std::recursive_mutex *v3;
  const IR::IRDataAttributes *v4;

  v3 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  IR::IRData::getGlobalUserData(a2, v4);
  std::recursive_mutex::unlock(v3);
}

void sub_2105A2BB8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::getIRDataTypes(IR::IRDataLoader::Implementation *a1, int a2)
{
  CFTypeRef v3[8];
  CFTypeRef v4;
  CFTypeRef v5;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  IR::IRDataLoader::Implementation::getIRDataTypes(a1, (const IR::IRDataAttributes *)v3);
  if (cf)
    CFRelease(cf);
  if (v5)
    CFRelease(v5);
  if (v4)
    CFRelease(v4);
  if (v3[0])
    CFRelease(v3[0]);
}

void sub_2105A2C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::Implementation::getIRDataTypes(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2)
{
  std::recursive_mutex *v3;
  const IR::IRDataAttributes *v4;

  v3 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  IR::IRData::getIRDataTypes(a2, v4);
  std::recursive_mutex::unlock(v3);
}

void sub_2105A2CA8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getAudioChannelLayoutTag(IR::IRDataLoader::Implementation *a1, int a2)
{
  uint64_t AudioChannelLayoutTag;
  CFTypeRef v5[8];
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  AudioChannelLayoutTag = IR::IRDataLoader::Implementation::getAudioChannelLayoutTag(a1, (const IR::IRDataAttributes *)v5, 0);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  if (v5[0])
    CFRelease(v5[0]);
  return AudioChannelLayoutTag;
}

void sub_2105A2D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getAudioChannelLayoutTag(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2, int a3)
{
  std::recursive_mutex *v6;
  uint64_t AudioChannelLayoutTagPrivate;

  v6 = (std::recursive_mutex *)((char *)this + 24);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 24));
  AudioChannelLayoutTagPrivate = IR::IRDataLoader::Implementation::getAudioChannelLayoutTagPrivate(this, a2, a3);
  std::recursive_mutex::unlock(v6);
  return AudioChannelLayoutTagPrivate;
}

void sub_2105A2DB0(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getAudioChannelLayoutTagPrivate(IR::IRDataLoader::Implementation *this, const IR::IRDataAttributes *a2, int a3)
{
  const char *v5;
  uint64_t OriginalAudioChannelLayoutTag;
  const IR::IRDataAttributes *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  IR::IRData *v13;
  std::__shared_weak_count *v14;

  IR::IRDataLoader::Implementation::getLoadedIR(this, a2, (IR::IRData::Implementation ***)&v13);
  if (v13)
  {
    if (a3)
      OriginalAudioChannelLayoutTag = IR::IRData::getOriginalAudioChannelLayoutTag(v13);
    else
      OriginalAudioChannelLayoutTag = IR::IRData::getAudioChannelLayoutTag(v13);
  }
  else
  {
    IR::IRDataLoader::Implementation::cacheMiss((IR::IRDataLoader::Implementation *)"getAudioChannelLayoutTagPrivate", v5);
    OriginalAudioChannelLayoutTag = IR::IRData::getAudioChannelLayoutTag(a2, v7);
  }
  v8 = OriginalAudioChannelLayoutTag;
  v9 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return v8;
}

void sub_2105A2E64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::getAudioChannelLayoutTag(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  const IR::IRDataAttributes *v3;
  uint64_t AudioChannelLayoutTag;
  CFTypeRef v6;
  CFTypeRef v7[8];
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef cf;

  v2 = *a2;
  if (*a2)
    CFRetain(*a2);
  v6 = v2;
  IR::IRDataAttributes::IRDataAttributes((uint64_t)v7, &v6, 0, 0, 2, 0.0);
  AudioChannelLayoutTag = IR::IRData::getAudioChannelLayoutTag((IR::IRData *)v7, v3);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v7[0])
    CFRelease(v7[0]);
  if (v6)
    CFRelease(v6);
  return AudioChannelLayoutTag;
}

void sub_2105A2F2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10)
{
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a10);
  applesauce::CF::URLRef::~URLRef(&a9);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::isConsolidatedIR(uint64_t a1, int a2)
{
  const IR::IRDataAttributes *v2;
  uint64_t isConsolidatedIR;
  CFTypeRef v5[8];
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  isConsolidatedIR = IR::IRData::isConsolidatedIR((IR::IRData *)v5, v2);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  if (v5[0])
    CFRelease(v5[0]);
  return isConsolidatedIR;
}

void sub_2105A2FCC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::Implementation::hasType(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t hasType;
  CFTypeRef v6[8];
  CFTypeRef v7;
  CFTypeRef v8;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  hasType = IR::IRData::hasType(v6, a3);
  if (cf)
    CFRelease(cf);
  if (v8)
    CFRelease(v8);
  if (v7)
    CFRelease(v7);
  if (v6[0])
    CFRelease(v6[0]);
  return hasType;
}

void sub_2105A3064(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

BOOL IR::IRDataLoader::Implementation::fileExists(uint64_t a1, int a2)
{
  IR::IRDataLoader::Implementation *v2;
  _BOOL8 v3;
  CFTypeRef v5;
  CFTypeRef v6;
  CFTypeRef v7;
  CFTypeRef cf;

  IR::getPresetDataAttributes(a2);
  v3 = IR::IRDataLoader::Implementation::fileExists(v2, &v5);
  if (cf)
    CFRelease(cf);
  if (v7)
    CFRelease(v7);
  if (v6)
    CFRelease(v6);
  if (v5)
    CFRelease(v5);
  return v3;
}

void sub_2105A30F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)va);
  _Unwind_Resume(a1);
}

BOOL IR::IRDataLoader::Implementation::fileExists(IR::IRDataLoader::Implementation *this, CFTypeRef *a2)
{
  FILE *v2;
  FILE *v4[2];

  IR::getFilePtr(a2, 0, v4);
  v2 = v4[0];
  if (v4[0])
    ((void (*)(FILE *))v4[1])(v4[0]);
  return v2 != 0;
}

BOOL IR::IRDataLoader::Implementation::fileExists(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  IR::IRDataLoader::Implementation *v3;
  _BOOL8 v4;
  CFTypeRef v6;
  CFTypeRef v7[8];
  CFTypeRef v8;
  CFTypeRef v9;
  CFTypeRef cf;

  v2 = *a2;
  if (*a2)
    CFRetain(*a2);
  v6 = v2;
  v3 = (IR::IRDataLoader::Implementation *)IR::IRDataAttributes::IRDataAttributes((uint64_t)v7, &v6, 0, 0, 2, 0.0);
  v4 = IR::IRDataLoader::Implementation::fileExists(v3, v7);
  if (cf)
    CFRelease(cf);
  if (v9)
    CFRelease(v9);
  if (v8)
    CFRelease(v8);
  if (v7[0])
    CFRelease(v7[0]);
  if (v6)
    CFRelease(v6);
  return v4;
}

void sub_2105A320C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10)
{
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&a10);
  applesauce::CF::URLRef::~URLRef(&a9);
  _Unwind_Resume(a1);
}

void std::shared_ptr<IR::IRData const>::reset[abi:ne180100](_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = (std::__shared_weak_count *)a1[1];
  *a1 = 0;
  a1[1] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t std::pair<BOOL,applesauce::CF::DataRef>::~pair(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  return a1;
}

void IR::IRDataLoader::Implementation::loadAndDecode(IR::IRDataAttributes *a1@<X2>, IR::IRDataLoader::Implementation *a2@<X0>, char *a3@<X1>, IR::IRData::Implementation ***a4@<X8>)
{
  CFTypeRef v8;
  CFTypeRef v9;
  HOA *AudioChannelLayoutTagPrivate;
  _BOOL8 IsSupportedHOA;
  IR *AudioChannelLayoutTagAmbisonicOrder;
  uint64_t Normalization;
  const void *v14;
  IR *v15;
  const void *v16;
  int v17;
  CFTypeRef v18;
  const void *v19;
  CFTypeRef v20;
  const void *v21;
  NSObject *IRDataLog;
  IR::IRData::Implementation *v23;
  uint64_t *v24;
  unsigned int v25;
  __int128 v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *size;
  unint64_t *v31;
  unint64_t v32;
  IR::IRData *v33;
  NSObject *v34;
  NSObject *v35;
  char *v36;
  CFStringRef v37;
  const char *CStringPtr;
  std::string *v39;
  __int128 v40;
  CFTypeRef *v41;
  CFIndex v42;
  CFURLRef v43;
  CFTypeRef v44;
  float *v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  IR::IRData::Implementation ***v53;
  IR *v54;
  __int128 v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  IR::IRDataAttributes *v62;
  IR::IRDataAttributes *v63;
  IR *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  IR::IRData::Implementation ***v69;
  int v70;
  int NumFiltersPerSpatialPoint;
  float SampleRate;
  unsigned int FilterLengthPrivate;
  float *v74;
  int v75;
  IR *VariableDimensionsInRefHOAIR;
  char *v77;
  char *v78;
  _DWORD *v79;
  unsigned int *v80;
  uint64_t v81;
  _QWORD *v82;
  unsigned int *v83;
  IR::IRData::Implementation **v84;
  std::__shared_weak_count *v85;
  unint64_t v86;
  int OutputLength;
  unsigned int v88;
  unint64_t i;
  char *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  _OWORD *v94;
  _OWORD *v95;
  __int128 v96;
  __int128 v97;
  void **v98;
  int v99;
  unsigned int v100;
  float v101;
  float v102;
  unsigned int v103;
  unsigned int v104;
  uint64_t v105;
  unint64_t j;
  IR::FFTFilterKernel *v107;
  IR::FFTFilterKernel *v108;
  const float *v109;
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  BOOL inited;
  IR::IRData::Implementation ***v114;
  std::__shared_weak_count *v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  float *v124;
  float v125;
  float *v126;
  _OWORD *v127;
  _OWORD *v128;
  float v129;
  __int128 v130;
  __int128 v131;
  void **v132;
  int v133;
  unsigned int v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  unint64_t k;
  IR::FFTFilterKernel *v139;
  IR::FFTFilterKernel *v140;
  const float *v141;
  unsigned int v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  unint64_t *v147;
  unint64_t v148;
  std::__shared_weak_count *v149;
  unint64_t *v150;
  unint64_t v151;
  void *exception;
  void *v153;
  std::__shared_weak_count *v154;
  IR::IRData::Implementation ***v155;
  float *v156;
  float *v157;
  float *v158;
  unint64_t v159;
  float *v160;
  float *v161;
  float *v162;
  _OWORD v163[2];
  int v164;
  void *v165;
  void *v166;
  uint64_t v167;
  __n128 v168;
  void **v169[3];
  _OWORD v170[2];
  int v171;
  CFTypeRef v172[2];
  __int128 v173;
  int v174;
  void *v175;
  _OWORD *v176;
  void *v177[3];
  CFTypeRef v178[3];
  int v179;
  int AudioChannelLayoutTag;
  _QWORD v181[2];
  std::vector<unsigned int> v182;
  void *v183;
  void *v184;
  _QWORD *v185;
  std::vector<unsigned int> v186;
  void *v187;
  char *v188;
  std::string __p[27];
  CFTypeRef v190;
  CFTypeRef v191;
  CFTypeRef v192;
  CFTypeRef v193[3];
  __int128 v194;
  int v195;
  uint64_t v196;
  char v197;
  CFTypeRef v198;
  CFTypeRef v199;
  CFTypeRef v200;
  IR *v201[2];
  CFTypeRef v202;
  uint64_t v203;
  IR::IRData *v204;
  std::__shared_weak_count *v205;
  CFTypeRef v206;
  float v207;
  unsigned int v208;
  unsigned __int8 v209[8];
  uint64_t v210;
  CFTypeRef cf;
  uint64_t v212;
  uint64_t v213;
  CFTypeRef v214;
  uint64_t v215;
  int v216;
  CFTypeRef v217;
  CFTypeRef v218[3];
  const char *v219;
  float *v220;
  unsigned __int8 v221;
  CFTypeRef v222;
  CFTypeRef v223;
  CFTypeRef v224;
  uint64_t v225;

  v225 = *MEMORY[0x24BDAC8D0];
  IR::IRDataAttributes::IRDataAttributes((IR::IRDataAttributes *)&v206, a1);
  v8 = cf;
  cf = 0;
  if (v8)
    CFRelease(v8);
  v213 = 0;
  v212 = 0;
  v9 = v214;
  v214 = 0;
  if (v9)
    CFRelease(v9);
  v215 = 0;
  v216 = 0;
  std::string::basic_string[abi:ne180100]<0>(v218, "");
  v203 = 0;
  memset(__p, 0, 24);
  IR::IRDataLoader::Implementation::load(&v204, a2, v218, &v206, &v203, __p);
  if (__p[0].__r_.__value_.__r.__words[0])
  {
    __p[0].__r_.__value_.__l.__size_ = __p[0].__r_.__value_.__r.__words[0];
    operator delete(__p[0].__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v218[2]) < 0)
    operator delete((void *)v218[0]);
  AudioChannelLayoutTagPrivate = (HOA *)IR::IRDataLoader::Implementation::getAudioChannelLayoutTagPrivate(a2, (const IR::IRDataAttributes *)&v206, 0);
  IsSupportedHOA = ChannelLayoutTagIsSupportedHOA((int)AudioChannelLayoutTagPrivate);
  if (!IsSupportedHOA)
  {
    IRDataLog = IR::getIRDataLog((IR *)IsSupportedHOA);
    if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_ERROR))
    {
      if (a3[23] >= 0)
        v36 = a3;
      else
        v36 = *(char **)a3;
      if (!*(_QWORD *)a1)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](exception, "Could not construct");
      }
      v37 = CFURLCopyFileSystemPath(*(CFURLRef *)a1, kCFURLPOSIXPathStyle);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)__p, v37);
      CStringPtr = CFStringGetCStringPtr((CFStringRef)__p[0].__r_.__value_.__l.__data_, 0x8000100u);
      LODWORD(v218[0]) = 136315650;
      *(CFTypeRef *)((char *)v218 + 4) = v36;
      WORD2(v218[1]) = 2080;
      *(CFTypeRef *)((char *)&v218[1] + 6) = "loadAndDecode";
      HIWORD(v218[2]) = 2080;
      v219 = CStringPtr;
      _os_log_error_impl(&dword_210570000, IRDataLog, OS_LOG_TYPE_ERROR, "%s%s: Not HOA IR: %s, ", (uint8_t *)v218, 0x20u);
      if (__p[0].__r_.__value_.__r.__words[0])
        CFRelease(__p[0].__r_.__value_.__l.__data_);
    }
    v202 = 0;
    memset(v218, 0, sizeof(v218));
    IR::IRDataLoader::Implementation::loadPrivate(a2, a3, &v206, &v202, v218);
    if (v218[0])
    {
      v218[1] = v218[0];
      operator delete((void *)v218[0]);
    }
    if (v202)
      CFRelease(v202);
    goto LABEL_220;
  }
  AudioChannelLayoutTagAmbisonicOrder = (IR *)GetAudioChannelLayoutTagAmbisonicOrder((int)AudioChannelLayoutTagPrivate);
  Normalization = HOA::getNormalization(AudioChannelLayoutTagPrivate);
  v201[1] = 0;
  v201[0] = 0;
  v14 = (const void *)*((_QWORD *)a1 + 11);
  if (v14)
    CFRetain(*((CFTypeRef *)a1 + 11));
  v192 = v14;
  IR::IRDataAttributes::IRDataAttributes((uint64_t)v193, &v192, 128, 1, *((_DWORD *)a1 + 5), *((float *)a1 + 2));
  v15 = (IR *)v192;
  if (v192)
    CFRelease(v192);
  if (v193[0])
  {
    v16 = (const void *)*((_QWORD *)a1 + 8);
    if (v16)
    {
      CFRetain(*((CFTypeRef *)a1 + 8));
      v191 = v16;
      IR::IRDataAttributes::IRDataAttributes((uint64_t)v218, &v191, 128, 1, *((_DWORD *)a1 + 5), *((float *)a1 + 2));
      if (v191)
        CFRelease(v191);
      v17 = IR::IRDataLoader::Implementation::getAudioChannelLayoutTagPrivate(a2, (const IR::IRDataAttributes *)v218, 1);
      if (ChannelLayoutTagIsSupportedHOA(v17))
      {
        v194 = *(_OWORD *)((char *)a1 + 72);
        v18 = v193[0];
        v19 = (const void *)*((_QWORD *)a1 + 8);
        v193[0] = v19;
        if (v19)
          CFRetain(v19);
        if (v18)
          CFRelease(v18);
        v20 = v199;
        v21 = (const void *)*((_QWORD *)a1 + 11);
        v199 = v21;
        if (v21)
          CFRetain(v21);
        if (v20)
          CFRelease(v20);
      }
      if (v224)
        CFRelease(v224);
      if (v223)
        CFRelease(v223);
      if (v222)
        CFRelease(v222);
      if (v218[0])
        CFRelease(v218[0]);
    }
    else
    {
      v195 = *((_DWORD *)a1 + 24);
    }
    v197 = *((_BYTE *)a1 + 112);
    v196 = *((_QWORD *)a1 + 13);
    v190 = 0;
    memset(v218, 0, sizeof(v218));
    IR::IRDataLoader::Implementation::loadPrivate(a2, a3, v193, &v190, v218);
    v26 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0uLL;
    v27 = (std::__shared_weak_count *)v201[1];
    *(_OWORD *)v201 = v26;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(p_shared_owners);
      while (__stlxr(v29 - 1, p_shared_owners));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      v31 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    if (v218[0])
    {
      v218[1] = v218[0];
      operator delete((void *)v218[0]);
    }
    if (v190)
      CFRelease(v190);
    v33 = v201[0];
    if (!v201[0])
    {
      v34 = IR::getIRDataLog(0);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
        IR::IRDataLoader::Implementation::loadAndDecode();
LABEL_67:
      v161 = 0;
      v162 = 0;
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_203;
    }
LABEL_124:
    NumFiltersPerSpatialPoint = IR::IRData::getNumFiltersPerSpatialPoint(v33);
    IR::HOA2BinauralIRRenderer::HOA2BinauralIRRenderer((IR::HOA2BinauralIRRenderer *)__p, (const IR::IRDataAttributes *)v193, (const IR::IRDataAttributes *)&v206, NumFiltersPerSpatialPoint);
    SampleRate = IR::IRData::getSampleRate(v201[0]);
    FilterLengthPrivate = IR::IRDataLoader::Implementation::getFilterLengthPrivate(a2, (const IR::IRDataAttributes *)&v206);
    if (IR::HOA2BinauralIRRenderer::initialize((uint64_t)__p, (uint64_t)AudioChannelLayoutTagAmbisonicOrder, SampleRate, 1, Normalization, FilterLengthPrivate, *((_DWORD *)a1 + 11)))
    {
      v161 = 0;
      v162 = 0;
      *a4 = 0;
      a4[1] = 0;
LABEL_202:
      IR::HOA2BinauralIRRenderer::~HOA2BinauralIRRenderer((vDSP_DFT_Setup *)__p);
      goto LABEL_203;
    }
    IR::generateGrid(AudioChannelLayoutTagAmbisonicOrder, v210 == 0, v74, (uint64_t)v218);
    v158 = (float *)v218[1];
    v161 = (float *)v219;
    v162 = (float *)v218[0];
    v156 = v220;
    v75 = v221;
    VariableDimensionsInRefHOAIR = (IR *)IR::HOA2BinauralIRRenderer::getVariableDimensionsInRefHOAIR((IR::HOA2BinauralIRRenderer *)__p, &v187);
    v77 = (char *)v187;
    v78 = v188;
    if (v187 != v188)
    {
      v79 = v187;
      while (*v79 > 1u)
      {
        if (++v79 == (_DWORD *)v188)
          goto LABEL_130;
      }
      v116 = IR::getIRDataLog(VariableDimensionsInRefHOAIR);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_ERROR))
        IR::IRDataLoader::Implementation::loadAndDecode(v116, v117, v118, v119, v120, v121, v122, v123);
      *a4 = 0;
      a4[1] = 0;
      goto LABEL_200;
    }
LABEL_130:
    v80 = (unsigned int *)operator new(8uLL);
    *(_QWORD *)v80 = 1;
    v81 = (uint64_t)(v80 + 2);
    v186.__end_cap_.__value_ = v80 + 2;
    v186.__begin_ = v80;
    v186.__end_ = v80 + 2;
    v82 = operator new(8uLL);
    v183 = v82;
    *v82 = 0x43B4000000000000;
    v184 = v82 + 1;
    v185 = v82 + 1;
    v83 = (unsigned int *)operator new(8uLL);
    v182.__begin_ = v83;
    *(_QWORD *)v83 = 0x100000001;
    v182.__end_ = v83 + 2;
    v182.__end_cap_.__value_ = v83 + 2;
    if (v77 != v78)
    {
      std::vector<IR::IRCoordinateType>::__insert_with_size[abi:ne180100]<std::__wrap_iter<IR::IRCoordinateType*>,std::__wrap_iter<IR::IRCoordinateType*>>(&v186, v81, v77, v78, (v78 - v77) >> 2);
      IR::HOA2BinauralIRRenderer::getInterpolationMethodForVariableDimensionsInRefHOAIR((IR::HOA2BinauralIRRenderer *)__p, v218);
      IR::HOA2BinauralIRRenderer::getPeriodForVariableDimensionsInRefHOAIR((IR::HOA2BinauralIRRenderer *)__p, v172);
      std::vector<IR::IRInterpolationMethod>::__insert_with_size[abi:ne180100]<std::__wrap_iter<IR::IRInterpolationMethod*>,std::__wrap_iter<IR::IRInterpolationMethod*>>(&v182, (uint64_t)v182.__end_, (char *)v218[0], (char *)v218[1], ((char *)v218[1] - (char *)v218[0]) >> 2);
      std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((uint64_t)&v183, (uint64_t)v184, (char *)v172[0], (char *)v172[1], ((char *)v172[1] - (char *)v172[0]) >> 2);
      if (v172[0])
      {
        v172[1] = v172[0];
        operator delete((void *)v172[0]);
      }
      if (v218[0])
      {
        v218[1] = v218[0];
        operator delete((void *)v218[0]);
      }
    }
    LODWORD(v177[0]) = IR::IRData::getSampleRate(v201[0]);
    LODWORD(v175) = IR::HOA2BinauralIRRenderer::getOutputLength((IR::HOA2BinauralIRRenderer *)__p);
    LODWORD(v169[0]) = 0;
    v168.n128_u32[0] = (unint64_t)((char *)v186.__end_ - (char *)v186.__begin_) >> 2;
    LODWORD(v165) = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
    v155 = a4;
    AudioChannelLayoutTag = IR::IRData::getAudioChannelLayoutTag(v201[0]);
    v179 = v75;
    IR::IRData::getFilePlistDict((CFTypeRef *)v204, v172);
    IR::IRData::getUserData((CFTypeRef *)v204, v178);
    std::allocate_shared[abi:ne180100]<IR::IRData,std::allocator<IR::IRData>,float,unsigned int,unsigned int &,float,BOOL &,unsigned int,unsigned int,unsigned int,std::vector<IR::IRCoordinateType> &,std::vector<float> &,std::vector<IR::IRInterpolationMethod> &,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,void>((float *)v177, (int *)&v175, (int *)&v208, (float *)v169, v209, (int *)&v168, (int *)&v165, v218, &AudioChannelLayoutTag, (uint64_t)&v186, (uint64_t)&v183, (uint64_t)&v182, &v179, v172, v178);
    v84 = (IR::IRData::Implementation **)v218[0];
    v85 = (std::__shared_weak_count *)v218[1];
    v181[0] = v218[0];
    v181[1] = v218[1];
    v218[1] = 0;
    v218[0] = 0;
    if (v178[0])
      CFRelease(v178[0]);
    if (v172[0])
      CFRelease(v172[0]);
    if (!v84)
      __assert_rtn("loadAndDecode", "IRDataLoader.cpp", 1033, "false");
    *((_DWORD *)*v84 + 19) = (_DWORD)AudioChannelLayoutTagPrivate;
    *((_DWORD *)*v84 + 17) = GetNumChannelsForAudioChannelLayoutTag((uint64_t)AudioChannelLayoutTagPrivate);
    v86 = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
    OutputLength = IR::HOA2BinauralIRRenderer::getOutputLength((IR::HOA2BinauralIRRenderer *)__p);
    LODWORD(v218[0]) = 0;
    std::vector<float>::vector(v178, (OutputLength * v86), v218);
    v88 = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
    v218[0] = 0;
    std::vector<float *>::vector(v177, v88, v218);
    for (i = 0; i < IR::IRData::getNumFiltersPerSpatialPoint(v201[0]); ++i)
    {
      v90 = (char *)v178[0];
      v91 = IR::HOA2BinauralIRRenderer::getOutputLength((IR::HOA2BinauralIRRenderer *)__p);
      *((_QWORD *)v177[0] + i) = &v90[4 * (v91 * i)];
    }
    CFURLGetFileSystemRepresentation((CFURLRef)v193[0], 1u, (UInt8 *)v218, 1024);
    v154 = v85;
    IR::HOA2BinauralIRRenderer::getRefHOAIRCoordinates((IR::HOA2BinauralIRRenderer *)__p, &v175);
    if (v75)
    {
      if (v158 != v162)
      {
        v92 = 0;
        v93 = v158 - v162;
        if (v93 <= 1)
          v93 = 1;
        v159 = v93;
        do
        {
          v94 = v175;
          v95 = v176;
          while (v94 != v95)
          {
            v96 = *v94;
            v97 = v94[1];
            v174 = *((_DWORD *)v94 + 8);
            *(_OWORD *)v172 = v96;
            v173 = v97;
            v98 = (void **)v177[0];
            v99 = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
            v100 = IR::HOA2BinauralIRRenderer::getOutputLength((IR::HOA2BinauralIRRenderer *)__p);
            v101 = v162[v92];
            v102 = v161[v92];
            v170[0] = *(_OWORD *)v172;
            v170[1] = v173;
            v171 = v174;
            IR::HOA2BinauralIRRenderer::process((uint64_t)__p, v98, v99, v100, (uint64_t)v170, v101, v102, 0.0);
            IR::IRCoordinates::set((uint64_t)v172, 0, v162[v92]);
            IR::IRCoordinates::set((uint64_t)v172, 1u, v161[v92]);
            v103 = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
            std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(v169, v103);
            v104 = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
            LODWORD(v165) = 0;
            std::vector<float>::vector(&v168, v104, &v165);
            v105 = 0;
            for (j = 0; j < IR::IRData::getNumFiltersPerSpatialPoint(v201[0]); ++j)
            {
              v107 = (IR::FFTFilterKernel *)operator new();
              IR::FFTFilterKernel::FFTFilterKernel((uint64_t)v107);
              std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)&v169[0][v105], v107);
              v108 = (IR::FFTFilterKernel *)v169[0][v105];
              v109 = *(const float **)((char *)v177[0] + v105 * 8);
              v110 = IR::HOA2BinauralIRRenderer::getOutputLength((IR::HOA2BinauralIRRenderer *)__p);
              v86 = v86 & 0xFFFFFFFF00000000 | *((unsigned int *)a1 + 36);
              IR::FFTFilterKernel::initializeAndStoreCoeffs(v108, v109, v110, v208, v209[0], 0, *((_QWORD *)a1 + 17), v86, 1.0);
              ++v105;
            }
            v111 = (uint64_t)*v84;
            v165 = 0;
            v166 = 0;
            v167 = 0;
            IR::IRData::Implementation::insertIRDataInTree(v111, (uint64_t)v172, (uint64_t)v169, &v168, 0xFFFFFFFF, &v165);
            if (v165)
            {
              v166 = v165;
              operator delete(v165);
            }
            if (v168.n128_u64[0])
            {
              v168.n128_u64[1] = v168.n128_u64[0];
              operator delete((void *)v168.n128_u64[0]);
            }
            v168.n128_u64[0] = (unint64_t)v169;
            std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
            v94 = (_OWORD *)((char *)v94 + 36);
          }
          ++v92;
        }
        while (v92 != v159);
      }
      v112 = (uint64_t)*v84;
      v172[0] = 0;
      v172[1] = 0;
      *(_QWORD *)&v173 = 0;
      memset(v169, 0, sizeof(v169));
      inited = IR::IRData::Implementation::initVBAPTriangulation(v112, (uint64_t *)v172, v169, 0);
      v168.n128_u64[0] = (unint64_t)v169;
      std::vector<std::vector<std::list<int>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
      v169[0] = (void **)v172;
      std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](v169);
      if (!inited)
      {
        v115 = v154;
        v114 = v155;
LABEL_183:
        *v114 = 0;
        v114[1] = 0;
        if (v175)
        {
          v176 = v175;
          operator delete(v175);
        }
        if (v177[0])
        {
          v177[1] = v177[0];
          operator delete(v177[0]);
        }
        if (v178[0])
        {
          v178[1] = v178[0];
          operator delete((void *)v178[0]);
        }
        if (v115)
        {
          v144 = (unint64_t *)&v115->__shared_owners_;
          do
            v145 = __ldaxr(v144);
          while (__stlxr(v145 - 1, v144));
          if (!v145)
          {
            ((void (*)(std::__shared_weak_count *))v115->__on_zero_shared)(v115);
            std::__shared_weak_count::__release_weak(v115);
          }
        }
        if (v182.__begin_)
        {
          v182.__end_ = v182.__begin_;
          operator delete(v182.__begin_);
        }
        if (v183)
        {
          v184 = v183;
          operator delete(v183);
        }
        if (v186.__begin_)
        {
          v186.__end_ = v186.__begin_;
          operator delete(v186.__begin_);
        }
LABEL_200:
        if (v187)
        {
          v188 = (char *)v187;
          operator delete(v187);
        }
        goto LABEL_202;
      }
    }
    else if (v161 != v156)
    {
      v124 = v161;
      do
      {
        v157 = v124;
        if (v162 != v158)
        {
          v125 = *v124;
          v126 = v162;
          do
          {
            v127 = v175;
            v128 = v176;
            v160 = v126;
            if (v175 != v176)
            {
              v129 = *v126;
              do
              {
                v130 = *v127;
                v131 = v127[1];
                v174 = *((_DWORD *)v127 + 8);
                *(_OWORD *)v172 = v130;
                v173 = v131;
                v132 = (void **)v177[0];
                v133 = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
                v134 = IR::HOA2BinauralIRRenderer::getOutputLength((IR::HOA2BinauralIRRenderer *)__p);
                v163[0] = *(_OWORD *)v172;
                v163[1] = v173;
                v164 = v174;
                IR::HOA2BinauralIRRenderer::process((uint64_t)__p, v132, v133, v134, (uint64_t)v163, v129, v125, 0.0);
                IR::IRCoordinates::set((uint64_t)v172, 0, v129);
                IR::IRCoordinates::set((uint64_t)v172, 1u, v125);
                v135 = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
                std::vector<std::unique_ptr<IR::FFTFilterKernel>>::vector(v169, v135);
                v136 = IR::IRData::getNumFiltersPerSpatialPoint(v201[0]);
                LODWORD(v165) = 0;
                std::vector<float>::vector(&v168, v136, &v165);
                v137 = 0;
                for (k = 0; k < IR::IRData::getNumFiltersPerSpatialPoint(v201[0]); ++k)
                {
                  v139 = (IR::FFTFilterKernel *)operator new();
                  IR::FFTFilterKernel::FFTFilterKernel((uint64_t)v139);
                  std::unique_ptr<IR::FFTFilterKernel>::reset[abi:ne180100]((IR::FFTFilterKernel **)&v169[0][v137], v139);
                  v140 = (IR::FFTFilterKernel *)v169[0][v137];
                  v141 = *(const float **)((char *)v177[0] + v137 * 8);
                  v142 = IR::HOA2BinauralIRRenderer::getOutputLength((IR::HOA2BinauralIRRenderer *)__p);
                  v86 = v86 & 0xFFFFFFFF00000000 | *((unsigned int *)a1 + 36);
                  IR::FFTFilterKernel::initializeAndStoreCoeffs(v140, v141, v142, v208, v209[0], 0, *((_QWORD *)a1 + 17), v86, 1.0);
                  ++v137;
                }
                v143 = (uint64_t)*v84;
                v165 = 0;
                v166 = 0;
                v167 = 0;
                IR::IRData::Implementation::insertIRDataInTree(v143, (uint64_t)v172, (uint64_t)v169, &v168, 0xFFFFFFFF, &v165);
                if (v165)
                {
                  v166 = v165;
                  operator delete(v165);
                }
                if (v168.n128_u64[0])
                {
                  v168.n128_u64[1] = v168.n128_u64[0];
                  operator delete((void *)v168.n128_u64[0]);
                }
                v168.n128_u64[0] = (unint64_t)v169;
                std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v168);
                v127 = (_OWORD *)((char *)v127 + 36);
              }
              while (v127 != v128);
            }
            v126 = v160 + 1;
          }
          while (v160 + 1 != v158);
        }
        v124 = v157 + 1;
      }
      while (v157 + 1 != v156);
    }
    IR::IRData::Implementation::findDimensionsWithMoreThanOneNode(*v84);
    *v155 = v84;
    v155[1] = (IR::IRData::Implementation **)v154;
    v114 = (IR::IRData::Implementation ***)v181;
    v115 = 0;
    goto LABEL_183;
  }
  v23 = (IR::IRData::Implementation *)*((unsigned int *)a1 + 25);
  if (!(_DWORD)v23)
  {
    v35 = IR::getIRDataLog(v15);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
      IR::IRDataLoader::Implementation::loadAndDecode();
    goto LABEL_67;
  }
  v24 = (uint64_t *)*((_QWORD *)a2 + 27);
  if (!v24)
  {
LABEL_46:
    GetStringFromAudioChannelLayoutTag(*((_DWORD *)a1 + 25), __p);
    goto LABEL_76;
  }
  while (1)
  {
    v25 = *((_DWORD *)v24 + 8);
    if (v23 >= v25)
      break;
LABEL_45:
    v24 = (uint64_t *)*v24;
    if (!v24)
      goto LABEL_46;
  }
  if (v25 < v23)
  {
    ++v24;
    goto LABEL_45;
  }
  std::to_string(__p, *((_DWORD *)a1 + 25));
LABEL_76:
  v39 = std::string::insert(__p, 0, "/", 1uLL);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v218[2] = (CFTypeRef)v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)v218 = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v218[2]) >= 0)
    v41 = v218;
  else
    v41 = (CFTypeRef *)v218[0];
  if (SHIBYTE(v218[2]) >= 0)
    v42 = HIBYTE(v218[2]);
  else
    v42 = (CFIndex)v218[1];
  v43 = CFURLCreateWithBytes(0, (const UInt8 *)v41, v42, 0, 0);
  if (!v43)
  {
    v153 = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](v153, "Could not construct");
  }
  v44 = v193[0];
  v193[0] = v43;
  if (v44)
    CFRelease(v44);
  IR::IRDataLoader::Implementation::getLoadedIR(a2, (const IR::IRDataAttributes *)v193, (IR::IRData::Implementation ***)__p);
  v46 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0uLL;
  v47 = (std::__shared_weak_count *)v201[1];
  *(_OWORD *)v201 = v46;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (__p[0].__r_.__value_.__l.__size_)
  {
    v51 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  if (v201[0])
  {
    v53 = a4;
    goto LABEL_120;
  }
  IR::IRData::Implementation::generatePanningIRData(v23, v207, (IR::IRData::Implementation *)1, AudioChannelLayoutTagAmbisonicOrder, Normalization, v45, (IR::IRData::Implementation ***)__p);
  v55 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = 0uLL;
  v56 = (std::__shared_weak_count *)v201[1];
  *(_OWORD *)v201 = v55;
  if (v56)
  {
    v57 = (unint64_t *)&v56->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
  if (__p[0].__r_.__value_.__l.__size_)
  {
    v60 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  if (v201[0])
  {
    v62 = (IR::IRDataAttributes *)*((_QWORD *)a2 + 1);
    if ((unint64_t)v62 >= *((_QWORD *)a2 + 2))
    {
      v67 = std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__emplace_back_slow_path<IR::IRDataAttributes&,std::shared_ptr<IR::IRData const> &>((uint64_t *)a2, (const IR::IRDataAttributes *)v193, v201);
      v53 = a4;
    }
    else
    {
      v63 = IR::IRDataAttributes::IRDataAttributes(v62, (const IR::IRDataAttributes *)v193);
      v64 = v201[1];
      *((IR **)v63 + 19) = v201[0];
      *((_QWORD *)v63 + 20) = v64;
      if (v64)
      {
        v65 = (unint64_t *)((char *)v64 + 16);
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
      }
      v53 = a4;
      v67 = (uint64_t)v63 + 168;
    }
    *((_QWORD *)a2 + 1) = v67;
LABEL_120:
    v70 = 1;
  }
  else
  {
    v68 = IR::getIRDataLog(v54);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
      IR::IRDataLoader::Implementation::loadAndDecode();
    v69 = a4;
    v70 = 0;
    *v69 = 0;
    v69[1] = 0;
    v53 = v69;
  }
  if (SHIBYTE(v218[2]) < 0)
  {
    operator delete((void *)v218[0]);
    if (!v70)
      goto LABEL_162;
LABEL_123:
    v33 = v201[0];
    a4 = v53;
    goto LABEL_124;
  }
  if (v70)
    goto LABEL_123;
LABEL_162:
  v161 = 0;
  v162 = 0;
LABEL_203:
  if (v200)
    CFRelease(v200);
  if (v199)
    CFRelease(v199);
  if (v198)
    CFRelease(v198);
  if (v193[0])
    CFRelease(v193[0]);
  v146 = (std::__shared_weak_count *)v201[1];
  if (v201[1])
  {
    v147 = (unint64_t *)((char *)v201[1] + 8);
    do
      v148 = __ldaxr(v147);
    while (__stlxr(v148 - 1, v147));
    if (!v148)
    {
      ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
      std::__shared_weak_count::__release_weak(v146);
    }
  }
  if (v161)
    operator delete(v161);
  if (v162)
    operator delete(v162);
LABEL_220:
  v149 = v205;
  if (v205)
  {
    v150 = (unint64_t *)&v205->__shared_owners_;
    do
      v151 = __ldaxr(v150);
    while (__stlxr(v151 - 1, v150));
    if (!v151)
    {
      ((void (*)(std::__shared_weak_count *))v149->__on_zero_shared)(v149);
      std::__shared_weak_count::__release_weak(v149);
    }
  }
  if (v217)
    CFRelease(v217);
  if (v214)
    CFRelease(v214);
  if (cf)
    CFRelease(cf);
  if (v206)
    CFRelease(v206);
}

void sub_2105A445C(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x707]) < 0)
    operator delete((void *)STACK[0x6F0]);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&STACK[0x588]);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x620]);
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&STACK[0x640]);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)&STACK[0x650]);
  _Unwind_Resume(a1);
}

void IR::IRDataAttributes::description(IR::IRDataAttributes *this@<X0>, int a2@<W1>, std::string *a3@<X8>)
{
  uint64_t i;
  uint64_t j;
  const __CFString *v7;
  void **v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  std::string::size_type size;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  __int128 v23;
  std::string *v24;
  __int128 v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  std::string *v30;
  __int128 v31;
  uint64_t *v32;
  int v33;
  const std::string::value_type *v34;
  std::string::size_type v35;
  std::string *v36;
  __int128 v37;
  std::string *v38;
  __int128 v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  __int128 v43;
  std::string *v44;
  __int128 v45;
  std::string *v46;
  __int128 v47;
  uint64_t *v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  std::string *v52;
  __int128 v53;
  std::string *v54;
  __int128 v55;
  std::string *v56;
  std::string::size_type v57;
  std::string *v58;
  __int128 v59;
  std::string *v60;
  __int128 v61;
  std::string *v62;
  std::string::size_type v63;
  std::string *v64;
  __int128 v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  __int128 v69;
  const void *v70;
  const __CFString *v71;
  std::string *v72;
  std::string::size_type v73;
  std::string *v74;
  __int128 v75;
  std::string *v76;
  __int128 v77;
  std::string *v78;
  std::string::size_type v79;
  std::string *v80;
  __int128 v81;
  std::string *v82;
  __int128 v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  __int128 v87;
  std::string *v88;
  __int128 v89;
  std::string *p_p;
  std::string::size_type v91;
  std::string *v92;
  __int128 v93;
  std::string *v94;
  __int128 v95;
  std::string *v96;
  __int128 v97;
  const char *v98;
  int v99;
  const std::string::value_type *v100;
  std::string::size_type v101;
  std::string *v102;
  void **v103;
  std::string::size_type v104;
  std::string *v105;
  __int128 v106;
  std::string *v107;
  __int128 v108;
  std::string *v109;
  std::string::size_type v110;
  std::string *v111;
  __int128 v112;
  std::string *v113;
  __int128 v114;
  std::string *v115;
  __int128 v116;
  const void *v117;
  const __CFString *v118;
  void **v119;
  std::string::size_type v120;
  std::string *v121;
  __int128 v122;
  std::string *v123;
  __int128 v124;
  std::string *v125;
  std::string::size_type v126;
  std::string *v127;
  __int128 v128;
  std::string *v129;
  __int128 v130;
  std::string *v131;
  std::string::size_type v132;
  std::string *v133;
  __int128 v134;
  std::string *v135;
  __int128 v136;
  std::string *v137;
  __int128 v138;
  std::string *v139;
  std::string::size_type v140;
  std::string *v141;
  __int128 v142;
  std::string *v143;
  __int128 v144;
  std::string *v145;
  std::string::size_type v146;
  std::string *v147;
  __int128 v148;
  std::string *v149;
  __int128 v150;
  std::string *v151;
  std::string::size_type v152;
  std::string *v153;
  __int128 v154;
  std::string *v155;
  __int128 v156;
  std::string *v157;
  std::string::size_type v158;
  std::string *v159;
  __int128 v160;
  std::string *v161;
  std::string v162;
  std::string v163;
  std::string v164;
  std::string v165;
  std::string v166;
  std::string v167;
  void *v168[2];
  unsigned __int8 v169;
  std::string v170;
  void *v171[2];
  unsigned __int8 v172;
  std::string v173;
  std::string v174;
  std::string v175;
  std::string v176;
  std::string v177;
  std::string v178;
  void *v179[2];
  unsigned __int8 v180;
  std::string v181;
  std::string v182;
  std::string v183;
  std::string v184;
  std::string v185;
  std::string v186;
  std::string v187;
  std::string v188;
  std::string v189;
  std::string v190;
  std::string v191;
  std::string v192;
  std::string v193;
  std::string v194;
  std::string v195;
  std::string v196;
  std::string v197;
  std::string v198;
  std::string v199;
  std::string v200;
  std::string v201;
  std::string v202;
  std::string v203;
  std::string v204;
  std::string v205;
  std::string v206;
  std::string v207;
  std::string v208;
  std::string __p;
  std::string v210;
  std::string v211;
  std::string v212;
  std::string v213;
  std::string v214;
  std::string v215;
  std::string v216;
  std::string v217;
  std::string v218;
  std::string v219;
  std::string v220;
  std::string v221;
  std::string v222;
  int v223;
  _QWORD v224[3];
  int v225;
  _QWORD v226[3];
  int v227;
  _QWORD v228[5];

  v228[4] = *MEMORY[0x24BDAC8D0];
  if (a2)
  {
    LODWORD(v222.__r_.__value_.__l.__data_) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v222.__r_.__value_.__l.__size_, "Bilinear");
    v223 = 1;
    std::string::basic_string[abi:ne180100]<0>(v224, "VBAP");
    v225 = 2;
    std::string::basic_string[abi:ne180100]<0>(v226, "Auto");
    std::map<IR::IRSphericalInterpolation,std::string>::map[abi:ne180100]((uint64_t)&v221, (int *)&v222, 3);
    for (i = 0; i != -12; i -= 4)
    {
      if (SHIBYTE(v226[i + 2]) < 0)
        operator delete((void *)v226[i]);
    }
    LODWORD(v222.__r_.__value_.__l.__data_) = 0;
    std::string::basic_string[abi:ne180100]<0>(&v222.__r_.__value_.__l.__size_, "Unknown");
    v223 = 1;
    std::string::basic_string[abi:ne180100]<0>(v224, "DirectIR");
    v225 = 2;
    std::string::basic_string[abi:ne180100]<0>(v226, "RoomIR");
    v227 = 3;
    std::string::basic_string[abi:ne180100]<0>(v228, "EarlyRoomIR");
    std::map<IR::IRDataType,std::string>::map[abi:ne180100]((uint64_t)&v220, (int *)&v222, 4);
    for (j = 0; j != -16; j -= 4)
    {
      if (SHIBYTE(v228[j + 2]) < 0)
        operator delete((void *)v228[j]);
    }
    std::string::basic_string[abi:ne180100]<0>(&v181, "URL: ");
    v7 = CFCopyDescription(*(CFTypeRef *)this);
    applesauce::CF::details::CFString_get_value<true>(v7, (uint64_t)v179);
    if (v7)
      CFRelease(v7);
    if ((v180 & 0x80u) == 0)
      v8 = v179;
    else
      v8 = (void **)v179[0];
    if ((v180 & 0x80u) == 0)
      v9 = v180;
    else
      v9 = (std::string::size_type)v179[1];
    v10 = std::string::append(&v181, (const std::string::value_type *)v8, v9);
    v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v182.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v182.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v182, ", Sample rate: ", 0xFuLL);
    v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v183.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v183.__r_.__value_.__l.__data_ = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v178, *((float *)this + 2));
    if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v178;
    else
      v14 = (std::string *)v178.__r_.__value_.__r.__words[0];
    if ((v178.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v178.__r_.__value_.__r.__words[2]);
    else
      size = v178.__r_.__value_.__l.__size_;
    v16 = std::string::append(&v183, (const std::string::value_type *)v14, size);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v184.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v184.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v18 = std::string::append(&v184, ", fftBlockSize: ", 0x10uLL);
    v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    v185.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v185.__r_.__value_.__l.__data_ = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v177, *((_DWORD *)this + 3));
    if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v177;
    else
      v20 = (std::string *)v177.__r_.__value_.__r.__words[0];
    if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v21 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
    else
      v21 = v177.__r_.__value_.__l.__size_;
    v22 = std::string::append(&v185, (const std::string::value_type *)v20, v21);
    v23 = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
    v186.__r_.__value_.__r.__words[2] = v22->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v186.__r_.__value_.__l.__data_ = v23;
    v22->__r_.__value_.__l.__size_ = 0;
    v22->__r_.__value_.__r.__words[2] = 0;
    v22->__r_.__value_.__r.__words[0] = 0;
    v24 = std::string::append(&v186, ", Mixed TF: ", 0xCuLL);
    v25 = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
    v187.__r_.__value_.__r.__words[2] = v24->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v187.__r_.__value_.__l.__data_ = v25;
    v24->__r_.__value_.__l.__size_ = 0;
    v24->__r_.__value_.__r.__words[2] = 0;
    v24->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v176, *((unsigned __int8 *)this + 16));
    if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v176;
    else
      v26 = (std::string *)v176.__r_.__value_.__r.__words[0];
    if ((v176.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(v176.__r_.__value_.__r.__words[2]);
    else
      v27 = v176.__r_.__value_.__l.__size_;
    v28 = std::string::append(&v187, (const std::string::value_type *)v26, v27);
    v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
    v188.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v188.__r_.__value_.__l.__data_ = v29;
    v28->__r_.__value_.__l.__size_ = 0;
    v28->__r_.__value_.__r.__words[2] = 0;
    v28->__r_.__value_.__r.__words[0] = 0;
    v30 = std::string::append(&v188, ", sphereInterp: ", 0x10uLL);
    v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
    v189.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v189.__r_.__value_.__l.__data_ = v31;
    v30->__r_.__value_.__l.__size_ = 0;
    v30->__r_.__value_.__r.__words[2] = 0;
    v30->__r_.__value_.__r.__words[0] = 0;
    v32 = std::map<IR::IRSphericalInterpolation,std::string>::at((uint64_t)&v221, (int *)this + 5);
    v33 = *((char *)v32 + 23);
    if (v33 >= 0)
      v34 = (const std::string::value_type *)v32;
    else
      v34 = (const std::string::value_type *)*v32;
    if (v33 >= 0)
      v35 = *((unsigned __int8 *)v32 + 23);
    else
      v35 = v32[1];
    v36 = std::string::append(&v189, v34, v35);
    v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
    v190.__r_.__value_.__r.__words[2] = v36->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v190.__r_.__value_.__l.__data_ = v37;
    v36->__r_.__value_.__l.__size_ = 0;
    v36->__r_.__value_.__r.__words[2] = 0;
    v36->__r_.__value_.__r.__words[0] = 0;
    v38 = std::string::append(&v190, ", Window: (", 0xBuLL);
    v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v191.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v191.__r_.__value_.__l.__data_ = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    IR::IRDataWindow::description((IR::IRDataAttributes *)((char *)this + 24), &v175);
    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v175;
    else
      v40 = (std::string *)v175.__r_.__value_.__r.__words[0];
    if ((v175.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = HIBYTE(v175.__r_.__value_.__r.__words[2]);
    else
      v41 = v175.__r_.__value_.__l.__size_;
    v42 = std::string::append(&v191, (const std::string::value_type *)v40, v41);
    v43 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v192.__r_.__value_.__r.__words[2] = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v192.__r_.__value_.__l.__data_ = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = std::string::append(&v192, ")", 1uLL);
    v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v193.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v193, ", irType: ", 0xAuLL);
    v47 = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v194.__r_.__value_.__r.__words[2] = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v194.__r_.__value_.__l.__data_ = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    v48 = std::map<IR::IRSphericalInterpolation,std::string>::at((uint64_t)&v220, (int *)this + 10);
    v49 = *((char *)v48 + 23);
    if (v49 >= 0)
      v50 = (const std::string::value_type *)v48;
    else
      v50 = (const std::string::value_type *)*v48;
    if (v49 >= 0)
      v51 = *((unsigned __int8 *)v48 + 23);
    else
      v51 = v48[1];
    v52 = std::string::append(&v194, v50, v51);
    v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v195.__r_.__value_.__r.__words[2] = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v195.__r_.__value_.__l.__data_ = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    v54 = std::string::append(&v195, ", orientation: ", 0xFuLL);
    v55 = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v196.__r_.__value_.__r.__words[2] = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v196.__r_.__value_.__l.__data_ = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v174, *((_DWORD *)this + 11));
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v56 = &v174;
    else
      v56 = (std::string *)v174.__r_.__value_.__r.__words[0];
    if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v57 = HIBYTE(v174.__r_.__value_.__r.__words[2]);
    else
      v57 = v174.__r_.__value_.__l.__size_;
    v58 = std::string::append(&v196, (const std::string::value_type *)v56, v57);
    v59 = *(_OWORD *)&v58->__r_.__value_.__l.__data_;
    v197.__r_.__value_.__r.__words[2] = v58->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v197.__r_.__value_.__l.__data_ = v59;
    v58->__r_.__value_.__l.__size_ = 0;
    v58->__r_.__value_.__r.__words[2] = 0;
    v58->__r_.__value_.__r.__words[0] = 0;
    v60 = std::string::append(&v197, ", personalizedHRIR: (", 0x15uLL);
    v61 = *(_OWORD *)&v60->__r_.__value_.__l.__data_;
    v198.__r_.__value_.__r.__words[2] = v60->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v198.__r_.__value_.__l.__data_ = v61;
    v60->__r_.__value_.__l.__size_ = 0;
    v60->__r_.__value_.__r.__words[2] = 0;
    v60->__r_.__value_.__r.__words[0] = 0;
    IR::PersonalizedHRIRFetchingParams::description((IR::IRDataAttributes *)((char *)this + 48), &v173);
    if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v62 = &v173;
    else
      v62 = (std::string *)v173.__r_.__value_.__r.__words[0];
    if ((v173.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = HIBYTE(v173.__r_.__value_.__r.__words[2]);
    else
      v63 = v173.__r_.__value_.__l.__size_;
    v64 = std::string::append(&v198, (const std::string::value_type *)v62, v63);
    v65 = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v199.__r_.__value_.__r.__words[2] = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v199.__r_.__value_.__l.__data_ = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v66 = std::string::append(&v199, ")", 1uLL);
    v67 = *(_OWORD *)&v66->__r_.__value_.__l.__data_;
    v200.__r_.__value_.__r.__words[2] = v66->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v200.__r_.__value_.__l.__data_ = v67;
    v66->__r_.__value_.__l.__size_ = 0;
    v66->__r_.__value_.__r.__words[2] = 0;
    v66->__r_.__value_.__r.__words[0] = 0;
    v68 = std::string::append(&v200, ", hoaHOADecoderURL: ", 0x14uLL);
    v69 = *(_OWORD *)&v68->__r_.__value_.__l.__data_;
    v201.__r_.__value_.__r.__words[2] = v68->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v201.__r_.__value_.__l.__data_ = v69;
    v68->__r_.__value_.__l.__size_ = 0;
    v68->__r_.__value_.__r.__words[2] = 0;
    v68->__r_.__value_.__r.__words[0] = 0;
    v70 = (const void *)*((_QWORD *)this + 8);
    if (v70)
    {
      v71 = CFCopyDescription(v70);
      applesauce::CF::details::CFString_get_value<true>(v71, (uint64_t)v171);
      if (v71)
        CFRelease(v71);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v171, "nullptr");
    }
    if ((v172 & 0x80u) == 0)
      v103 = v171;
    else
      v103 = (void **)v171[0];
    if ((v172 & 0x80u) == 0)
      v104 = v172;
    else
      v104 = (std::string::size_type)v171[1];
    v105 = std::string::append(&v201, (const std::string::value_type *)v103, v104);
    v106 = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    v202.__r_.__value_.__r.__words[2] = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v202.__r_.__value_.__l.__data_ = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    v107 = std::string::append(&v202, ", hoaHOADecoderIRWindow: (", 0x1AuLL);
    v108 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
    v203.__r_.__value_.__r.__words[2] = v107->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v203.__r_.__value_.__l.__data_ = v108;
    v107->__r_.__value_.__l.__size_ = 0;
    v107->__r_.__value_.__r.__words[2] = 0;
    v107->__r_.__value_.__r.__words[0] = 0;
    IR::IRDataWindow::description((IR::IRDataAttributes *)((char *)this + 72), &v170);
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v109 = &v170;
    else
      v109 = (std::string *)v170.__r_.__value_.__r.__words[0];
    if ((v170.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v110 = HIBYTE(v170.__r_.__value_.__r.__words[2]);
    else
      v110 = v170.__r_.__value_.__l.__size_;
    v111 = std::string::append(&v203, (const std::string::value_type *)v109, v110);
    v112 = *(_OWORD *)&v111->__r_.__value_.__l.__data_;
    v204.__r_.__value_.__r.__words[2] = v111->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v204.__r_.__value_.__l.__data_ = v112;
    v111->__r_.__value_.__l.__size_ = 0;
    v111->__r_.__value_.__r.__words[2] = 0;
    v111->__r_.__value_.__r.__words[0] = 0;
    v113 = std::string::append(&v204, ")", 1uLL);
    v114 = *(_OWORD *)&v113->__r_.__value_.__l.__data_;
    v205.__r_.__value_.__r.__words[2] = v113->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v205.__r_.__value_.__l.__data_ = v114;
    v113->__r_.__value_.__l.__size_ = 0;
    v113->__r_.__value_.__r.__words[2] = 0;
    v113->__r_.__value_.__r.__words[0] = 0;
    v115 = std::string::append(&v205, ", hoaDecoderURL: ", 0x11uLL);
    v116 = *(_OWORD *)&v115->__r_.__value_.__l.__data_;
    v206.__r_.__value_.__r.__words[2] = v115->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v206.__r_.__value_.__l.__data_ = v116;
    v115->__r_.__value_.__l.__size_ = 0;
    v115->__r_.__value_.__r.__words[2] = 0;
    v115->__r_.__value_.__r.__words[0] = 0;
    v117 = (const void *)*((_QWORD *)this + 11);
    if (v117)
    {
      v118 = CFCopyDescription(v117);
      applesauce::CF::details::CFString_get_value<true>(v118, (uint64_t)v168);
      if (v118)
        CFRelease(v118);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v168, "nullptr");
    }
    if ((v169 & 0x80u) == 0)
      v119 = v168;
    else
      v119 = (void **)v168[0];
    if ((v169 & 0x80u) == 0)
      v120 = v169;
    else
      v120 = (std::string::size_type)v168[1];
    v121 = std::string::append(&v206, (const std::string::value_type *)v119, v120);
    v122 = *(_OWORD *)&v121->__r_.__value_.__l.__data_;
    v207.__r_.__value_.__r.__words[2] = v121->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v207.__r_.__value_.__l.__data_ = v122;
    v121->__r_.__value_.__l.__size_ = 0;
    v121->__r_.__value_.__r.__words[2] = 0;
    v121->__r_.__value_.__r.__words[0] = 0;
    v123 = std::string::append(&v207, ", hoaDecoderACLTag: ", 0x14uLL);
    v124 = *(_OWORD *)&v123->__r_.__value_.__l.__data_;
    v208.__r_.__value_.__r.__words[2] = v123->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v208.__r_.__value_.__l.__data_ = v124;
    v123->__r_.__value_.__l.__size_ = 0;
    v123->__r_.__value_.__r.__words[2] = 0;
    v123->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v167, *((_DWORD *)this + 25));
    if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v125 = &v167;
    else
      v125 = (std::string *)v167.__r_.__value_.__r.__words[0];
    if ((v167.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v126 = HIBYTE(v167.__r_.__value_.__r.__words[2]);
    else
      v126 = v167.__r_.__value_.__l.__size_;
    v127 = std::string::append(&v208, (const std::string::value_type *)v125, v126);
    v128 = *(_OWORD *)&v127->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v127->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v128;
    v127->__r_.__value_.__l.__size_ = 0;
    v127->__r_.__value_.__r.__words[2] = 0;
    v127->__r_.__value_.__r.__words[0] = 0;
    v129 = std::string::append(&__p, ", hoaDecoderPersonalizedHRIR: (", 0x1FuLL);
    v130 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
    v210.__r_.__value_.__r.__words[2] = v129->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v210.__r_.__value_.__l.__data_ = v130;
    v129->__r_.__value_.__l.__size_ = 0;
    v129->__r_.__value_.__r.__words[2] = 0;
    v129->__r_.__value_.__r.__words[0] = 0;
    IR::PersonalizedHRIRFetchingParams::description((IR::IRDataAttributes *)((char *)this + 104), &v166);
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v131 = &v166;
    else
      v131 = (std::string *)v166.__r_.__value_.__r.__words[0];
    if ((v166.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v132 = HIBYTE(v166.__r_.__value_.__r.__words[2]);
    else
      v132 = v166.__r_.__value_.__l.__size_;
    v133 = std::string::append(&v210, (const std::string::value_type *)v131, v132);
    v134 = *(_OWORD *)&v133->__r_.__value_.__l.__data_;
    v211.__r_.__value_.__r.__words[2] = v133->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v211.__r_.__value_.__l.__data_ = v134;
    v133->__r_.__value_.__l.__size_ = 0;
    v133->__r_.__value_.__r.__words[2] = 0;
    v133->__r_.__value_.__r.__words[0] = 0;
    v135 = std::string::append(&v211, ")", 1uLL);
    v136 = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
    v212.__r_.__value_.__r.__words[2] = v135->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v212.__r_.__value_.__l.__data_ = v136;
    v135->__r_.__value_.__l.__size_ = 0;
    v135->__r_.__value_.__r.__words[2] = 0;
    v135->__r_.__value_.__r.__words[0] = 0;
    v137 = std::string::append(&v212, ", expDecayCoeff: ", 0x11uLL);
    v138 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
    v213.__r_.__value_.__r.__words[2] = v137->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v213.__r_.__value_.__l.__data_ = v138;
    v137->__r_.__value_.__l.__size_ = 0;
    v137->__r_.__value_.__r.__words[2] = 0;
    v137->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v165, *((float *)this + 29));
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v139 = &v165;
    else
      v139 = (std::string *)v165.__r_.__value_.__r.__words[0];
    if ((v165.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v140 = HIBYTE(v165.__r_.__value_.__r.__words[2]);
    else
      v140 = v165.__r_.__value_.__l.__size_;
    v141 = std::string::append(&v213, (const std::string::value_type *)v139, v140);
    v142 = *(_OWORD *)&v141->__r_.__value_.__l.__data_;
    v214.__r_.__value_.__r.__words[2] = v141->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v142;
    v141->__r_.__value_.__l.__size_ = 0;
    v141->__r_.__value_.__r.__words[2] = 0;
    v141->__r_.__value_.__r.__words[0] = 0;
    v143 = std::string::append(&v214, ", computeAverageIR: ", 0x14uLL);
    v144 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
    v215.__r_.__value_.__r.__words[2] = v143->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v144;
    v143->__r_.__value_.__l.__size_ = 0;
    v143->__r_.__value_.__r.__words[2] = 0;
    v143->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v164, *((unsigned __int8 *)this + 120));
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v145 = &v164;
    else
      v145 = (std::string *)v164.__r_.__value_.__r.__words[0];
    if ((v164.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v146 = HIBYTE(v164.__r_.__value_.__r.__words[2]);
    else
      v146 = v164.__r_.__value_.__l.__size_;
    v147 = std::string::append(&v215, (const std::string::value_type *)v145, v146);
    v148 = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
    v216.__r_.__value_.__r.__words[2] = v147->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v148;
    v147->__r_.__value_.__l.__size_ = 0;
    v147->__r_.__value_.__r.__words[2] = 0;
    v147->__r_.__value_.__r.__words[0] = 0;
    v149 = std::string::append(&v216, ", Bake Delays: ", 0xFuLL);
    v150 = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
    v217.__r_.__value_.__r.__words[2] = v149->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v150;
    v149->__r_.__value_.__l.__size_ = 0;
    v149->__r_.__value_.__r.__words[2] = 0;
    v149->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v163, *((unsigned __int8 *)this + 17));
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v151 = &v163;
    else
      v151 = (std::string *)v163.__r_.__value_.__r.__words[0];
    if ((v163.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v152 = HIBYTE(v163.__r_.__value_.__r.__words[2]);
    else
      v152 = v163.__r_.__value_.__l.__size_;
    v153 = std::string::append(&v217, (const std::string::value_type *)v151, v152);
    v154 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
    v218.__r_.__value_.__r.__words[2] = v153->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v154;
    v153->__r_.__value_.__l.__size_ = 0;
    v153->__r_.__value_.__r.__words[2] = 0;
    v153->__r_.__value_.__r.__words[0] = 0;
    v155 = std::string::append(&v218, ", convolutionOptimizationParameters: (", 0x26uLL);
    v156 = *(_OWORD *)&v155->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v155->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v156;
    v155->__r_.__value_.__l.__size_ = 0;
    v155->__r_.__value_.__r.__words[2] = 0;
    v155->__r_.__value_.__r.__words[0] = 0;
    IR::FFTFilterOptimizationParameters::description((IR::IRDataAttributes *)((char *)this + 136), &v162);
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v157 = &v162;
    else
      v157 = (std::string *)v162.__r_.__value_.__r.__words[0];
    if ((v162.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v158 = HIBYTE(v162.__r_.__value_.__r.__words[2]);
    else
      v158 = v162.__r_.__value_.__l.__size_;
    v159 = std::string::append(&v219, (const std::string::value_type *)v157, v158);
    v160 = *(_OWORD *)&v159->__r_.__value_.__l.__data_;
    v222.__r_.__value_.__r.__words[2] = v159->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v160;
    v159->__r_.__value_.__l.__size_ = 0;
    v159->__r_.__value_.__r.__words[2] = 0;
    v159->__r_.__value_.__r.__words[0] = 0;
    v161 = std::string::append(&v222, ")", 1uLL);
    *a3 = *v161;
    v161->__r_.__value_.__l.__size_ = 0;
    v161->__r_.__value_.__r.__words[2] = 0;
    v161->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v222.__r_.__value_.__l.__data_);
    if (SHIBYTE(v162.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v162.__r_.__value_.__l.__data_);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v218.__r_.__value_.__l.__data_);
    if (SHIBYTE(v163.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v163.__r_.__value_.__l.__data_);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
    if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v216.__r_.__value_.__l.__data_);
    if (SHIBYTE(v164.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v164.__r_.__value_.__l.__data_);
    if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v215.__r_.__value_.__l.__data_);
    if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v214.__r_.__value_.__l.__data_);
    if (SHIBYTE(v165.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v165.__r_.__value_.__l.__data_);
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v213.__r_.__value_.__l.__data_);
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212.__r_.__value_.__l.__data_);
    if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v211.__r_.__value_.__l.__data_);
    if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v166.__r_.__value_.__l.__data_);
    if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v210.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v167.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v167.__r_.__value_.__l.__data_);
    if (SHIBYTE(v208.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v208.__r_.__value_.__l.__data_);
    if (SHIBYTE(v207.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v207.__r_.__value_.__l.__data_);
    if ((char)v169 < 0)
      operator delete(v168[0]);
    if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v206.__r_.__value_.__l.__data_);
    if (SHIBYTE(v205.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v205.__r_.__value_.__l.__data_);
    if (SHIBYTE(v204.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v204.__r_.__value_.__l.__data_);
    if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v170.__r_.__value_.__l.__data_);
    if (SHIBYTE(v203.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v203.__r_.__value_.__l.__data_);
    if (SHIBYTE(v202.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v202.__r_.__value_.__l.__data_);
    if ((char)v172 < 0)
      operator delete(v171[0]);
    if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v201.__r_.__value_.__l.__data_);
    if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v200.__r_.__value_.__l.__data_);
    if (SHIBYTE(v199.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v199.__r_.__value_.__l.__data_);
    if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v173.__r_.__value_.__l.__data_);
    if (SHIBYTE(v198.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v198.__r_.__value_.__l.__data_);
    if (SHIBYTE(v197.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v197.__r_.__value_.__l.__data_);
    if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v174.__r_.__value_.__l.__data_);
    if (SHIBYTE(v196.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v196.__r_.__value_.__l.__data_);
    if (SHIBYTE(v195.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v195.__r_.__value_.__l.__data_);
    if (SHIBYTE(v194.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v194.__r_.__value_.__l.__data_);
    if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v193.__r_.__value_.__l.__data_);
    if (SHIBYTE(v192.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v192.__r_.__value_.__l.__data_);
    if (SHIBYTE(v175.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v175.__r_.__value_.__l.__data_);
    if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v191.__r_.__value_.__l.__data_);
    if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v190.__r_.__value_.__l.__data_);
    if (SHIBYTE(v189.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v189.__r_.__value_.__l.__data_);
    if (SHIBYTE(v188.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v188.__r_.__value_.__l.__data_);
    if (SHIBYTE(v176.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v176.__r_.__value_.__l.__data_);
    if (SHIBYTE(v187.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v187.__r_.__value_.__l.__data_);
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v186.__r_.__value_.__l.__data_);
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v177.__r_.__value_.__l.__data_);
    if (SHIBYTE(v185.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v185.__r_.__value_.__l.__data_);
    if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v184.__r_.__value_.__l.__data_);
    if (SHIBYTE(v178.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v178.__r_.__value_.__l.__data_);
    if (SHIBYTE(v183.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v183.__r_.__value_.__l.__data_);
    if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v182.__r_.__value_.__l.__data_);
    if ((char)v180 < 0)
      operator delete(v179[0]);
    if (SHIBYTE(v181.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v181.__r_.__value_.__l.__data_);
    std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy((uint64_t)&v220, (char *)v220.__r_.__value_.__l.__size_);
    std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy((uint64_t)&v221, (char *)v221.__r_.__value_.__l.__size_);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v213, "Sample rate: ");
    std::to_string(&v212, *((float *)this + 2));
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v72 = &v212;
    else
      v72 = (std::string *)v212.__r_.__value_.__r.__words[0];
    if ((v212.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v73 = HIBYTE(v212.__r_.__value_.__r.__words[2]);
    else
      v73 = v212.__r_.__value_.__l.__size_;
    v74 = std::string::append(&v213, (const std::string::value_type *)v72, v73);
    v75 = *(_OWORD *)&v74->__r_.__value_.__l.__data_;
    v214.__r_.__value_.__r.__words[2] = v74->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v214.__r_.__value_.__l.__data_ = v75;
    v74->__r_.__value_.__l.__size_ = 0;
    v74->__r_.__value_.__r.__words[2] = 0;
    v74->__r_.__value_.__r.__words[0] = 0;
    v76 = std::string::append(&v214, ", Partition length: ", 0x14uLL);
    v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
    v215.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v215.__r_.__value_.__l.__data_ = v77;
    v76->__r_.__value_.__l.__size_ = 0;
    v76->__r_.__value_.__r.__words[2] = 0;
    v76->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v211, *((_DWORD *)this + 3));
    if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v78 = &v211;
    else
      v78 = (std::string *)v211.__r_.__value_.__r.__words[0];
    if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = HIBYTE(v211.__r_.__value_.__r.__words[2]);
    else
      v79 = v211.__r_.__value_.__l.__size_;
    v80 = std::string::append(&v215, (const std::string::value_type *)v78, v79);
    v81 = *(_OWORD *)&v80->__r_.__value_.__l.__data_;
    v216.__r_.__value_.__r.__words[2] = v80->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v216.__r_.__value_.__l.__data_ = v81;
    v80->__r_.__value_.__l.__size_ = 0;
    v80->__r_.__value_.__r.__words[2] = 0;
    v80->__r_.__value_.__r.__words[0] = 0;
    v82 = std::string::append(&v216, ", Mixed TF: ", 0xCuLL);
    v83 = *(_OWORD *)&v82->__r_.__value_.__l.__data_;
    v217.__r_.__value_.__r.__words[2] = v82->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v217.__r_.__value_.__l.__data_ = v83;
    v82->__r_.__value_.__l.__size_ = 0;
    v82->__r_.__value_.__r.__words[2] = 0;
    v82->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v210, *((unsigned __int8 *)this + 16));
    if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v84 = &v210;
    else
      v84 = (std::string *)v210.__r_.__value_.__r.__words[0];
    if ((v210.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v85 = HIBYTE(v210.__r_.__value_.__r.__words[2]);
    else
      v85 = v210.__r_.__value_.__l.__size_;
    v86 = std::string::append(&v217, (const std::string::value_type *)v84, v85);
    v87 = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
    v218.__r_.__value_.__r.__words[2] = v86->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v218.__r_.__value_.__l.__data_ = v87;
    v86->__r_.__value_.__l.__size_ = 0;
    v86->__r_.__value_.__r.__words[2] = 0;
    v86->__r_.__value_.__r.__words[0] = 0;
    v88 = std::string::append(&v218, ", Window: (", 0xBuLL);
    v89 = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
    v219.__r_.__value_.__r.__words[2] = v88->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v219.__r_.__value_.__l.__data_ = v89;
    v88->__r_.__value_.__l.__size_ = 0;
    v88->__r_.__value_.__r.__words[2] = 0;
    v88->__r_.__value_.__r.__words[0] = 0;
    IR::IRDataWindow::description((IR::IRDataAttributes *)((char *)this + 24), &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v91 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v91 = __p.__r_.__value_.__l.__size_;
    v92 = std::string::append(&v219, (const std::string::value_type *)p_p, v91);
    v93 = *(_OWORD *)&v92->__r_.__value_.__l.__data_;
    v220.__r_.__value_.__r.__words[2] = v92->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v220.__r_.__value_.__l.__data_ = v93;
    v92->__r_.__value_.__l.__size_ = 0;
    v92->__r_.__value_.__r.__words[2] = 0;
    v92->__r_.__value_.__r.__words[0] = 0;
    v94 = std::string::append(&v220, ")", 1uLL);
    v95 = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v221.__r_.__value_.__r.__words[2] = v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v221.__r_.__value_.__l.__data_ = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    v96 = std::string::append(&v221, ", Sphere interpolation: ", 0x18uLL);
    v97 = *(_OWORD *)&v96->__r_.__value_.__l.__data_;
    v222.__r_.__value_.__r.__words[2] = v96->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v222.__r_.__value_.__l.__data_ = v97;
    v96->__r_.__value_.__l.__size_ = 0;
    v96->__r_.__value_.__r.__words[2] = 0;
    v96->__r_.__value_.__r.__words[0] = 0;
    v98 = "Auto";
    v99 = *((_DWORD *)this + 5);
    if (v99 == 1)
      v98 = "VBAP";
    if (v99)
      v100 = v98;
    else
      v100 = "Bilinear";
    if (v99)
      v101 = 4;
    else
      v101 = 8;
    v102 = std::string::append(&v222, v100, v101);
    *a3 = *v102;
    v102->__r_.__value_.__l.__size_ = 0;
    v102->__r_.__value_.__r.__words[2] = 0;
    v102->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v222.__r_.__value_.__l.__data_);
    if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v221.__r_.__value_.__l.__data_);
    if (SHIBYTE(v220.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v220.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v219.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v219.__r_.__value_.__l.__data_);
    if (SHIBYTE(v218.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v218.__r_.__value_.__l.__data_);
    if (SHIBYTE(v210.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v210.__r_.__value_.__l.__data_);
    if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v217.__r_.__value_.__l.__data_);
    if (SHIBYTE(v216.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v216.__r_.__value_.__l.__data_);
    if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v211.__r_.__value_.__l.__data_);
    if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v215.__r_.__value_.__l.__data_);
    if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v214.__r_.__value_.__l.__data_);
    if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v212.__r_.__value_.__l.__data_);
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v213.__r_.__value_.__l.__data_);
  }
}

void sub_2105A5A60(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void sub_2105A6158()
{
  JUMPOUT(0x2105A5E50);
}

void sub_2105A6160()
{
  JUMPOUT(0x2105A5E60);
}

void sub_2105A6168()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 127) < 0)
      operator delete(*(void **)(v0 + v1 + 104));
    v1 -= 32;
    if (v1 == -128)
      JUMPOUT(0x2105A5E6CLL);
  }
}

void sub_2105A6194()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 32;
    if (v0 == v1 - 192)
      JUMPOUT(0x2105A5E6CLL);
  }
}

void sub_2105A61C4()
{
  JUMPOUT(0x2105A5E6CLL);
}

void sub_2105A61CC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = 0;
  while (1)
  {
    if (*(char *)(v0 + v1 + 95) < 0)
      operator delete(*(void **)(v0 + v1 + 72));
    v1 -= 32;
    if (v1 == -96)
      JUMPOUT(0x2105A5E78);
  }
}

void sub_2105A61F8()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 32;
    if (v0 == v1 - 192)
      JUMPOUT(0x2105A5E78);
  }
}

void sub_2105A622C()
{
  JUMPOUT(0x2105A5D30);
}

void sub_2105A6234()
{
  JUMPOUT(0x2105A5D90);
}

void IR::generateGrid(IR *this@<X0>, int a2@<W1>, float *a3@<X4>, uint64_t a4@<X8>)
{
  int TDesign;
  unint64_t v7;
  float *v8;
  _DWORD *v9;
  float *v10;
  void *v11;
  _DWORD *v12;
  _DWORD *v13;
  char v14;
  void *__p;
  void *v16;
  _DWORD *v17;
  void *v18;
  void *v19;
  _DWORD *v20;
  float *v21;
  float *v22;
  float *v23;
  _OWORD *v24;
  _OWORD *v25;
  _DWORD *v26;

  if (!a2)
  {
    v9 = operator new(4uLL);
    v24 = v9;
    *v9 = 0;
    v25 = v9 + 1;
    v26 = v9 + 1;
    v10 = (float *)operator new(4uLL);
    v21 = v10;
    *v10 = 0.0;
    v22 = v10 + 1;
    v23 = v10 + 1;
    LOBYTE(v18) = 0;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_bEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_bEJEJEJRKS6_SA_RKbEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(a4, (uint64_t)&v24, (uint64_t)&v21, &v18);
    goto LABEL_5;
  }
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  TDesign = HOA::getTDesign(this, 0, 0, 0, a3);
  if (TDesign >= 2)
  {
    v7 = TDesign;
    std::vector<float>::resize((uint64_t)&v24, TDesign);
    std::vector<float>::resize((uint64_t)&v21, v7);
    HOA::getTDesign(this, v24, v21, 0, v8);
    LOBYTE(v18) = 1;
    _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_bEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_bEJEJEJRS6_S9_bEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a4, (uint64_t)&v24, (uint64_t)&v21, &v18);
LABEL_5:
    v11 = v21;
    if (!v21)
      goto LABEL_12;
    v22 = v21;
    goto LABEL_11;
  }
  v12 = operator new(4uLL);
  v18 = v12;
  *v12 = 0;
  v19 = v12 + 1;
  v20 = v12 + 1;
  v13 = operator new(4uLL);
  __p = v13;
  *v13 = 0;
  v16 = v13 + 1;
  v17 = v13 + 1;
  v14 = 0;
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_bEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_bEJEJEJRKS6_SA_RKbEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(a4, (uint64_t)&v18, (uint64_t)&__p, &v14);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  v11 = v18;
  if (v18)
  {
    v19 = v18;
LABEL_11:
    operator delete(v11);
  }
LABEL_12:
  if (v24)
  {
    v25 = v24;
    operator delete(v24);
  }
}

void sub_2105A63A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  uint64_t v18;
  void *v20;

  if (__p)
    operator delete(__p);
  v20 = *(void **)(v18 - 56);
  if (v20)
  {
    *(_QWORD *)(v18 - 48) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRDataLoader::writeIRFile(uint64_t *a1, CFURLRef *a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v4 = (std::__shared_weak_count *)a1[1];
  v12 = *a1;
  v13 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v7 = IR::IRDataLoader::writeIRFile((uint64_t)&v12, a2, a3, a4);
  v8 = v13;
  if (v13)
  {
    v9 = (unint64_t *)&v13->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v7;
}

void sub_2105A64A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::writeIRFile(uint64_t a1, CFURLRef *a2, uint64_t a3, uint64_t a4)
{
  const __CFData *SerializedIRData;
  FILE *v9;
  const UInt8 *BytePtr;
  CFIndex Length;
  IR *IsReachable;
  BOOL v13;
  NSObject *IRDataLog;
  NSObject *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  UInt8 buffer[1024];
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  CFURLGetFileSystemRepresentation(*a2, 1u, buffer, 1024);
  SerializedIRData = (const __CFData *)IR::IRData::createSerializedIRData(a1, a3, a4);
  if (!SerializedIRData)
    return 4294956425;
  v9 = fopen((const char *)buffer, "wb");
  BytePtr = CFDataGetBytePtr(SerializedIRData);
  Length = CFDataGetLength(SerializedIRData);
  fwrite(BytePtr, Length, 1uLL, v9);
  CFRelease(SerializedIRData);
  if (v9)
    fclose(v9);
  IsReachable = (IR *)CFURLResourceIsReachable(*a2, 0);
  v13 = (_DWORD)IsReachable == 0;
  IRDataLog = IR::getIRDataLog(IsReachable);
  v15 = IRDataLog;
  if (v13)
  {
    if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_ERROR))
      IR::IRDataLoader::writeIRFile(v15, v17, v18, v19, v20, v21, v22, v23);
    return 4294956425;
  }
  result = os_log_type_enabled(IRDataLog, OS_LOG_TYPE_DEBUG);
  if ((_DWORD)result)
  {
    IR::IRDataLoader::writeIRFile();
    return 0;
  }
  return result;
}

void sub_2105A65F4(_Unwind_Exception *exception_object)
{
  FILE *v1;

  if (v1)
    fclose(v1);
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRDataLoader::writeIRFile(uint64_t a1, CFURLRef *a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int a6, uint64_t *a7, uint64_t *a8, float a9, uint64_t *a10, CFTypeRef *a11, _DWORD *a12, uint64_t a13, uint64_t a14, CFTypeRef *a15)
{
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *IRDataLog;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  float v73;
  unsigned int v74;
  FILE *v76;
  uint64_t v77;
  uint64_t v78;
  CFDictionaryRef CFDictionaryRef;
  CFDictionaryRef v80;
  uint64_t i;
  const void *v82;
  const void *v83;
  char *v84;
  CFTypeRef v85;
  CFTypeRef v86;
  uint64_t j;
  const __CFData *Data;
  const __CFData *v89;
  CFIndex Length;
  float v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t k;
  size_t v98;
  const float *v99;
  size_t v100;
  IR *IsReachable;
  NSObject *v102;
  FILE *v103;
  NSObject *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  FILE *__stream;
  int v125;
  _QWORD v126[2];
  CFDictionaryRef v127;
  int v128;
  _QWORD v129[2];
  CFDictionaryRef v130;
  float *__D;
  uint64_t v132;
  char v133;
  const void *__ptr[2];
  CFPropertyListRef propertyList;
  CFArrayRef v136;
  void *__p[2];
  char v138;
  char *v139[3];
  CFDictionaryRef v140;
  float __B;
  unint64_t v142;
  uint64_t v143;
  unsigned int v144;
  float v145;
  _BYTE v146[16];
  _BYTE v147[16];
  UInt8 *v148;
  void **v149;
  _BYTE v150[16];
  _BYTE v151[16];
  _BYTE v152[16];
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  float __C[256];
  uint64_t v161;
  CFRange v162;

  v161 = *MEMORY[0x24BDAC8D0];
  v145 = a9;
  v144 = a6;
  v15 = *(_QWORD **)a1;
  v16 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)a1 == v16)
    goto LABEL_11;
  v18 = *(_QWORD **)a3;
  v19 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v19)
    goto LABEL_11;
  if (!a6)
    goto LABEL_11;
  v22 = a1;
  a1 = *a4;
  v23 = a4[1];
  if (*a4 == v23
    || (v25 = *a7, v26 = a7[1], *a7 == v26)
    || (v28 = *a8, v29 = a8[1], *a8 == v29)
    || (v30 = *a10, v31 = a10[1], *a10 == v31))
  {
LABEL_11:
    IRDataLog = IR::getIRDataLog((IR *)a1);
    if (os_log_type_enabled(IRDataLog, OS_LOG_TYPE_ERROR))
      IR::IRDataLoader::writeIRFile(IRDataLog, v43, v44, v45, v46, v47, v48, v49);
    return 4294956425;
  }
  v33 = (uint64_t)(v15[1] - *v15) >> 2;
  if (v33 % a6)
  {
    v34 = IR::getIRDataLog((IR *)a1);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      IR::IRDataLoader::writeIRFile(v34, v35, v36, v37, v38, v39, v40, v41);
    return 4294956425;
  }
  v52 = 0xAAAAAAAAAAAAAAABLL * ((v16 - (uint64_t)v15) >> 3);
  v143 = v52;
  if (0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)v18) >> 3) != v52
    || (a1 = v23 - a1, v53 = a1 >> 2, a1 >> 2 != (uint64_t)(v18[1] - *v18) >> 2)
    || v53 != (v26 - v25) >> 2
    || v53 != (v29 - v28) >> 2
    || v53 != (v31 - v30) >> 2)
  {
    v56 = IR::getIRDataLog((IR *)a1);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
      IR::IRDataLoader::writeIRFile(v56, v57, v58, v59, v60, v61, v62, v63);
    return 4294956425;
  }
  v54 = *(_QWORD **)a5;
  v55 = *(_QWORD *)(a5 + 8);
  if (*(_QWORD *)a5 != v55
    && (0xAAAAAAAAAAAAAAABLL * ((v55 - (uint64_t)v54) >> 3) != v52 || a6 != (uint64_t)(v54[1] - *v54) >> 2))
  {
    v64 = IR::getIRDataLog((IR *)a1);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_ERROR))
      IR::IRDataLoader::writeIRFile(v64, v65, v66, v67, v68, v69, v70, v71);
    return 4294956425;
  }
  v121 = a1;
  v142 = v33 / a6;
  __B = 0.0;
  v120 = a1 >> 2;
  if (*a12)
  {
    __B = 1.0;
  }
  else
  {
    v72 = 0;
    __C[0] = 0.0;
    v73 = 0.0;
    v74 = 1;
    do
    {
      vDSP_maxmgv((const float *)v15[3 * v72], 1, __C, (uint64_t)(v15[3 * v72 + 1] - v15[3 * v72]) >> 2);
      if (__C[0] > v73)
        v73 = __C[0];
      v72 = v74;
      v15 = *(_QWORD **)v22;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v22 + 8) - *(_QWORD *)v22) >> 3) > v74++);
    __B = v73 * 0.000030518;
  }
  CFURLGetFileSystemRepresentation(*a2, 1u, (UInt8 *)__C, 1024);
  v76 = fopen((const char *)__C, "wb");
  memset(v139, 0, sizeof(v139));
  v140 = 0;
  __stream = v76;
  v77 = v120;
  if (v121 >= 1)
  {
    v78 = 0;
    if (v120 <= 1)
      v77 = 1;
    v122 = v77;
    do
    {
      IR::IRCoordinates::getParameterString(*(_DWORD *)(*a4 + 4 * v78), __p);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[5],std::string>((applesauce::CF::TypeRef *)&v148, "Name", (uint64_t)__p);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],float const&>((applesauce::CF::TypeRef *)v150, "Periodicity", (int *)(*a7 + 4 * v78));
      LODWORD(v129[0]) = *(_DWORD *)(*a8 + 4 * v78);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[14],int>((applesauce::CF::TypeRef *)v151, "Interpolation", (int *)v129);
      applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],float const&>((applesauce::CF::TypeRef *)v152, "DefaultValue", (int *)(*a10 + 4 * v78));
      v123 = v78;
      __D = (float *)&v148;
      v132 = 4;
      CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)&__D);
      v80 = v140;
      v140 = CFDictionaryRef;
      __ptr[0] = v80;
      applesauce::CF::DictionaryRef::~DictionaryRef(__ptr);
      for (i = 0; i != -64; i -= 16)
      {
        v82 = *(const void **)&v152[i + 8];
        if (v82)
          CFRelease(v82);
        v83 = *(const void **)&v152[i];
        if (v83)
          CFRelease(v83);
      }
      if (v138 < 0)
        operator delete(__p[0]);
      v76 = __stream;
      std::vector<applesauce::CF::DictionaryRef>::push_back[abi:ne180100](v139, (CFTypeRef *)&v140);
      ++v78;
    }
    while (v123 + 1 != v122);
  }
  v136 = applesauce::CF::details::make_CFArrayRef<applesauce::CF::DictionaryRef>((uint64_t **)v139);
  if (*a12)
    v84 = "float32";
  else
    v84 = "int16";
  std::string::basic_string[abi:ne180100]<0>(__p, v84);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],std::string>((applesauce::CF::TypeRef *)&v148, "CoefficientFormat", (uint64_t)__p);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],long &>((applesauce::CF::TypeRef *)v150, "FilterLength", (uint64_t *)&v142);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float &>((applesauce::CF::TypeRef *)v151, "SampleRate", (int *)&v145);
  std::string::basic_string[abi:ne180100]<0>(&__D, "float32");
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],std::string>((applesauce::CF::TypeRef *)v152, "DelayFormat", (uint64_t)&__D);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[20],long &>((applesauce::CF::TypeRef *)&v153, "TotalNumCoordinates", &v143);
  v85 = *a11;
  if (*a11)
  {
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v130, a11);
  }
  else
  {
    v128 = 0;
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[1],int>((applesauce::CF::TypeRef *)v147, "", &v128);
    v129[0] = v147;
    v129[1] = 1;
    v130 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v129);
    v76 = __stream;
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::DictionaryRef const>((applesauce::CF::TypeRef *)&v154, "UserData", (const void **)&v130);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],applesauce::CF::ArrayRef &>((applesauce::CF::TypeRef *)&v155, "Dimensions", (const void **)&v136);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],float &>((applesauce::CF::TypeRef *)&v156, "FilterScaleFactor", (int *)&__B);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],unsigned int &>((applesauce::CF::TypeRef *)&v157, "NumChannels", (int *)&v144);
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],std::string const&>((applesauce::CF::TypeRef *)&v158, "Description", a14);
  v86 = *a15;
  if (*a15)
  {
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&v127, a15);
  }
  else
  {
    v125 = 0;
    applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[1],int>((applesauce::CF::TypeRef *)v146, "", &v125);
    v126[0] = v146;
    v126[1] = 1;
    v127 = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v126);
    v76 = __stream;
  }
  applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::DictionaryRef const>((applesauce::CF::TypeRef *)&v159, "TriangulationData", (const void **)&v127);
  __ptr[0] = &v148;
  __ptr[1] = (const void *)11;
  propertyList = applesauce::CF::details::make_CFDictionaryRef((uint64_t)__ptr);
  for (j = 20; j != -2; j -= 2)
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)&(&v148)[j]);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v127);
  if (!v86)
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v146);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v130);
  if (!v85)
    applesauce::CF::TypeRefPair::~TypeRefPair((applesauce::CF::TypeRefPair *)v147);
  if (v133 < 0)
    operator delete(__D);
  if (v138 < 0)
    operator delete(__p[0]);
  Data = CFPropertyListCreateData((CFAllocatorRef)*MEMORY[0x24BDBD240], propertyList, kCFPropertyListBinaryFormat_v1_0, 0, 0);
  v89 = Data;
  if (Data)
  {
    Length = CFDataGetLength(Data);
    std::vector<unsigned char>::vector(&v148, Length);
    v162.length = CFDataGetLength(v89);
    v162.location = 0;
    CFDataGetBytes(v89, v162, v148);
    __ptr[0] = (const void *)((char *)v149 - (char *)v148);
    fwrite(__ptr, 4uLL, 1uLL, v76);
    fwrite(v148, 1uLL, (size_t)__ptr[0], v76);
    std::vector<short>::vector(__p, v142);
    std::vector<float>::vector(&__D, v142);
    LODWORD(v129[0]) = 1191181824;
    LODWORD(v126[0]) = -956301312;
    v91 = 0.0;
    if (__B != 0.0)
      v91 = 1.0 / __B;
    __B = v91;
    if (v143 >= 1)
    {
      v92 = 0;
      v93 = v120;
      if (v120 <= 1)
        v93 = 1;
      v94 = 4 * v93;
      do
      {
        if (v121 >= 1)
        {
          v95 = 0;
          do
          {
            fwrite((const void *)(*(_QWORD *)(*(_QWORD *)a3 + 24 * v92) + v95), 4uLL, 1uLL, v76);
            v95 += 4;
          }
          while (v94 != v95);
        }
        if (v144)
        {
          v96 = 0;
          for (k = 0; k < v144; ++k)
          {
            v98 = v142;
            v99 = (const float *)(*(_QWORD *)(*(_QWORD *)v22 + 24 * v92) + 4 * v142 * k);
            if (*a12)
            {
              v100 = 4;
            }
            else
            {
              vDSP_vsmul(v99, 1, &__B, __D, 1, v142);
              vDSP_vclip(__D, 1, (const float *)v126, (const float *)v129, __D, 1, v142);
              vDSP_vfix16(__D, 1, (__int16 *)__p[0], 1, v142);
              v99 = (const float *)__p[0];
              v98 = v142;
              v100 = 2;
            }
            fwrite(v99, v100, v98, __stream);
            if (*(_QWORD *)a5 == *(_QWORD *)(a5 + 8))
            {
              LODWORD(v130) = 0;
              fwrite(&v130, 4uLL, 1uLL, __stream);
            }
            else
            {
              fwrite((const void *)(*(_QWORD *)(*(_QWORD *)a5 + 24 * v92) + v96), 4uLL, 1uLL, __stream);
            }
            v96 += 4;
          }
        }
        ++v92;
        v76 = __stream;
      }
      while (v92 < v143);
    }
    CFRelease(v89);
    IsReachable = (IR *)CFURLResourceIsReachable(*a2, 0);
    if ((_DWORD)IsReachable)
    {
      v102 = IR::getIRDataLog(IsReachable);
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
      {
        IR::IRDataLoader::writeIRFile();
        v103 = __stream;
        v50 = 0;
LABEL_97:
        if (__D)
        {
          v132 = (uint64_t)__D;
          operator delete(__D);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (v148)
        {
          v149 = (void **)v148;
          operator delete(v148);
        }
        goto LABEL_103;
      }
      v50 = 0;
    }
    else
    {
      v112 = IR::getIRDataLog(IsReachable);
      if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
      {
        IR::IRDataLoader::writeIRFile(v112, v113, v114, v115, v116, v117, v118, v119);
        v103 = __stream;
        v50 = 4294956425;
        goto LABEL_97;
      }
      v50 = 4294956425;
    }
    v103 = __stream;
    goto LABEL_97;
  }
  v104 = IR::getIRDataLog(0);
  if (os_log_type_enabled(v104, OS_LOG_TYPE_ERROR))
  {
    IR::IRDataLoader::writeIRFile(v104, v105, v106, v107, v108, v109, v110, v111);
    v103 = __stream;
    v50 = 4294956418;
  }
  else
  {
    v50 = 4294956418;
    v103 = __stream;
  }
LABEL_103:
  applesauce::CF::DictionaryRef::~DictionaryRef(&propertyList);
  applesauce::CF::ArrayRef::~ArrayRef((const void **)&v136);
  v148 = (UInt8 *)v139;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100]((void ***)&v148);
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)&v140);
  if (v103)
    fclose(v103);
  return v50;
}

void sub_2105A705C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, FILE *a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,const void *a35,const void *a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43,uint64_t a44,uint64_t a45,const void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51,uint64_t a52,char a53,uint64_t a54,void **a55,void **a56)
{
  if (__p)
    operator delete(__p);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a55)
  {
    a56 = a55;
    operator delete(a55);
  }
  applesauce::CF::DictionaryRef::~DictionaryRef(&a35);
  applesauce::CF::ArrayRef::~ArrayRef(&a36);
  a55 = (void **)&a43;
  std::vector<applesauce::CF::DictionaryRef>::__destroy_vector::operator()[abi:ne180100](&a55);
  applesauce::CF::DictionaryRef::~DictionaryRef(&a46);
  if (a18)
    fclose(a18);
  _Unwind_Resume(a1);
}

IR::IRDataLoader::Implementation **IR::IRDataLoader::IRDataLoader(IR::IRDataLoader::Implementation **this)
{
  uint64_t v2;

  *this = 0;
  v2 = operator new();
  *(_QWORD *)(v2 + 224) = 0;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  IR::IRDataLoader::Implementation::Implementation((IR::IRDataLoader::Implementation *)v2);
  std::unique_ptr<IR::IRDataLoader::Implementation>::reset[abi:ne180100](this, (IR::IRDataLoader::Implementation *)v2);
  return this;
}

void sub_2105A732C(_Unwind_Exception *a1)
{
  IR::IRDataLoader::Implementation **v1;
  uint64_t v2;

  MEMORY[0x212BC7928](v2, 0x10A0C40E6A02A0DLL);
  std::unique_ptr<IR::IRDataLoader::Implementation>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::~IRDataLoader(IR::IRDataLoader::Implementation **this)
{
  std::unique_ptr<IR::IRDataLoader::Implementation>::reset[abi:ne180100](this, 0);
}

{
  std::unique_ptr<IR::IRDataLoader::Implementation>::reset[abi:ne180100](this, 0);
}

IR::IRDataLoader::Implementation **IR::IRDataLoader::instance(IR::IRDataLoader *this)
{
  unsigned __int8 v1;

  {
    IR::IRDataLoader::IRDataLoader(&IR::IRDataLoader::instance(void)::global);
  }
  return &IR::IRDataLoader::instance(void)::global;
}

void sub_2105A7414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::load(uint64_t *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, _OWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t v11;
  void *__p[2];
  char v13;
  __int128 v14;

  v11 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  IR::IRDataLoader::Implementation::load(v11, (uint64_t)__p, a2, a3, a4, (uint64_t)&v14, a6);
  *a5 = v14;
  v14 = 0uLL;
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_2105A74C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IR::IRDataLoader::load(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>, float a7@<S0>)
{
  IR::IRDataLoader::Implementation::load(*a1, a2, a3, a4, a5, a6, a7);
}

void IR::IRDataLoader::load(uint64_t *a1@<X0>, const IR::IRDataAttributes *a2@<X1>, const void **a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  uint64_t v9;
  const void *v10;
  const void *v11;
  void *__p[2];
  char v13;
  __int128 v14;

  v9 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v10 = *a3;
  if (v10)
    CFRetain(v10);
  v11 = v10;
  IR::IRDataLoader::Implementation::load(v9, (uint64_t)__p, a2, &v11, a4, (uint64_t)&v14);
  *a5 = v14;
  v14 = 0uLL;
  if (v10)
    CFRelease(v10);
  if (v13 < 0)
    operator delete(__p[0]);
}

void sub_2105A75A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  applesauce::CF::DataRef::~DataRef((const void **)&a9);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::load(uint64_t *a1@<X0>, uint64_t a2@<X1>, const IR::IRDataAttributes *a3@<X2>, CFTypeRef *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  CFTypeRef v11;
  const void *v12;

  v10 = *a1;
  v11 = *a4;
  if (*a4)
    CFRetain(*a4);
  v12 = v11;
  IR::IRDataLoader::Implementation::load(v10, a2, a3, &v12, a5, a6);
  if (v11)
    CFRelease(v11);
}

void sub_2105A764C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::create(uint64_t *a1@<X0>, uint64_t a2@<X1>, CFTypeRef *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, _OWORD *a9@<X8>, float a10@<S0>, uint64_t a11, const void **a12, uint64_t a13, int a14, unsigned __int8 a15, int a16, int a17, uint64_t *a18)
{
  uint64_t v22;
  void *__p;
  char v29;
  __int128 v30;

  v22 = *a1;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  IR::IRDataLoader::Implementation::create(v22, a2, a3, a4, a5, a6, a7, (uint64_t)&v30, a10, a8, a11, a12, a13, a14, a15, a16, a17, a18);
  *a9 = v30;
  if (v29 < 0)
    operator delete(__p);
}

void sub_2105A775C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IR::IRDataLoader::create(uint64_t *a1@<X0>, uint64_t a2@<X2>, CFTypeRef *a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, unsigned int a7@<W7>, uint64_t a8@<X8>, float a9@<S0>, uint64_t a10, uint64_t a11, const void **a12, uint64_t a13, int a14, unsigned __int8 a15, int a16, int a17, uint64_t *a18)
{
  IR::IRDataLoader::Implementation::create(*a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
}

uint64_t IR::IRDataLoader::getFilterLength(IR::IRDataLoader::Implementation **a1, int a2, float a3)
{
  return IR::IRDataLoader::Implementation::getFilterLength(*a1, a2, a3);
}

uint64_t IR::IRDataLoader::getFilterLength(IR::IRDataLoader::Implementation **this, const IR::IRDataAttributes *a2)
{
  return IR::IRDataLoader::Implementation::getFilterLength(*this, a2);
}

uint64_t IR::IRDataLoader::getNumSpatialPoints(IR::IRDataLoader::Implementation **a1, int a2, float a3)
{
  return IR::IRDataLoader::Implementation::getNumSpatialPoints(*a1, a2, a3);
}

uint64_t IR::IRDataLoader::getNumSpatialPoints(IR::IRDataLoader::Implementation **this, const IR::IRDataAttributes *a2)
{
  return IR::IRDataLoader::Implementation::getNumSpatialPoints(*this, a2);
}

uint64_t IR::IRDataLoader::getNumFiltersPerSpatialPoint(IR::IRDataLoader::Implementation **a1, int a2, float a3)
{
  return IR::IRDataLoader::Implementation::getNumFiltersPerSpatialPoint(*a1, a2, a3);
}

uint64_t IR::IRDataLoader::getNumFiltersPerSpatialPoint(IR::IRDataLoader::Implementation **this, const IR::IRDataAttributes *a2)
{
  return IR::IRDataLoader::Implementation::getNumFiltersPerSpatialPoint(*this, a2);
}

uint64_t IR::IRDataLoader::getModelingDelay(IR::IRDataLoader::Implementation **a1, int a2, float a3)
{
  return IR::IRDataLoader::Implementation::getModelingDelay(*a1, a2, a3);
}

uint64_t IR::IRDataLoader::getModelingDelay(IR::IRDataLoader::Implementation **this, const IR::IRDataAttributes *a2)
{
  return IR::IRDataLoader::Implementation::getModelingDelay(*this, a2);
}

void IR::IRDataLoader::getUserData(const IR::IRDataAttributes ***a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  IR::IRDataLoader::Implementation::getUserData(*a1, a2, a3);
}

void IR::IRDataLoader::getUserData(const IR::IRDataAttributes ***this@<X0>, const IR::IRDataAttributes *a2@<X1>, _QWORD *a3@<X8>)
{
  IR::IRDataLoader::Implementation::getUserData(*this, a2, a3);
}

void IR::IRDataLoader::getGlobalUserData(IR::IRDataLoader::Implementation **a1, int a2)
{
  IR::IRDataLoader::Implementation::getGlobalUserData(*a1, a2);
}

void IR::IRDataLoader::getGlobalUserData(IR::IRDataLoader::Implementation **this, const IR::IRDataAttributes *a2)
{
  IR::IRDataLoader::Implementation::getGlobalUserData(*this, a2);
}

void IR::IRDataLoader::getIRDataTypes(IR::IRDataLoader::Implementation **a1, int a2)
{
  IR::IRDataLoader::Implementation::getIRDataTypes(*a1, a2);
}

void IR::IRDataLoader::getIRDataTypes(IR::IRDataLoader::Implementation **this, const IR::IRDataAttributes *a2)
{
  IR::IRDataLoader::Implementation::getIRDataTypes(*this, a2);
}

uint64_t IR::IRDataLoader::getAudioChannelLayoutTag(IR::IRDataLoader::Implementation **a1, int a2)
{
  return IR::IRDataLoader::Implementation::getAudioChannelLayoutTag(*a1, a2);
}

uint64_t IR::IRDataLoader::getAudioChannelLayoutTag(IR::IRDataLoader::Implementation **this, const IR::IRDataAttributes *a2)
{
  return IR::IRDataLoader::Implementation::getAudioChannelLayoutTag(*this, a2, 0);
}

uint64_t IR::IRDataLoader::getAudioChannelLayoutTag(CFTypeRef a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  uint64_t AudioChannelLayoutTag;
  CFTypeRef v5;

  v2 = *a2;
  if (*a2)
    a1 = CFRetain(*a2);
  v5 = v2;
  AudioChannelLayoutTag = IR::IRDataLoader::Implementation::getAudioChannelLayoutTag((uint64_t)a1, &v5);
  if (v2)
    CFRelease(v2);
  return AudioChannelLayoutTag;
}

void sub_2105A7890(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t IR::IRDataLoader::getOriginalAudioChannelLayoutTag(IR::IRDataLoader::Implementation **this, const IR::IRDataAttributes *a2)
{
  return IR::IRDataLoader::Implementation::getAudioChannelLayoutTag(*this, a2, 1);
}

uint64_t IR::IRDataLoader::isConsolidatedIR(IR::IRDataLoader *this, const IR::IRDataAttributes *a2)
{
  return IR::IRData::isConsolidatedIR(a2, a2);
}

uint64_t IR::IRDataLoader::hasType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return IR::IRData::hasType(a2, a3);
}

BOOL IR::IRDataLoader::fileExists(uint64_t *a1, int a2)
{
  return IR::IRDataLoader::Implementation::fileExists(*a1, a2);
}

BOOL IR::IRDataLoader::fileExists(CFTypeRef a1, CFTypeRef *a2)
{
  CFTypeRef v2;
  _BOOL8 v3;
  CFTypeRef v5;

  v2 = *a2;
  if (*a2)
    a1 = CFRetain(*a2);
  v5 = v2;
  v3 = IR::IRDataLoader::Implementation::fileExists((uint64_t)a1, &v5);
  if (v2)
    CFRelease(v2);
  return v3;
}

void sub_2105A7930(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::URLRef::~URLRef((const void **)va);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::rebuildPersonalizedHRTFCache(IR::IRDataLoader::Implementation **this)
{
  IR::IRDataLoader::Implementation::rebuildPersonalizedHRTFCache(*this);
}

BOOL IR::IRDataLoader::hasFailedToFetchPersonalizedHRTF(IR::IRDataLoader::Implementation **this)
{
  return IR::IRDataLoader::Implementation::hasFailedToFetchPersonalizedHRTF(*this);
}

uint64_t IR::IRDataLoader::checkIfPersonalizedHRTFIsAllowed(IR::PersonalizedIRData::Implementation ***this)
{
  return IR::IRDataLoader::Implementation::checkIfPersonalizedHRTFIsAllowed(*this);
}

void IR::IRDataLoader::addPersonalizedHRTFListenerCallback(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  std::string __p;
  _BYTE v10[24];
  _BYTE *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v10, a3);
  IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(v4, (unsigned __int8 *)&__p, (uint64_t)v10);
  v7 = v11;
  if (v11 == v10)
  {
    v8 = 4;
    v7 = v10;
  }
  else
  {
    if (!v11)
      goto LABEL_9;
    v8 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v7 + 8 * v8))(v7, v5, v6);
LABEL_9:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2105A7A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  _Unwind_Resume(exception_object);
}

void IR::IRDataLoader::removePersonalizedHRTFListenerCallback(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  std::string __p;

  v2 = *a1;
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  IR::IRDataLoader::Implementation::removePersonalizedHRTFListenerCallback(v2, (unsigned __int8 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_2105A7AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IR::IRDataLoader::getPersonalizedHRTFStatus(IR::IRDataLoader::Implementation **this)
{
  return IR::IRDataLoader::Implementation::getPersonalizedHRTFStatus(*this);
}

void IR::IRDataLoader::clearPersonalizedIRDataCache(IR::IRDataLoader::Implementation **this)
{
  IR::IRDataLoader::Implementation::clearPersonalizedIRDataCache(*this);
}

void IR::IRDataLoader::addIRDataToCache(uint64_t *a1, IR::IRDataAttributes *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  IR::IRData *v12;
  std::__shared_weak_count *v13;
  void *__p[2];
  char v15;

  v5 = *a1;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  v6 = *(std::__shared_weak_count **)(a3 + 8);
  v12 = *(IR::IRData **)a3;
  v13 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  IR::IRDataLoader::Implementation::addIRDataToCache(v5, (uint64_t *)__p, a2, &v12);
  v9 = v13;
  if (v13)
  {
    v10 = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v15 < 0)
    operator delete(__p[0]);
}

void sub_2105A7BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void IR::IRDataLoader::addIRDataToCache(uint64_t *a1, uint64_t *a2, IR::IRDataAttributes *a3, IR::IRData **a4)
{
  IR::IRDataLoader::Implementation::addIRDataToCache(*a1, a2, a3, a4);
}

_QWORD *IR::IRDataLoader::getCustomLayoutFromTag@<X0>(IR::IRDataLoader::Implementation **this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  return IR::IRDataLoader::Implementation::getCustomLayoutFromTag(*this, a2, a3);
}

uint64_t IR::IRDataLoader::registerCustomLayoutIfNecessary(IR::IRDataLoader::Implementation **this, const AudioChannelLayout *a2)
{
  return IR::IRDataLoader::Implementation::registerCustomLayoutIfNecessary(*this, a2);
}

void std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  IR::IRDataAttributes *v2;
  IR::IRDataAttributes *v4;
  void *v5;

  v1 = *a1;
  v2 = (IR::IRDataAttributes *)**a1;
  if (v2)
  {
    v4 = (IR::IRDataAttributes *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 = (IR::IRDataAttributes *)((char *)v4 - 168);
        std::__destroy_at[abi:ne180100]<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>,0>(IR::IRDataAttributes *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  IR::IRDataAttributes::~IRDataAttributes(this);
}

uint64_t *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>> *,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>::operator=[abi:ne180100](a3, v4);
      v4 += 21;
      a3 += 21;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t *std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>::operator=[abi:ne180100](uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;

  v3 = *a1;
  *a1 = *a2;
  *a2 = v3;
  v4 = *(_OWORD *)(a2 + 1);
  v5 = *(_OWORD *)(a2 + 3);
  v6 = *(_OWORD *)(a2 + 5);
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  *(_OWORD *)(a1 + 5) = v6;
  *(_OWORD *)(a1 + 3) = v5;
  *(_OWORD *)(a1 + 1) = v4;
  v7 = a1[8];
  a1[8] = a2[8];
  a2[8] = v7;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v8 = a1[11];
  a1[11] = a2[11];
  a2[11] = v8;
  v9 = *((_OWORD *)a2 + 6);
  *(_OWORD *)((char *)a1 + 105) = *(_OWORD *)((char *)a2 + 105);
  *((_OWORD *)a1 + 6) = v9;
  v10 = a1[16];
  a1[16] = a2[16];
  a2[16] = v10;
  v11 = a2[17];
  *((_DWORD *)a1 + 36) = *((_DWORD *)a2 + 36);
  a1[17] = v11;
  v12 = *(_OWORD *)(a2 + 19);
  a2[19] = 0;
  a2[20] = 0;
  v13 = (std::__shared_weak_count *)a1[20];
  *(_OWORD *)(a1 + 19) = v12;
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  return a1;
}

BOOL applesauce::CF::operator==(const void **a1, const void **a2)
{
  unint64_t v2;
  unint64_t v3;
  _BOOL8 v4;
  BOOL v5;

  v2 = (unint64_t)*a1;
  v3 = (unint64_t)*a2;
  v4 = (v2 | v3) == 0;
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5)
    return CFEqual((CFTypeRef)v2, (CFTypeRef)v3) != 0;
  return v4;
}

uint64_t std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__emplace_back_slow_path<IR::IRDataAttributes&,std::shared_ptr<IR::IRData const> const&>(uint64_t *a1, const IR::IRDataAttributes *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  IR::IRDataAttributes *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v19;
  IR::IRDataAttributes *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  v4 = *a1;
  v5 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x186186186186186)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0xC30C30C30C30C3)
    v11 = 0x186186186186186;
  else
    v11 = v6;
  v23 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>>(v9, v11);
  else
    v12 = 0;
  v19 = v12;
  v20 = (IR::IRDataAttributes *)&v12[168 * v5];
  v22 = &v12[168 * v11];
  v13 = IR::IRDataAttributes::IRDataAttributes(v20, a2);
  *((_QWORD *)v13 + 19) = *a3;
  v14 = a3[1];
  *((_QWORD *)v13 + 20) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v21 = (char *)v13 + 168;
  std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__swap_out_circular_buffer(a1, &v19);
  v17 = a1[1];
  std::__split_buffer<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::~__split_buffer((uint64_t)&v19);
  return v17;
}

void sub_2105A7F50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>,std::reverse_iterator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>*>,std::reverse_iterator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>*>,std::reverse_iterator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x186186186186187)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(168 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>,std::reverse_iterator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>*>,std::reverse_iterator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>*>,std::reverse_iterator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __n128 result;

  v7 = a7;
  if (a3 != a5)
  {
    v8 = a7 - 80;
    do
    {
      v9 = *(_QWORD *)(a3 - 168);
      a3 -= 168;
      *(_QWORD *)(v8 - 88) = v9;
      *(_QWORD *)a3 = 0;
      v10 = *(_OWORD *)(a3 + 8);
      v11 = *(_OWORD *)(a3 + 24);
      v12 = *(_OWORD *)(a3 + 40);
      *(_BYTE *)(v8 - 32) = *(_BYTE *)(a3 + 56);
      *(_OWORD *)(v8 - 64) = v11;
      *(_OWORD *)(v8 - 48) = v12;
      *(_OWORD *)(v8 - 80) = v10;
      *(_QWORD *)(v8 - 24) = *(_QWORD *)(a3 + 64);
      *(_QWORD *)(a3 + 64) = 0;
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + 72);
      *(_QWORD *)v8 = *(_QWORD *)(a3 + 88);
      *(_QWORD *)(a3 + 88) = 0;
      v13 = *(_OWORD *)(a3 + 96);
      *(_OWORD *)(v8 + 17) = *(_OWORD *)(a3 + 105);
      *(_OWORD *)(v8 + 8) = v13;
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(a3 + 128);
      *(_QWORD *)(a3 + 128) = 0;
      v14 = *(_QWORD *)(a3 + 136);
      *(_DWORD *)(v8 + 56) = *(_DWORD *)(a3 + 144);
      *(_QWORD *)(v8 + 48) = v14;
      result = *(__n128 *)(a3 + 152);
      *(__n128 *)(v8 + 64) = result;
      *(_QWORD *)(a3 + 152) = 0;
      *(_QWORD *)(a3 + 160) = 0;
      v8 -= 168;
      v7 -= 168;
    }
    while (a3 != a5);
  }
  return result;
}

uint64_t std::__split_buffer<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 168;
    std::__destroy_at[abi:ne180100]<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>,0>((IR::IRDataAttributes *)(i - 168));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__emplace_back_slow_path<IR::IRDataAttributes const&,std::shared_ptr<IR::IRData const> const&>(uint64_t *a1, const IR::IRDataAttributes *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  IR::IRDataAttributes *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v19;
  IR::IRDataAttributes *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  v4 = *a1;
  v5 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x186186186186186)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0xC30C30C30C30C3)
    v11 = 0x186186186186186;
  else
    v11 = v6;
  v23 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>>(v9, v11);
  else
    v12 = 0;
  v19 = v12;
  v20 = (IR::IRDataAttributes *)&v12[168 * v5];
  v22 = &v12[168 * v11];
  v13 = IR::IRDataAttributes::IRDataAttributes(v20, a2);
  *((_QWORD *)v13 + 19) = *a3;
  v14 = a3[1];
  *((_QWORD *)v13 + 20) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v21 = (char *)v13 + 168;
  std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__swap_out_circular_buffer(a1, &v19);
  v17 = a1[1];
  std::__split_buffer<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::~__split_buffer((uint64_t)&v19);
  return v17;
}

void sub_2105A8244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::vector<char>::__init_with_size[abi:ne180100]<char *,char *>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2105A82B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n)
{
  std::vector<char>::pointer end;
  char *v5;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v5 = &end[__n];
    bzero(end, __n);
    this->__end_ = v5;
  }
  return this;
}

void sub_2105A8324(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<IR::IRSphericalInterpolation,std::string>::at(uint64_t a1, int *a2)
{
  uint64_t *v2;
  int v3;
  int v4;

  v2 = *(uint64_t **)(a1 + 8);
  if (!v2)
LABEL_8:
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  v3 = *a2;
  while (1)
  {
    while (1)
    {
      v4 = *((_DWORD *)v2 + 8);
      if (v3 >= v4)
        break;
      v2 = (uint64_t *)*v2;
      if (!v2)
        goto LABEL_8;
    }
    if (v4 >= v3)
      return v2 + 5;
    v2 = (uint64_t *)v2[1];
    if (!v2)
      goto LABEL_8;
  }
}

void IR::IRDataWindow::description(IR::IRDataWindow *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  std::string *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  std::string v35;

  std::string::basic_string[abi:ne180100]<0>(&v29, "start: ");
  std::to_string(&v28, *(_DWORD *)this);
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v28;
  else
    v4 = (std::string *)v28.__r_.__value_.__r.__words[0];
  if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v28.__r_.__value_.__r.__words[2]);
  else
    size = v28.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v29, (const std::string::value_type *)v4, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v30, ", fade-in: ", 0xBuLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v27, *((_DWORD *)this + 1));
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v27;
  else
    v10 = (std::string *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  else
    v11 = v27.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v31, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v32, ", length: ", 0xAuLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v33.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v26, *((_DWORD *)this + 2));
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v26;
  else
    v16 = (std::string *)v26.__r_.__value_.__r.__words[0];
  if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v26.__r_.__value_.__r.__words[2]);
  else
    v17 = v26.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v33, (const std::string::value_type *)v16, v17);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v34.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v34.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  v20 = std::string::append(&v34, ", fade-out: ", 0xCuLL);
  v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v25, *((_DWORD *)this + 3));
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &v25;
  else
    v22 = (std::string *)v25.__r_.__value_.__r.__words[0];
  if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(v25.__r_.__value_.__r.__words[2]);
  else
    v23 = v25.__r_.__value_.__l.__size_;
  v24 = std::string::append(&v35, (const std::string::value_type *)v22, v23);
  *a2 = *v24;
  v24->__r_.__value_.__l.__size_ = 0;
  v24->__r_.__value_.__r.__words[2] = 0;
  v24->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_2105A8634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  uint64_t v52;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v52 - 57) < 0)
    operator delete(*(void **)(v52 - 80));
  if (*(char *)(v52 - 89) < 0)
    operator delete(*(void **)(v52 - 112));
  if (a21 < 0)
    operator delete(a16);
  if (*(char *)(v52 - 121) < 0)
    operator delete(*(void **)(v52 - 144));
  if (*(char *)(v52 - 153) < 0)
    operator delete(*(void **)(v52 - 176));
  if (a27 < 0)
    operator delete(a22);
  if (a52 < 0)
    operator delete(a47);
  if (a45 < 0)
    operator delete(a40);
  if (a33 < 0)
    operator delete(a28);
  if (a39 < 0)
    operator delete(a34);
  _Unwind_Resume(exception_object);
}

void sub_2105A8730()
{
  JUMPOUT(0x2105A8708);
}

void sub_2105A8738()
{
  JUMPOUT(0x2105A8718);
}

void IR::PersonalizedHRIRFetchingParams::description(IR::PersonalizedHRIRFetchingParams *this@<X0>, std::string *a2@<X8>)
{
  uint64_t i;
  uint64_t *v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string *v13;
  std::string::size_type size;
  std::string *v15;
  __int128 v16;
  std::string *v17;
  __int128 v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  _BYTE v28[8];
  char *v29;
  std::string v30;
  int v31;
  _QWORD v32[3];
  int v33;
  _QWORD v34[3];
  int v35;
  _QWORD v36[5];

  v36[4] = *MEMORY[0x24BDAC8D0];
  LODWORD(v30.__r_.__value_.__l.__data_) = 0;
  std::string::basic_string[abi:ne180100]<0>(&v30.__r_.__value_.__l.__size_, "kPersonalizedHRIRType_NoPersonalization");
  v31 = 1;
  std::string::basic_string[abi:ne180100]<0>(v32, "kPersonalizedHRIRType_General");
  v33 = 2;
  std::string::basic_string[abi:ne180100]<0>(v34, "kPersonalizedHRIRType_Movie");
  v35 = 3;
  std::string::basic_string[abi:ne180100]<0>(v36, "kPersonalizedHRIRType_NumTypes");
  std::map<PersonalizedHRIRType,std::string>::map[abi:ne180100]((uint64_t)v28, (int *)&v30, 4);
  for (i = 0; i != -16; i -= 4)
  {
    if (SHIBYTE(v36[i + 2]) < 0)
      operator delete((void *)v36[i]);
  }
  std::string::basic_string[abi:ne180100]<0>(&v24, "type: ");
  v5 = std::map<IR::IRSphericalInterpolation,std::string>::at((uint64_t)v28, (int *)this);
  v6 = *((char *)v5 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)v5;
  else
    v7 = (const std::string::value_type *)*v5;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)v5 + 23);
  else
    v8 = v5[1];
  v9 = std::string::append(&v24, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v11 = std::string::append(&v25, ", timeoutMS: ", 0xDuLL);
  v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v23, *((_DWORD *)this + 1));
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = &v23;
  else
    v13 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  else
    size = v23.__r_.__value_.__l.__size_;
  v15 = std::string::append(&v26, (const std::string::value_type *)v13, size);
  v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v16;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  v17 = std::string::append(&v27, ", allowExternalAPIAccess: ", 0x1AuLL);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v22, *((unsigned __int8 *)this + 8));
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v22;
  else
    v19 = (std::string *)v22.__r_.__value_.__r.__words[0];
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v20 = HIBYTE(v22.__r_.__value_.__r.__words[2]);
  else
    v20 = v22.__r_.__value_.__l.__size_;
  v21 = std::string::append(&v30, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy((uint64_t)v28, v29);
}

void sub_2105A8A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48,char *a49,uint64_t a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  if (a15 < 0)
    operator delete(__p);
  if (a56 < 0)
    operator delete(a51);
  if (a47 < 0)
    operator delete(a42);
  if (a21 < 0)
    operator delete(a16);
  if (a40 < 0)
    operator delete(a35);
  if (a33 < 0)
    operator delete(a28);
  if (a27 < 0)
    operator delete(a22);
  std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy((uint64_t)&a48, a49);
  _Unwind_Resume(a1);
}

void IR::FFTFilterOptimizationParameters::description(IR::FFTFilterOptimizationParameters *this@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string::size_type size;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  std::string *p_p;
  std::string::size_type v17;
  std::string *v18;
  std::string __p;
  std::string v20;
  std::string v21;
  std::string v22;
  std::string v23;
  std::string v24;
  std::string v25;
  std::string v26;

  std::string::basic_string[abi:ne180100]<0>(&v22, "absoluteThreshold: ");
  std::to_string(&v21, *(float *)this);
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v21;
  else
    v4 = (std::string *)v21.__r_.__value_.__r.__words[0];
  if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
  else
    size = v21.__r_.__value_.__l.__size_;
  v6 = std::string::append(&v22, (const std::string::value_type *)v4, size);
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v23.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  v8 = std::string::append(&v23, ", relativeThreshold: ", 0x15uLL);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v20, *((float *)this + 1));
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v20;
  else
    v10 = (std::string *)v20.__r_.__value_.__r.__words[0];
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  else
    v11 = v20.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v24, (const std::string::value_type *)v10, v11);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v25.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v25, ", maxNumBins: ", 0xEuLL);
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *((_DWORD *)this + 2));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v17 = __p.__r_.__value_.__l.__size_;
  v18 = std::string::append(&v26, (const std::string::value_type *)p_p, v17);
  *a2 = *v18;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
}

void sub_2105A8D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  if (a14 < 0)
    operator delete(__p);
  if (*(char *)(v45 - 41) < 0)
    operator delete(*(void **)(v45 - 64));
  if (*(char *)(v45 - 73) < 0)
    operator delete(*(void **)(v45 - 96));
  if (a20 < 0)
    operator delete(a15);
  if (a45 < 0)
    operator delete(a40);
  if (a38 < 0)
    operator delete(a33);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<IR::IRSphericalInterpolation,std::string>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::__emplace_hint_unique_key_args<IR::IRSphericalInterpolation,std::pair<IR::IRSphericalInterpolation const,std::string> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2105A8E48(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::__emplace_hint_unique_key_args<IR::IRSphericalInterpolation,std::pair<IR::IRSphericalInterpolation const,std::string> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::__find_equal<IR::IRSphericalInterpolation>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::__construct_node<std::pair<IR::IRSphericalInterpolation const,std::string> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::__find_equal<IR::IRSphericalInterpolation>(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::__construct_node<std::pair<IR::IRSphericalInterpolation const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2105A9114(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<IR::IRSphericalInterpolation,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<IR::IRSphericalInterpolation,std::string>,void *>>>::operator()[abi:ne180100](uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 63) < 0)
      operator delete(__p[5]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy(uint64_t a1, char *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy(a1, *(_QWORD *)a2);
    std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

uint64_t std::map<IR::IRDataType,std::string>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<IR::IRDataType,std::string>,std::__map_value_compare<IR::IRDataType,std::__value_type<IR::IRDataType,std::string>,std::less<IR::IRDataType>,true>,std::allocator<std::__value_type<IR::IRDataType,std::string>>>::__emplace_hint_unique_key_args<IR::IRDataType,std::pair<IR::IRDataType const,std::string> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2105A9230(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<IR::IRDataType,std::string>,std::__map_value_compare<IR::IRDataType,std::__value_type<IR::IRDataType,std::string>,std::less<IR::IRDataType>,true>,std::allocator<std::__value_type<IR::IRDataType,std::string>>>::__emplace_hint_unique_key_args<IR::IRDataType,std::pair<IR::IRDataType const,std::string> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::__find_equal<IR::IRSphericalInterpolation>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<IR::IRDataType,std::string>,std::__map_value_compare<IR::IRDataType,std::__value_type<IR::IRDataType,std::string>,std::less<IR::IRDataType>,true>,std::allocator<std::__value_type<IR::IRDataType,std::string>>>::__construct_node<std::pair<IR::IRDataType const,std::string> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<IR::IRDataType,std::string>,std::__map_value_compare<IR::IRDataType,std::__value_type<IR::IRDataType,std::string>,std::less<IR::IRDataType>,true>,std::allocator<std::__value_type<IR::IRDataType,std::string>>>::__construct_node<std::pair<IR::IRDataType const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2105A9354(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<IR::IRSphericalInterpolation,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

void std::__throw_out_of_range[abi:ne180100](const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  std::out_of_range::out_of_range[abi:ne180100](exception, a1);
}

void sub_2105A93AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *std::out_of_range::out_of_range[abi:ne180100](std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
  return result;
}

uint64_t std::map<PersonalizedHRIRType,std::string>::map[abi:ne180100](uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 32 * a3;
    do
    {
      std::__tree<std::__value_type<PersonalizedHRIRType,std::string>,std::__map_value_compare<PersonalizedHRIRType,std::__value_type<PersonalizedHRIRType,std::string>,std::less<PersonalizedHRIRType>,true>,std::allocator<std::__value_type<PersonalizedHRIRType,std::string>>>::__emplace_hint_unique_key_args<PersonalizedHRIRType,std::pair<PersonalizedHRIRType const,std::string> const&>((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 8;
      v6 -= 32;
    }
    while (v6);
  }
  return a1;
}

void sub_2105A9448(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<PersonalizedHRIRType,std::string>,std::__map_value_compare<PersonalizedHRIRType,std::__value_type<PersonalizedHRIRType,std::string>,std::less<PersonalizedHRIRType>,true>,std::allocator<std::__value_type<PersonalizedHRIRType,std::string>>>::__emplace_hint_unique_key_args<PersonalizedHRIRType,std::pair<PersonalizedHRIRType const,std::string> const&>(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;

  v6 = (uint64_t **)std::__tree<std::__value_type<IR::IRSphericalInterpolation,std::string>,std::__map_value_compare<IR::IRSphericalInterpolation,std::__value_type<IR::IRSphericalInterpolation,std::string>,std::less<IR::IRSphericalInterpolation>,true>,std::allocator<std::__value_type<IR::IRSphericalInterpolation,std::string>>>::__find_equal<IR::IRSphericalInterpolation>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    std::__tree<std::__value_type<PersonalizedHRIRType,std::string>,std::__map_value_compare<PersonalizedHRIRType,std::__value_type<PersonalizedHRIRType,std::string>,std::less<PersonalizedHRIRType>,true>,std::allocator<std::__value_type<PersonalizedHRIRType,std::string>>>::__construct_node<std::pair<PersonalizedHRIRType const,std::string> const&>((uint64_t)a1, a4, (uint64_t)&v8);
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v10, v6, v8);
    return v8;
  }
  return result;
}

void std::__tree<std::__value_type<PersonalizedHRIRType,std::string>,std::__map_value_compare<PersonalizedHRIRType,std::__value_type<PersonalizedHRIRType,std::string>,std::less<PersonalizedHRIRType>,true>,std::allocator<std::__value_type<PersonalizedHRIRType,std::string>>>::__construct_node<std::pair<PersonalizedHRIRType const,std::string> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::string *v7;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)a3 = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = *(_DWORD *)a2;
  v7 = (std::string *)(v6 + 40);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)(a2 + 8);
    v7->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
  }
  *(_BYTE *)(a3 + 16) = 1;
}

void sub_2105A956C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<IR::IRSphericalInterpolation,std::string>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_bEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_bEJEJEJRS6_S9_bEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_BYTE *)(a1 + 48) = *a4;
  return a1;
}

void sub_2105A95F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_bEEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_bEJEJEJRKS6_SA_RKbEEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSE_IJDpT2_EEEDpOT3_(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>((_QWORD *)(a1 + 24), *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  *(_BYTE *)(a1 + 48) = *a4;
  return a1;
}

void sub_2105A9684(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__emplace_back_slow_path<IR::IRDataAttributes&,std::shared_ptr<IR::IRData const> &>(uint64_t *a1, const IR::IRDataAttributes *a2, _QWORD *a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  IR::IRDataAttributes *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  char *v19;
  IR::IRDataAttributes *v20;
  char *v21;
  char *v22;
  uint64_t *v23;

  v4 = *a1;
  v5 = 0xCF3CF3CF3CF3CF3DLL * ((a1[1] - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x186186186186186)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v9 = (uint64_t)(a1 + 2);
  v10 = 0xCF3CF3CF3CF3CF3DLL * ((a1[2] - v4) >> 3);
  if (2 * v10 > v6)
    v6 = 2 * v10;
  if (v10 >= 0xC30C30C30C30C3)
    v11 = 0x186186186186186;
  else
    v11 = v6;
  v23 = a1 + 2;
  if (v11)
    v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>>(v9, v11);
  else
    v12 = 0;
  v19 = v12;
  v20 = (IR::IRDataAttributes *)&v12[168 * v5];
  v22 = &v12[168 * v11];
  v13 = IR::IRDataAttributes::IRDataAttributes(v20, a2);
  *((_QWORD *)v13 + 19) = *a3;
  v14 = a3[1];
  *((_QWORD *)v13 + 20) = v14;
  if (v14)
  {
    v15 = (unint64_t *)(v14 + 16);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v21 = (char *)v13 + 168;
  std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__swap_out_circular_buffer(a1, &v19);
  v17 = a1[1];
  std::__split_buffer<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::~__split_buffer((uint64_t)&v19);
  return v17;
}

void sub_2105A97D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

IR::HOA2BinauralIRRenderer *IR::HOA2BinauralIRRenderer::HOA2BinauralIRRenderer(IR::HOA2BinauralIRRenderer *this, const IR::IRDataAttributes *a2, const IR::IRDataAttributes *a3, int a4)
{
  _DWORD *v8;

  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  v8 = operator new(4uLL);
  *((_QWORD *)this + 3) = v8;
  *v8++ = 2;
  *((_QWORD *)this + 4) = v8;
  *((_QWORD *)this + 5) = v8;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_QWORD *)this + 14) = 0;
  IR::IRDataAttributes::IRDataAttributes((IR::HOA2BinauralIRRenderer *)((char *)this + 120), a3);
  IR::IRDataAttributes::IRDataAttributes((IR::HOA2BinauralIRRenderer *)((char *)this + 272), a2);
  *((_QWORD *)this + 54) = 0;
  *((_DWORD *)this + 110) = a4;
  *((_BYTE *)this + 460) = 1;
  *((_OWORD *)this + 29) = 0u;
  *((_OWORD *)this + 30) = 0u;
  *((_OWORD *)this + 31) = 0u;
  *((_OWORD *)this + 32) = 0u;
  *((_OWORD *)this + 33) = 0u;
  *((_OWORD *)this + 34) = 0u;
  *((_QWORD *)this + 70) = 0;
  *(_OWORD *)((char *)this + 584) = 0u;
  *(_OWORD *)((char *)this + 600) = 0u;
  *(_OWORD *)((char *)this + 616) = 0u;
  *(_OWORD *)((char *)this + 632) = 0u;
  *(_OWORD *)((char *)this + 648) = 0u;
  *(_OWORD *)((char *)this + 664) = 0u;
  *(_OWORD *)((char *)this + 680) = 0u;
  *(_OWORD *)((char *)this + 696) = 0u;
  *(_OWORD *)((char *)this + 712) = 0u;
  *(_OWORD *)((char *)this + 728) = 0u;
  *(_OWORD *)((char *)this + 744) = 0u;
  *((_QWORD *)this + 95) = 0;
  *((_QWORD *)this + 106) = 0;
  *((_OWORD *)this + 51) = 0u;
  *((_OWORD *)this + 52) = 0u;
  *((_OWORD *)this + 49) = 0u;
  *((_OWORD *)this + 50) = 0u;
  return this;
}

unsigned int *std::vector<IR::IRCoordinateType>::__insert_with_size[abi:ne180100]<std::__wrap_iter<IR::IRCoordinateType*>,std::__wrap_iter<IR::IRCoordinateType*>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v7;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *v10;
  unsigned int *value;
  unint64_t v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__split_buffer<unsigned int> __v;

  v5 = (unsigned int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (unsigned int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2105A9A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned int *std::vector<IR::IRInterpolationMethod>::__insert_with_size[abi:ne180100]<std::__wrap_iter<IR::IRInterpolationMethod*>,std::__wrap_iter<IR::IRInterpolationMethod*>>(std::vector<unsigned int> *a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unsigned int *v5;
  unsigned int *v7;
  std::allocator<unsigned int> *p_end_cap;
  unsigned int *v10;
  unsigned int *value;
  unint64_t v12;
  std::vector<unsigned int>::pointer begin;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned int v31;
  std::__split_buffer<unsigned int> __v;

  v5 = (unsigned int *)__dst;
  if (a5 < 1)
    return v5;
  v7 = (unsigned int *)__src;
  value = a1->__end_cap_.__value_;
  p_end_cap = (std::allocator<unsigned int> *)&a1->__end_cap_;
  v10 = value;
  v12 = *((_QWORD *)p_end_cap - 1);
  if (a5 > (uint64_t)((uint64_t)value - v12) >> 2)
  {
    begin = a1->__begin_;
    v14 = a5 + ((uint64_t)(v12 - (unint64_t)a1->__begin_) >> 2);
    if (v14 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)begin) >> 2;
    v16 = (char *)v10 - (char *)begin;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    __v.__end_cap_.__value_ = p_end_cap;
    if (v17)
      v18 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)p_end_cap, v17);
    else
      v18 = 0;
    v28 = &v18[v15];
    __v.__first_ = v18;
    __v.__begin_ = v28;
    __v.__end_cap_.__value_ = &v18[v17];
    v29 = 4 * a5;
    v30 = &v28[a5];
    do
    {
      v31 = *v7++;
      *v28++ = v31;
      v29 -= 4;
    }
    while (v29);
    __v.__end_ = v30;
    v5 = std::vector<int>::__swap_out_circular_buffer(a1, &__v, v5);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = (unsigned int *)*((_QWORD *)p_end_cap - 1);
LABEL_17:
    v24 = &v5[a5];
    v25 = &v23[-a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *v25++;
        *v26++ = v27;
      }
      while ((unint64_t)v25 < v12);
    }
    a1->__end_ = v26;
    if (v23 != v24)
      memmove(&v23[-(v23 - v24)], v5, (char *)v23 - (char *)v24);
    if (v21 != (char *)v7)
      memmove(v5, v7, v21 - (char *)v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*((void **)p_end_cap - 1), &__src[4 * v20], a4 - v21);
  v23 = (unsigned int *)(v12 + v22);
  a1->__end_ = (std::vector<unsigned int>::pointer)(v12 + v22);
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2105A9C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<float>::__insert_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  char *v5;
  char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  void *__p;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;

  v5 = (char *)__dst;
  if (a5 < 1)
    return v5;
  v7 = __src;
  v11 = *(_QWORD *)(a1 + 16);
  v9 = a1 + 16;
  v10 = v11;
  v12 = *(_QWORD *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 2)
  {
    v13 = *(void **)a1;
    v14 = a5 + ((uint64_t)(v12 - *(_QWORD *)a1) >> 2);
    if (v14 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v15 = (__dst - (uint64_t)v13) >> 2;
    v16 = v10 - (_QWORD)v13;
    if (v16 >> 1 > v14)
      v14 = v16 >> 1;
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v14;
    v37 = v9;
    if (v17)
      v18 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>(v9, v17);
    else
      v18 = 0;
    v28 = &v18[4 * v15];
    __p = v18;
    v34 = v28;
    v36 = &v18[4 * v17];
    v29 = 4 * a5;
    v30 = &v28[4 * a5];
    do
    {
      v31 = *(_DWORD *)v7;
      v7 += 4;
      *(_DWORD *)v28 = v31;
      v28 += 4;
      v29 -= 4;
    }
    while (v29);
    v35 = v30;
    v5 = std::vector<float>::__swap_out_circular_buffer((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34)
      v35 += (v34 - v35 + 3) & 0xFFFFFFFFFFFFFFFCLL;
    if (__p)
      operator delete(__p);
    return v5;
  }
  v19 = v12 - __dst;
  v20 = (uint64_t)(v12 - __dst) >> 2;
  if (v20 >= a5)
  {
    v21 = &__src[4 * a5];
    v23 = *(char **)(v9 - 8);
LABEL_17:
    v24 = &v5[4 * a5];
    v25 = &v23[-4 * a5];
    v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      v26 = v23;
      do
      {
        v27 = *(_DWORD *)v25;
        v25 += 4;
        *(_DWORD *)v26 = v27;
        v26 += 4;
      }
      while ((unint64_t)v25 < v12);
    }
    *(_QWORD *)(a1 + 8) = v26;
    if (v23 != v24)
      memmove(&v23[-4 * ((v23 - v24) >> 2)], v5, v23 - v24);
    if (v21 != v7)
      memmove(v5, v7, v21 - v7);
    return v5;
  }
  v21 = &__src[4 * v20];
  v22 = a4 - v21;
  if (a4 != v21)
    memmove(*(void **)(v9 - 8), &__src[4 * v20], a4 - v21);
  v23 = (char *)(v12 + v22);
  *(_QWORD *)(a1 + 8) = v12 + v22;
  if (v19 >= 1)
    goto LABEL_17;
  return v5;
}

void sub_2105A9EA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<float *>::vector(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vallocate[abi:ne180100](a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_2105A9F3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void IR::HOA2BinauralIRRenderer::~HOA2BinauralIRRenderer(vDSP_DFT_Setup *this)
{
  vDSP_DFT_SetupStruct *v2;
  vDSP_DFT_SetupStruct *v3;
  vDSP_DFT_SetupStruct *v4;
  vDSP_DFT_SetupStruct *v5;
  vDSP_DFT_SetupStruct *v6;
  vDSP_DFT_SetupStruct *v7;
  uint64_t v8;
  vDSP_DFT_SetupStruct *v9;
  vDSP_DFT_SetupStruct *v10;
  vDSP_DFT_SetupStruct *v11;
  vDSP_DFT_SetupStruct *v12;
  vDSP_DFT_SetupStruct *v13;
  vDSP_DFT_Setup v14;
  void **v15;

  vDSP_DFT_DestroySetup(this[73]);
  vDSP_DFT_DestroySetup(this[74]);
  v2 = this[104];
  if (v2)
  {
    this[105] = v2;
    operator delete(v2);
  }
  v15 = (void **)(this + 101);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)(this + 98);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v3 = this[93];
  if (v3)
  {
    this[94] = v3;
    operator delete(v3);
  }
  v4 = this[90];
  if (v4)
  {
    this[91] = v4;
    operator delete(v4);
  }
  v5 = this[87];
  if (v5)
  {
    this[88] = v5;
    operator delete(v5);
  }
  v15 = (void **)(this + 84);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)(this + 81);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)(this + 78);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v15 = (void **)(this + 75);
  std::vector<std::vector<std::vector<float>>>::__destroy_vector::operator()[abi:ne180100](&v15);
  v6 = this[68];
  if (v6)
  {
    this[69] = v6;
    operator delete(v6);
  }
  v7 = this[65];
  if (v7)
  {
    this[66] = v7;
    operator delete(v7);
  }
  v8 = (uint64_t)this[64];
  this[64] = 0;
  if (v8)
    std::default_delete<HOA::RotationMatrix>::operator()[abi:ne180100]((uint64_t)(this + 64), v8);
  v9 = this[61];
  if (v9)
  {
    this[62] = v9;
    operator delete(v9);
  }
  v15 = (void **)(this + 58);
  std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v15);
  std::unique_ptr<HOA>::reset[abi:ne180100](this + 54, 0);
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 34));
  IR::IRDataAttributes::~IRDataAttributes((IR::IRDataAttributes *)(this + 15));
  v10 = this[12];
  if (v10)
  {
    this[13] = v10;
    operator delete(v10);
  }
  v11 = this[9];
  if (v11)
  {
    this[10] = v11;
    operator delete(v11);
  }
  v12 = this[6];
  if (v12)
  {
    this[7] = v12;
    operator delete(v12);
  }
  v13 = this[3];
  if (v13)
  {
    this[4] = v13;
    operator delete(v13);
  }
  v14 = *this;
  if (*this)
  {
    this[1] = v14;
    operator delete(v14);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(BOOL,BOOL)>>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(BOOL,BOOL)>>,0>(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::destroy(uint64_t a1, _QWORD *a2)
{
  void *v4;

  if (a2)
  {
    std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::destroy(a1, a2[1]);
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    operator delete(a2);
  }
}

uint64_t std::allocate_shared[abi:ne180100]<IR::IRData,std::allocator<IR::IRData>,std::vector<std::vector<float>> const&,std::vector<std::vector<float>> const&,std::vector<IR::IRCoordinateType> const&,std::vector<std::vector<float>> const&,float &,unsigned int &,std::vector<float> const&,std::vector<IR::IRInterpolationMethod> const&,applesauce::CF::DictionaryRef const&,std::string const&,unsigned int &,BOOL &,unsigned int &,IR::IRSphericalInterpolation &,std::vector<float> const&,void>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, float *a5@<X5>, unsigned int *a6@<X6>, uint64_t a7@<X7>, _QWORD *a8@<X8>, uint64_t a9, const void **a10, uint64_t a11, unsigned int *a12, unsigned __int8 *a13, int *a14, int *a15, uint64_t *a16)
{
  char *v23;
  uint64_t result;

  v23 = (char *)operator new(0x20uLL);
  result = std::__shared_ptr_emplace<IR::IRData>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::vector<float>> const&,std::vector<std::vector<float>> const&,std::vector<IR::IRCoordinateType> const&,std::vector<std::vector<float>> const&,float &,unsigned int &,std::vector<float> const&,std::vector<IR::IRInterpolationMethod> const&,applesauce::CF::DictionaryRef const&,std::string const&,unsigned int &,BOOL &,unsigned int &,IR::IRSphericalInterpolation &,std::vector<float> const&,std::allocator<IR::IRData>,0>((uint64_t)v23, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15, a16);
  *a8 = v23 + 24;
  a8[1] = v23;
  return result;
}

void sub_2105AA338(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<IR::IRData>::__shared_ptr_emplace[abi:ne180100]<std::vector<std::vector<float>> const&,std::vector<std::vector<float>> const&,std::vector<IR::IRCoordinateType> const&,std::vector<std::vector<float>> const&,float &,unsigned int &,std::vector<float> const&,std::vector<IR::IRInterpolationMethod> const&,applesauce::CF::DictionaryRef const&,std::string const&,unsigned int &,BOOL &,unsigned int &,IR::IRSphericalInterpolation &,std::vector<float> const&,std::allocator<IR::IRData>,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, float *a6, unsigned int *a7, uint64_t a8, uint64_t a9, const void **a10, uint64_t a11, unsigned int *a12, unsigned __int8 *a13, int *a14, int *a15, uint64_t *a16)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24CA2CA38;
  *(_QWORD *)(a1 + 8) = 0;
  IR::IRData::IRData((IR::IRData::Implementation **)(a1 + 24), a2, a3, a4, a5, *a7, a8, a9, *a6, a10, a11, *a12, *a13, *a14, *a15, a16);
  return a1;
}

void sub_2105AA3D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<IR::IRData>::shared_ptr[abi:ne180100]<IR::IRData,void>(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &unk_24CA2CAE0;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  return a1;
}

void sub_2105AA448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<IR::IRData>::reset[abi:ne180100]((IR::IRData::Implementation ***)va, 0);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<IR::IRData *,std::shared_ptr<IR::IRData>::__shared_ptr_default_delete<IR::IRData,IR::IRData>,std::allocator<IR::IRData>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

IR::IRData::Implementation **std::__shared_ptr_pointer<IR::IRData *,std::shared_ptr<IR::IRData>::__shared_ptr_default_delete<IR::IRData,IR::IRData>,std::allocator<IR::IRData>>::__on_zero_shared(uint64_t a1)
{
  IR::IRData::Implementation **result;

  result = *(IR::IRData::Implementation ***)(a1 + 24);
  if (result)
  {
    IR::IRData::~IRData(result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

IR::IRData::Implementation **std::unique_ptr<IR::IRData>::reset[abi:ne180100](IR::IRData::Implementation ***a1, IR::IRData::Implementation **a2)
{
  IR::IRData::Implementation **result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IR::IRData::~IRData(result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

void std::__function::__func<std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

__n128 std::__function::__func<std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>>,void ()(BOOL)>::__clone(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_24CA2D220;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>>,void ()(BOOL)>::__clone(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24CA2D220;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>,std::allocator<std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  return std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>::operator()[abi:ne180100]<BOOL>(a1 + 8, a2);
}

uint64_t std::__bind<void (IR::IRDataLoader::Implementation::*)(BOOL,BOOL),IR::IRDataLoader::Implementation*,BOOL,std::placeholders::__ph<1> const&>::operator()[abi:ne180100]<BOOL>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t (*v3)(_QWORD *, _QWORD, _QWORD);
  _QWORD *v4;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))a1;
  v4 = (_QWORD *)(*(_QWORD *)(a1 + 16) + (v2 >> 1));
  if ((v2 & 1) != 0)
    v3 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD))(*v4 + v3);
  return v3(v4, *(unsigned __int8 *)(a1 + 24), *a2);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

unint64_t std::__string_hash<char>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100]((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::operator()[abi:ne180100](uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](a2, a3);
  }
  else
  {
    return std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](a2, a3);
  }
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_0_to_16[abi:ne180100](_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_17_to_32[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t std::__murmur2_or_cityhash<unsigned long,64ul>::__hash_len_33_to_64[abi:ne180100](_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t std::equal_to<std::string>::operator()[abi:ne180100](uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v8 = (_QWORD *)(a1 + 24);
  v9 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v10, a4, (uint64_t)v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v11 || (float)(v18 * (float)v11) < v17)
  {
    v19 = 1;
    if (v11 >= 3)
      v19 = (v11 & (v11 - 1)) != 0;
    v20 = v19 | (2 * v11);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__rehash<true>(a1, v22);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v24 >= v11)
          v24 %= v11;
      }
      else
      {
        v24 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v8;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_2105AAE7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[8] = 0;
  *(_BYTE *)(a4 + 16) = 1;
}

void sub_2105AAF18(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__do_rehash<true>(a1, prime);
  }
}

void std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::function<void ()(BOOL,BOOL)>>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

_QWORD *std::__function::__value_func<void ()(BOOL,BOOL)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2105AB310(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

_QWORD *std::__call_once_proxy[abi:ne180100]<std::tuple<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0 &&>>(uint64_t ***a1)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v3;
  _QWORD v4[3];
  _QWORD *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = ***a1;
  v4[0] = &off_24CA2D268;
  v4[1] = v1;
  v5 = v4;
  IR::PersonalizedIRData::RegisterObservers((uint64_t *)(v1 + 160), (uint64_t)v4, 1);
  result = v5;
  if (v5 == v4)
  {
    v3 = 4;
    result = v4;
  }
  else
  {
    if (!v5)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void sub_2105AB3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v14;
  uint64_t v15;

  v14 = a13;
  if (a13 == &a10)
  {
    v15 = 4;
    v14 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void std::__function::__func<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24CA2D268;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24CA2D268;
  a2[1] = v2;
  return result;
}

void std::__function::__func<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(BOOL)#1},std::allocator<IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::$_0::operator() const(void)::{lambda(BOOL)#1}>,void ()(BOOL)>::operator()(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  IR::IRDataLoader::Implementation *v3;

  v2 = *a2;
  v3 = *(IR::IRDataLoader::Implementation **)(a1 + 8);
  atomic_store(1u, IR::IRDataLoader::Implementation::addPersonalizedHRTFListenerCallback(std::string,std::function<void ()(BOOL,BOOL)>)::sCalledOnce);
  if (v2)
    IR::IRDataLoader::Implementation::rebuildPersonalizedHRTFCache(v3);
  else
    IR::IRDataLoader::Implementation::executePersonalizedHRTFListenerCallbacks(v3, 0, 1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  _BYTE v4[24];

  result = std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::function<void ()(BOOL,BOOL)>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

uint64_t *std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  uint64_t *v11;

  v6 = (uint64_t **)(a1 + 8);
  v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(a1, a4, (uint64_t)&v11);
    std::__tree<int>::__insert_node_at((uint64_t **)a1, (uint64_t)v8, v6, v11);
    return v11;
  }
  return (uint64_t *)v8;
}

std::vector<char> *std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>@<X0>(uint64_t a1@<X0>, _DWORD **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  std::vector<char> *result;
  std::vector<char>::pointer begin;
  std::vector<char>::value_type __x;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  *((_DWORD *)v6 + 8) = **a2;
  __x = 0;
  result = std::vector<char>::vector((std::vector<char> *)(v6 + 40), 0x20uLL, &__x);
  begin = result->__begin_;
  *(_QWORD *)begin = 0;
  *((_DWORD *)begin + 2) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_2105AB858(_Unwind_Exception *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,CA::ChannelLayout>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

std::vector<char> *__cdecl std::vector<char>::vector(std::vector<char> *this, std::vector<char>::size_type __n, const std::vector<char>::value_type *__x)
{
  std::vector<char>::size_type v5;
  std::vector<char>::pointer end;
  char *v7;

  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  if (__n)
  {
    v5 = __n;
    std::vector<unsigned char>::__vallocate[abi:ne180100](this, __n);
    end = this->__end_;
    v7 = &end[v5];
    do
    {
      *end++ = *__x;
      --v5;
    }
    while (v5);
    this->__end_ = v7;
  }
  return this;
}

void sub_2105AB8D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,CA::ChannelLayout>,void *>>>::operator()[abi:ne180100](uint64_t a1, _QWORD *__p)
{
  void *v3;

  if (*(_BYTE *)(a1 + 8))
  {
    v3 = (void *)__p[5];
    if (v3)
    {
      __p[6] = v3;
      operator delete(v3);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t **std::__tree<std::__value_type<unsigned int,CA::ChannelLayout>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,CA::ChannelLayout>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,CA::ChannelLayout>>>::__emplace_unique_key_args<unsigned int,std::pair<unsigned int const,CA::ChannelLayout>>(uint64_t **a1, unsigned int *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  unsigned int v7;
  uint64_t **v8;
  unsigned int v9;
  char *v10;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (char *)operator new(0x40uLL);
    *((_DWORD *)v10 + 8) = *(_DWORD *)a3;
    *(_OWORD *)(v10 + 40) = *(_OWORD *)(a3 + 8);
    *((_QWORD *)v10 + 7) = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    std::__tree<int>::__insert_node_at(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

_QWORD *std::allocate_shared[abi:ne180100]<IR::IRData,std::allocator<IR::IRData>,IR::IRDataAttributes &,applesauce::CF::DataRef &,std::vector<float> const&,void>@<X0>(uint64_t a1@<X1>, CFTypeRef *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *result;

  v8 = operator new(0x20uLL);
  result = std::__shared_ptr_emplace<IR::IRData>::__shared_ptr_emplace[abi:ne180100]<IR::IRDataAttributes &,applesauce::CF::DataRef &,std::vector<float> const&,std::allocator<IR::IRData>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  return result;
}

void sub_2105ABA68(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<IR::IRData>::__shared_ptr_emplace[abi:ne180100]<IR::IRDataAttributes &,applesauce::CF::DataRef &,std::vector<float> const&,std::allocator<IR::IRData>,0>(_QWORD *a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  a1[2] = 0;
  *a1 = &unk_24CA2CA38;
  a1[1] = 0;
  std::construct_at[abi:ne180100]<IR::IRData,IR::IRDataAttributes &,applesauce::CF::DataRef &,std::vector<float> const&,IR::IRData*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_2105ABAB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<IR::IRData,IR::IRDataAttributes &,applesauce::CF::DataRef &,std::vector<float> const&,IR::IRData*>(uint64_t a1, uint64_t a2, CFTypeRef *a3, uint64_t a4)
{
  CFTypeRef v7;
  CFTypeRef cf;

  v7 = *a3;
  if (*a3)
    CFRetain(*a3);
  cf = v7;
  IR::IRData::IRData(a1, a2, &cf, a4);
  if (cf)
    CFRelease(cf);
  return a1;
}

void sub_2105ABB3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::DataRef::~DataRef((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t std::allocate_shared[abi:ne180100]<IR::IRData,std::allocator<IR::IRData>,float,unsigned int,unsigned int &,float,BOOL &,unsigned int,unsigned int,unsigned int,std::vector<IR::IRCoordinateType> &,std::vector<float> &,std::vector<IR::IRInterpolationMethod> &,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,void>@<X0>(float *a1@<X1>, int *a2@<X2>, int *a3@<X3>, float *a4@<X4>, unsigned __int8 *a5@<X5>, int *a6@<X6>, int *a7@<X7>, _QWORD *a8@<X8>, int *a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, const void **a14, CFTypeRef *a15)
{
  char *v23;
  uint64_t result;

  v23 = (char *)operator new(0x20uLL);
  result = std::__shared_ptr_emplace<IR::IRData>::__shared_ptr_emplace[abi:ne180100]<float,unsigned int,unsigned int &,float,BOOL &,unsigned int,unsigned int,unsigned int,std::vector<IR::IRCoordinateType> &,std::vector<float> &,std::vector<IR::IRInterpolationMethod> &,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,std::allocator<IR::IRData>,0>((uint64_t)v23, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11, a12, a13, a14, a15);
  *a8 = v23 + 24;
  a8[1] = v23;
  return result;
}

void sub_2105ABC18(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<IR::IRData>::__shared_ptr_emplace[abi:ne180100]<float,unsigned int,unsigned int &,float,BOOL &,unsigned int,unsigned int,unsigned int,std::vector<IR::IRCoordinateType> &,std::vector<float> &,std::vector<IR::IRInterpolationMethod> &,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,std::allocator<IR::IRData>,0>(uint64_t a1, float *a2, int *a3, int *a4, float *a5, unsigned __int8 *a6, int *a7, int *a8, int *a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, const void **a14, CFTypeRef *a15)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &unk_24CA2CA38;
  *(_QWORD *)(a1 + 8) = 0;
  std::construct_at[abi:ne180100]<IR::IRData,float,unsigned int,unsigned int &,float,BOOL &,unsigned int,unsigned int,unsigned int,std::vector<IR::IRCoordinateType> &,std::vector<float> &,std::vector<IR::IRInterpolationMethod> &,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,IR::IRData*>((IR::IRData::Implementation **)(a1 + 24), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  return a1;
}

void sub_2105ABC84(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

IR::IRData::Implementation **std::construct_at[abi:ne180100]<IR::IRData,float,unsigned int,unsigned int &,float,BOOL &,unsigned int,unsigned int,unsigned int,std::vector<IR::IRCoordinateType> &,std::vector<float> &,std::vector<IR::IRInterpolationMethod> &,IR::IRSphericalInterpolation,applesauce::CF::DictionaryRef,applesauce::CF::DictionaryRef,IR::IRData*>(IR::IRData::Implementation **a1, float *a2, int *a3, int *a4, float *a5, unsigned __int8 *a6, int *a7, int *a8, int *a9, uint64_t a10, uint64_t a11, uint64_t a12, int *a13, const void **a14, CFTypeRef *a15)
{
  float v16;
  int v17;
  int v18;
  float v19;
  unsigned __int8 v20;
  int v21;
  int v22;
  int v23;
  int v24;
  const void *v25;
  CFTypeRef v27;
  CFTypeRef v28;

  v16 = *a2;
  v17 = *a3;
  v18 = *a4;
  v19 = *a5;
  v20 = *a6;
  v21 = *a7;
  v22 = *a8;
  v23 = *a9;
  v24 = *a13;
  v25 = *a14;
  *a14 = 0;
  v27 = *a15;
  v28 = v25;
  *a15 = 0;
  IR::IRData::IRData(a1, v17, v18, v20, v21, v22, v23, a10, v16, v19, a11, a12, v24, &v28, &v27);
  if (v27)
    CFRelease(v27);
  if (v28)
    CFRelease(v28);
  return a1;
}

void sub_2105ABD44(_Unwind_Exception *a1)
{
  uint64_t v1;

  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v1 - 32));
  applesauce::CF::DictionaryRef::~DictionaryRef((const void **)(v1 - 24));
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],float const&>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105ABDEC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],float const&>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105ABEB4(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[1],int>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105ABF7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[13],long &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  CFNumberRef v5;
  void *exception;
  uint64_t valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105AC044(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[11],float &>(applesauce::CF::TypeRef *a1, char *a2, int *a3)
{
  CFNumberRef v5;
  void *exception;
  int valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105AC10C(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],std::string>(applesauce::CF::TypeRef *a1, char *a2, uint64_t a3)
{
  int v5;
  const UInt8 *v6;
  CFIndex v7;
  CFStringRef v8;
  void *exception;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = (const UInt8 *)a3;
  else
    v6 = *(const UInt8 **)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = CFStringCreateWithBytes(0, v6, v7, 0x8000100u, 0);
  *((_QWORD *)a1 + 1) = v8;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105AC1E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[20],long &>(applesauce::CF::TypeRef *a1, char *a2, uint64_t *a3)
{
  CFNumberRef v5;
  void *exception;
  uint64_t valuePtr;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  valuePtr = *a3;
  v5 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *((_QWORD *)a1 + 1) = v5;
  if (!v5)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105AC2A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[9],applesauce::CF::DictionaryRef const>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[12],std::string const&>(applesauce::CF::TypeRef *a1, char *a2, uint64_t a3)
{
  int v5;
  const UInt8 *v6;
  CFIndex v7;
  CFStringRef v8;
  void *exception;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *(char *)(a3 + 23);
  if (v5 >= 0)
    v6 = (const UInt8 *)a3;
  else
    v6 = *(const UInt8 **)a3;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a3 + 23);
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = CFStringCreateWithBytes(0, v6, v7, 0x8000100u, 0);
  *((_QWORD *)a1 + 1) = v8;
  if (!v8)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105AC3BC(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  applesauce::CF::TypeRef::~TypeRef((const void **)v1);
  _Unwind_Resume(a1);
}

applesauce::CF::TypeRef *applesauce::CF::TypeRefPair::TypeRefPair<char const(&)[18],applesauce::CF::DictionaryRef const>(applesauce::CF::TypeRef *a1, char *a2, const void **a3)
{
  const void *v5;

  applesauce::CF::TypeRef::TypeRef(a1, a2);
  v5 = *a3;
  if (v5)
    CFRetain(v5);
  *((_QWORD *)a1 + 1) = v5;
  return a1;
}

IR::IRDataLoader::Implementation *std::unique_ptr<IR::IRDataLoader::Implementation>::reset[abi:ne180100](IR::IRDataLoader::Implementation **a1, IR::IRDataLoader::Implementation *a2)
{
  IR::IRDataLoader::Implementation *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IR::IRDataLoader::Implementation::~Implementation(result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

IR::IRDataLoader::Implementation *IR::IRDataLoader::Implementation::Implementation(IR::IRDataLoader::Implementation *this)
{
  void *__p[2];
  char v4;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  MEMORY[0x212BC77E4]((char *)this + 24);
  MEMORY[0x212BC77E4]((char *)this + 88);
  *((_BYTE *)this + 152) = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "IRDataLoader");
  IR::PersonalizedIRData::PersonalizedIRData((char *)this + 160, __p);
  if (v4 < 0)
    operator delete(__p[0]);
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *((_DWORD *)this + 50) = 1065353216;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 26) = (char *)this + 216;
  return this;
}

void sub_2105AC518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::recursive_mutex *v15;
  std::recursive_mutex *v16;

  if (a15 < 0)
    operator delete(__p);
  std::recursive_mutex::~recursive_mutex(v16);
  std::recursive_mutex::~recursive_mutex(v15);
  std::vector<std::pair<IR::IRDataAttributes,std::weak_ptr<IR::IRData const>>>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void OUTLINED_FUNCTION_1_1(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_6_0(std::__shared_weak_count *this)
{
  std::__shared_weak_count::__release_weak(this);
}

uint64_t OUTLINED_FUNCTION_8_0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t IR::MatrixResampler<float>::MatrixResampler(uint64_t a1, unsigned int a2, float a3, float a4)
{
  uint64_t v6;
  std::logic_error *exception;

  IR::DataResampler<float>::DataResampler(a1, a2, a3, a4);
  *(_QWORD *)v6 = &off_24CA2D2B0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = 0;
  *(_DWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 68) = 0x1400000005;
  if (a2 <= 2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Invalid input length, must be > 2)");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  }
  return a1;
}

void sub_2105AC670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  _QWORD *v10;
  void *v12;

  v12 = *a10;
  if (*a10)
  {
    v10[6] = v12;
    operator delete(v12);
  }
  IR::DataResampler<float>::~DataResampler(v10);
  _Unwind_Resume(a1);
}

uint64_t IR::MatrixResampler<float>::Initialize(uint64_t a1, unsigned int a2, int a3, long double a4)
{
  float v4;
  uint64_t v5;
  unsigned int v6;
  _DWORD *v7;
  float v8;
  unsigned int v9;
  unsigned int *v10;
  vDSP_Length __P;
  unsigned int v12;
  double v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v17;
  _DWORD *v18;
  unint64_t v19;
  float v20;
  unint64_t v21;
  unint64_t v22;
  float *v23;
  unint64_t v24;
  float *v25;
  float *v26;
  float v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  vDSP_Length v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  vDSP_Length v35;
  DSPComplex *v36;
  float v37;
  float v38;
  unsigned int v39;
  unsigned int i;
  float v41;
  float v42;
  unsigned int v43;
  unsigned int v44;
  vDSP_DFT_SetupStruct *Setup;
  float *v46;
  float *v47;
  float *v48;
  float *v49;
  float *v50;
  float *v51;
  float *v52;
  float *v53;
  unsigned int v54;
  unsigned int v55;
  float v56;
  unint64_t v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  const vDSP_DFT_SetupStruct *__Setup;
  vDSP_Length __N;
  vDSP_Length v70;
  DSPSplitComplex v71;
  DSPSplitComplex v72;
  DSPSplitComplex v73;
  float *v74;
  float *v75;
  float *v76;
  float *v77;
  float *v78;
  float *v79;
  float *v80;
  float *v81;
  DSPSplitComplex v82;
  DSPSplitComplex __Z;
  float *__Oi[3];
  float *__C[3];
  DSPSplitComplex v86;
  void *v87[3];
  void *__B[3];
  float *__A;
  float *v90;
  float *v91;
  float *v92;
  float *v93;
  float *v94;

  v4 = *(float *)&a4;
  v5 = 0;
  v7 = (_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 8);
  v8 = *(float *)(a1 + 16) / *(float *)(a1 + 12);
  v9 = a3 + a2 + vcvtps_u32_f32(v8 * (float)v6);
  *(_DWORD *)(a1 + 64) = v9;
  *(_DWORD *)(a1 + 68) = a2;
  v10 = (unsigned int *)(a1 + 64);
  *(_DWORD *)(a1 + 72) = a3;
  LODWORD(__P) = 15728640;
  do
  {
    v12 = __P;
    LODWORD(a4) = dword_2105DE030[v5];
    v13 = (double)*(unint64_t *)&a4;
    v14 = 4;
    do
    {
      a4 = exp2((double)v14) * v13;
      v15 = a4;
    }
    while (v9 + 256 > a4 && v14++ < 0x14);
    if (v15 >= v12)
      __P = v12;
    else
      __P = v15;
    ++v5;
  }
  while (v5 != 4);
  if (__P <= 0xF)
    IR::MatrixResampler<float>::Initialize();
  v17 = __P >> 1;
  if (v6 >= v9)
    v18 = v7;
  else
    v18 = v10;
  v19 = (*v18 * __P);
  LODWORD(v91) = 0;
  std::vector<float>::vector(&v93, v19, &v91);
  LODWORD(__A) = 0;
  std::vector<float>::vector(&v91, __P >> 1, &__A);
  v20 = (float)__P;
  LODWORD(__A) = 0;
  *(float *)__B = v8 / (float)__P;
  vDSP_vramp((const float *)&__A, (const float *)__B, v91, 1, v92 - v91);
  v21 = *v7;
  LODWORD(__B[0]) = 0;
  std::vector<float>::vector(&__A, v21, __B);
  LODWORD(__B[0]) = 0;
  LODWORD(v87[0]) = -1060565029;
  vDSP_vramp((const float *)__B, (const float *)v87, __A, 1, v90 - __A);
  vDSP_mmul(v91, 1, __A, 1, v93, 1, __P >> 1, *v7, 1uLL);
  if (v8 > 1.0)
  {
    if (v92 == v91)
    {
      v23 = v92;
    }
    else
    {
      v22 = v92 - v91;
      v23 = v91;
      do
      {
        v24 = v22 >> 1;
        v25 = &v23[v22 >> 1];
        v27 = *v25;
        v26 = v25 + 1;
        v22 += ~(v22 >> 1);
        if (v27 > 0.5)
          v22 = v24;
        else
          v23 = v26;
      }
      while (v22);
    }
    if (v92 == v23)
    {
      v64 = 0;
      goto LABEL_66;
    }
    v28 = *v7 * ((unint64_t)((char *)v23 - (char *)v91) >> 2);
    vDSP_vclr(&v93[v28], 1, v94 - v93 - v28);
  }
  v29 = *v7 * v17;
  LODWORD(v87[0]) = 0;
  std::vector<float>::vector(__B, (2 * v29), v87);
  LODWORD(__C[0]) = 0;
  std::vector<float>::vector(v87, (2 * v29), __C);
  LODWORD(__C[0]) = v29;
  vvsincosf((float *)v87[0], (float *)__B[0], v93, (const int *)__C);
  v30 = *v7;
  __N = __P >> 1;
  v70 = v17 + 1;
  v31 = v17 - 1;
  if (v17 != 1)
  {
    v32 = v30 * (v17 + 1);
    v33 = v17 - 1;
    v34 = v30 * v31;
    do
    {
      memcpy((char *)__B[0] + 4 * v32, (char *)__B[0] + 4 * v34, 4 * v30);
      v35 = *v7;
      LODWORD(__C[0]) = -1082130432;
      vDSP_vsmul((const float *)v87[0] + v34, 1, (const float *)__C, (float *)v87[0] + v32, 1, v35);
      v30 = *v7;
      v34 -= *v7;
      v32 += *v7;
      --v33;
    }
    while (v33);
  }
  v86.realp = (float *)__B[0];
  v86.imagp = (float *)v87[0];
  if (v30 < 3)
    __assert_rtn("Initialize", "MatrixResampler.cpp", 123, "mNumInputFrames > 2");
  v36 = (DSPComplex *)v93;
  LODWORD(__C[0]) = 1065353216;
  vDSP_vfill((const float *)__C, v93, 1, __N);
  if (v8 <= 1.0)
  {
    v41 = (float)__N * v4;
    v42 = ceilf(v41);
    v43 = (float)((float)__N - v42);
    if (v43)
    {
      v44 = v42;
      do
      {
        *(&v36->real + v44) = fmaxf(1.0- (float)((float)((float)v44 - v41)* (float)(1.0 / (float)((float)__N - v41))), 0.0001);
        ++v44;
        --v43;
      }
      while (v43);
    }
  }
  else
  {
    v37 = (float)(v4 / v8) * (float)__N;
    v38 = (float)__N / v8;
    v39 = (float)(floorf(v38) - ceilf(v37));
    for (i = vcvtps_u32_f32(v37); v39; --v39)
    {
      *(&v36->real + i) = fmaxf(1.0 - (float)((float)((float)i - v37) * (float)(1.0 / (float)(v38 - v37))), 0.0001);
      ++i;
    }
    if (i < __N)
    {
      LODWORD(__C[0]) = 953267991;
      vDSP_vfill((const float *)__C, (float *)v36 + i, 1, __N - i);
    }
  }
  *((_DWORD *)&v36->real + __N) = 953267991;
  Setup = vDSP_DFT_zrop_CreateSetup(0, __P, vDSP_DFT_FORWARD);
  __Setup = vDSP_DFT_zrop_CreateSetup(Setup, __P, vDSP_DFT_INVERSE);
  LODWORD(__Oi[0]) = 0;
  std::vector<float>::vector(__C, __P, __Oi);
  LODWORD(v80) = 0;
  std::vector<float>::vector(__Oi, __P, &v80);
  __Z.realp = __C[0];
  __Z.imagp = __Oi[0];
  LODWORD(v80) = v70;
  vvlogf(__C[0], (const float *)v36, (const int *)&v80);
  *(float *)&v80 = 1.0 / v20;
  vDSP_vsmul(__C[0], 1, (const float *)&v80, __C[0], 1, v70);
  v46 = __C[0];
  v47 = __Oi[0];
  *__Oi[0] = __C[0][__N];
  vDSP_DFT_Execute(__Setup, v46, v47, v46, v47);
  vDSP_ztoc(&__Z, 1, v36, 2, __N);
  v48 = (float *)v36 + __P;
  vDSP_vclr(v48, 1, __P);
  *v48 = 1.0;
  LODWORD(v80) = 0x40000000;
  vDSP_vfill((const float *)&v80, v48 + 1, 1, v31);
  v48[__N] = 1.0;
  vDSP_vmul((const float *)v36, 1, v48, 1, (float *)v36, 1, __P);
  LODWORD(v80) = 1056964608;
  vDSP_vsmul((const float *)v36, 1, (const float *)&v80, (float *)v36, 1, __P);
  vDSP_ctoz(v36, 2, &__Z, 1, __N);
  vDSP_DFT_Execute(Setup, __C[0], __Oi[0], __C[0], __Oi[0]);
  v49 = __Oi[0];
  __C[0][__N] = *__Oi[0];
  v49[__N] = 0.0;
  *v49 = 0.0;
  vDSP_DFT_DestroySetup(Setup);
  vDSP_DFT_DestroySetup(__Setup);
  LODWORD(v80) = v70;
  vvexpf((float *)v36, __C[0], (const int *)&v80);
  LODWORD(v80) = v70;
  vvsincosf(v48, __C[0], __Oi[0], (const int *)&v80);
  vDSP_vmul((const float *)v36, 1, __C[0], 1, __C[0], 1, v70);
  vDSP_vmul((const float *)v36, 1, v48, 1, __Oi[0], 1, v70);
  if (v70 < __P)
  {
    v50 = __C[0];
    v51 = __Oi[0];
    v52 = &__C[0][(__P >> 1) + 1];
    v53 = &__Oi[0][(__P >> 1) + 1];
    if (v12 >= v15)
      v54 = v15;
    else
      v54 = v12;
    v55 = ~(__P >> 1) + v54;
    do
    {
      *v52++ = v50[v31];
      *v53++ = -v51[v31];
      LODWORD(v31) = v31 - 1;
      --v55;
    }
    while (v55);
  }
  v56 = (double)a2 * -6.28318531 / (double)__P;
  LODWORD(v80) = 0;
  *(float *)&v78 = v56;
  vDSP_vramp((const float *)&v80, (const float *)&v78, (float *)v36, 1, __P);
  LODWORD(v80) = __P;
  vvsincosf((float *)v36 + (2 * __P), (float *)v36 + __P, (const float *)v36, (const int *)&v80);
  v82.realp = (float *)v36 + __P;
  v82.imagp = (float *)v36 + (2 * __P);
  vDSP_zvmul(&__Z, 1, &v82, 1, &__Z, 1, __P, 1);
  LODWORD(v78) = 0;
  std::vector<float>::vector(&v80, __P, &v78);
  LODWORD(v78) = 0;
  *(float *)&v76 = 1.0 / v20;
  vDSP_vramp((const float *)&v78, (const float *)&v76, v80, 1, v81 - v80);
  v57 = *v10;
  LODWORD(v76) = 0;
  std::vector<float>::vector(&v78, v57, &v76);
  LODWORD(v76) = 0;
  LODWORD(v74) = 1086918619;
  vDSP_vramp((const float *)&v76, (const float *)&v74, v78, 1, v79 - v78);
  v58 = *v10;
  vDSP_mmul(v78, 1, v80, 1, v93, 1, *v10, __P, 1uLL);
  v59 = (v58 * __P);
  LODWORD(v74) = 0;
  std::vector<float>::vector(&v76, v59, &v74);
  LODWORD(v73.realp) = 0;
  std::vector<float>::vector(&v74, v59, &v73);
  LODWORD(v73.realp) = v59;
  vvsincosf(v74, v76, v93, (const int *)&v73);
  *(float *)&v73.realp = 1.0 / v20;
  vDSP_vsmul(v76, 1, (const float *)&v73, v76, 1, v77 - v76);
  *(float *)&v73.realp = 1.0 / v20;
  vDSP_vsmul(v74, 1, (const float *)&v73, v74, 1, v75 - v74);
  v73.realp = v76;
  v73.imagp = v74;
  LODWORD(v60) = *v10;
  if (*v10)
  {
    v61 = 0;
    v62 = 0;
    if (v12 >= v15)
      v12 = v15;
    do
    {
      v72.realp = &v76[v61];
      v72.imagp = &v74[v61];
      vDSP_zvmul(&v72, 1, &__Z, 1, &v72, 1, __P, 1);
      ++v62;
      v60 = *v10;
      v61 += v12;
    }
    while (v62 < v60);
  }
  v63 = (*(_DWORD *)(a1 + 8) * v60);
  LODWORD(v71.realp) = 0;
  std::vector<float>::resize(a1 + 40, v63, &v71);
  v71.realp = *(float **)(a1 + 40);
  v71.imagp = v93;
  vDSP_zmmul(&v73, 1, &v86, 1, &v71, 1, *v10, *v7, __P);
  v64 = *v10;
  if (v74)
  {
    v75 = v74;
    operator delete(v74);
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (v78)
  {
    v79 = v78;
    operator delete(v78);
  }
  if (v80)
  {
    v81 = v80;
    operator delete(v80);
  }
  if (__Oi[0])
  {
    __Oi[1] = __Oi[0];
    operator delete(__Oi[0]);
  }
  if (__C[0])
  {
    __C[1] = __C[0];
    operator delete(__C[0]);
  }
  if (v87[0])
  {
    v87[1] = v87[0];
    operator delete(v87[0]);
  }
  if (__B[0])
  {
    __B[1] = __B[0];
    operator delete(__B[0]);
  }
LABEL_66:
  if (__A)
  {
    v90 = __A;
    operator delete(__A);
  }
  if (v91)
  {
    v92 = v91;
    operator delete(v91);
  }
  if (v93)
  {
    v94 = v93;
    operator delete(v93);
  }
  return v64;
}

void sub_2105AD0B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41)
{
  uint64_t v41;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  v43 = *(void **)(v41 - 240);
  if (v43)
  {
    *(_QWORD *)(v41 - 232) = v43;
    operator delete(v43);
  }
  v44 = *(void **)(v41 - 216);
  if (v44)
  {
    *(_QWORD *)(v41 - 208) = v44;
    operator delete(v44);
  }
  v45 = *(void **)(v41 - 192);
  if (v45)
  {
    *(_QWORD *)(v41 - 184) = v45;
    operator delete(v45);
  }
  v46 = *(void **)(v41 - 168);
  if (v46)
  {
    *(_QWORD *)(v41 - 160) = v46;
    operator delete(v46);
  }
  v47 = *(void **)(v41 - 144);
  if (v47)
  {
    *(_QWORD *)(v41 - 136) = v47;
    operator delete(v47);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IR::MatrixResampler<float>::Process(uint64_t a1, const float *__B, unsigned int a3, float *__C, unsigned int a5, vDSP_Length __N)
{
  const float *v7;
  uint64_t v8;
  vDSP_Length v9;

  v8 = a1 + 40;
  v7 = *(const float **)(a1 + 40);
  v9 = a5 / __N;
  if (v9 * (a3 / __N) > (unint64_t)((uint64_t)(*(_QWORD *)(v8 + 8) - (_QWORD)v7) >> 2)
    || a3 / __N != *(_DWORD *)(a1 + 8)
    || v9 > *(_DWORD *)(a1 + 64))
  {
    return 104;
  }
  vDSP_mmul(v7, 1, __B, 1, __C, 1, v9, __N, a3 / __N);
  return 0;
}

uint64_t IR::MatrixResampler<float>::Initialize(uint64_t a1, const __CFDictionary **a2, long double a3)
{
  const __CFDictionary *v4;
  float v6;
  const __CFDictionary *v7;
  unsigned int v8;
  const __CFDictionary *v9;
  int v10;
  uint64_t result;
  std::logic_error *exception;
  applesauce::CF *v13;
  applesauce::CF *v14;
  unsigned int v15;
  unsigned int v16;
  int v17;

  *(_BYTE *)(a1 + 20) = 0;
  v4 = *a2;
  if (*a2)
  {
    v17 = 1064011039;
    v6 = applesauce::CF::at_or<float,__CFString const*&>(v4, (const void **)IR::kIRDataResamplerConfigQualityKey, (uint64_t)&v17);
    if (v6 > 1.0 || v6 < 0.0)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid Quality index");
    }
    v7 = *a2;
    if (!*a2)
    {
      v13 = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(v13);
    }
    v16 = 5;
    v8 = applesauce::CF::at_or<unsigned int,__CFString const*&>(v7, (const void **)IR::kMatrixResamplerConfigLatencySamplesKey, &v16);
    v9 = *a2;
    if (!*a2)
    {
      v14 = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(v14);
    }
    v15 = 20;
    v10 = applesauce::CF::at_or<unsigned int,__CFString const*&>(v9, (const void **)IR::kMatrixResamplerConfigPostRingSamplesKey, &v15);
  }
  else
  {
    v10 = 20;
    v8 = 5;
    v6 = 0.92;
  }
  *(float *)&a3 = v6;
  LODWORD(result) = IR::MatrixResampler<float>::Initialize(a1, v8, v10, a3);
  *(_BYTE *)(a1 + 20) = 1;
  return result;
}

void sub_2105AD3EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t IR::MatrixResampler<float>::Process(uint64_t a1, const float *a2, unsigned int a3, float *a4, unsigned int a5)
{
  return IR::MatrixResampler<float>::Process(a1, a2, a3, a4, a5, 1uLL);
}

uint64_t IR::MatrixResampler<float>::CleanUp(uint64_t result)
{
  *(_BYTE *)(result + 20) = 0;
  *(_QWORD *)(result + 48) = *(_QWORD *)(result + 40);
  return result;
}

uint64_t IR::MatrixResampler<float>::GetRequiredNumberOfInputFrames(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

_QWORD *IR::MatrixResampler<float>::~MatrixResampler(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24CA2D2B0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  return IR::DataResampler<float>::~DataResampler(a1);
}

void IR::MatrixResampler<float>::~MatrixResampler(_QWORD *a1)
{
  void *v2;

  *a1 = &off_24CA2D2B0;
  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  IR::DataResampler<float>::~DataResampler(a1);
  JUMPOUT(0x212BC7928);
}

CFURLRef IR::copyHRTFBinURL(IR *this)
{
  std::string *v1;
  __int128 v2;
  void **v3;
  CFIndex v4;
  CFURLRef v5;
  std::string v7;
  void *__p[2];
  int64_t v9;

  std::string::basic_string[abi:ne180100]<0>(&v7, "/System/Library/Audio/Tunings/IRs");
  v1 = std::string::append(&v7, "/HRTF.bin", 9uLL);
  v2 = *(_OWORD *)&v1->__r_.__value_.__l.__data_;
  v9 = v1->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v2;
  v1->__r_.__value_.__l.__size_ = 0;
  v1->__r_.__value_.__r.__words[2] = 0;
  v1->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (v9 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v9 >= 0)
    v4 = HIBYTE(v9);
  else
    v4 = (CFIndex)__p[1];
  v5 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x24BDBD240], (const UInt8 *)v3, v4, 1u);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return v5;
}

void sub_2105AD568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 std::operator+[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>@<Q0>(char *__s@<X1>, std::string *a2@<X0>, std::string *a3@<X8>)
{
  size_t v6;
  __n128 *v7;
  __n128 result;

  v6 = strlen(__s);
  v7 = (__n128 *)std::string::append(a2, __s, v6);
  result = *v7;
  *a3 = *(std::string *)v7->n128_u8;
  v7->n128_u64[0] = 0;
  v7->n128_u64[1] = 0;
  v7[1].n128_u64[0] = 0;
  return result;
}

_QWORD *IR::getGenericIRBasePath@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "/System/Library/Audio/Tunings/IRs");
}

void IR::getProductTypeXTCIRFullPath(IR *this@<X0>, _QWORD *a2@<X8>)
{
  unint64_t AcousticID;
  int v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  CFMutableStringRef v13;
  std::string *v14;
  __int128 v15;
  std::string *v16;
  std::string::size_type v17;
  std::string *v18;
  __int128 v19;
  std::string *v20;
  __int128 v21;
  void *exception;
  CFTypeRef cf;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;

  if (PlatformUtilities_iOS::GetProductType(this))
  {
    AcousticID = GetAcousticID();
    if ((AcousticID & 0xFF00000000) != 0)
    {
      v4 = AcousticID;
      std::string::basic_string[abi:ne180100]<0>(&v25, "/System/Library/Audio/Tunings/IRs");
      v5 = std::string::append(&v25, "/AID", 4uLL);
      v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v24, v4);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v24;
      else
        v7 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      else
        size = v24.__r_.__value_.__l.__size_;
      v9 = std::string::append(&v26, (const std::string::value_type *)v7, size);
      v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v27, "/", 1uLL);
      v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      a2[2] = *((_QWORD *)&v11->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
    }
    else
    {
      v13 = PlatformUtilities::CopyHardwareModelShortName((PlatformUtilities *)AcousticID);
      applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v13);
      std::string::basic_string[abi:ne180100]<0>(&v25, "/System/Library/Audio/Tunings/IRs");
      v14 = std::string::append(&v25, "/", 1uLL);
      v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
      v26.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v15;
      v14->__r_.__value_.__l.__size_ = 0;
      v14->__r_.__value_.__r.__words[2] = 0;
      v14->__r_.__value_.__r.__words[0] = 0;
      if (!cf)
      {
        exception = __cxa_allocate_exception(0x10uLL);
        MEMORY[0x212BC76A0](exception, "Could not construct");
      }
      applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&v24);
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v16 = &v24;
      else
        v16 = (std::string *)v24.__r_.__value_.__r.__words[0];
      if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = HIBYTE(v24.__r_.__value_.__r.__words[2]);
      else
        v17 = v24.__r_.__value_.__l.__size_;
      v18 = std::string::append(&v26, (const std::string::value_type *)v16, v17);
      v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      v20 = std::string::append(&v27, "/", 1uLL);
      v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
      a2[2] = *((_QWORD *)&v20->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v21;
      v20->__r_.__value_.__l.__size_ = 0;
      v20->__r_.__value_.__r.__words[2] = 0;
      v20->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v27.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25.__r_.__value_.__l.__data_);
      if (cf)
        CFRelease(cf);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_2105AD8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  __cxa_free_exception(v28);
  if (a28 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  applesauce::CF::StringRef::~StringRef(&a10);
  _Unwind_Resume(a1);
}

void IR::getProductTypeXTCIRFilePrefix(IR *this@<X0>, _QWORD *a2@<X8>)
{
  int ProductType;
  int v4;
  CFStringRef v5;
  std::string *v6;
  __int128 v7;
  void *exception;
  std::string __p;
  CFTypeRef cf;

  ProductType = PlatformUtilities_iOS::GetProductType(this);
  if (ProductType && (v4 = ProductType, (GetAcousticID() & 0xFF00000000) == 0))
  {
    v5 = PlatformUtilities_iOS::CopyProductTypeFilePrefix(v4);
    applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&cf, v5);
    if (!cf)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
    applesauce::CF::convert_to<std::string,0>((const __CFString *)cf, (uint64_t)&__p);
    v6 = std::string::append(&__p, "_", 1uLL);
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    a2[2] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "");
  }
}

void sub_2105ADA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15)
{
  void *v15;

  __cxa_free_exception(v15);
  applesauce::CF::StringRef::~StringRef(&a15);
  _Unwind_Resume(a1);
}

void IR::getPresetDataAttributes(int a1)
{
  uint64_t v2;

  applesauce::CF::URLRef::URLRef(&v2, "/System/Library/Audio/Tunings/IRs", 1, 0);
  __asm { BR              X10 }
}

void sub_2105ADB10()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  const void *v3;

  *(_QWORD *)(v1 - 248) = 0;
  IR::IRDataAttributes::IRDataAttributes(v0, (CFTypeRef *)(v1 - 248), 1024, 1, 2, 0.0);
  v2 = *(const void **)(v1 - 248);
  if (v2)
    CFRelease(v2);
  v3 = *(const void **)(v1 - 40);
  if (v3)
    CFRelease(v3);
}

void sub_2105AE898(_Unwind_Exception *a1)
{
  uint64_t v1;

  applesauce::CF::URLRef::~URLRef((const void **)(v1 - 136));
  applesauce::CF::URLRef::~URLRef((const void **)(v1 - 104));
  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  applesauce::CF::URLRef::~URLRef((const void **)(v1 - 40));
  _Unwind_Resume(a1);
}

uint64_t *applesauce::CF::URLRef::URLRef(uint64_t *a1, char *a2, uint64_t a3, uint64_t a4)
{
  void **v7;
  unint64_t v8;
  uint64_t v9;
  void *exception;
  void *__p[2];
  unsigned __int8 v13;

  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  if ((v13 & 0x80u) == 0)
    v7 = __p;
  else
    v7 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v8 = v13;
  else
    v8 = (unint64_t)__p[1];
  v9 = MEMORY[0x212BC7520](0, v7, v8, a3, a4);
  *a1 = v9;
  if (!v9)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  if ((char)v13 < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_2105AEC88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(const void **a1, char *__s)
{
  int v4;
  size_t v5;
  const void *v6;

  v4 = *((char *)a1 + 23);
  if (v4 >= 0)
    v5 = *((unsigned __int8 *)a1 + 23);
  else
    v5 = (size_t)a1[1];
  if (v5 != strlen(__s))
    return 0;
  if (v4 >= 0)
    v6 = a1;
  else
    v6 = *a1;
  return memcmp(v6, __s, v5) == 0;
}

CFURLRef *applesauce::CF::URLRef::URLRef(CFURLRef *a1, const UInt8 *a2, CFURLRef baseURL)
{
  CFIndex v5;
  CFIndex v6;
  CFURLRef v7;
  void *exception;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFURLCreateWithBytes(0, a2, v6, 0, baseURL);
  *a1 = v7;
  if (!v7)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    MEMORY[0x212BC76A0](exception, "Could not construct");
  }
  return a1;
}

void sub_2105AEDCC(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

applesauce::CF::URLRef *applesauce::CF::URLRef::URLRef(applesauce::CF::URLRef *this, CFTypeRef *a2)
{
  CFTypeRef v3;

  v3 = *a2;
  if (*a2)
    CFRetain(*a2);
  *(_QWORD *)this = v3;
  return this;
}

_QWORD *applesauce::CF::convert_to<std::string,0>@<X0>(const __CFString *a1@<X0>, uint64_t a2@<X8>)
{
  CFTypeID TypeID;
  applesauce::CF *exception;

  if (!a1 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(a1)))
  {
    exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
    applesauce::CF::convert_error(exception);
  }
  return applesauce::CF::details::CFString_get_value<true>(a1, a2);
}

void sub_2105AEE90()
{
  void *v0;

}

void sub_2105AEEA8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

IR::FFTSubFilterData *IR::FFTSubFilterData::FFTSubFilterData(IR::FFTSubFilterData *this, unsigned int a2, unsigned int a3)
{
  char *v4;
  std::vector<unsigned int> *v5;
  unsigned int v6;
  int v7;
  int v8;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;

  *(_OWORD *)((char *)this + 40) = 0u;
  v4 = (char *)this + 40;
  v5 = (std::vector<unsigned int> *)((char *)this + 64);
  if (a2 <= 1)
    v6 = 1;
  else
    v6 = a2;
  *(_OWORD *)((char *)this + 8) = 0uLL;
  *(_OWORD *)((char *)this + 72) = 0uLL;
  *(_OWORD *)((char *)this + 56) = 0uLL;
  *(_OWORD *)((char *)this + 24) = 0uLL;
  v7 = a3 / v6;
  if (a3 / v6 * v6 < a3)
    ++v7;
  *(_DWORD *)this = v6;
  *((_DWORD *)this + 1) = v7;
  v8 = v7 * v6;
  *((_DWORD *)this + 3) = v8;
  std::vector<float>::resize((uint64_t)this + 16, (2 * v8));
  std::vector<DSPSplitComplex>::resize((uint64_t)v4, *((unsigned int *)this + 1));
  std::vector<int>::resize(v5, *((unsigned int *)this + 1));
  v9 = (_QWORD *)*((_QWORD *)this + 5);
  v10 = (_QWORD *)*((_QWORD *)this + 6);
  if (v9 != v10)
  {
    v11 = 0;
    v12 = *((_QWORD *)this + 2);
    v13 = *(_DWORD *)this;
    v14 = 2 * *(_DWORD *)this;
    do
    {
      *v9 = v12 + 4 * v11;
      v9[1] = v12 + 4 * (v13 + v11);
      v9 += 2;
      v11 += v14;
    }
    while (v9 != v10);
  }
  return this;
}

void sub_2105AEF90(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v1 + 72) = v6;
    operator delete(v6);
  }
  IR::FFTSubFilterData::FFTSubFilterData(v3, v2, v1);
  _Unwind_Resume(a1);
}

IR::FFTSubFilterData *IR::FFTSubFilterData::FFTSubFilterData(IR::FFTSubFilterData *this, const IR::FFTSubFilterData *a2)
{
  *((_OWORD *)this + 1) = 0u;
  *((_QWORD *)this + 10) = 0;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  IR::FFTSubFilterData::operator=((char *)this, (uint64_t)a2);
  return this;
}

void sub_2105AF00C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;

  v5 = *(void **)(v1 + 64);
  if (v5)
  {
    *(_QWORD *)(v1 + 72) = v5;
    operator delete(v5);
  }
  IR::FFTSubFilterData::FFTSubFilterData(v3, v2, v1);
  _Unwind_Resume(a1);
}

char *IR::FFTSubFilterData::operator=(char *a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  int v9;

  if ((char *)a2 != a1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a1 + 64, *(char **)(a2 + 64), *(_QWORD *)(a2 + 72), (uint64_t)(*(_QWORD *)(a2 + 72) - *(_QWORD *)(a2 + 64)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(a1 + 16, *(char **)(a2 + 16), *(_QWORD *)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 2);
    std::vector<DSPSplitComplex>::__assign_with_size[abi:ne180100]<DSPSplitComplex*,DSPSplitComplex*>(a1 + 40, *(char **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 4);
    v4 = (_QWORD *)*((_QWORD *)a1 + 5);
    v5 = (_QWORD *)*((_QWORD *)a1 + 6);
    if (v4 != v5)
    {
      v6 = 0;
      v7 = *((_QWORD *)a1 + 2);
      v8 = *(_DWORD *)a1;
      v9 = 2 * *(_DWORD *)a1;
      do
      {
        *v4 = v7 + 4 * v6;
        v4[1] = v7 + 4 * (v8 + v6);
        v4 += 2;
        v6 += v9;
      }
      while (v4 != v5);
    }
  }
  return a1;
}

__n128 IR::FFTSubFilterData::FFTSubFilterData(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

_OWORD *IR::FFTSubFilterData::operator=(_OWORD *a1, uint64_t a2)
{
  *a1 = *(_OWORD *)a2;
  std::vector<float>::__move_assign((uint64_t)(a1 + 1), (__n128 *)(a2 + 16));
  std::vector<float>::__move_assign((uint64_t)a1 + 40, (__n128 *)(a2 + 40));
  std::vector<float>::__move_assign((uint64_t)(a1 + 4), (__n128 *)(a2 + 64));
  return a1;
}

uint64_t IR::FFTSubFilterData::SetFilter(IR::FFTSubFilterData *this, const float *a2, unsigned int a3, float a4, MultiRadixRealFFT *a5)
{
  return IR::FFTSubFilterData::setFilter((unsigned int *)this, (uint64_t)a2, a3, a5, 0, 0, a4);
}

uint64_t IR::FFTSubFilterData::setFilter(unsigned int *a1, uint64_t a2, unsigned int a3, MultiRadixRealFFT *this, uint64_t a5, unsigned int a6, float a7)
{
  uint64_t result;
  MultiRadixRealFFT *v10;
  unsigned int v13;
  int v14;
  MultiRadixRealFFT *v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  float v22;
  uint64_t v23;
  _BOOL4 v24;
  const DSPComplex *v25;
  const DSPSplitComplex *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  float v32;
  uint64_t v33;
  float v35;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _BOOL4 v40;
  uint64_t v41;
  float __C;
  MultiRadixRealFFT *v43;
  uint64_t v44;

  v41 = a2;
  v44 = *MEMORY[0x24BDAC8D0];
  if (a1[3] < a3)
    return 4294967246;
  v10 = this;
  v13 = a3 % *a1;
  if (v13)
    v14 = a3 / *a1 + 1;
  else
    v14 = a3 / *a1;
  a1[2] = v14;
  v43 = 0;
  if (this && MultiRadixRealFFT::Size(this) == 2 * *a1)
  {
    v15 = 0;
  }
  else
  {
    v15 = (MultiRadixRealFFT *)operator new();
    *(_QWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    v43 = v15;
    v16 = MultiRadixRealFFT::Initialize(v15, 2 * *a1);
    if ((_DWORD)v16)
    {
      v43 = 0;
LABEL_47:
      v37 = std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)v15);
      MEMORY[0x212BC7928](v37, 0x20C40A4A59CD2);
      return v16;
    }
    v10 = v15;
  }
  v17 = MultiRadixRealFFT::Size(v10);
  LODWORD(v18) = a1[2];
  if ((_DWORD)v18)
  {
    v19 = 0;
    v20 = 0;
    v21 = a5;
    v22 = a7 / (float)v17;
    v23 = v13 >> 1;
    v24 = *(float *)&v21 != 0.0;
    if (*((float *)&v21 + 1) != 0.0)
      v24 = 1;
    if (a6)
      v24 = 1;
    v39 = v13 - 1;
    v40 = v24;
    do
    {
      v25 = (const DSPComplex *)(v41 + 4 * v20);
      v26 = (const DSPSplitComplex *)(*((_QWORD *)a1 + 5) + 16 * v19);
      if (v13 && v19 == (_DWORD)v18 - 1)
      {
        vDSP_ctoz(v25, 2, v26, 1, v13 >> 1);
        bzero((void *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 16 * v19) + 4 * v23), 4 * (*a1 - v23));
        bzero((void *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 16 * v19 + 8) + 4 * v23), 4 * (*a1 - v23));
        v27 = *((_QWORD *)a1 + 5);
        if ((v13 & 1) != 0)
          *(_DWORD *)(*(_QWORD *)(v27 + 16 * v19) + 4 * v23) = *(_DWORD *)(v41 + 4 * (v39 + v20));
      }
      else
      {
        vDSP_ctoz(v25, 2, v26, 1, (unint64_t)*a1 >> 1);
        bzero((void *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 16 * v19) + ((2 * *a1) & 0x1FFFFFFFCLL)), 2 * *a1);
        bzero((void *)(*(_QWORD *)(*((_QWORD *)a1 + 5) + 16 * v19 + 8) + ((2 * *a1) & 0x1FFFFFFFCLL)), 2 * *a1);
        v27 = *((_QWORD *)a1 + 5);
      }
      v28 = MultiRadixRealFFT::RealInPlaceTransform(v10, (DSPSplitComplex *)(v27 + 16 * v19), 1, v22);
      v29 = *a1;
      if (v40)
      {
        MEMORY[0x24BDAC7A8](v28);
        v31 = (char *)&v38 - ((v30 + 15) & 0x7FFFFFFF0);
        vDSP_zvmags((const DSPSplitComplex *)(*((_QWORD *)a1 + 5) + 16 * v19), 1, (float *)v31, 1, *a1);
        v32 = 0.0;
        if (*((float *)&v21 + 1) > 0.0)
        {
          __C = 0.0;
          vDSP_maxv((const float *)v31 + 1, 1, &__C, *a1 - 1);
          v32 = (float)(*((float *)&v21 + 1) * *((float *)&v21 + 1)) * __C;
        }
        LODWORD(v33) = *a1;
        if (*a1 <= a6 || a6 == 0)
          v33 = v33;
        else
          v33 = a6;
        if ((_DWORD)v33)
        {
          while (1)
          {
            v35 = *(float *)&v31[4 * v33];
            if (v35 > (float)(v22 * (float)((float)(*(float *)&v21 * *(float *)&v21) * v22)) && v35 > v32)
              break;
            if (!(_DWORD)--v33)
              goto LABEL_43;
          }
          if (v33 < 2)
            LODWORD(v33) = 0;
        }
LABEL_43:
        *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * v19) = v33;
      }
      else
      {
        *(_DWORD *)(*((_QWORD *)a1 + 8) + 4 * v19) = v29;
      }
      v20 += v29;
      ++v19;
      v18 = a1[2];
    }
    while (v19 < v18);
    v15 = v43;
  }
  v16 = 0;
  result = 0;
  v43 = 0;
  if (v15)
    goto LABEL_47;
  return result;
}

void sub_2105AF550(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<MultiRadixRealFFT>::reset[abi:ne180100]((uint64_t *)(v1 - 128), 0);
  _Unwind_Resume(a1);
}

uint64_t IR::FFTSubFilterData::accumulate(uint64_t a1, uint64_t a2, float a3)
{
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t result;
  float __B;

  __B = a3;
  if (*(_DWORD *)a2 == *(_DWORD *)a1)
  {
    if (*(_DWORD *)(a2 + 8) >= *(_DWORD *)(a1 + 4))
      v5 = *(_DWORD *)(a1 + 4);
    else
      v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = 0;
      v7 = *(_QWORD *)(a2 + 64);
      v8 = 8;
      do
      {
        vDSP_vsma(*(const float **)(*(_QWORD *)(a2 + 40) + v8 - 8), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 40) + v8 - 8), 1, *(float **)(*(_QWORD *)(a1 + 40) + v8 - 8), 1, *(unsigned int *)(v7 + v6));
        vDSP_vsma(*(const float **)(*(_QWORD *)(a2 + 40) + v8), 1, &__B, *(const float **)(*(_QWORD *)(a1 + 40) + v8), 1, *(float **)(*(_QWORD *)(a1 + 40) + v8), 1, *(unsigned int *)(*(_QWORD *)(a2 + 64) + v6));
        v9 = *(_QWORD *)(a1 + 64);
        v7 = *(_QWORD *)(a2 + 64);
        v10 = *(_DWORD *)(v9 + v6);
        if (v10 <= *(_DWORD *)(v7 + v6))
          v10 = *(_DWORD *)(v7 + v6);
        *(_DWORD *)(v9 + v6) = v10;
        v8 += 16;
        v6 += 4;
      }
      while (4 * v5 != v6);
    }
    result = 0;
    if (v5 > *(_DWORD *)(a1 + 8))
      *(_DWORD *)(a1 + 8) = v5;
  }
  else
  {
    bzero(*(void **)(a1 + 16), *(_QWORD *)(a1 + 24) - *(_QWORD *)(a1 + 16));
    *(_DWORD *)(a1 + 8) = 0;
    return 4294967246;
  }
  return result;
}

void IR::FFTSubFilterData::reset(void **this)
{
  bzero(this[2], (_BYTE *)this[3] - (_BYTE *)this[2]);
  *((_DWORD *)this + 2) = 0;
}

uint64_t IR::FFTSubFilterData::overwrite(IR::FFTSubFilterData *this, const IR::FFTSubFilterData *a2, float a3)
{
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t result;
  float __B;

  __B = a3;
  if (*(_DWORD *)a2 == *(_DWORD *)this)
  {
    v5 = *((_DWORD *)a2 + 2);
    v6 = *((_DWORD *)this + 1);
    if (v5 >= v6)
      v7 = v6;
    else
      v7 = v5;
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 8;
      do
      {
        vDSP_vsmul(*(const float **)(*((_QWORD *)a2 + 5) + v9 - 8), 1, &__B, *(float **)(*((_QWORD *)this + 5) + v9 - 8), 1, *(unsigned int *)this);
        vDSP_vsmul(*(const float **)(*((_QWORD *)a2 + 5) + v9), 1, &__B, *(float **)(*((_QWORD *)this + 5) + v9), 1, *(unsigned int *)this);
        *(_DWORD *)(*((_QWORD *)this + 8) + v8) = *(_DWORD *)(*((_QWORD *)a2 + 8) + v8);
        v9 += 16;
        v8 += 4;
      }
      while (4 * v7 != v8);
      v6 = *((_DWORD *)this + 1);
    }
    if (v7 < v6)
    {
      v10 = 16 * v7;
      v11 = v7;
      do
      {
        bzero((void *)(*((_QWORD *)this + 5) + v10), 4 * (2 * *(_DWORD *)this));
        ++v11;
        v10 += 16;
      }
      while (v11 < *((unsigned int *)this + 1));
    }
    result = 0;
  }
  else
  {
    bzero(*((void **)this + 2), *((_QWORD *)this + 3) - *((_QWORD *)this + 2));
    LODWORD(v7) = 0;
    result = 4294967246;
  }
  *((_DWORD *)this + 2) = v7;
  return result;
}

uint64_t IR::FFTSubFilterData::scale(IR::FFTSubFilterData *this, float a2)
{
  uint64_t v3;
  unint64_t v4;
  float *v5;
  float __B;

  __B = a2;
  if (*((_DWORD *)this + 1))
  {
    v3 = 0;
    v4 = 0;
    do
    {
      vDSP_vsmul(*(const float **)(*((_QWORD *)this + 5) + v3), 1, &__B, *(float **)(*((_QWORD *)this + 5) + v3), 1, *(unsigned int *)this);
      v5 = *(float **)(*((_QWORD *)this + 5) + v3 + 8);
      vDSP_vsmul(v5, 1, &__B, v5, 1, *(unsigned int *)this);
      ++v4;
      v3 += 16;
    }
    while (v4 < *((unsigned int *)this + 1));
  }
  return 0;
}

char *std::vector<DSPSplitComplex>::__assign_with_size[abi:ne180100]<DSPSplitComplex*,DSPSplitComplex*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 4)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 3;
    if (v8 >> 3 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<std::shared_ptr<IR::VBAPTriangulationKernel>>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 4;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t std::unique_ptr<MultiRadixRealFFT>::reset[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

void OUTLINED_FUNCTION_0_1(void *__p)
{
  operator delete(__p);
}

BOOL ChannelLayoutTagIsSupportedHOA(int a1)
{
  double v2;

  if (a1 == 7012356)
    return 1;
  if ((a1 & 0xFFFE0000 | 0x10000) != 0xBF0000 || (unsigned __int16)a1 - 65026 < 0xFFFF01FF)
    return 0;
  v2 = sqrt((double)(unsigned __int16)a1);
  return vabdd_f64(v2, round(v2)) <= 0.000000999999997;
}

BOOL ChannelLayoutTagIsHOAWithAnyNumberOfChannels(int a1)
{
  _BOOL4 v1;

  v1 = (a1 & 0xFFFF0000) == 12517376;
  if ((a1 & 0xFFFF0000) == 0xBE0000)
    v1 = 1;
  return (a1 & 0xFFFF0000) == 0x6B0000 || v1;
}

uint64_t GetAudioChannelLayoutTagAmbisonicOrder(int a1)
{
  int v2;
  _BOOL4 v3;
  BOOL v4;
  unsigned int v5;
  int v6;

  if (a1 == 7012356)
    return 1;
  if ((a1 & 0xFFFE0000 | 0x10000) != 0xBF0000)
    return 0;
  v2 = llroundf(sqrtf((float)(unsigned __int16)a1));
  v3 = v2 * v2 == (unsigned __int16)a1;
  v4 = v2 != 0;
  v5 = v2 - 1;
  v6 = v4;
  if ((v6 & v3) != 0)
    return v5;
  else
    return 0;
}

void GetStringFromAudioChannelLayoutTag(int a1@<W0>, _QWORD *a2@<X8>)
{
  unsigned __int16 v2;
  unsigned int v4;
  int v5;
  BOOL v6;
  std::string *v7;
  __int128 v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  int v13;
  BOOL v14;
  char *v15;
  std::string *v16;
  __int128 v17;
  std::string *v18;
  __int128 v19;
  std::string __p;
  std::string v21;
  std::string v22;

  v2 = a1;
  v4 = a1 & 0xFFFF0000;
  if ((a1 & 0xFFFF0000) == 0x930000)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "DiscreteInOrder");
    v11 = std::string::append(&v21, " ", 1uLL);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v2);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  else if (v4 == 12517376)
  {
    v13 = llroundf(sqrtf((float)(unsigned __int16)a1));
    if (v13)
      v14 = v13 * v13 == (unsigned __int16)a1;
    else
      v14 = 0;
    if (!v14)
      goto LABEL_25;
    std::string::basic_string[abi:ne180100]<0>(&v21, "HOA_ACN_N3D");
    v16 = std::string::append(&v21, " ", 1uLL);
    v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v13 - 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  else
  {
    if (v4 != 12451840)
    {
      if (a1 <= 10027011)
      {
        if (a1 > 8126469)
        {
          if (a1 <= 9043972)
          {
            if (a1 > 8585218)
            {
              if (a1 <= 8781827)
              {
                switch(a1)
                {
                  case 8585219:
                    v15 = "ITU_2_1";
                    goto LABEL_26;
                  case 8650756:
                    v15 = "ITU_2_2";
                    goto LABEL_26;
                  case 8716291:
                    v15 = "DVD_4";
                    goto LABEL_26;
                }
              }
              else if (a1 > 8912899)
              {
                if (a1 == 8912900)
                {
                  v15 = "DVD_10";
                  goto LABEL_26;
                }
                if (a1 == 8978437)
                {
                  v15 = "DVD_11";
                  goto LABEL_26;
                }
              }
              else
              {
                if (a1 == 8781828)
                {
                  v15 = "DVD_5";
                  goto LABEL_26;
                }
                if (a1 == 8847365)
                {
                  v15 = "DVD_6";
                  goto LABEL_26;
                }
              }
            }
            else if (a1 <= 8323079)
            {
              switch(a1)
              {
                case 8126470:
                  v15 = "MPEG_5_1_D";
                  goto LABEL_26;
                case 8192007:
                  v15 = "MPEG_6_1_A";
                  goto LABEL_26;
                case 8257544:
                  v15 = "MPEG_7_1_A";
                  goto LABEL_26;
              }
            }
            else if (a1 > 8454151)
            {
              if (a1 == 8454152)
              {
                v15 = "Emagic_Default_7_1";
                goto LABEL_26;
              }
              if (a1 == 8519688)
              {
                v15 = "SMPTE_DTV";
                goto LABEL_26;
              }
            }
            else
            {
              if (a1 == 8323080)
              {
                v15 = "MPEG_7_1_B";
                goto LABEL_26;
              }
              if (a1 == 8388616)
              {
                v15 = "MPEG_7_1_C";
                goto LABEL_26;
              }
            }
          }
          else if (a1 <= 9502735)
          {
            if (a1 <= 9240581)
            {
              switch(a1)
              {
                case 9043973:
                  v15 = "DVD_18";
                  goto LABEL_26;
                case 9109510:
                  v15 = "AudioUnit_6_0";
                  goto LABEL_26;
                case 9175047:
                  v15 = "AudioUnit_7_0";
                  goto LABEL_26;
              }
            }
            else if (a1 > 9371654)
            {
              if (a1 == 9371655)
              {
                v15 = "AAC_7_0";
                goto LABEL_26;
              }
              if (a1 == 9437192)
              {
                v15 = "AAC_Octagonal";
                goto LABEL_26;
              }
            }
            else
            {
              if (a1 == 9240582)
              {
                v15 = "AAC_6_0";
                goto LABEL_26;
              }
              if (a1 == 9306119)
              {
                v15 = "AAC_6_1";
                goto LABEL_26;
              }
            }
          }
          else if (a1 > 9764865)
          {
            if (a1 > 9895939)
            {
              if (a1 == 9895940)
              {
                v15 = "AC3_3_1";
                goto LABEL_26;
              }
              if (a1 == 9961476)
              {
                v15 = "AC3_3_0_1";
                goto LABEL_26;
              }
            }
            else
            {
              if (a1 == 9764866)
              {
                v15 = "AC3_1_0_1";
                goto LABEL_26;
              }
              if (a1 == 9830403)
              {
                v15 = "AC3_3_0";
                goto LABEL_26;
              }
            }
          }
          else if (a1 >= 9633792)
          {
            if (a1 == 9633792)
            {
              v15 = "DiscreteInOrder";
              goto LABEL_26;
            }
            if (a1 == 9699335)
            {
              v15 = "AudioUnit_7_0_Front";
              goto LABEL_26;
            }
          }
          else
          {
            if (a1 == 9502736)
            {
              v15 = "TMH_10_2_std";
              goto LABEL_26;
            }
            if (a1 == 9568277)
            {
              v15 = "TMH_10_2_full";
              goto LABEL_26;
            }
          }
        }
        else if (a1 <= 7143428)
        {
          if (a1 > 6684673)
          {
            if (a1 <= 6881281)
            {
              switch(a1)
              {
                case 6684674:
                  v15 = "StereoHeadphones";
                  goto LABEL_26;
                case 6750210:
                  v15 = "MatrixStereo";
                  goto LABEL_26;
                case 6815746:
                  v15 = "MidSide";
                  goto LABEL_26;
              }
            }
            else if (a1 > 7012355)
            {
              if (a1 == 7012356)
              {
                v15 = "Ambisonic_B_Format";
                goto LABEL_26;
              }
              if (a1 == 7077892)
              {
                v15 = "Quadraphonic";
                goto LABEL_26;
              }
            }
            else
            {
              if (a1 == 6881282)
              {
                v15 = "XY";
                goto LABEL_26;
              }
              if (a1 == 6946818)
              {
                v15 = "Binaural";
                goto LABEL_26;
              }
            }
          }
          else if (a1 < 0)
          {
            if (a1 == -268435456)
            {
              v15 = "BeginReserved";
              goto LABEL_26;
            }
            if (a1 == -65537)
            {
              v15 = "EndReserved";
              goto LABEL_26;
            }
          }
          else if (a1 > 6553600)
          {
            if (a1 == 6553601)
            {
              v15 = "Mono";
              goto LABEL_26;
            }
            if (a1 == 6619138)
            {
              v15 = "Stereo";
              goto LABEL_26;
            }
          }
          else
          {
            if (!a1)
            {
              v15 = "UseChannelDescriptions";
              goto LABEL_26;
            }
            if (a1 == 0x10000)
            {
              v15 = "UseChannelBitmap";
              goto LABEL_26;
            }
          }
        }
        else if (a1 <= 7602179)
        {
          if (a1 <= 7340039)
          {
            switch(a1)
            {
              case 7143429:
                v15 = "Pentagonal";
                goto LABEL_26;
              case 7208966:
                v15 = "Hexagonal";
                goto LABEL_26;
              case 7274504:
                v15 = "Octagonal";
                goto LABEL_26;
            }
          }
          else if (a1 > 7471106)
          {
            if (a1 == 7471107)
            {
              v15 = "MPEG_3_0_B";
              goto LABEL_26;
            }
            if (a1 == 7536644)
            {
              v15 = "MPEG_4_0_A";
              goto LABEL_26;
            }
          }
          else
          {
            if (a1 == 7340040)
            {
              v15 = "Cube";
              goto LABEL_26;
            }
            if (a1 == 7405571)
            {
              v15 = "MPEG_3_0_A";
              goto LABEL_26;
            }
          }
        }
        else if (a1 > 7864324)
        {
          if (a1 > 7995397)
          {
            if (a1 == 7995398)
            {
              v15 = "MPEG_5_1_B";
              goto LABEL_26;
            }
            if (a1 == 8060934)
            {
              v15 = "MPEG_5_1_C";
              goto LABEL_26;
            }
          }
          else
          {
            if (a1 == 7864325)
            {
              v15 = "MPEG_5_0_D";
              goto LABEL_26;
            }
            if (a1 == 7929862)
            {
              v15 = "MPEG_5_1_A";
              goto LABEL_26;
            }
          }
        }
        else if (a1 > 7733252)
        {
          if (a1 == 7733253)
          {
            v15 = "MPEG_5_0_B";
            goto LABEL_26;
          }
          if (a1 == 7798789)
          {
            v15 = "MPEG_5_0_C";
            goto LABEL_26;
          }
        }
        else
        {
          if (a1 == 7602180)
          {
            v15 = "MPEG_4_0_B";
            goto LABEL_26;
          }
          if (a1 == 7667717)
          {
            v15 = "MPEG_5_0_A";
            goto LABEL_26;
          }
        }
      }
      else if (a1 <= 11927558)
      {
        if (a1 <= 10944519)
        {
          if (a1 > 10485767)
          {
            if (a1 <= 10682375)
            {
              switch(a1)
              {
                case 10485768:
                  v15 = "EAC3_7_1_A";
                  goto LABEL_26;
                case 10551304:
                  v15 = "EAC3_7_1_B";
                  goto LABEL_26;
                case 10616840:
                  v15 = "EAC3_7_1_C";
                  goto LABEL_26;
              }
            }
            else if (a1 > 10813447)
            {
              if (a1 == 10813448)
              {
                v15 = "EAC3_7_1_F";
                goto LABEL_26;
              }
              if (a1 == 10878984)
              {
                v15 = "EAC3_7_1_G";
                goto LABEL_26;
              }
            }
            else
            {
              if (a1 == 10682376)
              {
                v15 = "EAC3_7_1_D";
                goto LABEL_26;
              }
              if (a1 == 10747912)
              {
                v15 = "EAC3_7_1_E";
                goto LABEL_26;
              }
            }
          }
          else if (a1 <= 10223622)
          {
            switch(a1)
            {
              case 10027012:
                v15 = "AC3_2_1_1";
                goto LABEL_26;
              case 10092549:
                v15 = "AC3_3_1_1";
                goto LABEL_26;
              case 10158086:
                v15 = "EAC_6_0_A";
                goto LABEL_26;
            }
          }
          else if (a1 > 10354694)
          {
            if (a1 == 10354695)
            {
              v15 = "EAC3_6_1_B";
              goto LABEL_26;
            }
            if (a1 == 10420231)
            {
              v15 = "EAC3_6_1_C";
              goto LABEL_26;
            }
          }
          else
          {
            if (a1 == 10223623)
            {
              v15 = "EAC_7_0_A";
              goto LABEL_26;
            }
            if (a1 == 10289159)
            {
              v15 = "EAC3_6_1_A";
              goto LABEL_26;
            }
          }
        }
        else if (a1 <= 11403270)
        {
          if (a1 <= 11141125)
          {
            switch(a1)
            {
              case 10944520:
                v15 = "EAC3_7_1_H";
                goto LABEL_26;
              case 11010052:
                v15 = "DTS_3_1";
                goto LABEL_26;
              case 11075589:
                v15 = "DTS_4_1";
                goto LABEL_26;
            }
          }
          else if (a1 > 11272197)
          {
            if (a1 == 11272198)
            {
              v15 = "DTS_6_0_C";
              goto LABEL_26;
            }
            if (a1 == 11337735)
            {
              v15 = "DTS_6_1_A";
              goto LABEL_26;
            }
          }
          else
          {
            if (a1 == 11141126)
            {
              v15 = "DTS_6_0_A";
              goto LABEL_26;
            }
            if (a1 == 11206662)
            {
              v15 = "DTS_6_0_B";
              goto LABEL_26;
            }
          }
        }
        else if (a1 > 11665415)
        {
          if (a1 > 11796488)
          {
            if (a1 == 11796489)
            {
              v15 = "DTS_8_1_A";
              goto LABEL_26;
            }
            if (a1 == 11862025)
            {
              v15 = "DTS_8_1_B";
              goto LABEL_26;
            }
          }
          else
          {
            if (a1 == 11665416)
            {
              v15 = "DTS_8_0_A";
              goto LABEL_26;
            }
            if (a1 == 11730952)
            {
              v15 = "DTS_8_0_B";
              goto LABEL_26;
            }
          }
        }
        else if (a1 > 11534342)
        {
          if (a1 == 11534343)
          {
            v15 = "DTS_7_0";
            goto LABEL_26;
          }
          if (a1 == 11599880)
          {
            v15 = "DTS_7_1";
            goto LABEL_26;
          }
        }
        else
        {
          if (a1 == 11403271)
          {
            v15 = "DTS_6_1_B";
            goto LABEL_26;
          }
          if (a1 == 11468807)
          {
            v15 = "DTS_6_1_C";
            goto LABEL_26;
          }
        }
      }
      else if (a1 > 12910595)
      {
        if (a1 <= 13369367)
        {
          if (a1 <= 13107206)
          {
            switch(a1)
            {
              case 12910596:
                v15 = "Logic_4_0_C";
                goto LABEL_26;
              case 12976134:
                v15 = "Logic_6_0_B";
                goto LABEL_26;
              case 13041671:
                v15 = "Logic_6_1_B";
                goto LABEL_26;
            }
          }
          else if (a1 > 13238283)
          {
            if (a1 == 13238284)
            {
              v15 = "Logic_Atmos_7_1_4_B";
              goto LABEL_26;
            }
            if (a1 == 13303822)
            {
              v15 = "Logic_Atmos_7_1_6";
              goto LABEL_26;
            }
          }
          else
          {
            if (a1 == 13107207)
            {
              v15 = "Logic_6_1_D";
              goto LABEL_26;
            }
            if (a1 == 13172744)
            {
              v15 = "Logic_7_1_B";
              goto LABEL_26;
            }
          }
        }
        else if (a1 > 13631499)
        {
          if (a1 > 13762571)
          {
            if (a1 == 13762572)
            {
              v15 = "CICP_19";
              goto LABEL_26;
            }
            if (a1 == 13828110)
            {
              v15 = "CICP_20";
              goto LABEL_26;
            }
          }
          else
          {
            if (a1 == 13631500)
            {
              v15 = "CICP_17";
              goto LABEL_26;
            }
            if (a1 == 13697038)
            {
              v15 = "CICP_18";
              goto LABEL_26;
            }
          }
        }
        else if (a1 > 13500427)
        {
          if (a1 == 13500428)
          {
            v15 = "CICP_15";
            goto LABEL_26;
          }
          if (a1 == 13565962)
          {
            v15 = "CICP_16";
            goto LABEL_26;
          }
        }
        else
        {
          if (a1 == 13369368)
          {
            v15 = "CICP_13";
            goto LABEL_26;
          }
          if (a1 == 13434888)
          {
            v15 = "CICP_14";
            goto LABEL_26;
          }
        }
      }
      else if (a1 <= 12386311)
      {
        if (a1 <= 12124163)
        {
          switch(a1)
          {
            case 11927559:
              v15 = "DTS_6_1_D";
              goto LABEL_26;
            case 11993096:
              v15 = "AAC_7_1_B";
              goto LABEL_26;
            case 12058632:
              v15 = "AAC_7_1_C";
              goto LABEL_26;
          }
        }
        else if (a1 > 12255237)
        {
          if (a1 == 12255238)
          {
            v15 = "WAVE_5_1_B";
            goto LABEL_26;
          }
          if (a1 == 12320775)
          {
            v15 = "WAVE_6_1";
            goto LABEL_26;
          }
        }
        else
        {
          if (a1 == 12124164)
          {
            v15 = "WAVE_4_0_B";
            goto LABEL_26;
          }
          if (a1 == 12189701)
          {
            v15 = "WAVE_5_0_B";
            goto LABEL_26;
          }
        }
      }
      else if (a1 > 12648463)
      {
        if (a1 > 12779529)
        {
          if (a1 == 12779530)
          {
            v15 = "Atmos_5_1_4";
            goto LABEL_26;
          }
          if (a1 == 12845066)
          {
            v15 = "Atmos_7_1_2";
            goto LABEL_26;
          }
        }
        else
        {
          if (a1 == 12648464)
          {
            v15 = "Atmos_9_1_6";
            goto LABEL_26;
          }
          if (a1 == 12713992)
          {
            v15 = "Atmos_5_1_2";
            goto LABEL_26;
          }
        }
      }
      else if (a1 >= 12517376)
      {
        if (a1 == 12517376)
        {
          v15 = "HOA_ACN_N3D";
          goto LABEL_26;
        }
        if (a1 == 12582924)
        {
          v15 = "Atmos_7_1_4";
          goto LABEL_26;
        }
      }
      else
      {
        if (a1 == 12386312)
        {
          v15 = "WAVE_7_1";
          goto LABEL_26;
        }
        if (a1 == 12451840)
        {
          v15 = "HOA_ACN_SN3D";
          goto LABEL_26;
        }
      }
LABEL_25:
      v15 = "Unknown";
LABEL_26:
      std::string::basic_string[abi:ne180100]<0>(a2, v15);
      return;
    }
    v5 = llroundf(sqrtf((float)(unsigned __int16)a1));
    if (v5)
      v6 = v5 * v5 == (unsigned __int16)a1;
    else
      v6 = 0;
    if (!v6)
      goto LABEL_25;
    std::string::basic_string[abi:ne180100]<0>(&v21, "HOA_ACN_SN3D");
    v7 = std::string::append(&v21, " ", 1uLL);
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&__p, v5 - 1);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
  }
  v18 = std::string::append(&v22, (const std::string::value_type *)p_p, size);
  v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v18->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_2105B0CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void GetChannelLayoutSphericalCoordinates(const AudioChannelLayout *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t mNumberChannelDescriptions;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  float *v9;
  float v10;
  float *v11;
  float v12;
  float v13;
  float v14;
  float *v15;
  UInt32 v16;
  float v17;
  uint8x8_t v18;
  unsigned int v19;
  std::vector<char>::pointer begin;
  int v21;
  unint64_t v22;
  int end;
  AudioChannelLayoutTag mChannelLayoutTag;
  AudioFormatPropertyID v25;
  const AudioChannelLayout *p_mChannelBitmap;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  int v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  int v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  int v62;
  std::vector<char> outPropertyData;
  UInt32 ioPropertyDataSize;
  UInt32 inSpecifier;
  void *v66;
  char *v67;
  char *v68;
  void *v69;
  char *v70;
  char *v71;
  void *__p;
  char *v73;
  char *v74;

  __p = 0;
  v73 = 0;
  v74 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  v66 = 0;
  v67 = 0;
  v68 = 0;
  if (a1->mChannelLayoutTag == 0x10000)
  {
    v18 = (uint8x8_t)vcnt_s8((int8x8_t)a1->mChannelBitmap);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = v18.i32[0];
LABEL_24:
    LOBYTE(inSpecifier) = 0;
    std::vector<char>::vector(&outPropertyData, 0x20uLL, (const std::vector<char>::value_type *)&inSpecifier);
    begin = outPropertyData.__begin_;
    *(_QWORD *)outPropertyData.__begin_ = 0;
    *((_DWORD *)begin + 2) = 0;
    if (v19 <= 1)
      v21 = 1;
    else
      v21 = v19;
    v22 = (20 * v21 + 12);
    LOBYTE(inSpecifier) = 0;
    end = (int)outPropertyData.__end_;
    if (v22 <= outPropertyData.__end_ - begin)
    {
      if (v22 < outPropertyData.__end_ - begin)
      {
        end = (_DWORD)begin + v22;
        outPropertyData.__end_ = &begin[v22];
      }
    }
    else
    {
      std::vector<char>::__append(&outPropertyData, v22 - (outPropertyData.__end_ - begin), (std::vector<char>::const_reference)&inSpecifier);
      begin = outPropertyData.__begin_;
      end = (int)outPropertyData.__end_;
    }
    *((_DWORD *)begin + 2) = v19;
    mChannelLayoutTag = a1->mChannelLayoutTag;
    inSpecifier = end - (_DWORD)begin;
    if (mChannelLayoutTag == 0x10000)
      v25 = 1668116578;
    else
      v25 = 1668116588;
    if (mChannelLayoutTag == 0x10000)
      p_mChannelBitmap = (const AudioChannelLayout *)&a1->mChannelBitmap;
    else
      p_mChannelBitmap = a1;
    AudioFormatGetProperty(v25, 4u, p_mChannelBitmap, &inSpecifier, begin);
    v27 = outPropertyData.__begin_;
    v28 = *((unsigned int *)outPropertyData.__begin_ + 2);
    if (v28 > (outPropertyData.__end_ - outPropertyData.__begin_ - 12) / 0x14uLL)
LABEL_89:
      __assert_rtn("GetNumberChannelDescriptions", "CoreAudioBaseTypes.hpp", 2237, "GetAudioChannelLayout().mNumberChannelDescriptions <= (mStorage.size() - kHeaderSize) / sizeof(AudioChannelDescription)");
    v29 = 0;
    while (v29 < v28)
    {
      v30 = &v27[20 * v29 + 20];
      v31 = v73;
      if (v73 >= v74)
      {
        v33 = (char *)__p;
        v34 = (v73 - (_BYTE *)__p) >> 2;
        v35 = v34 + 1;
        if ((unint64_t)(v34 + 1) >> 62)
          goto LABEL_98;
        v36 = v74 - (_BYTE *)__p;
        if ((v74 - (_BYTE *)__p) >> 1 > v35)
          v35 = v36 >> 1;
        if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL)
          v37 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v37 = v35;
        if (v37)
        {
          v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v74, v37);
          v33 = (char *)__p;
          v31 = v73;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[4 * v34];
        *(_DWORD *)v39 = *(_DWORD *)v30;
        v32 = v39 + 4;
        while (v31 != v33)
        {
          v40 = *((_DWORD *)v31 - 1);
          v31 -= 4;
          *((_DWORD *)v39 - 1) = v40;
          v39 -= 4;
        }
        __p = v39;
        v73 = v32;
        v74 = &v38[4 * v37];
        if (v33)
          operator delete(v33);
      }
      else
      {
        *(_DWORD *)v73 = *(_DWORD *)v30;
        v32 = v31 + 4;
      }
      v73 = v32;
      v41 = &outPropertyData.__begin_[20 * v29 + 24];
      v42 = v70;
      if (v70 >= v71)
      {
        v44 = (char *)v69;
        v45 = (v70 - (_BYTE *)v69) >> 2;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 62)
          goto LABEL_98;
        v47 = v71 - (_BYTE *)v69;
        if ((v71 - (_BYTE *)v69) >> 1 > v46)
          v46 = v47 >> 1;
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
          v48 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v48 = v46;
        if (v48)
        {
          v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v71, v48);
          v44 = (char *)v69;
          v42 = v70;
        }
        else
        {
          v49 = 0;
        }
        v50 = &v49[4 * v45];
        *(_DWORD *)v50 = *(_DWORD *)v41;
        v43 = v50 + 4;
        while (v42 != v44)
        {
          v51 = *((_DWORD *)v42 - 1);
          v42 -= 4;
          *((_DWORD *)v50 - 1) = v51;
          v50 -= 4;
        }
        v69 = v50;
        v70 = v43;
        v71 = &v49[4 * v48];
        if (v44)
          operator delete(v44);
      }
      else
      {
        *(_DWORD *)v70 = *(_DWORD *)v41;
        v43 = v42 + 4;
      }
      v70 = v43;
      v52 = &outPropertyData.__begin_[20 * v29 + 28];
      v53 = v67;
      if (v67 >= v68)
      {
        v55 = (char *)v66;
        v56 = (v67 - (_BYTE *)v66) >> 2;
        v57 = v56 + 1;
        if ((unint64_t)(v56 + 1) >> 62)
LABEL_98:
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v58 = v68 - (_BYTE *)v66;
        if ((v68 - (_BYTE *)v66) >> 1 > v57)
          v57 = v58 >> 1;
        if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFFCLL)
          v59 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v59 = v57;
        if (v59)
        {
          v60 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<float>>((uint64_t)&v68, v59);
          v55 = (char *)v66;
          v53 = v67;
        }
        else
        {
          v60 = 0;
        }
        v61 = &v60[4 * v56];
        *(_DWORD *)v61 = *(_DWORD *)v52;
        v54 = v61 + 4;
        while (v53 != v55)
        {
          v62 = *((_DWORD *)v53 - 1);
          v53 -= 4;
          *((_DWORD *)v61 - 1) = v62;
          v61 -= 4;
        }
        v66 = v61;
        v67 = v54;
        v68 = &v60[4 * v59];
        if (v55)
          operator delete(v55);
      }
      else
      {
        *(_DWORD *)v67 = *(_DWORD *)v52;
        v54 = v53 + 4;
      }
      v67 = v54;
      ++v29;
      v27 = outPropertyData.__begin_;
      v28 = *((unsigned int *)outPropertyData.__begin_ + 2);
      if (v28 > (outPropertyData.__end_ - outPropertyData.__begin_ - 12) / 0x14uLL)
        goto LABEL_89;
    }
    outPropertyData.__end_ = v27;
    operator delete(v27);
    goto LABEL_91;
  }
  if (a1->mChannelLayoutTag)
  {
    v19 = (unsigned __int16)a1->mChannelLayoutTag;
    goto LABEL_24;
  }
  mNumberChannelDescriptions = a1->mNumberChannelDescriptions;
  LODWORD(outPropertyData.__begin_) = 0;
  std::vector<float>::resize((uint64_t)&__p, mNumberChannelDescriptions, &outPropertyData);
  v5 = a1->mNumberChannelDescriptions;
  LODWORD(outPropertyData.__begin_) = 0;
  std::vector<float>::resize((uint64_t)&v69, v5, &outPropertyData);
  v6 = a1->mNumberChannelDescriptions;
  LODWORD(outPropertyData.__begin_) = 0;
  std::vector<float>::resize((uint64_t)&v66, v6, &outPropertyData);
  v7 = a1->mNumberChannelDescriptions;
  if ((_DWORD)v7)
  {
    v8 = 0;
    v9 = &a1->mChannelDescriptions[0].mCoordinates[2];
    do
    {
      if ((*(_DWORD *)(v9 - 3) & 3) == 1)
      {
        v12 = *(v9 - 2);
        v13 = *(v9 - 1);
        v14 = *v9;
        v15 = (float *)v66;
        *((float *)v66 + v8) = sqrtf((float)((float)(v13 * v13) + (float)(v12 * v12)) + (float)(*v9 * *v9));
        if (fabsf(v12) < 0.000001 && fabsf(v13) < 0.000001)
        {
          *((_DWORD *)__p + v8) = 0;
          if (v14 <= 0.0)
          {
            if (v14 < 0.0)
              *((_DWORD *)v69 + v8) = -1028390912;
            else
              *((_DWORD *)v69 + v8) = 0;
          }
          else
          {
            *((_DWORD *)v69 + v8) = 1119092736;
          }
          goto LABEL_17;
        }
        v17 = atan2f(v12, v13) * 57.2957795;
        *((float *)__p + v8) = v17;
        v10 = asinf(v14 / v15[v8]) * 57.2957795;
        v11 = (float *)v69;
      }
      else
      {
        if ((*(_DWORD *)(v9 - 3) & 3) != 2)
        {
          v16 = *((_DWORD *)v9 - 4);
          ioPropertyDataSize = 20;
          inSpecifier = v16;
          if (!AudioFormatGetProperty(0x6473636Cu, 4u, &inSpecifier, &ioPropertyDataSize, &outPropertyData))
          {
            *((_DWORD *)__p + v8) = outPropertyData.__end_;
            *((_DWORD *)v69 + v8) = HIDWORD(outPropertyData.__end_);
            *((_DWORD *)v66 + v8) = outPropertyData.__end_cap_.__value_;
          }
          v7 = a1->mNumberChannelDescriptions;
          goto LABEL_17;
        }
        *((float *)__p + v8) = *(v9 - 2);
        *((float *)v69 + v8) = *(v9 - 1);
        v10 = *v9;
        v11 = (float *)v66;
      }
      v11[v8] = v10;
LABEL_17:
      v9 += 5;
      ++v8;
    }
    while (v8 < v7);
  }
LABEL_91:
  _ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_S6_EEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_S6_EJEJEJRS6_S9_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(a2, (uint64_t)&__p, (uint64_t)&v69, (uint64_t)&v66);
  if (v66)
  {
    v67 = (char *)v66;
    operator delete(v66);
  }
  if (v69)
  {
    v70 = (char *)v69;
    operator delete(v69);
  }
  if (__p)
  {
    v73 = (char *)__p;
    operator delete(__p);
  }
}

void sub_2105B131C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

void GetChannelLayoutSphericalCoordinates(AudioChannelLayoutTag a1@<W0>, _QWORD *a2@<X8>)
{
  AudioChannelLayout *begin;
  std::vector<char> __p;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  begin = (AudioChannelLayout *)__p.__begin_;
  *((_DWORD *)__p.__begin_ + 1) = 0;
  begin->mNumberChannelDescriptions = 0;
  begin->mChannelLayoutTag = a1;
  GetChannelLayoutSphericalCoordinates(begin, a2);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2105B13F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GetChannelLayoutChannelLabels(AudioChannelLayoutTag a1@<W0>, std::vector<unsigned int> *a2@<X8>)
{
  AudioChannelLayout *begin;
  std::vector<char> __p;
  std::vector<char>::value_type __x;

  __x = 0;
  std::vector<char>::vector(&__p, 0x20uLL, &__x);
  begin = (AudioChannelLayout *)__p.__begin_;
  *((_DWORD *)__p.__begin_ + 1) = 0;
  begin->mNumberChannelDescriptions = 0;
  begin->mChannelLayoutTag = a1;
  GetChannelLayoutChannelLabels(begin, a2);
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
}

void sub_2105B1470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void GetChannelLayoutChannelLabels(const AudioChannelLayout *a1@<X0>, std::vector<unsigned int> *a2@<X8>)
{
  UInt32 mChannelLayoutTag;
  uint8x8_t v5;
  uint64_t v6;
  std::vector<char>::pointer begin;
  unsigned int v8;
  char *v9;
  int end;
  std::vector<unsigned int>::pointer v11;
  AudioChannelDescription *mChannelDescriptions;
  AudioChannelLabel mChannelLabel;
  AudioChannelLayoutTag v14;
  AudioFormatPropertyID v15;
  const AudioChannelLayout *p_mChannelBitmap;
  char *v17;
  std::vector<char>::pointer v18;
  std::vector<unsigned int>::pointer v19;
  unsigned int v20;
  std::vector<char>::value_type v21[4];
  std::vector<char> __x;

  if (a1->mChannelLayoutTag == 0x10000)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)a1->mChannelBitmap);
    v5.i16[0] = vaddlv_u8(v5);
    mChannelLayoutTag = v5.i32[0];
  }
  else if (a1->mChannelLayoutTag)
  {
    mChannelLayoutTag = (unsigned __int16)a1->mChannelLayoutTag;
  }
  else
  {
    mChannelLayoutTag = a1->mNumberChannelDescriptions;
  }
  v6 = mChannelLayoutTag;
  LODWORD(__x.__begin_) = -1;
  std::vector<unsigned int>::vector(a2, mChannelLayoutTag, (const std::vector<unsigned int>::value_type *)&__x);
  if (a1->mChannelLayoutTag)
  {
    v21[0] = 0;
    std::vector<char>::vector(&__x, 0x20uLL, v21);
    begin = __x.__begin_;
    *(_QWORD *)__x.__begin_ = 0;
    *((_DWORD *)begin + 2) = 0;
    if (mChannelLayoutTag <= 1)
      v8 = 1;
    else
      v8 = mChannelLayoutTag;
    v9 = (char *)(20 * v8 + 12);
    v21[0] = 0;
    end = (int)__x.__end_;
    if (v9 <= (std::vector<char>::pointer)(__x.__end_ - begin))
    {
      if (v9 < (std::vector<char>::pointer)(__x.__end_ - begin))
      {
        end = (_DWORD)begin + (_DWORD)v9;
        __x.__end_ = &v9[(_QWORD)begin];
      }
    }
    else
    {
      std::vector<char>::__append(&__x, (std::vector<char>::size_type)&v9[-(__x.__end_ - begin)], v21);
      begin = __x.__begin_;
      end = (int)__x.__end_;
    }
    *((_DWORD *)begin + 2) = mChannelLayoutTag;
    v14 = a1->mChannelLayoutTag;
    *(_DWORD *)v21 = end - (_DWORD)begin;
    if (v14 == 0x10000)
      v15 = 1668116578;
    else
      v15 = 1668116588;
    if (v14 == 0x10000)
      p_mChannelBitmap = (const AudioChannelLayout *)&a1->mChannelBitmap;
    else
      p_mChannelBitmap = a1;
    AudioFormatGetProperty(v15, 4u, p_mChannelBitmap, (UInt32 *)v21, begin);
    v17 = __x.__begin_;
    if (mChannelLayoutTag)
    {
      v18 = __x.__begin_ + 12;
      v19 = a2->__begin_;
      do
      {
        v20 = *(_DWORD *)v18;
        v18 += 20;
        *v19++ = v20;
        --v6;
      }
      while (v6);
    }
    else if (!__x.__begin_)
    {
      return;
    }
    __x.__end_ = v17;
    operator delete(v17);
  }
  else if (mChannelLayoutTag)
  {
    v11 = a2->__begin_;
    mChannelDescriptions = a1->mChannelDescriptions;
    do
    {
      mChannelLabel = mChannelDescriptions->mChannelLabel;
      ++mChannelDescriptions;
      *v11++ = mChannelLabel;
      --v6;
    }
    while (v6);
  }
}

void sub_2105B1604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t IsLFEChannelLabel(unsigned int a1)
{
  return (a1 < 0x3F) & (0x4000002000000010uLL >> a1);
}

uint64_t GetNumChannelsForAudioChannelLayoutTag(uint64_t result)
{
  return (unsigned __int16)result;
}

void std::vector<char>::__append(std::vector<char> *this, std::vector<char>::size_type __n, std::vector<char>::const_reference __x)
{
  std::vector<char>::size_type v4;
  char *value;
  char *end;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  size_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  std::vector<char>::value_type *v16;
  std::vector<char>::pointer begin;
  char v18;

  v4 = __n;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  if (value - end >= __n)
  {
    if (__n)
    {
      v13 = &end[__n];
      do
      {
        *end++ = *__x;
        --v4;
      }
      while (v4);
      end = v13;
    }
    this->__end_ = end;
  }
  else
  {
    v8 = end - this->__begin_;
    v9 = v8 + __n;
    if ((uint64_t)(v8 + __n) < 0)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = value - this->__begin_;
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)operator new(v11);
    else
      v12 = 0;
    v14 = &v12[v8];
    v15 = &v12[v8 + v4];
    v16 = &v12[v8];
    do
    {
      *v16++ = *__x;
      --v4;
    }
    while (v4);
    begin = this->__begin_;
    if (end != this->__begin_)
    {
      do
      {
        v18 = *--end;
        *--v14 = v18;
      }
      while (end != begin);
      end = this->__begin_;
    }
    this->__begin_ = v14;
    this->__end_ = v15;
    this->__end_cap_.__value_ = &v12[v11];
    if (end)
      operator delete(end);
  }
}

_QWORD *_ZNSt3__112__tuple_implINS_15__tuple_indicesIJLm0ELm1ELm2EEEEJNS_6vectorIfNS_9allocatorIfEEEES6_S6_EEC2B8ne180100IJLm0ELm1ELm2EEJS6_S6_S6_EJEJEJRS6_S9_S9_EEENS1_IJXspT_EEEENS_13__tuple_typesIJDpT0_EEENS1_IJXspT1_EEEENSB_IJDpT2_EEEDpOT3_(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1 + 3, *(const void **)a3, *(_QWORD *)(a3 + 8), (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2);
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  std::vector<float>::__init_with_size[abi:ne180100]<float *,float *>(a1 + 6, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 2);
  return a1;
}

void sub_2105B1804(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;
  void *v5;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

id getPersonalizedIRDataLog(void)
{
  if (getPersonalizedIRDataLog(void)::onceToken != -1)
    dispatch_once(&getPersonalizedIRDataLog(void)::onceToken, &__block_literal_global_3);
  return (id)getPersonalizedIRDataLog(void)::gLog;
}

void ___Z24getPersonalizedIRDataLogv_block_invoke()
{
  os_log_t v0;
  void *v1;

  v0 = os_log_create("com.apple.coreaudio", "PersonalizedIRData");
  v1 = (void *)getPersonalizedIRDataLog(void)::gLog;
  getPersonalizedIRDataLog(void)::gLog = (uint64_t)v0;

}

uint64_t IR::PersonalizedIRData::Implementation::Implementation(uint64_t a1, uint64_t a2, char a3)
{
  __int128 *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  dispatch_queue_t v9;
  void *v10;
  __int128 v12;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = a3;
  *(_BYTE *)(a1 + 17) = 1;
  *(_QWORD *)(a1 + 48) = 0;
  v4 = (__int128 *)(a1 + 56);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 16);
    *v4 = v5;
  }
  *(_DWORD *)(a1 + 80) = -1;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  IR::DataCache::create(v4, &v12);
  std::shared_ptr<std::vector<IR::IRDataNode>>::operator=[abi:ne180100](a1, &v12);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
  if (*((_QWORD *)&v12 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = dispatch_queue_create("PersonalizedHRIR.SerialQueue", 0);
  v10 = *(void **)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v9;

  return a1;
}

void sub_2105B1998(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;

  v3 = *(_QWORD **)(v1 + 48);
  if (v3 == (_QWORD *)(v1 + 24))
  {
    v4 = 4;
    v3 = (_QWORD *)(v1 + 24);
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

_QWORD *IR::DataCache::create@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;

  v4 = (_QWORD *)operator new();
  IR::DataCache::DataCache((uint64_t)v4, a1);
  return std::shared_ptr<IR::DataCache>::shared_ptr[abi:ne180100]<IR::DataCache,void>(a2, v4);
}

void sub_2105B1A50(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC7928](v1, 0x1072C409BDB5A60);
  _Unwind_Resume(a1);
}

void IR::PersonalizedIRData::Implementation::~Implementation(id *this)
{
  _BYTE *v2;
  std::mutex *v3;
  IR::PersonalizedIRData::Implementation *v4;
  uint64_t v5;

  v2 = *this;
  v3 = (std::mutex *)((char *)*this + 80);
  std::mutex::lock(v3);
  v2[200] = 1;
  std::mutex::unlock(v3);

  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  v4 = (IR::PersonalizedIRData::Implementation *)this[6];
  if (v4 == (IR::PersonalizedIRData::Implementation *)(this + 3))
  {
    v5 = 4;
    v4 = (IR::PersonalizedIRData::Implementation *)(this + 3);
    goto LABEL_7;
  }
  if (v4)
  {
    v5 = 5;
LABEL_7:
    (*(void (**)(void))(*(_QWORD *)v4 + 8 * v5))();
  }
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)this);
}

_QWORD *IR::PersonalizedIRData::Implementation::UnregisterObservers(IR::PersonalizedIRData::Implementation *this)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *result;
  uint64_t v5;
  _BYTE v6[12];
  __int16 v7;
  const char *v8;
  _BYTE *v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  getPersonalizedIRDataLog();
  v2 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = (_QWORD *)((char *)this + 56);
    if (*((char *)this + 79) < 0)
      v3 = (_QWORD *)*v3;
    *(_DWORD *)v6 = 136315394;
    *(_QWORD *)&v6[4] = v3;
    v7 = 2080;
    v8 = "UnregisterObservers";
    _os_log_impl(&dword_210570000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] Unregistering observers.", v6, 0x16u);
  }

  if (*((_BYTE *)this + 16))
    IR::PersonalizedIRData::Implementation::UnregisterPersonalizedHRTFAllowedListener(this);
  else
    IR::PersonalizedIRData::Implementation::UnregisterBTCServicesAndMAObservers(this);
  *(_QWORD *)v6 = &off_24CA2C890;
  v9 = v6;
  std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](v6, (_QWORD *)this + 3);
  result = v9;
  if (v9 == v6)
  {
    v5 = 4;
    result = v6;
  }
  else
  {
    if (!v9)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

uint64_t IR::DataCache::clearCFDataCache(IR::DataCache *this)
{
  std::recursive_mutex *v2;
  NSObject *v3;
  _QWORD *v4;
  uint64_t v5;
  char *v6;
  const void *v7;
  int v9;
  _QWORD *v10;
  __int16 v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v2 = (std::recursive_mutex *)((char *)this + 16);
  std::recursive_mutex::lock((std::recursive_mutex *)((char *)this + 16));
  getPersonalizedIRDataLog();
  v3 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = (_QWORD *)((char *)this + 144);
    if (*((char *)this + 167) < 0)
      v4 = (_QWORD *)*v4;
    v9 = 136315394;
    v10 = v4;
    v11 = 2080;
    v12 = "clearCFDataCache";
    _os_log_impl(&dword_210570000, v3, OS_LOG_TYPE_DEFAULT, "[%s|%s] Clearing personalized HRTF cache.", (uint8_t *)&v9, 0x16u);
  }

  v5 = 0;
  v6 = (char *)this + 184;
  do
  {
    v7 = *(const void **)&v6[v5];
    *(_QWORD *)&v6[v5] = 0;
    if (v7)
      CFRelease(v7);
    v5 += 8;
  }
  while (v5 != 16);
  *((_WORD *)this + 84) = 0;
  *((_QWORD *)this + 22) = 0;
  std::recursive_mutex::unlock(v2);
  return 0;
}

void sub_2105B1D4C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void IR::PersonalizedIRData::Implementation::RegisterObservers(uint64_t a1, uint64_t a2, int a3)
{
  NSObject *v6;
  _QWORD *v7;
  unsigned int *v8;
  unsigned int *v9;
  OSStatus v10;
  NSObject *v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  uint32_t v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  AudioObjectPropertyAddress inAddress;
  AudioObjectID inObjectID;
  _QWORD handler[5];
  uint8_t buf[4];
  _QWORD *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  AudioObjectID v28;
  __int16 v29;
  OSStatus v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  getPersonalizedIRDataLog();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v7 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v7 = (_QWORD *)*v7;
    *(_DWORD *)buf = 136315394;
    v24 = v7;
    v25 = 2080;
    v26 = "RegisterObservers";
    _os_log_impl(&dword_210570000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] Registering observers.", buf, 0x16u);
  }

  std::function<void ()(BOOL)>::operator=((_QWORD *)(a1 + 24), a2);
  if (*(_BYTE *)(a1 + 16))
  {
    inObjectID = 0;
    if (AudioDSPCoreUtility::GetDeviceOrPortID((AudioDSPCoreUtility *)&inObjectID, v8) || !inObjectID)
    {
      getPersonalizedIRDataLog();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        IR::PersonalizedIRData::Implementation::RegisterObservers();

      IR::PersonalizedIRData::Implementation::UnregisterPersonalizedHRTFAllowedListener((IR::PersonalizedIRData::Implementation *)a1);
    }
    else if (inObjectID != *(_DWORD *)(a1 + 96))
    {
      IR::PersonalizedIRData::Implementation::UnregisterPersonalizedHRTFAllowedListener((IR::PersonalizedIRData::Implementation *)a1);
      *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"afrhbolg";
      inAddress.mElement = 0;
      v10 = AudioObjectAddPropertyListener(inObjectID, &inAddress, (AudioObjectPropertyListenerProc)IR::PersonalizedIRData::HALListenerCallbackFunction, (void *)a1);
      getPersonalizedIRDataLog();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v11;
      if (v10)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        {
          v13 = (_QWORD *)(a1 + 56);
          if (*(char *)(a1 + 79) < 0)
            v13 = (_QWORD *)*v13;
          *(_DWORD *)buf = 136315906;
          v24 = v13;
          v25 = 2080;
          v26 = "RegisterObservers";
          v27 = 1024;
          v28 = inObjectID;
          v29 = 1024;
          v30 = v10;
          _os_log_error_impl(&dword_210570000, v12, OS_LOG_TYPE_ERROR, "[%s|%s] Failed to register personalizedHRTFAllowed listener for device ID: %u. Error: %d", buf, 0x22u);
        }
      }
      else if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        IR::PersonalizedIRData::Implementation::RegisterObservers();
      }

    }
    *(_DWORD *)(a1 + 96) = inObjectID;
    IR::PersonalizedIRData::Implementation::CheckIfPersonalizedHRIRIsAllowed((IR::PersonalizedIRData::Implementation *)a1, v9);
    if (!a3)
      return;
LABEL_31:
    v19 = *(_QWORD *)(a1 + 48);
    if (v19)
    {
      buf[0] = 1;
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v19 + 48))(v19, buf);
    }
    return;
  }
  if (*(_DWORD *)(a1 + 80) == -1)
  {
    v14 = *(NSObject **)(a1 + 88);
    handler[0] = MEMORY[0x24BDAC760];
    handler[1] = 3221225472;
    handler[2] = ___ZN2IR18PersonalizedIRData14Implementation17RegisterObserversERKNSt3__18functionIFvbEEEb_block_invoke;
    handler[3] = &__block_descriptor_40_e8_v12__0i8l;
    handler[4] = a1;
    v15 = notify_register_dispatch("BTCloudServicesSoundProfileChangedNotification", (int *)(a1 + 80), v14, handler);
    getPersonalizedIRDataLog();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = v16;
    if (v15)
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
        IR::PersonalizedIRData::Implementation::RegisterObservers();

      *(_DWORD *)(a1 + 80) = -1;
    }
    else
    {
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        IR::PersonalizedIRData::Implementation::RegisterObservers();

    }
  }
  atomic_store(1u, (unsigned __int8 *)(a1 + 17));
  if (a3)
    goto LABEL_31;
}

_QWORD *std::function<void ()(BOOL)>::operator=(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v6, a2);
  std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](v6, a1);
  v3 = v7;
  if (v7 == v6)
  {
    v4 = 4;
    v3 = v6;
    goto LABEL_5;
  }
  if (v7)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

uint64_t ___ZN2IR18PersonalizedIRData14Implementation17RegisterObserversERKNSt3__18functionIFvbEEEb_block_invoke(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  __int16 v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(result + 32);
  if (*(_QWORD *)(v1 + 48))
  {
    getPersonalizedIRDataLog();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(v1 + 56);
      if (*(char *)(v1 + 79) < 0)
        v3 = (_QWORD *)*v3;
      v5 = 136315394;
      v6 = v3;
      v7 = 2080;
      v8 = "RegisterObservers_block_invoke";
      _os_log_impl(&dword_210570000, v2, OS_LOG_TYPE_DEFAULT, "[%s|%s] SoundProfile data has changed.", (uint8_t *)&v5, 0x16u);
    }

    LOBYTE(v5) = 1;
    v4 = *(_QWORD *)(v1 + 48);
    if (!v4)
      std::__throw_bad_function_call[abi:ne180100]();
    return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)v4 + 48))(v4, &v5);
  }
  return result;
}

void IR::PersonalizedIRData::Implementation::UnregisterPersonalizedHRTFAllowedListener(IR::PersonalizedIRData::Implementation *this)
{
  AudioObjectID v2;
  int *v3;
  OSStatus v4;
  NSObject *v5;
  NSObject *v6;
  _QWORD *v7;
  int v8;
  AudioObjectPropertyAddress v9;
  uint8_t buf[4];
  _QWORD *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  OSStatus v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v3 = (int *)((char *)this + 96);
  v2 = *((_DWORD *)this + 24);
  if (v2)
  {
    v9.mElement = 0;
    *(_QWORD *)&v9.mSelector = *(_QWORD *)"afrhbolg";
    v4 = AudioObjectRemovePropertyListener(v2, &v9, (AudioObjectPropertyListenerProc)IR::PersonalizedIRData::HALListenerCallbackFunction, this);
    getPersonalizedIRDataLog();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = v5;
    if (v4)
    {
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v7 = (_QWORD *)((char *)this + 56);
        if (*((char *)this + 79) < 0)
          v7 = (_QWORD *)*v7;
        v8 = *v3;
        *(_DWORD *)buf = 136315906;
        v11 = v7;
        v12 = 2080;
        v13 = "UnregisterPersonalizedHRTFAllowedListener";
        v14 = 1024;
        v15 = v8;
        v16 = 1024;
        v17 = v4;
        _os_log_impl(&dword_210570000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] Failed to unregister personalizedHRTFAllowed listener. Device ID: %u. Error: %d", buf, 0x22u);
      }
    }
    else if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      IR::PersonalizedIRData::Implementation::UnregisterPersonalizedHRTFAllowedListener();
    }

    *v3 = 0;
  }
}

uint64_t IR::PersonalizedIRData::HALListenerCallbackFunction(IR::PersonalizedIRData *this, unsigned int a2, unsigned int a3, AudioObjectPropertyAddress *a4, void *a5)
{
  NSObject *v6;
  NSObject *v7;
  AudioObjectPropertyElement *p_mElement;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v19;
  AudioObjectPropertyElement *v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  getPersonalizedIRDataLog();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = v6;
  if (a4)
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      p_mElement = &a4[4].mElement;
      if (SHIBYTE(a4[6].mScope) < 0)
        p_mElement = *(AudioObjectPropertyElement **)p_mElement;
      v19 = 136315394;
      v20 = p_mElement;
      v21 = 2080;
      v22 = "HALListenerCallbackFunction";
      _os_log_impl(&dword_210570000, v7, OS_LOG_TYPE_DEFAULT, "[%s|%s] Personalized HRIR configuration has changed, reloading HRIR.", (uint8_t *)&v19, 0x16u);
    }

    IR::PersonalizedIRData::Implementation::CheckIfPersonalizedHRIRIsAllowed((IR::PersonalizedIRData::Implementation *)a4, v9);
    LOBYTE(v19) = 1;
    v10 = *(_QWORD *)&a4[4].mSelector;
    if (!v10)
      std::__throw_bad_function_call[abi:ne180100]();
    (*(void (**)(uint64_t, int *))(*(_QWORD *)v10 + 48))(v10, &v19);
  }
  else
  {
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      IR::PersonalizedIRData::HALListenerCallbackFunction(v7, v11, v12, v13, v14, v15, v16, v17);

  }
  return 0;
}

uint64_t IR::PersonalizedIRData::Implementation::CheckIfPersonalizedHRIRIsAllowed(IR::PersonalizedIRData::Implementation *this, unsigned int *a2)
{
  int DeviceOrPortID;
  OSStatus PropertyData;
  OSStatus v5;
  NSObject *v6;
  _QWORD *v7;
  unsigned __int8 v8;
  NSObject *v9;
  _QWORD *v10;
  unsigned __int8 v11;
  AudioObjectPropertyAddress inAddress;
  UInt32 ioDataSize;
  uint64_t outData;
  uint8_t buf[4];
  _QWORD *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  OSStatus v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 16))
  {
    outData = 0;
    DeviceOrPortID = AudioDSPCoreUtility::GetDeviceOrPortID((AudioDSPCoreUtility *)&outData, a2);
    if (DeviceOrPortID || !(_DWORD)outData)
    {
      getPersonalizedIRDataLog();
      v9 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v10 = (_QWORD *)((char *)this + 56);
        if (*((char *)this + 79) < 0)
          v10 = (_QWORD *)*v10;
        *(_DWORD *)buf = 136315906;
        v17 = v10;
        v18 = 2080;
        v19 = "CheckIfPersonalizedHRIRIsAllowed";
        v20 = 1024;
        v21 = 0;
        v22 = 1024;
        v23 = DeviceOrPortID;
        _os_log_impl(&dword_210570000, v9, OS_LOG_TYPE_DEFAULT, "[%s|%s] Unknown device ID, setting personalizedHRTFAllowed = %u. Error: %d", buf, 0x22u);
      }

      v8 = 0;
    }
    else
    {
      inAddress.mElement = 0;
      ioDataSize = 4;
      *(_QWORD *)&inAddress.mSelector = *(_QWORD *)"afrhbolg";
      PropertyData = AudioObjectGetPropertyData(outData, &inAddress, 0, 0, &ioDataSize, (char *)&outData + 4);
      if (PropertyData)
      {
        v5 = PropertyData;
        getPersonalizedIRDataLog();
        v6 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          v7 = (_QWORD *)((char *)this + 56);
          if (*((char *)this + 79) < 0)
            v7 = (_QWORD *)*v7;
          *(_DWORD *)buf = 136316162;
          v17 = v7;
          v18 = 2080;
          v19 = "CheckIfPersonalizedHRIRIsAllowed";
          v20 = 1024;
          v21 = HIDWORD(outData);
          v22 = 1024;
          v23 = outData;
          v24 = 1024;
          v25 = v5;
          _os_log_impl(&dword_210570000, v6, OS_LOG_TYPE_DEFAULT, "[%s|%s] Could not read soundProfileAllowed property, setting personalizedHRTFAllowed = %u. Device ID %u. Error: %d", buf, 0x28u);
        }

      }
      v8 = HIDWORD(outData) != 0;
    }
    atomic_store(v8, (unsigned __int8 *)this + 17);
  }
  else
  {
    atomic_store(1u, (unsigned __int8 *)this + 17);
  }
  v11 = atomic_load((unsigned __int8 *)this + 17);
  return v11 & 1;
}

void IR::PersonalizedIRData::Implementation::UnregisterBTCServicesAndMAObservers(IR::PersonalizedIRData::Implementation *this)
{
  int v2;
  NSObject *v3;

  v2 = *((_DWORD *)this + 20);
  if (v2 != -1)
  {
    notify_cancel(v2);
    *((_DWORD *)this + 20) = -1;
    getPersonalizedIRDataLog();
    v3 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      IR::PersonalizedIRData::Implementation::UnregisterBTCServicesAndMAObservers();

  }
}

void IR::PersonalizedIRData::Implementation::GetCFData(uint64_t a1@<X0>, int a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  CFTypeRef v10;
  NSObject *v11;
  _BOOL4 v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  std::mutex *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  std::chrono::steady_clock::time_point v27;
  std::chrono::steady_clock::time_point v28;
  std::chrono::system_clock::time_point v29;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v30;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v31;
  int v32;
  NSObject *v33;
  CFTypeRef *v34;
  CFDictionaryRef CFDictionaryRef;
  unint64_t v36;
  _QWORD v37[3];
  std::unique_lock<std::mutex> __lk;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  CFTypeRef cf;
  _BYTE buf[22];
  __int16 v44;
  const char *v45;
  __int16 v46;
  int v47;
  _QWORD v48[3];
  _QWORD *v49;
  CFTypeRef v50;
  CFTypeRef v51;
  _BYTE v52[24];
  _BYTE *v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  IR::DataCache::getFromCFDataCache(*(_QWORD *)a1, a2, &cf);
  v10 = cf;
  getPersonalizedIRDataLog();
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10 || (a3 & 1) != 0)
  {
    if (v12)
    {
      v17 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v17 = (_QWORD *)*v17;
      *(_DWORD *)buf = 136315906;
      if (cf)
        v18 = "";
      else
        v18 = " (empty)";
      *(_QWORD *)&buf[4] = v17;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = "GetCFData";
      v44 = 2080;
      v45 = v18;
      v46 = 1024;
      v47 = a2;
      _os_log_impl(&dword_210570000, v11, OS_LOG_TYPE_DEFAULT, "[%s|%s] Personalized HRIR%s type %u is returned from cache.", buf, 0x26u);
    }

    buf[0] = 0;
    std::pair<BOOL,applesauce::CF::DataRef>::pair[abi:ne180100]<BOOL,applesauce::CF::DataRef&,0>(a5, buf, &cf);
    goto LABEL_71;
  }
  if (v12)
  {
    v13 = (_QWORD *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0)
      v13 = (_QWORD *)*v13;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v13;
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = "GetCFData";
    v44 = 1024;
    LODWORD(v45) = a2;
    _os_log_impl(&dword_210570000, v11, OS_LOG_TYPE_DEFAULT, "[%s|%s] Could not find Personalized HRTF type %u in local cache, trying to fetch.", buf, 0x1Cu);
  }

  if (*(_BYTE *)(a1 + 16))
  {
    v14 = *(_QWORD *)a1;
    v48[0] = &unk_24CA2D3E0;
    v49 = v48;
    IR::DataCache::DownloadAndCacheCFData(v14, (uint64_t)v48, 0);
    v15 = v49;
    if (v49 == v48)
    {
      v16 = 4;
      v15 = v48;
    }
    else
    {
      if (!v49)
      {
LABEL_26:
        IR::DataCache::getFromCFDataCache(*(_QWORD *)a1, a2, buf);
        *(_BYTE *)a5 = 0;
        *(_QWORD *)(a5 + 8) = *(_QWORD *)buf;
        goto LABEL_71;
      }
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
    goto LABEL_26;
  }
  v19 = (std::__shared_weak_count *)operator new(0x90uLL);
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2D360;
  v19[1].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  v21 = (std::mutex *)&v19[1];
  v19[5].__shared_weak_owners_ = 0;
  *(_OWORD *)&v19[1].__shared_owners_ = 0u;
  v19[2].std::__shared_count = 0u;
  *(_OWORD *)&v19[2].__shared_weak_owners_ = 0u;
  v19[3].__shared_owners_ = 0;
  v19[3].__shared_weak_owners_ = 1018212795;
  v19[4].std::__shared_count = 0u;
  *(_OWORD *)&v19[4].__shared_weak_owners_ = 0u;
  *(std::__shared_count *)((char *)&v19[5].std::__shared_count + 2) = 0u;
  *(_QWORD *)buf = v19 + 1;
  *(_QWORD *)&buf[8] = v19;
  v22 = *(_QWORD *)a1;
  v39 = v19 + 1;
  v40 = v19;
  do
    v23 = __ldxr(p_shared_owners);
  while (__stxr(v23 + 1, p_shared_owners));
  v41 = a1;
  v53 = 0;
  v24 = operator new(0x20uLL);
  *v24 = &off_24CA2D398;
  v24[1] = v21;
  v39 = 0;
  v40 = 0;
  v24[2] = v19;
  v24[3] = a1;
  v53 = v24;
  IR::DataCache::DownloadAndCacheCFData(v22, (uint64_t)v52, 1);
  v25 = v53;
  if (v53 == v52)
  {
    v26 = 4;
    v25 = v52;
    goto LABEL_28;
  }
  if (v53)
  {
    v26 = 5;
LABEL_28:
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v19[1];
  __lk.__owns_ = 1;
  std::mutex::lock(v21);
  v27.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * a4;
  do
  {
    if (!__lk.__owns_)
      goto LABEL_74;
    if (BYTE1(v19[5].__shared_weak_owners_))
    {
      LOBYTE(v19[5].__shared_weak_owners_) = 0;
      goto LABEL_53;
    }
    if (v27.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
      break;
    v28.__d_.__rep_ = v27.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v28.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v29.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (v29.__d_.__rep_)
      {
        if (v29.__d_.__rep_ < 1)
        {
          if ((unint64_t)v29.__d_.__rep_ < 0xFFDF3B645A1CAC09)
          {
            v30 = 0x8000000000000000;
            goto LABEL_44;
          }
        }
        else if ((unint64_t)v29.__d_.__rep_ > 0x20C49BA5E353F7)
        {
          v30 = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_42;
        }
        v30 = 1000 * v29.__d_.__rep_;
      }
      else
      {
        v30 = 0;
      }
LABEL_42:
      if (v30 > (v28.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
      {
        v31.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_45:
        std::condition_variable::__do_timed_wait((std::condition_variable *)&v19[3].__shared_weak_owners_, &__lk, v31);
        std::chrono::steady_clock::now();
        continue;
      }
LABEL_44:
      v31.__d_.__rep_ = v30 + v28.__d_.__rep_;
      goto LABEL_45;
    }
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < v27.__d_.__rep_);
  if (!__lk.__owns_)
LABEL_74:
    __assert_rtn("operator()", "PersonalizedIRData.mm", 618, "cvLock.owns_lock()");
  v32 = BYTE1(v19[5].__shared_weak_owners_);
  LOBYTE(v19[5].__shared_weak_owners_) = v32 ^ 1;
  if (!v32)
  {
    getPersonalizedIRDataLog();
    v33 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
      IR::PersonalizedIRData::Implementation::GetCFData();

  }
LABEL_53:
  applesauce::CF::TypeRef::TypeRef((applesauce::CF::TypeRef *)&v50, "personalized_hrtf_timeout");
  if (LOBYTE(v19[5].__shared_weak_owners_))
    v34 = (CFTypeRef *)MEMORY[0x24BDBD270];
  else
    v34 = (CFTypeRef *)MEMORY[0x24BDBD268];
  v51 = *v34;
  v37[0] = &v50;
  v37[1] = 1;
  CFDictionaryRef = applesauce::CF::details::make_CFDictionaryRef((uint64_t)v37);
  v37[2] = CFDictionaryRef;
  if (v51)
    CFRelease(v51);
  if (v50)
    CFRelease(v50);
  if (AudioStatisticsLibraryLoader(void)::once != -1)
    dispatch_once(&AudioStatisticsLibraryLoader(void)::once, &__block_literal_global_24);
  if (off_254A6DF68)
    off_254A6DF68(CFDictionaryRef, 268435457, 5);
  IR::DataCache::getFromCFDataCache(*(_QWORD *)a1, a2, v37);
  *(_BYTE *)a5 = v19[5].__shared_weak_owners_;
  *(_QWORD *)(a5 + 8) = v37[0];
  if (CFDictionaryRef)
    CFRelease(CFDictionaryRef);
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  do
    v36 = __ldaxr(p_shared_owners);
  while (__stlxr(v36 - 1, p_shared_owners));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
LABEL_71:
  if (cf)
    CFRelease(cf);
}

void sub_2105B2C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::mutex *a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

void IR::DataCache::getFromCFDataCache(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  std::recursive_mutex *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v6 = (std::recursive_mutex *)(a1 + 16);
  std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 16));
  if (a2 == 2)
  {
    v7 = *(_QWORD *)(a1 + 192);
    if (v7)
      CFRetain(*(CFTypeRef *)(a1 + 192));
  }
  else if (a2 == 1)
  {
    v7 = *(_QWORD *)(a1 + 184);
    if (v7)
      CFRetain(*(CFTypeRef *)(a1 + 184));
  }
  else
  {
    getPersonalizedIRDataLog();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = (_QWORD *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0)
        v9 = (_QWORD *)*v9;
      v10 = 136315650;
      v11 = v9;
      v12 = 2080;
      v13 = "getFromCFDataCache";
      v14 = 1024;
      v15 = a2;
      _os_log_impl(&dword_210570000, v8, OS_LOG_TYPE_DEFAULT, "[%s|%s] Returning null dictionary for personalized HRTF type %u.", (uint8_t *)&v10, 0x1Cu);
    }

    v7 = 0;
  }
  *a3 = v7;
  std::recursive_mutex::unlock(v6);
}

void sub_2105B2EC0(_Unwind_Exception *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  _Unwind_Resume(a1);
}

void IR::DataCache::DownloadAndCacheCFData(uint64_t a1, uint64_t a2, int a3)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  NSObject *v9;
  _QWORD *v10;
  id v11;
  NSObject *v12;
  dispatch_queue_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  OSStatus PropertyData;
  NSObject *v19;
  char v20;
  uint64_t v21;
  OSStatus v22;
  OSStatus Length;
  NSObject *v24;
  _BOOL4 v25;
  unsigned int v26;
  unsigned int v27;
  CFDataRef v28;
  NSObject *v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  _QWORD *v40;
  const char *v41;
  uint64_t v42;
  void *exception;
  CFTypeRef v44;
  char v45;
  unsigned int v46;
  CFDataRef v47;
  CFDataRef theData;
  char v49;
  CFTypeRef cf;
  UInt32 v51;
  CFTypeRef outData;
  AudioObjectPropertyAddress v53;
  UInt32 ioDataSize;
  uint64_t inAddress;
  uint64_t inAddress_8;
  _QWORD v57[6];
  std::__shared_weak_count *v58;
  _BYTE v59[24];
  _BYTE *v60;
  uint8_t v61[4];
  const char *v62;
  __int16 v63;
  OSStatus v64;
  __int16 v65;
  UInt32 v66;
  _BYTE buf[12];
  __int16 v68;
  _BYTE v69[10];
  const char *v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  if (!a3)
  {
    inAddress = *(_QWORD *)"ibipbolg";
    inAddress_8 = 0;
    *(_QWORD *)buf = &kBTHALPluginBundleID;
    *(_DWORD *)&buf[8] = 8;
    *(_QWORD *)&v69[2] = (char *)&inAddress_8 + 4;
    LODWORD(v70) = 4;
    ioDataSize = 32;
    PropertyData = AudioObjectGetPropertyData(1u, (const AudioObjectPropertyAddress *)&inAddress, 0, 0, &ioDataSize, buf);
    if (PropertyData)
    {
      getPersonalizedIRDataLog();
      v19 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        IR::DataCache::DownloadAndCacheCFData(PropertyData, v19);

      v20 = 0;
LABEL_57:
      v27 = mach_absolute_time();
      v28 = 0;
      v45 = v20;
      v46 = v27;
      v47 = 0;
LABEL_58:
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 16));
      *(_BYTE *)(a1 + 168) = v20;
      *(_QWORD *)(a1 + 176) = v27;
      *(_BYTE *)(a1 + 169) = 0;
      std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 16));
      if (v28)
      {
        CFRetain(v28);
        v44 = v28;
        IR::DataCache::parseSoundProfileAndAddToCache(a1, (CFDataRef *)&v44);
        if (v44)
          CFRelease(v44);
      }
      getPersonalizedIRDataLog();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        v40 = (_QWORD *)(a1 + 144);
        if (*(char *)(a1 + 167) < 0)
          v40 = (_QWORD *)*v40;
        v41 = "true";
        if (!*(_BYTE *)(a1 + 169))
          v41 = "false";
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v40;
        v68 = 2080;
        *(_QWORD *)v69 = "DownloadAndCacheCFData";
        *(_WORD *)&v69[8] = 2080;
        v70 = v41;
        _os_log_impl(&dword_210570000, v39, OS_LOG_TYPE_DEFAULT, "[%s|%s] Executing callback with valid data = %s.", buf, 0x20u);
      }

      v42 = *(_QWORD *)(a2 + 24);
      if (v42)
      {
        buf[0] = *(_BYTE *)(a1 + 169);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v42 + 48))(v42, buf);
      }
      if (v28)
        CFRelease(v28);
      return;
    }
    v53.mElement = 0;
    outData = 0;
    *(_QWORD *)&v53.mSelector = *(_QWORD *)"frhcbolg";
    v51 = 8;
    v22 = AudioObjectGetPropertyData(HIDWORD(inAddress_8), &v53, 0, 0, &v51, &outData);
    applesauce::CF::DictionaryRef::DictionaryRef((applesauce::CF::DictionaryRef *)&cf, outData);
    if (v22 || v51 != 8)
    {
      getPersonalizedIRDataLog();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v61 = 136315650;
        v62 = "GetEnrolledSoundProfileFromBTHAL";
        v63 = 1024;
        v64 = v22;
        v65 = 1024;
        v66 = v51;
        _os_log_impl(&dword_210570000, v29, OS_LOG_TYPE_DEFAULT, "%s: Could not pull SoundProfile. Error: %d. Property size: %u", v61, 0x18u);
      }

    }
    else
    {
      if (cf)
      {
        applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,char const(&)[32]>((const __CFDictionary *)cf, "kBTAudioMsgPropertySoundProfile", &theData);
        if (v49)
        {
          if (!theData)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            MEMORY[0x212BC76A0](exception, "Could not construct");
          }
          Length = CFDataGetLength(theData);
          getPersonalizedIRDataLog();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
          if (Length)
          {
            if (v25)
            {
              *(_DWORD *)v61 = 136315394;
              v62 = "GetEnrolledSoundProfileFromBTHAL";
              v63 = 1024;
              v64 = Length;
              _os_log_impl(&dword_210570000, v24, OS_LOG_TYPE_DEFAULT, "%s: Successfully pulled SoundProfile pack. Data size: %u", v61, 0x12u);
            }

            v26 = mach_absolute_time();
            if (!v49)
              std::__throw_bad_optional_access[abi:ne180100]();
            v27 = v26;
            v45 = 1;
            v46 = v26;
            v28 = theData;
            if (theData)
              CFRetain(theData);
            v47 = v28;
            std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theData);
            if (cf)
              CFRelease(cf);
            v20 = 1;
            goto LABEL_58;
          }
          if (!v25)
            goto LABEL_54;
          *(_DWORD *)v61 = 136315138;
          v62 = "GetEnrolledSoundProfileFromBTHAL";
          v38 = "%s: Invalid SoundProfile pack: size = 0.";
        }
        else
        {
          getPersonalizedIRDataLog();
          v24 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
LABEL_54:

            std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&theData);
            v20 = 1;
LABEL_55:
            if (cf)
              CFRelease(cf);
            goto LABEL_57;
          }
          *(_DWORD *)v61 = 136315138;
          v62 = "GetEnrolledSoundProfileFromBTHAL";
          v38 = "%s: Invalid SoundProfile pack.";
        }
        _os_log_impl(&dword_210570000, v24, OS_LOG_TYPE_DEFAULT, v38, v61, 0xCu);
        goto LABEL_54;
      }
      getPersonalizedIRDataLog();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        IR::DataCache::DownloadAndCacheCFData(v30, v31, v32, v33, v34, v35, v36, v37);

    }
    v20 = 0;
    goto LABEL_55;
  }
  if (*(_BYTE *)(a1 + 201))
  {
    v6 = *(_QWORD *)a1;
    v5 = *(std::__shared_weak_count **)(a1 + 8);
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v8 = __ldxr(p_shared_weak_owners);
      while (__stxr(v8 + 1, p_shared_weak_owners));
    }
    getPersonalizedIRDataLog();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = (_QWORD *)(a1 + 144);
      if (*(char *)(a1 + 167) < 0)
        v10 = (_QWORD *)*v10;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v10;
      v68 = 2080;
      *(_QWORD *)v69 = "DownloadAndCacheCFData";
      _os_log_impl(&dword_210570000, v9, OS_LOG_TYPE_DEFAULT, "[%s|%s] Searching for enrolled SoundProfile.", buf, 0x16u);
    }

    v11 = objc_alloc_init(MEMORY[0x24BEAFBB0]);
    dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = dispatch_queue_create("com.apple.coreaudio.pHRTF", v12);
    objc_msgSend(v11, "setDispatchQueue:", v13);

    v57[0] = MEMORY[0x24BDAC760];
    v57[1] = 3321888768;
    v57[2] = ___ZN2IR9DataCache22DownloadAndCacheCFDataENSt3__18functionIFvbEEEb_block_invoke;
    v57[3] = &__block_descriptor_88_ea8_40c38_ZTSNSt3__18weak_ptrIN2IR9DataCacheEEE56c28_ZTSKNSt3__18functionIFvbEEE_e47_v24__0__SpatialSoundProfileRecord_8__NSError_16l;
    v57[4] = a1;
    v57[5] = v6;
    v58 = v5;
    if (v5)
    {
      v14 = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    v16 = v59;
    std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v59, a2);
    objc_msgSend(v11, "fetchSpatialSoundProfileRecordWithCompletion:", v57);
    if (v60 == v59)
    {
      v17 = 4;
    }
    else
    {
      if (!v60)
      {
LABEL_38:
        if (v58)
          std::__shared_weak_count::__release_weak(v58);

        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        return;
      }
      v17 = 5;
      v16 = v60;
    }
    (*(void (**)(_QWORD *))(*v16 + 8 * v17))(v16);
    goto LABEL_38;
  }
  v21 = *(_QWORD *)(a2 + 24);
  if (v21)
  {
    buf[0] = 0;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 48))(v21, buf);
  }
}

void sub_2105B3590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

id **IR::PersonalizedIRData::PersonalizedIRData(id **this)
{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  return IR::PersonalizedIRData::PersonalizedIRData(this, (uint64_t)v2);
}

{
  _QWORD v2[3];

  memset(v2, 0, sizeof(v2));
  return IR::PersonalizedIRData::PersonalizedIRData(this, (uint64_t)v2);
}

id **IR::PersonalizedIRData::PersonalizedIRData(id **a1, uint64_t a2)
{
  void *v4;
  void *v5;
  char v6;
  id *v7;

  *a1 = 0;
  objc_msgSend(MEMORY[0x24BDD1488], "mainBundle");
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend(v4, "bundleIdentifier");
  v5 = (void *)objc_claimAutoreleasedReturnValue();

  v6 = objc_msgSend(v5, "isEqualToString:", CFSTR("com.apple.audiomxd"));
  v7 = (id *)operator new();
  IR::PersonalizedIRData::Implementation::Implementation((uint64_t)v7, a2, v6);
  std::unique_ptr<IR::PersonalizedIRData::Implementation>::reset[abi:ne180100](a1, v7);

  return a1;
}

void sub_2105B3758(_Unwind_Exception *a1)
{
  id **v1;
  void *v2;
  uint64_t v3;

  MEMORY[0x212BC7928](v3, 0x10B2C4051ED0559);

  std::unique_ptr<IR::PersonalizedIRData::Implementation>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

id **IR::PersonalizedIRData::PersonalizedIRData(id **this, const void *a2)
{
  void *__p[2];
  char v5;

  caulk::make_string((caulk *)"%p", (uint64_t)__p, a2);
  IR::PersonalizedIRData::PersonalizedIRData(this, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return this;
}

{
  void *__p[2];
  char v5;

  caulk::make_string((caulk *)"%p", (uint64_t)__p, a2);
  IR::PersonalizedIRData::PersonalizedIRData(this, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return this;
}

void sub_2105B3830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_2105B38A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IR::PersonalizedIRData::~PersonalizedIRData(IR::PersonalizedIRData::Implementation **this)
{
  IR::PersonalizedIRData::Implementation::UnregisterObservers(*this);
  std::unique_ptr<IR::PersonalizedIRData::Implementation>::reset[abi:ne180100]((id **)this, 0);
}

_QWORD *IR::PersonalizedIRData::UnregisterObservers(IR::PersonalizedIRData::Implementation **this)
{
  return IR::PersonalizedIRData::Implementation::UnregisterObservers(*this);
}

uint64_t IR::PersonalizedIRData::CleanUp(IR::PersonalizedIRData::Implementation **this)
{
  IR::PersonalizedIRData::Implementation *v1;

  v1 = *this;
  IR::PersonalizedIRData::Implementation::UnregisterObservers(*this);
  return IR::DataCache::clearCFDataCache(*(IR::DataCache **)v1);
}

void IR::PersonalizedIRData::RegisterObservers(uint64_t *a1, uint64_t a2, int a3)
{
  IR::PersonalizedIRData::Implementation::RegisterObservers(*a1, a2, a3);
}

_QWORD *IR::PersonalizedIRData::RebuildCFDataCache(IR::DataCache ***a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  IR::DataCache::clearCFDataCache(**a1);
  v4 = (uint64_t)**a1;
  std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100]((uint64_t)v7, a2);
  IR::DataCache::DownloadAndCacheCFData(v4, (uint64_t)v7, *((_BYTE *)*a1 + 16) == 0);
  result = v8;
  if (v8 == v7)
  {
    v6 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v6 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v6))();
}

void sub_2105B39FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  char *v13;
  char *v15;
  uint64_t v16;

  v15 = a13;
  if (a13 == v13)
  {
    v16 = 4;
    v15 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v16 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v15 + 8 * v16))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void IR::PersonalizedIRData::GetCFData(uint64_t *a1@<X0>, int a2@<W1>, char a3@<W2>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  IR::PersonalizedIRData::Implementation::GetCFData(*a1, a2, a3, a4, a5);
}

uint64_t IR::PersonalizedIRData::GetStatus(IR::PersonalizedIRData *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)this;
  std::recursive_mutex::lock((std::recursive_mutex *)(v1 + 16));
  v2 = *(_QWORD *)(v1 + 168);
  std::recursive_mutex::unlock((std::recursive_mutex *)(v1 + 16));
  return v2;
}

uint64_t IR::PersonalizedIRData::ClearCache(IR::DataCache ***this)
{
  return IR::DataCache::clearCFDataCache(**this);
}

uint64_t IR::PersonalizedIRData::CheckIfPersonalizedHRIRIsAllowed(IR::PersonalizedIRData::Implementation **this, unsigned int *a2)
{
  return IR::PersonalizedIRData::Implementation::CheckIfPersonalizedHRIRIsAllowed(*this, a2);
}

uint64_t IR::PersonalizedIRData::IsPersonalizedHRIRAllowed(IR::PersonalizedIRData *this)
{
  unsigned __int8 v1;

  v1 = atomic_load((unsigned __int8 *)(*(_QWORD *)this + 17));
  return v1 & 1;
}

uint64_t IR::DataCache::DataCache(uint64_t a1, __int128 *a2)
{
  std::string *v4;
  __int128 v5;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  MEMORY[0x212BC77E4](a1 + 16);
  *(_QWORD *)(a1 + 80) = 850045863;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_QWORD *)(a1 + 136) = 0;
  v4 = (std::string *)(a1 + 144);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_WORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_WORD *)(a1 + 200) = 256;
  return a1;
}

void sub_2105B3B50(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::recursive_mutex *v2;
  std::mutex *v3;
  std::__shared_weak_count *v5;

  std::mutex::~mutex(v3);
  std::recursive_mutex::~recursive_mutex(v2);
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

_QWORD *std::shared_ptr<IR::DataCache>::shared_ptr[abi:ne180100]<IR::DataCache,void>(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  *a1 = a2;
  v4 = (_QWORD *)operator new();
  *v4 = &off_24CA2CB18;
  v4[1] = 0;
  v4[2] = 0;
  v4[3] = a2;
  a1[1] = v4;
  std::shared_ptr<IR::DataCache>::__enable_weak_this[abi:ne180100]<IR::DataCache,IR::DataCache,void>((uint64_t)a1, a2, (uint64_t)a2);
  return a1;
}

void sub_2105B3BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  a10 = 0;
  if (v10)
    std::default_delete<IR::DataCache>::operator()[abi:ne180100]((uint64_t)&a10, v10);
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<IR::DataCache>::__enable_weak_this[abi:ne180100]<IR::DataCache,IR::DataCache,void>(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (a2)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v9 = __ldxr(p_shared_weak_owners);
        while (__stxr(v9 + 1, p_shared_weak_owners));
        v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4)
        std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v10 = (unint64_t *)&v5->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void std::__shared_ptr_pointer<IR::DataCache *,std::shared_ptr<IR::DataCache>::__shared_ptr_default_delete<IR::DataCache,IR::DataCache>,std::allocator<IR::DataCache>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

void std::__shared_ptr_pointer<IR::DataCache *,std::shared_ptr<IR::DataCache>::__shared_ptr_default_delete<IR::DataCache,IR::DataCache>,std::allocator<IR::DataCache>>::__on_zero_shared(uint64_t a1)
{
  std::default_delete<IR::DataCache>::operator()[abi:ne180100](a1 + 24, *(_QWORD *)(a1 + 24));
}

void std::default_delete<IR::DataCache>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  std::__shared_weak_count *v5;

  if (a2)
  {
    v3 = 192;
    while (1)
    {
      v4 = *(const void **)(a2 + v3);
      if (v4)
        CFRelease(v4);
      v3 -= 8;
      if (v3 == 176)
      {
        if (*(char *)(a2 + 167) < 0)
          operator delete(*(void **)(a2 + 144));
        std::mutex::~mutex((std::mutex *)(a2 + 80));
        std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a2 + 16));
        v5 = *(std::__shared_weak_count **)(a2 + 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        JUMPOUT(0x212BC7928);
      }
    }
  }
}

void ___ZN2IR9DataCache22DownloadAndCacheCFDataENSt3__18functionIFvbEEEb_block_invoke(_QWORD *a1, void *a2, void *a3)
{
  id v5;
  char *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  _BOOL4 v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  _BOOL4 v16;
  _QWORD *v17;
  NSObject *v18;
  NSObject *v19;
  const void *v20;
  _QWORD *v21;
  _QWORD *v22;
  NSObject *v23;
  _QWORD *v24;
  const char *v25;
  uint64_t v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  CFTypeRef cf;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _BYTE buf[12];
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v5 = a2;
  v6 = a3;
  v7 = a1[4];
  v30 = 0;
  v31 = 0;
  v8 = (std::__shared_weak_count *)a1[6];
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v31 = v9;
    if (v9)
    {
      v30 = a1[5];
      if (v30)
      {
        v10 = std::mutex::try_lock((std::mutex *)(v7 + 80));
        if (v10 && !*(_BYTE *)(v7 + 200))
        {
          std::recursive_mutex::lock((std::recursive_mutex *)(v7 + 16));
          *(_BYTE *)(v7 + 168) = 1;
          *(_QWORD *)(v7 + 176) = mach_absolute_time();
          *(_BYTE *)(v7 + 169) = 0;
          std::recursive_mutex::unlock((std::recursive_mutex *)(v7 + 16));
          if (!v5 || v6)
          {
            getPersonalizedIRDataLog();
            v19 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              v21 = (_QWORD *)(v7 + 144);
              if (*(char *)(v7 + 167) < 0)
                v21 = (_QWORD *)*v21;
              *(_DWORD *)buf = 136315650;
              *(_QWORD *)&buf[4] = v21;
              v33 = 2080;
              v34 = "DownloadAndCacheCFData_block_invoke";
              v35 = 2112;
              v36 = v6;
              _os_log_impl(&dword_210570000, v19, OS_LOG_TYPE_DEFAULT, "[%s|%s] Could not pull SoundProfile. Error: %@", buf, 0x20u);
            }
          }
          else
          {
            objc_msgSend(v5, "soundProfileData");
            v13 = objc_claimAutoreleasedReturnValue();
            v14 = -[NSObject length](v13, "length");
            getPersonalizedIRDataLog();
            v15 = objc_claimAutoreleasedReturnValue();
            v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
            if (v14)
            {
              if (v16)
              {
                v17 = (_QWORD *)(v7 + 144);
                if (*(char *)(v7 + 167) < 0)
                  v17 = (_QWORD *)*v17;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v17;
                v33 = 2080;
                v34 = "DownloadAndCacheCFData_block_invoke";
                v35 = 1024;
                LODWORD(v36) = v14;
                _os_log_impl(&dword_210570000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] Successfully pulled SoundProfile pack. Size: %u", buf, 0x1Cu);
              }

              v18 = v13;
              v19 = v18;
              if (v18)
                CFRetain(v18);
              applesauce::CF::DataRef::DataRef((applesauce::CF::DataRef *)buf, v19);

              v20 = *(const void **)buf;
              if (*(_QWORD *)buf)
                CFRetain(*(CFTypeRef *)buf);
              cf = v20;
              IR::DataCache::parseSoundProfileAndAddToCache(v7, (CFDataRef *)&cf);
              if (cf)
                CFRelease(cf);
              if (*(_QWORD *)buf)
                CFRelease(*(CFTypeRef *)buf);
            }
            else
            {
              if (v16)
              {
                v22 = (_QWORD *)(v7 + 144);
                if (*(char *)(v7 + 167) < 0)
                  v22 = (_QWORD *)*v22;
                *(_DWORD *)buf = 136315650;
                *(_QWORD *)&buf[4] = v22;
                v33 = 2080;
                v34 = "DownloadAndCacheCFData_block_invoke";
                v35 = 1024;
                LODWORD(v36) = 0;
                _os_log_impl(&dword_210570000, v15, OS_LOG_TYPE_DEFAULT, "[%s|%s] Invalid SoundProfile pack. Length: %u", buf, 0x1Cu);
              }

              v19 = v13;
            }
          }

          getPersonalizedIRDataLog();
          v23 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            v24 = (_QWORD *)(v7 + 144);
            if (*(char *)(v7 + 167) < 0)
              v24 = (_QWORD *)*v24;
            v25 = "true";
            if (!*(_BYTE *)(v7 + 169))
              v25 = "false";
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = v24;
            v33 = 2080;
            v34 = "DownloadAndCacheCFData_block_invoke";
            v35 = 2080;
            v36 = v25;
            _os_log_impl(&dword_210570000, v23, OS_LOG_TYPE_DEFAULT, "[%s|%s] Executing callback with valid data = %s.", buf, 0x20u);
          }

          v26 = a1[10];
          if (v26)
          {
            buf[0] = *(_BYTE *)(v7 + 169);
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v26 + 48))(v26, buf);
          }
        }
        else
        {
          getPersonalizedIRDataLog();
          v11 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = "DownloadAndCacheCFData_block_invoke";
            _os_log_impl(&dword_210570000, v11, OS_LOG_TYPE_DEFAULT, "%s: Aborting because DataCache is being destroyed.", buf, 0xCu);
          }

          if (!v10)
            goto LABEL_48;
        }
        std::mutex::unlock((std::mutex *)(v7 + 80));
LABEL_48:
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v28 = __ldaxr(p_shared_owners);
        while (__stlxr(v28 - 1, p_shared_owners));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
        goto LABEL_52;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  getPersonalizedIRDataLog();
  v12 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)&buf[4] = "DownloadAndCacheCFData_block_invoke";
    _os_log_impl(&dword_210570000, v12, OS_LOG_TYPE_DEFAULT, "%s: Failed to save personalized HRIR type. The caller no longer exists.", buf, 0xCu);
  }

  if (v9)
    goto LABEL_48;
LABEL_52:

}

void sub_2105B4224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t IR::DataCache::parseSoundProfileAndAddToCache(uint64_t a1, CFDataRef *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  CFTypeRef v7;
  NSObject *v8;
  uint64_t v9;
  int Length;
  NSObject *v11;
  uint64_t v12;
  void *exception;
  void *v15;
  uint64_t *v16;
  CFTypeRef v17;
  CFTypeRef cf;
  char v19;
  uint64_t v20;
  CFTypeRef v21;
  _BYTE buf[12];
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  applesauce::CF::make_DictionaryRef(a2, (applesauce::CF::DictionaryRef *)&v21);
  v3 = 0;
  v4 = 0;
  v20 = 0x200000001;
  v16 = (uint64_t *)(a1 + 144);
  do
  {
    if (!v21)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      MEMORY[0x212BC76A0](exception, "Could not construct");
    }
    v5 = *(_DWORD *)((char *)&v20 + v3);
    if (v5 == 1)
      v6 = "HRIR_ITDMod";
    else
      v6 = "HRIR_DFEQ";
    *(_QWORD *)buf = v6;
    applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,char const*>((const __CFDictionary *)v21, (char **)buf, &cf);
    if (v19)
    {
      std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 16));
      if (!v19)
        std::__throw_bad_optional_access[abi:ne180100]();
      v7 = cf;
      if (cf)
        CFRetain(cf);
      v17 = v7;
      IR::DataCache::addToCFDataCachePrivate(a1, v5, &v17);
      if (v17)
        CFRelease(v17);
      getPersonalizedIRDataLog();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v9 = a1 + 144;
        if (*(char *)(a1 + 167) < 0)
          v9 = *v16;
        if (!v19)
          std::__throw_bad_optional_access[abi:ne180100]();
        if (!cf)
        {
          v15 = __cxa_allocate_exception(0x10uLL);
          MEMORY[0x212BC76A0](v15, "Could not construct");
        }
        Length = CFDataGetLength((CFDataRef)cf);
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = v9;
        v23 = 2080;
        v24 = "parseSoundProfileAndAddToCache";
        v25 = 1024;
        v26 = v5;
        v27 = 1024;
        v28 = Length;
        _os_log_impl(&dword_210570000, v8, OS_LOG_TYPE_DEFAULT, "[%s|%s] Personalized HRIR type %u was found and stored in local CF cache. Length: %u.", buf, 0x22u);
      }

      std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 16));
    }
    else
    {
      getPersonalizedIRDataLog();
      v11 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v12 = a1 + 144;
        if (*(char *)(a1 + 167) < 0)
          v12 = *v16;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v12;
        v23 = 2080;
        v24 = "parseSoundProfileAndAddToCache";
        v25 = 1024;
        v26 = v5;
        _os_log_error_impl(&dword_210570000, v11, OS_LOG_TYPE_ERROR, "[%s|%s] Invalid SoundProfile pack, could not find personalized HRIR type %u.", buf, 0x1Cu);
      }

      v4 = 0xFFFFFFFFLL;
    }
    std::__optional_destruct_base<applesauce::CF::DataRef,false>::~__optional_destruct_base[abi:ne180100]((uint64_t)&cf);
    v3 += 4;
  }
  while (v3 != 8);
  if (v21)
    CFRelease(v21);
  if (!(_DWORD)v4)
  {
    std::recursive_mutex::lock((std::recursive_mutex *)(a1 + 16));
    *(_BYTE *)(a1 + 169) = 1;
    std::recursive_mutex::unlock((std::recursive_mutex *)(a1 + 16));
    return 0;
  }
  return v4;
}

void sub_2105B45DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    __clang_call_terminate(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_ea8_40c38_ZTSNSt3__18weak_ptrIN2IR9DataCacheEEE56c28_ZTSKNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return std::__function::__value_func<void ()(IR::IRDataNode &,unsigned int)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_2105B4704(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_ea8_40c38_ZTSNSt3__18weak_ptrIN2IR9DataCacheEEE56c28_ZTSKNSt3__18functionIFvbEEE(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  v2 = (_QWORD *)(a1 + 56);
  v3 = *(_QWORD **)(a1 + 80);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

uint64_t std::tuple<BOOL,unsigned int,applesauce::CF::DataRef>::~tuple(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  return a1;
}

void IR::DataCache::addToCFDataCachePrivate(uint64_t a1, int a2, const void **a3)
{
  const void *v4;
  const void *v5;
  const void *v6;
  NSObject *v7;

  if (a2 == 2)
  {
    v4 = *(const void **)(a1 + 192);
    v6 = *a3;
    *(_QWORD *)(a1 + 192) = *a3;
    if (v6)
      CFRetain(v6);
    if (v4)
      goto LABEL_6;
  }
  else if (a2 == 1)
  {
    v4 = *(const void **)(a1 + 184);
    v5 = *a3;
    *(_QWORD *)(a1 + 184) = *a3;
    if (v5)
      CFRetain(v5);
    if (v4)
LABEL_6:
      CFRelease(v4);
  }
  else
  {
    getPersonalizedIRDataLog();
    v7 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      IR::DataCache::addToCFDataCachePrivate();

  }
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,char const*>(const __CFDictionary *a1@<X0>, char **a2@<X1>, _BYTE *a3@<X8>)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<char const*>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDataGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

const void *applesauce::CF::details::at_key<char const*>(const __CFDictionary *a1, char **a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, *a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_2105B493C(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2105B4920);
}

void applesauce::CF::details::find_at_key_or_optional<applesauce::CF::DataRef,char const(&)[32]>(const __CFDictionary *a1@<X0>, char *a2@<X1>, _BYTE *a3@<X8>)
{
  const void *v4;
  const void *v5;
  CFTypeID v6;
  char v7;

  v4 = applesauce::CF::details::at_key<char const(&)[32]>(a1, a2);
  if (!v4)
    goto LABEL_5;
  v5 = v4;
  CFRetain(v4);
  v6 = CFGetTypeID(v5);
  if (v6 != CFDataGetTypeID())
  {
    CFRelease(v5);
LABEL_5:
    v7 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  *(_QWORD *)a3 = v5;
  v7 = 1;
LABEL_6:
  a3[8] = v7;
}

const void *applesauce::CF::details::at_key<char const(&)[32]>(const __CFDictionary *a1, char *a2)
{
  const void *Value;
  void *key;

  applesauce::CF::StringRef::StringRef((applesauce::CF::StringRef *)&key, a2);
  if (a1)
    Value = CFDictionaryGetValue(a1, key);
  if (key)
    CFRelease(key);
  if (!a1)
    return 0;
  return Value;
}

void sub_2105B4A40(void *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  applesauce::CF::StringRef::~StringRef((const void **)va);
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x2105B4A24);
}

uint64_t std::pair<BOOL,applesauce::CF::DataRef>::pair[abi:ne180100]<BOOL,applesauce::CF::DataRef&,0>(uint64_t a1, _BYTE *a2, CFTypeRef *a3)
{
  CFTypeRef v4;

  *(_BYTE *)a1 = *a2;
  v4 = *a3;
  if (*a3)
    CFRetain(*a3);
  *(_QWORD *)(a1 + 8) = v4;
  return a1;
}

_QWORD *std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2105B4D5C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

void std::__function::__func<IR::PersonalizedIRData::Implementation::UnregisterObservers(void)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::UnregisterObservers(void)::$_0>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<IR::PersonalizedIRData::Implementation::UnregisterObservers(void)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::UnregisterObservers(void)::$_0>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_24CA2C890;
  return result;
}

void std::__function::__func<IR::PersonalizedIRData::Implementation::UnregisterObservers(void)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::UnregisterObservers(void)::$_0>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_24CA2C890;
}

void std::__shared_ptr_emplace<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::SyncUtils,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::SyncUtils>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2D360;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::SyncUtils,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::SyncUtils>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2D360;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

void std::__shared_ptr_emplace<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::SyncUtils,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::SyncUtils>>::__on_zero_shared(uint64_t a1)
{
  std::mutex *v1;

  v1 = (std::mutex *)(a1 + 24);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex(v1);
}

_QWORD *std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_24CA2D398;
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0>,void ()(BOOL)>::~__func(_QWORD *a1)
{
  *a1 = &off_24CA2D398;
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0>,void ()(BOOL)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_24CA2D398;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0>,void ()(BOOL)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_24CA2D398;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

uint64_t std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0>,void ()(BOOL)>::destroy(uint64_t a1)
{
  return std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100](a1 + 8);
}

void std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0>,void ()(BOOL)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<DFTSetups>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_0>,void ()(BOOL)>::operator()(uint64_t a1)
{
  uint64_t v2;
  std::unique_lock<std::mutex>::mutex_type *m;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  std::unique_lock<std::mutex> v7;
  uint8_t buf[4];
  _QWORD *v9;
  __int16 v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 24);
  m = *(std::unique_lock<std::mutex>::mutex_type **)(a1 + 8);
  v7.__m_ = m;
  v7.__owns_ = 1;
  std::mutex::lock(m);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v4 + 112))
  {
    getPersonalizedIRDataLog();
    v5 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (_QWORD *)(v2 + 56);
      if (*(char *)(v2 + 79) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 136315394;
      v9 = v6;
      v10 = 2080;
      v11 = "operator()";
      _os_log_impl(&dword_210570000, v5, OS_LOG_TYPE_DEFAULT, "[%s|%s] Already timed out.", buf, 0x16u);
    }

  }
  else
  {
    *(_BYTE *)(v4 + 113) = 1;
    std::unique_lock<std::mutex>::unlock(&v7);
    std::condition_variable::notify_all((std::condition_variable *)(*(_QWORD *)(a1 + 8) + 64));
    if (!v7.__owns_)
      return;
    m = v7.__m_;
  }
  std::mutex::unlock(m);
}

void sub_2105B5080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void std::unique_lock<std::mutex>::unlock(std::unique_lock<std::mutex> *this)
{
  if (!this->__owns_)
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    JUMPOUT(0x2105B50E4);
  }
  std::mutex::unlock(this->__m_);
  this->__owns_ = 0;
}

void std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_2,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_2>,void ()(BOOL)>::~__func()
{
  JUMPOUT(0x212BC7928);
}

_QWORD *std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_2,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_2>,void ()(BOOL)>::__clone()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_24CA2D3E0;
  return result;
}

void std::__function::__func<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_2,std::allocator<IR::PersonalizedIRData::Implementation::GetCFData(PersonalizedHRIRType,BOOL,unsigned int)::$_2>,void ()(BOOL)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_24CA2D3E0;
}

id *std::unique_ptr<IR::PersonalizedIRData::Implementation>::reset[abi:ne180100](id **a1, id *a2)
{
  id *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    IR::PersonalizedIRData::Implementation::~Implementation(result);
    JUMPOUT(0x212BC7928);
  }
  return result;
}

void OUTLINED_FUNCTION_1_2(uint64_t a1@<X8>)
{
  uint64_t v1;

  *(_QWORD *)(v1 - 8) = a1;
}

void OUTLINED_FUNCTION_4_1(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_list va;

  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x1Cu);
}

uint64_t IR::FFTFilter::Implementation::initialize(IR::FFTFilter::Implementation *this, int a2, int a3, unsigned int a4, int a5, unsigned int a6, int a7, int a8, BOOL a9, BOOL a10)
{
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  int v22;
  uint64_t result;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t i;
  char *v50;
  uint64_t *v51;
  caulk::pooled_semaphore_mutex *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;

  if (*((_BYTE *)this + 45))
    (*(void (**)(IR::FFTFilter::Implementation *))(*(_QWORD *)this + 32))(this);
  if (!a2)
  {
    (*(void (**)(IR::FFTFilter::Implementation *))(*(_QWORD *)this + 40))(this);
    return 4294967246;
  }
  if (a10)
    v18 = a4;
  else
    v18 = 1;
  *((_DWORD *)this + 6) = a4;
  *((_DWORD *)this + 7) = v18;
  *((_DWORD *)this + 2) = a2;
  *((_DWORD *)this + 3) = a3;
  *((_DWORD *)this + 8) = a7;
  *((_BYTE *)this + 46) = a8;
  if (a8)
    *((_DWORD *)this + 8) = a3;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 42, v18);
  v19 = *((_DWORD *)this + 3);
  if (!v19)
  {
    v20 = *((_DWORD *)this + 2);
LABEL_21:
    *((_DWORD *)this + 4) = 0;
    *((_DWORD *)this + 5) = v20;
    *((_DWORD *)this + 3) = 0;
    if (*((_DWORD *)this + 7))
    {
      v26 = 0;
      v27 = 0;
      do
      {
        std::vector<float>::resize(*((_QWORD *)this + 42) + v26, a6 - 1 + *((_DWORD *)this + 2));
        ++v27;
        v26 += 24;
      }
      while (v27 < *((unsigned int *)this + 7));
    }
    std::vector<float>::resize((uint64_t)this + 384, a6);
    goto LABEL_46;
  }
  if (a5)
  {
    v20 = *((_DWORD *)this + 2);
    if (v20 <= v19)
      goto LABEL_21;
  }
  v21 = MultiRadixRealFFT::Size((IR::FFTFilter::Implementation *)((char *)this + 168));
  v22 = *((_DWORD *)this + 3);
  if (v21 != 2 * v22)
  {
    result = MultiRadixRealFFT::Initialize((IR::FFTFilter::Implementation *)((char *)this + 168), 2 * v22);
    if ((_DWORD)result)
      return result;
  }
  if (a5)
  {
    *((_DWORD *)this + 5) = *((_DWORD *)this + 3);
    if (*((_DWORD *)this + 7))
    {
      v24 = 0;
      v25 = 0;
      do
      {
        std::vector<float>::resize(*((_QWORD *)this + 42) + v24, (2 * *((_DWORD *)this + 3) - 1));
        ++v25;
        v24 += 24;
      }
      while (v25 < *((unsigned int *)this + 7));
    }
  }
  else
  {
    *((_DWORD *)this + 5) = 0;
  }
  std::vector<float>::resize((uint64_t)this + 384, *((unsigned int *)this + 3));
  v28 = *((_DWORD *)this + 3);
  v29 = *((_DWORD *)this + 2) - *((_DWORD *)this + 5);
  if (v29 / v28 * v28 >= v29)
    v30 = v29 / v28;
  else
    v30 = v29 / v28 + 1;
  *((_DWORD *)this + 4) = v30;
  std::vector<std::vector<float>>::resize((uint64_t *)this + 39, *((unsigned int *)this + 7));
  if (*((_DWORD *)this + 7))
  {
    v31 = 0;
    v32 = 0;
    do
    {
      std::vector<float>::resize(*((_QWORD *)this + 39) + v31, *((unsigned int *)this + 3));
      ++v32;
      v31 += 24;
    }
    while (v32 < *((unsigned int *)this + 7));
  }
  std::vector<std::vector<float>>::resize((uint64_t *)this + 45, *((unsigned int *)this + 6));
  if (*((_DWORD *)this + 6))
  {
    v33 = 0;
    v34 = 0;
    do
    {
      std::vector<float>::resize(*((_QWORD *)this + 45) + v33, *((unsigned int *)this + 3));
      ++v34;
      v33 += 24;
    }
    while (v34 < *((unsigned int *)this + 6));
  }
  std::vector<float>::resize((uint64_t)this + 184, (2 * *((_DWORD *)this + 4) * *((_DWORD *)this + 3) * *((_DWORD *)this + 7)));
  std::vector<std::vector<DSPSplitComplex>>::resize((uint64_t *)this + 26, *((unsigned int *)this + 7));
  if (*((_DWORD *)this + 7))
  {
    v35 = 0;
    v36 = 0;
    v37 = *((_QWORD *)this + 26);
    do
    {
      std::vector<DSPSplitComplex>::resize(v37 + 24 * v35, *((unsigned int *)this + 4));
      v37 = *((_QWORD *)this + 26);
      v38 = v37 + 24 * v35;
      v39 = *(_QWORD **)v38;
      v40 = *(_QWORD **)(v38 + 8);
      if (v39 != v40)
      {
        v41 = *((_QWORD *)this + 23);
        v42 = *((_DWORD *)this + 3);
        do
        {
          *v39 = v41 + 4 * v36;
          v39[1] = v41 + 4 * (v42 + v36);
          v39 += 2;
          v36 += 2 * v42;
        }
        while (v39 != v40);
      }
      ++v35;
    }
    while (v35 < *((unsigned int *)this + 7));
  }
  v43 = *((_DWORD *)this + 3);
  v44 = 2 * v43;
  v45 = 6 * v43;
  if (*((_BYTE *)this + 46))
    v46 = v45;
  else
    v46 = v44;
  std::vector<float>::resize((uint64_t)this + 240, v46);
  v47 = *((_QWORD *)this + 30);
  v48 = *((unsigned int *)this + 3);
  *((_QWORD *)this + 33) = v47;
  *((_QWORD *)this + 34) = v47 + 4 * v48;
  if (*((_BYTE *)this + 46))
  {
    *((_QWORD *)this + 35) = v47 + 4 * (2 * v48);
    *((_QWORD *)this + 36) = v47 + 4 * (3 * v48);
    *((_QWORD *)this + 37) = v47 + 4 * (4 * v48);
    *((_QWORD *)this + 38) = v47 + 4 * (5 * v48);
  }
LABEL_46:
  *((_BYTE *)this + 47) = a9;
  if (a9)
  {
    for (i = 0; i != 3; ++i)
    {
      v50 = (char *)this + 32 * i;
      v51 = (uint64_t *)(v50 + 48);
      v52 = (caulk::pooled_semaphore_mutex *)(v50 + 72);
      caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(v50 + 72));
      std::vector<IR::FFTFilterKernel>::resize(v51, a4);
      if (a4)
      {
        v53 = 0;
        do
        {
          IR::FFTFilterKernel::initialize((IR::FFTFilterKernel *)(*v51 + v53), *((_DWORD *)this + 2), *((_DWORD *)this + 3), a5);
          IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(*v51 + v53));
          v53 += 40;
        }
        while (40 * a4 != v53);
      }
      caulk::pooled_semaphore_mutex::_unlock(v52);
    }
  }
  else
  {
    caulk::pooled_semaphore_mutex::_lock((IR::FFTFilter::Implementation *)((char *)this + 72));
    std::vector<IR::FFTFilterKernel>::resize((uint64_t *)this + 6, a4);
    if (a4)
    {
      v54 = 0;
      do
      {
        IR::FFTFilterKernel::initialize((IR::FFTFilterKernel *)(*((_QWORD *)this + 6) + v54), *((_DWORD *)this + 2), *((_DWORD *)this + 3), a5);
        IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(*((_QWORD *)this + 6) + v54));
        v54 += 40;
      }
      while (40 * a4 != v54);
    }
    caulk::pooled_semaphore_mutex::_unlock((IR::FFTFilter::Implementation *)((char *)this + 72));
  }
  *((_QWORD *)this + 19) = (char *)this + 48;
  *((_QWORD *)this + 20) = (char *)this + 48;
  if (*((_BYTE *)this + 47))
    v55 = (char *)this + 80;
  else
    v55 = (char *)this + 48;
  *((_QWORD *)this + 18) = v55;
  v57 = 0;
  std::vector<float *>::assign((char **)this + 51, a4, &v57);
  v56 = *((unsigned int *)this + 7);
  v57 = 0;
  std::vector<float *>::assign((char **)this + 54, v56, &v57);
  (*(void (**)(IR::FFTFilter::Implementation *))(*(_QWORD *)this + 40))(this);
  result = 0;
  *((_BYTE *)this + 45) = 1;
  return result;
}

char *std::vector<float *>::assign(char **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 3)
  {
    v13 = (a1[1] - result) >> 3;
    if (v13 >= a2)
      v14 = a2;
    else
      v14 = (a1[1] - result) >> 3;
    for (; v14; --v14)
    {
      *(_QWORD *)result = *a3;
      result += 8;
    }
    if (a2 <= v13)
    {
      a1[1] = &(*a1)[8 * a2];
    }
    else
    {
      v15 = a1[1];
      v16 = &v15[8 * (a2 - v13)];
      v17 = 8 * a2 - 8 * v13;
      do
      {
        *(_QWORD *)v15 = *a3;
        v15 += 8;
        v17 -= 8;
      }
      while (v17);
      a1[1] = v16;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 61)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v8 = v6 >> 2;
    if (v6 >> 2 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF8)
      v9 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = std::vector<std::unique_ptr<IR::FFTFilterKernel>>::__vallocate[abi:ne180100](a1, v9);
    v10 = a1[1];
    v11 = &v10[8 * a2];
    v12 = 8 * a2;
    do
    {
      *(_QWORD *)v10 = *a3;
      v10 += 8;
      v12 -= 8;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void IR::FFTFilter::Implementation::uninitialize(IR::FFTFilter::Implementation *this)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  v2 = 0;
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_DWORD *)this + 6) = 0;
  *((_WORD *)this + 22) = 1;
  do
  {
    v3 = (char *)this + 32 * v2;
    v6 = *((_QWORD *)v3 + 6);
    v4 = *((_QWORD *)v3 + 7);
    v5 = v3 + 48;
    while (v4 != v6)
      IR::FFTFilterKernel::~FFTFilterKernel((IR::FFTFilterKernel *)(v4 - 40));
    *((_QWORD *)v5 + 1) = v6;
    caulk::pooled_semaphore_mutex::try_lock((IR::FFTFilter::Implementation *)((char *)this + 32 * v2 + 72));
    caulk::pooled_semaphore_mutex::_unlock((IR::FFTFilter::Implementation *)((char *)this + 32 * v2++ + 72));
  }
  while (v2 != 3);
  *((_QWORD *)this + 24) = *((_QWORD *)this + 23);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 26);
  *((_DWORD *)this + 58) = 0;
  *((_QWORD *)this + 31) = *((_QWORD *)this + 30);
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 39);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 42);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 45);
  *((_QWORD *)this + 49) = *((_QWORD *)this + 48);
  *((_QWORD *)this + 52) = *((_QWORD *)this + 51);
}

char *IR::FFTFilter::Implementation::getAndLockNextKernels(IR::FFTFilter::Implementation *this)
{
  int v2;
  char *v3;
  uint64_t v4;
  caulk::pooled_semaphore_mutex *v6;
  char v7;

  v6 = (caulk::pooled_semaphore_mutex *)(*((_QWORD *)this + 18) + 24);
  v2 = caulk::pooled_semaphore_mutex::try_lock(v6);
  v7 = v2;
  if (v2)
  {
    v6 = 0;
    v7 = 0;
    v3 = (char *)*((_QWORD *)this + 18);
LABEL_10:
    std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v6);
    return v3;
  }
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v6);
  if (*((_BYTE *)this + 47))
  {
    v4 = -96;
    while (1)
    {
      v6 = (IR::FFTFilter::Implementation *)((char *)this + v4 + 168);
      v7 = caulk::pooled_semaphore_mutex::try_lock(v6);
      if ((v7 & 1) != 0)
        break;
      std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v6);
      v4 += 32;
      if (!v4)
      {
        caulk::pooled_semaphore_mutex::_lock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)this + 18) + 24));
        return (char *)*((_QWORD *)this + 18);
      }
    }
    v3 = (char *)this + v4 + 144;
    v6 = 0;
    v7 = 0;
    goto LABEL_10;
  }
  return (char *)*((_QWORD *)this + 18);
}

uint64_t IR::FFTFilter::Implementation::setFilterKernels(IR::FFTFilter::Implementation *this, IR::FFTFilterKernel **a2)
{
  uint64_t v4;
  char *Kernels;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  BOOL v11;
  uint64_t v12;
  caulk::pooled_semaphore_mutex *v13;
  uint64_t v14;
  unsigned int v15;

  if (!*((_BYTE *)this + 45))
    return 4294956429;
  v4 = -96;
  do
  {
    if ((IR::FFTFilterKernel **)((char *)this + v4 + 144) == a2)
    {
      v12 = 0;
      *((_QWORD *)this + 20) = a2;
      v13 = (IR::FFTFilter::Implementation *)((char *)this + v4 + 168);
      goto LABEL_20;
    }
    v4 += 32;
  }
  while (v4);
  Kernels = IR::FFTFilter::Implementation::getAndLockNextKernels(this);
  v6 = *(_QWORD *)Kernels;
  v7 = *((_QWORD *)Kernels + 1);
  if (a2[1] - *a2 == v7 - *(_QWORD *)Kernels)
  {
    if (!IR::FFTFilterKernel::getNumActiveFFTSubFilters(*a2)
      || IR::FFTFilterKernel::getPartitionLength(*a2) == *((_DWORD *)this + 3))
    {
      v8 = *(_QWORD *)Kernels;
      if (*((_QWORD *)Kernels + 1) != *(_QWORD *)Kernels)
      {
        v9 = 0;
        v10 = 1;
        do
        {
          IR::FFTFilterKernel::operator=(v8 + 40 * v9, (uint64_t)*a2 + 40 * v9);
          v9 = v10;
          v8 = *(_QWORD *)Kernels;
          v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)Kernels + 1) - *(_QWORD *)Kernels) >> 3) > v10++;
        }
        while (v11);
      }
      v12 = 0;
      goto LABEL_19;
    }
    v6 = *(_QWORD *)Kernels;
    v7 = *((_QWORD *)Kernels + 1);
  }
  if (v7 != v6)
  {
    v14 = 0;
    v15 = 1;
    do
    {
      IR::FFTFilterKernel::reset((IR::FFTFilterKernel *)(v6 + 40 * v14));
      v14 = v15;
      v6 = *(_QWORD *)Kernels;
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)Kernels + 1) - *(_QWORD *)Kernels) >> 3) > v15++;
    }
    while (v11);
  }
  v12 = 4294956418;
LABEL_19:
  *((_QWORD *)this + 20) = Kernels;
  v13 = (caulk::pooled_semaphore_mutex *)(Kernels + 24);
LABEL_20:
  caulk::pooled_semaphore_mutex::_unlock(v13);
  return v12;
}

unsigned int *IR::FFTFilter::Implementation::setFilterCoeffs(IR::FFTFilter::Implementation *this, const float *const *a2, int a3, unsigned int a4)
{
  char *Kernels;
  unint64_t v9;
  unsigned int *v10;
  unsigned int *v11;

  if (!*((_BYTE *)this + 45))
    return (unsigned int *)4294956429;
  Kernels = IR::FFTFilter::Implementation::getAndLockNextKernels(this);
  if (a3)
  {
    v9 = 0;
    while (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)Kernels + 1) - *(_QWORD *)Kernels) >> 3) > v9)
    {
      v10 = IR::FFTFilterKernel::storeCoeffs((IR::FFTFilterKernel *)(*(_QWORD *)Kernels + 40 * v9), a2[v9], a4, 0);
      if ((_DWORD)v10)
      {
        v11 = v10;
        goto LABEL_10;
      }
      if (++v9 == a3)
        break;
    }
  }
  v11 = 0;
  *((_QWORD *)this + 20) = Kernels;
LABEL_10:
  caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(Kernels + 24));
  return v11;
}

uint64_t IR::FFTFilter::Implementation::initializeAndSetFilterKernels(IR::FFTFilter::Implementation *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7)
{
  uint64_t MaxFilterLength;
  uint64_t PartitionLength;
  uint64_t result;
  __int16 v17;

  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
    return 4294956418;
  MaxFilterLength = IR::FFTFilterKernel::getMaxFilterLength(*(IR::FFTFilterKernel **)a2);
  PartitionLength = IR::FFTFilterKernel::getPartitionLength(*(IR::FFTFilterKernel **)a2);
  HIBYTE(v17) = a7;
  LOBYTE(v17) = a6;
  result = (*(uint64_t (**)(IR::FFTFilter::Implementation *, uint64_t, uint64_t, _QWORD, BOOL, uint64_t, uint64_t, uint64_t, __int16))(*(_QWORD *)a1 + 16))(a1, MaxFilterLength, PartitionLength, -858993459 * ((*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3), ((*(_QWORD *)(*(_QWORD *)a2 + 8) - **(_QWORD **)a2) & 0x3FFFFFFFCLL) != 0, a3, a4, a5, v17);
  if (!(_DWORD)result)
    return IR::FFTFilter::Implementation::setFilterKernels(a1, (IR::FFTFilterKernel **)a2);
  return result;
}

uint64_t IR::FFTFilter::Implementation::reset(float **this)
{
  uint64_t v2;
  unint64_t v3;
  float *v4;
  float *v5;
  float *v6;
  float *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;

  vDSP_vclr(this[23], 1, this[24] - this[23]);
  vDSP_vclr(this[30], 1, this[31] - this[30]);
  *((_DWORD *)this + 58) = 0;
  if (*((_DWORD *)this + 7))
  {
    v2 = 0;
    v3 = 0;
    do
    {
      v4 = this[39];
      if (0xAAAAAAAAAAAAAAABLL * (((char *)this[40] - (char *)v4) >> 3) > v3)
        vDSP_vclr(*(float **)&v4[v2], 1, (uint64_t)(*(_QWORD *)&v4[v2 + 2] - *(_QWORD *)&v4[v2]) >> 2);
      vDSP_vclr(*(float **)&this[42][v2], 1, (uint64_t)(*(_QWORD *)&this[42][v2 + 2] - *(_QWORD *)&this[42][v2]) >> 2);
      ++v3;
      v2 += 6;
    }
    while (v3 < *((unsigned int *)this + 7));
  }
  v5 = this[45];
  v6 = this[46];
  while (v5 != v6)
  {
    v7 = *(float **)v5;
    v8 = *((_QWORD *)v5 + 1);
    v5 += 6;
    vDSP_vclr(v7, 1, (v8 - (uint64_t)v7) >> 2);
  }
  v9 = 0;
  v10 = (char *)(this + 9);
  do
  {
    caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)&v10[v9]);
    result = caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)&v10[v9]);
    v9 += 32;
  }
  while (v9 != 96);
  this[19] = this[20];
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  *((_BYTE *)this + 44) = 1;
  return result;
}

float IR::FFTFilter::Implementation::threePointConv(IR::FFTFilter::Implementation *this, DSPSplitComplex *a2, DSPSplitComplex *a3, int a4, float a5)
{
  int v9;
  float *v10;
  float *realp;
  float *imagp;
  float *v13;
  vDSP_Length __N;
  float *v15;
  float *v16;
  float result;
  float __B;
  float __D;

  __D = 0.5;
  __B = a5 * 0.5;
  v9 = a4 - 1;
  vDSP_vsmsma(a2->realp, 1, &__B, (const float *)a2->realp + 1, 1, &__D, a3->realp + 1, 1, (a4 - 1));
  v10 = a2->realp + 1;
  realp = a3->realp;
  *realp = (float)(__B * *v10) + (float)(*a2->realp * 0.5);
  vDSP_vsma(v10, 1, &__B, realp, 1, realp, 1, (a4 - 1));
  imagp = a2->imagp;
  v13 = a3->imagp;
  a3->realp[v9] = a3->realp[v9] + (float)(__B * *imagp);
  __N = (a4 - 2);
  vDSP_vsmsma(imagp + 1, 1, &__B, imagp + 2, 1, &__D, v13 + 2, 1, __N);
  v15 = a2->imagp;
  v16 = a3->imagp;
  v16[1] = v15[1] * 0.5;
  vDSP_vsma(v15 + 2, 1, &__B, v16 + 1, 1, v16 + 1, 1, __N);
  result = (float)(a2->realp[v9] * a5) + (float)(*a2->imagp * 0.5);
  *a3->imagp = result;
  return result;
}

uint64_t IR::FFTFilter::Implementation::forwardTransform(IR::FFTFilter::Implementation *this, unsigned int a2, DSPComplex *__C)
{
  DSPSplitComplex *v4;
  vDSP_Length v5;
  DSPSplitComplex v7;

  v4 = (DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 26) + 24 * a2) + 16 * *((unsigned int *)this + 58));
  v5 = (unint64_t)*((unsigned int *)this + 3) >> 1;
  v7.realp = &v4->realp[v5];
  v7.imagp = &v4->imagp[v5];
  vDSP_ctoz(__C, 2, &v7, 1, v5);
  return MultiRadixRealFFT::RealInPlaceTransform((IR::FFTFilter::Implementation *)((char *)this + 168), v4, 1, 1.0);
}

void IR::FFTFilter::Implementation::fftBlockConvolution(IR::FFTFilter::Implementation *this, unsigned int a2, IR::FFTFilterKernel *a3)
{
  const DSPSplitComplex *FFTSubFilters;
  unsigned int NumActiveFFTSubFilters;
  unsigned int v8;
  _DWORD *ComplexMultiplicationLengths;
  uint64_t v10;
  const DSPSplitComplex *v11;
  float *v12;
  uint64_t v13;
  int v14;
  IR::FFTFilter::Implementation *v15;
  unsigned int v16;
  float **p_imagp;
  float *v18;
  unsigned int *v19;
  unint64_t v20;
  uint64_t v21;
  IR::FFTFilter::Implementation *v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  float v26;
  float v27;
  unsigned int v28;
  vDSP_Length v29;
  unsigned int v30;
  uint64_t v31;
  IR::FFTFilter::Implementation *v32;
  float v33;
  float v34;
  uint64_t v35;
  _DWORD *v36;
  unsigned int v37;
  unint64_t v38;
  unsigned int v39;
  DSPSplitComplex *__E;
  unsigned int v41;

  FFTSubFilters = (const DSPSplitComplex *)IR::FFTFilterKernel::getFFTSubFilters(a3);
  NumActiveFFTSubFilters = IR::FFTFilterKernel::getNumActiveFFTSubFilters(a3);
  if (*((_DWORD *)this + 4) >= NumActiveFFTSubFilters)
    v8 = NumActiveFFTSubFilters;
  else
    v8 = *((_DWORD *)this + 4);
  if (v8)
  {
    ComplexMultiplicationLengths = (_DWORD *)IR::FFTFilterKernel::getComplexMultiplicationLengths(a3);
    v10 = *((unsigned int *)this + 58);
    v11 = (const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 26) + 24 * a2) + 16 * v10);
    v39 = a2;
    __E = (DSPSplitComplex *)((char *)this + 264);
    vDSP_zvmul(v11, 1, FFTSubFilters, 1, (const DSPSplitComplex *)((char *)this + 264), 1, *ComplexMultiplicationLengths, 1);
    v12 = (float *)*((_QWORD *)this + 33);
    *v12 = *v11->realp * *FFTSubFilters->realp;
    v13 = *ComplexMultiplicationLengths;
    v14 = *((_DWORD *)this + 3);
    if (v14 == (_DWORD)v13)
    {
      **((float **)this + 34) = *v11->imagp * *FFTSubFilters->imagp;
    }
    else
    {
      **((_DWORD **)this + 34) = 0;
      vDSP_vclr(&v12[v13], 1, (v14 - v13));
      vDSP_vclr((float *)(*((_QWORD *)this + 34) + 4 * *ComplexMultiplicationLengths), 1, (*((_DWORD *)this + 3) - *ComplexMultiplicationLengths));
    }
    v15 = this;
    if ((_DWORD)v10 + 1 == *((_DWORD *)this + 4))
      v16 = 0;
    else
      v16 = v10 + 1;
    v36 = ComplexMultiplicationLengths;
    v37 = v8;
    if (v8 < 3)
    {
      v30 = v16;
    }
    else
    {
      v38 = v8 - 1;
      p_imagp = &FFTSubFilters[2].imagp;
      v18 = (float *)*((_QWORD *)this + 33);
      v19 = ComplexMultiplicationLengths + 2;
      v20 = 1;
      do
      {
        v21 = *(_QWORD *)(*((_QWORD *)v15 + 26) + 24 * v39);
        v22 = v15;
        v23 = *((_DWORD *)v15 + 4);
        if (v16 + 1 == v23)
          v24 = 0;
        else
          v24 = v16 + 1;
        if ((_DWORD)v24 + 1 == v23)
          v25 = 0;
        else
          v25 = v24 + 1;
        v41 = v25;
        v26 = *v18;
        v27 = **((float **)v15 + 34);
        v28 = *(v19 - 1);
        if (v28 <= *v19)
          v29 = *v19;
        else
          v29 = v28;
        vDSP_zvmmaa((const DSPSplitComplex *)(v21 + 16 * v16), 1, (const DSPSplitComplex *)(p_imagp - 3), 1, (const DSPSplitComplex *)(v21 + 16 * v24), 1, (const DSPSplitComplex *)(p_imagp - 1), 1, __E, 1, __E, 1, v29);
        v15 = v22;
        v18 = (float *)*((_QWORD *)v22 + 33);
        *v18 = v26
             + (float)((float)(**(float **)(v21 + 16 * v24) * **(p_imagp - 1))
                     + (float)(**(float **)(v21 + 16 * v16) * **(p_imagp - 3)));
        if ((_DWORD)v29 == *((_DWORD *)v22 + 3))
          **((float **)v22 + 34) = v27
                                 + (float)((float)(**(float **)(v21 + 16 * v24 + 8) * **p_imagp)
                                         + (float)(**(float **)(v21 + 16 * v16 + 8) * **(p_imagp - 2)));
        v19 += 2;
        v20 += 2;
        p_imagp += 4;
        v30 = v41;
        v16 = v41;
      }
      while (v20 < v38);
    }
    if ((v37 & 1) == 0)
    {
      v31 = *(_QWORD *)(*((_QWORD *)v15 + 26) + 24 * v39);
      v32 = v15;
      v33 = **((float **)v15 + 33);
      v34 = **((float **)v15 + 34);
      v35 = v37 - 1;
      vDSP_zvma((const DSPSplitComplex *)(v31 + 16 * v30), 1, &FFTSubFilters[v35], 1, __E, 1, __E, 1, v36[v35]);
      **((float **)v32 + 33) = v33 + (float)(**(float **)(v31 + 16 * v30) * *FFTSubFilters[v35].realp);
      if (v36[v35] == *((_DWORD *)v32 + 3))
        **((float **)v32 + 34) = v34 + (float)(**(float **)(v31 + 16 * v30 + 8) * *FFTSubFilters[v35].imagp);
    }
  }
}

void IR::FFTFilter::Implementation::inverseTransform(IR::FFTFilter::Implementation *this, DSPComplex *a2)
{
  vDSP_Length v4;
  float *v5;
  DSPSplitComplex v6;

  MultiRadixRealFFT::RealInPlaceTransform((IR::FFTFilter::Implementation *)((char *)this + 168), (DSPSplitComplex *)((char *)this + 264), -1, 1.0);
  v4 = (unint64_t)*((unsigned int *)this + 3) >> 1;
  v5 = (float *)(*((_QWORD *)this + 34) + 4 * v4);
  v6.realp = (float *)(*((_QWORD *)this + 33) + 4 * v4);
  v6.imagp = v5;
  vDSP_ztoc(&v6, 1, a2, 2, v4);
}

void IR::FFTFilter::Implementation::saveInputForNextCycle(IR::FFTFilter::Implementation *this, unsigned int a2, unsigned int a3, DSPComplex *__C)
{
  vDSP_ctoz(__C, 2, (const DSPSplitComplex *)(*(_QWORD *)(*((_QWORD *)this + 26) + 24 * a2) + 16 * a3), 1, (unint64_t)*((unsigned int *)this + 3) >> 1);
}

_DWORD *IR::FFTFilter::Implementation::firFilterTimeDomain(_DWORD *this, float *const *a2, float *const *a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  vDSP_Length v12;
  uint64_t v15;
  uint64_t v16;
  vDSP_Length v17;
  size_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int v23;
  vDSP_Length v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  unsigned int *v31;
  unsigned int v32;
  vDSP_Length v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  float __Start;
  float __Step;
  float v39;

  v7 = this[6];
  v6 = this[7];
  if (v6 >= a5)
    v8 = a5;
  else
    v8 = v6;
  if (v7 >= a6)
    v9 = a6;
  else
    v9 = v7;
  if ((_DWORD)v8)
    v10 = (_DWORD)v9 == 0;
  else
    v10 = 1;
  if (!v10 && (v8 >= v9 || v6 != v7))
  {
    LODWORD(v12) = a4;
    v15 = (uint64_t)this;
    v16 = 0;
    v17 = a4;
    v18 = 4 * a4;
    do
    {
      v19 = *a2++;
      memcpy((void *)(*(_QWORD *)(*(_QWORD *)(v15 + 336) + v16) + 4 * *(unsigned int *)(v15 + 20) - 4), v19, v18);
      v16 += 24;
    }
    while (24 * v8 != v16);
    v20 = 0;
    v21 = 24;
    do
    {
      v22 = (unsigned int *)(**(_QWORD **)(v15 + 152) + v21);
      v23 = *(_DWORD *)(v15 + 20);
      if (*v22 >= v23)
        v24 = v23;
      else
        v24 = *v22;
      if ((_DWORD)v8 == 1)
        v25 = 0;
      else
        v25 = v20;
      vDSP_conv((const float *)(*(_QWORD *)(*(_QWORD *)(v15 + 336) + 24 * v25) + 4 * (v23 - v24)), 1, (const float *)(*((_QWORD *)v22 - 3) + 4 * v24 - 4), -1, a3[v20++], 1, v17, v24);
      v21 += 40;
    }
    while (v9 != v20);
    v26 = *(_DWORD *)(v15 + 40);
    if (v26)
    {
      v27 = 0;
      v28 = (float)*(unsigned int *)(v15 + 32);
      v29 = (float)v26 / v28;
      __Step = -(float)(-1.0 / v28);
      v39 = -1.0 / v28;
      if (v26 >= v12)
        v12 = v12;
      else
        v12 = v26;
      v30 = 24;
      do
      {
        v31 = (unsigned int *)(**(_QWORD **)(v15 + 144) + v30);
        v32 = *(_DWORD *)(v15 + 20);
        if (*v31 >= v32)
          v33 = v32;
        else
          v33 = *v31;
        if ((_DWORD)v8 == 1)
          v34 = 0;
        else
          v34 = v27;
        vDSP_conv((const float *)(*(_QWORD *)(*(_QWORD *)(v15 + 336) + 24 * v34) + 4 * (v32 - v33)), 1, (const float *)(*((_QWORD *)v31 - 3) + 4 * v33 - 4), -1, *(float **)(v15 + 384), 1, v12, v33);
        __Start = 1.0 - v29;
        vDSP_vrampmul(a3[v27], 1, &__Start, &__Step, a3[v27], 1, v12);
        __Start = v29;
        vDSP_vrampmuladd(*(const float **)(v15 + 384), 1, &__Start, &v39, a3[v27++], 1, v12);
        v30 += 40;
      }
      while (v9 != v27);
      v35 = *(_DWORD *)(v15 + 40) - v12;
      *(_DWORD *)(v15 + 40) = v35;
      if (!v35)
        caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(*(_QWORD *)(v15 + 144) + 24));
    }
    v36 = 0;
    do
    {
      this = memmove(*(void **)(*(_QWORD *)(v15 + 336) + v36), (const void *)(*(_QWORD *)(*(_QWORD *)(v15 + 336) + v36) + 4 * v17), 4 * (*(_DWORD *)(v15 + 20) - 1));
      v36 += 24;
      --v8;
    }
    while (v8);
  }
  return this;
}

uint64_t IR::FFTFilter::Implementation::process(IR::FFTFilter::Implementation *this, const float *a2, float *const *a3, uint64_t a4, uint64_t a5, IR::ComplexDataCircBuffer *a6)
{
  _QWORD v7[2];

  v7[1] = *MEMORY[0x24BDAC8D0];
  v7[0] = a2;
  return (*(uint64_t (**)(IR::FFTFilter::Implementation *, _QWORD *, float *const *, uint64_t, uint64_t, uint64_t, IR::ComplexDataCircBuffer *))(*(_QWORD *)this + 56))(this, v7, a3, a4, 1, a5, a6);
}

uint64_t IR::FFTFilter::Implementation::processMultipleInputs(IR::FFTFilter::Implementation *this, float *const *a2, float *const *a3, uint64_t a4, unsigned int a5, unsigned int a6, IR::ComplexDataCircBuffer *a7)
{
  uint64_t v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v17;
  uint64_t v18;
  const DSPSplitComplex *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  vDSP_Length v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  vDSP_Length v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const DSPSplitComplex *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  float v55;
  float v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  const DSPSplitComplex *v69;
  int v70;
  int v71;
  float __Start;
  float __Step;
  uint64_t v74;
  char v75;

  if (!*((_BYTE *)this + 45))
    return 4294956429;
  v7 = a4;
  if ((_DWORD)a4)
  {
    v10 = *((_DWORD *)this + 6);
    v9 = *((_DWORD *)this + 7);
    if (v9 >= a5)
      v11 = a5;
    else
      v11 = v9;
    if (v10 >= a6)
      v12 = a6;
    else
      v12 = v10;
    if ((_DWORD)v11)
      v13 = (_DWORD)v12 == 0;
    else
      v13 = 1;
    if (v13)
      return 4294967246;
    if (v11 < v12 && v9 == v10)
      return 4294967246;
    if (*((_DWORD *)this + 2))
    {
      if (*((_BYTE *)this + 44))
      {
        if (caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)this + 20) + 24)))
          *((_QWORD *)this + 19) = *((_QWORD *)this + 20);
        v74 = 0;
        v75 = 0;
        *((_BYTE *)this + 44) = 0;
        std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v74);
      }
      if (*((_DWORD *)this + 4))
      {
        v17 = 0;
        do
        {
          *(float **)(*((_QWORD *)this + 54) + 8 * v17) = a2[v17];
          ++v17;
        }
        while (v11 != v17);
        v18 = 0;
        do
        {
          *(float **)(*((_QWORD *)this + 51) + 8 * v18) = a3[v18];
          ++v18;
        }
        while (v12 != v18);
        v19 = (const DSPSplitComplex *)((char *)this + 264);
        v69 = (const DSPSplitComplex *)((char *)this + 280);
        v20 = *((_DWORD *)this + 9);
        do
        {
          v21 = *((_DWORD *)this + 3);
          v22 = v21 >= v20;
          v23 = v21 - v20;
          if (v23 != 0 && v22)
          {
            v24 = 0;
            v25 = 0;
            if (v23 >= v7)
              v26 = v7;
            else
              v26 = v23;
            do
            {
              memcpy((void *)(*(_QWORD *)(*((_QWORD *)this + 39) + v24) + 4 * *((unsigned int *)this + 9)), *(const void **)(*((_QWORD *)this + 54) + 8 * v25++), 4 * v26);
              v24 += 24;
            }
            while (v11 != v25);
            if (*((_DWORD *)this + 5))
            {
              (*(void (**)(IR::FFTFilter::Implementation *, _QWORD, _QWORD, vDSP_Length, uint64_t, uint64_t))(*(_QWORD *)this + 104))(this, *((_QWORD *)this + 54), *((_QWORD *)this + 51), v26, v11, v12);
              v27 = 0;
              v28 = 0;
              do
              {
                vDSP_vadd(*(const float **)(*((_QWORD *)this + 51) + 8 * v28), 1, (const float *)(*(_QWORD *)(*((_QWORD *)this + 45) + v27) + 4 * *((unsigned int *)this + 9)), 1, *(float **)(*((_QWORD *)this + 51) + 8 * v28), 1, v26);
                ++v28;
                v27 += 24;
              }
              while (v12 != v28);
            }
            else
            {
              v34 = 0;
              v35 = 0;
              do
              {
                memcpy(*(void **)(*((_QWORD *)this + 51) + 8 * v35++), (const void *)(*(_QWORD *)(*((_QWORD *)this + 45) + v34) + 4 * *((unsigned int *)this + 9)), 4 * v26);
                v34 += 24;
              }
              while (v12 != v35);
            }
            v36 = 0;
            LODWORD(v7) = v7 - v26;
            do
              *(_QWORD *)(*((_QWORD *)this + 54) + 8 * v36++) += 4 * v26;
            while (v11 != v36);
            v37 = 0;
            do
              *(_QWORD *)(*((_QWORD *)this + 51) + 8 * v37++) += 4 * v26;
            while (v12 != v37);
            v20 = *((_DWORD *)this + 9) + v26;
          }
          else
          {
            if (*((_BYTE *)this + 47))
            {
              v29 = *((_QWORD *)this + 20);
              if (v29 != *((_QWORD *)this + 19) && !*((_DWORD *)this + 10))
              {
                v74 = v29 + 24;
                v30 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v29 + 24));
                v75 = v30;
                if (v30)
                {
                  v31 = *((_QWORD *)this + 19);
                  v32 = *((_QWORD *)this + 20);
                  if (v32 != v31)
                  {
                    *((_QWORD *)this + 18) = v31;
                    *((_QWORD *)this + 19) = v32;
                    v74 = 0;
                    v75 = 0;
                    v33 = *((_DWORD *)this + 8);
                    if (v33)
                      *((_DWORD *)this + 10) = v33 - 1;
                    else
                      caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v31 + 24));
                  }
                }
                std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v74);
              }
            }
            v38 = 0;
            v39 = 0;
            do
            {
              (*(void (**)(IR::FFTFilter::Implementation *, uint64_t, _QWORD))(*(_QWORD *)this + 72))(this, v39++, *(_QWORD *)(*((_QWORD *)this + 39) + v38));
              v38 += 24;
            }
            while (v11 != v39);
            v40 = *((_DWORD *)this + 10);
            if (v40)
            {
              v71 = v7;
              v41 = *((_DWORD *)this + 3);
              if (v41 >= v40)
                v42 = v40;
              else
                v42 = v41;
              v70 = v42;
              if (*((_BYTE *)this + 46))
              {
                v43 = 0;
                v44 = 0;
                v45 = 0;
                v46 = v19;
                do
                {
                  if ((_DWORD)v11 == 1)
                    v47 = 0;
                  else
                    v47 = v45;
                  (*(void (**)(IR::FFTFilter::Implementation *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, v47, **((_QWORD **)this + 18) + v44);
                  (*(void (**)(IR::FFTFilter::Implementation *, const DSPSplitComplex *, const DSPSplitComplex *, _QWORD, float))(*(_QWORD *)this + 112))(this, v19, v69, *((unsigned int *)this + 3), -0.5);
                  (*(void (**)(IR::FFTFilter::Implementation *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, v47, **((_QWORD **)this + 19) + v44);
                  (*(void (**)(IR::FFTFilter::Implementation *, const DSPSplitComplex *, char *, _QWORD, float))(*(_QWORD *)this + 112))(this, v19, (char *)this + 296, *((unsigned int *)this + 3), 0.5);
                  vDSP_zvadd(v69, 1, (const DSPSplitComplex *)((char *)this + 296), 1, v19, 1, *((unsigned int *)this + 3));
                  (*(void (**)(IR::FFTFilter::Implementation *, _QWORD))(*(_QWORD *)this + 88))(this, *(_QWORD *)(*((_QWORD *)this + 45) + v43));
                  ++v45;
                  v44 += 40;
                  v43 += 24;
                }
                while (v12 != v45);
              }
              else
              {
                v52 = 0;
                v53 = 0;
                v54 = 0;
                v55 = (float)*((unsigned int *)this + 8);
                v56 = (float)v40 / v55;
                __Step = -(float)(-1.0 / v55);
                *(float *)&v74 = -1.0 / v55;
                do
                {
                  if ((_DWORD)v11 == 1)
                    v57 = 0;
                  else
                    v57 = v54;
                  (*(void (**)(IR::FFTFilter::Implementation *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, v57, **((_QWORD **)this + 18) + v53);
                  (*(void (**)(IR::FFTFilter::Implementation *, _QWORD))(*(_QWORD *)this + 88))(this, *((_QWORD *)this + 48));
                  (*(void (**)(IR::FFTFilter::Implementation *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, v57, **((_QWORD **)this + 19) + v53);
                  (*(void (**)(IR::FFTFilter::Implementation *, _QWORD))(*(_QWORD *)this + 88))(this, *(_QWORD *)(*((_QWORD *)this + 45) + v52));
                  __Start = 1.0 - v56;
                  vDSP_vrampmul(*(const float **)(*((_QWORD *)this + 45) + v52), 1, &__Start, &__Step, *(float **)(*((_QWORD *)this + 45) + v52), 1, v42);
                  __Start = v56;
                  vDSP_vrampmuladd(*((const float **)this + 48), 1, &__Start, (const float *)&v74, *(float **)(*((_QWORD *)this + 45) + v52), 1, v42);
                  ++v54;
                  v53 += 40;
                  v52 += 24;
                }
                while (v12 != v54);
                v46 = v19;
              }
              LODWORD(v7) = v71;
              v19 = v46;
              if (!*((_DWORD *)this + 5))
              {
                v58 = *((_DWORD *)this + 10) - v70;
                *((_DWORD *)this + 10) = v58;
                if (!v58)
                  caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(*((_QWORD *)this + 18) + 24));
              }
            }
            else
            {
              v48 = 0;
              v49 = 0;
              v50 = 0;
              do
              {
                if ((_DWORD)v11 == 1)
                  v51 = 0;
                else
                  v51 = v50;
                (*(void (**)(IR::FFTFilter::Implementation *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, v51, **((_QWORD **)this + 19) + v49);
                (*(void (**)(IR::FFTFilter::Implementation *, _QWORD))(*(_QWORD *)this + 88))(this, *(_QWORD *)(*((_QWORD *)this + 45) + v48));
                ++v50;
                v49 += 40;
                v48 += 24;
              }
              while (v12 != v50);
            }
            v59 = *((_DWORD *)this + 58);
            if (!v59)
              v59 = *((_DWORD *)this + 4);
            v60 = 0;
            v61 = 0;
            v62 = (v59 - 1);
            do
            {
              (*(void (**)(IR::FFTFilter::Implementation *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)this + 96))(this, v61++, v62, *(_QWORD *)(*((_QWORD *)this + 39) + v60));
              v60 += 24;
            }
            while (v11 != v61);
            v20 = 0;
            *((_DWORD *)this + 58) = v62;
          }
          *((_DWORD *)this + 9) = v20;
        }
        while ((_DWORD)v7);
      }
      else
      {
        if (*((_BYTE *)this + 47))
        {
          v64 = *((_QWORD *)this + 20);
          if (v64 != *((_QWORD *)this + 19) && !*((_DWORD *)this + 10))
          {
            v74 = v64 + 24;
            v65 = caulk::pooled_semaphore_mutex::try_lock((caulk::pooled_semaphore_mutex *)(v64 + 24));
            v75 = v65;
            if (v65)
            {
              v66 = *((_QWORD *)this + 19);
              v67 = *((_QWORD *)this + 20);
              if (v67 != v66)
              {
                *((_QWORD *)this + 18) = v66;
                *((_QWORD *)this + 19) = v67;
                v74 = 0;
                v75 = 0;
                v68 = *((_DWORD *)this + 8);
                if (v68)
                  *((_DWORD *)this + 10) = v68 - 1;
                else
                  caulk::pooled_semaphore_mutex::_unlock((caulk::pooled_semaphore_mutex *)(v66 + 24));
              }
            }
            std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)&v74);
          }
        }
        (*(void (**)(IR::FFTFilter::Implementation *, float *const *, float *const *, uint64_t, uint64_t, uint64_t, IR::ComplexDataCircBuffer *))(*(_QWORD *)this + 104))(this, a2, a3, v7, v11, v12, a7);
      }
      return 0;
    }
    return 4294956429;
  }
  return 0;
}

void sub_2105B6CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::unique_lock<caulk::pooled_semaphore_mutex>::~unique_lock[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *IR::FFTFilter::FFTFilter(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_24CA2C5F8;
  result[1] = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = &off_24CA2C5F8;
  result[1] = v2;
  return result;
}

IR::FFTFilter *IR::FFTFilter::FFTFilter(IR::FFTFilter *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = operator new();
  v3 = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  v4 = v2 + 48;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_QWORD *)v2 = &off_24CA2C570;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)(v2 + 448) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 44) = 16777217;
  do
  {
    v5 = (_QWORD *)(v2 + v3);
    v5[6] = 0;
    v5[7] = 0;
    v5[8] = 0;
    caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v2 + v3 + 72));
    v3 += 32;
  }
  while (v3 != 96);
  *(_QWORD *)(v2 + 144) = v4;
  *(_QWORD *)(v2 + 152) = v4;
  *(_QWORD *)(v2 + 160) = v4;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_QWORD *)this = &off_24CA2C5F8;
  *((_QWORD *)this + 1) = v2;
  return this;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = operator new();
  v3 = 0;
  *(_OWORD *)(v2 + 48) = 0u;
  v4 = v2 + 48;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(_OWORD *)(v2 + 192) = 0u;
  *(_OWORD *)(v2 + 208) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 272) = 0u;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_OWORD *)(v2 + 304) = 0u;
  *(_OWORD *)(v2 + 320) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(_OWORD *)(v2 + 368) = 0u;
  *(_OWORD *)(v2 + 384) = 0u;
  *(_OWORD *)(v2 + 400) = 0u;
  *(_OWORD *)(v2 + 416) = 0u;
  *(_OWORD *)(v2 + 432) = 0u;
  *(_QWORD *)v2 = &off_24CA2C570;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_QWORD *)(v2 + 448) = 0;
  *(_DWORD *)(v2 + 40) = 0;
  *(_DWORD *)(v2 + 44) = 16777217;
  do
  {
    v5 = (_QWORD *)(v2 + v3);
    v5[6] = 0;
    v5[7] = 0;
    v5[8] = 0;
    caulk::pooled_semaphore_mutex::pooled_semaphore_mutex((caulk::pooled_semaphore_mutex *)(v2 + v3 + 72));
    v3 += 32;
  }
  while (v3 != 96);
  *(_QWORD *)(v2 + 144) = v4;
  *(_QWORD *)(v2 + 152) = v4;
  *(_QWORD *)(v2 + 160) = v4;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 256) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_OWORD *)(v2 + 200) = 0u;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_QWORD *)this = &off_24CA2C5F8;
  *((_QWORD *)this + 1) = v2;
  return this;
}

void sub_2105B6E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a10 = (void **)(v12 + 48);
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (; v11; v11 -= 32)
  {
    a10 = (void **)(v10 + 16 + v11);
    std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  MEMORY[0x212BC7928](v10, 0x10A1C404F441B48);
  _Unwind_Resume(a1);
}

void sub_2105B6FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  a10 = (void **)(v12 + 48);
  std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&a10);
  for (; v11; v11 -= 32)
  {
    a10 = (void **)(v10 + 16 + v11);
    std::vector<IR::FFTFilterKernel>::__destroy_vector::operator()[abi:ne180100](&a10);
  }
  MEMORY[0x212BC7928](v10, 0x10A1C404F441B48);
  _Unwind_Resume(a1);
}

void IR::FFTFilter::~FFTFilter(IR::FFTFilter *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24CA2C5F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24CA2C5F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_24CA2C5F8;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x212BC7928);
}

uint64_t IR::FFTFilter::initialize(IR::FFTFilter *this, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int16 v9;

  v7 = *((_QWORD *)this + 1);
  if (!v7)
    return 4294956429;
  v9 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, __int16))(*(_QWORD *)v7 + 16))(v7, a2, a3, a4, a5, a6, a7, 0, v9);
}

uint64_t IR::FFTFilter::initialize(IR::FFTFilter *this, unsigned int a2, unsigned int a3, unsigned int a4, BOOL a5, unsigned int a6, unsigned int a7, BOOL a8, BOOL a9, BOOL a10)
{
  uint64_t v10;

  v10 = *((_QWORD *)this + 1);
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  else
    return 4294956429;
}

uint64_t IR::FFTFilter::initializeAndSetFilterKernels(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, a2, a3, a4, 0, 1, 0);
  else
    return 4294956429;
}

uint64_t IR::FFTFilter::initializeAndSetFilterKernels(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  else
    return 4294956429;
}

uint64_t IR::FFTFilter::uninitialize(IR::FFTFilter *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  return result;
}

uint64_t IR::FFTFilter::reset(IR::FFTFilter *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

char *IR::FFTFilter::getScratchKernels(IR::FFTFilter *this)
{
  IR::FFTFilter::Implementation *v1;

  v1 = (IR::FFTFilter::Implementation *)*((_QWORD *)this + 1);
  if (v1 && *((_BYTE *)v1 + 45))
    return IR::FFTFilter::Implementation::getAndLockNextKernels(v1);
  else
    return 0;
}

uint64_t IR::FFTFilter::setFilterKernels(uint64_t a1, IR::FFTFilterKernel **a2)
{
  IR::FFTFilter::Implementation *v2;

  v2 = *(IR::FFTFilter::Implementation **)(a1 + 8);
  if (v2)
    return IR::FFTFilter::Implementation::setFilterKernels(v2, a2);
  else
    return 4294956429;
}

unsigned int *IR::FFTFilter::setFilterCoeffs(IR::FFTFilter *this, const float *const *a2, int a3, unsigned int a4)
{
  IR::FFTFilter::Implementation *v4;

  v4 = (IR::FFTFilter::Implementation *)*((_QWORD *)this + 1);
  if (v4)
    return IR::FFTFilter::Implementation::setFilterCoeffs(v4, a2, a3, a4);
  else
    return (unsigned int *)4294956429;
}

uint64_t IR::FFTFilter::getNumActiveSubFilters(IR::FFTFilter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return IR::FFTFilterKernel::getNumActiveFFTSubFilters(**(IR::FFTFilterKernel ***)(v1 + 152));
  else
    return 0;
}

uint64_t IR::FFTFilter::getFIRFilterLength(IR::FFTFilter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(unsigned int *)(v1 + 20);
  else
    return 0;
}

uint64_t IR::FFTFilter::getPartitionLength(IR::FFTFilter *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 1);
  if (v1)
    return *(unsigned int *)(v1 + 12);
  else
    return 0;
}

uint64_t IR::FFTFilter::getConfigParams@<X0>(IR::FFTFilter *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = *((_QWORD *)this + 1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  return result;
}

uint64_t IR::FFTFilter::process(IR::FFTFilter *this, const float *a2, float *const *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  v5 = *((_QWORD *)this + 1);
  if (v5)
    return (*(uint64_t (**)(uint64_t, const float *, float *const *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 48))(v5, a2, a3, a4, a5, 0);
  else
    return 4294956429;
}

uint64_t IR::FFTFilter::process(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  else
    return 4294956429;
}

uint64_t IR::FFTFilter::processMultipleInputs(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  else
    return 4294956429;
}

uint64_t IR::FFTFilter::doXFadeUpdate(IR::FFTFilter *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 1) + 47);
}

uint64_t IR::FFTFilterKernel::FFTFilterKernel(uint64_t this)
{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  *(_QWORD *)this = 0;
  *(_DWORD *)(this + 24) = 0;
  return this;
}

IR::FFTFilterKernel *IR::FFTFilterKernel::FFTFilterKernel(IR::FFTFilterKernel *this, unsigned int a2, unsigned int a3, int a4)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  IR::FFTFilterKernel::initialize(this, a2, a3, a4);
  return this;
}

void sub_2105B7378(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  *v2 = 0;
  if (v4)
    std::default_delete<IR::FFTSubFilterData>::operator()[abi:ne180100]((uint64_t)v2, v4);
  IR::FFTFilterKernel::FFTFilterKernel(v1);
  _Unwind_Resume(a1);
}

void IR::FFTFilterKernel::initialize(IR::FFTFilterKernel *this, unsigned int a2, unsigned int a3, int a4)
{
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  IR::FFTSubFilterData *v10;
  IR::FFTSubFilterData **v11;
  IR::FFTSubFilterData *v12;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  IR::FFTSubFilterData *v17;

  if (a3 >= a2)
    v7 = a2;
  else
    v7 = a3;
  if (a4)
    v8 = v7;
  else
    v8 = 0;
  if (a3)
    v9 = v8;
  else
    v9 = a2;
  std::vector<float>::resize((uint64_t)this, v9);
  v12 = (IR::FFTSubFilterData *)*((_QWORD *)this + 4);
  v11 = (IR::FFTSubFilterData **)((char *)this + 32);
  v10 = v12;
  if (v12)
    v13 = *(_DWORD *)v10;
  else
    v13 = 0;
  if (v13 != a3
    || a3 && (!v10 ? (v14 = 0) : (v14 = *((_DWORD *)v10 + 1)), v14 != vcvtps_u32_f32((float)(a2 - v8) / (float)a3)))
  {
    v15 = a2 >= v9;
    v16 = a2 - v9;
    if (v16 != 0 && v15)
    {
      v17 = (IR::FFTSubFilterData *)operator new();
      IR::FFTSubFilterData::FFTSubFilterData(v17, a3, v16);
      v10 = *v11;
      *v11 = v17;
      if (v10)
LABEL_24:
        std::default_delete<IR::FFTSubFilterData>::operator()[abi:ne180100]((uint64_t)v11, v10);
    }
    else
    {
      *v11 = 0;
      if (v10)
        goto LABEL_24;
    }
  }
}

void sub_2105B749C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC7928](v1, 0x10B0C40B59F3A2CLL);
  _Unwind_Resume(a1);
}

IR::FFTFilterKernel *IR::FFTFilterKernel::FFTFilterKernel(IR::FFTFilterKernel *this, const IR::FFTFilterKernel *a2)
{
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *(_QWORD *)this = 0;
  *((_DWORD *)this + 6) = 0;
  IR::FFTFilterKernel::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void sub_2105B7504(_Unwind_Exception *a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;

  v4 = (_QWORD *)*v2;
  *v2 = 0;
  if (v4)
    std::default_delete<IR::FFTSubFilterData>::operator()[abi:ne180100]((uint64_t)v2, v4);
  IR::FFTFilterKernel::FFTFilterKernel(v1);
  _Unwind_Resume(a1);
}

uint64_t IR::FFTFilterKernel::operator=(uint64_t a1, uint64_t a2)
{
  char *v4;
  char **v5;
  const IR::FFTSubFilterData *v6;
  IR::FFTSubFilterData *v8;

  if (a2 != a1)
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1, *(char **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    v5 = (char **)(a1 + 32);
    v4 = *(char **)(a1 + 32);
    *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
    v6 = *(const IR::FFTSubFilterData **)(a2 + 32);
    if (v6)
    {
      if (v4)
      {
        IR::FFTSubFilterData::operator=(v4, (uint64_t)v6);
        return a1;
      }
      v8 = (IR::FFTSubFilterData *)operator new();
      IR::FFTSubFilterData::FFTSubFilterData(v8, v6);
      v4 = *v5;
      *v5 = (char *)v8;
      if (!v4)
        return a1;
    }
    else
    {
      *v5 = 0;
      if (!v4)
        return a1;
    }
    std::default_delete<IR::FFTSubFilterData>::operator()[abi:ne180100](a1 + 32, v4);
  }
  return a1;
}

void sub_2105B75E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x212BC7928](v1, 0x10B0C40B59F3A2CLL);
  _Unwind_Resume(a1);
}

__n128 IR::FFTFilterKernel::FFTFilterKernel(uint64_t a1, __n128 *a2)
{
  __n128 result;
  unint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(_DWORD *)(a1 + 24) = a2[1].n128_u32[2];
  v3 = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

{
  __n128 result;
  unint64_t v3;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  *(_DWORD *)(a1 + 24) = a2[1].n128_u32[2];
  v3 = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

void IR::FFTFilterKernel::~FFTFilterKernel(IR::FFTFilterKernel *this)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;

  v4 = (_QWORD *)*((_QWORD *)this + 4);
  v2 = (_QWORD *)((char *)this + 32);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<IR::FFTSubFilterData>::operator()[abi:ne180100]((uint64_t)v2, v3);
  v5 = *(void **)this;
  if (*(_QWORD *)this)
  {
    *((_QWORD *)this + 1) = v5;
    operator delete(v5);
  }
}

uint64_t IR::FFTFilterKernel::operator=(uint64_t a1, __n128 *a2)
{
  unsigned __int32 v4;
  unint64_t v5;
  _QWORD *v6;

  std::vector<float>::__move_assign(a1, a2);
  v4 = a2[1].n128_u32[2];
  v5 = a2[2].n128_u64[0];
  a2[2].n128_u64[0] = 0;
  v6 = *(_QWORD **)(a1 + 32);
  *(_DWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  if (v6)
    std::default_delete<IR::FFTSubFilterData>::operator()[abi:ne180100](a1 + 32, v6);
  return a1;
}

uint64_t IR::FFTFilterKernel::calculateFIRFilterLength(uint64_t this, unsigned int a2, int a3)
{
  unsigned int v3;

  if (a2 >= this)
    v3 = this;
  else
    v3 = a2;
  if (!a3)
    v3 = 0;
  if (a2)
    return v3;
  else
    return this;
}

uint64_t IR::FFTFilterKernel::getPartitionLength(IR::FFTFilterKernel *this)
{
  unsigned int *v1;

  v1 = (unsigned int *)*((_QWORD *)this + 4);
  if (v1)
    return *v1;
  else
    return 0;
}

uint64_t IR::FFTFilterKernel::getNumFFTSubFilters(IR::FFTFilterKernel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(unsigned int *)(v1 + 4);
  else
    return 0;
}

unsigned int *IR::FFTFilterKernel::storeCoeffs(IR::FFTFilterKernel *this, const float *a2, unsigned int a3, MultiRadixRealFFT *a4)
{
  return IR::FFTFilterKernel::storeCoeffs(this, a2, a3, a4, 0, 0, 1.0);
}

unsigned int *IR::FFTFilterKernel::storeCoeffs(IR::FFTFilterKernel *this, const float *__A, unsigned int a3, MultiRadixRealFFT *a4, uint64_t a5, unsigned int a6, float a7)
{
  uint64_t v13;
  vDSP_Length v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  float v19;
  unsigned int *result;
  float __B;

  __B = a7;
  if (a3)
  {
    v13 = (*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
    if (v13 >= a3)
      v14 = a3;
    else
      v14 = v13;
    vDSP_vsmul(__A, 1, &__B, *(float **)this, 1, v14);
    v15 = *(_QWORD *)this;
    v16 = (*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
    v17 = v14 + 1;
    v18 = 4 * v14;
    while (v18)
    {
      v19 = *(float *)(*(_QWORD *)this - 4 + v18);
      --v17;
      v18 -= 4;
      if (v19 != 0.0)
        goto LABEL_8;
    }
    v17 = 0;
LABEL_8:
    *((_DWORD *)this + 6) = v17;
    if ((_DWORD)v14 == (_DWORD)v16)
    {
      result = (unsigned int *)*((_QWORD *)this + 4);
      if (!result)
        return result;
      if (v13 < a3)
        return (unsigned int *)IR::FFTSubFilterData::setFilter(result, (uint64_t)&__A[v14], a3 - v14, a4, a5, a6, __B);
    }
    else
    {
      bzero((void *)(v15 + 4 * v14), 4 * (v16 - v14));
      result = (unsigned int *)*((_QWORD *)this + 4);
      if (!result)
        return result;
    }
    IR::FFTSubFilterData::reset((void **)result);
  }
  else
  {
    IR::FFTFilterKernel::reset(this);
  }
  return 0;
}

unsigned int *IR::FFTFilterKernel::storeCoeffs(IR::FFTFilterKernel *a1, const float *a2, unsigned int a3, MultiRadixRealFFT *a4, uint64_t a5, unsigned int a6)
{
  return IR::FFTFilterKernel::storeCoeffs(a1, a2, a3, a4, a5, a6, 1.0);
}

void IR::FFTFilterKernel::reset(IR::FFTFilterKernel *this)
{
  void *v2;
  uint64_t v3;
  void **v4;

  v2 = *(void **)this;
  v3 = *((_QWORD *)this + 1) - (_QWORD)v2;
  if (v3 >= 1)
    bzero(v2, 4 * (((unint64_t)v3 >> 2) - ((unint64_t)v3 > 3)) + 4);
  *((_DWORD *)this + 6) = 0;
  v4 = (void **)*((_QWORD *)this + 4);
  if (v4)
    IR::FFTSubFilterData::reset(v4);
}

uint64_t IR::FFTFilterKernel::calculateFIRActiveTaps(uint64_t this, const float *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  float v5;

  v2 = this;
  LODWORD(this) = (_DWORD)a2 + 1;
  v3 = v2 - 4;
  for (i = 4 * a2; i; i -= 4)
  {
    v5 = *(float *)(v3 + i);
    this = (this - 1);
    if (v5 != 0.0)
      return this;
  }
  return 0;
}

unsigned int *IR::FFTFilterKernel::initializeAndStoreCoeffs(IR::FFTFilterKernel *this, const float *a2, unsigned int a3, unsigned int a4, int a5, MultiRadixRealFFT *a6)
{
  IR::FFTFilterKernel::initialize(this, a3, a4, a5);
  return IR::FFTFilterKernel::storeCoeffs(this, a2, a3, a6, 0, 0, 1.0);
}

unsigned int *IR::FFTFilterKernel::initializeAndStoreCoeffs(IR::FFTFilterKernel *a1, const float *a2, unsigned int a3, unsigned int a4, int a5, MultiRadixRealFFT *a6, uint64_t a7, unsigned int a8, float a9)
{
  IR::FFTFilterKernel::initialize(a1, a3, a4, a5);
  return IR::FFTFilterKernel::storeCoeffs(a1, a2, a3, a6, a7, a8, a9);
}

unsigned int *IR::FFTFilterKernel::initializeAndStoreCoeffs(IR::FFTFilterKernel *a1, const float *a2, unsigned int a3, unsigned int a4, int a5, MultiRadixRealFFT *a6, uint64_t a7, unsigned int a8)
{
  IR::FFTFilterKernel::initialize(a1, a3, a4, a5);
  return IR::FFTFilterKernel::storeCoeffs(a1, a2, a3, a6, a7, a8, 1.0);
}

uint64_t IR::FFTFilterKernel::accumulate(IR::FFTFilterKernel *this, const IR::FFTFilterKernel *a2, float a3)
{
  uint64_t v5;
  unsigned int v6;
  vDSP_Length v7;
  uint64_t result;
  uint64_t v9;
  unsigned int v10;
  float __B;

  __B = a3;
  v5 = (*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
  v6 = *((_DWORD *)a2 + 6);
  if (v6 >= v5)
    v7 = v5;
  else
    v7 = v6;
  if ((_DWORD)v7)
    vDSP_vsma(*(const float **)a2, 1, &__B, *(const float **)this, 1, *(float **)this, 1, v7);
  result = *((_QWORD *)this + 4);
  if (result)
  {
    v9 = *((_QWORD *)a2 + 4);
    if (v9)
      result = IR::FFTSubFilterData::accumulate(result, v9, __B);
  }
  v10 = *((_DWORD *)this + 6);
  if (v10 <= v7)
    v10 = v7;
  *((_DWORD *)this + 6) = v10;
  return result;
}

IR::FFTSubFilterData *IR::FFTFilterKernel::overwrite(IR::FFTFilterKernel *this, const IR::FFTFilterKernel *a2, float a3)
{
  uint64_t v5;
  IR::FFTSubFilterData *result;
  const IR::FFTSubFilterData *v7;
  float __B;

  __B = a3;
  if ((uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2 >= (unint64_t)((uint64_t)(*((_QWORD *)this + 1)
                                                                                         - *(_QWORD *)this) >> 2))
    LODWORD(v5) = (uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2;
  else
    v5 = (uint64_t)(*((_QWORD *)a2 + 1) - *(_QWORD *)a2) >> 2;
  if ((_DWORD)v5)
    vDSP_vsmul(*(const float **)a2, 1, &__B, *(float **)this, 1, v5);
  result = (IR::FFTSubFilterData *)*((_QWORD *)this + 4);
  if (result)
  {
    v7 = (const IR::FFTSubFilterData *)*((_QWORD *)a2 + 4);
    if (v7)
      return (IR::FFTSubFilterData *)IR::FFTSubFilterData::overwrite(result, v7, __B);
  }
  return result;
}

IR::FFTSubFilterData *IR::FFTFilterKernel::scale(IR::FFTFilterKernel *this, float a2)
{
  float *v3;
  uint64_t v5;
  IR::FFTSubFilterData *result;
  float __B;

  __B = a2;
  v3 = *(float **)this;
  v5 = *((_QWORD *)this + 1) - (_QWORD)v3;
  if (v5)
    vDSP_vsmul(v3, 1, &__B, v3, 1, v5 >> 2);
  result = (IR::FFTSubFilterData *)*((_QWORD *)this + 4);
  if (result)
    return (IR::FFTSubFilterData *)IR::FFTSubFilterData::scale(result, __B);
  return result;
}

uint64_t IR::FFTFilterKernel::getMaxFilterLength(IR::FFTFilterKernel *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this + 4);
  if (v1)
    LODWORD(v1) = v1[1] * *v1;
  return v1 + ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
}

uint64_t IR::FFTFilterKernel::getActiveFilterLength(IR::FFTFilterKernel *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this + 4);
  if (v1)
    LODWORD(v1) = v1[2] * *v1;
  return v1 + ((*((_QWORD *)this + 1) - *(_QWORD *)this) >> 2);
}

uint64_t IR::FFTFilterKernel::getFFTSubFilters(IR::FFTFilterKernel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  if (*(_QWORD *)(v1 + 40) == *(_QWORD *)(v1 + 48))
    return 0;
  return *(_QWORD *)(v1 + 40);
}

uint64_t IR::FFTFilterKernel::getComplexMultiplicationLengths(IR::FFTFilterKernel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (!v1)
    return 0;
  if (*(_QWORD *)(v1 + 64) == *(_QWORD *)(v1 + 72))
    return 0;
  return *(_QWORD *)(v1 + 64);
}

uint64_t IR::FFTFilterKernel::getNumActiveFFTSubFilters(IR::FFTFilterKernel *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 4);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  else
    return 0;
}

void std::default_delete<IR::FFTSubFilterData>::operator()[abi:ne180100](uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;

  if (a2)
  {
    v3 = (void *)a2[8];
    if (v3)
    {
      a2[9] = v3;
      operator delete(v3);
    }
    v4 = (void *)a2[5];
    if (v4)
    {
      a2[6] = v4;
      operator delete(v4);
    }
    v5 = (void *)a2[2];
    if (v5)
    {
      a2[3] = v5;
      operator delete(v5);
    }
    JUMPOUT(0x212BC7928);
  }
}

void OUTLINED_FUNCTION_0_2(void *__p@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(a2 + 8) = __p;
  operator delete(__p);
}

uint64_t IR::ComplexDataCircBuffer::Implementation::cleanup(IR::ComplexDataCircBuffer::Implementation *this)
{
  uint64_t result;

  *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this);
  std::vector<std::vector<float>>::__clear[abi:ne180100]((uint64_t *)this + 9);
  *((_QWORD *)this + 13) = *((_QWORD *)this + 12);
  *((_QWORD *)this + 16) = *((_QWORD *)this + 15);
  result = std::unique_ptr<MultiRadixRealFFT>::reset[abi:ne180100]((uint64_t *)this + 8, 0);
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_BYTE *)this + 144) = 0;
  return result;
}

uint64_t IR::ComplexDataCircBuffer::Implementation::initialize(IR::ComplexDataCircBuffer::Implementation *this, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  uint64_t result;
  unsigned int v7;
  int v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  MultiRadixRealFFT *v26;
  MultiRadixRealFFT **v27;
  _QWORD *v28;
  unsigned int v29;
  int v31;
  void *__p;
  _BYTE *v33;

  *((_BYTE *)this + 144) = 0;
  result = 4294956418;
  if (a2)
  {
    v7 = a3;
    if (a3)
    {
      if (a4)
      {
        v9 = a5;
        if (a5)
        {
          if (*((_QWORD *)this + 3) != *((_QWORD *)this + 4)
            && *((_DWORD *)this + 13) == a4
            && 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) == a2)
          {
            v11 = a2;
            v31 = 0;
            std::vector<float>::vector(&__p, 2 * a3 * a2 * a4, &v31);
            v12 = 0;
            v13 = 0;
            v14 = *(_QWORD *)this;
            v29 = v7;
            if (((*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 4) < v7)
              v7 = (*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 4;
            do
            {
              if (v7)
              {
                v15 = *((_DWORD *)this + 12);
                v16 = v7;
                do
                {
                  memcpy((char *)__p + 4 * v13, *(const void **)(*(_QWORD *)(v14 + 24 * v12) + 16 * v15), 4 * a4);
                  v17 = v13 + a4;
                  memcpy((char *)__p + 4 * v17, *(const void **)(*(_QWORD *)(*(_QWORD *)this + 24 * v12) + 16 * v15 + 8), 4 * a4);
                  v13 = v17 + a4;
                  v14 = *(_QWORD *)this;
                  if (v15 + 1 < (unint64_t)((uint64_t)(*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 4))
                    ++v15;
                  else
                    v15 = 0;
                  --v16;
                }
                while (v16);
              }
              ++v12;
            }
            while (v12 != v11);
            std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>((char *)this + 24, (char *)__p, (uint64_t)v33, (v33 - (_BYTE *)__p) >> 2);
            v7 = v29;
            v9 = a5;
            if (__p)
            {
              v33 = __p;
              operator delete(__p);
            }
          }
          else
          {
            LODWORD(__p) = 0;
            std::vector<float>::assign((char **)this + 3, 2 * a3 * a2 * a4, &__p);
            v11 = a2;
          }
          std::vector<std::vector<DSPSplitComplex>>::resize((uint64_t *)this, v11);
          __p = 0;
          std::vector<float *>::assign((char **)this + 15, v11, &__p);
          v18 = 0;
          v19 = 0;
          do
          {
            std::vector<DSPSplitComplex>::resize(*(_QWORD *)this + 24 * v18, v7);
            v20 = *((_QWORD *)this + 3);
            v21 = (_QWORD *)(*(_QWORD *)(*(_QWORD *)this + 24 * v18) + 8);
            v22 = v7;
            do
            {
              *(v21 - 1) = v20 + 4 * v19;
              *v21 = v20 + 4 * (v19 + a4);
              v21 += 2;
              v19 += a4 + a4;
              --v22;
            }
            while (v22);
            ++v18;
          }
          while (v18 != v11);
          *((_DWORD *)this + 13) = a4;
          *((_DWORD *)this + 14) = 0;
          *((_DWORD *)this + 12) = 0;
          std::vector<std::vector<float>>::resize((uint64_t *)this + 9, v11);
          v23 = 0;
          v24 = 2 * a4;
          do
          {
            v25 = *((_QWORD *)this + 9) + v23;
            LODWORD(__p) = 0;
            std::vector<float>::resize(v25, v24, &__p);
            v23 += 24;
            --v11;
          }
          while (v11);
          std::vector<float>::resize((uint64_t)this + 96, (v24 + v9));
          v27 = (MultiRadixRealFFT **)((char *)this + 64);
          v26 = (MultiRadixRealFFT *)*((_QWORD *)this + 8);
          if (!v26)
          {
            v28 = (_QWORD *)operator new();
            *v28 = 0;
            v28[1] = 0;
            std::unique_ptr<MultiRadixRealFFT>::reset[abi:ne180100]((uint64_t *)this + 8, (uint64_t)v28);
            v26 = *v27;
          }
          if (MultiRadixRealFFT::Size(v26) != (_DWORD)v24)
          {
            if (MultiRadixRealFFT::Initialize(*v27, v24))
              IR::ComplexDataCircBuffer::Implementation::initialize();
          }
          result = 0;
          *((_BYTE *)this + 144) = 1;
        }
      }
    }
  }
  return result;
}

void sub_2105B804C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IR::ComplexDataCircBuffer::Implementation::inverseFFTOverlapAdd(IR::ComplexDataCircBuffer::Implementation *this, unsigned int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  unsigned int v4;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v10;
  unsigned int v11;
  _QWORD *v12;
  unsigned int v13;
  vDSP_Length v14;
  uint64_t v15;
  unsigned int v16;
  float *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  float *v21;
  uint64_t v22;
  void *v23[2];

  v2 = *(_QWORD **)this;
  v3 = (_QWORD *)*((_QWORD *)this + 1);
  if (*(_QWORD **)this != v3)
  {
    v4 = a2;
    v6 = 0;
    v7 = 1;
    while (*(_QWORD *)(*((_QWORD *)this + 15) + 8 * v6))
    {
      v6 = v7;
      v8 = 0xAAAAAAAAAAAAAAABLL * (v3 - v2) > v7++;
      if (!v8)
      {
        if (v2[1] != *v2 && a2 != 0)
        {
          v10 = 0;
          v11 = *((_DWORD *)this + 14);
          v12 = (_QWORD *)*((_QWORD *)this + 1);
          do
          {
            v13 = *((_DWORD *)this + 13);
            if (v13 - v11 >= v4)
              v14 = v4;
            else
              v14 = v13 - v11;
            if (v12 == v2)
            {
              v12 = v2;
            }
            else
            {
              v15 = 0;
              v16 = 1;
              do
              {
                v17 = (float *)(*(_QWORD *)(*((_QWORD *)this + 15) + 8 * v15) + 4 * v10);
                vDSP_vadd((const float *)(*(_QWORD *)(*((_QWORD *)this + 9) + 24 * v15) + 4 * *((unsigned int *)this + 14)), 1, v17, 1, v17, 1, v14);
                v15 = v16;
                v2 = *(_QWORD **)this;
                v3 = (_QWORD *)*((_QWORD *)this + 1);
                v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)this) >> 3) > v16++;
              }
              while (v8);
              v13 = *((_DWORD *)this + 13);
              v11 = *((_DWORD *)this + 14);
              v12 = (_QWORD *)*((_QWORD *)this + 1);
            }
            v11 += v14;
            *((_DWORD *)this + 14) = v11;
            if (v11 >= v13)
            {
              if (v3 == v2)
              {
                v3 = v2;
              }
              else
              {
                v18 = 0;
                v19 = 1;
                do
                {
                  v20 = 3 * v18;
                  *(_OWORD *)v23 = *(_OWORD *)(v2[3 * v18] + 16 * *((unsigned int *)this + 12));
                  MultiRadixRealFFT::RealInPlaceTransform(*((MultiRadixRealFFT **)this + 8), (DSPSplitComplex *)v23, -1, 1.0);
                  vDSP_ztoc((const DSPSplitComplex *)v23, 1, *((DSPComplex **)this + 12), 2, *((unsigned int *)this + 13));
                  v21 = *(float **)(*((_QWORD *)this + 9) + 8 * v20);
                  vDSP_vadd(*((const float **)this + 12), 1, &v21[*((unsigned int *)this + 13)], 1, v21, 1, *((unsigned int *)this + 13));
                  memmove((void *)(*(_QWORD *)(*((_QWORD *)this + 9) + 8 * v20) + 4 * *((unsigned int *)this + 13)), (const void *)(*((_QWORD *)this + 12) + 4 * *((unsigned int *)this + 13)), 4 * *((unsigned int *)this + 13));
                  bzero(v23[0], 4 * *((unsigned int *)this + 13));
                  bzero(v23[1], 4 * *((unsigned int *)this + 13));
                  v18 = v19;
                  v2 = *(_QWORD **)this;
                  v3 = (_QWORD *)*((_QWORD *)this + 1);
                  v8 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v3 - *(_QWORD *)this) >> 3) > v19++;
                }
                while (v8);
              }
              v22 = (*((_DWORD *)this + 12) + 1);
              *((_DWORD *)this + 12) = v22;
              if (v22 == (uint64_t)(v2[1] - *v2) >> 4)
                *((_DWORD *)this + 12) = 0;
              v11 = 0;
              *((_DWORD *)this + 14) = 0;
              v12 = v3;
            }
            v10 += v14;
            v4 -= v14;
          }
          while (v4);
        }
        return;
      }
    }
  }
}

void *IR::ComplexDataCircBuffer::Implementation::getFFTBufferVec(IR::ComplexDataCircBuffer::Implementation *this, unsigned int a2)
{
  unsigned __int8 v3;

  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)this + 1) - *(_QWORD *)this) >> 3) > a2)
    return (void *)(*(_QWORD *)this + 24 * a2);
  if ((v3 & 1) != 0
  {
    return &IR::ComplexDataCircBuffer::Implementation::getFFTBufferVec::locEmpty;
  }
  __cxa_atexit((void (*)(void *))std::vector<DSPSplitComplex>::~vector[abi:ne180100], &IR::ComplexDataCircBuffer::Implementation::getFFTBufferVec::locEmpty, &dword_210570000);
  return &IR::ComplexDataCircBuffer::Implementation::getFFTBufferVec::locEmpty;
}

uint64_t std::vector<DSPSplitComplex>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

_QWORD *IR::ComplexDataCircBuffer::ComplexDataCircBuffer(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

IR::ComplexDataCircBuffer *IR::ComplexDataCircBuffer::ComplexDataCircBuffer(IR::ComplexDataCircBuffer *this)
{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)this = v2;
  return this;
}

{
  uint64_t v2;

  v2 = operator new();
  *(_OWORD *)v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 48) = 0u;
  *(_OWORD *)(v2 + 64) = 0u;
  *(_OWORD *)(v2 + 80) = 0u;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 112) = 0u;
  *(_OWORD *)(v2 + 128) = 0u;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)this = v2;
  return this;
}

void IR::ComplexDataCircBuffer::~ComplexDataCircBuffer(IR::ComplexDataCircBuffer *this)
{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<IR::ComplexDataCircBuffer::Implementation>::operator()[abi:ne180100]((uint64_t)this, v1);
}

{
  uint64_t v1;

  v1 = *(_QWORD *)this;
  *(_QWORD *)this = 0;
  if (v1)
    std::default_delete<IR::ComplexDataCircBuffer::Implementation>::operator()[abi:ne180100]((uint64_t)this, v1);
}

uint64_t IR::ComplexDataCircBuffer::initialize(IR::ComplexDataCircBuffer::Implementation **this, unsigned int a2, unsigned int a3, unsigned int a4, int a5)
{
  IR::ComplexDataCircBuffer::Implementation *v5;

  v5 = *this;
  if (v5)
    return IR::ComplexDataCircBuffer::Implementation::initialize(v5, a2, a3, a4, a5);
  else
    return 4294956429;
}

IR::ComplexDataCircBuffer::Implementation *IR::ComplexDataCircBuffer::cleanup(IR::ComplexDataCircBuffer::Implementation **this)
{
  IR::ComplexDataCircBuffer::Implementation *result;

  result = *this;
  if (result)
    return (IR::ComplexDataCircBuffer::Implementation *)IR::ComplexDataCircBuffer::Implementation::cleanup(result);
  return result;
}

void IR::ComplexDataCircBuffer::inverseFFTOverlapAdd(IR::ComplexDataCircBuffer::Implementation **this, unsigned int a2)
{
  IR::ComplexDataCircBuffer::Implementation *v2;

  v2 = *this;
  if (v2)
    IR::ComplexDataCircBuffer::Implementation::inverseFFTOverlapAdd(v2, a2);
}

uint64_t IR::ComplexDataCircBuffer::getNumOutputChannels(IR::ComplexDataCircBuffer *this)
{
  if (*(_QWORD *)this)
    return -1431655765 * ((*(_QWORD *)(*(_QWORD *)this + 8) - **(_QWORD **)this) >> 3);
  else
    return 0;
}

uint64_t IR::ComplexDataCircBuffer::getNumFFTBuffers(IR::ComplexDataCircBuffer *this)
{
  _QWORD *v1;

  v1 = *(_QWORD **)this;
  if (!*(_QWORD *)this || *v1 == v1[1])
    return 0;
  else
    return (*(_QWORD *)(*v1 + 8) - *(_QWORD *)*v1) >> 4;
}

uint64_t IR::ComplexDataCircBuffer::getFFTPartitionLength(IR::ComplexDataCircBuffer *this)
{
  if (*(_QWORD *)this)
    return *(unsigned int *)(*(_QWORD *)this + 52);
  else
    return 0;
}

uint64_t IR::ComplexDataCircBuffer::getCircularIndex(IR::ComplexDataCircBuffer *this)
{
  if (*(_QWORD *)this)
    return *(unsigned int *)(*(_QWORD *)this + 48);
  else
    return 0;
}

uint64_t IR::ComplexDataCircBuffer::getFFTProcPos(IR::ComplexDataCircBuffer *this)
{
  if (*(_QWORD *)this)
    return *(unsigned int *)(*(_QWORD *)this + 56);
  else
    return 0;
}

void *IR::ComplexDataCircBuffer::getFFTBufferVec(IR::ComplexDataCircBuffer::Implementation **this, unsigned int a2)
{
  IR::ComplexDataCircBuffer::Implementation *v2;
  unsigned __int8 v4;

  v2 = *this;
  if (v2)
    return IR::ComplexDataCircBuffer::Implementation::getFFTBufferVec(v2, a2);
  if ((v4 & 1) == 0)
  {
    {
      __cxa_atexit((void (*)(void *))std::vector<DSPSplitComplex>::~vector[abi:ne180100], &IR::ComplexDataCircBuffer::getFFTBufferVec::locEmpty, &dword_210570000);
    }
  }
  return &IR::ComplexDataCircBuffer::getFFTBufferVec::locEmpty;
}

void *IR::ComplexDataCircBuffer::getSampleDataPtrs(IR::ComplexDataCircBuffer *this)
{
  unsigned __int8 v2;

  if (*(_QWORD *)this)
    return (void *)(*(_QWORD *)this + 120);
  if ((v2 & 1) != 0
  {
    return &IR::ComplexDataCircBuffer::getSampleDataPtrs(void)::locEmpty;
  }
  __cxa_atexit((void (*)(void *))std::vector<float *>::~vector[abi:ne180100], &IR::ComplexDataCircBuffer::getSampleDataPtrs(void)::locEmpty, &dword_210570000);
  return &IR::ComplexDataCircBuffer::getSampleDataPtrs(void)::locEmpty;
}

uint64_t std::vector<float *>::~vector[abi:ne180100](uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t IR::ComplexDataCircBuffer::isInitialized(IR::ComplexDataCircBuffer *this)
{
  return *(unsigned __int8 *)(*(_QWORD *)this + 144);
}

char *std::vector<float>::__assign_with_size[abi:ne180100]<std::__wrap_iter<float *>,std::__wrap_iter<float *>>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 2)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v10 = v8 >> 1;
    if (v8 >> 1 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL)
      v11 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = std::vector<IR::IRCoordinateType>::__vallocate[abi:ne180100](v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 2;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, 4 * v15);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

void std::default_delete<IR::ComplexDataCircBuffer::Implementation>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void **v6;

  if (a2)
  {
    v3 = *(void **)(a2 + 120);
    if (v3)
    {
      *(_QWORD *)(a2 + 128) = v3;
      operator delete(v3);
    }
    v4 = *(void **)(a2 + 96);
    if (v4)
    {
      *(_QWORD *)(a2 + 104) = v4;
      operator delete(v4);
    }
    v6 = (void **)(a2 + 72);
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
    std::unique_ptr<MultiRadixRealFFT>::reset[abi:ne180100]((uint64_t *)(a2 + 64), 0);
    v5 = *(void **)(a2 + 24);
    if (v5)
    {
      *(_QWORD *)(a2 + 32) = v5;
      operator delete(v5);
    }
    v6 = (void **)a2;
    std::vector<std::vector<float>>::__destroy_vector::operator()[abi:ne180100](&v6);
    MEMORY[0x212BC7928](a2, 0x10A0C40DBD9303ALL);
  }
}

double IR::MPResampler<float>::MPResampler(uint64_t a1, int a2, float a3, float a4)
{
  uint64_t v4;
  double result;

  IR::DataResampler<float>::DataResampler(a1, a2, a3, a4);
  *(_QWORD *)v4 = &off_24CA2D428;
  *(_QWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  return result;
}

_QWORD *IR::MPResampler<float>::~MPResampler(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  *a1 = &off_24CA2D428;
  IR::MPResampler<float>::CleanUp((uint64_t)a1);
  v2 = (void *)a1[24];
  if (v2)
  {
    a1[25] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[21];
  if (v3)
  {
    a1[22] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[18];
  if (v4)
  {
    a1[19] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[15];
  if (v5)
  {
    a1[16] = v5;
    operator delete(v5);
  }
  v6 = (void *)a1[12];
  if (v6)
  {
    a1[13] = v6;
    operator delete(v6);
  }
  v7 = (void *)a1[9];
  if (v7)
  {
    a1[10] = v7;
    operator delete(v7);
  }
  return IR::DataResampler<float>::~DataResampler(a1);
}

void IR::MPResampler<float>::~MPResampler(_QWORD *a1)
{
  IR::MPResampler<float>::~MPResampler(a1);
  JUMPOUT(0x212BC7928);
}

void IR::MPResampler<float>::Initialize(uint64_t a1, int a2, int a3, int a4)
{
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  vDSP_Length v11;
  uint64_t v12;
  uint64_t v13;
  float v14;
  float v15;
  vDSP_DFT_SetupStruct *Setup;
  float *v17;
  vDSP_Length v18;
  float *v19;
  vDSP_Length v20;
  std::logic_error *exception;
  float v22;
  float __B;
  float __A;

  *(_BYTE *)(a1 + 20) = 0;
  if ((a2 - 4) <= 0xFFFFFFFC)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid Quality index");
    goto LABEL_17;
  }
  if ((a3 - 3) <= 0xFFFFFFFD)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid ExtrapolationMethod");
    goto LABEL_17;
  }
  if (a4 != 1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::invalid_argument::invalid_argument[abi:ne180100](exception, "Invalid InterpolationMethod");
LABEL_17:
  }
  *(_DWORD *)(a1 + 224) = a3;
  *(_DWORD *)(a1 + 228) = 1;
  if (a2 == 2)
    v5 = 128;
  else
    v5 = 512;
  if (a2 == 1)
    v5 = 32;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = vcvtps_u32_f32(fmaxf((float)(*(float *)(a1 + 16) / *(float *)(a1 + 12)) * (float)v6, 1.0));
  if (v6 <= v7)
    v6 = v7;
  v8 = 1 << -(char)__clz(v6 - 1);
  if (v5 <= v8)
    v5 = v8;
  v9 = (v5 >> 1) + 1;
  *(_DWORD *)(a1 + 216) = v5;
  *(_DWORD *)(a1 + 220) = v9;
  std::vector<float>::resize(a1 + 168, v9);
  std::vector<float>::resize(a1 + 192, *(unsigned int *)(a1 + 220));
  v22 = 0.0;
  std::vector<float>::assign((char **)(a1 + 72), *(unsigned int *)(a1 + 220), &v22);
  std::vector<float>::assign((char **)(a1 + 96), *(unsigned int *)(a1 + 220), &v22);
  std::vector<float>::assign((char **)(a1 + 120), *(unsigned int *)(a1 + 216), &v22);
  std::vector<float>::assign((char **)(a1 + 144), *(unsigned int *)(a1 + 216), &v22);
  v10 = *(_QWORD *)(a1 + 144);
  *(_DWORD *)v10 = 1065353216;
  v11 = ((*(_DWORD *)(a1 + 216) >> 1) - 1);
  __A = 2.0;
  vDSP_vfill(&__A, (float *)(v10 + 4), 1, v11);
  v12 = *(unsigned int *)(a1 + 216);
  *(_DWORD *)(*(_QWORD *)(a1 + 144) + ((2 * v12) & 0x1FFFFFFFCLL)) = 1065353216;
  v13 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v13;
  v14 = *(float *)(a1 + 12) / (float)v12;
  v15 = *(float *)(a1 + 16) / (float)v12;
  vDSP_DFT_DestroySetup(*(vDSP_DFT_Setup *)(a1 + 40));
  vDSP_DFT_DestroySetup(*(vDSP_DFT_Setup *)(a1 + 48));
  Setup = vDSP_DFT_zrop_CreateSetup(0, *(unsigned int *)(a1 + 216), vDSP_DFT_FORWARD);
  *(_QWORD *)(a1 + 40) = Setup;
  *(_QWORD *)(a1 + 48) = vDSP_DFT_zrop_CreateSetup(Setup, *(unsigned int *)(a1 + 216), vDSP_DFT_INVERSE);
  v17 = *(float **)(a1 + 168);
  v18 = (uint64_t)(*(_QWORD *)(a1 + 176) - (_QWORD)v17) >> 2;
  __B = v14;
  __A = v22;
  vDSP_vramp(&__A, &__B, v17, 1, v18);
  v19 = *(float **)(a1 + 192);
  v20 = (uint64_t)(*(_QWORD *)(a1 + 200) - (_QWORD)v19) >> 2;
  __B = v15;
  __A = v22;
  vDSP_vramp(&__A, &__B, v19, 1, v20);
  *(_BYTE *)(a1 + 20) = 1;
}

void sub_2105B8BE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned int IR::MPResampler<float>::Initialize(uint64_t a1, const __CFDictionary **a2)
{
  const __CFDictionary *v3;
  int v5;
  const __CFDictionary *v6;
  int v7;
  const __CFDictionary *v8;
  int v9;
  applesauce::CF *exception;
  applesauce::CF *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v3 = *a2;
  if (*a2)
  {
    v15 = 2;
    v5 = applesauce::CF::at_or<IR::MPResampler<float>::Quality,__CFString const*&>(v3, (const void **)&IR::kIRDataResamplerConfigQualityKey, &v15);
    v6 = *a2;
    if (!*a2)
    {
      exception = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(exception);
    }
    v14 = 1;
    v7 = applesauce::CF::at_or<IR::MPResampler<float>::ExtrapolationMethod,__CFString const*&>(v6, (const void **)&IR::kMPResamplerConfigExtrapMethodKey, &v14);
    v8 = *a2;
    if (!*a2)
    {
      v12 = (applesauce::CF *)__cxa_allocate_exception(0x10uLL);
      applesauce::CF::construct_error(v12);
    }
    v13 = 1;
    v9 = applesauce::CF::at_or<IR::MPResampler<float>::InterpolationMethod,__CFString const*&>(v8, (const void **)&IR::kMPResamplerConfigInterpMethodKey, &v13);
  }
  else
  {
    v5 = 2;
    v7 = 1;
    v9 = 1;
  }
  IR::MPResampler<float>::Initialize(a1, v5, v7, v9);
  return vcvtps_u32_f32(fmaxf((float)(*(float *)(a1 + 16) / *(float *)(a1 + 12)) * (float)*(unsigned int *)(a1 + 8), 1.0));
}

void sub_2105B8D28(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void IR::MPResampler<float>::CleanUp(uint64_t a1)
{
  *(_BYTE *)(a1 + 20) = 0;
  vDSP_DFT_DestroySetup(*(vDSP_DFT_Setup *)(a1 + 40));
  vDSP_DFT_DestroySetup(*(vDSP_DFT_Setup *)(a1 + 48));
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
}

uint64_t IR::MPResampler<float>::Process(uint64_t a1, const DSPComplex *a2, unsigned int a3, float *a4, unsigned int a5)
{
  DSPComplex *v10;
  float *v11;
  float v12;
  _DWORD *v13;
  vDSP_Length v14;
  unsigned int v15;
  float *v16;
  float *v17;
  vDSP_Length v18;
  float *v19;
  float *v20;
  float *v21;
  float *v22;
  vDSP_Length v23;
  const float *v24;
  uint64_t v25;
  const float *v26;
  vDSP_Length v27;
  const float *v28;
  float v29;
  int v30;
  const float *v31;
  float *v32;
  float *v33;
  float *v34;
  float *v35;
  float *v36;
  const float *v37;
  float __B;

  if (!*(_BYTE *)(a1 + 20))
    return 103;
  if (*(_DWORD *)(a1 + 8) < a3
    || vcvtps_u32_f32(fmaxf((float)(*(float *)(a1 + 16) / *(float *)(a1 + 12)) * (float)a3, 1.0)) != a5)
  {
    return 104;
  }
  v10 = *(DSPComplex **)(a1 + 120);
  vDSP_vclr(*(float **)(a1 + 72), 1, (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 2);
  vDSP_vclr(*(float **)(a1 + 96), 1, (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2);
  vDSP_ctoz(a2, 2, (const DSPSplitComplex *)(a1 + 56), 1, a3 >> 1);
  v11 = *(float **)(a1 + 72);
  if ((a3 & 1) != 0)
    v11[a3 >> 1] = *((float *)a2 + a3 - 1);
  v12 = 1.0 / (float)*(unsigned int *)(a1 + 216);
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(a1 + 40), v11, *(const float **)(a1 + 96), v11, *(float **)(a1 + 96));
  v13 = *(_DWORD **)(a1 + 96);
  v14 = *(unsigned int *)(a1 + 220);
  v15 = v14 - 1;
  *(_DWORD *)(*(_QWORD *)(a1 + 72) + 4 * v15) = *v13;
  *v13 = 0;
  v13[v15] = 0;
  vDSP_zvmags((const DSPSplitComplex *)(a1 + 56), 1, *(float **)(a1 + 120), 1, v14);
  v16 = *(float **)(a1 + 120);
  __B = *(float *)(a1 + 220);
  vvsqrtf(v16, v16, (const int *)&__B);
  v17 = *(float **)(a1 + 120);
  v18 = *(unsigned int *)(a1 + 220);
  __B = 0.5;
  vDSP_vsmul(v17, 1, &__B, v17, 1, v18);
  IR::MPResampler<float>::Interpolate(a1, a1 + 120, (float **)(a1 + 72));
  v19 = *(float **)(a1 + 72);
  __B = *(float *)(a1 + 220);
  vvlogf(v19, v19, (const int *)&__B);
  vDSP_vclr(*(float **)(a1 + 96), 1, (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 2);
  v20 = *(float **)(a1 + 72);
  v21 = *(float **)(a1 + 96);
  *v21 = v20[*(_DWORD *)(a1 + 220) - 1];
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(a1 + 48), v20, v21, v20, v21);
  vDSP_ztoc((const DSPSplitComplex *)(a1 + 56), 1, v10, 2, (unint64_t)*(unsigned int *)(a1 + 216) >> 1);
  v22 = *(float **)(a1 + 120);
  v23 = (uint64_t)(*(_QWORD *)(a1 + 128) - (_QWORD)v22) >> 2;
  __B = v12 * 0.5;
  vDSP_vsmul(v22, 1, &__B, v22, 1, v23);
  v24 = *(const float **)(a1 + 120);
  v25 = *(_QWORD *)(a1 + 128) - (_QWORD)v24;
  v26 = *(const float **)(a1 + 144);
  if ((uint64_t)(*(_QWORD *)(a1 + 152) - (_QWORD)v26) >> 2 >= (unint64_t)(v25 >> 2))
    v27 = v25 >> 2;
  else
    v27 = (uint64_t)(*(_QWORD *)(a1 + 152) - (_QWORD)v26) >> 2;
  vDSP_vmul(v24, 1, v26, 1, *(float **)(a1 + 120), 1, v27);
  vDSP_ctoz(v10, 2, (const DSPSplitComplex *)(a1 + 56), 1, (unint64_t)*(unsigned int *)(a1 + 216) >> 1);
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(a1 + 40), *(const float **)(a1 + 72), *(const float **)(a1 + 96), *(float **)(a1 + 72), *(float **)(a1 + 96));
  v28 = *(const float **)(a1 + 96);
  v29 = *(float *)(a1 + 220);
  v30 = LODWORD(v29) - 1;
  v31 = *(const float **)(a1 + 72);
  v31[v30] = *v28;
  *v28 = 0.0;
  v28[v30] = 0.0;
  v32 = *(float **)(a1 + 120);
  __B = v29;
  vvexpf(v32, v31, (const int *)&__B);
  v33 = *(float **)(a1 + 96);
  v34 = *(float **)(a1 + 72);
  __B = *(float *)(a1 + 220);
  vvsincosf(v33, v34, v33, (const int *)&__B);
  vDSP_vmul(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 72), 1, *(float **)(a1 + 72), 1, *(unsigned int *)(a1 + 220));
  vDSP_vmul(*(const float **)(a1 + 120), 1, *(const float **)(a1 + 96), 1, *(float **)(a1 + 96), 1, *(unsigned int *)(a1 + 220));
  v35 = *(float **)(a1 + 72);
  v36 = *(float **)(a1 + 96);
  *v36 = v35[*(_DWORD *)(a1 + 220) - 1];
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(a1 + 48), v35, v36, v35, v36);
  vDSP_ztoc((const DSPSplitComplex *)(a1 + 56), 1, v10, 2, (unint64_t)*(unsigned int *)(a1 + 216) >> 1);
  v37 = *(const float **)(a1 + 120);
  __B = v12;
  vDSP_vsmul(v37, 1, &__B, a4, 1, a5);
  return 0;
}

void IR::MPResampler<float>::Interpolate(uint64_t a1, uint64_t a2, float **a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  unsigned int v14;
  unsigned int v15;
  float v16;
  float *v17;
  float v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  float v23;
  float __A;

  v3 = *(unsigned int *)(a1 + 220);
  if (v3 > (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2)
    IR::MPResampler<float>::Interpolate();
  if (v3 > a3[1] - *a3)
    IR::MPResampler<float>::Interpolate();
  **a3 = fmaxf(**(float **)a2, 1.0e-10);
  if (v3 >= 2)
  {
    v4 = 0;
    v5 = *(_QWORD *)(a1 + 192);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a1 + 168);
    v8 = *(float **)a2;
    v9 = *a3;
    v10 = (uint64_t)(*a3 + 1);
    v11 = -4;
    v12 = *(float *)(a1 + 16) / *(float *)(a1 + 12);
    while (1)
    {
      v13 = *(float *)(v5 + 4 + 4 * v4);
      if (v13 > *(float *)(v7 + 4 * v6))
        break;
      v14 = vcvtps_u32_f32(v12 * (float)(v4 + 1));
      v15 = v14 - 1;
      *(float *)(v10 + 4 * v4) = fmaxf(v8[v15]+ (float)((float)((float)(v13 - *(float *)(v7 + 4 * v15)) * (float)(v8[v14] - v8[v15]))/ (float)(*(float *)(v7 + 4 * v14) - *(float *)(v7 + 4 * v15))), 1.0e-10);
      v11 -= 4;
      if (v3 - 1 == ++v4)
        return;
    }
    if (*(_DWORD *)(a1 + 224) == 1)
    {
      v16 = fmaxf(*(float *)(*(_QWORD *)a2 + 4 * v6), 1.0e-10);
      v17 = &(*a3)[v11 / 0xFFFFFFFFFFFFFFFCLL];
      __A = v16;
      vDSP_vfill(&__A, v17, 1, (v6 - v4));
    }
    else
    {
      v18 = v8[v6];
      v9[v4 + 1] = fmaxf(v18, 1.0e-10);
      v19 = (*(_QWORD *)(a1 + 200) - v5) >> 2;
      v20 = v4 + 2;
      if (v19 > v4 + 2)
      {
        v21 = 0;
        v22 = v4 + 3;
        v23 = (float)(3.1416 / (float)((float)(v3 - v4 - 2) + -1.0)) * 0.5;
        do
        {
          v9[v20] = fmaxf(v18 * cosf(v23 * (float)v21), 1.0e-10);
          v20 = v22;
          ++v21;
        }
        while (v19 > v22++);
      }
    }
  }
}

uint64_t IR::MPResampler<float>::GetRequiredNumberOfInputFrames(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = vcvtms_u32_f32(fmaxf((float)(*(float *)(a1 + 12) / *(float *)(a1 + 16)) * (float)a2, 1.0));
  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= v2)
    return v2;
  else
    return v3;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::unique_ptr<IR::FFTFilterKernel>>>(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

unint64_t applesauce::CF::at_or<IR::MPResampler<float>::Quality,__CFString const*&>(const __CFDictionary *a1, const void **a2, unsigned int *a3)
{
  const __CFDictionary *v4;
  unint64_t result;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<IR::MPResampler<float>::Quality,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

unint64_t applesauce::CF::convert_as<IR::MPResampler<float>::Quality,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  unsigned int v4;
  int v5;
  unint64_t v6;
  int valuePtr;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    valuePtr = 0;
    Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
    v4 = valuePtr & 0xFFFFFF00;
    v5 = valuePtr;
    if (!Value)
    {
      v4 = 0;
      v5 = 0;
    }
    v6 = (unint64_t)(Value != 0) << 32;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v4 = 0;
  }
  return v6 | v4 | v5;
}

unint64_t applesauce::CF::at_or<IR::MPResampler<float>::ExtrapolationMethod,__CFString const*&>(const __CFDictionary *a1, const void **a2, unsigned int *a3)
{
  const __CFDictionary *v4;
  unint64_t result;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<IR::MPResampler<float>::ExtrapolationMethod,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

unint64_t applesauce::CF::convert_as<IR::MPResampler<float>::ExtrapolationMethod,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  unsigned int v4;
  int v5;
  unint64_t v6;
  int valuePtr;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    valuePtr = 0;
    Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
    v4 = valuePtr & 0xFFFFFF00;
    v5 = valuePtr;
    if (!Value)
    {
      v4 = 0;
      v5 = 0;
    }
    v6 = (unint64_t)(Value != 0) << 32;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v4 = 0;
  }
  return v6 | v4 | v5;
}

unint64_t applesauce::CF::at_or<IR::MPResampler<float>::InterpolationMethod,__CFString const*&>(const __CFDictionary *a1, const void **a2, unsigned int *a3)
{
  const __CFDictionary *v4;
  unint64_t result;

  v4 = applesauce::CF::details::at_key<__CFString const*&>(a1, a2);
  if (!v4)
    return *a3;
  result = applesauce::CF::convert_as<IR::MPResampler<float>::InterpolationMethod,0>(v4);
  if ((result & 0xFF00000000) != 0)
    return result;
  else
    return *a3;
}

unint64_t applesauce::CF::convert_as<IR::MPResampler<float>::InterpolationMethod,0>(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  unsigned int v4;
  int v5;
  unint64_t v6;
  int valuePtr;

  if (a1 && (TypeID = CFNumberGetTypeID(), TypeID == CFGetTypeID(a1)))
  {
    valuePtr = 0;
    Value = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
    v4 = valuePtr & 0xFFFFFF00;
    v5 = valuePtr;
    if (!Value)
    {
      v4 = 0;
      v5 = 0;
    }
    v6 = (unint64_t)(Value != 0) << 32;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v4 = 0;
  }
  return v6 | v4 | v5;
}

CFMutableStringRef PlatformUtilities::CopyHardwareModelShortName(PlatformUtilities *this)
{
  const __CFAllocator *v1;
  CFMutableStringRef Mutable;
  __CFString *v3;
  CFMutableStringRef MutableCopy;
  const __CFString *v5;
  uint64_t v6;
  const __CFString *v7;
  CFIndex Length;
  size_t v10;
  char v11;
  char cStr[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  CFRange v17;

  v16 = *MEMORY[0x24BDAC8D0];
  v1 = (const __CFAllocator *)*MEMORY[0x24BDBD240];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x24BDBD240], 0);
  if (!Mutable)
    return 0;
  v3 = Mutable;
  v14 = 0u;
  v15 = 0u;
  *(_OWORD *)cStr = 0u;
  v13 = 0u;
  v10 = 64;
  sysctlbyname("hw.model", cStr, &v10, 0, 0);
  CFStringAppendCString(v3, cStr, 0);
  MutableCopy = CFStringCreateMutableCopy(v1, 0, v3);
  CFRelease(v3);
  if (MutableCopy)
  {
    v5 = CFSTR("AP");
    if (CFStringHasSuffix(MutableCopy, CFSTR("AP"))
      || (v5 = CFSTR("DEV"), CFStringHasSuffix(MutableCopy, CFSTR("DEV")))
      || (v5 = CFSTR("ap"), CFStringHasSuffix(MutableCopy, CFSTR("ap")))
      || (v5 = CFSTR("dev"), CFStringHasSuffix(MutableCopy, CFSTR("dev"))))
    {
      CFStringTrim(MutableCopy, v5);
    }
    *(_QWORD *)cStr = 0;
    *(_QWORD *)&cStr[8] = 1;
    v6 = MGGetProductType();
    if (v6 == 952317141)
    {
      v10 = (size_t)CFStringCreateWithCString(0, "u", 0x600u);
      v11 = 1;
      CACFString::operator=((uint64_t)cStr, (uint64_t)&v10);
    }
    else
    {
      if (v6 != 2081274472 && v6 != 2468178735)
        goto LABEL_16;
      v10 = (size_t)CFStringCreateWithCString(0, "m", 0x600u);
      v11 = 1;
      CACFString::operator=((uint64_t)cStr, (uint64_t)&v10);
    }
    CACFString::~CACFString((CACFString *)&v10);
LABEL_16:
    v7 = *(const __CFString **)cStr;
    if (*(_QWORD *)cStr && CFStringHasSuffix(MutableCopy, *(CFStringRef *)cStr))
    {
      Length = CFStringGetLength(MutableCopy);
      v17.length = CFStringGetLength(v7);
      v17.location = Length - v17.length;
      CFStringFindAndReplace(MutableCopy, v7, &stru_24CA2D4D8, v17, 1uLL);
    }
    CACFString::~CACFString((CACFString *)cStr);
  }
  return MutableCopy;
}

void sub_2105B9938(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  CACFString::~CACFString((CACFString *)&a9);
  CACFString::~CACFString((CACFString *)&a11);
  _Unwind_Resume(a1);
}

uint64_t PlatformUtilities_iOS::GetProductType(PlatformUtilities_iOS *this)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck == 1)
    return PlatformUtilities_iOS::GetProductType(void)::sType;
  PlatformUtilities_iOS::GetProductType(void)::sCompletedCheck = 1;
  v2 = MGGetProductType();
  if (v2 > 2158787295)
  {
    if (v2 > 3196805750)
    {
      if (v2 > 3711192743)
      {
        if (v2 > 3885279869)
        {
          if (v2 > 4068102501)
          {
            if (v2 <= 4231109336)
            {
              switch(v2)
              {
                case 4068102502:
                  result = 168;
                  goto LABEL_472;
                case 4172444931:
                  result = 132;
                  goto LABEL_472;
                case 4201643249:
                  result = 35;
                  goto LABEL_472;
              }
              goto LABEL_471;
            }
            if (v2 > 4240173201)
            {
              if (v2 == 4240173202)
              {
                result = 2;
                goto LABEL_472;
              }
              if (v2 == 4242862982)
              {
                result = 80;
                goto LABEL_472;
              }
              goto LABEL_471;
            }
            if (v2 != 4231109337)
            {
              if (v2 == 4232256925)
              {
                result = 114;
                goto LABEL_472;
              }
              goto LABEL_471;
            }
            goto LABEL_377;
          }
          if (v2 <= 3953847431)
          {
            if (v2 == 3885279870)
            {
              result = 32;
              goto LABEL_472;
            }
            if (v2 != 3933865620)
            {
              if (v2 == 3933982784)
              {
                result = 53;
                goto LABEL_472;
              }
              goto LABEL_471;
            }
            goto LABEL_372;
          }
          if (v2 > 4055323050)
          {
            if (v2 == 4055323051)
            {
              result = 58;
              goto LABEL_472;
            }
            if (v2 == 4067129264)
            {
              result = 139;
              goto LABEL_472;
            }
          }
          else
          {
            if (v2 == 3953847432)
            {
              result = 170;
              goto LABEL_472;
            }
            if (v2 == 4025247511)
            {
              result = 133;
              goto LABEL_472;
            }
          }
LABEL_471:
          result = 0;
          goto LABEL_472;
        }
        if (v2 <= 3825599859)
        {
          if (v2 <= 3767261005)
          {
            switch(v2)
            {
              case 3711192744:
                result = 84;
                goto LABEL_472;
              case 3742999858:
                result = 159;
                goto LABEL_472;
              case 3743999268:
                result = 24;
                goto LABEL_472;
            }
            goto LABEL_471;
          }
          if (v2 == 3767261006)
          {
            result = 153;
            goto LABEL_472;
          }
          if (v2 != 3801472101)
          {
            if (v2 == 3819635030)
            {
              result = 160;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          goto LABEL_344;
        }
        if (v2 <= 3863625341)
        {
          switch(v2)
          {
            case 3825599860:
              result = 20;
              goto LABEL_472;
            case 3839750255:
              result = 169;
              goto LABEL_472;
            case 3856877970:
              result = 110;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 > 3865922941)
        {
          if (v2 == 3865922942)
          {
            result = 56;
            goto LABEL_472;
          }
          if (v2 == 3867318491)
          {
            result = 162;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 != 3863625342)
        {
          if (v2 == 3865897231)
          {
            result = 79;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
LABEL_385:
        result = 97;
        goto LABEL_472;
      }
      if (v2 <= 3540156651)
      {
        if (v2 > 3300281075)
        {
          if (v2 <= 3397214290)
          {
            if (v2 == 3300281076)
            {
              result = 54;
              goto LABEL_472;
            }
            if (v2 == 3348380076)
            {
              result = 4;
              goto LABEL_472;
            }
            if (v2 != 3361025853)
              goto LABEL_471;
            goto LABEL_381;
          }
          if (v2 <= 3417429876)
          {
            if (v2 == 3397214291)
            {
              result = 74;
              goto LABEL_472;
            }
            if (v2 == 3402870384)
            {
              result = 70;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          if (v2 != 3417429877)
          {
            if (v2 == 3455223061)
            {
              result = 83;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          goto LABEL_371;
        }
        if (v2 <= 3228373940)
        {
          if (v2 == 3196805751)
          {
            result = 7;
            goto LABEL_472;
          }
          if (v2 == 3215673114)
          {
            result = 75;
            goto LABEL_472;
          }
          v9 = 3217792190;
LABEL_151:
          if (v2 != v9)
            goto LABEL_471;
          goto LABEL_372;
        }
        if (v2 == 3228373941)
        {
LABEL_383:
          result = 104;
          goto LABEL_472;
        }
        if (v2 != 3241053352)
        {
          if (v2 == 3242623367)
          {
            result = 15;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
LABEL_384:
        result = 107;
        goto LABEL_472;
      }
      if (v2 > 3637438249)
      {
        if (v2 <= 3670339450)
        {
          if (v2 == 3637438250)
          {
            result = 52;
            goto LABEL_472;
          }
          if (v2 != 3645319985)
          {
            if (v2 == 3663011141)
            {
              result = 156;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          goto LABEL_380;
        }
        if (v2 > 3683904381)
        {
          if (v2 == 3683904382)
          {
            result = 137;
            goto LABEL_472;
          }
          v6 = 3707345671;
          goto LABEL_359;
        }
        if (v2 == 3670339451)
          goto LABEL_372;
        v7 = 3677894691;
LABEL_96:
        if (v2 == v7)
        {
          result = 102;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
      if (v2 <= 3585085678)
      {
        if (v2 == 3540156652)
        {
          result = 93;
          goto LABEL_472;
        }
        if (v2 != 3543203160)
        {
          if (v2 == 3571532206)
          {
            result = 151;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_372;
      }
      if (v2 == 3585085679)
      {
        result = 10;
        goto LABEL_472;
      }
      if (v2 == 3599094683)
        goto LABEL_385;
      v12 = 3636345305;
      goto LABEL_366;
    }
    if (v2 > 2688879998)
    {
      if (v2 <= 2940697644)
      {
        if (v2 <= 2781508712)
        {
          if (v2 > 2722529671)
          {
            switch(v2)
            {
              case 2722529672:
                result = 28;
                goto LABEL_472;
              case 2730762296:
                result = 112;
                goto LABEL_472;
              case 2751865418:
                result = 143;
                goto LABEL_472;
            }
            goto LABEL_471;
          }
          if (v2 == 2688879999)
          {
            result = 39;
            goto LABEL_472;
          }
          if (v2 != 2692844695)
          {
            if (v2 == 2702125347)
            {
              result = 3;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
LABEL_256:
          result = 197;
          goto LABEL_472;
        }
        if (v2 <= 2797549162)
        {
          switch(v2)
          {
            case 2781508713:
              result = 6;
              goto LABEL_472;
            case 2793418701:
              result = 19;
              goto LABEL_472;
            case 2795618603:
              result = 42;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 > 2880863277)
        {
          if (v2 != 2880863278)
          {
            if (v2 == 2903084588)
            {
              result = 85;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
LABEL_360:
          result = 51;
          goto LABEL_472;
        }
        if (v2 == 2797549163)
        {
          result = 113;
          goto LABEL_472;
        }
        v5 = 2823174122;
        goto LABEL_280;
      }
      if (v2 <= 3101941569)
      {
        if (v2 <= 2979575959)
        {
          switch(v2)
          {
            case 2940697645:
              result = 38;
              goto LABEL_472;
            case 2941181571:
              result = 41;
              goto LABEL_472;
            case 2943112657:
              result = 149;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 == 2979575960)
        {
          result = 155;
          goto LABEL_472;
        }
        if (v2 == 3001488778)
        {
          result = 34;
          goto LABEL_472;
        }
        v11 = 3054476161;
LABEL_315:
        if (v2 != v11)
          goto LABEL_471;
        goto LABEL_316;
      }
      if (v2 <= 3133873108)
      {
        if (v2 == 3101941570)
          goto LABEL_272;
        if (v2 != 3104290450)
        {
          v10 = 3128362815;
          goto LABEL_370;
        }
        goto LABEL_337;
      }
      if (v2 <= 3184375230)
      {
        if (v2 == 3133873109)
        {
          result = 62;
          goto LABEL_472;
        }
        if (v2 == 3143587592)
        {
          result = 166;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
      if (v2 == 3184375231)
      {
LABEL_389:
        result = 77;
        goto LABEL_472;
      }
      v12 = 3196158497;
LABEL_366:
      if (v2 != v12)
        goto LABEL_471;
      goto LABEL_367;
    }
    if (v2 <= 2454275342)
    {
      if (v2 > 2288107368)
      {
        if (v2 <= 2336512886)
        {
          if (v2 != 2288107369)
          {
            if (v2 == 2309863438)
            {
              result = 37;
              goto LABEL_472;
            }
            if (v2 == 2311900306)
            {
              result = 14;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          goto LABEL_363;
        }
        if (v2 > 2418348557)
        {
          if (v2 == 2418348558)
          {
            result = 135;
            goto LABEL_472;
          }
          if (v2 == 2445473385)
          {
            result = 124;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 == 2336512887)
        {
LABEL_378:
          result = 121;
          goto LABEL_472;
        }
        v4 = 2385671069;
LABEL_300:
        if (v2 == v4)
        {
          result = 50;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
      if (v2 <= 2236272847)
      {
        if (v2 != 2158787296)
        {
          if (v2 == 2159747553)
          {
            result = 26;
            goto LABEL_472;
          }
          if (v2 != 2162679683)
            goto LABEL_471;
          goto LABEL_386;
        }
LABEL_217:
        result = 69;
        goto LABEL_472;
      }
      if (v2 != 2236272848)
      {
        if (v2 != 2262113699)
        {
          if (v2 == 2270970153)
          {
            result = 21;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_382;
      }
LABEL_367:
      result = 87;
      goto LABEL_472;
    }
    if (v2 <= 2619317133)
    {
      if (v2 <= 2487868871)
      {
        if (v2 == 2454275343)
        {
          result = 63;
          goto LABEL_472;
        }
        if (v2 != 2458172802)
        {
          v3 = 2468178735;
LABEL_168:
          if (v2 == v3)
          {
            result = 120;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_367;
      }
      if (v2 == 2487868872)
        goto LABEL_384;
      if (v2 != 2516717268)
      {
        v4 = 2614323575;
        goto LABEL_300;
      }
    }
    else
    {
      if (v2 <= 2628394913)
      {
        if (v2 == 2619317134)
          goto LABEL_388;
        if (v2 != 2622433984)
        {
          if (v2 == 2625074843)
          {
            result = 161;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_379;
      }
      if (v2 <= 2644487443)
      {
        if (v2 == 2628394914)
          goto LABEL_316;
        v7 = 2634105757;
        goto LABEL_96;
      }
      if (v2 == 2644487444)
      {
        result = 92;
        goto LABEL_472;
      }
      if (v2 != 2673319456)
        goto LABEL_471;
    }
    result = 73;
    goto LABEL_472;
  }
  if (v2 <= 1309571157)
  {
    if (v2 <= 676119127)
    {
      if (v2 <= 337183580)
      {
        if (v2 > 133314239)
        {
          if (v2 > 228444037)
          {
            if (v2 > 262180326)
            {
              if (v2 == 262180327)
              {
                result = 123;
                goto LABEL_472;
              }
              if (v2 == 330877086)
              {
                result = 43;
                goto LABEL_472;
              }
              goto LABEL_471;
            }
            if (v2 != 228444038)
            {
              v3 = 253148925;
              goto LABEL_168;
            }
LABEL_380:
            result = 72;
            goto LABEL_472;
          }
          if (v2 == 133314240)
          {
            result = 40;
            goto LABEL_472;
          }
          if (v2 != 157833461)
          {
            if (v2 == 173258742)
            {
              result = 59;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
LABEL_249:
          result = 78;
          goto LABEL_472;
        }
        if (v2 <= 42878381)
        {
          switch(v2)
          {
            case 23433786:
              result = 61;
              goto LABEL_472;
            case 33245053:
              result = 68;
              goto LABEL_472;
            case 40511012:
              result = 134;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 == 42878382)
        {
          result = 12;
          goto LABEL_472;
        }
        if (v2 != 79936591)
        {
          if (v2 != 88647037)
            goto LABEL_471;
          goto LABEL_389;
        }
LABEL_382:
        result = 76;
        goto LABEL_472;
      }
      if (v2 <= 363237282)
      {
        if (v2 > 344862119)
        {
          switch(v2)
          {
            case 344862120:
              result = 115;
              goto LABEL_472;
            case 355234908:
              result = 129;
              goto LABEL_472;
            case 358923952:
              result = 126;
              goto LABEL_472;
          }
          goto LABEL_471;
        }
        if (v2 == 337183581)
        {
          result = 11;
          goto LABEL_472;
        }
        if (v2 == 340218669)
        {
          result = 111;
          goto LABEL_472;
        }
        v8 = 341800273;
        goto LABEL_162;
      }
      if (v2 <= 502329936)
      {
        if (v2 != 363237283)
        {
          if (v2 == 425046865)
          {
            result = 157;
            goto LABEL_472;
          }
          if (v2 == 445396642)
          {
            result = 117;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_372;
      }
      if (v2 <= 555503453)
      {
        if (v2 == 502329937)
        {
          result = 22;
          goto LABEL_472;
        }
        v6 = 551446205;
LABEL_359:
        if (v2 != v6)
          goto LABEL_471;
        goto LABEL_360;
      }
      if (v2 != 555503454)
      {
        if (v2 == 574536383)
        {
          result = 30;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
LABEL_388:
      result = 106;
      goto LABEL_472;
    }
    if (v2 <= 952317140)
    {
      if (v2 > 776033018)
      {
        if (v2 > 851437780)
        {
          if (v2 <= 910181309)
          {
            if (v2 == 851437781)
            {
              result = 29;
              goto LABEL_472;
            }
            if (v2 == 896202454)
            {
              result = 71;
              goto LABEL_472;
            }
            goto LABEL_471;
          }
          if (v2 == 910181310)
            goto LABEL_387;
          if (v2 != 910313402)
            goto LABEL_471;
LABEL_337:
          result = 195;
          goto LABEL_472;
        }
        if (v2 == 776033019)
        {
          result = 57;
          goto LABEL_472;
        }
        if (v2 != 810906663)
        {
          if (v2 != 820711327)
            goto LABEL_471;
          goto LABEL_217;
        }
LABEL_379:
        result = 98;
        goto LABEL_472;
      }
      if (v2 <= 746003605)
      {
        if (v2 == 676119128)
        {
          result = 146;
          goto LABEL_472;
        }
        if (v2 == 689804742)
        {
          result = 36;
          goto LABEL_472;
        }
        v10 = 698697055;
LABEL_370:
        if (v2 != v10)
          goto LABEL_471;
        goto LABEL_371;
      }
      if (v2 == 746003606)
      {
LABEL_316:
        result = 101;
        goto LABEL_472;
      }
      if (v2 == 749116821)
      {
        result = 165;
        goto LABEL_472;
      }
      v5 = 761631964;
LABEL_280:
      if (v2 == v5)
      {
        result = 109;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
    if (v2 > 1169082143)
    {
      if (v2 <= 1280909811)
      {
        if (v2 == 1169082144)
        {
          result = 33;
          goto LABEL_472;
        }
        if (v2 == 1234705395)
        {
          result = 125;
          goto LABEL_472;
        }
        if (v2 != 1280441783)
          goto LABEL_471;
        goto LABEL_249;
      }
      if (v2 <= 1294429941)
      {
        if (v2 == 1280909812)
        {
          result = 152;
          goto LABEL_472;
        }
        if (v2 != 1293446025)
          goto LABEL_471;
        goto LABEL_373;
      }
      if (v2 == 1294429942)
      {
        result = 147;
        goto LABEL_472;
      }
      if (v2 != 1302273958)
        goto LABEL_471;
LABEL_363:
      result = 108;
      goto LABEL_472;
    }
    if (v2 > 1110205731)
    {
      if (v2 == 1110205732)
      {
        result = 48;
        goto LABEL_472;
      }
      if (v2 == 1114644381)
      {
        result = 82;
        goto LABEL_472;
      }
      v6 = 1119807502;
      goto LABEL_359;
    }
    if (v2 != 952317141)
    {
      if (v2 == 1060988941)
      {
        result = 9;
        goto LABEL_472;
      }
      if (v2 == 1085318934)
      {
        result = 131;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
    goto LABEL_378;
  }
  if (v2 <= 1733600852)
  {
    if (v2 <= 1434404432)
    {
      if (v2 > 1380747800)
      {
        if (v2 <= 1412429327)
        {
          switch(v2)
          {
            case 1380747801:
              result = 127;
              goto LABEL_472;
            case 1402208364:
              result = 130;
              goto LABEL_472;
            case 1408738134:
              result = 150;
              goto LABEL_472;
          }
        }
        else if (v2 > 1419435330)
        {
          if (v2 == 1419435331)
          {
            result = 142;
            goto LABEL_472;
          }
          if (v2 == 1429914406)
          {
            result = 23;
            goto LABEL_472;
          }
        }
        else
        {
          if (v2 == 1412429328)
          {
            result = 65;
            goto LABEL_472;
          }
          if (v2 == 1415625992)
          {
            result = 136;
            goto LABEL_472;
          }
        }
        goto LABEL_471;
      }
      if (v2 <= 1364038515)
      {
        if (v2 == 1309571158)
        {
          result = 141;
          goto LABEL_472;
        }
        if (v2 == 1325975682)
        {
          result = 67;
          goto LABEL_472;
        }
        v8 = 1353145733;
LABEL_162:
        if (v2 != v8)
          goto LABEL_471;
        goto LABEL_344;
      }
      if (v2 != 1364038516)
      {
        if (v2 == 1371389549)
        {
          result = 27;
          goto LABEL_472;
        }
        if (v2 != 1373516433)
          goto LABEL_471;
        goto LABEL_272;
      }
LABEL_371:
      result = 194;
      goto LABEL_472;
    }
    if (v2 <= 1573906121)
    {
      if (v2 > 1549248875)
      {
        switch(v2)
        {
          case 1549248876:
            result = 172;
            goto LABEL_472;
          case 1554479185:
            result = 167;
            goto LABEL_472;
          case 1559256613:
            result = 55;
            goto LABEL_472;
        }
      }
      else
      {
        switch(v2)
        {
          case 1434404433:
            result = 17;
            goto LABEL_472;
          case 1517755655:
            result = 171;
            goto LABEL_472;
          case 1540760353:
            result = 5;
            goto LABEL_472;
        }
      }
      goto LABEL_471;
    }
    if (v2 <= 1625227433)
    {
      switch(v2)
      {
        case 1573906122:
          result = 138;
          goto LABEL_472;
        case 1602181456:
          result = 154;
          goto LABEL_472;
        case 1608945770:
          result = 192;
          goto LABEL_472;
      }
      goto LABEL_471;
    }
    if (v2 > 1701146936)
    {
      if (v2 == 1701146937)
      {
        result = 49;
        goto LABEL_472;
      }
      if (v2 == 1721691077)
      {
        result = 16;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
    if (v2 != 1625227434)
    {
      if (v2 == 1644180312)
      {
        result = 145;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
    goto LABEL_383;
  }
  if (v2 <= 2023824666)
  {
    if (v2 > 1868379042)
    {
      if (v2 <= 1908832378)
      {
        if (v2 != 1868379043)
        {
          if (v2 == 1878257790)
          {
            result = 81;
            goto LABEL_472;
          }
          if (v2 == 1895344378)
          {
            result = 86;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
        goto LABEL_272;
      }
      if (v2 <= 2001966016)
      {
        if (v2 != 1908832379)
        {
          if (v2 == 1990293942)
          {
            result = 140;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
LABEL_377:
        result = 196;
        goto LABEL_472;
      }
      if (v2 != 2001966017)
      {
        if (v2 == 2021146989)
        {
          result = 18;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
LABEL_344:
      result = 88;
      goto LABEL_472;
    }
    if (v2 <= 1756509289)
    {
      if (v2 == 1733600853)
      {
        result = 128;
        goto LABEL_472;
      }
      if (v2 == 1737882206)
      {
        result = 116;
        goto LABEL_472;
      }
      v9 = 1744899922;
      goto LABEL_151;
    }
    if (v2 == 1756509290)
    {
      result = 144;
      goto LABEL_472;
    }
    if (v2 == 1770142589)
    {
      result = 163;
      goto LABEL_472;
    }
    v11 = 1834147427;
    goto LABEL_315;
  }
  if (v2 > 2085054104)
  {
    if (v2 > 2103978417)
    {
      if (v2 <= 2141052861)
      {
        if (v2 != 2103978418)
        {
          if (v2 == 2132302344)
          {
            result = 148;
            goto LABEL_472;
          }
          goto LABEL_471;
        }
LABEL_373:
        result = 96;
        goto LABEL_472;
      }
      if (v2 != 2141052862)
      {
        v10 = 2144123136;
        goto LABEL_370;
      }
LABEL_372:
      result = 193;
      goto LABEL_472;
    }
    if (v2 == 2085054105)
    {
      result = 158;
      goto LABEL_472;
    }
    if (v2 != 2089455188)
    {
      if (v2 != 2095883268)
        goto LABEL_471;
      goto LABEL_256;
    }
LABEL_381:
    result = 105;
    goto LABEL_472;
  }
  if (v2 <= 2078329140)
  {
    if (v2 != 2023824667)
    {
      if (v2 != 2032616841)
      {
        if (v2 == 2048538371)
        {
          result = 60;
          goto LABEL_472;
        }
        goto LABEL_471;
      }
LABEL_387:
      result = 25;
      goto LABEL_472;
    }
LABEL_272:
    result = 100;
    goto LABEL_472;
  }
  if (v2 > 2081274471)
  {
    if (v2 != 2081274472)
    {
      if (v2 == 2084894489)
      {
        result = 164;
        goto LABEL_472;
      }
      goto LABEL_471;
    }
LABEL_386:
    result = 122;
    goto LABEL_472;
  }
  if (v2 == 2078329141)
  {
    result = 31;
    goto LABEL_472;
  }
  if (v2 != 2080700391)
    goto LABEL_471;
  result = 46;
LABEL_472:
  PlatformUtilities_iOS::GetProductType(void)::sType = result;
  return result;
}

uint64_t PlatformUtilities_iOS::ProductIsMuseDevice(PlatformUtilities_iOS *this)
{
  unsigned __int8 v1;
  uint64_t v3;
  PlatformUtilities_iOS *ProductType;
  BOOL v5;

  if ((v1 & 1) == 0
  {
    v3 = MGGetBoolAnswer();
    v5 = (v3 & 1) != 0
      || (ProductType = (PlatformUtilities_iOS *)PlatformUtilities_iOS::GetProductType((PlatformUtilities_iOS *)v3),
          (_DWORD)ProductType == 173)
      || PlatformUtilities_iOS::GetProductType(ProductType) == 188;
    PlatformUtilities_iOS::ProductIsMuseDevice(void)::isMuseDevice = v5;
  }
  return PlatformUtilities_iOS::ProductIsMuseDevice(void)::isMuseDevice;
}

void sub_2105BB160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CACFString::~CACFString(CACFString *this)
{
  const void *v2;

  if (*((_BYTE *)this + 8))
  {
    v2 = *(const void **)this;
    if (*(_QWORD *)this)
      CFRelease(v2);
  }
}

uint64_t CACFString::operator=(uint64_t a1, uint64_t a2)
{
  const void *v3;
  BOOL v5;
  int v6;
  BOOL v7;

  v3 = *(const void **)a2;
  if (*(_QWORD *)a2 != *(_QWORD *)a1)
  {
    if (*(_QWORD *)a1)
      v5 = *(_BYTE *)(a1 + 8) == 0;
    else
      v5 = 1;
    if (!v5)
    {
      CFRelease(*(CFTypeRef *)a1);
      v3 = *(const void **)a2;
    }
    *(_QWORD *)a1 = v3;
    v6 = *(unsigned __int8 *)(a2 + 8);
    *(_BYTE *)(a1 + 8) = v6;
    if (v6)
      v7 = v3 == 0;
    else
      v7 = 1;
    if (!v7)
      CFRetain(v3);
  }
  return a1;
}

uint64_t std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x24BEDB7F0];
  v3 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)a1 = *MEMORY[0x24BEDB7F0];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x212BC78C8](a1 + 128);
  return a1;
}

CFStringRef PlatformUtilities_iOS::CopyProductTypeFilePrefix(int a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  CFStringRef result;
  uint64_t v27;
  char __str[8];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)__str = 0;
  v29 = 0;
  v30 = 0;
  switch(a1)
  {
    case 1:
      v27 = 0;
      v1 = 184;
      goto LABEL_8;
    case 2:
      v27 = 0;
      goto LABEL_5;
    case 3:
      v27 = 97;
LABEL_5:
      v1 = 238;
      goto LABEL_8;
    case 4:
      v27 = 0;
      v1 = 520;
      goto LABEL_8;
    case 5:
      v27 = 0;
      v1 = 620;
LABEL_8:
      v2 = 98;
      goto LABEL_233;
    case 6:
      v27 = 0;
      v1 = 10;
      goto LABEL_50;
    case 7:
      v27 = 0;
      v1 = 11;
      goto LABEL_50;
    case 8:
      v27 = 0;
      v1 = 12;
      goto LABEL_50;
    case 9:
      v27 = 0;
      v1 = 16;
      goto LABEL_50;
    case 10:
      v27 = 0;
      v1 = 17;
      goto LABEL_50;
    case 11:
      v27 = 0;
      v1 = 101;
      goto LABEL_50;
    case 12:
      v27 = 0;
      v1 = 111;
      goto LABEL_50;
    case 13:
      v27 = 0;
      v1 = 121;
      goto LABEL_50;
    case 14:
      v27 = 0;
      v1 = 20;
      goto LABEL_50;
    case 15:
      v27 = 0;
      v1 = 21;
      goto LABEL_50;
    case 16:
      v27 = 0;
      v1 = 22;
      goto LABEL_50;
    case 17:
      v27 = 0;
      goto LABEL_49;
    case 18:
      v27 = 0;
      v1 = 28;
      goto LABEL_50;
    case 19:
      v27 = 0;
      v1 = 37;
      goto LABEL_50;
    case 20:
      v27 = 0;
      v1 = 38;
      goto LABEL_50;
    case 21:
      v27 = 0;
      v1 = 201;
      goto LABEL_50;
    case 22:
      v27 = 0;
      v1 = 211;
      goto LABEL_50;
    case 23:
      v27 = 0;
      v1 = 221;
      goto LABEL_50;
    case 24:
      v27 = 0;
      v1 = 32;
      goto LABEL_50;
    case 25:
      v27 = 0;
      v1 = 33;
      goto LABEL_50;
    case 26:
      v27 = 0;
      v1 = 79;
      goto LABEL_50;
    case 27:
      v27 = 0;
      v1 = 42;
      goto LABEL_50;
    case 28:
      v27 = 0;
      v1 = 43;
      goto LABEL_50;
    case 29:
      v27 = 0;
      v1 = 47;
      goto LABEL_50;
    case 30:
      v27 = 0;
      v1 = 48;
      goto LABEL_50;
    case 31:
      v27 = 0;
      v1 = 49;
      goto LABEL_50;
    case 32:
      v27 = 103;
      v1 = 52;
      goto LABEL_50;
    case 33:
      v3 = 103;
      goto LABEL_38;
    case 34:
      v3 = 112;
LABEL_38:
      v27 = v3;
      v1 = 53;
      goto LABEL_50;
    case 35:
      v27 = 112;
      v1 = 54;
      goto LABEL_50;
    case 36:
      v27 = 0;
      v1 = 63;
      goto LABEL_50;
    case 37:
      v27 = 0;
      v1 = 64;
      goto LABEL_50;
    case 38:
      v27 = 0;
      v1 = 73;
      goto LABEL_50;
    case 39:
      v27 = 0;
      v1 = 74;
      goto LABEL_50;
    case 40:
      v27 = 0;
      v1 = 83;
      goto LABEL_50;
    case 41:
      v27 = 0;
      v1 = 84;
      goto LABEL_50;
    case 42:
      v27 = 0;
      v1 = 93;
      goto LABEL_50;
    case 43:
      v27 = 0;
      v1 = 94;
      goto LABEL_50;
    case 44:
      v27 = 117;
LABEL_49:
      v1 = 27;
LABEL_50:
      v2 = 100;
      goto LABEL_233;
    case 45:
      v27 = 0;
      v1 = 59;
      goto LABEL_243;
    case 46:
      v27 = 0;
      v1 = 104;
      goto LABEL_232;
    case 47:
      v27 = 0;
      goto LABEL_55;
    case 48:
      v27 = 100;
LABEL_55:
      v1 = 42;
      goto LABEL_123;
    case 49:
      v27 = 0;
      goto LABEL_60;
    case 50:
      v4 = 98;
      goto LABEL_59;
    case 51:
      v4 = 115;
LABEL_59:
      v27 = v4;
LABEL_60:
      v1 = 71;
      goto LABEL_123;
    case 52:
      v27 = 0;
      v1 = 72;
      goto LABEL_123;
    case 53:
      v27 = 0;
      v1 = 73;
      goto LABEL_123;
    case 54:
      v27 = 0;
      v1 = 81;
      goto LABEL_123;
    case 55:
      v27 = 0;
      v1 = 82;
      goto LABEL_123;
    case 56:
      v27 = 0;
      goto LABEL_67;
    case 57:
      v27 = 109;
LABEL_67:
      v1 = 85;
      goto LABEL_123;
    case 58:
      v27 = 0;
      goto LABEL_70;
    case 59:
      v27 = 109;
LABEL_70:
      v1 = 86;
      goto LABEL_123;
    case 60:
      v27 = 0;
      goto LABEL_73;
    case 61:
      v27 = 109;
LABEL_73:
      v1 = 87;
      goto LABEL_123;
    case 62:
      v27 = 0;
      v1 = 96;
      goto LABEL_123;
    case 63:
      v27 = 0;
      v1 = 97;
      goto LABEL_123;
    case 64:
      v27 = 0;
      goto LABEL_78;
    case 65:
      v27 = 97;
LABEL_78:
      v1 = 98;
      goto LABEL_123;
    case 66:
      v27 = 0;
      goto LABEL_81;
    case 67:
      v27 = 97;
LABEL_81:
      v1 = 99;
      goto LABEL_123;
    case 68:
      v27 = 97;
      v1 = 105;
      goto LABEL_123;
    case 69:
      v27 = 0;
      v1 = 120;
      goto LABEL_123;
    case 70:
      v27 = 0;
      v1 = 127;
      goto LABEL_123;
    case 71:
      v27 = 0;
      v1 = 128;
      goto LABEL_123;
    case 72:
      v27 = 0;
      goto LABEL_88;
    case 73:
      v27 = 97;
LABEL_88:
      v1 = 171;
      goto LABEL_123;
    case 74:
      v27 = 0;
      v1 = 181;
      goto LABEL_123;
    case 75:
      v27 = 0;
      v1 = 182;
      goto LABEL_123;
    case 76:
      v27 = 0;
      v1 = 207;
      goto LABEL_123;
    case 77:
      v27 = 0;
      v1 = 210;
      goto LABEL_123;
    case 78:
      v27 = 0;
      v1 = 217;
      goto LABEL_123;
    case 79:
      v27 = 0;
      v1 = 255;
      goto LABEL_123;
    case 80:
      v27 = 0;
      v1 = 271;
      goto LABEL_123;
    case 81:
      v27 = 0;
      v1 = 272;
      goto LABEL_123;
    case 82:
      v27 = 0;
      v1 = 305;
      goto LABEL_123;
    case 83:
      v27 = 0;
      v1 = 307;
      goto LABEL_123;
    case 84:
      v27 = 0;
      v1 = 308;
      goto LABEL_123;
    case 85:
      v27 = 0;
      v1 = 310;
      goto LABEL_123;
    case 86:
      v27 = 0;
      v1 = 311;
      goto LABEL_123;
    case 87:
      v27 = 0;
      v1 = 317;
      goto LABEL_123;
    case 88:
      v27 = 0;
      v1 = 320;
      goto LABEL_123;
    case 89:
      v27 = 0;
      v1 = 348;
      goto LABEL_123;
    case 90:
      v27 = 0;
      v1 = 381;
      goto LABEL_123;
    case 91:
      v27 = 0;
      v1 = 382;
      goto LABEL_123;
    case 92:
      v27 = 0;
      v1 = 407;
      goto LABEL_123;
    case 93:
      v27 = 0;
      v1 = 408;
      goto LABEL_123;
    case 94:
      v27 = 0;
      v1 = 410;
      goto LABEL_123;
    case 95:
      v27 = 0;
      v1 = 411;
      goto LABEL_123;
    case 96:
      v27 = 0;
      v1 = 417;
      goto LABEL_123;
    case 97:
      v27 = 0;
      v1 = 420;
      goto LABEL_123;
    case 98:
      v27 = 0;
      v1 = 507;
      goto LABEL_123;
    case 99:
      v27 = 0;
      v1 = 508;
      goto LABEL_123;
    case 100:
      v27 = 0;
      v1 = 517;
      goto LABEL_123;
    case 101:
      v27 = 0;
      v1 = 522;
      goto LABEL_123;
    case 102:
      v27 = 0;
      v1 = 537;
      goto LABEL_123;
    case 103:
      v27 = 0;
      v1 = 538;
      goto LABEL_123;
    case 104:
      v27 = 0;
      v1 = 617;
      goto LABEL_123;
    case 105:
      v27 = 0;
      v1 = 620;
      goto LABEL_123;
    case 106:
      v27 = 0;
      v1 = 717;
      goto LABEL_123;
    case 107:
      v27 = 0;
      v1 = 720;
LABEL_123:
      v2 = 106;
      goto LABEL_233;
    case 108:
      v27 = 97;
      v1 = 27;
      goto LABEL_232;
    case 109:
      v27 = 97;
      v1 = 28;
      goto LABEL_232;
    case 110:
      v27 = 0;
      v1 = 41;
      goto LABEL_232;
    case 111:
      v27 = 0;
      v1 = 42;
      goto LABEL_232;
    case 112:
      v27 = 0;
      v1 = 48;
      goto LABEL_232;
    case 113:
      v27 = 0;
      v1 = 49;
      goto LABEL_232;
    case 114:
      v27 = 0;
      v1 = 51;
      goto LABEL_232;
    case 115:
      v27 = 0;
      v1 = 53;
      goto LABEL_232;
    case 116:
      v27 = 0;
      v1 = 56;
      goto LABEL_232;
    case 117:
      v27 = 0;
      v1 = 61;
      goto LABEL_232;
    case 118:
      v27 = 0;
      v1 = 64;
      goto LABEL_232;
    case 119:
      v27 = 0;
      v1 = 65;
      goto LABEL_232;
    case 120:
      v27 = 0;
      v1 = 66;
      goto LABEL_232;
    case 121:
      v27 = 0;
      v1 = 69;
      goto LABEL_232;
    case 122:
      v27 = 0;
      v1 = 71;
      goto LABEL_232;
    case 123:
      v27 = 0;
      v1 = 74;
      goto LABEL_232;
    case 124:
      v27 = 0;
      v1 = 75;
      goto LABEL_232;
    case 125:
      v27 = 0;
      v1 = 841;
      goto LABEL_232;
    case 126:
      v27 = 0;
      v1 = 102;
      goto LABEL_232;
    case 127:
      v27 = 0;
      v1 = 112;
      goto LABEL_232;
    case 128:
      v5 = 115;
      goto LABEL_146;
    case 129:
      v5 = 98;
LABEL_146:
      v27 = v5;
      v1 = 111;
      goto LABEL_232;
    case 130:
      v6 = 115;
      goto LABEL_149;
    case 131:
      v6 = 98;
LABEL_149:
      v27 = v6;
      v1 = 121;
      goto LABEL_232;
    case 132:
      v7 = 115;
      goto LABEL_152;
    case 133:
      v7 = 98;
LABEL_152:
      v27 = v7;
      v1 = 131;
      goto LABEL_232;
    case 134:
      v8 = 115;
      goto LABEL_155;
    case 135:
      v8 = 98;
LABEL_155:
      v27 = v8;
      v1 = 140;
      goto LABEL_232;
    case 136:
      v9 = 115;
      goto LABEL_158;
    case 137:
      v9 = 98;
LABEL_158:
      v27 = v9;
      v1 = 141;
      goto LABEL_232;
    case 138:
      v10 = 115;
      goto LABEL_161;
    case 139:
      v10 = 98;
LABEL_161:
      v27 = v10;
      v1 = 142;
      goto LABEL_232;
    case 140:
      v11 = 98;
      goto LABEL_164;
    case 141:
      v11 = 115;
LABEL_164:
      v27 = v11;
      v1 = 143;
      goto LABEL_232;
    case 142:
      v12 = 115;
      goto LABEL_167;
    case 143:
      v12 = 98;
LABEL_167:
      v27 = v12;
      v1 = 144;
      goto LABEL_232;
    case 144:
      v13 = 115;
      goto LABEL_170;
    case 145:
      v13 = 98;
LABEL_170:
      v27 = v13;
      v1 = 146;
      goto LABEL_232;
    case 146:
      v14 = 98;
      goto LABEL_173;
    case 147:
      v14 = 115;
LABEL_173:
      v27 = v14;
      v1 = 149;
      goto LABEL_232;
    case 148:
      v15 = 115;
      goto LABEL_176;
    case 149:
      v15 = 98;
LABEL_176:
      v27 = v15;
      v1 = 157;
      goto LABEL_232;
    case 150:
      v16 = 115;
      goto LABEL_179;
    case 151:
      v16 = 98;
LABEL_179:
      v27 = v16;
      v1 = 158;
      goto LABEL_232;
    case 152:
      v17 = 115;
      goto LABEL_182;
    case 153:
      v17 = 98;
LABEL_182:
      v27 = v17;
      v1 = 187;
      goto LABEL_232;
    case 154:
      v18 = 115;
      goto LABEL_185;
    case 155:
      v18 = 98;
LABEL_185:
      v27 = v18;
      v1 = 188;
      goto LABEL_232;
    case 156:
      v19 = 115;
      goto LABEL_188;
    case 157:
      v19 = 98;
LABEL_188:
      v27 = v19;
      v1 = 197;
      goto LABEL_232;
    case 158:
      v20 = 115;
      goto LABEL_191;
    case 159:
      v20 = 98;
LABEL_191:
      v27 = v20;
      v1 = 198;
      goto LABEL_232;
    case 160:
      v27 = 0;
      v1 = 199;
      goto LABEL_232;
    case 161:
      v21 = 115;
      goto LABEL_195;
    case 162:
      v21 = 98;
LABEL_195:
      v27 = v21;
      v1 = 207;
      goto LABEL_232;
    case 163:
      v22 = 115;
      goto LABEL_198;
    case 164:
      v22 = 98;
LABEL_198:
      v27 = v22;
      v1 = 208;
      goto LABEL_232;
    case 165:
      v23 = 115;
      goto LABEL_201;
    case 166:
      v23 = 98;
LABEL_201:
      v27 = v23;
      v1 = 217;
      goto LABEL_232;
    case 167:
      v24 = 115;
      goto LABEL_204;
    case 168:
      v24 = 98;
LABEL_204:
      v27 = v24;
      v1 = 218;
      goto LABEL_232;
    case 169:
      v27 = 0;
      v1 = 210;
      goto LABEL_232;
    case 170:
      v27 = 0;
      v1 = 101;
      goto LABEL_209;
    case 171:
      v27 = 0;
      v1 = 102;
      goto LABEL_209;
    case 172:
      v27 = 0;
      v1 = 103;
LABEL_209:
      v2 = 112;
      goto LABEL_233;
    case 173:
      v25 = 110;
      goto LABEL_212;
    case 174:
      v25 = 112;
LABEL_212:
      v27 = v25;
      v1 = 398;
      goto LABEL_229;
    case 175:
      v27 = 0;
      v1 = 456;
      goto LABEL_229;
    case 176:
      v27 = 112;
      v1 = 698;
      goto LABEL_229;
    case 177:
      v27 = 0;
      v1 = 720;
      goto LABEL_229;
    case 178:
      v27 = 0;
      v1 = 721;
      goto LABEL_229;
    case 179:
      v27 = 0;
      v1 = 734;
      goto LABEL_229;
    case 180:
      v27 = 0;
      v1 = 742;
      goto LABEL_229;
    case 181:
      v27 = 0;
      v1 = 1125;
      goto LABEL_229;
    case 182:
      v27 = 0;
      v1 = 1153;
      goto LABEL_229;
    case 183:
      v27 = 0;
      v1 = 1232;
      goto LABEL_229;
    case 184:
      v27 = 0;
      v1 = 1250;
      goto LABEL_229;
    case 185:
      v27 = 0;
      v1 = 1251;
      goto LABEL_229;
    case 186:
      v27 = 0;
      v1 = 1252;
      goto LABEL_229;
    case 187:
      v27 = 0;
      v1 = 1253;
      goto LABEL_229;
    case 188:
      snprintf(__str, 0x18uLL, "%c%d%c", 116, 698, 116);
      goto LABEL_234;
    case 189:
      v27 = 0;
      v1 = 6502;
      goto LABEL_229;
    case 190:
      v27 = 0;
      v1 = 6809;
LABEL_229:
      v2 = 116;
      goto LABEL_233;
    case 191:
      v27 = 0;
      v1 = 100;
      v2 = 113;
      goto LABEL_233;
    case 192:
      v27 = 0;
      v1 = 301;
LABEL_232:
      v2 = 110;
      goto LABEL_233;
    case 193:
      v27 = 0;
      v1 = 101;
      goto LABEL_243;
    case 194:
      v27 = 0;
      v1 = 201;
      goto LABEL_243;
    case 195:
      v27 = 0;
      v1 = 301;
      goto LABEL_243;
    case 196:
      v27 = 0;
      v1 = 401;
      goto LABEL_243;
    case 197:
      v27 = 0;
      v1 = 501;
LABEL_243:
      v2 = 118;
LABEL_233:
      snprintf(__str, 0x18uLL, "%c%d%c", v2, v1, v27);
LABEL_234:
      if (!__str[0])
        goto LABEL_236;
      result = CFStringCreateWithCString(0, __str, 0x600u);
      break;
    default:
LABEL_236:
      result = 0;
      break;
  }
  return result;
}

uint64_t *CASmartPreferences::instance(CASmartPreferences *this)
{
  unsigned __int8 v1;
  CASmartPreferences *v3;

  if ((v1 & 1) == 0)
  {
    if ((_DWORD)v3)
    {
      CASmartPreferences::CASmartPreferences(v3);
    }
  }
  return &CASmartPreferences::instance(void)::global;
}

void sub_2105BBD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void CASmartPreferences::CASmartPreferences(CASmartPreferences *this)
{
  NSObject *global_queue;
  _QWORD handler[5];

  CASmartPreferences::instance(void)::global = 850045863;
  unk_253ED6F78 = 0u;
  unk_253ED6F88 = 0u;
  unk_253ED6F98 = 0u;
  qword_253ED6FA8 = 0;
  qword_253ED6FB0 = (uint64_t)CFSetCreateMutable(0, 0, MEMORY[0x24BDBD6B8]);
  global_queue = dispatch_get_global_queue(0, 0);
  unk_253ED6FB8 = 0u;
  unk_253ED6FC8 = 0u;
  qword_253ED6FD0 = (uint64_t)dispatch_source_create(MEMORY[0x24BDACA08], 1uLL, 0, global_queue);
  handler[0] = MEMORY[0x24BDAC760];
  handler[1] = 0x40000000;
  handler[2] = ___ZN18CASmartPreferencesC2Ev_block_invoke;
  handler[3] = &__block_descriptor_tmp_12;
  handler[4] = &CASmartPreferences::instance(void)::global;
  dispatch_source_set_event_handler((dispatch_source_t)qword_253ED6FD0, handler);
  dispatch_resume((dispatch_object_t)qword_253ED6FD0);
}

void sub_2105BBE00(_Unwind_Exception *a1)
{
  std::mutex::~mutex((std::mutex *)&CASmartPreferences::instance(void)::global);
  _Unwind_Resume(a1);
}

void ___ZN18CASmartPreferencesC2Ev_block_invoke(uint64_t a1)
{
  uint64_t v1;
  CFStringRef *v2;
  CFStringRef *v3;

  v1 = *(_QWORD *)(a1 + 32);
  std::mutex::lock((std::mutex *)v1);
  CFSetApplyFunction(*(CFSetRef *)(v1 + 64), (CFSetApplierFunction)SynchronizePrefDomain, 0);
  v2 = *(CFStringRef **)(v1 + 72);
  v3 = *(CFStringRef **)(v1 + 80);
  while (v2 != v3)
  {
    CASmartPreferences::Pref::Load(v2);
    v2 += 6;
  }
  std::mutex::unlock((std::mutex *)v1);
}

void sub_2105BBE78(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t SynchronizePrefDomain(const __CFString *a1, void *a2)
{
  return CFPreferencesSynchronize(a1, (CFStringRef)*MEMORY[0x24BDBD590], (CFStringRef)*MEMORY[0x24BDBD588]);
}

CFPropertyListRef CASmartPreferences::Pref::Load(CFStringRef *this)
{
  CFPropertyListRef result;
  CFStringRef v3;
  CFPropertyListRef v4;

  result = CFPreferencesCopyAppValue(*this, this[1]);
  if (result)
  {
    v4 = result;
    v3 = this[5];
    if (!v3)
      std::__throw_bad_function_call[abi:ne180100]();
    return (CFPropertyListRef)(*((uint64_t (**)(CFStringRef, CFPropertyListRef *))v3->isa + 6))(v3, &v4);
  }
  return result;
}

BOOL CASmartPreferences::InterpretBoolean(CASmartPreferences *this, _BYTE *a2, BOOL *a3)
{
  const __CFBoolean *v4;
  CFTypeID v5;
  char v7;
  char *v8;
  int v9;
  BOOL v10;
  int valuePtr;
  char buffer[16];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  valuePtr = 0;
  *a2 = 0;
  if (this)
  {
    v4 = this;
    v5 = CFGetTypeID(this);
    if (v5 == CFBooleanGetTypeID())
    {
      LODWORD(this) = CFBooleanGetValue(v4);
LABEL_6:
      *a2 = 1;
      return (_DWORD)this != 0;
    }
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
      LODWORD(this) = valuePtr != 0;
      goto LABEL_6;
    }
    if (v5 != CFStringGetTypeID())
    {
      LODWORD(this) = 0;
      return (_DWORD)this != 0;
    }
    v14 = 0u;
    v15 = 0u;
    *(_OWORD *)buffer = 0u;
    v13 = 0u;
    CFStringGetCString((CFStringRef)v4, buffer, 64, 0x600u);
    if (sscanf(buffer, "%d", &valuePtr) == 1)
    {
      *a2 = 1;
      LODWORD(this) = valuePtr != 0;
      return (_DWORD)this != 0;
    }
    v7 = buffer[0];
    if (buffer[0])
    {
      v8 = &buffer[1];
      do
      {
        *(v8 - 1) = __tolower(v7);
        v9 = *v8++;
        v7 = v9;
      }
      while (v9);
    }
    if (!(*(unsigned __int16 *)buffer ^ 0x6F6E | buffer[2])
      || (*(_DWORD *)buffer == 1936482662 ? (v10 = *(unsigned __int16 *)&buffer[4] == 101) : (v10 = 0), v10))
    {
      LODWORD(this) = 0;
      goto LABEL_6;
    }
    if (*(_DWORD *)buffer == 7562617 || !(*(_DWORD *)buffer ^ 0x65757274 | buffer[4]))
    {
      LODWORD(this) = 1;
      *a2 = 1;
    }
    else
    {
      LODWORD(this) = valuePtr;
    }
  }
  return (_DWORD)this != 0;
}

void CASmartPreferences::_RegisterFirstHandler(uint64_t a1, const void *a2, const void *a3, _QWORD *a4)
{
  CFTypeRef *v8;
  CFTypeRef *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  int64x2_t v28;
  char *v29;
  char *v30;
  int64x2_t v31;
  char *v32;
  uint64_t v33;

  std::mutex::lock((std::mutex *)a1);
  v8 = *(CFTypeRef **)(a1 + 72);
  v9 = *(CFTypeRef **)(a1 + 80);
  while (v8 != v9)
  {
    if (CFEqual(a2, *v8) && CFEqual(a3, v8[1]))
      goto LABEL_31;
    v8 += 6;
  }
  CFRetain(a2);
  CFRetain(a3);
  v10 = *(_QWORD *)(a1 + 88);
  v11 = *(_QWORD *)(a1 + 80);
  if (v11 >= v10)
  {
    v13 = *(_QWORD *)(a1 + 72);
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - v13) >> 4);
    if (v14 + 1 > 0x555555555555555)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v13) >> 4);
    v16 = 2 * v15;
    if (2 * v15 <= v14 + 1)
      v16 = v14 + 1;
    if (v15 >= 0x2AAAAAAAAAAAAAALL)
      v17 = 0x555555555555555;
    else
      v17 = v16;
    v33 = a1 + 88;
    if (v17)
    {
      if (v17 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v18 = (char *)operator new(48 * v17);
    }
    else
    {
      v18 = 0;
    }
    v30 = v18;
    v31.i64[0] = (uint64_t)&v18[48 * v14];
    v32 = &v18[48 * v17];
    std::construct_at[abi:ne180100]<CASmartPreferences::Pref,__CFString const*&,__CFString const*&,std::function<BOOL ()(void const*)> &,CASmartPreferences::Pref*>(v31.i64[0], (uint64_t)a2, (uint64_t)a3, a4);
    v19 = v31.i64[0];
    v12 = v31.i64[0] + 48;
    v31.i64[1] = v31.i64[0] + 48;
    v21 = *(_QWORD *)(a1 + 72);
    v20 = *(_QWORD *)(a1 + 80);
    if (v20 == v21)
    {
      v28 = vdupq_n_s64(v20);
LABEL_29:
      *(_QWORD *)(a1 + 72) = v19;
      *(_QWORD *)(a1 + 80) = v12;
      v31 = v28;
      v29 = *(char **)(a1 + 88);
      *(_QWORD *)(a1 + 88) = v32;
      v32 = v29;
      v30 = (char *)v28.i64[0];
      std::__split_buffer<CASmartPreferences::Pref>::~__split_buffer((uint64_t)&v30);
      goto LABEL_30;
    }
    v22 = 0;
    v23 = *(_QWORD *)(a1 + 80);
    while (1)
    {
      v24 = v19 + v22;
      v25 = v20 + v22;
      *(_OWORD *)(v19 + v22 - 48) = *(_OWORD *)(v20 + v22 - 48);
      v26 = *(_QWORD *)(v20 + v22 - 8);
      if (v26)
      {
        if (v25 - 32 == v26)
        {
          *(_QWORD *)(v24 - 8) = v24 - 32;
          (*(void (**)(_QWORD))(**(_QWORD **)(v25 - 8) + 24))(*(_QWORD *)(v25 - 8));
          goto LABEL_26;
        }
        v27 = (_QWORD *)(v23 - 8);
        *(_QWORD *)(v24 - 8) = v26;
      }
      else
      {
        v27 = (_QWORD *)(v24 - 8);
      }
      *v27 = 0;
LABEL_26:
      v23 -= 48;
      v22 -= 48;
      if (v20 + v22 == v21)
      {
        v19 += v22;
        v28 = *(int64x2_t *)(a1 + 72);
        v12 = v31.i64[1];
        goto LABEL_29;
      }
    }
  }
  std::construct_at[abi:ne180100]<CASmartPreferences::Pref,__CFString const*&,__CFString const*&,std::function<BOOL ()(void const*)> &,CASmartPreferences::Pref*>(*(_QWORD **)(a1 + 80), (uint64_t)a2, (uint64_t)a3, a4);
  v12 = v11 + 48;
  *(_QWORD *)(a1 + 80) = v11 + 48;
LABEL_30:
  *(_QWORD *)(a1 + 80) = v12;
  CFSetAddValue(*(CFMutableSetRef *)(a1 + 64), a3);
  CASmartPreferences::Pref::Load((CFStringRef *)(*(_QWORD *)(a1 + 80) - 48));
LABEL_31:
  std::mutex::unlock((std::mutex *)a1);
}

void sub_2105BC328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::mutex *v2;
  va_list va;

  va_start(va, a2);
  std::__split_buffer<CASmartPreferences::Pref>::~__split_buffer((uint64_t)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

_QWORD *std::construct_at[abi:ne180100]<CASmartPreferences::Pref,__CFString const*&,__CFString const*&,std::function<BOOL ()(void const*)> &,CASmartPreferences::Pref*>(_QWORD *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  _QWORD *v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v7 = (_QWORD *)a4[3];
  if (!v7)
  {
    v13 = 0;
    *a1 = a2;
    a1[1] = a3;
LABEL_9:
    a1[5] = 0;
    return a1;
  }
  if (v7 == a4)
  {
    v13 = v12;
    (*(void (**)(_QWORD *, _QWORD *))(*a4 + 24))(a4, v12);
    v8 = v13;
  }
  else
  {
    v8 = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v7 + 16))(v7);
    v13 = v8;
  }
  *a1 = a2;
  a1[1] = a3;
  if (!v8)
    goto LABEL_9;
  if (v8 == v12)
  {
    a1[5] = a1 + 2;
    (*(void (**)(_QWORD *))(v12[0] + 24))(v12);
  }
  else
  {
    a1[5] = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
  }
  v9 = v13;
  if (v13 == v12)
  {
    v10 = 4;
    v9 = v12;
    goto LABEL_15;
  }
  if (v13)
  {
    v10 = 5;
LABEL_15:
    (*(void (**)(void))(*v9 + 8 * v10))();
  }
  return a1;
}

void sub_2105BC490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<CASmartPreferences::Pref>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 48;
    v4 = *(_QWORD **)(v2 - 8);
    if (v4 == (_QWORD *)(v2 - 32))
    {
      v4 = (_QWORD *)(v2 - 32);
      v5 = 4;
LABEL_7:
      (*(void (**)(void))(*v4 + 8 * v5))();
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      if (v4)
      {
        v5 = 5;
        goto LABEL_7;
      }
      v2 -= 48;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t *std::list<int>::~list(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        v5 = (uint64_t *)v2[1];
        operator delete(v2);
        v2 = v5;
      }
      while (v5 != a1);
    }
  }
  return a1;
}

_QWORD *CDelaunayTriangles3D::check_avail_vertices(_QWORD *result, unint64_t a2, int a3)
{
  _QWORD *v4;
  int v5;
  int v6;
  int v7;
  unint64_t v8;
  _QWORD *v9;
  int v10;

  v4 = result;
  v5 = 0;
  v6 = 0;
  v7 = 0;
  v8 = HIDWORD(a2);
  v9 = result;
  while (1)
  {
    v9 = (_QWORD *)v9[1];
    if (v9 == result)
      break;
    v10 = *((_DWORD *)v9 + 4);
    if (v10 == (_DWORD)a2 || *((_DWORD *)v9 + 5) == (_DWORD)a2)
      v7 = 1;
    if (v10 == HIDWORD(a2) || *((_DWORD *)v9 + 5) == HIDWORD(a2))
      v5 = 1;
    if (v10 == a3 || *((_DWORD *)v9 + 5) == a3)
      v6 = 1;
    if (v7 && v5 && v6)
      return result;
  }
  if (v7)
  {
    if (v5)
      goto LABEL_18;
  }
  else
  {
    result = std::list<int>::remove(result + 3, a2);
    if (v5)
    {
LABEL_18:
      if (v6)
        return result;
      return std::list<int>::remove(v4 + 3, a3);
    }
  }
  result = std::list<int>::remove(v4 + 3, v8);
  if (!v6)
    return std::list<int>::remove(v4 + 3, a3);
  return result;
}

_QWORD *std::list<int>::remove(_QWORD *result, int a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *__p;
  uint64_t v21;

  v19 = &v19;
  __p = &v19;
  v2 = (_QWORD *)result[1];
  if (v2 == result)
    return result;
  v21 = 0;
  if (&v19 == result)
  {
    while (1)
    {
      v12 = (_QWORD *)v2[1];
      if (*((_DWORD *)v2 + 4) == a2)
        break;
LABEL_19:
      v2 = v12;
      if (v12 == result)
        return result;
    }
    if (v12 == result)
    {
      v13 = 1;
    }
    else
    {
      if (*((_DWORD *)v12 + 4) != a2)
      {
LABEL_25:
        v13 = 0;
        if (v2 == v12)
        {
LABEL_30:
          if (!v13)
            v12 = (_QWORD *)v12[1];
          goto LABEL_19;
        }
LABEL_29:
        v14 = *v12;
        v15 = *v2;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(*v12 + 8);
        **(_QWORD **)(v14 + 8) = v15;
        v16 = *result;
        *(_QWORD *)(v16 + 8) = v2;
        *v2 = v16;
        *result = v14;
        *(_QWORD *)(v14 + 8) = result;
        goto LABEL_30;
      }
      while (1)
      {
        v12 = (_QWORD *)v12[1];
        v13 = v12 == result;
        if (v12 == result)
          break;
        if (*((_DWORD *)v12 + 4) != a2)
          goto LABEL_25;
      }
    }
    v12 = result;
    if (v2 == result)
      goto LABEL_30;
    goto LABEL_29;
  }
  v3 = 0;
  v4 = &v19;
  do
  {
    v5 = (_QWORD *)v2[1];
    if (*((_DWORD *)v2 + 4) == a2)
    {
      if (v5 == result)
      {
LABEL_9:
        v6 = 1;
        v5 = result;
      }
      else
      {
        while (1)
        {
          v6 = *((_DWORD *)v5 + 4) == a2;
          if (*((_DWORD *)v5 + 4) != a2)
            break;
          v5 = (_QWORD *)v5[1];
          if (v5 == result)
            goto LABEL_9;
        }
      }
      if (v2 != v5)
      {
        v4 = (_QWORD *)*v5;
        if ((_QWORD *)*v5 == v2)
        {
          v9 = 1;
        }
        else
        {
          v7 = -1;
          v8 = v2;
          do
          {
            v8 = (_QWORD *)v8[1];
            ++v7;
          }
          while (v8 != v4);
          v9 = v7 + 2;
        }
        result[2] -= v9;
        v3 += v9;
        v10 = *v2;
        *(_QWORD *)(v10 + 8) = v4[1];
        *(_QWORD *)v4[1] = v10;
        v11 = v19;
        v19[1] = v2;
        *v2 = v11;
        v19 = v4;
        v4[1] = &v19;
      }
      if (!v6)
        v5 = (_QWORD *)v5[1];
    }
    v2 = v5;
  }
  while (v5 != result);
  if (v3)
  {
    result = __p;
    v17 = *(_QWORD *)__p;
    *(_QWORD *)(v17 + 8) = v4[1];
    *(_QWORD *)v4[1] = v17;
    v21 = 0;
    if (result != &v19)
    {
      do
      {
        v18 = (_QWORD *)result[1];
        operator delete(result);
        result = v18;
      }
      while (v18 != &v19);
    }
  }
  return result;
}

_QWORD *std::list<std::array<int,2ul>>::remove(_QWORD *result, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void *__p;
  uint64_t v21;

  v19 = &v19;
  __p = &v19;
  v21 = 0;
  v2 = (_QWORD *)result[1];
  if (v2 != result)
  {
    if (&v19 == result)
    {
      do
      {
        v12 = (_QWORD *)v2[1];
        if (v2[2] == *a2)
        {
          while (v12 != result)
          {
            v13 = v12[2] == *a2;
            if (v12[2] != *a2)
            {
              if (v2 == v12)
                goto LABEL_29;
              goto LABEL_28;
            }
            v12 = (_QWORD *)v12[1];
          }
          v13 = 1;
          v12 = result;
          if (v2 != result)
          {
LABEL_28:
            v14 = *v12;
            v15 = *v2;
            *(_QWORD *)(v15 + 8) = *(_QWORD *)(*v12 + 8);
            **(_QWORD **)(v14 + 8) = v15;
            v16 = *result;
            *(_QWORD *)(v16 + 8) = v2;
            *v2 = v16;
            *result = v14;
            *(_QWORD *)(v14 + 8) = result;
          }
LABEL_29:
          if (!v13)
            v12 = (_QWORD *)v12[1];
        }
        v2 = v12;
      }
      while (v12 != result);
    }
    else
    {
      v3 = 0;
      v4 = &v19;
      do
      {
        v5 = (_QWORD *)v2[1];
        if (v2[2] == *a2)
        {
          while (1)
          {
            if (v5 == result)
            {
              v6 = 1;
              v5 = result;
              if (v2 == result)
                goto LABEL_11;
              goto LABEL_14;
            }
            v6 = v5[2] == *a2;
            if (v5[2] != *a2)
              break;
            v5 = (_QWORD *)v5[1];
          }
          if (v2 == v5)
          {
LABEL_11:
            if (v6)
              goto LABEL_4;
            goto LABEL_20;
          }
LABEL_14:
          v4 = (_QWORD *)*v5;
          if ((_QWORD *)*v5 == v2)
          {
            v9 = 1;
          }
          else
          {
            v7 = -1;
            v8 = v2;
            do
            {
              v8 = (_QWORD *)v8[1];
              ++v7;
            }
            while (v8 != v4);
            v9 = v7 + 2;
          }
          result[2] -= v9;
          v3 += v9;
          v21 = v3;
          v10 = *v2;
          *(_QWORD *)(v10 + 8) = v4[1];
          *(_QWORD *)v4[1] = v10;
          v11 = v19;
          v19[1] = v2;
          *v2 = v11;
          v19 = v4;
          v4[1] = &v19;
          if (!v6)
LABEL_20:
            v5 = (_QWORD *)v5[1];
        }
LABEL_4:
        v2 = v5;
      }
      while (v5 != result);
      if (v3)
      {
        result = __p;
        v17 = *(_QWORD *)__p;
        *(_QWORD *)(v17 + 8) = v4[1];
        *(_QWORD *)v4[1] = v17;
        v21 = 0;
        if (result != &v19)
        {
          do
          {
            v18 = (_QWORD *)result[1];
            operator delete(result);
            result = v18;
          }
          while (v18 != &v19);
        }
      }
    }
  }
  return result;
}

uint64_t CDelaunayTriangles3D::find_one_delaunay3(CDelaunayTriangles3D *this, const double *a2, const double *a3, const double *a4, int *a5, int a6)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  char *v13;
  CDelaunayTriangles3D *v14;
  int v15;
  uint64_t v16;
  float64x2_t v18;
  double v19;
  uint64_t v20;
  double v21;
  float64x2_t v22;
  double v23;
  double v24;
  float64x2_t v25;
  double v26;
  double v27;
  float64x2_t v28;
  int v29;
  CDelaunayTriangles3D *v30;
  int v31;
  uint64_t v33;
  float64x2_t v34;
  float64x2_t v35;
  int8x16_t v36;
  int8x16_t v37;
  float64x2_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  int64x2_t v46;
  int64x2_t v47;

  v6 = *((_QWORD *)this + 5);
  if (!v6)
    return 0xFFFFFFFFLL;
  if (v6 != 1)
  {
    v13 = (char *)this + 24;
    v14 = (CDelaunayTriangles3D *)*((_QWORD *)this + 4);
    if (v14 != (CDelaunayTriangles3D *)((char *)this + 24))
    {
      v15 = 0;
      v16 = *((_QWORD *)this + 4);
      do
      {
        result = *(unsigned int *)(v16 + 16);
        if ((_DWORD)result != (_DWORD)a5 && (_DWORD)result != a6)
        {
          v18.f64[0] = a2[(int)a5];
          v19 = a2[a6];
          v20 = (int)result;
          v21 = a2[v20];
          v22.f64[0] = a3[(int)a5];
          v23 = a3[a6];
          v24 = a3[v20];
          v25.f64[0] = a4[(int)a5];
          v26 = a4[a6];
          v27 = a4[v20];
          if (-(v23 * v21 - v24 * v19) * v25.f64[0]
             + -(v26 * v24 - v27 * v23) * v18.f64[0]
             + -(v27 * v19 - v26 * v21) * v22.f64[0] > 0.0)
          {
            v28.f64[0] = v18.f64[0] * v18.f64[0] + v22.f64[0] * v22.f64[0] + v25.f64[0] * v25.f64[0];
            v28.f64[1] = v19 * v19 + v23 * v23 + v26 * v26;
            v18.f64[1] = a2[a6];
            v22.f64[1] = a3[a6];
            v25.f64[1] = a4[a6];
            v29 = v15;
            v30 = v14;
            while (1)
            {
              if (v29)
              {
                v31 = *((_DWORD *)v30 + 4);
                if (v31 != (_DWORD)a5 && v31 != a6)
                {
                  v33 = v31;
                  v34.f64[0] = v21 * v21 + v24 * v24 + v27 * v27;
                  v34.f64[1] = a2[v33] * a2[v33] + a3[v33] * a3[v33] + a4[v33] * a4[v33];
                  v35.f64[0] = v21;
                  v35.f64[1] = a2[v33];
                  *(double *)v36.i64 = v24;
                  *(double *)&v36.i64[1] = a3[v33];
                  *(double *)v37.i64 = v27;
                  *(double *)&v37.i64[1] = a4[v33];
                  v38 = (float64x2_t)vextq_s8(v36, (int8x16_t)v22, 8uLL);
                  v39 = (float64x2_t)vextq_s8((int8x16_t)v22, v36, 8uLL);
                  v40 = (float64x2_t)vextq_s8(v37, (int8x16_t)v25, 8uLL);
                  v41 = (float64x2_t)vextq_s8((int8x16_t)v25, v37, 8uLL);
                  v42 = vmulq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(v39, v40)), v41, v38), v35);
                  v43 = (float64x2_t)vextq_s8((int8x16_t)v35, (int8x16_t)v18, 8uLL);
                  v44 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v35, 8uLL);
                  v45 = vmlaq_f64(vmlaq_f64(v42, v44, vmlaq_f64(vnegq_f64(vmulq_f64(v38, (float64x2_t)v37)), v40, (float64x2_t)v36)), v43, vmlaq_f64(vnegq_f64(vmulq_f64((float64x2_t)v36, v41)), (float64x2_t)v37, v39));
                  v46 = (int64x2_t)vmulq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(v38, v41)), v40, v39), v18), v43, vmlaq_f64(vnegq_f64(vmulq_f64(v39, v25)), v41, v22)), v44, vmlaq_f64(vnegq_f64(vmulq_f64(v22, v40)), v25, v38)), v34);
                  v47 = (int64x2_t)vmulq_f64(v45, v28);
                  if (vaddvq_f64(vsubq_f64((float64x2_t)vzip1q_s64(v47, v46), (float64x2_t)vzip2q_s64(v47, v46))) > 1.0e-13)
                    break;
                }
              }
              v30 = (CDelaunayTriangles3D *)*((_QWORD *)v30 + 1);
              --v29;
              if (v30 == (CDelaunayTriangles3D *)v13)
                return result;
            }
          }
        }
        v16 = *(_QWORD *)(v16 + 8);
        ++v15;
      }
      while ((char *)v16 != v13);
    }
    return 0xFFFFFFFFLL;
  }
  v7 = *(_DWORD *)(*((_QWORD *)this + 4) + 16);
  if (v7 == (_DWORD)a5 || v7 == a6)
    return 0xFFFFFFFFLL;
  v9 = (int)a5;
  v10 = a6;
  v11 = (int)v7;
  if (-(a3[v10] * a2[v11] - a3[v11] * a2[v10]) * a4[v9]
     + -(a4[v10] * a3[v11] - a4[v11] * a3[v10]) * a2[v9]
     + -(a4[v11] * a2[v10] - a4[v10] * a2[v11]) * a3[v9] <= 0.0)
    return 0xFFFFFFFFLL;
  else
    return v7;
}

uint64_t CDelaunayTriangles3D::find_subtriangle_containment(unint64_t this, double a2, double a3, double a4)
{
  int v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  char *v9;
  char v10;
  NSObject *v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  BOOL v17;
  _BOOL4 v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double *v23;
  double v24;
  uint64_t v25;
  double *v26;
  double v27;
  double v29;
  double v30;
  double v31;
  double v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if ((this & 0x8000000000000000) != 0)
    return 0xFFFFFFFFLL;
  if (a3 <= -0.00000011920929)
    v4 = 4 * (a2 > -0.00000011920929);
  else
    v4 = (4 * (a2 > -0.00000011920929)) | 2;
  v5 = v4 | (a4 > -0.00000011920929);
  if (this)
  {
    v5 = ((_DWORD)v5 << (2 * this));
    v6 = fabs(a4);
    v7 = fabs(a3);
    v8 = fabs(a2);
    v9 = (char *)(this + 1);
    v10 = 2 * this - 2;
    v11 = MEMORY[0x24BDACB70];
    do
    {
      v12 = v8 - (v6 + v7);
      v13 = v7 + v7;
      v14 = v6 + v6;
      v15 = fmin(v6 + v6, fmin(v7 + v7, v12));
      v16 = fmin(v6 - (v7 + v8), fmin(v7 + v7, v8 + v8));
      v17 = v15 < v16;
      v18 = v15 < v16;
      v29 = v15;
      v30 = v16;
      v19 = fmin(v6 + v6, fmin(v7 - (v8 + v6), v8 + v8));
      v20 = fmin(v7 + v8 - v6, fmin(v8 - v7 + v6, v6 + v7 - v8));
      v31 = v19;
      v32 = v20;
      v21 = fmax(v15, v16);
      v22 = 8 * v18;
      if (v17)
        v23 = &v30;
      else
        v23 = &v29;
      v24 = fmax(v21, v19);
      if (v21 < v19)
      {
        v22 = 16;
        v23 = &v31;
      }
      if (v24 >= v20)
        v25 = v22;
      else
        v25 = 24;
      if (v24 >= v20)
        v26 = v23;
      else
        v26 = &v32;
      v27 = *(double *)((char *)&v29 + v25);
      if (v27 <= -0.00000011920929)
      {
LABEL_22:
        if (v27 <= -0.0000011920929)
        {
LABEL_25:
          if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136315906;
            v34 = "DelaunayTriangles3D.cpp";
            v35 = 1024;
            v36 = 476;
            v37 = 2080;
            v38 = "find_subtriangle_containment";
            v39 = 1024;
            v40 = 476;
            _os_log_impl(&dword_210570000, v11, OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: subtriangle still not found in computing rank with relaxed test!", buf, 0x22u);
          }
          v12 = v8;
          v13 = v7;
          v14 = v6;
        }
        else
        {
          switch(v26 - &v29)
          {
            case 0:
              break;
            case 1:
              goto LABEL_24;
            case 2:
              goto LABEL_27;
            case 3:
              goto LABEL_28;
            default:
              goto LABEL_25;
          }
        }
      }
      else
      {
        switch(v26 - &v29)
        {
          case 0:
            break;
          case 1:
LABEL_24:
            v5 = ((1 << v10) + v5);
            v12 = v8 + v8;
            v14 = v6 - (v7 + v8);
            break;
          case 2:
LABEL_27:
            v5 = ((2 << v10) + v5);
            v12 = v8 + v8;
            v13 = v7 - (v8 + v6);
            break;
          case 3:
LABEL_28:
            v5 = ((3 << v10) + v5);
            v12 = v6 + v7 - v8;
            v13 = v8 - v7 + v6;
            v14 = v7 + v8 - v6;
            break;
          default:
            goto LABEL_22;
        }
      }
      --v9;
      v10 -= 2;
      v6 = v14;
      v7 = v13;
      v8 = v12;
    }
    while ((unint64_t)v9 > 1);
  }
  return v5;
}

uint64_t std::list<int>::__sort<std::__less<void,void>>(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;

  if (a3 < 2)
    return result;
  if (a3 == 2)
  {
    v4 = *(uint64_t **)a2;
    if (*(_DWORD *)(*(_QWORD *)a2 + 16) < *(_DWORD *)(result + 16))
    {
      v5 = *v4;
      *(_QWORD *)(v5 + 8) = v4[1];
      *(_QWORD *)v4[1] = v5;
      v6 = *(_QWORD *)result;
      *(_QWORD *)(v6 + 8) = v4;
      *v4 = v6;
      *(_QWORD *)result = v4;
      v4[1] = result;
      return (uint64_t)v4;
    }
    return result;
  }
  v8 = a3 >> 1;
  v9 = (a3 >> 1) + 1;
  v10 = result;
  do
  {
    v10 = *(_QWORD *)(v10 + 8);
    --v9;
  }
  while (v9 > 1);
  v11 = std::list<int>::__sort<std::__less<void,void>>(result, v10, a3 >> 1);
  result = std::list<int>::__sort<std::__less<void,void>>(v10, a2, a3 - v8);
  v12 = *(_DWORD *)(v11 + 16);
  if (*(_DWORD *)(result + 16) >= v12)
  {
    v16 = *(uint64_t **)(v11 + 8);
    v13 = result;
    result = v11;
    if (v16 == (uint64_t *)v13)
      return result;
    goto LABEL_15;
  }
  v13 = *(_QWORD *)(result + 8);
  if (v13 == a2)
  {
LABEL_11:
    v13 = a2;
  }
  else
  {
    while (*(_DWORD *)(v13 + 16) < v12)
    {
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == a2)
        goto LABEL_11;
    }
  }
  v14 = *(_QWORD *)v13;
  v15 = *(_QWORD *)result;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(*(_QWORD *)v13 + 8);
  **(_QWORD **)(v14 + 8) = v15;
  v17 = *(_QWORD *)v11;
  v16 = *(uint64_t **)(v11 + 8);
  *(_QWORD *)(v17 + 8) = result;
  *(_QWORD *)result = v17;
  *(_QWORD *)v11 = v14;
  *(_QWORD *)(v14 + 8) = v11;
  if (v16 != (uint64_t *)v13)
  {
LABEL_15:
    if (v13 != a2)
    {
      v18 = v13;
      do
      {
        v19 = *((_DWORD *)v16 + 4);
        if (*(_DWORD *)(v13 + 16) >= v19)
        {
          v16 = (uint64_t *)v16[1];
          if (v16 == (uint64_t *)v18)
            return result;
        }
        else
        {
          v20 = *(_QWORD *)(v13 + 8);
          if (v20 == a2)
          {
LABEL_21:
            v20 = a2;
          }
          else
          {
            while (*(_DWORD *)(v20 + 16) < v19)
            {
              v20 = *(_QWORD *)(v20 + 8);
              if (v20 == a2)
                goto LABEL_21;
            }
          }
          v21 = *(_QWORD *)v20;
          v22 = *(_QWORD *)v13;
          *(_QWORD *)(v22 + 8) = *(_QWORD *)(*(_QWORD *)v20 + 8);
          **(_QWORD **)(v21 + 8) = v22;
          if (v18 == v13)
            v18 = v20;
          v24 = *v16;
          v23 = (uint64_t *)v16[1];
          *(_QWORD *)(v24 + 8) = v13;
          *(_QWORD *)v13 = v24;
          *v16 = v21;
          *(_QWORD *)(v21 + 8) = v16;
          v16 = v23;
          v13 = v20;
          if (v23 == (uint64_t *)v18)
            return result;
        }
      }
      while (v13 != a2);
    }
  }
  return result;
}

uint64_t VBAP::initialize(uint64_t a1, uint64_t *a2, uint64_t *a3, char **a4, uint64_t *a5)
{
  char *v5;
  unint64_t v6;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  float *v13;
  double v14;
  __double2 v15;
  __double2 v16;
  float v17;
  float v18;
  float sinval;
  VBAP *v20;
  int v21;
  int v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  _DWORD *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  const float *v40;
  const float *v41;
  uint64_t v42;
  uint64_t v43;
  vDSP_Length v44;
  uint64_t v45;
  float64x2_t v46;
  float32x4_t v47;
  __n128 v48;
  float64x2_t v49;
  float64x2_t v50;
  float64x2_t v51;
  float64x2_t v52;
  uint64_t v53;
  size_t v54;
  void *v55;
  size_t v56;
  void *v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unint64_t v63;
  BOOL v64;
  float64_t *v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t i;
  uint64_t v70;
  float64x2_t v71;
  float64x2_t v72;
  float64x2_t v73;
  float64x2_t v74;
  float64x2_t v75;
  float64x2_t v76;
  uint64_t v77;
  float64x2_t v78;
  float v79;
  float64x2_t v80;
  int v81;
  int v82;
  float64x2_t v83;
  float64x2_t v84;
  float64x2_t v85;
  float64x2_t v86;
  NSObject *v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  float v100;
  float v101;
  float64x2_t v102;
  float64x2_t v103;
  float64x2_t v104;
  float64x2_t v105;
  float32x2_t *v106;
  float64x2_t v107;
  float64x2_t v108;
  __int32 **v109;
  __int32 **v110;
  __int32 **v111;
  __int32 *v112;
  __int32 *v113;
  unint64_t v114;
  float32x4_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  unsigned int v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  uint64_t v127;
  char *v128;
  char **v129;
  int *v130;
  char *v131;
  char **v132;
  int v133;
  char *v134;
  unint64_t v135;
  char **v136;
  char *v137;
  char *v138;
  char *v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _BYTE *v146;
  char *v147;
  unint64_t v148;
  uint64_t v149;
  _OWORD *v150;
  __int128 *v151;
  uint64_t v152;
  __int128 v153;
  int v154;
  char *v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  _BYTE *v162;
  char *v163;
  unint64_t v164;
  char *v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  unint64_t v171;
  _BYTE *v172;
  uint64_t v173;
  uint64_t v174;
  void *v175;
  void *v176;
  uint64_t v177;
  char *v178;
  char **v179;
  char *v180;
  char **v181;
  char *v182;
  char **v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  _OWORD *v193;
  char *v194;
  uint64_t v195;
  __int128 v196;
  int v197;
  char *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  uint64_t v203;
  unint64_t v204;
  _BYTE *v205;
  char *v206;
  unint64_t v207;
  char *v208;
  uint64_t v209;
  float32x4_t *v210;
  float32x4_t *v211;
  uint64_t v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t v218;
  void *v219;
  void *v220;
  uint64_t v221;
  int *v222;
  int *v223;
  uint64_t v224;
  char *v225;
  char *v226;
  int v227;
  unint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  uint64_t v233;
  unint64_t v234;
  _BYTE *v235;
  _DWORD *v236;
  unint64_t v237;
  char *v238;
  int v239;
  uint64_t v240;
  float32x4_t *v241;
  float32x4_t *v242;
  uint64_t v243;
  _DWORD *v244;
  unint64_t v245;
  uint64_t v246;
  float32x4_t *v247;
  float32x4_t *v248;
  uint64_t v249;
  int v250;
  int v251;
  char *v252;
  char **v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  unint64_t v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  _BYTE *v261;
  _DWORD *v262;
  unint64_t v263;
  char *v264;
  int v265;
  int v266;
  char **v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  _BYTE *v274;
  _DWORD *v275;
  unint64_t v276;
  char *v277;
  _DWORD *v278;
  unint64_t v279;
  unint64_t v280;
  uint64_t v281;
  float32x4_t *v282;
  float32x4_t *v283;
  uint64_t v284;
  int v285;
  char *v286;
  char **v287;
  char **v288;
  uint64_t v289;
  char *v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  uint64_t v294;
  unint64_t v295;
  unint64_t v296;
  _BYTE *v297;
  _DWORD *v298;
  unint64_t v299;
  char *v300;
  int v301;
  char *v302;
  char **v303;
  _QWORD *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  uint64_t v309;
  unint64_t v310;
  _BYTE *v311;
  _DWORD *v312;
  unint64_t v313;
  char *v314;
  uint64_t v315;
  float32x4_t *v316;
  float32x4_t *v317;
  uint64_t v318;
  uint64_t v319;
  float32x4_t *v320;
  float32x4_t *v321;
  uint64_t v322;
  int v323;
  uint64_t v324;
  float32x4_t *v325;
  float32x4_t *v326;
  uint64_t v327;
  uint64_t v328;
  float32x4_t *v329;
  float32x4_t *v330;
  uint64_t v331;
  int v332;
  uint64_t v333;
  uint64_t v334;
  unint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  void *v339;
  char *v340;
  _DWORD *v341;
  char *v342;
  int v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  unint64_t v348;
  uint64_t v349;
  unint64_t v350;
  _BYTE *v351;
  _DWORD *v352;
  unint64_t v353;
  uint64_t v354;
  float32x4_t *v355;
  float32x4_t *v356;
  uint64_t v357;
  int v358;
  int v359;
  char *v360;
  uint64_t v361;
  uint64_t v362;
  unint64_t v363;
  uint64_t v364;
  unint64_t v365;
  _BYTE *v366;
  _DWORD *v367;
  unint64_t v368;
  char *v369;
  uint64_t v370;
  float32x4_t *v371;
  float32x4_t *v372;
  uint64_t v373;
  int v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  uint64_t v378;
  unint64_t v379;
  char *v380;
  uint64_t v381;
  float32x4_t *v382;
  float32x4_t *v383;
  uint64_t v384;
  int v385;
  __int32 *v386;
  __int32 *v387;
  __int32 *v388;
  __int32 v389;
  __int32 *v390;
  __int32 *v391;
  uint64_t v392;
  __int32 *v393;
  __int32 *v394;
  uint64_t v396;
  unint64_t v397;
  uint64_t v398;
  char *v399;
  char *v400;
  void *v401;
  char *v402;
  void *v403;
  void *v404;
  char *v405;
  unint64_t v406;
  uint64_t v407;
  char *v408;
  unint64_t v409;
  uint64_t v410;
  unint64_t v411;
  char *v412;
  char *v413;
  void *v414;
  void *v415;
  const float **v416;
  unint64_t v417;
  unsigned int v418;
  _QWORD *v419;
  _QWORD *v420;
  uint64_t v421;
  _QWORD *v422;
  _QWORD *v423;
  _QWORD *v424;
  void *v425;
  _QWORD *v426;
  void *v427;
  void *v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  void *v434;
  uint64_t v435;
  void *v436;
  void *v437;
  unint64_t v438;
  uint64_t v439;
  char **v440;
  unint64_t v441;
  BOOL v442;
  uint64_t v443;
  unint64_t v444;
  uint64_t v445;
  uint64_t v446;
  void **v447;
  unint64_t v448;
  _QWORD *v449;
  unint64_t v450;
  int **v451;
  int *v452;
  int *v453;
  char *v454;
  uint64_t v455;
  unint64_t v456;
  uint64_t v457;
  float v458;
  uint64_t v459;
  uint64_t v460;
  float v461;
  float v462;
  uint64_t v463;
  float v464;
  float v465;
  int v466;
  float *v467;
  float v468;
  float v469;
  char *v470;
  float *v471;
  float v472;
  uint64_t v473;
  float v474;
  uint64_t v475;
  uint64_t v476;
  const float *v477;
  const float *v478;
  float32x2_t v479;
  float32x2_t v480;
  float32x2_t v481;
  float32x2_t v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  float32x2_t *p_C;
  __int32 v487;
  uint64_t v488;
  uint64_t v489;
  void *v490;
  uint64_t v491;
  void *v492;
  void *v493;
  uint64_t v494;
  char *v495;
  char *v496;
  char *v497;
  char *v498;
  char *v499;
  char *v500;
  uint64_t v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  const float *v508;
  float64x2_t *v509;
  float64x2_t *v510;
  float64x2_t *v511;
  unsigned int v512;
  uint64_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  unint64_t v517;
  BOOL v518;
  uint64_t v519;
  uint64_t j;
  uint64_t v521;
  float64x2_t v522;
  float64x2_t v523;
  float64x2_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  float64x2_t v530;
  uint64_t v531;
  float64x2_t v532;
  float64x2_t v533;
  float v534;
  double v535;
  float64x2_t v536;
  vDSP_Length v537;
  int64x2_t *v538;
  uint64_t v539;
  unint64_t v540;
  _DWORD *v541;
  float *v542;
  uint64_t v543;
  uint64_t v544;
  unint64_t v545;
  uint64_t v546;
  uint64_t v547;
  char *v548;
  char *v549;
  char *v550;
  unint64_t v551;
  unint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  char *v557;
  uint64_t v558;
  unint64_t v559;
  unint64_t v560;
  _BYTE *v561;
  char *v562;
  unint64_t v563;
  char *v564;
  int v565;
  uint64_t v566;
  _OWORD *v567;
  char *v568;
  uint64_t v569;
  __int128 v570;
  int *v571;
  unint64_t v572;
  uint64_t v573;
  uint64_t v574;
  unint64_t v575;
  unsigned int v576;
  uint64_t v577;
  uint64_t v578;
  float *v579;
  float64x2_t v580;
  unsigned __int128 *v581;
  unint64_t v582;
  vDSP_Length v583;
  uint64_t v584;
  unsigned __int128 *v585;
  const float *v586;
  int64x2_t v587;
  int64x2_t v588;
  int64x2_t *v589;
  int64x2_t v590;
  vDSP_Length v591;
  const float *v592;
  unsigned __int128 v593;
  unsigned __int128 v594;
  int64x2_t v595;
  int *v596;
  int v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  uint64_t *v601;
  uint64_t v602;
  _DWORD *v603;
  uint64_t v604;
  float v605;
  uint64_t v606;
  float32x2_t v607;
  int v608;
  uint64_t v609;
  float v610;
  float32x2_t v611;
  float32x2_t v612;
  uint64_t v613;
  float32x2_t *v614;
  float64x2_t v615;
  float64x2_t v616;
  float v617;
  uint64_t v618;
  uint64_t v619;
  float64x2_t v620;
  float64x2_t v621;
  float32x2_t v622;
  float64x2_t v623;
  float64x2_t v624;
  double v625;
  float v626;
  float v627;
  float v628;
  BOOL v629;
  float v630;
  BOOL v632;
  unint64_t v633;
  uint64_t v634;
  unint64_t v635;
  uint64_t v636;
  void *v637;
  uint64_t v638;
  void *v639;
  uint64_t v640;
  char *v641;
  unint64_t v642;
  unint64_t v643;
  char *v644;
  double v645;
  float32x4_t v646;
  __n128 v647;
  double v648;
  float64x2_t v649;
  double v650;
  float64x2_t v651;
  float *v652;
  float *v653;
  const float **v654;
  char *v655;
  unint64_t v656;
  unsigned int v657;
  _QWORD *v658;
  _DWORD *v659;
  uint64_t v660;
  unsigned int v661;
  unsigned int v662;
  char *v663;
  uint64_t v664;
  unsigned int v665;
  unsigned int v666;
  uint64_t v667;
  const float *v668;
  float v669;
  char *v670;
  uint64_t v671;
  _DWORD *v672;
  float v673;
  float v674;
  char *v675;
  _QWORD *v676;
  unint64_t v677;
  _QWORD *v678;
  const void *v679;
  int64_t v680;
  char *v681;
  char *v682;
  _QWORD *v683;
  uint64_t v684;
  _QWORD *v685;
  unint64_t v686;
  unint64_t v687;
  unint64_t v688;
  char *v689;
  char *v690;
  int64_t v691;
  char *v692;
  char *v693;
  char *v694;
  __int128 v695;
  _QWORD *v696;
  _QWORD *v697;
  _QWORD *v698;
  void *v699;
  void *v700;
  float *v701;
  _QWORD *v702;
  uint64_t v703;
  uint64_t v704;
  char *v705;
  uint64_t v706;
  uint64_t v707;
  unint64_t v708;
  char *v709;
  _DWORD *v710;
  char *v711;
  uint64_t v712;
  unint64_t v713;
  uint64_t v714;
  unint64_t v715;
  _BYTE *v716;
  _DWORD *v717;
  char *v718;
  unint64_t v719;
  uint64_t v720;
  _OWORD *v721;
  char *v722;
  uint64_t v723;
  __int128 v724;
  int v725;
  uint64_t v726;
  uint64_t v727;
  float v728;
  char v729;
  char *v730;
  char *v731;
  void *v732;
  char *v733;
  void *v734;
  void *v735;
  char *v736;
  char *v737;
  void *v738;
  char *v739;
  void *v740;
  void *v741;
  char **__src;
  void *__srca;
  unsigned int v745;
  uint64_t v746;
  void **v747;
  char **v748;
  uint64_t v749;
  unint64_t v750;
  uint64_t v751;
  float *v752[2];
  void *v753;
  int v754;
  char *v757;
  void *v758;
  char *v759;
  void *v760;
  void *v762;
  VBAP *v763[2];
  char **v764;
  int *v765;
  char **v766;
  _DWORD *v767;
  unint64_t v768;
  float64_t *v770;
  float64_t *v771;
  void *v772;
  float *v773;
  void *v774;
  float *v775;
  void *v776;
  _QWORD v777[2];
  void *__p;
  char *v779;
  char *v780;
  void *v781;
  char *v782;
  uint64_t v783;
  uint64_t __B;
  int v785;
  double v786;
  uint64_t v787;
  float v788;
  uint64_t __A;
  float v790;
  double v791;
  float v792;
  float32x2_t __C;
  uint64_t v794;
  int32x2_t v795;
  _BYTE buf[40];
  uint64_t v797;
  float32x4x3_t v798;

  v797 = *MEMORY[0x24BDAC8D0];
  v5 = *(char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  v6 = *(unsigned int *)(a1 + 300);
  if ((_DWORD)v6)
  {
    v8 = 4 * v6;
    v762 = operator new(4 * v6);
    bzero(v762, v8);
    v774 = operator new(v8);
    bzero(v774, v8);
    v772 = operator new(v8);
    bzero(v772, v8);
    v9 = 0;
    v10 = *a2;
    v11 = *a3;
    while (1)
    {
      v21 = *(_DWORD *)(v10 + 4 * v9);
      v22 = *(_DWORD *)(v11 + 4 * v9);
      v23 = *(_QWORD *)(a1 + 24);
      if ((unint64_t)v5 >= v23)
        break;
      *(_DWORD *)v5 = v21;
      *((_DWORD *)v5 + 1) = v22;
      v5 += 8;
LABEL_4:
      *(_QWORD *)(a1 + 16) = v5;
      v10 = *a2;
      v11 = *a3;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = (float *)(v12 + 4 * (3 * v9));
      v14 = *(float *)(*a2 + 4 * v9) * 0.0174532925;
      v15 = __sincos_stret(*(float *)(*a3 + 4 * v9) * 0.0174532925);
      v16 = __sincos_stret(v14);
      v17 = v15.__cosval * v16.__cosval;
      v18 = v15.__cosval * v16.__sinval;
      *v13 = v17;
      v13[1] = v18;
      sinval = v15.__sinval;
      v13[2] = sinval;
      v20 = (VBAP *)v762;
      *((float *)v762 + v9) = v17;
      *((_DWORD *)v774 + v9) = *(_DWORD *)(v12 + 4 * (3 * v9 + 1));
      *((_DWORD *)v772 + v9) = *(_DWORD *)(v12 + 4 * (3 * v9 + 2));
      ++v9;
      v6 = *(unsigned int *)(a1 + 300);
      if (v9 >= v6)
      {
        v41 = (const float *)v772;
        v40 = (const float *)v774;
        goto LABEL_33;
      }
    }
    v24 = *(char **)(a1 + 8);
    v25 = (v5 - v24) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v27 = v23 - (_QWORD)v24;
    if (v27 >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    if (v28)
    {
      if (v28 >> 61)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v29 = operator new(8 * v28);
    }
    else
    {
      v29 = 0;
    }
    v30 = &v29[8 * v25];
    *v30 = v21;
    v30[1] = v22;
    if (v5 == v24)
    {
      v24 = v5;
      v33 = &v29[8 * v25];
      goto LABEL_22;
    }
    v31 = v5 - 8 - v24;
    if (v31 < 0x168
      || &v29[v5 - v24 - 8 - (v31 & 0xFFFFFFFFFFFFFFF8)] > &v29[v5 - v24 - 8]
      || &v5[-(v31 & 0xFFFFFFFFFFFFFFF8) - 8] > v5 - 8
      || (unint64_t)(v24 - v29) < 0x20)
    {
      v32 = v5;
      v33 = &v29[8 * v25];
    }
    else
    {
      v35 = (v31 >> 3) + 1;
      v32 = &v5[-8 * (v35 & 0x3FFFFFFFFFFFFFFCLL)];
      v36 = &v29[8 * v25 - 16];
      v37 = v5 - 16;
      v38 = v35 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v39 = *(_OWORD *)v37;
        *(v36 - 1) = *((_OWORD *)v37 - 1);
        *v36 = v39;
        v36 -= 2;
        v37 -= 32;
        v38 -= 4;
      }
      while (v38);
      v33 = (char *)&v30[-2 * (v35 & 0x3FFFFFFFFFFFFFFCLL)];
      if (v35 == (v35 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_22;
    }
    do
    {
      v34 = *((_QWORD *)v32 - 1);
      v32 -= 8;
      *((_QWORD *)v33 - 1) = v34;
      v33 -= 8;
    }
    while (v32 != v24);
    v24 = *(char **)(a1 + 8);
LABEL_22:
    v5 = (char *)(v30 + 2);
    *(_QWORD *)(a1 + 8) = v33;
    *(_QWORD *)(a1 + 16) = v30 + 2;
    *(_QWORD *)(a1 + 24) = &v29[8 * v28];
    if (v24)
      operator delete(v24);
    goto LABEL_4;
  }
  v41 = 0;
  v20 = 0;
  v40 = 0;
LABEL_33:
  v773 = (float *)v41;
  v775 = (float *)v40;
  if (VBAP::find_duplicate_vertex(v20, v40, v41, (const float *)v6))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "VBAP.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 112;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "initialize";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 112;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Duplicate vertices were found",
        buf,
        0x22u);
    }
    v42 = 4294967246;
    goto LABEL_828;
  }
  v43 = a1;
  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 16)
  {
    __C.i32[0] = 0;
    vDSP_distancesq(*(const float **)(a1 + 56), 1, (const float *)(*(_QWORD *)(a1 + 56) + 12), 1, (float *)&__C, 3uLL);
    if (fabsf(__C.f32[0] + -4.0) < 0.00001)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "VBAP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 121;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "initialize";
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = 121;
        _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_DEFAULT, "%25s:%-5d CADSPUtility:%s:%d: Diametrically opposed speakers; No need to generate convex hull",
          buf,
          0x22u);
      }
      v42 = 0;
      *(_BYTE *)(a1 + 314) = 1;
      goto LABEL_828;
    }
    v43 = a1;
    *(_BYTE *)(a1 + 314) = 0;
  }
  v44 = *(unsigned int *)(v43 + 300);
  if ((_DWORD)v44 == 1)
  {
    *(_WORD *)(v43 + 312) = 1;
    v45 = *(_QWORD *)(v43 + 80);
    if (*(_QWORD *)(v43 + 88) != v45)
      *(_QWORD *)(v43 + 88) = v45;
    goto LABEL_827;
  }
  v785 = 0;
  __B = 0;
  vDSP_meanv(*(const float **)(v43 + 56), 3, (float *)&__B, v44);
  vDSP_meanv((const float *)(*(_QWORD *)(v43 + 56) + 4), 3, (float *)&__B + 1, *(unsigned int *)(v43 + 300));
  vDSP_meanv((const float *)(*(_QWORD *)(v43 + 56) + 8), 3, (float *)&v785, *(unsigned int *)(v43 + 300));
  v53 = *(unsigned int *)(v43 + 300);
  if ((_DWORD)v53)
  {
    v54 = 4 * (3 * v53);
    v55 = operator new(v54);
    bzero(v55, v54);
    v56 = 8 * v53;
    v57 = operator new(8 * v53);
    bzero(v57, v56);
    v770 = (float64_t *)v57;
    v759 = (char *)operator new(v56);
    bzero(v759, v56);
    v58 = (uint64_t)v55 + v54;
    v757 = (char *)operator new(v56);
    bzero(v757, v56);
    v59 = 0;
    v60 = *(_QWORD *)(a1 + 56);
    v61 = 2;
    do
    {
      vDSP_vsub((const float *)&__B, 1, (const float *)(v60 + 4 * (v61 - 2)), 1, (float *)v55 + v61 - 2, 1, 3uLL);
      v60 = *(_QWORD *)(a1 + 56);
      v62 = 8 * v59;
      v770[(unint64_t)v62 / 8] = *(float *)(v60 + 4 * (v61 - 2));
      *(double *)&v759[v62] = *(float *)(v60 + 4 * (v61 - 1));
      v46.f64[0] = *(float *)(v60 + 4 * v61);
      *(float64_t *)&v757[v62] = v46.f64[0];
      ++v59;
      v63 = *(unsigned int *)(a1 + 300);
      v61 += 3;
    }
    while (v59 < v63);
    if (v63 >= 4)
    {
      v68 = 0;
      v48.n128_u64[0] = 0x3FA999999999999ALL;
      v65 = v770;
      v67 = v757;
      v66 = v759;
      while (2)
      {
        for (i = 0; i != v63; ++i)
        {
          if (i != v68)
          {
            v70 = 0;
            while (1)
            {
              if (v68 != v70 && i != v70)
              {
                v46.f64[0] = v770[v68];
                v46.f64[1] = *(float64_t *)&v759[8 * v68];
                v47.i64[0] = *(_QWORD *)&v757[8 * v68];
                v71.f64[0] = v770[i];
                v71.f64[1] = *(float64_t *)&v759[8 * i];
                v50.f64[0] = *(float64_t *)&v757[8 * i];
                v72.f64[0] = v770[v70];
                v72.f64[1] = *(float64_t *)&v759[8 * v70];
                v52.f64[0] = *(float64_t *)&v757[8 * v70];
                v73 = vsubq_f64(v72, v46);
                v74 = vsubq_f64(v52, (float64x2_t)v47);
                v75 = vsubq_f64(v71, v46);
                v76 = vsubq_f64(v50, (float64x2_t)v47);
                v51 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v74, v75, 1)), v76, v73, 1);
                v76.f64[1] = v75.f64[0];
                v74.f64[1] = v73.f64[0];
                v52 = vmlaq_f64(vnegq_f64(vmulq_f64(v73, v76)), v75, v74);
                v49.f64[0] = v51.f64[0];
                v49.f64[1] = v52.f64[0];
                v50 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1);
                if (vaddvq_f64(vabsq_f64(v49)) + vabsq_f64(v50).f64[0] > 0.05)
                  break;
              }
              if (v63 == ++v70)
                goto LABEL_55;
            }
            v77 = 0;
            v64 = 0;
            v48.n128_u64[0] = 0x3F847AE147AE147BLL;
            *(_QWORD *)&v49.f64[1] = vextq_s8((int8x16_t)v49, (int8x16_t)v49, 8uLL).u64[0];
            v78 = (float64x2_t)vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL);
            v52.f64[1] = v78.f64[0];
            v52 = vmulq_f64(v52, v52);
            v79 = sqrt(vmulq_f64(v51, v51).f64[0] + v52.f64[0] + v52.f64[1]);
            v52.f64[0] = 1.0;
            v51.f64[0] = 1.0 / v79;
            do
            {
              if (v70 != v77 && v68 != v77 && i != v77)
              {
                v80.f64[0] = v770[v77];
                v80.f64[1] = *(float64_t *)&v759[8 * v77];
                v78.f64[0] = *(float64_t *)&v757[8 * v77];
                v52 = vmulq_f64(vsubq_f64(v80, v46), v49);
                v78 = vmulq_f64(vsubq_f64(v78, (float64x2_t)v47), v50);
                v52.f64[0] = fabs((vaddvq_f64(v52) + v78.f64[0]) * v51.f64[0]);
                if (v52.f64[0] > 0.01)
                  break;
              }
              v64 = ++v77 >= v63;
            }
            while (v63 != v77);
            goto LABEL_70;
          }
LABEL_55:
          ;
        }
        ++v68;
        v64 = 1;
        if (v68 != v63)
          continue;
        break;
      }
    }
    else
    {
      v64 = 1;
      v65 = v770;
      v67 = v757;
      v66 = v759;
    }
  }
  else
  {
    LODWORD(v63) = 0;
    v55 = 0;
    v58 = 0;
    v66 = 0;
    v65 = 0;
    v67 = 0;
    v64 = 1;
  }
LABEL_70:
  v758 = v67;
  v760 = v66;
  v771 = v65;
  *(_BYTE *)(a1 + 312) = v64;
  v81 = !v64;
  *(_BYTE *)(a1 + 313) = !v64;
  v82 = *(_DWORD *)a1;
  v753 = v55;
  if (v64 && v82 == 1)
  {
    *(_DWORD *)a1 = 0;
    v781 = 0;
    v782 = 0;
    v783 = 0;
    __p = 0;
    v779 = 0;
    v780 = 0;
    goto LABEL_578;
  }
  v781 = 0;
  v782 = 0;
  v783 = 0;
  __p = 0;
  v779 = 0;
  v780 = 0;
  if (v82 != 1)
    goto LABEL_576;
  v42 = VBAP::delaunayTriangulation(a1, (const float *)v55, v58, a4, a5, v46.f64[0], v47, v48, v49.f64[0], v50, v51.f64[0], v52);
  if ((_DWORD)v42)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "VBAP.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 163;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "initialize";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 163;
      v87 = MEMORY[0x24BDACB70];
      v88 = "%25s:%-5d CADSPUtility:%s:%d: VBAP error, Delaunay triangulation issue";
      goto LABEL_799;
    }
LABEL_800:
    v729 = 0;
    v730 = (char *)__p;
    if (__p)
      goto LABEL_803;
    goto LABEL_810;
  }
  v776 = 0;
  v777[0] = 0;
  v777[1] = 0;
  v90 = *(_QWORD *)(a1 + 224);
  v89 = *(_QWORD *)(a1 + 232);
  *(_DWORD *)buf = 0;
  v91 = v89 - v90;
  if (v91)
  {
    std::vector<float>::__append(&v776, v91 >> 2, buf);
    v91 = (uint64_t)v776;
    v92 = v777[0];
  }
  else
  {
    v92 = 0;
  }
  if ((unint64_t)(v92 - v91) >= 0xC)
  {
    v93 = *(_QWORD *)(a1 + 224);
    v94 = 1;
    v95 = 2;
    do
    {
      v96 = 4 * (v95 - 2);
      v97 = 3 * *(_DWORD *)(v93 + 4 * (v95 - 1));
      v98 = 3 * *(_DWORD *)(v93 + 4 * v95);
      v99 = 3 * *(_DWORD *)(v93 + v96);
      LODWORD(v83.f64[0]) = *((_DWORD *)v55 + v99);
      LODWORD(v85.f64[0]) = *((_DWORD *)v55 + v99 + 1);
      v100 = *((float *)v55 + v97) - *(float *)v83.f64;
      v101 = *((float *)v55 + v98) - *(float *)v83.f64;
      LODWORD(v83.f64[0]) = *((_DWORD *)v55 + v99 + 2);
      v102.f64[0] = v100;
      v84.f64[0] = (float)(*((float *)v55 + v97 + 1) - *(float *)v85.f64);
      v86.f64[0] = (float)(*((float *)v55 + v97 + 2) - *(float *)v83.f64);
      v103.f64[0] = v101;
      v85.f64[0] = (float)(*((float *)v55 + v98 + 1) - *(float *)v85.f64);
      v83.f64[0] = (float)(*((float *)v55 + v98 + 2) - *(float *)v83.f64);
      v104 = vmulq_f64(v85, v86);
      v86.f64[1] = v102.f64[0];
      v102.f64[1] = v84.f64[0];
      v105 = vmlaq_f64(vnegq_f64(v104), v84, v83);
      v83.f64[1] = v103.f64[0];
      v106 = (float32x2_t *)(v91 + v96);
      v103.f64[1] = v85.f64[0];
      v107 = vmlaq_f64(vnegq_f64(vmulq_f64(v83, v102)), v86, v103);
      v108 = vmulq_f64(v107, v107);
      v83 = vmulq_f64(v105, v105);
      v105.f64[1] = v107.f64[0];
      v108.f64[0] = 1.0 / sqrt(v83.f64[0] + v108.f64[0] + v108.f64[1]);
      *v106 = vcvt_f32_f64(vmulq_n_f64(v105, v108.f64[0]));
      *(float *)v107.f64 = vmulq_laneq_f64(v108, v107, 1).f64[0];
      v629 = ((v92 - v91) >> 2) / 3uLL > v94++;
      v95 += 3;
      v106[1].i32[0] = LODWORD(v107.f64[0]);
    }
    while (v629);
  }
  memset(buf, 0, 24);
  v109 = *(__int32 ***)(a1 + 152);
  v747 = (void **)(a1 + 152);
  v110 = *(__int32 ***)(a1 + 160);
  if (v110 != v109)
  {
    v111 = *(__int32 ***)(a1 + 160);
    do
    {
      v113 = *(v111 - 3);
      v111 -= 3;
      v112 = v113;
      if (v113)
      {
        *(v110 - 2) = v112;
        operator delete(v112);
      }
      v110 = v111;
    }
    while (v111 != v109);
    v91 = (uint64_t)v776;
    v92 = v777[0];
  }
  *(_QWORD *)(a1 + 160) = v109;
  if ((unint64_t)(v92 - v91) >= 0xC)
  {
    LODWORD(v114) = 0;
    v115 = (float32x4_t)vdupq_n_s32(0x47C35000u);
    *(float32x4_t *)v752 = v115;
    while (1)
    {
      v117 = (3 * v114);
      v115.i32[0] = *(_DWORD *)(v91 + 4 * v117);
      v115.i32[1] = *(_DWORD *)(v91 + 4 * (v117 + 1));
      v115.i32[2] = *(_DWORD *)(v91 + 4 * (v117 + 2));
      v115 = vrndaq_f32(vmulq_f32(v115, *(float32x4_t *)v752));
      *(float32x4_t *)v763 = v115;
      v118 = *(_QWORD *)&buf[8];
      v119 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3);
      v754 = v114;
      if (!(_DWORD)v114)
      {
        if (*(_QWORD *)&buf[8] == *(_QWORD *)buf)
        {
          std::vector<std::vector<float>>::__append((uint64_t *)buf, 1 - v119);
        }
        else if (v119 >= 2)
        {
          v123 = *(_QWORD *)buf + 24;
          if (*(_QWORD *)&buf[8] != *(_QWORD *)buf + 24)
          {
            v124 = *(_QWORD *)&buf[8];
            do
            {
              v126 = *(void **)(v124 - 24);
              v124 -= 24;
              v125 = v126;
              if (v126)
              {
                *(_QWORD *)(v118 - 16) = v125;
                operator delete(v125);
              }
              v118 = v124;
            }
            while (v124 != v123);
          }
          *(_QWORD *)&buf[8] = v123;
        }
        v136 = *(char ***)buf;
        v138 = *(char **)(*(_QWORD *)buf + 8);
        v137 = *(char **)(*(_QWORD *)buf + 16);
        if (v138 < v137)
        {
          *(_DWORD *)v138 = v763[0];
          v139 = v138 + 4;
          goto LABEL_137;
        }
        v140 = **(_BYTE ***)buf;
        v141 = (uint64_t)&v138[-**(_QWORD **)buf];
        v142 = v141 >> 2;
        v143 = (v141 >> 2) + 1;
        if (v143 >> 62)
          goto LABEL_839;
        v144 = v137 - v140;
        if (v144 >> 1 > v143)
          v143 = v144 >> 1;
        if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFFCLL)
          v145 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v145 = v143;
        if (v145)
        {
          if (!(v145 >> 62))
          {
            v146 = operator new(4 * v145);
            goto LABEL_128;
          }
LABEL_838:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v146 = 0;
LABEL_128:
        v147 = &v146[4 * v142];
        *(_DWORD *)v147 = v763[0];
        v139 = v147 + 4;
        if (v138 != v140)
        {
          v148 = v138 - 4 - v140;
          if (v148 < 0x2C)
            goto LABEL_854;
          if ((unint64_t)(v138 - &v146[v141]) < 0x20)
            goto LABEL_854;
          v149 = (v148 >> 2) + 1;
          v150 = &v146[4 * v142 - 16];
          v151 = (__int128 *)(v138 - 16);
          v152 = v149 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v153 = *v151;
            *(v150 - 1) = *(v151 - 1);
            *v150 = v153;
            v150 -= 2;
            v151 -= 2;
            v152 -= 8;
          }
          while (v152);
          v147 -= 4 * (v149 & 0x7FFFFFFFFFFFFFF8);
          v138 -= 4 * (v149 & 0x7FFFFFFFFFFFFFF8);
          if (v149 != (v149 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_854:
            do
            {
              v154 = *((_DWORD *)v138 - 1);
              v138 -= 4;
              *((_DWORD *)v147 - 1) = v154;
              v147 -= 4;
            }
            while (v138 != v140);
          }
        }
        v137 = &v146[4 * v145];
        *v136 = v147;
        v136[1] = v139;
        v136[2] = v137;
        if (v140)
        {
          operator delete(v140);
          v137 = v136[2];
        }
LABEL_137:
        v136[1] = v139;
        if (v139 < v137)
        {
          *(_DWORD *)v139 = HIDWORD(v763[0]);
          v155 = v139 + 4;
          goto LABEL_187;
        }
        v156 = *v136;
        v157 = v139 - *v136;
        v158 = v157 >> 2;
        v159 = (v157 >> 2) + 1;
        if (v159 >> 62)
          goto LABEL_839;
        v160 = v137 - v156;
        if (v160 >> 1 > v159)
          v159 = v160 >> 1;
        if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL)
          v161 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v161 = v159;
        if (v161)
        {
          if (v161 >> 62)
            goto LABEL_838;
          v162 = operator new(4 * v161);
        }
        else
        {
          v162 = 0;
        }
        v163 = &v162[4 * v158];
        *(_DWORD *)v163 = HIDWORD(v763[0]);
        v155 = v163 + 4;
        if (v139 != v156)
        {
          v164 = v139 - 4 - v156;
          if (v164 < 0x2C)
          {
            v165 = v139;
            goto LABEL_184;
          }
          if ((unint64_t)(v139 - v162 - v157) < 0x20)
          {
            v165 = v139;
            goto LABEL_184;
          }
          v192 = (v164 >> 2) + 1;
          v165 = &v139[-4 * (v192 & 0x7FFFFFFFFFFFFFF8)];
          v193 = &v162[4 * v158 - 16];
          v194 = v139 - 16;
          v195 = v192 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v196 = *(_OWORD *)v194;
            *(v193 - 1) = *((_OWORD *)v194 - 1);
            *v193 = v196;
            v193 -= 2;
            v194 -= 32;
            v195 -= 8;
          }
          while (v195);
          v163 -= 4 * (v192 & 0x7FFFFFFFFFFFFFF8);
          if (v192 != (v192 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_184:
              v197 = *((_DWORD *)v165 - 1);
              v165 -= 4;
              *((_DWORD *)v163 - 1) = v197;
              v163 -= 4;
            }
            while (v165 != v156);
          }
        }
        v137 = &v162[4 * v161];
        *v136 = v163;
        v136[1] = v155;
        v136[2] = v137;
        if (v156)
        {
          operator delete(v156);
          v137 = v136[2];
        }
LABEL_187:
        v136[1] = v155;
        if (v155 < v137)
        {
          v115.i32[3] = HIDWORD(v763[1]);
          *(_DWORD *)v155 = v763[1];
          v198 = v155 + 4;
          goto LABEL_210;
        }
        v199 = *v136;
        v200 = v155 - *v136;
        v201 = v200 >> 2;
        v202 = (v200 >> 2) + 1;
        if (v202 >> 62)
LABEL_839:
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v203 = v137 - v199;
        if (v203 >> 1 > v202)
          v202 = v203 >> 1;
        if ((unint64_t)v203 >= 0x7FFFFFFFFFFFFFFCLL)
          v204 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v204 = v202;
        if (v204)
        {
          if (v204 >> 62)
            goto LABEL_838;
          v205 = operator new(4 * v204);
        }
        else
        {
          v205 = 0;
        }
        v206 = &v205[4 * v201];
        v115.i32[3] = HIDWORD(v763[1]);
        *(_DWORD *)v206 = v763[1];
        v198 = v206 + 4;
        if (v155 != v199)
        {
          v207 = v155 - 4 - v199;
          if (v207 < 0x2C)
          {
            v208 = v155;
            goto LABEL_207;
          }
          if ((unint64_t)(v155 - v205 - v200) < 0x20)
          {
            v208 = v155;
            goto LABEL_207;
          }
          v209 = (v207 >> 2) + 1;
          v208 = &v155[-4 * (v209 & 0x7FFFFFFFFFFFFFF8)];
          v210 = (float32x4_t *)&v205[4 * v201 - 16];
          v211 = (float32x4_t *)(v155 - 16);
          v212 = v209 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v115 = *v211;
            v210[-1] = v211[-1];
            *v210 = v115;
            v210 -= 2;
            v211 -= 2;
            v212 -= 8;
          }
          while (v212);
          v206 -= 4 * (v209 & 0x7FFFFFFFFFFFFFF8);
          if (v209 != (v209 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_207:
              v213 = *((_DWORD *)v208 - 1);
              v208 -= 4;
              *((_DWORD *)v206 - 1) = v213;
              v206 -= 4;
            }
            while (v208 != v199);
          }
        }
        *v136 = v206;
        v136[1] = v198;
        v136[2] = &v205[4 * v204];
        if (v199)
          operator delete(v199);
LABEL_210:
        v136[1] = v198;
        v215 = *(_QWORD *)(a1 + 152);
        v214 = *(_QWORD *)(a1 + 160);
        v216 = 0xAAAAAAAAAAAAAAABLL * ((v214 - v215) >> 3);
        if (v214 == v215)
        {
          std::vector<std::vector<unsigned int>>::__append((uint64_t)v747, 1 - v216);
        }
        else if (v216 >= 2)
        {
          v217 = v215 + 24;
          if (v214 != v215 + 24)
          {
            v218 = *(_QWORD *)(a1 + 160);
            do
            {
              v220 = *(void **)(v218 - 24);
              v218 -= 24;
              v219 = v220;
              if (v220)
              {
                *(_QWORD *)(v214 - 16) = v219;
                operator delete(v219);
              }
              v214 = v218;
            }
            while (v218 != v217);
          }
          *(_QWORD *)(a1 + 160) = v217;
        }
        v221 = *(_QWORD *)(a1 + 224);
        v222 = (int *)(v221 + 4 * v117);
        v223 = (int *)(v221 + 4 * (v117 + 3));
        v224 = *(_QWORD *)(a1 + 152);
        v225 = *(char **)(v224 + 8);
        v765 = v223;
        while (2)
        {
          v227 = *v222;
          v228 = *(_QWORD *)(v224 + 16);
          if ((unint64_t)v225 < v228)
          {
            *(_DWORD *)v225 = v227;
            v226 = v225 + 4;
          }
          else
          {
            v229 = *(char **)v224;
            v230 = (uint64_t)&v225[-*(_QWORD *)v224];
            v231 = v230 >> 2;
            v232 = (v230 >> 2) + 1;
            if (v232 >> 62)
              std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
            v233 = v228 - (_QWORD)v229;
            if (v233 >> 1 > v232)
              v232 = v233 >> 1;
            if ((unint64_t)v233 >= 0x7FFFFFFFFFFFFFFCLL)
              v234 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v234 = v232;
            if (v234)
            {
              if (v234 >> 62)
                goto LABEL_838;
              v235 = operator new(4 * v234);
            }
            else
            {
              v235 = 0;
            }
            v236 = &v235[4 * v231];
            *v236 = v227;
            v226 = (char *)(v236 + 1);
            if (v225 != v229)
            {
              v237 = v225 - 4 - v229;
              if (v237 < 0xBC)
              {
                v238 = v225;
                goto LABEL_236;
              }
              if (&v235[v230 - 4 - (v237 & 0xFFFFFFFFFFFFFFFCLL)] > &v235[v230 - 4])
              {
                v238 = v225;
                goto LABEL_236;
              }
              if (&v225[-(v237 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v225 - 4)
              {
                v238 = v225;
                goto LABEL_236;
              }
              if ((unint64_t)(v225 - v235 - v230) < 0x20)
              {
                v238 = v225;
                goto LABEL_236;
              }
              v240 = (v237 >> 2) + 1;
              v238 = &v225[-4 * (v240 & 0x7FFFFFFFFFFFFFF8)];
              v241 = (float32x4_t *)&v235[4 * v231 - 16];
              v242 = (float32x4_t *)(v225 - 16);
              v243 = v240 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v115 = *v242;
                v241[-1] = v242[-1];
                *v241 = v115;
                v241 -= 2;
                v242 -= 2;
                v243 -= 8;
              }
              while (v243);
              v236 -= v240 & 0x7FFFFFFFFFFFFFF8;
              if (v240 != (v240 & 0x7FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_236:
                  v239 = *((_DWORD *)v238 - 1);
                  v238 -= 4;
                  *--v236 = v239;
                }
                while (v238 != v229);
              }
            }
            *(_QWORD *)v224 = v236;
            *(_QWORD *)(v224 + 8) = v226;
            *(_QWORD *)(v224 + 16) = &v235[4 * v234];
            if (v229)
              operator delete(v229);
            v223 = v765;
          }
          *(_QWORD *)(v224 + 8) = v226;
          ++v222;
          v225 = v226;
          if (v222 == v223)
            goto LABEL_93;
          continue;
        }
      }
      if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
        break;
LABEL_93:
      v114 = (v754 + 1);
      v91 = (uint64_t)v776;
      if (v114 >= ((uint64_t)(v777[0] - (_QWORD)v776) >> 2) / 3uLL)
      {
        v109 = *(__int32 ***)(a1 + 160);
        goto LABEL_444;
      }
    }
    v120 = 0;
    v121 = 0;
    while (1)
    {
      v122 = *(_QWORD *)(*(_QWORD *)buf + 24 * v120);
      v115.i64[0] = *(_QWORD *)v122;
      v115.i32[2] = *(_DWORD *)(v122 + 8);
      v115 = (float32x4_t)vceqq_f32(v115, *(float32x4_t *)v763);
      *(int16x4_t *)v115.f32 = vmovn_s32((int32x4_t)v115);
      if ((v115.i8[0] & 1) != 0 && (v115.i8[2] & 1) != 0 && (v115.i8[4] & 1) != 0)
        break;
      if (v119 - 1 == v120)
      {
        v135 = v121 + 2;
        if (v135 <= v119)
        {
          if (v135 < v119)
          {
            v173 = *(_QWORD *)buf + 24 * v135;
            if (*(_QWORD *)&buf[8] != v173)
            {
              v174 = *(_QWORD *)&buf[8];
              do
              {
                v176 = *(void **)(v174 - 24);
                v174 -= 24;
                v175 = v176;
                if (v176)
                {
                  *(_QWORD *)(v118 - 16) = v175;
                  operator delete(v175);
                }
                v118 = v174;
              }
              while (v174 != v173);
            }
            *(_QWORD *)&buf[8] = v173;
          }
        }
        else
        {
          std::vector<std::vector<float>>::__append((uint64_t *)buf, v135 - v119);
        }
        v750 = v121 + 2;
        v745 = v121 + 1;
        v177 = *(_QWORD *)buf + 24 * (v121 + 1);
        v179 = (char **)(v177 + 8);
        v178 = *(char **)(v177 + 8);
        v181 = (char **)(v177 + 16);
        v180 = *(char **)(v177 + 16);
        if (v178 < v180)
        {
          v115.i32[3] = HIDWORD(v763[1]);
          *(_DWORD *)v178 = v763[0];
          v182 = v178 + 4;
          goto LABEL_309;
        }
        v183 = (char **)(v177 + 8);
        __src = (char **)(v177 + 16);
        v184 = *(_QWORD *)buf + 24 * v745;
        v185 = *(char **)v177;
        v186 = (uint64_t)&v178[-*(_QWORD *)v177];
        v187 = v186 >> 2;
        v188 = (v186 >> 2) + 1;
        if (v188 >> 62)
          goto LABEL_845;
        v189 = v180 - v185;
        if (v189 >> 1 > v188)
          v188 = v189 >> 1;
        if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL)
          v190 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v190 = v188;
        if (v190)
        {
          if (!(v190 >> 62))
          {
            v191 = operator new(4 * v190);
            goto LABEL_296;
          }
LABEL_842:
          std::__throw_bad_array_new_length[abi:ne180100]();
        }
        v191 = 0;
LABEL_296:
        v278 = &v191[4 * v187];
        v115.i32[3] = HIDWORD(v763[1]);
        *v278 = v763[0];
        v182 = (char *)(v278 + 1);
        if (v178 == v185)
        {
          v177 = v184;
          v179 = v183;
        }
        else
        {
          v279 = v178 - 4 - v185;
          if (v279 < 0x2C)
          {
            v177 = v184;
            v179 = v183;
            goto LABEL_306;
          }
          v280 = v178 - &v191[v186];
          v177 = v184;
          v179 = v183;
          if (v280 < 0x20)
            goto LABEL_855;
          v281 = (v279 >> 2) + 1;
          v282 = (float32x4_t *)&v191[4 * v187 - 16];
          v283 = (float32x4_t *)(v178 - 16);
          v284 = v281 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v115 = *v283;
            v282[-1] = v283[-1];
            *v282 = v115;
            v282 -= 2;
            v283 -= 2;
            v284 -= 8;
          }
          while (v284);
          v278 -= v281 & 0x7FFFFFFFFFFFFFF8;
          v178 -= 4 * (v281 & 0x7FFFFFFFFFFFFFF8);
          if (v281 != (v281 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_855:
            do
            {
LABEL_306:
              v285 = *((_DWORD *)v178 - 1);
              v178 -= 4;
              *--v278 = v285;
            }
            while (v178 != v185);
          }
        }
        *(_QWORD *)v177 = v278;
        v180 = &v191[4 * v190];
        *v179 = v182;
        v181 = __src;
        *__src = v180;
        if (v185)
        {
          operator delete(v185);
          v180 = *__src;
        }
LABEL_309:
        *v179 = v182;
        if (v182 < v180)
        {
          *(_DWORD *)v182 = HIDWORD(v763[0]);
          v286 = v182 + 4;
          goto LABEL_330;
        }
        v287 = v179;
        v288 = v181;
        v289 = v177;
        v290 = *(char **)v177;
        v291 = (uint64_t)&v182[-*(_QWORD *)v177];
        v292 = v291 >> 2;
        v293 = (v291 >> 2) + 1;
        if (v293 >> 62)
          goto LABEL_845;
        v294 = v180 - v290;
        if (v294 >> 1 > v293)
          v293 = v294 >> 1;
        if ((unint64_t)v294 >= 0x7FFFFFFFFFFFFFFCLL)
          v295 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v295 = v293;
        if (v295)
        {
          if (v295 >> 62)
            goto LABEL_842;
          v296 = v295;
          v297 = operator new(4 * v295);
          v295 = v296;
        }
        else
        {
          v297 = 0;
        }
        v298 = &v297[4 * v292];
        *v298 = HIDWORD(v763[0]);
        v286 = (char *)(v298 + 1);
        if (v182 == v290)
        {
          v181 = v288;
          v177 = v289;
          v179 = v287;
        }
        else
        {
          v299 = v182 - 4 - v290;
          if (v299 < 0x2C || (unint64_t)(v182 - v297 - v291) < 0x20)
          {
            v300 = v182;
            v181 = v288;
            v177 = v289;
            v179 = v287;
            goto LABEL_325;
          }
          v324 = (v299 >> 2) + 1;
          v300 = &v182[-4 * (v324 & 0x7FFFFFFFFFFFFFF8)];
          v325 = (float32x4_t *)&v297[4 * v292 - 16];
          v326 = (float32x4_t *)(v182 - 16);
          v327 = v324 & 0x7FFFFFFFFFFFFFF8;
          v177 = v289;
          do
          {
            v115 = *v326;
            v325[-1] = v326[-1];
            *v325 = v115;
            v325 -= 2;
            v326 -= 2;
            v327 -= 8;
          }
          while (v327);
          v298 -= v324 & 0x7FFFFFFFFFFFFFF8;
          v181 = v288;
          v179 = v287;
          if (v324 != (v324 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_325:
              v301 = *((_DWORD *)v300 - 1);
              v300 -= 4;
              *--v298 = v301;
            }
            while (v300 != v290);
          }
        }
        *(_QWORD *)v177 = v298;
        v180 = &v297[4 * v295];
        *v179 = v286;
        *v181 = v180;
        if (v290)
        {
          operator delete(v290);
          v180 = *v181;
        }
LABEL_330:
        *v179 = v286;
        if (v286 < v180)
        {
          *(_DWORD *)v286 = v763[1];
          v302 = v286 + 4;
          goto LABEL_366;
        }
        v766 = v179;
        v303 = v181;
        v304 = (_QWORD *)v177;
        v305 = *(char **)v177;
        v306 = (uint64_t)&v286[-*(_QWORD *)v177];
        v307 = v306 >> 2;
        v308 = (v306 >> 2) + 1;
        if (v308 >> 62)
LABEL_845:
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v309 = v180 - v305;
        if (v309 >> 1 > v308)
          v308 = v309 >> 1;
        if ((unint64_t)v309 >= 0x7FFFFFFFFFFFFFFCLL)
          v310 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v310 = v308;
        if (v310)
        {
          if (v310 >> 62)
            goto LABEL_842;
          v311 = operator new(4 * v310);
        }
        else
        {
          v311 = 0;
        }
        v312 = &v311[4 * v307];
        *v312 = v763[1];
        v302 = (char *)(v312 + 1);
        if (v286 != v305)
        {
          v313 = v286 - 4 - v305;
          if (v313 < 0x2C)
          {
            v314 = v286;
            goto LABEL_363;
          }
          if ((unint64_t)(v286 - v311 - v306) < 0x20)
          {
            v314 = v286;
            goto LABEL_363;
          }
          v328 = (v313 >> 2) + 1;
          v314 = &v286[-4 * (v328 & 0x7FFFFFFFFFFFFFF8)];
          v329 = (float32x4_t *)&v311[4 * v307 - 16];
          v330 = (float32x4_t *)(v286 - 16);
          v331 = v328 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v115 = *v330;
            v329[-1] = v330[-1];
            *v329 = v115;
            v329 -= 2;
            v330 -= 2;
            v331 -= 8;
          }
          while (v331);
          v312 -= v328 & 0x7FFFFFFFFFFFFFF8;
          if (v328 != (v328 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_363:
              v332 = *((_DWORD *)v314 - 1);
              v314 -= 4;
              *--v312 = v332;
            }
            while (v314 != v305);
          }
        }
        *v304 = v312;
        v179 = v766;
        *v766 = v302;
        *v303 = &v311[4 * v310];
        if (v305)
          operator delete(v305);
LABEL_366:
        *v179 = v302;
        v334 = *(_QWORD *)(a1 + 152);
        v333 = *(_QWORD *)(a1 + 160);
        v335 = 0xAAAAAAAAAAAAAAABLL * ((v333 - v334) >> 3);
        if (v750 <= v335)
        {
          if (v750 < v335)
          {
            v336 = v334 + 24 * v750;
            if (v333 != v336)
            {
              v337 = *(_QWORD *)(a1 + 160);
              do
              {
                v339 = *(void **)(v337 - 24);
                v337 -= 24;
                v338 = v339;
                if (v339)
                {
                  *(_QWORD *)(v333 - 16) = v338;
                  operator delete(v338);
                }
                v333 = v337;
              }
              while (v337 != v336);
            }
            *(_QWORD *)(a1 + 160) = v336;
          }
        }
        else
        {
          std::vector<std::vector<unsigned int>>::__append((uint64_t)v747, v750 - v335);
        }
        v127 = *(_QWORD *)(a1 + 152) + 24 * v745;
        v129 = (char **)(v127 + 8);
        v340 = *(char **)(v127 + 8);
        v341 = (_DWORD *)(*(_QWORD *)(a1 + 224) + 4 * v117);
        v267 = (char **)(v127 + 16);
        v342 = *(char **)(v127 + 16);
        v343 = *v341;
        v751 = v127;
        v767 = v341;
        if (v340 < v342)
        {
          *(_DWORD *)v340 = v343;
          v344 = v340 + 4;
          goto LABEL_397;
        }
        v345 = *(char **)v127;
        v346 = (uint64_t)&v340[-*(_QWORD *)v127];
        v347 = v346 >> 2;
        v348 = (v346 >> 2) + 1;
        if (v348 >> 62)
          goto LABEL_841;
        v349 = v342 - v345;
        if (v349 >> 1 > v348)
          v348 = v349 >> 1;
        if ((unint64_t)v349 >= 0x7FFFFFFFFFFFFFFCLL)
          v350 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v350 = v348;
        if (v350)
        {
          if (v350 >> 62)
            goto LABEL_842;
          v351 = operator new(4 * v350);
          v127 = v751;
        }
        else
        {
          v351 = 0;
        }
        v352 = &v351[4 * v347];
        *v352 = v343;
        v344 = (char *)(v352 + 1);
        if (v340 != v345)
        {
          v353 = v340 - 4 - v345;
          if (v353 < 0x2C)
            goto LABEL_856;
          if ((unint64_t)(v340 - &v351[v346]) < 0x20)
            goto LABEL_856;
          v354 = (v353 >> 2) + 1;
          v355 = (float32x4_t *)&v351[4 * v347 - 16];
          v356 = (float32x4_t *)(v340 - 16);
          v357 = v354 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v115 = *v356;
            v355[-1] = v356[-1];
            *v355 = v115;
            v355 -= 2;
            v356 -= 2;
            v357 -= 8;
          }
          while (v357);
          v352 -= v354 & 0x7FFFFFFFFFFFFFF8;
          v340 -= 4 * (v354 & 0x7FFFFFFFFFFFFFF8);
          if (v354 != (v354 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_856:
            do
            {
              v358 = *((_DWORD *)v340 - 1);
              v340 -= 4;
              *--v352 = v358;
            }
            while (v340 != v345);
          }
        }
        *(_QWORD *)v127 = v352;
        v342 = &v351[4 * v350];
        *v129 = v344;
        *v267 = v342;
        if (v345)
        {
          operator delete(v345);
          v127 = v751;
          v342 = *v267;
        }
        v341 = v767;
LABEL_397:
        *v129 = v344;
        v359 = v341[1];
        if (v344 < v342)
        {
          *(_DWORD *)v344 = v359;
          v252 = v344 + 4;
          goto LABEL_421;
        }
        v360 = *(char **)v127;
        v361 = (uint64_t)&v344[-*(_QWORD *)v127];
        v362 = v361 >> 2;
        v363 = (v361 >> 2) + 1;
        if (v363 >> 62)
          goto LABEL_841;
        v364 = v342 - v360;
        if (v364 >> 1 > v363)
          v363 = v364 >> 1;
        if ((unint64_t)v364 >= 0x7FFFFFFFFFFFFFFCLL)
          v365 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v365 = v363;
        if (v365)
        {
          if (v365 >> 62)
            goto LABEL_842;
          v366 = operator new(4 * v365);
          v127 = v751;
        }
        else
        {
          v366 = 0;
        }
        v367 = &v366[4 * v362];
        *v367 = v359;
        v252 = (char *)(v367 + 1);
        if (v344 != v360)
        {
          v368 = v344 - 4 - v360;
          if (v368 < 0x2C)
          {
            v369 = v344;
            goto LABEL_417;
          }
          if ((unint64_t)(v344 - v366 - v361) < 0x20)
          {
            v369 = v344;
            goto LABEL_417;
          }
          v370 = (v368 >> 2) + 1;
          v369 = &v344[-4 * (v370 & 0x7FFFFFFFFFFFFFF8)];
          v371 = (float32x4_t *)&v366[4 * v362 - 16];
          v372 = (float32x4_t *)(v344 - 16);
          v373 = v370 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v115 = *v372;
            v371[-1] = v372[-1];
            *v371 = v115;
            v371 -= 2;
            v372 -= 2;
            v373 -= 8;
          }
          while (v373);
          v367 -= v370 & 0x7FFFFFFFFFFFFFF8;
          if (v370 != (v370 & 0x7FFFFFFFFFFFFFF8))
          {
            do
            {
LABEL_417:
              v374 = *((_DWORD *)v369 - 1);
              v369 -= 4;
              *--v367 = v374;
            }
            while (v369 != v360);
          }
        }
        *(_QWORD *)v127 = v367;
        v342 = &v366[4 * v365];
        *v129 = v252;
        *v267 = v342;
        if (v360)
        {
          operator delete(v360);
          v127 = v751;
          v342 = *v267;
        }
        v341 = v767;
LABEL_421:
        *v129 = v252;
        v266 = v341[2];
        if (v252 >= v342)
        {
          v268 = *(char **)v127;
          v375 = (uint64_t)&v252[-*(_QWORD *)v127];
          v376 = v375 >> 2;
          v377 = (v375 >> 2) + 1;
          if (!(v377 >> 62))
          {
            v378 = v342 - v268;
            if (v378 >> 1 > v377)
              v377 = v378 >> 1;
            if ((unint64_t)v378 >= 0x7FFFFFFFFFFFFFFCLL)
              v273 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v273 = v377;
            if (v273)
            {
              if (v273 >> 62)
                goto LABEL_842;
              v274 = operator new(4 * v273);
              v127 = v751;
            }
            else
            {
              v274 = 0;
            }
            v275 = &v274[4 * v376];
            *v275 = v266;
            v116 = (char *)(v275 + 1);
            if (v252 != v268)
            {
              v379 = v252 - 4 - v268;
              if (v379 < 0x2C)
              {
                v380 = v252;
                goto LABEL_440;
              }
              if ((unint64_t)(v252 - v274 - v375) < 0x20)
              {
                v380 = v252;
                goto LABEL_440;
              }
              v381 = (v379 >> 2) + 1;
              v380 = &v252[-4 * (v381 & 0x7FFFFFFFFFFFFFF8)];
              v382 = (float32x4_t *)&v274[4 * v376 - 16];
              v383 = (float32x4_t *)(v252 - 16);
              v384 = v381 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v115 = *v383;
                v382[-1] = v383[-1];
                *v382 = v115;
                v382 -= 2;
                v383 -= 2;
                v384 -= 8;
              }
              while (v384);
              v275 -= v381 & 0x7FFFFFFFFFFFFFF8;
              if (v381 != (v381 & 0x7FFFFFFFFFFFFFF8))
              {
                do
                {
LABEL_440:
                  v385 = *((_DWORD *)v380 - 1);
                  v380 -= 4;
                  *--v275 = v385;
                }
                while (v380 != v268);
              }
            }
            goto LABEL_441;
          }
LABEL_841:
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        }
        goto LABEL_91;
      }
      v120 = ++v121;
      if (v119 <= v121)
        goto LABEL_93;
    }
    v127 = *(_QWORD *)(a1 + 152) + 24 * v120;
    v129 = (char **)(v127 + 8);
    v128 = *(char **)(v127 + 8);
    v130 = (int *)(*(_QWORD *)(a1 + 224) + 4 * v117);
    v132 = (char **)(v127 + 16);
    v131 = *(char **)(v127 + 16);
    v133 = *v130;
    v749 = v127;
    if (v128 >= v131)
    {
      v764 = (char **)(v127 + 16);
      v166 = *(char **)v127;
      v167 = (uint64_t)&v128[-*(_QWORD *)v127];
      v168 = v167 >> 2;
      v169 = (v167 >> 2) + 1;
      if (v169 >> 62)
        goto LABEL_841;
      v170 = v131 - v166;
      if (v170 >> 1 > v169)
        v169 = v170 >> 1;
      if ((unint64_t)v170 >= 0x7FFFFFFFFFFFFFFCLL)
        v171 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v171 = v169;
      if (v171)
      {
        if (v171 >> 62)
          goto LABEL_842;
        v172 = operator new(4 * v171);
        v127 = v749;
      }
      else
      {
        v172 = 0;
      }
      v244 = &v172[4 * v168];
      *v244 = v133;
      v134 = (char *)(v244 + 1);
      if (v128 != v166)
      {
        v245 = v128 - 4 - v166;
        if (v245 < 0x2C)
          goto LABEL_857;
        if ((unint64_t)(v128 - &v172[v167]) < 0x20)
          goto LABEL_857;
        v246 = (v245 >> 2) + 1;
        v247 = (float32x4_t *)&v172[4 * v168 - 16];
        v248 = (float32x4_t *)(v128 - 16);
        v249 = v246 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v115 = *v248;
          v247[-1] = v248[-1];
          *v247 = v115;
          v247 -= 2;
          v248 -= 2;
          v249 -= 8;
        }
        while (v249);
        v244 -= v246 & 0x7FFFFFFFFFFFFFF8;
        v128 -= 4 * (v246 & 0x7FFFFFFFFFFFFFF8);
        if (v246 != (v246 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_857:
          do
          {
            v250 = *((_DWORD *)v128 - 1);
            v128 -= 4;
            *--v244 = v250;
          }
          while (v128 != v166);
        }
      }
      *(_QWORD *)v127 = v244;
      v131 = &v172[4 * v171];
      *v129 = v134;
      v132 = v764;
      *v764 = v131;
      if (v166)
      {
        operator delete(v166);
        v127 = v749;
        v131 = *v764;
      }
    }
    else
    {
      *(_DWORD *)v128 = v133;
      v134 = v128 + 4;
    }
    *v129 = v134;
    v251 = v130[1];
    if (v134 < v131)
    {
      *(_DWORD *)v134 = v251;
      v252 = v134 + 4;
LABEL_281:
      *v129 = v252;
      v266 = v130[2];
      if (v252 < v131)
      {
LABEL_91:
        *(_DWORD *)v252 = v266;
        v116 = v252 + 4;
        goto LABEL_92;
      }
      v267 = v132;
      v268 = *(char **)v127;
      v269 = (uint64_t)&v252[-*(_QWORD *)v127];
      v270 = v269 >> 2;
      v271 = (v269 >> 2) + 1;
      if (v271 >> 62)
        goto LABEL_841;
      v272 = v131 - v268;
      if (v272 >> 1 > v271)
        v271 = v272 >> 1;
      if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFFCLL)
        v273 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v273 = v271;
      if (v273)
      {
        if (v273 >> 62)
          goto LABEL_842;
        v274 = operator new(4 * v273);
        v127 = v749;
      }
      else
      {
        v274 = 0;
      }
      v275 = &v274[4 * v270];
      *v275 = v266;
      v116 = (char *)(v275 + 1);
      if (v252 != v268)
      {
        v276 = v252 - 4 - v268;
        if (v276 >= 0x2C)
        {
          if ((unint64_t)(v252 - v274 - v269) >= 0x20)
          {
            v319 = (v276 >> 2) + 1;
            v277 = &v252[-4 * (v319 & 0x7FFFFFFFFFFFFFF8)];
            v320 = (float32x4_t *)&v274[4 * v270 - 16];
            v321 = (float32x4_t *)(v252 - 16);
            v322 = v319 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v115 = *v321;
              v320[-1] = v321[-1];
              *v320 = v115;
              v320 -= 2;
              v321 -= 2;
              v322 -= 8;
            }
            while (v322);
            v275 -= v319 & 0x7FFFFFFFFFFFFFF8;
            if (v319 == (v319 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_441;
          }
          else
          {
            v277 = v252;
          }
        }
        else
        {
          v277 = v252;
        }
        do
        {
          v323 = *((_DWORD *)v277 - 1);
          v277 -= 4;
          *--v275 = v323;
        }
        while (v277 != v268);
      }
LABEL_441:
      *(_QWORD *)v127 = v275;
      *v129 = v116;
      *v267 = &v274[4 * v273];
      if (v268)
        operator delete(v268);
LABEL_92:
      *v129 = v116;
      goto LABEL_93;
    }
    v253 = v132;
    v254 = *(char **)v127;
    v255 = (uint64_t)&v134[-*(_QWORD *)v127];
    v256 = v255 >> 2;
    v257 = (v255 >> 2) + 1;
    if (v257 >> 62)
      goto LABEL_841;
    v258 = v131 - v254;
    if (v258 >> 1 > v257)
      v257 = v258 >> 1;
    if ((unint64_t)v258 >= 0x7FFFFFFFFFFFFFFCLL)
      v259 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v259 = v257;
    if (v259)
    {
      if (v259 >> 62)
        goto LABEL_842;
      v260 = v259;
      v261 = operator new(4 * v259);
      v127 = v749;
      v259 = v260;
    }
    else
    {
      v261 = 0;
    }
    v262 = &v261[4 * v256];
    *v262 = v251;
    v252 = (char *)(v262 + 1);
    if (v134 == v254)
    {
      v132 = v253;
      goto LABEL_279;
    }
    v263 = v134 - 4 - v254;
    if (v263 >= 0x2C && (unint64_t)(v134 - v261 - v255) >= 0x20)
    {
      v315 = (v263 >> 2) + 1;
      v264 = &v134[-4 * (v315 & 0x7FFFFFFFFFFFFFF8)];
      v316 = (float32x4_t *)&v261[4 * v256 - 16];
      v317 = (float32x4_t *)(v134 - 16);
      v318 = v315 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v115 = *v317;
        v316[-1] = v317[-1];
        *v316 = v115;
        v316 -= 2;
        v317 -= 2;
        v318 -= 8;
      }
      while (v318);
      v262 -= v315 & 0x7FFFFFFFFFFFFFF8;
      v132 = v253;
      if (v315 == (v315 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_279:
        *(_QWORD *)v127 = v262;
        v131 = &v261[4 * v259];
        *v129 = v252;
        *v132 = v131;
        if (v254)
        {
          operator delete(v254);
          v127 = v749;
          v131 = *v132;
        }
        goto LABEL_281;
      }
    }
    else
    {
      v264 = v134;
      v132 = v253;
    }
    do
    {
      v265 = *((_DWORD *)v264 - 1);
      v264 -= 4;
      *--v262 = v265;
    }
    while (v264 != v254);
    goto LABEL_279;
  }
LABEL_444:
  if (*v747 != v109)
  {
    v109 = (__int32 **)*v747;
    do
    {
      v386 = *v109;
      v387 = v109[1];
      if (*v109 != v387)
      {
        v388 = *v109;
        do
        {
          v389 = *v388++;
          v390 = wmemchr(v388, v389, v387 - v388);
          if (v390)
            v391 = v390;
          else
            v391 = v387;
          v392 = v391 - v388 + 1;
          v393 = &v386[v392];
          v394 = v393 + 1;
          if (v393 != v387 && v394 != v387)
          {
            do
            {
              if (*v394 != *v386)
                v386[v392++] = *v394;
              ++v394;
            }
            while (v394 != v387);
          }
          v387 = &v386[v392];
          v386 = v388;
        }
        while (v392 != 1);
        if (v387 != v109[1])
          v109[1] = v387;
      }
      v109 += 3;
    }
    while (v109 != *(__int32 ***)(a1 + 160));
  }
  if (v747 != &__p)
  {
    v396 = (uint64_t)*v747;
    v397 = 0xAAAAAAAAAAAAAAABLL * (((char *)v109 - (_BYTE *)*v747) >> 3);
    v398 = (uint64_t)v780;
    v399 = (char *)__p;
    if (0xAAAAAAAAAAAAAAABLL * ((v780 - (_BYTE *)__p) >> 3) >= v397)
    {
      v405 = v779;
      v406 = 0xAAAAAAAAAAAAAAABLL * ((v779 - (_BYTE *)__p) >> 3);
      if (v406 >= v397)
      {
        if ((__int32 **)v396 != v109)
        {
          do
          {
            if ((char *)v396 != v399)
              std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v399, *(char **)v396, *(_QWORD *)(v396 + 8), (uint64_t)(*(_QWORD *)(v396 + 8) - *(_QWORD *)v396) >> 2);
            v396 += 24;
            v399 += 24;
          }
          while ((__int32 **)v396 != v109);
          v405 = v779;
        }
        if (v405 != v399)
        {
          v413 = v405;
          do
          {
            v415 = (void *)*((_QWORD *)v413 - 3);
            v413 -= 24;
            v414 = v415;
            if (v415)
            {
              *((_QWORD *)v405 - 2) = v414;
              operator delete(v414);
            }
            v405 = v413;
          }
          while (v413 != v399);
        }
        v779 = v399;
        goto LABEL_503;
      }
      if (v779 != __p)
      {
        v407 = 8 * ((v779 - (_BYTE *)__p) >> 3);
        v408 = (char *)*v747;
        do
        {
          if (v408 != v399)
            std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>(v399, *(char **)v408, *((_QWORD *)v408 + 1), (uint64_t)(*((_QWORD *)v408 + 1) - *(_QWORD *)v408) >> 2);
          v408 += 24;
          v399 += 24;
          v407 -= 24;
        }
        while (v407);
        v399 = v779;
      }
      v412 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)&v780, v396 + 24 * v406, (uint64_t)v109, v399);
    }
    else
    {
      if (__p)
      {
        v400 = v779;
        v401 = __p;
        if (v779 != __p)
        {
          v402 = v779;
          do
          {
            v404 = (void *)*((_QWORD *)v402 - 3);
            v402 -= 24;
            v403 = v404;
            if (v404)
            {
              *((_QWORD *)v400 - 2) = v403;
              operator delete(v403);
            }
            v400 = v402;
          }
          while (v402 != v399);
          v401 = __p;
        }
        v779 = v399;
        operator delete(v401);
        v398 = 0;
        __p = 0;
        v779 = 0;
        v780 = 0;
      }
      if (v397 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_846;
      v409 = 0xAAAAAAAAAAAAAAABLL * (v398 >> 3);
      v410 = 2 * v409;
      if (2 * v409 <= v397)
        v410 = v397;
      v411 = v409 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v410;
      if (v411 > 0xAAAAAAAAAAAAAAALL)
LABEL_846:
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      __p = operator new(24 * v411);
      v779 = (char *)__p;
      v780 = (char *)__p + 24 * v411;
      v412 = (char *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>((uint64_t)&v780, v396, (uint64_t)v109, __p);
    }
    v779 = v412;
  }
LABEL_503:
  std::vector<std::vector<float>>::__assign_with_size[abi:ne180100]<std::vector<float>*,std::vector<float>*>((uint64_t)&v781, *(uint64_t *)buf, *(uint64_t *)&buf[8], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 3));
  LODWORD(v791) = 925353388;
  v416 = (const float **)v781;
  if (v782 != v781)
  {
    v417 = 0;
    v418 = 1;
    do
    {
      vDSP_vsmul(v416[3 * v417], 1, (const float *)&v791, (float *)v416[3 * v417], 1, 3uLL);
      v417 = v418;
      v416 = (const float **)v781;
      ++v418;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v782 - (_BYTE *)v781) >> 3) > v417);
  }
  v420 = *(_QWORD **)(a1 + 152);
  v419 = *(_QWORD **)(a1 + 160);
  if (v420 != v419)
  {
    v421 = *(_QWORD *)buf;
    while (1)
    {
      while (v420[1] - *v420 > 0xFuLL)
      {
        v420 += 3;
        v421 += 24;
        if (v420 == v419)
          goto LABEL_535;
      }
      if (v420 + 3 == v419)
        break;
      v422 = v420;
      do
      {
        v425 = (void *)*v422;
        if (*v422)
        {
          v422[1] = v425;
          operator delete(v425);
          v422[1] = 0;
          v422[2] = 0;
        }
        v423 = v422 + 3;
        *(_OWORD *)v422 = *(_OWORD *)(v422 + 3);
        v422[2] = v422[5];
        v422[4] = 0;
        v422[5] = 0;
        v422[3] = 0;
        v424 = v422 + 6;
        v422 += 3;
      }
      while (v424 != v419);
      v419 = *(_QWORD **)(a1 + 160);
      if (v419 != v423)
        goto LABEL_518;
LABEL_522:
      *(_QWORD *)(a1 + 160) = v423;
      v429 = v421 + 24;
      v430 = *(_QWORD *)&buf[8];
      if (v421 + 24 != *(_QWORD *)&buf[8])
      {
        v431 = v421;
        do
        {
          v434 = *(void **)v431;
          if (*(_QWORD *)v431)
          {
            *(_QWORD *)(v431 + 8) = v434;
            operator delete(v434);
            *(_QWORD *)(v431 + 8) = 0;
            *(_QWORD *)(v431 + 16) = 0;
          }
          v432 = v431 + 24;
          *(_OWORD *)v431 = *(_OWORD *)(v431 + 24);
          *(_QWORD *)(v431 + 16) = *(_QWORD *)(v431 + 40);
          *(_QWORD *)(v431 + 32) = 0;
          *(_QWORD *)(v431 + 40) = 0;
          *(_QWORD *)(v431 + 24) = 0;
          v433 = v431 + 48;
          v431 += 24;
        }
        while (v433 != v430);
        v429 = *(_QWORD *)&buf[8];
        if (*(_QWORD *)&buf[8] == v432)
          goto LABEL_534;
LABEL_530:
        v435 = v429;
        do
        {
          v437 = *(void **)(v435 - 24);
          v435 -= 24;
          v436 = v437;
          if (v437)
          {
            *(_QWORD *)(v429 - 16) = v436;
            operator delete(v436);
          }
          v429 = v435;
        }
        while (v435 != v432);
        goto LABEL_534;
      }
      v432 = v421;
      if (v429 != v421)
        goto LABEL_530;
LABEL_534:
      *(_QWORD *)&buf[8] = v432;
      v419 = *(_QWORD **)(a1 + 160);
      if (v420 == v419)
      {
LABEL_535:
        v420 = *v747;
        goto LABEL_537;
      }
    }
    v423 = v420;
    if (v419 == v420)
      goto LABEL_522;
LABEL_518:
    v426 = v419;
    do
    {
      v428 = (void *)*(v426 - 3);
      v426 -= 3;
      v427 = v428;
      if (v428)
      {
        *(v419 - 2) = v427;
        operator delete(v427);
      }
      v419 = v426;
    }
    while (v426 != v423);
    goto LABEL_522;
  }
  v419 = *(_QWORD **)(a1 + 152);
LABEL_537:
  v438 = v419 - v420;
  __C.i32[0] = 0;
  v439 = *(_QWORD *)(a1 + 80);
  v440 = (char **)(a1 + 80);
  v441 = (*(_QWORD *)(a1 + 88) - v439) >> 2;
  v442 = v438 >= v441;
  if (v438 <= v441)
  {
    v444 = 0xAAAAAAAAAAAAAAABLL * v438;
    v443 = a1;
    if (!v442)
      *(_QWORD *)(a1 + 88) = v439 + 4 * v438;
  }
  else
  {
    std::vector<float>::__append((void **)(a1 + 80), v438 - v441, &__C);
    v443 = a1;
    v420 = *(_QWORD **)(a1 + 152);
    v419 = *(_QWORD **)(a1 + 160);
    v444 = 0xAAAAAAAAAAAAAAABLL * (v419 - v420);
  }
  v445 = *(_QWORD *)(v443 + 104);
  v446 = *(_QWORD *)(v443 + 112);
  v447 = (void **)(v443 + 104);
  __C.i32[0] = 0;
  v448 = (v446 - v445) >> 2;
  if (v444 <= v448)
  {
    if (v444 < v448)
      *(_QWORD *)(a1 + 112) = v445 + 4 * v444;
  }
  else
  {
    std::vector<float>::__append(v447, v444 - v448, &__C);
    v420 = *(_QWORD **)(a1 + 152);
    v419 = *(_QWORD **)(a1 + 160);
  }
  v449 = v419;
  if (v419 != v420)
  {
    v450 = 0;
    do
    {
      v451 = (int **)&v420[3 * v450];
      v452 = *v451;
      v453 = v451[1];
      v454 = *v440;
      v455 = (char *)v453 - (char *)v452;
      if (v455)
      {
        v456 = v455 >> 2;
        v457 = *(_QWORD *)(a1 + 56);
        v458 = (float)v456;
        v459 = (3 * v450);
        v460 = (v459 + 1);
        v461 = *(float *)&v454[4 * v459];
        v462 = *(float *)&v454[4 * v460];
        v463 = (v459 + 2);
        v464 = *(float *)&v454[4 * v463];
        if (v456 <= 1)
          v456 = 1;
        v465 = 1.0 / v458;
        do
        {
          v466 = *v452++;
          v461 = v461 + (float)(*(float *)(v457 + 4 * (3 * v466)) * v465);
          *(float *)&v454[4 * v459] = v461;
          v462 = v462 + (float)(*(float *)(v457 + 4 * (3 * v466 + 1)) * v465);
          *(float *)&v454[4 * v460] = v462;
          v464 = v464 + (float)(*(float *)(v457 + 4 * (3 * v466 + 2)) * v465);
          *(float *)&v454[4 * v463] = v464;
          --v456;
        }
        while (v456);
      }
      else
      {
        v459 = (3 * v450);
      }
      LODWORD(v786) = 0;
      vDSP_dotpr(*(const float **)(*(_QWORD *)buf + 24 * v450), 1, (const float *)&v454[4 * v459], 1, (float *)&v786, 3uLL);
      if (*(float *)&v786 == 0.0)
      {
        v790 = 0.0;
        __A = 0;
        v788 = 0.0;
        v787 = 0;
        __C = 0;
        v794 = 0;
        v795 = 0;
        *((_DWORD *)*v447 + v450) = 1065353216;
        v470 = *v440;
        v471 = *(float **)(*(_QWORD *)buf + 24 * v450);
        v472 = v471[1];
        *(float *)&__A = *(float *)&(*v440)[4 * v459] - (float)(*v471 * 0.00001);
        *(float *)&v787 = *(float *)&v470[4 * v459] + (float)(*v471 * 0.00001);
        v473 = 4 * (v459 + 1);
        *((float *)&__A + 1) = *(float *)&v470[v473] - (float)(v472 * 0.00001);
        v474 = v471[2];
        *((float *)&v787 + 1) = *(float *)&v470[v473] + (float)(v471[1] * 0.00001);
        v475 = 4 * (v459 + 2);
        v790 = *(float *)&v470[v475] - (float)(v474 * 0.00001);
        v788 = *(float *)&v470[v475] + (float)(v471[2] * 0.00001);
        VBAP::lineUnitSphereIntersection((VBAP *)&__A, (const float *)&v787, (float *)&__C, v467);
        v476 = (uint64_t)&(*v440)[4 * v459];
        v477 = (const float *)&(*v440)[4 * v459 + 4];
        v478 = (const float *)&(*v440)[4 * v459 + 8];
        v479 = vld1_dup_f32((const float *)v476);
        v480 = vsub_f32(v479, (float32x2_t)__PAIR64__(__C.u32[0], HIDWORD(v794)));
        v481 = vld1_dup_f32(v477);
        v482.i32[0] = vdup_lane_s32(v795, 1).u32[0];
        v483 = vcvtq_f64_f32(vsub_f32(v481, (float32x2_t)__PAIR64__(__C.u32[1], v795.u32[0])));
        v484 = vmlaq_f64(vcvtq_f64_f32(vmul_f32(v480, v480)), v483, v483);
        *(float32x2_t *)&v483.f64[0] = vld1_dup_f32(v478);
        v482.i32[1] = v794;
        v485 = vcvtq_f64_f32(vsub_f32(*(float32x2_t *)&v483.f64[0], v482));
        *(float32x2_t *)&v484.f64[0] = vcvt_f32_f64(vmlaq_f64(vcvtq_f64_f32(vcvt_f32_f64(v484)), v485, v485));
        p_C = (float32x2_t *)((char *)&v794 + 4);
        if ((vcgt_f32(*(float32x2_t *)&v484.f64[0], (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v484.f64[0], 1)).u8[0] & 1) == 0)
          p_C = &__C;
        v487 = p_C[1].i32[0];
        *(float32x2_t *)v476 = *p_C;
        *(_DWORD *)(v476 + 8) = v487;
      }
      else
      {
        __C.i32[0] = 0;
        vDSP_dotpr((const float *)&(*v440)[4 * v459], 1, (const float *)&(*v440)[4 * v459], 1, (float *)&__C, 3uLL);
        v468 = sqrtf(__C.f32[0]);
        *((float *)*v447 + v450) = v468;
        v469 = 1.0 / v468;
        __C.f32[0] = v469;
        if (*(float *)&v786 < 0.0)
          __C.f32[0] = -v469;
        vDSP_vsmul((const float *)&(*v440)[4 * v459], 1, (const float *)&__C, (float *)&(*v440)[4 * v459], 1, 3uLL);
      }
      ++v450;
      v420 = *(_QWORD **)(a1 + 152);
      v449 = *(_QWORD **)(a1 + 160);
    }
    while (0xAAAAAAAAAAAAAAABLL * (v449 - v420) > v450);
    v419 = *(_QWORD **)(a1 + 152);
  }
  v488 = *(_QWORD *)buf;
  if (*(_QWORD *)buf)
  {
    v489 = *(_QWORD *)&buf[8];
    v490 = *(void **)buf;
    if (*(_QWORD *)&buf[8] != *(_QWORD *)buf)
    {
      v491 = *(_QWORD *)&buf[8];
      do
      {
        v493 = *(void **)(v491 - 24);
        v491 -= 24;
        v492 = v493;
        if (v493)
        {
          *(_QWORD *)(v489 - 16) = v492;
          operator delete(v492);
        }
        v489 = v491;
      }
      while (v491 != v488);
      v490 = *(void **)buf;
    }
    *(_QWORD *)&buf[8] = v488;
    operator delete(v490);
    v419 = *(_QWORD **)(a1 + 152);
    v449 = *(_QWORD **)(a1 + 160);
  }
  if (v449 == v419)
  {
    *(_DWORD *)a1 = 0;
    *(_DWORD *)buf = 0;
    std::vector<float>::assign(v440, 6uLL, buf);
  }
  if (v776)
  {
    v777[0] = v776;
    operator delete(v776);
  }
  v82 = *(_DWORD *)a1;
LABEL_576:
  if (v82)
    goto LABEL_711;
  v81 = *(unsigned __int8 *)(a1 + 313);
  LODWORD(v63) = *(_DWORD *)(a1 + 300);
LABEL_578:
  LODWORD(v794) = 0;
  __C = 0;
  LODWORD(v777[0]) = 0;
  v776 = 0;
  v790 = 0.0;
  __A = 0;
  v788 = 0.0;
  v787 = 0;
  if (v81)
    goto LABEL_619;
  *(_QWORD *)buf = 0;
  v791 = 0.0;
  v786 = 0.0;
  v494 = (v63 + 1);
  if ((_DWORD)v63 == -1)
  {
    v495 = 0;
    v496 = 0;
    v497 = 0;
    v498 = 0;
    v499 = 0;
    v500 = 0;
    v501 = *(_QWORD *)(a1 + 56);
    v502 = 0xFFFFFFFFLL;
    goto LABEL_585;
  }
  v499 = (char *)operator new(8 * v494);
  bzero(v499, 8 * v494);
  v498 = (char *)operator new(8 * v494);
  bzero(v498, 8 * v494);
  v500 = (char *)operator new(8 * v494);
  bzero(v500, 8 * v494);
  if ((_DWORD)v63)
  {
    v501 = *(_QWORD *)(a1 + 56);
    v502 = v63;
    if (v63 < 0x10)
    {
      v503 = 0;
LABEL_593:
      v512 = 3 * v503;
      do
      {
        v513 = 8 * v503;
        *(double *)&v499[v513] = *(float *)(v501 + 4 * v512);
        *(double *)&v498[v513] = *(float *)(v501 + 4 * (v512 + 1));
        *(double *)&v500[v513] = *(float *)(v501 + 4 * (v512 + 2));
        ++v503;
        v512 += 3;
      }
      while (v502 != v503);
      goto LABEL_595;
    }
    v495 = v500;
    v496 = v499;
    v497 = v498;
LABEL_585:
    v503 = 0;
    v504 = 3 * (v63 - 1);
    if (v504 <= 0xFFFFFFFD && (v504 & 0xFFFFFFFF00000000) == 0)
    {
      v503 = 0;
      if ((unint64_t)(v497 - v496) >= 0x20
        && (unint64_t)(v495 - v496) >= 0x20
        && (unint64_t)(v495 - v497) >= 0x20)
      {
        v505 = 0;
        v506 = 0;
        v503 = v502 & 0xFFFFFFFC;
        v507 = v503;
        do
        {
          v508 = (const float *)(v501 + 4 * (v505 & 0xFFFFFFFC));
          v798 = vld3q_f32(v508);
          v509 = (float64x2_t *)&v499[v506];
          *v509 = vcvtq_f64_f32(*(float32x2_t *)v798.val[0].f32);
          v509[1] = vcvt_hight_f64_f32(v798.val[0]);
          v510 = (float64x2_t *)&v498[v506];
          *v510 = vcvtq_f64_f32(*(float32x2_t *)v798.val[1].f32);
          v510[1] = vcvt_hight_f64_f32(v798.val[1]);
          v511 = (float64x2_t *)&v500[v506];
          *v511 = vcvtq_f64_f32(*(float32x2_t *)v798.val[2].f32);
          v511[1] = vcvt_hight_f64_f32(v798.val[2]);
          v506 += 32;
          v505 += 12;
          v507 -= 4;
        }
        while (v507);
        if (v503 == v502)
          goto LABEL_595;
      }
    }
    goto LABEL_593;
  }
LABEL_595:
  vDSP_meanvD((const double *)v499, 1, (double *)buf, (v63 + 1));
  vDSP_meanvD((const double *)v498, 1, &v791, (*(_DWORD *)(a1 + 300) + 1));
  vDSP_meanvD((const double *)v500, 1, &v786, (*(_DWORD *)(a1 + 300) + 1));
  *(double *)buf = -*(double *)buf;
  v791 = -v791;
  v786 = -v786;
  vDSP_vsaddD((const double *)v499, 1, (const double *)buf, (double *)v499, 1, (*(_DWORD *)(a1 + 300) + 1));
  vDSP_vsaddD((const double *)v498, 1, &v791, (double *)v498, 1, (*(_DWORD *)(a1 + 300) + 1));
  vDSP_vsaddD((const double *)v500, 1, &v786, (double *)v500, 1, (*(_DWORD *)(a1 + 300) + 1));
  v517 = (*(_DWORD *)(a1 + 300) + 1);
  if (v517 >= 4)
  {
    v519 = 0;
    v518 = 1;
    while (2)
    {
      for (j = 0; j != v517; ++j)
      {
        if (j != v519)
        {
          v521 = 0;
          while (1)
          {
            if (v519 != v521 && j != v521)
            {
              v522.f64[0] = *(float64_t *)&v499[8 * v519];
              v522.f64[1] = *(float64_t *)&v498[8 * v519];
              v514.f64[0] = *(float64_t *)&v500[8 * v519];
              v523.f64[0] = *(float64_t *)&v499[8 * j];
              v523.f64[1] = *(float64_t *)&v498[8 * j];
              v515.f64[0] = *(float64_t *)&v500[8 * j];
              v524.f64[0] = *(float64_t *)&v499[8 * v521];
              v524.f64[1] = *(float64_t *)&v498[8 * v521];
              v516.f64[0] = *(float64_t *)&v500[8 * v521];
              v525 = vsubq_f64(v524, v522);
              v526 = vsubq_f64(v516, v514);
              v527 = vsubq_f64(v523, v522);
              v528 = vsubq_f64(v515, v514);
              v529 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v526, v527, 1)), v528, v525, 1);
              v528.f64[1] = v527.f64[0];
              v526.f64[1] = v525.f64[0];
              v516 = vmlaq_f64(vnegq_f64(vmulq_f64(v525, v528)), v527, v526);
              v530.f64[0] = v529.f64[0];
              v530.f64[1] = v516.f64[0];
              v515 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v516, 1);
              if (vaddvq_f64(vabsq_f64(v530)) + vabsq_f64(v515).f64[0] > 0.05)
                break;
            }
            if (v517 == ++v521)
              goto LABEL_599;
          }
          v531 = 0;
          v518 = 0;
          *(_QWORD *)&v530.f64[1] = vextq_s8((int8x16_t)v530, (int8x16_t)v530, 8uLL).u64[0];
          v532 = (float64x2_t)vextq_s8((int8x16_t)v516, (int8x16_t)v516, 8uLL);
          v516.f64[1] = v532.f64[0];
          v533 = vmulq_f64(v516, v516);
          v534 = sqrt(vmulq_f64(v529, v529).f64[0] + v533.f64[0] + v533.f64[1]);
          v535 = 1.0 / v534;
          do
          {
            if (v521 != v531 && v519 != v531 && j != v531)
            {
              v536.f64[0] = *(float64_t *)&v499[8 * v531];
              v536.f64[1] = *(float64_t *)&v498[8 * v531];
              v532.f64[0] = *(float64_t *)&v500[8 * v531];
              v532 = vmulq_f64(vsubq_f64(v532, v514), v515);
              if (fabs((vaddvq_f64(vmulq_f64(vsubq_f64(v536, v522), v530)) + v532.f64[0]) * v535) > 0.01)
                break;
            }
            v518 = ++v531 >= v517;
          }
          while (v517 != v531);
          goto LABEL_614;
        }
LABEL_599:
        ;
      }
      if (++v519 != v517)
        continue;
      break;
    }
  }
  else
  {
    v518 = 1;
  }
LABEL_614:
  operator delete(v500);
  operator delete(v498);
  operator delete(v499);
  v537 = *(unsigned int *)(a1 + 300);
  LODWORD(v63) = *(_DWORD *)(a1 + 300);
  if (v518)
  {
    if (v537 < 3)
    {
      vDSP_meanv(*(const float **)(a1 + 56), 3, (float *)&__C, *(unsigned int *)(a1 + 300));
      vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 4), 3, (float *)&__C + 1, *(unsigned int *)(a1 + 300));
      vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 8), 3, (float *)&v794, *(unsigned int *)(a1 + 300));
    }
    else
    {
      v538 = (int64x2_t *)operator new(8 * v537);
      bzero(v538, 8 * v537);
      v539 = *(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56);
      memset(buf, 0, 24);
      v540 = (v539 >> 2) + 3;
      if (v539 >> 2 == -3)
      {
        v541 = 0;
      }
      else
      {
        if (v540 >> 62)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v541 = operator new(4 * v540);
        *(_QWORD *)buf = v541;
        *(_QWORD *)&buf[8] = v541;
        v540 = (unint64_t)&v541[v540];
        *(_QWORD *)&buf[16] = v540;
        bzero(v541, (v539 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      }
      v581 = (unsigned __int128 *)operator new(4 * v537);
      bzero(v581, 4 * v537);
      v582 = *(_QWORD *)(a1 + 8);
      if (v537 > 8
        && ((unint64_t)v581 >= 8 * v537 + v582 - 4 || v582 >= (unint64_t)v581 + 4 * v537))
      {
        v584 = v537 & 7;
        if ((v537 & 7) == 0)
          v584 = 8;
        v583 = v537 - v584;
        v585 = v581 + 1;
        v586 = (const float *)(v582 + 32);
        v587 = (int64x2_t)xmmword_2105F1F50;
        v588 = (int64x2_t)xmmword_2105F1F60;
        v589 = v538 + 2;
        v590 = vdupq_n_s64(4uLL);
        v591 = v583;
        do
        {
          v589[-2] = v588;
          v589[-1] = v587;
          *v589 = vaddq_s64(v588, v590);
          v589[1] = vaddq_s64(v587, v590);
          v589 += 4;
          v592 = v586 - 8;
          v593 = (unsigned __int128)vld2q_f32(v592);
          v594 = (unsigned __int128)vld2q_f32(v586);
          *(v585 - 1) = v593;
          *v585 = v594;
          v595 = vdupq_n_s64(8uLL);
          v587 = vaddq_s64(v587, v595);
          v588 = vaddq_s64(v588, v595);
          v585 += 2;
          v586 += 16;
          v591 -= 8;
        }
        while (v591);
      }
      else
      {
        v583 = 0;
      }
      v596 = (int *)(v582 + 8 * v583);
      do
      {
        v538->i64[v583] = v583;
        v597 = *v596;
        v596 += 2;
        *((_DWORD *)v581 + v583++) = v597;
      }
      while (v537 != v583);
      vDSP_vsorti((const float *)v581, (vDSP_Length *)v538, 0, v537, -1);
      v598 = *(unsigned int *)(a1 + 300);
      if ((_DWORD)v598)
      {
        v599 = 0;
        v600 = *(_QWORD *)(a1 + 56);
        v601 = (uint64_t *)v538;
        do
        {
          v602 = *v601++;
          v603 = (_DWORD *)(v600 + 12 * v602);
          v541[v599] = *v603;
          v541[(v599 + 1)] = v603[1];
          v541[(v599 + 2)] = v603[2];
          v599 += 3;
        }
        while (3 * v598 != v599);
      }
      *(_DWORD *)(v540 - 12) = *v541;
      *(_DWORD *)(v540 - 8) = v541[1];
      *(_DWORD *)(v540 - 4) = v541[2];
      if ((_DWORD)v598)
      {
        v604 = 0;
        v605 = 0.0;
        do
        {
          v605 = v605
               + (float)((float)-(float)((float)(*(float *)&v541[(v604 + 1)]
                                               * *(float *)&v541[(v604 + 3)])
                                       - (float)(*(float *)&v541[(v604 + 4)]
                                               * *(float *)&v541[v604]))
                       * 0.5);
          v604 += 3;
        }
        while (3 * v598 != v604);
        v606 = 0;
        v607 = __C;
        v608 = v541[2];
        v609 = 3 * v598;
        v610 = 1.0 / v605;
        do
        {
          v611.i32[0] = v541[v606];
          v612.i32[0] = v541[(v606 + 3)];
          v612.i32[1] = v541[(v606 + 4)];
          v611.i32[1] = v541[(v606 + 1)];
          v607 = vmla_n_f32(v607, vadd_f32(v612, v611), (float)-(float)((float)(v611.f32[1] * v612.f32[0]) - (float)(v612.f32[1] * v611.f32[0]))* (float)(0.16667 * v610));
          v606 += 3;
        }
        while (v609 != v606);
        __C = v607;
        LODWORD(v794) = v608;
      }
      operator delete(v581);
      operator delete(v541);
      operator delete(v538);
    }
    v613 = *(unsigned int *)(a1 + 300);
    if (v613 <= 1)
    {
      v617 = __C.f32[1];
      LODWORD(v616.f64[0]) = 0;
      v627 = 0.0;
      v626 = 0.0;
    }
    else
    {
      v614 = *(float32x2_t **)(a1 + 56);
      v621 = vcvtq_f64_f32(vadd_f32(*v614, __C));
      v615 = (float64x2_t)vextq_s8((int8x16_t)v621, (int8x16_t)v621, 8uLL);
      v620.f64[0] = (float)(v614[1].f32[0] + *(float *)&v794);
      v620.f64[1] = v621.f64[0];
      v616 = (float64x2_t)vextq_s8((int8x16_t)v620, (int8x16_t)v620, 8uLL);
      v617 = __C.f32[1];
      v618 = 3 * v613;
      v619 = 6;
      v620.f64[1] = v616.f64[0];
      v621.f64[1] = v615.f64[0];
      do
      {
        v622.i32[0] = v614->i32[(v619 - 3)];
        v622.i32[1] = v614->i32[(v619 - 2)];
        v623 = vcvtq_f64_f32(vadd_f32(v622, __C));
        v616.f64[0] = (float)(v614->f32[(v619 - 1)] + *(float *)&v794);
        v624.f64[0] = v616.f64[0];
        v624.f64[1] = v623.f64[0];
        v580.f64[0] = (float)(v614[1].f32[0] + *(float *)&v794);
        v625 = vmlaq_f64(vnegq_f64(vmulq_laneq_f64(v580, v623, 1)), v615, v616).f64[0];
        v616 = vmlaq_f64(vnegq_f64(vmulq_f64(v624, v621)), v620, v623);
        v626 = v625;
        v627 = v616.f64[0];
        *(float *)v616.f64 = v616.f64[1];
        v628 = fabsf(v627);
        v629 = fabsf(v626) < 0.00001 && v628 < 0.00001;
        v630 = fabsf(*(float *)v616.f64);
        v632 = !v629 || v630 >= 0.00001 || v618 == v619;
        v619 += 3;
      }
      while (!v632);
    }
    *(float *)&__A = v626 - __C.f32[0];
    *((float *)&__A + 1) = v627 - v617;
    *(float *)&v787 = -(float)(__C.f32[0] + v626);
    *((float *)&v787 + 1) = -(float)(v617 + v627);
    v790 = *(float *)v616.f64 - *(float *)&v794;
    v788 = -(float)(*(float *)&v794 + *(float *)v616.f64);
    VBAP::lineUnitSphereIntersection((VBAP *)&__A, (const float *)&v787, *(float **)(a1 + 80), v579);
    goto LABEL_711;
  }
LABEL_619:
  vDSP_meanv(*(const float **)(a1 + 56), 3, (float *)&__C, v63);
  vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 4), 3, (float *)&__C + 1, *(unsigned int *)(a1 + 300));
  vDSP_meanv((const float *)(*(_QWORD *)(a1 + 56) + 8), 3, (float *)&v794, *(unsigned int *)(a1 + 300));
  if ((float)((float)(fabsf(__C.f32[1]) + fabsf(__C.f32[0])) + fabsf(*(float *)&v794)) < 0.00003)
  {
    v543 = *(_QWORD *)(a1 + 80);
    if (*(_QWORD *)(a1 + 88) == v543)
      goto LABEL_626;
    goto LABEL_621;
  }
  *(float *)&v776 = -__C.f32[0];
  *((float *)&v776 + 1) = -__C.f32[1];
  *(float *)v777 = -*(float *)&v794;
  VBAP::lineUnitSphereIntersection((VBAP *)&__C, (const float *)&v776, *(float **)(a1 + 80), v542);
  if (*(_BYTE *)(a1 + 313))
  {
    v544 = *(_QWORD *)(a1 + 80);
    v545 = *(_QWORD *)(a1 + 88) - v544;
    if (v545 > 0xB)
    {
      if (v545 != 12)
      {
        v543 = v544 + 12;
LABEL_621:
        *(_QWORD *)(a1 + 88) = v543;
      }
    }
    else
    {
      std::vector<float>::__append((char **)(a1 + 80), 3 - (v545 >> 2));
    }
  }
LABEL_626:
  v546 = *(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80);
  memset(buf, 0, 24);
  if ((unint64_t)v546 < 0xC)
    goto LABEL_711;
  v547 = *(unsigned int *)(a1 + 300);
  if (!(_DWORD)v547)
    goto LABEL_711;
  v548 = 0;
  v549 = 0;
  v550 = 0;
  LODWORD(v551) = 0;
  v552 = (v546 >> 2) / 3uLL;
  v768 = v552;
LABEL_630:
  v553 = 0;
  v556 = 3 * v547;
  do
  {
    v555 = *(_QWORD *)(a1 + 56);
    v554 = *(_QWORD *)(a1 + 80);
    if ((float)((float)(vabds_f32(*(float *)(v554 + 4 * (3 * v551 + 1)), *(float *)(v555 + 4 * (v553 + 1)))+ vabds_f32(*(float *)(v554 + 4 * (3 * v551)), *(float *)(v555 + 4 * v553)))+ vabds_f32(*(float *)(v554 + 4 * (3 * v551 + 2)), *(float *)(v555 + 4 * (v553 + 2)))) < 0.00000035763)
    {
      if (v550 < v549)
      {
        *(_DWORD *)v550 = v551;
        v557 = v550 + 4;
LABEL_653:
        *(_QWORD *)&buf[8] = v557;
        v550 = v557;
        break;
      }
      v558 = (v550 - v548) >> 2;
      v559 = v558 + 1;
      if ((unint64_t)(v558 + 1) >> 62)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      if ((v549 - v548) >> 1 > v559)
        v559 = (v549 - v548) >> 1;
      if ((unint64_t)(v549 - v548) >= 0x7FFFFFFFFFFFFFFCLL)
        v560 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v560 = v559;
      if (v560)
      {
        if (v560 >> 62)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v561 = operator new(4 * v560);
      }
      else
      {
        v561 = 0;
      }
      v562 = &v561[4 * v558];
      *(_DWORD *)v562 = v551;
      v557 = v562 + 4;
      if (v550 != v548)
      {
        v563 = v550 - 4 - v548;
        if (v563 >= 0xBC)
        {
          if (&v561[v550 - v548 - 4 - (v563 & 0xFFFFFFFFFFFFFFFCLL)] > &v561[v550 - v548 - 4])
          {
            v564 = v550;
          }
          else if (&v550[-(v563 & 0xFFFFFFFFFFFFFFFCLL) - 4] > v550 - 4)
          {
            v564 = v550;
          }
          else if ((unint64_t)(v548 - v561) >= 0x20)
          {
            v566 = (v563 >> 2) + 1;
            v564 = &v550[-4 * (v566 & 0x7FFFFFFFFFFFFFF8)];
            v567 = &v561[4 * v558 - 16];
            v568 = v550 - 16;
            v569 = v566 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v570 = *(_OWORD *)v568;
              *(v567 - 1) = *((_OWORD *)v568 - 1);
              *v567 = v570;
              v567 -= 2;
              v568 -= 32;
              v569 -= 8;
            }
            while (v569);
            v562 -= 4 * (v566 & 0x7FFFFFFFFFFFFFF8);
            if (v566 == (v566 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_650;
          }
          else
          {
            v564 = v550;
          }
        }
        else
        {
          v564 = v550;
        }
        do
        {
          v565 = *((_DWORD *)v564 - 1);
          v564 -= 4;
          *((_DWORD *)v562 - 1) = v565;
          v562 -= 4;
        }
        while (v564 != v548);
      }
LABEL_650:
      v549 = &v561[4 * v560];
      *(_QWORD *)buf = v562;
      *(_QWORD *)&buf[8] = v557;
      *(_QWORD *)&buf[16] = v549;
      if (v548)
        operator delete(v548);
      v548 = v562;
      v552 = v768;
      goto LABEL_653;
    }
    v553 += 3;
  }
  while (v556 != v553);
  while (1)
  {
    v551 = (v551 + 1);
    if (v552 <= v551)
      break;
    v547 = *(unsigned int *)(a1 + 300);
    if (*(_DWORD *)(a1 + 300))
      goto LABEL_630;
  }
  v571 = *(int **)buf;
  if (v550 == *(char **)buf)
  {
    if (v550)
      goto LABEL_671;
  }
  else
  {
    v572 = 0;
    v573 = a1;
    v574 = *(_QWORD *)(a1 + 88);
    v575 = (uint64_t)&v550[-*(_QWORD *)buf] >> 2;
    v576 = 1;
    do
    {
      v577 = *(_QWORD *)(v573 + 80) + 12 * v571[v572];
      v578 = v574 - (v577 + 12);
      if (v574 != v577 + 12)
        memmove((void *)(*(_QWORD *)(v573 + 80) + 12 * v571[v572]), (const void *)(v577 + 12), v574 - (v577 + 12));
      v574 = v577 + v578;
      v573 = a1;
      *(_QWORD *)(a1 + 88) = v577 + v578;
      v572 = v576++;
    }
    while (v575 > v572);
LABEL_671:
    operator delete(v571);
  }
LABEL_711:
  v633 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2;
  *(_QWORD *)(a1 + 304) = v633 / 3;
  v634 = *(_QWORD *)(a1 + 128);
  v635 = (*(_QWORD *)(a1 + 136) - v634) >> 2;
  if (v633 / 3 <= v635)
  {
    v636 = a1;
    if (v633 / 3 < v635)
      *(_QWORD *)(a1 + 136) = v634 + 4 * (v633 / 3);
  }
  else
  {
    std::vector<float>::__append((char **)(a1 + 128), v633 / 3 - v635);
    v636 = a1;
    v633 = (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2;
  }
  v639 = *(void **)(v636 + 32);
  v638 = v636 + 32;
  v637 = v639;
  *(_QWORD *)(v638 + 8) = v639;
  v641 = *(char **)(v638 + 24);
  v640 = *(_QWORD *)(v638 + 32);
  v642 = (v640 - (uint64_t)v641) >> 2;
  v643 = v633 + v642;
  if (v633 + v642 > (uint64_t)(*(_QWORD *)(v638 + 16) - (_QWORD)v639) >> 2)
  {
    if (!(v643 >> 62))
    {
      v644 = (char *)operator new(4 * v643);
      *(_QWORD *)(a1 + 32) = v644;
      *(_QWORD *)(a1 + 40) = v644;
      *(_QWORD *)(a1 + 48) = &v644[4 * v643];
      if (v637)
      {
        operator delete(v637);
        v641 = *(char **)(a1 + 56);
        v640 = *(_QWORD *)(a1 + 64);
        v642 = (v640 - (uint64_t)v641) >> 2;
      }
      goto LABEL_719;
    }
LABEL_844:
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  }
LABEL_719:
  std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)v638, v641, v640, v642);
  v652 = *(float **)(a1 + 80);
  v653 = *(float **)(a1 + 88);
  for (*(_QWORD *)buf = v638; v652 != v653; ++v652)
    std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100]((uint64_t *)buf, *v652);
  if (*(_DWORD *)a1 != 1)
    goto LABEL_796;
  v654 = (const float **)v781;
  v655 = v782;
  if (v782 == v781)
    goto LABEL_796;
  v656 = 0;
  v657 = 1;
  while (2)
  {
    v658 = (char *)__p + 24 * v656;
    if (v658[1] - *v658 > 0xCuLL)
    {
LABEL_725:
      v656 = v657++;
      if (0xAAAAAAAAAAAAAAABLL * ((v655 - (char *)v654) >> 3) <= v656)
        goto LABEL_796;
      continue;
    }
    break;
  }
  *(_DWORD *)&buf[8] = 0;
  *(_QWORD *)buf = 0;
  v659 = (_DWORD *)*v658;
  v660 = *(_QWORD *)v638;
  v661 = 3 * *v659;
  *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)v638 + 4 * v661);
  *(_DWORD *)&buf[4] = *(_DWORD *)(v660 + 4 * (v661 + 1));
  *(_DWORD *)&buf[8] = *(_DWORD *)(v660 + 4 * (v661 + 2));
  v662 = 3 * v659[1];
  *(float *)buf = *(float *)buf + *(float *)(v660 + 4 * v662);
  *(float *)&buf[4] = *(float *)&buf[4] + *(float *)(v660 + 4 * (v662 + 1));
  *(float *)&buf[8] = *(float *)&buf[8] + *(float *)(v660 + 4 * (v662 + 2));
  LODWORD(v659) = 3 * v659[2];
  *(float *)buf = *(float *)buf + *(float *)(v660 + 4 * v659);
  *(float *)&buf[4] = *(float *)&buf[4] + *(float *)(v660 + 4 * ((_DWORD)v659 + 1));
  *(float *)&buf[8] = *(float *)&buf[8] + *(float *)(v660 + 4 * ((_DWORD)v659 + 2));
  __C.i32[0] = 0;
  vDSP_dotpr((const float *)buf, 1, v654[3 * v656], 1, (float *)&__C, 3uLL);
  LODWORD(v645) = __C.i32[0];
  if (__C.f32[0] > 0.0)
  {
    v654 = (const float **)v781;
    v655 = v782;
    goto LABEL_725;
  }
  LODWORD(v777[0]) = 0;
  v776 = 0;
  vDSP_meanv(*(const float **)(a1 + 32), 3, (float *)&v776, ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2) / 3uLL);
  vDSP_meanv((const float *)(*(_QWORD *)(a1 + 32) + 4), 3, (float *)&v776 + 1, ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2) / 3uLL);
  vDSP_meanv((const float *)(*(_QWORD *)(a1 + 32) + 8), 3, (float *)v777, ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 2) / 3uLL);
  LODWORD(v786) = 0;
  vDSP_sve((const float *)&v776, 1, (float *)&v786, 3uLL);
  *(float *)&v786 = 1.0 / sqrtf(*(float *)&v786);
  __C = 0;
  v794 = 0;
  v795 = 0;
  vDSP_vsmul((const float *)&v776, 1, (const float *)&v786, (float *)&__C, 1, 3uLL);
  v792 = -*(float *)&v786;
  vDSP_vsmul((const float *)&v776, 1, &v792, (float *)&v794 + 1, 1, 3uLL);
  v791 = 0.0;
  vDSP_distancesq((const float *)&v776, 1, (const float *)&__C, 1, (float *)&v791, 3uLL);
  vDSP_distancesq((const float *)&v776, 1, (const float *)&v794 + 1, 1, (float *)&v791 + 1, 3uLL);
  v646.i32[0] = HIDWORD(v791);
  LODWORD(v645) = LODWORD(v791);
  v790 = 0.0;
  __A = 0;
  v663 = v779;
  if (v779 == __p)
  {
    v666 = 0;
  }
  else
  {
    v664 = 0;
    v665 = 0;
    v666 = 0;
    v667 = 12;
    if (*(float *)&v791 > *((float *)&v791 + 1))
      v667 = 0;
    v668 = (const float *)((char *)&__C + v667);
    v669 = 3.4028e38;
    v663 = (char *)__p;
    do
    {
      *(_DWORD *)&buf[8] = 0;
      *(_QWORD *)buf = 0;
      v670 = &v663[24 * v664];
      v671 = *(_QWORD *)v638;
      v672 = *(_DWORD **)v670;
      v673 = (float)(unint64_t)((uint64_t)(*((_QWORD *)v670 + 1) - *(_QWORD *)v670) >> 2);
      LODWORD(v670) = 3 * **(_DWORD **)v670;
      v674 = 1.0 / v673;
      *(float *)buf = *(float *)(*(_QWORD *)v638 + 4 * v670) * v674;
      *(float *)&buf[4] = *(float *)(v671 + 4 * ((_DWORD)v670 + 1)) * v674;
      *(float *)&buf[8] = *(float *)(v671 + 4 * ((_DWORD)v670 + 2)) * v674;
      LODWORD(v670) = 3 * v672[1];
      *(float *)buf = *(float *)buf + (float)(*(float *)(v671 + 4 * v670) * v674);
      *(float *)&buf[4] = *(float *)&buf[4] + (float)(*(float *)(v671 + 4 * ((_DWORD)v670 + 1)) * v674);
      *(float *)&buf[8] = *(float *)&buf[8] + (float)(*(float *)(v671 + 4 * ((_DWORD)v670 + 2)) * v674);
      LODWORD(v670) = 3 * v672[2];
      *(float *)buf = *(float *)buf + (float)(*(float *)(v671 + 4 * v670) * v674);
      *(float *)&buf[4] = *(float *)&buf[4] + (float)(*(float *)(v671 + 4 * ((_DWORD)v670 + 1)) * v674);
      *(float *)&buf[8] = *(float *)&buf[8] + (float)(*(float *)(v671 + 4 * ((_DWORD)v670 + 2)) * v674);
      vDSP_distancesq(v668, 1, (const float *)buf, 1, (float *)&v791, 3uLL);
      LODWORD(v645) = LODWORD(v791);
      if (*(float *)&v791 < v669)
      {
        __A = *(_QWORD *)buf;
        v790 = *(float *)&buf[8];
        v666 = v665;
        v669 = *(float *)&v791;
      }
      v663 = (char *)__p;
      v664 = ++v665;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((v779 - (_BYTE *)__p) >> 3) > v665);
  }
  v675 = &v663[24 * v666];
  v676 = v675 + 8;
  if (*((_QWORD *)v675 + 1) - *(_QWORD *)v675 > 0xCuLL)
    goto LABEL_796;
  v677 = *(_QWORD *)(a1 + 168);
  v678 = *(_QWORD **)(a1 + 160);
  if ((unint64_t)v678 < v677)
  {
    *v678 = 0;
    v678[1] = 0;
    v678[2] = 0;
    v679 = *(const void **)v675;
    v680 = *v676 - *(_QWORD *)v675;
    if (*v676 != *(_QWORD *)v675)
    {
      if (v680 < 0)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v681 = (char *)operator new(*v676 - *(_QWORD *)v675);
      *v678 = v681;
      v678[1] = v681;
      v682 = &v681[4 * (v680 >> 2)];
      v678[2] = v682;
      memcpy(v681, v679, v680);
      v678[1] = v682;
    }
    v683 = v678 + 3;
    v684 = a1;
    *(_QWORD *)(a1 + 160) = v678 + 3;
    goto LABEL_766;
  }
  v685 = *(_QWORD **)(a1 + 152);
  v686 = 0xAAAAAAAAAAAAAAABLL * (v678 - v685) + 1;
  if (v686 > 0xAAAAAAAAAAAAAAALL)
    std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
  v687 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v677 - (_QWORD)v685) >> 3);
  if (2 * v687 > v686)
    v686 = 2 * v687;
  if (v687 >= 0x555555555555555)
    v688 = 0xAAAAAAAAAAAAAAALL;
  else
    v688 = v686;
  *(_QWORD *)&buf[32] = a1 + 168;
  if (!v688)
  {
    v689 = 0;
    goto LABEL_752;
  }
  if (v688 > 0xAAAAAAAAAAAAAAALL)
    goto LABEL_848;
  v689 = (char *)operator new(24 * v688);
LABEL_752:
  v690 = &v689[8 * (v678 - v685)];
  *(_QWORD *)buf = v689;
  *(_QWORD *)&buf[8] = v690;
  *(_QWORD *)&buf[16] = v690;
  *(_QWORD *)&buf[24] = &v689[24 * v688];
  v746 = *(_QWORD *)&buf[24];
  *((_QWORD *)v690 + 1) = 0;
  v748 = (char **)(v690 + 8);
  *((_QWORD *)v690 + 2) = 0;
  *(_QWORD *)v690 = 0;
  v691 = *v676 - *(_QWORD *)v675;
  if (*v676 != *(_QWORD *)v675)
  {
    if (v691 < 0)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    __srca = *(void **)v675;
    v692 = (char *)operator new(v691);
    *(_QWORD *)v690 = v692;
    *v748 = v692;
    v693 = &v692[4 * (v691 >> 2)];
    *((_QWORD *)v690 + 2) = v693;
    memcpy(v692, __srca, v691);
    *v748 = v693;
  }
  v683 = v690 + 24;
  *(_QWORD *)&buf[16] = v690 + 24;
  if (v678 == v685)
  {
    *(_QWORD *)(a1 + 152) = v690;
    *(_QWORD *)(a1 + 160) = v683;
    *(_QWORD *)(a1 + 168) = v746;
  }
  else
  {
    do
    {
      v694 = v690;
      *((_QWORD *)v690 - 2) = 0;
      *((_QWORD *)v690 - 1) = 0;
      v695 = *(_OWORD *)(v678 - 3);
      v678 -= 3;
      *(_OWORD *)(v690 - 24) = v695;
      v690 -= 24;
      *((_QWORD *)v694 - 1) = v678[2];
      *v678 = 0;
      v678[1] = 0;
      v678[2] = 0;
    }
    while (v678 != v685);
    v678 = *(_QWORD **)(a1 + 152);
    v696 = *(_QWORD **)(a1 + 160);
    *(_QWORD *)(a1 + 152) = v690;
    v697 = *(_QWORD **)&buf[16];
    *(_OWORD *)(a1 + 160) = *(_OWORD *)&buf[16];
    v683 = v697;
    if (v696 != v678)
    {
      v698 = v696;
      do
      {
        v700 = (void *)*(v698 - 3);
        v698 -= 3;
        v699 = v700;
        if (v700)
        {
          *(v696 - 2) = v699;
          operator delete(v699);
        }
        v696 = v698;
      }
      while (v698 != v678);
    }
  }
  if (v678)
    operator delete(v678);
  v684 = a1;
LABEL_766:
  *(_QWORD *)(v684 + 160) = v683;
  memset(buf, 0, 24);
  vDSP_vadd(*((const float **)v781 + 3 * v666), 1, (const float *)&__A, 1, (float *)buf, 1, 3uLL);
  vDSP_vsub(*((const float **)v781 + 3 * v666), 1, (const float *)&__A, 1, (float *)&buf[12], 1, 3uLL);
  VBAP::lineUnitSphereIntersection((VBAP *)buf, (const float *)&buf[12], (float *)&__C, v701);
  vDSP_distancesq((const float *)&v776, 1, (const float *)&__C, 1, (float *)&v791, 3uLL);
  vDSP_distancesq((const float *)&v776, 1, (const float *)&v794 + 1, 1, (float *)&v791 + 1, 3uLL);
  v702 = (_QWORD *)a1;
  if (*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80) > 0xFFFFFFFFFFFFFFF3)
  {
    v703 = *(_QWORD *)(a1 + 88) + 12;
    *(_QWORD *)(a1 + 88) = v703;
  }
  else
  {
    std::vector<float>::__append((char **)(a1 + 80), 3uLL);
    v702 = (_QWORD *)a1;
    v703 = *(_QWORD *)(a1 + 88);
  }
  v704 = 12;
  if (*((float *)&v791 + 1) <= *(float *)&v791)
    v704 = 0;
  v705 = (char *)&__C + v704;
  v706 = v703;
  v707 = *(_QWORD *)v705;
  *(_DWORD *)(v706 - 4) = *((_DWORD *)v705 + 2);
  *(_QWORD *)(v706 - 12) = v707;
  v709 = (char *)v702[14];
  v708 = v702[15];
  if ((unint64_t)v709 < v708)
  {
    *(_DWORD *)v709 = 1065353216;
    v710 = v709 + 4;
    goto LABEL_792;
  }
  v711 = (char *)v702[13];
  v712 = (v709 - v711) >> 2;
  v713 = v712 + 1;
  if ((unint64_t)(v712 + 1) >> 62)
    goto LABEL_844;
  v714 = v708 - (_QWORD)v711;
  if (v714 >> 1 > v713)
    v713 = v714 >> 1;
  if ((unint64_t)v714 >= 0x7FFFFFFFFFFFFFFCLL)
    v715 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v715 = v713;
  if (v715)
  {
    if (!(v715 >> 62))
    {
      v716 = operator new(4 * v715);
      goto LABEL_783;
    }
LABEL_848:
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  v716 = 0;
LABEL_783:
  v717 = &v716[4 * v712];
  v718 = &v716[4 * v715];
  *v717 = 1065353216;
  v710 = v717 + 1;
  if (v709 != v711)
  {
    v719 = v709 - v711 - 4;
    if (v719 < 0x2C)
      goto LABEL_858;
    if ((unint64_t)(v711 - v716) < 0x20)
      goto LABEL_858;
    v720 = (v719 >> 2) + 1;
    v721 = &v716[4 * v712 - 16];
    v722 = v709 - 16;
    v723 = v720 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v724 = *(_OWORD *)v722;
      *(v721 - 1) = *((_OWORD *)v722 - 1);
      *v721 = v724;
      v721 -= 2;
      v722 -= 32;
      v723 -= 8;
    }
    while (v723);
    v717 -= v720 & 0x7FFFFFFFFFFFFFF8;
    v709 -= 4 * (v720 & 0x7FFFFFFFFFFFFFF8);
    if (v720 != (v720 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_858:
      do
      {
        v725 = *((_DWORD *)v709 - 1);
        v709 -= 4;
        *--v717 = v725;
      }
      while (v709 != v711);
    }
  }
  *(_QWORD *)(a1 + 104) = v717;
  *(_QWORD *)(a1 + 112) = v710;
  *(_QWORD *)(a1 + 120) = v718;
  if (v711)
    operator delete(v711);
LABEL_792:
  *(_QWORD *)(a1 + 112) = v710;
  ++*(_QWORD *)(a1 + 304);
  v726 = *(_QWORD *)(a1 + 128);
  if (*(_QWORD *)(a1 + 136) - v726 == -4)
    *(_QWORD *)(a1 + 136) = v726;
  else
    std::vector<float>::__append((char **)(a1 + 128), 1uLL);
  v727 = *(_QWORD *)(a1 + 88);
  v787 = v638;
  v728 = *(float *)(v727 - 12);
  v727 -= 12;
  std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](&v787, v728);
  std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](&v787, *(float *)(v727 + 4));
  std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](&v787, *(float *)(v727 + 8));
LABEL_796:
  v42 = VBAP::delaunayTriangulation(a1, *(const float **)(a1 + 32), *(_QWORD *)(a1 + 40), a4, a5, v645, v646, v647, v648, v649, v650, v651);
  v55 = v753;
  if ((_DWORD)v42)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "VBAP.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 198;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "initialize";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 198;
      v87 = MEMORY[0x24BDACB70];
      v88 = "%25s:%-5d CADSPUtility:%s:%d: VBAP error; Delaunay triangulation issue";
LABEL_799:
      _os_log_impl(&dword_210570000, v87, OS_LOG_TYPE_ERROR, v88, buf, 0x22u);
    }
    goto LABEL_800;
  }
  v729 = 1;
  v730 = (char *)__p;
  if (__p)
  {
LABEL_803:
    v731 = v779;
    v732 = v730;
    if (v779 != v730)
    {
      v733 = v779;
      do
      {
        v735 = (void *)*((_QWORD *)v733 - 3);
        v733 -= 24;
        v734 = v735;
        if (v735)
        {
          *((_QWORD *)v731 - 2) = v734;
          operator delete(v734);
        }
        v731 = v733;
      }
      while (v733 != v730);
      v732 = __p;
    }
    v779 = v730;
    operator delete(v732);
  }
LABEL_810:
  v736 = (char *)v781;
  if (v781)
  {
    v737 = v782;
    v738 = v781;
    if (v782 != v781)
    {
      v739 = v782;
      do
      {
        v741 = (void *)*((_QWORD *)v739 - 3);
        v739 -= 24;
        v740 = v741;
        if (v741)
        {
          *((_QWORD *)v737 - 2) = v740;
          operator delete(v740);
        }
        v737 = v739;
      }
      while (v739 != v736);
      v738 = v781;
    }
    v782 = v736;
    operator delete(v738);
  }
  if (v758)
    operator delete(v758);
  if (v760)
    operator delete(v760);
  if (v771)
    operator delete(v771);
  if (v55)
    operator delete(v55);
  if ((v729 & 1) != 0)
LABEL_827:
    v42 = 0;
LABEL_828:
  if (v773)
    operator delete(v773);
  if (v775)
    operator delete(v775);
  if (v20)
    operator delete(v20);
  return v42;
}

void sub_2105C12DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,void *a23,uint64_t a24,void *a25,void *a26,void *a27,void *__p,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,uint64_t a33,void *a34)
{
  void *v34;
  uint64_t v35;

  std::vector<std::vector<unsigned int>>::~vector[abi:ne180100]((void **)(v35 - 176));
  if (__p)
    operator delete(__p);
  std::vector<std::vector<unsigned int>>::~vector[abi:ne180100](&a31);
  std::vector<std::vector<unsigned int>>::~vector[abi:ne180100](&a34);
  if (a20)
  {
    operator delete(a20);
    if (!a21)
    {
LABEL_5:
      if (!a25)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  else if (!a21)
  {
    goto LABEL_5;
  }
  operator delete(a21);
  if (!a25)
  {
LABEL_7:
    if (a16)
      operator delete(a16);
    if (a26)
    {
      operator delete(a26);
      if (!a27)
      {
LABEL_11:
        if (!v34)
          goto LABEL_12;
        goto LABEL_18;
      }
    }
    else if (!a27)
    {
      goto LABEL_11;
    }
    operator delete(a27);
    if (!v34)
LABEL_12:
      _Unwind_Resume(a1);
LABEL_18:
    operator delete(v34);
    _Unwind_Resume(a1);
  }
LABEL_6:
  operator delete(a25);
  goto LABEL_7;
}

void **std::vector<std::list<int>>::~vector[abi:ne180100](void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;

  v2 = (uint64_t *)*a1;
  if (*a1)
  {
    v3 = (uint64_t *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 3;
        if (*(v3 - 1))
        {
          v7 = *(v3 - 3);
          v6 = (uint64_t *)*(v3 - 2);
          v8 = *v6;
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
          **(_QWORD **)(v7 + 8) = v8;
          *(v3 - 1) = 0;
          if (v6 != v5)
          {
            do
            {
              v9 = (uint64_t *)v6[1];
              operator delete(v6);
              v6 = v9;
            }
            while (v9 != v5);
          }
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void **std::vector<std::vector<unsigned int>>::~vector[abi:ne180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

BOOL VBAP::find_duplicate_vertex(VBAP *this, const float *a2, const float *a3, const float *a4)
{
  size_t v8;
  float *v9;
  unint64_t v10;
  unsigned int v11;
  vDSP_Length v12;
  _BOOL8 result;
  _BYTE v15[4];
  float __C;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  MEMORY[0x24BDAC7A8](this);
  v9 = (float *)&v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (v10 < 2)
    return 0;
  bzero(&v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)], v8);
  v11 = 2;
  v12 = 1;
  do
  {
    vDSP_vsmul((const float *)this, 1, (const float *)this + v12, v9, 1, v12);
    vDSP_vsma(a2, 1, &a2[v12], v9, 1, v9, 1, v12);
    vDSP_vsma(a3, 1, &a3[v12], v9, 1, v9, 1, v12);
    __C = 0.0;
    vDSP_maxv(v9, 1, &__C, v12);
    result = __C > 1.0;
    v12 = v11++;
  }
  while (__C <= 1.0 && v12 < (unint64_t)a4);
  return result;
}

uint64_t VBAP::delaunayTriangulation(uint64_t a1, const float *a2, uint64_t a3, char **a4, uint64_t *a5, double a6, float32x4_t a7, __n128 a8, double a9, float64x2_t a10, double a11, float64x2_t a12)
{
  uint64_t v15;
  unint64_t v16;
  size_t v17;
  double *v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  const float *v22;
  float64x2_t *v23;
  float64x2_t *v24;
  float64x2_t *v25;
  unint64_t v26;
  float32x4_t v27;
  unint64_t v28;
  double *v29;
  double *v30;
  double *v31;
  float *v32;
  float v33;
  float v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  float64x2_t v39;
  float64x2_t v40;
  float64x2_t v41;
  float64x2_t v42;
  float64x2_t v43;
  float64x2_t v44;
  float64x2_t v45;
  float64x2_t v46;
  float64x2_t v47;
  float64x2_t v48;
  uint64_t v49;
  BOOL v50;
  float64x2_t v51;
  float64x2_t v52;
  float v53;
  double v54;
  float64x2_t v55;
  NSObject *v56;
  uint64_t v57;
  double *v58;
  double *v59;
  char *v61;
  char *v62;
  int64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  char **v77;
  uint64_t v78;
  uint64_t v79;
  CDelaunayTriangles3D *v80;
  CDelaunayTriangles3D *v81;
  uint64_t v82;
  uint64_t v83;
  CDelaunayTriangles3D *v84;
  _QWORD *v85;
  unint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  _BYTE *v95;
  unint64_t v96;
  char *v97;
  void *v98;
  char *v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  double v110;
  double v111;
  double v112;
  int v114;
  _QWORD *v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int one_delaunay3;
  int v120;
  unint64_t v121;
  _DWORD *v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  CDelaunayTriangles3D *v132;
  CDelaunayTriangles3D *v133;
  int *v134;
  unsigned int v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  unint64_t v153;
  int v154;
  unint64_t v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  char *v160;
  _DWORD *v161;
  char *v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  _BYTE *v168;
  unsigned int *v169;
  unint64_t v170;
  uint64_t v171;
  float64x2_t *v172;
  float64x2_t *v173;
  uint64_t v174;
  unsigned int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  _BYTE *v181;
  char *v182;
  char *v183;
  unint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  int64_t v191;
  int64_t v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  _BYTE *v196;
  char *v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  float64x2_t *v201;
  float64x2_t *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  float64x2_t *v206;
  float64x2_t *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  char *v211;
  unint64_t v212;
  unsigned int v213;
  unint64_t v214;
  unsigned int *v215;
  uint64_t v216;
  int v217;
  unint64_t v218;
  int v219;
  unsigned int v220;
  unint64_t v221;
  int v222;
  int32x2_t v223;
  uint64_t v224;
  uint64_t v225;
  float64x2_t v226;
  char *v227;
  uint64_t v228;
  float64x2_t v229;
  uint64_t v230;
  float64x2_t v231;
  float64x2_t v232;
  unsigned int v233;
  float64x2_t v234;
  unsigned int v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  char *v241;
  unint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  char *v247;
  int64_t v248;
  size_t v249;
  double *v250;
  uint64_t v251;
  unint64_t v252;
  double *v253;
  unint64_t v254;
  float64x2_t v255;
  float64x2_t v256;
  __int128 v257;
  float64x2_t v258;
  float64x2_t v259;
  __int128 v260;
  float64x2_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  double v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  unint64_t v269;
  uint64_t v270;
  float64x2_t v271;
  uint64_t v272;
  uint64_t v273;
  float64x2_t v274;
  float64x2_t v275;
  float64x2_t v276;
  float64x2_t v277;
  void *v278;
  uint64_t v279;
  int v280;
  uint64_t *v281;
  int v282;
  unint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  uint64_t *v288;
  void *v289;
  uint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t *v294;
  uint64_t *v295;
  uint64_t *v296;
  uint64_t *v297;
  uint64_t *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  unint64_t v302;
  int v303;
  int v304;
  char v305;
  char *v306;
  int64_t v307;
  float64x2_t v308;
  uint64_t v309;
  uint64_t v310;
  float64x2_t v311;
  float64x2_t v312;
  float64x2_t v313;
  float64x2_t v314;
  float64x2_t v315;
  float64x2_t v316;
  float64x2_t v317;
  float64x2_t v318;
  uint64_t v319;
  float64x2_t v320;
  float64x2_t v321;
  float64x2_t v322;
  float64x2_t v323;
  float64x2_t v324;
  float64x2_t v327;
  float64x2_t v328;
  float64x2_t v329;
  float64x2_t v330;
  float64x2_t v331;
  unsigned int v332;
  uint64_t v333;
  float64x2_t v334;
  float64x2_t v335;
  float64x2_t v336;
  float64x2_t v337;
  unint64_t v338;
  float64x2_t v339;
  unint64_t v340;
  float64x2_t v341;
  float64x2_t *v342;
  float64x2_t v343;
  float64x2_t v344;
  float64x2_t v345;
  float64x2_t *v346;
  float64x2_t v347;
  float64x2_t v348;
  float64x2_t v349;
  float64x2_t v350;
  float64x2_t v351;
  float64x2_t v352;
  float64x2_t v353;
  float64x2_t v354;
  unint64_t v355;
  unint64_t v356;
  unint64_t v357;
  float64x2_t v359;
  float64x2_t v360;
  float64x2_t v361;
  float64x2_t v362;
  float64x2_t v363;
  float64x2_t v364;
  float64x2_t v365;
  float64x2_t v366;
  float64x2_t v367;
  float64x2_t v368;
  float64x2_t v369;
  float64x2_t v370;
  float64x2_t v371;
  unint64_t v372;
  float64x2_t v373;
  float64x2_t v374;
  float64x2_t v375;
  float64x2_t v376;
  double v377;
  float64x2_t v378;
  unint64_t v379;
  uint64_t *v380;
  uint64_t v381;
  unint64_t v382;
  uint64_t *v383;
  uint64_t v384;
  unsigned int v385;
  unsigned int v386;
  unsigned int v387;
  uint64_t v388;
  int subtriangle_containment;
  uint64_t v390;
  float64x2_t v391;
  int v392;
  double *v393;
  int v394;
  uint64_t v395;
  float64x2_t v396;
  float64x2_t v397;
  int v398;
  _QWORD *v399;
  unint64_t v400;
  _QWORD *v401;
  _DWORD *v403;
  void **v404;
  int v405;
  int v406;
  int v407;
  uint64_t *v408;
  int v409;
  int v410;
  int v411;
  _BOOL4 v412;
  _BOOL4 v413;
  BOOL v414;
  char v415;
  uint64_t v416;
  _DWORD *v417;
  uint64_t *v418;
  uint64_t v419;
  _QWORD *v420;
  uint64_t v421;
  uint64_t v422;
  _QWORD *v423;
  _DWORD *v424;
  _QWORD *v425;
  int v426;
  uint64_t v427;
  _DWORD *v428;
  uint64_t *v429;
  uint64_t v430;
  _QWORD *v431;
  uint64_t v432;
  int v433;
  _BYTE *v434;
  uint64_t v435;
  _QWORD *v436;
  BOOL v437;
  uint64_t v438;
  _QWORD *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  _BYTE *v445;
  int64x2_t v446;
  int64x2_t v447;
  int64x2_t v448;
  uint64_t v449;
  float64x2_t v450;
  float64x2_t v451;
  int64x2_t v452;
  float64x2_t v453;
  int64x2_t v454;
  int64x2_t v455;
  int8x16_t v456;
  int v457;
  float64x2_t *v458;
  float64x2_t v459;
  float64x2_t v460;
  float64x2_t v461;
  float64x2_t v462;
  float64x2_t v463;
  int64x2_t v464;
  int64x2_t v465;
  int64x2_t v466;
  float64x2_t v467;
  float64x2_t v468;
  float64x2_t v469;
  float64x2_t v470;
  float64x2_t v471;
  int8x16_t v472;
  float64x2_t v473;
  double v474;
  float64x2_t v475;
  float64x2_t v476;
  float64x2_t v477;
  double v478;
  float64x2_t v479;
  float64x2_t v480;
  float64x2_t v481;
  double v482;
  float64x2_t v483;
  float64x2_t v484;
  float64x2_t v485;
  double v486;
  float64x2_t v487;
  float64x2_t v488;
  float64x2_t v489;
  float64x2_t v490;
  double v491;
  float64x2_t v492;
  float64x2_t v493;
  float64x2_t v494;
  double v495;
  float64x2_t v496;
  float64x2_t v497;
  float64x2_t v498;
  double v499;
  float64x2_t v500;
  float64x2_t v501;
  float64x2_t v502;
  double v503;
  float64x2_t v504;
  float64x2_t v505;
  float64x2_t v506;
  double v507;
  int32x2_t v508;
  float64x2_t v509;
  float64x2_t v510;
  float64x2_t v511;
  float64x2_t v512;
  float64x2_t v513;
  float64x2_t v514;
  float64x2_t v515;
  float64x2_t v516;
  float64x2_t v517;
  float64x2_t v518;
  BOOL v519;
  BOOL v520;
  int8x16_t v521;
  int8x16_t v522;
  unint64_t v523;
  int8x16_t v524;
  float64x2_t v525;
  float64x2_t v526;
  float64x2_t v527;
  float64x2_t v528;
  float64x2_t v529;
  double v530;
  float64x2_t v531;
  BOOL v532;
  _DWORD *v534;
  uint64_t *v535;
  uint64_t v536;
  _QWORD *v537;
  _DWORD *v538;
  uint64_t v539;
  _QWORD *v540;
  void **v541;
  _QWORD **v542;
  uint64_t v543;
  void **v544;
  uint64_t *v545;
  uint64_t *v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t *v549;
  _QWORD *v550;
  uint64_t *v551;
  uint64_t *v552;
  uint64_t *v553;
  uint64_t *v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t *v557;
  unint64_t v558;
  uint64_t v559;
  unint64_t v560;
  char *v561;
  unsigned int v562;
  int v563;
  int v564;
  int v565;
  unint64_t v566;
  float64x2_t v567;
  unint64_t v568;
  unint64_t v569;
  uint64_t v570;
  int v571;
  unsigned int v572;
  unsigned int v573;
  uint64_t *v574;
  float64x2_t v575;
  float64x2_t v576;
  unint64_t v577;
  double *v578;
  float64x2_t v579;
  float64x2_t v580;
  float64x2_t v581;
  float64x2_t v582;
  float64x2_t v583;
  double v584;
  float64x2_t v586;
  double v587;
  int64x2_t v588;
  float64x2_t v589;
  float64x2_t v590;
  int64x2_t v591;
  double v592;
  double v593;
  int64x2_t v594;
  char *v595;
  float64x2_t v596;
  uint64_t v597;
  double v598;
  float64x2_t v599;
  double *v600;
  double v601;
  double v602;
  unint64_t v603;
  double v604;
  uint64_t *v605;
  float64x2_t v606;
  int64x2_t v607;
  double *v608;
  double *__p;
  uint64_t v610;
  float64x2_t v611;
  void *v612[2];
  unint64_t v613;
  float64x2_t v614;
  float64_t v615;
  float64x2_t v616;
  float64_t v617;
  double *v618;
  char *v619;
  double *v620;
  _DWORD *v621;
  _QWORD *v622;
  uint64_t v623;
  _BYTE buf[48];
  __int128 v625;
  float64x2_t v626;
  __int128 v627;
  uint64_t v628;

  v628 = *MEMORY[0x24BDAC8D0];
  v15 = ((unint64_t)((a3 - (uint64_t)a2) >> 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
  v16 = ((a3 - (uint64_t)a2) >> 2) / 3uLL;
  v619 = 0;
  v618 = 0;
  v620 = 0;
  if (v16 << 32)
  {
    if (((v16 << 32) & 0x8000000000000000) != 0)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v17 = (8 * v16) & 0x7FFFFFFFFLL;
    v18 = (double *)operator new(v17);
    v618 = v18;
    v620 = &v18[(int)(v15 >> 1)];
    bzero(v18, v17);
    v619 = (char *)v18 + v17;
    v19 = (double *)operator new(v17);
    bzero(v19, v17);
    __p = (double *)operator new(v17);
    bzero(__p, v17);
    v20 = (v16 - 1);
    if ((int)v16 < 1)
      goto LABEL_16;
  }
  else
  {
    v19 = 0;
    __p = 0;
    v18 = 0;
    v20 = (v16 - 1);
    if ((int)v16 < 1)
      goto LABEL_16;
  }
  if (v16 >= 4uLL)
  {
    v21 = 0;
    if ((unint64_t)((char *)v19 - (char *)v18) >= 0x20
      && (unint64_t)((char *)__p - (char *)v18) >= 0x20
      && (unint64_t)((char *)__p - (char *)v19) >= 0x20)
    {
      v21 = v16 - (v16 & 3);
      v22 = a2;
      v23 = (float64x2_t *)v18;
      v24 = (float64x2_t *)v19;
      v25 = (float64x2_t *)__p;
      v26 = v21;
      do
      {
        *(float32x4x3_t *)(&a7 - 1) = vld3q_f32(v22);
        v22 += 12;
        *v23 = vcvtq_f64_f32(*(float32x2_t *)v27.f32);
        v23[1] = vcvt_hight_f64_f32(v27);
        v23 += 2;
        a10 = vcvt_hight_f64_f32(a7);
        *v24 = vcvtq_f64_f32(*(float32x2_t *)a7.f32);
        v24[1] = a10;
        v24 += 2;
        *v25 = vcvtq_f64_f32((float32x2_t)a8.n128_u64[0]);
        v25[1] = vcvt_hight_f64_f32((float32x4_t)a8);
        v25 += 2;
        v26 -= 4;
      }
      while (v26);
      if ((v16 & 3) == 0)
        goto LABEL_16;
    }
  }
  else
  {
    v21 = 0;
  }
  v28 = v16 - v21;
  v29 = &__p[v21];
  v30 = &v19[v21];
  v31 = &v18[v21];
  v32 = (float *)&a2[3 * v21 + 1];
  do
  {
    *v31++ = *(v32 - 1);
    v33 = *v32;
    v34 = v32[1];
    v32 += 3;
    *v30++ = v33;
    *v29++ = v34;
    --v28;
  }
  while (v28);
LABEL_16:
  v608 = v19;
  if (v16 < 4)
    goto LABEL_35;
  v35 = 0;
  v36 = v16;
LABEL_18:
  v37 = 0;
  while (v37 == v35)
  {
LABEL_19:
    if (++v37 == v16)
    {
      if (++v35 == v16)
        goto LABEL_35;
      goto LABEL_18;
    }
  }
  v38 = 0;
  while (1)
  {
    if (v35 != v38 && v37 != v38)
    {
      v39.f64[0] = v18[v35];
      v39.f64[1] = v19[v35];
      *(double *)a7.i64 = __p[v35];
      v40.f64[0] = v18[v37];
      v40.f64[1] = v19[v37];
      a10.f64[0] = __p[v37];
      v41.f64[0] = v18[v38];
      v41.f64[1] = v19[v38];
      a12.f64[0] = __p[v38];
      v42 = vsubq_f64(v41, v39);
      v43 = vsubq_f64(a12, (float64x2_t)a7);
      v44 = vsubq_f64(v40, v39);
      v45 = vsubq_f64(a10, (float64x2_t)a7);
      v46 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v43, v44, 1)), v45, v42, 1);
      v45.f64[1] = v44.f64[0];
      v43.f64[1] = v42.f64[0];
      a12 = vmlaq_f64(vnegq_f64(vmulq_f64(v42, v45)), v44, v43);
      v47.f64[0] = v46.f64[0];
      v47.f64[1] = a12.f64[0];
      a10 = (float64x2_t)vdupq_laneq_s64((int64x2_t)a12, 1);
      v48 = vabsq_f64(a10);
      if (vaddvq_f64(vabsq_f64(v47)) + v48.f64[0] > 0.05)
        break;
    }
    if (v16 == ++v38)
      goto LABEL_19;
  }
  v49 = 0;
  v50 = 0;
  *(_QWORD *)&v47.f64[1] = vextq_s8((int8x16_t)v47, (int8x16_t)v47, 8uLL).u64[0];
  v51 = (float64x2_t)vextq_s8((int8x16_t)a12, (int8x16_t)a12, 8uLL);
  a12.f64[1] = v51.f64[0];
  v52 = vmulq_f64(a12, a12);
  v53 = sqrt(vmulq_f64(v46, v46).f64[0] + v52.f64[0] + v52.f64[1]);
  v54 = 1.0 / v53;
  do
  {
    if (v38 != v49 && v35 != v49 && v37 != v49)
    {
      v55.f64[0] = v18[v49];
      v55.f64[1] = v19[v49];
      v51.f64[0] = __p[v49];
      v52 = vmulq_f64(vsubq_f64(v55, v39), v47);
      v51 = vmulq_f64(vsubq_f64(v51, (float64x2_t)a7), a10);
      if (fabs((vaddvq_f64(v52) + v51.f64[0]) * v54) > 0.01)
        break;
    }
    v50 = ++v49 >= (unint64_t)v16;
  }
  while (v16 != v49);
  if (v50)
  {
LABEL_35:
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
LABEL_38:
      v57 = 4294967246;
      goto LABEL_39;
    }
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "VBAP.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 779;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "delaunayTriangulation";
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = 779;
    v56 = MEMORY[0x24BDACB70];
LABEL_37:
    _os_log_impl(&dword_210570000, v56, OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: Delaunay Triangulation Error: Convex hull could not be created. Check for overlapping speakers. ", buf, 0x22u);
    goto LABEL_38;
  }
  v605 = a5;
  v578 = v18;
  v62 = *a4;
  v61 = a4[1];
  v63 = v61 - *a4;
  v64 = v63 >> 2;
  v65 = 2 * (int)v16 - 4;
  v603 = (v63 >> 2) / 3uLL;
  v610 = v65;
  if (v603 == v65)
  {
    _ZF = a1 + 224 == (_QWORD)a4;
    v71 = a1;
    if (_ZF)
      goto LABEL_139;
    v72 = *(_QWORD *)(a1 + 240);
    v73 = *(char **)(a1 + 224);
    if (v64 > (v72 - (uint64_t)v73) >> 2)
    {
      if (v73)
      {
        *(_QWORD *)(a1 + 232) = v73;
        operator delete(v73);
        v72 = 0;
        *(_QWORD *)(a1 + 224) = 0;
        *(_QWORD *)(a1 + 232) = 0;
        *(_QWORD *)(a1 + 240) = 0;
      }
      if (v63 < 0)
        goto LABEL_485;
      v74 = v72 >> 1;
      if (v72 >> 1 <= v64)
        v74 = v63 >> 2;
      v75 = (unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v74;
      if (v75 >> 62)
LABEL_485:
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v76 = (char *)operator new(4 * v75);
      v73 = v76;
      *(_QWORD *)(a1 + 232) = v76;
      v77 = (char **)(a1 + 232);
      *(_QWORD *)(a1 + 224) = v76;
      *(_QWORD *)(a1 + 240) = &v76[4 * v75];
      if (v61 != v62)
        memcpy(v76, v62, v63);
      goto LABEL_92;
    }
    v77 = (char **)(a1 + 232);
    v95 = *(_BYTE **)(a1 + 232);
    v96 = (v95 - v73) >> 2;
    if (v96 >= v64)
    {
      if (v61 == v62)
      {
LABEL_92:
        *v77 = &v73[v63];
        v71 = a1;
        goto LABEL_139;
      }
      v98 = *(void **)(a1 + 224);
      v99 = v62;
    }
    else
    {
      v97 = &v62[4 * v96];
      if (v95 != v73)
      {
        memmove(*(void **)(a1 + 224), v62, v95 - v73);
        v73 = *v77;
      }
      v63 = v61 - v97;
      if (v61 == v97)
        goto LABEL_92;
      v98 = v73;
      v99 = v97;
    }
    memmove(v98, v99, v63);
    goto LABEL_92;
  }
  v66 = (_QWORD *)a1;
  v67 = (3 * v65);
  v68 = *(char **)(a1 + 224);
  v69 = *(char **)(a1 + 232);
  v70 = (v69 - v68) >> 2;
  v18 = v578;
  if (v67 <= v70)
  {
    if (v67 < v70)
    {
      v69 = &v68[4 * v67];
      *(_QWORD *)(a1 + 232) = v69;
    }
  }
  else
  {
    std::vector<int>::__append((std::vector<unsigned int> *)(a1 + 224), v67 - v70);
    v66 = (_QWORD *)a1;
    v68 = *(char **)(a1 + 224);
    v69 = *(char **)(a1 + 232);
  }
  v78 = a1 + 224;
  v79 = v69 - v68;
  if (v79 >= 1)
  {
    bzero(v68, 4 * (((unint64_t)v79 >> 2) - ((unint64_t)v79 > 3)) + 4);
    v78 = a1 + 224;
  }
  v80 = (CDelaunayTriangles3D *)(v78 - 48);
  if (v66[24])
  {
    v82 = v66[22];
    v81 = (CDelaunayTriangles3D *)v66[23];
    v83 = *(_QWORD *)v81;
    *(_QWORD *)(v83 + 8) = *(_QWORD *)(v82 + 8);
    **(_QWORD **)(v82 + 8) = v83;
    v66[24] = 0;
    if (v81 != v80)
    {
      do
      {
        v84 = (CDelaunayTriangles3D *)*((_QWORD *)v81 + 1);
        operator delete(v81);
        v81 = v84;
      }
      while (v84 != v80);
    }
  }
  v85 = v66 + 25;
  v86 = v66[27];
  v87 = v86 - v36;
  if (v86 <= v36)
  {
    if (v86 < v36)
    {
      v89 = operator new(0x18uLL);
      v90 = v89;
      *v89 = 0;
      v89[1] = 0;
      *((_DWORD *)v89 + 4) = 0;
      if (v36 + ~v86)
      {
        v91 = v36 - v86;
        v92 = v87 + 1;
        v93 = v89;
        v66 = (_QWORD *)a1;
        do
        {
          v89 = operator new(0x18uLL);
          *v89 = v93;
          v89[1] = 0;
          v93[1] = v89;
          v93 = v89;
          *((_DWORD *)v89 + 4) = 0;
        }
        while (!__CFADD__(v92++, 1));
        v18 = v578;
      }
      else
      {
        v91 = 1;
        v66 = (_QWORD *)a1;
      }
      v89[1] = v85;
      v105 = v66[25];
      *v90 = v105;
      *(_QWORD *)(v105 + 8) = v90;
      v66[25] = v89;
      v66[27] = v91 + v86;
    }
  }
  else
  {
    if (v36 <= v86 >> 1)
    {
      v88 = (_QWORD *)v66[26];
      v100 = v36 + 1;
      do
      {
        v88 = (_QWORD *)v88[1];
        --v100;
      }
      while (v100 > 1);
    }
    else if (v87 < 1)
    {
      v101 = v36 - v86 + 1;
      v88 = v66 + 25;
      do
      {
        v88 = (_QWORD *)v88[1];
        --v101;
      }
      while (v101 > 1);
    }
    else
    {
      v88 = v66 + 25;
      do
      {
        v88 = (_QWORD *)*v88;
        --v87;
      }
      while (v87);
    }
    if (v88 != v85)
    {
      v102 = *v85;
      v103 = (_QWORD *)*v88;
      v103[1] = *(_QWORD *)(*v85 + 8);
      **(_QWORD **)(v102 + 8) = v103;
      do
      {
        v104 = (_QWORD *)v88[1];
        --v66[27];
        operator delete(v88);
        v88 = v104;
      }
      while (v104 != v85);
    }
  }
  v106 = v66[26];
  if ((_QWORD *)v106 != v85)
  {
    v107 = 0;
    do
    {
      *(_DWORD *)(v106 + 16) = v107;
      v106 = *(_QWORD *)(v106 + 8);
      ++v107;
    }
    while ((_QWORD *)v106 != v85);
  }
  if ((int)v20 < 2)
  {
    v114 = 1;
  }
  else
  {
    v108 = 0;
    v109 = 0;
    v110 = (*v19 - v19[1]) * (*v19 - v19[1]) + (*v18 - v18[1]) * (*v18 - v18[1]) + (*__p - __p[1]) * (*__p - __p[1]);
    do
    {
      v111 = *__p - __p[v108 + 2];
      v112 = (*v18 - v18[v108 + 2]) * (*v18 - v18[v108 + 2])
           + (*v19 - v19[v108 + 2]) * (*v19 - v19[v108 + 2])
           + v111 * v111;
      _NF = v112 < v110;
      v110 = fmin(v112, v110);
      ++v108;
      if (_NF)
        v109 = v108;
    }
    while (v20 - 1 != v108);
    v114 = v109 + 1;
  }
  LODWORD(v612[0]) = 0;
  HIDWORD(v612[0]) = v114;
  v115 = operator new(0x18uLL);
  v116 = (unint64_t)v612[0];
  v115[1] = v80;
  v115[2] = v116;
  v117 = *(_QWORD *)(a1 + 176);
  *v115 = v117;
  *(_QWORD *)(v117 + 8) = v115;
  *(_QWORD *)(a1 + 176) = v115;
  v118 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = v118 + 1;
  one_delaunay3 = CDelaunayTriangles3D::find_one_delaunay3(v80, v18, v19, __p, (int *)HIDWORD(v116), v116);
  if (one_delaunay3 < 0)
  {
    v120 = CDelaunayTriangles3D::find_one_delaunay3(v80, v18, v19, __p, (int *)v116, SHIDWORD(v116));
    v121 = HIDWORD(v116);
  }
  else
  {
    v120 = one_delaunay3;
    v121 = v116;
    v116 >>= 32;
  }
  v71 = a1;
  if (v120 < 1)
  {
    LODWORD(v131) = 0;
  }
  else
  {
    v122 = *(_DWORD **)(a1 + 224);
    *v122 = v116;
    v122[1] = v121;
    v122[2] = v120;
    *(_DWORD *)buf = v121;
    *(_DWORD *)&buf[4] = v120;
    std::list<std::array<int,2ul>>::remove(v80, buf);
    v123 = *(_QWORD *)(a1 + 192);
    if (v123 == v118 + 1)
    {
      *(_QWORD *)buf = __PAIR64__(v121, v120);
      v124 = operator new(0x18uLL);
      v125 = *(_QWORD *)buf;
      v124[1] = v80;
      v124[2] = v125;
      v71 = a1;
      v126 = *(_QWORD *)(a1 + 176);
      *v124 = v126;
      *(_QWORD *)(v126 + 8) = v124;
      *(_QWORD *)(a1 + 176) = v124;
      v123 = v118 + 2;
      *(_QWORD *)(a1 + 192) = v118 + 2;
    }
    *(_DWORD *)buf = v120;
    *(_DWORD *)&buf[4] = v116;
    std::list<std::array<int,2ul>>::remove(v80, buf);
    if (*(_QWORD *)(v71 + 192) == v123)
    {
      *(_QWORD *)buf = __PAIR64__(v120, v116);
      v127 = operator new(0x18uLL);
      v128 = *(_QWORD *)buf;
      v127[1] = v80;
      v127[2] = v128;
      v71 = a1;
      v129 = *(_QWORD *)(a1 + 176);
      *v127 = v129;
      *(_QWORD *)(v129 + 8) = v127;
      *(_QWORD *)(a1 + 176) = v127;
      *(_QWORD *)(a1 + 192) = v123 + 1;
    }
    CDelaunayTriangles3D::check_avail_vertices(v80, v116 | (v121 << 32), v120);
    if (!*(_QWORD *)(v71 + 216))
    {
      LODWORD(v131) = 1;
      goto LABEL_237;
    }
    if (v610 <= 1)
      v130 = 1;
    else
      v130 = v610;
    v597 = v130;
    v131 = 1;
    do
    {
      if (!*(_QWORD *)(v71 + 192))
        break;
      v132 = *(CDelaunayTriangles3D **)(v71 + 184);
      if (v132 == v80)
        break;
      v133 = v80;
      while (1)
      {
        v133 = *(CDelaunayTriangles3D **)v133;
        v134 = (int *)*((_QWORD *)v133 + 2);
        v135 = CDelaunayTriangles3D::find_one_delaunay3(v80, v18, v19, __p, v134, SHIDWORD(v134));
        if ((v135 & 0x80000000) == 0)
          break;
        v18 = v578;
        if (v133 == v132)
        {
          v612[0] = v134;
          goto LABEL_138;
        }
      }
      v612[0] = v134;
      if (v131 == v597)
      {
        LODWORD(v131) = v597;
        v18 = v578;
        break;
      }
      v136 = v135;
      v137 = *(_QWORD *)(v71 + 224);
      *(_DWORD *)(v137 + 4 * (3 * v131)) = (_DWORD)v134;
      *(_DWORD *)(v137 + 4 * (3 * v131 + 1)) = HIDWORD(v134);
      *(_DWORD *)(v137 + 4 * (3 * v131 + 2)) = v135;
      std::list<std::array<int,2ul>>::remove(v80, v612);
      v138 = *(_QWORD *)(v71 + 192);
      *(_DWORD *)buf = HIDWORD(v134);
      *(_DWORD *)&buf[4] = v136;
      std::list<std::array<int,2ul>>::remove(v80, buf);
      v139 = *(_QWORD *)(v71 + 192);
      if (v139 == v138)
      {
        *(_QWORD *)buf = __PAIR64__(HIDWORD(v134), v136);
        v140 = operator new(0x18uLL);
        v141 = *(_QWORD *)buf;
        v140[1] = v80;
        v140[2] = v141;
        v142 = *(_QWORD *)(v71 + 176);
        *v140 = v142;
        *(_QWORD *)(v142 + 8) = v140;
        *(_QWORD *)(v71 + 176) = v140;
        v139 = v138 + 1;
        *(_QWORD *)(v71 + 192) = v138 + 1;
      }
      *(_DWORD *)buf = v136;
      *(_DWORD *)&buf[4] = (_DWORD)v134;
      std::list<std::array<int,2ul>>::remove(v80, buf);
      if (*(_QWORD *)(v71 + 192) == v139)
      {
        *(_QWORD *)buf = __PAIR64__(v136, v134);
        v143 = operator new(0x18uLL);
        v144 = *(_QWORD *)buf;
        v143[1] = v80;
        v143[2] = v144;
        v145 = *(_QWORD *)(v71 + 176);
        *v143 = v145;
        *(_QWORD *)(v145 + 8) = v143;
        *(_QWORD *)(v71 + 176) = v143;
        *(_QWORD *)(v71 + 192) = v139 + 1;
      }
      ++v131;
      v116 = v116 & 0xFFFFFFFF00000000 | v136;
      CDelaunayTriangles3D::check_avail_vertices(v80, (unint64_t)v134, v116);
      v18 = v578;
    }
    while (*(_QWORD *)(v71 + 216));
  }
LABEL_138:
  if ((_DWORD)v131 != (_DWORD)v610)
  {
LABEL_237:
    v209 = *(_QWORD *)(v71 + 224);
    v210 = (*(_QWORD *)(v71 + 232) - v209) >> 2;
    if (v131 <= v210)
    {
      if (v131 < v210)
        *(_QWORD *)(a1 + 232) = v209 + 4 * v131;
    }
    else
    {
      std::vector<int>::__append((std::vector<unsigned int> *)(a1 + 224), v131 - v210);
    }
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      goto LABEL_38;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "VBAP.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 792;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "delaunayTriangulation";
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = 792;
    v56 = MEMORY[0x24BDACB70];
    goto LABEL_37;
  }
LABEL_139:
  v18 = v578;
  v146 = v71;
  if (*(_DWORD *)v71 != 1 || *(_QWORD *)(v71 + 304) < 2uLL)
    goto LABEL_275;
  v147 = 0;
  memset(buf, 0, 24);
  v612[1] = 0;
  v612[0] = 0;
  v613 = 0;
  v149 = *(_QWORD *)(v146 + 224);
  v148 = *(_QWORD *)(v146 + 232);
  if ((unint64_t)(v148 - v149) < 0xC)
    goto LABEL_271;
  v147 = 0;
  v150 = 0;
  v151 = 0;
  v152 = 0;
  LODWORD(v153) = 0;
  do
  {
    LODWORD(v622) = 0;
    v621 = 0;
    v154 = 3 * v153;
    v155 = ((uint64_t)(*(_QWORD *)(a1 + 64) - *(_QWORD *)(a1 + 56)) >> 2) / 3uLL;
    v156 = *(_DWORD *)(v149 + 4 * (3 * v153));
    if (v156 >= v155)
    {
      LODWORD(v621) = *(_DWORD *)(v149 + 4 * (3 * v153));
      v157 = 1;
      v156 = 0;
    }
    else
    {
      v157 = 0;
    }
    v158 = *(_DWORD *)(v149 + 4 * (v154 + 1));
    if (v158 >= v155)
      *(_DWORD *)((unint64_t)&v621 | (4 * v157++)) = v158;
    else
      v156 = *(_DWORD *)(v149 + 4 * (v154 + 1));
    v159 = *(_DWORD *)(v149 + 4 * (v154 + 2));
    if (v159 >= v155)
    {
      *((_DWORD *)&v621 + v157) = v159;
      if (v157 == 1)
      {
LABEL_156:
        v160 = *(char **)&buf[8];
        if (*(_QWORD *)&buf[8] >= *(_QWORD *)&buf[16])
        {
          v162 = *(char **)buf;
          v163 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2;
          v164 = v163 + 1;
          if ((unint64_t)(v163 + 1) >> 62)
            goto LABEL_482;
          v165 = *(_QWORD *)&buf[16] - *(_QWORD *)buf;
          if ((uint64_t)(*(_QWORD *)&buf[16] - *(_QWORD *)buf) >> 1 > v164)
            v164 = v165 >> 1;
          if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL)
            v166 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v166 = v164;
          if (v166)
          {
            if (v166 >> 62)
              goto LABEL_481;
            v167 = v166;
            v168 = operator new(4 * v166);
            v166 = v167;
          }
          else
          {
            v168 = 0;
          }
          v169 = (unsigned int *)&v168[4 * v163];
          *v169 = v156;
          v161 = v169 + 1;
          if (v160 != v162)
          {
            v170 = v160 - 4 - v162;
            if (v170 < 0x2C)
              goto LABEL_489;
            if ((unint64_t)(v162 - v168) < 0x20)
              goto LABEL_489;
            v171 = (v170 >> 2) + 1;
            v172 = (float64x2_t *)&v168[4 * v163 - 16];
            v173 = (float64x2_t *)(v160 - 16);
            v174 = v171 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *v173;
              v172[-1] = v173[-1];
              *v172 = v39;
              v172 -= 2;
              v173 -= 2;
              v174 -= 8;
            }
            while (v174);
            v169 -= v171 & 0x7FFFFFFFFFFFFFF8;
            v160 -= 4 * (v171 & 0x7FFFFFFFFFFFFFF8);
            if (v171 != (v171 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_489:
              do
              {
                v175 = *((_DWORD *)v160 - 1);
                v160 -= 4;
                *--v169 = v175;
              }
              while (v160 != v162);
            }
          }
          *(_QWORD *)buf = v169;
          *(_QWORD *)&buf[16] = &v168[4 * v166];
          if (v162)
            operator delete(v162);
        }
        else
        {
          **(_DWORD **)&buf[8] = v156;
          v161 = v160 + 4;
        }
        *(_QWORD *)&buf[8] = v161;
        if (HIDWORD(v621) >= v621)
          v176 = v621;
        else
          v176 = HIDWORD(v621);
        if (v621 <= HIDWORD(v621))
          v177 = HIDWORD(v621);
        else
          v177 = v621;
        if (v152 < v150)
        {
          *(_QWORD *)v152 = v176 | (v177 << 32);
          v152 += 8;
          goto LABEL_204;
        }
        v178 = (v152 - v147) >> 3;
        v179 = v178 + 1;
        if ((unint64_t)(v178 + 1) >> 61)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        if ((v150 - v147) >> 2 > v179)
          v179 = (v150 - v147) >> 2;
        if ((unint64_t)(v150 - v147) >= 0x7FFFFFFFFFFFFFF8)
          v180 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v180 = v179;
        if (v180)
        {
          if (v180 >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v181 = operator new(8 * v180);
        }
        else
        {
          v181 = 0;
        }
        v182 = &v181[8 * v178];
        *(_QWORD *)v182 = v176 | (v177 << 32);
        v183 = v182 + 8;
        if (v152 != v147)
        {
          v184 = v152 - 8 - v147;
          if (v184 < 0x168)
          {
            v185 = v152;
            goto LABEL_200;
          }
          if (&v181[v152 - v147 - 8 - (v184 & 0xFFFFFFFFFFFFFFF8)] > &v181[v152 - v147 - 8])
          {
            v185 = v152;
            goto LABEL_200;
          }
          if (&v152[-(v184 & 0xFFFFFFFFFFFFFFF8) - 8] > v152 - 8)
          {
            v185 = v152;
            goto LABEL_200;
          }
          if ((unint64_t)(v147 - v181) < 0x20)
          {
            v185 = v152;
            goto LABEL_200;
          }
          v205 = (v184 >> 3) + 1;
          v185 = &v152[-8 * (v205 & 0x3FFFFFFFFFFFFFFCLL)];
          v206 = (float64x2_t *)&v181[8 * v178 - 16];
          v207 = (float64x2_t *)(v152 - 16);
          v208 = v205 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v39 = *v207;
            v206[-1] = v207[-1];
            *v206 = v39;
            v206 -= 2;
            v207 -= 2;
            v208 -= 4;
          }
          while (v208);
          v182 -= 8 * (v205 & 0x3FFFFFFFFFFFFFFCLL);
          if (v205 != (v205 & 0x3FFFFFFFFFFFFFFCLL))
          {
            do
            {
LABEL_200:
              v186 = *((_QWORD *)v185 - 1);
              v185 -= 8;
              *((_QWORD *)v182 - 1) = v186;
              v182 -= 8;
            }
            while (v185 != v147);
          }
        }
        v150 = &v181[8 * v180];
        if (v147)
          operator delete(v147);
        v147 = v182;
        v152 = v183;
LABEL_204:
        v187 = (char *)v612[1];
        if (v612[1] < (void *)v613)
        {
          *(_DWORD *)v612[1] = v153;
          v151 = v187 + 4;
        }
        else
        {
          v188 = v152;
          v189 = v150;
          v190 = (char *)v612[0];
          v191 = (char *)v612[1] - (char *)v612[0];
          v192 = ((char *)v612[1] - (char *)v612[0]) >> 2;
          v193 = v192 + 1;
          if ((unint64_t)(v192 + 1) >> 62)
LABEL_482:
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v194 = v613 - (unint64_t)v612[0];
          if ((uint64_t)(v613 - (unint64_t)v612[0]) >> 1 > v193)
            v193 = v194 >> 1;
          if ((unint64_t)v194 >= 0x7FFFFFFFFFFFFFFCLL)
            v195 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v195 = v193;
          if (v195)
          {
            if (v195 >> 62)
LABEL_481:
              std::__throw_bad_array_new_length[abi:ne180100]();
            v196 = operator new(4 * v195);
          }
          else
          {
            v196 = 0;
          }
          v197 = &v196[4 * v192];
          *(_DWORD *)v197 = v153;
          v151 = v197 + 4;
          if (v187 == v190)
          {
            v150 = v189;
            v152 = v188;
          }
          else
          {
            v198 = v187 - 4 - v190;
            if (v198 < 0x2C)
            {
              v150 = v189;
              v152 = v188;
              goto LABEL_227;
            }
            v199 = v187 - &v196[v191];
            v150 = v189;
            v152 = v188;
            if (v199 < 0x20)
              goto LABEL_490;
            v200 = (v198 >> 2) + 1;
            v201 = (float64x2_t *)&v196[4 * v192 - 16];
            v202 = (float64x2_t *)(v187 - 16);
            v203 = v200 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v39 = *v202;
              v201[-1] = v202[-1];
              *v201 = v39;
              v201 -= 2;
              v202 -= 2;
              v203 -= 8;
            }
            while (v203);
            v197 -= 4 * (v200 & 0x7FFFFFFFFFFFFFF8);
            v187 -= 4 * (v200 & 0x7FFFFFFFFFFFFFF8);
            if (v200 != (v200 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_490:
              do
              {
LABEL_227:
                v204 = *((_DWORD *)v187 - 1);
                v187 -= 4;
                *((_DWORD *)v197 - 1) = v204;
                v197 -= 4;
              }
              while (v187 != v190);
            }
          }
          v612[0] = v197;
          v613 = (unint64_t)&v196[4 * v195];
          if (v190)
            operator delete(v190);
        }
        v612[1] = v151;
        v149 = *(_QWORD *)(a1 + 224);
        v148 = *(_QWORD *)(a1 + 232);
      }
    }
    else
    {
      v156 = v159;
      if (v157 == 2)
        goto LABEL_156;
    }
    v153 = (v153 + 1);
  }
  while (v153 < ((v148 - v149) >> 2) / 3uLL);
  v211 = (char *)v612[0];
  if (v152 != v147)
  {
    v212 = 0;
    v213 = 0;
    v214 = (v152 - v147) >> 3;
    v216 = *(_QWORD *)buf;
    v215 = *(unsigned int **)&buf[8];
    v600 = v618;
    v217 = 1;
    while (1)
    {
      v218 = v212;
      v212 = v213 + 1;
      if (v214 > v212)
        break;
LABEL_246:
      v214 = (v152 - v147) >> 3;
      ++v217;
      v213 = v212;
      if (v214 <= v212)
      {
        v211 = (char *)v612[0];
        goto LABEL_269;
      }
    }
    v219 = 0;
    v39.f64[0] = *(float64_t *)&v147[8 * v218];
    v220 = v217;
    v221 = v213 + 1;
    while (1)
    {
      v222 = v213 + v219;
      v223 = vceq_s32(*(int32x2_t *)&v39.f64[0], *(int32x2_t *)&v147[8 * v221]);
      if ((v223.i32[0] & v223.i32[1] & 1) != 0)
        break;
      v221 = (v222 + 2);
      ++v219;
      ++v220;
      if (v214 <= v221)
        goto LABEL_246;
    }
    v224 = 4 * v218;
    v225 = *(unsigned int *)(v216 + 4 * v218);
    v226.f64[0] = v600[v225];
    v226.f64[1] = v608[v225];
    a8.n128_f64[0] = __p[v225];
    v227 = (char *)(v216 + 4 * v221);
    v228 = *(unsigned int *)v227;
    v47.f64[0] = v600[v228];
    v229.f64[0] = __p[v228];
    v230 = LODWORD(v39.f64[0]);
    v39.f64[0] = v600[v230];
    v231.f64[0] = __p[v230];
    v52.f64[0] = v608[v228];
    v232 = vmulq_f64(v39, v52);
    v52.f64[1] = v229.f64[0];
    v229.f64[1] = v47.f64[0];
    v48.f64[0] = v608[v230];
    v233 = v222 + 1;
    v234 = vmlaq_f64(vnegq_f64(v232), v47, v48);
    v48.f64[1] = v231.f64[0];
    v231.f64[1] = v39.f64[0];
    v39 = vmulq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(v48, v229)), v52, v231), v226);
    v39.f64[0] = vaddvq_f64(v39) + vmulq_f64(v234, (float64x2_t)a8).f64[0];
    if (v39.f64[0] >= 0.0)
      v235 = v213;
    else
      v235 = v233;
    if (v39.f64[0] >= 0.0)
      v213 = v233;
    v236 = 4 * v235;
    v237 = *(_QWORD *)(a1 + 224);
    *(_DWORD *)(v237 + 4 * (3 * *(_DWORD *)&v211[v224])) = *(_DWORD *)(v216 + v236);
    v238 = 4 * v213;
    *(_DWORD *)(v237 + 4 * (3 * *(_DWORD *)&v211[v224] + 1)) = *(_DWORD *)(v216 + v238);
    v239 = &v147[8 * v221];
    *(_DWORD *)(v237 + 4 * (3 * *(_DWORD *)&v211[v224] + 2)) = *(_DWORD *)v239;
    v240 = &v211[4 * v221];
    *(_DWORD *)(v237 + 4 * (3 * *(_DWORD *)v240)) = *(_DWORD *)(v216 + v238);
    *(_DWORD *)(v237 + 4 * (3 * *(_DWORD *)v240 + 1)) = *(_DWORD *)(v216 + v236);
    *(_DWORD *)(v237 + 4 * (3 * *(_DWORD *)v240 + 2)) = *((_DWORD *)v239 + 1);
    v241 = v239 + 8;
    if (v239 + 8 != v152)
    {
      v242 = v152 - &v147[8 * (v219 + v212)] - 16;
      if (v242 < 0x38)
      {
        do
        {
LABEL_263:
          *(_DWORD *)v239 = *(_DWORD *)v241;
          *((_DWORD *)v239 + 1) = *((_DWORD *)v241 + 1);
          v239 += 8;
          v241 += 8;
        }
        while (v241 != v152);
      }
      else
      {
        v243 = (v242 >> 3) + 1;
        v244 = 8 * (v243 & 0x3FFFFFFFFFFFFFF8);
        v239 += v244;
        v245 = 8 * v220;
        v246 = (((unint64_t)&v152[-16 - (_QWORD)v147 - v245] >> 3) + 1) & 0x3FFFFFFFFFFFFFF8;
        v247 = &v147[v245 + 40];
        do
        {
          v39 = *((float64x2_t *)v247 - 1);
          v47 = *(float64x2_t *)v247;
          a8 = *((__n128 *)v247 + 1);
          *(_OWORD *)(v247 - 40) = *((_OWORD *)v247 - 2);
          *(float64x2_t *)(v247 - 24) = v39;
          *(float64x2_t *)(v247 - 8) = v47;
          *(__n128 *)(v247 + 8) = a8;
          v247 += 64;
          v246 -= 8;
        }
        while (v246);
        if (v243 != (v243 & 0x3FFFFFFFFFFFFFF8))
        {
          v241 += v244;
          goto LABEL_263;
        }
      }
    }
    v152 = v239;
    v248 = (char *)v215 - (v227 + 4);
    if (v215 != (unsigned int *)(v227 + 4))
      memmove(v227, v227 + 4, (char *)v215 - (v227 + 4));
    v249 = v151 - (v240 + 4);
    if (v249)
      memmove(v240, v240 + 4, v249);
    v215 = (unsigned int *)&v227[v248];
    v151 = &v240[v249];
    goto LABEL_246;
  }
LABEL_269:
  v18 = v578;
  if (v211)
    operator delete(v211);
LABEL_271:
  if (*(_QWORD *)buf)
    operator delete(*(void **)buf);
  v146 = a1;
  if (v147)
    operator delete(v147);
LABEL_275:
  v250 = *(double **)(v146 + 248);
  v251 = *(_QWORD *)(v146 + 232) - *(_QWORD *)(v146 + 224);
  v252 = (v251 >> 1) + (v251 >> 2);
  v253 = *(double **)(v146 + 256);
  v254 = v253 - v250;
  if (v252 <= v254)
  {
    if (v252 < v254)
    {
      v253 = &v250[v252];
      *(_QWORD *)(v146 + 256) = v253;
    }
  }
  else
  {
    std::vector<double>::__append((char **)(v146 + 248), v252 - v254);
    v250 = *(double **)(a1 + 248);
    v253 = *(double **)(a1 + 256);
  }
  vDSP_vclrD(v250, 1, v253 - v250);
  v262 = a1;
  v264 = *(_QWORD *)(a1 + 224);
  v263 = *(_QWORD *)(a1 + 232);
  v265 = 0.0;
  if ((unint64_t)(v263 - v264) >= 0xC)
  {
    v266 = 1;
    v267 = 8;
    v268 = 2;
    do
    {
      v270 = *(int *)(v264 + 4 * (v268 - 2));
      v271.f64[0] = v18[v270];
      v271.f64[1] = v608[v270];
      v255.f64[0] = __p[v270];
      v272 = *(int *)(v264 + 4 * (v268 - 1));
      v256.f64[0] = v18[v272];
      v259.f64[0] = v608[v272];
      *(double *)&v257 = __p[v272];
      v273 = *(int *)(v264 + 4 * v268);
      v258.f64[0] = v18[v273];
      v261.f64[0] = v608[v273];
      *(double *)&v260 = __p[v273];
      v274.f64[0] = v259.f64[0];
      *(_QWORD *)&v274.f64[1] = v257;
      *(_QWORD *)&v275.f64[0] = v260;
      v275.f64[1] = v258.f64[0];
      *(_QWORD *)&v276.f64[0] = v257;
      v276.f64[1] = v256.f64[0];
      v277.f64[0] = v261.f64[0];
      *(_QWORD *)&v277.f64[1] = v260;
      if (fabs(vaddvq_f64(vmulq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(v277, v276)), v274, v275), v271))+ vmulq_f64(vmlaq_f64(vnegq_f64(vmulq_f64(v258, v259)), v256, v261), v255).f64[0]) > 0.00000011920929)
      {
        v256.f64[1] = v259.f64[0];
        v258.f64[1] = v608[*(int *)(v264 + 4 * v268)];
        *(float64x2_t *)buf = v271;
        *(float64x2_t *)&buf[16] = v255;
        *(float64x2_t *)&buf[32] = v256;
        v625 = v257;
        v626 = v258;
        v627 = v260;
        __invert_d3();
        v278 = v612[1];
        v255 = v614;
        v256 = v616;
        *(_QWORD *)&v257 = v613;
        v258.f64[0] = v615;
        v259.f64[0] = v617;
        v279 = *(_QWORD *)(a1 + 248);
        *(void **)(v279 + 8 * (v267 - 8)) = v612[0];
        *(float64_t *)(v279 + 8 * (v267 - 7)) = v255.f64[0];
        *(float64_t *)(v279 + 8 * (v267 - 6)) = v256.f64[0];
        *(_QWORD *)(v279 + 8 * (v267 - 5)) = v278;
        *(float64_t *)(v279 + 8 * (v267 - 4)) = v255.f64[1];
        *(float64_t *)(v279 + 8 * (v267 - 3)) = v256.f64[1];
        *(_QWORD *)(v279 + 8 * (v267 - 2)) = v257;
        *(float64_t *)(v279 + 8 * (v267 - 1)) = v258.f64[0];
        *(float64_t *)(v279 + 8 * v267) = v259.f64[0];
        v264 = *(_QWORD *)(a1 + 224);
        v263 = *(_QWORD *)(a1 + 232);
      }
      v269 = ((v263 - v264) >> 2) / 3uLL;
      v519 = v269 > v266++;
      v267 += 9;
      v268 += 3;
    }
    while (v519);
    v265 = (float)v269 * 0.125;
    v262 = a1;
  }
  v280 = vcvtmd_s64_f64(log(v265) * 0.72134752);
  if (v280 >= 6)
    v280 = 6;
  v281 = (uint64_t *)(v262 + 272);
  v574 = (uint64_t *)(v262 + 272);
  if (v603 != v610
    || (v282 = v280 & ~(v280 >> 31),
        v283 = (8 << (2 * (v280 & ~(v280 >> 31)))),
        v285 = *v605,
        v284 = v605[1],
        0xAAAAAAAAAAAAAAABLL * ((v284 - *v605) >> 3) != v283))
  {
    v296 = *(uint64_t **)(v262 + 272);
    v295 = *(uint64_t **)(v262 + 280);
    if (v295 != v296)
    {
      do
      {
        v297 = v295 - 3;
        if (*(v295 - 1))
        {
          v299 = *(v295 - 3);
          v298 = (uint64_t *)*(v295 - 2);
          v300 = *v298;
          *(_QWORD *)(v300 + 8) = *(_QWORD *)(v299 + 8);
          **(_QWORD **)(v299 + 8) = v300;
          *(v295 - 1) = 0;
          if (v298 != v297)
          {
            do
            {
              v301 = (uint64_t *)v298[1];
              operator delete(v298);
              v298 = v301;
            }
            while (v301 != v297);
          }
        }
        v295 = v297;
      }
      while (v297 != v296);
      v264 = *(_QWORD *)(v262 + 224);
      v263 = *(_QWORD *)(v262 + 232);
    }
    *(_QWORD *)(v262 + 280) = v296;
    v302 = ((v263 - v264) >> 2) / 3uLL;
    v303 = vcvtmd_s64_f64(log((float)v302 * 0.125) * 0.72134752);
    v571 = v303;
    if (v303 >= 6)
      v304 = 6;
    else
      v304 = v303;
    v577 = v304 & ~(v304 >> 31);
    v305 = 2 * (v304 & ~(v304 >> 31));
    v306 = (char *)operator new(96 << (v305 + 3));
    v307 = 96 * (((96 << (v305 + 3)) - 96) / 0x60uLL) + 96;
    bzero(v306, v307);
    v309 = 0;
    if (8 << v305 <= 1)
      v310 = 1;
    else
      v310 = (8 << v305);
    v312 = *(float64x2_t *)MEMORY[0x24BDAEDE0];
    v311 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 16);
    v314 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 32);
    v313 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 48);
    v316 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 64);
    v315 = *(float64x2_t *)(MEMORY[0x24BDAEDE0] + 80);
    v317 = (float64x2_t)vdupq_n_s64(0x416312D000000000uLL);
    v318 = (float64x2_t)vdupq_n_s64(0x3E7AD7F29ABCAF48uLL);
    v308.f64[0] = 0.0000001;
    v319 = a1;
    while (1)
    {
      v324 = v312;
      __asm { FMOV            V19.2D, #1.0 }
      v611 = _Q19;
      v327 = v311;
      v328 = v314;
      v329 = v313;
      v330 = v316;
      v331 = v315;
      v332 = v309;
      v333 = v304 & ~(v304 >> 31);
      if (v304 >= 1)
        break;
LABEL_319:
      v334 = vmulq_f64(v327, v327);
      v334.f64[0] = 1.0 / sqrt(vaddvq_f64(vmulq_f64(v324, v324)) + v334.f64[0]);
      v335 = vmulq_f64(v329, v329);
      v335.f64[0] = 1.0 / sqrt(vaddvq_f64(vmulq_f64(v328, v328)) + v335.f64[0]);
      v336 = vmulq_f64(v331, v331);
      v337 = vmulq_f64(v330, v330);
      v336.f64[0] = 1.0 / sqrt(vaddvq_f64(v337) + v336.f64[0]);
      v337.f64[0] = 10000000.0;
      v338 = *(_OWORD *)&vmulq_f64(v335, vmulq_f64(v329, v337));
      v339 = vmulq_f64(vmulq_n_f64(v328, v335.f64[0]), v317);
      v340 = *(_OWORD *)&vmulq_f64(v336, vmulq_f64(v331, v337));
      v341 = vmulq_f64(vmulq_n_f64(v330, v336.f64[0]), v317);
      v342 = (float64x2_t *)&v306[96 * v309];
      v320 = vrndxq_f64(vmulq_f64(vmulq_n_f64(v324, v334.f64[0]), v317));
      v343 = vrndxq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vmulq_f64(v334, vmulq_f64(v327, v337)));
      v344 = vrndxq_f64(v339);
      v345 = vmulq_f64(v344, v318);
      v342[2] = v345;
      v346 = v342 + 2;
      v347 = vrndxq_f64((float64x2_t)v338);
      v348 = vrndxq_f64(v341);
      v349 = vmulq_f64(v348, v318);
      v342[4] = v349;
      v350 = vrndxq_f64((float64x2_t)v340);
      v351 = vmulq_f64(v343, v308);
      v352 = vmulq_f64(v320, v318);
      v353 = vmulq_f64(v347, v308);
      *v342 = v352;
      v342[1] = v351;
      v354 = vmulq_f64(v350, v308);
      v342[3] = v353;
      v342[5] = v354;
      v355 = vextq_s8((int8x16_t)v320, (int8x16_t)v320, 8uLL).u64[0];
      v356 = vextq_s8((int8x16_t)v344, (int8x16_t)v344, 8uLL).u64[0];
      v357 = vextq_s8((int8x16_t)v348, (int8x16_t)v348, 8uLL).u64[0];
      switch(v332 & 7)
      {
        case 0u:
          *v342 = vnegq_f64(v352);
          v342[1] = vnegq_f64(v351);
          v342[2] = vnegq_f64(v345);
          v342[3] = vnegq_f64(v353);
          v342[4] = vnegq_f64(v349);
          v342[5] = vnegq_f64(v354);
          break;
        case 1u:
          *(_QWORD *)&v320.f64[1] = v355;
          v321 = (float64x2_t)vdupq_n_s64(0xBE7AD7F29ABCAF48);
          goto LABEL_315;
        case 2u:
          *(_QWORD *)&v320.f64[1] = v355;
          v378 = (float64x2_t)xmmword_2105F1FC0;
          goto LABEL_340;
        case 3u:
          *(_QWORD *)&v320.f64[1] = v355;
          v321 = (float64x2_t)xmmword_2105F1FC0;
          goto LABEL_315;
        case 4u:
          *(_QWORD *)&v320.f64[1] = v355;
          v378 = (float64x2_t)xmmword_2105F1FB0;
LABEL_340:
          v349.f64[0] = -0.0000001;
          *v342 = vmulq_f64(v320, v378);
          v342[1] = vmulq_f64(v343, v349);
          *(_QWORD *)&v344.f64[1] = v356;
          *v346 = vmulq_f64(v344, v378);
          v342[3] = vmulq_f64(v347, v349);
          *(_QWORD *)&v348.f64[1] = v357;
          v322 = vmulq_f64(v348, v378);
          v323 = vmulq_f64(v350, v349);
          goto LABEL_316;
        case 5u:
          *(_QWORD *)&v320.f64[1] = v355;
          v321 = (float64x2_t)xmmword_2105F1FB0;
LABEL_315:
          *v342 = vmulq_f64(v320, v321);
          v342[1] = vmulq_f64(v343, v308);
          *(_QWORD *)&v344.f64[1] = v356;
          *v346 = vmulq_f64(v344, v321);
          v342[3] = vmulq_f64(v347, v308);
          *(_QWORD *)&v348.f64[1] = v357;
          v322 = vmulq_f64(v348, v321);
          v323 = vmulq_f64(v350, v308);
          goto LABEL_316;
        case 6u:
          *(_QWORD *)&v320.f64[1] = v355;
          v345.f64[0] = -0.0000001;
          *v342 = vmulq_f64(v320, v318);
          v342[1] = vmulq_f64(v343, v345);
          *(_QWORD *)&v344.f64[1] = v356;
          *v346 = vmulq_f64(v344, v318);
          v342[3] = vmulq_f64(v347, v345);
          *(_QWORD *)&v348.f64[1] = v357;
          v322 = vmulq_f64(v348, v318);
          v323 = vmulq_f64(v350, v345);
LABEL_316:
          v342[4] = v322;
          v342[5] = v323;
          break;
        default:
          break;
      }
      if (++v309 == v310)
      {
        v595 = v306;
        v379 = 0xAAAAAAAAAAAAAAABLL * (v307 >> 5);
        v381 = *(_QWORD *)(a1 + 272);
        v380 = *(uint64_t **)(a1 + 280);
        v382 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v380 - v381) >> 3);
        if (v379 <= v382)
        {
          if (v379 < v382)
          {
            v383 = (uint64_t *)(v381 + 8 * (v307 >> 5));
            if (v380 != v383)
            {
              do
              {
                v545 = v380 - 3;
                if (*(v380 - 1))
                {
                  v547 = *(v380 - 3);
                  v546 = (uint64_t *)*(v380 - 2);
                  v548 = *v546;
                  *(_QWORD *)(v548 + 8) = *(_QWORD *)(v547 + 8);
                  **(_QWORD **)(v547 + 8) = v548;
                  *(v380 - 1) = 0;
                  if (v546 != v545)
                  {
                    do
                    {
                      v549 = (uint64_t *)v546[1];
                      operator delete(v546);
                      v546 = v549;
                    }
                    while (v549 != v545);
                  }
                }
                v380 = v545;
              }
              while (v545 != v383);
            }
            v319 = a1;
            *(_QWORD *)(a1 + 280) = v383;
          }
        }
        else
        {
          std::vector<std::list<int>>::__append(v281, v379 - v382);
        }
        if (!(_DWORD)v302)
        {
LABEL_457:
          operator delete(v595);
          v57 = 0;
          *(_DWORD *)(v319 + 296) = v577;
LABEL_39:
          v58 = v608;
          v59 = __p;
          if (!__p)
            goto LABEL_41;
          goto LABEL_40;
        }
        v384 = 0;
        v572 = ~(-1 << v305);
        v573 = ((7 << v305) >> 2) | (7 << v305);
        v565 = (7 << v305) | (v573 >> 2);
        v385 = ((7 << v305) >> 2) | v565;
        v386 = v385 >> 2;
        v387 = (v385 >> 2) | v385;
        v562 = (7 << v305) | (((v387 >> 2) | v387) >> 2);
        v564 = v386 | (7 << v305);
        v563 = (v387 >> 2) | (7 << v305);
        while (1)
        {
          v388 = *(int *)(*(_QWORD *)(v319 + 224) + 12 * v384);
          v313.f64[0] = __p[v388];
          v593 = v18[v388];
          v604 = v608[v388];
          v606 = v313;
          subtriangle_containment = CDelaunayTriangles3D::find_subtriangle_containment(v577, v593, v604, v313.f64[0]);
          v390 = *(int *)(12 * v384 + *(_QWORD *)(v319 + 224) + 4);
          v391.f64[0] = __p[v390];
          v586 = v391;
          v587 = v18[v390];
          v601 = v608[v390];
          v392 = CDelaunayTriangles3D::find_subtriangle_containment(v577, v587, v601, v391.f64[0]);
          v393 = v18;
          v394 = v392;
          v395 = *(int *)(12 * v384 + *(_QWORD *)(v319 + 224) + 8);
          v396.f64[0] = v393[v395];
          v397.f64[0] = __p[v395];
          v575 = v397;
          v576 = v396;
          v598 = v608[v395];
          v398 = CDelaunayTriangles3D::find_subtriangle_containment(v577, v396.f64[0], v598, v397.f64[0]);
          v612[0] = v612;
          v612[1] = v612;
          v613 = 0;
          v399 = operator new(0x18uLL);
          *((_DWORD *)v399 + 4) = subtriangle_containment;
          *v399 = v612;
          v399[1] = v612;
          v612[1] = v399;
          v612[0] = v399;
          v400 = 1;
          v401 = v399;
          v613 = 1;
          if (v394 != subtriangle_containment)
          {
            v401 = operator new(0x18uLL);
            *((_DWORD *)v401 + 4) = v394;
            *v401 = v399;
            v401[1] = v612;
            v399[1] = v401;
            v400 = 2;
            v612[0] = v401;
            v613 = 2;
          }
          _ZF = v398 == subtriangle_containment || v398 == v394;
          if (!_ZF)
          {
            v403 = operator new(0x18uLL);
            v403[4] = v398;
            *(_QWORD *)v403 = v401;
            *((_QWORD *)v403 + 1) = v612;
            v401[1] = v403;
            ++v400;
            v612[0] = v403;
            v613 = v400;
          }
          std::list<int>::__sort<std::__less<void,void>>((uint64_t)v399, (uint64_t)v612, v400);
          v404 = (void **)v612[1];
          v405 = *((_DWORD *)v612[1] + 4);
          v18 = v578;
          if (v613 >= 2)
            break;
          v416 = *v574;
          v417 = operator new(0x18uLL);
          v418 = (uint64_t *)(v416 + 24 * v405);
          v417[4] = v384;
          *((_QWORD *)v417 + 1) = v418;
          v419 = *v418;
          *(_QWORD *)v417 = *v418;
          *(_QWORD *)(v419 + 8) = v417;
          *v418 = (uint64_t)v417;
          ++v418[2];
LABEL_448:
          v319 = a1;
          if (v613)
          {
            v541 = (void **)v612[1];
            v542 = (_QWORD **)v612[0];
            v543 = *(_QWORD *)v612[1];
            *(_QWORD *)(v543 + 8) = *((_QWORD *)v612[0] + 1);
            *v542[1] = v543;
            v613 = 0;
            if (v541 != v612)
            {
              do
              {
                v544 = (void **)v541[1];
                operator delete(v541);
                v541 = v544;
              }
              while (v544 != v612);
            }
          }
          if (++v384 == v302)
            goto LABEL_457;
        }
        v406 = 0;
        v407 = *((_DWORD *)v612[0] + 4) ^ v405;
        v408 = v574;
        if (((7 << v305) & v407) != 0)
        {
          v409 = v379 - 1;
        }
        else
        {
          v409 = v379 - 1;
          if (v571 >= 1)
          {
            v410 = ~(-1 << v305);
            v411 = 7 << v305;
            if ((v573 & v407) == 0)
            {
              v410 = ~(-1 << v305);
              v411 = 7 << v305;
              if (v577 >= 2)
              {
                v410 = v572 >> 2;
                v411 = ((7 << v305) >> 2) | (7 << v305);
                if ((v565 & v407) == 0)
                {
                  v410 = v572 >> 2;
                  v411 = ((7 << v305) >> 2) | (7 << v305);
                  if (v577 >= 3)
                  {
                    v410 = v572 >> 4;
                    v411 = (7 << v305) | (v573 >> 2);
                    if ((v564 & v407) == 0)
                    {
                      v410 = v572 >> 4;
                      v411 = (7 << v305) | (v573 >> 2);
                      if (v577 >= 4)
                      {
                        v410 = v572 >> 6;
                        v411 = v564;
                        if ((v563 & v407) == 0)
                        {
                          v410 = v572 >> 6;
                          v411 = v564;
                          if (v577 >= 5)
                          {
                            v412 = v577 > 5;
                            v411 = v562;
                            v413 = (v562 & v407) == 0;
                            v414 = !v413 || !v412;
                            v415 = v413 && v412 ? 10 : 8;
                            v410 = v572 >> v415;
                            if (v414)
                              v411 = v563;
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            v406 = v411 & v405;
            v409 = v410 | v405;
          }
        }
        v420 = &v621;
        v621 = &v621;
        v622 = &v621;
        v623 = 0;
        if (v409 - v406 != -1)
        {
          v421 = 0;
          v422 = v409 - v406 + 1;
          v423 = &v621;
          do
          {
            v424 = operator new(0x18uLL);
            v424[4] = 0;
            *(_QWORD *)v424 = v423;
            *((_QWORD *)v424 + 1) = &v621;
            v423[1] = v424;
            ++v421;
            v423 = v424;
            v621 = v424;
            v623 = v421;
          }
          while (v422 != v421);
          v420 = v622;
          if (v622 == &v621)
          {
            v420 = &v621;
            v408 = v574;
            if (v404 == v612)
            {
LABEL_386:
              if (v420 == &v621)
              {
LABEL_445:
                if (v623)
                {
                  v538 = v621;
                  v537 = v622;
                  v539 = *v622;
                  *(_QWORD *)(v539 + 8) = *((_QWORD *)v621 + 1);
                  **((_QWORD **)v538 + 1) = v539;
                  v623 = 0;
                  if (v537 != &v621)
                  {
                    do
                    {
                      v540 = (_QWORD *)v537[1];
                      operator delete(v537);
                      v537 = v540;
                    }
                    while (v540 != &v621);
                  }
                }
                goto LABEL_448;
              }
LABEL_413:
              *(double *)v446.i64 = v593;
              *(double *)&v446.i64[1] = v604;
              *(double *)v447.i64 = v587;
              *(double *)&v447.i64[1] = v601;
              v448.i64[0] = *(_QWORD *)&v576.f64[0];
              *(double *)&v448.i64[1] = v598;
              v449 = *v408;
              v450.f64[0] = v606.f64[0];
              v450.f64[1] = v593;
              v451.f64[0] = v586.f64[0];
              v451.f64[1] = v587;
              v452 = (int64x2_t)vmlaq_f64(vnegq_f64(vmulq_f64(v451, (float64x2_t)v446)), v450, (float64x2_t)v447);
              *(_QWORD *)&v602 = *(_OWORD *)&vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v606, (float64x2_t)v447, 1)), v586, (float64x2_t)v446, 1);
              v596 = (float64x2_t)vdupq_laneq_s64(v452, 1);
              v599 = (float64x2_t)vdupq_lane_s64(v452.i64[0], 0);
              v453.f64[0] = v575.f64[0];
              v453.f64[1] = v576.f64[0];
              v454 = (int64x2_t)vmlaq_f64(vnegq_f64(vmulq_f64(v453, (float64x2_t)v447)), v451, (float64x2_t)v448);
              *(_QWORD *)&v592 = *(_OWORD *)&vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v586, (float64x2_t)v448, 1)), v575, (float64x2_t)v447, 1);
              v590 = (float64x2_t)vdupq_lane_s64(v454.i64[0], 0);
              v588 = v447;
              v589 = (float64x2_t)vdupq_laneq_s64(v454, 1);
              v455 = (int64x2_t)vmlaq_f64(vnegq_f64(vmulq_f64(v453, (float64x2_t)v446)), v450, (float64x2_t)v448);
              v456 = (int8x16_t)vzip1q_s64((int64x2_t)v606, (int64x2_t)v586);
              *(_QWORD *)&v584 = *(_OWORD *)&vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v606, (float64x2_t)v448, 1)), v575, (float64x2_t)v446, 1);
              v582 = (float64x2_t)vdupq_laneq_s64(v455, 1);
              v583 = (float64x2_t)vdupq_lane_s64(v455.i64[0], 0);
              v594 = v446;
              v591 = (int64x2_t)*(unint64_t *)&v606.f64[0];
              v579 = (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v606.f64[0], (int64x2_t)*(unint64_t *)&v586.f64[0]);
              v580 = (float64x2_t)vzip2q_s64(v446, v447);
              v581 = (float64x2_t)vzip1q_s64(v446, v447);
              v568 = vextq_s8((int8x16_t)v580, (int8x16_t)v580, 8uLL).u64[0];
              v569 = vextq_s8((int8x16_t)v581, (int8x16_t)v581, 8uLL).u64[0];
              v607 = v448;
              v570 = v456.i64[0];
              v566 = vextq_s8(v456, v456, 8uLL).u64[0];
              v567 = (float64x2_t)vextq_s8((int8x16_t)v448, (int8x16_t)v448, 8uLL);
              do
              {
                v457 = *((_DWORD *)v420 + 4);
                v458 = (float64x2_t *)&v595[96 * v457];
                v459 = *v458;
                v313 = v458[1];
                v461 = v458[2];
                v460 = v458[3];
                v463 = v458[4];
                v462 = v458[5];
                v464 = (int64x2_t)*(unint64_t *)&v458[1].f64[0];
                v465 = (int64x2_t)*(unint64_t *)&v458[3].f64[0];
                v466 = (int64x2_t)*(unint64_t *)&v458[5].f64[0];
                v467 = (float64x2_t)vzip1q_s64(*(int64x2_t *)v458, (int64x2_t)v461);
                v468 = (float64x2_t)vzip2q_s64(*(int64x2_t *)v458, (int64x2_t)v461);
                v469 = (float64x2_t)vzip1q_s64((int64x2_t)v464.u64[0], (int64x2_t)v465.u64[0]);
                v470 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v467, v602), v599, v468), v596, v469);
                v471 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v463, v607), v602), v599, (float64x2_t)vzip2q_s64((int64x2_t)v463, v607)), v596, (float64x2_t)vzip1q_s64((int64x2_t)v466.u64[0], (int64x2_t)*(unint64_t *)&v575.f64[0]));
                v472 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
                v473 = (float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v471, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v471));
                v474 = vaddvq_f64((float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v470, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v470)))+ v473.f64[0];
                v473.f64[0] = v474;
                *(int8x8_t *)&v473.f64[0] = vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v473)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v473)));
                if ((vmvn_s8((int8x8_t)vceq_s32(*(int32x2_t *)&v473.f64[0], vdup_lane_s32(*(int32x2_t *)&v473.f64[0], 1))).u8[0] & 1) == 0|| fabs(v474) != 3.0)
                {
                  v475 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v463, v594), v592), v590, (float64x2_t)vzip2q_s64((int64x2_t)v463, v594)), v589, (float64x2_t)vzip1q_s64(v466, v591));
                  v476 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v467, v592), v590, v468), v589, v469);
                  v477 = (float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v475, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v475));
                  v478 = vaddvq_f64((float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v476, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v476)))+ v477.f64[0];
                  v477.f64[0] = v478;
                  *(int8x8_t *)&v477.f64[0] = vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v477)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v477)));
                  if ((vmvn_s8((int8x8_t)vceq_s32(*(int32x2_t *)&v477.f64[0], vdup_lane_s32(*(int32x2_t *)&v477.f64[0], 1))).u8[0] & 1) == 0|| fabs(v478) != 3.0)
                  {
                    v479 = vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v463, v588), v584), v583, (float64x2_t)vzip2q_s64((int64x2_t)v463, v588)), v582, (float64x2_t)vzip1q_s64(v466, (int64x2_t)*(unint64_t *)&v586.f64[0]));
                    v480 = vmlaq_f64(vmlaq_f64(vmulq_n_f64(v467, v584), v583, v468), v582, v469);
                    v481 = (float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v479, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v479));
                    v482 = vaddvq_f64((float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v480, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v480)))+ v481.f64[0];
                    v481.f64[0] = v482;
                    *(int8x8_t *)&v481.f64[0] = vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v481)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v481)));
                    if ((vmvn_s8((int8x8_t)vceq_s32(*(int32x2_t *)&v481.f64[0], vdup_lane_s32(*(int32x2_t *)&v481.f64[0], 1))).u8[0] & 1) == 0|| fabs(v482) != 3.0)
                    {
                      v483.f64[0] = v458[1].f64[0];
                      v483.f64[1] = v458->f64[0];
                      v484.f64[0] = v458[3].f64[0];
                      v484.f64[1] = v458[2].f64[0];
                      v485 = vmlaq_f64(vnegq_f64(vmulq_f64(v484, v459)), v483, v461);
                      *(_QWORD *)&v486 = *(_OWORD *)&vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v313, v461, 1)), v460, v459, 1);
                      v487 = vmulq_n_f64((float64x2_t)vzip1q_s64(v607, (int64x2_t)v463), v486);
                      v488 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v581, v486), v580, v485.f64[0]), v579, v485, 1);
                      v489 = vmlaq_laneq_f64(vmlaq_n_f64(v487, (float64x2_t)vzip2q_s64(v607, (int64x2_t)v463), v485.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v575.f64[0], v466), v485, 1);
                      v490 = (float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v489, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v489));
                      v491 = vaddvq_f64((float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v488, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v488)))+ v490.f64[0];
                      v490.f64[0] = v491;
                      *(int8x8_t *)&v488.f64[0] = vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v490)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v490)));
                      if ((vmvn_s8((int8x8_t)vceq_s32(*(int32x2_t *)&v488.f64[0], vdup_lane_s32(*(int32x2_t *)&v488.f64[0], 1))).u8[0] & 1) == 0|| fabs(v491) != 3.0)
                      {
                        *(_QWORD *)&v484.f64[1] = vextq_s8((int8x16_t)v484, (int8x16_t)v484, 8uLL).u64[0];
                        v492.f64[0] = v458[5].f64[0];
                        v492.f64[1] = v458[4].f64[0];
                        v493.f64[0] = v458[2].f64[0];
                        *(_QWORD *)&v493.f64[1] = vextq_s8((int8x16_t)v461, (int8x16_t)v461, 8uLL).u64[0];
                        v494 = vmlaq_f64(vnegq_f64(vmulq_f64(v492, v493)), v484, v463);
                        *(_QWORD *)&v495 = *(_OWORD *)&vmlaq_f64(vnegq_f64(vmulq_laneq_f64(v460, v463, 1)), (float64x2_t)vdupq_laneq_s64((int64x2_t)v461, 1), v462);
                        v496 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v581, v495), v580, v494.f64[0]), v579, v494, 1);
                        v497 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v607, (int64x2_t)v459), v495), (float64x2_t)vzip2q_s64(v607, (int64x2_t)v459), v494.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v575.f64[0], v464), v494, 1);
                        v498 = (float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v497, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v497));
                        v499 = vaddvq_f64((float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v496, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v496)))+ v498.f64[0];
                        v498.f64[0] = v499;
                        *(int8x8_t *)&v498.f64[0] = vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v498)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v498)));
                        if ((vmvn_s8((int8x8_t)vceq_s32(*(int32x2_t *)&v498.f64[0], vdup_lane_s32(*(int32x2_t *)&v498.f64[0], 1))).u8[0] & 1) == 0|| fabs(v499) != 3.0)
                        {
                          v500.f64[0] = v458[4].f64[0];
                          *(_QWORD *)&v500.f64[1] = vextq_s8((int8x16_t)v463, (int8x16_t)v463, 8uLL).u64[0];
                          *(_QWORD *)&v483.f64[1] = vextq_s8((int8x16_t)v483, (int8x16_t)v483, 8uLL).u64[0];
                          v501.f64[0] = v458->f64[0];
                          *(_QWORD *)&v501.f64[1] = vextq_s8((int8x16_t)v459, (int8x16_t)v459, 8uLL).u64[0];
                          *(_QWORD *)&v492.f64[1] = vextq_s8((int8x16_t)v492, (int8x16_t)v492, 8uLL).u64[0];
                          v502 = vmlaq_f64(vnegq_f64(vmulq_f64(v492, v501)), v483, v500);
                          *(_QWORD *)&v503 = *(_OWORD *)&vmlaq_f64(vnegq_f64(vmulq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v463, 1), v313)), (float64x2_t)vdupq_laneq_s64((int64x2_t)v459, 1), v462);
                          v504 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64(v581, v503), v580, v502.f64[0]), v579, v502, 1);
                          v505 = vmlaq_laneq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64(v607, (int64x2_t)v461), v503), (float64x2_t)vzip2q_s64(v607, (int64x2_t)v461), v502.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)*(unint64_t *)&v575.f64[0], v465), v502, 1);
                          v506 = (float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v505, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v505));
                          v507 = vaddvq_f64((float64x2_t)vbicq_s8(vorrq_s8(vandq_s8((int8x16_t)v504, v472), (int8x16_t)v611), (int8x16_t)vceqzq_f64(v504)))+ v506.f64[0];
                          v506.f64[0] = v507;
                          v508 = (int32x2_t)vbsl_s8((int8x8_t)vmovn_s64(vcgtzq_f64(v506)), (int8x8_t)0x100000001, (int8x8_t)vmovn_s64(vcltzq_f64(v506)));
                          if ((vmvn_s8((int8x8_t)vceq_s32(v508, vdup_lane_s32(v508, 1))).u8[0] & 1) == 0
                            || fabs(v507) != 3.0)
                          {
                            v509 = vsubq_f64(v461, v459);
                            v510 = vsubq_f64(v460, v313);
                            v511 = vsubq_f64(v463, v459);
                            v512 = vsubq_f64(v462, v313);
                            v513 = vmlaq_laneq_f64(vnegq_f64(vmulq_laneq_f64(v510, v511, 1)), v512, v509, 1);
                            v512.f64[1] = v511.f64[0];
                            v510.f64[1] = v509.f64[0];
                            v514 = vmlaq_f64(vnegq_f64(vmulq_f64(v512, v509)), v510, v511);
                            v515 = vmulq_f64(v514, v514);
                            if (vmulq_f64(v513, v513).f64[0] + v515.f64[0] + v515.f64[1] <= 0.000001)
                              goto LABEL_444;
                            v516 = (float64x2_t)vextq_s8((int8x16_t)v514, (int8x16_t)v514, 8uLL);
                            v517.f64[0] = v513.f64[0];
                            v517.f64[1] = v514.f64[0];
                            v518 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v467, v513.f64[0]), v468, v514.f64[0]), (float64x2_t)vzip1q_s64((int64x2_t)v313, (int64x2_t)v460), v516.f64[0]);
                            v519 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v463, v513), v514, v463, 1), v516, v462).f64[0] < -0.00000011920929
                                && v518.f64[1] < -0.00000011920929;
                            v520 = v519 && v518.f64[0] < -0.00000011920929;
                            v521 = (int8x16_t)vnegq_f64(v517);
                            v522 = (int8x16_t)vnegq_f64(v516);
                            v523 = v520 ? -1 : 0;
                            v524 = (int8x16_t)vdupq_n_s64(v523);
                            v313 = (float64x2_t)vbslq_s8(v524, v522, (int8x16_t)v516);
                            v525 = (float64x2_t)vbslq_s8(v524, v521, (int8x16_t)v517);
                            v526.f64[0] = v581.f64[0];
                            *(_QWORD *)&v526.f64[1] = v569;
                            v527.f64[0] = v580.f64[0];
                            *(_QWORD *)&v527.f64[1] = v568;
                            v528 = vmlaq_laneq_f64(vmulq_n_f64(v526, v525.f64[0]), v527, v525, 1);
                            v529 = vmlaq_laneq_f64(vmulq_f64(v525, v576), v567, v525, 1);
                            *(_QWORD *)&v525.f64[0] = v570;
                            *(_QWORD *)&v525.f64[1] = v566;
                            *(_QWORD *)&v530 = *(_OWORD *)&vmlaq_f64(v529, v313, v575);
                            v531 = vmlaq_n_f64(v528, v525, v313.f64[0]);
                            v532 = v531.f64[0] < -0.00000011920929 && v531.f64[1] < -0.00000011920929;
                            if (!v532 || v530 >= -0.00000011920929)
                            {
LABEL_444:
                              v534 = operator new(0x18uLL);
                              v535 = (uint64_t *)(v449 + 24 * v457);
                              v534[4] = v384;
                              *((_QWORD *)v534 + 1) = v535;
                              v536 = *v535;
                              *(_QWORD *)v534 = *v535;
                              *(_QWORD *)(v536 + 8) = v534;
                              *v535 = (uint64_t)v534;
                              ++v535[2];
                            }
                          }
                        }
                      }
                    }
                  }
                }
                v420 = (_QWORD *)v420[1];
              }
              while (v420 != &v621);
              goto LABEL_445;
            }
            do
            {
LABEL_391:
              v426 = *((_DWORD *)v404 + 4);
              v427 = *v408;
              v428 = operator new(0x18uLL);
              v429 = (uint64_t *)(v427 + 24 * v426);
              v428[4] = v384;
              *((_QWORD *)v428 + 1) = v429;
              v430 = *v429;
              *(_QWORD *)v428 = *v429;
              *(_QWORD *)(v430 + 8) = v428;
              *v429 = (uint64_t)v428;
              ++v429[2];
              *(_QWORD *)buf = buf;
              *(_QWORD *)&buf[8] = buf;
              v431 = v622;
              if (v622 != &v621)
              {
                v432 = 0;
                *(_QWORD *)&buf[16] = 0;
                v433 = *((_DWORD *)v404 + 4);
                v434 = buf;
                v435 = v623;
                do
                {
                  v436 = (_QWORD *)v431[1];
                  if (*((_DWORD *)v431 + 4) == v433)
                  {
                    while (v436 != &v621)
                    {
                      v437 = *((_DWORD *)v436 + 4) == v433;
                      if (*((_DWORD *)v436 + 4) != v433)
                        goto LABEL_399;
                      v436 = (_QWORD *)v436[1];
                    }
                    v437 = 1;
                    v436 = &v621;
LABEL_399:
                    if (v431 != v436)
                    {
                      v434 = (_BYTE *)*v436;
                      if ((_QWORD *)*v436 == v431)
                      {
                        v440 = 1;
                      }
                      else
                      {
                        v438 = -1;
                        v439 = v431;
                        do
                        {
                          v439 = (_QWORD *)v439[1];
                          ++v438;
                        }
                        while (v439 != (_QWORD *)v434);
                        v440 = v438 + 2;
                      }
                      v435 -= v440;
                      v623 = v435;
                      v432 += v440;
                      v441 = *v431;
                      *(_QWORD *)(v441 + 8) = *((_QWORD *)v434 + 1);
                      **((_QWORD **)v434 + 1) = v441;
                      v442 = *(_QWORD *)buf;
                      *(_QWORD *)(*(_QWORD *)buf + 8) = v431;
                      *v431 = v442;
                      *(_QWORD *)buf = v434;
                      *((_QWORD *)v434 + 1) = buf;
                    }
                    if (!v437)
                      v436 = (_QWORD *)v436[1];
                  }
                  v431 = v436;
                }
                while (v436 != &v621);
                if (v432)
                {
                  v443 = *(_QWORD **)&buf[8];
                  v444 = **(_QWORD **)&buf[8];
                  *(_QWORD *)(v444 + 8) = *((_QWORD *)v434 + 1);
                  **((_QWORD **)v434 + 1) = v444;
                  if (v443 != (_QWORD *)buf)
                  {
                    do
                    {
                      v445 = (_BYTE *)v443[1];
                      operator delete(v443);
                      v443 = v445;
                    }
                    while (v445 != buf);
                  }
                }
              }
              v404 = (void **)v404[1];
            }
            while (v404 != v612);
            v420 = v622;
            if (v622 == &v621)
              goto LABEL_445;
            goto LABEL_413;
          }
          v425 = v622;
          v408 = v574;
          do
          {
            *((_DWORD *)v425 + 4) = v406;
            v425 = (_QWORD *)v425[1];
            ++v406;
          }
          while (v425 != &v621);
        }
        if (v404 == v612)
          goto LABEL_386;
        goto LABEL_391;
      }
    }
    while (1)
    {
      __asm { FMOV            V27.2D, #0.5 }
      switch(v332 & 3)
      {
        case 2u:
          v371 = vmlaq_laneq_f64(vmulq_n_f64(_Q27, v324.f64[0]), (float64x2_t)xmmword_2105F1F70, v324, 1);
          v360 = vmlaq_f64(vmlaq_laneq_f64((float64x2_t)0, (float64x2_t)0, v324, 1), _Q27, v327);
          v361 = (float64x2_t)xmmword_2105F1F80;
          v362 = vmlaq_n_f64(v371, (float64x2_t)xmmword_2105F1F80, v327.f64[0]);
          v363 = vmlaq_f64(vmlaq_laneq_f64((float64x2_t)0, (float64x2_t)0, v328, 1), _Q27, v329);
          v364 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(_Q27, v328.f64[0]), (float64x2_t)xmmword_2105F1F70, v328, 1), (float64x2_t)xmmword_2105F1F80, v329.f64[0]);
          v365 = vmlaq_laneq_f64(vmulq_n_f64(_Q27, v330.f64[0]), (float64x2_t)xmmword_2105F1F70, v330, 1);
          break;
        case 1u:
          v366 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v324, _Q27), _Q27, v324, 1), v611, v327);
          v367 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1F90, v324.f64[0]), (float64x2_t)xmmword_2105F1F80, v324, 1), (float64x2_t)0, v327.f64[0]);
          v363 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v328, _Q27), _Q27, v328, 1), v611, v329);
          v368 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1F90, v328.f64[0]), (float64x2_t)xmmword_2105F1F80, v328, 1), (float64x2_t)0, v329.f64[0]);
          v369 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v330, _Q27), _Q27, v330, 1), v611, v331);
          v370 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1F90, v330.f64[0]), (float64x2_t)xmmword_2105F1F80, v330, 1), (float64x2_t)0, v331.f64[0]);
LABEL_331:
          v372 = vextq_s8((int8x16_t)v370, (int8x16_t)v370, 8uLL).u64[0];
          v324 = v367;
          v327 = v366;
          v328 = v368;
          goto LABEL_332;
        case 0u:
          v359 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1FA0, v324.f64[0]), _Q27, v324, 1);
          v360 = vmlaq_f64(vmlaq_laneq_f64((float64x2_t)0, (float64x2_t)0, v324, 1), _Q27, v327);
          v361 = (float64x2_t)xmmword_2105F1F90;
          v362 = vmlaq_n_f64(v359, (float64x2_t)xmmword_2105F1F90, v327.f64[0]);
          v363 = vmlaq_f64(vmlaq_laneq_f64((float64x2_t)0, (float64x2_t)0, v328, 1), _Q27, v329);
          v364 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1FA0, v328.f64[0]), _Q27, v328, 1), (float64x2_t)xmmword_2105F1F90, v329.f64[0]);
          v365 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1FA0, v330.f64[0]), _Q27, v330, 1);
          break;
        default:
          v366 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v324, _Q27), _Q27, v324, 1), (float64x2_t)0, v327);
          v367 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1F80, v324.f64[0]), (float64x2_t)xmmword_2105F1F90, v324, 1), _Q27, v327.f64[0]);
          v363 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v328, _Q27), _Q27, v328, 1), (float64x2_t)0, v329);
          v368 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1F80, v328.f64[0]), (float64x2_t)xmmword_2105F1F90, v328, 1), _Q27, v329.f64[0]);
          v369 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v330, _Q27), _Q27, v330, 1), (float64x2_t)0, v331);
          v370 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_2105F1F80, v330.f64[0]), (float64x2_t)xmmword_2105F1F90, v330, 1), _Q27, v331.f64[0]);
          goto LABEL_331;
      }
      v369 = vmlaq_f64(vmlaq_laneq_f64((float64x2_t)0, (float64x2_t)0, v330, 1), _Q27, v331);
      v370 = vmlaq_n_f64(v365, v361, v331.f64[0]);
      v372 = vextq_s8((int8x16_t)v370, (int8x16_t)v370, 8uLL).u64[0];
      v324 = v362;
      v327 = v360;
      v328 = v364;
LABEL_332:
      v329 = v363;
      v373 = vabsq_f64(v327);
      v373.f64[0] = vaddvq_f64(vabsq_f64(v324)) + v373.f64[0];
      if (v373.f64[0] > 0.0)
      {
        v373.f64[0] = 1.0 / v373.f64[0];
        v327 = vmulq_f64(v373, v327);
        *(_QWORD *)&v324.f64[1] = vextq_s8((int8x16_t)v324, (int8x16_t)v324, 8uLL).u64[0];
        v324 = vmulq_n_f64(v324, v373.f64[0]);
      }
      v374 = vabsq_f64(v363);
      v374.f64[0] = vaddvq_f64(vabsq_f64(v328)) + v374.f64[0];
      if (v374.f64[0] > 0.0)
      {
        v374.f64[0] = 1.0 / v374.f64[0];
        v329 = vmulq_f64(v374, v363);
        *(_QWORD *)&v328.f64[1] = vextq_s8((int8x16_t)v328, (int8x16_t)v328, 8uLL).u64[0];
        v328 = vmulq_n_f64(v328, v374.f64[0]);
      }
      v375.f64[0] = v370.f64[0];
      *(_QWORD *)&v375.f64[1] = v372;
      v376 = vabsq_f64(v369);
      v377 = vaddvq_f64(vabsq_f64(v375)) + v376.f64[0];
      if (v377 > 0.0)
      {
        v376.f64[0] = 1.0 / v377;
        v331 = vmulq_f64(v376, v369);
        *(_QWORD *)&v370.f64[1] = v372;
        v330 = vmulq_n_f64(v370, v376.f64[0]);
      }
      else
      {
        *(_QWORD *)&v370.f64[1] = v372;
        v330 = v370;
        v331 = v369;
      }
      v332 >>= 2;
      if (!--v333)
        goto LABEL_319;
    }
  }
  v59 = __p;
  if (v281 != v605)
  {
    v286 = *(_QWORD *)(v262 + 288);
    v287 = *(uint64_t **)(v262 + 272);
    if (0xAAAAAAAAAAAAAAABLL * ((v286 - (uint64_t)v287) >> 3) < v283)
    {
      if (v287)
      {
        v288 = *(uint64_t **)(v262 + 280);
        v289 = *(void **)(v262 + 272);
        if (v288 != v287)
        {
          do
          {
            v290 = v288 - 3;
            if (*(v288 - 1))
            {
              v292 = *(v288 - 3);
              v291 = (uint64_t *)*(v288 - 2);
              v293 = *v291;
              *(_QWORD *)(v293 + 8) = *(_QWORD *)(v292 + 8);
              **(_QWORD **)(v292 + 8) = v293;
              *(v288 - 1) = 0;
              if (v291 != v290)
              {
                do
                {
                  v294 = (uint64_t *)v291[1];
                  operator delete(v291);
                  v291 = v294;
                }
                while (v294 != v290);
              }
            }
            v288 = v290;
          }
          while (v290 != v287);
          v289 = (void *)*v574;
        }
        *(_QWORD *)(v262 + 280) = v287;
        operator delete(v289);
        v286 = 0;
        *v574 = 0;
        *(_QWORD *)(v262 + 280) = 0;
        *(_QWORD *)(v262 + 288) = 0;
      }
      v558 = 0xAAAAAAAAAAAAAAABLL * (v286 >> 3);
      v559 = 2 * v558;
      if (2 * v558 <= v283)
        v559 = v283;
      if (v558 >= 0x555555555555555)
        v560 = 0xAAAAAAAAAAAAAAALL;
      else
        v560 = v559;
      if (v560 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v561 = (char *)operator new(24 * v560);
      *(_QWORD *)(v262 + 272) = v561;
      *(_QWORD *)(v262 + 280) = v561;
      *(_QWORD *)(v262 + 288) = &v561[24 * v560];
      *(_QWORD *)(v262 + 280) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>(v262 + 288, v285, v284, (uint64_t)v561);
      goto LABEL_476;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v262 + 280) - (_QWORD)v287) >> 3) >= v283)
    {
      v551 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>((_QWORD *)*v605, (_QWORD *)v605[1], *(_QWORD **)(v262 + 272));
      v552 = *(uint64_t **)(v262 + 280);
      if (v552 != v551)
      {
        do
        {
          v553 = v552 - 3;
          if (*(v552 - 1))
          {
            v555 = *(v552 - 3);
            v554 = (uint64_t *)*(v552 - 2);
            v556 = *v554;
            *(_QWORD *)(v556 + 8) = *(_QWORD *)(v555 + 8);
            **(_QWORD **)(v555 + 8) = v556;
            *(v552 - 1) = 0;
            if (v554 != v553)
            {
              do
              {
                v557 = (uint64_t *)v554[1];
                operator delete(v554);
                v554 = v557;
              }
              while (v557 != v553);
            }
          }
          v552 = v553;
        }
        while (v553 != v551);
      }
      *(_QWORD *)(v262 + 280) = v551;
LABEL_476:
      v59 = __p;
    }
    else
    {
      v550 = (_QWORD *)(v285 + 8 * ((uint64_t)(*(_QWORD *)(v262 + 280) - (_QWORD)v287) >> 3));
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>((_QWORD *)*v605, v550, *(_QWORD **)(v262 + 272));
      v59 = __p;
      *(_QWORD *)(v262 + 280) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::list<int>>,std::list<int>*,std::list<int>*,std::list<int>*>(v262 + 288, (uint64_t)v550, v284, *(_QWORD *)(v262 + 280));
    }
  }
  v57 = 0;
  *(_DWORD *)(v262 + 296) = v282;
  v58 = v608;
  if (v59)
LABEL_40:
    operator delete(v59);
LABEL_41:
  if (v58)
    operator delete(v58);
  if (v18)
    operator delete(v18);
  return v57;
}

void sub_2105C4510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v34 + 280) = v35;
  if (STACK[0x218])
  {
    operator delete((void *)STACK[0x218]);
    if (!STACK[0x210])
    {
LABEL_3:
      if (!a34)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      STACK[0x298] = (unint64_t)a34;
      operator delete(a34);
      goto LABEL_8;
    }
  }
  else if (!STACK[0x210])
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  a34 = (void *)STACK[0x290];
  if (!STACK[0x290])
    goto LABEL_8;
  goto LABEL_7;
}

void sub_2105C451C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  uint64_t v34;
  uint64_t v35;

  *(_QWORD *)(v35 + 280) = v34;
  if (STACK[0x218])
  {
    operator delete((void *)STACK[0x218]);
    if (!STACK[0x210])
    {
LABEL_3:
      if (!a34)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      STACK[0x298] = (unint64_t)a34;
      operator delete(a34);
      goto LABEL_8;
    }
  }
  else if (!STACK[0x210])
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  a34 = (void *)STACK[0x290];
  if (!STACK[0x290])
    goto LABEL_8;
  goto LABEL_7;
}

void sub_2105C452C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;

  operator delete(__p);
  JUMPOUT(0x2105C4674);
}

void sub_2105C453C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  uint64_t v34;
  uint64_t v35;
  void *v37;
  void *v38;

  v37 = (void *)STACK[0x230];
  if (STACK[0x230])
  {
    STACK[0x238] = (unint64_t)v37;
    operator delete(v37);
    v38 = *(void **)(v35 - 224);
    if (!v38)
    {
LABEL_3:
      if (!v34)
      {
LABEL_8:
        if (STACK[0x218])
        {
          operator delete((void *)STACK[0x218]);
          if (!STACK[0x210])
          {
LABEL_10:
            if (!a34)
LABEL_15:
              _Unwind_Resume(a1);
LABEL_14:
            STACK[0x298] = (unint64_t)a34;
            operator delete(a34);
            goto LABEL_15;
          }
        }
        else if (!STACK[0x210])
        {
          goto LABEL_10;
        }
        operator delete((void *)STACK[0x210]);
        a34 = (void *)STACK[0x290];
        if (!STACK[0x290])
          goto LABEL_15;
        goto LABEL_14;
      }
LABEL_16:
      JUMPOUT(0x2105C4670);
    }
  }
  else
  {
    v38 = *(void **)(v35 - 224);
    if (!v38)
      goto LABEL_3;
  }
  *(_QWORD *)(v35 - 216) = v38;
  operator delete(v38);
  if (!v34)
    goto LABEL_8;
  goto LABEL_16;
}

void sub_2105C458C(void *a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    __cxa_begin_catch(a1);
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
    __cxa_rethrow();
  }
  JUMPOUT(0x2105C46C4);
}

void sub_2105C45B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  __cxa_end_catch();
  if (STACK[0x218])
  {
    operator delete((void *)STACK[0x218]);
    if (!STACK[0x210])
    {
LABEL_3:
      if (!a34)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      STACK[0x298] = (unint64_t)a34;
      operator delete(a34);
      goto LABEL_8;
    }
  }
  else if (!STACK[0x210])
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  a34 = (void *)STACK[0x290];
  if (!STACK[0x290])
    goto LABEL_8;
  goto LABEL_7;
}

void sub_2105C45C4(void *a1, int a2)
{
  if (a2)
    __clang_call_terminate(a1);
  JUMPOUT(0x2105C46C4);
}

void sub_2105C45D4()
{
  unint64_t v0;

  STACK[0x210] = v0;
  JUMPOUT(0x2105C46A0);
}

void sub_2105C45E0()
{
  JUMPOUT(0x2105C46B8);
}

void sub_2105C45EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34)
{
  if (STACK[0x218])
  {
    operator delete((void *)STACK[0x218]);
    if (!STACK[0x210])
    {
LABEL_3:
      if (!a34)
LABEL_8:
        _Unwind_Resume(a1);
LABEL_7:
      STACK[0x298] = (unint64_t)a34;
      operator delete(a34);
      goto LABEL_8;
    }
  }
  else if (!STACK[0x210])
  {
    goto LABEL_3;
  }
  operator delete((void *)STACK[0x210]);
  a34 = (void *)STACK[0x290];
  if (!STACK[0x290])
    goto LABEL_8;
  goto LABEL_7;
}

void sub_2105C45F4()
{
  JUMPOUT(0x2105C4664);
}

void sub_2105C4610()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (v0)
  {
    v3 = *(uint64_t **)(v2 - 240);
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(v1 + 8);
    **(_QWORD **)(v1 + 8) = v4;
    *(_QWORD *)(v2 - 232) = 0;
    if (v3 != (uint64_t *)(v2 - 248))
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != (uint64_t *)(v2 - 248));
    }
  }
  JUMPOUT(0x2105C4664);
}

uint64_t *std::back_insert_iterator<std::vector<float>>::operator=[abi:ne180100](uint64_t *a1, float a2)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  float *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  float *v21;
  uint64_t v22;
  __int128 v23;
  int v24;

  v4 = *a1;
  v6 = *(float **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 >= v5)
  {
    v9 = *(float **)v4;
    v10 = (uint64_t)v6 - *(_QWORD *)v4;
    v11 = v10 >> 2;
    v12 = (v10 >> 2) + 1;
    if (v12 >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v13 = v5 - (_QWORD)v9;
    if (v13 >> 1 > v12)
      v12 = v13 >> 1;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v14 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 62)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v15 = operator new(4 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = (float *)&v15[4 * v11];
    v17 = &v15[4 * v14];
    *v16 = a2;
    v8 = v16 + 1;
    if (v6 != v9)
    {
      v18 = (char *)v6 - (char *)v9 - 4;
      if (v18 < 0x2C)
        goto LABEL_27;
      if ((unint64_t)((char *)v6 - v15 - v10) < 0x20)
        goto LABEL_27;
      v19 = (v18 >> 2) + 1;
      v7 = &v6[-(v19 & 0x7FFFFFFFFFFFFFF8)];
      v20 = &v15[4 * v11 - 16];
      v21 = v6 - 4;
      v22 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v23 = *(_OWORD *)v21;
        *(v20 - 1) = *((_OWORD *)v21 - 1);
        *v20 = v23;
        v20 -= 2;
        v21 -= 8;
        v22 -= 8;
      }
      while (v22);
      v16 -= v19 & 0x7FFFFFFFFFFFFFF8;
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_27:
        do
        {
          v24 = *((_DWORD *)v7-- - 1);
          *((_DWORD *)v16-- - 1) = v24;
        }
        while (v7 != v9);
      }
    }
    *(_QWORD *)v4 = v16;
    *(_QWORD *)(v4 + 8) = v8;
    *(_QWORD *)(v4 + 16) = v17;
    if (v9)
      operator delete(v9);
  }
  else
  {
    *v6 = a2;
    v8 = v6 + 1;
  }
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

void VBAP::lineUnitSphereIntersection(VBAP *this, const float *__A, float *a3, float *a4)
{
  float v7;
  float v8;
  float v9;
  float __D;
  float v11;
  float __B;
  float v13;
  uint64_t v14;
  uint64_t __C;
  int v16;

  v16 = 0;
  v14 = 0;
  __C = 0;
  v13 = 0.0;
  vDSP_vsub((const float *)this, 1, __A, 1, (float *)&__C, 1, 3uLL);
  vDSP_dotpr((const float *)&__C, 1, (const float *)&__C, 1, (float *)&v14 + 1, 3uLL);
  vDSP_dotpr((const float *)this, 1, (const float *)&__C, 1, (float *)&v14, 3uLL);
  *(float *)&v14 = *(float *)&v14 + *(float *)&v14;
  vDSP_dotpr((const float *)this, 1, (const float *)this, 1, &v13, 3uLL);
  v13 = v13 + -1.0;
  v7 = (float)(v13 * (float)(-4.0 * *((float *)&v14 + 1))) + (float)(*(float *)&v14 * *(float *)&v14);
  if (v7 >= 0.0)
  {
    v8 = sqrtf(v7);
    v9 = (float)(v8 - *(float *)&v14) / (float)(*((float *)&v14 + 1) + *((float *)&v14 + 1));
    __D = (float)-(float)(v8 + *(float *)&v14) / (float)(*((float *)&v14 + 1) + *((float *)&v14 + 1));
    v11 = 1.0 - v9;
    __B = 1.0 - __D;
    vDSP_vsmsma((const float *)this, 1, &__B, __A, 1, &__D, a3 + 3, 1, 3uLL);
    vDSP_vsmsma((const float *)this, 1, &v11, __A, 1, &v9, a3, 1, 3uLL);
  }
}

uint64_t std::__split_buffer<std::vector<unsigned int>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v5 = v2 - 24;
        v4 = *(void **)(v2 - 24);
        *(_QWORD *)(a1 + 16) = v2 - 24;
        if (!v4)
          break;
        *(_QWORD *)(v2 - 16) = v4;
        operator delete(v4);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 24;
    }
    while (v5 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<std::vector<unsigned int>>::__append(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  _QWORD *v19;
  _QWORD *v20;
  void *v21;
  void *v22;

  v5 = *(_QWORD **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (_QWORD *)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD **)a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *(_QWORD *)a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(_QWORD **)a1;
      v19 = *(_QWORD **)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      if (v19 != v5)
      {
        v20 = v19;
        do
        {
          v22 = (void *)*(v20 - 3);
          v20 -= 3;
          v21 = v22;
          if (v22)
          {
            *(v19 - 2) = v21;
            operator delete(v21);
          }
          v19 = v20;
        }
        while (v20 != v5);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

_QWORD *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*,std::vector<unsigned int>*,std::vector<unsigned int>*>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_2105C4CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::vector<unsigned int>>,std::vector<unsigned int>*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

_QWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::list<int> *,std::list<int> *,std::list<int> *,0>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *i;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      if (a3 != v5)
      {
        v8 = v5[1];
        for (i = (_QWORD *)a3[1]; (_QWORD *)v8 != v5 && i != a3; i = (_QWORD *)i[1])
        {
          *((_DWORD *)i + 4) = *(_DWORD *)(v8 + 16);
          v8 = *(_QWORD *)(v8 + 8);
        }
        if (i == a3)
        {
          if ((_QWORD *)v8 != v5)
          {
            v14 = operator new(0x18uLL);
            v15 = v14;
            *v14 = 0;
            v14[1] = 0;
            *((_DWORD *)v14 + 4) = *(_DWORD *)(v8 + 16);
            v16 = *(_QWORD *)(v8 + 8);
            if ((_QWORD *)v16 == v5)
            {
              v6 = 1;
            }
            else
            {
              v6 = 1;
              v17 = v14;
              do
              {
                v14 = operator new(0x18uLL);
                *v14 = v17;
                v14[1] = 0;
                *((_DWORD *)v14 + 4) = *(_DWORD *)(v16 + 16);
                v17[1] = v14;
                ++v6;
                v16 = *(_QWORD *)(v16 + 8);
                v17 = v14;
              }
              while ((_QWORD *)v16 != v5);
            }
            v7 = *a3;
            *(_QWORD *)(v7 + 8) = v15;
            *v15 = v7;
            *a3 = v14;
            v14[1] = a3;
            a3[2] += v6;
          }
        }
        else
        {
          v11 = *a3;
          v12 = *i;
          *(_QWORD *)(v12 + 8) = *(_QWORD *)(*a3 + 8);
          **(_QWORD **)(v11 + 8) = v12;
          do
          {
            v13 = (_QWORD *)i[1];
            --a3[2];
            operator delete(i);
            i = v13;
          }
          while (v13 != a3);
        }
      }
      v5 += 3;
      a3 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_2105C4EA0(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  __cxa_begin_catch(a1);
  do
  {
    v2 = (_QWORD *)*v1;
    operator delete(v1);
    v1 = v2;
  }
  while (v2);
  __cxa_rethrow();
}

void sub_2105C4EC0(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t VBAP::VBAP(uint64_t a1, uint64_t *a2, uint64_t *a3, int a4, char **__sz, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  size_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  uint64_t v29;
  NSObject *v30;
  const char *v31;
  char **v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  int v37;
  __int16 v38;
  const char *v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v13 = *a3;
  v12 = a3[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v14 = v12 - v13;
  if (v14)
  {
    v15 = v14 >> 2;
    v16 = 3 * v15;
    if ((unint64_t)(3 * v15) >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v17 = 12 * v15;
    v18 = (char *)operator new(12 * v15);
    *(_QWORD *)(a1 + 32) = v18;
    v19 = &v18[4 * v16];
    *(_QWORD *)(a1 + 48) = v19;
    bzero(v18, v17);
    *(_QWORD *)(a1 + 40) = v19;
  }
  v33 = __sz;
  v21 = *a3;
  v20 = a3[1];
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v22 = v20 - v21;
  if (v22)
  {
    v23 = v22 >> 2;
    v24 = 3 * v23;
    if ((unint64_t)(3 * v23) >> 62)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v25 = 12 * v23;
    v26 = (char *)operator new(12 * v23);
    *(_QWORD *)(a1 + 56) = v26;
    v27 = &v26[4 * v24];
    *(_QWORD *)(a1 + 72) = v27;
    bzero(v26, v25);
    *(_QWORD *)(a1 + 64) = v27;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v28 = operator new(0x18uLL);
  *(_QWORD *)(a1 + 88) = v28 + 3;
  *(_QWORD *)(a1 + 96) = v28 + 3;
  v28[1] = 0;
  v28[2] = 0;
  *v28 = 0;
  *(_QWORD *)(a1 + 80) = v28;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = a1 + 176;
  *(_QWORD *)(a1 + 184) = a1 + 176;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_QWORD *)(a1 + 200) = a1 + 200;
  *(_QWORD *)(a1 + 208) = a1 + 200;
  *(_WORD *)(a1 + 314) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_DWORD *)a1 = a4;
  v29 = (a3[1] - *a3) >> 2;
  *(_DWORD *)(a1 + 300) = v29;
  if ((_DWORD)v29 && (a2[1] - *a2) >> 2 == v29)
  {
    if (!VBAP::initialize(a1, a2, a3, v33, a6))
    {
      *(_BYTE *)(a1 + 315) = 1;
      return a1;
    }
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v35 = "VBAP.cpp";
      v36 = 1024;
      v37 = 35;
      v38 = 2080;
      v39 = "VBAP";
      v40 = 1024;
      v41 = 35;
      v30 = MEMORY[0x24BDACB70];
      v31 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Initialization Error; Check for duplicate vertices";
LABEL_14:
      _os_log_impl(&dword_210570000, v30, OS_LOG_TYPE_ERROR, v31, buf, 0x22u);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315906;
    v35 = "VBAP.cpp";
    v36 = 1024;
    v37 = 40;
    v38 = 2080;
    v39 = "VBAP";
    v40 = 1024;
    v41 = 40;
    v30 = MEMORY[0x24BDACB70];
    v31 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Initialization Error; Empty or inconsistent vertex set";
    goto LABEL_14;
  }
  return a1;
}

void sub_2105C51EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, void **a10, void **a11, _Unwind_Exception *exception_object)
{
  _QWORD *v12;
  void **v13;
  uint64_t *v14;
  uint64_t *v15;
  void **v16;
  _QWORD *v17;
  uint64_t *v18;
  void *v19;
  void *v20;
  uint64_t *v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  v18 = (uint64_t *)v12[34];
  if (v18)
  {
    v21 = (uint64_t *)v12[35];
    v22 = (void *)v12[34];
    if (v21 != v18)
    {
      do
      {
        v23 = v21 - 3;
        if (*(v21 - 1))
        {
          v25 = *(v21 - 3);
          v24 = (uint64_t *)*(v21 - 2);
          v26 = *v24;
          *(_QWORD *)(v26 + 8) = *(_QWORD *)(v25 + 8);
          **(_QWORD **)(v25 + 8) = v26;
          *(v21 - 1) = 0;
          if (v24 != v23)
          {
            do
            {
              v27 = (uint64_t *)v24[1];
              operator delete(v24);
              v24 = v27;
            }
            while (v27 != v23);
          }
        }
        v21 = v23;
      }
      while (v23 != v18);
      v22 = (void *)v12[34];
    }
    v12[35] = v18;
    operator delete(v22);
    v19 = (void *)v12[31];
    if (!v19)
    {
LABEL_3:
      v20 = (void *)v12[28];
      if (!v20)
        goto LABEL_4;
      goto LABEL_16;
    }
  }
  else
  {
    v19 = (void *)v12[31];
    if (!v19)
      goto LABEL_3;
  }
  v12[32] = v19;
  operator delete(v19);
  v20 = (void *)v12[28];
  if (!v20)
  {
LABEL_4:
    if (!*v17)
      goto LABEL_19;
LABEL_17:
    v29 = v12[25];
    v28 = (uint64_t *)v12[26];
    v30 = *v28;
    *(_QWORD *)(v30 + 8) = *(_QWORD *)(v29 + 8);
    **(_QWORD **)(v29 + 8) = v30;
    v12[27] = 0;
    if (v28 != v15)
    {
      do
      {
        v31 = (uint64_t *)v28[1];
        operator delete(v28);
        v28 = v31;
      }
      while (v31 != v15);
    }
LABEL_19:
    if (v12[24])
    {
      v33 = v12[22];
      v32 = (uint64_t *)v12[23];
      v34 = *v32;
      *(_QWORD *)(v34 + 8) = *(_QWORD *)(v33 + 8);
      **(_QWORD **)(v33 + 8) = v34;
      v12[24] = 0;
      if (v32 != v14)
      {
        do
        {
          v35 = (uint64_t *)v32[1];
          operator delete(v32);
          v32 = v35;
        }
        while (v35 != v14);
      }
    }
    v36 = v12[19];
    if (v36)
    {
      v37 = v12[20];
      v38 = (void *)v12[19];
      if (v37 != v36)
      {
        v39 = v12[20];
        do
        {
          v41 = *(void **)(v39 - 24);
          v39 -= 24;
          v40 = v41;
          if (v41)
          {
            *(_QWORD *)(v37 - 16) = v40;
            operator delete(v40);
          }
          v37 = v39;
        }
        while (v39 != v36);
        v38 = (void *)v12[19];
      }
      v12[20] = v36;
      operator delete(v38);
    }
    v42 = (void *)v12[16];
    if (v42)
    {
      v12[17] = v42;
      operator delete(v42);
    }
    v43 = *a9;
    if (*a9)
    {
      v12[14] = v43;
      operator delete(v43);
      v44 = *v16;
      if (!*v16)
      {
LABEL_34:
        v45 = *v13;
        if (!*v13)
          goto LABEL_36;
        goto LABEL_35;
      }
    }
    else
    {
      v44 = *v16;
      if (!*v16)
        goto LABEL_34;
    }
    v12[11] = v44;
    operator delete(v44);
    v45 = *v13;
    if (!*v13)
    {
LABEL_36:
      v46 = *a10;
      if (*a10)
      {
        v12[5] = v46;
        operator delete(v46);
      }
      v47 = *a11;
      if (*a11)
      {
        v12[2] = v47;
        operator delete(v47);
      }
      _Unwind_Resume(a1);
    }
LABEL_35:
    v12[8] = v45;
    operator delete(v45);
    goto LABEL_36;
  }
LABEL_16:
  v12[29] = v20;
  operator delete(v20);
  if (!*v17)
    goto LABEL_19;
  goto LABEL_17;
}

void sub_2105C53FC()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x2105C53A8);
  JUMPOUT(0x2105C53A0);
}

void sub_2105C5410()
{
  _QWORD *v0;

  if (!*v0)
    JUMPOUT(0x2105C53BCLL);
  JUMPOUT(0x2105C53B4);
}

uint64_t VBAP::changeSpeakerLocations(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  void *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  void *__p;
  uint64_t *v18;
  uint64_t v19;
  _BYTE buf[28];
  __int16 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  *(_BYTE *)(a1 + 315) = 0;
  v3 = (unint64_t)(a3[1] - *a3) >> 2;
  if (*(_DWORD *)(a1 + 300) == (_DWORD)v3 && (a2[1] - *a2) >> 2 == v3)
  {
    vDSP_vclr(*(float **)(a1 + 80), 1, (uint64_t)(*(_QWORD *)(a1 + 88) - *(_QWORD *)(a1 + 80)) >> 2);
    memset(buf, 0, 24);
    __p = 0;
    v18 = 0;
    v19 = 0;
    v7 = VBAP::initialize(a1, a2, a3, (char **)buf, (uint64_t *)&__p);
    v8 = (uint64_t *)__p;
    if (__p)
    {
      v9 = v18;
      v10 = __p;
      if (v18 != __p)
      {
        do
        {
          v11 = v9 - 3;
          if (*(v9 - 1))
          {
            v13 = *(v9 - 3);
            v12 = (uint64_t *)*(v9 - 2);
            v14 = *v12;
            *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
            **(_QWORD **)(v13 + 8) = v14;
            *(v9 - 1) = 0;
            if (v12 != v11)
            {
              do
              {
                v15 = (uint64_t *)v12[1];
                operator delete(v12);
                v12 = v15;
              }
              while (v15 != v11);
            }
          }
          v9 = v11;
        }
        while (v11 != v8);
        v10 = __p;
      }
      v18 = v8;
      operator delete(v10);
    }
    if (*(_QWORD *)buf)
    {
      *(_QWORD *)&buf[8] = *(_QWORD *)buf;
      operator delete(*(void **)buf);
    }
    if ((_DWORD)v7)
    {
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136315906;
        *(_QWORD *)&buf[4] = "VBAP.cpp";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 59;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = "changeSpeakerLocations";
        v21 = 1024;
        v22 = 59;
        _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Unable to change speaker locations",
          buf,
          0x22u);
      }
    }
    else
    {
      *(_BYTE *)(a1 + 315) = 1;
    }
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "VBAP.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 51;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "changeSpeakerLocations";
      v21 = 1024;
      v22 = 51;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Unable to change speaker locations, azimuth and elevation have different sizes",
        buf,
        0x22u);
    }
    return 4294967246;
  }
  return v7;
}

void sub_2105C56A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  std::vector<std::list<int>>::~vector[abi:ne180100](&a10);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float VBAP::convertSphericalDegreesToCartesian(VBAP *this, float a2, float a3, float *a4)
{
  double v5;
  __double2 v6;
  __double2 v7;
  float v8;
  float v9;
  float result;

  v5 = a2 * 0.0174532925;
  v6 = __sincos_stret(a3 * 0.0174532925);
  v7 = __sincos_stret(v5);
  v8 = v6.__cosval * v7.__cosval;
  *(float *)this = v8;
  v9 = v6.__cosval * v7.__sinval;
  *((float *)this + 1) = v9;
  result = v6.__sinval;
  *((float *)this + 2) = result;
  return result;
}

uint64_t VBAP::triangleLookup(VBAP *this, float32x2_t *a2, int *a3, float *a4)
{
  unsigned int subtriangle_containment;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  double v14;
  uint64_t result;
  float v16;
  float v17;
  float v18;
  NSObject *v19;
  const char *v20;
  double v21;
  double v22;
  float64x2_t __B;
  double v24;
  _BYTE __C[12];
  __int16 v26;
  int v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  int v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 315))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__C = 136315906;
      *(_QWORD *)&__C[4] = "VBAP.cpp";
      v26 = 1024;
      v27 = 316;
      v28 = 2080;
      v29 = "triangleLookup";
      v30 = 1024;
      v31 = 316;
      v19 = MEMORY[0x24BDACB70];
      v20 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; VBAP object not initialized";
      goto LABEL_15;
    }
    return 4294967246;
  }
  subtriangle_containment = CDelaunayTriangles3D::find_subtriangle_containment(*((int *)this + 74), a2->f32[0], a2->f32[1], a2[1].f32[0]);
  if ((subtriangle_containment & 0x80000000) != 0
    || (v9 = *((_QWORD *)this + 34),
        0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 35) - v9) >> 3) <= subtriangle_containment))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__C = 136315906;
      *(_QWORD *)&__C[4] = "VBAP.cpp";
      v26 = 1024;
      v27 = 322;
      v28 = 2080;
      v29 = "triangleLookup";
      v30 = 1024;
      v31 = 322;
      v19 = MEMORY[0x24BDACB70];
      v20 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup error";
LABEL_15:
      _os_log_impl(&dword_210570000, v19, OS_LOG_TYPE_ERROR, v20, __C, 0x22u);
      return 4294967246;
    }
    return 4294967246;
  }
  *a3 = -1;
  __B = vcvtq_f64_f32(*a2);
  v24 = a2[1].f32[0];
  v10 = v9 + 24 * subtriangle_containment;
  v11 = *(_QWORD *)(v10 + 8);
  if (v11 == v10)
  {
LABEL_18:
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)__C = 136315906;
      *(_QWORD *)&__C[4] = "VBAP.cpp";
      v26 = 1024;
      v27 = 349;
      v28 = 2080;
      v29 = "triangleLookup";
      v30 = 1024;
      v31 = 349;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup error",
        __C,
        0x22u);
    }
    return 4294964151;
  }
  else
  {
    while (1)
    {
      v12 = *(_DWORD *)(v11 + 16);
      *(_QWORD *)__C = 0;
      v13 = 9 * v12;
      vDSP_dotprD((const double *)(*((_QWORD *)this + 31) + 72 * v12), 1, __B.f64, 1, (double *)__C, 3uLL);
      if (*(double *)__C > -0.00000011920929)
      {
        v22 = 0.0;
        vDSP_dotprD((const double *)(*((_QWORD *)this + 31) + 8 * (v13 + 3)), 1, __B.f64, 1, &v22, 3uLL);
        if (v22 > -0.00000011920929)
        {
          v21 = 0.0;
          vDSP_dotprD((const double *)(*((_QWORD *)this + 31) + 8 * (v13 + 6)), 1, __B.f64, 1, &v21, 3uLL);
          v14 = v21;
          if (v21 > -0.00000011920929)
            break;
        }
      }
      v11 = *(_QWORD *)(v11 + 8);
      if (v11 == v10)
        goto LABEL_18;
    }
    result = 0;
    v16 = *(double *)__C;
    v17 = v22;
    *a4 = v16;
    a4[1] = v17;
    v18 = v14;
    a4[2] = v18;
    *a3 = v12;
  }
  return result;
}

void VBAP::~VBAP(VBAP *this)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  void *v11;
  VBAP *v12;
  uint64_t v13;
  uint64_t v14;
  VBAP *v15;
  VBAP *v16;
  uint64_t v17;
  uint64_t v18;
  VBAP *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v2 = (uint64_t *)*((_QWORD *)this + 34);
  if (v2)
  {
    v3 = (uint64_t *)*((_QWORD *)this + 35);
    v4 = (void *)*((_QWORD *)this + 34);
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 3;
        if (*(v3 - 1))
        {
          v7 = *(v3 - 3);
          v6 = (uint64_t *)*(v3 - 2);
          v8 = *v6;
          *(_QWORD *)(v8 + 8) = *(_QWORD *)(v7 + 8);
          **(_QWORD **)(v7 + 8) = v8;
          *(v3 - 1) = 0;
          if (v6 != v5)
          {
            do
            {
              v9 = (uint64_t *)v6[1];
              operator delete(v6);
              v6 = v9;
            }
            while (v9 != v5);
          }
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = (void *)*((_QWORD *)this + 34);
    }
    *((_QWORD *)this + 35) = v2;
    operator delete(v4);
  }
  v10 = (void *)*((_QWORD *)this + 31);
  if (v10)
  {
    *((_QWORD *)this + 32) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 28);
  if (v11)
  {
    *((_QWORD *)this + 29) = v11;
    operator delete(v11);
  }
  if (*((_QWORD *)this + 27))
  {
    v13 = *((_QWORD *)this + 25);
    v12 = (VBAP *)*((_QWORD *)this + 26);
    v14 = *(_QWORD *)v12;
    *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
    **(_QWORD **)(v13 + 8) = v14;
    *((_QWORD *)this + 27) = 0;
    if (v12 != (VBAP *)((char *)this + 200))
    {
      do
      {
        v15 = (VBAP *)*((_QWORD *)v12 + 1);
        operator delete(v12);
        v12 = v15;
      }
      while (v15 != (VBAP *)((char *)this + 200));
    }
  }
  if (*((_QWORD *)this + 24))
  {
    v17 = *((_QWORD *)this + 22);
    v16 = (VBAP *)*((_QWORD *)this + 23);
    v18 = *(_QWORD *)v16;
    *(_QWORD *)(v18 + 8) = *(_QWORD *)(v17 + 8);
    **(_QWORD **)(v17 + 8) = v18;
    *((_QWORD *)this + 24) = 0;
    if (v16 != (VBAP *)((char *)this + 176))
    {
      do
      {
        v19 = (VBAP *)*((_QWORD *)v16 + 1);
        operator delete(v16);
        v16 = v19;
      }
      while (v19 != (VBAP *)((char *)this + 176));
    }
  }
  v20 = *((_QWORD *)this + 19);
  if (v20)
  {
    v21 = *((_QWORD *)this + 20);
    v22 = (void *)*((_QWORD *)this + 19);
    if (v21 != v20)
    {
      v23 = *((_QWORD *)this + 20);
      do
      {
        v25 = *(void **)(v23 - 24);
        v23 -= 24;
        v24 = v25;
        if (v25)
        {
          *(_QWORD *)(v21 - 16) = v24;
          operator delete(v24);
        }
        v21 = v23;
      }
      while (v23 != v20);
      v22 = (void *)*((_QWORD *)this + 19);
    }
    *((_QWORD *)this + 20) = v20;
    operator delete(v22);
  }
  v26 = (void *)*((_QWORD *)this + 16);
  if (v26)
  {
    *((_QWORD *)this + 17) = v26;
    operator delete(v26);
  }
  v27 = (void *)*((_QWORD *)this + 13);
  if (v27)
  {
    *((_QWORD *)this + 14) = v27;
    operator delete(v27);
  }
  v28 = (void *)*((_QWORD *)this + 10);
  if (v28)
  {
    *((_QWORD *)this + 11) = v28;
    operator delete(v28);
  }
  v29 = (void *)*((_QWORD *)this + 7);
  if (v29)
  {
    *((_QWORD *)this + 8) = v29;
    operator delete(v29);
  }
  v30 = (void *)*((_QWORD *)this + 4);
  if (v30)
  {
    *((_QWORD *)this + 5) = v30;
    operator delete(v30);
  }
  v31 = (void *)*((_QWORD *)this + 1);
  if (v31)
  {
    *((_QWORD *)this + 2) = v31;
    operator delete(v31);
  }
}

uint64_t VBAP::calculateVBAPGains(VBAP *this, float32x2_t *a2, float *__C)
{
  NSObject *v6;
  const char *v7;
  float64x2_t v8;
  float64x2_t v9;
  float64x2_t v10;
  float64x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  float v18;
  float64x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float64x2_t v27;
  float64x2_t v28;
  float64x2_t v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  float64x2_t v36;
  float64x2_t v37;
  float64x2_t v38;
  double v39;
  double v40;
  double v41;
  float64x2_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  float64x2_t v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  float v56;
  uint64_t v57;
  uint64_t v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  float v63;
  float v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  float *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  float v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  float64_t v120;
  float64x2_t v121;
  float __B;
  float __Ca;
  float32x2_t __A;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  _DWORD buf[3];
  __int16 v131;
  int v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  int v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 315))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315906;
      *(_QWORD *)&buf[1] = "VBAP.cpp";
      v131 = 1024;
      v132 = 579;
      v133 = 2080;
      v134 = "calculateVBAPGains";
      v135 = 1024;
      v136 = 579;
      v6 = MEMORY[0x24BDACB70];
      v7 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Can not calculate gain if the VBAP object is not initialized";
      goto LABEL_11;
    }
    return 4294967246;
  }
  if (a2->f32[0] == 0.0 && a2->f32[1] == 0.0 && a2[1].f32[0] == 0.0)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315906;
      *(_QWORD *)&buf[1] = "VBAP.cpp";
      v131 = 1024;
      v132 = 585;
      v133 = 2080;
      v134 = "calculateVBAPGains";
      v135 = 1024;
      v136 = 585;
      v6 = MEMORY[0x24BDACB70];
      v7 = "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Can not calculate gain for a source location [0, 0, 0]";
LABEL_11:
      _os_log_impl(&dword_210570000, v6, OS_LOG_TYPE_ERROR, v7, (uint8_t *)buf, 0x22u);
      return 4294967246;
    }
    return 4294967246;
  }
  vDSP_vclr(__C, 1, *((unsigned int *)this + 75));
  vDSP_vclr(*((float **)this + 16), 1, (uint64_t)(*((_QWORD *)this + 17) - *((_QWORD *)this + 16)) >> 2);
  v8 = vcvtq_f64_f32(*a2);
  v9.f64[0] = a2[1].f32[0];
  v10 = vmulq_f64(v9, v9);
  v11 = vmulq_f64(v8, v8);
  v10.f64[0] = 1.0 / sqrt(vaddvq_f64(v11) + v10.f64[0]);
  v12 = vmulq_f64(v10, v9);
  v13 = vmulq_n_f64(v8, v10.f64[0]);
  v14 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
  if (*((_BYTE *)this + 314))
  {
    v15 = 0;
    v16 = *((_QWORD *)this + 7);
    v9.f64[0] = *(float *)(v16 + 8);
    *(_QWORD *)&v13.f64[1] = v14;
    v11.f64[0] = *(float *)(v16 + 20);
    v17 = sqrt((vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)v16), v13)) + vmulq_f64(v9, v12).f64[0]) * 0.5 + 0.5);
    v18 = sqrt((vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*(float32x2_t *)(v16 + 12)), v13)) + vmulq_f64(v11, v12).f64[0]) * 0.5+ 0.5);
    *__C = v17;
    __C[1] = v18;
    return v15;
  }
  if (*((_DWORD *)this + 75) < 2u)
  {
    v15 = 0;
    *__C = 1.0;
    return v15;
  }
  v119 = v14;
  v120 = v13.f64[0];
  v121 = v12;
  v125 = 0;
  v129 = 0;
  v128 = 0;
  v15 = VBAP::triangleLookup(this, a2, &v125, (float *)&v128);
  if ((_DWORD)v15)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      buf[0] = 136315906;
      *(_QWORD *)&buf[1] = "VBAP.cpp";
      v131 = 1024;
      v132 = 619;
      v133 = 2080;
      v134 = "calculateVBAPGains";
      v135 = 1024;
      v136 = 619;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: VBAP Error; Triangle lookup failed",
        (uint8_t *)buf,
        0x22u);
    }
    return v15;
  }
  v23 = (unsigned int *)(*((_QWORD *)this + 28) + 12 * v125);
  v24 = (int)v23[1];
  v25 = *((_QWORD *)this + 4);
  v20.f64[0] = *(float *)(v25 + 4 * (int)(3 * *v23 + 2));
  v21.f64[0] = *(float *)(v25 + 4 * (3 * (int)v24 + 2));
  v26 = (int)v23[2];
  v22.f64[0] = *(float *)(v25 + 4 * (3 * (int)v26 + 2));
  v27 = vcvtq_f64_f32(*(float32x2_t *)(v25 + 12 * (int)*v23));
  v28 = vcvtq_f64_f32(*(float32x2_t *)(v25 + 12 * v24));
  v29 = vcvtq_f64_f32(*(float32x2_t *)(v25 + 12 * v26));
  v30 = vaddvq_f64(vmulq_f64(v28, v27)) + vmulq_f64(v21, v20).f64[0];
  v31 = vaddvq_f64(vmulq_f64(v29, v28)) + vmulq_f64(v22, v21).f64[0];
  v37 = vmulq_f64(v29, v27);
  v37.f64[0] = vaddvq_f64(v37) + vmulq_f64(v22, v20).f64[0];
  v32 = 1.0 - v30 * v30;
  v33 = -(v37.f64[0] - v31 * v30) / v32;
  v34 = -(v31 - v37.f64[0] * v30) / v32;
  v35 = vmlaq_n_f64(vmlaq_n_f64(v29, v28, v34), v27, v33);
  v36 = vmlsq_lane_f64(v28, v27, v30, 0);
  v37.f64[0] = v21.f64[0] - v30 * v20.f64[0];
  v22.f64[0] = v22.f64[0] + v34 * v21.f64[0] + v33 * v20.f64[0];
  v38.f64[0] = v120;
  *(_QWORD *)&v38.f64[1] = v119;
  *(_QWORD *)&v39 = *(_OWORD *)&vmulq_f64(v20, v121);
  v40 = vaddvq_f64(vmulq_f64(v27, v38));
  v42 = vmulq_f64(v37, v37);
  v41 = vaddvq_f64(vmulq_f64(v36, v36)) + v42.f64[0];
  v42.f64[0] = 0.0;
  v43 = 0.0;
  if (v41 >= 0.00000999999975)
    v43 = (vaddvq_f64(vmulq_f64(v36, v38)) + vmulq_f64(v37, v121).f64[0]) / v41;
  v44 = vaddvq_f64(vmulq_f64(v35, v35)) + vmulq_f64(v22, v22).f64[0];
  if (v44 >= 0.00000999999975)
  {
    v42 = vmulq_f64(v22, v121);
    v42.f64[0] = (vaddvq_f64(vmulq_f64(v35, v38)) + v42.f64[0]) / v44;
  }
  v45 = v40 + v39 - v43 * v30 + v42.f64[0] * v33;
  v46 = v43 + v42.f64[0] * v34;
  v47.f64[0] = v45;
  v47.f64[1] = v46;
  v48 = vaddvq_f64(vmulq_f64(v47, v47)) + vmulq_f64(v42, v42).f64[0];
  v49 = 0.0;
  v50 = 0.0;
  v51 = 0.0;
  if (v48 > 0.00000999999975)
  {
    v52 = 1.0 / sqrt(v48);
    v49 = v52 * v45;
    v53 = v52 * v46;
    v51 = v52 * v42.f64[0];
    v50 = v53;
  }
  v54 = *((unsigned int *)this + 75);
  v55 = (int)*v23;
  if (v55 >= v54)
  {
    v57 = *((_QWORD *)this + 16);
    v58 = 4 * ((int)v55 - (int)v54);
    v59 = v49 + *(float *)(v57 + v58);
    *(float *)(v57 + v58) = v59;
  }
  else
  {
    v56 = v49;
    __C[v55] = v56;
  }
  if (v24 >= v54)
  {
    v61 = *((_QWORD *)this + 16);
    v62 = 4 * ((int)v24 - (int)v54);
    v63 = v50 + *(float *)(v61 + v62);
    *(float *)(v61 + v62) = v63;
  }
  else
  {
    v60 = v50;
    __C[v24] = v60;
  }
  if (v26 >= v54)
  {
    v65 = *((_QWORD *)this + 16);
    v66 = 4 * ((int)v26 - (int)v54);
    v51 = v51 + *(float *)(v65 + v66);
    *(float *)&v51 = v51;
    *(_DWORD *)(v65 + v66) = LODWORD(v51);
    memset(buf, 0, sizeof(buf));
    if (!(_DWORD)v54)
    {
      v67 = 0;
      goto LABEL_40;
    }
  }
  else
  {
    v64 = v51;
    __C[v26] = v64;
    memset(buf, 0, sizeof(buf));
  }
  v67 = 0;
  v68 = __C;
  v69 = v54;
  do
  {
    if (*v68 >= 0.00001)
      buf[v67++] = *(_DWORD *)v68;
    else
      *v68 = 0.0;
    ++v68;
    --v69;
  }
  while (v69);
LABEL_40:
  v127 = 0;
  v126 = 0;
  v70 = *((_QWORD *)this + 38);
  if (v70)
  {
    v71 = 0;
    v72 = 0;
    v73 = *((_QWORD *)this + 16);
    do
    {
      v74 = *(float *)(v73 + 4 * v71);
      if (v74 >= 0.00001)
        *((float *)&v126 + v72++) = v74;
      else
        *(_DWORD *)(v73 + 4 * v71) = 0;
      ++v71;
    }
    while (v70 > v71);
    __A = 0;
    if (v67 || v72 != 1)
    {
      if (v67 || v72 != 2)
      {
        if (v67 == 1 && v72 == 1)
        {
          v75 = sqrtf((float)((float)(*(float *)buf * *(float *)buf) + (float)v54)- (float)((float)(*(float *)buf * *(float *)buf) * (float)v54));
          v76 = *(float *)&v126 * (float)v54;
          v77 = (float)-(float)(v75 + *(float *)buf) / v76;
          __A.f32[0] = (float)(v75 - *(float *)buf) / v76;
        }
        else
        {
          if (v67 == 1 && v72 == 2)
          {
            v78 = (float)(*(float *)&v126 * *(float *)&v126) + (float)(*((float *)&v126 + 1) * *((float *)&v126 + 1));
            v79 = v78 * (float)v54;
            v80 = v79 + (float)((float)(*(float *)&v126 + *(float *)&v126) * *((float *)&v126 + 1));
            v81 = sqrtf(v80 + (float)((float)(*(float *)buf * *(float *)buf) * (float)(v78 - v79)));
            v82 = (float)(*((float *)&v126 + 1) + *(float *)&v126) * *(float *)buf;
            v83 = (float)-(float)(v82 + v81) / v80;
            v77 = (float)(v81 - v82) / v80;
          }
          else
          {
            if (v67 != 2 || v72 != 1)
              goto LABEL_64;
            v84 = sqrtf((float)((float)((float)((float)(*(float *)buf * *(float *)buf)+ (float)(*(float *)&buf[1] * *(float *)&buf[1]))+ (float)v54)+ (float)((float)(*(float *)buf + *(float *)buf) * *(float *)&buf[1]))- (float)((float)((float)(*(float *)buf * *(float *)buf)+ (float)(*(float *)&buf[1] * *(float *)&buf[1]))* (float)v54));
            v85 = *(float *)&v126 * (float)v54;
            v83 = (float)(v84 - (float)(*(float *)&buf[1] + *(float *)buf)) / v85;
            v77 = (float)-(float)(v84 + (float)(*(float *)&buf[1] + *(float *)buf)) / v85;
          }
          __A.f32[0] = v83;
        }
        __A.f32[1] = v77;
      }
      else
      {
        *(float *)&v51 = sqrtf((float)((float)((float)(*(float *)&v126 * *(float *)&v126)+ (float)((float)(*(float *)&v126 + *(float *)&v126) * *((float *)&v126 + 1)))+ (float)(*((float *)&v126 + 1) * *((float *)&v126 + 1)))+ (float)((float)((float)(*((float *)&v126 + 1) * *((float *)&v126 + 1))+ (float)(*(float *)&v126 * *(float *)&v126))* (float)v54));
        __A = vdiv_f32((float32x2_t)0xBF8000003F800000, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v51, 0));
      }
    }
    else
    {
      __A = vcvt_f32_f64(vdivq_f64((float64x2_t)xmmword_2105F1FD0, (float64x2_t)vdupq_lane_s64(COERCE__INT64(sqrt((double)v54) * *(float *)&v126), 0)));
    }
  }
  else
  {
    __A = 0;
  }
LABEL_64:
  __Ca = 0.0;
  vDSP_maxv((const float *)&__A, 1, &__Ca, 2uLL);
  if (*(_DWORD *)this)
  {
    v86 = *((_DWORD *)this + 75);
    v87 = *v23 - v86;
    if (*v23 >= v86)
    {
      v88 = *(_QWORD *)(*((_QWORD *)this + 19) + 24 * v87);
      v89 = *(_QWORD *)(*((_QWORD *)this + 19) + 24 * v87 + 8);
      v90 = v89 - v88;
      if (v89 != v88)
      {
        v91 = 0;
        v92 = v90 >> 2;
        v93 = *((_QWORD *)this + 16);
        v94 = *((_QWORD *)this + 13);
        v95 = 4 * v87;
        do
        {
          v96 = *(unsigned int *)(v88 + 4 * v91);
          __C[v96] = (float)(*(float *)(v93 + v95) / (float)(*(float *)(v94 + v95) * (float)v92)) + __C[v96];
          ++v91;
        }
        while (v92 > v91);
      }
    }
    v97 = v23[1];
    v98 = v97 - v86;
    if (v97 >= v86)
    {
      v99 = *(_QWORD *)(*((_QWORD *)this + 19) + 24 * v98);
      v100 = *(_QWORD *)(*((_QWORD *)this + 19) + 24 * v98 + 8);
      v101 = v100 - v99;
      if (v100 != v99)
      {
        v102 = 0;
        v103 = v101 >> 2;
        v104 = *((_QWORD *)this + 16);
        v105 = *((_QWORD *)this + 13);
        v106 = 4 * v98;
        do
        {
          v107 = *(unsigned int *)(v99 + 4 * v102);
          __C[v107] = (float)(*(float *)(v104 + v106) / (float)(*(float *)(v105 + v106) * (float)v103)) + __C[v107];
          ++v102;
        }
        while (v103 > v102);
      }
    }
    v108 = v23[2];
    v109 = v108 - v86;
    if (v108 >= v86)
    {
      v110 = *(_QWORD *)(*((_QWORD *)this + 19) + 24 * v109);
      v111 = *(_QWORD *)(*((_QWORD *)this + 19) + 24 * v109 + 8);
      v112 = v111 - v110;
      if (v111 != v110)
      {
        v113 = 0;
        v114 = v112 >> 2;
        v115 = *((_QWORD *)this + 16);
        v116 = *((_QWORD *)this + 13);
        v117 = 4 * v109;
        do
        {
          v118 = *(unsigned int *)(v110 + 4 * v113);
          __C[v118] = (float)(*(float *)(v115 + v117) / (float)(*(float *)(v116 + v117) * (float)v114)) + __C[v118];
          ++v113;
        }
        while (v114 > v113);
      }
    }
  }
  else
  {
    __B = 0.0;
    vDSP_sve(*((const float **)this + 16), 1, &__B, *((_QWORD *)this + 38));
    __B = __B * __Ca;
    vDSP_vsadd(__C, 1, &__B, __C, 1, *((unsigned int *)this + 75));
    v86 = *((_DWORD *)this + 75);
  }
  __B = 0.0;
  vDSP_svesq(__C, 1, &__B, v86);
  __B = 1.0 / sqrtf(__B);
  vDSP_vsmul(__C, 1, &__B, __C, 1, *((unsigned int *)this + 75));
  return v15;
}

uint64_t HOA::getTDesign(HOA *this, _OWORD *__dst, float *a3, float *__C, float *a5)
{
  uint64_t v7;
  const void *v8;
  float *v9;
  size_t v10;
  __int128 *v11;
  __int128 v12;
  float __A;

  switch((int)this)
  {
    case 0:
      v7 = 1;
      if (__dst && a3)
      {
        *(_DWORD *)__dst = 0;
        *a3 = 0.0;
      }
      break;
    case 1:
      v7 = 4;
      if (__dst && a3)
      {
        *__dst = xmmword_2105F2190;
        *(_OWORD *)a3 = xmmword_2105F21A0;
      }
      break;
    case 2:
      v7 = 12;
      if (__dst && a3)
      {
        *__dst = xmmword_2105DE3DC;
        __dst[1] = unk_2105DE3EC;
        __dst[2] = xmmword_2105DE3FC;
        v11 = &xmmword_2105DE40C;
        *((_OWORD *)a3 + 2) = xmmword_2105DE42C;
        goto LABEL_20;
      }
      break;
    case 3:
      v7 = 24;
      if (__dst && a3)
      {
        __dst[2] = xmmword_2105DE45C;
        __dst[3] = unk_2105DE46C;
        __dst[4] = xmmword_2105DE47C;
        __dst[5] = unk_2105DE48C;
        *__dst = xmmword_2105DE43C;
        __dst[1] = unk_2105DE44C;
        *((_OWORD *)a3 + 2) = xmmword_2105DE4BC;
        *((_OWORD *)a3 + 3) = unk_2105DE4CC;
        *((_OWORD *)a3 + 4) = xmmword_2105DE4DC;
        *((_OWORD *)a3 + 5) = unk_2105DE4EC;
        *(_OWORD *)a3 = xmmword_2105DE49C;
        *((_OWORD *)a3 + 1) = unk_2105DE4AC;
      }
      break;
    case 4:
      v7 = 36;
      if (__dst && a3)
      {
        __dst[2] = xmmword_2105DE51C;
        __dst[3] = unk_2105DE52C;
        __dst[8] = xmmword_2105DE57C;
        __dst[6] = xmmword_2105DE55C;
        __dst[7] = unk_2105DE56C;
        __dst[4] = xmmword_2105DE53C;
        __dst[5] = unk_2105DE54C;
        *__dst = xmmword_2105DE4FC;
        __dst[1] = unk_2105DE50C;
        v11 = &xmmword_2105DE58C;
        *((_OWORD *)a3 + 6) = xmmword_2105DE5EC;
        *((_OWORD *)a3 + 7) = unk_2105DE5FC;
        *((_OWORD *)a3 + 8) = xmmword_2105DE60C;
        *((_OWORD *)a3 + 2) = xmmword_2105DE5AC;
        *((_OWORD *)a3 + 3) = unk_2105DE5BC;
        *((_OWORD *)a3 + 4) = xmmword_2105DE5CC;
        *((_OWORD *)a3 + 5) = unk_2105DE5DC;
LABEL_20:
        v12 = v11[1];
        *(_OWORD *)a3 = *v11;
        *((_OWORD *)a3 + 1) = v12;
      }
      break;
    case 5:
      v7 = 60;
      if (__dst && a3)
      {
        __dst[12] = xmmword_2105DE6DC;
        __dst[13] = unk_2105DE6EC;
        __dst[14] = xmmword_2105DE6FC;
        __dst[8] = xmmword_2105DE69C;
        __dst[9] = unk_2105DE6AC;
        __dst[10] = xmmword_2105DE6BC;
        __dst[11] = unk_2105DE6CC;
        __dst[4] = xmmword_2105DE65C;
        __dst[5] = unk_2105DE66C;
        __dst[6] = xmmword_2105DE67C;
        __dst[7] = unk_2105DE68C;
        *__dst = xmmword_2105DE61C;
        __dst[1] = unk_2105DE62C;
        __dst[2] = xmmword_2105DE63C;
        __dst[3] = unk_2105DE64C;
        *((_OWORD *)a3 + 12) = xmmword_2105DE7CC;
        *((_OWORD *)a3 + 13) = unk_2105DE7DC;
        *((_OWORD *)a3 + 14) = xmmword_2105DE7EC;
        *((_OWORD *)a3 + 8) = xmmword_2105DE78C;
        *((_OWORD *)a3 + 9) = unk_2105DE79C;
        *((_OWORD *)a3 + 10) = xmmword_2105DE7AC;
        *((_OWORD *)a3 + 11) = unk_2105DE7BC;
        *((_OWORD *)a3 + 4) = xmmword_2105DE74C;
        *((_OWORD *)a3 + 5) = unk_2105DE75C;
        *((_OWORD *)a3 + 6) = xmmword_2105DE76C;
        *((_OWORD *)a3 + 7) = unk_2105DE77C;
        *(_OWORD *)a3 = xmmword_2105DE70C;
        *((_OWORD *)a3 + 1) = unk_2105DE71C;
        *((_OWORD *)a3 + 2) = xmmword_2105DE72C;
        *((_OWORD *)a3 + 3) = unk_2105DE73C;
      }
      break;
    case 6:
      v7 = 84;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105DE7FC, 0x150uLL);
        v8 = &unk_2105DE94C;
        v9 = a3;
        v10 = 336;
        goto LABEL_72;
      }
      break;
    case 7:
      v7 = 108;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105DEA9C, 0x1B0uLL);
        v8 = &unk_2105DEC4C;
        v9 = a3;
        v10 = 432;
        goto LABEL_72;
      }
      break;
    case 8:
      v7 = 144;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105DEDFC, 0x240uLL);
        v8 = &unk_2105DF03C;
        v9 = a3;
        v10 = 576;
        goto LABEL_72;
      }
      break;
    case 9:
      v7 = 180;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105DF27C, 0x2D0uLL);
        v8 = &unk_2105DF54C;
        v9 = a3;
        v10 = 720;
        goto LABEL_72;
      }
      break;
    case 10:
      v7 = 216;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105DF81C, 0x360uLL);
        v8 = &unk_2105DFB7C;
        v9 = a3;
        v10 = 864;
        goto LABEL_72;
      }
      break;
    case 11:
      v7 = 266;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105DFEDC, 0x428uLL);
        v8 = &unk_2105E0304;
        v9 = a3;
        v10 = 1064;
        goto LABEL_72;
      }
      break;
    case 12:
      v7 = 314;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E072C, 0x4E8uLL);
        v8 = &unk_2105E0C14;
        v9 = a3;
        v10 = 1256;
        goto LABEL_72;
      }
      break;
    case 13:
      v7 = 366;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E10FC, 0x5B8uLL);
        v8 = &unk_2105E16B4;
        v9 = a3;
        v10 = 1464;
        goto LABEL_72;
      }
      break;
    case 14:
      v7 = 422;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E1C6C, 0x698uLL);
        v8 = &unk_2105E2304;
        v9 = a3;
        v10 = 1688;
        goto LABEL_72;
      }
      break;
    case 15:
      v7 = 482;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E299C, 0x788uLL);
        v8 = &unk_2105E3124;
        v9 = a3;
        v10 = 1928;
        goto LABEL_72;
      }
      break;
    case 16:
      v7 = 546;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E38AC, 0x888uLL);
        v8 = &unk_2105E4134;
        v9 = a3;
        v10 = 2184;
        goto LABEL_72;
      }
      break;
    case 17:
      v7 = 614;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E49BC, 0x998uLL);
        v8 = &unk_2105E5354;
        v9 = a3;
        v10 = 2456;
        goto LABEL_72;
      }
      break;
    case 18:
      v7 = 686;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E5CEC, 0xAB8uLL);
        v8 = &unk_2105E67A4;
        v9 = a3;
        v10 = 2744;
        goto LABEL_72;
      }
      break;
    case 19:
      v7 = 762;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E725C, 0xBE8uLL);
        v8 = &unk_2105E7E44;
        v9 = a3;
        v10 = 3048;
        goto LABEL_72;
      }
      break;
    case 20:
      v7 = 842;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105E8A2C, 0xD28uLL);
        v8 = &unk_2105E9754;
        v9 = a3;
        v10 = 3368;
        goto LABEL_72;
      }
      break;
    case 21:
      v7 = 926;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105EA47C, 0xE78uLL);
        v8 = &unk_2105EB2F4;
        v9 = a3;
        v10 = 3704;
        goto LABEL_72;
      }
      break;
    default:
      v7 = 1014;
      if (__dst && a3)
      {
        memcpy(__dst, &unk_2105EC16C, 0xFD8uLL);
        v8 = &unk_2105ED144;
        v9 = a3;
        v10 = 4056;
LABEL_72:
        memcpy(v9, v8, v10);
      }
      break;
  }
  if (__C)
  {
    __A = 1.0;
    vDSP_vfill(&__A, __C, 1, v7);
  }
  return v7;
}

uint64_t *std::unique_ptr<DFTSetups>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  vDSP_DFT_SetupStruct *v3;
  vDSP_DFT_SetupStruct *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(vDSP_DFT_SetupStruct **)(v2 + 16);
    if (v3)
      vDSP_DFT_DestroySetup(v3);
    v4 = *(vDSP_DFT_SetupStruct **)(v2 + 8);
    if (v4)
      vDSP_DFT_DestroySetup(v4);
    MEMORY[0x212BC7928](v2, 0x1060C40CA828048);
  }
  return a1;
}

void std::__shared_ptr_emplace<caulk::lifetime_observed<std::unique_ptr<DFTSetups>,caulk::shared_instance_manager<DFTSetups>::observer>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2CA70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<caulk::lifetime_observed<std::unique_ptr<DFTSetups>,caulk::shared_instance_manager<DFTSetups>::observer>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2CA70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x212BC7928);
}

void std::__shared_ptr_emplace<caulk::lifetime_observed<std::unique_ptr<DFTSetups>,caulk::shared_instance_manager<DFTSetups>::observer>>::__on_zero_shared(_QWORD *a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  vDSP_DFT_SetupStruct *v4;
  vDSP_DFT_SetupStruct *v5;
  std::__shared_weak_count *v6;

  v2 = (os_unfair_lock_s *)a1[6];
  if (os_unfair_lock_trylock(v2))
  {
    caulk::shared_instance_manager<DFTSetups>::remove_expired((uint64_t)v2);
    os_unfair_lock_unlock(v2);
  }
  v3 = a1[5];
  a1[5] = 0;
  if (v3)
  {
    v4 = *(vDSP_DFT_SetupStruct **)(v3 + 16);
    if (v4)
      vDSP_DFT_DestroySetup(v4);
    v5 = *(vDSP_DFT_SetupStruct **)(v3 + 8);
    if (v5)
      vDSP_DFT_DestroySetup(v5);
    MEMORY[0x212BC7928](v3, 0x1060C40CA828048);
  }
  v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void caulk::shared_instance_manager<DFTSetups>::remove_expired(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  if (v1 != v2)
  {
    while (1)
    {
      v4 = v1[1];
      if (!v4 || *(_QWORD *)(v4 + 8) == -1)
        break;
      v1 += 2;
      if (v1 == v2)
        return;
    }
    if (v1 != v2)
    {
      v5 = v1 + 2;
      if (v1 + 2 != v2)
      {
        do
        {
          v6 = v5[1];
          if (v6 && *(_QWORD *)(v6 + 8) != -1)
          {
            v7 = *v5;
            *v5 = 0;
            v5[1] = 0;
            v8 = (std::__shared_weak_count *)v1[1];
            *v1 = v7;
            v1[1] = v6;
            if (v8)
              std::__shared_weak_count::__release_weak(v8);
            v1 += 2;
          }
          v5 += 2;
        }
        while (v5 != v2);
        v2 = *(uint64_t **)(a1 + 16);
      }
    }
    if (v1 != v2)
    {
      while (v2 != v1)
      {
        v9 = (std::__shared_weak_count *)*(v2 - 1);
        if (v9)
          std::__shared_weak_count::__release_weak(v9);
        v2 -= 2;
      }
      *(_QWORD *)(a1 + 16) = v1;
    }
  }
}

uint64_t MultiRadixRealFFT::Initialize(MultiRadixRealFFT *this, unsigned int a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  vDSP_DFT_SetupStruct *Setup;
  vDSP_DFT_SetupStruct *v15;
  vDSP_DFT_Setup v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  char *v40;
  __int128 v41;
  char *v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  BOOL v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t *p_shared_owners;
  unint64_t v63;
  uint64_t v64;
  __int128 v65;

  {
    v64 = operator new();
    *(_DWORD *)v64 = 0;
    *(_QWORD *)(v64 + 16) = 0;
    *(_QWORD *)(v64 + 24) = 0;
    *(_QWORD *)(v64 + 8) = 0;
    DFTSetupList<false>::instance(void)::global = v64;
  }
  v5 = DFTSetupList<false>::instance(void)::global;
  os_unfair_lock_lock((os_unfair_lock_t)DFTSetupList<false>::instance(void)::global);
  caulk::shared_instance_manager<DFTSetups>::remove_expired(v5);
  v6 = *(_QWORD **)(v5 + 8);
  v7 = *(_QWORD **)(v5 + 16);
  while (v6 != v7)
  {
    v8 = (std::__shared_weak_count *)v6[1];
    if (v8)
    {
      v9 = std::__shared_weak_count::lock(v8);
      if (v9)
      {
        v10 = v9;
        if (*v6)
        {
          v11 = *(_QWORD *)(*v6 + 16);
          if (*(_DWORD *)v11 == a2)
          {
            p_shared_owners = (unint64_t *)&v9->__shared_owners_;
            do
              v63 = __ldxr(p_shared_owners);
            while (__stxr(v63 + 1, p_shared_owners));
            do
              v46 = __ldaxr(p_shared_owners);
            while (__stlxr(v46 - 1, p_shared_owners));
            goto LABEL_54;
          }
        }
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
    }
    v6 += 2;
  }
  Setup = vDSP_DFT_zrop_CreateSetup(0, a2, vDSP_DFT_FORWARD);
  v15 = Setup;
  if (Setup)
    v16 = vDSP_DFT_zrop_CreateSetup(Setup, a2, vDSP_DFT_INVERSE);
  else
    v16 = 0;
  v17 = operator new();
  *(_DWORD *)v17 = a2;
  *(_QWORD *)(v17 + 8) = v15;
  *(_QWORD *)(v17 + 16) = v16;
  v18 = (std::__shared_weak_count *)operator new(0x38uLL);
  v19 = v18;
  v18->__shared_owners_ = 0;
  v20 = (unint64_t *)&v18->__shared_owners_;
  v18->__shared_weak_owners_ = 0;
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24CA2CA70;
  *(_QWORD *)&v65 = v18 + 1;
  v18[1].__shared_weak_owners_ = v17;
  v18[2].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *((_QWORD *)&v65 + 1) = v18;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v23 = __ldxr(p_shared_weak_owners);
  while (__stxr(v23 + 1, p_shared_weak_owners));
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)&v18[1];
  v18[1].__shared_owners_ = (uint64_t)v18;
  do
    v24 = __ldaxr(v20);
  while (__stlxr(v24 - 1, v20));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v19);
  }
  v26 = *(char **)(v5 + 16);
  v25 = *(_QWORD *)(v5 + 24);
  if ((unint64_t)v26 >= v25)
  {
    v31 = *(char **)(v5 + 8);
    v32 = (v26 - v31) >> 4;
    v33 = v32 + 1;
    if ((unint64_t)(v32 + 1) >> 60)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v34 = v25 - (_QWORD)v31;
    if (v34 >> 3 > v33)
      v33 = v34 >> 3;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
      v35 = 0xFFFFFFFFFFFFFFFLL;
    else
      v35 = v33;
    if (v35 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v36 = (char *)operator new(16 * v35);
    v37 = &v36[16 * v32];
    *(_OWORD *)v37 = v65;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 16);
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
      v31 = *(char **)(v5 + 8);
      v26 = *(char **)(v5 + 16);
    }
    v40 = &v36[16 * v35];
    v30 = v37 + 16;
    if (v26 == v31)
    {
      *(_QWORD *)(v5 + 8) = v37;
      *(_QWORD *)(v5 + 16) = v30;
      *(_QWORD *)(v5 + 24) = v40;
    }
    else
    {
      do
      {
        v41 = *((_OWORD *)v26 - 1);
        v26 -= 16;
        *((_OWORD *)v37 - 1) = v41;
        v37 -= 16;
        *(_QWORD *)v26 = 0;
        *((_QWORD *)v26 + 1) = 0;
      }
      while (v26 != v31);
      v31 = *(char **)(v5 + 8);
      v42 = *(char **)(v5 + 16);
      *(_QWORD *)(v5 + 8) = v37;
      *(_QWORD *)(v5 + 16) = v30;
      *(_QWORD *)(v5 + 24) = v40;
      while (v42 != v31)
      {
        v43 = (std::__shared_weak_count *)*((_QWORD *)v42 - 1);
        if (v43)
          std::__shared_weak_count::__release_weak(v43);
        v42 -= 16;
      }
    }
    v27 = v65;
    if (v31)
      operator delete(v31);
  }
  else
  {
    v27 = v65;
    *(_OWORD *)v26 = v65;
    v10 = (std::__shared_weak_count *)*((_QWORD *)&v65 + 1);
    if (*((_QWORD *)&v65 + 1))
    {
      v28 = (unint64_t *)(*((_QWORD *)&v65 + 1) + 16);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = v26 + 16;
  }
  *(_QWORD *)(v5 + 16) = v30;
  v11 = *(_QWORD *)(v27 + 16);
  if (v10)
  {
    v44 = (unint64_t *)&v10->__shared_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    do
      v46 = __ldaxr(v44);
    while (__stlxr(v46 - 1, v44));
LABEL_54:
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v5);
  if (*(_QWORD *)(v11 + 8) && *(_QWORD *)(v11 + 16))
  {
    if (!v10)
    {
      v49 = 0;
      v50 = 0;
      v53 = 1;
      goto LABEL_74;
    }
    v47 = (unint64_t *)&v10->__shared_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v49 = 0;
    v50 = v10;
  }
  else
  {
    v11 = 0;
    v49 = 1936292453;
    if (!v10)
    {
      v53 = 1;
      v50 = 0;
      goto LABEL_74;
    }
    v50 = 0;
  }
  v51 = (unint64_t *)&v10->__shared_owners_;
  do
    v52 = __ldaxr(v51);
  while (__stlxr(v52 - 1, v51));
  if (!v52)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
  v53 = v50 == 0;
  if (v50)
  {
    v54 = (unint64_t *)&v50->__shared_owners_;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
LABEL_74:
  v56 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  *(_QWORD *)this = v11;
  *((_QWORD *)this + 1) = v50;
  if (!v56)
    goto LABEL_78;
  v57 = (unint64_t *)&v56->__shared_owners_;
  do
    v58 = __ldaxr(v57);
  while (__stlxr(v58 - 1, v57));
  if (!v58)
  {
    ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
    std::__shared_weak_count::__release_weak(v56);
    if (v53)
      return v49;
  }
  else
  {
LABEL_78:
    if (v53)
      return v49;
  }
  v59 = (unint64_t *)&v50->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (!v60)
  {
    ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
    std::__shared_weak_count::__release_weak(v50);
  }
  return v49;
}

void sub_2105C7400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_2105C741C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  os_unfair_lock_s *v4;
  va_list va;

  va_start(va, a4);
  std::unique_ptr<DFTSetups>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  os_unfair_lock_unlock(v4);
  _Unwind_Resume(a1);
}

uint64_t MultiRadixRealFFT::Size(MultiRadixRealFFT *this)
{
  if (*(_QWORD *)this)
    return **(unsigned int **)this;
  else
    return 0;
}

uint64_t MultiRadixRealFFT::RealInPlaceTransform(MultiRadixRealFFT *this, DSPSplitComplex *a2, int a3, float a4)
{
  uint64_t v8;
  float __B;

  if (!*(_QWORD *)this)
    abort();
  v8 = 16;
  if (a3 == 1)
    v8 = 8;
  vDSP_DFT_Execute(*(const vDSP_DFT_SetupStruct **)(*(_QWORD *)this + v8), a2->realp, a2->imagp, a2->realp, a2->imagp);
  if (a3 == 1)
  {
    __B = a4 * 0.5;
    vDSP_vsmul(a2->realp, 1, &__B, a2->realp, 1, (unint64_t)**(unsigned int **)this >> 1);
    vDSP_vsmul(a2->imagp, 1, &__B, a2->imagp, 1, (unint64_t)**(unsigned int **)this >> 1);
  }
  return 0;
}

uint64_t HOA::RotationMatrix::RotationMatrix(uint64_t a1, unsigned int a2, int a3, char a4)
{
  unsigned int v4;
  unint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t *v25;
  unint64_t *v26;
  int v28;
  const char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  unsigned int v37;
  uint64_t v38;

  v4 = a2;
  v38 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 48) = a3;
  *(_BYTE *)(a1 + 52) = a4;
  if (a2 >= 4 && a3 == 2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v28 = 136316162;
      v29 = "HOA.cpp";
      v30 = 1024;
      v32 = 2080;
      v31 = 29;
      v33 = "RotationMatrix";
      v34 = 1024;
      v35 = 29;
      v36 = 1024;
      v37 = v4;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Trying to create a HOA rotation matrix of order = %d > 3 with FuMa norm"
        "alization, capping to order 3",
        (uint8_t *)&v28,
        0x28u);
    }
    v4 = 3;
  }
  v6 = v4 + 1;
  v28 = 0;
  std::vector<float>::assign((char **)a1, (8 * v6 * (unint64_t)v6 - 2) * v6 / 6, &v28);
  v7 = *(_BYTE **)(a1 + 24);
  if (v6 > (uint64_t)(*(_QWORD *)(a1 + 40) - (_QWORD)v7) >> 4)
  {
    v8 = *(_BYTE **)(a1 + 32);
    v9 = (char *)operator new(16 * v6);
    v10 = &v9[(v8 - v7) & 0xFFFFFFFFFFFFFFF0];
    v11 = v10;
    if (v8 != v7)
    {
      v12 = &v9[(v8 - v7) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        v11 = v12 - 16;
        *((_OWORD *)v12 - 1) = *((_OWORD *)v8 - 1);
        v8 -= 16;
        v12 -= 16;
      }
      while (v8 != v7);
    }
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = &v9[16 * v6];
    if (v7)
      operator delete(v7);
  }
  v13 = 0;
  v14 = *(unint64_t **)(a1 + 32);
  do
  {
    v16 = ((2 * v13) | 1) * ((2 * v13) | 1);
    v17 = *(_QWORD *)a1 + 4 * ((8 * v13 * v13 - 2) * v13 / 6uLL);
    v18 = *(_QWORD *)(a1 + 40);
    if ((unint64_t)v14 < v18)
    {
      *v14 = v17;
      v14[1] = v16;
      v15 = v14 + 2;
    }
    else
    {
      v19 = *(unint64_t **)(a1 + 24);
      v20 = ((char *)v14 - (char *)v19) >> 4;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 60)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v22 = v18 - (_QWORD)v19;
      if (v22 >> 3 > v21)
        v21 = v22 >> 3;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
        v23 = 0xFFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v24 = (char *)operator new(16 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = (unint64_t *)&v24[16 * v20];
      *v25 = v17;
      v25[1] = v16;
      v26 = v25;
      if (v14 != v19)
      {
        do
        {
          *((_OWORD *)v26 - 1) = *((_OWORD *)v14 - 1);
          v26 -= 2;
          v14 -= 2;
        }
        while (v14 != v19);
        v14 = *(unint64_t **)(a1 + 24);
      }
      v15 = v25 + 2;
      *(_QWORD *)(a1 + 24) = v26;
      *(_QWORD *)(a1 + 32) = v25 + 2;
      *(_QWORD *)(a1 + 40) = &v24[16 * v23];
      if (v14)
        operator delete(v14);
    }
    *(_QWORD *)(a1 + 32) = v15;
    ++v13;
    v14 = v15;
  }
  while (v13 <= v4);
  return a1;
}

void sub_2105C7830(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
    v4 = *(void **)v1;
    if (!*(_QWORD *)v1)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v4 = *(void **)v1;
    if (!*(_QWORD *)v1)
      goto LABEL_3;
  }
  *(_QWORD *)(v1 + 8) = v4;
  operator delete(v4);
  _Unwind_Resume(exception_object);
}

void HOA::RotationMatrix::setRotationMatrixYPR(float **this, float a2, float a3, float a4)
{
  float **v4;
  float **v5;
  float **v6;
  vDSP_Stride v7;
  float *v8;
  float *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  float v14;
  float v15;
  __float2 v16;
  __float2 v17;
  __float2 v18;
  __float2 v19;
  float *v20;
  float v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  float v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  float v69;
  float v70;
  int v71;
  uint64_t v72;
  int v73;
  float v74;
  float v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  float v79;
  int v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  uint64_t v86;
  int v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;
  float v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  unint64_t v100;
  float **v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t v106;
  size_t v107;
  float *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  size_t v131;
  float __A;
  uint64_t v133;

  v4 = this;
  v133 = *MEMORY[0x24BDAC8D0];
  if (a2 == 0.0 && a3 == 0.0 && a4 == 0.0)
  {
    vDSP_vclr(*this, 1, this[1] - *this);
    v5 = (float **)v4[3];
    v6 = (float **)v4[4];
    if (v5 != v6)
    {
      v7 = 2;
      do
      {
        __A = 1.0;
        v8 = *v5;
        v5 += 2;
        vDSP_vfill(&__A, v8, v7, (v7 - 1));
        v7 += 2;
      }
      while (v5 != v6);
    }
    return;
  }
  v9 = this[3];
  v10 = (char *)this[4] - (char *)v9;
  v11 = v10 >> 4;
  v12 = (v10 >> 4) - 1;
  **(_DWORD **)v9 = 1065353216;
  if (v10 >= 0x11 && (v10 >> 4) != 1)
  {
    v14 = a4 * 0.017453;
    v15 = a3 * 0.017453;
    v16 = __sincosf_stret(a2 * -0.017453);
    v17 = __sincosf_stret(v15);
    v19 = __sincosf_stret(v14);
    v20 = (float *)*((_QWORD *)v9 + 2);
    *v20 = -(float)((float)((float)(v17.__sinval * v16.__sinval) * v19.__sinval) - (float)(v19.__cosval * v16.__cosval));
    v20[1] = -(float)((float)((float)(v17.__sinval * v16.__sinval) * v19.__cosval) + (float)(v19.__sinval * v16.__cosval));
    v20[2] = v17.__cosval * v16.__sinval;
    v20[3] = v19.__sinval * v17.__cosval;
    v20[4] = v19.__cosval * v17.__cosval;
    v20[5] = v17.__sinval;
    v21 = -(float)(v16.__cosval * v17.__sinval);
    v20[6] = -(float)((float)(v19.__cosval * v16.__sinval) - (float)(v21 * v19.__sinval));
    v20[7] = (float)(v19.__sinval * v16.__sinval) + (float)(v21 * v19.__cosval);
    v20[8] = v17.__cosval * v16.__cosval;
    if ((_DWORD)v12 == 1)
      goto LABEL_92;
    v108 = v9;
    v101 = v4;
    v22 = (2 * v12);
    v23 = (2 * v12) | 1;
    v24 = ((uint64_t (*)(_QWORD))MEMORY[0x24BDAC7A8])(v18);
    v25 = (char *)&v101 - ((4 * (v23 * v23) + 15) & 0x3FFFFFFF0);
    MEMORY[0x24BDAC7A8](v24);
    v27 = (char *)&v101 - v26;
    bzero((char *)&v101 - v26, 4 * (v23 * v23));
    v28 = 0;
    v29 = 0;
    v120 = v23;
    v30 = *((_DWORD *)v20 + 2);
    *(_QWORD *)v27 = *(_QWORD *)v20;
    *((_DWORD *)v27 + 2) = v30;
    v31 = &v27[4 * v23];
    v32 = *(_QWORD *)(v20 + 3);
    v33 = &v27[8 * v23];
    v106 = (8 * ((unint64_t)(int)v22 >> 1)) | 4;
    v105 = (v11 - 2);
    *((float *)v31 + 2) = v20[5];
    v104 = (v12 << 33) ^ 0xFFFFFFFE00000000;
    v115 = ((unint64_t)v12 << 33) | 0x100000000;
    *(_QWORD *)v31 = v32;
    v34 = *((_QWORD *)v20 + 3);
    v119 = v22 | 1;
    v35 = (8 * v11 - 8) | 3;
    *((float *)v33 + 2) = v20[8];
    LODWORD(v32) = 4 * v11;
    v36 = (4 * v11 - 4);
    *(_QWORD *)v33 = v34;
    v103 = v36 | 2;
    v37 = (-2 * v11);
    v38 = 4 * (v23 * v23);
    v114 = v37 | 1;
    v102 = -(int)v32 | 1;
    v39 = -2;
    v122 = 3;
    v124 = -1;
    v113 = 5;
    v40 = 2;
    v41 = 20;
    v125 = v36 | 1;
    v42 = v36 | 1;
    v107 = v38;
    while (1)
    {
      v121 = v41;
      v112 = v29;
      v109 = 8 * v29;
      bzero(v25, v38);
      v43 = 0;
      v118 = v40 - 1;
      v44 = 2 * ((int)v40 - 1);
      v129 = v40 * v120;
      v128 = v40 * v120 + v44;
      v117 = v40 - 2;
      v116 = v44;
      v126 = (v40 - 2) * v120 + v44;
      v127 = (v40 - 2) * v120;
      v45 = v28 + 4;
      v131 = -1;
      v110 = v42;
      v130 = v42;
      v46 = v102;
      v111 = v35;
      v47 = v35;
      v48 = v104;
      v49 = v39;
      do
      {
        v50 = 0;
        if ((int)v49 >= 0)
          v51 = v49;
        else
          v51 = -(int)v49;
        v52 = v51 + v40;
        v53 = v51 + v40 - 1;
        v54 = v40 - v51;
        v55 = v49 + v40;
        v56 = (float)((v53 << (v49 == 0)) * v52);
        if (v49)
          v57 = 0.5;
        else
          v57 = -0.5;
        v58 = (float)((v54 - 1) * v54);
        if (v49)
          v59 = 1.0;
        else
          v59 = 0.0;
        v60 = v59 * -0.5;
        v61 = (v49 + v118) * v120;
        v62 = v61 + v116;
        v63 = v55 * (int)v120 + (int)v116;
        v64 = v55 * (int)v120;
        if (v49 == -1)
          v65 = 0.0;
        else
          v65 = 1.0;
        v66 = (v118 + ~(_DWORD)v49) * v120;
        v67 = v66 + (int)v116;
        v68 = v66;
        if (v49 == -1)
          v69 = 1.0;
        else
          v69 = 0.0;
        v70 = sqrtf(v69 + 1.0);
        v71 = (v117 + v49) * v120;
        v72 = v71 + (int)v116;
        v73 = v40 - v49;
        if (v49 == 1)
          v74 = 1.0;
        else
          v74 = 0.0;
        v75 = v74 + 1.0;
        v76 = v73 * v120;
        v77 = v73 * (int)v120 + (int)v116;
        v78 = v76;
        if (v49 == 1)
          v79 = 0.0;
        else
          v79 = 1.0;
        v80 = 4;
        v123 = v48;
        v81 = sqrtf(v75);
        do
        {
          LODWORD(v86) = v39 + v50;
          if ((int)v39 + (int)v50 >= 0)
            v86 = v86;
          else
            v86 = -(int)v86;
          if (v40 == v86)
            v87 = (2 * v40 - 1) * 2 * v40;
          else
            v87 = v50 * (v28 + v80);
          v88 = 1.0 / (float)v87;
          v89 = sqrtf((float)((v49 + v40) * (v40 - v49)) * v88);
          if (v89 != 0.0)
          {
            if (v50)
            {
              if (v45 == v50)
                v90 = -(float)((float)(*(float *)&v27[4 * v61] * v20[3]) - (float)(*(float *)&v27[4 * v62] * v20[5]));
              else
                v90 = *(float *)&v27[v48 >> 30] * v20[4];
            }
            else
            {
              v90 = (float)(*(float *)&v27[4 * v61] * v20[5]) + (float)(*(float *)&v27[4 * v62] * v20[3]);
            }
            v89 = v90 * v89;
          }
          v91 = v57 * sqrtf(v56 * v88);
          v85 = v60 * sqrtf(v58 * v88);
          if (v91 == 0.0)
          {
            if (v85 != 0.0)
            {
              if (v49 >= 1)
              {
LABEL_74:
                if (v50)
                {
                  if (v45 == v50)
                    v84 = (float)-(float)((float)(*(float *)&v27[4 * v64] * v20[6])
                                        - (float)(*(float *)&v27[4 * v63] * v20[8]))
                        - (float)((float)(*(float *)&v27[4 * v68] * *v20) - (float)(*(float *)&v27[4 * v67] * v20[2]));
                  else
                    v84 = (float)(*(float *)&v27[4 * (int)v130 + 4 * (int)v50] * v20[1])
                        + (float)(*(float *)&v27[4 * (int)v131 + 4 * (int)v50] * v20[7]);
                }
                else
                {
                  v84 = (float)((float)(*(float *)&v27[4 * v68] * v20[2]) + (float)(*(float *)&v27[4 * v67] * *v20))
                      + (float)((float)(*(float *)&v27[4 * v64] * v20[8]) + (float)(*(float *)&v27[4 * v63] * v20[6]));
                }
              }
              else
              {
LABEL_84:
                if (v50)
                {
                  if (v45 == v50)
                  {
                    v82 = -(float)((float)(*(float *)&v27[4 * v71] * v20[6]) - (float)(*(float *)&v27[4 * v72] * v20[8]));
                    v83 = -(float)((float)(*(float *)&v27[4 * v78] * *v20) - (float)(*(float *)&v27[4 * v77] * v20[2]));
                  }
                  else
                  {
                    v82 = *(float *)&v27[4 * v46 + 4 * (int)v50] * v20[7];
                    v83 = *(float *)&v27[4 * v47 + 4 * (int)v50] * v20[1];
                  }
                }
                else
                {
                  v82 = (float)(*(float *)&v27[4 * v71] * v20[8]) + (float)(*(float *)&v27[4 * v72] * v20[6]);
                  v83 = (float)(*(float *)&v27[4 * v78] * v20[2]) + (float)(*(float *)&v27[4 * v77] * *v20);
                }
                v84 = v82 - v83;
              }
              v85 = v84 * v85;
            }
          }
          else
          {
            if (!v49)
            {
              if (v50)
              {
                if (v45 == v50)
                  v94 = (float)-(float)((float)(*(float *)&v27[4 * v129] * v20[6])
                                      - (float)(*(float *)&v27[4 * v128] * v20[8]))
                      - (float)((float)(*(float *)&v27[4 * v127] * *v20) - (float)(*(float *)&v27[4 * v126] * v20[2]));
                else
                  v94 = (float)(*(float *)&v27[4 * (int)v124 + 4 * (int)v50] * v20[1])
                      + (float)(*(float *)&v27[4 * (int)v125 + 4 * (int)v50] * v20[7]);
              }
              else
              {
                v94 = (float)((float)(*(float *)&v27[4 * v127] * v20[2]) + (float)(*(float *)&v27[4 * v126] * *v20))
                    + (float)((float)(*(float *)&v27[4 * v129] * v20[8]) + (float)(*(float *)&v27[4 * v128] * v20[6]));
              }
              goto LABEL_83;
            }
            if (v49 < 1)
            {
              if (v50)
              {
                if (v45 == v50)
                {
                  v95 = -(float)((float)(*(float *)&v27[4 * v64] * v20[6]) - (float)(*(float *)&v27[4 * v63] * v20[8]));
                  v96 = -(float)((float)(*(float *)&v27[4 * v68] * *v20) - (float)(*(float *)&v27[4 * v67] * v20[2]));
                }
                else
                {
                  v95 = *(float *)&v27[4 * (int)v131 + 4 * (int)v50] * v20[7];
                  v96 = *(float *)&v27[4 * (int)v130 + 4 * (int)v50] * v20[1];
                }
              }
              else
              {
                v95 = (float)(*(float *)&v27[4 * v64] * v20[8]) + (float)(*(float *)&v27[4 * v63] * v20[6]);
                v96 = (float)(*(float *)&v27[4 * v68] * v20[2]) + (float)(*(float *)&v27[4 * v67] * *v20);
              }
              v94 = (float)(v95 * v65) + (float)(v96 * v70);
LABEL_83:
              v91 = v94 * v91;
              if (v85 != 0.0)
                goto LABEL_84;
              goto LABEL_41;
            }
            if (v50)
            {
              if (v45 == v50)
              {
                v92 = -(float)((float)(*(float *)&v27[4 * v71] * v20[6]) - (float)(*(float *)&v27[4 * v72] * v20[8]));
                v93 = -(float)((float)(*(float *)&v27[4 * v78] * *v20) - (float)(*(float *)&v27[4 * v77] * v20[2]));
              }
              else
              {
                v92 = *(float *)&v27[4 * v46 + 4 * (int)v50] * v20[7];
                v93 = *(float *)&v27[4 * v47 + 4 * (int)v50] * v20[1];
              }
            }
            else
            {
              v92 = (float)(*(float *)&v27[4 * v71] * v20[8]) + (float)(*(float *)&v27[4 * v72] * v20[6]);
              v93 = (float)(*(float *)&v27[4 * v78] * v20[2]) + (float)(*(float *)&v27[4 * v77] * *v20);
            }
            v91 = (float)-(float)((float)(v93 * v79) - (float)(v92 * v81)) * v91;
            if (v85 != 0.0)
              goto LABEL_74;
          }
LABEL_41:
          *(float *)&v25[4 * v43 + 4 * (int)v50++] = v91 + (float)(v89 + v85);
          v48 += 0x100000000;
          --v80;
        }
        while ((_DWORD)v28 + 5 != (_DWORD)v50);
        ++v49;
        v48 = v123 + v115;
        v43 += v119;
        v47 += v114;
        v46 += v119;
        v130 += v114;
        v131 += v119;
      }
      while (v122 != (_DWORD)v49);
      v97 = 0;
      v131 = v109 + 20;
      v130 = *(_QWORD *)&v108[4 * v40];
      v98 = v25;
      v99 = v113;
      v100 = v106;
      do
      {
        memcpy((void *)(v130 + (v97 & 0x3FFFFFFFCLL)), v98, v131);
        v98 += v100;
        v97 += v121;
        --v99;
      }
      while (v99);
      v38 = v107;
      memcpy(v27, v25, v107);
      ++v40;
      --v39;
      ++v122;
      v29 = v112 + 1;
      v113 += 2;
      v28 += 2;
      v35 = v111 + v103;
      v42 = v110 + v103;
      v124 += v119;
      v125 += v119;
      v41 = v121 + 8;
      if (v112 + 1 == v105)
      {
        v4 = v101;
LABEL_92:
        if (*((_DWORD *)v4 + 12) == 2)
          HOA::RotationMatrix::toFuMa((HOA::RotationMatrix *)v4);
        if (*((_BYTE *)v4 + 52))
          HOA::RotationMatrix::transposePrivate((HOA::RotationMatrix *)v4);
        return;
      }
    }
  }
}

void HOA::RotationMatrix::toFuMa(HOA::RotationMatrix *this)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;
  unsigned int v10;
  int v11;
  float *v12;
  __int128 __C;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  int v25;
  __int128 __A;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _OWORD v30[2];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  int v37;
  __int128 __B;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v1 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4) - v1;
  v3 = (v2 >> 4) - 1;
  if (v2 >= 0x11 && (v2 >> 4) != 1)
  {
    __B = 0u;
    v39 = 0u;
    LODWORD(v40) = 0;
    DWORD1(__B) = 1065353216;
    __asm { FMOV            V8.2S, #1.0 }
    *(_QWORD *)((char *)&v39 + 4) = _D8;
    *(_QWORD *)&__A = 0;
    v27 = 0u;
    *((_QWORD *)&__A + 1) = _D8;
    HIDWORD(v27) = 1065353216;
    LODWORD(v28) = 0;
    LODWORD(v15) = 0;
    __C = 0u;
    v14 = 0u;
    vDSP_mmul(*(const float **)(v1 + 16), 1, (const float *)&__B, 1, (float *)&__C, 1, 3uLL, 3uLL, 3uLL);
    vDSP_mmul((const float *)&__A, 1, (const float *)&__C, 1, *(float **)(*((_QWORD *)this + 3) + 16), 1, 3uLL, 3uLL, 3uLL);
    if (v3 != 1)
    {
      v42 = 0u;
      v43 = 0u;
      LODWORD(v44) = 0;
      v40 = 0u;
      v41 = 0u;
      __B = 0u;
      v39 = 0u;
      LODWORD(v39) = 1065353216;
      HIDWORD(v39) = 1065353216;
      DWORD2(v40) = 1065353216;
      LODWORD(v42) = 1065353216;
      HIDWORD(v43) = 1065353216;
      memset(v30, 0, sizeof(v30));
      LODWORD(v31) = 0;
      v28 = 0u;
      v29 = 0u;
      __A = 0u;
      v27 = 0u;
      DWORD2(__A) = 1065353216;
      LODWORD(v28) = 1065353216;
      HIDWORD(v28) = 1065353216;
      *(_QWORD *)((char *)v30 + 12) = _D8;
      LODWORD(v19) = 0;
      v17 = 0u;
      v18 = 0u;
      v15 = 0u;
      v16 = 0u;
      __C = 0u;
      v14 = 0u;
      vDSP_mmul(*(const float **)(*((_QWORD *)this + 3) + 32), 1, (const float *)&__B, 1, (float *)&__C, 1, 5uLL, 5uLL, 5uLL);
      vDSP_mmul((const float *)&__A, 1, (const float *)&__C, 1, *(float **)(*((_QWORD *)this + 3) + 32), 1, 5uLL, 5uLL, 5uLL);
      if (v3 != 2)
      {
        v50 = 0;
        v46 = xmmword_2105F1094;
        v47 = unk_2105F10A4;
        v48 = xmmword_2105F10B4;
        v49 = unk_2105F10C4;
        v42 = xmmword_2105F1054;
        v43 = unk_2105F1064;
        v44 = xmmword_2105F1074;
        v45 = unk_2105F1084;
        __B = xmmword_2105F1014;
        v39 = *(_OWORD *)algn_2105F1024;
        v40 = xmmword_2105F1034;
        v41 = unk_2105F1044;
        v33 = xmmword_2105F1158;
        v34 = unk_2105F1168;
        v35 = xmmword_2105F1178;
        v36 = unk_2105F1188;
        v30[0] = xmmword_2105F1118;
        v30[1] = unk_2105F1128;
        v31 = xmmword_2105F1138;
        v32 = unk_2105F1148;
        __A = xmmword_2105F10D8;
        v27 = unk_2105F10E8;
        v28 = xmmword_2105F10F8;
        v29 = unk_2105F1108;
        v37 = 0;
        v25 = 0;
        v23 = 0u;
        v24 = 0u;
        v21 = 0u;
        v22 = 0u;
        v19 = 0u;
        v20 = 0u;
        v17 = 0u;
        v18 = 0u;
        v15 = 0u;
        v16 = 0u;
        __C = 0u;
        v14 = 0u;
        vDSP_mmul(*(const float **)(*((_QWORD *)this + 3) + 48), 1, (const float *)&__B, 1, (float *)&__C, 1, 7uLL, 7uLL, 7uLL);
        vDSP_mmul((const float *)&__A, 1, (const float *)&__C, 1, *(float **)(*((_QWORD *)this + 3) + 48), 1, 7uLL, 7uLL, 7uLL);
        if (v3 >= 4)
        {
          v10 = 4;
          v11 = 9;
          do
          {
            v12 = *(float **)(*((_QWORD *)this + 3) + 16 * v10);
            if (v12)
              vDSP_vclr(v12, 1, (v11 * v11));
            ++v10;
            v11 += 2;
          }
          while (v10 <= v3);
        }
      }
    }
  }
}

void HOA::RotationMatrix::transposePrivate(HOA::RotationMatrix *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  float *v7;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD v15[2];

  v15[1] = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  MEMORY[0x24BDAC7A8](this);
  v7 = (float *)((char *)v15 - v6);
  if (v5 >= 0x11 && (v5 & 0xFFFFFFFF0) != 16)
  {
    bzero((char *)v15 - v6, 4 * v4);
    v9 = 1;
    v10 = 3;
    do
    {
      v11 = v3 + 16 * v9;
      v12 = *(float **)v11;
      if (*(_QWORD *)v11)
      {
        v13 = *(_QWORD *)(v11 + 8);
        vDSP_mtrans(*(const float **)v11, 1, v7, 1, v10, v10);
        memcpy(v12, v7, 4 * v13);
        v3 = *((_QWORD *)this + 3);
        v2 = *((_QWORD *)this + 4);
      }
      ++v9;
      v10 += 2;
      if ((unint64_t)(v2 - v3) <= 0x10)
        v14 = 0;
      else
        v14 = ((unint64_t)(v2 - v3) >> 4) - 1;
    }
    while (v9 <= v14);
  }
}

uint64_t HOA::RotationMatrix::toRegularMatrix(uint64_t a1, char *a2, uint64_t a3, int a4)
{
  unint64_t v4;
  unsigned int v5;
  int v6;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  int v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int v30;
  unint64_t v31;
  unsigned int v32;
  unsigned int v33;
  BOOL v34;
  BOOL v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  __int128 *v39;
  __int128 v40;
  __int128 v41;
  char *v42;
  int v44;
  unsigned int v45;
  unint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  int v52;
  unsigned int v53;
  int v54;
  uint64_t v55;

  v4 = *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  if (v4 <= 0x10)
    v5 = 1;
  else
    v5 = v4 >> 4;
  v6 = v5 * v5;
  if (a3 != v6 * v6)
    return 4294967246;
  bzero(a2, 4 * a3);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32) - v10;
  if (v11 <= 0x10)
    v12 = 0;
  else
    v12 = (v11 >> 4) - 1;
  if (v5 <= 1)
    v13 = 1;
  else
    v13 = v5;
  if (*(unsigned __int8 *)(a1 + 52) == a4)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = (v6 + 1);
    v18 = 1;
    do
    {
      if (v18 <= 1)
        v19 = 1;
      else
        v19 = v18;
      if (v12 >= v16)
        v20 = *(_QWORD *)(v10 + 16 * v16);
      else
        v20 = 0;
      if ((v16 & 0x7FFFFFFE) > 5)
      {
        v27 = 0;
        v28 = 0;
        v29 = 2 * v16;
        v30 = v14;
        do
        {
          v31 = 0;
          v32 = v14 + v6 * v28;
          v33 = v18 * v28;
          v34 = __CFADD__(v32, v29);
          v35 = __CFADD__(v33, v29);
          if (!v34 && !v35 && (unint64_t)&a2[4 * v32 - v20 + -4 * v33] >= 0x20)
          {
            v36 = v27;
            v37 = v30;
            v38 = v15 & 0xFFFFFFF8;
            do
            {
              v39 = (__int128 *)(v20 + 4 * v36);
              v40 = *v39;
              v41 = v39[1];
              v42 = &a2[4 * v37];
              *(_OWORD *)v42 = v40;
              *((_OWORD *)v42 + 1) = v41;
              v37 += 8;
              v36 += 8;
              v38 -= 8;
            }
            while (v38);
            v31 = (2 * v16) & 0xFFFFFFF8;
          }
          do
          {
            *(_DWORD *)&a2[4 * (v30 + v31)] = *(_DWORD *)(v20 + 4 * (v27 + v31));
            ++v31;
          }
          while (v31 < ((2 * (_DWORD)v16) | 1u));
          ++v28;
          v30 += v6;
          v27 += v15 + 1;
        }
        while (v28 != v19);
      }
      else
      {
        v21 = 0;
        v22 = 0;
        v23 = v14;
        do
        {
          v24 = v21;
          v25 = v23;
          v26 = v15 + 1;
          do
          {
            *(_DWORD *)&a2[4 * v25++] = *(_DWORD *)(v20 + 4 * v24++);
            --v26;
          }
          while (v26);
          ++v22;
          v23 += v6;
          v21 += v18;
        }
        while (v22 != (_DWORD)v19);
      }
      ++v16;
      v18 += 2;
      v14 += v17;
      v15 += 2;
      v17 += (2 * v6 + 2);
    }
    while (v16 != v13);
  }
  else
  {
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = v6 + 1;
    v48 = 1;
    do
    {
      if (v48 <= 1)
        v49 = 1;
      else
        v49 = v48;
      if (v12 >= v46)
        v50 = *(_QWORD *)(v10 + 16 * v46);
      else
        v50 = 0;
      v51 = 0;
      v52 = v44;
      do
      {
        v53 = v51;
        v54 = v52;
        v55 = v45 + 1;
        do
        {
          *(_DWORD *)&a2[4 * v54++] = *(_DWORD *)(v50 + 4 * v53);
          v53 += v48;
          --v55;
        }
        while (v55);
        ++v51;
        v52 += v6;
      }
      while (v51 != v49);
      ++v46;
      v48 += 2;
      v45 += 2;
      v44 += v47;
      v47 += 2 * v6 + 2;
    }
    while (v46 != v13);
  }
  return 0;
}

float HOA::legendre(HOA *this, int a2, float result)
{
  int v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float v21;
  float v22;
  float v23;
  int v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  float v46;
  float v47;
  float v48;
  float v49;
  float v50;
  float v51;
  float v52;
  float v53;
  float v54;
  float v55;
  float v56;
  float v57;
  float v58;
  float v59;
  float v60;
  float v61;
  float v62;
  float v63;
  float v64;
  float v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  float v71;
  float v72;
  float v73;
  int v74;
  float v75;
  float v76;
  float v77;
  float v78;
  float v79;
  float v80;
  float v81;
  float v82;
  float v83;
  float v84;
  float v85;
  float v86;
  float v87;
  float v88;
  float v89;
  float v90;
  float v91;
  float v92;
  float v93;
  float v94;
  float v95;

  if (a2 >= (int)this)
    v3 = (int)this;
  else
    v3 = a2;
  v4 = 1.0;
  switch((int)this)
  {
    case 0:
      goto LABEL_30;
    case 1:
      if (v3)
        return -sqrtf(-(float)((float)(result * result) + -1.0));
      return result;
    case 2:
      if (v3 == 2)
        return 3.0 - (float)((float)(result * result) * 3.0);
      if (v3 == 1)
      {
        v11 = result * -3.0;
        v12 = -(float)((float)(result * result) + -1.0);
        goto LABEL_40;
      }
      v4 = 0.0;
      if (v3)
LABEL_30:
        result = v4;
      else
        result = (float)((float)(result * result) * 1.5) + -0.5;
      break;
    case 3:
      if (v3 == 2)
      {
        result = (float)(result * 15.0) - (float)((float)(result * result) * (float)(result * 15.0));
      }
      else if (v3 == 1)
      {
        v13 = result * result;
        v11 = (float)(v13 * -7.5) + 1.5;
LABEL_39:
        v12 = 1.0 - v13;
LABEL_40:
        result = v11 * sqrtf(v12);
      }
      else if (v3)
      {
        v14 = 1.0 - (float)(result * result);
        v15 = sqrtf(v14);
        v16 = -15.0;
LABEL_86:
        result = (float)(v14 * v16) * v15;
      }
      else
      {
        result = (float)((float)(result * -3.0) + (float)((float)(result * (float)(result * result)) * 5.0)) * 0.5;
      }
      break;
    case 4:
      switch(v3)
      {
        case 0:
          result = (float)((float)((float)((float)(result * result) * -30.0)
                                 + (float)((float)((float)(result * result) * (float)(result * result)) * 35.0))
                         * 0.125)
                 + 0.375;
          break;
        case 1:
          v19 = result * 2.5;
          v13 = result * result;
          v11 = v19 * (float)((float)(v13 * -7.0) + 3.0);
          goto LABEL_39;
        case 2:
          result = (float)((float)((float)(result * result) * 52.5) + -7.5)
                 - (float)((float)(result * result) * (float)((float)((float)(result * result) * 52.5) + -7.5));
          break;
        case 3:
          v20 = 1.0 - (float)(result * result);
          v21 = sqrtf(v20);
          v22 = -105.0;
          goto LABEL_104;
        default:
          v17 = (float)(1.0 - (float)(result * result)) * (float)(1.0 - (float)(result * result));
          v18 = 105.0;
          goto LABEL_64;
      }
      return result;
    case 5:
      switch(v3)
      {
        case 0:
          v5 = result * 0.125;
          v6 = result * result;
          v7 = (float)((float)(v6 * v6) * 63.0) + 15.0;
          v8 = -70.0;
          goto LABEL_66;
        case 1:
          v25 = result * result;
          v26 = sqrtf(1.0 - v25);
          v27 = -1.875;
          v28 = (float)((float)(v25 * -14.0) + 1.0) + (float)((float)(v25 * v25) * 21.0);
          goto LABEL_100;
        case 2:
          v29 = result * 52.5;
          v30 = result * result;
          v31 = v29 - (float)(v30 * v29);
          v32 = -3.0;
          goto LABEL_102;
        case 3:
          v33 = result * result;
          v34 = 1.0 - v33;
          v35 = sqrtf(1.0 - v33);
          v36 = v33 * -9.0;
          v37 = -52.5;
          goto LABEL_60;
        case 4:
          result = (float)((float)(1.0 - (float)(result * result)) * (float)(1.0 - (float)(result * result)))
                 * (float)(result * 945.0);
          break;
        default:
          v23 = 1.0 - (float)(result * result);
          v15 = sqrtf(v23);
          v14 = v23 * v23;
          *(float *)&v24 = -945.0;
          goto LABEL_85;
      }
      return result;
    case 6:
      switch(v3)
      {
        case 0:
          result = (float)((float)((float)((float)((float)((float)(result * result) * (float)(result * result)) * -315.0)
                                         + (float)((float)((float)(result * result)
                                                         * (float)((float)(result * result) * (float)(result * result)))
                                                 * 231.0))
                                 + (float)((float)(result * result) * 105.0))
                         * 0.0625)
                 + -0.3125;
          break;
        case 1:
          v38 = result * -2.625;
          v39 = result * result;
          v40 = (float)((float)(v39 * -30.0) + 5.0) + (float)((float)(v39 * v39) * 33.0);
          v41 = sqrtf(1.0 - v39);
          goto LABEL_92;
        case 2:
          v42 = result * result;
          v43 = 13.125 - (float)(v42 * 13.125);
          v44 = v42 * v42;
          v45 = (float)(v42 * -18.0) + 1.0;
          v46 = 33.0;
          goto LABEL_68;
        case 3:
          result = (float)((float)((float)(1.0 - (float)(result * result)) * result)
                         * (float)((float)((float)(result * result) * -1732.5) + 472.5))
                 * sqrtf(1.0 - (float)(result * result));
          break;
        case 4:
          v47 = result * result;
          v48 = 1.0 - v47;
          v36 = v47 * -11.0;
          v49 = v48 * v48;
          v35 = 472.5;
          goto LABEL_61;
        case 5:
          v50 = 1.0 - (float)(result * result);
          v51 = sqrtf(v50);
          v52 = result * -10395.0;
          v53 = v50 * v50;
          goto LABEL_96;
        default:
          v14 = 1.0 - (float)(result * result);
          v15 = v14 * v14;
          *(float *)&v24 = 10395.0;
          goto LABEL_85;
      }
      return result;
    case 7:
      switch(v3)
      {
        case 0:
          result = ((float)((float)(result * result) * (float)(result * result)) * -693.0
                  + -35.0
                  + (float)((float)((float)(result * result) * 429.0)
                          * (float)((float)(result * result) * (float)(result * result)))
                  + (float)((float)(result * result) * 315.0))
                 * (float)(result * 0.0625);
          break;
        case 1:
          v6 = result * result;
          v5 = sqrtf(1.0 - v6) * -0.4375;
          v7 = (float)((float)((float)(v6 * v6) * -495.0) + -5.0) + (float)((float)(v6 * (float)(v6 * v6)) * 429.0);
          v8 = 135.0;
          goto LABEL_66;
        case 2:
          v58 = result * 7.875;
          v59 = result * result;
          v60 = v58 - (float)(v59 * v58);
          v61 = v59 * v59;
          v62 = (float)(v59 * -110.0) + 15.0;
          v63 = 143.0;
          goto LABEL_98;
        case 3:
          v64 = result * result;
          v65 = 1.0 - v64;
          v51 = sqrtf(1.0 - v64);
          v52 = (float)((float)(v64 * -66.0) + 3.0) + (float)((float)(v64 * v64) * 143.0);
          v66 = -39.375;
          goto LABEL_95;
        case 4:
          result = (float)((float)((float)(1.0 - (float)(result * result)) * (float)(1.0 - (float)(result * result)))
                         * (float)(result * 1732.5))
                 * (float)((float)((float)(result * result) * 13.0) + -3.0);
          break;
        case 5:
          v67 = result * result;
          v68 = 1.0 - v67;
          v35 = sqrtf(1.0 - v67);
          v36 = v67 * -13.0;
          v34 = v68 * v68;
          v37 = -5197.5;
LABEL_60:
          v49 = v34 * v37;
LABEL_61:
          result = -(float)((float)(v49 * v35) + (float)(v36 * (float)(v49 * v35)));
          break;
        case 6:
          result = (float)(result * 135140.0)
                 * (float)((float)(1.0 - (float)(result * result))
                         * (float)((float)(1.0 - (float)(result * result)) * (float)(1.0 - (float)(result * result))));
          break;
        default:
          v54 = 1.0 - (float)(result * result);
          v55 = sqrtf(v54);
          v56 = v54 * (float)(v54 * v54);
          v57 = -135140.0;
          goto LABEL_75;
      }
      return result;
    case 8:
      switch(v3)
      {
        case 0:
          v9 = result * result;
          result = (float)((float)((float)((float)((float)((float)(v9 * v9) * 6930.0)
                                                 + (float)((float)((float)(v9 * v9) * (float)(v9 * v9)) * 6435.0))
                                         + (float)((float)(v9 * (float)(v9 * v9)) * -12012.0))
                                 + (float)(v9 * -1260.0))
                         * 0.0078125)
                 + 0.27344;
          break;
        case 1:
          v70 = result * -0.5625;
          v6 = result * result;
          v5 = v70 * sqrtf(1.0 - v6);
          v7 = (float)((float)((float)(v6 * v6) * -1001.0) + -35.0) + (float)((float)(v6 * (float)(v6 * v6)) * 715.0);
          v8 = 385.0;
LABEL_66:
          result = v5 * (float)(v7 + (float)(v6 * v8));
          break;
        case 2:
          v71 = result * result;
          v43 = 19.688 - (float)(v71 * 19.688);
          v44 = -(float)((float)(v71 * v71) - (float)(v71 * (float)(v71 * v71)));
          v45 = (float)(v71 * 33.0) + -1.0;
          v46 = 143.0;
LABEL_68:
          result = (float)(v45 + (float)(v44 * v46)) * v43;
          break;
        case 3:
          result = (float)((float)((float)(result * -433.12) * (float)(1.0 - (float)(result * result)))
                         * (float)((float)((float)((float)(result * result) * -26.0) + 3.0)
                                 + (float)((float)((float)(result * result) * (float)(result * result)) * 39.0)))
                 * sqrtf(1.0 - (float)(result * result));
          break;
        case 4:
          v72 = result * result;
          v73 = 1.0 - v72;
          v41 = (float)((float)(v72 * -26.0) + 1.0) + (float)((float)(v72 * v72) * 65.0);
          v38 = v73 * v73;
          *(float *)&v74 = 1299.4;
          goto LABEL_91;
        case 5:
          v75 = 1.0 - (float)(result * result);
          v76 = sqrtf(v75);
          result = -(float)((float)((float)((float)(v75 * v75) * (float)(result * -67568.0)) * v76)
                          + (float)((float)((float)(result * result) * -5.0)
                                  * (float)((float)((float)(v75 * v75) * (float)(result * -67568.0)) * v76)));
          break;
        case 6:
          v30 = result * result;
          v31 = (float)((float)(1.0 - v30) * 67568.0) * (float)((float)(1.0 - v30) * (float)(1.0 - v30));
          v32 = -15.0;
          goto LABEL_102;
        case 7:
          v77 = 1.0 - (float)(result * result);
          v21 = sqrtf(v77);
          v20 = v77 * (float)(v77 * v77);
          v22 = -2027000.0;
          goto LABEL_104;
        default:
          v69 = (float)(1.0 - (float)(result * result)) * (float)(1.0 - (float)(result * result));
          v17 = v69 * v69;
          v18 = 2027000.0;
LABEL_64:
          result = v17 * v18;
          break;
      }
      return result;
    case 9:
      switch(v3)
      {
        case 0:
          result = (float)((float)((float)((float)((float)(result * 315.0)
                                                 + (float)((float)(result
                                                                 * (float)((float)(result * result)
                                                                         * (float)(result * result)))
                                                         * 18018.0))
                                         + (float)((float)(result
                                                         * (float)((float)((float)(result * result)
                                                                         * (float)(result * result))
                                                                 * (float)((float)(result * result)
                                                                         * (float)(result * result))))
                                                 * 12155.0))
                                 + (float)((float)(result * (float)(result * result)) * -4620.0))
                         + (float)((float)((float)(result * (float)(result * result))
                                         * (float)((float)(result * result) * (float)(result * result)))
                                 * -25740.0))
                 * 0.0078125;
          break;
        case 1:
          v79 = result * result;
          result = (float)(sqrtf(1.0 - v79) * -0.35156)
                 * (float)((float)((float)((float)((float)((float)(v79 * v79) * 2002.0) + 7.0)
                                         + (float)((float)((float)(v79 * v79) * (float)(v79 * v79)) * 2431.0))
                                 + (float)(v79 * -308.0))
                         + (float)((float)(v79 * (float)(v79 * v79)) * -4004.0));
          break;
        case 2:
          result = (float)((float)((float)((float)(result * -7.0)
                                         + (float)((float)(result * (float)(result * result)) * 91.0))
                                 + (float)((float)((float)(result * (float)(result * result))
                                                 * (float)((float)(result * result) * (float)(result * result)))
                                         * 221.0))
                         + (float)((float)(result * (float)((float)(result * result) * (float)(result * result)))
                                 * -273.0))
                 * (float)(30.938 - (float)((float)(result * result) * 30.938));
          break;
        case 3:
          v80 = result * result;
          v20 = sqrtf(1.0 - v80);
          v21 = (float)((float)((float)((float)(v80 * v80) * -195.0) + -1.0)
                      + (float)((float)(v80 * (float)(v80 * v80)) * 221.0))
              + (float)(v80 * 39.0);
          v81 = (float)(v80 * 216.56) + -216.56;
          goto LABEL_105;
        case 4:
          v82 = (float)(result * result) + -1.0;
          v41 = (float)(result + (float)((float)(result * (float)(result * result)) * -10.0))
              + (float)((float)(result * (float)((float)(result * result) * (float)(result * result))) * 17.0);
          v38 = v82 * v82;
          *(float *)&v74 = 16892.0;
          goto LABEL_91;
        case 5:
          v83 = result * result;
          v51 = sqrtf(1.0 - v83);
          v84 = v83 + -1.0;
          v85 = v83 * v83;
          v86 = (float)(v83 * -30.0) + 1.0;
          v87 = 85.0;
          goto LABEL_94;
        case 6:
          result = (float)((float)((float)((float)(result * result) + -1.0) * -337840.0)
                         * (float)((float)((float)(result * result) + -1.0) * (float)((float)(result * result) + -1.0)))
                 * (float)((float)(result * -3.0) + (float)((float)(result * (float)(result * result)) * 17.0));
          break;
        case 7:
          v30 = result * result;
          v31 = sqrtf(1.0 - v30)
              * (float)(1013500.0 * (float)((float)(v30 + -1.0) * (float)((float)(v30 + -1.0) * (float)(v30 + -1.0))));
          v32 = -17.0;
          goto LABEL_102;
        case 8:
          v88 = result * 34459000.0;
          v89 = (float)((float)(result * result) + -1.0) * (float)((float)(result * result) + -1.0);
          result = v88 * (float)(v89 * v89);
          break;
        default:
          v78 = 1.0 - (float)(result * result);
          v55 = sqrtf(v78);
          v56 = (float)(v78 * v78) * (float)(v78 * v78);
          v57 = -34459000.0;
LABEL_75:
          result = v55 * (float)(v57 * v56);
          break;
      }
      return result;
    case 10:
      switch(v3)
      {
        case 0:
          v10 = result * result;
          return (float)((float)((float)((float)((float)((float)((float)(v10 * 90090.0) * (float)(v10 * v10))
                                                       + (float)((float)(v10
                                                                       * (float)((float)(v10 * v10) * (float)(v10 * v10)))
                                                               * 46189.0))
                                               + (float)((float)(v10 * v10) * -30030.0))
                                       + (float)((float)((float)(v10 * v10) * (float)(v10 * v10)) * -109400.0))
                               + (float)(v10 * 3465.0))
                       * 0.0039062)
               + -0.24609;
        case 1:
          return (float)(sqrtf(1.0 - (float)(result * result)) * -0.42969)
               * (float)((float)((float)((float)((float)(result * 63.0)
                                               + (float)((float)(result
                                                               * (float)((float)(result * result)
                                                                       * (float)(result * result)))
                                                       * 4914.0))
                                       + (float)((float)(result
                                                       * (float)((float)((float)(result * result)
                                                                       * (float)(result * result))
                                                               * (float)((float)(result * result)
                                                                       * (float)(result * result))))
                                               * 4199.0))
                               + (float)((float)(result * (float)(result * result)) * -1092.0))
                       + (float)((float)((float)(result * (float)(result * result))
                                       * (float)((float)(result * result) * (float)(result * result)))
                               * -7956.0));
        case 2:
          v90 = result * result;
          return (float)((float)((float)((float)((float)((float)(v90 * v90) * 2730.0) + 7.0)
                                       + (float)((float)((float)(v90 * v90) * (float)(v90 * v90)) * 4199.0))
                               + (float)(v90 * -364.0))
                       + (float)((float)(v90 * (float)(v90 * v90)) * -6188.0))
               * (float)(3.8672 - (float)(v90 * 3.8672));
        case 3:
          v91 = result * result;
          v40 = sqrtf(1.0 - (float)(result * result));
          v41 = (float)((float)((float)(result * -7.0) + (float)((float)(result * (float)(result * result)) * 105.0))
                      + (float)((float)((float)(result * (float)(result * result)) * (float)(v91 * v91)) * 323.0))
              + (float)((float)(result * (float)(v91 * v91)) * -357.0);
          v38 = (float)(v91 * 402.19) + -402.19;
          goto LABEL_92;
        case 4:
          v92 = result * result;
          v93 = v92 + -1.0;
          v41 = (float)((float)((float)((float)(v92 * v92) * -255.0) + -1.0)
                      + (float)((float)(v92 * (float)(v92 * v92)) * 323.0))
              + (float)(v92 * 45.0);
          v38 = v93 * v93;
          *(float *)&v74 = 2815.3;
LABEL_91:
          v40 = *(float *)&v74;
LABEL_92:
          result = (float)(v38 * v40) * v41;
          break;
        case 5:
          v51 = sqrtf(1.0 - (float)(result * result));
          v84 = (float)(result * result) + -1.0;
          v85 = result * (float)((float)(result * result) * (float)(result * result));
          v86 = (float)(result * 15.0) + (float)((float)(result * (float)(result * result)) * -170.0);
          v87 = 323.0;
LABEL_94:
          v52 = v86 + (float)(v85 * v87);
          v65 = v84 * v84;
          v66 = -16892.0;
LABEL_95:
          v53 = v65 * v66;
LABEL_96:
          result = (float)(v53 * v52) * v51;
          break;
        case 6:
          v94 = result * result;
          v60 = (float)((float)(v94 + -1.0) * -84459.0) * (float)((float)(v94 + -1.0) * (float)(v94 + -1.0));
          v61 = v94 * v94;
          v62 = (float)(v94 * -102.0) + 3.0;
          v63 = 323.0;
LABEL_98:
          result = v60 * (float)(v62 + (float)(v61 * v63));
          break;
        case 7:
          v26 = sqrtf(1.0 - (float)(result * result));
          v27 = 5743200.0
              * (float)((float)((float)(result * result) + -1.0)
                      * (float)((float)((float)(result * result) + -1.0) * (float)((float)(result * result) + -1.0)));
          v28 = (float)(result * -3.0) + (float)((float)(result * (float)(result * result)) * 19.0);
LABEL_100:
          result = v26 * (float)(v27 * v28);
          break;
        case 8:
          v30 = result * result;
          v31 = (float)((float)((float)(v30 + -1.0) * (float)(v30 + -1.0))
                      * (float)((float)(v30 + -1.0) * (float)(v30 + -1.0)))
              * 17230000.0;
          v32 = -19.0;
LABEL_102:
          result = -(float)(v31 + (float)((float)(v30 * v32) * v31));
          break;
        case 9:
          v95 = 1.0 - (float)(result * result);
          v21 = sqrtf(v95);
          v20 = (float)(v95 * v95) * (float)(v95 * v95);
          v22 = -654730000.0;
LABEL_104:
          v81 = result * v22;
LABEL_105:
          result = (float)(v81 * v20) * v21;
          break;
        default:
          v14 = (float)(result * result) + -1.0;
          v15 = (float)(v14 * v14) * (float)(v14 * v14);
          *(float *)&v24 = -654730000.0;
LABEL_85:
          v16 = *(float *)&v24;
          goto LABEL_86;
      }
      return result;
    default:
      v4 = 0.0;
      goto LABEL_30;
  }
  return result;
}

void boost::math::detail::gamma_imp<double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(double a1)
{
  double v2;
  double v3;
  double v5;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  float64x2_t v16;
  float64x2_t v21;
  float64x2_t v22;
  double v23;
  float64x2_t v24;
  float64x2_t v25;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;

  _D6 = a1;
  v2 = 1.0;
  if (_D6 <= 0.0)
  {
    if (floor(_D6) == _D6)
      boost::math::policies::detail::raise_error<std::domain_error,double>();
    if (_D6 <= -20.0)
    {
      v7 = -_D6;
      v31 = _D6;
      v8 = boost::math::detail::gamma_imp<double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>(-_D6);
      v9 = v31;
      if (v31 < 0.0)
        v9 = v7;
      v10 = floor(v9);
      v11 = 1.0 - v9 + v10;
      v12 = v9 - v10;
      if ((vcvtmd_s64_f64(v9) & 1) != 0)
      {
        v12 = v11;
        v13 = -v9;
      }
      else
      {
        v13 = v9;
      }
      if (v12 <= 0.5)
        v14 = v12;
      else
        v14 = 1.0 - v12;
      v15 = fabs(v13 * v8 * sin(v14 * 3.14159265));
      if (v15 >= 1.0 || v15 * 1.79769313e308 >= 3.14159265)
        return;
LABEL_42:
      boost::math::policies::detail::raise_error<std::overflow_error,double>("Result of tgamma is too large to represent.");
    }
    for (; _D6 < 0.0; _D6 = _D6 + 1.0)
      v2 = v2 / _D6;
  }
  v3 = floor(_D6);
  if (v3 == _D6 && _D6 < 170.0)
  {
    if ((~*(_QWORD *)&_D6 & 0x7FF0000000000000) == 0)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,double>("boost::math::trunc<%1%>(%1%)");
    v5 = ceil(_D6);
    if (_D6 < 0.0)
      v3 = v5;
    if (v3 > 2147483650.0 || v3 < -2147483650.0)
      boost::math::policies::detail::raise_error<boost::math::rounding_error,double>("boost::math::itrunc<%1%>(%1%)");
    return;
  }
  if (_D6 < 0.0000000149011612)
  {
    if (_D6 < COERCE_DOUBLE(0x4000000000000))
      boost::math::policies::detail::raise_error<std::overflow_error,double>("Overflow Error");
    return;
  }
  v16.f64[0] = _D6 * _D6;
  if (_D6 <= 1.0)
  {
    v24 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16.f64[0], 0);
    v25 = (float64x2_t)vdupq_lane_s64(0x4050800000000000, 0);
    v25.f64[0] = v16.f64[0] + 1925.0;
    _Q2 = vmlaq_n_f64((float64x2_t)xmmword_2105F2020, vmlaq_n_f64((float64x2_t)xmmword_2105F2010, vmlaq_n_f64((float64x2_t)xmmword_2105F2000, vmlaq_n_f64((float64x2_t)xmmword_2105F1FF0, vmlaq_n_f64((float64x2_t)xmmword_2105F1FE0, v25, v16.f64[0]), v16.f64[0]), v16.f64[0]), v16.f64[0]), v16.f64[0]);
    v24.f64[0] = _D6;
    __asm { FMLA            D2, D6, V2.D[1] }
    v23 = (vaddvq_f64(vmulq_f64(vmlaq_n_f64((float64x2_t)xmmword_2105F2080, vmlaq_n_f64((float64x2_t)xmmword_2105F2070, vmlaq_n_f64((float64x2_t)xmmword_2105F2060, vmlaq_n_f64((float64x2_t)xmmword_2105F2050, vmlaq_n_f64((float64x2_t)xmmword_2105F2040, (float64x2_t)xmmword_2105F2030, v16.f64[0]), v16.f64[0]), v16.f64[0]), v16.f64[0]), v16.f64[0]), v24))+ 2.35313769e10)/ _Q2.f64[0];
  }
  else
  {
    v16.f64[1] = _D6;
    __asm { FMOV            V2.2D, #1.0 }
    v21 = vdivq_f64(_Q2, v16);
    v22 = vmlaq_n_f64((float64x2_t)xmmword_2105F2140, vmlaq_n_f64((float64x2_t)xmmword_2105F2130, vmlaq_n_f64((float64x2_t)xmmword_2105F2120, vmlaq_n_f64((float64x2_t)xmmword_2105F2110, vmlaq_n_f64((float64x2_t)xmmword_2105F2100, (float64x2_t)xmmword_2105F20F0, v21.f64[0]), v21.f64[0]), v21.f64[0]), v21.f64[0]), v21.f64[0]);
    v23 = (vaddvq_f64(vmulq_f64(vmlaq_n_f64((float64x2_t)xmmword_2105F20E0, vmlaq_n_f64((float64x2_t)xmmword_2105F20D0, vmlaq_n_f64((float64x2_t)xmmword_2105F20C0, vmlaq_n_f64((float64x2_t)xmmword_2105F20B0, vmlaq_n_f64((float64x2_t)xmmword_2105F20A0, (float64x2_t)xmmword_2105F2090, v21.f64[0]), v21.f64[0]), v21.f64[0]), v21.f64[0]), v21.f64[0]), v21))+ 2.50662827)/ vmlaq_laneq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v22, 1), v22, v21, 1).f64[0];
  }
  v27 = v23 * v2;
  v28 = _D6 + 5.52468004;
  v32 = _D6;
  v29 = log(_D6 + 5.52468004);
  if (v29 * v32 <= 709.0)
  {
    pow(v28, v32 + -0.5);
    exp(-v28);
    return;
  }
  if (v29 * v32 * 0.5 > 709.0)
    goto LABEL_42;
  v30 = pow(v28, v32 * 0.5 + -0.25);
  if (1.79769313e308 / v30 < exp(-v28) * v30 * v27)
    goto LABEL_42;
}

void boost::math::policies::detail::raise_error<std::overflow_error,float>()
{
  std::string *v0;
  std::string::size_type v1;
  uint64_t v2;
  std::string::size_type size;
  std::string *v4;
  std::string::size_type v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  std::string::size_type v11;
  std::runtime_error v12;
  std::string v13;
  std::string v14;

  v0 = (std::string *)operator new(0x20uLL);
  v1 = 0;
  *(_OWORD *)&v14.__r_.__value_.__r.__words[1] = xmmword_2105F2150;
  strcpy((char *)v0, "boost::math::tgamma<%1%>(%1%)");
  v13.__r_.__value_.__r.__words[2] = 0x120000000000206ELL;
  v14.__r_.__value_.__r.__words[0] = (std::string::size_type)v0;
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = *(_OWORD *)"Error in function ";
  v2 = 128;
  size = 29;
  while (1)
  {
    v4 = (v2 & 0x80u) == 0 ? &v14 : v0;
    v5 = (v2 & 0x80u) == 0 ? v2 : size;
    if (v5 < v1)
      break;
    v6 = (char *)v4 + v1;
    v7 = (char *)v4 + v5;
    while (1)
    {
      v8 = v7 - v6;
      if (v7 - v6 < 3)
        goto LABEL_21;
      if (v8 == 2)
        goto LABEL_21;
      v9 = (char *)memchr(v6, 37, v8 - 2);
      if (!v9)
        goto LABEL_21;
      if (*(_WORD *)v9 == 12581 && v9[2] == 37)
        break;
      v6 = v9 + 1;
    }
    if (v9 == v7)
      break;
    v11 = v9 - (char *)v4;
    if (v9 - (char *)v4 == -1)
      break;
    std::string::replace(&v14, v11, 3uLL, "Unknown", 7uLL);
    v1 = v11 + 7;
    v2 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    size = v14.__r_.__value_.__l.__size_;
    v0 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
LABEL_21:
  std::string::append(&v13, (const std::string::value_type *)v4, v5);
  std::string::append(&v13, ": ", 2uLL);
  std::string::append(&v13, "numeric overflow", 0x10uLL);
  v12.__vftable = 0;
  v12.__imp_.__imp_ = 0;
  std::runtime_error::runtime_error(&v12, &v13);
  v12.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
  boost::throw_exception<std::overflow_error>(&v12);
}

void sub_2105C9F98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(a11);
    if ((a22 & 0x80000000) == 0)
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *boost::math::policies::detail::replace_all_in_string(std::string *a1, char *__s)
{
  _BYTE *result;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t size;
  std::string::size_type v8;
  _BYTE *v9;
  uint64_t v10;
  std::string::size_type v12;
  size_t v13;

  result = (_BYTE *)strlen(__s);
  v5 = result;
  v6 = 0;
LABEL_2:
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v8 = (std::string::size_type)a1;
  else
    v8 = a1->__r_.__value_.__r.__words[0];
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  if (size >= (unint64_t)v6)
  {
    result = &v6[v8];
    v9 = (_BYTE *)(v8 + size);
    while (1)
    {
      v10 = v9 - result;
      if (v9 - result < 3)
        break;
      if (v10 == 2)
        break;
      result = memchr(result, 37, v10 - 2);
      if (!result)
        break;
      if (*(_WORD *)result == 12581 && result[2] == 37)
      {
        if (result != v9)
        {
          v12 = (std::string::size_type)&result[-v8];
          if (v12 != -1)
          {
            v13 = strlen(__s);
            result = std::string::replace(a1, v12, 3uLL, __s, v13);
            v6 = &v5[v12];
            goto LABEL_2;
          }
        }
        return result;
      }
      ++result;
    }
  }
  return result;
}

void boost::throw_exception<std::overflow_error>(const std::runtime_error *a1)
{
  char *exception;

  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(_QWORD *)exception = &unk_24CA2C788;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), a1);
  *((_QWORD *)exception + 5) = 0;
  *((_QWORD *)exception + 6) = 0;
  *((_DWORD *)exception + 14) = -1;
  *(_QWORD *)exception = &off_24CA2C710;
  *((_QWORD *)exception + 1) = &unk_24CA2C740;
  *((_QWORD *)exception + 3) = &unk_24CA2C768;
  *((_QWORD *)exception + 4) = 0;
}

uint64_t boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<std::overflow_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24CA2C788;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x24BEDB8C8] + 16;
  *(_QWORD *)(v2 + 24) = &unk_24CA2C7E0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24CA2C710;
  *(_QWORD *)(v2 + 8) = &unk_24CA2C740;
  *(_QWORD *)(v2 + 24) = &unk_24CA2C768;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void sub_2105CA26C(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x212BC7928](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_2105CA298(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::overflow_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_2105CA2F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::overflow_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x212BC7928);
}

void `non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24CA2C7E0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24CA2C7E0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BC7928);
}

void `non-virtual thunk to'boost::wrapexcept<std::overflow_error>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24CA2C7E0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24CA2C7E0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  JUMPOUT(0x212BC7928);
}

uint64_t boost::wrapexcept<std::overflow_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24CA2C788;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB8C8] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24CA2C710;
  *(_QWORD *)(a1 + 8) = &unk_24CA2C740;
  *(_QWORD *)(a1 + 24) = &unk_24CA2C768;
  return a1;
}

void sub_2105CA570(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

uint64_t boost::exception_detail::copy_boost_exception(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v7);
    v5 = v7;
    if (v7)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
    }
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  result = *(_QWORD *)(a1 + 8);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 32))(result);
  *(_QWORD *)(a1 + 8) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return result;
}

void sub_2105CA650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
  _Unwind_Resume(exception_object);
}

void boost::math::policies::detail::raise_error<std::domain_error,double>()
{
  char *v0;
  char *v1;
  std::string::size_type v2;
  uint64_t v3;
  std::string::size_type size;
  std::string::size_type v5;
  char *v6;
  char *v7;
  int64_t v8;
  char *v9;
  std::string::size_type v11;
  const char *v12;
  size_t v13;
  std::string::size_type i;
  std::string *v15;
  std::string::size_type v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  std::string::size_type v22;
  size_t v23;
  std::logic_error v24;
  _QWORD v25[2];
  uint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;

  v0 = (char *)operator new(0x20uLL);
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)v0;
  *(_OWORD *)&v29.__r_.__value_.__r.__words[1] = xmmword_2105F2150;
  strcpy(v0, "boost::math::tgamma<%1%>(%1%)");
  v1 = (char *)operator new(0x30uLL);
  v2 = 0;
  v28.__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  *(_OWORD *)&v28.__r_.__value_.__r.__words[1] = xmmword_2105F2160;
  strcpy(v1, "Evaluation of tgamma at a negative integer %1%.");
  v27.__r_.__value_.__r.__words[2] = 0x120000000000206ELL;
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)"Error in function ";
  v3 = 128;
  size = 29;
  while (1)
  {
    if ((v3 & 0x80u) != 0)
    {
      v5 = size;
    }
    else
    {
      v0 = (char *)&v29;
      v5 = v3;
    }
    if (v5 < v2)
      break;
    v6 = &v0[v2];
    v7 = &v0[v5];
    while (1)
    {
      v8 = v7 - v6;
      if (v7 - v6 < 3)
        goto LABEL_18;
      if (v8 == 2)
        goto LABEL_18;
      v9 = (char *)memchr(v6, 37, v8 - 2);
      if (!v9)
        goto LABEL_18;
      if (*(_WORD *)v9 == 12581 && v9[2] == 37)
        break;
      v6 = v9 + 1;
    }
    if (v9 == v7)
      break;
    v11 = v9 - v0;
    if (v9 - v0 == -1)
      break;
    std::string::replace(&v29, v11, 3uLL, "Unknown", 7uLL);
    v2 = v11 + 7;
    v3 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
    size = v29.__r_.__value_.__l.__size_;
    v0 = (char *)v29.__r_.__value_.__r.__words[0];
  }
LABEL_18:
  std::string::append(&v27, v0, v5);
  std::string::append(&v27, ": ", 2uLL);
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  boost::math::policies::detail::prec_format<double>(v25);
  if (v26 >= 0)
    v12 = (const char *)v25;
  else
    v12 = (const char *)v25[0];
  v13 = strlen(v12);
  for (i = 0; ; i = v22 + v13)
  {
    v15 = (v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v28
        : (std::string *)v28.__r_.__value_.__r.__words[0];
    v16 = (v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(v28.__r_.__value_.__r.__words[2])
        : v28.__r_.__value_.__l.__size_;
    if (v16 < i)
      break;
    v17 = (char *)v15 + i;
    v18 = (char *)v15 + v16;
    while (1)
    {
      v19 = v18 - v17;
      if (v18 - v17 < 3)
        goto LABEL_41;
      if (v19 == 2)
        goto LABEL_41;
      v20 = (char *)memchr(v17, 37, v19 - 2);
      if (!v20)
        goto LABEL_41;
      if (*(_WORD *)v20 == 12581 && v20[2] == 37)
        break;
      v17 = v20 + 1;
    }
    if (v20 == v18)
      break;
    v22 = v20 - (char *)v15;
    if (v20 - (char *)v15 == -1)
      break;
    v23 = strlen(v12);
    std::string::replace(&v28, v22, 3uLL, v12, v23);
  }
LABEL_41:
  std::string::append(&v27, (const std::string::value_type *)v15, v16);
  v24.__vftable = 0;
  v24.__imp_.__imp_ = 0;
  std::logic_error::logic_error(&v24, &v27);
  v24.__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8B0] + 16);
  boost::throw_exception<std::domain_error>(&v24);
}

void sub_2105CA954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a17 < 0)
  {
    operator delete(__p);
    if (a23 < 0)
    {
LABEL_5:
      operator delete(a18);
      if ((a30 & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_9;
    }
  }
  else if (a23 < 0)
  {
    goto LABEL_5;
  }
  if ((a30 & 0x80000000) == 0)
  {
LABEL_6:
    if (*(char *)(v30 - 65) < 0)
      goto LABEL_7;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a25);
  if (*(char *)(v30 - 65) < 0)
  {
LABEL_7:
    operator delete(*(void **)(v30 - 88));
    _Unwind_Resume(a1);
  }
LABEL_10:
  _Unwind_Resume(a1);
}

void boost::math::policies::detail::raise_error<std::overflow_error,double>(const char *a1)
{
  const char *v1;
  std::string *v2;
  std::string::size_type v3;
  uint64_t v4;
  std::string::size_type size;
  std::string *v6;
  std::string::size_type v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  std::string::size_type v13;
  size_t v14;
  std::runtime_error v15;
  std::string v16;
  std::string v17;

  if (a1)
    v1 = a1;
  else
    v1 = "Cause unknown";
  v2 = (std::string *)operator new(0x20uLL);
  v3 = 0;
  *(_OWORD *)&v17.__r_.__value_.__r.__words[1] = xmmword_2105F2150;
  strcpy((char *)v2, "boost::math::tgamma<%1%>(%1%)");
  v16.__r_.__value_.__r.__words[2] = 0x120000000000206ELL;
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)v2;
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = *(_OWORD *)"Error in function ";
  v4 = 128;
  size = 29;
  while (1)
  {
    v6 = (v4 & 0x80u) == 0 ? &v17 : v2;
    v7 = (v4 & 0x80u) == 0 ? v4 : size;
    if (v7 < v3)
      break;
    v8 = (char *)v6 + v3;
    v9 = (char *)v6 + v7;
    while (1)
    {
      v10 = v9 - v8;
      if (v9 - v8 < 3)
        goto LABEL_24;
      if (v10 == 2)
        goto LABEL_24;
      v11 = (char *)memchr(v8, 37, v10 - 2);
      if (!v11)
        goto LABEL_24;
      if (*(_WORD *)v11 == 12581 && v11[2] == 37)
        break;
      v8 = v11 + 1;
    }
    if (v11 == v9)
      break;
    v13 = v11 - (char *)v6;
    if (v11 - (char *)v6 == -1)
      break;
    std::string::replace(&v17, v13, 3uLL, "Unknown", 7uLL);
    v3 = v13 + 7;
    v4 = HIBYTE(v17.__r_.__value_.__r.__words[2]);
    size = v17.__r_.__value_.__l.__size_;
    v2 = (std::string *)v17.__r_.__value_.__r.__words[0];
  }
LABEL_24:
  std::string::append(&v16, (const std::string::value_type *)v6, v7);
  std::string::append(&v16, ": ", 2uLL);
  v14 = strlen(v1);
  std::string::append(&v16, v1, v14);
  v15.__vftable = 0;
  v15.__imp_.__imp_ = 0;
  std::runtime_error::runtime_error(&v15, &v16);
  v15.__vftable = (std::runtime_error_vtbl *)(MEMORY[0x24BEDB8C8] + 16);
  boost::throw_exception<std::overflow_error>(&v15);
}

void sub_2105CAB9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
  {
    operator delete(a11);
    if ((a22 & 0x80000000) == 0)
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void boost::math::policies::detail::raise_error<boost::math::rounding_error,double>(const char *a1)
{
  const char *v1;
  size_t v2;
  std::string::size_type v3;
  std::string *p_dst;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  std::string::size_type v16;
  char *v17;
  std::string *v18;
  std::string::size_type size;
  std::runtime_error v20;
  _QWORD v21[2];
  uint64_t v22;
  std::string v23;
  std::string v24;
  std::string __dst;

  if (a1)
    v1 = a1;
  else
    v1 = "Unknown function operating on type %1%";
  memset(&__dst, 0, sizeof(__dst));
  v2 = strlen(v1);
  if (v2 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  v3 = v2;
  if (v2 >= 0x17)
  {
    v5 = (v2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v2 | 7) != 0x17)
      v5 = v2 | 7;
    v6 = v5 + 1;
    p_dst = (std::string *)operator new(v5 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v6 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v2;
    p_dst = &__dst;
    if (!v2)
      goto LABEL_13;
  }
  memcpy(p_dst, v1, v3);
LABEL_13:
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  v7 = (char *)operator new(0x40uLL);
  v8 = 0;
  v24.__r_.__value_.__r.__words[0] = (std::string::size_type)v7;
  *(_OWORD *)&v24.__r_.__value_.__r.__words[1] = xmmword_2105F2170;
  strcpy(v7, "Value %1% can not be represented in the target integer type.");
  v23.__r_.__value_.__r.__words[2] = 0x120000000000206ELL;
  *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)"Error in function ";
  while (1)
  {
    v9 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__dst
       : (std::string *)__dst.__r_.__value_.__r.__words[0];
    v10 = (__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__dst.__r_.__value_.__r.__words[2])
        : __dst.__r_.__value_.__l.__size_;
    if (v10 < v8)
      break;
    v11 = (char *)v9 + v8;
    v12 = (char *)v9 + v10;
    while (1)
    {
      v13 = v12 - v11;
      if (v12 - v11 < 3)
        goto LABEL_33;
      if (v13 == 2)
        goto LABEL_33;
      v14 = (char *)memchr(v11, 37, v13 - 2);
      if (!v14)
        goto LABEL_33;
      if (*(_WORD *)v14 == 12581 && v14[2] == 37)
        break;
      v11 = v14 + 1;
    }
    if (v14 == v12)
      break;
    v16 = v14 - (char *)v9;
    if (v14 - (char *)v9 == -1)
      break;
    std::string::replace(&__dst, v16, 3uLL, "Unknown", 7uLL);
    v8 = v16 + 7;
  }
LABEL_33:
  std::string::append(&v23, (const std::string::value_type *)v9, v10);
  std::string::append(&v23, ": ", 2uLL);
  v21[0] = 0;
  v21[1] = 0;
  v22 = 0;
  boost::math::policies::detail::prec_format<double>(v21);
  if (v22 >= 0)
    v17 = (char *)v21;
  else
    v17 = (char *)v21[0];
  boost::math::policies::detail::replace_all_in_string(&v24, v17);
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v18 = &v24;
  else
    v18 = (std::string *)v24.__r_.__value_.__r.__words[0];
  if ((v24.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v24.__r_.__value_.__r.__words[2]);
  else
    size = v24.__r_.__value_.__l.__size_;
  std::string::append(&v23, (const std::string::value_type *)v18, size);
  v20.__vftable = 0;
  v20.__imp_.__imp_ = 0;
  std::runtime_error::runtime_error(&v20, &v23);
  v20.__vftable = (std::runtime_error_vtbl *)&off_24CA2C7B8;
  boost::throw_exception<boost::math::rounding_error>(&v20);
}

void sub_2105CAE54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::runtime_error a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if (a22 < 0)
  {
    operator delete(__p);
    if (a29 < 0)
      goto LABEL_7;
  }
  else if (a29 < 0)
  {
LABEL_7:
    operator delete(a24);
    if ((*(char *)(v29 - 65) & 0x80000000) == 0)
LABEL_8:
      _Unwind_Resume(a1);
LABEL_4:
    operator delete(*(void **)(v29 - 88));
    _Unwind_Resume(a1);
  }
  if ((*(char *)(v29 - 65) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_4;
}

uint64_t boost::math::policies::detail::prec_format<double>(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  const void **v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *__p[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  v38 = 0u;
  v28 = 0;
  v37 = 0u;
  v36 = 0u;
  v35 = 0u;
  v34 = 0u;
  v33 = 0u;
  v32 = 0u;
  v31 = 0u;
  v30 = 0u;
  v27 = 0u;
  *(_OWORD *)__p = 0u;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = 0u;
  v2 = MEMORY[0x24BEDB858];
  v3 = MEMORY[0x24BEDB858] + 104;
  v29 = MEMORY[0x24BEDB858] + 104;
  v4 = (_QWORD *)MEMORY[0x24BEDB7F0];
  v5 = MEMORY[0x24BEDB858] + 64;
  v6 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 16);
  v7 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 24);
  v21 = MEMORY[0x24BEDB858] + 64;
  v20[0] = v6;
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v6 - 24)) = v7;
  v20[1] = 0;
  v8 = (std::ios_base *)((char *)v20 + *(_QWORD *)(v20[0] - 24));
  std::ios_base::init(v8, &v22);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v4[5];
  v21 = v4[4];
  *(uint64_t *)((char *)&v21 + *(_QWORD *)(v21 - 24)) = v9;
  v20[0] = v4[1];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = v4[6];
  v29 = v3;
  v20[0] = v2 + 24;
  v21 = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x24BEDB848];
  *(_QWORD *)&v22 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)__p = 0u;
  v27 = 0u;
  LODWORD(v28) = 24;
  *(_QWORD *)((char *)&v22 + *(_QWORD *)(v21 - 24) + 8) = 17;
  std::ostream::operator<<();
  if ((v28 & 0x10) != 0)
  {
    v12 = *((_QWORD *)&v27 + 1);
    if (*((_QWORD *)&v27 + 1) < (unint64_t)v25)
    {
      *((_QWORD *)&v27 + 1) = v25;
      v12 = v25;
    }
    v13 = (const void **)&v24 + 1;
  }
  else
  {
    if ((v28 & 8) == 0)
    {
      v11 = 0;
      a1[23] = 0;
      goto LABEL_16;
    }
    v13 = (const void **)&v23;
    v12 = v24;
  }
  v14 = *v13;
  v11 = v12 - (_QWORD)*v13;
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    std::string::__throw_length_error[abi:ne180100]();
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    v17 = operator new(v15 + 1);
    *((_QWORD *)a1 + 1) = v11;
    *((_QWORD *)a1 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)a1 = v17;
    a1 = v17;
    goto LABEL_15;
  }
  a1[23] = v11;
  if (v11)
LABEL_15:
    memmove(a1, v14, v11);
LABEL_16:
  a1[v11] = 0;
  v20[0] = *v4;
  v18 = v4[9];
  *(_QWORD *)((char *)v20 + *(_QWORD *)(v20[0] - 24)) = v4[8];
  v21 = v18;
  *(_QWORD *)&v22 = v10 + 16;
  if (SBYTE7(v27) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x212BC78C8](&v29);
}

void sub_2105CB180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::iostream::~basic_iostream();
  MEMORY[0x212BC78C8](a10);
  _Unwind_Resume(a1);
}

void sub_2105CB1A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::~basic_stringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

void boost::throw_exception<boost::math::rounding_error>(const std::runtime_error *a1)
{
  char *exception;

  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(_QWORD *)exception = &unk_24CA2C788;
  std::runtime_error::runtime_error((std::runtime_error *)(exception + 8), a1);
  *((_QWORD *)exception + 5) = 0;
  *((_QWORD *)exception + 6) = 0;
  *((_DWORD *)exception + 14) = -1;
  *(_QWORD *)exception = &off_24CA2C620;
  *((_QWORD *)exception + 1) = &unk_24CA2C650;
  *((_QWORD *)exception + 3) = &unk_24CA2C678;
  *((_QWORD *)exception + 4) = 0;
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  return a1;
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24CA2C788;
  std::runtime_error::runtime_error((std::runtime_error *)(v2 + 8), (const std::runtime_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = &off_24CA2C7B8;
  *(_QWORD *)(v2 + 24) = &unk_24CA2C7E0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24CA2C620;
  *(_QWORD *)(v2 + 8) = &unk_24CA2C650;
  *(_QWORD *)(v2 + 24) = &unk_24CA2C678;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void sub_2105CB344(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::runtime_error *v2;

  std::runtime_error::~runtime_error(v2);
  MEMORY[0x212BC7928](v1, 0x10F1C40250A9ABCLL);
  _Unwind_Resume(a1);
}

void sub_2105CB370(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::rounding_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<boost::math::rounding_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_2105CB3C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  std::runtime_error::~runtime_error((std::runtime_error *)(a1 + 8));
  JUMPOUT(0x212BC7928);
}

void `non-virtual thunk to'boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(std::runtime_error *this)
{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24CA2C7E0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
}

{
  const char *imp;

  this[1].__vftable = (std::runtime_error_vtbl *)&unk_24CA2C7E0;
  imp = this[1].__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    this[1].__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BC7928);
}

void `non-virtual thunk to'boost::wrapexcept<boost::math::rounding_error>::~wrapexcept(std::runtime_error *a1)
{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24CA2C7E0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
}

{
  const char *imp;

  a1->__vftable = (std::runtime_error_vtbl *)&unk_24CA2C7E0;
  imp = a1->__imp_.__imp_;
  if (imp && (*(unsigned int (**)(const char *))(*(_QWORD *)imp + 32))(imp))
    a1->__imp_.__imp_ = 0;
  std::runtime_error::~runtime_error(a1 - 1);
  JUMPOUT(0x212BC7928);
}

uint64_t boost::wrapexcept<boost::math::rounding_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24CA2C788;
  std::runtime_error::runtime_error((std::runtime_error *)(a1 + 8), (const std::runtime_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = &off_24CA2C7B8;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24CA2C620;
  *(_QWORD *)(a1 + 8) = &unk_24CA2C650;
  *(_QWORD *)(a1 + 24) = &unk_24CA2C678;
  return a1;
}

void sub_2105CB644(_Unwind_Exception *a1)
{
  std::runtime_error *v1;

  std::runtime_error::~runtime_error(v1);
  _Unwind_Resume(a1);
}

void boost::math::rounding_error::~rounding_error(std::runtime_error *this)
{
  std::runtime_error::~runtime_error(this);
  JUMPOUT(0x212BC7928);
}

void boost::throw_exception<std::domain_error>(const std::logic_error *a1)
{
  char *exception;

  exception = (char *)__cxa_allocate_exception(0x40uLL);
  *(_QWORD *)exception = &unk_24CA2C788;
  std::logic_error::logic_error((std::logic_error *)(exception + 8), a1);
  *((_QWORD *)exception + 5) = 0;
  *((_QWORD *)exception + 6) = 0;
  *((_DWORD *)exception + 14) = -1;
  *(_QWORD *)exception = &off_24CA2C698;
  *((_QWORD *)exception + 1) = &unk_24CA2C6C8;
  *((_QWORD *)exception + 3) = &unk_24CA2C6F0;
  *((_QWORD *)exception + 4) = 0;
}

uint64_t boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  MEMORY[0x212BC7694](a1 + 8);
  return a1;
}

uint64_t boost::wrapexcept<std::domain_error>::clone(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_24CA2C788;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x24BEDB8B0] + 16;
  *(_QWORD *)(v2 + 24) = &unk_24CA2C7E0;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 32) = v3;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_24CA2C698;
  *(_QWORD *)(v2 + 8) = &unk_24CA2C6C8;
  *(_QWORD *)(v2 + 24) = &unk_24CA2C6F0;
  boost::exception_detail::copy_boost_exception(v2 + 24, a1 + 24);
  return v2;
}

void boost::wrapexcept<std::domain_error>::rethrow(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  boost::wrapexcept<std::domain_error>::wrapexcept((uint64_t)exception, a1);
}

void sub_2105CB890(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  MEMORY[0x212BC7694](a1 + 8);
  JUMPOUT(0x212BC7928);
}

void `non-virtual thunk to'boost::wrapexcept<std::domain_error>::~wrapexcept(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_24CA2C7E0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x212BC7694);
}

{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_24CA2C7E0;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 24) = 0;
  MEMORY[0x212BC7694](a1);
  JUMPOUT(0x212BC7928);
}

void `non-virtual thunk to'boost::wrapexcept<std::domain_error>::~wrapexcept(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24CA2C7E0;
  v2 = a1[1];
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      a1[1] = 0;
  }
  JUMPOUT(0x212BC7694);
}

{
  uint64_t v2;

  *a1 = &unk_24CA2C7E0;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  MEMORY[0x212BC7694](a1 - 2);
  JUMPOUT(0x212BC7928);
}

uint64_t boost::wrapexcept<std::domain_error>::wrapexcept(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_24CA2C788;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB8B0] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_24CA2C7E0;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_24CA2C698;
  *(_QWORD *)(a1 + 8) = &unk_24CA2C6C8;
  *(_QWORD *)(a1 + 24) = &unk_24CA2C6F0;
  return a1;
}

void HOA::applyDecoderWeighting(unsigned int *a1, _QWORD *a2, unsigned int a3, int a4)
{
  vDSP_Length v8;
  void *v9;
  unsigned int v10;
  float v11;
  HOA *v12;
  unsigned int v13;
  uint64_t v14;
  float v15;
  unsigned int v16;
  double v17;
  float v18;
  double v19;
  float v20;
  unsigned int v21;
  float v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  float v26;
  double v27;
  float v28;
  double v29;
  uint64_t v30;
  unsigned int __IC;
  float __C;
  float __A;
  float v34;

  if (!a4)
    return;
  v8 = a1[2];
  if ((_DWORD)v8)
  {
    v9 = operator new(4 * v8);
    bzero(v9, 4 * v8);
  }
  else
  {
    v9 = 0;
  }
  __IC = a3;
  if (a4 == 2)
  {
    v14 = *a1;
    if (v14 > 0x22)
    {
      v16 = v14 + 1;
      boost::math::detail::gamma_imp<double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>((float)(v14 + 1));
      if (fabs(v17) > 3.40282347e38)
        goto LABEL_39;
      v15 = v17;
      if (v15 <= 3.4028e38)
        v15 = floorf(v15 + 0.5);
    }
    else
    {
      v15 = flt_2105F1688[v14];
      v16 = v14 + 1;
    }
    if (v16 <= 0x22)
    {
      v18 = flt_2105F1688[v16];
      goto LABEL_21;
    }
    boost::math::detail::gamma_imp<double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>((float)(v14 + 2));
    if (fabs(v19) <= 3.40282347e38)
    {
      v18 = v19;
      v20 = floorf(v18 + 0.5);
      if (v18 <= 3.4028e38)
        v18 = v20;
LABEL_21:
      v21 = 0;
      v22 = v18 * v15;
      v23 = 1;
      v24 = v14;
      do
      {
        v34 = 0.0;
        v25 = v14 + v21 + 1;
        if (v25 > 0x22)
        {
          boost::math::detail::gamma_imp<double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>((float)(v14 + v21 + 2));
          if (fabs(v27) > 3.40282347e38)
            goto LABEL_39;
          v26 = v27;
          if (v26 <= 3.4028e38)
            v26 = floorf(v26 + 0.5);
        }
        else
        {
          v26 = flt_2105F1688[v25];
        }
        if (v24 > 0x22)
        {
          boost::math::detail::gamma_imp<double,boost::math::policies::policy<boost::math::policies::promote_float<false>,boost::math::policies::promote_double<false>,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy,boost::math::policies::default_policy>,boost::math::lanczos::lanczos13m53>((float)(v24 + 1));
          if (fabs(v29) > 3.40282347e38)
            goto LABEL_39;
          v28 = v29;
          if (v28 <= 3.4028e38)
            v28 = floorf(v28 + 0.5);
        }
        else
        {
          v28 = flt_2105F1688[v24];
        }
        v34 = v22 / (float)(v28 * v26);
        vDSP_vfill(&v34, (float *)v9 + v21 * v21, 1, v23);
        ++v21;
        v23 += 2;
        --v24;
      }
      while (v21 <= v14);
      goto LABEL_33;
    }
LABEL_39:
    boost::math::policies::detail::raise_error<std::overflow_error,float>();
  }
  if (a4 == 1)
  {
    v10 = *a1;
    v11 = cosf(2.4068 / (float)((float)*a1 + 1.51));
    v12 = 0;
    v13 = 1;
    do
    {
      __A = HOA::legendre(v12, 0, v11);
      vDSP_vfill(&__A, (float *)v9 + ((_DWORD)v12 * (_DWORD)v12), 1, v13);
      v12 = (HOA *)((_DWORD)v12 + 1);
      v13 += 2;
    }
    while (v12 <= v10);
  }
  else
  {
    __C = 1.0;
    vDSP_vfill((const float *)v9, &__C, 1, v8);
  }
LABEL_33:
  if (__IC)
  {
    v30 = 0;
    do
    {
      vDSP_vmul((const float *)v9, 1, (const float *)(*a2 + v30), __IC, (float *)(*a2 + v30), __IC, a1[2]);
      v30 += 4;
    }
    while (4 * __IC != v30);
  }
  if (v9)
    operator delete(v9);
}

void sub_2105CBE68(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

int *HOA::HOA(int *a1, unsigned int a2, int a3, int a4)
{
  char **v5;
  char **v6;
  int32x2_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  char *v17;
  uint64_t v18;
  size_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  int v25;
  float v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  float32x4_t *v36;
  float32x4_t *v37;
  float32x4_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int32x4_t v49;
  int32x4_t *v50;
  int v51;
  unint64_t v52;
  float *v53;
  unsigned int v54;
  int v55;
  uint64_t v56;
  _DWORD *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  unint64_t v64;
  int v65;
  HOA *v66;
  uint64_t v67;
  uint64_t v68;
  const void *v69;
  __int128 *v70;
  __int128 *v71;
  __int128 *v72;
  __int128 *v73;
  char *v74;
  size_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  unsigned int v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  float *v98;
  float v99;
  float v100;
  float v101;
  __float2 v102;
  __float2 v103;
  unsigned int v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  __int128 *v113;
  int v114;
  __int128 *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  char *v119;
  uint64_t v120;
  int v121;
  int *v122;
  int v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  int v127;
  unsigned int v128;
  int v129;
  char *v130;
  unsigned int v131;
  unsigned int v132;
  char **v134;
  char **v135;
  char **v136;
  char **v137;
  char **v138;
  uint8_t buf[4];
  const char *v140;
  __int16 v141;
  int v142;
  __int16 v143;
  const char *v144;
  __int16 v145;
  int v146;
  __int16 v147;
  unsigned int v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  *((_OWORD *)a1 + 2) = 0u;
  a1[1] = a2;
  *((_BYTE *)a1 + 28) = 0;
  *((_OWORD *)a1 + 5) = 0u;
  v5 = (char **)(a1 + 20);
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  *((_OWORD *)a1 + 7) = 0u;
  *((_OWORD *)a1 + 8) = 0u;
  *((_OWORD *)a1 + 9) = 0u;
  *((_OWORD *)a1 + 10) = 0u;
  a1[44] = a4;
  *(_OWORD *)(a1 + 46) = 0u;
  *(_OWORD *)(a1 + 58) = 0u;
  v136 = (char **)(a1 + 58);
  v137 = (char **)(a1 + 52);
  v138 = (char **)(a1 + 26);
  v135 = (char **)(a1 + 64);
  *(_OWORD *)(a1 + 70) = 0u;
  v6 = (char **)(a1 + 70);
  *(_OWORD *)(a1 + 50) = 0u;
  *(_OWORD *)(a1 + 54) = 0u;
  *(_OWORD *)(a1 + 62) = 0u;
  *(_OWORD *)(a1 + 66) = 0u;
  *((_QWORD *)a1 + 37) = 0;
  a1[76] = a3;
  HOA::RotationMatrix::RotationMatrix((uint64_t)(a1 + 78), a2, a3, 1);
  *((_QWORD *)a1 + 46) = 0;
  *((_QWORD *)a1 + 47) = 0;
  *((_QWORD *)a1 + 48) = 0;
  v8 = a1[1];
  v9 = v8 + 1;
  v10 = v9 * v9;
  a1[3] = (v8 + 1) * (v8 + 1);
  *a1 = v8;
  if (a1[76] == 2 && v8 >= 4)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v140 = "HOA.cpp";
      v141 = 1024;
      v143 = 2080;
      v142 = 684;
      v144 = "initialize";
      v145 = 1024;
      v146 = 684;
      v147 = 1024;
      v148 = v8;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; initializing a HOA instance with order = %d > 3 with FuMa normalization",
        buf,
        0x28u);
    }
    v11 = 3;
  }
  else
  {
    if (v8 < 0xB)
      goto LABEL_11;
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136316162;
      v140 = "HOA.cpp";
      v141 = 1024;
      v143 = 2080;
      v142 = 687;
      v144 = "initialize";
      v145 = 1024;
      v146 = 687;
      v147 = 1024;
      v148 = v8;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Warning; initializing a HOA instance with order = %d > 10",
        buf,
        0x28u);
    }
    v11 = 10;
  }
  *a1 = v11;
  v9 = v11 + 1;
  v10 = v9 * v9;
LABEL_11:
  v134 = (char **)(a1 + 92);
  a1[2] = v10;
  v12 = *((_QWORD *)a1 + 10);
  v13 = (*((_QWORD *)a1 + 11) - v12) >> 2;
  if (v10 <= v13)
  {
    if (v10 < v13)
      *((_QWORD *)a1 + 11) = v12 + 4 * v10;
  }
  else
  {
    std::vector<float>::__append(v5, v10 - v13);
    v9 = *a1 + 1;
  }
  v14 = v9;
  v15 = a1[76];
  if (v15 == 2)
  {
    v20 = 0;
    v21 = 0;
    LODWORD(v22) = 0;
    v23 = *v5;
    v24 = (uint64_t)(*v5 + 16);
    v25 = -1;
    __asm { FMOV            V2.4S, #1.0 }
    do
    {
      v31 = sqrtf((float)((float)(int)v21 * 2.0) + 1.0);
      v32 = (int)v22;
      if ((v21 & 0x7FFFFFFC) != 0)
      {
        v33 = v20 & 0xFFFFFFF8;
        v34 = (2 * (_DWORD)v21) & 0xFFFFFFF8;
        v22 = v34 + (int)v22;
        v35 = v32;
        v36 = (float32x4_t *)(v24 + 4 * v32);
        v37 = (float32x4_t *)&flt_2105F119C[v35 + 4];
        do
        {
          v38 = vdivq_f32(_Q2, vmulq_n_f32(*v37, v31));
          v36[-1] = vdivq_f32(_Q2, vmulq_n_f32(v37[-1], v31));
          *v36 = v38;
          v36 += 2;
          v37 += 2;
          v33 -= 8;
        }
        while (v33);
      }
      else
      {
        LODWORD(v34) = 0;
        v22 = (int)v22;
      }
      v39 = v34 + v25;
      do
      {
        *(float *)&v23[4 * v22] = 1.0 / (float)(flt_2105F119C[v22] * v31);
        ++v22;
        _CF = __CFADD__(v39++, 1);
      }
      while (!_CF);
      ++v21;
      v20 += 2;
      v25 -= 2;
    }
    while (v21 != v14);
  }
  else if (v15)
  {
    v40 = 0;
    v41 = 0;
    LODWORD(v42) = 0;
    v43 = *v5;
    v44 = (uint64_t)(*v5 + 16);
    v45 = -1;
    do
    {
      *(float *)v7.i32 = 1.0 / sqrtf((float)((float)(int)v41 * 2.0) + 1.0);
      v46 = (int)v42;
      if ((v41 & 0x7FFFFFFC) != 0)
      {
        v47 = v40 & 0xFFFFFFF8;
        v48 = (2 * (_DWORD)v41) & 0xFFFFFFF8;
        v42 = v48 + (int)v42;
        v49 = vdupq_lane_s32(v7, 0);
        v50 = (int32x4_t *)(v44 + 4 * v46);
        do
        {
          v50[-1] = v49;
          *v50 = v49;
          v50 += 2;
          v47 -= 8;
        }
        while (v47);
      }
      else
      {
        LODWORD(v48) = 0;
        v42 = (int)v42;
      }
      v51 = v48 + v45;
      do
      {
        *(_DWORD *)&v43[4 * v42++] = v7.i32[0];
        _CF = __CFADD__(v51++, 1);
      }
      while (!_CF);
      ++v41;
      v40 += 2;
      v45 -= 2;
    }
    while (v41 != v14);
  }
  else
  {
    v16 = 0;
    v17 = *v5;
    v18 = 1;
    v19 = 4;
    do
    {
      memset_pattern16(&v17[4 * v16], &unk_2105F2200, v19);
      v16 += v18;
      v18 += 2;
      v19 += 8;
      --v14;
    }
    while (v14);
  }
  v52 = (a1[2] * a1[2]);
  *(_DWORD *)buf = 0;
  std::vector<float>::assign(v138, v52, buf);
  v55 = a1[44];
  v56 = *a1;
  if (v55)
  {
    if (v55 == 2)
    {
      if (v56 < 0xA)
      {
        v57 = &unk_2105F1DAC;
        goto LABEL_50;
      }
    }
    else
    {
      if (v55 != 1)
        goto LABEL_53;
      if (v56 < 0xA)
      {
        v57 = &unk_2105F1D84;
LABEL_50:
        v54 = v57[v56];
        goto LABEL_53;
      }
    }
    v54 = 121;
  }
  else
  {
    if (v56 < 0x16)
    {
      v57 = &unk_2105F1DD4;
      goto LABEL_50;
    }
    v54 = 1014;
  }
LABEL_53:
  a1[6] = v54;
  v58 = v54;
  v59 = *((_QWORD *)a1 + 26);
  v60 = (*((_QWORD *)a1 + 27) - v59) >> 2;
  if (v58 <= v60)
  {
    if (v58 < v60)
      *((_QWORD *)a1 + 27) = v59 + 4 * v58;
  }
  else
  {
    std::vector<float>::__append(v137, v58 - v60);
    v58 = a1[6];
  }
  v61 = *((_QWORD *)a1 + 29);
  v62 = (*((_QWORD *)a1 + 30) - v61) >> 2;
  if (v58 <= v62)
  {
    if (v58 < v62)
      *((_QWORD *)a1 + 30) = v61 + 4 * v58;
  }
  else
  {
    std::vector<float>::__append(v136, v58 - v62);
    v58 = a1[6];
  }
  v63 = (char *)*((_QWORD *)a1 + 32);
  v64 = (uint64_t)(*((_QWORD *)a1 + 33) - (_QWORD)v63) >> 2;
  if (v58 <= v64)
  {
    if (v58 < v64)
      *((_QWORD *)a1 + 33) = &v63[4 * v58];
  }
  else
  {
    std::vector<float>::__append(v135, v58 - v64);
    v63 = *v135;
  }
  v65 = a1[44];
  v66 = (HOA *)*a1;
  v67 = *((_QWORD *)a1 + 26);
  v68 = *((_QWORD *)a1 + 29);
  if (v65)
  {
    if (v65 == 2)
    {
      switch((int)v66)
      {
        case 0:
          if (v67 && v68 && v63)
          {
LABEL_77:
            *(_DWORD *)v67 = 0;
            *(_DWORD *)v68 = 0;
            *(_DWORD *)v63 = 1065353216;
          }
          break;
        case 1:
          if (v67 && v68 && v63)
          {
            *(_OWORD *)v67 = xmmword_2105F21D0;
            *(_OWORD *)v68 = xmmword_2105F21E0;
            v70 = &xmmword_2105F21F0;
LABEL_127:
            *(_OWORD *)v63 = *v70;
          }
          break;
        case 2:
          if (v67 && v68 && v63)
          {
            *(_DWORD *)(v67 + 32) = 1116271638;
            *(_OWORD *)v67 = xmmword_2105EF898;
            *(_OWORD *)(v67 + 16) = unk_2105EF8A8;
            *(_DWORD *)(v68 + 32) = -1035839118;
            *(_OWORD *)v68 = xmmword_2105EF8BC;
            *(_OWORD *)(v68 + 16) = unk_2105EF8CC;
            *((_DWORD *)v63 + 8) = 1068792731;
            v71 = &xmmword_2105EF8E0;
            goto LABEL_141;
          }
          break;
        case 3:
          if (v67 && v68 && v63)
          {
            *(_OWORD *)v67 = xmmword_2105EF904;
            *(_OWORD *)(v67 + 16) = unk_2105EF914;
            *(_OWORD *)(v67 + 32) = xmmword_2105EF924;
            *(_OWORD *)(v67 + 48) = unk_2105EF934;
            *(_OWORD *)v68 = xmmword_2105EF944;
            *(_OWORD *)(v68 + 16) = unk_2105EF954;
            *(_OWORD *)(v68 + 32) = xmmword_2105EF964;
            *(_OWORD *)(v68 + 48) = unk_2105EF974;
            v72 = &xmmword_2105EF984;
            goto LABEL_157;
          }
          break;
        case 4:
          if (v67 && v68 && v63)
          {
            *(_DWORD *)(v67 + 96) = 1058111518;
            *(_OWORD *)v67 = xmmword_2105EF9C4;
            *(_OWORD *)(v67 + 16) = unk_2105EF9D4;
            *(_OWORD *)(v67 + 64) = xmmword_2105EFA04;
            *(_OWORD *)(v67 + 80) = unk_2105EFA14;
            *(_OWORD *)(v67 + 32) = xmmword_2105EF9E4;
            *(_OWORD *)(v67 + 48) = unk_2105EF9F4;
            *(_OWORD *)v68 = xmmword_2105EFA28;
            *(_OWORD *)(v68 + 16) = unk_2105EFA38;
            *(_OWORD *)(v68 + 64) = xmmword_2105EFA68;
            *(_OWORD *)(v68 + 80) = unk_2105EFA78;
            *(_OWORD *)(v68 + 32) = xmmword_2105EFA48;
            *(_OWORD *)(v68 + 48) = unk_2105EFA58;
            *(_DWORD *)(v68 + 96) = 1110360230;
            *((_DWORD *)v63 + 24) = 1057102910;
            v71 = &xmmword_2105EFA8C;
LABEL_140:
            v76 = v71[5];
            *((_OWORD *)v63 + 4) = v71[4];
            *((_OWORD *)v63 + 5) = v76;
            v77 = v71[3];
            *((_OWORD *)v63 + 2) = v71[2];
            *((_OWORD *)v63 + 3) = v77;
LABEL_141:
            v78 = v71[1];
            *(_OWORD *)v63 = *v71;
            *((_OWORD *)v63 + 1) = v78;
          }
          break;
        case 5:
          if (v67 && v68 && v63)
          {
            *(_OWORD *)(v67 + 32) = xmmword_2105EFB10;
            *(_OWORD *)(v67 + 48) = unk_2105EFB20;
            *(_OWORD *)(v67 + 128) = xmmword_2105EFB70;
            *(_OWORD *)(v67 + 96) = xmmword_2105EFB50;
            *(_OWORD *)(v67 + 112) = unk_2105EFB60;
            *(_OWORD *)(v67 + 64) = xmmword_2105EFB30;
            *(_OWORD *)(v67 + 80) = unk_2105EFB40;
            *(_OWORD *)v67 = xmmword_2105EFAF0;
            *(_OWORD *)(v67 + 16) = unk_2105EFB00;
            *(_OWORD *)(v68 + 32) = xmmword_2105EFBA0;
            *(_OWORD *)(v68 + 48) = unk_2105EFBB0;
            *(_OWORD *)v68 = xmmword_2105EFB80;
            *(_OWORD *)(v68 + 16) = unk_2105EFB90;
            *(_OWORD *)(v68 + 128) = xmmword_2105EFC00;
            *(_OWORD *)(v68 + 96) = xmmword_2105EFBE0;
            *(_OWORD *)(v68 + 112) = unk_2105EFBF0;
            *(_OWORD *)(v68 + 64) = xmmword_2105EFBC0;
            *(_OWORD *)(v68 + 80) = unk_2105EFBD0;
            v73 = &xmmword_2105EFC10;
LABEL_146:
            v79 = v73[7];
            *((_OWORD *)v63 + 6) = v73[6];
            *((_OWORD *)v63 + 7) = v79;
            *((_OWORD *)v63 + 8) = v73[8];
            v80 = v73[3];
            *((_OWORD *)v63 + 2) = v73[2];
            *((_OWORD *)v63 + 3) = v80;
            v81 = v73[5];
            *((_OWORD *)v63 + 4) = v73[4];
            *((_OWORD *)v63 + 5) = v81;
            v82 = v73[1];
            *(_OWORD *)v63 = *v73;
            *((_OWORD *)v63 + 1) = v82;
          }
          break;
        case 6:
          if (v67 && v68 && v63)
          {
            *(_DWORD *)(v67 + 192) = 1127431944;
            *(_OWORD *)(v67 + 128) = xmmword_2105EFD20;
            *(_OWORD *)(v67 + 144) = unk_2105EFD30;
            *(_OWORD *)(v67 + 160) = xmmword_2105EFD40;
            *(_OWORD *)(v67 + 176) = unk_2105EFD50;
            *(_OWORD *)(v67 + 64) = xmmword_2105EFCE0;
            *(_OWORD *)(v67 + 80) = unk_2105EFCF0;
            *(_OWORD *)(v67 + 96) = xmmword_2105EFD00;
            *(_OWORD *)(v67 + 112) = unk_2105EFD10;
            *(_OWORD *)v67 = xmmword_2105EFCA0;
            *(_OWORD *)(v67 + 16) = unk_2105EFCB0;
            *(_OWORD *)(v67 + 32) = xmmword_2105EFCC0;
            *(_OWORD *)(v67 + 48) = unk_2105EFCD0;
            *(_DWORD *)(v68 + 192) = -1030844557;
            *(_OWORD *)(v68 + 128) = xmmword_2105EFDE4;
            *(_OWORD *)(v68 + 144) = unk_2105EFDF4;
            *(_OWORD *)(v68 + 160) = xmmword_2105EFE04;
            *(_OWORD *)(v68 + 176) = unk_2105EFE14;
            *(_OWORD *)(v68 + 64) = xmmword_2105EFDA4;
            *(_OWORD *)(v68 + 80) = unk_2105EFDB4;
            *(_OWORD *)(v68 + 96) = xmmword_2105EFDC4;
            *(_OWORD *)(v68 + 112) = unk_2105EFDD4;
            *(_OWORD *)v68 = xmmword_2105EFD64;
            *(_OWORD *)(v68 + 16) = unk_2105EFD74;
            *(_OWORD *)(v68 + 32) = xmmword_2105EFD84;
            *(_OWORD *)(v68 + 48) = unk_2105EFD94;
            *((_DWORD *)v63 + 48) = 1048755214;
            v72 = &xmmword_2105EFE28;
            goto LABEL_156;
          }
          break;
        case 7:
          if (v67 && v68 && v63)
          {
            *(_OWORD *)(v67 + 192) = xmmword_2105EFFAC;
            *(_OWORD *)(v67 + 208) = unk_2105EFFBC;
            *(_OWORD *)(v67 + 224) = xmmword_2105EFFCC;
            *(_OWORD *)(v67 + 240) = unk_2105EFFDC;
            *(_OWORD *)(v67 + 128) = xmmword_2105EFF6C;
            *(_OWORD *)(v67 + 144) = unk_2105EFF7C;
            *(_OWORD *)(v67 + 160) = xmmword_2105EFF8C;
            *(_OWORD *)(v67 + 176) = unk_2105EFF9C;
            *(_OWORD *)(v67 + 64) = xmmword_2105EFF2C;
            *(_OWORD *)(v67 + 80) = unk_2105EFF3C;
            *(_OWORD *)(v67 + 96) = xmmword_2105EFF4C;
            *(_OWORD *)(v67 + 112) = unk_2105EFF5C;
            *(_OWORD *)v67 = xmmword_2105EFEEC;
            *(_OWORD *)(v67 + 16) = unk_2105EFEFC;
            *(_OWORD *)(v67 + 32) = xmmword_2105EFF0C;
            *(_OWORD *)(v67 + 48) = unk_2105EFF1C;
            *(_OWORD *)(v68 + 192) = xmmword_2105F00AC;
            *(_OWORD *)(v68 + 208) = unk_2105F00BC;
            *(_OWORD *)(v68 + 224) = xmmword_2105F00CC;
            *(_OWORD *)(v68 + 240) = unk_2105F00DC;
            *(_OWORD *)(v68 + 128) = xmmword_2105F006C;
            *(_OWORD *)(v68 + 144) = unk_2105F007C;
            *(_OWORD *)(v68 + 160) = xmmword_2105F008C;
            *(_OWORD *)(v68 + 176) = unk_2105F009C;
            *(_OWORD *)(v68 + 64) = xmmword_2105F002C;
            *(_OWORD *)(v68 + 80) = unk_2105F003C;
            *(_OWORD *)(v68 + 96) = xmmword_2105F004C;
            *(_OWORD *)(v68 + 112) = unk_2105F005C;
            *(_OWORD *)v68 = xmmword_2105EFFEC;
            *(_OWORD *)(v68 + 16) = unk_2105EFFFC;
            *(_OWORD *)(v68 + 32) = xmmword_2105F000C;
            *(_OWORD *)(v68 + 48) = unk_2105F001C;
            v72 = &xmmword_2105F00EC;
LABEL_155:
            v83 = v72[13];
            *((_OWORD *)v63 + 12) = v72[12];
            *((_OWORD *)v63 + 13) = v83;
            v84 = v72[15];
            *((_OWORD *)v63 + 14) = v72[14];
            *((_OWORD *)v63 + 15) = v84;
LABEL_156:
            v85 = v72[9];
            *((_OWORD *)v63 + 8) = v72[8];
            *((_OWORD *)v63 + 9) = v85;
            v86 = v72[11];
            *((_OWORD *)v63 + 10) = v72[10];
            *((_OWORD *)v63 + 11) = v86;
            v87 = v72[5];
            *((_OWORD *)v63 + 4) = v72[4];
            *((_OWORD *)v63 + 5) = v87;
            v88 = v72[7];
            *((_OWORD *)v63 + 6) = v72[6];
            *((_OWORD *)v63 + 7) = v88;
LABEL_157:
            v89 = v72[1];
            *(_OWORD *)v63 = *v72;
            *((_OWORD *)v63 + 1) = v89;
            v90 = v72[3];
            *((_OWORD *)v63 + 2) = v72[2];
            *((_OWORD *)v63 + 3) = v90;
          }
          break;
        case 8:
          if (v67 && v68 && v63)
          {
            memcpy(*((void **)a1 + 26), &unk_2105F01EC, 0x144uLL);
            memcpy((void *)v68, &unk_2105F0330, 0x144uLL);
            v69 = &unk_2105F0474;
LABEL_162:
            v74 = v63;
            v75 = 324;
            goto LABEL_168;
          }
          break;
        case 9:
          if (v67 && v68 && v63)
          {
            memcpy(*((void **)a1 + 26), &unk_2105F05B8, 0x190uLL);
            memcpy((void *)v68, &unk_2105F0748, 0x190uLL);
            v69 = &unk_2105F08D8;
LABEL_167:
            v74 = v63;
            v75 = 400;
            goto LABEL_168;
          }
          break;
        default:
          if (v67 && v68 && v63)
          {
            memcpy(*((void **)a1 + 26), &unk_2105F0A68, 0x1E4uLL);
            memcpy((void *)v68, &unk_2105F0C4C, 0x1E4uLL);
            v69 = &unk_2105F0E30;
LABEL_122:
            v74 = v63;
            v75 = 484;
LABEL_168:
            memcpy(v74, v69, v75);
          }
          break;
      }
    }
    else if (v65 == 1)
    {
      switch((int)v66)
      {
        case 0:
          if (v67 && v68)
            goto LABEL_77;
          break;
        case 1:
          if (v67 && v68 && v63)
          {
            *(_OWORD *)v67 = xmmword_2105F21D0;
            *(_OWORD *)v68 = xmmword_2105F21B0;
            v70 = &xmmword_2105F21C0;
            goto LABEL_127;
          }
          break;
        case 2:
          if (v67 && v68 && v63)
          {
            *(_DWORD *)(v67 + 32) = 1123963561;
            *(_OWORD *)v67 = xmmword_2105EE11C;
            *(_OWORD *)(v67 + 16) = unk_2105EE12C;
            *(_DWORD *)(v68 + 32) = -1039627997;
            *(_OWORD *)v68 = xmmword_2105EE140;
            *(_OWORD *)(v68 + 16) = unk_2105EE150;
            *((_DWORD *)v63 + 8) = 1069089495;
            v71 = &xmmword_2105EE164;
            goto LABEL_141;
          }
          break;
        case 3:
          if (v67 && v68 && v63)
          {
            *(_OWORD *)v67 = xmmword_2105EE188;
            *(_OWORD *)(v67 + 16) = unk_2105EE198;
            *(_OWORD *)(v67 + 32) = xmmword_2105EE1A8;
            *(_OWORD *)(v67 + 48) = unk_2105EE1B8;
            *(_OWORD *)v68 = xmmword_2105EE1C8;
            *(_OWORD *)(v68 + 16) = unk_2105EE1D8;
            *(_OWORD *)(v68 + 32) = xmmword_2105EE1E8;
            *(_OWORD *)(v68 + 48) = unk_2105EE1F8;
            v72 = &xmmword_2105EE208;
            goto LABEL_157;
          }
          break;
        case 4:
          if (v67 && v68 && v63)
          {
            *(_DWORD *)(v67 + 96) = -1038292098;
            *(_OWORD *)v67 = xmmword_2105EE248;
            *(_OWORD *)(v67 + 16) = unk_2105EE258;
            *(_OWORD *)(v67 + 64) = xmmword_2105EE288;
            *(_OWORD *)(v67 + 80) = unk_2105EE298;
            *(_OWORD *)(v67 + 32) = xmmword_2105EE268;
            *(_OWORD *)(v67 + 48) = unk_2105EE278;
            *(_OWORD *)v68 = xmmword_2105EE2AC;
            *(_OWORD *)(v68 + 16) = unk_2105EE2BC;
            *(_OWORD *)(v68 + 64) = xmmword_2105EE2EC;
            *(_OWORD *)(v68 + 80) = unk_2105EE2FC;
            *(_OWORD *)(v68 + 32) = xmmword_2105EE2CC;
            *(_OWORD *)(v68 + 48) = unk_2105EE2DC;
            *(_DWORD *)(v68 + 96) = -1040443289;
            *((_DWORD *)v63 + 24) = 1057367852;
            v71 = &xmmword_2105EE310;
            goto LABEL_140;
          }
          break;
        case 5:
          if (v67 && v68 && v63)
          {
            *(_OWORD *)(v67 + 32) = xmmword_2105EE394;
            *(_OWORD *)(v67 + 48) = unk_2105EE3A4;
            *(_OWORD *)(v67 + 128) = xmmword_2105EE3F4;
            *(_OWORD *)(v67 + 96) = xmmword_2105EE3D4;
            *(_OWORD *)(v67 + 112) = unk_2105EE3E4;
            *(_OWORD *)(v67 + 64) = xmmword_2105EE3B4;
            *(_OWORD *)(v67 + 80) = unk_2105EE3C4;
            *(_OWORD *)v67 = xmmword_2105EE374;
            *(_OWORD *)(v67 + 16) = unk_2105EE384;
            *(_OWORD *)(v68 + 32) = xmmword_2105EE424;
            *(_OWORD *)(v68 + 48) = unk_2105EE434;
            *(_OWORD *)v68 = xmmword_2105EE404;
            *(_OWORD *)(v68 + 16) = unk_2105EE414;
            *(_OWORD *)(v68 + 128) = xmmword_2105EE484;
            *(_OWORD *)(v68 + 96) = xmmword_2105EE464;
            *(_OWORD *)(v68 + 112) = unk_2105EE474;
            *(_OWORD *)(v68 + 64) = xmmword_2105EE444;
            *(_OWORD *)(v68 + 80) = unk_2105EE454;
            v73 = &xmmword_2105EE494;
            goto LABEL_146;
          }
          break;
        case 6:
          if (v67 && v68 && v63)
          {
            *(_DWORD *)(v67 + 192) = -1022566698;
            *(_OWORD *)(v67 + 128) = xmmword_2105EE5A4;
            *(_OWORD *)(v67 + 144) = unk_2105EE5B4;
            *(_OWORD *)(v67 + 160) = xmmword_2105EE5C4;
            *(_OWORD *)(v67 + 176) = unk_2105EE5D4;
            *(_OWORD *)(v67 + 64) = xmmword_2105EE564;
            *(_OWORD *)(v67 + 80) = unk_2105EE574;
            *(_OWORD *)(v67 + 96) = xmmword_2105EE584;
            *(_OWORD *)(v67 + 112) = unk_2105EE594;
            *(_OWORD *)v67 = xmmword_2105EE524;
            *(_OWORD *)(v67 + 16) = unk_2105EE534;
            *(_OWORD *)(v67 + 32) = xmmword_2105EE544;
            *(_OWORD *)(v67 + 48) = unk_2105EE554;
            *(_DWORD *)(v68 + 192) = 1102138249;
            *(_OWORD *)(v68 + 128) = xmmword_2105EE668;
            *(_OWORD *)(v68 + 144) = unk_2105EE678;
            *(_OWORD *)(v68 + 160) = xmmword_2105EE688;
            *(_OWORD *)(v68 + 176) = unk_2105EE698;
            *(_OWORD *)(v68 + 64) = xmmword_2105EE628;
            *(_OWORD *)(v68 + 80) = unk_2105EE638;
            *(_OWORD *)(v68 + 96) = xmmword_2105EE648;
            *(_OWORD *)(v68 + 112) = unk_2105EE658;
            *(_OWORD *)v68 = xmmword_2105EE5E8;
            *(_OWORD *)(v68 + 16) = unk_2105EE5F8;
            *(_OWORD *)(v68 + 32) = xmmword_2105EE608;
            *(_OWORD *)(v68 + 48) = unk_2105EE618;
            *((_DWORD *)v63 + 48) = 1048646893;
            v72 = &xmmword_2105EE6AC;
            goto LABEL_156;
          }
          break;
        case 7:
          if (v67 && v68 && v63)
          {
            *(_OWORD *)(v67 + 192) = xmmword_2105EE830;
            *(_OWORD *)(v67 + 208) = unk_2105EE840;
            *(_OWORD *)(v67 + 224) = xmmword_2105EE850;
            *(_OWORD *)(v67 + 240) = unk_2105EE860;
            *(_OWORD *)(v67 + 128) = xmmword_2105EE7F0;
            *(_OWORD *)(v67 + 144) = unk_2105EE800;
            *(_OWORD *)(v67 + 160) = xmmword_2105EE810;
            *(_OWORD *)(v67 + 176) = unk_2105EE820;
            *(_OWORD *)(v67 + 64) = xmmword_2105EE7B0;
            *(_OWORD *)(v67 + 80) = unk_2105EE7C0;
            *(_OWORD *)(v67 + 96) = xmmword_2105EE7D0;
            *(_OWORD *)(v67 + 112) = unk_2105EE7E0;
            *(_OWORD *)v67 = xmmword_2105EE770;
            *(_OWORD *)(v67 + 16) = unk_2105EE780;
            *(_OWORD *)(v67 + 32) = xmmword_2105EE790;
            *(_OWORD *)(v67 + 48) = unk_2105EE7A0;
            *(_OWORD *)(v68 + 192) = xmmword_2105EE930;
            *(_OWORD *)(v68 + 208) = unk_2105EE940;
            *(_OWORD *)(v68 + 224) = xmmword_2105EE950;
            *(_OWORD *)(v68 + 240) = unk_2105EE960;
            *(_OWORD *)(v68 + 128) = xmmword_2105EE8F0;
            *(_OWORD *)(v68 + 144) = unk_2105EE900;
            *(_OWORD *)(v68 + 160) = xmmword_2105EE910;
            *(_OWORD *)(v68 + 176) = unk_2105EE920;
            *(_OWORD *)(v68 + 64) = xmmword_2105EE8B0;
            *(_OWORD *)(v68 + 80) = unk_2105EE8C0;
            *(_OWORD *)(v68 + 96) = xmmword_2105EE8D0;
            *(_OWORD *)(v68 + 112) = unk_2105EE8E0;
            *(_OWORD *)v68 = xmmword_2105EE870;
            *(_OWORD *)(v68 + 16) = unk_2105EE880;
            *(_OWORD *)(v68 + 32) = xmmword_2105EE890;
            *(_OWORD *)(v68 + 48) = unk_2105EE8A0;
            v72 = &xmmword_2105EE970;
            goto LABEL_155;
          }
          break;
        case 8:
          if (v67 && v68 && v63)
          {
            memcpy(*((void **)a1 + 26), &unk_2105EEA70, 0x144uLL);
            memcpy((void *)v68, &unk_2105EEBB4, 0x144uLL);
            v69 = &unk_2105EECF8;
            goto LABEL_162;
          }
          break;
        case 9:
          if (v67 && v68 && v63)
          {
            memcpy(*((void **)a1 + 26), &unk_2105EEE3C, 0x190uLL);
            memcpy((void *)v68, &unk_2105EEFCC, 0x190uLL);
            v69 = &unk_2105EF15C;
            goto LABEL_167;
          }
          break;
        default:
          if (v67 && v68 && v63)
          {
            memcpy(*((void **)a1 + 26), &unk_2105EF2EC, 0x1E4uLL);
            memcpy((void *)v68, &unk_2105EF4D0, 0x1E4uLL);
            v69 = &unk_2105EF6B4;
            goto LABEL_122;
          }
          break;
      }
    }
  }
  else
  {
    HOA::getTDesign(v66, (_OWORD *)v67, *((float **)a1 + 29), (float *)v63, v53);
  }
  vDSP_vsmul(*((const float **)a1 + 26), 1, &kDeg2Radf, *((float **)a1 + 26), 1, a1[6]);
  vDSP_vsmul(*((const float **)a1 + 29), 1, &kDeg2Radf, *((float **)a1 + 29), 1, a1[6]);
  v91 = a1[6];
  v92 = 3 * v91;
  v93 = *((_QWORD *)a1 + 35);
  v94 = (*((_QWORD *)a1 + 36) - v93) >> 2;
  if (v92 <= v94)
  {
    if (v92 < v94)
      *((_QWORD *)a1 + 36) = v93 + 4 * v92;
  }
  else
  {
    std::vector<float>::__append(v6, v92 - v94);
    v91 = a1[6];
  }
  if (v91)
  {
    v95 = *v137;
    v96 = *v136;
    v97 = v91;
    v98 = (float *)(*v6 + 8);
    do
    {
      v99 = *(float *)v95;
      v95 += 4;
      v100 = v99;
      v101 = *(float *)v96;
      v96 += 4;
      v102 = __sincosf_stret(v101);
      v103 = __sincosf_stret(v100);
      *(v98 - 2) = v102.__cosval * v103.__cosval;
      *(v98 - 1) = v102.__cosval * v103.__sinval;
      *v98 = v102.__sinval;
      v98 += 3;
      --v97;
    }
    while (v97);
  }
  if (a1[76] != 2)
    goto LABEL_220;
  v104 = a1[2];
  v105 = v104 * v104;
  v106 = *((_QWORD *)a1 + 46);
  v107 = (*((_QWORD *)a1 + 47) - v106) >> 2;
  if (v105 <= v107)
  {
    if (v105 < v107)
      *((_QWORD *)a1 + 47) = v106 + 4 * v105;
  }
  else
  {
    std::vector<float>::__append(v134, v105 - v107);
    v104 = a1[2];
  }
  if (!v104)
    goto LABEL_220;
  v108 = *v134;
  if (v104 >= 8)
  {
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = (__int128 *)&unk_2105F11EC;
    while (1)
    {
      v114 = v111;
      v115 = v113;
      v116 = v104 & 0xFFFFFFF8;
      if (__CFADD__(v104 * v112, v104 - 1))
      {
        v117 = 0;
      }
      else
      {
        do
        {
          v118 = *v115;
          v119 = &v108[4 * v114];
          *(_OWORD *)v119 = *(v115 - 1);
          *((_OWORD *)v119 + 1) = v118;
          v115 += 2;
          v114 += 8;
          v116 -= 8;
        }
        while (v116);
        v117 = v104 & 0xFFFFFFF8;
        if (v117 == v104)
          goto LABEL_187;
      }
      v120 = v104 - v117;
      v121 = v111 + v117;
      v122 = (int *)&xmmword_2105F11DC + v117 + v110;
      do
      {
        v123 = *v122++;
        *(_DWORD *)&v108[4 * v121++] = v123;
        --v120;
      }
      while (v120);
LABEL_187:
      ++v112;
      v113 += 4;
      v111 += v104;
      v110 += 16;
      if (v112 == v104)
        goto LABEL_220;
    }
  }
  *(_DWORD *)v108 = 1065353216;
  if (v104 == 1)
    goto LABEL_220;
  *((_DWORD *)v108 + 1) = 0;
  *((_DWORD *)v108 + 2) = 0;
  if (v104 == 2)
  {
    v109 = 3;
LABEL_219:
    *(_DWORD *)&v108[4 * v109] = 0;
    goto LABEL_220;
  }
  *((_DWORD *)v108 + 3) = 0;
  if (v104 == 3)
  {
    *((_QWORD *)v108 + 2) = 0;
    *((_QWORD *)v108 + 3) = 0x3F80000000000000;
    v109 = 8;
    goto LABEL_219;
  }
  if (v104 != 4)
  {
    *((_DWORD *)v108 + 4) = 0;
    if (v104 != 5)
    {
      *((_DWORD *)v108 + 5) = 0;
      if (v104 != 6)
        *((_DWORD *)v108 + 6) = 0;
    }
  }
  *(_DWORD *)&v108[4 * v104] = 0;
  *(_DWORD *)&v108[4 * v104 + 4] = 0;
  *(_DWORD *)&v108[4 * v104 + 8] = 0;
  *(_DWORD *)&v108[4 * v104 + 12] = 1065353216;
  if (v104 != 4)
  {
    *(_DWORD *)&v108[4 * v104 + 16] = 0;
    if (v104 != 5)
    {
      *(_DWORD *)&v108[4 * v104 + 20] = 0;
      if (v104 != 6)
      {
        *((_DWORD *)v108 + 13) = 0;
        v127 = 2 * v104;
        *(_QWORD *)&v108[8 * v104] = 0x3F80000000000000;
        *(_DWORD *)&v108[4 * (v127 + 2)] = 0;
        *(_DWORD *)&v108[4 * (v127 + 3)] = 0;
        v125 = v104 == 4;
        *(_DWORD *)&v108[4 * (v127 + 4)] = 0;
        *(_DWORD *)&v108[4 * (v127 + 5)] = 0;
        v126 = 2 * v104 + 6;
        goto LABEL_209;
      }
    }
  }
  v124 = 2 * v104;
  *(_QWORD *)&v108[8 * v104] = 0x3F80000000000000;
  *(_DWORD *)&v108[4 * (v124 + 2)] = 0;
  *(_DWORD *)&v108[4 * (v124 + 3)] = 0;
  v125 = v104 == 4;
  if (v104 != 4)
  {
    *(_DWORD *)&v108[4 * (v124 + 4)] = 0;
    if (v104 != 5)
    {
      v126 = v124 + 5;
LABEL_209:
      *(_DWORD *)&v108[4 * v126] = 0;
    }
  }
  v128 = 3 * v104;
  *(_DWORD *)&v108[4 * v128] = 0;
  *(_DWORD *)&v108[4 * v128 + 4] = 0;
  *(_DWORD *)&v108[4 * v128 + 8] = 1065353216;
  *(_DWORD *)&v108[4 * v128 + 12] = 0;
  if (!v125)
  {
    *(_DWORD *)&v108[4 * v128 + 16] = 0;
    if (v104 == 5)
    {
      *((_QWORD *)v108 + 10) = 0;
      *((_QWORD *)v108 + 11) = 0;
      v109 = 24;
      goto LABEL_219;
    }
    *(_DWORD *)&v108[4 * v128 + 20] = 0;
    if (v104 != 6)
      *(_DWORD *)&v108[4 * v128 + 24] = 0;
    v129 = 4 * v104;
    v130 = &v108[16 * v104];
    *(_QWORD *)v130 = 0;
    *((_QWORD *)v130 + 1) = 0;
    *(_DWORD *)&v108[4 * (v129 + 4)] = 0;
    *(_DWORD *)&v108[4 * (v129 + 5)] = 0;
    if (v104 != 6)
      *(_DWORD *)&v108[4 * (v129 + 6)] = 1065353216;
    v131 = 5 * v104;
    *(_DWORD *)&v108[4 * v131] = 0;
    *(_DWORD *)&v108[4 * v131 + 4] = 0;
    *(_DWORD *)&v108[4 * v131 + 8] = 0;
    *(_DWORD *)&v108[4 * v131 + 12] = 0;
    *(_DWORD *)&v108[4 * v131 + 16] = 0;
    *(_DWORD *)&v108[4 * v131 + 20] = 0;
    if (v104 != 6)
    {
      *(_DWORD *)&v108[4 * v131 + 24] = 0;
      v132 = 6 * v104;
      *(_QWORD *)&v108[4 * v132] = 0;
      *(_QWORD *)&v108[4 * v132 + 8] = 0;
      *(_QWORD *)&v108[4 * v132 + 16] = 0x3F80000000000000;
      v109 = v132 + 6;
      goto LABEL_219;
    }
  }
LABEL_220:
  *((_QWORD *)a1 + 2) = 0;
  *((_BYTE *)a1 + 28) = 1;
  return a1;
}

void sub_2105CD180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, void **a13, void **a14, void **a15, void **a16)
{
  _QWORD *v16;
  void **v17;
  void **v18;
  void **v19;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  void *v31;

  v21 = *v19;
  if (*v19)
  {
    v16[36] = v21;
    operator delete(v21);
  }
  v22 = *a13;
  if (*a13)
  {
    v16[33] = v22;
    operator delete(v22);
  }
  v23 = *a14;
  if (*a14)
  {
    v16[30] = v23;
    operator delete(v23);
  }
  v24 = *a15;
  if (*a15)
  {
    v16[27] = v24;
    operator delete(v24);
  }
  v25 = *a11;
  if (*a11)
  {
    v16[24] = v25;
    operator delete(v25);
    v26 = (void *)v16[19];
    if (!v26)
    {
LABEL_11:
      v27 = (void *)v16[16];
      if (!v27)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  else
  {
    v26 = (void *)v16[19];
    if (!v26)
      goto LABEL_11;
  }
  v16[20] = v26;
  operator delete(v26);
  v27 = (void *)v16[16];
  if (!v27)
  {
LABEL_13:
    v28 = *a16;
    if (*a16)
    {
      v16[14] = v28;
      operator delete(v28);
      v29 = *v18;
      if (!*v18)
      {
LABEL_15:
        v30 = (void *)v16[7];
        if (!v30)
          goto LABEL_16;
        goto LABEL_23;
      }
    }
    else
    {
      v29 = *v18;
      if (!*v18)
        goto LABEL_15;
    }
    v16[11] = v29;
    operator delete(v29);
    v30 = (void *)v16[7];
    if (!v30)
    {
LABEL_16:
      v31 = *v17;
      if (!*v17)
        goto LABEL_17;
      goto LABEL_24;
    }
LABEL_23:
    v16[8] = v30;
    operator delete(v30);
    v31 = *v17;
    if (!*v17)
LABEL_17:
      _Unwind_Resume(exception_object);
LABEL_24:
    v16[5] = v31;
    operator delete(v31);
    _Unwind_Resume(exception_object);
  }
LABEL_12:
  v16[17] = v27;
  operator delete(v27);
  goto LABEL_13;
}

void HOA::~HOA(HOA *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v2 = (void *)*((_QWORD *)this + 46);
  if (v2)
  {
    *((_QWORD *)this + 47) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 42);
  if (v3)
  {
    *((_QWORD *)this + 43) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 39);
  if (v4)
  {
    *((_QWORD *)this + 40) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 35);
  if (v5)
  {
    *((_QWORD *)this + 36) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 32);
  if (v6)
  {
    *((_QWORD *)this + 33) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 29);
  if (v7)
  {
    *((_QWORD *)this + 30) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 26);
  if (v8)
  {
    *((_QWORD *)this + 27) = v8;
    operator delete(v8);
  }
  v9 = (void *)*((_QWORD *)this + 23);
  if (v9)
  {
    *((_QWORD *)this + 24) = v9;
    operator delete(v9);
  }
  v10 = (void *)*((_QWORD *)this + 19);
  if (v10)
  {
    *((_QWORD *)this + 20) = v10;
    operator delete(v10);
  }
  v11 = (void *)*((_QWORD *)this + 16);
  if (v11)
  {
    *((_QWORD *)this + 17) = v11;
    operator delete(v11);
  }
  v12 = (void *)*((_QWORD *)this + 13);
  if (v12)
  {
    *((_QWORD *)this + 14) = v12;
    operator delete(v12);
  }
  v13 = (void *)*((_QWORD *)this + 10);
  if (v13)
  {
    *((_QWORD *)this + 11) = v13;
    operator delete(v13);
  }
  v14 = (void *)*((_QWORD *)this + 7);
  if (v14)
  {
    *((_QWORD *)this + 8) = v14;
    operator delete(v14);
  }
  v15 = (void *)*((_QWORD *)this + 4);
  if (v15)
  {
    *((_QWORD *)this + 5) = v15;
    operator delete(v15);
  }
}

uint64_t HOA::createEncoder(HOA *this, const float *a2, const float *a3, vDSP_Length a4, float *a5, uint64_t a6)
{
  int v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  float *v18;
  uint64_t v19;
  const float *v20;
  uint64_t v21;
  NSObject *v23;
  const char *v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)this + 28))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v26 = "HOA.cpp";
      v27 = 1024;
      v28 = 777;
      v29 = 2080;
      v30 = "createEncoder";
      v31 = 1024;
      v32 = 777;
      v23 = MEMORY[0x24BDACB70];
      v24 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; HOA object was not initialized";
LABEL_19:
      _os_log_impl(&dword_210570000, v23, OS_LOG_TYPE_ERROR, v24, buf, 0x22u);
    }
    return 4294967246;
  }
  if (*((unsigned int *)this + 3) * a4 != a6)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v26 = "HOA.cpp";
      v27 = 1024;
      v28 = 782;
      v29 = 2080;
      v30 = "createEncoder";
      v31 = 1024;
      v32 = 782;
      v23 = MEMORY[0x24BDACB70];
      v24 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Inconsistent vector size";
      goto LABEL_19;
    }
    return 4294967246;
  }
  if (a4)
  {
    v11 = *((_DWORD *)this + 2);
    v12 = 4 * a4;
    MEMORY[0x24BDAC7A8](this);
    v13 = &buf[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
    bzero(v13, 4 * a4);
    MEMORY[0x24BDAC7A8](v14);
    bzero(v13, 4 * a4);
    vDSP_vsmul(a2, 1, &kDeg2Radf, (float *)v13, 1, a4);
    vDSP_vsmul(a3, 1, &kDeg2Radf, (float *)v13, 1, a4);
    v15 = (v11 * a4);
    HOA::sphericalHarmonics((HOA *)v13, (const float *)v13, (const float *)a4, (uint64_t)a5, (float *)*(unsigned int *)this);
    MEMORY[0x24BDAC7A8](v16);
    v18 = (float *)&buf[-v17];
    bzero(&buf[-v17], 4 * v15);
    if (*((_DWORD *)this + 76) == 2)
    {
      vDSP_mmul(*((const float **)this + 46), 1, a5, 1, v18, 1, *((unsigned int *)this + 2), a4, *((unsigned int *)this + 2));
      if ((_DWORD)v15)
        memcpy(a5, v18, 4 * v15);
    }
    v19 = 0;
    v20 = a5;
    do
      vDSP_vmul(*((const float **)this + 10), 1, v20++, a4, &v18[(*((_DWORD *)this + 2) * v19++)], 1, *((unsigned int *)this + 2));
    while (a4 != v19);
    if ((_DWORD)v15)
      memcpy(a5, v18, 4 * v15);
    if (*((_DWORD *)this + 1) != *(_DWORD *)this)
    {
      v21 = 4 * *((unsigned int *)this + 3) * a4 - 4 * v15;
      if (v21 >= 1)
        bzero(&a5[v15], 4 * (((unint64_t)v21 >> 2) - ((unint64_t)v21 > 3)) + 4);
    }
  }
  return 0;
}

void HOA::sphericalHarmonics(HOA *this, const float *a2, const float *a3, uint64_t a4, float *a5)
{
  unsigned int v6;
  uint64_t v8;
  char *v9;
  size_t v10;
  unint64_t v11;
  uint64_t v12;
  size_t v13;
  __int128 v14;
  unint64_t v15;
  const float *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  float *v23;
  const float *v24;
  float v25;
  float *v26;
  int v27;
  HOA *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  float *v34;
  float v35;
  float v36;
  float *v37;
  float *v38;
  float v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  float v51;
  uint64_t v52;
  float32x4_t *v53;
  uint64_t v54;
  float32x4_t *v55;
  float32x4_t v56;
  uint64_t v57;
  uint64_t v58;
  float *v59;
  float *v60;
  float v61;
  float *v62;
  uint64_t v63;
  int v64;
  int v65;
  HOA *v66;
  HOA *v67;
  uint64_t v68;
  float v69;
  uint64_t v70;
  char *v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  HOA *v76;
  char *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  HOA *v83;
  HOA *v84;
  uint64_t v85;
  int v86;
  char *v87;
  __int128 v88;
  unint64_t v89;
  __int128 v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v6 = a3;
    v83 = this;
    v70 = (uint64_t)&v70;
    v76 = (HOA *)((_DWORD)a5 + 1);
    MEMORY[0x24BDAC7A8](this);
    v9 = (char *)&v70 - v8;
    bzero((char *)&v70 - v8, v10);
    v11 = v6;
    MEMORY[0x24BDAC7A8](v12);
    v87 = (char *)&v70 - ((v13 + 15) & 0x7FFFFFFF0);
    bzero(v87, v13);
    if ((int)v6 >= 1)
    {
      v77 = v9;
      if (v6 > 1uLL)
      {
        v15 = v6 - (unint64_t)(v6 & 1);
        v16 = a2;
        v17 = v87;
        v18 = v15;
        do
        {
          v19 = *(_QWORD *)v16;
          v16 += 2;
          *(_QWORD *)&v14 = v19;
          v88 = v14;
          *(float *)&v20 = sinf(*((float *)&v19 + 1));
          *(_QWORD *)&v90 = v20;
          *(float *)&v14 = sinf(*(float *)&v88);
          DWORD1(v14) = v90;
          *v17++ = v14;
          v18 -= 2;
        }
        while (v18);
        if ((v6 & 1) == 0)
          goto LABEL_11;
      }
      else
      {
        v15 = 0;
      }
      v21 = v6 - v15;
      v22 = v15;
      v23 = (float *)&v87[4 * v15];
      v24 = &a2[v22];
      do
      {
        v25 = *v24++;
        *v23++ = sinf(v25);
        --v21;
      }
      while (v21);
LABEL_11:
      v26 = (float *)v77;
      v86 = 0;
      v27 = 0;
      v28 = 0;
      v82 = 0;
      v75 = v6 & 7;
      v74 = v6 - v75;
      v29 = 4 * (int)v6;
      v73 = a4 + 16;
      v72 = 2 * v6;
      v71 = v77 + 16;
      v30 = 1;
      v31 = v6;
      v32 = 1;
      v89 = v6;
      *(_QWORD *)&v90 = v29;
      v85 = a4;
      do
      {
        v78 = v31;
        v80 = v30;
        v33 = 0;
        v81 = v27;
        *(_QWORD *)&v88 = a4 + v29 * (v32 + v27);
        v34 = v26;
        do
        {
          __powisf2();
          v36 = v35;
          v37 = (float *)v87;
          v38 = v34;
          do
          {
            v39 = *v37++;
            *v38++ = HOA::legendre(v28, v33, v39) * v36;
            --v11;
          }
          while (v11);
          ++v33;
          v11 = v89;
          v29 = v90;
          v34 = (float *)((char *)v34 + v90);
        }
        while (v33 != v32);
        v40 = (int)v28;
        v41 = v86;
        v42 = v82;
        v43 = v75;
        v44 = v74;
        v45 = v73;
        v46 = v71;
        do
        {
          v47 = v41;
          if (v42 <= v40)
            v48 = v40;
          else
            v48 = v42;
          v49 = v6 * v48;
          if (v42 >= 0)
            v50 = v42;
          else
            v50 = -v42;
          v51 = sqrtf(flt_2105F15DC[(_QWORD)v28 - v50]* (float)((float)((float)((float)(int)v28 * 2.0) + 1.0)* flt_2105F1630[(v50 + (_DWORD)v28)]));
          if (v11 < 8)
          {
            v52 = 0;
LABEL_30:
            v57 = v49;
            v58 = v11 - v52;
            v59 = (float *)(a4 + 4 * (v52 + v47));
            v60 = &v26[v52 + v57];
            do
            {
              v61 = *v60++;
              *v59++ = v61 * v51;
              --v58;
            }
            while (v58);
            goto LABEL_18;
          }
          v53 = (float32x4_t *)(v45 + 4 * v41);
          v54 = v44;
          v55 = (float32x4_t *)&v46[4 * v49];
          do
          {
            v56 = vmulq_n_f32(*v55, v51);
            v53[-1] = vmulq_n_f32(v55[-1], v51);
            *v53 = v56;
            v53 += 2;
            v55 += 2;
            v54 -= 8;
          }
          while (v54);
          v52 = v44;
          if (v43)
            goto LABEL_30;
LABEL_18:
          ++v42;
          v41 = v47 + v6;
          --v40;
        }
        while (v32 != v42);
        v79 = v32;
        v62 = (float *)v88;
        if (v28)
        {
          v63 = 0;
          v84 = v28;
          do
          {
            v64 = 1;
            v65 = v86;
            *(_QWORD *)&v88 = v62;
            v66 = v28;
            v67 = v83;
            v68 = v85;
            do
            {
              *v62 = (float)(*v62 * 1.4142) * cosf(*((float *)v67 + v63) * (float)v64);
              v69 = sinf(-(float)((float)(int)v66 * *((float *)v67 + v63)));
              v29 = v90;
              *(float *)(v68 + 4 * (v63 + v65)) = (float)(*(float *)(v68 + 4 * (v63 + v65)) * 1.4142) * v69;
              v62 = (float *)((char *)v62 + v29);
              ++v64;
              v65 += v6;
              v66 = (HOA *)((char *)v66 - 1);
            }
            while (v66);
            ++v63;
            v62 = (float *)(v88 + 4);
            v11 = v89;
            v28 = v84;
          }
          while (v63 != v89);
        }
        v28 = (HOA *)((char *)v28 + 1);
        v32 = v79 + 1;
        --v82;
        v86 += v78;
        v31 = v78 + v72;
        v27 = v81 + v80;
        v30 = (v80 + 2);
        v26 = (float *)v77;
        a4 = v85;
      }
      while (v28 != v76);
    }
  }
}

uint64_t HOA::createEncoder(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const float *v5;
  unint64_t v7;
  const float *v8;
  unint64_t v11;
  uint64_t v12;
  float *v13;
  float *v14;
  unint64_t v15;
  float *v16;
  unint64_t v17;
  BOOL v18;
  unint64_t v19;
  NSObject *v20;
  const char *v21;
  int v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 28))
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315906;
      v24 = "HOA.cpp";
      v25 = 1024;
      v26 = 834;
      v27 = 2080;
      v28 = "createEncoder";
      v29 = 1024;
      v30 = 834;
      v20 = MEMORY[0x24BDACB70];
      v21 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; HOA object was not initialized";
LABEL_10:
      _os_log_impl(&dword_210570000, v20, OS_LOG_TYPE_ERROR, v21, (uint8_t *)&v23, 0x22u);
    }
    return 4294967246;
  }
  v5 = *(const float **)a2;
  v7 = *(_QWORD *)(a2 + 8) - (_QWORD)v5;
  v8 = *(const float **)a3;
  if ((uint64_t)v7 >> 2 != (uint64_t)(*(_QWORD *)(a3 + 8) - (_QWORD)v8) >> 2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      v23 = 136315906;
      v24 = "HOA.cpp";
      v25 = 1024;
      v26 = 839;
      v27 = 2080;
      v28 = "createEncoder";
      v29 = 1024;
      v30 = 839;
      v20 = MEMORY[0x24BDACB70];
      v21 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Inconsistent azimuth/elevation size";
      goto LABEL_10;
    }
    return 4294967246;
  }
  v11 = v7 >> 2;
  v14 = *(float **)(a1 + 32);
  v12 = a1 + 32;
  v13 = v14;
  *(_DWORD *)(v12 - 16) = v7 >> 2;
  v15 = *(_DWORD *)(v12 - 20) * (v7 >> 2);
  v16 = *(float **)(v12 + 8);
  v17 = v16 - v14;
  v18 = v15 >= v17;
  v19 = v15 - v17;
  if (v19 != 0 && v18)
  {
    std::vector<float>::__append((char **)v12, v19);
    v5 = *(const float **)a2;
    v8 = *(const float **)a3;
    LODWORD(v11) = *(_DWORD *)(a1 + 16);
    v13 = *(float **)(a1 + 32);
    v16 = *(float **)(a1 + 40);
  }
  else if (!v18)
  {
    v16 = &v13[v15];
    *(_QWORD *)(a1 + 40) = v16;
  }
  return HOA::createEncoder((HOA *)a1, v5, v8, v11, v13, v16 - v13);
}

uint64_t HOA::createDecoder(unsigned int *a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v6;
  uint64_t v8;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  NSObject *v16;
  const char *v17;
  uint64_t v18;
  vDSP_Length v20;
  uint64_t v21;
  unint64_t v22;
  void **v23;
  unint64_t v24;
  int32x2_t v25;
  uint64_t v26;
  const float *v27;
  int64_t v28;
  char *v29;
  uint64_t v30;
  int32x4_t *v31;
  uint64_t v32;
  int32x4_t v33;
  int32x4_t *v34;
  uint64_t v35;
  uint64_t v36;
  const float *v37;
  int64_t v38;
  char *v39;
  char *v40;
  char *v41;
  void *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  unsigned int v48;
  uint64_t v49;
  size_t v50;
  char *v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  float *v57;
  float v58;
  __float2 v59;
  __float2 v60;
  vDSP_Length __P;
  char *v62;
  char *v63;
  const float *v64;
  const float *v65;
  size_t v66;
  float *v67;
  uint64_t i;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  size_t v73;
  size_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  float *v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t k;
  void *v82;
  unsigned int v83;
  float v84;
  HOA *v85;
  unsigned int v86;
  void *v87;
  uint64_t j;
  uint64_t v89;
  float v90;
  float v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  vDSP_Length v98;
  unint64_t v99;
  unint64_t v100;
  const float *v101;
  float *v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  char *v107;
  float *__C;
  void *v109;
  float *__D;
  float *v111;
  char *v112;
  float *__B;
  float *v114;
  float __A;
  void *__p;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  float v125;
  uint8_t buf[48];
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  _BYTE v144[28];
  __int16 v145;
  int v146;
  uint64_t v147;

  v147 = *MEMORY[0x24BDAC8D0];
  if (!*((_BYTE *)a1 + 28))
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      return 4294967246;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "HOA.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 948;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "createDecoder";
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = 948;
    v16 = MEMORY[0x24BDACB70];
    v17 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; HOA object was not initialized";
LABEL_12:
    _os_log_impl(&dword_210570000, v16, OS_LOG_TYPE_ERROR, v17, buf, 0x22u);
    return 4294967246;
  }
  v6 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (!v6)
  {
    if (!os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      return 4294967246;
    *(_DWORD *)buf = 136315906;
    *(_QWORD *)&buf[4] = "HOA.cpp";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 953;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "createDecoder";
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = 953;
    v16 = MEMORY[0x24BDACB70];
    v17 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Empty azimuth/elevation";
    goto LABEL_12;
  }
  v8 = v6 >> 2;
  if (v8 != (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2)
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HOA.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 958;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "createDecoder";
      *(_WORD *)&buf[28] = 1024;
      *(_DWORD *)&buf[30] = 958;
      v16 = MEMORY[0x24BDACB70];
      v17 = "%25s:%-5d CADSPUtility:%s:%d: HOA Error; Inconsistent azimuth/elevation size";
      goto LABEL_12;
    }
    return 4294967246;
  }
  v14 = *((_QWORD *)a1 + 16);
  v12 = a1 + 32;
  v13 = v14;
  *(v12 - 27) = v8;
  v15 = (*((_QWORD *)v12 + 1) - v14) >> 2;
  if (v8 <= v15)
  {
    if (v8 < v15)
      *((_QWORD *)a1 + 17) = v13 + 4 * v8;
  }
  else
  {
    std::vector<float>::__append((char **)v12, v8 - v15);
    LODWORD(v8) = a1[5];
  }
  v20 = v8;
  v21 = *((_QWORD *)a1 + 19);
  v22 = (*((_QWORD *)a1 + 20) - v21) >> 2;
  if (v20 <= v22)
  {
    if (v20 < v22)
      *((_QWORD *)a1 + 20) = v21 + 4 * v20;
  }
  else
  {
    std::vector<float>::__append((char **)a1 + 19, v20 - v22);
    v20 = a1[5];
  }
  vDSP_vsmul(*(const float **)a2, 1, &kDeg2Radf, *((float **)a1 + 16), 1, v20);
  vDSP_vsmul(*(const float **)a3, 1, &kDeg2Radf, *((float **)a1 + 19), 1, a1[5]);
  v23 = (void **)(a1 + 14);
  v24 = a1[2] * a1[5];
  *(_DWORD *)buf = 0;
  std::vector<float>::assign((char **)a1 + 7, v24, buf);
  if (!*a1)
  {
    v30 = a1[5];
    if ((_DWORD)v30)
    {
      *(float *)v25.i32 = 1.0 / sqrtf((float)v30);
      v31 = (int32x4_t *)*v23;
      if (v30 >= 8)
      {
        v32 = v30 & 0xFFFFFFF8;
        v33 = vdupq_lane_s32(v25, 0);
        v34 = v31 + 1;
        v35 = v32;
        do
        {
          v34[-1] = v33;
          *v34 = v33;
          v34 += 2;
          v35 -= 8;
        }
        while (v35);
        if (v32 == v30)
        {
          LODWORD(v30) = 0;
          goto LABEL_141;
        }
        LODWORD(v30) = v30 - v32;
        v31 = (int32x4_t *)((char *)v31 + 4 * v32);
      }
      do
      {
        v31->i32[0] = v25.i32[0];
        v31 = (int32x4_t *)((char *)v31 + 4);
        LODWORD(v30) = v30 - 1;
      }
      while ((_DWORD)v30);
    }
LABEL_141:
    v18 = 0;
LABEL_142:
    if (a1[1] != (_DWORD)v30)
    {
      v103 = a1[5] * a1[3];
      *(_DWORD *)buf = 0;
      v104 = *((_QWORD *)a1 + 7);
      v105 = (*((_QWORD *)a1 + 8) - v104) >> 2;
      if (v103 <= v105)
      {
        if (v103 < v105)
          *((_QWORD *)a1 + 8) = v104 + 4 * v103;
      }
      else
      {
        std::vector<float>::__append(v23, v103 - v105, buf);
      }
    }
    return v18;
  }
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v136 = 0u;
  v137 = 0u;
  v134 = 0u;
  v135 = 0u;
  v132 = 0u;
  v133 = 0u;
  v130 = 0u;
  v131 = 0u;
  v128 = 0u;
  v129 = 0u;
  v127 = 0u;
  memset(buf, 0, sizeof(buf));
  v122 = 0;
  v123 = 0;
  v124 = 0;
  v27 = *(const float **)a2;
  v26 = *(_QWORD *)(a2 + 8);
  v28 = v26 - *(_QWORD *)a2;
  if (v26 == *(_QWORD *)a2)
  {
    v29 = 0;
  }
  else
  {
    if (v28 < 0)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v29 = (char *)operator new(v26 - *(_QWORD *)a2);
    v122 = v29;
    v124 = &v29[4 * (v28 >> 2)];
    memcpy(v29, v27, v28);
    v123 = v124;
  }
  v119 = 0;
  v120 = 0;
  v121 = 0;
  v37 = *(const float **)a3;
  v36 = *(_QWORD *)(a3 + 8);
  v38 = v36 - *(_QWORD *)a3;
  if (v36 == *(_QWORD *)a3)
  {
    v39 = 0;
  }
  else
  {
    if (v38 < 0)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v39 = (char *)operator new(v36 - *(_QWORD *)a3);
    v119 = v39;
    v121 = &v39[4 * (v38 >> 2)];
    memcpy(v39, v37, v38);
    v120 = v121;
  }
  memset(v144, 0, 24);
  __p = 0;
  v117 = 0;
  v118 = 0;
  VBAP::VBAP((uint64_t)buf, (uint64_t *)&v122, (uint64_t *)&v119, 1, (char **)v144, (uint64_t *)&__p);
  v40 = (char *)__p;
  if (__p)
  {
    v41 = v117;
    v42 = __p;
    if (v117 != __p)
    {
      do
      {
        v43 = (uint64_t *)(v41 - 24);
        if (*((_QWORD *)v41 - 1))
        {
          v45 = *((_QWORD *)v41 - 3);
          v44 = (uint64_t *)*((_QWORD *)v41 - 2);
          v46 = *v44;
          *(_QWORD *)(v46 + 8) = *(_QWORD *)(v45 + 8);
          **(_QWORD **)(v45 + 8) = v46;
          *((_QWORD *)v41 - 1) = 0;
          if (v44 != v43)
          {
            do
            {
              v47 = (uint64_t *)v44[1];
              operator delete(v44);
              v44 = v47;
            }
            while (v47 != v43);
          }
        }
        v41 = (char *)v43;
      }
      while (v43 != (uint64_t *)v40);
      v42 = __p;
    }
    v117 = v40;
    operator delete(v42);
  }
  if (*(_QWORD *)v144)
  {
    *(_QWORD *)&v144[8] = *(_QWORD *)v144;
    operator delete(*(void **)v144);
  }
  if (v39)
  {
    v120 = v39;
    operator delete(v39);
  }
  if (v29)
  {
    v123 = v29;
    operator delete(v29);
  }
  if (BYTE11(v143))
  {
    v48 = a1[2];
    v117 = 0;
    v118 = 0;
    v49 = 216 * v48;
    __p = 0;
    if ((_DWORD)v49)
    {
      v50 = 4 * v49;
      v51 = (char *)operator new(4 * v49);
      v52 = &v51[4 * v49];
      __p = v51;
      v118 = v52;
      __B = (float *)v51;
      bzero(v51, v50);
      v117 = v52;
    }
    else
    {
      __B = 0;
    }
    v53 = (char *)operator new(0x360uLL);
    bzero(v53, 0x360uLL);
    v54 = (char *)operator new(0x360uLL);
    bzero(v54, 0x360uLL);
    v109 = v54;
    v111 = (float *)operator new(0xA20uLL);
    bzero(v111, 0xA20uLL);
    memcpy(v53, &unk_2105DF81C, 0x360uLL);
    memcpy(v54, &unk_2105DFB7C, 0x360uLL);
    vDSP_vsmul((const float *)v53, 1, &kDeg2Radf, (float *)v53, 1, 0xD8uLL);
    vDSP_vsmul((const float *)v54, 1, &kDeg2Radf, (float *)v54, 1, 0xD8uLL);
    HOA::sphericalHarmonics((HOA *)v53, (const float *)v54, (const float *)0xD8, (uint64_t)__B, (float *)*a1);
    v55 = v54;
    v56 = 0;
    v57 = v111 + 2;
    do
    {
      v58 = *(float *)&v53[v56];
      v59 = __sincosf_stret(*(float *)&v55[v56]);
      v60 = __sincosf_stret(v58);
      *(v57 - 2) = v59.__cosval * v60.__cosval;
      *(v57 - 1) = v59.__cosval * v60.__sinval;
      *v57 = v59.__sinval;
      v57 += 3;
      v56 += 4;
    }
    while (v56 != 864);
    if (a1[76] == 2)
    {
      __P = a1[2];
      if (216 * (_DWORD)__P)
      {
        v62 = (char *)operator new(4 * (216 * __P));
        bzero(v62, 4 * (216 * __P));
        v63 = &v62[4 * (216 * __P)];
      }
      else
      {
        v62 = 0;
        v63 = 0;
      }
      vDSP_mmul(*((const float **)a1 + 46), 1, __B, 1, (float *)v62, 1, __P, 0xD8uLL, __P);
      if (v63 != v62)
        memcpy(__B, v62, v63 - v62);
      if (v62)
        operator delete(v62);
    }
    __A = 0.0046296;
    v65 = (const float *)*((_QWORD *)a1 + 10);
    v64 = (const float *)*((_QWORD *)a1 + 11);
    v114 = 0;
    v66 = (char *)v64 - (char *)v65;
    if (v64 == v65)
    {
      v67 = 0;
    }
    else
    {
      if ((v66 & 0x8000000000000000) != 0)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v67 = (float *)operator new((char *)v64 - (char *)v65);
      v114 = v67;
      bzero(v67, v66);
    }
    vDSP_svdiv(&__A, v65, 1, v67, 1, a1[2]);
    for (i = 0; i != 216; ++i)
      vDSP_vmul(v114, 1, &__B[i], 216, &__B[i], 216, a1[2]);
    if (a4 == 1)
    {
      v69 = a1[2];
      v70 = (216 * v69);
      v107 = v53;
      if ((_DWORD)v70)
      {
        v71 = (char *)operator new(4 * v70);
        bzero(v71, 4 * v70);
        __C = (float *)operator new(4 * v70);
        bzero(__C, 4 * v70);
      }
      else
      {
        v71 = 0;
        __C = 0;
      }
      v112 = (char *)operator new(0x2D900uLL);
      bzero(v112, 0x2D900uLL);
      if (216 * a1[5])
      {
        v74 = 864 * a1[5];
        v75 = (char *)operator new(v74);
        bzero(v75, v74);
        v76 = &v75[v74];
      }
      else
      {
        v75 = 0;
        v76 = 0;
      }
      if ((_DWORD)v70)
        memcpy(v71, __B, 4 * v70);
      __D = (float *)v75;
      if ((_DWORD)v69)
      {
        v82 = operator new(4 * v69);
        bzero(v82, 4 * v69);
      }
      else
      {
        v82 = 0;
      }
      v83 = *a1;
      v84 = cosf(2.4068 / (float)((float)*a1 + 1.51));
      v85 = 0;
      v86 = 1;
      do
      {
        *(_DWORD *)v144 = HOA::legendre(v85, 0, v84);
        vDSP_vfill((const float *)v144, (float *)v82 + ((_DWORD)v85 * (_DWORD)v85), 1, v86);
        v85 = (HOA *)((_DWORD)v85 + 1);
        v86 += 2;
      }
      while (v85 <= v83);
      v87 = v112;
      vDSP_vmul((const float *)v82, 1, *((const float **)a1 + 10), 1, (float *)v82, 1, a1[2]);
      vDSP_vmul((const float *)v82, 1, *((const float **)a1 + 10), 1, (float *)v82, 1, a1[2]);
      for (j = 0; j != 864; j += 4)
        vDSP_vmul((const float *)v82, 1, (const float *)&v71[j], 216, (float *)&v71[j], 216, a1[2]);
      vDSP_mtrans((const float *)v71, 1, __C, 1, 0xD8uLL, a1[2]);
      vDSP_mmul(__C, 1, __B, 1, (float *)v112, 1, 0xD8uLL, 0xD8uLL, a1[2]);
      vDSP_vsq((const float *)v112, 1, (float *)v112, 1, 0xB640uLL);
      v89 = 0;
      v125 = 0.0;
      do
      {
        *(_DWORD *)v144 = 0;
        vDSP_sve((const float *)&v112[v89], 216, (float *)v144, 0xD8uLL);
        v90 = v125;
        if (*(float *)v144 > v125)
        {
          v125 = *(float *)v144;
          v90 = *(float *)v144;
        }
        v89 += 4;
      }
      while (v89 != 864);
      if (v90 == 0.0)
        v91 = 1.0;
      else
        v91 = 1.0 / v90;
      v125 = v91;
      vDSP_vsmul((const float *)v112, 1, &v125, (float *)v112, 1, 0xB640uLL);
      v92 = v76 - v75;
      vDSP_vclr((float *)v75, 1, v92 >> 2);
      v106 = v92;
      v93 = a1[5];
      if ((_DWORD)v93)
      {
        v94 = 4 * v93;
        v95 = (char *)operator new(4 * v93);
        bzero(v95, v94);
        v96 = &v95[v94];
      }
      else
      {
        v95 = 0;
        v96 = 0;
      }
      v97 = 0;
      v98 = (v96 - v95) >> 2;
      while (1)
      {
        v18 = VBAP::calculateVBAPGains((VBAP *)buf, (float32x2_t *)&v111[3 * v97], (float *)v95);
        if ((_DWORD)v18)
          break;
        vDSP_vsq((const float *)v95, 1, (float *)v95, 1, v98);
        v99 = a1[5];
        if ((_DWORD)v99)
        {
          v100 = 0;
          v101 = (const float *)v95;
          v102 = __D;
          do
          {
            vDSP_vsma((const float *)&v112[4 * v97], 216, v101, v102, v99, v102, v99, 0xD8uLL);
            ++v100;
            v99 = a1[5];
            ++v102;
            ++v101;
          }
          while (v100 < v99);
        }
        ++v97;
        v87 = v112;
        if (v97 == 216)
        {
          *(_DWORD *)v144 = v106 >> 2;
          vvsqrtf(__D, __D, (const int *)v144);
          vDSP_mmul(__B, 1, __D, 1, *((float **)a1 + 7), 1, a1[2], a1[5], 0xD8uLL);
          v18 = 0;
          goto LABEL_124;
        }
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v144 = 136315906;
        *(_QWORD *)&v144[4] = "HOA.cpp";
        *(_WORD *)&v144[12] = 1024;
        *(_DWORD *)&v144[14] = 924;
        *(_WORD *)&v144[18] = 2080;
        *(_QWORD *)&v144[20] = "createALLRAD2";
        v145 = 1024;
        v146 = 924;
        _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; VBAP calculation error",
          v144,
          0x22u);
      }
LABEL_124:
      if (v95)
        operator delete(v95);
      if (v82)
        operator delete(v82);
      v23 = (void **)(a1 + 14);
      v53 = v107;
      if (__D)
        operator delete(__D);
      operator delete(v87);
      v78 = v111;
      if (__C)
        operator delete(__C);
    }
    else
    {
      HOA::applyDecoderWeighting(a1, &__p, 0xD8u, a5);
      vDSP_vclr(*((float **)a1 + 7), 1, a1[2] * a1[5]);
      v72 = a1[5];
      if ((_DWORD)v72)
      {
        v73 = 4 * v72;
        v71 = (char *)operator new(4 * v72);
        bzero(v71, v73);
      }
      else
      {
        v71 = 0;
      }
      v77 = 0;
      v78 = v111;
      while (1)
      {
        v18 = VBAP::calculateVBAPGains((VBAP *)buf, (float32x2_t *)&v111[3 * v77], (float *)v71);
        if ((_DWORD)v18)
          break;
        v79 = a1[5];
        if ((_DWORD)v79)
        {
          v80 = 0;
          for (k = 0; k < v79; ++k)
          {
            vDSP_vsma(&__B[v77], 216, (const float *)&v71[v80], (const float *)(*((_QWORD *)a1 + 7) + v80), v79, (float *)(*((_QWORD *)a1 + 7) + v80), v79, a1[2]);
            v79 = a1[5];
            v80 += 4;
          }
        }
        if (++v77 == 216)
        {
          v18 = 0;
          goto LABEL_132;
        }
      }
      if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)v144 = 136315906;
        *(_QWORD *)&v144[4] = "HOA.cpp";
        *(_WORD *)&v144[12] = 1024;
        *(_DWORD *)&v144[14] = 863;
        *(_WORD *)&v144[18] = 2080;
        *(_QWORD *)&v144[20] = "createALLRAD";
        v145 = 1024;
        v146 = 863;
        _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; VBAP calculation error",
          v144,
          0x22u);
      }
    }
LABEL_132:
    if (v71)
      operator delete(v71);
    if (v114)
      operator delete(v114);
    operator delete(v78);
    operator delete(v109);
    operator delete(v53);
    if (__B)
      operator delete(__B);
    VBAP::~VBAP((VBAP *)buf);
    LODWORD(v30) = *a1;
    goto LABEL_142;
  }
  if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)v144 = 136315906;
    *(_QWORD *)&v144[4] = "HOA.cpp";
    *(_WORD *)&v144[12] = 1024;
    *(_DWORD *)&v144[14] = 982;
    *(_WORD *)&v144[18] = 2080;
    *(_QWORD *)&v144[20] = "createDecoder";
    v145 = 1024;
    v146 = 982;
    _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; VBAP object was not initialized",
      v144,
      0x22u);
  }
  VBAP::~VBAP((VBAP *)buf);
  return 4294967246;
}

void sub_2105CED2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14, void *__p, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  void *v33;
  void *v34;

  if (v34)
  {
    operator delete(v34);
    if (!__p)
    {
LABEL_4:
      operator delete(a17);
      if (a13)
        operator delete(a13);
      if (v33)
        operator delete(v33);
      if (a19)
        operator delete(a19);
      operator delete(a16);
      operator delete(a14);
      operator delete(a12);
      if (a23)
        operator delete(a23);
      VBAP::~VBAP((VBAP *)&a33);
      _Unwind_Resume(a1);
    }
  }
  else if (!__p)
  {
    goto LABEL_4;
  }
  operator delete(__p);
  goto LABEL_4;
}

uint64_t HOA::createSphericalGridDecoder(unsigned int *a1, int a2)
{
  char *v4;
  void **v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  const float *v16;
  const float *v17;
  size_t v18;
  void *v19;
  const float *v20;
  const float *v21;
  size_t v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  float __A;
  _BYTE buf[28];
  __int16 v33;
  int v34;
  uint64_t v35;

  v35 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a1 + 28))
  {
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1 + 128, *((char **)a1 + 26), *((_QWORD *)a1 + 27), (uint64_t)(*((_QWORD *)a1 + 27) - *((_QWORD *)a1 + 26)) >> 2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1 + 152, *((char **)a1 + 29), *((_QWORD *)a1 + 30), (uint64_t)(*((_QWORD *)a1 + 30) - *((_QWORD *)a1 + 29)) >> 2);
    v5 = (void **)(a1 + 46);
    v4 = (char *)*((_QWORD *)a1 + 23);
    v6 = a1[6];
    a1[5] = v6;
    v7 = a1[2] * v6;
    v8 = (uint64_t)(*((_QWORD *)a1 + 24) - (_QWORD)v4) >> 2;
    if (v7 <= v8)
    {
      if (v7 < v8)
        *((_QWORD *)a1 + 24) = &v4[4 * v7];
    }
    else
    {
      std::vector<float>::__append((char **)a1 + 23, v7 - v8);
      v4 = (char *)*v5;
    }
    HOA::sphericalHarmonics(*((HOA **)a1 + 26), *((const float **)a1 + 29), (const float *)((uint64_t)(*((_QWORD *)a1 + 27) - *((_QWORD *)a1 + 26)) >> 2), (uint64_t)v4, (float *)*a1);
    if (a1[44] - 1 <= 1)
    {
      LODWORD(v10) = a1[5];
      if ((_DWORD)v10)
      {
        v11 = 0;
        v12 = 0;
        do
        {
          vDSP_vmul(*((const float **)a1 + 32), 1, (const float *)(*((_QWORD *)a1 + 23) + v11), v10, (float *)(*((_QWORD *)a1 + 23) + v11), v10, v10);
          ++v12;
          v10 = a1[5];
          v11 += 4;
        }
        while (v12 < v10);
      }
      *(float *)buf = (float)v10 * 0.079577;
      vDSP_vsmul(*((const float **)a1 + 23), 1, (const float *)buf, *((float **)a1 + 23), 1, (uint64_t)(*((_QWORD *)a1 + 24) - *((_QWORD *)a1 + 23)) >> 2);
    }
    v13 = *((_QWORD *)a1 + 7);
    v14 = (uint64_t)(*((_QWORD *)a1 + 24) - *((_QWORD *)a1 + 23)) >> 2;
    v15 = (*((_QWORD *)a1 + 8) - v13) >> 2;
    if (v14 <= v15)
    {
      if (v14 < v15)
        *((_QWORD *)a1 + 8) = v13 + 4 * v14;
    }
    else
    {
      std::vector<float>::__append((char **)a1 + 7, v14 - v15);
    }
    if (a1[76] == 2)
    {
      v17 = (const float *)*((_QWORD *)a1 + 23);
      v16 = (const float *)*((_QWORD *)a1 + 24);
      memset(buf, 0, 24);
      v18 = (char *)v16 - (char *)v17;
      if (v16 == v17)
      {
        v19 = 0;
      }
      else
      {
        if ((v18 & 0x8000000000000000) != 0)
          std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
        v19 = operator new((char *)v16 - (char *)v17);
        bzero(v19, v18);
        v18 += (size_t)v19;
      }
      vDSP_mmul(*((const float **)a1 + 46), 1, v17, 1, (float *)v19, 1, a1[2], a1[6], a1[2]);
      if ((void *)v18 != v19)
        memmove(*v5, v19, v18 - (_QWORD)v19);
      if (v19)
        operator delete(v19);
    }
    __A = 1.0 / (float)a1[6];
    v21 = (const float *)*((_QWORD *)a1 + 10);
    v20 = (const float *)*((_QWORD *)a1 + 11);
    memset(buf, 0, 24);
    v22 = (char *)v20 - (char *)v21;
    if (v20 == v21)
    {
      v23 = 0;
    }
    else
    {
      if ((v22 & 0x8000000000000000) != 0)
        std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
      v23 = operator new((char *)v20 - (char *)v21);
      bzero(v23, v22);
    }
    vDSP_svdiv(&__A, v21, 1, (float *)v23, 1, a1[2]);
    LODWORD(v24) = a1[6];
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 0;
      do
      {
        vDSP_vmul((const float *)v23, 1, (const float *)(*((_QWORD *)a1 + 23) + v25), v24, (float *)(*((_QWORD *)a1 + 7) + v25), v24, a1[2]);
        ++v26;
        v24 = a1[6];
        v25 += 4;
      }
      while (v26 < v24);
    }
    HOA::applyDecoderWeighting(a1, (_QWORD *)a1 + 7, v24, a2);
    std::vector<float>::__assign_with_size[abi:ne180100]<float *,float *>((char *)a1 + 184, *((char **)a1 + 7), *((_QWORD *)a1 + 8), (uint64_t)(*((_QWORD *)a1 + 8) - *((_QWORD *)a1 + 7)) >> 2);
    if (a1[1] != *a1)
    {
      v27 = a1[6] * a1[3];
      v30 = 0;
      v28 = *((_QWORD *)a1 + 7);
      v29 = (*((_QWORD *)a1 + 8) - v28) >> 2;
      if (v27 <= v29)
      {
        if (v27 < v29)
          *((_QWORD *)a1 + 8) = v28 + 4 * v27;
      }
      else
      {
        std::vector<float>::__append((void **)a1 + 7, v27 - v29, &v30);
      }
    }
    if (v23)
      operator delete(v23);
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      *(_QWORD *)&buf[4] = "HOA.cpp";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 1051;
      *(_WORD *)&buf[18] = 2080;
      *(_QWORD *)&buf[20] = "createSphericalGridDecoder";
      v33 = 1024;
      v34 = 1051;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; HOA object was not initialized",
        buf,
        0x22u);
    }
    return 4294967246;
  }
}

void sub_2105CF380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  void *v12;

  if (!v12)
    _Unwind_Resume(exception_object);
  operator delete(v12);
  _Unwind_Resume(exception_object);
}

uint64_t HOA::decodeData(HOA *this, const float *__A, float *__C, vDSP_Length __M)
{
  const float *v5;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 28))
  {
    v5 = (const float *)*((_QWORD *)this + 7);
    if (v5 != *((const float **)this + 8))
      vDSP_mmul(__A, 1, v5, 1, __C, 1, __M, *((unsigned int *)this + 5), *((unsigned int *)this + 3));
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "HOA.cpp";
      v9 = 1024;
      v10 = 1452;
      v11 = 2080;
      v12 = "decodeData";
      v13 = 1024;
      v14 = 1452;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; HOA object was not initialized",
        buf,
        0x22u);
    }
    return 4294967246;
  }
}

uint64_t HOA::encodeData(HOA *this, const float *__A, float *__C, vDSP_Length __M)
{
  const float *v5;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)this + 28))
  {
    v5 = (const float *)*((_QWORD *)this + 4);
    if (v5 != *((const float **)this + 5))
      vDSP_mmul(__A, 1, v5, 1, __C, 1, __M, *((unsigned int *)this + 3), *((unsigned int *)this + 4));
    return 0;
  }
  else
  {
    if (os_log_type_enabled(MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315906;
      v8 = "HOA.cpp";
      v9 = 1024;
      v10 = 1477;
      v11 = 2080;
      v12 = "encodeData";
      v13 = 1024;
      v14 = 1477;
      _os_log_impl(&dword_210570000, MEMORY[0x24BDACB70], OS_LOG_TYPE_ERROR, "%25s:%-5d CADSPUtility:%s:%d: HOA Error; HOA object was not initialized",
        buf,
        0x22u);
    }
    return 4294967246;
  }
}

uint64_t HOA::getNormalization(HOA *this)
{
  if ((this & 0xFFFF0000) == 0xBE0000)
    return 1;
  else
    return 2 * ((this & 0xFFFF0000) != 12517376);
}

uint64_t SincKernelFactory::ReferenceSincKernel(SincKernelFactory *this, int a2, int a3, double a4, double a5)
{
  SincKernelFactory *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  double v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  float32x4_t **v21;
  uint64_t *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  __int128 v32;
  uint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  uint64_t v38;
  void *v39;
  float32x4_t *v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  double v46;
  uint64_t v47;
  int32x4_t v48;
  float32x4_t *v49;
  float32x4_t *v50;
  uint64_t v51;
  int64x2_t v52;
  float64x2_t v53;
  float64x2_t v54;
  float64x2_t v55;
  float32x4_t v56;
  int32x4_t v57;
  long double v58;
  long double v59;
  double v60;
  double v61;
  double v62;
  long double v63;
  uint64_t v64;
  double v65;
  double v66;
  float v67;
  float v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _DWORD *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _DWORD *v86;
  _DWORD *v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  _DWORD *v94;
  _DWORD *v95;
  _OWORD *v96;
  __int128 *v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;
  _DWORD *v101;
  _DWORD *v102;
  unint64_t v103;
  uint64_t *v104;
  _QWORD *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  _BYTE *v112;
  uint64_t *v113;
  char *v114;
  unint64_t v115;
  uint64_t v116;
  _OWORD *v117;
  uint64_t *v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  SincKernelFactory *v123;
  SincKernelFactory *v124;
  float64x2_t v125;
  long double v126;
  long double v127;
  float64x2_t v128;
  double v129;
  float64x2_t __x;
  double v131;
  float64x2_t v132;
  int32x4_t v133;
  KaiserWindow *v134;
  uint64_t v135;
  KaiserWindow *v136;

  v9 = this;
  v10 = *((_QWORD *)this + 1) - *(_QWORD *)this;
  if (!v10)
  {
LABEL_9:
    v14 = operator new();
    *(_QWORD *)v14 = 0;
    *(_DWORD *)(v14 + 8) = 0;
    *(_DWORD *)(v14 + 12) = a2;
    *(_DWORD *)(v14 + 16) = a3;
    *(_DWORD *)(v14 + 20) = 0;
    *(double *)(v14 + 24) = a4;
    *(double *)(v14 + 32) = a5;
    *(_QWORD *)v14 = malloc_type_calloc(a2 + a2 * a3, 4uLL, 0x100004052888210uLL);
    v131 = *(double *)(v14 + 32);
    v15 = (*(_DWORD *)(v14 + 12) * *(_DWORD *)(v14 + 16));
    v16 = (_DWORD *)operator new[]();
    v17 = *(double *)(v14 + 24);
    {
      GetKaiser(unsigned int,double)::sKaiserWindows = 0;
      qword_254A6E078 = 0;
      qword_254A6E080 = 0;
      qword_254A6E070 = 0;
    }
    os_unfair_lock_lock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
    v19 = qword_254A6E078;
    if (qword_254A6E070 != qword_254A6E078)
    {
      v20 = qword_254A6E070;
      while (*(_DWORD *)v20 != (_DWORD)v15 - 1 || *(double *)(v20 + 8) != v17)
      {
        v20 += 40;
        if (v20 == qword_254A6E078)
          goto LABEL_16;
      }
      v21 = (float32x4_t **)(v20 + 16);
LABEL_43:
      v129 = (double)(int)v15 * 0.5;
      v40 = *v21;
      os_unfair_lock_unlock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
      v42 = *(unsigned int *)(v14 + 12);
      v41 = *(unsigned int *)(v14 + 16);
      v43 = 3.14159265 / (double)(int)v41;
      v44 = v131;
      v45 = v43 * v131;
      if ((int)v42 < 128)
      {
        v60 = cos(v43 * v131);
        v44 = v131;
        v46 = (double)(int)v15 * 0.5;
        if ((int)v15 >= 1)
        {
          v61 = v60 + v60;
          v62 = sin((-2.0 - v129) * v131 * v43) * v131;
          v63 = sin(-((v131 + v129 * v131) * v43));
          v46 = (double)(int)v15 * 0.5;
          v44 = v131;
          v64 = 0;
          v65 = v63 * v131;
          do
          {
            v66 = -(v62 - v61 * v65);
            v67 = v66 * v40->f32[v64] / (((double)(int)v64 - v129) * (v43 * v131));
            *(float *)&v16[v64++] = v67;
            v62 = v65;
            v65 = v66;
          }
          while (v15 != v64);
        }
      }
      else
      {
        v46 = (double)(int)v15 * 0.5;
        if ((int)v15 >= 1)
        {
          v47 = 0;
          if (v15 < 4)
            goto LABEL_127;
          if ((unint64_t)((char *)v16 - (char *)v40) < 0x10)
            goto LABEL_127;
          v124 = v9;
          v47 = v15 & 0xFFFFFFFC;
          v125 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v129, 0);
          v48 = (int32x4_t)xmmword_2105F2180;
          v49 = v40;
          v50 = (float32x4_t *)v16;
          v51 = v47;
          do
          {
            v133 = v48;
            v52.i64[0] = v48.i32[2];
            v52.i64[1] = v48.i32[3];
            v53 = vcvtq_f64_s64(v52);
            v52.i64[0] = v133.i32[0];
            v52.i64[1] = v133.i32[1];
            v132 = vmulq_n_f64(vsubq_f64(v53, v125), v45);
            __x = vmulq_n_f64(vsubq_f64(vcvtq_f64_s64(v52), v125), v45);
            v127 = sin(__x.f64[1]);
            v54.f64[0] = sin(__x.f64[0]);
            v54.f64[1] = v127;
            v128 = v54;
            v126 = sin(v132.f64[1]);
            v55.f64[0] = sin(v132.f64[0]);
            v44 = v131;
            v55.f64[1] = v126;
            v56 = *v49++;
            v45 = v43 * v131;
            *v50++ = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vdivq_f64(vmulq_f64(vmulq_n_f64(v128, v131), vcvtq_f64_f32(*(float32x2_t *)v56.f32)), __x)), vdivq_f64(vmulq_f64(vmulq_n_f64(v55, v131), vcvt_hight_f64_f32(v56)), v132));
            v57.i64[0] = 0x400000004;
            v57.i64[1] = 0x400000004;
            v48 = vaddq_s32(v133, v57);
            v51 -= 4;
          }
          while (v51);
          v9 = v124;
          v46 = (double)(int)v15 * 0.5;
          if (v47 != v15)
          {
LABEL_127:
            do
            {
              v58 = ((double)(int)v47 - v46) * v45;
              v59 = sin(v58);
              v46 = (double)(int)v15 * 0.5;
              v45 = v43 * v131;
              v44 = v131;
              *(float *)&v59 = v59 * (v131 * v40->f32[v47]) / v58;
              v16[v47++] = LODWORD(v59);
            }
            while (v15 != v47);
          }
        }
      }
      *v16 = 0;
      v68 = v44;
      *(float *)&v16[(int)v46] = v68;
      v16[(int)v15] = 0;
      if ((int)v42 >= 0)
        v69 = v42;
      else
        v69 = v42 + 1;
      *(_DWORD *)(v14 + 20) = (v69 >> 1) - 1;
      if ((v41 & 0x80000000) != 0 || (int)v42 < 1)
        goto LABEL_93;
      v70 = *(_QWORD *)v14;
      v71 = v41 + 1;
      v72 = 4 * v42;
      if (v42 <= 7)
      {
        v73 = (_DWORD *)(v70 + 12);
        v74 = v41;
        do
        {
          v75 = v74;
          *(v73 - 3) = v16[v74];
          if ((_DWORD)v42 != 1)
          {
            *(v73 - 2) = v16[v74 + v41];
            if ((_DWORD)v42 != 2)
            {
              v76 = v74 + v41 + v41;
              *(v73 - 1) = v16[v76];
              if ((_DWORD)v42 != 3)
              {
                v77 = v76 + v41;
                *v73 = v16[v77];
                if ((_DWORD)v42 != 4)
                {
                  v78 = v77 + v41;
                  v73[1] = v16[v78];
                  if ((_DWORD)v42 != 5)
                  {
                    v79 = v78 + v41;
                    v73[2] = v16[v79];
                    if ((_DWORD)v42 != 6)
                      v73[3] = v16[v79 + v41];
                  }
                }
              }
            }
          }
          v74 = v75 - 1;
          v73 = (_DWORD *)((char *)v73 + v72);
          --v71;
        }
        while (v71);
        goto LABEL_93;
      }
      if ((_DWORD)v41 != 1)
      {
        v84 = 0;
        v85 = 4 * v41;
        do
        {
          v86 = &v16[(int)v41];
          v87 = (_DWORD *)v70;
          v88 = v42;
          do
          {
            *v87++ = *v86;
            v86 = (_DWORD *)((char *)v86 + v85);
            --v88;
          }
          while (v88);
          ++v84;
          LODWORD(v41) = v41 - 1;
          v70 += v72;
        }
        while (v84 != v71);
        goto LABEL_93;
      }
      v80 = v42 & 0x7FFFFFF8;
      v81 = v42 & 0xFFFFFFF8;
      if ((unint64_t)(v70 - (_QWORD)v16 - 4) >= 0x20)
      {
        v89 = (_OWORD *)(v70 + 16);
        v90 = (__int128 *)(v16 + 5);
        v91 = v42 & 0xFFFFFFF8;
        do
        {
          v92 = *v90;
          *(v89 - 1) = *(v90 - 1);
          *v89 = v92;
          v89 += 2;
          v90 += 2 * v41;
          v91 -= 8;
        }
        while (v91);
        if (v80 == v42)
        {
LABEL_86:
          if ((unint64_t)(v72 + v70 - (_QWORD)v16) >= 0x20)
          {
            v96 = (_OWORD *)(v72 + v70 + 16);
            v97 = (__int128 *)(v16 + 4);
            v98 = v42 & 0xFFFFFFF8;
            do
            {
              v99 = *v97;
              *(v96 - 1) = *(v97 - 1);
              *v96 = v99;
              v96 += 2;
              v97 += 2 * v41;
              v98 -= 8;
            }
            while (v98);
            if (v80 == v42)
              goto LABEL_93;
          }
          else
          {
            v80 = 0;
            v81 = 0;
          }
          v100 = v42 - v80;
          v101 = (_DWORD *)(v70 + v72 + 4 * v80);
          v102 = &v16[v81];
          do
          {
            *v101++ = *v102;
            v102 += v41;
            --v100;
          }
          while (v100);
LABEL_93:
          MEMORY[0x212BC7910](v16, 0x1000C8052888210);
          v104 = (uint64_t *)*((_QWORD *)v9 + 1);
          v103 = *((_QWORD *)v9 + 2);
          if ((unint64_t)v104 >= v103)
          {
            v106 = *(uint64_t **)v9;
            v107 = (uint64_t)v104 - *(_QWORD *)v9;
            v108 = v107 >> 3;
            v109 = (v107 >> 3) + 1;
            if (v109 >> 61)
              std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
            v110 = v103 - (_QWORD)v106;
            if (v110 >> 2 > v109)
              v109 = v110 >> 2;
            if ((unint64_t)v110 >= 0x7FFFFFFFFFFFFFF8)
              v111 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v111 = v109;
            if (v111)
            {
              if (v111 >> 61)
                std::__throw_bad_array_new_length[abi:ne180100]();
              v112 = operator new(8 * v111);
            }
            else
            {
              v112 = 0;
            }
            v113 = (uint64_t *)&v112[8 * v108];
            v114 = &v112[8 * v111];
            *v113 = v14;
            v105 = v113 + 1;
            if (v104 == v106)
            {
              v106 = v104;
            }
            else
            {
              v115 = (char *)v104 - (char *)v106 - 8;
              if (v115 < 0x58)
                goto LABEL_128;
              if ((unint64_t)((char *)v104 - &v112[v107]) < 0x20)
                goto LABEL_128;
              v116 = (v115 >> 3) + 1;
              v117 = &v112[8 * v108 - 16];
              v118 = v104 - 2;
              v119 = v116 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v120 = *(_OWORD *)v118;
                *(v117 - 1) = *((_OWORD *)v118 - 1);
                *v117 = v120;
                v117 -= 2;
                v118 -= 4;
                v119 -= 4;
              }
              while (v119);
              v113 -= v116 & 0x3FFFFFFFFFFFFFFCLL;
              v104 -= v116 & 0x3FFFFFFFFFFFFFFCLL;
              if (v116 != (v116 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_128:
                do
                {
                  v121 = *--v104;
                  *--v113 = v121;
                }
                while (v104 != v106);
                v106 = *(uint64_t **)v9;
              }
            }
            *(_QWORD *)v9 = v113;
            *((_QWORD *)v9 + 1) = v105;
            *((_QWORD *)v9 + 2) = v114;
            if (v106)
              operator delete(v106);
          }
          else
          {
            *v104 = v14;
            v105 = v104 + 1;
          }
          *((_QWORD *)v9 + 1) = v105;
          goto LABEL_117;
        }
        v83 = v81 | 1;
        v82 = v42 & 0xFFFFFFF8;
      }
      else
      {
        v82 = 0;
        v83 = 1;
      }
      v93 = v42 - v82;
      v94 = (_DWORD *)(v70 + 4 * v82);
      v95 = &v16[v83];
      do
      {
        *v94++ = *v95;
        v95 += v41;
        --v93;
      }
      while (v93);
      goto LABEL_86;
    }
LABEL_16:
    v22 = &getPersonalizedIRDataLog(void)::onceToken;
    if (qword_254A6E078 < (unint64_t)qword_254A6E080)
    {
      KaiserWindow::KaiserWindow((KaiserWindow *)qword_254A6E078, v15 - 1, v17);
      v23 = (char *)(v19 + 40);
      qword_254A6E078 = v19 + 40;
LABEL_42:
      v22[15] = (uint64_t)v23;
      v21 = (float32x4_t **)(v23 - 24);
      goto LABEL_43;
    }
    v24 = 0xCCCCCCCCCCCCCCCDLL * ((qword_254A6E078 - qword_254A6E070) >> 3);
    if (v24 + 1 > 0x666666666666666)
      std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
    v25 = 0x999999999999999ALL * ((qword_254A6E080 - qword_254A6E070) >> 3);
    if (v25 <= v24 + 1)
      v25 = v24 + 1;
    if (0xCCCCCCCCCCCCCCCDLL * ((qword_254A6E080 - qword_254A6E070) >> 3) >= 0x333333333333333)
      v26 = 0x666666666666666;
    else
      v26 = v25;
    if (v26)
    {
      if (v26 > 0x666666666666666)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v27 = (char *)operator new(40 * v26);
    }
    else
    {
      v27 = 0;
    }
    v123 = v9;
    v134 = (KaiserWindow *)&v27[40 * v24];
    v135 = (uint64_t)&v27[40 * v26];
    KaiserWindow::KaiserWindow(v134, v15 - 1, v17);
    v28 = (uint64_t)v134;
    v23 = (char *)v134 + 40;
    v29 = qword_254A6E070;
    v30 = (char *)qword_254A6E078;
    v136 = v134;
    if (qword_254A6E078 == qword_254A6E070)
    {
      qword_254A6E070 = (uint64_t)v134;
      qword_254A6E078 = (uint64_t)v134 + 40;
      qword_254A6E080 = v135;
      v9 = v123;
    }
    else
    {
      do
      {
        v32 = *(_OWORD *)(v30 - 40);
        *(_QWORD *)(v28 - 24) = 0;
        v33 = v28 - 24;
        *(_OWORD *)(v28 - 40) = v32;
        *(_QWORD *)(v33 + 8) = 0;
        *(_QWORD *)(v33 + 16) = 0;
        v35 = (_BYTE *)*((_QWORD *)v30 - 3);
        v34 = (_BYTE *)*((_QWORD *)v30 - 2);
        v36 = v34 - v35;
        if (v34 != v35)
        {
          if (v36 < 0)
            std::vector<std::vector<float>>::__throw_length_error[abi:ne180100]();
          v37 = (char *)operator new(v34 - v35);
          *(_QWORD *)(v28 - 24) = v37;
          *(_QWORD *)(v28 - 16) = v37;
          v31 = &v37[4 * (v36 >> 2)];
          *(_QWORD *)(v28 - 8) = v31;
          memcpy(v37, v35, v36);
          *(_QWORD *)(v28 - 16) = v31;
        }
        v30 -= 40;
        v28 = (uint64_t)v136 - 40;
        v136 = (KaiserWindow *)((char *)v136 - 40);
      }
      while (v30 != (char *)v29);
      v30 = (char *)qword_254A6E070;
      v38 = qword_254A6E078;
      qword_254A6E070 = v28;
      qword_254A6E078 = (uint64_t)v134 + 40;
      qword_254A6E080 = v135;
      if ((char *)v38 == v30)
      {
        v9 = v123;
        v22 = &getPersonalizedIRDataLog(void)::onceToken;
        if (!v30)
          goto LABEL_42;
        goto LABEL_41;
      }
      v9 = v123;
      v22 = &getPersonalizedIRDataLog(void)::onceToken;
      do
      {
        v39 = *(void **)(v38 - 24);
        if (v39)
        {
          *(_QWORD *)(v38 - 16) = v39;
          operator delete(v39);
        }
        v38 -= 40;
      }
      while ((char *)v38 != v30);
    }
    if (!v30)
      goto LABEL_42;
LABEL_41:
    operator delete(v30);
    goto LABEL_42;
  }
  v11 = 0;
  v12 = v10 >> 3;
  v13 = 1;
  while (1)
  {
    v14 = *(_QWORD *)(*(_QWORD *)this + 8 * v11);
    if (*(double *)(v14 + 32) == a5
      && *(double *)(v14 + 24) == a4
      && *(_DWORD *)(v14 + 12) == a2
      && *(_DWORD *)(v14 + 16) == a3)
    {
      break;
    }
    v11 = v13++;
    if (v12 <= v11)
      goto LABEL_9;
  }
LABEL_117:
  ++*(_DWORD *)(v14 + 8);
  return v14;
}

void sub_2105CFFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::__split_buffer<KaiserWindow>::~__split_buffer((uint64_t)&a30);
  os_unfair_lock_unlock((os_unfair_lock_t)&GetKaiser(unsigned int,double)::sKaiserWindows);
  MEMORY[0x212BC7928](v30, 0x1080C4003DAF236);
  _Unwind_Resume(a1);
}

_QWORD *SincKernelFactory::ReleaseSincKernel(_QWORD *result, uint64_t a2)
{
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v3 = *(_DWORD *)(a2 + 8) - 1;
    *(_DWORD *)(a2 + 8) = v3;
    if (!v3)
    {
      v4 = result;
      v6 = *result;
      v5 = result[1];
      if (v5 != *result)
      {
        v7 = 0;
        v8 = 1;
        do
        {
          if (*(_QWORD *)(v6 + 8 * v7) == a2)
          {
            v9 = v6 + 8 * v7;
            v10 = v5 - (v9 + 8);
            if (v5 != v9 + 8)
              memmove((void *)(v6 + 8 * v7), (const void *)(v9 + 8), v5 - (v9 + 8));
            v4[1] = v9 + v10;
            free(*(void **)a2);
            JUMPOUT(0x212BC7928);
          }
          v7 = v8++;
        }
        while ((v5 - *result) >> 3 > v7);
      }
    }
  }
  return result;
}

void KaiserWindow::KaiserWindow(KaiserWindow *this, int a2, double a3)
{
  _DWORD *v6;
  size_t v7;
  double v8;
  double v9;
  double *v10;
  double *v11;
  double v12;
  double v13;
  double v14;
  long double v15;
  uint64_t v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  long double v22;
  double v23;
  float v24;
  double v25;
  double v26;
  double v27;
  double v28;

  v6 = 0;
  *(_DWORD *)this = a2;
  *((double *)this + 1) = a3;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  if (a2 != -1)
  {
    v7 = (a2 + 1);
    v6 = operator new(v7 * 4);
    *((_QWORD *)this + 2) = v6;
    *((_QWORD *)this + 4) = &v6[v7];
    bzero(v6, v7 * 4);
    *((_QWORD *)this + 3) = &v6[v7];
  }
  if (a3 >= 50.0)
  {
    v8 = a3 * 0.1102 + -0.95874;
  }
  else
  {
    v8 = 0.0;
    if (a3 > 21.0)
      v8 = (a3 + -21.0) * 0.07886 + pow(a3 + -21.0, 0.4) * 0.5842;
  }
  v9 = fabs(v8);
  v10 = (double *)&unk_2105F1000;
  v11 = (double *)&unk_2105F1000;
  v28 = v8;
  if (v9 >= 3.75)
  {
    v14 = 3.75 / v9;
    v15 = exp(v9);
    v11 = (double *)&unk_2105F1000;
    v10 = (double *)&unk_2105F1000;
    v8 = v28;
    v13 = ((((((((v14 * 0.00392377 + -0.01647633) * v14 + 0.02635537) * v14 + -0.02057706) * v14 + 0.00916281) * v14
            + -0.00157565)
           * v14
           + 0.00225319)
          * v14
          + 0.01328592)
         * v14
         + 0.39894228)
        * v15
        / sqrt(v9);
    if (!a2)
      goto LABEL_16;
  }
  else
  {
    v12 = v8 * 0.266666667 * (v8 * 0.266666667);
    v13 = (((((v12 * 0.0045813 + 0.0360768) * v12 + 0.2659732) * v12 + 1.2067492) * v12 + 3.0899424) * v12 + 3.5156229)
        * v12
        + 1.0;
    if (!a2)
      goto LABEL_16;
  }
  v16 = 0;
  v17 = -1.0;
  v18 = v10[482];
  v19 = v11[483];
  v20 = 1.0 / v13;
  do
  {
    v25 = sqrt(-(v17
               + ((double)v16 - (double)((a2 - 1) >> 1))
               * (1.0
                / (double)((a2 - 1) >> 1))
               * (((double)v16 - (double)((a2 - 1) >> 1))
                * (1.0
                 / (double)((a2 - 1) >> 1)))))
        * v8;
    v26 = fabs(v25);
    if (v26 >= 3.75)
    {
      v22 = exp(v26);
      v17 = -1.0;
      v8 = v28;
      v21 = 3.75 / v26;
      v23 = (v19
           + (v18
            + ((((((v21 * 0.00392377 + -0.01647633) * v21 + 0.02635537) * v21 + -0.02057706) * v21 + 0.00916281) * v21
              + -0.00157565)
             * v21
             + 0.00225319)
            * v21)
           * v21)
          * v22
          / sqrt(v26);
    }
    else
    {
      v27 = v25 * 0.266666667 * (v25 * 0.266666667);
      v23 = (((((v27 * 0.0045813 + 0.0360768) * v27 + 0.2659732) * v27 + 1.2067492) * v27 + 3.0899424) * v27 + 3.5156229)
          * v27
          + 1.0;
    }
    v24 = v23 * v20;
    *(float *)&v6[++v16] = v24;
  }
  while (a2 != v16);
LABEL_16:
  *v6 = 0;
}

uint64_t std::__split_buffer<KaiserWindow>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 40;
        *(_QWORD *)(a1 + 16) = v2 - 40;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 40;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<KaiserWindow>,std::reverse_iterator<KaiserWindow*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 + 16);
      if (v5)
      {
        *(_QWORD *)(v3 + 24) = v5;
        operator delete(v5);
      }
      v3 += 40;
    }
  }
  return a1;
}

void IR::IRData::Implementation::readIRPlist()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  int v3;
  uint64_t v4;

  LODWORD(v2) = 136315650;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9(&dword_210570000, v0, v1, "IRData::%s: rawPlistLength %u is larger than remaining file size %zu", v2, v3, v4);
  OUTLINED_FUNCTION_12();
}

void IR::IRData::Implementation::readIRPlist(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: error while constructing dictionary from data", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: failed to read rawPlistLength", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::readIRPlist(int a1, int a2, NSObject *a3)
{
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = 136315650;
  v4 = "readIRPlist";
  v5 = 1024;
  v6 = a1;
  v7 = 1024;
  v8 = a2;
  OUTLINED_FUNCTION_6(&dword_210570000, a3, (uint64_t)a3, "IRData::%s: %u bytes read, expected %u", (uint8_t *)&v3);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::Implementation(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Empty Data Vectors", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: unable to create user-defined size dimension", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Filter Data Size - Delay Size Mismatch", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Dimension Size Mismatch", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Fractional Filter Length", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: unable to load IR file", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: unable to load IR file header", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: IR file's native sample rate is zero.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: Invalid filter length.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: length of fadeout is greater than filter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: start of fadeout is before window fadein", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: NumChannels was either not specified or read as 0", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: failed to read float value from file", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: failed to read float dimensionVal from file", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: Triangulation dictionary found but is empty/defective", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: Triangulation dictionary found but failed to load", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: coefficient format not specified", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: start of fadeout is beyond end of filter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: window start sample beyond end of filter", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::canCreateSizeDimension(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: unable to create user-defined size dimension; missing azimuth and/or elevation data",
    a5,
    a6,
    a7,
    a8,
    2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: unable to create user-defined size dimension; size dimension already exists in data",
    a5,
    a6,
    a7,
    a8,
    2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: unable to create user-defined size dimension; size vector has values not in the range [0 1]",
    a5,
    a6,
    a7,
    a8,
    2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createSizeDimension()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_13(&dword_210570000, v0, v1, "IRData::%s: Size dimension generation (including triangulation) took %.2f ms", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_14();
  OUTLINED_FUNCTION_13(&dword_210570000, v0, v1, "IRData::%s: VBAP triangulation took %.2f ms", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createSizeDimension(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: Could not create VBAP data for size dimensions", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::Implementation()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;

  OUTLINED_FUNCTION_3(*MEMORY[0x24BDAC8D0]);
  v2 = 136315394;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_210570000, v0, v1, "IRData::%s: unsupported coefficient format: %s", v2, v3);
  OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 136315650;
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_10(&dword_210570000, v0, v1, "IRData::%s: %zu bytes remaining in file but need %zu", v2, v3, v4);
  OUTLINED_FUNCTION_12();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_7(&dword_210570000, v0, v1, "IRData::%s: failed to read %d int16 values from file", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_7(&dword_210570000, v0, v1, "IRData::%s: failed to read %d float values from file", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_5();
  OUTLINED_FUNCTION_7(&dword_210570000, v0, v1, "IRData::%s: duplicate coordinate %u found in Dimensions array", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  int v3;
  uint64_t v4;

  LODWORD(v2) = 136315650;
  OUTLINED_FUNCTION_8();
  OUTLINED_FUNCTION_9(&dword_210570000, v0, v1, "IRData::%s: %u bytes to skip, but only %zu bytes remaining in the file.", v2, v3, v4);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;

  OUTLINED_FUNCTION_3(*MEMORY[0x24BDAC8D0]);
  v2 = 136315394;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_210570000, v0, v1, "IRData::%s: unsupported delay format: %s", v2, v3);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::Implementation(int *a1, NSObject *a2, uint64_t a3)
{
  int v3;
  int v4;
  const char *v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = 136315650;
  v5 = "Implementation";
  v6 = 1024;
  v7 = v3;
  v8 = 1024;
  v9 = 9;
  OUTLINED_FUNCTION_6(&dword_210570000, a2, a3, "IRData::%s: size of Dimensions array is %u but this should never be greater than %u", (uint8_t *)&v4);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::Implementation(int *a1, int *a2, NSObject *a3)
{
  int v3;
  int v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v3 = *a1;
  v4 = *a2;
  v5 = 136315650;
  v6 = "Implementation";
  v7 = 1024;
  v8 = v3;
  v9 = 1024;
  v10 = v4;
  OUTLINED_FUNCTION_6(&dword_210570000, a3, (uint64_t)a3, "IRData::%s: failed to initialize and store coeffs with filterLength = %d, partitionLength = %d", (uint8_t *)&v5);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createSoundProfilePack(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Invalid EQ data.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createSerializedIRData(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Only Time Domain supported", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Filter data not created, XML creation issue", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Invalid IR Data", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createSoundProfileMetaDataDictionary(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: Invalid SoundProfile pack.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: SoundProfile is not well-constructed.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::getSoundProfileVersion(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: Invalid SoundProfile pack.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: SoundProfile is not well-constructed.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createDictionaryIRData(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Only Time Domain supported", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createSerializedIRDataWithNoise(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: unable to load input data", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: unable to load input data header", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: invalid filter length.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TotalNumCoordinates was either not specified or read as 0", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: NumChannels was either not specified or read as 0", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createSerializedIRDataWithNoise()
{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;

  OUTLINED_FUNCTION_3(*MEMORY[0x24BDAC8D0]);
  v2 = 136315394;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_210570000, v0, v1, "IRData::%s: coefficient format '%s' is not supported.", v2, v3);
  OUTLINED_FUNCTION_1();
}

{
  __int16 v0;
  NSObject *v1;
  uint64_t v2;
  int v3[4];
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v3[0] = 136315650;
  OUTLINED_FUNCTION_5();
  v4 = v0;
  v5 = 9;
  OUTLINED_FUNCTION_6(&dword_210570000, v1, v2, "IRData::%s: size of Dimensions array is %u but this should never be greater than %u", (uint8_t *)v3);
  OUTLINED_FUNCTION_1();
}

{
  uint64_t v0;
  os_log_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;

  v2 = 136315650;
  OUTLINED_FUNCTION_11();
  OUTLINED_FUNCTION_10(&dword_210570000, v0, v1, "IRData::%s: %zu bytes remaining in file but need %zu", v2, v3, v4);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  os_log_t v1;
  int v2;
  const char *v3;

  OUTLINED_FUNCTION_3(*MEMORY[0x24BDAC8D0]);
  v2 = 136315394;
  OUTLINED_FUNCTION_4();
  OUTLINED_FUNCTION_2(&dword_210570000, v0, v1, "IRData::%s: unsupported delay format: %s", v2, v3);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::createNoisySoundProfilePack(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: Invalid SoundProfile pack.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: SoundProfile is not well-constructed.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::insertIRDataInTree()
{
  __assert_rtn("insertIRDataInTree", "IRData.cpp", 1724, "curNodeP");
}

void IR::VBAPTriangulationKernel::VBAPTriangulationKernel(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 48) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 24) = v6;
    operator delete(v6);
  }
}

void IR::IRData::Implementation::getInterpolatedTimeDomainCoeffs<std::vector<float>>()
{
  __assert_rtn("getInterpolatedTimeDomainCoeffs", "IRDataInterpolation.cpp", 164, "mTopLevelNodes->size() > 0");
}

{
  __assert_rtn("getInterpolatedTimeDomainCoeffs", "IRDataInterpolation.cpp", 167, "ioCoefficients.size() >= inChans.size()");
}

{
  __assert_rtn("getInterpolatedTimeDomainCoeffs", "IRDataInterpolation.cpp", 166, "ioCoefficients.size() == ioDelays.size()");
}

{
  __assert_rtn("getInterpolatedTimeDomainCoeffs", "IRDataInterpolation.cpp", 162, "!mVBAPKernels.empty()");
}

void IR::IRData::Implementation::getInterpolatedCoeffs()
{
  __assert_rtn("getInterpolatedCoeffs", "IRDataInterpolation.cpp", 39, "mTopLevelNodes->size() > 0");
}

{
  __assert_rtn("getInterpolatedCoeffs", "IRDataInterpolation.cpp", 42, "ioFilterKernels.size() >= inChans.size()");
}

{
  __assert_rtn("getInterpolatedCoeffs", "IRDataInterpolation.cpp", 41, "ioFilterKernels.size() == ioDelays.size()");
}

{
  __assert_rtn("getInterpolatedCoeffs", "IRDataInterpolation.cpp", 37, "!mVBAPKernels.empty()");
}

void IR::HOA2BinauralIRRenderer::setEnvironment(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "HOA2BinauralIRRenderer::%s: Invalid HOARIR IRData object", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "HOA2BinauralIRRenderer::%s: Invalid number of HOA channels", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "HOA2BinauralIRRenderer::%s: Invalid HRIR IRData object", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::loadTriangulationData(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: number of stored triangulations found to be zero", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TriVertices has wrong data type", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TriAssignment data of wrong type", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: triangle lookup bins have insufficient data", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: triangle lookup bins have wrong amount of data", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: triangle lookup bins must have at least one element", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TriBinLengths and/or TriBinSerial array not of proper size", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TriBinLengths and/or TriBinSerial not array type", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TriBinLengths and/or TriBinSerial key missing from triangulation dictionary", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: wrong number of TriAssignment data points", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TriAssignment key missing from triangulation dictionary", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TriVertices array wrong length", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: TriVertices key missing from triangulation dictionary", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: NumTriangulations key missing from triangulation dictionary", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRData::Implementation::initVBAPTriangulation(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "IRData::%s: top level nodes empty", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void AudioDSP::Core::HeadTracker::Implementation::ConnectRM()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "[%s|%s] Invalid head-tracking mode.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void AudioDSP::Core::HeadTracker::Implementation::SetBluetoothLowLatencyMode()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_13(&dword_210570000, v0, v1, "[%s|%s] Host disallowed accessing HAL APIs. Bluetooth latency mode cannot be updated.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void AudioDSP::Core::HeadTracker::UnregisterUserChoiceListener()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_13(&dword_210570000, v0, v1, "[%s|%s] SpatialConfig listener is already unregistered.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void AudioDSP::Core::HeadTracker::ConnectRM()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "[%s|%s] Device doesn't support head tracking.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "[%s|%s] Head tracking is disabled on the device.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void AudioDSP::Core::HeadTracker::RegisterUserChoiceListener()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_4_0(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_1_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "[%s|%s] Failed to register SpatialConfig listener. Unknown/unsupported device ID.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void ___ZL22getRMMediaSessionClassv_block_invoke_cold_1()
{
  uint64_t v0;

  v0 = abort_report_np();
  ___ZL29getRMMediaSessionOptionsClassv_block_invoke_cold_1(v0);
}

void ___ZL29getRMMediaSessionOptionsClassv_block_invoke_cold_1()
{
  abort_report_np();
  caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock();
}

void caulk::recursive_mutex_adapter<caulk::pooled_semaphore_mutex>::unlock()
{
  _os_assert_log();
  _os_crash();
  __break(1u);
}

void IR::DataResampler<float>::Initialize(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  __int16 v6;
  int v7;
  __int16 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v2 = 136315906;
  v3 = "Initialize";
  v4 = 1024;
  v5 = a1;
  v6 = 1024;
  v7 = 0;
  v8 = 1024;
  v9 = 127;
  _os_log_error_impl(&dword_210570000, a2, OS_LOG_TYPE_ERROR, "IRDataResampler::%s: Invalid configuration data: Quality = %u is out of bound, needs to be within [%u, %u]", (uint8_t *)&v2, 0x1Eu);
}

void IR::DataResampler<float>::Initialize(os_log_t log)
{
  int v1;
  const char *v2;
  uint64_t v3;

  v3 = *MEMORY[0x24BDAC8D0];
  v1 = 136315138;
  v2 = "Initialize";
  _os_log_error_impl(&dword_210570000, log, OS_LOG_TYPE_ERROR, "IRDataResampler::%s: SRC actual input consumed = 0", (uint8_t *)&v1, 0xCu);
}

void IR::DelayLine::processPolyphaseQ22_10()
{
  __assert_rtn("processPolyphaseQ22_10", "DelayLine.cpp", 216, "inNumFramesToProcess + padOffset <= mDelayLine.size()");
}

{
  __assert_rtn("processPolyphaseQ22_10", "DelayLine.cpp", 206, "phaseIndex < mFractionalPhases");
}

void IR::DelayLine::setDelay()
{
  __assert_rtn("setDelay", "DelayLine.cpp", 397, "inTapIdx < mNumTaps");
}

void IR::DelayLine::process()
{
  __assert_rtn("process", "DelayLine.cpp", 501, "inInputData");
}

{
  __assert_rtn("process", "DelayLine.cpp", 594, "phaseIndex < mFractionalPhases");
}

{
  __assert_rtn("process", "DelayLine.cpp", 655, "numSubBlocksRemaining > 0");
}

{
  __assert_rtn("process", "DelayLine.cpp", 612, "inNumFramesToProcess <= delayLineLen - padOffset");
}

{
  __assert_rtn("process", "DelayLine.cpp", 703, "inNumFramesToProcess < delayLineLen - padOffset");
}

void IR::getFilePtr(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: invalid file URL specified", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: unable to create file path from URL", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::getFilePtr()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "%s: attempting to open a directory: %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "%s: invalid file handle for %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::getFilePtr(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = 136315394;
  v3 = "getFilePtr";
  v4 = 1024;
  v5 = a1;
  _os_log_error_impl(&dword_210570000, a2, OS_LOG_TYPE_ERROR, "%s: error %d getting file status", (uint8_t *)&v2, 0x12u);
  OUTLINED_FUNCTION_1();
}

void IR::IRDataLoader::Implementation::create()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_1(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "%s%s: ERROR: Issue creating the IR data object", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void IR::IRDataLoader::Implementation::swapLoadedIR(uint64_t a1)
{
  std::__shared_weak_count *v1;

  OUTLINED_FUNCTION_8_0(a1);
  OUTLINED_FUNCTION_6_0(v1);
}

void IR::IRDataLoader::Implementation::loadPrivate(uint64_t *a1, uint64_t a2, NSObject *a3)
{
  uint64_t *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  if (*((char *)a1 + 23) >= 0)
    v4 = a1;
  else
    v4 = (uint64_t *)*a1;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v6 = 136315650;
  v7 = v4;
  v8 = 2080;
  v9 = "loadPrivate";
  v10 = 2080;
  v11 = v5;
  _os_log_error_impl(&dword_210570000, a3, OS_LOG_TYPE_ERROR, "%s%s: IRData construction error: %s", (uint8_t *)&v6, 0x20u);
}

void IR::IRDataLoader::Implementation::loadPrivate()
{
  os_log_t v0;
  uint8_t v1[40];

  OUTLINED_FUNCTION_1_1(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_9_0();
  _os_log_debug_impl(&dword_210570000, v0, OS_LOG_TYPE_DEBUG, "%s%s: Fetched personalized HRIR type %u from cache", v1, 0x1Cu);
}

void IR::IRDataLoader::Implementation::addIRDataToCache()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_1(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "%s%s: ERROR: Trying to save IRData with an unrelated IRDataAttributes.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void IR::IRDataLoader::Implementation::loadAndDecode()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_1(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "%s%s: invalid decoder layout tag = 0", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  os_log_t v0;
  uint8_t v1[40];

  OUTLINED_FUNCTION_1_1(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_9_0();
  _os_log_error_impl(&dword_210570000, v0, OS_LOG_TYPE_ERROR, "%s%s: could not generate panning IR data for layout tag %u", v1, 0x1Cu);
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_1(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "%s%s: could not load decoder IR data: ", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void IR::IRDataLoader::Implementation::loadAndDecode(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: Azimuth/elevation should not be a part as Ref HOA IR dimension.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRDataLoader::writeIRFile(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Filter File Not Written", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Empty Data Vectors; Filter File Not Written",
    a5,
    a6,
    a7,
    a8,
    2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Filter File Not Written, XML creation issue", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Filter Data Size - Delay Size Mismatch: Filter File Not Written", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Dimension Size Mismatch; Filter File Not Written",
    a5,
    a6,
    a7,
    a8,
    2u);
  OUTLINED_FUNCTION_1();
}

{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: ERROR: Fractional Filter Length; Filter File Not Written",
    a5,
    a6,
    a7,
    a8,
    2u);
  OUTLINED_FUNCTION_1();
}

void IR::IRDataLoader::writeIRFile()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  OUTLINED_FUNCTION_5_1();
  OUTLINED_FUNCTION_13(&dword_210570000, v0, v1, "%s: Filter Written: %s", v2, v3, v4, v5, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::MatrixResampler<float>::Initialize()
{
  __assert_rtn("Initialize", "MatrixResampler.cpp", 70, "nDFT >= 16u");
}

void IR::FFTSubFilterData::FFTSubFilterData(void **a1, void **a2, uint64_t a3)
{
  void *v5;
  void *v6;

  v5 = *a1;
  if (v5)
  {
    *(_QWORD *)(a3 + 48) = v5;
    operator delete(v5);
  }
  v6 = *a2;
  if (*a2)
  {
    *(_QWORD *)(a3 + 24) = v6;
    OUTLINED_FUNCTION_0_1(v6);
  }
}

void IR::PersonalizedIRData::Implementation::RegisterObservers()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_13(&dword_210570000, v0, v1, "[%s|%s] BTCloudServicesSoundProfile observer is registered.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

{
  int v0;
  os_log_t v1;
  uint8_t v2[14];
  const char *v3;
  __int16 v4;
  int v5;

  OUTLINED_FUNCTION_1_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  v3 = "RegisterObservers";
  v4 = 1024;
  v5 = v0;
  _os_log_error_impl(&dword_210570000, v1, OS_LOG_TYPE_ERROR, "[%s|%s] BTCloudServicesSoundProfile observer registration failed. Error: %u", v2, 0x1Cu);
  OUTLINED_FUNCTION_12();
}

{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_1_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_4_1(&dword_210570000, v0, v1, "[%s|%s] personalizedHRTFAllowed listener is registered for device ID: %u.", v2, v3, v4);
  OUTLINED_FUNCTION_12();
}

{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "[%s|%s] Failed to register personalizedHRTFAllowed listener. Unknown device ID.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void IR::PersonalizedIRData::Implementation::UnregisterPersonalizedHRTFAllowedListener()
{
  uint64_t v0;
  os_log_t v1;
  const char *v2;
  const char *v3;
  int v4;

  OUTLINED_FUNCTION_1_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_7_0();
  OUTLINED_FUNCTION_4_1(&dword_210570000, v0, v1, "[%s|%s] personalizedHRTFAllowed listener is unregistered for device ID: %u", v2, v3, v4);
  OUTLINED_FUNCTION_12();
}

void IR::PersonalizedIRData::HALListenerCallbackFunction(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: Personalized HRIR configuration has changed, but the callback function returns invalid context. AUSM will ignore the change.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::PersonalizedIRData::Implementation::UnregisterBTCServicesAndMAObservers()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_13(&dword_210570000, v0, v1, "[%s|%s] BTCloudServicesSoundProfile observer is unregistered.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void IR::PersonalizedIRData::Implementation::GetCFData()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_1_2(*MEMORY[0x24BDAC8D0]);
  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "[%s|%s] Timeout while trying to fetch SoundProfile.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void IR::DataCache::DownloadAndCacheCFData(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  OUTLINED_FUNCTION_0(&dword_210570000, a1, a3, "%s: Invalid SoundProfile.", a5, a6, a7, a8, 2u);
  OUTLINED_FUNCTION_1();
}

void IR::DataCache::DownloadAndCacheCFData(int a1, NSObject *a2)
{
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v2 = 136315394;
  v3 = "GetEnrolledSoundProfileFromBTHAL";
  v4 = 1024;
  v5 = a1;
  _os_log_error_impl(&dword_210570000, a2, OS_LOG_TYPE_ERROR, "%s: Could not get object ID for the plugin. Error: %d", (uint8_t *)&v2, 0x12u);
  OUTLINED_FUNCTION_1();
}

void IR::DataCache::parseSoundProfileAndAddToCache()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "[%s|%s] Pulled SoundProfile is not a valid dictionary.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void IR::DataCache::addToCFDataCachePrivate()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  OUTLINED_FUNCTION_5_0();
  OUTLINED_FUNCTION_0_0(&dword_210570000, v0, v1, "[%s|%s] Invalid personalized HRTF type.", v2, v3, v4, v5, v6);
  OUTLINED_FUNCTION_1();
}

void IR::FFTFilterKernel::FFTFilterKernel(void **a1)
{
  void *v2;

  v2 = *a1;
  if (v2)
    OUTLINED_FUNCTION_0_2(v2, (uint64_t)a1);
}

void IR::ComplexDataCircBuffer::Implementation::initialize()
{
  __assert_rtn("initialize", "ComplexDataCircBuffer.cpp", 86, "err == noErr");
}

void IR::MPResampler<float>::Interpolate()
{
  __assert_rtn("Interpolate", "MPResampler.cpp", 195, "inSig.size() >= mNumPositiveFreq");
}

{
  __assert_rtn("Interpolate", "MPResampler.cpp", 196, "outSig.size() >= mNumPositiveFreq");
}

OSStatus AudioFormatGetProperty(AudioFormatPropertyID inPropertyID, UInt32 inSpecifierSize, const void *inSpecifier, UInt32 *ioPropertyDataSize, void *outPropertyData)
{
  return MEMORY[0x24BE0A6E0](*(_QWORD *)&inPropertyID, *(_QWORD *)&inSpecifierSize, inSpecifier, ioPropertyDataSize, outPropertyData);
}

OSStatus AudioObjectAddPropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return MEMORY[0x24BDBAF28](*(_QWORD *)&inObjectID, inAddress, inListener, inClientData);
}

OSStatus AudioObjectGetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 *ioDataSize, void *outData)
{
  return MEMORY[0x24BDBAF38](*(_QWORD *)&inObjectID, inAddress, *(_QWORD *)&inQualifierDataSize, inQualifierData, ioDataSize, outData);
}

Boolean AudioObjectHasProperty(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress)
{
  return MEMORY[0x24BDBAF48](*(_QWORD *)&inObjectID, inAddress);
}

OSStatus AudioObjectRemovePropertyListener(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, AudioObjectPropertyListenerProc inListener, void *inClientData)
{
  return MEMORY[0x24BDBAF58](*(_QWORD *)&inObjectID, inAddress, inListener, inClientData);
}

OSStatus AudioObjectSetPropertyData(AudioObjectID inObjectID, const AudioObjectPropertyAddress *inAddress, UInt32 inQualifierDataSize, const void *inQualifierData, UInt32 inDataSize, const void *inData)
{
  return MEMORY[0x24BDBAF68](*(_QWORD *)&inObjectID, inAddress, *(_QWORD *)&inQualifierDataSize, inQualifierData, *(_QWORD *)&inDataSize, inData);
}

uint64_t AudioSampleRateConverterCreate()
{
  return MEMORY[0x24BE0A6E8]();
}

uint64_t AudioSampleRateConverterDispose()
{
  return MEMORY[0x24BE0A6F0]();
}

uint64_t AudioSampleRateConverterGetExpectedNumberOfOutputFrames()
{
  return MEMORY[0x24BE0A6F8]();
}

uint64_t AudioSampleRateConverterGetRequiredNumberOfInputFrames()
{
  return MEMORY[0x24BE0A708]();
}

uint64_t AudioSampleRateConverterProcess()
{
  return MEMORY[0x24BE0A710]();
}

uint64_t AudioSampleRateConverterReset()
{
  return MEMORY[0x24BE0A720]();
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x24BDBB7F0](allocator, values, numValues, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x24BDBB820](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x24BDBB850]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x24BDBB860](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x24BDBBA18]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x24BDBBA20](BOOLean);
}

CFStringRef CFCopyDescription(CFTypeRef cf)
{
  return (CFStringRef)MEMORY[0x24BDBBC58](cf);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x24BDBBC98](allocator, bytes, length);
}

CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData)
{
  return (CFMutableDataRef)MEMORY[0x24BDBBCB8](allocator, capacity, theData);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x24BDBBCC0](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x24BDBBCE0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x24BDBBCE8](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x24BDBBCF8](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x24BDBBD08]();
}

void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8 *newBytes, CFIndex newLength)
{
  MEMORY[0x24BDBBD18](theData, range.location, range.length, newBytes, newLength);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x24BDBBDC0](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x24BDBBDD8](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x24BDBBDF0](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x24BDBBE00](theDict);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x24BDBBE18]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x24BDBBE30](theDict, key);
}

void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE50](theDict, key, value);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x24BDBBE60](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x24BDBBE68](cf1, cf2);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x24BDBBEF8](cf);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x24BDBC0A0](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x24BDBC110](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x24BDBC118]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x24BDBC130](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC160](key, applicationID);
}

CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean *keyExistsAndHasValidFormat)
{
  return MEMORY[0x24BDBC190](key, applicationID, keyExistsAndHasValidFormat);
}

Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName)
{
  return MEMORY[0x24BDBC1B0](applicationID, userName, hostName);
}

CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef *error)
{
  return (CFDataRef)MEMORY[0x24BDBC1C0](allocator, propertyList, format, options, error);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x24BDBC1E8](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x24BDBC298](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x24BDBC2A8](cf);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x24BDBC3C0](theSet, value);
}

void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void *context)
{
  MEMORY[0x24BDBC3C8](theSet, applier, context);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x24BDBC3E8](allocator, capacity, callBacks);
}

void CFStringAppendCString(CFMutableStringRef theString, const char *cStr, CFStringEncoding encoding)
{
  MEMORY[0x24BDBC4B0](theString, cStr, *(_QWORD *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC538](alloc, maxLength);
}

CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString)
{
  return (CFMutableStringRef)MEMORY[0x24BDBC540](alloc, maxLength, theString);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x24BDBC558](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x24BDBC568](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x24BDBC5A0](alloc, formatOptions, format, arguments);
}

CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x24BDBC5D8](theString, stringToFind, replacementString, rangeToSearch.location, rangeToSearch.length, compareOptions);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x24BDBC5F8](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x24BDBC600](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x24BDBC610](theString, *(_QWORD *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x24BDBC658](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x24BDBC698]();
}

Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix)
{
  return MEMORY[0x24BDBC6B0](theString, suffix);
}

void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString)
{
  MEMORY[0x24BDBC738](theString, trimString);
}

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL)
{
  return (CFURLRef)MEMORY[0x24BDBC790](relativeURL);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x24BDBC798](anURL, pathStyle);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x24BDBC828](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x24BDBC830](allocator, buffer, bufLen, isDirectory, baseURL);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x24BDBC850](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x24BDBC868](allocator, URLString, baseURL);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x24BDBC898](url, resolveAgainstBase, buffer, maxBufLen);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x24BDBC8B0]();
}

Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef *error)
{
  return MEMORY[0x24BDBC8C0](url, error);
}

uint64_t MGCopyAnswer()
{
  return MEMORY[0x24BED8448]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x24BED8470]();
}

uint64_t MGGetProductType()
{
  return MEMORY[0x24BED8488]();
}

uint64_t MGGetSInt32Answer()
{
  return MEMORY[0x24BED8490]();
}

uint64_t MGIsQuestionValid()
{
  return MEMORY[0x24BED84D0]();
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x24BDAC730](a1, *(_QWORD *)&a2);
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x24BDAC780](exception_object);
}

void caulk::concurrent::message::~message(caulk::concurrent::message *this)
{
  MEMORY[0x24BEC6D98](this);
}

uint64_t caulk::concurrent::messenger::shared_high_priority(caulk::concurrent::messenger *this)
{
  return MEMORY[0x24BEC6DA0](this);
}

uint64_t caulk::concurrent::messenger::drain(caulk::concurrent::messenger *this)
{
  return MEMORY[0x24BEC6DB0](this);
}

uint64_t caulk::concurrent::messenger::enqueue(caulk::concurrent::messenger *this, caulk::concurrent::message *a2)
{
  return MEMORY[0x24BEC6DB8](this, a2);
}

uint64_t caulk::concurrent::messenger::messenger()
{
  return MEMORY[0x24BEC6DC0]();
}

void caulk::concurrent::messenger::~messenger(caulk::concurrent::messenger *this)
{
  MEMORY[0x24BEC6DD0](this);
}

uint64_t caulk::pooled_semaphore_mutex::_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x24BEC6DE8](this);
}

uint64_t caulk::pooled_semaphore_mutex::_unlock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x24BEC6DF0](this);
}

uint64_t caulk::pooled_semaphore_mutex::try_lock(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x24BEC6DF8](this);
}

uint64_t caulk::pooled_semaphore_mutex::pooled_semaphore_mutex(caulk::pooled_semaphore_mutex *this)
{
  return MEMORY[0x24BEC6E00](this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x24BEDAA60](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x24BEDAA70](this);
}

const char *__cdecl std::exception::what(const std::exception *this)
{
  return (const char *)MEMORY[0x24BEDAA88](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAA8](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB0](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x24BEDAAB8](this, a2);
}

void std::domain_error::~domain_error(std::domain_error *this)
{
  MEMORY[0x24BEDAAE0](this);
}

{
  MEMORY[0x24BEDAAE8](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB30](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB50](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x24BEDAB58](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x24BEDAB68](this);
}

void std::overflow_error::~overflow_error(std::overflow_error *this)
{
  MEMORY[0x24BEDAB78](this);
}

{
  MEMORY[0x24BEDAB80](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x24BEDABB0](this);
}

void std::__call_once(std::once_flag::_State_type *a1, void *a2, void (__cdecl *a3)(void *))
{
  MEMORY[0x24BEDABC0](a1, a2, a3);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x24BEDABE8](__n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC40](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x24BEDAC88](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x24BEDAC98](this, __n, __c);
}

std::string *__cdecl std::string::replace(std::string *this, std::string::size_type __pos, std::string::size_type __n1, const std::string::value_type *__s, std::string::size_type __n2)
{
  return (std::string *)MEMORY[0x24BEDACA8](this, __pos, __n1, __s, __n2);
}

uint64_t std::ostream::put()
{
  return MEMORY[0x24BEDAEE0]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x24BEDAEE8]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x24BEDAEF8]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x24BEDAF00]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x24BEDAF30]();
}

{
  return MEMORY[0x24BEDAF40]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x24BEDAFD8](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x24BEDAFE0](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x24BEDAFE8](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x24BEDB010]();
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x24BEDB048]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x24BEDB050]();
}

void std::recursive_mutex::lock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB088](this);
}

void std::recursive_mutex::unlock(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB090](this);
}

std::recursive_mutex *__cdecl std::recursive_mutex::recursive_mutex(std::recursive_mutex *this)
{
  return (std::recursive_mutex *)MEMORY[0x24BEDB0A0](this);
}

void std::recursive_mutex::~recursive_mutex(std::recursive_mutex *this)
{
  MEMORY[0x24BEDB0A8](this);
}

void std::condition_variable::notify_all(std::condition_variable *this)
{
  MEMORY[0x24BEDB0F8](this);
}

void std::condition_variable::__do_timed_wait(std::condition_variable *this, std::unique_lock<std::mutex> *__lk, std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> a3)
{
  MEMORY[0x24BEDB108](this, __lk, a3.__d_.__rep_);
}

void std::condition_variable::~condition_variable(std::condition_variable *this)
{
  MEMORY[0x24BEDB118](this);
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB180](this);
}

std::__shared_weak_count *__cdecl std::__shared_weak_count::lock(std::__shared_weak_count *this)
{
  return (std::__shared_weak_count *)MEMORY[0x24BEDB188](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x24BEDB190](this);
}

void std::__throw_system_error(int __ev, const char *__what_arg)
{
  MEMORY[0x24BEDB1B0](*(_QWORD *)&__ev, __what_arg);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x24BEDB368](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x24BEDB370](this);
}

BOOL std::mutex::try_lock(std::mutex *this)
{
  return MEMORY[0x24BEDB378](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x24BEDB380](this);
}

std::chrono::steady_clock::time_point std::chrono::steady_clock::now(void)
{
  return (std::chrono::steady_clock::time_point)MEMORY[0x24BEDB3E0]();
}

std::chrono::system_clock::time_point std::chrono::system_clock::now(void)
{
  return (std::chrono::system_clock::time_point)MEMORY[0x24BEDB3F0]();
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x24BEDB448](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x24BEDB500](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x24BEDB518](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x24BEDB530](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x24BEDB5E8]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, float __val)
{
  return (std::string *)MEMORY[0x24BEDB600](retstr, __val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x24BEDB608](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x24BEDB610](retstr, *(_QWORD *)&__val);
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x24BEDB688](this);
}

void std::terminate(void)
{
  MEMORY[0x24BEDB6C0]();
}

uint64_t operator delete[]()
{
  return off_24CA2BCE0();
}

void operator delete(void *__p)
{
  off_24CA2BCE8(__p);
}

uint64_t operator delete()
{
  return off_24CA2BCF0();
}

uint64_t operator new[]()
{
  return off_24CA2BCF8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_24CA2BD00(__sz);
}

uint64_t operator new()
{
  return off_24CA2BD08();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x24BDAC7A0](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x24BEDB8F8](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x24BDAC7B0](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x24BEDB910](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x24BEDB928]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x24BEDB930](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x24BEDB940](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x24BEDB948](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x24BEDB950](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x24BEDB958]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x24BEDB960](a1, lptinfo, a3);
}

uint64_t __invert_d3()
{
  return MEMORY[0x24BDAC808]();
}

uint64_t __powisf2()
{
  return MEMORY[0x24BDAC870]();
}

__double2 __sincos_stret(double a1)
{
  double v1;
  double v2;
  __double2 result;

  MEMORY[0x24BDAC890](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__float2 __sincosf_stret(float a1)
{
  float v1;
  float v2;
  __float2 result;

  MEMORY[0x24BDAC898](a1);
  result.__cosval = v2;
  result.__sinval = v1;
  return result;
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x24BDAC930](*(_QWORD *)&a1);
}

uint64_t _os_assert_log()
{
  return MEMORY[0x24BDACB40]();
}

uint64_t _os_crash()
{
  return MEMORY[0x24BDACB50]();
}

uint64_t _os_feature_enabled_impl()
{
  return MEMORY[0x24BDACB60]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB68](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB80](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x24BDACB90](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x24BEAE670]();
}

void abort(void)
{
  MEMORY[0x24BDAD008]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x24BDAD010]();
}

float asinf(float a1)
{
  float result;

  MEMORY[0x24BDAD190](a1);
  return result;
}

float atan2f(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAD228](a1, a2);
  return result;
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x24BDAD320](a1, a2);
}

long double cos(long double __x)
{
  long double result;

  MEMORY[0x24BDADBE0](__x);
  return result;
}

float cosf(float a1)
{
  float result;

  MEMORY[0x24BDADBE8](a1);
  return result;
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x24BDADDA8](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x24BDADE98](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x24BDADEC8](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x24BDADED0](label, attr);
}

void dispatch_resume(dispatch_object_t object)
{
  MEMORY[0x24BDADF18](object);
}

dispatch_source_t dispatch_source_create(dispatch_source_type_t type, uintptr_t handle, uintptr_t mask, dispatch_queue_t queue)
{
  return (dispatch_source_t)MEMORY[0x24BDADF70](type, handle, mask, queue);
}

void dispatch_source_set_event_handler(dispatch_source_t source, dispatch_block_t handler)
{
  MEMORY[0x24BDADFB0](source, handler);
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x24BDAE070](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x24BDAE088](__handle, __symbol);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x24BDAE270](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x24BDAE278](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x24BDAE288](a1);
  return result;
}

int fclose(FILE *a1)
{
  return MEMORY[0x24BDAE2E0](a1);
}

FILE *__cdecl fmemopen(void *__buf, size_t __size, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE3E8](__buf, __size, __mode);
}

float fmodf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE3F8](a1, a2);
  return result;
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x24BDAE410](__filename, __mode);
}

size_t fread(void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE448](__ptr, __size, __nitems, __stream);
}

void free(void *a1)
{
  MEMORY[0x24BDAE450](a1);
}

int fseek(FILE *a1, uint64_t a2, int a3)
{
  return MEMORY[0x24BDAE4D8](a1, a2, *(_QWORD *)&a3);
}

uint64_t ftell(FILE *a1)
{
  return MEMORY[0x24BDAE530](a1);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x24BDAE590](__ptr, __size, __nitems, __stream);
}

float hypotf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAE840](a1, a2);
  return result;
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x24BDAEAA8](__x);
  return result;
}

float log2f(float a1)
{
  float result;

  MEMORY[0x24BDAEAE0](a1);
  return result;
}

uint64_t mach_absolute_time(void)
{
  return MEMORY[0x24BDAEB30]();
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x24BDAED70](count, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE70](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x24BDAEE78](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x24BDAEE80](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x24BDAEE98](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x24BDAEEA8](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x24BDAEEB0](__b, __pattern16, __len);
}

uint32_t notify_cancel(int token)
{
  return MEMORY[0x24BDAF138](*(_QWORD *)&token);
}

uint32_t notify_register_dispatch(const char *name, int *out_token, dispatch_queue_t queue, notify_handler_t handler)
{
  return MEMORY[0x24BDAF170](name, out_token, queue, handler);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x24BEDCF68](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x24BEDCF88]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDCFD0](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x24BEDCFE8]();
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x24BEDD088](name);
}

void objc_release(id a1)
{
  MEMORY[0x24BEDD188](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x24BEDD2A0](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x24BEDD2A8](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x24BEDD2B0](a1);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x24BDAF368](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x24BDAF398](oslog, type);
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF460](lock);
}

BOOL os_unfair_lock_trylock(os_unfair_lock_t lock)
{
  return MEMORY[0x24BDAF478](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x24BDAF488](lock);
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x24BDAF688](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x24BDAF690](a1, a2);
  return result;
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x24BDAF978]();
}

long double sin(long double __x)
{
  long double result;

  MEMORY[0x24BDAFE18](__x);
  return result;
}

float sinf(float a1)
{
  float result;

  MEMORY[0x24BDAFE20](a1);
  return result;
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x24BDAFE40](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x24BDAFEA0](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x24BDAFEA8](a1, a2);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x24BDAFF40](__s);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x24BDB0100](a1, a2, a3, a4, a5);
}

void vDSP_DFT_DestroySetup(vDSP_DFT_Setup __Setup)
{
  MEMORY[0x24BDB3110](__Setup);
}

void vDSP_DFT_Execute(const vDSP_DFT_SetupStruct *__Setup, const float *__Ir, const float *__Ii, float *__Or, float *__Oi)
{
  MEMORY[0x24BDB3118](__Setup, __Ir, __Ii, __Or, __Oi);
}

vDSP_DFT_Setup vDSP_DFT_zrop_CreateSetup(vDSP_DFT_Setup __Previous, vDSP_Length __Length, vDSP_DFT_Direction __Direction)
{
  return (vDSP_DFT_Setup)MEMORY[0x24BDB3128](__Previous, __Length, *(_QWORD *)&__Direction);
}

void vDSP_conv(const float *__A, vDSP_Stride __IA, const float *__F, vDSP_Stride __IF, float *__C, vDSP_Stride __IC, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB3198](__A, __IA, __F, __IF, __C, __IC, __N, __P);
}

void vDSP_ctoz(const DSPComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__Z, vDSP_Stride __IZ, vDSP_Length __N)
{
  MEMORY[0x24BDB31A8](__C, __IC, __Z, __IZ, __N);
}

void vDSP_distancesq(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB31C8](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_dotpr(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB31D0](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_dotprD(const double *__A, vDSP_Stride __IA, const double *__B, vDSP_Stride __IB, double *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB31D8](__A, __IA, __B, __IB, __C, __N);
}

void vDSP_maxmgv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3210](__A, __IA, __C, __N);
}

void vDSP_maxv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3220](__A, __IA, __C, __N);
}

void vDSP_meanv(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3248](__A, __IA, __C, __N);
}

void vDSP_meanvD(const double *__A, vDSP_Stride __IA, double *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB3250](__A, __IA, __C, __N);
}

void vDSP_mmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB3288](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_mtrans(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N)
{
  MEMORY[0x24BDB3298](__A, __IA, __C, __IC, __M, __N);
}

void vDSP_svdiv(const float *__A, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB32C8](__A, __B, __IB, __C, __IC, __N);
}

void vDSP_sve(const float *__A, vDSP_Stride __I, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB32D0](__A, __I, __C, __N);
}

void vDSP_svesq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Length __N)
{
  MEMORY[0x24BDB32F0](__A, __IA, __C, __N);
}

void vDSP_vadd(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3308](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vclip(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x24BDB3328](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vclr(float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3330](__C, __IC, __N);
}

void vDSP_vclrD(double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3338](__C, __IC, __N);
}

void vDSP_vfill(const float *__A, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3368](__A, __C, __IC, __N);
}

void vDSP_vfix16(const float *__A, vDSP_Stride __IA, __int16 *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3378](__A, __IA, __C, __IC, __N);
}

void vDSP_vflt16(const __int16 *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3398](__A, __IA, __C, __IC, __N);
}

void vDSP_vmma(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, const float *__C, vDSP_Stride __IC, const float *__D, vDSP_Stride __ID, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
  MEMORY[0x24BDB3420](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_vmul(const float *__A, vDSP_Stride __IA, const float *__B, vDSP_Stride __IB, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3430](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_vramp(const float *__A, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3458](__A, __B, __C, __IC, __N);
}

void vDSP_vrampmul(const float *__I, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O, vDSP_Stride __OS, vDSP_Length __N)
{
  MEMORY[0x24BDB3468](__I, __IS, __Start, __Step, __O, __OS, __N);
}

void vDSP_vrampmuladd(const float *__I, vDSP_Stride __IS, float *__Start, const float *__Step, float *__O, vDSP_Stride __OS, vDSP_Length __N)
{
  MEMORY[0x24BDB3478](__I, __IS, __Start, __Step, __O, __OS, __N);
}

void vDSP_vsadd(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3498](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsaddD(const double *__A, vDSP_Stride __IA, const double *__B, double *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34A0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x24BDB34D8](__A, __IA, __B, __C, __IC, __D, __ID, __N);
}

void vDSP_vsmsa(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, float *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x24BDB34E0](__A, __IA, __B, __C, __D, __ID, __N);
}

void vDSP_vsmsma(const float *__A, vDSP_Stride __IA, const float *__B, const float *__C, vDSP_Stride __IC, const float *__D, float *__E, vDSP_Stride __IE, vDSP_Length __N)
{
  MEMORY[0x24BDB34E8](__A, __IA, __B, __C, __IC, __D, __E, __IE);
}

void vDSP_vsmul(const float *__A, vDSP_Stride __IA, const float *__B, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB34F0](__A, __IA, __B, __C, __IC, __N);
}

void vDSP_vsorti(const float *__C, vDSP_Length *__I, vDSP_Length *__Temporary, vDSP_Length __N, int __Order)
{
  MEMORY[0x24BDB3510](__C, __I, __Temporary, __N, *(_QWORD *)&__Order);
}

void vDSP_vsq(const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3528](__A, __IA, __C, __IC, __N);
}

void vDSP_vsub(const float *__B, vDSP_Stride __IB, const float *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3530](__B, __IB, __A, __IA, __C, __IC, __N);
}

void vDSP_zmmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __M, vDSP_Length __N, vDSP_Length __P)
{
  MEMORY[0x24BDB3570](__A, __IA, __B, __IB, __C, __IC, __M, __N);
}

void vDSP_ztoc(const DSPSplitComplex *__Z, vDSP_Stride __IZ, DSPComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB3598](__Z, __IZ, __C, __IC, __N);
}

void vDSP_zvadd(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB35A8](__A, __IA, __B, __IB, __C, __IC, __N);
}

void vDSP_zvma(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__D, vDSP_Stride __ID, vDSP_Length __N)
{
  MEMORY[0x24BDB35B8](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_zvmags(const DSPSplitComplex *__A, vDSP_Stride __IA, float *__C, vDSP_Stride __IC, vDSP_Length __N)
{
  MEMORY[0x24BDB35C0](__A, __IA, __C, __IC, __N);
}

void vDSP_zvmmaa(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, const DSPSplitComplex *__D, vDSP_Stride __ID, const DSPSplitComplex *__E, vDSP_Stride __IE, const DSPSplitComplex *__F, vDSP_Stride __IF, vDSP_Length __N)
{
  MEMORY[0x24BDB35C8](__A, __IA, __B, __IB, __C, __IC, __D, __ID);
}

void vDSP_zvmul(const DSPSplitComplex *__A, vDSP_Stride __IA, const DSPSplitComplex *__B, vDSP_Stride __IB, const DSPSplitComplex *__C, vDSP_Stride __IC, vDSP_Length __N, int __Conjugate)
{
  MEMORY[0x24BDB35D0](__A, __IA, __B, __IB, __C, __IC, __N, *(_QWORD *)&__Conjugate);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x24BDB0448](__str, __size, __format, a4);
}

void vvexpf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B30](a1, a2, a3);
}

void vvlogf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B58](a1, a2, a3);
}

void vvsincosf(float *a1, float *a2, const float *a3, const int *a4)
{
  MEMORY[0x24BDB3B78](a1, a2, a3, a4);
}

void vvsqrtf(float *a1, const float *a2, const int *a3)
{
  MEMORY[0x24BDB3B90](a1, a2, a3);
}

__int32 *__cdecl wmemchr(__int32 *__s, __int32 __c, size_t __n)
{
  return (__int32 *)MEMORY[0x24BDB0518](__s, *(_QWORD *)&__c, __n);
}

