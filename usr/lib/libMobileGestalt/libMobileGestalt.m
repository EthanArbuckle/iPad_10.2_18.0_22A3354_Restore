uint64_t sub_19B6B2900()
{
  unsigned int v0;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char v9;

  v0 = sub_19B6B9C44() - 1;
  if (v0 < 0xC)
    return (uint64_t)*(&off_1E3BD0F40 + (int)v0);
  v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2)
    v8 = v2 + 1;
  else
    v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v8, 2262, (uint64_t)CFSTR("Unknown DeviceClass"), v3, v4, v5, v6, v7, v9);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
    sub_19B70EE4C();
  return 0;
}

float sub_19B6B2984()
{
  const __CFData *v0;
  const __CFData *v1;
  unsigned int *BytePtr;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  float v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  char *v20;
  char Length;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  char v35;
  char v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  uint8_t buf[4];
  CFIndex v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFData *)sub_19B6B2C64("IODeviceTree:/product", CFSTR("display-corner-radius"), 0);
  v1 = v0;
  if (v0)
  {
    if (CFDataGetLength(v0) == 8)
    {
      BytePtr = (unsigned int *)CFDataGetBytePtr(v1);
      v10 = BytePtr[1];
      if (v10)
        v11 = (float)*BytePtr / (float)v10;
      else
        v11 = 0.0;
    }
    else
    {
      v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v20)
        v19 = v20 + 1;
      Length = CFDataGetLength(v1);
      _MGLog((uint64_t)v19, 7944, (uint64_t)CFSTR("Property copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius) had an unexpected size of %zu instead of %zu."), v22, v23, v24, v25, v26, Length);
      v11 = 0.0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134218240;
        v42 = CFDataGetLength(v1);
        v43 = 2048;
        v44 = 8;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Property copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius) had an unexpected size of %zu instead of %zu.", buf, 0x16u);
      }
    }
    if ((int)v11)
      goto LABEL_24;
  }
  else
  {
    v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v12)
      v18 = v12 + 1;
    else
      v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v18, 7935, (uint64_t)CFSTR("Failed to copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius)"), v13, v14, v15, v16, v17, v35);
    v11 = 0.0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to copyDeviceTreeProperty(IODeviceTree:/product display-corner-radius)", buf, 2u);
    }
  }
  v40 = -337121064;
  v39 = xmmword_19B717B00;
  v38 = 450980336;
  v37 = xmmword_19B717B14;
  if (MGIsDeviceOneOfType((const UInt8 *)&v39, v3, v4, v5, v6, v7, v8, v9, (uint64_t)&v37))
  {
    v27 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v27)
      v33 = v27 + 1;
    else
      v33 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v33, 7958, (uint64_t)CFSTR("DeviceCornerRadius fallback to legacy fixed value."), v28, v29, v30, v31, v32, v36);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "DeviceCornerRadius fallback to legacy fixed value.", buf, 2u);
    }
    v11 = 39.0;
  }
  if (v1)
LABEL_24:
    CFRelease(v1);
  return v11;
}

const void *sub_19B6B2C64(char *a1, const __CFString *a2, int a3)
{
  CFTypeRef v3;
  const void *v4;
  CFTypeID v5;

  v3 = sub_19B6BC3DC(a1, a2, a3);
  v4 = v3;
  if (v3)
  {
    v5 = CFGetTypeID(v3);
    if (v5 != CFDataGetTypeID())
    {
      CFRelease(v4);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_19B6B2CB0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)objc_opt_new();
  if (objc_msgSend(v4, "createTreeIterator:", "IODeviceTree"))
    v5 = objc_msgSend(v4, "deviceTreeNodeIsPresent:withExactName:withNodeClass:", a1, 1, a2);
  else
    v5 = 0;

  return v5;
}

os_log_t sub_19B6B2D20()
{
  os_log_t result;

  result = os_log_create("com.apple.MobileGestalt", "fast-path");
  qword_1ECD35BA0 = (uint64_t)result;
  return result;
}

uint64_t sub_19B6B2D4C()
{
  uint64_t v0;
  const void *v1;
  const void *v2;

  v0 = *MEMORY[0x1E0C9AE40];
  v1 = (const void *)sub_19B6B2900();
  if (v1)
  {
    v2 = v1;
    if (!CFEqual(v1, CFSTR("Watch")) && sub_19B6B61A0((_BOOL8)CFSTR("H4")))
      v0 = *MEMORY[0x1E0C9AE50];
    CFRelease(v2);
  }
  return v0;
}

uint64_t sub_19B6B2DB8()
{
  if (qword_1ECD35B88 != -1)
    dispatch_once(&qword_1ECD35B88, &unk_1E3BD0700);
  return qword_1ECD35B90;
}

CFNumberRef sub_19B6B2DF8()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  int valuePtr;

  valuePtr = 0;
  v0 = sub_19B6BC5F4("IODeviceTree:/buttons", CFSTR("home-button-type"), 0);
  if (v0)
  {
    v1 = v0;
    if (!CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr))
      valuePtr = 0;
    CFRelease(v1);
  }
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
}

BOOL sub_19B6B2E70()
{
  CFStringRef v0;
  CFStringRef v1;
  _BOOL8 v2;

  v0 = sub_19B6BC808();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFEqual(v0, CFSTR("P3")) != 0;
  CFRelease(v1);
  return v2;
}

uint64_t sub_19B6B2EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v5;
  io_object_t v6;
  uint64_t v7;

  v5 = (void *)objc_opt_new();
  if (objc_msgSend(v5, "createTreeIterator:", "IODeviceTree")
    && (v6 = objc_msgSend(v5, "copyDeviceTreeStructureNext:withFirstChar:", a2, a3)) != 0)
  {
    IOObjectRelease(v6);
    v7 = 1;
  }
  else
  {
    v7 = 0;
  }

  return v7;
}

BOOL sub_19B6B2F30(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFIndex Count;
  _BOOL8 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFDictionary *)sub_19B6B2CB0(a1, a2);
  if (!v3)
    return 0;
  v4 = v3;
  Count = CFDictionaryGetCount(v3);
  v6 = Count > 0;
  if (Count >= 1)
  {
    v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
    if (v7)
      v13 = v7 + 1;
    else
      v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    _MGLog((uint64_t)v13, 631, (uint64_t)CFSTR("Node %@ found"), v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = a1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Node %@ found", buf, 0xCu);
    }
  }
  CFRelease(v4);
  return v6;
}

BOOL sub_19B6B3038(_BOOL8 a1, int a2)
{
  _BOOL8 v2;
  const __CFString *v4;
  const __CFString *v5;
  CFTypeID v6;

  v2 = a1;
  if (a1)
  {
    v4 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("5pYKlGnYYBzGvAlIU8RjEQ"));
    if (v4)
    {
      v5 = v4;
      v6 = CFGetTypeID(v4);
      if (v6 == CFStringGetTypeID())
      {
        if (a2)
          v2 = sub_19B6B7E54(v5, (const void *)v2, a2);
        else
          v2 = CFEqual((CFTypeRef)v2, v5) != 0;
      }
      else
      {
        v2 = 0;
      }
      CFRelease(v5);
    }
    else
    {
      return 0;
    }
  }
  return v2;
}

CFTypeRef sub_19B6B3194()
{
  const __CFString *v0;
  const __CFString *v1;
  const __CFArray *ArrayBySeparatingStrings;
  const __CFArray *v3;
  const void *ValueAtIndex;
  CFTypeRef v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t v14[16];

  v0 = (const __CFString *)sub_19B6B89E4((const char **)CFSTR("zHeENZu+wbg7PUprwNwBWg"), 0);
  if (v0)
  {
    v1 = v0;
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v0, CFSTR("/"));
    if (ArrayBySeparatingStrings)
    {
      v3 = ArrayBySeparatingStrings;
      if (CFArrayGetCount(ArrayBySeparatingStrings) < 2)
      {
        v5 = 0;
      }
      else
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v3, 0);
        v5 = CFRetain(ValueAtIndex);
      }
      CFRelease(v3);
    }
    else
    {
      v5 = 0;
    }
    CFRelease(v1);
  }
  else
  {
    v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v6)
      v12 = v6 + 1;
    else
      v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v12, 2115, (uint64_t)CFSTR("Could not retrieve region info"), v7, v8, v9, v10, v11, v14[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v14 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not retrieve region info", v14, 2u);
    }
    return 0;
  }
  return v5;
}

CFNumberRef sub_19B6B32B0()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  const __CFData *v3;
  const __CFData *v4;
  const UInt8 *BytePtr;
  CFNumberRef v6;

  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceMatching("IOPlatformExpertDevice");
  MatchingService = IOServiceGetMatchingService(v0, v1);
  if (!MatchingService)
    return 0;
  v3 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", CFSTR("ane-type"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1u);
  if (!v3)
    return 0;
  v4 = v3;
  BytePtr = CFDataGetBytePtr(v3);
  v6 = CFNumberCreate(0, kCFNumberSInt32Type, BytePtr);
  CFRelease(v4);
  return v6;
}

BOOL sub_19B6B3348(const __CFString *a1)
{
  __CFDictionary *v2;
  const __CFString *Value;
  const __CFString *v4;
  const __CFString *v5;
  _BOOL8 v6;
  const __CFArray *ArrayBySeparatingStrings;
  CFRange v9;

  v2 = sub_19B6BBE50();
  Value = (const __CFString *)CFDictionaryGetValue(v2, CFSTR("GraphicsFeatureSetClass"));
  v4 = (const __CFString *)CFDictionaryGetValue(v2, CFSTR("GraphicsFeatureSetFallbacks"));
  if (!a1 || !Value)
    goto LABEL_7;
  v5 = v4;
  v6 = 1;
  if (CFStringCompare(Value, a1, 1uLL) == kCFCompareEqualTo)
    goto LABEL_8;
  if (v5)
  {
    ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v5, CFSTR(":"));
    v9.length = CFArrayGetCount(ArrayBySeparatingStrings);
    v9.location = 0;
    v6 = CFArrayContainsValue(ArrayBySeparatingStrings, v9, a1) != 0;
    if (ArrayBySeparatingStrings)
      CFRelease(ArrayBySeparatingStrings);
  }
  else
  {
LABEL_7:
    v6 = 0;
  }
LABEL_8:
  if (v2)
    CFRelease(v2);
  return v6;
}

const void *sub_19B6B3428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  __int128 v71;
  int v72;
  __int128 v73;
  int v74;
  __int128 v75;
  int v76;
  __int128 v77;
  int v78;
  __int128 v79;
  int v80;
  __int128 v81;
  int v82;
  __int128 v83;
  int v84;
  __int128 v85;
  int v86;
  __int128 v87;
  int v88;
  __int128 v89;
  int v90;
  __int128 v91;
  int v92;
  __int128 v93;
  int v94;
  __int128 v95;
  int v96;
  __int128 v97;
  int v98;
  __int128 v99;
  int v100;
  __int128 v101;
  int v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 6)
    return (const void *)*MEMORY[0x1E0C9AE40];
  if (sub_19B6B9C44() == 2)
    return (const void *)*MEMORY[0x1E0C9AE40];
  if (sub_19B6B9C44() == 7)
    return (const void *)*MEMORY[0x1E0C9AE40];
  v102 = 1789837692;
  v101 = xmmword_19B7180A0;
  v100 = -1239654590;
  v99 = xmmword_19B7180B4;
  v98 = -1579092758;
  v97 = xmmword_19B7180C8;
  v96 = 48355600;
  v95 = xmmword_19B7180DC;
  v94 = -679691073;
  v93 = xmmword_19B7180F0;
  v92 = 1430379884;
  v91 = xmmword_19B718104;
  if (MGIsDeviceOneOfType((const UInt8 *)&v101, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v99))
    return (const void *)*MEMORY[0x1E0C9AE40];
  v90 = -121925081;
  v89 = xmmword_19B718118;
  if (MGIsDeviceOneOfType((const UInt8 *)&v89, v7, v8, v9, v10, v11, v12, v13, 0))
    return (const void *)*MEMORY[0x1E0C9AE40];
  v88 = 414393924;
  v87 = xmmword_19B71812C;
  v86 = 897736383;
  v85 = xmmword_19B718140;
  v84 = -996295886;
  v83 = xmmword_19B718154;
  v82 = -453987047;
  v81 = xmmword_19B718168;
  if (MGIsDeviceOneOfType((const UInt8 *)&v87, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v85))
    return (const void *)*MEMORY[0x1E0C9AE40];
  v80 = 1602014129;
  v79 = xmmword_19B71817C;
  v78 = -810116762;
  v77 = xmmword_19B718190;
  v76 = -1195351767;
  v75 = xmmword_19B7181A4;
  v74 = -199226823;
  v73 = xmmword_19B7181B8;
  v72 = 1412427398;
  v71 = xmmword_19B7181CC;
  v70 = -1283070668;
  v69 = xmmword_19B7181E0;
  v68 = 160260070;
  v67 = xmmword_19B7181F4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v79, v21, v22, v23, v24, v25, v26, v27, (uint64_t)&v77))
    return (const void *)*MEMORY[0x1E0C9AE40];
  v66 = 28030256;
  v65 = xmmword_19B718208;
  v64 = 1214363620;
  v63 = xmmword_19B71821C;
  v62 = -798153473;
  v61 = xmmword_19B718230;
  v60 = -776721724;
  v59 = xmmword_19B718244;
  v58 = -1403227947;
  v57 = xmmword_19B718258;
  v56 = 729118884;
  v55 = xmmword_19B71826C;
  v54 = 1046806126;
  v53 = xmmword_19B718280;
  v52 = -188760945;
  v51 = xmmword_19B718294;
  v50 = -489993439;
  v49 = xmmword_19B7182A8;
  v48 = 886875686;
  v47 = xmmword_19B7182BC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v65, v28, v29, v30, v31, v32, v33, v34, (uint64_t)&v63))
    return (const void *)*MEMORY[0x1E0C9AE40];
  v46 = -350584140;
  v45 = xmmword_19B7182D0;
  v44 = -1418383976;
  v43 = xmmword_19B7182E4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v45, v35, v36, v37, v38, v39, v40, v41, (uint64_t)&v43))
    return (const void *)*MEMORY[0x1E0C9AE40];
  else
    return sub_19B6B89E4((const char **)CFSTR("pFpC81KCZegLf4FenQZ2OA"), 0);
}

uint64_t MobileGestalt_get_deviceClassNumber(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("mtrAoWJ3gsq+I90ZnQ0vQw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710054(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

float MobileGestalt_get_mainScreenScale(void *a1)
{
  id v1;
  const void *v2;
  const void *v3;
  CFTypeID v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  v1 = a1;
  valuePtr = -1082130432;
  v2 = MGCopyAnswer((const char **)CFSTR("SNfDJgQFV2Xj7+WnozcJPw"));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B7115C4(v5, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  v6 = -1.0;
LABEL_11:

  return v6;
}

const char **_MGServerQuestionIsPlatform(const char **a1)
{
  const char **result;

  result = sub_19B6B8DD8(a1, 1);
  if (result)
    return (const char **)(((_BYTE)result[19] & 0x20) == 0);
  return result;
}

char *sub_19B6B3B24(const char *a1)
{
  size_t v3;
  uint8_t buf[4];
  const char *v5;
  char __s1[16];
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  *(_OWORD *)__s1 = 0u;
  v7 = 0u;
  v3 = 128;
  if (sysctlbyname(a1, __s1, &v3, 0, 0) != -1)
    return strdup(__s1);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v5 = a1;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not lookup %s", buf, 0xCu);
  }
  return 0;
}

CFDataRef sub_19B6B3C08()
{
  const __CFData *v0;
  CFDataRef v1;
  const __CFNumber *v2;
  const __CFString *v3;
  int v4;
  unsigned int v5;
  const __CFNumber *v6;
  CFStringRef v7;
  const __CFString *v8;
  const __CFNumber *v9;
  const __CFNumber *v10;
  const __CFString *v11;
  CFDataRef ExternalRepresentation;
  const __CFString *v13;
  const __CFString *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  const void *v22;
  const void *v23;
  const void *v24;
  const void *v25;
  const void *v26;
  const __CFString *v27;
  CFIndex Length;
  CFIndex v29;
  char *v30;
  char *v31;
  CC_LONG v32;
  CFDataRef v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  NSObject *v69;
  const char *v70;
  uint32_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  const char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  const char *v85;
  NSObject *v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  const char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  const char *v116;
  NSObject *v117;
  const char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  NSObject *v126;
  const char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  const char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  const char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  const char *v148;
  char v149;
  char v150;
  uint64_t valuePtr;
  uint64_t v152;
  uint8_t buf[4];
  unsigned int v154;
  unsigned __int8 md[8];
  uint64_t v156;
  int v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)md = 0;
  v156 = 0;
  v157 = 0;
  valuePtr = 0;
  v152 = 0;
  if (sub_19B6B5FA0())
  {
    v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("sjGZBQzow3yV/IOa0wCeoQ"), 0);
    if (v0)
    {
      v1 = v0;
      v2 = 0;
      v3 = 0;
LABEL_38:
      v31 = 0;
      v10 = 0;
      v14 = &stru_1E3BD78C0;
      v8 = &stru_1E3BD78C0;
      goto LABEL_129;
    }
  }
  v4 = sub_19B6BC9C4();
  if (v4 <= 0)
  {
    if (MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg")))
    {
      v13 = (const __CFString *)sub_19B6B89E4((const char **)CFSTR("QZgogo2DypSAZfkRW4dP/A"), 0);
      if (!v13)
      {
        v72 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v72)
          v78 = v72 + 1;
        else
          v78 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v78, 3319, (uint64_t)CFSTR("Could not get IMEI"), v73, v74, v75, v76, v77, v149);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not get IMEI", buf, 2u);
        }
        v10 = 0;
        v31 = 0;
        v1 = 0;
        v3 = 0;
        v2 = 0;
        v8 = &stru_1E3BD78C0;
        goto LABEL_87;
      }
      v14 = v13;
      v2 = 0;
      v8 = &stru_1E3BD78C0;
    }
    else
    {
      v2 = 0;
      v8 = &stru_1E3BD78C0;
      v14 = &stru_1E3BD78C0;
    }
    goto LABEL_24;
  }
  v5 = v4;
  v6 = (const __CFNumber *)sub_19B6B89E4((const char **)CFSTR("TF31PAB6aO8KAbPyNKSxKA"), 0);
  if (!v6)
  {
    v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v15)
      v21 = v15 + 1;
    else
      v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v21, 3327, (uint64_t)CFSTR("Could not get unique chip ID"), v16, v17, v18, v19, v20, v149);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not get unique chip ID", buf, 2u);
    }
    v2 = 0;
    goto LABEL_37;
  }
  v2 = v6;
  if (!CFNumberGetValue(v6, kCFNumberSInt64Type, &valuePtr))
  {
    v34 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v34)
      v40 = v34 + 1;
    else
      v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v40, 3331, (uint64_t)CFSTR("Could not extract ECID as integer"), v35, v36, v37, v38, v39, v149);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not extract ECID as integer", buf, 2u);
    }
LABEL_37:
    v3 = 0;
    v1 = 0;
    goto LABEL_38;
  }
  v149 = valuePtr;
  v7 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%qi"));
  if (!v7)
  {
    v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v48)
      v54 = v48 + 1;
    else
      v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v54, 3337, (uint64_t)CFSTR("CFStringCreateWithFormat failed"), v49, v50, v51, v52, v53, v149);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CFStringCreateWithFormat failed", buf, 2u);
    }
    v8 = 0;
    goto LABEL_103;
  }
  v8 = v7;
  if (v5 == 2)
  {
    v9 = (const __CFNumber *)sub_19B6B89E4((const char **)CFSTR("566JrJVMlDfnslGpwUzNlQ"), 0);
    if (v9)
    {
      v10 = v9;
      if (CFNumberGetValue(v9, kCFNumberSInt64Type, &v152))
      {
        v150 = v152;
        v11 = CFStringCreateWithFormat(0, 0, CFSTR("%08llX-%016llX"));
        if (v11)
        {
          v3 = v11;
          ExternalRepresentation = CFStringCreateExternalRepresentation(0, v11, 0x8000100u, 0xFFu);
          if (ExternalRepresentation)
          {
            v1 = ExternalRepresentation;
LABEL_127:
            v31 = 0;
            goto LABEL_128;
          }
          v142 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v142)
            v148 = v142 + 1;
          else
            v148 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          _MGLog((uint64_t)v148, 3423, (uint64_t)CFSTR("CFStringCreateExternalRepresentation failed"), v143, v144, v145, v146, v147, v150);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CFStringCreateExternalRepresentation failed", buf, 2u);
          }
LABEL_126:
          v1 = 0;
          goto LABEL_127;
        }
        v128 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v128)
          v134 = v128 + 1;
        else
          v134 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v134, 3418, (uint64_t)CFSTR("Could not create CFString"), v129, v130, v131, v132, v133, v150);
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
LABEL_125:
          v3 = 0;
          goto LABEL_126;
        }
        *(_WORD *)buf = 0;
        v117 = MEMORY[0x1E0C81028];
        v118 = "Could not create CFString";
      }
      else
      {
        v110 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v110)
          v116 = v110 + 1;
        else
          v116 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v116, 3348, (uint64_t)CFSTR("Could not extract ECID as integer"), v111, v112, v113, v114, v115, v149);
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_125;
        *(_WORD *)buf = 0;
        v117 = MEMORY[0x1E0C81028];
        v118 = "Could not extract ECID as integer";
      }
      _os_log_impl(&dword_19B6B1000, v117, OS_LOG_TYPE_DEFAULT, v118, buf, 2u);
      goto LABEL_125;
    }
    v96 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v96)
      v102 = v96 + 1;
    else
      v102 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v102, 3344, (uint64_t)CFSTR("Could not get ChipID"), v97, v98, v99, v100, v101, v149);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
LABEL_103:
      v3 = 0;
      v1 = 0;
      v31 = 0;
      v10 = 0;
LABEL_128:
      v14 = &stru_1E3BD78C0;
      goto LABEL_129;
    }
    *(_WORD *)buf = 0;
    v69 = MEMORY[0x1E0C81028];
    v70 = "Could not get ChipID";
    v71 = 2;
LABEL_102:
    _os_log_impl(&dword_19B6B1000, v69, OS_LOG_TYPE_DEFAULT, v70, buf, v71);
    goto LABEL_103;
  }
  if (v5 >= 3)
  {
    v62 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v62)
      v68 = v62 + 1;
    else
      v68 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v68, 3352, (uint64_t)CFSTR("Unsupported UDID version %d"), v63, v64, v65, v66, v67, v5);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_103;
    *(_DWORD *)buf = 67109120;
    v154 = v5;
    v69 = MEMORY[0x1E0C81028];
    v70 = "Unsupported UDID version %d";
    v71 = 8;
    goto LABEL_102;
  }
  v14 = &stru_1E3BD78C0;
LABEL_24:
  v22 = sub_19B6B89E4((const char **)CFSTR("VasUgeSzVyHdB27g2XpN0g"), 0);
  if (!v22)
  {
    v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v41)
      v47 = v41 + 1;
    else
      v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v47, 3361, (uint64_t)CFSTR("Could not get serial number"), v42, v43, v44, v45, v46, v149);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not get serial number", buf, 2u);
    }
    goto LABEL_56;
  }
  v23 = v22;
  v24 = sub_19B6B89E4((const char **)CFSTR("gI6iODv8MZuiP0IA+efJCw"), 0);
  if (!v24)
  {
    v55 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v55)
      v61 = v55 + 1;
    else
      v61 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v61, 3370, (uint64_t)CFSTR("Could not get wifi address"), v56, v57, v58, v59, v60, v149);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not get wifi address", buf, 2u);
    }
    CFRelease(v23);
LABEL_56:
    v31 = 0;
    v1 = 0;
    v3 = 0;
    goto LABEL_85;
  }
  v25 = v24;
  v26 = sub_19B6B89E4((const char **)CFSTR("k5lVWbXuiZHLA17KGiVUAA"), 0);
  if (!v26)
  {
    v79 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v79)
      v85 = v79 + 1;
    else
      v85 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v85, 3380, (uint64_t)CFSTR("Could not get bluetooth address"), v80, v81, v82, v83, v84, v149);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_81;
    *(_WORD *)buf = 0;
    v86 = MEMORY[0x1E0C81028];
    v87 = "Could not get bluetooth address";
    goto LABEL_80;
  }
  v27 = CFStringCreateWithFormat(0, 0, CFSTR("%@%@%@%@%@"));
  if (!v27)
  {
    v88 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v88)
      v94 = v88 + 1;
    else
      v94 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v94, 3393, (uint64_t)CFSTR("Could not create a mutable CFString"), v89, v90, v91, v92, v93, (char)v23);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_81;
    *(_WORD *)buf = 0;
    v86 = MEMORY[0x1E0C81028];
    v87 = "Could not create a mutable CFString";
LABEL_80:
    _os_log_impl(&dword_19B6B1000, v86, OS_LOG_TYPE_DEFAULT, v87, buf, 2u);
LABEL_81:
    v3 = 0;
LABEL_82:
    v1 = 0;
    v31 = 0;
    goto LABEL_83;
  }
  v3 = v27;
  Length = CFStringGetLength(v27);
  v29 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v30 = (char *)malloc_type_calloc(1uLL, v29, 0x943B7466uLL);
  if (!v30)
  {
    v103 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v103)
      v109 = v103 + 1;
    else
      v109 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v109, 3400, (uint64_t)CFSTR("calloc failed"), v104, v105, v106, v107, v108, (char)v23);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "calloc failed", buf, 2u);
    }
    goto LABEL_82;
  }
  v31 = v30;
  if (CFStringGetCString(v3, v30, v29, 0x8000100u))
  {
    v32 = strlen(v31);
    CC_SHA1(v31, v32, md);
    v33 = CFDataCreate(0, md, 20);
    if (v33)
    {
      v1 = v33;
      goto LABEL_83;
    }
    v135 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v135)
      v141 = v135 + 1;
    else
      v141 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v141, 3411, (uint64_t)CFSTR("CFDataCreate failed"), v136, v137, v138, v139, v140, (char)v23);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_137;
    *(_WORD *)buf = 0;
    v126 = MEMORY[0x1E0C81028];
    v127 = "CFDataCreate failed";
  }
  else
  {
    v119 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v119)
      v125 = v119 + 1;
    else
      v125 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v125, 3404, (uint64_t)CFSTR("couldn't extract string to hash"), v120, v121, v122, v123, v124, (char)v23);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_137;
    *(_WORD *)buf = 0;
    v126 = MEMORY[0x1E0C81028];
    v127 = "couldn't extract string to hash";
  }
  _os_log_impl(&dword_19B6B1000, v126, OS_LOG_TYPE_DEFAULT, v127, buf, 2u);
LABEL_137:
  v1 = 0;
LABEL_83:
  CFRelease(v23);
  CFRelease(v25);
  if (v26)
    CFRelease(v26);
LABEL_85:
  v10 = 0;
  if (!v14)
  {
    if (!v8)
      goto LABEL_88;
    goto LABEL_87;
  }
LABEL_129:
  CFRelease(v14);
  if (v8)
LABEL_87:
    CFRelease(v8);
LABEL_88:
  if (v2)
    CFRelease(v2);
  if (v3)
    CFRelease(v3);
  if (v10)
    CFRelease(v10);
  if (v31)
    free(v31);
  return v1;
}

void sub_19B6B46A4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  void *v7;
  void (*v8)(void *, uint64_t (*)(int), pthread_mutex_t *);
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t v17[16];
  uint8_t buf[16];

  if (getenv("DISABLE_GESTALT_DLOPEN"))
  {
    v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v0)
      v6 = v0 + 1;
    else
      v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v6, 202, (uint64_t)CFSTR("disabling external functions"), v1, v2, v3, v4, v5, v17[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "disabling external functions", buf, 2u);
    }
  }
  else
  {
    v7 = dlopen("/usr/lib/libMobileGestaltExtensions.dylib", 1);
    if (v7)
    {
      v8 = (void (*)(void *, uint64_t (*)(int), pthread_mutex_t *))dlsym(v7, "_MGSSetLazyFuncs");
      if (v8)
      {
        v8(off_1EE3FD5A0, sub_19B6B9160, &stru_1ECD35B08);
        v9 = &byte_1ECD35BB0;
        goto LABEL_17;
      }
    }
  }
  if ((byte_1ECD35BB0 & 1) != 0)
    return;
  v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v10)
    v16 = v10 + 1;
  else
    v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v16, 215, (uint64_t)CFSTR("couldn't load support library"), v11, v12, v13, v14, v15, v17[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "couldn't load support library", v17, 2u);
  }
  v9 = &byte_1EE3FD870;
LABEL_17:
  *v9 = 1;
}

uint64_t MGGetProductType()
{
  if (qword_1ECD35B80 != -1)
    dispatch_once(&qword_1ECD35B80, &unk_1E3BCFF78);
  if (dword_1ECD35AFC == -1)
    return -1;
  else
    return qword_19B713910[4 * dword_1ECD35AFC + 3];
}

OS_MobileGestalt *MobileGestalt_get_current_device()
{
  return objc_alloc_init(OS_MobileGestalt);
}

void sub_19B6B4900()
{
  const char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const __CFAllocator *v9;
  __CFDictionary *Mutable;
  int v11;
  const void **v12;
  FILE *v13;
  const __CFString *v14;
  const __CFData *v15;
  const void **v16;
  const __CFData *v17;
  CFTypeID v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  const __CFString *v27;
  int v28;
  int v29;
  unsigned int v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  NSObject *v38;
  const char *v39;
  uint32_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  CFDataRef v48;
  __CFString **v49;
  uint64_t v50;
  FILE *v52;
  char *v53;
  const char *v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int *v61;
  char *v62;
  int v63;
  char *v64;
  int *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int *v72;
  char *v73;
  NSObject *v74;
  const char *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  _BOOL4 v83;
  char v84;
  int v85;
  stat v86;
  _BYTE buf[24];
  void *v88;
  __CFDictionary *v89;
  int v90;
  _BYTE v91[1024];
  _BYTE __dst[1024];
  char buffer[16];
  __int128 v94;
  __int128 v95;
  __int16 v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v96 = 0;
  v95 = 0u;
  v94 = 0u;
  *(_OWORD *)buffer = 0u;
  memcpy(__dst, "/Library/RegionFeatures/RegionFeatures_", sizeof(__dst));
  memcpy(v91, "/System/Library/RegionFeatures/RegionFeatures_", sizeof(v91));
  memset(&v86, 0, sizeof(v86));
  v0 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
  if (stat("/Library/RegionFeatures", &v86) || (v86.st_mode & 0xF000) != 0x4000)
  {
    v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
    if (v2)
      v8 = v2 + 1;
    else
      v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
    _MGLog((uint64_t)v8, 96, (uint64_t)CFSTR("RegionFeatures directory not found, using legacy path"), v3, v4, v5, v6, v7, v84);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "RegionFeatures directory not found, using legacy path", buf, 2u);
    }
    v1 = v91;
  }
  else
  {
    v1 = __dst;
  }
  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v11 = sub_19B6B9C44();
  v12 = (const void **)MEMORY[0x1E0C9AE40];
  if (v11 == 4)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = (const void **)MEMORY[0x1E0C9AE40];
    goto LABEL_45;
  }
  v17 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("software-behavior"), 0);
  v15 = v17;
  if (!v17 || (v18 = CFGetTypeID(v17), v18 != CFDataGetTypeID()) || CFDataGetLength(v15) <= 3)
  {
    v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
    if (v20)
      v26 = v20 + 1;
    else
      v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
    _MGLog((uint64_t)v26, 113, (uint64_t)CFSTR("Could not get software behavior data from the registry\n"), v21, v22, v23, v24, v25, v84);
    v19 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not get software behavior data from the registry\n", buf, 2u);
      v19 = 0;
    }
LABEL_22:
    CFDictionarySetValue(Mutable, CFSTR("SwBHValid"), *v12);
    v27 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("h63QSdBCiT/z0WU6rdQv6Q"));
    v14 = v27;
    if (!v27 || !CFStringGetCString(v27, buffer, 50, 0x8000100u))
    {
      v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v41)
        v47 = v41 + 1;
      else
        v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      _MGLog((uint64_t)v47, 127, (uint64_t)CFSTR("Could not convert region code\n"), v42, v43, v44, v45, v46, v84);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not convert region code\n", buf, 2u);
      }
      goto LABEL_39;
    }
    v28 = strlen(buffer);
    buffer[v28] = 9;
    v29 = v28 + 1;
    buffer[v28 + 1] = 0;
    v30 = sub_19B6B9C44() - 1;
    if (v30 < 0xB && ((0x477u >> v30) & 1) != 0)
    {
      __strcat_chk();
      v52 = fopen(v1, "r");
      if (v52)
      {
        v13 = v52;
        while (1)
        {
          if (feof(v13))
            goto LABEL_33;
          if (!fgets(v1, 1024, v13))
            break;
          if (!strncmp(v1, buffer, v29))
          {
            v85 = 0;
            if (sscanf(v1, "%*s\t0x%x", &v85) == 1)
            {
              v19 = v85;
              goto LABEL_33;
            }
            v76 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
            if (v76)
              v82 = v76 + 1;
            else
              v82 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
            _MGLog((uint64_t)v82, 184, (uint64_t)CFSTR("Error parsing line: '%s'\n"), v77, v78, v79, v80, v81, (char)v1);
            v83 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
            v12 = (const void **)MEMORY[0x1E0C9AE40];
            if (v83)
            {
              *(_DWORD *)buf = 136315138;
              *(_QWORD *)&buf[4] = v1;
              v74 = MEMORY[0x1E0C81028];
              v75 = "Error parsing line: '%s'\n";
              goto LABEL_80;
            }
            goto LABEL_40;
          }
        }
        v63 = feof(v13);
        v12 = (const void **)MEMORY[0x1E0C9AE40];
        if (!v63)
        {
          v64 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
          if (v64)
            v0 = v64 + 1;
          v65 = __error();
          v66 = strerror(*v65);
          _MGLog((uint64_t)v0, 176, (uint64_t)CFSTR("Error reading file: %s\n"), v67, v68, v69, v70, v71, v66);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            v72 = __error();
            v73 = strerror(*v72);
            *(_DWORD *)buf = 136315138;
            *(_QWORD *)&buf[4] = v73;
            v74 = MEMORY[0x1E0C81028];
            v75 = "Error reading file: %s\n";
LABEL_80:
            _os_log_impl(&dword_19B6B1000, v74, OS_LOG_TYPE_DEFAULT, v75, buf, 0xCu);
            goto LABEL_40;
          }
        }
        goto LABEL_40;
      }
      v53 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v53)
        v54 = v53 + 1;
      else
        v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      v55 = __error();
      strerror(*v55);
      _MGLog((uint64_t)v54, 169, (uint64_t)CFSTR("Could not open %s: %s\n"), v56, v57, v58, v59, v60, (char)v1);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      v61 = __error();
      v62 = strerror(*v61);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v1;
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v62;
      v38 = MEMORY[0x1E0C81028];
      v39 = "Could not open %s: %s\n";
      v40 = 22;
    }
    else
    {
      v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c", 47);
      if (v31)
        v37 = v31 + 1;
      else
        v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGSWBehaviors.c";
      _MGLog((uint64_t)v37, 162, (uint64_t)CFSTR("device class not supported"), v32, v33, v34, v35, v36, v84);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
LABEL_32:
        v13 = 0;
LABEL_33:
        v12 = (const void **)MEMORY[0x1E0C9AE40];
        goto LABEL_40;
      }
      *(_WORD *)buf = 0;
      v38 = MEMORY[0x1E0C81028];
      v39 = "device class not supported";
      v40 = 2;
    }
    _os_log_impl(&dword_19B6B1000, v38, OS_LOG_TYPE_DEFAULT, v39, buf, v40);
    goto LABEL_32;
  }
  v19 = *(_DWORD *)CFDataGetBytePtr(v15);
  if ((v19 & 1) == 0)
    goto LABEL_22;
  CFDictionarySetValue(Mutable, CFSTR("SwBHValid"), (const void *)*MEMORY[0x1E0C9AE50]);
  v14 = 0;
LABEL_39:
  v13 = 0;
LABEL_40:
  if ((v19 & 1) != 0)
  {
    *(_QWORD *)&buf[4] = 0;
    *(_DWORD *)&buf[12] = 0;
    *(_DWORD *)buf = v19;
    v48 = CFDataCreate(v9, buf, 16);
    CFDictionarySetValue(Mutable, CFSTR("SoftwareBehavior"), v48);
    CFRelease(v48);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 0x40000000;
    *(_QWORD *)&buf[16] = sub_19B6B50AC;
    v88 = &unk_1E3BD05A0;
    v89 = Mutable;
    v90 = v19;
    v49 = off_1E3BD05C8;
    v50 = -10;
    v16 = (const void **)MEMORY[0x1E0C9AE50];
    do
    {
      (*(void (**)(_BYTE *, _QWORD, _QWORD, __CFString *))&buf[16])(buf, (v50 + 11), *(v49 - 1), *v49);
      v49 += 2;
    }
    while (!__CFADD__(v50++, 1));
  }
  else
  {
    v16 = (const void **)MEMORY[0x1E0C9AE40];
  }
LABEL_45:
  CFDictionarySetValue(Mutable, CFSTR("RegionalBehaviorValid"), *v16);
  if (sub_19B6B50E0(CFSTR("CH")))
    CFDictionarySetValue(Mutable, CFSTR("RegionalBehaviorGB18030"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (sub_19B6B50E0(CFSTR("KH")))
    CFDictionarySetValue(Mutable, CFSTR("RegionalBehaviorNoPasscodeLocationTiles"), (const void *)*MEMORY[0x1E0C9AE50]);
  if (sub_19B6B9C44() == 7)
    CFDictionarySetValue(Mutable, CFSTR("RegionalBehaviorEUVolumeLimit"), *v12);
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (v13)
    fclose(v13);
  qword_1ECD35B60 = (uint64_t)Mutable;
}

void sub_19B6B50AC(uint64_t a1, char a2, int a3, void *key)
{
  const void **v4;

  if (((*(_DWORD *)(a1 + 40) >> a2) & 1) != 0)
    v4 = (const void **)MEMORY[0x1E0C9AE50];
  else
    v4 = (const void **)MEMORY[0x1E0C9AE40];
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), key, *v4);
}

BOOL sub_19B6B50E0(const __CFString *a1)
{
  const __CFString *v1;
  const __CFString *v2;
  const __CFString *v3;
  int v4;
  _BOOL4 v5;
  const void *v6;
  const void *v7;
  int v8;
  _BOOL8 v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  uint32_t v20;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char v29;
  uint8_t buf[4];
  const __CFString *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  v1 = a1;
  if (CFEqual(a1, CFSTR("<GERMANY>")))
  {
    if (qword_1ECD35B98 != -1)
      dispatch_once(&qword_1ECD35B98, &unk_1E3BD04A0);
    v2 = CFSTR("D");
    if (dword_1ECD35B00 == 1)
    {
      v3 = CFSTR("ZD");
      v4 = 1;
      v5 = 1;
      v1 = CFSTR("DN");
    }
    else
    {
      if (dword_1ECD35B00 == 3 || dword_1ECD35B00 == 2)
      {
        v4 = 0;
        v3 = 0;
        v5 = dword_1ECD35B00 == 2;
        if (dword_1ECD35B00 != 2)
          v2 = 0;
      }
      else
      {
        if (dword_1ECD35B00 != 6)
        {
          v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
          if (v22)
            v28 = v22 + 1;
          else
            v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
          _MGLog((uint64_t)v28, 856, (uint64_t)CFSTR("Unsupported device type for Germany Region Code check"), v23, v24, v25, v26, v27, v29);
          v9 = 0;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            return v9;
          *(_WORD *)buf = 0;
          v18 = MEMORY[0x1E0C81028];
          v19 = "Unsupported device type for Germany Region Code check";
          v20 = 2;
          goto LABEL_27;
        }
        v4 = 0;
        v3 = 0;
        v5 = 1;
      }
      v1 = CFSTR("FD");
    }
  }
  else
  {
    v4 = 0;
    v3 = 0;
    v5 = 0;
    v2 = 0;
  }
  v6 = MGCopyAnswer((const char **)CFSTR("h63QSdBCiT/z0WU6rdQv6Q"));
  if (!v6)
  {
    v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v11)
      v17 = v11 + 1;
    else
      v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v17, 872, (uint64_t)CFSTR("Could not get region code; assuming device is not in region %@"),
      v12,
      v13,
      v14,
      v15,
      v16,
      (char)v1);
    v9 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v9;
    *(_DWORD *)buf = 138412290;
    v31 = v1;
    v18 = MEMORY[0x1E0C81028];
    v19 = "Could not get region code; assuming device is not in region %@";
    v20 = 12;
LABEL_27:
    _os_log_impl(&dword_19B6B1000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v20);
    return 0;
  }
  v7 = v6;
  v8 = CFEqual(v1, v6);
  v9 = v8 != 0;
  if (v8)
    v10 = 0;
  else
    v10 = v4;
  if (v10 == 1)
    v9 = CFEqual(v3, v7) != 0;
  if (v5 && !v9)
    v9 = CFEqual(v2, v7) != 0;
  CFRelease(v7);
  return v9;
}

BOOL MGIsQuestionValid(const char **a1)
{
  return sub_19B6B8DD8(a1, 0) != 0;
}

void sub_19B6B53B4()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;

  v0 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/product", CFSTR("product-id"), 0);
  qword_1ECD35BD0 = (uint64_t)v0;
  if (!v0 || (v1 = v0, v2 = CFGetTypeID(v0), v2 != CFDataGetTypeID()) || CFDataGetLength(v1) != 20)
  {
    v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/device_map.c", 47);
    if (v3)
      v9 = v3 + 1;
    else
      v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/device_map.c";
    _MGLog((uint64_t)v9, 58, (uint64_t)CFSTR("invalid product id '%@'"), v4, v5, v6, v7, v8, qword_1ECD35BD0);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      sub_19B70EBC8();
    if (qword_1ECD35BD0)
      CFRelease((CFTypeRef)qword_1ECD35BD0);
    qword_1ECD35BD0 = 0;
  }
}

uint64_t MGRegisterForUpdates(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[5];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_19B6C21E4;
  v5[3] = &unk_1E3BD08B0;
  v5[4] = a4;
  return MGRegisterForBulkUpdates(a1, a2, a3, (uint64_t)v5);
}

uint64_t MGRegisterForBulkUpdates(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  CFIndex Count;
  __CFArray *Mutable;
  CFIndex v9;
  const CFArrayCallBacks *v10;
  void *ValueAtIndex;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  CFIndex i;
  const char **v23;
  const char **v24;
  uint64_t v25;
  const char **v26;
  char *v27;
  uint64_t v28;
  uint64_t (*v29)(uint64_t, uint64_t, const char *, const char **);
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  NSObject *v38;
  const char *v39;
  uint64_t (*v40)(uint64_t);
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  NSObject *v48;
  const char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  void (*v64)(uint64_t);
  char v66;
  uint8_t buf[4];
  void *v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  Count = CFArrayGetCount(a1);
  if (Count >= 1)
  {
    Mutable = 0;
    v9 = 0;
    v10 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
    do
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, v9);
      if (!sub_19B6B8DD8((const char **)ValueAtIndex, 1))
      {
        if (!Mutable)
          Mutable = CFArrayCreateMutable(0, 0, v10);
        CFArrayAppendValue(Mutable, ValueAtIndex);
      }
      ++v9;
    }
    while (Count != v9);
    if (Mutable)
    {
      v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v12)
        v18 = v12 + 1;
      else
        v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v18, 1127, (uint64_t)CFSTR("no registration performed because invalid questions were passed in: %@"), v13, v14, v15, v16, v17, (char)Mutable);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v68 = Mutable;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "no registration performed because invalid questions were passed in: %@", buf, 0xCu);
      }
      CFRelease(Mutable);
      return -1;
    }
  }
  v19 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)off_1EE3FD5A0 + 33);
  if (!v19)
    v19 = (uint64_t (*)(uint64_t, uint64_t))sub_19B6BBD84(33, 2);
  v20 = v19(a3, a4);
  if (!v20)
  {
    v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v50)
      v56 = v50 + 1;
    else
      v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v56, 1134, (uint64_t)CFSTR("failed to create notification object"), v51, v52, v53, v54, v55, v66);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to create notification object", buf, 2u);
    }
    return -1;
  }
  v21 = v20;
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      v23 = (const char **)CFArrayGetValueAtIndex(a1, i);
      v24 = sub_19B6B8DD8(v23, 1);
      if (*((_DWORD *)v24 + 8))
      {
        v25 = 0;
        v26 = v24 + 9;
        while (1)
        {
          v27 = (char *)v26 + 4 * v25;
          v28 = *((unsigned int *)v27 - 10);
          if ((_DWORD)v28)
          {
            v29 = (uint64_t (*)(uint64_t, uint64_t, const char *, const char **))*((_QWORD *)off_1EE3FD5A0 + 46);
            if (!v29)
            {
              v29 = (uint64_t (*)(uint64_t, uint64_t, const char *, const char **))sub_19B6BBD84(46, 2);
              v28 = *((unsigned int *)v27 - 10);
            }
            if ((v29(v21, v28, v26[v25], v23) & 1) == 0)
              break;
          }
          if (++v25 == 9)
            goto LABEL_37;
        }
        v57 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v57)
          v63 = v57 + 1;
        else
          v63 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v63, 1153, (uint64_t)CFSTR("notification registration for %@ failed"), v58, v59, v60, v61, v62, (char)v23);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v68 = v23;
          v48 = MEMORY[0x1E0C81028];
          v49 = "notification registration for %@ failed";
LABEL_56:
          _os_log_impl(&dword_19B6B1000, v48, OS_LOG_TYPE_DEFAULT, v49, buf, 0xCu);
        }
        goto LABEL_57;
      }
      v30 = *((_BYTE *)v24 + 152);
      v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v31)
        v37 = v31 + 1;
      else
        v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      if ((v30 & 8) != 0)
      {
        _MGLog((uint64_t)v37, 1144, (uint64_t)CFSTR("%@ is static and will never generate a notification"), v32, v33, v34, v35, v36, (char)v23);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v68 = v23;
          v38 = MEMORY[0x1E0C81028];
          v39 = "%@ is static and will never generate a notification";
          goto LABEL_36;
        }
      }
      else
      {
        _MGLog((uint64_t)v37, 1146, (uint64_t)CFSTR("%@ cannot generate notifications yet"), v32, v33, v34, v35, v36, (char)v23);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v68 = v23;
          v38 = MEMORY[0x1E0C81028];
          v39 = "%@ cannot generate notifications yet";
LABEL_36:
          _os_log_impl(&dword_19B6B1000, v38, OS_LOG_TYPE_DEFAULT, v39, buf, 0xCu);
        }
      }
LABEL_37:
      ;
    }
  }
  v40 = (uint64_t (*)(uint64_t))*((_QWORD *)off_1EE3FD5A0 + 49);
  if (!v40)
    v40 = (uint64_t (*)(uint64_t))sub_19B6BBD84(49, 2);
  if ((v40(v21) & 1) == 0)
  {
    v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v41)
      v47 = v41 + 1;
    else
      v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v47, 1163, (uint64_t)CFSTR("can't start notifications for %@"), v42, v43, v44, v45, v46, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v68 = a1;
      v48 = MEMORY[0x1E0C81028];
      v49 = "can't start notifications for %@";
      goto LABEL_56;
    }
LABEL_57:
    v64 = (void (*)(uint64_t))*((_QWORD *)off_1EE3FD5A0 + 28);
    if (!v64)
      v64 = (void (*)(uint64_t))sub_19B6BBD84(28, 2);
    v64(v21);
    return -1;
  }
  return v21;
}

uint64_t MGGetSInt64Answer(const char **a1, uint64_t a2)
{
  uint64_t v4;

  v4 = a2;
  if (sub_19B6B84A4(a1, 5, 6, kCFNumberSInt64Type, &v4))
    return v4;
  else
    return a2;
}

__CFDictionary *MGCopyMultipleAnswers(const __CFArray *a1, const __CFDictionary *a2)
{
  CFIndex Count;
  __CFDictionary *Mutable;
  CFIndex i;
  void *ValueAtIndex;
  const void *v8;
  const void *v9;

  Count = CFArrayGetCount(a1);
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Count >= 1)
  {
    for (i = 0; i != Count; ++i)
    {
      ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, i);
      if (a2)
        CFDictionaryGetValue(a2, ValueAtIndex);
      v8 = sub_19B6B89E4((const char **)ValueAtIndex, 0);
      if (v8)
      {
        v9 = v8;
        CFDictionaryAddValue(Mutable, ValueAtIndex, v8);
        CFRelease(v9);
      }
    }
  }
  return Mutable;
}

BOOL sub_19B6B5AAC()
{
  const __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const __CFString *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v0 = sub_19B6B665C();
  if (!v0)
    return MGGetBoolAnswer((const char **)CFSTR("Oji6HRoPi7rH7HPdWVakuw"));
  v7 = v0;
  v8 = sub_19B6B5F40((_BOOL8)v0, CFSTR("Internal"), v1, v2, v3, v4, v5, v6, (uint64_t)CFSTR("Lite Internal"));
  v15 = v8 | sub_19B6B5F40((_BOOL8)CFSTR("Internal"), v7, v9, v10, v11, v12, v13, v14, 0);
  CFRelease(v7);
  return v15;
}

__CFDictionary *sub_19B6B5B48()
{
  __CFDictionary *Mutable;
  CFStringRef v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  CFStringRef v8;
  const void *v9;
  _BOOL4 v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  const void *v35;
  _BOOL4 v36;
  const void *v37;
  _BOOL4 v38;
  const void *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const char *v46;
  NSObject *v47;
  const char *v48;
  uint8_t *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  char v58;
  uint8_t buf[2];
  __int16 v60;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v40 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v40)
      v46 = v40 + 1;
    else
      v46 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v46, 8269, (uint64_t)CFSTR("Allocation failed for IOSurface dictionary."), v41, v42, v43, v44, v45, v58);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return Mutable;
    v60 = 0;
    v47 = MEMORY[0x1E0C81028];
    v48 = "Allocation failed for IOSurface dictionary.";
    v49 = (uint8_t *)&v60;
LABEL_36:
    _os_log_impl(&dword_19B6B1000, v47, OS_LOG_TYPE_DEFAULT, v48, v49, 2u);
    return Mutable;
  }
  v1 = sub_19B6B61F8();
  if (!v1)
  {
    v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v50)
      v56 = v50 + 1;
    else
      v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v56, 8275, (uint64_t)CFSTR("Failed to get current SOC Generation string"), v51, v52, v53, v54, v55, v58);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return Mutable;
    *(_WORD *)buf = 0;
    v47 = MEMORY[0x1E0C81028];
    v48 = "Failed to get current SOC Generation string";
    v49 = buf;
    goto LABEL_36;
  }
  v8 = v1;
  v9 = (const void *)*MEMORY[0x1E0C9AE40];
  v10 = sub_19B6B5F40((_BOOL8)v1, CFSTR("H10"), v2, v3, v4, v5, v6, v7, (uint64_t)CFSTR("H11"));
  v11 = (const void *)*MEMORY[0x1E0C9AE50];
  if (v10)
    v12 = (const void *)*MEMORY[0x1E0C9AE50];
  else
    v12 = v9;
  CFDictionaryAddValue(Mutable, CFSTR("media-compression"), v12);
  if (sub_19B6B5F40((_BOOL8)v8, CFSTR("H11"), v13, v14, v15, v16, v17, v18, (uint64_t)CFSTR("H12")))
    v19 = v11;
  else
    v19 = v9;
  CFDictionaryAddValue(Mutable, CFSTR("buffer-compression"), v19);
  if (sub_19B6B5F40((_BOOL8)v8, CFSTR("H12"), v20, v21, v22, v23, v24, v25, (uint64_t)CFSTR("H11"))
    || (v26 = sub_19B6B5FA0(), v27 = v11, v26))
  {
    v27 = v9;
  }
  CFDictionaryAddValue(Mutable, CFSTR("universal-buffer-compression"), v27);
  if (sub_19B6B5F40((_BOOL8)v8, CFSTR("H13"), v28, v29, v30, v31, v32, v33, (uint64_t)CFSTR("H12"))
    || (v34 = sub_19B6B5FA0(), v35 = v11, v34))
  {
    v35 = v9;
  }
  CFDictionaryAddValue(Mutable, CFSTR("universal-lossy-buffer-compression"), v35);
  v36 = sub_19B6B5FE0((_BOOL8)CFSTR("H15"));
  if (sub_19B6B5FE0((_BOOL8)CFSTR("M11")) || v36)
    v37 = v11;
  else
    v37 = v9;
  CFDictionaryAddValue(Mutable, CFSTR("universal-multislice-buffer-compression"), v37);
  v38 = sub_19B6B5FE0((_BOOL8)CFSTR("H16"));
  v39 = v9;
  if (v38)
  {
    if (sub_19B6B3038((_BOOL8)CFSTR("t8130"), 0))
      v39 = v9;
    else
      v39 = v11;
  }
  CFDictionaryAddValue(Mutable, CFSTR("universal-pARGB10101010-buffer-compression"), v39);
  if (sub_19B6B5FE0((_BOOL8)CFSTR("H17")) && !sub_19B6B3038((_BOOL8)CFSTR("t8140"), 0))
    v9 = v11;
  CFDictionaryAddValue(Mutable, CFSTR("universal-buffer-compression-requires-plane-alignment-2048"), v9);
  CFRelease(v8);
  return Mutable;
}

BOOL sub_19B6B5F40(_BOOL8 stringToFind, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  const __CFString *v9;
  CFIndex location;
  BOOL v11;
  CFStringRef *v12;
  CFStringRef *v13;

  if (stringToFind)
  {
    v9 = (const __CFString *)stringToFind;
    v13 = (CFStringRef *)&a9;
    do
    {
      location = CFStringFind(theString, v9, 0).location;
      v11 = location == -1;
      stringToFind = location != -1;
      if (!v11)
        break;
      v12 = v13++;
      theString = *v12;
    }
    while (*v12);
  }
  return stringToFind;
}

uint64_t sub_19B6B5FA0()
{
  if (qword_1ECD35B58 != -1)
    dispatch_once(&qword_1ECD35B58, &unk_1E3BD0780);
  return byte_1EE3FD878;
}

BOOL sub_19B6B5FE0(_BOOL8 a1)
{
  _BOOL8 v1;
  const __CFString *v2;
  const __CFString *v3;
  unsigned __int8 CharacterAtIndex;
  int v5;

  v1 = a1;
  if (a1)
  {
    v2 = sub_19B6B61F8();
    if (v2)
    {
      v3 = v2;
      CharacterAtIndex = CFStringGetCharacterAtIndex(v2, 0);
      if (CFStringGetCharacterAtIndex((CFStringRef)v1, 0) != CharacterAtIndex)
      {
        v1 = 0;
      }
      else
      {
        v5 = sub_19B6B6070(v3);
        v1 = v5 >= (int)sub_19B6B6070((const __CFString *)v1);
      }
      CFRelease(v3);
    }
    else
    {
      return 0;
    }
  }
  return v1;
}

uint64_t sub_19B6B6070(const __CFString *a1)
{
  const __CFString *v2;
  uint64_t IntValue;
  CFRange v5;

  v5.length = CFStringGetLength(a1) - 1;
  v5.location = 1;
  v2 = CFStringCreateWithSubstring(0, a1, v5);
  IntValue = CFStringGetIntValue(v2);
  if (v2)
    CFRelease(v2);
  return IntValue;
}

uint64_t sub_19B6B60C0()
{
  uint64_t v0;
  _BOOL4 v1;

  if (sub_19B6B9C44() == 6 || sub_19B6B61A0((_BOOL8)CFSTR("H4")))
  {
    v0 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v1 = sub_19B6B61A0((_BOOL8)CFSTR("H5"));
    v0 = MEMORY[0x1E0C9AE40];
    if (!v1)
      v0 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v0;
}

uint64_t sub_19B6B6120()
{
  uint64_t v0;
  _BOOL4 v2;

  if (sub_19B6B9C44() == 6
    || sub_19B6B61A0((_BOOL8)CFSTR("H6"))
    || sub_19B6B61A0((_BOOL8)CFSTR("H5"))
    || sub_19B6B61A0((_BOOL8)CFSTR("H7")))
  {
    v0 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v2 = sub_19B6B61A0((_BOOL8)CFSTR("H4"));
    v0 = MEMORY[0x1E0C9AE40];
    if (!v2)
      v0 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v0;
}

BOOL sub_19B6B61A0(_BOOL8 a1)
{
  const __CFString *v2;
  const __CFString *v3;

  v2 = sub_19B6B61F8();
  if (!v2)
    return 0;
  v3 = v2;
  if (a1)
    a1 = CFStringCompare(v2, (CFStringRef)a1, 1uLL) == kCFCompareEqualTo;
  CFRelease(v3);
  return a1;
}

CFStringRef sub_19B6B61F8()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  const char *BytePtr;
  CFStringRef v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  CFStringRef result;
  uint8_t v13[16];

  v0 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/arm-io", CFSTR("soc-generation"), 0);
  v1 = v0;
  if (v0)
  {
    v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 1)
    {
      BytePtr = (const char *)CFDataGetBytePtr(v1);
      v4 = CFStringCreateWithCString(0, BytePtr, 0x8000100u);
LABEL_11:
      CFRelease(v1);
      return v4;
    }
  }
  v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
  if (v5)
    v11 = v5 + 1;
  else
    v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
  _MGLog((uint64_t)v11, 414, (uint64_t)CFSTR("Failed to copyDeviceTreeProperty(IODeviceTree:/arm-io soc-generation)"), v6, v7, v8, v9, v10, v13[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to copyDeviceTreeProperty(IODeviceTree:/arm-io soc-generation)", v13, 2u);
  }
  v4 = 0;
  result = 0;
  if (v1)
    goto LABEL_11;
  return result;
}

CFTypeID sub_19B6B6308()
{
  CFTypeID result;

  qword_1ECD35BE8 = CFDictionaryGetTypeID();
  qword_1ECD35BF0 = CFArrayGetTypeID();
  qword_1ECD35BF8 = CFNumberGetTypeID();
  qword_1ECD35C00 = CFNumberGetTypeID();
  qword_1ECD35C08 = CFNumberGetTypeID();
  qword_1ECD35C10 = CFNumberGetTypeID();
  qword_1ECD35C18 = CFNumberGetTypeID();
  qword_1ECD35C20 = CFStringGetTypeID();
  qword_1ECD35C28 = CFDataGetTypeID();
  result = CFBooleanGetTypeID();
  qword_1ECD35C30 = result;
  return result;
}

const void *MGGetStringAnswer(const char **a1)
{
  const void *v1;
  const void *v2;
  CFTypeID v3;
  int v5;

  v5 = 0;
  v1 = sub_19B6B89E4(a1, &v5);
  v2 = v1;
  if (v1)
  {
    v3 = CFGetTypeID(v1);
    if (v3 != CFStringGetTypeID())
    {
      CFRelease(v2);
      return 0;
    }
  }
  return v2;
}

BOOL MGGetFloat32Answer(const char **a1, float a2)
{
  float v3;

  v3 = a2;
  return sub_19B6B84A4(a1, 7, 7, kCFNumberFloat32Type, &v3);
}

const void *MGCopyAnswerWithError(const char **a1, uint64_t a2, _DWORD *a3)
{
  const void *v4;

  v4 = sub_19B6B89E4(a1, 0);
  if (a3)
    *a3 = sub_19B6B6454();
  return v4;
}

void *sub_19B6B6454()
{
  if (qword_1ECD35CE0 != -1)
    dispatch_once(&qword_1ECD35CE0, &unk_1E3BD0E08);
  return pthread_getspecific(qword_1ECD35CD8);
}

uint64_t _MGCacheValid()
{
  const char *v0;
  char *v1;
  int *v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  uint32_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char v22;
  uint8_t buf[4];
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (unlink("/var/mobile/Library/Caches/com.apple.MobileGestalt.plist"))
  {
    if (*__error() != 2)
    {
      v0 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v1)
        v0 = v1 + 1;
      v2 = __error();
      v3 = strerror(*v2);
      _MGLog((uint64_t)v0, 225, (uint64_t)CFSTR("Failed to delete legacy gestalt cache: %s"), v4, v5, v6, v7, v8, v3);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v9 = __error();
        v10 = strerror(*v9);
        *(_DWORD *)buf = 136315138;
        v24 = v10;
        v11 = MEMORY[0x1E0C81028];
        v12 = "Failed to delete legacy gestalt cache: %s";
        v13 = 12;
LABEL_12:
        _os_log_impl(&dword_19B6B1000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, v13);
      }
    }
  }
  else
  {
    v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v14)
      v20 = v14 + 1;
    else
      v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v20, 228, (uint64_t)CFSTR("Successfully deleted legacy gestalt cache"), v15, v16, v17, v18, v19, v22);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v11 = MEMORY[0x1E0C81028];
      v12 = "Successfully deleted legacy gestalt cache";
      v13 = 2;
      goto LABEL_12;
    }
  }
  return sub_19B6B669C(0);
}

BOOL sub_19B6B6610()
{
  const __CFString *v0;
  const __CFString *v1;
  _BOOL8 v2;

  v0 = sub_19B6B665C();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFEqual(v0, CFSTR("Restore")) != 0;
  CFRelease(v1);
  return v2;
}

const __CFString *sub_19B6B665C()
{
  const __CFString *result;

  result = (const __CFString *)sub_19B6B6DF4(CFSTR("ReleaseType"), 0);
  if (!result)
  {
    if (os_variant_has_internal_content())
      return CFSTR("Internal");
    else
      return 0;
  }
  return result;
}

uint64_t sub_19B6B669C(int a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFString *v4;
  const __CFString *v5;
  const __CFDictionary *Value;
  const __CFDictionary *v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  NSObject *v40;
  const char *v41;
  const void *v42;
  CFIndex v43;
  const void *v44;
  CFIndex v45;
  const __CFData *v46;
  const __CFData *v47;
  CFTypeID v48;
  const UInt8 *BytePtr;
  const char *v50;
  char *v51;
  char Length;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  CFIndex v58;
  CFIndex Count;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  const char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  const char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  const char *v94;
  uint32_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  uint64_t v103;
  char v105;
  _QWORD v106[5];
  char v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char v111;
  uint8_t buf[4];
  CFIndex v113;
  __int16 v114;
  const __CFString *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v108 = 0;
  v109 = &v108;
  v110 = 0x2000000000;
  v111 = 0;
  v2 = (const __CFDictionary *)sub_19B6B7518("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist");
  if (!v2)
    goto LABEL_84;
  v3 = v2;
  v4 = (const __CFString *)sub_19B6B6DF4((const void *)*MEMORY[0x1E0C9AB90], 1);
  if (!v4)
  {
    v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v19)
      v25 = v19 + 1;
    else
      v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v25, 61, (uint64_t)CFSTR("can't validate cache version since _kCFSystemVersionBuildVersionKey is missing"), v20, v21, v22, v23, v24, v105);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "can't validate cache version since _kCFSystemVersionBuildVersionKey is missing", buf, 2u);
    }
    goto LABEL_83;
  }
  v5 = v4;
  Value = (const __CFDictionary *)CFDictionaryGetValue(v3, CFSTR("CacheExtra"));
  if (!Value)
  {
    v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v26)
      v32 = v26 + 1;
    else
      v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v32, 68, (uint64_t)CFSTR("cache extra is missing"), v27, v28, v29, v30, v31, v105);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_23;
    *(_WORD *)buf = 0;
    v17 = MEMORY[0x1E0C81028];
    v18 = "cache extra is missing";
    goto LABEL_22;
  }
  v7 = Value;
  v8 = (unint64_t)sub_19B6B6DF4(CFSTR("ReleaseType"), 0);
  v9 = (unint64_t)CFDictionaryGetValue(v7, CFSTR("9UCjT7Qfi4xLVvPAKIzTCQ"));
  if (v8 | v9)
  {
    if (!v8 && v9)
    {
      v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v10)
        v16 = v10 + 1;
      else
        v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v16, 113, (uint64_t)CFSTR("moving from non-GM to release, invalidate cache"), v11, v12, v13, v14, v15, v105);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      *(_WORD *)buf = 0;
      v17 = MEMORY[0x1E0C81028];
      v18 = "moving from non-GM to release, invalidate cache";
LABEL_22:
      _os_log_impl(&dword_19B6B1000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 2u);
LABEL_23:
      v8 = 0;
      goto LABEL_82;
    }
    if (v8 && !v9)
    {
      v33 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v33)
        v39 = v33 + 1;
      else
        v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v39, 118, (uint64_t)CFSTR("moving from release to non-GM, invalidate cache"), v34, v35, v36, v37, v38, v105);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v40 = MEMORY[0x1E0C81028];
        v41 = "moving from release to non-GM, invalidate cache";
LABEL_80:
        v95 = 2;
        goto LABEL_81;
      }
      goto LABEL_82;
    }
    if (v8 && v9 && !CFEqual((CFTypeRef)v9, (CFTypeRef)v8))
    {
      v96 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v96)
        v102 = v96 + 1;
      else
        v102 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v102, 128, (uint64_t)CFSTR("we're switching release types, invalidate cache"), v97, v98, v99, v100, v101, v105);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v40 = MEMORY[0x1E0C81028];
        v41 = "we're switching release types, invalidate cache";
        goto LABEL_80;
      }
      goto LABEL_82;
    }
  }
  v42 = CFDictionaryGetValue(v3, CFSTR("CacheVersion"));
  if (v42)
  {
    v43 = (CFIndex)v42;
    if (CFEqual(v42, v5))
    {
      v44 = CFDictionaryGetValue(v3, CFSTR("CacheUUID"));
      if (!v44)
      {
        v74 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
        if (v74)
          v80 = v74 + 1;
        else
          v80 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
        _MGLog((uint64_t)v80, 147, (uint64_t)CFSTR("can't validate cache since uuid is missing"), v75, v76, v77, v78, v79, v105);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          v40 = MEMORY[0x1E0C81028];
          v41 = "can't validate cache since uuid is missing";
          goto LABEL_80;
        }
        goto LABEL_82;
      }
      v45 = (CFIndex)v44;
      if (CFEqual(v44, CFSTR("6A95A6E7-2B39-465E-8033-52225E7279F7")))
      {
        v46 = (const __CFData *)CFDictionaryGetValue(v3, CFSTR("CacheData"));
        if (v46 && (v47 = v46, v48 = CFGetTypeID(v46), v48 == CFDataGetTypeID()) && CFDataGetLength(v47) == 5877)
        {
          if (a1)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD35BC0);
            BytePtr = CFDataGetBytePtr(v47);
            memcpy(qword_1ECD36028, BytePtr, 0x16F5uLL);
          }
          *((_BYTE *)v109 + 24) = 1;
          v106[0] = MEMORY[0x1E0C809B0];
          v106[1] = 0x40000000;
          v106[2] = sub_19B6B86E0;
          v106[3] = &unk_1E3BD14B0;
          v107 = a1;
          v106[4] = &v108;
          sub_19B6B861C(v7, (uint64_t)v106);
          if (a1)
          {
            v50 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            v51 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
            if (v51)
              v50 = v51 + 1;
            Length = CFDataGetLength(v47);
            CFDictionaryGetCount(v7);
            _MGLog((uint64_t)v50, 205, (uint64_t)CFSTR("Cache loaded with %zu pre-cached in CacheData and %ld items in CacheExtra."), v53, v54, v55, v56, v57, Length);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              v58 = CFDataGetLength(v47);
              Count = CFDictionaryGetCount(v7);
              *(_DWORD *)buf = 134218240;
              v113 = v58;
              v114 = 2048;
              v115 = (const __CFString *)Count;
              _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Cache loaded with %zu pre-cached in CacheData and %ld items in CacheExtra.", buf, 0x16u);
            }
            os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD35BC0);
          }
        }
        else
        {
          v81 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
          if (v81)
            v87 = v81 + 1;
          else
            v87 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
          _MGLog((uint64_t)v87, 158, (uint64_t)CFSTR("cache data is invalid"), v82, v83, v84, v85, v86, v105);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            v40 = MEMORY[0x1E0C81028];
            v41 = "cache data is invalid";
            goto LABEL_80;
          }
        }
        goto LABEL_82;
      }
      v88 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v88)
        v94 = v88 + 1;
      else
        v94 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v94, 152, (uint64_t)CFSTR("cache UUID %@ doesn't match build UUID %@"), v89, v90, v91, v92, v93, v45);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_82;
      *(_DWORD *)buf = 138412546;
      v113 = v45;
      v114 = 2112;
      v115 = CFSTR("6A95A6E7-2B39-465E-8033-52225E7279F7");
      v40 = MEMORY[0x1E0C81028];
      v41 = "cache UUID %@ doesn't match build UUID %@";
    }
    else
    {
      v67 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v67)
        v73 = v67 + 1;
      else
        v73 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v73, 141, (uint64_t)CFSTR("cache %@ doesn't match OS %@"), v68, v69, v70, v71, v72, v43);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_82;
      *(_DWORD *)buf = 138412546;
      v113 = v43;
      v114 = 2112;
      v115 = v5;
      v40 = MEMORY[0x1E0C81028];
      v41 = "cache %@ doesn't match OS %@";
    }
    v95 = 22;
LABEL_81:
    _os_log_impl(&dword_19B6B1000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, v95);
    goto LABEL_82;
  }
  v60 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v60)
    v66 = v60 + 1;
  else
    v66 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  _MGLog((uint64_t)v66, 136, (uint64_t)CFSTR("can't validate cache version since cacheVers is missing"), v61, v62, v63, v64, v65, v105);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    v40 = MEMORY[0x1E0C81028];
    v41 = "can't validate cache version since cacheVers is missing";
    goto LABEL_80;
  }
LABEL_82:
  CFRelease(v3);
  CFRelease(v5);
  v3 = (const __CFDictionary *)v8;
  if (v8)
LABEL_83:
    CFRelease(v3);
LABEL_84:
  v103 = *((unsigned __int8 *)v109 + 24);
  _Block_object_dispose(&v108, 8);
  return v103;
}

const void *sub_19B6B6DF4(const void *a1, int a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const void *Value;
  const void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char v23;
  uint8_t buf[4];
  const void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  if (v4)
  {
    v5 = v4;
    Value = CFDictionaryGetValue(v4, a1);
    v7 = Value;
    if (Value)
    {
      CFRetain(Value);
    }
    else if (a2)
    {
      v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      if (v15)
        v21 = v15 + 1;
      else
        v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      _MGLog((uint64_t)v21, 297, (uint64_t)CFSTR("Could not lookup %@ from system version dictionary"), v16, v17, v18, v19, v20, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v25 = a1;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not lookup %@ from system version dictionary", buf, 0xCu);
      }
    }
    CFRelease(v5);
  }
  else
  {
    if (a2)
    {
      v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      v14 = v8 ? v8 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      _MGLog((uint64_t)v14, 302, (uint64_t)CFSTR("Could not load the system version dictionary"), v9, v10, v11, v12, v13, v23);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not load the system version dictionary", buf, 2u);
      }
    }
    return 0;
  }
  return v7;
}

const void *sub_19B6B6F7C(const char *a1, int a2)
{
  int v4;
  int v5;
  off_t st_size;
  UInt8 *v7;
  UInt8 *v8;
  const __CFAllocator *v9;
  const __CFData *v10;
  const __CFData *v11;
  CFPropertyListRef v12;
  const void *v13;
  CFTypeID v14;
  CFTypeID TypeID;
  BOOL v16;
  const void *v17;
  const void *v18;
  const char *v20;
  char *v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  char *v29;
  const char *v30;
  char *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int *v38;
  char *v39;
  NSObject *v40;
  const char *v41;
  uint32_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  const char *v51;
  char *v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  char *v60;
  NSObject *v61;
  const char *v62;
  uint32_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  char v85;
  CFErrorRef error;
  stat v87;
  uint8_t buf[4];
  CFErrorRef v89;
  __int16 v90;
  char *v91;
  uint64_t v92;

  v92 = *MEMORY[0x1E0C80C00];
  memset(&v87, 0, sizeof(v87));
  error = 0;
  v4 = open(a1, 0);
  if (v4 == -1)
  {
    if (!a2)
    {
      v17 = 0;
      v8 = 0;
      goto LABEL_43;
    }
    v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v21)
      v20 = v21 + 1;
    v22 = __error();
    strerror(*v22);
    _MGLog((uint64_t)v20, 74, (uint64_t)CFSTR("Could not open %s: %s"), v23, v24, v25, v26, v27, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v28 = __error();
      v29 = strerror(*v28);
      *(_DWORD *)buf = 136315394;
      v89 = (CFErrorRef)a1;
      v90 = 2080;
      v91 = v29;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not open %s: %s", buf, 0x16u);
    }
    v8 = 0;
    goto LABEL_40;
  }
  v5 = v4;
  if (fstat(v4, &v87) == -1)
  {
    if (!a2)
      goto LABEL_38;
    v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v31)
      v30 = v31 + 1;
    v32 = __error();
    strerror(*v32);
    _MGLog((uint64_t)v30, 82, (uint64_t)CFSTR("Could not fstat %s: %s"), v33, v34, v35, v36, v37, (char)a1);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_38;
    v38 = __error();
    v39 = strerror(*v38);
    *(_DWORD *)buf = 136315394;
    v89 = (CFErrorRef)a1;
    v90 = 2080;
    v91 = v39;
    v40 = MEMORY[0x1E0C81028];
    v41 = "Could not fstat %s: %s";
    v42 = 22;
    goto LABEL_37;
  }
  st_size = v87.st_size;
  v7 = (UInt8 *)malloc_type_malloc(v87.st_size, 0xB719480CuLL);
  if (!v7)
  {
    if (!a2)
      goto LABEL_38;
    v43 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    v49 = v43 ? v43 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v49, 92, (uint64_t)CFSTR("Could not malloc buffer for file data"), v44, v45, v46, v47, v48, v85);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_38;
    *(_WORD *)buf = 0;
    v40 = MEMORY[0x1E0C81028];
    v41 = "Could not malloc buffer for file data";
    v42 = 2;
LABEL_37:
    _os_log_impl(&dword_19B6B1000, v40, OS_LOG_TYPE_DEFAULT, v41, buf, v42);
LABEL_38:
    v8 = 0;
    goto LABEL_39;
  }
  v8 = v7;
  if (read(v5, v7, st_size) == st_size)
  {
    v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v10 = CFDataCreateWithBytesNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v8, st_size, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
    if (v10)
    {
      v11 = v10;
      v12 = CFPropertyListCreateWithData(v9, v10, 0, 0, &error);
      if (v12)
      {
        v13 = v12;
        v14 = CFGetTypeID(v12);
        TypeID = CFDictionaryGetTypeID();
        v16 = v14 == TypeID;
        if (v14 == TypeID)
          v17 = v13;
        else
          v17 = 0;
        if (v16)
          v18 = 0;
        else
          v18 = v13;
        if (v16 || a2 == 0)
        {
          v13 = v18;
        }
        else
        {
          v78 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
          if (v78)
            v84 = v78 + 1;
          else
            v84 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
          _MGLog((uint64_t)v84, 126, (uint64_t)CFSTR("File contents are not a CFDictionary"), v79, v80, v81, v82, v83, v85);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "File contents are not a CFDictionary", buf, 2u);
          }
          v17 = 0;
        }
      }
      else
      {
        if (a2)
        {
          v71 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
          v77 = v71 ? v71 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
          _MGLog((uint64_t)v77, 119, (uint64_t)CFSTR("Could not create dictionary from file contents: %@"), v72, v73, v74, v75, v76, (char)error);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v89 = error;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not create dictionary from file contents: %@", buf, 0xCu);
          }
        }
        v17 = 0;
        v13 = 0;
      }
      close(v5);
      CFRelease(v11);
      if (v13)
        CFRelease(v13);
      goto LABEL_41;
    }
    if (!a2)
      goto LABEL_39;
    v64 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    v70 = v64 ? v64 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v70, 107, (uint64_t)CFSTR("Could not create CFData with file data"), v65, v66, v67, v68, v69, v85);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    *(_WORD *)buf = 0;
    v61 = MEMORY[0x1E0C81028];
    v62 = "Could not create CFData with file data";
    v63 = 2;
  }
  else
  {
    if (!a2)
      goto LABEL_39;
    v51 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    v52 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v52)
      v51 = v52 + 1;
    v53 = __error();
    strerror(*v53);
    _MGLog((uint64_t)v51, 99, (uint64_t)CFSTR("Could not read %s: %s"), v54, v55, v56, v57, v58, (char)a1);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_39;
    v59 = __error();
    v60 = strerror(*v59);
    *(_DWORD *)buf = 136315394;
    v89 = (CFErrorRef)a1;
    v90 = 2080;
    v91 = v60;
    v61 = MEMORY[0x1E0C81028];
    v62 = "Could not read %s: %s";
    v63 = 22;
  }
  _os_log_impl(&dword_19B6B1000, v61, OS_LOG_TYPE_DEFAULT, v62, buf, v63);
LABEL_39:
  close(v5);
LABEL_40:
  v17 = 0;
LABEL_41:
  if (error)
  {
    CFRelease(error);
    error = 0;
  }
LABEL_43:
  free(v8);
  return v17;
}

const void *sub_19B6B7518(const char *a1)
{
  return sub_19B6B6F7C(a1, 1);
}

const void *_MGServerCopyAnswerWithError(uint64_t a1, const char **a2, unsigned int *a3, CFTypeRef *a4)
{
  uint64_t (*v8)(uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t, CFTypeRef *);
  const void *v13;
  unsigned int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  NSObject *v22;
  const char *v23;
  uint32_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v56;
  __int16 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if ((byte_1EE3FD870 & 1) == 0)
  {
    v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v15)
      v21 = v15 + 1;
    else
      v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v21, 355, (uint64_t)CFSTR("_MGServerCopyAnswer(%@) called outside of server"), v16, v17, v18, v19, v20, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    *(_DWORD *)buf = 138412290;
    v56 = a2;
    v22 = MEMORY[0x1E0C81028];
    v23 = "_MGServerCopyAnswer(%@) called outside of server";
    v24 = 12;
    goto LABEL_31;
  }
  v8 = (uint64_t (*)(uint64_t))*((_QWORD *)off_1EE3FD5A0 + 35);
  if (!v8)
    v8 = (uint64_t (*)(uint64_t))sub_19B6BBD84(35, 2);
  v9 = v8(a1);
  v10 = (uint64_t *)sub_19B6B8DD8(a2, 1);
  if (v10)
  {
    v11 = v10;
    if ((sub_19B6B94A8(v10, v9, (uint64_t)&cf) & 1) != 0)
    {
      v12 = (uint64_t (*)(uint64_t, CFTypeRef *))v11[3];
      if (!v12 || (v12(a1, &cf) & 1) != 0)
      {
        v13 = sub_19B6B89E4(a2, 0);
        v14 = sub_19B6B6454();
        goto LABEL_33;
      }
      v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v39)
        v45 = v39 + 1;
      else
        v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v45, 375, (uint64_t)CFSTR("server_access_check denied access to question %@ for pid %d"), v40, v41, v42, v43, v44, (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      *(_DWORD *)buf = 138412546;
      v56 = a2;
      v57 = 1024;
      v58 = v9;
      v22 = MEMORY[0x1E0C81028];
      v23 = "server_access_check denied access to question %@ for pid %d";
    }
    else
    {
      v32 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v32)
        v38 = v32 + 1;
      else
        v38 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v38, 368, (uint64_t)CFSTR("server asked to answer non-server question %@ for pid %d"), v33, v34, v35, v36, v37, (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_32;
      *(_DWORD *)buf = 138412546;
      v56 = a2;
      v57 = 1024;
      v58 = v9;
      v22 = MEMORY[0x1E0C81028];
      v23 = "server asked to answer non-server question %@ for pid %d";
    }
    v24 = 18;
LABEL_31:
    _os_log_impl(&dword_19B6B1000, v22, OS_LOG_TYPE_DEFAULT, v23, buf, v24);
LABEL_32:
    v13 = 0;
    v14 = 9;
    goto LABEL_33;
  }
  v25 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v25)
    v31 = v25 + 1;
  else
    v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v31, 363, (uint64_t)CFSTR("server asked to answer unknown question %@ for pid %d"), v26, v27, v28, v29, v30, (char)a2);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v56 = a2;
    v57 = 1024;
    v58 = v9;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "server asked to answer unknown question %@ for pid %d", buf, 0x12u);
  }
  v13 = 0;
  v14 = 5;
LABEL_33:
  if (a4)
  {
    *a4 = cf;
  }
  else if (cf)
  {
    v46 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v46)
      v52 = v46 + 1;
    else
      v52 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v52, 389, (uint64_t)CFSTR("%@"), v47, v48, v49, v50, v51, (char)cf);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v56 = cf;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
    }
    CFRelease(cf);
  }
  if (a3)
    *a3 = v14;
  return v13;
}

BOOL sub_19B6B78F0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("re6Zb+zwFKJNlkQTUeT+/w"), 85, a2);
}

BOOL sub_19B6B7904(uint64_t a1, const void *a2, int a3, CFMutableStringRef *a4)
{
  uint64_t (*v8)(uint64_t, const char *);
  const __CFArray *v9;
  const __CFArray *v10;
  CFTypeID v11;
  _BOOL8 v12;
  const char *v13;
  char *v14;
  uint64_t (*v15)(uint64_t);
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  _BOOL4 v25;
  __CFString *v26;
  __CFString *Mutable;
  const __CFString *v28;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  const void *v33;
  uint8_t buf[4];
  int v35;
  _BYTE buffer[1025];
  uint64_t v37;
  CFRange v38;

  v37 = *MEMORY[0x1E0C80C00];
  bzero(buffer, 0x401uLL);
  v8 = (uint64_t (*)(uint64_t, const char *))*((_QWORD *)off_1EE3FD5A0 + 30);
  if (!v8)
    v8 = (uint64_t (*)(uint64_t, const char *))sub_19B6BBD84(30, 2);
  v9 = (const __CFArray *)v8(a1, "com.apple.private.MobileGestalt.AllowedProtectedKeys");
  v10 = v9;
  if (!v9)
    goto LABEL_16;
  v11 = CFGetTypeID(v9);
  if (v11 != CFArrayGetTypeID())
  {
    v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14)
      v13 = v14 + 1;
    v15 = (uint64_t (*)(uint64_t))*((_QWORD *)off_1EE3FD5A0 + 35);
    if (!v15)
      v15 = (uint64_t (*)(uint64_t))sub_19B6BBD84(35, 2);
    v16 = v15(a1);
    _MGLog((uint64_t)v13, 462, (uint64_t)CFSTR("pid %d entitlement is not an array"), v17, v18, v19, v20, v21, v16);
    v12 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
LABEL_17:
      if (!a4)
        goto LABEL_34;
      goto LABEL_18;
    }
    v22 = (uint64_t (*)(uint64_t))*((_QWORD *)off_1EE3FD5A0 + 35);
    if (!v22)
      v22 = (uint64_t (*)(uint64_t))sub_19B6BBD84(35, 2);
    *(_DWORD *)buf = 67109120;
    v35 = v22(a1);
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "pid %d entitlement is not an array", buf, 8u);
LABEL_16:
    v12 = 0;
    goto LABEL_17;
  }
  v38.length = CFArrayGetCount(v10);
  v38.location = 0;
  if (CFArrayContainsValue(v10, v38, a2))
  {
    v12 = 1;
    if (!a4)
      goto LABEL_34;
  }
  else
  {
    v12 = sub_19B6B7BE8((_BOOL8)v10, a2, a3);
    if (!a4)
      goto LABEL_34;
  }
LABEL_18:
  v23 = (uint64_t (*)(uint64_t))*((_QWORD *)off_1EE3FD5A0 + 35);
  if (!v23)
    v23 = (uint64_t (*)(uint64_t))sub_19B6BBD84(35, 2);
  v24 = v23(a1);
  if (!v12)
  {
    if (*a4)
    {
      CFStringAppendFormat(*a4, 0, CFSTR(" and IS NOT appropriately entitled"), v30);
      goto LABEL_34;
    }
    Mutable = CFStringCreateMutable(0, 0);
    *a4 = Mutable;
    v32 = sub_19B6BAD28(v24, buffer, 1025);
    v33 = a2;
    v31 = v24;
    v28 = CFSTR("pid %d (%s) IS NOT appropriately entitled to fetch %@");
    goto LABEL_33;
  }
  v25 = MGGetBoolAnswer((const char **)CFSTR("LBJfwOEzExRxzlAnSuI7eg"));
  v26 = *a4;
  if (v25)
  {
    if (v26)
    {
      CFStringAppendFormat(v26, 0, CFSTR(" but IS appropriately entitled; NO SANDBOX BUGS need be filed"), v30);
      goto LABEL_34;
    }
    Mutable = CFStringCreateMutable(0, 0);
    *a4 = Mutable;
    v32 = sub_19B6BAD28(v24, buffer, 1025);
    v33 = a2;
    v31 = v24;
    v28 = CFSTR("pid %d (%s) IS appropriately entitled to fetch %@");
LABEL_33:
    CFStringAppendFormat(Mutable, 0, v28, v31, v32, v33);
    goto LABEL_34;
  }
  if (v26)
    CFRelease(v26);
  *a4 = 0;
LABEL_34:
  if (v10)
    CFRelease(v10);
  return v12;
}

BOOL sub_19B6B7BE8(_BOOL8 result, const void *a2, int a3)
{
  const __CFArray *v5;
  CFTypeID v6;
  CFIndex Count;
  CFIndex v8;
  CFIndex v9;
  const __CFString *ValueAtIndex;

  if (result)
  {
    v5 = (const __CFArray *)result;
    v6 = CFGetTypeID((CFTypeRef)result);
    if (v6 == CFArrayGetTypeID() && (Count = CFArrayGetCount(v5), v8 = Count - 1, Count >= 1))
    {
      v9 = 0;
      do
      {
        ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(v5, v9);
        result = sub_19B6B7E54(ValueAtIndex, a2, a3);
        if (result)
          break;
      }
      while (v8 != v9++);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFTypeRef sub_19B6B7D88(io_registry_entry_t a1, CFTypeRef cf, const void *a3, int a4)
{
  CFTypeID v8;
  CFIndex Count;
  CFIndex v10;
  CFIndex v11;
  const __CFString *ValueAtIndex;

  if (!cf)
    return 0;
  v8 = CFGetTypeID(cf);
  if (v8 != CFArrayGetTypeID())
    return 0;
  Count = CFArrayGetCount((CFArrayRef)cf);
  if (Count < 1)
    return 0;
  v10 = Count;
  v11 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)cf, v11);
    if (sub_19B6B7E54(ValueAtIndex, a3, a4))
      break;
    if (v10 == ++v11)
      return 0;
  }
  return IORegistryEntryCreateCFProperty(a1, ValueAtIndex, 0, 0);
}

BOOL sub_19B6B7E54(const __CFString *a1, const void *a2, int a3)
{
  CFTypeID v6;
  char *v7;
  char *v8;
  CC_LONG v9;
  CFStringRef v10;
  CFStringRef v11;
  _BOOL8 v12;
  char cStr[16];
  __int128 v15;
  char __str[94];
  unsigned __int8 md[4];
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = CFGetTypeID(a1);
    if (v6 == CFStringGetTypeID())
    {
      if (CFStringGetLength(a1))
      {
        if (CFStringGetCharacterAtIndex(a1, 0) == a3)
        {
          v7 = sub_19B6B8004(a1);
          if (v7)
          {
            v8 = v7;
            *(_OWORD *)cStr = 0u;
            v15 = 0u;
            v9 = snprintf(__str, 0x5EuLL, "%s%s", "MGCopyAnswer", v7);
            if ((v9 & 0x80000000) != 0)
            {
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)md = 136315138;
                v18 = v8;
                _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Obfuscation error for %s", md, 0xCu);
              }
            }
            else
            {
              CC_MD5(__str, v9, md);
              if (!CNEncode())
              {
                BYTE6(v15) = 0;
                v10 = CFStringCreateWithCString(0, cStr, 0x8000100u);
                if (v10)
                {
                  v11 = v10;
                  v12 = CFEqual(a2, v10) != 0;
                  CFRelease(v11);
LABEL_15:
                  free(v8);
                  return v12;
                }
              }
            }
            v12 = 0;
            goto LABEL_15;
          }
        }
      }
    }
  }
  return 0;
}

char *sub_19B6B8004(const __CFString *a1)
{
  CFIndex Length;
  CFIndex v3;
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char v21;
  uint8_t buf[4];
  const __CFString *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0;
  Length = CFStringGetLength(a1);
  v3 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v4 = (char *)malloc_type_malloc(v3, 0xD62C06AuLL);
  if (!v4)
  {
    v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v13)
      v19 = v13 + 1;
    else
      v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v19, 920, (uint64_t)CFSTR("failed to allocate string buffer"), v14, v15, v16, v17, v18, v21);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to allocate string buffer", buf, 2u);
    }
    return 0;
  }
  v5 = v4;
  if (!CFStringGetCString(a1, v4, v3, 0x8000100u))
  {
    v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v6)
      v12 = v6 + 1;
    else
      v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v12, 924, (uint64_t)CFSTR("CFStringGetCString failed for '%@'"), v7, v8, v9, v10, v11, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v23 = a1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CFStringGetCString failed for '%@'", buf, 0xCu);
    }
    free(v5);
    return 0;
  }
  return v5;
}

uint64_t MGGetSInt32Answer(const char **a1, unsigned int a2)
{
  unsigned int v4;

  v4 = a2;
  if (sub_19B6B84A4(a1, 5, 5, kCFNumberSInt32Type, &v4))
    return v4;
  else
    return a2;
}

BOOL sub_19B6B84A4(const char **a1, int a2, int a3, CFNumberType a4, void *a5)
{
  const __CFNumber *v10;
  const __CFNumber *v12;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  int v24;
  uint8_t buf[4];
  const char **v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v24 = 0;
  v10 = (const __CFNumber *)sub_19B6B89E4(a1, &v24);
  if (v24 != a2 && v24 != a3)
  {
    v14 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    v15 = qword_1E3BD0820[a2];
    v16 = qword_1E3BD0820[a3];
    _MGLog((uint64_t)v14, 992, (uint64_t)CFSTR("%@ does not return %s or %s, actually returns %s"), v17, v18, v19, v20, v21, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v23 = qword_1E3BD0820[v24];
      *(_DWORD *)buf = 138413058;
      v26 = a1;
      v27 = 2080;
      v28 = v15;
      v29 = 2080;
      v30 = v16;
      v31 = 2080;
      v32 = v23;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%@ does not return %s or %s, actually returns %s", buf, 0x2Au);
    }
    abort();
  }
  v12 = v10;
  if (v10)
  {
    if (!CFNumberGetValue(v10, a4, a5))
      sub_19B70ED14(a2, (uint64_t)a1, (uint64_t)v12);
    CFRelease(v12);
  }
  return v12 != 0;
}

void sub_19B6B861C(const __CFDictionary *a1, uint64_t a2)
{
  CFIndex Count;
  const void **v5;
  CFIndex v6;
  const void **v7;
  const void *v8;
  const void *Value;
  BOOL v10;
  char v11;

  if (a1)
  {
    Count = CFDictionaryGetCount(a1);
    v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(a1, v5, 0);
    v6 = Count - 1;
    if (Count >= 1)
    {
      v7 = v5;
      do
      {
        v11 = 0;
        v8 = *v7++;
        Value = CFDictionaryGetValue(a1, v8);
        (*(void (**)(uint64_t, const void *, const void *, char *))(a2 + 16))(a2, v8, Value, &v11);
        if (v11)
          v10 = 1;
        else
          v10 = v6 == 0;
        --v6;
      }
      while (!v10);
    }
    free(v5);
  }
}

void sub_19B6B86E0(uint64_t a1, const char **a2, const void *a3, _BYTE *a4)
{
  const char **v8;
  const char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint32_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  int v34;
  uint8_t buf[4];
  const char **v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v8 = sub_19B6B8928(a2);
  if (!v8)
  {
    v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v19)
      v25 = v19 + 1;
    else
      v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v25, 177, (uint64_t)CFSTR("cache extra has invalid question %@"), v20, v21, v22, v23, v24, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 138412290;
    v36 = a2;
    v17 = MEMORY[0x1E0C81028];
    v18 = "cache extra has invalid question %@";
LABEL_13:
    v26 = 12;
LABEL_14:
    _os_log_impl(&dword_19B6B1000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v26);
LABEL_15:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
LABEL_16:
    *a4 = 1;
    return;
  }
  v9 = v8;
  if (((_BYTE)v8[19] & 0x10) == 0)
  {
    v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v10)
      v16 = v10 + 1;
    else
      v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v16, 182, (uint64_t)CFSTR("%@ is not precacheable"), v11, v12, v13, v14, v15, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    *(_DWORD *)buf = 138412290;
    v36 = a2;
    v17 = MEMORY[0x1E0C81028];
    v18 = "%@ is not precacheable";
    goto LABEL_13;
  }
  if (*((unsigned __int16 *)v8 + 77) >= 0x28Du)
  {
    v27 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v27)
      v33 = v27 + 1;
    else
      v33 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v33, 187, (uint64_t)CFSTR("index %d is illegal"), v28, v29, v30, v31, v32, *((_WORD *)v9 + 77));
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_15;
    v34 = *((__int16 *)v9 + 77);
    *(_DWORD *)buf = 67109120;
    LODWORD(v36) = v34;
    v17 = MEMORY[0x1E0C81028];
    v18 = "index %d is illegal";
    v26 = 8;
    goto LABEL_14;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    qword_1ECD36028[*((__int16 *)v8 + 77)] = CFRetain(a3);
    a4 = (char *)&qword_1ECD36028[653] + *((__int16 *)v9 + 77);
    goto LABEL_16;
  }
}

const char **sub_19B6B8928(const char **a1)
{
  return sub_19B6B8DD8(a1, 1);
}

uint64_t MGIsDeviceOneOfType(const UInt8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  _BOOL8 v9;
  const UInt8 **v10;
  const UInt8 **v12;

  if (!a1)
    return 0;
  if ((MGIsDeviceOfType(a1) & 1) != 0)
    return 1;
  v12 = (const UInt8 **)&a9;
  do
  {
    v10 = v12++;
    v9 = *v10 != 0;
  }
  while (*v10 && !MGIsDeviceOfType(*v10));
  return v9;
}

const UInt8 *MGIsDeviceOfType(const UInt8 *result)
{
  const UInt8 *v1;

  if (result)
  {
    v1 = result;
    result = sub_19B6B9360();
    if (result)
      return (const UInt8 *)(*(_QWORD *)v1 == *(_QWORD *)result
                          && *((_QWORD *)v1 + 1) == *((_QWORD *)result + 1)
                          && *((_DWORD *)v1 + 4) == (unint64_t)*((unsigned int *)result + 4));
  }
  return result;
}

const void *sub_19B6B89E4(const char **a1, int *a2)
{
  const char **v4;
  uint64_t v5;
  int v6;
  void *v7;
  const void *v8;
  uint64_t v10;
  CFNumberType v11;
  uint64_t (*v12)(const char **);
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  const void **v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE buf[18];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  sub_19B6B9160(0);
  if (!sub_19B6B8DD8(a1, 1))
  {
    sub_19B6B9160(5);
    v8 = 0;
    v6 = 0;
    goto LABEL_14;
  }
  v4 = sub_19B6B8DD8(a1, 1);
  if (!v4)
  {
    v6 = 0;
LABEL_7:
    if (qword_1EE3FD7B8 != -1)
      dispatch_once(&qword_1EE3FD7B8, &unk_1E3BD0E48);
    if (!CFSetContainsValue((CFSetRef)qword_1EE3FD7B0, a1))
      goto LABEL_13;
    v8 = sub_19B6DB984(a1);
    if (!v8 || (sub_19B6B973C((uint64_t)a1, v8, v6) & 1) != 0)
      goto LABEL_14;
LABEL_12:
    CFRelease(v8);
    sub_19B6B9160(7);
LABEL_13:
    v8 = 0;
    goto LABEL_14;
  }
  v5 = (uint64_t)v4;
  v6 = *((_DWORD *)v4 + 39);
  v7 = sub_19B6B91B0((uint64_t)v4);
  if (v7)
  {
    v8 = v7;
    goto LABEL_14;
  }
  if (!*(_QWORD *)(v5 + 8))
    goto LABEL_7;
  if ((byte_1EE3FD870 & 1) == 0)
  {
    v10 = getpid();
    if (sub_19B6B94A8((uint64_t *)v5, v10, 0))
    {
      if (qword_1ECD35B78 != -1)
        dispatch_once(&qword_1ECD35B78, &unk_1E3BD0E88);
      if ((byte_1EE3FD870 & 1) == 0)
      {
        sub_19B6B9160(0);
        v12 = (uint64_t (*)(const char **))*((_QWORD *)off_1EE3FD5A0 + 29);
        if (!v12)
          v12 = (uint64_t (*)(const char **))sub_19B6BBD84(29, 2);
        v8 = (const void *)v12(a1);
        if (v8 && (sub_19B6B973C((uint64_t)a1, v8, v6) & 1) == 0)
        {
          CFRelease(v8);
          sub_19B6B9160(7);
          v8 = 0;
        }
        if (sub_19B6B6454() == 9)
        {
          v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          v19 = v13 ? v13 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          _MGLog((uint64_t)v19, 774, (uint64_t)CFSTR("no access to %@ (see <rdar://problem/11744455>)"), v14, v15, v16, v17, v18, (char)a1);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)&buf[4] = a1;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "no access to %@ (see <rdar://problem/11744455>)", buf, 0xCu);
          }
        }
LABEL_46:
        if (!v8)
          goto LABEL_14;
        goto LABEL_47;
      }
    }
  }
  if ((*(_BYTE *)(v5 + 152) & 1) != 0)
  {
    switch(v6)
    {
      case 5:
        *(_DWORD *)buf = (*(uint64_t (**)(void))(v5 + 8))();
        v11 = kCFNumberSInt32Type;
        break;
      case 6:
        *(_QWORD *)buf = (*(uint64_t (**)(void))(v5 + 8))();
        v11 = kCFNumberSInt64Type;
        break;
      case 7:
        *(_DWORD *)buf = (*(float (**)(void))(v5 + 8))();
        v11 = kCFNumberFloat32Type;
        break;
      case 11:
        v20 = (*(uint64_t (**)(void))(v5 + 8))();
        v21 = (const void **)MEMORY[0x1E0C9AE50];
        if (!v20)
          v21 = (const void **)MEMORY[0x1E0C9AE40];
        v8 = *v21;
        goto LABEL_46;
      default:
        v22 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
        _MGLog((uint64_t)v22, 809, (uint64_t)CFSTR("can't convert type %d for %@"), v23, v24, v25, v26, v27, v6);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109378;
          *(_DWORD *)&buf[4] = v6;
          *(_WORD *)&buf[8] = 2112;
          *(_QWORD *)&buf[10] = a1;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "can't convert type %d for %@", buf, 0x12u);
        }
        goto LABEL_13;
    }
    v8 = CFNumberCreate(0, v11, buf);
    goto LABEL_46;
  }
  v8 = (const void *)(*(uint64_t (**)(void))(v5 + 8))();
  if (!v8)
    goto LABEL_14;
  if ((sub_19B6B973C((uint64_t)a1, v8, v6) & 1) == 0)
    goto LABEL_12;
LABEL_47:
  if (*(__int16 *)(v5 + 154) != -1)
    sub_19B6B998C(v5, (const __CFBoolean *)v8);
LABEL_14:
  if (a2)
    *a2 = v6;
  return v8;
}

const char **sub_19B6B8DD8(const char **result, int a2)
{
  const char **v3;
  int v4;
  CC_LONG v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  __int128 v29;
  __int128 v30;
  char buffer[16];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int16 v35;
  char __str[4];
  const char **v37;
  unsigned __int8 md[4];
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!result)
    return result;
  v3 = result;
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  *(_OWORD *)buffer = 0u;
  v32 = 0u;
  if (!CFStringGetCString((CFStringRef)result, buffer, 66, 0x8000100u))
  {
    if (!a2)
      return 0;
    v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    v12 = v6 ? v6 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v12, 252, (uint64_t)CFSTR("string %@ is too long to be a valid gestalt question"), v7, v8, v9, v10, v11, (char)v3);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 0;
    *(_DWORD *)__str = 138412290;
    v37 = v3;
    v13 = MEMORY[0x1E0C81028];
    v14 = "string %@ is too long to be a valid gestalt question";
LABEL_29:
    _os_log_impl(&dword_19B6B1000, v13, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)__str, 0xCu);
    return 0;
  }
  v4 = strlen(buffer);
  result = sub_19B6B90C4(buffer, v4);
  if (result)
    return result;
  v29 = 0u;
  v30 = 0u;
  v5 = snprintf(__str, 0x5EuLL, "%s%s", "MGCopyAnswer", buffer);
  if ((v5 & 0x80000000) != 0)
  {
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)md = 136315138;
      v39 = buffer;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Obfuscation error for %s", md, 0xCu);
    }
  }
  else
  {
    CC_MD5(__str, v5, md);
    if (!CNEncode())
    {
      BYTE6(v30) = 0;
      result = sub_19B6B90C4((const char *)&v29, 22);
      goto LABEL_22;
    }
  }
  if ((a2 & 1) == 0)
    return 0;
  v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v15)
    v21 = v15 + 1;
  else
    v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v21, 265, (uint64_t)CFSTR("failed to transform %@"), v16, v17, v18, v19, v20, (char)v3);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__str = 138412290;
    v37 = v3;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to transform %@", (uint8_t *)__str, 0xCu);
  }
  result = 0;
LABEL_22:
  if (!result && a2)
  {
    v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v22)
      v28 = v22 + 1;
    else
      v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v28, 270, (uint64_t)CFSTR("string %@ is not a valid gestalt question"), v23, v24, v25, v26, v27, (char)v3);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 0;
    *(_DWORD *)__str = 138412290;
    v37 = v3;
    v13 = MEMORY[0x1E0C81028];
    v14 = "string %@ is not a valid gestalt question";
    goto LABEL_29;
  }
  return result;
}

const char **sub_19B6B90C4(const char *a1, int a2)
{
  uint64_t v2;
  unsigned int v3;
  const char **v4;
  const char *v5;

  if (a2 != 22)
    return 0;
  v2 = *(unsigned __int8 *)a1;
  v3 = word_19B7185A0[*((unsigned __int8 *)a1 + 9)]
     + word_19B7185A0[v2]
     + word_19B7185A0[*((unsigned __int8 *)a1 + 4) + 14]
     + 22;
  if (v3 > 0xA33)
    return 0;
  v4 = (const char **)((char *)&unk_1E3B69DF8 + 160 * v3);
  v5 = *v4;
  if (!*v4 || (_DWORD)v2 != *(unsigned __int8 *)v5 || strcmp(a1 + 1, v5 + 1))
    return 0;
  return v4;
}

const void *MGCopyAnswer(const char **a1)
{
  return sub_19B6B89E4(a1, 0);
}

uint64_t sub_19B6B9160(int a1)
{
  if (qword_1ECD35CE0 != -1)
    dispatch_once(&qword_1ECD35CE0, &unk_1E3BD0E08);
  return pthread_setspecific(qword_1ECD35CD8, (const void *)a1);
}

void *sub_19B6B91B0(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char *v4;
  CFNumberType v5;
  void *v6;
  void **v8;

  if (qword_1ECD35CD0 != -1)
    dispatch_once(&qword_1ECD35CD0, &unk_1E3BCFF38);
  if (*(unsigned __int16 *)(a1 + 154) > 0x28Cu)
    return 0;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD35BC0);
  v3 = *(__int16 *)(a1 + 154);
  if (*((_BYTE *)&unk_1ECD36028 + v3 + 5224))
  {
    switch(*(_DWORD *)(a1 + 156))
    {
      case 5:
        v4 = (char *)&unk_1ECD36028 + 8 * v3;
        v5 = kCFNumberSInt32Type;
        goto LABEL_11;
      case 6:
        v4 = (char *)&unk_1ECD36028 + 8 * v3;
        v5 = kCFNumberSInt64Type;
        goto LABEL_11;
      case 7:
        v4 = (char *)&unk_1ECD36028 + 8 * v3;
        v5 = kCFNumberFloat32Type;
LABEL_11:
        v6 = CFNumberCreate(0, v5, v4);
        goto LABEL_13;
      case 0xB:
        if (*((_BYTE *)&unk_1ECD36028 + 8 * v3))
          v8 = (void **)MEMORY[0x1E0C9AE50];
        else
          v8 = (void **)MEMORY[0x1E0C9AE40];
        v2 = *v8;
        break;
      default:
        v6 = (void *)CFRetain(*((CFTypeRef *)&unk_1ECD36028 + v3));
LABEL_13:
        v2 = v6;
        break;
    }
  }
  else
  {
    v2 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD35BC0);
  return v2;
}

BOOL MGGetBoolAnswer(const char **a1)
{
  const void *v2;
  _BOOL8 v3;
  int v5;

  v5 = 0;
  v2 = sub_19B6B89E4(a1, &v5);
  if (v5 != 11 && sub_19B6B6454() != 5)
    sub_19B70EC4C((unsigned int *)&v5, (uint64_t)a1, v2);
  if (!v2)
    return 0;
  v3 = v2 == (const void *)*MEMORY[0x1E0C9AE50];
  CFRelease(v2);
  return v3;
}

const UInt8 *sub_19B6B9360()
{
  const UInt8 *result;

  if (qword_1ECD35BC8 != -1)
    dispatch_once(&qword_1ECD35BC8, &unk_1E3BCFE78);
  result = (const UInt8 *)qword_1ECD35BD0;
  if (qword_1ECD35BD0)
    return CFDataGetBytePtr((CFDataRef)qword_1ECD35BD0);
  return result;
}

void _MGLog(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const __CFAllocator *v9;
  const __CFString *v10;
  const __CFString *v11;
  CFIndex Length;
  CFIndex v13;
  char *v14;

  v9 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v10 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("libMobileGestalt %s:%d: %@"), a1, a2, a3, 0);
  v11 = CFStringCreateWithFormatAndArguments(v9, 0, v10, &a9);
  Length = CFStringGetLength(v11);
  v13 = CFStringGetMaximumSizeForEncoding(Length, 0x8000100u) + 1;
  v14 = (char *)malloc_type_calloc(1uLL, v13, 0xBF105376uLL);
  if (v14)
  {
    if (CFStringGetCString(v11, v14, v13, 0x8000100u) == 1 && off_1EE3FD7C0 != 0)
      off_1EE3FD7C0(v14);
  }
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  free(v14);
}

uint64_t sub_19B6B94A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t result;
  NSObject *v12;
  _BOOL4 v13;
  uint64_t v14;
  const char *v15;
  _BOOL4 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if ((byte_1EE3FD870 & 1) != 0)
    goto LABEL_15;
  if (a1[18])
  {
    getpid();
    if (sandbox_check())
    {
      if (qword_1ECD35BA8 != -1)
        dispatch_once(&qword_1ECD35BA8, &unk_1E3B69DD8);
      v6 = qword_1ECD35BA0;
      if (!os_log_type_enabled((os_log_t)qword_1ECD35BA0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_15;
      v7 = *a1;
      *(_DWORD *)buf = 136315138;
      v19 = v7;
      v8 = "elided IOKit fast path for key: %s";
      goto LABEL_14;
    }
    if (qword_1ECD35BA8 != -1)
      dispatch_once(&qword_1ECD35BA8, &unk_1E3B69DD8);
    v12 = qword_1ECD35BA0;
    v13 = os_log_type_enabled((os_log_t)qword_1ECD35BA0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v13)
    {
      v14 = *a1;
      *(_DWORD *)buf = 136315138;
      v19 = v14;
      v15 = "taking IOKit fast path for key: %s";
LABEL_27:
      _os_log_impl(&dword_19B6B1000, v12, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
      return 0;
    }
  }
  else
  {
    if ((a1[19] & 0x20) == 0)
    {
LABEL_15:
      if ((a1[19] & 2) != 0)
        return 1;
      v10 = (uint64_t (*)(uint64_t, uint64_t))a1[2];
      if (v10)
        return v10(a2, a3);
      return 0;
    }
    getpid();
    if (sandbox_check())
    {
      if (qword_1ECD35BA8 != -1)
        dispatch_once(&qword_1ECD35BA8, &unk_1E3B69DD8);
      v6 = qword_1ECD35BA0;
      if (!os_log_type_enabled((os_log_t)qword_1ECD35BA0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_15;
      v9 = *a1;
      *(_DWORD *)buf = 136315138;
      v19 = v9;
      v8 = "elided platform fast path for key: %s";
LABEL_14:
      _os_log_impl(&dword_19B6B1000, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 0xCu);
      goto LABEL_15;
    }
    if (qword_1ECD35BA8 != -1)
      dispatch_once(&qword_1ECD35BA8, &unk_1E3B69DD8);
    v12 = qword_1ECD35BA0;
    v16 = os_log_type_enabled((os_log_t)qword_1ECD35BA0, OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v16)
    {
      v17 = *a1;
      *(_DWORD *)buf = 136315138;
      v19 = v17;
      v15 = "taking platform fast path for key: %s";
      goto LABEL_27;
    }
  }
  return result;
}

uint64_t sub_19B6B973C(uint64_t a1, CFTypeRef cf, int a3)
{
  uint64_t result;
  CFTypeID v7;
  CFTypeID v8;
  CFStringRef v9;
  CFStringRef v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  CFStringRef v21;
  __int16 v22;
  CFStringRef v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (qword_1ECD35CC8 != -1)
    dispatch_once(&qword_1ECD35CC8, &unk_1E3BD0EC8);
  result = 1;
  switch(a3)
  {
    case 0:
    case 1:
      return result;
    case 5:
      result = sub_19B6B9CA0(a1, cf, 5, kCFNumberSInt32Type);
      break;
    case 6:
      result = sub_19B6B9CA0(a1, cf, 6, kCFNumberSInt64Type);
      break;
    case 7:
      result = sub_19B6B9CA0(a1, cf, 7, kCFNumberFloat32Type);
      break;
    case 8:
      result = sub_19B6B9CA0(a1, cf, 8, kCFNumberFloat64Type);
      break;
    default:
      v7 = CFGetTypeID(cf);
      v8 = qword_1ECD35BD8[a3];
      if (v7 == v8)
      {
        result = 1;
      }
      else
      {
        v9 = CFCopyTypeIDDescription(v7);
        v10 = CFCopyTypeIDDescription(v8);
        v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v11)
          v17 = v11 + 1;
        else
          v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v17, 600, (uint64_t)CFSTR("Value for %@ has incorrect type (should be %@, is %@)"), v12, v13, v14, v15, v16, a1);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412802;
          v19 = a1;
          v20 = 2112;
          v21 = v10;
          v22 = 2112;
          v23 = v9;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Value for %@ has incorrect type (should be %@, is %@)", buf, 0x20u);
        }
        CFRelease(v9);
        CFRelease(v10);
        result = 0;
      }
      break;
  }
  return result;
}

void sub_19B6B998C(uint64_t a1, const __CFBoolean *a2)
{
  uint64_t v4;
  char *v5;
  const __CFNumber *v6;
  CFNumberType v7;

  if (*(unsigned __int16 *)(a1 + 154) <= 0x28Cu)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD35BC0);
    v4 = *(__int16 *)(a1 + 154);
    if (!*((_BYTE *)&unk_1ECD36028 + v4 + 5224))
    {
      switch(*(_DWORD *)(a1 + 156))
      {
        case 5:
          v5 = (char *)&unk_1ECD36028 + 8 * v4;
          v6 = a2;
          v7 = kCFNumberSInt32Type;
          goto LABEL_7;
        case 6:
          v5 = (char *)&unk_1ECD36028 + 8 * v4;
          v6 = a2;
          v7 = kCFNumberSInt64Type;
          goto LABEL_7;
        case 7:
          v5 = (char *)&unk_1ECD36028 + 8 * v4;
          v6 = a2;
          v7 = kCFNumberFloat32Type;
LABEL_7:
          CFNumberGetValue(v6, v7, v5);
          break;
        case 0xB:
          *((_BYTE *)&unk_1ECD36028 + 8 * *(__int16 *)(a1 + 154)) = CFBooleanGetValue(a2) != 0;
          break;
        default:
          *((_QWORD *)&unk_1ECD36028 + *(__int16 *)(a1 + 154)) = CFRetain(a2);
          break;
      }
      *((_BYTE *)&unk_1ECD36028 + *(__int16 *)(a1 + 154) + 5224) = 1;
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD35BC0);
  }
}

const __CFString *sub_19B6B9AA0()
{
  const __CFString *v0;
  const void *v1;
  const __CFLocale *v2;
  CFTypeRef Value;

  if (sub_19B6B9C44() == 3)
  {
    if (dyld_program_sdk_at_least())
      return CFSTR("iPadOS");
    else
      return CFSTR("iOS");
  }
  if ((sub_19B6B9C44() == 1 || sub_19B6B9C44() == 2 || sub_19B6B9C44() == 3)
    && !sub_19B6B9C84())
  {
    return CFSTR("iOS");
  }
  if (sub_19B6B9C44() == 6)
    return CFSTR("watchOS");
  if (sub_19B6B9C44() == 8)
    return CFSTR("bridgeOS");
  if (sub_19B6B9C44() == 4 || sub_19B6B9C44() == 7)
  {
    v1 = sub_19B6B89E4((const char **)CFSTR("h63QSdBCiT/z0WU6rdQv6Q"), 0);
    v2 = CFLocaleCopyCurrent();
    Value = CFLocaleGetValue(v2, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
    if (v1 && CFEqual(v1, CFSTR("CH")))
    {
      v0 = CFSTR("Apple TVOS");
    }
    else
    {
      if (Value && CFEqual(Value, CFSTR("CH")))
        v0 = CFSTR("Apple TVOS");
      else
        v0 = CFSTR("tvOS");
      if (!v1)
        goto LABEL_25;
    }
    CFRelease(v1);
LABEL_25:
    if (v2)
      CFRelease(v2);
    return v0;
  }
  if (sub_19B6B9C44() == 11)
    return CFSTR("visionOS");
  return (const __CFString *)sub_19B6B89E4((const char **)CFSTR("ivIu8YTDnBSrYv/SN4G8Ag"), 0);
}

uint64_t sub_19B6B9C44()
{
  if (qword_1ECD35B98 != -1)
    dispatch_once(&qword_1ECD35B98, &unk_1E3BD04A0);
  return dword_1ECD35B00;
}

BOOL sub_19B6B9C84()
{
  return _CFMZEnabled() != 0;
}

uint64_t sub_19B6B9CA0(uint64_t a1, CFTypeRef cf, int a3, CFNumberType a4)
{
  CFTypeID v8;
  uint64_t result;
  CFTypeID v10;
  CFStringRef v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  _BOOL4 v27;
  uint8_t buf[4];
  CFTypeRef v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  int valuePtr;
  uint64_t v35;
  __int16 v36;
  CFStringRef v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v8 = CFGetTypeID(cf);
  if (v8 != CFNumberGetTypeID())
  {
    v10 = CFGetTypeID(cf);
    v11 = CFCopyTypeIDDescription(v10);
    v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v12)
      v18 = v12 + 1;
    else
      v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v18, 549, (uint64_t)CFSTR("Value for %@ has incorrect type (should be CFNumber, is %@)"), v13, v14, v15, v16, v17, a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      valuePtr = 138412546;
      v35 = a1;
      v36 = 2112;
      v37 = v11;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Value for %@ has incorrect type (should be CFNumber, is %@)", (uint8_t *)&valuePtr, 0x16u);
    }
    CFRelease(v11);
    return 0;
  }
  if (CFNumberGetValue((CFNumberRef)cf, a4, &valuePtr))
    return 1;
  v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v19)
    v25 = v19 + 1;
  else
    v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  v26 = qword_1E3BD0820[a3];
  _MGLog((uint64_t)v25, 556, (uint64_t)CFSTR("Value %@ for %@ cannot be represented as %s"), v20, v21, v22, v23, v24, (char)cf);
  v27 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v27)
  {
    *(_DWORD *)buf = 138412802;
    v29 = cf;
    v30 = 2112;
    v31 = a1;
    v32 = 2080;
    v33 = v26;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Value %@ for %@ cannot be represented as %s", buf, 0x20u);
    return 0;
  }
  return result;
}

__CFDictionary *sub_19B6B9E94()
{
  uint64_t v0;
  uint64_t v1;
  const char *v2;
  char *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  char *v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  __CFDictionary *Mutable;
  CFNumberRef v31;
  CFNumberRef v32;
  CFNumberRef v33;
  CFNumberRef v34;
  CFNumberRef v35;
  CFNumberRef v36;
  CFNumberRef v37;
  CFNumberRef v38;
  const char *v39;
  char *v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  char *v48;
  _BYTE buf[12];
  __int16 v51;
  char *v52;
  statfs v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  memset(&v53, 0, 512);
  if (statfs("/", &v53) == -1)
  {
    v2 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3)
      v2 = v3 + 1;
    v4 = __error();
    strerror(*v4);
    _MGLog((uint64_t)v2, 4113, (uint64_t)CFSTR("statfs(%s): %s"), v5, v6, v7, v8, v9, (char)"/");
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 0;
    v10 = __error();
    v11 = strerror(*v10);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "/";
    v51 = 2080;
    v52 = v11;
    v12 = MEMORY[0x1E0C81028];
    goto LABEL_21;
  }
  v0 = sub_19B6BA3C0((const char *)&v53);
  v1 = v0 + v53.f_bavail * v53.f_bsize;
  bzero(&v53, 0x878uLL);
  if (statfs("/mnt4", &v53) == -1)
  {
    v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14)
      v13 = v14 + 1;
    v15 = __error();
    strerror(*v15);
    _MGLog((uint64_t)v13, 4126, (uint64_t)CFSTR("statfs(%s): %s"), v16, v17, v18, v19, v20, (char)"/mnt4");
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v21 = __error();
      v22 = strerror(*v21);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "/mnt4";
      v51 = 2080;
      v52 = v22;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "statfs(%s): %s", buf, 0x16u);
    }
  }
  else
  {
    v1 += sub_19B6BA3C0((const char *)&v53);
  }
  bzero(&v53, 0x878uLL);
  if (statfs("/private/var", &v53) == -1)
  {
    v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v40 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v40)
      v39 = v40 + 1;
    v41 = __error();
    strerror(*v41);
    _MGLog((uint64_t)v39, 4136, (uint64_t)CFSTR("statfs(%s): %s"), v42, v43, v44, v45, v46, (char)"/private/var");
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 0;
    v47 = __error();
    v48 = strerror(*v47);
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = "/private/var";
    v51 = 2080;
    v52 = v48;
    v12 = MEMORY[0x1E0C81028];
LABEL_21:
    _os_log_impl(&dword_19B6B1000, v12, OS_LOG_TYPE_DEFAULT, "statfs(%s): %s", buf, 0x16u);
    return 0;
  }
  v23 = v53.f_blocks * v53.f_bsize - v0;
  v24 = v23 - sub_19B6BA3C0((const char *)&v53);
  v25 = sub_19B6BA524();
  v26 = v53.f_bavail * v53.f_bsize;
  v27 = v26 >= 0xC800000;
  v28 = v26 - 209715200;
  if (v27)
    v29 = v28;
  else
    v29 = 0;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  *(_QWORD *)buf = v0;
  v31 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, CFSTR("TotalSystemCapacity"), v31);
  CFRelease(v31);
  *(_QWORD *)buf = 0;
  v32 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, CFSTR("TotalSystemAvailable"), v32);
  CFRelease(v32);
  *(_QWORD *)buf = v23;
  v33 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, CFSTR("TotalDataCapacity"), v33);
  CFRelease(v33);
  *(_QWORD *)buf = v24;
  v34 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, CFSTR("TotalDataAvailable"), v34);
  CFRelease(v34);
  *(_QWORD *)buf = v25;
  v35 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, CFSTR("TotalDiskCapacity"), v35);
  CFRelease(v35);
  *(_QWORD *)buf = 209715200;
  v36 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, CFSTR("AmountDataReserved"), v36);
  CFRelease(v36);
  *(_QWORD *)buf = v29;
  v37 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, CFSTR("AmountDataAvailable"), v37);
  CFRelease(v37);
  *(_QWORD *)buf = v1;
  v38 = CFNumberCreate(0, kCFNumberSInt64Type, buf);
  CFDictionarySetValue(Mutable, CFSTR("AmountRestoreAvailable"), v38);
  CFRelease(v38);
  return Mutable;
}

uint64_t sub_19B6BA3C0(const char *a1)
{
  unsigned int *v2;
  int v3;
  const char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[2];
  _QWORD v14[3];
  uint8_t buf[4];
  unsigned int *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14[2] = 0;
  v14[0] = 5;
  v14[1] = 2155872256;
  memset(v13, 0, 12);
  v2 = (unsigned int *)(a1 + 88);
  if (!getattrlist(a1 + 88, v14, v13, 0xCuLL, 0))
    return *(_QWORD *)((char *)v13 + 4);
  v3 = *__error();
  v4 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5)
    v4 = v5 + 1;
  strerror(v3);
  _MGLog((uint64_t)v4, 4082, (uint64_t)CFSTR("getattrlist(%s, ATTR_VOL_SPACEUSED): %s"), v6, v7, v8, v9, v10, (char)v2);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v11 = strerror(v3);
    *(_DWORD *)buf = 136315394;
    v16 = v2;
    v17 = 2080;
    v18 = v11;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "getattrlist(%s, ATTR_VOL_SPACEUSED): %s", buf, 0x16u);
  }
  if (v3 == 45)
    return (*((_QWORD *)a1 + 1) - *((_QWORD *)a1 + 2)) * *(unsigned int *)a1;
  else
    return -1;
}

uint64_t sub_19B6BA524()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  const __CFNumber *CFProperty;
  const __CFNumber *v5;
  CFTypeID v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t valuePtr;
  uint8_t buf[4];
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  valuePtr = -1;
  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOBSDNameMatching(*MEMORY[0x1E0CBBAA8], 0, "disk0");
  MatchingService = IOServiceGetMatchingService(v0, v1);
  if (MatchingService)
  {
    v3 = MatchingService;
    CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(MatchingService, CFSTR("Size"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (!CFProperty)
    {
      v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v24)
        v30 = v24 + 1;
      else
        v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v30, 3966, (uint64_t)CFSTR("%s: No kIOMediaSizeKey found for disk0!"), v25, v26, v27, v28, v29, (char)"SInt64 NANDSize(void)");
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v40 = "SInt64 NANDSize(void)";
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s: No kIOMediaSizeKey found for disk0!", buf, 0xCu);
      }
      goto LABEL_28;
    }
    v5 = CFProperty;
    v6 = CFGetTypeID(CFProperty);
    if (v6 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue(v5, kCFNumberSInt64Type, &valuePtr))
        goto LABEL_27;
      v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      v13 = v7 ? v7 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v13, 3959, (uint64_t)CFSTR("%s: Could not get SInt64 value for kIOMediaSizeKey!"), v8, v9, v10, v11, v12, (char)"SInt64 NANDSize(void)");
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_27;
      *(_DWORD *)buf = 136315138;
      v40 = "SInt64 NANDSize(void)";
      v14 = MEMORY[0x1E0C81028];
      v15 = "%s: Could not get SInt64 value for kIOMediaSizeKey!";
    }
    else
    {
      v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v31)
        v37 = v31 + 1;
      else
        v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v37, 3962, (uint64_t)CFSTR("%s: kIOMediaSizeKey for disk0 not a CFNumber!"), v32, v33, v34, v35, v36, (char)"SInt64 NANDSize(void)");
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_27;
      *(_DWORD *)buf = 136315138;
      v40 = "SInt64 NANDSize(void)";
      v14 = MEMORY[0x1E0C81028];
      v15 = "%s: kIOMediaSizeKey for disk0 not a CFNumber!";
    }
    _os_log_impl(&dword_19B6B1000, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 0xCu);
LABEL_27:
    CFRelease(v5);
LABEL_28:
    IOObjectRelease(v3);
    return valuePtr;
  }
  v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v16)
    v22 = v16 + 1;
  else
    v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v22, 3951, (uint64_t)CFSTR("%s: IOServiceGetMatchingService() for disk0 failed!"), v17, v18, v19, v20, v21, (char)"SInt64 NANDSize(void)");
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v40 = "SInt64 NANDSize(void)";
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s: IOServiceGetMatchingService() for disk0 failed!", buf, 0xCu);
  }
  return -1;
}

CFNumberRef sub_19B6BA824(unsigned int a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  const __CFData *v9;
  const __CFData *v10;
  CFTypeID v11;
  const UInt8 *BytePtr;
  const UInt8 *v13;
  int v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  CFNumberRef v22;
  unsigned int (*v23)(uint8_t *, int *);
  uint8_t *v24;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  float v33;
  CFNumberType v34;
  char v35;
  int v36;
  uint8_t buf[4];
  unsigned int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 4)
  {
    if (a1 > 6)
      goto LABEL_6;
    if (((1 << a1) & 6) != 0)
    {
      v36 = -1;
      *(_DWORD *)buf = -1;
      v23 = (unsigned int (*)(uint8_t *, int *))*((_QWORD *)off_1EE3FD5A0 + 34);
      if (!v23)
        v23 = (unsigned int (*)(uint8_t *, int *))sub_19B6BBD84(34, 2);
      if (!v23(buf, &v36))
        return 0;
      if (a1 == 1)
        v24 = buf;
      else
        v24 = (uint8_t *)&v36;
      return CFNumberCreate(0, kCFNumberSInt32Type, v24);
    }
    if (((1 << a1) & 0x30) == 0)
    {
      if (((1 << a1) & 0x48) != 0)
        return 0;
LABEL_6:
      v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
      if (v2)
        v8 = v2 + 1;
      else
        v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
      _MGLog((uint64_t)v8, 229, (uint64_t)CFSTR("request for unknown screen param %d"), v3, v4, v5, v6, v7, a1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        sub_19B70EB4C(a1);
      return 0;
    }
  }
  v9 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("oBbtJ8x+s1q0OkaiocPuog"));
  v10 = v9;
  if (v9)
  {
    v11 = CFGetTypeID(v9);
    if (v11 == CFDataGetTypeID() && CFDataGetLength(v10) == 24)
    {
      BytePtr = CFDataGetBytePtr(v10);
      v13 = BytePtr;
      switch(a1)
      {
        case 1u:
          v14 = *(_DWORD *)BytePtr;
          goto LABEL_44;
        case 2u:
          v13 = BytePtr + 4;
          v14 = *((_DWORD *)BytePtr + 1);
          goto LABEL_44;
        case 3u:
          v13 = BytePtr + 8;
          v14 = *((_DWORD *)BytePtr + 2);
          goto LABEL_44;
        case 4u:
          v13 = BytePtr + 12;
          v33 = *((float *)BytePtr + 3);
          goto LABEL_41;
        case 5u:
          v13 = BytePtr + 16;
          v33 = *((float *)BytePtr + 4);
LABEL_41:
          if (v33 == -1.0)
            goto LABEL_47;
          v34 = kCFNumberFloatType;
          goto LABEL_46;
        case 6u:
          v13 = BytePtr + 20;
          v14 = *((_DWORD *)BytePtr + 5);
LABEL_44:
          if (v14 == -1)
            goto LABEL_47;
          v34 = kCFNumberSInt32Type;
LABEL_46:
          v22 = CFNumberCreate(0, v34, v13);
          break;
        default:
          v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
          if (v26)
            v32 = v26 + 1;
          else
            v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
          _MGLog((uint64_t)v32, 258, (uint64_t)CFSTR("request for unknown screen param %d"), v27, v28, v29, v30, v31, a1);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v38 = a1;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "request for unknown screen param %d", buf, 8u);
          }
LABEL_47:
          v22 = 0;
          break;
      }
LABEL_22:
      CFRelease(v10);
      return v22;
    }
  }
  v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
  if (v15)
    v21 = v15 + 1;
  else
    v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
  _MGLog((uint64_t)v21, 236, (uint64_t)CFSTR("failed to get static screen info"), v16, v17, v18, v19, v20, v35);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to get static screen info", buf, 2u);
  }
  v22 = 0;
  if (v10)
    goto LABEL_22;
  return v22;
}

BOOL sub_19B6BAB4C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("re6Zb+zwFKJNlkQTUeT+/w"), a2);
}

BOOL sub_19B6BAB70(uint64_t a1, uint64_t a2, __CFString **a3)
{
  int v6;
  int v7;
  __CFString *Mutable;
  const char *v9;
  _BYTE buffer[1025];
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v6 = sandbox_check();
  v7 = v6;
  if (a3 && v6)
  {
    bzero(buffer, 0x401uLL);
    Mutable = CFStringCreateMutable(0, 0);
    *a3 = Mutable;
    v9 = sub_19B6BAD28(a1, buffer, 1025);
    CFStringAppendFormat(Mutable, 0, CFSTR("pid %d (%s) does not have sandbox access for %@"), a1, v9, a2);
  }
  return v7 == 0;
}

CFStringRef sub_19B6BAC60()
{
  return sub_19B6BC39C("IODeviceTree:/", CFSTR("model-number"), 0);
}

BOOL sub_19B6BAC78(char *a1, const __CFString *a2, int a3)
{
  CFTypeRef v3;
  CFTypeRef v4;

  v3 = sub_19B6BC3DC(a1, a2, a3);
  v4 = v3;
  if (v3)
    CFRelease(v3);
  return v4 != 0;
}

BOOL sub_19B6BACAC(char *a1, const __CFString *a2, int a3)
{
  return sub_19B6BAD7C(a1, a2, a3, 0, 0) != 0;
}

BOOL sub_19B6BACD0(uint64_t a1, const void *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  _BOOL8 v5;

  v3 = (const __CFDictionary *)sub_19B6BB9D0();
  if (!v3)
    return 0;
  v4 = v3;
  v5 = CFDictionaryGetValue(v3, a2) == (const void *)*MEMORY[0x1E0C9AE50];
  CFRelease(v4);
  return v5;
}

const char *sub_19B6BAD28(int a1, void *buffer, int buffersize)
{
  char *v5;

  if (proc_pidinfo(a1, 11, 1uLL, buffer, buffersize))
    return "unknown pid";
  v5 = rindex((const char *)buffer, 47);
  if (v5)
    return v5 + 1;
  else
    return (const char *)buffer;
}

uint64_t sub_19B6BAD7C(char *a1, const __CFString *a2, int a3, uint64_t a4, int a5)
{
  CFTypeRef v9;
  const void *v10;
  CFTypeID v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  CFTypeID v19;
  CFTypeID v20;
  const char *v21;
  char *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint32_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  unsigned int valuePtr;
  uint8_t buf[4];
  CFTypeID v49;
  __int16 v50;
  void *v51;
  __int16 v52;
  const void *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v9 = sub_19B6BC3DC(a1, a2, a3);
  if (v9)
  {
    v10 = v9;
    v11 = CFGetTypeID(v9);
    if (v11 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      if (CFNumberGetValue((CFNumberRef)v10, kCFNumberIntType, &valuePtr))
      {
        a4 = valuePtr;
LABEL_31:
        CFRelease(v10);
        return a4;
      }
      v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v31)
        v37 = v31 + 1;
      else
        v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      _MGLog((uint64_t)v37, 462, (uint64_t)CFSTR("Error getting int value for key %@ (%@)!"), v32, v33, v34, v35, v36, (char)a2);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_31;
      *(_DWORD *)buf = 138412546;
      v49 = (CFTypeID)a2;
      v50 = 2112;
      v51 = (void *)v10;
      v29 = MEMORY[0x1E0C81028];
      v30 = "Error getting int value for key %@ (%@)!";
    }
    else
    {
      v19 = CFGetTypeID(v10);
      if (v19 == CFDataGetTypeID())
      {
        v20 = CFGetTypeID(v10);
        if (v20 == CFDataGetTypeID() && CFDataGetLength((CFDataRef)v10) == 4)
        {
          a4 = *(unsigned int *)CFDataGetBytePtr((CFDataRef)v10);
          goto LABEL_31;
        }
        v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
        if (v39)
          v45 = v39 + 1;
        else
          v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
        _MGLog((uint64_t)v45, 468, (uint64_t)CFSTR("value for %@ property of %s is invalid (%@)"), v40, v41, v42, v43, v44, (char)a2);
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_31;
        *(_DWORD *)buf = 138412802;
        v49 = (CFTypeID)a2;
        v50 = 2080;
        v51 = a1;
        v52 = 2112;
        v53 = v10;
        v29 = MEMORY[0x1E0C81028];
        v30 = "value for %@ property of %s is invalid (%@)";
        v38 = 32;
LABEL_30:
        _os_log_impl(&dword_19B6B1000, v29, OS_LOG_TYPE_DEFAULT, v30, buf, v38);
        goto LABEL_31;
      }
      v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v22)
        v21 = v22 + 1;
      v23 = CFGetTypeID(v10);
      _MGLog((uint64_t)v21, 472, (uint64_t)CFSTR("invalid CFTypeID %lu for key %@"), v24, v25, v26, v27, v28, v23);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_31;
      *(_DWORD *)buf = 134218242;
      v49 = CFGetTypeID(v10);
      v50 = 2112;
      v51 = (void *)a2;
      v29 = MEMORY[0x1E0C81028];
      v30 = "invalid CFTypeID %lu for key %@";
    }
    v38 = 22;
    goto LABEL_30;
  }
  if (a5)
  {
    v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    v18 = v12
        ? v12 + 1
        : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v18, 477, (uint64_t)CFSTR("missing value for property %@"), v13, v14, v15, v16, v17, (char)a2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v49 = (CFTypeID)a2;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "missing value for property %@", buf, 0xCu);
    }
  }
  return a4;
}

const __CFString *sub_19B6BB0B8(const __CFData *a1)
{
  const UInt8 *BytePtr;
  CFIndex Length;
  CFStringRef v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  size_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t buf[4];
  uint8_t *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return CFSTR("ffffffffffffffffffffffffffffffffffffffff");
  BytePtr = CFDataGetBytePtr(a1);
  Length = CFDataGetLength(a1);
  if (Length == 20)
  {
    v4 = CFStringCreateWithFormat(0, 0, CFSTR("%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x"), *BytePtr, BytePtr[1], BytePtr[2], BytePtr[3], BytePtr[4], BytePtr[5], BytePtr[6], BytePtr[7], BytePtr[8], BytePtr[9], BytePtr[10], BytePtr[11], BytePtr[12], BytePtr[13], BytePtr[14], BytePtr[15],
           BytePtr[16],
           BytePtr[17],
           BytePtr[18],
           BytePtr[19]);
    if (!v4)
    {
      v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v5)
        v11 = v5 + 1;
      else
        v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v11, 3480, (uint64_t)CFSTR("copyHex20String failed"), v6, v7, v8, v9, v10, buf[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "copyHex20String failed", buf, 2u);
      }
      v4 = 0;
    }
  }
  else
  {
    v12 = Length;
    v4 = CFStringCreateFromExternalRepresentation(0, a1, 0x8000100u);
    if (!v4)
    {
      MEMORY[0x1E0C80A78]();
      memcpy(&buf[-((v12 + 16) & 0xFFFFFFFFFFFFFFF0)], BytePtr, v12);
      buf[v12 - ((v12 + 16) & 0xFFFFFFFFFFFFFFF0)] = 0;
      v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13)
        v19 = v13 + 1;
      else
        v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v19, 3489, (uint64_t)CFSTR("CFStringCreateFromExternalRepresentation %s failed"), v14, v15, v16, v17, v18, (char)&buf[-((v12 + 16) & 0xF0)]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v22 = &buf[-((v12 + 16) & 0xFFFFFFFFFFFFFFF0)];
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CFStringCreateFromExternalRepresentation %s failed", buf, 0xCu);
      }
      v4 = CFSTR("FFFFFFFF-FFFFFFFFFFFFFFFF");
    }
  }
  CFRelease(a1);
  return v4;
}

uint64_t sub_19B6BB344()
{
  uint64_t result;
  uint64_t (*v1)(const __CFString *);
  BOOL v2;

  v2 = 0;
  result = sub_19B6BB720((uint64_t)CFSTR("AllowsVoIP"), &v2);
  if (!v2)
  {
    if (MGGetBoolAnswer((const char **)CFSTR("6MnVtR+c9LeR46bMxvR5Yw")))
    {
      if (MGGetBoolAnswer((const char **)CFSTR("L5al7b+7JATD/izSJeH0aQ")))
      {
        return 0;
      }
      else
      {
        v1 = (uint64_t (*)(const __CFString *))*((_QWORD *)off_1EE3FD5A0 + 40);
        if (!v1)
          v1 = (uint64_t (*)(const __CFString *))sub_19B6BBD84(40, 2);
        return v1(CFSTR("voip"));
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t sub_19B6BB3D4()
{
  uint64_t v0;
  _BOOL8 v1;
  const __CFDictionary *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  const void *v10;
  const void *v11;
  const __CFDictionary *Value;
  const __CFDictionary *v13;
  CFTypeID v14;
  const void *v15;
  const void *v16;
  CFTypeID v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(const __CFString *);
  int v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  BOOL v34;
  uint8_t buf[4];
  _BYTE v36[10];
  __int16 v37;
  int v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 4)
    return 1;
  v34 = 0;
  v1 = sub_19B6BB720((uint64_t)CFSTR("AllowsFaceTime"), &v34);
  if (v34)
    return v1;
  v2 = (const __CFDictionary *)sub_19B6B7518("/System/Library/CoreServices/OverrideSoftwareBehaviors.plist");
  v0 = sub_19B6BB344();
  v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3)
    v9 = v3 + 1;
  else
    v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v9, 4392, (uint64_t)CFSTR("Determined that voip capability is: %d"), v4, v5, v6, v7, v8, v0);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)v36 = v0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Determined that voip capability is: %d", buf, 8u);
  }
  if (v2)
  {
    v10 = sub_19B6B89E4((const char **)CFSTR("h63QSdBCiT/z0WU6rdQv6Q"), 0);
    if (v10)
    {
      v11 = v10;
      if (CFDictionaryContainsKey(v2, v10))
      {
        Value = (const __CFDictionary *)CFDictionaryGetValue(v2, v11);
        if (Value)
        {
          v13 = Value;
          v14 = CFGetTypeID(Value);
          if (v14 == CFDictionaryGetTypeID())
          {
            if (CFDictionaryContainsKey(v13, CFSTR("voip")))
            {
              v15 = CFDictionaryGetValue(v13, CFSTR("voip"));
              if (v15)
              {
                v16 = v15;
                v17 = CFGetTypeID(v15);
                if (v17 == CFBooleanGetTypeID() && v16 == (const void *)*MEMORY[0x1E0C9AE50])
                {
                  v18 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                  _MGLog((uint64_t)v18, 4419, (uint64_t)CFSTR("Found the override for regionCode: %@"), v19, v20, v21, v22, v23, (char)v11);
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 138412290;
                    *(_QWORD *)v36 = v11;
                    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Found the override for regionCode: %@", buf, 0xCu);
                  }
                  v33 = 0;
                  LODWORD(v0) = sub_19B6BB720((uint64_t)CFSTR("AllowsVoIP"), (BOOL *)&v33);
                  v24 = (uint64_t (*)(const __CFString *))*((_QWORD *)off_1EE3FD5A0 + 40);
                  if (!v24)
                    v24 = (uint64_t (*)(const __CFString *))sub_19B6BBD84(40, 2);
                  v25 = v24(CFSTR("disablevoipforlocale"));
                  v26 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                  _MGLog((uint64_t)v26, 4434, (uint64_t)CFSTR("Determined carrier_override_present: %d, carrier_override: %d, springboard_locale_override: %d "), v27, v28, v29, v30, v31, v33);
                  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 67109632;
                    *(_DWORD *)v36 = v33;
                    *(_WORD *)&v36[4] = 1024;
                    *(_DWORD *)&v36[6] = v0;
                    v37 = 1024;
                    v38 = v25;
                    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Determined carrier_override_present: %d, carrier_override: %d, springboard_locale_override: %d ", buf, 0x14u);
                  }
                  if (v33)
                    v0 = v0;
                  else
                    v0 = v25 ^ 1u;
                }
              }
            }
          }
        }
      }
      CFRelease(v11);
    }
    CFRelease(CFSTR("voip"));
    CFRelease(v2);
  }
  return v0;
}

BOOL sub_19B6BB720(uint64_t a1, BOOL *a2)
{
  _BOOL8 v4;
  BOOL v5;
  __int16 v7;

  v7 = 0;
  if (!a2)
    sub_19B70EB24();
  v4 = 1;
  if (sub_19B6BB7AC(a1, 1, (BOOL *)&v7 + 1))
  {
    v5 = 0;
  }
  else
  {
    v4 = sub_19B6BB7AC(a1, 2, (BOOL *)&v7);
    v5 = (_BYTE)v7 != 0;
  }
  if (HIBYTE(v7))
    v5 = 1;
  *a2 = v5;
  return v4;
}

BOOL sub_19B6BB7AC(uint64_t a1, uint64_t a2, BOOL *a3)
{
  CFStringRef v6;
  BOOL v7;
  _BOOL8 v8;
  CFStringRef v9;
  __int16 v11;

  v11 = 0;
  if (!a3)
    sub_19B70EAFC();
  v6 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.carrier_%d"), a2);
  v7 = sub_19B6BB8A4((uint64_t)CFSTR("/var/mobile/Library/Carrier Bundles"), (uint64_t)v6, a1, (_BYTE *)&v11 + 1);
  if (v6)
    CFRelease(v6);
  if (v7)
  {
    v8 = 1;
  }
  else
  {
    v9 = CFStringCreateWithFormat(0, 0, CFSTR("com.apple.country.carrier_%d"), a2);
    v8 = sub_19B6BB8A4((uint64_t)CFSTR("/var/mobile/Library/CountryBundles/"), (uint64_t)v9, a1, &v11);
    if (v9)
      CFRelease(v9);
  }
  *a3 = (HIBYTE(v11) | v11) != 0;
  return v8;
}

BOOL sub_19B6BB8A4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  const __CFBoolean *v5;
  const __CFBoolean *v6;
  CFTypeID v7;
  _BOOL8 v8;

  if (!a4)
    sub_19B70EAD4();
  *a4 = 0;
  v5 = (const __CFBoolean *)_CFPreferencesCopyValueWithContainer();
  if (!v5)
    return 0;
  v6 = v5;
  v7 = CFGetTypeID(v5);
  if (v7 == CFBooleanGetTypeID())
  {
    *a4 = 1;
    v8 = CFBooleanGetValue(v6) != 0;
  }
  else
  {
    v8 = 0;
  }
  CFRelease(v6);
  return v8;
}

const __CFString *sub_19B6BB94C()
{
  const __CFData *v0;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("nFRqKto/RuQAV1P+0/qkBA"), 0);
  return sub_19B6BB0B8(v0);
}

CFStringRef sub_19B6BB96C(int a1, char *a2, const __CFString *a3)
{
  CFStringRef result;
  CFStringRef v5;
  CFStringRef v6;

  result = (CFStringRef)sub_19B6BBC28(a1, a2, a3);
  if (result)
  {
    v5 = result;
    v6 = sub_19B6BC494(result, (uint64_t)a3);
    CFRelease(v5);
    return v6;
  }
  return result;
}

const void *sub_19B6BB9AC()
{
  return sub_19B6B89E4((const char **)CFSTR("ZApuwHXWV8RCz0iVzMnqLw"), 0);
}

BOOL sub_19B6BB9BC()
{
  return sub_19B6BACD0((uint64_t)CFSTR("NoVOIP"), CFSTR("RegionalBehaviorNoVOIP"));
}

uint64_t sub_19B6BB9D0()
{
  uint64_t v0;

  if (qword_1ECD35B68 != -1)
    dispatch_once(&qword_1ECD35B68, &unk_1E3BCFE98);
  v0 = qword_1ECD35B60;
  if (qword_1ECD35B60)
    CFRetain((CFTypeRef)qword_1ECD35B60);
  return v0;
}

uint64_t sub_19B6BBA28()
{
  uint64_t (*v0)(_QWORD);
  unsigned int v1;
  unsigned int v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t buf[4];
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v0 = (uint64_t (*)(_QWORD))*((_QWORD *)off_1EE3FD5A0 + 95);
  if (!v0)
    v0 = (uint64_t (*)(_QWORD))sub_19B6BBD84(95, 2);
  v1 = v0(0);
  v2 = v1;
  if (v1 < 4)
    return (6u >> (v1 & 0xF)) & 1;
  v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v4)
    v10 = v4 + 1;
  else
    v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v10, 4658, (uint64_t)CFSTR("MKBGetDeviceLockState returned unknown state %d"), v5, v6, v7, v8, v9, v2);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v12 = v2;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "MKBGetDeviceLockState returned unknown state %d", buf, 8u);
  }
  return 1;
}

CFNumberRef sub_19B6BBB3C()
{
  return sub_19B6BA824(1u);
}

CFNumberRef sub_19B6BBB44()
{
  return sub_19B6BA824(2u);
}

uint64_t sub_19B6BBB4C()
{
  int v0;
  uint64_t (*v1)(const char *, const __CFString *, const __CFString *, _QWORD);
  const __CFString *v3;
  uint64_t (*v4)(const char *, const __CFString *, _QWORD, const __CFString *);
  uint64_t v5;
  uint64_t v6;

  v0 = sub_19B6B9C44();
  if (v0 == 2)
  {
    v3 = CFSTR("iPod");
  }
  else
  {
    if (v0 == 4)
    {
      v1 = (uint64_t (*)(const char *, const __CFString *, const __CFString *, _QWORD))*((_QWORD *)off_1EE3FD5A0
                                                                                                 + 31);
      if (!v1)
        v1 = (uint64_t (*)(const char *, const __CFString *, const __CFString *, _QWORD))sub_19B6BBD84(31, 2);
      return v1("/Applications/PineBoard.app", CFSTR("DeviceName"), CFSTR("Apple TV"), 0);
    }
    v3 = sub_19B6BBD4C();
  }
  v4 = (uint64_t (*)(const char *, const __CFString *, _QWORD, const __CFString *))*((_QWORD *)off_1EE3FD5A0
                                                                                             + 31);
  if (!v4)
    v4 = (uint64_t (*)(const char *, const __CFString *, _QWORD, const __CFString *))sub_19B6BBD84(31, 2);
  v5 = v4("/System/Library/CoreServices/SpringBoard.app", v3, 0, CFSTR("SpringBoard"));
  if (v5)
  {
    v6 = v5;
    CFRelease(v3);
    return v6;
  }
  return (uint64_t)v3;
}

CFTypeRef sub_19B6BBC28(int a1, char *a2, const __CFString *a3)
{
  io_registry_entry_t v4;
  io_object_t v5;
  CFTypeRef CFProperty;

  v4 = sub_19B6BBC80(a1, a2);
  if (!v4)
    return 0;
  v5 = v4;
  CFProperty = IORegistryEntryCreateCFProperty(v4, a3, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  IOObjectRelease(v5);
  return CFProperty;
}

uint64_t sub_19B6BBC80(int a1, char *name)
{
  const __CFDictionary *v2;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t v11[16];

  if (a1)
    v2 = IOServiceNameMatching(name);
  else
    v2 = IOServiceMatching(name);
  if (v2)
    return IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v2);
  v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
  if (v4)
    v10 = v4 + 1;
  else
    v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
  _MGLog((uint64_t)v10, 90, (uint64_t)CFSTR("Can't create matching dict"), v5, v6, v7, v8, v9, v11[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Can't create matching dict", v11, 2u);
  }
  return 0;
}

const __CFString *sub_19B6BBD4C()
{
  unsigned int v0;

  v0 = sub_19B6B9C44() - 1;
  if (v0 > 0xA)
    return CFSTR("Unknown");
  else
    return *(&off_1E3BD0EE8 + (int)v0);
}

uint64_t sub_19B6BBD84(uint64_t a1, uint64_t a2)
{
  uint64_t (*v5)();
  uint64_t (*v6)();

  if (qword_1ECD35BB8 != -1)
    dispatch_once(&qword_1ECD35BB8, &unk_1E3BCFED8);
  if (byte_1ECD35BB0 == 1)
    return (*((uint64_t (**)(uint64_t, uint64_t))off_1EE3FD5A0 + 41))(a1, a2);
  pthread_mutex_lock(&stru_1ECD35B08);
  v5 = (uint64_t (*)())&unk_1EE3FD880;
  if ((_DWORD)a2 != 1)
    v5 = 0;
  if ((_DWORD)a2 == 2)
    v6 = sub_19B6C1BC8;
  else
    v6 = v5;
  *((_QWORD *)off_1EE3FD5A0 + (int)a1) = v6;
  pthread_mutex_unlock(&stru_1ECD35B08);
  return (uint64_t)v6;
}

__CFDictionary *sub_19B6BBE50()
{
  const __CFAllocator *v0;
  __CFDictionary *Mutable;
  CFStringRef v2;
  CFStringRef v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFNumberRef v6;
  const __CFString *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  CFStringRef v15;
  CFStringRef v16;
  CFNumberRef v17;
  CFNumberRef v18;
  CFStringRef v19;
  CFNumberRef v20;
  CFStringRef v21;
  CFStringRef v22;
  _BOOL4 v23;
  float v24;
  CFNumberRef v25;
  char value;
  CFStringRef valuea;
  const __CFAllocator *v29;
  int v30;
  int valuePtr;
  int v32;
  uint8_t buf[4];

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    valuePtr = 32401;
    v32 = 2;
    v30 = 0;
    v2 = sub_19B6BC808();
    if (dyld_get_active_platform() == 6)
    {
      v3 = sub_19B6C6900();
      v4 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      v5 = CFNumberCreate(0, kCFNumberIntType, &v32);
      v6 = CFNumberCreate(0, kCFNumberIntType, &v30);
      if (v3)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDeviceProductDescription"), v3);
        CFRelease(v3);
      }
      CFDictionaryAddValue(Mutable, CFSTR("ArtworkDeviceIdiom"), CFSTR("pad"));
      CFRelease(CFSTR("pad"));
      if (v4)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDeviceSubType"), v4);
        CFRelease(v4);
      }
      if (v5)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDeviceScaleFactor"), v5);
        CFRelease(v5);
      }
      if (v2)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDisplayGamut"), v2);
        CFRelease(v2);
      }
      CFDictionaryAddValue(Mutable, CFSTR("ArtworkDynamicDisplayMode"), CFSTR("0"));
      CFRelease(CFSTR("0"));
      if (v6)
      {
        CFDictionaryAddValue(Mutable, CFSTR("DevicePerformanceMemoryClass"), v6);
        CFRelease(v6);
      }
      CFDictionaryAddValue(Mutable, CFSTR("GraphicsFeatureSetClass"), CFSTR("APPLE4"));
      CFRelease(CFSTR("APPLE4"));
      CFDictionaryAddValue(Mutable, CFSTR("GraphicsFeatureSetFallbacks"), CFSTR("APPLE3:APPLE3v1:APPLE2:APPLE1:GLES2,0"));
      CFRelease(CFSTR("APPLE3:APPLE3v1:APPLE2:APPLE1:GLES2,0"));
      CFDictionaryAddValue(Mutable, CFSTR("CompatibleDeviceFallback"), CFSTR("0"));
      v7 = CFSTR("0");
    }
    else
    {
      v29 = v0;
      v15 = sub_19B6BC39C("IODeviceTree:/product", CFSTR("product-description"), 0);
      v16 = sub_19B6BC39C("IODeviceTree:/product", CFSTR("artwork-device-idiom"), 0);
      v17 = sub_19B6BC5F4("IODeviceTree:/product", CFSTR("artwork-device-subtype"), 0);
      v18 = sub_19B6BC5F4("IODeviceTree:/product", CFSTR("artwork-scale-factor"), 0);
      v19 = sub_19B6BC39C("IODeviceTree:/product", CFSTR("artwork-dynamic-displaymode"), 0);
      v20 = sub_19B6BC5F4("IODeviceTree:/product", CFSTR("device-perf-memory-class"), 0);
      valuea = sub_19B6BC39C("IODeviceTree:/product", CFSTR("graphics-featureset-class"), 0);
      v21 = sub_19B6BC39C("IODeviceTree:/product", CFSTR("graphics-featureset-fallbacks"), 0);
      v22 = sub_19B6BC39C("IODeviceTree:/product", CFSTR("compatible-device-fallback"), 0);
      if (v15)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDeviceProductDescription"), v15);
        CFRelease(v15);
      }
      if (v16)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDeviceIdiom"), v16);
        CFRelease(v16);
      }
      if (v17)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDeviceSubType"), v17);
        CFRelease(v17);
      }
      if (v18)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDeviceScaleFactor"), v18);
        CFRelease(v18);
      }
      if (v2)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDisplayGamut"), v2);
        CFRelease(v2);
      }
      if (v19)
      {
        CFDictionaryAddValue(Mutable, CFSTR("ArtworkDynamicDisplayMode"), v19);
        CFRelease(v19);
      }
      if (v20)
      {
        CFDictionaryAddValue(Mutable, CFSTR("DevicePerformanceMemoryClass"), v20);
        CFRelease(v20);
      }
      if (valuea)
      {
        CFDictionaryAddValue(Mutable, CFSTR("GraphicsFeatureSetClass"), valuea);
        CFRelease(valuea);
      }
      v0 = v29;
      if (v21)
      {
        CFDictionaryAddValue(Mutable, CFSTR("GraphicsFeatureSetFallbacks"), v21);
        CFRelease(v21);
      }
      if (!v22)
        goto LABEL_40;
      CFDictionaryAddValue(Mutable, CFSTR("CompatibleDeviceFallback"), v22);
      v7 = v22;
    }
    CFRelease(v7);
LABEL_40:
    if (!CFDictionaryGetValue(Mutable, CFSTR("ArtworkDeviceScaleFactor")))
    {
      *(_DWORD *)buf = -1082130432;
      v23 = sub_19B6B84A4((const char **)CFSTR("SNfDJgQFV2Xj7+WnozcJPw"), 7, 7, kCFNumberFloat32Type, buf);
      v24 = *(float *)buf;
      if (!v23)
        v24 = -1.0;
      *(float *)buf = v24;
      v25 = CFNumberCreate(v0, kCFNumberFloatType, buf);
      CFDictionarySetValue(Mutable, CFSTR("ArtworkDeviceScaleFactor"), v25);
      if (v25)
        CFRelease(v25);
    }
    return Mutable;
  }
  v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v8)
    v14 = v8 + 1;
  else
    v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v14, 5774, (uint64_t)CFSTR("Failed to create dictionary"), v9, v10, v11, v12, v13, value);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to create dictionary", buf, 2u);
  }
  return Mutable;
}

CFStringRef sub_19B6BC39C(char *a1, const __CFString *a2, int a3)
{
  CFStringRef result;
  CFStringRef v5;
  CFStringRef v6;

  result = (CFStringRef)sub_19B6BC3DC(a1, a2, a3);
  if (result)
  {
    v5 = result;
    v6 = sub_19B6BC494(result, (uint64_t)a2);
    CFRelease(v5);
    return v6;
  }
  return result;
}

CFTypeRef sub_19B6BC3DC(char *path, const __CFString *a2, int a3)
{
  io_registry_entry_t v5;
  io_registry_entry_t v6;
  CFTypeRef v7;
  const void *v8;
  CFTypeRef CFProperty;

  v5 = IORegistryEntryFromPath(*MEMORY[0x1E0CBBAA8], path);
  if (v5)
  {
    v6 = v5;
    if (!a3)
    {
      CFProperty = IORegistryEntryCreateCFProperty(v5, a2, 0, 0);
      goto LABEL_7;
    }
    v7 = IORegistryEntryCreateCFProperty(v5, CFSTR("IORegistryEntryPropertyKeys"), 0, 0);
    if (v7)
    {
      v8 = v7;
      CFProperty = sub_19B6B7D88(v6, v7, a2, a3);
      CFRelease(v8);
LABEL_7:
      IOObjectRelease(v6);
      return CFProperty;
    }
  }
  return 0;
}

CFStringRef sub_19B6BC494(const void *a1, uint64_t a2)
{
  CFTypeID v4;
  CFTypeID v6;
  const char *BytePtr;
  const UInt8 *v8;
  CFIndex Length;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;

  if (!a1)
    return 0;
  v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
    return (CFStringRef)CFRetain(a1);
  v6 = CFGetTypeID(a1);
  if (v6 != CFDataGetTypeID() || CFDataGetLength((CFDataRef)a1) < 1)
  {
    v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v10)
      v16 = v10 + 1;
    else
      v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v16, 552, (uint64_t)CFSTR("Unexpected type returned for key %@."), v11, v12, v13, v14, v15, a2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
      sub_19B70F084(a2);
    return 0;
  }
  BytePtr = (const char *)CFDataGetBytePtr((CFDataRef)a1);
  if (!BytePtr[CFDataGetLength((CFDataRef)a1) - 1])
    return CFStringCreateWithCString(0, BytePtr, 0x8000100u);
  v8 = CFDataGetBytePtr((CFDataRef)a1);
  Length = CFDataGetLength((CFDataRef)a1);
  return CFStringCreateWithBytes(0, v8, Length, 0x8000100u, 0);
}

CFNumberRef sub_19B6BC5F4(char *a1, const __CFString *a2, int a3)
{
  const __CFData *v5;
  const __CFData *v6;
  CFTypeID v7;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFNumberType v10;
  CFNumberRef v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  CFIndex v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint8_t buf[4];
  char *v32;
  __int16 v33;
  const __CFString *v34;
  __int16 v35;
  CFIndex v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = (const __CFData *)sub_19B6BC3DC(a1, a2, a3);
  if (v5)
  {
    v6 = v5;
    v7 = CFGetTypeID(v5);
    if (v7 == CFDataGetTypeID())
    {
      Length = CFDataGetLength(v6);
      if ((unint64_t)(Length - 1) <= 3)
      {
        BytePtr = CFDataGetBytePtr(v6);
        v10 = kCFNumberSInt32Type;
LABEL_15:
        v11 = CFNumberCreate(0, v10, BytePtr);
        goto LABEL_16;
      }
      if ((unint64_t)(Length - 1) <= 7)
      {
        BytePtr = CFDataGetBytePtr(v6);
        v10 = kCFNumberSInt64Type;
        goto LABEL_15;
      }
      v23 = Length;
      v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v24)
        v30 = v24 + 1;
      else
        v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      _MGLog((uint64_t)v30, 513, (uint64_t)CFSTR("can't create number from data %s %@ of length %llu\n"), v25, v26, v27, v28, v29, (char)a1);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
LABEL_12:
        v11 = 0;
LABEL_16:
        CFRelease(v6);
        return v11;
      }
      *(_DWORD *)buf = 136315650;
      v32 = a1;
      v33 = 2112;
      v34 = a2;
      v35 = 2048;
      v36 = v23;
      v19 = MEMORY[0x1E0C81028];
      v20 = "can't create number from data %s %@ of length %llu\n";
      v21 = 32;
    }
    else
    {
      v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v12)
        v18 = v12 + 1;
      else
        v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      _MGLog((uint64_t)v18, 516, (uint64_t)CFSTR("can't create number from %s %@"), v13, v14, v15, v16, v17, (char)a1);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_12;
      *(_DWORD *)buf = 136315394;
      v32 = a1;
      v33 = 2112;
      v34 = a2;
      v19 = MEMORY[0x1E0C81028];
      v20 = "can't create number from %s %@";
      v21 = 22;
    }
    _os_log_impl(&dword_19B6B1000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
    goto LABEL_12;
  }
  return 0;
}

CFStringRef sub_19B6BC808()
{
  int active_platform;
  CFStringRef result;

  active_platform = dyld_get_active_platform();
  result = CFSTR("P3");
  if (active_platform != 6)
  {
    result = sub_19B6BC39C("IODeviceTree:/product", CFSTR("artwork-display-gamut"), 0);
    if (!result)
    {
      if (sub_19B6C0338())
        return CFSTR("P3");
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_19B6BC864()
{
  return pthread_key_create((pthread_key_t *)&qword_1ECD35CD8, 0);
}

uint64_t sub_19B6BC874()
{
  return sub_19B6B669C(1);
}

uint64_t sub_19B6BC888()
{
  uint64_t result;
  size_t v1;
  int v2;

  v2 = 0;
  v1 = 4;
  result = sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0);
  if (!(_DWORD)result)
    byte_1EE3FD878 = v2 != 0;
  return result;
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnTime()
{
  return MGGetBoolAnswer((const char **)CFSTR("j8/Omm6s1lsmTDFsXjsBfA"));
}

uint64_t _MGGetFastPathLog()
{
  if (qword_1ECD35BA8 != -1)
    dispatch_once(&qword_1ECD35BA8, &unk_1E3B69DD8);
  return qword_1ECD35BA0;
}

uint64_t MGCancelNotifications(uint64_t result)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  if ((unint64_t)(result + 1) >= 2)
  {
    v1 = result;
    v2 = (uint64_t (*)(uint64_t))*((_QWORD *)off_1EE3FD5A0 + 28);
    if (!v2)
      v2 = (uint64_t (*)(uint64_t))sub_19B6BBD84(28, 2);
    return v2(v1);
  }
  return result;
}

BOOL sub_19B6BC97C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("nFRqKto/RuQAV1P+0/qkBA"), a2);
}

BOOL sub_19B6BC9A0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("TF31PAB6aO8KAbPyNKSxKA"), a2);
}

uint64_t sub_19B6BC9C4()
{
  if (qword_1ECD35B70 != -1)
    dispatch_once(&qword_1ECD35B70, &unk_1E3BD04E0);
  return dword_1ECD35AF8;
}

CFStringRef sub_19B6BCA04()
{
  CFStringRef result;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t v8[16];

  result = SCDynamicStoreCopyComputerName(0, 0);
  if (!result)
  {
    v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1)
      v7 = v1 + 1;
    else
      v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v7, 5682, (uint64_t)CFSTR("Failed to get Computer Name, returning device name"), v2, v3, v4, v5, v6, v8[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to get Computer Name, returning device name", v8, 2u);
    }
    return (CFStringRef)sub_19B6B89E4((const char **)CFSTR("vme9Buk6XiWFCXoHApxNFA"), 0);
  }
  return result;
}

CFNumberRef sub_19B6BCAB0()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("M+eWZ6Zk/aJIsnIrv4zdAg"), 117);
}

const void *sub_19B6BCAC8()
{
  int v0;
  uint64_t v1;
  CFTypeRef v2;
  const void *v3;
  CFTypeID TypeID;

  v0 = sub_19B6BAD7C("IODeviceTree:/arm-io/disp0", CFSTR("supports-apt"), 0, 0xFFFFFFFFLL, 0);
  if ((v0 & 0x80000000) == 0)
  {
    v1 = MEMORY[0x1E0C9AE50];
    if (!v0)
      v1 = MEMORY[0x1E0C9AE40];
    return *(const void **)v1;
  }
  v2 = sub_19B6BBC28(0, "AppleCLCD", CFSTR("APTDevice"));
  if (!v2)
  {
LABEL_8:
    v1 = MEMORY[0x1E0C9AE40];
    return *(const void **)v1;
  }
  v3 = v2;
  TypeID = CFBooleanGetTypeID();
  if (TypeID != CFGetTypeID(v3))
  {
    CFRelease(v3);
    goto LABEL_8;
  }
  return v3;
}

BOOL sub_19B6BCB70()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("P+UqVuzQzn3nwHSiSeDmyw"), 108);
}

BOOL sub_19B6BCB88()
{
  return sub_19B6BACD0((uint64_t)CFSTR("GB18030"), CFSTR("RegionalBehaviorGB18030"));
}

CFStringRef sub_19B6BCB9C()
{
  return sub_19B6BB96C(0, "IOPlatformExpertDevice", CFSTR("region-info"));
}

const char *sub_19B6BCBB4()
{
  const char *result;

  result = (const char *)sub_19B6B2DB8();
  if (result)
    return (const char *)CFStringCreateWithCString(0, result, 0x8000100u);
  return result;
}

BOOL sub_19B6BCBE4()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("fxnMXVRwuznDzWhoDCxb2A"), 111);
}

uint64_t sub_19B6BCBFC()
{
  return 1;
}

uint64_t sub_19B6BCC04()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("4k6Wv56SWfITjzet+hIHMQ"), 109);
}

CFNumberRef sub_19B6BCC1C()
{
  return sub_19B6BA824(4u);
}

BOOL sub_19B6BCC24()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("KN7t4gQkyj5X66dBpmh9HQ"), 108);
}

BOOL sub_19B6BCC3C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("g1gP4TOlkv84ezeaZrUgFg"), 116);
}

BOOL sub_19B6BCC54()
{
  return sub_19B6B2F30((uint64_t)CFSTR("baseband"), 0);
}

uint64_t sub_19B6BCC64()
{
  BOOL v0;
  uint64_t v1;
  int v3;

  v3 = -1;
  v0 = sub_19B6B84A4((const char **)CFSTR("eJGhnVvylF3dMOHBKJzeiw"), 5, 5, kCFNumberSInt32Type, &v3);
  if (v0 && v3 > 0)
    v1 = MEMORY[0x1E0C9AE50];
  else
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFStringRef sub_19B6BCCC8()
{
  return sub_19B6BB96C(0, "IOPlatformExpertDevice", CFSTR("platform-name"));
}

BOOL sub_19B6BCCE0()
{
  _BOOL8 result;

  result = MGGetBoolAnswer((const char **)CFSTR("yRZv0s7Dpj8ZBk0S+0+nMA"));
  if (result)
    return sub_19B6B50E0(CFSTR("CH"));
  return result;
}

uint64_t sub_19B6BCD10()
{
  uint64_t v0;
  CFTypeID TypeID;
  const __CFNumber *v2;
  const __CFNumber *v3;
  BOOL v4;
  uint64_t v5;
  int valuePtr;

  valuePtr = 0;
  v0 = *((_QWORD *)off_1EE3FD5A0 + 6);
  if (!v0)
    v0 = sub_19B6BBD84(6, 2);
  TypeID = CFNumberGetTypeID();
  v2 = (const __CFNumber *)sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyDualSimCapability", v0, TypeID);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFNumberGetValue(v2, kCFNumberIntType, &valuePtr))
    v4 = valuePtr == 3;
  else
    v4 = 1;
  v5 = !v4;
  CFRelease(v3);
  return v5;
}

uint64_t sub_19B6BCDA4()
{
  _BOOL4 v0;
  uint64_t v1;

  if (sub_19B6B9C44() == 1 || sub_19B6B9C44() == 2 || sub_19B6B9C44() == 3)
    v0 = sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("photos-live-video-rendering"), 0);
  else
    v0 = sub_19B6B9C44() == 11;
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

uint64_t sub_19B6BCE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 3)
    goto LABEL_4;
  v66 = 1789837692;
  v65 = xmmword_19B7180A0;
  v64 = -1239654590;
  v63 = xmmword_19B7180B4;
  v62 = -1579092758;
  v61 = xmmword_19B7180C8;
  v60 = 48355600;
  v59 = xmmword_19B7180DC;
  v58 = -679691073;
  v57 = xmmword_19B7180F0;
  v56 = 1430379884;
  v55 = xmmword_19B718104;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v65, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v63) & 1) != 0
    || (v54 = -926344036,
        v53 = xmmword_19B717C2C,
        v52 = -954998212,
        v51 = xmmword_19B717C40,
        v50 = 436612651,
        v49 = xmmword_19B717C54,
        (MGIsDeviceOneOfType((const UInt8 *)&v53, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v51) & 1) != 0))
  {
LABEL_4:
    v21 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v48 = 1602014129;
    v47 = xmmword_19B71817C;
    v46 = -810116762;
    v45 = xmmword_19B718190;
    v44 = -1195351767;
    v43 = xmmword_19B7181A4;
    v42 = -199226823;
    v41 = xmmword_19B7181B8;
    v40 = 1412427398;
    v39 = xmmword_19B7181CC;
    v38 = -1283070668;
    v37 = xmmword_19B7181E0;
    v36 = 160260070;
    v35 = xmmword_19B7181F4;
    v23 = MGIsDeviceOneOfType((const UInt8 *)&v47, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v45);
    v21 = MEMORY[0x1E0C9AE40];
    if ((v23 & 1) == 0)
    {
      v34 = -1639077591;
      v33 = xmmword_19B718410;
      v32 = 338555555;
      v31 = xmmword_19B718424;
      if (!MGIsDeviceOneOfType((const UInt8 *)&v33, v24, v25, v26, v27, v28, v29, v30, (uint64_t)&v31))
        v21 = MEMORY[0x1E0C9AE50];
    }
  }
  return *(_QWORD *)v21;
}

BOOL sub_19B6BD164()
{
  return sub_19B6B3348(CFSTR("APPLE2")) || sub_19B6B3348(CFSTR("MTL2,2"));
}

const void *sub_19B6BD19C()
{
  return sub_19B6B89E4((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg"), 0);
}

CFNumberRef sub_19B6BD1AC()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("/l0Kz2akvSvEHTNmZeY0nQ"), 99);
}

uint64_t sub_19B6BD1C4()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 38);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(38, 2);
  return v0();
}

CFTypeRef sub_19B6BD1F0(uint64_t a1, uint64_t a2, CFTypeID a3)
{
  _QWORD v4[5];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = sub_19B6BDAEC;
  v4[3] = &unk_1E3BD0FF8;
  v4[4] = a2;
  return sub_19B6BD240(a1, (uint64_t)v4, a3);
}

CFTypeRef sub_19B6BD240(uint64_t a1, uint64_t a2, CFTypeID a3)
{
  uint64_t (*v6)(uint64_t, const __CFString *, dispatch_queue_global_t, _QWORD);
  uint64_t v7;
  dispatch_queue_global_t global_queue;
  uint64_t v9;
  const void *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  CFTypeRef v22;
  CFTypeID v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  uint32_t v34;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  CFTypeID v43;
  CFStringRef v44;
  CFStringRef v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  const char *v52;
  char v53;
  CFTypeRef cf;
  uint8_t buf[4];
  uint64_t v56;
  __int16 v57;
  _BYTE v58[10];
  _QWORD v59[3];

  v59[2] = *MEMORY[0x1E0C80C00];
  cf = 0;
  v6 = (uint64_t (*)(uint64_t, const __CFString *, dispatch_queue_global_t, _QWORD))*((_QWORD *)off_1EE3FD5A0
                                                                                             + 19);
  if (!v6)
    v6 = (uint64_t (*)(uint64_t, const __CFString *, dispatch_queue_global_t, _QWORD))sub_19B6BBD84(19, 2);
  v7 = *MEMORY[0x1E0C9AE00];
  global_queue = dispatch_get_global_queue(0, 0);
  v9 = v6(v7, CFSTR("com.apple.mobilegestalt"), global_queue, 0);
  if (v9)
  {
    v10 = (const void *)v9;
    v11 = (*(uint64_t (**)(uint64_t, uint64_t, CFTypeRef *))(a2 + 16))(a2, v9, &cf);
    v12 = v11;
    if (!(_DWORD)v11)
    {
      if (cf)
      {
        v23 = CFGetTypeID(cf);
        if (v23 == a3)
        {
          v22 = cf;
          cf = 0;
          goto LABEL_27;
        }
        v43 = v23;
        v44 = CFCopyTypeIDDescription(a3);
        v45 = CFCopyTypeIDDescription(v43);
        v46 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v46)
          v52 = v46 + 1;
        else
          v52 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        _MGLog((uint64_t)v52, 67, (uint64_t)CFSTR("%s: CommCenter result should have been %@ but was %@"), v47, v48, v49, v50, v51, a1);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v56 = a1;
          v57 = 2112;
          *(_QWORD *)v58 = v44;
          *(_WORD *)&v58[8] = 2112;
          v59[0] = v45;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s: CommCenter result should have been %@ but was %@", buf, 0x20u);
        }
        if (v44)
          CFRelease(v44);
        if (v45)
          CFRelease(v45);
LABEL_26:
        v22 = 0;
LABEL_27:
        CFRelease(v10);
        if (cf)
          CFRelease(cf);
        return v22;
      }
      v36 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
      if (v36)
        v42 = v36 + 1;
      else
        v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
      _MGLog((uint64_t)v42, 58, (uint64_t)CFSTR("%s: CommCenter failed to provide info but returned no error"), v37, v38, v39, v40, v41, a1);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_26;
      *(_DWORD *)buf = 136315138;
      v56 = a1;
      v32 = MEMORY[0x1E0C81028];
      v33 = "%s: CommCenter failed to provide info but returned no error";
      v34 = 12;
LABEL_25:
      _os_log_impl(&dword_19B6B1000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
      goto LABEL_26;
    }
    v13 = HIDWORD(v11);
    if ((_DWORD)v11 == 2)
    {
      v14 = mach_error_string(SHIDWORD(v11));
    }
    else
    {
      if ((_DWORD)v11 != 1)
      {
        v24 = "Unknown";
        goto LABEL_20;
      }
      v14 = strerror(SHIDWORD(v11));
    }
    v24 = v14;
LABEL_20:
    v25 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v25)
      v31 = v25 + 1;
    else
      v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v31, 53, (uint64_t)CFSTR("%s: CommCenter error: %d:%d (%s)"), v26, v27, v28, v29, v30, a1);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_26;
    *(_DWORD *)buf = 136315906;
    v56 = a1;
    v57 = 1024;
    *(_DWORD *)v58 = v12;
    *(_WORD *)&v58[4] = 1024;
    *(_DWORD *)&v58[6] = v13;
    LOWORD(v59[0]) = 2080;
    *(_QWORD *)((char *)v59 + 2) = v24;
    v32 = MEMORY[0x1E0C81028];
    v33 = "%s: CommCenter error: %d:%d (%s)";
    v34 = 34;
    goto LABEL_25;
  }
  v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
  if (v15)
    v21 = v15 + 1;
  else
    v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
  _MGLog((uint64_t)v21, 41, (uint64_t)CFSTR("could not establish connection to CommCenter"), v16, v17, v18, v19, v20, v53);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "could not establish connection to CommCenter", buf, 2u);
  }
  return 0;
}

CFTypeRef sub_19B6BD5F8()
{
  _BOOL4 v0;
  CFTypeRef *v1;
  CFTypeRef v2;

  v0 = sub_19B6BAC78("IODeviceTree:/product", CFSTR("bluetooth-le"), 0);
  v1 = (CFTypeRef *)MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = (CFTypeRef *)MEMORY[0x1E0C9AE40];
  v2 = *v1;
  if (*v1)
    CFRetain(*v1);
  return v2;
}

uint64_t sub_19B6BD654()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6BAC78("IODeviceTree:/product", CFSTR("assistant"), 0);
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

uint64_t sub_19B6BD698()
{
  uint64_t result;
  _BOOL4 v1;
  BOOL v2;

  result = MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg"));
  if ((_DWORD)result)
  {
    v1 = sub_19B6BAC78("IODeviceTree:/product/facetime", CFSTR("bitrate-3g"), 0);
    result = 0;
    if (v1)
    {
      v2 = 0;
      result = sub_19B6BB720((uint64_t)CFSTR("AllowFaceTimeOverCellular"), &v2);
      if (!v2)
        return sub_19B6BB3D4();
    }
  }
  return result;
}

void sub_19B6BD704()
{
  uint64_t (*v0)();
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t v8[16];

  v0 = (uint64_t (*)())*((_QWORD *)off_1EE3FD5A0 + 29);
  if (!v0)
    v0 = (uint64_t (*)())sub_19B6BBD84(29, 2);
  if (v0 == sub_19B6C1BC8)
  {
    v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1)
      v7 = v1 + 1;
    else
      v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v7, 752, (uint64_t)CFSTR("_MGSCopyAnswerFromServer can't be loaded"), v2, v3, v4, v5, v6, v8[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "_MGSCopyAnswerFromServer can't be loaded", v8, 2u);
    }
    byte_1EE3FD870 = 1;
  }
}

uint64_t sub_19B6BD7C8()
{
  uint64_t result;

  result = sub_19B6BAD7C("IODeviceTree:/product", CFSTR("udid-version"), 0, 0xFFFFFFFFLL, 1);
  dword_1ECD35AF8 = result;
  return result;
}

char *sub_19B6BD800()
{
  char *result;

  result = sub_19B6B3B24("hw.product");
  qword_1ECD35B90 = (uint64_t)result;
  return result;
}

void sub_19B6BD824()
{
  const char *v0;
  const char *v1;
  int v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = (const char *)sub_19B6B2DB8();
  v1 = v0;
  if (!v0)
  {
LABEL_14:
    if (dword_1ECD35B00 != -1)
      return;
    v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v3)
      v9 = v3 + 1;
    else
      v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v9, 394, (uint64_t)CFSTR("Did not recognize DeviceClass: %s"), v4, v5, v6, v7, v8, (char)v1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v11 = v1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Did not recognize DeviceClass: %s", buf, 0xCu);
    }
LABEL_20:
    v2 = 2;
    goto LABEL_31;
  }
  if (!strncmp(v0, "iPhone", 6uLL))
  {
    v2 = 1;
    goto LABEL_31;
  }
  if (!strncmp(v1, "iPod", 4uLL))
    goto LABEL_20;
  if (!strncmp(v1, "iPad", 4uLL))
  {
    v2 = 3;
    goto LABEL_31;
  }
  if (!strncmp(v1, "AppleTV", 7uLL))
  {
    v2 = 4;
    goto LABEL_31;
  }
  v2 = 5;
  if (strncmp(v1, "iFPGA", 5uLL))
  {
    if (!strncmp(v1, "Watch", 5uLL))
    {
      v2 = 6;
      goto LABEL_31;
    }
    if (!strncmp(v1, "AudioAccessory", 0xEuLL))
    {
      v2 = 7;
      goto LABEL_31;
    }
    if (!strncmp(v1, "iBridge", 7uLL))
    {
      v2 = 8;
      goto LABEL_31;
    }
    if (!strncmp(v1, "AppleDisplay", 0xCuLL))
    {
      v2 = 10;
      goto LABEL_31;
    }
    if (!strncmp(v1, "RealityDevice", 0xDuLL))
    {
      v2 = 11;
      goto LABEL_31;
    }
    if (!strncmp(v1, "ComputeModule", 0xDuLL))
    {
      v2 = 12;
      goto LABEL_31;
    }
    if (!strncmp(v1, "Mac", 3uLL))
    {
      v2 = 9;
      goto LABEL_31;
    }
    goto LABEL_14;
  }
LABEL_31:
  dword_1ECD35B00 = v2;
}

const UInt8 *sub_19B6BDA8C()
{
  const UInt8 *result;
  uint64_t v1;
  uint64_t *i;
  BOOL v3;

  result = sub_19B6B9360();
  if (result)
  {
    v1 = 0;
    for (i = qword_19B713910; ; i += 4)
    {
      v3 = *(_QWORD *)result == *i && *((_QWORD *)result + 1) == i[1];
      if (v3 && *((_DWORD *)result + 4) == (unint64_t)*((unsigned int *)i + 4))
        break;
      if (++v1 == 448)
        return result;
    }
    dword_1ECD35AFC = v1;
  }
  return result;
}

uint64_t sub_19B6BDAEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 32))(a2, a3);
}

BOOL MobileGestalt_get_hasExtendedColorDisplay()
{
  return MGGetBoolAnswer((const char **)CFSTR("Aixt/MEN2O2B7f+8m4TxUA"));
}

const void *MobileGestalt_copy_regionCode_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("h63QSdBCiT/z0WU6rdQv6Q"));
}

const __CFString *sub_19B6BDB28()
{
  const void *v0;
  const void *v1;
  const __CFString *v2;
  const __CFString *v3;
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;
  const __CFString *v8;
  int v9;
  const __CFString *v10;
  const void *v11;
  const void *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const void *v37;
  const __CFString *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const void *v46;
  const __CFString *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  const void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  const void *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  const void *v103;
  const __CFString *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  const void *v128;
  const __CFString *v129;
  const void *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  const void *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  const void *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  const void *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  const void *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  const void *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  const void *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  const void *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  const void *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  const void *v202;
  const void *v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  const void *v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  const void *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  const void *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  const void *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  const void *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  const void *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  const void *v259;
  const __CFString *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  const void *v268;
  const void *v269;
  char *v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  const char *v276;
  char v277;
  __int128 v278;
  int v279;
  __int128 v280;
  int v281;
  __int128 v282;
  int v283;
  __int128 v284;
  int v285;
  __int128 v286;
  int v287;
  __int128 v288;
  int v289;
  __int128 v290;
  int v291;
  __int128 v292;
  int v293;
  __int128 v294;
  int v295;
  __int128 v296;
  int v297;
  __int128 v298;
  int v299;
  __int128 v300;
  int v301;
  __int128 v302;
  int v303;
  __int128 v304;
  int v305;
  __int128 v306;
  int v307;
  __int128 v308;
  int v309;
  __int128 v310;
  int v311;
  __int128 v312;
  int v313;
  __int128 v314;
  int v315;
  __int128 v316;
  int v317;
  __int128 v318;
  int v319;
  __int128 v320;
  int v321;
  __int128 v322;
  int v323;
  __int128 v324;
  int v325;
  __int128 v326;
  int v327;
  __int128 v328;
  int v329;
  __int128 v330;
  int v331;
  __int128 v332;
  int v333;
  __int128 v334;
  int v335;
  __int128 v336;
  int v337;
  __int128 v338;
  int v339;
  __int128 v340;
  int v341;
  __int128 v342;
  int v343;
  __int128 v344;
  int v345;
  __int128 v346;
  int v347;
  __int128 v348;
  int v349;
  __int128 v350;
  int v351;
  __int128 v352;
  int v353;
  __int128 v354;
  int v355;
  __int128 v356;
  int v357;
  __int128 v358;
  int v359;
  __int128 v360;
  int v361;
  __int128 v362;
  int v363;
  __int128 v364;
  int v365;
  __int128 v366;
  int v367;
  __int128 v368;
  int v369;
  __int128 v370;
  int v371;
  __int128 v372;
  int v373;
  __int128 v374;
  int v375;
  __int128 v376;
  int v377;
  __int128 v378;
  int v379;
  __int128 v380;
  int v381;
  __int128 v382;
  int v383;
  __int128 v384;
  int v385;
  __int128 v386;
  int v387;
  __int128 v388;
  int v389;
  __int128 v390;
  int v391;
  __int128 v392;
  int v393;
  __int128 v394;
  int v395;
  __int128 v396;
  int v397;
  __int128 v398;
  int v399;
  __int128 v400;
  int v401;
  __int128 v402;
  int v403;
  __int128 v404;
  int v405;
  __int128 v406;
  int v407;
  __int128 v408;
  int v409;
  __int128 v410;
  int v411;
  __int128 v412;
  int v413;
  __int128 v414;
  int v415;
  __int128 v416;
  int v417;
  __int128 v418;
  int v419;
  __int128 v420;
  int v421;
  __int128 v422;
  int v423;
  __int128 v424;
  int v425;
  __int128 v426;
  int v427;
  __int128 v428;
  int v429;
  __int128 v430;
  int v431;
  __int128 v432;
  int v433;
  __int128 v434;
  int v435;
  __int128 v436;
  int v437;
  __int128 v438;
  int v439;
  __int128 v440;
  int v441;
  __int128 v442;
  int v443;
  __int128 v444;
  int v445;
  __int128 v446;
  int v447;
  __int128 v448;
  int v449;
  __int128 v450;
  int v451;
  __int128 v452;
  int v453;
  __int128 v454;
  int v455;
  __int128 v456;
  int v457;
  __int128 v458;
  int v459;
  __int128 v460;
  int v461;
  __int128 v462;
  int v463;
  __int128 v464;
  int v465;
  __int128 v466;
  int v467;
  __int128 v468;
  int v469;
  __int128 v470;
  int v471;
  __int128 v472;
  int v473;
  uint8_t buf[16];
  int v475;
  uint64_t v476;

  v476 = *MEMORY[0x1E0C80C00];
  v475 = 1223847566;
  *(_OWORD *)buf = xmmword_19B7137C4;
  if (MGIsDeviceOfType(buf))
  {
    v0 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (v0)
    {
      v1 = v0;
      v2 = CFSTR("A");
      if (!CFEqual(CFSTR("A3081"), v0))
      {
        if (!CFEqual(CFSTR("A3286"), v1))
        {
          if (!CFEqual(CFSTR("A3287"), v1))
          {
            v3 = CFSTR("A3288");
LABEL_44:
            v9 = CFEqual(v3, v1);
            v10 = CFSTR("D");
            goto LABEL_45;
          }
          goto LABEL_37;
        }
        goto LABEL_23;
      }
LABEL_47:
      CFRelease(v1);
      return v2;
    }
    return CFSTR("A");
  }
  v473 = 185580364;
  v472 = xmmword_19B7137D8;
  if (MGIsDeviceOfType((const UInt8 *)&v472))
  {
    v4 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (v4)
    {
      v1 = v4;
      v2 = CFSTR("A");
      if (CFEqual(CFSTR("A3082"), v4))
        goto LABEL_47;
      if (!CFEqual(CFSTR("A3289"), v1))
      {
        if (!CFEqual(CFSTR("A3290"), v1))
        {
          v3 = CFSTR("A3291");
          goto LABEL_44;
        }
        goto LABEL_37;
      }
LABEL_23:
      v2 = CFSTR("B");
      goto LABEL_47;
    }
    return CFSTR("A");
  }
  v471 = 1214880059;
  v470 = xmmword_19B7137EC;
  if (MGIsDeviceOfType((const UInt8 *)&v470))
  {
    v5 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v5)
      return CFSTR("A");
    v1 = v5;
    v2 = CFSTR("A");
    if (CFEqual(CFSTR("A3083"), v5))
      goto LABEL_47;
    if (CFEqual(CFSTR("A3292"), v1))
      goto LABEL_23;
    if (!CFEqual(CFSTR("A3293"), v1))
    {
      v3 = CFSTR("A3294");
      goto LABEL_44;
    }
LABEL_37:
    v2 = CFSTR("C");
    goto LABEL_47;
  }
  v469 = 426359977;
  v468 = xmmword_19B713800;
  if (MGIsDeviceOfType((const UInt8 *)&v468))
  {
    v6 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v6)
      return CFSTR("A");
    v1 = v6;
    v2 = CFSTR("A");
    if (CFEqual(CFSTR("A3084"), v6))
      goto LABEL_47;
    if (CFEqual(CFSTR("A3295"), v1))
      goto LABEL_23;
    if (!CFEqual(CFSTR("A3296"), v1))
    {
      v3 = CFSTR("A3297");
      goto LABEL_44;
    }
    goto LABEL_37;
  }
  v467 = 958549802;
  v466 = xmmword_19B713814;
  if ((MGIsDeviceOfType((const UInt8 *)&v466) & 1) != 0)
    return CFSTR("A");
  v465 = -12497897;
  v464 = xmmword_19B713828;
  if (MGIsDeviceOfType((const UInt8 *)&v464))
  {
    v7 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v7)
      return CFSTR("A");
    v1 = v7;
    v2 = CFSTR("A");
    if (CFEqual(CFSTR("A2903"), v7))
      goto LABEL_47;
    v8 = CFSTR("A2904");
LABEL_30:
    v9 = CFEqual(v8, v1);
    v10 = CFSTR("B");
    goto LABEL_45;
  }
  v463 = 1377540371;
  v462 = xmmword_19B71383C;
  if ((MGIsDeviceOfType((const UInt8 *)&v462) & 1) != 0)
    return CFSTR("A");
  v461 = -518121279;
  v460 = xmmword_19B713850;
  if (MGIsDeviceOfType((const UInt8 *)&v460))
  {
    v11 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v11)
      return CFSTR("A");
    v1 = v11;
    v2 = CFSTR("A");
    if (CFEqual(CFSTR("A2899"), v11))
      goto LABEL_47;
    v8 = CFSTR("A2900");
    goto LABEL_30;
  }
  v459 = 802516499;
  v458 = xmmword_19B713864;
  if ((MGIsDeviceOfType((const UInt8 *)&v458) & 1) != 0)
    return CFSTR("A");
  v457 = -1919324456;
  v456 = xmmword_19B713878;
  if (MGIsDeviceOfType((const UInt8 *)&v456))
  {
    v12 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v12)
      return CFSTR("A");
    v1 = v12;
    v2 = CFSTR("A");
    if (CFEqual(CFSTR("A2837"), v12))
      goto LABEL_47;
    v8 = CFSTR("A3006");
    goto LABEL_30;
  }
  v455 = 1127969586;
  v454 = xmmword_19B71388C;
  if ((MGIsDeviceOfType((const UInt8 *)&v454) & 1) != 0)
    return CFSTR("A");
  v453 = 1292009573;
  v452 = xmmword_19B7138A0;
  if (MGIsDeviceOfType((const UInt8 *)&v452))
  {
    v21 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v21)
      return CFSTR("A");
    v1 = v21;
    v2 = CFSTR("A");
    if (CFEqual(CFSTR("A2926"), v21))
      goto LABEL_47;
    v8 = CFSTR("A3007");
    goto LABEL_30;
  }
  v451 = -1403227947;
  v450 = xmmword_19B7130D0;
  v449 = 729118884;
  v448 = xmmword_19B7130E4;
  v447 = -489993439;
  v446 = xmmword_19B7130F8;
  v444 = xmmword_19B71310C;
  v445 = 886875686;
  if (MGIsDeviceOneOfType((const UInt8 *)&v450, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v448))
  {
    v29 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v29)
      return CFSTR("A");
    v1 = v29;
    if (CFEqual(CFSTR("A1633"), v29) || CFEqual(CFSTR("A1634"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A1687"), v1) || CFEqual(CFSTR("A1688"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A1690"), v1) || CFEqual(CFSTR("A1691"), v1))
      goto LABEL_62;
    if (CFEqual(CFSTR("A1699"), v1))
      goto LABEL_37;
    v38 = CFSTR("A1700");
    goto LABEL_68;
  }
  v443 = 1046806126;
  v442 = xmmword_19B713120;
  v441 = -188760945;
  v440 = xmmword_19B713134;
  if (MGIsDeviceOneOfType((const UInt8 *)&v442, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v440))
  {
    v37 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v37)
      return CFSTR("A");
    v1 = v37;
    if (CFEqual(CFSTR("A1662"), v37))
      goto LABEL_350;
    if (CFEqual(CFSTR("A1723"), v1))
      goto LABEL_23;
    v38 = CFSTR("A1724");
    goto LABEL_68;
  }
  v439 = -1527788847;
  v438 = xmmword_19B713148;
  v437 = 1532898719;
  v436 = xmmword_19B71315C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v438, v30, v31, v32, v33, v34, v35, v36, (uint64_t)&v436))
  {
    v46 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v46)
      return CFSTR("A");
    v1 = v46;
    if (CFEqual(CFSTR("A1673"), v46) || CFEqual(CFSTR("A1674"), v1))
      goto LABEL_350;
    v47 = CFSTR("A1675");
LABEL_75:
    if (CFEqual(v47, v1))
      goto LABEL_23;
    goto LABEL_350;
  }
  v435 = -350584140;
  v434 = xmmword_19B713170;
  v433 = -1418383976;
  v432 = xmmword_19B713184;
  v431 = 368778837;
  v430 = xmmword_19B713198;
  v429 = -1213485500;
  v428 = xmmword_19B7131AC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v434, v39, v40, v41, v42, v43, v44, v45, (uint64_t)&v432))
  {
    v55 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v55)
      return CFSTR("A");
    v1 = v55;
    if (CFEqual(CFSTR("A1660"), v55)
      || CFEqual(CFSTR("A1661"), v1)
      || CFEqual(CFSTR("A1778"), v1)
      || CFEqual(CFSTR("A1784"), v1))
    {
      goto LABEL_350;
    }
    if (CFEqual(CFSTR("A1779"), v1) || CFEqual(CFSTR("A1785"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A1780"), v1))
      goto LABEL_37;
    v38 = CFSTR("A1786");
    goto LABEL_68;
  }
  v427 = 996646949;
  v426 = xmmword_19B7131C0;
  v425 = -563086000;
  v424 = xmmword_19B7131D4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v426, v48, v49, v50, v51, v52, v53, v54, (uint64_t)&v424))
  {
    v63 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v63)
      return CFSTR("A");
    v1 = v63;
    if (CFEqual(CFSTR("A1701"), v63) || CFEqual(CFSTR("A1709"), v1))
      goto LABEL_350;
    v47 = CFSTR("A1852");
    goto LABEL_75;
  }
  v423 = -1022451852;
  v422 = xmmword_19B7131E8;
  v421 = 1729782187;
  v420 = xmmword_19B7131FC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v422, v56, v57, v58, v59, v60, v61, v62, (uint64_t)&v420))
  {
    v71 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v71)
      return CFSTR("A");
    v1 = v71;
    if (CFEqual(CFSTR("A1670"), v71) || CFEqual(CFSTR("A1671"), v1))
      goto LABEL_350;
    v47 = CFSTR("A1821");
    goto LABEL_75;
  }
  v419 = 414393924;
  v418 = xmmword_19B713210;
  v417 = 897736383;
  v416 = xmmword_19B713224;
  if (MGIsDeviceOneOfType((const UInt8 *)&v418, v64, v65, v66, v67, v68, v69, v70, (uint64_t)&v416))
  {
    v79 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v79)
      return CFSTR("A");
    v1 = v79;
    if (CFEqual(CFSTR("A1863"), v79) || CFEqual(CFSTR("A1905"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A1906"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A1907"), v1))
      goto LABEL_37;
    v38 = CFSTR("A1908");
    goto LABEL_68;
  }
  v415 = -996295886;
  v414 = xmmword_19B713238;
  v413 = -453987047;
  v412 = xmmword_19B71324C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v414, v72, v73, v74, v75, v76, v77, v78, (uint64_t)&v412))
  {
    v87 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v87)
      return CFSTR("A");
    v1 = v87;
    if (CFEqual(CFSTR("A1864"), v87) || CFEqual(CFSTR("A1897"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A1898"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A1899"), v1))
      goto LABEL_37;
    v38 = CFSTR("A1900");
    goto LABEL_68;
  }
  v411 = -337121064;
  v410 = xmmword_19B713260;
  v409 = 450980336;
  v408 = xmmword_19B713274;
  if (MGIsDeviceOneOfType((const UInt8 *)&v410, v80, v81, v82, v83, v84, v85, v86, (uint64_t)&v408))
  {
    v95 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v95)
      return CFSTR("A");
    v1 = v95;
    if (CFEqual(CFSTR("A1865"), v95) || CFEqual(CFSTR("A1901"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A1902"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A1903"), v1))
      goto LABEL_37;
    v38 = CFSTR("A1904");
    goto LABEL_68;
  }
  v407 = -232427879;
  v406 = xmmword_19B713288;
  v405 = -427474227;
  v404 = xmmword_19B71329C;
  v403 = 1477534141;
  v402 = xmmword_19B7132B0;
  v401 = -1843102369;
  v400 = xmmword_19B7132C4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v406, v88, v89, v90, v91, v92, v93, v94, (uint64_t)&v404))
  {
    v103 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v103)
      return CFSTR("A");
    v1 = v103;
    if (CFEqual(CFSTR("A1920"), v103) || CFEqual(CFSTR("A1921"), v1) || CFEqual(CFSTR("A1984"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2098"), v1) || CFEqual(CFSTR("A2102"), v1) || CFEqual(CFSTR("A2106"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A2099"), v1) || CFEqual(CFSTR("A2103"), v1) || CFEqual(CFSTR("A2107"), v1))
      goto LABEL_37;
    if (!CFEqual(CFSTR("A2100"), v1) && !CFEqual(CFSTR("A2104"), v1) && !CFEqual(CFSTR("A2108"), v1))
    {
      if (CFEqual(CFSTR("A2097"), v1) || CFEqual(CFSTR("A2101"), v1))
        goto LABEL_286;
      v104 = CFSTR("A2105");
      goto LABEL_285;
    }
LABEL_62:
    v2 = CFSTR("D");
    goto LABEL_47;
  }
  v399 = 2030516999;
  v398 = xmmword_19B7132D8;
  v397 = -1276010597;
  v396 = xmmword_19B7132EC;
  v395 = -762483149;
  v394 = xmmword_19B713300;
  v393 = -1926937532;
  v392 = xmmword_19B713314;
  v391 = -1902732724;
  v390 = xmmword_19B713328;
  v389 = -342357580;
  v388 = xmmword_19B71333C;
  v387 = 300442574;
  v386 = xmmword_19B713350;
  v385 = -1294188889;
  v384 = xmmword_19B713364;
  if (MGIsDeviceOneOfType((const UInt8 *)&v398, v96, v97, v98, v99, v100, v101, v102, (uint64_t)&v396))
  {
    v112 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v112)
      return CFSTR("A");
    v1 = v112;
    if (CFEqual(CFSTR("A1876"), v112)
      || CFEqual(CFSTR("A1895"), v1)
      || CFEqual(CFSTR("A1934"), v1)
      || CFEqual(CFSTR("A1980"), v1))
    {
      goto LABEL_350;
    }
    if (CFEqual(CFSTR("A2013"), v1) || CFEqual(CFSTR("A2014"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A1979"), v1))
      goto LABEL_37;
    v38 = CFSTR("A1983");
    goto LABEL_68;
  }
  v383 = 1278131292;
  v382 = xmmword_19B713378;
  v381 = -1841712216;
  v380 = xmmword_19B71338C;
  v379 = 659506830;
  v378 = xmmword_19B7133A0;
  v377 = 213746202;
  v376 = xmmword_19B7133B4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v382, v105, v106, v107, v108, v109, v110, v111, (uint64_t)&v380))
  {
    v120 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v120)
      return CFSTR("A");
    v1 = v120;
    if (CFEqual(CFSTR("A2133"), v120)
      || CFEqual(CFSTR("A2126"), v1)
      || CFEqual(CFSTR("A2152"), v1)
      || CFEqual(CFSTR("A2153"), v1))
    {
      goto LABEL_350;
    }
    if (CFEqual(CFSTR("A2124"), v1) || CFEqual(CFSTR("A2123"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A2125"), v1))
      goto LABEL_37;
    v38 = CFSTR("A2154");
    goto LABEL_68;
  }
  v375 = -61007701;
  v374 = xmmword_19B7133C8;
  v373 = -235416490;
  v372 = xmmword_19B7133DC;
  v371 = -820493242;
  v370 = xmmword_19B7133F0;
  if (MGIsDeviceOneOfType((const UInt8 *)&v374, v113, v114, v115, v116, v117, v118, v119, (uint64_t)&v372))
  {
    v128 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v128)
      return CFSTR("A");
    v1 = v128;
    if (CFEqual(CFSTR("A2160"), v128) || CFEqual(CFSTR("A2161"), v1) || CFEqual(CFSTR("A2111"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2215"), v1) || CFEqual(CFSTR("A2218"), v1) || CFEqual(CFSTR("A2221"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A2216"), v1) || CFEqual(CFSTR("A2219"), v1) || CFEqual(CFSTR("A2222"), v1))
      goto LABEL_37;
    if (CFEqual(CFSTR("A2217"), v1) || CFEqual(CFSTR("A2220"), v1))
      goto LABEL_62;
    v129 = CFSTR("A2223");
LABEL_183:
    if (CFEqual(v129, v1))
      goto LABEL_62;
LABEL_350:
    v2 = CFSTR("A");
    goto LABEL_47;
  }
  v369 = -1157300313;
  v368 = xmmword_19B713404;
  v367 = -2132668294;
  v366 = xmmword_19B713418;
  if (MGIsDeviceOneOfType((const UInt8 *)&v368, v121, v122, v123, v124, v125, v126, v127, (uint64_t)&v366))
  {
    v130 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v130)
      return CFSTR("A");
    v1 = v130;
    if (CFEqual(CFSTR("A2197"), v130) || CFEqual(CFSTR("A2200"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2198"), v1))
      goto LABEL_23;
    v38 = CFSTR("A2199");
    goto LABEL_68;
  }
  v365 = -121925081;
  v364 = xmmword_19B71342C;
  if (MGIsDeviceOfType((const UInt8 *)&v364))
  {
    v138 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v138)
      return CFSTR("A");
    v1 = v138;
    if (CFEqual(CFSTR("A2275"), v138))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2296"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A2297"), v1))
      goto LABEL_37;
    v129 = CFSTR("A2298");
    goto LABEL_183;
  }
  v363 = 1126727276;
  v362 = xmmword_19B713440;
  v361 = 300130091;
  v360 = xmmword_19B713454;
  v359 = 343814884;
  v358 = xmmword_19B713468;
  v357 = -1675932945;
  v356 = xmmword_19B71347C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v362, v131, v132, v133, v134, v135, v136, v137, (uint64_t)&v360))
  {
    v146 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v146)
      return CFSTR("A");
    v1 = v146;
    if (CFEqual(CFSTR("A2228"), v146)
      || CFEqual(CFSTR("A2068"), v1)
      || CFEqual(CFSTR("A2229"), v1)
      || CFEqual(CFSTR("A2069"), v1))
    {
      goto LABEL_350;
    }
    if (CFEqual(CFSTR("A2230"), v1) || CFEqual(CFSTR("A2232"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A2231"), v1))
      goto LABEL_37;
    v38 = CFSTR("A2233");
    goto LABEL_68;
  }
  v355 = 372777383;
  v354 = xmmword_19B713490;
  v353 = -858079590;
  v352 = xmmword_19B7134A4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v354, v139, v140, v141, v142, v143, v144, v145, (uint64_t)&v352))
  {
    v154 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v154)
      return CFSTR("A");
    v1 = v154;
    if (CFEqual(CFSTR("A2270"), v154) || CFEqual(CFSTR("A2428"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2429"), v1))
      goto LABEL_23;
    v38 = CFSTR("A2430");
    goto LABEL_68;
  }
  v351 = 345196535;
  v350 = xmmword_19B7134B8;
  v349 = 440949464;
  v348 = xmmword_19B7134CC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v350, v147, v148, v149, v150, v151, v152, v153, (uint64_t)&v348))
  {
    v162 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v162)
      return CFSTR("A");
    v1 = v162;
    if (CFEqual(CFSTR("A2316"), v162) || CFEqual(CFSTR("A2324"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2072"), v1))
      goto LABEL_23;
    v38 = CFSTR("A2325");
    goto LABEL_68;
  }
  v347 = 1071957977;
  v346 = xmmword_19B7134E0;
  v345 = 438437663;
  v344 = xmmword_19B7134F4;
  v343 = -382792827;
  v342 = xmmword_19B713508;
  v341 = 1575123478;
  v340 = xmmword_19B71351C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v346, v155, v156, v157, v158, v159, v160, v161, (uint64_t)&v344))
  {
    v170 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v170)
      return CFSTR("A");
    v1 = v170;
    if (CFEqual(CFSTR("A2176"), v170)
      || CFEqual(CFSTR("A2172"), v1)
      || CFEqual(CFSTR("A2341"), v1)
      || CFEqual(CFSTR("A2342"), v1))
    {
      goto LABEL_350;
    }
    if (CFEqual(CFSTR("A2398"), v1)
      || CFEqual(CFSTR("A2402"), v1)
      || CFEqual(CFSTR("A2406"), v1)
      || CFEqual(CFSTR("A2410"), v1))
    {
      goto LABEL_23;
    }
    if (CFEqual(CFSTR("A2399"), v1)
      || CFEqual(CFSTR("A2403"), v1)
      || CFEqual(CFSTR("A2407"), v1)
      || CFEqual(CFSTR("A2411"), v1))
    {
      goto LABEL_37;
    }
    if (CFEqual(CFSTR("A2400"), v1)
      || CFEqual(CFSTR("A2404"), v1)
      || CFEqual(CFSTR("A2408"), v1)
      || CFEqual(CFSTR("A2412"), v1))
    {
      goto LABEL_62;
    }
    if (CFEqual(CFSTR("A2401"), v1) || CFEqual(CFSTR("A2405"), v1) || CFEqual(CFSTR("A2409"), v1))
      goto LABEL_286;
    v104 = CFSTR("A2413");
LABEL_285:
    if (!CFEqual(v104, v1))
      goto LABEL_350;
LABEL_286:
    v2 = CFSTR("E");
    goto LABEL_47;
  }
  v339 = -695298128;
  v338 = xmmword_19B713530;
  v337 = 804488105;
  v336 = xmmword_19B713544;
  v335 = 1614584579;
  v334 = xmmword_19B713558;
  v333 = 324288768;
  v332 = xmmword_19B71356C;
  v331 = 460218192;
  v330 = xmmword_19B713580;
  v329 = 2144905009;
  v328 = xmmword_19B713594;
  v327 = 127894440;
  v326 = xmmword_19B7135A8;
  v325 = 1070997468;
  v324 = xmmword_19B7135BC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v338, v163, v164, v165, v166, v167, v168, v169, (uint64_t)&v336))
  {
    v178 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (v178)
    {
      v1 = v178;
      if (CFEqual(CFSTR("A2377"), v178) || CFEqual(CFSTR("A2301"), v1) || CFEqual(CFSTR("A2378"), v1))
        goto LABEL_350;
      v2 = CFSTR("A");
      if (CFEqual(CFSTR("A2379"), v1))
        goto LABEL_47;
      if (CFEqual(CFSTR("A2459"), v1) || CFEqual(CFSTR("A2461"), v1))
        goto LABEL_23;
      if (CFEqual(CFSTR("A2460"), v1))
      {
LABEL_238:
        v2 = CFSTR("C");
        goto LABEL_47;
      }
      v260 = CFSTR("A2462");
LABEL_336:
      if (CFEqual(v260, v1))
        v2 = CFSTR("C");
      goto LABEL_47;
    }
    goto LABEL_351;
  }
  v323 = 123138233;
  v322 = xmmword_19B7135D0;
  v321 = 681511593;
  v320 = xmmword_19B7135E4;
  v319 = 713503427;
  v318 = xmmword_19B7135F8;
  v317 = -1632750650;
  v316 = xmmword_19B71360C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v322, v171, v172, v173, v174, v175, v176, v177, (uint64_t)&v320))
  {
    v186 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v186)
      return CFSTR("A");
    v1 = v186;
    if (CFEqual(CFSTR("A2481"), v186)
      || CFEqual(CFSTR("A2482"), v1)
      || CFEqual(CFSTR("A2483"), v1)
      || CFEqual(CFSTR("A2484"), v1))
    {
      goto LABEL_350;
    }
    if (CFEqual(CFSTR("A2626"), v1)
      || CFEqual(CFSTR("A2631"), v1)
      || CFEqual(CFSTR("A2636"), v1)
      || CFEqual(CFSTR("A2641"), v1))
    {
      goto LABEL_23;
    }
    if (CFEqual(CFSTR("A2628"), v1)
      || CFEqual(CFSTR("A2633"), v1)
      || CFEqual(CFSTR("A2638"), v1)
      || CFEqual(CFSTR("A2643"), v1))
    {
      goto LABEL_37;
    }
    if (CFEqual(CFSTR("A2629"), v1)
      || CFEqual(CFSTR("A2634"), v1)
      || CFEqual(CFSTR("A2639"), v1)
      || CFEqual(CFSTR("A2644"), v1))
    {
      goto LABEL_62;
    }
    if (CFEqual(CFSTR("A2630"), v1) || CFEqual(CFSTR("A2635"), v1) || CFEqual(CFSTR("A2640"), v1))
      goto LABEL_286;
    v104 = CFSTR("A2645");
    goto LABEL_285;
  }
  v315 = -212523443;
  v314 = xmmword_19B713620;
  v313 = 646100384;
  v312 = xmmword_19B713634;
  if (MGIsDeviceOneOfType((const UInt8 *)&v314, v179, v180, v181, v182, v183, v184, v185, (uint64_t)&v312))
  {
    v194 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v194)
      return CFSTR("A");
    v1 = v194;
    if (CFEqual(CFSTR("A2602"), v194) || CFEqual(CFSTR("A2603"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2604"), v1))
      goto LABEL_23;
    v38 = CFSTR("A2605");
    goto LABEL_68;
  }
  v311 = 688565114;
  v310 = xmmword_19B713648;
  v309 = -493418906;
  v308 = xmmword_19B71365C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v310, v187, v188, v189, v190, v191, v192, v193, (uint64_t)&v308))
  {
    v202 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v202)
      return CFSTR("A");
    v1 = v202;
    if (CFEqual(CFSTR("A2567"), v202) || CFEqual(CFSTR("A2568"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2569"), v1))
      goto LABEL_23;
    v38 = CFSTR("A2714");
LABEL_68:
    if (CFEqual(v38, v1))
      goto LABEL_37;
    goto LABEL_350;
  }
  v307 = -545612308;
  v306 = xmmword_19B713670;
  v305 = 1178062702;
  v304 = xmmword_19B713684;
  if (MGIsDeviceOneOfType((const UInt8 *)&v306, v195, v196, v197, v198, v199, v200, v201, (uint64_t)&v304))
  {
    v203 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v203)
      return CFSTR("A");
    v1 = v203;
    if (CFEqual(CFSTR("A2588"), v203) || CFEqual(CFSTR("A2589"), v1))
      goto LABEL_350;
    v47 = CFSTR("A2591");
    goto LABEL_75;
  }
  v303 = -1431778695;
  v302 = xmmword_19B713698;
  if (MGIsDeviceOfType((const UInt8 *)&v302))
  {
    v211 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v211)
      return CFSTR("A");
    v1 = v211;
    if (CFEqual(CFSTR("A2595"), v211))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2782"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A2783"), v1))
      goto LABEL_37;
    if (CFEqual(CFSTR("A2784"), v1))
      goto LABEL_62;
    v104 = CFSTR("A2785");
    goto LABEL_285;
  }
  v301 = 533419158;
  v300 = xmmword_19B7136AC;
  v299 = 1106979518;
  v298 = xmmword_19B7136C0;
  if (MGIsDeviceOneOfType((const UInt8 *)&v300, v204, v205, v206, v207, v208, v209, v210, (uint64_t)&v298))
  {
    v219 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v219)
      return CFSTR("A");
    v1 = v219;
    if (CFEqual(CFSTR("A2649"), v219) || CFEqual(CFSTR("A2632"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2881"), v1) || CFEqual(CFSTR("A2885"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A2882"), v1) || CFEqual(CFSTR("A2886"), v1))
      goto LABEL_37;
    if (CFEqual(CFSTR("A2883"), v1) || CFEqual(CFSTR("A2887"), v1))
      goto LABEL_62;
    if (CFEqual(CFSTR("A2884"), v1))
      goto LABEL_286;
    v104 = CFSTR("A2888");
    goto LABEL_285;
  }
  v297 = -1820426635;
  v296 = xmmword_19B7136D4;
  v295 = -937652876;
  v294 = xmmword_19B7136E8;
  if (MGIsDeviceOneOfType((const UInt8 *)&v296, v212, v213, v214, v215, v216, v217, v218, (uint64_t)&v294))
  {
    v227 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v227)
      return CFSTR("A");
    v1 = v227;
    if (CFEqual(CFSTR("A2650"), v227) || CFEqual(CFSTR("A2651"), v1))
      goto LABEL_350;
    if (CFEqual(CFSTR("A2889"), v1) || CFEqual(CFSTR("A2893"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A2890"), v1) || CFEqual(CFSTR("A2894"), v1))
      goto LABEL_37;
    if (!CFEqual(CFSTR("A2891"), v1) && !CFEqual(CFSTR("A2895"), v1))
    {
      if (CFEqual(CFSTR("A2892"), v1))
        goto LABEL_286;
      v104 = CFSTR("A2896");
      goto LABEL_285;
    }
    goto LABEL_62;
  }
  v293 = -609570151;
  v292 = xmmword_19B7136FC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v292, v220, v221, v222, v223, v224, v225, v226, 0))
  {
    v235 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v235)
      return CFSTR("A");
    v1 = v235;
    if (CFEqual(CFSTR("A2846"), v235))
      goto LABEL_350;
    if (CFEqual(CFSTR("A3089"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A3090"), v1))
      goto LABEL_37;
    v129 = CFSTR("A3092");
    goto LABEL_183;
  }
  v291 = -874769875;
  v290 = xmmword_19B713710;
  if (MGIsDeviceOneOfType((const UInt8 *)&v290, v228, v229, v230, v231, v232, v233, v234, 0))
  {
    v243 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v243)
      return CFSTR("A");
    v1 = v243;
    if (CFEqual(CFSTR("A2847"), v243))
      goto LABEL_350;
    if (CFEqual(CFSTR("A3093"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A3094"), v1))
      goto LABEL_37;
    v129 = CFSTR("A3096");
    goto LABEL_183;
  }
  v289 = 1874287171;
  v288 = xmmword_19B713724;
  if (MGIsDeviceOneOfType((const UInt8 *)&v288, v236, v237, v238, v239, v240, v241, v242, 0))
  {
    v251 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v251)
      return CFSTR("A");
    v1 = v251;
    if (CFEqual(CFSTR("A2848"), v251))
      goto LABEL_350;
    if (CFEqual(CFSTR("A3101"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A3102"), v1))
      goto LABEL_37;
    v129 = CFSTR("A3104");
    goto LABEL_183;
  }
  v287 = -781324731;
  v286 = xmmword_19B713738;
  if (MGIsDeviceOneOfType((const UInt8 *)&v286, v244, v245, v246, v247, v248, v249, v250, 0))
  {
    v259 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (!v259)
      return CFSTR("A");
    v1 = v259;
    if (CFEqual(CFSTR("A2849"), v259))
      goto LABEL_350;
    if (CFEqual(CFSTR("A3105"), v1))
      goto LABEL_23;
    if (CFEqual(CFSTR("A3106"), v1))
      goto LABEL_37;
    v129 = CFSTR("A3108");
    goto LABEL_183;
  }
  v285 = -340360463;
  v284 = xmmword_19B71374C;
  v283 = 1605231531;
  v282 = xmmword_19B713760;
  if (MGIsDeviceOneOfType((const UInt8 *)&v284, v252, v253, v254, v255, v256, v257, v258, (uint64_t)&v282))
  {
    v268 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (v268)
    {
      v1 = v268;
      if (!CFEqual(CFSTR("A2696"), v268))
      {
        v2 = CFSTR("A");
        if (CFEqual(CFSTR("A2757"), v1))
          goto LABEL_47;
        if (!CFEqual(CFSTR("A2777"), v1))
        {
          v9 = CFEqual(CFSTR("A3162"), v1);
          v10 = CFSTR("C");
LABEL_45:
          if (v9)
            v2 = v10;
          goto LABEL_47;
        }
        goto LABEL_23;
      }
      goto LABEL_350;
    }
  }
  else
  {
    v281 = 1878025452;
    v280 = xmmword_19B713774;
    v279 = 1725957070;
    v278 = xmmword_19B713788;
    if (!MGIsDeviceOneOfType((const UInt8 *)&v280, v261, v262, v263, v264, v265, v266, v267, (uint64_t)&v278))return CFSTR("A");
    v269 = MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
    if (v269)
    {
      v1 = v269;
      if (CFEqual(CFSTR("A2759"), v269) || CFEqual(CFSTR("A2435"), v1) || CFEqual(CFSTR("A2436"), v1))
        goto LABEL_350;
      v2 = CFSTR("A");
      if (CFEqual(CFSTR("A2764"), v1))
        goto LABEL_47;
      if (CFEqual(CFSTR("A2761"), v1) || CFEqual(CFSTR("A2437"), v1))
        goto LABEL_23;
      if (CFEqual(CFSTR("A2762"), v1))
        goto LABEL_238;
      v260 = CFSTR("A2766");
      goto LABEL_336;
    }
  }
LABEL_351:
  v270 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/variants.c", 47);
  if (v270)
    v276 = v270 + 1;
  else
    v276 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/variants.c";
  _MGLog((uint64_t)v276, 2561, (uint64_t)CFSTR("unknown variant\n"), v271, v272, v273, v274, v275, v277);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "unknown variant\n", buf, 2u);
  }
  return 0;
}

void *MGSetLogHandler(void *result)
{
  off_1EE3FD7C0 = result;
  return result;
}

const void *sub_19B6C01B8(const __CFDictionary *a1, const void *a2, int a3)
{
  const void *Value;
  const void *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char v23;
  uint8_t buf[4];
  const void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    Value = CFDictionaryGetValue(a1, a2);
    v7 = Value;
    if (Value)
    {
      CFRetain(Value);
    }
    else if (a3)
    {
      v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      if (v15)
        v21 = v15 + 1;
      else
        v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      _MGLog((uint64_t)v21, 319, (uint64_t)CFSTR("Could not lookup %@ from dictionary"), v16, v17, v18, v19, v20, (char)a2);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v25 = a2;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not lookup %@ from dictionary", buf, 0xCu);
      }
    }
    CFRelease(a1);
  }
  else
  {
    if (a3)
    {
      v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
      v14 = v8 ? v8 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
      _MGLog((uint64_t)v14, 324, (uint64_t)CFSTR("No dictionary provided"), v9, v10, v11, v12, v13, v23);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No dictionary provided", buf, 2u);
      }
    }
    return 0;
  }
  return v7;
}

uint64_t sub_19B6C0338()
{
  return 0;
}

void sub_19B6C0340(const __CFArray *a1, uint64_t a2)
{
  uint64_t Count;
  const void **v5;
  const void **v6;
  uint64_t v7;
  CFRange v8;

  if (a1)
  {
    Count = CFArrayGetCount(a1);
    v5 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    v8.location = 0;
    v8.length = Count;
    CFArrayGetValues(a1, v8, v5);
    if (Count >= 1)
    {
      v6 = v5;
      do
      {
        v7 = (uint64_t)*v6++;
        (*(void (**)(uint64_t, uint64_t))(a2 + 16))(a2, v7);
        --Count;
      }
      while (Count);
    }
    free(v5);
  }
}

const __CFData *sub_19B6C03D0(CFDataRef theData)
{
  const __CFData *v1;
  uint64_t Length;
  const UInt8 *BytePtr;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  CFStringRef v11;
  CFStringRef v12;
  CFStringRef v13;

  v1 = theData;
  if (theData)
  {
    Length = CFDataGetLength(theData);
    BytePtr = CFDataGetBytePtr(v1);
    if (Length < 2)
      return 0;
    v4 = (const char *)BytePtr;
    v5 = 0;
    while (!BytePtr[Length - 1 + v5])
    {
      --v5;
      if (!(Length + v5))
        return 0;
    }
    v6 = Length + v5;
    if (!(Length + v5))
      return 0;
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = MEMORY[0x1E0C80978];
      do
      {
        v9 = v4[v7];
        if (!(v4[v7] < 0 ? __maskrune(v9, 0x40000uLL) : *(_DWORD *)(v8 + 4 * v9 + 60) & 0x40000))
          return 0;
      }
      while (v6 != ++v7);
    }
    if (v5)
    {
      v11 = CFStringCreateWithCString(0, v4, 0x8000100u);
      v12 = v11;
      if (v5 == -1)
        v13 = CFStringCreateWithFormat(0, 0, CFSTR("%@\\0"), v11);
      else
        v13 = CFStringCreateWithFormat(0, 0, CFSTR("%@ (%llux\\0)"), v11, -v5);
    }
    else
    {
      v12 = CFStringCreateWithBytes(0, (const UInt8 *)v4, Length, 0x8000100u, 0);
      v13 = CFStringCreateWithFormat(0, 0, CFSTR("%@"), v12);
    }
    v1 = (const __CFData *)v13;
    CFRelease(v12);
  }
  return v1;
}

uint64_t sub_19B6C052C(char *a1, const void *a2, _BYTE *a3)
{
  uint64_t v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const void *Value;
  CFTypeID v10;
  BOOL v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  int valuePtr;
  const void *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a3)
    *a3 = 0;
  if (!access(a1, 4))
  {
    v7 = (const __CFDictionary *)sub_19B6B6F7C(a1, 1);
    if (v7)
    {
      v8 = v7;
      Value = CFDictionaryGetValue(v7, a2);
      v6 = (uint64_t)Value;
      if (Value)
      {
        v10 = CFGetTypeID(Value);
        if (v10 == CFBooleanGetTypeID())
        {
          v11 = CFBooleanGetValue((CFBooleanRef)v6) == 0;
        }
        else
        {
          if (v10 != CFNumberGetTypeID())
          {
            v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
            if (v12)
              v18 = v12 + 1;
            else
              v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
            _MGLog((uint64_t)v18, 739, (uint64_t)CFSTR("illegal type for %@ in %s"), v13, v14, v15, v16, v17, (char)a2);
            v6 = 0;
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              valuePtr = 138412546;
              v21 = a2;
              v22 = 2080;
              v23 = a1;
              _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "illegal type for %@ in %s", (uint8_t *)&valuePtr, 0x16u);
              v6 = 0;
            }
            goto LABEL_21;
          }
          valuePtr = 0;
          CFNumberGetValue((CFNumberRef)v6, kCFNumberIntType, &valuePtr);
          v11 = valuePtr == 0;
        }
        v6 = !v11;
        if (a3)
          *a3 = 1;
      }
LABEL_21:
      CFRelease(v8);
      return v6;
    }
  }
  return 0;
}

CFPropertyListRef sub_19B6C06D8(CFStringRef prefsID, const __CFString *a2)
{
  const __SCPreferences *v3;
  const __SCPreferences *v4;
  CFPropertyListRef Value;
  CFPropertyListRef v6;

  v3 = SCPreferencesCreate(0, CFSTR("MobileGestalt"), prefsID);
  if (!v3)
    return 0;
  v4 = v3;
  Value = SCPreferencesGetValue(v3, a2);
  v6 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v4);
  return v6;
}

uint64_t sub_19B6C073C()
{
  host_t v0;
  kern_return_t v1;
  mach_error_t v2;
  const char *v3;
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  mach_msg_type_number_t host_info_outCnt;
  integer_t host_info_out[2];
  uint8_t buf[4];
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)host_info_out = 0;
  host_info_outCnt = 2;
  v0 = MEMORY[0x1A1AC4BC0]();
  v1 = host_info(v0, 12, host_info_out, &host_info_outCnt);
  if (v1)
  {
    v2 = v1;
    v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v4)
      v3 = v4 + 1;
    v5 = mach_error_string(v2);
    _MGLog((uint64_t)v3, 908, (uint64_t)CFSTR("host_info failed: %s"), v6, v7, v8, v9, v10, v5);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v11 = mach_error_string(v2);
      *(_DWORD *)buf = 136315138;
      v16 = v11;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "host_info failed: %s", buf, 0xCu);
    }
  }
  return *(_QWORD *)host_info_out;
}

BOOL sub_19B6C0844(const char *a1)
{
  const NXArchInfo *v2;
  const NXArchInfo *v3;
  uint64_t v4;
  _BOOL8 result;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _BOOL4 v13;
  fat_arch fat_archs;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = NXGetArchInfoFromName(a1);
  if (v2)
  {
    v3 = v2;
    v4 = sub_19B6C073C();
    *(_QWORD *)&fat_archs.cputype = *(_QWORD *)&v3->cputype;
    *(_QWORD *)&fat_archs.offset = 0;
    fat_archs.align = 0;
    return NXFindBestFatArch(v4, SHIDWORD(v4), &fat_archs, 1u) != 0;
  }
  else
  {
    v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v6)
      v12 = v6 + 1;
    else
      v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    _MGLog((uint64_t)v12, 1011, (uint64_t)CFSTR("arch %s unknown"), v7, v8, v9, v10, v11, (char)a1);
    v13 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v13)
    {
      fat_archs.cputype = 136315138;
      *(_QWORD *)&fat_archs.cpusubtype = a1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "arch %s unknown", (uint8_t *)&fat_archs, 0xCu);
      return 0;
    }
  }
  return result;
}

BOOL sub_19B6C0958(const __CFString *a1)
{
  const __CFString *v2;
  const __CFString *v3;
  _BOOL8 v4;

  v2 = (const __CFString *)MGGetStringAnswer((const char **)CFSTR("k7QIBwZJJOVw+Sej/8h8VA"));
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFStringCompare(v2, a1, 0) == kCFCompareEqualTo;
  CFRelease(v3);
  return v4;
}

BOOL sub_19B6C09B0(const char *a1)
{
  int v2;
  const char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = access(a1, 0);
  if (v2 && *__error() != 2)
  {
    v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c";
    v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/utility.c", 47);
    if (v4)
      v3 = v4 + 1;
    __error();
    _MGLog((uint64_t)v3, 1043, (uint64_t)CFSTR("access(2) %s: %{errno}d"), v5, v6, v7, v8, v9, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v10 = *__error();
      *(_DWORD *)buf = 136315394;
      v13 = a1;
      v14 = 1024;
      v15 = v10;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "access(2) %s: %{errno}d", buf, 0x12u);
    }
  }
  return v2 == 0;
}

const __CFString *sub_19B6C0ACC(int a1)
{
  const __CFString *v1;

  if ((a1 - 1) > 7)
    v1 = CFSTR("Invalid Key");
  else
    v1 = off_1E3BD0500[a1 - 1];
  CFRetain(v1);
  return v1;
}

const __CFString *sub_19B6C0B14(int a1)
{
  const __CFString *v1;
  const __CFString *v2;

  v1 = CFSTR("MGS_SIM_NULL_STATUS");
  if (a1 == 2)
    v1 = CFSTR("MGS_SIM_TRAY_STATUS");
  if (a1 == 1)
    v2 = CFSTR("MGS_SIM_STATUS");
  else
    v2 = v1;
  CFRetain(v2);
  return v2;
}

CFDataRef sub_19B6C0B60()
{
  int v0;
  int v1;
  float v2;
  int MainDisplay;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t buf[4];
  int v14;
  UInt8 bytes[8];
  uint64_t v16;
  float v17;
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v0 = sub_19B6BAD7C("IODeviceTree:/chosen", CFSTR("display-scale"), 0, 0, 1);
  v1 = sub_19B6BAD7C("IODeviceTree:/chosen", CFSTR("display-rotation"), 0, 0xFFFFFFFFLL, 1);
  if (v1 == -1)
    v2 = -1.0;
  else
    v2 = (double)((360 - v1) % 360) * 0.0174532925;
  if (sub_19B6B9C44() != 4 && sub_19B6B9C44() != 8 && sub_19B6B9C44() != 10)
  {
    *(_QWORD *)bytes = 0;
    v16 = 0;
    MainDisplay = IOMobileFramebufferGetMainDisplay();
    if (MainDisplay)
    {
      v5 = MainDisplay;
      v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
      if (v6)
        v12 = v6 + 1;
      else
        v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
      _MGLog((uint64_t)v12, 64, (uint64_t)CFSTR("IOMobileFramebufferGetMainDisplay failed: %d\n"), v7, v8, v9, v10, v11, v5);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v14 = v5;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IOMobileFramebufferGetMainDisplay failed: %d\n", buf, 8u);
      }
    }
  }
  memset(bytes, 255, sizeof(bytes));
  LODWORD(v16) = -1;
  *((float *)&v16 + 1) = (float)v0;
  v17 = v2;
  v18 = -1;
  return CFDataCreate(0, bytes, 24);
}

uint64_t sub_19B6C1620()
{
  int MainDisplay;
  int v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  MainDisplay = IOMobileFramebufferGetMainDisplay();
  if (MainDisplay)
  {
    v1 = MainDisplay;
    v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c", 47);
    if (v2)
      v8 = v2 + 1;
    else
      v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGIOMFBSupport.c";
    _MGLog((uint64_t)v8, 278, (uint64_t)CFSTR("IOMobileFramebufferGetMainDisplay failed: %d\n"), v3, v4, v5, v6, v7, v1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v11 = v1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IOMobileFramebufferGetMainDisplay failed: %d\n", buf, 8u);
    }
  }
  return 0;
}

uint64_t sub_19B6C17E4()
{
  if (qword_1ECD35BC8 != -1)
    dispatch_once(&qword_1ECD35BC8, &unk_1E3BCFE78);
  return qword_1ECD35BD0;
}

BOOL sub_19B6C1824()
{
  if (qword_1ECD35B80 != -1)
    dispatch_once(&qword_1ECD35B80, &unk_1E3BCFF78);
  return dword_1ECD35AFC != -1 && BYTE4(qword_19B713910[4 * dword_1ECD35AFC + 2]) != 0;
}

const void *sub_19B6C188C()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *Value;
  const void *v3;

  v0 = (const __CFDictionary *)sub_19B6BB9D0();
  if (!v0)
    return 0;
  v1 = v0;
  Value = CFDictionaryGetValue(v0, CFSTR("SoftwareBehavior"));
  v3 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v1);
  return v3;
}

uint64_t sub_19B6C18E0()
{
  if (qword_1EE3FD838 != -1)
    dispatch_once(&qword_1EE3FD838, &unk_1E3BCFEB8);
  return qword_1EE3FD840;
}

char *sub_19B6C1920()
{
  char *result;

  result = sub_19B6B3B24("hw.target");
  qword_1EE3FD840 = (uint64_t)result;
  return result;
}

uint64_t sub_19B6C1944()
{
  if (qword_1EE3FD868 != -1)
    dispatch_once(&qword_1EE3FD868, &unk_1E3BD0740);
  return qword_1EE3FD858;
}

char *sub_19B6C1984()
{
  char *result;

  result = sub_19B6B3B24("hw.osenvironment");
  qword_1EE3FD858 = (uint64_t)result;
  return result;
}

uint64_t sub_19B6C19A8()
{
  int *v1;
  char *v2;
  size_t v3;
  uint64_t v4;
  uint8_t buf[4];
  char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v3 = 8;
  v4 = 0;
  if (sysctlbyname("hw.memsize_physical", &v4, &v3, 0, 0) != -1)
    return v4;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v1 = __error();
    v2 = strerror(*v1);
    *(_DWORD *)buf = 136315138;
    v6 = v2;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "sysctlbyname: %s", buf, 0xCu);
  }
  return 0;
}

BOOL sub_19B6C1A7C()
{
  _BOOL8 result;
  _BOOL4 v1;
  int *v2;
  char *v3;
  size_t v4;
  int v5;
  uint8_t buf[4];
  char *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v5 = 255;
  v4 = 4;
  if (sysctlbyname("kern.exclaves_status", &v5, &v4, 0, 0) != -1)
    return v5 == 1;
  v1 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v1)
  {
    v2 = __error();
    v3 = strerror(*v2);
    *(_DWORD *)buf = 136315138;
    v7 = v3;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "sysctlbyname(kern.exclaves_status): %s", buf, 0xCu);
    return 0;
  }
  return result;
}

void *sub_19B6C1B68(_DWORD *a1)
{
  *a1 = 2612;
  return &unk_1E3B69DF8;
}

const char *sub_19B6C1B7C(char *__s1)
{
  const char *v1;
  char *v2;

  v1 = __s1;
  if (__s1)
  {
    if (strcmp(__s1, "/"))
    {
      v2 = rindex(v1, 47);
      if (v2)
        return v2 + 1;
    }
  }
  return v1;
}

uint64_t sub_19B6C1BC8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t v8[16];

  v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v0)
    v6 = v0 + 1;
  else
    v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v6, 185, (uint64_t)CFSTR("called dummy function!"), v1, v2, v3, v4, v5, v8[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "called dummy function!", v8, 2u);
  }
  return 0;
}

void _MGSetServer()
{
  byte_1EE3FD870 = 1;
}

uint64_t _MGWriteCacheOnHelper()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 44);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(44, 2);
  return v0();
}

uint64_t _MGWriteRebuildCacheSentinel()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 48);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(48, 2);
  return v0();
}

uint64_t MGSetAnswer(const char **a1, const void *a2)
{
  const char **v4;
  const __SCPreferences *v5;
  const __SCPreferences *v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint8_t buf[4];
  const char **v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  if (a1 && a2)
  {
    v4 = sub_19B6B8DD8(a1, 1);
    if (v4 && ((_BYTE)v4[19] & 4) != 0)
    {
      v5 = SCPreferencesCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], CFSTR("com.apple.mobilegestalt.plist"), CFSTR("com.apple.mobilegestalt.plist"));
      if (v5)
      {
        v6 = v5;
        if (SCPreferencesLock(v5, 1u))
        {
          if (SCPreferencesSetValue(v6, (CFStringRef)a1, a2))
          {
            if (SCPreferencesCommitChanges(v6))
            {
              if (SCPreferencesApplyChanges(v6))
              {
                SCPreferencesUnlock(v6);
                v7 = 0;
LABEL_11:
                CFRelease(v6);
                return v7;
              }
              v47 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
              _MGLog((uint64_t)v47, 897, (uint64_t)CFSTR("Could not apply changes to SCPreferences"), v48, v49, v50, v51, v52, v53);
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                v33 = MEMORY[0x1E0C81028];
                v34 = "Could not apply changes to SCPreferences";
                goto LABEL_29;
              }
LABEL_30:
              v7 = 2;
              goto LABEL_11;
            }
            v41 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
            _MGLog((uint64_t)v41, 896, (uint64_t)CFSTR("Could not commit changes to SCPreferences"), v42, v43, v44, v45, v46, v53);
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              goto LABEL_30;
            *(_WORD *)buf = 0;
            v33 = MEMORY[0x1E0C81028];
            v34 = "Could not commit changes to SCPreferences";
          }
          else
          {
            v35 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
            _MGLog((uint64_t)v35, 895, (uint64_t)CFSTR("Could not write value to SCPreferences"), v36, v37, v38, v39, v40, v53);
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              goto LABEL_30;
            *(_WORD *)buf = 0;
            v33 = MEMORY[0x1E0C81028];
            v34 = "Could not write value to SCPreferences";
          }
        }
        else
        {
          v27 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
          _MGLog((uint64_t)v27, 894, (uint64_t)CFSTR("Could not acquire SCPreferences lock"), v28, v29, v30, v31, v32, v53);
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            goto LABEL_30;
          *(_WORD *)buf = 0;
          v33 = MEMORY[0x1E0C81028];
          v34 = "Could not acquire SCPreferences lock";
        }
LABEL_29:
        v7 = 2;
        _os_log_impl(&dword_19B6B1000, v33, OS_LOG_TYPE_DEFAULT, v34, buf, 2u);
        goto LABEL_11;
      }
      v21 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
      _MGLog((uint64_t)v21, 891, (uint64_t)CFSTR("Could not create SCPreferences session"), v22, v23, v24, v25, v26, v53);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v7 = 2;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not create SCPreferences session", buf, 2u);
        return v7;
      }
    }
    else
    {
      v15 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
      _MGLog((uint64_t)v15, 887, (uint64_t)CFSTR("Key %@ is not settable"), v16, v17, v18, v19, v20, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v55 = a1;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Key %@ is not settable", buf, 0xCu);
      }
    }
    return 2;
  }
  v9 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog((uint64_t)v9, 886, (uint64_t)CFSTR("Question and answer must both be non-null"), v10, v11, v12, v13, v14, v53);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Question and answer must both be non-null", buf, 2u);
  }
  return 3;
}

const void *_MGCopyAnswerWithMode(const char **a1, int a2)
{
  const __CFAllocator *v4;
  CFMutableDictionaryRef Mutable;
  CFMutableDictionaryRef v6;
  CFNumberRef v7;
  CFNumberRef v8;
  const void *v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t v23[12];
  int valuePtr;
  uint8_t buf[16];

  v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v11 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v11, 925, (uint64_t)CFSTR("failed to create options"), v12, v13, v14, v15, v16, v23[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to create options", buf, 2u);
    }
    return 0;
  }
  v6 = Mutable;
  valuePtr = a2;
  v7 = CFNumberCreate(v4, kCFNumberIntType, &valuePtr);
  if (!v7)
  {
    v17 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v17, 929, (uint64_t)CFSTR("failed to create CFNumber for mode"), v18, v19, v20, v21, v22, v23[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v23 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to create CFNumber for mode", v23, 2u);
    }
    CFRelease(v6);
    return 0;
  }
  v8 = v7;
  CFDictionarySetValue(v6, CFSTR("QueryMode"), v7);
  v9 = sub_19B6B89E4(a1, 0);
  CFRelease(v6);
  CFRelease(v8);
  return v9;
}

void sub_19B6C21E4(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
  _QWORD v3[6];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19B6C2240;
  v3[3] = &unk_1E3BD0888;
  v3[4] = *(_QWORD *)(a1 + 32);
  v3[5] = a3;
  sub_19B6C0340(a2, (uint64_t)v3);
}

uint64_t sub_19B6C2240(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2, *(_QWORD *)(a1 + 40));
}

CFNumberRef sub_19B6C2250(const __CFString *a1, const char **a2)
{
  CFNumberRef result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t buf[4];
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  result = sub_19B6BC5F4("IODeviceTree:/product", a1, 0);
  if (!result)
  {
    v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v5)
      v11 = v5 + 1;
    else
      v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v11, 6220, (uint64_t)CFSTR("No %@ size defined. Assuming display size"), v6, v7, v8, v9, v10, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v13 = a1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No %@ size defined. Assuming display size", buf, 0xCu);
    }
    return (CFNumberRef)sub_19B6B89E4(a2, 0);
  }
  return result;
}

CFStringRef sub_19B6C234C()
{
  const __CFData *v0;
  unsigned int v1;
  BOOL v2;
  unsigned int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  CFStringRef v11;
  const char *v12;
  char *v13;
  char Length;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const UInt8 *BytePtr;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint8_t buf[4];
  CFIndex v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("PxEDp0oOasJ92F/V7YBa8A"), 0);
  v1 = sub_19B6B6454();
  if (v0)
    v2 = v1 == 0;
  else
    v2 = 0;
  if (v2)
  {
    if (CFDataGetLength(v0) > 16)
    {
      BytePtr = CFDataGetBytePtr(v0);
      v11 = CFStringCreateWithBytes(0, BytePtr, 17, 0x600u, 0);
      v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v21)
        v27 = v21 + 1;
      else
        v27 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v27, 8458, (uint64_t)CFSTR("Copy ScreenSerialNumber: cfScreenSN %@"), v22, v23, v24, v25, v26, (char)v11);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v30 = (CFIndex)v11;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Copy ScreenSerialNumber: cfScreenSN %@", buf, 0xCu);
      }
    }
    else
    {
      v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13)
        v12 = v13 + 1;
      Length = CFDataGetLength(v0);
      _MGLog((uint64_t)v12, 8454, (uint64_t)CFSTR("RawPanelSerialNumber Invalid Length: %ld"), v15, v16, v17, v18, v19, Length);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        v30 = CFDataGetLength(v0);
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "RawPanelSerialNumber Invalid Length: %ld", buf, 0xCu);
      }
      sub_19B6B9160(7);
      v11 = 0;
    }
    goto LABEL_23;
  }
  v3 = v1;
  v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v4)
    v10 = v4 + 1;
  else
    v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v10, 8461, (uint64_t)CFSTR("Failed Copy ScreenSerialNumber: cfScreenSN %@, error %d"), v5, v6, v7, v8, v9, 0);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v30 = 0;
    v31 = 1024;
    v32 = v3;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed Copy ScreenSerialNumber: cfScreenSN %@, error %d", buf, 0x12u);
  }
  v11 = 0;
  if (v0)
LABEL_23:
    CFRelease(v0);
  return v11;
}

BOOL sub_19B6C25BC()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("JljZ8PqQJB8QlFC2NsgOPw"), 101);
}

BOOL sub_19B6C25D4()
{
  return sub_19B6B9C44() == 3;
}

CFTypeRef sub_19B6C25F0()
{
  return sub_19B6D74D4(CFSTR("BackSuperWideCameraModuleSerialNumString"));
}

BOOL sub_19B6C25FC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("UZfUiD1Aqy3GOwg72SQcLQ"), a2);
}

BOOL sub_19B6C2620(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("UZfUiD1Aqy3GOwg72SQcLQ"), 82, a2);
}

uint64_t sub_19B6C2634()
{
  int v0;

  v0 = sub_19B6D7570(3);
  return v0 | sub_19B6D7570(6);
}

uint64_t sub_19B6C2664()
{
  return sub_19B6E4448((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("4k6Wv56SWfITjzet+hIHMQ"), 109, (uint64_t)CFSTR("3uw7204ET4Vk1Cl4iJiNqQ"), 116);
}

uint64_t sub_19B6C2688()
{
  _BOOL4 v0;
  uint64_t v1;

  if (sub_19B6B9C44() == 3)
  {
    v0 = sub_19B6B3038((_BOOL8)CFSTR("t8027"), 0);
    v1 = MEMORY[0x1E0C9AE50];
    if (!v0)
      v1 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v1 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v1;
}

BOOL sub_19B6C26DC()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("9RreaA6rTvewPbqQy5ldRg"), 102);
}

BOOL sub_19B6C26F4()
{
  stat v1;

  memset(&v1, 0, sizeof(v1));
  return stat("/System/Library/PrivateFrameworks/Sharing.framework", &v1) == 0;
}

BOOL sub_19B6C273C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("wlxZYdEZITDTzgs/OnnV+Q"), 112);
}

uint64_t sub_19B6C2754(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v12 = -1157300313;
  v11 = xmmword_19B718370;
  v10 = -2132668294;
  v9 = xmmword_19B718384;
  return MGIsDeviceOneOfType((const UInt8 *)&v11, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v9);
}

uint64_t sub_19B6C2870()
{
  uint64_t result;

  if (sub_19B6B9C44() != 11)
  {
    result = sub_19B6B9C44();
    if ((_DWORD)result == 1)
      return result;
    if (sub_19B6B9C44() != 2 && sub_19B6B9C44() != 3)
      return sub_19B6B9C44() == 4;
  }
  return 1;
}

BOOL sub_19B6C28C4()
{
  return sub_19B6BAC78("IODeviceTree:/buttons", CFSTR("sad18VQX7AeS+291aKhJlw"), 102);
}

uint64_t sub_19B6C28DC()
{
  int v0;
  uint64_t result;
  _BOOL4 v2;
  stat v3;

  memset(&v3, 0, sizeof(v3));
  v0 = stat("/AppleInternal/Library/PreferenceBundles/Internal Settings.bundle", &v3);
  LOBYTE(v3.st_dev) = 0;
  result = sub_19B6C052C("/var/mobile/Library/Preferences/com.apple.springboard.plist", CFSTR("SBAllowSensitiveUI"), &v3);
  if (!LOBYTE(v3.st_dev))
  {
    v2 = v0 == 0;
    LODWORD(result) = sub_19B6C052C("/System/Library/CoreServices/SBTeaLeafOverrides.plist", CFSTR("SBAllowSensitiveUI"), &v3);
    if (LOBYTE(v3.st_dev))
      return result;
    else
      return v2;
  }
  return result;
}

BOOL sub_19B6C2978()
{
  return !MGGetBoolAnswer((const char **)CFSTR("s+gaKNe68Gs3PfqKrZhi1w"));
}

uint64_t sub_19B6C2998()
{
  return sub_19B6DFA00(0x43474D74u);
}

BOOL sub_19B6C29A4()
{
  return sub_19B6BACD0((uint64_t)CFSTR("EUVolumeLimit"), CFSTR("RegionalBehaviorEUVolumeLimit"));
}

const __CFString *sub_19B6C29B8()
{
  uint64_t v0;
  unsigned int v2;

  v0 = sub_19B6DFA00(0x434C4347u);
  if ((_DWORD)v0)
    return CFStringCreateWithFormat(0, 0, CFSTR("%d"), v0);
  if (MGGetBoolAnswer((const char **)CFSTR("XkfGVYlrkBQJgaGabHESJQ")))
    return sub_19B6D76C4((const char **)CFSTR("8/tysfSvORoyVg9IE901oQ"));
  v2 = sub_19B6D773C();
  if (v2 <= 8)
    return *(&off_1E3BD0940 + 2 * v2);
  else
    return CFSTR("unknown");
}

BOOL sub_19B6C2A48()
{
  return sub_19B6B9C44() != 4;
}

BOOL sub_19B6C2A64()
{
  _BOOL8 result;

  result = sub_19B6D65F8();
  if (result)
    return !sub_19B6B5AAC();
  return result;
}

const void *sub_19B6C2A84()
{
  return sub_19B6DAD48((unint64_t)CFSTR("CertID"), (unint64_t)CFSTR("GoldCertID"));
}

uint64_t sub_19B6C2A98()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 3;
  return result;
}

BOOL sub_19B6C2AC0()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("HdWhWK8BN8j/O9k8/OHblQ"), 115);
}

BOOL sub_19B6C2AD8()
{
  return sub_19B6BACAC("IODeviceTree:/product/haptics", CFSTR("XKpK5v7PGzbe7igjloNBpQ"), 99);
}

CFDataRef sub_19B6C2AF0()
{
  CFDataRef result;

  if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
    return sub_19B6DFCB8(0x574D6163u);
  result = (CFDataRef)sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("mac-address-wifi0"), 0);
  if (!result)
  {
    result = (CFDataRef)sub_19B6DC190("sdio");
    if (!result)
    {
      result = (CFDataRef)sub_19B6DC190("wlan");
      if (!result)
      {
        result = (CFDataRef)sub_19B6DC190("marconi-wifi");
        if (!result)
        {
          if ((sub_19B6B5FA0() & 1) != 0)
            return sub_19B6DFCB8(0x574D6163u);
          result = (CFDataRef)sub_19B6DC1A4();
          if (!result)
            return sub_19B6DFCB8(0x574D6163u);
        }
      }
    }
  }
  return result;
}

BOOL sub_19B6C2B80(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("eZS2J+wspyGxqNYZeZ/sbA"), a2);
}

BOOL sub_19B6C2BA4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("eZS2J+wspyGxqNYZeZ/sbA"), 87, a2);
}

uint64_t sub_19B6C2BB8()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 2;
  return result;
}

CFStringRef sub_19B6C2BE0()
{
  return sub_19B6BC39C("IODeviceTree:/chosen", CFSTR("MQoTKg93BM8ZhBaB3WUPdw"), 102);
}

uint64_t sub_19B6C2BF8()
{
  uint64_t (*v0)(const __CFString *);

  v0 = (uint64_t (*)(const __CFString *))*((_QWORD *)off_1EE3FD5A0 + 90);
  if (!v0)
    v0 = (uint64_t (*)(const __CFString *))sub_19B6BBD84(90, 2);
  return v0(CFSTR("SupportedKeyboards"));
}

BOOL sub_19B6C2C30()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("hK/qlAUuu8u6SvIRkKmjQQ"), 103);
}

uint64_t sub_19B6C2C48()
{
  if (sub_19B6B9C44() == 3)
    return 10;
  else
    return 20;
}

BOOL sub_19B6C2C6C()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("/ej/HWmqnKV/QQptXhUZmg"), 110);
}

const void *sub_19B6C2C98()
{
  return sub_19B6B6DF4((const void *)*MEMORY[0x1E0C9AB90], 1);
}

BOOL sub_19B6C2CAC()
{
  unsigned int (*v0)(_QWORD);

  v0 = (unsigned int (*)(_QWORD))*((_QWORD *)off_1EE3FD5A0 + 95);
  if (!v0)
    v0 = (unsigned int (*)(_QWORD))sub_19B6BBD84(95, 2);
  return v0(0) != 3;
}

BOOL sub_19B6C2CEC()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("FuR7SfqQmxpRW5MyqMm7FQ"), 108);
}

CFStringRef sub_19B6C2D04()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("BGIXXp6VsbLlQg+8+0sBAA"), 99);
}

BOOL sub_19B6C2D1C()
{
  return sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("lMKshPs7fX9YxDSOEXnoiw"), 101);
}

BOOL sub_19B6C2D34()
{
  return *MEMORY[0x1E0C9AE50] != 0;
}

BOOL sub_19B6C2D4C()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("lR7sjp4tOz3cMWoEMlZrLA"), 117);
}

uint64_t sub_19B6C2D78()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 6 || sub_19B6B9C44() == 2;
  return result;
}

BOOL sub_19B6C2DB4()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("ItOvlwIhFj2aCXL4wk3ijg"), 102);
}

BOOL sub_19B6C2DCC()
{
  return sub_19B6BAC78("IODeviceTree:/buttons", CFSTR("Ah5yfSlY2yycIQb92HbmrA"), 102);
}

BOOL sub_19B6C2DE4()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("Wft7kODl9Y2uX/sb47GoEA"), 115);
}

BOOL sub_19B6C2DFC()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("+q5wYk81dLM2qjufnC0phw"), 115);
}

const void *sub_19B6C2E14()
{
  return sub_19B6DAD48((unint64_t)CFSTR("ChipID"), 0);
}

BOOL sub_19B6C2E24(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("eNgz35a7iZnVeEMwsBQZew"), a2);
}

BOOL sub_19B6C2E48(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("eNgz35a7iZnVeEMwsBQZew"), 66, a2);
}

BOOL sub_19B6C2E5C()
{
  return sub_19B6B9C44() == 6 && sub_19B6B5FE0((_BOOL8)CFSTR("M10"));
}

const void *sub_19B6C2E8C()
{
  return sub_19B6B2C64("IODeviceTree:/arm-io/disp0", CFSTR("t56wS9db+T2F2bxBpYSX8Q"), 101);
}

BOOL sub_19B6C2EA4(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("yPqGUljqvtItkM6XMCZaQw"), a2);
}

BOOL sub_19B6C2EC8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("yPqGUljqvtItkM6XMCZaQw"), 68, a2);
}

CFNumberRef sub_19B6C2EDC()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("IUvPFaILUl3l0684dR0AlA"), 102);
}

BOOL sub_19B6C2EF4()
{
  _BOOL8 result;

  result = MGGetBoolAnswer((const char **)CFSTR("nv4RoLkNoPT0/rsO8Yaiew"));
  if (result)
    return !MGGetBoolAnswer((const char **)CFSTR("2pxKjejpRGpWvUE+3yp5mQ"));
  return result;
}

uint64_t sub_19B6C2F24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 7
    || sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 11
    || sub_19B6B9C44() == 8)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

const void *sub_19B6C302C()
{
  return sub_19B6B2C64("IODeviceTree:/product/audio", CFSTR("EuGnCiDhD1LBnMc96k/GQQ"), 115);
}

CFTypeRef sub_19B6C3044()
{
  return sub_19B6BBC28(1, "rose", CFSTR("ECID"));
}

BOOL sub_19B6C305C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("CPiqZJJPocpjc5C5qe1tiw"), a2);
}

BOOL sub_19B6C3080(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("CPiqZJJPocpjc5C5qe1tiw"), 65, a2);
}

CFTypeRef sub_19B6C3094()
{
  return sub_19B6D7850(CFSTR("YonkersUID"));
}

BOOL sub_19B6C30A0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("bwLsbkp4shhHuNB5VpRa8w"), a2);
}

BOOL sub_19B6C30C4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("bwLsbkp4shhHuNB5VpRa8w"), 89, a2);
}

BOOL sub_19B6C30D8()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("eKgHzGQ9HnWdPKX7W16OAg"), 117);
}

CFDataRef sub_19B6C30F0()
{
  _OWORD v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D78B0((uint64_t)v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

CFNumberRef sub_19B6C3134()
{
  return sub_19B6BC5F4("IODeviceTree:/product/audio", CFSTR("jkRyJt34tZOjsO1YhVc0mw"), 115);
}

uint64_t sub_19B6C314C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 7
    || sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 11
    || sub_19B6B9C44() == 8)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

BOOL sub_19B6C3254()
{
  return sub_19B6BACAC("IODeviceTree:/backlight", CFSTR("/wG6EG34fRtAsZoLk/8YIw"), 115);
}

BOOL sub_19B6C326C()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("RIJvT6s+kyJKsCvHFbcwwA"), 104);
}

uint64_t sub_19B6C3284()
{
  BOOL v0;
  uint64_t v1;

  v0 = sub_19B6B5FE0((_BOOL8)CFSTR("H6"));
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0 && sub_19B6B9C44() != 11)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

uint64_t sub_19B6C32CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 7
    || sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 11
    || sub_19B6B9C44() == 8)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

CFTypeRef sub_19B6C33D4()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 13);
  if (!v0)
    v0 = sub_19B6BBD84(13, 2);
  TypeID = CFStringGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyLastKnownMobileSubscriberCountryCode", v0, TypeID);
}

const void *sub_19B6C3420()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  CFTypeID v2;
  const void *Value;
  const void *v4;
  CFTypeID v5;

  v0 = (const __CFDictionary *)sub_19B6E46E4(0, (uint64_t)CFSTR("AppleLisaHIDEventDriver"), 0, (uint64_t)CFSTR("HIDEventServiceProperties"), 0);
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFDictionaryGetTypeID())
    {
      Value = CFDictionaryGetValue(v1, CFSTR("RotateToWakeSupported"));
      v4 = Value;
      if (!Value)
      {
LABEL_7:
        CFRelease(v1);
        goto LABEL_9;
      }
      v5 = CFGetTypeID(Value);
      if (v5 == CFBooleanGetTypeID())
      {
        CFRetain(v4);
        goto LABEL_7;
      }
    }
    v4 = 0;
    goto LABEL_7;
  }
  v4 = 0;
LABEL_9:
  if (v4)
    return v4;
  else
    return (const void *)*MEMORY[0x1E0C9AE40];
}

CFNumberRef sub_19B6C34E0()
{
  return sub_19B6BC5F4("IODeviceTree:/product/facetime", CFSTR("RrhB72r1de9N65EG4pgqJw"), 116);
}

CFTypeRef sub_19B6C34F8()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 20);
  if (!v0)
    v0 = sub_19B6BBD84(20, 2);
  TypeID = CFStringGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionGetActiveWirelessTechnology", v0, TypeID);
}

const void *sub_19B6C3544()
{
  return sub_19B6B89E4((const char **)CFSTR("ZgIjA7Nwd2jSo13lhDO1Iw"), 0);
}

CFNumberRef sub_19B6C3554()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("Ini7+h7Q4ZZctfFM9+KTBw"), 112);
}

BOOL sub_19B6C356C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("X9cK3qXzcFCrVpE258P2lQ"), 104);
}

BOOL sub_19B6C3584()
{
  return sub_19B6B9C44() == 1;
}

BOOL sub_19B6C35A0()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("JQr1mcESYcN648vrcZPJEA"), 102);
}

BOOL sub_19B6C35B8()
{
  return sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("E3qwwdwgUSy6FV6VC+Uf3A"), 114);
}

BOOL sub_19B6C35D4(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("nZUUCFZgomfWUIPGGzNAqg"), a2);
}

BOOL sub_19B6C35F8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("nZUUCFZgomfWUIPGGzNAqg"), 83, a2);
}

BOOL sub_19B6C360C()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("vTKPWiAZkQifTv/4/uOnQQ"), 102);
}

float sub_19B6C3624()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  CFTypeID v2;
  float valuePtr;

  valuePtr = 0.0;
  v0 = (const __CFNumber *)CFPreferencesCopyAppValue(CFSTR("RequiredBatteryLevelForSoftwareUpdate"), (CFStringRef)*MEMORY[0x1E0C9B248]);
  if (!v0)
    return 0.5;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFNumberGetTypeID() || !CFNumberGetValue(v1, kCFNumberFloat32Type, &valuePtr))
    valuePtr = 0.5;
  CFRelease(v1);
  return valuePtr;
}

CFNumberRef sub_19B6C36AC()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("7qHcAWI5X9b1SiyYIg/Byw"), 117);
}

CFNumberRef sub_19B6C36C4()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("smT9LjRW3acTT7WTS/XqyQ"), 102);
}

uint64_t sub_19B6C36DC()
{
  return 1;
}

BOOL sub_19B6C36E4()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("RR4G+l3k5mfFFr6Igw88kQ"), 97);
}

uint64_t sub_19B6C36FC()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 32);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(32, 2);
  return v0();
}

BOOL sub_19B6C3728(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("frZQaeyWLUvLjeuEK43hmg"), a2);
}

BOOL sub_19B6C374C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("frZQaeyWLUvLjeuEK43hmg"), 73, a2);
}

BOOL sub_19B6C3760()
{
  uint64_t (*v0)(void);
  const __CFArray *v1;
  const __CFArray *v2;
  CFIndex Count;
  const void **v4;
  _BOOL8 v5;
  CFRange v7;

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 1);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(1, 2);
  v1 = (const __CFArray *)v0();
  if (!v1)
    return 0;
  v2 = v1;
  Count = CFArrayGetCount(v1);
  v4 = (const void **)*((_QWORD *)off_1EE3FD5A0 + 70);
  if (!v4)
    v4 = (const void **)sub_19B6BBD84(70, 1);
  v7.location = 0;
  v7.length = Count;
  v5 = CFArrayContainsValue(v2, v7, *v4) != 0;
  CFRelease(v2);
  return v5;
}

uint64_t sub_19B6C37F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v58 = -414334491;
  v57 = xmmword_19B718528;
  v56 = -1509831889;
  v55 = xmmword_19B71853C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v57, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v55))
    goto LABEL_6;
  v54 = 289690957;
  v53 = xmmword_19B718550;
  v52 = 586720268;
  v51 = xmmword_19B718564;
  if (MGIsDeviceOneOfType((const UInt8 *)&v53, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v51))
    goto LABEL_6;
  if (sub_19B6B9C44() != 6)
    goto LABEL_6;
  v50 = 368885834;
  v49 = xmmword_19B718578;
  v48 = -526227167;
  v47 = xmmword_19B71858C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v49, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v47)
    || (v46 = -2092955395,
        v45 = xmmword_19B717BB4,
        v44 = 674998600,
        v43 = xmmword_19B717BC8,
        MGIsDeviceOneOfType((const UInt8 *)&v45, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v43)))
  {
LABEL_6:
    v36 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v42 = 1711910369;
    v41 = xmmword_19B717B8C;
    v40 = -1282800328;
    v39 = xmmword_19B717BA0;
    v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v39);
    v36 = MEMORY[0x1E0C9AE40];
    if (!v38)
      v36 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v36;
}

uint64_t sub_19B6C39F0()
{
  return sub_19B6D7570(1);
}

BOOL sub_19B6C39F8()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("fucd7llSuoCNHrrvLS1QQg"), 119);
}

uint64_t sub_19B6C3A10()
{
  return sub_19B6E4914((uint64_t)CFSTR("wlan.nan.enabled"));
}

BOOL sub_19B6C3A1C()
{
  return sub_19B6BAC78("IODeviceTree:/product/maps", CFSTR("1z6Kk4xUAVLdaBPGugsDSA"), 110);
}

BOOL sub_19B6C3A34()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("2ViNo1fbaEkg2vdTmCiW7g"), 112);
}

CFTypeRef sub_19B6C3A4C()
{
  return sub_19B6D74D4(CFSTR("BackTeleCameraModuleSerialNumString"));
}

BOOL sub_19B6C3A58(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("cm399FbDqnv8IOFoeBLWYg"), a2);
}

BOOL sub_19B6C3A7C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("cm399FbDqnv8IOFoeBLWYg"), 82, a2);
}

CFNumberRef sub_19B6C3A90()
{
  int *p_valuePtr;
  BOOL v2;
  int v3;
  int valuePtr;

  v2 = 0;
  if (sub_19B6E1C04(CFSTR("edmd"), &v2))
  {
    v3 = 1;
    p_valuePtr = &v3;
    return CFNumberCreate(0, kCFNumberSInt32Type, p_valuePtr);
  }
  if (v2)
  {
    valuePtr = 0;
    p_valuePtr = &valuePtr;
    return CFNumberCreate(0, kCFNumberSInt32Type, p_valuePtr);
  }
  return 0;
}

uint64_t sub_19B6C3AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v58 = 1602014129;
  v57 = xmmword_19B71817C;
  v56 = -810116762;
  v55 = xmmword_19B718190;
  v54 = -1195351767;
  v53 = xmmword_19B7181A4;
  v52 = 1789837692;
  v51 = xmmword_19B7180A0;
  v50 = -1239654590;
  v49 = xmmword_19B7180B4;
  v48 = -1579092758;
  v47 = xmmword_19B7180C8;
  v46 = 48355600;
  v45 = xmmword_19B7180DC;
  v44 = -679691073;
  v43 = xmmword_19B7180F0;
  v42 = 1430379884;
  v41 = xmmword_19B718104;
  if (MGIsDeviceOneOfType((const UInt8 *)&v57, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v55))
    goto LABEL_7;
  if (sub_19B6B9C44() == 6)
    goto LABEL_7;
  if (sub_19B6B9C44() == 4)
    goto LABEL_7;
  if (sub_19B6B9C44() == 7)
    goto LABEL_7;
  if (sub_19B6B9C44() == 8)
    goto LABEL_7;
  v40 = -38605833;
  v39 = xmmword_19B717BDC;
  v38 = -894965712;
  v37 = xmmword_19B717BF0;
  v36 = -2101636455;
  v35 = xmmword_19B717C04;
  v34 = -1955568593;
  v33 = xmmword_19B717C18;
  v32 = 28030256;
  v31 = xmmword_19B718208;
  v30 = 1214363620;
  v29 = xmmword_19B71821C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v39, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v37))
  {
LABEL_7:
    v22 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v28 = -926344036;
    v27 = xmmword_19B717C2C;
    v26 = -954998212;
    v25 = xmmword_19B717C40;
    v24 = MGIsDeviceOneOfType((const UInt8 *)&v27, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v25);
    v22 = MEMORY[0x1E0C9AE40];
    if (!v24)
      v22 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v22;
}

BOOL sub_19B6C3E14()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("Zg7DduDoSCy6vY6mhy3n2w"), 105);
}

uint64_t sub_19B6C3E2C()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("61xs1bQ+9eTk8tlRvG9UKw"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0)
    return result;
  else
    return 0;
}

uint64_t sub_19B6C3E70()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t v9[16];

  v0 = *MEMORY[0x1E0C9AE40];
  if (sub_19B6BAC78("IODeviceTree:/product", CFSTR("is-muse"), 0))
  {
    if (!sub_19B6BAD7C("IODeviceTree:/product", CFSTR("chip-role"), 0, 1, 1))
      return *MEMORY[0x1E0C9AE50];
  }
  else
  {
    v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1)
      v7 = v1 + 1;
    else
      v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v7, 8434, (uint64_t)CFSTR("muse not set on product node"), v2, v3, v4, v5, v6, v9[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "muse not set on product node", v9, 2u);
    }
  }
  return v0;
}

BOOL sub_19B6C3F64(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("X7SF9XDG+CBhoPIXA1YlCg"), a2);
}

BOOL sub_19B6C3F88(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("X7SF9XDG+CBhoPIXA1YlCg"), 84, a2);
}

BOOL sub_19B6C3F9C()
{
  mach_port_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_service_t v3;

  v0 = *MEMORY[0x1E0CBBAA8];
  v1 = IOServiceMatching("AppleJPEGDriver");
  MatchingService = IOServiceGetMatchingService(v0, v1);
  v3 = MatchingService;
  if (MatchingService)
    IOObjectRelease(MatchingService);
  return v3 != 0;
}

BOOL sub_19B6C3FF0()
{
  return (unint64_t)sub_19B6C19A8() >> 33 != 0;
}

uint64_t sub_19B6C4010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 7
    || sub_19B6B9C44() == 11)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

CFNumberRef sub_19B6C41A0()
{
  return sub_19B6BC5F4("IODeviceTree:/product/facetime", CFSTR("K0tZN4PayAx7RgB0M+oohw"), 98);
}

BOOL sub_19B6C41B8()
{
  return sub_19B6E4210((uint64_t)CFSTR("avd"), CFSTR("ads-present"));
}

CFStringRef sub_19B6C41CC()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("lU5WxNTusw4lrrBSEBiZeQ"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6C42E8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("AGrtXj3nqzz8KFfFHK7/sA"), a2);
}

BOOL sub_19B6C430C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("AGrtXj3nqzz8KFfFHK7/sA"), 84, a2);
}

BOOL sub_19B6C4320()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("TucF/tpjeAln1I0f3g0K3w"), 100);
}

uint64_t sub_19B6C434C()
{
  return 0;
}

CFStringRef sub_19B6C4354()
{
  const char *v0;
  char *v1;
  CFStringRef v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  uint32_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char v28;
  uint64_t v29;
  uint8_t buf[4];
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (qword_1EE3FD850 != -1)
    dispatch_once(&qword_1EE3FD850, &unk_1E3BD0A08);
  if (!off_1EE3FD848)
  {
    v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v10)
      v16 = v10 + 1;
    else
      v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v16, 8148, (uint64_t)CFSTR("dlsym NfRestoreCopyUniqueFDRKey failed"), v11, v12, v13, v14, v15, v28);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 0;
    *(_WORD *)buf = 0;
    v17 = MEMORY[0x1E0C81028];
    v18 = "dlsym NfRestoreCopyUniqueFDRKey failed";
    v19 = 2;
    goto LABEL_22;
  }
  v29 = 0;
  v0 = (const char *)off_1EE3FD848(sub_19B6D7EA4, &v29, 0);
  if (!v0)
  {
    v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v20)
      v26 = v20 + 1;
    else
      v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v26, 8144, (uint64_t)CFSTR("NfRestoreCopyUniqueFDRKey failed %@"), v21, v22, v23, v24, v25, v29);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return 0;
    *(_DWORD *)buf = 138412290;
    v31 = v29;
    v17 = MEMORY[0x1E0C81028];
    v18 = "NfRestoreCopyUniqueFDRKey failed %@";
    v19 = 12;
LABEL_22:
    _os_log_impl(&dword_19B6B1000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
    return 0;
  }
  v1 = (char *)v0;
  v2 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v0, 0x8000100u);
  if (!v2)
  {
    v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3)
      v9 = v3 + 1;
    else
      v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v9, 8140, (uint64_t)CFSTR("CFStringCreateWithCString failed"), v4, v5, v6, v7, v8, v28);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "CFStringCreateWithCString failed", buf, 2u);
    }
  }
  free(v1);
  return v2;
}

uint64_t sub_19B6C4590()
{
  return sub_19B6E44D4((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("RaX3KBmG7H9fUOEtLK/I6w"), 115, (uint64_t)CFSTR("aNFMPe3XMOjAHDzk1h0eeA"), 101);
}

uint64_t sub_19B6C45B4()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 6)
    return 0;
  result = MGGetBoolAnswer((const char **)CFSTR("magnetometer"));
  if ((_DWORD)result)
  {
    v11 = -1742178852;
    v10 = xmmword_19B7184EC;
    v9 = 2146530832;
    v8 = xmmword_19B7184D8;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }
  return result;
}

CFArrayRef sub_19B6C46AC()
{
  CFNumberRef v0;
  CFNumberRef v1;
  CFNumberRef v2;
  CFNumberRef v3;
  CFArrayRef v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  CFArrayRef v12;
  char v14;
  int valuePtr;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *values[4];

  values[3] = *(void **)MEMORY[0x1E0C80C00];
  v16 = 0;
  v17 = 0;
  v18 = 0;
  sub_19B6D7F90(&v16, CFSTR("front-cam-offset-from-center"));
  if (HIDWORD(v17))
  {
    valuePtr = 0;
    v0 = CFNumberCreate(0, kCFNumberSInt32Type, &v18);
    v1 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v2 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    v3 = v2;
    if (v0 && v1 && v2)
    {
      values[0] = v0;
      values[1] = v1;
      values[2] = v2;
      v4 = CFArrayCreate(0, (const void **)values, 3, MEMORY[0x1E0C9B378]);
    }
    else
    {
      v4 = 0;
      v12 = 0;
      if (!v0)
      {
LABEL_14:
        if (v1)
          CFRelease(v1);
        if (v3)
          CFRelease(v3);
        return v12;
      }
    }
    CFRelease(v0);
    v12 = v4;
    goto LABEL_14;
  }
  v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5)
    v11 = v5 + 1;
  else
    v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v11, 7905, (uint64_t)CFSTR("Unexpected camera_offset scale, malformed data provided"), v6, v7, v8, v9, v10, v14);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(values[0]) = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unexpected camera_offset scale, malformed data provided", (uint8_t *)values, 2u);
  }
  return 0;
}

BOOL sub_19B6C484C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("9/J7LY7zuYSGW1BcSTRpOw"), a2);
}

BOOL sub_19B6C4870(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("9/J7LY7zuYSGW1BcSTRpOw"), 83, a2);
}

CFTypeRef sub_19B6C4884()
{
  BOOL v0;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  CFTypeRef v9;
  int v10;
  const __CFAllocator *v11;
  const CFDictionaryKeyCallBacks *v12;
  const CFDictionaryValueCallBacks *v13;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v15;
  CFMutableDictionaryRef v16;
  BOOL v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  const void *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char v42;
  CFTypeRef v43;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v43 = 0;
  cf = 0;
  if (qword_1EE3FD888 != -1)
    dispatch_once(&qword_1EE3FD888, &unk_1E3BD0A48);
  if (off_1EE3FD898)
    v0 = off_1EE3FD890 == 0;
  else
    v0 = 1;
  if (!v0 && off_1EE3FD8A0 != 0)
  {
    v10 = off_1EE3FD8A0(0, 0);
    v9 = 0;
    if (v10 == 1)
      goto LABEL_51;
    v11 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v12 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v13 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v15 = CFDictionaryCreateMutable(v11, 0, v12, v13);
    v16 = v15;
    if (Mutable)
      v17 = v15 == 0;
    else
      v17 = 1;
    if (v17)
    {
      v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v18)
        v24 = v18 + 1;
      else
        v24 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v24, 7626, (uint64_t)CFSTR("Unable to create options and savageOptions"), v19, v20, v21, v22, v23, v42);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to create options and savageOptions", buf, 2u);
      }
      sub_19B6B9160(8);
      v9 = 0;
      v25 = 0;
      if (!Mutable)
        goto LABEL_47;
    }
    else
    {
      CFDictionarySetValue(Mutable, CFSTR("Options"), v15);
      v26 = off_1EE3FD890(Mutable, 0, "Savage", &v43);
      if (v26)
      {
        v25 = (const void *)v26;
        if (off_1EE3FD898(v26, CFSTR("queryInfo"), 0, &cf, &v43) && cf)
        {
          v9 = CFRetain(cf);
        }
        else
        {
          v34 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v34)
            v40 = v34 + 1;
          else
            v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          _MGLog((uint64_t)v40, 7640, (uint64_t)CFSTR("SavageUpdaterExecCmd failed: %@"), v35, v36, v37, v38, v39, (char)v43);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            v46 = v43;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SavageUpdaterExecCmd failed: %@", buf, 0xCu);
          }
          v9 = 0;
        }
      }
      else
      {
        v27 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v27)
          v33 = v27 + 1;
        else
          v33 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v33, 7634, (uint64_t)CFSTR("SavageUpdaterCreate failed: %@"), v28, v29, v30, v31, v32, (char)v43);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v46 = v43;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SavageUpdaterCreate failed: %@", buf, 0xCu);
        }
        sub_19B6B9160(8);
        v9 = 0;
        v25 = 0;
      }
    }
    CFRelease(Mutable);
LABEL_47:
    if (v16)
      CFRelease(v16);
    if (v25)
      CFRelease(v25);
    goto LABEL_51;
  }
  v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2)
    v8 = v2 + 1;
  else
    v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v8, 7615, (uint64_t)CFSTR("Unable to dlsym() Savage symbols"), v3, v4, v5, v6, v7, v42);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to dlsym() Savage symbols", buf, 2u);
  }
  v9 = 0;
LABEL_51:
  if (v43)
  {
    CFRelease(v43);
    v43 = 0;
  }
  if (cf)
    CFRetain(cf);
  return v9;
}

BOOL sub_19B6C4C68(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("Fhqq6Bhy/XnCEBRAe3TI+g"), a2);
}

BOOL sub_19B6C4C8C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("Fhqq6Bhy/XnCEBRAe3TI+g"), 83, a2);
}

uint64_t sub_19B6C4CA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  __int128 v14;
  int v15;
  __int128 v16;
  int v17;
  __int128 v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  __int128 v50;
  int v51;
  __int128 v52;
  int v53;
  __int128 v54;
  int v55;
  __int128 v56;
  int v57;
  __int128 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 1)
  {
    v59 = 414393924;
    v58 = xmmword_19B71812C;
    v57 = 897736383;
    v56 = xmmword_19B718140;
    v55 = -996295886;
    v54 = xmmword_19B718154;
    v53 = -453987047;
    v52 = xmmword_19B718168;
    v51 = -337121064;
    v50 = xmmword_19B717B00;
    v49 = 450980336;
    v48 = xmmword_19B717B14;
    v47 = -232427879;
    v46 = xmmword_19B717C68;
    v45 = -427474227;
    v44 = xmmword_19B717C7C;
    v43 = 1477534141;
    v42 = xmmword_19B717C90;
    v41 = -1843102369;
    v40 = xmmword_19B717CA4;
    v39 = -820493242;
    v38 = xmmword_19B717CB8;
    v37 = -61007701;
    v36 = xmmword_19B717CCC;
    v35 = -235416490;
    v34 = xmmword_19B717CE0;
    v33 = -121925081;
    v32 = xmmword_19B718118;
    v31 = 1071957977;
    v30 = xmmword_19B717CF4;
    v29 = 438437663;
    v28 = xmmword_19B717D08;
    v27 = -382792827;
    v26 = xmmword_19B717D1C;
    v25 = 1575123478;
    v24 = xmmword_19B717D30;
    v23 = 123138233;
    v22 = xmmword_19B717D44;
    v21 = 681511593;
    v20 = xmmword_19B717D58;
    v19 = 713503427;
    v18 = xmmword_19B717D6C;
    v17 = -1632750650;
    v16 = xmmword_19B717D80;
    v15 = -1431778695;
    v14 = xmmword_19B717D94;
    v7 = &v56;
    v8 = &v58;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }
  if (sub_19B6B9C44() == 3)
  {
    v13 = -1527788847;
    v12 = xmmword_19B717B3C;
    v11 = 1532898719;
    v10 = xmmword_19B717B50;
    v7 = &v10;
    v8 = &v12;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }
  return 0;
}

BOOL sub_19B6C56C8()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("J/a5Y6rhDH0gVkYtWUylOA"), 115);
}

BOOL sub_19B6C56E0()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("YcNAX0Gc6KejQPKSrA9kvg"), 102);
}

CFStringRef sub_19B6C56F8()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("vq2wpvLzyYLEApQs9cs52A"), 112);
}

BOOL sub_19B6C5710(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("YVNo6vlMjhgQ9yGYV8gatw"), a2);
}

BOOL sub_19B6C5734(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("YVNo6vlMjhgQ9yGYV8gatw"), 80, a2);
}

BOOL sub_19B6C5748()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("R1tbjTooZCgq2KmzlTaX+g"), 102);
}

BOOL sub_19B6C5760()
{
  return sub_19B6B9C44() != 4;
}

uint64_t sub_19B6C577C()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 3;
  return result;
}

const void *sub_19B6C57A4()
{
  return sub_19B6B89E4((const char **)CFSTR("7l0BaQsNxJCanoeHMJ2huA"), 0);
}

BOOL sub_19B6C57B4()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("n/G0fQIQiom+pb4tHA4Mmw"), 100);
}

CFTypeRef sub_19B6C57CC()
{
  return sub_19B6BBC28(1, "AppleOceanComputeMCU", CFSTR("Carrier ID"));
}

CFDataRef sub_19B6C57E4()
{
  return sub_19B6DD2D4("AppleSEPManager", 0x2Bu, 0, 0, 0x8000uLL);
}

BOOL sub_19B6C5800(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("HMpTbnbcAb+mQDi8O71h6Q"), a2);
}

BOOL sub_19B6C5824(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("HMpTbnbcAb+mQDi8O71h6Q"), 76, a2);
}

CFStringRef sub_19B6C5838()
{
  const __CFString *v0;
  const __CFString *v1;
  const __CFArray *ArrayBySeparatingStrings;
  CFIndex v3;
  const __CFString *ValueAtIndex;
  CFStringRef v5;
  CFIndex Length;
  CFRange v8;

  v0 = (const __CFString *)sub_19B6E4660((uint64_t)":/arm-io/wlan", (uint64_t)CFSTR("AppleOLYHAL"), 0, (uint64_t)CFSTR("ModuleInfo"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  ArrayBySeparatingStrings = CFStringCreateArrayBySeparatingStrings(0, v0, CFSTR(" "));
  if (CFArrayGetCount(ArrayBySeparatingStrings) < 1)
  {
LABEL_6:
    v5 = 0;
  }
  else
  {
    v3 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(ArrayBySeparatingStrings, v3);
      if (CFStringFind(ValueAtIndex, CFSTR("chip="), 0).location != -1)
        break;
      if (++v3 >= CFArrayGetCount(ArrayBySeparatingStrings))
        goto LABEL_6;
    }
    Length = CFStringGetLength(CFSTR("chip="));
    v8.length = CFStringGetLength(ValueAtIndex) - Length - 2;
    v8.location = Length + 1;
    v5 = CFStringCreateWithSubstring(0, ValueAtIndex, v8);
  }
  CFRelease(ArrayBySeparatingStrings);
  CFRelease(v1);
  return v5;
}

__CFDictionary *sub_19B6C5950()
{
  __CFDictionary *Mutable;
  uint64_t i;
  const char **v2;
  const void *v3;
  const void *v4;

  if (sub_19B6B9C84())
    return 0;
  Mutable = CFDictionaryCreateMutable(0, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 6; ++i)
  {
    v2 = (const char **)off_1E3BD0A68[i];
    v3 = sub_19B6B89E4(v2, 0);
    if (v3)
    {
      v4 = v3;
      CFDictionarySetValue(Mutable, v2, v3);
      CFRelease(v4);
    }
  }
  if (!CFDictionaryGetCount(Mutable))
  {
    CFRelease(Mutable);
    return 0;
  }
  return Mutable;
}

BOOL sub_19B6C5A04()
{
  return sub_19B6E4210((uint64_t)CFSTR("isp"), CFSTR("camera-front"));
}

BOOL sub_19B6C5A18()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("LDmYwbIay7HexqftCTLDNg"), 114);
}

BOOL sub_19B6C5A30()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/aop", CFSTR("hh/NoWpEoq1VF4lGDdPUpw"), 114);
}

uint64_t sub_19B6C5A48()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("auto-focus"), 0);
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

BOOL sub_19B6C5A8C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("4vrSNeBZwJrQrZOQJG0uwQ"), 115);
}

uint64_t sub_19B6C5AA4()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 2;
  return result;
}

CFTypeRef sub_19B6C5ACC()
{
  return sub_19B6DB304(7, 1, 2);
}

BOOL sub_19B6C5ADC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("zPHFWx4ZItDiTXNT2onrWQ"), a2);
}

BOOL sub_19B6C5B00(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("zPHFWx4ZItDiTXNT2onrWQ"), 77, a2);
}

BOOL sub_19B6C5B14()
{
  return sub_19B6B2F30((uint64_t)CFSTR("twodbl"), 0);
}

const void *sub_19B6C5B24()
{
  return sub_19B6B6DF4(CFSTR("MarketingVersion"), 1);
}

uint64_t sub_19B6C5B34()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("gme55xrmjlSlBkahnZq36A"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0)
    return result;
  else
    return 0;
}

BOOL sub_19B6C5B78()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("PxLTGkQx9GkeYcJKOaZguA"), 118);
}

uint64_t sub_19B6C5B90()
{
  return sub_19B6C073C();
}

const void *sub_19B6C5BA4()
{
  return sub_19B6B2C64("IODeviceTree:/arm-io/marconi-wifi", CFSTR("PNIwPfoxY6URyv3kSma5Aw"), 119);
}

BOOL sub_19B6C5BBC()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("ZrKzmIA8JSV7qJtGrX3yIw"), 101);
}

BOOL sub_19B6C5BD4()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("hRBbURJnULvXsPGk42A8Ng"), 115);
}

CFNumberRef sub_19B6C5BEC()
{
  return sub_19B6BC5F4("IODeviceTree:/arm-io/aop/iop-aop-nub/als", CFSTR("SIC/2YcTF6ydv8Hfcn9THw"), 97);
}

const void *sub_19B6C5C04()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *Value;
  const void *v3;

  v0 = (const __CFDictionary *)sub_19B6B89E4((const char **)CFSTR("qOwiNS0eFEq9oi3MNsgxWg"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  Value = CFDictionaryGetValue(v0, CFSTR("Nonce"));
  v3 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v1);
  return v3;
}

const void *sub_19B6C5C64()
{
  return sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("jJ+5tnncQBcHo5T26MI5jA"), 100);
}

uint64_t sub_19B6C5C7C()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/product", (uint64_t)CFSTR("6S9CvPHPtzHQqKudHSfsag"), 104);
}

BOOL sub_19B6C5C94()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("KFwMMyiMoa8pLgGLwo78Vw"), 104);
}

uint64_t sub_19B6C5CAC()
{
  BOOL v0;
  int v1;
  uint64_t v2;

  v0 = sub_19B6BACAC("IODeviceTree:/product", CFSTR("disable-chamois"), 0);
  v1 = sub_19B6B9C44();
  v2 = MEMORY[0x1E0C9AE40];
  if (v1 == 3 && !v0)
  {
    if ((sub_19B6B5FA0() & 1) != 0
      || (unint64_t)sub_19B6C19A8() >> 33
      && (sub_19B6B5FE0((_BOOL8)CFSTR("H14")) || sub_19B6B3038((_BOOL8)CFSTR("t8103"), 0)))
    {
      v2 = MEMORY[0x1E0C9AE50];
    }
    else
    {
      v2 = MEMORY[0x1E0C9AE40];
    }
  }
  return *(_QWORD *)v2;
}

BOOL sub_19B6C5D48()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("b/KizANb5o/dWqSP2GC23g"), 112);
}

BOOL sub_19B6C5D60()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("MlDJggkQz38CLQh3AVv7VQ"), 115);
}

CFMutableDictionaryRef sub_19B6C5D78()
{
  io_registry_entry_t v0;
  io_object_t v1;
  kern_return_t v2;
  mach_error_t v3;
  const char *v4;
  char *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char v21;
  CFMutableDictionaryRef properties;
  uint8_t buf[4];
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  properties = 0;
  v0 = IORegistryEntryFromPath(*MEMORY[0x1E0CBBAA8], "IODeviceTree:/options");
  if (v0)
  {
    v1 = v0;
    v2 = IORegistryEntryCreateCFProperties(v0, &properties, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
    if (v2)
    {
      v3 = v2;
      v4 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v5)
        v4 = v5 + 1;
      v6 = mach_error_string(v3);
      _MGLog((uint64_t)v4, 7994, (uint64_t)CFSTR("IORegistryEntryCreateCFProperties failed %s"), v7, v8, v9, v10, v11, v6);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v12 = mach_error_string(v3);
        *(_DWORD *)buf = 136315138;
        v24 = v12;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IORegistryEntryCreateCFProperties failed %s", buf, 0xCu);
      }
    }
    IOObjectRelease(v1);
    return properties;
  }
  else
  {
    v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v14)
      v20 = v14 + 1;
    else
      v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v20, 7998, (uint64_t)CFSTR("IORegistryEntryFromPath(IODeviceTree:/options) failed"), v15, v16, v17, v18, v19, v21);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IORegistryEntryFromPath(IODeviceTree:/options) failed", buf, 2u);
    }
    return 0;
  }
}

BOOL sub_19B6C5F20()
{
  CFDataRef v0;
  const __CFData *v1;
  CFTypeID v2;
  const UInt8 *BytePtr;
  _BOOL8 v4;
  unint64_t v6;
  unint64_t v7;

  v0 = sub_19B6C92D8();
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 6)
  {
    BytePtr = CFDataGetBytePtr(v1);
    if (*BytePtr)
    {
      v4 = 1;
    }
    else
    {
      v6 = 0;
      do
      {
        v7 = v6;
        if (v6 == 5)
          break;
        ++v6;
      }
      while (!BytePtr[v7 + 1]);
      v4 = v7 < 5;
    }
  }
  else
  {
    v4 = 0;
  }
  CFRelease(v1);
  return v4;
}

BOOL sub_19B6C5FC4()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("mm4/5+X4Z+eStXyipfwWVQ"), 114);
}

BOOL sub_19B6C5FDC()
{
  return !sub_19B6BAC78("IODeviceTree:/product/maps", CFSTR("2lNKobEIQqX50ohy1JBqCA"), 110);
}

CFStringRef sub_19B6C6008()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("gJ3kBkjdqJ04oSsOmC97aw"), 112);
}

uint64_t sub_19B6C6020()
{
  int v0;
  int v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t buf[4];
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v0 = IOPSGetPercentRemaining();
  if (v0)
  {
    v1 = v0;
    v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v2)
      v8 = v2 + 1;
    else
      v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v8, 4186, (uint64_t)CFSTR("Failed to get battery level with error %03X"), v3, v4, v5, v6, v7, v1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v11 = v1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to get battery level with error %03X", buf, 8u);
    }
  }
  return 101;
}

CFTypeRef sub_19B6C610C()
{
  return sub_19B6DB304(5, 1, 0);
}

BOOL sub_19B6C611C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("heP+NTlvkhJ2zzWIUznawA"), a2);
}

BOOL sub_19B6C6140(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("heP+NTlvkhJ2zzWIUznawA"), 77, a2);
}

uint64_t sub_19B6C6154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 6)
    return 0;
  v11 = -338255497;
  v10 = xmmword_19B7184B0;
  v9 = 152704997;
  v8 = xmmword_19B7184C4;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

uint64_t sub_19B6C623C()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 2
        || sub_19B6B9C44() == 3
        || sub_19B6B9C44() == 6;
  return result;
}

const void *sub_19B6C6284()
{
  return sub_19B6B89E4((const char **)CFSTR("BOYfUi496moe56A0RWFbqQ"), 0);
}

CFTypeRef sub_19B6C6294()
{
  return sub_19B6BBC28(1, "wlan", CFSTR("wifi-antenna-sku-info"));
}

BOOL sub_19B6C62AC()
{
  return sub_19B6B9C44() != 7;
}

uint64_t sub_19B6C62C8()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6B2F30((uint64_t)CFSTR("rose"), 0);
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

const void *sub_19B6C6304()
{
  return sub_19B6B6DF4(CFSTR("BuildID"), 1);
}

BOOL sub_19B6C6314()
{
  return sub_19B6BAC78("IODeviceTree:/product/maps", CFSTR("v/BP9Nx/zfo9bKi9JR2p+g"), 51);
}

BOOL sub_19B6C632C()
{
  return sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("nudr7/i2XcxAX6widrWShg"), 99);
}

uint64_t sub_19B6C6344()
{
  return 1;
}

const void *sub_19B6C634C()
{
  return sub_19B6B89E4((const char **)CFSTR("LBJfwOEzExRxzlAnSuI7eg"), 0);
}

BOOL sub_19B6C635C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("RyXm3yMC4ejlFvwlEI509w"), 104);
}

CFStringRef sub_19B6C6374()
{
  return sub_19B6BB96C(0, "IOPlatformExpertDevice", CFSTR("mlb-serial-number"));
}

BOOL sub_19B6C638C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("Q1Ty5w8gxMWHx3p4lQ1fhA"), a2);
}

BOOL sub_19B6C63B0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("Q1Ty5w8gxMWHx3p4lQ1fhA"), 77, a2);
}

CFNumberRef sub_19B6C63C4()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("iifCuJmggYlB4hLzc0Zoiw"), 114);
}

CFTypeRef sub_19B6C63DC()
{
  CFTypeID TypeID;

  TypeID = CFBooleanGetTypeID();
  return sub_19B6BD240((uint64_t)"copyWiFiCallingCapability", (uint64_t)&unk_1E3BD0AB8, TypeID);
}

uint64_t sub_19B6C6404()
{
  return 1;
}

uint64_t sub_19B6C640C()
{
  uint64_t v0;
  _BOOL4 v2;

  if (sub_19B6B61A0((_BOOL8)CFSTR("H6"))
    || sub_19B6B61A0((_BOOL8)CFSTR("H8"))
    || sub_19B6B9C44() == 6
    || sub_19B6B9C44() == 7
    || sub_19B6B61A0((_BOOL8)CFSTR("H5"))
    || sub_19B6B61A0((_BOOL8)CFSTR("H7")))
  {
    v0 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v2 = sub_19B6B61A0((_BOOL8)CFSTR("H4"));
    v0 = MEMORY[0x1E0C9AE40];
    if (!v2)
      v0 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v0;
}

const void *sub_19B6C64A8()
{
  return sub_19B6B89E4((const char **)CFSTR("mtHZd1H8XJ2DMVtNVUSkag"), 0);
}

CFNumberRef sub_19B6C64B8()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  int valuePtr;
  int v4;

  v4 = 1;
  v0 = sub_19B6BC5F4("IODeviceTree:/product", CFSTR("activation-protocol-version"), 0);
  if (v0)
  {
    v1 = v0;
    valuePtr = 1;
    if (CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr) && valuePtr == 2)
      v4 = 2;
    CFRelease(v1);
  }
  return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v4);
}

CFDataRef sub_19B6C6544()
{
  float64x2_t v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D842C(CFSTR("ringer-button-location"), 0, v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

BOOL sub_19B6C6594()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("QY61T8CLLwG/yu92ScTYtw"), 115);
}

BOOL sub_19B6C65AC()
{
  return sub_19B6BAC78("IODeviceTree:/product/audio", CFSTR("supports-spatial-facetime"), 0);
}

BOOL sub_19B6C65C4()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("v1/EHDarbU55OfoXm2EiGA"), 115);
}

CFDataRef sub_19B6C65DC()
{
  float64x2_t v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D842C(CFSTR("camera-button-location"), 1, v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

uint64_t sub_19B6C662C()
{
  _BOOL4 v0;
  uint64_t v2;

  v0 = sub_19B6BAC78("IODeviceTree:/product", CFSTR("disable-globe-map"), 0);
  if ((unint64_t)sub_19B6C19A8() >> 29 < 5 || v0)
    v2 = MEMORY[0x1E0C9AE40];
  else
    v2 = MEMORY[0x1E0C9AE50];
  return *(_QWORD *)v2;
}

BOOL sub_19B6C668C()
{
  return sub_19B6BAC78("IODeviceTree:/", CFSTR("P1djMN/L3B6otgGpO9WYkw"), 115);
}

uint64_t sub_19B6C66A4()
{
  return sub_19B6E4558((uint64_t)"IODeviceTree:", (uint64_t)CFSTR("tristar"), 0, (uint64_t)CFSTR("esn"), 0);
}

BOOL sub_19B6C66C8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("o60T6wXe1DDaO4a4gw10TA"), a2);
}

BOOL sub_19B6C66EC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("o60T6wXe1DDaO4a4gw10TA"), 84, a2);
}

BOOL sub_19B6C6700()
{
  return sub_19B6BACD0((uint64_t)CFSTR("NoPasscodeLocationTiles"), CFSTR("RegionalBehaviorNoPasscodeLocationTiles"));
}

BOOL sub_19B6C6714()
{
  return sub_19B6BAC78("IODeviceTree:/product/maps", CFSTR("LXP9TbNYtZrIKOktGXez2Q"), 51);
}

BOOL sub_19B6C672C()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("lICl1+LV8GYEzQPilmyIXg"), 114);
}

uint64_t sub_19B6C6744()
{
  int v0;
  uint64_t v1;

  v0 = sub_19B6B5FA0();
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFDataRef sub_19B6C6774()
{
  _OWORD v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D8520(CFSTR("volume-up-button-location"), 0, (uint64_t *)v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

BOOL sub_19B6C67C4()
{
  return sub_19B6B9C44() == 7;
}

CFNumberRef sub_19B6C67E0()
{
  int valuePtr;

  if (!sub_19B6B61A0((_BOOL8)CFSTR("H6"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H8"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H5"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H7"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H9"))
    && sub_19B6B9C44() != 4
    && sub_19B6B9C44() != 6)
  {
    sub_19B6B61A0((_BOOL8)CFSTR("H4"));
  }
  valuePtr = 1065353216;
  return CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
}

CFDataRef sub_19B6C6884()
{
  if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
    return sub_19B6DFCB8(0x424D6332u);
  else
    return (CFDataRef)sub_19B6B2C64("IODeviceTree:/product", CFSTR("mac-address-bluetooth1"), 0);
}

BOOL sub_19B6C68C8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("HzddeW2/HtdBNAc5tsFtDg"), a2);
}

BOOL sub_19B6C68EC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("HzddeW2/HtdBNAc5tsFtDg"), 83, a2);
}

CFStringRef sub_19B6C6900()
{
  const __CFData *v1;
  const __CFData *v2;
  CFTypeID v3;
  const char *BytePtr;
  CFStringRef v5;

  if (sub_19B6B9C44() == 4)
    return (CFStringRef)sub_19B6B89E4((const char **)CFSTR("+VIu65zA5EW4ztayJXvOUg"), 0);
  v1 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/product", CFSTR("product-name"), 0);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = CFGetTypeID(v1);
  if (v3 == CFDataGetTypeID() && CFDataGetLength(v2) >= 1)
  {
    BytePtr = (const char *)CFDataGetBytePtr(v2);
    v5 = CFStringCreateWithCString(0, BytePtr, 0x8000100u);
  }
  else
  {
    v5 = 0;
  }
  CFRelease(v2);
  return v5;
}

BOOL sub_19B6C69BC()
{
  return sub_19B6BAC78("IODeviceTree:/buttons", CFSTR("/ZdBovdn5DLfkQkSAuAskw"), 115);
}

BOOL sub_19B6C69D4()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("npI2l0ybDY9Um4z/T8K/Sg"), 100);
}

__CFArray *sub_19B6C69EC()
{
  const __CFAllocator *v0;
  __CFArray *Mutable;
  int v2;
  CFNumberRef v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  uint8_t v15[16];

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  switch(sub_19B6B9C44())
  {
    case 1u:
    case 2u:
      v2 = 1;
      goto LABEL_13;
    case 3u:
    case 9u:
      *(_DWORD *)v15 = 1;
      v3 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v3);
      CFRelease(v3);
      v2 = 2;
      goto LABEL_13;
    case 4u:
      v2 = 3;
      goto LABEL_13;
    case 6u:
      v2 = 4;
      goto LABEL_13;
    case 7u:
      v2 = 5;
      goto LABEL_13;
    case 0xBu:
      *(_DWORD *)v15 = 1;
      v11 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v11);
      CFRelease(v11);
      *(_DWORD *)v15 = 2;
      v12 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v12);
      CFRelease(v12);
      v2 = 7;
LABEL_13:
      *(_DWORD *)v15 = v2;
      v13 = CFNumberCreate(v0, kCFNumberIntType, v15);
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v13);
      break;
    default:
      v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4)
        v10 = v4 + 1;
      else
        v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v10, 3078, (uint64_t)CFSTR("Could not determine DTProductType"), v5, v6, v7, v8, v9, v15[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not determine DTProductType", v15, 2u);
      }
      break;
  }
  return Mutable;
}

BOOL sub_19B6C6BBC()
{
  return sub_19B6BACD0((uint64_t)CFSTR("ChinaBrick"), CFSTR("RegionalBehaviorChinaBrick"));
}

const void *sub_19B6C6BD0()
{
  return sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("5/NbwB1egBxY8gECPU4nPA"), 104);
}

CFNumberRef sub_19B6C6BE8()
{
  return sub_19B6D88E4(1);
}

BOOL sub_19B6C6BF0()
{
  return (sub_19B6B9C44() == 3 || sub_19B6B9C44() == 1 || sub_19B6B9C44() == 2)
      && !sub_19B6B61A0((_BOOL8)CFSTR("H5"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H4"));
}

uint64_t sub_19B6C6C50()
{
  BOOL v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint64_t v11;
  __CFDictionary *Mutable;
  __CFDictionary *v13;
  uint64_t v14;
  const void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  char v38;
  CFTypeRef cf;
  uint8_t buf[4];
  CFTypeRef v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  cf = 0;
  if (qword_1EE3FD790 != -1)
    dispatch_once(&qword_1EE3FD790, &unk_1E3BD0AF8);
  if (off_1EE3FD780)
    v0 = off_1EE3FD788 == 0;
  else
    v0 = 1;
  if (v0)
  {
    v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v1)
      v7 = v1 + 1;
    else
      v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v7, 5263, (uint64_t)CFSTR("Unable to dlsym AMFDRCreateWithOptions and AMFDRSealingMapVerifySealing"), v2, v3, v4, v5, v6, v38);
    v8 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v8;
    *(_WORD *)buf = 0;
    v9 = MEMORY[0x1E0C81028];
    v10 = "Unable to dlsym AMFDRCreateWithOptions and AMFDRSealingMapVerifySealing";
LABEL_27:
    _os_log_impl(&dword_19B6B1000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
    return 0;
  }
  v11 = *MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!Mutable)
  {
    v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v23)
      v29 = v23 + 1;
    else
      v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v29, 5245, (uint64_t)CFSTR("CFDictionaryCreateMutable failed"), v24, v25, v26, v27, v28, v38);
    v8 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v8;
    *(_WORD *)buf = 0;
    v9 = MEMORY[0x1E0C81028];
    v10 = "CFDictionaryCreateMutable failed";
    goto LABEL_27;
  }
  v13 = Mutable;
  CFDictionarySetValue(Mutable, CFSTR("DataStore"), CFSTR("Local"));
  v14 = off_1EE3FD780(v11, v13);
  if (v14)
  {
    v15 = (const void *)v14;
    v8 = off_1EE3FD788(v14, &cf);
    if ((v8 & 1) == 0)
    {
      v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      v22 = v16 ? v16 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v22, 5258, (uint64_t)CFSTR("AMFDRSealingMapVerifySealing failed: %@"), v17, v18, v19, v20, v21, (char)cf);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v41 = cf;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "AMFDRSealingMapVerifySealing failed: %@", buf, 0xCu);
      }
    }
    CFRelease(v15);
  }
  else
  {
    v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v30)
      v36 = v30 + 1;
    else
      v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v36, 5253, (uint64_t)CFSTR("AMFDRCreateWithOptions failed"), v31, v32, v33, v34, v35, v38);
    v8 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "AMFDRCreateWithOptions failed", buf, 2u);
      v8 = 0;
    }
  }
  CFRelease(v13);
  if (cf)
    CFRelease(cf);
  return v8;
}

uint64_t sub_19B6C6F54()
{
  return 1;
}

BOOL sub_19B6C6F5C()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/i2c0/audio0", CFSTR("KWr9OM2iqeLQEhaHS0UshQ"), 97);
}

CFTypeRef sub_19B6C6F74()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 7);
  if (!v0)
    v0 = sub_19B6BBD84(7, 2);
  TypeID = CFDictionaryGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyFirmwareManifestData", v0, TypeID);
}

CFDataRef sub_19B6C6FC0()
{
  _OWORD v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D7A58((uint64_t *)v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

BOOL sub_19B6C7004()
{
  return !sub_19B6B50E0(CFSTR("TU"));
}

CFTypeRef sub_19B6C7024()
{
  return sub_19B6DB304(2, 1, 1);
}

BOOL sub_19B6C7034(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("xRyzf9zFE/ycr/wJPweZvQ"), a2);
}

BOOL sub_19B6C7058(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("xRyzf9zFE/ycr/wJPweZvQ"), 73, a2);
}

CFStringRef sub_19B6C706C()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("X7SF9XDG+CBhoPIXA1YlCg"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6C7188(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("0rbLl0hXmTehfEduXfeJYQ"), a2);
}

BOOL sub_19B6C71AC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("0rbLl0hXmTehfEduXfeJYQ"), 84, a2);
}

uint64_t sub_19B6C71C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;
  __int128 v70;
  int v71;
  __int128 v72;
  int v73;
  __int128 v74;
  int v75;
  __int128 v76;
  int v77;
  __int128 v78;
  int v79;
  __int128 v80;
  int v81;
  __int128 v82;
  int v83;
  __int128 v84;
  int v85;
  __int128 v86;
  int v87;
  __int128 v88;
  int v89;
  __int128 v90;
  int v91;
  __int128 v92;
  int v93;
  __int128 v94;
  int v95;
  __int128 v96;
  int v97;
  __int128 v98;
  int v99;
  __int128 v100;
  int v101;
  __int128 v102;
  int v103;
  __int128 v104;
  int v105;
  __int128 v106;
  int v107;
  __int128 v108;
  int v109;
  __int128 v110;
  int v111;
  __int128 v112;
  int v113;
  __int128 v114;
  int v115;
  __int128 v116;
  int v117;
  __int128 v118;
  int v119;
  __int128 v120;
  int v121;
  __int128 v122;
  int v123;
  uint64_t v124;

  v124 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 1 && MGGetBoolAnswer((const char **)CFSTR("BWoQXWXYITrPRpFyc9xTLw")))
  {
    v7 = MEMORY[0x1E0C9AE50];
  }
  else
  {
    v123 = -1022451852;
    v122 = xmmword_19B718398;
    v121 = 1729782187;
    v120 = xmmword_19B7183AC;
    v119 = -1527788847;
    v118 = xmmword_19B717B3C;
    v117 = 1532898719;
    v116 = xmmword_19B717B50;
    if (MGIsDeviceOneOfType((const UInt8 *)&v122, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v120))
      goto LABEL_13;
    v115 = -1579092758;
    v114 = xmmword_19B7180C8;
    v113 = 1430379884;
    v112 = xmmword_19B718104;
    if (MGIsDeviceOneOfType((const UInt8 *)&v114, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v112))
      goto LABEL_13;
    v111 = 1032708406;
    v110 = xmmword_19B7183E8;
    v109 = 729903963;
    v108 = xmmword_19B7183FC;
    v107 = 1275676051;
    v106 = xmmword_19B717B64;
    v105 = 1908474541;
    v104 = xmmword_19B717B78;
    if (MGIsDeviceOneOfType((const UInt8 *)&v110, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v108))
      goto LABEL_13;
    v103 = 1789837692;
    v102 = xmmword_19B7180A0;
    v101 = 48355600;
    v100 = xmmword_19B7180DC;
    v99 = -1239654590;
    v98 = xmmword_19B7180B4;
    v97 = -679691073;
    v96 = xmmword_19B7180F0;
    if (MGIsDeviceOneOfType((const UInt8 *)&v102, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v100))
      goto LABEL_13;
    v95 = -926344036;
    v94 = xmmword_19B717C2C;
    v93 = -954998212;
    v92 = xmmword_19B717C40;
    v91 = 436612651;
    v90 = xmmword_19B717C54;
    if (MGIsDeviceOneOfType((const UInt8 *)&v94, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v92))
      goto LABEL_13;
    v89 = 1602014129;
    v88 = xmmword_19B71817C;
    v87 = 317289457;
    v86 = xmmword_19B718348;
    v85 = -199226823;
    v84 = xmmword_19B7181B8;
    v83 = 1412427398;
    v82 = xmmword_19B7181CC;
    if (MGIsDeviceOneOfType((const UInt8 *)&v88, v36, v37, v38, v39, v40, v41, v42, (uint64_t)&v86))
      goto LABEL_13;
    if (sub_19B6B9C44() != 3)
      goto LABEL_13;
    v81 = 996646949;
    v80 = xmmword_19B7183C0;
    v79 = -563086000;
    v78 = xmmword_19B7183D4;
    if (MGIsDeviceOneOfType((const UInt8 *)&v80, v43, v44, v45, v46, v47, v48, v49, (uint64_t)&v78))
      goto LABEL_13;
    v77 = -810116762;
    v76 = xmmword_19B718190;
    v75 = 401945557;
    v74 = xmmword_19B71835C;
    v73 = -1283070668;
    v72 = xmmword_19B7181E0;
    v71 = 160260070;
    v70 = xmmword_19B7181F4;
    if (MGIsDeviceOneOfType((const UInt8 *)&v76, v50, v51, v52, v53, v54, v55, v56, (uint64_t)&v74))
    {
LABEL_13:
      v7 = MEMORY[0x1E0C9AE40];
    }
    else
    {
      v69 = -1195351767;
      v68 = xmmword_19B7181A4;
      v67 = -1639077591;
      v66 = xmmword_19B718410;
      v65 = MGIsDeviceOneOfType((const UInt8 *)&v68, v57, v58, v59, v60, v61, v62, v63, (uint64_t)&v66);
      v7 = MEMORY[0x1E0C9AE40];
      if (!v65)
        v7 = MEMORY[0x1E0C9AE50];
    }
  }
  return *(_QWORD *)v7;
}

BOOL sub_19B6C76AC()
{
  return !sub_19B6B50E0(CFSTR("KH"));
}

BOOL sub_19B6C76CC()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("bmYssgjtQNKMy3Zhf8N+2w"), 115);
}

uint64_t sub_19B6C76E4()
{
  return 1;
}

CFTypeRef sub_19B6C76EC()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 9);
  if (!v0)
    v0 = sub_19B6BBD84(9, 2);
  TypeID = CFDictionaryGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyFirmwarePreflightInfo", v0, TypeID);
}

const void *sub_19B6C7738()
{
  return sub_19B6B89E4((const char **)CFSTR("6iI7/9cVUGIjdrSvIXEt4A"), 0);
}

BOOL sub_19B6C7748()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("EJRyIpTkLz2+Lb6XWy10bQ"), 112);
}

BOOL sub_19B6C7760()
{
  _BOOL8 result;

  if (MGGetBoolAnswer((const char **)CFSTR("cBy4BcYs5YWtFHbBpt4C6A")))
    return 1;
  if (sub_19B6DC15C(1, "vibrator", CFSTR("name")))
    return 1;
  if (sub_19B6DC15C(1, "audio-actuator*", CFSTR("name")))
    return 1;
  result = sub_19B6DC15C(1, "maggie-arc", CFSTR("name"));
  if (result)
    return 1;
  return result;
}

const void *sub_19B6C77D8()
{
  const __CFString *v0;

  if (sub_19B6B9C84())
    v0 = CFSTR("iOSSupportVersion");
  else
    v0 = (const __CFString *)*MEMORY[0x1E0C9ABB0];
  return sub_19B6B6DF4(v0, 1);
}

CFTypeRef sub_19B6C780C()
{
  return sub_19B6BBC28(0, "IOPMPowerSource", CFSTR("IsCharging"));
}

CFStringRef sub_19B6C7824()
{
  return sub_19B6BB96C(1, "baseband", CFSTR("baseband-board-snum"));
}

BOOL sub_19B6C783C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("ToJGxfcjkIerYyeL2e8c4A"), a2);
}

BOOL sub_19B6C7860(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("ToJGxfcjkIerYyeL2e8c4A"), 66, a2);
}

const void *sub_19B6C7874()
{
  return sub_19B6B2C64("IODeviceTree:/arm-io/disp0", CFSTR("Zhoou87qmFpFwcFsm7Jlyg"), 118);
}

BOOL sub_19B6C788C()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("Lrs7l5cKWJ1Gk5ZzgMAKyQ"), 115);
}

BOOL sub_19B6C78A4()
{
  return sub_19B6BAC78("IODeviceTree:/product/audio", CFSTR("cq/jTAQ8zJab+ibcGUzJew"), 109);
}

BOOL sub_19B6C78BC()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("H4f1y1sEDUUUROeb4FZJ4A"), 110);
}

BOOL sub_19B6C78D4()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("MvBKQ+GSnR3DjkovgNL+3w"), 97);
}

BOOL sub_19B6C7900()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("MWpHV1VYKXmaKqhgbmTWCg"), 112);
}

uint64_t sub_19B6C7918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 7
    || sub_19B6B9C44() == 11)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

CFStringRef sub_19B6C7A14()
{
  mach_error_t v0;
  mach_error_t v1;
  const char *v2;
  char *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  CFStringRef v21;
  mach_error_t v23;
  mach_error_t v24;
  const char *v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  mach_error_t v34;
  mach_error_t v35;
  const char *v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  size_t v45;
  int v46;
  CFIndex numBytes;
  io_connect_t connect[2];
  int v49;
  char *v50;
  uint8_t buf[4];
  const char *v52;
  uint64_t v53;

  v53 = *MEMORY[0x1E0C80C00];
  numBytes = 128;
  *(_QWORD *)connect = 0;
  if ((sub_19B6DBB18("AppleBiometricServices", &connect[1], connect) & 1) == 0)
  {
    v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v13)
      v19 = v13 + 1;
    else
      v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v19, 5333, (uint64_t)CFSTR("failed to connect to service %s"), v14, v15, v16, v17, v18, (char)"AppleBiometricServices");
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    *(_DWORD *)buf = 136315138;
    v52 = "AppleBiometricServices";
    v11 = MEMORY[0x1E0C81028];
    v12 = "failed to connect to service %s";
    goto LABEL_12;
  }
  v46 = 0;
  v45 = 4;
  v0 = sub_19B6D8CBC(connect[0], 27, &v46, &v45);
  if (v0)
  {
    v1 = v0;
    v2 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v3)
      v2 = v3 + 1;
    v4 = mach_error_string(v1);
    _MGLog((uint64_t)v2, 5343, (uint64_t)CFSTR("Failed to query Mesa provisioning state: %s"), v5, v6, v7, v8, v9, v4);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    v10 = mach_error_string(v1);
    *(_DWORD *)buf = 136315138;
    v52 = v10;
    v11 = MEMORY[0x1E0C81028];
    v12 = "Failed to query Mesa provisioning state: %s";
    goto LABEL_12;
  }
  if (!v46)
  {
    v34 = sub_19B6D8CBC(connect[0], 1, 0, 0);
    if (v34)
    {
      v35 = v34;
      v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      v37 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v37)
        v36 = v37 + 1;
      v38 = mach_error_string(v35);
      _MGLog((uint64_t)v36, 5350, (uint64_t)CFSTR("Failed to reset sensor: %s"), v39, v40, v41, v42, v43, v38);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_14;
      v44 = mach_error_string(v35);
      *(_DWORD *)buf = 136315138;
      v52 = v44;
      v11 = MEMORY[0x1E0C81028];
      v12 = "Failed to reset sensor: %s";
LABEL_12:
      v20 = buf;
LABEL_13:
      _os_log_impl(&dword_19B6B1000, v11, OS_LOG_TYPE_DEFAULT, v12, v20, 0xCu);
LABEL_14:
      v21 = 0;
      goto LABEL_15;
    }
  }
  v23 = sub_19B6D8CBC(connect[0], 54, buf, (size_t *)&numBytes);
  if (v23)
  {
    v24 = v23;
    v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v26)
      v25 = v26 + 1;
    v27 = mach_error_string(v24);
    _MGLog((uint64_t)v25, 5357, (uint64_t)CFSTR("Failed to query Mesa module serial number: %s"), v28, v29, v30, v31, v32, v27);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_14;
    v33 = mach_error_string(v24);
    v49 = 136315138;
    v50 = v33;
    v11 = MEMORY[0x1E0C81028];
    v12 = "Failed to query Mesa module serial number: %s";
    v20 = (uint8_t *)&v49;
    goto LABEL_13;
  }
  v21 = CFStringCreateWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], buf, numBytes, 0x8000100u, 0);
LABEL_15:
  if (connect[0])
    IOServiceClose(connect[0]);
  if (connect[1])
    IOObjectRelease(connect[1]);
  return v21;
}

BOOL sub_19B6C7D44(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("jWdMTTxiAZc+KNO6Bz2jNg"), a2);
}

BOOL sub_19B6C7D68(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("jWdMTTxiAZc+KNO6Bz2jNg"), 77, a2);
}

uint64_t sub_19B6C7D7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  __int128 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 1 || sub_19B6B9C44() == 2 || sub_19B6B9C44() == 3)
  {
    v41 = -350584140;
    v40 = xmmword_19B7182D0;
    v39 = 368778837;
    v38 = xmmword_19B7182F8;
    v37 = -1418383976;
    v36 = xmmword_19B7182E4;
    v35 = -1213485500;
    v34 = xmmword_19B71830C;
    if (MGIsDeviceOneOfType((const UInt8 *)&v40, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v38)
      || (v33 = 897736383,
          v32 = xmmword_19B718140,
          v31 = -453987047,
          v30 = xmmword_19B718168,
          v29 = 450980336,
          v28 = xmmword_19B717B14,
          MGIsDeviceOneOfType((const UInt8 *)&v32, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v30)))
    {
      v21 = MEMORY[0x1E0C9AE50];
    }
    else
    {
      v27 = 414393924;
      v26 = xmmword_19B71812C;
      v25 = -996295886;
      v24 = xmmword_19B718154;
      v22 = MGIsDeviceOneOfType((const UInt8 *)&v26, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v24);
      v21 = MEMORY[0x1E0C9AE50];
      if (!v22)
        v21 = MEMORY[0x1E0C9AE40];
    }
  }
  else
  {
    v21 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v21;
}

CFTypeRef sub_19B6C7F8C()
{
  return sub_19B6DB5A8(1, 0, 1);
}

CFTypeRef sub_19B6C7F9C()
{
  return sub_19B6D74D4(CFSTR("FrontCameraModuleSerialNumString"));
}

BOOL sub_19B6C7FA8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("qlcdNkarcGLcbW3HvBhwaA"), a2);
}

BOOL sub_19B6C7FCC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("qlcdNkarcGLcbW3HvBhwaA"), 70, a2);
}

BOOL sub_19B6C7FE0()
{
  return sub_19B6B50E0(CFSTR("CH")) || sub_19B6B50E0(CFSTR("<GERMANY>"));
}

CFStringRef sub_19B6C8014()
{
  if (sub_19B6BC9C4())
    return (CFStringRef)sub_19B6DB304(2, 0, 0);
  else
    return sub_19B6BB96C(1, "baseband", CFSTR("device-imei"));
}

BOOL sub_19B6C8054(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("QZgogo2DypSAZfkRW4dP/A"), a2);
}

BOOL sub_19B6C8078(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("QZgogo2DypSAZfkRW4dP/A"), 73, a2);
}

BOOL sub_19B6C808C()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("LWxSM4CmFZMwzYclSh43gg"), 114);
}

uint64_t sub_19B6C80A4()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("N6PmkZnK1VRMvFokb0jS/Q"), 102);
}

const __CFString *sub_19B6C80BC()
{
  const __CFData *v0;

  v0 = sub_19B6B3C08();
  return sub_19B6BB0B8(v0);
}

BOOL sub_19B6C80D0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("RNcdWbM8+dO5tx82A+YCcQ"), a2);
}

BOOL sub_19B6C80F4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("RNcdWbM8+dO5tx82A+YCcQ"), 80, a2);
}

BOOL sub_19B6C8108()
{
  return sub_19B6BAC78("IODeviceTree:/buttons", CFSTR("Ov9G2lRzQYbUyBYJ0KCMhA"), 102);
}

const void *sub_19B6C8120()
{
  return sub_19B6B2C64("IODeviceTree:/product/audio", CFSTR("I6rd1SCXpRqBMDTPBbcWzA"), 109);
}

CFNumberRef sub_19B6C8138()
{
  return sub_19B6BC5F4("IODeviceTree:/product/facetime", CFSTR("+U0jSj4F2EfE+Vqj22IavA"), 116);
}

uint64_t sub_19B6C8150()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("flash"), 0);
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFNumberRef sub_19B6C8194()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("QD3Nde07fjdK0R0KTbczEA"), 98);
}

CFStringRef sub_19B6C81AC()
{
  return sub_19B6BC39C("IODeviceTree:/chosen", CFSTR("0jjK6IVSQzA8doQeSwmujA"), 115);
}

void *sub_19B6C81C4()
{
  const void *v0;
  const void *v1;
  const __CFDictionary *v2;
  const void *v3;
  const void *v4;
  void *v5;

  v0 = sub_19B6B89E4((const char **)CFSTR("qNNddlUK+B/YlooNoymwgA"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
  v3 = sub_19B6C01B8(v2, CFSTR("ProductVersionExtra"), 1);
  if (v3)
  {
    v4 = v3;
    v5 = (void *)CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%@ %@"), v1, v3);
    CFRelease(v1);
    v1 = v4;
  }
  else
  {
    v5 = (void *)CFRetain(v1);
  }
  CFRelease(v1);
  return v5;
}

BOOL sub_19B6C8274()
{
  _BOOL8 result;

  result = sub_19B6B5FE0((_BOOL8)CFSTR("H15"));
  if (result)
    return !sub_19B6B3038((_BOOL8)CFSTR("t8120"), 0);
  return result;
}

uint64_t sub_19B6C82A8()
{
  return sub_19B6E4448((uint64_t)"IODeviceTree:", (uint64_t)CFSTR("RaX3KBmG7H9fUOEtLK/I6w"), 115, (uint64_t)CFSTR("edlvEg0UXOGErRDpk7O5Fg"), 99);
}

uint64_t sub_19B6C82CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 368885834;
  v13 = xmmword_19B718578;
  v12 = -526227167;
  v11 = xmmword_19B71858C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11))
  {
    v8 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v9 = sub_19B6B9C44();
    v8 = MEMORY[0x1E0C9AE40];
    if (v9 == 6)
      v8 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v8;
}

uint64_t sub_19B6C8418()
{
  return 1;
}

CFTypeRef sub_19B6C8420()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 15);
  if (!v0)
    v0 = sub_19B6BBD84(15, 2);
  TypeID = CFStringGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyMobileSubscriberNetworkCode", v0, TypeID);
}

BOOL sub_19B6C846C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("9Bp5z20HsA1f7dqvelXKXA"), 115);
}

CFDataRef sub_19B6C8484()
{
  float64x2_t v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D842C(CFSTR("volume-down-button-location"), 0, v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

BOOL sub_19B6C84D4()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  int valuePtr;

  v0 = sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("development-cert"), 0);
  valuePtr = 0;
  if (!v0)
    return 1;
  v1 = v0;
  CFNumberGetValue(v0, kCFNumberIntType, &valuePtr);
  CFRelease(v1);
  return valuePtr == 0;
}

uint64_t sub_19B6C8540()
{
  BOOL v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v0 = sub_19B6B61A0((_BOOL8)CFSTR("H4"));
  v8 = MEMORY[0x1E0C9AE40];
  if (!v0)
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    if (!MGIsDeviceOneOfType((const UInt8 *)&v12, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v10))
      v8 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v8;
}

CFDataRef sub_19B6C8644()
{
  const __CFData *v0;
  CFIndex Length;

  v0 = (const __CFData *)sub_19B6E4558((uint64_t)"IODeviceTree", (uint64_t)CFSTR("fillmore"), 0, (uint64_t)CFSTR("local-mac-address"), 0);
  if (v0
    || (v0 = (const __CFData *)sub_19B6E4558((uint64_t)"IODeviceTree", (uint64_t)CFSTR("wlan"), 0, (uint64_t)CFSTR("local-mac-address"), 0)) != 0)
  {
    Length = CFDataGetLength(v0);
    CFRelease(v0);
  }
  else
  {
    Length = 8;
  }
  return sub_19B6DF7B0(0x544D6163u, Length);
}

BOOL sub_19B6C86DC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("lU5WxNTusw4lrrBSEBiZeQ"), a2);
}

BOOL sub_19B6C8700(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("lU5WxNTusw4lrrBSEBiZeQ"), 84, a2);
}

uint64_t sub_19B6C8714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  int v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 4)
  {
    v22 = 1839812531;
    v21 = xmmword_19B718320;
    v20 = -435113336;
    v19 = xmmword_19B718334;
    if (!MGIsDeviceOneOfType((const UInt8 *)&v21, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v19))
      return 1;
  }
  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
  {
    if (sub_19B6B9C44() == 3)
    {
      v18 = 401945557;
      v17 = xmmword_19B71835C;
      v16 = 317289457;
      v15 = xmmword_19B718348;
      return MGIsDeviceOneOfType((const UInt8 *)&v17, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v15) ^ 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19B6C893C()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  BOOL v2;
  char v3;
  uint64_t v4;
  int valuePtr;

  v0 = sub_19B6BC5F4("IODeviceTree:/buttons", CFSTR("home-button-type"), 0);
  if (v0)
  {
    v1 = v0;
    valuePtr = 0;
    if (CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr))
      v2 = valuePtr == 1;
    else
      v2 = 0;
    v3 = v2;
    CFRelease(v1);
    v4 = MEMORY[0x1E0C9AE50];
    if ((v3 & 1) == 0)
      v4 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v4 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v4;
}

BOOL sub_19B6C89CC()
{
  return sub_19B6E4340((uint64_t)CFSTR("dcp"), 0);
}

CFTypeRef sub_19B6C89DC()
{
  CFTypeID TypeID;

  TypeID = CFBooleanGetTypeID();
  return sub_19B6BD240((uint64_t)"copyWifiCallingSecondaryDeviceCapability", (uint64_t)&unk_1E3BD0B38, TypeID);
}

const __CFString *sub_19B6C8A04()
{
  const __CFString *v0;
  CFTypeRef v1;
  CFDataRef v2;
  const __CFString *v3;
  const __CFString *v4;

  v0 = sub_19B6BB96C(0, "IOPlatformExpertDevice", CFSTR("IOPlatformSerialNumber"));
  if (v0)
  {
    v1 = v0;
    if (CFStringGetLength(v0))
      goto LABEL_14;
    CFRelease(v1);
  }
  if (!MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
  {
    v1 = 0;
    goto LABEL_14;
  }
  v2 = sub_19B6DF7A8(0x53724E6Du);
  v3 = sub_19B6BC494(v2, (uint64_t)CFSTR("SrNm"));
  if (v3)
  {
    v4 = v3;
    if (CFStringGetLength(v3) < 1)
      v1 = 0;
    else
      v1 = CFRetain(v4);
    CFRelease(v4);
    if (v2)
      goto LABEL_13;
  }
  else
  {
    v1 = 0;
    if (v2)
LABEL_13:
      CFRelease(v2);
  }
LABEL_14:
  if (v1)
    return (const __CFString *)v1;
  else
    return &stru_1E3BD78C0;
}

BOOL sub_19B6C8AE0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("VasUgeSzVyHdB27g2XpN0g"), a2);
}

BOOL sub_19B6C8B04(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("VasUgeSzVyHdB27g2XpN0g"), 83, a2);
}

CFDataRef sub_19B6C8B18()
{
  CFDataRef result;

  if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
    return sub_19B6DF7A8(0x5072434Cu);
  result = (CFDataRef)sub_19B6B2C64("IODeviceTree:/arm-io/isp", CFSTR("pearl-calibration-data"), 0);
  if (!result)
    return sub_19B6DF7A8(0x5072434Cu);
  return result;
}

const __CFString *sub_19B6C8B64()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  CFStringRef v2;
  uint64_t valuePtr;

  valuePtr = 0;
  v0 = (const __CFNumber *)sub_19B6B89E4((const char **)CFSTR("TF31PAB6aO8KAbPyNKSxKA"), 0);
  if (!v0)
    return CFSTR("0000000000000000");
  v1 = v0;
  CFNumberGetValue(v0, kCFNumberLongLongType, &valuePtr);
  v2 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%qu"), valuePtr);
  CFRelease(v1);
  return v2;
}

BOOL sub_19B6C8BEC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("6WdGcQGw4VLzrgxJo+bcrw"), a2);
}

BOOL sub_19B6C8C10(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("6WdGcQGw4VLzrgxJo+bcrw"), 85, a2);
}

uint64_t sub_19B6C8C24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 6)
    return 0;
  v11 = -1092155788;
  v10 = xmmword_19B717998;
  v9 = 763775061;
  v8 = xmmword_19B7179AC;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8);
}

BOOL sub_19B6C8F30()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("dUipfYkyvM80t4IkmMBVgQ"), 119);
}

CFNumberRef sub_19B6C8F48()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("xXBT4e92qXwQo3SYmACj3w"), 100);
}

BOOL sub_19B6C8F60(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("Z/TJS0IaLyq10dcSvUTGPg"), a2);
}

BOOL sub_19B6C8F84(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("Z/TJS0IaLyq10dcSvUTGPg"), 68, a2);
}

CFStringRef sub_19B6C8F98()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("0/QVFV5/X0h5iDjrdYYcog"), 112);
}

BOOL sub_19B6C8FB0()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/isp", CFSTR("+fgL2ovGydvB5CWd1JI1qg"), 104);
}

const void *sub_19B6C8FC8()
{
  const __CFDictionary *v0;

  v0 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
  return sub_19B6C01B8(v0, CFSTR("ProductVersionExtra"), 1);
}

uint64_t sub_19B6C8FE8()
{
  return sub_19B6DFA00(0x436C4247u);
}

uint64_t sub_19B6C8FF4()
{
  const __CFData *v0;
  uint64_t v1;

  v0 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("cover-glass-material"), 0);
  v1 = sub_19B6DFB40(v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

CFTypeRef sub_19B6C9040()
{
  return sub_19B6D7850(CFSTR("SavageUID"));
}

BOOL sub_19B6C904C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("FNvQ6lBvJIUcYBzQ8ggOUQ"), a2);
}

BOOL sub_19B6C9070(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("FNvQ6lBvJIUcYBzQ8ggOUQ"), 83, a2);
}

__CFString *sub_19B6C9084()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID TypeID;
  __CFString *Mutable;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v6;
  unsigned int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  CFTypeID v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char v24;
  uint8_t v25[16];
  uint8_t buf[16];

  v0 = (const __CFData *)sub_19B6E45DC((uint64_t)"IODeviceTree:", (uint64_t)CFSTR("wlan"), 0, (uint64_t)CFSTR("wifi-module-sn"), 0);
  if (!v0)
  {
    v1 = (const __CFData *)sub_19B6BBC28(1, "AppleBCMWLANBusInterfacePCIe", CFSTR("wifi-module-sn"));
    if (v1)
    {
      v0 = v1;
      TypeID = CFDataGetTypeID();
      if (TypeID == CFGetTypeID(v0))
      {
        Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
        BytePtr = CFDataGetBytePtr(v0);
        Length = CFDataGetLength(v0);
        if (Length >= 1)
        {
          v6 = Length;
          do
          {
            v7 = *BytePtr++;
            CFStringAppendFormat(Mutable, 0, CFSTR("%02X"), v7);
            --v6;
          }
          while (v6);
        }
LABEL_21:
        CFRelease(v0);
        return Mutable;
      }
      v15 = CFStringGetTypeID();
      if (v15 != CFGetTypeID(v0))
      {
        v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v16)
          v22 = v16 + 1;
        else
          v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v22, 5968, (uint64_t)CFSTR("Unsupported type."), v17, v18, v19, v20, v21, v24);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v25 = 0;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unsupported type.", v25, 2u);
        }
        Mutable = 0;
        goto LABEL_21;
      }
    }
    else
    {
      v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v8)
        v14 = v8 + 1;
      else
        v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v14, 5954, (uint64_t)CFSTR("Failed to retrieve data AppleBCMWLANBusInterfacePCIe:wifi-module-sn"), v9, v10, v11, v12, v13, v24);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to retrieve data AppleBCMWLANBusInterfacePCIe:wifi-module-sn", buf, 2u);
      }
      return 0;
    }
  }
  return (__CFString *)v0;
}

BOOL sub_19B6C9288(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("XrPbSCNx9X7Lyw9oGPgMDQ"), a2);
}

BOOL sub_19B6C92AC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("XrPbSCNx9X7Lyw9oGPgMDQ"), 87, a2);
}

BOOL sub_19B6C92C0()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("lUryPpLkvlffpEKiNnEchA"), 115);
}

CFDataRef sub_19B6C92D8()
{
  CFDataRef result;

  if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
    return sub_19B6DFCB8(0x424D6163u);
  result = (CFDataRef)sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("mac-address-bluetooth0"), 0);
  if (!result)
  {
    result = (CFDataRef)sub_19B6DC190("bluetooth");
    if (!result)
      return sub_19B6DFCB8(0x424D6163u);
  }
  return result;
}

BOOL sub_19B6C9334(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("jSDzacs4RYWnWxn142UBLQ"), a2);
}

BOOL sub_19B6C9358(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("jSDzacs4RYWnWxn142UBLQ"), 66, a2);
}

BOOL sub_19B6C936C()
{
  if (sub_19B6B9C44() != 1)
    return (unint64_t)sub_19B6C19A8() >> 33
        && (sub_19B6B5FE0((_BOOL8)CFSTR("H14")) || sub_19B6B3038((_BOOL8)CFSTR("t8103"), 0));
  return sub_19B6B5FE0((_BOOL8)CFSTR("H16")) && (unint64_t)sub_19B6C19A8() >> 33;
}

CFStringRef sub_19B6C93E4()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("5Y72WwdS5NYHdc00gEZ/DQ"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6C9500(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("WAfNjeiwOd/k6+VU6D6SIQ"), a2);
}

BOOL sub_19B6C9524(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("WAfNjeiwOd/k6+VU6D6SIQ"), 69, a2);
}

uint64_t sub_19B6C9538()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t v9[16];

  v0 = 1;
  if (!sub_19B6DBEDC(1, "aop-smart-cover"))
  {
    v0 = 0;
    if (sub_19B6BAC78("IODeviceTree:/buttons", CFSTR("function-button_halleffect"), 0))
    {
      v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v1)
        v7 = v1 + 1;
      else
        v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v7, 8163, (uint64_t)CFSTR("HallEffectSensorCability true using function-button_halleffect"), v2, v3, v4, v5, v6, v9[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v9 = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "HallEffectSensorCability true using function-button_halleffect", v9, 2u);
      }
      return 1;
    }
  }
  return v0;
}

CFTypeRef sub_19B6C9604()
{
  return sub_19B6BBC28(0, "IOSDIOIoCardDevice", CFSTR("IOSDIOManufacturerTuple"));
}

BOOL sub_19B6C961C()
{
  return sub_19B6B9C44() != 4;
}

BOOL sub_19B6C963C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("0D3qCmmfJ/i1mpmjOsV7EA"), a2);
}

BOOL sub_19B6C9660(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("0D3qCmmfJ/i1mpmjOsV7EA"), 83, a2);
}

BOOL sub_19B6C9678()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("5QM8apssQbhm2ZrUx5g5Tw"), 112);
}

CFArrayRef sub_19B6C9690()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  int v8;

  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  sub_19B6D7F90(v7, CFSTR("front-cam-offset-from-center"));
  return sub_19B6D8EA4((unsigned int *)v7, 1, v0, v1, v2, v3, v4, v5);
}

CFTypeRef sub_19B6C96CC()
{
  return sub_19B6D7850(CFSTR("SavageChipID"));
}

BOOL sub_19B6C96D8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("m9OWD0Y4Br0TZHUl6rGcOg"), a2);
}

BOOL sub_19B6C96FC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("m9OWD0Y4Br0TZHUl6rGcOg"), 83, a2);
}

CFTypeRef sub_19B6C9710()
{
  return sub_19B6D7850(CFSTR("JasperSNUM"));
}

BOOL sub_19B6C971C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("dJvRNnysMoubdy0ZCK2aRQ"), a2);
}

BOOL sub_19B6C9740(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("dJvRNnysMoubdy0ZCK2aRQ"), 74, a2);
}

uint64_t sub_19B6C9754()
{
  uint64_t result;

  result = sub_19B6E4558((uint64_t)"IODeviceTree", (uint64_t)CFSTR("ipd"), 0, (uint64_t)CFSTR("kblang-calibration"), 0);
  if (!result)
    return sub_19B6E4558((uint64_t)"IODeviceTree", (uint64_t)CFSTR("keyboard"), 0, (uint64_t)CFSTR("kblang-calibration"), 0);
  return result;
}

uint64_t sub_19B6C97B4()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 37);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(37, 2);
  return v0();
}

uint64_t sub_19B6C97E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v35 = 1602014129;
  v34 = xmmword_19B71817C;
  v33 = -810116762;
  v32 = xmmword_19B718190;
  v31 = -1195351767;
  v30 = xmmword_19B7181A4;
  v29 = -199226823;
  v28 = xmmword_19B7181B8;
  v27 = 1412427398;
  v26 = xmmword_19B7181CC;
  v25 = -1283070668;
  v24 = xmmword_19B7181E0;
  v23 = 160260070;
  v22 = xmmword_19B7181F4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v34, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v32)
    || sub_19B6B9C44() == 6)
  {
    v15 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v21 = -926344036;
    v20 = xmmword_19B717C2C;
    v19 = -954998212;
    v18 = xmmword_19B717C40;
    v16 = MGIsDeviceOneOfType((const UInt8 *)&v20, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v18);
    v15 = MEMORY[0x1E0C9AE40];
    if (!v16)
      v15 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v15;
}

CFTypeRef sub_19B6C99C4()
{
  return sub_19B6DB304(1, 1, 1);
}

BOOL sub_19B6C99D4(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("lHMDJnC58naUz2rOCJyVIw"), a2);
}

BOOL sub_19B6C99F8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("lHMDJnC58naUz2rOCJyVIw"), 73, a2);
}

CFNumberRef sub_19B6C9A0C()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("lY6RKv6ri6kfBeJCWilmmQ"), 102);
}

BOOL sub_19B6C9A24(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("nFRqKto/RuQAV1P+0/qkBA"), 85, a2);
}

BOOL sub_19B6C9A38()
{
  return sub_19B6BACD0((uint64_t)CFSTR("VolumeLimit"), CFSTR("RegionalBehaviorVolumeLimit"));
}

CFStringRef sub_19B6C9A4C()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("dW6ROVcD3o5ACa4jvALJ6A"), 100);
}

const void *sub_19B6C9A64()
{
  const __CFDictionary *v0;

  v0 = (const __CFDictionary *)_CFCopySupplementalVersionDictionary();
  return sub_19B6C01B8(v0, CFSTR("ProductBuildVersion"), 1);
}

const __CFData *sub_19B6C9A84()
{
  const __CFData *v0;
  __CFData *Mutable;
  CFDataRef Copy;
  const char *v3;
  char *v4;
  char Length;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  UInt8 bytes[2];
  UInt8 buffer[2];
  char v14;
  CFRange v15;
  CFRange v16;

  if (!MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ"))
    && (v0 = (const __CFData *)sub_19B6DC190("fillmore")) != 0
    || (v0 = sub_19B6C8644()) != 0)
  {
    if (CFDataGetLength(v0) == 6)
    {
      v14 = 0;
      *(_WORD *)buffer = 0;
      *(_WORD *)bytes = -257;
      Mutable = CFDataCreateMutable(0, 0);
      v15.location = 0;
      v15.length = 3;
      CFDataGetBytes(v0, v15, buffer);
      CFDataAppendBytes(Mutable, buffer, 3);
      v14 = 0;
      *(_WORD *)buffer = 0;
      CFDataAppendBytes(Mutable, bytes, 2);
      v16.location = 3;
      v16.length = 3;
      CFDataGetBytes(v0, v16, buffer);
      CFDataAppendBytes(Mutable, buffer, 3);
      Copy = CFDataCreateCopy(0, Mutable);
      CFRelease(v0);
      if (Mutable)
        CFRelease(Mutable);
      return Copy;
    }
    else if (CFDataGetLength(v0) != 8)
    {
      v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4)
        v3 = v4 + 1;
      Length = CFDataGetLength(v0);
      _MGLog((uint64_t)v3, 1596, (uint64_t)CFSTR("TMAC address has unexpected length %zu"), v6, v7, v8, v9, v10, Length);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        sub_19B70EDCC(v0);
    }
  }
  return v0;
}

BOOL sub_19B6C9C08(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("yF2IQrYS4yyREV4ZkbLysw"), a2);
}

BOOL sub_19B6C9C2C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("yF2IQrYS4yyREV4ZkbLysw"), 84, a2);
}

CFArrayRef sub_19B6C9C40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFArrayRef result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  __int128 v50;
  int v51;
  __int128 v52;
  int v53;
  __int128 v54;
  int v55;
  __int128 v56;
  int v57;
  __int128 v58;
  int v59;
  __int128 v60;
  int v61;
  __int128 v62;
  int v63;
  __int128 v64;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;
  __int128 v70;
  int v71;
  __int128 v72;
  int v73;
  __int128 v74;
  int v75;
  __int128 v76;
  int v77;
  __int128 v78;
  int v79;
  __int128 v80;
  int v81;
  __int128 v82;
  int v83;
  __int128 v84;
  int v85;
  __int128 v86;
  int v87;
  __int128 v88;
  int v89;
  __int128 v90;
  int v91;
  __int128 v92;
  int v93;
  __int128 v94;
  int v95;
  __int128 v96;
  int v97;
  __int128 v98;
  int v99;
  __int128 v100;
  int v101;
  __int128 v102;
  int v103;
  __int128 v104;
  int v105;
  __int128 v106;
  int v107;
  __int128 v108;
  int v109;
  __int128 v110;
  int v111;
  __int128 v112;
  int v113;
  __int128 v114;
  int v115;
  __int128 v116;
  int v117;
  __int128 v118;
  int v119;
  uint64_t v120;

  v120 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 1)
  {
    if (sub_19B6B9C44() != 3)
      goto LABEL_30;
    v79 = -1283070668;
    v78 = xmmword_19B7181E0;
    v77 = -199226823;
    v76 = xmmword_19B7181B8;
    v75 = 1412427398;
    v74 = xmmword_19B7181CC;
    v73 = 160260070;
    v72 = xmmword_19B7181F4;
    v71 = 317289457;
    v70 = xmmword_19B718348;
    v69 = 401945557;
    v68 = xmmword_19B71835C;
    v7 = MGIsDeviceOneOfType((const UInt8 *)&v78, v17, v18, v19, v20, v21, v22, v23, (uint64_t)&v76);
    if ((_DWORD)v7)
    {
      v24 = 0x147AE0000000;
    }
    else
    {
      v67 = 1532898719;
      v66 = xmmword_19B717B50;
      v65 = -1527788847;
      v64 = xmmword_19B717B3C;
      v7 = MGIsDeviceOneOfType((const UInt8 *)&v66, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v64);
      if ((_DWORD)v7)
      {
        v24 = 0x17AE20000000;
      }
      else
      {
        v63 = -563086000;
        v62 = xmmword_19B7183D4;
        v61 = 996646949;
        v60 = xmmword_19B7183C0;
        v7 = MGIsDeviceOneOfType((const UInt8 *)&v62, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v60);
        if ((_DWORD)v7)
        {
          v16 = 0x405CC3D700000000;
          goto LABEL_29;
        }
        v59 = 1908474541;
        v58 = xmmword_19B717B78;
        v57 = 1275676051;
        v56 = xmmword_19B717B64;
        v7 = MGIsDeviceOneOfType((const UInt8 *)&v58, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v56);
        if ((_DWORD)v7
          || (v55 = -1022451852,
              v54 = xmmword_19B718398,
              v53 = 1729782187,
              v52 = xmmword_19B7183AC,
              v7 = MGIsDeviceOneOfType((const UInt8 *)&v54, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v52),
              (_DWORD)v7))
        {
          v16 = 0x4061A6B860000000;
          goto LABEL_29;
        }
        v51 = 2030516999;
        v50 = xmmword_19B717DA8;
        v49 = -1276010597;
        v48 = xmmword_19B717DBC;
        v47 = -762483149;
        v46 = xmmword_19B717DD0;
        v45 = -1926937532;
        v44 = xmmword_19B717DE4;
        v7 = MGIsDeviceOneOfType((const UInt8 *)&v50, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v48);
        if (!(_DWORD)v7)
        {
          v43 = -1902732724;
          v42 = xmmword_19B717DF8;
          v41 = -342357580;
          v40 = xmmword_19B717E0C;
          v39 = 300442574;
          v38 = xmmword_19B717E20;
          v37 = -1294188889;
          v36 = xmmword_19B717E34;
          v7 = MGIsDeviceOneOfType((const UInt8 *)&v42, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v40);
          if ((_DWORD)v7)
          {
            v16 = 0x405FE8B440000000;
            goto LABEL_29;
          }
          goto LABEL_30;
        }
        v24 = 0xC7EFA0000000;
      }
    }
    v16 = v24 & 0xFFFFFFFFFFFFLL | 0x405B000000000000;
    goto LABEL_29;
  }
  v119 = -1403227947;
  v118 = xmmword_19B718258;
  v117 = 729118884;
  v116 = xmmword_19B71826C;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v118, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v116);
  if ((_DWORD)v7)
  {
    v15 = 0xF5C600000000;
LABEL_4:
    v16 = v15 & 0xFFFFFFFFFFFFLL | 0x4051000000000000;
    goto LABEL_29;
  }
  v115 = 1046806126;
  v114 = xmmword_19B718280;
  v113 = -188760945;
  v112 = xmmword_19B718294;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v114, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v112);
  if ((_DWORD)v7)
  {
    v16 = 0x404B4820A0000000;
    goto LABEL_29;
  }
  v111 = -489993439;
  v110 = xmmword_19B7182A8;
  v109 = 886875686;
  v108 = xmmword_19B7182BC;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v110, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v108);
  if ((_DWORD)v7)
  {
    v25 = 0x191680000000;
LABEL_15:
    v16 = v25 & 0xFFFFFFFFFFFFLL | 0x404F000000000000;
    goto LABEL_29;
  }
  v107 = -350584140;
  v106 = xmmword_19B7182D0;
  v105 = -1418383976;
  v104 = xmmword_19B7182E4;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v106, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v104);
  if ((_DWORD)v7)
    goto LABEL_27;
  v103 = 368778837;
  v102 = xmmword_19B7182F8;
  v101 = -1213485500;
  v100 = xmmword_19B71830C;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v102, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v100);
  if ((_DWORD)v7)
    goto LABEL_35;
  v99 = 414393924;
  v98 = xmmword_19B71812C;
  v97 = 897736383;
  v96 = xmmword_19B718140;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v98, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v96);
  if ((_DWORD)v7)
  {
LABEL_27:
    v26 = 0x7D0B60000000;
LABEL_28:
    v16 = v26 & 0xFFFFFFFFFFFFLL | 0x404D000000000000;
    goto LABEL_29;
  }
  v95 = -996295886;
  v94 = xmmword_19B718154;
  v93 = -453987047;
  v92 = xmmword_19B718168;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v94, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v92);
  if ((_DWORD)v7)
  {
LABEL_35:
    v15 = 0x28D0E0000000;
    goto LABEL_4;
  }
  v91 = -337121064;
  v90 = xmmword_19B717B00;
  v89 = 450980336;
  v88 = xmmword_19B717B14;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v90, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v88);
  if ((_DWORD)v7)
  {
    v16 = 0x404E1484E0000000;
    goto LABEL_29;
  }
  v87 = -1843102369;
  v86 = xmmword_19B717CA4;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v86, v8, v9, v10, v11, v12, v13, v14, 0);
  if ((_DWORD)v7)
  {
    v25 = 0x49BA0000000;
    goto LABEL_15;
  }
  v85 = -427474227;
  v84 = xmmword_19B717C7C;
  v83 = 1477534141;
  v82 = xmmword_19B717C90;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v84, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v82);
  if ((_DWORD)v7)
  {
    v16 = 0x4050BC3960000000;
LABEL_29:
    result = sub_19B6D8FAC(v7, v8, v9, v10, v11, v12, v13, v14, v16);
    if (result)
      return result;
    goto LABEL_30;
  }
  v81 = -232427879;
  v80 = xmmword_19B717C68;
  v7 = MGIsDeviceOneOfType((const UInt8 *)&v80, v8, v9, v10, v11, v12, v13, v14, 0);
  if ((_DWORD)v7)
  {
    v26 = 0xFB0200000000;
    goto LABEL_28;
  }
LABEL_30:
  v34[0] = 0;
  v34[1] = 0;
  v35 = 0;
  sub_19B6D7F90(v34, CFSTR("rear-cam-offset-from-center"));
  return sub_19B6D8EA4((unsigned int *)v34, 0, v28, v29, v30, v31, v32, v33);
}

uint64_t sub_19B6CA4E4()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 2;
  return result;
}

BOOL sub_19B6CA50C()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("8Kc1MRjWTfDiGKX6E/9XqQ"), 108);
}

CFTypeRef sub_19B6CA524()
{
  return sub_19B6DB5A8(2, 0, 1);
}

uint64_t sub_19B6CA534()
{
  return 0;
}

CFNumberRef sub_19B6CA53C()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  CFTypeID v2;
  uint64_t v3;
  CFTypeRef cf;
  uint64_t valuePtr;

  valuePtr = 0;
  v0 = (const __CFDictionary *)sub_19B6E41A0((uint64_t)CFSTR("avd"), (uint64_t)CFSTR("AppleARMIODevice"));
  if (v0)
  {
    v1 = v0;
    cf = 0;
    if (CFDictionaryGetValueIfPresent(v0, CFSTR("decode-samples-per-second"), &cf))
    {
      v2 = CFGetTypeID(cf);
      if (v2 == CFDataGetTypeID())
      {
        v3 = *(int *)CFDataGetBytePtr((CFDataRef)cf);
        if ((_DWORD)v3)
          valuePtr = v3 << 16;
      }
    }
    CFRelease(v1);
  }
  return CFNumberCreate(0, kCFNumberSInt64Type, &valuePtr);
}

const __CFNumber *sub_19B6CA5DC()
{
  const __CFNumber *result;
  const __CFNumber *v1;
  int valuePtr;

  valuePtr = 0;
  result = sub_19B6BC5F4("IODeviceTree:/options", CFSTR("emu"), 0);
  if (result)
  {
    v1 = result;
    CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
    CFRelease(v1);
    return (const __CFNumber *)(valuePtr != 0);
  }
  return result;
}

BOOL sub_19B6CA640()
{
  return sub_19B6B9C44() != 4;
}

BOOL sub_19B6CA65C()
{
  return sub_19B6B9C44() == 6 && sub_19B6B5FE0((_BOOL8)CFSTR("M11"));
}

const void *sub_19B6CA68C()
{
  return sub_19B6B89E4((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg"), 0);
}

BOOL sub_19B6CA69C()
{
  return sub_19B6B9C44() != 4;
}

CFMutableDictionaryRef sub_19B6CA6B8()
{
  CFMutableDictionaryRef Mutable;
  const __CFDictionary *v1;
  _QWORD v3[5];

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v1 = IOServiceNameMatching("compass");
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19B6D906C;
  v3[3] = &unk_1E3BD0B58;
  v3[4] = Mutable;
  sub_19B6DBDAC(v1, (uint64_t)v3);
  return Mutable;
}

BOOL sub_19B6CA740(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("aoAKcHLuTUp/o3squcJkhA"), a2);
}

BOOL sub_19B6CA764(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("aoAKcHLuTUp/o3squcJkhA"), 67, a2);
}

BOOL sub_19B6CA778()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("8bY/L3i3rmxrl4ZjFZZpgQ"), 115);
}

BOOL sub_19B6CA790()
{
  return sub_19B6B9C44() != 6
      && sub_19B6B9C44() != 8
      && sub_19B6B9C44() != 7
      && !sub_19B6B61A0((_BOOL8)CFSTR("H1"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H2"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H3"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H4"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H5"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H6"));
}

uint64_t sub_19B6CA82C()
{
  return sub_19B6E4448((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("h0OUwg53vKp+IPdzLG4NrA"), 109, (uint64_t)CFSTR("aNZeCyuWxI6SE/KwZ129wA"), 110);
}

uint64_t sub_19B6CA850()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 39);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(39, 2);
  return v0();
}

CFNumberRef sub_19B6CA87C()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("4JalTKSe5a9I+mb00ATvag"), 100);
}

CFTypeRef sub_19B6CA894()
{
  return sub_19B6BBC28(1, "rose", CFSTR("ChipID"));
}

BOOL sub_19B6CA8AC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("nhGhVMyvrWYe9U2ltAUImg"), a2);
}

BOOL sub_19B6CA8D0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("nhGhVMyvrWYe9U2ltAUImg"), 65, a2);
}

uint64_t sub_19B6CA8E4()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("post-effects"), 0);
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

BOOL sub_19B6CA928()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("+xJ6RaQ6PDSsLjib8r5fgg"), 112);
}

const void *sub_19B6CA940()
{
  return sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("MXZ7vg7hul895QdsLUBJFA"), 98);
}

BOOL sub_19B6CA958(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("Qq9/Mya05P4ToEr1pMpGGg"), a2);
}

BOOL sub_19B6CA97C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("Qq9/Mya05P4ToEr1pMpGGg"), 66, a2);
}

BOOL sub_19B6CA990()
{
  return sub_19B6B9C44() != 7;
}

BOOL sub_19B6CA9AC()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("KLB4sM/KC38QT+dTuDC/aA"), 114);
}

BOOL sub_19B6CA9C4()
{
  CFDataRef v0;
  const __CFData *v1;
  CFTypeID v2;
  const UInt8 *BytePtr;
  _BOOL8 v4;
  uint64_t (*v5)();
  unsigned int (*v6)(void);
  mach_port_t v8;
  const __CFDictionary *v9;
  io_service_t MatchingService;
  io_object_t v11;
  const __CFData *v12;
  const __CFData *v13;
  unint64_t v14;
  unint64_t v15;
  UInt8 buffer[4];
  CFRange v17;

  if (sub_19B6B5FA0())
  {
    v0 = sub_19B6C2AF0();
    if (v0)
    {
      v1 = v0;
      v2 = CFGetTypeID(v0);
      if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) >= 6)
      {
        BytePtr = CFDataGetBytePtr(v1);
        if (*BytePtr)
        {
          v4 = 1;
        }
        else
        {
          v14 = 0;
          do
          {
            v15 = v14;
            if (v14 == 5)
              break;
            ++v14;
          }
          while (!BytePtr[v15 + 1]);
          v4 = v15 < 5;
        }
      }
      else
      {
        v4 = 0;
      }
      CFRelease(v1);
      return v4;
    }
    return 0;
  }
  if (MGGetBoolAnswer((const char **)CFSTR("kjKnJNt7HY90iN6rpbSeFQ")))
    return 0;
  v5 = (uint64_t (*)())*((_QWORD *)off_1EE3FD5A0 + 97);
  if (!v5)
    v5 = (uint64_t (*)())sub_19B6BBD84(97, 2);
  if (v5 == sub_19B6C1BC8)
  {
    v8 = *MEMORY[0x1E0CBBAA8];
    v9 = IOServiceMatching("IOPlatformExpertDevice");
    MatchingService = IOServiceGetMatchingService(v8, v9);
    if (MatchingService)
    {
      v11 = MatchingService;
      v4 = 1;
      v12 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", CFSTR("no-sdio-devices"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1u);
      if (v12)
      {
        v13 = v12;
        *(_DWORD *)buffer = 0;
        v17.location = 0;
        v17.length = 4;
        CFDataGetBytes(v12, v17, buffer);
        v4 = *(_DWORD *)buffer == 0;
        CFRelease(v13);
      }
      IOObjectRelease(v11);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    v6 = (unsigned int (*)(void))*((_QWORD *)off_1EE3FD5A0 + 97);
    if (!v6)
      v6 = (unsigned int (*)(void))sub_19B6BBD84(97, 2);
    return v6() != 0;
  }
  return v4;
}

BOOL sub_19B6CAB7C()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("rt/G6Vk3NTGWs5N9WEjztQ"), 102);
}

CFTypeRef sub_19B6CAB94()
{
  return sub_19B6D74D4(CFSTR("FrontIRStructuredLightProjectorSerialNumString"));
}

BOOL sub_19B6CABA0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("wH7fRq4TDdYG2pN1KDQW/A"), a2);
}

BOOL sub_19B6CABC4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("wH7fRq4TDdYG2pN1KDQW/A"), 70, a2);
}

uint64_t sub_19B6CABD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  __int128 v50;
  int v51;
  __int128 v52;
  int v53;
  __int128 v54;
  int v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v55 = 28030256;
  v54 = xmmword_19B718208;
  v53 = 1214363620;
  v52 = xmmword_19B71821C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v54, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v52))
    goto LABEL_5;
  v51 = 886875686;
  v50 = xmmword_19B7182BC;
  v49 = -489993439;
  v48 = xmmword_19B7182A8;
  v47 = -1403227947;
  v46 = xmmword_19B718258;
  v45 = 729118884;
  v44 = xmmword_19B71826C;
  v43 = 1046806126;
  v42 = xmmword_19B718280;
  v41 = -188760945;
  v40 = xmmword_19B718294;
  if (MGIsDeviceOneOfType((const UInt8 *)&v50, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v48))
    goto LABEL_5;
  v39 = -798153473;
  v38 = xmmword_19B718230;
  v37 = -776721724;
  v36 = xmmword_19B718244;
  if (MGIsDeviceOneOfType((const UInt8 *)&v38, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v36)
    || (v35 = -38605833,
        v34 = xmmword_19B717BDC,
        v33 = -894965712,
        v32 = xmmword_19B717BF0,
        MGIsDeviceOneOfType((const UInt8 *)&v34, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v32)))
  {
LABEL_5:
    v29 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v31 = sub_19B6B9C44();
    v29 = MEMORY[0x1E0C9AE40];
    if (v31 == 1)
      v29 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v29;
}

BOOL sub_19B6CAE4C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("SMgTCc2v9AU2ziIHRX8qww"), 104);
}

const void *sub_19B6CAE64()
{
  return sub_19B6B89E4((const char **)CFSTR("lwHRTZNO5Jq87pVlzdNGIA"), 0);
}

BOOL sub_19B6CAE74()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("0vvGMT0ltmG03nFfaXxoHg"), 115);
}

CFNumberRef sub_19B6CAE8C()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("1HWDBfJwBJZ8TDHcPDafmQ"), 101);
}

const void *sub_19B6CAEA4()
{
  return sub_19B6B89E4((const char **)CFSTR("4uzgAFPkzKUmlZG5HpFIkg"), 0);
}

BOOL sub_19B6CAEB4()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("wAbB2fAjUqUc6lNBelfWMA"), 110);
}

uint64_t sub_19B6CAEE0()
{
  uint64_t v0;
  const void *v1;
  const void *v2;

  v0 = *MEMORY[0x1E0C9AE40];
  v1 = (const void *)sub_19B6B2900();
  if (v1)
  {
    v2 = v1;
    if (!CFEqual(v1, CFSTR("AppleTV"))
      && !CFEqual(v2, CFSTR("Watch"))
      && (sub_19B6B61A0((_BOOL8)CFSTR("H8")) || sub_19B6B61A0((_BOOL8)CFSTR("H9"))
                                             || sub_19B6B61A0((_BOOL8)CFSTR("H10"))))
    {
      v0 = *MEMORY[0x1E0C9AE50];
    }
    CFRelease(v2);
  }
  return v0;
}

CFTypeRef sub_19B6CAF7C()
{
  return sub_19B6DB304(1, 1, 0);
}

BOOL sub_19B6CAF8C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("j4dedPnpeXouudM1+j3dsQ"), a2);
}

BOOL sub_19B6CAFB0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("j4dedPnpeXouudM1+j3dsQ"), 73, a2);
}

BOOL sub_19B6CAFC4()
{
  return sub_19B6B9C44() == 3;
}

uint64_t sub_19B6CAFE0()
{
  uint64_t v0;
  BOOL v1;
  uint64_t v2;
  int v4;

  v0 = MEMORY[0x1E0C9AE40];
  v4 = -1;
  v1 = sub_19B6B84A4((const char **)CFSTR("+97cHA72jHlHqQnIkgGBYg"), 5, 5, kCFNumberSInt32Type, &v4);
  if (v1 && v4 == 2)
    v2 = MEMORY[0x1E0C9AE50];
  else
    v2 = v0;
  return *(_QWORD *)v2;
}

uint64_t sub_19B6CB04C()
{
  return (unsigned __int16)sub_19B6DCA84(1, "sgx", CFSTR("opengl-standard"), 768) << 8;
}

uint64_t sub_19B6CB07C()
{
  const __CFString *v0;
  uint64_t v1;
  const __CFString *v2;

  v0 = sub_19B6BC39C("IODeviceTree:/", CFSTR("model-config"), 0);
  v1 = *MEMORY[0x1E0C9AE40];
  if (v0)
  {
    v2 = v0;
    if (CFStringFind(v0, CFSTR("NED=1"), 0).location != -1)
      v1 = *MEMORY[0x1E0C9AE50];
    CFRelease(v2);
  }
  return v1;
}

CFTypeRef sub_19B6CB0F0()
{
  return sub_19B6DC040(0, "AppleBatteryAuth", CFSTR("IDSN"));
}

BOOL sub_19B6CB108(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("OyENNqRhuo8+RHkpbr/82A"), a2);
}

BOOL sub_19B6CB12C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("OyENNqRhuo8+RHkpbr/82A"), 82, a2);
}

BOOL sub_19B6CB140()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("R1AF5xVFhlNjSbjBZJqQeA"), 114);
}

uint64_t sub_19B6CB158()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 50);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(50, 2);
  return v0();
}

CFStringRef sub_19B6CB184()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("aOq/O8u9f/bpWUnKco+xgA"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6CB2A0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("VG9TCKNqNLCHk0J6zTkuVQ"), a2);
}

BOOL sub_19B6CB2C4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("VG9TCKNqNLCHk0J6zTkuVQ"), 69, a2);
}

CFNumberRef sub_19B6CB2D8()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("Sr1Bmb3uoIfgKyaZguG0Gw"), 102);
}

BOOL sub_19B6CB2F0()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("6PkKE66MnKm0yiOIQLknEg"), 97);
}

const __CFString *sub_19B6CB308()
{
  if (sub_19B6B9C84())
    return CFSTR("iOS");
  else
    return (const __CFString *)sub_19B6B6DF4((const void *)*MEMORY[0x1E0C9AB98], 1);
}

BOOL sub_19B6CB340()
{
  return sub_19B6B9C44() != 4;
}

CFNumberRef sub_19B6CB35C()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("oxH8p7+EaUzhkc2edrXsQQ"), 97);
}

CFStringRef sub_19B6CB374()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("Qt+S0J/SXrcfymyfJWvCCQ"), 114);
}

BOOL sub_19B6CB38C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("O8mk69g6k/CbfeET9LtqQA"), a2);
}

BOOL sub_19B6CB3B0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("O8mk69g6k/CbfeET9LtqQA"), 82, a2);
}

CFNumberRef sub_19B6CB3C4()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  const UInt8 *BytePtr;
  CFNumberRef v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  CFNumberRef result;
  uint8_t v13[16];

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("91LyMcx4z1w3SGVeqteMnA"), 0);
  v1 = v0;
  if (v0)
  {
    v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) > 11)
    {
      BytePtr = CFDataGetBytePtr(v1);
      v4 = CFNumberCreate(0, kCFNumberSInt32Type, BytePtr + 4);
LABEL_11:
      CFRelease(v1);
      return v4;
    }
  }
  v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5)
    v11 = v5 + 1;
  else
    v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v11, 5032, (uint64_t)CFSTR("failed to fetch region sku"), v6, v7, v8, v9, v10, v13[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to fetch region sku", v13, 2u);
  }
  v4 = 0;
  result = 0;
  if (v1)
    goto LABEL_11;
  return result;
}

CFNumberRef sub_19B6CB4C8()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("Lu6Mgo1O0+EoGMk1OtnMRg"), 114);
}

uint64_t sub_19B6CB4E0()
{
  return sub_19B6E44D4((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("OmiBcaNEpjOcuQrO5/Yrbw"), 100, (uint64_t)CFSTR("us1armjE6TKGvh2WIrNgEQ"), 97);
}

BOOL sub_19B6CB504()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("oTuH4/axV9s11/jKxB2z2A"), 117);
}

CFTypeRef sub_19B6CB530()
{
  CFTypeRef v0;
  CFTypeRef v1;
  CFTypeID v2;
  CFTypeID v3;

  v0 = sub_19B6BBC28(1, "als", CFSTR("prox-calibration"));
  if (!v0)
  {
LABEL_4:
    v1 = sub_19B6BBC28(1, "multi-touch", CFSTR("prox-calibration"));
    if (!v1)
      return sub_19B6BBC28(1, "prox", CFSTR("prox-calibration"));
    goto LABEL_5;
  }
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID())
  {
    CFRelease(v1);
    goto LABEL_4;
  }
LABEL_5:
  v3 = CFGetTypeID(v1);
  if (v3 == CFDataGetTypeID())
    return v1;
  CFRelease(v1);
  return sub_19B6BBC28(1, "prox", CFSTR("prox-calibration"));
}

BOOL sub_19B6CB5E8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("6UUmcaeT7rJoyUVmoPJd4A"), a2);
}

BOOL sub_19B6CB60C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("6UUmcaeT7rJoyUVmoPJd4A"), 80, a2);
}

uint64_t sub_19B6CB620()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 7
    || sub_19B6B9C44() == 11)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -414334491;
    v10 = xmmword_19B718528;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

CFNumberRef sub_19B6CB7AC()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("HhLXszMhK6bb9TP4sqVQWQ"), 101);
}

BOOL sub_19B6CB7C4()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("2v9hQi8xVAKZZVCMd/YhjQ"), 115);
}

BOOL sub_19B6CB7DC()
{
  return sub_19B6BACAC("IODeviceTree:/backlight", CFSTR("ldJQht23DQY8SUXKJhUvPw"), 117);
}

BOOL sub_19B6CB7F4()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("c2ZyLSF00uEyREloINiqVA"), 104);
}

uint64_t sub_19B6CB80C()
{
  return sub_19B6DFA00(0x434C4347u);
}

BOOL sub_19B6CB818()
{
  return sub_19B6B9C44() == 3 && sub_19B6DBEDC(1, "AWCSMahiDeviceInfo");
}

CFNumberRef sub_19B6CB850()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("lvmEUCUwik8sO0yGU1rBOA"), 114);
}

CFNumberRef sub_19B6CB868()
{
  int valuePtr;
  __int128 v2;
  int v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 4)
    return (CFNumberRef)sub_19B6B89E4((const char **)CFSTR("SNfDJgQFV2Xj7+WnozcJPw"), 0);
  valuePtr = 1;
  v3 = 1839812531;
  v2 = xmmword_19B718320;
  if ((MGIsDeviceOfType((const UInt8 *)&v2) & 1) == 0)
    valuePtr = 2;
  return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
}

CFDictionaryRef sub_19B6CB930()
{
  return sub_19B6DCBD8(CFSTR("pref-encoding"));
}

CFDictionaryRef sub_19B6CB93C()
{
  return sub_19B6DCBD8(CFSTR("pref-decoding"));
}

BOOL sub_19B6CB948()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("4+ntrbAfaq8rQKPfQo16CQ"), 115);
}

CFNumberRef sub_19B6CB960()
{
  int v0;
  int valuePtr;

  if (sub_19B6B3038((_BOOL8)CFSTR("r/++Z94rbTcHrTtZ/rCU4w"), 115))
    goto LABEL_2;
  if (sub_19B6B61A0((_BOOL8)CFSTR("M10")))
  {
LABEL_4:
    v0 = 42;
    goto LABEL_8;
  }
  if (sub_19B6B61A0((_BOOL8)CFSTR("H9")) || sub_19B6B61A0((_BOOL8)CFSTR("H10")))
    goto LABEL_7;
  if (sub_19B6B61A0((_BOOL8)CFSTR("H1")))
    goto LABEL_18;
  if (sub_19B6B61A0((_BOOL8)CFSTR("M8")))
    goto LABEL_4;
  if (sub_19B6B61A0((_BOOL8)CFSTR("H2")))
    goto LABEL_18;
  if (sub_19B6B61A0((_BOOL8)CFSTR("M9")))
    goto LABEL_4;
  if (sub_19B6B61A0((_BOOL8)CFSTR("H3")))
    goto LABEL_18;
  if (sub_19B6B3038((_BOOL8)CFSTR("aIJva0DAnD6KdrSpPF11xQ"), 115))
  {
LABEL_2:
    v0 = 50;
    goto LABEL_8;
  }
  if (sub_19B6B61A0((_BOOL8)CFSTR("H4")))
    goto LABEL_18;
  if (sub_19B6B61A0((_BOOL8)CFSTR("H11")))
    goto LABEL_7;
  if (sub_19B6B61A0((_BOOL8)CFSTR("H5")))
  {
LABEL_18:
    v0 = 41;
    goto LABEL_8;
  }
  if (sub_19B6B3038((_BOOL8)CFSTR("3Hj0jFscGt094g65Fag7eQ"), 116))
    goto LABEL_7;
  if (sub_19B6B61A0((_BOOL8)CFSTR("H6")))
    goto LABEL_4;
  if (sub_19B6B3038((_BOOL8)CFSTR("NKo9tzEYqtHAfQYMFsc66Q"), 115))
  {
LABEL_7:
    v0 = 51;
    goto LABEL_8;
  }
  if (sub_19B6B3038((_BOOL8)CFSTR("zDBaE8nqtDP8hY4pOa6iMw"), 116))
    v0 = 50;
  else
    v0 = 52;
LABEL_8:
  valuePtr = v0;
  return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
}

uint64_t sub_19B6CBADC()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("aL9+NE29t3Wm2lEAE+atZQ"), 118);
}

uint64_t sub_19B6CBAF4()
{
  return sub_19B6DFA00(0x42474D74u);
}

uint64_t sub_19B6CBB00()
{
  return 0;
}

uint64_t sub_19B6CBB08()
{
  const __CFData *v0;
  uint64_t v1;

  v0 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("housing-color"), 0);
  v1 = sub_19B6DFC84(v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

CFNumberRef sub_19B6CBB54()
{
  return sub_19B6BC5F4("IODeviceTree:/baseband", CFSTR("5dyhCh3dm1vSOaNK+US1Qw"), 101);
}

BOOL sub_19B6CBB6C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("qWG594bTi87edQCSYxlLeA"), a2);
}

BOOL sub_19B6CBB90(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("qWG594bTi87edQCSYxlLeA"), 69, a2);
}

BOOL sub_19B6CBBA4()
{
  return sub_19B6B9C44() != 8
      && sub_19B6B9C44() != 6
      && sub_19B6B9C44() != 7
      && !sub_19B6B61A0((_BOOL8)CFSTR("H4"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H5"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H6"))
      && !sub_19B6B61A0((_BOOL8)CFSTR("H7"));
}

CFNumberRef sub_19B6CBC24()
{
  CFNumberRef result;
  int valuePtr;

  result = (CFNumberRef)sub_19B6E44D4((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("mesa"), 0, (uint64_t)CFSTR("mesaType"), 0);
  if (!result)
  {
    if (MGGetBoolAnswer((const char **)CFSTR("HV7WDiidgMf7lwAu++Lk5w")))
    {
      valuePtr = 0;
      return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFDataRef sub_19B6CBC98()
{
  _OWORD v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D8520(CFSTR("ringer-button-location"), 0, (uint64_t *)v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

CFStringRef sub_19B6CBCE8()
{
  __int128 v1;
  __int128 v2;

  v1 = 0u;
  v2 = 0u;
  if (sub_19B6D78B0((uint64_t)&v1))
    return CFStringCreateWithFormat(0, 0, CFSTR("{ x: %f, y: %f, width: %f, height: %f }"), v1, v2);
  else
    return 0;
}

const void *sub_19B6CBD40()
{
  return sub_19B6B2C64("IODeviceTree:/", CFSTR("b/k0ZT2f/WGV2qJSyPJHoQ"), 99);
}

BOOL sub_19B6CBD58(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("SmUPjD77AHIMCLny9nawdw"), a2);
}

BOOL sub_19B6CBD7C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("SmUPjD77AHIMCLny9nawdw"), 67, a2);
}

BOOL sub_19B6CBD90()
{
  return sub_19B6BACAC("IODeviceTree:/arm-io/isp", CFSTR("X9NA3D+PguwY0i0Uffl07Q"), 99);
}

uint64_t sub_19B6CBDA8()
{
  uint64_t v0;

  v0 = *MEMORY[0x1E0C9AE40];
  if (sub_19B6B9C44() == 3
    && !sub_19B6B61A0((_BOOL8)CFSTR("H4"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H5"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H6"))
    && sub_19B6BA524() > 0x773593FFFLL)
  {
    return *MEMORY[0x1E0C9AE50];
  }
  return v0;
}

CFTypeRef sub_19B6CBE30()
{
  return sub_19B6DB304(4, 1, 0);
}

BOOL sub_19B6CBE40(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("inECTnNyR97XWxm7jU8uqA"), a2);
}

BOOL sub_19B6CBE64(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("inECTnNyR97XWxm7jU8uqA"), 77, a2);
}

BOOL sub_19B6CBE78()
{
  return sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("grEfqkFsEkgnJH1nl9sodw"), 101);
}

BOOL sub_19B6CBE90()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("IMlsLCL69XUZau9QyPnxeQ"), 114);
}

const void *sub_19B6CBEA8()
{
  return sub_19B6B89E4((const char **)CFSTR("HV7WDiidgMf7lwAu++Lk5w"), 0);
}

uint64_t sub_19B6CBEB8()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 3;
  return result;
}

CFMutableArrayRef sub_19B6CBEE0()
{
  CFMutableArrayRef result;
  __CFArray *v1;
  CFArrayRef Copy;

  result = CFArrayCreateMutable(0, 0, 0);
  if (result)
  {
    v1 = result;
    if (sub_19B6BAC78("IODeviceTree:/product", CFSTR("nfc-express"), 0))
      CFArrayAppendValue(v1, CFSTR("nfc-express"));
    if (sub_19B6BAC78("IODeviceTree:/product", CFSTR("alisha"), 0))
      CFArrayAppendValue(v1, CFSTR("alisha"));
    if (sub_19B6BAC78("IODeviceTree:/product", CFSTR("find-my"), 0))
      CFArrayAppendValue(v1, CFSTR("find-my"));
    Copy = CFArrayCreateCopy(0, v1);
    CFRelease(v1);
    return Copy;
  }
  return result;
}

BOOL sub_19B6CBFB0()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("fb+1apeTeouqt+fo3nZ6sg"), 117);
}

BOOL sub_19B6CBFC8()
{
  return MGGetBoolAnswer((const char **)CFSTR("TTZrMo1OOEUELa7asaQ7xg"))
      || MGGetBoolAnswer((const char **)CFSTR("7W2eNk/f6uewC8N58mlRrQ"));
}

CFTypeRef sub_19B6CBFFC()
{
  _BOOL4 v0;
  CFTypeRef result;
  uint64_t v2;
  CFTypeID TypeID;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t v11[12];
  int v12;

  if (!MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg")))
    return 0;
  v12 = -1;
  v0 = sub_19B6B84A4((const char **)CFSTR("XQBHOWjPt2P+uNqlLm1P7A"), 5, 5, kCFNumberSInt32Type, &v12);
  result = 0;
  if (v0 && v12 >= 2)
  {
    v2 = *((_QWORD *)off_1EE3FD5A0 + 10);
    if (!v2)
      v2 = sub_19B6BBD84(10, 2);
    TypeID = CFDictionaryGetTypeID();
    result = sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyFirmwareSecurityInfo", v2, TypeID);
    if (!result)
    {
      v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4)
        v10 = v4 + 1;
      else
        v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v10, 4876, (uint64_t)CFSTR("_CTServerConnectionCopyFirmwareSecurityInfo returned NULL"), v5, v6, v7, v8, v9, v11[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "_CTServerConnectionCopyFirmwareSecurityInfo returned NULL", v11, 2u);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_19B6CC114()
{
  return sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("WbcphnnzI6Yb5r/AzwiyUA"), 109);
}

BOOL sub_19B6CC12C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("VrWzQGQK9Fbp/RqeQ08VzA"), 99);
}

CFTypeRef sub_19B6CC144()
{
  return sub_19B6D7850(CFSTR("YonkersSNUM"));
}

BOOL sub_19B6CC150(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("67Dsh4G8EGQp4WbPDfS/Xw"), a2);
}

BOOL sub_19B6CC174(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("67Dsh4G8EGQp4WbPDfS/Xw"), 89, a2);
}

BOOL sub_19B6CC188()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("1oUugT++JJx5gOVyB2la7w"), 115);
}

uint64_t sub_19B6CC1A0()
{
  return *MEMORY[0x1E0C9AE50];
}

uint64_t sub_19B6CC1B0()
{
  uint64_t v0;
  _BOOL4 v2;

  if (sub_19B6B9C44() == 6 || sub_19B6B61A0((_BOOL8)CFSTR("H6")) || sub_19B6B61A0((_BOOL8)CFSTR("H5")))
  {
    v0 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v2 = sub_19B6B61A0((_BOOL8)CFSTR("H4"));
    v0 = MEMORY[0x1E0C9AE40];
    if (!v2)
      v0 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v0;
}

const void *sub_19B6CC220()
{
  return sub_19B6B89E4((const char **)CFSTR("ZApuwHXWV8RCz0iVzMnqLw"), 0);
}

const void *sub_19B6CC230()
{
  return sub_19B6B89E4((const char **)CFSTR("A62OafQ85EJAiiqKn4agtg"), 0);
}

uint64_t sub_19B6CC240()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 6)
    return 0;
  result = sub_19B6B5FE0((_BOOL8)CFSTR("M11"));
  if ((_DWORD)result)
  {
    v11 = 1530338216;
    v10 = xmmword_19B718050;
    v9 = 406601745;
    v8 = xmmword_19B718064;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }
  return result;
}

BOOL sub_19B6CC338()
{
  return sub_19B6B9C44() == 1;
}

const __CFString *sub_19B6CC354()
{
  int v0;
  const __CFString *result;

  v0 = sub_19B6B9C44() - 1;
  result = CFSTR("iPhone");
  switch(v0)
  {
    case 0:
      return result;
    case 1:
      result = CFSTR("iPod");
      break;
    case 2:
      result = CFSTR("iPad");
      break;
    case 3:
      result = (const __CFString *)sub_19B6B89E4((const char **)CFSTR("+VIu65zA5EW4ztayJXvOUg"), 0);
      break;
    case 5:
      result = CFSTR("Watch");
      break;
    case 6:
      result = CFSTR("HomePod");
      break;
    case 7:
      result = CFSTR("Bridge");
      break;
    case 8:
      result = CFSTR("Mac");
      break;
    case 10:
      result = CFSTR("Vision");
      break;
    default:
      result = CFSTR("Unknown");
      break;
  }
  return result;
}

const __CFString *sub_19B6CC404()
{
  const __CFString *v0;
  const __CFString *v1;

  v0 = sub_19B6BDB28();
  v1 = v0;
  if (v0)
    CFRetain(v0);
  return v1;
}

uint64_t sub_19B6CC434()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("brr2lQq9584zVkiuALaADA"), 115);
}

uint64_t sub_19B6CC44C()
{
  return sub_19B6DFA00(0x456E4D74u);
}

CFTypeRef sub_19B6CC458()
{
  return sub_19B6BBC28(0, "IOPMPowerSource", CFSTR("FullyCharged"));
}

CFNumberRef sub_19B6CC470()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("Q2y7EshBFzIifIPKAPVBBA"), 99);
}

uint64_t sub_19B6CC488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 1244490093;
  v13 = xmmword_19B717AD8;
  v12 = 1377801277;
  v11 = xmmword_19B717AEC;
  v8 = MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11);
  v9 = MEMORY[0x1E0C9AE50];
  if (!v8)
    v9 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v9;
}

uint64_t sub_19B6CC530()
{
  return 1;
}

uint64_t sub_19B6CC538()
{
  if (sub_19B6B61A0((_BOOL8)CFSTR("M9"))
    || sub_19B6B61A0((_BOOL8)CFSTR("M10"))
    || sub_19B6B61A0((_BOOL8)CFSTR("H9"))
    || sub_19B6B61A0((_BOOL8)CFSTR("H10")))
  {
    return 0;
  }
  if (sub_19B6B61A0((_BOOL8)CFSTR("H11")) || sub_19B6B61A0((_BOOL8)CFSTR("H12")))
    return 1;
  if (sub_19B6B5FE0((_BOOL8)CFSTR("H13")))
    return 2;
  return 0;
}

const void *sub_19B6CC5D0()
{
  return sub_19B6B89E4((const char **)CFSTR("8S7ydMJ4DlCUF38/hI/fJA"), 0);
}

const __CFString *sub_19B6CC5E0()
{
  unsigned int v2;
  unsigned int v3;

  v3 = 0;
  if (sub_19B6B84A4((const char **)CFSTR("NJsxTSI2WuD+13rxShXX9w"), 5, 5, kCFNumberSInt32Type, &v3) && v3 != 0)
    return CFStringCreateWithFormat(0, 0, CFSTR("%d"), v3);
  if (MGGetBoolAnswer((const char **)CFSTR("XkfGVYlrkBQJgaGabHESJQ")))
    return sub_19B6D76C4((const char **)CFSTR("TXZxlSojLMQyLqusm9aa/g"));
  v2 = sub_19B6D8AF0();
  if (v2 <= 8)
    return *(&off_1E3BD0940 + 2 * v2);
  else
    return CFSTR("unknown");
}

const char *sub_19B6CC68C()
{
  const char *result;

  result = (const char *)sub_19B6C18E0();
  if (result)
    return (const char *)CFStringCreateWithCString(0, result, 0x8000100u);
  return result;
}

uint64_t sub_19B6CC6BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = -38605833;
  v13 = xmmword_19B717BDC;
  v12 = -894965712;
  v11 = xmmword_19B717BF0;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_19B6B9C44() == 6
    || sub_19B6B9C44() == 4)
  {
    v8 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v10 = sub_19B6B9C44();
    v8 = MEMORY[0x1E0C9AE40];
    if (v10 != 3 && sub_19B6B9C44() != 11)
      v8 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v8;
}

uint64_t sub_19B6CC870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v36 = -414334491;
  v35 = xmmword_19B718528;
  v34 = -1509831889;
  v33 = xmmword_19B71853C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v35, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v33)
    || (v32 = 289690957,
        v31 = xmmword_19B718550,
        v30 = 586720268,
        v29 = xmmword_19B718564,
        MGIsDeviceOneOfType((const UInt8 *)&v31, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v29))
    || sub_19B6B9C44() != 6)
  {
    v23 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v28 = 368885834;
    v27 = xmmword_19B718578;
    v26 = -526227167;
    v25 = xmmword_19B71858C;
    v22 = MGIsDeviceOneOfType((const UInt8 *)&v27, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v25);
    v23 = MEMORY[0x1E0C9AE40];
    if (!v22)
      v23 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v23;
}

uint64_t sub_19B6CC9C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = 368885834;
  v13 = xmmword_19B718578;
  v12 = -526227167;
  v11 = xmmword_19B71858C;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_19B6B9C44() == 3)
  {
    v8 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v10 = sub_19B6B9C44();
    v8 = MEMORY[0x1E0C9AE40];
    if (v10 != 4 && sub_19B6B9C44() != 2)
      v8 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v8;
}

BOOL sub_19B6CCAE8()
{
  return sub_19B6B9C44() == 6 && sub_19B6B5FE0((_BOOL8)CFSTR("M11"));
}

const void *sub_19B6CCB18()
{
  return sub_19B6B6DF4(CFSTR("SystemImageID"), 1);
}

BOOL sub_19B6CCB28()
{
  return sub_19B6D92C8(2);
}

uint64_t sub_19B6CCB30()
{
  return sub_19B6E44D4((uint64_t)"IODeviceTree:", (uint64_t)CFSTR("NkQOJZ1xdFk5SV55PFKlIg"), 119, (uint64_t)CFSTR("/cMWdoU/88pcjJ1egxmIYw"), 119);
}

uint64_t sub_19B6CCB58()
{
  _BOOL8 v0;
  const void *v1;
  const void *v2;

  if (MGGetBoolAnswer((const char **)CFSTR("sigsyX/a/CpMjoZnrgwIgg")))
    return 1;
  if (sub_19B6B9C44() == 7)
    return 0;
  if (!sub_19B6B61A0((_BOOL8)CFSTR("H9")))
  {
    v1 = MGGetStringAnswer((const char **)CFSTR("5pYKlGnYYBzGvAlIU8RjEQ"));
    if (v1)
    {
      v2 = v1;
      v0 = CFEqual(v1, CFSTR("s8001")) != 0;
      CFRelease(v2);
      return v0;
    }
    return 0;
  }
  return 1;
}

const void *sub_19B6CCBE0()
{
  return sub_19B6B2C64("IODeviceTree:/product", CFSTR("is3zjHrEdiF6J/boqghy9A"), 109);
}

BOOL sub_19B6CCBF8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("8QNz35Yxm0KqxP1JiE0HIw"), a2);
}

BOOL sub_19B6CCC1C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("8QNz35Yxm0KqxP1JiE0HIw"), 80, a2);
}

uint64_t sub_19B6CCC30()
{
  const __CFString *v0;
  const __CFString *v1;
  _BOOL8 v2;

  v0 = sub_19B6B665C();
  if (!v0)
    return 1;
  v1 = v0;
  v2 = !CFEqual(v0, CFSTR("NonUI"))
    && !CFEqual(v1, CFSTR("VendorNonUI"))
    && !CFEqual(v1, CFSTR("Darwin"))
    && !CFEqual(v1, CFSTR("Darwin Internal"))
    && CFStringHasPrefix(v1, CFSTR("Darwin")) == 0;
  CFRelease(v1);
  return v2;
}

uint64_t sub_19B6CCCD4()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("ND6ZSbBBgMgwtMfh+OL5Wg"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0)
    return result;
  else
    return 0;
}

BOOL sub_19B6CCD18()
{
  return sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("GnhnHyRVCC8LUClgElhKXA"), 101);
}

uint64_t sub_19B6CCD30()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("eW5H/Gwg0uqbMqFot70pYg"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0)
    return result;
  else
    return 0;
}

CFNumberRef sub_19B6CCD74()
{
  return sub_19B6C2250(CFSTR("screen-capture-height"), (const char **)CFSTR("OjzOua0LkOegX7pQdgMksw"));
}

uint64_t sub_19B6CCD88()
{
  return *MEMORY[0x1E0C9AE40];
}

BOOL sub_19B6CCD98()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("supports-lotx"), 0);
}

BOOL sub_19B6CCDB0()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("LL1FDn5UwIi7sIDnL19gxA"), 98);
}

__CFArray *sub_19B6CCDC8()
{
  const __CFAllocator *v0;
  __CFArray *Mutable;
  const __CFData *v2;
  const __CFData *v3;
  CFTypeID v4;
  unint64_t v5;
  NSObject *v6;
  const char *v7;
  const __CFData *v8;
  const __CFData *v9;
  CFTypeID v10;
  unint64_t v11;
  NSObject *v12;
  const char *v13;
  CFIndex v14;
  uint64_t v15;
  NSObject *v16;
  CFMutableDictionaryRef v17;
  __CFDictionary *v18;
  CFNumberRef v19;
  CFNumberRef v20;
  UInt8 buffer[8];
  uint8_t v23[12];
  uint64_t valuePtr;
  int v25;
  __int16 v26;
  int v27;
  uint64_t v28;
  CFRange v29;
  CFRange v30;

  v28 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (!Mutable)
    return Mutable;
  v2 = (const __CFData *)sub_19B6B2C64("IODeviceTree:/product", CFSTR("strict-wake-vendor-id"), 0);
  v3 = v2;
  if (!v2)
  {
    LODWORD(v5) = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_10;
    WORD2(valuePtr) = 0;
    v6 = MEMORY[0x1E0C81028];
    v7 = "kIODeviceTreePlane :/product strict-wake-vendor-id not found";
    goto LABEL_9;
  }
  v4 = CFGetTypeID(v2);
  if (v4 == CFDataGetTypeID())
  {
    v5 = (unint64_t)(int)CFDataGetLength(v3) >> 2;
    goto LABEL_10;
  }
  LODWORD(v5) = 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    WORD2(valuePtr) = 0;
    v6 = MEMORY[0x1E0C81028];
    v7 = "Unexpected type at kIODeviceTreePlane :/product strict-wake-vendor-id";
LABEL_9:
    _os_log_impl(&dword_19B6B1000, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&valuePtr + 4, 2u);
    LODWORD(v5) = 0;
  }
LABEL_10:
  v8 = (const __CFData *)sub_19B6B2C64("IODeviceTree:/product", CFSTR("strict-wake-product-id"), 0);
  v9 = v8;
  if (!v8)
  {
    LODWORD(v11) = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    WORD2(valuePtr) = 0;
    v12 = MEMORY[0x1E0C81028];
    v13 = "kIODeviceTreePlane :/product strict-wake-product-id not found";
LABEL_17:
    _os_log_impl(&dword_19B6B1000, v12, OS_LOG_TYPE_DEFAULT, v13, (uint8_t *)&valuePtr + 4, 2u);
    LODWORD(v11) = 0;
    goto LABEL_18;
  }
  v10 = CFGetTypeID(v8);
  if (v10 != CFDataGetTypeID())
  {
    LODWORD(v11) = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_18;
    WORD2(valuePtr) = 0;
    v12 = MEMORY[0x1E0C81028];
    v13 = "Unexpected type at kIODeviceTreePlane :/product strict-wake-product-id";
    goto LABEL_17;
  }
  v11 = (unint64_t)(int)CFDataGetLength(v9) >> 2;
LABEL_18:
  if ((_DWORD)v5 == (_DWORD)v11)
  {
    if ((int)v5 >= 1)
    {
      v14 = 0;
      v15 = 4 * v5;
      v16 = MEMORY[0x1E0C81028];
      do
      {
        *(_QWORD *)buffer = 0;
        v29.location = v14;
        v29.length = 4;
        CFDataGetBytes(v9, v29, &buffer[4]);
        v30.location = v14;
        v30.length = 4;
        CFDataGetBytes(v3, v30, buffer);
        valuePtr = *(_QWORD *)buffer;
        v17 = CFDictionaryCreateMutable(v0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
        if (v17)
        {
          v18 = v17;
          v19 = CFNumberCreate(0, kCFNumberSInt32Type, (char *)&valuePtr + 4);
          if (v19)
          {
            CFDictionaryAddValue(v18, CFSTR("productID"), v19);
          }
          else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v23 = 0;
            _os_log_impl(&dword_19B6B1000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create product CF Number", v23, 2u);
          }
          v20 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
          if (v20)
          {
            CFDictionaryAddValue(v18, CFSTR("vendorID"), v20);
          }
          else if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v23 = 0;
            _os_log_impl(&dword_19B6B1000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create vendor CF Number", v23, 2u);
          }
          CFArrayAppendValue(Mutable, v18);
          CFRelease(v18);
          if (v20)
            CFRelease(v20);
          if (v19)
            CFRelease(v19);
        }
        else
        {
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)v23 = 0;
            _os_log_impl(&dword_19B6B1000, v16, OS_LOG_TYPE_DEFAULT, "Failed to create the pair dictionary", v23, 2u);
          }
          CFArrayAppendValue(Mutable, 0);
        }
        v14 += 4;
      }
      while (v15 != v14);
    }
  }
  else if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    HIDWORD(valuePtr) = 67109376;
    v25 = v5;
    v26 = 1024;
    v27 = v11;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Array length mismatch! Vendor length %d vs Product length %d", (uint8_t *)&valuePtr + 4, 0xEu);
  }
  if (v3)
    CFRelease(v3);
  if (v9)
    CFRelease(v9);
  return Mutable;
}

uint64_t sub_19B6CD234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v10;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = -38605833;
  v13 = xmmword_19B717BDC;
  v12 = -894965712;
  v11 = xmmword_19B717BF0;
  if ((MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11) & 1) != 0
    || sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 6
    || sub_19B6B9C44() == 3)
  {
    v8 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v10 = sub_19B6B9C44();
    v8 = MEMORY[0x1E0C9AE40];
    if (v10 != 2 && sub_19B6B9C44() != 11)
      v8 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v8;
}

CFTypeRef sub_19B6CD328()
{
  return sub_19B6BBC28(0, "IOPMPowerSource", CFSTR("ExternalChargeCapable"));
}

CFStringRef sub_19B6CD340()
{
  return sub_19B6BC39C("IODeviceTree:/", CFSTR("FQHZ8VqG8mVzDQ+g085l8w"), 116);
}

uint64_t sub_19B6CD358()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 43);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(43, 2);
  return v0();
}

BOOL sub_19B6CD384()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("u3c0R+31Df4SUTHrICQkTg"), 104);
}

CFNumberRef sub_19B6CD39C()
{
  return sub_19B6BC5F4("IODeviceTree:/product/haptics", CFSTR("Mif7940cFpfaXIAHwkYgHQ"), 112);
}

uint64_t sub_19B6CD3B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  __int128 v38;
  int v39;
  __int128 v40;
  int v41;
  __int128 v42;
  int v43;
  __int128 v44;
  int v45;
  __int128 v46;
  int v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 7)
    goto LABEL_10;
  if (sub_19B6B9C44() == 4)
    goto LABEL_10;
  if (sub_19B6B9C44() == 3)
    goto LABEL_10;
  if (sub_19B6B9C44() == 2)
    goto LABEL_10;
  if (sub_19B6B9C44() == 6)
    goto LABEL_10;
  if (sub_19B6B9C44() == 11)
    goto LABEL_10;
  if (sub_19B6B9C44() == 8)
    goto LABEL_10;
  v47 = 28030256;
  v46 = xmmword_19B718208;
  v45 = 1214363620;
  v44 = xmmword_19B71821C;
  v43 = -798153473;
  v42 = xmmword_19B718230;
  v41 = -776721724;
  v40 = xmmword_19B718244;
  v39 = -489993439;
  v38 = xmmword_19B7182A8;
  v37 = 886875686;
  v36 = xmmword_19B7182BC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v46, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v44))
    goto LABEL_10;
  v35 = -1403227947;
  v34 = xmmword_19B718258;
  v33 = 729118884;
  v32 = xmmword_19B71826C;
  v31 = 1046806126;
  v30 = xmmword_19B718280;
  v29 = -188760945;
  v28 = xmmword_19B718294;
  if (MGIsDeviceOneOfType((const UInt8 *)&v34, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v32))
  {
LABEL_10:
    v21 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v27 = -350584140;
    v26 = xmmword_19B7182D0;
    v25 = 368778837;
    v24 = xmmword_19B7182F8;
    v23 = MGIsDeviceOneOfType((const UInt8 *)&v26, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v24);
    v21 = MEMORY[0x1E0C9AE40];
    if (!v23)
      v21 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v21;
}

BOOL sub_19B6CD66C()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("dbYxhQWXkJhjp8uPhoMDvw"), 112);
}

uint64_t sub_19B6CD684()
{
  return 0;
}

CFStringRef sub_19B6CD68C()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("jSDzacs4RYWnWxn142UBLQ"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6CD7A8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("k5lVWbXuiZHLA17KGiVUAA"), a2);
}

BOOL sub_19B6CD7CC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("k5lVWbXuiZHLA17KGiVUAA"), 66, a2);
}

BOOL sub_19B6CD7E0()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("bhPjDx/0UDk9mzia6ksZ+A"), 110);
}

CFDataRef sub_19B6CD7F8()
{
  return sub_19B6DF7A8(0x53414745u);
}

CFDataRef sub_19B6CD804()
{
  _OWORD v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D8520(CFSTR("camera-button-location"), 1, (uint64_t *)v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

BOOL sub_19B6CD854()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("3hD7TZt4FFvCgra7E8PkWw"), 99);
}

BOOL sub_19B6CD86C()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("DCy89X5oErFAps95GX38mQ"), 108);
}

BOOL sub_19B6CD884()
{
  return sub_19B6BACAC("IODeviceTree:/backlight", CFSTR("ZcPQWuQwUJtMR5Oj99uc8w"), 115);
}

uint64_t sub_19B6CD89C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  __int128 v30;
  int v31;
  __int128 v32;
  int v33;
  __int128 v34;
  int v35;
  __int128 v36;
  int v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v37 = -526227167;
  v36 = xmmword_19B71858C;
  v35 = -1509831889;
  v34 = xmmword_19B71853C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v36, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v34)
    || (v33 = 289690957,
        v32 = xmmword_19B718550,
        v31 = 586720268,
        v30 = xmmword_19B718564,
        MGIsDeviceOneOfType((const UInt8 *)&v32, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v30)))
  {
    v15 = MEMORY[0x1E0C9AE40];
  }
  else if (sub_19B6B9C44() == 6)
  {
    v29 = 368885834;
    v28 = xmmword_19B718578;
    v27 = -414334491;
    v26 = xmmword_19B718528;
    v24 = MGIsDeviceOneOfType((const UInt8 *)&v28, v17, v18, v19, v20, v21, v22, v23, (uint64_t)&v26);
    v15 = MEMORY[0x1E0C9AE40];
    if (!v24)
      v15 = MEMORY[0x1E0C9AE50];
  }
  else
  {
    v25 = sub_19B6B9C44();
    v15 = MEMORY[0x1E0C9AE50];
    if (v25 == 7)
      v15 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v15;
}

uint64_t sub_19B6CDA14()
{
  return sub_19B6E4448((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("M2qC9+75568xA1E3I+r+dg"), 115, (uint64_t)CFSTR("lFFadhW8h/hfpcu601hyqg"), 104);
}

BOOL sub_19B6CDA3C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("ch7KBY7aSsznfICVzjFldw"), 101);
}

CFStringRef sub_19B6CDA54()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("8QNz35Yxm0KqxP1JiE0HIw"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6CDB70(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("d27R2IjPvpwp+MX/kUbJ2w"), a2);
}

BOOL sub_19B6CDB94(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("d27R2IjPvpwp+MX/kUbJ2w"), 80, a2);
}

uint64_t sub_19B6CDBA8()
{
  int v0;
  uint64_t v1;

  v0 = sub_19B6BAD7C("IODeviceTree:/product", CFSTR("multiuser-sessions"), 0, 0, 1);
  v1 = MEMORY[0x1E0C9AE40];
  if (v0)
    v1 = MEMORY[0x1E0C9AE50];
  return *(_QWORD *)v1;
}

uint64_t sub_19B6CDBF4()
{
  return sub_19B6D94D8("DisplayPort");
}

uint64_t sub_19B6CDC00()
{
  int v0;
  uint64_t v1;

  v0 = sub_19B6B9C44();
  v1 = MEMORY[0x1E0C9AE50];
  if (v0 != 1)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

BOOL sub_19B6CDC30()
{
  return sub_19B6B9C44() == 6 && sub_19B6B5FE0((_BOOL8)CFSTR("M11"));
}

BOOL sub_19B6CDC60()
{
  return sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("tOLVnZop4m/g5/iuC7zlUw"), 101);
}

uint64_t sub_19B6CDC78()
{
  return 0;
}

__CFArray *sub_19B6CDC84()
{
  return sub_19B6DCE30(CFSTR("decoding"));
}

CFDataRef sub_19B6CDC90()
{
  return sub_19B6DD058("AppleMobileApNonce", 0xCAu, 0, 0, 8uLL);
}

CFTypeRef sub_19B6CDCAC()
{
  return sub_19B6D74D4(CFSTR("FrontIRCameraModuleSerialNumString"));
}

BOOL sub_19B6CDCB8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("2kuITg6XPwXl8zbpx+hoCw"), a2);
}

BOOL sub_19B6CDCDC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("2kuITg6XPwXl8zbpx+hoCw"), 70, a2);
}

const void *sub_19B6CDCF0()
{
  return sub_19B6B89E4((const char **)CFSTR("E9a3UzlfYjWEB9viQCHNAA"), 0);
}

CFStringRef sub_19B6CDD00()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("5MXFoiW2zgxfIbaaTb/wvA"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6CDE1C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("BQwz+BT9b5mS7OPh2WGD6A"), a2);
}

BOOL sub_19B6CDE40(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("BQwz+BT9b5mS7OPh2WGD6A"), 83, a2);
}

CFNumberRef sub_19B6CDE54()
{
  CFNumberRef result;
  int valuePtr;

  valuePtr = 0;
  result = sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("front-max-burst-length"), 0);
  if (!result)
  {
    if (MGGetBoolAnswer((const char **)CFSTR("plaYa8bKJaAF5Erc5nvZ+g"))
      || MGGetBoolAnswer((const char **)CFSTR("Ty5/C8UDfdjcdR853kulmA")))
    {
      valuePtr = 999;
    }
    return CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  }
  return result;
}

uint64_t sub_19B6CDEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B61A0((_BOOL8)CFSTR("H6"))
    || sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 6
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 7
    || sub_19B6B61A0((_BOOL8)CFSTR("H8"))
    || sub_19B6B61A0((_BOOL8)CFSTR("H7"))
    || sub_19B6B61A0((_BOOL8)CFSTR("H9")))
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 414393924;
    v12 = xmmword_19B71812C;
    v11 = 897736383;
    v10 = xmmword_19B718140;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

BOOL sub_19B6CDFE8()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("yPSUYPhrVLHnvX0TUugiwg"), 114);
}

BOOL sub_19B6CE000()
{
  return sub_19B6B9C44() != 4;
}

CFNumberRef sub_19B6CE01C()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("qAAQUPLjf+Hl4UM3WY2qgw"), 102);
}

CFTypeRef sub_19B6CE034()
{
  uint64_t v0;
  CFTypeID TypeID;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const void **v4;
  const void *Value;
  CFTypeRef v6;
  CFTypeRef *v7;
  uint64_t v8;
  CFTypeID v9;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint8_t v39[2];
  uint8_t buf[16];
  __int16 v41;
  int v42;

  if (!MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg")))
  {
    v7 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 65);
    if (!v7)
      v7 = (CFTypeRef *)sub_19B6BBD84(65, 1);
    v6 = *v7;
    if (*v7)
    {
      CFRetain(*v7);
      return v6;
    }
    v11 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v11, 4845, (uint64_t)CFSTR("no Postponement status available"), v12, v13, v14, v15, v16, v38);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v38 = 0;
      v17 = MEMORY[0x1E0C81028];
      v18 = "no Postponement status available";
      v19 = (uint8_t *)&v38;
LABEL_28:
      _os_log_impl(&dword_19B6B1000, v17, OS_LOG_TYPE_DEFAULT, v18, v19, 2u);
    }
    return 0;
  }
  v42 = -1;
  if (sub_19B6B84A4((const char **)CFSTR("XQBHOWjPt2P+uNqlLm1P7A"), 5, 5, kCFNumberSInt32Type, &v42) && v42 >= 2)
  {
    v0 = *((_QWORD *)off_1EE3FD5A0 + 16);
    if (!v0)
      v0 = sub_19B6BBD84(16, 2);
    TypeID = CFDictionaryGetTypeID();
    v2 = (const __CFDictionary *)sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyPostponementStatus", v0, TypeID);
    if (v2)
    {
      v3 = v2;
      v4 = (const void **)*((_QWORD *)off_1EE3FD5A0 + 64);
      if (!v4)
        v4 = (const void **)sub_19B6BBD84(64, 1);
      Value = CFDictionaryGetValue(v3, *v4);
      v6 = Value;
      if (Value)
      {
        CFRetain(Value);
      }
      else
      {
        v26 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
        _MGLog((uint64_t)v26, 4833, (uint64_t)CFSTR("No status in postponement info"), v27, v28, v29, v30, v31, v38);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No status in postponement info", buf, 2u);
        }
      }
      CFRelease(v3);
      return v6;
    }
    v20 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v20, 4829, (uint64_t)CFSTR("_CTServerConnectionCopyPostponementStatus returned NULL"), v21, v22, v23, v24, v25, v38);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v17 = MEMORY[0x1E0C81028];
      v18 = "_CTServerConnectionCopyPostponementStatus returned NULL";
      v19 = (uint8_t *)&v41;
      goto LABEL_28;
    }
    return 0;
  }
  v8 = *((_QWORD *)off_1EE3FD5A0 + 22);
  if (!v8)
    v8 = sub_19B6BBD84(22, 2);
  v9 = CFStringGetTypeID();
  v6 = sub_19B6BD1F0((uint64_t)"_CTServerConnectionGetSIMStatus", v8, v9);
  if (!v6)
  {
    v32 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v32, 4839, (uint64_t)CFSTR("no sim status available"), v33, v34, v35, v36, v37, v38);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v39 = 0;
      v17 = MEMORY[0x1E0C81028];
      v18 = "no sim status available";
      v19 = v39;
      goto LABEL_28;
    }
    return 0;
  }
  return v6;
}

BOOL sub_19B6CE2F8()
{
  return sub_19B6BACD0((uint64_t)CFSTR("NoWiFi"), CFSTR("RegionalBehaviorNoWiFi"));
}

BOOL sub_19B6CE30C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("RN4AimpWqqD2JZCB67qtvQ"), 99);
}

BOOL sub_19B6CE324()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/sep", CFSTR("jw9WzWmThYzveJbsV+GZMA"), 115);
}

CFDataRef sub_19B6CE33C()
{
  return sub_19B6DD058("AppleSEPManager", 0xFu, 0, 0, 0x14uLL);
}

CFNumberRef sub_19B6CE358()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("Q/BI7GKNZY13TpxbqA8nhQ"), 114);
}

CFStringRef sub_19B6CE370()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("eZS2J+wspyGxqNYZeZ/sbA"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6CE48C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("gI6iODv8MZuiP0IA+efJCw"), a2);
}

BOOL sub_19B6CE4B0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("gI6iODv8MZuiP0IA+efJCw"), 87, a2);
}

uint64_t sub_19B6CE4C4()
{
  return 0;
}

uint64_t sub_19B6CE4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 7)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    v8 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v8)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

uint64_t sub_19B6CE58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v10 = -1431778695;
  v9 = xmmword_19B717D94;
  if (MGIsDeviceOneOfType((const UInt8 *)&v9, a2, a3, a4, a5, a6, a7, a8, 0))
    return *MEMORY[0x1E0C9AE50];
  else
    return sub_19B6D1DDC();
}

BOOL sub_19B6CE610()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("vQg8hRTy1PC2j9L+8Jd+vg"), 115);
}

CFNumberRef sub_19B6CE628()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("e9aZViEIJ/riA4pRfg1ihg"), 100);
}

CFNumberRef sub_19B6CE640()
{
  const __CFData *v0;
  const __CFData *v1;
  const UInt8 *BytePtr;
  const UInt8 *v3;
  CFTypeID v4;
  int v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  int v9;
  int valuePtr;

  v9 = 0;
  valuePtr = -1;
  v0 = (const __CFData *)sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("marketing-software-behavior"), 0);
  if (!v0)
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v9);
  v1 = v0;
  BytePtr = CFDataGetBytePtr(v0);
  if (BytePtr && (v3 = BytePtr, v4 = CFGetTypeID(v1), v4 == CFDataGetTypeID()) && CFDataGetLength(v1) >= 4)
  {
    v5 = v3[2];
    if ((v5 - 1) >= 2)
      v5 = 0;
    valuePtr = v5;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    if (v7)
      goto LABEL_11;
  }
  else
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  v7 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9);
LABEL_11:
  CFRelease(v1);
  return v7;
}

const void *sub_19B6CE74C()
{
  return sub_19B6B89E4((const char **)CFSTR("QVwCp3Lu9RLnxw7LO9DBfQ"), 0);
}

uint64_t sub_19B6CE75C()
{
  return *MEMORY[0x1E0C9AE40];
}

uint64_t sub_19B6CE76C()
{
  uint64_t v0;

  if (MGGetBoolAnswer((const char **)CFSTR("mtHZd1H8XJ2DMVtNVUSkag")) && sub_19B6B50E0(CFSTR("CH")))
    v0 = MEMORY[0x1E0C9AE50];
  else
    v0 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v0;
}

uint64_t sub_19B6CE7B4()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("mH5IrpyGkVtmgdqs68KHRg"), 103);
}

uint64_t sub_19B6CE7CC()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("ND6ZSbBBgMgwtMfh+OL5Wg"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 1)
    return result;
  else
    return 0;
}

uint64_t sub_19B6CE810()
{
  uint64_t v0;

  if (os_variant_is_darwinos()
    && (sub_19B6B5AAC() || sub_19B6BACAC("IODeviceTree:/product", CFSTR("analytics-opt-in"), 0)))
  {
    v0 = MEMORY[0x1E0C9AE50];
  }
  else
  {
    v0 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v0;
}

CFStringRef sub_19B6CE86C()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("5iilxso47rYJZGnXklkYYg"), 102);
}

const char *sub_19B6CE884()
{
  const char *result;

  result = (const char *)sub_19B6BC39C("IODeviceTree:/product", CFSTR("thinning-product-type"), 0);
  if (!result)
    return sub_19B6BCBB4();
  return result;
}

CFNumberRef sub_19B6CE8B8()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("86GizkmSK+IxgCtUMOp2NA"), 102);
}

const __CFString *sub_19B6CE8D0()
{
  const __CFData *v0;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("nFRqKto/RuQAV1P+0/qkBA"), 0);
  return sub_19B6BB0B8(v0);
}

BOOL sub_19B6CE8F0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("0KHhsv2F/BGA9AppFljmKg"), a2);
}

BOOL sub_19B6CE914(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("0KHhsv2F/BGA9AppFljmKg"), 65, a2);
}

CFNumberRef sub_19B6CE928()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("+VTSncKV5ykgl9KAsuHFFg"), 115);
}

BOOL sub_19B6CE940()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("bbyFCcrPE+k6ZXIVbXSFUw"), 117);
}

CFNumberRef sub_19B6CE96C()
{
  uint64_t v0;
  uint64_t v1;
  const __CFAllocator *v2;
  uint64_t *p_valuePtr;
  uint64_t v5;
  uint64_t valuePtr;
  uint64_t v7;
  uint64_t v8;

  v8 = 0x1A80000000;
  valuePtr = 0x400000000;
  v7 = 0xC00000000;
  v0 = sub_19B6BA524();
  v1 = v0;
  if (v0 < 0x2540BE4001)
  {
    if (v0 < 0xEE6B28001)
    {
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (v1 < 0x773594001)
        p_valuePtr = &valuePtr;
      else
        p_valuePtr = &v7;
    }
    else
    {
      v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      p_valuePtr = &v8;
    }
  }
  else
  {
    v5 = v0 - 0x380000000;
    v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    p_valuePtr = &v5;
  }
  return CFNumberCreate(v2, kCFNumberSInt64Type, p_valuePtr);
}

__CFArray *sub_19B6CEA38()
{
  __CFArray *Mutable;
  const void *v1;
  const void *v2;
  __CFArray *v3;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v1 = sub_19B6B89E4((const char **)CFSTR("HMpTbnbcAb+mQDi8O71h6Q"), 0);
  if (!v1)
  {
    v3 = 0;
    if (!Mutable)
      return v3;
    goto LABEL_3;
  }
  v2 = v1;
  CFArrayAppendValue(Mutable, v1);
  v3 = sub_19B6D9890(Mutable, 3u);
  CFRelease(v2);
  if (Mutable)
LABEL_3:
    CFRelease(Mutable);
  return v3;
}

BOOL sub_19B6CEAC8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("niQFEBBY7JaauAIosAyQQg"), a2);
}

BOOL sub_19B6CEAEC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("niQFEBBY7JaauAIosAyQQg"), 77, a2);
}

__CFArray *sub_19B6CEB00()
{
  __CFArray *Mutable;
  const void *v1;
  const void *v2;
  __CFArray *v3;

  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v1 = sub_19B6B89E4((const char **)CFSTR("r5pA2qLgR86BQKwgMjPWzg"), 0);
  if (!v1)
  {
    v3 = 0;
    if (!Mutable)
      return v3;
    goto LABEL_3;
  }
  v2 = v1;
  CFArrayAppendValue(Mutable, v1);
  v3 = sub_19B6D9890(Mutable, 4u);
  CFRelease(v2);
  if (Mutable)
LABEL_3:
    CFRelease(Mutable);
  return v3;
}

BOOL sub_19B6CEB90(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("juE6wCsjVG4bfAhgHcUVcQ"), a2);
}

BOOL sub_19B6CEBB4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("juE6wCsjVG4bfAhgHcUVcQ"), 77, a2);
}

CFNumberRef sub_19B6CEBC8()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("b5K3g59Aj+Cc982n9FQv8A"), 100);
}

BOOL sub_19B6CEBE0()
{
  _BOOL8 v0;

  if (sub_19B6B9C44() != 6)
    return 0;
  v0 = !sub_19B6BAC78("IODeviceTree:/product/haptics", CFSTR("pre-warm-disabled"), 0)
    || !sub_19B6BACAC("IODeviceTree:/product/haptics", CFSTR("pre-warm-disabled"), 0);
  CFRelease(CFSTR("pre-warm-disabled"));
  return v0;
}

uint64_t sub_19B6CEC5C()
{
  unsigned int v0;
  uint64_t v1;

  v0 = sub_19B6DA878();
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

BOOL sub_19B6CEC8C()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("AOIh1l3cIyDXlP4KB/084A"), 105);
}

BOOL sub_19B6CECA4()
{
  return !sub_19B6BAC78("IODeviceTree:/product/maps", CFSTR("pxqIJ789zCoOILWO6cQ52Q"), 110);
}

uint64_t sub_19B6CECD0()
{
  return 1;
}

BOOL sub_19B6CECD8()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/aop2", CFSTR("hh/NoWpEoq1VF4lGDdPUpw"), 114);
}

uint64_t sub_19B6CECF0()
{
  uint64_t v0;

  if (!sub_19B6B5FE0((_BOOL8)CFSTR("H13")))
    return 0;
  if (sub_19B6B3038((_BOOL8)CFSTR("t8103"), 0)
    || sub_19B6B3038((_BOOL8)CFSTR("t6000"), 0)
    || sub_19B6B3038((_BOOL8)CFSTR("t6001"), 0))
  {
    return 1;
  }
  v0 = 1;
  if (!sub_19B6B3038((_BOOL8)CFSTR("t6002"), 0))
  {
    if (sub_19B6B3038((_BOOL8)CFSTR("t8110"), 0))
      return 1;
    else
      return 2;
  }
  return v0;
}

uint64_t sub_19B6CED98()
{
  return 0;
}

BOOL sub_19B6CEDA0()
{
  uint64_t (*v0)(_QWORD, _QWORD);
  const __CFAllocator *v1;
  uint64_t v2;
  const void *v3;
  uint64_t (*v4)(const void *);
  const __CFArray *v5;
  const __CFArray *v6;
  uint64_t (*v7)(const void *, _QWORD);
  const void *ValueAtIndex;
  _QWORD *v9;
  const __CFArray *v10;
  CFNumberRef v11;
  _BOOL8 v12;
  int valuePtr;
  CFRange v15;

  valuePtr = 69;
  v0 = (uint64_t (*)(_QWORD, _QWORD))*((_QWORD *)off_1EE3FD5A0 + 100);
  if (!v0)
    v0 = (uint64_t (*)(_QWORD, _QWORD))sub_19B6BBD84(100, 2);
  v1 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v2 = v0(*MEMORY[0x1E0C9AE00], 0);
  if (!v2)
    return 0;
  v3 = (const void *)v2;
  v4 = (uint64_t (*)(const void *))*((_QWORD *)off_1EE3FD5A0 + 99);
  if (!v4)
    v4 = (uint64_t (*)(const void *))sub_19B6BBD84(99, 2);
  v5 = (const __CFArray *)v4(v3);
  if (!v5)
  {
    CFRelease(v3);
    return 0;
  }
  v6 = v5;
  if (!CFArrayGetCount(v5))
  {
    v10 = 0;
LABEL_18:
    v11 = 0;
    goto LABEL_19;
  }
  v7 = (uint64_t (*)(const void *, _QWORD))*((_QWORD *)off_1EE3FD5A0 + 98);
  if (!v7)
    v7 = (uint64_t (*)(const void *, _QWORD))sub_19B6BBD84(98, 2);
  ValueAtIndex = CFArrayGetValueAtIndex(v6, 0);
  v9 = (_QWORD *)*((_QWORD *)off_1EE3FD5A0 + 103);
  if (!v9)
    v9 = (_QWORD *)sub_19B6BBD84(103, 1);
  v10 = (const __CFArray *)v7(ValueAtIndex, *v9);
  if (!v10)
    goto LABEL_18;
  v11 = CFNumberCreate(v1, kCFNumberSInt32Type, &valuePtr);
  if (!v11)
  {
LABEL_19:
    v12 = 0;
    goto LABEL_20;
  }
  v15.length = CFArrayGetCount(v10);
  v15.location = 0;
  v12 = CFArrayContainsValue(v10, v15, v11) != 0;
LABEL_20:
  CFRelease(v3);
  CFRelease(v6);
  if (v10)
    CFRelease(v10);
  if (v11)
    CFRelease(v11);
  return v12;
}

BOOL sub_19B6CEF2C()
{
  CFPropertyListRef v0;
  CFPropertyListRef v1;
  CFPropertyListRef v2;

  v0 = sub_19B6C06D8(CFSTR("com.apple.radios.plist"), CFSTR("AirplaneMode"));
  v1 = v0;
  v2 = (CFPropertyListRef)*MEMORY[0x1E0C9AE50];
  if (v0)
    CFRelease(v0);
  return v1 == v2;
}

CFTypeRef sub_19B6CEF7C()
{
  return sub_19B6BBC28(1, "compass", CFSTR("compass-calibration"));
}

BOOL sub_19B6CEF94(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("qb//mYg6KeTmjv8w4ZAMIg"), a2);
}

BOOL sub_19B6CEFB8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("qb//mYg6KeTmjv8w4ZAMIg"), 67, a2);
}

const void *sub_19B6CEFCC()
{
  if (MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg")))
    return sub_19B6B2C64("IODeviceTree:/baseband", CFSTR("function-bb_ap_time_sync"), 0);
  else
    return (const void *)sub_19B6E4558((uint64_t)"IODeviceTree:", (uint64_t)CFSTR("gps"), 0, (uint64_t)CFSTR("function-gps_time-mark"), 0);
}

BOOL sub_19B6CF028()
{
  return sub_19B6B9C44() != 4;
}

BOOL sub_19B6CF044()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("gk8sn5Vi0s088gEvssfbOg"), 102);
}

CFNumberRef sub_19B6CF05C()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("UYZtXbMcIyMRZQ9pjDxRvA"), 117);
}

CFStringRef sub_19B6CF074()
{
  return sub_19B6BC39C("IODeviceTree:/", CFSTR("Fam17Ufz3CiHdZPcma0AeQ"), 114);
}

CFStringRef sub_19B6CF08C()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("pdFo85PUvIiT4FjAT6Amcw"), 98);
}

uint64_t sub_19B6CF0A4()
{
  return 1;
}

uint64_t sub_19B6CF0AC()
{
  uint64_t v0;
  CFMutableDictionaryRef v1;
  uint64_t v2;
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  uint8_t v14[16];
  _QWORD v15[6];
  _QWORD v16[6];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;

  v21 = 0;
  v22 = &v21;
  v23 = 0x2000000000;
  v24 = 0;
  v17 = 0;
  v18 = &v17;
  v19 = 0x2000000000;
  v20 = 0;
  v0 = 0;
  if ((sub_19B6B5FA0() & 1) != 0)
    goto LABEL_17;
  v1 = IOServiceMatching("AppleOLYHAL");
  CFRetain(v1);
  v2 = MEMORY[0x1E0C809B0];
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 0x40000000;
  v16[2] = sub_19B6D9A84;
  v16[3] = &unk_1E3BD0CA0;
  v16[4] = &v17;
  v16[5] = &v21;
  sub_19B6DBDAC(v1, (uint64_t)v16);
  if (!*((_BYTE *)v18 + 24))
  {
    CFRetain(v1);
    v15[0] = v2;
    v15[1] = 0x40000000;
    v15[2] = sub_19B6D9B00;
    v15[3] = &unk_1E3BD0CC8;
    v15[4] = &v17;
    v15[5] = &v21;
    sub_19B6DC768((uint64_t)v1, 5, (uint64_t)v15, 0);
  }
  if (!v22[3])
  {
    v3 = *((unsigned __int8 *)v18 + 24);
    v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v4)
      v10 = v4 + 1;
    else
      v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    if (v3)
    {
      _MGLog((uint64_t)v10, 3800, (uint64_t)CFSTR("failed to fetch wifi vendor (no vendor-id)"), v5, v6, v7, v8, v9, v14[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v14 = 0;
        v11 = MEMORY[0x1E0C81028];
        v12 = "failed to fetch wifi vendor (no vendor-id)";
LABEL_13:
        _os_log_impl(&dword_19B6B1000, v11, OS_LOG_TYPE_DEFAULT, v12, v14, 2u);
      }
    }
    else
    {
      _MGLog((uint64_t)v10, 3802, (uint64_t)CFSTR("failed to fetch wifi vendor (no AppleOLYHAL node)"), v5, v6, v7, v8, v9, v14[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v14 = 0;
        v11 = MEMORY[0x1E0C81028];
        v12 = "failed to fetch wifi vendor (no AppleOLYHAL node)";
        goto LABEL_13;
      }
    }
  }
  if (v1)
    CFRelease(v1);
  v0 = v22[3];
LABEL_17:
  _Block_object_dispose(&v17, 8);
  _Block_object_dispose(&v21, 8);
  return v0;
}

CFNumberRef sub_19B6CF2A8()
{
  const __CFData *v0;
  const __CFData *v1;
  const UInt8 *BytePtr;
  const UInt8 *v3;
  CFTypeID v4;
  int v5;
  const __CFAllocator *v6;
  CFNumberRef v7;
  int v9;
  int valuePtr;

  v9 = 0;
  valuePtr = -1;
  v0 = (const __CFData *)sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("marketing-software-behavior"), 0);
  if (!v0)
    return CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &v9);
  v1 = v0;
  BytePtr = CFDataGetBytePtr(v0);
  if (BytePtr && (v3 = BytePtr, v4 = CFGetTypeID(v1), v4 == CFDataGetTypeID()) && CFDataGetLength(v1) >= 4)
  {
    v5 = v3[3];
    if ((v5 - 1) >= 2)
      v5 = 0;
    valuePtr = v5;
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    v7 = CFNumberCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], kCFNumberSInt32Type, &valuePtr);
    if (v7)
      goto LABEL_11;
  }
  else
  {
    v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  }
  v7 = CFNumberCreate(v6, kCFNumberSInt32Type, &v9);
LABEL_11:
  CFRelease(v1);
  return v7;
}

BOOL sub_19B6CF3B4()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("h9v96tCehBWUil/aJ7UrcA"), 117);
}

uint64_t sub_19B6CF3CC()
{
  return sub_19B6E44D4((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("4k6Wv56SWfITjzet+hIHMQ"), 109, (uint64_t)CFSTR("8kcKPCGGyCpf66MMl5TVkA"), 109);
}

CFNumberRef sub_19B6CF3F0()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("Q4b8YIwPgnznT5hs4qXjaA"), 114);
}

__CFArray *sub_19B6CF408()
{
  return sub_19B6DCE30(CFSTR("encoding"));
}

BOOL sub_19B6CF414()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("CUMH6bG4DFnu7ZREp5YkUQ"), 106);
}

uint64_t sub_19B6CF42C()
{
  return 1;
}

BOOL sub_19B6CF434()
{
  return sub_19B6BAC78("IODeviceTree:/product/audio", CFSTR("i6wlxJoKNXBiVXJHJ1EHBg"), 115);
}

BOOL sub_19B6CF44C()
{
  _BOOL8 result;
  const char *v1;
  char *v2;
  int *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v10;
  int *v11;
  char *v12;
  size_t v13;
  int v14;
  uint8_t buf[4];
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v13 = 4;
  if (sysctlbyname("hw.cpu64bit_capable", &v14, &v13, 0, 0) != -1)
    return v14 != 0;
  v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2)
    v1 = v2 + 1;
  v3 = __error();
  v4 = strerror(*v3);
  _MGLog((uint64_t)v1, 1393, (uint64_t)CFSTR("sysctlbyname: %s"), v5, v6, v7, v8, v9, v4);
  v10 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v10)
  {
    v11 = __error();
    v12 = strerror(*v11);
    *(_DWORD *)buf = 136315138;
    v16 = v12;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "sysctlbyname: %s", buf, 0xCu);
    return 0;
  }
  return result;
}

CFTypeRef sub_19B6CF57C()
{
  return sub_19B6BBC28(1, "baseband", CFSTR("region-sku"));
}

BOOL sub_19B6CF594()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/isp", CFSTR("IFHQSJ65DoElWQl/+eCfNQ"), 102);
}

CFNumberRef sub_19B6CF5AC()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("I83EgnDEGxinSKU4QAykmA"), 114);
}

CFTypeRef sub_19B6CF5C4()
{
  return sub_19B6BBC28(0, "IOPMPowerSource", CFSTR("Serial"));
}

BOOL sub_19B6CF5DC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("DcQNvnO5Uhpc1jjGIrzyng"), a2);
}

BOOL sub_19B6CF600(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("DcQNvnO5Uhpc1jjGIrzyng"), 66, a2);
}

uint64_t sub_19B6CF614(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v14 = -337121064;
  v13 = xmmword_19B717B00;
  v12 = 450980336;
  v11 = xmmword_19B717B14;
  v8 = MGIsDeviceOneOfType((const UInt8 *)&v13, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v11);
  v9 = MEMORY[0x1E0C9AE50];
  if (!v8)
    v9 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v9;
}

uint64_t sub_19B6CF6BC()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 36);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(36, 2);
  return v0();
}

BOOL sub_19B6CF6E8()
{
  return *MEMORY[0x1E0C9AE50] != 0;
}

const __CFString *sub_19B6CF700()
{
  return CFSTR("Non-Mac");
}

uint64_t sub_19B6CF70C()
{
  return 0;
}

unint64_t sub_19B6CF714()
{
  return (unint64_t)sub_19B6C073C() >> 32;
}

uint64_t sub_19B6CF72C()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
  {
    if (sub_19B6B9C44() == 6)
    {
      result = sub_19B6B5FE0((_BOOL8)CFSTR("M11"));
      if ((_DWORD)result)
      {
        v11 = 1530338216;
        v10 = xmmword_19B718050;
        v9 = 406601745;
        v8 = xmmword_19B718064;
        return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

CFNumberRef sub_19B6CF854()
{
  return sub_19B6BC5F4("IODeviceTree:/chosen", CFSTR("F6wqOqCR9tpYWyB1taxxnw"), 98);
}

uint64_t sub_19B6CF86C()
{
  CFTypeRef v0;
  const void *v1;
  CFTypeID TypeID;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  uint32_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  mach_port_t v27;
  const __CFDictionary *v28;
  io_service_t MatchingService;
  uint64_t result;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  _BOOL4 v38;
  char v39;
  char v40;
  uint8_t buf[4];
  const void *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v0 = sub_19B6BBC28(0, "IOPMPowerSource", CFSTR("BatteryInstalled"));
  if (v0)
  {
    v1 = v0;
    TypeID = CFBooleanGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      if (CFBooleanGetValue((CFBooleanRef)v1))
      {
        CFRelease(v1);
        return 1;
      }
      v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v20)
        v26 = v20 + 1;
      else
        v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v26, 2980, (uint64_t)CFSTR("BatteryInstalledKey: false"), v21, v22, v23, v24, v25, v39);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_21;
      *(_WORD *)buf = 0;
      v17 = MEMORY[0x1E0C81028];
      v18 = "BatteryInstalledKey: false";
      v19 = 2;
    }
    else
    {
      v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v10)
        v16 = v10 + 1;
      else
        v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v16, 2983, (uint64_t)CFSTR("Unsupported type %@ from copyIORegistryServiceProperty BatteryInstalledKey"), v11, v12, v13, v14, v15, (char)v1);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_21;
      *(_DWORD *)buf = 138412290;
      v42 = v1;
      v17 = MEMORY[0x1E0C81028];
      v18 = "Unsupported type %@ from copyIORegistryServiceProperty BatteryInstalledKey";
      v19 = 12;
    }
    _os_log_impl(&dword_19B6B1000, v17, OS_LOG_TYPE_DEFAULT, v18, buf, v19);
LABEL_21:
    CFRelease(v1);
    goto LABEL_22;
  }
  v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3)
    v9 = v3 + 1;
  else
    v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v9, 2987, (uint64_t)CFSTR("No PowerSource service property BatteryInstalledKey"), v4, v5, v6, v7, v8, v39);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No PowerSource service property BatteryInstalledKey", buf, 2u);
  }
LABEL_22:
  v27 = *MEMORY[0x1E0CBBAA8];
  v28 = IOServiceMatching("AppleHDQGasGaugeControl");
  MatchingService = IOServiceGetMatchingService(v27, v28);
  if (MatchingService)
  {
    IOObjectRelease(MatchingService);
    return 1;
  }
  v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v31)
    v37 = v31 + 1;
  else
    v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v37, 2997, (uint64_t)CFSTR("No service matching AppleHDQGasGaugeControl"), v32, v33, v34, v35, v36, v40);
  v38 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v38)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No service matching AppleHDQGasGaugeControl", buf, 2u);
    return 0;
  }
  return result;
}

BOOL sub_19B6CFB14()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("IvdL59ITgJvhb5ptpLbqRg"), 114);
}

uint64_t sub_19B6CFB2C()
{
  return 1;
}

BOOL sub_19B6CFB34(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("TF31PAB6aO8KAbPyNKSxKA"), 85, a2);
}

uint64_t sub_19B6CFB48()
{
  const __CFData *v0;
  uint64_t v1;

  v0 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("housing-color"), 0);
  v1 = sub_19B6DFB40(v0);
  if (v0)
    CFRelease(v0);
  return v1;
}

const void *sub_19B6CFB94()
{
  return sub_19B6B2C64("IODeviceTree:/product", CFSTR("lOIgg/0YE73mNKAiUbUiWQ"), 114);
}

BOOL sub_19B6CFBAC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("PxEDp0oOasJ92F/V7YBa8A"), a2);
}

BOOL sub_19B6CFBD0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("PxEDp0oOasJ92F/V7YBa8A"), 82, a2);
}

BOOL sub_19B6CFBE4()
{
  const __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v0 = sub_19B6B665C();
  v7 = sub_19B6B5F40((_BOOL8)v0, CFSTR("Desense"), v1, v2, v3, v4, v5, v6, 0);
  if (v0)
    CFRelease(v0);
  return v7;
}

CFStringRef sub_19B6CFC30()
{
  return sub_19B6BC39C("IODeviceTree:/", CFSTR("NsIeRLGugrogpTZiayi1VA"), 99);
}

CFStringRef sub_19B6CFC48()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("HzddeW2/HtdBNAc5tsFtDg"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6CFD64(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("8bOgXKgqoLvqV/XeSomAfA"), a2);
}

BOOL sub_19B6CFD88(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("8bOgXKgqoLvqV/XeSomAfA"), 83, a2);
}

CFTypeRef sub_19B6CFD9C()
{
  _BOOL4 v0;
  CFTypeRef result;
  uint64_t v2;
  CFTypeID TypeID;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint8_t v11[12];
  int v12;

  if (!MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg")))
    return 0;
  v12 = -1;
  v0 = sub_19B6B84A4((const char **)CFSTR("XQBHOWjPt2P+uNqlLm1P7A"), 5, 5, kCFNumberSInt32Type, &v12);
  result = 0;
  if (v0 && v12 >= 2)
  {
    v2 = *((_QWORD *)off_1EE3FD5A0 + 16);
    if (!v2)
      v2 = sub_19B6BBD84(16, 2);
    TypeID = CFDictionaryGetTypeID();
    result = sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyPostponementStatus", v2, TypeID);
    if (!result)
    {
      v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v4)
        v10 = v4 + 1;
      else
        v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v10, 4862, (uint64_t)CFSTR("_CTServerConnectionCopyPostponementStatus returned NULL"), v5, v6, v7, v8, v9, v11[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v11 = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "_CTServerConnectionCopyPostponementStatus returned NULL", v11, 2u);
      }
      return 0;
    }
  }
  return result;
}

BOOL sub_19B6CFEB4()
{
  return sub_19B6B9C44() == 1
      && sub_19B6BACAC("IODeviceTree:/product", CFSTR("supports-lotx"), 0)
      && sub_19B6D9644();
}

CFTypeRef sub_19B6CFEF8()
{
  return sub_19B6D74D4(CFSTR("BackCameraModuleSerialNumString"));
}

BOOL sub_19B6CFF04(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("nWFV2qG2TjSuH7vZFCdi4w"), a2);
}

BOOL sub_19B6CFF28(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("nWFV2qG2TjSuH7vZFCdi4w"), 82, a2);
}

CFTypeRef sub_19B6CFF3C()
{
  return sub_19B6BBC28(0, "AppleEmbeddedNVMeController", CFSTR("Serial Number"));
}

BOOL sub_19B6CFF54(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("PcQWbThCb7iLEW+EoqZdEQ"), a2);
}

BOOL sub_19B6CFF78(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("PcQWbThCb7iLEW+EoqZdEQ"), 78, a2);
}

CFTypeRef sub_19B6CFF8C()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 8);
  if (!v0)
    v0 = sub_19B6BBD84(8, 2);
  TypeID = CFDictionaryGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyFirmwareManifestStatus", v0, TypeID);
}

BOOL sub_19B6CFFD8()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/mtp", CFSTR("hh/NoWpEoq1VF4lGDdPUpw"), 114);
}

uint64_t sub_19B6CFFF0()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6BAC78("IODeviceTree:/product", CFSTR("dictation"), 0);
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

BOOL sub_19B6D0034()
{
  if (MGGetBoolAnswer((const char **)CFSTR("ZEU7pCEskBhjQ4AOMuALDw")))
    return 1;
  if (sub_19B6B9C44() == 7)
    return 0;
  return sub_19B6B61A0((_BOOL8)CFSTR("H8"));
}

BOOL sub_19B6D007C()
{
  return sub_19B6E4210((uint64_t)CFSTR("isp"), CFSTR("camera-front"))
      || sub_19B6BACAC("IODeviceTree:/arm-io/isp", CFSTR("X9NA3D+PguwY0i0Uffl07Q"), 99);
}

uint64_t sub_19B6D00C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 1 || sub_19B6B9C44() == 2 || sub_19B6B9C44() == 3)
  {
    v70 = -489993439;
    v69 = xmmword_19B7182A8;
    v68 = 886875686;
    v67 = xmmword_19B7182BC;
    if (MGIsDeviceOneOfType((const UInt8 *)&v69, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v67))
      goto LABEL_8;
    v66 = 28030256;
    v65 = xmmword_19B718208;
    v64 = 1214363620;
    v63 = xmmword_19B71821C;
    v62 = -798153473;
    v61 = xmmword_19B718230;
    if (MGIsDeviceOneOfType((const UInt8 *)&v65, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v63))
      goto LABEL_8;
    v60 = -776721724;
    v59 = xmmword_19B718244;
    v58 = 729118884;
    v57 = xmmword_19B71826C;
    v56 = -1403227947;
    v55 = xmmword_19B718258;
    v54 = 1046806126;
    v53 = xmmword_19B718280;
    v52 = -188760945;
    v51 = xmmword_19B718294;
    if (MGIsDeviceOneOfType((const UInt8 *)&v59, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v57))
      goto LABEL_8;
    v50 = -350584140;
    v49 = xmmword_19B7182D0;
    v48 = 368778837;
    v47 = xmmword_19B7182F8;
    v46 = -1418383976;
    v45 = xmmword_19B7182E4;
    v44 = -1213485500;
    v43 = xmmword_19B71830C;
    if (MGIsDeviceOneOfType((const UInt8 *)&v49, v21, v22, v23, v24, v25, v26, v27, (uint64_t)&v47))
    {
LABEL_8:
      v35 = MEMORY[0x1E0C9AE40];
    }
    else
    {
      v42 = -38605833;
      v41 = xmmword_19B717BDC;
      v40 = -894965712;
      v39 = xmmword_19B717BF0;
      v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v28, v29, v30, v31, v32, v33, v34, (uint64_t)&v39);
      v35 = MEMORY[0x1E0C9AE40];
      if (!v38)
        v35 = MEMORY[0x1E0C9AE50];
    }
  }
  else
  {
    v37 = sub_19B6B9C44();
    v35 = MEMORY[0x1E0C9AE50];
    if (v37 != 6)
      v35 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v35;
}

uint64_t sub_19B6D0408()
{
  if (MGGetBoolAnswer((const char **)CFSTR("j8/Omm6s1lsmTDFsXjsBfA")))
    return 1;
  else
    return sub_19B6E4448((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("disp0"), 0, (uint64_t)CFSTR("always-on-device"), 0);
}

uint64_t sub_19B6D0454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v58 = -526227167;
  v57 = xmmword_19B71858C;
  v56 = -1509831889;
  v55 = xmmword_19B71853C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v57, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v55))
    goto LABEL_6;
  v54 = 289690957;
  v53 = xmmword_19B718550;
  v52 = 586720268;
  v51 = xmmword_19B718564;
  if (MGIsDeviceOneOfType((const UInt8 *)&v53, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v51))
    goto LABEL_6;
  if (sub_19B6B9C44() != 6)
    goto LABEL_6;
  v50 = 368885834;
  v49 = xmmword_19B718578;
  v48 = -414334491;
  v47 = xmmword_19B718528;
  if (MGIsDeviceOneOfType((const UInt8 *)&v49, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v47)
    || (v46 = -2092955395,
        v45 = xmmword_19B717BB4,
        v44 = 674998600,
        v43 = xmmword_19B717BC8,
        MGIsDeviceOneOfType((const UInt8 *)&v45, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v43)))
  {
LABEL_6:
    v36 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v42 = 1711910369;
    v41 = xmmword_19B717B8C;
    v40 = -1282800328;
    v39 = xmmword_19B717BA0;
    v38 = MGIsDeviceOneOfType((const UInt8 *)&v41, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v39);
    v36 = MEMORY[0x1E0C9AE40];
    if (!v38)
      v36 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v36;
}

uint64_t sub_19B6D064C()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("wOVK1nhmiAawowdbIwgyaQ"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 59)
    return result;
  else
    return 0;
}

CFNumberRef sub_19B6D0690()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("6Y9R9JVBWd2wTX5ZdDGsWA"), 97);
}

const void *sub_19B6D06A8()
{
  return sub_19B6B89E4((const char **)CFSTR("V2Ykm/0M3CA6nyNhwNInsg"), 0);
}

BOOL sub_19B6D06B8()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("PgQhOQ4/ZYPLM6mgAoPm4A"), 97);
}

BOOL sub_19B6D06D0()
{
  return sub_19B6B9C44() == 3
      && (unint64_t)sub_19B6C19A8() >> 31 >= 3
      && sub_19B6B5FE0((_BOOL8)CFSTR("H13"));
}

CFStringRef sub_19B6D0710()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("TqrlqJOZiAuRx8Qu3SVr+Q"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6D082C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("7VoVaBmSuokzovhUkiDx6Q"), a2);
}

BOOL sub_19B6D0850(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("7VoVaBmSuokzovhUkiDx6Q"), 83, a2);
}

BOOL sub_19B6D0864()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("supports-meteor"), 0)
      || MGGetBoolAnswer((const char **)CFSTR("noqTy5fUbyK03UHxWigBBQ"));
}

BOOL sub_19B6D08A4()
{
  return sub_19B6BACD0((uint64_t)CFSTR("ShutterClick"), CFSTR("RegionalBehaviorShutterClick"));
}

const void *sub_19B6D08B8()
{
  CFTypeRef v0;
  const void *v1;
  CFTypeID v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t v18[16];
  uint8_t buf[16];

  v0 = sub_19B6DD6B0();
  v1 = v0;
  if (v0 && (v2 = CFGetTypeID(v0), v2 == CFDataGetTypeID()) && CFDataGetLength((CFDataRef)v1) > 23)
  {
    if (*(_DWORD *)CFDataGetBytePtr((CFDataRef)v1) != 1396926055)
    {
      v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v3)
        v9 = v3 + 1;
      else
        v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v9, 4550, (uint64_t)CFSTR("syscfg data appears to be uninitialized"), v4, v5, v6, v7, v8, v18[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v18 = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "syscfg data appears to be uninitialized", v18, 2u);
      }
LABEL_16:
      CFRelease(v1);
      return 0;
    }
  }
  else
  {
    v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v10)
      v16 = v10 + 1;
    else
      v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v16, 4543, (uint64_t)CFSTR("invalid syscfg data"), v11, v12, v13, v14, v15, v18[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "invalid syscfg data", buf, 2u);
    }
    if (v1)
      goto LABEL_16;
  }
  return v1;
}

BOOL sub_19B6D0A18(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("0Y4fmR6ZHZPxDZFfPtBnRQ"), a2);
}

BOOL sub_19B6D0A3C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("0Y4fmR6ZHZPxDZFfPtBnRQ"), 83, a2);
}

BOOL sub_19B6D0A50()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("ZT0Z0SqGF/esuJWDmk8mGw"), 115);
}

CFTypeRef sub_19B6D0A68()
{
  return sub_19B6BBC28(1, "AppleOceanComputeMCU", CFSTR("Carrier Slot"));
}

uint64_t sub_19B6D0A80()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("JOlwW/P8Cw3CDCoFunq8og"), 112);
}

CFNumberRef sub_19B6D0A98()
{
  return sub_19B6BC5F4("IODeviceTree:/arm-io/aop/iop-aop-nub/als", CFSTR("uNNFSosc1xQM/7bwlrqLXA"), 109);
}

CFTypeRef sub_19B6D0AB0()
{
  return sub_19B6DB5A8(1, 0, 0);
}

BOOL sub_19B6D0AC0()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("W5kTfIuxkKpHVdWTk42C9A"), 110);
}

const __CFString *sub_19B6D0AD8()
{
  const void *v0;
  const void *v1;
  CFTypeRef *v2;
  CFTypeRef *v3;
  const __CFString *v4;
  CFTypeRef *v6;
  CFTypeRef *v7;
  CFTypeRef *v8;
  CFTypeRef *v9;
  CFTypeRef *v10;
  CFTypeRef *v11;
  CFTypeRef *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint8_t v19[16];

  if (!MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg")))
  {
    v4 = CFSTR("NoTelephonyCapabilty");
    goto LABEL_12;
  }
  v0 = sub_19B6B89E4((const char **)CFSTR("vaiFeAcMTIDXMSxTr8JwCw"), 0);
  if (v0)
  {
    v1 = v0;
    v2 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 68);
    if (!v2)
      v2 = (CFTypeRef *)sub_19B6BBD84(68, 1);
    if (CFEqual(v1, *v2))
      goto LABEL_9;
    v3 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 65);
    if (!v3)
      v3 = (CFTypeRef *)sub_19B6BBD84(65, 1);
    if (CFEqual(v1, *v3))
    {
LABEL_9:
      v4 = CFSTR("BBInfoAvailable");
LABEL_10:
      CFRelease(v1);
      goto LABEL_12;
    }
    v6 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 67);
    if (!v6)
      v6 = (CFTypeRef *)sub_19B6BBD84(67, 1);
    if (CFEqual(v1, *v6))
    {
LABEL_16:
      v4 = CFSTR("BBNotReady");
      goto LABEL_10;
    }
    v7 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 66);
    if (!v7)
      v7 = (CFTypeRef *)sub_19B6BBD84(66, 1);
    if (!CFEqual(v1, *v7))
    {
      v8 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 69);
      if (!v8)
        v8 = (CFTypeRef *)sub_19B6BBD84(69, 1);
      if (CFEqual(v1, *v8))
      {
        v4 = CFSTR("BBRejectedTicket");
        goto LABEL_10;
      }
      v9 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 74);
      if (!v9)
        v9 = (CFTypeRef *)sub_19B6BBD84(74, 1);
      if (CFEqual(v1, *v9))
        goto LABEL_9;
      v10 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 73);
      if (!v10)
        v10 = (CFTypeRef *)sub_19B6BBD84(73, 1);
      if (CFEqual(v1, *v10))
        goto LABEL_16;
      v11 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 71);
      if (!v11)
        v11 = (CFTypeRef *)sub_19B6BBD84(71, 1);
      if (!CFEqual(v1, *v11))
      {
        v12 = (CFTypeRef *)*((_QWORD *)off_1EE3FD5A0 + 72);
        if (!v12)
          v12 = (CFTypeRef *)sub_19B6BBD84(72, 1);
        if (CFEqual(v1, *v12))
          v4 = CFSTR("SIMNotInserted");
        else
          v4 = CFSTR("Other-CheckLogs");
        goto LABEL_10;
      }
    }
    v4 = CFSTR("BBError");
    goto LABEL_10;
  }
  v13 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog((uint64_t)v13, 4895, (uint64_t)CFSTR("No status in postponement info for copyBasebandStatusKey"), v14, v15, v16, v17, v18, v19[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No status in postponement info for copyBasebandStatusKey", v19, 2u);
  }
  v4 = CFSTR("BBNotAnswering");
LABEL_12:
  CFRetain(v4);
  return v4;
}

const __CFNumber *sub_19B6D0D58()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const __CFNumber *Value;
  const __CFNumber *v3;
  CFTypeID v4;
  const __CFAllocator *v5;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFStringRef v8;
  const __CFNumber *v9;
  CFComparisonResult v10;
  const __CFNumber **v11;
  const __CFDictionary *v12;
  const __CFNumber **v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v27[8];
  uint8_t buf[12];
  int valuePtr;

  valuePtr = 0;
  v0 = (const __CFDictionary *)sub_19B6B89E4((const char **)CFSTR("NVRAMDictionary"), 0);
  if (!v0)
  {
    v14 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v14, 6122, (uint64_t)CFSTR("Could not copy NVRAMDictionary"), v15, v16, v17, v18, v19, v27[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not copy NVRAMDictionary", buf, 2u);
    }
    return 0;
  }
  v1 = v0;
  Value = (const __CFNumber *)CFDictionaryGetValue(v0, CFSTR("IsServicePart"));
  v3 = Value;
  if (!Value)
  {
LABEL_23:
    v12 = v1;
    goto LABEL_24;
  }
  v4 = CFGetTypeID(Value);
  if (v4 != CFDataGetTypeID())
  {
    if (v4 == CFStringGetTypeID())
    {
      v9 = 0;
      goto LABEL_8;
    }
    if (v4 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v3, kCFNumberSInt32Type, &valuePtr);
      v13 = (const __CFNumber **)MEMORY[0x1E0C9AE50];
      if (valuePtr != 1)
        v13 = (const __CFNumber **)MEMORY[0x1E0C9AE40];
      v3 = *v13;
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v5 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  BytePtr = CFDataGetBytePtr(v3);
  Length = CFDataGetLength(v3);
  v8 = CFStringCreateWithBytes(v5, BytePtr, Length, 0x8000100u, 0);
  if (!v8)
  {
    v20 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v20, 6133, (uint64_t)CFSTR("Could not create string"), v21, v22, v23, v24, v25, v27[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v27[0] = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not create string", (uint8_t *)v27, 2u);
    }
LABEL_22:
    v3 = 0;
    goto LABEL_23;
  }
  v3 = (const __CFNumber *)v8;
  CFStringGetTypeID();
  v9 = v3;
LABEL_8:
  v10 = CFStringCompare((CFStringRef)v3, CFSTR("true"), 0);
  v11 = (const __CFNumber **)MEMORY[0x1E0C9AE50];
  if (v10 && CFStringCompare((CFStringRef)v3, CFSTR("1"), 0))
    v11 = (const __CFNumber **)MEMORY[0x1E0C9AE40];
  v3 = *v11;
  CFRelease(v1);
  if (v9)
  {
    v12 = v9;
LABEL_24:
    CFRelease(v12);
  }
  return v3;
}

uint64_t sub_19B6D0F94()
{
  return sub_19B6E4448((uint64_t)"IODeviceTree:", (uint64_t)CFSTR("RaX3KBmG7H9fUOEtLK/I6w"), 115, (uint64_t)CFSTR("hLzlRnTuKAcQLWtNwCFSfg"), 110);
}

uint64_t sub_19B6D0FB8()
{
  uint64_t result;

  result = sub_19B6B9C44();
  if ((_DWORD)result != 1)
    return sub_19B6B9C44() == 6 && MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg"));
  return result;
}

uint64_t sub_19B6D0FF4()
{
  unint64_t v0;
  uint64_t v1;

  v0 = sub_19B6C19A8();
  v1 = MEMORY[0x1E0C9AE50];
  if (v0 <= 0x40000000)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFStringRef sub_19B6D1028()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("e+pTfaabi1k1kfdk2vl1Kw"), 108);
}

BOOL sub_19B6D1040(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("2xSqkUxsVWmOBWk6StVOfQ"), a2);
}

BOOL sub_19B6D1064(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("2xSqkUxsVWmOBWk6StVOfQ"), 76, a2);
}

uint64_t sub_19B6D1078()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 7
    || sub_19B6B9C44() == 11)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -414334491;
    v10 = xmmword_19B718528;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE50];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v7;
}

BOOL sub_19B6D11B8()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("SKBEzVsOS9Wr/WlkVtlUMQ"), 102);
}

BOOL sub_19B6D11D0()
{
  return sub_19B6C0958(CFSTR("arm64e"));
}

const __CFString *sub_19B6D11DC()
{
  if (sub_19B6B9C44() == 11)
    return CFSTR("Apple Vision Pro");
  else
    return sub_19B6BBD4C();
}

CFNumberRef sub_19B6D1208()
{
  return sub_19B6BA824(5u);
}

const void *sub_19B6D1210()
{
  return sub_19B6B2C64("IODeviceTree:/product", CFSTR("2aIAScwtFNCz+Y7WesMOCA"), 109);
}

BOOL sub_19B6D1228(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("TqrlqJOZiAuRx8Qu3SVr+Q"), a2);
}

BOOL sub_19B6D124C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("TqrlqJOZiAuRx8Qu3SVr+Q"), 83, a2);
}

const void *sub_19B6D1260()
{
  return sub_19B6B89E4((const char **)CFSTR("9s45ldrCC1WF+7b6C4H2BA"), 0);
}

CFTypeRef sub_19B6D1270()
{
  return sub_19B6DB304(3, 0, 2);
}

BOOL sub_19B6D1280(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("xOEH0P1H/1jmYe2t54+5cQ"), a2);
}

BOOL sub_19B6D12A4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("xOEH0P1H/1jmYe2t54+5cQ"), 77, a2);
}

uint64_t sub_19B6D12B8()
{
  const char *v1;
  char *v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  char *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  statfs v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  memset(&v15, 0, 512);
  if (statfs("/private/var", &v15) != -1)
    return LOBYTE(v15.f_flags) >> 7;
  v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2)
    v1 = v2 + 1;
  v3 = __error();
  strerror(*v3);
  _MGLog((uint64_t)v1, 3735, (uint64_t)CFSTR("Could not statfs %s: %s"), v4, v5, v6, v7, v8, (char)"/private/var");
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v9 = __error();
    v10 = strerror(*v9);
    *(_DWORD *)buf = 136315394;
    v12 = "/private/var";
    v13 = 2080;
    v14 = v10;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not statfs %s: %s", buf, 0x16u);
  }
  sub_19B6B9160(6);
  return 0;
}

BOOL sub_19B6D1428()
{
  return sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("GO5/TJivIXtQkTkFWkRc9A"), 99);
}

uint64_t sub_19B6D1440()
{
  return sub_19B6E45DC(0, (uint64_t)CFSTR("wlan"), 0, (uint64_t)CFSTR("FirmwareVersion"), 0);
}

CFTypeRef sub_19B6D1460()
{
  return sub_19B6DB84C(0);
}

BOOL sub_19B6D1468(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("H5TSt7Pu4zNCD5RvHuk5CQ"), a2);
}

BOOL sub_19B6D148C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("H5TSt7Pu4zNCD5RvHuk5CQ"), 80, a2);
}

float sub_19B6D14A0()
{
  if (sub_19B6B9C44() == 3 && !MGGetBoolAnswer((const char **)CFSTR("lSpe1QHIya0aeNrjLTtaJA")))
    return 0.42;
  else
    return 0.0;
}

CFTypeRef sub_19B6D14DC()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 12);
  if (!v0)
    v0 = sub_19B6BBD84(12, 2);
  TypeID = CFStringGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyFirmwareVersion", v0, TypeID);
}

uint64_t sub_19B6D1528()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6DA798();
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFNumberRef sub_19B6D1558()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("LMvmpCFM38ZaFeEy4r7nNQ"), 99);
}

BOOL sub_19B6D1570()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("l1MfXa14uBR9cvO8D9wc9w"), 117);
}

BOOL sub_19B6D1588()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("a13V9f9x26JcQCfczZAVAw"), 117);
}

BOOL sub_19B6D15A0()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/sep", CFSTR("aNZeCyuWxI6SE/KwZ129wA"), 110);
}

BOOL sub_19B6D15B8()
{
  return sub_19B6BACD0((uint64_t)CFSTR("NTSC"), CFSTR("RegionalBehaviorNTSC"));
}

CFArrayRef sub_19B6D15CC()
{
  _OWORD v1[2];
  const __CFString *v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1[0] = xmmword_1E3BD0CE8;
  v1[1] = *(_OWORD *)off_1E3BD0CF8;
  v2 = CFSTR("KP");
  return CFArrayCreate(0, (const void **)v1, 5, 0);
}

const void *sub_19B6D163C()
{
  return sub_19B6B89E4((const char **)CFSTR("H97G3GzDYb4wY5kwJ0AKfQ"), 0);
}

uint64_t sub_19B6D164C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v45;
  __int128 v46;
  int v47;
  __int128 v48;
  int v49;
  __int128 v50;
  int v51;
  __int128 v52;
  int v53;
  __int128 v54;
  int v55;
  __int128 v56;
  int v57;
  __int128 v58;
  int v59;
  __int128 v60;
  int v61;
  __int128 v62;
  int v63;
  __int128 v64;
  int v65;
  __int128 v66;
  int v67;
  __int128 v68;
  int v69;
  __int128 v70;
  int v71;
  __int128 v72;
  int v73;
  __int128 v74;
  int v75;
  __int128 v76;
  int v77;
  __int128 v78;
  int v79;
  __int128 v80;
  int v81;
  __int128 v82;
  int v83;
  __int128 v84;
  int v85;
  __int128 v86;
  int v87;
  __int128 v88;
  int v89;
  __int128 v90;
  int v91;
  __int128 v92;
  int v93;
  __int128 v94;
  int v95;
  __int128 v96;
  int v97;
  __int128 v98;
  int v99;
  __int128 v100;
  int v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v101 = -798153473;
  v100 = xmmword_19B718230;
  v99 = -776721724;
  v98 = xmmword_19B718244;
  v97 = -1639077591;
  v96 = xmmword_19B718410;
  v95 = 338555555;
  v94 = xmmword_19B718424;
  if (MGIsDeviceOneOfType((const UInt8 *)&v100, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v98))
    goto LABEL_9;
  if (sub_19B6B9C44() == 4)
    goto LABEL_9;
  if (sub_19B6B9C44() == 6)
    goto LABEL_9;
  if (sub_19B6B9C44() == 2)
    goto LABEL_9;
  v93 = 1789837692;
  v92 = xmmword_19B7180A0;
  v91 = 48355600;
  v90 = xmmword_19B7180DC;
  v89 = -1239654590;
  v88 = xmmword_19B7180B4;
  v87 = -679691073;
  v86 = xmmword_19B7180F0;
  v85 = -1579092758;
  v84 = xmmword_19B7180C8;
  v83 = 1430379884;
  v82 = xmmword_19B718104;
  if (MGIsDeviceOneOfType((const UInt8 *)&v92, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v90))
    goto LABEL_9;
  v81 = -926344036;
  v80 = xmmword_19B717C2C;
  v79 = -954998212;
  v78 = xmmword_19B717C40;
  v77 = 436612651;
  v76 = xmmword_19B717C54;
  if (MGIsDeviceOneOfType((const UInt8 *)&v80, v15, v16, v17, v18, v19, v20, v21, (uint64_t)&v78))
    goto LABEL_9;
  v75 = 1602014129;
  v74 = xmmword_19B71817C;
  v73 = -810116762;
  v72 = xmmword_19B718190;
  v71 = -1195351767;
  v70 = xmmword_19B7181A4;
  v69 = -199226823;
  v68 = xmmword_19B7181B8;
  v67 = 1412427398;
  v66 = xmmword_19B7181CC;
  v65 = -1283070668;
  v64 = xmmword_19B7181E0;
  v63 = 160260070;
  v62 = xmmword_19B7181F4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v74, v22, v23, v24, v25, v26, v27, v28, (uint64_t)&v72))
    goto LABEL_9;
  v61 = -38605833;
  v60 = xmmword_19B717BDC;
  v59 = -894965712;
  v58 = xmmword_19B717BF0;
  v57 = -2101636455;
  v56 = xmmword_19B717C04;
  v55 = -1955568593;
  v54 = xmmword_19B717C18;
  v53 = 28030256;
  v52 = xmmword_19B718208;
  v51 = 1214363620;
  v50 = xmmword_19B71821C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v60, v29, v30, v31, v32, v33, v34, v35, (uint64_t)&v58))
  {
LABEL_9:
    v43 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v49 = 1032708406;
    v48 = xmmword_19B7183E8;
    v47 = 729903963;
    v46 = xmmword_19B7183FC;
    v45 = MGIsDeviceOneOfType((const UInt8 *)&v48, v36, v37, v38, v39, v40, v41, v42, (uint64_t)&v46);
    v43 = MEMORY[0x1E0C9AE40];
    if (!v45)
      v43 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v43;
}

uint64_t sub_19B6D1B10()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  int v3;

  v0 = sub_19B6B9C44();
  v1 = MEMORY[0x1E0C9AE50];
  v2 = MEMORY[0x1E0C9AE50];
  if (v0 != 3)
  {
    if (sub_19B6B9C44() == 6)
    {
      v2 = MEMORY[0x1E0C9AE40];
    }
    else
    {
      v3 = sub_19B6B9C44();
      v2 = MEMORY[0x1E0C9AE40];
      if (v3 != 4 && sub_19B6B9C44() != 2)
        v2 = v1;
    }
  }
  return *(_QWORD *)v2;
}

const void *sub_19B6D1B7C()
{
  const void *v0;
  const void *v1;

  v0 = (const void *)sub_19B6C17E4();
  v1 = v0;
  if (v0)
    CFRetain(v0);
  return v1;
}

CFStringRef sub_19B6D1BAC()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("tAryHM5IUMkdtvVqqu1tcA"), 97);
}

BOOL sub_19B6D1BC4(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("UCLOC2TKe3vRkId34ubKWw"), a2);
}

BOOL sub_19B6D1BE8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("UCLOC2TKe3vRkId34ubKWw"), 65, a2);
}

BOOL sub_19B6D1BFC()
{
  stat v1;

  memset(&v1, 0, sizeof(v1));
  return !stat("/System/Library/CoreServices/SpringBoard.app", &v1) || *__error() != 2;
}

BOOL sub_19B6D1C5C()
{
  return !MGGetBoolAnswer((const char **)CFSTR("yRZv0s7Dpj8ZBk0S+0+nMA")) || !sub_19B6B50E0(CFSTR("CH"));
}

CFNumberRef sub_19B6D1C94()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("D6PT05dEJ0f9Ayk7Yi92RA"), 102);
}

BOOL sub_19B6D1CAC()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("PTfO3r9syJ45k+OItTlD3Q"), 117);
}

BOOL sub_19B6D1CDC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("hfs43coKE3iWlCwnqPgBpg"), a2);
}

BOOL sub_19B6D1D00(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("hfs43coKE3iWlCwnqPgBpg"), 73, a2);
}

uint64_t sub_19B6D1D14()
{
  return 0xFFFFFFFFLL;
}

const void *sub_19B6D1D1C()
{
  return sub_19B6DAD48((unint64_t)CFSTR("ChipSerialNo"), 0);
}

BOOL sub_19B6D1D2C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("Nmhz54v5ZLqj2I4NPFIFqQ"), a2);
}

BOOL sub_19B6D1D50(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("Nmhz54v5ZLqj2I4NPFIFqQ"), 66, a2);
}

CFNumberRef sub_19B6D1D64()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("cmkS/KVB6ubxH76sLbumbw"), 114);
}

CFStringRef sub_19B6D1D7C()
{
  const NXArchInfo *v0;
  unint64_t v2;

  v0 = NXGetLocalArchInfo();
  if (v0 && v0->name)
    return CFStringCreateWithCString(0, v0->name, 0x8000100u);
  v2 = sub_19B6C073C();
  return CFStringCreateWithFormat(0, 0, CFSTR("%d-%d"), v2, HIDWORD(v2));
}

uint64_t sub_19B6D1DDC()
{
  uint64_t v0;
  const __CFNumber *v2;
  const __CFNumber *v3;
  BOOL v4;
  char v5;
  int valuePtr;

  if (sub_19B6DA95C() || MGGetBoolAnswer((const char **)CFSTR("OysterCapability")))
  {
    v0 = MEMORY[0x1E0C9AE50];
  }
  else
  {
    v2 = sub_19B6CBC24();
    if (v2)
    {
      v3 = v2;
      valuePtr = -1;
      if (CFNumberGetValue(v2, kCFNumberSInt32Type, &valuePtr))
        v4 = valuePtr == 2;
      else
        v4 = 0;
      v5 = v4;
      CFRelease(v3);
      v0 = MEMORY[0x1E0C9AE50];
      if ((v5 & 1) == 0)
        v0 = MEMORY[0x1E0C9AE40];
    }
    else
    {
      v0 = MEMORY[0x1E0C9AE40];
    }
  }
  return *(_QWORD *)v0;
}

BOOL sub_19B6D1E80()
{
  return sub_19B6B9C44() == 10;
}

uint64_t sub_19B6D1E9C()
{
  return sub_19B6E4448((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("4k6Wv56SWfITjzet+hIHMQ"), 109, (uint64_t)CFSTR("9f5ODNAt2gufqSI82eYnLw"), 99);
}

uint64_t sub_19B6D1EC0()
{
  int v0;
  uint64_t v1;

  v0 = sub_19B6B9C44();
  v1 = MEMORY[0x1E0C9AE40];
  if (v0 != 4 && sub_19B6B9C44() != 6)
    v1 = MEMORY[0x1E0C9AE50];
  return *(_QWORD *)v1;
}

uint64_t sub_19B6D1F04()
{
  return 0;
}

BOOL sub_19B6D1F0C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("RN/FxX/3jy6LWaEIPR8qpA"), 99);
}

const void *sub_19B6D1F24()
{
  return sub_19B6B89E4((const char **)CFSTR("oOV1jhJbdV3AddkcCg0AEA"), 0);
}

BOOL sub_19B6D1F34()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("voS/bmBAz0Y1eNLoN8x9/Q"), 112);
}

__CFDictionary *sub_19B6D1F4C()
{
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v1;
  CFMutableDictionaryRef v2;
  CFMutableDictionaryRef v3;
  CFMutableDictionaryRef v4;
  CFMutableDictionaryRef v5;
  CFMutableDictionaryRef v6;

  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v1 = sub_19B6DBF10(1, "als");
  if (v1)
  {
    v2 = v1;
    CFDictionaryAddValue(Mutable, CFSTR("als"), v1);
    CFRelease(v2);
  }
  v3 = sub_19B6DBF10(1, "multi-touch");
  if (v3)
  {
    v4 = v3;
    CFDictionaryAddValue(Mutable, CFSTR("multi-touch"), v3);
    CFRelease(v4);
  }
  v5 = sub_19B6DBF10(1, "prox");
  if (v5)
  {
    v6 = v5;
    CFDictionaryAddValue(Mutable, CFSTR("prox"), v5);
    CFRelease(v6);
  }
  return Mutable;
}

BOOL sub_19B6D2024(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("5mvQIwu3Mqqw/zOKmwGkWw"), a2);
}

BOOL sub_19B6D2048(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("5mvQIwu3Mqqw/zOKmwGkWw"), 80, a2);
}

__CFArray *sub_19B6D205C()
{
  __CFArray *Mutable;
  const char *v1;
  const __CFString *v2;
  CFStringRef v3;
  const void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t v13[16];

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    v1 = sub_19B6CE884();
    v2 = sub_19B6BC39C("IODeviceTree:/product", CFSTR("compatible-app-variant"), 0);
    v3 = sub_19B6BC39C("IODeviceTree:/product", CFSTR("compatible-device-fallback"), 0);
    if (v2 && CFStringCompare(v2, CFSTR("0"), 0))
    {
      v4 = v2;
      if (v1)
      {
        CFArrayAppendValue(Mutable, v1);
        v4 = v2;
      }
    }
    else
    {
      v4 = v1;
      if (!v1)
        goto LABEL_13;
    }
    CFArrayAppendValue(Mutable, v4);
LABEL_13:
    if (v3 && CFStringCompare(v3, CFSTR("0"), 0))
      CFArrayAppendValue(Mutable, v3);
    if (v1)
      CFRelease(v1);
    if (v2)
      CFRelease(v2);
    if (v3)
      CFRelease(v3);
    return Mutable;
  }
  v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v5)
    v11 = v5 + 1;
  else
    v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v11, 5697, (uint64_t)CFSTR("Failed to create array"), v6, v7, v8, v9, v10, v13[0]);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to create array", v13, 2u);
  }
  return Mutable;
}

BOOL sub_19B6D21F0()
{
  stat v1;

  memset(&v1, 0, sizeof(v1));
  return stat("/AppleInternal/Library/PreferenceBundles/Internal Settings.bundle", &v1) == 0;
}

BOOL sub_19B6D2238()
{
  return sub_19B6BAC78("IODeviceTree:/baseband", CFSTR("BYYil6kIk8Hm5lRuA1k8Tw"), 112);
}

BOOL sub_19B6D2250()
{
  const __CFString *v0;
  const __CFString *v1;
  CFComparisonResult v2;

  v0 = sub_19B6BC39C("IODeviceTree:/chosen", CFSTR("osenvironment"), 0);
  if (v0 && (v1 = v0, v2 = CFStringCompare(v0, CFSTR("diagnostics"), 0), CFRelease(v1), v2 == kCFCompareEqualTo))
    return 1;
  else
    return sub_19B6BAC78("IODeviceTree:/product", CFSTR("boot-ios-diagnostics"), 0);
}

BOOL sub_19B6D22CC()
{
  return sub_19B6B9C44() == 1;
}

CFNumberRef sub_19B6D22E8()
{
  return sub_19B6BC5F4("IODeviceTree:/product/facetime", CFSTR("yeaE9+OrN2WJlWkDroMtZg"), 98);
}

CFTypeRef sub_19B6D2300()
{
  CFTypeID TypeID;

  TypeID = CFBooleanGetTypeID();
  return sub_19B6BD240((uint64_t)"copyDeviceSupportsTethering", (uint64_t)&unk_1E3BD0D30, TypeID);
}

uint64_t sub_19B6D2328()
{
  const __CFDictionary *v0;
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v0 = IOBSDNameMatching(*MEMORY[0x1E0CBBAA8], 0, "disk0");
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19B6D9C18;
  v3[3] = &unk_1E3BD0D58;
  v3[4] = &v4;
  sub_19B6DBDAC(v0, (uint64_t)v3);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

CFNumberRef sub_19B6D23CC()
{
  const __CFBoolean *v0;
  const __CFBoolean *v1;
  CFTypeID v2;
  int Value;
  int valuePtr;

  valuePtr = 0;
  v0 = (const __CFBoolean *)sub_19B6E46E4(0, (uint64_t)CFSTR("AppleSPUHIDDriver"), 0, (uint64_t)CFSTR("SupportHDRCompass"), 0);
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFBooleanGetTypeID())
    {
      Value = CFBooleanGetValue(v1);
      valuePtr = 2 * (Value != 0);
      CFRelease(v1);
      if (Value)
        return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
    }
    else
    {
      CFRelease(v1);
    }
  }
  if (MGGetBoolAnswer((const char **)CFSTR("aCQx2Qq/TChnNAq1rr6Egw")))
    valuePtr = 1;
  return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
}

uint64_t sub_19B6D2488()
{
  return *MEMORY[0x1E0C9AE40];
}

uint64_t sub_19B6D2498()
{
  return 0;
}

uint64_t sub_19B6D24A0()
{
  return *MEMORY[0x1E0C9AE50];
}

BOOL sub_19B6D24B0()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("CzGP5+8jQECJMH4h+z4TYA"), 111);
}

CFStringRef sub_19B6D24C8()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("IAJzgzhEVk3SMNuEhChs2w"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6D25E4(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("uAIY4Jb2A7Fy2aLrlDU1gg"), a2);
}

BOOL sub_19B6D2608(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("uAIY4Jb2A7Fy2aLrlDU1gg"), 82, a2);
}

BOOL sub_19B6D261C()
{
  return sub_19B6DC15C(1, "sgx", CFSTR("procedural-antialiasing"));
}

uint64_t sub_19B6D2634()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6BAC78("IODeviceTree:/product", CFSTR("display-mirroring"), 0);
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

uint64_t sub_19B6D267C()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("lNtvJFI6kdcchIbskQDzaA"), 98);
}

uint64_t sub_19B6D2694()
{
  uint64_t v0;
  _BOOL4 v1;
  uint64_t v2;

  if (sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 6)
  {
    v0 = MEMORY[0x1E0C9AE40];
    v1 = sub_19B6BACAC("IODeviceTree:/product", CFSTR("disable-spoken-messages"), 0);
    v2 = MEMORY[0x1E0C9AE50];
    if (v1)
      v2 = v0;
  }
  else
  {
    v2 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v2;
}

uint64_t sub_19B6D271C()
{
  return sub_19B6BAD7C("IODeviceTree:/product/camera", CFSTR("video-cap"), 0, 0, 1);
}

CFNumberRef sub_19B6D273C()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("7zSkleuS91WkyAuEEH7p2g"), 115);
}

CFTypeRef sub_19B6D2758()
{
  return sub_19B6D7850(CFSTR("SavageSNUM"));
}

BOOL sub_19B6D2764(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("LE2kQ7U1iM32AmlhYvlagg"), a2);
}

BOOL sub_19B6D2788(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("LE2kQ7U1iM32AmlhYvlagg"), 83, a2);
}

CFNumberRef sub_19B6D279C()
{
  CFNumberRef result;
  int valuePtr;

  result = sub_19B6BC5F4("IODeviceTree:/product", CFSTR("builtin-mics"), 0);
  if (!result)
  {
    valuePtr = 0;
    return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  }
  return result;
}

CFNumberRef sub_19B6D27E0()
{
  return sub_19B6BC5F4("IODeviceTree:/product/facetime", CFSTR("7ot70MKj7EdRIEEi91jlcg"), 98);
}

CFNumberRef sub_19B6D27FC()
{
  return sub_19B6BA824(6u);
}

BOOL sub_19B6D2804()
{
  return sub_19B6C0844("armv7s");
}

uint64_t sub_19B6D2810()
{
  return 1;
}

__CFDictionary *sub_19B6D2818()
{
  const __CFAllocator *v0;
  __CFDictionary *Mutable;
  uint64_t i;
  const __CFString *v3;
  CFStringRef v4;
  const __CFString *v5;
  __CFNumberFormatter *v6;
  CFNumberRef NumberFromString;
  CFNumberRef v8;

  v0 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  for (i = 0; i != 64; i += 8)
  {
    v3 = *(__CFString **)((char *)&off_1E3BD0D78 + i);
    v4 = sub_19B6BC39C("IODeviceTree:/options", v3, 0);
    if (v4)
    {
      v5 = v4;
      v6 = CFNumberFormatterCreate(v0, 0, kCFNumberFormatterNoStyle);
      NumberFromString = CFNumberFormatterCreateNumberFromString(v0, v6, v5, 0, 1uLL);
      if (NumberFromString)
      {
        v8 = NumberFromString;
        CFDictionarySetValue(Mutable, v3, NumberFromString);
        CFRelease(v8);
      }
      CFRelease(v6);
      CFRelease(v5);
    }
  }
  return Mutable;
}

BOOL sub_19B6D2918()
{
  stat v1;

  memset(&v1, 0, sizeof(v1));
  return stat("/System/Library/PrivateFrameworks/Sharing.framework", &v1) == 0;
}

CFNumberRef sub_19B6D2960()
{
  int valuePtr;

  if (sub_19B6B9C44() != 1)
    return 0;
  valuePtr = 1050253722;
  return CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
}

BOOL sub_19B6D29A8()
{
  return !MGGetBoolAnswer((const char **)CFSTR("yRZv0s7Dpj8ZBk0S+0+nMA")) || !sub_19B6B50E0(CFSTR("CH"));
}

CFStringRef sub_19B6D29E0()
{
  return sub_19B6BC39C("IODeviceTree:/chosen", CFSTR("cganRwxlDnONJx4WeDI0kQ"), 102);
}

BOOL sub_19B6D29F8()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("xgs6iXf0KFHUJ9d4FKaRYg"), 115);
}

CFNumberRef sub_19B6D2A10()
{
  int valuePtr;

  if (!sub_19B6B61A0((_BOOL8)CFSTR("H6"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H8"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H5"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H7"))
    && !sub_19B6B61A0((_BOOL8)CFSTR("H9"))
    && sub_19B6B9C44() != 4
    && sub_19B6B9C44() != 6)
  {
    sub_19B6B61A0((_BOOL8)CFSTR("H4"));
  }
  valuePtr = 1065353216;
  return CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
}

BOOL sub_19B6D2AB4()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("P1uSdgM/fIttMsA/+q6k4w"), 119);
}

BOOL sub_19B6D2ACC()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("4OThI5F+/uP2oXUpdDxGnw"), 115);
}

CFStringRef sub_19B6D2AE4()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("MfLtAGqrSIJgBHzuir/DoA"), 99);
}

BOOL sub_19B6D2AFC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("OWi11Urd09rDmPVy1z5dOQ"), a2);
}

BOOL sub_19B6D2B20(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("OWi11Urd09rDmPVy1z5dOQ"), 67, a2);
}

BOOL sub_19B6D2B34()
{
  return sub_19B6BAC78("IODeviceTree:/product/haptics", CFSTR("OtnrTIhWBtyPo45BcApMTw"), 115);
}

uint64_t sub_19B6D2B4C()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 1)
    return 0;
  result = MGGetBoolAnswer((const char **)CFSTR("8S7ydMJ4DlCUF38/hI/fJA"));
  if ((_DWORD)result)
  {
    v11 = -232427879;
    v10 = xmmword_19B717C68;
    v9 = -427474227;
    v8 = xmmword_19B717C7C;
    return MGIsDeviceOneOfType((const UInt8 *)&v10, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v8) ^ 1;
  }
  return result;
}

CFTypeRef sub_19B6D2D44()
{
  return sub_19B6DB5A8(2, 0, 0);
}

CFStringRef sub_19B6D2D54()
{
  const __CFNumber *v0;
  const __CFNumber *v1;
  uint64_t v2;
  const __CFAllocator *v3;
  const __CFString *v4;
  const __CFData *v5;
  CFMutableStringRef Mutable;
  const UInt8 *BytePtr;
  CFIndex Length;
  CFIndex v9;
  unsigned int v10;
  CFIndex v11;
  CFIndex v12;
  CFStringRef v13;
  CFStringRef v14;
  _QWORD v16[2];
  unsigned int valuePtr;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFNumber *)sub_19B6B89E4((const char **)CFSTR("eNgz35a7iZnVeEMwsBQZew"), 0);
  v1 = v0;
  valuePtr = 0;
  if (v0)
  {
    CFNumberGetValue(v0, kCFNumberSInt32Type, &valuePtr);
    v2 = valuePtr;
  }
  else
  {
    v2 = 0;
  }
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v4 = CFStringCreateWithFormat((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, CFSTR("%X"), v2);
  v5 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("Nmhz54v5ZLqj2I4NPFIFqQ"), 0);
  Mutable = CFStringCreateMutable(v3, 0);
  if (v5)
  {
    BytePtr = CFDataGetBytePtr(v5);
    Length = CFDataGetLength(v5);
    if (Length >= 1)
    {
      v9 = Length;
      do
      {
        v10 = *BytePtr++;
        CFStringAppendFormat(Mutable, 0, CFSTR("%02X"), v10);
        --v9;
      }
      while (v9);
    }
  }
  MEMORY[0x1E0C80A78]();
  v16[0] = 0x3030303030303030;
  v11 = CFStringGetLength(Mutable);
  v12 = CFStringGetLength(v4);
  if (v1 && v5)
  {
    v13 = CFStringCreateWithFormat(v3, 0, CFSTR("%*.*s%@-%*.*s%@"), (8 - v12) & ~((8 - v12) >> 63), (8 - v12) & ~((8 - v12) >> 63), v16, v4, (8 - v11) & ~((8 - v11) >> 63), (8 - v11) & ~((8 - v11) >> 63), v16, Mutable);
  }
  else
  {
    v13 = 0;
    v14 = 0;
    if (!v1)
      goto LABEL_13;
  }
  CFRelease(v1);
  v14 = v13;
LABEL_13:
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  if (Mutable)
    CFRelease(Mutable);
  return v14;
}

BOOL sub_19B6D2F60(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("vIccod02kDxScKF5s2h6OA"), a2);
}

BOOL sub_19B6D2F84(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("vIccod02kDxScKF5s2h6OA"), 66, a2);
}

uint64_t sub_19B6D2F98()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("eW5H/Gwg0uqbMqFot70pYg"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 1)
    return result;
  else
    return 0;
}

BOOL sub_19B6D2FDC()
{
  return sub_19B6BAC78("IODeviceTree:/chosen", CFSTR("U1fcnNYCEu9uH1bg3/6PKQ"), 105);
}

BOOL sub_19B6D2FF4()
{
  return sub_19B6B9C44() == 3;
}

BOOL sub_19B6D3010()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("ESA7FmyB3KbJFNBAsBejcg"), 117);
}

BOOL sub_19B6D3028()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("bG+mTz0gYzxMfCms9/WzlQ"), 114);
}

BOOL sub_19B6D3040()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("ieuwDGiHrHoYRjSl6gT+1A"), 115);
}

BOOL sub_19B6D3058()
{
  return sub_19B6B5FE0((_BOOL8)CFSTR("H13"));
}

uint64_t sub_19B6D3064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v93;
  __int128 v94;
  int v95;
  __int128 v96;
  int v97;
  __int128 v98;
  int v99;
  __int128 v100;
  int v101;
  __int128 v102;
  int v103;
  __int128 v104;
  int v105;
  __int128 v106;
  int v107;
  __int128 v108;
  int v109;
  __int128 v110;
  int v111;
  __int128 v112;
  int v113;
  __int128 v114;
  int v115;
  __int128 v116;
  int v117;
  __int128 v118;
  int v119;
  __int128 v120;
  int v121;
  __int128 v122;
  int v123;
  __int128 v124;
  int v125;
  __int128 v126;
  int v127;
  __int128 v128;
  int v129;
  __int128 v130;
  int v131;
  __int128 v132;
  int v133;
  __int128 v134;
  int v135;
  __int128 v136;
  int v137;
  __int128 v138;
  int v139;
  __int128 v140;
  int v141;
  __int128 v142;
  int v143;
  __int128 v144;
  int v145;
  __int128 v146;
  int v147;
  __int128 v148;
  int v149;
  __int128 v150;
  int v151;
  __int128 v152;
  int v153;
  __int128 v154;
  int v155;
  __int128 v156;
  int v157;
  __int128 v158;
  int v159;
  __int128 v160;
  int v161;
  __int128 v162;
  int v163;
  __int128 v164;
  int v165;
  __int128 v166;
  int v167;
  __int128 v168;
  int v169;
  __int128 v170;
  int v171;
  __int128 v172;
  int v173;
  __int128 v174;
  int v175;
  __int128 v176;
  int v177;
  __int128 v178;
  int v179;
  __int128 v180;
  int v181;
  __int128 v182;
  int v183;
  __int128 v184;
  int v185;
  __int128 v186;
  int v187;
  __int128 v188;
  int v189;
  __int128 v190;
  int v191;
  __int128 v192;
  int v193;
  __int128 v194;
  int v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 7)
    goto LABEL_16;
  if (sub_19B6B9C44() == 4)
    goto LABEL_16;
  v195 = 1789837692;
  v194 = xmmword_19B7180A0;
  v193 = -1239654590;
  v192 = xmmword_19B7180B4;
  v191 = -1579092758;
  v190 = xmmword_19B7180C8;
  v189 = 48355600;
  v188 = xmmword_19B7180DC;
  v187 = -679691073;
  v186 = xmmword_19B7180F0;
  v185 = 1430379884;
  v184 = xmmword_19B718104;
  if (MGIsDeviceOneOfType((const UInt8 *)&v194, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v192))
    goto LABEL_16;
  v183 = -1527788847;
  v182 = xmmword_19B717B3C;
  v181 = 1532898719;
  v180 = xmmword_19B717B50;
  v179 = 1275676051;
  v178 = xmmword_19B717B64;
  v177 = 1908474541;
  v176 = xmmword_19B717B78;
  if (MGIsDeviceOneOfType((const UInt8 *)&v182, v7, v8, v9, v10, v11, v12, v13, (uint64_t)&v180))
    goto LABEL_16;
  v175 = 1711910369;
  v174 = xmmword_19B717B8C;
  v173 = -1282800328;
  v172 = xmmword_19B717BA0;
  v171 = -2092955395;
  v170 = xmmword_19B717BB4;
  v169 = 674998600;
  v168 = xmmword_19B717BC8;
  if (MGIsDeviceOneOfType((const UInt8 *)&v174, v14, v15, v16, v17, v18, v19, v20, (uint64_t)&v172))
    goto LABEL_16;
  v167 = -414334491;
  v166 = xmmword_19B718528;
  v165 = -1509831889;
  v164 = xmmword_19B71853C;
  v163 = 289690957;
  v162 = xmmword_19B718550;
  v161 = 586720268;
  v160 = xmmword_19B718564;
  if (MGIsDeviceOneOfType((const UInt8 *)&v166, v21, v22, v23, v24, v25, v26, v27, (uint64_t)&v164))
    goto LABEL_16;
  v159 = 470738981;
  v158 = xmmword_19B718474;
  v157 = 710807826;
  v156 = xmmword_19B718460;
  v155 = 1860682089;
  v154 = xmmword_19B71844C;
  v153 = -2085056298;
  v152 = xmmword_19B718438;
  if (MGIsDeviceOneOfType((const UInt8 *)&v158, v28, v29, v30, v31, v32, v33, v34, (uint64_t)&v156))
    goto LABEL_16;
  if (sub_19B6B9C44() == 8)
    goto LABEL_16;
  v151 = -1403227947;
  v150 = xmmword_19B718258;
  v149 = 729118884;
  v148 = xmmword_19B71826C;
  v147 = 1046806126;
  v146 = xmmword_19B718280;
  v145 = -188760945;
  v144 = xmmword_19B718294;
  if (MGIsDeviceOneOfType((const UInt8 *)&v150, v35, v36, v37, v38, v39, v40, v41, (uint64_t)&v148))
    goto LABEL_16;
  v143 = -1639077591;
  v142 = xmmword_19B718410;
  v141 = 338555555;
  v140 = xmmword_19B718424;
  v139 = 1032708406;
  v138 = xmmword_19B7183E8;
  v137 = 729903963;
  v136 = xmmword_19B7183FC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v142, v42, v43, v44, v45, v46, v47, v48, (uint64_t)&v140))
    goto LABEL_16;
  v135 = 28030256;
  v134 = xmmword_19B718208;
  v133 = 1214363620;
  v132 = xmmword_19B71821C;
  v131 = -798153473;
  v130 = xmmword_19B718230;
  v129 = -776721724;
  v128 = xmmword_19B718244;
  v127 = -489993439;
  v126 = xmmword_19B7182A8;
  v125 = 886875686;
  v124 = xmmword_19B7182BC;
  if (MGIsDeviceOneOfType((const UInt8 *)&v134, v49, v50, v51, v52, v53, v54, v55, (uint64_t)&v132))
    goto LABEL_16;
  v123 = -350584140;
  v122 = xmmword_19B7182D0;
  v121 = 368778837;
  v120 = xmmword_19B7182F8;
  v119 = -1418383976;
  v118 = xmmword_19B7182E4;
  v117 = -1213485500;
  v116 = xmmword_19B71830C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v122, v56, v57, v58, v59, v60, v61, v62, (uint64_t)&v120))
    goto LABEL_16;
  v115 = -199226823;
  v114 = xmmword_19B7181B8;
  v113 = 1412427398;
  v112 = xmmword_19B7181CC;
  v111 = -1283070668;
  v110 = xmmword_19B7181E0;
  v109 = 160260070;
  v108 = xmmword_19B7181F4;
  if (MGIsDeviceOneOfType((const UInt8 *)&v114, v63, v64, v65, v66, v67, v68, v69, (uint64_t)&v112))
    goto LABEL_16;
  v107 = 317289457;
  v106 = xmmword_19B718348;
  v105 = 401945557;
  v104 = xmmword_19B71835C;
  if (MGIsDeviceOneOfType((const UInt8 *)&v106, v70, v71, v72, v73, v74, v75, v76, (uint64_t)&v104)
    || (v103 = 1602014129,
        v102 = xmmword_19B71817C,
        v101 = -810116762,
        v100 = xmmword_19B718190,
        v99 = -1195351767,
        v98 = xmmword_19B7181A4,
        MGIsDeviceOneOfType((const UInt8 *)&v102, v77, v78, v79, v80, v81, v82, v83, (uint64_t)&v100)))
  {
LABEL_16:
    v91 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v97 = -1022451852;
    v96 = xmmword_19B718398;
    v95 = 1729782187;
    v94 = xmmword_19B7183AC;
    v93 = MGIsDeviceOneOfType((const UInt8 *)&v96, v84, v85, v86, v87, v88, v89, v90, (uint64_t)&v94);
    v91 = MEMORY[0x1E0C9AE40];
    if (!v93)
      v91 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v91;
}

BOOL sub_19B6D386C()
{
  return sub_19B6B9C44() != 4;
}

uint64_t sub_19B6D3888()
{
  CFTypeRef v0;
  const void *v1;
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex v4;
  NSObject *v5;
  const void *ValueAtIndex;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  const void *Value;
  const __CFNumber *v10;
  const __CFNumber *v11;
  float v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  const char *v50;
  NSObject *v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  const char *v66;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint8_t v80[8];
  uint64_t valuePtr;

  valuePtr = 0;
  v0 = IOPSCopyPowerSourcesInfo();
  if (!v0)
  {
    v68 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v68, 3641, (uint64_t)CFSTR("Could not get power source info"), v69, v70, v71, v72, v73, v80[0]);
    v43 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v43;
    *(_WORD *)v80 = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not get power source info", v80, 2u);
    return 0;
  }
  v1 = v0;
  v2 = IOPSCopyPowerSourcesList(v0);
  if (!v2)
  {
    v74 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v74, 3644, (uint64_t)CFSTR("Could not get list of power sources"), v75, v76, v77, v78, v79, v80[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v80 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not get list of power sources", v80, 2u);
    }
    CFRelease(v1);
    return 0;
  }
  v3 = v2;
  if (CFArrayGetCount(v2) < 1)
  {
LABEL_55:
    v43 = 0;
    goto LABEL_56;
  }
  v4 = 0;
  v5 = MEMORY[0x1E0C81028];
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(v3, v4);
    v7 = IOPSGetPowerSourceDescription(v1, ValueAtIndex);
    if (!v7)
    {
      v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v13)
        v19 = v13 + 1;
      else
        v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v19, 3654, (uint64_t)CFSTR("Could not get dictionary for power source"), v14, v15, v16, v17, v18, v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        goto LABEL_36;
      *(_WORD *)v80 = 0;
      v20 = v5;
      v21 = "Could not get dictionary for power source";
LABEL_35:
      _os_log_impl(&dword_19B6B1000, v20, OS_LOG_TYPE_DEFAULT, v21, v80, 2u);
      goto LABEL_36;
    }
    v8 = v7;
    Value = CFDictionaryGetValue(v7, CFSTR("Power Source State"));
    if (!Value)
    {
      v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v22)
        v28 = v22 + 1;
      else
        v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v28, 3661, (uint64_t)CFSTR("No kIOPSPowerSourceStateKey in power source dictionary"), v23, v24, v25, v26, v27, v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        goto LABEL_36;
      *(_WORD *)v80 = 0;
      v20 = v5;
      v21 = "No kIOPSPowerSourceStateKey in power source dictionary";
      goto LABEL_35;
    }
    if (CFEqual(Value, CFSTR("AC Power")))
      goto LABEL_38;
    v10 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("Current Capacity"));
    if (!v10)
    {
      v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v29)
        v35 = v29 + 1;
      else
        v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v35, 3676, (uint64_t)CFSTR("No kIOPSCurrentCapacityKey in power source dictionary"), v30, v31, v32, v33, v34, v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        goto LABEL_36;
      *(_WORD *)v80 = 0;
      v20 = v5;
      v21 = "No kIOPSCurrentCapacityKey in power source dictionary";
      goto LABEL_35;
    }
    if (!CFNumberGetValue(v10, kCFNumberFloatType, &valuePtr))
    {
      v44 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v44)
        v50 = v44 + 1;
      else
        v50 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v50, 3681, (uint64_t)CFSTR("Could not convert CFNumber to float"), v45, v46, v47, v48, v49, v80[0]);
      v43 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      *(_WORD *)v80 = 0;
      v51 = MEMORY[0x1E0C81028];
      v52 = "Could not convert CFNumber to float";
LABEL_54:
      _os_log_impl(&dword_19B6B1000, v51, OS_LOG_TYPE_DEFAULT, v52, v80, 2u);
      goto LABEL_55;
    }
    v11 = (const __CFNumber *)CFDictionaryGetValue(v8, CFSTR("Max Capacity"));
    if (!v11)
    {
      v36 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v36)
        v42 = v36 + 1;
      else
        v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v42, 3688, (uint64_t)CFSTR("No kIOPSMaxCapacityKey in power source dictionary"), v37, v38, v39, v40, v41, v80[0]);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        goto LABEL_36;
      *(_WORD *)v80 = 0;
      v20 = v5;
      v21 = "No kIOPSMaxCapacityKey in power source dictionary";
      goto LABEL_35;
    }
    if (!CFNumberGetValue(v11, kCFNumberFloatType, (char *)&valuePtr + 4))
    {
      v53 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v53)
        v59 = v53 + 1;
      else
        v59 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v59, 3693, (uint64_t)CFSTR("Could not convert CFNumber to float"), v54, v55, v56, v57, v58, v80[0]);
      v43 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_56;
      *(_WORD *)v80 = 0;
      v51 = MEMORY[0x1E0C81028];
      v52 = "Could not convert CFNumber to float";
      goto LABEL_54;
    }
    if (*((float *)&valuePtr + 1) == 0.0)
      break;
    v12 = sub_19B6C3624() + -0.05;
    if ((float)(*(float *)&valuePtr / *((float *)&valuePtr + 1)) >= v12)
    {
LABEL_38:
      v43 = 1;
      goto LABEL_56;
    }
LABEL_36:
    if (CFArrayGetCount(v3) <= ++v4)
      goto LABEL_55;
  }
  v60 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v60)
    v66 = v60 + 1;
  else
    v66 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v66, 3697, (uint64_t)CFSTR("Battery max capacity is reported as 0"), v61, v62, v63, v64, v65, v80[0]);
  v43 = 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v80 = 0;
    v51 = MEMORY[0x1E0C81028];
    v52 = "Battery max capacity is reported as 0";
    goto LABEL_54;
  }
LABEL_56:
  CFRelease(v1);
  CFRelease(v3);
  return v43;
}

uint64_t sub_19B6D3D5C()
{
  return sub_19B6E4914((uint64_t)CFSTR("wlan.lowlatency"));
}

CFNumberRef sub_19B6D3D68()
{
  return sub_19B6BC5F4("IODeviceTree:/product/audio", CFSTR("7pq6UGJM2TaOP2brCspvyA"), 97);
}

BOOL sub_19B6D3D80()
{
  return *MEMORY[0x1E0C9AE50] != 0;
}

CFNumberRef sub_19B6D3D98()
{
  return sub_19B6BA824(3u);
}

CFTypeRef sub_19B6D3DA0()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 5);
  if (!v0)
    v0 = sub_19B6BBD84(5, 2);
  TypeID = CFArrayGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyCarrierBundleInfoArray", v0, TypeID);
}

BOOL sub_19B6D3DEC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("475wW3fne+tyzGr4wleUSQ"), a2);
}

BOOL sub_19B6D3E10(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("475wW3fne+tyzGr4wleUSQ"), 67, a2);
}

BOOL sub_19B6D3E24()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("SLu4aVo/V1CulJ7eyTDh1w"), 101);
}

uint64_t sub_19B6D3E3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  __int128 v18;
  int v19;
  __int128 v20;
  int v21;
  __int128 v22;
  int v23;
  __int128 v24;
  int v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v29 = -38605833;
  v28 = xmmword_19B717BDC;
  v27 = -894965712;
  v26 = xmmword_19B717BF0;
  v25 = -2101636455;
  v24 = xmmword_19B717C04;
  v23 = -1955568593;
  v22 = xmmword_19B717C18;
  if (MGIsDeviceOneOfType((const UInt8 *)&v28, a2, a3, a4, a5, a6, a7, a8, (uint64_t)&v26)
    || sub_19B6B9C44() == 6)
  {
    v15 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v21 = -926344036;
    v20 = xmmword_19B717C2C;
    v19 = -954998212;
    v18 = xmmword_19B717C40;
    v16 = MGIsDeviceOneOfType((const UInt8 *)&v20, v8, v9, v10, v11, v12, v13, v14, (uint64_t)&v18);
    v15 = MEMORY[0x1E0C9AE40];
    if (!v16)
      v15 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v15;
}

uint64_t sub_19B6D3FB8()
{
  return 1;
}

CFNumberRef sub_19B6D3FC0()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("vmZuX/fdqt3gKhonHYLyUw"), 97);
}

uint64_t sub_19B6D3FD8()
{
  return 1;
}

CFStringRef sub_19B6D3FE0()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("mobiledevice-min-ver"), 0);
}

BOOL sub_19B6D3FF8()
{
  return sub_19B6D92C8(1);
}

CFDataRef sub_19B6D4000()
{
  CFDataRef result;

  if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
    return sub_19B6DFCB8(0x454D6132u);
  result = (CFDataRef)sub_19B6BBC28(1, "aqc-a", CFSTR("extlom-mac-address"));
  if (!result)
    return sub_19B6DFCB8(0x454D6132u);
  return result;
}

BOOL sub_19B6D404C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("5Y72WwdS5NYHdc00gEZ/DQ"), a2);
}

BOOL sub_19B6D4070(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("5Y72WwdS5NYHdc00gEZ/DQ"), 69, a2);
}

uint64_t sub_19B6D4084()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  __int128 *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  int v18;
  __int128 v19;
  int v20;
  __int128 v21;
  int v22;
  __int128 v23;
  int v24;
  __int128 v25;
  int v26;
  __int128 v27;
  int v28;
  __int128 v29;
  int v30;
  __int128 v31;
  int v32;
  __int128 v33;
  int v34;
  __int128 v35;
  int v36;
  __int128 v37;
  int v38;
  __int128 v39;
  int v40;
  __int128 v41;
  int v42;
  __int128 v43;
  int v44;
  __int128 v45;
  int v46;
  __int128 v47;
  int v48;
  __int128 v49;
  int v50;
  __int128 v51;
  int v52;
  __int128 v53;
  int v54;
  __int128 v55;
  int v56;
  __int128 v57;
  int v58;
  __int128 v59;
  int v60;
  __int128 v61;
  int v62;
  __int128 v63;
  int v64;
  __int128 v65;
  int v66;
  __int128 v67;
  int v68;
  __int128 v69;
  int v70;
  __int128 v71;
  int v72;
  __int128 v73;
  int v74;
  __int128 v75;
  int v76;
  __int128 v77;
  int v78;
  __int128 v79;
  int v80;
  __int128 v81;
  int v82;
  __int128 v83;
  int v84;
  __int128 v85;
  int v86;
  __int128 v87;
  int v88;
  __int128 v89;
  int v90;
  __int128 v91;
  int v92;
  __int128 v93;
  int v94;
  __int128 v95;
  int v96;
  __int128 v97;
  int v98;
  __int128 v99;
  int v100;
  __int128 v101;
  int v102;
  __int128 v103;
  int v104;
  __int128 v105;
  int v106;
  __int128 v107;
  int v108;
  __int128 v109;
  int v110;
  __int128 v111;
  int v112;
  __int128 v113;
  int v114;
  __int128 v115;
  int v116;
  __int128 v117;
  int v118;
  __int128 v119;
  int v120;
  __int128 v121;
  int v122;
  __int128 v123;
  int v124;
  __int128 v125;
  int v126;
  __int128 v127;
  int v128;
  __int128 v129;
  int v130;
  __int128 v131;
  int v132;
  __int128 v133;
  int v134;
  __int128 v135;
  int v136;
  __int128 v137;
  int v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 1)
  {
    v138 = -232427879;
    v137 = xmmword_19B717C68;
    v136 = -427474227;
    v135 = xmmword_19B717C7C;
    v134 = 1477534141;
    v133 = xmmword_19B717C90;
    v132 = -1843102369;
    v131 = xmmword_19B717CA4;
    v130 = -820493242;
    v129 = xmmword_19B717CB8;
    v128 = -61007701;
    v127 = xmmword_19B717CCC;
    v126 = -235416490;
    v125 = xmmword_19B717CE0;
    v124 = -121925081;
    v123 = xmmword_19B718118;
    v122 = 1071957977;
    v121 = xmmword_19B717CF4;
    v120 = 438437663;
    v119 = xmmword_19B717D08;
    v118 = -382792827;
    v117 = xmmword_19B717D1C;
    v116 = 1575123478;
    v115 = xmmword_19B717D30;
    v114 = 123138233;
    v113 = xmmword_19B717D44;
    v112 = 681511593;
    v111 = xmmword_19B717D58;
    v110 = 713503427;
    v109 = xmmword_19B717D6C;
    v108 = -1632750650;
    v107 = xmmword_19B717D80;
    v106 = -1431778695;
    v105 = xmmword_19B717D94;
    v7 = &v135;
    v8 = &v137;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }
  if (sub_19B6B9C44() == 3)
  {
    v104 = -1022451852;
    v103 = xmmword_19B718398;
    v102 = 1729782187;
    v101 = xmmword_19B7183AC;
    v100 = 996646949;
    v99 = xmmword_19B7183C0;
    v98 = -563086000;
    v97 = xmmword_19B7183D4;
    v96 = 317289457;
    v95 = xmmword_19B718348;
    v94 = 401945557;
    v93 = xmmword_19B71835C;
    v92 = -1157300313;
    v91 = xmmword_19B718370;
    v90 = -2132668294;
    v89 = xmmword_19B718384;
    v88 = 2030516999;
    v87 = xmmword_19B717DA8;
    v86 = -1276010597;
    v85 = xmmword_19B717DBC;
    v84 = -762483149;
    v83 = xmmword_19B717DD0;
    v82 = -1926937532;
    v81 = xmmword_19B717DE4;
    v80 = -1902732724;
    v79 = xmmword_19B717DF8;
    v78 = -342357580;
    v77 = xmmword_19B717E0C;
    v76 = 300442574;
    v75 = xmmword_19B717E20;
    v74 = -1294188889;
    v73 = xmmword_19B717E34;
    v72 = 1126727276;
    v71 = xmmword_19B717E48;
    v70 = 300130091;
    v69 = xmmword_19B717E5C;
    v68 = 343814884;
    v67 = xmmword_19B717E70;
    v66 = -1675932945;
    v65 = xmmword_19B717E84;
    v64 = 1278131292;
    v63 = xmmword_19B717E98;
    v62 = -1841712216;
    v61 = xmmword_19B717EAC;
    v60 = 659506830;
    v59 = xmmword_19B717EC0;
    v58 = 213746202;
    v57 = xmmword_19B717ED4;
    v56 = 372777383;
    v55 = xmmword_19B717EE8;
    v54 = -858079590;
    v53 = xmmword_19B717EFC;
    v52 = -212523443;
    v51 = xmmword_19B717F10;
    v50 = 646100384;
    v49 = xmmword_19B717F24;
    v48 = 345196535;
    v47 = xmmword_19B717F38;
    v46 = 440949464;
    v45 = xmmword_19B717F4C;
    v44 = -545612308;
    v43 = xmmword_19B717F60;
    v42 = 1178062702;
    v41 = xmmword_19B717F74;
    v40 = -695298128;
    v39 = xmmword_19B717F88;
    v38 = 804488105;
    v37 = xmmword_19B717F9C;
    v36 = 1614584579;
    v35 = xmmword_19B717FB0;
    v34 = 324288768;
    v33 = xmmword_19B717FC4;
    v32 = 460218192;
    v31 = xmmword_19B717FD8;
    v30 = 2144905009;
    v29 = xmmword_19B717FEC;
    v28 = 127894440;
    v27 = xmmword_19B718000;
    v26 = 1070997468;
    v25 = xmmword_19B718014;
    v24 = 688565114;
    v23 = xmmword_19B718028;
    v22 = -493418906;
    v21 = xmmword_19B71803C;
    v7 = &v101;
    v8 = &v103;
    return MGIsDeviceOneOfType((const UInt8 *)v8, v0, v1, v2, v3, v4, v5, v6, (uint64_t)v7) ^ 1;
  }
  result = 0;
  if (sub_19B6B9C44() == 6 && sub_19B6B5FE0((_BOOL8)CFSTR("M11")))
  {
    v20 = 1530338216;
    v19 = xmmword_19B718050;
    v18 = 406601745;
    v17 = xmmword_19B718064;
    if (!MGIsDeviceOneOfType((const UInt8 *)&v19, v10, v11, v12, v13, v14, v15, v16, (uint64_t)&v17))
      return 1;
  }
  return result;
}

BOOL sub_19B6D4984()
{
  if (sub_19B6B9C44() == 7)
    return 0;
  if (sub_19B6B5FE0((_BOOL8)CFSTR("M9")))
    return 1;
  return sub_19B6B5FE0((_BOOL8)CFSTR("H10"));
}

BOOL sub_19B6D49D0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("67x5O+zO+JwnGgmKlq+qdA"), a2);
}

BOOL sub_19B6D49F4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("67x5O+zO+JwnGgmKlq+qdA"), 68, a2);
}

CFTypeRef sub_19B6D4A08()
{
  return sub_19B6DB304(8, 1, 2);
}

BOOL sub_19B6D4A18(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("rkFHO5dZmWxy3QdOx7r7kA"), a2);
}

BOOL sub_19B6D4A3C(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("rkFHO5dZmWxy3QdOx7r7kA"), 77, a2);
}

BOOL sub_19B6D4A50()
{
  int v0;
  _BOOL8 result;
  int v2;

  v0 = sub_19B6B9C44();
  if (_CFMZEnabled())
    return 0;
  v2 = sub_19B6B9C44();
  result = 1;
  if (v2 != 1 && v0 != 3)
    return sub_19B6B9C44() == 2
        || sub_19B6B9C44() == 6
        || sub_19B6B9C44() == 11;
  return result;
}

uint64_t sub_19B6D4AC8()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("v7h4TrJdmukTl8gpzVl3DQ"), 103);
}

BOOL sub_19B6D4AE0()
{
  return *MEMORY[0x1E0C9AE50] != 0;
}

BOOL sub_19B6D4AF8()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("twWCmmM9I0dxwv7Zs9v48Q"), 97);
}

CFDataRef sub_19B6D4B10()
{
  return sub_19B6DD2D4("AppleSEPManager", 0x2Au, 0, 0, 0x8000uLL);
}

BOOL sub_19B6D4B2C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("r5pA2qLgR86BQKwgMjPWzg"), a2);
}

BOOL sub_19B6D4B50(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("r5pA2qLgR86BQKwgMjPWzg"), 76, a2);
}

BOOL sub_19B6D4B64()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("0gkWjKWKuS2gqzTaFHKxqw"), 115);
}

BOOL sub_19B6D4B7C()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("bmYssgjtQNKMy3Zhf8N+2w"), 115);
}

CFStringRef sub_19B6D4B94()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  CFIndex Length;
  const UInt8 *BytePtr;
  CFMutableStringRef Mutable;
  CFIndex v6;
  unsigned __int8 *v7;
  unsigned int v8;
  CFStringRef Copy;

  v0 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("yF2IQrYS4yyREV4ZkbLysw"), 0);
  if (!v0)
    return 0;
  v1 = v0;
  v2 = CFGetTypeID(v0);
  if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) < 6)
    goto LABEL_9;
  Length = CFDataGetLength(v1);
  BytePtr = CFDataGetBytePtr(v1);
  Mutable = CFStringCreateMutable(0, 0);
  CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), *BytePtr);
  if (Length >= 2)
  {
    v6 = Length - 1;
    v7 = (unsigned __int8 *)(BytePtr + 1);
    do
    {
      v8 = *v7++;
      CFStringAppendFormat(Mutable, 0, CFSTR(":%02x"), v8);
      --v6;
    }
    while (v6);
  }
  if (Mutable)
  {
    Copy = CFStringCreateCopy(0, Mutable);
    CFRelease(Mutable);
  }
  else
  {
LABEL_9:
    Copy = 0;
  }
  CFRelease(v1);
  return Copy;
}

BOOL sub_19B6D4CB0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("W/xqvBX9L07XHb0BOtYycQ"), a2);
}

BOOL sub_19B6D4CD4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("W/xqvBX9L07XHb0BOtYycQ"), 84, a2);
}

BOOL sub_19B6D4CE8()
{
  return sub_19B6BACD0((uint64_t)CFSTR("GoogleMail"), CFSTR("RegionalBehaviorGoogleMail"));
}

CFDataRef sub_19B6D4CFC()
{
  _OWORD v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D8520(CFSTR("volume-down-button-location"), 0, (uint64_t *)v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

uint64_t sub_19B6D4D4C()
{
  _BOOL4 v0;
  uint64_t v1;

  v0 = sub_19B6BAC78("IODeviceTree:/product", CFSTR("location-reminders"), 0);
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFTypeRef sub_19B6D4D90()
{
  if (sub_19B6B5FA0())
    return sub_19B6BBC28(0, "AppleVirtualPlatformARMPE", CFSTR("UDID"));
  else
    return 0;
}

BOOL sub_19B6D4DC8(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("sjGZBQzow3yV/IOa0wCeoQ"), a2);
}

BOOL sub_19B6D4DEC(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("sjGZBQzow3yV/IOa0wCeoQ"), 86, a2);
}

uint64_t sub_19B6D4E00()
{
  const void *v0;
  uint64_t v1;

  v0 = (const void *)sub_19B6E4558((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("multi-touch"), 0, (uint64_t)CFSTR("force-supported"), 0);
  if (!v0)
    return *MEMORY[0x1E0C9AE40];
  v1 = *MEMORY[0x1E0C9AE50];
  CFRelease(v0);
  return v1;
}

CFNumberRef sub_19B6D4E64()
{
  return sub_19B6D88E4(0);
}

const void *sub_19B6D4E6C()
{
  return sub_19B6B89E4((const char **)CFSTR("s8TgWYc7BjtSNbtuycqauw"), 0);
}

BOOL sub_19B6D4E7C()
{
  return sub_19B6B9C44() == 6;
}

BOOL sub_19B6D4E98()
{
  return sub_19B6C0844("arm64");
}

uint64_t sub_19B6D4EA4()
{
  int v0;
  uint64_t v1;

  v0 = sub_19B6DA95C();
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0)
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFStringRef sub_19B6D4ED4()
{
  return sub_19B6BC39C("IODeviceTree:/chosen", CFSTR("3sF/uRq+X+mZ2zGHSJOwpw"), 99);
}

uint64_t sub_19B6D4EEC()
{
  return sub_19B6D94D8("CIO");
}

CFStringRef sub_19B6D4EF8()
{
  return sub_19B6BC39C("IODeviceTree:/product", CFSTR("kc+QzHP4Frf2NvP+mclQ2A"), 119);
}

CFMutableDictionaryRef sub_19B6D4F10()
{
  CFMutableDictionaryRef Mutable;
  _BOOL4 v2;
  const __CFAllocator *v3;
  CFIndex v4;
  CFNumberRef v5;
  CFNumberRef v6;
  __int128 *v7;
  __int128 *v8;
  __int128 *v9;
  __int128 *v10;
  const __CFData *v11;
  const __CFData *v12;
  double *BytePtr;
  double *v14;
  int v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  __CFArray *v26;
  __CFArray *v27;
  __CFArray *v28;
  __CFArray *v29;
  __CFArray *v30;
  __CFArray *v31;
  CFNumberRef v32;
  BOOL v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFArrayRef v40;
  CFArrayRef v41;
  int v42;
  int valuePtr;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 6 || sub_19B6B9C44() == 7 || sub_19B6B9C44() == 4)
    return 0;
  v84 = xmmword_19B7187D0;
  v85 = xmmword_19B7187C0;
  v82 = xmmword_19B7187F0;
  v83 = xmmword_19B7187E0;
  v80 = xmmword_19B718810;
  v81 = xmmword_19B718800;
  v78 = xmmword_19B718830;
  v79 = xmmword_19B718820;
  v76 = xmmword_19B718840;
  v77 = xmmword_19B718930;
  v74 = xmmword_19B718930;
  v75 = xmmword_19B718850;
  v72 = xmmword_19B718860;
  v73 = xmmword_19B718910;
  v70 = xmmword_19B718870;
  v71 = xmmword_19B718910;
  v68 = xmmword_19B718880;
  v69 = xmmword_19B718930;
  v66 = xmmword_19B7188A0;
  v67 = xmmword_19B718890;
  v64 = xmmword_19B7188C0;
  v65 = xmmword_19B7188B0;
  v62 = xmmword_19B7188E0;
  v63 = xmmword_19B7188D0;
  v60 = xmmword_19B7188F0;
  v61 = xmmword_19B718910;
  v58 = xmmword_19B718900;
  v59 = xmmword_19B718930;
  v57 = xmmword_19B718910;
  v55 = xmmword_19B718930;
  v56 = xmmword_19B718920;
  v53 = xmmword_19B718950;
  v54 = xmmword_19B718940;
  v51 = xmmword_19B718970;
  v52 = xmmword_19B718960;
  v49 = xmmword_19B718990;
  v50 = xmmword_19B718980;
  v48 = xmmword_19B7189A0;
  v42 = -1;
  valuePtr = 0;
  v2 = MGGetBoolAnswer((const char **)CFSTR("DeviceSupportsReverseZoom"));
  v3 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  if (v2)
    v4 = 4;
  else
    v4 = 2;
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v4, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (Mutable)
  {
    v5 = sub_19B6BC5F4("IODeviceTree:/product", CFSTR("artwork-device-subtype"), 0);
    v6 = sub_19B6BC5F4("IODeviceTree:/product", CFSTR("artwork-scale-factor"), 0);
    if (v5)
    {
      if (CFNumberGetValue(v5, kCFNumberSInt32Type, &valuePtr))
      {
        if (!v6 || !CFNumberGetValue(v6, kCFNumberSInt32Type, &v42))
        {
LABEL_104:
          CFRelease(v5);
LABEL_105:
          if (!v6)
            return Mutable;
LABEL_106:
          CFRelease(v6);
          return Mutable;
        }
        if (v42 == 2 && valuePtr == 2688)
        {
          valuePtr = 1792;
LABEL_17:
          v7 = 0;
          v8 = 0;
          v9 = &v75;
          v10 = &v76;
          goto LABEL_18;
        }
        if (valuePtr > 2435)
        {
          if (valuePtr <= 2731)
          {
            if (valuePtr > 2555)
            {
              switch(valuePtr)
              {
                case 2556:
                  v7 = 0;
                  v8 = 0;
                  v9 = &v61;
                  v10 = &v62;
                  goto LABEL_18;
                case 2622:
                  v7 = 0;
                  v8 = 0;
                  v9 = &v57;
                  v10 = &v58;
                  goto LABEL_18;
                case 2688:
                  v7 = 0;
                  v8 = 0;
                  v9 = &v77;
                  v10 = &v78;
                  goto LABEL_18;
              }
              goto LABEL_92;
            }
            if (valuePtr != 2436)
            {
              if (valuePtr == 2532)
              {
                v7 = 0;
                v8 = 0;
                v9 = &v71;
                v10 = &v72;
                goto LABEL_18;
              }
              goto LABEL_92;
            }
LABEL_80:
            v7 = 0;
            v8 = 0;
            v9 = &v73;
            v10 = &v74;
            goto LABEL_18;
          }
          if (valuePtr > 2777)
          {
            switch(valuePtr)
            {
              case 2778:
                v7 = 0;
                v8 = 0;
                v9 = &v69;
                v10 = &v70;
                goto LABEL_18;
              case 2796:
                v7 = 0;
                v8 = 0;
                v9 = &v59;
                v10 = &v60;
                goto LABEL_18;
              case 2868:
                v7 = 0;
                v8 = 0;
                v9 = &v55;
                v10 = &v56;
                goto LABEL_18;
            }
            goto LABEL_92;
          }
          if (valuePtr == 2732)
          {
            v8 = 0;
            if (v2)
              v7 = &v79;
            else
              v7 = 0;
            v9 = &v80;
            v10 = &v81;
LABEL_18:
            v11 = (const __CFData *)sub_19B6C1620();
            v12 = v11;
            if (v11)
            {
              if (CFDataGetLength(v11) >= 16)
              {
                BytePtr = (double *)CFDataGetBytePtr(v12);
                if (valuePtr == 2732)
                {
                  v14 = BytePtr;
                  if (BytePtr[1] > *BytePtr)
                  {
                    v15 = *((_DWORD *)v10 + 1);
                    *((_DWORD *)v10 + 1) = *((_DWORD *)v10 + 3);
                    *((_DWORD *)v10 + 3) = v15;
                    v16 = *((_DWORD *)v9 + 1);
                    *((_DWORD *)v9 + 1) = *((_DWORD *)v9 + 3);
                    *((_DWORD *)v9 + 3) = v16;
                    if (v7)
                    {
                      v17 = *((_DWORD *)v7 + 1);
                      *((_DWORD *)v7 + 1) = *((_DWORD *)v7 + 3);
                      *((_DWORD *)v7 + 3) = v17;
                    }
                    v18 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
                    _MGLog((uint64_t)v18, 2046, (uint64_t)CFSTR("copyAvailableDisplayZoomSizes: Changed landscape to portrait for %dx%d"), v19, v20, v21, v22, v23, (int)v14[1]);
                    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
                    {
                      v24 = (int)v14[1];
                      v25 = (int)*v14;
                      *(_DWORD *)buf = 67109376;
                      v45 = v24;
                      v46 = 1024;
                      v47 = v25;
                      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "copyAvailableDisplayZoomSizes: Changed landscape to portrait for %dx%d", buf, 0xEu);
                    }
                  }
                }
              }
            }
            v26 = sub_19B6D9C80((uint64_t)v10);
            if (v26)
            {
              v27 = v26;
              v28 = sub_19B6D9C80((uint64_t)v9);
              if (v28)
              {
                v29 = v28;
                if (v7)
                {
                  v30 = sub_19B6D9C80((uint64_t)v7);
                  if (!v30)
                  {
                    CFRelease(Mutable);
                    v31 = 0;
LABEL_59:
                    Mutable = 0;
                    goto LABEL_69;
                  }
                }
                else
                {
                  v30 = 0;
                }
                if (v8)
                {
                  v31 = sub_19B6D9C80((uint64_t)v8);
                  if (!v31)
                  {
                    CFRelease(Mutable);
                    goto LABEL_59;
                  }
                }
                else
                {
                  v31 = 0;
                }
                CFDictionarySetValue(Mutable, CFSTR("default"), v27);
                CFDictionarySetValue(Mutable, CFSTR("zoomed"), v29);
                if (v7)
                  CFDictionarySetValue(Mutable, CFSTR("dense"), v30);
                if (v8)
                  CFDictionarySetValue(Mutable, CFSTR("denser"), v31);
LABEL_69:
                CFRelease(v29);
                CFRelease(v27);
                if (v30)
                  CFRelease(v30);
                if (!v31)
                  goto LABEL_73;
                goto LABEL_72;
              }
              CFRelease(Mutable);
              Mutable = 0;
              v31 = v27;
            }
            else
            {
              v31 = Mutable;
              Mutable = 0;
            }
LABEL_72:
            CFRelease(v31);
LABEL_73:
            CFRelease(v5);
            if (v12)
              CFRelease(v12);
            goto LABEL_106;
          }
          if (valuePtr == 2752)
          {
            v33 = !v2;
            if (v2)
              v7 = &v49;
            else
              v7 = 0;
            if (v33)
              v8 = 0;
            else
              v8 = &v48;
            v9 = &v51;
            v10 = &v50;
            goto LABEL_18;
          }
LABEL_92:
          v34 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
          _MGLog((uint64_t)v34, 2022, (uint64_t)CFSTR("Unsupported artwork-device-subtype %d"), v35, v36, v37, v38, v39, valuePtr);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            v45 = valuePtr;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unsupported artwork-device-subtype %d", buf, 8u);
          }
          goto LABEL_100;
        }
        if (valuePtr <= 2223)
        {
          if (valuePtr > 569)
          {
            if (valuePtr == 570)
            {
              v7 = 0;
              v8 = 0;
              v9 = &v82;
              v10 = &v83;
              goto LABEL_18;
            }
            if (valuePtr == 1792)
              goto LABEL_17;
            goto LABEL_92;
          }
          if (valuePtr != 568)
          {
            if (valuePtr == 569)
            {
              v7 = 0;
              v8 = 0;
              v9 = &v84;
              v10 = &v85;
              goto LABEL_18;
            }
            goto LABEL_92;
          }
        }
        else
        {
          if (valuePtr > 2359)
          {
            switch(valuePtr)
            {
              case 2360:
                if (v2)
                {
                  v8 = &v63;
                  v9 = &v64;
                  v10 = &v65;
                  v7 = &v64;
                  goto LABEL_18;
                }
                goto LABEL_100;
              case 2388:
                if (v2)
                {
                  v8 = &v66;
                  v9 = &v67;
                  v10 = &v68;
                  v7 = &v67;
                  goto LABEL_18;
                }
                goto LABEL_100;
              case 2420:
                if (v2)
                {
                  v8 = &v52;
                  v9 = &v53;
                  v10 = &v54;
                  v7 = &v53;
                  goto LABEL_18;
                }
                goto LABEL_100;
            }
            goto LABEL_92;
          }
          if (valuePtr != 2224)
          {
            if (valuePtr == 2340)
              goto LABEL_80;
            goto LABEL_92;
          }
        }
LABEL_100:
        v40 = CFArrayCreate(v3, 0, 0, MEMORY[0x1E0C9B378]);
        if (v40)
        {
          v41 = v40;
          CFDictionarySetValue(Mutable, CFSTR("default"), v40);
          CFDictionarySetValue(Mutable, CFSTR("zoomed"), v41);
        }
        else
        {
          v41 = Mutable;
          Mutable = 0;
        }
        CFRelease(v41);
        goto LABEL_104;
      }
      CFRelease(Mutable);
      v32 = v5;
    }
    else
    {
      v32 = Mutable;
    }
    CFRelease(v32);
    Mutable = 0;
    goto LABEL_105;
  }
  return Mutable;
}

const void *sub_19B6D57AC()
{
  return sub_19B6B2C64("IODeviceTree:/product", CFSTR("GvmsjQ/68T7do2CJxUhMig"), 98);
}

BOOL sub_19B6D57C4(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("IAJzgzhEVk3SMNuEhChs2w"), a2);
}

BOOL sub_19B6D57E8(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("IAJzgzhEVk3SMNuEhChs2w"), 82, a2);
}

BOOL sub_19B6D57FC()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("g7yZjVHqRxbfXOqns+Sm9w"), 102);
}

BOOL sub_19B6D5814()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("kT9JwUR2xPCTHTdgvG3UdA"), 116);
}

uint64_t sub_19B6D582C()
{
  uint64_t v0;
  const __CFData *v1;
  const __CFData *v2;
  int64_t Length;
  const UInt8 *BytePtr;
  const char *v5;
  const UInt8 *v6;
  size_t v7;

  v0 = *MEMORY[0x1E0C9AE40];
  v1 = (const __CFData *)sub_19B6B2C64("IODeviceTree:/buttons", CFSTR("button-names"), 0);
  if (v1)
  {
    v2 = v1;
    Length = CFDataGetLength(v1);
    BytePtr = CFDataGetBytePtr(v2);
    if (Length >= 1)
    {
      v5 = (const char *)BytePtr;
      v6 = &BytePtr[Length];
      while (strncmp(v5, "app", Length))
      {
        v7 = strnlen(v5, Length);
        v5 += v7 + 1;
        Length -= v7 + 1;
        if (v5 >= (const char *)v6)
          goto LABEL_8;
      }
      v0 = *MEMORY[0x1E0C9AE50];
    }
LABEL_8:
    CFRelease(v2);
  }
  return v0;
}

CFDataRef sub_19B6D58F8()
{
  return sub_19B6DD058("AppleMobileApNonce", 0xC8u, 0, 0, 0x20uLL);
}

CFTypeRef sub_19B6D5914()
{
  uint64_t v0;
  CFTypeID TypeID;

  v0 = *((_QWORD *)off_1EE3FD5A0 + 11);
  if (!v0)
    v0 = sub_19B6BBD84(11, 2);
  TypeID = CFDictionaryGetTypeID();
  return sub_19B6BD1F0((uint64_t)"_CTServerConnectionCopyFirmwareUpdateInfo", v0, TypeID);
}

CFDataRef sub_19B6D5960()
{
  float64x2_t v1[2];

  memset(v1, 0, sizeof(v1));
  if (sub_19B6D842C(CFSTR("volume-up-button-location"), 0, v1))
    return CFDataCreate(0, (const UInt8 *)v1, 32);
  else
    return 0;
}

const __CFString *sub_19B6D59B0()
{
  CFStringRef v0;
  const __SCPreferences *v1;
  const __SCPreferences *v2;
  const char *v3;
  char *v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint8_t buf[4];
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C84())
    return CFSTR("iPad");
  v1 = SCPreferencesCreate(0, CFSTR("MobileGestalt"), 0);
  if (!v1)
    return 0;
  v2 = v1;
  if (SCPreferencesLock(v1, 1u))
  {
    v0 = SCDynamicStoreCopyComputerName(0, 0);
    SCPreferencesUnlock(v2);
  }
  else
  {
    v3 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v4)
      v3 = v4 + 1;
    v5 = SCError();
    v6 = SCErrorString(v5);
    _MGLog((uint64_t)v3, 4679, (uint64_t)CFSTR("SCPreferencesLock: %s"), v7, v8, v9, v10, v11, v6);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v12 = SCError();
      *(_DWORD *)buf = 136315138;
      v15 = SCErrorString(v12);
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "SCPreferencesLock: %s", buf, 0xCu);
    }
    v0 = SCDynamicStoreCopyComputerName(0, 0);
  }
  CFRelease(v2);
  return v0;
}

uint64_t sub_19B6D5B08()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 26);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(26, 2);
  return v0();
}

BOOL sub_19B6D5B34(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("MWduuAGptrl7qIzWqBmOqQ"), a2);
}

BOOL sub_19B6D5B58(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("MWduuAGptrl7qIzWqBmOqQ"), 65, a2);
}

CFNumberRef sub_19B6D5B6C()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("j/8nlHWXO3OvKHQHgl905Q"), 102);
}

BOOL sub_19B6D5B84()
{
  return sub_19B6BAC78("IODeviceTree:/buttons", CFSTR("MzxVeXMzucmEMx2lw8Pg1Q"), 111);
}

CFNumberRef sub_19B6D5B9C()
{
  int valuePtr;

  if (!sub_19B6B61A0((_BOOL8)CFSTR("H4")) && sub_19B6B9C44() != 4)
    sub_19B6B9C44();
  valuePtr = 1065353216;
  return CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
}

const void *sub_19B6D5BEC()
{
  return sub_19B6B2C64("IODeviceTree:/product/audio", CFSTR("4eFYRO4KDf8py/Zf3iHWZw"), 115);
}

BOOL sub_19B6D5C04()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("gukw/2mRLE2GyqXJFEu7ng"), 114);
}

BOOL sub_19B6D5C20()
{
  return !sub_19B6BAC78("IODeviceTree:/product", CFSTR("D3LeXyjrxDFYSi6pWFEL4A"), 117);
}

CFTypeRef sub_19B6D5C4C()
{
  return sub_19B6DB84C(1);
}

BOOL sub_19B6D5C54(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("SZy8T5ma/+a0wJc0ntiaaA"), a2);
}

BOOL sub_19B6D5C78(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("SZy8T5ma/+a0wJc0ntiaaA"), 80, a2);
}

uint64_t sub_19B6D5C8C()
{
  return sub_19B6E4448((uint64_t)"IODeviceTree:", (uint64_t)CFSTR("RaX3KBmG7H9fUOEtLK/I6w"), 115, (uint64_t)CFSTR("XyppJjhSQE2982ZYgXlh2g"), 115);
}

uint64_t sub_19B6D5CB0()
{
  _BOOL4 v0;
  uint64_t v1;

  if (sub_19B6B9C44() == 4)
  {
    v0 = sub_19B6BACAC("IODeviceTree:/product", CFSTR("builtin-remote"), 0);
    v1 = MEMORY[0x1E0C9AE40];
    if (!v0)
      v1 = MEMORY[0x1E0C9AE50];
  }
  else
  {
    v1 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v1;
}

BOOL sub_19B6D5D0C()
{
  return sub_19B6BAC78("IODeviceTree:/product", CFSTR("bxQyyA/qJ3QQXTiHBsW2eg"), 111);
}

uint64_t sub_19B6D5D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;
  int v10;
  __int128 v11;
  int v12;
  __int128 v13;
  int v14;
  __int128 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 7)
    return 3;
  if (sub_19B6B9C44() == 4)
  {
    v16 = 1839812531;
    v15 = xmmword_19B718320;
    if ((MGIsDeviceOfType((const UInt8 *)&v15) & 1) == 0)
    {
      v14 = -435113336;
      v13 = xmmword_19B718334;
      if (MGIsDeviceOfType((const UInt8 *)&v13))
        return 3;
      else
        return 5;
    }
    return 1;
  }
  if (sub_19B6B9C44() == 6)
  {
    if (!sub_19B6B5FE0((_BOOL8)CFSTR("M9")))
      return 1;
    v0 = 2;
    if (!sub_19B6B61A0((_BOOL8)CFSTR("M9")))
    {
      if (sub_19B6B61A0((_BOOL8)CFSTR("M10")))
        return 2;
      else
        return 3;
    }
  }
  else
  {
    v12 = 317289457;
    v11 = xmmword_19B718348;
    v10 = 401945557;
    v9 = xmmword_19B71835C;
    if (MGIsDeviceOneOfType((const UInt8 *)&v11, v1, v2, v3, v4, v5, v6, v7, (uint64_t)&v9))
      return 3;
    else
      return 4;
  }
  return v0;
}

CFDataRef sub_19B6D5F64()
{
  CFDataRef result;

  result = (CFDataRef)sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("mac-address-ethernet0"), 0);
  if (!result)
  {
    result = (CFDataRef)sub_19B6DC190("ethernet");
    if (!result)
      return sub_19B6DFCB8(0x454D6163u);
  }
  return result;
}

BOOL sub_19B6D5FB0(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("aOq/O8u9f/bpWUnKco+xgA"), a2);
}

BOOL sub_19B6D5FD4(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("aOq/O8u9f/bpWUnKco+xgA"), 69, a2);
}

uint64_t sub_19B6D5FE8()
{
  if (MGGetBoolAnswer((const char **)CFSTR("j8/Omm6s1lsmTDFsXjsBfA")))
    return 1;
  else
    return sub_19B6E4448((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("disp0"), 0, (uint64_t)CFSTR("always-on-device-flipbook"), 0);
}

uint64_t sub_19B6D6034()
{
  return sub_19B6E4448((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("y66yh6E28lG6AIdLLwEvSQ"), 100, (uint64_t)CFSTR("yhZxZlqgBWwf4bN9t6fFyA"), 97);
}

uint64_t sub_19B6D6058()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("rwnje21oPXH375umjxV6YQ"), 97);
}

BOOL sub_19B6D6070()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("OCKVZEIuMz4sxhLz7vmQ5w"), 115);
}

uint64_t sub_19B6D6088()
{
  const __CFData *v0;
  const __CFData *v1;
  const UInt8 *BytePtr;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  __int16 v36;
  uint8_t v37[2];
  __int16 v38;
  uint8_t buf[16];

  v0 = (const __CFData *)sub_19B6B2C64("IODeviceTree:/product", CFSTR("cover-glass"), 0);
  if (v0)
  {
    v1 = v0;
    if (CFDataGetLength(v0) == 8)
    {
      BytePtr = CFDataGetBytePtr(v1);
      if (BytePtr)
      {
        v3 = *((unsigned int *)BytePtr + 1);
        if ((int)v3 < 3)
          goto LABEL_26;
        v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        v10 = v4 ? v4 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v10, 5419, (uint64_t)CFSTR("Invlid glass type"), v5, v6, v7, v8, v9, v36);
        v3 = 0;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_26;
        v36 = 0;
        v11 = MEMORY[0x1E0C81028];
        v12 = "Invlid glass type";
        v13 = (uint8_t *)&v36;
      }
      else
      {
        v28 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v28)
          v34 = v28 + 1;
        else
          v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v34, 5412, (uint64_t)CFSTR("CFDataGetBytePtr"), v29, v30, v31, v32, v33, v36);
        v3 = 0;
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_26;
        *(_WORD *)v37 = 0;
        v11 = MEMORY[0x1E0C81028];
        v12 = "CFDataGetBytePtr";
        v13 = v37;
      }
    }
    else
    {
      v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v21)
        v27 = v21 + 1;
      else
        v27 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v27, 5406, (uint64_t)CFSTR("I/O Invalid data returned"), v22, v23, v24, v25, v26, v36);
      v3 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_26;
      v38 = 0;
      v11 = MEMORY[0x1E0C81028];
      v12 = "I/O Invalid data returned";
      v13 = (uint8_t *)&v38;
    }
    _os_log_impl(&dword_19B6B1000, v11, OS_LOG_TYPE_DEFAULT, v12, v13, 2u);
    v3 = 0;
LABEL_26:
    CFRelease(v1);
    return v3;
  }
  v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v14)
    v20 = v14 + 1;
  else
    v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v20, 5401, (uint64_t)CFSTR("copyDataFromDeviceTree failed"), v15, v16, v17, v18, v19, v36);
  v3 = 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "copyDataFromDeviceTree failed", buf, 2u);
    return 0;
  }
  return v3;
}

BOOL sub_19B6D62B4()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("OJTdSHEAfpOvV6m6o+Ou1w"), 109);
}

uint64_t sub_19B6D62CC()
{
  return 0;
}

const void *sub_19B6D62D4()
{
  return sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("kQ8nm82jb5iTBUwT2M3aIQ"), 109);
}

BOOL sub_19B6D62EC(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("5MXFoiW2zgxfIbaaTb/wvA"), a2);
}

BOOL sub_19B6D6310(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("5MXFoiW2zgxfIbaaTb/wvA"), 83, a2);
}

BOOL sub_19B6D6324()
{
  return sub_19B6BAC78("IODeviceTree:/arm-io/isp", CFSTR("aHrkhDFY/f2ophZ5/MqX0w"), 102);
}

BOOL sub_19B6D633C()
{
  return sub_19B6B9C44() == 3 && sub_19B6B2F30((uint64_t)CFSTR("baseband"), 0);
}

BOOL sub_19B6D6370()
{
  _BOOL8 result;

  result = MGGetBoolAnswer((const char **)CFSTR("BWoQXWXYITrPRpFyc9xTLw"));
  if (result)
    return sub_19B6B9C44() == 3
        || sub_19B6B9C44() == 4
        || sub_19B6B9C44() == 1;
  return result;
}

uint64_t sub_19B6D63BC()
{
  _BOOL4 v0;
  int v1;
  unsigned int v2;
  int v4;

  v4 = -1;
  v0 = sub_19B6B84A4((const char **)CFSTR("UDftNoVOBIs9cSeia57q1A"), 5, 5, kCFNumberSInt32Type, &v4);
  v1 = v4;
  if (!v0)
    v1 = -1;
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  if (v1 == -1)
    return 0;
  else
    return v2;
}

BOOL sub_19B6D6418()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("flgGiGu1dR1hEWcC1cTLTw"), 114);
}

CFNumberRef sub_19B6D6430()
{
  return sub_19B6BC5F4("IODeviceTree:/baseband", CFSTR("50/CmBTX6jhkb8Z61hzwhQ"), 99);
}

CFNumberRef sub_19B6D6448()
{
  return sub_19B6BC5F4("IODeviceTree:/product/camera", CFSTR("knoZzQDWpu6OQWS7wgRWLg"), 114);
}

CFNumberRef sub_19B6D6460()
{
  int valuePtr;

  if (sub_19B6B9C44() != 1 && sub_19B6B9C44() != 3)
    return 0;
  valuePtr = 1080033280;
  return CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
}

BOOL sub_19B6D64B0()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("PT6XKHaOkrxhQTpTVI8Rlw"), 115);
}

uint64_t sub_19B6D64C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 3 && sub_19B6B9C44() != 1 && sub_19B6B9C44() != 2)
    return 0;
  v11 = 1032708406;
  v10 = xmmword_19B7183E8;
  v9 = 729903963;
  v8 = xmmword_19B7183FC;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

CFNumberRef sub_19B6D65C8()
{
  return sub_19B6BC5F4("IODeviceTree:/product/facetime", CFSTR("S5Bf9bF00BTHrySCydAkdg"), 98);
}

uint64_t sub_19B6D65E0()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/", (uint64_t)CFSTR("RaX3KBmG7H9fUOEtLK/I6w"), 115);
}

BOOL sub_19B6D65F8()
{
  const __CFString *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;

  v0 = sub_19B6B665C();
  v7 = sub_19B6B5F40((_BOOL8)v0, CFSTR("Internal"), v1, v2, v3, v4, v5, v6, (uint64_t)CFSTR("Lite Internal"));
  if (v0)
    CFRelease(v0);
  return v7;
}

BOOL sub_19B6D6658()
{
  return sub_19B6BACD0((uint64_t)CFSTR("Valid"), CFSTR("RegionalBehaviorValid"));
}

BOOL sub_19B6D666C()
{
  return sub_19B6BACAC("IODeviceTree:/product/audio", CFSTR("BjJV766k5l7T4e9KHEKuBw"), 119);
}

CFStringRef sub_19B6D6684()
{
  CFStringRef result;

  result = sub_19B6BB96C(0, "AppleHapticsSupportArcEEPROM", CFSTR("ArcSerialNumber"));
  if (!result)
  {
    result = sub_19B6BB96C(0, "AppleAD5860", CFSTR("arc-sn"));
    if (!result)
      return sub_19B6BC39C("IODeviceTree:/product", CFSTR("arc-module-serial-num"), 0);
  }
  return result;
}

BOOL sub_19B6D66E4(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("KzUQgIyBRinkweVMNUCOWA"), a2);
}

BOOL sub_19B6D6708(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("KzUQgIyBRinkweVMNUCOWA"), 65, a2);
}

CFStringRef sub_19B6D671C()
{
  unsigned int v0;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char v9;
  uint8_t buf[16];

  v0 = sub_19B6BAD7C("IODeviceTree:/product", CFSTR("itunes-min-ver"), 0, 0xFFFFFFFFLL, 1);
  if (v0 != -1)
    return CFStringCreateWithFormat(0, 0, CFSTR("%d.%d.%d"), HIWORD(v0), BYTE1(v0), v0);
  v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v2)
    v8 = v2 + 1;
  else
    v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v8, 4274, (uint64_t)CFSTR("couldn't get itunes-min-ver\n"), v3, v4, v5, v6, v7, v9);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "couldn't get itunes-min-ver\n", buf, 2u);
  }
  return 0;
}

uint64_t sub_19B6D6800()
{
  return 1;
}

BOOL sub_19B6D6808()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("8Wunmi1SpU1MxfBxkv3KOw"), 100);
}

BOOL sub_19B6D6820()
{
  return sub_19B6BAC78("IODeviceTree:/buttons", CFSTR("NlddTE7HnMJiw5OzTqbrYA"), 102);
}

BOOL sub_19B6D6838()
{
  return sub_19B6BACAC("IODeviceTree:/product/camera", CFSTR("AzZxA+yTHLc+/XimTirrVw"), 112);
}

const void *sub_19B6D6850()
{
  return sub_19B6B89E4((const char **)CFSTR("IMLaTlxS7ITtwfbRfPYWuA"), 0);
}

BOOL sub_19B6D6860()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("aCuWsar9Ayou7Vfkh7fdLw"), 102);
}

const void *sub_19B6D6878()
{
  return sub_19B6B89E4((const char **)CFSTR("MTa8c+pEdbK0tHGXP06xOw"), 0);
}

BOOL sub_19B6D6888()
{
  const CFDictionaryKeyCallBacks *v0;
  const CFDictionaryValueCallBacks *v1;
  CFMutableDictionaryRef Mutable;
  CFNumberRef v3;
  CFNumberRef v4;
  const __CFDictionary *v5;
  io_service_t MatchingService;
  io_service_t v7;
  const __CFString *v9;
  void *values;

  v0 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
  v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  values = Mutable;
  LODWORD(v9) = 65280;
  v3 = CFNumberCreate(0, kCFNumberSInt32Type, &v9);
  CFDictionarySetValue(Mutable, CFSTR("PrimaryUsagePage"), v3);
  CFRelease(v3);
  LODWORD(v9) = 4;
  v4 = CFNumberCreate(0, kCFNumberSInt32Type, &v9);
  CFDictionarySetValue(Mutable, CFSTR("PrimaryUsage"), v4);
  CFRelease(v4);
  v9 = CFSTR("IOPropertyMatch");
  v5 = CFDictionaryCreate(0, (const void **)&v9, (const void **)&values, 1, v0, v1);
  CFRelease(values);
  MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v5);
  v7 = MatchingService;
  if (MatchingService)
    IOObjectRelease(MatchingService);
  return v7 != 0;
}

uint64_t sub_19B6D69AC()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("eW5H/Gwg0uqbMqFot70pYg"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 > 0)
    return result;
  else
    return 0;
}

BOOL sub_19B6D69F4(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("U/nyu97+Q5SFY9yJKJTuSA"), a2);
}

BOOL sub_19B6D6A18(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("U/nyu97+Q5SFY9yJKJTuSA"), 84, a2);
}

CFTypeRef sub_19B6D6A2C()
{
  return sub_19B6DB304(6, 1, 0);
}

BOOL sub_19B6D6A3C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("RXyKSjeF239SL2vOcru01A"), a2);
}

BOOL sub_19B6D6A60(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("RXyKSjeF239SL2vOcru01A"), 77, a2);
}

BOOL sub_19B6D6A74()
{
  return sub_19B6B9C44() != 7 && sub_19B6B9C44() != 11;
}

BOOL sub_19B6D6AA4()
{
  _BOOL4 v0;
  float v1;
  float v3;

  v3 = 0.0;
  v0 = sub_19B6B84A4((const char **)CFSTR("main-screen-scale"), 7, 7, kCFNumberFloat32Type, &v3);
  v1 = v3;
  if (!v0)
    v1 = 0.0;
  return v1 > 1.0;
}

uint64_t sub_19B6D6AF8()
{
  return 0;
}

uint64_t sub_19B6D6B00()
{
  uint64_t v0;
  int v2;
  uint64_t v3;
  int v4;

  if (sub_19B6B9C44() == 3 || sub_19B6B9C44() == 4)
  {
    v0 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v2 = sub_19B6B9C44();
    v3 = MEMORY[0x1E0C9AE40];
    v0 = MEMORY[0x1E0C9AE40];
    if (v2 != 2)
    {
      v4 = sub_19B6B9C44();
      v0 = MEMORY[0x1E0C9AE50];
      if (v4 != 1 && sub_19B6B9C44() != 6)
        v0 = v3;
    }
  }
  return *(_QWORD *)v0;
}

uint64_t sub_19B6D6B78()
{
  return sub_19B6B2EBC((uint64_t)"IODeviceTree:/arm-io", (uint64_t)CFSTR("znvmheFkjr6hiqIK9TrCVw"), 112);
}

CFTypeRef sub_19B6D6B90()
{
  return sub_19B6D7850(CFSTR("YonkersChipID"));
}

BOOL sub_19B6D6B9C(uint64_t a1, __CFString **a2)
{
  return !sub_19B6BAB70(a1, (uint64_t)CFSTR("2/q9qmqGigMfkzY830Zf2g"), a2);
}

BOOL sub_19B6D6BC0(uint64_t a1, CFMutableStringRef *a2)
{
  return sub_19B6B7904(a1, CFSTR("2/q9qmqGigMfkzY830Zf2g"), 89, a2);
}

uint64_t sub_19B6D6BD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  int v9;
  __int128 v10;
  int v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 6)
    return 0;
  v11 = -2085056298;
  v10 = xmmword_19B718438;
  v9 = 1860682089;
  v8 = xmmword_19B71844C;
  return MGIsDeviceOneOfType((const UInt8 *)&v10, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v8) ^ 1;
}

BOOL sub_19B6D6DD8()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("sBBgbCSIQcUOXwgaDW/Xew"), 97);
}

uint64_t sub_19B6D6DF0()
{
  uint64_t v0;
  __int128 v2;
  int v3;
  __int128 v4;
  int v5;
  __int128 v6;
  int v7;
  __int128 v8;
  int v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v0 = *MEMORY[0x1E0C9AE40];
  if (sub_19B6B9C44() == 6)
  {
    v9 = 368885834;
    v8 = xmmword_19B718578;
    if ((MGIsDeviceOfType((const UInt8 *)&v8) & 1) == 0)
    {
      v7 = -414334491;
      v6 = xmmword_19B718528;
      if ((MGIsDeviceOfType((const UInt8 *)&v6) & 1) == 0)
      {
        v5 = -526227167;
        v4 = xmmword_19B71858C;
        if ((MGIsDeviceOfType((const UInt8 *)&v4) & 1) == 0)
        {
          v3 = -1509831889;
          v2 = xmmword_19B71853C;
          if (!MGIsDeviceOfType((const UInt8 *)&v2))
            return *MEMORY[0x1E0C9AE50];
        }
      }
    }
  }
  return v0;
}

BOOL sub_19B6D6F08()
{
  return sub_19B6BAC78("IODeviceTree:/product/camera", CFSTR("DIXX7JMbm7glu49f+xi4zQ"), 108);
}

CFTypeRef sub_19B6D6F20()
{
  return sub_19B6BBC28(0, "IOSDIOIoCardDevice", CFSTR("IOSDIOProductInfo1"));
}

uint64_t sub_19B6D6F38()
{
  uint64_t (*v0)(void);

  v0 = (uint64_t (*)(void))*((_QWORD *)off_1EE3FD5A0 + 45);
  if (!v0)
    v0 = (uint64_t (*)(void))sub_19B6BBD84(45, 2);
  return v0();
}

uint64_t sub_19B6D6F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 4
    || sub_19B6B9C44() == 1
    || sub_19B6B9C44() == 3
    || sub_19B6B9C44() == 2
    || sub_19B6B9C44() == 7
    || sub_19B6B9C44() == 11)
  {
    v7 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    v9 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v7 = MEMORY[0x1E0C9AE40];
    if (!v9)
      v7 = MEMORY[0x1E0C9AE50];
  }
  return *(_QWORD *)v7;
}

const void *sub_19B6D70F0()
{
  return sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("/2V8H9h/+z0UxNUr9aRLeQ"), 98);
}

uint64_t sub_19B6D7108()
{
  if (MGGetBoolAnswer((const char **)CFSTR("XFtUsQP3AyqT4CazSb5VCw")))
    return 1;
  else
    return sub_19B6C052C("/var/mobile/Library/Preferences/com.apple.MobileGestalt.plist", CFSTR("EnableStark"), 0);
}

CFNumberRef sub_19B6D7148()
{
  return sub_19B6C2250(CFSTR("screen-capture-width"), (const char **)CFSTR("g7YQ1Djxh4YiKlEeaoGhzg"));
}

CFNumberRef sub_19B6D7160()
{
  return sub_19B6BC5F4("IODeviceTree:/product", CFSTR("W7MyZ3Yxoy1qD6FrI0mLUQ"), 82);
}

BOOL sub_19B6D7178()
{
  return sub_19B6BACAC("IODeviceTree:/product", CFSTR("supports-lotx"), 0);
}

uint64_t sub_19B6D7190()
{
  uint64_t result;
  int v1;

  v1 = 0;
  LODWORD(result) = sub_19B6B84A4((const char **)CFSTR("ErupMbaQrM6KypD4K0kTDQ"), 5, 5, kCFNumberSInt32Type, &v1);
  if (v1 >= 196608)
    return result;
  else
    return 0;
}

uint64_t sub_19B6D71D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v10;
  int v11;
  __int128 v12;
  int v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() == 6)
  {
    v13 = 368885834;
    v12 = xmmword_19B718578;
    v11 = -526227167;
    v10 = xmmword_19B71858C;
    v7 = MGIsDeviceOneOfType((const UInt8 *)&v12, v0, v1, v2, v3, v4, v5, v6, (uint64_t)&v10);
    v8 = MEMORY[0x1E0C9AE50];
    if (!v7)
      v8 = MEMORY[0x1E0C9AE40];
  }
  else
  {
    v8 = MEMORY[0x1E0C9AE40];
  }
  return *(_QWORD *)v8;
}

uint64_t sub_19B6D7294()
{
  BOOL v0;
  uint64_t v1;

  v0 = sub_19B6C09B0("/usr/libexec/lockdownd");
  v1 = MEMORY[0x1E0C9AE50];
  if (!v0 && !sub_19B6C09B0("/usr/libexec/lockdownd.internal"))
    v1 = MEMORY[0x1E0C9AE40];
  return *(_QWORD *)v1;
}

CFDictionaryRef sub_19B6D72E4()
{
  int v0;
  int v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  const __CFString *v9;
  void *v10;
  void *values[6];
  uint8_t buf[16];
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B9C44() != 4)
    return 0;
  *(_DWORD *)buf = 0;
  if (sub_19B6B84A4((const char **)CFSTR("g7YQ1Djxh4YiKlEeaoGhzg"), 5, 5, kCFNumberSInt32Type, buf))
    v0 = *(_DWORD *)buf;
  else
    v0 = 0;
  *(_DWORD *)buf = 0;
  if (sub_19B6B84A4((const char **)CFSTR("OjzOua0LkOegX7pQdgMksw"), 5, 5, kCFNumberSInt32Type, buf))
    v1 = *(_DWORD *)buf;
  else
    v1 = 0;
  if (v0 < v1)
  {
    v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    v8 = v2 ? v2 + 1 : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v8, 4721, (uint64_t)CFSTR("%dx%d not in landscape mode"), v3, v4, v5, v6, v7, v0);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v0;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%dx%d not in landscape mode", buf, 0xEu);
    }
  }
  v9 = CFSTR("4:3");
  if (v1)
  {
    if ((float)((float)v0 / (float)v1) > 1.5)
      v9 = CFSTR("16:9");
  }
  *(_OWORD *)buf = xmmword_1E3BD0DB8;
  v14 = *(_OWORD *)&off_1E3BD0DC8;
  v15 = xmmword_1E3BD0DD8;
  values[0] = (void *)v9;
  values[1] = CFSTR("OFF");
  values[2] = CFSTR("ScaleToFit");
  values[3] = CFSTR("DisplayPort");
  v10 = (void *)*MEMORY[0x1E0C9AE40];
  values[4] = CFSTR("NTSC");
  values[5] = v10;
  return CFDictionaryCreate(0, (const void **)buf, (const void **)values, 6, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
}

CFTypeRef sub_19B6D74D4(const __CFString *a1)
{
  uint64_t v2;
  char *v3;
  mach_port_t v4;
  const char *v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  CFTypeRef result;

  v2 = 0;
  v3 = 0;
  v4 = *MEMORY[0x1E0CBBAA8];
  do
  {
    v5 = off_1E3BD08D0[v2];
    v6 = IOServiceMatching(v5);
    MatchingService = IOServiceGetMatchingService(v4, v6);
    if (MatchingService)
    {
      IOObjectRelease(MatchingService);
      v3 = (char *)v5;
    }
    ++v2;
  }
  while (v2 != 9);
  if (v3)
  {
    result = sub_19B6BBC28(1, v3, a1);
    if (result)
      return result;
    sub_19B6B9160(12);
  }
  return 0;
}

uint64_t sub_19B6D7570(int a1)
{
  const __CFDictionary *v2;
  uint64_t v3;
  _QWORD v5[5];
  int v6;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char v11;

  v8 = 0;
  v9 = &v8;
  v10 = 0x2000000000;
  v11 = 0;
  v2 = IOServiceMatching("IOAccessoryManager");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_19B6D7610;
  v5[3] = &unk_1E3BD0920;
  v6 = 255;
  v7 = a1;
  v5[4] = &v8;
  sub_19B6DBDAC(v2, (uint64_t)v5);
  v3 = *((unsigned __int8 *)v9 + 24);
  _Block_object_dispose(&v8, 8);
  return v3;
}

void sub_19B6D7610(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  const __CFNumber *CFProperty;
  const __CFNumber *v6;
  CFTypeID v7;
  int valuePtr;

  CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(entry, CFSTR("IOAccessoryManagerType"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (CFProperty)
  {
    v6 = CFProperty;
    v7 = CFGetTypeID(CFProperty);
    if (v7 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue(v6, kCFNumberSInt32Type, &valuePtr);
      if ((*(_DWORD *)(a1 + 40) & valuePtr) == *(_DWORD *)(a1 + 44))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        *a3 = 1;
      }
    }
    CFRelease(v6);
  }
}

CFStringRef sub_19B6D76C4(const char **a1)
{
  _BOOL4 v1;
  CFStringRef result;
  int v3;

  v3 = -1;
  v1 = sub_19B6B84A4(a1, 5, 5, kCFNumberSInt32Type, &v3);
  result = CFSTR("unknown");
  if (v1 && v3 != -1)
    return CFStringCreateWithFormat(0, 0, CFSTR("#%02x%02x%02x"), BYTE2(v3), BYTE1(v3), v3);
  return result;
}

uint64_t sub_19B6D773C()
{
  const char *v0;
  CFDataRef v1;
  const __CFData *v2;
  CFTypeID v3;
  uint64_t v4;

  v0 = sub_19B6BCBB4();
  v1 = sub_19B6D77D4();
  v2 = v1;
  if (!v1 || (v3 = CFGetTypeID(v1), v3 != CFDataGetTypeID()) || CFDataGetLength(v2) < 1)
  {
    sub_19B6B9160(1);
    v4 = 0xFFFFFFFFLL;
    if (!v0)
      goto LABEL_8;
    goto LABEL_7;
  }
  v4 = *CFDataGetBytePtr(v2);
  if (v0)
LABEL_7:
    CFRelease(v0);
LABEL_8:
  if (v2)
    CFRelease(v2);
  return v4;
}

CFDataRef sub_19B6D77D4()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;

  v0 = (const __CFData *)sub_19B6BBC28(1, "als", CFSTR("als-colorCfg"));
  if (v0)
  {
    v1 = v0;
    v2 = CFGetTypeID(v0);
    if (v2 == CFDataGetTypeID() && CFDataGetLength(v1) > 0)
      return v1;
    CFRelease(v1);
  }
  return sub_19B6DF7A8(0x436C7243u);
}

CFTypeRef sub_19B6D7850(const __CFString *a1)
{
  uint64_t v2;
  CFTypeRef v3;

  v2 = 0;
  while (1)
  {
    v3 = sub_19B6BBC28(1, off_1E3BD09D0[v2], a1);
    if (v3)
      break;
    if (++v2 == 3)
    {
      sub_19B6B9160(12);
      return v3;
    }
  }
  return v3;
}

uint64_t sub_19B6D78B0(uint64_t a1)
{
  const __CFData *v2;
  const __CFData *v3;
  CFTypeID v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const UInt8 *BytePtr;
  float v13;
  double v14;
  double v15;
  uint64_t v16;
  int32x2_t *v18;
  const float *v19;
  float32x2_t v20;
  float64x2_t v21;
  float64x2_t v22;
  float64x2_t v23;
  float64x2_t v24;
  float64x2_t v25;
  __int128 v26;
  int v27;
  __int128 v28;
  int v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("oBbtJ8x+s1q0OkaiocPuog"), 0);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = CFGetTypeID(v2);
  if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 24)
  {
    v29 = -337121064;
    v28 = xmmword_19B717B00;
    v27 = 450980336;
    v26 = xmmword_19B717B14;
    if (MGIsDeviceOneOfType((const UInt8 *)&v28, v5, v6, v7, v8, v9, v10, v11, (uint64_t)&v26))
    {
      BytePtr = CFDataGetBytePtr(v3);
      v13 = *((float *)BytePtr + 3);
      v14 = (float)((float)*(int *)BytePtr / v13);
      v15 = v13;
      *(double *)a1 = v14;
      *(double *)(a1 + 8) = round(522.149562 / v15 * v15 / v15);
      *(_QWORD *)(a1 + 16) = 0;
      *(double *)(a1 + 24) = round(294.333002 / v15 * v15 / v15);
      v16 = 1;
    }
    else
    {
      v24 = 0u;
      v25 = 0u;
      v16 = sub_19B6D7A58((uint64_t *)&v24);
      if ((_DWORD)v16)
      {
        v18 = (int32x2_t *)CFDataGetBytePtr(v3);
        v19 = (const float *)&v18[1] + 1;
        v20 = vld1_dup_f32(v19);
        v21 = vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(*v18), v20));
        v22 = vmulq_f64(v24, v21);
        v23 = vmulq_f64(v25, v21);
        *(float64x2_t *)a1 = v22;
        *(float64x2_t *)(a1 + 16) = v23;
      }
    }
  }
  else
  {
    v16 = 0;
  }
  CFRelease(v3);
  return v16;
}

uint64_t sub_19B6D7A58(uint64_t *a1)
{
  const __CFData *v7;
  const __CFData *v8;
  CFIndex Length;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  const UInt8 *BytePtr;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  float v30;
  double v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  _BOOL4 v39;
  uint64_t result;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  unsigned int v48;
  unsigned int v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  const char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  uint8_t buf[4];
  _BYTE v64[10];
  uint64_t v65;
  _BYTE v66[10];
  __int16 v67;
  uint64_t v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  *a1 = 0;
  a1[1] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)a1 + 1) = _Q0;
  v7 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/product", CFSTR("side-button-location"), 0);
  if (v7)
  {
    v8 = v7;
    Length = CFDataGetLength(v7);
    v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v10)
      v16 = v10 + 1;
    else
      v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v16, 7194, (uint64_t)CFSTR("Size of side-button-location %lu"), v11, v12, v13, v14, v15, Length);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(_QWORD *)v64 = Length;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Size of side-button-location %lu", buf, 0xCu);
    }
    if (Length == 20)
    {
      BytePtr = CFDataGetBytePtr(v8);
      v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v18)
        v24 = v18 + 1;
      else
        v24 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v24, 7207, (uint64_t)CFSTR("Button info %d - %d - %d - %d - %d"), v19, v20, v21, v22, v23, *(_DWORD *)BytePtr);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v25 = *(_DWORD *)BytePtr;
        v26 = *((_DWORD *)BytePtr + 1);
        v27 = *((_DWORD *)BytePtr + 2);
        v28 = *((_DWORD *)BytePtr + 3);
        v29 = *((_DWORD *)BytePtr + 4);
        *(_DWORD *)buf = 67110144;
        *(_DWORD *)v64 = v25;
        *(_WORD *)&v64[4] = 1024;
        *(_DWORD *)&v64[6] = v26;
        LOWORD(v65) = 1024;
        *(_DWORD *)((char *)&v65 + 2) = v27;
        HIWORD(v65) = 1024;
        *(_DWORD *)v66 = v28;
        *(_WORD *)&v66[4] = 1024;
        *(_DWORD *)&v66[6] = v29;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Button info %d - %d - %d - %d - %d", buf, 0x20u);
      }
      if (sub_19B6B9C44() == 1)
      {
        *a1 = 0x3FF0000000000000;
        v30 = (float)*((unsigned int *)BytePtr + 1);
        *((double *)a1 + 1) = (float)((float)*((unsigned int *)BytePtr + 2) / v30);
        a1[2] = 0;
        v31 = (float)((float)*((unsigned int *)BytePtr + 3) / v30);
      }
      else
      {
        if (sub_19B6B9C44() != 3)
        {
LABEL_30:
          v50 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
          if (v50)
            v56 = v50 + 1;
          else
            v56 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
          _MGLog((uint64_t)v56, 7225, (uint64_t)CFSTR("Normalized Rect %f - %f - %f - %f"), v51, v52, v53, v54, v55, *(_OWORD *)a1);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            v57 = *a1;
            v58 = a1[1];
            v59 = a1[2];
            v60 = a1[3];
            *(_DWORD *)buf = 134218752;
            *(_QWORD *)v64 = v57;
            *(_WORD *)&v64[8] = 2048;
            v65 = v58;
            *(_WORD *)v66 = 2048;
            *(_QWORD *)&v66[2] = v59;
            v67 = 2048;
            v68 = v60;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Normalized Rect %f - %f - %f - %f", buf, 0x2Au);
          }
          CFRelease(v8);
          return 1;
        }
        v48 = *(_DWORD *)BytePtr;
        v49 = *((_DWORD *)BytePtr + 3);
        *(double *)a1 = (float)((float)(*(_DWORD *)BytePtr - (*((_DWORD *)BytePtr + 2) + v49))
                              / (float)*(unsigned int *)BytePtr);
        a1[1] = 0;
        *((double *)a1 + 2) = (float)((float)v49 / (float)v48);
        v31 = 0.0;
      }
      *((double *)a1 + 3) = v31;
      goto LABEL_30;
    }
    v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v41)
      v47 = v41 + 1;
    else
      v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v47, 7203, (uint64_t)CFSTR("Property copyDeviceTreeProperty(IODeviceTree:/product side-button-location) had unexpected size"), v42, v43, v44, v45, v46, v62);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Property copyDeviceTreeProperty(IODeviceTree:/product side-button-location) had unexpected size", buf, 2u);
    }
    CFRelease(v8);
    return 0;
  }
  v32 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v32)
    v38 = v32 + 1;
  else
    v38 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v38, 7188, (uint64_t)CFSTR("Failed to copyDeviceTreeProperty(IODeviceTree:/product side-button-location)"), v33, v34, v35, v36, v37, v61);
  v39 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v39)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to copyDeviceTreeProperty(IODeviceTree:/product side-button-location)", buf, 2u);
    return 0;
  }
  return result;
}

void *sub_19B6D7E58()
{
  void *result;

  result = dlopen("/System/Library/PrivateFrameworks/NearField.framework/NearField", 261);
  if (result || (result = dlopen("/usr/lib/libnfrestore.dylib", 261)) != 0)
  {
    result = dlsym(result, "NfRestoreCopyUniqueFDRKey");
    off_1EE3FD848 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))result;
  }
  return result;
}

void sub_19B6D7EA4(uint64_t a1, uint64_t a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t buf[4];
  char *v17;
  char __str[1024];
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  vsnprintf(__str, 0x400uLL, a3, &a9);
  v9 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v9)
    v15 = v9 + 1;
  else
    v15 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v15, 8107, (uint64_t)CFSTR("(NfRestore): %s"), v10, v11, v12, v13, v14, (char)__str);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v17 = __str;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "(NfRestore): %s", buf, 0xCu);
  }
}

void sub_19B6D7F90(_QWORD *a1, const __CFString *a2)
{
  const __CFData *v4;
  const __CFData *v5;
  const UInt8 *BytePtr;
  size_t Length;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  uint32_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  CFIndex v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  _BYTE buf[22];
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v8)
      v14 = v8 + 1;
    else
      v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v14, 7727, (uint64_t)CFSTR("Offset_struct was nil"), v9, v10, v11, v12, v13, v39);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return;
    *(_WORD *)buf = 0;
    v15 = MEMORY[0x1E0C81028];
    v16 = "Offset_struct was nil";
    v17 = 2;
LABEL_15:
    _os_log_impl(&dword_19B6B1000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, v17);
    return;
  }
  v4 = (const __CFData *)sub_19B6B2C64("IODeviceTree:/product", a2, 0);
  if (!v4)
  {
    v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v18)
      v24 = v18 + 1;
    else
      v24 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v24, 7734, (uint64_t)CFSTR("Failed to copyDeviceTreeProperty(IODeviceTree:/product %@)"), v19, v20, v21, v22, v23, (char)a2);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)&buf[4] = a2;
    v15 = MEMORY[0x1E0C81028];
    v16 = "Failed to copyDeviceTreeProperty(IODeviceTree:/product %@)";
    v17 = 12;
    goto LABEL_15;
  }
  v5 = v4;
  if (CFDataGetLength(v4) == 20)
  {
    BytePtr = CFDataGetBytePtr(v5);
    Length = CFDataGetLength(v5);
    memcpy(a1, BytePtr, Length);
  }
  else
  {
    v25 = CFDataGetLength(v5);
    v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    v27 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v27)
      v26 = v27 + 1;
    if (v25 == 16)
    {
      _MGLog((uint64_t)v26, 7743, (uint64_t)CFSTR("Taking legacy CameraOffset_2D path"), v28, v29, v30, v31, v32, v39);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Taking legacy CameraOffset_2D path", buf, 2u);
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      CFDataGetBytePtr(v5);
      CFDataGetLength(v5);
      __memcpy_chk();
      v33 = *(_QWORD *)&buf[8];
      *a1 = *(_QWORD *)buf;
      *((_DWORD *)a1 + 2) = 0;
      *(_QWORD *)((char *)a1 + 12) = v33;
    }
    else
    {
      CFDataGetLength(v5);
      _MGLog((uint64_t)v26, 7753, (uint64_t)CFSTR("Property copyDeviceTreeProperty(IODeviceTree:/product %@) had an unexpected size of %zu instead of %zu or %zu."), v34, v35, v36, v37, v38, (char)a2);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138413058;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = CFDataGetLength(v5);
        v41 = 2048;
        v42 = 20;
        v43 = 2048;
        v44 = 16;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Property copyDeviceTreeProperty(IODeviceTree:/product %@) had an unexpected size of %zu instead of %zu or %zu.", buf, 0x2Au);
      }
    }
  }
  CFRelease(v5);
}

void sub_19B6D82A0()
{
  void *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t v9[16];

  v0 = dlopen("/usr/lib/updaters/libSavageUpdater_iOS.dylib", 1);
  if (v0)
  {
    v1 = v0;
    off_1EE3FD898 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "SavageUpdaterExecCommand");
    off_1EE3FD890 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym(v1, "SavageUpdaterCreate");
    off_1EE3FD8A0 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v1, "SavageUpdaterIsDone");
  }
  else
  {
    v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v2)
      v8 = v2 + 1;
    else
      v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v8, 7610, (uint64_t)CFSTR("Unable to dlopen(/usr/lib/updaters/libSavageUpdater_iOS.dylib)"), v3, v4, v5, v6, v7, v9[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to dlopen(/usr/lib/updaters/libSavageUpdater_iOS.dylib)", v9, 2u);
    }
  }
}

uint64_t sub_19B6D838C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *);
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  char v10;

  v10 = 0;
  v5 = off_1EE3FD5A0;
  v6 = (uint64_t (*)(uint64_t, _QWORD, char *))*((_QWORD *)off_1EE3FD5A0 + 3);
  if (!v6)
  {
    v6 = (uint64_t (*)(uint64_t, _QWORD, char *))sub_19B6BBD84(3, 2);
    v5 = off_1EE3FD5A0;
  }
  v7 = (_QWORD *)v5[54];
  if (!v7)
    v7 = (_QWORD *)sub_19B6BBD84(54, 1);
  result = v6(a2, *v7, &v10);
  v9 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (!v10)
    v9 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *a3 = *v9;
  return result;
}

uint64_t sub_19B6D842C(const __CFString *a1, int a2, float64x2_t *a3)
{
  const __CFData *v6;
  const __CFData *v7;
  CFTypeID v8;
  int32x2_t *BytePtr;
  const float *v10;
  float32x2_t v11;
  float64x2_t v12;
  float64x2_t v13;
  float64x2_t v14;
  uint64_t v15;
  float64x2_t v17;
  float64x2_t v18;

  v6 = (const __CFData *)sub_19B6B89E4((const char **)CFSTR("oBbtJ8x+s1q0OkaiocPuog"), 0);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = CFGetTypeID(v6);
  if (v8 == CFDataGetTypeID())
  {
    v17 = 0u;
    v18 = 0u;
    if (CFDataGetLength(v7) == 24 && sub_19B6D8520(a1, a2, (uint64_t *)&v17))
    {
      BytePtr = (int32x2_t *)CFDataGetBytePtr(v7);
      v10 = (const float *)&BytePtr[1] + 1;
      v11 = vld1_dup_f32(v10);
      v12 = vcvtq_f64_f32(vdiv_f32(vcvt_f32_s32(*BytePtr), v11));
      v13 = vmulq_f64(v17, v12);
      v14 = vmulq_f64(v18, v12);
      *a3 = v13;
      a3[1] = v14;
      v15 = 1;
    }
    else
    {
      v15 = 0;
    }
  }
  else
  {
    v15 = 0;
    v17 = 0u;
    v18 = 0u;
  }
  CFRelease(v7);
  return v15;
}

BOOL sub_19B6D8520(const __CFString *a1, int a2, uint64_t *a3)
{
  const __CFData *v11;
  const __CFData *v12;
  CFIndex Length;
  _BOOL8 v14;
  const UInt8 *BytePtr;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  double v28;
  float v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  const __CFString *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  const char *v42;
  uint32_t v43;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  const char *v52;
  uint32_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  CFIndex v60;
  const char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v68;
  uint8_t buf[4];
  _BYTE v70[10];
  const __CFString *v71;
  _BYTE v72[10];
  __int16 v73;
  uint64_t v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v45 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v45, 7300, (uint64_t)CFSTR("outRect is NULL"), v46, v47, v48, v49, v50, v68);
    v14 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v14;
    *(_WORD *)buf = 0;
    v51 = MEMORY[0x1E0C81028];
    v52 = "outRect is NULL";
    v53 = 2;
LABEL_26:
    _os_log_impl(&dword_19B6B1000, v51, OS_LOG_TYPE_DEFAULT, v52, buf, v53);
    return 0;
  }
  *a3 = 0;
  a3[1] = 0;
  __asm { FMOV            V0.2D, #1.0 }
  *((_OWORD *)a3 + 1) = _Q0;
  v11 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/product", a1, 0);
  if (!v11)
  {
    v54 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v54, 7308, (uint64_t)CFSTR("Failed to copy EDT property for %@"), v55, v56, v57, v58, v59, (char)a1);
    v14 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v14;
    *(_DWORD *)buf = 138412290;
    *(_QWORD *)v70 = a1;
    v51 = MEMORY[0x1E0C81028];
    v52 = "Failed to copy EDT property for %@";
    v53 = 12;
    goto LABEL_26;
  }
  v12 = v11;
  Length = CFDataGetLength(v11);
  v14 = Length == 20;
  if (Length == 20)
  {
    BytePtr = CFDataGetBytePtr(v12);
    v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v16)
      v22 = v16 + 1;
    else
      v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v22, 7316, (uint64_t)CFSTR("Button info %d - %d - %d - %d - %d"), v17, v18, v19, v20, v21, *(_DWORD *)BytePtr);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_DWORD *)BytePtr;
      v24 = *((_DWORD *)BytePtr + 1);
      v25 = *((_DWORD *)BytePtr + 2);
      v26 = *((_DWORD *)BytePtr + 3);
      v27 = *((_DWORD *)BytePtr + 4);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)v70 = v23;
      *(_WORD *)&v70[4] = 1024;
      *(_DWORD *)&v70[6] = v24;
      LOWORD(v71) = 1024;
      *(_DWORD *)((char *)&v71 + 2) = v25;
      HIWORD(v71) = 1024;
      *(_DWORD *)v72 = v26;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = v27;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Button info %d - %d - %d - %d - %d", buf, 0x20u);
    }
    if (sub_19B6B9C44() == 1)
    {
      v28 = 1.0;
      if (!a2)
        v28 = 0.0;
      *(double *)a3 = v28;
      v29 = (float)*((unsigned int *)BytePtr + 1);
      *((double *)a3 + 1) = (float)((float)*((unsigned int *)BytePtr + 2) / v29);
      a3[2] = 0;
      *((double *)a3 + 3) = (float)((float)*((unsigned int *)BytePtr + 3) / v29);
    }
    v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v30)
      v36 = v30 + 1;
    else
      v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v36, 7332, (uint64_t)CFSTR("Normalized Rect %f - %f - %f - %f"), v31, v32, v33, v34, v35, *(_OWORD *)a3);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    v37 = *a3;
    v38 = (const __CFString *)a3[1];
    v39 = a3[2];
    v40 = a3[3];
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)v70 = v37;
    *(_WORD *)&v70[8] = 2048;
    v71 = v38;
    *(_WORD *)v72 = 2048;
    *(_QWORD *)&v72[2] = v39;
    v73 = 2048;
    v74 = v40;
    v41 = MEMORY[0x1E0C81028];
    v42 = "Normalized Rect %f - %f - %f - %f";
    v43 = 42;
  }
  else
  {
    v60 = Length;
    v61 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v61, 7313, (uint64_t)CFSTR("Unexpected size %lu for %@"), v62, v63, v64, v65, v66, v60);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_20;
    *(_DWORD *)buf = 134218242;
    *(_QWORD *)v70 = v60;
    *(_WORD *)&v70[8] = 2112;
    v71 = a1;
    v41 = MEMORY[0x1E0C81028];
    v42 = "Unexpected size %lu for %@";
    v43 = 22;
  }
  _os_log_impl(&dword_19B6B1000, v41, OS_LOG_TYPE_DEFAULT, v42, buf, v43);
LABEL_20:
  CFRelease(v12);
  return v14;
}

CFNumberRef sub_19B6D88E4(int a1)
{
  const __CFData *v2;
  const __CFData *v3;
  CFTypeID v4;
  const UInt8 *BytePtr;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unsigned int v14;
  const UInt8 *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  int v23;
  int v24;
  int valuePtr;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  valuePtr = -1;
  v2 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/product", CFSTR("device-colors"), 0);
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 16)
    {
      BytePtr = CFDataGetBytePtr(v3);
      v6 = 8;
      if (a1)
        v6 = 4;
      v7 = 5;
      if (!a1)
        v7 = 9;
      v8 = 10;
      if (a1)
        v8 = 6;
      v9 = BytePtr[v8];
      v10 = BytePtr[v7];
      v11 = BytePtr[v6];
      v12 = BytePtr[1];
      if (v12 == 2)
      {
        v13 = (v9 << 16) | (v10 << 8) | v11;
        goto LABEL_19;
      }
      if (v12 == 1)
      {
        v13 = v9 | (v10 << 8) | (v11 << 16);
LABEL_19:
        valuePtr = v13;
LABEL_26:
        CFRelease(v3);
        goto LABEL_27;
      }
      v15 = BytePtr;
      v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v16)
        v22 = v16 + 1;
      else
        v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v22, 2934, (uint64_t)CFSTR("unknown dclr version %u.%u"), v17, v18, v19, v20, v21, v15[1]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v23 = v15[1];
        v24 = *v15;
        *(_DWORD *)buf = 67109376;
        v28 = v23;
        v29 = 1024;
        v30 = v24;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "unknown dclr version %u.%u", buf, 0xEu);
      }
    }
    v13 = -1;
    goto LABEL_26;
  }
  if (a1)
    v14 = sub_19B6D8AF0();
  else
    v14 = sub_19B6D773C();
  if (v14 > 8)
    return 0;
  v13 = *((_DWORD *)&off_1E3BD0940 + 4 * v14 + 2);
  valuePtr = v13;
LABEL_27:
  if (v13 != -1)
    return CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  return 0;
}

uint64_t sub_19B6D8AF0()
{
  const __CFData *v0;
  const __CFData *v1;
  CFTypeID v2;
  uint64_t v3;
  CFDataRef v4;
  const __CFData *v5;
  CFTypeID v6;

  v0 = (const __CFData *)sub_19B6BBC28(1, "als", CFSTR("noMultiColorSupport"));
  v1 = v0;
  if (v0)
  {
    v2 = CFGetTypeID(v0);
    if (v2 != CFDataGetTypeID() || CFDataGetLength(v1) != 4 || *(_DWORD *)CFDataGetBytePtr(v1))
    {
      v3 = 0xFFFFFFFFLL;
      goto LABEL_12;
    }
  }
  v4 = sub_19B6D77D4();
  if (!v4)
  {
    sub_19B6B9160(1);
    v3 = 0xFFFFFFFFLL;
    if (!v1)
      return v3;
    goto LABEL_12;
  }
  v5 = v4;
  v6 = CFGetTypeID(v4);
  if (v6 == CFDataGetTypeID() && CFDataGetLength(v5) > 1)
  {
    v3 = CFDataGetBytePtr(v5)[1];
  }
  else
  {
    sub_19B6B9160(1);
    v3 = 0xFFFFFFFFLL;
  }
  CFRelease(v5);
  if (v1)
LABEL_12:
    CFRelease(v1);
  return v3;
}

void sub_19B6D8BE8()
{
  void *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t v9[16];

  v0 = dlopen("/usr/lib/libFDR.dylib", 1);
  if (v0)
  {
    v1 = v0;
    off_1EE3FD780 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v0, "AMFDRCreateWithOptions");
    off_1EE3FD788 = (uint64_t (*)(_QWORD, _QWORD))dlsym(v1, "AMFDRSealingMapVerifySealing");
  }
  else
  {
    v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v2)
      v8 = v2 + 1;
    else
      v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v8, 5239, (uint64_t)CFSTR("Unable to dlopen /usr/lib/libFDR.dylib"), v3, v4, v5, v6, v7, v9[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to dlopen /usr/lib/libFDR.dylib", v9, 2u);
    }
  }
}

uint64_t sub_19B6D8CBC(mach_port_t a1, char a2, void *a3, size_t *a4)
{
  size_t v8;
  _DWORD *v9;
  void *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t v20[8];
  size_t outputStructCnt;

  if (a4)
    v8 = *a4;
  else
    v8 = 0;
  outputStructCnt = v8;
  v9 = malloc_type_malloc(8uLL, 0xBEA1CFBCuLL);
  v10 = v9;
  if (v9)
  {
    *v9 = 1296256323;
    *((_BYTE *)v9 + 4) = a2;
    *((_BYTE *)v9 + 5) = 0;
    v11 = IOConnectCallStructMethod(a1, 0, v9, 8uLL, a3, &outputStructCnt);
    if (a4)
      *a4 = outputStructCnt;
  }
  else
  {
    v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v12)
      v18 = v12 + 1;
    else
      v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v18, 5300, (uint64_t)CFSTR("Failed to allocate Mesa command object"), v13, v14, v15, v16, v17, v20[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to allocate Mesa command object", v20, 2u);
    }
    v11 = 0xFFFFFFFFLL;
  }
  free(v10);
  return v11;
}

uint64_t sub_19B6D8DE8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *, CFTypeRef *);
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  CFTypeRef cf;
  char v12;

  v12 = 0;
  cf = 0;
  v5 = off_1EE3FD5A0;
  v6 = (uint64_t (*)(uint64_t, _QWORD, char *, CFTypeRef *))*((_QWORD *)off_1EE3FD5A0 + 4);
  if (!v6)
  {
    v6 = (uint64_t (*)(uint64_t, _QWORD, char *, CFTypeRef *))sub_19B6BBD84(4, 2);
    v5 = off_1EE3FD5A0;
  }
  v7 = (_QWORD *)v5[55];
  if (!v7)
    v7 = (_QWORD *)sub_19B6BBD84(55, 1);
  v8 = v6(a2, *v7, &v12, &cf);
  if (cf)
    CFRelease(cf);
  v9 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (!v12)
    v9 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *a3 = *v9;
  return v8;
}

CFArrayRef sub_19B6D8EA4(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  float v14;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  char v23;
  uint8_t buf[16];

  v8 = a1[3];
  if (v8)
  {
    v9 = a1[1];
    if ((*a1 & 0x80000000) == 0)
      v10 = *a1;
    else
      v10 = -*a1;
    if (v9 >= 0)
      v11 = a1[1];
    else
      v11 = -v9;
    if (v10 > v11)
      v12 = 1;
    else
      v12 = a2;
    if (v12)
      v13 = *a1;
    else
      v13 = a1[1];
    v14 = (double)v13 / (double)v8;
    return sub_19B6D8FAC((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8, COERCE__INT64(v14));
  }
  else
  {
    v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v16)
      v22 = v16 + 1;
    else
      v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v22, 7786, (uint64_t)CFSTR("Unexpected camera_offset scale, malformed data provided"), v17, v18, v19, v20, v21, v23);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unexpected camera_offset scale, malformed data provided", buf, 2u);
    }
    return 0;
  }
}

CFArrayRef sub_19B6D8FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __CFArray *Mutable;
  int v10;
  double *v11;
  float v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFArrayRef Copy;
  float valuePtr;
  double *v18;

  v18 = (double *)&a9;
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v10 = 3;
  do
  {
    v11 = v18++;
    v12 = *v11;
    valuePtr = v12;
    v13 = CFNumberCreate(0, kCFNumberFloat32Type, &valuePtr);
    if (v13)
    {
      v14 = v13;
      CFArrayAppendValue(Mutable, v13);
      CFRelease(v14);
    }
    --v10;
  }
  while (v10);
  if (!Mutable)
    return 0;
  Copy = CFArrayCreateCopy(0, Mutable);
  CFRelease(Mutable);
  return Copy;
}

void sub_19B6D906C(uint64_t a1, uint64_t a2)
{
  io_registry_entry_t v2;
  char *v4;
  char *v5;
  char *v6;
  CFStringRef v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  const void *v17;
  CFTypeRef CFProperty;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  uint8_t buf[4];
  char *v27;
  char v28[16];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;

  v2 = a2;
  v60 = *MEMORY[0x1E0C80C00];
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  *(_OWORD *)v28 = 0u;
  v29 = 0u;
  if (!MEMORY[0x1A1AC4800](a2, "IOService", v28))
  {
    v4 = v28;
    if (*(unsigned __int16 *)v28 != 47)
    {
      v5 = rindex(v28, 47);
      if (v5)
        v4 = v5 + 1;
    }
    v6 = index(v4, 64);
    if (v6)
      *v6 = 0;
    v7 = CFStringCreateWithCString(0, v4, 0x8000100u);
    if (CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v7))
    {
      v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v8)
        v14 = v8 + 1;
      else
        v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v14, 4213, (uint64_t)CFSTR("already have calibration data for %@\n"), v9, v10, v11, v12, v13, (char)v7);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v27 = (char *)v7;
        v15 = MEMORY[0x1E0C81028];
        v16 = "already have calibration data for %@\n";
LABEL_13:
        _os_log_impl(&dword_19B6B1000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 0xCu);
      }
    }
    else
    {
      CFProperty = IORegistryEntryCreateCFProperty(v2, CFSTR("compass-calibration"), 0, 0);
      if (CFProperty)
      {
        v17 = CFProperty;
        CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v7, CFProperty);
        if (!v7)
        {
LABEL_16:
          if (v17)
            CFRelease(v17);
          return;
        }
LABEL_15:
        CFRelease(v7);
        goto LABEL_16;
      }
      v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
      if (v19)
        v25 = v19 + 1;
      else
        v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
      _MGLog((uint64_t)v25, 4219, (uint64_t)CFSTR("couldn't get calibration data for %s\n"), v20, v21, v22, v23, v24, (char)v28);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v27 = v28;
        v15 = MEMORY[0x1E0C81028];
        v16 = "couldn't get calibration data for %s\n";
        goto LABEL_13;
      }
    }
    v17 = 0;
    if (!v7)
      goto LABEL_16;
    goto LABEL_15;
  }
}

BOOL sub_19B6D92C8(int a1)
{
  char *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BOOL4 v10;
  _BOOL8 result;
  uint8_t buf[4];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (sub_19B6B5AAC())
  {
    os_parse_boot_arg_int();
    os_parse_boot_arg_int();
  }
  if (a1 == 1)
  {
    v2 = "manta-b";
    return sub_19B6DBEDC(1, v2);
  }
  if (a1 == 2)
  {
    v2 = "manta-c";
    return sub_19B6DBEDC(1, v2);
  }
  v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
  if (v3)
    v9 = v3 + 1;
  else
    v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
  _MGLog((uint64_t)v9, 9117, (uint64_t)CFSTR("Invalid compute hardware type: %d"), v4, v5, v6, v7, v8, a1);
  v10 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v10)
  {
    *(_DWORD *)buf = 67109120;
    LODWORD(v13) = a1;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Invalid compute hardware type: %d", buf, 8u);
    return 0;
  }
  return result;
}

uint64_t sub_19B6D94D8(char *cStr)
{
  CFStringRef v1;
  const __CFDictionary *v2;
  uint64_t v3;
  _QWORD v5[6];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2000000000;
  v9 = 0;
  v1 = CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
  v2 = IOServiceMatching("IOPort");
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_19B6D9598;
  v5[3] = &unk_1E3BD0B80;
  v5[4] = &v6;
  v5[5] = v1;
  sub_19B6DBDAC(v2, (uint64_t)v5);
  if (v1)
    CFRelease(v1);
  v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_19B6D9598(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  const __CFArray *CFProperty;
  const __CFArray *v6;
  CFRange v7;

  CFProperty = (const __CFArray *)IORegistryEntryCreateCFProperty(entry, CFSTR("TransportsSupported"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (CFProperty)
  {
    v6 = CFProperty;
    if (CFArrayGetCount(CFProperty) >= 1)
    {
      v7.length = CFArrayGetCount(v6);
      v7.location = 0;
      if (CFArrayContainsValue(v6, v7, *(const void **)(a1 + 40)))
      {
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        if (a3)
          *a3 = 1;
      }
    }
    CFRelease(v6);
  }
}

BOOL sub_19B6D9644()
{
  const __CFLocale *v0;
  const __CFLocale *v1;
  const __CFString *Value;
  const __CFString *v3;
  CFTypeID v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  _BOOL8 v10;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  uint8_t buf[16];

  v0 = CFLocaleCopyCurrent();
  if (!v0)
  {
    v12 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v12, 8975, (uint64_t)CFSTR("locale is NULL"), v13, v14, v15, v16, v17, v39);
    v10 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v10;
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "locale is NULL", buf, 2u);
    return 0;
  }
  v1 = v0;
  Value = (const __CFString *)CFLocaleGetValue(v0, (CFLocaleKey)*MEMORY[0x1E0C9B060]);
  if (!Value)
  {
    v18 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v18, 8977, (uint64_t)CFSTR("country code is NULL"), v19, v20, v21, v22, v23, v39);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    v41 = 0;
    v24 = MEMORY[0x1E0C81028];
    v25 = "country code is NULL";
    v26 = (uint8_t *)&v41;
LABEL_21:
    _os_log_impl(&dword_19B6B1000, v24, OS_LOG_TYPE_DEFAULT, v25, v26, 2u);
    goto LABEL_22;
  }
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID())
  {
    v27 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v27, 8978, (uint64_t)CFSTR("country code is unpexpected type"), v28, v29, v30, v31, v32, v39);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    v40 = 0;
    v24 = MEMORY[0x1E0C81028];
    v25 = "country code is unpexpected type";
    v26 = (uint8_t *)&v40;
    goto LABEL_21;
  }
  v5 = sub_19B6B8004(v3);
  if (!v5)
  {
    v33 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
    _MGLog((uint64_t)v33, 8980, (uint64_t)CFSTR("failed to copy country code"), v34, v35, v36, v37, v38, v39);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v39 = 0;
      v24 = MEMORY[0x1E0C81028];
      v25 = "failed to copy country code";
      v26 = (uint8_t *)&v39;
      goto LABEL_21;
    }
LABEL_22:
    CFRelease(v1);
    return 0;
  }
  v6 = v5;
  if (!strcmp(v5, "AT"))
  {
    v10 = 1;
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = v7;
      if (v7 == 30)
        break;
      v9 = strcmp(v6, off_1E3BD0BA0[v7 + 1]);
      v7 = v8 + 1;
    }
    while (v9);
    v10 = v8 < 0x1E;
  }
  CFRelease(v1);
  free(v6);
  return v10;
}

__CFArray *sub_19B6D9890(__CFArray *Copy, uint32_t a2)
{
  int v4;
  uint64_t v5;
  NSObject *v6;
  CFDataRef v7;
  CFDataRef v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint8_t v24[16];
  uint64_t v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v4 = sub_19B6BAD7C("IODeviceTree:/product", CFSTR("lynx-count"), 0, 1, 1);
  if (v4 >= 2)
  {
    v5 = 1;
    v6 = MEMORY[0x1E0C81028];
    do
    {
      v25[0] = v5;
      v7 = sub_19B6DD2D4("AppleCyrus", a2, v25, 1u, 0x10000uLL);
      if (v7)
      {
        v8 = v7;
        CFArrayAppendValue(Copy, v7);
        CFRelease(v8);
      }
      else
      {
        v9 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
        if (v9)
          v15 = v9 + 1;
        else
          v15 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
        _MGLog((uint64_t)v15, 5083, (uint64_t)CFSTR("Lynx entry is NULL - not adding."), v10, v11, v12, v13, v14, v24[0]);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)v24 = 0;
          _os_log_impl(&dword_19B6B1000, v6, OS_LOG_TYPE_DEFAULT, "Lynx entry is NULL - not adding.", v24, 2u);
        }
      }
      ++v5;
    }
    while (v4 != v5);
  }
  if (Copy)
    Copy = CFArrayCreateCopy(0, Copy);
  if (CFArrayGetCount(Copy) != v4)
  {
    v16 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c", 47);
    if (v16)
      v22 = v16 + 1;
    else
      v22 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c";
    _MGLog((uint64_t)v22, 5093, (uint64_t)CFSTR("Lynx count in resulting array does not match published count"), v17, v18, v19, v20, v21, v24[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Lynx count in resulting array does not match published count", v24, 2u);
    }
  }
  return Copy;
}

CFTypeRef sub_19B6D9A84(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  CFTypeRef result;

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  result = IORegistryEntrySearchCFProperty(entry, "IOService", CFSTR("vendor-id"), 0, 3u);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    *a3 = 1;
  return result;
}

BOOL sub_19B6D9B00(uint64_t a1, io_registry_entry_t entry)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = IORegistryEntrySearchCFProperty(entry, "IOService", CFSTR("vendor-id"), 0, 3u);
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0;
}

uint64_t sub_19B6D9B70(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t (*v6)(uint64_t, _QWORD, char *, int *);
  _QWORD *v7;
  uint64_t result;
  _QWORD *v9;
  int v10;
  char v11;

  v11 = 0;
  v10 = 0;
  v5 = off_1EE3FD5A0;
  v6 = (uint64_t (*)(uint64_t, _QWORD, char *, int *))*((_QWORD *)off_1EE3FD5A0 + 21);
  if (!v6)
  {
    v6 = (uint64_t (*)(uint64_t, _QWORD, char *, int *))sub_19B6BBD84(21, 2);
    v5 = off_1EE3FD5A0;
  }
  v7 = (_QWORD *)v5[56];
  if (!v7)
    v7 = (_QWORD *)sub_19B6BBD84(56, 1);
  result = v6(a2, *v7, &v11, &v10);
  v9 = (_QWORD *)MEMORY[0x1E0C9AE50];
  if (v10 < 0)
    v9 = (_QWORD *)MEMORY[0x1E0C9AE40];
  *a3 = *v9;
  return result;
}

CFTypeRef sub_19B6D9C18(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  CFTypeRef result;

  result = IORegistryEntryCreateCFProperty(entry, CFSTR("Content"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *a3 = 1;
  return result;
}

__CFArray *sub_19B6D9C80(uint64_t a1)
{
  __CFArray *Mutable;
  uint64_t i;
  CFNumberRef v4;

  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B378]);
  if (Mutable)
  {
    for (i = 0; i != 16; i += 4)
    {
      v4 = CFNumberCreate(0, kCFNumberIntType, (const void *)(a1 + i));
      CFArrayAppendValue(Mutable, v4);
      CFRelease(v4);
    }
  }
  return Mutable;
}

void sub_19B6D9D04()
{
  __CFSet *Mutable;
  _QWORD *v1;
  _QWORD *v2;
  const void **v3;
  _QWORD *v4;
  const void **v5;
  _QWORD *v6;
  const void **v7;
  _QWORD *v8;
  const void **v9;
  _QWORD *v10;
  const void **v11;
  _QWORD *v12;
  const void **v13;
  _QWORD *v14;
  const void **v15;
  _QWORD *v16;
  const void **v17;
  _QWORD *v18;
  const void **v19;
  _QWORD *v20;
  const void **v21;
  _QWORD *v22;
  const void **v23;
  _QWORD *v24;
  const void **v25;
  _QWORD *v26;
  const void **v27;

  Mutable = CFSetCreateMutable(0, 0, MEMORY[0x1E0C9B3B0]);
  v1 = off_1EE3FD5A0;
  v2 = (_QWORD *)*((_QWORD *)off_1EE3FD5A0 + 52);
  if (!v2)
  {
    v2 = (_QWORD *)sub_19B6BBD84(52, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v2)
  {
    v3 = (const void **)v1[52];
    if (!v3)
      v3 = (const void **)sub_19B6BBD84(52, 1);
    CFSetAddValue(Mutable, *v3);
    v1 = off_1EE3FD5A0;
  }
  v4 = (_QWORD *)v1[53];
  if (!v4)
  {
    v4 = (_QWORD *)sub_19B6BBD84(53, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v4)
  {
    v5 = (const void **)v1[53];
    if (!v5)
      v5 = (const void **)sub_19B6BBD84(53, 1);
    CFSetAddValue(Mutable, *v5);
    v1 = off_1EE3FD5A0;
  }
  v6 = (_QWORD *)v1[76];
  if (!v6)
  {
    v6 = (_QWORD *)sub_19B6BBD84(76, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v6)
  {
    v7 = (const void **)v1[76];
    if (!v7)
      v7 = (const void **)sub_19B6BBD84(76, 1);
    CFSetAddValue(Mutable, *v7);
    v1 = off_1EE3FD5A0;
  }
  v8 = (_QWORD *)v1[77];
  if (!v8)
  {
    v8 = (_QWORD *)sub_19B6BBD84(77, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v8)
  {
    v9 = (const void **)v1[77];
    if (!v9)
      v9 = (const void **)sub_19B6BBD84(77, 1);
    CFSetAddValue(Mutable, *v9);
    v1 = off_1EE3FD5A0;
  }
  v10 = (_QWORD *)v1[78];
  if (!v10)
  {
    v10 = (_QWORD *)sub_19B6BBD84(78, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v10)
  {
    v11 = (const void **)v1[78];
    if (!v11)
      v11 = (const void **)sub_19B6BBD84(78, 1);
    CFSetAddValue(Mutable, *v11);
    v1 = off_1EE3FD5A0;
  }
  v12 = (_QWORD *)v1[79];
  if (!v12)
  {
    v12 = (_QWORD *)sub_19B6BBD84(79, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v12)
  {
    v13 = (const void **)v1[79];
    if (!v13)
      v13 = (const void **)sub_19B6BBD84(79, 1);
    CFSetAddValue(Mutable, *v13);
    v1 = off_1EE3FD5A0;
  }
  v14 = (_QWORD *)v1[80];
  if (!v14)
  {
    v14 = (_QWORD *)sub_19B6BBD84(80, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v14)
  {
    v15 = (const void **)v1[80];
    if (!v15)
      v15 = (const void **)sub_19B6BBD84(80, 1);
    CFSetAddValue(Mutable, *v15);
    v1 = off_1EE3FD5A0;
  }
  v16 = (_QWORD *)v1[84];
  if (!v16)
  {
    v16 = (_QWORD *)sub_19B6BBD84(84, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v16)
  {
    v17 = (const void **)v1[84];
    if (!v17)
      v17 = (const void **)sub_19B6BBD84(84, 1);
    CFSetAddValue(Mutable, *v17);
    v1 = off_1EE3FD5A0;
  }
  v18 = (_QWORD *)v1[85];
  if (!v18)
  {
    v18 = (_QWORD *)sub_19B6BBD84(85, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v18)
  {
    v19 = (const void **)v1[85];
    if (!v19)
      v19 = (const void **)sub_19B6BBD84(85, 1);
    CFSetAddValue(Mutable, *v19);
    v1 = off_1EE3FD5A0;
  }
  v20 = (_QWORD *)v1[86];
  if (!v20)
  {
    v20 = (_QWORD *)sub_19B6BBD84(86, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v20)
  {
    v21 = (const void **)v1[86];
    if (!v21)
      v21 = (const void **)sub_19B6BBD84(86, 1);
    CFSetAddValue(Mutable, *v21);
    v1 = off_1EE3FD5A0;
  }
  v22 = (_QWORD *)v1[87];
  if (!v22)
  {
    v22 = (_QWORD *)sub_19B6BBD84(87, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v22)
  {
    v23 = (const void **)v1[87];
    if (!v23)
      v23 = (const void **)sub_19B6BBD84(87, 1);
    CFSetAddValue(Mutable, *v23);
    v1 = off_1EE3FD5A0;
  }
  v24 = (_QWORD *)v1[88];
  if (!v24)
  {
    v24 = (_QWORD *)sub_19B6BBD84(88, 1);
    v1 = off_1EE3FD5A0;
  }
  if (*v24)
  {
    v25 = (const void **)v1[88];
    if (!v25)
      v25 = (const void **)sub_19B6BBD84(88, 1);
    CFSetAddValue(Mutable, *v25);
    v1 = off_1EE3FD5A0;
  }
  v26 = (_QWORD *)v1[89];
  if (!v26)
    v26 = (_QWORD *)sub_19B6BBD84(89, 1);
  if (*v26)
  {
    v27 = (const void **)*((_QWORD *)off_1EE3FD5A0 + 89);
    if (!v27)
      v27 = (const void **)sub_19B6BBD84(89, 1);
    CFSetAddValue(Mutable, *v27);
  }
  qword_1EE3FD7B0 = (uint64_t)Mutable;
}

void *sub_19B6DA0D8()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!qword_1EE3FD778)
  {
    v10 = xmmword_1E3BD0FA0;
    v11 = 0;
    qword_1EE3FD778 = _sl_dlopen();
  }
  if (!qword_1EE3FD778)
    return 0;
  v1 = (void *)objc_msgSend((id)objc_msgSend((id)sub_19B6DA2A0(), "embeddedSecureElement", v10, v11, v12), "info");
  v2 = objc_opt_new();
  v0 = (void *)v2;
  if (v1 && v2)
  {
    v3 = objc_msgSend(v1, "OSVersion");
    v4 = objc_msgSend(v1, "firmwareVersion");
    v5 = objc_msgSend(v1, "hardwareVersion");
    v6 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v4);
    objc_msgSend(v0, "setObject:forKeyedSubscript:", v6, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "FirmwareVersion"));
    v7 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v5);
    objc_msgSend(v0, "setObject:forKeyedSubscript:", v7, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "HardwareVersion"));
    v8 = objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithUnsignedInteger:", v3);
    objc_msgSend(v0, "setObject:forKeyedSubscript:", v8, objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "OSVersion"));
  }
  return v0;
}

uint64_t sub_19B6DA2A0()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  void (*v7)(uint64_t);
  uint64_t v8;

  v3 = 0;
  v4 = &v3;
  v5 = 0x3052000000;
  v6 = sub_19B6DAB04;
  v7 = sub_19B6DAB14;
  v0 = qword_1EE3FD7A8;
  v8 = qword_1EE3FD7A8;
  if (!qword_1EE3FD7A8)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 3221225472;
    v2[2] = sub_19B6DAB20;
    v2[3] = &unk_1E3BD0FC0;
    v2[4] = &v3;
    sub_19B6DAB20((uint64_t)v2);
    v0 = v4[5];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void sub_19B6DA34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_19B6DA364()
{
  void *v0;
  id result;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  void *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[5];
  _BYTE v14[128];
  __int128 v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!qword_1EE3FD778)
  {
    v15 = xmmword_1E3BD0FA0;
    v16 = 0;
    qword_1EE3FD778 = _sl_dlopen();
  }
  if (!qword_1EE3FD778)
    return 0;
  *(_QWORD *)&v15 = 0;
  *((_QWORD *)&v15 + 1) = &v15;
  v16 = 0x3052000000;
  v17 = sub_19B6DAB04;
  v18 = sub_19B6DAB14;
  v0 = (void *)qword_1EE3FD7A0;
  v19 = qword_1EE3FD7A0;
  if (!qword_1EE3FD7A0)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = sub_19B6DAC18;
    v13[3] = &unk_1E3BD0FC0;
    v13[4] = &v15;
    sub_19B6DAC18((uint64_t)v13);
    v0 = *(void **)(*((_QWORD *)&v15 + 1) + 40);
  }
  _Block_object_dispose(&v15, 8);
  result = (id)objc_msgSend(v0, "sharedHardwareManager");
  if (!result)
    return result;
  v2 = (void *)objc_msgSend(result, "secureElements");
  v3 = v2;
  if (!v2)
    return 0;
  result = (id)objc_msgSend(v2, "count");
  if (!result)
    return result;
  v11 = 0u;
  v12 = 0u;
  v9 = 0u;
  v10 = 0u;
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
  if (!v4)
    return 0;
  v5 = *(_QWORD *)v10;
  while (2)
  {
    for (i = 0; i != v4; ++i)
    {
      if (*(_QWORD *)v10 != v5)
        objc_enumerationMutation(v3);
      v7 = (void *)objc_msgSend(*(id *)(*((_QWORD *)&v9 + 1) + 8 * i), "info");
      v8 = v7;
      if (v7 && objc_msgSend(v7, "personalisable"))
        return (id)objc_msgSend(v8, "manifestQuery");
    }
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v9, v14, 16);
    result = 0;
    if (v4)
      continue;
    break;
  }
  return result;
}

void sub_19B6DA598(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

void *sub_19B6DA5B8()
{
  void *v0;
  void *v1;
  id v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!qword_1EE3FD778)
  {
    v4 = xmmword_1E3BD0FA0;
    v5 = 0;
    qword_1EE3FD778 = _sl_dlopen();
  }
  if (!qword_1EE3FD778)
    return 0;
  v0 = (void *)objc_msgSend((id)objc_msgSend((id)sub_19B6DA2A0(), "embeddedSecureElement", v4, v5, v6), "info");
  if (!v0)
    return 0;
  v1 = (void *)objc_msgSend(v0, "serialNumber");
  v2 = v1;
  return v1;
}

void *sub_19B6DA6A8()
{
  void *v0;
  void *v1;
  id v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  if (!qword_1EE3FD778)
  {
    v4 = xmmword_1E3BD0FA0;
    v5 = 0;
    qword_1EE3FD778 = _sl_dlopen();
  }
  if (!qword_1EE3FD778)
    return 0;
  v0 = (void *)objc_msgSend((id)objc_msgSend((id)sub_19B6DA2A0(), "icefallSecureElement", v4, v5, v6), "info");
  if (!v0)
    return 0;
  v1 = (void *)objc_msgSend(v0, "serialNumber");
  v2 = v1;
  return v1;
}

BOOL sub_19B6DA798()
{
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (!qword_1EE3FD778)
  {
    v1 = xmmword_1E3BD0FA0;
    v2 = 0;
    qword_1EE3FD778 = _sl_dlopen();
  }
  return qword_1EE3FD778 && objc_msgSend((id)sub_19B6DA2A0(), "icefallSecureElement", v1, v2, v3) != 0;
}

void *sub_19B6DA878()
{
  void *result;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  if (!qword_1EE3FD778)
  {
    v1 = xmmword_1E3BD0FA0;
    v2 = 0;
    qword_1EE3FD778 = _sl_dlopen();
  }
  if (!qword_1EE3FD778)
    return 0;
  result = (void *)objc_msgSend((id)objc_msgSend((id)sub_19B6DA2A0(), "icefallSecureElement", v1, v2, v3), "info");
  if (result)
    return (void *)objc_msgSend(result, "restrictedMode");
  return result;
}

uint64_t sub_19B6DA95C()
{
  void *v0;
  void *v1;
  void *v2;
  uint64_t result;
  _QWORD v4[5];
  __int128 v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  void (*v8)(uint64_t);
  uint64_t v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  if (!qword_1ECD35B48)
  {
    v5 = xmmword_1E3BD0FE0;
    v6 = 0;
    qword_1ECD35B48 = _sl_dlopen();
  }
  if (!qword_1ECD35B48)
    return 0;
  *(_QWORD *)&v5 = 0;
  *((_QWORD *)&v5 + 1) = &v5;
  v6 = 0x3052000000;
  v7 = sub_19B6DAB04;
  v8 = sub_19B6DAB14;
  v0 = (void *)qword_1ECD35B50;
  v9 = qword_1ECD35B50;
  if (!qword_1ECD35B50)
  {
    v4[0] = MEMORY[0x1E0C809B0];
    v4[1] = 3221225472;
    v4[2] = sub_19B6DAC6C;
    v4[3] = &unk_1E3BD0FC0;
    v4[4] = &v5;
    sub_19B6DAC6C((uint64_t)v4);
    v0 = *(void **)(*((_QWORD *)&v5 + 1) + 40);
  }
  _Block_object_dispose(&v5, 8);
  v1 = (void *)objc_msgSend(v0, "availableDevices");
  v2 = v1;
  if (!v1)
    return 0;
  result = objc_msgSend(v1, "count");
  if (result)
    return objc_msgSend((id)objc_msgSend(v2, "firstObject"), "type") == 2;
  return result;
}

void sub_19B6DAAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_19B6DAB04(uint64_t a1, uint64_t a2)
{
  _Block_object_assign((void *)(a1 + 40), *(const void **)(a2 + 40), 131);
}

void sub_19B6DAB14(uint64_t a1)
{
  _Block_object_dispose(*(const void **)(a1 + 40), 131);
}

Class sub_19B6DAB20(uint64_t a1)
{
  Class result;

  sub_19B6DAB74();
  result = objc_getClass("NFSecureElement");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_19B70EE90();
  qword_1EE3FD7A8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

void sub_19B6DAB74()
{
  void *v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v0 = 0;
  if (!qword_1EE3FD778)
  {
    v1 = xmmword_1E3BD0FA0;
    v2 = 0;
    qword_1EE3FD778 = _sl_dlopen();
  }
  if (!qword_1EE3FD778)
    sub_19B70EEF4(&v0);
}

Class sub_19B6DAC18(uint64_t a1)
{
  Class result;

  sub_19B6DAB74();
  result = objc_getClass("NFHardwareManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_19B70EF58();
  qword_1EE3FD7A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

Class sub_19B6DAC6C(uint64_t a1)
{
  Class result;
  void *v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v3 = 0;
  if (!qword_1ECD35B48)
  {
    v4 = xmmword_1E3BD0FE0;
    v5 = 0;
    qword_1ECD35B48 = _sl_dlopen();
  }
  if (!qword_1ECD35B48)
    sub_19B70EFBC(&v3);
  result = objc_getClass("BKDeviceManager");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40) = result;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    sub_19B70F020();
  qword_1ECD35B50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  return result;
}

const void *sub_19B6DAD48(unint64_t a1, unint64_t a2)
{
  const char *v4;
  const __CFString *v5;
  const __CFString *v6;
  uint64_t v7;
  const void *v8;
  CFDictionaryRef v9;
  CFDictionaryRef v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  CFTypeID TypeID;
  const __CFDictionary *v22;
  const void *Value;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  uint32_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  char v56;
  CFTypeRef cf;
  CFDictionaryRef theDict;
  _BYTE buf[24];
  void *v60;
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (a1 | a2)
  {
    theDict = 0;
    if (!MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
    {
      v4 = (const char *)sub_19B6C1944();
      if (v4)
      {
        v5 = CFStringCreateWithCString(0, v4, 0x8000100u);
        if (v5)
        {
          v6 = v5;
          byte_1EE3FD8C8 = CFStringCompare(v5, CFSTR("darwinos-ramdisk"), 0) == kCFCompareEqualTo;
          CFRelease(v6);
        }
      }
      if (!byte_1EE3FD8C8)
        goto LABEL_26;
      if (qword_1EE3FD8D8 != -1)
        dispatch_once(&qword_1EE3FD8D8, &unk_1E3BD1058);
      if (!qword_1EE3FD8D0)
      {
LABEL_26:
        v20 = *((_QWORD *)off_1EE3FD5A0 + 10);
        if (!v20)
          v20 = sub_19B6BBD84(10, 2);
        TypeID = CFDictionaryGetTypeID();
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 0x40000000;
        *(_QWORD *)&buf[16] = sub_19B6BDAEC;
        v60 = &unk_1E3BD0FF8;
        v61 = v20;
        v22 = (const __CFDictionary *)sub_19B6BD240((uint64_t)"_CTServerConnectionCopyFirmwareSecurityInfo", (uint64_t)buf, TypeID);
        theDict = v22;
        if (!v22)
          goto LABEL_48;
        goto LABEL_29;
      }
    }
    if (qword_1EE3FD8C0 != -1)
      dispatch_once(&qword_1EE3FD8C0, &unk_1E3BCFEF8);
    if (!off_1EE3FD8A8)
      goto LABEL_48;
    if (!off_1EE3FD8B0)
      goto LABEL_48;
    if (!off_1EE3FD8B8)
      goto LABEL_48;
    v7 = off_1EE3FD8A8();
    if (!v7)
      goto LABEL_48;
    v8 = (const void *)v7;
    v9 = CFDictionaryCreate(0, 0, 0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    if (!v9)
    {
LABEL_47:
      CFRelease(v8);
      v22 = theDict;
      if (!theDict)
      {
LABEL_48:
        v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v41)
          v47 = v41 + 1;
        else
          v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        _MGLog((uint64_t)v47, 198, (uint64_t)CFSTR("No CT security info dictionary"), v42, v43, v44, v45, v46, v56);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No CT security info dictionary", buf, 2u);
        }
        return 0;
      }
LABEL_29:
      Value = CFDictionaryGetValue(v22, (const void *)a1);
      if (Value)
      {
LABEL_30:
        CFRetain(Value);
LABEL_62:
        CFRelease(theDict);
        return Value;
      }
      if (a2)
      {
        Value = CFDictionaryGetValue(theDict, (const void *)a2);
        if (Value)
          goto LABEL_30;
        v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v24)
          v30 = v24 + 1;
        else
          v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        _MGLog((uint64_t)v30, 189, (uint64_t)CFSTR("No %@ or %@ in CT security info dictionary"), v25, v26, v27, v28, v29, a1);
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        {
LABEL_61:
          Value = 0;
          goto LABEL_62;
        }
        *(_DWORD *)buf = 138412546;
        *(_QWORD *)&buf[4] = a1;
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = a2;
        v31 = MEMORY[0x1E0C81028];
        v32 = "No %@ or %@ in CT security info dictionary";
        v33 = 22;
      }
      else
      {
        v49 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
        if (v49)
          v55 = v49 + 1;
        else
          v55 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
        _MGLog((uint64_t)v55, 185, (uint64_t)CFSTR("No %@ in CT security info dictionary"), v50, v51, v52, v53, v54, a1);
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_61;
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = a1;
        v31 = MEMORY[0x1E0C81028];
        v32 = "No %@ in CT security info dictionary";
        v33 = 12;
      }
      _os_log_impl(&dword_19B6B1000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, v33);
      goto LABEL_61;
    }
    v10 = v9;
    cf = 0;
    if (!off_1EE3FD8B0(v8, v9, &cf) || cf)
    {
      v34 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
      if (v34)
        v40 = v34 + 1;
      else
        v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
      _MGLog((uint64_t)v40, 163, (uint64_t)CFSTR("BBUpdaterSetOptions failed: %@"), v35, v36, v37, v38, v39, (char)cf);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = cf;
        v18 = MEMORY[0x1E0C81028];
        v19 = "BBUpdaterSetOptions failed: %@";
        goto LABEL_43;
      }
    }
    else
    {
      if (off_1EE3FD8B8(v8, CFSTR("CopyIdentifier"), &theDict, &cf) && !cf)
      {
LABEL_46:
        CFRelease(v10);
        goto LABEL_47;
      }
      v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
      if (v11)
        v17 = v11 + 1;
      else
        v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
      _MGLog((uint64_t)v17, 167, (uint64_t)CFSTR("BBUpdaterExecCommand(CopyIdentifier) failed: %@"), v12, v13, v14, v15, v16, (char)cf);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        *(_QWORD *)&buf[4] = cf;
        v18 = MEMORY[0x1E0C81028];
        v19 = "BBUpdaterExecCommand(CopyIdentifier) failed: %@";
LABEL_43:
        _os_log_impl(&dword_19B6B1000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
      }
    }
    if (cf)
      CFRelease(cf);
    goto LABEL_46;
  }
  return 0;
}

void sub_19B6DB270()
{
  void *v0;

  if (qword_1EE3FD8D8 != -1)
    dispatch_once(&qword_1EE3FD8D8, &unk_1E3BD1058);
  v0 = (void *)qword_1EE3FD8D0;
  if (qword_1EE3FD8D0)
  {
    off_1EE3FD8A8 = (uint64_t (*)(void))dlsym((void *)qword_1EE3FD8D0, "BBUpdaterExtremeCreate");
    off_1EE3FD8B0 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))dlsym(v0, "BBUpdaterSetOptions");
    off_1EE3FD8B8 = (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD))dlsym(v0, "BBUpdaterExecCommand");
  }
}

CFTypeRef sub_19B6DB304(uint64_t a1, int a2, uint64_t a3)
{
  const __CFString *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  CFTypeRef v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  CFTypeID v21;
  CFStringRef v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint8_t buf[4];
  const __CFString *v39;
  __int16 v40;
  const __CFString *v41;
  __int16 v42;
  const __CFString *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a1)
    return 0;
  v6 = sub_19B6C0ACC(a1);
  v7 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)off_1EE3FD5A0 + 27);
  if (!v7)
    v7 = (uint64_t (*)(uint64_t, uint64_t))sub_19B6BBD84(27, 2);
  v8 = (const __CFString *)v7(a1, a3);
  v9 = v8;
  if (!v8)
  {
    v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v12)
      v18 = v12 + 1;
    else
      v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v18, 217, (uint64_t)CFSTR("No %@ in CT mobile equipment info dictionary"), v13, v14, v15, v16, v17, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v39 = v6;
      v19 = MEMORY[0x1E0C81028];
      v20 = "No %@ in CT mobile equipment info dictionary";
LABEL_16:
      _os_log_impl(&dword_19B6B1000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    }
LABEL_23:
    v11 = 0;
    if (!v6)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!a2)
    goto LABEL_8;
  v10 = CFGetTypeID(v8);
  if (v10 != CFStringGetTypeID())
  {
    v21 = CFGetTypeID(v9);
    v22 = CFCopyTypeIDDescription(v21);
    v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v23)
      v29 = v23 + 1;
    else
      v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v29, 224, (uint64_t)CFSTR("Non-string (%@) for %@ in CT mobile equipment info dictionary (%@)"), v24, v25, v26, v27, v28, (char)v22);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v39 = v22;
      v40 = 2112;
      v41 = v6;
      v42 = 2112;
      v43 = v9;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Non-string (%@) for %@ in CT mobile equipment info dictionary (%@)", buf, 0x20u);
    }
    CFRelease(v22);
    goto LABEL_23;
  }
  if (!CFStringGetLength(v9))
  {
    v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v31)
      v37 = v31 + 1;
    else
      v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v37, 229, (uint64_t)CFSTR("Empty string for %@ in CT mobile equipment info dictionary"), v32, v33, v34, v35, v36, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v39 = v6;
      v19 = MEMORY[0x1E0C81028];
      v20 = "Empty string for %@ in CT mobile equipment info dictionary";
      goto LABEL_16;
    }
    goto LABEL_23;
  }
LABEL_8:
  v11 = CFRetain(v9);
  if (v6)
LABEL_24:
    CFRelease(v6);
LABEL_25:
  if (v9)
    CFRelease(v9);
  return v11;
}

CFTypeRef sub_19B6DB5A8(uint64_t a1, int a2, uint64_t a3)
{
  const __CFString *v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  const __CFString *v8;
  const __CFString *v9;
  CFTypeID v10;
  CFTypeRef v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  CFTypeID v21;
  CFStringRef v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint8_t buf[4];
  const __CFString *v39;
  __int16 v40;
  const __CFString *v41;
  __int16 v42;
  const __CFString *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (!(_DWORD)a1)
    return 0;
  v6 = sub_19B6C0B14(a1);
  v7 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)off_1EE3FD5A0 + 47);
  if (!v7)
    v7 = (uint64_t (*)(uint64_t, uint64_t))sub_19B6BBD84(47, 2);
  v8 = (const __CFString *)v7(a1, a3);
  v9 = v8;
  if (!v8)
  {
    v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v12)
      v18 = v12 + 1;
    else
      v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v18, 257, (uint64_t)CFSTR("No %@ sim status interface"), v13, v14, v15, v16, v17, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v39 = v6;
      v19 = MEMORY[0x1E0C81028];
      v20 = "No %@ sim status interface";
LABEL_16:
      _os_log_impl(&dword_19B6B1000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 0xCu);
    }
LABEL_23:
    v11 = 0;
    if (!v6)
      goto LABEL_25;
    goto LABEL_24;
  }
  if (!a2)
    goto LABEL_8;
  v10 = CFGetTypeID(v8);
  if (v10 != CFStringGetTypeID())
  {
    v21 = CFGetTypeID(v9);
    v22 = CFCopyTypeIDDescription(v21);
    v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v23)
      v29 = v23 + 1;
    else
      v29 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v29, 264, (uint64_t)CFSTR("Non-string (%@) for %@ in SIM status interface (%@)"), v24, v25, v26, v27, v28, (char)v22);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      v39 = v22;
      v40 = 2112;
      v41 = v6;
      v42 = 2112;
      v43 = v9;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Non-string (%@) for %@ in SIM status interface (%@)", buf, 0x20u);
    }
    CFRelease(v22);
    goto LABEL_23;
  }
  if (!CFStringGetLength(v9))
  {
    v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v31)
      v37 = v31 + 1;
    else
      v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v37, 269, (uint64_t)CFSTR("Empty string for %@ in in SIM status interface"), v32, v33, v34, v35, v36, (char)v6);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v39 = v6;
      v19 = MEMORY[0x1E0C81028];
      v20 = "Empty string for %@ in in SIM status interface";
      goto LABEL_16;
    }
    goto LABEL_23;
  }
LABEL_8:
  v11 = CFRetain(v9);
  if (v6)
LABEL_24:
    CFRelease(v6);
LABEL_25:
  if (v9)
    CFRelease(v9);
  return v11;
}

CFTypeRef sub_19B6DB84C(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  const void *v3;
  const void *v4;
  CFTypeRef v5;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t buf[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = (uint64_t (*)(uint64_t))*((_QWORD *)off_1EE3FD5A0 + 42);
  if (!v2)
    v2 = (uint64_t (*)(uint64_t))sub_19B6BBD84(42, 2);
  v3 = (const void *)v2(a1);
  if (v3)
  {
    v4 = v3;
    v5 = CFRetain(v3);
    CFRelease(v4);
    return v5;
  }
  else
  {
    v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v7)
      v13 = v7 + 1;
    else
      v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v13, 290, (uint64_t)CFSTR("Empty phone number for slot %ld."), v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      v15 = a1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Empty phone number for slot %ld.", buf, 0xCu);
    }
    return 0;
  }
}

const void *sub_19B6DB984(const void *a1)
{
  CFTypeID TypeID;
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  const void *Value;
  const void *v6;

  TypeID = CFDictionaryGetTypeID();
  v3 = (const __CFDictionary *)sub_19B6BD240((uint64_t)"copyCTCapabilities", (uint64_t)&unk_1E3BD1098, TypeID);
  if (!v3)
    return 0;
  v4 = v3;
  Value = CFDictionaryGetValue(v3, a1);
  v6 = Value;
  if (Value)
    CFRetain(Value);
  CFRelease(v4);
  return v6;
}

void sub_19B6DB9F0()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t v7[16];

  qword_1EE3FD8D0 = (uint64_t)dlopen("/usr/lib/libBBUpdaterDynamic.dylib", 1);
  if (!qword_1EE3FD8D0)
  {
    v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c", 47);
    if (v0)
      v6 = v0 + 1;
    else
      v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MGBasebandSupport.c";
    _MGLog((uint64_t)v6, 103, (uint64_t)CFSTR("Unable to dlopen /usr/lib/libBBUpdaterDynamic.dylib"), v1, v2, v3, v4, v5, v7[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to dlopen /usr/lib/libBBUpdaterDynamic.dylib", v7, 2u);
    }
  }
}

uint64_t sub_19B6DBA98(uint64_t a1, uint64_t a2, CFTypeRef *a3)
{
  uint64_t (*v5)(uint64_t, CFTypeRef *, char *);
  uint64_t v6;
  char v8;

  v8 = 0;
  v5 = (uint64_t (*)(uint64_t, CFTypeRef *, char *))*((_QWORD *)off_1EE3FD5A0 + 17);
  if (!v5)
    v5 = (uint64_t (*)(uint64_t, CFTypeRef *, char *))sub_19B6BBD84(17, 2);
  v6 = v5(a2, a3, &v8);
  if (!v8)
  {
    if (*a3)
      CFRelease(*a3);
    *a3 = 0;
  }
  return v6;
}

uint64_t sub_19B6DBB18(const char *a1, io_service_t *a2, io_connect_t *a3)
{
  const __CFDictionary *v6;
  io_service_t MatchingService;
  io_service_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  _BOOL4 v16;
  uint64_t result;
  NSObject *v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  _BOOL4 v27;
  uint32_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _BOOL4 v36;
  char v37;
  io_connect_t connect;
  uint8_t buf[4];
  const char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  connect = 0;
  v6 = IOServiceMatching(a1);
  if (v6)
  {
    MatchingService = IOServiceGetMatchingService(*MEMORY[0x1E0CBBAA8], v6);
    if (MatchingService)
    {
      v8 = MatchingService;
      if (IOServiceOpen(MatchingService, *MEMORY[0x1E0C83DA0], 0, &connect))
      {
        v9 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
        if (v9)
          v15 = v9 + 1;
        else
          v15 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
        _MGLog((uint64_t)v15, 28, (uint64_t)CFSTR("IOServiceOpen failed for class '%s'"), v10, v11, v12, v13, v14, (char)a1);
        v16 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
        result = 0;
        if (v16)
        {
          *(_DWORD *)buf = 136315138;
          v40 = a1;
          v18 = MEMORY[0x1E0C81028];
          v19 = "IOServiceOpen failed for class '%s'";
LABEL_14:
          v28 = 12;
LABEL_20:
          _os_log_impl(&dword_19B6B1000, v18, OS_LOG_TYPE_DEFAULT, v19, buf, v28);
          return 0;
        }
      }
      else
      {
        *a2 = v8;
        *a3 = connect;
        return 1;
      }
    }
    else
    {
      v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v29)
        v35 = v29 + 1;
      else
        v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      _MGLog((uint64_t)v35, 26, (uint64_t)CFSTR("IOServiceGetMatchingService failed"), v30, v31, v32, v33, v34, v37);
      v36 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (v36)
      {
        *(_WORD *)buf = 0;
        v18 = MEMORY[0x1E0C81028];
        v19 = "IOServiceGetMatchingService failed";
        v28 = 2;
        goto LABEL_20;
      }
    }
  }
  else
  {
    v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v20)
      v26 = v20 + 1;
    else
      v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v26, 24, (uint64_t)CFSTR("IOServiceMatching failed for %s"), v21, v22, v23, v24, v25, (char)a1);
    v27 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (v27)
    {
      *(_DWORD *)buf = 136315138;
      v40 = a1;
      v18 = MEMORY[0x1E0C81028];
      v19 = "IOServiceMatching failed for %s";
      goto LABEL_14;
    }
  }
  return result;
}

uint64_t sub_19B6DBD44(io_iterator_t iterator, uint64_t a2)
{
  uint64_t result;
  io_object_t v5;
  char v6;

  v6 = 0;
  do
  {
    result = IOIteratorNext(iterator);
    if (!(_DWORD)result)
      break;
    v5 = result;
    (*(void (**)(uint64_t, uint64_t, char *))(a2 + 16))(a2, result, &v6);
    result = IOObjectRelease(v5);
  }
  while (!v6);
  return result;
}

void sub_19B6DBDAC(CFDictionaryRef matching, uint64_t a2)
{
  kern_return_t MatchingServices;
  io_iterator_t v4;
  BOOL v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t v13[12];
  io_iterator_t existing;

  existing = 0;
  if (matching)
  {
    MatchingServices = IOServiceGetMatchingServices(*MEMORY[0x1E0CBBAA8], matching, &existing);
    v4 = existing;
    if (MatchingServices)
      v5 = 1;
    else
      v5 = existing == 0;
    if (!v5)
    {
      sub_19B6DBD44(existing, a2);
      v4 = existing;
    }
    if (v4)
      IOObjectRelease(v4);
  }
  else
  {
    v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v6)
      v12 = v6 + 1;
    else
      v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v12, 56, (uint64_t)CFSTR("called with a NULL matching dictionary"), v7, v8, v9, v10, v11, v13[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "called with a NULL matching dictionary", v13, 2u);
    }
  }
}

uint64_t sub_19B6DBE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;
  uint64_t result;
  io_object_t object;

  object = 0;
  v4 = MEMORY[0x1A1AC47E8](a1, a2, &object);
  result = object;
  if (!v4 && object)
  {
    sub_19B6DBD44(object, a3);
    result = object;
  }
  if ((_DWORD)result)
    return IOObjectRelease(result);
  return result;
}

BOOL sub_19B6DBEDC(int a1, char *a2)
{
  io_object_t v2;
  io_object_t v3;

  v2 = sub_19B6BBC80(a1, a2);
  v3 = v2;
  if (v2)
    IOObjectRelease(v2);
  return v3 != 0;
}

CFMutableDictionaryRef sub_19B6DBF10(int a1, char *a2)
{
  io_registry_entry_t v3;
  io_object_t v4;
  kern_return_t v5;
  mach_error_t v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  CFMutableDictionaryRef properties;
  uint8_t buf[4];
  char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = sub_19B6BBC80(a1, a2);
  if (!v3)
    return 0;
  v4 = v3;
  properties = 0;
  v5 = IORegistryEntryCreateCFProperties(v3, &properties, 0, 0);
  if (v5)
  {
    v6 = v5;
    v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v8)
      v7 = v8 + 1;
    mach_error_string(v6);
    _MGLog((uint64_t)v7, 134, (uint64_t)CFSTR("IORegistryEntryCreateCFProperties failed for '%s': %s"), v9, v10, v11, v12, v13, (char)a2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      v14 = mach_error_string(v6);
      *(_DWORD *)buf = 136315394;
      v18 = a2;
      v19 = 2080;
      v20 = v14;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IORegistryEntryCreateCFProperties failed for '%s': %s", buf, 0x16u);
    }
  }
  IOObjectRelease(v4);
  return properties;
}

CFTypeRef sub_19B6DC040(int a1, char *a2, const __CFString *a3)
{
  io_registry_entry_t v4;
  io_object_t v5;
  CFTypeRef v6;

  v4 = sub_19B6BBC80(a1, a2);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = IORegistryEntrySearchCFProperty(v4, "IOService", a3, (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 1u);
  IOObjectRelease(v5);
  return v6;
}

uint64_t sub_19B6DC0A0()
{
  uint64_t result;

  result = sub_19B6DC0D0("AppleAuthCPRelay");
  if (!result)
    return sub_19B6DC0D0("AppleAuthCPAID");
  return result;
}

uint64_t sub_19B6DC0D0(const char *a1)
{
  const __CFDictionary *v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2000000000;
  v8 = 0;
  v1 = IOServiceMatching(a1);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = sub_19B6DD430;
  v4[3] = &unk_1E3BD1188;
  v4[4] = &v5;
  sub_19B6DBDAC(v1, (uint64_t)v4);
  v2 = v6[3];
  _Block_object_dispose(&v5, 8);
  return v2;
}

BOOL sub_19B6DC15C(int a1, char *a2, const __CFString *a3)
{
  CFTypeRef v3;
  CFTypeRef v4;

  v3 = sub_19B6BBC28(a1, a2, a3);
  v4 = v3;
  if (v3)
    CFRelease(v3);
  return v4 != 0;
}

CFTypeRef sub_19B6DC190(char *a1)
{
  return sub_19B6BBC28(1, a1, CFSTR("local-mac-address"));
}

uint64_t sub_19B6DC1A4()
{
  CFMutableDictionaryRef v0;
  uint64_t v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19B6DC240;
  v3[3] = &unk_1E3BD10E8;
  v3[4] = &v4;
  v0 = IOServiceMatching("IONetworkController");
  sub_19B6DC768((uint64_t)v0, 5, (uint64_t)v3, 0);
  v1 = v5[3];
  _Block_object_dispose(&v4, 8);
  return v1;
}

BOOL sub_19B6DC240(uint64_t a1, uint64_t a2)
{
  int v3;
  int v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _QWORD v13[5];
  io_object_t v14;
  uint8_t buf[4];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v14 = 0;
  v3 = MEMORY[0x1A1AC47D0](a2, "IOService", 3, &v14);
  if (v3)
  {
    v4 = v3;
    v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v5)
      v11 = v5 + 1;
    else
      v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v11, 258, (uint64_t)CFSTR("unable to create parent iterator: 0x%x\n"), v6, v7, v8, v9, v10, v4);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v16 = v4;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "unable to create parent iterator: 0x%x\n", buf, 8u);
    }
  }
  else
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 0x40000000;
    v13[2] = sub_19B6DC39C;
    v13[3] = &unk_1E3BD10C0;
    v13[4] = *(_QWORD *)(a1 + 32);
    sub_19B6DBD44(v14, (uint64_t)v13);
    IOObjectRelease(v14);
  }
  return *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) != 0;
}

void sub_19B6DC39C(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  io_registry_entry_t v4;
  int v6;
  int v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  BOOL v15;
  uint8_t buf[4];
  int v17;
  _OWORD v18[8];
  uint64_t v19;

  v4 = a2;
  v19 = *MEMORY[0x1E0C80C00];
  memset(v18, 0, sizeof(v18));
  v6 = MEMORY[0x1A1AC47F4](a2, v18);
  if (v6)
  {
    v7 = v6;
    v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v8)
      v14 = v8 + 1;
    else
      v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v14, 250, (uint64_t)CFSTR("unable to get parent entry's name: 0x%x\n"), v9, v10, v11, v12, v13, v7);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v17 = v7;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "unable to get parent entry's name: 0x%x\n", buf, 8u);
    }
  }
  else if (!(LODWORD(v18[0]) ^ 0x6F696473 | BYTE4(v18[0]))
         || !(LODWORD(v18[0]) ^ 0x6E616C77 | BYTE4(v18[0]))
         || (*(_QWORD *)&v18[0] == 0x2D696E6F6372616DLL
           ? (v15 = *(_QWORD *)((char *)v18 + 5) == 0x696669772D696ELL)
           : (v15 = 0),
             !v15))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IORegistryEntryCreateCFProperty(v4, CFSTR("local-mac-address"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
    *a3 = 1;
}

void sub_19B6DC554(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *global_queue;
  _QWORD block[8];
  int v11;

  v8 = dispatch_semaphore_create(0);
  global_queue = dispatch_get_global_queue(0, 0);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = sub_19B6DC600;
  block[3] = &unk_1E3BD1110;
  v11 = a1;
  block[4] = a2;
  block[5] = a3;
  block[6] = a4;
  block[7] = v8;
  dispatch_async(global_queue, block);
  dispatch_semaphore_wait(v8, 0xFFFFFFFFFFFFFFFFLL);
  dispatch_release(v8);
}

intptr_t sub_19B6DC600(uint64_t a1)
{
  __CFRunLoop *Current;
  CFRunLoopRunResult v3;
  CFRunLoopRunResult v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint8_t buf[4];
  CFRunLoopRunResult v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  Current = CFRunLoopGetCurrent();
  CFRunLoopAddCommonMode(Current, CFSTR("MobileGestaltRunLoopMode"));
  if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
  {
    do
    {
      do
        v3 = CFRunLoopRunInMode(CFSTR("MobileGestaltRunLoopMode"), (double)*(int *)(a1 + 64), 1u);
      while (v3 == kCFRunLoopRunHandledSource);
      v4 = v3;
      v5 = *(_QWORD *)(a1 + 40);
    }
    while (v5 && ((*(uint64_t (**)(void))(v5 + 16))() & 1) != 0);
    v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v6)
      v12 = v6 + 1;
    else
      v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v12, 309, (uint64_t)CFSTR("giving up waiting for match - runloop result is %d\n"), v7, v8, v9, v10, v11, v4);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v16 = v4;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "giving up waiting for match - runloop result is %d\n", buf, 8u);
    }
  }
  v13 = *(_QWORD *)(a1 + 48);
  if (v13)
    (*(void (**)(void))(v13 + 16))();
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 56));
}

void sub_19B6DC768(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD v4[6];
  _QWORD v5[8];
  _QWORD v6[4];
  _QWORD v7[3];
  int v8;

  v7[0] = 0;
  v7[1] = v7;
  v7[2] = 0x2000000000;
  v8 = 0;
  v6[0] = 0;
  v6[1] = v6;
  v6[2] = 0x2000000000;
  v6[3] = 0;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = sub_19B6DC830;
  v5[3] = &unk_1E3BD1138;
  v5[4] = a3;
  v5[5] = v6;
  v5[6] = v7;
  v5[7] = a1;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = sub_19B6DCA38;
  v4[3] = &unk_1E3BD1160;
  v4[4] = v6;
  v4[5] = v7;
  sub_19B6DC554(a2, (uint64_t)v5, a4, (uint64_t)v4);
  _Block_object_dispose(v6, 8);
  _Block_object_dispose(v7, 8);
}

BOOL sub_19B6DC830(uint64_t a1, _QWORD *a2)
{
  __CFRunLoop *Current;
  __CFRunLoopSource *RunLoopSource;
  kern_return_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  io_iterator_t v14;
  uint8_t buf[8];
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, _BYTE *);
  void *v19;
  _QWORD *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  *a2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = IONotificationPortCreate(*MEMORY[0x1E0CBBAA8]);
  Current = CFRunLoopGetCurrent();
  RunLoopSource = IONotificationPortGetRunLoopSource(*(IONotificationPortRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                              + 24));
  CFRunLoopAddSource(Current, RunLoopSource, CFSTR("MobileGestaltRunLoopMode"));
  v6 = IOServiceAddMatchingNotification(*(IONotificationPortRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24), "IOServiceMatched", *(CFDictionaryRef *)(a1 + 56), (IOServiceMatchingCallback)sub_19B6DC9E0, a2, (io_iterator_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  if (v6)
  {
    v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v7)
      v13 = v7 + 1;
    else
      v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v13, 349, (uint64_t)CFSTR("unable to register for match notifications: 0x%x\n"), v8, v9, v10, v11, v12, v6);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v6;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "unable to register for match notifications: 0x%x\n", buf, 8u);
    }
  }
  else
  {
    v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    v17 = 0x40000000;
    v18 = sub_19B6DD504;
    v19 = &unk_1E3BD11A8;
    v20 = a2;
    sub_19B6DBD44(v14, (uint64_t)buf);
  }
  return v6 == 0;
}

uint64_t sub_19B6DC9E0(uint64_t a1, io_iterator_t iterator)
{
  _QWORD v3[5];

  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 0x40000000;
  v3[2] = sub_19B6DD504;
  v3[3] = &unk_1E3BD11A8;
  v3[4] = a1;
  return sub_19B6DBD44(iterator, (uint64_t)v3);
}

uint64_t sub_19B6DCA38(uint64_t a1)
{
  IONotificationPort *v2;
  uint64_t result;

  v2 = *(IONotificationPort **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v2)
    IONotificationPortDestroy(v2);
  result = *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  if ((_DWORD)result)
    return IOObjectRelease(result);
  return result;
}

uint64_t sub_19B6DCA84(int a1, char *a2, const __CFString *a3, uint64_t a4)
{
  const __CFData *v7;
  const __CFData *v8;
  CFTypeID v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint8_t buf[4];
  const __CFString *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  const __CFData *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = (const __CFData *)sub_19B6BBC28(a1, a2, a3);
  v8 = v7;
  if (v7)
  {
    v9 = CFGetTypeID(v7);
    if (v9 == CFDataGetTypeID() && CFDataGetLength(v8) == 4)
    {
      a4 = *(unsigned int *)CFDataGetBytePtr(v8);
LABEL_11:
      CFRelease(v8);
      return a4;
    }
  }
  v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
  if (v10)
    v16 = v10 + 1;
  else
    v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
  _MGLog((uint64_t)v16, 596, (uint64_t)CFSTR("value for %@ property of %s is invalid (%@)"), v11, v12, v13, v14, v15, (char)a3);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v19 = a3;
    v20 = 2080;
    v21 = a2;
    v22 = 2112;
    v23 = v8;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "value for %@ property of %s is invalid (%@)", buf, 0x20u);
  }
  if (v8)
    goto LABEL_11;
  return a4;
}

CFDictionaryRef sub_19B6DCBD8(const __CFString *a1)
{
  const __CFData *v2;
  const __CFData *v3;
  CFTypeID v4;
  unsigned __int16 *BytePtr;
  CFDictionaryRef v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  CFDictionaryRef result;
  uint8_t buf[4];
  const __CFString *v16;
  __int16 v17;
  const __CFData *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/product/facetime", a1, 0);
  v3 = v2;
  if (v2)
  {
    v4 = CFGetTypeID(v2);
    if (v4 == CFDataGetTypeID() && CFDataGetLength(v3) == 8)
    {
      BytePtr = (unsigned __int16 *)CFDataGetBytePtr(v3);
      v6 = sub_19B6DCD28(BytePtr);
LABEL_11:
      CFRelease(v3);
      return v6;
    }
  }
  v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
  if (v7)
    v13 = v7 + 1;
  else
    v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
  _MGLog((uint64_t)v13, 662, (uint64_t)CFSTR("unexpected %@ property %@"), v8, v9, v10, v11, v12, (char)a1);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412546;
    v16 = a1;
    v17 = 2112;
    v18 = v3;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "unexpected %@ property %@", buf, 0x16u);
  }
  v6 = 0;
  result = 0;
  if (v3)
    goto LABEL_11;
  return result;
}

CFDictionaryRef sub_19B6DCD28(unsigned __int16 *a1)
{
  int v1;
  int v2;
  CFNumberRef v3;
  CFNumberRef v4;
  CFNumberRef v5;
  CFDictionaryRef v6;
  int v8;
  int v9;
  int valuePtr;
  void *values[3];
  void *keys[2];
  const __CFString *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v2 = a1[2];
  v9 = a1[3];
  valuePtr = v1;
  v8 = v2;
  v3 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  v4 = CFNumberCreate(0, kCFNumberIntType, &v9);
  v5 = CFNumberCreate(0, kCFNumberIntType, &v8);
  *(_OWORD *)keys = xmmword_1E3BD11C8;
  v13 = CFSTR("f");
  values[0] = v3;
  values[1] = v4;
  values[2] = v5;
  v6 = CFDictionaryCreate(0, (const void **)keys, (const void **)values, 3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  CFRelease(v3);
  CFRelease(v4);
  CFRelease(v5);
  return v6;
}

__CFArray *sub_19B6DCE30(const __CFString *a1)
{
  const __CFData *v2;
  const __CFData *v3;
  CFTypeID v4;
  CFIndex Length;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  __CFArray *Mutable;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  const UInt8 *BytePtr;
  const UInt8 *v23;
  CFIndex i;
  CFDictionaryRef v25;
  uint8_t buf[4];
  const __CFString *v27;
  __int16 v28;
  CFIndex v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/product/facetime", a1, 0);
  v3 = v2;
  if (v2 && (v4 = CFGetTypeID(v2), v4 == CFDataGetTypeID()))
  {
    Length = CFDataGetLength(v3);
    if ((Length & 7) != 0)
    {
      v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v6)
        v12 = v6 + 1;
      else
        v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      _MGLog((uint64_t)v12, 689, (uint64_t)CFSTR("%@ property has unexpected length %lu"), v7, v8, v9, v10, v11, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412546;
        v27 = a1;
        v28 = 2048;
        v29 = Length;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%@ property has unexpected length %lu", buf, 0x16u);
      }
      Mutable = 0;
      goto LABEL_17;
    }
    Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
    BytePtr = CFDataGetBytePtr(v3);
    if (Length < 1)
    {
LABEL_17:
      CFRelease(v3);
      return Mutable;
    }
    v23 = BytePtr;
    for (i = 0; i < Length; i += 8)
    {
      v25 = sub_19B6DCD28((unsigned __int16 *)&v23[i]);
      CFArrayAppendValue(Mutable, v25);
      CFRelease(v25);
    }
  }
  else
  {
    v14 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v14)
      v20 = v14 + 1;
    else
      v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v20, 683, (uint64_t)CFSTR("Could not read %@ data property"), v15, v16, v17, v18, v19, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v27 = a1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not read %@ data property", buf, 0xCu);
    }
    Mutable = 0;
  }
  if (v3)
    goto LABEL_17;
  return Mutable;
}

CFDataRef sub_19B6DD058(const char *a1, uint32_t a2, const void *a3, size_t a4, size_t a5)
{
  return sub_19B6DD070(a1, a2, 0, 0, a3, a4, a5);
}

CFDataRef sub_19B6DD070(const char *a1, uint32_t a2, const uint64_t *a3, uint32_t a4, const void *a5, size_t a6, size_t a7)
{
  void *outputStruct;
  kern_return_t v15;
  mach_error_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  CFDataRef v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  mach_port_t connection[2];
  CFIndex length;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  uint32_t v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)connection = 0;
  length = a7;
  if ((sub_19B6DBB18(a1, &connection[1], connection) & 1) != 0)
  {
    outputStruct = malloc_type_malloc(a7, 0x6AE770A1uLL);
    v15 = IOConnectCallMethod(connection[0], a2, a3, a4, a5, a6, 0, 0, outputStruct, (size_t *)&length);
    if (v15)
    {
      v16 = v15;
      v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
      v18 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
      if (v18)
        v17 = v18 + 1;
      mach_error_string(v16);
      _MGLog((uint64_t)v17, 739, (uint64_t)CFSTR("IOConnectCallMethod(%s,%u) failed: %s"), v19, v20, v21, v22, v23, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        v24 = mach_error_string(v16);
        *(_DWORD *)buf = 136315650;
        v37 = a1;
        v38 = 1024;
        v39 = a2;
        v40 = 2080;
        v41 = v24;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IOConnectCallMethod(%s,%u) failed: %s", buf, 0x1Cu);
      }
      v25 = 0;
    }
    else
    {
      v25 = CFDataCreateWithBytesNoCopy(0, (const UInt8 *)outputStruct, length, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
    }
  }
  else
  {
    v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c", 47);
    if (v26)
      v32 = v26 + 1;
    else
      v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitSupport.c";
    _MGLog((uint64_t)v32, 721, (uint64_t)CFSTR("unable to connect to service %s"), v27, v28, v29, v30, v31, (char)a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v37 = a1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "unable to connect to service %s", buf, 0xCu);
    }
    v25 = 0;
    outputStruct = 0;
  }
  if (connection[0])
    IOServiceClose(connection[0]);
  if (connection[1])
    IOObjectRelease(connection[1]);
  if (outputStruct && !v25)
    free(outputStruct);
  return v25;
}

CFDataRef sub_19B6DD2D4(const char *a1, uint32_t a2, const uint64_t *a3, uint32_t a4, size_t a5)
{
  return sub_19B6DD070(a1, a2, a3, a4, 0, 0, a5);
}

BOOL sub_19B6DD2E4()
{
  CFTypeRef v0;
  const void *v1;
  const __CFArray *v2;
  const __CFArray *v3;
  CFIndex Count;
  CFIndex v5;
  CFIndex v6;
  BOOL v7;
  const void *ValueAtIndex;
  const __CFDictionary *v9;
  const __CFDictionary *v10;
  const __CFBoolean *Value;
  const __CFBoolean *v12;
  CFTypeID v13;
  const __CFString *v14;
  const __CFString *v15;
  CFTypeID v16;

  v0 = IOPSCopyPowerSourcesInfo();
  if (v0)
  {
    v1 = v0;
    v2 = IOPSCopyPowerSourcesList(v0);
    if (v2)
    {
      v3 = v2;
      Count = CFArrayGetCount(v2);
      if (Count < 1)
      {
        v7 = 0;
      }
      else
      {
        v5 = Count;
        v6 = 0;
        v7 = 1;
        do
        {
          ValueAtIndex = CFArrayGetValueAtIndex(v3, v6);
          if (ValueAtIndex)
          {
            v9 = IOPSGetPowerSourceDescription(v1, ValueAtIndex);
            if (v9)
            {
              v10 = v9;
              Value = (const __CFBoolean *)CFDictionaryGetValue(v9, CFSTR("Is Present"));
              if (Value)
              {
                v12 = Value;
                v13 = CFGetTypeID(Value);
                if (v13 == CFBooleanGetTypeID())
                {
                  if (CFBooleanGetValue(v12))
                  {
                    v14 = (const __CFString *)CFDictionaryGetValue(v10, CFSTR("Type"));
                    if (v14)
                    {
                      v15 = v14;
                      v16 = CFGetTypeID(v14);
                      if (v16 == CFStringGetTypeID()
                        && CFStringCompare(v15, CFSTR("InternalBattery"), 0) == kCFCompareEqualTo)
                      {
                        break;
                      }
                    }
                  }
                }
              }
            }
          }
          v7 = ++v6 < v5;
        }
        while (v5 != v6);
      }
      CFRelease(v3);
    }
    else
    {
      v7 = 0;
    }
    CFRelease(v1);
  }
  else
  {
    return 0;
  }
  return v7;
}

void sub_19B6DD430(uint64_t a1, io_registry_entry_t entry, _BYTE *a3)
{
  const __CFAllocator *v6;
  const __CFNumber *CFProperty;
  const __CFNumber *v8;
  CFTypeID v9;
  int valuePtr;

  v6 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  CFProperty = (const __CFNumber *)IORegistryEntryCreateCFProperty(entry, CFSTR("flags"), (CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0);
  if (CFProperty)
  {
    v8 = CFProperty;
    v9 = CFGetTypeID(CFProperty);
    if (v9 == CFNumberGetTypeID())
    {
      valuePtr = 0;
      CFNumberGetValue(v8, kCFNumberSInt32Type, &valuePtr);
      if ((~valuePtr & 0x30000) == 0)
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = IORegistryEntryCreateCFProperty(entry, CFSTR("IDSN"), v6, 0);
        *a3 = 1;
      }
    }
    CFRelease(v8);
  }
}

uint64_t sub_19B6DD504(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = result;
  if ((_DWORD)result)
    *a3 = 1;
  return result;
}

CFTypeRef sub_19B6DD548()
{
  return sub_19B6DD554(CFSTR("AppleDiagnosticData"));
}

CFTypeRef sub_19B6DD554(const __CFString *a1)
{
  CFTypeRef v2;
  CFTypeID v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t v19[16];
  uint8_t buf[16];

  v2 = sub_19B6BBC28(0, "AppleDiagnosticDataAccess", a1);
  if (!v2)
  {
    v2 = sub_19B6BBC28(0, "AppleDiagnosticDataAccessReadOnly", a1);
    if (!v2)
    {
      v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v12)
        v18 = v12 + 1;
      else
        v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v18, 122, (uint64_t)CFSTR("Unable to read diagnostic data from service"), v13, v14, v15, v16, v17, v19[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to read diagnostic data from service", buf, 2u);
      }
      return 0;
    }
  }
  v3 = CFGetTypeID(v2);
  if (v3 != CFDataGetTypeID())
  {
    v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v4)
      v10 = v4 + 1;
    else
      v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v10, 129, (uint64_t)CFSTR("diagnostic data isn't chicken, it's beef!"), v5, v6, v7, v8, v9, v19[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "diagnostic data isn't chicken, it's beef!", v19, 2u);
    }
    CFRelease(v2);
    return 0;
  }
  return v2;
}

CFTypeRef sub_19B6DD6B0()
{
  CFTypeRef v0;
  CFMutableDictionaryRef v1;
  _QWORD v3[5];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const void *v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2000000000;
  v7 = 0;
  v7 = sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("syscfg-v2-data"), 0);
  v0 = (CFTypeRef)v5[3];
  if (!v0)
  {
    v0 = sub_19B6DD554(CFSTR("AppleDiagnosticDataSysCfg"));
    v5[3] = (uint64_t)v0;
    if (!v0)
    {
      if ((sub_19B6B5FA0() & 1) != 0)
      {
        v0 = 0;
      }
      else
      {
        v0 = (CFTypeRef)v5[3];
        if (!v0)
        {
          v1 = IOServiceMatching("AppleDiagnosticDataAccessReadOnly");
          v3[0] = MEMORY[0x1E0C809B0];
          v3[1] = 0x40000000;
          v3[2] = sub_19B6DD7B0;
          v3[3] = &unk_1E3BD11E8;
          v3[4] = &v4;
          sub_19B6DC768((uint64_t)v1, 5, (uint64_t)v3, 0);
          v0 = (CFTypeRef)v5[3];
        }
      }
    }
  }
  _Block_object_dispose(&v4, 8);
  return v0;
}

uint64_t sub_19B6DD7B0(uint64_t a1)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_19B6DD554(CFSTR("AppleDiagnosticDataSysCfg"));
  return 1;
}

const void *sub_19B6DD7E8()
{
  if (sub_19B6B5FA0())
    return sub_19B6B2C64("IODeviceTree:/chosen", CFSTR("syscfg-vmpv-data"), 0);
  else
    return 0;
}

__CFData *sub_19B6DD820(unsigned int a1)
{
  kern_return_t v2;
  kern_return_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint32_t v20;
  __CFData *Mutable;
  kern_return_t v22;
  kern_return_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  char v46;
  uint32_t outputCnt;
  uint64_t output;
  mach_port_t connection[2];
  uint8_t buf[4];
  uint32_t v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  kern_return_t v59;
  uint64_t v60[3];
  uint64_t input[2];

  input[1] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)connection = 0;
  if ((sub_19B6DBB18("AppleNVMeEAN", &connection[1], connection) & 1) == 0)
  {
    v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v13)
      v19 = v13 + 1;
    else
      v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v19, 188, (uint64_t)CFSTR("Could not open EAN service and connect"), v14, v15, v16, v17, v18, v46);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_28;
    *(_WORD *)buf = 0;
    v11 = MEMORY[0x1E0C81028];
    v12 = "Could not open EAN service and connect";
    v20 = 2;
    goto LABEL_27;
  }
  input[0] = a1;
  output = 0;
  outputCnt = 1;
  v2 = IOConnectCallScalarMethod(connection[0], 3u, input, 1u, &output, &outputCnt);
  if (v2)
  {
    v3 = v2;
    v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v4)
      v10 = v4 + 1;
    else
      v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v10, 206, (uint64_t)CFSTR("Could not get size of EAN data (IOConnectCallScalarMethod kAppleNVMeEANGetSize returned 0x%X)"), v5, v6, v7, v8, v9, v3);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_28;
    *(_DWORD *)buf = 67109120;
    v51 = v3;
    v11 = MEMORY[0x1E0C81028];
    v12 = "Could not get size of EAN data (IOConnectCallScalarMethod kAppleNVMeEANGetSize returned 0x%X)";
    goto LABEL_26;
  }
  if (outputCnt != 1)
  {
    v31 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v31)
      v37 = v31 + 1;
    else
      v37 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v37, 213, (uint64_t)CFSTR("Expected 1 output value for kAppleNVMeEANGetSize but got %d"), v32, v33, v34, v35, v36, outputCnt);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_28;
    *(_DWORD *)buf = 67109120;
    v51 = outputCnt;
    v11 = MEMORY[0x1E0C81028];
    v12 = "Expected 1 output value for kAppleNVMeEANGetSize but got %d";
LABEL_26:
    v20 = 8;
LABEL_27:
    _os_log_impl(&dword_19B6B1000, v11, OS_LOG_TYPE_DEFAULT, v12, buf, v20);
LABEL_28:
    Mutable = 0;
    goto LABEL_29;
  }
  if (!output)
  {
    v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v39)
      v45 = v39 + 1;
    else
      v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v45, 223, (uint64_t)CFSTR("Size of EAN image '%c%c%c%c' is zero. Returning NULL"), v40, v41, v42, v43, v44, SHIBYTE(a1));
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_28;
    *(_DWORD *)buf = 67109888;
    v51 = HIBYTE(a1);
    v52 = 1024;
    v53 = BYTE2(a1);
    v54 = 1024;
    v55 = BYTE1(a1);
    v56 = 1024;
    v57 = a1;
    v11 = MEMORY[0x1E0C81028];
    v12 = "Size of EAN image '%c%c%c%c' is zero. Returning NULL";
    v20 = 26;
    goto LABEL_27;
  }
  Mutable = CFDataCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], output);
  CFDataSetLength(Mutable, output);
  v60[0] = a1;
  v60[1] = (uint64_t)CFDataGetMutableBytePtr(Mutable);
  v60[2] = output;
  v22 = IOConnectCallScalarMethod(connection[0], 4u, v60, 3u, 0, 0);
  if (v22)
  {
    v23 = v22;
    v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    v30 = v24
        ? v24 + 1
        : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v30, 246, (uint64_t)CFSTR("Could not read EAN image '%c%c%c%c' (IOConnectCallScalarMethod kAppleNVMeEANRead returned 0x%X)"), v25, v26, v27, v28, v29, SHIBYTE(a1));
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      v51 = HIBYTE(a1);
      v52 = 1024;
      v53 = BYTE2(a1);
      v54 = 1024;
      v55 = BYTE1(a1);
      v56 = 1024;
      v57 = a1;
      v58 = 1024;
      v59 = v23;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Could not read EAN image '%c%c%c%c' (IOConnectCallScalarMethod kAppleNVMeEANRead returned 0x%X)", buf, 0x20u);
    }
  }
LABEL_29:
  if (connection[0])
    IOServiceClose(connection[0]);
  if (connection[1])
    IOObjectRelease(connection[1]);
  return Mutable;
}

__CFData *sub_19B6DDC20(unsigned int a1)
{
  __CFData *v1;
  __CFData *v2;
  CFIndex v3;

  v1 = sub_19B6DD820(a1);
  v2 = v1;
  if (v1)
  {
    v3 = sub_19B6DDC5C(v1);
    CFDataSetLength(v2, v3);
  }
  return v2;
}

CFIndex sub_19B6DDC5C(const __CFData *a1)
{
  int v2;
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint8_t buf[4];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v15[0] = CFDataGetBytePtr(a1);
  v15[1] = CFDataGetLength(a1);
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v2 = sub_19B6F7010((uint64_t)v15, &v12, 0);
  if (!v2)
    return v13 - v15[0] + v14;
  v3 = v2;
  v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v4)
    v10 = v4 + 1;
  else
    v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  _MGLog((uint64_t)v10, 1225, (uint64_t)CFSTR("Failed to DERDecode the buffer with status: %d"), v5, v6, v7, v8, v9, v3);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v17 = v3;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to DERDecode the buffer with status: %d", buf, 8u);
  }
  return CFDataGetLength(a1);
}

const void *sub_19B6DDD80()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _BOOL8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const void *Copy;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const __CFDictionary *Mutable;
  NSObject *v26;
  CFTypeRef *v27;
  uint64_t v28;
  int v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unsigned int v37;
  CFTypeRef v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  const char *v45;
  CFTypeRef v46;
  CFTypeRef v47;
  CFIndex Count;
  const void **v49;
  CFIndex v50;
  const void **v51;
  const void *v52;
  const void *Value;
  BOOL v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v71;
  CFTypeRef *v72;
  _QWORD v73[2];
  void (*v74)(uint64_t, const void *, const void *);
  void *v75;
  const __CFDictionary *v76;
  _QWORD v77[5];
  unsigned int v78;
  uint64_t v79;
  CFTypeRef cf;
  uint8_t buf[4];
  const char *v82;
  __int16 v83;
  CFTypeRef v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1EE3FD7C8);
  v0 = qword_1EE3FD798;
  v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v1)
    v7 = v1 + 1;
  else
    v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  if (v0)
  {
    _MGLog((uint64_t)v7, 302, (uint64_t)CFSTR("%s returning previously initialized sysconfig dictionary"), v2, v3, v4, v5, v6, (char)"CFDictionaryRef copySyscfgDictionary(void)");
    v8 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG);
    if (v8)
      sub_19B70F1E8(v8, v9, v10, v11, v12, v13, v14, v15);
    Copy = CFRetain((CFTypeRef)qword_1EE3FD798);
    goto LABEL_56;
  }
  _MGLog((uint64_t)v7, 307, (uint64_t)CFSTR("%s creating new sysconfig dictionary"), v2, v3, v4, v5, v6, (char)"CFDictionaryRef copySyscfgDictionary(void)");
  v17 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG);
  if (v17)
    sub_19B70F174(v17, v18, v19, v20, v21, v22, v23, v24);
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v79 = 0;
  cf = 0;
  v78 = 0;
  v72 = (CFTypeRef *)sub_19B6DE29C(&v78, (unsigned __int8 *)&v79);
  v77[0] = MEMORY[0x1E0C809B0];
  v77[1] = 0x40000000;
  v77[2] = sub_19B6DE970;
  v77[3] = &unk_1E3BD1208;
  v77[4] = Mutable;
  v71 = v78;
  if (v78)
  {
    v26 = MEMORY[0x1E0C81028];
    v28 = v78;
    v27 = v72;
    do
    {
      v29 = *((unsigned __int8 *)v27 + 16);
      v30 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v30)
        v36 = v30 + 1;
      else
        v36 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      if (!v29)
      {
        _MGLog((uint64_t)v36, 336, (uint64_t)CFSTR("%s skipping: %@. It is not allowed to be loaded."), v31, v32, v33, v34, v35, (char)"CFDictionaryRef copySyscfgDictionary(void)");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          v38 = v27[1];
          *(_DWORD *)buf = 136315394;
          v82 = "CFDictionaryRef copySyscfgDictionary(void)";
          v83 = 2112;
          v84 = v38;
          _os_log_debug_impl(&dword_19B6B1000, v26, OS_LOG_TYPE_DEBUG, "%s skipping: %@. It is not allowed to be loaded.", buf, 0x16u);
        }
        goto LABEL_35;
      }
      _MGLog((uint64_t)v36, 345, (uint64_t)CFSTR("%s enumerating: %@"), v31, v32, v33, v34, v35, (char)"CFDictionaryRef copySyscfgDictionary(void)");
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
      {
        v47 = v27[1];
        *(_DWORD *)buf = 136315394;
        v82 = "CFDictionaryRef copySyscfgDictionary(void)";
        v83 = 2112;
        v84 = v47;
        _os_log_debug_impl(&dword_19B6B1000, v26, OS_LOG_TYPE_DEBUG, "%s enumerating: %@", buf, 0x16u);
      }
      v37 = *(_DWORD *)v27;
      if (*(_DWORD *)v27 == 1986883702)
      {
        if ((sub_19B6DF3A4((uint64_t)v77) & 1) == 0)
          goto LABEL_30;
      }
      else if (v37 == 1936023916)
      {
        if ((sub_19B6DEF34((uint64_t)&v79, (uint64_t)v77) & 1) == 0)
          goto LABEL_30;
      }
      else if (v37 == 1094992961)
      {
        if (!sub_19B6DEB6C((uint64_t)v77))
          goto LABEL_30;
      }
      else if ((sub_19B6DF3EC((uint64_t)&v79, (unsigned int *)v27, (uint64_t)v77) & 1) == 0)
      {
LABEL_30:
        v39 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
        if (v39)
          v45 = v39 + 1;
        else
          v45 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        _MGLog((uint64_t)v45, 373, (uint64_t)CFSTR("%s enumeration of %@ failed."), v40, v41, v42, v43, v44, (char)"CFDictionaryRef copySyscfgDictionary(void)");
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          v46 = v27[1];
          *(_DWORD *)buf = 136315394;
          v82 = "CFDictionaryRef copySyscfgDictionary(void)";
          v83 = 2112;
          v84 = v46;
          _os_log_impl(&dword_19B6B1000, v26, OS_LOG_TYPE_DEFAULT, "%s enumeration of %@ failed.", buf, 0x16u);
        }
      }
LABEL_35:
      v27 += 3;
      --v28;
    }
    while (v28);
  }
  v73[0] = MEMORY[0x1E0C809B0];
  v73[1] = 0x40000000;
  v74 = sub_19B6DF644;
  v75 = &unk_1E3BD1228;
  v76 = Mutable;
  if (Mutable)
  {
    Count = CFDictionaryGetCount(Mutable);
    v49 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
    CFDictionaryGetKeysAndValues(Mutable, v49, 0);
    v50 = Count - 1;
    if (Count >= 1)
    {
      v51 = v49;
      do
      {
        buf[0] = 0;
        v52 = *v51++;
        Value = CFDictionaryGetValue(Mutable, v52);
        ((void (*)(_QWORD *, const void *, const void *, uint8_t *))v74)(v73, v52, Value, buf);
        if (buf[0])
          v54 = 1;
        else
          v54 = v50 == 0;
        --v50;
      }
      while (!v54);
    }
    free(v49);
  }
  Copy = CFDictionaryCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], Mutable);
  sub_19B6DF750(v72, v71);
  if (cf)
    CFRelease(cf);
  cf = 0;
  LODWORD(v79) = 0;
  if (Mutable)
    CFRelease(Mutable);
  if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
  {
    v55 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v55)
      v61 = v55 + 1;
    else
      v61 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v61, 399, (uint64_t)CFSTR("%s not caching sysconfig dictionary because device is in RestoreOS"), v56, v57, v58, v59, v60, (char)"CFDictionaryRef copySyscfgDictionary(void)");
    v62 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG);
    if (v62)
      sub_19B70F100(v62, v63, v64, v65, v66, v67, v68, v69);
  }
  else
  {
    qword_1EE3FD798 = (uint64_t)CFRetain(Copy);
  }
LABEL_56:
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1EE3FD7C8);
  return Copy;
}

_QWORD *sub_19B6DE29C(_DWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  const __CFData *v4;
  const __CFData *v5;
  const __CFData *v6;
  const __CFData *v7;
  CFIndex Length;
  CFIndex v9;
  char *v10;
  const char *v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _QWORD *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  size_t v45;
  char *v47;
  const char *v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  const UInt8 *BytePtr;
  const UInt8 *v66;
  const UInt8 *v67;
  uint64_t v68;
  unsigned int v69;
  const UInt8 *v70;
  char *v71;
  int v72;
  int v73;
  BOOL v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  const char *v81;
  char v82;
  int *v83;
  int *v84;
  uint64_t v85;
  CFTypeRef cf;
  uint8_t buf[4];
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  uint64_t v93;

  v93 = *MEMORY[0x1E0C80C00];
  v85 = 0;
  cf = 0;
  if (a2)
    v3 = a2;
  else
    v3 = (unsigned __int8 *)&v85;
  *((_QWORD *)v3 + 1) = 0;
  *(_DWORD *)v3 = 0;
  if (!sub_19B6E0F44())
  {
    v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v22)
      v28 = v22 + 1;
    else
      v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v28, 663, (uint64_t)CFSTR("EAN is not supported on this device. Building default policy."), v23, v24, v25, v26, v27, v82);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "EAN is not supported on this device. Building default policy.", buf, 2u);
    }
    *a1 = 0;
    goto LABEL_34;
  }
  v4 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("syscfg-erly-kbgs-allow-load"), 0);
  v5 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("syscfg-erly-kbgs-data-class"), 0);
  v6 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("syscfg-erly-kbgs-allow-unsealed"), 0);
  v7 = v6;
  if (v4 && v5 && v6)
  {
    Length = CFDataGetLength(v4);
    if (Length != CFDataGetLength(v5) || (v9 = CFDataGetLength(v4), v9 != CFDataGetLength(v7)))
    {
      v47 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v47)
        v48 = v47 + 1;
      else
        v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      v49 = CFDataGetLength(v4);
      CFDataGetLength(v5);
      CFDataGetLength(v7);
      _MGLog((uint64_t)v48, 690, (uint64_t)CFSTR("Lengths of 'syscfg-erly-kbgs-*' were not equal. earlyKeyBagsAllowLoad (%d) earlyKeyBagsDataClasses (%d) earlyKeyBagsAllowUnsealed (%d)"), v50, v51, v52, v53, v54, v49);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      v55 = CFDataGetLength(v4);
      v56 = CFDataGetLength(v5);
      v57 = CFDataGetLength(v7);
      *(_DWORD *)buf = 67109632;
      v88 = v55;
      v89 = 1024;
      v90 = v56;
      v91 = 1024;
      v92 = v57;
      v19 = MEMORY[0x1E0C81028];
      v20 = "Lengths of 'syscfg-erly-kbgs-*' were not equal. earlyKeyBagsAllowLoad (%d) earlyKeyBagsDataClasses (%d) earl"
            "yKeyBagsAllowUnsealed (%d)";
      v21 = 20;
      goto LABEL_53;
    }
    if (CFDataGetLength(v4) <= 0)
    {
      v58 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v58)
        v64 = v58 + 1;
      else
        v64 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v64, 696, (uint64_t)CFSTR("Length of 'syscfg-erly-kbgs-allow-load' was 0"), v59, v60, v61, v62, v63, v82);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      *(_WORD *)buf = 0;
      v19 = MEMORY[0x1E0C81028];
      v20 = "Length of 'syscfg-erly-kbgs-allow-load' was 0";
    }
    else
    {
      if ((CFDataGetLength(v4) & 3) != 0)
      {
        v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
        if (v10)
          v11 = v10 + 1;
        else
          v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        v12 = CFDataGetLength(v4);
        _MGLog((uint64_t)v11, 702, (uint64_t)CFSTR("Length of 'syscfg-erly-kbgs-allow-load' (%d) was not a multiple of (%d)"), v13, v14, v15, v16, v17, v12);
        if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          goto LABEL_54;
        v18 = CFDataGetLength(v4);
        *(_DWORD *)buf = 67109376;
        v88 = v18;
        v89 = 1024;
        v90 = 4;
        v19 = MEMORY[0x1E0C81028];
        v20 = "Length of 'syscfg-erly-kbgs-allow-load' (%d) was not a multiple of (%d)";
        v21 = 14;
LABEL_53:
        _os_log_impl(&dword_19B6B1000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
LABEL_54:
        LODWORD(v37) = 0;
        v36 = 0;
        goto LABEL_55;
      }
      BytePtr = CFDataGetBytePtr(v4);
      v66 = CFDataGetBytePtr(v5);
      v67 = CFDataGetBytePtr(v7);
      if ((sub_19B6DFE20(v3) & 1) != 0)
      {
        v84 = (int *)v67;
        v37 = (unint64_t)CFDataGetLength(v4) >> 2;
        v36 = malloc_type_calloc(v37, 0x18uLL, 0x10600407F5F6BDAuLL);
        if ((_DWORD)v37)
        {
          v83 = (int *)BytePtr;
          v68 = 0;
          do
          {
            v69 = *(_DWORD *)v66;
            v70 = v66 + 4;
            v71 = (char *)&v36[v68];
            LODWORD(v36[v68]) = v69;
            *(_DWORD *)buf = bswap32(v69);
            *((_QWORD *)v71 + 1) = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
            v72 = *v83++;
            v71[16] = sub_19B6DFCC0(v72, v3);
            v73 = *v84++;
            v74 = (sub_19B6DFCC0(v73, v3) & 1) != 0 || v3[1] != 0;
            v71[17] = v74;
            v68 += 3;
            v66 = v70;
          }
          while (3 * v37 != v68);
        }
        goto LABEL_55;
      }
      v75 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v75)
        v81 = v75 + 1;
      else
        v81 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v81, 711, (uint64_t)CFSTR("Failed to copy APTicket properties. Falling back to default policy."), v76, v77, v78, v79, v80, v82);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      *(_WORD *)buf = 0;
      v19 = MEMORY[0x1E0C81028];
      v20 = "Failed to copy APTicket properties. Falling back to default policy.";
    }
    v21 = 2;
    goto LABEL_53;
  }
  v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v29)
    v35 = v29 + 1;
  else
    v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  _MGLog((uint64_t)v35, 676, (uint64_t)CFSTR("Failed to copy required 'syscfg-erly-kbgs-*' properties from the EDT"), v30, v31, v32, v33, v34, v82);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to copy required 'syscfg-erly-kbgs-*' properties from the EDT", buf, 2u);
  }
  v36 = 0;
  LODWORD(v37) = 0;
  if (!v4)
  {
    if (!v5)
      goto LABEL_31;
    goto LABEL_30;
  }
LABEL_55:
  CFRelease(v4);
  if (v5)
LABEL_30:
    CFRelease(v5);
LABEL_31:
  if (v7)
    CFRelease(v7);
  *a1 = v37;
  if (!v36)
  {
LABEL_34:
    v38 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v38)
      v44 = v38 + 1;
    else
      v44 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v44, 621, (uint64_t)CFSTR("Creating default MGSysConfigPolicy"), v39, v40, v41, v42, v43, v82);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Creating default MGSysConfigPolicy", buf, 2u);
    }
    if (sub_19B6B5FA0())
      v45 = 2;
    else
      v45 = 1;
    v36 = malloc_type_calloc(v45, 0x18uLL, 0x10600407F5F6BDAuLL);
    *(_DWORD *)v36 = 1094992961;
    *(_DWORD *)buf = 1094992961;
    v36[1] = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
    *((_WORD *)v36 + 8) = 257;
    if (sub_19B6B5FA0())
    {
      *((_DWORD *)v36 + 6) = 1986883702;
      *(_DWORD *)buf = 1987079542;
      v36[4] = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
      *((_WORD *)v36 + 20) = 257;
    }
    *((_QWORD *)v3 + 1) = 0;
    *(_DWORD *)v3 = 0;
    *a1 = v45;
  }
  if (cf)
    CFRelease(cf);
  return v36;
}

void sub_19B6DE970(uint64_t a1, unsigned int a2, unsigned int a3, const UInt8 *a4, CFIndex a5)
{
  CFStringRef v10;
  CFDataRef v11;
  CFStringRef v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  UInt8 bytes[4];
  unsigned int v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)bytes = bswap32(a3);
  v10 = CFStringCreateWithBytes(0, bytes, 4, 0x8000100u, 0);
  v11 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], a4, a5);
  if (v10)
  {
    if (!CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 32), v10))
    {
      *(_DWORD *)bytes = bswap32(a2);
      v12 = CFStringCreateWithBytes(0, bytes, 4, 0x8000100u, 0);
      v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v13)
        v19 = v13 + 1;
      else
        v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v19, 324, (uint64_t)CFSTR("Appending syscfg key (0x%X): %@ from %@"), v14, v15, v16, v17, v18, a3);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
        sub_19B70F25C((uint64_t)v10, (uint64_t)v12, a3);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), v10, v11);
      if (v12)
        CFRelease(v12);
    }
    CFRelease(v10);
  }
  else
  {
    v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v20)
      v26 = v20 + 1;
    else
      v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v26, 318, (uint64_t)CFSTR("Failed to convert syscfg key 0x%X to string"), v21, v22, v23, v24, v25, a3);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)bytes = 67109120;
      v28 = a3;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to convert syscfg key 0x%X to string", bytes, 8u);
    }
  }
  if (v11)
    CFRelease(v11);
}

BOOL sub_19B6DEB6C(uint64_t a1)
{
  const __CFData *v2;
  const __CFData *v3;
  unint64_t Length;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _BOOL8 v12;
  NSObject *v13;
  const char *v14;
  uint32_t v15;
  const UInt8 *BytePtr;
  const UInt8 *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  unsigned int *v34;
  uint64_t v35;
  unsigned int *v36;
  int v37;
  unint64_t v38;
  int v40;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  _BOOL4 v49;
  char v50;
  char v51;
  uint8_t buf[4];
  _BYTE v53[10];
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = (const __CFData *)sub_19B6DD6B0();
  if (!v2)
    return 0;
  v3 = v2;
  Length = CFDataGetLength(v2);
  if (Length <= 0x17)
  {
    v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v5)
      v11 = v5 + 1;
    else
      v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v11, 825, (uint64_t)CFSTR("syscfg length %lu is too small, header size %lu\n"), v6, v7, v8, v9, v10, Length);
    v12 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_36;
    *(_DWORD *)buf = 134218240;
    *(_QWORD *)v53 = Length;
    *(_WORD *)&v53[8] = 2048;
    v54 = 24;
    v13 = MEMORY[0x1E0C81028];
    v14 = "syscfg length %lu is too small, header size %lu\n";
    v15 = 22;
    goto LABEL_21;
  }
  BytePtr = CFDataGetBytePtr(v3);
  if (*(_DWORD *)BytePtr != 1396926055)
  {
    v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v26)
      v32 = v26 + 1;
    else
      v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v32, 834, (uint64_t)CFSTR("syscfg is not initialized!\n"), v27, v28, v29, v30, v31, v50);
    v12 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_36;
    *(_WORD *)buf = 0;
    v13 = MEMORY[0x1E0C81028];
    v14 = "syscfg is not initialized!\n";
    v15 = 2;
LABEL_21:
    _os_log_impl(&dword_19B6B1000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, v15);
    v12 = 0;
    goto LABEL_36;
  }
  v17 = BytePtr;
  v18 = *((unsigned int *)BytePtr + 5);
  if (Length < 20 * (unint64_t)v18 + 24)
  {
    v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v19)
      v25 = v19 + 1;
    else
      v25 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v25, 845, (uint64_t)CFSTR("syscfg length %lu is too small, should be at least %lu to contain %u entries\n"), v20, v21, v22, v23, v24, Length);
    v12 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_36;
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)v53 = Length;
    *(_WORD *)&v53[8] = 2048;
    v54 = 20 * v18 + 24;
    LOWORD(v55) = 1024;
    *(_DWORD *)((char *)&v55 + 2) = v18;
    v13 = MEMORY[0x1E0C81028];
    v14 = "syscfg length %lu is too small, should be at least %lu to contain %u entries\n";
    v15 = 28;
    goto LABEL_21;
  }
  if (!(_DWORD)v18)
  {
LABEL_34:
    v40 = 1;
    goto LABEL_35;
  }
  v33 = 0;
  v34 = (unsigned int *)(BytePtr + 36);
  while (1)
  {
    v51 = 0;
    v35 = *(v34 - 3);
    v36 = v34 - 2;
    if ((_DWORD)v35 == 1129206850)
      break;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *, uint64_t, char *))(a1 + 16))(a1, 1094992961, v35, v36, 16, &v51);
LABEL_32:
    if (!v51)
    {
      ++v33;
      v34 += 5;
      if (v18 != v33)
        continue;
    }
    goto LABEL_34;
  }
  v37 = *(v34 - 1);
  v38 = *v34;
  if (Length >= v38 && Length >= (v37 + v38))
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD, const UInt8 *, _QWORD, char *))(a1 + 16))(a1, 1094992961, *v36, &v17[v38], *(v34 - 1), &v51);
    goto LABEL_32;
  }
  v42 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v42)
    v48 = v42 + 1;
  else
    v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  _MGLog((uint64_t)v48, 866, (uint64_t)CFSTR("syscfg entry %u offset %u, len %u is out of range; syscfg length is %lu\n"),
    v43,
    v44,
    v45,
    v46,
    v47,
    v33);
  v49 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  v40 = 0;
  if (v49)
  {
    *(_DWORD *)buf = 67109888;
    *(_DWORD *)v53 = v33;
    *(_WORD *)&v53[4] = 1024;
    *(_DWORD *)&v53[6] = v38;
    LOWORD(v54) = 1024;
    *(_DWORD *)((char *)&v54 + 2) = v37;
    HIWORD(v54) = 2048;
    v55 = Length;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "syscfg entry %u offset %u, len %u is out of range; syscfg length is %lu\n",
      buf,
      0x1Eu);
    v40 = 0;
  }
LABEL_35:
  v12 = v40 != 0;
LABEL_36:
  CFRelease(v3);
  return v12;
}

uint64_t sub_19B6DEF34(uint64_t a1, uint64_t a2)
{
  __CFData *v4;
  __CFData *v5;
  unsigned int *v6;
  uint64_t v7;
  const UInt8 *BytePtr;
  CFIndex Length;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  NSObject *v45;
  int v46;
  CFStringRef v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint8_t buf[4];
  CFStringRef v59;
  _OWORD v60[28];
  uint64_t v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  v4 = sub_19B6DDC20(0x74727374u);
  v5 = sub_19B6DDC20(0x7365616Cu);
  if (!v5)
  {
    v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v22)
      v28 = v22 + 1;
    else
      v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v28, 1059, (uint64_t)CFSTR("failed to copy EAN data for 'seal' - non-fatal."), v23, v24, v25, v26, v27, v55);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_25;
    *(_WORD *)buf = 0;
    v19 = MEMORY[0x1E0C81028];
    v20 = "failed to copy EAN data for 'seal' - non-fatal.";
    goto LABEL_23;
  }
  if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")) || sub_19B6E0B78(a1, v5, v4))
  {
    if (qword_1EE3FD828 != -1)
      dispatch_once(&qword_1EE3FD828, &unk_1E3BCFF18);
    v6 = (unsigned int *)qword_1EE3FD818;
    if (qword_1EE3FD818)
    {
      v7 = dword_1EE3FD820;
      memset(v60, 0, sizeof(v60));
      v61 = 0;
      BytePtr = CFDataGetBytePtr(v5);
      Length = CFDataGetLength(v5);
      v10 = sub_19B700220((uint64_t)BytePtr, Length, (uint64_t)v60);
      if (!v10)
      {
        if ((_DWORD)v7)
        {
          v45 = MEMORY[0x1E0C81028];
          do
          {
            v56 = 0;
            v57 = 0;
            sub_19B6FFAC0((uint64_t)v60, 1296125520, *v6, &v57, &v56);
            if (v46)
            {
              *(_DWORD *)buf = bswap32(*v6);
              v47 = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
              v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
              if (v48)
                v54 = v48 + 1;
              else
                v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
              _MGLog((uint64_t)v54, 1113, (uint64_t)CFSTR("Sealing manifest property '%@' did not exist in the sealing manifest"), v49, v50, v51, v52, v53, (char)v47);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138412290;
                v59 = v47;
                _os_log_impl(&dword_19B6B1000, v45, OS_LOG_TYPE_DEFAULT, "Sealing manifest property '%@' did not exist in the sealing manifest", buf, 0xCu);
              }
              if (v47)
                CFRelease(v47);
            }
            else
            {
              buf[0] = 0;
              (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint8_t *))(a2 + 16))(a2, 1936023916, *v6, v57, v56, buf);
              if (buf[0])
                goto LABEL_25;
            }
            ++v6;
            --v7;
          }
          while (v7);
        }
        goto LABEL_25;
      }
      v11 = v10;
      v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v12)
        v18 = v12 + 1;
      else
        v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v18, 1086, (uint64_t)CFSTR("Failed to initialize Img4 manifest with status: 0x%X"), v13, v14, v15, v16, v17, v11);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
LABEL_25:
        v36 = 1;
        goto LABEL_26;
      }
      *(_DWORD *)buf = 67109120;
      LODWORD(v59) = v11;
      v19 = MEMORY[0x1E0C81028];
      v20 = "Failed to initialize Img4 manifest with status: 0x%X";
      v21 = 8;
LABEL_24:
      _os_log_impl(&dword_19B6B1000, v19, OS_LOG_TYPE_DEFAULT, v20, buf, v21);
      goto LABEL_25;
    }
    v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v29)
      v35 = v29 + 1;
    else
      v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v35, 1077, (uint64_t)CFSTR("Failed to copy sealing manifest allowlist."), v30, v31, v32, v33, v34, v55);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_25;
    *(_WORD *)buf = 0;
    v19 = MEMORY[0x1E0C81028];
    v20 = "Failed to copy sealing manifest allowlist.";
LABEL_23:
    v21 = 2;
    goto LABEL_24;
  }
  v38 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v38)
    v44 = v38 + 1;
  else
    v44 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  _MGLog((uint64_t)v44, 1068, (uint64_t)CFSTR("_sealingManifestTrusted returned false"), v39, v40, v41, v42, v43, v55);
  v36 = 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "_sealingManifestTrusted returned false", buf, 2u);
    v36 = 0;
  }
LABEL_26:
  if (v4)
    CFRelease(v4);
  if (v5)
    CFRelease(v5);
  return v36;
}

const __CFData *sub_19B6DF3A4(uint64_t a1)
{
  const __CFData *result;
  const __CFData *v3;
  uint64_t v4;

  result = (const __CFData *)sub_19B6DD7E8();
  if (result)
  {
    v3 = result;
    v4 = sub_19B6E00E0(result, 1986883702, a1);
    CFRelease(v3);
    return (const __CFData *)v4;
  }
  return result;
}

uint64_t sub_19B6DF3EC(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v6;
  __CFData *v7;
  __CFData *v8;
  __CFData *v9;
  CFDataRef v10;
  const __CFData *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char v28;
  uint8_t buf[4];
  unsigned int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = *a2;
  v7 = sub_19B6DDC20(*a2);
  v8 = sub_19B6DDC20(0x74727374u);
  v9 = sub_19B6DDC20(0x7365616Cu);
  if (v7)
  {
    v10 = sub_19B6E0398((uint64_t)a2, a1, v7, v9, v8);
    if (v10)
    {
      v11 = v10;
      if (qword_1EE3FD808 != -1)
        dispatch_once(&qword_1EE3FD808, &unk_1E3BD1288);
      v12 = sub_19B6E00E0(v11, v6, a3);
      CFRelease(v11);
    }
    else
    {
      v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v20)
        v26 = v20 + 1;
      else
        v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v26, 1034, (uint64_t)CFSTR("_decodeFDRDataClass returned NULL"), v21, v22, v23, v24, v25, v28);
      v12 = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "_decodeFDRDataClass returned NULL", buf, 2u);
        v12 = 0;
      }
    }
    CFRelease(v7);
    if (v8)
LABEL_19:
      CFRelease(v8);
  }
  else
  {
    v13 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v13)
      v19 = v13 + 1;
    else
      v19 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v19, 1025, (uint64_t)CFSTR("failed to copy EAN data for key %c%c%c%c - non fatal"), v14, v15, v16, v17, v18, SBYTE3(v6));
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109888;
      v30 = BYTE3(v6);
      v31 = 1024;
      v32 = BYTE2(v6);
      v33 = 1024;
      v34 = BYTE1(v6);
      v35 = 1024;
      v36 = v6;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to copy EAN data for key %c%c%c%c - non fatal", buf, 0x1Au);
    }
    v12 = 1;
    if (v8)
      goto LABEL_19;
  }
  if (v9)
    CFRelease(v9);
  return v12;
}

void sub_19B6DF644(uint64_t a1, const void *a2, const void *a3)
{
  CFTypeID TypeID;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t buf[4];
  const void *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  TypeID = CFDataGetTypeID();
  if (TypeID == CFGetTypeID(a3) && !CFDataGetLength((CFDataRef)a3))
  {
    v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v7)
      v13 = v7 + 1;
    else
      v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v13, 386, (uint64_t)CFSTR("Removing zero length key: %@"), v8, v9, v10, v11, v12, (char)a2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v15 = a2;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Removing zero length key: %@", buf, 0xCu);
    }
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 32), a2);
  }
}

void sub_19B6DF750(CFTypeRef *a1, unsigned int a2)
{
  uint64_t v3;
  CFTypeRef *v4;
  CFTypeRef *v5;

  if (a2)
  {
    v3 = a2;
    v4 = a1 + 1;
    do
    {
      v5 = v4 - 1;
      if (*v4)
        CFRelease(*v4);
      *v5 = 0;
      *v4 = 0;
      v4 += 3;
      v5[2] = 0;
      --v3;
    }
    while (v3);
  }
  free(a1);
}

CFDataRef sub_19B6DF7A8(unsigned int a1)
{
  return sub_19B6DF7B0(a1, -1);
}

CFDataRef sub_19B6DF7B0(unsigned int a1, CFIndex a2)
{
  const __CFDictionary *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  CFStringRef v12;
  const __CFData *Value;
  const __CFData *v14;
  CFIndex Length;
  const __CFAllocator *v16;
  const UInt8 *BytePtr;
  CFDataRef v18;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  int v27;
  uint8_t buf[4];
  CFStringRef v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
  {
    v4 = (const __CFDictionary *)sub_19B6DDD80();
  }
  else
  {
    v27 = 0;
    v4 = (const __CFDictionary *)MGCopyAnswerWithError((const char **)CFSTR("9/J7LY7zuYSGW1BcSTRpOw"), 0, &v27);
    if (!v4)
    {
      v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      v11 = v5
          ? v5 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v11, 567, (uint64_t)CFSTR("Failed to copy the SysCfgDict MG key with error: %d"), v6, v7, v8, v9, v10, v27);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        LODWORD(v29) = v27;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to copy the SysCfgDict MG key with error: %d", buf, 8u);
      }
    }
  }
  if (!v4)
    return 0;
  *(_DWORD *)buf = bswap32(a1);
  v12 = CFStringCreateWithBytes(0, buf, 4, 0x8000100u, 0);
  Value = (const __CFData *)CFDictionaryGetValue(v4, v12);
  if (!Value)
  {
    v20 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v20)
      v26 = v20 + 1;
    else
      v26 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v26, 586, (uint64_t)CFSTR("Failed to find key %@"), v21, v22, v23, v24, v25, (char)v12);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v29 = v12;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to find key %@", buf, 0xCu);
    }
    v18 = 0;
    if (!v12)
      goto LABEL_17;
    goto LABEL_16;
  }
  v14 = Value;
  Length = CFDataGetLength(Value);
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (Length >= a2)
      goto LABEL_15;
    Length = CFDataGetLength(v14);
  }
  a2 = Length;
LABEL_15:
  v16 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  BytePtr = CFDataGetBytePtr(v14);
  v18 = CFDataCreate(v16, BytePtr, a2);
  if (v12)
LABEL_16:
    CFRelease(v12);
LABEL_17:
  CFRelease(v4);
  return v18;
}

uint64_t sub_19B6DFA00(unsigned int a1)
{
  const __CFData *v2;
  const __CFData *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  int v13;
  int v14;
  int v15;
  __int128 buf;
  int v18;
  __int16 v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = sub_19B6DF7B0(a1, -1);
  if (v2)
  {
    v3 = v2;
    buf = 0uLL;
    sub_19B6DFB68(v2, &buf);
    v4 = HIDWORD(buf);
    CFRelease(v3);
  }
  else
  {
    v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    v11 = HIBYTE(a1);
    if (v5)
      v12 = v5 + 1;
    else
      v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    v13 = BYTE2(a1);
    v14 = BYTE1(a1);
    v15 = a1;
    _MGLog((uint64_t)v12, 435, (uint64_t)CFSTR("no value found for key %c%c%c%c"), v6, v7, v8, v9, v10, SHIBYTE(a1));
    v4 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&buf = __PAIR64__(v11, 67109888);
      WORD4(buf) = 1024;
      *(_DWORD *)((char *)&buf + 10) = v13;
      HIWORD(buf) = 1024;
      v18 = v14;
      v19 = 1024;
      v20 = v15;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "no value found for key %c%c%c%c", (uint8_t *)&buf, 0x1Au);
      return 0;
    }
  }
  return v4;
}

uint64_t sub_19B6DFB40(const __CFData *a1)
{
  __int128 v2;

  v2 = 0uLL;
  sub_19B6DFB68(a1, &v2);
  return HIDWORD(v2);
}

void sub_19B6DFB68(const __CFData *a1, _OWORD *a2)
{
  const UInt8 *BytePtr;
  const UInt8 *v5;
  CFTypeID v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t buf[4];
  const __CFData *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    BytePtr = CFDataGetBytePtr(a1);
    if (BytePtr && (v5 = BytePtr, v6 = CFGetTypeID(a1), v6 == CFDataGetTypeID()) && CFDataGetLength(a1) == 16)
    {
      *a2 = *(_OWORD *)v5;
    }
    else
    {
      v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v7)
        v13 = v7 + 1;
      else
        v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v13, 459, (uint64_t)CFSTR("failed to get to cookSyscfgColorData %@"), v8, v9, v10, v11, v12, (char)a1);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 138412290;
        v15 = a1;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to get to cookSyscfgColorData %@", buf, 0xCu);
      }
    }
  }
}

uint64_t sub_19B6DFC84(const __CFData *a1)
{
  __int128 v2;

  v2 = 0uLL;
  sub_19B6DFB68(a1, &v2);
  if ((_DWORD)v2 == 2)
    return DWORD2(v2);
  else
    return 0xFFFFFFFFLL;
}

CFDataRef sub_19B6DFCB8(unsigned int a1)
{
  return sub_19B6DF7B0(a1, 6);
}

uint64_t sub_19B6DFCC0(int a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t result;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  _BOOL4 v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1 <= 1702060896)
  {
    if (!a1)
      return 0;
    if (a1 == 1)
      return 1;
  }
  else
  {
    switch(a1)
    {
      case 1702060897:
        v3 = a2[3];
        return v3 != 0;
      case 1717663091:
        v3 = a2[1];
        return v3 != 0;
      case 1718838113:
        v3 = a2[2];
        return v3 != 0;
    }
  }
  v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v5)
    v11 = v5 + 1;
  else
    v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  _MGLog((uint64_t)v11, 612, (uint64_t)CFSTR("%s unexpected policy criteria: (0x%X)"), v6, v7, v8, v9, v10, (char)"_Bool _policyCriteriaCheck(uint32_t, const MGAPTicket_s *)");
  v12 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v12)
  {
    *(_DWORD *)buf = 136315394;
    v14 = "_Bool _policyCriteriaCheck(uint32_t, const MGAPTicket_s *)";
    v15 = 1024;
    v16 = a1;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s unexpected policy criteria: (0x%X)", buf, 0x12u);
    return 0;
  }
  return result;
}

uint64_t sub_19B6DFE20(_OWORD *a1)
{
  __CFData *v2;
  __CFData *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  char v30;
  _WORD v31[2];
  CFTypeRef cf[2];
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  CFTypeRef v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  cf[0] = 0;
  cf[1] = 0;
  v2 = sub_19B6DDC20(0x6170746Bu);
  memset(v31, 0, 3);
  if (v2)
  {
    v3 = v2;
    if ((sub_19B6E0F8C(v2, dword_19B7189D8, 3, (BOOL *)v31, 0, (CFDataRef *)&cf[1]) & 1) != 0)
    {
      BYTE1(cf[0]) = v31[0];
      WORD1(cf[0]) = *(_WORD *)((char *)v31 + 1);
      v4 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v4)
        v10 = v4 + 1;
      else
        v10 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      if (BYTE1(cf[0]))
        v11 = "YES";
      else
        v11 = "NO";
      _MGLog((uint64_t)v10, 1378, (uint64_t)CFSTR("APTicketProperties: {\n\tfaus: %s\n\tfsca: %s\n\tesca: %s\n\ttrustObject: %@\n}"), v5, v6, v7, v8, v9, (char)v11);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        if (BYTE1(cf[0]))
          v12 = "YES";
        else
          v12 = "NO";
        if (BYTE2(cf[0]))
          v13 = "YES";
        else
          v13 = "NO";
        if (BYTE3(cf[0]))
          v14 = "YES";
        else
          v14 = "NO";
        *(_DWORD *)buf = 136315906;
        v34 = v12;
        v35 = 2080;
        v36 = v13;
        v37 = 2080;
        v38 = v14;
        v39 = 2112;
        v40 = cf[1];
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "APTicketProperties: {\n\tfaus: %s\n\tfsca: %s\n\tesca: %s\n\ttrustObject: %@\n}", buf, 0x2Au);
      }
      LOBYTE(cf[0]) = 1;
      if (cf[1])
        CFRetain(cf[1]);
      *a1 = *(_OWORD *)cf;
    }
    else
    {
      v22 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v22)
        v28 = v22 + 1;
      else
        v28 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v28, 1361, (uint64_t)CFSTR("Failed to decode 'aptk'"), v23, v24, v25, v26, v27, v30);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to decode 'aptk'", buf, 2u);
      }
    }
    CFRelease(v3);
    if (cf[1])
      CFRelease(cf[1]);
  }
  else
  {
    v15 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v15)
      v21 = v15 + 1;
    else
      v21 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v21, 1353, (uint64_t)CFSTR("Failed to copy 'aptk' from EAN"), v16, v17, v18, v19, v20, v30);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to copy 'aptk' from EAN", buf, 2u);
    }
  }
  return LOBYTE(cf[0]);
}

uint64_t sub_19B6E00E0(const __CFData *a1, uint64_t a2, uint64_t a3)
{
  CFIndex Length;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char v14;
  NSObject *v15;
  const char *v16;
  unsigned int v17;
  const UInt8 *BytePtr;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int *v22;
  unsigned int *v23;
  int v24;
  _BOOL4 v25;
  const char *v26;
  const char *v27;
  size_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t v44[16];
  uint8_t buf[8];
  uint64_t v46;
  char v47;

  Length = CFDataGetLength(a1);
  if (Length < 0x100000000)
  {
    v17 = Length;
    BytePtr = CFDataGetBytePtr(a1);
    v19 = sub_19B6FD87C((uint64_t)BytePtr, v17);
    if (v19)
    {
      v20 = (_QWORD *)v19;
      v21 = sub_19B6FEA28(v19);
      if (v21)
      {
        v22 = (unsigned int *)v21;
        v14 = 1;
        do
        {
          v47 = 0;
          *(_QWORD *)buf = 0;
          v46 = 0;
          v23 = sub_19B6FE2BC(v22);
          v24 = sub_19B6FE2E8((uint64_t)v22, (uint64_t)buf);
          v25 = sub_19B6FE2C8((_BOOL8)v22);
          v26 = (const char *)sub_19B6FE2DC((uint64_t)v22);
          if (v24)
          {
            (*(void (**)(uint64_t, uint64_t, unsigned int *, _QWORD, _QWORD, char *))(a3 + 16))(a3, a2, v23, *(_QWORD *)buf, v46, &v47);
          }
          else
          {
            v27 = v26;
            if (v26)
            {
              v28 = strlen(v26);
              (*(void (**)(uint64_t, uint64_t, unsigned int *, const char *, size_t, char *))(a3 + 16))(a3, a2, v23, v27, v28, &v47);
            }
            else if (v25)
            {
              (*(void (**)(uint64_t, uint64_t, unsigned int *, _QWORD, _QWORD, char *))(a3 + 16))(a3, a2, v23, 0, 0, &v47);
            }
            else
            {
              v29 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
              if (v29)
                v35 = v29 + 1;
              else
                v35 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
              _MGLog((uint64_t)v35, 941, (uint64_t)CFSTR("Unexpected libSysConfig3 payload state"), v30, v31, v32, v33, v34, v44[0]);
              v14 = 0;
              if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)v44 = 0;
                _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unexpected libSysConfig3 payload state", v44, 2u);
                v14 = 0;
              }
            }
          }
          if (v47)
            break;
          v22 = (unsigned int *)sub_19B6FE350((uint64_t)v22);
        }
        while (v22);
      }
      else
      {
        v14 = 1;
      }
      sub_19B6FE9A4(v20);
    }
    else
    {
      v36 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v36)
        v42 = v36 + 1;
      else
        v42 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v42, 909, (uint64_t)CFSTR("decodeSysConfig3 returned NULL"), v37, v38, v39, v40, v41, v44[0]);
      v14 = 0;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v15 = MEMORY[0x1E0C81028];
        v16 = "decodeSysConfig3 returned NULL";
        goto LABEL_29;
      }
    }
  }
  else
  {
    v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v7)
      v13 = v7 + 1;
    else
      v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v13, 896, (uint64_t)CFSTR("SysConfig data greater than UINT32_MAX"), v8, v9, v10, v11, v12, v44[0]);
    v14 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      v15 = MEMORY[0x1E0C81028];
      v16 = "SysConfig data greater than UINT32_MAX";
LABEL_29:
      _os_log_impl(&dword_19B6B1000, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 2u);
      v14 = 0;
    }
  }
  return v14 & 1;
}

CFDataRef sub_19B6E0398(uint64_t a1, uint64_t a2, const __CFData *a3, const __CFData *a4, const __CFData *a5)
{
  const __CFString *v10;
  const __CFString *v11;
  const __CFString *v12;
  const __CFData *v13;
  uint64_t v14;
  const __CFAllocator *v15;
  const __CFData *ExternalRepresentation;
  const __CFData *v17;
  const __CFData *v18;
  int v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  CFDataRef v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  const __CFAllocator *allocator;
  uint64_t v57;
  CFTypeRef cf;
  _DWORD length[3];
  UInt8 bytes[4];
  const char *v61;
  __int16 v62;
  uint64_t (*v63)(_QWORD, _QWORD);
  __int16 v64;
  const __CFString *v65;
  const UInt8 *BytePtr;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  if (qword_1EE3FD7E0 != -1)
    dispatch_once(&qword_1EE3FD7E0, &unk_1E3BD12C8);
  if (off_1EE3FD7D8)
  {
    memset(length, 0, sizeof(length));
    cf = 0;
    *(_DWORD *)bytes = bswap32(*(_DWORD *)a1);
    v10 = CFStringCreateWithBytes(0, bytes, 4, 0x8000100u, 0);
    if (qword_1EE3FD7E0 != -1)
      dispatch_once(&qword_1EE3FD7E0, &unk_1E3BD12C8);
    v11 = (const __CFString *)off_1EE3FD7D8(CFSTR("seal"), &cf);
    if (qword_1EE3FD7E0 != -1)
      dispatch_once(&qword_1EE3FD7E0, &unk_1E3BD12C8);
    v12 = (const __CFString *)off_1EE3FD7D8(v10, &cf);
    v13 = *(const __CFData **)(a2 + 8);
    if (MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")) || *(_BYTE *)(a1 + 17))
      v14 = 14;
    else
      v14 = 0;
    if (*(_BYTE *)(a1 + 16))
    {
      v57 = v14;
      if (!v11)
        v11 = (const __CFString *)CFRetain(CFSTR("UNKNOWN"));
      if (!v12)
        v12 = (const __CFString *)CFRetain(CFSTR("UNKNOWN"));
      v15 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v10, 0x8000100u, 0x20u);
      v17 = CFStringCreateExternalRepresentation(v15, v11, 0x8000100u, 0x20u);
      allocator = v15;
      v18 = CFStringCreateExternalRepresentation(v15, v12, 0x8000100u, 0x20u);
      if (qword_1EE3FD800 != -1)
        dispatch_once(&qword_1EE3FD800, &unk_1E3BD1348);
      v83 = 0u;
      v84 = 0;
      v82 = 0u;
      v81 = 0u;
      v80 = 0u;
      v79 = 0u;
      v78 = 0u;
      v77 = 0u;
      v76 = 0u;
      v75 = 0u;
      v74 = 0u;
      v73 = 0u;
      v72 = 0u;
      v71 = 0u;
      v69 = 0u;
      v70 = 0u;
      v67 = 0u;
      v68 = 0u;
      BytePtr = CFDataGetBytePtr(a3);
      LODWORD(v67) = CFDataGetLength(a3);
      if (a5)
      {
        *((_QWORD *)&v67 + 1) = CFDataGetBytePtr(a5);
        v19 = CFDataGetLength(a5);
      }
      else
      {
        v19 = 0;
        *((_QWORD *)&v67 + 1) = 0;
      }
      LODWORD(v68) = v19;
      if (a4)
      {
        *((_QWORD *)&v68 + 1) = CFDataGetBytePtr(a4);
        v35 = CFDataGetLength(a4);
      }
      else
      {
        v35 = 0;
        *((_QWORD *)&v68 + 1) = 0;
      }
      LODWORD(v69) = v35;
      if (v13)
      {
        *((_QWORD *)&v69 + 1) = CFDataGetBytePtr(v13);
        v36 = CFDataGetLength(v13);
      }
      else
      {
        v36 = 0;
        *((_QWORD *)&v69 + 1) = 0;
      }
      LODWORD(v70) = v36;
      if (ExternalRepresentation)
      {
        *((_QWORD *)&v70 + 1) = CFDataGetBytePtr(ExternalRepresentation);
        v37 = CFDataGetLength(ExternalRepresentation);
      }
      else
      {
        v37 = 0;
        *((_QWORD *)&v70 + 1) = 0;
      }
      LODWORD(v71) = v37;
      if (v18)
      {
        *((_QWORD *)&v71 + 1) = CFDataGetBytePtr(v18);
        v38 = CFStringGetLength(v12);
      }
      else
      {
        v38 = 0;
        *((_QWORD *)&v71 + 1) = 0;
      }
      LODWORD(v72) = v38;
      if (v17)
      {
        *((_QWORD *)&v72 + 1) = CFDataGetBytePtr(v17);
        v39 = CFDataGetLength(v17);
      }
      else
      {
        v39 = 0;
        *((_QWORD *)&v72 + 1) = 0;
      }
      LODWORD(v73) = v39;
      *((_QWORD *)&v73 + 1) = 0;
      LODWORD(v74) = 0;
      *((_QWORD *)&v74 + 1) = 0;
      LODWORD(v75) = 0;
      *((_QWORD *)&v75 + 1) = v57;
      *((_QWORD *)&v80 + 1) = 0;
      LODWORD(v81) = 0;
      *((_QWORD *)&v81 + 1) = 0;
      LODWORD(v82) = 0;
      *((_QWORD *)&v82 + 1) = 0;
      LODWORD(v83) = 0;
      *((_QWORD *)&v83 + 1) = 0;
      LODWORD(v84) = 0;
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      LODWORD(v80) = 0;
      v40 = sub_19B6FB6F4((uint64_t *)&BytePtr, &length[1], length);
      v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v41)
        v47 = v41 + 1;
      else
        v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v47, 1483, (uint64_t)CFSTR("%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'"), v42, v43, v44, v45, v46, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)bytes = 136315650;
        v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
        v62 = 2048;
        v63 = (uint64_t (*)(_QWORD, _QWORD))v40;
        v64 = 2112;
        v65 = v10;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'", bytes, 0x20u);
      }
      v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v48)
        v54 = v48 + 1;
      else
        v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      if (v40)
      {
        _MGLog((uint64_t)v54, 1490, (uint64_t)CFSTR("%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'. Critical error, skipping data class."), v49, v50, v51, v52, v53, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)bytes = 136315650;
          v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
          v62 = 2048;
          v63 = (uint64_t (*)(_QWORD, _QWORD))v40;
          v64 = 2112;
          v65 = v10;
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "%s AMFDRDecodeTrustEvaluation status 0x%llX for dataClass '%@'. Critical error, skipping data class.", bytes, 0x20u);
        }
        v27 = 0;
      }
      else
      {
        _MGLog((uint64_t)v54, 1497, (uint64_t)CFSTR("%s attempting to create CFData with %p and length: %d"), v49, v50, v51, v52, v53, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)bytes = 136315650;
          v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
          v62 = 2048;
          v63 = *(uint64_t (**)(_QWORD, _QWORD))&length[1];
          v64 = 1024;
          LODWORD(v65) = length[0];
          _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO, "%s attempting to create CFData with %p and length: %d", bytes, 0x1Cu);
        }
        v27 = 0;
        if (*(_QWORD *)&length[1] && length[0])
          v27 = CFDataCreate(allocator, *(const UInt8 **)&length[1], length[0]);
      }
    }
    else
    {
      v28 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v28)
        v34 = v28 + 1;
      else
        v34 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v34, 1436, (uint64_t)CFSTR("%s dataClass '%@' is not allowed to load."), v29, v30, v31, v32, v33, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)bytes = 136315394;
        v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
        v62 = 2112;
        v63 = (uint64_t (*)(_QWORD, _QWORD))v10;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s dataClass '%@' is not allowed to load.", bytes, 0x16u);
      }
      v27 = 0;
      ExternalRepresentation = 0;
      v17 = 0;
      v18 = 0;
    }
    if (v10)
      CFRelease(v10);
    if (v11)
      CFRelease(v11);
    if (v12)
      CFRelease(v12);
    if (ExternalRepresentation)
      CFRelease(ExternalRepresentation);
    if (v18)
      CFRelease(v18);
    if (v17)
      CFRelease(v17);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v20 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    v21 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v21)
      v20 = v21 + 1;
    if (qword_1EE3FD7E0 != -1)
      dispatch_once(&qword_1EE3FD7E0, &unk_1E3BD12C8);
    _MGLog((uint64_t)v20, 1402, (uint64_t)CFSTR("%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p"), v22, v23, v24, v25, v26, (char)"CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)");
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1EE3FD7E0 != -1)
        dispatch_once(&qword_1EE3FD7E0, &unk_1E3BD12C8);
      *(_DWORD *)bytes = 136315394;
      v61 = "CFDataRef _decodeFDRDataClass(const MGSysConfigPolicy_s *, const MGAPTicket_s *, CFDataRef, CFDataRef, CFDataRef)";
      v62 = 2048;
      v63 = off_1EE3FD7D8;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p", bytes, 0x16u);
    }
    return 0;
  }
  return v27;
}

BOOL sub_19B6E0B78(uint64_t a1, const __CFData *a2, const __CFData *a3)
{
  const __CFString *v6;
  const __CFData *v7;
  const __CFString *v8;
  const __CFData *ExternalRepresentation;
  int Length;
  const char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  CFTypeRef cf;
  int v32;
  uint64_t v33;
  uint8_t v34[4];
  uint64_t v35;
  _BYTE buf[24];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  if (qword_1EE3FD7E0 != -1)
    dispatch_once(&qword_1EE3FD7E0, &unk_1E3BD12C8);
  if (off_1EE3FD7D8)
  {
    v33 = 0;
    v32 = 0;
    cf = 0;
    v6 = (const __CFString *)off_1EE3FD7D8(CFSTR("seal"), &cf);
    v7 = *(const __CFData **)(a1 + 8);
    if (!v6)
      v6 = (const __CFString *)CFRetain(CFSTR("UNKNOWN"));
    v8 = v6;
    ExternalRepresentation = CFStringCreateExternalRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6, 0x8000100u, 0x20u);
    if (qword_1EE3FD800 != -1)
      dispatch_once(&qword_1EE3FD800, &unk_1E3BD1348);
    v52 = 0u;
    v53 = 0;
    v51 = 0u;
    v50 = 0u;
    v49 = 0u;
    v48 = 0u;
    v47 = 0u;
    v46 = 0u;
    v45 = 0u;
    v44 = 0u;
    v43 = 0u;
    v42 = 0u;
    v41 = 0u;
    v40 = 0u;
    v39 = 0u;
    v38 = 0u;
    v37 = 0u;
    *(_OWORD *)&buf[8] = 0u;
    *(_QWORD *)buf = CFDataGetBytePtr(a2);
    *(_DWORD *)&buf[8] = CFDataGetLength(a2);
    if (a3)
    {
      *(_QWORD *)&buf[16] = CFDataGetBytePtr(a3);
      Length = CFDataGetLength(a3);
    }
    else
    {
      Length = 0;
      *(_QWORD *)&buf[16] = 0;
    }
    LODWORD(v37) = Length;
    if (v7)
    {
      *((_QWORD *)&v38 + 1) = CFDataGetBytePtr(v7);
      v19 = CFDataGetLength(v7);
    }
    else
    {
      v19 = 0;
      *((_QWORD *)&v38 + 1) = 0;
    }
    LODWORD(v39) = v19;
    if (ExternalRepresentation)
    {
      *((_QWORD *)&v41 + 1) = CFDataGetBytePtr(ExternalRepresentation);
      v20 = CFDataGetLength(ExternalRepresentation);
    }
    else
    {
      v20 = 0;
      *((_QWORD *)&v41 + 1) = 0;
    }
    LODWORD(v42) = v20;
    *((_QWORD *)&v44 + 1) = 128;
    v21 = sub_19B6FB6F4((uint64_t *)buf, &v33, &v32);
    v18 = v21 == 0;
    if (v21)
    {
      v22 = v21;
      v23 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      v29 = v23
          ? v23 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v29, 1774, (uint64_t)CFSTR("Manifest trust evaluation failed with status 0x%llX"), v24, v25, v26, v27, v28, v22);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v34 = 134217984;
        v35 = v22;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Manifest trust evaluation failed with status 0x%llX", v34, 0xCu);
      }
    }
    if (v8)
      CFRelease(v8);
    if (ExternalRepresentation)
      CFRelease(ExternalRepresentation);
    if (cf)
      CFRelease(cf);
  }
  else
  {
    v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v12)
      v11 = v12 + 1;
    if (qword_1EE3FD7E0 != -1)
      dispatch_once(&qword_1EE3FD7E0, &unk_1E3BD12C8);
    _MGLog((uint64_t)v11, 1728, (uint64_t)CFSTR("%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p"), v13, v14, v15, v16, v17, (char)"_Bool _sealingManifestTrusted(const MGAPTicket_s *, CFDataRef, CFDataRef)");
    v18 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1EE3FD7E0 != -1)
        dispatch_once(&qword_1EE3FD7E0, &unk_1E3BD12C8);
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = "_Bool _sealingManifestTrusted(const MGAPTicket_s *, CFDataRef, CFDataRef)";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = off_1EE3FD7D8;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s Unable to find required libFDR symbols. _AMFDRSealingMapCopyInstanceForClass_fn %p", buf, 0x16u);
      return 0;
    }
  }
  return v18;
}

BOOL sub_19B6E0F44()
{
  CFTypeRef v0;
  CFTypeRef v1;

  v0 = sub_19B6BC3DC("IODeviceTree:/defaults", CFSTR("ean-storage-present"), 0);
  v1 = v0;
  if (v0)
    CFRelease(v0);
  return v1 != 0;
}

uint64_t sub_19B6E0F8C(const __CFData *a1, unsigned int *a2, uint64_t a3, BOOL *a4, BOOL *a5, CFDataRef *a6)
{
  const __CFData *v11;
  const __CFData *v12;
  const __CFData *v13;
  const __CFAllocator *v14;
  const UInt8 *BytePtr;
  const char *v16;
  size_t Length;
  size_t v18;
  const __CFString *v19;
  const UInt8 *v20;
  CFIndex v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  NSObject *v32;
  const char *v33;
  uint32_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  BOOL *v64;
  unsigned int v65;
  int v66;
  int v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  char v76;
  CFIndex v78;
  const UInt8 *v79;
  uint8_t buf[4];
  _BYTE v81[10];
  _OWORD v82[28];
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v11 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen/secure-boot-hashes", CFSTR("sfr-manifest-hash"), 0);
  v12 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("crypto-hash-method"), 0);
  v13 = v12;
  if (v12)
  {
    v14 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    BytePtr = CFDataGetBytePtr(v12);
    v16 = (const char *)CFDataGetBytePtr(v13);
    Length = CFDataGetLength(v13);
    v18 = strnlen(v16, Length);
    v19 = CFStringCreateWithBytes(v14, BytePtr, v18, 0x8000100u, 0);
    if (v11)
      goto LABEL_6;
  }
  else
  {
    v19 = 0;
    if (v11)
      goto LABEL_6;
  }
  v11 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("boot-manifest-hash"), 0);
  if (v11)
  {
LABEL_6:
    if (v13)
    {
      if (v19)
      {
        if ((sub_19B6E14E8(a1, v11, v19) & 1) == 0)
        {
          v49 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v49)
            v55 = v49 + 1;
          else
            v55 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          _MGLog((uint64_t)v55, 1291, (uint64_t)CFSTR("%s APTicket verification failed!"), v50, v51, v52, v53, v54, (char)"_Bool _decodeAPTicket(CFDataRef, uint32_t *, size_t, _Bool *, _Bool *, CFDataRef *)");
          v31 = 0;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            goto LABEL_34;
          *(_DWORD *)buf = 136315138;
          *(_QWORD *)v81 = "_Bool _decodeAPTicket(CFDataRef, uint32_t *, size_t, _Bool *, _Bool *, CFDataRef *)";
          v32 = MEMORY[0x1E0C81028];
          v33 = "%s APTicket verification failed!";
          v34 = 12;
          goto LABEL_32;
        }
        v83 = 0;
        memset(v82, 0, sizeof(v82));
        v20 = CFDataGetBytePtr(a1);
        v21 = CFDataGetLength(a1);
        v22 = sub_19B700220((uint64_t)v20, v21, (uint64_t)v82);
        if (v22)
        {
          v23 = v22;
          v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v24)
            v30 = v24 + 1;
          else
            v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          _MGLog((uint64_t)v30, 1301, (uint64_t)CFSTR("Img4DecodeInitManifest failed with code %d (0x%X)"), v25, v26, v27, v28, v29, v23);
          v31 = 0;
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            goto LABEL_34;
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v81 = v23;
          *(_WORD *)&v81[4] = 1024;
          *(_DWORD *)&v81[6] = v23;
          v32 = MEMORY[0x1E0C81028];
          v33 = "Img4DecodeInitManifest failed with code %d (0x%X)";
LABEL_15:
          v34 = 14;
LABEL_32:
          _os_log_impl(&dword_19B6B1000, v32, OS_LOG_TYPE_DEFAULT, v33, buf, v34);
LABEL_33:
          v31 = 0;
LABEL_34:
          CFRelease(v11);
          goto LABEL_35;
        }
        if (a3)
        {
          v64 = a5;
          do
          {
            v65 = *a2++;
            v66 = sub_19B6FF9A4((uint64_t)v82, 0, v65, a4);
            if (a5)
              *v64 = v66 == 0;
            ++v64;
            ++a4;
            --a3;
          }
          while (a3);
        }
        if (a6)
        {
          v78 = 0;
          v79 = 0;
          sub_19B6FFAC0((uint64_t)v82, 1718903152, 1145525076, &v79, &v78);
          if (v67)
          {
            v68 = v67;
            v69 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
            if (v69)
              v75 = v69 + 1;
            else
              v75 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            _MGLog((uint64_t)v75, 1322, (uint64_t)CFSTR("Img4DecodeInitManifest failed get trust object digest with code %d (0x%X)"), v70, v71, v72, v73, v74, v68);
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              goto LABEL_33;
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v81 = v68;
            *(_WORD *)&v81[4] = 1024;
            *(_DWORD *)&v81[6] = v68;
            v32 = MEMORY[0x1E0C81028];
            v33 = "Img4DecodeInitManifest failed get trust object digest with code %d (0x%X)";
            goto LABEL_15;
          }
          *a6 = CFDataCreate(0, v79, v78);
        }
        v31 = 1;
        goto LABEL_34;
      }
      v42 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v42)
        v48 = v42 + 1;
      else
        v48 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v48, 1283, (uint64_t)CFSTR("Unable to copy the cryptoHashMethodStr"), v43, v44, v45, v46, v47, v76);
      v31 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      *(_WORD *)buf = 0;
      v32 = MEMORY[0x1E0C81028];
      v33 = "Unable to copy the cryptoHashMethodStr";
    }
    else
    {
      v35 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v35)
        v41 = v35 + 1;
      else
        v41 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v41, 1277, (uint64_t)CFSTR("Unable to copy the cryptoHashMethod"), v36, v37, v38, v39, v40, v76);
      v31 = 0;
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      *(_WORD *)buf = 0;
      v32 = MEMORY[0x1E0C81028];
      v33 = "Unable to copy the cryptoHashMethod";
    }
    v34 = 2;
    goto LABEL_32;
  }
  v57 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v57)
    v63 = v57 + 1;
  else
    v63 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  _MGLog((uint64_t)v63, 1271, (uint64_t)CFSTR("Unable to copy the bootManifestHash"), v58, v59, v60, v61, v62, v76);
  v31 = 0;
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to copy the bootManifestHash", buf, 2u);
    v31 = 0;
  }
LABEL_35:
  if (v13)
    CFRelease(v13);
  if (v19)
    CFRelease(v19);
  return v31;
}

uint64_t sub_19B6E14E8(const __CFData *a1, const __CFData *a2, CFStringRef theString1)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  _BOOL4 v13;
  uint64_t result;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  uint32_t v18;
  char *BytePtr;
  size_t Length;
  int v21;
  unsigned int v22;
  uint64_t (**v23)();
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  _BOOL4 v31;
  char *v32;
  size_t v33;
  const UInt8 *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  BOOL v42;
  const UInt8 *v43;
  CFIndex v44;
  int v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  const char *v53;
  _BOOL4 v54;
  const char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL4 v62;
  int v63;
  int v64;
  int v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  _BOOL4 v73;
  char v74;
  _BYTE __s1[48];
  int v76;
  const char *v77;
  __int16 v78;
  int v79;
  _QWORD v80[2];
  uint8_t buf[32];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (CFStringCompare(theString1, CFSTR("sha1"), 0) == kCFCompareEqualTo)
  {
    BytePtr = (char *)CFDataGetBytePtr(a1);
    Length = CFDataGetLength(a1);
    v21 = sub_19B7015DC(BytePtr, Length, (uint64_t)__s1);
    v22 = 20;
    v23 = off_1E3BD0410;
    if (!v21)
    {
LABEL_15:
      if (v22 == CFDataGetLength(a2))
      {
        v34 = CFDataGetBytePtr(a2);
        if (memcmp(__s1, v34, v22))
        {
          v35 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v35)
            v41 = v35 + 1;
          else
            v41 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          _MGLog((uint64_t)v41, 1691, (uint64_t)CFSTR("The APTicket and boot manifest digest do not match!"), v36, v37, v38, v39, v40, v74);
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "The APTicket and boot manifest digest do not match!", buf, 2u);
          }
          if (!MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ")))
          {
            v42 = sub_19B6BACAC("IODeviceTree:/chosen", CFSTR("mix-n-match-prevention-status"), 0);
            result = 0;
            if (v42)
              return result;
          }
          v108 = 0;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          v92 = 0u;
          v93 = 0u;
          v90 = 0u;
          v91 = 0u;
          v88 = 0u;
          v89 = 0u;
          v86 = 0u;
          v87 = 0u;
          v84 = 0u;
          v85 = 0u;
          v82 = 0u;
          v83 = 0u;
          memset(buf, 0, sizeof(buf));
          v80[0] = MGGetSInt64Answer((const char **)CFSTR("566JrJVMlDfnslGpwUzNlQ"), 0);
          v80[1] = MGGetSInt64Answer((const char **)CFSTR("TF31PAB6aO8KAbPyNKSxKA"), 0);
          v43 = CFDataGetBytePtr(a1);
          v44 = CFDataGetLength(a1);
          v45 = sub_19B700220((uint64_t)v43, v44, (uint64_t)buf);
          if (v45)
          {
            v46 = v45;
            v47 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
            if (v47)
              v53 = v47 + 1;
            else
              v53 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            _MGLog((uint64_t)v53, 1629, (uint64_t)CFSTR("%s failed Img4DecodeInitManifest with error %d"), v48, v49, v50, v51, v52, (char)"_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)");
            v54 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
            result = 0;
            if (!v54)
              return result;
            v76 = 136315394;
            v77 = "_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)";
            v78 = 1024;
            v79 = v46;
            v15 = MEMORY[0x1E0C81028];
            v16 = "%s failed Img4DecodeInitManifest with error %d";
            goto LABEL_43;
          }
          sub_19B700370(0x72667461u, (uint64_t)buf, (uint64_t)sub_19B6E260C, (uint64_t)v23, (uint64_t)v80);
          if (v64)
          {
            v65 = v64;
            v66 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
            if (v66)
              v72 = v66 + 1;
            else
              v72 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            _MGLog((uint64_t)v72, 1637, (uint64_t)CFSTR("%s failed Img4DecodePerformTrustEvaluation with error %d"), v67, v68, v69, v70, v71, (char)"_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)");
            v73 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
            result = 0;
            if (!v73)
              return result;
            v76 = 136315394;
            v77 = "_Bool _verifyAPTicketIsAppleSigned(CFDataRef, const Img4DecodeImplementation *)";
            v78 = 1024;
            v79 = v65;
            v15 = MEMORY[0x1E0C81028];
            v16 = "%s failed Img4DecodePerformTrustEvaluation with error %d";
LABEL_43:
            v17 = (uint8_t *)&v76;
            v18 = 18;
            goto LABEL_35;
          }
        }
        return 1;
      }
      v55 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      v56 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v56)
        v55 = v56 + 1;
      CFDataGetLength(a2);
      _MGLog((uint64_t)v55, 1678, (uint64_t)CFSTR("The APTicket boot manifest digest lengths did not match %d != %d"), v57, v58, v59, v60, v61, v22);
      v62 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
      result = 0;
      if (!v62)
        return result;
      v63 = CFDataGetLength(a2);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v22;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v63;
      v15 = MEMORY[0x1E0C81028];
      v16 = "The APTicket boot manifest digest lengths did not match %d != %d";
LABEL_34:
      v17 = buf;
      v18 = 14;
      goto LABEL_35;
    }
LABEL_9:
    v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v24)
      v30 = v24 + 1;
    else
      v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v30, 1672, (uint64_t)CFSTR("Failed to digest APTicket with error %d (0x%X)"), v25, v26, v27, v28, v29, v21);
    v31 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
    result = 0;
    if (!v31)
      return result;
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v21;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v21;
    v15 = MEMORY[0x1E0C81028];
    v16 = "Failed to digest APTicket with error %d (0x%X)";
    goto LABEL_34;
  }
  if (CFStringCompare(theString1, CFSTR("sha2-384"), 0) == kCFCompareEqualTo)
  {
    v32 = (char *)CFDataGetBytePtr(a1);
    v33 = CFDataGetLength(a1);
    v21 = sub_19B701678(v32, v33, (uint64_t)__s1);
    v22 = 48;
    v23 = off_1E3BD0448;
    if (!v21)
      goto LABEL_15;
    goto LABEL_9;
  }
  v6 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v6)
    v12 = v6 + 1;
  else
    v12 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  _MGLog((uint64_t)v12, 1665, (uint64_t)CFSTR("Crypto hash method is '%@'. Current support is for hash methods '%@' and '%@'"), v7, v8, v9, v10, v11, (char)theString1);
  v13 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v13)
  {
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = theString1;
    *(_WORD *)&buf[12] = 2112;
    *(_QWORD *)&buf[14] = CFSTR("sha1");
    *(_WORD *)&buf[22] = 2112;
    *(_QWORD *)&buf[24] = CFSTR("sha2-384");
    v15 = MEMORY[0x1E0C81028];
    v16 = "Crypto hash method is '%@'. Current support is for hash methods '%@' and '%@'";
    v17 = buf;
    v18 = 32;
LABEL_35:
    _os_log_impl(&dword_19B6B1000, v15, OS_LOG_TYPE_DEFAULT, v16, v17, v18);
    return 0;
  }
  return result;
}

void sub_19B6E1A64()
{
  const __CFData *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  NSObject *v8;
  const char *v9;
  uint32_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  char v18;
  uint8_t buf[4];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFData *)sub_19B6BC3DC("IODeviceTree:/chosen", CFSTR("syscfg-seal-keys-allowed"), 0);
  qword_1EE3FD830 = (uint64_t)v0;
  if (v0)
  {
    if (CFDataGetLength(v0) <= 0)
    {
      v11 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v11)
        v17 = v11 + 1;
      else
        v17 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v17, 1530, (uint64_t)CFSTR("syscfg-seal-keys-allowed was zero length"), v12, v13, v14, v15, v16, v18);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        v8 = MEMORY[0x1E0C81028];
        v9 = "syscfg-seal-keys-allowed was zero length";
        v10 = 2;
        goto LABEL_14;
      }
    }
    else if ((CFDataGetLength((CFDataRef)qword_1EE3FD830) & 3) != 0)
    {
      v1 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v1)
        v7 = v1 + 1;
      else
        v7 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v7, 1536, (uint64_t)CFSTR("syscfg-seal-keys-allowed was not a multiple of %d"), v2, v3, v4, v5, v6, 4);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        v20 = 4;
        v8 = MEMORY[0x1E0C81028];
        v9 = "syscfg-seal-keys-allowed was not a multiple of %d";
        v10 = 8;
LABEL_14:
        _os_log_impl(&dword_19B6B1000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, v10);
      }
    }
    else
    {
      qword_1EE3FD818 = (uint64_t)CFDataGetBytePtr((CFDataRef)qword_1EE3FD830);
      dword_1EE3FD820 = (unint64_t)CFDataGetLength((CFDataRef)qword_1EE3FD830) >> 2;
    }
  }
}

BOOL sub_19B6E1C04(const __CFString *a1, BOOL *a2)
{
  uint64_t (*v4)(uint64_t, UInt8 *, uint64_t);
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint32_t v16;
  const __CFAllocator *v17;
  size_t v18;
  CFURLRef v19;
  CFURLRef v20;
  int v21;
  __CFData *v22;
  _BOOL8 v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  char v77;
  unsigned int v78;
  char buffer[4];
  char v80;
  BOOL v81;
  __CFData *v82;
  UInt8 __s[1024];
  __int128 buf;
  uint64_t v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v81 = 0;
  v80 = 0;
  *(_DWORD *)buffer = 0;
  if (!a1)
  {
    v25 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v25)
      v31 = v25 + 1;
    else
      v31 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v31, 1827, (uint64_t)CFSTR("entitlement is NULL"), v26, v27, v28, v29, v30, v77);
    v23 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v23;
    *(_WORD *)__s = 0;
    v32 = MEMORY[0x1E0C81028];
    v33 = "entitlement is NULL";
LABEL_60:
    _os_log_impl(&dword_19B6B1000, v32, OS_LOG_TYPE_DEFAULT, v33, __s, 2u);
    return 0;
  }
  if (CFStringGetLength(a1) != 4)
  {
    v34 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v34)
      v40 = v34 + 1;
    else
      v40 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v40, 1828, (uint64_t)CFSTR("invalid entitlement length"), v35, v36, v37, v38, v39, v77);
    v23 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v23;
    *(_WORD *)__s = 0;
    v32 = MEMORY[0x1E0C81028];
    v33 = "invalid entitlement length";
    goto LABEL_60;
  }
  if (!CFStringGetCString(a1, buffer, 5, 0x8000100u))
  {
    v41 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v41)
      v47 = v41 + 1;
    else
      v47 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v47, 1829, (uint64_t)CFSTR("failed to get entitlement string"), v42, v43, v44, v45, v46, v77);
    v23 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v23;
    *(_WORD *)__s = 0;
    v32 = MEMORY[0x1E0C81028];
    v33 = "failed to get entitlement string";
    goto LABEL_60;
  }
  v78 = bswap32(*(unsigned int *)buffer);
  v82 = 0;
  bzero(__s, 0x400uLL);
  if (!qword_1EE3FD7D0)
  {
    buf = xmmword_1E3BD1368;
    v85 = 0;
    qword_1EE3FD7D0 = _sl_dlopen();
  }
  if (qword_1EE3FD7D0 && sub_19B6E2960())
  {
    v4 = (uint64_t (*)(uint64_t, UInt8 *, uint64_t))sub_19B6E2960();
    if (!v4)
      sub_19B70F2EC();
    v5 = v4(2, __s, 1024);
    if (v5)
    {
      v6 = v5;
      v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v7)
        v13 = v7 + 1;
      else
        v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v13, 1796, (uint64_t)CFSTR("failed to locate AP ticket: %ld"), v8, v9, v10, v11, v12, v6);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 134217984;
        *(_QWORD *)((char *)&buf + 4) = v6;
        v14 = MEMORY[0x1E0C81028];
        v15 = "failed to locate AP ticket: %ld";
        v16 = 12;
LABEL_44:
        _os_log_impl(&dword_19B6B1000, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&buf, v16);
        goto LABEL_19;
      }
      goto LABEL_19;
    }
  }
  else
  {
    __strlcpy_chk();
  }
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = strlen((const char *)__s);
  v19 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], __s, v18, 0);
  if (v19)
  {
    v20 = v19;
    v21 = sub_19B701A50(v17, (CFTypeRef *)&v82, v19);
    if (v21)
    {
      v55 = v21;
      v56 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      v62 = v56
          ? v56 + 1
          : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v62, 1805, (uint64_t)CFSTR("failed to read AP ticket: %d"), v57, v58, v59, v60, v61, v55);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 67109120;
        DWORD1(buf) = v55;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to read AP ticket: %d", (uint8_t *)&buf, 8u);
      }
    }
    CFRelease(v20);
    v22 = v82;
    if (v82)
      goto LABEL_20;
  }
  else
  {
    v48 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v48)
      v54 = v48 + 1;
    else
      v54 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v54, 1802, (uint64_t)CFSTR("failed to create path URL"), v49, v50, v51, v52, v53, v77);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      v14 = MEMORY[0x1E0C81028];
      v15 = "failed to create path URL";
      v16 = 2;
      goto LABEL_44;
    }
  }
LABEL_19:
  v22 = sub_19B6DDC20(0x6170746Bu);
  if (!v22)
  {
    v70 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v70)
      v76 = v70 + 1;
    else
      v76 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v76, 1841, (uint64_t)CFSTR("failed to obtain APTicket"), v71, v72, v73, v74, v75, v77);
    v23 = 0;
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      return v23;
    *(_WORD *)__s = 0;
    v32 = MEMORY[0x1E0C81028];
    v33 = "failed to obtain APTicket";
    goto LABEL_60;
  }
LABEL_20:
  if ((sub_19B6E0F8C(v22, &v78, 1, &v81, a2, 0) & 1) != 0)
  {
    v23 = v81;
  }
  else
  {
    v63 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v63)
      v69 = v63 + 1;
    else
      v69 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v69, 1845, (uint64_t)CFSTR("failed to decode APTicket"), v64, v65, v66, v67, v68, v77);
    v23 = 0;
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__s = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "failed to decode APTicket", __s, 2u);
      v23 = 0;
    }
  }
  CFRelease(v22);
  return v23;
}

uint64_t sub_19B6E2170()
{
  return sub_19B6FD6B8((uint64_t)sub_19B6E217C);
}

void sub_19B6E217C(int a1, char *__format, ...)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint8_t buf[4];
  char *v34;
  char __str[255];
  uint64_t v36;
  va_list va;

  va_start(va, __format);
  v36 = *MEMORY[0x1E0C80C00];
  vsnprintf(__str, 0xFFuLL, __format, va);
  if (a1 == 1)
  {
    v17 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v17)
      v23 = v17 + 1;
    else
      v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v23, 508, (uint64_t)CFSTR("%s"), v18, v19, v20, v21, v22, (char)__str);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136315138;
      v34 = __str;
      v24 = MEMORY[0x1E0C81028];
      v25 = OS_LOG_TYPE_INFO;
LABEL_18:
      _os_log_impl(&dword_19B6B1000, v24, v25, "%s", buf, 0xCu);
    }
  }
  else
  {
    if (!a1)
    {
      v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v3)
        v9 = v3 + 1;
      else
        v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v9, 504, (uint64_t)CFSTR("%s"), v4, v5, v6, v7, v8, (char)__str);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
        sub_19B70F30C((uint64_t)__str, v10, v11, v12, v13, v14, v15, v16);
      return;
    }
    v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v26)
      v32 = v26 + 1;
    else
      v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v32, 513, (uint64_t)CFSTR("%s"), v27, v28, v29, v30, v31, (char)__str);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v34 = __str;
      v24 = MEMORY[0x1E0C81028];
      v25 = OS_LOG_TYPE_DEFAULT;
      goto LABEL_18;
    }
  }
}

void *sub_19B6E2350()
{
  void *result;

  if (qword_1EE3FD7F8 != -1)
    dispatch_once(&qword_1EE3FD7F8, &unk_1E3BD1308);
  result = (void *)qword_1EE3FD7F0;
  if (qword_1EE3FD7F0)
  {
    result = dlsym((void *)qword_1EE3FD7F0, "AMFDRSealingMapCopyInstanceForClass");
    off_1EE3FD7D8 = (uint64_t (*)(_QWORD, _QWORD))result;
  }
  return result;
}

void sub_19B6E23A8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint8_t v7[16];

  qword_1EE3FD7F0 = (uint64_t)dlopen("/usr/lib/libFDR.dylib", 1);
  if (!qword_1EE3FD7F0)
  {
    v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v0)
      v6 = v0 + 1;
    else
      v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v6, 1161, (uint64_t)CFSTR("Unable to dlopen /usr/lib/libFDR.dylib"), v1, v2, v3, v4, v5, v7[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Unable to dlopen /usr/lib/libFDR.dylib", v7, 2u);
    }
  }
}

void *sub_19B6E2450()
{
  return sub_19B6F79A4(sub_19B6E245C);
}

void sub_19B6E245C(unsigned int a1, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint8_t buf[4];
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (a1 >= 5)
  {
    if (a1 - 5 >= 2)
    {
      if (a1 == 7)
      {
        v19 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
        v25 = v19
            ? v19 + 1
            : "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
        _MGLog((uint64_t)v25, 1144, (uint64_t)CFSTR("%s"), v20, v21, v22, v23, v24, a2);
        if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG))
          sub_19B70F30C(a2, v26, v27, v28, v29, v30, v31, v32);
      }
    }
    else
    {
      v12 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
      if (v12)
        v18 = v12 + 1;
      else
        v18 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
      _MGLog((uint64_t)v18, 1140, (uint64_t)CFSTR("%s"), v13, v14, v15, v16, v17, a2);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136315138;
        v34 = a2;
        v10 = MEMORY[0x1E0C81028];
        v11 = OS_LOG_TYPE_INFO;
        goto LABEL_13;
      }
    }
  }
  else
  {
    v3 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
    if (v3)
      v9 = v3 + 1;
    else
      v9 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
    _MGLog((uint64_t)v9, 1135, (uint64_t)CFSTR("%s"), v4, v5, v6, v7, v8, a2);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      v34 = a2;
      v10 = MEMORY[0x1E0C81028];
      v11 = OS_LOG_TYPE_DEFAULT;
LABEL_13:
      _os_log_impl(&dword_19B6B1000, v10, v11, "%s", buf, 0xCu);
    }
  }
}

uint64_t sub_19B6E260C(unsigned int a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  NSObject *v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  unint64_t v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  _BYTE v44[10];
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v40 = 0;
  if (a4)
  {
    if (!a3)
    {
      v14 = *a4;
      v15 = a4[1];
      if (a1 == 1162037572 || a1 == 1128810832)
      {
        v16 = sub_19B6FFC04(a2, a1, &v40);
        if ((_DWORD)v16)
        {
          v4 = v16;
          v17 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v17)
            v23 = v17 + 1;
          else
            v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          _MGLog((uint64_t)v23, 1591, (uint64_t)CFSTR("%s failed to decode Img4 property tag: 0x%X with error %d"), v18, v19, v20, v21, v22, (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315650;
            v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
            v43 = 1024;
            *(_DWORD *)v44 = a1;
            *(_WORD *)&v44[4] = 1024;
            *(_DWORD *)&v44[6] = v4;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s failed to decode Img4 property tag: 0x%X with error %d", buf, 0x18u);
          }
          return v4;
        }
        if (a1 == 1162037572)
        {
          if (v40 != v15)
          {
            v33 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
            if (v33)
              v39 = v33 + 1;
            else
              v39 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
            _MGLog((uint64_t)v39, 1607, (uint64_t)CFSTR("%s Img4 UniqueChipID (0x%llX) did not match real UniqueChipID (0x%llX)"), v34, v35, v36, v37, v38, (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
            if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
              return 1;
            *(_DWORD *)buf = 136315650;
            v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
            v43 = 2048;
            *(_QWORD *)v44 = v40;
            *(_WORD *)&v44[8] = 2048;
            v45 = v15;
            v31 = MEMORY[0x1E0C81028];
            v32 = "%s Img4 UniqueChipID (0x%llX) did not match real UniqueChipID (0x%llX)";
            goto LABEL_33;
          }
        }
        else if (a1 == 1128810832 && v40 != v14)
        {
          v24 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
          if (v24)
            v30 = v24 + 1;
          else
            v30 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
          _MGLog((uint64_t)v30, 1599, (uint64_t)CFSTR("%s Img4 ChipID (0x%llX) did not match real ChipID (0x%llX)"), v25, v26, v27, v28, v29, (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
          if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            return 1;
          *(_DWORD *)buf = 136315650;
          v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
          v43 = 2048;
          *(_QWORD *)v44 = v40;
          *(_WORD *)&v44[8] = 2048;
          v45 = v14;
          v31 = MEMORY[0x1E0C81028];
          v32 = "%s Img4 ChipID (0x%llX) did not match real ChipID (0x%llX)";
LABEL_33:
          _os_log_impl(&dword_19B6B1000, v31, OS_LOG_TYPE_DEFAULT, v32, buf, 0x20u);
          return 1;
        }
      }
    }
    return 0;
  }
  v5 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c", 47);
  if (v5)
    v11 = v5 + 1;
  else
    v11 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/sysconfig.c";
  _MGLog((uint64_t)v11, 1576, (uint64_t)CFSTR("%s context was NULL"), v6, v7, v8, v9, v10, (char)"int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)");
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v42 = "int _APTicketPropertyCallback(uint32_t, const Img4Property *, uint32_t, void *)";
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%s context was NULL", buf, 0xCu);
  }
  return 6;
}

uint64_t sub_19B6E2960()
{
  uint64_t v0;
  _QWORD v2[5];
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = 0;
  v4 = &v3;
  v5 = 0x2000000000;
  v0 = qword_1EE3FD810;
  v6 = qword_1EE3FD810;
  if (!qword_1EE3FD810)
  {
    v2[0] = MEMORY[0x1E0C809B0];
    v2[1] = 0x40000000;
    v2[2] = sub_19B6E29F8;
    v2[3] = &unk_1E3BD1388;
    v2[4] = &v3;
    sub_19B6E29F8((uint64_t)v2);
    v0 = v4[3];
  }
  _Block_object_dispose(&v3, 8);
  return v0;
}

void *sub_19B6E29F8(uint64_t a1)
{
  void *v2;
  void *result;
  void *v4;

  if (qword_1EE3FD7D0)
  {
    v2 = (void *)qword_1EE3FD7D0;
  }
  else
  {
    qword_1EE3FD7D0 = _sl_dlopen();
    v2 = (void *)qword_1EE3FD7D0;
    if (!qword_1EE3FD7D0)
    {
      v4 = (void *)abort_report_np();
      free(v4);
    }
  }
  result = dlsym(v2, "lookupPathForPersonalizedData");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1EE3FD810 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_19B6E2AE8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

uint64_t sub_19B6E3E3C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  void *v15;
  const __CFArray *v16;
  CFIndex v17;
  NSObject *v18;
  const void *ValueAtIndex;
  CFTypeID v20;
  CFIndex Count;
  const void *v22;
  CFTypeID v23;
  CFTypeID TypeID;
  _BOOL4 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint8_t buf[4];
  const void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (sub_19B6E40E0())
    return 1;
  v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
  if (v0)
    v6 = v0 + 1;
  else
    v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  _MGLog((uint64_t)v6, 530, (uint64_t)CFSTR("IOKit is busy, waiting 5s"), v1, v2, v3, v4, v5, v33);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IOKit is busy, waiting 5s", buf, 2u);
  }
  sleep(5u);
  if (sub_19B6E40E0())
    return 1;
  v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
  if (v8)
    v14 = v8 + 1;
  else
    v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  _MGLog((uint64_t)v14, 538, (uint64_t)CFSTR("IOKit did not stop, getting busy services"), v9, v10, v11, v12, v13, v34);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IOKit did not stop, getting busy services", buf, 2u);
  }
  v15 = (void *)objc_opt_new();
  if (objc_msgSend(v15, "createTreeIterator:", "IOService"))
  {
    v16 = (const __CFArray *)objc_msgSend(v15, "iteratorCopyBusyServiceNames");
    if (CFArrayGetCount(v16) >= 1)
    {
      v17 = 0;
      v18 = MEMORY[0x1E0C81028];
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v16, v17);
        v20 = CFGetTypeID(ValueAtIndex);
        if (v20 == CFStringGetTypeID() && os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 138412290;
          v36 = ValueAtIndex;
          _os_log_impl(&dword_19B6B1000, v18, OS_LOG_TYPE_DEFAULT, "IOKit is busy with %@", buf, 0xCu);
        }
        ++v17;
      }
      while (v17 < CFArrayGetCount(v16));
    }
    if (CFArrayGetCount(v16) > 0)
    {
      Count = CFArrayGetCount(v16);
      v22 = CFArrayGetValueAtIndex(v16, Count - 1);
      v23 = CFGetTypeID(v22);
      TypeID = CFStringGetTypeID();
      v25 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT);
      if (v23 == TypeID)
      {
        if (v25)
          sub_19B70F378((uint64_t)v22, v26, v27, v28, v29, v30, v31, v32);
      }
      else if (v25)
      {
        sub_19B70F3E8((uint64_t)v22, v26, v27, v28, v29, v30, v31, v32);
      }
    }
    CFRelease(v16);
  }

  return 0;
}

BOOL sub_19B6E40E0()
{
  kern_return_t v0;
  _BOOL8 v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t v10[12];
  uint32_t busyState;

  busyState = -1;
  v0 = IOKitGetBusyState(*MEMORY[0x1E0CBBAA8], &busyState);
  v1 = (v0 | busyState) == 0;
  if (!(v0 | busyState))
  {
    v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
    if (v2)
      v8 = v2 + 1;
    else
      v8 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    _MGLog((uint64_t)v8, 517, (uint64_t)CFSTR("IOKit is ready"), v3, v4, v5, v6, v7, v10[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IOKit is ready", v10, 2u);
    }
  }
  return v1;
}

uint64_t sub_19B6E41A0(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)objc_opt_new();
  if (objc_msgSend(v4, "createTreeIterator:", "IODeviceTree"))
    v5 = objc_msgSend(v4, "deviceTreeNodeIsPresent:withExactName:withNodeClass:", a1, 0, a2);
  else
    v5 = 0;

  return v5;
}

BOOL sub_19B6E4210(uint64_t a1, const void *a2)
{
  const __CFDictionary *v4;
  const __CFDictionary *v5;
  const void *Value;
  _BOOL8 v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  const void *v19;
  __int16 v20;
  const void *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v4 = (const __CFDictionary *)sub_19B6E41A0(a1, 0);
  if (!v4)
    return 0;
  v5 = v4;
  Value = CFDictionaryGetValue(v4, a2);
  v7 = Value != 0;
  v8 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
  if (v8)
    v14 = v8 + 1;
  else
    v14 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
  _MGLog((uint64_t)v14, 593, (uint64_t)CFSTR("Property %@[%@] found %@"), v9, v10, v11, v12, v13, a1);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v17 = a1;
    v18 = 2112;
    v19 = a2;
    v20 = 2112;
    v21 = Value;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Property %@[%@] found %@", buf, 0x20u);
  }
  CFRelease(v5);
  return v7;
}

BOOL sub_19B6E4340(uint64_t a1, uint64_t a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  CFIndex Count;
  _BOOL8 v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t buf[4];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v3 = (const __CFDictionary *)sub_19B6E41A0(a1, a2);
  if (!v3)
    return 0;
  v4 = v3;
  Count = CFDictionaryGetCount(v3);
  v6 = Count > 0;
  if (Count >= 1)
  {
    v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m", 47);
    if (v7)
      v13 = v7 + 1;
    else
      v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/IORegistryUtilities/MGIOKitHelper.m";
    _MGLog((uint64_t)v13, 607, (uint64_t)CFSTR("Node %@ found"), v8, v9, v10, v11, v12, a1);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412290;
      v16 = a1;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Node %@ found", buf, 0xCu);
    }
  }
  CFRelease(v4);
  return v6;
}

uint64_t sub_19B6E4448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  const void *v10;
  uint64_t v11;

  v9 = (void *)objc_opt_new();
  if (objc_msgSend(v9, "createTreeIterator:", "IODeviceTree")
    && (v10 = (const void *)objc_msgSend(v9, "copyDeviceTreeProperty:withFirstChar:propertyName:withPropertyFirstChar:", a2, a3, a4, a5)) != 0)
  {
    CFRelease(v10);
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }

  return v11;
}

uint64_t sub_19B6E44D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;

  v9 = (void *)objc_opt_new();
  if (objc_msgSend(v9, "createTreeIterator:", "IODeviceTree"))
    v10 = objc_msgSend(v9, "copyNumberFromDeviceTree:withFirstChar:propertyName:withPropertyFirstChar:", a2, a3, a4, a5);
  else
    v10 = 0;

  return v10;
}

uint64_t sub_19B6E4558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;

  v9 = (void *)objc_opt_new();
  if (objc_msgSend(v9, "createTreeIterator:", "IODeviceTree"))
    v10 = objc_msgSend(v9, "copyDataFromDeviceTree:withFirstChar:propertyName:withPropertyFirstChar:", a2, a3, a4, a5);
  else
    v10 = 0;

  return v10;
}

uint64_t sub_19B6E45DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;

  v9 = (void *)objc_opt_new();
  if (objc_msgSend(v9, "createTreeIterator:", "IODeviceTree"))
    v10 = objc_msgSend(v9, "copyStringFromDeviceTree:withFirstChar:propertyName:withPropertyFirstChar:", a2, a3, a4, a5);
  else
    v10 = 0;

  return v10;
}

uint64_t sub_19B6E4660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;

  v9 = (void *)objc_opt_new();
  if (objc_msgSend(v9, "createTreeIterator:", "IOService"))
    v10 = objc_msgSend(v9, "copyStringFromServiceTree:withFirstChar:propertyName:withPropertyFirstChar:", a2, a3, a4, a5);
  else
    v10 = 0;

  return v10;
}

uint64_t sub_19B6E46E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v9;
  uint64_t v10;

  v9 = (void *)objc_opt_new();
  if (objc_msgSend(v9, "createTreeIterator:", "IOService"))
    v10 = objc_msgSend(v9, "copyPropertyFromServiceTree:withFirstChar:propertyName:withPropertyFirstChar:", a2, a3, a4, a5);
  else
    v10 = 0;

  return v10;
}

void *sub_19B6E4768()
{
  id v0;
  void *v1;
  uint64_t v2;
  const void *v3;
  void *v4;
  uint64_t v5;
  const void *v6;
  void *v7;
  uint64_t v8;
  const void *v9;
  void *v10;
  const void *v11;
  void *v12;
  id v13;

  v0 = objc_alloc_init(MEMORY[0x1E0C99E08]);
  v1 = v0;
  if (v0)
  {
    v2 = sub_19B6E44D4((uint64_t)v0, (uint64_t)CFSTR("Ai0zsJQ3+sTFkU6/lLbd5A"), 111, (uint64_t)CFSTR("yeQy+rgNoD7+YIY6mSVOhg"), 101);
    v3 = (const void *)v2;
    if (v2)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 1);
      v4 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "setObject:forKey:", v3, v4);

    }
    v5 = sub_19B6E44D4(v2, (uint64_t)CFSTR("Ai0zsJQ3+sTFkU6/lLbd5A"), 111, (uint64_t)CFSTR("UF3CoK9RCYXfTyzttoxNDQ"), 101);
    v6 = (const void *)v5;
    if (v5)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 2);
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "setObject:forKey:", v6, v7);

    }
    v8 = sub_19B6E44D4(v5, (uint64_t)CFSTR("Ai0zsJQ3+sTFkU6/lLbd5A"), 111, (uint64_t)CFSTR("mug/QuG6jZ3CYR9p7OWQaw"), 98);
    v9 = (const void *)v8;
    if (v8)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 4);
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "setObject:forKey:", v9, v10);

    }
    v11 = (const void *)sub_19B6E44D4(v8, (uint64_t)CFSTR("4k6Wv56SWfITjzet+hIHMQ"), 109, (uint64_t)CFSTR("sYxZdpH3i8nwjZNet0QuAw"), 102);
    if (v11)
    {
      objc_msgSend(MEMORY[0x1E0CB37E8], "numberWithInteger:", 3);
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend(v1, "setObject:forKey:", v11, v12);

    }
    if (v3)
      CFRelease(v3);
    if (v6)
      CFRelease(v6);
    if (v9)
      CFRelease(v9);
    if (v11)
      CFRelease(v11);
    v13 = v1;
  }

  return v1;
}

uint64_t sub_19B6E4914(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_19B6E4448(a1, (uint64_t)CFSTR("marconi-wifi"), 0, a1, 0);
  if ((v2 & 1) != 0)
    return 1;
  else
    return sub_19B6E4448(v2, (uint64_t)CFSTR("wlan"), 0, a1, 0);
}

void sub_19B6E4970(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

BOOL MobileGestalt_get_has3GProximityCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("NXJOYK7VhNn7ugbF2kx0zg"));
}

BOOL MobileGestalt_get_has3GVeniceCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("DGBWzPMdVuqPxgH7iSz3SA"));
}

BOOL MobileGestalt_get_has720PPlaybackCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("Lg1EJX11Jb7EbveB6+YgVQ"));
}

uint64_t MobileGestalt_get_aDSCapability(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("qRxbmK4B8fGc06Iwe8YptQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F484(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_apnCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("spGVujDEmyCzDznXozB3oA"));
}

BOOL MobileGestalt_get_arm64ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("kKgJsWN/rBUAkimOtm/wbA"));
}

BOOL MobileGestalt_get_arm64EExecutionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("li+w2foswFu0srn5UxdOug"));
}

BOOL MobileGestalt_get_armV6ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("g+9NpjmSVwtomd8nyNJimg"));
}

BOOL MobileGestalt_get_armV7ExecutionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("DWrhyh1BwYypYmW5q78Wuw"));
}

BOOL MobileGestalt_get_armV7SExecutionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("RYO2N0gqp5hHCik2TEiSVA"));
}

BOOL MobileGestalt_get_aV1DecodingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("PJKxdi6epBZAu1rqAsrcjQ"));
}

const void *MobileGestalt_copy_aVDDecodingRate_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("J1QHVh74Nnd6Rqyiq71/yw"));
}

char *MobileGestalt_copy_awdID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("MWduuAGptrl7qIzWqBmOqQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_awdID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("MWduuAGptrl7qIzWqBmOqQ"));
}

BOOL MobileGestalt_get_awdLCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("XI87Zkcr5j1B/p2dom/B6A"));
}

uint64_t MobileGestalt_get_absoluteDepthLimit(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("FtgLNPlv55lerm7FY/kClw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F4F4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_accelerometerCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("39ZkJVEsL4pmCXbg+89QmQ"));
}

BOOL MobileGestalt_get_accessibilityCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("16N2bLOzcgJEsZToEX21Zg"));
}

uint64_t MobileGestalt_get_acousticID(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("XWAyufZ2SrclH9F9EDmBKw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F564(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_activationProtocol(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("zP3kBA1Biwz2d6PTIIbmUQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F5D4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_activeWirelessTechnology()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("Eavu9TP+iZ0Lzlk7FU6w6Q"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_activeWirelessTechnology_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Eavu9TP+iZ0Lzlk7FU6w6Q"));
}

float MobileGestalt_get_actuatorResonantFrequency(void *a1)
{
  id v1;
  const void *v2;
  const void *v3;
  CFTypeID v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  v1 = a1;
  valuePtr = -1082130432;
  v2 = MGCopyAnswer((const char **)CFSTR("hhRNi2d3z2WEFmU+xG/EXw"));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F644(v5, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_additionalTextTonesCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("6k70IxahfOQTZbGwu++QwA"));
}

uint64_t MobileGestalt_get_aggregateDevicePhotoZoomFactor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("JLP/IinyzetEPztvoNUNKg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F6B4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_aggregateDeviceVideoZoomFactor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("IweaHIDpz+rknAcb3+xg9g"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F724(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_airDropCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("IBqcPacFMPIX8HMWob444A"));
}

BOOL MobileGestalt_get_airDropRestriction()
{
  return MGGetBoolAnswer((const char **)CFSTR("/bSMNaIuUT58N/BN1nYUjw"));
}

BOOL MobileGestalt_get_airplaneMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("l/n0Z7pMB8k0GyTKz3v3Tw"));
}

BOOL MobileGestalt_get_airplayMirroringCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("yMmSdMRKEHRTCQ72ltCH1w"));
}

BOOL MobileGestalt_get_allow32BitApps()
{
  return MGGetBoolAnswer((const char **)CFSTR("ibhfX8FQ6b809N632Ey98g"));
}

BOOL MobileGestalt_get_allowOnlyATVCPSDKApps()
{
  return MGGetBoolAnswer((const char **)CFSTR("Ex6ChutQnIx5Zm6c5uwYuw"));
}

BOOL MobileGestalt_get_allowYouTube()
{
  return MGGetBoolAnswer((const char **)CFSTR("7l0BaQsNxJCanoeHMJ2huA"));
}

BOOL MobileGestalt_get_allowYouTubePlugin()
{
  return MGGetBoolAnswer((const char **)CFSTR("MTa8c+pEdbK0tHGXP06xOw"));
}

uint64_t MobileGestalt_get_alwaysOnDisplayMaxMemory(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("Ty4lICNS1jQh45sB3wQd7A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F794(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_ambientLightSensorCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("lo3szoQ4sLy7o3+ZD0GcAQ"));
}

char *MobileGestalt_copy_ambientLightSensorSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("UCLOC2TKe3vRkId34ubKWw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_ambientLightSensorSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("UCLOC2TKe3vRkId34ubKWw"));
}

UInt8 *MobileGestalt_copy_apnonce()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("hykQtM0zkNe2/IY69+3PPQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x9A5E339AuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_apnonce_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("hykQtM0zkNe2/IY69+3PPQ"));
}

UInt8 *MobileGestalt_copy_apnonceRetrieve()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("UcRWpMcvJDfLzn6utLj3XQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x181DA102uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_apnonceRetrieve_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("UcRWpMcvJDfLzn6utLj3XQ"));
}

uint64_t MobileGestalt_get_appCapacityTVOS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("kkSkHTEei96N1ZehicOgoA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F804(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_appStoreCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("XEoV4os3FAUL7yHDxWmSMw"));
}

BOOL MobileGestalt_get_appleInternalInstallCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("EqrsVvjcYDdxHBiQmGhAWw"));
}

uint64_t MobileGestalt_get_appleNeuralEngineSubtype(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("eJGhnVvylF3dMOHBKJzeiw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F874(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_applicationInstallationCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("7yzVesPANxqKQ+oqNPhTwg"));
}

char *MobileGestalt_copy_arcModuleSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("KzUQgIyBRinkweVMNUCOWA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_arcModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("KzUQgIyBRinkweVMNUCOWA"));
}

uint64_t MobileGestalt_get_arrowChipID(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("nhGhVMyvrWYe9U2ltAUImg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F8E4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_arrowUniqueChipID(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("CPiqZJJPocpjc5C5qe1tiw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F954(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_artworkTraitDisplayGamut()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("LTI8wHvEYKy8zR1IXBW1uQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_artworkTraitDisplayGamut_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("LTI8wHvEYKy8zR1IXBW1uQ"));
}

const void *MobileGestalt_copy_artworkTraits_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("oPeik/9e8lQWMszEjbPzng"));
}

BOOL MobileGestalt_get_assistantCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("xOJfWykLmQCc8lKlzMlrLA"));
}

char *MobileGestalt_copy_attestationUniqueDeviceID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("0KHhsv2F/BGA9AppFljmKg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_attestationUniqueDeviceID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("0KHhsv2F/BGA9AppFljmKg"));
}

BOOL MobileGestalt_get_audioPlaybackCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("paR6NqTecAD44x45kzV87g"));
}

BOOL MobileGestalt_get_autoFocusCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("o0axLo6LGt8HbuEWdLZ92Q"));
}

uint64_t MobileGestalt_get_automaticMicMode(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("yLfrxjB6AbZTASUIAcqi2Q"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F9C4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

const void *MobileGestalt_copy_availableDisplayZoomSizes_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ILaGO+KV5JAOq7Q5GEwbWQ"));
}

BOOL MobileGestalt_get_backlightCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("1DQNgySZSIjPqLWroIzfiQ"));
}

UInt8 *MobileGestalt_copy_basebandAPTimeSync()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("HXTqT3UXOKuTEklxz+wMAA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xF4C2A82AuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_basebandAPTimeSync_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("HXTqT3UXOKuTEklxz+wMAA"));
}

char *MobileGestalt_copy_basebandBoardSnum()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("ToJGxfcjkIerYyeL2e8c4A"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandBoardSnum_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ToJGxfcjkIerYyeL2e8c4A"));
}

const void *MobileGestalt_copy_basebandCertId_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Q5QHkCRPRmiX3L/5xxKrRg"));
}

const void *MobileGestalt_copy_basebandChipId_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("eNgz35a7iZnVeEMwsBQZew"));
}

char *MobileGestalt_copy_basebandChipset()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("pB5sZVvnp+QjZQtt2KfQvA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandChipset_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("pB5sZVvnp+QjZQtt2KfQvA"));
}

uint64_t MobileGestalt_get_basebandClass(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("XQBHOWjPt2P+uNqlLm1P7A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FA34(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

const void *MobileGestalt_copy_basebandFirmwareManifestData_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("FkD7K642S082lnfw/ohHzg"));
}

const void *MobileGestalt_copy_basebandFirmwareUpdateInfo_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Djv9tHz6MLdTUDjnkq0obQ"));
}

char *MobileGestalt_copy_basebandFirmwareVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("PQzmRjKVMistuIVsqs6QXA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandFirmwareVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("PQzmRjKVMistuIVsqs6QXA"));
}

const void *MobileGestalt_copy_basebandKeyHashInformation_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("H5HW20mJr/djc40tAehkww"));
}

char *MobileGestalt_copy_basebandPostponementStatus()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("vaiFeAcMTIDXMSxTr8JwCw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandPostponementStatus_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("vaiFeAcMTIDXMSxTr8JwCw"));
}

const void *MobileGestalt_copy_basebandPostponementStatusBlob_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("YUobJKXH3+ukrUe13TXL3Q"));
}

UInt8 *MobileGestalt_copy_basebandRegionSKU()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("91LyMcx4z1w3SGVeqteMnA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x3173986EuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_basebandRegionSKU_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("91LyMcx4z1w3SGVeqteMnA"));
}

uint64_t MobileGestalt_get_basebandRegionSKURadioTechnology(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("Z3gOHeppbL6+rblIe8H5Ag"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FAA4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

const void *MobileGestalt_copy_basebandSecurityInfoBlob_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("EImfMz+bzJrUkVQKyY6tEg"));
}

UInt8 *MobileGestalt_copy_basebandSerialNumber()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("Nmhz54v5ZLqj2I4NPFIFqQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x35D68F52uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_basebandSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Nmhz54v5ZLqj2I4NPFIFqQ"));
}

char *MobileGestalt_copy_basebandStatus()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("CN64p1hw1JVdTHCfBdgPLQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandStatus_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("CN64p1hw1JVdTHCfBdgPLQ"));
}

char *MobileGestalt_copy_basebandUniqueId()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("vIccod02kDxScKF5s2h6OA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_basebandUniqueId_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("vIccod02kDxScKF5s2h6OA"));
}

uint64_t MobileGestalt_get_batteryCurrentCapacity(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("f2DlVMUVcV+MeWs/g2ku+g"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FB14(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_batteryIsCharging()
{
  return MGGetBoolAnswer((const char **)CFSTR("sLe8lqXRlqZM74MNUoVcyQ"));
}

BOOL MobileGestalt_get_batteryIsFullyCharged()
{
  return MGGetBoolAnswer((const char **)CFSTR("jgE7MmmkZAG0BiWVqD7bMQ"));
}

char *MobileGestalt_copy_batterySerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("DcQNvnO5Uhpc1jjGIrzyng"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_batterySerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("DcQNvnO5Uhpc1jjGIrzyng"));
}

BOOL MobileGestalt_get_blueLightReductionSupported()
{
  return MGGetBoolAnswer((const char **)CFSTR("F1Xz9g1JORibBS9DYPUPrg"));
}

char *MobileGestalt_copy_bluetoothAddress()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("k5lVWbXuiZHLA17KGiVUAA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_bluetoothAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("k5lVWbXuiZHLA17KGiVUAA"));
}

BOOL MobileGestalt_get_bluetoothCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("XSLlJd/8sMyXO0qtvvUTBQ"));
}

BOOL MobileGestalt_get_bluetoothLE2Capability()
{
  return MGGetBoolAnswer((const char **)CFSTR("q3JBrhzy5fyJ1+LAITPW0w"));
}

BOOL MobileGestalt_get_bluetoothLECapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("8/HMvzDR3J6m0aY3NYeqcg"));
}

uint64_t MobileGestalt_get_boardId(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("0uthiXrHZ212KvcJizKHEw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FB84(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_boardRevision(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("VqRhf8vgXr9B+SYvpnX39g"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FBF4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_bootManifestHash()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("Qq9/Mya05P4ToEr1pMpGGg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xB39D7F8FuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_bootManifestHash_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Qq9/Mya05P4ToEr1pMpGGg"));
}

UInt8 *MobileGestalt_copy_bootNonce()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("1Rm/mWYEI5ttaC0dJ3sHBQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xE3A93A78uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_bootNonce_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("1Rm/mWYEI5ttaC0dJ3sHBQ"));
}

char *MobileGestalt_copy_bridgeBuild()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("GxXmRWHjsY5yAVhMfCH6Lg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_bridgeBuild_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("GxXmRWHjsY5yAVhMfCH6Lg"));
}

char *MobileGestalt_copy_bridgeRestoreVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("Glo+aTkt0Uw31BghCxnsyQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_bridgeRestoreVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Glo+aTkt0Uw31BghCxnsyQ"));
}

BOOL MobileGestalt_get_buddyLanguagesAnimationRequiresOptimization()
{
  return MGGetBoolAnswer((const char **)CFSTR("z+5gEULGC7aEYopBd4ggpA"));
}

char *MobileGestalt_copy_buildID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("qwXfFvH5jPXPxrny0XuGtQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_buildID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("qwXfFvH5jPXPxrny0XuGtQ"));
}

char *MobileGestalt_copy_buildVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("mZfUC7qo4pURNhyMHZ62RQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_buildVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("mZfUC7qo4pURNhyMHZ62RQ"));
}

BOOL MobileGestalt_get_c2KDeviceCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("tdUWKiiM7JdctnzQuvaVVA"));
}

char *MobileGestalt_copy_cpuArchitecture()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("k7QIBwZJJOVw+Sej/8h8VA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_cpuArchitecture_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("k7QIBwZJJOVw+Sej/8h8VA"));
}

uint64_t MobileGestalt_get_cpuSubType(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("AWEfP3xWh0q1MjO3JAy/AA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FC64(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_cpuType(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("xZm4Ky2/qswyf7ykvlchYg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FCD4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_callForwardingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("57eLnXynqDlQaGEi+9JAtQ"));
}

BOOL MobileGestalt_get_callWaitingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("eXCYx/SHTZIn5LInWvZByw"));
}

BOOL MobileGestalt_get_callerIDCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("tad3RCjcWdkyLSVI8kUBtA"));
}

uint64_t MobileGestalt_get_cameraAppUIVersion(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("NszbG6qiAztVal4mpDQRkg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FD44(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_cameraButtonCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("PsIXZ7uVWznKaTEXDbFSYA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x50D27031uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_cameraButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("PsIXZ7uVWznKaTEXDbFSYA"));
}

BOOL MobileGestalt_get_cameraButtonCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("CwvKxM2cEogD3p+HYgaW0Q"));
}

UInt8 *MobileGestalt_copy_cameraButtonNormalizedCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("DxmNcovWWN464hwZdGfonA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xD39E83uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_cameraButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("DxmNcovWWN464hwZdGfonA"));
}

BOOL MobileGestalt_get_cameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("nv4RoLkNoPT0/rsO8Yaiew"));
}

BOOL MobileGestalt_get_cameraFlashCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("jdLgKT+0BZmGrzd9J0cuPA"));
}

BOOL MobileGestalt_get_cameraFrontFlashCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("fJZs6N8SqTS4RuQVh3szxA"));
}

BOOL MobileGestalt_get_cameraHDR2Capability()
{
  return MGGetBoolAnswer((const char **)CFSTR("cWWKdUn+rIclZ60ZGAVhBw"));
}

uint64_t MobileGestalt_get_cameraHDRVersion(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("+97cHA72jHlHqQnIkgGBYg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FDB4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_cameraIMUDistanceType(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("aDuN0jCthN9lLu4qQ9OrEA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FE24(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_cameraLiveEffectsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("03hWmMtMs+4nzama4/PzHQ"));
}

const void *MobileGestalt_copy_cameraMaxBurstLength_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("gBw7IWiBnLHaA+lBrZBgWw"));
}

BOOL MobileGestalt_get_cameraRestriction()
{
  return MGGetBoolAnswer((const char **)CFSTR("2pxKjejpRGpWvUE+3yp5mQ"));
}

const void *MobileGestalt_copy_carrierBundleInfoArray_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("475wW3fne+tyzGr4wleUSQ"));
}

BOOL MobileGestalt_get_carrierInstallCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("9n2qz3uDC5nSe1xZG1/Bkw"));
}

BOOL MobileGestalt_get_cellBroadcastCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("CN/XFuy/9Fdv0yE+28kwRQ"));
}

BOOL MobileGestalt_get_cellularDataCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("L5al7b+7JATD/izSJeH0aQ"));
}

BOOL MobileGestalt_get_cellularTelephonyCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ebyBs0j3KAquBsgcfrNZIg"));
}

BOOL MobileGestalt_get_certificateProductionStatus()
{
  return MGGetBoolAnswer((const char **)CFSTR("uO3aPe7lfB1XxSiz/1xBvA"));
}

BOOL MobileGestalt_get_certificateSecurityMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("eg8KDO//lXaLwp+URGP6DA"));
}

uint64_t MobileGestalt_get_chipID(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("566JrJVMlDfnslGpwUzNlQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FE94(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_chromeIdentifier()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("yUqD8AXE/c+IggkuYoxrqA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_chromeIdentifier_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("yUqD8AXE/c+IggkuYoxrqA"));
}

BOOL MobileGestalt_get_cloudPhotoLibraryCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("8OTc3mN30ACaEwecgpKfXA"));
}

BOOL MobileGestalt_get_coastlineGlowRenderingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("diS7AlmwFZz6NyF7CY97sA"));
}

UInt8 *MobileGestalt_copy_compassCalibration()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("qb//mYg6KeTmjv8w4ZAMIg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xDCBED811uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_compassCalibration_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("qb//mYg6KeTmjv8w4ZAMIg"));
}

const void *MobileGestalt_copy_compassCalibrationDictionary_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("aoAKcHLuTUp/o3squcJkhA"));
}

const void *MobileGestalt_copy_compassType_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("meLhyIpGgxiQoFZD/OGPcQ"));
}

const void *MobileGestalt_copy_compatibleAppVariants_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("VuGdqp8UBpi9vPWHlPluVQ"));
}

char *MobileGestalt_copy_computerName()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("v5YVEwERRin1v+reUNjJ5w"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_computerName_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("v5YVEwERRin1v+reUNjJ5w"));
}

char *MobileGestalt_copy_conferenceCallType()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("ol92SaBpqIvQs+KBljuwGA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_conferenceCallType_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ol92SaBpqIvQs+KBljuwGA"));
}

UInt8 *MobileGestalt_copy_configNumber()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("SmUPjD77AHIMCLny9nawdw"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xFA9C908DuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_configNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("SmUPjD77AHIMCLny9nawdw"));
}

BOOL MobileGestalt_get_containsCellularRadioCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("yRZv0s7Dpj8ZBk0S+0+nMA"));
}

BOOL MobileGestalt_get_continuityCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("y0jtYciPmcx3ywPM582WZw"));
}

BOOL MobileGestalt_get_coreRoutineCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("g7vU4YF+9Z+wkSvw/Cm8Dg"));
}

char *MobileGestalt_copy_countryOfOrigin()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("gizLvTWx1sMUYQ9EYr/N4g"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_countryOfOrigin_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("gizLvTWx1sMUYQ9EYr/N4g"));
}

char *MobileGestalt_copy_coverglassSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("OWi11Urd09rDmPVy1z5dOQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_coverglassSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("OWi11Urd09rDmPVy1z5dOQ"));
}

const void *MobileGestalt_copy_dMin_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ZEF0po63sTgpVrc9Ce7YNQ"));
}

BOOL MobileGestalt_get_dataPlanCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("KGlZoljMyZQSxfhROj0IFg"));
}

UInt8 *MobileGestalt_copy_debugBoardRevision()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("DrSqlXYNVfYXCvAsuUrUDA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xE3EA0121uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_debugBoardRevision_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("DrSqlXYNVfYXCvAsuUrUDA"));
}

BOOL MobileGestalt_get_delaySleepForHeadsetClickCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("Mh+drGtyBfLYKN02sROzxg"));
}

BOOL MobileGestalt_get_desenseBuild()
{
  return MGGetBoolAnswer((const char **)CFSTR("OWLyWlUOIkl+eQB7Iq37xQ"));
}

BOOL MobileGestalt_get_deviceAlwaysPrewarmActuator()
{
  return MGGetBoolAnswer((const char **)CFSTR("M+WPVivF4iTnm1CC8c6h+A"));
}

uint64_t MobileGestalt_get_deviceBackGlassMaterial(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("bUJD9zcOcitJwFA0ieIkxA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FF04(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceBackingColor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("CJcvxERO5v/3IWjDFKZKRw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FF74(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceBrand(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("fuKL2rMywRgQF1wowOA/cg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70FFE4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_deviceClass()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("+3Uf0Pm5F8Xy7Onyvko0vA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceClass_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("+3Uf0Pm5F8Xy7Onyvko0vA"));
}

char *MobileGestalt_copy_deviceColor()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("mumHZHMLEfAuTkkd28fHlQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceColor_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("mumHZHMLEfAuTkkd28fHlQ"));
}

uint64_t MobileGestalt_get_deviceColorMapPolicy(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("87sSAh2rboMI2TDvFBimkg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7100C4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceCoprocessorIsT1()
{
  return MGGetBoolAnswer((const char **)CFSTR("TLU8Pwcsys+5y2UFoMOjPA"));
}

float MobileGestalt_get_deviceCornerRadius(void *a1)
{
  id v1;
  const void *v2;
  const void *v3;
  CFTypeID v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  v1 = a1;
  valuePtr = -1082130432;
  v2 = MGCopyAnswer((const char **)CFSTR("y5dppxx/LzxoNuW+iIKR3g"));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B710134(v5, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  v6 = -1.0;
LABEL_11:

  return v6;
}

uint64_t MobileGestalt_get_deviceCoverGlassCoating(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("psOb+c5by4e5OqReDiFm7w"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7101A4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceCoverGlassColor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("9N7qIucqhr0Cy2/Tk27/hw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710214(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceCoverGlassMaterial(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("gnQwi8RnEeMG9qBe3IUKrg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710284(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceCoverMaterial(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("iaegRQa4jNGOuTA6hnZmcQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7102F4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceDefaultsToAnalyticsOptIn()
{
  return MGGetBoolAnswer((const char **)CFSTR("TpY9O1U1rtUk/m0BvlO58A"));
}

char *MobileGestalt_copy_deviceEnclosureColor()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("JhEU414EIaDvAz8ki5DSqw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceEnclosureColor_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("JhEU414EIaDvAz8ki5DSqw"));
}

uint64_t MobileGestalt_get_deviceEnclosureMaterial(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("AtmPEO/j+Pdr8+WKxv4Aaw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710364(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceEnclosureRGBColor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("TXZxlSojLMQyLqusm9aa/g"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7103D4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceHasAggregateCamera()
{
  return MGGetBoolAnswer((const char **)CFSTR("0/VAyl58TL5U/mAQEJNRQw"));
}

uint64_t MobileGestalt_get_deviceHasEmbeddedSIMOnlyBoard(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("UDftNoVOBIs9cSeia57q1A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710444(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceHasNAN()
{
  return MGGetBoolAnswer((const char **)CFSTR("YgC2TeHCEwzJ/ixqmNCzwQ"));
}

uint64_t MobileGestalt_get_deviceHousingColor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("NJsxTSI2WuD+13rxShXX9w"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7104B4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_deviceHousingColorUncooked()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("0GizaJLOyfzgAbxQ/5aniA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x191301F9uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_deviceHousingColorUncooked_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("0GizaJLOyfzgAbxQ/5aniA"));
}

BOOL MobileGestalt_get_deviceIsMuseCapable()
{
  return MGGetBoolAnswer((const char **)CFSTR("VGDDUFPWHbX/Ie9RSI0yDQ"));
}

BOOL MobileGestalt_get_deviceIsNED()
{
  return MGGetBoolAnswer((const char **)CFSTR("NDnoY3adyyskgiIQBNtlyQ"));
}

BOOL MobileGestalt_get_deviceIsPortableMac()
{
  return MGGetBoolAnswer((const char **)CFSTR("T0FD6BT+PiWc2duMVlTRww"));
}

UInt8 *MobileGestalt_copy_deviceKeyboardCalibration()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("DrrXMX9VWX7bMj0MZuhTUA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x9A6EB5EBuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_deviceKeyboardCalibration_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("DrrXMX9VWX7bMj0MZuhTUA"));
}

const void *MobileGestalt_copy_deviceLaunchTimeLimitScale_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("emXA9B552rnSoI7xXE91DA"));
}

uint64_t MobileGestalt_get_deviceLowBatteryLevel(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("XnXl4MhKZx3zRKvA7ZwIYQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710524(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceMemorySize(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("iJAKoV0Bp88r37qG+kkXzw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710594(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceMesaType(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("iTvGxmtSOnHv548XON379A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710604(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_deviceName()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("rkqlwPcRHwixY4gapPjanw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceName_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("rkqlwPcRHwixY4gapPjanw"));
}

char *MobileGestalt_copy_deviceNameString()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("JUWcn+5Ss0nvr5w/jk4WEg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceNameString_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("JUWcn+5Ss0nvr5w/jk4WEg"));
}

BOOL MobileGestalt_get_devicePrefers3DBuildingStrokes()
{
  return MGGetBoolAnswer((const char **)CFSTR("xbNo7dj2oAnz92JhEOn9tw"));
}

BOOL MobileGestalt_get_devicePrefersBuildingStrokes()
{
  return MGGetBoolAnswer((const char **)CFSTR("QFnvO2shAYI+d4bj3qXuFQ"));
}

BOOL MobileGestalt_get_devicePrefersCheapTrafficShaders()
{
  return MGGetBoolAnswer((const char **)CFSTR("7D54DikSnFQnbDEBwlKQTQ"));
}

BOOL MobileGestalt_get_devicePrefersProceduralAntiAliasing()
{
  return MGGetBoolAnswer((const char **)CFSTR("bysMryc4yLwQjKvUQGGXXQ"));
}

BOOL MobileGestalt_get_devicePrefersTrafficAlpha()
{
  return MGGetBoolAnswer((const char **)CFSTR("0VkTunHOJrrZdolQXR5gCg"));
}

BOOL MobileGestalt_get_deviceProximityCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("9RryeqF6OCWlbaXP2Qsoag"));
}

uint64_t MobileGestalt_get_deviceRGBColor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("8/tysfSvORoyVg9IE901oQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710674(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceRequiresPetalOptimization()
{
  return MGGetBoolAnswer((const char **)CFSTR("82Ono2SP03rNGkhOc5O1Mw"));
}

BOOL MobileGestalt_get_deviceRequiresProximityAmeliorations()
{
  return MGGetBoolAnswer((const char **)CFSTR("r5QUsvvgcb2Qmuflua13fQ"));
}

BOOL MobileGestalt_get_deviceRequiresSoftwareBrightnessCalculations()
{
  return MGGetBoolAnswer((const char **)CFSTR("2Qf/8sQyx6voo3Mw3QKgZQ"));
}

const void *MobileGestalt_copy_deviceSceneUpdateTimeLimitScale_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("QbQzuIbef01P4JeoL9EmKg"));
}

uint64_t MobileGestalt_get_deviceStingHousingColor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("rtIWWK0kM4F+ZMkIqhE7yQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7106E4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_deviceSubBrand(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("wtUF1NceYeLT6IHovZvocw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710754(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceSuportsExternalDriverKit()
{
  return MGGetBoolAnswer((const char **)CFSTR("Tqr2NqCLwGszJc3HOaPlTw"));
}

BOOL MobileGestalt_get_deviceSupports1080P()
{
  return MGGetBoolAnswer((const char **)CFSTR("Mk4ZslaChmO+6s3h7L1w6Q"));
}

BOOL MobileGestalt_get_deviceSupports3DImagery()
{
  return MGGetBoolAnswer((const char **)CFSTR("ohnQBWkVQf2nu9Vr/9uLug"));
}

BOOL MobileGestalt_get_deviceSupports3DMaps()
{
  return MGGetBoolAnswer((const char **)CFSTR("HIaq6xVZ/V8B9pnigcvqCA"));
}

BOOL MobileGestalt_get_deviceSupports3RdPartyHaptics()
{
  return MGGetBoolAnswer((const char **)CFSTR("6S9CvPHPtzHQqKudHSfsag"));
}

BOOL MobileGestalt_get_deviceSupports4G()
{
  return MGGetBoolAnswer((const char **)CFSTR("eu8pUYR7yo+AlS9aojlgwg"));
}

BOOL MobileGestalt_get_deviceSupports4K()
{
  return MGGetBoolAnswer((const char **)CFSTR("Fh2Ga0/Sj4T3Qn5Z9A9BMw"));
}

BOOL MobileGestalt_get_deviceSupports64Bit()
{
  return MGGetBoolAnswer((const char **)CFSTR("V2Ykm/0M3CA6nyNhwNInsg"));
}

BOOL MobileGestalt_get_deviceSupports720P()
{
  return MGGetBoolAnswer((const char **)CFSTR("lwHRTZNO5Jq87pVlzdNGIA"));
}

BOOL MobileGestalt_get_deviceSupports80ChargeLimit()
{
  return MGGetBoolAnswer((const char **)CFSTR("37NVydb//GP/GrhuTN+exg"));
}

BOOL MobileGestalt_get_deviceSupports9Pin()
{
  return MGGetBoolAnswer((const char **)CFSTR("qWGVjnlN/wWMhlWgfNcSBg"));
}

BOOL MobileGestalt_get_deviceSupportsAODVibrancy()
{
  return MGGetBoolAnswer((const char **)CFSTR("ykpu7qyhqFweVMKtxNylWA"));
}

BOOL MobileGestalt_get_deviceSupportsAOP()
{
  return MGGetBoolAnswer((const char **)CFSTR("HHF6YgqEQ9Kd7MBSVnLsgg"));
}

BOOL MobileGestalt_get_deviceSupportsAOP2()
{
  return MGGetBoolAnswer((const char **)CFSTR("ceKgtkUE4F9ywcr57zdUWA"));
}

BOOL MobileGestalt_get_deviceSupportsARKit()
{
  return MGGetBoolAnswer((const char **)CFSTR("67A3BpQkCRe1ihx0Me4lgg"));
}

BOOL MobileGestalt_get_deviceSupportsASTC()
{
  return MGGetBoolAnswer((const char **)CFSTR("ji56BO1mUeT7Qg9RO7Er9w"));
}

BOOL MobileGestalt_get_deviceSupportsAbsoluteAltimeter()
{
  return MGGetBoolAnswer((const char **)CFSTR("PFnuFyqMMnGUQQnTqS5byg"));
}

BOOL MobileGestalt_get_deviceSupportsAbsoluteDepth()
{
  return MGGetBoolAnswer((const char **)CFSTR("Ijs+pw5tRyxqSy5kfgZNuQ"));
}

BOOL MobileGestalt_get_deviceSupportsActiveNFCReadingOnly()
{
  return MGGetBoolAnswer((const char **)CFSTR("rGc8UCjL0zBt51mv81FtIg"));
}

BOOL MobileGestalt_get_deviceSupportsAdaptiveMapsUI()
{
  return MGGetBoolAnswer((const char **)CFSTR("whbsdxpLirBFgUbLH3+0JA"));
}

BOOL MobileGestalt_get_deviceSupportsAdvancedMapRendering()
{
  return MGGetBoolAnswer((const char **)CFSTR("UoeNJcQ336tc+F5/1r4tqQ"));
}

BOOL MobileGestalt_get_deviceSupportsAdvancedVoiceProcessorChatFlavor()
{
  return MGGetBoolAnswer((const char **)CFSTR("52jOwM53SViDv1B3wZIIOg"));
}

BOOL MobileGestalt_get_deviceSupportsAlmond()
{
  return MGGetBoolAnswer((const char **)CFSTR("lAu7Xt7uV5eHu3pIdfHyYA"));
}

BOOL MobileGestalt_get_deviceSupportsAlwaysListening()
{
  return MGGetBoolAnswer((const char **)CFSTR("U+73bmG4kBGj6kpreQXUTQ"));
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnCompass()
{
  return MGGetBoolAnswer((const char **)CFSTR("aCQx2Qq/TChnNAq1rr6Egw"));
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnDisplay()
{
  return MGGetBoolAnswer((const char **)CFSTR("2OOJf1VhaM7NxfRok3HbWQ"));
}

BOOL MobileGestalt_get_deviceSupportsAlwaysOnDisplayFlipbook()
{
  return MGGetBoolAnswer((const char **)CFSTR("aoJSd/MXk7M40NgXTM6x+g"));
}

BOOL MobileGestalt_get_deviceSupportsAppleLPM()
{
  return MGGetBoolAnswer((const char **)CFSTR("RbiXiBQAmypd3Btw3jADAw"));
}

BOOL MobileGestalt_get_deviceSupportsApplePencil()
{
  return MGGetBoolAnswer((const char **)CFSTR("yhHcB0iH0d1XzPO/CFd3ow"));
}

BOOL MobileGestalt_get_deviceSupportsAutoDim()
{
  return MGGetBoolAnswer((const char **)CFSTR("tbdNCtok0BwuLN11WwnwsQ"));
}

BOOL MobileGestalt_get_deviceSupportsAutoLowLightVideo()
{
  return MGGetBoolAnswer((const char **)CFSTR("AX/UKxSHwm+OuFRIdvNAfg"));
}

BOOL MobileGestalt_get_deviceSupportsAvatars()
{
  return MGGetBoolAnswer((const char **)CFSTR("y4GIxpQP4MO/j3wWUJdiyg"));
}

BOOL MobileGestalt_get_deviceSupportsBatteryInformation()
{
  return MGGetBoolAnswer((const char **)CFSTR("Kao6GNYdAy5hwXblxeGYJQ"));
}

BOOL MobileGestalt_get_deviceSupportsBatteryModuleAuthentication()
{
  return MGGetBoolAnswer((const char **)CFSTR("D6/BMDrlb8V3WSiqL8gL+w"));
}

BOOL MobileGestalt_get_deviceSupportsBeacon()
{
  return MGGetBoolAnswer((const char **)CFSTR("ugia43pinTp0pukSIYQ7uA"));
}

BOOL MobileGestalt_get_deviceSupportsBerkelium2()
{
  return MGGetBoolAnswer((const char **)CFSTR("wNdWl5xfBJmJGNWJr5t0zA"));
}

BOOL MobileGestalt_get_deviceSupportsBootChime()
{
  return MGGetBoolAnswer((const char **)CFSTR("QHxt+hGLaBPbQJbXiUJX3w"));
}

BOOL MobileGestalt_get_deviceSupportsBreathingDisturbancesMeasurements()
{
  return MGGetBoolAnswer((const char **)CFSTR("e0HV2blYUDBk/MsMEQACNA"));
}

BOOL MobileGestalt_get_deviceSupportsBrook()
{
  return MGGetBoolAnswer((const char **)CFSTR("TR6Z82EVZEKMVUdHfkhDmQ"));
}

BOOL MobileGestalt_get_deviceSupportsBrowserEngine()
{
  return MGGetBoolAnswer((const char **)CFSTR("FE4Tff1EICGXaI27X3P/dw"));
}

BOOL MobileGestalt_get_deviceSupportsBrowserEngineEmbedded()
{
  return MGGetBoolAnswer((const char **)CFSTR("Fe55gxpfp6SByfqjASqF5A"));
}

BOOL MobileGestalt_get_deviceSupportsCCK()
{
  return MGGetBoolAnswer((const char **)CFSTR("L47fh6KehOmR+AseqK2Xsw"));
}

BOOL MobileGestalt_get_deviceSupportsCameraCaptureOnTouchDown()
{
  return MGGetBoolAnswer((const char **)CFSTR("gQDt76Te0SPw7N8oTLrBFw"));
}

BOOL MobileGestalt_get_deviceSupportsCameraDeferredProcessing()
{
  return MGGetBoolAnswer((const char **)CFSTR("E9a3UzlfYjWEB9viQCHNAA"));
}

BOOL MobileGestalt_get_deviceSupportsCameraHaptics()
{
  return MGGetBoolAnswer((const char **)CFSTR("XriAxQ+JY1z5nt5f3ftXVw"));
}

BOOL MobileGestalt_get_deviceSupportsCarIntegration()
{
  return MGGetBoolAnswer((const char **)CFSTR("XFtUsQP3AyqT4CazSb5VCw"));
}

BOOL MobileGestalt_get_deviceSupportsCarPlay2()
{
  return MGGetBoolAnswer((const char **)CFSTR("PR+xeEtTAiUN0R25+EYGfw"));
}

BOOL MobileGestalt_get_deviceSupportsCinnamon()
{
  return MGGetBoolAnswer((const char **)CFSTR("j1pdCAYnpIEYMqIAitm3JA"));
}

BOOL MobileGestalt_get_deviceSupportsClosedLoopHaptics()
{
  return MGGetBoolAnswer((const char **)CFSTR("gqDnklGQnpv5ilgh5uHckw"));
}

BOOL MobileGestalt_get_deviceSupportsCollisionSOS()
{
  return MGGetBoolAnswer((const char **)CFSTR("HCzWusHQwZDea6nNhaKndw"));
}

BOOL MobileGestalt_get_deviceSupportsCompassOrienteering()
{
  return MGGetBoolAnswer((const char **)CFSTR("GPIs61LYNpcwZqwlFr7bbg"));
}

BOOL MobileGestalt_get_deviceSupportsConcurrentHPLPMics()
{
  return MGGetBoolAnswer((const char **)CFSTR("dI30ovtFUIeLioNQKDMbGQ"));
}

BOOL MobileGestalt_get_deviceSupportsCorrectedTemperature()
{
  return MGGetBoolAnswer((const char **)CFSTR("E0wrprlNya8gngoVpPXj2w"));
}

BOOL MobileGestalt_get_deviceSupportsCrudeProx()
{
  return MGGetBoolAnswer((const char **)CFSTR("a/mex6YNO6gJ8N8SxAA71A"));
}

BOOL MobileGestalt_get_deviceSupportsCyclingAutoStartReminders()
{
  return MGGetBoolAnswer((const char **)CFSTR("e8KVLQDfW5n4LxdE3N84Xw"));
}

BOOL MobileGestalt_get_deviceSupportsDCP()
{
  return MGGetBoolAnswer((const char **)CFSTR("IhNb6V2L1pt+hBlZMsm5FQ"));
}

BOOL MobileGestalt_get_deviceSupportsDClr()
{
  return MGGetBoolAnswer((const char **)CFSTR("XkfGVYlrkBQJgaGabHESJQ"));
}

BOOL MobileGestalt_get_deviceSupportsDisplayPort()
{
  return MGGetBoolAnswer((const char **)CFSTR("CoWnN4xo783YGn4wLrUatA"));
}

BOOL MobileGestalt_get_deviceSupportsDoNotDisturbWhileDriving()
{
  return MGGetBoolAnswer((const char **)CFSTR("Kq9K9xqDoUiUP7JEfg+pNw"));
}

BOOL MobileGestalt_get_deviceSupportsDynamicEndOfCharge()
{
  return MGGetBoolAnswer((const char **)CFSTR("drMm12aFyD64om7eXVFRVA"));
}

BOOL MobileGestalt_get_deviceSupportsDynamicEndOfChargeLegacyHW()
{
  return MGGetBoolAnswer((const char **)CFSTR("nfR1IphTGCaoFNu3NrCtWQ"));
}

BOOL MobileGestalt_get_deviceSupportsDynamicIsland()
{
  return MGGetBoolAnswer((const char **)CFSTR("YlEtTtHlNesRBMal1CqRaA"));
}

BOOL MobileGestalt_get_deviceSupportsELabel()
{
  return MGGetBoolAnswer((const char **)CFSTR("awim/yUQvLyTrKsoKhg2bA"));
}

BOOL MobileGestalt_get_deviceSupportsEUCapabilities()
{
  return MGGetBoolAnswer((const char **)CFSTR("dz7F2FFseAysXoUZqaANZw"));
}

BOOL MobileGestalt_get_deviceSupportsElton()
{
  return MGGetBoolAnswer((const char **)CFSTR("l1CWke97nbaAcWDqA6T5LA"));
}

BOOL MobileGestalt_get_deviceSupportsEnhancedAC3()
{
  return MGGetBoolAnswer((const char **)CFSTR("kyszW/uUGJFTVNQwFaf6og"));
}

BOOL MobileGestalt_get_deviceSupportsEnhancedMultitasking()
{
  return MGGetBoolAnswer((const char **)CFSTR("qeaj75wk3HF4DwQ8qbIi7g"));
}

BOOL MobileGestalt_get_deviceSupportsEnvironmentalDosimetry()
{
  return MGGetBoolAnswer((const char **)CFSTR("SaW+DA+cbiqDHrex8MTABA"));
}

BOOL MobileGestalt_get_deviceSupportsExternalHDR()
{
  return MGGetBoolAnswer((const char **)CFSTR("feC7TgoAAKLjn/KU8JAKFA"));
}

BOOL MobileGestalt_get_deviceSupportsFairPlaySecureVideoPath()
{
  return MGGetBoolAnswer((const char **)CFSTR("trBC4VS5gVmCv6Wg41Hryw"));
}

BOOL MobileGestalt_get_deviceSupportsFindApplePencil()
{
  return MGGetBoolAnswer((const char **)CFSTR("nXbrTiBAf1dbo4sCn7xs2w"));
}

BOOL MobileGestalt_get_deviceSupportsFloorCounting()
{
  return MGGetBoolAnswer((const char **)CFSTR("nK4D+jDUuTGFFwRFPC2lWg"));
}

BOOL MobileGestalt_get_deviceSupportsFrameSynchronousBrightness()
{
  return MGGetBoolAnswer((const char **)CFSTR("/oWN4fE81uA9pCW4FmD7Ug"));
}

BOOL MobileGestalt_get_deviceSupportsGenerativeModelSystems()
{
  return MGGetBoolAnswer((const char **)CFSTR("A62OafQ85EJAiiqKn4agtg"));
}

BOOL MobileGestalt_get_deviceSupportsGrey()
{
  return MGGetBoolAnswer((const char **)CFSTR("8Vbp0HyqndjWuIFZibhu7g"));
}

BOOL MobileGestalt_get_deviceSupportsHDRDeferredProcessing()
{
  return MGGetBoolAnswer((const char **)CFSTR("JkZlE8z9YwHjE1hnbMhcgA"));
}

BOOL MobileGestalt_get_deviceSupportsHDRPhotoDisplay()
{
  return MGGetBoolAnswer((const char **)CFSTR("a1r7npIrhXsZ7SmKRKC1eA"));
}

BOOL MobileGestalt_get_deviceSupportsHaptics()
{
  return MGGetBoolAnswer((const char **)CFSTR("cBy4BcYs5YWtFHbBpt4C6A"));
}

BOOL MobileGestalt_get_deviceSupportsHardwareDetents()
{
  return MGGetBoolAnswer((const char **)CFSTR("V9pLLbPQhyb75bbdTioZVw"));
}

BOOL MobileGestalt_get_deviceSupportsHeartHealthAlerts()
{
  return MGGetBoolAnswer((const char **)CFSTR("H+r3Nk8ByXIY9ub/M8broA"));
}

BOOL MobileGestalt_get_deviceSupportsHeartRateVariability()
{
  return MGGetBoolAnswer((const char **)CFSTR("/Oajtq8qODrC4XBBOULF3A"));
}

BOOL MobileGestalt_get_deviceSupportsHiResBuildings()
{
  return MGGetBoolAnswer((const char **)CFSTR("MjqwTHDneTCNeqhZ7vCvUw"));
}

BOOL MobileGestalt_get_deviceSupportsIndependentOutputOnSpeaker()
{
  return MGGetBoolAnswer((const char **)CFSTR("6VRApe6L2vc1r2s+xts9/w"));
}

BOOL MobileGestalt_get_deviceSupportsInductiveCharging()
{
  return MGGetBoolAnswer((const char **)CFSTR("s7nuHoZIYNoOHCqT9iyZkQ"));
}

BOOL MobileGestalt_get_deviceSupportsLaguna()
{
  return MGGetBoolAnswer((const char **)CFSTR("s8TgWYc7BjtSNbtuycqauw"));
}

BOOL MobileGestalt_get_deviceSupportsLandscapeFaceID()
{
  return MGGetBoolAnswer((const char **)CFSTR("eP/CPXY0Q1CoIqAWn/J97g"));
}

BOOL MobileGestalt_get_deviceSupportsLanguageDownloadUI()
{
  return MGGetBoolAnswer((const char **)CFSTR("TACCxk6y28d14yJN09RtTg"));
}

BOOL MobileGestalt_get_deviceSupportsLiDAR()
{
  return MGGetBoolAnswer((const char **)CFSTR("8bCjks0zVuOcdivIhytNbQ"));
}

BOOL MobileGestalt_get_deviceSupportsLineIn()
{
  return MGGetBoolAnswer((const char **)CFSTR("Mgwtle8wzQEz/0vzBk47FQ"));
}

BOOL MobileGestalt_get_deviceSupportsLiquidDetectionCorrosionMitigation()
{
  return MGGetBoolAnswer((const char **)CFSTR("XxnEk9uiIk5vCdbWEGt7lA"));
}

BOOL MobileGestalt_get_deviceSupportsLiveActivities()
{
  return MGGetBoolAnswer((const char **)CFSTR("e4ZSDal1Fg7QfCA7rlNmSQ"));
}

BOOL MobileGestalt_get_deviceSupportsLivePhotoAuto()
{
  return MGGetBoolAnswer((const char **)CFSTR("pQzfsK0Ado+nkNFgPRIA8Q"));
}

BOOL MobileGestalt_get_deviceSupportsLiveVideoRendering()
{
  return MGGetBoolAnswer((const char **)CFSTR("xqvkN8MjIzTv37omKFzrwg"));
}

BOOL MobileGestalt_get_deviceSupportsLockdown()
{
  return MGGetBoolAnswer((const char **)CFSTR("7ZipyD32hkjOUTl66Q8REw"));
}

BOOL MobileGestalt_get_deviceSupportsLongFormAudio()
{
  return MGGetBoolAnswer((const char **)CFSTR("tBrEf4ccS4Q6wtUiNB0WKw"));
}

BOOL MobileGestalt_get_deviceSupportsLowLatency()
{
  return MGGetBoolAnswer((const char **)CFSTR("1CFbwvaGHR/89vDu2VjnpQ"));
}

BOOL MobileGestalt_get_deviceSupportsLowPowerSoundClassification()
{
  return MGGetBoolAnswer((const char **)CFSTR("V0d6pv080gHL3QQWNs9aog"));
}

BOOL MobileGestalt_get_deviceSupportsMTP()
{
  return MGGetBoolAnswer((const char **)CFSTR("68eiAurB2LJ96Vz/CzaAcA"));
}

BOOL MobileGestalt_get_deviceSupportsMapsBlurredUI()
{
  return MGGetBoolAnswer((const char **)CFSTR("5y8gwXr/HXkhryza4xQeFg"));
}

BOOL MobileGestalt_get_deviceSupportsMapsOpticalHeading()
{
  return MGGetBoolAnswer((const char **)CFSTR("nJU6/TSuJTVJlJ7t5/Z/ug"));
}

BOOL MobileGestalt_get_deviceSupportsMomentCapture()
{
  return MGGetBoolAnswer((const char **)CFSTR("DtSpvgyOyNVwNa5W0zigqg"));
}

BOOL MobileGestalt_get_deviceSupportsMultiUser()
{
  return MGGetBoolAnswer((const char **)CFSTR("il2TbGC66RCTKaEgSOVlgQ"));
}

BOOL MobileGestalt_get_deviceSupportsNFC()
{
  return MGGetBoolAnswer((const char **)CFSTR("byGRtH44VNik9CzN/QKLCw"));
}

BOOL MobileGestalt_get_deviceSupportsNavigation()
{
  return MGGetBoolAnswer((const char **)CFSTR("ee9YfVjjsbVte45bYSt4Wg"));
}

BOOL MobileGestalt_get_deviceSupportsNewton()
{
  return MGGetBoolAnswer((const char **)CFSTR("nAl8QWlApaJQkipRf38fdg"));
}

BOOL MobileGestalt_get_deviceSupportsOnDemandPhotoAnalysis()
{
  return MGGetBoolAnswer((const char **)CFSTR("ik8OQ5JoYhyK8AoTx29MuA"));
}

BOOL MobileGestalt_get_deviceSupportsP3ColorspaceVideoRecording()
{
  return MGGetBoolAnswer((const char **)CFSTR("1eBwtCIwbIDdC80wiyzfow"));
}

BOOL MobileGestalt_get_deviceSupportsPeriodicALSUpdates()
{
  return MGGetBoolAnswer((const char **)CFSTR("Leuy56dCZmAMYoVCQGTfPA"));
}

BOOL MobileGestalt_get_deviceSupportsPhotosInpainting()
{
  return MGGetBoolAnswer((const char **)CFSTR("XNCjqOupLM/S8fNyxRNQTA"));
}

BOOL MobileGestalt_get_deviceSupportsPhotosLocalLight()
{
  return MGGetBoolAnswer((const char **)CFSTR("m9ORTKMgu9A+zF+A61Zz5A"));
}

BOOL MobileGestalt_get_deviceSupportsPortraitIntensityAdjustments()
{
  return MGGetBoolAnswer((const char **)CFSTR("L8CqbJeM+rf7l7NSOjnAHg"));
}

BOOL MobileGestalt_get_deviceSupportsPortraitLightEffectFilters()
{
  return MGGetBoolAnswer((const char **)CFSTR("hewg+QX1h57eGJGphdCong"));
}

BOOL MobileGestalt_get_deviceSupportsRGB10()
{
  return MGGetBoolAnswer((const char **)CFSTR("hOkus/A6lBEF6Ar3jV7LrQ"));
}

BOOL MobileGestalt_get_deviceSupportsRaiseToSpeak()
{
  return MGGetBoolAnswer((const char **)CFSTR("4D8XW4YwJI7QvyPhv1TEdw"));
}

BOOL MobileGestalt_get_deviceSupportsReverseZoom()
{
  return MGGetBoolAnswer((const char **)CFSTR("sQwlfROu8fcD1Qwm8YJVeg"));
}

uint64_t MobileGestalt_get_deviceSupportsSWProRes(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("oWUSugFxOVhHOKYv7DawLw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7107C4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceSupportsScandium()
{
  return MGGetBoolAnswer((const char **)CFSTR("eXzS2kvF8nNOI/xIJKquHg"));
}

BOOL MobileGestalt_get_deviceSupportsSecureDoubleClick()
{
  return MGGetBoolAnswer((const char **)CFSTR("DoMjIR2qPkxXtP/kDu/gfQ"));
}

BOOL MobileGestalt_get_deviceSupportsSecureMicrophone()
{
  return MGGetBoolAnswer((const char **)CFSTR("7UhDrmrZozgwO+3AgUbHxw"));
}

BOOL MobileGestalt_get_deviceSupportsSiDP()
{
  return MGGetBoolAnswer((const char **)CFSTR("q69vauqK9djnPlEZBFBV4A"));
}

BOOL MobileGestalt_get_deviceSupportsSideButtonClickSpeed()
{
  return MGGetBoolAnswer((const char **)CFSTR("Bg8VW4HdQj+GVY+191T3nQ"));
}

BOOL MobileGestalt_get_deviceSupportsSimplisticRoadMesh()
{
  return MGGetBoolAnswer((const char **)CFSTR("ChBMzkxYdT9Xmw3QN5kMWA"));
}

BOOL MobileGestalt_get_deviceSupportsSingleCameraPortrait()
{
  return MGGetBoolAnswer((const char **)CFSTR("FymLPtOEy6FdE7TmKeoTdg"));
}

BOOL MobileGestalt_get_deviceSupportsSingleDisplayEnhancedMultitasking()
{
  return MGGetBoolAnswer((const char **)CFSTR("fbpzGGoBNcvDLt4LlZGnfA"));
}

BOOL MobileGestalt_get_deviceSupportsSiriBargeIn()
{
  return MGGetBoolAnswer((const char **)CFSTR("WXi7NQbOKnEX4vPQFeZAdQ"));
}

BOOL MobileGestalt_get_deviceSupportsSiriHub()
{
  return MGGetBoolAnswer((const char **)CFSTR("waGD2UTpntjbDXD1r3oALQ"));
}

BOOL MobileGestalt_get_deviceSupportsSiriSpeaks()
{
  return MGGetBoolAnswer((const char **)CFSTR("PTQ+ABwag03BwO/CKvIK/A"));
}

BOOL MobileGestalt_get_deviceSupportsSiriSpokenMessages()
{
  return MGGetBoolAnswer((const char **)CFSTR("0AJUv/uYPsRiZNGpWJ7zfg"));
}

uint64_t MobileGestalt_get_deviceSupportsSiriUnderstandingOnDevice(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("K/R1GfGfCkXvEhaPS2Vrng"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710834(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_deviceSupportsSpatialFaceTimeAudioPlayback()
{
  return MGGetBoolAnswer((const char **)CFSTR("/EVOCjM/Nmb2roP5ebtEFA"));
}

BOOL MobileGestalt_get_deviceSupportsSpatialOverCapture()
{
  return MGGetBoolAnswer((const char **)CFSTR("SjQQ07G8UacM7E69G7dPbg"));
}

BOOL MobileGestalt_get_deviceSupportsStageLightPortraitPreview()
{
  return MGGetBoolAnswer((const char **)CFSTR("IMUksyctl4kC/BFI2K/Qyw"));
}

BOOL MobileGestalt_get_deviceSupportsStereoAudioRecording()
{
  return MGGetBoolAnswer((const char **)CFSTR("YlK+0xmxNWhNn/+r8SM8kA"));
}

BOOL MobileGestalt_get_deviceSupportsStudioLightPortraitPreview()
{
  return MGGetBoolAnswer((const char **)CFSTR("oLjiDs+BWEdMVbjE0x6cnw"));
}

BOOL MobileGestalt_get_deviceSupportsSwimmingWorkouts()
{
  return MGGetBoolAnswer((const char **)CFSTR("cRjPy4Ef+KZwJ+nfPeBV5Q"));
}

BOOL MobileGestalt_get_deviceSupportsTVContinuityCamera()
{
  return MGGetBoolAnswer((const char **)CFSTR("5hfTRTYOuOthOyRny6a38w"));
}

BOOL MobileGestalt_get_deviceSupportsTapToWake()
{
  return MGGetBoolAnswer((const char **)CFSTR("yZf3GTRMGTuwSV/lD7Cagw"));
}

BOOL MobileGestalt_get_deviceSupportsTelephonyOverUSB()
{
  return MGGetBoolAnswer((const char **)CFSTR("YiUtBQygkHRhLcdO3LFB4A"));
}

BOOL MobileGestalt_get_deviceSupportsTethering()
{
  return MGGetBoolAnswer((const char **)CFSTR("xSh3mf5+Zuoz6xhxEah0zQ"));
}

BOOL MobileGestalt_get_deviceSupportsThunderbolt()
{
  return MGGetBoolAnswer((const char **)CFSTR("4ec+Q3FdQ1N0HeNpOPsmfA"));
}

BOOL MobileGestalt_get_deviceSupportsTimeInDaylight()
{
  return MGGetBoolAnswer((const char **)CFSTR("8gVfz9/8R1OtWBBtI0o/+Q"));
}

BOOL MobileGestalt_get_deviceSupportsToneMapping()
{
  return MGGetBoolAnswer((const char **)CFSTR("Lcu6Zck+C/+AMO8qULacDw"));
}

BOOL MobileGestalt_get_deviceSupportsTwilight()
{
  return MGGetBoolAnswer((const char **)CFSTR("1Bk5Dr0hTb0bYXl04068MQ"));
}

BOOL MobileGestalt_get_deviceSupportsUSBTypeC()
{
  return MGGetBoolAnswer((const char **)CFSTR("BWoQXWXYITrPRpFyc9xTLw"));
}

BOOL MobileGestalt_get_deviceSupportsUSBTypeCDisplay()
{
  return MGGetBoolAnswer((const char **)CFSTR("khE304sL66yzf7K+2e+0cw"));
}

BOOL MobileGestalt_get_deviceSupportsUnconditionalPluckItCollection()
{
  return MGGetBoolAnswer((const char **)CFSTR("1N37hGont/jibw4G2hwdRg"));
}

UInt8 *MobileGestalt_copy_deviceSupportsVSHCompensation()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("QuSuh/r6w4M730U5XhKzrg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x22217952uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_deviceSupportsVSHCompensation_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("QuSuh/r6w4M730U5XhKzrg"));
}

BOOL MobileGestalt_get_deviceSupportsVirtualResearchEnvironment()
{
  return MGGetBoolAnswer((const char **)CFSTR("YAbRmHobt+BRHuSPm2OGQw"));
}

BOOL MobileGestalt_get_deviceSupportsVoiceOverCanUseSiriVoice()
{
  return MGGetBoolAnswer((const char **)CFSTR("tbBVomzeDyPq15QV5VGQGg"));
}

BOOL MobileGestalt_get_deviceSupportsWalkingRadiusAnimation()
{
  return MGGetBoolAnswer((const char **)CFSTR("X5yfJDYNipZXIS8R2a7RmA"));
}

BOOL MobileGestalt_get_deviceSupportsWatchSpeakerPlayback()
{
  return MGGetBoolAnswer((const char **)CFSTR("rJl1HTk57uav5OTZZAyc6g"));
}

BOOL MobileGestalt_get_deviceSupportsWebkit()
{
  return MGGetBoolAnswer((const char **)CFSTR("sJmYs82RucA1MWX5jHFSjA"));
}

BOOL MobileGestalt_get_deviceSupportsWirelessChargingEnergyUseNotification()
{
  return MGGetBoolAnswer((const char **)CFSTR("FLmEtGw+OD98VLXasx7W6A"));
}

BOOL MobileGestalt_get_deviceSupportsWirelessSplitting()
{
  return MGGetBoolAnswer((const char **)CFSTR("2zyzecwSf2ZYRpB3tuQhOQ"));
}

BOOL MobileGestalt_get_deviceSupportsYCbCr10()
{
  return MGGetBoolAnswer((const char **)CFSTR("v2Q3tLoD4+o/XazHC/0FyA"));
}

BOOL MobileGestalt_get_deviceSupportseARC()
{
  return MGGetBoolAnswer((const char **)CFSTR("K57p2Tit1BlJ8rFbLl/Nqg"));
}

char *MobileGestalt_copy_deviceVariant()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("SvI9oDkzw4XJFd+dKen/2Q"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceVariant_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("SvI9oDkzw4XJFd+dKen/2Q"));
}

char *MobileGestalt_copy_deviceVariantGuess()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("IMLaTlxS7ITtwfbRfPYWuA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_deviceVariantGuess_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("IMLaTlxS7ITtwfbRfPYWuA"));
}

UInt8 *MobileGestalt_copy_diagData()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("67x5O+zO+JwnGgmKlq+qdA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xF9612B8FuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_diagData_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("67x5O+zO+JwnGgmKlq+qdA"));
}

BOOL MobileGestalt_get_dictationCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("1uZbhSbBhsNCsVSsopZ4qg"));
}

uint64_t MobileGestalt_get_dieId(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("Z/TJS0IaLyq10dcSvUTGPg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7108A4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

const void *MobileGestalt_copy_diskUsage_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("uyejyEdaxNWSRQQwHmXz1A"));
}

uint64_t MobileGestalt_get_displayBootRotation(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("m7lDS+oP8q0pGg+CO7RvPg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710914(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_displayDriverICChipID()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("yPqGUljqvtItkM6XMCZaQw"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x51DC235FuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_displayDriverICChipID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("yPqGUljqvtItkM6XMCZaQw"));
}

BOOL MobileGestalt_get_displayFCCLogosViaSoftwareCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ueuuYQk48HGWm/cJlHq/Dw"));
}

uint64_t MobileGestalt_get_displayInactiveBrightnessClass(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("Z+gc4OJwBMm2YaVtp4usig"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710984(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_displayMaxNits(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("awLQ2KgwSTZswuKgSSjmEQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7109F4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_displayMirroringCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("iFOX66VmcijipO3YRc+AXg"));
}

BOOL MobileGestalt_get_displayPortCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("vl45ziHlkqzh1Yt6+M9vBA"));
}

BOOL MobileGestalt_get_dualSIMActivationPolicyCapable()
{
  return MGGetBoolAnswer((const char **)CFSTR("jkr5aFPOh/d6zTzNKYthBw"));
}

char *MobileGestalt_copy_dynamicFunctionRowSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("Bb01MNJ0ezfSmzucKZXrsg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_dynamicFunctionRowSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Bb01MNJ0ezfSmzucKZXrsg"));
}

uint64_t MobileGestalt_get_eOSHalleyConfiguration(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("bt5D9RI67C9koJO1oZ5cfg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710A64(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_eUICCChipID(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("qWG594bTi87edQCSYxlLeA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710AD4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_effectiveProductionStatusAp()
{
  return MGGetBoolAnswer((const char **)CFSTR("AQiIpW0UeYQKnhy2da7AXg"));
}

BOOL MobileGestalt_get_effectiveProductionStatusSEP()
{
  return MGGetBoolAnswer((const char **)CFSTR("PNexcW/LBlPgAm+Skp2EAg"));
}

BOOL MobileGestalt_get_effectiveSecurityModeAp()
{
  return MGGetBoolAnswer((const char **)CFSTR("vENa/R1xAXLobl8r3PBL6w"));
}

BOOL MobileGestalt_get_effectiveSecurityModeSEP()
{
  return MGGetBoolAnswer((const char **)CFSTR("QJSuJ2zhdxYX/7DUA2JtUw"));
}

BOOL MobileGestalt_get_encodeAACCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("fqNtLlgbYfa9gSNrhg7VGQ"));
}

BOOL MobileGestalt_get_encryptedDataPartitionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("i8+iwUtLtB5jT+WNvqwrEA"));
}

BOOL MobileGestalt_get_enforceCameraShutterClick()
{
  return MGGetBoolAnswer((const char **)CFSTR("xJUG7IKySthRrPcxII184g"));
}

BOOL MobileGestalt_get_enforceGoogleMail()
{
  return MGGetBoolAnswer((const char **)CFSTR("Js8HVdVGRs8m5v94pMjkRw"));
}

BOOL MobileGestalt_get_ephemeralDataModeEnabled()
{
  return MGGetBoolAnswer((const char **)CFSTR("sNm4HYxfChAt48rf54qAyQ"));
}

const void *MobileGestalt_copy_ephemeralDataModeOverride_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("mx9l9PlJACEcOixUVDZEjg"));
}

char *MobileGestalt_copy_ethernetMacAddress()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("VG9TCKNqNLCHk0J6zTkuVQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_ethernetMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("VG9TCKNqNLCHk0J6zTkuVQ"));
}

BOOL MobileGestalt_get_exclaveCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("oAX1wYJl2iL3BX2G9LA7iw"));
}

BOOL MobileGestalt_get_explicitContentRestriction()
{
  return MGGetBoolAnswer((const char **)CFSTR("AthxlkPBk46HtzM9AxK9vg"));
}

char *MobileGestalt_copy_extendedLOMMacAddress()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("WAfNjeiwOd/k6+VU6D6SIQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_extendedLOMMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("WAfNjeiwOd/k6+VU6D6SIQ"));
}

uint64_t MobileGestalt_get_extendedSecurityDomain(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("9uRuEueUQZFyet0P69AWMw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710B44(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_externalChargeCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("NPzjaX07XnS4KcMZ+l8ymA"));
}

BOOL MobileGestalt_get_externalPowerSourceConnected()
{
  return MGGetBoolAnswer((const char **)CFSTR("na6PSBfq05lkAfWkwAwaGg"));
}

BOOL MobileGestalt_get_fdrSealingStatus()
{
  return MGGetBoolAnswer((const char **)CFSTR("VHTcx7WQq0V7YgGKZisRWA"));
}

BOOL MobileGestalt_get_fmfallowed()
{
  return MGGetBoolAnswer((const char **)CFSTR("Y2Y67z0Nq/XdDXgW2EeaVg"));
}

uint64_t MobileGestalt_get_facetimeBackCameraTemporalNoiseReductionMode(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("JXmZWYUbLoumvz7hu/GL0A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710BB4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_facetimeBitRate2G(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("Nhm02nvVOaQPimpOshlO1g"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710C24(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_facetimeBitRate3G(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("1rf3rZXIZFgznqrHlPehuQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710C94(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_facetimeBitRateLTE(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("xunfK8NYNCS75N2z2buKWQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710D04(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_facetimeBitRateWiFi(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("h8xonkkn/NzDMvvCXLw8cQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710D74(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_facetimeCameraRequiresFastSwitchOptions()
{
  return MGGetBoolAnswer((const char **)CFSTR("J912s3mVzhReVtPv4HwqNQ"));
}

BOOL MobileGestalt_get_facetimeCameraSupportsHardwareFaceDetection()
{
  return MGGetBoolAnswer((const char **)CFSTR("Po0s2Vf6g2ZqymKGNLFxeQ"));
}

const void *MobileGestalt_copy_facetimeDecodings_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("yl8qmYPdAhFLeDBho10sdQ"));
}

const void *MobileGestalt_copy_facetimeEncodings_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("BoNz1QXiAEUgic9RdMVLIg"));
}

uint64_t MobileGestalt_get_facetimeFrontCameraTemporalNoiseReductionMode(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("CK3I7fFGkgeqzKEhGew9rQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710DE4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_facetimePhotosOptIn()
{
  return MGGetBoolAnswer((const char **)CFSTR("4RgFi8v1sfuhCZhRdQkxxQ"));
}

const void *MobileGestalt_copy_facetimePreferredDecoding_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("APeknA55ZAcu0FcufqVN4Q"));
}

const void *MobileGestalt_copy_facetimePreferredEncoding_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ct5Dh6u0D6WDJKg2PrMFVQ"));
}

UInt8 *MobileGestalt_copy_firmwareNonce()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("VLfT+eziZYKNjRASM6ntnQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xC8705988uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_firmwareNonce_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("VLfT+eziZYKNjRASM6ntnQ"));
}

const void *MobileGestalt_copy_firmwarePreflightInfo_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("qOwiNS0eFEq9oi3MNsgxWg"));
}

char *MobileGestalt_copy_firmwareVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("LeSRsiLoJCMhjn6nd6GWbQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_firmwareVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("LeSRsiLoJCMhjn6nd6GWbQ"));
}

const void *MobileGestalt_copy_firstPartyLaunchTimeLimitScale_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("NUYAz1eq3Flzt7ZQxXC/ng"));
}

BOOL MobileGestalt_get_forwardCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("H97G3GzDYb4wY5kwJ0AKfQ"));
}

char *MobileGestalt_copy_framebufferIdentifier()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("xojWvSTQWT7Icy+xfVzjAQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_framebufferIdentifier_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("xojWvSTQWT7Icy+xfVzjAQ"));
}

const void *MobileGestalt_copy_frontCameraOffsetFromDisplayCenter_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("uksZ8eaKeV5sUpLNBPafww"));
}

uint64_t MobileGestalt_get_frontCameraRotationForISP(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("dQf5OObttLFgJniqrS19qA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710E54(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

const void *MobileGestalt_copy_frontCameraRotationFromDisplayNormal_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("g5LBi+DCiP5+jUnWVL7Y9w"));
}

BOOL MobileGestalt_get_frontFacingCameraAutoHDRCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("fv8ZXM/NhUHQBQqCSk19cA"));
}

BOOL MobileGestalt_get_frontFacingCameraBurstCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("Ty5/C8UDfdjcdR853kulmA"));
}

BOOL MobileGestalt_get_frontFacingCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("mAAbkChrX3bpxPIffHG1BQ"));
}

BOOL MobileGestalt_get_frontFacingCameraHDRCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("7W2eNk/f6uewC8N58mlRrQ"));
}

BOOL MobileGestalt_get_frontFacingCameraHDROnCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("HnHX0gXt8RvhMQzIVMM7hw"));
}

BOOL MobileGestalt_get_frontFacingCameraHFRCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("1gsBzuZsXu2rXZJBE01M0w"));
}

uint64_t MobileGestalt_get_frontFacingCameraHFRVideoCapture1080PMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("mL1lk3ZVGDFUQhxU9YLW6Q"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710EC4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_frontFacingCameraHFRVideoCapture720PMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("TqAfAH10ANDgiG7V2u8BkQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710F34(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_frontFacingCameraMaxVideoZoomFactor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("ZeGw3VKUymUAbp4noKsxoQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B710FA4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_frontFacingCameraModuleSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("qlcdNkarcGLcbW3HvBhwaA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_frontFacingCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("qlcdNkarcGLcbW3HvBhwaA"));
}

BOOL MobileGestalt_get_frontFacingCameraSingleCameraPortrait()
{
  return MGGetBoolAnswer((const char **)CFSTR("fYsrGTmVTbneEs3HKetEdQ"));
}

BOOL MobileGestalt_get_frontFacingCameraStageLightPortraitCaptureCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ocYC+NyuthjbvU9CyI4Z8Q"));
}

uint64_t MobileGestalt_get_frontFacingCameraStillDurationForBurst(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("TDM8SEI14n2KE9PGHO0a4A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711014(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_frontFacingCameraSuperWideCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("fI93k3j19qMaEqYkKKI7BQ"));
}

BOOL MobileGestalt_get_frontFacingCameraVariableFrameRateCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("THo7EIAWJiQExmTeHpevLg"));
}

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture1080PMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("3yzXj0lJhQi+r3kgQlwiOg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711084(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture4KMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("cux58RcuSiBhpxWnT3pE4A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7110F4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_frontFacingCameraVideoCapture720PMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("0AFeHRmliNJ4pSlVb8ltZA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711164(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_frontFacingIRCameraModuleSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("2kuITg6XPwXl8zbpx+hoCw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_frontFacingIRCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("2kuITg6XPwXl8zbpx+hoCw"));
}

char *MobileGestalt_copy_frontFacingIRStructuredLightProjectorModuleSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("wH7fRq4TDdYG2pN1KDQW/A"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_frontFacingIRStructuredLightProjectorModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("wH7fRq4TDdYG2pN1KDQW/A"));
}

BOOL MobileGestalt_get_frontFacingLowLightCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ud+MF+BkcM1zeTxPJCsHpg"));
}

BOOL MobileGestalt_get_full6FeaturesCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("fW9C1U4C1FR8bwe1VqEWug"));
}

BOOL MobileGestalt_get_gpsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ZiSlYxYSkyaYImU3lrSXWw"));
}

char *MobileGestalt_copy_gsDeviceName()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("9s45ldrCC1WF+7b6C4H2BA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_gsDeviceName_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("9s45ldrCC1WF+7b6C4H2BA"));
}

BOOL MobileGestalt_get_gameKitCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("guykxGaRwHdenUK8fJRl8w"));
}

BOOL MobileGestalt_get_gasGaugeBatteryCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("FOs+LbLUs+TajsEE4xkbrw"));
}

BOOL MobileGestalt_get_generativeModelSystemsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("I3lidq+FVH2CeOi/ARa0tg"));
}

BOOL MobileGestalt_get_greenTeaDeviceCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("iyfxmLogGVIaH7aEgqwcIA"));
}

BOOL MobileGestalt_get_groundhogEnabled()
{
  return MGGetBoolAnswer((const char **)CFSTR("Knrkxkj5zZTf/FrPNQClgg"));
}

BOOL MobileGestalt_get_gyroscopeCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("4+qmMh9JBDh72Nq6fD64RQ"));
}

BOOL MobileGestalt_get_h264EncoderCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("SCNOHu+KqRX0xhIlj5KXaA"));
}

BOOL MobileGestalt_get_hdRImageCaptureCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("fh6DnnDGDVZ5kZ9nYn/GrQ"));
}

BOOL MobileGestalt_get_hdVideoCaptureCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("6pjDdEw65TFyL1FmIdszXw"));
}

BOOL MobileGestalt_get_hevcDecoder10BitSupported()
{
  return MGGetBoolAnswer((const char **)CFSTR("ZEU7pCEskBhjQ4AOMuALDw"));
}

BOOL MobileGestalt_get_hevcDecoder12BitSupported()
{
  return MGGetBoolAnswer((const char **)CFSTR("sigsyX/a/CpMjoZnrgwIgg"));
}

BOOL MobileGestalt_get_hevcDecoder8BitSupported()
{
  return MGGetBoolAnswer((const char **)CFSTR("N8lZxRgC7lfdRS3dRLn+Ag"));
}

BOOL MobileGestalt_get_hevcEncodingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("g/MkWm2Ac6+TLNBgtBGxsg"));
}

char *MobileGestalt_copy_hwModelStr()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("/YYygAofPDbhrwToVsXdeA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_hwModelStr_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("/YYygAofPDbhrwToVsXdeA"));
}

BOOL MobileGestalt_get_hallEffectSensorCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("/Pop5T2XQdDA60MRyxQJdQ"));
}

uint64_t MobileGestalt_get_hapticsPowerControlFeatures(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("s2qnnwugvb7yAD70+Uho7g"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7111D4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_hardwareEncodeSnapshotsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("m+FD6mX8VZzP95hOhM+jow"));
}

BOOL MobileGestalt_get_hardwareKeyboardCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("/GK+yfRFY/b5ZDIDpdVImg"));
}

char *MobileGestalt_copy_hardwarePlatform()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("5pYKlGnYYBzGvAlIU8RjEQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_hardwarePlatform_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("5pYKlGnYYBzGvAlIU8RjEQ"));
}

BOOL MobileGestalt_get_hardwareSnapshotsRequirePurpleGfxCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("FDsm68UVR7l3wErusGLgKg"));
}

BOOL MobileGestalt_get_hardwareSupportsSecureDoubleClick()
{
  return MGGetBoolAnswer((const char **)CFSTR("l3rf7ZBrcaYn5mY5o7xiIg"));
}

BOOL MobileGestalt_get_hasAllFeaturesCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("QGmb9t2ZMFVwOImO6fewgQ"));
}

BOOL MobileGestalt_get_hasAppleNeuralEngine()
{
  return MGGetBoolAnswer((const char **)CFSTR("+N9mZUAHooNvMiQnjeTJ8g"));
}

BOOL MobileGestalt_get_hasBaseband()
{
  return MGGetBoolAnswer((const char **)CFSTR("AJFQheZDyUbvI6RmBMT9Cg"));
}

BOOL MobileGestalt_get_hasBattery()
{
  return MGGetBoolAnswer((const char **)CFSTR("pX2TxZTxWKS7QSXZDC/Z6A"));
}

BOOL MobileGestalt_get_hasDaliMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("3m1Q0AXlqeA2C/LmqdTndQ"));
}

BOOL MobileGestalt_get_hasHighBandwidthRadio()
{
  return MGGetBoolAnswer((const char **)CFSTR("IMZVdlDQXGM67ILcDE7hlA"));
}

BOOL MobileGestalt_get_hasIcefall()
{
  return MGGetBoolAnswer((const char **)CFSTR("v9YZN998zL0OLA3q6SpPQA"));
}

BOOL MobileGestalt_get_hasInternalSettingsBundle()
{
  return MGGetBoolAnswer((const char **)CFSTR("Oji6HRoPi7rH7HPdWVakuw"));
}

BOOL MobileGestalt_get_hasMesa()
{
  return MGGetBoolAnswer((const char **)CFSTR("HV7WDiidgMf7lwAu++Lk5w"));
}

BOOL MobileGestalt_get_hasPKA()
{
  return MGGetBoolAnswer((const char **)CFSTR("fkWvcjYnYzGRhVKiBoYzgA"));
}

BOOL MobileGestalt_get_hasPartiallyOccludedDisplay()
{
  return MGGetBoolAnswer((const char **)CFSTR("yf309VokHnvuZ4SyOixR5A"));
}

BOOL MobileGestalt_get_hasSEP()
{
  return MGGetBoolAnswer((const char **)CFSTR("7DfjbzhvH/GDkhio1dv8fA"));
}

BOOL MobileGestalt_get_hasSpringBoard()
{
  return MGGetBoolAnswer((const char **)CFSTR("OBqqs000I0SR+EbJ7VO8UQ"));
}

BOOL MobileGestalt_get_hasThinBezel()
{
  return MGGetBoolAnswer((const char **)CFSTR("RA3I5nhSK65i1ZxkRxQKfg"));
}

BOOL MobileGestalt_get_healthKitCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("xDg5n/9rR2cMhp7MK0irBA"));
}

BOOL MobileGestalt_get_hearingAidAudioEqualizationCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("SMgTCc2v9AU2ziIHRX8qww"));
}

BOOL MobileGestalt_get_hearingAidLowEnergyAudioCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("RyXm3yMC4ejlFvwlEI509w"));
}

BOOL MobileGestalt_get_hearingAidPowerReductionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("u3c0R+31Df4SUTHrICQkTg"));
}

BOOL MobileGestalt_get_hidpiCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("lSpe1QHIya0aeNrjLTtaJA"));
}

float MobileGestalt_get_hiccoughInterval(void *a1)
{
  id v1;
  const void *v2;
  const void *v3;
  CFTypeID v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  v1 = a1;
  valuePtr = -1082130432;
  v2 = MGCopyAnswer((const char **)CFSTR("f8peylp799CJta4Ev/vz8A"));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B711244(v5, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_hideNonDefaultApplicationsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("cHla4KIe1wv0OvpRVrzy/w"));
}

uint64_t MobileGestalt_get_highestSupportedVideoMode(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("ND6ZSbBBgMgwtMfh+OL5Wg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7112B4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_homeButtonType(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("JwLB44/jEB8aFDpXQ16Tuw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711324(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_homeScreenWallpaperCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("mVenV0u+B3ShrqRddinaFQ"));
}

BOOL MobileGestalt_get_horsemanCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("X9cK3qXzcFCrVpE258P2lQ"));
}

char *MobileGestalt_copy_humanReadableProductVersionString()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("ToLFRidm+eJGWnpw6W4Wwg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_humanReadableProductVersionString_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ToLFRidm+eJGWnpw6W4Wwg"));
}

BOOL MobileGestalt_get_idamCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("QdL5XM6PGBrjvJ/k187Ueg"));
}

BOOL MobileGestalt_get_iOSurfaceBackedImagesCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("0/2HluYMd/whD80Hua4Rpw"));
}

const void *MobileGestalt_copy_iOSurfaceFormatDictionary_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("AoKnINTLPoKML3ctoP0AZg"));
}

char *MobileGestalt_copy_iceFallID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("hfs43coKE3iWlCwnqPgBpg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_iceFallID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("hfs43coKE3iWlCwnqPgBpg"));
}

BOOL MobileGestalt_get_icefallInRestrictedMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("2sWGezz2RezScIJJgiIYQg"));
}

UInt8 *MobileGestalt_copy_icefallInfo()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("MW1p1oJH8nDJc6igOb8G4g"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x777C3AC0uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_icefallInfo_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("MW1p1oJH8nDJc6igOb8G4g"));
}

char *MobileGestalt_copy_image4CryptoHashMethod()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("Nzu4E/VsXjEIa83CkRdZrQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_image4CryptoHashMethod_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Nzu4E/VsXjEIa83CkRdZrQ"));
}

BOOL MobileGestalt_get_image4Supported()
{
  return MGGetBoolAnswer((const char **)CFSTR("kyxFFGn+VS4L9a/bsvm19Q"));
}

BOOL MobileGestalt_get_inDiagnosticsMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("3kmXfug8VcxLI5yEmsqQKw"));
}

char *MobileGestalt_copy_integratedCircuitCardIdentifier()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("j4dedPnpeXouudM1+j3dsQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_integratedCircuitCardIdentifier_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("j4dedPnpeXouudM1+j3dsQ"));
}

char *MobileGestalt_copy_integratedCircuitCardIdentifier2()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("lHMDJnC58naUz2rOCJyVIw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_integratedCircuitCardIdentifier2_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("lHMDJnC58naUz2rOCJyVIw"));
}

BOOL MobileGestalt_get_internalBuild()
{
  return MGGetBoolAnswer((const char **)CFSTR("LBJfwOEzExRxzlAnSuI7eg"));
}

char *MobileGestalt_copy_internationalMobileEquipmentIdentity()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("QZgogo2DypSAZfkRW4dP/A"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_internationalMobileEquipmentIdentity_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("QZgogo2DypSAZfkRW4dP/A"));
}

char *MobileGestalt_copy_internationalMobileEquipmentIdentity2()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("xRyzf9zFE/ycr/wJPweZvQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_internationalMobileEquipmentIdentity2_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("xRyzf9zFE/ycr/wJPweZvQ"));
}

BOOL MobileGestalt_get_internationalSettingsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("tUIqcYyzHuWBvBQHsLk8IQ"));
}

char *MobileGestalt_copy_inverseDeviceID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("frZQaeyWLUvLjeuEK43hmg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_inverseDeviceID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("frZQaeyWLUvLjeuEK43hmg"));
}

BOOL MobileGestalt_get_isComputeController()
{
  return MGGetBoolAnswer((const char **)CFSTR("NLWYUp5icK9sRsPDI7XJtw"));
}

BOOL MobileGestalt_get_isComputeNode()
{
  return MGGetBoolAnswer((const char **)CFSTR("RvCUAjrf7O/zAzV1StnBlg"));
}

BOOL MobileGestalt_get_isEmulatedDevice()
{
  return MGGetBoolAnswer((const char **)CFSTR("z5G/N9jcMdgPm8UegLwbKg"));
}

BOOL MobileGestalt_get_isLargeFormatPhone()
{
  return MGGetBoolAnswer((const char **)CFSTR("iBLsDETxB4ATmspGucaJyg"));
}

BOOL MobileGestalt_get_isPwrOpposedVol()
{
  return MGGetBoolAnswer((const char **)CFSTR("euampscYbKXqj/bSaHD0QA"));
}

BOOL MobileGestalt_get_isServicePart()
{
  return MGGetBoolAnswer((const char **)CFSTR("1plD8faLv1bhScZQ3t0PLQ"));
}

BOOL MobileGestalt_get_isSimulator()
{
  return MGGetBoolAnswer((const char **)CFSTR("ulMliLomP737aAOJ/w/evA"));
}

BOOL MobileGestalt_get_isThereEnoughBatteryLevelForSoftwareUpdate()
{
  return MGGetBoolAnswer((const char **)CFSTR("o/mXrucvBSYUXqq7K3UzKA"));
}

BOOL MobileGestalt_get_isUIBuild()
{
  return MGGetBoolAnswer((const char **)CFSTR("I32sGclpgl5VujQRJxyhKQ"));
}

BOOL MobileGestalt_get_isVirtualDevice()
{
  return MGGetBoolAnswer((const char **)CFSTR("MrC93gcyPVLHmEbzUu9uzQ"));
}

char *MobileGestalt_copy_jasperSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("dJvRNnysMoubdy0ZCK2aRQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_jasperSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("dJvRNnysMoubdy0ZCK2aRQ"));
}

BOOL MobileGestalt_get_keyboardMutePreservesRegionalShutterClickBehavior()
{
  return MGGetBoolAnswer((const char **)CFSTR("bGUN8lS6sYzy3xhePubp8A"));
}

BOOL MobileGestalt_get_keyboardMutePreservesRegionalShutterClickBehaviorForLegacyDevices()
{
  return MGGetBoolAnswer((const char **)CFSTR("Bim3FC83Te8QX1kfSpqYKQ"));
}

BOOL MobileGestalt_get_lteDeviceCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("1X0zc2JwBdYOQrMAyP81DQ"));
}

BOOL MobileGestalt_get_launchTimeLimitScaleSupported()
{
  return MGGetBoolAnswer((const char **)CFSTR("AklmqJyJMChzHsYT0aiBbw"));
}

UInt8 *MobileGestalt_copy_liDARCalibrationPrCL()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("njUcH4bm+JBmvASakDdObg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xC28937C5uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_liDARCalibrationPrCL_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("njUcH4bm+JBmvASakDdObg"));
}

BOOL MobileGestalt_get_lisaCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("4RwhtNOmePfUXmu57rh+KA"));
}

BOOL MobileGestalt_get_loadThumbnailsWhileScrollingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("1N14oS9TeyskaTU1DxpwoQ"));
}

char *MobileGestalt_copy_localizedDeviceNameString()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("+VIu65zA5EW4ztayJXvOUg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_localizedDeviceNameString_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("+VIu65zA5EW4ztayJXvOUg"));
}

BOOL MobileGestalt_get_locationRemindersCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("BOPZue5C0v42pU9iJFYE3A"));
}

BOOL MobileGestalt_get_locationServicesCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("0pY9r1XBV1duZ8HO3tBvFg"));
}

const void *MobileGestalt_copy_lowPowerExpressModesSupported_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("JHXk7RXOxvlqK+SxkwcM2A"));
}

BOOL MobileGestalt_get_lowPowerWalletMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("Birtx7GxrxCCUzsE1JQO8Q"));
}

char *MobileGestalt_copy_lunaFlexSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("2xSqkUxsVWmOBWk6StVOfQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_lunaFlexSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("2xSqkUxsVWmOBWk6StVOfQ"));
}

UInt8 *MobileGestalt_copy_lynxPublicKey()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("HMpTbnbcAb+mQDi8O71h6Q"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x28A0BB2uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_lynxPublicKey_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("HMpTbnbcAb+mQDi8O71h6Q"));
}

UInt8 *MobileGestalt_copy_lynxSerialNumber()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("r5pA2qLgR86BQKwgMjPWzg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xBEC677AuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_lynxSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("r5pA2qLgR86BQKwgMjPWzg"));
}

char *MobileGestalt_copy_mlbSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("Q1Ty5w8gxMWHx3p4lQ1fhA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mlbSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Q1Ty5w8gxMWHx3p4lQ1fhA"));
}

BOOL MobileGestalt_get_mmsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("gKzNJcweSCWA+gIGiUQJ5w"));
}

UInt8 *MobileGestalt_copy_macBridgingKeys()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("VdSOpM2K054AhCKBaXuiqw"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x6D74C3B7uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_macBridgingKeys_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("VdSOpM2K054AhCKBaXuiqw"));
}

char *MobileGestalt_copy_macFormFactor()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("m4alZgBFhxNuTZyrEM2nbA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_macFormFactor_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("m4alZgBFhxNuTZyrEM2nbA"));
}

char *MobileGestalt_copy_macPrefsAssetImage()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("a4GiDGlLmW0qD340gOCpFA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_macPrefsAssetImage_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("a4GiDGlLmW0qD340gOCpFA"));
}

BOOL MobileGestalt_get_magnetometerCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ELLSWiPOyh0roYBypZFHFA"));
}

uint64_t MobileGestalt_get_mainDisplayRotation(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("IIYjwu1lbAyGz5t0c4ECoA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711394(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_mainScreenCanvasSizes()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("ybGkijAwLTwevankfVzsDQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xCBC1CBF2uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_mainScreenCanvasSizes_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ybGkijAwLTwevankfVzsDQ"));
}

uint64_t MobileGestalt_get_mainScreenClass(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("fdh+s6j3VijuyrK7xLjd7g"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711404(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_mainScreenHeight(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("OjzOua0LkOegX7pQdgMksw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711474(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

float MobileGestalt_get_mainScreenOrientation(void *a1)
{
  id v1;
  const void *v2;
  const void *v3;
  CFTypeID v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  v1 = a1;
  valuePtr = -1082130432;
  v2 = MGCopyAnswer((const char **)CFSTR("1qDdT/85SS7sxriK0wIbbg"));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B7114E4(v5, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  v6 = -1.0;
LABEL_11:

  return v6;
}

uint64_t MobileGestalt_get_mainScreenPitch(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("0l4wqBtWEAK1tOkeBHkU6Q"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711554(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_mainScreenWidth(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("g7YQ1Djxh4YiKlEeaoGhzg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711634(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_marketingDeviceFamilyName()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("vme9Buk6XiWFCXoHApxNFA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingDeviceFamilyName_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("vme9Buk6XiWFCXoHApxNFA"));
}

char *MobileGestalt_copy_marketingNameString()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("Z/dqyWS6OZTRy10UcmUAhw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingNameString_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Z/dqyWS6OZTRy10UcmUAhw"));
}

char *MobileGestalt_copy_marketingProductName()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("j9Th5smJpdztHwc+i39zIg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingProductName_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("j9Th5smJpdztHwc+i39zIg"));
}

char *MobileGestalt_copy_marketingSOCNameString()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("Z06ZMtQY6G3kKrC7fs/gOA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingSOCNameString_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Z06ZMtQY6G3kKrC7fs/gOA"));
}

char *MobileGestalt_copy_marketingVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("QtLcewkuPtPV0RpO+i0Zzw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_marketingVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("QtLcewkuPtPV0RpO+i0Zzw"));
}

const void *MobileGestalt_copy_maxH264PlaybackLevel_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("4W7X4OWHjri5PGaAGsCWxw"));
}

uint64_t MobileGestalt_get_maximumScreenScale(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("XmExwNGRvYTII6QC0+jvsA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7116A4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_medusaFloatingLiveAppCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("mG0AnH/Vy1veoqoLRAIgTA"));
}

BOOL MobileGestalt_get_medusaOverlayAppCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("UCG5MkVahJxG1YULbbd5Bg"));
}

BOOL MobileGestalt_get_medusaPIPCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("nVh/gwNpy7Jv1NOk00CMrw"));
}

BOOL MobileGestalt_get_medusaPinnedAppCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ZYqko/XM5zD3XBfN5RmaXA"));
}

char *MobileGestalt_copy_mesaSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("jWdMTTxiAZc+KNO6Bz2jNg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mesaSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("jWdMTTxiAZc+KNO6Bz2jNg"));
}

BOOL MobileGestalt_get_metalCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("hwd9ipb6eezNleN59+6n1Q"));
}

uint64_t MobileGestalt_get_metalPerfLevelCapability(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("gme55xrmjlSlBkahnZq36A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711714(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_metalPerfLevelCapabilityOne4IOS()
{
  return MGGetBoolAnswer((const char **)CFSTR("oOV1jhJbdV3AddkcCg0AEA"));
}

BOOL MobileGestalt_get_metalPerfLevelCapabilityOne4IPhoneAndiPad()
{
  return MGGetBoolAnswer((const char **)CFSTR("sI1x188eYDcARhSzXxk3Cg"));
}

BOOL MobileGestalt_get_microphoneCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("s2UwZpwDQcywU3de47/ilw"));
}

uint64_t MobileGestalt_get_microphoneCount(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("61xs1bQ+9eTk8tlRvG9UKw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711784(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_minimumSupportediTunesVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("96GRvvjuBKkU4HzNsYcHPA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_minimumSupportediTunesVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("96GRvvjuBKkU4HzNsYcHPA"));
}

BOOL MobileGestalt_get_mixAndMatchPrevention()
{
  return MGGetBoolAnswer((const char **)CFSTR("rxUlSnmihTL8oDg9Hrgq/A"));
}

char *MobileGestalt_copy_mobileDeviceMinimumVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("k+KTni1jrwErpcDMEnn3aw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileDeviceMinimumVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("k+KTni1jrwErpcDMEnn3aw"));
}

char *MobileGestalt_copy_mobileEquipmentIdentifier()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("xOEH0P1H/1jmYe2t54+5cQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentIdentifier_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("xOEH0P1H/1jmYe2t54+5cQ"));
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseId()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("inECTnNyR97XWxm7jU8uqA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoBaseId_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("inECTnNyR97XWxm7jU8uqA"));
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseProfile()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("heP+NTlvkhJ2zzWIUznawA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoBaseProfile_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("heP+NTlvkhJ2zzWIUznawA"));
}

char *MobileGestalt_copy_mobileEquipmentInfoBaseVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("RXyKSjeF239SL2vOcru01A"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoBaseVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("RXyKSjeF239SL2vOcru01A"));
}

char *MobileGestalt_copy_mobileEquipmentInfoCSN()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("rkFHO5dZmWxy3QdOx7r7kA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoCSN_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("rkFHO5dZmWxy3QdOx7r7kA"));
}

char *MobileGestalt_copy_mobileEquipmentInfoDisplayCSN()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("zPHFWx4ZItDiTXNT2onrWQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileEquipmentInfoDisplayCSN_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("zPHFWx4ZItDiTXNT2onrWQ"));
}

char *MobileGestalt_copy_mobileSubscriberCountryCode()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("CQ6gFmgMhpnnISvG6VakBQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileSubscriberCountryCode_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("CQ6gFmgMhpnnISvG6VakBQ"));
}

char *MobileGestalt_copy_mobileSubscriberNetworkCode()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("oJGeec0N+MudCr0LsdtbHw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_mobileSubscriberNetworkCode_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("oJGeec0N+MudCr0LsdtbHw"));
}

BOOL MobileGestalt_get_mobileWifi()
{
  return MGGetBoolAnswer((const char **)CFSTR("mtHZd1H8XJ2DMVtNVUSkag"));
}

char *MobileGestalt_copy_modelNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("D0cJ8r7U5zve6uA6QbOiLA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_modelNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("D0cJ8r7U5zve6uA6QbOiLA"));
}

BOOL MobileGestalt_get_monarchLowEndHardware()
{
  return MGGetBoolAnswer((const char **)CFSTR("s+gaKNe68Gs3PfqKrZhi1w"));
}

const void *MobileGestalt_copy_multiLynxPublicKeyArray_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("niQFEBBY7JaauAIosAyQQg"));
}

const void *MobileGestalt_copy_multiLynxSerialNumberArray_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("juE6wCsjVG4bfAhgHcUVcQ"));
}

BOOL MobileGestalt_get_multiTouchCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("pFpC81KCZegLf4FenQZ2OA"));
}

uint64_t MobileGestalt_get_multiTouchMaxBootTime(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("EuwCLwMXh+X5LErHKwvuIw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7117F4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_multitaskingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("RECLuzbJ6oh8q4NKR8RtNg"));
}

BOOL MobileGestalt_get_multitaskingGesturesCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("UFqkf9tcH1ltsOMzpdwSUw"));
}

BOOL MobileGestalt_get_musicStoreCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("izFv/qj3IUhqAIiEuYH6xw"));
}

BOOL MobileGestalt_get_n78AHack()
{
  return MGGetBoolAnswer((const char **)CFSTR("+bL/lKwaIAv+fzmjsHYZdw"));
}

BOOL MobileGestalt_get_nfcRadio()
{
  return MGGetBoolAnswer((const char **)CFSTR("zxMIgVSILN6S5ee6MZhf+Q"));
}

BOOL MobileGestalt_get_nfcRadioCalibrationDataPresent()
{
  return MGGetBoolAnswer((const char **)CFSTR("XFx5cRZ0tJYl+xJUCEgjnQ"));
}

char *MobileGestalt_copy_nfcUniqueChipID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("evtY5EeJ8V0nFhmrj/OYjg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_nfcUniqueChipID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("evtY5EeJ8V0nFhmrj/OYjg"));
}

const void *MobileGestalt_copy_nVRAMDictionary_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Q2jR+AUT9PTHUrP/mkdfxQ"));
}

char *MobileGestalt_copy_nandControllerUID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("PcQWbThCb7iLEW+EoqZdEQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_nandControllerUID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("PcQWbThCb7iLEW+EoqZdEQ"));
}

uint64_t MobileGestalt_get_navajoFusingState(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("LcUv5nw5flxnHlxWu9sJvw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711864(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_nikeIpodCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("qHVhw5NhezD+ljFUPvQb4g"));
}

BOOL MobileGestalt_get_notGreenTeaDeviceCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("4snMZS8LJkSctKypt2m+xA"));
}

BOOL MobileGestalt_get_oledDisplay()
{
  return MGGetBoolAnswer((const char **)CFSTR("noqTy5fUbyK03UHxWigBBQ"));
}

BOOL MobileGestalt_get_otaActivationCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("38C0kq9NiVaMsqjlUsCHcQ"));
}

const void *MobileGestalt_copy_oceanComputeCarrierID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("qgfS+6l1exvcMW5Tfplv2Q"));
}

const void *MobileGestalt_copy_oceanComputeCarrierSlot_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("LUy+wqFiBmou5hwM5OWbmA"));
}

BOOL MobileGestalt_get_offlineDictationCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("c5uqoV7Z9ly+f4c5mYXILg"));
}

BOOL MobileGestalt_get_onDeviceSiriCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("O/7gbXWA5X2IRPVtDRU+bw"));
}

BOOL MobileGestalt_get_openGLES1Capability()
{
  return MGGetBoolAnswer((const char **)CFSTR("kt7gXeIiU0dLEKrgUSsLVw"));
}

BOOL MobileGestalt_get_openGLES2Capability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ce5pjDJVSOxjcg1HwmAezA"));
}

BOOL MobileGestalt_get_openGLES3Capability()
{
  return MGGetBoolAnswer((const char **)CFSTR("LAB8o3Bxs3CgNuzDawjRdw"));
}

uint64_t MobileGestalt_get_openGLESVersion(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("ErupMbaQrM6KypD4K0kTDQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7118D4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_oysterCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("0GUU+Z8xIu+7TE+scKXscg"));
}

BOOL MobileGestalt_get_ptpLargeFilesCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("MWpHV1VYKXmaKqhgbmTWCg"));
}

char *MobileGestalt_copy_panelSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("YVNo6vlMjhgQ9yGYV8gatw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_panelSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("YVNo6vlMjhgQ9yGYV8gatw"));
}

BOOL MobileGestalt_get_panoramaCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("q4cLktMwtrx8dCJAQTeqTg"));
}

char *MobileGestalt_copy_partitionStyle()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("yjP8DgByZmLk04Ta6f6DWQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_partitionStyle_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("yjP8DgByZmLk04Ta6f6DWQ"));
}

char *MobileGestalt_copy_partitionType()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("xUHcyT2/HE8oi/4LaOI+Sw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_partitionType_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("xUHcyT2/HE8oi/4LaOI+Sw"));
}

BOOL MobileGestalt_get_passwordConfigured()
{
  return MGGetBoolAnswer((const char **)CFSTR("xsaMbRQ5rQ+eyKMKG+ZSSg"));
}

BOOL MobileGestalt_get_passwordProtected()
{
  return MGGetBoolAnswer((const char **)CFSTR("yNesiJuidlesNpI/K5Ri4A"));
}

BOOL MobileGestalt_get_pearlCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("8S7ydMJ4DlCUF38/hI/fJA"));
}

BOOL MobileGestalt_get_pearlIDCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("8olRm6C1xqr7AJGpLRnpSw"));
}

BOOL MobileGestalt_get_pearlMotionDetectionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("j39y4QUrP6cvZY8Pjyv64w"));
}

BOOL MobileGestalt_get_peekUICapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("LvCIFE6lOM10QDqIEyYWRA"));
}

uint64_t MobileGestalt_get_peekUIWidth(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("Y2TwC8z+XeBBBswnLf7JsQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711944(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_peer2PeerCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("Ht1HDxwTOy2gyY+THjbd6w"));
}

uint64_t MobileGestalt_get_perfLevelCapability(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("eW5H/Gwg0uqbMqFot70pYg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7119B4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_perfLevelCapabilityOne4IOS()
{
  return MGGetBoolAnswer((const char **)CFSTR("Mi/ME+v1wZqkvXFU3xX3KA"));
}

BOOL MobileGestalt_get_perfLevelCapabilityOne4TvOS()
{
  return MGGetBoolAnswer((const char **)CFSTR("2oKaRZpltNseA9gTdIKTQQ"));
}

BOOL MobileGestalt_get_perfLevelCapabilityTwo4IOS()
{
  return MGGetBoolAnswer((const char **)CFSTR("JWjvsupiqWYtIGwr8yGd8w"));
}

BOOL MobileGestalt_get_perfLevelCapabilityiPadM1()
{
  return MGGetBoolAnswer((const char **)CFSTR("TqtrpIdOXIIlhOraMmq/pQ"));
}

BOOL MobileGestalt_get_personalHotspotCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("wlxZYdEZITDTzgs/OnnV+Q"));
}

char *MobileGestalt_copy_phoneNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("H5TSt7Pu4zNCD5RvHuk5CQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_phoneNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("H5TSt7Pu4zNCD5RvHuk5CQ"));
}

char *MobileGestalt_copy_phoneNumber2()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("SZy8T5ma/+a0wJc0ntiaaA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_phoneNumber2_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("SZy8T5ma/+a0wJc0ntiaaA"));
}

BOOL MobileGestalt_get_phosphorusCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("7mV26K/1a+wTtqiunvHMUQ"));
}

BOOL MobileGestalt_get_photoAdjustmentsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("H8Pi7AthQFVZ0B6A1J5OTw"));
}

BOOL MobileGestalt_get_photoCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("bl+nF6e86pLBiPP4pVJ24g"));
}

BOOL MobileGestalt_get_photoSharingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("UHwjAM1cqBLCR1OuYouf8A"));
}

BOOL MobileGestalt_get_photoStreamCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("RYZZuAFEfSNnEKEzwzRnqw"));
}

BOOL MobileGestalt_get_photosPostEffectsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("4Jfu4lqX8dzru4Z+ONQ1rQ"));
}

char *MobileGestalt_copy_physicalHardwareNameString()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("bbtR9jQx50Fv5Af/affNtA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_physicalHardwareNameString_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("bbtR9jQx50Fv5Af/affNtA"));
}

BOOL MobileGestalt_get_piezoClickerCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("DdNpmCCXbeMGbqj0kAMCdw"));
}

UInt8 *MobileGestalt_copy_pintoMacAddress()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("d27R2IjPvpwp+MX/kUbJ2w"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x58C5DDC3uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_pintoMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("d27R2IjPvpwp+MX/kUbJ2w"));
}

BOOL MobileGestalt_get_pipelinedStillImageProcessingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("XIcF5FOyQlt/H79oFw9ciA"));
}

BOOL MobileGestalt_get_platformStandAloneContactsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("HMKkoKYsMmBBSN6ozOtw/w"));
}

BOOL MobileGestalt_get_platinumCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("1oMPwMsqxTa9BJxUs8v06w"));
}

BOOL MobileGestalt_get_pressDemoMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("l8Xo/NV8/U585G1uBtW29w"));
}

UInt8 *MobileGestalt_copy_productHash()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("TZ/0j62wM3D0CuRt+Nc/Lw"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xA53FDF5uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_productHash_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("TZ/0j62wM3D0CuRt+Nc/Lw"));
}

char *MobileGestalt_copy_productName()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("ivIu8YTDnBSrYv/SN4G8Ag"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_productName_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ivIu8YTDnBSrYv/SN4G8Ag"));
}

char *MobileGestalt_copy_productType()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("h9jDsbgj7xIVeIQ8S3/X3Q"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_productType_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("h9jDsbgj7xIVeIQ8S3/X3Q"));
}

char *MobileGestalt_copy_productVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("qNNddlUK+B/YlooNoymwgA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_productVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("qNNddlUK+B/YlooNoymwgA"));
}

char *MobileGestalt_copy_productVersionExtra()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("P5Go9WVVA604m7rKhbVndw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_productVersionExtra_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("P5Go9WVVA604m7rKhbVndw"));
}

char *MobileGestalt_copy_provisioningUniqueDeviceID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("RNcdWbM8+dO5tx82A+YCcQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_provisioningUniqueDeviceID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("RNcdWbM8+dO5tx82A+YCcQ"));
}

UInt8 *MobileGestalt_copy_proximitySensorCalibration()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("6UUmcaeT7rJoyUVmoPJd4A"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xDFDC18uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_proximitySensorCalibration_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("6UUmcaeT7rJoyUVmoPJd4A"));
}

const void *MobileGestalt_copy_proximitySensorCalibrationDictionary_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("5mvQIwu3Mqqw/zOKmwGkWw"));
}

BOOL MobileGestalt_get_proximitySensorCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("5v2p6i7PyIMdWOK4n/+G4A"));
}

BOOL MobileGestalt_get_quickNoteCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("8fyX2yEg28cYgJ10Yl+ueA"));
}

uint64_t MobileGestalt_get_rFExposureSeparationDistance(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("5tnvmEsHQKfCoieLEYpnvg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711A24(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_rawPanelSerialNumber()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("PxEDp0oOasJ92F/V7YBa8A"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xCA3F089FuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_rawPanelSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("PxEDp0oOasJ92F/V7YBa8A"));
}

BOOL MobileGestalt_get_rearALSCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("PVMLomcejavaax8/I3Ud3A"));
}

BOOL MobileGestalt_get_rearCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("6iI7/9cVUGIjdrSvIXEt4A"));
}

const void *MobileGestalt_copy_rearCameraOffsetFromDisplayCenter_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("waWRQ4fj6cyMuJ+wTWJs1g"));
}

BOOL MobileGestalt_get_rearFacingCamera60FpsVideoCaptureCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("6RrxXzvfw2GZeUPLKXxrmA"));
}

BOOL MobileGestalt_get_rearFacingCameraAutoHDRCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("RLlZndRrTB3oIDuZEihtpQ"));
}

BOOL MobileGestalt_get_rearFacingCameraBurstCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("plaYa8bKJaAF5Erc5nvZ+g"));
}

BOOL MobileGestalt_get_rearFacingCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("dp7SlZZQotrh8McQoH1xFA"));
}

BOOL MobileGestalt_get_rearFacingCameraFocusPixelCalibrationCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("STBQ8gY0pl0CK8VmRcks4w"));
}

BOOL MobileGestalt_get_rearFacingCameraHDRCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("TTZrMo1OOEUELa7asaQ7xg"));
}

BOOL MobileGestalt_get_rearFacingCameraHDROnCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("LkWb+FyA1+ef2UD1Fx+kAw"));
}

BOOL MobileGestalt_get_rearFacingCameraHFRCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("fGpT09KNGDBjFXnqcVbgbw"));
}

uint64_t MobileGestalt_get_rearFacingCameraHFRVideoCapture1080PMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("jKFTzVOYcfTfNBh+yDrprw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711A94(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraHFRVideoCapture720PMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("XellXEQUbOIgUPoTrIj5nA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711B04(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraMaxVideoZoomFactor(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("WC6wwFV23k19BlUQIAwDTg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711B74(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_rearFacingCameraModuleSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("nWFV2qG2TjSuH7vZFCdi4w"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_rearFacingCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("nWFV2qG2TjSuH7vZFCdi4w"));
}

BOOL MobileGestalt_get_rearFacingCameraStageLightPortraitCaptureCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("8LAJHwc8DUQZwV2TSwsysA"));
}

uint64_t MobileGestalt_get_rearFacingCameraStillDurationForBurst(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("gq0j1GmcIcaD4DjJoo9pfg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711BE4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_rearFacingCameraSuperWideCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("hnXJ1OpiiIL0+p3jUG/XxQ"));
}

BOOL MobileGestalt_get_rearFacingCameraTimeOfFlightCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("QVwCp3Lu9RLnxw7LO9DBfQ"));
}

BOOL MobileGestalt_get_rearFacingCameraVariableFrameRateCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ry09Fs7QIF3ITE0Fx5OdvQ"));
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture1080PMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("jBGZJ71pRJrqD8VZ6Tk2VQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711C54(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture4KMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("po7g0ATDzGoVI1DO8ISmuw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711CC4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCapture720PMaxFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("0/7QNywWU4IqDcyvTv9UYQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711D34(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_rearFacingCameraVideoCaptureFPS(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("wOVK1nhmiAawowdbIwgyaQ"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711DA4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_rearFacingLowLightCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("jaJWtlotaa+Y41lCs7NVHg"));
}

char *MobileGestalt_copy_rearFacingSuperWideCameraModuleSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("UZfUiD1Aqy3GOwg72SQcLQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_rearFacingSuperWideCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("UZfUiD1Aqy3GOwg72SQcLQ"));
}

BOOL MobileGestalt_get_rearFacingTelephotoCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("YzrS+WPEMqyh/FBv/n/jvA"));
}

char *MobileGestalt_copy_rearFacingTelephotoCameraModuleSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("cm399FbDqnv8IOFoeBLWYg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_rearFacingTelephotoCameraModuleSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("cm399FbDqnv8IOFoeBLWYg"));
}

BOOL MobileGestalt_get_receiveARCStreamOverAirPlayCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("OHXV8ldryg9nrOCapcyDCQ"));
}

char *MobileGestalt_copy_recoveryOSVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("NE090Fbwd79LVOHj0AN+OA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_recoveryOSVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("NE090Fbwd79LVOHj0AN+OA"));
}

char *MobileGestalt_copy_regionCode()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("h63QSdBCiT/z0WU6rdQv6Q"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

char *MobileGestalt_copy_regionInfo()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("zHeENZu+wbg7PUprwNwBWg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_regionInfo_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("zHeENZu+wbg7PUprwNwBWg"));
}

const void *MobileGestalt_copy_regionalBehaviorAll_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("D4AU4tOIuGKN3G/uix65cQ"));
}

BOOL MobileGestalt_get_regionalBehaviorChinaBrick()
{
  return MGGetBoolAnswer((const char **)CFSTR("0L5PkT61qoH1b/B1USWqjQ"));
}

BOOL MobileGestalt_get_regionalBehaviorEUVolumeLimit()
{
  return MGGetBoolAnswer((const char **)CFSTR("Tr9qG122eEQiKGfr6EGRdQ"));
}

BOOL MobileGestalt_get_regionalBehaviorGB18030()
{
  return MGGetBoolAnswer((const char **)CFSTR("inLiSl5OQHJ1stAIvKH8wg"));
}

BOOL MobileGestalt_get_regionalBehaviorGoogleMail()
{
  return MGGetBoolAnswer((const char **)CFSTR("4uzgAFPkzKUmlZG5HpFIkg"));
}

BOOL MobileGestalt_get_regionalBehaviorNTSC()
{
  return MGGetBoolAnswer((const char **)CFSTR("IFBSPGnQVFrGFW+ujtZu6Q"));
}

BOOL MobileGestalt_get_regionalBehaviorNoPasscodeLocationTiles()
{
  return MGGetBoolAnswer((const char **)CFSTR("0R2aiV2nJVu/v8I7Ex2GcQ"));
}

BOOL MobileGestalt_get_regionalBehaviorNoVOIP()
{
  return MGGetBoolAnswer((const char **)CFSTR("6MnVtR+c9LeR46bMxvR5Yw"));
}

BOOL MobileGestalt_get_regionalBehaviorNoWiFi()
{
  return MGGetBoolAnswer((const char **)CFSTR("kjKnJNt7HY90iN6rpbSeFQ"));
}

BOOL MobileGestalt_get_regionalBehaviorShutterClick()
{
  return MGGetBoolAnswer((const char **)CFSTR("ZgIjA7Nwd2jSo13lhDO1Iw"));
}

BOOL MobileGestalt_get_regionalBehaviorValid()
{
  return MGGetBoolAnswer((const char **)CFSTR("KMgjmT+dsqBCXu1YQEcOFg"));
}

BOOL MobileGestalt_get_regionalBehaviorVolumeLimit()
{
  return MGGetBoolAnswer((const char **)CFSTR("HxTvMvHnum5rI8d0Nr4xBw"));
}

char *MobileGestalt_copy_regulatoryModelNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_regulatoryModelNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("97JDvERpVwO+GHtthIh7hA"));
}

char *MobileGestalt_copy_releaseType()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("9UCjT7Qfi4xLVvPAKIzTCQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_releaseType_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("9UCjT7Qfi4xLVvPAKIzTCQ"));
}

UInt8 *MobileGestalt_copy_remoteBluetoothAddress()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("uAIY4Jb2A7Fy2aLrlDU1gg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xE2CCEBEuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_remoteBluetoothAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("uAIY4Jb2A7Fy2aLrlDU1gg"));
}

BOOL MobileGestalt_get_renderWideGamutImagesAtDisplayTime()
{
  return MGGetBoolAnswer((const char **)CFSTR("jMiqevikb6QWeHOhvLsw6A"));
}

BOOL MobileGestalt_get_rendersLetterPressSlowly()
{
  return MGGetBoolAnswer((const char **)CFSTR("MYKMJDMFE/lhvOVXgtDNuw"));
}

float MobileGestalt_get_requiredBatteryLevelForSoftwareUpdate(void *a1)
{
  id v1;
  const void *v2;
  const void *v3;
  CFTypeID v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  v1 = a1;
  valuePtr = -1082130432;
  v2 = MGCopyAnswer((const char **)CFSTR("AFXhxraF1bvyaCMlBIOZPA"));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B711E14(v5, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_requiresNaturalVolumeButtonArrangement()
{
  return MGGetBoolAnswer((const char **)CFSTR("cW+7coMzO/hTtCCDcSvNOw"));
}

BOOL MobileGestalt_get_requiresPairedRemote()
{
  return MGGetBoolAnswer((const char **)CFSTR("rXbje18EX3b6I7u/pXBYeg"));
}

BOOL MobileGestalt_get_researchFuse()
{
  return MGGetBoolAnswer((const char **)CFSTR("XYlJKKkj2hztRP1NWWnhlw"));
}

BOOL MobileGestalt_get_restoreOSBuild()
{
  return MGGetBoolAnswer((const char **)CFSTR("8DHlxr5ECKhTSL3HmlZQGQ"));
}

const void *MobileGestalt_copy_restrictedCountryCodes_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("nSo8opze5rFk+EdBoR6tBw"));
}

UInt8 *MobileGestalt_copy_ringerButtonCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("qzHhHrOpIDLAq2balBdVZg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x7824319EuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_ringerButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("qzHhHrOpIDLAq2balBdVZg"));
}

BOOL MobileGestalt_get_ringerButtonCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("cT44WE1EohiwRzhsZ8xEsw"));
}

UInt8 *MobileGestalt_copy_ringerButtonNormalizedCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("6JkXMDhnrEMvLiRlYJL6zA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xA1E73DE9uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_ringerButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("6JkXMDhnrEMvLiRlYJL6zA"));
}

BOOL MobileGestalt_get_ringerSwitchCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("hx2qJfJRLZ9Sseb37IcQow"));
}

char *MobileGestalt_copy_rosalineSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("O8mk69g6k/CbfeET9LtqQA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_rosalineSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("O8mk69g6k/CbfeET9LtqQA"));
}

UInt8 *MobileGestalt_copy_roswellChipID()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("OyENNqRhuo8+RHkpbr/82A"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xE66CACFBuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_roswellChipID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("OyENNqRhuo8+RHkpbr/82A"));
}

BOOL MobileGestalt_get_rotateToWakeStatus()
{
  return MGGetBoolAnswer((const char **)CFSTR("YdPNjYPBzyE0jJl2X/CayQ"));
}

BOOL MobileGestalt_get_sbAllowSensitiveUI()
{
  return MGGetBoolAnswer((const char **)CFSTR("CpVSHukvtqlJzCgSdoHW5w"));
}

BOOL MobileGestalt_get_sbCanForceDebuggingInfo()
{
  return MGGetBoolAnswer((const char **)CFSTR("gPoIZFd4NhmSKrk67qH80w"));
}

UInt8 *MobileGestalt_copy_sEInfo()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("atOCpGf+lHCxgJ9GElef8Q"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xF7740BDEuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_sEInfo_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("atOCpGf+lHCxgJ9GElef8Q"));
}

UInt8 *MobileGestalt_copy_sEPNonce()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("IGYvMgBnOsdJjgmSh7Pe1A"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x5BA24940uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_sEPNonce_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("IGYvMgBnOsdJjgmSh7Pe1A"));
}

BOOL MobileGestalt_get_simCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("PUMArrha4PFeOqINeQRM3A"));
}

BOOL MobileGestalt_get_simPhonebookCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("tYqUcLmLfhmk7vOgdFvURg"));
}

char *MobileGestalt_copy_simStatus()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("yUCaqT4KOwJpYEb+XDPq7g"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_simStatus_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("yUCaqT4KOwJpYEb+XDPq7g"));
}

char *MobileGestalt_copy_simStatus2()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("b2BKAEe88VRfp2WXEjJOyA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_simStatus2_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("b2BKAEe88VRfp2WXEjJOyA"));
}

char *MobileGestalt_copy_simTrayStatus()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("L2Oq7vNNUKuv+iJ4m9xtiw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_simTrayStatus_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("L2Oq7vNNUKuv+iJ4m9xtiw"));
}

char *MobileGestalt_copy_simTrayStatus2()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("sHiXbHqHvvRS3I/qo/rH2Q"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_simTrayStatus2_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("sHiXbHqHvvRS3I/qo/rH2Q"));
}

BOOL MobileGestalt_get_smsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("OPzhvROZUqCZhgYMyve5BA"));
}

UInt8 *MobileGestalt_copy_savageChipID()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("m9OWD0Y4Br0TZHUl6rGcOg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xB9CE11E5uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_savageChipID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("m9OWD0Y4Br0TZHUl6rGcOg"));
}

const void *MobileGestalt_copy_savageInfo_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Fhqq6Bhy/XnCEBRAe3TI+g"));
}

UInt8 *MobileGestalt_copy_savageSerialNumber()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("LE2kQ7U1iM32AmlhYvlagg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x253E3958uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_savageSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("LE2kQ7U1iM32AmlhYvlagg"));
}

UInt8 *MobileGestalt_copy_savageUID()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("FNvQ6lBvJIUcYBzQ8ggOUQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x7DBA0AA8uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_savageUID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("FNvQ6lBvJIUcYBzQ8ggOUQ"));
}

uint64_t MobileGestalt_get_screenCaptureHeight(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("n6blIRZ4IumqHl/toNJcpg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711E84(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

uint64_t MobileGestalt_get_screenCaptureWidth(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("kj5Hw7ZKY+hm7ZCs0Caznw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711EF4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

const void *MobileGestalt_copy_screenDimensionsCapability_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("HkXhfA7q9eBKIU2+6yTgQg"));
}

BOOL MobileGestalt_get_screenRecorderCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ExSUJyf7MblY5nBQx2OaRw"));
}

char *MobileGestalt_copy_screenSerialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("0D3qCmmfJ/i1mpmjOsV7EA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_screenSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("0D3qCmmfJ/i1mpmjOsV7EA"));
}

char *MobileGestalt_copy_secondaryBluetoothMacAddress()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("8bOgXKgqoLvqV/XeSomAfA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_secondaryBluetoothMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("8bOgXKgqoLvqV/XeSomAfA"));
}

UInt8 *MobileGestalt_copy_secondaryEthernetMacAddress()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("BQwz+BT9b5mS7OPh2WGD6A"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x25703F2BuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_secondaryEthernetMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("BQwz+BT9b5mS7OPh2WGD6A"));
}

UInt8 *MobileGestalt_copy_secondaryWifiMacAddress()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("7VoVaBmSuokzovhUkiDx6Q"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xA2D1BA13uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_secondaryWifiMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("7VoVaBmSuokzovhUkiDx6Q"));
}

BOOL MobileGestalt_get_secureElement()
{
  return MGGetBoolAnswer((const char **)CFSTR("0dnM19zBqLw5ZPhIo4GEkg"));
}

char *MobileGestalt_copy_secureElementID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("nZUUCFZgomfWUIPGGzNAqg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_secureElementID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("nZUUCFZgomfWUIPGGzNAqg"));
}

uint64_t MobileGestalt_get_securityDomain(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("wu9wv8HhpA95iHT4Yyez7A"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B711F64(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_sensitiveUICapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("BOYfUi496moe56A0RWFbqQ"));
}

char *MobileGestalt_copy_serialNumber()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("VasUgeSzVyHdB27g2XpN0g"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_serialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("VasUgeSzVyHdB27g2XpN0g"));
}

BOOL MobileGestalt_get_shoeboxCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("cX1+ZsVacGTXWVKB9enYow"));
}

BOOL MobileGestalt_get_shouldHactivate()
{
  return MGGetBoolAnswer((const char **)CFSTR("a6vjPkzcRjrsXmniFsm0dg"));
}

BOOL MobileGestalt_get_sikaCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ssIPnsZyWHPGC5sg3Pzkiw"));
}

BOOL MobileGestalt_get_signingFuse()
{
  return MGGetBoolAnswer((const char **)CFSTR("a5BRUxn1QBPXkAnbAHbmeg"));
}

BOOL MobileGestalt_get_siliconBringupBoard()
{
  return MGGetBoolAnswer((const char **)CFSTR("cZflGJ39lJHTCPy35/N14Q"));
}

BOOL MobileGestalt_get_simultaneousCallAndDataCurrentlySupported()
{
  return MGGetBoolAnswer((const char **)CFSTR("xleedMDMw0UV3fSgmHIoaQ"));
}

BOOL MobileGestalt_get_simultaneousCallAndDataSupported()
{
  return MGGetBoolAnswer((const char **)CFSTR("0uyHvVqOLpJQBpSl/rF3Vg"));
}

BOOL MobileGestalt_get_siriGestureCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("8bY/L3i3rmxrl4ZjFZZpgQ"));
}

BOOL MobileGestalt_get_siriOfflineCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ZeeiT4Cdn8HNANoqroPEAA"));
}

BOOL MobileGestalt_get_skey()
{
  return MGGetBoolAnswer((const char **)CFSTR("XEzIXVPlevxuEIpZrMY+8A"));
}

UInt8 *MobileGestalt_copy_softwareBehavior()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("7IgVvZZLtNjMFdInQlKg6A"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x869F846FuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_softwareBehavior_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("7IgVvZZLtNjMFdInQlKg6A"));
}

char *MobileGestalt_copy_softwareBundleVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("DViRIxZ/ZwO007CLcEYvZw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_softwareBundleVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("DViRIxZ/ZwO007CLcEYvZw"));
}

float MobileGestalt_get_softwareDimmingAlpha(void *a1)
{
  id v1;
  const void *v2;
  const void *v3;
  CFTypeID v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  v1 = a1;
  valuePtr = -1082130432;
  v2 = MGCopyAnswer((const char **)CFSTR("KXUnLpPZ6IZSE+As45CkhA"));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B711FD4(v5, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  v6 = -1.0;
LABEL_11:

  return v6;
}

BOOL MobileGestalt_get_spatialAudioProfileCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("gB6cQZBLeMojsPAaE/iRtg"));
}

UInt8 *MobileGestalt_copy_speakerCalibrationMiGa()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("jxx29Cq5bGHDnkcha4y/Rw"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x2CB2F81FuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_speakerCalibrationMiGa_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("jxx29Cq5bGHDnkcha4y/Rw"));
}

UInt8 *MobileGestalt_copy_speakerCalibrationSpGa()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("meicxSe0OZJaae1hEiOV5Q"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x5CBEB308uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_speakerCalibrationSpGa_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("meicxSe0OZJaae1hEiOV5Q"));
}

UInt8 *MobileGestalt_copy_speakerCalibrationSpTS()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("Wr2SycNVQwBrdup3ok+LxQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xE0803F48uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_speakerCalibrationSpTS_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("Wr2SycNVQwBrdup3ok+LxQ"));
}

BOOL MobileGestalt_get_sphereCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("n/aVhqpGjESEbIjvJbEHKg"));
}

BOOL MobileGestalt_get_starkCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("L+KOzmOzO5DiJUZl21QGVg"));
}

const void *MobileGestalt_copy_stockholmJcopInfo_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("RgoxDxYGuZ0GzijFt6kSQQ"));
}

BOOL MobileGestalt_get_storeDemoMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("aadL+4GFBDe6DdsUD2HGGw"));
}

const void *MobileGestalt_copy_strictWakeKeyboardCases_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("I4TfkcdXWazwTr1al8Ml5w"));
}

char *MobileGestalt_copy_supplementalBuildVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("gLd6IDfbVM+JiOhktEP7Bw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_supplementalBuildVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("gLd6IDfbVM+JiOhktEP7Bw"));
}

const void *MobileGestalt_copy_supportedDeviceFamilies_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("9MZ5AdH43csAUajl/dU+IQ"));
}

const void *MobileGestalt_copy_supportedKeyboards_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("wBVgxg3VYUU5gawcgq7MXg"));
}

BOOL MobileGestalt_get_supportsBurninMitigation()
{
  return MGGetBoolAnswer((const char **)CFSTR("SR/QIL//glHfqoE+lOAnbA"));
}

BOOL MobileGestalt_get_supportsEDUMU()
{
  return MGGetBoolAnswer((const char **)CFSTR("4fT83+9coO3VAUnlxuOOcw"));
}

BOOL MobileGestalt_get_supportsForceTouch()
{
  return MGGetBoolAnswer((const char **)CFSTR("eQd5mlz0BN0amTp/2ccMoA"));
}

BOOL MobileGestalt_get_supportsIrisCapture()
{
  return MGGetBoolAnswer((const char **)CFSTR("pLzf7OiX5nWAPUMj7BfI4Q"));
}

BOOL MobileGestalt_get_supportsLEDAging()
{
  return MGGetBoolAnswer((const char **)CFSTR("AspYltP/iGWg0qxfg7c/3w"));
}

BOOL MobileGestalt_get_supportsLowPowerMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("f+PE44W6AO2UENJk3p2s5A"));
}

BOOL MobileGestalt_get_supportsPerseus()
{
  return MGGetBoolAnswer((const char **)CFSTR("GdXjx1ixZYvN9Gg8iSf68A"));
}

BOOL MobileGestalt_get_supportsRotateToWake()
{
  return MGGetBoolAnswer((const char **)CFSTR("nmOy2K5HzAAs2QNAi8wR+Q"));
}

BOOL MobileGestalt_get_supportsSOS()
{
  return MGGetBoolAnswer((const char **)CFSTR("5lAK1Xp+ezh1Qu+4jnHAOg"));
}

BOOL MobileGestalt_get_supportsSSHBButtonType()
{
  return MGGetBoolAnswer((const char **)CFSTR("Jq+xaurJgFzSwxOfTqtBGw"));
}

BOOL MobileGestalt_get_supportsTouchRemote()
{
  return MGGetBoolAnswer((const char **)CFSTR("OoFyZnd3oLS2Lw/KQTccGA"));
}

UInt8 *MobileGestalt_copy_sysCfg()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("0Y4fmR6ZHZPxDZFfPtBnRQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x5AC682CAuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_sysCfg_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("0Y4fmR6ZHZPxDZFfPtBnRQ"));
}

const void *MobileGestalt_copy_sysCfgDict_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("9/J7LY7zuYSGW1BcSTRpOw"));
}

char *MobileGestalt_copy_systemImageID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("4qfpxrvLtWillIHpIsVgMA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_systemImageID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("4qfpxrvLtWillIHpIsVgMA"));
}

BOOL MobileGestalt_get_systemTelephonyOfAnyKindCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("NrXe/KHDNhJ4r2SC2bMQyA"));
}

BOOL MobileGestalt_get_tVOutCrossfadeCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("xU1eZLRifcixnyDzjo52DQ"));
}

const void *MobileGestalt_copy_tVOutSettingsCapability_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("kWVFqaGBc3nOGmfM+ZpoEg"));
}

char *MobileGestalt_copy_targetSubType()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("oYicEKzVTz4/CxxE05pEgQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_targetSubType_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("oYicEKzVTz4/CxxE05pEgQ"));
}

BOOL MobileGestalt_get_telephonyCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ZApuwHXWV8RCz0iVzMnqLw"));
}

float MobileGestalt_get_telephonyMaximumGeneration(void *a1)
{
  id v1;
  const void *v2;
  const void *v3;
  CFTypeID v4;
  NSObject *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int valuePtr;

  v1 = a1;
  valuePtr = -1082130432;
  v2 = MGCopyAnswer((const char **)CFSTR("2IDxmg5KyAMBBi/b0rojgQ"));
  if (v2)
  {
    v3 = v2;
    v4 = CFGetTypeID(v2);
    if (v4 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v3, kCFNumberFloat32Type, &valuePtr))
      {
LABEL_10:
        CFRelease(v3);
        v6 = *(float *)&valuePtr;
        goto LABEL_11;
      }
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v5 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        sub_19B712044(v5, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_10;
  }
  v6 = -1.0;
LABEL_11:

  return v6;
}

char *MobileGestalt_copy_thinningProductType()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("0+nc/Udy4WNG8S+Q7a/s1A"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_thinningProductType_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("0+nc/Udy4WNG8S+Q7a/s1A"));
}

BOOL MobileGestalt_get_threadRadioCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("BdS2M69XMEc9v/jsHBC3Eg"));
}

char *MobileGestalt_copy_threadRadioMacAddress()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("0rbLl0hXmTehfEduXfeJYQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_threadRadioMacAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("0rbLl0hXmTehfEduXfeJYQ"));
}

char *MobileGestalt_copy_threadRadioMacAddress64Bit()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("W/xqvBX9L07XHb0BOtYycQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_threadRadioMacAddress64Bit_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("W/xqvBX9L07XHb0BOtYycQ"));
}

char *MobileGestalt_copy_threadRadioMacAddressForProvisioning()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("AGrtXj3nqzz8KFfFHK7/sA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_threadRadioMacAddressForProvisioning_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("AGrtXj3nqzz8KFfFHK7/sA"));
}

BOOL MobileGestalt_get_timeSyncCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("LJ8aZhTg8lXUeVxHzT+hMw"));
}

UInt8 *MobileGestalt_copy_topModuleAuthChipID()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("U/nyu97+Q5SFY9yJKJTuSA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x43F2AD38uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_topModuleAuthChipID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("U/nyu97+Q5SFY9yJKJTuSA"));
}

BOOL MobileGestalt_get_torpedoCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("kT9JwUR2xPCTHTdgvG3UdA"));
}

BOOL MobileGestalt_get_touchDelivery120Hz()
{
  return MGGetBoolAnswer((const char **)CFSTR("2OK50OGmkXM1ospsh766WQ"));
}

BOOL MobileGestalt_get_touchIDCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("8Shl+AdVKo09f1Sldkb0kA"));
}

const void *MobileGestalt_copy_tribecaSettings_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("2tBx5IzZX4CpUVJ79LfsVg"));
}

UInt8 *MobileGestalt_copy_tristarID()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("o60T6wXe1DDaO4a4gw10TA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xC8787D91uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_tristarID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("o60T6wXe1DDaO4a4gw10TA"));
}

uint64_t MobileGestalt_get_uiBackgroundQuality(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("eH9J8yYIjbRNxg2EeYvNFg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B7120B4(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_uiParallaxCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("mmu76v66k1dAtghToInT8g"));
}

BOOL MobileGestalt_get_uiProceduralWallpaperCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("UZyrJHlX635ocWEjBkt9YA"));
}

BOOL MobileGestalt_get_uiReachability()
{
  return MGGetBoolAnswer((const char **)CFSTR("m4UsCAgXhbdnwLebiyKMiw"));
}

BOOL MobileGestalt_get_umtsDeviceCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("0Yu30fwSQVPKvHVla17kXw"));
}

BOOL MobileGestalt_get_unifiedIPodCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("sJ0n0UZHSUVJbmyy2p54Cw"));
}

uint64_t MobileGestalt_get_uniqueChipID(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t valuePtr;

  v1 = a1;
  v2 = -1;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("TF31PAB6aO8KAbPyNKSxKA"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt64Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B712124(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

char *MobileGestalt_copy_uniqueChipIDString()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("6WdGcQGw4VLzrgxJo+bcrw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_uniqueChipIDString_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("6WdGcQGw4VLzrgxJo+bcrw"));
}

char *MobileGestalt_copy_uniqueDeviceID()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("re6Zb+zwFKJNlkQTUeT+/w"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_uniqueDeviceID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("re6Zb+zwFKJNlkQTUeT+/w"));
}

UInt8 *MobileGestalt_copy_uniqueDeviceIDData()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("nFRqKto/RuQAV1P+0/qkBA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x661DF88DuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_uniqueDeviceIDData_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("nFRqKto/RuQAV1P+0/qkBA"));
}

char *MobileGestalt_copy_userAssignedDeviceName()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("ghpAuGJlPoauWijdtPi7sQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_userAssignedDeviceName_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("ghpAuGJlPoauWijdtPi7sQ"));
}

UInt8 *MobileGestalt_copy_userIntentPhysicalButtonCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("pMeQxE5szZTjLMk10TisDQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x122D74E8uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_userIntentPhysicalButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("pMeQxE5szZTjLMk10TisDQ"));
}

char *MobileGestalt_copy_userIntentPhysicalButtonCGRectString()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("rJkMAGeVLdhP5+10G5hVcA"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_userIntentPhysicalButtonCGRectString_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("rJkMAGeVLdhP5+10G5hVcA"));
}

UInt8 *MobileGestalt_copy_userIntentPhysicalButtonNormalizedCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("WPEkba78QeFFU/wgqpOx6w"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x9EE44FuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_userIntentPhysicalButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("WPEkba78QeFFU/wgqpOx6w"));
}

UInt8 *MobileGestalt_copy_vMUniqueDeviceIDData()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("sjGZBQzow3yV/IOa0wCeoQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x5EBF1FD3uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_vMUniqueDeviceIDData_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("sjGZBQzow3yV/IOa0wCeoQ"));
}

BOOL MobileGestalt_get_vOIPCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("9ZqSL68MJyQESzQFDvKqXA"));
}

const void *MobileGestalt_copy_vSHCompensationMinimumNits_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("HBf5L3fT108kze+YWeiy+w"));
}

BOOL MobileGestalt_get_veniceCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("5MSZn7w3nnJp22VbpqaxLQ"));
}

BOOL MobileGestalt_get_vibratorCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("/9luHerXthRoPoNt/PVkTg"));
}

BOOL MobileGestalt_get_videoCameraCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("nteaxwXwZWYUI9z46VDRnA"));
}

BOOL MobileGestalt_get_videoStillsCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("PxLTGkQx9GkeYcJKOaZguA"));
}

BOOL MobileGestalt_get_voiceControlCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("tuwdHA2NDGnLajCo5K3UUA"));
}

BOOL MobileGestalt_get_volumeButtonCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("4I0hOaR3n80379Vka7u+Xg"));
}

UInt8 *MobileGestalt_copy_volumeDownButtonCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("PdprWthPO6YyrO6p1vLRgQ"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xFF7CB54uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_volumeDownButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("PdprWthPO6YyrO6p1vLRgQ"));
}

UInt8 *MobileGestalt_copy_volumeDownButtonNormalizedCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("SbXytSPZXB1jQ8GLZOxCPw"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xA8BCAD49uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_volumeDownButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("SbXytSPZXB1jQ8GLZOxCPw"));
}

UInt8 *MobileGestalt_copy_volumeUpButtonCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("aD51uqjUwgRKjAC04BCrxg"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x2AFF3A01uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_volumeUpButtonCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("aD51uqjUwgRKjAC04BCrxg"));
}

UInt8 *MobileGestalt_copy_volumeUpButtonNormalizedCGRect()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("913P3Zsei09w0GSSOaBD+w"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xCDA48761uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_volumeUpButtonNormalizedCGRect_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("913P3Zsei09w0GSSOaBD+w"));
}

uint64_t MobileGestalt_get_wAGraphicQuality(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("xYu8vn4nnbLnNTbBe0FT+w"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B712194(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

BOOL MobileGestalt_get_wapiCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("hiHut/WR+B9Lx/vd0WyeNg"));
}

uint64_t MobileGestalt_get_wLANBkgScanCache(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("PLQ6xgfGji63NbFu+sjeYg"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B712204(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

UInt8 *MobileGestalt_copy_wSKU()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("gD8SNRcHQeIxCAvsp+2vjA"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x1B1666A3uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_wSKU_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("gD8SNRcHQeIxCAvsp+2vjA"));
}

BOOL MobileGestalt_get_watchAppButtonCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("FBw/2WrPE2supEKosxxoTw"));
}

BOOL MobileGestalt_get_watchCompanionCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("fucd7llSuoCNHrrvLS1QQg"));
}

BOOL MobileGestalt_get_watchKeyboardCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("MQJ1mlVrhOwaUUVJehJSVA"));
}

BOOL MobileGestalt_get_watchSupportsAutoPlaylistPlayback()
{
  return MGGetBoolAnswer((const char **)CFSTR("CnoPCMssOh+xPJJo6pvnog"));
}

BOOL MobileGestalt_get_watchSupportsHighQualityClockFaceGraphics()
{
  return MGGetBoolAnswer((const char **)CFSTR("Zmd7xYUw9EutGXifzpvfsA"));
}

BOOL MobileGestalt_get_watchSupportsListeningOnGesture()
{
  return MGGetBoolAnswer((const char **)CFSTR("Xa9nxhMDoHTdmrn/FufA3g"));
}

BOOL MobileGestalt_get_watchSupportsMusicStreaming()
{
  return MGGetBoolAnswer((const char **)CFSTR("/bfa1LxXd7G1WqHujpjsdA"));
}

BOOL MobileGestalt_get_watchSupportsSiriCommute()
{
  return MGGetBoolAnswer((const char **)CFSTR("mY5R+ZIWxy5BDEEZTeWlHQ"));
}

BOOL MobileGestalt_get_wifiCallingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("/6FWCRjN1yRdUABG9vF8ow"));
}

BOOL MobileGestalt_get_wifiCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("P6z8eNrRPcv0AcKPML0iow"));
}

char *MobileGestalt_copy_wifiChipsetRevision()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("wYMBabAO8VguyDDVgCsPdg"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiChipsetRevision_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("wYMBabAO8VguyDDVgCsPdg"));
}

char *MobileGestalt_copy_wifiAddress()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("gI6iODv8MZuiP0IA+efJCw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiAddress_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("gI6iODv8MZuiP0IA+efJCw"));
}

UInt8 *MobileGestalt_copy_wifiAntennaSKUVersion()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("sFTm4FEVKVfdZ0ChdwQY1g"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x242CB154uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_wifiAntennaSKUVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("sFTm4FEVKVfdZ0ChdwQY1g"));
}

BOOL MobileGestalt_get_wifiCallingSecondaryDeviceCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("eLfYx8jpSlim2NZFIonPzA"));
}

char *MobileGestalt_copy_wifiChipset()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("NaA/zJV7myg2w4YNmSe4yQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiChipset_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("NaA/zJV7myg2w4YNmSe4yQ"));
}

char *MobileGestalt_copy_wifiFirmwareVersion()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("uB6I2WImAHd8DEGuqYcMbw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiFirmwareVersion_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("uB6I2WImAHd8DEGuqYcMbw"));
}

char *MobileGestalt_copy_wifiVendor()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("c7fCSBIbX1mFaRoKT5zTIw"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wifiVendor_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("c7fCSBIbX1mFaRoKT5zTIw"));
}

char *MobileGestalt_copy_wirelessBoardSnum()
{
  const __CFString *v0;
  const __CFString *v1;
  char *v2;
  char buffer[1024];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = (const __CFString *)MGCopyAnswer((const char **)CFSTR("XrPbSCNx9X7Lyw9oGPgMDQ"));
  if (!v0)
    return 0;
  v1 = v0;
  bzero(buffer, 0x400uLL);
  CFStringGetCString(v1, buffer, 1024, 0x8000100u);
  v2 = strdup(buffer);
  CFRelease(v1);
  return v2;
}

const void *MobileGestalt_copy_wirelessBoardSnum_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("XrPbSCNx9X7Lyw9oGPgMDQ"));
}

BOOL MobileGestalt_get_wirelessChargingCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("PpmzzBVLpZVubmP0tCIymg"));
}

BOOL MobileGestalt_get_workoutUltraMode()
{
  return MGGetBoolAnswer((const char **)CFSTR("fu+4kyf8VcMBtgbMyJlLtg"));
}

UInt8 *MobileGestalt_copy_yonkersChipID()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("2/q9qmqGigMfkzY830Zf2g"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xB2A2566DuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_yonkersChipID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("2/q9qmqGigMfkzY830Zf2g"));
}

UInt8 *MobileGestalt_copy_yonkersSerialNumber()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("67Dsh4G8EGQp4WbPDfS/Xw"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0xB1D4E3DuLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_yonkersSerialNumber_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("67Dsh4G8EGQp4WbPDfS/Xw"));
}

UInt8 *MobileGestalt_copy_yonkersUID()
{
  const __CFData *v0;
  const __CFData *v1;
  size_t Length;
  UInt8 *v3;
  CFRange v5;

  v0 = (const __CFData *)MGCopyAnswer((const char **)CFSTR("bwLsbkp4shhHuNB5VpRa8w"));
  if (!v0)
    return 0;
  v1 = v0;
  Length = CFDataGetLength(v0);
  v3 = (UInt8 *)malloc_type_malloc(Length, 0x8ED01875uLL);
  v5.location = 0;
  v5.length = Length;
  CFDataGetBytes(v1, v5, v3);
  CFRelease(v1);
  return v3;
}

const void *MobileGestalt_copy_yonkersUID_obj()
{
  return (id)MGCopyAnswer((const char **)CFSTR("bwLsbkp4shhHuNB5VpRa8w"));
}

BOOL MobileGestalt_get_youtubeCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("pCbWB0w5vhsKbGJHs/c1jQ"));
}

BOOL MobileGestalt_get_youtubePluginCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("81Zj1535/jeXbmfOndlIVA"));
}

BOOL MobileGestalt_get_iAP2Capability()
{
  return MGGetBoolAnswer((const char **)CFSTR("ZepchaN1K8XQJaBUMMlV5w"));
}

BOOL MobileGestalt_get_iPadCapability()
{
  return MGGetBoolAnswer((const char **)CFSTR("uKc7FPnEO++lVhHWHFlGbQ"));
}

uint64_t MobileGestalt_get_iTunesFamilyID(void *a1)
{
  id v1;
  uint64_t v2;
  const void *v3;
  const void *v4;
  CFTypeID v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int valuePtr;

  v1 = a1;
  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  v3 = MGCopyAnswer((const char **)CFSTR("1qJmMHedWOh43VwRKPdDrw"));
  if (v3)
  {
    v4 = v3;
    v5 = CFGetTypeID(v3);
    if (v5 == CFNumberGetTypeID())
    {
      if (CFNumberGetValue((CFNumberRef)v4, kCFNumberSInt32Type, &valuePtr))
      {
LABEL_9:
        CFRelease(v4);
        v2 = valuePtr;
        goto LABEL_10;
      }
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B70F458();
    }
    else
    {
      objc_msgSend(v1, "log");
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        sub_19B712274(v6, v7, v8, v9, v10, v11, v12, v13);
    }

    goto LABEL_9;
  }
LABEL_10:

  return v2;
}

void sub_19B6F48E8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_19B6F48F8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

uint64_t _MGIterateDevices(int a1, char *name, uint64_t a3)
{
  uint64_t result;
  io_object_t v6;
  const __CFDictionary *v8;
  _QWORD v9[5];
  io_iterator_t existing;

  if (a1 == 5)
  {
    result = IORegistryEntryFromPath(*MEMORY[0x1E0CBBAA8], name);
    if ((_DWORD)result)
    {
      v6 = result;
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, result);
      return IOObjectRelease(v6);
    }
  }
  else
  {
    v8 = (const __CFDictionary *)sub_19B6F4A2C(a1, name);
    if (v8)
    {
      existing = 0;
      result = IOServiceGetMatchingServices(*MEMORY[0x1E0CBBAA8], v8, &existing);
      if (!(_DWORD)result)
      {
        v9[0] = MEMORY[0x1E0C809B0];
        v9[1] = 0x40000000;
        v9[2] = sub_19B6F4AA8;
        v9[3] = &unk_1E3BD13B0;
        v9[4] = a3;
        sub_19B6DBD44(existing, (uint64_t)v9);
        return IOObjectRelease(existing);
      }
    }
    else
    {
      return fprintf((FILE *)*MEMORY[0x1E0C80C10], "couldn't get matching dictionary for %d:%s\n", a1, name);
    }
  }
  return result;
}

void *sub_19B6F4A2C(int a1, char *name)
{
  void *result;

  switch(a1)
  {
    case 1:
      result = IOServiceNameMatching(name);
      break;
    case 2:
      result = IOServiceMatching(name);
      break;
    case 3:
      result = IOBSDNameMatching(*MEMORY[0x1E0CBBAA8], 0, name);
      break;
    case 4:
      result = (void *)sub_19B6B7518(name);
      break;
    case 5:
      result = 0;
      break;
    default:
      abort();
  }
  return result;
}

uint64_t sub_19B6F4AA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void _MGWaitForDevices(int a1, char *a2, int a3, uint64_t a4, uint64_t a5)
{
  void *v10;
  _QWORD v11[5];

  if (a1 == 5)
    sub_19B7122E4();
  v10 = sub_19B6F4A2C(a1, a2);
  if (v10)
  {
    if (!a3)
    {
      if (!a5)
        sub_19B71230C();
      a3 = 1;
    }
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = sub_19B6F4B7C;
    v11[3] = &unk_1E3BD13D8;
    v11[4] = a4;
    sub_19B6DC768((uint64_t)v10, a3, (uint64_t)v11, a5);
  }
  else
  {
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "couldn't get matching dictionary for %d:%s\n", a1, a2);
  }
}

uint64_t sub_19B6F4B7C(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

__CFDictionary *_MGCopyDeviceDescription(uint64_t a1, const __CFArray *a2, int a3, const char *a4, int a5)
{
  const char *v6;
  char v7;

  if (a3 == 1)
    v6 = 0;
  else
    v6 = a4;
  if (a3 == 3)
  {
    v7 = 1;
  }
  else
  {
    a4 = v6;
    v7 = 0;
  }
  return sub_19B6F4BC8(a1, a2, 1, a4, v7, a5, 0);
}

__CFDictionary *sub_19B6F4BC8(uint64_t a1, const __CFArray *a2, int a3, const char *a4, char a5, int a6, void *a7)
{
  __CFDictionary *Mutable;
  CFStringRef v14;
  CFStringRef v15;
  CFStringRef v16;
  const void *v17;
  CFTypeRef v18;
  _QWORD v20[9];
  char v21;
  char v22;
  char v23;
  _QWORD v24[3];
  int v25;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  _QWORD v31[5];
  int v32;
  char v33;
  void *v34;
  io_name_t className;
  char cStr[16];
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v34 = a7;
  Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)cStr = 0u;
  v37 = 0u;
  memset(className, 0, sizeof(className));
  v33 = 0;
  if (!MEMORY[0x1A1AC47F4](a1, cStr))
  {
    v14 = CFStringCreateWithCString(0, cStr, 0x8000100u);
    CFDictionarySetValue(Mutable, CFSTR("0:Name"), v14);
    CFRelease(v14);
  }
  if (!IOObjectGetClass(a1, className))
  {
    v15 = CFStringCreateWithCString(0, className, 0x8000100u);
    CFDictionarySetValue(Mutable, CFSTR("1:Class"), v15);
    CFRelease(v15);
  }
  sub_19B6F51D8(a1, Mutable, CFSTR("2:IOService Path"), "IOService", a4, (const char **)&v34, &v33);
  sub_19B6F51D8(a1, Mutable, CFSTR("2:IODeviceTree Path"), "IODeviceTree", a4, (const char **)&v34, &v33);
  if (a4 && strcmp(a4, "IOService") && strcmp(a4, "IODeviceTree"))
  {
    v16 = CFStringCreateWithFormat(0, 0, CFSTR("2:%s Path"), a4);
    sub_19B6F51D8(a1, Mutable, v16, a4, a4, (const char **)&v34, &v33);
    CFRelease(v16);
  }
  if (a3)
  {
    cf = 0;
    if (a2)
    {
      v17 = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      cf = v17;
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 0x40000000;
      v31[2] = sub_19B6F53A4;
      v31[3] = &unk_1E3BD13F8;
      v32 = a1;
      v31[4] = v17;
      sub_19B6C0340(a2, (uint64_t)v31);
      if (v17)
      {
LABEL_12:
        if (a6)
        {
          v30[0] = MEMORY[0x1E0C809B0];
          v30[1] = 0x40000000;
          v30[2] = sub_19B6F5414;
          v30[3] = &unk_1E3BD1418;
          v30[4] = v17;
          sub_19B6B861C((const __CFDictionary *)v17, (uint64_t)v30);
          v17 = cf;
        }
        CFDictionarySetValue(Mutable, CFSTR("3:Properties"), v17);
        CFRelease(cf);
        goto LABEL_15;
      }
    }
    else
    {
      IORegistryEntryCreateCFProperties(a1, (CFMutableDictionaryRef *)&cf, 0, 0);
      v17 = cf;
      if (cf)
        goto LABEL_12;
    }
    CFDictionarySetValue(Mutable, CFSTR("3:Properties"), CFSTR("*** NOT PRESENT ***"));
    if (!a4)
      goto LABEL_19;
    goto LABEL_16;
  }
LABEL_15:
  if (!a4)
    goto LABEL_19;
LABEL_16:
  cf = 0;
  p_cf = &cf;
  v28 = 0x2000000000;
  v29 = 0;
  v24[0] = 0;
  v24[1] = v24;
  v24[2] = 0x2000000000;
  v25 = 0;
  v20[0] = MEMORY[0x1E0C809B0];
  v20[1] = 0x40000000;
  v20[2] = sub_19B6F54C4;
  v20[3] = &unk_1E3BD1440;
  v21 = a3 & a5;
  v20[6] = a2;
  v20[7] = a4;
  v22 = a5;
  v23 = a6;
  v20[8] = v34;
  v20[4] = v24;
  v20[5] = &cf;
  sub_19B6DBE88(a1, (uint64_t)a4, (uint64_t)v20);
  v18 = p_cf[3];
  if (v18)
  {
    CFDictionarySetValue(Mutable, CFSTR("4:Children"), v18);
    CFRelease(p_cf[3]);
  }
  _Block_object_dispose(v24, 8);
  _Block_object_dispose(&cf, 8);
LABEL_19:
  if (v33)
    free(v34);
  return Mutable;
}

CFMutableDictionaryRef _MGPrintIteratedDeviceDescription(FILE *a1, int a2, int a3, char *a4, int a5, int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  return sub_19B6F4FFC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, 0);
}

CFMutableDictionaryRef sub_19B6F4FFC(FILE *__stream, int a2, int a3, char *name, int a5, int a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10, char a11)
{
  char *v15;
  uint64_t v19;
  char v20;
  int v21;
  CFMutableDictionaryRef v23;
  CFMutableDictionaryRef Mutable;
  _QWORD v27[9];
  int v28;
  int v29;
  int v30;
  char v31;
  _QWORD v32[3];
  int v33;

  v15 = name;
  v19 = a10;
  v20 = a11;
  v32[0] = 0;
  v32[1] = v32;
  v32[2] = 0x2000000000;
  v33 = 0;
  v21 = a2 & 4;
  if (__stream)
  {
    if ((a2 & 4) != 0)
    {
      sub_19B6F669C(__stream);
      v20 = a11;
      v19 = a10;
      v15 = name;
    }
    v23 = 0;
  }
  else
  {
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v20 = a11;
    v19 = a10;
    v15 = name;
    v23 = Mutable;
  }
  v27[0] = MEMORY[0x1E0C809B0];
  v27[1] = 0x40000000;
  v27[2] = sub_19B6F5674;
  v27[3] = &unk_1E3BD1468;
  v31 = v20;
  v27[4] = v32;
  v27[5] = a8;
  v27[6] = v19;
  v27[7] = __stream;
  v28 = a9;
  v29 = v21;
  v30 = a2;
  v27[8] = v23;
  if (a5)
  {
    _MGWaitForDevices(a3, v15, a6, (uint64_t)v27, a7);
    if (!__stream)
      goto LABEL_12;
  }
  else
  {
    _MGIterateDevices(a3, v15, (uint64_t)v27);
    if (!__stream)
      goto LABEL_12;
  }
  if (v21)
    sub_19B6F67D4(__stream);
LABEL_12:
  _Block_object_dispose(v32, 8);
  return v23;
}

CFMutableDictionaryRef _MGCopyIteratedDeviceDescription(int a1, char *name, int a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, char a9)
{
  return sub_19B6F4FFC(0, 0, a1, name, a3, a4, a5, a6, a7, a8, a9);
}

void sub_19B6F51D8(uint64_t a1, __CFDictionary *a2, const void *a3, const char *a4, const char *a5, const char **a6, _BYTE *a7)
{
  size_t v13;
  CFStringRef v14;
  CFStringRef v15;
  size_t v16;
  size_t v17;
  CFStringRef v18;
  size_t v19;
  char __s[16];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  *(_OWORD *)__s = 0u;
  v21 = 0u;
  if (!MEMORY[0x1A1AC4800](a1, a4, __s))
  {
    if (!a5 || strcmp(a5, a4))
    {
      v13 = strlen(a4);
      v14 = CFStringCreateWithCString(0, &__s[v13 + 1], 0x8000100u);
LABEL_5:
      v15 = v14;
      CFDictionarySetValue(a2, a3, v14);
      CFRelease(v15);
      return;
    }
    if (*a6)
    {
      v16 = strlen(*a6);
      v14 = CFStringCreateWithFormat(0, 0, CFSTR(".../%s"), &__s[v16 + 1]);
      goto LABEL_5;
    }
    v17 = strlen(a4);
    v18 = CFStringCreateWithCString(0, &__s[v17 + 1], 0x8000100u);
    CFDictionarySetValue(a2, a3, v18);
    CFRelease(v18);
    v19 = strlen(__s) - 1;
    if (__s[v19] == 47)
      __s[v19] = 0;
    *a6 = strdup(__s);
    *a7 = 1;
  }
}

void sub_19B6F53A4(uint64_t a1, const __CFString *a2)
{
  CFTypeRef CFProperty;
  __CFDictionary *v5;

  CFProperty = IORegistryEntryCreateCFProperty(*(_DWORD *)(a1 + 40), a2, 0, 0);
  v5 = *(__CFDictionary **)(a1 + 32);
  if (CFProperty)
  {
    CFDictionarySetValue(v5, a2, CFProperty);
    CFRelease(CFProperty);
  }
  else
  {
    CFDictionarySetValue(v5, a2, CFSTR("*** NOT PRESENT ***"));
  }
}

void sub_19B6F5414(uint64_t a1, const void *a2, CFTypeRef cf)
{
  CFTypeID v6;
  const __CFData *v7;
  const __CFData *v8;
  CFIndex Length;
  CFStringRef v10;

  v6 = CFGetTypeID(cf);
  if (v6 == CFDataGetTypeID())
  {
    v7 = sub_19B6C03D0((CFDataRef)cf);
    if (v7)
    {
      v8 = v7;
      Length = CFDataGetLength((CFDataRef)cf);
      v10 = CFStringCreateWithFormat(0, 0, CFSTR("Decoded Data[%lld]: %@"), Length, v8);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 32), a2, v10);
      CFRelease(v10);
      CFRelease(v8);
    }
  }
}

void sub_19B6F54C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const void *v5;
  CFStringRef v6;
  char *v7;
  char *v8;
  __CFDictionary *v9;
  char cStr[16];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v4 = sub_19B6F4BC8(a2, *(_QWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 72), *(_QWORD *)(a1 + 56), *(unsigned __int8 *)(a1 + 73), *(unsigned __int8 *)(a1 + 74), *(_QWORD *)(a1 + 64));
  if (v4)
  {
    v5 = (const void *)v4;
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v32 = 0u;
    v33 = 0u;
    v30 = 0u;
    v31 = 0u;
    v28 = 0u;
    v29 = 0u;
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    *(_OWORD *)cStr = 0u;
    v11 = 0u;
    if (MEMORY[0x1A1AC4800](a2, *(_QWORD *)(a1 + 56), cStr))
    {
      v6 = CFStringCreateWithFormat(0, 0, CFSTR("Unknown Child %d"), *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    }
    else
    {
      v7 = cStr;
      if (*(unsigned __int16 *)cStr != 47)
      {
        v8 = rindex(cStr, 47);
        if (v8)
          v7 = v8 + 1;
      }
      v6 = CFStringCreateWithCString(0, v7, 0x8000100u);
    }
    v9 = *(__CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    if (!v9)
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      v9 = *(__CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    }
    CFDictionarySetValue(v9, v6, v5);
    CFRelease(v5);
    CFRelease(v6);
  }
}

void sub_19B6F5674(uint64_t a1, uint64_t a2)
{
  int v4;
  const char *v5;
  const char *v6;
  __CFDictionary *v7;
  __CFDictionary *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  CFStringRef v14;
  FILE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  char v27;
  time_t v28;
  char __s[16];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v28 = time(0);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  *(_OWORD *)__s = 0u;
  v30 = 0u;
  ctime_r(&v28, __s);
  __s[strlen(__s) - 1] = 0;
  v4 = *(_DWORD *)(a1 + 72);
  if (v4 == 1)
    v5 = 0;
  else
    v5 = *(const char **)(a1 + 48);
  if (v4 == 3)
    v6 = *(const char **)(a1 + 48);
  else
    v6 = v5;
  v7 = sub_19B6F4BC8(a2, *(const __CFArray **)(a1 + 40), 1, v6, v4 == 3, *(unsigned __int8 *)(a1 + 84) != 0, 0);
  if (v7)
  {
    v8 = v7;
    v25 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
    v14 = CFStringCreateWithFormat(0, 0, CFSTR("%5d: %s"));
    v15 = *(FILE **)(a1 + 56);
    if (v15)
    {
      if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      {
        sub_19B6F6800(v15, *(_DWORD *)(a1 + 76), "\n--------------\n", v9, v10, v11, v12, v13, v25);
        v15 = *(FILE **)(a1 + 56);
      }
      sub_19B6F6800(v15, *(_DWORD *)(a1 + 76), "%@\n", v9, v10, v11, v12, v13, (char)v14);
      sub_19B6F6828(*(FILE **)(a1 + 56), v8, 0, *(unsigned int *)(a1 + 80), v16, v17, v18, v19, v26);
      sub_19B6F6800(*(FILE **)(a1 + 56), *(_DWORD *)(a1 + 76), "\n", v20, v21, v22, v23, v24, v27);
    }
    else
    {
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), v14, v8);
    }
    CFRelease(v14);
    CFRelease(v8);
    ++*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  }
}

void _MGWriteCache()
{
  const CFDictionaryKeyCallBacks *v0;
  const CFDictionaryValueCallBacks *v1;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v3;
  __CFData *v4;
  UInt8 *MutableBytePtr;
  const void *v6;
  char *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _DWORD *v14;
  const char *v15;
  const char **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  const void *v24;
  const void *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  _DWORD *v34;
  uint64_t v35;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  char *v45;
  const __CFAllocator *v46;
  size_t v47;
  const __CFURL *v48;
  const __CFURL *v49;
  const __CFURL *v50;
  const __CFURL *v51;
  int v52;
  CFStringRef v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  const char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  const char *v74;
  NSObject *v75;
  const char *v76;
  uint32_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  __CFDictionary *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  const char *v92;
  void (*v93)(__CFDictionary *, const char *);
  char v94;
  char *v95;
  __CFDictionary *cf;
  int v97;
  int v98;
  CFErrorRef error;
  uint64_t v100;
  uint8_t buf[4];
  _BYTE v102[10];
  const char *v103;
  int v104;
  __int16 v105;
  int v106;
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  if ((sub_19B6E3E3C() & 1) != 0)
  {
    _MGClearInProcessCache();
    v0 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E0C9B390];
    v1 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E0C9B3A0];
    Mutable = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v3 = CFDictionaryCreateMutable(0, 0, v0, v1);
    v4 = CFDataCreateMutable(0, 5877);
    CFDataSetLength(v4, 5877);
    MutableBytePtr = CFDataGetMutableBytePtr(v4);
    v6 = MGCopyAnswer((const char **)CFSTR("mZfUC7qo4pURNhyMHZ62RQ"));
    CFDictionarySetValue(Mutable, CFSTR("CacheVersion"), v6);
    CFDictionarySetValue(Mutable, CFSTR("CacheData"), v4);
    CFDictionarySetValue(Mutable, CFSTR("CacheExtra"), v3);
    cf = Mutable;
    CFDictionarySetValue(Mutable, CFSTR("CacheUUID"), CFSTR("6A95A6E7-2B39-465E-8033-52225E7279F7"));
    CFRelease(v6);
    CFRelease(v4);
    CFRelease(v3);
    v98 = -1;
    v7 = (char *)sub_19B6C1B68(&v98);
    v8 = v98;
    v95 = v7;
    if (v98 < 1)
    {
      v13 = 0;
      v12 = 0;
      v11 = 0;
      v10 = 0;
      v97 = 0;
    }
    else
    {
      v9 = 0;
      v97 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = v7 + 156;
      do
      {
        v15 = *(const char **)(v14 - 39);
        if (v15)
        {
          ++v13;
          if (*((__int16 *)v14 - 1) != -1)
            ++v12;
          if ((*(_BYTE *)(v14 - 1) & 0x10) != 0)
          {
            v16 = (const char **)CFStringCreateWithCString(0, v15, 0x8000100u);
            v17 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
            if (v17)
              v23 = v17 + 1;
            else
              v23 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            _MGLog((uint64_t)v23, 469, (uint64_t)CFSTR("MGCache: Invoking %@"), v18, v19, v20, v21, v22, (char)v16);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v102 = v16;
              _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "MGCache: Invoking %@", buf, 0xCu);
            }
            v24 = MGCopyAnswer(v16);
            if (v24)
            {
              v25 = v24;
              if (*v14 > 0xBu || ((1 << *v14) & 0x8E0) == 0)
              {
                CFDictionarySetValue(v3, v16, v24);
                ++v10;
              }
              CFRelease(v25);
            }
            else
            {
              ++v97;
            }
            ++v11;
            CFRelease(v16);
            v8 = v98;
          }
        }
        ++v9;
        v14 += 40;
      }
      while (v9 < v8);
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD35BC0);
    v33 = v98;
    if (v98 >= 1)
    {
      v34 = v95 + 156;
      do
      {
        if ((*(_BYTE *)(v34 - 1) & 0x10) != 0)
        {
          v35 = *((__int16 *)v34 - 1);
          if (*((_BYTE *)&qword_1ECD36028[653] + v35))
          {
            if (*v34 <= 0xBu && ((1 << *v34) & 0x8E0) != 0)
            {
              *(_QWORD *)&MutableBytePtr[8 * v35] = qword_1ECD36028[v35];
              MutableBytePtr[*((__int16 *)v34 - 1) + 5224] = 1;
              ++v10;
            }
          }
        }
        v34 += 40;
        --v33;
      }
      while (v33);
    }
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD35BC0);
    v37 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v37)
      v43 = v37 + 1;
    else
      v43 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v43, 531, (uint64_t)CFSTR("%d total, %d cacheable, %d precacheable, %d precached, %d null"), v38, v39, v40, v41, v42, v13);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)v102 = v13;
      *(_WORD *)&v102[4] = 1024;
      *(_DWORD *)&v102[6] = v12;
      LOWORD(v103) = 1024;
      *(_DWORD *)((char *)&v103 + 2) = v11;
      HIWORD(v103) = 1024;
      v104 = v10;
      v105 = 1024;
      v106 = v97;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%d total, %d cacheable, %d precacheable, %d precached, %d null", buf, 0x20u);
    }
    error = 0;
    v100 = 1;
    v44 = (const char *)container_system_group_path_for_identifier();
    if (!v44)
    {
      v61 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v61)
        v67 = v61 + 1;
      else
        v67 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v67, 349, (uint64_t)CFSTR("Failed to look up system group container path: %llu"), v62, v63, v64, v65, v66, v100);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)v102 = v100;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to look up system group container path: %llu", buf, 0xCu);
      }
      goto LABEL_72;
    }
    v45 = (char *)v44;
    if (strstr("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist", v44))
    {
      v46 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v47 = strlen(v45);
      v48 = CFURLCreateFromFileSystemRepresentation((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (const UInt8 *)v45, v47, 1u);
      if (v48)
      {
        v49 = v48;
        v50 = CFURLCreateCopyAppendingPathComponent(v46, v48, CFSTR("Library"), 1u);
        v51 = v50;
        if (v50)
        {
          v52 = 1;
          if (!CFURLSetResourcePropertyForKey(v50, (CFStringRef)*MEMORY[0x1E0C9B4E8], (CFTypeRef)*MEMORY[0x1E0C9AE50], &error)&& error)
          {
            v53 = CFErrorCopyDescription(error);
            v54 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
            if (v54)
              v60 = v54 + 1;
            else
              v60 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
            _MGLog((uint64_t)v60, 376, (uint64_t)CFSTR("Failed to set backup exclusion for path: %@"), v55, v56, v57, v58, v59, (char)v51);
            if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 138412290;
              *(_QWORD *)v102 = v51;
              _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to set backup exclusion for path: %@", buf, 0xCu);
            }
            CFRelease(v53);
            CFRelease(error);
            goto LABEL_80;
          }
        }
        else
        {
          v86 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
          if (v86)
            v92 = v86 + 1;
          else
            v92 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
          _MGLog((uint64_t)v92, 369, (uint64_t)CFSTR("Failed to allocate container backup exclusion URL from %@"), v87, v88, v89, v90, v91, (char)v49);
          v52 = 0;
          if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138412290;
            *(_QWORD *)v102 = v49;
            _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to allocate container backup exclusion URL from %@", buf, 0xCu);
LABEL_80:
            v52 = 0;
          }
        }
        free(v45);
        CFRelease(v49);
        if (v51)
        {
          CFRelease(v51);
          v85 = cf;
          if ((v52 & 1) != 0)
            goto LABEL_85;
        }
        else
        {
          v85 = cf;
          if (v52)
          {
LABEL_85:
            v93 = (void (*)(__CFDictionary *, const char *))*((_QWORD *)off_1EE3FD5A0 + 51);
            if (!v93)
              v93 = (void (*)(__CFDictionary *, const char *))sub_19B6BBD84(51, 2);
            v93(v85, "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist");
          }
        }
LABEL_73:
        CFRelease(v85);
        return;
      }
      v78 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v78)
        v84 = v78 + 1;
      else
        v84 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v84, 363, (uint64_t)CFSTR("Failed to allocate container URL from %s"), v79, v80, v81, v82, v83, (char)v45);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_71;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v102 = v45;
      v75 = MEMORY[0x1E0C81028];
      v76 = "Failed to allocate container URL from %s";
      v77 = 12;
    }
    else
    {
      v68 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v68)
        v74 = v68 + 1;
      else
        v74 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v74, 357, (uint64_t)CFSTR("System group container path: %s should match expected gestalt cache path: %s"), v69, v70, v71, v72, v73, (char)v45);
      if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
        goto LABEL_71;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)v102 = v45;
      *(_WORD *)&v102[8] = 2080;
      v103 = "/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.appl"
             "e.MobileGestalt.plist";
      v75 = MEMORY[0x1E0C81028];
      v76 = "System group container path: %s should match expected gestalt cache path: %s";
      v77 = 22;
    }
    _os_log_impl(&dword_19B6B1000, v75, OS_LOG_TYPE_DEFAULT, v76, buf, v77);
LABEL_71:
    free(v45);
LABEL_72:
    v85 = cf;
    goto LABEL_73;
  }
  v26 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v26)
    v32 = v26 + 1;
  else
    v32 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  _MGLog((uint64_t)v32, 410, (uint64_t)CFSTR("IOKit is still busy, don't build cache"), v27, v28, v29, v30, v31, v94);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "IOKit is still busy, don't build cache", buf, 2u);
  }
}

void _MGClearInProcessCache()
{
  char *v0;
  int v1;
  uint64_t v2;
  __int16 *v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  int v7;
  const void *v9;
  int v10;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_1ECD35BC0);
  v10 = -1;
  v0 = (char *)sub_19B6C1B68(&v10);
  v1 = v10;
  if (v10 >= 1)
  {
    v2 = 0;
    v3 = (__int16 *)(v0 + 154);
    do
    {
      v4 = *v3;
      if (v4 != -1 && *((_BYTE *)&qword_1ECD36028[653] + v4))
      {
        v5 = *(_DWORD *)(v3 + 1);
        v6 = v5 > 0xB;
        v7 = (1 << v5) & 0x8E0;
        if (v6 || v7 == 0)
        {
          v9 = (const void *)qword_1ECD36028[v4];
          if (v9)
          {
            CFRelease(v9);
            qword_1ECD36028[*v3] = 0;
            v1 = v10;
          }
        }
      }
      ++v2;
      v3 += 80;
    }
    while (v2 < v1);
  }
  bzero(qword_1ECD36028, 0x16F5uLL);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1ECD35BC0);
}

uint64_t _MGRebuildCache()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint8_t v15[16];
  uint8_t buf[16];

  sub_19B6F62A0();
  if ((_MGCacheValid() & 1) == 0)
  {
    v0 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v0)
      v6 = v0 + 1;
    else
      v6 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v6, 591, (uint64_t)CFSTR("Waiting for IOKit to quiesce"), v1, v2, v3, v4, v5, v15[0]);
    if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Waiting for IOKit to quiesce", buf, 2u);
    }
    if (sub_19B6E3E3C())
    {
      _MGWriteCache();
    }
    else
    {
      v7 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
      if (v7)
        v13 = v7 + 1;
      else
        v13 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
      _MGLog((uint64_t)v13, 595, (uint64_t)CFSTR("No cache generated"), v8, v9, v10, v11, v12, v15[0]);
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)v15 = 0;
        _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "No cache generated", v15, 2u);
      }
    }
  }
  return _MGCacheValid();
}

uint64_t sub_19B6F62A0()
{
  int v0;
  const char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t result;
  int *v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  int *v26;
  char *v27;
  char v28;
  uint8_t buf[4];
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (!unlink("/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.mobilegestaltcache/Library/Caches/com.apple.MobileGestalt.plist"))
  {
    v10 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
    if (v10)
      v16 = v10 + 1;
    else
      v16 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
    _MGLog((uint64_t)v16, 614, (uint64_t)CFSTR("Successfully deleted gestalt cache"), v11, v12, v13, v14, v15, v28);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
      goto LABEL_13;
    *(_WORD *)buf = 0;
    v8 = MEMORY[0x1E0C81028];
    v9 = "Successfully deleted gestalt cache";
    goto LABEL_12;
  }
  v0 = *__error();
  v1 = "/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c";
  v2 = rindex("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestaltCache.c", 47);
  if (v2)
    v1 = v2 + 1;
  if (v0 == 2)
  {
    _MGLog((uint64_t)v1, 611, (uint64_t)CFSTR("Cache file did not exist. Rebuilding."), v3, v4, v5, v6, v7, v28);
    if (!os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
    {
LABEL_13:
      _MGClearInProcessCache();
      _MGWriteCache();
      return _MGCacheValid();
    }
    *(_WORD *)buf = 0;
    v8 = MEMORY[0x1E0C81028];
    v9 = "Cache file did not exist. Rebuilding.";
LABEL_12:
    _os_log_impl(&dword_19B6B1000, v8, OS_LOG_TYPE_DEFAULT, v9, buf, 2u);
    goto LABEL_13;
  }
  v18 = __error();
  v19 = strerror(*v18);
  _MGLog((uint64_t)v1, 608, (uint64_t)CFSTR("Failed to delete gestalt cache: %s"), v20, v21, v22, v23, v24, v19);
  v25 = os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v25)
  {
    v26 = __error();
    v27 = strerror(*v26);
    *(_DWORD *)buf = 136315138;
    v30 = v27;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "Failed to delete gestalt cache: %s", buf, 0xCu);
    return 0;
  }
  return result;
}

const char **_MGCacheCopyValueForKey(const char **a1)
{
  const char **result;

  result = sub_19B6B8928(a1);
  if (result)
    return (const char **)sub_19B6B91B0((uint64_t)result);
  return result;
}

void sub_19B6F6494(FILE *a1, int a2, char *cStr, va_list a4)
{
  const __CFString *v7;
  const __CFString *v8;
  const __CFString *v9;
  size_t v10;
  size_t v11;
  size_t i;
  int v13;
  int v15;
  int v16;
  char buffer[1024];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v7 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  bzero(buffer, 0x400uLL);
  if (v7)
  {
    v8 = CFStringCreateWithFormatAndArguments(0, 0, v7, a4);
    if (v8)
    {
      v9 = v8;
      if (CFStringGetCString(v8, buffer, 1024, 0x8000100u))
      {
        if (a2)
        {
          v10 = strlen(buffer);
          if (v10)
          {
            v11 = v10;
            for (i = 0; i < v11; ++i)
            {
              v13 = buffer[i];
              if ((v13 - 92) <= 0x21 && ((1 << (buffer[i] - 92)) & 0x280000001) != 0)
                goto LABEL_14;
              if (v13 == 27)
              {
                v16 = -1;
                if (sscanf(&buffer[i], "\x1B[%dm", &v16) == 1)
                {
                  do
                    v15 = buffer[i++];
                  while (v15 != 109);
                  --i;
                  if (v16)
                  {
                    v16 -= 30;
                    fprintf(a1, "\\cf%d ");
                  }
                  else
                  {
                    fwrite("\\cf0 ", 5uLL, 1uLL, a1);
                  }
                }
                continue;
              }
              if (v13 != 10)
                fputc(v13, a1);
              else
LABEL_14:
                fprintf(a1, "\\%c");
            }
          }
        }
        else
        {
          fputs(buffer, a1);
        }
      }
      CFRelease(v7);
    }
    else
    {
      v9 = v7;
    }
    CFRelease(v9);
  }
}

size_t sub_19B6F669C(FILE *__stream)
{
  fwrite("{\\rtf1\\ansi\\ansicpg1252\\cocoartf1183\n", 0x25uLL, 1uLL, __stream);
  fwrite("{\\fonttbl\\f0\\fnil\\fcharset0 Menlo-Regular;}\n", 0x2CuLL, 1uLL, __stream);
  fwrite("{\\colortbl;", 0xBuLL, 1uLL, __stream);
  fwrite("\\red194\\green54\\blue33;", 0x17uLL, 1uLL, __stream);
  fwrite("\\red37\\green188\\blue36;", 0x17uLL, 1uLL, __stream);
  fwrite("\\red128\\green128\\blue0;", 0x17uLL, 1uLL, __stream);
  fwrite("\\red73\\green46\\blue225;", 0x17uLL, 1uLL, __stream);
  fwrite("\\red211\\green56\\blue211;", 0x18uLL, 1uLL, __stream);
  fwrite("\\red51\\green187\\blue200;", 0x18uLL, 1uLL, __stream);
  fwrite("}\n", 2uLL, 1uLL, __stream);
  fwrite("\\margl1440\\margr1440\\vieww16420\\viewh18180\\viewkind0\n", 0x35uLL, 1uLL, __stream);
  return fwrite("\\pard\\tx720\\tx1440\\tx2160\\tx2880\\tx3600\\tx4320\\tx5040\\tx5760\\tx6480\\tx7200\\tx7920\\tx8640\\pardirnatural\n\n\\f0\\fs24 ", 0x71uLL, 1uLL, __stream);
}

uint64_t sub_19B6F67D4(FILE *a1)
{
  fputc(125, a1);
  return fflush(a1);
}

void sub_19B6F6800(FILE *a1, int a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_19B6F6494(a1, a2, a3, &a9);
}

void sub_19B6F6828(FILE *a1, const void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v10;
  int v11;
  int v12;
  CFTypeID v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  CFTypeID v22;
  CFTypeID v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  CFTypeID v29;
  CFIndex Length;
  __CFString *Mutable;
  const UInt8 *BytePtr;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const UInt8 *v38;
  unint64_t v39;
  BOOL v40;
  CFIndex v41;
  CFTypeID v42;
  CFIndex Count;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t v49;
  const void **v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  const void *Value;
  const UInt8 *v66;
  CFIndex v67;
  unsigned int v68;
  const __CFData *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const __CFData *v75;
  CFTypeID v76;
  CFIndex v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  CFIndex v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  const void *ValueAtIndex;
  char v94;
  int v95;
  int v96;
  int v97;
  int v98;

  v10 = a4 & 4;
  if ((a4 & 4) != 0)
    v11 = 1;
  else
    v11 = a4 & 1;
  if ((a4 & 4) != 0)
    v12 = 1;
  else
    v12 = a4 & 2;
  if (!a2)
  {
    sub_19B6F6800(a1, a4 & 4, "NULL", a4, a5, a6, a7, a8, a9);
    return;
  }
  v16 = CFGetTypeID(a2);
  if (v16 == CFBooleanGetTypeID())
    goto LABEL_10;
  v22 = CFGetTypeID(a2);
  if (v22 == CFNumberGetTypeID())
    goto LABEL_10;
  v23 = CFGetTypeID(a2);
  if (v23 == CFStringGetTypeID())
  {
    sub_19B6F6800(a1, v10, "\"%@\"", v24, v25, v26, v27, v28, (char)a2);
    return;
  }
  v29 = CFGetTypeID(a2);
  if (v29 == CFDataGetTypeID())
  {
    Length = CFDataGetLength((CFDataRef)a2);
    Mutable = CFStringCreateMutable(0, 0);
    BytePtr = CFDataGetBytePtr((CFDataRef)a2);
    v38 = BytePtr;
    if (Length < 25)
    {
      if (Length < 1)
        goto LABEL_42;
      v96 = v11;
      v66 = BytePtr;
      v67 = Length;
      do
      {
        v68 = *v66++;
        CFStringAppendFormat(Mutable, 0, CFSTR("%02x"), v68);
        --v67;
      }
      while (v67);
    }
    else
    {
      v96 = v11;
      v39 = 0;
      do
      {
        CFStringAppendFormat(Mutable, 0, CFSTR("%02x%02x%02x%02x"), v38[v39], v38[v39 + 1], v38[v39 + 2], v38[v39 + 3]);
        v40 = v39 >= 0xC;
        v39 += 4;
      }
      while (!v40);
      CFStringAppend(Mutable, CFSTR(" ... "));
      v41 = Length - 8;
      do
      {
        CFStringAppendFormat(Mutable, 0, CFSTR("%02x%02x%02x%02x"), v38[v41], v38[v41 + 1], v38[v41 + 2], v38[v41 + 3]);
        v41 += 4;
      }
      while (v41 < Length);
    }
    v11 = v96;
    if ((a4 & 8) != 0 && Length >= 32)
    {
      sub_19B6F6800(a1, v10, "{ x: %f, y: %f, width: %f, height: %f }", v33, v34, v35, v36, v37, *(_OWORD *)v38);
      goto LABEL_43;
    }
LABEL_42:
    sub_19B6F6800(a1, v10, "Data[%llu] (%@)", v33, v34, v35, v36, v37, Length);
LABEL_43:
    if (v11 && Length)
    {
      v69 = sub_19B6C03D0((CFDataRef)a2);
      if (v69)
      {
        v75 = v69;
        sub_19B6F6800(a1, v10, " (\"%@\")", v70, v71, v72, v73, v74, (char)v69);
        CFRelease(v75);
      }
    }
    CFRelease(Mutable);
    return;
  }
  v42 = CFGetTypeID(a2);
  if (v42 == CFDictionaryGetTypeID())
  {
    v97 = v11;
    Count = CFDictionaryGetCount((CFDictionaryRef)a2);
    v49 = Count;
    if (v12)
      sub_19B6F6800(a1, v10, "Dictionary[%lld]", v44, v45, v46, v47, v48, Count);
    v50 = (const void **)malloc_type_calloc(v49, 8uLL, 0xC0040B8AA526DuLL);
    CFDictionaryGetKeysAndValues((CFDictionaryRef)a2, v50, 0);
    qsort_b(v50, v49, 8uLL, &unk_1E3BCFF58);
    if (v49 >= 1)
    {
      v56 = 0;
      v57 = (a3 + 1);
      v95 = a3 % 6 + 31;
      do
      {
        v58 = v49;
        sub_19B6F6800(a1, v10, "\n", v51, v52, v53, v54, v55, v94);
        if ((_DWORD)v57)
        {
          v64 = v57;
          do
          {
            --v64;
            fwrite("   ", 3uLL, 1uLL, a1);
          }
          while (v64);
        }
        if (v97)
          sub_19B6F6800(a1, v10, "\x1B[%dm%@\x1B[0m => ", v59, v60, v61, v62, v63, v95);
        else
          sub_19B6F6800(a1, v10, "%@ => ", v59, v60, v61, v62, v63, (char)v50[v56]);
        v49 = v58;
        Value = CFDictionaryGetValue((CFDictionaryRef)a2, v50[v56]);
        sub_19B6F6828(a1, Value, v57, a4);
        ++v56;
      }
      while (v56 != v58);
    }
    free(v50);
  }
  else
  {
    v76 = CFGetTypeID(a2);
    if (v76 != CFArrayGetTypeID())
    {
LABEL_10:
      sub_19B6F6800(a1, v10, "%@", v17, v18, v19, v20, v21, (char)a2);
      return;
    }
    v98 = v11;
    v77 = CFArrayGetCount((CFArrayRef)a2);
    v83 = v77;
    if (v12)
      sub_19B6F6800(a1, v10, "Array[%lld]", v78, v79, v80, v81, v82, v77);
    if (v83 >= 1)
    {
      v84 = 0;
      v85 = (a3 + 1);
      v86 = a3 % 6 + 31;
      do
      {
        sub_19B6F6800(a1, v10, "\n", v78, v79, v80, v81, v82, v94);
        if ((_DWORD)v85)
        {
          v92 = v85;
          do
          {
            --v92;
            fwrite("   ", 3uLL, 1uLL, a1);
          }
          while (v92);
        }
        if (v98)
          sub_19B6F6800(a1, v10, "\x1B[%dm[%lld]\x1B[0m: ", v87, v88, v89, v90, v91, v86);
        else
          sub_19B6F6800(a1, v10, "[%lld]: ", v87, v88, v89, v90, v91, v84);
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)a2, v84);
        sub_19B6F6828(a1, ValueAtIndex, v85, a4);
        ++v84;
      }
      while (v84 != v83);
    }
  }
}

CFComparisonResult sub_19B6F6DB8(uint64_t a1, CFTypeRef *a2, const __CFNumber **a3)
{
  CFTypeID TypeID;
  CFTypeID v6;
  const __CFNumber *v7;
  const __CFNumber *v8;

  TypeID = CFNumberGetTypeID();
  v6 = CFGetTypeID(*a2);
  v7 = (const __CFNumber *)*a2;
  v8 = *a3;
  if (TypeID == v6)
    return CFNumberCompare(v7, v8, 0);
  else
    return CFStringCompare((CFStringRef)v7, (CFStringRef)v8, 0);
}

uint64_t sub_19B6F6E18(uint64_t a1, unint64_t *a2)
{
  return sub_19B6F6E20(a1, a2, 0);
}

uint64_t sub_19B6F6E20(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  char v26;
  unint64_t v27;
  _BYTE *v28;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_68;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_69;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        if (a3 || v16 >= v15)
        {
          if (v16 >= v15)
            v17 = *v12;
          else
            v17 = v7 - 1;
          v10 = v5 >= v14;
          v18 = v5 - v14;
          if (v10 && v4 <= v14 && v17 <= v18)
          {
            a2[1] = (unint64_t)v14;
            a2[2] = v17;
            if (!a3)
              return 0;
LABEL_34:
            result = 0;
            *a3 = v15;
            return result;
          }
LABEL_69:
          __break(0x5519u);
LABEL_70:
          __break(0x5515u);
          return result;
        }
        return 3;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
        goto LABEL_69;
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v23 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_69;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_70;
        v24 = *v14++;
        v15 = (v15 << 8) | v24;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (a3)
            v25 = 0;
          else
            v25 = v15 > v22;
          v26 = v25;
          result = 3;
          if (v15 < 0x80 || (v26 & 1) != 0)
            return result;
          if (v15 >= v22)
            v27 = v22;
          else
            v27 = v15;
          v10 = (unint64_t)v5 >= v23;
          v28 = &v5[-v23];
          if (!v10 || (unint64_t)v4 > v23 || v27 > (unint64_t)v28)
            goto LABEL_69;
          a2[1] = v23;
          a2[2] = v27;
          if (a3)
            goto LABEL_34;
          return 0;
        }
      }
    }
LABEL_68:
    __break(0x5513u);
    goto LABEL_69;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_68;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_69;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_19B6F7010(uint64_t result, unint64_t *a2, int a3)
{
  unint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  unsigned __int8 v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  BOOL v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char v24;

  v3 = *(_QWORD *)(result + 8);
  if (v3 < 2)
    return 3;
  v4 = *(_BYTE **)result;
  if (*(_QWORD *)result == -1)
    goto LABEL_54;
  v5 = &v4[v3];
  v6 = v4 + 1;
  v7 = v3 - 1;
  v8 = *v4 & 0x1F;
  if ((*v4 & 0x1F) != 0x1F)
  {
    v12 = v4 + 1;
LABEL_20:
    *a2 = v8 | ((unint64_t)(*v4 & 0xE0) << 56);
    if (v12 != (char *)-1)
    {
      if (v12 >= v5 || v12 < v4)
        goto LABEL_55;
      v14 = v12 + 1;
      v15 = *v12;
      v16 = v7 - 1;
      if ((*v12 & 0x80000000) == 0)
      {
        v17 = v16 < v15 && a3 == 0;
        v18 = (unint64_t)(v12 + 1);
        if (v17)
          return 3;
LABEL_28:
        if (v15 > (~v18 & 0x7FFFFFFFFFFFFFFFLL))
          return 7;
        if (v18 <= v18 + v15)
        {
          result = 0;
          a2[1] = v18;
          a2[2] = v15;
          return result;
        }
        goto LABEL_55;
      }
      v19 = v15 & 0x7F;
      if ((v15 & 0x7F) > 8)
        return 3;
      if ((v15 & 0x7F) == 0 || v16 < v19)
        return 3;
      if (v14 >= v5 || v14 < v4)
      {
LABEL_55:
        __break(0x5519u);
LABEL_56:
        __break(0x5515u);
        return result;
      }
      if (!*v14)
        return 3;
      v15 = 0;
      v21 = (v19 - 1);
      v22 = v7 - v21 - 2;
      v18 = (unint64_t)&v12[v21 + 2];
      while (v14 != (_BYTE *)-1)
      {
        if (v14 >= v5)
          goto LABEL_55;
        v10 = v16-- != 0;
        if (!v10)
          goto LABEL_56;
        v23 = *v14++;
        v15 = (v15 << 8) | v23;
        LODWORD(v19) = v19 - 1;
        if (!(_DWORD)v19)
        {
          if (v15 <= v22)
            v24 = 1;
          else
            v24 = a3;
          result = 3;
          if (v15 >= 0x80 && (v24 & 1) != 0)
            goto LABEL_28;
          return result;
        }
      }
    }
LABEL_54:
    __break(0x5513u);
    goto LABEL_55;
  }
  v9 = *v6;
  v10 = v9 != 128 && v9 >= 0x1F;
  if (!v10)
    return 3;
  v8 = 0;
  result = 3;
  while (v7 >= 2)
  {
    v11 = v8;
    if (v8 >> 57)
      break;
    if (v6 == (unsigned __int8 *)-1)
      goto LABEL_54;
    if (v6 >= v5 || v6 < v4)
      goto LABEL_55;
    v12 = (char *)(v6 + 1);
    --v7;
    v13 = *v6;
    v8 = *v6++ & 0x7F | (v8 << 7);
    if ((v13 & 0x80) == 0)
    {
      if (v11 >> 54)
        return 3;
      goto LABEL_20;
    }
  }
  return result;
}

uint64_t sub_19B6F71D0(uint64_t result, unint64_t *a2, _BYTE *a3)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  unint64_t v10;

  *a3 = 0;
  *a2 = 0;
  a2[1] = 0;
  if (!*(_QWORD *)(result + 8))
    return 3;
  v3 = **(unsigned __int8 **)result;
  *a3 = v3;
  v4 = *(_QWORD *)(result + 8);
  if (v4 != 1)
  {
    if (v3 <= 7)
    {
      v5 = v4 - 1;
      if (!v4)
      {
LABEL_20:
        __break(0x5515u);
        goto LABEL_21;
      }
      v6 = *(_QWORD *)result;
      v7 = *(_QWORD *)result + v4;
      v8 = (unsigned __int8 *)(*(_QWORD *)result + v5);
      if ((unint64_t)v8 >= v7 || (unint64_t)v8 < v6)
      {
LABEL_19:
        __break(0x5519u);
        goto LABEL_20;
      }
      if (((0xFFu >> (8 - v3)) & *v8) == 0)
      {
        if (v6 == -1)
        {
LABEL_21:
          __break(0x5513u);
          return result;
        }
        v10 = v6 + 1;
        if (v6 + 1 <= v7 && v6 <= v10)
        {
          result = 0;
          *a2 = v10;
          a2[1] = v5;
          return result;
        }
        goto LABEL_19;
      }
    }
    return 3;
  }
  if (v3)
    return 3;
  else
    return 0;
}

uint64_t sub_19B6F7290(unsigned __int8 **a1, BOOL *a2)
{
  int v2;
  uint64_t result;

  if (a1[1] != (unsigned __int8 *)1)
    return 3;
  v2 = **a1;
  if (v2 != 255 && v2 != 0)
    return 3;
  result = 0;
  *a2 = v2 != 0;
  return result;
}

uint64_t sub_19B6F72CC(unsigned __int8 **a1, BOOL a2, BOOL *a3)
{
  unsigned __int8 *v3;
  int v4;
  uint64_t result;

  v3 = a1[1];
  if (!v3)
    goto LABEL_9;
  if (v3 == (unsigned __int8 *)1)
  {
    v4 = **a1;
    if (v4 == 255 || v4 == 0)
    {
      a2 = v4 != 0;
LABEL_9:
      result = 0;
      *a3 = a2;
      return result;
    }
  }
  return 3;
}

uint64_t sub_19B6F730C(char **a1, _DWORD *a2)
{
  uint64_t result;
  unint64_t v4[2];

  v4[1] = *MEMORY[0x1E0C80C00];
  v4[0] = 0xAAAAAAAAAAAAAAAALL;
  result = sub_19B6F738C(a1, v4);
  if (!(_DWORD)result)
  {
    if (HIDWORD(v4[0]))
    {
      return 7;
    }
    else
    {
      result = 0;
      *a2 = v4[0];
    }
  }
  return result;
}

uint64_t sub_19B6F738C(char **a1, unint64_t *a2)
{
  unint64_t v2;
  unsigned __int8 *v3;
  uint64_t result;
  unint64_t v5;
  unsigned int v6;

  v2 = (unint64_t)a1[1];
  if (!v2)
    return 3;
  v3 = (unsigned __int8 *)*a1;
  if (**a1 < 0)
    return 3;
  if (**a1)
  {
    if (v2 > 8)
      return 7;
    goto LABEL_10;
  }
  if (v2 >= 2)
  {
    if (((char)v3[1] & 0x80000000) == 0)
      return 3;
    if (v2 > 9)
      return 7;
  }
LABEL_10:
  v5 = 0;
  do
  {
    v6 = *v3++;
    v5 = v6 | (v5 << 8);
    --v2;
  }
  while (v2);
  result = 0;
  *a2 = v5;
  return result;
}

uint64_t sub_19B6F73F4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  memset(v8, 170, 24);
  result = sub_19B6F6E20(a1, v8, 0);
  if (!(_DWORD)result)
  {
    v6 = v8[0];
    *a2 = v8[0];
    if (v6 >> 1 == 0x1000000000000008)
    {
      if (__CFADD__(v8[1], v8[2]))
      {
        __break(0x5513u);
      }
      else
      {
        v7 = v8[1] + v8[2];
        if (v8[1] <= v8[1] + v8[2])
        {
          result = 0;
          *a3 = v8[1];
          a3[1] = v7;
          return result;
        }
      }
      __break(0x5519u);
    }
    else
    {
      return 2;
    }
  }
  return result;
}

unint64_t *sub_19B6F74AC(unint64_t *result, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = *result;
  v3 = result[1];
  if (__CFADD__(*result, v3))
  {
    __break(0x5513u);
  }
  else
  {
    v4 = v2 + v3;
    if (v2 <= v4)
    {
      *a2 = v2;
      a2[1] = v4;
      return 0;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19B6F74D8(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x1E0C80C00];
  v10[0] = 0;
  v2 = *a1;
  v3 = a1[1];
  if (*a1 >= v3)
    return 1;
  v10[0] = *a1;
  v10[1] = v3 - v2;
  result = sub_19B6F6E20((uint64_t)v10, a2, 0);
  if (!(_DWORD)result)
  {
    v8 = a2[1];
    v7 = a2[2];
    if (!__CFADD__(v8, v7))
    {
      v9 = v8 + v7;
      if (v9 <= a1[1] && *a1 <= v9)
      {
        result = 0;
        *a1 = v9;
        return result;
      }
      __break(0x5519u);
    }
    __break(0x5513u);
  }
  return result;
}

uint64_t sub_19B6F7594(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  uint64_t result;
  unint64_t v12[4];

  v12[3] = *MEMORY[0x1E0C80C00];
  memset(v12, 170, 24);
  result = sub_19B6F6E20(a1, v12, 0);
  if (!(_DWORD)result)
  {
    if (v12[0] == 0x2000000000000010)
      return sub_19B6F765C(&v12[1], a2, a3, a4, a5, a6);
    else
      return 2;
  }
  return result;
}

uint64_t sub_19B6F765C(unint64_t *a1, unsigned int a2, uint64_t a3, unint64_t a4, unint64_t a5, size_t a6)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int16 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;
  unsigned __int16 v17;
  __int16 v18;
  unint64_t v19;
  char *v21;
  uint64_t v23;
  unint64_t v24;
  __int16 *v25;
  unint64_t v26;
  __int16 v27;
  unint64_t v28;
  char *v29;
  unint64_t v31[3];
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v32 = 0;
  if (a6)
  {
    if (a6 > a5)
      goto LABEL_59;
    bzero((void *)a4, a6);
  }
  v10 = *a1;
  v11 = a1[1];
  if (__CFADD__(*a1, v11))
    goto LABEL_58;
  v12 = v10 + v11;
  if (v10 > v12)
LABEL_59:
    __break(0x5519u);
  v32 = *a1;
  v33 = v12;
  if (a2)
  {
    v13 = 0;
    v29 = (char *)(a4 + a5);
    while (1)
    {
      memset(v31, 170, sizeof(v31));
      v15 = v32;
      v14 = v33;
      result = sub_19B6F74D8(&v32, v31);
      if ((_DWORD)result)
        break;
      if (a2 <= v13)
        return 2;
      while (1)
      {
        if (24 * (__int16)v13 > (unint64_t)~a3)
          goto LABEL_58;
        v17 = v13;
        v18 = *(_WORD *)(a3 + 24 * v13 + 16);
        if ((v18 & 2) != 0 || v31[0] == *(_QWORD *)(a3 + 24 * v13 + 8))
          break;
        result = 2;
        if ((v18 & 1) != 0)
        {
          ++v13;
          if (a2 > (unsigned __int16)(v17 + 1))
            continue;
        }
        return result;
      }
      if ((v18 & 4) == 0)
      {
        v19 = *(_QWORD *)(a3 + 24 * v13);
        if (v19 > 0xFFFFFFFFFFFFFFEFLL || v19 + 16 > a5)
          return 7;
        if (v19 > ~a4)
          goto LABEL_58;
        v21 = (char *)(a4 + v19);
        if (v21 >= v29 || (unint64_t)v21 < a4)
          goto LABEL_59;
        *(_OWORD *)v21 = *(_OWORD *)&v31[1];
        if ((v18 & 8) != 0)
        {
          if (v15 >= v31[1])
          {
            if (v21 + 16 <= v29 && v14 >= v15 && *((_QWORD *)v21 + 1) <= v14 - v15)
            {
              *(_QWORD *)v21 = v15;
              return 3;
            }
            goto LABEL_59;
          }
          if (v21 + 16 > v29)
            goto LABEL_59;
          v23 = *((_QWORD *)v21 + 1);
          v24 = v23 + v31[1] - v15;
          if (__CFADD__(v23, v31[1] - v15))
          {
            __break(0x5500u);
            return result;
          }
          if (v14 < v15 || v24 > v14 - v15)
            goto LABEL_59;
          *(_QWORD *)v21 = v15;
          *((_QWORD *)v21 + 1) = v24;
        }
      }
      ++v13;
      if (a2 == (unsigned __int16)(v17 + 1))
      {
        if (!__CFADD__(v31[1], v31[2]))
        {
          v28 = a1[1];
          if (!__CFADD__(*a1, v28))
          {
            v10 = v31[1] + v31[2];
            v12 = *a1 + v28;
            goto LABEL_47;
          }
        }
LABEL_58:
        __break(0x5513u);
        goto LABEL_59;
      }
      if (a2 <= (unsigned __int16)(v17 + 1))
      {
        v10 = v32;
        v12 = v33;
        goto LABEL_47;
      }
    }
    if ((_DWORD)result == 1)
    {
      if (a2 <= v13)
      {
        return 0;
      }
      else
      {
        v25 = (__int16 *)(a3 + 24 * v13 + 16);
        v26 = a2 - (unint64_t)v13;
        result = 0;
        while (1)
        {
          v27 = *v25;
          v25 += 12;
          if ((v27 & 1) == 0)
            break;
          if (!--v26)
            return result;
        }
        return 5;
      }
    }
  }
  else
  {
LABEL_47:
    if (v10 == v12)
      return 0;
    else
      return 3;
  }
  return result;
}

uint64_t sub_19B6F792C(uint64_t result, unsigned int a2, uint64_t a3, unint64_t a4, size_t a5)
{
  if ((a4 | 0x7FFFFFFFFFFFFFFFLL) >= a4)
    return sub_19B6F7594(result, a2, a3, a4, ~a4 & 0x7FFFFFFFFFFFFFFFLL, a5);
  __break(0x5519u);
  return result;
}

BOOL sub_19B6F794C(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;
  size_t v4;

  result = 0;
  if (a1 && a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    return v4 == *(_QWORD *)(a2 + 8) && memcmp(*(const void **)a1, *(const void **)a2, v4) == 0;
  }
  return result;
}

uint64_t sub_19B6F7998(unsigned int *a1)
{
  return bswap32(*a1);
}

void *sub_19B6F79A4(void *result)
{
  off_1EE3FD860 = result;
  return result;
}

uint64_t sub_19B6F79B0(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _QWORD *v10;

  result = 6;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        if (a5)
        {
          v10 = *(_QWORD **)(a5 + 32);
          if (v10)
          {
            if (*v10 == a4)
            {
              if (sub_19B6F794C(v10[1], (uint64_t)&off_1E3BD1560))
              {
                if (!sub_19B7015DC(a1, a2, a3))
                  return 0;
              }
              else if (sub_19B6F794C(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8), (uint64_t)&off_1E3BD1570))
              {
                if (!sub_19B701614(a1, a2, a3))
                  return 0;
              }
              else
              {
                if (!sub_19B6F794C(*(_QWORD *)(*(_QWORD *)(a5 + 32) + 8), (uint64_t)&off_1E3BD1580))
                  return 4;
                if (!sub_19B701678(a1, a2, a3))
                  return 0;
              }
              return 3;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_19B6F7AA0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  __int128 v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  int i;
  int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  __int128 *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  _QWORD *v47;
  __int128 v48;
  _OWORD v49[4];
  __int128 *v50;
  _OWORD v51[19];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  _QWORD v71[3];
  int v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v72 = 0;
  memset(v71, 170, sizeof(v71));
  *(_QWORD *)&v8 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v8 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v69 = v8;
  v70 = v8;
  v67 = v8;
  v68 = v8;
  v65 = v8;
  v66 = v8;
  v63 = v8;
  v64 = v8;
  v61 = v8;
  v62 = v8;
  v59 = v8;
  v60 = v8;
  v57 = v8;
  v58 = v8;
  v55 = v8;
  v56 = v8;
  v53 = v8;
  v54 = v8;
  v51[18] = v8;
  v52 = v8;
  v51[16] = v8;
  v51[17] = v8;
  v51[14] = v8;
  v51[15] = v8;
  v51[12] = v8;
  v51[13] = v8;
  v51[10] = v8;
  v51[11] = v8;
  v51[8] = v8;
  v51[9] = v8;
  v51[6] = v8;
  v51[7] = v8;
  v51[4] = v8;
  v51[5] = v8;
  v51[2] = v8;
  v51[3] = v8;
  v51[0] = v8;
  v51[1] = v8;
  v50 = v51;
  if (a8)
  {
    if (a1 && a2)
    {
      if (a5 && a6)
      {
        if (!(_DWORD)a2)
        {
          v19 = 3;
          sub_19B6F97E4(3, "%s: _AMFDRDecodeIterateCertChainBegin failed", "_AMFDRDecodeVerifyChain");
          v21 = *(_QWORD *)a8 | 1;
          goto LABEL_56;
        }
        v71[1] = a2;
        v71[2] = 0;
        v71[0] = a1;
        sub_19B6FB004((uint64_t)v71, *(_QWORD *)(a8 + 2016), &v50, &v72);
        v15 = v14;
        if (v14 || !v50)
        {
          v19 = 3;
          sub_19B6F97E4(3, "%s: _AMFDRDecodeIterateCertChainNext failed (first call)", "_AMFDRDecodeVerifyChain");
          v21 = *(_QWORD *)a8 | v15;
LABEL_56:
          *(_QWORD *)a8 = v21;
          return v19;
        }
        if (*(_QWORD *)(a8 + 1944) && *(_QWORD *)(a8 + 1952))
        {
          if ((*(_BYTE *)(a8 + 2017) & 1) != 0)
          {
            memset(v49, 0, sizeof(v49));
            v48 = 0u;
            v22 = sub_19B6F99D8(a8 + 1768);
            if (v22 == 0x40000000000000)
            {
              sub_19B6F97E4(4, "%s: trustobject does not contain trusted key", "_AMFDRDecodeVerifyChain");
            }
            else if (v22)
            {
              *(_QWORD *)a8 |= v22;
              sub_19B6F97E4(3, "%s: failed to begin decoding trusted key");
              return 3;
            }
            v23 = 0;
LABEL_26:
            while (1)
            {
              v73 = 0;
              v74 = 0;
              v75 = 0;
              v24 = sub_19B6F74D8((unint64_t *)(a8 + 1896), &v73);
              if (v24)
                break;
              v25 = v74;
              v26 = v75;
              if (v74)
                v27 = (_DWORD)v75 == 0;
              else
                v27 = 1;
              if (v27)
                goto LABEL_40;
              sub_19B6F97E4(7, "%s: PKI: verify cert was issued by trusted key %d", "_AMFDRDecodeVerifyChain", v23);
              v28 = sub_19B6FA6A8((uint64_t)&v48, v25, v26);
              if (v28)
              {
                sub_19B6F97E4(7, "%s: PKI: decoding trusted key %d failed with error 0x%016llX");
                goto LABEL_72;
              }
              while (!sub_19B6F794C((uint64_t)(v50 + 1), (*(_QWORD **)((char *)&off_1EE3FD5A8 + v28))[3])
                   || !sub_19B6F794C((uint64_t)v49, (*(_QWORD **)((char *)&off_1EE3FD5A8 + v28))[2]))
              {
                v28 += 8;
                if (v28 == 24)
                {
                  ++v23;
                  goto LABEL_26;
                }
              }
              v69 = 0u;
              v70 = 0u;
              v68 = 0u;
              v63 = 0u;
              v64 = 0u;
              v61 = 0u;
              v62 = 0u;
              v59 = 0u;
              v60 = 0u;
              v57 = 0u;
              v58 = 0u;
              v55 = 0u;
              v56 = 0u;
              v53 = 0u;
              v54 = 0u;
              v52 = 0u;
              v65 = v48;
              v66 = xmmword_1E3BD1530;
              v67 = v49[0];
              v29 = sub_19B6FB2C0((uint64_t)v50, (uint64_t)&v52, a8 + 1768, *(_QWORD *)(a8 + 2016), (_QWORD *)a8);
              if (v29 != 0x20000000000)
              {
                if (!v29)
                {
                  sub_19B6F97E4(7, "%s: PKI: verify cert was issued by trusted key %d (success)", "_AMFDRDecodeVerifyChain", v23);
                  goto LABEL_53;
                }
                goto LABEL_74;
              }
            }
            if (v24 == 1)
            {
LABEL_40:
              sub_19B6F97E4(7, "%s: end of trusted key sequence found root_key=%d", "_AMFDRDecodeVerifyChain", v23);
              *(_QWORD *)a8 |= 0x100uLL;
              goto LABEL_53;
            }
            v29 = 0x400000;
LABEL_74:
            *(_QWORD *)a8 |= v29;
            sub_19B6F97E4(7, "%s: PKI: verify cert was issued by trusted key %d failed with error 0x%016llX");
            return 3;
          }
          v16 = sub_19B6F98B0(a8 + 1768);
          if (v16)
          {
            v17 = v16;
            v18 = "%s: AMFDRDecodeIterateTrustObjectTrustedBegin failed";
LABEL_55:
            v19 = 3;
            sub_19B6F97E4(3, v18, "_AMFDRDecodeVerifyChain");
            v21 = *(_QWORD *)a8 | v17;
            goto LABEL_56;
          }
          v30 = a4;
          for (i = 0; ; ++i)
          {
            v48 = 0uLL;
            *(_QWORD *)&v49[0] = 0;
            v32 = sub_19B6F74D8((unint64_t *)(a8 + 1832), (unint64_t *)&v48);
            if (v32)
              break;
            v33 = *((_QWORD *)&v48 + 1);
            v34 = v49[0];
            if (*((_QWORD *)&v48 + 1))
              v35 = LODWORD(v49[0]) == 0;
            else
              v35 = 1;
            if (v35)
              goto LABEL_51;
            sub_19B6F97E4(7, "%s: PKI: verify cert was issued by trusted root %d", "_AMFDRDecodeVerifyChain", i);
            v36 = sub_19B6FA898((unint64_t)&v52, v33, v34);
            if (v36)
            {
              v28 = v36;
              sub_19B6F97E4(7, "%s: PKI: decoding trusted root %d failed with error 0x%016llX");
              goto LABEL_72;
            }
            v37 = sub_19B6FB2C0((uint64_t)v50, (uint64_t)&v52, a8 + 1768, 0, 0);
            if (v37 != 0x20000000000)
            {
              v28 = v37;
              if (!v37)
              {
                sub_19B6F97E4(7, "%s: PKI: verify cert was issued by trusted root %d (success)", "_AMFDRDecodeVerifyChain", i);
                goto LABEL_52;
              }
              sub_19B6F97E4(7, "%s: PKI: verify cert was issued by trusted root %d failed with error 0x%016llX");
LABEL_72:
              v46 = *(_QWORD *)a8 | v28;
              goto LABEL_64;
            }
          }
          if (v32 == 1)
          {
LABEL_51:
            sub_19B6F97E4(7, "%s: end of trusted root sequence found root_cert=%d", "_AMFDRDecodeVerifyChain", i);
            *(_QWORD *)a8 |= 0x100uLL;
LABEL_52:
            a4 = v30;
            goto LABEL_53;
          }
          sub_19B6F97E4(7, "%s: AMFDRDecodeIterateTrustObjectTrustedNext failed", "_AMFDRDecodeVerifyChain");
          v46 = *(_QWORD *)a8 | 0x400000;
        }
        else
        {
          sub_19B6F97E4(4, "%s: Skipping trust root check (trustobject unset)", "_AMFDRDecodeVerifyChain");
          *(_QWORD *)a8 |= 0x200100uLL;
LABEL_53:
          v38 = v50;
          v50 = &v52;
          sub_19B6FB004((uint64_t)v71, *(_QWORD *)(a8 + 2016), &v50, &v72);
          if (v39)
          {
            v17 = v39;
            v18 = "%s: _AMFDRDecodeIterateCertChainNext failed (second call)";
            goto LABEL_55;
          }
          v47 = a4;
          v40 = 1;
          while (1)
          {
            if (!v50)
            {
              *a3 = *((_QWORD *)v38 + 26);
              *v47 = *((_QWORD *)v38 + 27);
              *a5 = *((_QWORD *)v38 + 36);
              *a6 = *((_QWORD *)v38 + 37);
              v45 = v38[15];
              *(_OWORD *)(a8 + 312) = v38[14];
              *(_OWORD *)(a8 + 328) = v45;
              sub_19B6F97E4(7, "%s: PKI: check payload hash with signature (success)", "_AMFDRDecodeVerifyChain");
              return 0;
            }
            sub_19B6F97E4(7, "%s: PKI: verify cert %d was issued by cert %d", "_AMFDRDecodeVerifyChain", v40, v40 - 1);
            v41 = sub_19B6FB2C0((uint64_t)v50, (uint64_t)v38, a8 + 1768, *(_QWORD *)(a8 + 2016), (_QWORD *)a8);
            if (v41)
              break;
            sub_19B6F97E4(7, "%s: PKI: verify cert %d was issued by %d (success)", "_AMFDRDecodeVerifyChain", v40, v40 - 1);
            ++v40;
            v42 = v50;
            v50 = v38;
            sub_19B6FB004((uint64_t)v71, *(_QWORD *)(a8 + 2016), &v50, &v72);
            v38 = v42;
            if (v43)
            {
              v44 = v43;
              v19 = 3;
              sub_19B6F97E4(3, "%s: _AMFDRDecodeIterateCertChainNext failed (%d)", "_AMFDRDecodeVerifyChain", v40);
              v21 = *(_QWORD *)a8 | v44;
              goto LABEL_56;
            }
          }
          sub_19B6F97E4(7, "%s: PKI: verify cert %d was issued by cert %d failed with error 0x%016llX", "_AMFDRDecodeVerifyChain", v40, v40 - 1, v41);
          v46 = *(_QWORD *)a8 | 0x40000000000;
        }
LABEL_64:
        *(_QWORD *)a8 = v46;
        return 3;
      }
      sub_19B6F97E4(3, "%s: outImg4Blob must be non NULL and outImg4BlobLength must be non 0");
    }
    else
    {
      sub_19B6F97E4(3, "%s: chain_blob must be non NULL and chain_blob_length must be non 0");
    }
    *(_QWORD *)a8 |= 1uLL;
  }
  else
  {
    sub_19B6F97E4(3, "%s: context must be non NULL", "_AMFDRDecodeVerifyChain");
  }
  return 6;
}

uint64_t sub_19B6F823C(unsigned __int8 *a1, size_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  if (!a1 || !a2)
  {
    sub_19B6F97E4(3, "%s: publicKey must be non NULL and publicKeyLength must be non 0");
    goto LABEL_19;
  }
  if (!a3 || !a4)
  {
    sub_19B6F97E4(3, "%s: signature must be non NULL and publicKeyLsignatureLengthength must be non 0");
    goto LABEL_19;
  }
  if (!a5 || !a6)
  {
    sub_19B6F97E4(3, "%s: digest must be non NULL and digestLength must be non 0");
    goto LABEL_19;
  }
  if (!a7 || !*(_QWORD *)(a7 + 40))
  {
    sub_19B6F97E4(3, "%s: implementation must be non NULL and signatureOid must be non NULL");
    goto LABEL_19;
  }
  if (**(_QWORD **)(a7 + 32) != a6)
  {
    sub_19B6F97E4(3, "%s: digestLength is %zu, expecting %zu");
    goto LABEL_19;
  }
  if (!sub_19B6F794C(a8 + 312, (uint64_t)&xmmword_1E3BD1530))
  {
    if (sub_19B6F794C(*(_QWORD *)(a7 + 40), (uint64_t)&off_1E3BD1500))
    {
      if (!sub_19B6F794C(a8 + 312, (uint64_t)&off_1E3BD14F0))
        goto LABEL_46;
      result = sub_19B7016B0((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }
    else if (sub_19B6F794C(*(_QWORD *)(a7 + 40), (uint64_t)&off_1E3BD1510))
    {
      if (!sub_19B6F794C(a8 + 312, (uint64_t)&off_1E3BD14F0))
        goto LABEL_46;
      result = sub_19B7018F8((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }
    else
    {
      if (!sub_19B6F794C(*(_QWORD *)(a7 + 40), (uint64_t)&off_1E3BD1520))
      {
        result = 4;
LABEL_20:
        if (!a8)
          return result;
        goto LABEL_21;
      }
      if (!sub_19B6F794C(a8 + 312, (uint64_t)&off_1E3BD14F0))
        goto LABEL_46;
      result = sub_19B701998((uint64_t)a1, a2, (uint64_t)a3, a4, a5, a6);
    }
    if ((_DWORD)result == 2)
    {
      *(_QWORD *)a8 |= 0x80000000000000uLL;
      result = 3;
LABEL_21:
      *(_QWORD *)a8 |= 0x1000000000000uLL;
      return result;
    }
    goto LABEL_47;
  }
  if ((uint64_t (**)())a7 != off_1E3BD03D8 && (uint64_t (**)())a7 != off_1E3BD0368)
  {
    sub_19B6F97E4(3, "%s: Expecting kAMFDRDecodeImplementationSha384 or kAMFDRDecodeImplementationOffline");
LABEL_19:
    result = 6;
    goto LABEL_20;
  }
  v20 = xmmword_1E3BD1590;
  if ((*(_BYTE *)(a8 + 2017) & 1) == 0)
  {
    if (!sub_19B701614(*(char **)(a8 + 664), *(_QWORD *)(a8 + 672), a8 + 776))
    {
      v17 = 32;
      goto LABEL_44;
    }
LABEL_46:
    result = 3;
    goto LABEL_20;
  }
  if (!*(_QWORD *)(a8 + 336))
  {
    sub_19B6F97E4(3, "%s: missing IM4C leaf public key OID");
    goto LABEL_19;
  }
  v18 = 0;
  v20 = *(_OWORD *)(a8 + 328);
  while (!sub_19B6F794C((uint64_t)&v20, (*(_QWORD **)((char *)&off_1EE3FD5A8 + v18))[2]))
  {
    v18 += 8;
    if (v18 == 24)
      goto LABEL_36;
  }
  v19 = *(uint64_t *)((char *)&off_1EE3FD5A8 + v18);
  v17 = *(_DWORD *)(v19 + 8);
  if (!v17)
  {
LABEL_36:
    sub_19B6F97E4(3, "%s: invalid digest length");
    goto LABEL_19;
  }
  if (sub_19B6FD698(*(char **)(a8 + 664), *(_QWORD *)(a8 + 672), a8 + 776, *(unsigned int *)(v19 + 8)))
    goto LABEL_46;
LABEL_44:
  result = sub_19B6FD348(a1, a2, v20, *((uint64_t *)&v20 + 1), a3, a4, (unsigned __int8 *)(a8 + 776), v17);
  if ((_DWORD)result == 2)
  {
    *(_QWORD *)a8 |= 0x80000000000000uLL;
    goto LABEL_46;
  }
LABEL_47:
  if ((_DWORD)result)
    goto LABEL_46;
  return result;
}

uint64_t sub_19B6F85B8(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _OWORD *v9;
  _OWORD *v10;
  int v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD v21[2];
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  unint64_t v27[3];
  unint64_t v28[3];
  unint64_t v29;
  unint64_t v30[5];

  memset(v30, 170, 32);
  memset(v28, 170, sizeof(v28));
  memset(v27, 170, sizeof(v27));
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v25 = v3;
  v26 = v3;
  v23 = v3;
  v24 = v3;
  memset(v21, 170, sizeof(v21));
  v4 = 6;
  v22[0] = v3;
  v22[1] = v3;
  if (!a1 || !a2)
    goto LABEL_46;
  if (!*(_QWORD *)(a1 + 320) || (v6 = a1 + 312, !*(_QWORD *)(a1 + 312)))
  {
    v4 = 0;
    v19 = 0x200000000000;
    goto LABEL_36;
  }
  v29 = 0xAAAAAAAAAAAAAAAALL;
  v7 = sub_19B6F73F4(v6, &v29, &v30[2]);
  if ((_DWORD)v7)
  {
    v4 = v7;
    sub_19B6F97E4(3, "%s: failed to init certificate sequence", "_AMFDRDecodeEvaluateCertificateProperties");
    goto LABEL_47;
  }
  if (v29 != 0x2000000000000011)
  {
    v4 = 2;
    goto LABEL_47;
  }
  v8 = 0;
  v9 = (_OWORD *)(a1 + 72);
  v10 = (_OWORD *)(a1 + 56);
LABEL_8:
  while (1)
  {
    v11 = sub_19B6F74D8(&v30[2], v28);
    if (v11)
      break;
    ++v8;
    v12 = v10;
    if (v28[0] == 0xE00000004D414E50)
      goto LABEL_12;
    if (v28[0] != 0xE00000004F424A50)
    {
LABEL_44:
      sub_19B6F97E4(3, "%s: unexpected tag 0x%llX in certificate properties");
LABEL_45:
      v4 = 2;
LABEL_46:
      if (!a2)
        return v4;
      goto LABEL_47;
    }
    v12 = v9;
    if ((*(_BYTE *)(a2 + 2016) & 0x80) == 0)
    {
LABEL_12:
      v21[0] = *v12;
      v13 = sub_19B6FF410(&v28[1], v28[0], (uint64_t)&v24);
      if ((_DWORD)v13)
      {
        v4 = v13;
        sub_19B6F97E4(3, "%s: failed to parse certificate dictionary");
      }
      else
      {
        if (*((_QWORD *)&v26 + 1) != 0x2000000000000011)
          goto LABEL_45;
        v14 = sub_19B6F74AC((unint64_t *)&v25 + 1, v30);
        if (!(_DWORD)v14)
        {
          v15 = 0;
          while (1)
          {
            v16 = sub_19B6F74D8(v30, v27);
            if (v16)
            {
              if (v16 == 1)
              {
                if (v15)
                  goto LABEL_8;
                sub_19B6F97E4(3, "%s: End of Inner Sequence found, before any valid DER.");
              }
              else
              {
                sub_19B6F97E4(3, "%s: Inner DER did not terminate properly.");
              }
LABEL_42:
              v4 = 0xFFFFFFFFLL;
              if (!a2)
                return v4;
LABEL_47:
              v19 = 0x800000000000;
LABEL_36:
              *(_QWORD *)a2 |= v19;
              return v4;
            }
            v17 = sub_19B6FF410(&v27[1], v27[0], (uint64_t)v22);
            if ((_DWORD)v17)
            {
              v4 = v17;
              sub_19B6F97E4(3, "%s: failed to parse certificate property");
              goto LABEL_57;
            }
            sub_19B6FEE20((unint64_t *)v21, v27[0], &v21[1]);
            v4 = v18;
            if (*((_QWORD *)&v23 + 1) <= 4uLL && ((1 << SBYTE8(v23)) & 0x16) != 0)
            {
              if ((_DWORD)v18)
              {
                sub_19B6F97E4(3, "%s: failed to find property in the manifest");
                goto LABEL_57;
              }
              if (v27[2] != *((_QWORD *)&v21[1] + 1))
              {
                sub_19B6F97E4(3, "%s: manifest or object property length does not match");
                goto LABEL_42;
              }
              if (memcmp((const void *)v27[1], *(const void **)&v21[1], v27[2]))
              {
                sub_19B6F97E4(3, "%s: DERMemcmp failed.");
                goto LABEL_42;
              }
            }
            else
            {
              if (*((_QWORD *)&v23 + 1) == 0xA000000000000000)
              {
                if ((_DWORD)v18 == 1)
                {
                  sub_19B6F97E4(7, "%s: manifest or object missing required property '%c%c%c%c'", "_AMFDRDecodeEvaluateCertificateProperties", SBYTE3(v27[0]), SBYTE2(v27[0]), SBYTE1(v27[0]), SLOBYTE(v27[0]));
                  v4 = 0;
                  *(_QWORD *)a2 |= 0x200000000000uLL;
                }
                goto LABEL_28;
              }
              if (*((_QWORD *)&v23 + 1) != 0xA000000000000001)
                goto LABEL_44;
              if ((_DWORD)v18 != 1)
              {
                sub_19B6F97E4(3, "%s: validation failed for property 0x%llX - tag present");
                goto LABEL_45;
              }
            }
            v4 = 0;
LABEL_28:
            --v15;
            if ((_DWORD)v4)
            {
              sub_19B6F97E4(3, "%s: validation failed for property 0x%llX");
              goto LABEL_57;
            }
          }
        }
        v4 = (uint64_t)v14;
        sub_19B6F97E4(3, "%s: failed to certificate dictionary");
      }
LABEL_57:
      if (!a2)
        return v4;
      goto LABEL_47;
    }
  }
  if (v11 != 1)
  {
    sub_19B6F97E4(3, "%s: Outer DER did not terminate properly.");
    goto LABEL_42;
  }
  if (!v8)
  {
    sub_19B6F97E4(3, "%s: End of Outer Sequence found, before any valid DER.");
    goto LABEL_42;
  }
  return 0;
}

uint64_t sub_19B6F8A28(uint64_t a1, uint64_t a2, unint64_t *a3, unint64_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _OWORD v19[13];
  void *__s1[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26[3];
  _QWORD v27[2];

  memset(v26, 170, sizeof(v26));
  if (a8)
  {
    *(_QWORD *)&v11 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v11 + 1) = 0xAAAAAAAAAAAAAAAALL;
    v24 = v11;
    v25 = v11;
    v22 = v11;
    v23 = v11;
    *(_OWORD *)__s1 = v11;
    v21 = v11;
    v19[11] = v11;
    v19[12] = v11;
    v19[9] = v11;
    v19[10] = v11;
    v19[7] = v11;
    v19[8] = v11;
    v19[5] = v11;
    v19[6] = v11;
    v19[3] = v11;
    v19[4] = v11;
    v19[1] = v11;
    v19[2] = v11;
    v19[0] = v11;
    v27[0] = a1;
    v27[1] = a2;
    if (sub_19B6F6E18((uint64_t)v27, v26))
    {
      v12 = "%s: malformed offline signing public key";
    }
    else
    {
      if (v26[0] != 2)
      {
        v13 = 3;
        sub_19B6F97E4(3, "%s: malformed offline signing public key tag", "_AMFDRDecodeVerifyChainOffline");
        v14 = *(_QWORD *)a8 | 0x40;
        goto LABEL_15;
      }
      if (!sub_19B6FA898((unint64_t)v19, *(_QWORD *)(a8 + 296), *(_DWORD *)(a8 + 304)))
      {
        *(_QWORD *)a8 |= 0x100uLL;
        v15 = v26[2];
        if ((void *)v26[2] == __s1[1])
        {
          v16 = v26[1];
          if (!memcmp(__s1[0], (const void *)v26[1], v26[2]))
          {
            v13 = 0;
            *a3 = v16;
            *a4 = v15;
            *(_OWORD *)(a8 + 312) = xmmword_1E3BD1530;
            return v13;
          }
          v17 = "%s: offline signing public key mismatch";
        }
        else
        {
          v17 = "%s: offline signing public key length mismatch";
        }
        v13 = 3;
        sub_19B6F97E4(3, v17, "_AMFDRDecodeVerifyChainOffline");
        v14 = *(_QWORD *)a8 | 0x20000000000000;
        goto LABEL_15;
      }
      v12 = "%s: fail to decode certificate of offline signing";
    }
    v13 = 3;
    sub_19B6F97E4(3, v12, "_AMFDRDecodeVerifyChainOffline");
    v14 = *(_QWORD *)a8 | 0x40000000000;
LABEL_15:
    *(_QWORD *)a8 = v14;
    return v13;
  }
  sub_19B6F97E4(3, "%s: context must be non NULL", "_AMFDRDecodeVerifyChainOffline");
  return 6;
}

uint64_t sub_19B6F8C10()
{
  return 0;
}

uint64_t sub_19B6F8C18(int a1, uint64_t *a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  _DWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v24;
  const void *v25;
  char *v26;
  char *v27;
  unsigned int *v28;
  int v29;
  void *v30;
  size_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *__s1;
  size_t __n;
  _DWORD *v39;
  unsigned int v40;

  v40 = 0;
  v39 = 0;
  if (!a4)
  {
    sub_19B6F97E4(3, "%s: fdrDecode is NULL", "_AMFDRDecodeVerifyDataCallback");
    return 6;
  }
  if (!a2)
  {
    sub_19B6F97E4(3, "%s: property is NULL", "_AMFDRDecodeVerifyDataCallback");
    *(_QWORD *)a4 |= 1uLL;
    return 6;
  }
  if (a1 <= 1634953571)
  {
    if (a1 > 1400000108)
    {
      if (a1 == 1400000109)
        return 0;
      if (a1 == 1400010324)
      {
        v9 = sub_19B6FFD14(a2, 1400010324, &v39, &v40);
        if ((_DWORD)v9)
        {
          v6 = v9;
          sub_19B6F97E4(3, "%s: Img4DecodeGetPropertyData(kFDRTag_SrvT) failed.");
          goto LABEL_36;
        }
        if (v40 != 1)
        {
          sub_19B6F97E4(3, "%s: Invalid property length of kFDRTag_SrvT", "_AMFDRDecodeVerifyDataCallback");
          v6 = 0;
          v10 = *(_QWORD *)a4 | 0x200;
          goto LABEL_100;
        }
        if (*(_BYTE *)v39 != 48 && (*(_BYTE *)(a4 + 2017) & 4) != 0)
        {
          v6 = 3;
          sub_19B6F97E4(3, "%s: Staged sealing is not allowed", "_AMFDRDecodeVerifyDataCallback");
          v10 = *(_QWORD *)a4 | 0x800000000000000;
          goto LABEL_100;
        }
        return 0;
      }
      goto LABEL_37;
    }
    if (a1 == 1145525076)
    {
      if ((*(_BYTE *)(a4 + 2017) & 0x10) == 0)
      {
        v13 = sub_19B6FFD14(a2, 1145525076, &v39, &v40);
        if ((_DWORD)v13)
        {
          v6 = v13;
          sub_19B6F97E4(3, "%s: Img4DecodeGetPropertyData(kImg4Tag_DGST) failed.");
        }
        else
        {
          if (*(_BYTE *)(a4 + 400))
          {
            if (**(_QWORD **)(*(_QWORD *)(a4 + 2008) + 32) == v40)
            {
              if (!memcmp(v39, (const void *)(a4 + 584), v40))
                return 0;
              v27 = "%s: propertyValue != fdrDecode->sealingManifestImg4.payload.hash";
            }
            else
            {
              v27 = "%s: propertyLength != implementation->digestInfo->digestOutputSize";
            }
          }
          else
          {
            v27 = "%s: fdrDecode->sealingManifestImg4.payload_hashed is false";
          }
          v6 = 3;
          sub_19B6F97E4(3, v27, "_AMFDRDecodeVerifyDataCallback");
        }
LABEL_99:
        v10 = *(_QWORD *)a4 | 0x8000;
        goto LABEL_100;
      }
      v17 = "%s: verifying subCC, skip comparing digest of the entire data";
    }
    else
    {
      if (a1 != 1396917319)
        goto LABEL_37;
      v7 = sub_19B6FFD14(a2, 1396917319, &v39, &v40);
      if ((_DWORD)v7)
      {
        v6 = v7;
        sub_19B6F97E4(3, "%s: Img4DecodeGetPropertyData(kFDRTag_SCDG) failed.");
        goto LABEL_99;
      }
      v23 = v40;
      *(_QWORD *)(a4 + 360) = v39;
      *(_QWORD *)(a4 + 368) = v23;
      if ((*(_BYTE *)(a4 + 2017) & 0x10) != 0)
      {
        if (*(_QWORD *)(a4 + 128))
        {
          v28 = *(unsigned int **)(a4 + 120);
          if (v28)
          {
            __s1 = 0;
            __n = 0;
            v29 = sub_19B6F7998(v28);
            if (sub_19B6FC4D0(*(_QWORD *)(a4 + 360), *(_QWORD *)(a4 + 368), v29, &__s1))
            {
              v6 = 0;
              sub_19B6F97E4(3, "%s: failed to find subCC digest");
            }
            else if (*(_BYTE *)(a4 + 400))
            {
              if (__n == **(_QWORD **)(*(_QWORD *)(a4 + 2008) + 32))
              {
                if (!memcmp(__s1, (const void *)(a4 + 584), __n))
                {
                  sub_19B6F97E4(5, "%s: subCC digest verified", "_AMFDRDecodeVerifyDataCallback");
                  v6 = 0;
                  *(_BYTE *)(a4 + 376) = 1;
                  return v6;
                }
                v6 = 3;
                sub_19B6F97E4(3, "%s: subCC digest mismatch");
              }
              else
              {
                v6 = 3;
                sub_19B6F97E4(3, "%s: subCC digest length mismatch");
              }
            }
            else
            {
              v6 = 3;
              sub_19B6F97E4(3, "%s: subCC is not hashed");
            }
            v10 = *(_QWORD *)a4 | 0x1000000000000000;
            goto LABEL_100;
          }
        }
        *(_QWORD *)a4 |= 0x1000000000000000uLL;
        v17 = "%s: subCCName cannot be NULL when kAMFDRDecodeOptionSubCCOnly is set.";
        goto LABEL_103;
      }
      v17 = "%s: not verifying subCC payload, skip checking subCC digest";
    }
    v18 = 5;
    goto LABEL_51;
  }
  if (a1 <= 1717660002)
  {
    if (a1 == 1634953572)
    {
      v14 = sub_19B6FFD14(a2, 1634953572, &v39, &v40);
      if ((_DWORD)v14)
      {
        v6 = v14;
        sub_19B6F97E4(3, "%s: Img4DecodeGetPropertyData(kFDRTag_asid) failed.");
        goto LABEL_36;
      }
      v24 = *(_QWORD *)(a4 + 224);
      if (v24)
      {
        if (v24 == v40)
        {
          v25 = *(const void **)(a4 + 216);
          if (v25 && !memcmp(v25, v39, v24))
            return 0;
          v26 = "%s: kFDRTag_asid property != fdrDecode->assemblyID";
        }
        else
        {
          v26 = "%s: kFDRTag_asid property length != fdrDecode->assemblyID.length";
        }
        v6 = 3;
        sub_19B6F97E4(3, v26, "_AMFDRDecodeVerifyDataCallback");
        v10 = *(_QWORD *)a4 | 0x200000000000000;
        goto LABEL_100;
      }
      v17 = "%s: Skip verifying assembly identifier";
      goto LABEL_42;
    }
    if (a1 == 1668047219)
    {
      if (sub_19B6FFD14(a2, 1668047219, &v39, &v40))
      {
        v8 = "%s: Img4DecodeGetPropertyData(kFDRTag_clas) failed.";
      }
      else
      {
        if (v39 && v40)
          return 0;
        v33 = v40;
        v8 = "%s: propertyValue must be non NULL with a non-zero length (length=%u)";
      }
      v6 = 3;
      sub_19B6F97E4(3, v8, "_AMFDRDecodeVerifyDataCallback", v33);
      v10 = *(_QWORD *)a4 | 0x400;
      goto LABEL_100;
    }
LABEL_37:
    v15 = 1;
    while (v15 != 48)
    {
      v16 = *(_DWORD *)&aMnrsBlmcamwcam[4 * v15++];
      if (v16 == a1)
      {
        if ((unint64_t)(v15 - 2) < 0x2F)
          return 0;
        break;
      }
    }
    v35 = ((__int16)a1 >> 8);
    v36 = (char)a1;
    v33 = (a1 >> 24);
    v34 = (a1 << 8 >> 24);
    v17 = "%s: Unsupported tag found in manifest '%c%c%c%c'";
LABEL_42:
    v18 = 7;
LABEL_51:
    sub_19B6F97E4(v18, v17, "_AMFDRDecodeVerifyDataCallback", v33, v34, v35, v36);
    return 0;
  }
  if (a1 == 1717660003)
  {
    LOBYTE(__s1) = 0;
    if (!sub_19B6FFC94((uint64_t)a2, 1717660003, (BOOL *)&__s1))
    {
      v6 = 0;
      *(_BYTE *)(a4 + 2004) = (_BYTE)__s1;
      return v6;
    }
    v6 = 3;
    sub_19B6F97E4(3, "%s: Img4DecodeGetPropertyData(kFDRTag_faic) failed.", "_AMFDRDecodeVerifyDataCallback");
    v10 = *(_QWORD *)a4 | 0x400000000;
LABEL_100:
    *(_QWORD *)a4 = v10;
    return v6;
  }
  if (a1 != 1768846196)
  {
    if (a1 == 1886546276)
    {
      v5 = sub_19B6FFD14(a2, 1886546276, &v39, &v40);
      if ((_DWORD)v5)
      {
        v6 = v5;
        sub_19B6F97E4(3, "%s: Img4DecodeGetPropertyData(kFDRTag_prid) failed.");
LABEL_36:
        v10 = *(_QWORD *)a4 | 0x2000;
        goto LABEL_100;
      }
      v19 = v39;
      v20 = v40;
      *(_QWORD *)(a4 + 200) = v39;
      *(_QWORD *)(a4 + 208) = v20;
      if (!*(_QWORD *)(a4 + 1944) || !*(_QWORD *)(a4 + 1952))
      {
        sub_19B6F97E4(4, "%s: Skipping revocation check (trustobject unset)", "_AMFDRDecodeVerifyDataCallback");
        v6 = 0;
        v10 = *(_QWORD *)a4 | 0x200000;
        goto LABEL_100;
      }
      v21 = sub_19B6F9D3C(a4 + 1768, (uint64_t)v19, v20);
      if (v21)
      {
        v22 = v21;
        v6 = 3;
        sub_19B6F97E4(3, "%s: AMFDRDecodeCheckProducerIDRevocation failed with error 0x%016llX", "_AMFDRDecodeVerifyDataCallback", v21);
        v10 = *(_QWORD *)a4 | v22;
        goto LABEL_100;
      }
      return 0;
    }
    goto LABEL_37;
  }
  v12 = sub_19B6FFD14(a2, 1768846196, &v39, &v40);
  if ((_DWORD)v12)
  {
    v6 = v12;
    sub_19B6F97E4(3, "%s: Img4DecodeGetPropertyData(kFDRTag_inst) failed.", "_AMFDRDecodeVerifyDataCallback");
LABEL_30:
    v10 = *(_QWORD *)a4 | 0x4000;
    goto LABEL_100;
  }
  if (a3 == 1)
  {
    v30 = *(void **)(a4 + 104);
    if (v30)
    {
      v31 = *(_QWORD *)(a4 + 112);
      if (v31)
      {
        if ((sub_19B6FC300(v39, v40, v30, v31, *(const void **)(a4 + 184), *(_QWORD *)(a4 + 192), 1, (_QWORD *)a4) & 1) != 0)
          return 0;
        sub_19B6F97E4(3, "%s: kFDRTag_inst property != fdrDecode->uniqueID");
        goto LABEL_91;
      }
    }
    if ((*(_BYTE *)(a4 + 2017) & 0x20) == 0)
    {
      sub_19B6F97E4(3, "%s: no uniqueID is specified, cannot verify kFDRTag_inst property");
LABEL_91:
      v6 = 0;
      goto LABEL_30;
    }
    v17 = "%s: no uniqueID is specified, but this is allowed, skip comparing kFDRTag_inst object property";
LABEL_103:
    v18 = 3;
    goto LABEL_51;
  }
  if (a3)
    return 0;
  v6 = 0;
  if ((sub_19B6FC300(v39, v40, *(void **)(a4 + 136), *(_QWORD *)(a4 + 144), *(const void **)(a4 + 168), *(_QWORD *)(a4 + 176), 0, (_QWORD *)a4) & 1) == 0)
  {
    sub_19B6F97E4(3, "%s: kFDRTag_inst property != fdrDecode->manifestUniqueID", "_AMFDRDecodeVerifyDataCallback");
    v6 = 0;
    v10 = *(_QWORD *)a4 | 0x40000000;
    goto LABEL_100;
  }
  return v6;
}

uint64_t sub_19B6F9460(uint64_t a1, uint64_t a2)
{
  if (a2)
    return *(_QWORD *)(a2 + 2024);
  sub_19B6F97E4(3, "%s: fdrDecode is NULL", "_AMFDRDecodeGetExpectedManifestHash");
  return 0;
}

uint64_t sub_19B6F94A4(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  int v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  v21 = (unint64_t *)a5;
  v22 = 0xAAAAAAAAAAAA0000;
  v19 = 0xAAAAAAAAAAAAAAAALL;
  v20 = 0xAAAAAAAAAAAAAAAALL;
  if (!a5)
  {
    sub_19B6F97E4(3, "%s: fdrDecode is NULL");
    return 6;
  }
  if (*(_QWORD *)(a5 + 104) && *(_QWORD *)(a5 + 112))
  {
    v8 = 0;
    goto LABEL_7;
  }
  if ((*(_BYTE *)(a5 + 2017) & 0x20) == 0)
  {
    sub_19B6F97E4(3, "%s: data instance cannot be missing without kAMFDRDecodeOptionAllowNoDataInstance specified");
    return 6;
  }
  v8 = 1;
LABEL_7:
  v9 = sub_19B6F74AC(a1, &v19);
  if ((_DWORD)v9)
  {
    v11 = (uint64_t)v9;
    v17 = "%s: can't parse top-level container";
    goto LABEL_34;
  }
  while (1)
  {
    if ((_BYTE)v22)
      goto LABEL_25;
    sub_19B6FF60C(&v19, a2, a3, a4);
    if ((_DWORD)v10 == 1)
    {
      if (BYTE1(v22))
        sub_19B6F97E4(3, "%s: failed to find matching inst object propery, returning a mismatched one", "_AMFDRDecodePropertiesFilterCallback");
      if ((_BYTE)v22)
      {
        if (!v8)
          return 0;
      }
      else
      {
        *v21 |= 0x4000uLL;
LABEL_25:
        if ((v8 & 1) == 0)
          return 0;
      }
      sub_19B6F97E4(3, "%s: uniqueID is not specified, which is allowed, skip uniqueID mismatch errors", "_AMFDRDecodePropertiesFilterCallback");
      v11 = 0;
      v14 = v21;
      v15 = *v21 & 0xFFFFFFFFFFFFBFFFLL;
      goto LABEL_27;
    }
    v11 = v10;
    if ((_DWORD)v10)
      break;
    if (BYTE1(v22))
      v12 = v8;
    else
      v12 = 0;
    if ((v12 & 1) != 0)
    {
      sub_19B6F97E4(3, "%s: multiple entries for tag 0x%llu found, but no unique ID specified", "_AMFDRDecodePropertiesFilterCallback", a2);
      if ((_BYTE)v22)
        return 0;
      v11 = 0;
      v14 = v21;
      v15 = *v21 | 0x4000;
LABEL_27:
      *v14 = v15;
      return v11;
    }
    v13 = sub_19B700014((unint64_t *)(a4 + 24), 1, (uint64_t (*)(unint64_t, uint64_t *, uint64_t, uint64_t))sub_19B6FC16C, (uint64_t)&v21);
    if ((_DWORD)v13)
    {
      v11 = v13;
      sub_19B6F97E4(5, "%s: failed to find corresponding data instance");
      return v11;
    }
  }
  v18 = a2;
  v17 = "%s: failed to find property tag 0x%llu";
LABEL_34:
  sub_19B6F97E4(3, v17, "_AMFDRDecodePropertiesFilterCallback", v18, v19, v20);
  return v11;
}

uint64_t sub_19B6F96E0(unint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD v5[2];

  v5[0] = a2;
  v5[1] = a3;
  if (sub_19B6F7594((uint64_t)v5, 5u, (uint64_t)&unk_19B718E40, a1, 0x90uLL, 0))
  {
    sub_19B6F97E4(3, "%s: malformed FDR Trust Object Format");
  }
  else if (*(_QWORD *)a1 && *(_QWORD *)(a1 + 8) == 4)
  {
    if (**(_DWORD **)a1 == *(_DWORD *)"secb")
      return 0;
    sub_19B6F97E4(3, "%s: malformed FDR Trust Object, expected tag %c%c%c%c found tag %c%c%c%c", "AMFDRDecodeTrustObject", aSecb[0], aSecb[1]);
  }
  else
  {
    sub_19B6F97E4(3, "%s: malformed FDR Trust Object, invalid tag length");
  }
  return 0x400000;
}

uint64_t sub_19B6F97E4(uint64_t a1, char *__format, ...)
{
  __int128 v3;
  char __str[16];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  va_list va;

  va_start(va, __format);
  v21 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v3 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v3 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19 = v3;
  v20 = v3;
  v17 = v3;
  v18 = v3;
  v15 = v3;
  v16 = v3;
  v13 = v3;
  v14 = v3;
  v11 = v3;
  v12 = v3;
  v9 = v3;
  v10 = v3;
  v7 = v3;
  v8 = v3;
  *(_OWORD *)__str = v3;
  v6 = v3;
  vsnprintf(__str, 0x100uLL, __format, va);
  if (off_1EE3FD860)
    return off_1EE3FD860(a1, __str);
  else
    return sub_19B701F54("%s", __str);
}

uint64_t sub_19B6F98B0(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  if (!a1)
    return 1;
  v3 = 0;
  v4 = 0;
  v1 = (unint64_t *)(a1 + 64);
  v5 = 0;
  if (sub_19B6F74AC((unint64_t *)(a1 + 16), (unint64_t *)(a1 + 64)))
  {
    sub_19B6F97E4(3, "%s: can't parse FDR Trust Object trusted sequence");
  }
  else if (sub_19B6F74D8(v1, &v3))
  {
    sub_19B6F97E4(3, "%s: can't parse FDR Trust Object trusted");
  }
  else if (v4 && v5 == 4)
  {
    if (*v4 == *(_DWORD *)"trst")
      return 0;
    sub_19B6F97E4(3, "%s: malformed FDR Trust Object trusted, expected tag %c%c%c%c found tag %c%c%c%c", "AMFDRDecodeIterateTrustObjectTrustedBegin", aTrst[0], aTrst[1]);
  }
  else
  {
    sub_19B6F97E4(3, "%s: malformed FDR Trust Object trusted, invalid trusted tag length");
  }
  return 0x400000;
}

uint64_t sub_19B6F99D8(uint64_t a1)
{
  unint64_t *v1;
  int v3;
  unint64_t v4;
  _DWORD *v5;
  uint64_t v6;

  if (!a1)
    return 1;
  v4 = 0;
  v5 = 0;
  v1 = (unint64_t *)(a1 + 128);
  v6 = 0;
  if (sub_19B6F74AC((unint64_t *)(a1 + 112), (unint64_t *)(a1 + 128)))
  {
    sub_19B6F97E4(3, "%s: can't parse FDR Trust Object trusted key sequence");
  }
  else
  {
    v3 = sub_19B6F74D8(v1, &v4);
    if (v3)
    {
      if (v3 == 1)
        return 0x40000000000000;
      sub_19B6F97E4(3, "%s: can't parse FDR Trust Object trusted key: %d");
    }
    else if (v5 && v6 == 4)
    {
      if (*v5 == *(_DWORD *)"trpk")
        return 0;
      sub_19B6F97E4(3, "%s: malformed FDR Trust Object trusted key, expected tag %c%c%c%c found tag %c%c%c%c", "AMFDRDecodeIterateTrustObjectTrustedKeyBegin", aTrpk[0], aTrpk[1]);
    }
    else
    {
      sub_19B6F97E4(3, "%s: malformed FDR Trust Object trusted key, invalid trusted key tag length");
    }
  }
  return 0x400000;
}

uint64_t sub_19B6F9B10(uint64_t a1)
{
  unint64_t *v1;
  unint64_t v3;
  _DWORD *v4;
  uint64_t v5;

  if (!a1)
    return 1;
  v3 = 0;
  v4 = 0;
  v1 = (unint64_t *)(a1 + 80);
  v5 = 0;
  if (sub_19B6F74AC((unint64_t *)(a1 + 48), (unint64_t *)(a1 + 80)))
  {
    sub_19B6F97E4(3, "%s: can't parse FDR Trust Object Revoked sequence");
  }
  else if (sub_19B6F74D8(v1, &v3))
  {
    sub_19B6F97E4(3, "%s: can't parse FDR Trust Object Revoked");
  }
  else if (v4 && v5 == 4)
  {
    if (*v4 == *(_DWORD *)"rvok")
      return 0;
    sub_19B6F97E4(3, "%s: malformed FDR Trust Object Revoked, expected tag %c%c%c%c found tag %c%c%c%c", "AMFDRDecodeIterateTrustObjectRevokedBegin", aRvok[0], aRvok[1]);
  }
  else
  {
    sub_19B6F97E4(3, "%s: malformed FDR Trust Object Revoked, invalid trusted tag length");
  }
  return 0x400000;
}

uint64_t sub_19B6F9C38(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  int v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  result = 1;
  if (a1 && a2 && a3)
  {
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v7 = sub_19B6F74D8((unint64_t *)(a1 + 80), &v10);
    if (v7)
    {
      if (v7 == 1)
      {
        v8 = 0;
        v9 = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v8 = v12;
      if (v12 == 32)
      {
        v9 = v11;
LABEL_9:
        result = 0;
        *a2 = v9;
        *a3 = v8;
        return result;
      }
    }
    return 0x400000;
  }
  return result;
}

uint64_t sub_19B6F9CC4(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unint64_t v5;
  _QWORD v6[2];

  result = 1;
  if (a1 && a2 && a3)
  {
    v5 = 0xAAAAAAAAAAAAAAAALL;
    v6[0] = a2;
    v6[1] = a3;
    if (sub_19B6F73F4((uint64_t)v6, &v5, a1))
    {
      sub_19B6F97E4(3, "%s: can't parse FDR Producer ID sequence", "AMFDRDecodeIterateProducerIDBegin");
      return 0x80000000000;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_19B6F9D3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  void *__s2;
  unsigned int __n;
  unint64_t __n_4[2];
  unint64_t v17;
  const void *v18;
  uint64_t v19;

  __n_4[0] = 0xAAAAAAAAAAAAAAAALL;
  __n_4[1] = 0xAAAAAAAAAAAAAAAALL;
  v3 = 1;
  if (!a1 || !a2 || !a3)
    return v3;
  sub_19B6F97E4(7, "%s: AMFDRDecodeCheckProducerIDRevocation", "AMFDRDecodeCheckProducerIDRevocation");
  v7 = sub_19B6F9CC4(__n_4, a2, a3);
  if (v7)
  {
    v3 = v7;
    sub_19B6F97E4(3, "%s: AMFDRDecodeIterateProducerIDBegin failed with error 0x%016llX");
    return v3;
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v8 = sub_19B6F74D8(__n_4, &v17);
  if (v8)
  {
    if (v8 != 1)
    {
      v3 = 0x80000000000;
      sub_19B6F97E4(3, "%s: AMFDRDecodeIterateProducerIDNext(first) failed with error 0x%016llX");
      return v3;
    }
    return 0;
  }
  v9 = v18;
  if (!v18)
    return 0;
  while (2)
  {
    __n = 0;
    __s2 = 0;
    v10 = sub_19B6F9B10(a1);
    if (v10)
    {
      v3 = v10;
      sub_19B6F97E4(3, "%s: AMFDRDecodeIterateTrustObjectRevokedBegin failed");
      return v3;
    }
    while (1)
    {
      v11 = sub_19B6F9C38(a1, &__s2, &__n);
      if (v11)
      {
        v3 = v11;
        sub_19B6F97E4(3, "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed");
        return v3;
      }
      if (!__s2)
        break;
      if (!memcmp(v9, __s2, __n))
      {
        sub_19B6F97E4(3, "%s: FDR Trust Object revoked certificate found", "AMFDRDecodeCheckProducerIDRevocation");
        return 0x10000000000;
      }
    }
    v17 = 0;
    v18 = 0;
    v19 = 0;
    v12 = sub_19B6F74D8(__n_4, &v17);
    if (v12)
    {
      if (v12 != 1)
      {
        v3 = 0x80000000000;
        sub_19B6F97E4(3, "%s: AMFDRDecodeIterateProducerIDNext(loop) failed with error 0x%016llX");
        return v3;
      }
      return 0;
    }
    v3 = 0;
    v9 = v18;
    if (v18)
      continue;
    break;
  }
  return v3;
}

uint64_t sub_19B6F9EEC(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  int v10;
  const void *v11;
  size_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__s2;
  unsigned int __n;
  char __n_7;
  unsigned int v23;
  int v24;
  void *v25;

  if (!*(_QWORD *)(a1 + 72) || !*(_QWORD *)(a1 + 80))
    *(_QWORD *)a1 |= 0x40000uLL;
  if ((!*(_QWORD *)(a1 + 104) || !*(_QWORD *)(a1 + 112)) && (*(_BYTE *)(a1 + 2017) & 0x20) == 0)
  {
    sub_19B6F97E4(3, "%s: fdrDecode->uniqueID is NULL or 0 size", "AMFDRDecodeEvaluateTrustInternal");
    result = *(_QWORD *)a1 | 1;
LABEL_12:
    *(_QWORD *)a1 = result;
    return result;
  }
  if (*(_QWORD *)(a1 + 8) && *(_QWORD *)(a1 + 16))
  {
    if (sub_19B6FA28C(a1))
    {
      sub_19B6F97E4(4, "%s: data is unwrapped", "AMFDRDecodeEvaluateTrustInternal");
      v3 = *(_QWORD *)a1;
      *(_QWORD *)(a1 + 1912) = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 1920) = *(_QWORD *)(a1 + 16);
      result = v3 | 0x5A01C00;
      goto LABEL_12;
    }
  }
  else if (!*(_QWORD *)(a1 + 1944) || !*(_QWORD *)(a1 + 1952))
  {
    *(_QWORD *)a1 |= 0x200000uLL;
  }
  v4 = sub_19B6FBFC4(a1);
  if (v4)
    *(_QWORD *)a1 |= v4;
  v5 = sub_19B6FC640(a1);
  if (v5)
    *(_QWORD *)a1 |= v5;
  v25 = 0;
  v24 = 0;
  if ((!*(_QWORD *)(a1 + 344) || !*(_DWORD *)(a1 + 352)) && (!*(_QWORD *)(a1 + 232) || !*(_QWORD *)(a1 + 240)))
  {
    sub_19B6F97E4(6, "%s: No need to verify subCC and asid");
    goto LABEL_56;
  }
  v6 = sub_19B6FBAE4(*(_QWORD *)(a1 + 1912), *(_DWORD *)(a1 + 1920), &v25, &v24);
  v7 = v25;
  if (!v25 || v6)
  {
    sub_19B6F97E4(3, "%s: FDR 3.0 Data can't be decoded!");
    goto LABEL_51;
  }
  v8 = 0;
  while (1)
  {
    v23 = 0;
    __n_7 = 0;
    __n = 0;
    __s2 = 0;
    v9 = sub_19B6FBD98((uint64_t)v7, &v23, &__n_7, &__s2, &__n, 0);
    if (v9)
    {
      if (v9 == 0x40000000000000)
      {
        if (*(_QWORD *)(a1 + 232) && !((*(_QWORD *)(a1 + 240) == 0) | v8 & 1))
          sub_19B6F97E4(4, "%s: kFDRTag_asid doesn't exist, but this is allowed");
        goto LABEL_56;
      }
      sub_19B6F97E4(3, "%s: failed to decode payload: 0x%llx!");
LABEL_51:
      v17 = *(_QWORD *)a1 | 0x400000000000000;
      goto LABEL_55;
    }
    v10 = sub_19B6F7998(&v23);
    if (v10 == 1634953572)
    {
      v11 = *(const void **)(a1 + 232);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 240);
        if (v12)
        {
          if (v12 != __n)
          {
            sub_19B6F97E4(3, "%s: asid subCC length != fdrDecode->asidSubCCID.length", "_AMFDRDecodeVerifySubCC");
            *(_QWORD *)a1 |= 0x200000000000000uLL;
            v11 = *(const void **)(a1 + 232);
            v12 = __n;
          }
          if (memcmp(v11, __s2, v12))
          {
            sub_19B6F97E4(3, "%s: asid subCC data != fdrDecode->asidSubCCID", "_AMFDRDecodeVerifySubCC");
            *(_QWORD *)a1 |= 0x200000000000000uLL;
          }
          v8 = 1;
        }
      }
    }
    if (*(_QWORD *)(a1 + 344))
    {
      v13 = *(unsigned int *)(a1 + 352);
      if ((_DWORD)v13)
        break;
    }
LABEL_47:
    v7 = v25;
  }
  v14 = 0;
  while (*(_DWORD *)(*(_QWORD *)(a1 + 344) + 4 * v14) != v10)
  {
LABEL_46:
    if (++v14 >= v13)
      goto LABEL_47;
  }
  v15 = *(_QWORD *)(a1 + 360);
  if (!v15 || (v16 = *(_QWORD *)(a1 + 368)) == 0)
  {
    sub_19B6F97E4(3, "%s: No SCDG in manifest, subCC digest missing");
    goto LABEL_54;
  }
  v18 = 0;
  v19 = 0;
  if (!sub_19B6FC4D0(v15, v16, v10, &v18) && v19 && v18)
  {
    v13 = *(unsigned int *)(a1 + 352);
    goto LABEL_46;
  }
  sub_19B6F97E4(3, "%s: cannot find subCC digest for %u");
LABEL_54:
  v17 = *(_QWORD *)a1 | 0x1000000000000000;
LABEL_55:
  *(_QWORD *)a1 = v17;
LABEL_56:
  if (v25)
    free(v25);
  return *(_QWORD *)a1;
}

uint64_t sub_19B6FA28C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  unint64_t v16[3];
  unint64_t v17[3];

  memset(v17, 170, sizeof(v17));
  v15 = 0u;
  *(_OWORD *)v16 = 0u;
  v14 = 0u;
  if (sub_19B6F6E18(a1 + 8, v17))
  {
    sub_19B6F97E4(3, "%s: failed to decode FDR Combined Format", "_AMFDRDecodeCombined");
    *(_QWORD *)a1 |= 0x80uLL;
    return 128;
  }
  if (v17[0] != 0x2000000000000010)
  {
    sub_19B6F97E4(3, "%s: FDR Combined Format unexpected tag: %llu", "_AMFDRDecodeCombined", v17[0]);
    *(_QWORD *)a1 |= 0x10000uLL;
    return 0x10000;
  }
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 8) + v3;
  if (v4 < v17[1] + v17[2])
  {
    sub_19B6F97E4(3, "%s: item is bigger on the inside", "_AMFDRDecodeCombined");
    *(_QWORD *)a1 |= 4uLL;
    return 4;
  }
  if (v4 > v17[1] + v17[2])
  {
    sub_19B6F97E4(3, "%s: Buffer contains %lu unused bytes", "_AMFDRDecodeCombined", v3 - v17[2]);
    *(_QWORD *)a1 |= 8uLL;
    return 8;
  }
  if (sub_19B6F765C(&v17[1], 3u, (uint64_t)"", (unint64_t)&v14, 0x30uLL, 0))
    goto LABEL_30;
  if (!(_QWORD)v14 || *((_QWORD *)&v14 + 1) != 4)
    goto LABEL_29;
  if (*(_DWORD *)v14 != *(_DWORD *)"comb")
  {
LABEL_30:
    *(_QWORD *)a1 |= 0x20000uLL;
    return 0x20000;
  }
  if (!(_QWORD)v15 || !*((_QWORD *)&v15 + 1))
  {
    *(_QWORD *)a1 |= 0x200uLL;
    v2 = 512;
    goto LABEL_20;
  }
  v12 = 0u;
  v13 = 0u;
  if (sub_19B6F765C((unint64_t *)&v15, 2u, (uint64_t)&unk_19B718E10, (unint64_t)&v12, 0x20uLL, 0))
  {
    sub_19B6F97E4(3, "%s: malformed FDR Combined Format (DERFDRItemSpecs)");
    goto LABEL_30;
  }
  if (!(_QWORD)v12 || *((_QWORD *)&v12 + 1) != 4)
  {
LABEL_29:
    sub_19B6F97E4(3, "%s: malformed FDR Combined Format, invalid tag length");
    goto LABEL_30;
  }
  if (*(_DWORD *)v12 != *(_DWORD *)"fdrd")
  {
    sub_19B6F97E4(3, "%s: malformed FDR Combined Format, expected tag %c%c%c%c found tag %c%c%c%c", "_AMFDRDecodeCombined", aFdrd[0], aFdrd[1]);
    goto LABEL_30;
  }
  v9 = *((_QWORD *)&v13 + 1);
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v9;
  if ((*(_BYTE *)(a1 + 2017) & 8) != 0)
  {
    v2 = sub_19B6FCB08(a1);
    if (v2)
    {
      sub_19B6F97E4(4, "%s: cannot decode to a multicombined data, proceed with combined format", "_AMFDRDecodeCombined");
      v11 = *((_QWORD *)&v13 + 1);
      *(_QWORD *)(a1 + 24) = v13;
      *(_QWORD *)(a1 + 32) = v11;
    }
  }
  else
  {
    v2 = 0;
  }
LABEL_20:
  if (!v16[0] || !v16[1])
  {
    v7 = *(_QWORD *)a1 | 0x200000;
LABEL_38:
    *(_QWORD *)a1 = v7;
    return v2;
  }
  v12 = 0u;
  v13 = 0u;
  if (sub_19B6F765C(v16, 2u, (uint64_t)&unk_19B718E10, (unint64_t)&v12, 0x20uLL, 0))
  {
    sub_19B6F97E4(3, "%s: malformed FDR Combined Format (trustObject)");
LABEL_36:
    v8 = 0x20000;
    v2 = 0x20000;
LABEL_37:
    v7 = *(_QWORD *)a1 | v8;
    goto LABEL_38;
  }
  if (!(_QWORD)v12 || *((_QWORD *)&v12 + 1) != 4)
  {
    sub_19B6F97E4(3, "%s: malformed FDR Combined Format (trustObject), invalid tag length");
    goto LABEL_36;
  }
  if (*(_DWORD *)v12 != *(_DWORD *)"secb")
  {
    sub_19B6F97E4(3, "%s: malformed FDR Combined Format (trustObject), expected tag %c%c%c%c found tag %c%c%c%c", "_AMFDRDecodeCombined", aSecb[0], aSecb[1]);
    goto LABEL_36;
  }
  v10 = v13;
  *(_OWORD *)(a1 + 1944) = v13;
  v8 = 0x200000;
  if (!(_QWORD)v10 || !*((_QWORD *)&v10 + 1))
    goto LABEL_37;
  return v2;
}

uint64_t sub_19B6FA6A8(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  unint64_t v5;
  __int128 v6;

  result = 1;
  if (a1 && a2 && a3)
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    v6 = 0uLL;
    v5 = 0;
    *(_QWORD *)(a1 + 32) = a2;
    *(_QWORD *)(a1 + 40) = a3;
    if (sub_19B6FA7AC(a1 + 32, (unint64_t *)a1, a1 + 48))
    {
      sub_19B6F97E4(3, "%s: failed to decode public key: %d");
    }
    else
    {
      if (!sub_19B6F794C(a1 + 48, (uint64_t)&xmmword_1E3BD1530))
      {
        sub_19B6F97E4(3, "%s: public key OID is not EC", "AMFDRDecodePublicKey");
        return 64;
      }
      if (!sub_19B6F6E18(a1 + 64, &v5))
      {
        result = 0;
        *(_OWORD *)(a1 + 16) = v6;
        return result;
      }
      sub_19B6F97E4(3, "%s: failed to decode params");
    }
    return 16;
  }
  return result;
}

uint64_t sub_19B6FA7AC(uint64_t a1, unint64_t *a2, unint64_t a3)
{
  __int128 v5;
  uint64_t result;
  char v7;
  __int128 v8;
  __int128 v9;

  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v8 = v5;
  v9 = v5;
  v7 = -86;
  result = sub_19B6F7594(a1, 2u, (uint64_t)&unk_19B718BF8, (unint64_t)&v8, 0x20uLL, 0x20uLL);
  if (!(_DWORD)result)
  {
    result = sub_19B6F765C((unint64_t *)&v8, 2u, (uint64_t)&unk_19B718BC0, a3, 0x20uLL, 0x20uLL);
    if (!(_DWORD)result)
    {
      if (sub_19B6F794C(a3, (uint64_t)&off_1E3BD14F0) || sub_19B6F794C(a3, (uint64_t)&xmmword_1E3BD1530))
      {
        result = sub_19B6F71D0((uint64_t)&v9, a2, &v7);
        if (!(_DWORD)result)
        {
          if (v7)
            return 3;
          else
            return 0;
        }
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

uint64_t sub_19B6FA898(unint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;

  result = 1;
  if (a1 && a2 && a3)
  {
    *(_OWORD *)(a1 + 272) = 0u;
    *(_OWORD *)(a1 + 288) = 0u;
    *(_OWORD *)(a1 + 240) = 0u;
    *(_OWORD *)(a1 + 256) = 0u;
    *(_OWORD *)(a1 + 208) = 0u;
    *(_OWORD *)(a1 + 224) = 0u;
    *(_OWORD *)(a1 + 176) = 0u;
    *(_OWORD *)(a1 + 192) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 160) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_QWORD *)(a1 + 256) = a2;
    *(_QWORD *)(a1 + 264) = a3;
    if (sub_19B6F7594(a1 + 256, 3u, (uint64_t)&unk_19B7189F0, a1, 0x30uLL, 0x30uLL)
      || sub_19B6F7594(a1, 0xAu, (uint64_t)&unk_19B7190C8, a1 + 48, 0xA0uLL, 0xA0uLL)
      || sub_19B6FA7AC(a1 + 144, (unint64_t *)(a1 + 208), a1 + 224))
    {
      return 0x40000000000;
    }
    if (*(_QWORD *)(a1 + 248))
    {
      if (sub_19B6F794C(a1 + 224, (uint64_t)&xmmword_1E3BD1530))
      {
        if (*(_QWORD *)(a1 + 248) != 10)
          return 0x40000000000;
        v5 = *(_BYTE **)(a1 + 240);
        if (*v5 != 6 || v5[1] != 8 || memcmp(v5 + 2, &unk_19B718CBA, 8uLL))
          return 0x40000000000;
      }
      else if (sub_19B6F794C(a1 + 224, (uint64_t)&off_1E3BD14F0))
      {
        if (*(_QWORD *)(a1 + 248) != 2)
          return 0x40000000000;
        v6 = *(_BYTE **)(a1 + 240);
        if (*v6 != 5 || v6[1])
          return 0x40000000000;
      }
    }
    v7 = 0xAAAAAAAAAAAAAAAALL;
    if (sub_19B6FAABC(a1 + 48, (uint64_t)&off_1E3BD1670, &v7, (_QWORD *)(a1 + 272), 1))
    {
      sub_19B6F97E4(5, "%s: ClientID extension not found", "AMFDRDecodeCertificate");
    }
    else if (v7 != 12)
    {
      return 0x40000000000;
    }
    if (sub_19B6FAABC(a1 + 48, (uint64_t)&off_1E3BD1680, &v7, (_QWORD *)(a1 + 288), 0))
    {
      sub_19B6F97E4(5, "%s: Certificate Properties extension not found", "AMFDRDecodeCertificate");
      return 0;
    }
    if (v7 == 0x2000000000000011)
      return 0;
    return 0x40000000000;
  }
  return result;
}

uint64_t sub_19B6FAABC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, int a5)
{
  __int128 v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v13;
  unint64_t v15[3];
  _OWORD v16[2];
  __int128 v17;
  unint64_t v18[3];
  unint64_t v19;
  unint64_t v20[2];

  v20[0] = 0xAAAAAAAAAAAAAAAALL;
  v20[1] = 0xAAAAAAAAAAAAAAAALL;
  memset(v18, 170, sizeof(v18));
  *(_QWORD *)&v5 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v5 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v16[1] = v5;
  v17 = v5;
  memset(v15, 170, sizeof(v15));
  v6 = 1;
  v16[0] = v5;
  if (a1 && a2 && a4)
  {
    *a4 = 0;
    a4[1] = 0;
    if (*(_QWORD *)(a1 + 152) && (v10 = *(_QWORD *)(a1 + 144), v9 = a1 + 144, v10))
    {
      v19 = 0xAAAAAAAAAAAAAAAALL;
      v6 = 16;
      if (!sub_19B6F73F4(v9, &v19, v20) && v19 == 0x2000000000000010)
      {
        v6 = 2;
        while (!sub_19B6F74D8(v20, v18))
        {
          if (v18[0] != 0x2000000000000010
            || sub_19B6F765C(&v18[1], 3u, (uint64_t)&unk_19B718B70, (unint64_t)v16, 0x30uLL, 0x30uLL))
          {
            return 16;
          }
          if (sub_19B6F794C(a2, (uint64_t)v16))
          {
            if (sub_19B6F6E18((uint64_t)&v17, v15))
              return 0x40000000000;
            v6 = 0;
            *a3 = v15[0];
            if (a5)
              v13 = &v15[1];
            else
              v13 = (unint64_t *)&v17;
            *(_OWORD *)a4 = *(_OWORD *)v13;
            return v6;
          }
        }
      }
    }
    else
    {
      return 512;
    }
  }
  return v6;
}

double sub_19B6FAC54(_OWORD *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v22[2];
  __int128 v23;
  __int128 v24;
  __int128 v25;

  if (a1 && a2 && a3)
  {
    a1[17] = 0u;
    a1[18] = 0u;
    a1[15] = 0u;
    a1[16] = 0u;
    a1[13] = 0u;
    a1[14] = 0u;
    a1[11] = 0u;
    a1[12] = 0u;
    a1[9] = 0u;
    a1[10] = 0u;
    a1[7] = 0u;
    a1[8] = 0u;
    a1[5] = 0u;
    a1[6] = 0u;
    a1[3] = 0u;
    a1[4] = 0u;
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
    v23 = 0u;
    v24 = 0u;
    memset(v22, 0, sizeof(v22));
    v20 = 0u;
    v21 = 0u;
    v18 = 0u;
    v19 = 0u;
    v17[0] = 0;
    v17[1] = 0;
    v16 = 0;
    v14 = 0;
    v15 = 0uLL;
    *(_QWORD *)&v25 = a2;
    *((_QWORD *)&v25 + 1) = a3;
    if (sub_19B6F7594((uint64_t)&v25, 4u, (uint64_t)&unk_19B719068, (unint64_t)v22, 0x40uLL, 0x40uLL))
    {
      sub_19B6F97E4(3, "%s: failed to parse im4c: %d");
    }
    else if (*(_QWORD *)&v22[0] && *((_QWORD *)&v22[0] + 1) == 4)
    {
      if (**(_DWORD **)&v22[0] == *(_DWORD *)"IM4C")
      {
        if (sub_19B6F6E18((uint64_t)&v23, &v16))
        {
          sub_19B6F97E4(3, "%s: failed to parse signed section sequence: %d");
        }
        else if (v16 == 0x2000000000000011)
        {
          if (sub_19B6F765C(v17, 2u, (uint64_t)&unk_19B719038, (unint64_t)&v20, 0x20uLL, 0x20uLL))
          {
            sub_19B6F97E4(3, "%s: failed to parse signed section of im4c: %d");
          }
          else if (sub_19B6F6E18((uint64_t)&v21, &v14))
          {
            sub_19B6F97E4(3, "%s: failed to parse public key of im4c: %d");
          }
          else if (sub_19B6F7594((uint64_t)&v20, 2u, (uint64_t)&unk_19B719008, (unint64_t)&v18, 0x20uLL, 0x20uLL))
          {
            sub_19B6F97E4(3, "%s: failed to parse cert properties: %d");
          }
          else if ((_QWORD)v18 && *((_QWORD *)&v18 + 1) == 4)
          {
            if (*(_DWORD *)v18 == *(_DWORD *)"CRTP")
            {
              v4 = 0;
              v5 = 0;
              do
              {
                v6 = 0;
                v7 = (uint64_t)*(&off_1EE3FD5A8 + v4);
                while (*((_QWORD *)&v24 + 1) != *(_DWORD *)(v7 + 4) + (_DWORD)v6)
                {
                  if (++v6 == 3)
                    goto LABEL_22;
                }
                v5 = *(_OWORD **)(v7 + 24);
LABEL_22:
                ++v4;
              }
              while (v4 != 3);
              if (v5)
              {
                v8 = 0;
                while (1)
                {
                  v9 = *(uint64_t *)((char *)&off_1EE3FD5A8 + v8);
                  if (*((_QWORD *)&v15 + 1) == *(_DWORD *)v9)
                    break;
                  v8 += 8;
                  if (v8 == 24)
                    goto LABEL_27;
                }
                v11 = *(__int128 **)(v9 + 16);
                if (!v11)
                {
LABEL_27:
                  sub_19B6F97E4(3, "%s: unsupported public key length: %lu");
                  return result;
                }
                *a1 = v23;
                a1[2] = v24;
                a1[1] = *v5;
                a1[13] = v15;
                a1[14] = xmmword_1E3BD1530;
                v12 = *v11;
                a1[18] = v19;
                v13 = v25;
                a1[15] = v12;
                a1[16] = v13;
                result = *(double *)&v15;
                a1[9] = v15;
              }
              else
              {
                sub_19B6F97E4(3, "%s: unsupported signature length: %lu");
              }
            }
            else
            {
              sub_19B6F97E4(3, "%s: malformed cert property key: %c%c%c%c");
            }
          }
          else
          {
            sub_19B6F97E4(3, "%s: malformed cert property key length: %lu");
          }
        }
        else
        {
          sub_19B6F97E4(3, "%s: unexpected signed section tag: 0x%llx");
        }
      }
      else
      {
        sub_19B6F97E4(3, "%s: malformed im4c tag: %c%c%c%c");
      }
    }
    else
    {
      sub_19B6F97E4(3, "%s: malformed im4c tag length: %lu");
    }
  }
  return result;
}

void sub_19B6FB004(uint64_t a1, __int16 a2, _OWORD **a3, _DWORD *a4)
{
  uint64_t v7;
  unint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;

  v15 = 0;
  if (a1 && a3 && *(_QWORD *)a1)
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7)
    {
      if (!sub_19B6FB65C(*(_QWORD *)a1, v7, &v15))
      {
        v9 = *(_QWORD *)(a1 + 8);
        if (v9 >= v15)
        {
          v10 = *a3;
          v11 = *(_QWORD *)a1;
          if ((a2 & 0x100) != 0)
            sub_19B6FAC54(v10, v11, v9);
          else
            v12 = sub_19B6FA898((unint64_t)v10, v11, v9);
          if (!v12)
          {
            v13 = *(unsigned __int16 *)(a1 + 16);
            *(_WORD *)(a1 + 16) = v13 + 1;
            *a4 = v13;
            v14 = *(_QWORD *)(a1 + 8) - v15;
            *(_QWORD *)a1 += v15;
            *(_QWORD *)(a1 + 8) = v14;
          }
        }
      }
    }
    else
    {
      *a3 = 0;
    }
  }
}

uint64_t sub_19B6FB0E0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unsigned int v5;
  uint64_t v6;
  char *v7;
  char *v9;
  size_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  void *__s2;
  unsigned int __n;
  _OWORD __n_4[2];
  _OWORD v18[2];
  _OWORD __s1[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  __n = 0;
  __s2 = 0;
  *(_QWORD *)&v4 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v4 + 1) = 0xAAAAAAAAAAAAAAAALL;
  __s1[0] = v4;
  __s1[1] = v4;
  v18[0] = v4;
  v18[1] = v4;
  __n_4[0] = v4;
  __n_4[1] = v4;
  v5 = sub_19B701614(*(char **)(a2 + 256), *(_QWORD *)(a2 + 264), (uint64_t)__s1);
  if (v5 || (v5 = sub_19B701614(*(char **)(a2 + 144), *(_QWORD *)(a2 + 152), (uint64_t)v18)) != 0)
  {
LABEL_3:
    v6 = v5;
    v7 = "%s: AMSupportDigestSha256 failed";
LABEL_4:
    sub_19B6F97E4(3, v7, "AMFDRDecodeCheckCertRevocation");
    return v6;
  }
  v9 = *(char **)(a2 + 272);
  if (v9 && (v10 = *(_QWORD *)(a2 + 280)) != 0)
  {
    v5 = sub_19B701614(v9, v10, (uint64_t)__n_4);
    if (v5)
      goto LABEL_3;
    v11 = 1;
  }
  else
  {
    v11 = 0;
  }
  v12 = sub_19B6F9B10(a1);
  if (v12)
  {
    v6 = v12;
    sub_19B6F97E4(3, "%s: AMFDRDecodeIterateTrustObjectRevokedBegin failed");
  }
  else
  {
    v13 = sub_19B6F9C38(a1, &__s2, &__n);
    if (v13)
    {
      v6 = v13;
      sub_19B6F97E4(3, "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed");
    }
    else
    {
      v7 = "%s: AMFDRDecodeIterateTrustObjectRevokedNext failed";
      while (1)
      {
        v6 = (uint64_t)__s2;
        if (!__s2)
          break;
        v14 = __n;
        if (!memcmp(__s1, __s2, __n))
        {
          v6 = 0x10000000000;
          sub_19B6F97E4(3, "%s: FDR Trust Object revoked certificate found");
          return v6;
        }
        if (!memcmp(v18, (const void *)v6, v14))
        {
          v6 = 0x10000000000;
          sub_19B6F97E4(3, "%s: FDR Trust Object revoked public key found");
          return v6;
        }
        if (v11 && !memcmp(__n_4, (const void *)v6, v14))
        {
          v6 = 0x10000000000;
          sub_19B6F97E4(3, "%s: FDR Trust Object revoked client ID found");
          return v6;
        }
        v6 = sub_19B6F9C38(a1, &__s2, &__n);
        if (v6)
          goto LABEL_4;
      }
    }
  }
  return v6;
}

uint64_t sub_19B6FB2C0(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a3)
  {
    if ((a4 & 0x100) == 0)
      return sub_19B6FB400(a1, a2, a3, a5);
    v8 = *(_QWORD *)(a1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(a1 + 40);
      if (v9)
      {
        if (sub_19B6FD010(*(_QWORD *)(a2 + 208), *(_DWORD *)(a2 + 216), *(_QWORD *)(a1 + 32), v9, *(char **)a1, *(_DWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), v8, a2 + 240, 1, a5))
        {
          v10 = 0x20000000000;
          sub_19B6F97E4(3, "%s: PKI: im4c cert signature validation with issuer pubkey failed");
        }
        else
        {
          sub_19B6F97E4(7, "%s: PKI: verify im4c cert was issued and signed by issuer (success)", "_AMFDRDecodeVerifyImage4CertIssuer");
          v10 = sub_19B6FB0E0(a3, a1);
          if (v10)
            sub_19B6F97E4(3, "%s: im4c revocation check failed");
        }
      }
      else
      {
        v10 = 0x40000000000;
        sub_19B6F97E4(3, "%s: decoded IM4C signature is empty");
      }
    }
    else
    {
      v10 = 0x40000000000;
      sub_19B6F97E4(3, "%s: decoded IM4C signature OID is empty");
    }
  }
  else
  {
    sub_19B6F97E4(3, "%s: trustObject is NULL", "AMFDRDecodeVerifyCertIssuerWithOptions");
    return 1;
  }
  return v10;
}

uint64_t sub_19B6FB400(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  __int128 v7;
  size_t v8;
  char *v10;
  const char *v11;
  char *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v16;
  unint64_t v17;
  char v18;
  _OWORD v19[2];

  *(_QWORD *)&v7 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v7 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v19[0] = v7;
  v19[1] = v7;
  v16 = 0xAAAAAAAAAAAAAAAALL;
  v17 = 0xAAAAAAAAAAAAAAAALL;
  v8 = *(_QWORD *)(a2 + 136);
  if (v8 != *(_QWORD *)(a1 + 104) || memcmp(*(const void **)(a2 + 128), *(const void **)(a1 + 96), v8))
  {
    sub_19B6F97E4(3, "%s: PKI: cert was not issued by issuer (subject != issuer)", "_AMFDRDecodeVerifyCertIssuerInternal");
    v10 = (char *)malloc(0x100uLL);
    if (sub_19B6FD450(*(_QWORD *)(a2 + 128), *(_QWORD *)(a2 + 136), v10))
      v11 = "decode error";
    else
      v11 = v10;
    v12 = (char *)malloc(0x100uLL);
    if (sub_19B6FD450(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), v12))
      v13 = "decode error";
    else
      v13 = v12;
    sub_19B6F97E4(3, "%s: subject: %s, issuer: %s", "_AMFDRDecodeVerifyCertIssuerInternal", v11, v13);
    if (v10)
      free(v10);
    if (v12)
      free(v12);
    return 0x20000000000;
  }
  v18 = -86;
  if (sub_19B6F765C((unint64_t *)(a1 + 16), 2u, (uint64_t)&unk_19B718BC0, (unint64_t)v19, 0x20uLL, 0x20uLL))
  {
    sub_19B6F97E4(3, "%s: decodeAlgId failed");
    return 0x40000000000;
  }
  if (sub_19B6F71D0(a1 + 32, (unint64_t *)&v16, &v18))
  {
    sub_19B6F97E4(3, "%s: DERParseBitString(sig) failed");
    return 0x40000000000;
  }
  if (v18)
  {
    sub_19B6F97E4(3, "%s: numUnused != 0");
    return 0x40000000000;
  }
  if (sub_19B6FD010(*(_QWORD *)(a2 + 208), *(_DWORD *)(a2 + 216), v16, v17, *(char **)a1, *(_DWORD *)(a1 + 8), *(uint64_t *)&v19[0], DWORD2(v19[0]), a1 + 240, 0, a4))
  {
    sub_19B6F97E4(3, "%s: PKI: cert signature validation with issuer pubkey failed", "_AMFDRDecodeVerifyCertIssuerInternal");
    return 0x20000000000;
  }
  sub_19B6F97E4(7, "%s: PKI: verify cert was issued and signed by issuer (success)", "_AMFDRDecodeVerifyCertIssuerInternal");
  if (!a3)
    return 0;
  v14 = sub_19B6FB0E0(a3, a1);
  if (v14)
    sub_19B6F97E4(3, "%s: revocation check failed", "_AMFDRDecodeVerifyCertIssuerInternal");
  return v14;
}

uint64_t sub_19B6FB65C(uint64_t a1, unsigned int a2, _DWORD *a3)
{
  uint64_t result;
  unint64_t v6[3];
  _QWORD v7[2];

  memset(v6, 170, sizeof(v6));
  result = 1;
  if (a1 && a3)
  {
    v7[0] = a1;
    v7[1] = a2;
    if (sub_19B6F6E20((uint64_t)v7, v6, 0))
    {
      sub_19B6F97E4(3, "%s: failed to decode DER", "AMFDRDecodeParseDERLengthFromBuffer");
      return 2;
    }
    else
    {
      result = 0;
      *a3 = LODWORD(v6[2]) - a1 + LODWORD(v6[1]);
    }
  }
  return result;
}

uint64_t sub_19B6FB6F4(uint64_t *a1, _QWORD *a2, _DWORD *a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t (**v28)();
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v6 = malloc(0x7F8uLL);
  if (v6)
  {
    v7 = (uint64_t)v6;
    bzero(v6, 0x7F8uLL);
    if (a1)
    {
      v8 = *a1;
      if (*a1 && (v9 = *((unsigned int *)a1 + 2), (_DWORD)v9))
      {
        if (a2 && a3)
        {
          v10 = a1[18];
          if ((v10 & 0x801) != 0)
          {
            *(_QWORD *)(v7 + 8) = v8;
            *(_QWORD *)(v7 + 16) = v9;
          }
          else
          {
            *(_QWORD *)(v7 + 1944) = a1[2];
            *(_QWORD *)(v7 + 1952) = *((unsigned int *)a1 + 6);
            *(_QWORD *)(v7 + 24) = v8;
            *(_QWORD *)(v7 + 32) = v9;
            v13 = *((unsigned int *)a1 + 10);
            *(_QWORD *)(v7 + 280) = a1[4];
            *(_QWORD *)(v7 + 288) = v13;
          }
          v14 = *((unsigned int *)a1 + 14);
          *(_QWORD *)(v7 + 72) = a1[6];
          *(_QWORD *)(v7 + 80) = v14;
          v15 = *((unsigned int *)a1 + 18);
          *(_QWORD *)(v7 + 88) = a1[8];
          *(_QWORD *)(v7 + 96) = v15;
          if ((v10 & 0x80) != 0)
          {
            v18 = a1[12];
            v19 = *((unsigned int *)a1 + 26);
            v16 = v18;
            v17 = v19;
          }
          else
          {
            v16 = a1[10];
            v17 = *((unsigned int *)a1 + 22);
            v18 = a1[12];
            v19 = *((unsigned int *)a1 + 26);
          }
          *(_QWORD *)(v7 + 104) = v16;
          *(_QWORD *)(v7 + 112) = v17;
          v20 = *((unsigned int *)a1 + 34);
          *(_QWORD *)(v7 + 216) = a1[16];
          *(_QWORD *)(v7 + 224) = v20;
          v21 = *((unsigned int *)a1 + 66);
          *(_QWORD *)(v7 + 232) = a1[32];
          *(_QWORD *)(v7 + 240) = v21;
          *(_QWORD *)(v7 + 136) = v18;
          *(_QWORD *)(v7 + 144) = v19;
          v22 = a1[14];
          v23 = *((unsigned int *)a1 + 30);
          *(_QWORD *)(v7 + 168) = v22;
          *(_QWORD *)(v7 + 176) = v23;
          v24 = a1[26];
          if (v24 && (v25 = *((unsigned int *)a1 + 54), (_DWORD)v25))
          {
            *(_QWORD *)(v7 + 184) = v24;
            v23 = v25;
          }
          else
          {
            *(_QWORD *)(v7 + 184) = v22;
          }
          *(_QWORD *)(v7 + 192) = v23;
          *(_QWORD *)(v7 + 2016) = v10;
          if (v22)
            v26 = 1;
          else
            v26 = (_DWORD)v14 == 48;
          v27 = !v26 && (v10 & 0x20) == 0;
          v28 = off_1E3BD03A0;
          if (!v27)
            v28 = off_1E3BD03D8;
          *(_QWORD *)(v7 + 2008) = v28;
          if ((v10 & 0x100) != 0)
          {
            *(_QWORD *)(v7 + 2008) = off_1E3BD03D8;
            v29 = *((unsigned int *)a1 + 58);
            *(_QWORD *)(v7 + 152) = a1[28];
            *(_QWORD *)(v7 + 160) = v29;
          }
          if ((v10 & 0x1000) != 0)
          {
            v30 = *((unsigned int *)a1 + 62);
            *(_QWORD *)(v7 + 120) = a1[30];
            *(_QWORD *)(v7 + 128) = v30;
          }
          *(_QWORD *)(v7 + 2024) = a1[19];
          v31 = a1[34];
          if (v31)
          {
            v32 = *((_DWORD *)a1 + 70);
            if (v32)
            {
              *(_QWORD *)(v7 + 344) = v31;
              *(_DWORD *)(v7 + 352) = v32;
            }
          }
          v11 = sub_19B6F9EEC(v7);
          *a2 = *(_QWORD *)(v7 + 1912);
          *a3 = *(_QWORD *)(v7 + 1920);
          if (*(_BYTE *)(v7 + 2032))
          {
            v33 = *(_OWORD *)(v7 + 744);
            *((_OWORD *)a1 + 10) = *(_OWORD *)(v7 + 728);
            *((_OWORD *)a1 + 11) = v33;
            *((_OWORD *)a1 + 12) = *(_OWORD *)(v7 + 760);
          }
          v34 = a1[18];
          if ((v34 & 2) != 0 && (v11 & 0x2600000000100) != 0)
          {
            sub_19B6F97E4(4, "%s: ignoring unsealed error 0x%016llX", "AMFDRDecodeTrustEvaluation", v11 & 0x2600000000100);
            v11 &= 0xFFFD9FFFFFFFFEFFLL;
            v34 = a1[18];
          }
          if ((v34 & 4) != 0 && (v11 & 0x140000) != 0)
          {
            sub_19B6F97E4(4, "%s: ignoring trust object mismatch error 0x%016llX", "AMFDRDecodeTrustEvaluation", v11 & 0x140000);
            v11 &= 0xFFFFFFFFFFEBFFFFLL;
            v34 = a1[18];
          }
          if ((v34 & 8) != 0)
          {
            v35 = 0x8005A33C80;
            if ((v34 & 1) == 0)
              v35 = 0x8005A03C00;
            v36 = v35 & v11;
            if ((v35 & v11) != 0)
            {
              sub_19B6F97E4(4, "%s: ignoring raw error 0x%016llX", "AMFDRDecodeTrustEvaluation", v35 & v11);
              v11 ^= v36;
              v34 = a1[18];
            }
          }
          if ((v34 & 0x10) != 0 && (v11 & 0x1040000300000) != 0)
          {
            sub_19B6F97E4(4, "%s: ignoring offline signing verification error 0x%016llX", "AMFDRDecodeTrustEvaluation", v11 & 0x1040000300000);
            v11 &= 0xFFFEFBFFFFCFFFFFLL;
            v34 = a1[18];
          }
          if ((v34 & 0x40) != 0 && (v11 & 0x2C0100) != 0)
          {
            sub_19B6F97E4(4, "%s: ignoring no trustobject error 0x%016llX", "AMFDRDecodeTrustEvaluation", v11 & 0x2C0100);
            v11 &= 0xFFFFFFFFFFD3FEFFLL;
            v34 = a1[18];
          }
          if ((v34 & 0x4000) != 0 && (v11 & 0x1000000000000000) != 0)
          {
            sub_19B6F97E4(4, "%s: ignoring incomplete subcc error 0x%016llX", "AMFDRDecodeTrustEvaluation", v11 & 0x1000000000000000);
            v11 &= ~0x1000000000000000uLL;
          }
          goto LABEL_14;
        }
        sub_19B6F97E4(3, "%s: outRawData and outRawDataLength must be non NULL");
      }
      else
      {
        sub_19B6F97E4(3, "%s: ctx->inData must be non NULL and ctx->inDataLength must be non 0");
      }
    }
    else
    {
      sub_19B6F97E4(3, "%s: ctx must be non NULL");
    }
    v11 = 1;
LABEL_14:
    free((void *)v7);
    return v11;
  }
  sub_19B6F97E4(3, "%s: Failed to malloc fdrDecode", "AMFDRDecodeTrustEvaluation");
  return 0x80000000000000;
}

uint64_t sub_19B6FBAE4(uint64_t a1, unsigned int a2, _QWORD *a3, _BYTE *a4)
{
  uint64_t v4;
  _BYTE *v7;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  uint64_t v16;
  _QWORD v17[2];

  v16 = 0;
  v4 = 1;
  if (!a1)
    return v4;
  if (!a2)
    return v4;
  if (!a3)
    return v4;
  v7 = a4;
  if (!a4)
    return v4;
  v9 = (_QWORD *)*a3;
  v10 = (_QWORD *)*a3;
  if (!*a3)
  {
    v10 = malloc(0x78uLL);
    if (!v10)
      return 0x80000000000000;
  }
  v10[14] = 0;
  *((_OWORD *)v10 + 5) = 0u;
  *((_OWORD *)v10 + 6) = 0u;
  *((_OWORD *)v10 + 3) = 0u;
  *((_OWORD *)v10 + 4) = 0u;
  *((_OWORD *)v10 + 1) = 0u;
  *((_OWORD *)v10 + 2) = 0u;
  *(_OWORD *)v10 = 0u;
  v17[0] = a1;
  v17[1] = a2;
  v11 = sub_19B6F7594((uint64_t)v17, 5u, (uint64_t)&unk_19B718F30, (unint64_t)(v10 + 1), 0x50uLL, 0);
  if (v11)
  {
    sub_19B6F97E4(3, "%s: failed to parse sysconfig sequence: %d", "AMFDRDecodeIterateSysconfigBegin", v11);
    v4 = 0x400000000000000;
    goto LABEL_32;
  }
  v12 = v10[2];
  if (v12 != 4)
  {
    sub_19B6F97E4(3, "%s: magic size is invalid: %lu", "AMFDRDecodeIterateSysconfigBegin", v12);
    v4 = 0x400000000000020;
    goto LABEL_32;
  }
  for (i = 3; i != -1; --i)
    *v7++ = *(_BYTE *)(v10[1] + i);
  if (v10[4] != 4)
  {
    sub_19B6F97E4(3, "%s: version size is invalid: %lu");
    goto LABEL_25;
  }
  v14 = *(_DWORD *)v10[3];
  if (!(_BYTE)v14)
  {
    sub_19B6F97E4(3, "%s: minor version not supported: 0x%x");
    goto LABEL_25;
  }
  if ((v14 & 0xFFFF00) != 0x30000)
  {
    sub_19B6F97E4(3, "%s: sysconfig version not supported: 0x%x");
LABEL_25:
    v4 = 0x402000000000000;
    goto LABEL_32;
  }
  if (sub_19B6F73F4((uint64_t)(v10 + 5), &v16, v10 + 11))
  {
    v4 = 0x400000000000010;
    sub_19B6F97E4(3, "%s: failed to decode sysconfig payload: %d");
    goto LABEL_32;
  }
  if (v16 != 0x2000000000000011)
  {
    sub_19B6F97E4(3, "%s: invalid payload tag: 0x%llx");
LABEL_31:
    v4 = 0x400000000000040;
    goto LABEL_32;
  }
  if (!sub_19B6F73F4((uint64_t)(v10 + 7), &v16, v10 + 13))
  {
    if (v16 == 0x2000000000000011)
    {
      v4 = 0;
      *(_BYTE *)v10 = 1;
      *a3 = v10;
      return v4;
    }
    sub_19B6F97E4(3, "%s: invalid metadata tag: 0x%llx");
    goto LABEL_31;
  }
  v4 = 0x400000000000010;
  sub_19B6F97E4(3, "%s: failed to decode sysconfig metadata: %d");
LABEL_32:
  if (!v9)
    free(v10);
  return v4;
}

uint64_t sub_19B6FBD98(uint64_t a1, _BYTE *a2, _BYTE *a3, _QWORD *a4, _DWORD *a5, _BYTE *a6)
{
  uint64_t v6;
  _BYTE *v7;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t i;
  int v17;
  int v18;
  BOOL v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unint64_t v24;
  unint64_t v25[2];

  v24 = 0;
  v25[0] = 0;
  v25[1] = 0;
  v22 = 0u;
  v23 = 0u;
  v21 = 0u;
  memset(v20, 0, sizeof(v20));
  v6 = 1;
  v19 = 0;
  if (!a3)
    return v6;
  if (!a1)
    return v6;
  v7 = a2;
  if (!a2 || !a4 || !a5)
    return v6;
  if (!*(_BYTE *)a1)
  {
    sub_19B6F97E4(3, "%s: sysconfig context is not initialized");
    return 0x400000000000000;
  }
  v12 = sub_19B6F74D8((unint64_t *)(a1 + 88), &v24);
  if (v12 == 1)
    return 0x40000000000000;
  if (v12 || v24 != 0x2000000000000010)
  {
    sub_19B6F97E4(3, "%s: failed to decode payload: %d", "AMFDRDecodeIterateSysconfigPayloadNext", v12);
    return 0x400000000000040;
  }
  v13 = sub_19B6F765C(v25, 5u, (uint64_t)&unk_19B718EB8, (unint64_t)v20, 0x50uLL, 0);
  if (v13)
  {
    v6 = 0x400000000000010;
    sub_19B6F97E4(3, "%s: failed to parse payload content: %d", "AMFDRDecodeIterateSysconfigPayloadNext", v13);
    return v6;
  }
  if (*((_QWORD *)&v20[0] + 1) != 4)
  {
    sub_19B6F97E4(3, "%s: invalid key length: %lu", "AMFDRDecodeIterateSysconfigPayloadNext", *((_QWORD *)&v20[0] + 1));
    return 0x400000000000020;
  }
  v14 = *(_QWORD *)&v20[0];
  for (i = 3; i != -1; --i)
    *v7++ = *(_BYTE *)(v14 + i);
  if (sub_19B6F72CC((unsigned __int8 **)&v23, 0, &v19))
  {
    sub_19B6F97E4(3, "%s: failed to parse BOOLean: %d");
    return 0x400000000000000;
  }
  if (v19)
  {
    v6 = 0;
    *a3 = 1;
  }
  else
  {
    v17 = DWORD2(v22);
    if (*((_QWORD *)&v22 + 1))
    {
      *a4 = v22;
      *a5 = v17;
      v6 = 0;
      if (a6)
        *a6 = 1;
    }
    else
    {
      v6 = 0;
      v18 = DWORD2(v21);
      *a4 = v21;
      *a5 = v18;
    }
  }
  return v6;
}

uint64_t sub_19B6FBFC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v7;
  _OWORD __s2[3];
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 1944);
  if (!v2)
  {
    sub_19B6F97E4(3, "%s: FDR Trust Object is NULL", "_AMFDRDecodeVerifyTrustObject");
    v4 = 0x200000;
    goto LABEL_5;
  }
  v3 = sub_19B6F96E0(a1 + 1768, v2, *(_DWORD *)(a1 + 1952));
  if (!v3)
  {
    if (!*(_QWORD *)(a1 + 72))
    {
      sub_19B6F97E4(3, "%s: FDR Trust Object digest is NULL", "_AMFDRDecodeVerifyTrustObject");
      v4 = 0x40000;
      goto LABEL_5;
    }
    *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
    __s2[1] = v6;
    __s2[2] = v6;
    __s2[0] = v6;
    v7 = *(_QWORD *)(a1 + 80);
    if (v7 == 48)
    {
      if (sub_19B701678(*(char **)(a1 + 1944), *(_QWORD *)(a1 + 1952), (uint64_t)__s2))
      {
LABEL_11:
        sub_19B6F97E4(3, "%s: AMSupportDigestSha256 failed");
LABEL_16:
        v4 = 0x100000;
        goto LABEL_5;
      }
    }
    else
    {
      if (v7 != 32)
      {
        sub_19B6F97E4(3, "%s: FDR Trust Object digest size not supported. digest is of size %zu", "_AMFDRDecodeVerifyTrustObject", v7);
        v4 = 0x80000;
        goto LABEL_5;
      }
      if (sub_19B701614(*(char **)(a1 + 1944), *(_QWORD *)(a1 + 1952), (uint64_t)__s2))
        goto LABEL_11;
    }
    if (!memcmp(*(const void **)(a1 + 72), __s2, *(_QWORD *)(a1 + 80)))
      return 0;
    sub_19B6F97E4(3, "%s: FDR Trust Object digest mismatch.");
    goto LABEL_16;
  }
  v4 = v3;
  sub_19B6F97E4(3, "%s: malformed FDR Trust Object Format", "_AMFDRDecodeVerifyTrustObject");
LABEL_5:
  *(_QWORD *)a1 |= v4;
  return v4;
}

uint64_t sub_19B6FC16C(int a1, uint64_t *a2, int a3, _WORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  int v9[2];
  int v10;

  v10 = 0;
  if (!*(_QWORD *)a4)
  {
    sub_19B6F97E4(3, "%s: fdrDecode is NULL", "_AMFDRDecodeFilterDataInstanceCallback");
    return 6;
  }
  *(_QWORD *)v9 = 0xAAAAAAAAAAAAAAAALL;
  if (!a2)
  {
    sub_19B6F97E4(3, "%s: property is NULL", "_AMFDRDecodeFilterDataInstanceCallback");
    **(_QWORD **)a4 |= 1uLL;
    return 6;
  }
  if (a1 != 1768846196)
    return 0;
  v6 = sub_19B6FFD14(a2, 1768846196, v9, &v10);
  if ((_DWORD)v6)
  {
    v7 = v6;
    sub_19B6F97E4(3, "%s: Img4DecodeGetPropertyData(kFDRTag_inst) failed.", "_AMFDRDecodeFilterDataInstanceCallback");
    **(_QWORD **)a4 |= 0x4000uLL;
    return v7;
  }
  if (a3 != 1)
  {
    sub_19B6F97E4(3, "%s: unexpected property type != kImg4ObjectProperty", "_AMFDRDecodeFilterDataInstanceCallback");
    return 0;
  }
  if ((sub_19B6FC300(*(_DWORD **)v9, v10, *(void **)(*(_QWORD *)a4 + 104), *(_QWORD *)(*(_QWORD *)a4 + 112), *(const void **)(*(_QWORD *)a4 + 184), *(_QWORD *)(*(_QWORD *)a4 + 192), 1, *(_QWORD **)a4) & 1) != 0)
  {
    sub_19B6F97E4(6, "%s: kFDRTag_inst property == fdrDecode->uniqueID, found corresponding Data Instance.", "_AMFDRDecodeFilterDataInstanceCallback");
    v7 = 0;
    a4[4] = 1;
  }
  else
  {
    sub_19B6F97E4(3, "%s: kFDRTag_inst property != fdrDecode->uniqueID", "_AMFDRDecodeFilterDataInstanceCallback");
    v7 = 0;
    a4[4] = 256;
  }
  return v7;
}

uint64_t sub_19B6FC300(_DWORD *a1, uint64_t a2, void *__s2, size_t __n, const void *a5, size_t a6, int a7, _QWORD *a8)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  size_t v14;
  _DWORD *v15;
  uint64_t result;
  uint64_t v17;
  size_t v18;

  if (a8)
  {
    v11 = a8[252];
    if ((v11 & 0x100) != 0 && a8[19] && a8[20] && (!a7 || (v11 & 0x80) != 0))
    {
      a6 = 0;
      a5 = 0;
      __n = a8[20];
      __s2 = (void *)a8[19];
    }
  }
  if (a2 < 5 || *a1 != 762014067)
  {
    if (__n != a2)
    {
      v17 = a2;
      v18 = __n;
      v12 = "%s: kFDRTag_inst propertyLength (%d) != instLength (%zu)";
      goto LABEL_14;
    }
    if (memcmp(a1, __s2, __n))
    {
      v12 = "%s: kFDRTag_inst propertyValue != instValue";
LABEL_14:
      v13 = 4;
LABEL_20:
      sub_19B6F97E4(v13, v12, "_AMFDRDecodeInstPropertyMatching", v17, v18);
      return 0;
    }
    return 1;
  }
  v14 = (a2 - 4);
  if (__n >= v14)
  {
    v17 = (a2 - 4);
    v18 = __n;
    v12 = "%s: kFDRTag_inst propertyLength (sik) (%d) <= instLength (%zu)";
    goto LABEL_19;
  }
  v15 = a1 + 1;
  if (memcmp(a1 + 1, __s2, __n))
  {
    v12 = "%s: kFDRTag_inst propertyValue (sik) != instValue";
    goto LABEL_19;
  }
  if (*((_BYTE *)v15 + __n) != 45)
  {
    v12 = "%s: kFDRTag_inst propertyValue missing expected -";
    goto LABEL_19;
  }
  result = 1;
  if (a6 && a5)
  {
    if (a6 == (_DWORD)v14 + ~(_DWORD)__n)
    {
      if (!memcmp((char *)v15 + __n + 1, a5, a6))
        return 1;
      v12 = "%s: kFDRTag_inst propertyValue (sik) != sikValue";
    }
    else
    {
      v17 = (v14 + ~(_DWORD)__n);
      v18 = a6;
      v12 = "%s: kFDRTag_inst propertyLength (sik) (%d) != sikLength (%zu)";
    }
LABEL_19:
    v13 = 3;
    goto LABEL_20;
  }
  return result;
}

uint64_t sub_19B6FC4D0(uint64_t a1, uint64_t a2, int a3, _QWORD *a4)
{
  __int128 v6;
  uint64_t result;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  unint64_t v11;
  unint64_t v12[2];
  unint64_t v13[2];
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a1;
  v15[1] = a2;
  *(_QWORD *)&v6 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v6 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v9 = v6;
  v10 = v6;
  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v12[0] = 0;
  v12[1] = 0;
  v11 = 0;
  if (sub_19B6F73F4((uint64_t)v15, &v14, v13) || v14 != 0x2000000000000011)
  {
    sub_19B6F97E4(3, "%s: failed to parse property list");
    return 2;
  }
  if (sub_19B6F74D8(v13, &v11))
  {
LABEL_8:
    sub_19B6F97E4(3, "%s: cannot find tag in property list");
    return 2;
  }
  while (1)
  {
    v9 = 0u;
    v10 = 0u;
    if (sub_19B6F765C(v12, 2u, (uint64_t)&unk_19B718E10, (unint64_t)&v9, 0x20uLL, 0))
    {
      sub_19B6F97E4(3, "%s: failed to decode subCC digests sequence");
      return 2;
    }
    if (*((_QWORD *)&v9 + 1) == 4 && sub_19B6F7998((unsigned int *)v9) == a3)
      break;
    if (sub_19B6F74D8(v13, &v11))
      goto LABEL_8;
  }
  if (a4)
  {
    result = 0;
    v8 = *((_QWORD *)&v10 + 1);
    *a4 = v10;
    a4[1] = v8;
  }
  else
  {
    sub_19B6F97E4(3, "%s: outValue is NULL", "_AMFDRDecodeSearchEntryFromPropertyList");
    return 1;
  }
  return result;
}

uint64_t sub_19B6FC640(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _OWORD *v5;
  double v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  double v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t (**v20)();
  char *v21;
  uint64_t (**v22)();
  unsigned __int16 *v23;
  int v24;
  int v25;
  uint64_t (**v27)();
  uint64_t v28;
  int v29;
  unsigned int v30;

  v30 = 0;
  v2 = *(_QWORD *)(a1 + 2016);
  if ((~*(_DWORD *)(a1 + 2016) & 0x1080) == 0)
  {
    sub_19B6F97E4(3, "%s: cannot set kAMFDRDecodeOptionManifestOnly and kAMFDRDecodeOptionSubCCOnly at the same time");
    goto LABEL_68;
  }
  if ((v2 & 0x80) != 0)
  {
    if (!sub_19B700220(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), a1 + 400))
      goto LABEL_5;
    goto LABEL_7;
  }
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = (_OWORD *)(a1 + 400);
  if ((v2 & 0x1000) == 0)
  {
    v6 = sub_19B700138(v3, v4, (uint64_t)v5);
    if (!v7)
    {
LABEL_5:
      v2 = *(_QWORD *)(a1 + 2016);
      goto LABEL_9;
    }
LABEL_7:
    sub_19B6F97E4(3, "%s: FDR failed to decode Data img4", v6);
LABEL_18:
    v9 = *(_QWORD *)a1;
    v10 = 83901440;
LABEL_19:
    result = v9 | v10;
    *(_QWORD *)a1 = v9 | v10;
    v12 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 1912) = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 1920) = v12;
    return result;
  }
  *(_QWORD *)(a1 + 848) = 0;
  v6 = 0.0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_OWORD *)(a1 + 688) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_OWORD *)(a1 + 672) = 0u;
  *(_OWORD *)(a1 + 624) = 0u;
  *(_OWORD *)(a1 + 640) = 0u;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *v5 = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 408) = v3;
  *(_QWORD *)(a1 + 416) = v4;
  *(_QWORD *)(a1 + 488) = "IM4P";
  *(_QWORD *)(a1 + 496) = 4;
  *(_QWORD *)(a1 + 536) = v3;
  *(_QWORD *)(a1 + 544) = v4;
LABEL_9:
  v8 = *(_QWORD *)(a1 + 280);
  if ((v2 & 0x1000) != 0)
  {
    if (v8)
      goto LABEL_16;
    sub_19B6F97E4(3, "%s: trust evaluation on subCC requires a reStitchManifest");
LABEL_68:
    result = *(_QWORD *)a1 | 1;
    goto LABEL_36;
  }
  if (!v8)
  {
    if ((v2 & 0x1000) == 0)
      goto LABEL_12;
LABEL_21:
    v30 = sub_19B6F7998(*(unsigned int **)(a1 + 88));
    goto LABEL_22;
  }
LABEL_16:
  *(_OWORD *)(a1 + 424) = *(_OWORD *)(a1 + 280);
  if (sub_19B6FF278((_QWORD *)(a1 + 280), a1 + 632))
  {
    sub_19B6F97E4(3, "%s: FDR failed to decode manifestOverride", v6);
    goto LABEL_18;
  }
  v2 = *(_QWORD *)(a1 + 2016);
  if ((v2 & 0x1000) != 0)
    goto LABEL_21;
LABEL_12:
  if ((v2 & 0x80) == 0)
  {
    if (sub_19B6FF898(a1 + 400, &v30))
    {
      sub_19B6F97E4(3, "%s: FDR failed to get payload type", v6);
      goto LABEL_18;
    }
    if (*(_QWORD *)(a1 + 528) != 3)
    {
      sub_19B6F97E4(3, "%s: Payload version is wrong size. got %zu expected %d");
      goto LABEL_50;
    }
    v23 = *(unsigned __int16 **)(a1 + 520);
    v24 = *v23;
    v25 = *((unsigned __int8 *)v23 + 2);
    if (v24 != 11825 || v25 != 48)
    {
      sub_19B6F97E4(3, "%s: Payload version mismatch");
LABEL_50:
      v9 = *(_QWORD *)a1;
      v10 = 0x8005001C00;
      goto LABEL_19;
    }
  }
LABEL_22:
  v13 = *(unsigned int **)(a1 + 88);
  if (!v13)
    goto LABEL_25;
  if ((unint64_t)(*(_QWORD *)(a1 + 96) - 3) >= 2)
  {
    sub_19B6F97E4(3, "%s: Invalid data class length", v6);
LABEL_35:
    result = *(_QWORD *)a1 | 0x100000004000C00;
LABEL_36:
    *(_QWORD *)a1 = result;
    return result;
  }
  v14 = sub_19B6F7998(v13);
  if (v14 != v30)
  {
    sub_19B6F97E4(3, "%s: Payload type mismatch", v15);
    goto LABEL_35;
  }
LABEL_25:
  v16 = *(_QWORD *)a1;
  if ((*(_BYTE *)(a1 + 2016) & 0x80) != 0)
  {
    sub_19B700654(a1 + 400, (uint64_t)off_1E3BD0350, *(_QWORD *)(a1 + 2008), a1);
    if (!v18)
      goto LABEL_59;
  }
  else
  {
    sub_19B7003A0(v30, a1 + 400, (uint64_t)off_1E3BD0350, *(_QWORD *)(a1 + 2008), a1);
    if (!v17)
      goto LABEL_59;
  }
  v19 = *(_QWORD *)a1;
  if ((*(_QWORD *)a1 & 0x1000000000000) == 0)
  {
LABEL_54:
    sub_19B6F97E4(3, "%s: FDR data trust evaluation failed.", "_AMFDRDecodeVerifyData");
    if (!*(_QWORD *)a1)
      *(_QWORD *)a1 = 0x100000000000;
    goto LABEL_61;
  }
  v20 = *(uint64_t (***)())(a1 + 2008);
  if (v20 == off_1E3BD03A0)
  {
    v21 = "%s: Evaluation returned code=0x%016llX, re-evaluate with FDR 2.0 format";
    v22 = off_1E3BD03D8;
    goto LABEL_44;
  }
  if (v20 == off_1E3BD03D8)
  {
    v21 = "%s: Evaluation returned code=0x%016llX, re-evaluate with FDR 1.0 format";
    v22 = off_1E3BD03A0;
LABEL_44:
    *(_QWORD *)(a1 + 2008) = v22;
    sub_19B6F97E4(4, v21, "_AMFDRDecodeVerifyData", v19);
  }
  v27 = *(uint64_t (***)())(a1 + 2008);
  if (v27 != off_1E3BD03A0 && v27 != off_1E3BD03D8)
    goto LABEL_54;
  v28 = *(_QWORD *)a1;
  *(_QWORD *)a1 = v16;
  *(_BYTE *)(a1 + 400) = 0;
  if ((*(_BYTE *)(a1 + 2016) & 0x80) != 0)
    sub_19B700654(a1 + 400, (uint64_t)off_1E3BD0350, (uint64_t)v27, a1);
  else
    sub_19B7003A0(v30, a1 + 400, (uint64_t)off_1E3BD0350, (uint64_t)v27, a1);
  if (v29)
  {
    sub_19B6F97E4(4, "%s: Re-evaluation returned code=0x%016llX", "_AMFDRDecodeVerifyData", *(_QWORD *)a1);
    *(_QWORD *)a1 = v28;
    goto LABEL_54;
  }
  if ((*(_BYTE *)(a1 + 2016) & 0x20) != 0)
  {
    sub_19B6F97E4(3, "%s: Re-evaluation succeeded but decode options require version2", "_AMFDRDecodeVerifyData");
    *(_QWORD *)a1 |= 0x2000000000000uLL;
  }
  else
  {
    sub_19B6F97E4(4, "%s: Re-evaluation succeeded", "_AMFDRDecodeVerifyData");
  }
LABEL_59:
  if (*(_BYTE *)(a1 + 401))
    *(_BYTE *)(a1 + 2032) = 1;
LABEL_61:
  if ((*(_BYTE *)(a1 + 2017) & 0x10) != 0)
  {
    result = *(_QWORD *)a1;
    if (!*(_BYTE *)(a1 + 376))
    {
      result |= 0x1000000000000000uLL;
      *(_QWORD *)a1 = result;
    }
  }
  else
  {
    result = *(_QWORD *)a1;
  }
  *(_QWORD *)(a1 + 1912) = *(_QWORD *)(a1 + 536);
  *(_QWORD *)(a1 + 1920) = *(_QWORD *)(a1 + 544);
  return result;
}

uint64_t sub_19B6FCB08(uint64_t a1)
{
  __int128 v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  int v6;
  double v7;
  double v8;
  double v9;
  int v10;
  double v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  const void *v16;
  size_t v17;
  uint64_t v18;
  void *__s1[2];
  __int128 v20;
  size_t v21[2];
  size_t __n[2];
  unint64_t v23[3];
  int v24;
  unint64_t v25;
  unsigned int v26;
  _QWORD v27[2];
  unint64_t v28;
  unint64_t v29[2];
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[28];
  unint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v27[0] = 0xAAAAAAAAAAAAAAAALL;
  v27[1] = 0xAAAAAAAAAAAAAAAALL;
  v34 = 0xAAAAAAAAAAAAAAAALL;
  *(_QWORD *)&v2 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v2 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v33[26] = v2;
  v33[27] = v2;
  v33[24] = v2;
  v33[25] = v2;
  v33[22] = v2;
  v33[23] = v2;
  v33[20] = v2;
  v33[21] = v2;
  v33[18] = v2;
  v33[19] = v2;
  v33[16] = v2;
  v33[17] = v2;
  v33[14] = v2;
  v33[15] = v2;
  v33[12] = v2;
  v33[13] = v2;
  v33[10] = v2;
  v33[11] = v2;
  v33[8] = v2;
  v33[9] = v2;
  v33[6] = v2;
  v33[7] = v2;
  v33[4] = v2;
  v33[5] = v2;
  v33[2] = v2;
  v33[3] = v2;
  v33[0] = v2;
  v33[1] = v2;
  v26 = 0;
  v25 = 0xAAAAAAAAAAAAAAAALL;
  v24 = 0;
  memset(v23, 170, sizeof(v23));
  *(_OWORD *)v21 = v2;
  *(_OWORD *)__n = v2;
  *(_OWORD *)__s1 = v2;
  v20 = v2;
  v31 = 0;
  v32 = 0;
  v29[1] = 0;
  v30 = 0;
  v28 = 0;
  v29[0] = 0;
  if (sub_19B6F6E18(a1 + 24, &v30))
  {
    sub_19B6F97E4(3, "%s: failed to decode FDR Multi Combined Format", "_AMFDRDecodeMultiCombined");
    *(_QWORD *)a1 |= 0x80uLL;
    return 128;
  }
  if (v30 != 0x2000000000000010)
  {
    sub_19B6F97E4(3, "%s: FDR Multi Combined Format unexpected tag: %llu", "_AMFDRDecodeMultiCombined", v30);
    *(_QWORD *)a1 |= 0x10000uLL;
    return 0x10000;
  }
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  if (v4 + v5 < (unint64_t)(v31 + v32))
  {
    sub_19B6F97E4(3, "%s: item is bigger on the inside", "_AMFDRDecodeMultiCombined");
    *(_QWORD *)a1 |= 4uLL;
    return 4;
  }
  if (v4 + v5 > (unint64_t)(v31 + v32))
  {
    sub_19B6F97E4(3, "%s: Buffer contains %lu unused bytes", "_AMFDRDecodeMultiCombined", v5 - v32);
    *(_QWORD *)a1 |= 8uLL;
    return 8;
  }
  v7 = sub_19B700138(v4, v5, (uint64_t)v33);
  if (v6)
  {
    sub_19B6F97E4(3, "%s: FDR failed to decode multi combined Data img4", v7);
    return 0x2000;
  }
  if (sub_19B6FF90C((uint64_t)v33, &v25, &v26))
  {
    sub_19B6F97E4(3, "%s: FDR failed to get manifest from multi combined data", v8);
    return 0x2000;
  }
  if (sub_19B6FF898((uint64_t)v33, &v24))
  {
    sub_19B6F97E4(3, "%s: FDR failed to get payload type from multi combined data", v9);
    return 0x2000;
  }
  v10 = v24;
  if (v10 != sub_19B6F7998((unsigned int *)"mcmb"))
  {
    sub_19B6F97E4(3, "%s: multi combined payload type is not mcmb");
    return 0x20000;
  }
  if (sub_19B6FF82C((uint64_t)v33, (uint64_t)v27))
  {
    sub_19B6F97E4(3, "%s: FDR failed to get payload from multi combined data", v11);
    return 0x2000;
  }
  if (sub_19B6F73F4((uint64_t)v27, &v23[2], v23) || v23[2] != 0x2000000000000011)
  {
    sub_19B6F97E4(3, "%s: payload sequence malformed for multi combined data");
    return 0x20000;
  }
  if (*(_QWORD *)(a1 + 104) && *(_QWORD *)(a1 + 112))
  {
    v12 = 0;
  }
  else
  {
    if ((*(_BYTE *)(a1 + 2017) & 0x20) == 0)
    {
      sub_19B6F97E4(3, "%s: no data instance is specified when looking for data in multi combined format", "_AMFDRDecodeMultiCombined");
      return 1;
    }
    v12 = 1;
  }
  if (sub_19B6F74D8(v23, &v28))
    goto LABEL_57;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  while (1)
  {
    while (1)
    {
      *(_OWORD *)v21 = 0u;
      *(_OWORD *)__n = 0u;
      *(_OWORD *)__s1 = 0u;
      v20 = 0u;
      if (sub_19B6F765C(v29, 4u, (uint64_t)&unk_19B718FA8, (unint64_t)__s1, 0x40uLL, 0))
      {
        sub_19B6F97E4(3, "%s: MultiCombinedItem malformed for multi combined data");
        return 0x20000;
      }
      if (__s1[1] != *(void **)(a1 + 96)
        || memcmp(__s1[0], *(const void **)(a1 + 88), (size_t)__s1[1])
        || (v12 & 1) == 0
        && (v21[1] != *(_QWORD *)(a1 + 112) || memcmp((const void *)v21[0], *(const void **)(a1 + 104), v21[1]))
        || __n[1] != *(_QWORD *)(a1 + 128))
      {
        goto LABEL_34;
      }
      v16 = *(const void **)(a1 + 120);
      if (__n[0])
        break;
      if (!v16)
        goto LABEL_46;
LABEL_34:
      if (sub_19B6F74D8(v23, &v28))
      {
        if ((v13 & 1) == 0)
          goto LABEL_57;
        goto LABEL_51;
      }
    }
    if (!v16 || memcmp((const void *)__n[0], v16, __n[1]))
      goto LABEL_34;
LABEL_46:
    if ((v12 & 1) == 0)
    {
      sub_19B6F97E4(5, "%s: found data in multi combined format", "_AMFDRDecodeMultiCombined");
      v14 = *((_QWORD *)&v20 + 1);
      v15 = v20;
LABEL_51:
      result = 0;
      v18 = v26;
      *(_QWORD *)(a1 + 280) = v25;
      *(_QWORD *)(a1 + 288) = v18;
      *(_QWORD *)(a1 + 24) = v15;
      *(_QWORD *)(a1 + 32) = v14;
      return result;
    }
    if ((v13 & 1) != 0)
      break;
    v17 = v21[1];
    *(_QWORD *)(a1 + 104) = v21[0];
    *(_QWORD *)(a1 + 112) = v17;
    sub_19B6F97E4(5, "%s: found data in multi combined format", "_AMFDRDecodeMultiCombined");
    v14 = *((_QWORD *)&v20 + 1);
    v15 = v20;
    v13 = 1;
    if (sub_19B6F74D8(v23, &v28))
      goto LABEL_51;
  }
  sub_19B6F97E4(3, "%s: found multiple entries that match, uniqueID is required in this case", "_AMFDRDecodeMultiCombined");
  *(_QWORD *)a1 |= 0x4000uLL;
LABEL_57:
  sub_19B6F97E4(3, "%s: cannot find data in multi combined format", "_AMFDRDecodeMultiCombined");
  return 512;
}

uint64_t sub_19B6FD010(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, char *a5, unsigned int a6, uint64_t a7, unsigned int a8, uint64_t a9, char a10, _QWORD *a11)
{
  uint64_t result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unint64_t v28;
  unint64_t v29;
  __int128 v30;
  _QWORD v31[2];
  _BYTE v32[32];
  __int128 v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v31[0] = a7;
  v31[1] = a8;
  if (sub_19B6F794C((uint64_t)v31, (uint64_t)&off_1E3BD1500))
  {
    memset(v32, 170, 20);
    if (sub_19B7015DC(a5, a6, (uint64_t)v32))
      return 0xFFFFFFFFLL;
    result = sub_19B7016B0(a1, a2, a3, a4, (uint64_t)v32, 20);
    if (!a11)
      goto LABEL_36;
LABEL_33:
    if ((_DWORD)result != 2)
      goto LABEL_36;
    *a11 |= 0x80000000000000uLL;
    return 0xFFFFFFFFLL;
  }
  if (sub_19B6F794C((uint64_t)v31, (uint64_t)&off_1E3BD1510))
  {
    *(_QWORD *)&v18 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v18 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)v32 = v18;
    *(_OWORD *)&v32[16] = v18;
    if (sub_19B701614(a5, a6, (uint64_t)v32))
      return 0xFFFFFFFFLL;
    result = sub_19B7018F8(a1, a2, a3, a4, (uint64_t)v32, 32);
    if (a11)
      goto LABEL_33;
    goto LABEL_36;
  }
  if (!sub_19B6F794C((uint64_t)v31, (uint64_t)&off_1E3BD1520))
  {
    if (sub_19B6F794C((uint64_t)v31, (uint64_t)&off_1E3BD1540))
    {
      *(_QWORD *)&v20 = 0xAAAAAAAAAAAAAAAALL;
      *((_QWORD *)&v20 + 1) = 0xAAAAAAAAAAAAAAAALL;
      *(_OWORD *)v32 = v20;
      *(_OWORD *)&v32[16] = v20;
      v29 = 0;
      v30 = 0uLL;
      if (!a9)
      {
        sub_19B6F97E4(3, "%s: publicKeyParam is NULL!!");
        return 0xFFFFFFFFLL;
      }
      if (!a10)
      {
        if (sub_19B6F6E18(a9, &v29))
          return 0xFFFFFFFFLL;
        goto LABEL_26;
      }
      if (*(_QWORD *)(a9 + 8))
      {
        v30 = *(_OWORD *)a9;
LABEL_26:
        if (sub_19B701614(a5, a6, (uint64_t)v32))
          return 0xFFFFFFFFLL;
        v22 = a2;
        v24 = *((_QWORD *)&v30 + 1);
        v23 = v30;
        v25 = a4;
        v26 = (unsigned __int8 *)a1;
        v27 = (unsigned __int8 *)a3;
        v28 = 32;
        goto LABEL_32;
      }
LABEL_38:
      sub_19B6F97E4(3, "%s: missing public key algorithm parameter OID", "_AMFDRDecodeVerifySignatureDataWithOid");
      return 6;
    }
    if (!sub_19B6F794C((uint64_t)v31, (uint64_t)&off_1E3BD1550))
      return 4;
    *(_QWORD *)&v21 = 0xAAAAAAAAAAAAAAAALL;
    *((_QWORD *)&v21 + 1) = 0xAAAAAAAAAAAAAAAALL;
    *(_OWORD *)&v32[16] = v21;
    v33 = v21;
    *(_OWORD *)v32 = v21;
    v29 = 0;
    v30 = 0uLL;
    if (!a9)
    {
      sub_19B6F97E4(3, "%s: publicKeyParam is NULL");
      return 0xFFFFFFFFLL;
    }
    if (a10)
    {
      if (!*(_QWORD *)(a9 + 8))
        goto LABEL_38;
      v30 = *(_OWORD *)a9;
    }
    else if (sub_19B6F6E18(a9, &v29))
    {
      return 0xFFFFFFFFLL;
    }
    if (sub_19B701678(a5, a6, (uint64_t)v32))
      return 0xFFFFFFFFLL;
    v22 = a2;
    v24 = *((_QWORD *)&v30 + 1);
    v23 = v30;
    v25 = a4;
    v26 = (unsigned __int8 *)a1;
    v27 = (unsigned __int8 *)a3;
    v28 = 48;
LABEL_32:
    result = sub_19B6FD348(v26, v22, v23, v24, v27, v25, v32, v28);
    if (!a11)
      goto LABEL_36;
    goto LABEL_33;
  }
  *(_QWORD *)&v19 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v19 + 1) = 0xAAAAAAAAAAAAAAAALL;
  *(_OWORD *)&v32[16] = v19;
  v33 = v19;
  *(_OWORD *)v32 = v19;
  if (sub_19B701678(a5, a6, (uint64_t)v32))
    return 0xFFFFFFFFLL;
  result = sub_19B701998(a1, a2, a3, a4, (uint64_t)v32, 48);
  if (a11)
    goto LABEL_33;
LABEL_36:
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_19B6FD348(unsigned __int8 *a1, size_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, unint64_t a8)
{
  uint64_t result;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  uint64_t v19;

  result = 1;
  if (a1 && a2)
  {
    if ((a2 & 1) != 0)
    {
      return sub_19B701470(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    else
    {
      v17 = (unsigned __int8 *)malloc(a2 + 1);
      if (v17)
      {
        v18 = v17;
        *v17 = 4;
        memcpy(v17 + 1, a1, a2);
        v19 = sub_19B701470(v18, a2 + 1, a3, a4, a5, a6, a7, a8);
        free(v18);
        return v19;
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

uint64_t sub_19B6FD450(unint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t *v4;
  uint64_t v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  unint64_t v17;
  __int128 v18;
  unint64_t v19[2];
  unint64_t v20[2];

  v20[0] = a1;
  v20[1] = a2;
  *(_QWORD *)&v14 = 0xAAAAAAAAAAAAAAAALL;
  *((_QWORD *)&v14 + 1) = 0xAAAAAAAAAAAAAAAALL;
  v18 = 0uLL;
  v17 = 0;
  v19[0] = 0;
  v19[1] = 0;
  v15 = 0u;
  v16 = 0u;
  if (a3)
  {
    a3[14] = 0uLL;
    a3[15] = 0uLL;
    a3[12] = 0uLL;
    a3[13] = 0uLL;
    a3[10] = 0uLL;
    a3[11] = 0uLL;
    a3[8] = 0uLL;
    a3[9] = 0uLL;
    a3[6] = 0uLL;
    a3[7] = 0uLL;
    a3[4] = 0uLL;
    a3[5] = 0uLL;
    a3[2] = 0uLL;
    a3[3] = 0uLL;
    *a3 = 0uLL;
    a3[1] = 0uLL;
    v4 = sub_19B6F74AC(v20, v19);
    if ((_DWORD)v4)
    {
      v12 = (uint64_t)v4;
      sub_19B6F97E4(3, "%s: failed to init sequence");
    }
    else
    {
      v5 = 0;
      v6 = 255;
      while (1)
      {
        v7 = sub_19B6F74D8(v19, &v17);
        if ((_DWORD)v7)
          break;
        v14 = v18;
        if (v17 == 0x2000000000000011)
        {
          v15 = 0u;
          v16 = 0u;
          v8 = sub_19B6F7594((uint64_t)&v14, 2u, (uint64_t)&unk_19B718B38, (unint64_t)&v15, 0x20uLL, 0);
          if ((_DWORD)v8)
          {
            v12 = v8;
            sub_19B6F97E4(3, "%s: malformed AttributeTypeAndValue format: %d");
            return v12;
          }
          if ((_QWORD)v16)
          {
            v14 = v16;
            v18 = 0uLL;
            v17 = 0;
            v9 = sub_19B6F6E18((uint64_t)&v14, &v17);
            if ((_DWORD)v9)
            {
              v12 = v9;
              sub_19B6F97E4(3, "%s: malformed attribute: %d");
              return v12;
            }
            if (v17 == 19 || v17 == 12)
            {
              if (v5)
              {
                if (!v6)
                  return 0;
                *((_BYTE *)a3 + v5++) = 32;
                --v6;
              }
              v10 = (char *)a3 + v5;
              v11 = *((_QWORD *)&v18 + 1);
              if (v6 < *((_QWORD *)&v18 + 1))
              {
                memcpy(v10, (const void *)v18, v6);
                return 0;
              }
              v6 -= *((_QWORD *)&v18 + 1);
              memcpy(v10, (const void *)v18, *((size_t *)&v18 + 1));
              v5 += v11;
            }
          }
        }
        else
        {
          sub_19B6F97E4(3, "%s: Attribute must be set container. Found unexpected tag 0x%llu, skipping", "_AMFDRDecodeSequenceString", v17);
        }
      }
      v12 = v7;
      if ((_DWORD)v7 == 1)
        return 0;
      sub_19B6F97E4(3, "%s: failed to decode all sequences: %d");
    }
  }
  else
  {
    v12 = 3;
    sub_19B6F97E4(3, "%s: buffer is NULL");
  }
  return v12;
}

uint64_t sub_19B6FD698(char *a1, size_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 == 48)
    return sub_19B701678(a1, a2, a3);
  if (a4 == 32)
    return sub_19B701614(a1, a2, a3);
  return 1;
}

uint64_t sub_19B6FD6B8(uint64_t result)
{
  qword_1EE3FD7E8 = result;
  return result;
}

uint64_t sub_19B6FD6C4()
{
  return qword_1EE3FD7E8;
}

uint64_t sub_19B6FD6D0(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  _QWORD *v7;
  void (*v8)(uint64_t, const char *, ...);
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if (!a3)
  {
    v8 = (void (*)(uint64_t, const char *, ...))sub_19B6FD6C4();
    if (v8)
      v8(2, "%s the refcon arg was NULL", "DERReturn _DERDecodeSysConfig3ParseAndPopulateMetadataSequence(DERDecodedInfo *__single, _Bool *__single, void *__single)");
    return 6;
  }
  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  if ((qword_1EE3FD688 & 0xFFFC) == 0)
  {
    v4 = sub_19B6F765C((unint64_t *)(result + 8), (unsigned __int16)qword_1EE3FD688, (uint64_t)&unk_1EE3FD640, (unint64_t)&v9, 0x30uLL, 0x30uLL);
    if (!(_DWORD)v4)
    {
      v5 = sub_19B6FD7E8((uint64_t)&v9);
      v6 = sub_19B6FD7E8((uint64_t)&v11);
      v7 = sub_19B6FE35C(v5, v10, DWORD2(v10), v6);
      sub_19B6FED0C(a3, (uint64_t)v7);
      sub_19B6FE4F0(v7);
      if (v5)
        free(v5);
      if (v6)
        free(v6);
    }
    return v4;
  }
  __break(0x5519u);
  return result;
}

char *sub_19B6FD7E8(uint64_t a1)
{
  const void *v1;
  size_t v2;
  char *v3;
  unint64_t v4;
  BOOL v5;
  char *v6;
  char *v7;
  BOOL v8;
  BOOL v9;

  if (!a1)
    return 0;
  v1 = *(const void **)a1;
  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(_QWORD *)(a1 + 8);
  v3 = (char *)malloc(v2 + 1);
  if (v3)
    v4 = (unint64_t)&v3[v2 + 1];
  else
    v4 = 0;
  v5 = v4 < (unint64_t)v3 || v2 > v4 - (unint64_t)v3;
  if (v5
    || ((v6 = v3, memcpy(v3, v1, v2), v7 = &v6[v2], &v6[v2] >= v6) ? (v8 = (unint64_t)v7 >= v4) : (v8 = 1),
        v8 || ((*v7 = 0, v7 + 1 >= v7) ? (v9 = (unint64_t)(v7 + 1) > v4) : (v9 = 1), v9)))
  {
    __break(0x5519u);
    return 0;
  }
  return v6;
}

uint64_t sub_19B6FD87C(uint64_t result, unsigned int a2)
{
  int v2;
  int v3;
  _OWORD *v4;
  _QWORD *v5;
  void (*v6)(uint64_t, const char *);
  void (*v7)(uint64_t, const char *);
  void (*v8)(uint64_t, const char *);
  void (*v9)(uint64_t, const char *);
  void (*v10)(uint64_t, const char *);
  void (*v11)(uint64_t, const char *);
  void (*v12)(uint64_t, const char *);
  void (*v13)(uint64_t, const char *);
  int v14;
  int v15;
  void (*v16)(uint64_t, const char *, ...);
  void (*v17)(uint64_t, const char *);
  int v18;
  int *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t v32[3];

  v25[0] = result;
  v25[1] = a2;
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  if (((unsigned __int16)qword_1EE3FD758 & 0xFFFEu) < 6uLL)
  {
    if (sub_19B6F7594((uint64_t)v25, (unsigned __int16)qword_1EE3FD758, (uint64_t)&unk_1EE3FD6E0, (unint64_t)&v20, 0x50uLL, 0x50uLL))return 0;
    v2 = 0;
    if (*((_QWORD *)&v20 + 1) == 4 && (_QWORD)v20)
      v2 = *(_DWORD *)v20;
    v3 = 0;
    if (*((_QWORD *)&v21 + 1) == 4 && (_QWORD)v21)
      v3 = *(_DWORD *)v21;
    if ((sub_19B6FDE20(v2) & 1) == 0)
    {
      v7 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v7)
        v7(2, "Sysconfig magic 0x%X is not valid");
      return 0;
    }
    v4 = sub_19B6FE7AC(v2, v3);
    if (!v4)
    {
      v8 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v8)
        v8(2, "Unable to allocate sysconfig3vX object. Likely due to an unsupported magic: 0x%X or version: 0x%X");
      return 0;
    }
    v5 = v4;
    v29 = 0uLL;
    *(_QWORD *)&v30 = 0;
    if (sub_19B6F6E18((uint64_t)&v22, (unint64_t *)&v29))
    {
      v6 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v6)
        v6(2, "Unable to decode payload with error %d");
LABEL_24:
      sub_19B6FE9A4(v5);
      return 0;
    }
    if ((_QWORD)v29 != 0x2000000000000011)
    {
      v10 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v10)
        v10(2, "Tag was not the expected Payload tag %llX");
      goto LABEL_24;
    }
    if (sub_19B6FDC24((uint64_t)&v22, (uint64_t (*)(unint64_t *, char *, uint64_t))sub_19B6FDCE8, (uint64_t)v5))goto LABEL_20;
    v29 = 0uLL;
    *(_QWORD *)&v30 = 0;
    if (sub_19B6F6E18((uint64_t)&v23, (unint64_t *)&v29))
    {
      v11 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v11)
        v11(2, "Unable to decode metadata with error %d");
      goto LABEL_24;
    }
    if ((_QWORD)v29 != 0x2000000000000011)
    {
      v13 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v13)
        v13(2, "Tag was not the expected metadata tag %llX");
      goto LABEL_24;
    }
    if (sub_19B6FDC24((uint64_t)&v23, (uint64_t (*)(unint64_t *, char *, uint64_t))sub_19B6FD6D0, (uint64_t)v5))
    {
LABEL_20:
      v9 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v9)
        v9(2, "Decode sequence error: %d");
      goto LABEL_24;
    }
    memset(v32, 0, sizeof(v32));
    result = sub_19B6F6E18((uint64_t)&v24, v32);
    if ((_DWORD)result)
    {
      v12 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v12)
        v12(2, "Unable to decode manifest with error %d");
      goto LABEL_24;
    }
    if (v32[0] != 0x2000000000000010)
    {
      v17 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
      if (v17)
        v17(2, "Tag was not the expected manifest tag %llX");
      goto LABEL_24;
    }
    v30 = 0u;
    v31 = 0u;
    v29 = 0u;
    if ((qword_1EE3FD6D8 & 0xFFFC) == 0)
    {
      v14 = sub_19B6F7594((uint64_t)&v24, (unsigned __int16)qword_1EE3FD6D8, (uint64_t)&unk_1EE3FD690, (unint64_t)&v29, 0x30uLL, 0x30uLL);
      if (v14)
      {
        v15 = v14;
        v16 = (void (*)(uint64_t, const char *, ...))sub_19B6FD6C4();
        if (v16)
          v16(2, "Decode manifest sequence error: %d", v15);
      }
      else
      {
        v28[0] = v29;
        v28[1] = DWORD2(v29);
        v27[0] = v30;
        v27[1] = DWORD2(v30);
        v26[0] = v31;
        v26[1] = DWORD2(v31);
        if (DWORD2(v30) | DWORD2(v29) | DWORD2(v31))
        {
          v18 = sub_19B6FEA1C((uint64_t)v5);
          v19 = (int *)sub_19B6FE548(v18, v28, v27, v26);
          sub_19B6FE8D4((uint64_t)v5, v19);
          sub_19B6FE750(v19);
        }
      }
      return (uint64_t)v5;
    }
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19B6FDC24(uint64_t a1, uint64_t (*a2)(unint64_t *, char *, uint64_t), uint64_t a3)
{
  uint64_t result;
  unint64_t v6;
  unint64_t v7[2];
  char v8;
  unint64_t v9[3];
  unint64_t v10[2];

  v6 = 0;
  v7[0] = 0;
  v7[1] = 0;
  result = sub_19B6F6E18(a1, &v6);
  if (!(_DWORD)result)
  {
    if (v6 - 0x2000000000000012 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v10[0] = 0;
      v10[1] = 0;
      result = (uint64_t)sub_19B6F74AC(v7, v10);
      if (!(_DWORD)result)
      {
        memset(v9, 0, sizeof(v9));
        v8 = 0;
        while (1)
        {
          LODWORD(result) = sub_19B6F74D8(v10, v9);
          if ((_DWORD)result)
            break;
          LODWORD(result) = a2(v9, &v8, a3);
          if ((_DWORD)result)
            break;
          if (v8)
            return 0;
        }
        if (result <= 1)
          return 0;
        else
          return result;
      }
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t sub_19B6FDCE8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  char *v6;
  char *v7;
  _QWORD *v8;
  BOOL v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;

  if (!a3)
    return 6;
  v13 = 0u;
  v14 = 0u;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  if (((unsigned __int16)qword_1EE3FD638 & 0xFFFEu) < 6uLL)
  {
    v4 = sub_19B6F765C((unint64_t *)(result + 8), (unsigned __int16)qword_1EE3FD638, (uint64_t)&unk_1EE3FD5C0, (unint64_t)&v10, 0x50uLL, 0x50uLL);
    if (!(_DWORD)v4)
    {
      v9 = 0;
      v4 = sub_19B6F72CC((unsigned __int8 **)&v14, 0, &v9);
      if (!(_DWORD)v4)
      {
        v5 = 0;
        if (*((_QWORD *)&v10 + 1) == 4 && (_QWORD)v10)
          v5 = *(_DWORD *)v10;
        v6 = sub_19B6FD7E8((uint64_t)&v11);
        v7 = sub_19B6FD7E8((uint64_t)&v13);
        v8 = sub_19B6FDEE8(v5, v6, (const void *)v12, DWORD2(v12), v7, v9);
        sub_19B6FEC38(a3, (uint64_t)v8);
        sub_19B6FE260(v8);
        if (v6)
          free(v6);
        if (v7)
          free(v7);
      }
    }
    return v4;
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19B6FDE20(int a1)
{
  uint64_t result;
  int v3;

  result = 1;
  if (a1 <= 1682138726)
  {
    if (a1 > 1634758773)
    {
      if (a1 == 1634758774)
        return result;
      v3 = 1648584295;
    }
    else
    {
      if (a1 == 809723495)
        return result;
      v3 = 1279485543;
    }
    goto LABEL_13;
  }
  if (a1 <= 1715693158)
  {
    if (a1 == 1682138727)
      return result;
    v3 = 1698915943;
    goto LABEL_13;
  }
  if (a1 != 1715693159 && a1 != 1936023916)
  {
    v3 = 1950574183;
LABEL_13:
    if (a1 != v3)
      return 0;
  }
  return result;
}

_OWORD *sub_19B6FDEE8(int a1, const char *a2, const void *a3, size_t a4, const char *a5, int a6)
{
  int v9;
  int v10;
  void (*v11)(uint64_t, const char *);
  void (*v12)(uint64_t, const char *);
  void (*v13)(uint64_t, const char *);
  void (*v17)(uint64_t, const char *);
  _OWORD *v18;
  _OWORD *result;
  unint64_t v20;
  unint64_t v21;

  if (!a1)
  {
    v12 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v12)
      v12(2, "%s key was invalid");
    return 0;
  }
  if (a6)
    v9 = 4;
  else
    v9 = 0;
  v10 = (a3 != 0) | (2 * (a5 != 0)) | v9;
  if (!v10)
  {
    v13 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v13)
      v13(2, "%s one of data, string, or deleted must be provided");
    return 0;
  }
  if ((v10 & (v10 - 1)) != 0)
  {
    v11 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v11)
      v11(2, "%s data, string and deleted are mutually exclusive. Caller provided parameters [%s%s%s ]");
    return 0;
  }
  if (a3 && !(_DWORD)a4)
  {
    v17 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v17)
      v17(2, "%s data was 0 length");
    return 0;
  }
  result = malloc(0x30uLL);
  if (result)
    v20 = (unint64_t)(result + 3);
  else
    v20 = 0;
  if (v20 - (unint64_t)result >= 0x30)
  {
    v18 = result;
    result[1] = 0u;
    result[2] = 0u;
    *result = 0u;
    if ((unint64_t)(result + 3) <= v20)
    {
      *(_DWORD *)result = a1;
      if (!a2 || !*a2)
        a2 = ".";
      *((_QWORD *)result + 1) = sub_19B6FE104(a2, 0x1000000uLL);
      if (!a3)
        goto LABEL_31;
      result = sub_19B6FE1BC(a3, a4);
      if (v21 >= (unint64_t)result && (uint64_t)(v21 - (_QWORD)result) >= a4)
      {
        *((_QWORD *)v18 + 3) = result;
        *((_DWORD *)v18 + 8) = a4;
LABEL_31:
        if (a5)
          *((_QWORD *)v18 + 2) = sub_19B6FE104(a5, 0x1000000uLL);
        *((_BYTE *)v18 + 4) = a6 << 31 >> 31;
        *((_QWORD *)v18 + 5) = 0;
        return v18;
      }
    }
  }
  __break(0x5519u);
  return result;
}

char *sub_19B6FE104(const char *a1, size_t a2)
{
  size_t v3;
  char *v4;
  char *v5;
  unint64_t v6;
  BOOL v7;
  void (*v8)(uint64_t, const char *, ...);

  if (!a1)
    goto LABEL_11;
  v3 = strnlen(a1, a2);
  v4 = (char *)malloc(v3 + 1);
  strlcpy(v4, a1, v3 + 1);
  v5 = &v4[v3];
  if (v4 > &v4[v3])
    goto LABEL_10;
  v6 = (unint64_t)&v4[v3 + 1];
  if (!v4)
    v6 = 0;
  v7 = v5 + 1 < v5 || (unint64_t)(v5 + 1) > v6;
  if (v7 || *v5)
  {
LABEL_10:
    __break(0x5519u);
LABEL_11:
    v8 = (void (*)(uint64_t, const char *, ...))sub_19B6FD6C4();
    if (v8)
      v8(2, "%s source string was NULL", "char *__single __terminated_by(0)_allocAndCopyString(const char *__single __terminated_by(0), size_t)");
    return 0;
  }
  return v4;
}

void *sub_19B6FE1BC(const void *a1, size_t __size)
{
  size_t v3;
  void *result;
  unint64_t v5;
  void *v7;
  void (*v8)(uint64_t, const char *, ...);

  if ((_DWORD)__size)
  {
    v3 = __size;
    result = malloc(__size);
    if (result)
      v5 = (unint64_t)result + v3;
    else
      v5 = 0;
    if (v5 < (unint64_t)result || v5 - (unint64_t)result < v3)
    {
      __break(0x5519u);
      return result;
    }
    v7 = result;
    memcpy(result, a1, v3);
  }
  else
  {
    v8 = (void (*)(uint64_t, const char *, ...))sub_19B6FD6C4();
    if (v8)
      v8(2, "%s data was zero length", "uint8_t *__indexable_allocAndCopyData(const uint8_t *__single __counted_by(dataLength), uint32_t)");
    return 0;
  }
  return v7;
}

void sub_19B6FE260(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    *(_DWORD *)a1 = 0;
    v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0;
    }
    v3 = (void *)a1[3];
    if (v3)
    {
      free(v3);
      a1[3] = 0;
      *((_DWORD *)a1 + 8) = 0;
    }
    v4 = (void *)a1[2];
    if (v4)
      free(v4);
    free(a1);
  }
}

unsigned int *sub_19B6FE2BC(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

BOOL sub_19B6FE2C8(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 4) != 0;
  return result;
}

uint64_t sub_19B6FE2DC(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_19B6FE2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  if (a1 && a2)
  {
    v2 = *(_QWORD *)(a1 + 24);
    if (v2)
    {
      v3 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)a2 = v2;
      *(_DWORD *)(a2 + 8) = v3;
      return 1;
    }
  }
  else
  {
    result = sub_19B6FD6C4();
    if (!result)
      return result;
    ((void (*)(uint64_t, const char *, ...))result)(2, "%s invalid arguments. Either entry or data was NULL", "_Bool sysConfig3PayloadEntryGetData(struct __SysConfig3PayloadEntry *__single, SysConfigData *__single)");
  }
  return 0;
}

uint64_t sub_19B6FE350(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

_QWORD *sub_19B6FE35C(const char *a1, unint64_t a2, size_t a3, const char *a4)
{
  void (*v8)(uint64_t, const char *);
  void (*v9)(uint64_t, const char *);
  void (*v10)(uint64_t, const char *);
  void (*v11)(uint64_t, const char *);
  _QWORD *v12;
  _QWORD *result;
  char *v14;
  char *v15;
  unint64_t v16;

  if (!a1)
  {
    v9 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v9)
      v9(2, "%s key must be non-NULL");
    return 0;
  }
  if (a2 && a4)
  {
    v8 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v8)
      v8(2, "%s data and string are mutually exclusive");
    return 0;
  }
  if (!(a2 | (unint64_t)a4))
  {
    v11 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v11)
      v11(2, "%s either data or string must be non-null");
    return 0;
  }
  if (a2 && !(_DWORD)a3)
  {
    v10 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v10)
      v10(2, "%s data cannot be length zero");
    return 0;
  }
  result = malloc(0x28uLL);
  v14 = (char *)(result + 5);
  if (result)
    v15 = (char *)(result + 5);
  else
    v15 = 0;
  if ((unint64_t)(v15 - (char *)result) >= 0x28)
  {
    v12 = result;
    result[4] = 0;
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    result = sub_19B6FE104(a1, 0x100uLL);
    if (v14 <= v15)
    {
      *v12 = result;
      if (!a2)
      {
LABEL_26:
        if (a4)
          v12[1] = sub_19B6FE104(a4, 0x1000000uLL);
        v12[4] = 0;
        return v12;
      }
      result = sub_19B6FE1BC((const void *)a2, a3);
      if (v16 >= (unint64_t)result && (uint64_t)(v16 - (_QWORD)result) >= a3)
      {
        v12[2] = result;
        *((_DWORD *)v12 + 6) = a3;
        goto LABEL_26;
      }
    }
  }
  __break(0x5519u);
  return result;
}

void sub_19B6FE4F0(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v2 = (void *)*a1;
    if (v2)
    {
      free(v2);
      *a1 = 0;
    }
    v3 = (void *)a1[2];
    if (v3)
    {
      free(v3);
      a1[2] = 0;
      *((_DWORD *)a1 + 6) = 0;
    }
    v4 = (void *)a1[1];
    if (v4)
      free(v4);
    free(a1);
  }
}

_QWORD *sub_19B6FE548(int a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  _QWORD *result;
  unint64_t v9;
  _QWORD *v10;
  void (*v11)(uint64_t, const char *, ...);

  if (!a2 || !a3 || !a4)
  {
    v11 = (void (*)(uint64_t, const char *, ...))sub_19B6FD6C4();
    if (v11)
      v11(2, "%s one of the hmacs were NULL. payload ptr: %p metdata ptr: %p full ptr: %p", "struct __SysConfig3ManifestEntry *__singleallocSysConfig3Manifest(SysConfig3Version, const SysConfigData *__single, const SysConfigData *__single, const SysConfigData *__single)", a2, a3, a4);
    return 0;
  }
  result = malloc(0x38uLL);
  if (result)
    v9 = (unint64_t)(result + 7);
  else
    v9 = 0;
  if (v9 - (unint64_t)result >= 0x38)
  {
    v10 = result;
    result[6] = 0;
    *((_OWORD *)result + 1) = 0u;
    *((_OWORD *)result + 2) = 0u;
    *(_OWORD *)result = 0u;
    if ((unint64_t)(result + 7) <= v9)
    {
      *(_DWORD *)result = a1;
      if (*(_QWORD *)a2 && a2[2])
        sub_19B6FE664((uint64_t)a2, (uint64_t)(result + 1));
      if (*(_QWORD *)a3 && a3[2])
        sub_19B6FE664((uint64_t)a3, (uint64_t)(v10 + 3));
      if (*(_QWORD *)a4)
      {
        if (a4[2])
          sub_19B6FE664((uint64_t)a4, (uint64_t)(v10 + 5));
      }
      return v10;
    }
  }
  __break(0x5519u);
  return result;
}

char *sub_19B6FE664(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  BOOL v5;
  char *result;
  char *v7;
  BOOL v8;
  uint64_t v9;
  BOOL v10;
  size_t v11;

  if (a2)
  {
    v4 = *(unsigned int *)(a1 + 8);
    if (*(_QWORD *)a1)
      v5 = (_DWORD)v4 == 0;
    else
      v5 = 1;
    if (v5)
    {
      *(_QWORD *)a2 = 0;
      *(_DWORD *)(a2 + 8) = 0;
      result = (char *)sub_19B6FD6C4();
      if (result)
        return (char *)((uint64_t (*)(uint64_t, const char *))result)(2, "%s sourceData was 0 length");
    }
    else
    {
      result = (char *)malloc(*(unsigned int *)(a1 + 8));
      v7 = &result[v4];
      if (!result)
        v7 = 0;
      v8 = v7 >= result;
      v9 = v7 - result;
      v10 = !v8 || v9 < v4;
      if (v10
        || (*(_QWORD *)a2 = result,
            *(_DWORD *)(a2 + 8) = v4,
            v11 = *(unsigned int *)(a1 + 8),
            v11 > v4))
      {
        __break(0x5519u);
      }
      else
      {
        return (char *)memcpy(result, *(const void **)a1, v11);
      }
    }
  }
  else
  {
    result = (char *)sub_19B6FD6C4();
    if (result)
      return (char *)((uint64_t (*)(uint64_t, const char *))result)(2, "%s sourceData or destData was NULL");
  }
  return result;
}

void sub_19B6FE750(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;

  if (a1)
  {
    v2 = (void *)a1[1];
    if (v2)
    {
      free(v2);
      a1[1] = 0;
      *((_DWORD *)a1 + 4) = 0;
    }
    v3 = (void *)a1[3];
    if (v3)
    {
      free(v3);
      a1[3] = 0;
      *((_DWORD *)a1 + 8) = 0;
    }
    v4 = (void *)a1[5];
    if (v4)
      free(v4);
    free(a1);
  }
}

_OWORD *sub_19B6FE7AC(int a1, int a2)
{
  _OWORD *result;
  unint64_t v5;
  uint64_t v6;
  int *v7;
  void (*v8)(uint64_t, const char *);
  void (*v9)(uint64_t, const char *);
  _QWORD v10[2];
  char v11;

  if ((sub_19B6FDE20(a1) & 1) == 0)
  {
    v8 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v8)
      v8(2, "%s invalid magic provided 0x%08X");
    return 0;
  }
  if ((a2 - 196609) >= 3)
  {
    v9 = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (v9)
      v9(2, "%s invalid version provided 0x%08X");
    return 0;
  }
  result = malloc(0x30uLL);
  if (result)
    v5 = (unint64_t)(result + 3);
  else
    v5 = 0;
  if (v5 - (unint64_t)result >= 0x30)
  {
    v6 = (uint64_t)result;
    result[1] = 0u;
    result[2] = 0u;
    *result = 0u;
    if ((unint64_t)(result + 3) <= v5)
    {
      *(_DWORD *)result = a1;
      *((_DWORD *)result + 1) = a2;
      *((_QWORD *)result + 2) = 0;
      *((_QWORD *)result + 3) = 0;
      *((_QWORD *)result + 1) = 0;
      v11 = 0;
      v10[0] = &v11;
      v10[1] = 1;
      v7 = (int *)sub_19B6FE548(a2, v10, v10, v10);
      sub_19B6FE8D4(v6, v7);
      sub_19B6FE750(v7);
      return (_OWORD *)v6;
    }
  }
  __break(0x5519u);
  return result;
}

void (*sub_19B6FE8D4(uint64_t a1, int *a2))(uint64_t, const char *)
{
  _QWORD *v4;
  void (*result)(uint64_t, const char *);

  if (!a1 || !a2)
  {
    result = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
    if (!result)
      return result;
    result(2, "%s sysconfig (0x%p) or manifest (0x%p) argument was null");
    return 0;
  }
  if (*(_DWORD *)(a1 + 4) == *a2)
  {
    sub_19B6FE750(*(_QWORD **)(a1 + 24));
    *(_QWORD *)(a1 + 24) = 0;
    v4 = sub_19B6FE548(*a2, a2 + 2, a2 + 6, a2 + 10);
    *(_QWORD *)(a1 + 24) = v4;
    return (void (*)(uint64_t, const char *))(v4 != 0);
  }
  result = (void (*)(uint64_t, const char *))sub_19B6FD6C4();
  if (result)
  {
    result(2, "%s sysconfig version (0X%08X) did not match manifest version (0X%08X");
    return 0;
  }
  return result;
}

void sub_19B6FE9A4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  if (a1 && sub_19B6FDE20(*(_DWORD *)a1))
  {
    *a1 = 0;
    while (1)
    {
      v2 = (_QWORD *)a1[1];
      if (!v2)
        break;
      a1[1] = v2[5];
      sub_19B6FE260(v2);
    }
    while (1)
    {
      v3 = (_QWORD *)a1[2];
      if (!v3)
        break;
      a1[2] = v3[4];
      sub_19B6FE4F0(v3);
    }
    v4 = (_QWORD *)a1[3];
    if (v4)
      sub_19B6FE750(v4);
    free(a1);
  }
}

uint64_t sub_19B6FEA1C(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 4);
  return result;
}

uint64_t sub_19B6FEA28(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_19B6FEA34(uint64_t a1, int a2)
{
  _QWORD *result;
  _QWORD *v4;
  _QWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD **v9;
  void (*v10)(uint64_t, const char *, ...);

  if (!a1)
  {
    v10 = (void (*)(uint64_t, const char *, ...))sub_19B6FD6C4();
    if (v10)
      v10(2, "%s invalid argument. sysconfig cannot be NULL", "_Bool _sysConfig3DeletePayloadEntryForKey(struct __SysConfig3 *__single, uint32_t)");
    return (_QWORD *)(a1 != 0);
  }
  v4 = (_QWORD *)(a1 + 8);
  result = *(_QWORD **)(a1 + 8);
  if (!result)
    return (_QWORD *)(a1 != 0);
  v6 = 0;
  v7 = 0;
  v8 = 0;
  while (1)
  {
    if (*(_DWORD *)result != a2)
    {
      v7 = (unint64_t)(result + 6);
      v9 = (_QWORD **)(result + 5);
      v8 = result;
      v6 = result;
      goto LABEL_11;
    }
    if (!v6)
    {
      *v4 = result[5];
      sub_19B6FE260(result);
      v9 = (_QWORD **)(a1 + 8);
      goto LABEL_11;
    }
    if ((unint64_t)(v6 + 6) > v7 || v8 > v6)
      break;
    v6[5] = result[5];
    v9 = (_QWORD **)(v6 + 5);
    sub_19B6FE260(result);
LABEL_11:
    result = *v9;
    if (!*v9)
      return (_QWORD *)(a1 != 0);
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19B6FEB2C(uint64_t a1, char *__s2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t result;
  unint64_t *v11;
  void (*v12)(uint64_t, const char *, ...);

  if (a1)
    v2 = __s2 == 0;
  else
    v2 = 1;
  v3 = !v2;
  if (v2)
  {
    v12 = (void (*)(uint64_t, const char *, ...))sub_19B6FD6C4();
    if (v12)
      v12(2, "%s invalid argument. sysconfig and key cannot be NULL", "_Bool _sysConfig3DeleteMetadataEntryForKey(struct __SysConfig3 *__single, const char *__single __terminated_by(0))");
    return v3;
  }
  v4 = (unint64_t *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    return v3;
  v7 = 0;
  v8 = 0;
  v9 = 0;
  while (1)
  {
    result = strncmp(*(const char **)v5, __s2, 0x100uLL);
    if (!(_DWORD)result)
      break;
    v8 = v5 + 40;
    v11 = (unint64_t *)(v5 + 32);
    v9 = v5;
    v7 = v5;
LABEL_17:
    v5 = *v11;
    if (!*v11)
      return v3;
  }
  if (!v7)
  {
    *v4 = *(_QWORD *)(v5 + 32);
    sub_19B6FE4F0((_QWORD *)v5);
    v11 = v4;
    goto LABEL_17;
  }
  if (v7 + 40 <= v8 && v9 <= v7)
  {
    *(_QWORD *)(v7 + 32) = *(_QWORD *)(v5 + 32);
    v11 = (unint64_t *)(v7 + 32);
    sub_19B6FE4F0((_QWORD *)v5);
    goto LABEL_17;
  }
  __break(0x5519u);
  return result;
}

uint64_t sub_19B6FEC38(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;

  if (a1 && a2)
  {
    result = (uint64_t)sub_19B6FEA34(a1, *(_DWORD *)a2);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a1 + 8);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(_QWORD *)(v5 + 40);
        }
        while (v5);
        v7 = sub_19B6FDEE8(*(_DWORD *)a2, *(const char **)(a2 + 8), *(const void **)(a2 + 24), *(unsigned int *)(a2 + 32), *(const char **)(a2 + 16), *(_BYTE *)(a2 + 4) != 0);
        *(_QWORD *)(v6 + 40) = v7;
      }
      else
      {
        v7 = sub_19B6FDEE8(*(_DWORD *)a2, *(const char **)(a2 + 8), *(const void **)(a2 + 24), *(unsigned int *)(a2 + 32), *(const char **)(a2 + 16), *(_BYTE *)(a2 + 4) != 0);
        *(_QWORD *)(a1 + 8) = v7;
      }
      *((_QWORD *)v7 + 5) = 0;
      return 1;
    }
  }
  else
  {
    result = sub_19B6FD6C4();
    if (result)
    {
      ((void (*)(uint64_t, const char *, ...))result)(2, "%s invalid argument. sysconfig and etnry cannot be NULL", "_Bool _sysConfig3AddPayloadEntry(struct __SysConfig3 *__single, struct __SysConfig3PayloadEntry *__single)");
      return 0;
    }
  }
  return result;
}

uint64_t sub_19B6FED0C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  if (a1 && a2)
  {
    result = sub_19B6FEB2C(a1, *(char **)a2);
    if ((_DWORD)result)
    {
      v5 = *(_QWORD *)(a1 + 16);
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = *(_QWORD *)(v5 + 32);
        }
        while (v5);
        v7 = sub_19B6FE35C(*(const char **)a2, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24), *(const char **)(a2 + 8));
        *(_QWORD *)(v6 + 32) = v7;
      }
      else
      {
        v7 = sub_19B6FE35C(*(const char **)a2, *(_QWORD *)(a2 + 16), *(unsigned int *)(a2 + 24), *(const char **)(a2 + 8));
        *(_QWORD *)(a1 + 16) = v7;
      }
      v7[4] = 0;
      return 1;
    }
  }
  else
  {
    result = sub_19B6FD6C4();
    if (result)
    {
      ((void (*)(uint64_t, const char *, ...))result)(2, "%s invalid argument. sysconfig and entry cannot be NULL", "_Bool _sysConfig3AddMetadataEntry(struct __SysConfig3 *__single, struct __SysConfig3MetadataEntry *__single)");
      return 0;
    }
  }
  return result;
}

double sub_19B6FEDC0(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  double result;
  unint64_t v7;
  __int128 v8;

  v7 = 0;
  v8 = 0uLL;
  while (!sub_19B6F74D8(a1, &v7))
  {
    if (v7 == a2)
    {
      result = *(double *)&v8;
      *a3 = v8;
      return result;
    }
  }
  return result;
}

double sub_19B6FEE20(unint64_t *a1, uint64_t a2, _OWORD *a3)
{
  double result;
  unint64_t v6[2];

  v6[0] = 0;
  v6[1] = 0;
  if (!sub_19B6F74AC(a1, v6))
    return sub_19B6FEDC0(v6, a2, a3);
  return result;
}

uint64_t sub_19B6FEE68(uint64_t a1, unsigned int a2)
{
  unint64_t v2;
  unsigned int v5;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2 < 4)
    return 0xFFFFFFFFLL;
  if (v2 != 4)
    return 1;
  v5 = 0;
  if (sub_19B6F730C((char **)a1, &v5))
    return 4294967294;
  if (v5 < a2)
    return 0xFFFFFFFFLL;
  return v5 > a2;
}

uint64_t sub_19B6FEEDC(_QWORD *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  result = 6;
  if (a1)
  {
    if (a2)
    {
      v6 = 0;
      v7 = 0;
      v8 = 0;
      result = sub_19B6F6E18((uint64_t)a1, &v6);
      if (!(_DWORD)result)
      {
        if (v6 == 0x2000000000000010)
        {
          v5 = a1[1];
          if (__CFADD__(*a1, v5) || __CFADD__(v7, v8))
          {
            __break(0x5513u);
          }
          else if (*a1 + v5 == v7 + v8)
          {
            result = sub_19B6F765C(&v7, 4u, (uint64_t)&unk_19B7191D0, a2, 0x40uLL, 0);
            if (!(_DWORD)result)
              return 2 * (sub_19B6FEE68(a2, 0x494D4734u) != 0);
          }
          else
          {
            return 7;
          }
        }
        else
        {
          return 2;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19B6FEFBC(unint64_t *a1, char **a2)
{
  uint64_t result;
  unsigned int v5;

  v5 = 2;
  result = 6;
  if (a1)
  {
    if (a2)
    {
      result = sub_19B6F765C(a1, 2u, (uint64_t)&unk_19B7194E8, (unint64_t)a2, 0x20uLL, 0);
      if (!(_DWORD)result)
      {
        result = sub_19B6F730C(a2, &v5);
        if (!(_DWORD)result)
        {
          if (v5 <= 1)
            return 0;
          else
            return 6;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19B6FF03C(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  result = 6;
  if (a1)
  {
    if (a2)
    {
      result = sub_19B6F7594(a1, 7u, (uint64_t)&unk_19B7192C0, a2, 0xA0uLL, 0);
      if (!(_DWORD)result)
      {
        if (sub_19B6FEE68(a2, 0x494D3450u))
        {
          return 2;
        }
        else if (!*(_QWORD *)(a2 + 80)
               || (v7 = 0u, v8 = 0u,
                            result = sub_19B6FEFBC((unint64_t *)(a2 + 80), (char **)&v7),
                            !(_DWORD)result))
        {
          v6 = *(_QWORD *)(a2 + 96);
          v5 = a2 + 96;
          if (!v6)
            return 0;
          v7 = 0u;
          v8 = 0u;
          result = sub_19B6FF0F4(v5, (unint64_t)&v7);
          if (!(_DWORD)result)
            return 0;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19B6FF0F4(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2)
      return 6;
    if (*(_QWORD *)result && *(_QWORD *)(result + 8))
    {
      result = sub_19B6F7594(result, 2u, (uint64_t)&unk_19B7194B8, a2, 0x20uLL, 0);
      if ((_DWORD)result)
        return result;
      if (sub_19B6FEE68(a2, 0x50415950u))
        return 2;
    }
    return 0;
  }
  return result;
}

uint64_t sub_19B6FF170(uint64_t a1, unint64_t a2)
{
  uint64_t result;
  unint64_t *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v10[2];
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  result = 6;
  if (a1 && a2)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v13 = 0u;
    v14 = 0u;
    v11 = 0u;
    v12 = 0u;
    result = sub_19B6FF03C(a1, (unint64_t)&v11);
    if ((_DWORD)result)
    {
      result = sub_19B6F7594(a1, 6u, (uint64_t)&unk_19B719230, a2, 0x90uLL, 0);
      if (!(_DWORD)result)
      {
        if (sub_19B6FEE68(a2, 0x494D3450u))
        {
          return 2;
        }
        else
        {
          v6 = *(_QWORD *)(a2 + 80);
          v5 = (unint64_t *)(a2 + 80);
          if (!v6)
            return 0;
          memset(v10, 0, sizeof(v10));
          result = sub_19B6FEFBC(v5, (char **)v10);
          if (!(_DWORD)result)
            return 0;
        }
      }
    }
    else
    {
      v7 = v12;
      *(_OWORD *)a2 = v11;
      *(_OWORD *)(a2 + 16) = v7;
      v8 = v14;
      *(_OWORD *)(a2 + 32) = v13;
      *(_OWORD *)(a2 + 48) = v8;
      v9 = v16;
      *(_OWORD *)(a2 + 64) = v15;
      *(_OWORD *)(a2 + 80) = v9;
    }
  }
  return result;
}

uint64_t sub_19B6FF278(_QWORD *a1, unint64_t a2)
{
  return sub_19B6FF294(a1, 5uLL, (uint64_t)&unk_19B719368, a2, 0x494D344Du);
}

uint64_t sub_19B6FF294(_QWORD *a1, unint64_t a2, uint64_t a3, unint64_t a4, unsigned int a5)
{
  uint64_t result;
  unsigned int v9;

  result = 6;
  if (a1 && a4)
  {
    if (!*a1 || !a1[1])
      return 0;
    if (a2 >= 0x10000)
    {
      __break(0x5507u);
      return result;
    }
    result = sub_19B6F7594((uint64_t)a1, (unsigned __int16)a2, a3, a4, 0xC0uLL, 0);
    if (!(_DWORD)result)
    {
      if (sub_19B6FEE68(a4, a5))
        return 2;
      v9 = 0;
      result = sub_19B6F730C((char **)(a4 + 16), &v9);
      if ((_DWORD)result)
        return result;
      if (v9 > 2)
        return 2;
      return 0;
    }
  }
  return result;
}

uint64_t sub_19B6FF340(_QWORD *a1, unint64_t a2)
{
  return sub_19B6FF294(a1, 3uLL, (uint64_t)&unk_19B719440, a2, 0x494D344Du);
}

uint64_t sub_19B6FF35C(_QWORD *a1, unint64_t a2)
{
  return sub_19B6FF294(a1, 4uLL, (uint64_t)&unk_19B7193E0, a2, 0x494D3443u);
}

uint64_t sub_19B6FF378(_QWORD *a1, unint64_t a2)
{
  return sub_19B6FF294(a1, 3uLL, (uint64_t)&unk_19B719440, a2, 0x494D3443u);
}

uint64_t sub_19B6FF394(uint64_t result, unint64_t a2)
{
  if (result)
  {
    if (!a2)
      return 6;
    if (*(_QWORD *)result && *(_QWORD *)(result + 8))
    {
      result = sub_19B6F7594(result, 2u, (uint64_t)&unk_19B719488, a2, 0x20uLL, 0);
      if ((_DWORD)result)
        return result;
      if (sub_19B6FEE68(a2, 0x494D3452u))
        return 2;
    }
    return 0;
  }
  return result;
}

uint64_t sub_19B6FF410(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  unint64_t v14;
  __int128 v15;

  result = 6;
  if (a1)
  {
    if (a3)
    {
      v14 = 0;
      v15 = 0uLL;
      v13 = 0uLL;
      v11 = 0;
      v12 = 0;
      v9 = 0;
      v10 = 0;
      v8 = 0;
      result = sub_19B6F73F4((uint64_t)a1, &v9, &v10);
      if (!(_DWORD)result)
      {
        if (v9 != 0x2000000000000010)
          return 2;
        result = sub_19B6F74D8(&v10, &v14);
        if ((_DWORD)result)
          return result;
        if (v14 != 22)
          return 2;
        result = sub_19B6F730C((char **)&v15, &v8);
        if ((_DWORD)result)
          return result;
        if ((v8 | 0xE000000000000000) != a2)
          return 2;
        *(_OWORD *)a3 = v15;
        result = sub_19B6F74D8(&v10, &v12);
        if ((_DWORD)result)
          return result;
        *(_QWORD *)(a3 + 40) = v12;
        *(_OWORD *)(a3 + 24) = v13;
        result = sub_19B6F74D8(&v10, &v12);
        if ((_DWORD)result != 1)
          return 2;
        v7 = a1[1];
        if (__CFADD__(*a1, v7))
        {
          __break(0x5513u);
        }
        else if (v11 == *a1 + v7)
        {
          return 0;
        }
        else
        {
          return 7;
        }
      }
    }
  }
  return result;
}

uint64_t sub_19B6FF53C(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t result;
  unsigned int v8;
  _QWORD v9[4];
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v9[0] = 0;
  v9[2] = 0;
  v9[1] = 22;
  v9[3] = 24;
  v10 = a3;
  result = sub_19B6F7594(a1, 2u, (uint64_t)v9, a4, 0x30uLL, 0);
  if (!(_DWORD)result)
  {
    result = sub_19B6F730C((char **)a4, &v8);
    if (!(_DWORD)result)
    {
      if ((v8 | 0xE000000000000000) == a2)
      {
        result = 0;
        *(_QWORD *)(a4 + 16) = a2 | 0xE000000000000000;
        *(_QWORD *)(a4 + 40) = a3;
      }
      else
      {
        return 2;
      }
    }
  }
  return result;
}

void sub_19B6FF60C(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  int v7;
  __int128 v8;

  v8 = 0uLL;
  sub_19B6FEDC0(a1, a2, &v8);
  if (!v7)
    sub_19B6FF53C((uint64_t)&v8, a2, a3, a4);
}

void sub_19B6FF664(unint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7[2];

  v7[0] = 0;
  v7[1] = 0;
  if (!sub_19B6F74AC(a1, v7))
    sub_19B6FF60C(v7, a2, a3, a4);
}

void sub_19B6FF6BC(uint64_t a1, unint64_t a2, unint64_t a3)
{
  sub_19B6FF6C8(a1, a2, a3, 0x4D414E42u);
}

void sub_19B6FF6C8(uint64_t a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  _OWORD v12[3];
  _OWORD v13[3];
  unint64_t v14;
  unint64_t v15[2];

  v11 = 0;
  if (a1)
  {
    if (a2 | a3)
    {
      v14 = 0;
      v15[0] = 0;
      v15[1] = 0;
      memset(v13, 0, sizeof(v13));
      memset(v12, 0, sizeof(v12));
      if (!sub_19B6F6E18(a1 + 264, &v14)
        && v14 == 0x2000000000000011
        && !sub_19B6F730C((char **)(a1 + 248), &v11))
      {
        v8 = v11 == 2 ? 0x2000000000000010 : 0x2000000000000011;
        sub_19B6FF664(v15, a4 | 0xE000000000000000, v8, (unint64_t)v13);
        if (!v9)
        {
          if (a2)
            *(_OWORD *)a2 = *(_OWORD *)((char *)&v13[1] + 8);
          sub_19B6FF664((unint64_t *)&v13[1] + 1, 0xE00000004D414E50, 0x2000000000000011uLL, (unint64_t)v12);
          if (a3)
          {
            if (!v10)
              *(_OWORD *)a3 = *(_OWORD *)((char *)&v12[1] + 8);
          }
        }
      }
    }
  }
}

uint64_t sub_19B6FF7F4(uint64_t a1, BOOL *a2)
{
  uint64_t result;
  BOOL v4;

  result = 6;
  if (a1 && a2)
  {
    if (*(_QWORD *)(a1 + 136))
      v4 = *(_QWORD *)(a1 + 144) != 0;
    else
      v4 = 0;
    result = 0;
    *a2 = v4;
  }
  return result;
}

uint64_t sub_19B6FF82C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  BOOL v5;

  if (a1 && a2)
  {
    v5 = 0;
    result = sub_19B6FF7F4(a1, &v5);
    if (!(_DWORD)result)
    {
      if (v5)
      {
        result = 0;
        *(_OWORD *)a2 = *(_OWORD *)(a1 + 136);
        return result;
      }
      result = 1;
    }
    goto LABEL_9;
  }
  result = 6;
  if (a2)
  {
LABEL_9:
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  return result;
}

uint64_t sub_19B6FF898(uint64_t a1, _DWORD *a2)
{
  uint64_t result;
  BOOL v5;

  v5 = 0;
  result = 6;
  if (!a1 || !a2 || (result = sub_19B6FF7F4(a1, &v5), (_DWORD)result))
  {
LABEL_6:
    if (!a2)
      return result;
    goto LABEL_7;
  }
  if (v5)
  {
    result = sub_19B6F730C((char **)(a1 + 104), a2);
    goto LABEL_6;
  }
  result = 1;
  if (!a2)
    return result;
LABEL_7:
  if ((_DWORD)result)
    *a2 = 0;
  return result;
}

uint64_t sub_19B6FF90C(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  int v6;
  BOOL v7;
  int v8;

  result = 6;
  if (a1 && a2 && a3)
  {
    v5 = *(_QWORD *)(a1 + 24);
    *a2 = v5;
    v6 = *(_DWORD *)(a1 + 32);
    *a3 = v6;
    if (v5)
      v7 = v6 == 0;
    else
      v7 = 1;
    v8 = v7;
    return (v8 << 31 >> 31);
  }
  return result;
}

uint64_t sub_19B6FF944(_QWORD *a1, unsigned int a2, char *a3)
{
  uint64_t v3;
  char v4;

  v3 = 6;
  if (a2 <= 1 && a1 && a3)
  {
    if (a2 == 1)
    {
      if (!a1[55] || !a1[56])
        goto LABEL_11;
    }
    else if (!a1[33] || !a1[34])
    {
LABEL_11:
      v4 = 0;
      goto LABEL_12;
    }
    v4 = 1;
LABEL_12:
    v3 = 0;
    *a3 = v4;
  }
  return v3;
}

uint64_t sub_19B6FF9A4(uint64_t a1, unsigned int a2, uint64_t a3, BOOL *a4)
{
  uint64_t v4;
  uint64_t v6;
  _OWORD v8[3];

  memset(v8, 0, sizeof(v8));
  v4 = 6;
  if (a1)
  {
    if (a4)
    {
      sub_19B6FFB38(a1, a2, a3 | 0xE000000000000000, 1uLL, v8);
      v4 = v6;
      if (!(_DWORD)v6)
        return sub_19B6F7290((unsigned __int8 **)&v8[1] + 1, a4);
    }
  }
  return v4;
}

double sub_19B6FFA10(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  double result;
  int v10;
  int v11;
  int v12;
  _OWORD v13[3];
  unint64_t v14[2];

  v14[0] = 0;
  v14[1] = 0;
  result = 0.0;
  memset(v13, 0, sizeof(v13));
  if (a1)
  {
    if (a5)
    {
      sub_19B6FF6BC(a1, (unint64_t)v14, 0);
      if (v10
        || (sub_19B6FF664(v14, a2 | 0xE000000000000000, 0x2000000000000011uLL, (unint64_t)v13), v11)
        || (sub_19B6FF664((unint64_t *)&v13[1] + 1, a3, a4, (unint64_t)a5), v12))
      {
        result = 0.0;
        a5[1] = 0u;
        a5[2] = 0u;
        *a5 = 0u;
      }
    }
  }
  return result;
}

void sub_19B6FFAC0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v10 = 0u;
  v11 = 0u;
  v9 = 0u;
  if (a1 && a4 && a5)
  {
    sub_19B6FFA10(a1, a2, a3 | 0xE000000000000000, 4uLL, &v9);
    if (v7)
    {
      v8 = 0;
      *a4 = 0;
    }
    else
    {
      v8 = v11;
      *a4 = *((_QWORD *)&v10 + 1);
    }
    *a5 = v8;
  }
}

double sub_19B6FFB38(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4, _OWORD *a5)
{
  int v10;
  double result;
  int v12;
  unint64_t v13[3];
  char v14;

  *(_OWORD *)v13 = 0uLL;
  if (a2 <= 1 && a1 && a5)
  {
    v14 = 0;
    if (!sub_19B6FF944((_QWORD *)a1, a2, &v14) && v14)
    {
      if (a2)
      {
        *(_OWORD *)v13 = *(_OWORD *)(a1 + 440);
        goto LABEL_9;
      }
      sub_19B6FF6BC(a1, 0, (unint64_t)v13);
      if (!v10)
      {
LABEL_9:
        sub_19B6FF664(v13, a3, a4, (unint64_t)a5);
        if (!v12)
          return result;
      }
    }
    result = 0.0;
    a5[1] = 0u;
    a5[2] = 0u;
    *a5 = 0u;
  }
  return result;
}

uint64_t sub_19B6FFC04(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v8 = 0u;
  v9 = 0u;
  v7 = 0u;
  v4 = *(unsigned int *)(a1 + 8);
  v6[0] = *(_QWORD *)a1;
  v6[1] = v4;
  result = sub_19B6FF410(v6, a2 | 0xE000000000000000, (uint64_t)&v7);
  if (!(_DWORD)result)
  {
    if (*((_QWORD *)&v9 + 1) != 2)
    {
      result = 2;
      if (!a3)
        return result;
      goto LABEL_6;
    }
    if (!a3)
      return 6;
    result = sub_19B6F738C((char **)&v8 + 1, a3);
  }
  if (!a3)
    return result;
LABEL_6:
  if ((_DWORD)result)
    *a3 = 0;
  return result;
}

uint64_t sub_19B6FFC94(uint64_t a1, uint64_t a2, BOOL *a3)
{
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v4 = *(unsigned int *)(a1 + 8);
  v6[0] = *(_QWORD *)a1;
  v6[1] = v4;
  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  result = sub_19B6FF410(v6, a2 | 0xE000000000000000, (uint64_t)&v7);
  if (!(_DWORD)result)
  {
    if (*((_QWORD *)&v9 + 1) == 1)
    {
      if (a3)
        return sub_19B6F7290((unsigned __int8 **)&v8 + 1, a3);
      else
        return 6;
    }
    else
    {
      return 2;
    }
  }
  return result;
}

uint64_t sub_19B6FFD14(uint64_t *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;

  v13 = 0u;
  v14 = 0u;
  v12 = 0u;
  result = 6;
  if (a3 && a4)
  {
    v8 = *a1;
    v9 = *((unsigned int *)a1 + 2);
    v11[0] = v8;
    v11[1] = v9;
    result = sub_19B6FF410(v11, a2 | 0xE000000000000000, (uint64_t)&v12);
    if (!(_DWORD)result)
    {
      if (*((_QWORD *)&v14 + 1) == 4)
      {
        result = 0;
        *a3 = *((_QWORD *)&v13 + 1);
        v10 = v14;
LABEL_6:
        *a4 = v10;
        return result;
      }
      result = 2;
    }
    v10 = 0;
    *a3 = 0;
    goto LABEL_6;
  }
  return result;
}

void sub_19B6FFDA8(_QWORD *a1)
{
  sub_19B6FFDB0(a1, 0);
}

void sub_19B6FFDB0(_QWORD *a1, _OWORD *a2)
{
  __int128 *v4;
  int v5;
  int v6;
  __int128 v7;
  __int128 __s2;
  _OWORD v9[2];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  void *__s1;
  size_t __n;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20[2];
  unint64_t v21[3];

  v21[0] = 0;
  v21[1] = 0;
  v20[0] = 0;
  v20[1] = 0;
  v19 = 0;
  v18 = 0uLL;
  __n = 0;
  v17 = 0;
  v14 = 0;
  __s1 = 0;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  memset(v9, 0, sizeof(v9));
  __s2 = 0uLL;
  v7 = 0uLL;
  if (a1 && a1[40] && !sub_19B6F73F4((uint64_t)(a1 + 39), &v19, v21) && v19 == 0x2000000000000011)
  {
    while (1)
    {
      if (sub_19B6F74D8(v21, (unint64_t *)&v17))
        return;
      v4 = (__int128 *)(a1 + 7);
      switch(v17)
      {
        case 0xE00000004D414E50:
LABEL_11:
          v7 = *v4;
          if (sub_19B6FF410(&v18, v17, (uint64_t)&v11)
            || *((_QWORD *)&v13 + 1) != 0x2000000000000011
            || sub_19B6F74AC((unint64_t *)&v12 + 1, v20))
          {
            return;
          }
          while (1)
          {
            v5 = sub_19B6F74D8(v20, (unint64_t *)&v14);
            if (v5)
              break;
            if (sub_19B6FF410(&__s1, v14, (uint64_t)v9))
              return;
            sub_19B6FEE20((unint64_t *)&v7, v14, &__s2);
            if (*((_QWORD *)&v10 + 1) <= 4uLL && ((1 << SBYTE8(v10)) & 0x16) != 0)
            {
              if (v6)
                return;
              if (__n != *((_QWORD *)&__s2 + 1))
                return;
              v6 = memcmp(__s1, (const void *)__s2, __n);
              if (v6)
                return;
            }
            else if (*((_QWORD *)&v10 + 1) != 0xA000000000000000)
            {
              if (*((_QWORD *)&v10 + 1) != 0xA000000000000001 || v6 != 1)
                return;
              v6 = 0;
            }
            if (v6)
              return;
          }
          if (v5 != 1)
            return;
          break;
        case 0xE00000006D616E78:
          if (a2)
            *a2 = v18;
          break;
        case 0xE00000004F424A50:
          v4 = (__int128 *)(a1 + 9);
          if (a1[9])
            goto LABEL_11;
          v4 = (__int128 *)(a1 + 9);
          if (a1[10])
            goto LABEL_11;
          break;
        default:
          return;
      }
    }
  }
}

uint64_t sub_19B700014(unint64_t *a1, uint64_t a2, uint64_t (*a3)(unint64_t, uint64_t *, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result;
  _OWORD v8[2];
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13[2];
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0;
  v14 = 0;
  v13[0] = 0;
  v13[1] = 0;
  v11 = 0;
  v12 = 0;
  v10 = 0;
  memset(v8, 0, sizeof(v8));
  v9 = 0u;
  if (!a3)
    return 6;
  result = (uint64_t)sub_19B6F74AC(a1, v13);
  if (!(_DWORD)result)
  {
    while (1)
    {
      result = sub_19B6F74D8(v13, &v14);
      if ((_DWORD)result == 1)
        return 0;
      if ((_DWORD)result)
        return result;
      result = sub_19B6FF410(&v15, v14, (uint64_t)v8);
      if ((_DWORD)result)
        return result;
      result = 2;
      if (*((_QWORD *)&v9 + 1) > 0x16uLL
        || ((1 << SBYTE8(v9)) & 0x400016) == 0
        || !(v14 >> 62)
        || (v14 & 0x2000000000000000) == 0)
      {
        return result;
      }
      if (HIDWORD(v16))
        break;
      v10 = v15;
      LODWORD(v11) = v16;
      v12 = *((_QWORD *)&v9 + 1);
      result = a3(v14, &v10, a2, a4);
      if ((_DWORD)result)
        return result;
    }
    return 7;
  }
  return result;
}

double sub_19B700138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _QWORD v9[2];

  if (a1)
  {
    if (a3)
    {
      v9[0] = a1;
      v9[1] = a2;
      v7 = 0u;
      v8 = 0u;
      v5 = 0u;
      v6 = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 96) = 0u;
      *(_OWORD *)(a3 + 112) = 0u;
      *(_OWORD *)(a3 + 128) = 0u;
      *(_OWORD *)(a3 + 144) = 0u;
      *(_OWORD *)(a3 + 160) = 0u;
      *(_OWORD *)(a3 + 176) = 0u;
      *(_OWORD *)(a3 + 192) = 0u;
      *(_OWORD *)(a3 + 208) = 0u;
      *(_OWORD *)(a3 + 224) = 0u;
      *(_OWORD *)(a3 + 240) = 0u;
      *(_OWORD *)(a3 + 256) = 0u;
      *(_OWORD *)(a3 + 272) = 0u;
      *(_OWORD *)(a3 + 288) = 0u;
      *(_OWORD *)(a3 + 304) = 0u;
      *(_OWORD *)(a3 + 320) = 0u;
      *(_OWORD *)(a3 + 336) = 0u;
      *(_OWORD *)(a3 + 352) = 0u;
      *(_OWORD *)(a3 + 368) = 0u;
      *(_OWORD *)(a3 + 384) = 0u;
      *(_OWORD *)(a3 + 400) = 0u;
      *(_OWORD *)(a3 + 416) = 0u;
      *(_OWORD *)(a3 + 432) = 0u;
      *(_QWORD *)(a3 + 448) = 0;
      if (!sub_19B6FEEDC(v9, (unint64_t)&v5)
        && !sub_19B6FF170((uint64_t)&v6, a3 + 88)
        && !sub_19B6FF278(&v7, a3 + 232)
        && !sub_19B6FF394((uint64_t)&v8, a3 + 424))
      {
        *(_OWORD *)(a3 + 8) = v6;
        result = *(double *)&v7;
        *(_OWORD *)(a3 + 24) = v7;
      }
    }
  }
  return result;
}

uint64_t sub_19B700220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_19B700234(a1, a2, 1, a3, 1229796429);
}

uint64_t sub_19B700234(uint64_t a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  uint64_t result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = 6;
  if (a1 && a4)
  {
    v15 = a1;
    v16 = a2;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 128) = 0u;
    *(_OWORD *)(a4 + 144) = 0u;
    *(_OWORD *)(a4 + 160) = 0u;
    *(_OWORD *)(a4 + 176) = 0u;
    *(_OWORD *)(a4 + 192) = 0u;
    *(_OWORD *)(a4 + 208) = 0u;
    *(_OWORD *)(a4 + 224) = 0u;
    *(_OWORD *)(a4 + 240) = 0u;
    *(_OWORD *)(a4 + 256) = 0u;
    *(_OWORD *)(a4 + 272) = 0u;
    *(_OWORD *)(a4 + 288) = 0u;
    *(_OWORD *)(a4 + 304) = 0u;
    *(_OWORD *)(a4 + 320) = 0u;
    *(_OWORD *)(a4 + 336) = 0u;
    *(_OWORD *)(a4 + 352) = 0u;
    *(_OWORD *)(a4 + 368) = 0u;
    *(_OWORD *)(a4 + 384) = 0u;
    *(_OWORD *)(a4 + 400) = 0u;
    *(_OWORD *)(a4 + 416) = 0u;
    *(_OWORD *)(a4 + 432) = 0u;
    *(_QWORD *)(a4 + 448) = 0;
    if (a5 == 1229796419)
    {
      v10 = a4 + 232;
      if (a3)
        result = sub_19B6FF35C(&v15, v10);
      else
        result = sub_19B6FF378(&v15, v10);
    }
    else
    {
      if (a5 != 1229796429)
        return 2;
      v9 = a4 + 232;
      if (a3)
        result = sub_19B6FF278(&v15, v9);
      else
        result = sub_19B6FF340(&v15, v9);
    }
    if (!(_DWORD)result)
    {
      if (*(_QWORD *)(a4 + 264))
      {
        v12 = 0;
        v13 = 0;
        v14 = 0;
        v15 = a1;
        v16 = a2;
        result = sub_19B6F6E20((uint64_t)&v15, &v12, 0);
        if (!(_DWORD)result)
        {
          *(_QWORD *)(a4 + 24) = a1;
          v11 = v14 + v13 - a1;
          if (__CFADD__(v14, v13 - a1))
          {
            __break(0x5500u);
          }
          else
          {
            *(_QWORD *)(a4 + 32) = v11;
            if (v11 == a2)
              return 0;
            else
              return 7;
          }
        }
      }
      else
      {
        return 3;
      }
    }
  }
  return result;
}

void sub_19B700370(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v5[3];

  v5[1] = 0;
  v5[2] = 0;
  v5[0] = a3;
  sub_19B7003AC(a1, a2, (uint64_t)v5, a4, 0, a5);
}

void sub_19B7003A0(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_19B7003AC(a1, a2, a3, a4, 0, a5);
}

void sub_19B7003AC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  _QWORD *v9;
  uint64_t (*v13)(uint64_t, uint64_t);
  const void *v14;
  int v15;
  int v16;
  unsigned int (*v17)(unint64_t *, unint64_t, uint64_t, _OWORD *, uint64_t);
  unint64_t v18;
  unint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[3];

  v22 = 0;
  v23 = 0;
  memset(v24, 0, sizeof(v24));
  if (a2)
  {
    if (a3)
    {
      v21 = 0;
      if (a4)
      {
        if (*(_QWORD *)a3)
        {
          if (*(_QWORD *)a4)
          {
            if (*(_QWORD *)(a4 + 24))
            {
              if (*(_QWORD *)(a4 + 8))
              {
                if (*(_QWORD *)(a4 + 16))
                {
                  v9 = *(_QWORD **)(a4 + 32);
                  if (v9)
                  {
                    if (*(_QWORD *)(a2 + 24) && *v9 <= 0x30uLL && !(*(unsigned int (**)(void))a4)())
                    {
                      *(_BYTE *)(a2 + 1) = 1;
                      v13 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 8);
                      if (v13
                        && (v14 = (const void *)v13(a2, a6)) != 0
                        && !memcmp((const void *)(a2 + 328), v14, **(_QWORD **)(a4 + 32)))
                      {
                        v15 = 0;
                      }
                      else
                      {
                        if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a4 + 8))(*(_QWORD *)(a2 + 296), *(_QWORD *)(a2 + 304), &v22, &v23, a2 + 312, a2 + 320, a4, a6)|| **(_QWORD **)(a4 + 32) > 0x30uLL|| (*(unsigned int (**)(_QWORD, _QWORD, uint64_t))a4)(*(_QWORD *)(a2 + 264), *(_QWORD *)(a2 + 272), a2 + 376)|| (*(unsigned int (**)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(a4 + 16))(v22, v23, *(_QWORD *)(a2 + 280), *(_QWORD *)(a2 + 288), a2 + 376,
                               **(_QWORD **)(a4 + 32),
                               a4,
                               a6))
                        {
                          return;
                        }
                        v15 = 1;
                      }
                      sub_19B6FF6BC(a2, a2 + 40, a2 + 56);
                      if (v16)
                        return;
                      if ((a5 & 1) == 0)
                      {
                        v17 = *(unsigned int (**)(unint64_t *, unint64_t, uint64_t, _OWORD *, uint64_t))(a3 + 16);
                        v18 = a1 | 0xE000000000000000;
                        v19 = (unint64_t *)(a2 + 40);
                        if (v17)
                        {
                          if (v17(v19, v18, 0x2000000000000011, v24, a6))
                            return;
                        }
                        else
                        {
                          sub_19B6FF664(v19, v18, 0x2000000000000011uLL, (unint64_t)v24);
                          if (v20)
                            return;
                        }
                        *(_OWORD *)(a2 + 72) = *(_OWORD *)((char *)&v24[1] + 8);
                      }
                      if ((!v15 || !(*(unsigned int (**)(uint64_t, uint64_t))(a4 + 24))(a2, a6))
                        && **(_QWORD **)(a4 + 32) <= 0x30uLL
                        && !sub_19B6FF7F4(a2, &v21))
                      {
                        if (v21)
                        {
                          if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t))a4)(*(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), a2 + 184, **(_QWORD **)(a4 + 32), a4))
                          {
                            return;
                          }
                          *(_BYTE *)a2 = 1;
                        }
                        if (!sub_19B700014((unint64_t *)(a2 + 56), 0, *(uint64_t (**)(unint64_t, uint64_t *, uint64_t, uint64_t))a3, a6)&& (a5 & 1) == 0)
                        {
                          sub_19B700014((unint64_t *)(a2 + 72), 1, *(uint64_t (**)(unint64_t, uint64_t *, uint64_t, uint64_t))a3, a6);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_19B700654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_19B7003AC(0, a1, a2, a3, 1, a4);
}

uint64_t sub_19B700670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  size_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  unsigned __int8 *v15;
  __int128 v16;
  unint64_t v17;
  BOOL v18;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[2];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x1E0C80C00];
  if (a5 != 4096 && a5 != 3072)
    return 0xFFFFFFFFLL;
  v24[0] = 0;
  v24[1] = 0;
  v9 = (unint64_t)(a5 + 63) >> 6;
  MEMORY[0x1E0C80A78]();
  v11 = (unint64_t *)((char *)&v21 - v10);
  bzero((char *)&v21 - v10, v10);
  *v11 = v9;
  v12 = *(unsigned int *)(a1 + 8);
  v23[0] = *(_QWORD *)a1;
  v23[1] = v12;
  v21 = 0u;
  v22 = 0u;
  result = sub_19B6F7594((uint64_t)v23, 2u, (uint64_t)&unk_19B718C30, (unint64_t)&v21, 0x20uLL, 0x20uLL);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  v14 = *((_QWORD *)&v21 + 1);
  v15 = (unsigned __int8 *)v21;
  v16 = v22;
  if (*((_QWORD *)&v21 + 1))
  {
    while (!*v15)
    {
      if (v15 == (unsigned __int8 *)-1)
        __break(0x5513u);
      ++v15;
      if (!--v14)
      {
        v15 = (unsigned __int8 *)(v21 + *((_QWORD *)&v21 + 1));
        break;
      }
    }
  }
  if (v14 >= 0xFFFFFFFFFFFFFFF8)
  {
    __break(0x5500u);
    return result;
  }
  v17 = (v14 + 7) >> 3;
  if (v17 > *v11)
    return 0xFFFFFFFFLL;
  *v11 = v17;
  if (sub_19B70C80C(v11, *((unint64_t *)&v16 + 1), (unsigned __int8 *)v16, v14, v15))
    return 0xFFFFFFFFLL;
  if (sub_19B709EAC)
    v18 = byte_19B71A3B0 == 0;
  else
    v18 = 1;
  if (!v18)
  {
    v20 = sub_19B709EAC(v11, a2, *(_QWORD *)(a3 + 8), *(char **)a3, *(_QWORD *)(a4 + 8), *(unsigned __int8 **)a4, v24);
    if (!v20 && !sub_19B706BE4(16, byte_19B71A3B0, (char *)v24))
      return 0;
    return 0xFFFFFFFFLL;
  }
  LOBYTE(v21) = 0;
  v19 = sub_19B709E20(v11, a2, *(_QWORD *)(a3 + 8), *(char **)a3, *(_QWORD *)(a4 + 8), *(unsigned __int8 **)a4, &v21);
  result = 0xFFFFFFFFLL;
  if (!v19 && (_BYTE)v21)
    return 0;
  return result;
}

uint64_t sub_19B70087C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  uint64_t result;
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];

  v13[0] = a1;
  v13[1] = a2;
  v12[0] = a3;
  v12[1] = a4;
  v11[0] = a5;
  v11[1] = a6;
  if (!a1)
    return 0xFFFFFFFFLL;
  if (!a2)
    return 0xFFFFFFFFLL;
  if (!a3)
    return 0xFFFFFFFFLL;
  if (!a4)
    return 0xFFFFFFFFLL;
  if (!a5)
    return 0xFFFFFFFFLL;
  if (!a6)
    return 0xFFFFFFFFLL;
  if (!a7)
    return 0xFFFFFFFFLL;
  v7 = *(_QWORD *)(a7 + 32);
  if (!v7)
    return 0xFFFFFFFFLL;
  v8 = *(_QWORD ***)(v7 + 16);
  if (!v8)
    return 0xFFFFFFFFLL;
  v9 = *v8;
  if (!v9)
    return 0xFFFFFFFFLL;
  if (*v9 != a6)
    return 0xFFFFFFFFLL;
  result = sub_19B700670((uint64_t)v13, v9[4], (uint64_t)v11, (uint64_t)v12, 4096);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_19B700910(unint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t result;
  unsigned int v9;
  uint64_t v15;
  const void **v16;
  uint64_t *v17;
  const void **v18;
  unint64_t *v19;
  size_t v20;
  const void *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  __int128 v25;
  unint64_t v26[2];
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[216];
  _BYTE v32[24];
  unint64_t v33[30];
  _OWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[32];
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41[2];
  unint64_t v42[2];
  __int128 v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46[2];
  unint64_t v47[3];

  result = 0xFFFFFFFFLL;
  if (a1)
  {
    v9 = a2;
    if (a2)
    {
      if (a3 && a4)
      {
        bzero(&v28, 0x2F0uLL);
        v26[0] = a1;
        v26[1] = v9;
        v27[0] = &unk_19B719518;
        v27[1] = 1215;
        if (!sub_19B70123C(v26, (uint64_t)v27, 3u)
          && !sub_19B700BF4((uint64_t)v27, 3u, (uint64_t)&v29, (uint64_t)v31, (uint64_t)v34, (uint64_t)v37))
        {
          v24 = a6;
          v15 = 0;
          v16 = (const void **)v32;
          v17 = &v30;
          v18 = (const void **)v32;
          while (1)
          {
            v19 = &v26[20 * v15];
            v20 = v19[37];
            v21 = *v18;
            v18 += 20;
            if ((const void *)v20 != v21)
              break;
            if (memcmp((const void *)v19[36], *(v16 - 1), v20))
              break;
            result = sub_19B700E58(&v34[v15], v17, a7);
            if ((_DWORD)result)
              break;
            v17 += 6;
            ++v15;
            v16 = v18;
            if (v15 == 2)
            {
              v25 = 0uLL;
              if ((unint64_t)v31 > 0xFFFFFFFFFFFFFF5FLL)
              {
LABEL_34:
                __break(0x5513u);
                return result;
              }
              v42[0] = 0;
              v42[1] = 0;
              v40 = 0;
              v41[0] = 0;
              v41[1] = 0;
              if (sub_19B6F74AC(v33, v42))
                return 0xFFFFFFFFLL;
LABEL_14:
              if (!sub_19B6F74D8(v42, &v40) && v40 == 0x2000000000000011)
              {
                v47[0] = 0;
                v47[1] = 0;
                v45 = 0;
                v46[0] = 0;
                v46[1] = 0;
                v43 = 0u;
                v44 = 0u;
                if (!sub_19B6F74AC(v41, v47))
                {
                  do
                  {
                    v22 = sub_19B6F74D8(v47, &v45);
                    if (v22)
                    {
                      if (v22 == 1)
                        goto LABEL_14;
                      return 0xFFFFFFFFLL;
                    }
                    if (v45 != 0x2000000000000010
                      || sub_19B6F765C(v46, 2u, (uint64_t)&unk_19B718B38, (unint64_t)&v43, 0x20uLL, 0x20uLL))
                    {
                      return 0xFFFFFFFFLL;
                    }
                  }
                  while (!sub_19B6F794C((uint64_t)&off_1E3BD15C0, (uint64_t)&v43));
                  v25 = v44;
                  result = sub_19B6F794C((uint64_t)&off_1E3BD16C0, (uint64_t)&v25);
                  if (!(_DWORD)result)
                    return 0xFFFFFFFFLL;
                  if ((unint64_t)v34 > 0xFFFFFFFFFFFFFFDFLL)
                    goto LABEL_34;
                  *a3 = v35;
                  *a4 = v36;
                  if ((unint64_t)v37 > 0xFFFFFFFFFFFFFFDFLL)
                    goto LABEL_34;
                  if (!v38)
                    return 0;
                  v23 = v39;
                  if (!v39)
                    return 0;
                  result = 0;
                  if (a5)
                  {
                    if (v24)
                    {
                      result = 0;
                      *a5 = v38;
                      *v24 = v23;
                    }
                  }
                  return result;
                }
              }
              return 0xFFFFFFFFLL;
            }
          }
        }
        return 0xFFFFFFFFLL;
      }
    }
  }
  return result;
}

uint64_t sub_19B700BF4(uint64_t result, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  char v21;
  __int128 v22;
  __int128 v23;

  if (!a2)
    return 0;
  v8 = 0;
  v15 = result;
  v18 = ~result;
  v17 = ~a3;
  v14 = ~a4;
  v13 = ~a5;
  v11 = ~a6;
  v10 = a2;
  while (1)
  {
    v9 = 16 * v8;
    if (16 * v8 > v18 || 48 * v8 > v17)
      break;
    result = sub_19B6F7594(v15 + 16 * v8, 3u, (uint64_t)&unk_19B7189F0, a3 + 48 * v8, 0x30uLL, 0x30uLL);
    if ((_DWORD)result)
      return 0xFFFFFFFFLL;
    if (160 * v8 > v14)
      break;
    result = sub_19B6F7594(a3 + 48 * v8, 0xAu, (uint64_t)&unk_19B718A40, a4 + 160 * v8, 0xA0uLL, 0xA0uLL);
    if ((_DWORD)result)
      return 0xFFFFFFFFLL;
    if (v9 > v13)
      break;
    v22 = 0u;
    v23 = 0u;
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    if (sub_19B6F765C((unint64_t *)(a4 + 160 * v8 + 96), 2u, (uint64_t)&unk_19B718BF8, (unint64_t)&v22, 0x20uLL, 0x20uLL))return 0xFFFFFFFFLL;
    if (sub_19B6F765C((unint64_t *)&v22, 2u, (uint64_t)&unk_19B718BC0, (unint64_t)&v19, 0x20uLL, 0x20uLL))return 0xFFFFFFFFLL;
    result = sub_19B6F794C((uint64_t)&v19, (uint64_t)&off_1E3BD14F0);
    if (!(_DWORD)result)
      return 0xFFFFFFFFLL;
    if (*((_QWORD *)&v20 + 1))
    {
      if (*((_QWORD *)&v20 + 1) != 2 || *(_BYTE *)v20 != 5)
        return 0xFFFFFFFFLL;
      if ((_QWORD)v20 == -1)
        break;
      if (*(_BYTE *)(v20 + 1))
        return 0xFFFFFFFFLL;
    }
    result = sub_19B6F71D0((uint64_t)&v23, (unint64_t *)(a5 + 16 * v8), &v21);
    if ((_DWORD)result || v21)
      return 0xFFFFFFFFLL;
    if (v9 > v11)
      break;
    result = sub_19B701314(a4 + 160 * v8, (_QWORD *)(a6 + 16 * v8));
    if ((_DWORD)result)
      return 0xFFFFFFFFLL;
    if (++v8 == v10)
      return 0;
  }
  __break(0x5513u);
  return result;
}

uint64_t sub_19B700E58(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  char v10;
  __int128 v11;
  __int128 v12;
  _OWORD v13[3];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a1)
    return 0xFFFFFFFFLL;
  if (!a2)
    return 0xFFFFFFFFLL;
  if (!a3)
    return 0xFFFFFFFFLL;
  v11 = 0u;
  v12 = 0u;
  v10 = 0;
  memset(v13, 0, sizeof(v13));
  v8 = 0;
  v9 = 0;
  v5 = *(_QWORD **)(a3 + 32);
  if (!v5
    || !v5[2]
    || !*(_QWORD *)a3
    || !*(_QWORD *)(a3 + 40)
    || *v5 > 0x30uLL
    || sub_19B6F765C(a2 + 2, 2u, (uint64_t)&unk_19B718BC0, (unint64_t)&v11, 0x20uLL, 0x20uLL))
  {
    return 0xFFFFFFFFLL;
  }
  if (*((_QWORD *)&v12 + 1))
  {
    result = sub_19B6F794C((uint64_t)&v11, (uint64_t)&xmmword_1E3BD1530);
    if ((result & 1) == 0)
    {
      if (*((_QWORD *)&v12 + 1) != 2 || *(_BYTE *)v12 != 5)
        return 0xFFFFFFFFLL;
      if ((_QWORD)v12 == -1)
      {
        __break(0x5513u);
        return result;
      }
      if (*(_BYTE *)(v12 + 1))
        return 0xFFFFFFFFLL;
    }
  }
  if (!sub_19B6F794C((uint64_t)&v11, *(_QWORD *)(a3 + 40)))
    return 0xFFFFFFFFLL;
  if ((*(unsigned int (**)(_QWORD, _QWORD, _OWORD *, _QWORD, uint64_t))a3)(*a2, a2[1], v13, **(_QWORD **)(a3 + 32), a3))
  {
    return 0xFFFFFFFFLL;
  }
  if (sub_19B6F71D0((uint64_t)(a2 + 4), &v8, &v10))
    return 0xFFFFFFFFLL;
  if (v10)
    return 0xFFFFFFFFLL;
  result = (*(uint64_t (**)(_QWORD, _QWORD, unint64_t, uint64_t, _OWORD *, _QWORD, uint64_t, _QWORD))(a3 + 16))(*a1, a1[1], v8, v9, v13, **(_QWORD **)(a3 + 32), a3, 0);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  return result;
}

uint64_t sub_19B700FFC(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7, unsigned int (*a8)(_QWORD *, _BYTE *, uint64_t))
{
  uint64_t result;
  unsigned int v10;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD v21[2];
  _BYTE v22[48];
  _OWORD v23[9];
  uint64_t v24;
  void *__s1;
  size_t __n;
  _QWORD v27[6];
  _BYTE v28[16];
  uint64_t v29;
  uint64_t v30;

  result = 0xFFFFFFFFLL;
  if (a1)
  {
    v10 = a2;
    if (a2)
    {
      if (a3 && a4)
      {
        bzero(v22, 0x300uLL);
        v21[0] = a1;
        v21[1] = v10;
        if (a8(v21, v22, 2))
          return 0xFFFFFFFFLL;
        result = sub_19B700BF4((uint64_t)v22, 2u, (uint64_t)v23, (uint64_t)&v24, (uint64_t)v27, (uint64_t)v28);
        if ((_DWORD)result)
        {
          return 0xFFFFFFFFLL;
        }
        else
        {
          v16 = 1;
          v17 = 1;
          while ((v16 & 1) != 0)
          {
            v18 = &v21[20 * v17];
            if (__n == v18[33] && !memcmp(__s1, (const void *)v18[32], __n))
            {
              result = sub_19B700E58(v27, &v23[3 * v17], a7);
              v16 = 0;
              v17 = 2;
              if (!(_DWORD)result)
                continue;
            }
            return 0xFFFFFFFFLL;
          }
          if ((unint64_t)v27 > 0xFFFFFFFFFFFFFFEFLL
            || (*a3 = v27[2], *a4 = v27[3], (unint64_t)v28 > 0xFFFFFFFFFFFFFFEFLL))
          {
            __break(0x5513u);
          }
          else if (v29 && (v19 = v30) != 0)
          {
            result = 0;
            if (a5 && a6)
            {
              result = 0;
              *a5 = v29;
              *a6 = v19;
            }
          }
          else
          {
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_19B70118C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  return sub_19B700FFC(a1, a2, a3, a4, a5, a6, a7, (unsigned int (*)(_QWORD *, _BYTE *, uint64_t))sub_19B701198);
}

uint64_t sub_19B701198(unint64_t *a1, _QWORD *a2, unsigned int a3)
{
  *a2 = &unk_19B719A10;
  a2[1] = 1374;
  if (sub_19B70123C(a1, (uint64_t)a2, a3))
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_19B7011CC(char *a1, size_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _QWORD *v8;
  _QWORD **v9;
  _QWORD *v10;

  result = 0xFFFFFFFFLL;
  if (a1 && a2 && a3 && a5)
  {
    v8 = *(_QWORD **)(a5 + 32);
    if (v8 && (v9 = (_QWORD **)v8[2]) != 0 && *v8 == a4 && (v10 = *v9) != 0 && *v10 == a4)
    {
      sub_19B702F48((uint64_t)v10, a2, a1, a3);
      return 0;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_19B70123C(unint64_t *a1, uint64_t a2, unsigned int a3)
{
  unint64_t v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;

  v18 = 0;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v5 = ~a2;
  v6 = 1;
  v7 = *a1;
  v8 = a1[1];
  while (1)
  {
    v18 = v7;
    v19 = v8;
    result = sub_19B6F6E18((uint64_t)&v18, &v15);
    if ((_DWORD)result)
      return 0xFFFFFFFFLL;
    if (__CFADD__(v16, v17))
      break;
    v10 = v16 + v17;
    v11 = v16 + v17 - v7;
    v12 = !(v11 >> 17) && v8 >= v11;
    if (!v12 || v6 >= a3)
      return 0xFFFFFFFFLL;
    if (v5 < 16 * (unint64_t)v6)
      break;
    v14 = (unint64_t *)(a2 + 16 * v6);
    *v14 = v7;
    v14[1] = v11;
    if (v10 < v7)
      break;
    v12 = v8 >= v11;
    v8 -= v11;
    if (!v12)
      goto LABEL_21;
    ++v6;
    v7 = v10;
    if (!v8)
    {
      if (v6 == a3)
        return 0;
      return 0xFFFFFFFFLL;
    }
  }
  __break(0x5513u);
LABEL_21:
  __break(0x5515u);
  return result;
}

uint64_t sub_19B701314(uint64_t a1, _QWORD *a2)
{
  char v3;
  int v4;
  _OWORD v6[2];
  __int128 v7;
  unint64_t v8;
  unint64_t v9[2];
  uint64_t v10;
  unint64_t v11[2];
  unint64_t v12[3];

  v11[0] = 0;
  v11[1] = 0;
  v9[1] = 0;
  v10 = 0;
  v8 = 0;
  v9[0] = 0;
  v7 = 0u;
  memset(v6, 0, sizeof(v6));
  *a2 = 0;
  a2[1] = 0;
  if (!*(_QWORD *)(a1 + 152))
    return 0;
  if (sub_19B6F73F4(a1 + 144, &v10, v11) || v10 != 0x2000000000000010)
    return 0xFFFFFFFFLL;
  v3 = 1;
  while (1)
  {
    v4 = sub_19B6F74D8(v11, &v8);
    if (v4)
      break;
    if (v8 != 0x2000000000000010
      || sub_19B6F765C(v9, 3u, (uint64_t)&unk_19B718B70, (unint64_t)v6, 0x30uLL, 0x30uLL))
    {
      return 0xFFFFFFFFLL;
    }
    v3 = 0;
    if (sub_19B6F794C((uint64_t)&off_1E3BD15D0, (uint64_t)v6))
    {
      memset(v12, 0, sizeof(v12));
      if (sub_19B6F6E18((uint64_t)&v7, v12) || v12[0] != 0x2000000000000011)
        return 0xFFFFFFFFLL;
      v3 = 0;
      *(_OWORD *)a2 = v7;
    }
  }
  if (v4 != 1 || (v3 & 1) != 0)
    return 0xFFFFFFFFLL;
  else
    return 0;
}

uint64_t sub_19B701470(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, unint64_t a8)
{
  uint64_t v14;
  unint64_t *v15;
  size_t v16;
  unint64_t **v17;
  uint64_t result;
  int v19;
  int v20;
  _BYTE v21[7];
  BOOL v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v22 = 0;
  v14 = sub_19B706C78(a2);
  if (!sub_19B704B1C(v14))
    return 13;
  v15 = (unint64_t *)sub_19B704A60(v14);
  MEMORY[0x1E0C80A78]();
  v17 = (unint64_t **)&v21[-v16];
  bzero(&v21[-v16], v16);
  *v17 = v15;
  result = 1;
  if (a1 && a5 && a7)
  {
    v19 = sub_19B705158(v15, a2, a1, v17);
    if (v19 == -13)
      return 2;
    if (v19)
      return 6;
    v20 = sub_19B706B54(v17, a8, a7, a6, a5, &v22);
    if (v20 == -13)
      return 2;
    if (v20)
    {
      return 6;
    }
    else if (v22)
    {
      return 0;
    }
    else
    {
      return 6;
    }
  }
  return result;
}

uint64_t sub_19B7015DC(char *a1, size_t a2, uint64_t a3)
{
  if (!a1)
    return 1;
  sub_19B702F48((uint64_t)off_1EE3FD760, a2, a1, a3);
  return 0;
}

uint64_t sub_19B701614(char *a1, size_t a2, uint64_t a3)
{
  void *v6;

  if (!a1)
    return 1;
  v6 = off_1EE3FD768;
  if (!off_1EE3FD768)
  {
    v6 = sub_19B70E8D8();
    off_1EE3FD768 = v6;
  }
  sub_19B702F48((uint64_t)v6, a2, a1, a3);
  return 0;
}

uint64_t sub_19B701678(char *a1, size_t a2, uint64_t a3)
{
  if (!a1)
    return 1;
  sub_19B702F48((uint64_t)off_1EE3FD770, a2, a1, a3);
  return 0;
}

uint64_t sub_19B7016B0(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  v6 = 6;
  if (a6 == 20)
  {
    v7 = sub_19B701750((uint64_t)v12, (uint64_t)"\x06\x05+\x0E\x03\x02\x1A", (uint64_t)v10, (uint64_t)v11);
    if (v7)
      v8 = 6;
    else
      v8 = 0;
    if (v7 == -13)
      return 2;
    else
      return v8;
  }
  return v6;
}

uint64_t sub_19B701750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  uint64_t result;
  BOOL v13;
  __int128 v14;
  __int128 v15;
  _QWORD v16[2];
  unint64_t v17;
  uint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x1E0C80C00];
  v19[0] = 0;
  v19[1] = 0;
  bzero(&v18, 0x638uLL);
  v17 = 64;
  v8 = *(unsigned int *)(a1 + 8);
  v16[0] = *(_QWORD *)a1;
  v16[1] = v8;
  v14 = 0u;
  v15 = 0u;
  if (sub_19B6F792C((uint64_t)v16, 2u, (uint64_t)&unk_19B718C30, (unint64_t)&v14, 0x20uLL))
    return 0xFFFFFFFFLL;
  v9 = *((_QWORD *)&v14 + 1);
  v10 = (unsigned __int8 *)v14;
  if (*((_QWORD *)&v14 + 1))
  {
    v11 = 7;
    while (!*v10)
    {
      ++v10;
      if (!--v9)
      {
        v10 = (unsigned __int8 *)(v14 + *((_QWORD *)&v14 + 1));
        goto LABEL_10;
      }
    }
    v11 = v9 + 7;
    if (v9 + 7 >= 0x208)
      return 0xFFFFFFFFLL;
  }
  else
  {
    v11 = 7;
  }
LABEL_10:
  v17 = v11 >> 3;
  result = sub_19B70C80C(&v17, *((unint64_t *)&v15 + 1), (unsigned __int8 *)v15, v9, v10);
  if (!(_DWORD)result)
  {
    if (sub_19B709EAC)
      v13 = byte_19B71A3B0 == 0;
    else
      v13 = 1;
    if (v13)
    {
      LOBYTE(v14) = 0;
      result = sub_19B709E20(&v17, a2, *(_QWORD *)(a3 + 8), *(char **)a3, *(_QWORD *)(a4 + 8), *(unsigned __int8 **)a4, &v14);
      if (!(_DWORD)result && (_BYTE)v14)
        return 0;
    }
    else
    {
      result = sub_19B709EAC(&v17, a2, *(_QWORD *)(a3 + 8), *(char **)a3, *(_QWORD *)(a4 + 8), *(unsigned __int8 **)a4, v19);
      if (!(_DWORD)result)
      {
        sub_19B706BE4(16, byte_19B71A3B0, (char *)v19);
        return 0;
      }
    }
  }
  return result;
}

uint64_t sub_19B7018F8(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  v6 = 6;
  if (a6 == 32)
  {
    if (v7)
      v8 = 6;
    else
      v8 = 0;
    if (v7 == -13)
      return 2;
    else
      return v8;
  }
  return v6;
}

uint64_t sub_19B701998(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[3];

  v12[2] = *MEMORY[0x1E0C80C00];
  v12[0] = a1;
  v12[1] = a2;
  v11[0] = a3;
  v11[1] = a4;
  v10[0] = a5;
  v10[1] = a6;
  v6 = 6;
  if (a6 == 48)
  {
    if (v7)
      v8 = 6;
    else
      v8 = 0;
    if (v7 == -13)
      return 2;
    else
      return v8;
  }
  return v6;
}

void sub_19B701A38(CFTypeRef cf)
{
  if (cf)
    CFRelease(cf);
}

void sub_19B701A44(void *a1)
{
  if (a1)
    free(a1);
}

uint64_t sub_19B701A50(const __CFAllocator *a1, CFTypeRef *a2, CFTypeRef cf)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef cfa[2];

  cfa[1] = *(CFTypeRef *)MEMORY[0x1E0C80C00];
  cfa[0] = 0;
  v3 = 1;
  if (a2 && cf)
  {
    v6 = sub_19B701B18(a1, cf, cfa, 0);
    if ((_DWORD)v6)
    {
      v3 = v6;
      sub_19B701D6C(3, (uint64_t)"AMSupportCreateDataFromFileURL", (uint64_t)"AMSupportCopyPreserveFileURL failed.", v7, v8, v9, v10, v11, (char)cfa[0]);
    }
    else
    {
      v3 = sub_19B7022D4(a1, a2, (const __CFURL *)cfa[0]);
    }
    if (cfa[0])
      CFRelease(cfa[0]);
  }
  return v3;
}

uint64_t sub_19B701B18(const __CFAllocator *a1, CFTypeRef cf, CFTypeRef *a3, int a4)
{
  uint64_t v4;
  const __CFURL *v7;
  CFTypeRef v8;
  CFStringRef v9;
  CFMutableStringRef Mutable;
  CFStringRef v11;
  uint64_t v12;
  uint64_t v13;
  CFURLRef v14;
  BOOL v15;
  const __CFURL *v16;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = 1;
  v20 = 1;
  if (cf && a3)
  {
    v7 = (const __CFURL *)CFRetain(cf);
    v8 = CFRetain(cf);
    v9 = 0;
    Mutable = 0;
    v11 = 0;
    v12 = 1;
    while (1)
    {
      v13 = sub_19B702000(v7, (BOOL *)&v20);
      if ((_DWORD)v13)
      {
        v4 = v13;
        goto LABEL_25;
      }
      if (!v20)
        goto LABEL_21;
      if (v11)
        CFRelease(v11);
      v11 = CFStringCreateWithFormat(a1, 0, CFSTR("~%d"), v12);
      if (!v11)
        goto LABEL_38;
      if (Mutable)
        CFRelease(Mutable);
      if (v9)
        CFRelease(v9);
      Mutable = CFStringCreateMutable(a1, 0);
      if (!Mutable)
        break;
      v9 = CFURLCopyFileSystemPath((CFURLRef)cf, kCFURLPOSIXPathStyle);
      if (!v9)
        goto LABEL_38;
      CFStringAppend(Mutable, v9);
      CFStringAppend(Mutable, v11);
      if (v8)
        CFRelease(v8);
      v8 = CFRetain(v7);
      CFRelease(v7);
      v14 = CFURLCreateWithFileSystemPath(a1, Mutable, kCFURLPOSIXPathStyle, 0);
      if (!v14)
      {
        v4 = 2;
LABEL_28:
        CFRelease(v11);
        goto LABEL_29;
      }
      v7 = v14;
      if (v20)
      {
        v15 = v12 > 0x1E;
        v12 = (v12 + 1);
        if (!v15)
          continue;
      }
LABEL_21:
      if (a4)
        v16 = v7;
      else
        v16 = (const __CFURL *)v8;
      v4 = 0;
      *a3 = CFRetain(v16);
      goto LABEL_25;
    }
    v9 = 0;
LABEL_38:
    v4 = 2;
LABEL_25:
    if (v7)
      CFRelease(v7);
    if (v11)
      goto LABEL_28;
LABEL_29:
    if (Mutable)
      CFRelease(Mutable);
    if (v9)
      CFRelease(v9);
    if (v8)
      CFRelease(v8);
  }
  return v4;
}

uint64_t sub_19B701D38(int level, const char *a2)
{
  return asl_log(0, 0, level, "%s", a2);
}

void sub_19B701D6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9;
  const char *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  int v14;
  const char *v15;
  unsigned int v16;
  const __CFAllocator *v17;
  const __CFString *v18;
  const __CFString *v19;
  const __CFString *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int Length;
  unsigned int v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  const char *v29;
  char __str[4096];
  uint64_t v31;

  v9 = MEMORY[0x1E0C80A78]();
  v11 = v10;
  v13 = v12;
  v14 = v9;
  v31 = *MEMORY[0x1E0C80C00];
  bzero(__str, 0x1000uLL);
  v15 = "";
  if (v13)
    v15 = v13;
  v16 = snprintf(__str, 0x1000uLL, "%s: ", v15);
  v17 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v18 = CFStringCreateWithCStringNoCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, 0x8000100u, (CFAllocatorRef)*MEMORY[0x1E0C9AE20]);
  if (!v18)
  {
    v20 = 0;
    goto LABEL_9;
  }
  v19 = CFStringCreateWithFormatAndArguments(v17, 0, v18, &a9);
  v20 = v19;
  if (!v19)
  {
LABEL_9:
    v28 = 0;
    v27 = 0;
    goto LABEL_14;
  }
  v21 = v16;
  v22 = 4096 - v16;
  Length = CFStringGetLength(v19);
  v24 = Length;
  if (4096 - v16 < Length && (v25 = (char *)malloc_type_malloc(v16 + Length + 1, 0xD6DA2896uLL)) != 0)
  {
    v26 = v25;
    v22 = v24 + 1;
    memcpy(v25, __str, v16);
    v27 = v26;
  }
  else
  {
    v27 = 0;
    v26 = __str;
  }
  if (CFStringGetCString(v20, &v26[v21], v22, 0x8000100u))
    v28 = v26;
  else
    v28 = 0;
LABEL_14:
  if (v28)
    v29 = v28;
  else
    v29 = "failed to format log message";
  off_1EE3FD598(v14, v29);
  sub_19B701A38(v18);
  sub_19B701A38(v20);
  sub_19B701A44(v27);
}

uint64_t sub_19B701F54(char *__format, ...)
{
  char __str[16];
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  va_list va;

  va_start(va, __format);
  v18 = *MEMORY[0x1E0C80C00];
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  v8 = 0u;
  v9 = 0u;
  v6 = 0u;
  v7 = 0u;
  v4 = 0u;
  v5 = 0u;
  *(_OWORD *)__str = 0u;
  v3 = 0u;
  vsnprintf(__str, 0x100uLL, __format, va);
  return fprintf((FILE *)*MEMORY[0x1E0C80C10], "%s\n", __str);
}

uint64_t sub_19B702000(const __CFURL *a1, BOOL *a2)
{
  uint64_t result;
  int v5;
  UInt8 v6[1024];
  stat v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  result = 1;
  if (a1 && a2)
  {
    memset(&v7, 0, sizeof(v7));
    bzero(v6, 0x400uLL);
    if (CFURLGetFileSystemRepresentation(a1, 1u, v6, 1024))
    {
      v5 = stat((const char *)v6, &v7);
      result = 0;
      *a2 = v5 == 0;
    }
    else
    {
      return 3;
    }
  }
  return result;
}

uint64_t sub_19B7020CC(_QWORD *a1, off_t *a2, char *a3)
{
  char v3;
  int v6;
  int v7;
  off_t st_size;
  void *v9;
  void *v10;
  uint64_t v11;
  int *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  stat v55;
  uint64_t v56;

  v3 = (char)a3;
  v56 = *MEMORY[0x1E0C80C00];
  memset(&v55, 0, sizeof(v55));
  v6 = open(a3, 0, 0);
  if ((v6 & 0x80000000) == 0)
  {
    v7 = v6;
    if (fstat(v6, &v55) < 0)
    {
      v24 = __error();
      v25 = strerror(*v24);
      sub_19B701D6C(3, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"fstat failed: %s", v26, v27, v28, v29, v30, v25);
      sub_19B701D6C(7, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v31, v32, v33, v34, v35, v3);
    }
    else
    {
      st_size = v55.st_size;
      v9 = malloc_type_malloc(v55.st_size, 0xE7096D54uLL);
      if (!v9)
      {
        v36 = __error();
        strerror(*v36);
        sub_19B701D6C(3, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"malloc(%d) failed: %s", v37, v38, v39, v40, v41, st_size);
        v11 = 2;
        goto LABEL_11;
      }
      v10 = v9;
      if (read(v7, v9, st_size) == st_size)
      {
        v11 = 0;
        *a1 = v10;
        *a2 = st_size;
LABEL_11:
        close(v7);
        return v11;
      }
      v42 = __error();
      v43 = strerror(*v42);
      sub_19B701D6C(3, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"read failed: %s", v44, v45, v46, v47, v48, v43);
      sub_19B701D6C(7, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v49, v50, v51, v52, v53, v3);
      free(v10);
    }
    v11 = 4;
    goto LABEL_11;
  }
  v12 = __error();
  v13 = strerror(*v12);
  sub_19B701D6C(3, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"open failed: %s", v14, v15, v16, v17, v18, v13);
  sub_19B701D6C(7, (uint64_t)"AMSupportPlatformCreateBufferFromNativeFilePath", (uint64_t)"%s", v19, v20, v21, v22, v23, v3);
  return 4;
}

uint64_t sub_19B7022D4(const __CFAllocator *a1, CFTypeRef *a2, const __CFURL *a3)
{
  uint64_t v6;
  UInt8 *v7;
  CFDataRef v8;
  CFDataRef v9;
  uint64_t v10;
  off_t v12;
  UInt8 *v13;
  UInt8 buffer[1024];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  bzero(buffer, 0x400uLL);
  if (CFURLGetFileSystemRepresentation(a3, 1u, buffer, 1024))
  {
    v12 = 0;
    v13 = 0;
    v6 = sub_19B7020CC(&v13, &v12, (char *)buffer);
    if ((_DWORD)v6)
    {
      v10 = v6;
      v9 = 0;
    }
    else
    {
      v7 = v13;
      v8 = CFDataCreateWithBytesNoCopy(a1, v13, v12, (CFAllocatorRef)*MEMORY[0x1E0C9AE10]);
      v9 = v8;
      if (v8)
      {
        v10 = 0;
        *a2 = CFRetain(v8);
      }
      else
      {
        free(v7);
        v10 = 2;
      }
    }
  }
  else
  {
    v9 = 0;
    v10 = 3;
  }
  sub_19B701A38(v9);
  return v10;
}

uint64_t sub_19B7023E0(uint64_t result, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  int8x16_t *v7;
  BOOL v15;
  int8x16_t v17;

  if (a3)
  {
    v5 = *(unsigned int *)(result + 240);
    if ((_DWORD)v5 == 160 || (_DWORD)v5 == 192 || (_DWORD)v5 == 224)
    {
      do
      {
        v6 = v5 - 16;
        a4 += 16;
        _Q2 = *(int8x16_t *)result;
        v7 = (int8x16_t *)(result + 16);
        do
        {
          __asm
          {
            AESE            V0.16B, V2.16B
            AESMC           V0.16B, V0.16B
          }
          _Q2 = *v7++;
          v15 = v6 <= 16;
          v6 -= 16;
        }
        while (!v15);
        __asm { AESE            V0.16B, V2.16B }
        v17 = veorq_s8(_Q0, *v7);
        result = (uint64_t)v7->i64 - v5;
        *a5++ = v17;
        v15 = a3-- <= 1;
      }
      while (!v15);
      result = 0;
      *a2 = v17;
    }
    else
    {
      return -1;
    }
  }
  return result;
}

uint64_t sub_19B702460(unint64_t *a1, uint64_t a2, int a3, int a4)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  int v8;
  unint64_t v9;
  uint64_t result;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  int v32;
  unint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t *v36;
  int v37;
  uint64_t v38;

  v4 = &byte_19B719F78;
  *(_DWORD *)(a2 + 240) = 16 * a4;
  if (a3 == 6)
  {
    v15 = *a1;
    v16 = a1[1];
    v14 = (uint64_t *)(a1 + 2);
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v16;
    v17 = (uint64_t *)(a2 + 16);
    v18 = *v14;
    *v17 = *v14;
    v19 = (unint64_t *)(v17 + 1);
    v20 = 4 * a4 - 2;
    do
    {
      HIDWORD(v21) = HIDWORD(v18);
      LODWORD(v21) = HIDWORD(v18);
      v22 = *v4++;
      result = v22;
      v23 = (byte_19B719F84[BYTE5(v18)] | (byte_19B719F84[(v21 >> 8) >> 24] << 24) | (byte_19B719F84[((v21 >> 8) >> 16)] << 16) | (byte_19B719F84[(unsigned __int16)(HIDWORD(v18) >> 8) >> 8] << 8)) ^ v22;
      v15 ^= v23 ^ ((v15 ^ v23) << 32);
      v16 ^= HIDWORD(v15) ^ ((v16 ^ HIDWORD(v15)) << 32);
      v18 ^= HIDWORD(v16) ^ ((v18 ^ HIDWORD(v16)) << 32);
      *v19 = v15;
      v19[1] = v16;
      v24 = v19 + 2;
      *v24 = v18;
      v19 = v24 + 1;
      v13 = __OFSUB__(v20, 6);
      v20 -= 6;
    }
    while (!((v20 < 0) ^ v13 | (v20 == 0)));
  }
  else if (a3 == 8)
  {
    v26 = *a1;
    v27 = a1[1];
    v25 = a1 + 2;
    *(_QWORD *)a2 = v26;
    *(_QWORD *)(a2 + 8) = v27;
    v28 = (unint64_t *)(a2 + 16);
    v29 = *v25;
    v30 = v25[1];
    *v28 = *v25;
    v28[1] = v30;
    v31 = v28 + 2;
    v32 = 4 * a4 - 4;
    do
    {
      HIDWORD(v33) = HIDWORD(v30);
      LODWORD(v33) = HIDWORD(v30);
      v34 = *v4++;
      result = v34;
      v35 = (byte_19B719F84[BYTE5(v30)] | (byte_19B719F84[(v33 >> 8) >> 24] << 24) | (byte_19B719F84[((v33 >> 8) >> 16)] << 16) | (byte_19B719F84[(unsigned __int16)(HIDWORD(v30) >> 8) >> 8] << 8)) ^ v34;
      v26 ^= v35 ^ ((v26 ^ v35) << 32);
      v27 ^= HIDWORD(v26) ^ ((v27 ^ HIDWORD(v26)) << 32);
      *v31 = v26;
      v31[1] = v27;
      v36 = v31 + 2;
      v37 = v32 - 4;
      if (!v37)
        break;
      result = byte_19B719F84[HIBYTE(HIDWORD(v27))];
      v38 = byte_19B719F84[BYTE4(v27)] | ((_DWORD)result << 24) | (byte_19B719F84[BYTE6(v27)] << 16) | (byte_19B719F84[BYTE5(v27)] << 8);
      v29 ^= v38 ^ ((v29 ^ v38) << 32);
      v30 ^= HIDWORD(v29) ^ ((v30 ^ HIDWORD(v29)) << 32);
      *v36 = v29;
      v36[1] = v30;
      v31 = v36 + 2;
      v13 = __OFSUB__(v37, 4);
      v32 = v37 - 4;
    }
    while (!((v32 < 0) ^ v13 | (v32 == 0)));
  }
  else
  {
    v5 = *a1;
    v6 = a1[1];
    *(_QWORD *)a2 = *a1;
    *(_QWORD *)(a2 + 8) = v6;
    v7 = (unint64_t *)(a2 + 16);
    v8 = 4 * a4;
    do
    {
      HIDWORD(v9) = HIDWORD(v6);
      LODWORD(v9) = HIDWORD(v6);
      v11 = *v4++;
      result = v11;
      v12 = (byte_19B719F84[BYTE5(v6)] | (byte_19B719F84[(v9 >> 8) >> 24] << 24) | (byte_19B719F84[((v9 >> 8) >> 16)] << 16) | (byte_19B719F84[(unsigned __int16)(HIDWORD(v6) >> 8) >> 8] << 8)) ^ v11;
      v5 ^= v12 ^ ((v5 ^ v12) << 32);
      v6 ^= HIDWORD(v5) ^ ((v6 ^ HIDWORD(v5)) << 32);
      *v7 = v5;
      v7[1] = v6;
      v7 += 2;
      v13 = __OFSUB__(v8, 4);
      v8 -= 4;
    }
    while (!((v8 < 0) ^ v13 | (v8 == 0)));
  }
  return result;
}

uint64_t sub_19B702650(unint64_t *a1, uint64_t a2)
{
  return sub_19B702460(a1, a2, 4, 10);
}

uint64_t sub_19B702660(unint64_t *a1, uint64_t a2)
{
  return sub_19B702460(a1, a2, 6, 12);
}

uint64_t sub_19B702670(unint64_t *a1, uint64_t a2)
{
  return sub_19B702460(a1, a2, 8, 14);
}

__n128 sub_19B702680(unint64_t *a1, uint64_t a2, int a3, uint64_t a4)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;

  sub_19B702460(a1, a2, a3, a4);
  v4 = (__n128 *)(a2 + 16);
  v5 = a4 - 1;
  do
  {
    --v5;
    _Q0 = *v4;
    __asm { AESIMC          V0.16B, V0.16B }
    *v4++ = result;
  }
  while (!(_NF ^ _VF | _ZF));
  return result;
}

double sub_19B7026C0(unint64_t *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_19B702680(a1, a2, 4, 10).n128_u64[0];
  return result;
}

double sub_19B7026E0(unint64_t *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_19B702680(a1, a2, 6, 12).n128_u64[0];
  return result;
}

double sub_19B702700(unint64_t *a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_19B702680(a1, a2, 8, 14).n128_u64[0];
  return result;
}

uint64_t sub_19B702720(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v8;

  v6 = a2;
  v8 = a3;
  if (a3 > 32)
    v8 = (unint64_t)a3 >> 3;
  switch(v8)
  {
    case 0x10uLL:
      sub_19B702650(a4, v6);
      break;
    case 0x18uLL:
      sub_19B702660(a4, v6);
      break;
    case 0x20uLL:
      sub_19B702670(a4, v6);
      break;
    default:
      return -1;
  }
  return 0;
}

uint64_t sub_19B702790(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v8;

  v6 = a2;
  v8 = a3;
  if (a3 > 32)
    v8 = (unint64_t)a3 >> 3;
  switch(v8)
  {
    case 0x10uLL:
      sub_19B7026C0(a4, v6);
      break;
    case 0x18uLL:
      sub_19B7026E0(a4, v6);
      break;
    case 0x20uLL:
      sub_19B702700(a4, v6);
      break;
    default:
      return -1;
  }
  return 0;
}

uint64_t sub_19B7027FC(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = sub_19B708310();
  for (i = __ROR8__(0x5555555555555555, a2 | (2 * result)); a1; --a1)
  {
    v10 = *a4 ^ *a3;
    *a3 ^= result;
    v11 = *a4 ^ result;
    *a4 = v11;
    v12 = *a3 ^ v10 & 0x5555555555555555;
    v13 = v11 ^ v10 & 0x5555555555555555;
    v14 = v10 & i;
    *a3++ = v12 ^ v14 ^ result;
    *a4++ = v13 ^ v14 ^ result;
  }
  return result;
}

uint64_t sub_19B702894(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t result;

  v8 = sub_19B7076BC(a2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v8);
  v11 = (unint64_t *)sub_19B70E830(a2);
  if (sub_19B70911C(v8, v10, v11, 2uLL))
    result = 0xFFFFFFFFLL;
  else
    result = sub_19B70832C(a1, a2, a3, a4, v10);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19B702938(unsigned __int8 **a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unint64_t v8;

  v8 = 0;
  result = sub_19B702BBC(a1, a2, &v8, 0);
  if ((_DWORD)result)
  {
    v6 = *a1;
    v7 = &(*a1)[v8];
    *a1 = v7;
    *a3 = v6;
    a3[1] = v7;
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
  }
  return result;
}

uint64_t sub_19B702990(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_19B702998(a1, a2, 1);
}

uint64_t sub_19B702998(unsigned __int8 **a1, unint64_t *a2, int a3)
{
  unint64_t v3;
  unsigned __int8 *v4;
  BOOL v5;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t result;
  int v10;

  v4 = *a1;
  v3 = (unint64_t)a1[1];
  if (*a1)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (v5 || (unint64_t)v4 >= v3)
    goto LABEL_10;
  v7 = v4 + 1;
  v8 = *v4;
  if ((char)*v4 < 0)
  {
    switch(*v4)
    {
      case 0x81u:
        if ((uint64_t)(v3 - (_QWORD)v7) >= 1)
        {
          v7 = v4 + 2;
          v10 = (char)v4[1];
          v8 = v10;
          if (!a3 || v10 < 0)
            break;
        }
        goto LABEL_10;
      case 0x82u:
        if ((uint64_t)(v3 - (_QWORD)v7) >= 2)
        {
          v7 = v4 + 3;
          v8 = __rev16(*(unsigned __int16 *)(v4 + 1));
          if (!a3 || v8 >= 0x100)
            break;
        }
        goto LABEL_10;
      case 0x83u:
        if ((uint64_t)(v3 - (_QWORD)v7) >= 3)
        {
          v7 = v4 + 4;
          v8 = ((unint64_t)v4[1] << 16) | ((unint64_t)v4[2] << 8) | v4[3];
          if (!a3 || v8 >= 0x10000)
            break;
        }
        goto LABEL_10;
      case 0x84u:
        if ((uint64_t)(v3 - (_QWORD)v7) >= 4)
        {
          v7 = v4 + 5;
          v8 = bswap32(*(_DWORD *)(v4 + 1));
          if (!a3 || v8 >> 24)
            break;
        }
        goto LABEL_10;
      default:
        goto LABEL_10;
    }
  }
  if (v3 - (unint64_t)v7 < v8)
  {
LABEL_10:
    result = 0;
    *a2 = 0;
  }
  else
  {
    *a2 = v8;
    *a1 = v7;
    return 1;
  }
  return result;
}

uint64_t sub_19B702AB4(unsigned __int8 **a1, unint64_t *a2)
{
  return sub_19B702998(a1, a2, 0);
}

uint64_t sub_19B702ABC(unsigned __int8 **a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  unsigned __int8 *v8;
  unsigned __int8 *v9;

  v8 = 0;
  v9 = 0;
  result = sub_19B702B34(a1, &v8);
  if ((_DWORD)result)
  {
    result = sub_19B702CA8(&v8, a2, a3);
    if ((_DWORD)result)
    {
      result = sub_19B702CA8(&v8, a2, a4);
      if ((_DWORD)result)
        return v8 == v9;
    }
  }
  return result;
}

uint64_t sub_19B702B34(unsigned __int8 **a1, unsigned __int8 **a2)
{
  return sub_19B702938(a1, 0x2000000000000010, a2);
}

uint64_t sub_19B702B44(unsigned __int8 **a1, unint64_t *a2)
{
  unsigned __int8 *v2;
  unint64_t v3;
  BOOL v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = (unint64_t)a1[1];
  if (*a1)
    v4 = (unint64_t)v2 >= v3;
  else
    v4 = 1;
  if (v4)
    return 0;
  v8 = *v2;
  v6 = v2 + 1;
  v7 = v8;
  v9 = v8 & 0x1F;
  if (v9 == 31)
  {
    v9 = 0;
    while (1)
    {
      v5 = 0;
      if ((unint64_t)v6 >= v3)
        break;
      v10 = v9;
      if (v9 >> 57)
        break;
      v11 = *v6++;
      v9 = v11 & 0x7F | (v9 << 7);
      if ((v11 & 0x80) == 0)
      {
        if (v10 >> 54)
          return 0;
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    *a2 = v9 | (v7 >> 5 << 61);
    *a1 = v6;
    return 1;
  }
  return v5;
}

uint64_t sub_19B702BBC(unsigned __int8 **a1, uint64_t a2, unint64_t *a3, int a4)
{
  int v8;
  uint64_t result;
  unint64_t v10;

  v10 = 0;
  *a3 = 0;
  v8 = sub_19B702B44(a1, &v10);
  result = 0;
  if (v8 && v10 == a2)
  {
    if (a4)
      return sub_19B702990(a1, a3);
    else
      return sub_19B702AB4(a1, a3);
  }
  return result;
}

BOOL sub_19B702C34(unsigned __int8 **a1, unint64_t a2, _QWORD *a3)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == v4 || (char)*v3 < 0)
    goto LABEL_7;
  if (!*v3)
  {
    if (++v3 == v4)
    {
      v3 = a1[1];
      goto LABEL_4;
    }
    if (((char)*v3 & 0x80000000) == 0)
    {
LABEL_7:
      v5 = 0;
      *a1 = 0;
      a1[1] = 0;
      return v5;
    }
  }
LABEL_4:
  *a1 = v3;
  return sub_19B708AEC(a2, a3, v4 - v3, v3) == 0;
}

uint64_t sub_19B702CA8(unsigned __int8 **a1, unint64_t a2, _QWORD *a3)
{
  uint64_t result;
  unsigned __int8 *v6[2];

  v6[0] = 0;
  v6[1] = 0;
  result = sub_19B702938(a1, 2, v6);
  if ((_DWORD)result)
    return sub_19B702C34(v6, a2, a3);
  return result;
}

uint64_t sub_19B702CF4(uint64_t result, uint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (result)
  {
    v2 = result;
    result = 0;
    v3 = 0;
    do
    {
      v4 = *a2++;
      ++v3;
      if (v4)
        result = v3;
    }
    while (v3 < v2);
  }
  return result;
}

void *sub_19B702D20(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;

  v6 = sub_19B7076BC(a2);
  return sub_19B708C08(v6, a3, a4);
}

uint64_t sub_19B702D50(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 56))();
}

void sub_19B702D5C()
{
  sub_19B708634();
}

uint64_t sub_19B702D68(uint64_t result)
{
  if ((_DWORD)result)
    sub_19B708634();
  return result;
}

unint64_t sub_19B702D80(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 v7;
  uint64_t *v8;

  v6 = sub_19B7076BC(a1);
  v7 = sub_19B708A68(v6, a3) != 0;
  v8 = (uint64_t *)sub_19B70E830(a1);
  return sub_19B70C968(v6, v7, a2, (unint64_t *)a3, v8);
}

unint64_t sub_19B702DE8(uint64_t a1, unsigned __int8 a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;

  v8 = sub_19B7076BC(a1);
  v9 = (sub_19B708A68(v8, a4) != 0) & a2;
  v10 = (uint64_t *)sub_19B70E830(a1);
  return sub_19B70C968(v8, v9, a3, (unint64_t *)a4, v10);
}

void *sub_19B702E58(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6;

  v6 = sub_19B7076BC(a2);
  return sub_19B708C08(v6, a3, a4);
}

uint64_t sub_19B702E88(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 64))();
}

unint64_t sub_19B702EA0(uint64_t a1, _QWORD *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  BOOL v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int128 v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = 0;
  if ((a1 & 1) != 0)
  {
    v5 = *a3++;
    v4 = (v5 * (unsigned __int128)a4) >> 64;
    *a2++ = v5 * a4;
    --a1;
  }
  if ((a1 & 2) != 0)
  {
    v6 = *a3;
    v7 = a3[1];
    a3 += 2;
    v8 = v6 * (unsigned __int128)a4 + __PAIR128__(v7 * a4, v4);
    v4 = (__CFADD__(__CFADD__(v6 * a4, v4), (v6 * (unsigned __int128)a4) >> 64) | __CFADD__(v7 * a4, *((_QWORD *)&v8 + 1)))+ ((v7 * (unsigned __int128)a4) >> 64);
    *(_OWORD *)a2 = v8;
    a2 += 2;
    a1 -= 2;
  }
  while (1)
  {
    v9 = a1 < 4;
    a1 -= 4;
    if (v9)
      break;
    v11 = *a3;
    v12 = a3[1];
    v10 = a3 + 2;
    v14 = *v10;
    v15 = v10[1];
    a3 = v10 + 2;
    v16 = (v12 * (unsigned __int128)a4) >> 64;
    v17 = __CFADD__(__CFADD__(v11 * a4, v4), (v11 * (unsigned __int128)a4) >> 64);
    v13 = v11 * (unsigned __int128)a4 + __PAIR128__(v12 * a4, v4);
    *(_OWORD *)a2 = v13;
    v18 = a2 + 2;
    v19 = (v14 * (unsigned __int128)a4) >> 64;
    v20 = v16 + (v17 | __CFADD__(v12 * a4, *((_QWORD *)&v13 + 1))) + v14 * a4;
    v22 = __CFADD__(v17 | __CFADD__(v12 * a4, *((_QWORD *)&v13 + 1)), v14 * a4) | __CFADD__(v16, (v17 | __CFADD__(v12 * a4, *((_QWORD *)&v13 + 1))) + v14 * a4);
    v17 = __CFADD__(v22, v19);
    v21 = v22 + v19;
    v4 = (v17 | __CFADD__(v15 * a4, v21)) + ((v15 * (unsigned __int128)a4) >> 64);
    *v18 = v20;
    v18[1] = v15 * a4 + v21;
    a2 = v18 + 2;
  }
  return v4;
}

_BYTE *sub_19B702F48(uint64_t a1, size_t a2, char *a3, uint64_t a4)
{
  char v8;
  size_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;

  v8 = 0;
  v18 = *MEMORY[0x1E0C80C00];
  HIBYTE(v17) = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  HIBYTE(v17) = v8;
  v14 = (*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 19) & 0xFFFFFFFFFFFFFFF8;
  v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v15, v14);
  sub_19B703248(a1, v15);
  sub_19B703340(a1, v15, a2, a3);
  (*(void (**)(uint64_t, char *, uint64_t))(a1 + 56))(a1, v15, a4);
  sub_19B70D5B8(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v15);
  return sub_19B70EAB4((_BYTE *)&v17 + 7);
}

uint64_t sub_19B70306C(uint64_t a1, const void *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  size_t v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t)a2 + v7 + 8;
  if (v6 <= *(unsigned int *)(v8 + v6))
    *(_DWORD *)(v8 + v6) = 0;
  v9 = (v7 + v6 + 19) & 0xFFFFFFFFFFFFFFF8;
  v10 = (_QWORD *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v10, v9);
  memcpy(v10, a2, v7 + v6 + 12);
  v11 = (char *)v10 + v7;
  v12 = (uint64_t)v10 + v7 + 8;
  v13 = (char *)(v12 + v6);
  v14 = *(unsigned int *)(v12 + v6);
  *v10 += (8 * v14);
  *(_DWORD *)(v12 + v6) = v14 + 1;
  *(_BYTE *)(v12 + v14) = 0x80;
  v15 = *(unsigned int *)(v12 + v6);
  if (v15 < 0x39)
  {
    if (v15 == 56)
      goto LABEL_9;
  }
  else
  {
    if (v15 <= 0x3F)
    {
      do
      {
        *(_DWORD *)v13 = v15 + 1;
        *(_BYTE *)(v12 + v15) = 0;
        v15 = *(unsigned int *)v13;
      }
      while (v15 < 0x40);
    }
    (*(void (**)(_QWORD *, uint64_t))(a1 + 48))(v10 + 1, 1);
    v15 = 0;
    v11 = (char *)v10 + *(_QWORD *)(a1 + 8);
    v12 = (uint64_t)(v11 + 8);
    v13 = &v11[*(_QWORD *)(a1 + 16) + 8];
    *(_DWORD *)v13 = 0;
  }
  do
  {
    *(_DWORD *)v13 = v15 + 1;
    *(_BYTE *)(v12 + v15) = 0;
    v15 = *(unsigned int *)v13;
  }
  while (v15 < 0x38);
LABEL_9:
  *((_QWORD *)v11 + 8) = bswap64(*v10);
  (*(void (**)(_QWORD *, uint64_t))(a1 + 48))(v10 + 1, 1);
  if (*(_QWORD *)a1 >= 4uLL)
  {
    v16 = 0;
    v17 = 0;
    v18 = 1;
    do
    {
      *(_DWORD *)(a3 + v16) = bswap32(*((_DWORD *)v10 + v17 + 2));
      v17 = v18++;
      v16 += 4;
    }
    while (v17 < *(_QWORD *)a1 >> 2);
  }
  return sub_19B70D5B8(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v10);
}

_BYTE *sub_19B703248(uint64_t a1, _QWORD *a2)
{
  char v4;
  char v11;

  v4 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v11 = v4;
  memcpy(a2 + 1, *(const void **)(a1 + 40), *(_QWORD *)(a1 + 8));
  *a2 = 0;
  *(_DWORD *)((char *)a2 + *(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 8) = 0;
  return sub_19B70EAB4(&v11);
}

unint64_t sub_19B7032D0(uint64_t *a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = (unint64_t)(sub_19B7076C4(*a1) + 7) >> 3;
  sub_19B70EAB4(&v9);
  return v7;
}

_BYTE *sub_19B703340(uint64_t a1, _QWORD *a2, size_t a3, char *__src)
{
  size_t v5;
  char v8;
  unint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  size_t v20;
  size_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  char v29;

  v5 = a3;
  v8 = 0;
  v29 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v29 = v8;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (uint64_t)a2 + *(_QWORD *)(a1 + 8) + 8;
  if (v13 <= *(unsigned int *)(v14 + v13))
    *(_DWORD *)(v14 + v13) = 0;
  if (a3)
  {
    v15 = a2 + 1;
    do
    {
      v16 = *(_QWORD *)(a1 + 16);
      v17 = (char *)v15 + *(_QWORD *)(a1 + 8);
      v18 = *(unsigned int *)&v17[v16];
      if (v5 > v16 && (_DWORD)v18 == 0)
      {
        if (v16 == 128)
        {
          v27 = v5 >> 7;
          v21 = v5 & 0xFFFFFFFFFFFFFF80;
        }
        else if (v16 == 64)
        {
          v27 = v5 >> 6;
          v21 = v5 & 0xFFFFFFFFFFFFFFC0;
        }
        else
        {
          v27 = v5 / v16;
          v21 = v5 / v16 * v16;
        }
        (*(void (**)(_QWORD *, size_t, char *))(a1 + 48))(a2 + 1, v27, __src);
        *a2 += 8 * v21;
      }
      else
      {
        v20 = v16 - v18;
        if (v20 >= v5)
          v21 = v5;
        else
          v21 = v20;
        memcpy(&v17[v18], __src, v21);
        v22 = *(_QWORD *)(a1 + 16);
        v23 = (char *)v15 + *(_QWORD *)(a1 + 8);
        v24 = (*(_DWORD *)&v23[v22] + v21);
        *(_DWORD *)&v23[v22] = v24;
        if (v22 == v24)
        {
          (*(void (**)(_QWORD *, uint64_t))(a1 + 48))(a2 + 1, 1);
          v25 = *(_QWORD *)(a1 + 16);
          v26 = (char *)v15 + *(_QWORD *)(a1 + 8);
          *a2 += (8 * *(_DWORD *)&v26[v25]);
          *(_DWORD *)&v26[v25] = 0;
        }
      }
      __src += v21;
      v5 -= v21;
    }
    while (v5);
  }
  return sub_19B70EAB4(&v29);
}

uint64_t sub_19B7034BC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  if (sub_19B707EF4(a2, a4))
    return 4294967289;
  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v9 = sub_19B7076B0(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B702E88(a1, (uint64_t)a2);
  sub_19B702E88(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v8;
  return v9;
}

uint64_t sub_19B7035F0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v6 = *a2;
  if (sub_19B707EF4(a2, a4))
    return 4294967289;
  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_19B70E824(a1, (uint64_t)a2);
  v9 = sub_19B7076B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B702E88(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v8;
  return v9;
}

void *sub_19B7036C4()
{
  return &unk_1E3BD16D0;
}

uint64_t sub_19B7036D0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v7;
  _BOOL8 v8;
  _BOOL8 v9;
  unint64_t *v10;
  BOOL v11;
  uint64_t v13[3];
  uint64_t v14[3];
  uint64_t v15[3];
  uint64_t v16[4];

  v16[3] = *MEMORY[0x1E0C80C00];
  v7 = a4[4];
  v16[0] = a4[3];
  v16[1] = v16[0];
  v16[2] = 0;
  v15[0] = 0;
  v15[1] = v7;
  v15[2] = v7;
  v14[0] = a4[5];
  v14[1] = v14[0];
  v14[2] = v14[0];
  v8 = sub_19B70814C(a1, 3, a3, a4, v16);
  v9 = sub_19B70814C(a1, 3, a3, a3, v15) + v8;
  v13[0] = v9 + sub_19B70814C(a1, 3, a3, a3, v14);
  v13[1] = v13[0];
  v13[2] = 0;
  LOBYTE(v9) = sub_19B70814C(a1, 3, v13, a3, v13);
  v10 = (unint64_t *)sub_19B70E830(a2);
  v11 = sub_19B709054(a1, 3, a3, v13, v10);
  return sub_19B7082B0(3, !v11 | v9, a3, a3, v13);
}

unint64_t sub_19B7037F8(uint64_t a1, unint64_t a2, _QWORD *a3, unint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  __int128 v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * a2);
  result = sub_19B708A64(a2 - 1, (_QWORD *)(v9 + 8), a4 + 1, *a4);
  *(_QWORD *)(v9 + 8 * a2) = result;
  v11 = *a4;
  *a3 = *a4 * *a4;
  v12 = *(_QWORD *)(v9 + 8);
  if (__CFADD__((unsigned __int128)(v11 * v11) >> 64, 2 * v12))
    v13 = (v12 >> 63) + 1;
  else
    v13 = v12 >> 63;
  a3[1] = (__PAIR128__(2, v11) * v11) >> 64;
  v14 = a2 - 2;
  if (a2 >= 2)
  {
    v15 = 0;
    v16 = v9 + 8 * a2 + 8;
    v17 = (unint64_t *)(v9 + 24);
    v18 = a3 + 3;
    do
    {
      result = sub_19B706F14(v14, v17, &a4[v15 + 2], a4[v15 + 1]);
      *(_QWORD *)(v16 + v15 * 8) = result;
      v19 = a4[v15 + 1];
      v20 = (v19 * (unsigned __int128)v19) >> 64;
      v21 = v19 * v19;
      v22 = __CFADD__(v21, v13);
      v23 = v21 + v13;
      if (v22)
        ++v20;
      v24 = *(v17 - 1);
      *(v18 - 1) = v23 + 2 * v24;
      v25 = *v17;
      v17 += 2;
      v26 = v25 >> 63;
      v22 = __CFADD__(v20, 2 * v25);
      v27 = v20 + 2 * v25;
      if (v22)
        v28 = v26 + 1;
      else
        v28 = v26;
      v22 = __CFADD__(__CFADD__(v23, 2 * v24), v27) | __CFADD__(v24 >> 63, __CFADD__(v23, 2 * v24) + v27);
      v29 = (v24 >> 63) + __CFADD__(v23, 2 * v24) + v27;
      if (v22)
        v13 = v28 + 1;
      else
        v13 = v28;
      *v18 = v29;
      v18 += 2;
      ++v15;
      --v14;
    }
    while (v14 != -1);
  }
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_19B70391C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  return sub_19B707824(a1, a2, a3, a4, 0x60uLL, qword_19B71A088, &unk_19B71A0A8);
}

uint64_t sub_19B703934(uint64_t a1, uint64_t a2)
{
  return sub_19B70E5B0(a1, a2);
}

uint64_t sub_19B703948(uint64_t a1, uint64_t a2)
{
  return sub_19B70E5B0(a1, a2);
}

uint64_t sub_19B70395C(uint64_t a1, uint64_t a2)
{
  return sub_19B70E5B0(a1, a2);
}

void *sub_19B703970()
{
  return &unk_1E3BD17B8;
}

uint64_t sub_19B70397C(uint64_t a1, uint64_t a2, uint64_t *a3, int8x16_t *a4)
{
  uint64_t v8;
  unint64_t *v9;
  char v10;
  int8x16_t v12[4];
  uint64_t v13;
  _OWORD v14[4];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v15 = 0;
  memset(v14, 0, sizeof(v14));
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  sub_19B708C1C(9, v12, a4 + 4, 9);
  v13 += a4[4].i64[0] & 0x1FF;
  v8 = sub_19B70814C(a1, 8, v12, v12[0].i64, a4->i64);
  v13 += v8;
  v9 = (unint64_t *)sub_19B70E830(a2);
  v10 = sub_19B709054(a1, 9, v14, v12[0].i64, v9);
  return sub_19B7082B0(9, v10, a3, v12[0].i64, (uint64_t *)v14);
}

uint64_t sub_19B703A80(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  result = sub_19B70E8CC(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_19B703D08(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t result;
  uint64_t v14;

  v9 = *a2;
  v14 = *(_QWORD *)(a1 + 16);
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  if (a6)
    sub_19B70D868(a1, (uint64_t)a2);
  else
    sub_19B70E8CC(a1, (uint64_t)a2);
  if (sub_19B708A68(v9, v10) || sub_19B708A68(v9, v11))
  {
    if (sub_19B708A68(v9, v10) || !sub_19B708A68(v9, v11))
    {
      sub_19B70D868(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      sub_19B70D868(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      sub_19B70E5B0(a1, (uint64_t)a2);
      sub_19B70E824(a1, (uint64_t)a2);
      sub_19B70E5B0(a1, (uint64_t)a2);
      sub_19B70E5B0(a1, (uint64_t)a2);
      sub_19B70E824(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      sub_19B70E5B0(a1, (uint64_t)a2);
      sub_19B70E5B0(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      result = sub_19B70DC40(a1, (uint64_t)a2, (int8x16_t *)&a3[v9], &a3[v9]);
    }
    else
    {
      sub_19B70C914(v9, a3, 1);
      sub_19B702D50(a1, (uint64_t)a2);
      sub_19B708C08(v9, &a3[v9], a3);
      result = sub_19B70D5B8(8 * v9, &a3[2 * v9]);
    }
  }
  else
  {
    result = sub_19B703A80(a1, a2);
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_19B704098(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *a2;
  if (sub_19B707EF4(a2, a4))
  {
    sub_19B708C08(v11, a3, a5);
    sub_19B708C08(v11, &a3[8 * *a2], &a5[8 * *a2]);
    result = (uint64_t)sub_19B708C08(v11, &a3[16 * *a2], &a5[16 * *a2]);
  }
  else
  {
    result = sub_19B703D08(a1, a2, a3, a4, (uint64_t)a5, 0);
  }
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19B704150(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  void *v10;
  uint64_t *v11;
  BOOL v12;
  uint64_t *v13;
  char v14;
  uint64_t result;
  uint64_t v16;

  v6 = sub_19B7076BC((uint64_t)a2);
  v16 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_19B70483C(a1, (uint64_t)a2);
  sub_19B70483C(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  v7 = sub_19B7076BC((uint64_t)a2);
  v8 = *a2;
  v9 = &a3[*a2];
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  sub_19B708C08(v7, v10, v9);
  sub_19B702E88(a1, (uint64_t)a2);
  v12 = sub_19B708A68(v7, v11) == 1 && *v11 == 1;
  v13 = &a3[2 * v8];
  if (sub_19B708A68(v7, a3))
    v12 = 0;
  v14 = v12 & (sub_19B708A68(v7, v13) == 0);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B7082B0(v7, v14, a3, (uint64_t *)v10, a3);
  result = sub_19B7082B0(v7, v14, v9, (uint64_t *)v10, v9);
  *(_QWORD *)(a1 + 16) = v16;
  return result;
}

uint64_t sub_19B70483C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = sub_19B7076BC(a2);
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19B70E5B0(a1, a2);
  sub_19B70E824(a1, a2);
  result = sub_19B70E5B0(a1, a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_19B7048F0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 88))();
}

uint64_t sub_19B7048FC(uint64_t a1, uint64_t *a2, char *a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = *a2;
  if (sub_19B707EF4(a2, a4))
  {
    sub_19B708C08(v11, a3, a5);
    sub_19B702D80((uint64_t)a2, (uint64_t *)&a3[8 * *a2], (uint64_t *)&a5[8 * *a2]);
    result = (uint64_t)sub_19B708C08(v11, &a3[16 * *a2], &a5[16 * *a2]);
  }
  else
  {
    result = sub_19B703D08(a1, a2, a3, a4, (uint64_t)a5, 1);
  }
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19B7049B4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;

  v8 = *a2;
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * *a2);
  sub_19B708C08(v8, v10, a5);
  sub_19B702D80((uint64_t)a2, (uint64_t *)&v10[8 * *a2], (uint64_t *)&a5[8 * *a2]);
  sub_19B708C08(v8, &v10[16 * *a2], &a5[16 * *a2]);
  result = sub_19B7048F0(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

void *sub_19B704A60(uint64_t a1)
{
  char v1;
  void *v7;
  void *v8;
  char v10;

  v1 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v7 = 0;
  v10 = v1;
  if (a1 <= 255)
  {
    if (a1 == 192)
    {
      v8 = sub_19B7036C4();
      goto LABEL_16;
    }
    if (a1 == 224)
    {
      v8 = sub_19B703944();
      goto LABEL_16;
    }
  }
  else
  {
    switch(a1)
    {
      case 256:
        v8 = sub_19B703958();
        goto LABEL_16;
      case 384:
        v8 = sub_19B70396C();
        goto LABEL_16;
      case 521:
        v8 = sub_19B703970();
LABEL_16:
        v7 = v8;
        break;
    }
  }
  sub_19B70EAB4(&v10);
  return v7;
}

uint64_t sub_19B704B1C(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = 1;
  if (a1 <= 255)
  {
    if (a1 != 192 && a1 != 224)
      goto LABEL_12;
  }
  else if (a1 != 256 && a1 != 384 && a1 != 521)
  {
LABEL_12:
    v7 = 0;
  }
  sub_19B70EAB4(&v9);
  return v7;
}

int8x16_t *sub_19B704BF0(int8x16_t *a1, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5, uint64_t a6)
{
  int v6;
  BOOL v7;
  BOOL v8;
  uint64_t v9;

  v6 = a5[15].i32[0];
  v8 = __OFSUB__(a3, 128);
  v7 = a3 - 128 < 0;
  v9 = a3 - 128;
  if (v7 != v8)
    return sub_19B70508C(a1, a2, v9, a4, a5, a6, v6);
  else
    return (int8x16_t *)sub_19B704C40(a1, a2, v9, (uint64_t)a4, a5, a6, v6);
}

uint64_t sub_19B704C40(_OWORD *a1, int8x16_t *a2, uint64_t a3, uint64_t a4, int8x16_t *a5, uint64_t a6, int a7)
{
  int64x2_t v7;
  int64x2_t v8;
  int8x16_t v167;
  _OWORD *v234;
  int8x16_t v235;
  int8x16_t v236;
  int8x16_t v237;
  int8x16_t v238;
  int8x16_t v243;
  int8x16_t v244;
  int8x16_t v245;
  int8x16_t v246;
  int8x16_t v247;
  int8x16_t v248;
  int8x16_t v249;
  int8x16_t v250;
  int8x16_t *v255;

  do
  {
    v8 = vaddq_s64(v7, vaddq_s64(v7, vaddq_s64(v7, vaddq_s64(v7, v8))));
    _Q20 = *a5;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[1];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[2];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[3];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[4];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[5];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[6];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[7];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[8];
    __asm
    {
      AESE            V22.16B, V20.16B
      AESMC           V22.16B, V22.16B
      AESE            V23.16B, V20.16B
      AESMC           V23.16B, V23.16B
      AESE            V24.16B, V20.16B
      AESMC           V24.16B, V24.16B
      AESE            V25.16B, V20.16B
      AESMC           V25.16B, V25.16B
      AESE            V26.16B, V20.16B
      AESMC           V26.16B, V26.16B
      AESE            V27.16B, V20.16B
      AESMC           V27.16B, V27.16B
      AESE            V28.16B, V20.16B
      AESMC           V28.16B, V28.16B
      AESE            V29.16B, V20.16B
      AESMC           V29.16B, V29.16B
    }
    _Q20 = a5[9];
    v167 = a5[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a5[10];
      __asm
      {
        AESE            V22.16B, V20.16B
        AESMC           V22.16B, V22.16B
        AESE            V23.16B, V20.16B
        AESMC           V23.16B, V23.16B
        AESE            V24.16B, V20.16B
        AESMC           V24.16B, V24.16B
        AESE            V25.16B, V20.16B
        AESMC           V25.16B, V25.16B
        AESE            V26.16B, V20.16B
        AESMC           V26.16B, V26.16B
        AESE            V27.16B, V20.16B
        AESMC           V27.16B, V27.16B
        AESE            V28.16B, V20.16B
        AESMC           V28.16B, V28.16B
        AESE            V29.16B, V20.16B
        AESMC           V29.16B, V29.16B
      }
      _Q20 = a5[11];
      v167 = a5[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a5[12];
        __asm
        {
          AESE            V22.16B, V20.16B
          AESMC           V22.16B, V22.16B
          AESE            V23.16B, V20.16B
          AESMC           V23.16B, V23.16B
          AESE            V24.16B, V20.16B
          AESMC           V24.16B, V24.16B
          AESE            V25.16B, V20.16B
          AESMC           V25.16B, V25.16B
          AESE            V26.16B, V20.16B
          AESMC           V26.16B, V26.16B
          AESE            V27.16B, V20.16B
          AESMC           V27.16B, V27.16B
          AESE            V28.16B, V20.16B
          AESMC           V28.16B, V28.16B
          AESE            V29.16B, V20.16B
          AESMC           V29.16B, V29.16B
        }
        _Q20 = a5[13];
        v167 = a5[14];
      }
    }
    v235 = *(int8x16_t *)a1;
    v236 = *((int8x16_t *)a1 + 1);
    v237 = *((int8x16_t *)a1 + 2);
    v238 = *((int8x16_t *)a1 + 3);
    v234 = a1 + 4;
    __asm
    {
      AESE            V22.16B, V20.16B
      AESE            V23.16B, V20.16B
      AESE            V24.16B, V20.16B
      AESE            V25.16B, V20.16B
    }
    v243 = veorq_s8(v235, veorq_s8(_Q22, v167));
    v244 = veorq_s8(v236, veorq_s8(_Q23, v167));
    v245 = veorq_s8(v237, veorq_s8(_Q24, v167));
    v246 = veorq_s8(v238, veorq_s8(_Q25, v167));
    v247 = *(int8x16_t *)v234;
    v248 = *((int8x16_t *)v234 + 1);
    v249 = *((int8x16_t *)v234 + 2);
    v250 = *((int8x16_t *)v234 + 3);
    a1 = v234 + 4;
    __asm
    {
      AESE            V26.16B, V20.16B
      AESE            V27.16B, V20.16B
      AESE            V28.16B, V20.16B
      AESE            V29.16B, V20.16B
    }
    *a2 = v243;
    a2[1] = v244;
    a2[2] = v245;
    a2[3] = v246;
    v255 = a2 + 4;
    *v255 = veorq_s8(v247, veorq_s8(_Q26, v167));
    v255[1] = veorq_s8(v248, veorq_s8(_Q27, v167));
    v255[2] = veorq_s8(v249, veorq_s8(_Q28, v167));
    v255[3] = veorq_s8(v250, veorq_s8(_Q29, v167));
    a2 = v255 + 4;
    _VF = __OFSUB__(a3, 128);
    _NF = a3 - 128 < 0;
    a3 -= 128;
  }
  while (_NF == _VF);
  return sub_19B70508C();
}

int8x16_t *sub_19B70508C(int8x16_t *result, int8x16_t *a2, uint64_t a3, int8x16_t *a4, int8x16_t *a5, uint64_t a6, int a7)
{
  int64x2_t v7;
  int8x16_t v8;
  int64x2_t v9;
  BOOL v10;
  uint64_t i;
  int8x16_t v54;

  v10 = a3 < -112;
  for (i = a3 + 112; !v10; i -= 16)
  {
    _Q4 = *a5;
    _Q5 = a5[1];
    _Q6 = a5[2];
    v9 = vaddq_s64(v7, v9);
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a5[3];
    _Q5 = a5[4];
    _Q6 = a5[5];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q4 = a5[6];
    _Q5 = a5[7];
    _Q6 = a5[8];
    __asm
    {
      AESE            V7.16B, V4.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V5.16B
      AESMC           V7.16B, V7.16B
      AESE            V7.16B, V6.16B
      AESMC           V7.16B, V7.16B
    }
    _Q20 = a5[9];
    _Q21 = a5[10];
    if (a7 > 160)
    {
      __asm
      {
        AESE            V7.16B, V20.16B
        AESMC           V7.16B, V7.16B
        AESE            V7.16B, V21.16B
        AESMC           V7.16B, V7.16B
      }
      _Q20 = a5[11];
      _Q21 = a5[12];
      if (a7 > 192)
      {
        __asm
        {
          AESE            V7.16B, V20.16B
          AESMC           V7.16B, V7.16B
          AESE            V7.16B, V21.16B
          AESMC           V7.16B, V7.16B
        }
        _Q20 = a5[13];
        _Q21 = a5[14];
      }
    }
    __asm { AESE            V7.16B, V20.16B }
    v54 = *result++;
    *a2++ = veorq_s8(v54, veorq_s8(_Q7, _Q21));
    v10 = i < 16;
  }
  *a4 = vqtbl1q_s8((int8x16_t)v9, v8);
  return result;
}

uint64_t sub_19B705158(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v4;
  uint64_t v10;
  char v12;

  v4 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v12 = v4;
  v10 = sub_19B706E30(a1, a2, a3, a4);
  sub_19B70EAB4(&v12);
  return v10;
}

uint64_t sub_19B7051C0(uint64_t a1, _QWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v7);
  if ((sub_19B7085CC(*a2, a4, a2 + 3) & 0x80000000) != 0)
  {
    sub_19B702D50(a1, (uint64_t)a2);
    sub_19B70E824(a1, (uint64_t)a2);
    sub_19B70E5B0(a1, (uint64_t)a2);
    sub_19B70D868(a1, (uint64_t)a2);
    sub_19B70D868(a1, (uint64_t)a2);
    sub_19B70E8CC(a1, (uint64_t)a2);
    sub_19B70D868(a1, (uint64_t)a2);
    result = sub_19B707D40(a1, (uint64_t)a2);
    if (!(_DWORD)result)
    {
      sub_19B702E88(a1, (uint64_t)a2);
      sub_19B702E88(a1, (uint64_t)a2);
      result = 0;
    }
  }
  else
  {
    result = 4294967289;
  }
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_19B70533C(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, int a8, unsigned __int8 *a9)
{
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  int v24;
  uint64_t v26;
  char *v27;
  unsigned int v29;

  *(_QWORD *)a9 = 0;
  *((_QWORD *)a9 + 1) = 0;
  v16 = a2 + 3;
  v17 = *a2;
  v18 = sub_19B70914C(*a2, a2 + 3);
  v19 = v18 >= a6;
  if (a8 != 2110636126)
    v19 = v18 == a6;
  if (v19)
  {
    v26 = a3;
    v27 = a5;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v17);
    v22 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v17);
    sub_19B70D5B8(8 * (*(_QWORD *)(a1 + 16) - v20), (void *)(*(_QWORD *)a1 + 8 * v20));
    v23 = sub_19B70914C(v17, v16);
    if (sub_19B708AEC(v17, v21, a6, a7))
    {
      v24 = -23;
    }
    else
    {
      v29 = sub_19B709D70(a1, (uint64_t *)a2, v22, v21);
      if (v29)
      {
LABEL_9:
        *(_QWORD *)(a1 + 16) = v20;
        return v29;
      }
      sub_19B70C924(v17, (unint64_t *)v22);
      if (sub_19B709664(v23, (_BYTE *)&v22[v17] - v23, a4, v27, v26, a9))
        v24 = -146;
      else
        v24 = a9[8] ^ a9[4] ^ a9[3] ^ a9[13] ^ 0x89 ^ a9[15] ^ a9[10] ^ a9[1] ^ a9[11] ^ a9[14] ^ a9[6] ^ a9[2] ^ a9[9] ^ a9[12] ^ *a9 ^ a9[7] ^ a9[5];
    }
    v29 = v24;
    goto LABEL_9;
  }
  return 4294967273;
}

uint64_t sub_19B7055C8(uint64_t a1, uint64_t *a2, uint64_t *a3, _BYTE *a4, unint64_t a5, uint64_t *a6)
{
  _QWORD *v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int8x16_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  int8x16_t *v27;
  unint64_t v28;
  char v29;
  unsigned __int8 v30;
  unint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t *v36;
  unsigned __int8 v37;
  BOOL v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  _QWORD *__dst;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  _BYTE *__src;
  uint64_t v53;
  _QWORD *v54;
  _BOOL8 v55;
  uint64_t v56;
  unint64_t *v57;

  v12 = a2 + 4;
  if (sub_19B7076C4((uint64_t)&a2[5 * *a2 + 4]) < a5)
    return 4294967289;
  v51 = a3;
  __src = a4;
  v54 = v12;
  v14 = *a2;
  v15 = (a5 + 63) >> 6;
  v53 = *(_QWORD *)(a1 + 16);
  v16 = 3 * *a2;
  v17 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v16);
  v18 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v14);
  v55 = sub_19B708A68(v14, a6) == 0;
  if (a5 + 63 >= 0x40)
    sub_19B708C08((a5 + 63) >> 6, v18, a4);
  sub_19B70C90C(v14 - v15, (char *)v18 + 8 * v15);
  v18->i64[v15 - 1] &= 0xFFFFFFFFFFFFFFFFLL >> -(char)a5;
  v50 = (a5 + 63) >> 6;
  v57 = (unint64_t *)v18;
  sub_19B708C1C(v50, v18, v18, v55);
  sub_19B703A80(a1, a2);
  sub_19B7082B0(3 * v14, !v55, v17, a6, v17);
  if (!sub_19B708A68(v14, v17))
  {
LABEL_13:
    result = 0xFFFFFFFFLL;
    goto LABEL_16;
  }
  if (sub_19B7076C4((uint64_t)&v54[5 * *a2]) >= a5)
  {
    v19 = *a2;
    if (sub_19B708A68(*a2, v17))
    {
      v47 = v16;
      v45 = *(_QWORD *)(a1 + 16);
      v20 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      v49 = v19;
      v21 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      v56 = 2 * v19;
      v22 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v19);
      v23 = *a2;
      v42 = *(_QWORD *)(a1 + 16);
      __dst = (_QWORD *)v22;
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v23);
      (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v23);
      sub_19B70E824(a1, (uint64_t)a2);
      sub_19B70D868(a1, (uint64_t)a2);
      sub_19B70D868(a1, (uint64_t)a2);
      sub_19B70E824(a1, (uint64_t)a2);
      sub_19B70E824(a1, (uint64_t)a2);
      sub_19B70D868(a1, (uint64_t)a2);
      sub_19B70D868(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      sub_19B70E824(a1, (uint64_t)a2);
      sub_19B70D868(a1, (uint64_t)a2);
      sub_19B70D868(a1, (uint64_t)a2);
      v46 = v17;
      sub_19B70E5B0(a1, (uint64_t)a2);
      sub_19B70E824(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      sub_19B70E8CC(a1, (uint64_t)a2);
      v24 = a1;
      v25 = a1;
      v26 = (uint64_t *)v20;
      sub_19B70E8CC(v24, (uint64_t)a2);
      sub_19B70E5B0(v25, (uint64_t)a2);
      sub_19B70E824(v25, (uint64_t)a2);
      sub_19B70D868(v25, (uint64_t)a2);
      sub_19B70E8CC(v25, (uint64_t)a2);
      v48 = v25;
      *(_QWORD *)(v25 + 16) = v42;
      v27 = v18;
      v28 = *(unint64_t *)((char *)v18->i64 + (((a5 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (a5
                                                                                                 - 1);
      v29 = v28 & 1;
      v30 = !(v28 & 1);
      v31 = a5 - 2;
      if (a5 == 2)
      {
        v43 = !(v28 & 1);
        LOBYTE(v32) = v28 & 1;
      }
      else
      {
        LOBYTE(v32) = v28 & 1;
        do
        {
          v33 = v32;
          v32 = (*(unint64_t *)((char *)v27->i64 + ((v31 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v31) & 1;
          sub_19B702DE8((uint64_t)a2, v30, &v21[v49], &v21[v49]);
          sub_19B7027FC(v56, v32 ^ v33 | v29 ^ 1, v26, v21);
          sub_19B705E08(v25, a2);
          sub_19B706054(v25, a2);
          v30 = v32 & (v29 ^ 1);
          v27 = v18;
          v29 |= v32;
          --v31;
        }
        while (v31);
        v43 = v29 ^ 1;
      }
      sub_19B702DE8((uint64_t)a2, v30, &v21[v49], &v21[v49]);
      sub_19B7027FC(v56, v27->i8[0] & 1 ^ v32, v26, v21);
      sub_19B705E08(v25, a2);
      sub_19B708C08(v56, __dst, v21);
      v41 = v27->i64[0] & 1;
      sub_19B7027FC(v56, v27->i8[0] & 1, v26, v21);
      v34 = v26;
      a1 = v25;
      v35 = v51;
      v40 = *(_QWORD *)(v25 + 16);
      sub_19B70E8CC(v25, (uint64_t)a2);
      sub_19B70E5B0(v25, (uint64_t)a2);
      sub_19B70E5B0(v25, (uint64_t)a2);
      sub_19B70E5B0(v25, (uint64_t)a2);
      sub_19B70E5B0(v25, (uint64_t)a2);
      sub_19B70E824(v25, (uint64_t)a2);
      sub_19B70E5B0(v25, (uint64_t)a2);
      *(_QWORD *)(v25 + 16) = v40;
      sub_19B7027FC(v56, v41, v34, v21);
      sub_19B706054(v25, a2);
      sub_19B7082B0(v56, v41, v34, v21, v34);
      sub_19B70E5B0(v25, (uint64_t)a2);
      sub_19B70E5B0(v25, (uint64_t)a2);
      v36 = (unint64_t *)sub_19B70E830((uint64_t)&v54[5 * *a2]);
      sub_19B70911C(v49, __dst, v36, 1uLL);
      v37 = (sub_19B707778(v50, v57, v49, __dst) & 1) == 0;
      v38 = sub_19B707EF4(a2, (uint64_t)v46);
      sub_19B7082B0(3 * v49, v43 | v38 | v37, v35, v46, v35);
      sub_19B702DE8((uint64_t)a2, v37, &v35[*a2], &v35[*a2]);
      v39 = v43 & ~*(_DWORD *)v57 & 1;
      sub_19B70C080(v49, v39, &v51[2 * *a2]);
      sub_19B70C914(v49, v34, 1);
      sub_19B702D50(v48, (uint64_t)a2);
      sub_19B7082B0(v49, v39, v35, v34, v35);
      sub_19B7082B0(v49, v39, &v35[*a2], v34, &v35[*a2]);
      *(_QWORD *)(v48 + 16) = v45;
      sub_19B7048F0(v48, (uint64_t)a2);
      sub_19B7082B0(v47, *__src & v55, v35, v46, v35);
      result = 0;
      goto LABEL_16;
    }
    goto LABEL_13;
  }
  result = 4294967289;
LABEL_16:
  *(_QWORD *)(a1 + 16) = v53;
  return result;
}

uint64_t sub_19B705DFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 96))();
}

uint64_t sub_19B705E08(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  result = sub_19B70E8CC(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_19B706054(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  result = sub_19B70E8CC(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

unint64_t sub_19B706200(uint64_t a1, unint64_t *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unsigned __int128 v8;
  unsigned __int128 v9;
  BOOL v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int128 v19;
  BOOL v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  unsigned __int128 v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = 0;
  if ((a1 & 1) != 0)
  {
    v5 = *a3++;
    v4 = (v5 * (unsigned __int128)a4 + *a2) >> 64;
    *a2++ += v5 * a4;
    --a1;
  }
  if ((a1 & 2) != 0)
  {
    v6 = *a3;
    v7 = a3[1];
    a3 += 2;
    v8 = *(_OWORD *)a2 + __PAIR128__(v7 * a4, v4);
    v9 = v8 + v6 * (unsigned __int128)a4;
    v4 = (__CFADD__(__CFADD__((_QWORD)v8, v6 * a4), *((_QWORD *)&v8 + 1)) | __CFADD__((v6* (unsigned __int128)a4) >> 64, *((_QWORD *)&v9 + 1)))+ (__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v7 * a4, *((_QWORD *)&v8 + 1)))+ ((v7 * (unsigned __int128)a4) >> 64);
    *(_OWORD *)a2 = v9;
    a2 += 2;
    a1 -= 2;
  }
  while (1)
  {
    v10 = a1 < 4;
    a1 -= 4;
    if (v10)
      break;
    v11 = a2[2];
    v12 = a2[3];
    v14 = *a3;
    v15 = a3[1];
    v13 = a3 + 2;
    v16 = *v13;
    v17 = v13[1];
    a3 = v13 + 2;
    v18 = (v15 * (unsigned __int128)a4) >> 64;
    v19 = *(_OWORD *)a2 + __PAIR128__(v15 * a4, v4);
    v20 = __CFADD__(__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v15 * a4, *((_QWORD *)&v19 + 1)), v11);
    v21 = (__CFADD__(__CFADD__(*a2, v4), a2[1]) | __CFADD__(v15 * a4, *((_QWORD *)&v19 + 1))) + v11;
    v20 |= __CFADD__(v18, v21);
    v21 += v18;
    v23 = v20;
    v20 = __CFADD__(v20, v12);
    v22 = v23 + v12;
    v20 |= __CFADD__(v17 * a4, v22);
    v22 += v17 * a4;
    v24 = v20 + ((v17 * (unsigned __int128)a4) >> 64);
    v25 = v19 + v14 * (unsigned __int128)a4;
    *(_OWORD *)a2 = v25;
    v26 = a2 + 2;
    v27 = (v16 * (unsigned __int128)a4) >> 64;
    v29 = __CFADD__(__CFADD__((_QWORD)v19, v14 * a4), *((_QWORD *)&v19 + 1)) | __CFADD__((v14* (unsigned __int128)a4) >> 64, *((_QWORD *)&v25 + 1));
    v20 = __CFADD__(v29, v21);
    v28 = v29 + v21;
    v31 = v20 | __CFADD__(v16 * a4, v28);
    v20 = __CFADD__(v31, v22);
    v30 = v31 + v22;
    v4 = (v20 | __CFADD__(v27, v30)) + v24;
    *v26 = v16 * a4 + v28;
    v26[1] = v27 + v30;
    a2 = v26 + 2;
  }
  return v4;
}

uint64_t (**sub_19B7062E0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(_QWORD, unint64_t, uint64_t)))(_QWORD, unint64_t, uint64_t)
{
  uint64_t (**v5)(_QWORD, unint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v5 = a5;
  v9 = *(_QWORD *)(a1 + 16);
  if (a5)
  {
    v10 = sub_19B7076C4((uint64_t)a2);
    v5 = (uint64_t (**)(_QWORD, unint64_t, uint64_t))sub_19B708A6C(v10 - 1, a3 + 16 * *a2, v5);
    sub_19B70C8DC(a3 + 16 * *a2, v10 - 2, 1);
    sub_19B70E824(a1, (uint64_t)a2);
    sub_19B70E5B0(a1, (uint64_t)a2);
    sub_19B70E5B0(a1, (uint64_t)a2);
    sub_19B70E5B0(a1, (uint64_t)a2);
  }
  else
  {
    sub_19B70C914(*a2, (_QWORD *)(a3 + 16 * *a2), 1);
    sub_19B702D50(a1, (uint64_t)a2);
  }
  sub_19B702D50(a1, (uint64_t)a2);
  sub_19B702D50(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v9;
  return v5;
}

uint64_t sub_19B706448(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 72))();
}

uint64_t sub_19B706454(uint64_t a1, uint64_t *a2, char *a3, unint64_t *a4, uint64_t a5, unint64_t *a6, char *a7)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  _QWORD v28[2];

  v28[1] = *MEMORY[0x1E0C80C00];
  v12 = *a2;
  v24 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v13 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v25 = 3 * v12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 12 * v12);
  v15 = v14 + 48 * v12;
  v26 = v14;
  v16 = v14 + 72 * v12;
  sub_19B7048F0(a1, (uint64_t)a2);
  sub_19B7049B4(a1, a2, v16, a5, a7);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  v23 = sub_19B7076B0(a1, (uint64_t)a2);
  if (!v23)
  {
    sub_19B70681C(a1, a2);
    sub_19B70681C(a1, a2);
    sub_19B70681C(a1, a2);
    sub_19B70681C(a1, a2);
    sub_19B70C914(v12, v13, 1);
    sub_19B702D50(a1, (uint64_t)a2);
    sub_19B708C08(v12, (void *)(v26 + 24 * v12 + 16 * *a2), (void *)(v26 + 16 * *a2));
    sub_19B708C08(v12, (void *)(v15 + 16 * *a2), (void *)(v26 + 16 * *a2));
    sub_19B708C08(v12, (void *)(v16 + 16 * *a2), (void *)(v26 + 16 * *a2));
    v17 = sub_19B70851C(v12, a4);
    v18 = sub_19B70851C(v12, a6);
    v27[1] = 0;
    v27[2] = 0;
    if (v17 <= v18)
      v17 = v18;
    v27[0] = 0;
    sub_19B707F18((uint64_t)v27, v17, (uint64_t)a4, (uint64_t)a6);
    sub_19B708C08(v12, a3, (void *)(v26 + 16 * *a2));
    sub_19B708C08(v12, &a3[8 * *a2], (void *)(v26 + 16 * *a2));
    sub_19B70D5B8(8 * v12, &a3[16 * *a2]);
    for (; v17 != -1; --v17)
    {
      sub_19B703A80(a1, a2);
      v28[0] = 0;
      sub_19B707FE8((uint64_t)v27, v17, (uint64_t)v28);
      if (v28[0])
      {
        v19 = (char *)(v26 + 8 * sub_19B708100(v28) * v25);
        if (sub_19B70811C((unsigned int *)v28) == 1)
          sub_19B704098(a1, a2, a3, (uint64_t)a3, v19);
        else
          sub_19B7048FC(a1, a2, a3, (uint64_t)a3, v19);
      }
    }
  }
  *(_QWORD *)(a1 + 16) = v24;
  return v23;
}

uint64_t sub_19B70681C(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  (*(void (**)(uint64_t, _QWORD))(a1 + 24))(a1, *a2);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  result = sub_19B70E5B0(a1, (uint64_t)a2);
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

uint64_t sub_19B70692C(unint64_t **a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5, _QWORD *a6)
{
  char v12;
  uint64_t v18;
  _QWORD v20[4];
  void (*v21)(uint64_t);
  char v22;

  v12 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v12 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v12 = 1;
    }
  }
  v22 = v12;
  v20[0] = sub_19B70E8E4(376 * **a1);
  v20[1] = 47 * **a1;
  v20[2] = 0;
  v20[3] = sub_19B70E91C;
  v21 = sub_19B70E960;
  if (v20[0])
  {
    v18 = sub_19B706A30((uint64_t)v20, a1, a2, a3, a4, a5, a6);
    v21((uint64_t)v20);
  }
  else
  {
    v18 = 4294967283;
  }
  sub_19B70EAB4(&v22);
  return v18;
}

uint64_t sub_19B706A30(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, _QWORD *a7)
{
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t result;
  __int128 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a7)
  {
    *a7 = 0;
    a7[1] = 0;
  }
  v19 = 0uLL;
  v13 = **a2;
  v14 = *(_QWORD *)(a1 + 16);
  v15 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  v16 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v13);
  if (sub_19B7097F0(v13, v15, v16, a6, &a6[a5]) == &a6[a5])
  {
    result = sub_19B70CF3C(a1, a2, a3, a4, v15, v16, (uint64_t)&v19);
    if (a7 && !(_DWORD)result)
      *(_OWORD *)a7 = v19;
  }
  else
  {
    result = 4294967289;
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_19B706B54(unint64_t **a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unsigned __int8 *a5, BOOL *a6)
{
  char v7;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v17;

  v7 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v7 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v7 = 1;
    }
  }
  v17 = v7;
  *a6 = 0;
  v13 = sub_19B70692C(a1, a2, a3, a4, a5, 0);
  if (v13 == -146)
    v14 = 0;
  else
    v14 = v13;
  if (v13)
    v15 = v14;
  else
    v15 = 0;
  *a6 = v13 == 0;
  sub_19B70EAB4(&v17);
  return v15;
}

unint64_t sub_19B706BE4(uint64_t a1, char *a2, char *a3)
{
  char v3;
  unsigned __int8 v9;
  char v10;
  char v11;
  char v12;
  unint64_t v13;
  char v15;

  v3 = 0;
  v15 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v15 = v3;
  if (a1)
  {
    v9 = 0;
    do
    {
      v11 = *a2++;
      v10 = v11;
      v12 = *a3++;
      v9 |= v12 ^ v10;
      --a1;
    }
    while (a1);
    v13 = ((unint64_t)v9 + 0xFFFFFFFF) >> 32;
  }
  else
  {
    v13 = 1;
  }
  sub_19B70EAB4(&v15);
  return v13;
}

uint64_t sub_19B706C78(uint64_t a1)
{
  char v1;
  uint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  if (a1 <= 64)
  {
    if (a1 == 49)
    {
      v7 = 192;
      goto LABEL_17;
    }
    if (a1 == 57)
    {
      v7 = 224;
      goto LABEL_17;
    }
LABEL_16:
    v7 = 0;
    goto LABEL_17;
  }
  if (a1 == 65)
  {
    v7 = 256;
    goto LABEL_17;
  }
  if (a1 == 97)
  {
    v7 = 384;
    goto LABEL_17;
  }
  if (a1 != 133)
    goto LABEL_16;
  v7 = 521;
LABEL_17:
  sub_19B70EAB4(&v9);
  return v7;
}

uint64_t sub_19B706D34(uint64_t a1, unint64_t *a2, uint64_t a3, unsigned __int8 *a4, unint64_t **a5)
{
  int v10;
  uint64_t result;
  unsigned int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (!a3)
    return 4294967289;
  if (a3 == 1)
  {
    v10 = *a4;
    if (!*a4)
      return 4294967136;
  }
  else
  {
    v10 = *a4;
  }
  v12 = v10 - 2;
  if (v12 > 5 || ((0x37u >> v12) & 1) == 0)
    return 4294967289;
  v13 = dword_19B71A0C8[(char)v12];
  v14 = *(_QWORD *)(a1 + 16);
  *a5 = a2;
  result = sub_19B70A074(a1, a2, v13, a3, a4, (unint64_t *)a5 + 2);
  if (!(_DWORD)result)
  {
    sub_19B70C914(*a2, &a5[2 * **a5 + 2], 1);
    v15 = (*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * *a2);
    result = sub_19B70E9B0(a1, (uint64_t *)a2, v15, (unint64_t *)a5 + 2);
  }
  *(_QWORD *)(a1 + 16) = v14;
  return result;
}

uint64_t sub_19B706E30(unint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t **a4)
{
  char v8;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  void (*v19)(uint64_t);
  char v20;

  v8 = 0;
  v20 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v20 = v8;
  v14 = sub_19B70E8E4(160 * *a1);
  v15 = 20 * *a1;
  v18[0] = v14;
  v18[1] = v15;
  v18[2] = 0;
  v18[3] = sub_19B70E91C;
  v19 = sub_19B70E960;
  if (v14)
  {
    v16 = sub_19B706D34((uint64_t)v18, a1, a2, a3, a4);
    v19((uint64_t)v18);
  }
  else
  {
    v16 = 4294967283;
  }
  sub_19B70EAB4(&v20);
  return v16;
}

BOOL sub_19B706F18(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v3 = a2;
    v4 = a1;
    do
    {
      v5 = *a3++;
      *v3++ = ~v5;
      --v4;
    }
    while (v4);
  }
  return sub_19B708290(0, a1, a2, a2, 1);
}

uint64_t sub_19B706F50(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v6;
  unint64_t v8;
  unint64_t *v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  void *v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t __n;
  uint64_t v46;
  void *__s;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  void *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;

  v6 = a2;
  v8 = sub_19B7076BC(a2);
  v9 = (unint64_t *)sub_19B70E830(v6);
  if ((sub_19B7085CC(v8, a4, v9) & 0x80000000) == 0)
    return 4294967289;
  v46 = *(_QWORD *)(a1 + 16);
  __s = a3;
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  sub_19B702E88(a1, v6);
  v13 = (void *)sub_19B70E830(v6);
  sub_19B708C08(v8, v12, v13);
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v53 = v14;
  sub_19B70C914(v8, v14, 1);
  __n = 8 * v8;
  v54 = v15;
  sub_19B70D5B8(8 * v8, v15);
  v52 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v8);
  v16 = (v8 << 7) | 0x1E;
  if (v16 != 30)
  {
    v17 = 0;
    v49 = v8 - 1;
    v50 = v16 / 0x1F;
    v48 = v8 - 2;
    v51 = (_QWORD *)v6;
    v56 = v8;
    do
    {
      v18 = v11[v49];
      v19 = v12[v49];
      v55 = v17;
      if (v8 >= 2)
      {
        v20 = v48;
        do
        {
          v21 = __clz(v19 | v18 | 1);
          v22 = (((v19 | v18) >> 63) - v21 + 64) & -(uint64_t)(((v19 | v18 | ((v19 | (unint64_t)v18) >> 32))
                                                             + 0xFFFFFFFF) >> 32);
          v18 = (v11[v20] >> v22) | (v18 << v21);
          v19 = (v12[v20--] >> v22) | (v19 << v21);
        }
        while (v20 < v8);
      }
      v23 = 0;
      v24 = 0;
      v25 = v18 & 0xFFFFFFFF80000000 | *v11 & 0x7FFFFFFFLL;
      v26 = v19 & 0xFFFFFFFF80000000 | *v12 & 0x7FFFFFFFLL;
      v27 = 31;
      v28 = 0x80000000;
      v29 = 0x80000000;
      do
      {
        v30 = v25 & 1;
        v31 = v25 >> !(v25 & 1);
        v32 = v31 ^ v26;
        v33 = v25 & ((((v31 - v26) ^ v31 | v31 ^ v26) ^ v31) >> 63);
        v34 = -(uint64_t)v33;
        v35 = v26 & -(uint64_t)v33--;
        v36 = v33 & v31 | v35;
        v26 = v32 ^ v36;
        v37 = v33 & v29 | v24 & v34;
        v24 ^= v29 ^ v37;
        v38 = v33 & v23 | v28 & v34;
        v28 ^= v23 ^ v38;
        v25 = (v36 - (v26 & -(uint64_t)v30)) >> v30;
        v29 = (v37 - (v24 & -(uint64_t)v30)) & 0x8000000000000000 | ((v37 - (v24 & -(uint64_t)v30)) >> 1);
        v23 = (v38 - (v28 & -(uint64_t)v30)) & 0x8000000000000000 | ((v38 - (v28 & -(uint64_t)v30)) >> 1);
        --v27;
      }
      while (v27);
      v39 = a1;
      v40 = sub_19B707384(a1, v8, v52, v11, (v37 - (v24 & -(uint64_t)v30)) & 0x8000000000000000 | ((v37 - (v24 & -(uint64_t)v30)) >> 1), v12, (v38 - (v28 & -(uint64_t)v30)) & 0x8000000000000000 | ((v38 - (v28 & -(uint64_t)v30)) >> 1));
      v41 = sub_19B707384(v39, v56, v12, v11, v24, v12, v28);
      sub_19B708C08(v56, v11, v52);
      v42 = v40 - 1;
      v43 = -(uint64_t)v40;
      a1 = v39;
      v44 = v42 & v23 | v43 & -(uint64_t)v23;
      v6 = (uint64_t)v51;
      v8 = v56;
      sub_19B707500(v39, v51, v52, v53, v42 & v29 | v43 & -(uint64_t)v29, v54, v44);
      sub_19B707500(v39, v51, v54, v53, (v41 - 1) & v24 | -(uint64_t)v41 & -v24, v54, (v41 - 1) & v28 | -(uint64_t)v41 & -v28);
      sub_19B708C08(v56, v53, v52);
      v17 = v55 + 1;
    }
    while (v55 + 1 != v50);
  }
  if (sub_19B708A68(v8, v12) == 1 && *v12 == 1)
  {
    sub_19B702D50(a1, v6);
    result = 0;
  }
  else
  {
    sub_19B70D5B8(__n, __s);
    result = 4294967289;
  }
  *(_QWORD *)(a1 + 16) = v46;
  return result;
}

unint64_t sub_19B707384(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13;
  int8x16_t *v14;
  char *v15;
  unint64_t v16;
  uint64_t v19;

  v19 = *(_QWORD *)(a1 + 16);
  v13 = a2 + 1;
  v14 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, a2 + 1);
  v15 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v13);
  if (a2)
    sub_19B708C08(a2, v14, a4);
  sub_19B70C90C(1, (char *)v14 + 8 * a2);
  sub_19B709338(v13, a5 < 0, v14->i64, v14->i64);
  if (a2)
    sub_19B708C08(a2, v15, a6);
  sub_19B70C90C(1, &v15[8 * a2]);
  sub_19B709338(v13, a7 < 0, (uint64_t *)v15, (uint64_t *)v15);
  sub_19B708A64(v13, v14, (unint64_t *)v14, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  sub_19B706F14(v13, v14, v15, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  v16 = (unint64_t)v14->i64[a2] >> 63;
  sub_19B709338(v13, v14->i64[a2] < 0, v14->i64, v14->i64);
  sub_19B708C1C(v13, v14, v14, 31);
  sub_19B708C08(a2, a3, v14);
  *(_QWORD *)(a1 + 16) = v19;
  return v16;
}

uint64_t sub_19B707500(uint64_t a1, _QWORD *a2, void *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  uint64_t v12;
  int8x16_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t *v16;
  char v17;
  uint64_t result;
  uint64_t v21;

  v12 = sub_19B7076BC((uint64_t)a2);
  v21 = *(_QWORD *)(a1 + 16);
  v13 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  sub_19B702DE8((uint64_t)a2, a5 < 0, v13->i64, a4);
  sub_19B702DE8((uint64_t)a2, a7 < 0, v14, a6);
  v13->i64[v12] = sub_19B708A64(v12, v13, (unint64_t *)v13, (a5 ^ (a5 >> 63)) + ((unint64_t)a5 >> 63));
  v13->i64[v12] += sub_19B706F14(v12, v13, v14, (a7 ^ (a7 >> 63)) + ((unint64_t)a7 >> 63));
  v15 = sub_19B70E830((uint64_t)a2);
  v13->i64[v12] += sub_19B706F14(v12, v13, v15, (LODWORD(a2[*a2 + 3]) * v13->i32[0]) & 0x7FFFFFFF);
  sub_19B708C1C(v12 + 1, v13, v13, 31);
  sub_19B708C08(v12, a3, v13);
  v16 = (unint64_t *)sub_19B70E830((uint64_t)a2);
  v17 = sub_19B70983C(v12 + 1, v13, v13->i64, v12, v16);
  result = sub_19B7082B0(v12, v17, (uint64_t *)a3, (uint64_t *)a3, v13->i64);
  *(_QWORD *)(a1 + 16) = v21;
  return result;
}

uint64_t sub_19B7076B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 40))();
}

uint64_t sub_19B7076BC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_19B7076C4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_19B7076D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unsigned __int128 v14;

  if (result)
  {
    result *= -8;
    v4 = (unint64_t *)(a2 - result);
    v5 = a3 - result;
    v6 = a4 - result;
    v7 = result;
    v8 = result;
    v9 = 0;
    v10 = *(_QWORD *)(v6 + result);
    do
    {
      v11 = *(unint64_t *)(v5 + v8) * (unsigned __int128)v10 + v9;
      *(unint64_t *)((char *)v4 + v8) = v11;
      v9 = *((_QWORD *)&v11 + 1);
      v8 += 8;
    }
    while (v8);
    while (1)
    {
      *v4 = v9;
      v7 += 8;
      if (!v7)
        break;
      ++v4;
      v12 = result;
      v9 = 0;
      v13 = *(_QWORD *)(v6 + v7);
      do
      {
        v14 = *(unint64_t *)(v5 + v12) * (unsigned __int128)v13 + v9 + *(unint64_t *)((char *)v4 + v12);
        *(unint64_t *)((char *)v4 + v12) = v14;
        v9 = *((_QWORD *)&v14 + 1);
        v12 += 8;
      }
      while (v12);
    }
  }
  return result;
}

uint64_t sub_19B707778(unint64_t a1, unint64_t *a2, unint64_t a3, unint64_t *a4)
{
  char v4;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  char v17;

  v4 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v17 = v4;
  if (a1 >= a3)
    v10 = a3;
  else
    v10 = a1;
  if (a1 >= a3)
    v11 = a2;
  else
    v11 = a4;
  if (a1 <= a3)
    v12 = a3;
  else
    v12 = a1;
  if (a1 < a3)
    v13 = -1;
  else
    v13 = 1;
  v14 = sub_19B7085CC(v10, a2, a4);
  if (sub_19B708A68(v12 - v10, (uint64_t *)&v11[v10]))
    v15 = v13;
  else
    v15 = v14;
  sub_19B70EAB4(&v17);
  return v15;
}

uint64_t sub_19B707824(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, unint64_t a5, unint64_t *a6, void *a7)
{
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  unint64_t *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v23;
  unint64_t *v25;

  v12 = sub_19B7076BC(a2);
  v23 = *(_QWORD *)(a1 + 16);
  v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v14 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v15 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  v16 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12);
  result = sub_19B70832C(a1, a2, a3, a4, a6);
  v18 = v23;
  if (!(_DWORD)result)
  {
    sub_19B70C914(v12, v16, 1);
    v25 = v16;
    sub_19B702D50(a1, a2);
    sub_19B708C08(v12, v15, a7);
    sub_19B70E824(a1, a2);
    sub_19B70E5B0(a1, a2);
    sub_19B70E5B0(a1, a2);
    if (a5 >= 2)
    {
      while (1)
      {
        sub_19B708C08(v12, v14, v13);
        if (a5 - 1 < 2)
          break;
        v19 = 2;
        do
        {
          sub_19B70E824(a1, a2);
          ++v19;
        }
        while (a5 != v19);
        v20 = sub_19B7085CC(v12, (unint64_t *)v14, v25) & 1;
        sub_19B70E5B0(a1, a2);
        sub_19B7082B0(v12, v20, a3, (uint64_t *)v14, a3);
        sub_19B70E824(a1, a2);
        sub_19B70E5B0(a1, a2);
        sub_19B7082B0(v12, v20, (uint64_t *)v13, (uint64_t *)v14, (uint64_t *)v13);
        --a5;
      }
      v21 = sub_19B7085CC(v12, (unint64_t *)v14, v25) & 1;
      sub_19B70E5B0(a1, a2);
      sub_19B7082B0(v12, v21, a3, (uint64_t *)v14, a3);
      sub_19B70E824(a1, a2);
      sub_19B70E5B0(a1, a2);
      sub_19B7082B0(v12, v21, (uint64_t *)v13, (uint64_t *)v14, (uint64_t *)v13);
    }
    sub_19B70E824(a1, a2);
    if (sub_19B7085CC(v12, (unint64_t *)v14, (unint64_t *)a4))
      result = 4294967289;
    else
      result = 0;
    v18 = v23;
  }
  *(_QWORD *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_19B707B28(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int8x16_t *v11;
  void *v12;
  uint64_t result;
  unint64_t v14;
  int8x16_t *v15;
  uint64_t *v16;

  v8 = ~*(_DWORD *)sub_19B70E830(a2) & 3;
  v9 = sub_19B7076BC(a2);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  v12 = (void *)sub_19B70E830(a2);
  if (v8)
  {
    sub_19B708C08(v9, v11, v12);
    v11->i64[0] &= ~1uLL;
    v14 = sub_19B70CA14(v9, (uint64_t)v11);
    sub_19B708C28(v9, v11, v11, v14);
    v15 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
    sub_19B70911C(v9, v15, (unint64_t *)v11, 1uLL);
    sub_19B708C1C(v9, v15, v15, 1);
    v16 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
    sub_19B70C914(v9, v16, 1);
    while (sub_19B70D670(a1, a2, v16) == 1)
      sub_19B708290(a1, v9, v16, v16, 1);
    result = sub_19B70832C(a1, a2, v16, v16, (unint64_t *)v11);
    if (!(_DWORD)result)
      result = sub_19B707824(a1, a2, a3, a4, v14, (unint64_t *)v15, v16);
  }
  else
  {
    sub_19B708290(a1, v9, v11, (uint64_t *)v12, 1);
    sub_19B708C1C(v9, v11, v11, 2);
    result = sub_19B70832C(a1, a2, a3, a4, (unint64_t *)v11);
    if (!(_DWORD)result)
    {
      sub_19B70E824(a1, a2);
      if (sub_19B7085CC(v9, (unint64_t *)v11, (unint64_t *)a4))
        result = 4294967289;
      else
        result = 0;
    }
  }
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19B707D40(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 48))();
}

uint64_t sub_19B707D4C()
{
  return 24;
}

BOOL sub_19B707D54(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;
  _BOOL8 result;

  v4 = *a2;
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, *a2);
  v7 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, v4);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E8CC(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  sub_19B70E5B0(a1, (uint64_t)a2);
  sub_19B70D868(a1, (uint64_t)a2);
  sub_19B70E824(a1, (uint64_t)a2);
  result = sub_19B7085CC(v4, v7, v6) == 0;
  *(_QWORD *)(a1 + 16) = v5;
  return result;
}

BOOL sub_19B707EF4(uint64_t *a1, uint64_t a2)
{
  return sub_19B708A68(*a1, (uint64_t *)(a2 + 16 * *a1)) == 0;
}

uint64_t sub_19B707F18(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  char v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  _QWORD v16[3];

  v4 = 0;
  v16[2] = *MEMORY[0x1E0C80C00];
  v5 = (unint64_t)(a2 - 1) >> 6;
  *(_QWORD *)(result + 8) = a3;
  *(_QWORD *)(result + 16) = a4;
  v6 = (a2 - 1) & 0x3F;
  v7 = (unint64_t)(a2 - 2) >> 6;
  v8 = (a2 - 2) & 0x3F;
  v16[0] = a3;
  v16[1] = a4;
  v9 = (unint64_t)(a2 - 3) >> 6;
  v10 = (a2 - 3) & 0x3F;
  v11 = (unint64_t)(a2 - 4) >> 6;
  v12 = (a2 - 4) & 0x3F;
  v13 = 1;
  do
  {
    v14 = v13;
    v15 = v16[v4];
    *(_BYTE *)(result + v4) = (8 * ((*(_QWORD *)(v15 + 8 * v5) >> v6) & 1)) | (4
                                                                             * ((*(_QWORD *)(v15 + 8 * v7) >> v8) & 1)) | (2 * ((*(_QWORD *)(v15 + 8 * v9) >> v10) & 1)) | (*(_QWORD *)(v15 + 8 * v11) >> v12) & 1;
    v4 = 1;
    v13 = 0;
  }
  while ((v14 & 1) != 0);
  return result;
}

uint64_t sub_19B707FE8(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  __int128 v11;
  uint64_t v12;

  v3 = 0;
  v12 = *MEMORY[0x1E0C80C00];
  v10 = 0;
  if ((*(_BYTE *)result & 0x20) != 0)
    v4 = *(_BYTE *)result & 0x1F ^ 0x1F;
  else
    v4 = *(_BYTE *)result & 0x1F;
  LOBYTE(v10) = v4;
  if ((*(_BYTE *)(result + 1) & 0x20) != 0)
    v5 = *(_BYTE *)(result + 1) & 0x1F ^ 0x1F;
  else
    v5 = *(_BYTE *)(result + 1) & 0x1F;
  HIBYTE(v10) = v5;
  v11 = *(_OWORD *)(result + 8);
  v6 = 1;
  do
  {
    v7 = v6;
    if (a2 < 5)
      LOBYTE(v8) = 0;
    else
      v8 = (*(_QWORD *)(*((_QWORD *)&v11 + v3) + 8 * ((a2 - 5) >> 6)) >> ((a2 - 5) & 0x3F)) & 1;
    if (*((unsigned __int8 *)&v10 + v3) >= byte_19B71A0E0[*((unsigned __int8 *)&v10 + (v3 ^ 1))])
    {
      LOBYTE(v8) = v8 | 0x20;
      if ((*(_BYTE *)(result + v3) & 0x20) != 0)
        v9 = -1;
      else
        v9 = 1;
    }
    else
    {
      v9 = 0;
    }
    v6 = 0;
    *(_DWORD *)(a3 + 4 * v3) = v9;
    *(_BYTE *)(result + v3) = v8 ^ (2 * *(_BYTE *)(result + v3));
    v3 = 1;
  }
  while ((v7 & 1) != 0);
  return result;
}

unint64_t sub_19B708100(_DWORD *a1)
{
  return (*a1 & 1 | (2 * (a1[1] & 1u))) - (unint64_t)(*a1 + a1[1] != 0);
}

uint64_t sub_19B70811C(unsigned int *a1)
{
  uint64_t result;

  result = *a1;
  if ((_DWORD)result != -1)
  {
    if (!(_DWORD)result && a1[1] == -1)
      return 0xFFFFFFFFLL;
    else
      return 1;
  }
  return result;
}

BOOL sub_19B70814C(uint64_t a1, _BOOL8 a2, _QWORD *a3, uint64_t *a4, uint64_t *a5)
{
  return sub_19B7081DC(a2, a3, a4, a5);
}

uint64_t sub_19B708160()
{
  if (qword_1EE3FD8E8 != -1)
    _os_once();
  return qword_1EE3FD8E0;
}

os_log_t sub_19B7081A8(os_log_t *a1)
{
  os_log_t result;

  result = os_log_create("com.apple.corecrypto", "default");
  *a1 = result;
  return result;
}

BOOL sub_19B7081DC(_BOOL8 result, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;

  v4 = 0;
  if (result)
  {
    if (result)
    {
      v6 = *a3++;
      v5 = v6;
      v7 = *a4++;
      v4 = __CFADD__(v5, v7);
      *a2++ = v5 + v7;
    }
    if (result & 2)
    {
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v10 = *a4;
      v11 = a4[1];
      a4 += 2;
      v13 = v4 + v8;
      v4 = __CFADD__(v4, v8) | __CFADD__(v10, v13);
      v12 = v10 + v13;
      v14 = v4 + v9;
      v4 = __CFADD__(v4, v9) | __CFADD__(v11, v14);
      *a2 = v12;
      a2[1] = v11 + v14;
      a2 += 2;
    }
    v15 = result & 0xFFFFFFFC;
    if (v15)
    {
      v16 = v15 - 4;
      v18 = *a3;
      v19 = a3[1];
      v17 = a3 + 2;
      v21 = *a4;
      v22 = a4[1];
      v20 = a4 + 2;
      v24 = *v17;
      v25 = v17[1];
      v23 = v17 + 2;
      v27 = *v20;
      v28 = v20[1];
      for (i = v20 + 2; v16; i = v38 + 2)
      {
        v30 = v4 + v18;
        v4 = __CFADD__(v4, v18) | __CFADD__(v21, v30);
        v29 = v21 + v30;
        v32 = v4 + v19;
        v4 = __CFADD__(v4, v19) | __CFADD__(v22, v32);
        v31 = v22 + v32;
        v18 = *v23;
        v19 = v23[1];
        v33 = v23 + 2;
        v35 = v4 + v24;
        v4 = __CFADD__(v4, v24) | __CFADD__(v27, v35);
        v34 = v27 + v35;
        *a2 = v29;
        a2[1] = v31;
        v36 = a2 + 2;
        v37 = v4 + v25;
        v4 = __CFADD__(v4, v25) | __CFADD__(v28, v37);
        v21 = *i;
        v22 = i[1];
        v38 = i + 2;
        *v36 = v34;
        v36[1] = v28 + v37;
        a2 = v36 + 2;
        v16 -= 4;
        v24 = *v33;
        v25 = v33[1];
        v23 = v33 + 2;
        v27 = *v38;
        v28 = v38[1];
      }
      v40 = v4 + v18;
      v4 = __CFADD__(v4, v18) | __CFADD__(v21, v40);
      v39 = v21 + v40;
      v42 = v4 + v19;
      v4 = __CFADD__(v4, v19) | __CFADD__(v22, v42);
      v41 = v22 + v42;
      v44 = v4 + v24;
      v4 = __CFADD__(v4, v24) | __CFADD__(v27, v44);
      v43 = v27 + v44;
      v45 = v4 + v25;
      v4 = __CFADD__(v4, v25) | __CFADD__(v28, v45);
      *a2 = v39;
      a2[1] = v41;
      v46 = a2 + 2;
      *v46 = v43;
      v46[1] = v28 + v45;
    }
    return v4;
  }
  return result;
}

BOOL sub_19B708290(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  if (a2)
    return sub_19B709300(a2, a3, a4, a5);
  else
    return a5;
}

uint64_t sub_19B7082B0(uint64_t result, char a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = qword_1EE3FD590 ^ (qword_1EE3FD590 << 13) ^ ((qword_1EE3FD590 ^ (unint64_t)(qword_1EE3FD590 << 13)) >> 7);
  v6 = v5 ^ (v5 << 17);
  qword_1EE3FD590 = v6;
  for (i = __ROR8__(0x5555555555555555, a2 | (2 * v6)); result; --result)
  {
    v9 = *a4++;
    v8 = v9;
    v10 = *a5++;
    *a3 = v10 ^ v6;
    *a3++ = (v10 ^ v8) & 0x5555555555555555 ^ v10 ^ v6 ^ (v10 ^ v8) & i ^ v6;
  }
  return result;
}

uint64_t sub_19B708310()
{
  unint64_t v0;
  uint64_t result;

  v0 = qword_1EE3FD590 ^ (qword_1EE3FD590 << 13) ^ ((qword_1EE3FD590 ^ (unint64_t)(qword_1EE3FD590 << 13)) >> 7);
  result = v0 ^ (v0 << 17);
  qword_1EE3FD590 = result;
  return result;
}

uint64_t sub_19B70832C(uint64_t a1, uint64_t a2, _QWORD *a3, void *a4, unint64_t *a5)
{
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v10 = sub_19B7076BC(a2);
  v11 = sub_19B70851C(v10, a5);
  if (v11)
  {
    v12 = v11;
    v17 = *(_QWORD *)(a1 + 16);
    v13 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v10);
    sub_19B708C08(v10, v13, a4);
    sub_19B70E824(a1, a2);
    sub_19B70E5B0(a1, a2);
    v14 = (*(unint64_t *)((char *)a5 + (((v12 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 - 1)) & 1;
    if ((v12 & 1) == 0)
      v14 = (*(unint64_t *)((char *)a5 + (((v12 - 2) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v12 - 2)) & 1 | (2 * v14);
    sub_19B708C08(v10, a3, &v13[8 * (v14 - 1) * v10]);
    if ((v12 | 0xFFFFFFFFFFFFFFFELL) + v12)
    {
      v15 = v12 + (v12 | 0xFFFFFFFFFFFFFFFELL) - 1;
      do
      {
        sub_19B70E824(a1, a2);
        sub_19B70E824(a1, a2);
        if ((*(unint64_t *)((char *)a5 + (((v15 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v15 - 1)) & 1 | (2 * ((*(unint64_t *)((char *)a5 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v15) & 1)))
          sub_19B70E5B0(a1, a2);
        v15 -= 2;
      }
      while (v15 != -1);
    }
    *(_QWORD *)(a1 + 16) = v17;
  }
  else
  {
    sub_19B70C914(v10, a3, 1);
    sub_19B702D50(a1, a2);
  }
  return 0;
}

unint64_t sub_19B70851C(uint64_t a1, unint64_t *a2)
{
  char v2;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v12;

  v2 = 0;
  v12 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v12 = v2;
  v8 = 0;
  if (a1)
  {
    v9 = 64;
    do
    {
      v10 = *a2++;
      v8 = ((((v10 | HIDWORD(v10)) + 0xFFFFFFFF) >> 32) - 1) & v8 | (v9 - __clz(v10 | 1)) & -(uint64_t)(((v10 | HIDWORD(v10)) + 0xFFFFFFFF) >> 32);
      v9 += 64;
      --a1;
    }
    while (a1);
  }
  sub_19B70EAB4(&v12);
  return v8;
}

uint64_t sub_19B7085CC(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  char v3;
  uint64_t v9;
  char v11;

  v3 = 0;
  v11 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v3 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v3 = 1;
    }
  }
  v11 = v3;
  v9 = sub_19B70EA80(a1, a2, a3);
  sub_19B70EAB4(&v11);
  return v9;
}

void sub_19B708634()
{
  abort();
}

uint64_t sub_19B708640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_19B7076D0(a2, a3, a4, a5);
}

uint64_t sub_19B708654(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, char *a7, uint64_t *a8)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  int8x16_t *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64x2_t v19;
  int v20;
  unint64_t v21;
  uint64x2_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unsigned __int128 v32;
  unint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BOOL8 v43;
  _BOOL8 v44;
  unint64_t v45;
  _BOOL8 v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v50;
  size_t v52;
  uint64_t v53;
  char v54;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64[2];
  uint64_t v65[4];

  v65[2] = *MEMORY[0x1E0C80C00];
  v12 = sub_19B708A68(a6, a8);
  v13 = a2 - v12;
  v50 = *(_QWORD *)(a1 + 16);
  v14 = v12 + 1;
  v15 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v16 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v59 = a1;
  v17 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v12 + 1);
  v15[v12] = 0;
  v57 = v12 - 1;
  v18 = __clz(a8[v12 - 1]);
  sub_19B70CFCC(v12, (uint64_t)v15, (uint64_t)a8, v18, v19);
  v20 = -(int)v18;
  v60 = v18;
  v21 = v18 + 0xFFFFFFFF;
  if (v12)
    sub_19B708C08(v12, v16, (void *)(a3 + 8 * v13));
  v53 = -(uint64_t)HIDWORD(v21);
  v54 = v20 & 0x3F;
  sub_19B70C90C(1, (char *)v16 + 8 * v12);
  sub_19B70CFCC(v14, (uint64_t)v16, (uint64_t)v16, v60, v22);
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = v15[v57];
  v27 = -(uint64_t)v26;
  v29 = (unsigned __int128)-(__int128)__PAIR128__(v28, v26) >> 64;
  v30 = 65;
  v31 = v26;
  do
  {
    v32 = __PAIR128__(v29, v27) - __PAIR128__(v31, v23);
    v33 = (unint64_t)((__PAIR128__(v29, v27) - __PAIR128__(v31, v23)) >> 64) >> 63;
    v34 = v29 & ((uint64_t)((__PAIR128__(v29, v27) - __PAIR128__(v31, v23)) >> 64) >> 63);
    v27 = (v33 - 1) & v32 | v27 & (*((uint64_t *)&v32 + 1) >> 63);
    *((_QWORD *)&v35 + 1) = v25;
    *(_QWORD *)&v35 = v24;
    v25 = v35 >> 63;
    *((_QWORD *)&v35 + 1) = v24;
    *(_QWORD *)&v35 = *((_QWORD *)&v32 + 1);
    v29 = (v33 != 0 ? 0 : *((_QWORD *)&v32 + 1)) | v34;
    v24 = (v35 >> 63) ^ 1;
    *((_QWORD *)&v35 + 1) = v31;
    *(_QWORD *)&v35 = v23;
    v23 = v35 >> 1;
    v31 >>= 1;
    --v30;
  }
  while (v30);
  v56 = (v24 + 2) | ((((HIDWORD(v15[v57]) ^ 0x80000000 | v15[v57]) + 0xFFFFFFFF) >> 32) - 1);
  v52 = 8 * v12;
  v58 = v12;
  v36 = (_QWORD *)(a3 - 8 * v12 + 8 * a2);
  v37 = v13;
  do
  {
    v38 = v13;
    v39 = *v36 << v60;
    v16->i64[0] = v39;
    if (v37)
      v16->i64[0] = ((*(v36 - 1) & (unint64_t)v53) >> v54) | v39;
    v40 = v16->u64[v58];
    v41 = v16->i64[v57];
    v63 = v15[v57];
    v42 = ((__PAIR128__(v40, v41) - (unint64_t)v63) >> 64) + ((v40 * (unsigned __int128)v56) >> 64) + 2;
    if (v42 < v40)
      v42 = -1;
    v62 = v42;
    v65[0] = 0;
    v65[1] = 0;
    sub_19B7076D0(1, (uint64_t)v65, (uint64_t)&v62, (uint64_t)&v63);
    v64[0] = v41;
    v64[1] = v40;
    v43 = sub_19B709054(0, 2, v65, v64, (unint64_t *)v65);
    v62 -= 2 * v43;
    v44 = sub_19B708290(0, 2, v65, v65, v63);
    v45 = v62 + v44;
    v17[v58] = sub_19B708A64(v58, v17, v15, v62 + v44);
    v46 = sub_19B709054(v59, v14, v16, v16->i64, v17);
    v47 = v46 - sub_19B70D5CC(v14, v46, v16->i64, v16->i64, (uint64_t *)v15);
    result = sub_19B70D5CC(v14, v47, v16->i64, v16->i64, (uint64_t *)v15);
    if (a5 && v37 < a4)
      *(_QWORD *)(a5 + 8 * v37) = v45 - (v46 + v47);
    if (v37)
      result = (uint64_t)memmove(&v16->u64[1], v16, v52);
    --v37;
    --v36;
    v13 = v38;
  }
  while (v37 <= v38);
  if (a5 && a4 > v38 + 1)
    result = sub_19B70D5B8(8 * (a4 - (v38 + 1)), (void *)(a5 + 8 * (v38 + 1)));
  if (a7)
  {
    sub_19B708C1C(v58, v16, v16, v60);
    if (v58)
      sub_19B708C08(v58, a7, v16);
    result = sub_19B70C90C(a6 - v58, &a7[8 * v58]);
  }
  *(_QWORD *)(v59 + 16) = v50;
  return result;
}

uint64_t sub_19B708A6C(uint64_t a1, uint64_t a2, uint64_t (**a3)(_QWORD, unint64_t, uint64_t))
{
  char v4;
  unint64_t v5;
  uint64_t result;

  v4 = a1;
  v5 = (unint64_t)(a1 + 63) >> 6;
  result = (*a3)(a3, 8 * v5, a2);
  if (!(_DWORD)result)
    *(_QWORD *)(a2 + 8 * v5 - 8) &= 0xFFFFFFFFFFFFFFFFLL >> -(((((unint64_t)(v4 & 0x3F) + 0xFFFFFFFF) >> 32) - 1) & 0x40 | v4 & 0x3F);
  return result;
}

uint64_t sub_19B708AEC(unint64_t a1, _QWORD *a2, unint64_t a3, unsigned __int8 *a4)
{
  char v4;
  unint64_t v10;
  int v11;
  unint64_t v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v22;

  v4 = 0;
  v22 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v4 = 1;
    }
  }
  v22 = v4;
  v10 = 8 * a1;
  if (a3 > 8 * a1)
  {
    v11 = 0;
    v12 = a3 - v10;
    v13 = a4;
    do
    {
      v14 = *v13++;
      v11 |= v14;
      --a3;
    }
    while (a3 > v10);
    if (v11)
    {
      v15 = 4294967289;
      goto LABEL_24;
    }
    a4 += v12;
    a3 = 8 * a1;
  }
  if (a3 < 8)
  {
    v16 = 0;
  }
  else
  {
    v16 = ((a3 - 8) >> 3) + 1;
    v17 = a2;
    v18 = v16;
    do
    {
      *v17++ = bswap64(*(_QWORD *)&a4[a3 - 8]);
      a3 -= 8;
      --v18;
    }
    while (v18);
  }
  if (a3)
  {
    v19 = 0;
    v20 = -(uint64_t)a3;
    do
      v19 = a4[a3 + v20] | (v19 << 8);
    while (!__CFADD__(v20++, 1));
    a2[v16++] = v19;
  }
  if (v16 < a1)
    bzero(&a2[v16], v10 - 8 * v16);
  v15 = 0;
LABEL_24:
  sub_19B70EAB4(&v22);
  return v15;
}

void *sub_19B708C08(uint64_t a1, void *__dst, void *__src)
{
  return memmove(__dst, __src, 8 * a1);
}

uint64_t sub_19B708C1C(uint64_t result, int8x16_t *a2, int8x16_t *a3, uint64_t a4)
{
  if (result)
    return sub_19B70C6F4(result, a2, a3, a4);
  return result;
}

uint64_t sub_19B708C28(uint64_t a1, int8x16_t *a2, int8x16_t *a3, unint64_t a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  result = sub_19B708C1C(a1, a2, a3, a4 & 0x3F);
  if (a1)
  {
    v8 = 0;
    do
    {
      v9 = 0;
      v10 = v8;
      do
      {
        v9 |= ((((v10 ^ ((_DWORD)v8 + (a4 >> 6)) | ((v10 ^ (v8 + (a4 >> 6))) >> 32))
               + 0xFFFFFFFF) >> 32)
             - 1) & a2->i64[v10];
        ++v10;
      }
      while (a1 != v10);
      a2->i64[v8++] = v9;
    }
    while (v8 != a1);
  }
  return result;
}

void *sub_19B708CB8()
{
  return &unk_1E3BD19F0;
}

_QWORD *sub_19B708CC4(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_19B709440(a3, a4, a5);
}

_QWORD *sub_19B708CD4(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  return sub_19B709440(a3, a4, a4);
}

uint64_t sub_19B708CE4(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t *v10;
  _QWORD *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 4;
  v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v11 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  sub_19B709440(v9, a4, a4);
  sub_19B709440(v10, v9, a4);
  sub_19B709440(v10, v10, v10);
  sub_19B709440(v10, v10, v10);
  sub_19B709440(v9, v9, v10);
  sub_19B709440(v10, v9, a4);
  sub_19B708C08(4, v11, v10);
  do
  {
    sub_19B709440(v10, v10, v10);
    --v8;
  }
  while (v8);
  sub_19B709440(v9, v9, v10);
  sub_19B709440(v10, v9, a4);
  v12 = 8;
  do
  {
    sub_19B709440(v10, v10, v10);
    --v12;
  }
  while (v12);
  sub_19B709440(v9, v9, v10);
  sub_19B709440(v10, v9, a4);
  v13 = 16;
  do
  {
    sub_19B709440(v10, v10, v10);
    --v13;
  }
  while (v13);
  sub_19B709440(v9, v9, v10);
  sub_19B709440(v10, v9, a4);
  sub_19B708C08(4, v11, v10);
  v14 = 32;
  do
  {
    sub_19B709440(v11, v11, v11);
    --v14;
  }
  while (v14);
  sub_19B709440(v11, v11, v10);
  v15 = 32;
  do
  {
    sub_19B709440(v11, v11, v11);
    --v15;
  }
  while (v15);
  sub_19B709440(v11, v11, v10);
  sub_19B708C08(4, v10, v11);
  v16 = 32;
  do
  {
    sub_19B709440(v11, v11, v11);
    --v16;
  }
  while (v16);
  sub_19B709440(v11, v11, v9);
  v17 = 96;
  do
  {
    sub_19B709440(v11, v11, v11);
    --v17;
  }
  while (v17);
  sub_19B709440(v10, v10, v11);
  sub_19B709440(v9, v10, a4);
  v19[0] = xmmword_19B71A100;
  v19[1] = *(_OWORD *)algn_19B71A110;
  sub_19B709440(v9, v9, (unint64_t *)v19);
  if (sub_19B708A68(4, (uint64_t *)v9) == 1 && *v9 == 1)
  {
    sub_19B708C08(4, a3, v10);
    result = 0;
  }
  else
  {
    result = 4294967254;
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

_QWORD *sub_19B708FF0(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5[0] = xmmword_19B71A100;
  v5[1] = *(_OWORD *)algn_19B71A110;
  return sub_19B709440(a3, a4, (unint64_t *)v5);
}

BOOL sub_19B709054(uint64_t a1, _BOOL8 a2, _QWORD *a3, uint64_t *a4, unint64_t *a5)
{
  return sub_19B709068(a2, a3, a4, a5);
}

BOOL sub_19B709068(_BOOL8 result, _QWORD *a2, uint64_t *a3, unint64_t *a4)
{
  _BOOL1 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL1 v13;
  _BOOL1 v14;
  _BOOL4 v15;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *i;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL1 v30;
  uint64_t v31;
  _BOOL1 v32;
  uint64_t *v33;
  uint64_t v34;
  _BOOL1 v35;
  _QWORD *v36;
  _BOOL1 v37;
  uint64_t *v38;
  uint64_t v39;
  _BOOL1 v40;
  uint64_t v41;
  _BOOL1 v42;
  uint64_t v43;
  _BOOL1 v44;
  _BOOL1 v45;
  _QWORD *v46;

  v4 = 1;
  if (result)
  {
    if (result)
    {
      v6 = *a3++;
      v5 = v6;
      v7 = *a4++;
      v4 = v5 >= v7;
      *a2++ = v5 - v7;
    }
    if (result & 2)
    {
      v8 = *a3;
      v9 = a3[1];
      a3 += 2;
      v10 = *a4;
      v11 = a4[1];
      a4 += 2;
      v13 = v4;
      v4 = __CFSUB__(v8, v10, v4);
      v12 = v8 - (v10 + !v13);
      v14 = v4;
      v4 = __CFSUB__(v9, v11, v4);
      *a2 = v12;
      a2[1] = v9 - (v11 + !v14);
      a2 += 2;
    }
    v15 = result & 0xFFFFFFFC;
    if (v15)
    {
      v16 = v15 - 4;
      v18 = *a3;
      v19 = a3[1];
      v17 = a3 + 2;
      v21 = *a4;
      v22 = a4[1];
      v20 = (uint64_t *)(a4 + 2);
      v24 = *v17;
      v25 = v17[1];
      v23 = v17 + 2;
      v27 = *v20;
      v28 = v20[1];
      for (i = v20 + 2; v16; i = v38 + 2)
      {
        v30 = v4;
        v4 = __CFSUB__(v18, v21, v4);
        v29 = v18 - (v21 + !v30);
        v32 = v4;
        v4 = __CFSUB__(v19, v22, v4);
        v31 = v19 - (v22 + !v32);
        v18 = *v23;
        v19 = v23[1];
        v33 = v23 + 2;
        v35 = v4;
        v4 = __CFSUB__(v24, v27, v4);
        v34 = v24 - (v27 + !v35);
        *a2 = v29;
        a2[1] = v31;
        v36 = a2 + 2;
        v37 = v4;
        v4 = __CFSUB__(v25, v28, v4);
        v21 = *i;
        v22 = i[1];
        v38 = i + 2;
        *v36 = v34;
        v36[1] = v25 - (v28 + !v37);
        a2 = v36 + 2;
        v16 -= 4;
        v24 = *v33;
        v25 = v33[1];
        v23 = v33 + 2;
        v27 = *v38;
        v28 = v38[1];
      }
      v40 = v4;
      v4 = __CFSUB__(v18, v21, v4);
      v39 = v18 - (v21 + !v40);
      v42 = v4;
      v4 = __CFSUB__(v19, v22, v4);
      v41 = v19 - (v22 + !v42);
      v44 = v4;
      v4 = __CFSUB__(v24, v27, v4);
      v43 = v24 - (v27 + !v44);
      v45 = v4;
      v4 = __CFSUB__(v25, v28, v4);
      *a2 = v39;
      a2[1] = v41;
      v46 = a2 + 2;
      *v46 = v43;
      v46[1] = v25 - (v28 + !v45);
    }
    return !v4;
  }
  return result;
}

unint64_t sub_19B70911C(uint64_t a1, _QWORD *a2, unint64_t *a3, unint64_t a4)
{
  unint64_t v4;
  unsigned __int128 v5;

  for (; a1; --a1)
  {
    v4 = *a3++;
    v5 = v4 - (unsigned __int128)a4;
    *a2++ = v5;
    a4 = *((_QWORD *)&v5 + 1) >> 63;
  }
  return a4;
}

unint64_t sub_19B70914C(uint64_t a1, unint64_t *a2)
{
  char v2;
  unint64_t v8;
  char v10;

  v2 = 0;
  v10 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v2 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v2 = 1;
    }
  }
  v10 = v2;
  v8 = (sub_19B70851C(a1, a2) + 7) >> 3;
  sub_19B70EAB4(&v10);
  return v8;
}

uint64_t sub_19B7091B8(uint64_t a1, unint64_t *a2, unint64_t a3, char *__s)
{
  char *v4;
  unint64_t v5;
  char v8;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char v25;

  v4 = __s;
  v5 = a3;
  v8 = 0;
  v25 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v25 = v8;
  if (a3 <= 0x7FFFFFFE
    && (v14 = 8 * a1, (unint64_t)(8 * a1) <= 0x7FFFFFFE)
    && ((v15 = a3 - v14, a3 <= v14) ? (LODWORD(v15) = 0) : (sub_19B70D5B8(a3 - v14, __s), v4 += v15, v5 = 8 * a1),
        v16 = sub_19B70914C(a1, a2),
        v5 >= v16))
  {
    v17 = (v15 + v5 - v16);
    if (v5 < 8)
    {
      v19 = 0;
    }
    else
    {
      v19 = ((v5 - 8) >> 3) + 1;
      v20 = a2;
      v21 = v19;
      do
      {
        v22 = *v20++;
        *(_QWORD *)&v4[v5 - 8] = bswap64(v22);
        v5 -= 8;
        --v21;
      }
      while (v21);
    }
    if (v5)
    {
      v23 = a2[v19];
      v24 = &v4[v5 - 1];
      do
      {
        *v24-- = v23;
        v23 >>= 8;
        --v5;
      }
      while (v5);
    }
  }
  else
  {
    v17 = 4294967289;
  }
  sub_19B70EAB4(&v25);
  return v17;
}

BOOL sub_19B709300(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *i;
  uint64_t v8;
  _BOOL8 v9;

  if (!a1)
    return a4;
  v5 = *a3;
  v4 = a3 + 1;
  v6 = __CFADD__(v5, a4);
  *a2 = v5 + a4;
  for (i = a2 + 1; --a1; ++i)
  {
    v8 = *v4++;
    v9 = v6;
    v6 = __CFADD__(v6, v8);
    *i = v9 + v8;
  }
  return v6;
}

uint64_t sub_19B709338(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  _BOOL8 v10;
  uint64_t v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;

  result = sub_19B708310();
  v9 = __ROR8__(0x5555555555555555, a2 | (2 * result));
  if (a1)
  {
    v10 = 1;
    do
    {
      v12 = *a4++;
      v11 = v12;
      v13 = v10 + ~v12;
      v10 = __CFADD__(v10, ~v12);
      v14 = v11 ^ v13;
      v15 = v11 ^ result;
      *a3 = v15;
      *a3++ = v14 & v9 ^ v14 & 0x5555555555555555 ^ v15 ^ result;
      --a1;
    }
    while (a1);
  }
  return result;
}

unint64_t sub_19B7093C4(uint64_t a1)
{
  char v1;
  unint64_t v7;
  char v9;

  v1 = 0;
  v9 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v1 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v1 = 1;
    }
  }
  v9 = v1;
  v7 = ((unint64_t)(sub_19B7076C4(a1) + 7) >> 3) + 1;
  sub_19B70EAB4(&v9);
  return v7;
}

uint64_t sub_19B709434()
{
  return 8;
}

_QWORD *sub_19B709440(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL1 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  _BOOL8 v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  _BOOL8 v87;
  unint64_t v88;
  _BOOL8 v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unsigned __int128 v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unsigned __int128 v98;
  unint64_t v99;
  _BOOL8 v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unsigned __int128 v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unsigned __int128 v109;
  unint64_t v110;
  _BOOL8 v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unsigned __int128 v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unsigned __int128 v120;
  unint64_t v121;
  _BOOL8 v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unsigned __int128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v9 = *a3;
  v10 = a3[1];
  v8 = a3 + 2;
  v11 = *v8;
  v12 = v8[1];
  v13 = v4 * v9;
  v14 = (v5 * (unsigned __int128)v9) >> 64;
  v15 = *v3 * v9;
  v16 = (v6 * (unsigned __int128)v9) >> 64;
  v18 = v9;
  v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  v21 = (v7 * (unsigned __int128)v9) >> 64;
  v22 = (v7 * (unsigned __int128)v10) >> 64;
  v24 = v19;
  v19 = __CFADD__(v19, v16);
  v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  v26 = v19;
  v19 = __CFADD__(v19, v21);
  v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  v27 = v7 * *v8;
  v28 = (v7 * (unsigned __int128)v11) >> 64;
  v30 = v19;
  v19 = __CFADD__(v19, v22);
  v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  v32 = v19;
  v19 = __CFADD__(v19, v28);
  v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  v34 = (v4 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v17, v4 * v10);
  v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  v37 = v19;
  v19 = __CFADD__(v19, v20);
  v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  v38 = (v6 * (unsigned __int128)v10) >> 64;
  v40 = v19;
  v19 = __CFADD__(v19, v23);
  v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  v42 = v19;
  v19 = __CFADD__(v19, v25);
  v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  v43 = (v6 * (unsigned __int128)v12) >> 64;
  v45 = v19;
  v19 = __CFADD__(v19, v29);
  v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  v47 = v19;
  v19 = __CFADD__(v19, v31);
  v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  v48 = v19 + v33;
  v49 = (v5 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v36, v5 * v10);
  v50 = v36 + v5 * v10;
  v52 = v19;
  v19 = __CFADD__(v19, v39);
  v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  v53 = (v6 * (unsigned __int128)v11) >> 64;
  v55 = v19;
  v19 = __CFADD__(v19, v41);
  v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  v57 = v19;
  v19 = __CFADD__(v19, v44);
  v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  v58 = v19;
  v59 = (v4 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v50, v4 * v11);
  v60 = v50 + v4 * v11;
  v62 = v19;
  v19 = __CFADD__(v19, v51);
  v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  v63 = (v5 * (unsigned __int128)v12) >> 64;
  v65 = v19;
  v19 = __CFADD__(v19, v54);
  v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  v67 = v19;
  v19 = __CFADD__(v19, v56);
  v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  v68 = v19 + v58;
  v69 = (v5 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v61, v5 * v11);
  v70 = v61 + v5 * v11;
  v72 = v19;
  v19 = __CFADD__(v19, v64);
  v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  v73 = v19;
  v74 = (v4 * (unsigned __int128)v12) >> 64;
  v19 = __CFADD__(v70, v4 * v12);
  v75 = v70 + v4 * v12;
  v77 = v19;
  v19 = __CFADD__(v19, v71);
  v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  v79 = v19;
  v19 = __CFADD__(v19, v66);
  v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  v81 = v19;
  v19 = __CFADD__(v19, v46);
  v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  v82 = v19 + v48;
  v83 = 0xFFFFFFFF00000000 * v13;
  v84 = (unint64_t)-v13 >> 32;
  v19 = __CFADD__(__CFADD__(v13, -v13), v35);
  v85 = __CFADD__(v13, -v13) + v35;
  v87 = v19;
  v19 = __CFADD__(v19, v60);
  v86 = v87 + v60;
  v89 = v19;
  v19 = __CFADD__(v19, v75);
  v88 = v89 + v75;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v13, v88);
  v88 += 0xFFFFFFFF00000000 * v13;
  v90 = v19 + v84;
  v19 = v85 >= v83;
  v91 = v85 - v83;
  LOBYTE(v89) = v19;
  v19 = __CFSUB__(v86, v84, v19);
  v92 = v86 - (v84 + !v89);
  v93 = __PAIR128__(v90, v88) - !v19;
  v94 = 0xFFFFFFFF00000000 * v91;
  v95 = (unint64_t)-(uint64_t)v91 >> 32;
  v19 = __CFADD__(__CFADD__(v91, -(uint64_t)v91), v92);
  v98 = __PAIR128__(v93, __CFADD__(v91, -(uint64_t)v91)) + v92;
  v97 = v98 >> 64;
  v96 = v98;
  v100 = __CFADD__(v19, (_QWORD)v93);
  v19 = __CFADD__(v100, v76);
  v99 = v100 + v76;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v91, v99);
  v99 += 0xFFFFFFFF00000000 * v91;
  v101 = v19 + v95;
  v19 = v96 >= v94;
  v102 = v96 - v94;
  LOBYTE(v100) = v19;
  v19 = __CFSUB__(v97, v95, v19);
  v103 = v97 - (v95 + !v100);
  v104 = __PAIR128__(v101, v99) - !v19;
  v105 = 0xFFFFFFFF00000000 * v102;
  v106 = (unint64_t)-(uint64_t)v102 >> 32;
  v19 = __CFADD__(__CFADD__(v102, -(uint64_t)v102), v103);
  v109 = __PAIR128__(v104, __CFADD__(v102, -(uint64_t)v102)) + v103;
  v108 = v109 >> 64;
  v107 = v109;
  v111 = __CFADD__(v19, (_QWORD)v104);
  v19 = __CFADD__(v111, v78);
  v110 = v111 + v78;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v102, v110);
  v110 += 0xFFFFFFFF00000000 * v102;
  v112 = v19 + v106;
  v19 = v107 >= v105;
  v113 = v107 - v105;
  LOBYTE(v111) = v19;
  v19 = __CFSUB__(v108, v106, v19);
  v114 = v108 - (v106 + !v111);
  v115 = __PAIR128__(v112, v110) - !v19;
  v116 = 0xFFFFFFFF00000000 * v113;
  v117 = (unint64_t)-(uint64_t)v113 >> 32;
  v19 = __CFADD__(__CFADD__(v113, -(uint64_t)v113), v114);
  v120 = __PAIR128__(v115, __CFADD__(v113, -(uint64_t)v113)) + v114;
  v119 = v120 >> 64;
  v118 = v120;
  v122 = __CFADD__(v19, (_QWORD)v115);
  v19 = __CFADD__(v122, v80);
  v121 = v122 + v80;
  v19 |= __CFADD__(0xFFFFFFFF00000000 * v113, v121);
  v121 += 0xFFFFFFFF00000000 * v113;
  v123 = v19 + v117;
  v19 = v118 >= v116;
  v124 = v118 - v116;
  LOBYTE(v122) = v19;
  v19 = __CFSUB__(v119, v117, v19);
  v125 = v119 - (v117 + !v122);
  v126 = __PAIR128__(v123, v121) - !v19;
  v127 = v126
       + (__CFADD__(__CFADD__(*((_QWORD *)&v93 + 1), v124), *((_QWORD *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1)))
       + *((_QWORD *)&v115 + 1);
  v128 = v82
       + (__CFADD__(__CFADD__(__CFADD__(*((_QWORD *)&v93 + 1), v124), *((_QWORD *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1)), *((_QWORD *)&v115 + 1)) | __CFADD__((_QWORD)v126, (__CFADD__(__CFADD__(*((_QWORD *)&v93 + 1), v124), *((_QWORD *)&v104 + 1)) | __CFADD__(v125, __CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1)))+ *((_QWORD *)&v115 + 1)))+ *((_QWORD *)&v126 + 1);
  v129 = *((_QWORD *)&v93 + 1) + v124 - 1;
  v130 = v125
       + __CFADD__(*((_QWORD *)&v93 + 1), v124)
       + *((_QWORD *)&v104 + 1)
       - ((*((_QWORD *)&v93 + 1) + v124 == 0)
        - 0x100000000);
  v19 = __CFSUB__(v127, -1, __PAIR128__(v125 + (unint64_t)__CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1), *((_QWORD *)&v93 + 1) + v124) >= __PAIR128__(0xFFFFFFFF00000000, 1));
  v131 = v127
       - ((__PAIR128__(v125 + (unint64_t)__CFADD__(*((_QWORD *)&v93 + 1), v124) + *((_QWORD *)&v104 + 1), *((_QWORD *)&v93 + 1) + v124) < __PAIR128__(0xFFFFFFFF00000000, 1))- 1);
  LOBYTE(v122) = v19;
  v19 = __CFSUB__(v128, 0xFFFFFFFFLL, v19);
  v132 = v128 - (!v122 + 0xFFFFFFFFLL);
  v133 = 1 - !v19;
  v134 = 1 - !v19;
  v19 = __CFADD__(__CFADD__(v129, v133 >> 63), v130);
  v135 = __CFADD__(v129, v133 >> 63) + v130;
  v137 = v19 | __CFADD__(v133 & 0xFFFFFFFF00000000, v135);
  v19 = __CFADD__(v137, v131);
  v136 = v137 + v131;
  *a1 = v129 + (v133 >> 63);
  a1[1] = (v133 & 0xFFFFFFFF00000000) + v135;
  result = a1 + 2;
  *result = v133 + v136;
  result[1] = v134 + (v19 | __CFADD__(v133, v136)) + v132;
  return result;
}

uint64_t sub_19B709664(unint64_t a1, _BYTE *a2, unint64_t a3, char *a4, uint64_t a5, _QWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  char *v12;
  char v13;
  uint64_t v14;
  char v15;
  char *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE *v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  char v27;
  char v28;
  char v29;

  *a6 = 0;
  a6[1] = 0;
  if (a5)
  {
    v9 = *(unsigned __int8 *)(a5 + 1);
    v10 = a3 + v9 + 10;
  }
  else
  {
    v9 = 0;
    v10 = a3;
  }
  if (v10 + 11 > a1)
    return 4294967273;
  v12 = a2 + 2;
  v13 = a2[1] ^ 1 | *a2;
  if (a1 - v10 != 3)
  {
    v14 = v10 - a1 + 3;
    do
    {
      v15 = *v12++;
      v13 |= ~v15;
    }
    while (!__CFADD__(v14++, 1));
    v12 = &a2[~v10 + a1];
  }
  v17 = v12 + 1;
  v18 = *v12 | v13;
  if (a5)
  {
    v19 = v12[1] ^ 0x30;
    v20 = v12[2] ^ (v10 - 2);
    v21 = v12[3] ^ 0x30;
    v22 = v12 + 5;
    v23 = v12[4] ^ (v9 + 4);
    v24 = v9 + 2;
    v25 = sub_19B706BE4(v9 + 2, v12 + 5, (char *)a5);
    v26 = &v22[v24];
    v27 = v22[v24] ^ 5;
    v28 = v22[v24 + 1];
    v29 = v22[v24 + 2] ^ 4;
    v17 = &v22[v24 + 4];
    v18 |= v19 | v20 | v21 | v23 | v25 | v27 | v28 | v29 | v26[3] ^ a3;
  }
  sub_19B709890((uint64_t)a6, (uint64_t)&unk_19B71A3B0, a3, (uint64_t)a4, (uint64_t)v17);
  return (v18 | sub_19B706BE4(a3, v17, a4));
}

unsigned __int8 *sub_19B7097F0(unint64_t a1, _QWORD *a2, _QWORD *a3, unsigned __int8 *a4, unsigned __int8 *a5)
{
  unsigned __int8 *v6[2];

  if (!a4)
    return 0;
  v6[0] = a4;
  v6[1] = a5;
  if (sub_19B702ABC(v6, a1, a2, a3))
    return v6[0];
  else
    return 0;
}

unint64_t sub_19B70983C(uint64_t a1, _QWORD *a2, uint64_t *a3, _BOOL8 a4, unint64_t *a5)
{
  uint64_t v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;

  v5 = a1 - a4;
  v6 = &a2[a4];
  v7 = (unint64_t *)&a3[a4];
  v8 = sub_19B709054(0, a4, a2, a3, a5);
  return sub_19B70911C(v5, v6, v7, v8);
}

uint64_t sub_19B709890(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t i;
  uint64_t j;

  for (i = 0; i != 16; ++i)
    *(_BYTE *)(result + i) = *(_BYTE *)(a5 + i % a3) ^ *(_BYTE *)(a4 + i % a3) ^ *(_BYTE *)(a2 + i);
  if (a3 >= 0x11)
  {
    for (j = 16; j != a3; ++j)
      *(_BYTE *)(result + (j & 0xF)) ^= *(_BYTE *)(a5 + j) ^ *(_BYTE *)(a4 + j);
  }
  return result;
}

uint64_t sub_19B7098F8(uint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  unint64_t *v5;

  v4 = *a1;
  v5 = (unint64_t *)sub_19B70E830((uint64_t)&a1[5 * *a1 + 4]);
  if ((sub_19B7085CC(v4, a2, v5) & 0x80000000) == 0)
    return 0xFFFFFFFFLL;
  if (sub_19B708A68(*a1, (uint64_t *)a2))
    return 0;
  return 0xFFFFFFFFLL;
}

int32x4_t *sub_19B709A70(int32x4_t *result, uint64_t a2, int8x16_t *a3)
{
  int8x16_t *v3;
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int32x4_t v9;
  __int128 *v19;
  int v20;
  int32x4_t v22;
  int32x4_t v28;
  int32x4_t v30;
  int32x4_t v32;
  BOOL v44;
  uint64_t v45;
  int32x4_t *v46;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v52;

  if (a2)
  {
    v4 = *a3;
    v5 = a3[1];
    v6 = a3[2];
    v7 = a3[3];
    v3 = a3 + 4;
    _Q1 = (int32x4_t)vrev32q_s8(v5);
    v9 = *result;
    _Q2 = (int32x4_t)vrev32q_s8(v6);
    _Q17 = result[1];
    _Q3 = (int32x4_t)vrev32q_s8(v7);
    _Q18 = *result;
    _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(v4), (int32x4_t)xmmword_19B709970);
    _Q5 = vaddq_s32(_Q1, (int32x4_t)xmmword_19B709980);
    _Q19 = _Q17;
    _Q6 = vaddq_s32(_Q2, (int32x4_t)xmmword_19B709990);
    _Q7 = vaddq_s32(_Q3, (int32x4_t)xmmword_19B7099A0);
    v19 = &xmmword_19B7099B0;
    v20 = 3;
    do
    {
      _Q20 = _Q18;
      v22 = (int32x4_t)*v19;
      __asm { SHA256SU0       V0.4S, V1.4S }
      v28 = (int32x4_t)v19[1];
      __asm { SHA256H         Q18, Q19, V4.4S }
      v30 = (int32x4_t)v19[2];
      __asm { SHA256SU1       V0.4S, V2.4S, V3.4S }
      v32 = (int32x4_t)v19[3];
      __asm { SHA256H2        Q19, Q20, V4.4S }
      v19 += 4;
      _Q4 = vaddq_s32(_Q0, v22);
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V1.4S, V2.4S
        SHA256H         Q18, Q19, V5.4S
        SHA256SU1       V1.4S, V3.4S, V0.4S
        SHA256H2        Q19, Q20, V5.4S
      }
      _Q5 = vaddq_s32(_Q1, v28);
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V2.4S, V3.4S
        SHA256H         Q18, Q19, V6.4S
        SHA256SU1       V2.4S, V0.4S, V1.4S
        SHA256H2        Q19, Q20, V6.4S
      }
      _Q6 = vaddq_s32(_Q2, v30);
      --v20;
      _Q20 = _Q18;
      __asm
      {
        SHA256SU0       V3.4S, V0.4S
        SHA256H         Q18, Q19, V7.4S
        SHA256SU1       V3.4S, V1.4S, V2.4S
        SHA256H2        Q19, Q20, V7.4S
      }
      _Q7 = vaddq_s32(_Q3, v32);
    }
    while (!(_NF ^ _VF | _ZF));
    v44 = a2 <= 1;
    v45 = a2 - 1;
    if (!v44)
    {
      v46 = (int32x4_t *)(v19 - 16);
      do
      {
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V4.4S }
        v49 = v3[1];
        v50 = v3[2];
        __asm { SHA256H2        Q19, Q20, V4.4S }
        v52 = v3[3];
        _Q4 = vaddq_s32((int32x4_t)vrev32q_s8(*v3), *v46);
        _Q20 = _Q18;
        v3 += 4;
        __asm { SHA256H         Q18, Q19, V5.4S }
        _Q1 = (int32x4_t)vrev32q_s8(v49);
        __asm { SHA256H2        Q19, Q20, V5.4S }
        _Q5 = vaddq_s32(_Q1, v46[1]);
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V6.4S }
        _Q2 = (int32x4_t)vrev32q_s8(v50);
        __asm { SHA256H2        Q19, Q20, V6.4S }
        _Q6 = vaddq_s32(_Q2, v46[2]);
        _Q20 = _Q18;
        __asm { SHA256H         Q18, Q19, V7.4S }
        _Q3 = (int32x4_t)vrev32q_s8(v52);
        __asm { SHA256H2        Q19, Q20, V7.4S }
        _Q7 = vaddq_s32(_Q3, v46[3]);
        v9 = vaddq_s32(v9, _Q18);
        _Q17 = vaddq_s32(_Q17, _Q19);
        _Q20 = v9;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[4]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[5]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[6]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[7]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[8]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[9]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[10]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[11]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V0.4S, V1.4S
          SHA256H         Q18, Q19, V4.4S
          SHA256SU1       V0.4S, V2.4S, V3.4S
          SHA256H2        Q19, Q20, V4.4S
        }
        _Q4 = vaddq_s32(_Q0, v46[12]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V1.4S, V2.4S
          SHA256H         Q18, Q19, V5.4S
          SHA256SU1       V1.4S, V3.4S, V0.4S
          SHA256H2        Q19, Q20, V5.4S
        }
        _Q5 = vaddq_s32(_Q1, v46[13]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V2.4S, V3.4S
          SHA256H         Q18, Q19, V6.4S
          SHA256SU1       V2.4S, V0.4S, V1.4S
          SHA256H2        Q19, Q20, V6.4S
        }
        _Q6 = vaddq_s32(_Q2, v46[14]);
        _Q20 = _Q18;
        __asm
        {
          SHA256SU0       V3.4S, V0.4S
          SHA256H         Q18, Q19, V7.4S
          SHA256SU1       V3.4S, V1.4S, V2.4S
          SHA256H2        Q19, Q20, V7.4S
        }
        _Q7 = vaddq_s32(_Q3, v46[15]);
        v44 = v45-- <= 1;
      }
      while (!v44);
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V4.4S
      SHA256H2        Q19, Q20, V4.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V5.4S
      SHA256H2        Q19, Q20, V5.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V6.4S
      SHA256H2        Q19, Q20, V6.4S
    }
    _Q20 = _Q18;
    __asm
    {
      SHA256H         Q18, Q19, V7.4S
      SHA256H2        Q19, Q20, V7.4S
    }
    *result = vaddq_s32(v9, _Q18);
    result[1] = vaddq_s32(_Q17, _Q19);
  }
  return result;
}

uint64_t sub_19B709D70(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;

  v8 = a2 + 3;
  v9 = *a2;
  v10 = sub_19B70851C(*a2, (unint64_t *)&a2[2 * *a2 + 4]);
  if (v9)
    v11 = v10 >= 2;
  else
    v11 = 0;
  if (v11 && ((unint64_t)sub_19B708A68(v9, v8) > 1 || (unint64_t)*v8 >= 2))
    return sub_19B70E0A4(a1, a2, a3, a4, (unint64_t *)&v8[2 * *a2 + 1]);
  else
    return 4294967268;
}

uint64_t sub_19B709E20(unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, _BYTE *a7)
{
  char v8;
  unsigned int v14;
  uint64_t v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  *a7 = 0;
  v14 = sub_19B709EAC(a1, a2, a3, a4, a5, a6, 0);
  if (v14)
  {
    if (v14 == -146)
      v15 = 0;
    else
      v15 = v14;
  }
  else
  {
    v15 = 0;
    *a7 = 1;
  }
  sub_19B70EAB4(&v17);
  return v15;
}

uint64_t sub_19B709EAC(unint64_t *a1, uint64_t a2, unint64_t a3, char *a4, unint64_t a5, unsigned __int8 *a6, _QWORD *a7)
{
  char v13;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v30[4];
  void (*v31)(uint64_t);
  char v32;

  v13 = 0;
  v32 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v13 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v13 = 1;
    }
  }
  v32 = v13;
  v19 = *a1;
  v20 = sub_19B707D4C();
  v21 = sub_19B709434();
  v30[0] = sub_19B70E8E4(8 * ((v20 + v21 - 1) / v21 + 13 * v19) + 8);
  v22 = *a1;
  v23 = sub_19B707D4C();
  v24 = sub_19B709434();
  v30[1] = (v23 + v24 - 1) / v24 + 13 * v22 + 1;
  v30[2] = 0;
  v30[3] = sub_19B70E91C;
  v31 = sub_19B70E960;
  if (v30[0])
  {
    v25 = sub_19B709FFC((uint64_t)v30, a1, a2, a3, a4, a5, a6, a7);
    v27 = v26;
    ((void (*)(_QWORD *, double))v31)(v30, v25);
  }
  else
  {
    v27 = 4294967283;
  }
  sub_19B70EAB4(&v32);
  return v27;
}

double sub_19B709FFC(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t a4, char *a5, unint64_t a6, unsigned __int8 *a7, _QWORD *a8)
{
  double result;
  __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (a8)
  {
    *a8 = 0;
    a8[1] = 0;
  }
  v10 = 0uLL;
  sub_19B70533C(a1, a2, a3, a4, a5, a6, a7, 0, (unsigned __int8 *)&v10);
  if (a8)
  {
    result = *(double *)&v10;
    *(_OWORD *)a8 = v10;
  }
  return result;
}

uint64_t sub_19B70A074(uint64_t a1, unint64_t *a2, int a3, uint64_t a4, unsigned __int8 *a5, unint64_t *a6)
{
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unsigned int v20;
  unsigned __int8 *v21;
  unint64_t *v22;
  uint64_t v23;

  if (!a4)
    return 4294967289;
  v11 = *a2;
  if (a4 == 1 && !*a5)
    return 4294967136;
  switch(a3)
  {
    case 4:
      v12 = 4294967124;
      if (a4 != (unint64_t)(sub_19B7076C4((uint64_t)a2) + 7) >> 3)
        return v12;
      goto LABEL_20;
    case 1:
      if ((((unint64_t)(sub_19B7076C4((uint64_t)a2) + 7) >> 2) | 1) != a4)
        return 4294967126;
      v12 = 4294967126;
      if (*a5 != 4)
        return v12;
LABEL_20:
      v14 = *(_QWORD *)(a1 + 16);
      v15 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v11);
      if (a3 == 4)
        v16 = a5;
      else
        v16 = a5 + 1;
      v17 = sub_19B7076C4((uint64_t)a2);
      v18 = sub_19B708AEC(v11, a6, (unint64_t)(v17 + 7) >> 3, v16);
      if ((_DWORD)v18)
        goto LABEL_38;
      if (sub_19B7085CC(v11, a6, a2 + 3) == -1)
      {
        if ((a3 - 3) <= 1)
        {
          v18 = sub_19B7051C0(a1, a2, (uint64_t)a6, a6);
          if (!(_DWORD)v18)
          {
            sub_19B702D80((uint64_t)a2, v15, (uint64_t *)&a6[*a2]);
            v19 = &a6[*a2];
            if (a3 == 4)
              v20 = sub_19B7085CC(v11, (unint64_t *)v15, v19) >> 31;
            else
              LOBYTE(v20) = (*v19 & 1) != (*a5 & 1);
            sub_19B7082B0(v11, v20, (uint64_t *)v19, v15, (uint64_t *)v19);
            goto LABEL_35;
          }
LABEL_38:
          v12 = v18;
          goto LABEL_36;
        }
        v21 = &a5[((unint64_t)(sub_19B7076C4((uint64_t)a2) + 7) >> 3) + 1];
        v22 = &a6[*a2];
        v23 = sub_19B7076C4((uint64_t)a2);
        v12 = sub_19B708AEC(v11, v22, (unint64_t)(v23 + 7) >> 3, v21);
        if (!(_DWORD)v12)
        {
          if (a3 != 2 || (a6[*a2] & 1) == (*a5 & 1))
          {
LABEL_35:
            v12 = 0;
            goto LABEL_36;
          }
          v12 = 4294967125;
        }
      }
LABEL_36:
      *(_QWORD *)(a1 + 16) = v14;
      return v12;
    case 2:
      if ((((unint64_t)(sub_19B7076C4((uint64_t)a2) + 7) >> 2) | 1) != a4)
        return 4294967125;
      v13 = *a5 - 8;
      v12 = 4294967125;
      goto LABEL_19;
  }
  if (a3 != 3)
    return 4294967289;
  if (sub_19B7093C4((uint64_t)a2) != a4)
    return 4294967135;
  v13 = *a5 - 4;
  v12 = 4294967135;
LABEL_19:
  if (v13 >= 0xFFFFFFFE)
    goto LABEL_20;
  return v12;
}

unsigned int *sub_19B70A328(unsigned int *result, uint64_t a2, const char *a3)
{
  unsigned int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint16x8_t v9;
  uint16x8_t v10;
  uint16x8_t v19;
  uint16x8_t v20;
  int8x16_t v21;
  uint16x8_t v22;
  unint64_t v23;
  unint64_t v24;
  __int32 *v25;
  int v26;
  int v27;
  int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  int v35;
  unsigned int v36;
  int v37;
  unint64_t v38;
  int v39;
  unsigned int v40;
  unint64_t v41;
  int v42;
  int v43;
  unint64_t v44;
  int *v45;
  unint64_t i;
  unint64_t v47;
  unsigned int v48;
  int v49;
  int v50;
  unint64_t v51;
  unsigned int v52;
  int v53;
  int v54;
  unint64_t v55;
  unsigned int v56;
  int v57;
  unint64_t v58;
  int v59;
  unint64_t v60;
  int v61;
  int *v62;
  unint64_t v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  int v68;
  unint64_t v69;
  int v70;
  int v71;
  int v72;
  int v73;
  unint64_t v74;
  int v75;
  int v76;
  int *v77;
  unint64_t j;
  unint64_t v79;
  unsigned int v80;
  int v81;
  int v82;
  unint64_t v83;
  unsigned int v84;
  int v85;
  int v86;
  unint64_t v87;
  unsigned int v88;
  int v89;
  unint64_t v90;
  int v91;
  unint64_t v92;
  int v93;
  int8x16_t v94;
  int8x16_t v95;
  int8x16_t v96;
  int8x16_t v97;
  _OWORD v98[2];
  _OWORD v99[5];
  _OWORD v100[5];
  _OWORD v101[4];
  uint64_t v102;
  int8x16x4_t v103;

  v102 = *MEMORY[0x1E0C80C00];
  memset(v101, 0, sizeof(v101));
  memset(v100, 0, sizeof(v100));
  memset(v99, 0, sizeof(v99));
  memset(v98, 0, sizeof(v98));
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  if (a2)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
    v6 = result[3];
    v7 = result[4];
    do
    {
      v8 = 0;
      v103 = vld4q_s8(a3);
      v9 = vmovl_u8(*(uint8x8_t *)v103.val[0].i8);
      v10 = vmovl_high_u8((uint8x16_t)v103.val[0]);
      _Q16 = vmovl_u8(*(uint8x8_t *)v103.val[1].i8);
      _Q17 = vmovl_high_u8((uint8x16_t)v103.val[1]);
      __asm
      {
        SHLL2           V18.4S, V17.8H, #0x10
        SHLL2           V19.4S, V16.8H, #0x10
      }
      v19 = vmovl_high_u8((uint8x16_t)v103.val[2]);
      v20 = vmovl_u8(*(uint8x8_t *)v103.val[2].i8);
      v21 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v20.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v9.i8), 0x18uLL));
      v22 = vmovl_high_u8((uint8x16_t)v103.val[3]);
      v103.val[0] = (int8x16_t)vmovl_u8(*(uint8x8_t *)v103.val[3].i8);
      v96 = vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v19.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v10.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v22.i8));
      v97 = vorrq_s8(vorrq_s8(vorrq_s8(_Q18, (int8x16_t)vshll_high_n_u16(v19, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v10), 0x18uLL)), (int8x16_t)vmovl_high_u16(v22));
      v94 = vorrq_s8(v21, (int8x16_t)vmovl_u16(*(uint16x4_t *)v103.val[0].i8));
      v95 = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v20, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v9), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v103.val[0]));
      do
      {
        HIDWORD(v23) = v96.i32[v8] ^ v97.i32[v8 + 1] ^ v94.i32[v8 + 2] ^ v94.i32[v8];
        LODWORD(v23) = HIDWORD(v23);
        *(_DWORD *)((char *)v98 + v8 * 4) = v23 >> 31;
        ++v8;
      }
      while (v8 != 64);
      v24 = -5;
      v25 = &v94.i32[2];
      v26 = v7;
      v27 = v6;
      v28 = v5;
      v29 = v4;
      v30 = v3;
      do
      {
        HIDWORD(v31) = v30;
        LODWORD(v31) = v30;
        v32 = (v31 >> 27) + v26 + 1518500249 + (v28 & v29 | v27 & ~v29) + *(v25 - 2);
        HIDWORD(v31) = v29;
        LODWORD(v31) = v29;
        v33 = v31 >> 2;
        v34 = __PAIR64__(v32, __ROR4__(v29, 2));
        v35 = v30 & v34 | v28 & ~v30;
        LODWORD(v34) = v32;
        v36 = v27 + 1518500249 + v35 + *(v25 - 1) + (v34 >> 27);
        HIDWORD(v34) = v30;
        LODWORD(v34) = v30;
        v37 = v34 >> 2;
        v38 = __PAIR64__(v36, __ROR4__(v30, 2));
        v39 = v32 & v38 | v33 & ~v32;
        LODWORD(v38) = v36;
        v40 = v28 + 1518500249 + *v25 + v39 + (v38 >> 27);
        HIDWORD(v38) = v32;
        LODWORD(v38) = v32;
        v26 = v38 >> 2;
        v41 = __PAIR64__(v40, __ROR4__(v32, 2));
        v42 = v36 & v41 | v37 & ~v36;
        LODWORD(v41) = v40;
        v29 = v33 + 1518500249 + v25[1] + v42 + (v41 >> 27);
        HIDWORD(v41) = v36;
        LODWORD(v41) = v36;
        v27 = v41 >> 2;
        HIDWORD(v41) = v29;
        LODWORD(v41) = v29;
        v43 = v41 >> 27;
        v44 = __PAIR64__(v40, __ROR4__(v36, 2));
        v30 = v37 + 1518500249 + v25[2] + (v40 & v44 | v26 & ~v40) + v43;
        LODWORD(v44) = v40;
        v28 = v44 >> 2;
        v24 += 5;
        v25 += 5;
      }
      while (v24 < 0xF);
      --a2;
      v45 = (int *)v99;
      for (i = 15; i < 0x23; i += 5)
      {
        HIDWORD(v47) = v30;
        LODWORD(v47) = v30;
        v48 = (v47 >> 27) + 1859775393 + (v28 ^ v29 ^ v27) + v26 + *(v45 - 4);
        HIDWORD(v47) = v29;
        LODWORD(v47) = v29;
        v49 = v47 >> 2;
        HIDWORD(v47) = v48;
        LODWORD(v47) = v48;
        v50 = v47 >> 27;
        v51 = __PAIR64__(v30, __ROR4__(v29, 2));
        v52 = v27 + 1859775393 + (v30 ^ v51 ^ v28) + *(v45 - 3) + v50;
        LODWORD(v51) = v30;
        v53 = v51 >> 2;
        HIDWORD(v51) = v52;
        LODWORD(v51) = v52;
        v54 = v51 >> 27;
        v55 = __PAIR64__(v48, __ROR4__(v30, 2));
        v56 = v28 + 1859775393 + *(v45 - 2) + (v49 ^ v55 ^ v48) + v54;
        LODWORD(v55) = v48;
        v26 = v55 >> 2;
        HIDWORD(v55) = v56;
        LODWORD(v55) = v56;
        v57 = v55 >> 27;
        v58 = __PAIR64__(v52, __ROR4__(v30, 2));
        v29 = v49 + 1859775393 + *(v45 - 1) + (v26 ^ v58 ^ v52) + v57;
        LODWORD(v58) = v52;
        v27 = v58 >> 2;
        HIDWORD(v58) = v29;
        LODWORD(v58) = v29;
        v59 = v58 >> 27;
        v60 = __PAIR64__(v56, __ROR4__(v48, 2));
        v61 = *v45;
        v45 += 5;
        v30 = v53 + 1859775393 + v61 + (v27 ^ v60 ^ v56) + v59;
        LODWORD(v60) = v56;
        v28 = v60 >> 2;
      }
      v62 = (int *)v100;
      v63 = 35;
      do
      {
        HIDWORD(v65) = v30;
        LODWORD(v65) = v30;
        v64 = v65 >> 27;
        HIDWORD(v65) = v29;
        LODWORD(v65) = v29;
        v66 = v65 >> 2;
        v67 = v64 + v26 - 1894007588 + (v27 & (v28 | v29) | v28 & v29) + *(v62 - 4);
        HIDWORD(v65) = v67;
        LODWORD(v65) = v67;
        v68 = v65 >> 27;
        v69 = __PAIR64__(v30, __ROR4__(v29, 2));
        v70 = (v30 | v69) & v28 | v30 & __ROR4__(v29, 2);
        LODWORD(v69) = v30;
        v71 = v69 >> 2;
        v72 = v27 - 1894007588 + v70 + *(v62 - 3) + v68;
        HIDWORD(v69) = v72;
        LODWORD(v69) = v72;
        v73 = v28
            - 1894007588
            + *(v62 - 2)
            + ((v67 | __ROR4__(v30, 2)) & __ROR4__(v29, 2) | v67 & __ROR4__(v30, 2))
            + (v69 >> 27);
        HIDWORD(v69) = v73;
        LODWORD(v69) = v73;
        v29 = v66
            - 1894007588
            + *(v62 - 1)
            + ((v72 | __ROR4__(v67, 2)) & __ROR4__(v30, 2) | v72 & __ROR4__(v67, 2))
            + (v69 >> 27);
        v74 = __PAIR64__(v67, __ROR4__(v67, 2));
        v75 = (v73 | __ROR4__(v72, 2)) & v74 | v73 & __ROR4__(v72, 2);
        v76 = *v62;
        v62 += 5;
        LODWORD(v74) = v67;
        v26 = v74 >> 2;
        HIDWORD(v74) = v72;
        LODWORD(v74) = v72;
        v27 = v74 >> 2;
        HIDWORD(v74) = v29;
        LODWORD(v74) = v29;
        v30 = v71 - 1894007588 + v76 + v75 + (v74 >> 27);
        v63 += 5;
        HIDWORD(v74) = v73;
        LODWORD(v74) = v73;
        v28 = v74 >> 2;
      }
      while (v63 < 0x37);
      v77 = (int *)v101;
      for (j = 55; j < 0x4B; j += 5)
      {
        HIDWORD(v79) = v30;
        LODWORD(v79) = v30;
        v80 = (v79 >> 27) - 899497514 + (v28 ^ v29 ^ v27) + v26 + *(v77 - 4);
        HIDWORD(v79) = v29;
        LODWORD(v79) = v29;
        v81 = v79 >> 2;
        HIDWORD(v79) = v80;
        LODWORD(v79) = v80;
        v82 = v79 >> 27;
        v83 = __PAIR64__(v30, __ROR4__(v29, 2));
        v84 = v27 - 899497514 + (v30 ^ v83 ^ v28) + *(v77 - 3) + v82;
        LODWORD(v83) = v30;
        v85 = v83 >> 2;
        HIDWORD(v83) = v84;
        LODWORD(v83) = v84;
        v86 = v83 >> 27;
        v87 = __PAIR64__(v80, __ROR4__(v30, 2));
        v88 = v28 - 899497514 + *(v77 - 2) + (v81 ^ v87 ^ v80) + v86;
        LODWORD(v87) = v80;
        v26 = v87 >> 2;
        HIDWORD(v87) = v88;
        LODWORD(v87) = v88;
        v89 = v87 >> 27;
        v90 = __PAIR64__(v84, __ROR4__(v30, 2));
        v29 = v81 - 899497514 + *(v77 - 1) + (v26 ^ v90 ^ v84) + v89;
        LODWORD(v90) = v84;
        v27 = v90 >> 2;
        HIDWORD(v90) = v29;
        LODWORD(v90) = v29;
        v91 = v90 >> 27;
        v92 = __PAIR64__(v88, __ROR4__(v80, 2));
        v93 = *v77;
        v77 += 5;
        v30 = v85 - 899497514 + v93 + (v27 ^ v92 ^ v88) + v91;
        LODWORD(v92) = v88;
        v28 = v92 >> 2;
      }
      v3 += v30;
      v4 += v29;
      *result = v3;
      result[1] = v4;
      v5 += v28;
      v6 += v27;
      result[2] = v5;
      result[3] = v6;
      v7 += v26;
      a3 += 64;
      result[4] = v7;
    }
    while (a2);
  }
  return result;
}

int8x16_t sub_19B70A880(int8x16_t *a1, int8x16_t *a2, double a3, double a4, double a5, double a6, double a7, int8x16_t a8)
{
  int32x4_t v8;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  int8x16_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  int8x16_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  int8x16_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  int8x16_t v50;
  int8x16_t v51;
  int8x16_t result;

  v8 = (int32x4_t)vqtbl1q_s8(*a2, *(int8x16_t *)qword_19B70AEC0);
  v9 = veorq_s8(a8, a8);
  v10 = veorq_s8(vandq_s8(vextq_s8(*(int8x16_t *)&qword_19B70AEC0[2], *(int8x16_t *)&qword_19B70AEC0[2], 8uLL), (int8x16_t)vshrq_n_s32(vdupq_laneq_s32(v8, 3), 0x1FuLL)), vorrq_s8(vextq_s8(v9, (int8x16_t)vshrq_n_u64((uint64x2_t)v8, 0x3FuLL), 8uLL), (int8x16_t)vshlq_n_s64((int64x2_t)v8, 1uLL)));
  *a1 = v10;
  a1[8] = veorq_s8(v10, vextq_s8(v10, v10, 8uLL));
  v11 = (int8x16_t)vmull_high_p64((uint64x2_t)v10, (uint64x2_t)v10);
  v12 = (int8x16_t)vmull_p64(v10.u64[0], v10.u64[0]);
  v13 = veorq_s8(v12, veorq_s8(v11, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0])));
  v14 = veorq_s8(vextq_s8(v9, v13, 8uLL), v12);
  v15 = veorq_s8(vextq_s8(v14, v14, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v14.u64[0]));
  v16 = veorq_s8(veorq_s8(vextq_s8(v13, v9, 8uLL), v11), veorq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v15.u64[0])));
  a1[1] = v16;
  a1[9] = veorq_s8(v16, vextq_s8(v16, v16, 8uLL));
  v13.i64[0] = veorq_s8(v16, vextq_s8(v16, v16, 8uLL)).u64[0];
  v17 = (int8x16_t)vmull_high_p64((uint64x2_t)v16, (uint64x2_t)v10);
  v18 = (int8x16_t)vmull_p64(v16.u64[0], v10.u64[0]);
  v19 = veorq_s8(v18, veorq_s8(v17, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v13.u64[0])));
  v20 = veorq_s8(vextq_s8(v9, v19, 8uLL), v18);
  v21 = veorq_s8(vextq_s8(v20, v20, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v20.u64[0]));
  v22 = veorq_s8(veorq_s8(vextq_s8(v19, v9, 8uLL), v17), veorq_s8(vextq_s8(v21, v21, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v21.u64[0])));
  a1[2] = v22;
  a1[10] = veorq_s8(v22, vextq_s8(v22, v22, 8uLL));
  v19.i64[0] = veorq_s8(v22, vextq_s8(v22, v22, 8uLL)).u64[0];
  v23 = (int8x16_t)vmull_high_p64((uint64x2_t)v22, (uint64x2_t)v10);
  v24 = (int8x16_t)vmull_p64(v22.u64[0], v10.u64[0]);
  v25 = veorq_s8(v24, veorq_s8(v23, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v19.u64[0])));
  v26 = veorq_s8(vextq_s8(v9, v25, 8uLL), v24);
  v27 = veorq_s8(vextq_s8(v26, v26, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v26.u64[0]));
  v28 = veorq_s8(veorq_s8(vextq_s8(v25, v9, 8uLL), v23), veorq_s8(vextq_s8(v27, v27, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v27.u64[0])));
  a1[3] = v28;
  a1[11] = veorq_s8(v28, vextq_s8(v28, v28, 8uLL));
  v25.i64[0] = veorq_s8(v28, vextq_s8(v28, v28, 8uLL)).u64[0];
  v29 = (int8x16_t)vmull_high_p64((uint64x2_t)v28, (uint64x2_t)v10);
  v30 = (int8x16_t)vmull_p64(v28.u64[0], v10.u64[0]);
  v31 = veorq_s8(v30, veorq_s8(v29, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v25.u64[0])));
  v32 = veorq_s8(vextq_s8(v9, v31, 8uLL), v30);
  v33 = veorq_s8(vextq_s8(v32, v32, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v32.u64[0]));
  v34 = veorq_s8(veorq_s8(vextq_s8(v31, v9, 8uLL), v29), veorq_s8(vextq_s8(v33, v33, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v33.u64[0])));
  a1[4] = v34;
  a1[12] = veorq_s8(v34, vextq_s8(v34, v34, 8uLL));
  v31.i64[0] = veorq_s8(v34, vextq_s8(v34, v34, 8uLL)).u64[0];
  v35 = (int8x16_t)vmull_high_p64((uint64x2_t)v34, (uint64x2_t)v10);
  v36 = (int8x16_t)vmull_p64(v34.u64[0], v10.u64[0]);
  v37 = veorq_s8(v36, veorq_s8(v35, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v31.u64[0])));
  v38 = veorq_s8(vextq_s8(v9, v37, 8uLL), v36);
  v39 = veorq_s8(vextq_s8(v38, v38, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v38.u64[0]));
  v40 = veorq_s8(veorq_s8(vextq_s8(v37, v9, 8uLL), v35), veorq_s8(vextq_s8(v39, v39, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v39.u64[0])));
  a1[5] = v40;
  a1[13] = veorq_s8(v40, vextq_s8(v40, v40, 8uLL));
  v37.i64[0] = veorq_s8(v40, vextq_s8(v40, v40, 8uLL)).u64[0];
  v41 = (int8x16_t)vmull_high_p64((uint64x2_t)v40, (uint64x2_t)v10);
  v42 = (int8x16_t)vmull_p64(v40.u64[0], v10.u64[0]);
  v43 = veorq_s8(v42, veorq_s8(v41, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v37.u64[0])));
  v44 = veorq_s8(vextq_s8(v9, v43, 8uLL), v42);
  v45 = veorq_s8(vextq_s8(v44, v44, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v44.u64[0]));
  v46 = veorq_s8(veorq_s8(vextq_s8(v43, v9, 8uLL), v41), veorq_s8(vextq_s8(v45, v45, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v45.u64[0])));
  a1[6] = v46;
  a1[14] = veorq_s8(v46, vextq_s8(v46, v46, 8uLL));
  v43.i64[0] = veorq_s8(v46, vextq_s8(v46, v46, 8uLL)).u64[0];
  v47 = (int8x16_t)vmull_high_p64((uint64x2_t)v46, (uint64x2_t)v10);
  v48 = (int8x16_t)vmull_p64(v46.u64[0], v10.u64[0]);
  v49 = veorq_s8(v48, veorq_s8(v47, (int8x16_t)vmull_p64(veorq_s8(v10, vextq_s8(v10, v10, 8uLL)).u64[0], v43.u64[0])));
  v50 = veorq_s8(vextq_s8(v9, v49, 8uLL), v48);
  v51 = veorq_s8(vextq_s8(v50, v50, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v50.u64[0]));
  result = veorq_s8(veorq_s8(vextq_s8(v49, v9, 8uLL), v47), veorq_s8(vextq_s8(v51, v51, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v51.u64[0])));
  a1[7] = result;
  a1[15] = veorq_s8(result, vextq_s8(result, result, 8uLL));
  return result;
}

int8x16_t sub_19B70AB80(int8x16_t *a1, uint64x2_t *a2, int8x16_t *a3, double a4, double a5, double a6, double a7, double a8, int8x16_t a9)
{
  int8x16_t v9;
  int8x16_t v10;
  unint64_t v11;
  int8x16_t v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t result;

  v9 = vqtbl1q_s8(*a1, *(int8x16_t *)qword_19B70AEC0);
  v10 = veorq_s8(a9, a9);
  v11 = veorq_s8(v9, vextq_s8(v9, v9, 8uLL)).u64[0];
  v12 = (int8x16_t)vmull_high_p64((uint64x2_t)v9, *a2);
  v13 = (int8x16_t)vmull_p64(v9.u64[0], a2->i64[0]);
  v14 = veorq_s8(v13, veorq_s8(v12, (int8x16_t)vmull_p64(veorq_s8(*(int8x16_t *)a2, vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL)).u64[0], v11)));
  v15 = veorq_s8(vextq_s8(v10, v14, 8uLL), v13);
  v16 = veorq_s8(vextq_s8(v15, v15, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v15.u64[0]));
  result = vqtbl1q_s8(veorq_s8(veorq_s8(vextq_s8(v14, v10, 8uLL), v12), veorq_s8(vextq_s8(v16, v16, 8uLL), (int8x16_t)vmull_p64(0xC200000000000000, v16.u64[0]))), *(int8x16_t *)qword_19B70AEC0);
  *a3 = result;
  return result;
}

int8x16_t sub_19B70AC00(int8x16_t *a1, uint64x2_t *a2, int8x16_t *a3, uint64_t a4)
{
  int8x16_t v4;
  int8x16_t v5;
  int8x16_t v6;
  BOOL v7;
  uint64_t i;
  int8x16_t v9;
  int8x16_t v10;
  int8x16_t v11;
  int8x16_t v12;
  int8x16_t v13;
  uint64x2_t v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  int8x16_t v18;
  uint64x2_t v19;
  int8x16_t v20;
  int8x16_t v21;
  int8x16_t v22;
  int8x16_t v23;
  uint64x2_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x16_t v27;
  int8x16_t v28;
  uint64x2_t v29;
  int8x16_t v30;
  int8x16_t v31;
  int8x16_t v32;
  int8x16_t v33;
  uint64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  int8x16_t v37;
  int8x16_t v38;
  uint64x2_t v39;
  int8x16_t v40;
  int8x16_t v41;
  int8x16_t v42;
  uint64x2_t v43;
  int8x16_t v44;
  int8x16_t v45;
  int8x16_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int8x16_t v49;
  uint64_t v50;
  int8x16_t *v51;
  int8x16_t v52;
  int8x16_t v53;
  uint64x2_t *v54;
  uint64x2_t v55;
  int8x16_t v56;
  int8x16_t v57;
  int8x16_t v58;
  uint64_t j;
  int8x16_t v60;
  int8x16_t v61;
  int8x16_t v62;
  int8x16_t v63;
  int8x16_t v64;
  int8x16_t result;

  v5 = veorq_s8(v4, v4);
  v6 = vqtbl1q_s8(*a1, *(int8x16_t *)qword_19B70AEC0);
  v7 = a4 < 128;
  for (i = a4 - 128; !v7; i -= 128)
  {
    v9 = vqtbl1q_s8(a3[7], *(int8x16_t *)qword_19B70AEC0);
    v10 = (int8x16_t)vmull_p64(a2->i64[0], v9.u64[0]);
    v11 = (int8x16_t)vmull_high_p64(*a2, (uint64x2_t)v9);
    v12 = (int8x16_t)vmull_p64(a2[8].u64[0], veorq_s8(v9, vextq_s8(v9, v9, 8uLL)).u64[0]);
    v13 = vqtbl1q_s8(a3[6], *(int8x16_t *)qword_19B70AEC0);
    v14 = a2[1];
    v15 = veorq_s8(v10, (int8x16_t)vmull_p64(v14.u64[0], v13.u64[0]));
    v16 = veorq_s8(v11, (int8x16_t)vmull_high_p64(v14, (uint64x2_t)v13));
    v17 = veorq_s8(v12, (int8x16_t)vmull_p64(a2[9].u64[0], veorq_s8(v13, vextq_s8(v13, v13, 8uLL)).u64[0]));
    v18 = vqtbl1q_s8(a3[5], *(int8x16_t *)qword_19B70AEC0);
    v19 = a2[2];
    v20 = veorq_s8(v15, (int8x16_t)vmull_p64(v19.u64[0], v18.u64[0]));
    v21 = veorq_s8(v16, (int8x16_t)vmull_high_p64(v19, (uint64x2_t)v18));
    v22 = veorq_s8(v17, (int8x16_t)vmull_p64(a2[10].u64[0], veorq_s8(v18, vextq_s8(v18, v18, 8uLL)).u64[0]));
    v23 = vqtbl1q_s8(a3[4], *(int8x16_t *)qword_19B70AEC0);
    v24 = a2[3];
    v25 = veorq_s8(v20, (int8x16_t)vmull_p64(v24.u64[0], v23.u64[0]));
    v26 = veorq_s8(v21, (int8x16_t)vmull_high_p64(v24, (uint64x2_t)v23));
    v27 = veorq_s8(v22, (int8x16_t)vmull_p64(a2[11].u64[0], veorq_s8(v23, vextq_s8(v23, v23, 8uLL)).u64[0]));
    v28 = vqtbl1q_s8(a3[3], *(int8x16_t *)qword_19B70AEC0);
    v29 = a2[4];
    v30 = veorq_s8(v25, (int8x16_t)vmull_p64(v29.u64[0], v28.u64[0]));
    v31 = veorq_s8(v26, (int8x16_t)vmull_high_p64(v29, (uint64x2_t)v28));
    v32 = veorq_s8(v27, (int8x16_t)vmull_p64(a2[12].u64[0], veorq_s8(v28, vextq_s8(v28, v28, 8uLL)).u64[0]));
    v33 = vqtbl1q_s8(a3[2], *(int8x16_t *)qword_19B70AEC0);
    v34 = a2[5];
    v35 = veorq_s8(v30, (int8x16_t)vmull_p64(v34.u64[0], v33.u64[0]));
    v36 = veorq_s8(v31, (int8x16_t)vmull_high_p64(v34, (uint64x2_t)v33));
    v37 = veorq_s8(v32, (int8x16_t)vmull_p64(a2[13].u64[0], veorq_s8(v33, vextq_s8(v33, v33, 8uLL)).u64[0]));
    v38 = vqtbl1q_s8(a3[1], *(int8x16_t *)qword_19B70AEC0);
    v39 = a2[6];
    v40 = veorq_s8(v35, (int8x16_t)vmull_p64(v39.u64[0], v38.u64[0]));
    v41 = veorq_s8(v36, (int8x16_t)vmull_high_p64(v39, (uint64x2_t)v38));
    v42 = veorq_s8(v37, (int8x16_t)vmull_p64(a2[14].u64[0], veorq_s8(v38, vextq_s8(v38, v38, 8uLL)).u64[0]));
    v43 = a2[7];
    v44 = veorq_s8(vqtbl1q_s8(*a3, *(int8x16_t *)qword_19B70AEC0), v6);
    v45 = veorq_s8(v40, (int8x16_t)vmull_p64(v43.u64[0], v44.u64[0]));
    v46 = veorq_s8(v41, (int8x16_t)vmull_high_p64(v43, (uint64x2_t)v44));
    v47 = veorq_s8(v46, veorq_s8(v45, veorq_s8(v42, (int8x16_t)vmull_p64(a2[15].u64[0], veorq_s8(v44, vextq_s8(v44, v44, 8uLL)).u64[0]))));
    v48 = veorq_s8(v45, vextq_s8(v5, v47, 8uLL));
    v49 = veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v48.u64[0]), vextq_s8(v48, v48, 8uLL));
    v6 = veorq_s8(veorq_s8(v46, vextq_s8(v47, v5, 8uLL)), veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v49.u64[0]), vextq_s8(v49, v49, 8uLL)));
    a3 += 8;
    v7 = i < 128;
  }
  v7 = i < -112;
  v50 = i + 112;
  if (!v7)
  {
    v52 = *a3;
    v51 = a3 + 1;
    v53 = veorq_s8(v6, vqtbl1q_s8(v52, *(int8x16_t *)qword_19B70AEC0));
    v54 = (uint64x2_t *)((char *)a2 + v50);
    v55 = *(uint64x2_t *)((char *)a2 + v50);
    v56 = (int8x16_t)vmull_p64(v53.u64[0], v55.u64[0]);
    v57 = (int8x16_t)vmull_high_p64((uint64x2_t)v53, v55);
    v58 = (int8x16_t)vmull_p64(veorq_s8(v53, vextq_s8(v53, v53, 8uLL)).u64[0], *(unint64_t *)((char *)a2[8].u64 + v50));
    v7 = v50 < 16;
    for (j = v50 - 16; !v7; j -= 16)
    {
      --v54;
      v60 = *v51++;
      v61 = vqtbl1q_s8(v60, *(int8x16_t *)qword_19B70AEC0);
      v56 = veorq_s8(v56, (int8x16_t)vmull_p64(v61.u64[0], v54->i64[0]));
      v57 = veorq_s8(v57, (int8x16_t)vmull_high_p64((uint64x2_t)v61, *v54));
      v58 = veorq_s8(v58, (int8x16_t)vmull_p64(veorq_s8(v61, vextq_s8(v61, v61, 8uLL)).u64[0], v54[8].u64[0]));
      v7 = j < 16;
    }
    v62 = veorq_s8(v57, veorq_s8(v56, v58));
    v63 = veorq_s8(v56, vextq_s8(v5, v62, 8uLL));
    v64 = veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v63.u64[0]), vextq_s8(v63, v63, 8uLL));
    v6 = veorq_s8(veorq_s8(v57, vextq_s8(v62, v5, 8uLL)), veorq_s8((int8x16_t)vmull_p64(0xC200000000000000, v64.u64[0]), vextq_s8(v64, v64, 8uLL)));
  }
  result = vqtbl1q_s8(v6, *(int8x16_t *)qword_19B70AEC0);
  *a1 = result;
  return result;
}

int64x2_t *sub_19B70AEE0(int64x2_t *result, uint64_t a2, int8x16_t *a3)
{
  int64x2_t v3;
  int64x2_t v4;
  int64x2_t v5;
  int64x2_t v6;
  int64x2_t v26;
  int8x16_t v29;
  int64x2_t v35;
  int8x16_t v38;
  int64x2_t v44;
  int8x16_t v47;
  int64x2_t v53;
  int8x16_t v56;
  int64x2_t v62;
  int8x16_t v65;
  int64x2_t v71;
  int8x16_t v74;
  int64x2_t v80;
  int8x16_t v83;
  int64x2_t v89;
  int8x16_t v92;
  int64x2_t v98;
  int8x16_t v101;
  int64x2_t v107;
  int8x16_t v110;
  int64x2_t v116;
  int8x16_t v119;
  int64x2_t v125;
  int8x16_t v128;
  int64x2_t v134;
  int8x16_t v137;
  int64x2_t v143;
  int8x16_t v146;
  int64x2_t v152;
  int8x16_t v155;
  int64x2_t v161;
  int8x16_t v164;
  int64x2_t v170;
  int8x16_t v173;
  int64x2_t v179;
  int8x16_t v182;
  int64x2_t v188;
  int8x16_t v191;
  int64x2_t v197;
  int8x16_t v200;
  int64x2_t v206;
  int8x16_t v209;
  int64x2_t v215;
  int8x16_t v218;
  int64x2_t v224;
  int8x16_t v227;
  int64x2_t v233;
  int8x16_t v236;
  int64x2_t v242;
  int8x16_t v245;
  int64x2_t v251;
  int8x16_t v254;
  int64x2_t v260;
  int8x16_t v263;
  int64x2_t v269;
  int8x16_t v272;
  int64x2_t v278;
  int8x16_t v281;
  int64x2_t v287;
  int8x16_t v290;
  int64x2_t v296;
  int8x16_t v299;
  int64x2_t v305;
  int8x16_t v308;
  int8x16_t v313;
  int8x16_t v318;
  int8x16_t v323;
  int8x16_t v328;
  int8x16_t v333;
  int8x16_t v338;
  int64x2_t v343;

  if (a2)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
    v6 = result[3];
    do
    {
      _Q24 = v3;
      _Q25 = v4;
      _Q0 = vrev64q_s8(*a3);
      _Q1 = vrev64q_s8(a3[1]);
      _Q2 = vrev64q_s8(a3[2]);
      _Q3 = vrev64q_s8(a3[3]);
      _Q4 = vrev64q_s8(a3[4]);
      _Q5 = vrev64q_s8(a3[5]);
      _Q6 = vrev64q_s8(a3[6]);
      _Q7 = vrev64q_s8(a3[7]);
      a3 += 8;
      _Q29 = vextq_s8((int8x16_t)v5, (int8x16_t)v6, 8uLL);
      _Q28 = vextq_s8((int8x16_t)v4, (int8x16_t)v5, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      v26 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      v29 = (int8x16_t)vaddq_s64(v4, v26);
      _Q29 = vextq_s8(v29, (int8x16_t)v5, 8uLL);
      _Q28 = vextq_s8((int8x16_t)v3, v29, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      v35 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      v38 = (int8x16_t)vaddq_s64(v3, v35);
      _Q29 = vextq_s8(v38, v29, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v38, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      v44 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      v47 = (int8x16_t)vaddq_s64(_Q27, v44);
      _Q29 = vextq_s8(v47, v38, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v47, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      v53 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      v56 = (int8x16_t)vaddq_s64(_Q26, v53);
      _Q29 = vextq_s8(v56, v47, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v56, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      v62 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      v65 = (int8x16_t)vaddq_s64(_Q25, v62);
      _Q29 = vextq_s8(v65, v56, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v65, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      v71 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      v74 = (int8x16_t)vaddq_s64(_Q24, v71);
      _Q29 = vextq_s8(v74, v65, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v74, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      v80 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      v83 = (int8x16_t)vaddq_s64(_Q27, v80);
      _Q29 = vextq_s8(v83, v74, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v83, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      v89 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      v92 = (int8x16_t)vaddq_s64(_Q26, v89);
      _Q29 = vextq_s8(v92, v83, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v92, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      v98 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      v101 = (int8x16_t)vaddq_s64(_Q25, v98);
      _Q29 = vextq_s8(v101, v92, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v101, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      v107 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      v110 = (int8x16_t)vaddq_s64(_Q24, v107);
      _Q29 = vextq_s8(v110, v101, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v110, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      v116 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      v119 = (int8x16_t)vaddq_s64(_Q27, v116);
      _Q29 = vextq_s8(v119, v110, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v119, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      v125 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      v128 = (int8x16_t)vaddq_s64(_Q26, v125);
      _Q29 = vextq_s8(v128, v119, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v128, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      v134 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      v137 = (int8x16_t)vaddq_s64(_Q25, v134);
      _Q29 = vextq_s8(v137, v128, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v137, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      v143 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      v146 = (int8x16_t)vaddq_s64(_Q24, v143);
      _Q29 = vextq_s8(v146, v137, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v146, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      v152 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      v155 = (int8x16_t)vaddq_s64(_Q27, v152);
      _Q29 = vextq_s8(v155, v146, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v155, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      v161 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      v164 = (int8x16_t)vaddq_s64(_Q26, v161);
      _Q29 = vextq_s8(v164, v155, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v164, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      v170 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      v173 = (int8x16_t)vaddq_s64(_Q25, v170);
      _Q29 = vextq_s8(v173, v164, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v173, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      v179 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      v182 = (int8x16_t)vaddq_s64(_Q24, v179);
      _Q29 = vextq_s8(v182, v173, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v182, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      v188 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      v191 = (int8x16_t)vaddq_s64(_Q27, v188);
      _Q29 = vextq_s8(v191, v182, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v191, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      v197 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      v200 = (int8x16_t)vaddq_s64(_Q26, v197);
      _Q29 = vextq_s8(v200, v191, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v200, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      v206 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      v209 = (int8x16_t)vaddq_s64(_Q25, v206);
      _Q29 = vextq_s8(v209, v200, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v209, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      v215 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      v218 = (int8x16_t)vaddq_s64(_Q24, v215);
      _Q29 = vextq_s8(v218, v209, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v218, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      v224 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      v227 = (int8x16_t)vaddq_s64(_Q27, v224);
      _Q29 = vextq_s8(v227, v218, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v227, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      v233 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      v236 = (int8x16_t)vaddq_s64(_Q26, v233);
      _Q29 = vextq_s8(v236, v227, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v236, 8uLL);
      _Q31 = vextq_s8(_Q4, _Q5, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V0.2D, V1.2D
      }
      v242 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V0.2D, V7.2D, V31.2D
      }
      v245 = (int8x16_t)vaddq_s64(_Q25, v242);
      _Q29 = vextq_s8(v245, v236, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v245, 8uLL);
      _Q31 = vextq_s8(_Q5, _Q6, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V1.2D, V2.2D
      }
      v251 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V1.2D, V0.2D, V31.2D
      }
      v254 = (int8x16_t)vaddq_s64(_Q24, v251);
      _Q29 = vextq_s8(v254, v245, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v254, 8uLL);
      _Q31 = vextq_s8(_Q6, _Q7, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V2.2D, V3.2D
      }
      v260 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V2.2D, V1.2D, V31.2D
      }
      v263 = (int8x16_t)vaddq_s64(_Q27, v260);
      _Q29 = vextq_s8(v263, v254, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v263, 8uLL);
      _Q31 = vextq_s8(_Q7, _Q0, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V3.2D, V4.2D
      }
      v269 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V3.2D, V2.2D, V31.2D
      }
      v272 = (int8x16_t)vaddq_s64(_Q26, v269);
      _Q29 = vextq_s8(v272, v263, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v272, 8uLL);
      _Q31 = vextq_s8(_Q0, _Q1, 8uLL);
      __asm
      {
        SHA512H         Q27, Q29, V28.2D
        SHA512SU0       V4.2D, V5.2D
      }
      v278 = _Q27;
      __asm
      {
        SHA512H2        Q27, Q25, V24.2D
        SHA512SU1       V4.2D, V3.2D, V31.2D
      }
      v281 = (int8x16_t)vaddq_s64(_Q25, v278);
      _Q29 = vextq_s8(v281, v272, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v281, 8uLL);
      _Q31 = vextq_s8(_Q1, _Q2, 8uLL);
      __asm
      {
        SHA512H         Q26, Q29, V28.2D
        SHA512SU0       V5.2D, V6.2D
      }
      v287 = _Q26;
      __asm
      {
        SHA512H2        Q26, Q24, V27.2D
        SHA512SU1       V5.2D, V4.2D, V31.2D
      }
      v290 = (int8x16_t)vaddq_s64(_Q24, v287);
      _Q29 = vextq_s8(v290, v281, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v290, 8uLL);
      _Q31 = vextq_s8(_Q2, _Q3, 8uLL);
      __asm
      {
        SHA512H         Q25, Q29, V28.2D
        SHA512SU0       V6.2D, V7.2D
      }
      v296 = _Q25;
      __asm
      {
        SHA512H2        Q25, Q27, V26.2D
        SHA512SU1       V6.2D, V5.2D, V31.2D
      }
      v299 = (int8x16_t)vaddq_s64(_Q27, v296);
      _Q29 = vextq_s8(v299, v290, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v299, 8uLL);
      _Q31 = vextq_s8(_Q3, _Q4, 8uLL);
      __asm
      {
        SHA512H         Q24, Q29, V28.2D
        SHA512SU0       V7.2D, V0.2D
      }
      v305 = _Q24;
      __asm
      {
        SHA512H2        Q24, Q26, V25.2D
        SHA512SU1       V7.2D, V6.2D, V31.2D
      }
      v308 = (int8x16_t)vaddq_s64(_Q26, v305);
      _Q29 = vextq_s8(v308, v299, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v308, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q27, Q25, V24.2D
      }
      v313 = (int8x16_t)vaddq_s64(_Q25, _Q30);
      _Q29 = vextq_s8(v313, v308, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v313, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q26, Q24, V27.2D
      }
      v318 = (int8x16_t)vaddq_s64(_Q24, _Q30);
      _Q29 = vextq_s8(v318, v313, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v318, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q25, Q27, V26.2D
      }
      v323 = (int8x16_t)vaddq_s64(_Q27, _Q30);
      _Q29 = vextq_s8(v323, v318, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, v323, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q24, Q26, V25.2D
      }
      v328 = (int8x16_t)vaddq_s64(_Q26, _Q30);
      _Q29 = vextq_s8(v328, v323, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q25, v328, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q27, Q25, V24.2D
      }
      v333 = (int8x16_t)vaddq_s64(_Q25, _Q30);
      _Q29 = vextq_s8(v333, v328, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q24, v333, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q26, Q24, V27.2D
      }
      v338 = (int8x16_t)vaddq_s64(_Q24, _Q30);
      _Q29 = vextq_s8(v338, v333, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q27, v338, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q25, Q27, V26.2D
      }
      v343 = vaddq_s64(_Q27, _Q30);
      _Q29 = vextq_s8((int8x16_t)v343, v338, 8uLL);
      _Q28 = vextq_s8((int8x16_t)_Q26, (int8x16_t)v343, 8uLL);
      __asm
      {
        SHA512H         Q30, Q29, V28.2D
        SHA512H2        Q24, Q26, V25.2D
      }
      v3 = vaddq_s64(v3, _Q24);
      v4 = vaddq_s64(v4, _Q25);
      v5 = vaddq_s64(v5, vaddq_s64(_Q26, _Q30));
      v6 = vaddq_s64(v6, v343);
    }
    while (a2-- > 1);
    *result = v3;
    result[1] = v4;
    result[2] = v5;
    result[3] = v6;
  }
  return result;
}

void *sub_19B70B750()
{
  return &unk_1E3BD1B10;
}

_OWORD *sub_19B70B75C(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_19B70E5C0(a3, a4, a5);
}

_OWORD *sub_19B70B76C(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  return sub_19B70E5C0(a3, a4, a4);
}

uint64_t sub_19B70B77C(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  _OWORD v19[2];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = 4;
  v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  v11 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 4);
  sub_19B70E5C0(v11, a4, a4);
  sub_19B70E5C0(v10, v11, a4);
  sub_19B70E5C0(v10, v10, v10);
  sub_19B70E5C0(v10, v10, v10);
  sub_19B70E5C0(v9, v10, a4);
  sub_19B70E5C0(v10, v9, v11);
  do
  {
    sub_19B70E5C0(v10, v10, v10);
    --v8;
  }
  while (v8);
  sub_19B70E5C0(v9, v9, v10);
  sub_19B70E5C0(v10, v9, v11);
  v12 = 8;
  do
  {
    sub_19B70E5C0(v10, v10, v10);
    --v12;
  }
  while (v12);
  sub_19B70E5C0(v9, v9, v10);
  sub_19B70E5C0(v10, v9, v11);
  v13 = 16;
  do
  {
    sub_19B70E5C0(v10, v10, v10);
    --v13;
  }
  while (v13);
  sub_19B70E5C0(v9, v9, v10);
  sub_19B70E5C0(v10, v9, v11);
  sub_19B708C08(4, v11, v10);
  v14 = 32;
  do
  {
    sub_19B70E5C0(v11, v11, v11);
    --v14;
  }
  while (v14);
  sub_19B70E5C0(v11, v11, a4);
  v15 = 128;
  do
  {
    sub_19B70E5C0(v11, v11, v11);
    --v15;
  }
  while (v15);
  sub_19B70E5C0(v11, v11, v10);
  v16 = 32;
  do
  {
    sub_19B70E5C0(v11, v11, v11);
    --v16;
  }
  while (v16);
  sub_19B70E5C0(v11, v11, v10);
  v17 = 32;
  do
  {
    sub_19B70E5C0(v11, v11, v11);
    --v17;
  }
  while (v17);
  sub_19B70E5C0(v10, v11, v9);
  sub_19B70E5C0(v9, v10, a4);
  v19[0] = xmmword_19B71A3D8;
  v19[1] = *(_OWORD *)algn_19B71A3E8;
  sub_19B70E5C0(v9, v9, (unint64_t *)v19);
  if (sub_19B708A68(4, (uint64_t *)v9) == 1 && *v9 == 1)
  {
    sub_19B708C08(4, a3, v10);
    result = 0;
  }
  else
  {
    result = 4294967254;
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

_OWORD *sub_19B70BA64(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  _OWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v5[0] = xmmword_19B71A3D8;
  v5[1] = *(_OWORD *)algn_19B71A3E8;
  return sub_19B70E5C0(a3, a4, (unint64_t *)v5);
}

unsigned int *sub_19B70BAC8(unsigned int *result, uint64_t a2, const char *a3)
{
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  uint16x8_t v12;
  uint16x8_t v13;
  int8x16_t v16;
  uint16x8_t v22;
  uint16x8_t v23;
  int8x16_t v24;
  uint16x8_t v25;
  __int32 v26;
  unint64_t v27;
  int v28;
  int *v29;
  unint64_t v30;
  int8x16_t *v31;
  int v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  unint64_t v40;
  int v41;
  int v42;
  unint64_t v43;
  int v44;
  int v45;
  unsigned int v46;
  int v47;
  unint64_t v48;
  int v49;
  int v50;
  unsigned int v51;
  int v52;
  int v53;
  unint64_t v54;
  int v55;
  int v56;
  unsigned int v57;
  int v58;
  unint64_t v59;
  int v60;
  int v61;
  unsigned int v62;
  int v63;
  int v64;
  unint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  int v69;
  int v70;
  unint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  int v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  _OWORD v80[12];
  uint64_t v81;
  int8x16x4_t v82;

  v81 = *MEMORY[0x1E0C80C00];
  memset(v80, 0, sizeof(v80));
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  if (a2)
  {
    v3 = *result;
    v4 = result[1];
    v5 = result[2];
    v6 = result[3];
    v7 = result[4];
    v8 = result[5];
    v9 = result[6];
    v10 = result[7];
    do
    {
      v11 = 0;
      --a2;
      v82 = vld4q_s8(a3);
      v12 = vmovl_u8(*(uint8x8_t *)v82.val[0].i8);
      v13 = vmovl_high_u8((uint8x16_t)v82.val[0]);
      _Q16 = vmovl_high_u8((uint8x16_t)v82.val[1]);
      _Q17 = (int8x16_t)vmovl_u8(*(uint8x8_t *)v82.val[1].i8);
      v16 = (int8x16_t)vshll_n_s16(*(int16x4_t *)_Q17.i8, 0x10uLL);
      __asm
      {
        SHLL2           V19.4S, V16.8H, #0x10
        SHLL2           V17.4S, V17.8H, #0x10
      }
      v22 = vmovl_u8(*(uint8x8_t *)v82.val[2].i8);
      v23 = vmovl_high_u8((uint8x16_t)v82.val[2]);
      v24 = vorrq_s8(vorrq_s8((int8x16_t)vshll_n_s16(*(int16x4_t *)_Q16.i8, 0x10uLL), (int8x16_t)vshll_n_u16(*(uint16x4_t *)v23.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v13.i8), 0x18uLL));
      v25 = vmovl_u8(*(uint8x8_t *)v82.val[3].i8);
      v82.val[0] = (int8x16_t)vmovl_high_u8((uint8x16_t)v82.val[3]);
      v78 = vorrq_s8(v24, (int8x16_t)vmovl_u16(*(uint16x4_t *)v82.val[0].i8));
      v79 = vorrq_s8(vorrq_s8(vorrq_s8(_Q19, (int8x16_t)vshll_high_n_u16(v23, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v13), 0x18uLL)), (int8x16_t)vmovl_high_u16((uint16x8_t)v82.val[0]));
      v76 = vorrq_s8(vorrq_s8(vorrq_s8(v16, (int8x16_t)vshll_n_u16(*(uint16x4_t *)v22.i8, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_u16(*(uint16x4_t *)v12.i8), 0x18uLL)), (int8x16_t)vmovl_u16(*(uint16x4_t *)v25.i8));
      v77 = vorrq_s8(vorrq_s8(vorrq_s8(_Q17, (int8x16_t)vshll_high_n_u16(v22, 8uLL)), (int8x16_t)vshlq_n_s32((int32x4_t)vmovl_high_u16(v12), 0x18uLL)), (int8x16_t)vmovl_high_u16(v25));
      v26 = v76.i32[0];
      do
      {
        HIDWORD(v27) = v79.i32[v11 + 2];
        LODWORD(v27) = HIDWORD(v27);
        v28 = (v27 >> 17) ^ __ROR4__(HIDWORD(v27), 19) ^ (HIDWORD(v27) >> 10);
        HIDWORD(v27) = v76.i32[v11 + 1];
        LODWORD(v27) = HIDWORD(v27);
        *(_DWORD *)((char *)v80 + v11 * 4) = v28
                                           + v78.i32[v11 + 1]
                                           + v26
                                           + ((v27 >> 7) ^ __ROR4__(HIDWORD(v27), 18) ^ (HIDWORD(v27) >> 3));
        ++v11;
        v26 = HIDWORD(v27);
      }
      while (v11 != 48);
      v29 = &dword_19B71A410;
      v30 = -8;
      v31 = &v77;
      v32 = v10;
      v33 = v9;
      v34 = v8;
      v35 = v7;
      v36 = v6;
      v37 = v5;
      v38 = v4;
      v39 = v3;
      do
      {
        HIDWORD(v40) = v35;
        LODWORD(v40) = v35;
        v41 = (v40 >> 6) ^ __ROR4__(v35, 11);
        v43 = __PAIR64__(v39, __ROR4__(v35, 25));
        v42 = v41 ^ v43;
        LODWORD(v43) = v39;
        v44 = v32 + (v34 & v35 | v33 & ~v35) + *(v29 - 4) + v31[-1].i32[0] + v42;
        v45 = v44 + v36;
        v46 = ((v38 | v39) & v37 | v38 & v39) + ((v43 >> 2) ^ __ROR4__(v39, 13) ^ __ROR4__(v39, 22)) + v44;
        HIDWORD(v43) = v45;
        LODWORD(v43) = v45;
        v47 = (v43 >> 6) ^ __ROR4__(v45, 11);
        v48 = __PAIR64__(v46, __ROR4__(v45, 25));
        v49 = *(v29 - 3) + v33 + v31[-1].i32[1] + (v35 & v45 | v34 & ~v45) + (v47 ^ v48);
        LODWORD(v48) = v46;
        v50 = v49 + v37;
        v51 = ((v48 >> 2) ^ __ROR4__(v46, 13) ^ __ROR4__(v46, 22)) + ((v46 | v39) & v38 | v46 & v39) + v49;
        HIDWORD(v48) = v50;
        LODWORD(v48) = v50;
        v52 = (v48 >> 6) ^ __ROR4__(v50, 11);
        v54 = __PAIR64__(v51, __ROR4__(v50, 25));
        v53 = v52 ^ v54;
        LODWORD(v54) = v51;
        v55 = *(v29 - 2) + v34 + v31[-1].i32[2] + (v45 & v50 | v35 & ~v50) + v53;
        v56 = v55 + v38;
        v57 = ((v54 >> 2) ^ __ROR4__(v51, 13) ^ __ROR4__(v51, 22)) + ((v51 | v46) & v39 | v51 & v46) + v55;
        HIDWORD(v54) = v56;
        LODWORD(v54) = v56;
        v58 = (v54 >> 6) ^ __ROR4__(v56, 11);
        v59 = __PAIR64__(v57, __ROR4__(v56, 25));
        v60 = *(v29 - 1) + v35 + v31[-1].i32[3] + (v50 & v56 | v45 & ~v56) + (v58 ^ v59);
        LODWORD(v59) = v57;
        v61 = v60 + v39;
        v62 = ((v59 >> 2) ^ __ROR4__(v57, 13) ^ __ROR4__(v57, 22)) + ((v57 | v51) & v46 | v57 & v51) + v60;
        HIDWORD(v59) = v61;
        LODWORD(v59) = v61;
        v63 = (v59 >> 6) ^ __ROR4__(v61, 11);
        v65 = __PAIR64__(v62, __ROR4__(v61, 25));
        v64 = v63 ^ v65;
        LODWORD(v65) = v62;
        v66 = *v29 + v31->i32[0] + v45 + (v56 & v61 | v50 & ~v61) + v64;
        v32 = v66 + v46;
        v36 = ((v65 >> 2) ^ __ROR4__(v62, 13) ^ __ROR4__(v62, 22)) + ((v62 | v57) & v51 | v62 & v57) + v66;
        HIDWORD(v65) = v32;
        LODWORD(v65) = v32;
        v67 = (v65 >> 6) ^ __ROR4__(v32, 11);
        v68 = __PAIR64__(v36, __ROR4__(v32, 25));
        v69 = v50 + v29[1] + v31->i32[1] + (v61 & v32 | v56 & ~v32) + (v67 ^ v68);
        LODWORD(v68) = v36;
        v33 = v69 + v51;
        v37 = ((v68 >> 2) ^ __ROR4__(v36, 13) ^ __ROR4__(v36, 22)) + ((v36 | v62) & v57 | v36 & v62) + v69;
        HIDWORD(v68) = v33;
        LODWORD(v68) = v33;
        v70 = (v68 >> 6) ^ __ROR4__(v33, 11);
        v71 = __PAIR64__(v37, __ROR4__(v33, 25));
        v72 = v31->i32[2] + v29[2] + v56 + (v32 & v33 | v61 & ~v33) + (v70 ^ v71);
        LODWORD(v71) = v37;
        v34 = v72 + v57;
        v38 = ((v71 >> 2) ^ __ROR4__(v37, 13) ^ __ROR4__(v37, 22)) + ((v37 | v36) & v62 | v37 & v36) + v72;
        HIDWORD(v71) = v34;
        LODWORD(v71) = v34;
        v73 = (v71 >> 6) ^ __ROR4__(v34, 11);
        v74 = __PAIR64__(v38, __ROR4__(v34, 25));
        v75 = v31->i32[3] + v29[3] + v61 + (v33 & v34 | v32 & ~v34) + (v73 ^ v74);
        LODWORD(v74) = v38;
        v35 = v75 + v62;
        v39 = ((v74 >> 2) ^ __ROR4__(v38, 13) ^ __ROR4__(v38, 22)) + ((v38 | v37) & v36 | v38 & v37) + v75;
        v30 += 8;
        v31 += 2;
        v29 += 8;
      }
      while (v30 < 0x38);
      v3 += v39;
      v4 += v38;
      *result = v3;
      result[1] = v4;
      v5 += v37;
      v6 += v36;
      result[2] = v5;
      result[3] = v6;
      v7 += v35;
      v8 += v34;
      result[4] = v7;
      result[5] = v8;
      v9 += v33;
      v10 += v32;
      a3 += 64;
      result[6] = v9;
      result[7] = v10;
    }
    while (a2);
  }
  return result;
}

uint64_t sub_19B70BF98(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t *v15;
  char v16;

  v8 = sub_19B7076BC((uint64_t)a2);
  v9 = v8;
  if (v8)
  {
    v10 = a2[*a2 + 3];
    v11 = a4;
    v12 = v8;
    do
    {
      v13 = sub_19B70E830((uint64_t)a2);
      *v11 = sub_19B706F14(v9, v11, v13, *v11 * v10);
      ++v11;
      --v12;
    }
    while (v12);
  }
  v14 = sub_19B70814C(a1, v9, &a4[v9], &a4[v9], a4);
  v15 = (unint64_t *)sub_19B70E830((uint64_t)a2);
  v16 = sub_19B709054(a1, v9, a4, &a4[v9], v15) ^ v14;
  return sub_19B7082B0(v9, v16, a3, &a4[v9], a4);
}

uint64_t sub_19B70C080(uint64_t a1, char a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;

  result = sub_19B708310();
  for (i = __ROR8__(0x5555555555555555, a2 | (2 * result)); a1; --a1)
  {
    v8 = *a3;
    v9 = *a3 ^ result;
    *a3 = v9;
    *a3++ = v9 ^ v8 & 0x5555555555555555 ^ v8 & i ^ result;
  }
  return result;
}

void sub_19B70C0EC(__int128 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[4];
  _BYTE v42[608];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  bzero(v41, 0x280uLL);
  for (; a2; --a2)
  {
    v6 = 0;
    v7 = a1[1];
    v43 = *a1;
    v44 = v7;
    v8 = a1[3];
    v45 = a1[2];
    v46 = v8;
    do
    {
      v41[v6] = bswap64(*(_QWORD *)(a3 + v6 * 8));
      ++v6;
    }
    while (v6 != 16);
    v9 = 0;
    v10 = v41[0];
    do
    {
      v11 = v41[v9 / 8 + 1];
      *(_QWORD *)&v42[v9 + 96] = (__ROR8__(*(_QWORD *)&v42[v9 + 80], 19) ^ __ROR8__(*(_QWORD *)&v42[v9 + 80], 61) ^ (*(_QWORD *)&v42[v9 + 80] >> 6))
                               + *(_QWORD *)&v42[v9 + 40]
                               + v10
                               + (__ROR8__(v11, 1) ^ __ROR8__(v11, 8) ^ (v11 >> 7));
      v9 += 8;
      v10 = v11;
    }
    while (v9 != 512);
    v12 = *((_QWORD *)&v46 + 1);
    v13 = v46;
    v15 = *((_QWORD *)&v45 + 1);
    v14 = v45;
    v16 = *((_QWORD *)&v43 + 1);
    v17 = v43;
    v18 = &xmmword_19B71A140;
    v19 = -8;
    v20 = v42;
    v21 = *((_QWORD *)&v44 + 1);
    v22 = v44;
    do
    {
      v23 = (__ROR8__(v14, 14) ^ __ROR8__(v14, 18) ^ __ROR8__(v14, 41))
          + v12
          + *((_QWORD *)v18 - 4)
          + *(v20 - 4)
          + (v15 & v14 | v13 & ~v14);
      v24 = v21 + v23;
      v25 = v23 + (__ROR8__(v17, 28) ^ __ROR8__(v17, 34) ^ __ROR8__(v17, 39)) + ((v16 | v17) & v22 | v16 & v17);
      v26 = (v14 & v24 | v15 & ~v24)
          + v13
          + *((_QWORD *)v18 - 3)
          + *(v20 - 3)
          + (__ROR8__(v24, 14) ^ __ROR8__(v24, 18) ^ __ROR8__(v24, 41));
      v27 = v26 + v22;
      v28 = (__ROR8__(v25, 28) ^ __ROR8__(v25, 34) ^ __ROR8__(v25, 39)) + ((v25 | v17) & v16 | v25 & v17) + v26;
      v29 = *((_QWORD *)v18 - 2)
          + v15
          + *(v20 - 2)
          + (v24 & v27 | v14 & ~v27)
          + (__ROR8__(v27, 14) ^ __ROR8__(v27, 18) ^ __ROR8__(v27, 41));
      v30 = v29 + v16;
      v31 = (__ROR8__(v28, 28) ^ __ROR8__(v28, 34) ^ __ROR8__(v28, 39)) + ((v28 | v25) & v17 | v28 & v25) + v29;
      v32 = *((_QWORD *)v18 - 1)
          + v14
          + *(v20 - 1)
          + (v27 & v30 | v24 & ~v30)
          + (__ROR8__(v30, 14) ^ __ROR8__(v30, 18) ^ __ROR8__(v30, 41));
      v33 = v32 + v17;
      v34 = (__ROR8__(v31, 28) ^ __ROR8__(v31, 34) ^ __ROR8__(v31, 39)) + ((v31 | v28) & v25 | v31 & v28) + v32;
      v35 = *(_QWORD *)v18
          + *v20
          + v24
          + (v30 & v33 | v27 & ~v33)
          + (__ROR8__(v33, 14) ^ __ROR8__(v33, 18) ^ __ROR8__(v33, 41));
      v12 = v35 + v25;
      v21 = (__ROR8__(v34, 28) ^ __ROR8__(v34, 34) ^ __ROR8__(v34, 39)) + ((v34 | v31) & v28 | v34 & v31) + v35;
      v36 = *((_QWORD *)v18 + 1)
          + v20[1]
          + v27
          + (v33 & v12 | v30 & ~v12)
          + (__ROR8__(v12, 14) ^ __ROR8__(v12, 18) ^ __ROR8__(v12, 41));
      v13 = v36 + v28;
      v22 = (__ROR8__(v21, 28) ^ __ROR8__(v21, 34) ^ __ROR8__(v21, 39)) + ((v21 | v34) & v31 | v21 & v34) + v36;
      v37 = *((_QWORD *)v18 + 2)
          + v20[2]
          + v30
          + (v12 & v13 | v33 & ~v13)
          + (__ROR8__(v13, 14) ^ __ROR8__(v13, 18) ^ __ROR8__(v13, 41));
      v15 = v37 + v31;
      v16 = (__ROR8__(v22, 28) ^ __ROR8__(v22, 34) ^ __ROR8__(v22, 39)) + ((v22 | v21) & v34 | v22 & v21) + v37;
      v38 = *((_QWORD *)v18 + 3)
          + v20[3]
          + v33
          + (v13 & v15 | v12 & ~v15)
          + (__ROR8__(v15, 14) ^ __ROR8__(v15, 18) ^ __ROR8__(v15, 41));
      v39 = (__ROR8__(v16, 28) ^ __ROR8__(v16, 34) ^ __ROR8__(v16, 39)) + ((v16 | v22) & v21 | v16 & v22);
      v14 = v38 + v34;
      v17 = v39 + v38;
      v19 += 8;
      v20 += 8;
      v18 += 4;
    }
    while (v19 < 0x48);
    v40 = 0;
    *(_QWORD *)&v46 = v13;
    *((_QWORD *)&v46 + 1) = v12;
    *(_QWORD *)&v45 = v14;
    *((_QWORD *)&v45 + 1) = v15;
    *(_QWORD *)&v43 = v39 + v38;
    *((_QWORD *)&v43 + 1) = v16;
    *(_QWORD *)&v44 = v22;
    *((_QWORD *)&v44 + 1) = v21;
    do
    {
      a1[v40] = (__int128)vaddq_s64(*(int64x2_t *)((char *)&v43 + v40 * 16), (int64x2_t)a1[v40]);
      ++v40;
    }
    while (v40 != 4);
    a3 += 128;
  }
}

uint64_t sub_19B70C50C(uint64_t a1, const void *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unsigned int v20;
  _QWORD v22[2];

  v22[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = (uint64_t)a2 + v7 + 8;
  if (v6 <= *(unsigned int *)(v8 + v6))
    *(_DWORD *)(v8 + v6) = 0;
  v9 = v7 + 8 + v6;
  v10 = (v9 + 11) & 0xFFFFFFFFFFFFFFF8;
  v11 = (_QWORD *)((char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v11, v10);
  memcpy(v11, a2, v9 + 4);
  v12 = (char *)v11 + v7 + 8;
  v13 = *(unsigned int *)&v12[v6];
  *v11 += (8 * v13);
  *(_DWORD *)&v12[v6] = v13 + 1;
  v12[v13] = 0x80;
  v14 = *(unsigned int *)&v12[v6];
  if (v6 - 16 < v14)
  {
    while (v6 > v14)
    {
      *(_DWORD *)&v12[v6] = v14 + 1;
      v12[v14] = 0;
      v14 = *(unsigned int *)&v12[v6];
    }
    (*(void (**)(_QWORD *, uint64_t))(a1 + 48))(v11 + 1, 1);
    LODWORD(v14) = 0;
    v7 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 16);
    *(_DWORD *)((char *)v11 + v7 + v6 + 8) = 0;
  }
  v15 = (uint64_t)v11 + v7 + 8;
  v16 = (_DWORD *)(v15 + v6);
  if (v6 - 8 > v14)
  {
    v17 = v14;
    do
    {
      *v16 = v14 + 1;
      *(_BYTE *)(v15 + v17) = 0;
      v17 = *v16;
      LODWORD(v14) = *v16;
    }
    while (v6 - 8 > v17);
  }
  *((_QWORD *)v16 - 1) = bswap64(*v11);
  (*(void (**)(_QWORD *, uint64_t))(a1 + 48))(v11 + 1, 1);
  if (*(_QWORD *)a1 >= 8uLL)
  {
    v18 = 0;
    v19 = 0;
    v20 = 1;
    do
    {
      *(_QWORD *)(a3 + v18) = bswap64(v11[v19 + 1]);
      v19 = v20++;
      v18 += 8;
    }
    while (v19 < *(_QWORD *)a1 >> 3);
  }
  return sub_19B70D5B8(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 16) + 12, v11);
}

uint64_t sub_19B70C6F4(uint64_t result, int8x16_t *a2, int8x16_t *a3, uint64_t a4)
{
  unint64_t v4;
  char v5;
  uint64x2_t v6;
  uint64x2_t v7;
  BOOL v8;
  BOOL v9;
  int8x16_t v10;
  int8x16_t v11;
  uint64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  unint64_t *v15;
  BOOL v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  if (result)
  {
    v4 = a3->i64[0];
    v5 = 64 - a4;
    v6 = (uint64x2_t)vdupq_n_s64(64 - a4);
    v7 = (uint64x2_t)vdupq_n_s64(-a4);
    v8 = result == 4;
    v9 = result < 4;
    result -= 4;
    if (!v9)
    {
      if (v8)
      {
        v13 = a3[1];
        *a2 = veorq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)a3, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(*a3, v13, 8uLL), v6));
        a2[1] = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v13, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v13, v13, 8uLL).u64[0], v6));
        return result;
      }
      do
      {
        v10 = *a3;
        v11 = a3[1];
        a3 += 2;
        v4 = a3->i64[0];
        v12.i64[0] = vextq_s8(v11, v11, 8uLL).u64[0];
        v12.i64[1] = a3->i64[0];
        *a2 = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v10, v7), (int8x16_t)vshlq_u64((uint64x2_t)vextq_s8(v10, v11, 8uLL), v6));
        a2[1] = veorq_s8((int8x16_t)vshlq_u64((uint64x2_t)v11, v7), (int8x16_t)vshlq_u64(v12, v6));
        a2 += 2;
        v9 = result <= 4;
        result -= 4;
      }
      while (!v9);
    }
    v14 = result + 4;
    v15 = &a3->u64[1];
    v16 = v14 == 2;
    v9 = v14 < 2;
    result = v14 - 2;
    if (!v9)
    {
      if (v16)
      {
        v19 = *v15 >> a4;
        a2->i64[0] = (v4 >> a4) | (*v15 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        a2->i64[1] = v19;
        return result;
      }
      do
      {
        v17 = *v15;
        v18 = v15[1];
        v15 += 2;
        a2->i64[0] = (v4 >> a4) | (v17 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        a2->i64[1] = (v17 >> a4) | (v18 << v5) & (((unint64_t)(64 - a4) >> 6) - 1);
        ++a2;
        v4 = v18;
        v9 = result <= 2;
        result -= 2;
      }
      while (!v9);
    }
    a2->i64[0] = v4 >> a4;
  }
  return result;
}

uint64_t sub_19B70C80C(unint64_t *a1, unint64_t a2, unsigned __int8 *a3, unint64_t a4, unsigned __int8 *a5)
{
  char v8;
  unint64_t v14;
  uint64_t v15;
  char v17;

  v8 = 0;
  v17 = 0;
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if ((_ReadStatusReg(ARM64_SYSREG(3, 3, 4, 2, 5)) & 0x1000000) != 0)
    {
      v8 = 0;
    }
    else
    {
      __asm { MSR             DIT, #1 }
      v8 = 1;
    }
  }
  v17 = v8;
  v14 = *a1;
  if (sub_19B708AEC(*a1, a1 + 3, a4, a5) || sub_19B708AEC(v14, &a1[2 * *a1 + 4], a2, a3))
    v15 = 4294967273;
  else
    v15 = sub_19B70DE44(a1);
  sub_19B70EAB4(&v17);
  return v15;
}

uint64_t sub_19B70C8DC(uint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = 1 << a2;
  v4 = (a2 >> 3) & 0x1FFFFFFFFFFFFFF8;
  if (a3)
    v5 = *(_QWORD *)(result + v4) | v3;
  else
    v5 = *(_QWORD *)(result + v4) & ~v3;
  *(_QWORD *)(result + v4) = v5;
  return result;
}

uint64_t sub_19B70C90C(uint64_t a1, void *a2)
{
  return sub_19B70D5B8(8 * a1, a2);
}

uint64_t sub_19B70C914(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  *a2 = a3;
  return sub_19B70D5B8(8 * a1 - 8, a2 + 1);
}

uint64_t sub_19B70C924(uint64_t result, unint64_t *a2)
{
  unint64_t *i;
  unint64_t v3;

  for (i = &a2[result - 1]; a2 < i; --i)
  {
    v3 = bswap64(*a2);
    *a2++ = bswap64(*i);
    *i = v3;
  }
  if ((result & 1) != 0)
    *a2 = bswap64(*a2);
  return result;
}

unint64_t sub_19B70C968(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v10 = sub_19B708310();
  v11 = __ROR8__(0x5555555555555555, a2 | (2 * v10));
  if (a1)
  {
    v12 = 0;
    do
    {
      v14 = *a4++;
      v13 = v14;
      v15 = *a5++;
      v16 = __PAIR128__(v12, v12) - v13;
      v17 = v16 + v15;
      if (__CFADD__((_QWORD)v16, v15))
        v18 = *((_QWORD *)&v16 + 1) + 1;
      else
        v18 = (__PAIR128__(v12, v12) - v13) >> 64;
      v12 = v18 >> 63;
      v19 = v13 ^ v17;
      v20 = v13 ^ v10;
      *a3 = v20;
      *a3++ = v19 & v11 ^ v19 & 0x5555555555555555 ^ v20 ^ v10;
      --a1;
    }
    while (a1);
    v21 = (unint64_t)v18 >> 63;
  }
  else
  {
    v21 = 0;
  }
  return v21 & a2;
}

unint64_t sub_19B70CA14(unint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  if (result)
  {
    v2 = result;
    result = 0;
    v3 = v2 - 1;
    v4 = (v2 << 6) - 64;
    do
    {
      v5 = *(_QWORD *)(a2 + 8 * v3);
      result = ((((v5 | HIDWORD(v5)) + 0xFFFFFFFF) >> 32) - 1) & result | (__clz(__rbit64(v5 | 0x8000000000000000))
                                                                                       + v4) & -(uint64_t)(((v5 | HIDWORD(v5)) + 0xFFFFFFFF) >> 32);
      --v3;
      v4 -= 64;
    }
    while (v3 < v2);
  }
  return result;
}

uint64_t sub_19B70CA7C(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, unint64_t *a5, unint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t *v19;
  size_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  NSObject *v34;
  void *__s;
  void *v36;
  unint64_t v37;
  unint64_t *v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t *v43;
  unint64_t *v44;

  v14 = (uint64_t *)*a2;
  v16 = (uint64_t)(*a2 + 4);
  v15 = **a2;
  if (a3 <= 0xF)
  {
    v34 = sub_19B708160();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_FAULT))
      sub_19B70CF58(a3, v34);
  }
  if (!sub_19B7098F8(v14, a5) && !sub_19B7098F8(v14, a6))
  {
    v38 = a5;
    v41 = *(_QWORD *)(a1 + 16);
    v19 = (int8x16_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v39 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v44 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v43 = (unint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v40 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v15);
    v42 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 3 * v15);
    v20 = sub_19B7032D0((uint64_t *)a2);
    v36 = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    memset(v36, 170, v20);
    __s = (void *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, v15);
    v37 = v20;
    memset(__s, 255, v20);
    v21 = sub_19B7076C4(v16 + 40 * *v14);
    v22 = v21;
    if ((unint64_t)(v21 + 7) >> 3 >= a3)
      v23 = a3;
    else
      v23 = (unint64_t)(v21 + 7) >> 3;
    v24 = sub_19B708AEC(v15, v19, v23, a4);
    if ((v24 & 0x80000000) == 0)
    {
      if (v22 < 8 * a3)
        sub_19B708C1C(v15, v19, v19, -(int)v22 & 7);
      v25 = (unint64_t *)sub_19B70E830(v16 + 40 * v15);
      if (!sub_19B709054(a1, v15, v39, v19->i64, v25))
        sub_19B708C08(v15, v19, v39);
      if (sub_19B7076B0(a1, v16 + 40 * v15)
        || (sub_19B70E5B0(a1, v16 + 40 * v15),
            sub_19B70E5B0(a1, v16 + 40 * v15),
            v26 = (unint64_t *)(a2 + 2),
            sub_19B708A68(v15, (uint64_t *)&a2[2 * *v14 + 2]) != 1)
        || v26[2 * *v14] != 1)
      {
LABEL_37:
        v17 = 4294967289;
LABEL_39:
        v29 = v41;
LABEL_34:
        *(_QWORD *)(a1 + 16) = v29;
        return v17;
      }
      v27 = v16 + 40 * v15;
      v24 = sub_19B706448(a1, (uint64_t)v14);
      if (!(_DWORD)v24)
      {
        v24 = sub_19B706448(a1, (uint64_t)v14);
        if (!(_DWORD)v24)
        {
          if (sub_19B707EF0(a1, v14, v42))
          {
            v28 = *v14;
            if (sub_19B7085CC(*v14, (unint64_t *)(v16 + 16 * *v14 + 8 * *v14), v26))
            {
              v17 = sub_19B706454(a1, v14, v40, v44, (uint64_t)v40, v43, v42);
              v29 = v41;
              if ((_DWORD)v17)
                goto LABEL_34;
            }
            else
            {
              v30 = v16 + 40 * v28;
              v31 = *(_QWORD *)(a1 + 16);
              (*(void (**)(uint64_t, uint64_t))(a1 + 24))(a1, 3 * v28);
              sub_19B7076C4(v30);
              if (sub_19B705DFC(a1, (uint64_t)v14)
                || (sub_19B7076C4(v30), sub_19B705DFC(a1, (uint64_t)v14)))
              {
                v17 = 0xFFFFFFFFLL;
              }
              else
              {
                sub_19B7048F0(a1, (uint64_t)v14);
                v17 = 0;
              }
              v29 = v41;
              *(_QWORD *)(a1 + 16) = v31;
              if ((_DWORD)v17)
                goto LABEL_34;
            }
            if (sub_19B7035F0(a1, v14, (uint64_t)v40, (uint64_t)v40))
            {
              v17 = 4294967289;
            }
            else
            {
              v32 = (unint64_t *)sub_19B70E830(v27);
              if ((sub_19B7085CC(v15, (unint64_t *)v40, v32) & 0x80000000) == 0)
              {
                v33 = (unint64_t *)sub_19B70E830(v27);
                sub_19B709054(a1, v15, v40, (uint64_t *)v40, v33);
              }
              if (sub_19B7085CC(v15, (unint64_t *)v40, v38))
                v17 = 4294967150;
              else
                v17 = 0;
              sub_19B7091B8(v15, v38, v37, (char *)v36);
              sub_19B7091B8(v15, (unint64_t *)v40, v37, (char *)__s);
              sub_19B709890(a8, (uint64_t)&unk_19B71A3A0, v37, (uint64_t)v36, (uint64_t)__s);
            }
            goto LABEL_34;
          }
          goto LABEL_37;
        }
      }
    }
    v17 = v24;
    goto LABEL_39;
  }
  return 4294967289;
}

uint64_t sub_19B70CF3C(uint64_t a1, unint64_t **a2, unint64_t a3, unsigned __int8 *a4, unint64_t *a5, unint64_t *a6, uint64_t a7)
{
  return sub_19B70CA7C(a1, a2, a3, a4, a5, a6, (uint64_t)&(*a2)[2 * **a2 + 4 + **a2], a7);
}

void sub_19B70CF58(uint64_t a1, NSObject *a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 134217984;
  v3 = a1;
  _os_log_fault_impl(&dword_19B6B1000, a2, OS_LOG_TYPE_FAULT, "Digest should be at least 128 bits long: argument digest_len = %lu", (uint8_t *)&v2, 0xCu);
}

double sub_19B70CFCC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64x2_t a5)
{
  uint64_t v5;
  uint64x2_t v6;
  uint64x2_t v7;
  unint64_t *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64x2_t v12;
  uint64x2_t v13;
  uint64x2_t v14;
  uint64x2_t v15;
  uint64x2_t v16;
  int8x16_t v17;
  uint64_t v18;
  uint64x2_t v19;

  v5 = a2 + 8 * a1;
  v6 = (uint64x2_t)vdupq_n_s64(a4);
  v7 = (uint64x2_t)vdupq_n_s64(a4 - 64);
  v8 = (unint64_t *)(a3 + 8 * a1 - 8);
  v9 = a1 == 4;
  v10 = a1 < 4;
  v11 = a1 - 4;
  if (!v10)
  {
    if (v9)
    {
      v16.i64[0] = 0;
      v16.i64[1] = *(v8 - 3);
      a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(v16, v7), (int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 3), v6));
      v17 = veorq_s8((int8x16_t)vshlq_u64(*((uint64x2_t *)v8 - 1), v7), (int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 1), v6));
      *(uint64x2_t *)(v5 - 32) = a5;
      *(int8x16_t *)(v5 - 16) = v17;
      return *(double *)a5.i64;
    }
    do
    {
      v12 = *(uint64x2_t *)(v8 - 3);
      v13 = *(uint64x2_t *)(v8 - 1);
      v14 = *((uint64x2_t *)v8 - 2);
      v15 = *((uint64x2_t *)v8 - 1);
      v8 -= 4;
      a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(v14, v7), (int8x16_t)vshlq_u64(v12, v6));
      *(uint64x2_t *)(v5 - 32) = a5;
      *(int8x16_t *)(v5 - 16) = veorq_s8((int8x16_t)vshlq_u64(v15, v7), (int8x16_t)vshlq_u64(v13, v6));
      v5 -= 32;
      v10 = v11 <= 4;
      v11 -= 4;
    }
    while (!v10);
  }
  v18 = v11 & 3;
  if (!v18)
    return *(double *)a5.i64;
  if (v18 == 3)
  {
    v19 = *((uint64x2_t *)v8 - 1);
  }
  else
  {
    if ((v18 & 2) == 0)
      goto LABEL_13;
    v19.i64[0] = 0;
    v19.i64[1] = *(v8 - 1);
  }
  a5 = (uint64x2_t)veorq_s8((int8x16_t)vshlq_u64(*(uint64x2_t *)(v8 - 1), v6), (int8x16_t)vshlq_u64(v19, v7));
  v8 -= 2;
  *(uint64x2_t *)(v5 - 16) = a5;
  v5 -= 16;
LABEL_13:
  if ((v18 & 1) != 0)
  {
    a5.i64[0] = *v8;
    a5.i64[0] = vshlq_u64(a5, v6).u64[0];
    *(_QWORD *)(v5 - 8) = a5.i64[0];
  }
  return *(double *)a5.i64;
}

_QWORD *sub_19B70D0C0(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int128 v17;
  unsigned __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL1 v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BOOL8 v28;
  _BOOL8 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _BOOL8 v33;
  _BOOL8 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BOOL8 v43;
  _BOOL8 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BOOL8 v48;
  _BOOL8 v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL8 v53;
  _BOOL8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BOOL8 v58;
  _BOOL8 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL8 v63;
  _BOOL8 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL8 v68;
  _BOOL8 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL8 v73;
  _BOOL8 v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _BOOL8 v78;
  _BOOL8 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BOOL8 v83;
  _BOOL8 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BOOL8 v88;
  _BOOL8 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL8 v93;
  _BOOL8 v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BOOL8 v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  _BOOL8 v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  _BOOL8 v108;
  unint64_t v109;
  unint64_t v110;
  unint64_t v111;
  unsigned __int128 v112;
  _BOOL8 v113;
  unsigned __int128 v114;
  unint64_t v115;
  _BOOL8 v116;
  unint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unsigned __int128 v120;
  _BOOL8 v121;
  uint64_t v122;
  uint64_t v123;
  unsigned __int128 v124;
  unint64_t v125;
  _BOOL1 v126;
  unint64_t v127;
  BOOL v128;
  unsigned __int128 v129;
  unsigned __int128 v130;
  unsigned __int128 v131;
  unsigned __int128 v132;
  unsigned __int128 v133;
  unsigned __int128 v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  uint64_t v138;
  _BOOL8 v139;
  unsigned __int128 v140;
  unint64_t v141;
  _BOOL8 v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unsigned __int128 v150;
  unint64_t v151;
  _BOOL1 v152;
  unint64_t v153;
  BOOL v154;
  unsigned __int128 v155;
  unsigned __int128 v156;
  unsigned __int128 v157;
  unsigned __int128 v158;
  unsigned __int128 v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  uint64_t v163;
  _BOOL8 v164;
  unsigned __int128 v165;
  unint64_t v166;
  _BOOL8 v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned __int128 v175;
  unint64_t v176;
  _BOOL1 v177;
  unint64_t v178;
  BOOL v179;
  unsigned __int128 v180;
  unsigned __int128 v181;
  unsigned __int128 v182;
  unsigned __int128 v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  _BOOL8 v188;
  unsigned __int128 v189;
  unint64_t v190;
  _BOOL8 v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unsigned __int128 v199;
  unint64_t v200;
  _BOOL1 v201;
  unint64_t v202;
  BOOL v203;
  unsigned __int128 v204;
  unsigned __int128 v205;
  unsigned __int128 v206;
  uint64_t v207;
  unint64_t v208;
  unint64_t v209;
  uint64_t v210;
  _BOOL8 v211;
  unsigned __int128 v212;
  unint64_t v213;
  _BOOL8 v214;
  uint64_t v215;
  unint64_t v216;
  unint64_t v217;
  unint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  unsigned __int128 v222;
  unint64_t v223;
  _BOOL1 v224;
  unint64_t v225;
  BOOL v226;
  unsigned __int128 v227;
  unsigned __int128 v228;
  uint64_t v229;
  unint64_t v230;
  unint64_t v231;
  uint64_t v232;
  _BOOL8 v233;
  unsigned __int128 v234;
  unint64_t v235;
  _BOOL8 v236;
  uint64_t v237;
  unint64_t v238;
  unint64_t v239;
  unint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned __int128 v244;
  uint64_t v245;
  _BOOL1 v246;
  unint64_t v247;
  BOOL v248;
  unsigned __int128 v249;
  unint64_t v250;
  uint64_t v251;
  _BOOL1 v252;
  uint64_t v253;
  _BOOL1 v254;
  uint64_t v255;
  _BOOL1 v256;
  unint64_t v257;
  _BOOL1 v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  _QWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v3 += 2;
  v8 = *v3;
  v9 = v3[1];
  v11 = *a3;
  v12 = a3[1];
  v10 = a3 + 2;
  v13 = *v10;
  v14 = v10[1];
  v10 += 2;
  v15 = *v10;
  v16 = v10[1];
  v17 = v5 * (unsigned __int128)v11 + ((v4 * (unsigned __int128)v11) >> 64);
  v18 = v17 + v4 * (unsigned __int128)v12;
  v19 = __CFADD__(__CFADD__((_QWORD)v17, v4 * v12), *((_QWORD *)&v17 + 1)) | __CFADD__((v4* (unsigned __int128)v12) >> 64, *((_QWORD *)&v18 + 1));
  v20 = (v6 * (unsigned __int128)v11) >> 64;
  v21 = *((_QWORD *)&v18 + 1) + v6 * v11;
  v22 = __CFADD__(__CFADD__(*((_QWORD *)&v18 + 1), v6 * v11), v19);
  v23 = __CFADD__(*((_QWORD *)&v18 + 1), v6 * v11) + v19;
  v22 |= __CFADD__(v20, v23);
  v23 += v20;
  v24 = v22;
  v25 = (v5 * (unsigned __int128)v12) >> 64;
  v22 = __CFADD__(v21, v5 * v12);
  v26 = v21 + v5 * v12;
  v28 = v22;
  v22 = __CFADD__(v22, v23);
  v27 = v28 + v23;
  v22 |= __CFADD__(v25, v27);
  v27 += v25;
  v29 = v22 + v24;
  v30 = (v4 * (unsigned __int128)v13) >> 64;
  v22 = __CFADD__(v26, v4 * v13);
  v31 = v26 + v4 * v13;
  v33 = v22;
  v22 = __CFADD__(v22, v27);
  v32 = v33 + v27;
  v22 |= __CFADD__(v30, v32);
  v32 += v30;
  v34 = v22 + v29;
  v35 = (v7 * (unsigned __int128)v11) >> 64;
  v22 = __CFADD__(v32, v7 * v11);
  v36 = v32 + v7 * v11;
  v38 = v22;
  v22 = __CFADD__(v22, v34);
  v37 = v38 + v34;
  v22 |= __CFADD__(v35, v37);
  v37 += v35;
  v39 = v22;
  v40 = (v6 * (unsigned __int128)v12) >> 64;
  v22 = __CFADD__(v36, v6 * v12);
  v41 = v36 + v6 * v12;
  v43 = v22;
  v22 = __CFADD__(v22, v37);
  v42 = v43 + v37;
  v22 |= __CFADD__(v40, v42);
  v42 += v40;
  v44 = v22 + v39;
  v45 = (v5 * (unsigned __int128)v13) >> 64;
  v22 = __CFADD__(v41, v5 * v13);
  v46 = v41 + v5 * v13;
  v48 = v22;
  v22 = __CFADD__(v22, v42);
  v47 = v48 + v42;
  v22 |= __CFADD__(v45, v47);
  v47 += v45;
  v49 = v22 + v44;
  v50 = (v4 * (unsigned __int128)v14) >> 64;
  v22 = __CFADD__(v46, v4 * v14);
  v51 = v46 + v4 * v14;
  v53 = v22;
  v22 = __CFADD__(v22, v47);
  v52 = v53 + v47;
  v22 |= __CFADD__(v50, v52);
  v52 += v50;
  v54 = v22 + v49;
  v55 = (*v3 * (unsigned __int128)v11) >> 64;
  v22 = __CFADD__(v52, *v3 * v11);
  v56 = v52 + *v3 * v11;
  v58 = v22;
  v22 = __CFADD__(v22, v54);
  v57 = v58 + v54;
  v22 |= __CFADD__(v55, v57);
  v57 += v55;
  v59 = v22;
  v60 = (v7 * (unsigned __int128)v12) >> 64;
  v22 = __CFADD__(v56, v7 * v12);
  v61 = v56 + v7 * v12;
  v63 = v22;
  v22 = __CFADD__(v22, v57);
  v62 = v63 + v57;
  v22 |= __CFADD__(v60, v62);
  v62 += v60;
  v64 = v22 + v59;
  v65 = (v6 * (unsigned __int128)v13) >> 64;
  v22 = __CFADD__(v61, v6 * v13);
  v66 = v61 + v6 * v13;
  v68 = v22;
  v22 = __CFADD__(v22, v62);
  v67 = v68 + v62;
  v22 |= __CFADD__(v65, v67);
  v67 += v65;
  v69 = v22 + v64;
  v70 = (v5 * (unsigned __int128)v14) >> 64;
  v22 = __CFADD__(v66, v5 * v14);
  v71 = v66 + v5 * v14;
  v73 = v22;
  v22 = __CFADD__(v22, v67);
  v72 = v73 + v67;
  v22 |= __CFADD__(v70, v72);
  v72 += v70;
  v74 = v22 + v69;
  v75 = (v4 * (unsigned __int128)v15) >> 64;
  v22 = __CFADD__(v71, v4 * v15);
  v76 = v71 + v4 * v15;
  v78 = v22;
  v22 = __CFADD__(v22, v72);
  v77 = v78 + v72;
  v22 |= __CFADD__(v75, v77);
  v77 += v75;
  v79 = v22 + v74;
  v80 = (v9 * (unsigned __int128)v11) >> 64;
  v22 = __CFADD__(v77, v9 * v11);
  v81 = v77 + v9 * v11;
  v83 = v22;
  v22 = __CFADD__(v22, v79);
  v82 = v83 + v79;
  v22 |= __CFADD__(v80, v82);
  v82 += v80;
  v84 = v22;
  v85 = (*v3 * (unsigned __int128)v12) >> 64;
  v22 = __CFADD__(v81, *v3 * v12);
  v86 = v81 + *v3 * v12;
  v88 = v22;
  v22 = __CFADD__(v22, v82);
  v87 = v88 + v82;
  v22 |= __CFADD__(v85, v87);
  v87 += v85;
  v89 = v22 + v84;
  v90 = (v7 * (unsigned __int128)v13) >> 64;
  v22 = __CFADD__(v86, v7 * v13);
  v91 = v86 + v7 * v13;
  v93 = v22;
  v22 = __CFADD__(v22, v87);
  v92 = v93 + v87;
  v22 |= __CFADD__(v90, v92);
  v92 += v90;
  v94 = v22 + v89;
  v95 = (v6 * (unsigned __int128)v14) >> 64;
  v22 = __CFADD__(v91, v6 * v14);
  v96 = v91 + v6 * v14;
  v98 = v22;
  v22 = __CFADD__(v22, v92);
  v97 = v98 + v92;
  v22 |= __CFADD__(v95, v97);
  v97 += v95;
  v99 = v22 + v94;
  v100 = (v5 * (unsigned __int128)v15) >> 64;
  v22 = __CFADD__(v96, v5 * v15);
  v101 = v96 + v5 * v15;
  v103 = v22;
  v22 = __CFADD__(v22, v97);
  v102 = v103 + v97;
  v22 |= __CFADD__(v100, v102);
  v102 += v100;
  v104 = v22 + v99;
  v105 = (v4 * (unsigned __int128)v16) >> 64;
  v22 = __CFADD__(v101, v4 * v16);
  v106 = v101 + v4 * v16;
  v108 = v22;
  v22 = __CFADD__(v22, v102);
  v107 = v108 + v102;
  v22 |= __CFADD__(v105, v107);
  v107 += v105;
  v109 = 0x100000001 * v4 * v11;
  v110 = HIDWORD(v109);
  v111 = HIDWORD(v109) + __CFADD__(v4 * v11, (v4 * v11) << 32) + (_QWORD)v18;
  v112 = __PAIR128__(v51, __CFADD__(__CFADD__(v4 * v11, (v4 * v11) << 32), (_QWORD)v18) | __CFADD__(HIDWORD(v109), __CFADD__(v4 * v11, (v4 * v11) << 32)+ (_QWORD)v18))+ v31;
  v113 = __CFADD__(__CFADD__(__CFADD__(__CFADD__(v4 * v11, (v4 * v11) << 32), (_QWORD)v18) | __CFADD__(HIDWORD(v109), __CFADD__(v4 * v11, (v4 * v11) << 32)+ (_QWORD)v18), v31), v51);
  v114 = __PAIR128__(v106, v113) + v76;
  v116 = __CFADD__(__CFADD__(v113, v76), v106);
  v115 = v109 + v116 + v107;
  v117 = (__CFADD__(v116, v107) | __CFADD__(v109, v116 + v107)) + v22 + v104;
  v22 = v111 >= (v4 * v11) << 32;
  v120 = __PAIR128__(v112, v111) - __PAIR128__(v109, (v4 * v11) << 32);
  v119 = v120 >> 64;
  v118 = v120;
  v121 = !__CFSUB__((_QWORD)v112, v109, v22);
  v22 = v119 >= v110;
  v124 = __PAIR128__(*((unint64_t *)&v112 + 1), v119) - __PAIR128__(v121, v110);
  v123 = v124 >> 64;
  v122 = v124;
  v126 = __CFSUB__(*((_QWORD *)&v112 + 1), v121, v22);
  v125 = v114 - !v126;
  v128 = (unint64_t)v114 >= !v126;
  v127 = *((_QWORD *)&v114 + 1) - !v128;
  v129 = __PAIR128__(v117, v115) - (*((_QWORD *)&v114 + 1) < (unint64_t)!v128);
  v130 = v129 + v9 * (unsigned __int128)v12;
  v131 = v130 + v8 * (unsigned __int128)v13;
  v132 = v131 + v7 * (unsigned __int128)v14;
  v133 = v132 + v6 * (unsigned __int128)v15;
  v134 = v133 + v5 * (unsigned __int128)v16;
  v135 = 0x100000001 * v118;
  v136 = (unint64_t)(0x100000001 * v118) >> 32;
  v22 = __CFADD__(__CFADD__(v118, v118 << 32), v122);
  v137 = __CFADD__(v118, v118 << 32) + v122;
  v22 |= __CFADD__(v136, v137);
  v137 += v136;
  v138 = v22 + v123;
  v139 = __CFADD__(v22, v123);
  v140 = __PAIR128__(v127, v139) + v125;
  v142 = __CFADD__(__CFADD__(v139, v125), v127);
  v141 = v142 + v134;
  v143 = v135 + __CFADD__(v142, (_QWORD)v134) + *((_QWORD *)&v134 + 1);
  v144 = (__CFADD__(__CFADD__(v142, (_QWORD)v134), *((_QWORD *)&v134 + 1)) | __CFADD__(v135, __CFADD__(v142, (_QWORD)v134)+ *((_QWORD *)&v134 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v133, v5 * v16), *((_QWORD *)&v133 + 1)) | __CFADD__((v5 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v134 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v132, v6 * v15), *((_QWORD *)&v132 + 1)) | __CFADD__((v6 * (unsigned __int128)v15) >> 64, *((_QWORD *)&v133 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v131, v7 * v14), *((_QWORD *)&v131 + 1)) | __CFADD__((v7 * (unsigned __int128)v14) >> 64, *((_QWORD *)&v132 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v130, v8 * v13), *((_QWORD *)&v130 + 1)) | __CFADD__((v8 * (unsigned __int128)v13) >> 64, *((_QWORD *)&v131 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v129, v9 * v12), *((_QWORD *)&v129 + 1)) | __CFADD__((v9 * (unsigned __int128)v12) >> 64, *((_QWORD *)&v130 + 1)));
  v22 = v137 >= v135 << 32;
  v145 = v137 - (v135 << 32);
  LOBYTE(v142) = v22;
  v22 = __CFSUB__(v138, v135, v22);
  v146 = v138 - (v135 + !v142);
  v147 = !v22;
  v22 = v146 >= v136;
  v150 = __PAIR128__(v140, v146) - __PAIR128__(v147, v136);
  v149 = v150 >> 64;
  v148 = v150;
  v152 = __CFSUB__((_QWORD)v140, v147, v22);
  v151 = *((_QWORD *)&v140 + 1) - !v152;
  v154 = *((_QWORD *)&v140 + 1) >= (unint64_t)!v152;
  v22 = v141 >= !v154;
  v153 = v141 - !v154;
  v155 = __PAIR128__(v144, v143) - !v22;
  v156 = v155 + v9 * (unsigned __int128)v13;
  v157 = v156 + v8 * (unsigned __int128)v14;
  v158 = v157 + v7 * (unsigned __int128)v15;
  v159 = v158 + v6 * (unsigned __int128)v16;
  v160 = 0x100000001 * v145;
  v161 = (0x100000001 * v145) >> 32;
  v22 = __CFADD__(__CFADD__(v145, v145 << 32), v148);
  v162 = __CFADD__(v145, v145 << 32) + v148;
  v22 |= __CFADD__(v161, v162);
  v162 += v161;
  v163 = v22 + v149;
  v164 = __CFADD__(v22, v149);
  v165 = __PAIR128__(v153, v164) + v151;
  v167 = __CFADD__(__CFADD__(v164, v151), v153);
  v166 = v167 + v159;
  v168 = v160 + __CFADD__(v167, (_QWORD)v159) + *((_QWORD *)&v159 + 1);
  v169 = (__CFADD__(__CFADD__(v167, (_QWORD)v159), *((_QWORD *)&v159 + 1)) | __CFADD__(v160, __CFADD__(v167, (_QWORD)v159)+ *((_QWORD *)&v159 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v158, v6 * v16), *((_QWORD *)&v158 + 1)) | __CFADD__((v6 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v159 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v157, v7 * v15), *((_QWORD *)&v157 + 1)) | __CFADD__((v7 * (unsigned __int128)v15) >> 64, *((_QWORD *)&v158 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v156, v8 * v14), *((_QWORD *)&v156 + 1)) | __CFADD__((v8 * (unsigned __int128)v14) >> 64, *((_QWORD *)&v157 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v155, v9 * v13), *((_QWORD *)&v155 + 1)) | __CFADD__((v9 * (unsigned __int128)v13) >> 64, *((_QWORD *)&v156 + 1)));
  v22 = v162 >= v160 << 32;
  v170 = v162 - (v160 << 32);
  LOBYTE(v167) = v22;
  v22 = __CFSUB__(v163, v160, v22);
  v171 = v163 - (v160 + !v167);
  v172 = !v22;
  v22 = v171 >= v161;
  v175 = __PAIR128__(v165, v171) - __PAIR128__(v172, v161);
  v174 = v175 >> 64;
  v173 = v175;
  v177 = __CFSUB__((_QWORD)v165, v172, v22);
  v176 = *((_QWORD *)&v165 + 1) - !v177;
  v179 = *((_QWORD *)&v165 + 1) >= (unint64_t)!v177;
  v22 = v166 >= !v179;
  v178 = v166 - !v179;
  v180 = __PAIR128__(v169, v168) - !v22;
  v181 = v180 + v9 * (unsigned __int128)v14;
  v182 = v181 + v8 * (unsigned __int128)v15;
  v183 = v182 + v7 * (unsigned __int128)v16;
  v184 = 0x100000001 * v170;
  v185 = (0x100000001 * v170) >> 32;
  v22 = __CFADD__(__CFADD__(v170, v170 << 32), v173);
  v186 = __CFADD__(v170, v170 << 32) + v173;
  v22 |= __CFADD__(v185, v186);
  v186 += v185;
  v187 = v22 + v174;
  v188 = __CFADD__(v22, v174);
  v189 = __PAIR128__(v178, v188) + v176;
  v191 = __CFADD__(__CFADD__(v188, v176), v178);
  v190 = v191 + v183;
  v192 = v184 + __CFADD__(v191, (_QWORD)v183) + *((_QWORD *)&v183 + 1);
  v193 = (__CFADD__(__CFADD__(v191, (_QWORD)v183), *((_QWORD *)&v183 + 1)) | __CFADD__(v184, __CFADD__(v191, (_QWORD)v183)+ *((_QWORD *)&v183 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v182, v7 * v16), *((_QWORD *)&v182 + 1)) | __CFADD__((v7 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v183 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v181, v8 * v15), *((_QWORD *)&v181 + 1)) | __CFADD__((v8 * (unsigned __int128)v15) >> 64, *((_QWORD *)&v182 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v180, v9 * v14), *((_QWORD *)&v180 + 1)) | __CFADD__((v9 * (unsigned __int128)v14) >> 64, *((_QWORD *)&v181 + 1)));
  v22 = v186 >= v184 << 32;
  v194 = v186 - (v184 << 32);
  LOBYTE(v191) = v22;
  v22 = __CFSUB__(v187, v184, v22);
  v195 = v187 - (v184 + !v191);
  v196 = !v22;
  v22 = v195 >= v185;
  v199 = __PAIR128__(v189, v195) - __PAIR128__(v196, v185);
  v198 = v199 >> 64;
  v197 = v199;
  v201 = __CFSUB__((_QWORD)v189, v196, v22);
  v200 = *((_QWORD *)&v189 + 1) - !v201;
  v203 = *((_QWORD *)&v189 + 1) >= (unint64_t)!v201;
  v22 = v190 >= !v203;
  v202 = v190 - !v203;
  v204 = __PAIR128__(v193, v192) - !v22;
  v205 = v204 + v9 * (unsigned __int128)v15;
  v206 = v205 + v8 * (unsigned __int128)v16;
  v207 = 0x100000001 * v194;
  v208 = (0x100000001 * v194) >> 32;
  v22 = __CFADD__(__CFADD__(v194, v194 << 32), v197);
  v209 = __CFADD__(v194, v194 << 32) + v197;
  v22 |= __CFADD__(v208, v209);
  v209 += v208;
  v210 = v22 + v198;
  v211 = __CFADD__(v22, v198);
  v212 = __PAIR128__(v202, v211) + v200;
  v214 = __CFADD__(__CFADD__(v211, v200), v202);
  v213 = v214 + v206;
  v215 = v207 + __CFADD__(v214, (_QWORD)v206) + *((_QWORD *)&v206 + 1);
  v216 = (__CFADD__(__CFADD__(v214, (_QWORD)v206), *((_QWORD *)&v206 + 1)) | __CFADD__(v207, __CFADD__(v214, (_QWORD)v206)+ *((_QWORD *)&v206 + 1)))+ (__CFADD__(__CFADD__((_QWORD)v205, v8 * v16), *((_QWORD *)&v205 + 1)) | __CFADD__((v8 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v206 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v204, v9 * v15), *((_QWORD *)&v204 + 1)) | __CFADD__((v9 * (unsigned __int128)v15) >> 64, *((_QWORD *)&v205 + 1)));
  v22 = v209 >= v207 << 32;
  v217 = v209 - (v207 << 32);
  LOBYTE(v214) = v22;
  v22 = __CFSUB__(v210, v207, v22);
  v218 = v210 - (v207 + !v214);
  v219 = !v22;
  v22 = v218 >= v208;
  v222 = __PAIR128__(v212, v218) - __PAIR128__(v219, v208);
  v221 = v222 >> 64;
  v220 = v222;
  v224 = __CFSUB__((_QWORD)v212, v219, v22);
  v223 = *((_QWORD *)&v212 + 1) - !v224;
  v226 = *((_QWORD *)&v212 + 1) >= (unint64_t)!v224;
  v22 = v213 >= !v226;
  v225 = v213 - !v226;
  v227 = __PAIR128__(v216, v215) - !v22;
  v228 = v227 + v9 * (unsigned __int128)v16;
  v229 = 0x100000001 * v217;
  v230 = (0x100000001 * v217) >> 32;
  v22 = __CFADD__(__CFADD__(v217, v217 << 32), v220);
  v231 = __CFADD__(v217, v217 << 32) + v220;
  v22 |= __CFADD__(v230, v231);
  v231 += v230;
  v232 = v22 + v221;
  v233 = __CFADD__(v22, v221);
  v234 = __PAIR128__(v225, v233) + v223;
  v236 = __CFADD__(__CFADD__(v233, v223), v225);
  v235 = v236 + v228;
  v237 = v229 + __CFADD__(v236, (_QWORD)v228) + *((_QWORD *)&v228 + 1);
  v238 = (__CFADD__(__CFADD__(v236, (_QWORD)v228), *((_QWORD *)&v228 + 1)) | __CFADD__(v229, __CFADD__(v236, (_QWORD)v228)+ *((_QWORD *)&v228 + 1)))+ (unint64_t)(__CFADD__(__CFADD__((_QWORD)v227, v9 * v16), *((_QWORD *)&v227 + 1)) | __CFADD__((v9 * (unsigned __int128)v16) >> 64, *((_QWORD *)&v228 + 1)));
  v22 = v231 >= v229 << 32;
  v239 = v231 - (v229 << 32);
  LOBYTE(v236) = v22;
  v22 = __CFSUB__(v232, v229, v22);
  v240 = v232 - (v229 + !v236);
  v241 = !v22;
  v22 = v240 >= v230;
  v244 = __PAIR128__(v234, v240) - __PAIR128__(v241, v230);
  v243 = v244 >> 64;
  v242 = v244;
  v246 = __CFSUB__((_QWORD)v234, v241, v22);
  v245 = *((_QWORD *)&v234 + 1) - !v246;
  v248 = *((_QWORD *)&v234 + 1) >= (unint64_t)!v246;
  v22 = v235 >= !v248;
  v247 = v235 - !v248;
  v249 = __PAIR128__(v238, v237) - !v22;
  v22 = v239 >= 0xFFFFFFFF;
  v250 = v239 - 0xFFFFFFFF;
  v252 = v22;
  v22 = __CFSUB__(v242, 0xFFFFFFFF00000000, v22);
  v251 = v242 - (!v252 - 0x100000000);
  v254 = v22;
  v22 = __CFSUB__(v243, -2, v22);
  v253 = v243 - (!v254 - 2);
  v256 = v22;
  v22 = __CFSUB__(v245, -1, v22);
  v255 = v245 - (!v256 - 1);
  v258 = v22;
  v22 = __CFSUB__(v247, -1, v22);
  v257 = v247 - (!v258 - 1);
  v259 = v249 - (!v22 - 1);
  v260 = *((_QWORD *)&v249 + 1) - !__CFSUB__((_QWORD)v249, -1, v22);
  v22 = __CFADD__(__CFADD__(v250, (v260 & 0xFFFFFFFF00000000) >> 32), v251);
  v261 = __CFADD__(v250, (v260 & 0xFFFFFFFF00000000) >> 32) + v251;
  v263 = v22 | __CFADD__(v260 & 0xFFFFFFFF00000000, v261);
  v22 = __CFADD__(v263, v253);
  v262 = v263 + v253;
  v265 = v22 | __CFADD__(v260 & 0xFFFFFFFFFFFFFFFELL, v262);
  v22 = __CFADD__(v265, v255);
  v264 = v265 + v255;
  v267 = v22 | __CFADD__(v260, v264);
  v22 = __CFADD__(v267, v257);
  v266 = v267 + v257;
  *a1 = v250 + ((v260 & 0xFFFFFFFF00000000) >> 32);
  a1[1] = (v260 & 0xFFFFFFFF00000000) + v261;
  v268 = a1 + 2;
  *v268 = (v260 & 0xFFFFFFFFFFFFFFFELL) + v262;
  v268[1] = v260 + v264;
  result = v268 + 2;
  *result = v260 + v266;
  result[1] = v260 + (v22 | __CFADD__(v260, v266)) + v259;
  return result;
}

uint64_t sub_19B70D5B8(rsize_t __n, void *__s)
{
  return memset_s(__s, __n, 0, __n);
}

uint64_t sub_19B70D5CC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = sub_19B708310();
  v11 = __ROR8__(0x5555555555555555, a2 | (2 * v10));
  v12 = 0;
  if (a1)
  {
    v13 = 0;
    do
    {
      v15 = *a4++;
      v14 = v15;
      v17 = *a5++;
      v16 = v17;
      v18 = __CFADD__(v12, v14);
      v19 = v12 + v14;
      if (v18)
        v13 = 1;
      v18 = __CFADD__(v19, v16);
      v20 = v19 + v16;
      if (v18)
        v12 = v13 + 1;
      else
        v12 = v13;
      v21 = v14 ^ v20;
      v22 = v14 ^ v10;
      *a3 = v22;
      *a3++ = v21 & v11 ^ v21 & 0x5555555555555555 ^ v22 ^ v10;
      v13 = 0;
      --a1;
    }
    while (a1);
  }
  return v12 & a2;
}

uint64_t sub_19B70D670(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  int8x16_t *v8;
  void *v9;
  int8x16_t *v10;
  uint64_t *v11;
  unsigned int v12;
  _BOOL4 v13;
  uint64_t result;

  v6 = sub_19B7076BC(a2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v9 = (void *)sub_19B70E830(a2);
  sub_19B708C08(v6, v8, v9);
  v8->i64[0] &= ~1uLL;
  v10 = (int8x16_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  sub_19B708C1C(v6, v10, v8, 1);
  v11 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v6);
  v12 = sub_19B70832C(a1, a2, v11, a3, (unint64_t *)v10);
  sub_19B702E88(a1, a2);
  v13 = sub_19B708A68(v6, v11) == 1 && *v11 == 1;
  result = v13 & ~(((v12 | ((unint64_t)(int)v12 >> 32)) + 0xFFFFFFFF) >> 32);
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t sub_19B70D7A4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  BOOL v14;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = sub_19B7076BC(a2);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v11);
  LOBYTE(a5) = sub_19B70814C(a1, v11, a3, a4, a5);
  v13 = (unint64_t *)sub_19B70E830(a2);
  v14 = sub_19B709054(a1, v11, v12, a3, v13);
  result = sub_19B7082B0(v11, !v14 | a5, a3, v12, a3);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19B70D868(uint64_t a1, uint64_t a2)
{
  return (**(uint64_t (***)(void))(a2 + 16))();
}

void *sub_19B70D874()
{
  return &unk_1E3BD1C30;
}

_QWORD *sub_19B70D880(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4, unint64_t *a5)
{
  return sub_19B70D0C0(a3, a4, a5);
}

_QWORD *sub_19B70D890(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  return sub_19B70D0C0(a3, a4, a4);
}

uint64_t sub_19B70D8A0(uint64_t a1, uint64_t a2, void *a3, unint64_t *a4)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  unint64_t *v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t result;
  unint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a1 + 16);
  v8 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  v9 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  v10 = (unint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 6);
  sub_19B70D0C0(v10, a4, a4);
  sub_19B70D0C0(v9, v10, a4);
  sub_19B70D0C0(v9, v9, v9);
  sub_19B70D0C0(v9, v9, v9);
  sub_19B70D0C0(v8, v9, a4);
  sub_19B70D0C0(v9, v8, v10);
  v11 = 4;
  do
  {
    sub_19B70D0C0(v9, v9, v9);
    --v11;
  }
  while (v11);
  sub_19B70D0C0(v8, v8, v9);
  sub_19B70D0C0(v9, v8, v10);
  v12 = 8;
  do
  {
    sub_19B70D0C0(v9, v9, v9);
    --v12;
  }
  while (v12);
  sub_19B70D0C0(v8, v8, v9);
  sub_19B70D0C0(v9, v8, v10);
  v13 = 16;
  do
  {
    sub_19B70D0C0(v9, v9, v9);
    --v13;
  }
  while (v13);
  sub_19B70D0C0(v8, v8, v9);
  sub_19B70D0C0(v9, v8, a4);
  sub_19B70D0C0(v10, v9, a4);
  v14 = 32;
  do
  {
    sub_19B70D0C0(v10, v10, v10);
    --v14;
  }
  while (v14);
  sub_19B70D0C0(v9, v10, v9);
  v15 = 64;
  do
  {
    sub_19B70D0C0(v10, v10, v10);
    --v15;
  }
  while (v15);
  sub_19B70D0C0(v10, v10, v8);
  sub_19B70D0C0(v8, v9, a4);
  v16 = 64;
  do
  {
    sub_19B70D0C0(v8, v8, v8);
    --v16;
  }
  while (v16);
  sub_19B70D0C0(v9, v8, v9);
  sub_19B70D0C0(v8, v9, a4);
  v17 = 128;
  do
  {
    sub_19B70D0C0(v8, v8, v8);
    --v17;
  }
  while (v17);
  sub_19B70D0C0(v8, v8, v9);
  v18 = 128;
  do
  {
    sub_19B70D0C0(v8, v8, v8);
    --v18;
  }
  while (v18);
  sub_19B70D0C0(v9, v8, v10);
  sub_19B70D0C0(v8, v9, a4);
  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v20 = 1;
  sub_19B70D0C0(v8, v8, &v20);
  if (sub_19B708A68(6, (uint64_t *)v8) == 1 && *v8 == 1)
  {
    sub_19B708C08(6, a3, v9);
    result = 0;
  }
  else
  {
    result = 4294967254;
  }
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

_QWORD *sub_19B70DBD8(uint64_t a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  unint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  v5 = 1;
  return sub_19B70D0C0(a3, a4, &v5);
}

uint64_t sub_19B70DC40(uint64_t a1, uint64_t a2, int8x16_t *a3, uint64_t *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t result;

  v7 = sub_19B7076BC(a2);
  v8 = *a4 & 1;
  v9 = (uint64_t *)sub_19B70E830(a2);
  v10 = sub_19B70D5CC(v7, v8, a3->i64, a4, v9);
  result = sub_19B708C1C(v7, a3, a3, 1);
  a3->i64[v7 - 1] |= v10 << 63;
  return result;
}

uint64_t sub_19B70DCD0(uint64_t a1, _QWORD *a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  char *v15;
  uint64_t *v16;

  v4 = (uint64_t *)sub_19B70E830((uint64_t)a2);
  v5 = sub_19B7076BC((uint64_t)a2);
  if ((*(_BYTE *)v4 & 1) == 0 || sub_19B708A68(v5, v4) == 1 && (unint64_t)*v4 < 3)
    return 4294967289;
  a2[2] = off_1E3BD02C0;
  v7 = sub_19B7076BC((uint64_t)a2);
  v8 = (unint64_t *)sub_19B70E830((uint64_t)a2);
  a2[1] = sub_19B70851C(v7, v8);
  v9 = (2 - ((3 * *v4) ^ 2) * *v4) * ((3 * *v4) ^ 2);
  v10 = (2 - (2 - v9 * *v4) * v9 * *v4) * (2 - v9 * *v4) * v9;
  a2[*a2 + 3] = (v10 * *v4 - 2) * v10;
  v11 = sub_19B7076BC((uint64_t)a2);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v11);
  memset(&v13[v11], 255, 8 * v11);
  v14 = (uint64_t *)sub_19B70E830((uint64_t)a2);
  sub_19B706F18(v11, v13, v14);
  v15 = (char *)&a2[*a2 + 4];
  v16 = (uint64_t *)sub_19B70E830((uint64_t)a2);
  sub_19B708654(a1, 2 * v11, (uint64_t)v13, 0, 0, v11, v15, v16);
  result = 0;
  *(_QWORD *)(a1 + 16) = v12;
  return result;
}

uint64_t sub_19B70DE44(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[4];
  void (*v6)(uint64_t);

  v2 = sub_19B7076BC((uint64_t)a1);
  v5[0] = sub_19B70E8E4(40 * v2 + 24);
  v5[1] = 5 * sub_19B7076BC((uint64_t)a1) + 3;
  v5[2] = 0;
  v5[3] = sub_19B70E91C;
  v6 = sub_19B70E960;
  if (!v5[0])
    return 4294967283;
  v3 = sub_19B70DCD0((uint64_t)v5, a1);
  v6((uint64_t)v5);
  return v3;
}

uint64_t sub_19B70DED8(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, char *a5)
{
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  unint64_t v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  char *v19;

  v10 = sub_19B7076BC((uint64_t)a2);
  v11 = v10;
  if ((a4 - 1) / v10 <= 1)
    v12 = 1;
  else
    v12 = (a4 - 1) / v10;
  v17 = a4;
  v18 = *(_QWORD *)(a1 + 16);
  v13 = (char *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v10);
  v19 = a5;
  sub_19B708C08(v11, v13, a5);
  v14 = v12 - 1;
  if (v12 != 1)
  {
    v15 = &v19[8 * v11];
    do
    {
      sub_19B708C08(v11, &v13[8 * v11], v15);
      sub_19B70BF98(a1, a2, (uint64_t *)v13, (uint64_t *)v13);
      v15 += 8 * v11;
      --v14;
    }
    while (v14);
  }
  if (v17 != v12 * v11)
    sub_19B708C08(v17 - v12 * v11, &v13[8 * v11], &v19[8 * v12 * v11]);
  sub_19B70C90C(v11 - (v17 - v12 * v11), &v13[8 * v11 + 8 * (v17 - v12 * v11)]);
  sub_19B70BF98(a1, a2, a3, (uint64_t *)v13);
  do
  {
    sub_19B708640(a1, v11, (uint64_t)v13, (uint64_t)a3, (uint64_t)&a2[*a2 + 4]);
    result = sub_19B70BF98(a1, a2, a3, (uint64_t *)v13);
    --v12;
  }
  while (v12);
  *(_QWORD *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_19B70E04C(uint64_t a1, _QWORD *a2, uint64_t *a3, char *a4)
{
  uint64_t v8;

  v8 = 2 * sub_19B7076BC((uint64_t)a2);
  return sub_19B70DED8(a1, a2, a3, v8, a4);
}

uint64_t sub_19B70E098(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 32))();
}

uint64_t sub_19B70E0A4(uint64_t a1, const void *a2, uint64_t *a3, unint64_t *a4, unint64_t *a5)
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v10 = sub_19B7076BC((uint64_t)a2);
  v11 = (unint64_t *)sub_19B70E830((uint64_t)a2);
  if ((sub_19B7085CC(v10, a4, v11) & 0x80000000) == 0)
    return 4294967289;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  v15 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v10);
  sub_19B70D5B8(8 * (*(_QWORD *)(a1 + 16) - v13), (void *)(*(_QWORD *)a1 + 8 * v13));
  v16 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v10 + 4);
  v17 = sub_19B7076BC((uint64_t)a2);
  memcpy(v16, a2, 16 * v17 + 32);
  v16[2] = off_1E3BD0308;
  sub_19B70E1F0(a1, v16, v14, (uint64_t)a4);
  v12 = sub_19B70832C(a1, (uint64_t)v16, v15, v14, a5);
  if (!(_DWORD)v12)
    sub_19B70E288(a1, v16, a3, v15);
  *(_QWORD *)(a1 + 16) = v13;
  return v12;
}

uint64_t sub_19B70E1F0(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t result;

  v8 = sub_19B7076BC((uint64_t)a2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8);
  sub_19B708640(a1, v8, (uint64_t)v10, a4, (uint64_t)&a2[*a2 + 4]);
  result = sub_19B70BF98(a1, a2, a3, v10);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19B70E288(uint64_t a1, _QWORD *a2, uint64_t *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;

  v8 = sub_19B7076BC((uint64_t)a2);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v8);
  if (v8)
    sub_19B708C08(v8, v10, a4);
  sub_19B70C90C(v8, &v10[8 * v8]);
  result = sub_19B70BF98(a1, a2, a3, (uint64_t *)v10);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19B70E320(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = sub_19B7076BC((uint64_t)a2);
  v12 = (uint64_t *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v11);
  sub_19B708640(a1, v11, (uint64_t)v12, a4, a5);
  result = sub_19B70BF98(a1, a2, a3, v12);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19B70E3B8(uint64_t a1, _QWORD *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = sub_19B7076BC((uint64_t)a2);
  v10 = (uint64_t *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v9);
  sub_19B7037F8(a1, v9, v10, a4);
  result = sub_19B70BF98(a1, a2, a3, v10);
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_19B70E448(uint64_t a1, _QWORD *a2, uint64_t *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = 2 * sub_19B7076BC((uint64_t)a2);
  v10 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, v9);
  sub_19B708C08(v9, v10, a4);
  result = sub_19B70BF98(a1, a2, a3, (uint64_t *)v10);
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

void sub_19B70E4D4()
{
  sub_19B702D5C();
}

uint64_t sub_19B70E4E8()
{
  return 0xFFFFFFFFLL;
}

void sub_19B70E4F4()
{
  sub_19B702D5C();
}

uint64_t sub_19B70E508()
{
  return 0xFFFFFFFFLL;
}

uint64_t sub_19B70E514(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v9 = *(_QWORD *)(a1 + 16);
  v10 = sub_19B7076BC(a2);
  v11 = (*(uint64_t (**)(uint64_t, uint64_t))(a1 + 24))(a1, 2 * v10);
  v12 = sub_19B7076BC(a2);
  sub_19B708640(a1, v12, v11, a4, a5);
  result = sub_19B70E098(a1, a2);
  *(_QWORD *)(a1 + 16) = v9;
  return result;
}

uint64_t sub_19B70E5B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 16))();
}

_OWORD *sub_19B70E5C0(_QWORD *a1, unint64_t *a2, unint64_t *a3)
{
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BOOL1 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BOOL8 v24;
  uint64_t v25;
  _BOOL8 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  _BOOL8 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BOOL8 v52;
  uint64_t v53;
  uint64_t v54;
  _BOOL8 v55;
  uint64_t v56;
  _BOOL8 v57;
  _BOOL8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  uint64_t v64;
  _BOOL8 v65;
  uint64_t v66;
  _BOOL8 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BOOL8 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  _BOOL8 v79;
  uint64_t v80;
  _BOOL8 v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _BOOL8 v85;
  uint64_t v86;
  _BOOL8 v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  _BOOL8 v91;
  uint64_t v92;
  _BOOL8 v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  _BOOL8 v97;
  uint64_t v98;
  _BOOL8 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BOOL8 v103;
  uint64_t v104;
  _BOOL8 v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _BOOL8 v109;
  unint64_t v110;
  _BOOL8 v111;
  uint64_t v112;
  _BOOL8 v113;
  _BOOL8 v114;
  uint64_t v115;
  unint64_t v116;
  _BOOL8 v117;
  uint64_t v118;
  uint64_t v119;
  _OWORD *result;

  v4 = *a2;
  v5 = a2[1];
  v3 = a2 + 2;
  v6 = *v3;
  v7 = v3[1];
  v9 = *a3;
  v10 = a3[1];
  v8 = a3 + 2;
  v11 = *v8;
  v12 = v8[1];
  v13 = v4 * v9;
  v14 = (v5 * (unsigned __int128)v9) >> 64;
  v15 = *v3 * v9;
  v16 = (v6 * (unsigned __int128)v9) >> 64;
  v18 = v9;
  v17 = (__PAIR128__(v5, v4) * v9) >> 64;
  v19 = __CFADD__(__CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9), v14);
  v20 = __CFADD__((v4 * (unsigned __int128)v9) >> 64, v5 * v9) + v14;
  v19 |= __CFADD__(v15, v20);
  v20 += v15;
  v21 = (v7 * (unsigned __int128)v9) >> 64;
  v22 = (v7 * (unsigned __int128)v10) >> 64;
  v24 = v19;
  v19 = __CFADD__(v19, v16);
  v23 = v24 + v16;
  v19 |= __CFADD__(v7 * v9, v23);
  v23 += v7 * v9;
  v26 = v19;
  v19 = __CFADD__(v19, v21);
  v25 = v26 + v21;
  v19 |= __CFADD__(v7 * v10, v25);
  v25 += v7 * v10;
  v27 = v7 * *v8;
  v28 = (v7 * (unsigned __int128)v11) >> 64;
  v30 = v19;
  v19 = __CFADD__(v19, v22);
  v29 = v30 + v22;
  v19 |= __CFADD__(v27, v29);
  v29 += v27;
  v32 = v19;
  v19 = __CFADD__(v19, v28);
  v31 = v32 + v28;
  v19 |= __CFADD__(v7 * v12, v31);
  v31 += v7 * v12;
  v33 = v19 + ((v7 * (unsigned __int128)v12) >> 64);
  v34 = (v4 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v17, v4 * v10);
  v35 = (__PAIR128__(v10, v18) * __PAIR128__(v5, v4)) >> 64;
  v37 = v19;
  v19 = __CFADD__(v19, v20);
  v36 = v37 + v20;
  v19 |= __CFADD__(v34, v36);
  v36 += v34;
  v38 = (v6 * (unsigned __int128)v10) >> 64;
  v40 = v19;
  v19 = __CFADD__(v19, v23);
  v39 = v40 + v23;
  v19 |= __CFADD__(v6 * v10, v39);
  v39 += v6 * v10;
  v42 = v19;
  v19 = __CFADD__(v19, v25);
  v41 = v42 + v25;
  v19 |= __CFADD__(v38, v41);
  v41 += v38;
  v43 = (v6 * (unsigned __int128)v12) >> 64;
  v45 = v19;
  v19 = __CFADD__(v19, v29);
  v44 = v45 + v29;
  v19 |= __CFADD__(v6 * v12, v44);
  v44 += v6 * v12;
  v47 = v19;
  v19 = __CFADD__(v19, v31);
  v46 = v47 + v31;
  v19 |= __CFADD__(v43, v46);
  v46 += v43;
  v48 = v19 + v33;
  v49 = (v5 * (unsigned __int128)v10) >> 64;
  v19 = __CFADD__(v36, v5 * v10);
  v50 = v36 + v5 * v10;
  v52 = v19;
  v19 = __CFADD__(v19, v39);
  v51 = v52 + v39;
  v19 |= __CFADD__(v49, v51);
  v51 += v49;
  v53 = (v6 * (unsigned __int128)v11) >> 64;
  v55 = v19;
  v19 = __CFADD__(v19, v41);
  v54 = v55 + v41;
  v19 |= __CFADD__(v6 * v11, v54);
  v54 += v6 * v11;
  v57 = v19;
  v19 = __CFADD__(v19, v44);
  v56 = v57 + v44;
  v19 |= __CFADD__(v53, v56);
  v56 += v53;
  v58 = v19;
  v59 = (v4 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v50, v4 * v11);
  v60 = v50 + v4 * v11;
  v62 = v19;
  v19 = __CFADD__(v19, v51);
  v61 = v62 + v51;
  v19 |= __CFADD__(v59, v61);
  v61 += v59;
  v63 = (v5 * (unsigned __int128)v12) >> 64;
  v65 = v19;
  v19 = __CFADD__(v19, v54);
  v64 = v65 + v54;
  v19 |= __CFADD__(v5 * v12, v64);
  v64 += v5 * v12;
  v67 = v19;
  v19 = __CFADD__(v19, v56);
  v66 = v67 + v56;
  v19 |= __CFADD__(v63, v66);
  v66 += v63;
  v68 = v19 + v58;
  v69 = (v5 * (unsigned __int128)v11) >> 64;
  v19 = __CFADD__(v61, v5 * v11);
  v70 = v61 + v5 * v11;
  v72 = v19;
  v19 = __CFADD__(v19, v64);
  v71 = v72 + v64;
  v19 |= __CFADD__(v69, v71);
  v71 += v69;
  v73 = v19;
  v74 = (v4 * (unsigned __int128)v12) >> 64;
  v19 = __CFADD__(v70, v4 * v12);
  v75 = v70 + v4 * v12;
  v77 = v19;
  v19 = __CFADD__(v19, v71);
  v76 = v77 + v71;
  v19 |= __CFADD__(v74, v76);
  v76 += v74;
  v79 = v19;
  v19 = __CFADD__(v19, v66);
  v78 = v79 + v66;
  v19 |= __CFADD__(v73, v78);
  v78 += v73;
  v81 = v19;
  v19 = __CFADD__(v19, v46);
  v80 = v81 + v46;
  v19 |= __CFADD__(v68, v80);
  v80 += v68;
  v82 = v19 + v48;
  v19 = __CFADD__(v35, v13 << 32);
  v83 = v35 + (v13 << 32);
  v85 = v19;
  v19 = __CFADD__(v19, v60);
  v84 = v85 + v60;
  v19 |= __CFADD__(HIDWORD(v13), v84);
  v84 += HIDWORD(v13);
  v87 = v19;
  v19 = __CFADD__(v19, v75);
  v86 = v87 + v75;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v13, v86);
  v86 += 0xFFFFFFFF00000001 * v13;
  v88 = v19 + ((v13 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  v19 = __CFADD__(v84, v83 << 32);
  v89 = v84 + (v83 << 32);
  v91 = v19;
  v19 = __CFADD__(v19, v86);
  v90 = v91 + v86;
  v19 |= __CFADD__(HIDWORD(v83), v90);
  v90 += HIDWORD(v83);
  v93 = v19;
  v19 = __CFADD__(v19, v76);
  v92 = v93 + v76;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v83, v92);
  v92 += 0xFFFFFFFF00000001 * v83;
  v94 = v19 + ((v83 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  v19 = __CFADD__(v90, v89 << 32);
  v95 = v90 + (v89 << 32);
  v97 = v19;
  v19 = __CFADD__(v19, v92);
  v96 = v97 + v92;
  v19 |= __CFADD__(HIDWORD(v89), v96);
  v96 += HIDWORD(v89);
  v99 = v19;
  v19 = __CFADD__(v19, v78);
  v98 = v99 + v78;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v89, v98);
  v98 += 0xFFFFFFFF00000001 * v89;
  v100 = v19 + ((v89 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  v19 = __CFADD__(v96, v95 << 32);
  v101 = v96 + (v95 << 32);
  v103 = v19;
  v19 = __CFADD__(v19, v98);
  v102 = v103 + v98;
  v19 |= __CFADD__(HIDWORD(v95), v102);
  v102 += HIDWORD(v95);
  v105 = v19;
  v19 = __CFADD__(v19, v80);
  v104 = v105 + v80;
  v19 |= __CFADD__(0xFFFFFFFF00000001 * v95, v104);
  v104 += 0xFFFFFFFF00000001 * v95;
  v106 = v19 + ((v95 * (unsigned __int128)0xFFFFFFFF00000001) >> 64);
  v19 = __CFADD__(v88, v101);
  v107 = v88 + v101;
  v109 = v19;
  v19 = __CFADD__(v19, v94);
  v108 = v109 + v94;
  v19 |= __CFADD__(v102, v108);
  v108 += v102;
  v111 = v19;
  v19 = __CFADD__(v19, v100);
  v110 = v111 + v100;
  v19 |= __CFADD__(v104, v110);
  v110 += v104;
  v113 = v19;
  v19 = __CFADD__(v19, v106);
  v112 = v113 + v106;
  v19 |= __CFADD__(v82, v112);
  v112 += v82;
  v114 = v19;
  v19 = __CFADD__(v107++, 1);
  LOBYTE(v113) = v19;
  v19 = __CFSUB__(v108, 0xFFFFFFFFLL, v19);
  v115 = v108 - (!v113 + 0xFFFFFFFFLL);
  LOBYTE(v113) = v19;
  v19 = v110 >= !v19;
  v116 = v110 - !v113;
  LOBYTE(v113) = v19;
  v19 = __CFSUB__(v112, 0xFFFFFFFF00000001, v19);
  v117 = v114 - !v19;
  v118 = v114 - !v19;
  v19 = __CFADD__(__CFADD__(v107, v117), v115);
  v119 = __CFADD__(v107, v117) + v115;
  *a1 = v107 + v117;
  a1[1] = v118 + v119;
  result = a1 + 2;
  *result = __PAIR128__(v117 & 0xFFFFFFFF00000001, v19 | __CFADD__(v118, v119))
          + __PAIR128__(v112 - ((unint64_t)!v113 - 0xFFFFFFFF), v116);
  return result;
}

uint64_t sub_19B70E794(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t result;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = sub_19B7076BC(a2);
  v9 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(a1 + 24))(a1, 2 * v8);
  sub_19B7037F8(a1, v8, v9, a4);
  result = sub_19B70E098(a1, a2);
  *(_QWORD *)(a1 + 16) = v7;
  return result;
}

uint64_t sub_19B70E824(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 24))();
}

uint64_t sub_19B70E830(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_19B70E838(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t *v13;
  uint64_t result;

  v10 = *(_QWORD *)(a1 + 16);
  v11 = sub_19B7076BC(a2);
  v12 = sub_19B709054(a1, v11, a3, a4, a5);
  v13 = (uint64_t *)sub_19B70E830(a2);
  result = sub_19B70D5CC(v11, v12, a3, a3, v13);
  *(_QWORD *)(a1 + 16) = v10;
  return result;
}

uint64_t sub_19B70E8CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 16) + 8))();
}

void *sub_19B70E8D8()
{
  return &unk_1E3BD0230;
}

void *sub_19B70E8E4(size_t a1)
{
  void *v2;
  void *v3;

  v2 = malloc(a1);
  v3 = v2;
  if (v2)
    bzero(v2, a1);
  return v3;
}

uint64_t sub_19B70E91C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = a1[1];
  v2 = a1[2];
  v4 = *a1 + 8 * v2;
  v5 = v2 + a2;
  a1[2] = v5;
  sub_19B702D68(v5 > v3);
  return v4;
}

void sub_19B70E960(uint64_t a1)
{
  sub_19B702D68(*(_QWORD *)(a1 + 16) > *(_QWORD *)(a1 + 8));
  sub_19B70D5B8(8 * *(_QWORD *)(a1 + 8), *(void **)a1);
  free(*(void **)a1);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
}

uint64_t sub_19B70E9B0(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t *v12;
  uint64_t result;

  v8 = *a2;
  v9 = (unint64_t *)sub_19B70E830((uint64_t)a2);
  if ((int)sub_19B7085CC(v8, v9, a4) < 1)
    return 0xFFFFFFFFLL;
  v10 = *a2;
  v11 = &a4[*a2];
  v12 = (unint64_t *)sub_19B70E830((uint64_t)a2);
  if ((int)sub_19B7085CC(v10, v12, v11) < 1)
    return 0xFFFFFFFFLL;
  result = sub_19B706448(a1, (uint64_t)a2);
  if (!(_DWORD)result)
  {
    if (sub_19B707EF0(a1, a2, a3))
      return 0;
    else
      return 4294967289;
  }
  return result;
}

uint64_t sub_19B70EA80(uint64_t result, unint64_t *a2, unint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;

  if (result)
  {
    v3 = result;
    result = 0;
    do
    {
      v5 = *a2++;
      v4 = v5;
      v6 = *a3++;
      v7 = v4 >= v6;
      if (v4 > v6)
        result = 1;
      if (!v7)
        result = -1;
    }
    while (v3-- > 1);
  }
  return result;
}

_BYTE *sub_19B70EAB4(_BYTE *result)
{
  if ((MEMORY[0xFFFFFC010] & 0x200000000000000) != 0)
  {
    if (*result)
      __asm { MSR             DIT, #0 }
  }
  return result;
}

void sub_19B70EAD4()
{
  __assert_rtn("getBoolFromContainer", "utility.c", 752, "exists");
}

void sub_19B70EAFC()
{
  __assert_rtn("getBoolForCarrierSlot", "utility.c", 777, "exists");
}

void sub_19B70EB24()
{
  __assert_rtn("getBoolFromCarrierPrefs", "utility.c", 813, "exists");
}

void sub_19B70EB4C(int a1)
{
  _DWORD v1[2];
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v1[0] = 67109120;
  v1[1] = a1;
  _os_log_fault_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "request for unknown screen param %d", (uint8_t *)v1, 8u);
}

void sub_19B70EBC8()
{
  int v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *MEMORY[0x1E0C80C00];
  v0 = 138412290;
  v1 = qword_1ECD35BD0;
  _os_log_fault_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "invalid product id '%@'", (uint8_t *)&v0, 0xCu);
}

void sub_19B70EC4C(unsigned int *a1, uint64_t a2, const void *a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;

  v6 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  _MGLog((uint64_t)v6, 974, (uint64_t)CFSTR("%@ does not return a BOOL, actually returns a %s"), v7, v8, v9, v10, v11, a2);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    v12 = qword_1E3BD0820[*a1];
    *(_DWORD *)buf = 138412546;
    v14 = a2;
    v15 = 2080;
    v16 = v12;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%@ does not return a BOOL, actually returns a %s", buf, 0x16u);
    if (!a3)
LABEL_3:
      abort();
  }
  else if (!a3)
  {
    goto LABEL_3;
  }
  CFRelease(a3);
  abort();
}

void sub_19B70ED14(int a1, uint64_t a2, uint64_t a3)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint8_t buf[4];
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;

  v6 = sub_19B6C1B7C("/Library/Caches/com.apple.xbs/Sources/MobileGestalt/libMobileGestalt/MobileGestalt.c");
  v7 = qword_1E3BD0820[a1];
  _MGLog((uint64_t)v6, 998, (uint64_t)CFSTR("%@ value %@ can't be converted to %s"), v8, v9, v10, v11, v12, a2);
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412802;
    v14 = a2;
    v15 = 2112;
    v16 = a3;
    v17 = 2080;
    v18 = v7;
    _os_log_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEFAULT, "%@ value %@ can't be converted to %s", buf, 0x20u);
  }
  abort();
}

void sub_19B70EDCC(const __CFData *a1)
{
  int v1;
  CFIndex Length;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 134217984;
  Length = CFDataGetLength(a1);
  _os_log_fault_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "TMAC address has unexpected length %zu", (uint8_t *)&v1, 0xCu);
}

void sub_19B70EE4C()
{
  uint8_t v0[16];

  *(_WORD *)v0 = 0;
  _os_log_fault_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Unknown DeviceClass", v0, 2u);
}

void sub_19B70EE90()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNFSecureElementClass(void)_block_invoke"), CFSTR("MGSecureElement.m"), 20, CFSTR("Unable to find class %s"), "NFSecureElement");
  __break(1u);
}

void sub_19B70EEF4(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *NearFieldLibrary(void)"), CFSTR("MGSecureElement.m"), 18, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_19B70EF58()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getNFHardwareManagerClass(void)_block_invoke"), CFSTR("MGSecureElement.m"), 21, CFSTR("Unable to find class %s"), "NFHardwareManager");
  __break(1u);
}

void sub_19B70EFBC(_QWORD *a1)
{
  void *v2;

  v2 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v2, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "void *BiometricKitLibrary(void)"), CFSTR("MGSecureElement.m"), 30, CFSTR("%s"), *a1);
  __break(1u);
}

void sub_19B70F020()
{
  void *v0;

  v0 = (void *)objc_msgSend(MEMORY[0x1E0CB3488], "currentHandler");
  objc_msgSend(v0, "handleFailureInFunction:file:lineNumber:description:", objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", "Class getBKDeviceManagerClass(void)_block_invoke"), CFSTR("MGSecureElement.m"), 31, CFSTR("Unable to find class %s"), "BKDeviceManager");
  __break(1u);
}

void sub_19B70F084(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;

  v3 = *MEMORY[0x1E0C80C00];
  v1 = 138412290;
  v2 = a1;
  _os_log_fault_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT, "Unexpected type returned for key %@.", (uint8_t *)&v1, 0xCu);
}

void sub_19B70F100(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6E2AE8(&dword_19B6B1000, MEMORY[0x1E0C81028], a3, "%s not caching sysconfig dictionary because device is in RestoreOS", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6E2AE8(&dword_19B6B1000, MEMORY[0x1E0C81028], a3, "%s creating new sysconfig dictionary", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F1E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6E2AE8(&dword_19B6B1000, MEMORY[0x1E0C81028], a3, "%s returning previously initialized sysconfig dictionary", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F25C(uint64_t a1, uint64_t a2, int a3)
{
  _DWORD v3[2];
  __int16 v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v3[0] = 67109634;
  v3[1] = a3;
  v4 = 2112;
  v5 = a1;
  v6 = 2112;
  v7 = a2;
  _os_log_debug_impl(&dword_19B6B1000, MEMORY[0x1E0C81028], OS_LOG_TYPE_DEBUG, "Appending syscfg key (0x%X): %@ from %@", (uint8_t *)v3, 0x1Cu);
}

uint64_t sub_19B70F2EC()
{
  uint64_t v0;

  dlerror();
  v0 = abort_report_np();
  return sub_19B70F30C(v0);
}

void sub_19B70F30C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6E2AE8(&dword_19B6B1000, MEMORY[0x1E0C81028], a3, "%s", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6E4970(&dword_19B6B1000, MEMORY[0x1E0C81028], a3, "Busy service: %@", a5, a6, a7, a8, 2u);
}

void sub_19B70F3E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6E4970(&dword_19B6B1000, MEMORY[0x1E0C81028], a3, "Last busy service of unexpected type %@", a5, a6, a7, a8, 2u);
}

void sub_19B70F458()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint8_t v6;

  sub_19B6F4910();
  sub_19B6F48F8(&dword_19B6B1000, v0, v1, "Failed to convert number", v2, v3, v4, v5, v6);
  sub_19B6F4908();
}

void sub_19B70F484(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F4F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F564(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F5D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F644(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F6B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F724(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F794(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F804(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F874(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F8E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F954(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70F9C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FA34(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FAA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FB14(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FB84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FBF4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FC64(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FCD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FD44(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FDB4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FE24(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FE94(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FF04(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FF74(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B70FFE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710054(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7100C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710134(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7101A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710214(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710284(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7102F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710364(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7103D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710444(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7104B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710524(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710594(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710604(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710674(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7106E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710754(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7107C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710834(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7108A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710914(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710984(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7109F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710A64(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710AD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710B44(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710BB4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710C24(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710C94(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710D04(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710D74(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710DE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710E54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710EC4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710F34(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B710FA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711014(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711084(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7110F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711164(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7111D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711244(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7112B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711324(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711394(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711404(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711474(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7114E4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711554(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7115C4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711634(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7116A4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711714(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711784(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7117F4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711864(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7118D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711944(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7119B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711A24(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711A94(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711B04(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711B74(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711BE4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711C54(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711CC4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711D34(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711DA4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711E14(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711E84(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711EF4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711F64(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B711FD4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B712044(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7120B4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B712124(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B712194(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B712204(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B712274(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_19B6F48E8(&dword_19B6B1000, a1, a3, "Number key %@ of unexpected type", a5, a6, a7, a8, 2u);
  sub_19B6E2AF8();
}

void sub_19B7122E4()
{
  __assert_rtn("_MGWaitForDevices", "MGDeviceIteration.c", 60, "type != MGDeviceIterationTypePath");
}

void sub_19B71230C()
{
  __assert_rtn("_MGWaitForDevices", "MGDeviceIteration.c", 68, "keepGoing");
}

unsigned __int8 *__cdecl CC_MD5(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80308](data, *(_QWORD *)&len, md);
}

unsigned __int8 *__cdecl CC_SHA1(const void *data, CC_LONG len, unsigned __int8 *md)
{
  return (unsigned __int8 *)MEMORY[0x1E0C80328](data, *(_QWORD *)&len, md);
}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void *value)
{
  return MEMORY[0x1E0C97D10](theArray, range.location, range.length, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray)
{
  return (CFArrayRef)MEMORY[0x1E0C97D30](allocator, theArray);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void **values)
{
  MEMORY[0x1E0C97DA8](theArray, range.location, range.length, values);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

CFStringRef CFCopyTypeIDDescription(CFTypeID type_id)
{
  return (CFStringRef)MEMORY[0x1E0C98380](type_id);
}

void CFDataAppendBytes(CFMutableDataRef theData, const UInt8 *bytes, CFIndex length)
{
  MEMORY[0x1E0C98390](theData, bytes, length);
}

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length)
{
  return (CFDataRef)MEMORY[0x1E0C983A0](allocator, bytes, length);
}

CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData)
{
  return (CFDataRef)MEMORY[0x1E0C983B0](allocator, theData);
}

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity)
{
  return (CFMutableDataRef)MEMORY[0x1E0C983B8](allocator, capacity);
}

CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8 *bytes, CFIndex length, CFAllocatorRef bytesDeallocator)
{
  return (CFDataRef)MEMORY[0x1E0C983C8](allocator, bytes, length, bytesDeallocator);
}

const UInt8 *__cdecl CFDataGetBytePtr(CFDataRef theData)
{
  return (const UInt8 *)MEMORY[0x1E0C983E0](theData);
}

void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8 *buffer)
{
  MEMORY[0x1E0C983F0](theData, range.location, range.length, buffer);
}

CFIndex CFDataGetLength(CFDataRef theData)
{
  return MEMORY[0x1E0C983F8](theData);
}

UInt8 *__cdecl CFDataGetMutableBytePtr(CFMutableDataRef theData)
{
  return (UInt8 *)MEMORY[0x1E0C98408](theData);
}

CFTypeID CFDataGetTypeID(void)
{
  return MEMORY[0x1E0C98418]();
}

void CFDataSetLength(CFMutableDataRef theData, CFIndex length)
{
  MEMORY[0x1E0C98430](theData, length);
}

void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98500](theDict, key, value);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void *key, const void **value)
{
  return MEMORY[0x1E0C985C8](theDict, key, value);
}

void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void *key)
{
  MEMORY[0x1E0C985E8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2)
{
  return MEMORY[0x1E0C98620](cf1, cf2);
}

CFStringRef CFErrorCopyDescription(CFErrorRef err)
{
  return (CFStringRef)MEMORY[0x1E0C98630](err);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleRef CFLocaleCopyCurrent(void)
{
  return (CFLocaleRef)MEMORY[0x1E0C98770]();
}

CFTypeRef CFLocaleGetValue(CFLocaleRef locale, CFLocaleKey key)
{
  return (CFTypeRef)MEMORY[0x1E0C98800](locale, key);
}

CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void *context)
{
  return MEMORY[0x1E0C98910](number, otherNumber, context);
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFNumberFormatterRef CFNumberFormatterCreate(CFAllocatorRef allocator, CFLocaleRef locale, CFNumberFormatterStyle style)
{
  return (CFNumberFormatterRef)MEMORY[0x1E0C98938](allocator, locale, style);
}

CFNumberRef CFNumberFormatterCreateNumberFromString(CFAllocatorRef allocator, CFNumberFormatterRef formatter, CFStringRef string, CFRange *rangep, CFOptionFlags options)
{
  return (CFNumberRef)MEMORY[0x1E0C98940](allocator, formatter, string, rangep, options);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98A40](key, applicationID);
}

CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat *format, CFErrorRef *error)
{
  return (CFPropertyListRef)MEMORY[0x1E0C98AD0](allocator, data, options, format, error);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

void CFRunLoopAddCommonMode(CFRunLoopRef rl, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BE0](rl, mode);
}

void CFRunLoopAddSource(CFRunLoopRef rl, CFRunLoopSourceRef source, CFRunLoopMode mode)
{
  MEMORY[0x1E0C98BF8](rl, source, mode);
}

CFRunLoopRef CFRunLoopGetCurrent(void)
{
  return (CFRunLoopRef)MEMORY[0x1E0C98C30]();
}

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled)
{
  return MEMORY[0x1E0C98CB0](mode, returnAfterSourceHandled, seconds);
}

void CFSetAddValue(CFMutableSetRef theSet, const void *value)
{
  MEMORY[0x1E0C98D70](theSet, value);
}

Boolean CFSetContainsValue(CFSetRef theSet, const void *value)
{
  return MEMORY[0x1E0C98D80](theSet, value);
}

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks *callBacks)
{
  return (CFMutableSetRef)MEMORY[0x1E0C98D98](allocator, capacity, callBacks);
}

void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString)
{
  MEMORY[0x1E0C98ED8](theString, appendedString);
}

void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  MEMORY[0x1E0C98EF0](theString, formatOptions, format);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString)
{
  return (CFArrayRef)MEMORY[0x1E0C98F58](alloc, theString, separatorString);
}

CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString)
{
  return (CFStringRef)MEMORY[0x1E0C98F78](alloc, theString);
}

CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte)
{
  return (CFDataRef)MEMORY[0x1E0C98F80](alloc, theString, *(_QWORD *)&encoding, lossByte);
}

CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98F88](alloc, data, *(_QWORD *)&encoding);
}

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength)
{
  return (CFMutableStringRef)MEMORY[0x1E0C98F90](alloc, maxLength);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding)
{
  return (CFStringRef)MEMORY[0x1E0C98FD0](alloc, cStr, *(_QWORD *)&encoding);
}

CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char *cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator)
{
  return (CFStringRef)MEMORY[0x1E0C98FE0](alloc, cStr, *(_QWORD *)&encoding, contentsDeallocator);
}

CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...)
{
  return (CFStringRef)MEMORY[0x1E0C99018](alloc, formatOptions, format);
}

CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments)
{
  return (CFStringRef)MEMORY[0x1E0C99020](alloc, formatOptions, format, arguments);
}

CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range)
{
  return (CFStringRef)MEMORY[0x1E0C99030](alloc, str, range.location, range.length);
}

CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions)
{
  CFIndex v3;
  CFIndex v4;
  CFRange result;

  v3 = MEMORY[0x1E0C99050](theString, stringToFind, compareOptions);
  result.length = v4;
  result.location = v3;
  return result;
}

Boolean CFStringGetCString(CFStringRef theString, char *buffer, CFIndex bufferSize, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99098](theString, buffer, bufferSize, *(_QWORD *)&encoding);
}

UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx)
{
  return MEMORY[0x1E0C990B0](theString, idx);
}

SInt32 CFStringGetIntValue(CFStringRef str)
{
  return MEMORY[0x1E0C990F0](str);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding)
{
  return MEMORY[0x1E0C99118](length, *(_QWORD *)&encoding);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix)
{
  return MEMORY[0x1E0C99180](theString, prefix);
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99380](allocator, url, pathComponent, isDirectory);
}

CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8 *buffer, CFIndex bufLen, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C993C8](allocator, buffer, bufLen, isDirectory);
}

CFURLRef CFURLCreateWithFileSystemPath(CFAllocatorRef allocator, CFStringRef filePath, CFURLPathStyle pathStyle, Boolean isDirectory)
{
  return (CFURLRef)MEMORY[0x1E0C99420](allocator, filePath, pathStyle, isDirectory);
}

Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8 *buffer, CFIndex maxBufLen)
{
  return MEMORY[0x1E0C99490](url, resolveAgainstBase, buffer, maxBufLen);
}

Boolean CFURLSetResourcePropertyForKey(CFURLRef url, CFStringRef key, CFTypeRef propertyValue, CFErrorRef *error)
{
  return MEMORY[0x1E0C994E0](url, key, propertyValue, error);
}

uint64_t CNEncode()
{
  return MEMORY[0x1E0C803E0]();
}

CFMutableDictionaryRef IOBSDNameMatching(mach_port_t mainPort, uint32_t options, const char *bsdName)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBAD28](*(_QWORD *)&mainPort, *(_QWORD *)&options, bsdName);
}

kern_return_t IOConnectCallMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, const void *inputStruct, size_t inputStructCnt, uint64_t *output, uint32_t *outputCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD80](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, inputStruct, inputStructCnt, output, outputCnt);
}

kern_return_t IOConnectCallScalarMethod(mach_port_t connection, uint32_t selector, const uint64_t *input, uint32_t inputCnt, uint64_t *output, uint32_t *outputCnt)
{
  return MEMORY[0x1E0CBAD88](*(_QWORD *)&connection, *(_QWORD *)&selector, input, *(_QWORD *)&inputCnt, output, outputCnt);
}

kern_return_t IOConnectCallStructMethod(mach_port_t connection, uint32_t selector, const void *inputStruct, size_t inputStructCnt, void *outputStruct, size_t *outputStructCnt)
{
  return MEMORY[0x1E0CBAD90](*(_QWORD *)&connection, *(_QWORD *)&selector, inputStruct, inputStructCnt, outputStruct, outputStructCnt);
}

io_object_t IOIteratorNext(io_iterator_t iterator)
{
  return MEMORY[0x1E0CBB668](*(_QWORD *)&iterator);
}

kern_return_t IOKitGetBusyState(mach_port_t mainPort, uint32_t *busyState)
{
  return MEMORY[0x1E0CBB678](*(_QWORD *)&mainPort, busyState);
}

uint64_t IOMobileFramebufferGetCanvasSizes()
{
  return MEMORY[0x1E0D39FD0]();
}

uint64_t IOMobileFramebufferGetDisplaySize()
{
  return MEMORY[0x1E0D39FF8]();
}

uint64_t IOMobileFramebufferGetDotPitch()
{
  return MEMORY[0x1E0D3A000]();
}

uint64_t IOMobileFramebufferGetMainDisplay()
{
  return MEMORY[0x1E0D3A020]();
}

IONotificationPortRef IONotificationPortCreate(mach_port_t mainPort)
{
  return (IONotificationPortRef)MEMORY[0x1E0CBB698](*(_QWORD *)&mainPort);
}

void IONotificationPortDestroy(IONotificationPortRef notify)
{
  MEMORY[0x1E0CBB6A0](notify);
}

CFRunLoopSourceRef IONotificationPortGetRunLoopSource(IONotificationPortRef notify)
{
  return (CFRunLoopSourceRef)MEMORY[0x1E0CBB6B0](notify);
}

CFStringRef IOObjectCopyClass(io_object_t object)
{
  return (CFStringRef)MEMORY[0x1E0CBB6D0](*(_QWORD *)&object);
}

kern_return_t IOObjectGetClass(io_object_t object, io_name_t className)
{
  return MEMORY[0x1E0CBB6D8](*(_QWORD *)&object, className);
}

kern_return_t IOObjectRelease(io_object_t object)
{
  return MEMORY[0x1E0CBB6F0](*(_QWORD *)&object);
}

CFTypeRef IOPSCopyPowerSourcesInfo(void)
{
  return (CFTypeRef)MEMORY[0x1E0CBB878]();
}

CFArrayRef IOPSCopyPowerSourcesList(CFTypeRef blob)
{
  return (CFArrayRef)MEMORY[0x1E0CBB880](blob);
}

uint64_t IOPSDrawingUnlimitedPower()
{
  return MEMORY[0x1E0CBB890]();
}

uint64_t IOPSGetPercentRemaining()
{
  return MEMORY[0x1E0CBB8A0]();
}

CFDictionaryRef IOPSGetPowerSourceDescription(CFTypeRef blob, CFTypeRef ps)
{
  return (CFDictionaryRef)MEMORY[0x1E0CBB8A8](blob, ps);
}

kern_return_t IORegistryCreateIterator(mach_port_t mainPort, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return MEMORY[0x1E0CBB8E0](*(_QWORD *)&mainPort, plane, *(_QWORD *)&options, iterator);
}

kern_return_t IORegistryEntryCreateCFProperties(io_registry_entry_t entry, CFMutableDictionaryRef *properties, CFAllocatorRef allocator, IOOptionBits options)
{
  return MEMORY[0x1E0CBB8F0](*(_QWORD *)&entry, properties, allocator, *(_QWORD *)&options);
}

CFTypeRef IORegistryEntryCreateCFProperty(io_registry_entry_t entry, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB900](*(_QWORD *)&entry, key, allocator, *(_QWORD *)&options);
}

kern_return_t IORegistryEntryCreateIterator(io_registry_entry_t entry, const io_name_t plane, IOOptionBits options, io_iterator_t *iterator)
{
  return MEMORY[0x1E0CBB910](*(_QWORD *)&entry, plane, *(_QWORD *)&options, iterator);
}

io_registry_entry_t IORegistryEntryFromPath(mach_port_t mainPort, const io_string_t path)
{
  return MEMORY[0x1E0CBB918](*(_QWORD *)&mainPort, path);
}

kern_return_t IORegistryEntryGetChildIterator(io_registry_entry_t entry, const io_name_t plane, io_iterator_t *iterator)
{
  return MEMORY[0x1E0CBB920](*(_QWORD *)&entry, plane, iterator);
}

kern_return_t IORegistryEntryGetName(io_registry_entry_t entry, io_name_t name)
{
  return MEMORY[0x1E0CBB938](*(_QWORD *)&entry, name);
}

kern_return_t IORegistryEntryGetPath(io_registry_entry_t entry, const io_name_t plane, io_string_t path)
{
  return MEMORY[0x1E0CBB970](*(_QWORD *)&entry, plane, path);
}

CFTypeRef IORegistryEntrySearchCFProperty(io_registry_entry_t entry, const io_name_t plane, CFStringRef key, CFAllocatorRef allocator, IOOptionBits options)
{
  return (CFTypeRef)MEMORY[0x1E0CBB9A0](*(_QWORD *)&entry, plane, key, allocator, *(_QWORD *)&options);
}

kern_return_t IOServiceAddMatchingNotification(IONotificationPortRef notifyPort, const io_name_t notificationType, CFDictionaryRef matching, IOServiceMatchingCallback callback, void *refCon, io_iterator_t *notification)
{
  return MEMORY[0x1E0CBB9C8](notifyPort, notificationType, matching, callback, refCon, notification);
}

kern_return_t IOServiceClose(io_connect_t connect)
{
  return MEMORY[0x1E0CBB9D0](*(_QWORD *)&connect);
}

kern_return_t IOServiceGetBusyState(io_service_t service, uint32_t *busyState)
{
  return MEMORY[0x1E0CBB9D8](*(_QWORD *)&service, busyState);
}

io_service_t IOServiceGetMatchingService(mach_port_t mainPort, CFDictionaryRef matching)
{
  return MEMORY[0x1E0CBB9E0](*(_QWORD *)&mainPort, matching);
}

kern_return_t IOServiceGetMatchingServices(mach_port_t mainPort, CFDictionaryRef matching, io_iterator_t *existing)
{
  return MEMORY[0x1E0CBB9F0](*(_QWORD *)&mainPort, matching, existing);
}

CFMutableDictionaryRef IOServiceMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA00](name);
}

CFMutableDictionaryRef IOServiceNameMatching(const char *name)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0CBBA08](name);
}

kern_return_t IOServiceOpen(io_service_t service, task_port_t owningTask, uint32_t type, io_connect_t *connect)
{
  return MEMORY[0x1E0CBBA10](*(_QWORD *)&service, *(_QWORD *)&owningTask, *(_QWORD *)&type, connect);
}

fat_arch *__cdecl NXFindBestFatArch(cpu_type_t cputype, cpu_subtype_t cpusubtype, fat_arch *fat_archs, uint32_t nfat_archs)
{
  return (fat_arch *)MEMORY[0x1E0C805D8](*(_QWORD *)&cputype, *(_QWORD *)&cpusubtype, fat_archs, *(_QWORD *)&nfat_archs);
}

const NXArchInfo *__cdecl NXGetArchInfoFromName(const char *name)
{
  return (const NXArchInfo *)MEMORY[0x1E0C805E8](name);
}

const NXArchInfo *NXGetLocalArchInfo(void)
{
  return (const NXArchInfo *)MEMORY[0x1E0C805F0]();
}

CFStringRef SCDynamicStoreCopyComputerName(SCDynamicStoreRef store, CFStringEncoding *nameEncoding)
{
  return (CFStringRef)MEMORY[0x1E0CE8738](store, nameEncoding);
}

int SCError(void)
{
  return MEMORY[0x1E0CE87E0]();
}

const char *__cdecl SCErrorString(int status)
{
  return (const char *)MEMORY[0x1E0CE87E8](*(_QWORD *)&status);
}

Boolean SCPreferencesApplyChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x1E0CE89B8](prefs);
}

Boolean SCPreferencesCommitChanges(SCPreferencesRef prefs)
{
  return MEMORY[0x1E0CE89C0](prefs);
}

SCPreferencesRef SCPreferencesCreate(CFAllocatorRef allocator, CFStringRef name, CFStringRef prefsID)
{
  return (SCPreferencesRef)MEMORY[0x1E0CE89C8](allocator, name, prefsID);
}

CFPropertyListRef SCPreferencesGetValue(SCPreferencesRef prefs, CFStringRef key)
{
  return (CFPropertyListRef)MEMORY[0x1E0CE89E0](prefs, key);
}

Boolean SCPreferencesLock(SCPreferencesRef prefs, Boolean wait)
{
  return MEMORY[0x1E0CE89E8](prefs, wait);
}

Boolean SCPreferencesSetValue(SCPreferencesRef prefs, CFStringRef key, CFPropertyListRef value)
{
  return MEMORY[0x1E0CE8A28](prefs, key, value);
}

Boolean SCPreferencesUnlock(SCPreferencesRef prefs)
{
  return MEMORY[0x1E0CE8A38](prefs);
}

void _Block_object_assign(void *a1, const void *a2, const int a3)
{
  MEMORY[0x1E0C80940](a1, a2, *(_QWORD *)&a3);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFCopySupplementalVersionDictionary()
{
  return MEMORY[0x1E0C9A0C8]();
}

uint64_t _CFCopySystemVersionDictionary()
{
  return MEMORY[0x1E0C9A0D0]();
}

uint64_t _CFMZEnabled()
{
  return MEMORY[0x1E0C9A260]();
}

uint64_t _CFPreferencesCopyValueWithContainer()
{
  return MEMORY[0x1E0C9A320]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

int __maskrune(__darwin_ct_rune_t a1, unint64_t a2)
{
  return MEMORY[0x1E0C80B50](*(_QWORD *)&a1, a2);
}

uint64_t __memcpy_chk()
{
  return MEMORY[0x1E0C80B68]();
}

uint64_t __strcat_chk()
{
  return MEMORY[0x1E0C80C30]();
}

uint64_t __strlcpy_chk()
{
  return MEMORY[0x1E0C80C48]();
}

void _os_log_debug_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81020](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_fault_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81040](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _os_once()
{
  return MEMORY[0x1E0C810C0]();
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

void abort(void)
{
  MEMORY[0x1E0C813A8]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

int access(const char *a1, int a2)
{
  return MEMORY[0x1E0C813D0](a1, *(_QWORD *)&a2);
}

int asl_log(asl_object_t client, asl_object_t msg, int level, const char *format, ...)
{
  return MEMORY[0x1E0C815D0](client, msg, *(_QWORD *)&level, format);
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

uint64_t container_system_group_path_for_identifier()
{
  return MEMORY[0x1E0C82A90]();
}

char *__cdecl ctime_r(const time_t *a1, char *a2)
{
  return (char *)MEMORY[0x1E0C82B88](a1, a2);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

dispatch_queue_global_t dispatch_get_global_queue(intptr_t identifier, uintptr_t flags)
{
  return (dispatch_queue_global_t)MEMORY[0x1E0C82D00](identifier, flags);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

void dispatch_release(dispatch_object_t object)
{
  MEMORY[0x1E0C82E98](object);
}

dispatch_semaphore_t dispatch_semaphore_create(intptr_t value)
{
  return (dispatch_semaphore_t)MEMORY[0x1E0C82EB8](value);
}

intptr_t dispatch_semaphore_signal(dispatch_semaphore_t dsema)
{
  return MEMORY[0x1E0C82EC8](dsema);
}

intptr_t dispatch_semaphore_wait(dispatch_semaphore_t dsema, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82ED8](dsema, timeout);
}

char *dlerror(void)
{
  return (char *)MEMORY[0x1E0C83038]();
}

void *__cdecl dlopen(const char *__path, int __mode)
{
  return (void *)MEMORY[0x1E0C83040](__path, *(_QWORD *)&__mode);
}

void *__cdecl dlsym(void *__handle, const char *__symbol)
{
  return (void *)MEMORY[0x1E0C83050](__handle, __symbol);
}

uint64_t dyld_get_active_platform()
{
  return MEMORY[0x1E0C830A0]();
}

uint64_t dyld_program_sdk_at_least()
{
  return MEMORY[0x1E0C83158]();
}

int fclose(FILE *a1)
{
  return MEMORY[0x1E0C832F8](a1);
}

int feof(FILE *a1)
{
  return MEMORY[0x1E0C83340](a1);
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

char *__cdecl fgets(char *a1, int a2, FILE *a3)
{
  return (char *)MEMORY[0x1E0C833A0](a1, *(_QWORD *)&a2, a3);
}

FILE *__cdecl fopen(const char *__filename, const char *__mode)
{
  return (FILE *)MEMORY[0x1E0C83460](__filename, __mode);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

int fputc(int a1, FILE *a2)
{
  return MEMORY[0x1E0C83488](*(_QWORD *)&a1, a2);
}

int fputs(const char *a1, FILE *a2)
{
  return MEMORY[0x1E0C83490](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

size_t fwrite(const void *__ptr, size_t __size, size_t __nitems, FILE *__stream)
{
  return MEMORY[0x1E0C835E0](__ptr, __size, __nitems, __stream);
}

int getattrlist(const char *a1, void *a2, void *a3, size_t a4, unsigned int a5)
{
  return MEMORY[0x1E0C83610](a1, a2, a3, a4, *(_QWORD *)&a5);
}

char *__cdecl getenv(const char *a1)
{
  return (char *)MEMORY[0x1E0C83660](a1);
}

pid_t getpid(void)
{
  return MEMORY[0x1E0C83760]();
}

kern_return_t host_info(host_t host, host_flavor_t flavor, host_info_t host_info_out, mach_msg_type_number_t *host_info_outCnt)
{
  return MEMORY[0x1E0C838B8](*(_QWORD *)&host, *(_QWORD *)&flavor, host_info_out, host_info_outCnt);
}

char *__cdecl index(const char *a1, int a2)
{
  return (char *)MEMORY[0x1E0C83948](a1, *(_QWORD *)&a2);
}

char *__cdecl mach_error_string(mach_error_t error_value)
{
  return (char *)MEMORY[0x1E0C83C80](*(_QWORD *)&error_value);
}

mach_port_t mach_host_self(void)
{
  return MEMORY[0x1E0C83C90]();
}

void *__cdecl malloc(size_t __size)
{
  return (void *)MEMORY[0x1E0C83E68](__size);
}

void *__cdecl malloc_type_calloc(size_t count, size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83EF8](count, size, type_id);
}

void *__cdecl malloc_type_malloc(size_t size, malloc_type_id_t type_id)
{
  return (void *)MEMORY[0x1E0C83F00](size, type_id);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

errno_t memset_s(void *__s, rsize_t __smax, int __c, rsize_t __n)
{
  return MEMORY[0x1E0C840D0](__s, __smax, *(_QWORD *)&__c, __n);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_new()
{
  return MEMORY[0x1E0DE7D48]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t os_parse_boot_arg_int()
{
  return MEMORY[0x1E0C848F8]();
}

void os_unfair_lock_lock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C84998](lock);
}

void os_unfair_lock_unlock(os_unfair_lock_t lock)
{
  MEMORY[0x1E0C849B0](lock);
}

uint64_t os_variant_has_internal_content()
{
  return MEMORY[0x1E0C849F0]();
}

uint64_t os_variant_is_darwinos()
{
  return MEMORY[0x1E0C84A08]();
}

int proc_pidinfo(int pid, int flavor, uint64_t arg, void *buffer, int buffersize)
{
  return MEMORY[0x1E0C84C40](*(_QWORD *)&pid, *(_QWORD *)&flavor, arg, buffer, *(_QWORD *)&buffersize);
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

int pthread_mutex_lock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E28](a1);
}

int pthread_mutex_unlock(pthread_mutex_t *a1)
{
  return MEMORY[0x1E0C84E38](a1);
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

void qsort_b(void *__base, size_t __nel, size_t __width, void *__compar)
{
  MEMORY[0x1E0C84F90](__base, __nel, __width, __compar);
}

ssize_t read(int a1, void *a2, size_t a3)
{
  return MEMORY[0x1E0C85000](*(_QWORD *)&a1, a2, a3);
}

char *__cdecl rindex(const char *a1, int a2)
{
  return (char *)MEMORY[0x1E0C85130](a1, *(_QWORD *)&a2);
}

uint64_t sandbox_check()
{
  return MEMORY[0x1E0C85178]();
}

unsigned int sleep(unsigned int a1)
{
  return MEMORY[0x1E0C85438](*(_QWORD *)&a1);
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

int sscanf(const char *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C85498](a1, a2);
}

int stat(const char *a1, stat *a2)
{
  return MEMORY[0x1E0C854D8](a1, a2);
}

int statfs(const char *a1, statfs *a2)
{
  return MEMORY[0x1E0C854E0](a1, a2);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

char *__cdecl strdup(const char *__s1)
{
  return (char *)MEMORY[0x1E0C85540](__s1);
}

char *__cdecl strerror(int __errnum)
{
  return (char *)MEMORY[0x1E0C85548](*(_QWORD *)&__errnum);
}

size_t strlcpy(char *__dst, const char *__source, size_t __size)
{
  return MEMORY[0x1E0C85570](__dst, __source, __size);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

int strncmp(const char *__s1, const char *__s2, size_t __n)
{
  return MEMORY[0x1E0C855A8](__s1, __s2, __n);
}

size_t strnlen(const char *__s1, size_t __n)
{
  return MEMORY[0x1E0C855C0](__s1, __n);
}

char *__cdecl strstr(char *__s1, const char *__s2)
{
  return (char *)MEMORY[0x1E0C85610](__s1, __s2);
}

int sysctlbyname(const char *a1, void *a2, size_t *a3, void *a4, size_t a5)
{
  return MEMORY[0x1E0C857A0](a1, a2, a3, a4, a5);
}

time_t time(time_t *a1)
{
  return MEMORY[0x1E0C85950](a1);
}

int unlink(const char *a1)
{
  return MEMORY[0x1E0C859B8](a1);
}

int vsnprintf(char *__str, size_t __size, const char *__format, va_list a4)
{
  return MEMORY[0x1E0C85B98](__str, __size, __format, a4);
}

