uint64_t sub_1ACC0B708(uint64_t a1)
{
  *(_WORD *)(a1 + 36) = 0;
  return 2;
}

uint64_t sub_1ACC0B714(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v6;
  _DWORD *v7;
  _QWORD *v8;
  int v9;

  do
  {
    v3 = a2;
    v4 = (*(uint64_t (**)(uint64_t))(a1 + 8))(a1);
    if (v4)
      return v4 & 2;
    if ((*(_BYTE *)(v3 + 6) & 0x81) != 0)
      return 0;
    if (*(_QWORD *)(v3 + 16) && sub_1ACC0B714(a1))
      return 2;
    a2 = *(_QWORD *)(v3 + 24);
  }
  while (a2);
  v6 = *(_DWORD *)(v3 + 4);
  v7 = *(_DWORD **)(v3 + 32);
  if ((v6 & 0x1000) != 0)
  {
    if (sub_1ACB73B30(a1, v7))
      return 2;
  }
  else
  {
    if (v7 && (int)*v7 >= 1)
    {
      v8 = v7 + 2;
      v9 = *v7 + 1;
      while (!*v8 || !sub_1ACC0B714(a1))
      {
        v8 += 3;
        if (--v9 <= 1)
        {
          v6 = *(_DWORD *)(v3 + 4);
          goto LABEL_20;
        }
      }
      return 2;
    }
LABEL_20:
    if ((v6 & 0x1000000) != 0 && sub_1ACC0B874(a1, *(_QWORD **)(v3 + 72), 1))
      return 2;
  }
  return 0;
}

uint64_t sub_1ACC0B80C(uint64_t result, _DWORD *a2)
{
  int v2;
  uint64_t v3;
  uint64_t *i;
  BOOL v5;

  if (a2)
  {
    v2 = *a2;
    if ((int)*a2 >= 1)
    {
      v3 = result;
      for (i = (uint64_t *)(a2 + 2); ; i += 3)
      {
        if (*i)
        {
          result = sub_1ACC0B714(v3, *i);
          if ((_DWORD)result)
            v5 = 1;
          else
            v5 = v2 <= 1;
          if (v5)
            return result;
        }
        else if (v2 < 2)
        {
          return result;
        }
        --v2;
      }
    }
  }
  return result;
}

uint64_t sub_1ACC0B874(uint64_t a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  int *v6;
  _QWORD *v7;
  int v8;
  _DWORD *v9;
  _QWORD *v10;
  int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = a2;
  while (1)
  {
    v6 = (int *)v4[3];
    if (v6)
    {
      if (*v6 >= 1)
        break;
    }
LABEL_10:
    v9 = (_DWORD *)v4[2];
    if (v9 && (int)*v9 >= 1)
    {
      v10 = v9 + 2;
      v11 = *v9 + 1;
      while (!*v10 || !sub_1ACC0B714(a1))
      {
        v10 += 3;
        if (--v11 <= 1)
          goto LABEL_17;
      }
      return 2;
    }
LABEL_17:
    if (v4[9] && sub_1ACC0B714(a1) || v4[5] && sub_1ACC0B714(a1))
      return 2;
    if (v4[6])
    {
      v12 = sub_1ACC0B714(a1);
      if (v12 | a3)
        return 2 * (v12 != 0);
    }
    else if (a3)
    {
      return 0;
    }
    v4 = (_QWORD *)v4[8];
    if (!v4)
      return 0;
  }
  v7 = v6 + 2;
  v8 = *v6 + 1;
  while (!*v7 || !sub_1ACC0B714(a1))
  {
    v7 += 3;
    if (--v8 <= 1)
      goto LABEL_10;
  }
  return 2;
}

uint64_t sub_1ACC0B9B4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(*(_QWORD *)result + 400) && !*(_QWORD *)(a2 + 80))
  {
    do
    {
      v2 = a2;
      a2 = *(_QWORD *)(a2 + 88);
    }
    while (a2);
    v3 = *(_QWORD *)(v2 + 104);
    if (v3)
      *(_QWORD *)(*(_QWORD *)result + 400) = *(_QWORD *)(v3 + 8);
  }
  return result;
}

BOOL sub_1ACC0B9EC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4)
{
  int v8;

  if (!sub_1ACC0ABAC(a1, a2, a3, a4))
    return 1;
  v8 = *a3;
  if (v8 == 43)
  {
    if (sub_1ACC0B9EC(a1, a2, *((_QWORD *)a3 + 2), a4)
      || sub_1ACC0B9EC(a1, a2, *((_QWORD *)a3 + 3), a4))
    {
      return 1;
    }
    v8 = *a3;
  }
  return v8 == 51 && sub_1ACC0BB9C(a1, a2, *((unsigned __int8 **)a3 + 2), a4, 0);
}

uint64_t sub_1ACC0BA94(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  int v6;
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  if (!result)
    return result;
  v5 = (unsigned __int8 *)result;
  v9 = 0u;
  v10 = 0u;
  v8 = 0u;
  while (1)
  {
    v6 = *((_DWORD *)v5 + 1);
    if ((v6 & 0x82000) == 0)
      break;
    if ((v6 & 0x80000) != 0)
    {
      v5 = *(unsigned __int8 **)(*((_QWORD *)v5 + 4) + 8);
      if (!v5)
        return 0;
    }
    else
    {
      v5 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
      if (!v5)
        return 0;
    }
  }
  v7 = *v5;
  if (v7 == 51)
  {
    v5 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
LABEL_14:
    WORD2(v10) = 0;
    v9 = 0uLL;
    *((_QWORD *)&v8 + 1) = sub_1ACC0BCE8;
    WORD3(v10) = (_DWORD)a3 != 0;
    DWORD2(v10) = a2;
    if (v5)
    {
      sub_1ACC0B714((uint64_t)&v8, (uint64_t)v5);
      return WORD2(v10);
    }
    return 0;
  }
  if (v7 != 44)
    goto LABEL_14;
  while (!sub_1ACC0BA94(*((_QWORD *)v5 + 2), a2, a3))
  {
    v5 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
    if (*v5 != 44)
      goto LABEL_14;
  }
  return 1;
}

uint64_t sub_1ACC0BB9C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  unsigned __int8 *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = a2;
  if (!sub_1ACC0ABAC(a1, a2, a3, a4))
    return *a3 != 121;
  while (2)
  {
    v10 = 0;
    switch(*v8)
    {
      case 0x13u:
      case 0x72u:
        goto LABEL_3;
      case 0x30u:
        if ((_DWORD)a5)
          return 0;
        v11 = *((_QWORD *)v8 + 4);
        v10 = 1;
        if (sub_1ACC0BB9C(a1, *(_QWORD *)(v11 + 8), a3, a4, 1))
          return v10;
        v12 = *(_QWORD *)(v11 + 32);
        a5 = 1;
        if (sub_1ACC0BB9C(a1, v12, a3, a4, 1))
          return v10;
        goto LABEL_4;
      case 0x31u:
        if ((_DWORD)a5 && (v8[5] & 0x10) != 0)
          return 0;
        goto LABEL_3;
      case 0x34u:
      case 0x35u:
      case 0x36u:
      case 0x37u:
      case 0x38u:
      case 0x39u:
      case 0x67u:
      case 0x68u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Fu:
        a5 = 1;
        goto LABEL_7;
      case 0x66u:
      case 0x6Cu:
      case 0x6Du:
      case 0x6Eu:
LABEL_7:
        if (!sub_1ACC0BB9C(a1, *((_QWORD *)v8 + 3), a3, a4, a5))
          goto LABEL_4;
        return 1;
      case 0x71u:
      case 0xADu:
      case 0xAEu:
      case 0xB5u:
        goto LABEL_4;
      case 0xAFu:
        if (!(_DWORD)a5 && v8[2] == 45)
        {
LABEL_3:
          a5 = 1;
LABEL_4:
          v8 = (unsigned __int8 *)*((_QWORD *)v8 + 2);
          if (!sub_1ACC0ABAC(a1, v8, a3, a4))
            return *a3 != 121;
          continue;
        }
        return 0;
      default:
        return v10;
    }
  }
}

uint64_t sub_1ACC0BCE8(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t result;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(_DWORD *)(a2 + 4);
  if ((v2 & 1) != 0 || (v2 & 2) != 0 && *(_WORD *)(a1 + 38))
    return 1;
  result = 1;
  switch(*(_BYTE *)a2)
  {
    case 0x2B:
    case 0x2C:
      v10 = *(_QWORD *)(a2 + 16);
      if (v10 && !*(_WORD *)(a1 + 36))
      {
        v11 = *(_QWORD *)(a2 + 24);
        sub_1ACC0B714(a1, v10);
        if (*(_WORD *)(a1 + 36))
        {
          *(_WORD *)(a1 + 36) = 0;
          if (v11)
          {
            v12 = a1;
            v13 = v11;
            goto LABEL_26;
          }
        }
        return 1;
      }
      break;
    case 0x2D:
    case 0x32:
    case 0x33:
    case 0x9D:
    case 0xAB:
    case 0xAC:
    case 0xAF:
    case 0xB1:
      return result;
    case 0x30:
      v14 = *(_QWORD *)(a2 + 16);
      if (v14)
        sub_1ACC0B714(a1, v14);
      sub_1ACC0BE44(a1, *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8), *(_QWORD *)(*(_QWORD *)(a2 + 32) + 32));
      result = 1;
      break;
    case 0x31:
      if ((v2 & 0x1000) == 0 && **(int **)(a2 + 32) >= 1)
      {
        v13 = *(_QWORD *)(a2 + 16);
        if (v13)
        {
          v12 = a1;
LABEL_26:
          sub_1ACC0B714(v12, v13);
          result = 1;
        }
      }
      break;
    case 0x34:
    case 0x35:
    case 0x36:
    case 0x37:
    case 0x38:
    case 0x39:
      v7 = *(unsigned __int8 **)(a2 + 16);
      v6 = *(unsigned __int8 **)(a2 + 24);
      if (*v7 != 167 || (v8 = *((_QWORD *)v7 + 9)) == 0 || *(_BYTE *)(v8 + 63) != 1)
      {
        if (*v6 != 167)
          goto LABEL_13;
        v9 = *((_QWORD *)v6 + 9);
        if (!v9 || *(_BYTE *)(v9 + 63) != 1)
          goto LABEL_13;
      }
      break;
    case 0xA7:
      if (*(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 44))
      {
        *(_WORD *)(a1 + 36) = 1;
        result = 2;
      }
      break;
    default:
LABEL_13:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1ACC0BE44(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (a2)
  {
    v3 = result;
    if (!*(_WORD *)(result + 36))
    {
      result = sub_1ACC0B714(result, a2);
      if (*(_WORD *)(v3 + 36))
      {
        *(_WORD *)(v3 + 36) = 0;
        if (a3)
          return sub_1ACC0B714(v3, a3);
      }
    }
  }
  return result;
}

uint64_t sub_1ACC0BE9C(uint64_t *a1, int a2, const char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v11;
  void *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;

  if (*((_BYTE *)a1 + 301) != 2 && (*(_BYTE *)(*a1 + 49) & 4) == 0)
    return 0;
  v12 = sub_1ACBE9258(*a1, a3, &a9);
  v13 = a1[2];
  v14 = *(_DWORD *)(v13 + 144);
  v11 = sub_1ACBA86CC((uint64_t *)v13, 185, v14, *((unsigned int *)a1 + 78), 0, (uint64_t)v12, 4294967290, v15);
  if (a2)
    *((_DWORD *)a1 + 78) = v14;
  sub_1ACC0C07C(v13, v14, -1, -1, 0, 0);
  return v11;
}

_QWORD *sub_1ACC0BF64(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  v4 = *a1;
  if (v4)
  {
    result = (_QWORD *)sub_1ACBE1124(v4, 0x18uLL);
    if (result)
    {
LABEL_3:
      v6 = a1[24];
      a1[24] = (uint64_t)result;
      *result = v6;
      result[1] = a2;
      result[2] = sub_1ACB782D4;
      return result;
    }
  }
  else
  {
    result = (_QWORD *)sub_1ACB5D828(24);
    if (result)
      goto LABEL_3;
  }
  if (a2)
    return sub_1ACBF8348((_QWORD *)*a1, a2);
  return result;
}

uint64_t sub_1ACC0BFD4(uint64_t result, int a2, int a3, int a4)
{
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;

  if ((*(_BYTE *)(*(_QWORD *)result + 49) & 4) != 0)
  {
    v4 = *(_DWORD *)(result + 392);
    v5 = v4 + 1;
    v6 = 56 * v4 + 20;
    while ((int)--v5 >= 1)
    {
      v7 = v6 - 56;
      v8 = *(_QWORD *)(result + 400);
      v9 = *(_DWORD *)(v8 + v6 - 76);
      v6 -= 56;
      if (v9 == a2)
      {
        if (a4 < 0)
          a4 = *(_DWORD *)(result + 144) - 1;
        v10 = v8 + v7;
        v11 = (_DWORD *)(v8 + v7 - 16);
        if (*v11)
        {
          v13 = *(_DWORD *)(v10 - 8);
          v12 = (_DWORD *)(v10 - 8);
          if (v13)
          {
            v11 = (_DWORD *)(v8 + v7);
            if (*(_DWORD *)(v8 + v7))
              return result;
            v14 = 5;
          }
          else
          {
            v14 = 3;
            v11 = v12;
          }
        }
        else
        {
          v14 = 1;
        }
        *v11 = a3;
        *(_DWORD *)(v8 + 4 * v14 + v7 - 16) = a4;
        return result;
      }
    }
  }
  return result;
}

uint64_t sub_1ACC0C07C(uint64_t a1, int a2, int a3, int a4, __int16 a5, char *__s)
{
  uint64_t result;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  size_t v19;
  unint64_t v20;
  void *v21;

  result = *(_QWORD *)a1;
  if ((*(_BYTE *)(result + 49) & 4) != 0)
  {
    v13 = *(int *)(a1 + 392);
    v14 = v13 + 1;
    v15 = 56 * (v13 + 1);
    v16 = *(_QWORD *)(a1 + 400);
    if (v16)
    {
      if (*(_QWORD *)(result + 512) > v16)
      {
        if (*(_QWORD *)(result + 496) <= v16)
        {
          if (v15 < 0x81)
            goto LABEL_13;
        }
        else if (*(_QWORD *)(result + 504) <= v16 && v15 <= *(unsigned __int16 *)(result + 438))
        {
LABEL_13:
          *(_DWORD *)(a1 + 392) = v14;
          v17 = v13;
          v18 = v16 + 56 * (int)v13;
          *(_OWORD *)v18 = 0u;
          *(_OWORD *)(v18 + 16) = 0u;
          *(_OWORD *)(v18 + 32) = 0u;
          *(_QWORD *)(v18 + 48) = 0;
          *(_DWORD *)v18 = a2;
          *(_DWORD *)(v18 + 28) = a3;
          *(_DWORD *)(v18 + 32) = a4;
          *(_WORD *)(v18 + 40) = a5;
          if (__s)
          {
            v19 = strlen(__s);
            v20 = v19 + 1;
            if (*(_QWORD *)a1)
            {
              result = sub_1ACBE1124(*(_QWORD *)a1, v20);
              v21 = (void *)result;
              if (!result)
                goto LABEL_20;
              goto LABEL_19;
            }
            result = sub_1ACB5D828(v19 + 1);
            v21 = (void *)result;
            if (result)
LABEL_19:
              result = (uint64_t)memcpy(v21, __s, v20);
          }
          else
          {
            v21 = 0;
          }
LABEL_20:
          *(_QWORD *)(v16 + 56 * v17 + 48) = v21;
          *(_QWORD *)(a1 + 400) = v16;
          return result;
        }
      }
      result = sub_1ACBE11D0(result, *(_QWORD **)(a1 + 400), v15);
      v16 = result;
      if (!result)
        return result;
LABEL_12:
      LODWORD(v13) = *(_DWORD *)(a1 + 392);
      v14 = v13 + 1;
      goto LABEL_13;
    }
    result = sub_1ACBE1124(result, 56 * (v13 + 1));
    v16 = result;
    if (result)
      goto LABEL_12;
  }
  return result;
}

uint64_t sub_1ACC0C1E8(uint64_t *a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;

  v6 = *a1;
  if (!v6)
  {
    v7 = (_QWORD *)sub_1ACB5D828(24);
    if (v7)
      goto LABEL_3;
LABEL_5:
    a2(*a1, a3);
    return 0;
  }
  v7 = (_QWORD *)sub_1ACBE1124(v6, 0x18uLL);
  if (!v7)
    goto LABEL_5;
LABEL_3:
  v8 = a1[24];
  a1[24] = (uint64_t)v7;
  *v7 = v8;
  v7[1] = a3;
  v7[2] = a2;
  return a3;
}

uint64_t sub_1ACC0C25C(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int v9;
  int **v10;
  int v11;
  uint64_t v12;
  char v14;

  v8 = *(unsigned __int8 **)(a2 + 16);
  v9 = *v8;
  if (v9 == 176)
    v9 = v8[2];
  if (v9 == 138)
  {
    v10 = (int **)(*((_QWORD *)v8 + 4) + 32);
LABEL_7:
    v11 = **v10;
    if ((*(_BYTE *)(a2 + 5) & 0x10) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (v9 == 177)
  {
    v10 = (int **)(v8 + 32);
    goto LABEL_7;
  }
  v11 = 1;
  if ((*(_BYTE *)(a2 + 5) & 0x10) == 0)
    goto LABEL_11;
LABEL_10:
  if (!*(_BYTE *)(*(_QWORD *)a1 + 103))
  {
    if (v11 == **(_DWORD **)(*(_QWORD *)(a2 + 32) + 32))
      return 0;
    if (!a1[12])
      sub_1ACBCB308((uint64_t)a1, "sub-select returns %d columns - expected %d", a3, a4, a5, a6, a7, a8, **(_DWORD **)(*(_QWORD *)(a2 + 32) + 32));
    return 1;
  }
LABEL_11:
  if (v11 != 1)
  {
    if ((v8[5] & 0x10) != 0)
    {
      if (!a1[12])
      {
        v12 = 1;
        sub_1ACBCB308((uint64_t)a1, "sub-select returns %d columns - expected %d", a3, a4, a5, a6, a7, a8, **(_DWORD **)(*((_QWORD *)v8 + 4) + 32));
        return v12;
      }
    }
    else
    {
      sub_1ACBCB308((uint64_t)a1, "row value misused", a3, a4, a5, a6, a7, a8, v14);
    }
    return 1;
  }
  return 0;
}

uint64_t sub_1ACC0C364(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  int **v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _BYTE *v11;
  char v12;
  int v13;
  int v14;
  int v15;
  int **v16;
  unsigned __int8 *v17;
  _QWORD *v18;
  int v19;

  v2 = *(unsigned __int8 **)(a2 + 16);
  v3 = *v2;
  if (v3 == 176)
    v3 = v2[2];
  if (v3 == 138)
  {
    v4 = (int **)(*((_QWORD *)v2 + 4) + 32);
  }
  else
  {
    if (v3 != 177)
    {
      v5 = 1;
      if ((*(_BYTE *)(a2 + 5) & 0x10) == 0)
        goto LABEL_8;
      goto LABEL_10;
    }
    v4 = (int **)(v2 + 32);
  }
  v5 = **v4;
  if ((*(_BYTE *)(a2 + 5) & 0x10) == 0)
  {
LABEL_8:
    v6 = 0;
    goto LABEL_11;
  }
LABEL_10:
  v6 = *(_QWORD *)(a2 + 32);
LABEL_11:
  v7 = *a1;
  if (v7)
  {
    v8 = sub_1ACBE1124(v7, v5 + 1);
    if (!v8)
      return v8;
  }
  else
  {
    v8 = sub_1ACB5D828(v5 + 1);
    if (!v8)
      return v8;
  }
  if (v5 >= 1)
  {
    v9 = 0;
    v10 = v2 + 32;
    v11 = (_BYTE *)v8;
    while (1)
    {
      v14 = *v2;
      v15 = v14;
      if (v14 == 176)
        v15 = v2[2];
      v16 = (int **)(v2 + 32);
      if (v15 == 177)
        goto LABEL_27;
      v17 = v2;
      if (v15 == 138)
        break;
LABEL_32:
      v13 = sub_1ACB92644(v17);
      if (v6)
      {
        v19 = sub_1ACB92644(*(unsigned __int8 **)(*(_QWORD *)(v6 + 32) + v9 + 8));
        if (v13 < 65 || v19 < 65)
        {
          if (v19 >= 65)
            v12 = v19;
          else
            v12 = v13;
          LOBYTE(v13) = v12 | 0x40;
        }
        else if (v19 > 0x42 || v13 > 0x42)
        {
          LOBYTE(v13) = 67;
        }
        else
        {
          LOBYTE(v13) = 65;
        }
      }
      *v11++ = v13;
      v9 += 24;
      if (24 * v5 == v9)
        goto LABEL_41;
    }
    v16 = (int **)(*v10 + 32);
LABEL_27:
    v17 = v2;
    if (**v16 >= 2)
    {
      if (v14 == 138 || (v18 = v2 + 32, v2[2] == 138))
        v18 = (_QWORD *)(*v10 + 32);
      v17 = *(unsigned __int8 **)(*v18 + v9 + 8);
    }
    goto LABEL_32;
  }
LABEL_41:
  *(_BYTE *)(v8 + v5) = 0;
  return v8;
}

BOOL sub_1ACC0C528(unsigned __int8 *a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  while (1)
  {
    v1 = *a1;
    if ((v1 - 173) >= 2)
      break;
    a1 = (unsigned __int8 *)*((_QWORD *)a1 + 2);
  }
  if (v1 == 176)
    v1 = a1[2];
  v2 = 0;
  if ((v1 - 153) < 3 || v1 == 117)
    return v2;
  if (v1 != 167)
    return 1;
  if ((a1[6] & 0x20) != 0)
    return 1;
  v3 = *((_QWORD *)a1 + 9);
  if (!v3)
    return 1;
  v4 = *((unsigned int *)a1 + 12);
  if ((v4 & 0x80000000) != 0)
    return 0;
  v5 = *(_QWORD *)(v3 + 8);
  return v5 && (*(_BYTE *)(v5 + 16 * v4 + 8) & 0xF) == 0;
}

uint64_t sub_1ACC0C5B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v18;

  v10 = result;
  v11 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v11)
  {
    result = sub_1ACBFF5AC(result, 71, 0, a3, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(result + 144) = v11 + 1;
    v12 = *(_QWORD *)(result + 136) + 40 * v11;
    *(_QWORD *)v12 = 71;
    *(_DWORD *)(v12 + 8) = a3;
    *(_QWORD *)(v12 + 12) = 0;
    *(_QWORD *)(v12 + 28) = 0;
    *(_QWORD *)(v12 + 20) = 0;
    *(_DWORD *)(v12 + 36) = 0;
  }
  v13 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v13)
  {
    result = sub_1ACBFF5AC(v10, 36, a2, 0, 0, a6, a7, a8);
    v13 = result;
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v13 + 1;
    v14 = *(_QWORD *)(v10 + 136) + 40 * v13;
    *(_DWORD *)v14 = 36;
    *(_DWORD *)(v14 + 4) = a2;
    *(_OWORD *)(v14 + 8) = 0u;
    *(_OWORD *)(v14 + 24) = 0u;
  }
  v15 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v15)
  {
    result = sub_1ACBFF5AC(v10, 94, a2, 0, a3, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v15 + 1;
    v16 = *(_QWORD *)(v10 + 136) + 40 * v15;
    *(_DWORD *)v16 = 94;
    *(_DWORD *)(v16 + 4) = a2;
    *(_DWORD *)(v16 + 8) = 0;
    *(_DWORD *)(v16 + 12) = a3;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 16) = 0;
  }
  v17 = *(_DWORD *)(v10 + 144);
  if (v17 >= 1)
    *(_WORD *)(*(_QWORD *)(v10 + 136) + 40 * (v17 - 1) + 2) = 128;
  if (*(_BYTE *)(*(_QWORD *)v10 + 103))
    v18 = &byte_1EECAD280;
  else
    v18 = (char *)(*(_QWORD *)(v10 + 136) + 40 * v13);
  *((_DWORD *)v18 + 2) = v17;
  return result;
}

uint64_t *sub_1ACC0C730(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t *v10;
  _QWORD **v11;
  int v12;
  unsigned __int8 *v13;
  int v14;
  unsigned int **v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  _DWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  unint64_t v38;
  _QWORD *v39;
  _DWORD *v40;
  uint64_t **v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  int **v46;
  unsigned __int8 *v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  int v51;
  int v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  BOOL v58;
  unsigned __int8 **v59;
  int v60;
  uint64_t v61;
  unsigned __int8 *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  _BYTE *v71;
  int v72;
  int v73;
  uint64_t v74;
  int v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  char v97;
  __int128 v98;
  uint64_t (*v99)(uint64_t);
  _QWORD *v100;
  __int128 v101;

  v9 = a2;
  v10 = result;
  v11 = (_QWORD **)result[2];
  v12 = *(_DWORD *)(a2 + 4);
  if ((v12 & 0x40) != 0 || *((_DWORD *)result + 16))
  {
    v96 = 0;
    goto LABEL_4;
  }
  if ((v12 & 0x2000000) != 0)
  {
    v80 = *((_DWORD *)v11 + 36);
    if (*((_DWORD *)v11 + 37) <= v80)
    {
      result = (uint64_t *)sub_1ACBFF5AC(result[2], 15, 0, 0, 0, a6, a7, a8);
      v80 = (int)result;
      if ((*(_BYTE *)(v9 + 5) & 0x10) == 0)
      {
LABEL_120:
        v85 = *(unsigned int *)(v9 + 72);
        v84 = *(unsigned int *)(v9 + 76);
        v86 = *((_DWORD *)v11 + 36);
        if (*((_DWORD *)v11 + 37) <= v86)
        {
          result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v11, 10, v84, v85, 0, a6, a7, a8);
        }
        else
        {
          *((_DWORD *)v11 + 36) = v86 + 1;
          v87 = (uint64_t)&v11[17][5 * v86];
          *(_DWORD *)v87 = 10;
          *(_DWORD *)(v87 + 4) = v84;
          *(_DWORD *)(v87 + 8) = v85;
          *(_QWORD *)(v87 + 12) = 0;
          *(_QWORD *)(v87 + 28) = 0;
          *(_QWORD *)(v87 + 20) = 0;
          *(_DWORD *)(v87 + 36) = 0;
        }
        v88 = *(unsigned int *)(v9 + 44);
        v89 = *((_DWORD *)v11 + 36);
        if (*((_DWORD *)v11 + 37) <= v89)
        {
          result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v11, 115, a3, v88, 0, a6, a7, a8);
        }
        else
        {
          *((_DWORD *)v11 + 36) = v89 + 1;
          v90 = (uint64_t)&v11[17][5 * v89];
          *(_DWORD *)v90 = 115;
          *(_DWORD *)(v90 + 4) = a3;
          *(_DWORD *)(v90 + 8) = v88;
          *(_QWORD *)(v90 + 12) = 0;
          *(_QWORD *)(v90 + 28) = 0;
          *(_QWORD *)(v90 + 20) = 0;
          *(_DWORD *)(v90 + 36) = 0;
        }
        if (*((_BYTE *)*v11 + 103))
          dword_1EECAD288 = *((_DWORD *)v11 + 36);
        else
          LODWORD(v11[17][5 * v80 + 1]) = *((_DWORD *)v11 + 36);
        return result;
      }
    }
    else
    {
      *((_DWORD *)v11 + 36) = v80 + 1;
      v81 = (uint64_t)&v11[17][5 * v80];
      *(_BYTE *)v81 = 15;
      *(_OWORD *)(v81 + 1) = 0u;
      *(_OWORD *)(v81 + 17) = 0u;
      *(_QWORD *)(v81 + 32) = 0;
      if ((*(_BYTE *)(a2 + 5) & 0x10) == 0)
        goto LABEL_120;
    }
    result = (uint64_t *)sub_1ACC0BE9C(v10, 0, "REUSE LIST SUBQUERY %d", a4, a5, a6, a7, a8, *(_DWORD *)(*(_QWORD *)(v9 + 32) + 16));
    goto LABEL_120;
  }
  *(_DWORD *)(a2 + 4) = v12 | 0x2000000;
  v50 = (*((_DWORD *)result + 14) + 1);
  *((_DWORD *)result + 14) = v50;
  *(_DWORD *)(a2 + 76) = v50;
  v51 = *((_DWORD *)v11 + 36);
  if (*((_DWORD *)v11 + 37) <= v51)
  {
    v52 = sub_1ACBFF5AC((uint64_t)v11, 74, 0, v50, 0, a6, a7, a8) + 1;
  }
  else
  {
    v52 = v51 + 1;
    *((_DWORD *)v11 + 36) = v51 + 1;
    v53 = (uint64_t)&v11[17][5 * v51];
    *(_QWORD *)v53 = 74;
    *(_DWORD *)(v53 + 8) = v50;
    *(_QWORD *)(v53 + 12) = 0;
    *(_QWORD *)(v53 + 28) = 0;
    *(_QWORD *)(v53 + 20) = 0;
    *(_DWORD *)(v53 + 36) = 0;
  }
  *(_DWORD *)(v9 + 72) = v52;
  v82 = *((_DWORD *)v11 + 36);
  if (*((_DWORD *)v11 + 37) <= v82)
  {
    v96 = sub_1ACBFF5AC((uint64_t)v11, 15, 0, 0, 0, a6, a7, a8);
  }
  else
  {
    *((_DWORD *)v11 + 36) = v82 + 1;
    v83 = (uint64_t)&v11[17][5 * v82];
    *(_BYTE *)v83 = 15;
    *(_OWORD *)(v83 + 1) = 0u;
    *(_OWORD *)(v83 + 17) = 0u;
    *(_QWORD *)(v83 + 32) = 0;
    v96 = v82;
  }
LABEL_4:
  v13 = *(unsigned __int8 **)(v9 + 16);
  v14 = *v13;
  if (v14 == 176)
    v14 = v13[2];
  if (v14 == 138)
  {
    v15 = (unsigned int **)(*((_QWORD *)v13 + 4) + 32);
  }
  else
  {
    if (v14 != 177)
    {
      v16 = 1;
      goto LABEL_12;
    }
    v15 = (unsigned int **)(v13 + 32);
  }
  v16 = **v15;
LABEL_12:
  *(_DWORD *)(v9 + 44) = a3;
  v17 = *((_DWORD *)v11 + 36);
  if (*((_DWORD *)v11 + 37) <= v17)
  {
    v19 = sub_1ACBFF5AC((uint64_t)v11, 118, a3, v16, 0, a6, a7, a8);
  }
  else
  {
    *((_DWORD *)v11 + 36) = v17 + 1;
    v18 = (uint64_t)&v11[17][5 * v17];
    *(_DWORD *)v18 = 118;
    *(_DWORD *)(v18 + 4) = a3;
    *(_DWORD *)(v18 + 8) = v16;
    *(_QWORD *)(v18 + 12) = 0;
    *(_QWORD *)(v18 + 28) = 0;
    *(_QWORD *)(v18 + 20) = 0;
    *(_DWORD *)(v18 + 36) = 0;
    v19 = v17;
  }
  result = (uint64_t *)sub_1ACC092C0(*v10, v16, 1);
  v25 = result;
  v26 = *(_QWORD *)(v9 + 32);
  if ((*(_BYTE *)(v9 + 5) & 0x10) == 0)
  {
    if (!v26)
      goto LABEL_87;
    result = (uint64_t *)sub_1ACB92644(v13);
    v97 = (char)result;
    if ((int)result > 64)
    {
      if ((_DWORD)result != 69)
        goto LABEL_55;
      v30 = 67;
    }
    else
    {
      v30 = 65;
    }
    v97 = v30;
LABEL_55:
    if (v25)
    {
      result = (uint64_t *)sub_1ACB78620((uint64_t)v10, *(unsigned __int8 **)(v9 + 16), v27, v28, v29, v22, v23, v24);
      v25[4] = (uint64_t)result;
    }
    v54 = *((_BYTE *)v10 + 31);
    if (v54)
    {
      *((_BYTE *)v10 + 31) = v54 - 1;
      v55 = *((unsigned int *)v10 + (v54 - 1) + 56);
      if (v54 != 1)
      {
        v56 = v54 - 2;
        *((_BYTE *)v10 + 31) = v56;
        v57 = *((unsigned int *)v10 + v56 + 56);
LABEL_67:
        v93 = v19;
        if (*(int *)v26 >= 1)
        {
          v59 = (unsigned __int8 **)(v26 + 8);
          v60 = *(_DWORD *)v26 + 1;
          v95 = v9;
          do
          {
            v62 = *v59;
            if (v96)
            {
              v100 = 0;
              v101 = 0u;
              *(_QWORD *)&v98 = 0;
              WORD2(v101) = 1;
              *((_QWORD *)&v98 + 1) = sub_1ACB8B0F4;
              v99 = sub_1ACC0B708;
              if (v62)
              {
                sub_1ACC0B714((uint64_t)&v98, (uint64_t)v62);
                if (!WORD2(v101))
                {
                  if (!*((_BYTE *)*v11 + 103))
                  {
                    v63 = (uint64_t)&v11[17][5 * v96];
                    sub_1ACB693B4(*v11, *(char *)(v63 - 39), *(_QWORD *)(v63 - 24));
                    *(_QWORD *)(v63 - 24) = 0;
                    *(_WORD *)(v63 - 40) = 184;
                    v9 = v95;
                    if (!*((_BYTE *)*v11 + 103))
                    {
                      v64 = (uint64_t)&v11[17][5 * v96];
                      sub_1ACB693B4(*v11, *(char *)(v64 + 1), *(_QWORD *)(v64 + 16));
                      *(_QWORD *)(v64 + 16) = 0;
                      *(_WORD *)v64 = 184;
                      v9 = v95;
                    }
                  }
                  v96 = 0;
                  *(_DWORD *)(v9 + 4) &= ~0x2000000u;
                }
              }
            }
            else
            {
              v96 = 0;
            }
            sub_1ACC08D80((uint64_t)v10, v62, v55);
            result = (uint64_t *)sub_1ACBA86CC((uint64_t *)v11, 97, v55, 1, v57, (uint64_t)&v97, 1, v65);
            v66 = *((_DWORD *)v11 + 36);
            if (*((_DWORD *)v11 + 37) > v66)
            {
              *((_DWORD *)v11 + 36) = v66 + 1;
              v61 = (uint64_t)&v11[17][5 * v66];
              *(_DWORD *)v61 = 64906;
              *(_DWORD *)(v61 + 4) = a3;
              *(_DWORD *)(v61 + 8) = v57;
              *(_DWORD *)(v61 + 12) = v55;
              *(_DWORD *)(v61 + 16) = 1;
              *(_QWORD *)(v61 + 24) = 0;
              *(_QWORD *)(v61 + 32) = 0;
            }
            else
            {
              result = (uint64_t *)sub_1ACBFF7F0((uint64_t)v11, 138, a3, v57, v55, 1, v23, v24);
            }
            v59 += 3;
            --v60;
          }
          while (v60 > 1);
        }
        if ((_DWORD)v55)
        {
          v67 = *((unsigned __int8 *)v10 + 31);
          if (v67 <= 7)
          {
            *((_BYTE *)v10 + 31) = v67 + 1;
            *((_DWORD *)v10 + v67 + 56) = v55;
          }
        }
        v19 = v93;
        if ((_DWORD)v57)
        {
          v68 = *((unsigned __int8 *)v10 + 31);
          if (v68 <= 7)
          {
            *((_BYTE *)v10 + 31) = v68 + 1;
            *((_DWORD *)v10 + v68 + 56) = v57;
          }
        }
        goto LABEL_87;
      }
    }
    else
    {
      v55 = (*((_DWORD *)v10 + 14) + 1);
      *((_DWORD *)v10 + 14) = v55;
    }
    v57 = (*((_DWORD *)v10 + 14) + 1);
    *((_DWORD *)v10 + 14) = v57;
    goto LABEL_67;
  }
  v31 = &byte_1ACCBEAEE;
  v32 = *(_DWORD **)(v26 + 32);
  if (!v96)
    v31 = "CORRELATED ";
  result = (uint64_t *)sub_1ACC0BE9C(v10, 1, "%sLIST SUBQUERY %d", v20, v21, v22, v23, v24, (char)v31);
  if (*v32 != (_DWORD)v16)
  {
LABEL_87:
    if (v25)
    {
      if (*((_BYTE *)*v11 + 103))
      {
        if (!(*v11)[102])
        {
          v58 = (*(_DWORD *)v25)-- == 1;
          if (v58)
          {
            result = sub_1ACBF0674((_QWORD *)v25[2], v25);
            if (!v96)
              return result;
LABEL_99:
            v73 = *((_DWORD *)v11 + 36);
            if (*((_DWORD *)v11 + 37) <= v73)
            {
              result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v11, 136, a3, 0, 0, v22, v23, v24);
            }
            else
            {
              *((_DWORD *)v11 + 36) = v73 + 1;
              v74 = (uint64_t)&v11[17][5 * v73];
              *(_DWORD *)v74 = 136;
              *(_DWORD *)(v74 + 4) = a3;
              *(_OWORD *)(v74 + 8) = 0u;
              *(_OWORD *)(v74 + 24) = 0u;
            }
            v75 = *((_DWORD *)v11 + 36);
            if (*((_BYTE *)*v11 + 103))
              v76 = &byte_1EECAD280;
            else
              v76 = (char *)&v11[17][5 * v96];
            *((_DWORD *)v76 + 2) = v75;
            v78 = *(unsigned int *)(v9 + 72);
            v77 = *(unsigned int *)(v9 + 76);
            if (*((_DWORD *)v11 + 37) <= v75)
            {
              result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v11, 67, v77, v78, 1, v22, v23, v24);
            }
            else
            {
              *((_DWORD *)v11 + 36) = v75 + 1;
              v79 = (uint64_t)&v11[17][5 * v75];
              *(_DWORD *)v79 = 67;
              *(_DWORD *)(v79 + 4) = v77;
              *(_DWORD *)(v79 + 8) = v78;
              *(_DWORD *)(v79 + 12) = 1;
              *(_QWORD *)(v79 + 24) = 0;
              *(_QWORD *)(v79 + 32) = 0;
              *(_QWORD *)(v79 + 16) = 0;
            }
            *((_BYTE *)v10 + 31) = 0;
            *((_DWORD *)v10 + 10) = 0;
            return result;
          }
        }
      }
      else
      {
        if (v19 < 0)
          v19 = *((_DWORD *)v11 + 36) - 1;
        v69 = v11[17];
        v70 = &v69[5 * v19];
        v72 = *((unsigned __int8 *)v70 + 1);
        v71 = (char *)v70 + 1;
        if (!v72)
        {
          v69[5 * v19 + 2] = v25;
          *v71 = -8;
          if (!v96)
            return result;
          goto LABEL_99;
        }
        result = sub_1ACBFF884((uint64_t *)v11, (uint64_t)&v69[5 * v19], (char *)v25, 0xFFFFFFF8);
      }
    }
    if (!v96)
      return result;
    goto LABEL_99;
  }
  *(_QWORD *)&v101 = 0;
  v98 = 0u;
  v99 = 0;
  LOBYTE(v98) = 11;
  DWORD1(v98) = a3;
  HIDWORD(v98) = 0;
  v94 = v9;
  v100 = (_QWORD *)sub_1ACC0C364(v10, v9);
  *(_DWORD *)(v26 + 8) = 0;
  result = (uint64_t *)sub_1ACB8DFB8(*v10, v26, 0);
  v36 = (uint64_t)result;
  v37 = 0;
  if (!*(_BYTE *)(*v10 + 103))
  {
    result = (uint64_t *)sub_1ACB6EA04((_QWORD **)v10, (uint64_t)result, (uint64_t)&v98, v34, v35, v22, v23, v24);
    v37 = (_DWORD)result == 0;
  }
  if (v36)
    result = sub_1ACB7E704((_QWORD *)*v10, v36, 1);
  if (v100)
    result = sub_1ACBE0F9C((_QWORD *)*v10, v100);
  if (v37)
  {
    v92 = v19;
    v91 = a3;
    if ((int)v16 < 1)
    {
LABEL_64:
      v19 = v92;
      v9 = v94;
      a3 = v91;
      goto LABEL_87;
    }
    v38 = 0;
    v39 = v13 + 32;
    v40 = v32 + 2;
    v41 = (uint64_t **)(v25 + 4);
    v42 = 24 * v16;
    while (1)
    {
      v44 = *v13;
      v45 = v44;
      if (v44 == 176)
        v45 = v13[2];
      v46 = (int **)(v13 + 32);
      if (v45 != 177)
      {
        v47 = v13;
        if (v45 != 138)
          goto LABEL_44;
        v46 = (int **)(*v39 + 32);
      }
      v47 = v13;
      if (**v46 >= 2)
      {
        if (v44 == 138 || (v48 = v13 + 32, v13[2] == 138))
          v48 = (_QWORD *)(*v39 + 32);
        v47 = *(unsigned __int8 **)(*v48 + v38 + 8);
      }
LABEL_44:
      if ((v47[5] & 2) != 0)
      {
        v43 = (uint64_t)v10;
      }
      else
      {
        v49 = *(unsigned __int8 **)&v40[v38 / 4];
        if (!v49 || (v49[5] & 2) == 0)
        {
          result = (uint64_t *)sub_1ACB78620((uint64_t)v10, v47, v33, v34, v35, v22, v23, v24);
          if (result)
            goto LABEL_33;
        }
        v43 = (uint64_t)v10;
        v47 = v49;
      }
      result = (uint64_t *)sub_1ACB78620(v43, v47, v33, v34, v35, v22, v23, v24);
LABEL_33:
      *v41++ = result;
      v38 += 24;
      if (v42 == v38)
        goto LABEL_64;
    }
  }
  if (v25)
  {
    v58 = (*(_DWORD *)v25)-- == 1;
    if (v58)
      return sub_1ACBF0674((_QWORD *)v25[2], v25);
  }
  return result;
}

_DWORD *sub_1ACC0D094(uint64_t a1, int *a2)
{
  uint64_t v4;
  size_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t i;
  void *v9;
  int *v10;
  _DWORD *v11;
  const void *v12;
  size_t v13;
  unint64_t v14;

  if (!a2)
    return 0;
  v4 = 48 * *a2;
  v5 = v4 + 16;
  if (a1)
  {
    v6 = (_DWORD *)sub_1ACBE1124(a1, v4 + 16);
    if (!v6)
      return v6;
  }
  else
  {
    v6 = (_DWORD *)sub_1ACB5D828(v4 + 16);
    if (!v6)
      return v6;
  }
  bzero(v6, v5);
  *v6 = *a2;
  if (*a2 >= 1)
  {
    v7 = 0;
    for (i = 0; i < *a2; ++i)
    {
      v10 = &a2[v7];
      v11 = &v6[v7];
      *(_QWORD *)&v6[v7 + 8] = sub_1ACB8DFB8(a1, *(_QWORD *)&a2[v7 + 8], 0);
      *(_QWORD *)&v6[v7 + 6] = sub_1ACB8B6B8(a1, *(_QWORD **)&a2[v7 + 6], 0);
      v12 = *(const void **)&a2[v7 + 4];
      if (v12)
      {
        v13 = strlen(*((const char **)v10 + 2));
        v14 = v13 + 1;
        if (a1)
        {
          v9 = (void *)sub_1ACBE1124(a1, v14);
          if (!v9)
            goto LABEL_10;
LABEL_16:
          memcpy(v9, v12, v14);
          goto LABEL_10;
        }
        v9 = (void *)sub_1ACB5D828(v13 + 1);
        if (v9)
          goto LABEL_16;
      }
      else
      {
        v9 = 0;
      }
LABEL_10:
      *((_QWORD *)v11 + 2) = v9;
      *((_BYTE *)v11 + 56) = *((_BYTE *)v10 + 56);
      v7 += 12;
    }
  }
  return v6;
}

uint64_t sub_1ACC0D1F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  const char *v8;
  size_t v9;
  unint64_t v10;
  void *v11;
  const void *v12;
  size_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!a3)
    return 0;
  if (!a1)
  {
    v6 = sub_1ACB5D828(144);
    if (!v6)
      return v6;
    goto LABEL_17;
  }
  if (*(unsigned __int16 *)(a1 + 436) <= 0x8Fu)
  {
    if (*(_DWORD *)(a1 + 432))
    {
      if (*(_BYTE *)(a1 + 103))
        return 0;
    }
    else
    {
      ++*(_DWORD *)(a1 + 452);
    }
    goto LABEL_16;
  }
  v6 = *(_QWORD *)(a1 + 472);
  if (v6)
  {
    v7 = (_QWORD *)(a1 + 472);
LABEL_14:
    *v7 = *(_QWORD *)v6;
    ++*(_DWORD *)(a1 + 448);
    goto LABEL_17;
  }
  v6 = *(_QWORD *)(a1 + 464);
  if (v6)
  {
    v7 = (_QWORD *)(a1 + 464);
    goto LABEL_14;
  }
  ++*(_DWORD *)(a1 + 456);
LABEL_16:
  v6 = sub_1ACBE1300(a1, 144);
  if (!v6)
    return v6;
LABEL_17:
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 128) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)v6 = 0u;
  v8 = *(const char **)a3;
  if (!*(_QWORD *)a3)
  {
    v11 = 0;
    goto LABEL_24;
  }
  v9 = strlen(*(const char **)a3);
  v10 = v9 + 1;
  if (!a1)
  {
    v11 = (void *)sub_1ACB5D828(v9 + 1);
    if (!v11)
      goto LABEL_24;
    goto LABEL_23;
  }
  v11 = (void *)sub_1ACBE1124(a1, v10);
  if (v11)
LABEL_23:
    memcpy(v11, v8, v10);
LABEL_24:
  *(_QWORD *)v6 = v11;
  v12 = *(const void **)(a3 + 8);
  if (v12)
  {
    v13 = strlen(*(const char **)(a3 + 8));
    v14 = v13 + 1;
    if (a1)
    {
      v15 = (void *)sub_1ACBE1124(a1, v14);
      if (!v15)
        goto LABEL_31;
      goto LABEL_30;
    }
    v15 = (void *)sub_1ACB5D828(v13 + 1);
    if (v15)
LABEL_30:
      memcpy(v15, v12, v14);
  }
  else
  {
    v15 = 0;
  }
LABEL_31:
  *(_QWORD *)(v6 + 8) = v15;
  v16 = *(_QWORD *)(a3 + 72);
  if (v16)
    v17 = sub_1ACB8B290(a1, v16, 0, 0);
  else
    v17 = 0;
  v18 = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(v6 + 72) = v17;
  *(_QWORD *)(v6 + 80) = v18;
  *(_QWORD *)(v6 + 16) = sub_1ACB8B6B8(a1, *(_QWORD **)(a3 + 16), 0);
  *(_QWORD *)(v6 + 24) = sub_1ACB8B6B8(a1, *(_QWORD **)(a3 + 24), 0);
  *(_BYTE *)(v6 + 32) = *(_BYTE *)(a3 + 32);
  *(_WORD *)(v6 + 33) = *(_WORD *)(a3 + 33);
  *(_BYTE *)(v6 + 36) = *(_BYTE *)(a3 + 36);
  *(_DWORD *)(v6 + 96) = *(_DWORD *)(a3 + 96);
  *(_DWORD *)(v6 + 124) = *(_DWORD *)(a3 + 124);
  *(_QWORD *)(v6 + 88) = *(_QWORD *)(a3 + 88);
  *(_BYTE *)(v6 + 140) = *(_BYTE *)(a3 + 140);
  v19 = *(_QWORD *)(a3 + 40);
  if (v19)
    v20 = sub_1ACB8B290(a1, v19, 0, 0);
  else
    v20 = 0;
  *(_QWORD *)(v6 + 40) = v20;
  v21 = *(_QWORD *)(a3 + 48);
  if (v21)
    v22 = sub_1ACB8B290(a1, v21, 0, 0);
  else
    v22 = 0;
  *(_QWORD *)(v6 + 48) = v22;
  *(_QWORD *)(v6 + 112) = a2;
  *(_BYTE *)(v6 + 35) = *(_BYTE *)(a3 + 35);
  return v6;
}

uint64_t sub_1ACC0D484(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 172 && (a2[7] & 1) != 0)
    sub_1ACC0D4C8(*(_QWORD *)(a1 + 40), *((_QWORD **)a2 + 9));
  return 0;
}

BOOL sub_1ACC0D4B8(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 40) != a2;
}

uint64_t sub_1ACC0D4C8(uint64_t result, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (!result)
    return result;
  v3 = result;
  v5 = result + 112;
  v4 = *(_QWORD *)(result + 112);
  if (!v4)
  {
    a2[8] = 0;
LABEL_17:
    *(_QWORD *)v5 = a2;
    a2[7] = v5;
    return result;
  }
  result = sub_1ACC0AFF8(0, v4, (uint64_t)a2, 0);
  if (!(_DWORD)result)
  {
    v10 = *(_QWORD *)v5;
    a2[8] = *(_QWORD *)v5;
    if (v10)
      *(_QWORD *)(v10 + 56) = a2 + 8;
    goto LABEL_17;
  }
  v6 = a2[2];
  v7 = *(_QWORD *)(*(_QWORD *)v5 + 16);
  if (!(v6 | v7))
    return result;
  if (v6 && v7 && *(_DWORD *)v6 == *(_DWORD *)v7)
  {
    if (*(int *)v6 < 1)
      return result;
    v8 = 0;
    v9 = 0;
    while (*(unsigned __int8 *)(v6 + v8 + 24) == *(unsigned __int8 *)(v7 + v8 + 24))
    {
      result = sub_1ACC0ABAC(0, *(unsigned __int8 **)(v6 + v8 + 8), *(unsigned __int8 **)(v7 + v8 + 8), 0xFFFFFFFFLL);
      if ((_DWORD)result)
        break;
      ++v9;
      v8 += 24;
      if (v9 >= *(int *)v6)
        return result;
    }
  }
  *(_DWORD *)(v3 + 4) |= 0x2000000u;
  return result;
}

uint64_t sub_1ACC0D5D4(uint64_t a1, uint64_t a2, int a3)
{
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t result;
  uint64_t v12;
  unsigned int (*v13)(_QWORD);
  unsigned int v14;

  v6 = *(_DWORD *)(a1 + 68);
  v7 = 10 - v6;
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD **)(a1 + 80);
  v10 = 4 * (10 - v6);
  if (v9)
  {
    if (*(_QWORD *)(v8 + 512) > (unint64_t)v9)
    {
      if (*(_QWORD *)(v8 + 496) <= (unint64_t)v9)
      {
        if (v10 < 0x81)
        {
LABEL_6:
          result = *(_QWORD *)(a1 + 80);
          goto LABEL_12;
        }
      }
      else if (*(_QWORD *)(v8 + 504) <= (unint64_t)v9 && v10 <= *(unsigned __int16 *)(v8 + 438))
      {
        goto LABEL_6;
      }
    }
    result = sub_1ACBE11D0(*(_QWORD *)a1, v9, v10);
    if (result)
    {
LABEL_12:
      *(_QWORD *)(a1 + 80) = result;
      if (v6 <= -90)
      {
LABEL_13:
        if ((int)(v7 / 0x64u) > *(_DWORD *)(a1 + 72) / 100)
        {
          v12 = *(_QWORD *)a1;
          if (*(_DWORD *)(*(_QWORD *)a1 + 424))
          {
            ++*(_DWORD *)(a1 + 48);
            *(_DWORD *)(a1 + 24) = 9;
          }
          v13 = *(unsigned int (**)(_QWORD))(v12 + 544);
          if (v13)
          {
            v14 = *(_DWORD *)(a1 + 144) + 1;
            *(_DWORD *)(a1 + 144) = v14;
            if (v14 >= *(_DWORD *)(v12 + 560))
            {
              if (v13(*(_QWORD *)(v12 + 552)))
              {
                ++*(_DWORD *)(a1 + 48);
                *(_DWORD *)(a1 + 24) = 9;
              }
              *(_DWORD *)(a1 + 144) = 0;
              result = *(_QWORD *)(a1 + 80);
            }
          }
        }
      }
LABEL_21:
      *(_DWORD *)(a1 + 72) = v7;
      *(_DWORD *)(result + 4 * a3) = *(_DWORD *)(a2 + 144);
      return result;
    }
    result = (uint64_t)sub_1ACBE0F9C((_QWORD *)v8, v9);
    *(_QWORD *)(a1 + 80) = 0;
  }
  else
  {
    result = sub_1ACBE1124(*(_QWORD *)a1, 4 * v7);
    *(_QWORD *)(a1 + 80) = result;
    if (result)
    {
      if (v6 <= -90)
        goto LABEL_13;
      goto LABEL_21;
    }
  }
  *(_DWORD *)(a1 + 72) = 0;
  return result;
}

_QWORD *sub_1ACC0D760(_QWORD *result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v4;
  _QWORD **v5;
  _QWORD *v6;
  _QWORD v7[4];
  __int128 v8;

  v4 = (unsigned __int8 *)a2;
  v5 = (_QWORD **)result;
  if (*((_BYTE *)result + 35))
  {
    v7[3] = 0;
    v8 = 0u;
    v7[0] = 0;
    WORD2(v8) = 2;
    v7[1] = sub_1ACB8B0F4;
    v7[2] = sub_1ACC0B708;
    if (!a2)
      return (_QWORD *)sub_1ACC09B6C(v5, v4, a3);
    sub_1ACC0B714((uint64_t)v7, a2);
    if (WORD2(v8))
      return (_QWORD *)sub_1ACC09B6C(v5, v4, a3);
    v6 = *v5;
  }
  else
  {
    v6 = (_QWORD *)*result;
    if (!a2)
    {
      if (!*((_BYTE *)v6 + 103))
        goto LABEL_12;
LABEL_7:
      if (!v4)
        return result;
      return sub_1ACBF8348(v6, v4);
    }
  }
  result = sub_1ACB8B290((uint64_t)v6, v4, 0, 0);
  v4 = (unsigned __int8 *)result;
  if (*((_BYTE *)v6 + 103))
    goto LABEL_7;
LABEL_12:
  result = (_QWORD *)sub_1ACC08D80((uint64_t)v5, v4, a3);
  if (!v4)
    return result;
  return sub_1ACBF8348(v6, v4);
}

uint64_t sub_1ACC0D84C(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  int v8;

  v1 = a1;
  v2 = *a1;
  if ((v2 - 43) <= 1)
  {
    v3 = sub_1ACC0D84C(*((_QWORD *)a1 + 3));
    v4 = sub_1ACC0D84C(*((_QWORD *)v1 + 2));
    v5 = *(_DWORD *)(v4 + 4);
    if ((v5 & 0x10000001) == 0x10000000 || (v6 = *(_DWORD *)(v3 + 4), (v6 & 0x20000001) == 0x20000000))
    {
      if (v2 == 44)
        return v3;
      else
        return v4;
    }
    else
    {
      v8 = v6 & 0x10000001;
      if ((v5 & 0x20000001) == 0x20000000 || v8 == 0x10000000)
      {
        if (v2 == 44)
          return v4;
        else
          return v3;
      }
    }
  }
  return (uint64_t)v1;
}

uint64_t sub_1ACC0D8FC(uint64_t result, int a2)
{
  char *v2;

  if (*(_BYTE *)(*(_QWORD *)result + 103))
    v2 = &byte_1EECAD280;
  else
    v2 = (char *)(*(_QWORD *)(result + 136) + 40 * *(int *)(result + 144) - 40);
  if (*((_DWORD *)v2 + 3) == a2 && *v2 == 94)
    *((_WORD *)v2 + 1) |= 0x80u;
  return result;
}

uint64_t sub_1ACC0D950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t (*v6)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD);
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  char v17;

  v5 = *(_QWORD *)a1;
  v6 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 528);
  if (!v6 || *(_BYTE *)(v5 + 197) || *(_BYTE *)(a1 + 302))
    return 0;
  result = v6(*(_QWORD *)(v5 + 536), a2, a3, a4, a5, *(_QWORD *)(a1 + 368));
  if ((_DWORD)result == 1)
  {
    v15 = 23;
    v16 = "not authorized";
LABEL_10:
    sub_1ACBCB308(a1, v16, v9, v10, v11, v12, v13, v14, v17);
    *(_DWORD *)(a1 + 24) = v15;
    return 1;
  }
  if ((result & 0xFFFFFFFD) != 0)
  {
    v15 = 1;
    v16 = "authorizer malfunction";
    goto LABEL_10;
  }
  return result;
}

uint64_t sub_1ACC0D9D8(_BYTE *a1, char *__s, _BYTE *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  char *v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char v23;

  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  if ((v9 & 0x10000001) == 1)
    return 0;
  result = 0;
  if ((*(_BYTE *)(v8 + 198) & 2) != 0 || !byte_1ECD3B149)
    return result;
  v12 = __s;
  if (*(_BYTE *)(v8 + 197))
  {
    v13 = *(unsigned __int8 ***)(v8 + 200);
    v14 = *v13;
    if (a3)
    {
      if (v14)
      {
        while (1)
        {
          v15 = *a3;
          v16 = *v14;
          if ((_DWORD)v15 == (_DWORD)v16)
          {
            if (!*a3)
              goto LABEL_32;
          }
          else if (byte_1ACCB6333[v15] != byte_1ACCB6333[v16])
          {
            break;
          }
          ++a3;
          ++v14;
        }
      }
    }
    else if (!v14)
    {
LABEL_32:
      v19 = v13[1];
      if (__s)
      {
        if (v19)
        {
          while (1)
          {
            v20 = *v12;
            v21 = *v19;
            if ((_DWORD)v20 == (_DWORD)v21)
            {
              if (!*v12)
                goto LABEL_41;
            }
            else if (byte_1ACCB6333[v20] != byte_1ACCB6333[v21])
            {
              break;
            }
            ++v12;
            ++v19;
          }
        }
      }
      else if (!v19)
      {
LABEL_41:
        result = sqlite3_stricmp(a4, (const char *)v13[2]);
        if (!(_DWORD)result)
          return result;
      }
    }
    sub_1ACBCB308((uint64_t)a1, &byte_1ACCBEAEE, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, v23);
    return 1;
  }
  if (__s && !a1[30])
  {
    v17 = *__s;
    if (!*__s)
    {
      v18 = "sqlite_";
      goto LABEL_58;
    }
    if ((v17 & 0xFFFFFFDF) == 0x53)
    {
      v17 = __s[1];
      if (!__s[1])
      {
        v18 = "qlite_";
        goto LABEL_58;
      }
      if ((v17 & 0xFFFFFFDF) == 0x51)
      {
        v17 = __s[2];
        if (!__s[2])
        {
          v18 = "lite_";
          goto LABEL_58;
        }
        if ((v17 & 0xFFFFFFDF) == 0x4C)
        {
          v17 = __s[3];
          if (!__s[3])
          {
            v18 = "ite_";
            goto LABEL_58;
          }
          if ((v17 & 0xFFFFFFDF) == 0x49)
          {
            v17 = __s[4];
            if (!__s[4])
            {
              v18 = "te_";
              goto LABEL_58;
            }
            if ((v17 & 0xFFFFFFDF) == 0x54)
            {
              v17 = __s[5];
              if (!__s[5])
              {
                v18 = "e_";
                goto LABEL_58;
              }
              if ((v17 & 0xFFFFFFDF) == 0x45)
              {
                v17 = __s[6];
                if (!__s[6])
                {
                  v18 = "_";
LABEL_58:
                  if ((_DWORD)v17 == byte_1ACCB6333[*v18])
                    goto LABEL_59;
                  goto LABEL_60;
                }
                if ((_DWORD)v17 == 95)
                {
LABEL_59:
                  sub_1ACBCB308((uint64_t)a1, "object name reserved for internal use: %s", (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8, (char)v12);
                  return 1;
                }
                v17 += (unint64_t)byte_1ACCB6333;
                v18 = "_";
              }
              else
              {
                v17 += (unint64_t)byte_1ACCB6333;
                v18 = "e_";
              }
            }
            else
            {
              v17 += (unint64_t)byte_1ACCB6333;
              v18 = "te_";
            }
          }
          else
          {
            v17 += (unint64_t)byte_1ACCB6333;
            v18 = "ite_";
          }
        }
        else
        {
          v17 += (unint64_t)byte_1ACCB6333;
          v18 = "lite_";
        }
      }
      else
      {
        v17 += (unint64_t)byte_1ACCB6333;
        v18 = "qlite_";
      }
    }
    else
    {
      v17 += (unint64_t)byte_1ACCB6333;
      v18 = "sqlite_";
    }
    LODWORD(v17) = *(unsigned __int8 *)v17;
    goto LABEL_58;
  }
LABEL_60:
  if ((v9 & 0x10000000) == 0
    || *(_QWORD *)(v8 + 592)
    || *(_DWORD *)(v8 + 220)
    || *(int *)(v8 + 564) >= 1 && !*(_QWORD *)(v8 + 600))
  {
    return 0;
  }
  result = (uint64_t)strrchr(__s, 95);
  if (!result)
    return result;
  v22 = (_BYTE *)result;
  *(_BYTE *)result = 0;
  result = sub_1ACBD1B0C(v8, v12, 0);
  *v22 = 95;
  if (!result)
    return result;
  if (*(_BYTE *)(result + 63) != 1)
    return 0;
  result = sub_1ACC0E114(v8, result, v12);
  if ((_DWORD)result)
    goto LABEL_59;
  return result;
}

uint64_t *sub_1ACC0DD18(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v8 = (*((_DWORD *)result + 14) + 1);
  *((_DWORD *)result + 14) = v8;
  v9 = result[2];
  if (v9)
    goto LABEL_6;
  if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0)
    *((_BYTE *)result + 35) = 1;
  result = (uint64_t *)sub_1ACBCB4C8(result, a2, a3, a4, a5, a6, a7, a8);
  v9 = (uint64_t)result;
  if (result)
  {
LABEL_6:
    v10 = *(_DWORD *)(v9 + 144);
    if (*(_DWORD *)(v9 + 148) <= v10)
    {
      result = (uint64_t *)sub_1ACBFF5AC(v9, 4, 0, v8, 0xFFFFFFFFLL, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v9 + 144) = v10 + 1;
      v11 = *(_QWORD *)(v9 + 136) + 40 * v10;
      *(_QWORD *)v11 = 4;
      *(_DWORD *)(v11 + 8) = v8;
      *(_DWORD *)(v11 + 12) = -1;
      *(_QWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v11 + 32) = 0;
      *(_QWORD *)(v11 + 16) = 0;
    }
    *(_DWORD *)(v9 + 272) |= 1u;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 32) + 8) + 17))
      *(_DWORD *)(v9 + 276) |= 1u;
  }
  return result;
}

uint64_t sub_1ACC0DDF0(uint64_t result, char a2, int a3)
{
  uint64_t v4;
  int v5;
  int v6;

  if (*(_QWORD *)(result + 168))
    v4 = *(_QWORD *)(result + 168);
  else
    v4 = result;
  v5 = *(_DWORD *)(v4 + 124);
  v6 = 1 << a3;
  if ((v5 & (1 << a3)) == 0)
  {
    *(_DWORD *)(v4 + 124) = v5 | v6;
    if (a3 == 1)
      result = sub_1ACBE9418(v4);
  }
  *(_DWORD *)(v4 + 120) |= v6;
  *(_BYTE *)(v4 + 32) |= a2;
  return result;
}

void sub_1ACC0DE64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v11;
  uint64_t v12;

  v10 = *(_QWORD *)(a1 + 16);
  if (v10)
  {
    if ((_DWORD)a2 == 1)
      goto LABEL_10;
    goto LABEL_8;
  }
  if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
    *(_BYTE *)(a1 + 35) = 1;
  v10 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a2 != 1)
  {
LABEL_8:
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * (int)a2 + 8) + 17))
      sub_1ACC08F44(a1, a2, 1, 1, (uint64_t)"sqlite_master");
  }
LABEL_10:
  v11 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v11)
  {
    sub_1ACBFF7F0(v10, 113, 0, 1, a2, 5, a7, a8);
    if (*(_DWORD *)(a1 + 52))
      return;
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v11 + 1;
    v12 = *(_QWORD *)(v10 + 136) + 40 * v11;
    *(_DWORD *)v12 = 64881;
    *(_QWORD *)(v12 + 4) = 0x100000000;
    *(_DWORD *)(v12 + 12) = a2;
    *(_DWORD *)(v12 + 16) = 5;
    *(_QWORD *)(v12 + 24) = 0;
    *(_QWORD *)(v12 + 32) = 0;
    if (*(_DWORD *)(a1 + 52))
      return;
  }
  *(_DWORD *)(a1 + 52) = 1;
}

uint64_t sub_1ACC0DF84(uint64_t a1, uint64_t a2)
{
  const void *v2;
  size_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int i;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _BYTE **v14;
  _BYTE *v15;
  unsigned __int8 *k;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  const char *v20;
  unsigned __int8 *j;
  uint64_t v22;
  uint64_t v23;

  if (!a2)
    return 0xFFFFFFFFLL;
  v2 = *(const void **)a2;
  if (!*(_QWORD *)a2)
    return 0xFFFFFFFFLL;
  v4 = *(unsigned int *)(a2 + 8);
  v5 = (_QWORD *)sub_1ACBE1124(a1, v4 + 1);
  if (!v5)
    return 0xFFFFFFFFLL;
  v6 = v5;
  memcpy(v5, v2, v4);
  *((_BYTE *)v6 + v4) = 0;
  if ((char)byte_1ACCB6548[*(unsigned __int8 *)v6] < 0)
  {
    v7 = 0;
    if (*(_BYTE *)v6 == 91)
      v8 = 93;
    else
      v8 = *(unsigned __int8 *)v6;
    for (i = 1; ; ++i)
    {
      v10 = i;
      v11 = *((unsigned __int8 *)v6 + i);
      if (v11 == v8)
      {
        ++i;
        LOBYTE(v11) = v8;
        if (*((unsigned __int8 *)v6 + v10 + 1) != v8)
          break;
      }
      *((_BYTE *)v6 + v7++) = v11;
    }
    *((_BYTE *)v6 + v7) = 0;
  }
  v12 = *(_DWORD *)(a1 + 40);
  v13 = (v12 - 1);
  if (v12 >= 1)
  {
    v14 = (_BYTE **)(*(_QWORD *)(a1 + 32) + 32 * v13);
    while (1)
    {
      v15 = *v14;
      if (*v14)
        break;
LABEL_22:
      if (!(_DWORD)v13)
      {
        v20 = "main";
        for (j = (unsigned __int8 *)v6; ; ++j)
        {
          v22 = *(unsigned __int8 *)v20;
          v23 = *j;
          if ((_DWORD)v22 == (_DWORD)v23)
          {
            if (!*v20)
            {
              v13 = 0;
              goto LABEL_32;
            }
          }
          else if (byte_1ACCB6333[v22] != byte_1ACCB6333[v23])
          {
            break;
          }
          ++v20;
        }
      }
      v14 -= 4;
      v19 = (int)v13 <= 0;
      v13 = (v13 - 1);
      if (v19)
      {
        v13 = 0xFFFFFFFFLL;
        goto LABEL_32;
      }
    }
    for (k = (unsigned __int8 *)v6; ; ++k)
    {
      v17 = *v15;
      v18 = *k;
      if ((_DWORD)v17 == (_DWORD)v18)
      {
        if (!*v15)
          break;
      }
      else if (byte_1ACCB6333[v17] != byte_1ACCB6333[v18])
      {
        goto LABEL_22;
      }
      ++v15;
    }
  }
LABEL_32:
  sub_1ACBE0F9C((_QWORD *)a1, v6);
  return v13;
}

uint64_t sub_1ACC0E114(uint64_t a1, uint64_t a2, _BYTE *a3)
{
  const char *v6;
  int v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  int v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(_BYTE *);
  _DWORD *v26;
  _BYTE *v27;
  unsigned __int8 *i;
  uint64_t v29;
  uint64_t v30;

  if (*(_BYTE *)(a2 + 63) != 1)
    return 0;
  v6 = *(const char **)a2;
  if (!*(_QWORD *)a2)
  {
    if (a3)
      return 0;
    v7 = 0;
    goto LABEL_12;
  }
  v7 = strlen(*(const char **)a2) & 0x3FFFFFFF;
  if (!a3)
  {
LABEL_12:
    if (v6)
      v12 = -1;
    else
      v12 = 0;
    if (v12)
      return 0;
    goto LABEL_19;
  }
  if (v7)
  {
    v8 = v7 + 1;
    v9 = a3;
    while (1)
    {
      v10 = *v9;
      if (!*v9)
        break;
      LODWORD(v10) = byte_1ACCB6333[v10];
      v11 = byte_1ACCB6333[*(unsigned __int8 *)v6];
      if ((_DWORD)v10 != v11)
        goto LABEL_18;
      ++v9;
      ++v6;
      if (--v8 <= 1)
        goto LABEL_19;
    }
    v11 = byte_1ACCB6333[*(unsigned __int8 *)v6];
LABEL_18:
    if ((_DWORD)v10 != v11)
      return 0;
  }
LABEL_19:
  v13 = &a3[v7];
  if (*v13 == 95)
  {
    v14 = **(_BYTE ***)(a2 + 72);
    v15 = *(_QWORD *)(a1 + 584);
    if (v15)
    {
      v16 = *v14;
      if (*v14)
      {
        v17 = 0;
        v18 = v14 + 1;
        do
        {
          v17 = -1640531535 * (v17 + byte_1ACCB6333[v16]);
          v19 = *v18++;
          v16 = v19;
        }
        while (v19);
      }
      else
      {
        v17 = 0;
      }
      v26 = (_DWORD *)(v15 + 16 * (v17 % *(_DWORD *)(a1 + 568)));
      v20 = (uint64_t *)(v26 + 2);
      v21 = *v26;
      if (v21)
      {
        while (1)
        {
LABEL_34:
          v20 = (uint64_t *)*v20;
          v27 = (_BYTE *)v20[3];
          for (i = **(unsigned __int8 ***)(a2 + 72); ; ++i)
          {
            v29 = *v27;
            v30 = *i;
            if ((_DWORD)v29 != (_DWORD)v30)
              break;
            if (!*v27)
              goto LABEL_27;
LABEL_36:
            ++v27;
          }
          if (byte_1ACCB6333[v29] == byte_1ACCB6333[v30])
            goto LABEL_36;
          if (!--v21)
          {
            v20 = &qword_1EECAD260;
            goto LABEL_27;
          }
        }
      }
    }
    else
    {
      v20 = (uint64_t *)(a1 + 576);
      v21 = *(_DWORD *)(a1 + 572);
      if (v21)
        goto LABEL_34;
    }
    v20 = &qword_1EECAD260;
LABEL_27:
    v22 = (uint64_t *)v20[2];
    if (v22)
    {
      v23 = *v22;
      if (*(int *)v23 >= 3)
      {
        v24 = *(uint64_t (**)(_BYTE *))(v23 + 184);
        if (v24)
          return v24(v13 + 1);
      }
    }
  }
  return 0;
}

uint64_t sub_1ACC0E2FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t i;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  unsigned __int8 *j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  int v32;
  char *v33;
  uint64_t result;
  _QWORD *v35;
  uint64_t k;
  uint64_t v37;
  int v38;
  uint64_t v39;
  _BYTE *v40;
  unsigned __int8 *m;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t n;
  _BYTE *v50;
  unsigned __int8 *ii;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  __int16 *v56;
  int v57;
  BOOL v58;
  int v59;
  int v60;
  uint64_t v61;
  __int16 *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v4 = *a1;
  v5 = (_QWORD *)a1[2];
  if ((*(_BYTE *)(*a1 + 198) & 2) == 0)
  {
    v6 = *(__int16 *)(a2 + 54);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = *(_QWORD *)(a2 + 8) + v7;
        if ((*(_WORD *)(v9 + 14) & 1) != 0 && (*(_BYTE *)(v9 + 8) & 0xF) == 0)
        {
          *(_BYTE *)(v9 + 8) = *(_BYTE *)(v9 + 8) & 0xF0 | 2;
          LOWORD(v6) = *(_WORD *)(a2 + 54);
        }
        ++v8;
        v7 += 16;
      }
      while (v8 < (__int16)v6);
    }
    *(_DWORD *)(a2 + 48) |= 0x800u;
  }
  v10 = *((_DWORD *)a1 + 50);
  if (v10)
  {
    if (*(_BYTE *)(*v5 + 103))
      v11 = &byte_1EECAD280;
    else
      v11 = (char *)(v5[17] + 40 * v10);
    *((_DWORD *)v11 + 3) = 2;
  }
  v12 = a2 + 52;
  if (*(__int16 *)(a2 + 52) < 0)
  {
    for (i = *(_QWORD *)(a2 + 16); i; i = *(_QWORD *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2)
        break;
    }
    v17 = *(unsigned __int16 *)(i + 94);
    if (v17 < 2)
    {
      LOWORD(v20) = 1;
LABEL_39:
      *(_WORD *)(i + 94) = v20;
      goto LABEL_40;
    }
    v18 = *(_QWORD *)(i + 8);
    v19 = 1;
    v20 = 1;
LABEL_24:
    if (v20 < 1)
    {
LABEL_22:
      *(_QWORD *)(*(_QWORD *)(i + 64) + 8 * v20) = *(_QWORD *)(*(_QWORD *)(i + 64) + 8 * v19);
      *(_BYTE *)(*(_QWORD *)(i + 56) + v20) = *(_BYTE *)(*(_QWORD *)(i + 56) + v19);
      v18 = *(_QWORD *)(i + 8);
      *(_WORD *)(v18 + 2 * v20++) = *(_WORD *)(v18 + 2 * v19);
      v17 = *(unsigned __int16 *)(i + 94);
      goto LABEL_23;
    }
    v21 = 0;
    while (*(unsigned __int16 *)(v18 + 2 * v21) != *(unsigned __int16 *)(v18 + 2 * v19))
    {
LABEL_26:
      if (++v21 == v20)
        goto LABEL_22;
    }
    v22 = *(_QWORD *)(i + 64);
    v23 = *(_BYTE **)(v22 + 8 * v21);
    for (j = *(unsigned __int8 **)(v22 + 8 * v19); ; ++j)
    {
      v25 = *v23;
      v26 = *j;
      if ((_DWORD)v25 == (_DWORD)v26)
      {
        if (!*v23)
        {
          --*(_WORD *)(i + 96);
LABEL_23:
          if (++v19 >= (unint64_t)v17)
            goto LABEL_39;
          goto LABEL_24;
        }
      }
      else if (byte_1ACCB6333[v25] != byte_1ACCB6333[v26])
      {
        goto LABEL_26;
      }
      ++v23;
    }
  }
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(const void **)(v13 + 16 * *(unsigned __int16 *)(a2 + 52));
  if (v14)
    LODWORD(v15) = strlen(*(const char **)(v13 + 16 * *(unsigned __int16 *)(a2 + 52))) & 0x3FFFFFFF;
  else
    LODWORD(v15) = 0;
  v27 = sub_1ACBE1124(v4, (v15 + 81));
  v28 = v27;
  if (v27)
  {
    *(_OWORD *)(v27 + 48) = 0u;
    *(_OWORD *)(v27 + 64) = 0u;
    *(_OWORD *)(v27 + 16) = 0u;
    *(_OWORD *)(v27 + 32) = 0u;
    *(_OWORD *)v27 = 0u;
    *(_BYTE *)v27 = 59;
    *(_WORD *)(v27 + 52) = -1;
    v29 = v27 + 80;
    *(_QWORD *)(v27 + 8) = v27 + 80;
    if ((_DWORD)v15)
    {
      v15 = v15;
      memcpy((void *)(v27 + 80), v14, v15);
    }
    else
    {
      v15 = 0;
    }
    *(_BYTE *)(v29 + v15) = 0;
    *(_DWORD *)(v28 + 40) = 1;
  }
  result = (uint64_t)sub_1ACC2D490((_QWORD *)*a1, (unsigned __int8 *)v28);
  if (!result)
    goto LABEL_125;
  if (*((unsigned __int8 *)a1 + 302) >= 2u)
  {
    v35 = (_QWORD *)a1[51];
    if (v35)
    {
      while (*v35 != v12)
      {
        v35 = (_QWORD *)v35[3];
        if (!v35)
          goto LABEL_124;
      }
      *v35 = *(_QWORD *)(result + 8);
    }
  }
LABEL_124:
  *(_BYTE *)(result + 24) = *((_BYTE *)a1 + 300);
  *(_WORD *)(a2 + 52) = -1;
  result = (uint64_t)sub_1ACB8BA04((_QWORD **)a1, 0, 0, 0, result, *(unsigned __int8 *)(a2 + 62), 0, 0, 0, 0, 2u);
  if (*((_DWORD *)a1 + 12))
  {
LABEL_125:
    *(_DWORD *)(a2 + 48) &= ~0x80u;
    return result;
  }
  for (i = *(_QWORD *)(a2 + 16); i; i = *(_QWORD *)(i + 40))
  {
    if ((*(_WORD *)(i + 99) & 3) == 2)
      break;
  }
LABEL_40:
  v30 = *(_WORD *)(i + 99);
  *(_WORD *)(i + 99) = v30 | 0x20;
  if ((*(_BYTE *)(v4 + 198) & 2) == 0)
    *(_WORD *)(i + 99) = v30 | 0x28;
  v31 = *(unsigned __int16 *)(i + 94);
  *(_WORD *)(i + 96) = v31;
  if (v5)
  {
    v32 = *(_DWORD *)(i + 88);
    if (v32)
    {
      if (*(_BYTE *)(*v5 + 103))
        v33 = &byte_1EECAD280;
      else
        v33 = (char *)(v5[17] + 40 * v32);
      *v33 = 9;
    }
  }
  *(_DWORD *)(i + 88) = *(_DWORD *)(a2 + 40);
  for (k = *(_QWORD *)(a2 + 16); k; k = *(_QWORD *)(k + 40))
  {
    if ((*(_WORD *)(k + 99) & 3) != 2)
    {
      if (!(_DWORD)v31)
        goto LABEL_58;
      v37 = 0;
      v38 = 0;
      do
      {
        if (*(_WORD *)(k + 94))
        {
          v39 = 0;
          do
          {
            if (*(unsigned __int16 *)(*(_QWORD *)(k + 8) + 2 * v39) == *(unsigned __int16 *)(*(_QWORD *)(i + 8)
                                                                                            + 2 * v37))
            {
              v40 = *(_BYTE **)(*(_QWORD *)(k + 64) + 8 * v39);
              for (m = *(unsigned __int8 **)(*(_QWORD *)(i + 64) + 8 * v37); ; ++m)
              {
                v42 = *v40;
                v43 = *m;
                if ((_DWORD)v42 == (_DWORD)v43)
                {
                  if (!*v40)
                    goto LABEL_64;
                }
                else if (byte_1ACCB6333[v42] != byte_1ACCB6333[v43])
                {
                  break;
                }
                ++v40;
              }
            }
            ++v39;
          }
          while (v39 != *(unsigned __int16 *)(k + 94));
        }
        ++v38;
LABEL_64:
        ++v37;
      }
      while (v37 != v31);
      if (v38)
      {
        result = sub_1ACC0F618(v4, k, v38 + *(unsigned __int16 *)(k + 94));
        if ((_DWORD)result)
          return result;
        v44 = 0;
        v45 = *(unsigned __int16 *)(k + 94);
        v46 = v45;
        while (1)
        {
          v47 = *(unsigned __int16 *)(*(_QWORD *)(i + 8) + 2 * v44);
          v48 = *(_QWORD *)(k + 8);
          if (v45)
          {
            for (n = 0; n != v45; ++n)
            {
              if (*(unsigned __int16 *)(v48 + 2 * n) == v47)
              {
                v50 = *(_BYTE **)(*(_QWORD *)(k + 64) + 8 * n);
                for (ii = *(unsigned __int8 **)(*(_QWORD *)(i + 64) + 8 * v44); ; ++ii)
                {
                  v52 = *v50;
                  v53 = *ii;
                  if ((_DWORD)v52 == (_DWORD)v53)
                  {
                    if (!*v50)
                      goto LABEL_91;
                  }
                  else if (byte_1ACCB6333[v52] != byte_1ACCB6333[v53])
                  {
                    break;
                  }
                  ++v50;
                }
              }
            }
          }
          *(_WORD *)(v48 + 2 * v46) = v47;
          *(_QWORD *)(*(_QWORD *)(k + 64) + 8 * v46) = *(_QWORD *)(*(_QWORD *)(i + 64) + 8 * v44);
          if (*(_BYTE *)(*(_QWORD *)(i + 56) + v44))
            *(_WORD *)(k + 99) |= 0x200u;
          ++v46;
LABEL_91:
          if (++v44 == v31)
            break;
          v45 = *(unsigned __int16 *)(k + 94);
        }
      }
      else
      {
LABEL_58:
        *(_WORD *)(k + 96) = *(_WORD *)(k + 94);
      }
    }
  }
  if (*(__int16 *)(a2 + 54) < 1)
  {
    v55 = 0;
  }
  else
  {
    v54 = 0;
    v55 = 0;
    do
    {
      v56 = *(__int16 **)(i + 8);
      v57 = v31;
      while (1)
      {
        v58 = __OFSUB__(v57--, 1);
        if (v57 < 0 != v58)
          break;
        v59 = *v56++;
        if (v54 == v59)
          goto LABEL_97;
      }
      if ((*(_WORD *)(*(_QWORD *)(a2 + 8) + 16 * v54 + 14) & 0x20) == 0)
        ++v55;
LABEL_97:
      ++v54;
    }
    while (v54 != *(unsigned __int16 *)(a2 + 54));
  }
  result = sub_1ACC0F618(v4, i, v55 + (int)v31);
  if (!(_DWORD)result)
  {
    v60 = *(__int16 *)(a2 + 54);
    if (v60 >= 1)
    {
      v61 = 0;
      do
      {
        v62 = *(__int16 **)(i + 8);
        v63 = v31;
        while (1)
        {
          v58 = __OFSUB__(v63--, 1);
          if (v63 < 0 != v58)
            break;
          v64 = *v62++;
          if (v61 == v64)
            goto LABEL_106;
        }
        if ((*(_WORD *)(*(_QWORD *)(a2 + 8) + 16 * v61 + 14) & 0x20) == 0)
        {
          *(_WORD *)(*(_QWORD *)(i + 8) + 2 * (int)v31) = v61;
          *(_QWORD *)(*(_QWORD *)(i + 64) + 8 * (int)v31) = "BINARY";
          LODWORD(v31) = v31 + 1;
          LOWORD(v60) = *(_WORD *)(a2 + 54);
        }
LABEL_106:
        ++v61;
      }
      while (v61 < (__int16)v60);
    }
    v65 = *(unsigned __int16 *)(i + 96);
    if (*(_WORD *)(i + 96))
    {
      v66 = 0;
      do
      {
        if ((*(__int16 *)(*(_QWORD *)(i + 8) - 2 + 2 * v65) & 0x80000000) == 0)
        {
          v67 = *(unsigned __int16 *)(*(_QWORD *)(i + 8) - 2 + 2 * v65);
          if (v67 <= 0x3E
            && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(i + 24) + 8) + 16 * v67 + 14) & 0x20) == 0)
          {
            v66 |= 1 << v67;
          }
        }
        --v65;
      }
      while ((unint64_t)(v65 + 1) > 1);
    }
    else
    {
      v66 = 0;
    }
    *(_QWORD *)(i + 104) = ~v66;
  }
  return result;
}

uint64_t sub_1ACC0E9C0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[2];
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;

  v19 = 0;
  v18 = 0u;
  v17 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  if (a2)
  {
    LODWORD(v20) = 1;
    *((_QWORD *)&v21 + 1) = *a2;
    *((_QWORD *)&v22 + 1) = a2;
    DWORD2(v24) = -1;
    if (a2[12] == *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 56))
      a3 = a3;
    else
      a3 = a3 | 0x40000;
  }
  v16[0] = a1;
  v16[1] = &v20;
  DWORD2(v18) = a3 | 0x10000;
  result = sub_1ACC0F790((uint64_t)v16, a4, a3, a4, (uint64_t)a5, a6, a7, a8);
  if (!(_DWORD)result)
  {
    if (a5)
      return sub_1ACC0F8AC((uint64_t)v16, a5, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

uint64_t *sub_1ACC0EA70(uint64_t *result, uint64_t a2, uint64_t a3, unsigned __int8 *a4)
{
  int *v7;
  int v8;
  BOOL v9;
  int v10;
  int *v11;
  unsigned __int8 *v12;

  v7 = *(int **)(a2 + 80);
  v8 = *(unsigned __int16 *)(a3 + 12);
  if (*(_WORD *)(a3 + 12))
    v9 = v7 == 0;
  else
    v9 = 1;
  if (v9)
  {
    if (!v7)
    {
      *(_WORD *)(a3 + 12) = 1;
      result = sub_1ACC2D490((_QWORD *)*result, a4);
LABEL_16:
      *(_QWORD *)(a2 + 80) = result;
      return result;
    }
    v10 = *v7;
LABEL_9:
    *(_WORD *)(a3 + 12) = v10 + 1;
    if (v7[1] > v10)
    {
      *v7 = v10 + 1;
      v11 = &v7[6 * v10];
      *((_QWORD *)v11 + 2) = 0;
      *((_QWORD *)v11 + 3) = 0;
      *((_QWORD *)v11 + 1) = a4;
      *(_QWORD *)(a2 + 80) = v7;
      return result;
    }
    result = (uint64_t *)sub_1ACC2D4F4(*result, v7, a4);
    goto LABEL_16;
  }
  v10 = *v7;
  if (*v7 < v8)
    goto LABEL_9;
  v12 = *(unsigned __int8 **)&v7[6 * (v8 - 1) + 2];
  if (v12)
  {
    result = sub_1ACBF8348((_QWORD *)*result, v12);
    v8 = *(unsigned __int16 *)(a3 + 12);
  }
  *(_QWORD *)&v7[6 * v8 - 4] = a4;
  return result;
}

uint64_t sub_1ACC0EB50(uint64_t result)
{
  uint64_t v1;
  int v2;
  __int16 *v3;
  int v4;
  unsigned __int16 v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  __int16 v9;
  unint64_t v10;
  BOOL v11;

  v1 = *(unsigned __int16 *)(result + 96);
  if (!*(_WORD *)(result + 96))
    goto LABEL_18;
  v2 = 0;
  v3 = *(__int16 **)(result + 8);
  do
  {
    v6 = *v3++;
    v5 = v6;
    if (v6 < 0)
      v4 = 1;
    else
      v4 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 16 * v5 + 10);
    v2 += v4;
    --v1;
  }
  while (v1);
  v7 = (4 * v2);
  if (v7 >= 8)
  {
    v9 = 40;
    if (v7 >= 0x100)
    {
      v10 = v7;
      do
      {
        v9 += 40;
        v7 = v10 >> 4;
        v11 = v10 > 0xFFF;
        v10 >>= 4;
      }
      while (v11);
    }
    if (v7 < 0x10)
    {
      LOBYTE(v8) = v7;
    }
    else
    {
      do
      {
        v9 += 10;
        v8 = v7 >> 1;
        v11 = v7 > 0x1F;
        v7 >>= 1;
      }
      while (v11);
    }
    goto LABEL_17;
  }
  if ((_DWORD)v7)
  {
    LOBYTE(v8) = 2 * v7;
    v9 = 30;
LABEL_17:
    LOWORD(v1) = v9 + word_1ACCBD832[v8 & 7] - 10;
LABEL_18:
    *(_WORD *)(result + 92) = v1;
    return result;
  }
  *(_WORD *)(result + 92) = 0;
  return result;
}

uint64_t sub_1ACC0EC20(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  int v11;

  v4 = a2;
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 48);
  *(_QWORD *)(*(_QWORD *)a1 + 48) = v7 & 0xFFFFFFFFFFFFFFBBLL | 0x40;
  sub_1ACC10600((_BYTE *)a1, a2, 0);
  v8 = 0;
  *(_QWORD *)(v6 + 48) = v7;
  if (!*(_DWORD *)(a1 + 48))
  {
    do
    {
      v10 = v4;
      v4 = *(_QWORD *)(v4 + 80);
    }
    while (v4);
    if (v6)
    {
      v8 = sub_1ACBE1124(v6, 0x68uLL);
      if (!v8)
        return v8;
    }
    else
    {
      v8 = sub_1ACB5D828(104);
      if (!v8)
        return v8;
    }
    *(_OWORD *)(v8 + 32) = 0u;
    *(_OWORD *)(v8 + 48) = 0u;
    *(_QWORD *)(v8 + 96) = 0;
    *(_OWORD *)(v8 + 64) = 0u;
    *(_OWORD *)(v8 + 80) = 0u;
    *(_OWORD *)v8 = 0u;
    *(_OWORD *)(v8 + 16) = 0u;
    *(_DWORD *)(v8 + 44) = 1;
    *(_QWORD *)v8 = 0;
    *(_WORD *)(v8 + 58) = 200;
    sub_1ACC10EB0((_DWORD *)a1, *(int **)(v10 + 32), (_WORD *)(v8 + 54), (_QWORD *)(v8 + 8));
    sub_1ACC11890(a1, v8, (_QWORD *)v10, a3);
    *(_WORD *)(v8 + 52) = -1;
    if (*(_BYTE *)(v6 + 103))
    {
      if (*(_QWORD *)(v6 + 816) || (v11 = *(_DWORD *)(v8 + 44) - 1, (*(_DWORD *)(v8 + 44) = v11) == 0))
        sub_1ACC00BE8((_QWORD *)v6, (_QWORD *)v8);
      return 0;
    }
  }
  return v8;
}

uint64_t sub_1ACC0ED48(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v8 = result;
  v9 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v9)
  {
    result = sub_1ACBFF5AC(result, 68, a2, 0, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(result + 144) = v9 + 1;
    v10 = *(_QWORD *)(result + 136) + 40 * v9;
    *(_DWORD *)v10 = 68;
    *(_DWORD *)(v10 + 4) = a2;
    *(_OWORD *)(v10 + 8) = 0u;
    *(_OWORD *)(v10 + 24) = 0u;
  }
  v11 = *(_QWORD *)(v8 + 24);
  *(_BYTE *)(v11 + 31) = 0;
  *(_DWORD *)(v11 + 40) = 0;
  return result;
}

void sub_1ACC0EDC4(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v38;
  BOOL v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  char v43;

  if ((*(_BYTE *)(a2 + 50) & 1) != 0)
  {
    if ((_DWORD)a3)
    {
      v24 = *(__int16 *)(a2 + 56);
      v25 = *((_DWORD *)a1 + 36);
      if (*((_DWORD *)a1 + 37) <= v25)
      {
        sub_1ACBFF5AC((uint64_t)a1, 95, a3, v24, 0, a6, a7, a8);
      }
      else
      {
        *((_DWORD *)a1 + 36) = v25 + 1;
        v26 = (uint64_t)&a1[17][5 * v25];
        *(_DWORD *)v26 = 95;
        *(_DWORD *)(v26 + 4) = a3;
        *(_DWORD *)(v26 + 8) = v24;
        *(_QWORD *)(v26 + 12) = 0;
        *(_QWORD *)(v26 + 28) = 0;
        *(_QWORD *)(v26 + 20) = 0;
        *(_DWORD *)(v26 + 36) = 0;
      }
      if (!*((_BYTE *)*a1 + 103))
      {
        v34 = (uint64_t)&a1[17][5 * *((int *)a1 + 36)];
        *(_BYTE *)(v34 - 39) = -5;
        *(_QWORD *)(v34 - 24) = a2;
      }
    }
    else
    {
      if (*((_BYTE *)*a1 + 103)
        || (v27 = (uint64_t)&a1[17][5 * *((int *)a1 + 36)],
            *(_BYTE *)(v27 - 39) = -5,
            *(_QWORD *)(v27 - 24) = a2,
            *((_BYTE *)*a1 + 103)))
      {
        v28 = *((_DWORD *)a1 + 36);
        v29 = &byte_1EECAD280;
      }
      else
      {
        v28 = *((_DWORD *)a1 + 36);
        v29 = (char *)&a1[17][5 * v28 - 5];
      }
      *v29 = 95;
      v30 = *((unsigned int *)v29 + 1);
      v31 = *((unsigned int *)v29 + 2);
      v32 = *((unsigned int *)v29 + 3);
      if (*((_DWORD *)a1 + 37) <= v28)
      {
        sub_1ACBFF5AC((uint64_t)a1, 97, v30, v31, v32, a6, a7, a8);
      }
      else
      {
        *((_DWORD *)a1 + 36) = v28 + 1;
        v33 = (uint64_t)&a1[17][5 * v28];
        *(_DWORD *)v33 = 97;
        *(_DWORD *)(v33 + 4) = v30;
        *(_DWORD *)(v33 + 8) = v31;
        *(_DWORD *)(v33 + 12) = v32;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0;
        *(_QWORD *)(v33 + 16) = 0;
      }
    }
  }
  else
  {
    v11 = *(char **)(a2 + 24);
    if (v11)
    {
LABEL_34:
      v40 = strlen(v11);
      v42 = v40 & 0x3FFFFFFF;
      if ((v40 & 0x3FFFFFFF) != 0)
      {
        if ((_DWORD)a3)
        {
          sub_1ACBA86CC((uint64_t *)a1, 96, a3, v42, 0, (uint64_t)v11, v42, v41);
        }
        else if (*((_BYTE *)*a1 + 103))
        {
          sub_1ACB693B4(*a1, v42, (uint64_t)v11);
        }
        else
        {
          sub_1ACBFF884((uint64_t *)a1, (uint64_t)&a1[17][5 * *((int *)a1 + 36) - 5], v11, v42);
        }
      }
      return;
    }
    v12 = sub_1ACB5D828(*(__int16 *)(a2 + 54) + 1);
    if (v12)
    {
      v11 = (char *)v12;
      v19 = *(__int16 *)(a2 + 54);
      if (v19 < 1)
      {
        v22 = 0;
      }
      else
      {
        v20 = 0;
        v21 = 0;
        v22 = 0;
        do
        {
          v23 = *(_QWORD *)(a2 + 8) + v20;
          if ((*(_WORD *)(v23 + 14) & 0x20) == 0)
          {
            *(_BYTE *)(v12 + v22++) = *(_BYTE *)(v23 + 9);
            LOWORD(v19) = *(_WORD *)(a2 + 54);
          }
          ++v21;
          v20 += 16;
        }
        while (v21 < (__int16)v19);
      }
      v38 = v22;
      do
      {
        *(_BYTE *)(v12 + v38) = 0;
        v39 = v38-- < 1;
      }
      while (!v39 && *(char *)(v12 + v38) < 66);
      *(_QWORD *)(a2 + 24) = v12;
      goto LABEL_34;
    }
    v35 = (uint64_t)*a1;
    if (!*(_BYTE *)(v35 + 103) && !*(_BYTE *)(v35 + 104))
    {
      *(_BYTE *)(v35 + 103) = 1;
      if (*(int *)(v35 + 220) >= 1)
        *(_DWORD *)(v35 + 424) = 1;
      ++*(_DWORD *)(v35 + 432);
      *(_WORD *)(v35 + 436) = 0;
      v36 = *(_QWORD *)(v35 + 344);
      if (v36)
      {
        sub_1ACBCB308(v36, "out of memory", v13, v14, v15, v16, v17, v18, v43);
        for (i = *(_QWORD *)(v35 + 344); ; ++*(_DWORD *)(i + 48))
        {
          *(_DWORD *)(i + 24) = 7;
          i = *(_QWORD *)(i + 256);
          if (!i)
            break;
        }
      }
    }
  }
}

const char *sub_1ACC0F0C8(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  _BYTE **v7;
  int v8;
  _BYTE *i;
  int v10;
  int v11;
  unsigned __int8 *j;
  int v13;
  const char *v14;
  const char *v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  char *v29;
  int v30;
  unsigned int v31;
  int v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  const char *v38;
  int v39;

  v4 = *(__int16 *)(a2 + 54);
  if (v4 >= 1)
  {
    v5 = 0;
    v6 = 0;
    v7 = *(_BYTE ***)(a2 + 8);
    while (1)
    {
      v8 = 0;
      for (i = *v7; ; ++i)
      {
        if (*i == 34)
        {
          ++v8;
          goto LABEL_5;
        }
        if (!*i)
          break;
LABEL_5:
        ++v8;
      }
      v6 += v8 + 7;
      ++v5;
      v7 += 2;
      if (v5 == v4)
      {
        v10 = v6 + 2;
        goto LABEL_11;
      }
    }
  }
  v10 = 2;
LABEL_11:
  v11 = 0;
  for (j = *(unsigned __int8 **)a2; ; ++j)
  {
    if (*j == 34)
    {
      ++v11;
      goto LABEL_13;
    }
    if (!*j)
      break;
LABEL_13:
    ++v11;
  }
  v13 = v10 + v11;
  if (v10 + v11 >= 50)
    v14 = ",\n  ";
  else
    v14 = ",";
  if (v13 >= 50)
    v15 = "\n)";
  else
    v15 = ")";
  v16 = v13 + 6 * v4 + 35;
  v17 = (char *)sub_1ACB5D828(v16);
  if (v17)
  {
    v24 = v17;
    sqlite3_snprintf(v16, v17, "CREATE TABLE ");
    v39 = strlen(v24) & 0x3FFFFFFF;
    sub_1ACC1260C((uint64_t)v24, &v39, *(unsigned __int8 **)a2);
    v25 = v39 + 1;
    v24[v39] = 40;
    v38 = v15;
    if (*(__int16 *)(a2 + 54) >= 1)
    {
      v26 = *(_QWORD *)(a2 + 8);
      if (v13 >= 50)
        sqlite3_snprintf(v16 - v25, (char *)&v24[v25], "\n  ");
      else
        sqlite3_snprintf(v16 - v25, (char *)&v24[v25], &byte_1ACCBEAEE);
      v39 = (strlen(&v24[v25]) & 0x3FFFFFFF) + v25;
      sub_1ACC1260C((uint64_t)v24, &v39, *(unsigned __int8 **)v26);
      v27 = strlen(*((const char **)&off_1E5C74570 + *(char *)(v26 + 9) - 65)) & 0x3FFFFFFF;
      v28 = v39;
      memcpy((void *)&v24[v39], *((const void **)&off_1E5C74570 + *(char *)(v26 + 9) - 65), v27);
      LODWORD(v25) = v27 + v28;
      if (*(__int16 *)(a2 + 54) >= 2)
      {
        v29 = (char *)(v26 + 25);
        v30 = 1;
        do
        {
          sqlite3_snprintf(v16 - v25, (char *)&v24[(int)v25], v14);
          v39 = (strlen(&v24[(int)v25]) & 0x3FFFFFFF) + v25;
          sub_1ACC1260C((uint64_t)v24, &v39, *(unsigned __int8 **)(v29 - 9));
          v31 = strlen(*((const char **)&off_1E5C74570 + *v29 - 65)) & 0x3FFFFFFF;
          v32 = v39;
          memcpy((void *)&v24[v39], *((const void **)&off_1E5C74570 + *v29 - 65), v31);
          LODWORD(v25) = v31 + v32;
          v39 = v25;
          ++v30;
          v29 += 16;
        }
        while (v30 < *(__int16 *)(a2 + 54));
      }
    }
    sqlite3_snprintf(v16 - v25, (char *)&v24[(int)v25], "%s", v38);
  }
  else
  {
    if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104))
      return 0;
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v34 = *(_QWORD *)(a1 + 344);
    if (!v34)
      return 0;
    sub_1ACBCB308(v34, "out of memory", v18, v19, v20, v21, v22, v23, v37);
    v35 = *(_QWORD *)(a1 + 344);
    *(_DWORD *)(v35 + 24) = 7;
    v36 = *(_QWORD *)(v35 + 256);
    if (!v36)
    {
      return 0;
    }
    else
    {
      v24 = 0;
      do
      {
        ++*(_DWORD *)(v36 + 48);
        *(_DWORD *)(v36 + 24) = 7;
        v36 = *(_QWORD *)(v36 + 256);
      }
      while (v36);
    }
  }
  return v24;
}

uint64_t sub_1ACC0F410(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;

  v8 = *a1;
  result = a1[2];
  v10 = (**(_DWORD **)(*(_QWORD *)(v8 + 32) + 32 * (int)a2 + 24) + 1);
  v11 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v11)
    return sub_1ACBFF5AC(result, 100, a2, 1, v10, a6, a7, a8);
  *(_DWORD *)(result + 144) = v11 + 1;
  v12 = *(_QWORD *)(result + 136) + 40 * v11;
  *(_DWORD *)v12 = 100;
  *(_DWORD *)(v12 + 4) = a2;
  *(_DWORD *)(v12 + 8) = 1;
  *(_DWORD *)(v12 + 12) = v10;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  return result;
}

uint64_t sub_1ACC0F480(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v11;
  BOOL v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t i;
  int v21;

  result = sub_1ACBA86CC((uint64_t *)a1, 149, a2, 0, 0, a3, 4294967290, a8);
  v11 = *(_DWORD *)(a1 + 144);
  v12 = __OFSUB__(v11, 1);
  v13 = v11 - 1;
  if (v13 < 0 == v12)
    *(_WORD *)(*(_QWORD *)(a1 + 136) + 40 * v13 + 2) = a4;
  v14 = *(_QWORD *)a1;
  v15 = *(unsigned int *)(*(_QWORD *)a1 + 40);
  if ((int)v15 >= 1)
  {
    v16 = *(_DWORD *)(a1 + 272);
    v17 = v16 | 1;
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 8) + 17))
      *(_DWORD *)(a1 + 276) |= 1u;
    if ((_DWORD)v15 != 1)
    {
      v17 = v16 | 3;
      if ((_DWORD)v15 != 2)
      {
        v19 = *(_QWORD *)(v14 + 32) + 72;
        for (i = 2; i != v15; ++i)
        {
          v21 = 1 << i;
          if (*(_BYTE *)(*(_QWORD *)v19 + 17))
            *(_DWORD *)(a1 + 276) |= v21;
          v17 |= v21;
          v19 += 32;
        }
      }
    }
    *(_DWORD *)(a1 + 272) = v17;
  }
  v18 = *(_QWORD *)(a1 + 24);
  if (*(_QWORD *)(v18 + 168))
    v18 = *(_QWORD *)(v18 + 168);
  *(_BYTE *)(v18 + 33) = 1;
  return result;
}

uint64_t sub_1ACC0F584(uint64_t a1, int a2, uint64_t a3, int a4)
{
  uint64_t i;
  _BYTE *v5;
  unsigned __int8 *j;
  uint64_t v7;
  uint64_t v8;

  if (a2 >= 1)
  {
    for (i = 0; i != a2; ++i)
    {
      if (*(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * i) == *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 2 * a4))
      {
        v5 = *(_BYTE **)(*(_QWORD *)(a1 + 64) + 8 * i);
        for (j = *(unsigned __int8 **)(*(_QWORD *)(a3 + 64) + 8 * a4); ; ++j)
        {
          v7 = *v5;
          v8 = *j;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*v5)
              return 1;
          }
          else if (byte_1ACCB6333[v7] != byte_1ACCB6333[v8])
          {
            break;
          }
          ++v5;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1ACC0F618(uint64_t a1, uint64_t a2, int a3)
{
  int v5;
  size_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t result;

  if (*(unsigned __int16 *)(a2 + 96) >= a3)
    return 0;
  v5 = 13 * a3;
  v6 = 13 * a3;
  if (a1)
  {
    v7 = (char *)sub_1ACBE1124(a1, v5);
    if (v7)
    {
LABEL_4:
      bzero(v7, v6);
      memcpy(v7, *(const void **)(a2 + 64), 8 * *(unsigned __int16 *)(a2 + 96));
      *(_QWORD *)(a2 + 64) = v7;
      v8 = &v7[8 * a3];
      memcpy(v8, *(const void **)(a2 + 16), 2 * *(unsigned __int16 *)(a2 + 94) + 2);
      *(_QWORD *)(a2 + 16) = v8;
      v9 = 2 * a3;
      v10 = &v8[v9];
      memcpy(v10, *(const void **)(a2 + 8), 2 * *(unsigned __int16 *)(a2 + 96));
      *(_QWORD *)(a2 + 8) = v10;
      v11 = &v10[v9];
      memcpy(v11, *(const void **)(a2 + 56), *(unsigned __int16 *)(a2 + 96));
      result = 0;
      *(_QWORD *)(a2 + 56) = v11;
      *(_WORD *)(a2 + 96) = a3;
      *(_WORD *)(a2 + 99) |= 0x10u;
      return result;
    }
  }
  else
  {
    v7 = (char *)sub_1ACB5D828(v5);
    if (v7)
      goto LABEL_4;
  }
  return 7;
}

uint64_t sub_1ACC0F71C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int16 *)(result + 96);
  if (*(_WORD *)(result + 96))
  {
    v2 = 0;
    do
    {
      if ((*(__int16 *)(*(_QWORD *)(result + 8) - 2 + 2 * v1) & 0x80000000) == 0)
      {
        v3 = *(unsigned __int16 *)(*(_QWORD *)(result + 8) - 2 + 2 * v1);
        if (v3 <= 0x3E
          && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 8) + 16 * v3 + 14) & 0x20) == 0)
        {
          v2 |= 1 << v3;
        }
      }
      --v1;
    }
    while ((unint64_t)(v1 + 1) > 1);
  }
  else
  {
    v2 = 0;
  }
  *(_QWORD *)(result + 104) = ~v2;
  return result;
}

BOOL sub_1ACC0F790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v10;
  _DWORD *v11;
  uint64_t (*v12)();
  int v13;
  int v15;
  uint64_t v16;
  int v17;
  _QWORD v18[6];

  if (!a2)
    return 0;
  v10 = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = v10 & 0xF7FF6FEF;
  v11 = *(_DWORD **)a1;
  v18[0] = v11;
  v18[1] = sub_1ACB75FF4;
  v12 = sub_1ACB75AF4;
  if ((v10 & 0x80000) != 0)
    v12 = 0;
  v18[2] = v12;
  v18[3] = 0;
  v18[4] = 0;
  v18[5] = a1;
  v13 = v11[77] + *(_DWORD *)(a2 + 40);
  v11[77] = v13;
  if (*(_DWORD *)(*(_QWORD *)v11 + 148) >= v13)
  {
    v15 = v10 & 0x8009010;
    sub_1ACC0B714((uint64_t)v18, a2);
    v16 = v18[0];
    *(_DWORD *)(v18[0] + 308) -= *(_DWORD *)(a2 + 40);
    v17 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a2 + 4) |= v17 & 0x8010;
    *(_DWORD *)(a1 + 40) = v17 | v15;
    return *(int *)(a1 + 36) > 0 || *(_DWORD *)(v16 + 48) > 0;
  }
  else
  {
    sub_1ACBCB308((uint64_t)v11, "Expression tree is too large (maximum depth %d)", a3, a4, a5, a6, a7, a8, *(_DWORD *)(*(_QWORD *)v11 + 148));
    return 1;
  }
}

uint64_t sub_1ACC0F8AC(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int *v10;
  int v11;
  int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t result;
  _QWORD v20[6];

  if (!a2)
    return 0;
  v10 = *(int **)a1;
  v20[0] = v10;
  v20[1] = sub_1ACB75FF4;
  v20[2] = sub_1ACB75AF4;
  v20[3] = 0;
  v20[5] = a1;
  v11 = *(_DWORD *)(a1 + 40);
  v12 = v11 & 0x8009010;
  v13 = v11 & 0xF7FF6FEF;
  *(_DWORD *)(a1 + 40) = v13;
  v14 = *a2;
  if (*a2 < 1)
  {
LABEL_11:
    result = 0;
    *(_DWORD *)(a1 + 40) = v13 | v12;
    return result;
  }
  v15 = 0;
  v20[4] = 0;
  v16 = 2;
  while (1)
  {
    v17 = *(_QWORD *)&a2[v16];
    if (!v17)
      goto LABEL_4;
    v18 = v10[77] + *(_DWORD *)(v17 + 40);
    v10[77] = v18;
    if (*(_DWORD *)(*(_QWORD *)v10 + 148) < v18)
      break;
    sub_1ACC0B714((uint64_t)v20, v17);
    v10 = (int *)v20[0];
    *(_DWORD *)(v20[0] + 308) -= *(_DWORD *)(v17 + 40);
    v13 = *(_DWORD *)(a1 + 40);
    if ((v13 & 0x8009010) != 0)
    {
      *(_DWORD *)(v17 + 4) |= *(_DWORD *)(a1 + 40) & 0x8010;
      v12 |= v13 & 0x8009010;
      v13 &= 0xF7FF6FEF;
      *(_DWORD *)(a1 + 40) = v13;
    }
    if (v10[12] > 0)
      return 2;
    v14 = *a2;
LABEL_4:
    ++v15;
    v16 += 6;
    if (v15 >= v14)
      goto LABEL_11;
  }
  sub_1ACBCB308((uint64_t)v10, "Expression tree is too large (maximum depth %d)", a3, a4, a5, a6, a7, a8, *(_DWORD *)(*(_QWORD *)v10 + 148));
  return 2;
}

void sub_1ACC0FA18(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v11;

  v8 = a5;
  sub_1ACBCB308(a1, "%s prohibited in %s", a3, (uint64_t)a4, a5, a6, a7, a8, a3);
  if (a4)
    *a4 = 121;
  if (v8)
  {
    while (1)
    {
      if ((*(_BYTE *)(v8 + 4) & 3) == 0)
      {
        v11 = *(_DWORD *)(v8 + 56);
        if (v11 > 0)
          break;
      }
      v8 = *(_QWORD *)(v8 + 16);
      if (!v8)
        return;
    }
    *(_DWORD *)(*(_QWORD *)a1 + 84) = v11;
  }
}

unsigned int sub_1ACC0FAD4(unsigned __int8 *a1)
{
  unsigned __int8 *v1;
  int v2;
  double v4;

  v4 = -1.0;
  if (*a1 == 153
    && ((v1 = (unsigned __int8 *)*((_QWORD *)a1 + 1)) == 0
      ? (v2 = 0)
      : (v2 = strlen(*((const char **)a1 + 1)) & 0x3FFFFFFF),
        sub_1ACBA6B1C(v1, &v4, v2, 1),
        v4 <= 1.0))
  {
    return vcvtd_n_s64_f64(v4, 0x1BuLL);
  }
  else
  {
    return -1;
  }
}

void sub_1ACC0FB50(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  const char *v19;
  _BYTE *v20;
  unsigned __int8 *i;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned __int8 *v25;
  unsigned int *v26;
  unsigned __int8 *v27;
  unsigned int *v28;
  int v29;
  _QWORD *v30;
  char *v31;
  unsigned int v32;
  unsigned __int8 *v33;
  uint64_t *v34;
  unsigned __int8 *v35;
  char **v36;
  int v37;
  char v38;
  _QWORD v39[2];

  v10 = a2;
  if (!*(_QWORD *)a3 || *(_BYTE *)(a3 + 32))
  {
    sub_1ACC08940(a1, (_QWORD *)a3, a2, a4, a5, a6, a7, a8);
    if (*(_BYTE *)(a3 + 32) != 89)
      goto LABEL_25;
LABEL_4:
    if (!*(_QWORD *)(a3 + 40) && !*(_QWORD *)(a3 + 48) || (v18 = *(_DWORD **)(a3 + 24)) != 0 && *v18 == 1)
    {
LABEL_25:
      if ((*(_BYTE *)(a4 + 6) & 1) == 0)
      {
LABEL_29:
        *(_QWORD *)(a3 + 80) = a4;
        return;
      }
      if (!*(_QWORD *)(a3 + 72))
      {
        v30 = (_QWORD *)*a1;
        v31 = *(char **)(a4 + 56);
        if (v31 == "row_number")
        {
          v32 = 0;
        }
        else if (v31 == "dense_rank")
        {
          v32 = 1;
        }
        else if (v31 == "rank")
        {
          v32 = 2;
        }
        else if (v31 == "percent_rank")
        {
          v32 = 3;
        }
        else if (v31 == "cume_dist")
        {
          v32 = 4;
        }
        else if (v31 == "ntile")
        {
          v32 = 5;
        }
        else if (v31 == "lead")
        {
          v32 = 6;
        }
        else
        {
          if (v31 != "lag")
            goto LABEL_29;
          v32 = 7;
        }
        v34 = (uint64_t *)(a3 + 40);
        v33 = *(unsigned __int8 **)(a3 + 40);
        if (v33)
          sub_1ACBF8348(v30, v33);
        v35 = *(unsigned __int8 **)(a3 + 48);
        if (v35)
          sub_1ACBF8348(v30, v35);
        v36 = &(&off_1E5C744A0)[3 * v32];
        *v34 = 0;
        *(_QWORD *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 32) = *((_DWORD *)v36 + 2);
        v37 = *((unsigned __int8 *)v36 + 12);
        *(_BYTE *)(a3 + 33) = v37;
        *(_BYTE *)(a3 + 34) = *((_DWORD *)v36 + 4);
        *(_BYTE *)(a3 + 36) = 0;
        if (v37 == 86)
        {
          v39[0] = "1";
          v39[1] = 1;
          *v34 = sub_1ACB6DDF8((uint64_t)v30, 155, (uint64_t)v39, 0);
        }
        goto LABEL_29;
      }
      v19 = "FILTER clause may only be used with aggregate window functions";
    }
    else
    {
      v19 = "RANGE with offset PRECEDING/FOLLOWING requires one ORDER BY expression";
    }
    sub_1ACBCB308((uint64_t)a1, v19, v12, v13, v14, v15, v16, v17, v38);
    goto LABEL_29;
  }
  if (a2)
  {
LABEL_10:
    v20 = *(_BYTE **)v10;
    for (i = *(unsigned __int8 **)a3; ; ++i)
    {
      v22 = *v20;
      v23 = *i;
      if ((_DWORD)v22 == (_DWORD)v23)
      {
        if (!*v20)
        {
          *(_QWORD *)(a3 + 16) = sub_1ACB8B6B8(*a1, *(_QWORD **)(v10 + 16), 0);
          v24 = sub_1ACB8B6B8(*a1, *(_QWORD **)(v10 + 24), 0);
          *(_QWORD *)(a3 + 24) = v24;
          v25 = *(unsigned __int8 **)(v10 + 40);
          if (v25)
            v26 = sub_1ACB8B290(*a1, v25, 0, 0);
          else
            v26 = 0;
          *(_QWORD *)(a3 + 40) = v26;
          v27 = *(unsigned __int8 **)(v10 + 48);
          if (v27)
            v28 = sub_1ACB8B290(*a1, v27, 0, 0);
          else
            v28 = 0;
          *(_QWORD *)(a3 + 48) = v28;
          *(_WORD *)(a3 + 33) = *(_WORD *)(v10 + 33);
          v29 = *(unsigned __int8 *)(v10 + 32);
          *(_BYTE *)(a3 + 32) = v29;
          *(_BYTE *)(a3 + 36) = *(_BYTE *)(v10 + 36);
          if (v29 == 89)
            goto LABEL_4;
          goto LABEL_25;
        }
      }
      else if (byte_1ACCB6333[v22] != byte_1ACCB6333[v23])
      {
        v10 = *(_QWORD *)(v10 + 64);
        if (v10)
          goto LABEL_10;
        break;
      }
      ++v20;
    }
  }
  sub_1ACBCB308((uint64_t)a1, "no such window: %s", a3, a4, a5, a6, a7, a8, *(_QWORD *)a3);
}

uint64_t sub_1ACC0FE54(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  int v17;
  unsigned __int8 *v18;
  _BYTE *v19;
  uint64_t v20;
  int v21;
  _BYTE *i;
  uint64_t v24;
  uint64_t v25;

  if ((*(_WORD *)(a1 + 17) & 3) != 2)
    return 0;
  v4 = 0;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = *v5;
  if (*v5)
  {
    do
    {
      if (v6 == 46)
        break;
      v6 = v5[++v4];
    }
    while (v5[v4]);
  }
  v7 = v4 + 1;
  if (a4)
  {
    if ((_DWORD)v4)
    {
      v8 = v4 + 1;
      v9 = a4;
      v10 = *(_BYTE **)(a1 + 8);
      while (1)
      {
        v11 = *v10;
        if (!*v10)
          break;
        LODWORD(v11) = byte_1ACCB6333[v11];
        v12 = byte_1ACCB6333[*v9];
        if ((_DWORD)v11 != v12)
          goto LABEL_13;
        ++v10;
        ++v9;
        if (--v8 <= 1)
          goto LABEL_14;
      }
      v12 = byte_1ACCB6333[*v9];
LABEL_13:
      if ((_DWORD)v11 != v12)
        return 0;
    }
LABEL_14:
    if (a4[v4])
      return 0;
  }
  v13 = 0;
  v14 = &v5[(v4 + 1)];
  v15 = &v5[v7];
  v16 = *v15;
  if (*v15)
  {
    do
    {
      if (v16 == 46)
        break;
      v16 = v15[++v13];
    }
    while (v15[v13]);
  }
  if (a3)
  {
    if ((_DWORD)v13)
    {
      v17 = v13 + 1;
      v18 = a3;
      v19 = v14;
      while (1)
      {
        v20 = *v19;
        if (!*v19)
          break;
        LODWORD(v20) = byte_1ACCB6333[v20];
        v21 = byte_1ACCB6333[*v18];
        if ((_DWORD)v20 != v21)
          goto LABEL_26;
        ++v19;
        ++v18;
        if (--v17 <= 1)
          goto LABEL_27;
      }
      v21 = byte_1ACCB6333[*v18];
LABEL_26:
      if ((_DWORD)v20 != v21)
        return 0;
    }
LABEL_27:
    if (a3[v13])
      return 0;
  }
  if (a2)
  {
    for (i = &v14[(v13 + 1)]; ; ++i)
    {
      v24 = *i;
      v25 = *a2;
      if ((_DWORD)v24 == (_DWORD)v25)
      {
        if (!*i)
          return 1;
      }
      else if (byte_1ACCB6333[v24] != byte_1ACCB6333[v25])
      {
        return 0;
      }
      ++a2;
    }
  }
  return 1;
}

uint64_t sub_1ACC0FFDC(uint64_t *a1, _DWORD **a2, uint64_t a3, int a4)
{
  uint64_t result;
  int v9;
  _DWORD *v10;
  int v11;
  _QWORD *v12;

  result = sub_1ACBE1124(*a1, 0x50uLL);
  if (result)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_BYTE *)result = -89;
    *(_WORD *)(result + 52) = -1;
    v9 = *(_DWORD *)(a3 + 64);
    *(_DWORD *)(result + 40) = 1;
    *(_DWORD *)(result + 44) = v9;
    *(_DWORD *)(result + 48) = a4;
    *(_QWORD *)(result + 72) = *(_QWORD *)(a3 + 32);
    *(_DWORD *)(result + 4) |= 0x200000u;
    v10 = *a2;
    if (*a2)
    {
      v11 = *v10;
      if (v10[1] > *v10)
      {
        *v10 = v11 + 1;
        v12 = &v10[6 * v11];
        v12[2] = 0;
        v12[3] = 0;
        v12[1] = result;
LABEL_8:
        *a2 = v10;
        return result;
      }
      result = (uint64_t)sub_1ACC2D4F4(*a1, v10, (unsigned __int8 *)result);
    }
    else
    {
      result = (uint64_t)sub_1ACC2D490((_QWORD *)*a1, (unsigned __int8 *)result);
    }
    v10 = (_DWORD *)result;
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_1ACC100B8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  int v15;
  _BYTE *v16;
  char *i;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *j;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _BYTE *k;
  uint64_t v26;
  uint64_t v27;
  char *m;
  uint64_t v29;
  uint64_t v30;

  if (!result)
    return result;
  v4 = result;
  v5 = *(unsigned __int8 *)result;
  if (!*(_BYTE *)result)
  {
    v14 = 0;
    v13 = "sqlite_";
    goto LABEL_30;
  }
  if ((v5 & 0xFFFFFFDF) != 0x53)
  {
    v12 = &byte_1ACCB6333[v5];
    v13 = "sqlite_";
    goto LABEL_29;
  }
  v6 = *(unsigned __int8 *)(result + 1);
  if (!*(_BYTE *)(result + 1))
  {
    v14 = 0;
    v13 = "qlite_";
    goto LABEL_30;
  }
  if ((v6 & 0xFFFFFFDF) != 0x51)
  {
    v12 = &byte_1ACCB6333[v6];
    v13 = "qlite_";
    goto LABEL_29;
  }
  v7 = *(unsigned __int8 *)(result + 2);
  if (!*(_BYTE *)(result + 2))
  {
    v14 = 0;
    v13 = "lite_";
    goto LABEL_30;
  }
  if ((v7 & 0xFFFFFFDF) != 0x4C)
  {
    v12 = &byte_1ACCB6333[v7];
    v13 = "lite_";
    goto LABEL_29;
  }
  v8 = *(unsigned __int8 *)(result + 3);
  if (!*(_BYTE *)(result + 3))
  {
    v14 = 0;
    v13 = "ite_";
    goto LABEL_30;
  }
  if ((v8 & 0xFFFFFFDF) != 0x49)
  {
    v12 = &byte_1ACCB6333[v8];
    v13 = "ite_";
    goto LABEL_29;
  }
  v9 = *(unsigned __int8 *)(result + 4);
  if (!*(_BYTE *)(result + 4))
  {
    v14 = 0;
    v13 = "te_";
    goto LABEL_30;
  }
  if ((v9 & 0xFFFFFFDF) != 0x54)
  {
    v12 = &byte_1ACCB6333[v9];
    v13 = "te_";
    goto LABEL_29;
  }
  v10 = *(unsigned __int8 *)(result + 5);
  if (!*(_BYTE *)(result + 5))
  {
    v14 = 0;
    v13 = "e_";
    goto LABEL_30;
  }
  if ((v10 & 0xFFFFFFDF) != 0x45)
  {
    v12 = &byte_1ACCB6333[v10];
    v13 = "e_";
    goto LABEL_29;
  }
  v11 = *(unsigned __int8 *)(result + 6);
  if (!*(_BYTE *)(result + 6))
  {
    v14 = 0;
    v13 = "_";
LABEL_30:
    if (v14 != byte_1ACCB6333[*v13])
      return 0;
    goto LABEL_31;
  }
  if ((_DWORD)v11 != 95)
  {
    v12 = &byte_1ACCB6333[v11];
    v13 = "_";
LABEL_29:
    v14 = *v12;
    goto LABEL_30;
  }
LABEL_31:
  v15 = strcmp((const char *)(*(_QWORD *)a2 + 7), "temp_master");
  v16 = (_BYTE *)(v4 + 7);
  if (v15)
  {
    for (i = "schema"; ; ++i)
    {
      v18 = *v16;
      v19 = *i;
      if ((_DWORD)v18 == (_DWORD)v19)
      {
        if (!*v16)
          return 1;
      }
      else if (byte_1ACCB6333[v18] != byte_1ACCB6333[v19])
      {
        return 0;
      }
      ++v16;
    }
  }
  v20 = "temp_schema";
  for (j = (_BYTE *)(v4 + 7); ; ++j)
  {
    v22 = *j;
    v23 = *v20;
    if ((_DWORD)v22 != (_DWORD)v23)
      break;
    if (!*j)
      return 1;
LABEL_40:
    ++v20;
  }
  if (byte_1ACCB6333[v22] == byte_1ACCB6333[v23])
    goto LABEL_40;
  if (a3)
  {
    v24 = "master";
    for (k = (_BYTE *)(v4 + 7); ; ++k)
    {
      v26 = *k;
      v27 = *v24;
      if ((_DWORD)v26 == (_DWORD)v27)
      {
        if (!*k)
          return 1;
      }
      else if (byte_1ACCB6333[v26] != byte_1ACCB6333[v27])
      {
        for (m = "schema"; ; ++m)
        {
          v29 = *v16;
          v30 = *m;
          if ((_DWORD)v29 == (_DWORD)v30)
          {
            if (!*v16)
              return 1;
          }
          else if (byte_1ACCB6333[v29] != byte_1ACCB6333[v30])
          {
            return 0;
          }
          ++v16;
        }
      }
      ++v24;
    }
  }
  return 0;
}

uint64_t sub_1ACC10384(uint64_t *a1, uint64_t a2, char *__s)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (__s)
  {
    v6 = strlen(__s) & 0x3FFFFFFF;
    if (v6)
    {
      v7 = sub_1ACBE1124(*a1, v6 + 81);
      if (v7)
      {
        v8 = v7;
        *(_OWORD *)(v7 + 48) = 0u;
        *(_OWORD *)(v7 + 64) = 0u;
        *(_OWORD *)(v7 + 16) = 0u;
        *(_OWORD *)(v7 + 32) = 0u;
        *(_OWORD *)v7 = 0u;
        *(_BYTE *)v7 = 113;
        *(_WORD *)(v7 + 52) = -1;
        v9 = v7 + 80;
        *(_QWORD *)(v7 + 8) = v7 + 80;
        memcpy((void *)(v7 + 80), __s, v6);
        *(_BYTE *)(v9 + v6) = 0;
        *(_DWORD *)(v8 + 40) = 1;
        *(_QWORD *)(v8 + 16) = a2;
        *(_DWORD *)(v8 + 4) |= 0x2200u;
        return v8;
      }
    }
  }
  return a2;
}

uint64_t sub_1ACC10440(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 168)
    a2[2] += *(_BYTE *)(a1 + 40);
  return 0;
}

uint64_t sub_1ACC10464(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  _QWORD *v3;
  unsigned int *v4;
  uint64_t v5;
  int *v6;
  int v7;
  uint64_t v8;
  int *v9;
  int v10;
  __int16 v11;

  v2 = *a2;
  if (v2 == 169 || v2 == 167)
  {
    v3 = *(_QWORD **)(a1 + 40);
    v4 = (unsigned int *)v3[1];
    if (v4)
    {
      v5 = *v4;
      if ((int)v5 >= 1)
      {
        v6 = (int *)(v4 + 18);
        while (1)
        {
          v7 = *v6;
          v6 += 26;
          if (*((_DWORD *)a2 + 11) == v7)
            break;
          if (!--v5)
            goto LABEL_8;
        }
        v11 = 1;
        goto LABEL_14;
      }
    }
LABEL_8:
    v8 = v3[2];
    if (v8 < 1)
    {
LABEL_12:
      v11 = 2;
LABEL_14:
      *(_WORD *)(a1 + 36) |= v11;
      return 0;
    }
    v9 = (int *)v3[3];
    while (1)
    {
      v10 = *v9++;
      if (v10 == *((_DWORD *)a2 + 11))
        break;
      if (!--v8)
        goto LABEL_12;
    }
  }
  return 0;
}

uint64_t sub_1ACC104F4(uint64_t a1, uint64_t a2)
{
  int *v2;
  int v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;

  v2 = *(int **)(a2 + 40);
  v3 = *v2;
  if (*v2)
  {
    v4 = *(uint64_t **)(a1 + 40);
    v6 = v4[2];
    v5 = (_QWORD *)v4[3];
    v7 = v6 + v3;
    v4[2] = v7;
    v8 = *v4;
    v9 = 4 * v7;
    if (v5)
    {
      if (*(_QWORD *)(v8 + 512) > (unint64_t)v5)
      {
        if (*(_QWORD *)(v8 + 496) <= (unint64_t)v5)
        {
          if (v9 < 0x81)
            goto LABEL_13;
        }
        else if (*(_QWORD *)(v8 + 504) <= (unint64_t)v5 && v9 <= *(unsigned __int16 *)(v8 + 438))
        {
LABEL_13:
          v4[3] = (uint64_t)v5;
          if (v3 >= 1)
          {
            v11 = 0;
            v12 = 18;
            do
            {
              *((_DWORD *)v5 + v6 + v11++) = v2[v12];
              v12 += 26;
            }
            while (v11 < *v2);
          }
          return 0;
        }
      }
      v5 = (_QWORD *)sub_1ACBE11D0(v8, v5, v9);
      if (v5)
      {
LABEL_12:
        v3 = *v2;
        goto LABEL_13;
      }
    }
    else
    {
      v5 = (_QWORD *)sub_1ACBE1124(v8, 4 * v7);
      if (v5)
        goto LABEL_12;
    }
    v4[2] = 0;
    return 2;
  }
  return 0;
}

uint64_t sub_1ACC105E0(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(result + 40);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
    *(_QWORD *)(v2 + 16) = v3 - **(int **)(a2 + 40);
  return result;
}

_BYTE *sub_1ACC10600(_BYTE *result, uint64_t a2, uint64_t a3)
{
  _BYTE *v5;
  _BYTE *v6;
  void *v7;
  __int128 v8;
  __int128 v9;

  if (!*(_BYTE *)(*(_QWORD *)result + 103) && (*(_BYTE *)(a2 + 4) & 0x80) == 0)
  {
    v5 = result;
    v8 = 0u;
    v9 = 0u;
    v6 = result;
    v7 = sub_1ACC10CE0;
    if (result[34])
    {
      *(_QWORD *)&v8 = sub_1ACC10CE8;
      sub_1ACB73B30(&v6, (_QWORD *)a2);
    }
    *(_QWORD *)&v8 = sub_1ACB73DC4;
    *((_QWORD *)&v8 + 1) = sub_1ACC0B9B4;
    WORD2(v9) = 0;
    result = (_BYTE *)sub_1ACB73B30(&v6, (_QWORD *)a2);
    if (!*((_DWORD *)v5 + 12))
    {
      *(_QWORD *)&v8 = sub_1ACB75AF4;
      *((_QWORD *)&v8 + 1) = 0;
      v6 = v5;
      v7 = sub_1ACB75FF4;
      *(_QWORD *)&v9 = 0;
      *((_QWORD *)&v9 + 1) = a3;
      result = (_BYTE *)sub_1ACB73B30(&v6, (_QWORD *)a2);
      if (!*((_DWORD *)v5 + 12))
      {
        v9 = 0uLL;
        *(_QWORD *)&v8 = sub_1ACC1243C;
        *((_QWORD *)&v8 + 1) = sub_1ACB78598;
        v6 = v5;
        v7 = sub_1ACC10CE0;
        return (_BYTE *)sub_1ACB73B30(&v6, (_QWORD *)a2);
      }
    }
  }
  return result;
}

void sub_1ACC10700(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  const char *v9;

  if ((a2[5] & 2) != 0)
  {
    sub_1ACBCB308(a1, "all VALUES must have the same number of terms", a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    if ((*a2 + 121) > 2u)
      v9 = "UNION";
    else
      v9 = off_1E5C75768[(char)(*a2 + 121)];
    sub_1ACBCB308(a1, "SELECTs to the left and right of %s do not have the same number of result columns", a3, a4, a5, a6, a7, a8, (char)v9);
  }
}

uint64_t sub_1ACC10774(unsigned __int8 *a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _WORD *v14;
  uint64_t v15;
  __int16 v16;
  _WORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  int v22;
  unsigned int *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unsigned __int8 *i;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _BOOL4 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BOOL4 v51;
  int *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  __int16 *v58;
  __int16 v59;
  char v60;
  int *v61;
  uint64_t v62;
  int v64;
  _DWORD *v65;
  int v66;
  unsigned __int8 *v67;
  uint64_t v68;
  int *v69;
  __int128 v70;
  __int128 v71;

  v8 = (unsigned int *)a2[9];
  if (!v8)
    return 0;
  v9 = a1;
  v10 = *(_QWORD *)a1;
  v11 = *v8;
  if ((int)v11 > *(_DWORD *)(*(_QWORD *)a1 + 144))
  {
    sub_1ACBCB308((uint64_t)a1, "too many terms in ORDER BY clause", a3, a4, a5, a6, a7, a8, v60);
    return 1;
  }
  if ((int)v11 >= 1)
  {
    if ((_DWORD)v11 == 1)
    {
      v13 = 0;
    }
    else
    {
      v13 = v11 & 0xFFFFFFFE;
      v14 = (_WORD *)((char *)v8 + 49);
      v15 = v13;
      do
      {
        v16 = *v14 & 0xFFFB;
        *(v14 - 12) &= ~4u;
        *v14 = v16;
        v14 += 24;
        v15 -= 2;
      }
      while (v15);
      if (v13 == v11)
        goto LABEL_13;
    }
    v17 = (_WORD *)((char *)&v8[6 * v13 + 6] + 1);
    v18 = v11 - v13;
    do
    {
      *v17 &= ~4u;
      v17 += 12;
      --v18;
    }
    while (v18);
  }
LABEL_13:
  a2[11] = 0;
  v19 = (_QWORD *)a2[10];
  if (v19)
  {
    do
    {
      v20 = v19;
      v19[11] = a2;
      v19 = (_QWORD *)v19[10];
      a2 = v20;
    }
    while (v19);
  }
  else
  {
    v20 = a2;
  }
  v62 = v10;
LABEL_22:
  if ((int)v11 < 1)
    return 0;
  v64 = 0;
  v22 = 0;
  v65 = (_DWORD *)v20[4];
  v23 = v8 + 2;
  while (1)
  {
    v66 = -1;
    if ((*(_WORD *)((_BYTE *)v23 + 17) & 4) == 0)
    {
      v24 = *(_QWORD *)v23;
      if (*(_QWORD *)v23)
        break;
    }
LABEL_26:
    ++v22;
    v23 += 6;
    v11 = *v8;
    if (v22 >= (int)v11)
    {
      v20 = (_QWORD *)v20[11];
      if (v20)
        v21 = v64 == 0;
      else
        v21 = 1;
      if (v21)
      {
        if ((int)v11 >= 1)
        {
          v57 = 0;
          v58 = (__int16 *)((char *)v8 + 25);
          while (1)
          {
            v59 = *v58;
            v58 += 12;
            if ((v59 & 4) == 0)
              break;
            result = 0;
            if (v11 == ++v57)
              return result;
          }
          sub_1ACBCB308((uint64_t)v9, "%r ORDER BY term does not match any column in the result set", a3, a4, a5, a6, a7, a8, v57 + 1);
          return 1;
        }
        return 0;
      }
      goto LABEL_22;
    }
  }
  while (1)
  {
    v25 = *(_DWORD *)(v24 + 4);
    if ((v25 & 0x82000) == 0)
      break;
    if ((v25 & 0x80000) != 0)
    {
      v24 = *(_QWORD *)(*(_QWORD *)(v24 + 32) + 8);
      if (!v24)
        goto LABEL_26;
    }
    else
    {
      v24 = *(_QWORD *)(v24 + 16);
      if (!v24)
        goto LABEL_26;
    }
  }
  if (sub_1ACC12444(v24, &v66))
  {
    v26 = v66;
    if (v66 >= 1 && v66 <= *v65)
      goto LABEL_60;
    sub_1ACBCB308((uint64_t)v9, "%r %s BY term out of range - should be between 1 and %d", a3, a4, a5, a6, a7, a8, v22 + 1);
    while (1)
    {
      if ((*(_BYTE *)(v24 + 4) & 3) == 0)
      {
        v56 = *(_DWORD *)(v24 + 56);
        if (v56 > 0)
          break;
      }
      v24 = *(_QWORD *)(v24 + 16);
      if (!v24)
        return 1;
    }
    *(_DWORD *)(*(_QWORD *)v9 + 84) = v56;
    return 1;
  }
  if (*(_BYTE *)v24 != 59 || (v28 = *v65, (int)v28 < 1))
  {
LABEL_56:
    v35 = sub_1ACB8B290(v10, (unsigned __int8 *)v24, 0, 0);
    v36 = (unsigned __int8 *)v35;
    v26 = 0;
    if (*(_BYTE *)(v10 + 103))
    {
      if (!v35)
      {
LABEL_59:
        if (v26 >= 1)
          goto LABEL_60;
LABEL_55:
        v64 = 1;
        goto LABEL_26;
      }
LABEL_58:
      sub_1ACBF8348((_QWORD *)v10, v36);
      goto LABEL_59;
    }
    v41 = (int *)v20[4];
    v70 = 0u;
    v71 = 0u;
    v42 = v20[5];
    v67 = v9;
    v68 = v42;
    v69 = v41;
    LODWORD(v71) = 524417;
    v43 = *(_QWORD *)v9;
    v44 = *(_BYTE *)(*(_QWORD *)v9 + 107);
    *(_BYTE *)(v43 + 107) = 1;
    v45 = sub_1ACC0F790((uint64_t)&v67, (uint64_t)v35, a3, a4, a5, a6, a7, a8);
    *(_BYTE *)(v43 + 107) = v44;
    if (v45 || *v41 < 1)
    {
LABEL_66:
      v26 = 0;
      v66 = 0;
    }
    else
    {
      v46 = 0;
      v47 = 2;
      while (sub_1ACC0ABAC(0, *(unsigned __int8 **)&v41[v47], v36, 0xFFFFFFFFLL) >= 2)
      {
        ++v46;
        v47 += 6;
        if (v46 >= *v41)
          goto LABEL_66;
      }
      v26 = v46 + 1;
      v9 = a1;
      if ((v46 & 0x80000000) != 0 || a1[302] <= 1u)
      {
LABEL_68:
        v10 = v62;
        if (!v36)
          goto LABEL_59;
        goto LABEL_58;
      }
      v61 = (int *)v20[4];
      v70 = 0u;
      v71 = 0u;
      v48 = v20[5];
      v67 = a1;
      v68 = v48;
      v69 = v61;
      LODWORD(v71) = 524417;
      v49 = *(_QWORD *)a1;
      v50 = *(_BYTE *)(*(_QWORD *)a1 + 107);
      *(_BYTE *)(v49 + 107) = 1;
      v51 = sub_1ACC0F790((uint64_t)&v67, v24, a3, a4, a5, a6, a7, a8);
      v52 = v61;
      *(_BYTE *)(v49 + 107) = v50;
      if (!v51 && *v61 >= 1)
      {
        v53 = 0;
        v54 = 2;
        do
        {
          v55 = sub_1ACC0ABAC(0, *(unsigned __int8 **)&v52[v54], (unsigned __int8 *)v24, 0xFFFFFFFFLL);
          v52 = v61;
          if (v55 < 2)
            break;
          ++v53;
          v54 += 6;
        }
        while (v53 < *v61);
      }
    }
    v9 = a1;
    goto LABEL_68;
  }
  v29 = 0;
  v30 = *(_QWORD *)(v24 + 8);
  while (1)
  {
    if ((*(_WORD *)((_BYTE *)&v65[6 * v29 + 6] + 1) & 3) == 0)
    {
      v31 = *(_BYTE **)&v65[6 * v29 + 4];
      if (v31)
      {
        if (v30)
        {
          for (i = *(unsigned __int8 **)(v24 + 8); ; ++i)
          {
            v33 = *v31;
            v34 = *i;
            if ((_DWORD)v33 == (_DWORD)v34)
            {
              if (!*v31)
                goto LABEL_54;
            }
            else if (byte_1ACCB6333[v33] != byte_1ACCB6333[v34])
            {
              goto LABEL_45;
            }
            ++v31;
          }
        }
        goto LABEL_45;
      }
      if (!v30)
        break;
    }
LABEL_45:
    if (++v29 == v28)
      goto LABEL_56;
  }
LABEL_54:
  v26 = v29 + 1;
  if ((int)v29 + 1 < 1)
    goto LABEL_55;
LABEL_60:
  if (v9[302] > 1u)
  {
LABEL_25:
    *(_WORD *)((char *)v23 + 17) |= 4u;
    goto LABEL_26;
  }
  v67 = 0;
  v68 = 0;
  v37 = sub_1ACB6DDF8(v10, 155, (uint64_t)&v67, 0);
  if (v37)
  {
    *(_DWORD *)(v37 + 4) |= 0x800u;
    *(_DWORD *)(v37 + 8) = v26;
    v38 = *(_QWORD *)v23;
    v39 = (uint64_t *)v23;
    if (*(_QWORD *)v23 != v24)
    {
      do
      {
        v40 = v38;
        v38 = *(_QWORD *)(v38 + 16);
      }
      while (*(_BYTE *)v38 == 113);
      v39 = (uint64_t *)(v40 + 16);
    }
    *v39 = v37;
    sub_1ACBF8348((_QWORD *)v10, (unsigned __int8 *)v24);
    *((_WORD *)v23 + 10) = v26;
    goto LABEL_25;
  }
  return 1;
}

uint64_t sub_1ACC10CE0()
{
  return 0;
}

uint64_t sub_1ACC10CE8(uint64_t **a1, unsigned __int8 *a2)
{
  _QWORD *v2;
  unsigned int *v4;
  unsigned __int8 *v5;
  int v6;
  uint64_t result;
  int v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  _OWORD *v15;
  int *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  _QWORD v25[2];
  _QWORD v26[2];

  v2 = a2 + 80;
  if (*((_QWORD *)a2 + 10))
  {
    v4 = (unsigned int *)*((_QWORD *)a2 + 9);
    if (v4)
    {
      v5 = a2;
      while (1)
      {
        v6 = *v5;
        if (v6 != 138 && v6 != 135)
          break;
        v5 = (unsigned __int8 *)*((_QWORD *)v5 + 10);
        if (!v5)
          return 0;
      }
      if (!*((_WORD *)v4 + 14))
      {
        v8 = *v4 + 1;
        v9 = &v4[6 * *v4 - 4];
        while (--v8 >= 1)
        {
          v10 = *(_QWORD *)v9;
          v9 -= 6;
          if ((*(_BYTE *)(v10 + 5) & 2) != 0)
          {
            v11 = *a1;
            v12 = **a1;
            v13 = sub_1ACB5733C(v12, 0x80uLL);
            if (!v13)
              return 2;
            v15 = v13;
            v25[0] = 0;
            v25[1] = 0;
            v16 = sub_1ACB6E09C((uint64_t)v11, 0, 0, 0, (uint64_t)v25, (uint64_t)v13, 0, v14);
            if (!v16)
              return 2;
            v17 = *(_OWORD *)a2;
            v18 = *((_OWORD *)a2 + 1);
            v19 = *((_OWORD *)a2 + 3);
            v15[2] = *((_OWORD *)a2 + 2);
            v15[3] = v19;
            *v15 = v17;
            v15[1] = v18;
            v20 = *((_OWORD *)a2 + 4);
            v21 = *((_OWORD *)a2 + 5);
            v22 = *((_OWORD *)a2 + 7);
            v15[6] = *((_OWORD *)a2 + 6);
            v15[7] = v22;
            v15[4] = v20;
            v15[5] = v21;
            *((_QWORD *)a2 + 5) = v16;
            v26[0] = 0;
            v26[1] = 0;
            v23 = (unsigned __int8 *)sub_1ACB6DDF8(v12, 180, (uint64_t)v26, 0);
            v24 = sub_1ACC2D490((_QWORD *)*v11, v23);
            result = 0;
            *((_QWORD *)a2 + 4) = v24;
            *a2 = -118;
            *((_QWORD *)a2 + 6) = 0;
            *((_QWORD *)v15 + 7) = 0;
            *((_QWORD *)v15 + 8) = 0;
            *((_QWORD *)v15 + 9) = 0;
            *((_QWORD *)a2 + 13) = 0;
            *((_QWORD *)a2 + 15) = 0;
            *v2 = 0;
            v2[1] = 0;
            *((_DWORD *)a2 + 1) = *((_DWORD *)a2 + 1) & 0xFFFEFEFF | 0x10000;
            *(_QWORD *)(*((_QWORD *)v15 + 10) + 88) = v15;
            *((_QWORD *)v15 + 12) = 0;
            return result;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1ACC10E6C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE **v12;

  if (*(_QWORD *)a3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v9 = (uint64_t *)(v8 + 24);
    v10 = 0xFFFFFFFF00000000;
    do
    {
      v11 = *v9;
      v9 += 4;
      v10 += 0x100000000;
    }
    while (v11 != *(_QWORD *)a3);
    v12 = (_BYTE **)(v8 + (v10 >> 27));
  }
  else
  {
    v12 = (_BYTE **)(a3 + 8);
  }
  return sub_1ACB8D488(a1, a2, *(char **)(a3 + 16), *v12, a5, a6, a7, a8);
}

uint64_t sub_1ACC10EB0(_DWORD *a1, int *a2, _WORD *a3, _QWORD *a4)
{
  _WORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _DWORD *v17;
  unsigned __int8 **v18;
  uint64_t v19;
  int *v20;
  int *v21;
  unsigned __int8 **v22;
  const char *v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  const char **v29;
  uint64_t i;
  uint64_t v31;
  uint64_t v32;
  uint64_t j;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  char v38;
  int v39;
  size_t v40;
  uint64_t *v41;
  _DWORD *v42;
  int v43;
  unsigned int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  _BYTE *v48;
  unsigned __int8 *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(_QWORD);
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t k;
  uint64_t result;
  _QWORD **v72;
  char v73;
  unsigned __int8 **v74;
  _WORD *v75;
  size_t __n;
  uint64_t v77;
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int __buf;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  __buf = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  if (!a2)
  {
    v15 = 0;
    LODWORD(v37) = 0;
    *a3 = 0;
    *a4 = 0;
    v17 = a1 + 12;
    goto LABEL_111;
  }
  v8 = *a2;
  if (!v7)
  {
    v15 = (_QWORD *)sub_1ACB5D828(16 * v8);
    if (!v15)
      goto LABEL_5;
    goto LABEL_4;
  }
  v15 = (_QWORD *)sub_1ACBE1124(v7, 16 * v8);
  if (v15)
LABEL_4:
    bzero(v15, 16 * v8);
LABEL_5:
  if ((int)v8 >= 0x7FFF)
    v16 = 0x7FFFLL;
  else
    v16 = v8;
  *v5 = v16;
  *a4 = v15;
  v17 = a1 + 12;
  if ((int)v8 < 1)
  {
    LODWORD(v37) = 0;
    goto LABEL_111;
  }
  v75 = v5;
  v18 = (unsigned __int8 **)v15;
  v19 = 0;
  v74 = v18;
  v20 = a2;
  v77 = v16;
LABEL_11:
  if (!*v17)
  {
    v21 = &v20[6 * v19];
    v22 = (unsigned __int8 **)(v21 + 2);
    v23 = (const char *)*((_QWORD *)v21 + 2);
    v78 = (uint64_t)(v21 + 2);
    if (!v23 || (*(_WORD *)((_BYTE *)&v20[6 * v19 + 6] + 1) & 3) != 0)
    {
      v24 = *v22;
      if (*v22)
      {
        while (1)
        {
          v25 = *((_DWORD *)v24 + 1);
          if ((v25 & 0x82000) == 0)
            break;
          if ((v25 & 0x80000) != 0)
          {
            v24 = *(unsigned __int8 **)(*((_QWORD *)v24 + 4) + 8);
            if (!v24)
              break;
          }
          else
          {
            v24 = (unsigned __int8 *)*((_QWORD *)v24 + 2);
            if (!v24)
              break;
          }
        }
      }
      while (1)
      {
        v26 = *v24;
        if (v26 != 141)
          break;
        v24 = (unsigned __int8 *)*((_QWORD *)v24 + 3);
      }
      if (v26 == 59)
      {
        v29 = (const char **)(v24 + 8);
        goto LABEL_32;
      }
      if (v26 != 167 || (v24[7] & 3) != 0 || (v27 = *((_QWORD *)v24 + 9)) == 0)
      {
LABEL_33:
        if (!v23)
        {
LABEL_44:
          v36 = (unsigned __int8 *)sub_1ACB6DDD0(v7, "column%d", v9, v10, v11, v12, v13, v14, v19 + 1);
          __buf = 0;
          v37 = v77;
          if (!v36)
            goto LABEL_45;
          goto LABEL_50;
        }
        goto LABEL_34;
      }
      v28 = *((_DWORD *)v24 + 12);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_30:
        v29 = (const char **)(*(_QWORD *)(v27 + 8) + 16 * v28);
LABEL_32:
        v23 = *v29;
        goto LABEL_33;
      }
      if ((*(__int16 *)(v27 + 52) & 0x80000000) == 0)
      {
        v28 = *(unsigned __int16 *)(v27 + 52);
        goto LABEL_30;
      }
      v23 = "rowid";
    }
LABEL_34:
    for (i = 0; ; ++i)
    {
      v31 = v23[i];
      v32 = aTrue[i];
      if ((_DWORD)v31 == (_DWORD)v32)
      {
        if (!v23[i])
          goto LABEL_44;
      }
      else if (byte_1ACCB6333[v31] != byte_1ACCB6333[v32])
      {
        for (j = 0; ; ++j)
        {
          v34 = v23[j];
          v35 = aFalse[j];
          if ((_DWORD)v34 == (_DWORD)v35)
          {
            if (!v23[j])
              goto LABEL_44;
          }
          else if (byte_1ACCB6333[v34] != byte_1ACCB6333[v35])
          {
            v40 = strlen(v23);
            __n = v40 + 1;
            if (v7)
            {
              v36 = (unsigned __int8 *)sub_1ACBE1124(v7, v40 + 1);
              if (v36)
                goto LABEL_48;
LABEL_103:
              __buf = 0;
              v37 = v77;
              goto LABEL_45;
            }
            v36 = (unsigned __int8 *)sub_1ACB5D828(v40 + 1);
            if (!v36)
              goto LABEL_103;
LABEL_48:
            memcpy(v36, v23, __n);
            __buf = 0;
            v37 = v77;
LABEL_50:
            while (2)
            {
              v41 = &v81;
              v42 = (_DWORD *)&v80 + 1;
              if (v82)
              {
                v43 = *v36;
                if (*v36)
                {
                  v44 = 0;
                  v45 = v36 + 1;
                  do
                  {
                    v44 = -1640531535 * (v44 + byte_1ACCB6333[v43]);
                    v46 = *v45++;
                    v43 = v46;
                  }
                  while (v46);
                }
                else
                {
                  v44 = 0;
                }
                v42 = (_DWORD *)(v82 + 16 * (v44 % v80));
                v41 = (uint64_t *)(v42 + 2);
              }
              v47 = *v42;
              if (!*v42)
                goto LABEL_65;
              while (2)
              {
                v41 = (uint64_t *)*v41;
                v48 = (_BYTE *)v41[3];
                v49 = v36;
                while (2)
                {
                  v50 = *v48;
                  v51 = *v49;
                  if ((_DWORD)v50 == (_DWORD)v51)
                  {
                    if (!*v48)
                      goto LABEL_66;
                    goto LABEL_60;
                  }
                  if (byte_1ACCB6333[v50] == byte_1ACCB6333[v51])
                  {
LABEL_60:
                    ++v48;
                    ++v49;
                    continue;
                  }
                  break;
                }
                if (--v47)
                  continue;
                break;
              }
LABEL_65:
              v41 = &qword_1EECAD260;
LABEL_66:
              v52 = v41[2];
              if (v52)
              {
                if ((*(_WORD *)(v52 + 17) & 0x80) != 0)
                  *((_WORD *)v18 + 7) |= 0x400u;
                v53 = strlen((const char *)v36);
                v60 = v53;
                if ((v53 & 0x3FFFFFFF) != 0)
                {
                  v61 = v53 & 0x3FFFFFFF;
                  while (v61-- > 1)
                  {
                    v63 = v36[v61];
                    if ((unint64_t)(v63 - 58) <= 0xFFFFFFFFFFFFFFF5)
                      goto LABEL_74;
                  }
                  LOBYTE(v61) = 0;
                  LODWORD(v63) = *v36;
LABEL_74:
                  if ((_DWORD)v63 == 58)
                    v60 = v61;
                }
                ++__buf;
                v36 = (unsigned __int8 *)sub_1ACB6DDD0(v7, "%.*z:%u", v54, v55, v56, v57, v58, v59, v60);
                v64 = *(_QWORD *)a1;
                if (*(_DWORD *)(*(_QWORD *)a1 + 424))
                {
                  ++a1[12];
                  a1[6] = 9;
                }
                v65 = *(unsigned int (**)(_QWORD))(v64 + 544);
                if (v65)
                {
                  v66 = a1[36] + 1;
                  a1[36] = v66;
                  if (v66 >= *(_DWORD *)(v64 + 560))
                  {
                    if (v65(*(_QWORD *)(v64 + 552)))
                    {
                      ++a1[12];
                      a1[6] = 9;
                    }
                    a1[36] = 0;
                  }
                }
                if (__buf >= 4)
                {
                  sqlite3_initialize();
                  arc4random_buf(&__buf, 4uLL);
                }
                if (v36)
                  continue;
LABEL_45:
                v36 = 0;
                v38 = 0;
                *v18 = 0;
                LOBYTE(v39) = 1;
              }
              else
              {
                *v18 = v36;
                v39 = *v36;
                if (*v36)
                {
                  v38 = 0;
                  v67 = 1;
                  do
                  {
                    v38 += byte_1ACCB6333[v39];
                    v39 = v36[v67++];
                  }
                  while (v39);
                }
                else
                {
                  v38 = 0;
                }
              }
              break;
            }
            v20 = a2;
            *((_BYTE *)v18 + 11) = v38;
            if ((a2[6 * v19 + 6] & 0x10000) != 0)
              *((_WORD *)v18 + 7) |= 0x400u;
            if ((v39 & 1) == 0)
            {
              v68 = sub_1ACB57390((uint64_t)&v80, v36, v78);
              v20 = a2;
              if (v68 == v78 && !*(_BYTE *)(v7 + 103) && !*(_BYTE *)(v7 + 104))
              {
                *(_BYTE *)(v7 + 103) = 1;
                if (*(int *)(v7 + 220) >= 1)
                  *(_DWORD *)(v7 + 424) = 1;
                ++*(_DWORD *)(v7 + 432);
                *(_WORD *)(v7 + 436) = 0;
                v69 = *(_QWORD *)(v7 + 344);
                if (v69)
                {
                  sub_1ACBCB308(v69, "out of memory", v9, v10, v11, v12, v13, v14, v73);
                  v20 = a2;
                  for (k = *(_QWORD *)(v7 + 344); ; ++*(_DWORD *)(k + 48))
                  {
                    *(_DWORD *)(k + 24) = 7;
                    k = *(_QWORD *)(k + 256);
                    if (!k)
                      break;
                  }
                }
              }
            }
            ++v19;
            v18 += 2;
            v17 = a1 + 12;
            if (v19 == v37)
              goto LABEL_110;
            goto LABEL_11;
          }
        }
      }
    }
  }
  LODWORD(v37) = v19;
LABEL_110:
  v5 = v75;
  v15 = v74;
LABEL_111:
  result = sub_1ACBFC410((uint64_t)&v80);
  if (*v17)
  {
    if ((_DWORD)v37)
    {
      v37 = v37;
      v72 = (_QWORD **)v15;
      do
      {
        if (*v72)
          sub_1ACBE0F9C((_QWORD *)v7, *v72);
        v72 += 2;
        --v37;
      }
      while (v37);
    }
    else if (!v15)
    {
LABEL_119:
      *a4 = 0;
      *v5 = 0;
      return result;
    }
    result = (uint64_t)sub_1ACBE0F9C((_QWORD *)v7, v15);
    goto LABEL_119;
  }
  return result;
}

uint64_t sub_1ACC114E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  _QWORD *v11;
  _BYTE *v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  unsigned __int8 *v16;
  int v17;
  __int16 *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  uint64_t v28;
  uint64_t *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _DWORD *v39;
  _BYTE *v40;
  unsigned __int8 *i;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  __int16 v46;
  _QWORD *v48;

  v10 = *(_QWORD *)a1;
  if (*(_BYTE *)(a2 + 63) == 1)
  {
    ++*(_DWORD *)(v10 + 72);
    v11 = *(_QWORD **)(a2 + 80);
    if (v11)
    {
      while (*v11 != v10)
      {
        v11 = (_QWORD *)v11[5];
        if (!v11)
          goto LABEL_5;
      }
      v28 = 0;
      goto LABEL_28;
    }
LABEL_5:
    v12 = **(_BYTE ***)(a2 + 72);
    v13 = *(_QWORD *)(v10 + 584);
    if (v13)
    {
      v14 = *v12;
      if (*v12)
      {
        v15 = 0;
        v16 = v12 + 1;
        do
        {
          v15 = -1640531535 * (v15 + byte_1ACCB6333[v14]);
          v17 = *v16++;
          v14 = v17;
        }
        while (v17);
      }
      else
      {
        v15 = 0;
      }
      v39 = (_DWORD *)(v13 + 16 * (v15 % *(_DWORD *)(v10 + 568)));
      v29 = (uint64_t *)(v39 + 2);
      v30 = *v39;
      if (v30)
      {
        while (1)
        {
LABEL_32:
          v29 = (uint64_t *)*v29;
          v40 = (_BYTE *)v29[3];
          for (i = **(unsigned __int8 ***)(a2 + 72); ; ++i)
          {
            v42 = *v40;
            v43 = *i;
            if ((_DWORD)v42 != (_DWORD)v43)
              break;
            if (!*v40)
              goto LABEL_21;
LABEL_34:
            ++v40;
          }
          if (byte_1ACCB6333[v42] == byte_1ACCB6333[v43])
            goto LABEL_34;
          if (!--v30)
          {
            v29 = &qword_1EECAD260;
            goto LABEL_21;
          }
        }
      }
    }
    else
    {
      v29 = (uint64_t *)(v10 + 576);
      v30 = *(_DWORD *)(v10 + 572);
      if (v30)
        goto LABEL_32;
    }
    v29 = &qword_1EECAD260;
LABEL_21:
    v31 = v29[2];
    if (v31)
    {
      v48 = 0;
      v28 = sub_1ACBFEC54(v10, a2, v31, *(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v31 + 16), (void **)&v48, a6, a7, a8);
      v38 = v48;
      if ((_DWORD)v28)
      {
        sub_1ACBCB308(a1, "%s", v32, v33, v34, v35, v36, v37, (char)v48);
        if (!*(_BYTE *)(v10 + 107))
          *(_DWORD *)(a1 + 24) = v28;
      }
      if (v38)
        sub_1ACBE0F9C((_QWORD *)v10, v38);
    }
    else
    {
      sub_1ACBCB308(a1, "no such module: %s", 0, a4, a5, a6, a7, a8, **(_QWORD **)(a2 + 72));
      v28 = 1;
    }
LABEL_28:
    --*(_DWORD *)(v10 + 72);
    return v28;
  }
  v18 = (__int16 *)(a2 + 54);
  if (*(__int16 *)(a2 + 54) < 0)
  {
    sub_1ACBCB308(a1, "view %s is circularly defined", a3, a4, a5, a6, a7, a8, *(_QWORD *)a2);
    return 1;
  }
  else
  {
    v19 = sub_1ACB8DFB8(*(_QWORD *)a1, *(_QWORD *)(a2 + 64), 0);
    if (v19)
    {
      v20 = v19;
      v21 = *(_BYTE *)(a1 + 302);
      v22 = *(_DWORD *)(a1 + 52);
      v23 = *(_DWORD *)(a1 + 140);
      *(_BYTE *)(a1 + 302) = 0;
      sub_1ACBAC224(a1, *(int **)(v19 + 40));
      *v18 = -1;
      ++*(_DWORD *)(v10 + 432);
      *(_WORD *)(v10 + 436) = 0;
      v24 = *(_QWORD *)(v10 + 528);
      *(_QWORD *)(v10 + 528) = 0;
      v25 = sub_1ACC0EC20(a1, v20, 64);
      *(_QWORD *)(v10 + 528) = v24;
      *(_DWORD *)(a1 + 52) = v22;
      *(_DWORD *)(a1 + 140) = v23;
      if (v25)
      {
        v26 = v25;
        v27 = *(int **)(a2 + 32);
        if (v27)
        {
          sub_1ACC10EB0((_DWORD *)a1, v27, (_WORD *)(a2 + 54), (_QWORD *)(a2 + 8));
          if (!*(_DWORD *)(a1 + 48) && **(_DWORD **)(v20 + 32) == *v18)
            sub_1ACC11890(a1, a2, (_QWORD *)v20, 64);
        }
        else
        {
          *(_WORD *)(a2 + 54) = *(_WORD *)(v25 + 54);
          *(_QWORD *)(a2 + 8) = *(_QWORD *)(v25 + 8);
          *(_DWORD *)(a2 + 48) |= *(_DWORD *)(v25 + 48) & 0x62;
          *(_WORD *)(v25 + 54) = 0;
          *(_QWORD *)(v25 + 8) = 0;
        }
        *(_WORD *)(a2 + 56) = *(_WORD *)(a2 + 54);
        if (*(_QWORD *)(v10 + 816) || (v44 = *(_DWORD *)(v26 + 44) - 1, (*(_DWORD *)(v26 + 44) = v44) == 0))
          sub_1ACC00BE8((_QWORD *)v10, (_QWORD *)v26);
        v28 = 0;
      }
      else
      {
        *(_DWORD *)(a2 + 54) = 0;
        v28 = 1;
      }
      sub_1ACB7E704((_QWORD *)v10, v20, 1);
      v45 = *(_DWORD *)(v10 + 432) - 1;
      *(_DWORD *)(v10 + 432) = v45;
      if (v45)
        v46 = 0;
      else
        v46 = *(_WORD *)(v10 + 438);
      *(_WORD *)(v10 + 436) = v46;
      *(_BYTE *)(a1 + 302) = v21;
    }
    else
    {
      v28 = 1;
    }
    *(_WORD *)(*(_QWORD *)(a2 + 96) + 114) |= 2u;
    if (*(_BYTE *)(v10 + 103))
      sub_1ACC00E84((_QWORD *)v10, a2);
  }
  return v28;
}

uint64_t sub_1ACC11890(uint64_t result, uint64_t a2, _QWORD *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  char v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v29;
  uint64_t v30;
  BOOL v32;
  uint64_t v33;
  int v34;
  size_t v35;
  char *v36;
  size_t v37;
  unint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  unsigned __int8 *v46;
  _OWORD v47[3];
  uint64_t v48;

  if (!*(_BYTE *)(*(_QWORD *)result + 103))
  {
    v4 = result;
    if (*(unsigned __int8 *)(result + 302) <= 1u)
    {
      v5 = a2;
      v45 = *(char **)result;
      do
      {
        v6 = a3;
        a3 = (_QWORD *)a3[10];
      }
      while (a3);
      v7 = v6[4];
      v48 = 0;
      memset(v47, 0, sizeof(v47));
      *((_QWORD *)&v47[0] + 1) = v6[5];
      if (*(__int16 *)(a2 + 54) >= 1)
      {
        v8 = 0;
        v42 = result;
        v43 = v7 + 8;
        v9 = *(_QWORD *)(a2 + 8);
        do
        {
          *(_DWORD *)(v5 + 48) |= *(_WORD *)(v9 + 14) & 0x62;
          v46 = *(unsigned __int8 **)(v43 + 24 * v8);
          v10 = sub_1ACB92644(v46);
          if (v10 >= 65)
            v11 = v10;
          else
            v11 = a4;
          *(_BYTE *)(v9 + 9) = v11;
          if (v11 < 66)
            goto LABEL_21;
          v12 = v6[11];
          if (!v12)
            goto LABEL_21;
          v13 = 0;
          do
          {
            v13 |= sub_1ACC11CD0(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 24 * v8 + 8));
            v12 = *(_QWORD *)(v12 + 88);
          }
          while (v12);
          if (v11 == 66 && (v13 & 1) != 0 || (char)v11 >= 67 && (v13 & 2) != 0)
          {
            v14 = 65;
            v4 = v42;
          }
          else
          {
            v4 = v42;
            if ((char)v11 < 67 || *v46 != 36)
              goto LABEL_21;
            v14 = 70;
          }
          *(_BYTE *)(v9 + 9) = v14;
LABEL_21:
          v15 = sub_1ACC11DE0(v47, v46, 0, 0, 0);
          v22 = *(unsigned __int8 *)(v9 + 9);
          if (!v15)
            goto LABEL_51;
          v23 = v15;
          v24 = *(unsigned __int8 *)v15;
          if (!*v15)
          {
            if (v22 == 67)
              goto LABEL_56;
LABEL_51:
            v34 = v22 - 65;
            v33 = 1;
            v23 = "NUM";
            switch(v34)
            {
              case 0:
                goto LABEL_55;
              case 1:
                v33 = 5;
                goto LABEL_55;
              case 2:
              case 5:
                goto LABEL_56;
              case 3:
                v33 = 2;
                goto LABEL_55;
              case 4:
                v33 = 4;
LABEL_55:
                v23 = off_1EECACBA0[v33];
                if (v23)
                  goto LABEL_56;
                goto LABEL_70;
              default:
                goto LABEL_70;
            }
          }
          v25 = 0;
          v26 = (unsigned __int8 *)(v15 + 1);
          v27 = 67;
          v16 = 1668050786;
          v17 = 1952807028;
          while (1)
          {
            v25 = byte_1ACCB6333[v24] | (v25 << 8);
            v30 = 66;
            if (v25 > 1668050785)
            {
              if (v25 == 1668050786 || v25 == 1952807028)
                goto LABEL_29;
              goto LABEL_36;
            }
            if (v25 == 1651273570)
              break;
            if (v25 != 1667785074)
              goto LABEL_36;
LABEL_29:
            v29 = *v26++;
            v24 = v29;
            v27 = v30;
            if (!v29)
              goto LABEL_48;
          }
          v30 = 65;
          if ((_DWORD)v27 == 67 || (_DWORD)v27 == 69)
            goto LABEL_29;
LABEL_36:
          v32 = v25 == 1718382433 || v25 == 1919246700 || v25 == 1685026146;
          if (v32 && (_DWORD)v27 == 67)
          {
            v30 = 69;
            goto LABEL_29;
          }
          v30 = v27;
          if ((v25 & 0xFFFFFF) != 0x696E74)
            goto LABEL_29;
          LODWORD(v30) = 68;
LABEL_48:
          if (v22 != (_DWORD)v30)
            goto LABEL_51;
LABEL_56:
          v35 = strlen(v23) & 0x3FFFFFFF;
          v36 = *(char **)v9;
          if (*(_QWORD *)v9)
          {
            v37 = strlen(*(const char **)v9) & 0x3FFFFFFF;
            v38 = v37 + v35 + 2;
            if (*((_QWORD *)v45 + 64) > (unint64_t)v36)
            {
              if (*((_QWORD *)v45 + 62) <= (unint64_t)v36)
              {
                if (v37 + v35 < 0x7F)
                  goto LABEL_61;
              }
              else if (*((_QWORD *)v45 + 63) <= (unint64_t)v36 && v38 <= *((unsigned __int16 *)v45 + 219))
              {
LABEL_61:
                v39 = *(_QWORD *)v9;
                goto LABEL_66;
              }
            }
            v39 = sub_1ACBE11D0((uint64_t)v45, v36, v38);
            if (v39)
            {
LABEL_66:
              *(_QWORD *)v9 = v39;
              *(_WORD *)(v9 + 14) &= 0xFDFBu;
              v5 = a2;
LABEL_67:
              memcpy((void *)(v37 + v39 + 1), v23, v35 + 1);
              v40 = *(_WORD *)(v9 + 14) | 4;
            }
            else
            {
              sub_1ACBE0F9C(v45, v36);
              *(_QWORD *)v9 = 0;
              v40 = *(_WORD *)(v9 + 14) & 0xFDFB;
              v5 = a2;
            }
            v4 = v42;
            *(_WORD *)(v9 + 14) = v40;
          }
          else
          {
            v39 = sub_1ACBE1124((uint64_t)v45, v35 + 2);
            *(_QWORD *)v9 = v39;
            *(_WORD *)(v9 + 14) &= 0xFDFBu;
            v5 = a2;
            if (v39)
            {
              v37 = 0;
              goto LABEL_67;
            }
          }
LABEL_70:
          result = sub_1ACB78620(v4, v46, v16, v17, v18, v19, v20, v21);
          if (result)
            result = sub_1ACC1201C((uint64_t)v45, v9, *(const char **)result);
          ++v8;
          v9 += 16;
        }
        while (v8 < *(__int16 *)(v5 + 54));
      }
      *(_WORD *)(v5 + 60) = 1;
    }
  }
  return result;
}

uint64_t sub_1ACC11CD0(uint64_t a1)
{
  unsigned int v1;
  int v2;
  unsigned int *v3;
  unint64_t v4;
  uint64_t *v5;
  unint64_t i;
  uint64_t v7;
  int v8;
  int v9;

  v1 = 0;
  if (a1)
  {
    while (2)
    {
      v2 = 2;
      switch(*(_BYTE *)a1)
      {
        case 0x24:
        case 0x8A:
        case 0xA7:
        case 0xA9:
        case 0xB1:
        case 0xB2:
          v8 = sub_1ACB92644((unsigned __int8 *)a1);
          if (v8 == 66)
            v9 = 6;
          else
            v9 = 7;
          if (v8 <= 66)
            v2 = v9;
          else
            v2 = 5;
          break;
        case 0x6F:
          v2 = 6;
          break;
        case 0x71:
        case 0xAE:
        case 0xB3:
          a1 = *(_QWORD *)(a1 + 16);
          if (!a1)
            goto LABEL_13;
          continue;
        case 0x75:
          return v2 | v1;
        case 0x79:
          goto LABEL_13;
        case 0x9A:
          v2 = 4;
          break;
        case 0x9C:
        case 0xA8:
        case 0xAC:
          v2 = 7;
          break;
        case 0x9D:
          v3 = *(unsigned int **)(a1 + 32);
          v4 = *v3;
          if ((int)v4 < 2)
          {
            v2 = 0;
          }
          else
          {
            v2 = 0;
            v5 = (uint64_t *)(v3 + 8);
            for (i = 1; i < v4; i += 2)
            {
              v7 = *v5;
              v5 += 6;
              v2 |= sub_1ACC11CD0(v7);
            }
          }
          if ((v4 & 1) != 0)
          {
            a1 = *(_QWORD *)&v3[6 * (int)v4 - 4];
            v1 |= v2;
            v2 = 0;
            if (a1)
              continue;
          }
          break;
        default:
          v2 = 1;
          break;
      }
      break;
    }
  }
  else
  {
LABEL_13:
    v2 = 0;
  }
  return v2 | v1;
}

const char *sub_1ACC11DE0(_QWORD *a1, unsigned __int8 *a2, _QWORD *a3, _QWORD *a4, const char **a5)
{
  _QWORD *v8;
  int v9;
  const char *result;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unsigned int *v14;
  uint64_t v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;

  v8 = a1;
  v36 = 0;
  v34 = 0;
  v35 = 0;
  v9 = *a2;
  if (v9 == 138)
  {
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v18 = *((_QWORD *)a2 + 4);
    v20 = *(_QWORD *)(v18 + 32);
    v19 = *(_QWORD *)(v18 + 40);
    v17 = *(_QWORD *)(v20 + 8);
    *((_QWORD *)&v31 + 1) = a1;
    *(_QWORD *)&v30 = *a1;
    *((_QWORD *)&v30 + 1) = v19;
LABEL_19:
    result = (const char *)sub_1ACC11DE0(&v30, v17, &v36, &v35, &v34);
    goto LABEL_21;
  }
  result = 0;
  if (v9 != 167)
    goto LABEL_21;
  if (!v8)
    goto LABEL_20;
  v11 = 0;
  v12 = *((_DWORD *)a2 + 12);
  do
  {
    v14 = (unsigned int *)v8[1];
    v15 = *v14;
    if ((int)v15 < 1)
    {
LABEL_5:
      v13 = 0;
      v8 = (_QWORD *)v8[3];
      if (!v8)
        break;
    }
    else
    {
      v16 = v14 + 10;
      while (v16[8] != *((_DWORD *)a2 + 11))
      {
        v16 += 26;
        if (!--v15)
          goto LABEL_5;
      }
      v13 = *(uint64_t **)v16;
      v11 = *((_QWORD *)v16 + 1);
    }
  }
  while (!v13);
  if (!v13)
  {
LABEL_20:
    result = 0;
    goto LABEL_21;
  }
  if (v11)
  {
    result = 0;
    if ((v12 & 0x80000000) != 0 || (signed int)v12 >= **(_DWORD **)(v11 + 32))
      goto LABEL_21;
    v33 = 0;
    v31 = 0u;
    v32 = 0u;
    v30 = 0u;
    v17 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 24 * v12 + 8);
    *((_QWORD *)&v30 + 1) = *(_QWORD *)(v11 + 40);
    *((_QWORD *)&v31 + 1) = v8;
    *(_QWORD *)&v30 = *v8;
    goto LABEL_19;
  }
  if ((v12 & 0x80000000) != 0)
  {
    if (*((__int16 *)v13 + 26) < 0)
    {
      v34 = "rowid";
      result = "INTEGER";
      goto LABEL_33;
    }
    v12 = *((unsigned __int16 *)v13 + 26);
  }
  v21 = v13[1];
  v22 = v21 + 16 * v12;
  v23 = *(const char **)v22;
  v34 = *(const char **)v22;
  if ((*(_BYTE *)(v22 + 14) & 4) != 0)
  {
    result = &v23[strlen(v23) + 1];
  }
  else
  {
    v24 = *(unsigned __int8 *)(v21 + 16 * v12 + 8);
    if (v24 >= 0x10)
      result = off_1EECACBA0[(v24 >> 4) - 1];
    else
      result = 0;
  }
LABEL_33:
  v35 = *v13;
  if (*v8)
  {
    v25 = v13[12];
    if (v25)
    {
      v26 = *(_QWORD *)(*(_QWORD *)*v8 + 32);
      v27 = (uint64_t *)(v26 + 24);
      v28 = 0xFFFFFFFF00000000;
      do
      {
        v29 = *v27;
        v27 += 4;
        v28 += 0x100000000;
      }
      while (v29 != v25);
      v36 = *(_QWORD *)(v26 + (v28 >> 27));
    }
  }
LABEL_21:
  if (a3)
  {
    *a3 = v36;
    *a4 = v35;
    *a5 = v34;
  }
  return result;
}

uint64_t sub_1ACC1201C(uint64_t a1, uint64_t a2, const char *a3)
{
  char *v6;
  unsigned int v7;
  size_t v8;
  size_t v9;
  unint64_t v10;
  uint64_t result;

  v6 = *(char **)a2;
  if (*(_QWORD *)a2)
    v7 = (strlen(*(const char **)a2) & 0x3FFFFFFF) + 1;
  else
    v7 = 1;
  v8 = v7;
  if ((*(_WORD *)(a2 + 14) & 4) != 0)
    v8 = v7 + (strlen(&v6[v7]) & 0x3FFFFFFF) + 1;
  if (a3)
  {
    v9 = (strlen(a3) & 0x3FFFFFFF) + 1;
    v10 = v9 + v8;
    if (v6)
    {
LABEL_8:
      if (*(_QWORD *)(a1 + 512) <= (unint64_t)v6)
        goto LABEL_17;
      if (*(_QWORD *)(a1 + 496) > (unint64_t)v6)
      {
        if (*(_QWORD *)(a1 + 504) <= (unint64_t)v6 && v10 <= *(unsigned __int16 *)(a1 + 438))
          goto LABEL_18;
LABEL_17:
        result = sub_1ACBE11D0(a1, v6, v10);
        v6 = (char *)result;
        if (!result)
          return result;
        goto LABEL_18;
      }
      if (v10 >= 0x81)
        goto LABEL_17;
LABEL_18:
      *(_QWORD *)a2 = v6;
      result = (uint64_t)memcpy(&v6[v8], a3, v9);
      *(_WORD *)(a2 + 14) |= 0x200u;
      return result;
    }
  }
  else
  {
    v9 = 1;
    v10 = v8 + 1;
    if (v6)
      goto LABEL_8;
  }
  result = sub_1ACBE1124(a1, v10);
  v6 = (char *)result;
  if (result)
    goto LABEL_18;
  return result;
}

uint64_t sub_1ACC12140(uint64_t a1, int a2, int a3, unsigned __int8 *a4, _DWORD *a5, unsigned int *a6, int a7)
{
  uint64_t v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  unsigned __int8 *v12;
  int v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  unsigned __int8 *i;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (a2 > a3)
    return 0;
  v8 = a2;
  v9 = a3 + 1;
  while (2)
  {
    if (a4 && (v10 = *a4) != 0)
    {
      v11 = 0;
      v12 = a4 + 1;
      do
      {
        v11 += byte_1ACCB6333[v10];
        v13 = *v12++;
        v10 = v13;
      }
      while (v13);
    }
    else
    {
      v11 = 0;
    }
    v14 = *(_QWORD *)(a1 + 104 * v8 + 40);
    v15 = *(__int16 *)(v14 + 54);
    if (v15 < 1)
      goto LABEL_4;
    v16 = 0;
    v17 = *(_QWORD *)(v14 + 8);
    v18 = v17;
    while (*(unsigned __int8 *)(v18 + 11) != v11)
    {
LABEL_13:
      v18 += 16;
      if (++v16 == v15)
        goto LABEL_4;
    }
    v19 = *(_BYTE **)v18;
    for (i = a4; ; ++i)
    {
      v21 = *v19;
      v22 = *i;
      if ((_DWORD)v21 == (_DWORD)v22)
        break;
      if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
        goto LABEL_13;
LABEL_17:
      ++v19;
    }
    if (*v19)
      goto LABEL_17;
    if (a7 && (*(_WORD *)(v17 + 16 * v16 + 14) & 2) != 0)
    {
LABEL_4:
      if (v9 == (_DWORD)++v8)
        return 0;
      continue;
    }
    break;
  }
  if (a5)
  {
    if ((*(_WORD *)(a1 + 104 * v8 + 69) & 0x2000) != 0)
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 104 * v8 + 48) + 32) + 24 * v16;
      *(_WORD *)(v23 + 25) |= 0x40u;
    }
    *a5 = v8;
    *a6 = v16;
  }
  return 1;
}

uint64_t sub_1ACC12288(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;

  result = sub_1ACBE1124(a1, 0x50uLL);
  if (result)
  {
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_BYTE *)result = -89;
    *(_WORD *)(result + 52) = -1;
    v8 = a2 + 104 * a3;
    v9 = *(_QWORD *)(v8 + 40);
    *(_QWORD *)(result + 72) = v9;
    LODWORD(v8) = *(_DWORD *)(v8 + 72);
    *(_DWORD *)(result + 40) = 1;
    *(_DWORD *)(result + 44) = v8;
    if (*(__int16 *)(v9 + 52) == a4)
    {
      *(_DWORD *)(result + 48) = -1;
    }
    else
    {
      *(_DWORD *)(result + 48) = a4;
      if ((*(_BYTE *)(v9 + 48) & 0x60) != 0 && (*(_WORD *)(*(_QWORD *)(v9 + 8) + 16 * a4 + 14) & 0x60) != 0)
      {
        v10 = *(__int16 *)(v9 + 54);
        if (v10 <= 63)
          v11 = ~(-1 << v10);
        else
          v11 = -1;
        v12 = a2 + 104 * a3;
      }
      else
      {
        if (a4 >= 63)
          v13 = 63;
        else
          v13 = a4;
        v12 = a2 + 104 * a3;
        v11 = *(_QWORD *)(v12 + 88) | (1 << v13);
      }
      *(_QWORD *)(v12 + 88) = v11;
    }
  }
  return result;
}

uint64_t sub_1ACC12384(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v5 = (unsigned __int8 *)result;
    do
    {
      *((_DWORD *)v5 + 1) |= a3;
      *((_DWORD *)v5 + 14) = a2;
      if (*v5 == 172)
      {
        v6 = (int *)*((_QWORD *)v5 + 4);
        if (v6)
        {
          if (*v6 >= 1)
          {
            v7 = 0;
            v8 = 2;
            do
            {
              sub_1ACC12384(*(_QWORD *)&v6[v8], a2, a3);
              ++v7;
              v6 = (int *)*((_QWORD *)v5 + 4);
              v8 += 6;
            }
            while (v7 < *v6);
          }
        }
      }
      result = sub_1ACC12384(*((_QWORD *)v5 + 2), a2, a3);
      v5 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1ACC1243C()
{
  return 0;
}

uint64_t sub_1ACC12444(uint64_t result, int *a2)
{
  int v3;
  int v4;
  int v5;

  if (result)
  {
    while (1)
    {
      if ((*(_BYTE *)(result + 5) & 8) != 0)
      {
        v4 = *(_DWORD *)(result + 8);
LABEL_10:
        *a2 = v4;
        return 1;
      }
      v3 = *(unsigned __int8 *)result;
      if (v3 != 174)
        break;
      result = *(_QWORD *)(result + 16);
      if (!result)
        return result;
    }
    if (v3 == 173)
    {
      v5 = 0;
      result = sub_1ACC12444(*(_QWORD *)(result + 16), &v5);
      if (!(_DWORD)result)
        return result;
      v4 = -v5;
      goto LABEL_10;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1ACC124C8(unsigned __int8 *a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v11;
  _DWORD *v12;
  _DWORD *v13;
  int v14;
  unsigned __int16 *v15;
  int v17;
  int v18;

  if (!a3)
    return 0;
  if (*(_BYTE *)(*(_QWORD *)a1 + 103) || a1[302] > 1u)
    return 0;
  v11 = *a3;
  if (*a3 > *(_DWORD *)(*(_QWORD *)a1 + 144))
  {
    sub_1ACBCB308((uint64_t)a1, "too many terms in %s BY clause", (uint64_t)a3, a4, a5, a6, a7, a8, a4);
    return 1;
  }
  if (v11 < 1)
    return 0;
  v12 = *(_DWORD **)(a2 + 32);
  v13 = a3 + 7;
  v14 = 1;
  v15 = (unsigned __int16 *)(a3 + 7);
  while (1)
  {
    v18 = *v15;
    v15 += 12;
    v17 = v18;
    if (v18)
      break;
LABEL_10:
    result = 0;
    v13 = v15;
    if (v14++ >= v11)
      return result;
  }
  if (*v12 >= v17)
  {
    sub_1ACBAC2AC((uint64_t *)a1, (uint64_t)v12, v17 - 1, *(_QWORD *)(v13 - 5), 0);
    v11 = *a3;
    goto LABEL_10;
  }
  sub_1ACBCB308((uint64_t)a1, "%r %s BY term out of range - should be between 1 and %d", (uint64_t)a3, a4, a5, a6, a7, a8, v14);
  return 1;
}

uint64_t sub_1ACC125D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;

  if ((*(_BYTE *)(a2 + 7) & 1) != 0)
  {
    v2 = *(_QWORD *)(a2 + 72);
    v3 = *(_QWORD **)(v2 + 56);
    if (v3)
    {
      *v3 = *(_QWORD *)(v2 + 64);
      v4 = *(_QWORD *)(v2 + 64);
      if (v4)
        *(_QWORD *)(v4 + 56) = *(_QWORD *)(v2 + 56);
      *(_QWORD *)(v2 + 56) = 0;
    }
  }
  return 0;
}

uint64_t sub_1ACC1260C(uint64_t result, _DWORD *a2, unsigned __int8 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  BOOL v7;
  char v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  int v19;
  char v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  int v24;

  LODWORD(v3) = *a2;
  v4 = *a3;
  if (!*a3)
    goto LABEL_29;
  v5 = 0;
  v6 = *a3;
  do
  {
    v7 = (byte_1ACCB6548[v6] & 6) != 0 || v6 == 95;
    v8 = !v7;
    if (!v7)
    {
      LODWORD(v9) = v5;
      goto LABEL_13;
    }
    v9 = v5 + 1;
    v6 = a3[++v5];
  }
  while (v6);
  v5 = v9;
  if ((unint64_t)(v4 - 58) > 0xFFFFFFFFFFFFFFF5)
    goto LABEL_29;
LABEL_13:
  if (v9 >= 2)
  {
    v10 = ((3 * byte_1ACCB6333[a3[(v9 - 1)]]) ^ (4 * byte_1ACCB6333[v4]) ^ v9) % 0x7F;
    v11 = byte_1ACCB6FC0[v10];
    if (byte_1ACCB6FC0[v10])
    {
      v12 = v5 - 2;
      do
      {
        if ((_DWORD)v9 == byte_1ACCB6A10[v11])
        {
          v13 = word_1ACCB68E8[v11];
          if ((v4 & 0xFFFFFFDF) == aReindexedescap[v13]
            && (a3[1] & 0xDF) == aReindexedescap[v13 + 1])
          {
            if (v9 < 3)
              goto LABEL_29;
            v14 = &aReindexedescap[v13 + 2];
            v15 = a3 + 2;
            v16 = v12;
            while (1)
            {
              v17 = *v15++;
              v18 = v17 & 0xFFFFFFDF;
              v19 = *v14++;
              if (v18 != v19)
                break;
              if (!--v16)
                goto LABEL_29;
            }
          }
        }
        v11 = byte_1ACCB70D3[v11];
      }
      while (v11);
    }
  }
  v20 = v8 ^ 1;
  if (!(_DWORD)v9)
    v20 = 0;
  if ((v20 & 1) != 0)
  {
    v21 = 0;
    if (!*a3)
      goto LABEL_35;
  }
  else
  {
LABEL_29:
    v4 = (int)v3;
    LODWORD(v3) = v3 + 1;
    *(_BYTE *)(result + v4) = 34;
    LOBYTE(v4) = *a3;
    v21 = 1;
    if (!*a3)
      goto LABEL_35;
  }
  v22 = a3 + 1;
  v23 = v3;
  do
  {
    v3 = v23 + 1;
    *(_BYTE *)(result + v23) = v4;
    if (*(v22 - 1) == 34)
    {
      *(_BYTE *)(result + v3) = 34;
      LODWORD(v3) = v23 + 2;
    }
    v24 = *v22++;
    LOBYTE(v4) = v24;
    v23 = v3;
  }
  while (v24);
LABEL_35:
  if (v21)
  {
    *(_BYTE *)(result + (int)v3) = 34;
    LODWORD(v3) = v3 + 1;
  }
  *(_BYTE *)(result + (int)v3) = 0;
  *a2 = v3;
  return result;
}

uint64_t sub_1ACC12814(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v5;

  v2 = *a1;
  v3 = *(_QWORD **)(*a1 + 408);
  if (v3)
  {
    while (*v3 != a2)
    {
      v3 = (_QWORD *)v3[3];
      if (!v3)
        goto LABEL_6;
    }
    *v3 = 0;
  }
LABEL_6:
  if ((*(_BYTE *)(a2 + 7) & 3) != 0)
    return 0;
  v5 = *(_QWORD **)(v2 + 408);
  if (!v5)
    return 0;
  while (*v5 != a2 + 72)
  {
    v5 = (_QWORD *)v5[3];
    if (!v5)
      return 0;
  }
  *v5 = 0;
  return 0;
}

uint64_t sub_1ACC12880(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  _QWORD *v10;
  int *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  int *v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t j;
  _QWORD *v19;

  v2 = *a1;
  if (*(_DWORD *)(*a1 + 48))
    return 2;
  if ((*(_WORD *)(a2 + 6) & 0x420) != 0)
    return 1;
  v6 = *(unsigned int **)(a2 + 32);
  if (v6)
  {
    v7 = *v6;
    if ((int)v7 >= 1)
    {
      for (i = 0; i != v7; ++i)
      {
        v9 = *(_QWORD *)&v6[6 * i + 4];
        if (v9)
        {
          if ((*(_WORD *)((_BYTE *)&v6[6 * i + 6] + 1) & 3) == 0)
          {
            v10 = *(_QWORD **)(v2 + 408);
            if (v10)
            {
              while (*v10 != v9)
              {
                v10 = (_QWORD *)v10[3];
                if (!v10)
                  goto LABEL_9;
              }
              *v10 = 0;
            }
          }
        }
LABEL_9:
        ;
      }
    }
  }
  v11 = *(int **)(a2 + 40);
  if (v11)
  {
    v12 = *v11;
    if (*v11 >= 1)
    {
      v13 = 0;
      do
      {
        v14 = *(_QWORD **)(v2 + 408);
        if (v14)
        {
          while (*v14 != *(_QWORD *)&v11[26 * v13 + 6])
          {
            v14 = (_QWORD *)v14[3];
            if (!v14)
              goto LABEL_25;
          }
          *v14 = 0;
        }
LABEL_25:
        v15 = &v11[26 * v13];
        v16 = (unsigned int *)*((_QWORD *)v15 + 10);
        if ((*(_WORD *)((_BYTE *)v15 + 69) & 0x400) != 0)
        {
          v17 = *v16;
          if ((int)v17 >= 1)
          {
            for (j = 0; j != v17; ++j)
            {
              v19 = *(_QWORD **)(v2 + 408);
              if (v19)
              {
                while (*v19 != *(_QWORD *)&v16[4 * j + 2])
                {
                  v19 = (_QWORD *)v19[3];
                  if (!v19)
                    goto LABEL_31;
                }
                *v19 = 0;
              }
LABEL_31:
              ;
            }
          }
        }
        else if (v16)
        {
          sub_1ACC0B714((uint64_t)a1, (uint64_t)v16);
          v12 = *v11;
        }
        ++v13;
      }
      while (v13 < v12);
    }
  }
  sub_1ACC12A20(a1, a2);
  return 0;
}

_QWORD *sub_1ACC12A20(_QWORD *result, uint64_t a2)
{
  int *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t i;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  int v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t j;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t k;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _QWORD v28[2];
  __int128 v29;
  __int128 v30;

  v2 = *(int **)(a2 + 104);
  if (!v2)
    return result;
  v3 = result;
  v4 = *result;
  if ((*(_BYTE *)(*((_QWORD *)v2 + 4) + 4) & 0x40) != 0)
  {
LABEL_19:
    v5 = 0;
    goto LABEL_20;
  }
  result = sub_1ACC0D094(*(_QWORD *)v4, *(int **)(a2 + 104));
  v5 = result;
  if (result)
  {
    if (*(_QWORD *)v4)
    {
      result = (_QWORD *)sub_1ACBE1124(*(_QWORD *)v4, 0x18uLL);
      if (result)
        goto LABEL_6;
    }
    else
    {
      result = (_QWORD *)sub_1ACB5D828(24);
      if (result)
      {
LABEL_6:
        *result = *(_QWORD *)(v4 + 192);
        *(_QWORD *)(v4 + 192) = result;
        result[1] = v5;
        result[2] = sub_1ACBF84C4;
        if (!*(_DWORD *)(v4 + 48))
        {
          v5[1] = *(_QWORD *)(v4 + 400);
          *(_QWORD *)(v4 + 400) = v5;
        }
        goto LABEL_20;
      }
    }
    v6 = *(_QWORD **)v4;
    if (*(int *)v5 >= 1)
    {
      v7 = 0;
      v8 = v5 + 4;
      do
      {
        v9 = (_QWORD *)*(v8 - 1);
        if (v9)
          sub_1ACC010B0(v6, v9);
        if (*v8)
          sub_1ACB7E704(v6, *v8, 1);
        v10 = (_QWORD *)*(v8 - 2);
        if (v10)
          sub_1ACBE0F9C(v6, v10);
        ++v7;
        v8 += 6;
      }
      while (v7 < *(int *)v5);
    }
    result = sub_1ACBE0F9C(v6, v5);
    goto LABEL_19;
  }
LABEL_20:
  if (*v2 >= 1)
  {
    for (i = 0; i < *v2; ++i)
    {
      v12 = *(_QWORD **)&v2[12 * i + 8];
      v26 = 0u;
      v27 = 0u;
      v25 = 0u;
      v24 = v4;
      v13 = v4;
      if (v5)
      {
        result = sub_1ACC10600((_BYTE *)v4, (uint64_t)v12, (uint64_t)&v24);
        v13 = v24;
      }
      if (*(_BYTE *)(*(_QWORD *)v13 + 103))
        return result;
      result = (_QWORD *)sub_1ACB73B30(v3, v12);
      v14 = *(int **)&v2[12 * i + 6];
      if (!v14)
        continue;
      v29 = 0u;
      v30 = 0u;
      v28[0] = v4;
      v28[1] = sub_1ACC12814;
      v15 = *v14;
      if (*v14 < 1)
        continue;
      v16 = v5;
      v17 = v3;
      for (j = 2; ; j += 6)
      {
        v19 = *(_QWORD *)&v14[j];
        if (v19)
          break;
        if (v15 <= 1)
          goto LABEL_37;
LABEL_30:
        --v15;
      }
      result = (_QWORD *)sub_1ACC0B714((uint64_t)v28, v19);
      if ((_DWORD)result)
        v20 = 1;
      else
        v20 = v15 <= 1;
      if (!v20)
        goto LABEL_30;
LABEL_37:
      v21 = *v14;
      v3 = v17;
      v5 = v16;
      if ((int)v21 >= 1)
      {
        for (k = 0; k != v21; ++k)
        {
          if ((*(_WORD *)((_BYTE *)&v14[6 * k + 6] + 1) & 3) == 0)
          {
            v23 = *(_QWORD **)(v4 + 408);
            if (v23)
            {
              while (*v23 != *(_QWORD *)&v14[6 * k + 4])
              {
                v23 = (_QWORD *)v23[3];
                if (!v23)
                  goto LABEL_40;
              }
              *v23 = 0;
            }
          }
LABEL_40:
          ;
        }
      }
    }
  }
  if (v5)
  {
    if (*(_QWORD **)(v4 + 400) == v5)
      *(_QWORD *)(v4 + 400) = v5[1];
  }
  return result;
}

uint64_t sub_1ACC12CD0(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _WORD *i;
  int v11;
  BOOL v12;
  const char *v13;

  if (!a2)
    return 0;
  v8 = *a2;
  if ((int)v8 < 1)
    return 0;
  for (i = (_WORD *)((char *)a2 + 25); (*i & 0x20) == 0; i += 12)
  {
    if (!--v8)
      return 0;
  }
  v11 = *((unsigned __int8 *)i - 1);
  v12 = v11 == 3 || v11 == 0;
  v13 = "LAST";
  if (v12)
    v13 = "FIRST";
  sub_1ACBCB308(a1, "unsupported use of NULLS %s", a3, a4, a5, a6, a7, a8, (char)v13);
  return 1;
}

uint64_t sub_1ACC12D54(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int v25;
  uint64_t v26;
  _BYTE *v27;
  unsigned __int8 *i;
  uint64_t v29;
  uint64_t v30;

  v10 = *(_QWORD *)(a2 + 8);
  if (v10)
  {
    v11 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v12 = (uint64_t *)(v11 + 24);
    v13 = 0xFFFFFFFF00000000;
    do
    {
      v14 = *v12;
      v12 += 4;
      v13 += 0x100000000;
    }
    while (v14 != v10);
    v15 = (_BYTE **)(v11 + (v13 >> 27));
  }
  else
  {
    v15 = (_BYTE **)(a2 + 16);
  }
  v22 = sub_1ACB8D488((uint64_t)a1, 0, *(char **)(a2 + 24), *v15, a5, a6, a7, a8);
  v23 = *(_QWORD *)(a2 + 40);
  if (v23)
  {
    v24 = *(_QWORD **)a1;
    if (*(_QWORD *)(*(_QWORD *)a1 + 816) || (v25 = *(_DWORD *)(v23 + 44) - 1, (*(_DWORD *)(v23 + 44) = v25) == 0))
      sub_1ACC00BE8(v24, (_QWORD *)v23);
  }
  *(_QWORD *)(a2 + 40) = v22;
  *(_WORD *)(a2 + 69) |= 0x200u;
  if (v22)
  {
    ++*(_DWORD *)(v22 + 44);
    if ((*(_WORD *)(a2 + 69) & 2) != 0)
    {
      v26 = *(_QWORD *)(v22 + 16);
      if (!v26)
        goto LABEL_20;
      while (1)
      {
        v27 = *(_BYTE **)v26;
        for (i = *(unsigned __int8 **)(a2 + 96); ; ++i)
        {
          v29 = *v27;
          v30 = *i;
          if ((_DWORD)v29 != (_DWORD)v30)
            break;
          if (!*v27)
          {
            *(_QWORD *)(a2 + 104) = v26;
            return v22;
          }
LABEL_15:
          ++v27;
        }
        if (byte_1ACCB6333[v29] == byte_1ACCB6333[v30])
          goto LABEL_15;
        v26 = *(_QWORD *)(v26 + 40);
        if (!v26)
        {
LABEL_20:
          sub_1ACBCB308((uint64_t)a1, "no such index: %s", v16, v17, v18, v19, v20, v21, *(_QWORD *)(a2 + 96));
          v22 = 0;
          a1[29] = 1;
          return v22;
        }
      }
    }
  }
  return v22;
}

uint64_t sub_1ACC12EAC(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = a2;
  v6 = 8 * a2;
  v7 = 2 * a2;
  v8 = v7 + 2;
  v9 = v6 + ((3 * a2 + v7 + 2 + 7) & 0xFFFFFFF8) + 112;
  v10 = v9 + a3;
  v11 = v9 + a3;
  if (!a1)
  {
    v12 = sub_1ACB5D828(v10);
    if (!v12)
      return v12;
    goto LABEL_3;
  }
  v12 = sub_1ACBE1124(a1, v10);
  if (v12)
  {
LABEL_3:
    bzero((void *)v12, v11);
    v13 = v12 + 112 + v6;
    *(_QWORD *)(v12 + 8) = v13 + v8;
    *(_QWORD *)(v12 + 16) = v13;
    *(_QWORD *)(v12 + 56) = v13 + v8 + v7;
    *(_QWORD *)(v12 + 64) = v12 + 112;
    *(_WORD *)(v12 + 96) = v5;
    *(_WORD *)(v12 + 94) = v5 - 1;
    *a4 = v12 + v9;
  }
  return v12;
}

void sub_1ACC12F74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v20;
  unsigned int v21;
  _DWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int16x8_t v35;
  char v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  char *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  int v86;
  int v87;
  const char *v88;
  char v89;
  unsigned int v90;
  unsigned int v91;
  int v92;

  v8 = a3;
  v11 = *(_QWORD *)(a2 + 24);
  v12 = *(unsigned int *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v12 + 2;
  v13 = *(_QWORD *)a1;
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(*(_QWORD *)a1 + 32);
  if (v14)
  {
    v16 = (uint64_t *)(v15 + 24);
    LODWORD(v17) = -1;
    do
    {
      v18 = *v16;
      v16 += 4;
      v17 = (v17 + 1);
    }
    while (v18 != v14);
    v19 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v13 + 528);
    if (!v19)
      goto LABEL_9;
  }
  else
  {
    v17 = 4294934528;
    v19 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(v13 + 528);
    if (!v19)
      goto LABEL_9;
  }
  if (*(_BYTE *)(v13 + 197) || *(_BYTE *)(a1 + 302))
    goto LABEL_9;
  v86 = v19(*(_QWORD *)(v13 + 536), 27, *(_QWORD *)a2, 0, *(_QWORD *)(v15 + 32 * (int)v17), *(_QWORD *)(a1 + 368));
  if (v86 == 1)
  {
    v87 = 23;
    v88 = "not authorized";
LABEL_98:
    sub_1ACBCB308(a1, v88, a3, a4, a5, a6, a7, a8, v89);
    *(_DWORD *)(a1 + 24) = v87;
    return;
  }
  if ((v86 & 0xFFFFFFFD) != 0)
  {
    v87 = 1;
    v88 = "authorizer malfunction";
    goto LABEL_98;
  }
  if (v86)
    return;
LABEL_9:
  if ((_DWORD)v17 != 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * (int)v17 + 8) + 17))
    sub_1ACC08F44(a1, v17, *(_DWORD *)(v11 + 40), 1, *(_QWORD *)v11);
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
    goto LABEL_17;
  if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
    *(_BYTE *)(a1 + 35) = 1;
  v20 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (v20)
  {
LABEL_17:
    v21 = v8;
    if ((v8 & 0x80000000) != 0)
      v21 = *(_DWORD *)(a2 + 88);
    v90 = v21;
    v92 = 0;
    v22 = (_DWORD *)sub_1ACC09130((_DWORD *)a1, a2);
    v24 = (uint64_t)v22;
    v25 = *(unsigned int *)(a1 + 52);
    *(_DWORD *)(a1 + 52) = v25 + 1;
    v26 = *(unsigned __int16 *)(a2 + 94);
    if (v22)
      ++*v22;
    sub_1ACBA86CC((uint64_t *)v20, 119, v25, 0, v26, (uint64_t)v22, 4294967288, v23);
    sub_1ACB7A514((_QWORD *)a1, v12, v17, v11, 112, v27, v28, v29);
    v33 = *(_DWORD *)(v20 + 144);
    if (*(_DWORD *)(v20 + 148) <= v33)
    {
      v33 = sub_1ACBFF5AC(v20, 36, v12, 0, 0, v30, v31, v32);
      v36 = *(_BYTE *)(a1 + 31);
      if (v36)
        goto LABEL_23;
    }
    else
    {
      *(_DWORD *)(v20 + 144) = v33 + 1;
      v34 = *(_QWORD *)(v20 + 136) + 40 * v33;
      *(_DWORD *)v34 = 36;
      *(_DWORD *)(v34 + 4) = v12;
      v35 = 0uLL;
      *(_OWORD *)(v34 + 8) = 0u;
      *(_OWORD *)(v34 + 24) = 0u;
      v36 = *(_BYTE *)(a1 + 31);
      if (v36)
      {
LABEL_23:
        v37 = v36 - 1;
        *(_BYTE *)(a1 + 31) = v37;
        v38 = *(unsigned int *)(a1 + 4 * v37 + 224);
        goto LABEL_26;
      }
    }
    v38 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v38;
LABEL_26:
    v39 = *(_QWORD *)(a1 + 168);
    if (!v39)
      v39 = a1;
    *(_BYTE *)(v39 + 32) = 1;
    sub_1ACB98FD8(a1, a2, v12, v38, 0, &v92, 0, 0, v35);
    v43 = *(_DWORD *)(v20 + 144);
    if (*(_DWORD *)(v20 + 148) <= v43)
    {
      sub_1ACBFF5AC(v20, 139, v25, v38, 0, v40, v41, v42);
      v45 = v92;
      if (!v92)
        goto LABEL_35;
    }
    else
    {
      *(_DWORD *)(v20 + 144) = v43 + 1;
      v44 = *(_QWORD *)(v20 + 136) + 40 * v43;
      *(_DWORD *)v44 = 139;
      *(_DWORD *)(v44 + 4) = v25;
      *(_DWORD *)(v44 + 8) = v38;
      *(_QWORD *)(v44 + 12) = 0;
      *(_QWORD *)(v44 + 28) = 0;
      *(_QWORD *)(v44 + 20) = 0;
      *(_DWORD *)(v44 + 36) = 0;
      v45 = v92;
      if (!v92)
      {
LABEL_35:
        v49 = (v33 + 1);
        v50 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v50)
        {
          sub_1ACBFF5AC(v20, 39, v12, v49, 0, v40, v41, v42);
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v50 + 1;
          v51 = *(_QWORD *)(v20 + 136) + 40 * v50;
          *(_DWORD *)v51 = 39;
          *(_DWORD *)(v51 + 4) = v12;
          *(_DWORD *)(v51 + 8) = v49;
          *(_QWORD *)(v51 + 12) = 0;
          *(_QWORD *)(v51 + 28) = 0;
          *(_QWORD *)(v51 + 20) = 0;
          *(_DWORD *)(v51 + 36) = 0;
        }
        v91 = v12;
        v52 = (v12 + 1);
        v53 = *(_DWORD *)(v20 + 144);
        if (*(_BYTE *)(*(_QWORD *)v20 + 103))
          v54 = &byte_1EECAD280;
        else
          v54 = (char *)(*(_QWORD *)(v20 + 136) + 40 * v33);
        *((_DWORD *)v54 + 2) = v53;
        if ((v8 & 0x80000000) != 0)
        {
          if (*(_DWORD *)(v20 + 148) <= v53)
          {
            sub_1ACBFF5AC(v20, 145, v90, v17, 0, v40, v41, v42);
          }
          else
          {
            *(_DWORD *)(v20 + 144) = v53 + 1;
            v55 = *(_QWORD *)(v20 + 136) + 40 * v53;
            *(_DWORD *)v55 = 145;
            *(_DWORD *)(v55 + 4) = v90;
            *(_DWORD *)(v55 + 8) = v17;
            *(_QWORD *)(v55 + 12) = 0;
            *(_QWORD *)(v55 + 28) = 0;
            *(_QWORD *)(v55 + 20) = 0;
            *(_DWORD *)(v55 + 36) = 0;
          }
        }
        sub_1ACBA86CC((uint64_t *)v20, 113, v52, v90, v17, v24, 4294967288, v42);
        v61 = *(_DWORD *)(v20 + 144);
        if (v61 >= 1)
          *(_WORD *)(*(_QWORD *)(v20 + 136) + 40 * (v61 - 1) + 2) = (16 * (v8 >> 31)) ^ 0x11;
        if (*(_DWORD *)(v20 + 148) <= v61)
        {
          v61 = sub_1ACBFF5AC(v20, 34, v25, 0, 0, v58, v59, v60);
          if (*(_BYTE *)(a2 + 98))
            goto LABEL_49;
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v61 + 1;
          v62 = *(_QWORD *)(v20 + 136) + 40 * v61;
          *(_DWORD *)v62 = 34;
          *(_DWORD *)(v62 + 4) = v25;
          *(_OWORD *)(v62 + 8) = 0u;
          *(_OWORD *)(v62 + 24) = 0u;
          if (*(_BYTE *)(a2 + 98))
          {
LABEL_49:
            v63 = *(unsigned int *)(v20 + 144);
            if (*(_DWORD *)(v20 + 148) <= (int)v63)
            {
              v63 = sub_1ACBFF5AC(v20, 9, 0, 1, 0, v58, v59, v60);
            }
            else
            {
              *(_DWORD *)(v20 + 144) = v63 + 1;
              v64 = *(_QWORD *)(v20 + 136) + 40 * (int)v63;
              *(_DWORD *)v64 = 9;
              *(_QWORD *)(v64 + 4) = 0x100000000;
              *(_QWORD *)(v64 + 12) = 0;
              *(_QWORD *)(v64 + 28) = 0;
              *(_QWORD *)(v64 + 20) = 0;
              *(_DWORD *)(v64 + 36) = 0;
            }
            v68 = *(unsigned __int16 *)(a2 + 94);
            v67 = *(unsigned int *)(v20 + 144);
            if (*(_DWORD *)(v20 + 148) <= (int)v67)
            {
              sub_1ACBFF7F0(v20, 132, v25, v63, v38, v68, v59, v60);
            }
            else
            {
              *(_DWORD *)(v20 + 144) = v67 + 1;
              v69 = *(_QWORD *)(v20 + 136) + 40 * (int)v67;
              *(_DWORD *)v69 = 64900;
              *(_DWORD *)(v69 + 4) = v25;
              *(_DWORD *)(v69 + 8) = v63;
              *(_DWORD *)(v69 + 12) = v38;
              *(_DWORD *)(v69 + 16) = v68;
              *(_QWORD *)(v69 + 24) = 0;
              *(_QWORD *)(v69 + 32) = 0;
            }
            sub_1ACC13BFC((uint64_t *)a1, 2, a2, v56, v57, v68, v59, v60);
            v66 = *(_DWORD *)(v20 + 144);
            if (*(_BYTE *)(*(_QWORD *)v20 + 103))
              v70 = &byte_1EECAD280;
            else
              v70 = (char *)(*(_QWORD *)(v20 + 136) + 40 * (int)v63);
            *((_DWORD *)v70 + 2) = v66;
            goto LABEL_63;
          }
        }
        v65 = *(_QWORD *)(a1 + 168);
        if (!v65)
          v65 = a1;
        *(_BYTE *)(v65 + 33) = 1;
        v66 = *(_DWORD *)(v20 + 144);
        v67 = v66;
LABEL_63:
        if (*(_DWORD *)(v20 + 148) <= (signed int)v66)
        {
          sub_1ACBFF5AC(v20, 133, v25, v38, v52, v58, v59, v60);
          if ((*(_WORD *)(a2 + 99) & 0x200) != 0)
            goto LABEL_70;
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v66 + 1;
          v71 = *(_QWORD *)(v20 + 136) + 40 * (int)v66;
          *(_DWORD *)v71 = 133;
          *(_DWORD *)(v71 + 4) = v25;
          *(_DWORD *)(v71 + 8) = v38;
          *(_DWORD *)(v71 + 12) = v52;
          *(_QWORD *)(v71 + 24) = 0;
          *(_QWORD *)(v71 + 32) = 0;
          *(_QWORD *)(v71 + 16) = 0;
          if ((*(_WORD *)(a2 + 99) & 0x200) != 0)
            goto LABEL_70;
        }
        v72 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v72)
        {
          sub_1ACBFF5AC(v20, 137, v52, 0, 0, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v72 + 1;
          v73 = *(_QWORD *)(v20 + 136) + 40 * v72;
          *(_DWORD *)v73 = 137;
          *(_DWORD *)(v73 + 4) = v52;
          *(_OWORD *)(v73 + 8) = 0u;
          *(_OWORD *)(v73 + 24) = 0u;
        }
LABEL_70:
        v74 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v74)
        {
          sub_1ACBFF5AC(v20, 138, v52, v38, 0, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v74 + 1;
          v75 = *(_QWORD *)(v20 + 136) + 40 * v74;
          *(_DWORD *)v75 = 138;
          *(_DWORD *)(v75 + 4) = v52;
          *(_DWORD *)(v75 + 8) = v38;
          *(_QWORD *)(v75 + 12) = 0;
          *(_QWORD *)(v75 + 28) = 0;
          *(_QWORD *)(v75 + 20) = 0;
          *(_DWORD *)(v75 + 36) = 0;
        }
        v76 = *(_DWORD *)(v20 + 144);
        if (v76 >= 1)
          *(_WORD *)(*(_QWORD *)(v20 + 136) + 40 * (v76 - 1) + 2) = 16;
        if ((_DWORD)v38)
        {
          v77 = *(unsigned __int8 *)(a1 + 31);
          if (v77 <= 7)
          {
            *(_BYTE *)(a1 + 31) = v77 + 1;
            *(_DWORD *)(a1 + 4 * v77 + 224) = v38;
            v76 = *(_DWORD *)(v20 + 144);
          }
        }
        if (*(_DWORD *)(v20 + 148) <= v76)
        {
          sub_1ACBFF5AC(v20, 37, v25, v67, 0, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v76 + 1;
          v78 = *(_QWORD *)(v20 + 136) + 40 * v76;
          *(_DWORD *)v78 = 37;
          *(_DWORD *)(v78 + 4) = v25;
          *(_DWORD *)(v78 + 8) = v67;
          *(_QWORD *)(v78 + 12) = 0;
          *(_QWORD *)(v78 + 28) = 0;
          *(_QWORD *)(v78 + 20) = 0;
          *(_DWORD *)(v78 + 36) = 0;
        }
        v79 = *(_DWORD *)(v20 + 144);
        if (*(_BYTE *)(*(_QWORD *)v20 + 103))
          v80 = &byte_1EECAD280;
        else
          v80 = (char *)(*(_QWORD *)(v20 + 136) + 40 * v61);
        *((_DWORD *)v80 + 2) = v79;
        if (*(_DWORD *)(v20 + 148) <= v79)
        {
          sub_1ACBFF5AC(v20, 122, v91, 0, 0, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v79 + 1;
          v81 = *(_QWORD *)(v20 + 136) + 40 * v79;
          *(_DWORD *)v81 = 122;
          *(_DWORD *)(v81 + 4) = v91;
          *(_OWORD *)(v81 + 8) = 0u;
          *(_OWORD *)(v81 + 24) = 0u;
        }
        v82 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v82)
        {
          sub_1ACBFF5AC(v20, 122, v52, 0, 0, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v82 + 1;
          v83 = *(_QWORD *)(v20 + 136) + 40 * v82;
          *(_DWORD *)v83 = 122;
          *(_DWORD *)(v83 + 4) = v52;
          *(_OWORD *)(v83 + 8) = 0u;
          *(_OWORD *)(v83 + 24) = 0u;
        }
        v84 = *(_DWORD *)(v20 + 144);
        if (*(_DWORD *)(v20 + 148) <= v84)
        {
          sub_1ACBFF5AC(v20, 122, v25, 0, 0, v58, v59, v60);
        }
        else
        {
          *(_DWORD *)(v20 + 144) = v84 + 1;
          v85 = *(_QWORD *)(v20 + 136) + 40 * v84;
          *(_DWORD *)v85 = 122;
          *(_DWORD *)(v85 + 4) = v25;
          *(_OWORD *)(v85 + 8) = 0u;
          *(_OWORD *)(v85 + 24) = 0u;
        }
        return;
      }
    }
    v46 = *(_QWORD *)(a1 + 16);
    v47 = *(_QWORD *)(v46 + 24);
    v48 = ~v45;
    if (*(_DWORD *)(v47 + 68) + *(_DWORD *)(v47 + 72) < 0)
      sub_1ACC0D5D4(v47, v46, v48);
    else
      *(_DWORD *)(*(_QWORD *)(v47 + 80) + 4 * v48) = *(_DWORD *)(v46 + 144);
    goto LABEL_35;
  }
}

uint64_t sub_1ACC13854(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t result;

  v8 = *(_QWORD *)(a1 + 40);
  if (!*(_BYTE *)(v8 + 64))
    *((_DWORD *)a2 + 1) |= 0x40000000u;
  if (*a2 != 156)
    return 0;
  if (*(_BYTE *)(**(_QWORD **)v8 + 197))
  {
    result = 0;
    *a2 = 121;
  }
  else
  {
    sub_1ACBCB308(*(_QWORD *)v8, "%s cannot use variables", a3, a4, a5, a6, a7, a8, *(_QWORD *)(v8 + 80));
    return 2;
  }
  return result;
}

uint64_t sub_1ACC138D0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  _BYTE **v14;
  int v15;
  _BYTE *v16;
  unsigned __int8 *j;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  unsigned __int8 *i;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int *v27;
  _QWORD *v28;
  int v29;
  uint64_t v30;
  _BYTE **v31;
  _BYTE *v32;
  unsigned __int8 *n;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unsigned __int8 *k;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  int *v43;
  uint64_t v44;
  uint64_t m;

  v9 = (uint64_t *)a1[5];
  v10 = *(_QWORD *)*v9;
  if (v9[9])
  {
    v11 = *(_DWORD *)(v10 + 40);
    v12 = __OFSUB__(v11, 1);
    v13 = (v11 - 1);
    if ((int)v13 < 0 != v12)
    {
      v15 = v13;
      v25 = *(int **)(a2 + 40);
      if (!v25)
        return 0;
      goto LABEL_25;
    }
    v14 = (_BYTE **)(*(_QWORD *)(v10 + 32) + 32 * v13);
    v15 = -1;
    while (1)
    {
      v16 = *v14;
      if (*v14)
        break;
LABEL_11:
      if (!(_DWORD)v13)
      {
        v21 = "main";
        for (i = (unsigned __int8 *)v9[9]; ; ++i)
        {
          v23 = *(unsigned __int8 *)v21;
          v24 = *i;
          if ((_DWORD)v23 == (_DWORD)v24)
          {
            if (!*v21)
            {
              v15 = 0;
              v25 = *(int **)(a2 + 40);
              if (!v25)
                return 0;
              goto LABEL_25;
            }
          }
          else if (byte_1ACCB6333[v23] != byte_1ACCB6333[v24])
          {
            break;
          }
          ++v21;
        }
      }
      v14 -= 4;
      v20 = (int)v13 <= 0;
      LODWORD(v13) = v13 - 1;
      if (v20)
      {
LABEL_24:
        v25 = *(int **)(a2 + 40);
        if (!v25)
          return 0;
        goto LABEL_25;
      }
    }
    for (j = (unsigned __int8 *)v9[9]; ; ++j)
    {
      v18 = *v16;
      v19 = *j;
      if ((_DWORD)v18 == (_DWORD)v19)
      {
        if (!*v16)
        {
          v15 = v13;
          goto LABEL_24;
        }
      }
      else if (byte_1ACCB6333[v18] != byte_1ACCB6333[v19])
      {
        goto LABEL_11;
      }
      ++v16;
    }
  }
  v15 = -1;
  v25 = *(int **)(a2 + 40);
  if (!v25)
    return 0;
LABEL_25:
  if (*v25 < 1)
    goto LABEL_60;
  v26 = 0;
  v27 = v25 + 2;
LABEL_28:
  if (*((_BYTE *)v9 + 64))
    goto LABEL_53;
  v28 = (_QWORD *)*((_QWORD *)v27 + 1);
  if (!v28)
  {
    v40 = *(_WORD *)((char *)v27 + 61);
    goto LABEL_52;
  }
  v29 = *(_DWORD *)(v10 + 40);
  v12 = __OFSUB__(v29, 1);
  v30 = (v29 - 1);
  if ((int)v30 < 0 != v12)
    goto LABEL_49;
  v31 = (_BYTE **)(*(_QWORD *)(v10 + 32) + 32 * v30);
  while (1)
  {
    v32 = *v31;
    if (*v31)
      break;
LABEL_39:
    if (!(_DWORD)v30)
    {
      v36 = "main";
      for (k = (unsigned __int8 *)*((_QWORD *)v27 + 1); ; ++k)
      {
        v38 = *(unsigned __int8 *)v36;
        v39 = *k;
        if ((_DWORD)v38 == (_DWORD)v39)
        {
          if (!*v36)
          {
            LODWORD(v30) = 0;
            goto LABEL_49;
          }
        }
        else if (byte_1ACCB6333[v38] != byte_1ACCB6333[v39])
        {
          break;
        }
        ++v36;
      }
    }
    v31 -= 4;
    v20 = (int)v30 <= 0;
    LODWORD(v30) = v30 - 1;
    if (v20)
    {
      if (v15 != -1)
        goto LABEL_58;
LABEL_50:
      sub_1ACBE0F9C((_QWORD *)v10, v28);
      *((_QWORD *)v27 + 1) = 0;
      v40 = *(_WORD *)((char *)v27 + 61) | 0x200;
      *(_WORD *)((char *)v27 + 61) = v40;
LABEL_52:
      *(_QWORD *)v27 = v9[7];
      *(_WORD *)((char *)v27 + 61) = v40 | 0x80;
LABEL_53:
      if ((*(_WORD *)((_BYTE *)&v25[26 * v26 + 17] + 1) & 0x400) == 0)
      {
        v41 = *(_QWORD *)&v25[26 * v26 + 20];
        if (v41)
        {
          if (sub_1ACC0B714((uint64_t)(v9 + 1), v41))
            return 2;
        }
      }
      ++v26;
      v27 += 26;
      if (v26 < *v25)
        goto LABEL_28;
LABEL_60:
      v43 = *(int **)(a2 + 104);
      if (v43 && *v43 >= 1)
      {
        v44 = 0;
        for (m = 8; !sub_1ACB73B30(a1, *(_QWORD **)&v43[m]); m += 12)
        {
          ++v44;
          v43 = *(int **)(a2 + 104);
          if (v44 >= *v43)
            return 0;
        }
        return 2;
      }
      return 0;
    }
  }
  for (n = (unsigned __int8 *)*((_QWORD *)v27 + 1); ; ++n)
  {
    v34 = *v32;
    v35 = *n;
    if ((_DWORD)v34 == (_DWORD)v35)
      break;
    if (byte_1ACCB6333[v34] != byte_1ACCB6333[v35])
      goto LABEL_39;
LABEL_35:
    ++v32;
  }
  if (*v32)
    goto LABEL_35;
LABEL_49:
  if (v15 == (_DWORD)v30)
    goto LABEL_50;
LABEL_58:
  sub_1ACBCB308(*v9, "%s %T cannot reference objects in database %s", a3, a4, a5, a6, a7, a8, v9[10]);
  return 2;
}

uint64_t sub_1ACC13BFC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  int v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t result;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  int v33;
  uint64_t v34;

  v8 = a3;
  v34 = 0;
  v11 = *(_QWORD *)(a3 + 24);
  v12 = *(_DWORD *)(*a1 + 136);
  v30 = *a1;
  v31 = 0;
  v32 = 0;
  v33 = v12;
  if (!*(_QWORD *)(a3 + 80))
  {
    if (!*(_WORD *)(a3 + 94))
      goto LABEL_3;
    v21 = 0;
    while (1)
    {
      v22 = *(const char **)(*(_QWORD *)(v11 + 8) + 16 * *(__int16 *)(*(_QWORD *)(v8 + 8) + 2 * v21));
      if (!v21)
        goto LABEL_26;
      v23 = v34;
      if ((int)v34 + 2 < v32)
        break;
      sub_1ACBC290C((uint64_t)&v30, ", ", 2u);
      v24 = *(const char **)v11;
      if (!*(_QWORD *)v11)
        goto LABEL_33;
LABEL_29:
      v25 = strlen(v24);
      a3 = v25 & 0x3FFFFFFF;
      if ((v25 & 0x3FFFFFFF) != 0)
      {
        v26 = v34;
        if ((int)v34 + (int)a3 >= v32)
        {
          sub_1ACBC290C((uint64_t)&v30, v24, a3);
        }
        else
        {
          LODWORD(v34) = v34 + a3;
          memcpy(&v31[v26], v24, v25 & 0x3FFFFFFF);
        }
      }
LABEL_33:
      v27 = v34;
      if ((int)v34 + 1 >= v32)
      {
        sub_1ACBC290C((uint64_t)&v30, ".", 1u);
        if (v22)
        {
LABEL_37:
          v28 = strlen(v22);
          a3 = v28 & 0x3FFFFFFF;
          if ((v28 & 0x3FFFFFFF) != 0)
          {
            v29 = v34;
            if ((int)v34 + (int)a3 < v32)
            {
              LODWORD(v34) = v34 + a3;
              memcpy(&v31[v29], v22, v28 & 0x3FFFFFFF);
            }
            else
            {
              sub_1ACBC290C((uint64_t)&v30, v22, a3);
            }
          }
        }
      }
      else
      {
        LODWORD(v34) = v34 + 1;
        v31[v27] = 46;
        if (v22)
          goto LABEL_37;
      }
      if (++v21 >= (unint64_t)*(unsigned __int16 *)(v8 + 94))
        goto LABEL_3;
    }
    LODWORD(v34) = v34 + 2;
    *(_WORD *)&v31[v23] = 8236;
LABEL_26:
    v24 = *(const char **)v11;
    if (!*(_QWORD *)v11)
      goto LABEL_33;
    goto LABEL_29;
  }
  sqlite3_str_appendf((sqlite3_str *)&v30, "index '%q'", *(_QWORD *)a3);
LABEL_3:
  if (v31 && (v31[v34] = 0, v33) && (v34 & 0x40000000000) == 0)
    v13 = sub_1ACBE13A0(&v30);
  else
    v13 = v31;
  if ((*(_WORD *)(v8 + 99) & 3) == 2)
    v14 = 1555;
  else
    v14 = 2067;
  v15 = a1[2];
  if (v15)
  {
    if ((_DWORD)a2 != 2)
      goto LABEL_16;
    goto LABEL_13;
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  v15 = sub_1ACBCB4C8(a1, a2, a3, a4, a5, a6, a7, a8);
  if ((_DWORD)a2 == 2)
  {
LABEL_13:
    v16 = (uint64_t *)a1[21];
    if (!v16)
      v16 = a1;
    *((_BYTE *)v16 + 33) = 1;
  }
LABEL_16:
  result = sub_1ACBA86CC((uint64_t *)v15, 70, v14, a2, 0, (uint64_t)v13, 4294967290, a8);
  v18 = *(_DWORD *)(v15 + 144);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v20 < 0 == v19)
    *(_WORD *)(*(_QWORD *)(v15 + 136) + 40 * v20 + 2) = 2;
  return result;
}

_DWORD *sub_1ACC13ED8(_DWORD *result, _BYTE *a2)
{
  uint64_t v2;
  int v3;
  _DWORD *v5;
  uint64_t i;
  int v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _BYTE *j;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)result;
  v3 = *(_DWORD *)(*(_QWORD *)result + 40);
  if (v3 >= 1)
  {
    v5 = result;
    for (i = 0; i < v3; ++i)
    {
      v8 = *(_QWORD *)(v2 + 32) + 32 * i;
      if (*(_QWORD *)(v8 + 8))
      {
        if (a2)
        {
          v9 = *(unsigned __int8 **)v8;
          for (j = a2; ; ++j)
          {
            v11 = *j;
            v12 = *v9;
            if ((_DWORD)v11 == (_DWORD)v12)
            {
              if (!*j)
                break;
            }
            else if (byte_1ACCB6333[v11] != byte_1ACCB6333[v12])
            {
              goto LABEL_7;
            }
            ++v9;
          }
        }
        if (*((_QWORD *)v5 + 21))
          result = (_DWORD *)*((_QWORD *)v5 + 21);
        else
          result = v5;
        v7 = result[31];
        if ((v7 & (1 << i)) == 0)
        {
          result[31] = v7 | (1 << i);
          if (i == 1)
          {
            result = (_DWORD *)sub_1ACBE9418((uint64_t)result);
            v3 = *(_DWORD *)(v2 + 40);
          }
        }
      }
LABEL_7:
      ;
    }
  }
  return result;
}

uint64_t *sub_1ACC13FC0(uint64_t *a1, int a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29[24];
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = *(_BYTE **)(*(_QWORD *)(*a1 + 32) + 32 * a2);
  sqlite3_snprintf(24, v29, "sqlite_stat%d", 1);
  if (sub_1ACBD1B0C(*a1, v29, v3))
    sub_1ACBB60F8(a1, "DELETE FROM %Q.%s WHERE %s=%Q", v4, v5, v6, v7, v8, v9, (char)v3);
  sqlite3_snprintf(24, v29, "sqlite_stat%d", 2);
  if (sub_1ACBD1B0C(*a1, v29, v3))
    sub_1ACBB60F8(a1, "DELETE FROM %Q.%s WHERE %s=%Q", v10, v11, v12, v13, v14, v15, (char)v3);
  sqlite3_snprintf(24, v29, "sqlite_stat%d", 3);
  if (sub_1ACBD1B0C(*a1, v29, v3))
    sub_1ACBB60F8(a1, "DELETE FROM %Q.%s WHERE %s=%Q", v16, v17, v18, v19, v20, v21, (char)v3);
  sqlite3_snprintf(24, v29, "sqlite_stat%d", 4);
  result = (uint64_t *)sub_1ACBD1B0C(*a1, v29, v3);
  if (result)
    return sub_1ACBB60F8(a1, "DELETE FROM %Q.%s WHERE %s=%Q", v23, v24, v25, v26, v27, v28, (char)v3);
  return result;
}

uint64_t sub_1ACC14168(uint64_t result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  unsigned __int8 *v18;
  int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _BYTE *v39;
  unsigned __int8 *i;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  int v46;
  int v47;
  int v48;
  uint64_t v49;

  v8 = *(_QWORD *)result;
  if ((*(_BYTE *)(*(_QWORD *)result + 49) & 0x40) == 0 || *(_BYTE *)(a3 + 63))
    return result;
  v11 = result;
  v12 = *(_QWORD *)(result + 16);
  if (!v12)
  {
    if (!*(_QWORD *)(result + 168) && (*(_BYTE *)(v8 + 96) & 8) == 0)
      *(_BYTE *)(result + 35) = 1;
    result = sub_1ACBCB4C8((uint64_t *)result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v12 = result;
  }
  v13 = *(_QWORD *)(a3 + 96);
  v14 = *(unsigned __int8 **)a3;
  v15 = *(_QWORD *)(v13 + 96);
  if (!v15)
  {
    v20 = (uint64_t *)(v13 + 88);
    v21 = *(_DWORD *)(v13 + 84);
    if (v21)
      goto LABEL_29;
LABEL_15:
    v20 = &qword_1EECAD260;
    goto LABEL_16;
  }
  v16 = *v14;
  if (*v14)
  {
    v17 = 0;
    v18 = v14 + 1;
    do
    {
      v17 = -1640531535 * (v17 + byte_1ACCB6333[v16]);
      v19 = *v18++;
      v16 = v19;
    }
    while (v19);
  }
  else
  {
    v17 = 0;
  }
  v38 = (_DWORD *)(v15 + 16 * (v17 % *(_DWORD *)(v13 + 80)));
  v20 = (uint64_t *)(v38 + 2);
  v21 = *v38;
  if (!v21)
    goto LABEL_15;
  do
  {
LABEL_29:
    v20 = (uint64_t *)*v20;
    v39 = (_BYTE *)v20[3];
    for (i = *(unsigned __int8 **)a3; ; ++i)
    {
      v41 = *v39;
      v42 = *i;
      if ((_DWORD)v41 != (_DWORD)v42)
        break;
      if (!*v39)
        goto LABEL_16;
LABEL_31:
      ++v39;
    }
    if (byte_1ACCB6333[v41] == byte_1ACCB6333[v42])
      goto LABEL_31;
    --v21;
  }
  while (v21);
  v20 = &qword_1EECAD260;
LABEL_16:
  if (v20[2])
  {
    LODWORD(v22) = 0;
    goto LABEL_18;
  }
  v37 = *(_QWORD *)(a3 + 72);
  if (v37)
  {
    while (!*(_BYTE *)(v37 + 44) && (*(_BYTE *)(v8 + 50) & 8) == 0)
    {
      v37 = *(_QWORD *)(v37 + 8);
      if (!v37)
        return result;
    }
    v22 = (*(_DWORD *)(v11 + 68) - 1);
    *(_DWORD *)(v11 + 68) = v22;
    v48 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v48)
    {
      sub_1ACBFF5AC(v12, 49, 1, v22, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v48 + 1;
      v49 = *(_QWORD *)(v12 + 136) + 40 * v48;
      *(_QWORD *)v49 = 0x100000031;
      *(_DWORD *)(v49 + 8) = v22;
      *(_QWORD *)(v49 + 12) = 0;
      *(_QWORD *)(v49 + 28) = 0;
      *(_QWORD *)(v49 + 20) = 0;
      *(_DWORD *)(v49 + 36) = 0;
    }
LABEL_18:
    *(_BYTE *)(v11 + 221) = 1;
    v23 = sub_1ACB8E1EC(v8, a2, 0);
    result = (uint64_t)sub_1ACBAA7B4((_BYTE *)v11, (uint64_t)v23, 0, 0, 0, v24, v25, v26);
    *(_BYTE *)(v11 + 221) = 0;
    if ((*(_BYTE *)(v8 + 50) & 8) == 0)
    {
      v33 = *(_DWORD *)(v12 + 144);
      v34 = (v33 + 2);
      if (*(_DWORD *)(v12 + 148) <= v33)
      {
        sub_1ACBFF5AC(v12, 49, 0, v34, 0, v30, v31, v32);
        v36 = *(_QWORD *)(v11 + 16);
        if (!v36)
        {
LABEL_38:
          if (!*(_QWORD *)(v11 + 168) && (*(_BYTE *)(*(_QWORD *)v11 + 96) & 8) == 0)
            *(_BYTE *)(v11 + 35) = 1;
          v36 = sub_1ACBCB4C8((uint64_t *)v11, v27, v28, v34, v29, v30, v31, v32);
        }
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v33 + 1;
        v35 = *(_QWORD *)(v12 + 136) + 40 * v33;
        *(_QWORD *)v35 = 49;
        *(_DWORD *)(v35 + 8) = v34;
        *(_QWORD *)(v35 + 12) = 0;
        *(_QWORD *)(v35 + 28) = 0;
        *(_QWORD *)(v35 + 20) = 0;
        *(_DWORD *)(v35 + 36) = 0;
        v36 = *(_QWORD *)(v11 + 16);
        if (!v36)
          goto LABEL_38;
      }
      v43 = *(_QWORD *)(v11 + 168);
      if (!v43)
        v43 = v11;
      *(_BYTE *)(v43 + 33) = 1;
      result = sub_1ACBA86CC((uint64_t *)v36, 70, 787, 2, 0, 0, 0xFFFFFFFFLL, v32);
      v44 = *(_DWORD *)(v36 + 144);
      v45 = __OFSUB__(v44, 1);
      v46 = v44 - 1;
      if (v46 < 0 == v45)
        *(_WORD *)(*(_QWORD *)(v36 + 136) + 40 * v46 + 2) = 4;
    }
    if ((_DWORD)v22)
    {
      result = *(_QWORD *)(v12 + 24);
      v47 = ~(_DWORD)v22;
      if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
        return sub_1ACC0D5D4(result, v12, v47);
      else
        *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v47) = *(_DWORD *)(v12 + 144);
    }
  }
  return result;
}

uint64_t sub_1ACC144B8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  unsigned __int8 *i;
  uint64_t v28;
  uint64_t v29;
  _QWORD *j;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t k;
  unsigned int v42;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  _QWORD *v57;
  uint64_t v58;

  v8 = a4;
  v12 = *a1;
  v13 = *(_QWORD *)(*a1 + 32);
  v14 = a1[2];
  if (!v14)
  {
    if (!a1[21] && (*(_BYTE *)(v12 + 96) & 8) == 0)
      *((_BYTE *)a1 + 35) = 1;
    v14 = sub_1ACBCB4C8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  if (a1[21])
    v15 = a1[21];
  else
    v15 = (uint64_t)a1;
  v16 = *(_DWORD *)(v15 + 124);
  v17 = 1 << a3;
  if ((v16 & (1 << a3)) == 0)
  {
    *(_DWORD *)(v15 + 124) = v16 | v17;
    if ((_DWORD)a3 == 1)
      sub_1ACBE9418(v15);
  }
  *(_DWORD *)(v15 + 120) |= v17;
  *(_BYTE *)(v15 + 32) |= 1u;
  if (*(_BYTE *)(a2 + 63) == 1)
  {
    v18 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v18)
    {
      sub_1ACBFF5AC(v14, 170, 0, 0, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v18 + 1;
      v19 = *(_QWORD *)(v14 + 136) + 40 * v18;
      *(_BYTE *)v19 = -86;
      *(_OWORD *)(v19 + 1) = 0u;
      *(_OWORD *)(v19 + 17) = 0u;
      *(_QWORD *)(v19 + 32) = 0;
    }
  }
  v20 = (int)a3;
  v21 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 56);
  v22 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD **)(v21 + 64);
  if (!v23)
  {
    v25 = *(_QWORD *)(a2 + 88);
    goto LABEL_34;
  }
  v24 = *(_QWORD *)(a2 + 96);
  while (2)
  {
    while (1)
    {
      v25 = v23[2];
      if (*(_QWORD *)(v25 + 48) != v24)
        break;
      v26 = *(_BYTE **)(v25 + 8);
      if (!v26)
        break;
      for (i = *(unsigned __int8 **)a2; ; ++i)
      {
        v28 = *v26;
        v29 = *i;
        if ((_DWORD)v28 == (_DWORD)v29)
          break;
        if (byte_1ACCB6333[v28] != byte_1ACCB6333[v29])
          goto LABEL_20;
LABEL_27:
        ++v26;
      }
      if (*v26)
        goto LABEL_27;
      if (v24 == v21 && !*(_BYTE *)(v25 + 18))
        break;
LABEL_22:
      *(_QWORD *)(v25 + 64) = v22;
      v22 = v25;
      v23 = (_QWORD *)*v23;
      if (!v23)
        goto LABEL_34;
    }
LABEL_20:
    if (*(unsigned __int8 *)(v25 + 16) == 150)
    {
      *(_QWORD *)(v25 + 8) = *(_QWORD *)a2;
      *(_QWORD *)(v25 + 48) = v24;
      goto LABEL_22;
    }
    v25 = v22;
    v23 = (_QWORD *)*v23;
    if (v23)
      continue;
    break;
  }
LABEL_34:
  for (j = (_QWORD *)(v13 + 32 * (int)a3); v25; v25 = *(_QWORD *)(v25 + 64))
    sub_1ACC148D0(a1, (uint64_t *)v25, a3, a4, a5, a6, a7, a8);
  if ((*(_BYTE *)(a2 + 48) & 8) != 0)
    sub_1ACBB60F8(a1, "DELETE FROM %Q.sqlite_sequence WHERE name=%Q", a3, a4, a5, a6, a7, a8, *j);
  sub_1ACBB60F8(a1, "DELETE FROM %Q.sqlite_master WHERE tbl_name=%Q and type!='trigger'", a3, a4, a5, a6, a7, a8, *j);
  v36 = *(unsigned __int8 *)(a2 + 63);
  if (v8)
  {
    if (v36 != 1)
      goto LABEL_65;
LABEL_62:
    sub_1ACBA86CC((uint64_t *)v14, 172, a3, 0, 0, *(_QWORD *)a2, 0, v35);
    v47 = (uint64_t *)a1[21];
    if (!v47)
      v47 = a1;
    *((_BYTE *)v47 + 33) = 1;
  }
  else
  {
    if (v36 == 1)
      goto LABEL_62;
    LODWORD(v37) = 0;
    v38 = *(_DWORD *)(a2 + 40);
    while (1)
    {
      v40 = v37 - 1;
      if ((int)v37 - 1 >= v38)
        v37 = v38;
      else
        v37 = 0;
      for (k = *(_QWORD *)(a2 + 16); k; k = *(_QWORD *)(k + 40))
      {
        v42 = *(_DWORD *)(k + 88);
        if (v42 > v37 && v40 >= v42)
          v37 = v42;
        else
          v37 = v37;
      }
      if (!(_DWORD)v37)
        break;
      v44 = *(_QWORD *)(a2 + 96);
      if (v44)
      {
        v45 = (uint64_t *)(*(_QWORD *)(*a1 + 32) + 24);
        LODWORD(v39) = -1;
        do
        {
          v46 = *v45;
          v45 += 4;
          v39 = (v39 + 1);
        }
        while (v46 != v44);
      }
      else
      {
        v39 = 4294934528;
      }
      sub_1ACC14C08((uint64_t)a1, v37, v39, v31, v32, v33, v34, v35);
    }
    if (*(_BYTE *)(a2 + 63) == 1)
      goto LABEL_62;
  }
LABEL_65:
  sub_1ACBA86CC((uint64_t *)v14, 151, a3, 0, 0, *(_QWORD *)a2, 0, v35);
  result = a1[2];
  v52 = (**(_DWORD **)(*(_QWORD *)(*a1 + 32) + 32 * (int)a3 + 24) + 1);
  v53 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v53)
  {
    result = sub_1ACBFF5AC(result, 100, a3, 1, v52, v48, v49, v50);
  }
  else
  {
    *(_DWORD *)(result + 144) = v53 + 1;
    v54 = *(_QWORD *)(result + 136) + 40 * v53;
    *(_DWORD *)v54 = 100;
    *(_DWORD *)(v54 + 4) = a3;
    *(_DWORD *)(v54 + 8) = 1;
    *(_DWORD *)(v54 + 12) = v52;
    *(_QWORD *)(v54 + 24) = 0;
    *(_QWORD *)(v54 + 32) = 0;
    *(_QWORD *)(v54 + 16) = 0;
  }
  v55 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32 * (int)a3 + 24);
  v56 = *(_WORD *)(v55 + 114);
  if ((v56 & 2) != 0)
  {
    v57 = *(_QWORD **)(v55 + 16);
    if (v57)
    {
      do
      {
        v58 = v57[2];
        if (*(_BYTE *)(v58 + 63) == 2)
          result = (uint64_t)sub_1ACC00E84((_QWORD *)v12, v58);
        v57 = (_QWORD *)*v57;
      }
      while (v57);
      v55 = *(_QWORD *)(*(_QWORD *)(v12 + 32) + 32 * v20 + 24);
      v56 = *(_WORD *)(v55 + 114);
    }
    *(_WORD *)(v55 + 114) = v56 & 0xFFFD;
  }
  return result;
}

void sub_1ACC148D0(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t *v22;
  int v23;
  _QWORD *v24;
  char *v25;
  uint64_t (*v26)(_QWORD, uint64_t *, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _DWORD *v38;
  _BYTE *v39;
  unsigned __int8 *i;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  int v45;
  const char *v46;
  char v47;

  v8 = a2;
  v10 = *a1;
  v11 = a2[5];
  if (v11)
  {
    v12 = (uint64_t *)(*(_QWORD *)(v10 + 32) + 24);
    LODWORD(v13) = -1;
    do
    {
      v14 = *v12;
      v12 += 4;
      v13 = (v13 + 1);
    }
    while (v14 != v11);
  }
  else
  {
    v13 = 4294934528;
  }
  v15 = a2[6];
  v16 = (_BYTE *)a2[1];
  v17 = *(_QWORD *)(v15 + 24);
  if (v17)
  {
    v18 = *v16;
    if (*v16)
    {
      v19 = 0;
      v20 = v16 + 1;
      do
      {
        v19 = -1640531535 * (v19 + byte_1ACCB6333[v18]);
        v21 = *v20++;
        v18 = v21;
      }
      while (v21);
    }
    else
    {
      v19 = 0;
    }
    v38 = (_DWORD *)(v17 + 16 * (v19 % *(_DWORD *)(v15 + 8)));
    v22 = (uint64_t *)(v38 + 2);
    v23 = *v38;
    if (v23)
    {
      while (1)
      {
LABEL_37:
        v22 = (uint64_t *)*v22;
        v39 = (_BYTE *)v22[3];
        for (i = (unsigned __int8 *)a2[1]; ; ++i)
        {
          v41 = *v39;
          v42 = *i;
          if ((_DWORD)v41 != (_DWORD)v42)
            break;
          if (!*v39)
            goto LABEL_13;
LABEL_39:
          ++v39;
        }
        if (byte_1ACCB6333[v41] == byte_1ACCB6333[v42])
          goto LABEL_39;
        if (!--v23)
        {
          v22 = &qword_1EECAD260;
          goto LABEL_13;
        }
      }
    }
  }
  else
  {
    v22 = (uint64_t *)(v15 + 16);
    v23 = *(_DWORD *)(v15 + 12);
    if (v23)
      goto LABEL_37;
  }
  v22 = &qword_1EECAD260;
LABEL_13:
  v24 = (_QWORD *)v22[2];
  if (!v24)
    goto LABEL_26;
  v25 = (_DWORD)v13 == 1 ? "sqlite_temp_master" : "sqlite_master";
  a2 = (uint64_t *)((_DWORD)v13 == 1 ? 14 : 16);
  v26 = *(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 528);
  if (!v26)
    goto LABEL_26;
  v27 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * (int)v13);
  if (*(_BYTE *)(v10 + 197) || *((_BYTE *)a1 + 302))
  {
    v28 = *a1;
  }
  else
  {
    v43 = v26(*(_QWORD *)(v10 + 536), a2, *v8, *v24, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * (int)v13), a1[46]);
    if (v43 == 1)
    {
LABEL_51:
      v45 = 23;
      v46 = "not authorized";
LABEL_54:
      sub_1ACBCB308((uint64_t)a1, v46, a3, a4, a5, a6, a7, a8, v47);
      *((_DWORD *)a1 + 6) = v45;
      return;
    }
    if ((v43 & 0xFFFFFFFD) != 0)
    {
LABEL_53:
      v45 = 1;
      v46 = "authorizer malfunction";
      goto LABEL_54;
    }
    if (v43)
      return;
    v28 = *a1;
    v26 = *(uint64_t (**)(_QWORD, uint64_t *, uint64_t, _QWORD, uint64_t, uint64_t))(*a1 + 528);
    if (!v26)
      goto LABEL_26;
  }
  if (!*(_BYTE *)(v28 + 197) && !*((_BYTE *)a1 + 302))
  {
    v44 = v26(*(_QWORD *)(v28 + 536), (uint64_t *)9, (uint64_t)v25, 0, v27, a1[46]);
    if (v44 == 1)
      goto LABEL_51;
    if ((v44 & 0xFFFFFFFD) == 0)
    {
      if (v44)
        return;
      goto LABEL_26;
    }
    goto LABEL_53;
  }
LABEL_26:
  v29 = (uint64_t *)a1[2];
  if (v29)
    goto LABEL_31;
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  v29 = (uint64_t *)sub_1ACBCB4C8(a1, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v29)
  {
LABEL_31:
    v30 = 32 * (int)v13;
    sub_1ACBB60F8(a1, "DELETE FROM %Q.sqlite_master WHERE name=%Q AND type='trigger'", a3, a4, a5, a6, a7, a8, *(_QWORD *)(*(_QWORD *)(v10 + 32) + v30));
    v34 = a1[2];
    v35 = (**(_DWORD **)(*(_QWORD *)(*a1 + 32) + v30 + 24) + 1);
    v36 = *(_DWORD *)(v34 + 144);
    if (*(_DWORD *)(v34 + 148) <= v36)
    {
      sub_1ACBFF5AC(v34, 100, v13, 1, v35, v31, v32, v33);
    }
    else
    {
      *(_DWORD *)(v34 + 144) = v36 + 1;
      v37 = *(_QWORD *)(v34 + 136) + 40 * v36;
      *(_DWORD *)v37 = 100;
      *(_DWORD *)(v37 + 4) = v13;
      *(_DWORD *)(v37 + 8) = 1;
      *(_DWORD *)(v37 + 12) = v35;
      *(_QWORD *)(v37 + 24) = 0;
      *(_QWORD *)(v37 + 32) = 0;
      *(_QWORD *)(v37 + 16) = 0;
    }
    sub_1ACBA86CC(v29, 154, v13, 0, 0, *v8, 0, v33);
  }
}

uint64_t *sub_1ACC14C08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *result;
  uint64_t v19;
  char v20;

  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    v12 = *(_BYTE *)(a1 + 31);
    if (v12)
      goto LABEL_3;
  }
  else
  {
    if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
      *(_BYTE *)(a1 + 35) = 1;
    v11 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    v12 = *(_BYTE *)(a1 + 31);
    if (v12)
    {
LABEL_3:
      v13 = v12 - 1;
      *(_BYTE *)(a1 + 31) = v13;
      v14 = *(unsigned int *)(a1 + 4 * v13 + 224);
      if ((int)a2 > 1)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v14 = (*(_DWORD *)(a1 + 56) + 1);
  *(_DWORD *)(a1 + 56) = v14;
  if ((int)a2 <= 1)
LABEL_4:
    sub_1ACBCB308(a1, "corrupt schema", a3, a4, a5, a6, a7, a8, v20);
LABEL_5:
  v15 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v15)
  {
    sub_1ACBFF5AC(v11, 144, a2, v14, a3, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v15 + 1;
    v16 = *(_QWORD *)(v11 + 136) + 40 * v15;
    *(_DWORD *)v16 = 144;
    *(_DWORD *)(v16 + 4) = a2;
    *(_DWORD *)(v16 + 8) = v14;
    *(_DWORD *)(v16 + 12) = a3;
    *(_QWORD *)(v16 + 24) = 0;
    *(_QWORD *)(v16 + 32) = 0;
    *(_QWORD *)(v16 + 16) = 0;
  }
  v17 = *(_QWORD *)(a1 + 168);
  if (!v17)
    v17 = a1;
  *(_BYTE *)(v17 + 33) = 1;
  result = sub_1ACBB60F8((uint64_t *)a1, "UPDATE %Q.sqlite_master SET rootpage=%d WHERE #%d AND rootpage=#%d", a3, a4, a5, a6, a7, a8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * (int)a3));
  if ((_DWORD)v14)
  {
    v19 = *(unsigned __int8 *)(a1 + 31);
    if (v19 <= 7)
    {
      *(_BYTE *)(a1 + 31) = v19 + 1;
      *(_DWORD *)(a1 + 4 * v19 + 224) = v14;
    }
  }
  return result;
}

uint64_t sub_1ACC14D74(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *a2;
  if ((int)v2 < 1)
    return 0;
  v5 = 0;
  while (1)
  {
    if (&a2[26 * v5 + 2] != (unsigned int *)a1)
    {
      if (*(_QWORD *)(a1 + 32) == *(_QWORD *)&a2[26 * v5 + 10])
      {
        v7 = *(_BYTE **)(a1 + 24);
        v8 = *(unsigned __int8 **)&a2[26 * v5 + 8];
        if (v7)
        {
          if (v8)
          {
            while (1)
            {
              v9 = *v7;
              v10 = *v8;
              if ((_DWORD)v9 == (_DWORD)v10)
              {
                if (!*v7)
                  return 1;
              }
              else if (byte_1ACCB6333[v9] != byte_1ACCB6333[v10])
              {
                break;
              }
              ++v7;
              ++v8;
            }
          }
        }
        else if (!v8)
        {
          return 1;
        }
      }
      v6 = *(_QWORD *)&a2[26 * v5 + 12];
      if (v6)
      {
        if ((*(_BYTE *)(v6 + 5) & 8) != 0 && sub_1ACC14D74(a1, *(_QWORD *)(v6 + 40)))
          return 1;
      }
    }
    if (++v5 == v2)
      return 0;
  }
}

_BYTE *sub_1ACC14E74(_BYTE *result, uint64_t a2)
{
  _BYTE *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  unsigned __int8 *v21;
  const char *v22;
  unsigned int v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  char *v34;
  uint64_t v35;
  _BYTE *v36;
  char v37;
  char *v38;
  char *v39;
  char *__s;
  _QWORD v41[2];
  __int128 v42;
  __int128 v43;
  uint64_t v44;

  if (result[28])
    return result;
  v2 = result;
  v3 = (_QWORD *)*((_QWORD *)result + 2);
  v4 = *(_QWORD *)result;
  do
  {
    v5 = a2;
    a2 = *(_QWORD *)(a2 + 80);
  }
  while (a2);
  v7 = *(int **)(v5 + 32);
  v6 = *(_QWORD *)(v5 + 40);
  result[28] = 1;
  v8 = *(_QWORD *)(v4 + 48);
  result = (_BYTE *)sub_1ACB7E2D4((uint64_t)v3, *v7);
  if (*v7 <= 0)
    return result;
  v35 = v6;
  v36 = v2;
  v15 = 0;
  v16 = 0;
  v37 = v8;
  v17 = v8 & 0x44;
  v18 = v7 + 4;
  do
  {
    v21 = (unsigned __int8 *)*((_QWORD *)v18 - 1);
    v22 = *(const char **)v18;
    if (!*(_QWORD *)v18 || (*(_WORD *)((_BYTE *)v18 + 9) & 3) != 0)
    {
      if (!v17 || *v21 != 167)
      {
        if (v22)
        {
          v27 = strlen(*(const char **)v18) + 1;
          result = (_BYTE *)sub_1ACBE1124(v4, v27);
          v28 = result;
          if (result)
            result = memcpy(result, v22, v27);
        }
        else
        {
          result = sub_1ACB6DDD0(v4, "column%d", v9, v10, v11, v12, v13, v14, v16 + 1);
          v28 = result;
        }
        if (!*(_BYTE *)(*v3 + 103))
        {
          v26 = v3[19] + v15;
          v25 = v28;
          goto LABEL_7;
        }
        goto LABEL_9;
      }
      v23 = *((_DWORD *)v21 + 12);
      v24 = *((_QWORD *)v21 + 9);
      if ((v23 & 0x80000000) != 0)
      {
        if (*(__int16 *)(v24 + 52) < 0)
        {
          v25 = "rowid";
          if ((v37 & 4) != 0)
          {
LABEL_30:
            result = sub_1ACB6DDD0(v4, "%s.%s", v9, v10, v11, v12, v13, v14, *(_QWORD *)v24);
            if (!*(_BYTE *)(*v3 + 103))
            {
              v25 = result;
              v26 = v3[19] + v15;
LABEL_7:
              v19 = sub_1ACBD0E78;
LABEL_8:
              result = (_BYTE *)sub_1ACB57870(v26, v25, -1, 1u, v19);
              goto LABEL_9;
            }
            goto LABEL_9;
          }
          goto LABEL_18;
        }
        v23 = *(unsigned __int16 *)(v24 + 52);
      }
      v25 = *(char **)(*(_QWORD *)(v24 + 8) + 16 * v23);
      if ((v37 & 4) != 0)
        goto LABEL_30;
LABEL_18:
      if (!*(_BYTE *)(*v3 + 103))
      {
        v26 = v3[19] + v15;
LABEL_25:
        v19 = (uint64_t (*)(uint64_t))-1;
        goto LABEL_8;
      }
      goto LABEL_9;
    }
    if (!*(_BYTE *)(*v3 + 103))
    {
      v26 = v3[19] + v15;
      v25 = *(char **)v18;
      goto LABEL_25;
    }
LABEL_9:
    ++v16;
    v20 = *v7;
    v18 += 6;
    v15 += 64;
  }
  while (v16 < v20);
  v29 = *((_QWORD *)v36 + 2);
  v41[0] = v36;
  v41[1] = v35;
  if ((int)v20 >= 1)
  {
    v30 = 0;
    v31 = 0;
    v44 = 0;
    v43 = 0u;
    v42 = 0u;
    v32 = 2;
    do
    {
      v33 = *(unsigned __int8 **)&v7[v32];
      v39 = 0;
      __s = 0;
      v38 = 0;
      result = sub_1ACC11DE0(v41, v33, &__s, &v39, (const char **)&v38);
      if (!*(_BYTE *)(*(_QWORD *)v29 + 103))
      {
        v34 = result;
        result = (_BYTE *)sub_1ACB57870(*(_QWORD *)(v29 + 152) + ((unint64_t)*(unsigned __int16 *)(v29 + 262) << 7) + v30, __s, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
        if (!*(_BYTE *)(*(_QWORD *)v29 + 103))
        {
          result = (_BYTE *)sub_1ACB57870(*(_QWORD *)(v29 + 152) + 192 * *(unsigned __int16 *)(v29 + 262) + v30, v39, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          if (!*(_BYTE *)(*(_QWORD *)v29 + 103))
          {
            result = (_BYTE *)sub_1ACB57870(*(_QWORD *)(v29 + 152) + ((unint64_t)*(unsigned __int16 *)(v29 + 262) << 8) + v30, v38, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
            if (!*(_BYTE *)(*(_QWORD *)v29 + 103))
              result = (_BYTE *)sub_1ACB57870(*(_QWORD *)(v29 + 152) + ((v31 + *(unsigned __int16 *)(v29 + 262)) << 6), v34, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          }
        }
      }
      ++v31;
      v30 += 64;
      v32 += 6;
    }
    while (v31 < *v7);
  }
  return result;
}

uint64_t sub_1ACC151C4(uint64_t result, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v5;
  unsigned int v6;
  int v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;

  if (result)
  {
    v5 = (unsigned __int8 *)result;
    do
    {
      v6 = *((_DWORD *)v5 + 1);
      if ((a2 & 0x80000000) != 0)
      {
        v6 &= 0xFFFFFFFC;
      }
      else
      {
        if ((v6 & 1) == 0 || *((_DWORD *)v5 + 14) != (_DWORD)a2)
          goto LABEL_10;
        v6 = v6 & 0xFFFFFFFC | 2;
      }
      *((_DWORD *)v5 + 1) = v6;
LABEL_10:
      v7 = *v5;
      if (v7 == 172)
      {
        v8 = (int *)*((_QWORD *)v5 + 4);
        if (v8 && *v8 >= 1)
        {
          v9 = 0;
          v10 = 2;
          do
          {
            sub_1ACC151C4(*(_QWORD *)&v8[v10], a2, a3);
            ++v9;
            v8 = (int *)*((_QWORD *)v5 + 4);
            v10 += 6;
          }
          while (v9 < *v8);
        }
      }
      else if (v7 == 167 && !(_DWORD)a3 && *((_DWORD *)v5 + 11) == (_DWORD)a2)
      {
        *((_DWORD *)v5 + 1) = v6 & 0xFFDFFFFF;
      }
      result = sub_1ACC151C4(*((_QWORD *)v5 + 2), a2, a3);
      v5 = (unsigned __int8 *)*((_QWORD *)v5 + 3);
    }
    while (v5);
  }
  return result;
}

uint64_t sub_1ACC152BC(_QWORD *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t result;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _QWORD v13[2];
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = 0;
  v15 = 0;
  v11 = 0u;
  v12 = 0u;
  v10 = 0u;
  v5 = *a1 + 103;
  v13[0] = a1;
  v13[1] = v5;
  do
  {
    while (1)
    {
      v14 = 0;
      v16 = 0;
      LODWORD(v15) = 0;
      v6 = *(_QWORD *)(a2 + 40);
      if (v6 && *(int *)v6 >= 1 && (*(_BYTE *)(v6 + 68) & 0x40) != 0)
        v7 = 3;
      else
        v7 = 1;
      HIDWORD(v15) = v7;
      result = sub_1ACC19960((uint64_t)v13, *(unsigned __int8 **)(a2 + 48));
      if ((_DWORD)v14)
        break;
      if (!HIDWORD(v14))
        return result;
    }
    *(_QWORD *)&v10 = a1;
    *((_QWORD *)&v10 + 1) = sub_1ACC19A88;
    v11 = (unint64_t)sub_1ACC1243C;
    *(_QWORD *)&v12 = 0;
    *((_QWORD *)&v12 + 1) = v13;
    v9 = *(_QWORD *)(a2 + 48);
    if (v9)
      result = sub_1ACC0B714((uint64_t)&v10, v9);
    if (v16)
      result = (uint64_t)sub_1ACBE0F9C(*(_QWORD **)v13[0], v16);
    v4 += HIDWORD(v14);
  }
  while (HIDWORD(v14));
  return result;
}

uint64_t sub_1ACC153C0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  _BYTE *v4;
  const char *i;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if ((*(_BYTE *)(a2 + 4) & 8) == 0)
    return 0;
  v2 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)v2 != 1)
    return 0;
  if (*(_QWORD *)(a2 + 48))
    return 0;
  if (*(_QWORD *)(a2 + 64))
    return 0;
  if (*(_QWORD *)(a2 + 56))
    return 0;
  if (*(_QWORD *)(a2 + 72))
    return 0;
  v3 = *(unsigned __int8 **)(v2 + 8);
  if (*v3 != 168)
    return 0;
  v4 = (_BYTE *)*((_QWORD *)v3 + 1);
  if (!v4)
    return 0;
  for (i = "count"; ; ++i)
  {
    v7 = *v4;
    v8 = *(unsigned __int8 *)i;
    if ((_DWORD)v7 == (_DWORD)v8)
      break;
    if (byte_1ACCB6333[v7] != byte_1ACCB6333[v8])
      return 0;
LABEL_11:
    ++v4;
  }
  if (*v4)
    goto LABEL_11;
  if (!*((_QWORD *)v3 + 4))
  {
    v9 = *(_QWORD **)(a2 + 40);
    if (*(_DWORD *)v9 == 1 && (v3[7] & 1) == 0)
    {
      v10 = v9[6];
      if (v10)
      {
        if (*(_QWORD *)(v10 + 80) && (*(_BYTE *)(v10 + 7) & 4) == 0)
        {
          v11 = (unsigned __int8 *)v9[6];
          while ((*v11 == 135 || !*((_QWORD *)v11 + 10))
               && !*((_QWORD *)v11 + 6)
               && !*((_QWORD *)v11 + 12)
               && (v11[4] & 8) == 0)
          {
            v11 = (unsigned __int8 *)*((_QWORD *)v11 + 10);
            if (!v11)
            {
              v12 = (_QWORD *)*a1;
              v9[6] = 0;
              sub_1ACB7E8B0(v12, v9);
              v13 = 0;
              *(_QWORD *)(a2 + 40) = sub_1ACB5733C(*a1, 0x70uLL);
              do
              {
                while (1)
                {
                  v15 = *(_QWORD *)(v10 + 80);
                  *(_QWORD *)(v10 + 80) = 0;
                  *(_QWORD *)(v10 + 88) = 0;
                  *(_DWORD *)(v10 + 4) = *(_DWORD *)(v10 + 4) & 0xFFFFFEF7 | 8;
                  *(_WORD *)(v10 + 2) = 0;
                  v16 = *(_QWORD **)(v10 + 32);
                  if (v16)
                    sub_1ACC010B0(v12, v16);
                  v17 = v3;
                  v18 = v15;
                  if (v15)
                    v17 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)v12, v3, 0, 0);
                  *(_QWORD *)(v10 + 32) = sub_1ACC2D490((_QWORD *)*a1, v17);
                  v19 = sub_1ACC0241C(a1, 138, 0, 0);
                  sub_1ACC046F8(a1, v19, v10, v20, v21, v22, v23, v24);
                  if (v13)
                    break;
                  v13 = v19;
                  v10 = v18;
                  if (!v18)
                    goto LABEL_37;
                }
                v13 = sub_1ACC0241C(a1, 106, v19, v13);
                v10 = v18;
              }
              while (v18);
LABEL_37:
              *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8) = v13;
              *(_DWORD *)(a2 + 4) &= ~8u;
              return 1;
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1ACC1560C(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v11;
  uint64_t v13;
  int v15;
  unsigned __int8 *v16;
  int v17;
  int v18;
  unsigned __int8 *v19;
  int *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[4];
  uint64_t v48;
  uint64_t v49;

  if (!a3)
    return 0;
  v8 = a2;
  if ((*((_DWORD *)a2 + 1) & 0x2002000) != 0 || (*(_BYTE *)(a4 + 104 * (int)a5 + 68) & 0x50) != 0)
    return 0;
  v13 = a3;
  if (*((_QWORD *)a2 + 10))
  {
    v15 = 0;
    v16 = a2;
    while (1)
    {
      v17 = *v16;
      if (v17 == 138)
        v18 = v15;
      else
        v18 = 1;
      if (v17 != 135)
        v15 = v18;
      if (*((_QWORD *)v16 + 14))
        return 0;
      v16 = (unsigned __int8 *)*((_QWORD *)v16 + 10);
      if (!v16)
      {
        v40 = a5;
        if (!v15)
          goto LABEL_26;
        v19 = a2;
        while (1)
        {
          v20 = (int *)*((_QWORD *)v19 + 4);
          if (*v20 >= 1)
            break;
LABEL_17:
          v19 = (unsigned __int8 *)*((_QWORD *)v19 + 10);
          if (!v19)
            goto LABEL_26;
        }
        v21 = 0;
        v22 = 2;
        while (1)
        {
          v23 = sub_1ACB78620((uint64_t)a1, *(unsigned __int8 **)&v20[v22], a3, a4, a5, a6, a7, a8);
          if (v23)
          {
            if (*(uint64_t (**)(int, int, void *, int, void *))(v23 + 24) != sub_1ACB934B4)
              return 0;
          }
          ++v21;
          v22 += 6;
          if (v21 >= *v20)
            goto LABEL_17;
        }
      }
    }
  }
  v40 = a5;
  v24 = *((_QWORD *)a2 + 14);
  if (v24)
  {
    if (!*(_QWORD *)(v24 + 16))
      return 0;
  }
LABEL_26:
  if (*((_QWORD *)v8 + 12))
    return 0;
  if (*(_BYTE *)v13 == 44)
  {
    LODWORD(v11) = 0;
    do
    {
      v11 = sub_1ACC1560C(a1, v8, *(_QWORD *)(v13 + 24), a4, a5) + v11;
      v13 = *(_QWORD *)(v13 + 16);
    }
    while (*(_BYTE *)v13 == 44);
  }
  else
  {
    v11 = 0;
  }
  if (sub_1ACC19DC4(v13, a4, a5))
  {
    *((_DWORD *)v8 + 1) |= 0x1000000u;
    v25 = (int *)(a4 + 104 * v40 + 72);
    do
    {
      v44 = 0;
      v45 = 0;
      v46 = 0;
      v27 = (unsigned __int8 *)sub_1ACB8B290(*a1, (unsigned __int8 *)v13, 0, 0);
      sub_1ACC151C4((uint64_t)v27, 0xFFFFFFFFLL, 1);
      v41 = a1;
      v42 = *v25;
      v43 = v42;
      LODWORD(v44) = 0;
      v45 = *((_QWORD *)v8 + 4);
      v34 = v8;
      do
      {
        v35 = v34;
        v34 = (unsigned __int8 *)*((_QWORD *)v34 + 10);
      }
      while (v34);
      v46 = *((_QWORD *)v35 + 4);
      v36 = sub_1ACBAC4CC((uint64_t)&v41, v27, v28, v29, v30, v31, v32, v33);
      v37 = v36;
      v38 = *((_QWORD *)v8 + 14);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 16);
        v47[3] = 0;
        v48 = 0x100000000;
        v49 = v39;
        v47[1] = sub_1ACC19EB8;
        v47[2] = 0;
        v47[0] = a1;
        if (v36)
        {
          sub_1ACC0B714((uint64_t)v47, (uint64_t)v36);
          if (!WORD2(v48))
          {
            sub_1ACBF8348((_QWORD *)*a1, v37);
            return v11;
          }
        }
      }
      if ((*((_DWORD *)v8 + 1) & 8) != 0)
        v26 = 64;
      else
        v26 = 48;
      *(_QWORD *)&v8[v26] = sub_1ACC04474(a1, *(_QWORD *)&v8[v26], (uint64_t)v37);
      v8 = (unsigned __int8 *)*((_QWORD *)v8 + 10);
    }
    while (v8);
    return (v11 + 1);
  }
  return v11;
}

uint64_t sub_1ACC158E8(uint64_t a1, _QWORD *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a2[5];
  if ((*(_BYTE *)(v4 + 7) & 1) == 0)
  {
    while (1)
    {
      if ((int)a3 >= a4)
        return 0;
      a3 = (int)a3;
      while (1)
      {
        v5 = a3++;
        v6 = *(_QWORD *)(a1 + 104 * v5 + 48);
        if (!v6)
          goto LABEL_4;
        if ((*(_WORD *)(a1 + 104 * v5 + 69) & 0x20) != 0)
          goto LABEL_4;
        v7 = *(_BYTE **)(a1 + 104 * v5 + 24);
        if (!v7)
          goto LABEL_4;
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 104 * v5 + 40) + 96);
        if (v8 != *(_QWORD *)(a2[4] + 96))
          goto LABEL_4;
        v9 = (unsigned __int8 *)a2[2];
        if (!v9)
          goto LABEL_4;
        while (1)
        {
          v10 = *v7;
          v11 = *v9;
          if ((_DWORD)v10 == (_DWORD)v11)
            break;
          if (byte_1ACCB6333[v10] != byte_1ACCB6333[v11])
            goto LABEL_4;
LABEL_12:
          ++v7;
          ++v9;
        }
        if (*v7)
          goto LABEL_12;
        if (v8 || *(_DWORD *)(v4 + 16) == *(_DWORD *)(v6 + 16))
          break;
LABEL_4:
        if ((_DWORD)a3 == a4)
          return 0;
      }
      if ((*(_BYTE *)(v6 + 7) & 1) == 0)
        return a1 + 104 * v5 + 8;
    }
  }
  return 0;
}

uint64_t sub_1ACC159CC(uint64_t *a1, int *a2, int a3, int a4)
{
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v7 = *a2;
  v8 = *a2 - a3;
  v15 = sub_1ACC092C0(*a1, v8, a4 + 1);
  if (v15)
    v16 = v7 <= a3;
  else
    v16 = 1;
  if (!v16)
  {
    v18 = 0;
    v19 = (uint64_t)&a2[6 * a3 + 2];
    do
    {
      v20 = sub_1ACB78620((uint64_t)a1, *(unsigned __int8 **)v19, v9, v10, v11, v12, v13, v14);
      if (!v20)
        v20 = *(_QWORD *)(*a1 + 16);
      *(_QWORD *)(v15 + 32 + 8 * v18) = v20;
      *(_BYTE *)(*(_QWORD *)(v15 + 24) + v18++) = *(_BYTE *)(v19 + 16);
      v19 += 24;
    }
    while (v8 != (_DWORD)v18);
  }
  return v15;
}

uint64_t *sub_1ACC15A80(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  BOOL v46;
  uint64_t v47;
  int v48;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  int *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t v76;

  v8 = (uint64_t)result;
  v9 = **(unsigned int **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 48) + 32);
  v10 = *(_QWORD *)(a2 + 112);
  v11 = result[2];
  if (!v11)
  {
    if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0)
      *((_BYTE *)result + 35) = 1;
    result = (uint64_t *)sub_1ACBCB4C8(result, a2, a3, a4, a5, a6, a7, a8);
    v11 = (uint64_t)result;
  }
  v12 = *(unsigned int *)(v10 + 88);
  v13 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v13)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 118, v12, v9, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v13 + 1;
    v14 = *(_QWORD *)(v11 + 136) + 40 * v13;
    *(_DWORD *)v14 = 118;
    *(_DWORD *)(v14 + 4) = v12;
    *(_DWORD *)(v14 + 8) = v9;
    *(_QWORD *)(v14 + 12) = 0;
    *(_QWORD *)(v14 + 28) = 0;
    *(_QWORD *)(v14 + 20) = 0;
    *(_DWORD *)(v14 + 36) = 0;
  }
  v15 = *(unsigned int *)(v10 + 88);
  v16 = (v15 + 1);
  v17 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v17)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 115, v16, v15, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v17 + 1;
    v18 = *(_QWORD *)(v11 + 136) + 40 * v17;
    *(_DWORD *)v18 = 115;
    *(_DWORD *)(v18 + 4) = v16;
    *(_DWORD *)(v18 + 8) = v15;
    *(_QWORD *)(v18 + 12) = 0;
    *(_QWORD *)(v18 + 28) = 0;
    *(_QWORD *)(v18 + 20) = 0;
    *(_DWORD *)(v18 + 36) = 0;
  }
  v19 = *(unsigned int *)(v10 + 88);
  v20 = (v19 + 2);
  v21 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v21)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 115, v20, v19, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v21 + 1;
    v22 = *(_QWORD *)(v11 + 136) + 40 * v21;
    *(_DWORD *)v22 = 115;
    *(_DWORD *)(v22 + 4) = v20;
    *(_DWORD *)(v22 + 8) = v19;
    *(_QWORD *)(v22 + 12) = 0;
    *(_QWORD *)(v22 + 28) = 0;
    *(_QWORD *)(v22 + 20) = 0;
    *(_DWORD *)(v22 + 36) = 0;
  }
  v23 = *(unsigned int *)(v10 + 88);
  v24 = (v23 + 3);
  v25 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v25)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 115, v24, v23, 0, a6, a7, a8);
    v27 = *(int **)(v10 + 16);
    if (!v27)
      goto LABEL_22;
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v25 + 1;
    v26 = *(_QWORD *)(v11 + 136) + 40 * v25;
    *(_DWORD *)v26 = 115;
    *(_DWORD *)(v26 + 4) = v24;
    *(_DWORD *)(v26 + 8) = v23;
    *(_QWORD *)(v26 + 12) = 0;
    *(_QWORD *)(v26 + 28) = 0;
    *(_QWORD *)(v26 + 20) = 0;
    *(_DWORD *)(v26 + 36) = 0;
    v27 = *(int **)(v10 + 16);
    if (!v27)
      goto LABEL_22;
  }
  v28 = *v27;
  v29 = *(_DWORD *)(v8 + 56);
  v30 = (v29 + 1);
  *(_DWORD *)(v10 + 108) = v30;
  v31 = (v29 + v28);
  *(_DWORD *)(v8 + 56) = v31;
  v32 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v32)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 75, 0, v30, v31, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v32 + 1;
    v33 = *(_QWORD *)(v11 + 136) + 40 * v32;
    *(_QWORD *)v33 = 75;
    *(_DWORD *)(v33 + 8) = v30;
    *(_DWORD *)(v33 + 12) = v31;
    *(_QWORD *)(v33 + 24) = 0;
    *(_QWORD *)(v33 + 32) = 0;
    *(_QWORD *)(v33 + 16) = 0;
  }
LABEL_22:
  v34 = (*(_DWORD *)(v8 + 56) + 1);
  *(_DWORD *)(v8 + 56) = v34;
  *(_DWORD *)(v10 + 128) = v34;
  v35 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v35)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 71, 1, v34, 0, a6, a7, a8);
    if (*(_BYTE *)(v10 + 36))
      goto LABEL_24;
    goto LABEL_27;
  }
  *(_DWORD *)(v11 + 144) = v35 + 1;
  v36 = *(_QWORD *)(v11 + 136) + 40 * v35;
  *(_QWORD *)v36 = 0x100000047;
  *(_DWORD *)(v36 + 8) = v34;
  *(_QWORD *)(v36 + 12) = 0;
  *(_QWORD *)(v36 + 28) = 0;
  *(_QWORD *)(v36 + 20) = 0;
  *(_DWORD *)(v36 + 36) = 0;
  if (!*(_BYTE *)(v10 + 36))
  {
LABEL_27:
    v42 = v10;
    v76 = v10;
    while (1)
    {
      v44 = *(_QWORD *)(v42 + 80);
      if ((*(_BYTE *)(v44 + 5) & 0x10) != 0 && *(_BYTE *)(v42 + 33) != 90)
      {
        v54 = *(int **)(*(_QWORD *)(v42 + 112) + 32);
        v55 = *v54;
        result = (uint64_t *)sub_1ACC092C0(*(_QWORD *)v8, *v54, 1);
        v59 = result;
        if ((int)v55 >= 1 && result != 0)
        {
          v63 = 0;
          v64 = v54 + 2;
          do
          {
            result = (uint64_t *)sub_1ACB78620(v8, *(unsigned __int8 **)v64, v56, v57, v58, a6, a7, a8);
            if (!result)
              result = *(uint64_t **)(*(_QWORD *)v8 + 16);
            v59[v63 + 4] = (uint64_t)result;
            *(_BYTE *)(v59[3] + v63++) = *((_BYTE *)v64 + 16);
            v64 += 6;
          }
          while (v55 != v63);
        }
        v61 = *(unsigned int *)(v8 + 52);
        v62 = *(_DWORD *)(v8 + 56);
        *(_DWORD *)(v42 + 100) = v61;
        *(_DWORD *)(v42 + 104) = v62 + 1;
        *(_DWORD *)(v8 + 52) = v61 + 1;
        *(_DWORD *)(v8 + 56) = v62 + 3;
        if (v59)
        {
          v10 = v76;
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v42 + 80) + 56) + 1) == 105)
          {
            *(_BYTE *)v59[3] = 1;
            v61 = *(unsigned int *)(v42 + 100);
          }
        }
        else
        {
          v10 = v76;
        }
        v65 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v65)
        {
          result = (uint64_t *)sub_1ACBFF5AC(v11, 118, v61, 2, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v11 + 144) = v65 + 1;
          v66 = *(_QWORD *)(v11 + 136) + 40 * v65;
          *(_DWORD *)v66 = 118;
          *(_DWORD *)(v66 + 4) = v61;
          *(_DWORD *)(v66 + 8) = 2;
          *(_QWORD *)(v66 + 12) = 0;
          *(_QWORD *)(v66 + 28) = 0;
          *(_QWORD *)(v66 + 20) = 0;
          *(_DWORD *)(v66 + 36) = 0;
        }
        if (*(_BYTE *)(*(_QWORD *)v11 + 103))
        {
          if (v59)
          {
            if (!*(_QWORD *)(*(_QWORD *)v11 + 816))
            {
              v46 = (*(_DWORD *)v59)-- == 1;
              if (v46)
                result = sub_1ACBF0674((_QWORD *)v59[2], v59);
            }
          }
        }
        else
        {
          v67 = *(_QWORD *)(v11 + 136) + 40 * *(int *)(v11 + 144);
          *(_BYTE *)(v67 - 39) = -8;
          *(_QWORD *)(v67 - 24) = v59;
        }
        v50 = (*(_DWORD *)(v42 + 104) + 1);
        v68 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v68)
        {
          v52 = v11;
          v53 = 71;
          v47 = 0;
          goto LABEL_72;
        }
        *(_DWORD *)(v11 + 144) = v68 + 1;
        v43 = *(_QWORD *)(v11 + 136) + 40 * v68;
        *(_QWORD *)v43 = 71;
      }
      else
      {
        v45 = *(char **)(v44 + 56);
        v46 = v45 == "nth_value" || v45 == "first_value";
        if (v46)
        {
          v47 = *(unsigned int *)(v8 + 52);
          v48 = *(_DWORD *)(v8 + 56);
          *(_DWORD *)(v42 + 100) = v47;
          *(_DWORD *)(v42 + 104) = v48 + 1;
          *(_DWORD *)(v8 + 52) = v47 + 1;
          *(_DWORD *)(v8 + 56) = v48 + 2;
        }
        else
        {
          if (v45 != "lead" && v45 != "lag")
            goto LABEL_30;
          v47 = *(unsigned int *)(v8 + 52);
          *(_DWORD *)(v8 + 52) = v47 + 1;
          *(_DWORD *)(v42 + 100) = v47;
        }
        v50 = *(unsigned int *)(v10 + 88);
        v51 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) <= v51)
        {
          v52 = v11;
          v53 = 115;
LABEL_72:
          result = (uint64_t *)sub_1ACBFF5AC(v52, v53, v47, v50, 0, a6, a7, a8);
          goto LABEL_30;
        }
        *(_DWORD *)(v11 + 144) = v51 + 1;
        v43 = *(_QWORD *)(v11 + 136) + 40 * v51;
        *(_DWORD *)v43 = 115;
        *(_DWORD *)(v43 + 4) = v47;
      }
      *(_DWORD *)(v43 + 8) = v50;
      *(_QWORD *)(v43 + 12) = 0;
      *(_QWORD *)(v43 + 28) = 0;
      *(_QWORD *)(v43 + 20) = 0;
      *(_DWORD *)(v43 + 36) = 0;
LABEL_30:
      v42 = *(_QWORD *)(v42 + 64);
      if (!v42)
        return result;
    }
  }
LABEL_24:
  v38 = *(_DWORD *)(v8 + 52);
  v37 = *(_DWORD *)(v8 + 56);
  v39 = (v37 + 1);
  v37 += 2;
  *(_DWORD *)(v10 + 132) = v39;
  *(_DWORD *)(v10 + 136) = v37;
  *(_DWORD *)(v8 + 52) = v38 + 1;
  *(_DWORD *)(v8 + 56) = v37;
  *(_DWORD *)(v10 + 100) = v38;
  v40 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v40)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 71, 1, v39, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v40 + 1;
    v41 = *(_QWORD *)(v11 + 136) + 40 * v40;
    *(_QWORD *)v41 = 0x100000047;
    *(_DWORD *)(v41 + 8) = v39;
    *(_QWORD *)(v41 + 12) = 0;
    *(_QWORD *)(v41 + 28) = 0;
    *(_QWORD *)(v41 + 20) = 0;
    *(_DWORD *)(v41 + 36) = 0;
  }
  v69 = *(unsigned int *)(v10 + 136);
  v70 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v70)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 71, 0, v69, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v70 + 1;
    v71 = *(_QWORD *)(v11 + 136) + 40 * v70;
    *(_QWORD *)v71 = 71;
    *(_DWORD *)(v71 + 8) = v69;
    *(_QWORD *)(v71 + 12) = 0;
    *(_QWORD *)(v71 + 28) = 0;
    *(_QWORD *)(v71 + 20) = 0;
    *(_DWORD *)(v71 + 36) = 0;
  }
  v72 = *(unsigned int *)(v10 + 100);
  v73 = *(unsigned int *)(v10 + 88);
  v74 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v74)
    return (uint64_t *)sub_1ACBFF5AC(v11, 115, v72, v73, 0, a6, a7, a8);
  *(_DWORD *)(v11 + 144) = v74 + 1;
  v75 = *(_QWORD *)(v11 + 136) + 40 * v74;
  *(_DWORD *)v75 = 115;
  *(_DWORD *)(v75 + 4) = v72;
  *(_DWORD *)(v75 + 8) = v73;
  *(_QWORD *)(v75 + 12) = 0;
  *(_QWORD *)(v75 + 28) = 0;
  *(_QWORD *)(v75 + 20) = 0;
  *(_DWORD *)(v75 + 36) = 0;
  return result;
}

uint64_t sub_1ACC16150(uint64_t *a1, uint64_t a2, uint64_t **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;
  int v20;
  int v21;
  uint64_t v22;
  char *v23;
  BOOL v24;
  BOOL v25;
  int v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  unsigned int v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  _DWORD *v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  int *v89;
  int v90;
  char *v91;
  uint64_t v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  char *v133;
  int v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  int v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  int v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  int v206;
  uint64_t v207;
  int v208;
  char *v209;
  uint64_t v210;
  int v211;
  int v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  int v229;
  uint64_t result;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  int v234;
  char *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  char *v250;
  int v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  char *v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  int v266;
  int v267;
  uint64_t v268;
  int v269;
  uint64_t v270;
  int v271;
  unsigned int v272;
  int v273;
  unsigned int v274;
  unsigned int v275;
  uint64_t v276;
  int *v277;
  unsigned int v278;
  unsigned int v279;
  int v280;
  unsigned int v281;
  unsigned int v283;
  unsigned int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  unsigned int v288;
  unsigned int v289;
  uint64_t *v290;
  uint64_t v291[3];
  int v292;
  int v293;
  __int128 v294;
  _OWORD v295[2];

  v8 = a5;
  v9 = a4;
  v11 = (uint64_t)a1;
  v12 = *(_QWORD *)(a2 + 112);
  v13 = *(int **)(v12 + 24);
  v14 = a1[2];
  if (!v14)
  {
    if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
      *((_BYTE *)a1 + 35) = 1;
    v14 = sub_1ACBCB4C8(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  v15 = *(_QWORD *)(a2 + 40);
  v16 = *(unsigned int *)(v15 + 72);
  v17 = *(__int16 *)(*(_QWORD *)(v15 + 40) + 54);
  v18 = *(_DWORD *)(v11 + 68);
  v287 = v18 - 1;
  *(_DWORD *)(v11 + 68) = v18 - 1;
  v294 = 0u;
  memset(v295, 0, 24);
  v291[0] = v11;
  v291[1] = v12;
  v291[2] = v14;
  v292 = v8;
  v293 = v9;
  DWORD1(v295[0]) = *(_DWORD *)(v12 + 88);
  v19 = DWORD1(v295[0]);
  HIDWORD(v294) = DWORD1(v295[0]) + 2;
  v20 = DWORD1(v295[0]) + 3;
  *(_QWORD *)((char *)v295 + 12) = (DWORD1(v295[0]) + 3);
  v21 = *(unsigned __int8 *)(v12 + 33);
  v280 = v18;
  v275 = DWORD1(v295[0]) + 2;
  if (v21 != 90)
  {
    if (v21 == 86)
    {
      if (*(_BYTE *)(v12 + 32) == 89 || !sub_1ACC293B4((uint64_t *)v11, *(unsigned __int8 **)(v12 + 40)))
        goto LABEL_31;
LABEL_29:
      v27 = 1;
    }
    else
    {
      v27 = 2;
    }
LABEL_30:
    DWORD1(v294) = v27;
    goto LABEL_31;
  }
  if (!*(_DWORD *)(v12 + 132))
  {
    v22 = v12;
    while (1)
    {
      v23 = *(char **)(*(_QWORD *)(v22 + 80) + 56);
      v24 = v23 == "lag" || v23 == "lead";
      v25 = v24 || v23 == "nth_value";
      if (v25 || v23 == "first_value")
        break;
      v22 = *(_QWORD *)(v22 + 64);
      if (!v22)
      {
        if (*(_BYTE *)(v12 + 34) != 88)
          goto LABEL_29;
        if (*(_BYTE *)(v12 + 32) != 89 && sub_1ACC293B4((uint64_t *)v11, *(unsigned __int8 **)(v12 + 48)))
        {
          v27 = 3;
          goto LABEL_30;
        }
        break;
      }
    }
  }
LABEL_31:
  v28 = *(_DWORD *)(v11 + 56);
  v29 = v28 + v17;
  v30 = (v28 + v17 + 2);
  *(_DWORD *)(v11 + 56) = v30;
  DWORD2(v294) = v28 + v17 + 2;
  v31 = *(unsigned __int8 *)(v12 + 33);
  if (v31 == 88 || v31 == 86)
  {
    v32 = v29 + 3;
    *(_DWORD *)(v11 + 56) = v29 + 3;
    v33 = v29 + 3;
  }
  else
  {
    v33 = 0;
    v32 = v29 + 2;
  }
  v34 = *(unsigned __int8 *)(v12 + 34);
  v278 = v20;
  if (v34 == 88 || v34 == 86)
  {
    *(_DWORD *)(v11 + 56) = ++v32;
    v35 = v32;
  }
  else
  {
    v35 = 0;
  }
  v36 = (v28 + 1);
  v290 = (uint64_t *)v11;
  v283 = v33;
  v281 = v35;
  v277 = v13;
  if (*(_BYTE *)(v12 + 32) == 76)
  {
    v276 = 0;
    v274 = 0;
    v284 = 0;
    v285 = 0;
  }
  else
  {
    if (v13)
      v37 = *v13;
    else
      v37 = 0;
    v38 = *(_DWORD *)(v12 + 120) + v36;
    v39 = *(_DWORD **)(v12 + 16);
    if (v39)
      v38 += *v39;
    v284 = v38;
    v285 = v32 + 1;
    v40 = v37 + v32;
    v41 = v40 + 1;
    v42 = v40 + v37;
    v274 = v41;
    LODWORD(v295[0]) = v41;
    LODWORD(v276) = v42 + 1;
    DWORD2(v295[0]) = v42 + 1;
    v43 = v42 + v37;
    HIDWORD(v276) = v43 + 1;
    LODWORD(v295[1]) = v43 + 1;
    *(_DWORD *)(v11 + 56) = v43 + v37;
  }
  v288 = v29 + 1;
  if ((int)v17 >= 1)
  {
    v44 = 0;
    do
    {
      a5 = (v36 + v44);
      v46 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) > v46)
      {
        *(_DWORD *)(v14 + 144) = v46 + 1;
        v45 = *(_QWORD *)(v14 + 136) + 40 * v46;
        *(_DWORD *)v45 = 94;
        *(_DWORD *)(v45 + 4) = v16;
        *(_DWORD *)(v45 + 8) = v44;
        *(_DWORD *)(v45 + 12) = a5;
        *(_QWORD *)(v45 + 24) = 0;
        *(_QWORD *)(v45 + 32) = 0;
        *(_QWORD *)(v45 + 16) = 0;
      }
      else
      {
        sub_1ACBFF5AC(v14, 94, v16, v44, a5, a6, a7, a8);
      }
      v44 = (v44 + 1);
    }
    while ((_DWORD)v17 != (_DWORD)v44);
  }
  v47 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v47)
  {
    sub_1ACBFF5AC(v14, 97, v36, v17, v288, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v47 + 1;
    v48 = *(_QWORD *)(v14 + 136) + 40 * v47;
    *(_DWORD *)v48 = 97;
    *(_DWORD *)(v48 + 4) = v36;
    *(_DWORD *)(v48 + 8) = v17;
    *(_DWORD *)(v48 + 12) = v288;
    *(_QWORD *)(v48 + 24) = 0;
    *(_QWORD *)(v48 + 32) = 0;
    *(_QWORD *)(v48 + 16) = 0;
  }
  v279 = v19;
  v49 = v19 + 1;
  v50 = *(_QWORD *)(v12 + 16);
  v286 = v49;
  if (v50)
  {
    v51 = *(unsigned int *)v50;
    v52 = *(_DWORD *)(v12 + 120);
    v53 = sub_1ACC092C0(*(_QWORD *)v11, *(_DWORD *)v50, 1);
    v56 = v53;
    v272 = v51 - 1;
    if ((int)v51 >= 1 && v53 != 0)
    {
      v62 = 0;
      v63 = v50 + 8;
      do
      {
        v64 = sub_1ACB78620((uint64_t)v290, *(unsigned __int8 **)v63, v54, v55, a5, a6, a7, a8);
        if (!v64)
          v64 = *(_QWORD *)(*v290 + 16);
        *(_QWORD *)(v56 + 32 + 8 * v62) = v64;
        *(_BYTE *)(*(_QWORD *)(v56 + 24) + v62++) = *(_BYTE *)(v63 + 16);
        v63 += 24;
      }
      while (v51 != v62);
    }
    v58 = (v52 + v36);
    v50 = (*((_DWORD *)v290 + 14) + 1);
    *((_DWORD *)v290 + 14) = v50;
    v59 = *(unsigned int *)(v12 + 108);
    v60 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v60)
    {
      v60 = sub_1ACBFF5AC(v14, 90, v58, v59, v51, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v60 + 1;
      v61 = *(_QWORD *)(v14 + 136) + 40 * v60;
      *(_DWORD *)v61 = 90;
      *(_DWORD *)(v61 + 4) = v58;
      *(_DWORD *)(v61 + 8) = v59;
      *(_DWORD *)(v61 + 12) = v51;
      *(_QWORD *)(v61 + 24) = 0;
      *(_QWORD *)(v61 + 32) = 0;
      *(_QWORD *)(v61 + 16) = 0;
    }
    if (*(_BYTE *)(*(_QWORD *)v14 + 103))
    {
      v49 = v286;
      if (v56)
      {
        if (!*(_QWORD *)(*(_QWORD *)v14 + 816))
        {
          v24 = (*(_DWORD *)v56)-- == 1;
          if (v24)
            sub_1ACBF0674(*(_QWORD **)(v56 + 16), (_QWORD *)v56);
        }
      }
    }
    else
    {
      v65 = *(_QWORD *)(v14 + 136) + 40 * *(int *)(v14 + 144);
      *(_BYTE *)(v65 - 39) = -8;
      *(_QWORD *)(v65 - 24) = v56;
      v49 = v286;
    }
    v66 = (v60 + 2);
    v67 = (v60 + 4);
    v68 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v68)
    {
      sub_1ACBFF5AC(v14, 14, v66, v67, (v60 + 2), a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v68 + 1;
      v69 = *(_QWORD *)(v14 + 136) + 40 * v68;
      *(_DWORD *)v69 = 14;
      *(_DWORD *)(v69 + 4) = v66;
      *(_DWORD *)(v69 + 8) = v67;
      *(_DWORD *)(v69 + 12) = v66;
      *(_QWORD *)(v69 + 24) = 0;
      *(_QWORD *)(v69 + 32) = 0;
      *(_QWORD *)(v69 + 16) = 0;
    }
    v11 = (uint64_t)v290;
    v70 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v70)
    {
      v271 = sub_1ACBFF5AC(v14, 10, v50, 0, 0, a6, a7, a8);
    }
    else
    {
      v271 = *(_DWORD *)(v14 + 144);
      *(_DWORD *)(v14 + 144) = v70 + 1;
      v71 = *(_QWORD *)(v14 + 136) + 40 * v70;
      *(_DWORD *)v71 = 10;
      *(_DWORD *)(v71 + 4) = v50;
      *(_OWORD *)(v71 + 8) = 0u;
      *(_OWORD *)(v71 + 24) = 0u;
    }
    a4 = *(unsigned int *)(v12 + 108);
    v72 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v72)
    {
      sub_1ACBFF5AC(v14, 80, v58, a4, v272, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v72 + 1;
      v73 = *(_QWORD *)(v14 + 136) + 40 * v72;
      *(_DWORD *)v73 = 80;
      *(_DWORD *)(v73 + 4) = v58;
      *(_DWORD *)(v73 + 8) = a4;
      *(_DWORD *)(v73 + 12) = v272;
      *(_QWORD *)(v73 + 24) = 0;
      *(_QWORD *)(v73 + 32) = 0;
      *(_QWORD *)(v73 + 16) = 0;
    }
  }
  else
  {
    v271 = 0;
  }
  v74 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v74)
  {
    sub_1ACBFF5AC(v14, 127, v49, v30, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v74 + 1;
    v75 = *(_QWORD *)(v14 + 136) + 40 * v74;
    *(_DWORD *)v75 = 127;
    *(_DWORD *)(v75 + 4) = v49;
    *(_DWORD *)(v75 + 8) = v30;
    *(_QWORD *)(v75 + 12) = 0;
    *(_QWORD *)(v75 + 28) = 0;
    *(_QWORD *)(v75 + 20) = 0;
    *(_DWORD *)(v75 + 36) = 0;
  }
  v76 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v76)
  {
    sub_1ACBFF5AC(v14, 128, v49, v288, v30, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v76 + 1;
    v77 = *(_QWORD *)(v14 + 136) + 40 * v76;
    *(_DWORD *)v77 = 128;
    *(_DWORD *)(v77 + 4) = v49;
    *(_DWORD *)(v77 + 8) = v288;
    *(_DWORD *)(v77 + 12) = v30;
    *(_QWORD *)(v77 + 24) = 0;
    *(_QWORD *)(v77 + 32) = 0;
    *(_QWORD *)(v77 + 16) = 0;
  }
  v78 = *(unsigned int *)(v12 + 128);
  v79 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v79)
  {
    v273 = sub_1ACBFF5AC(v14, 52, v78, 0, v30, a6, a7, a8);
    v81 = *(_QWORD *)(v11 + 16);
    if (!v81)
      goto LABEL_95;
  }
  else
  {
    v273 = *(_DWORD *)(v14 + 144);
    *(_DWORD *)(v14 + 144) = v79 + 1;
    v80 = *(_QWORD *)(v14 + 136) + 40 * v79;
    *(_DWORD *)v80 = 52;
    *(_DWORD *)(v80 + 4) = v78;
    *(_DWORD *)(v80 + 8) = 0;
    *(_DWORD *)(v80 + 12) = v30;
    *(_QWORD *)(v80 + 24) = 0;
    *(_QWORD *)(v80 + 32) = 0;
    *(_QWORD *)(v80 + 16) = 0;
    v81 = *(_QWORD *)(v11 + 16);
    if (!v81)
    {
LABEL_95:
      if (!*(_QWORD *)(v11 + 168) && (*(_BYTE *)(*(_QWORD *)v11 + 96) & 8) == 0)
        *(_BYTE *)(v11 + 35) = 1;
      v81 = sub_1ACBCB4C8((uint64_t *)v11, a2, v78, a4, a5, a6, a7, a8);
    }
  }
  v289 = v50;
  v82 = 0;
  v83 = v12;
  do
  {
    v85 = *(_QWORD *)(v83 + 80);
    v86 = *(unsigned int *)(v83 + 92);
    v87 = *(_DWORD *)(v81 + 144);
    if (*(_DWORD *)(v81 + 148) <= v87)
    {
      sub_1ACBFF5AC(v81, 75, 0, v86, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v81 + 144) = v87 + 1;
      v88 = *(_QWORD *)(v81 + 136) + 40 * v87;
      *(_QWORD *)v88 = 75;
      *(_DWORD *)(v88 + 8) = v86;
      *(_QWORD *)(v88 + 12) = 0;
      *(_QWORD *)(v88 + 28) = 0;
      *(_QWORD *)(v88 + 20) = 0;
      *(_DWORD *)(v88 + 36) = 0;
    }
    v89 = *(int **)(*(_QWORD *)(v83 + 112) + 32);
    if (!v89)
    {
      if (v82 > 0)
        goto LABEL_111;
      v90 = 0;
LABEL_110:
      v82 = v90;
      goto LABEL_111;
    }
    v90 = *v89;
    if (v82 <= v90)
      goto LABEL_110;
LABEL_111:
    if (*(_DWORD *)(v12 + 132))
      goto LABEL_101;
    v91 = *(char **)(v85 + 56);
    if (v91 == "nth_value" || v91 == "first_value")
    {
      v93 = *(unsigned int *)(v83 + 104);
      v94 = *(_DWORD *)(v81 + 144);
      if (*(_DWORD *)(v81 + 148) <= v94)
      {
        sub_1ACBFF5AC(v81, 71, 0, v93, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v81 + 144) = v94 + 1;
        v95 = *(_QWORD *)(v81 + 136) + 40 * v94;
        *(_QWORD *)v95 = 71;
        *(_DWORD *)(v95 + 8) = v93;
        *(_QWORD *)(v95 + 12) = 0;
        *(_QWORD *)(v95 + 28) = 0;
        *(_QWORD *)(v95 + 20) = 0;
        *(_DWORD *)(v95 + 36) = 0;
      }
      v86 = (*(_DWORD *)(v83 + 104) + 1);
      v96 = *(_DWORD *)(v81 + 144);
      if (*(_DWORD *)(v81 + 148) <= v96)
      {
        sub_1ACBFF5AC(v81, 71, 0, v86, 0, a6, a7, a8);
        if ((*(_BYTE *)(v85 + 5) & 0x10) == 0)
          goto LABEL_101;
        goto LABEL_125;
      }
      *(_DWORD *)(v81 + 144) = v96 + 1;
      v97 = *(_QWORD *)(v81 + 136) + 40 * v96;
      *(_QWORD *)v97 = 71;
      *(_DWORD *)(v97 + 8) = v86;
      *(_QWORD *)(v97 + 12) = 0;
      *(_QWORD *)(v97 + 28) = 0;
      *(_QWORD *)(v97 + 20) = 0;
      *(_DWORD *)(v97 + 36) = 0;
    }
    if ((*(_BYTE *)(v85 + 5) & 0x10) == 0)
      goto LABEL_101;
LABEL_125:
    v78 = *(unsigned int *)(v83 + 100);
    if ((_DWORD)v78)
    {
      v98 = *(_DWORD *)(v81 + 144);
      if (*(_DWORD *)(v81 + 148) <= v98)
      {
        sub_1ACBFF5AC(v81, 146, v78, 0, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v81 + 144) = v98 + 1;
        v99 = *(_QWORD *)(v81 + 136) + 40 * v98;
        *(_DWORD *)v99 = 146;
        *(_DWORD *)(v99 + 4) = v78;
        *(_OWORD *)(v99 + 8) = 0u;
        *(_OWORD *)(v99 + 24) = 0u;
      }
      v86 = (*(_DWORD *)(v83 + 104) + 1);
      v100 = *(_DWORD *)(v81 + 144);
      if (*(_DWORD *)(v81 + 148) > v100)
      {
        *(_DWORD *)(v81 + 144) = v100 + 1;
        v84 = *(_QWORD *)(v81 + 136) + 40 * v100;
        *(_QWORD *)v84 = 71;
        *(_DWORD *)(v84 + 8) = v86;
        *(_QWORD *)(v84 + 12) = 0;
        *(_QWORD *)(v84 + 28) = 0;
        *(_QWORD *)(v84 + 20) = 0;
        *(_DWORD *)(v84 + 36) = 0;
      }
      else
      {
        sub_1ACBFF5AC(v81, 71, 0, v86, 0, a6, a7, a8);
      }
    }
LABEL_101:
    v83 = *(_QWORD *)(v83 + 64);
  }
  while (v83);
  v101 = *((_DWORD *)v290 + 14);
  *((_DWORD *)v290 + 14) = v101 + v82;
  LODWORD(v294) = v101 + 1;
  if (v283)
  {
    sub_1ACC08D80((uint64_t)v290, *(unsigned __int8 **)(v12 + 40), v283);
    if (*(_BYTE *)(v12 + 32) == 89)
      v107 = 3;
    else
      v107 = 0;
    sub_1ACC294B0(v290, v283, v107, v102, v103, v104, v105, v106);
  }
  v108 = v50;
  v109 = v285;
  if (v281)
  {
    sub_1ACC08D80((uint64_t)v290, *(unsigned __int8 **)(v12 + 48), v281);
    if (*(_BYTE *)(v12 + 32) == 89)
      v115 = 4;
    else
      v115 = 1;
    sub_1ACC294B0(v290, v281, v115, v110, v111, v112, v113, v114);
  }
  if (*(_BYTE *)(v12 + 32) == 89)
  {
LABEL_163:
    v116 = *(unsigned __int8 *)(v12 + 33);
  }
  else
  {
    v116 = *(unsigned __int8 *)(v12 + 33);
    if (v283 && v116 == *(unsigned __int8 *)(v12 + 34))
    {
      if (v116 == 86)
        v117 = 57;
      else
        v117 = 55;
      v118 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v118)
      {
        v118 = sub_1ACBFF5AC(v14, v117, v283, 0, v281, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v118 + 1;
        v119 = *(_QWORD *)(v14 + 136) + 40 * v118;
        *(_BYTE *)v119 = v117;
        *(_WORD *)(v119 + 2) = 0;
        *(_DWORD *)(v119 + 4) = v283;
        *(_DWORD *)(v119 + 8) = 0;
        *(_DWORD *)(v119 + 12) = v281;
        *(_BYTE *)(v119 + 1) = 0;
        *(_QWORD *)(v119 + 24) = 0;
        *(_QWORD *)(v119 + 32) = 0;
        *(_QWORD *)(v119 + 16) = 0;
      }
      sub_1ACC29820((uint64_t)v291, 0, v78, v86, a5, a6, a7, a8);
      v127 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v127)
      {
        sub_1ACBFF5AC(v14, 36, v279, 0, 0, v124, v125, v126);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v127 + 1;
        v128 = *(_QWORD *)(v14 + 136) + 40 * v127;
        *(_DWORD *)v128 = 36;
        *(_DWORD *)(v128 + 4) = v279;
        *(_OWORD *)(v128 + 8) = 0u;
        *(_OWORD *)(v128 + 24) = 0u;
      }
      sub_1ACC29BCC((uint64_t)v291, v120, v121, v122, v123, v124, v125, v126);
      v129 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v129)
      {
        sub_1ACBFF5AC(v14, 146, v279, 0, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v129 + 1;
        v130 = *(_QWORD *)(v14 + 136) + 40 * v129;
        *(_DWORD *)v130 = 146;
        *(_DWORD *)(v130 + 4) = v279;
        *(_OWORD *)(v130 + 8) = 0u;
        *(_OWORD *)(v130 + 24) = 0u;
      }
      v131 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v131)
      {
        sub_1ACBFF5AC(v14, 9, 0, v287, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v131 + 1;
        v132 = *(_QWORD *)(v14 + 136) + 40 * v131;
        *(_QWORD *)v132 = 9;
        *(_DWORD *)(v132 + 8) = v287;
        *(_QWORD *)(v132 + 12) = 0;
        *(_QWORD *)(v132 + 28) = 0;
        *(_QWORD *)(v132 + 20) = 0;
        *(_DWORD *)(v132 + 36) = 0;
      }
      if (*(_BYTE *)(*(_QWORD *)v14 + 103))
        v133 = &byte_1EECAD280;
      else
        v133 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v118);
      v109 = v285;
      *((_DWORD *)v133 + 2) = *(_DWORD *)(v14 + 144);
      goto LABEL_163;
    }
  }
  if (v116 == 86 && v281 && *(_BYTE *)(v12 + 32) != 89)
  {
    v134 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v134)
    {
      sub_1ACBFF5AC(v14, 107, v283, v281, v283, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v134 + 1;
      v135 = *(_QWORD *)(v14 + 136) + 40 * v134;
      *(_DWORD *)v135 = 107;
      *(_DWORD *)(v135 + 4) = v283;
      *(_DWORD *)(v135 + 8) = v281;
      *(_DWORD *)(v135 + 12) = v283;
      *(_QWORD *)(v135 + 24) = 0;
      *(_QWORD *)(v135 + 32) = 0;
      *(_QWORD *)(v135 + 16) = 0;
    }
  }
  if (*(_BYTE *)(v12 + 33) != 90)
  {
    v136 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v136)
    {
      sub_1ACBFF5AC(v14, 36, v275, 0, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v136 + 1;
      v137 = *(_QWORD *)(v14 + 136) + 40 * v136;
      *(_DWORD *)v137 = 36;
      *(_DWORD *)(v137 + 4) = v275;
      *(_OWORD *)(v137 + 8) = 0u;
      *(_OWORD *)(v137 + 24) = 0u;
    }
  }
  v138 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v138)
  {
    sub_1ACBFF5AC(v14, 36, v279, 0, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v138 + 1;
    v139 = *(_QWORD *)(v14 + 136) + 40 * v138;
    *(_DWORD *)v139 = 36;
    *(_DWORD *)(v139 + 4) = v279;
    *(_OWORD *)(v139 + 8) = 0u;
    *(_OWORD *)(v139 + 24) = 0u;
  }
  v140 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v140)
  {
    sub_1ACBFF5AC(v14, 36, v278, 0, 0, a6, a7, a8);
    if (!(_DWORD)v109)
      goto LABEL_194;
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v140 + 1;
    v141 = *(_QWORD *)(v14 + 136) + 40 * v140;
    *(_DWORD *)v141 = 36;
    *(_DWORD *)(v141 + 4) = v278;
    *(_OWORD *)(v141 + 8) = 0u;
    *(_OWORD *)(v141 + 24) = 0u;
    if (!(_DWORD)v109)
      goto LABEL_194;
  }
  if (v277)
  {
    v142 = (*v277 - 1);
    v143 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v143)
    {
      sub_1ACBFF5AC(v14, 80, v284, v109, v142, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v143 + 1;
      v144 = *(_QWORD *)(v14 + 136) + 40 * v143;
      *(_DWORD *)v144 = 80;
      *(_DWORD *)(v144 + 4) = v284;
      *(_DWORD *)(v144 + 8) = v109;
      *(_DWORD *)(v144 + 12) = v142;
      *(_QWORD *)(v144 + 24) = 0;
      *(_QWORD *)(v144 + 32) = 0;
      *(_QWORD *)(v144 + 16) = 0;
    }
    v145 = (*v277 - 1);
    v146 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v146)
    {
      sub_1ACBFF5AC(v14, 80, v109, v274, v145, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v146 + 1;
      v147 = *(_QWORD *)(v14 + 136) + 40 * v146;
      *(_DWORD *)v147 = 80;
      *(_DWORD *)(v147 + 4) = v109;
      *(_DWORD *)(v147 + 8) = v274;
      *(_DWORD *)(v147 + 12) = v145;
      *(_QWORD *)(v147 + 24) = 0;
      *(_QWORD *)(v147 + 32) = 0;
      *(_QWORD *)(v147 + 16) = 0;
    }
    v148 = (*v277 - 1);
    v149 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v149)
    {
      sub_1ACBFF5AC(v14, 80, v109, v276, v148, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v149 + 1;
      v150 = *(_QWORD *)(v14 + 136) + 40 * v149;
      *(_DWORD *)v150 = 80;
      *(_DWORD *)(v150 + 4) = v109;
      *(_DWORD *)(v150 + 8) = v276;
      *(_DWORD *)(v150 + 12) = v148;
      *(_QWORD *)(v150 + 24) = 0;
      *(_QWORD *)(v150 + 32) = 0;
      *(_QWORD *)(v150 + 16) = 0;
    }
    a5 = (*v277 - 1);
    v151 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v151)
    {
      sub_1ACBFF5AC(v14, 80, v109, HIDWORD(v276), a5, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v151 + 1;
      v152 = *(_QWORD *)(v14 + 136) + 40 * v151;
      *(_DWORD *)v152 = 80;
      *(_DWORD *)(v152 + 4) = v109;
      *(_DWORD *)(v152 + 8) = HIDWORD(v276);
      *(_DWORD *)(v152 + 12) = a5;
      *(_QWORD *)(v152 + 24) = 0;
      *(_QWORD *)(v152 + 32) = 0;
      *(_QWORD *)(v152 + 16) = 0;
    }
  }
LABEL_194:
  v153 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v153)
  {
    sub_1ACBFF5AC(v14, 9, 0, v287, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v153 + 1;
    v154 = *(_QWORD *)(v14 + 136) + 40 * v153;
    *(_QWORD *)v154 = 9;
    *(_DWORD *)(v154 + 8) = v287;
    *(_QWORD *)(v154 + 12) = 0;
    *(_QWORD *)(v154 + 28) = 0;
    *(_QWORD *)(v154 + 20) = 0;
    *(_DWORD *)(v154 + 36) = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)v14 + 103))
  {
    dword_1EECAD288 = *(_DWORD *)(v14 + 144);
    if ((_DWORD)v109)
      goto LABEL_199;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v14 + 136) + 40 * v273 + 8) = *(_DWORD *)(v14 + 144);
    if ((_DWORD)v109)
LABEL_199:
      sub_1ACC2AC14(v290, v277, v284, v109, v287, a6, a7, a8);
  }
  v155 = *(unsigned __int8 *)(v12 + 33);
  if (v155 == 86)
  {
    sub_1ACC2AED8((uint64_t)v291, 3, 0, 0, a5, a6, a7, a8);
    if (*(_BYTE *)(v12 + 34) != 90)
    {
      if (*(_BYTE *)(v12 + 32) == 89)
      {
        v162 = *((_DWORD *)v290 + 17);
        v163 = (v162 - 1);
        *((_DWORD *)v290 + 17) = v163;
        v164 = *(unsigned int *)(v14 + 144);
        sub_1ACC2B778(v291, 57, v279, v281, v278, v163, v160, v161);
        sub_1ACC2AED8((uint64_t)v291, 2, v283, 0, v165, v166, v167, v168);
        sub_1ACC2AED8((uint64_t)v291, 1, 0, 0, v169, v170, v171, v172);
        v173 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) <= v173)
        {
          sub_1ACBFF5AC(v14, 9, 0, v164, 0, v159, v160, v161);
        }
        else
        {
          *(_DWORD *)(v14 + 144) = v173 + 1;
          v174 = *(_QWORD *)(v14 + 136) + 40 * v173;
          *(_QWORD *)v174 = 9;
          *(_DWORD *)(v174 + 8) = v164;
          *(_QWORD *)(v174 + 12) = 0;
          *(_QWORD *)(v174 + 28) = 0;
          *(_QWORD *)(v174 + 20) = 0;
          *(_DWORD *)(v174 + 36) = 0;
        }
        v185 = *(_QWORD *)(v14 + 24);
        v186 = -v162;
        goto LABEL_236;
      }
      v184 = v281;
LABEL_218:
      sub_1ACC2AED8((uint64_t)v291, 1, v184, 0, v158, v159, v160, v161);
      v180 = 2;
      v181 = v283;
LABEL_219:
      sub_1ACC2AED8((uint64_t)v291, v180, v181, 0, v176, v177, v178, v179);
    }
  }
  else
  {
    if (*(_BYTE *)(v12 + 34) == 88)
    {
      if (v155 == 88)
      {
        v175 = *(unsigned __int8 *)(v12 + 32);
        sub_1ACC2AED8((uint64_t)v291, 3, v281, 0, a5, a6, a7, a8);
        if (v175 == 89)
        {
          sub_1ACC2AED8((uint64_t)v291, 2, v283, 0, v158, v159, v160, v161);
          v180 = 1;
          v181 = 0;
          goto LABEL_219;
        }
      }
      else
      {
        sub_1ACC2AED8((uint64_t)v291, 3, v281, 0, a5, a6, a7, a8);
      }
      v184 = 0;
      goto LABEL_218;
    }
    sub_1ACC2AED8((uint64_t)v291, 3, 0, 0, a5, a6, a7, a8);
    if (*(_BYTE *)(v12 + 34) != 90)
    {
      if (*(_BYTE *)(v12 + 32) == 89)
      {
        v182 = *(unsigned int *)(v14 + 144);
        if (v281)
        {
          v183 = (*((_DWORD *)v290 + 17) - 1);
          *((_DWORD *)v290 + 17) = v183;
          sub_1ACC2B778(v291, 57, v279, v281, v278, v183, v160, v161);
        }
        else
        {
          LODWORD(v183) = 0;
        }
        sub_1ACC2AED8((uint64_t)v291, 1, 0, 0, v158, v159, v160, v161);
        sub_1ACC2AED8((uint64_t)v291, 2, v283, 0, v189, v190, v191, v192);
        if (v281)
        {
          v193 = *(_DWORD *)(v14 + 144);
          if (*(_DWORD *)(v14 + 148) <= v193)
          {
            sub_1ACBFF5AC(v14, 9, 0, v182, 0, v159, v160, v161);
          }
          else
          {
            *(_DWORD *)(v14 + 144) = v193 + 1;
            v194 = *(_QWORD *)(v14 + 136) + 40 * v193;
            *(_QWORD *)v194 = 9;
            *(_DWORD *)(v194 + 8) = v182;
            *(_QWORD *)(v194 + 12) = 0;
            *(_QWORD *)(v194 + 28) = 0;
            *(_QWORD *)(v194 + 20) = 0;
            *(_DWORD *)(v194 + 36) = 0;
          }
          v185 = *(_QWORD *)(v14 + 24);
          v186 = ~(_DWORD)v183;
LABEL_236:
          if (*(_DWORD *)(v185 + 68) + *(_DWORD *)(v185 + 72) < 0)
            sub_1ACC0D5D4(v185, v14, v186);
          else
            *(_DWORD *)(*(_QWORD *)(v185 + 80) + 4 * v186) = *(_DWORD *)(v14 + 144);
        }
      }
      else
      {
        if (v281)
        {
          v187 = *(_DWORD *)(v14 + 144);
          if (*(_DWORD *)(v14 + 148) <= v187)
          {
            v187 = sub_1ACBFF5AC(v14, 59, v281, 0, 1, v159, v160, v161);
          }
          else
          {
            *(_DWORD *)(v14 + 144) = v187 + 1;
            v188 = *(_QWORD *)(v14 + 136) + 40 * v187;
            *(_DWORD *)v188 = 59;
            *(_DWORD *)(v188 + 4) = v281;
            *(_QWORD *)(v188 + 8) = 0x100000000;
            *(_QWORD *)(v188 + 24) = 0;
            *(_QWORD *)(v188 + 32) = 0;
            *(_QWORD *)(v188 + 16) = 0;
          }
        }
        else
        {
          v187 = 0;
        }
        sub_1ACC2AED8((uint64_t)v291, 1, 0, 0, v158, v159, v160, v161);
        sub_1ACC2AED8((uint64_t)v291, 2, v283, 0, v195, v196, v197, v198);
        if (v281)
        {
          if (*(_BYTE *)(*(_QWORD *)v14 + 103))
            v199 = &byte_1EECAD280;
          else
            v199 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v187);
          *((_DWORD *)v199 + 2) = *(_DWORD *)(v14 + 144);
        }
      }
    }
  }
  v200 = *(_QWORD *)(v14 + 24);
  v201 = -v280;
  if (*(_DWORD *)(v200 + 68) + *(_DWORD *)(v200 + 72) < 0)
    sub_1ACC0D5D4(v200, v14, v201);
  else
    *(_DWORD *)(*(_QWORD *)(v200 + 80) + 4 * (int)v201) = *(_DWORD *)(v14 + 144);
  sub_1ACB7D270(a3, v156, v201, v157, v158, v159, v160, v161);
  v206 = *(_DWORD *)(v14 + 144);
  if (*(_QWORD *)(v12 + 16))
  {
    if (*(_DWORD *)(v14 + 148) <= v206)
    {
      v208 = sub_1ACBFF5AC(v14, 71, 0, v289, 0, v203, v204, v205);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v206 + 1;
      v207 = *(_QWORD *)(v14 + 136) + 40 * v206;
      *(_QWORD *)v207 = 71;
      *(_DWORD *)(v207 + 8) = v108;
      *(_QWORD *)(v207 + 12) = 0;
      *(_QWORD *)(v207 + 28) = 0;
      *(_QWORD *)(v207 + 20) = 0;
      *(_DWORD *)(v207 + 36) = 0;
      v208 = v206;
    }
    v206 = *(_DWORD *)(v14 + 144);
    if (*(_BYTE *)(*(_QWORD *)v14 + 103))
      v209 = &byte_1EECAD280;
    else
      v209 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v271);
    *((_DWORD *)v209 + 2) = v206;
  }
  else
  {
    v208 = 0;
  }
  DWORD2(v294) = 0;
  if (*(_DWORD *)(v14 + 148) <= v206)
  {
    v206 = sub_1ACBFF5AC(v14, 36, v286, 0, 0, v203, v204, v205);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v206 + 1;
    v210 = *(_QWORD *)(v14 + 136) + 40 * v206;
    *(_DWORD *)v210 = 36;
    *(_DWORD *)(v210 + 4) = v286;
    *(_OWORD *)(v210 + 8) = 0u;
    *(_OWORD *)(v210 + 24) = 0u;
  }
  v211 = *(unsigned __int8 *)(v12 + 33);
  if (*(_BYTE *)(v12 + 34) == 88)
  {
    if (v211 == 88)
    {
      v212 = *(unsigned __int8 *)(v12 + 32);
      sub_1ACC2AED8((uint64_t)v291, 3, v281, 0, v202, v203, v204, v205);
      if (v212 == 89)
      {
        v213 = 2;
        v214 = v283;
        goto LABEL_264;
      }
    }
    else
    {
      v213 = 3;
      v214 = v281;
LABEL_264:
      sub_1ACC2AED8((uint64_t)v291, v213, v214, 0, v202, v203, v204, v205);
    }
    result = sub_1ACC2AED8((uint64_t)v291, 1, 0, 0, v202, v203, v204, v205);
    v234 = *(_DWORD *)(v14 + 144);
    if (*(_BYTE *)(*(_QWORD *)v14 + 103))
    {
LABEL_266:
      v235 = &byte_1EECAD280;
      goto LABEL_277;
    }
  }
  else
  {
    sub_1ACC2AED8((uint64_t)v291, 3, 0, 0, v202, v203, v204, v205);
    if (v211 == 86)
    {
      if (*(_BYTE *)(v12 + 32) == 89)
      {
        v219 = *(unsigned int *)(v14 + 144);
        v220 = sub_1ACC2AED8((uint64_t)v291, 2, v283, 1, v215, v216, v217, v218);
        v229 = sub_1ACC2AED8((uint64_t)v291, 1, 0, 1, v221, v222, v223, v224);
      }
      else
      {
        v219 = *(unsigned int *)(v14 + 144);
        if (*(_BYTE *)(v12 + 34) == 90)
        {
          v229 = sub_1ACC2AED8((uint64_t)v291, 1, v283, 1, v215, v216, v217, v218);
          v248 = 0;
        }
        else
        {
          v229 = sub_1ACC2AED8((uint64_t)v291, 1, v281, 1, v215, v216, v217, v218);
          v248 = v283;
        }
        v220 = sub_1ACC2AED8((uint64_t)v291, 2, v248, 1, v244, v245, v246, v247);
      }
      v262 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v262)
      {
        sub_1ACBFF5AC(v14, 9, 0, v219, 0, v226, v227, v228);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v262 + 1;
        v263 = *(_QWORD *)(v14 + 136) + 40 * v262;
        *(_QWORD *)v263 = 9;
        *(_DWORD *)(v263 + 8) = v219;
        *(_QWORD *)(v263 + 12) = 0;
        *(_QWORD *)(v263 + 28) = 0;
        *(_QWORD *)(v263 + 20) = 0;
        *(_DWORD *)(v263 + 36) = 0;
      }
      v264 = *(unsigned int *)(v14 + 144);
      v265 = &byte_1EECAD280;
      if (!*(_BYTE *)(*(_QWORD *)v14 + 103))
        v265 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v220);
      *((_DWORD *)v265 + 2) = v264;
      result = sub_1ACC2AED8((uint64_t)v291, 1, 0, 1, v225, v226, v227, v228);
      v266 = result;
      v267 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v267)
      {
        result = sub_1ACBFF5AC(v14, 9, 0, v264, 0, v231, v232, v233);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v267 + 1;
        v268 = *(_QWORD *)(v14 + 136) + 40 * v267;
        *(_QWORD *)v268 = 9;
        *(_DWORD *)(v268 + 8) = v264;
        *(_QWORD *)(v268 + 12) = 0;
        *(_QWORD *)(v268 + 28) = 0;
        *(_QWORD *)(v268 + 20) = 0;
        *(_DWORD *)(v268 + 36) = 0;
      }
      v234 = *(_DWORD *)(v14 + 144);
      v269 = *(unsigned __int8 *)(*(_QWORD *)v14 + 103);
      if (*(_BYTE *)(*(_QWORD *)v14 + 103))
      {
        dword_1EECAD288 = *(_DWORD *)(v14 + 144);
        v108 = v289;
        if (v269)
          goto LABEL_266;
      }
      else
      {
        v270 = *(_QWORD *)(v14 + 136);
        *(_DWORD *)(v270 + 40 * v229 + 8) = v234;
        *(_DWORD *)(v270 + 40 * v266 + 8) = v234;
        v108 = v289;
        if (v269)
          goto LABEL_266;
      }
    }
    else
    {
      v236 = *(unsigned int *)(v14 + 144);
      v237 = sub_1ACC2AED8((uint64_t)v291, 1, 0, 1, v215, v216, v217, v218);
      result = sub_1ACC2AED8((uint64_t)v291, 2, v283, 0, v238, v239, v240, v241);
      v242 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v242)
      {
        result = sub_1ACBFF5AC(v14, 9, 0, v236, 0, v231, v232, v233);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v242 + 1;
        v243 = *(_QWORD *)(v14 + 136) + 40 * v242;
        *(_QWORD *)v243 = 9;
        *(_DWORD *)(v243 + 8) = v236;
        *(_QWORD *)(v243 + 12) = 0;
        *(_QWORD *)(v243 + 28) = 0;
        *(_QWORD *)(v243 + 20) = 0;
        *(_DWORD *)(v243 + 36) = 0;
      }
      v234 = *(_DWORD *)(v14 + 144);
      v249 = *(unsigned __int8 *)(*(_QWORD *)v14 + 103);
      if (*(_BYTE *)(*(_QWORD *)v14 + 103))
        v250 = &byte_1EECAD280;
      else
        v250 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v237);
      *((_DWORD *)v250 + 2) = v234;
      if (v249)
        goto LABEL_266;
    }
  }
  v235 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v206);
LABEL_277:
  *((_DWORD *)v235 + 2) = v234;
  v251 = DWORD1(v295[0]);
  if (*(_DWORD *)(v14 + 148) <= v234)
  {
    result = sub_1ACBFF5AC(v14, 146, DWORD1(v295[0]), 0, 0, v231, v232, v233);
    if (*(_QWORD *)(v12 + 16))
      goto LABEL_281;
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v234 + 1;
    v252 = *(_QWORD *)(v14 + 136) + 40 * v234;
    *(_DWORD *)v252 = 146;
    *(_DWORD *)(v252 + 4) = v251;
    *(_OWORD *)(v252 + 8) = 0u;
    *(_OWORD *)(v252 + 24) = 0u;
    if (!*(_QWORD *)(v12 + 16))
      return result;
LABEL_281:
    v253 = *(unsigned int *)(v12 + 132);
    if ((_DWORD)v253)
    {
      v254 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v254)
      {
        result = sub_1ACBFF5AC(v14, 71, 1, v253, 0, v231, v232, v233);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v254 + 1;
        v255 = *(_QWORD *)(v14 + 136) + 40 * v254;
        *(_QWORD *)v255 = 0x100000047;
        *(_DWORD *)(v255 + 8) = v253;
        *(_QWORD *)(v255 + 12) = 0;
        *(_QWORD *)(v255 + 28) = 0;
        *(_QWORD *)(v255 + 20) = 0;
        *(_DWORD *)(v255 + 36) = 0;
      }
      v256 = *(unsigned int *)(v12 + 136);
      v257 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v257)
      {
        result = sub_1ACBFF5AC(v14, 71, 0, v256, 0, v231, v232, v233);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v257 + 1;
        v258 = *(_QWORD *)(v14 + 136) + 40 * v257;
        *(_QWORD *)v258 = 71;
        *(_DWORD *)(v258 + 8) = v256;
        *(_QWORD *)(v258 + 12) = 0;
        *(_QWORD *)(v258 + 28) = 0;
        *(_QWORD *)(v258 + 20) = 0;
        *(_DWORD *)(v258 + 36) = 0;
      }
    }
    v259 = *(_DWORD *)(v14 + 144);
    if (*(_BYTE *)(*(_QWORD *)v14 + 103))
      v260 = &byte_1EECAD280;
    else
      v260 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v208);
    *((_DWORD *)v260 + 1) = v259;
    if (*(_DWORD *)(v14 + 148) <= v259)
    {
      return sub_1ACBFF5AC(v14, 67, v108, 0, 0, v231, v232, v233);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v259 + 1;
      v261 = *(_QWORD *)(v14 + 136) + 40 * v259;
      *(_DWORD *)v261 = 67;
      *(_DWORD *)(v261 + 4) = v108;
      *(_OWORD *)(v261 + 8) = 0u;
      *(_OWORD *)(v261 + 24) = 0u;
    }
  }
  return result;
}

_QWORD *sub_1ACC17A9C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)a2[3];
  if (v4)
    sub_1ACBE0F9C(a1, v4);
  v5 = (_QWORD *)a2[5];
  if (v5)
    sub_1ACBE0F9C(a1, v5);
  return sub_1ACBE0F9C(a1, a2);
}

uint64_t sub_1ACC17AE4(uint64_t result, int *a2)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[6];

  if (a2)
  {
    v3 = *a2;
    if (*a2 >= 1)
    {
      v4 = result;
      v5 = 0;
      v6 = 2;
      do
      {
        v7 = *(_QWORD *)&a2[v6];
        v8[2] = sub_1ACC18638;
        v8[3] = sub_1ACC1864C;
        v8[5] = v4;
        v8[0] = 0;
        v8[1] = sub_1ACBAB64C;
        if (v7)
        {
          v8[4] = 0;
          result = sub_1ACC0B714((uint64_t)v8, v7);
          v3 = *a2;
        }
        ++v5;
        v6 += 6;
      }
      while (v5 < v3);
    }
  }
  return result;
}

uint64_t sub_1ACC17B90(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v4;
  _BYTE *v6;
  const char *v7;
  _BYTE *i;
  uint64_t v9;
  uint64_t v10;
  const char *j;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  unsigned __int8 **k;
  unsigned __int8 *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v4 = *(_QWORD **)(a2 + 32);
  if (!v4 || *(_DWORD *)v4 != 1 || (*(_BYTE *)(a2 + 7) & 1) != 0 || (*(_BYTE *)(a1 + 98) & 1) != 0)
    return 0;
  v6 = *(_BYTE **)(a2 + 8);
  v7 = "min";
  for (i = v6; ; ++i)
  {
    v9 = *i;
    v10 = *(unsigned __int8 *)v7;
    if ((_DWORD)v9 == (_DWORD)v10)
      break;
    if (byte_1ACCB6333[v9] != byte_1ACCB6333[v10])
    {
      for (j = "max"; ; ++j)
      {
        v12 = *v6;
        v13 = *(unsigned __int8 *)j;
        if ((_DWORD)v12 == (_DWORD)v13)
        {
          if (!*v6)
          {
            v14 = 1;
            v15 = 2;
            goto LABEL_34;
          }
        }
        else if (byte_1ACCB6333[v12] != byte_1ACCB6333[v13])
        {
          return 0;
        }
        ++v6;
      }
    }
LABEL_7:
    ++v7;
  }
  if (*i)
    goto LABEL_7;
  for (k = (unsigned __int8 **)(v4 + 1); ; k = (unsigned __int8 **)(v18 + 16))
  {
    v18 = *k;
    v19 = *v18;
    if ((v19 - 173) >= 2)
      break;
  }
  if (v19 == 176)
    v19 = v18[2];
  if ((v19 - 153) < 3
    || v19 == 117
    || v19 == 167
    && (v18[6] & 0x20) == 0
    && (v20 = *((_QWORD *)v18 + 9)) != 0
    && ((v21 = *((unsigned int *)v18 + 12), (v21 & 0x80000000) != 0)
     || (v22 = *(_QWORD *)(v20 + 8)) == 0
     || (*(_BYTE *)(v22 + 16 * v21 + 8) & 0xF) != 0))
  {
    v14 = 0;
  }
  else
  {
    v14 = 2;
  }
  v15 = 1;
LABEL_34:
  v23 = sub_1ACB8B6B8(a1, v4, 0);
  *a3 = v23;
  if (v23)
    *((_BYTE *)v23 + 24) = v14;
  return v15;
}

uint64_t sub_1ACC17D10(uint64_t result, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t (*v15)(uint64_t);
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;

  v3 = *(_DWORD *)(a2 + 40) | 0x20000;
  *(_DWORD *)(a2 + 40) = v3;
  if (*(int *)(result + 48) >= 1)
  {
    v4 = result;
    v5 = 0;
    do
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 24 * v5);
      v7 = *(int **)(v6 + 32);
      if (v7)
      {
        v8 = *v7;
        if (*v7 >= 1)
        {
          v9 = 0;
          v10 = 2;
          do
          {
            v11 = *(_QWORD *)&v7[v10];
            v15 = sub_1ACC18638;
            v16 = sub_1ACC1864C;
            v18 = a2;
            v13 = 0;
            v14 = sub_1ACBAB64C;
            if (v11)
            {
              v17 = 0;
              result = sub_1ACC0B714((uint64_t)&v13, v11);
              v8 = *v7;
            }
            ++v9;
            v10 += 6;
          }
          while (v9 < v8);
        }
      }
      if ((*(_BYTE *)(v6 + 7) & 1) != 0)
      {
        v12 = *(_QWORD *)(*(_QWORD *)(v6 + 72) + 72);
        v15 = sub_1ACC18638;
        v16 = sub_1ACC1864C;
        v18 = a2;
        v13 = 0;
        v14 = sub_1ACBAB64C;
        if (v12)
        {
          v17 = 0;
          result = sub_1ACC0B714((uint64_t)&v13, v12);
        }
      }
      ++v5;
    }
    while (v5 < *(int *)(v4 + 48));
    v3 = *(_DWORD *)(a2 + 40);
  }
  *(_DWORD *)(a2 + 40) = v3 & 0xFFFDFFFF;
  return result;
}

uint64_t sub_1ACC17E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  signed int v4;
  uint64_t v5;
  uint64_t v6;
  int32x4_t v7;
  __int16 *v8;
  uint64_t v9;
  int32x4_t v10;
  int16x4_t v11;
  int16x4_t v12;
  __int16 *v13;
  uint64_t v14;
  signed int v15;
  signed int v16;

  v3 = *(unsigned int *)(a2 + 36);
  *(_DWORD *)(a2 + 32) = v3;
  if (*(_WORD *)(a2 + 2))
  {
    v4 = **(_DWORD **)(a1 + 56) - 1;
    if ((int)v3 >= 1)
    {
      v5 = *(_QWORD *)(a2 + 24);
      if (v3 < 8)
      {
        v6 = 0;
        goto LABEL_8;
      }
      v6 = v3 & 0x7FFFFFF8;
      v7 = vdupq_n_s32(v4);
      v8 = (__int16 *)(v5 + 118);
      v9 = v3 & 0xFFFFFFF8;
      v10 = v7;
      do
      {
        v11.i16[0] = *(v8 - 48);
        v11.i16[1] = *(v8 - 36);
        v11.i16[2] = *(v8 - 24);
        v11.i16[3] = *(v8 - 12);
        v12.i16[0] = *v8;
        v12.i16[1] = v8[12];
        v12.i16[2] = v8[24];
        v12.i16[3] = v8[36];
        v7 = vmaxq_s32(v7, vmovl_s16(v11));
        v10 = vmaxq_s32(v10, vmovl_s16(v12));
        v8 += 96;
        v9 -= 8;
      }
      while (v9);
      v4 = vmaxvq_s32(vmaxq_s32(v7, v10));
      if (v6 != v3)
      {
LABEL_8:
        v13 = (__int16 *)(v5 + 24 * v6 + 22);
        v14 = v3 - v6;
        do
        {
          v16 = *v13;
          v13 += 12;
          v15 = v16;
          if (v4 <= v16)
            v4 = v15;
          --v14;
        }
        while (v14);
      }
    }
    *(_WORD *)(a2 + 2) = v4 + 1;
  }
  return sub_1ACC17D10(a2, a3);
}

uint64_t sub_1ACC17F34(uint64_t result)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  _QWORD v6[2];
  __int128 v7;
  __int128 v8;

  v7 = 0u;
  v8 = 0u;
  v6[0] = 0;
  v6[1] = sub_1ACC2D40C;
  v1 = *(_DWORD *)(result + 48);
  if (v1 >= 1)
  {
    v2 = result;
    v3 = 0;
    for (i = 0; i < v1; ++i)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v2 + 40) + v3);
      if (v5)
      {
        result = sub_1ACC0B714((uint64_t)v6, v5);
        v1 = *(_DWORD *)(v2 + 48);
      }
      v3 += 24;
    }
  }
  return result;
}

uint64_t sub_1ACC17FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  int v9;
  uint64_t v10;

  result = *(_QWORD *)(a1 + 16);
  v9 = *(_DWORD *)(result + 144);
  if (*(_DWORD *)(result + 148) <= v9)
    return sub_1ACBFF5AC(result, 79, a2, a3, a4, a6, a7, a8);
  *(_DWORD *)(result + 144) = v9 + 1;
  v10 = *(_QWORD *)(result + 136) + 40 * v9;
  *(_DWORD *)v10 = 79;
  *(_DWORD *)(v10 + 4) = a2;
  *(_DWORD *)(v10 + 8) = a3;
  *(_DWORD *)(v10 + 12) = a4;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  return result;
}

_QWORD *sub_1ACC18010(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;

  if (*(int *)(a2 + 48) >= 1)
  {
    v9 = 0;
    v10 = result[2];
    v11 = *(_QWORD **)(a2 + 40);
    do
    {
      v13 = *(unsigned int **)(*v11 + 32);
      if (v13)
        v14 = *v13;
      else
        v14 = 0;
      v15 = (v9 + *(_DWORD *)(a2 + 12) + *(_DWORD *)(a2 + 32));
      v16 = *(_DWORD *)(v10 + 144);
      if (*(_DWORD *)(v10 + 148) <= v16)
      {
        sub_1ACBFF5AC(v10, 165, v15, v14, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v10 + 144) = v16 + 1;
        v17 = *(_QWORD *)(v10 + 136) + 40 * v16;
        *(_DWORD *)v17 = 165;
        *(_DWORD *)(v17 + 4) = v15;
        *(_DWORD *)(v17 + 8) = v14;
        *(_QWORD *)(v17 + 12) = 0;
        *(_QWORD *)(v17 + 28) = 0;
        *(_QWORD *)(v17 + 20) = 0;
        *(_DWORD *)(v17 + 36) = 0;
      }
      v18 = v11[1];
      result = *(_QWORD **)v10;
      if (*(_BYTE *)(*(_QWORD *)v10 + 103))
      {
        if ((*(_BYTE *)(v18 + 4) & 0x10) != 0)
          result = sub_1ACBF0674(result, (_QWORD *)v18);
      }
      else
      {
        v12 = *(_QWORD *)(v10 + 136) + 40 * *(int *)(v10 + 144);
        *(_BYTE *)(v12 - 39) = -7;
        *(_QWORD *)(v12 - 24) = v18;
      }
      ++v9;
      v11 += 3;
    }
    while (v9 < *(_DWORD *)(a2 + 48));
  }
  return result;
}

_QWORD *sub_1ACC18128(_QWORD *result, int a2, int a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  char *v13;

  if (!*((_DWORD *)result + 12) && (a2 - 1) <= 1)
  {
    v7 = (_QWORD *)result[2];
    result = (_QWORD *)*v7;
    if (!*(_BYTE *)(*v7 + 103))
    {
      v8 = v7[17] + 40 * a4;
      sub_1ACB693B4(result, *(char *)(v8 + 1), *(_QWORD *)(v8 + 16));
      *(_QWORD *)(v8 + 16) = 0;
      *(_WORD *)v8 = 184;
      result = (_QWORD *)*v7;
      if (!*(_BYTE *)(*v7 + 103))
      {
        v9 = a4 + 1;
        v10 = v7[17];
        v11 = (_BYTE *)(v10 + 40 * v9);
        if (*v11 == 185)
        {
          v12 = v10 + 40 * v9;
          result = sub_1ACB693B4(result, *(char *)(v12 + 1), *(_QWORD *)(v12 + 16));
          *(_BYTE *)(v12 + 1) = 0;
          *(_QWORD *)(v12 + 16) = 0;
          *v11 = -72;
        }
      }
    }
    if (a2 == 2)
    {
      if (*(_BYTE *)(*v7 + 103))
        v13 = &byte_1EECAD280;
      else
        v13 = (char *)(v7[17] + 40 * a4);
      *v13 = 75;
      *((_DWORD *)v13 + 1) = 1;
      *((_DWORD *)v13 + 2) = a3;
    }
  }
  return result;
}

uint64_t sub_1ACC18230(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;

  if (a1[6])
    return 0;
  v2 = a1[4];
  if (*(_DWORD *)v2 != 1)
    return 0;
  v3 = a1[5];
  if (*(_DWORD *)v3 != 1)
    return 0;
  if (*(_QWORD *)(v3 + 48))
    return 0;
  if (*(_DWORD *)(a2 + 48) != 1)
    return 0;
  if (a1[8])
    return 0;
  v4 = *(_QWORD *)(v3 + 40);
  if (*(_BYTE *)(v4 + 63))
    return 0;
  v5 = *(unsigned __int8 **)(v2 + 8);
  if (*v5 != 168 || *((_QWORD *)v5 + 8) != a2 || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 8) + 5) & 1) == 0)
    return 0;
  if ((*((_DWORD *)v5 + 1) & 0x1000004) != 0)
    return 0;
  return v4;
}

uint64_t sub_1ACC182CC(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_BYTE *)(result + 301) == 2)
    return sub_1ACC0BE9C((uint64_t *)result, 0, "SCAN %s%s%s", a4, a5, a6, a7, a8, *a2);
  return result;
}

uint64_t sub_1ACC18354(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if ((*(_BYTE *)(a2 + 68) & 4) != 0 && *(_BYTE *)(a2 + 65))
  {
    v8 = *(unsigned __int8 *)(a2 + 64);
    while (v8-- >= 1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a2 + 120 * v8 + 952) + 48) & 4) != 0)
      {
        v10 = *(unsigned int *)(a2 + 120 * v8 + 872);
        goto LABEL_9;
      }
    }
    v10 = *(unsigned int *)(a2 + 52);
LABEL_9:
    v11 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v11)
    {
      return sub_1ACBFF5AC(result, 9, 0, v10, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(result + 144) = v11 + 1;
      v12 = *(_QWORD *)(result + 136) + 40 * v11;
      *(_QWORD *)v12 = 9;
      *(_DWORD *)(v12 + 8) = v10;
      *(_QWORD *)(v12 + 12) = 0;
      *(_QWORD *)(v12 + 28) = 0;
      *(_QWORD *)(v12 + 20) = 0;
      *(_DWORD *)(v12 + 36) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACC183F4(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*a2 == 168 && !*((_QWORD *)a2 + 8))
    sub_1ACBCB308(*a1, "misuse of aggregate: %s()", a3, a4, a5, a6, a7, a8, *((_QWORD *)a2 + 1));
  return 0;
}

int *sub_1ACC1843C(uint64_t *a1, int *a2, int *a3, int a4)
{
  int *v4;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  int v16;
  int v17;
  int *v18;
  int v20;

  v4 = a2;
  if (!a3)
    return v4;
  v8 = a2 ? *a2 : 0;
  if (*a3 < 1)
    return v4;
  v9 = 0;
  while (1)
  {
    v11 = *a1;
    v12 = *(unsigned __int8 **)&a3[6 * v9 + 2];
    if (v12)
      break;
    if (*(_BYTE *)(v11 + 103))
      return v4;
    v14 = 0;
    if (a4)
    {
      v15 = 0;
      v20 = 0;
LABEL_24:
      if (sub_1ACC12444(v15, &v20))
      {
        *(_BYTE *)v15 = 121;
        *(_DWORD *)(v15 + 4) &= 0xCFFFF7FF;
        *(_QWORD *)(v15 + 8) = 0;
      }
    }
LABEL_26:
    if (!v4)
    {
      v18 = (int *)sub_1ACC2D490((_QWORD *)*a1, v14);
LABEL_30:
      v4 = v18;
      if (!v18)
        goto LABEL_9;
      goto LABEL_8;
    }
    v17 = *v4;
    if (v4[1] <= *v4)
    {
      v18 = sub_1ACC2D4F4(*a1, v4, v14);
      goto LABEL_30;
    }
    *v4 = v17 + 1;
    v10 = &v4[6 * v17];
    *((_QWORD *)v10 + 2) = 0;
    *((_QWORD *)v10 + 3) = 0;
    *((_QWORD *)v10 + 1) = v14;
LABEL_8:
    LOBYTE(v4[6 * v9 + 6 + 6 * v8]) = a3[6 * v9 + 6];
LABEL_9:
    if (++v9 >= *a3)
      return v4;
  }
  v13 = (unsigned __int8 *)sub_1ACB8B290(*a1, v12, 0, 0);
  v14 = v13;
  if (!*(_BYTE *)(v11 + 103))
  {
    if (!a4)
      goto LABEL_26;
    v20 = 0;
    if (v13)
    {
      v15 = (uint64_t)v13;
      while (1)
      {
        v16 = *(_DWORD *)(v15 + 4);
        if ((v16 & 0x82000) == 0)
          break;
        if ((v16 & 0x80000) != 0)
        {
          v15 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8);
          if (!v15)
            goto LABEL_24;
        }
        else
        {
          v15 = *(_QWORD *)(v15 + 16);
          if (!v15)
            goto LABEL_24;
        }
      }
    }
    else
    {
      v15 = 0;
    }
    goto LABEL_24;
  }
  if (v13)
    sub_1ACBF8348((_QWORD *)v11, v13);
  return v4;
}

uint64_t sub_1ACC1860C(uint64_t a1, unsigned __int8 *a2)
{
  int v2;

  if (*a2 == 168)
  {
    v2 = a2[2];
    if (*(_DWORD *)(a1 + 32) <= v2)
      a2[2] = v2 + 1;
  }
  return 0;
}

uint64_t sub_1ACC18638(uint64_t a1)
{
  ++*(_DWORD *)(a1 + 32);
  return 0;
}

uint64_t sub_1ACC1864C(uint64_t result)
{
  --*(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_1ACC1865C(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3;
  int v4;
  uint64_t *v5;
  uint64_t v6;
  unsigned int *v7;
  unsigned __int8 *v8;
  unsigned int *v9;

  if ((*((_DWORD *)a2 + 1) & 0x14000) == 0)
  {
    v3 = *((_QWORD *)a2 + 8);
    if (v3)
    {
      v4 = *((__int16 *)a2 + 26);
      v5 = *a1;
      v6 = **a1;
      if (*a2 == 168)
      {
        if (*(_DWORD *)(v3 + 48) > v4
          && *(unsigned __int8 **)(*(_QWORD *)(v3 + 40) + 24 * *((__int16 *)a2 + 26)) == a2)
        {
          v7 = sub_1ACB8B290(v6, a2, 0, 0);
          if (v7)
          {
            v8 = (unsigned __int8 *)v7;
            *(_QWORD *)(*(_QWORD *)(v3 + 40) + 24 * v4) = v7;
LABEL_13:
            sub_1ACC0BF64(v5, v8);
          }
        }
      }
      else if (*(_DWORD *)(v3 + 32) > v4
             && *(unsigned __int8 **)(*(_QWORD *)(v3 + 24) + 24 * *((__int16 *)a2 + 26) + 8) == a2)
      {
        v9 = sub_1ACB8B290(v6, a2, 0, 0);
        if (v9)
        {
          v8 = (unsigned __int8 *)v9;
          *(_QWORD *)(*(_QWORD *)(v3 + 24) + 24 * v4 + 8) = v9;
          goto LABEL_13;
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1ACC1875C(uint64_t a1, unsigned __int8 *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  unsigned __int8 *v17;
  int *v18;
  int v19;
  int *v20;
  int *v21;
  int v22;
  int v23;

  v3 = *(_QWORD **)(a1 + 40);
  v4 = *(uint64_t **)a1;
  v5 = *a2;
  if (v3[4])
  {
    if (v5 != 167)
      return 0;
    v6 = (unsigned int *)v3[1];
    v7 = *v6;
    if ((int)v7 < 1)
    {
      LODWORD(v8) = 0;
    }
    else
    {
      v8 = 0;
      v9 = (int *)(v6 + 18);
      while (1)
      {
        v10 = *v9;
        v9 += 26;
        if (*((_DWORD *)a2 + 11) == v10)
          break;
        if (v7 == ++v8)
          return 0;
      }
    }
    if ((_DWORD)v8 == (_DWORD)v7)
      return 0;
  }
  if ((v5 - 167) < 2 || v5 == 179)
    goto LABEL_17;
  if (v5 != 172 || (a2[7] & 1) == 0)
    return 0;
  v11 = *v3;
  if (!*v3)
  {
LABEL_17:
    v12 = *v4;
    if (*(_BYTE *)(*v4 + 103))
      return 2;
    v13 = (int *)v3[2];
    if (v13 && *v13 >= 1)
    {
      v14 = 0;
      v15 = 2;
      while (1)
      {
        v16 = sub_1ACC0ABAC(0, *(unsigned __int8 **)&v13[v15], a2, 0xFFFFFFFFLL);
        v13 = (int *)v3[2];
        if (!v16)
          break;
        ++v14;
        v15 += 6;
        if (v14 >= *v13)
        {
          v12 = *v4;
          goto LABEL_24;
        }
      }
      v22 = 0;
      if (!v13)
      {
LABEL_37:
        if (*(_BYTE *)(*v4 + 103))
          return 2;
        return 0;
      }
LABEL_34:
      v23 = *((_DWORD *)a2 + 1) & 0x200;
      *((_DWORD *)a2 + 1) |= 0x8000000u;
      sub_1ACBF8348((_QWORD *)*v4, a2);
      *((_OWORD *)a2 + 3) = 0u;
      *((_OWORD *)a2 + 4) = 0u;
      *((_OWORD *)a2 + 1) = 0u;
      *((_OWORD *)a2 + 2) = 0u;
      *(_OWORD *)a2 = 0u;
      *a2 = -89;
      if (v22)
        LODWORD(v14) = *(_DWORD *)v3[2] - 1;
      *((_DWORD *)a2 + 11) = *(_DWORD *)(*v3 + 88);
      *((_DWORD *)a2 + 12) = v14;
      *((_QWORD *)a2 + 9) = v3[3];
      *((_DWORD *)a2 + 1) = v23;
      goto LABEL_37;
    }
LABEL_24:
    v17 = (unsigned __int8 *)sub_1ACB8B290(v12, a2, 0, 0);
    if (v17 && *v17 == 168)
      *v17 = -84;
    v18 = (int *)v3[2];
    if (v18)
    {
      v19 = *v18;
      if (v18[1] > *v18)
      {
        *v18 = v19 + 1;
        v20 = &v18[6 * v19];
        *((_QWORD *)v20 + 2) = 0;
        *((_QWORD *)v20 + 3) = 0;
        *((_QWORD *)v20 + 1) = v17;
        goto LABEL_33;
      }
      v21 = sub_1ACC2D4F4(*v4, v18, v17);
    }
    else
    {
      v21 = (int *)sub_1ACC2D490((_QWORD *)*v4, v17);
    }
    v18 = v21;
LABEL_33:
    v3[2] = v18;
    LODWORD(v14) = -1;
    v22 = 1;
    if (!v18)
      goto LABEL_37;
    goto LABEL_34;
  }
  while (*((_QWORD *)a2 + 9) != v11)
  {
    v11 = *(_QWORD *)(v11 + 64);
    if (!v11)
      goto LABEL_17;
  }
  return 1;
}

uint64_t sub_1ACC18998(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  _QWORD *v3;

  v2 = a1[5];
  v3 = *(_QWORD **)(v2 + 32);
  if (v3 == a2)
    return 0;
  *(_QWORD *)(v2 + 32) = a2;
  sub_1ACB73B30(a1, a2);
  *(_QWORD *)(v2 + 32) = v3;
  return 1;
}

uint64_t sub_1ACC189D8(uint64_t a1)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t i;
  int v5;
  uint64_t v6;

  v1 = *(unsigned int **)(a1 + 32);
  v2 = *v1;
  if ((int)v2 >= 1)
  {
    for (i = 0; i != v2; ++i)
    {
      v5 = sub_1ACB92644(*(unsigned __int8 **)&v1[6 * i + 2]);
      v6 = a1;
      while (1)
      {
        v6 = *(_QWORD *)(v6 + 80);
        if (!v6)
          break;
        if (sub_1ACB92644(*(unsigned __int8 **)(*(_QWORD *)(v6 + 32) + 24 * i + 8)) != v5)
          return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1ACC18A74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _QWORD v7[6];

  sub_1ACC18CD8(a1, a4, *(int **)(a2 + 40), a3);
  v7[0] = 0;
  v7[3] = 0;
  v7[4] = 0;
  v7[5] = a4;
  v7[1] = sub_1ACC18DAC;
  v7[2] = sub_1ACC1243C;
  return sub_1ACB73B30(v7, (_QWORD *)a2);
}

uint64_t sub_1ACC18AD8(uint64_t result, _QWORD *a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  _DWORD *v17;
  BOOL v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;

  if (a2)
  {
    v4 = a2;
    v5 = result;
    do
    {
      v6 = (int *)v4[4];
      if (v6 && *v6 >= 1)
      {
        v7 = 0;
        v8 = 2;
        do
        {
          *(_QWORD *)&v6[v8] = sub_1ACBAC4CC(v5, *(_QWORD *)&v6[v8]);
          ++v7;
          v8 += 6;
        }
        while (v7 < *v6);
      }
      v9 = (int *)v4[7];
      if (v9 && *v9 >= 1)
      {
        v10 = 0;
        v11 = 2;
        do
        {
          *(_QWORD *)&v9[v11] = sub_1ACBAC4CC(v5, *(_QWORD *)&v9[v11]);
          ++v10;
          v11 += 6;
        }
        while (v10 < *v9);
      }
      v12 = (int *)v4[9];
      if (v12 && *v12 >= 1)
      {
        v13 = 0;
        v14 = 2;
        do
        {
          *(_QWORD *)&v12[v14] = sub_1ACBAC4CC(v5, *(_QWORD *)&v12[v14]);
          ++v13;
          v14 += 6;
        }
        while (v13 < *v12);
      }
      v4[8] = sub_1ACBAC4CC(v5, v4[8]);
      result = sub_1ACBAC4CC(v5, v4[6]);
      v4[6] = result;
      v15 = (int *)v4[5];
      v16 = *v15;
      if (*v15 >= 1)
      {
        v17 = v15 + 2;
        do
        {
          result = sub_1ACC18AD8(v5, *((_QWORD *)v17 + 5), 1);
          if ((*(_WORD *)((_BYTE *)v17 + 61) & 4) != 0)
          {
            v19 = (int *)*((_QWORD *)v17 + 11);
            if (v19)
            {
              if (*v19 >= 1)
              {
                v20 = 0;
                v21 = 2;
                do
                {
                  result = sub_1ACBAC4CC(v5, *(_QWORD *)&v19[v21]);
                  *(_QWORD *)&v19[v21] = result;
                  ++v20;
                  v21 += 6;
                }
                while (v20 < *v19);
              }
            }
          }
          v17 += 26;
          v18 = __OFSUB__(v16--, 1);
        }
        while (!((v16 < 0) ^ v18 | (v16 == 0)));
      }
      if (!a3)
        break;
      v4 = (_QWORD *)v4[10];
    }
    while (v4);
  }
  return result;
}

_QWORD *sub_1ACC18C84(_QWORD *result, uint64_t a2)
{
  _QWORD v2[6];

  if (*(_QWORD *)(a2 + 32))
  {
    v2[0] = 0;
    v2[3] = 0;
    v2[1] = sub_1ACC18E20;
    v2[2] = sub_1ACC1243C;
    v2[4] = 0;
    v2[5] = a2;
    *(_QWORD *)(a2 + 80) = 0;
    return (_QWORD *)sub_1ACB73B30(v2, result);
  }
  return result;
}

uint64_t sub_1ACC18CD8(uint64_t result, uint64_t a2, int *a3, int a4)
{
  uint64_t v7;
  int v8;
  _DWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t i;

  if (*a3 >= 1)
  {
    v7 = result;
    v8 = 0;
    v9 = a3 + 2;
    do
    {
      if (v8 != a4)
      {
        v10 = (int)v9[16] + 1;
        if ((*(_WORD *)((_BYTE *)v9 + 61) & 0x40) == 0 || !*(_DWORD *)(a2 + 4 * v10))
        {
          v11 = *(_DWORD *)(v7 + 52);
          *(_DWORD *)(v7 + 52) = v11 + 1;
          *(_DWORD *)(a2 + 4 * v10) = v11;
          v10 = (int)v9[16] + 1;
        }
        v9[16] = *(_DWORD *)(a2 + 4 * v10);
        for (i = *((_QWORD *)v9 + 5); i; i = *(_QWORD *)(i + 80))
          result = sub_1ACC18CD8(v7, a2, *(_QWORD *)(i + 40), 0xFFFFFFFFLL);
      }
      ++v8;
      v9 += 26;
    }
    while (v8 < *a3);
  }
  return result;
}

uint64_t sub_1ACC18DAC(uint64_t a1, unsigned __int8 *a2)
{
  int v2;
  _DWORD *v3;
  int v4;
  int v5;
  _DWORD *v6;
  int v7;
  int v8;

  v2 = *a2;
  if (v2 == 179 || v2 == 167)
  {
    v3 = *(_DWORD **)(a1 + 40);
    v4 = *((_DWORD *)a2 + 11);
    if (v4 < *v3)
    {
      v5 = v3[v4 + 1];
      if (v5 >= 1)
        *((_DWORD *)a2 + 11) = v5;
    }
  }
  if ((a2[4] & 1) != 0)
  {
    v6 = *(_DWORD **)(a1 + 40);
    v7 = *((_DWORD *)a2 + 14);
    if (v7 < *v6)
    {
      v8 = v6[v7 + 1];
      if (v8 >= 1)
        *((_DWORD *)a2 + 14) = v8;
    }
  }
  return 0;
}

uint64_t sub_1ACC18E20(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;

  if (*a2 == 167)
  {
    v2 = *(_QWORD *)(a1 + 40);
    if (*(_DWORD *)(v2 + 64) == *((_DWORD *)a2 + 11))
    {
      v3 = *((unsigned int *)a2 + 12);
      if ((v3 & 0x80000000) == 0)
      {
        v4 = *((_QWORD *)a2 + 9);
        if ((*(_BYTE *)(v4 + 48) & 0x60) != 0 && (*(_WORD *)(*(_QWORD *)(v4 + 8) + 16 * v3 + 14) & 0x60) != 0)
        {
          v5 = *(__int16 *)(v4 + 54);
          if (v5 <= 63)
            v6 = ~(-1 << v5);
          else
            v6 = -1;
        }
        else
        {
          if ((int)v3 >= 63)
            LOBYTE(v3) = 63;
          v6 = 1 << v3;
        }
        *(_QWORD *)(v2 + 80) |= v6;
      }
    }
  }
  return 0;
}

uint64_t sub_1ACC18EAC(int a1, int a2)
{
  if (a1 < a2)
  {
    if (a1 + 49 < a2)
      return (__int16)a2;
    if (a1 + 31 < a2)
      return (__int16)(a2 + 1);
    LOWORD(a1) = byte_1ACCBA360[a2 - a1] + (_WORD)a2;
    return (__int16)a1;
  }
  if (a2 + 49 < a1)
    return (__int16)a1;
  if (a2 + 31 >= a1)
    return (__int16)(byte_1ACCBA360[a1 - a2] + (_WORD)a1);
  else
    return (__int16)(a1 + 1);
}

uint64_t sub_1ACC18F3C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  const char **v19;
  char v20;
  uint64_t v21;
  const char **v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;

  v2 = a2;
  v3 = a1;
  v4 = *(_DWORD **)(a2 + 72);
  if (v4)
    LODWORD(v5) = *v4;
  else
    LODWORD(v5) = 0;
  v32 = *a1;
  v6 = sub_1ACC092C0(*a1, (int)v5 + 1, 1);
  v13 = v6;
  if (v6)
    v14 = (int)v5 < 1;
  else
    v14 = 1;
  if (!v14)
  {
    v16 = 0;
    v17 = v4 + 6;
    v18 = v6 + 32;
    v5 = v5;
    v30 = v2;
    v31 = v3;
    v33 = v6;
    while (1)
    {
      v21 = *((_QWORD *)v17 - 2);
      if ((*(_BYTE *)(v21 + 5) & 2) == 0)
        break;
      v19 = (const char **)sub_1ACB78620((uint64_t)v3, *((unsigned __int8 **)v17 - 2), v7, v8, v9, v10, v11, v12);
LABEL_11:
      *(_QWORD *)(v18 + 8 * v16) = v19;
      v20 = *(_BYTE *)v17;
      v17 += 6;
      *(_BYTE *)(*(_QWORD *)(v13 + 24) + v16++) = v20;
      if (v5 == v16)
        return v13;
    }
    v22 = (const char **)sub_1ACBA4E80((uint64_t)v3, v2, *((unsigned __int16 *)v17 + 2) - 1, v8, v9, v10, v11, v12);
    v19 = v22;
    if (v22)
    {
      v23 = *v22;
      if (!*v22)
        goto LABEL_22;
    }
    else
    {
      v19 = *(const char ***)(v32 + 16);
      v23 = *v19;
      if (!*v19)
      {
LABEL_22:
        *((_QWORD *)v17 - 2) = v21;
        goto LABEL_11;
      }
    }
    v24 = v5;
    v25 = v18;
    v26 = strlen(v23) & 0x3FFFFFFF;
    if (v26)
    {
      v27 = sub_1ACBE1124(*v3, v26 + 81);
      if (v27)
      {
        v28 = v27;
        *(_OWORD *)(v27 + 48) = 0u;
        *(_OWORD *)(v27 + 64) = 0u;
        *(_OWORD *)(v27 + 16) = 0u;
        *(_OWORD *)(v27 + 32) = 0u;
        *(_OWORD *)v27 = 0u;
        *(_BYTE *)v27 = 113;
        *(_WORD *)(v27 + 52) = -1;
        v29 = v27 + 80;
        *(_QWORD *)(v27 + 8) = v27 + 80;
        memcpy((void *)(v27 + 80), v23, v26);
        *(_BYTE *)(v29 + v26) = 0;
        v2 = v30;
        *(_DWORD *)(v28 + 40) = 1;
        *(_QWORD *)(v28 + 16) = v21;
        *(_DWORD *)(v28 + 4) |= 0x2200u;
        v21 = v28;
      }
      v3 = v31;
    }
    v18 = v25;
    v5 = v24;
    v13 = v33;
    goto LABEL_22;
  }
  return v13;
}

uint64_t sub_1ACC190F0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;

  if ((int)a2 >= 1)
  {
    v8 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v8)
    {
      return sub_1ACBFF5AC(result, 59, a2, a3, 1, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(result + 144) = v8 + 1;
      v9 = *(_QWORD *)(result + 136) + 40 * v8;
      *(_DWORD *)v9 = 59;
      *(_DWORD *)(v9 + 4) = a2;
      *(_DWORD *)(v9 + 8) = a3;
      *(_DWORD *)(v9 + 12) = 1;
      *(_QWORD *)(v9 + 24) = 0;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 16) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACC1914C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  unsigned __int8 v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  BOOL v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  uint64_t v93;
  unsigned int v95;
  unsigned int v96;

  v95 = a8;
  v8 = a5;
  v9 = a4;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(unsigned int *)(v12 + 144);
  v14 = *(_DWORD *)(a1 + 68);
  v15 = (v14 - 1);
  *(_DWORD *)(a1 + 68) = v15;
  if ((_DWORD)a6)
  {
    v17 = a6;
    v96 = a5;
    if (*(_DWORD *)(v12 + 148) <= (int)v13)
    {
      v20 = v13;
      LODWORD(v13) = sub_1ACBFF5AC(v12, 17, a6, 0, 0, a6, (uint64_t)a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v13 + 1;
      v19 = *(_QWORD *)(v12 + 136) + 40 * (int)v13;
      *(_DWORD *)v19 = 17;
      *(_DWORD *)(v19 + 4) = a6;
      *(_OWORD *)(v19 + 8) = 0u;
      *(_OWORD *)(v19 + 24) = 0u;
      v20 = v13;
    }
    v21 = *(unsigned int *)(a3 + 12);
    v22 = *(unsigned int *)(a3 + 16);
    if (a7)
      ++*a7;
    v23 = sub_1ACBA86CC((uint64_t *)v12, 90, v21, (v17 + 1), v22, (uint64_t)a7, 4294967288, a8)+ 2;
    v24 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v24)
    {
      sub_1ACBFF5AC(v12, 14, v23, v15, v23, a6, (uint64_t)a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v24 + 1;
      v25 = *(_QWORD *)(v12 + 136) + 40 * v24;
      *(_DWORD *)v25 = 14;
      *(_DWORD *)(v25 + 4) = v23;
      *(_DWORD *)(v25 + 8) = v15;
      *(_DWORD *)(v25 + 12) = v23;
      *(_QWORD *)(v25 + 24) = 0;
      *(_QWORD *)(v25 + 32) = 0;
      *(_QWORD *)(v25 + 16) = 0;
    }
    v26 = *(_DWORD *)(v12 + 144);
    if (*(_BYTE *)(*(_QWORD *)v12 + 103))
      v27 = &byte_1EECAD280;
    else
      v27 = (char *)(*(_QWORD *)(v12 + 136) + 40 * (int)v13);
    v13 = v20;
    v9 = a4;
    *((_DWORD *)v27 + 2) = v26;
    v28 = *(unsigned int *)(a3 + 12);
    v29 = (*(_DWORD *)(a3 + 16) - 1);
    if (*(_DWORD *)(v12 + 148) <= v26)
    {
      sub_1ACBFF5AC(v12, 80, v28, (v17 + 1), v29, a6, (uint64_t)a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v26 + 1;
      v30 = *(_QWORD *)(v12 + 136) + 40 * v26;
      *(_DWORD *)v30 = 80;
      *(_DWORD *)(v30 + 4) = v28;
      *(_DWORD *)(v30 + 8) = v17 + 1;
      *(_DWORD *)(v30 + 12) = v29;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0;
      *(_QWORD *)(v30 + 16) = 0;
    }
    v31 = *(_DWORD *)(v12 + 144);
    v8 = v96;
    if (*(_DWORD *)(v12 + 148) <= v31)
    {
      sub_1ACBFF5AC(v12, 71, 1, v17, 0, a6, (uint64_t)a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v31 + 1;
      v32 = *(_QWORD *)(v12 + 136) + 40 * v31;
      *(_QWORD *)v32 = 0x100000047;
      *(_DWORD *)(v32 + 8) = v17;
      *(_QWORD *)(v32 + 12) = 0;
      *(_QWORD *)(v32 + 28) = 0;
      *(_QWORD *)(v32 + 20) = 0;
      *(_DWORD *)(v32 + 36) = 0;
    }
  }
  if (*(_BYTE *)(*(_QWORD *)a1 + 103))
    return 0;
  v33 = *(unsigned int *)(a2 + 12);
  if ((int)v33 >= 1)
  {
    v34 = *(_DWORD *)(v12 + 144);
    if (*(_DWORD *)(v12 + 148) <= v34)
    {
      sub_1ACBFF5AC(v12, 59, v33, v15, 1, a6, (uint64_t)a7, a8);
    }
    else
    {
      *(_DWORD *)(v12 + 144) = v34 + 1;
      v35 = *(_QWORD *)(v12 + 136) + 40 * v34;
      *(_DWORD *)v35 = 59;
      *(_DWORD *)(v35 + 4) = v33;
      *(_DWORD *)(v35 + 8) = v15;
      *(_DWORD *)(v35 + 12) = 1;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0;
      *(_QWORD *)(v35 + 16) = 0;
    }
  }
  switch(*(_BYTE *)v9)
  {
    case 0xA:
      v36 = *(unsigned int *)(v9 + 4);
      v37 = *(unsigned int *)(a3 + 12);
      v38 = *(unsigned int *)(a3 + 16);
      v39 = *(_QWORD *)(a1 + 16);
      v40 = *(_DWORD *)(v39 + 144);
      if (*(_DWORD *)(v39 + 148) <= v40)
      {
        v55 = 79;
        goto LABEL_79;
      }
      *(_DWORD *)(v39 + 144) = v40 + 1;
      v41 = *(_QWORD *)(v39 + 136) + 40 * v40;
      *(_DWORD *)v41 = 79;
      *(_DWORD *)(v41 + 4) = v37;
      *(_DWORD *)(v41 + 8) = v36;
      *(_DWORD *)(v41 + 12) = v38;
      *(_QWORD *)(v41 + 24) = 0;
      *(_QWORD *)(v41 + 32) = 0;
      *(_QWORD *)(v41 + 16) = 0;
      goto LABEL_80;
    case 0xB:
      v44 = v9;
      v45 = v8;
      if (*(_BYTE *)(a1 + 31))
      {
        v46 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v46;
        v47 = *(unsigned int *)(a1 + 4 * v46 + 224);
      }
      else
      {
        v47 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v47;
      }
      v56 = v44;
      sub_1ACBA86CC((uint64_t *)v12, 97, *(unsigned int *)(a3 + 12), *(unsigned int *)(a3 + 16), v47, *(_QWORD *)(v44 + 24), *(unsigned int *)(a3 + 16), a8);
      v57 = *(unsigned int *)(v56 + 4);
      v58 = *(unsigned int *)(a3 + 12);
      a6 = *(unsigned int *)(a3 + 16);
      v59 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v59)
      {
        sub_1ACBFF7F0(v12, 138, v57, v47, v58, a6, (uint64_t)a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v59 + 1;
        v60 = *(_QWORD *)(v12 + 136) + 40 * v59;
        *(_DWORD *)v60 = 64906;
        *(_DWORD *)(v60 + 4) = v57;
        *(_DWORD *)(v60 + 8) = v47;
        *(_DWORD *)(v60 + 12) = v58;
        *(_DWORD *)(v60 + 16) = a6;
        *(_QWORD *)(v60 + 24) = 0;
        *(_QWORD *)(v60 + 32) = 0;
      }
      v8 = v45;
      if ((_DWORD)v47)
      {
        v61 = *(unsigned __int8 *)(a1 + 31);
        if (v61 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v61 + 1;
          *(_DWORD *)(a1 + 4 * v61 + 224) = v47;
        }
      }
      goto LABEL_80;
    case 0xC:
      v48 = *(_BYTE *)(a1 + 31);
      if (v48)
      {
        *(_BYTE *)(a1 + 31) = v48 - 1;
        v49 = *(unsigned int *)(a1 + 4 * (v48 - 1) + 224);
        if (v48 != 1)
        {
          v50 = v48 - 2;
          *(_BYTE *)(a1 + 31) = v50;
          v51 = *(unsigned int *)(a1 + 4 * v50 + 224);
          goto LABEL_50;
        }
      }
      else
      {
        v49 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v49;
      }
      v51 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v51;
LABEL_50:
      v62 = *(unsigned int *)(a3 + 12);
      v63 = *(unsigned int *)(a3 + 16);
      v64 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v64)
      {
        sub_1ACBFF5AC(v12, 97, v62, v63, v49, a6, (uint64_t)a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v64 + 1;
        v65 = *(_QWORD *)(v12 + 136) + 40 * v64;
        *(_DWORD *)v65 = 97;
        *(_DWORD *)(v65 + 4) = v62;
        *(_DWORD *)(v65 + 8) = v63;
        *(_DWORD *)(v65 + 12) = v49;
        *(_QWORD *)(v65 + 24) = 0;
        *(_QWORD *)(v65 + 32) = 0;
        *(_QWORD *)(v65 + 16) = 0;
      }
      v66 = *(unsigned int *)(v9 + 4);
      v67 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v67)
      {
        sub_1ACBFF5AC(v12, 127, v66, v51, 0, a6, (uint64_t)a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v67 + 1;
        v68 = *(_QWORD *)(v12 + 136) + 40 * v67;
        *(_DWORD *)v68 = 127;
        *(_DWORD *)(v68 + 4) = v66;
        *(_DWORD *)(v68 + 8) = v51;
        *(_QWORD *)(v68 + 12) = 0;
        *(_QWORD *)(v68 + 28) = 0;
        *(_QWORD *)(v68 + 20) = 0;
        *(_DWORD *)(v68 + 36) = 0;
      }
      v69 = *(unsigned int *)(v9 + 4);
      v70 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v70)
      {
        sub_1ACBFF5AC(v12, 128, v69, v49, v51, a6, (uint64_t)a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v70 + 1;
        v71 = *(_QWORD *)(v12 + 136) + 40 * v70;
        *(_DWORD *)v71 = 128;
        *(_DWORD *)(v71 + 4) = v69;
        *(_DWORD *)(v71 + 8) = v49;
        *(_DWORD *)(v71 + 12) = v51;
        *(_QWORD *)(v71 + 24) = 0;
        *(_QWORD *)(v71 + 32) = 0;
        *(_QWORD *)(v71 + 16) = 0;
      }
      v72 = *(_DWORD *)(v12 + 144);
      v73 = __OFSUB__(v72, 1);
      v74 = v72 - 1;
      if (v74 < 0 == v73)
        *(_WORD *)(*(_QWORD *)(v12 + 136) + 40 * v74 + 2) = 8;
      if ((_DWORD)v51)
      {
        v75 = *(unsigned __int8 *)(a1 + 31);
        if (v75 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v75 + 1;
          *(_DWORD *)(a1 + 4 * v75 + 224) = v51;
        }
      }
      if ((_DWORD)v49)
      {
        v76 = *(unsigned __int8 *)(a1 + 31);
        if (v76 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v76 + 1;
          *(_DWORD *)(a1 + 4 * v76 + 224) = v49;
        }
      }
LABEL_80:
      v87 = *(unsigned int *)(a2 + 8);
      if ((_DWORD)v87)
      {
        v88 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v88)
        {
          sub_1ACBFF5AC(v12, 61, v87, v95, 0, a6, (uint64_t)a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v88 + 1;
          v89 = *(_QWORD *)(v12 + 136) + 40 * v88;
          *(_DWORD *)v89 = 61;
          *(_DWORD *)(v89 + 4) = v87;
          *(_DWORD *)(v89 + 8) = v95;
          *(_QWORD *)(v89 + 12) = 0;
          *(_QWORD *)(v89 + 28) = 0;
          *(_QWORD *)(v89 + 20) = 0;
          *(_DWORD *)(v89 + 36) = 0;
        }
      }
      v90 = *(_QWORD *)(v12 + 24);
      v91 = -v14;
      if (*(_DWORD *)(v90 + 68) + *(_DWORD *)(v90 + 72) < 0)
        sub_1ACC0D5D4(v90, v12, v91);
      else
        *(_DWORD *)(*(_QWORD *)(v90 + 80) + 4 * v91) = *(_DWORD *)(v12 + 144);
      v92 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v92)
      {
        sub_1ACBFF5AC(v12, 67, v8, 0, 0, a6, (uint64_t)a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v92 + 1;
        v93 = *(_QWORD *)(v12 + 136) + 40 * v92;
        *(_DWORD *)v93 = 67;
        *(_DWORD *)(v93 + 4) = v8;
        *(_OWORD *)(v93 + 8) = 0u;
        *(_OWORD *)(v93 + 24) = 0u;
      }
      return v13;
    case 0xD:
      v52 = *(unsigned int *)(v9 + 12);
      if (!(_DWORD)v52)
      {
        v53 = *(_DWORD *)(a3 + 16);
        if (v53 == 1)
        {
          if (*(_BYTE *)(a1 + 31))
          {
            v54 = *(_BYTE *)(a1 + 31) - 1;
            *(_BYTE *)(a1 + 31) = v54;
            v52 = *(unsigned int *)(a1 + 4 * v54 + 224);
          }
          else
          {
            v52 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v52;
          }
        }
        else
        {
          v77 = *(_DWORD *)(a1 + 40);
          v73 = __OFSUB__(v77, v53);
          v78 = v77 - v53;
          if (v78 < 0 != v73)
          {
            v79 = *(_DWORD *)(a1 + 56);
            v52 = (v79 + 1);
            *(_DWORD *)(a1 + 56) = v79 + v53;
          }
          else
          {
            v52 = *(unsigned int *)(a1 + 44);
            *(_DWORD *)(a1 + 40) = v78;
            *(_DWORD *)(a1 + 44) = v52 + v53;
          }
        }
        *(_DWORD *)(v9 + 12) = v52;
        *(_DWORD *)(v9 + 16) = v53;
      }
      v80 = *(unsigned int *)(a3 + 12);
      v81 = *(unsigned int *)(a3 + 16);
      v82 = *(_QWORD *)(a1 + 16);
      v83 = *(_DWORD *)(v82 + 144);
      if (*(_DWORD *)(v82 + 148) <= v83)
      {
        sub_1ACBFF5AC(v82, 79, v80, v52, v81, a6, (uint64_t)a7, a8);
      }
      else
      {
        *(_DWORD *)(v82 + 144) = v83 + 1;
        v84 = *(_QWORD *)(v82 + 136) + 40 * v83;
        *(_DWORD *)v84 = 79;
        *(_DWORD *)(v84 + 4) = v80;
        *(_DWORD *)(v84 + 8) = v52;
        *(_DWORD *)(v84 + 12) = v81;
        *(_QWORD *)(v84 + 24) = 0;
        *(_QWORD *)(v84 + 32) = 0;
        *(_QWORD *)(v84 + 16) = 0;
      }
      v37 = *(unsigned int *)(v9 + 4);
      v85 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v85)
      {
        v39 = v12;
        v55 = 12;
        v36 = 0;
        goto LABEL_78;
      }
      *(_DWORD *)(v12 + 144) = v85 + 1;
      v86 = *(_QWORD *)(v12 + 136) + 40 * v85;
      *(_DWORD *)v86 = 12;
      *(_DWORD *)(v86 + 4) = v37;
      *(_OWORD *)(v86 + 8) = 0u;
      *(_OWORD *)(v86 + 24) = 0u;
      goto LABEL_80;
    default:
      v37 = *(unsigned int *)(a3 + 12);
      v36 = *(unsigned int *)(a3 + 16);
      v42 = *(_DWORD *)(v12 + 144);
      if (*(_DWORD *)(v12 + 148) <= v42)
      {
        v39 = v12;
        v55 = 84;
LABEL_78:
        v38 = 0;
LABEL_79:
        sub_1ACBFF5AC(v39, v55, v37, v36, v38, a6, (uint64_t)a7, a8);
      }
      else
      {
        *(_DWORD *)(v12 + 144) = v42 + 1;
        v43 = *(_QWORD *)(v12 + 136) + 40 * v42;
        *(_DWORD *)v43 = 84;
        *(_DWORD *)(v43 + 4) = v37;
        *(_DWORD *)(v43 + 8) = v36;
        *(_QWORD *)(v43 + 12) = 0;
        *(_QWORD *)(v43 + 28) = 0;
        *(_QWORD *)(v43 + 20) = 0;
        *(_DWORD *)(v43 + 36) = 0;
      }
      goto LABEL_80;
  }
}

uint64_t sub_1ACC19960(uint64_t result, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  __int128 v9;
  __int128 v10;

  if (a2)
  {
    v2 = a2;
    v3 = result;
    while ((*(_DWORD *)(v3 + 28) & *((_DWORD *)v2 + 1)) == 0)
    {
      v4 = *v2;
      if (v4 != 44)
      {
        if (v4 == 53)
        {
          v6 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
          v5 = (unsigned __int8 *)*((_QWORD *)v2 + 3);
          if (*v5 == 167)
          {
            v10 = 0u;
            v7 = 0;
            WORD2(v10) = 1;
            v8 = sub_1ACB8B0F4;
            v9 = (unint64_t)sub_1ACC0B708;
            if (!v6 || (result = sub_1ACC0B714((uint64_t)&v7, (uint64_t)v6), WORD2(v10)))
              result = sub_1ACC19B24(v3, (uint64_t)v5, v6, (uint64_t)v2);
          }
          if (*v6 == 167)
          {
            v10 = 0u;
            v7 = 0;
            WORD2(v10) = 1;
            v8 = sub_1ACB8B0F4;
            v9 = (unint64_t)sub_1ACC0B708;
            result = sub_1ACC0B714((uint64_t)&v7, (uint64_t)v5);
            if (WORD2(v10))
              return sub_1ACC19B24(v3, (uint64_t)v6, v5, (uint64_t)v2);
          }
        }
        return result;
      }
      result = sub_1ACC19960(v3, *((_QWORD *)v2 + 3));
      v2 = (unsigned __int8 *)*((_QWORD *)v2 + 2);
      if (!v2)
        return result;
    }
  }
  return result;
}

uint64_t sub_1ACC19A88(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  int v4;

  v3 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v3 + 24))
  {
    v4 = *(unsigned __int8 *)a2;
    if ((v4 - 53) < 5 || v4 == 45)
    {
      sub_1ACC19CBC(*(_QWORD *)(a1 + 40), a2[2], 0);
      if (**(_BYTE **)(v3 + 8))
        return 1;
      if (sub_1ACB92644(a2[2]) != 66)
        sub_1ACC19CBC(v3, a2[3], 0);
    }
  }
  return sub_1ACC19CBC(v3, (unsigned __int8 *)a2, *(_DWORD *)(v3 + 24));
}

uint64_t sub_1ACC19B24(uint64_t result, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  int v20;
  unint64_t v21;
  uint64_t v22;

  if ((*(_BYTE *)(a2 + 4) & 0x20) != 0)
    return result;
  v7 = (uint64_t **)result;
  result = sub_1ACB92644(a3);
  if ((_DWORD)result)
    return result;
  result = sub_1ACBCCBB0((uint64_t)*v7, a4, v8, v9, v10, v11, v12, v13);
  if (result)
  {
    if (*(uint64_t (**)(int, int, void *, int, void *))(result + 24) != sub_1ACB934B4)
      return result;
  }
  v14 = *((_DWORD *)v7 + 4);
  if (v14 < 1)
  {
LABEL_12:
    if (sub_1ACB92644((unsigned __int8 *)a2) == 65)
      *((_DWORD *)v7 + 6) = 1;
    v17 = v14 + 1;
    *((_DWORD *)v7 + 4) = v14 + 1;
    v18 = **v7;
    v19 = v7[4];
    v20 = 2 * v17;
    v21 = 8 * v20;
    if (v19)
    {
      if (*(_QWORD *)(v18 + 512) > (unint64_t)v19)
      {
        if (*(_QWORD *)(v18 + 496) <= (unint64_t)v19)
        {
          if (v21 < 0x81)
          {
LABEL_19:
            result = (uint64_t)v7[4];
LABEL_24:
            v7[4] = (uint64_t *)result;
            goto LABEL_25;
          }
        }
        else if (*(_QWORD *)(v18 + 504) <= (unint64_t)v19 && v21 <= *(unsigned __int16 *)(v18 + 438))
        {
          goto LABEL_19;
        }
      }
      result = sub_1ACBE11D0(**v7, v7[4], v21);
      if (result)
        goto LABEL_24;
      result = (uint64_t)sub_1ACBE0F9C((_QWORD *)v18, v19);
      v7[4] = 0;
    }
    else
    {
      result = sub_1ACBE1124(**v7, 8 * v20);
      v7[4] = (uint64_t *)result;
      if (result)
      {
LABEL_25:
        v22 = *((int *)v7 + 4);
        *(_QWORD *)(result + 16 * v22 - 16) = a2;
        v7[4][2 * (int)v22 - 1] = (uint64_t)a3;
        return result;
      }
    }
    *((_DWORD *)v7 + 4) = 0;
    return result;
  }
  v15 = v7[4];
  v16 = *((unsigned int *)v7 + 4);
  while (*(_DWORD *)(*v15 + 44) != *(_DWORD *)(a2 + 44) || *(_DWORD *)(*v15 + 48) != *(_DWORD *)(a2 + 48))
  {
    v15 += 2;
    if (!--v16)
      goto LABEL_12;
  }
  return result;
}

uint64_t sub_1ACC19CBC(uint64_t a1, unsigned __int8 *a2, int a3)
{
  int v6;
  uint64_t v7;
  unsigned __int8 **i;
  uint64_t v9;

  if (**(_BYTE **)(a1 + 8))
    return 1;
  if (*a2 == 167)
  {
    v6 = *((_DWORD *)a2 + 1);
    if (((*(_DWORD *)(a1 + 28) | 0x20) & v6) == 0)
    {
      v7 = *(unsigned int *)(a1 + 16);
      if ((int)v7 >= 1)
      {
        for (i = (unsigned __int8 **)(*(_QWORD *)(a1 + 32) + 8); ; i += 2)
        {
          v9 = (uint64_t)*(i - 1);
          if ((unsigned __int8 *)v9 != a2
            && *(_DWORD *)(v9 + 44) == *((_DWORD *)a2 + 11)
            && *(_DWORD *)(v9 + 48) == *((_DWORD *)a2 + 12))
          {
            break;
          }
          if (!--v7)
            return 1;
        }
        if (!a3 || sub_1ACB92644((unsigned __int8 *)v9) != 65)
        {
          ++*(_DWORD *)(a1 + 20);
          *((_DWORD *)a2 + 1) = v6 & 0xFF7FFFDF | 0x20;
          if (*i)
            *((_QWORD *)a2 + 2) = sub_1ACB8B290(**(_QWORD **)a1, *i, 0, 0);
          else
            *((_QWORD *)a2 + 2) = 0;
        }
      }
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1ACC19DC4(uint64_t a1, uint64_t a2, int a3)
{
  int v3;
  uint64_t v4;
  _DWORD *v5;
  int v6;
  _QWORD v8[4];
  __int128 v9;

  if ((*(_BYTE *)(a2 + 104 * a3 + 68) & 0x40) != 0)
    return 0;
  v3 = *(_DWORD *)(a1 + 4);
  if ((*(_BYTE *)(a2 + 104 * a3 + 68) & 8) != 0)
  {
    if ((v3 & 1) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 104 * a3 + 72))
      return 0;
  }
  else if ((v3 & 1) != 0)
  {
    return 0;
  }
  if ((v3 & 3) == 0 || (*(_BYTE *)(a2 + 68) & 0x40) == 0 || a3 < 1)
    goto LABEL_15;
  v4 = a3;
  v5 = (_DWORD *)(a2 + 72);
  while (*(_DWORD *)(a1 + 56) != *v5)
  {
    v5 += 26;
    if (!--v4)
      goto LABEL_15;
  }
  if ((*(_BYTE *)(v5 - 1) & 0x40) == 0)
  {
LABEL_15:
    v6 = *(_DWORD *)(a2 + 104 * a3 + 72);
    v8[3] = 0;
    v9 = 0u;
    v8[0] = 0;
    WORD2(v9) = 3;
    v8[1] = sub_1ACB8B0F4;
    v8[2] = sub_1ACC0B708;
    DWORD2(v9) = v6;
    sub_1ACC0B714((uint64_t)v8, a1);
    return WORD2(v9);
  }
  return 0;
}

uint64_t sub_1ACC19EB8(uint64_t a1, unsigned __int8 *a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(int **)(a1 + 40);
  if (*v4 < 1)
  {
LABEL_9:
    if ((a2[5] & 0x10) != 0)
    {
      *(_WORD *)(a1 + 36) = 0;
      return 2;
    }
    else
    {
      return sub_1ACB8B0F4(a1, (uint64_t)a2);
    }
  }
  else
  {
    v5 = 0;
    v6 = 2;
    while (1)
    {
      v7 = *(unsigned __int8 **)&v4[v6];
      if (sub_1ACC0ABAC(0, a2, v7, 0xFFFFFFFFLL) <= 1)
      {
        v14 = *(_QWORD *)a1;
        v15 = sub_1ACB78620(*(_QWORD *)a1, v7, v8, v9, v10, v11, v12, v13);
        if (!v15)
        {
          v15 = *(_QWORD *)(*(_QWORD *)v14 + 16);
          if (!v15)
            return 1;
        }
        if (*(uint64_t (**)(int, int, void *, int, void *))(v15 + 24) == sub_1ACB934B4)
          return 1;
      }
      ++v5;
      v6 += 6;
      if (v5 >= *v4)
        goto LABEL_9;
    }
  }
}

uint64_t sub_1ACC19FAC(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;

  v4 = result;
  if (a2)
  {
    while (1)
    {
      v5 = (unsigned __int8 *)a2;
      while (1)
      {
        v6 = *((_DWORD *)v5 + 1);
        if ((v6 & 0x82000) == 0)
          break;
        if ((v6 & 0x80000) != 0)
        {
          v5 = *(unsigned __int8 **)(*((_QWORD *)v5 + 4) + 8);
          if (!v5)
            goto LABEL_10;
        }
        else
        {
          v5 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
          if (!v5)
            goto LABEL_10;
        }
      }
      *(_BYTE *)(v4 + 16) = a3;
      if (*v5 != (_DWORD)a3)
        return sub_1ACB90C28(v4, a2, 0);
      result = sub_1ACC19FAC(v4, *((_QWORD *)v5 + 2), a3);
      a2 = *((_QWORD *)v5 + 3);
      if (!a2)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    *(_BYTE *)(v4 + 16) = a3;
  }
  return result;
}

unsigned __int8 *sub_1ACC1A05C(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int16 *v9;
  __int16 v10;
  uint64_t v11;
  _BYTE *v12;
  unsigned __int8 *v13;
  int v14;

  if (!*(_QWORD *)(a2 + 56) && (*(_BYTE *)(a2 + 4) & 9) == 0)
  {
    v3 = *(_QWORD *)(a2 + 40);
    if (*(_DWORD *)v3 == 1 && *(_BYTE *)(*(_QWORD *)(v3 + 40) + 63) == 1)
    {
      v4 = (uint64_t)result;
      v5 = *(unsigned int **)(a2 + 72);
      v6 = *(_DWORD *)(v3 + 72);
      v7 = *((unsigned int *)result + 5);
      if ((int)v7 < 1)
      {
LABEL_12:
        if (v5 && (v11 = *v5, (int)v11 >= 1))
        {
          v12 = v5 + 6;
          while (1)
          {
            v13 = (unsigned __int8 *)*((_QWORD *)v12 - 2);
            if (*v13 != 167 || *((_DWORD *)v13 + 11) != v6 || (*v12 & 2) != 0)
              break;
            v12 += 24;
            if (!--v11)
              goto LABEL_19;
          }
        }
        else
        {
LABEL_19:
          result = sub_1ACC227C8((uint64_t)result, *(_DWORD *)(a2 + 8), *(_QWORD *)(*(_QWORD *)(a2 + 96) + 16), v6, 73);
          v14 = *(_DWORD *)(a2 + 12);
          if (v14 >= 1)
            return sub_1ACC227C8(v4, v14, *(_QWORD *)(*(_QWORD *)(a2 + 96) + 24), v6, 74);
        }
      }
      else
      {
        v8 = *((_QWORD *)result + 4) + 18;
        v9 = (__int16 *)v8;
        while (1)
        {
          v10 = *v9;
          v9 += 28;
          if ((v10 & 4) == 0 && !*(_BYTE *)(v8 + 4) && *(_DWORD *)(v8 + 10) != v6)
            break;
          v8 = (uint64_t)v9;
          if (!--v7)
            goto LABEL_12;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACC1A19C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v6;
  uint64_t v7;
  uint64_t i;
  unsigned __int8 *v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int *v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  _BYTE **v29;
  _BYTE *v30;
  unsigned __int8 *j;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (*(_DWORD *)a2 != 1)
    return 0;
  v6 = *(_DWORD *)(a2 + 72);
  v7 = *a4;
  if ((int)v7 >= 1)
  {
    for (i = 0; i != v7; ++i)
    {
      v9 = *(unsigned __int8 **)&a4[6 * i + 2];
      if (v9)
      {
        while (1)
        {
          v10 = *((_DWORD *)v9 + 1);
          if ((v10 & 0x82000) == 0)
            break;
          if ((v10 & 0x80000) != 0)
          {
            v9 = *(unsigned __int8 **)(*((_QWORD *)v9 + 4) + 8);
            if (!v9)
              goto LABEL_4;
          }
          else
          {
            v9 = (unsigned __int8 *)*((_QWORD *)v9 + 2);
            if (!v9)
              goto LABEL_4;
          }
        }
        v11 = *v9;
        if ((v11 == 169 || v11 == 167) && *((_DWORD *)v9 + 11) == v6 && (*((_DWORD *)v9 + 12) & 0x80000000) != 0)
          return 1;
      }
LABEL_4:
      ;
    }
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 16);
  if (!v13)
    return 0;
  while (!*(_BYTE *)(v13 + 98) || *(_QWORD *)(v13 + 72))
  {
LABEL_21:
    v13 = *(_QWORD *)(v13 + 40);
    if (!v13)
      return 0;
  }
  if (!*(_WORD *)(v13 + 94))
  {
    LODWORD(v14) = 0;
    goto LABEL_20;
  }
  v14 = 0;
  while (2)
  {
    if (sub_1ACC229EC(a3, v6, v14, -1, 2, (_QWORD *)v13))
      goto LABEL_27;
    v21 = *a4;
    if (*a4 < 1)
      break;
    v22 = 0;
    v23 = *(unsigned __int8 **)(*(_QWORD *)(v13 + 64) + 8 * v14);
    while (1)
    {
      v24 = (unsigned int *)&a4[6 * v22];
      v25 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
      if (v25)
      {
        v26 = (unsigned __int8 *)*((_QWORD *)v24 + 1);
        while (1)
        {
          v27 = *((_DWORD *)v26 + 1);
          if ((v27 & 0x82000) == 0)
            break;
          if ((v27 & 0x80000) != 0)
          {
            v26 = *(unsigned __int8 **)(*((_QWORD *)v26 + 4) + 8);
            if (!v26)
              goto LABEL_32;
          }
          else
          {
            v26 = (unsigned __int8 *)*((_QWORD *)v26 + 2);
            if (!v26)
              goto LABEL_32;
          }
        }
        v28 = *v26;
        if ((v28 == 169 || v28 == 167)
          && *((_DWORD *)v26 + 12) == *(__int16 *)(*(_QWORD *)(v13 + 8) + 2 * v14)
          && *((_DWORD *)v26 + 11) == v6)
        {
          break;
        }
      }
LABEL_32:
      if (++v22 >= v21)
        goto LABEL_20;
    }
    v29 = (_BYTE **)sub_1ACB78620(a1, v25, v15, v16, v17, v18, v19, v20);
    if (!v29)
      v29 = *(_BYTE ***)(*(_QWORD *)a1 + 16);
    v30 = *v29;
    for (j = v23; ; ++j)
    {
      v32 = *v30;
      v33 = *j;
      if ((_DWORD)v32 == (_DWORD)v33)
        break;
      if (byte_1ACCB6333[v32] != byte_1ACCB6333[v33])
      {
        v21 = *a4;
        goto LABEL_32;
      }
LABEL_48:
      ++v30;
    }
    if (*v30)
      goto LABEL_48;
    if ((v22 & 0x80000000) == 0)
    {
      v34 = *(unsigned __int16 *)(*(_QWORD *)(v13 + 8) + 2 * v14);
      if (*(__int16 *)(*(_QWORD *)(v13 + 8) + 2 * v14) < 0)
      {
        if ((_DWORD)v34 != 0xFFFF)
          break;
        goto LABEL_27;
      }
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 8) + 16 * v34 + 8) & 0xF) != 0)
      {
LABEL_27:
        if (++v14 >= (unint64_t)*(unsigned __int16 *)(v13 + 94))
          break;
        continue;
      }
    }
    break;
  }
LABEL_20:
  if ((_DWORD)v14 != *(unsigned __int16 *)(v13 + 94))
    goto LABEL_21;
  return 1;
}

_QWORD *sub_1ACC1A450(uint64_t a1, int a2)
{
  int v2;
  _QWORD **v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  _QWORD *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  signed __int16 v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  _QWORD *v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  __int16 v52;
  unsigned int v53;
  unint64_t v54;
  __int16 v55;
  signed __int16 v56;
  __int16 v57;
  unint64_t v58;
  BOOL v59;
  unint64_t v60;
  BOOL v61;
  __int16 v62;
  unsigned int v63;
  unint64_t v64;
  __int16 v65;
  __int16 v66;
  unint64_t v67;
  unint64_t v68;
  int v69;
  __int16 v70;
  __int16 v71;
  unint64_t v72;
  __int16 v73;
  unint64_t v74;
  __int16 v75;
  unsigned __int16 v76;
  int v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  __int16 *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  char v93;
  _WORD *v94;
  int v95;
  __int16 v96;
  int *v97;
  int v98;
  uint64_t v99;
  int v100;
  int v101;
  char v102;
  unsigned int v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  __int16 *v108;
  unsigned __int16 v110;
  char *v111;
  uint64_t v112;
  int v113;
  int v114;
  __int16 v115;
  int v116;
  int v117;
  _QWORD *v119;
  int v120;
  uint64_t v121;
  _QWORD v122[2];

  v2 = 0;
  v3 = *(_QWORD ***)a1;
  v4 = *(unsigned __int8 *)(a1 + 64);
  if ((_DWORD)v4 == 2)
    v5 = 5;
  else
    v5 = 10;
  v6 = v4 - 1;
  if (v4 <= 1)
    v7 = 1;
  else
    v7 = v5;
  if (a2)
  {
    v8 = *(int **)(a1 + 16);
    if (v8)
      v2 = *v8;
  }
  v9 = 2 * v7;
  v10 = v7;
  result = (_QWORD *)sub_1ACBE1124((uint64_t)*v3, 2 * v2 + 2 * (int)v7 * (8 * (int)v4 + 32));
  if (!result)
    return result;
  v18 = result;
  v19 = 4 * v10;
  v20 = (uint64_t)&result[v19];
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  v21 = (char *)&result[v19 + v19];
  v22 = v9 + 1;
  v23 = 3;
  v24 = v10;
  do
  {
    v18[v23] = v21;
    v21 += 8 * v4;
    v23 += 4;
    --v22;
  }
  while (v22 > 1);
  v117 = v10;
  if (v2)
  {
    v111 = v21;
    bzero(v21, 2 * v2);
    v24 = v10;
    v25 = *((__int16 *)v3 + 108);
    if (v25 >= 48)
      LOWORD(v25) = 48;
    if ((_DWORD)v4)
      v26 = -1;
    else
      v26 = v2;
    BYTE6(v18[4 * v10 + 2]) = v26;
  }
  else
  {
    v111 = 0;
    v25 = *((__int16 *)v3 + 108);
    if (v25 >= 48)
      LOWORD(v25) = 48;
  }
  v27 = a1;
  LOWORD(v18[4 * v24 + 2]) = v25;
  if (!(_DWORD)v4)
  {
LABEL_169:
    if ((*(_WORD *)(v27 + 60) & 0x180) == 0x100)
    {
      if (a2)
      {
        if (!*(_BYTE *)(v27 + 67))
        {
          v122[0] = 0;
          v92 = sub_1ACC26E2C((uint64_t *)v27, *(_WORD **)(v27 + 24), v20, 128, (unsigned __int16)(v4 - 1), *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8 * (v4 - 1)), v122, v17);
          v27 = a1;
          if (**(_DWORD **)(a1 + 24) == v92)
            *(_BYTE *)(a1 + 67) = 2;
        }
      }
    }
    v93 = *(_BYTE *)(v27 + 68);
    *(_BYTE *)(v27 + 68) = v93 & 0xFB;
    v94 = *(_WORD **)(v27 + 16);
    if (v94)
    {
      v95 = *(char *)(v20 + 22);
      *(_BYTE *)(v27 + 65) = *(_BYTE *)(v20 + 22);
      v96 = *(_WORD *)(v27 + 60);
      if ((v96 & 0x80) != 0)
      {
        if (*(_DWORD *)v94 == v95)
          *(_BYTE *)(v27 + 67) = 2;
        v97 = *(int **)(*(_QWORD *)(v27 + 32) + 72);
        if (v97)
        {
          v98 = *v97;
          if (v98 < v95)
            *(_BYTE *)(v27 + 65) = v98;
        }
      }
      else
      {
        *(_QWORD *)(v27 + 96) = *(_QWORD *)(v20 + 8);
        if (v95 <= 0)
        {
          *(_BYTE *)(v27 + 65) = 0;
          if ((_DWORD)v4)
          {
            v99 = *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8 * v6);
            if ((*(_DWORD *)(v99 + 48) & 0x1000) == 0 && (*(_DWORD *)(v99 + 48) & 0x104) != 0x104)
            {
              v122[0] = 0;
              v100 = sub_1ACC26E2C((uint64_t *)v27, v94, v20, 2048, (unsigned __int16)v6, v99, v122, v17);
              v27 = a1;
              v94 = *(_WORD **)(a1 + 16);
              if (*(_DWORD *)v94 == v100)
              {
                *(_BYTE *)(a1 + 68) |= 4u;
                *(_QWORD *)(a1 + 96) = v122[0];
              }
              v96 = *(_WORD *)(a1 + 60);
            }
          }
        }
        else if (v95 == 1 && (v96 & 3) != 0 && (_DWORD)v4)
        {
          *(_BYTE *)(v27 + 68) = v93 | 4;
        }
      }
      if ((v96 & 0x200) != 0 && (_DWORD)v4 && *(_DWORD *)v94 == *(char *)(v27 + 65))
      {
        v122[0] = 0;
        v101 = sub_1ACC26E2C((uint64_t *)v27, v94, v20, 0, (unsigned __int16)v6, *(_QWORD *)(*(_QWORD *)(v20 + 24) + 8 * v6), v122, v17);
        v27 = a1;
        if (**(_DWORD **)(a1 + 16) == v101)
        {
          *(_BYTE *)(a1 + 68) |= 8u;
          *(_QWORD *)(a1 + 96) = v122[0];
        }
      }
    }
    *(_WORD *)(v27 + 70) = *(_WORD *)(v20 + 16);
    return sub_1ACBE0F9C(*v3, v18);
  }
  v116 = v2;
  v105 = (uint64_t)v3;
  v106 = v4;
  v103 = v4 - 1;
  v121 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v110 = 0;
  if (v24 <= 2)
    v31 = 2;
  else
    v31 = v24;
  v32 = 1;
  v104 = v18;
  v112 = v4;
  do
  {
    v33 = v18;
    v107 = (_QWORD *)v20;
    v34 = 0;
    if (v32 >= 1)
    {
      v35 = 0;
      v108 = (__int16 *)v18 + 26;
      v36 = v20;
      v119 = v18;
      v113 = v32;
      while (1)
      {
        v120 = v35;
        v37 = *(_QWORD *)(v27 + 80);
        if (v37)
          break;
LABEL_31:
        v35 = v120 + 1;
        v36 += 32;
        if (v120 + 1 == v113)
          goto LABEL_28;
      }
      while (1)
      {
        v122[0] = 0;
        v38 = *(_QWORD *)v36;
        if ((*(_QWORD *)v37 & ~*(_QWORD *)v36) != 0)
          goto LABEL_35;
        v39 = *(_QWORD *)(v37 + 8);
        if ((v39 & v38) != 0)
          goto LABEL_35;
        v40 = *(__int16 *)(v36 + 16);
        if ((*(_BYTE *)(v37 + 49) & 0x40) != 0 && v40 < 3)
          goto LABEL_35;
        v41 = *(__int16 *)(v37 + 18);
        v42 = *(__int16 *)(v37 + 18);
        v43 = (__int16)(v40 + *(_WORD *)(v37 + 20));
        if (v41 >= v43)
        {
          if (v43 + 49 >= v41)
          {
            if (v43 + 31 >= v41)
              LOWORD(v41) = v41 + byte_1ACCBA360[v42 - (__int16)(v40 + *(_WORD *)(v37 + 20))];
            else
              LOWORD(v41) = v41 + 1;
          }
        }
        else if (v41 + 49 >= v43)
        {
          LOWORD(v41) = v41 + 31 >= v43
                      ? v40 + *(_WORD *)(v37 + 20) + byte_1ACCBA360[(__int16)(v40 + *(_WORD *)(v37 + 20)) - v42]
                      : v43 + 1;
        }
        else
        {
          LOWORD(v41) = v40 + *(_WORD *)(v37 + 20);
        }
        v44 = *(__int16 *)(v36 + 20);
        v45 = *(__int16 *)(v36 + 20);
        if ((__int16)v41 >= v44)
        {
          if (v44 + 49 >= (__int16)v41)
            LOWORD(v44) = v44 + 31 >= (__int16)v41 ? v41 + byte_1ACCBA360[(__int16)v41 - v45] : v41 + 1;
          else
            LOWORD(v44) = v41;
        }
        else if ((__int16)v41 + 49 >= v44)
        {
          if ((__int16)v41 + 31 >= v44)
            LOWORD(v44) = v44 + byte_1ACCBA360[v45 - (__int16)v41];
          else
            LOWORD(v44) = v44 + 1;
        }
        v13 = *(unsigned __int16 *)(v37 + 22);
        v46 = *(char *)(v36 + 22);
        if (v46 < 0)
        {
          v115 = v44;
          v114 = v34;
          v47 = *(unsigned __int16 *)(v37 + 22);
          v48 = v30;
          v49 = v31;
          v50 = v28;
          v51 = *(_WORD *)(v36 + 16);
          v46 = sub_1ACC26E2C((uint64_t *)v27, *(_WORD **)(v27 + 16), v36, *(unsigned __int16 *)(v27 + 60), v110, v37, v122, v17);
          v13 = v47;
          v34 = v114;
          LOWORD(v44) = v115;
          LOWORD(v40) = v51;
          v28 = v50;
          v31 = v49;
          v30 = v48;
          v33 = v119;
          LODWORD(v24) = v117;
          v27 = a1;
          if (v46 < 0)
            goto LABEL_68;
        }
        else
        {
          v122[0] = *(_QWORD *)(v36 + 8);
        }
        if (v116 <= v46)
        {
LABEL_68:
          v56 = v44;
          LOWORD(v44) = v44 - 2;
          goto LABEL_122;
        }
        v52 = *(_WORD *)&v111[2 * v46];
        if (!v52)
          break;
LABEL_111:
        if ((__int16)v44 >= v52)
        {
          v75 = v44;
          if (v52 + 49 >= (__int16)v44)
          {
            if (v52 + 31 >= (__int16)v44)
              v75 = v44 + byte_1ACCBA360[(__int16)v44 - v52];
            else
              v75 = v44 + 1;
          }
          goto LABEL_121;
        }
        if ((__int16)v44 + 49 >= v52)
        {
          if ((__int16)v44 + 31 >= v52)
            v75 = v52 + byte_1ACCBA360[v52 - (__int16)v44];
          else
            v75 = v52 + 1;
LABEL_121:
          v56 = v75 + 3;
          goto LABEL_122;
        }
        v56 = v52 + 3;
LABEL_122:
        v76 = v13 + v40;
        if (!v121 && (_DWORD)v112 != 1 && (*(_DWORD *)(v37 + 48) & 0x2000000) != 0)
        {
          v56 -= 10;
          v76 -= 30;
        }
        if (v34 < 1)
        {
LABEL_137:
          v79 = v34;
          if (v34 >= (int)v24)
          {
            if (v56 > v29)
              goto LABEL_35;
            v79 = v30;
            if (v56 == v29)
            {
              v79 = v30;
              if ((__int16)v44 >= (__int16)v28)
                goto LABEL_35;
            }
          }
          if (v34 < (int)v24)
            ++v34;
          v78 = &v33[4 * v79];
        }
        else
        {
          v77 = 0;
          v78 = v33;
          while (*v78 != (v39 | v38) || ((*((unsigned __int8 *)v78 + 22) ^ v46) & 0x80) != 0)
          {
            ++v77;
            v78 += 4;
            if (v34 == v77)
              goto LABEL_137;
          }
          if (*((__int16 *)v78 + 9) < v56
            || *((unsigned __int16 *)v78 + 9) == (unsigned __int16)v56
            && (*((__int16 *)v78 + 8) < (__int16)v76
             || *((unsigned __int16 *)v78 + 8) == v76 && *((__int16 *)v78 + 10) <= (__int16)v44))
          {
            goto LABEL_35;
          }
        }
        v80 = v28;
        *v78 = *(_QWORD *)(v37 + 8) | *(_QWORD *)v36;
        v78[1] = v122[0];
        *((_WORD *)v78 + 8) = v76;
        *((_WORD *)v78 + 9) = v56;
        *((_WORD *)v78 + 10) = v44;
        *((_BYTE *)v78 + 22) = v46;
        memcpy((void *)v78[3], *(const void **)(v36 + 24), 8 * v121);
        LODWORD(v24) = v117;
        *(_QWORD *)(v78[3] + 8 * v121) = v37;
        if (v34 < v117)
        {
          v27 = a1;
          v33 = v119;
          v28 = v80;
        }
        else
        {
          v33 = v119;
          v29 = *((_WORD *)v119 + 9);
          v28 = *((unsigned __int16 *)v119 + 8);
          v27 = a1;
          v30 = 0;
          if (v112 >= 2)
          {
            v81 = 1;
            v82 = v108;
            do
            {
              if (*(v82 - 1) > v29)
              {
                v83 = (unsigned __int16)*v82;
              }
              else
              {
                if (*(v82 - 1) != v29)
                  goto LABEL_146;
                v83 = *v82;
                if ((int)v83 <= (__int16)v28)
                  goto LABEL_146;
              }
              v30 = v81;
              v29 = *(v82 - 1);
              v28 = v83;
LABEL_146:
              v81 = (v81 + 1);
              v82 += 16;
            }
            while ((_DWORD)v31 != (_DWORD)v81);
          }
        }
LABEL_35:
        v37 = *(_QWORD *)(v37 + 72);
        if (!v37)
          goto LABEL_31;
      }
      v53 = (**(_DWORD **)(*(_QWORD *)(v27 + 32) + 32) + 59) / 30;
      v54 = (int)v53;
      if (v53 >= 8)
      {
        v57 = 40;
        if (v54 >= 0x100)
        {
          v58 = v54;
          do
          {
            v57 += 40;
            v54 = v58 >> 4;
            v59 = v58 > 0xFFF;
            v58 >>= 4;
          }
          while (v59);
        }
        LOBYTE(v60) = v54;
        if (v54 >= 0x10)
        {
          do
          {
            v57 += 10;
            v60 = v54 >> 1;
            v59 = v54 > 0x1F;
            v54 >>= 1;
          }
          while (v59);
        }
      }
      else
      {
        if (v53 < 2)
        {
          v55 = 0;
          goto LABEL_79;
        }
        v57 = 40;
        do
        {
          v57 -= 10;
          LOBYTE(v60) = 2 * v54;
          v61 = v54 >= 4;
          v54 *= 2;
        }
        while (!v61);
      }
      v55 = v57 + word_1ACCBD832[v60 & 7] - 10;
LABEL_79:
      v62 = v55 + a2;
      if (v46 < 1)
        goto LABEL_94;
      v63 = 100 * (v116 - v46) / v116;
      v64 = (int)v63;
      if (v63 >= 8)
      {
        v66 = 40;
        if (v64 >= 0x100)
        {
          v67 = v64;
          do
          {
            v66 += 40;
            v64 = v67 >> 4;
            v59 = v67 > 0xFFF;
            v67 >>= 4;
          }
          while (v59);
        }
        LOBYTE(v68) = v64;
        if (v64 >= 0x10)
        {
          do
          {
            v66 += 10;
            v68 = v64 >> 1;
            v59 = v64 > 0x1F;
            v64 >>= 1;
          }
          while (v59);
        }
      }
      else
      {
        if (v63 < 2)
        {
          v65 = -66;
LABEL_93:
          v62 += v65;
LABEL_94:
          if ((*(_WORD *)(v27 + 60) & 0x4000) != 0)
          {
            if (v46)
              v70 = 16;
            else
              v70 = 10;
            v62 += v70;
            v69 = *(__int16 *)(v27 + 62);
            if (v69 >= a2)
              LOWORD(v69) = a2;
          }
          else
          {
            LOWORD(v69) = a2 - 10;
            if (((a2 > 10) & ((unsigned __int16)(*(_WORD *)(v27 + 60) & 0x100) >> 8)) == 0)
              LOWORD(v69) = a2;
          }
          if ((__int16)v69 < 11)
          {
            v71 = 0;
LABEL_110:
            v52 = v71 + v62;
            *(_WORD *)&v111[2 * v46] = v52;
            goto LABEL_111;
          }
          v72 = (unsigned __int16)v69;
          if ((unsigned __int16)v69 < 0x100u)
          {
            v73 = 40;
            if (v72 < 0x10)
            {
LABEL_109:
              v71 = v73 + word_1ACCBD832[v72 & 7] - 43;
              goto LABEL_110;
            }
          }
          else
          {
            v73 = 40;
            v74 = v72;
            do
            {
              v73 += 40;
              v72 = v74 >> 4;
              v59 = v74 > 0xFFF;
              v74 >>= 4;
            }
            while (v59);
            if (v72 < 0x10)
              goto LABEL_109;
          }
          do
          {
            v73 += 10;
            v59 = v72 > 0x1F;
            v72 >>= 1;
          }
          while (v59);
          goto LABEL_109;
        }
        v66 = 40;
        do
        {
          v66 -= 10;
          LOBYTE(v68) = 2 * v64;
          v61 = v64 >= 4;
          v64 *= 2;
        }
        while (!v61);
      }
      v65 = v66 + word_1ACCBD832[v68 & 7] - 76;
      goto LABEL_93;
    }
LABEL_28:
    ++v110;
    v18 = v107;
    v20 = (uint64_t)v33;
    v32 = v34;
    v4 = v112;
    ++v121;
  }
  while (v121 != v112);
  v84 = v106;
  if (v34)
  {
    if (v34 < 2)
    {
      v6 = v103;
    }
    else
    {
      v85 = v33 + 4;
      v86 = v34 - 1;
      v6 = v103;
      do
      {
        if (*((__int16 *)v33 + 9) > *((__int16 *)v85 + 9))
          v33 = v85;
        v85 += 4;
        --v86;
      }
      while (v86);
    }
    v87 = (uint64_t *)v33[3];
    v88 = *(_QWORD *)(v27 + 8);
    v89 = (_QWORD *)(v27 + 952);
    v18 = v104;
    v3 = (_QWORD **)v105;
    do
    {
      v90 = *v87++;
      *v89 = v90;
      v91 = *(unsigned __int8 *)(v90 + 16);
      *((_BYTE *)v89 - 32) = v91;
      *((_DWORD *)v89 - 23) = *(_DWORD *)(v88 + 104 * v91 + 72);
      v89 += 15;
      --v84;
    }
    while (v84);
    v20 = (uint64_t)v33;
    goto LABEL_169;
  }
  v3 = (_QWORD **)v105;
  sub_1ACBCB308(v105, "no query solution", v12, v13, v14, v15, v16, v17, v102);
  v18 = v104;
  return sub_1ACBE0F9C(*v3, v18);
}

uint64_t sub_1ACC1AFD0(uint64_t result)
{
  unsigned int *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  __int16 v6;
  uint64_t v7;

  v1 = *(unsigned int **)(result + 8);
  v2 = *v1;
  if ((int)v2 >= 1)
  {
    v3 = 0;
    v4 = (char *)v1 + 69;
    v5 = (char *)v1 + 69;
    do
    {
      v6 = *(_WORD *)v5;
      v5 += 104;
      if ((v6 & 0x100) == 0
        || *(_BYTE *)(*(_QWORD *)(v4 + 35) + 18)
        || (v7 = *(_QWORD *)(v4 - 21)) == 0
        || !*(_QWORD *)(v7 + 72))
      {
        *(_QWORD *)(result + 96) |= 1 << v3;
      }
      ++v3;
      v4 = v5;
    }
    while (v2 != v3);
  }
  return result;
}

uint64_t sub_1ACC1B040(uint64_t a1)
{
  _DWORD *v2;
  int *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int v35;
  unint64_t v36;
  unint64_t v37;
  _DWORD *v38;
  _QWORD *v39;

  v2 = (_DWORD *)(a1 + 592);
  v3 = *(int **)(a1 + 24);
  if (!v3)
  {
    v6 = 0;
LABEL_23:
    v14 = *(int **)(a1 + 16);
    if (!v14)
      goto LABEL_48;
    goto LABEL_24;
  }
  v4 = *v3;
  if (*v3 >= 1)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v8 = *(unsigned __int8 **)&v3[6 * v5 + 2];
      if (v8)
      {
        if (*v8 == 167 && (*((_DWORD *)v8 + 1) & 0x20) == 0)
        {
          v10 = *((_DWORD *)v8 + 11);
          if (*(_DWORD *)(a1 + 600) == v10)
          {
            v7 = 1;
            goto LABEL_6;
          }
          v11 = *(unsigned int *)(a1 + 596);
          if ((int)v11 >= 2)
          {
            v12 = 0;
            v13 = v11 - 1;
            while (*(_DWORD *)(a1 + 604 + 4 * v12) != v10)
            {
              if (v13 == ++v12)
                goto LABEL_5;
            }
            v7 = 1 << (v12 + 1);
            goto LABEL_6;
          }
        }
        else if ((*((_DWORD *)v8 + 1) & 0x810000) == 0)
        {
          v7 = sub_1ACC220D4(v2, v8);
          v4 = *v3;
          goto LABEL_6;
        }
      }
LABEL_5:
      v7 = 0;
LABEL_6:
      v6 |= v7;
      if (++v5 >= v4)
        goto LABEL_23;
    }
  }
  v6 = 0;
  v14 = *(int **)(a1 + 16);
  if (v14)
  {
LABEL_24:
    v15 = *v14;
    if (*v14 < 1)
    {
      v17 = 0;
LABEL_47:
      v6 |= v17;
      goto LABEL_48;
    }
    v16 = 0;
    v17 = 0;
    while (1)
    {
      v19 = *(unsigned __int8 **)&v14[6 * v16 + 2];
      if (v19)
      {
        if (*v19 == 167 && (*((_DWORD *)v19 + 1) & 0x20) == 0)
        {
          v21 = *((_DWORD *)v19 + 11);
          if (*(_DWORD *)(a1 + 600) == v21)
          {
            v18 = 1;
            goto LABEL_28;
          }
          v22 = *(unsigned int *)(a1 + 596);
          if ((int)v22 >= 2)
          {
            v23 = 0;
            v24 = v22 - 1;
            while (*(_DWORD *)(a1 + 604 + 4 * v23) != v21)
            {
              if (v24 == ++v23)
                goto LABEL_27;
            }
            v18 = 1 << (v23 + 1);
            goto LABEL_28;
          }
        }
        else if ((*((_DWORD *)v19 + 1) & 0x810000) == 0)
        {
          v18 = sub_1ACC220D4(v2, v19);
          v15 = *v14;
          goto LABEL_28;
        }
      }
LABEL_27:
      v18 = 0;
LABEL_28:
      v17 |= v18;
      if (++v16 >= v15)
        goto LABEL_47;
    }
  }
LABEL_48:
  v25 = *(unsigned __int8 *)(a1 + 64);
  if ((unint64_t)v25 < 2)
    return -1;
  v26 = -1;
  v27 = *(_BYTE *)(*(_QWORD *)(a1 + 8) + 68);
  v28 = *(_BYTE *)(a1 + 64);
  do
  {
    v31 = a1 + 120 * (v25 - 1);
    v32 = *(_QWORD *)(v31 + 952);
    v33 = *(_QWORD *)(a1 + 8);
    v34 = *(unsigned __int8 *)(v32 + 16);
    if ((*(_BYTE *)(v33 + 104 * *(unsigned __int8 *)(v32 + 16) + 68) & 0x18) == 8
      && ((*(_WORD *)(a1 + 60) & 0x100) != 0 || (*(_BYTE *)(v32 + 49) & 0x10) != 0))
    {
      v29 = *(_QWORD *)(v32 + 8);
      if ((v29 & v6) == 0)
      {
        v35 = *(_DWORD *)(a1 + 124);
        if (v35 < 1)
        {
LABEL_69:
          if (v28 != v25)
          {
            memmove((void *)(v31 + 856), (const void *)(a1 + 120 * v25 + 856), 120 * (v28 - (int)v25));
            v28 = *(_BYTE *)(a1 + 64);
          }
          v26 &= ~v29;
          *(_BYTE *)(a1 + 64) = --v28;
        }
        else
        {
          v36 = *(_QWORD *)(a1 + 136);
          v37 = v36 + 56 * v35;
          v38 = (_DWORD *)(v33 + 104 * v34 + 72);
          v39 = (_QWORD *)v36;
          while (((v39[6] & v29) == 0 || (*(_BYTE *)(*v39 + 4) & 1) != 0 && *(_DWORD *)(*v39 + 56) == *v38)
               && ((v27 & 0x40) == 0 || (*(_BYTE *)(*v39 + 4) & 2) == 0 || *(_DWORD *)(*v39 + 56) != *v38))
          {
            v39 += 7;
            if ((unint64_t)v39 >= v37)
            {
              do
              {
                if ((*(_QWORD *)(v36 + 48) & v29) != 0)
                  *(_WORD *)(v36 + 18) |= 4u;
                v36 += 56;
              }
              while (v36 < v37);
              goto LABEL_69;
            }
          }
        }
      }
    }
  }
  while (v25-- > 2);
  return v26;
}

uint64_t sub_1ACC1B3AC(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  __int16 v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  BOOL v13;

  v1 = *(unsigned __int8 *)(result + 64);
  if (*(_BYTE *)(result + 64))
  {
    v2 = *(_QWORD *)(result + 8);
    v3 = *(_QWORD *)(result + 952);
    v4 = *(_QWORD *)(v2 + 104 * *(unsigned __int8 *)(v3 + 16) + 40);
    v5 = *(_DWORD *)(v4 + 48);
    if ((v5 & 0x10) != 0)
    {
      *(_DWORD *)(v4 + 48) = v5 | 0x100;
      if ((_DWORD)v1 != 1)
      {
        v6 = *(_WORD *)(v3 + 22);
        v7 = (uint64_t *)(result + 1072);
        v8 = v1 - 1;
        do
        {
          v9 = *v7;
          v10 = *(_QWORD *)(v2 + 104 * *(unsigned __int8 *)(*v7 + 16) + 40);
          v11 = *(_DWORD *)(v10 + 48);
          if ((v11 & 0x10) == 0)
            break;
          *(_DWORD *)(v10 + 48) = v11 | 0x100;
          v12 = *(_DWORD *)(v9 + 48);
          result = v12 & 0x300;
          v13 = (~v12 & 0x800001) != 0 || (_DWORD)result == 0;
          if (!v13 && *(__int16 *)(v10 + 58) < v6)
            *(_DWORD *)(v9 + 48) = v12 & 0xFFBFFFBF | 0x400000;
          v6 += *(_WORD *)(v9 + 22);
          v7 += 15;
          --v8;
        }
        while (v8);
      }
    }
  }
  return result;
}

uint64_t *sub_1ACC1B46C(uint64_t *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 **v10;
  BOOL v11;
  unsigned __int8 *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[2];
  __int128 v22;
  __int128 v23;

  if (*(_WORD *)(a2 + 96))
  {
    v6 = result;
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 24);
    while (1)
    {
      v9 = *(__int16 *)(*(_QWORD *)(a2 + 8) + 2 * v7);
      if (v9 == -2)
      {
        v10 = (unsigned __int8 **)(*(_QWORD *)(a2 + 80) + 24 * v7 + 8);
        v11 = (*(_BYTE *)(a4 + 60) & 0x58) != 0;
      }
      else
      {
        if ((v9 & 0x80000000) != 0)
          goto LABEL_4;
        v14 = *(_QWORD *)(v8 + 8);
        if ((*(_WORD *)(v14 + 16 * v9 + 14) & 0x20) == 0)
          goto LABEL_4;
        v15 = *(unsigned __int16 *)(v14 + 16 * v9 + 12);
        if (!v15)
          goto LABEL_4;
        if (*(_BYTE *)(v8 + 63))
          goto LABEL_4;
        v16 = *(_DWORD **)(v8 + 80);
        if (!v16 || *v16 < v15)
          goto LABEL_4;
        v11 = 0;
        v10 = (unsigned __int8 **)&v16[6 * (v15 - 1) + 2];
      }
      v12 = *v10;
      v23 = 0u;
      v21[0] = 0;
      WORD2(v23) = 1;
      v21[1] = sub_1ACB8B0F4;
      v22 = (unint64_t)sub_1ACC0B708;
      if (v12)
      {
        result = (uint64_t *)sub_1ACC0B714((uint64_t)v21, (uint64_t)v12);
        if (!WORD2(v23))
          break;
      }
LABEL_4:
      if (++v7 >= (unint64_t)*(unsigned __int16 *)(a2 + 96))
        return result;
    }
    if (*v6)
    {
      result = (uint64_t *)sub_1ACBE1124(*v6, 0x20uLL);
      v13 = result;
      if (!result)
        return result;
    }
    else
    {
      result = (uint64_t *)sub_1ACB5D828(32);
      v13 = result;
      if (!result)
        return result;
    }
    v13[3] = v6[12];
    result = (uint64_t *)sub_1ACB8B290(*v6, v12, 0, 0);
    *v13 = (uint64_t)result;
    *((_DWORD *)v13 + 2) = *(_DWORD *)(a4 + 64);
    *((_DWORD *)v13 + 3) = a3;
    *((_DWORD *)v13 + 4) = v7;
    *((_BYTE *)v13 + 20) = v11;
    v17 = *(_QWORD *)(a2 + 32);
    if (!v17)
    {
      result = (uint64_t *)sub_1ACC27860(*v6, a2);
      if (!result)
        goto LABEL_24;
      v17 = *(_QWORD *)(a2 + 32);
    }
    *((_BYTE *)v13 + 21) = *(_BYTE *)(v17 + v7);
LABEL_24:
    v6[12] = (uint64_t)v13;
    if (!v13[3])
    {
      if (*v6)
      {
        result = (uint64_t *)sub_1ACBE1124(*v6, 0x18uLL);
        if (!result)
          goto LABEL_29;
      }
      else
      {
        result = (uint64_t *)sub_1ACB5D828(24);
        if (!result)
        {
LABEL_29:
          v18 = v6[12];
          if (v18)
          {
            v19 = (_QWORD *)*v6;
            do
            {
              v6[12] = *(_QWORD *)(v18 + 24);
              if (*(_QWORD *)v18)
                sub_1ACBF8348(v19, *(unsigned __int8 **)v18);
              result = sub_1ACBE0F9C(v19, (_QWORD *)v18);
              v18 = v6[12];
            }
            while (v18);
          }
          goto LABEL_4;
        }
      }
      *result = v6[24];
      v6[24] = (uint64_t)result;
      result[1] = (uint64_t)v6;
      result[2] = (uint64_t)sub_1ACC277FC;
    }
    goto LABEL_4;
  }
  return result;
}

_QWORD *sub_1ACC1B6B8(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  _DWORD *v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  unsigned int *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *result;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t i;
  int32x4_t v37;
  int32x4_t v38;
  int8x16_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  uint64x2_t v43;
  int64x2_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  size_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  _BYTE *v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  char *v72;
  unsigned __int8 *v73;
  int v74;
  int v75;
  _QWORD **v76;
  unsigned __int8 *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  sqlite3_str *v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  void (**v101)(void *);
  void (**v102)(void *);
  uint64_t v103;
  uint64_t v104;
  int v105;
  uint64_t v106;
  _DWORD *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  _WORD *v120;
  __int16 v121;
  int v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  int v134;
  unsigned __int8 v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  int v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  int v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  int v161;
  char *v162;
  uint64_t v163;
  char *v164;
  int v165;
  BOOL v166;
  int v167;
  int v168;
  int v169;
  int v170;
  _DWORD *v171;
  int v172;
  unsigned int v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  uint64_t v178;
  char *v179;
  unsigned int v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  int *v187;
  int *v188;
  int v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  int v199;
  _QWORD *v200;
  int v201;
  uint64_t v202;
  _QWORD *v203;
  int v204;
  signed int v205;
  int v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v216;
  uint64_t v217;
  uint64_t v219;
  unsigned __int8 *v220;

  v9 = a1;
  v10 = a1[2];
  v11 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v11)
  {
    v199 = sub_1ACBFF5AC(a1[2], 15, 0, 0, 0, a6, a7, a8);
  }
  else
  {
    v199 = *(_DWORD *)(v10 + 144);
    *(_DWORD *)(v10 + 144) = v11 + 1;
    v12 = *(_QWORD *)(v10 + 136) + 40 * v11;
    *(_BYTE *)v12 = 15;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 17) = 0u;
    *(_QWORD *)(v12 + 32) = 0;
  }
  v13 = *(_QWORD *)(*a2 + 8);
  v208 = v13 + 104 * *(unsigned __int8 *)(a4 + 64) + 40;
  v211 = *(_QWORD *)v208;
  v14 = a2[4];
  v15 = *((_DWORD *)a2 + 5);
  v16 = v14 + 56 * v15;
  v213 = (uint64_t)v9;
  v217 = v13;
  v214 = *(unsigned __int8 *)(a4 + 64);
  v212 = *(_QWORD *)(a4 + 96);
  v207 = a2;
  if (v15 >= 1)
  {
    v17 = 0;
    v219 = 0;
    v204 = 0;
    v209 = 0;
    v18 = v13 + 104 * *(unsigned __int8 *)(a4 + 64);
    v19 = (_DWORD *)(v18 + 72);
    v20 = (_BYTE *)(v18 + 68);
    v202 = *(_QWORD *)(a4 + 96) + 80;
    while (1)
    {
      if ((*(_WORD *)(v14 + 18) & 2) == 0)
      {
        v21 = *(unsigned __int8 **)v14;
        if (sub_1ACC19DC4(*(_QWORD *)v14, v217, *(unsigned __int8 *)(a4 + 64)))
        {
          if (v21)
            v22 = sub_1ACB8B290(*v9, v21, 0, 0);
          else
            v22 = 0;
          v219 = sub_1ACC04474(v9, v219, (uint64_t)v22);
        }
      }
      v23 = *(_DWORD *)(v14 + 28);
      if (v23 == *v19 && (*(_WORD *)(v14 + 20) & 0x82) != 0)
      {
        if ((*v20 & 0x58) == 0
          || (v24 = *(_DWORD *)(*(_QWORD *)v14 + 4), (v24 & 3) != 0)
          && *(_DWORD *)(*(_QWORD *)v14 + 56) == v23
          && ((*v20 & 0x18) == 0 || (v24 & 2) == 0))
        {
          if ((*(_QWORD *)(v14 + 40) & a3) == 0)
          {
            v25 = *(unsigned int *)(v14 + 32);
            if ((v25 & 0x80000000) == 0
              && sub_1ACC22EC8(*(_QWORD *)v14, *(char *)(*(_QWORD *)(*(_QWORD *)v208 + 8) + 16 * v25 + 9)))
            {
              if (v25 <= 0x3F)
                v26 = 1 << v25;
              else
                v26 = 0x8000000000000000;
              if (!v204)
                sqlite3_log(284, "automatic index on %s(%s)", *(const char **)v211, *(const char **)(*(_QWORD *)(v211 + 8) + 16 * v25));
              if ((v26 & v209) == 0)
              {
                if (v17 >= *(unsigned __int16 *)(v212 + 56))
                {
                  v205 = (v17 & 0xFFFFFFF8) + 8;
                  v200 = *(_QWORD **)v213;
                  result = (_QWORD *)sub_1ACBE1124(*(_QWORD *)v213, 8 * v205);
                  if (!result)
                    goto LABEL_83;
                  v27 = result;
                  memcpy(result, *(const void **)(v212 + 64), 8 * *(unsigned __int16 *)(v212 + 56));
                  v29 = *(_QWORD **)(v212 + 64);
                  if (v29 != (_QWORD *)v202)
                    sub_1ACBE0F9C(v200, v29);
                  *(_QWORD *)(v212 + 64) = v27;
                  *(_WORD *)(v212 + 56) = v205;
                }
                else
                {
                  v27 = *(_QWORD **)(v212 + 64);
                }
                v27[v17++] = v14;
                v209 |= v26;
              }
              v204 = 1;
              v9 = (uint64_t *)v213;
            }
          }
        }
      }
      v14 += 56;
      if (v14 >= v16)
        goto LABEL_39;
    }
  }
  v209 = 0;
  v219 = 0;
  v17 = 0;
LABEL_39:
  *(_WORD *)(v212 + 52) = v17;
  *(_WORD *)(v212 + 24) = v17;
  *(_DWORD *)(v212 + 48) = 16961;
  if (*(_BYTE *)(v211 + 63) == 2)
  {
    v30 = -1;
    v31 = v217;
    v32 = v214;
  }
  else
  {
    v31 = v217;
    v32 = v214;
    v30 = *(_QWORD *)(v217 + 104 * v214 + 88) & (~v209 | 0x8000000000000000);
  }
  v33 = *(__int16 *)(v211 + 54);
  v34 = v33 - 63;
  if (v33 >= 63)
    LODWORD(v35) = 63;
  else
    LODWORD(v35) = *(__int16 *)(v211 + 54);
  v201 = v35;
  v206 = *(__int16 *)(v211 + 54);
  if (v33 >= 1)
  {
    if ((int)v35 <= 1)
      v35 = 1;
    else
      v35 = v35;
    if (v35 < 8)
    {
      for (i = 0; i != v35; ++i)
LABEL_54:
        v17 += (v30 >> i) & 1;
      goto LABEL_55;
    }
    i = v35 & 0x38;
    v37 = 0uLL;
    v38 = (int32x4_t)v17;
    v39 = (int8x16_t)vdupq_n_s64(v30);
    v40 = (int64x2_t)xmmword_1ACCBDDA0;
    v41 = (int64x2_t)xmmword_1ACCBDC40;
    v42 = vdupq_n_s64(4uLL);
    v43 = (uint64x2_t)vdupq_n_s64(1uLL);
    v44 = vdupq_n_s64(8uLL);
    v45 = v35 & 0x7FFFFFF8;
    do
    {
      v38 = vsubq_s32(v38, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v43, (uint64x2_t)v41), v39)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v43, (uint64x2_t)v40), v39)))));
      v37 = vsubq_s32(v37, (int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v43, (uint64x2_t)vaddq_s64(v41, v42)), v39)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)vshlq_u64(v43, (uint64x2_t)vaddq_s64(v40, v42)), v39)))));
      v40 = vaddq_s64(v40, v44);
      v41 = vaddq_s64(v41, v44);
      v45 -= 8;
    }
    while (v45);
    v17 = vaddvq_s32(vaddq_s32(v37, v38));
    if (i != v35)
      goto LABEL_54;
  }
LABEL_55:
  v46 = v31 + 104 * v32;
  v47 = *v9;
  v48 = v17 + ((*(uint64_t *)(v46 + 88) >> 63) & v34) + 1;
  v49 = (__int16)v48;
  v50 = 2 * (__int16)v48;
  v51 = v50 + 2;
  v210 = v48;
  v52 = v49 * 8 + ((3 * (__int16)v48 + v50 + 2 + 7) & 0xFFFFFFF8) + 112;
  v53 = v52;
  v203 = (_QWORD *)(v46 + 88);
  if (v47)
  {
    result = (_QWORD *)sub_1ACBE1124(v47, v52);
    v54 = result;
    if (result)
      goto LABEL_57;
LABEL_83:
    v76 = (_QWORD **)v213;
    v77 = (unsigned __int8 *)v219;
    goto LABEL_236;
  }
  result = (_QWORD *)sub_1ACB5D828(v52);
  v54 = result;
  if (!result)
    goto LABEL_83;
LABEL_57:
  bzero(v54, v53);
  v58 = &v54[v49 + 14];
  v54[1] = (char *)v58 + v51;
  v54[2] = v58;
  v54[7] = (char *)v58 + v51 + v50;
  v54[8] = v54 + 14;
  *((_WORD *)v54 + 48) = v210;
  *((_WORD *)v54 + 47) = v210 - 1;
  *(_QWORD *)(v212 + 32) = v54;
  *v54 = "auto-index";
  v54[3] = v211;
  v59 = v207[4];
  if (v59 >= v16)
  {
    v60 = 0;
    LOBYTE(v198) = 0;
  }
  else
  {
    v198 = 0;
    v197 = 0;
    v60 = 0;
    v61 = v217 + 104 * v214;
    v62 = (_DWORD *)(v61 + 72);
    v63 = (_BYTE *)(v61 + 68);
    do
    {
      v64 = *(_DWORD *)(v59 + 28);
      if (v64 == *v62 && (*(_WORD *)(v59 + 20) & 0x82) != 0)
      {
        if ((*v63 & 0x58) == 0
          || (v65 = *(_DWORD *)(*(_QWORD *)v59 + 4), (v65 & 3) != 0)
          && *(_DWORD *)(*(_QWORD *)v59 + 56) == v64
          && ((*v63 & 0x18) == 0 || (v65 & 2) == 0))
        {
          if ((*(_QWORD *)(v59 + 40) & a3) == 0)
          {
            v66 = *(unsigned int *)(v59 + 32);
            if ((v66 & 0x80000000) == 0)
            {
              v196 = *(_QWORD *)v59;
              if (sub_1ACC22EC8(*(_QWORD *)v59, *(char *)(*(_QWORD *)(*(_QWORD *)v208 + 8) + 16 * v66 + 9)))
              {
                v70 = 0x8000000000000000;
                if (v66 <= 0x3F)
                  v70 = 1 << v66;
                if ((v70 & v197) == 0)
                {
                  v195 = v70;
                  *(_WORD *)(v54[1] + 2 * v60) = v66;
                  v71 = (_QWORD *)sub_1ACBCCBB0(v213, v196, v67, v68, v69, v55, v56, v57);
                  v72 = v71 ? (char *)*v71 : "BINARY";
                  v197 |= v195;
                  *(_QWORD *)(v54[8] + 8 * v60++) = v72;
                  v73 = *(unsigned __int8 **)(v196 + 16);
                  if (v73)
                  {
                    v74 = sub_1ACB92644(v73);
                    v75 = v198;
                    if (v74 != 66)
                      v75 = 1;
                    v198 = v75;
                  }
                }
              }
            }
          }
        }
      }
      v59 += 56;
    }
    while (v59 < v16);
  }
  if (v206 < 1)
  {
    v80 = v213;
    v81 = v214;
    v82 = v211;
  }
  else
  {
    v78 = 0;
    if (v201 <= 1)
      v79 = 1;
    else
      v79 = v201;
    v80 = v213;
    v81 = v214;
    v82 = v211;
    do
    {
      if (((v30 >> v78) & 1) != 0)
      {
        *(_WORD *)(v54[1] + 2 * v60) = v78;
        *(_QWORD *)(v54[8] + 8 * v60++) = "BINARY";
      }
      ++v78;
    }
    while (v79 != v78);
  }
  if ((*v203 & 0x8000000000000000) != 0 && *(__int16 *)(v82 + 54) >= 64)
  {
    v83 = 0;
    v84 = v60;
    do
    {
      *(_WORD *)(v54[1] + 2 * v84) = v83 + 63;
      *(_QWORD *)(v54[8] + 8 * v84++) = "BINARY";
      v85 = v83 + 1;
      v86 = v83 + 64;
      ++v83;
    }
    while (v86 < *(__int16 *)(v82 + 54));
    v60 += v85;
  }
  *(_WORD *)(v54[1] + 2 * v60) = -1;
  *(_QWORD *)(v54[8] + 8 * v60) = "BINARY";
  v87 = *(_QWORD *)v80;
  if ((*(_BYTE *)(*(_QWORD *)v80 + 49) & 4) == 0 || *(_BYTE *)(v80 + 301) == 2)
  {
    v88 = 0;
    v89 = v219;
    v90 = v217;
    goto LABEL_135;
  }
  v91 = v54[3];
  v92 = (sqlite3_str *)&unk_1EECAC608;
  if (!sqlite3_initialize())
  {
    v93 = sub_1ACB5D828(32);
    if (v93)
    {
      v92 = (sqlite3_str *)v93;
      v94 = *(_DWORD *)(v87 + 136);
      *(_QWORD *)v93 = 0;
      *(_QWORD *)(v93 + 8) = 0;
      *(_DWORD *)(v93 + 16) = 0;
      *(_QWORD *)(v93 + 20) = v94;
      *(_WORD *)(v93 + 28) = 0;
    }
    else
    {
      v92 = (sqlite3_str *)&unk_1EECAC608;
    }
  }
  sqlite3_str_appendf(v92, "CREATE AUTOMATIC INDEX ON %s(", *(const char **)v91);
  if (*((unsigned __int16 *)v54 + 48) >= 2u)
  {
    sqlite3_str_appendf(v92, "%s%s", &byte_1ACCBEAEE, *(const char **)(*(_QWORD *)(v91 + 8) + 16 * *(__int16 *)v54[1]));
    if (*((unsigned __int16 *)v54 + 48) >= 3u)
    {
      v98 = 1;
      do
        sqlite3_str_appendf(v92, "%s%s", ", ", *(const char **)(*(_QWORD *)(v91 + 8) + 16 * *(__int16 *)(v54[1] + 2 * v98++)));
      while (v98 < *((unsigned __int16 *)v54 + 48) - 1);
    }
  }
  if (v92 == (sqlite3_str *)&unk_1EECAC608)
    goto LABEL_129;
  v99 = *((_QWORD *)v92 + 1);
  if (v99
    && (*(_BYTE *)(v99 + *((unsigned int *)v92 + 6)) = 0, *((_DWORD *)v92 + 5))
    && (*((_BYTE *)v92 + 29) & 4) == 0)
  {
    v100 = sub_1ACBE13A0((uint64_t *)v92);
  }
  else
  {
    v100 = (void *)*((_QWORD *)v92 + 1);
  }
  v101 = (void (**)(void *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_121;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v92);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v92);
  v92 = (sqlite3_str *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v101 = (void (**)(void *))&xmmword_1ECD3B1D0;
LABEL_121:
    (*v101)(v92);
  }
  if (v100)
  {
    v88 = sub_1ACC0BE9C((uint64_t *)v213, 0, "%s)%s", v96, v97, v55, v56, v57, (char)v100);
    v102 = (void (**)(void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_128:
      v89 = v219;
      v90 = v217;
      (*v102)(v100);
      v80 = v213;
LABEL_132:
      v81 = v214;
      goto LABEL_135;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v100);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v100);
    v100 = (void *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v102 = (void (**)(void *))&xmmword_1ECD3B1D0;
      goto LABEL_128;
    }
LABEL_131:
    v80 = v213;
    v89 = v219;
    v90 = v217;
    goto LABEL_132;
  }
LABEL_129:
  v103 = *(_QWORD *)v213;
  if (*(_BYTE *)(*(_QWORD *)v213 + 103))
  {
    v88 = 0;
    goto LABEL_131;
  }
  v89 = v219;
  v90 = v217;
  v81 = v214;
  if (*(_BYTE *)(v103 + 104))
    goto LABEL_134;
  *(_BYTE *)(v103 + 103) = 1;
  if (*(int *)(v103 + 220) >= 1)
    *(_DWORD *)(v103 + 424) = 1;
  ++*(_DWORD *)(v103 + 432);
  *(_WORD *)(v103 + 436) = 0;
  v191 = *(_QWORD *)(v103 + 344);
  if (v191
    && (sub_1ACBCB308(v191, "out of memory", v95, v96, v97, v55, v56, v57, v194),
        v192 = *(_QWORD *)(v103 + 344),
        *(_DWORD *)(v192 + 24) = 7,
        (v193 = *(_QWORD *)(v192 + 256)) != 0))
  {
    v80 = v213;
    v88 = 0;
    do
    {
      ++*(_DWORD *)(v193 + 48);
      *(_DWORD *)(v193 + 24) = 7;
      v193 = *(_QWORD *)(v193 + 256);
    }
    while (v193);
  }
  else
  {
LABEL_134:
    v88 = 0;
    v80 = v213;
  }
LABEL_135:
  v104 = *(unsigned int *)(v80 + 52);
  *(_DWORD *)(v80 + 52) = v104 + 1;
  *(_DWORD *)(a4 + 8) = v104;
  v105 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v105)
  {
    sub_1ACBFF5AC(v10, 116, v104, v210, 0, v55, v56, v57);
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v105 + 1;
    v106 = *(_QWORD *)(v10 + 136) + 40 * v105;
    *(_DWORD *)v106 = 116;
    *(_DWORD *)(v106 + 4) = v104;
    *(_DWORD *)(v106 + 8) = v210;
    *(_QWORD *)(v106 + 12) = 0;
    *(_QWORD *)(v106 + 28) = 0;
    *(_QWORD *)(v106 + 20) = 0;
    *(_DWORD *)(v106 + 36) = 0;
  }
  v107 = (_DWORD *)v80;
  v108 = *(_QWORD *)(v80 + 16);
  v109 = sub_1ACC09130(v107, (uint64_t)v54);
  if (v109)
  {
    if (*(_BYTE *)(*(_QWORD *)v108 + 103))
    {
      if (!*(_QWORD *)(*(_QWORD *)v108 + 816) && (*(_DWORD *)v109)-- == 1)
        sub_1ACBF0674(*(_QWORD **)(v109 + 16), (_QWORD *)v109);
    }
    else
    {
      v114 = *(_QWORD *)(v108 + 136) + 40 * *(int *)(v108 + 144);
      *(_BYTE *)(v114 - 39) = -8;
      *(_QWORD *)(v114 - 24) = v109;
    }
  }
  v76 = (_QWORD **)v213;
  if ((*(_BYTE *)(*(_QWORD *)v213 + 98) & 8) == 0 && (_BYTE)v198)
  {
    sub_1ACC279D8(v213, *v207, a4);
    v115 = (*(_DWORD *)(v213 + 56) + 1);
    *(_DWORD *)(v213 + 56) = v115;
    *(_DWORD *)(a4 + 52) = v115;
    v116 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v116)
    {
      sub_1ACBFF5AC(v10, 77, 10000, v115, 0, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v116 + 1;
      v117 = *(_QWORD *)(v10 + 136) + 40 * v116;
      *(_QWORD *)v117 = 0x27100000004DLL;
      *(_DWORD *)(v117 + 8) = v115;
      *(_QWORD *)(v117 + 12) = 0;
      *(_QWORD *)(v117 + 28) = 0;
      *(_QWORD *)(v117 + 20) = 0;
      *(_DWORD *)(v117 + 36) = 0;
    }
  }
  v118 = v81;
  v119 = v90 + 104 * v81;
  v121 = *(_WORD *)(v119 + 69);
  v120 = (_WORD *)(v119 + 69);
  v123 = *(unsigned int *)(v10 + 144);
  v122 = *(_DWORD *)(v10 + 148);
  v124 = *(_DWORD *)(v10 + 144);
  if ((v121 & 0x20) == 0)
  {
    v125 = *(unsigned int *)(a4 + 4);
    if (v122 <= (int)v123)
    {
      v216 = sub_1ACBFF5AC(v10, 36, v125, 0, 0, v110, v111, v112);
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v123 + 1;
      v126 = *(_QWORD *)(v10 + 136) + 40 * v124;
      *(_DWORD *)v126 = 36;
      *(_DWORD *)(v126 + 4) = v125;
      *(_OWORD *)(v126 + 8) = 0u;
      *(_OWORD *)(v126 + 24) = 0u;
      v216 = v123;
    }
    LODWORD(v123) = 0;
    if (!v89)
      goto LABEL_166;
LABEL_164:
    v134 = *(_DWORD *)(v213 + 68) - 1;
    *(_DWORD *)(v213 + 68) = v134;
    sub_1ACB9F1D0(v213, v89);
    *(_DWORD *)(v212 + 48) |= 0x20000u;
    goto LABEL_167;
  }
  v127 = *(unsigned int *)(v90 + 104 * v118 + 60);
  if (v122 <= (int)v123)
  {
    LODWORD(v123) = sub_1ACBFF5AC(v10, 71, 0, 0, 0, v110, v111, v112);
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v123 + 1;
    v128 = *(_QWORD *)(v10 + 136) + 40 * v124;
    *(_BYTE *)v128 = 71;
    *(_OWORD *)(v128 + 1) = 0u;
    *(_OWORD *)(v128 + 17) = 0u;
    *(_QWORD *)(v128 + 32) = 0;
  }
  v129 = *(unsigned int *)(v90 + 104 * v214 + 56);
  v130 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v130)
  {
    sub_1ACBFF5AC(v10, 11, v127, 0, v129, v110, v111, v112);
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v130 + 1;
    v131 = *(_QWORD *)(v10 + 136) + 40 * v130;
    *(_DWORD *)v131 = 11;
    *(_DWORD *)(v131 + 4) = v127;
    *(_DWORD *)(v131 + 8) = 0;
    *(_DWORD *)(v131 + 12) = v129;
    *(_QWORD *)(v131 + 24) = 0;
    *(_QWORD *)(v131 + 32) = 0;
    *(_QWORD *)(v131 + 16) = 0;
  }
  v132 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v132)
  {
    v216 = sub_1ACBFF5AC(v10, 12, v127, 0, 0, v110, v111, v112);
    if (v89)
      goto LABEL_164;
  }
  else
  {
    v216 = *(unsigned int *)(v10 + 144);
    *(_DWORD *)(v10 + 144) = v132 + 1;
    v133 = *(_QWORD *)(v10 + 136) + 40 * v132;
    *(_DWORD *)v133 = 12;
    *(_DWORD *)(v133 + 4) = v127;
    *(_OWORD *)(v133 + 8) = 0u;
    *(_OWORD *)(v133 + 24) = 0u;
    if (v89)
      goto LABEL_164;
  }
LABEL_166:
  v134 = 0;
LABEL_167:
  v220 = (unsigned __int8 *)v89;
  if (*(_BYTE *)(v213 + 31))
  {
    v135 = *(_BYTE *)(v213 + 31) - 1;
    *(_BYTE *)(v213 + 31) = v135;
    v136 = *(unsigned int *)(v213 + 4 * v135 + 224);
  }
  else
  {
    v136 = (*(_DWORD *)(v213 + 56) + 1);
    *(_DWORD *)(v213 + 56) = v136;
  }
  v137 = v136;
  result = (_QWORD *)sub_1ACB98FD8(v213, v54, *(unsigned int *)(a4 + 4));
  v141 = (int)result;
  v142 = *(unsigned int *)(a4 + 52);
  if ((_DWORD)v142)
  {
    v138 = *(unsigned __int16 *)(v212 + 24);
    v143 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v143)
    {
      result = (_QWORD *)sub_1ACBFF7F0(v10, 180, v142, 0, (uint64_t)result, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v143 + 1;
      v144 = *(_QWORD *)(v10 + 136) + 40 * v143;
      *(_DWORD *)v144 = 64948;
      *(_DWORD *)(v144 + 4) = v142;
      *(_DWORD *)(v144 + 8) = 0;
      *(_DWORD *)(v144 + 12) = (_DWORD)result;
      *(_DWORD *)(v144 + 16) = v138;
      *(_QWORD *)(v144 + 24) = 0;
      *(_QWORD *)(v144 + 32) = 0;
    }
  }
  v145 = *(_DWORD *)(v10 + 144);
  if ((*(_BYTE *)(*(_QWORD *)v10 + 49) & 4) != 0)
  {
    v146 = *(unsigned int *)(v10 + 392);
    v147 = 56 * v146;
    v148 = v146 + 1;
    while (--v148 >= 1)
    {
      v149 = v147 - 56;
      v150 = *(_QWORD *)(v10 + 400);
      v151 = *(_DWORD *)(v150 + v147 - 56);
      v147 -= 56;
      if (v151 == v88)
      {
        if (v88 >= 1)
          *(_DWORD *)(v150 + v149 + 28) = v88;
        if (v145 >= 1)
          *(_DWORD *)(v150 + v149 + 32) = v145;
        break;
      }
    }
  }
  v152 = *(unsigned int *)(a4 + 8);
  if (*(_DWORD *)(v10 + 148) <= v145)
  {
    result = (_QWORD *)sub_1ACBFF5AC(v10, 138, v152, v137, 0, v138, v139, v140);
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v145 + 1;
    v153 = *(_QWORD *)(v10 + 136) + 40 * v145;
    *(_DWORD *)v153 = 138;
    *(_DWORD *)(v153 + 4) = v152;
    *(_DWORD *)(v153 + 8) = v137;
    *(_QWORD *)(v153 + 12) = 0;
    *(_QWORD *)(v153 + 28) = 0;
    *(_QWORD *)(v153 + 20) = 0;
    *(_DWORD *)(v153 + 36) = 0;
  }
  v154 = *(_DWORD *)(v10 + 144);
  if (v154 >= 1)
    *(_WORD *)(*(_QWORD *)(v10 + 136) + 40 * (v154 - 1) + 2) = 16;
  if (!v220)
  {
LABEL_190:
    if ((*v120 & 0x20) == 0)
      goto LABEL_191;
    goto LABEL_197;
  }
  result = *(_QWORD **)(v10 + 24);
  v155 = ~v134;
  if (*((_DWORD *)result + 17) + *((_DWORD *)result + 18) >= 0)
  {
    *(_DWORD *)(result[10] + 4 * v155) = v154;
    goto LABEL_190;
  }
  result = (_QWORD *)sub_1ACC0D5D4((uint64_t)result, v10, v155);
  if ((*v120 & 0x20) == 0)
  {
LABEL_191:
    v156 = *(unsigned int *)(a4 + 4);
    v157 = v216;
    v158 = (v216 + 1);
    v159 = *(_DWORD *)(v10 + 144);
    if (*(_DWORD *)(v10 + 148) <= v159)
    {
      result = (_QWORD *)sub_1ACBFF5AC(v10, 39, v156, v158, 0, v138, v139, v140);
    }
    else
    {
      *(_DWORD *)(v10 + 144) = v159 + 1;
      v160 = *(_QWORD *)(v10 + 136) + 40 * v159;
      *(_DWORD *)v160 = 39;
      *(_DWORD *)(v160 + 4) = v156;
      *(_DWORD *)(v160 + 8) = v158;
      *(_QWORD *)(v160 + 12) = 0;
      *(_QWORD *)(v160 + 28) = 0;
      *(_QWORD *)(v160 + 20) = 0;
      *(_DWORD *)(v160 + 36) = 0;
    }
    v161 = *(_DWORD *)(v10 + 144);
    if (v161 >= 1)
      *(_WORD *)(*(_QWORD *)(v10 + 136) + 40 * (v161 - 1) + 2) = 3;
    goto LABEL_216;
  }
LABEL_197:
  if (*(_BYTE *)(*(_QWORD *)v10 + 103))
    v162 = &byte_1EECAD280;
  else
    v162 = (char *)(*(_QWORD *)(v10 + 136) + 40 * (int)v123);
  *((_DWORD *)v162 + 2) = v141 + v60;
  v163 = *(_QWORD *)(v213 + 16);
  v157 = v216;
  if (*(_BYTE *)(*(_QWORD *)v163 + 103))
    v164 = &byte_1EECAD280;
  else
    v164 = (char *)(*(_QWORD *)(v163 + 136) + 40 * (int)v216);
  if (!*(_BYTE *)(*(_QWORD *)v213 + 103))
  {
    v165 = *(_DWORD *)(v163 + 144);
    v166 = __OFSUB__(v165, (_DWORD)v216);
    v167 = v165 - v216;
    if (!((v167 < 0) ^ v166 | (v167 == 0)))
    {
      v168 = *(_DWORD *)(v217 + 104 * v214 + 64);
      v169 = *(_DWORD *)(a4 + 4);
      v170 = *(_DWORD *)(a4 + 8);
      v171 = v164 + 8;
      do
      {
        if (*(v171 - 1) == v169)
        {
          v172 = *((unsigned __int8 *)v171 - 8);
          if (v172 == 135)
          {
            *((_BYTE *)v171 - 8) = 126;
            *(v171 - 1) = v170;
          }
          else if (v172 == 94)
          {
            *((_BYTE *)v171 - 8) = 80;
            v173 = v171[1];
            *(v171 - 1) = *v171 + v168;
            *(_QWORD *)v171 = v173;
            *((_WORD *)v171 - 3) = 2;
          }
        }
        v171 += 10;
        --v167;
      }
      while (v167);
    }
  }
  v174 = *(_DWORD *)(v10 + 144);
  if (*(_DWORD *)(v10 + 148) <= v174)
  {
    result = (_QWORD *)sub_1ACBFF5AC(v10, 9, 0, v216, 0, v138, v139, v140);
  }
  else
  {
    *(_DWORD *)(v10 + 144) = v174 + 1;
    v175 = *(_QWORD *)(v10 + 136) + 40 * v174;
    *(_QWORD *)v175 = 9;
    *(_DWORD *)(v175 + 8) = v216;
    *(_QWORD *)(v175 + 12) = 0;
    *(_QWORD *)(v175 + 28) = 0;
    *(_QWORD *)(v175 + 20) = 0;
    *(_DWORD *)(v175 + 36) = 0;
  }
  *v120 &= ~0x20u;
  v161 = *(_DWORD *)(v10 + 144);
LABEL_216:
  v176 = *(_QWORD *)v10;
  v177 = *(unsigned __int8 *)(*(_QWORD *)v10 + 103);
  if (*(_BYTE *)(*(_QWORD *)v10 + 103))
  {
    dword_1EECAD288 = v161;
    if (!(_DWORD)v137)
      goto LABEL_222;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(v10 + 136) + 40 * v157 + 8) = v161;
    if (!(_DWORD)v137)
      goto LABEL_222;
  }
  v178 = *(unsigned __int8 *)(v213 + 31);
  if (v178 <= 7)
  {
    *(_BYTE *)(v213 + 31) = v178 + 1;
    *(_DWORD *)(v213 + 4 * v178 + 224) = v137;
    v161 = *(_DWORD *)(v10 + 144);
  }
LABEL_222:
  if (v177)
    v179 = &byte_1EECAD280;
  else
    v179 = (char *)(*(_QWORD *)(v10 + 136) + 40 * v199);
  v77 = v220;
  *((_DWORD *)v179 + 2) = v161;
  if ((*(_BYTE *)(v176 + 49) & 4) != 0)
  {
    v180 = *(_DWORD *)(v10 + 392);
    v181 = 56 * v180 + 20;
    v182 = v180 + 1;
    while ((int)--v182 >= 1)
    {
      v183 = v181 - 56;
      v184 = *(_QWORD *)(v10 + 400);
      v185 = *(_DWORD *)(v184 + v181 - 76);
      v181 -= 56;
      if (v185 == v88)
      {
        v186 = v184 + v183;
        v187 = (int *)(v184 + v183 - 16);
        if (*v187)
        {
          v189 = *(_DWORD *)(v186 - 8);
          v188 = (int *)(v186 - 8);
          if (v189)
          {
            v187 = (int *)(v184 + v183);
            if (*(_DWORD *)(v184 + v183))
              break;
            v190 = 5;
          }
          else
          {
            v190 = 3;
            v187 = v188;
          }
        }
        else
        {
          v190 = 1;
        }
        *v187 = v88;
        *(_DWORD *)(v184 + 4 * v190 + v183 - 16) = v161 - 1;
        break;
      }
    }
  }
LABEL_236:
  if (v77)
    return sub_1ACBF8348(*v76, v77);
  return result;
}

uint64_t sub_1ACC1C9CC(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int16x8_t v40;
  int v41;
  uint64_t *v42;
  uint64_t *v43;
  _QWORD *v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  unsigned __int8 v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  _DWORD *v75;
  uint64_t result;
  int v77;
  uint64_t v78;
  int v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  int v83;
  int v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  _DWORD *v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  int v97;
  uint64_t v98;
  int v99;
  unsigned int v100;

  v9 = a3;
  v11 = (uint64_t)a1;
  v12 = *a1;
  v13 = *(_QWORD **)(*a1 + 16);
  v14 = *(_QWORD *)(a3 + 96);
  v93 = *(_QWORD *)(*a1 + 96);
  *(_QWORD *)(*a1 + 96) = 0;
  v15 = *((_DWORD *)v13 + 36);
  if (*((_DWORD *)v13 + 37) <= v15)
  {
    v90 = sub_1ACBFF5AC((uint64_t)v13, 15, 0, 0, 0, a6, a7, a8);
  }
  else
  {
    v90 = *((_DWORD *)v13 + 36);
    *((_DWORD *)v13 + 36) = v15 + 1;
    v16 = v13[17] + 40 * v15;
    *(_BYTE *)v16 = 15;
    *(_OWORD *)(v16 + 1) = 0u;
    *(_OWORD *)(v16 + 17) = 0u;
    *(_QWORD *)(v16 + 32) = 0;
  }
  v89 = (_DWORD *)(v12 + 44);
  v92 = v11 + 856;
  v94 = (uint64_t)v13;
  v95 = a4;
  v98 = v11;
  do
  {
    v97 = a2;
    sub_1ACC279D8(v12, v11, v9);
    v20 = *(_DWORD *)(v12 + 68);
    *(_DWORD *)(v12 + 68) = v20 - 1;
    v100 = *(_DWORD *)(v9 + 4);
    v21 = (*(_DWORD *)(v12 + 56) + 1);
    *(_DWORD *)(v12 + 56) = v21;
    *(_DWORD *)(v9 + 52) = v21;
    v22 = *(_QWORD *)(v11 + 8);
    v23 = *(unsigned __int8 *)(v9 + 64);
    v24 = *(__int16 *)(*(_QWORD *)(v22 + 104 * *(unsigned __int8 *)(v9 + 64) + 40) + 58);
    v96 = v20;
    if (v24 <= 609)
    {
      v26 = ((26215 * (__int16)v24) >> 18) + ((26215 * (__int16)v24) >> 31);
      v27 = (__int16)v24 % 10;
      v28 = v27 - 2;
      v29 = v27 - 1;
      if (!((__int16)v24 % 10))
        v29 = 0;
      if ((unsigned __int16)((__int16)v24 % 10) <= 4u)
        v30 = v29;
      else
        v30 = v28;
      v31 = v30 + 8;
      v32 = v31 << (v26 - 3);
      v33 = v31 >> (3 - v26);
      if (v24 <= 29)
        v34 = v33;
      else
        v34 = v32;
      if (v34 >= 0x989680)
        v34 = 10000000;
      if (v34 <= 0x2710)
        v25 = 10000;
      else
        v25 = v34;
    }
    else
    {
      v25 = 10000000;
    }
    v35 = *((_DWORD *)v13 + 36);
    if (*((_DWORD *)v13 + 37) <= v35)
    {
      sub_1ACBFF5AC((uint64_t)v13, 77, v25, v21, 0, v17, v18, v19);
    }
    else
    {
      *((_DWORD *)v13 + 36) = v35 + 1;
      v36 = v13[17] + 40 * v35;
      *(_DWORD *)v36 = 77;
      *(_DWORD *)(v36 + 4) = v25;
      *(_DWORD *)(v36 + 8) = v21;
      *(_QWORD *)(v36 + 12) = 0;
      *(_QWORD *)(v36 + 28) = 0;
      *(_QWORD *)(v36 + 20) = 0;
      *(_DWORD *)(v36 + 36) = 0;
    }
    v37 = *((_DWORD *)v13 + 36);
    v38 = v14;
    if (*((_DWORD *)v13 + 37) <= v37)
    {
      v99 = sub_1ACBFF5AC((uint64_t)v13, 36, v100, 0, 0, v17, v18, v19);
    }
    else
    {
      v99 = *((_DWORD *)v13 + 36);
      *((_DWORD *)v13 + 36) = v37 + 1;
      v39 = v13[17] + 40 * v37;
      *(_DWORD *)v39 = 36;
      *(_DWORD *)(v39 + 4) = v100;
      v40 = 0uLL;
      *(_OWORD *)(v39 + 8) = 0u;
      *(_OWORD *)(v39 + 24) = 0u;
    }
    v41 = *(_DWORD *)(v11 + 124);
    if (v41 >= 1)
    {
      v42 = *(uint64_t **)(v98 + 136);
      v43 = &v42[7 * v41];
      do
      {
        if ((*((_WORD *)v42 + 9) & 2) == 0 && sub_1ACC19DC4(*v42, v22, v23))
          sub_1ACB9F1D0(v12, *v42);
        v42 += 7;
      }
      while (v42 < v43);
    }
    v14 = v38;
    if ((*(_BYTE *)(v38 + 49) & 1) != 0)
    {
      if (*(_BYTE *)(v12 + 31))
      {
        v48 = *(_BYTE *)(v12 + 31) - 1;
        *(_BYTE *)(v12 + 31) = v48;
        v49 = *(unsigned int *)(v12 + 4 * v48 + 224);
      }
      else
      {
        v49 = (*(_DWORD *)(v12 + 56) + 1);
        *(_DWORD *)(v12 + 56) = v49;
      }
      v11 = v98;
      v54 = *((_DWORD *)v13 + 36);
      if (*((_DWORD *)v13 + 37) <= v54)
      {
        sub_1ACBFF5AC((uint64_t)v13, 135, v100, v49, 0, v17, v18, v19);
      }
      else
      {
        *((_DWORD *)v13 + 36) = v54 + 1;
        v55 = v13[17] + 40 * v54;
        *(_DWORD *)v55 = 135;
        *(_DWORD *)(v55 + 4) = v100;
        *(_DWORD *)(v55 + 8) = v49;
        *(_QWORD *)(v55 + 12) = 0;
        *(_QWORD *)(v55 + 28) = 0;
        *(_QWORD *)(v55 + 20) = 0;
        *(_DWORD *)(v55 + 36) = 0;
      }
      v56 = v95;
      v57 = *(unsigned int *)(v9 + 52);
      v58 = *((_DWORD *)v13 + 36);
      if (*((_DWORD *)v13 + 37) <= v58)
      {
        sub_1ACBFF7F0((uint64_t)v13, 180, v57, 0, v49, 1, v18, v19);
        v60 = v96;
        if ((_DWORD)v49)
        {
LABEL_50:
          v61 = *(unsigned __int8 *)(v12 + 31);
          if (v61 <= 7)
          {
            *(_BYTE *)(v12 + 31) = v61 + 1;
            *(_DWORD *)(v12 + 4 * v61 + 224) = v49;
          }
        }
      }
      else
      {
        *((_DWORD *)v13 + 36) = v58 + 1;
        v59 = v13[17] + 40 * v58;
        *(_DWORD *)v59 = 64948;
        *(_DWORD *)(v59 + 4) = v57;
        *(_DWORD *)(v59 + 8) = 0;
        *(_DWORD *)(v59 + 12) = v49;
        *(_DWORD *)(v59 + 16) = 1;
        *(_QWORD *)(v59 + 24) = 0;
        *(_QWORD *)(v59 + 32) = 0;
        v60 = v96;
        if ((_DWORD)v49)
          goto LABEL_50;
      }
    }
    else
    {
      v44 = *(_QWORD **)(v38 + 32);
      v45 = *(unsigned __int16 *)(v38 + 24);
      if ((_DWORD)v45 == 1)
      {
        if (*(_BYTE *)(v12 + 31))
        {
          v46 = *(_BYTE *)(v12 + 31) - 1;
          *(_BYTE *)(v12 + 31) = v46;
          LODWORD(v47) = *(_DWORD *)(v12 + 4 * v46 + 224);
        }
        else
        {
          LODWORD(v47) = *(_DWORD *)(v12 + 56) + 1;
          *(_DWORD *)(v12 + 56) = v47;
        }
LABEL_55:
        v91 = v38;
        v62 = 0;
        v63 = 8;
        v47 = v47;
        while (1)
        {
          v64 = v47 + v62;
          v65 = *(__int16 *)(v44[1] + 2 * v62);
          if ((_DWORD)v65 == -2)
            break;
          *(double *)v40.i64 = sub_1ACC0B288(*(_QWORD *)(v12 + 16), v44[3], v100, v65, v47 + v62, v17, v18, v19, v40);
LABEL_57:
          ++v62;
          v63 += 24;
          if (v45 == v62)
          {
            v14 = v91;
            goto LABEL_68;
          }
        }
        v66 = v47;
        *(_DWORD *)(v12 + 64) = v100 + 1;
        v67 = *(unsigned __int8 **)(v44[10] + v63);
        v68 = v12;
        v69 = *(_QWORD *)v12;
        if (v67)
        {
          v70 = (unsigned __int8 *)sub_1ACB8B290(v69, v67, 0, 0);
          if (*(_BYTE *)(v69 + 103))
          {
LABEL_62:
            if (v70)
              sub_1ACBF8348((_QWORD *)v69, v70);
            v12 = v68;
            *(_DWORD *)(v68 + 64) = 0;
            v47 = v66;
            goto LABEL_57;
          }
        }
        else
        {
          v70 = 0;
          if (*(_BYTE *)(v69 + 103))
            goto LABEL_62;
        }
        sub_1ACC08D80(v68, v70, v64);
        goto LABEL_62;
      }
      v50 = *(_DWORD *)(v12 + 40);
      v51 = __OFSUB__(v50, (_DWORD)v45);
      v52 = v50 - v45;
      if (v52 < 0 != v51)
      {
        v53 = *(_DWORD *)(v12 + 56);
        v47 = (v53 + 1);
        *(_DWORD *)(v12 + 56) = v53 + v45;
        if ((_DWORD)v45)
          goto LABEL_55;
      }
      else
      {
        v47 = *(unsigned int *)(v12 + 44);
        *(_DWORD *)(v12 + 40) = v52;
        *(_DWORD *)(v12 + 44) = v47 + v45;
        if ((_DWORD)v45)
          goto LABEL_55;
      }
LABEL_68:
      v71 = *(unsigned int *)(v9 + 52);
      v13 = (_QWORD *)v94;
      v72 = *(_DWORD *)(v94 + 144);
      if (*(_DWORD *)(v94 + 148) <= v72)
      {
        sub_1ACBFF7F0(v94, 180, v71, 0, v47, v45, v18, v19);
      }
      else
      {
        *(_DWORD *)(v94 + 144) = v72 + 1;
        v73 = *(_QWORD *)(v94 + 136) + 40 * v72;
        *(_DWORD *)v73 = 64948;
        *(_DWORD *)(v73 + 4) = v71;
        *(_DWORD *)(v73 + 8) = 0;
        *(_DWORD *)(v73 + 12) = v47;
        *(_DWORD *)(v73 + 16) = v45;
        *(_QWORD *)(v73 + 24) = 0;
        *(_QWORD *)(v73 + 32) = 0;
      }
      v56 = v95;
      v11 = v98;
      v60 = v96;
      if ((_DWORD)v45 == 1)
      {
        if ((_DWORD)v47)
        {
          v74 = *(unsigned __int8 *)(v12 + 31);
          if (v74 <= 7)
          {
            *(_BYTE *)(v12 + 31) = v74 + 1;
            v75 = (_DWORD *)(v12 + 4 * v74 + 224);
LABEL_77:
            *v75 = v47;
          }
        }
      }
      else if (*(_DWORD *)(v12 + 40) < (int)v45)
      {
        *(_DWORD *)(v12 + 40) = v45;
        v75 = v89;
        goto LABEL_77;
      }
    }
    result = v13[3];
    v77 = -v60;
    if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
      result = sub_1ACC0D5D4(result, (uint64_t)v13, v77);
    else
      *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v77) = *((_DWORD *)v13 + 36);
    v78 = *(unsigned int *)(v9 + 4);
    v79 = v99;
    v80 = (v99 + 1);
    v81 = *((_DWORD *)v13 + 36);
    if (*((_DWORD *)v13 + 37) <= v81)
    {
      result = sub_1ACBFF5AC((uint64_t)v13, 39, v78, v80, 0, v17, v18, v19);
      v79 = v99;
    }
    else
    {
      *((_DWORD *)v13 + 36) = v81 + 1;
      v82 = v13[17] + 40 * v81;
      *(_DWORD *)v82 = 39;
      *(_DWORD *)(v82 + 4) = v78;
      *(_DWORD *)(v82 + 8) = v80;
      *(_QWORD *)(v82 + 12) = 0;
      *(_QWORD *)(v82 + 28) = 0;
      *(_QWORD *)(v82 + 20) = 0;
      *(_DWORD *)(v82 + 36) = 0;
    }
    v83 = *((_DWORD *)v13 + 36);
    v84 = *(unsigned __int8 *)(*v13 + 103);
    v85 = &byte_1EECAD280;
    if (!*(_BYTE *)(*v13 + 103))
      v85 = (char *)(v13[17] + 40 * v79);
    *((_DWORD *)v85 + 2) = v83;
    *(_DWORD *)(v14 + 48) &= ~0x400000u;
    if ((*(_BYTE *)(*(_QWORD *)v12 + 98) & 0x10) != 0)
      break;
    v86 = *(unsigned __int8 *)(v11 + 64);
    a2 = v97 + 1;
    if (v97 + 1 < (int)v86)
    {
      v9 = v92 + 120 * a2;
      v87 = v86 - a2;
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v11 + 8) + 104 * *(unsigned __int8 *)(v9 + 64) + 68) & 0x48) == 0)
        {
          v14 = *(_QWORD *)(v9 + 96);
          if (v14)
          {
            if ((*(_QWORD *)v14 & v56) == 0 && (*(_DWORD *)(v14 + 48) & 0x400004) == 0x400000)
              break;
          }
        }
        v9 += 120;
        ++a2;
        if (!--v87)
          goto LABEL_95;
      }
    }
  }
  while (a2 < (int)v86);
LABEL_95:
  if (v84)
    v88 = &byte_1EECAD280;
  else
    v88 = (char *)(v13[17] + 40 * v90);
  *((_DWORD *)v88 + 2) = v83;
  *(_QWORD *)(v12 + 96) = v93;
  return result;
}

uint64_t sub_1ACC1D144(uint64_t *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _BOOL4 v13;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t i;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  void *v31;
  __int128 v32;
  __int128 v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v6 = (uint64_t *)a1[21];
  if (!v6)
    v6 = a1;
  v7 = *((unsigned __int8 *)v6 + 301);
  v8 = *a1;
  if (v7 != 2 && (*(_BYTE *)(v8 + 49) & 4) == 0)
    return 0;
  v9 = *(unsigned __int8 *)(a3 + 64);
  v10 = a1[2];
  v32 = 0u;
  v33 = 0u;
  v11 = *(_QWORD *)(a3 + 96);
  v12 = *(_DWORD *)(v11 + 48);
  if ((v12 & 0x2000) != 0 || (a4 & 0x20) != 0)
    return 0;
  v13 = (v12 & 0x30) != 0 || (v12 & 0x400) == 0 && *(_WORD *)(v11 + 24) || (a4 & 3) != 0;
  *(_QWORD *)&v32 = v8;
  *((_QWORD *)&v32 + 1) = &v34;
  *(_QWORD *)&v33 = 0x7FFFFFFD00000064;
  DWORD2(v33) = 0;
  WORD6(v33) = 256;
  v15 = "SCAN";
  if (v13)
    v15 = "SEARCH";
  sqlite3_str_appendf((sqlite3_str *)&v32, "%s %S", v15, (const void *)(a2 + 104 * v9 + 8));
  if ((v12 & 0x500) != 0)
  {
    if ((v12 & 0x100) != 0 && (v12 & 0xF) != 0)
    {
      sqlite3_str_appendf((sqlite3_str *)&v32, " USING INTEGER PRIMARY KEY (%s", "rowid");
      if ((v12 & 5) == 0 && (v12 & 0x30) == 0x30)
        sqlite3_str_appendf((sqlite3_str *)&v32, ">? AND %s", "rowid");
      sqlite3_str_appendf((sqlite3_str *)&v32, "%c?)");
    }
    else if ((v12 & 0x400) != 0)
    {
      sqlite3_str_appendf((sqlite3_str *)&v32, " VIRTUAL TABLE INDEX %d:%s");
    }
    goto LABEL_65;
  }
  v17 = *(_QWORD *)(v11 + 32);
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 104 * v9 + 40) + 48) & 0x80) == 0 || (*(_WORD *)(v17 + 99) & 3) != 2)
  {
    if ((v12 & 0x20000) != 0)
    {
      v18 = "AUTOMATIC PARTIAL COVERING INDEX";
    }
    else if ((v12 & 0x4000) != 0)
    {
      v18 = "AUTOMATIC COVERING INDEX";
    }
    else if ((v12 & 0x40) != 0)
    {
      v18 = "COVERING INDEX %s";
    }
    else
    {
      v18 = "INDEX %s";
    }
    goto LABEL_35;
  }
  if (v13)
  {
    v18 = "PRIMARY KEY";
LABEL_35:
    v19 = DWORD2(v33);
    if (DWORD2(v33) + 7 >= v33)
    {
      sub_1ACBC290C((uint64_t)&v32, " USING ", 7u);
    }
    else
    {
      DWORD2(v33) += 7;
      v20 = (_DWORD *)(*((_QWORD *)&v32 + 1) + v19);
      *(_DWORD *)((char *)v20 + 3) = 541544009;
      *v20 = 1230198048;
    }
    sqlite3_str_appendf((sqlite3_str *)&v32, v18, *(_QWORD *)v17);
    v21 = *(_QWORD *)(v11 + 32);
    v22 = *(unsigned __int16 *)(v11 + 24);
    v23 = *(unsigned __int16 *)(v11 + 54);
    if (*(_WORD *)(v11 + 24) || (*(_BYTE *)(v11 + 48) & 0x30) != 0)
    {
      v24 = DWORD2(v33);
      if (DWORD2(v33) + 2 >= v33)
      {
        sub_1ACBC290C((uint64_t)&v32, " (", 2u);
      }
      else
      {
        DWORD2(v33) += 2;
        *(_WORD *)(*((_QWORD *)&v32 + 1) + v24) = 10272;
      }
      if ((_DWORD)v22)
      {
        if ((_DWORD)v23)
          sqlite3_str_appendf((sqlite3_str *)&v32, "ANY(%s)");
        else
          sqlite3_str_appendf((sqlite3_str *)&v32, "%s=?");
        if ((_DWORD)v22 == 1)
        {
          LODWORD(v22) = 1;
        }
        else
        {
          for (i = 1; i != v22; ++i)
          {
            v27 = DWORD2(v33);
            if (DWORD2(v33) + 5 < v33)
            {
              DWORD2(v33) += 5;
              v26 = *((_QWORD *)&v32 + 1) + v27;
              *(_BYTE *)(v26 + 4) = 32;
              *(_DWORD *)v26 = 1145979168;
            }
            else
            {
              sub_1ACBC290C((uint64_t)&v32, " AND ", 5u);
            }
            if (i >= v23)
              sqlite3_str_appendf((sqlite3_str *)&v32, "%s=?");
            else
              sqlite3_str_appendf((sqlite3_str *)&v32, "ANY(%s)");
          }
        }
      }
      v28 = *(_DWORD *)(v11 + 48);
      v29 = v22;
      if ((v28 & 0x20) != 0)
      {
        sub_1ACC27C90((sqlite3_str *)&v32, v21, *(unsigned __int16 *)(v11 + 26), v22, v22, ">");
        v28 = *(_DWORD *)(v11 + 48);
        v29 = 1;
      }
      if ((v28 & 0x10) != 0)
        sub_1ACC27C90((sqlite3_str *)&v32, v21, *(unsigned __int16 *)(v11 + 28), v22, v29, "<");
      v30 = DWORD2(v33);
      if (DWORD2(v33) + 1 >= v33)
      {
        sub_1ACBC290C((uint64_t)&v32, ")", 1u);
      }
      else
      {
        ++DWORD2(v33);
        *(_BYTE *)(*((_QWORD *)&v32 + 1) + v30) = 41;
      }
    }
  }
LABEL_65:
  if ((*(_BYTE *)(a2 + 104 * v9 + 68) & 8) != 0)
    sqlite3_str_appendf((sqlite3_str *)&v32, " LEFT-JOIN");
  if (*((_QWORD *)&v32 + 1)
    && (*(_BYTE *)(*((_QWORD *)&v32 + 1) + DWORD2(v33)) = 0, DWORD1(v33))
    && (BYTE13(v33) & 4) == 0)
  {
    v31 = sub_1ACBE13A0((uint64_t *)&v32);
  }
  else
  {
    v31 = (void *)*((_QWORD *)&v32 + 1);
  }
  return sub_1ACBA86CC((uint64_t *)v10, 185, *(unsigned int *)(v10 + 144), *((unsigned int *)a1 + 78), 0, (uint64_t)v31, 4294967290, v16);
}

uint64_t sub_1ACC1D6B8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8, int16x8_t a9)
{
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unsigned __int32 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int *v29;
  int v30;
  __int16 v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unsigned __int8 **v36;
  int v37;
  int v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  int v57;
  int v58;
  unsigned int *v59;
  signed int v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _WORD *v64;
  uint64_t v65;
  unsigned int v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  unint64_t v88;
  uint64_t v89;
  unsigned __int32 v90;
  int v91;
  uint64_t v92;
  _WORD *v93;
  __int16 v94;
  int v95;
  int v96;
  BOOL v97;
  __int16 v98;
  unsigned int v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  _BYTE *v123;
  unsigned int v124;
  int v125;
  int v126;
  uint64_t v127;
  __int16 v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  char *v142;
  int v143;
  uint64_t *v144;
  int16x8_t v145;
  int16x8_t v146;
  int16x8_t v147;
  uint64_t v149;
  int v150;
  unsigned __int16 *v151;
  unsigned __int16 *v152;
  uint64_t v153;
  int16x8_t *v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  int v160;
  int v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  int v166;
  int v167;
  unsigned int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unsigned __int8 v174;
  int v175;
  uint64_t v176;
  uint64_t v177;
  int v178;
  uint64_t v179;
  int v180;
  uint64_t v181;
  uint64_t v182;
  int v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  _DWORD *v189;
  uint64_t v190;
  uint64_t v191;
  signed int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  int v198;
  int v199;
  uint64_t v200;
  uint64_t v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  _WORD *v207;
  uint64_t v208;
  unsigned int v209;
  unsigned int v210;
  uint64_t v211;
  unsigned int v212;
  _WORD *v213;
  unsigned __int8 ***v214;
  _BYTE *v215;
  unsigned __int8 *v216;
  int v217;
  int **v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  uint64_t v224;
  unsigned int v225;
  uint64_t v226;
  uint64_t v227;
  _QWORD *v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  uint64_t v234;
  unsigned __int8 *v235;
  uint64_t v236;
  uint64_t v237;
  unsigned int v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  uint64_t v246;
  unsigned int v247;
  unsigned int v248;
  int v249;
  uint64_t v250;
  uint64_t v251;
  int v252;
  unsigned int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  char *v258;
  char *v259;
  uint64_t v260;
  unsigned int v261;
  int v262;
  uint64_t v263;
  _WORD *v264;
  __int16 v265;
  int v266;
  int v267;
  BOOL v268;
  __int16 v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  char v273;
  uint64_t v274;
  unsigned __int8 v275;
  _BOOL4 v276;
  _BOOL4 v277;
  int v278;
  unsigned __int8 *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int **v284;
  int v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  int v293;
  uint64_t v294;
  BOOL v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  int v301;
  int v302;
  int v303;
  unsigned int v304;
  uint64_t v305;
  int v306;
  int v307;
  int v308;
  char *v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  int v315;
  uint64_t v316;
  int v317;
  uint64_t v318;
  unsigned __int8 **v319;
  uint64_t v320;
  unsigned __int8 *v321;
  int v322;
  int v323;
  int **v324;
  unsigned int v325;
  int v326;
  BOOL v327;
  unsigned int v328;
  unsigned int v329;
  uint64_t v330;
  _WORD *v331;
  __int16 v332;
  int v333;
  int v334;
  BOOL v335;
  __int16 v336;
  int v337;
  unsigned __int8 *v338;
  unsigned __int8 *v339;
  unsigned __int8 v340;
  signed int v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  uint64_t v345;
  int v346;
  int v347;
  uint64_t i;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  int v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unsigned int *v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  unsigned __int8 *v373;
  unsigned __int8 *v374;
  uint64_t v375;
  unsigned __int8 *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  int v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  int v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  uint64_t v395;
  int16x8_t v396;
  uint64_t v397;
  uint64_t j;
  uint64_t v399;
  uint64_t v400;
  int v401;
  int v402;
  uint64_t v403;
  unsigned int *v404;
  int v405;
  uint64_t v406;
  char *v407;
  int v408;
  uint64_t v409;
  uint64_t v410;
  int v411;
  _QWORD *v412;
  char *v413;
  int v414;
  _QWORD *v415;
  char *v416;
  int v417;
  char *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  int v423;
  unsigned __int8 *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  int **v432;
  uint64_t v433;
  unsigned int v434;
  char *v435;
  uint64_t v436;
  uint64_t v437;
  int v438;
  unsigned int v439;
  uint64_t v440;
  int v441;
  uint64_t v442;
  uint64_t v443;
  int v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  unint64_t v449;
  unsigned int v450;
  uint64_t v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  uint64_t v456;
  int v457;
  unsigned int v458;
  char v459;
  char v460;
  int v461;
  uint64_t v462;
  int v463;
  int v464;
  int v465;
  uint64_t v466;
  char *v467;
  unsigned int v468;
  unsigned int v469;
  int v470;
  unsigned int v471;
  unsigned int v472;
  unsigned int v473;
  unsigned int v474;
  _QWORD *v475;
  unsigned int v476;
  uint64_t v477;
  uint64_t v478;
  unsigned int v479;
  unsigned int v480;
  uint64_t v481;
  uint64_t v482;
  unsigned int v483;
  uint64_t v484;
  unsigned int v485;
  uint64_t v486;
  unsigned int v487;
  uint64_t v488;
  uint64_t v489;
  unsigned int v490;
  unsigned int v491;
  int v492;
  unsigned int v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  unsigned __int32 v497;
  uint64_t v498;
  uint64_t v500;
  int v501[2];
  int v502[2];
  unsigned int v503;
  int16x8_t v506;
  int16x8_t v507;
  int16x8_t v508;
  int16x8_t v509;
  int16x8_t v510;
  char *v511;
  uint64_t (*v512)(uint64_t, unsigned __int8 *);
  __int128 v513;
  uint64_t v514;
  int16x8_t v515;
  int16x8_t v516;
  int16x8_t v517;
  int16x8_t v518;
  uint64_t v519;

  v500 = *(_QWORD *)a1;
  v11 = *((_QWORD *)a5 + 12);
  v12 = *(_QWORD *)(a3 + 8);
  v13 = *((unsigned __int8 *)a5 + 64);
  v14 = v12 + 104 * *((unsigned __int8 *)a5 + 64);
  v15 = *(_DWORD *)(v14 + 72);
  v497 = v15;
  if (*(_DWORD *)(a3 + 600) == v15)
  {
    v16 = 1;
  }
  else
  {
    v17 = *(unsigned int *)(a3 + 596);
    if ((int)v17 < 2)
    {
LABEL_7:
      v16 = 0;
    }
    else
    {
      v18 = 0;
      v19 = v17 - 1;
      while (1)
      {
        v20 = *(_DWORD *)(a3 + 604 + 4 * v18++);
        if (v20 == v15)
          break;
        if (v19 == v18)
          goto LABEL_7;
      }
      v16 = 1 << v18;
    }
  }
  v498 = a6;
  *((_QWORD *)a5 + 13) = a6 & ~v16;
  v21 = *(_QWORD *)(a3 + 96);
  v22 = *(_DWORD *)(a1 + 68);
  v23 = v22 - 1;
  a5[3] = v23;
  a5[4] = v23;
  v22 -= 2;
  *(_DWORD *)(a1 + 68) = v22;
  v503 = v22;
  a5[6] = v22;
  if (v13 && (*(_BYTE *)(v12 + 104 * v13 + 68) & 8) != 0)
  {
    v24 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v24;
    *a5 = v24;
    v25 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v25)
    {
      sub_1ACBFF5AC(a2, 71, 0, v24, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(a2 + 144) = v25 + 1;
      v26 = *(_QWORD *)(a2 + 136) + 40 * v25;
      *(_QWORD *)v26 = 71;
      *(_DWORD *)(v26 + 8) = v24;
      *(_QWORD *)(v26 + 12) = 0;
      *(_QWORD *)(v26 + 28) = 0;
      *(_QWORD *)(v26 + 20) = 0;
      *(_DWORD *)(v26 + 36) = 0;
    }
  }
  LODWORD(v27) = a4;
  if (a4 >= 1)
  {
    v27 = a4;
    v28 = a3 + 120 * a4 + 856;
    v29 = (int *)v28;
    while (1)
    {
      v30 = *v29;
      v29 -= 30;
      if (v30 || *(_QWORD *)(v28 + 56))
        break;
      v28 = (uint64_t)v29;
      if (v27-- <= 1)
      {
        LODWORD(v27) = 0;
        break;
      }
    }
  }
  v496 = v12 + 104 * v13;
  v32 = *(_WORD *)(v496 + 69);
  if ((v32 & 0x20) != 0)
  {
    v47 = v12 + 104 * v13;
    v48 = *(unsigned int *)(v47 + 56);
    v49 = *(unsigned int *)(v47 + 60);
    v44 = a2;
    v50 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v50)
    {
      sub_1ACBFF5AC(a2, 11, v49, 0, v48, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(a2 + 144) = v50 + 1;
      v51 = *(_QWORD *)(a2 + 136) + 40 * v50;
      *(_DWORD *)v51 = 11;
      *(_DWORD *)(v51 + 4) = v49;
      *(_DWORD *)(v51 + 8) = 0;
      *(_DWORD *)(v51 + 12) = v48;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0;
      *(_QWORD *)(v51 + 16) = 0;
    }
    v59 = a5;
    v60 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v60)
    {
      v60 = sub_1ACBFF5AC(a2, 12, v49, v23, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(a2 + 144) = v60 + 1;
      v61 = *(_QWORD *)(a2 + 136) + 40 * v60;
      *(_DWORD *)v61 = 12;
      *(_DWORD *)(v61 + 4) = v49;
      *(_DWORD *)(v61 + 8) = v23;
      *(_QWORD *)(v61 + 12) = 0;
      *(_QWORD *)(v61 + 28) = 0;
      *(_QWORD *)(v61 + 20) = 0;
      *(_DWORD *)(v61 + 36) = 0;
    }
    v62 = 0;
    a5[18] = v60;
    v63 = 9;
LABEL_42:
    *((_BYTE *)v59 + 65) = v63;
    goto LABEL_135;
  }
  v33 = v21 >> a4;
  v493 = (v21 >> a4) & 1;
  v34 = *(_DWORD *)(v11 + 48);
  if ((v34 & 0x400) != 0)
  {
    v52 = *(unsigned __int16 *)(v11 + 52);
    v53 = v52 + 2;
    v54 = a1;
    v55 = *(_DWORD *)(a1 + 40);
    v56 = __OFSUB__(v55, v52 + 2);
    v57 = v55 - (v52 + 2);
    if (v57 < 0 != v56)
    {
      v58 = *(_DWORD *)(a1 + 56);
      v66 = v58 + 1;
      *(_DWORD *)(a1 + 56) = v58 + v53;
    }
    else
    {
      v66 = *(_DWORD *)(a1 + 44);
      *(_DWORD *)(a1 + 40) = v57;
      *(_DWORD *)(a1 + 44) = v66 + v53;
    }
    v487 = v66;
    v490 = a5[3];
    if ((_DWORD)v52)
    {
      v67 = 0;
      v68 = v66 + 2;
      do
      {
        v69 = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 8 * v67);
        if (v69)
        {
          if ((*(_WORD *)(v69 + 20) & 1) != 0)
          {
            v73 = 1 << v67;
            if (v67 >= 0x20)
              v73 = 0;
            if ((*(_DWORD *)(v11 + 40) & v73) != 0)
            {
              v74 = *(unsigned int *)(v54 + 52);
              v75 = v54;
              v76 = (*(_DWORD *)(v54 + 56) + 1);
              *(_DWORD *)(v75 + 52) = v74 + 1;
              *(_DWORD *)(v75 + 56) = v76;
              sub_1ACC0C730();
              v77 = *(_DWORD *)(a2 + 144);
              if (*(_DWORD *)(a2 + 148) <= v77)
              {
                sub_1ACBFF5AC(a2, 174, v74, v68 + v67, v76, a6, a7, a8);
              }
              else
              {
                *(_DWORD *)(a2 + 144) = v77 + 1;
                v78 = *(_QWORD *)(a2 + 136) + 40 * v77;
                *(_DWORD *)v78 = 174;
                *(_DWORD *)(v78 + 4) = v74;
                *(_DWORD *)(v78 + 8) = v68 + v67;
                *(_DWORD *)(v78 + 12) = v76;
                *(_QWORD *)(v78 + 24) = 0;
                *(_QWORD *)(v78 + 32) = 0;
                *(_QWORD *)(v78 + 16) = 0;
              }
              v54 = a1;
            }
            else
            {
              sub_1ACB92834((uint64_t *)v54, (unsigned __int8 **)v69, (int *)a5, v67, v493, v68 + v67, a7, a8);
              v490 = a5[4];
            }
          }
          else
          {
            sub_1ACC2822C(v54, *(unsigned __int8 **)(*(_QWORD *)v69 + 24), v68 + v67, 1, (uint64_t)a5, a6, a7, a8);
            if (*(_BYTE *)(v69 + 23) == 74 && (*(_BYTE *)(v11 + 28) & 2) != 0)
            {
              v70 = *(unsigned int *)(*(_QWORD *)(a3 + 32) + 12);
              v71 = *(_DWORD *)(a2 + 144);
              if (*(_DWORD *)(a2 + 148) <= v71)
              {
                sub_1ACBFF5AC(a2, 71, 0, v70, 0, a6, a7, a8);
              }
              else
              {
                *(_DWORD *)(a2 + 144) = v71 + 1;
                v72 = *(_QWORD *)(a2 + 136) + 40 * v71;
                *(_QWORD *)v72 = 71;
                *(_DWORD *)(v72 + 8) = v70;
                *(_QWORD *)(v72 + 12) = 0;
                *(_QWORD *)(v72 + 28) = 0;
                *(_QWORD *)(v72 + 20) = 0;
                *(_DWORD *)(v72 + 36) = 0;
              }
            }
          }
        }
        ++v67;
      }
      while (v52 != v67);
    }
    v79 = *(unsigned int *)(v11 + 24);
    v44 = a2;
    v80 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v80)
    {
      v82 = v487;
      sub_1ACBFF5AC(a2, 71, v79, v487, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(a2 + 144) = v80 + 1;
      v81 = *(_QWORD *)(a2 + 136) + 40 * v80;
      *(_DWORD *)v81 = 71;
      *(_DWORD *)(v81 + 4) = v79;
      v82 = v487;
      *(_DWORD *)(v81 + 8) = v487;
      *(_QWORD *)(v81 + 12) = 0;
      *(_QWORD *)(v81 + 28) = 0;
      *(_QWORD *)(v81 + 20) = 0;
      *(_DWORD *)(v81 + 36) = 0;
    }
    v83 = (v82 + 1);
    v84 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v84)
    {
      sub_1ACBFF5AC(a2, 71, v52, v83, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(a2 + 144) = v84 + 1;
      v85 = *(_QWORD *)(a2 + 136) + 40 * v84;
      *(_DWORD *)v85 = 71;
      *(_DWORD *)(v85 + 4) = v52;
      *(_DWORD *)(v85 + 8) = v83;
      *(_QWORD *)(v85 + 12) = 0;
      *(_QWORD *)(v85 + 28) = 0;
      *(_QWORD *)(v85 + 20) = 0;
      *(_DWORD *)(v85 + 36) = 0;
    }
    if ((*(_BYTE *)(v11 + 28) & 1) != 0)
      v86 = 4294967290;
    else
      v86 = 0xFFFFFFFFLL;
    sub_1ACBA86CC((uint64_t *)a2, 6, v497, v490, v82, *(_QWORD *)(v11 + 32), v86, a8);
    *(_BYTE *)(v11 + 28) &= ~1u;
    if (*(_BYTE *)(v500 + 103))
      *(_QWORD *)(v11 + 32) = 0;
    a5[17] = v497;
    if (*(_BYTE *)(a3 + 66))
      v87 = -72;
    else
      v87 = 63;
    *((_BYTE *)a5 + 65) = v87;
    a5[18] = *(_DWORD *)(a2 + 144);
    if ((_DWORD)v52)
    {
      v88 = 0;
      v494 = v82 + 2;
      do
      {
        v92 = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 8 * v88);
        if (v88 <= 0xF && ((*(unsigned __int16 *)(v11 + 30) >> v88) & 1) != 0)
        {
          v93 = (_WORD *)(v92 + 18);
          v94 = *(_WORD *)(v92 + 18);
          if ((v94 & 4) == 0)
          {
            v95 = 0;
            v96 = *a5;
            do
            {
              if (v96 && (*(_BYTE *)(*(_QWORD *)v92 + 4) & 1) == 0)
                break;
              if ((*(_QWORD *)(v92 + 48) & *((_QWORD *)a5 + 13)) != 0)
                break;
              v97 = !v95 || (v94 & 0x400) == 0;
              v98 = v97 ? 4 : 512;
              *v93 = v98 | v94;
              v99 = *(_DWORD *)(v92 + 24);
              if ((v99 & 0x80000000) != 0)
                break;
              v100 = *(_QWORD *)(*(_QWORD *)(v92 + 8) + 32);
              v101 = v100 + 56 * v99;
              v102 = *(_BYTE *)(v101 + 22) - 1;
              *(_BYTE *)(v101 + 22) = v102;
              if (v102)
                break;
              v92 = v100 + 56 * v99;
              v93 = (_WORD *)(v92 + 18);
              v94 = *(_WORD *)(v92 + 18);
              --v95;
            }
            while ((v94 & 4) == 0);
          }
          goto LABEL_87;
        }
        if ((*(_WORD *)(v92 + 20) & 1) != 0)
        {
          v103 = 1 << v88;
          if (v88 >= 0x20)
            v103 = 0;
          if ((*(_DWORD *)(v11 + 40) & v103) == 0 && !*(_BYTE *)(v500 + 103))
          {
            v104 = a5[20];
            if ((int)v104 < 1)
              goto LABEL_124;
            v105 = 0;
            v106 = (v494 + v88);
            v107 = 20 * v104;
            while (1)
            {
              v108 = (unsigned int *)&byte_1EECAD280;
              if (!*(_BYTE *)(*(_QWORD *)v44 + 103))
                v108 = (unsigned int *)(*(_QWORD *)(v44 + 136) + 40 * *(int *)(*((_QWORD *)a5 + 11) + v105 + 4));
              v109 = *(unsigned __int8 *)v108;
              if ((_DWORD)v109 == 135)
              {
                if (v108[2] == (_DWORD)v106)
                {
                  v110 = v108[3];
LABEL_121:
                  v111 = v108[1];
                  v112 = *(_DWORD *)(v44 + 144);
                  if (*(_DWORD *)(v44 + 148) <= v112)
                  {
                    sub_1ACBFF5AC(v44, v109, v111, v106, v110, a6, a7, a8);
                  }
                  else
                  {
                    *(_DWORD *)(v44 + 144) = v112 + 1;
                    v113 = *(_QWORD *)(v44 + 136) + 40 * v112;
                    *(_BYTE *)v113 = v109;
                    *(_WORD *)(v113 + 2) = 0;
                    *(_DWORD *)(v113 + 4) = v111;
                    *(_DWORD *)(v113 + 8) = v106;
                    *(_DWORD *)(v113 + 12) = v110;
                    *(_BYTE *)(v113 + 1) = 0;
                    *(_QWORD *)(v113 + 24) = 0;
                    *(_QWORD *)(v113 + 32) = 0;
                    *(_QWORD *)(v113 + 16) = 0;
                  }
LABEL_124:
                  v114 = sub_1ACBE1124(*(_QWORD *)a1, 0x50uLL);
                  v118 = v114;
                  if (v114)
                  {
                    *(_OWORD *)(v114 + 32) = 0u;
                    *(_OWORD *)(v114 + 48) = 0u;
                    *(_OWORD *)(v114 + 64) = 0u;
                    *(_OWORD *)v114 = 0u;
                    *(_OWORD *)(v114 + 16) = 0u;
                    *(_BYTE *)v114 = 53;
                    *(_WORD *)(v114 + 52) = -1;
                    *(_DWORD *)(v114 + 40) = 1;
                    if (*(int *)(*(_QWORD *)a1 + 148) <= 0)
                      sub_1ACBCB308(a1, "Expression tree is too large (maximum depth %d)", v115, v116, v117, a6, a7, a8, *(_DWORD *)(*(_QWORD *)a1 + 148));
                    v44 = a2;
                    if (!*(_BYTE *)(v500 + 103))
                    {
LABEL_130:
                      v119 = *(_DWORD *)(v92 + 36);
                      v120 = *(_QWORD *)(*(_QWORD *)v92 + 16);
                      v56 = __OFSUB__(v119, 1);
                      v121 = v119 - 1;
                      if (v121 < 0 == v56)
                        v120 = *(_QWORD *)(*(_QWORD *)(v120 + 32) + 24 * v121 + 8);
                      *(_QWORD *)(v118 + 16) = v120;
                      v122 = sub_1ACBE1124(v500, 0x51uLL);
                      if (v122)
                      {
                        *(_OWORD *)(v122 + 32) = 0u;
                        *(_OWORD *)(v122 + 48) = 0u;
                        *(_OWORD *)(v122 + 64) = 0u;
                        *(_OWORD *)v122 = 0u;
                        *(_OWORD *)(v122 + 16) = 0u;
                        *(_BYTE *)v122 = -80;
                        *(_WORD *)(v122 + 52) = -1;
                        *(_BYTE *)(v122 + 80) = 0;
                        *(_QWORD *)(v122 + 8) = v122 + 80;
                        *(_DWORD *)(v122 + 40) = 1;
                        *(_QWORD *)(v118 + 24) = v122;
                        *(_DWORD *)(v122 + 44) = v494 + v88;
                        sub_1ACB9F1D0(a1, v118);
                      }
                      else
                      {
                        *(_QWORD *)(v118 + 24) = 0;
                      }
                      *(_QWORD *)(v118 + 16) = 0;
                    }
                    sub_1ACBF8348((_QWORD *)v500, (unsigned __int8 *)v118);
                  }
                  else
                  {
                    v44 = a2;
                    if (!*(_BYTE *)(v500 + 103))
                      goto LABEL_130;
                  }
                  break;
                }
              }
              else if ((_DWORD)v109 == 94 && v108[3] == (_DWORD)v106)
              {
                v110 = (v494 + v88);
                v106 = v108[2];
                goto LABEL_121;
              }
              v105 += 20;
              if (v107 == v105)
                goto LABEL_124;
            }
          }
        }
LABEL_87:
        ++v88;
      }
      while (v88 != v52);
    }
    v62 = 0;
    v59 = a5;
LABEL_135:
    v123 = (_BYTE *)(v496 + 68);
    *(_QWORD *)v501 = v62;
    if (v62)
      v124 = 1;
    else
      v124 = 2;
    v59[28] = *(_DWORD *)(v44 + 144);
LABEL_140:
    v125 = *(_DWORD *)(a3 + 124);
    if (v125 >= 1)
    {
      v126 = 0;
      v127 = *(_QWORD *)(a3 + 136);
      while (1)
      {
        v128 = *(_WORD *)(v127 + 18);
        if ((v128 & 6) == 0)
        {
          v129 = *((_QWORD *)v59 + 13);
          if ((v129 & *(_QWORD *)(v127 + 48)) != 0)
          {
            *(_BYTE *)(a3 + 68) |= 2u;
          }
          else
          {
            v130 = *(_QWORD *)v127;
            if ((*v123 & 0x58) != 0)
            {
              v131 = *(_DWORD *)(v130 + 4);
              if ((v131 & 3) == 0 || (*v123 & 8) != 0 && (v131 & 1) == 0)
                goto LABEL_143;
              v132 = *(_DWORD *)(v130 + 56);
              if (*(_DWORD *)(a3 + 600) == v132)
              {
                if ((v129 & 1) != 0)
                  goto LABEL_143;
              }
              else
              {
                v133 = *(unsigned int *)(a3 + 596);
                if ((int)v133 >= 2)
                {
                  v134 = 0;
                  v135 = v133 - 1;
                  while (*(_DWORD *)(a3 + 604 + 4 * v134) != v132)
                  {
                    if (v135 == ++v134)
                      goto LABEL_159;
                  }
                  if (((1 << (v134 + 1)) & v129) != 0)
                    goto LABEL_143;
                }
              }
            }
LABEL_159:
            if (v124 != 1)
            {
              if (v124 <= 2)
              {
LABEL_164:
                v128 = *(_WORD *)(v127 + 18);
                if ((v128 & 0x1000) != 0)
                {
                  if (!v126)
                    v126 = 3;
                  goto LABEL_143;
                }
              }
              if ((v128 & 0x200) != 0 && (v137 = v59[11]) != 0)
              {
                v138 = v59[11] & 1 | 0x10;
                v139 = v137 >> 1;
                v140 = *(_DWORD *)(a2 + 144);
                if (*(_DWORD *)(a2 + 148) <= v140)
                {
                  v140 = sub_1ACBFF5AC(a2, v138, v139, 0, 0, a6, a7, a8);
                }
                else
                {
                  *(_DWORD *)(a2 + 144) = v140 + 1;
                  v141 = *(_QWORD *)(a2 + 136) + 40 * v140;
                  *(_BYTE *)v141 = v138;
                  *(_WORD *)(v141 + 2) = 0;
                  *(_DWORD *)(v141 + 4) = v139;
                  *(_BYTE *)(v141 + 1) = 0;
                  *(_OWORD *)(v141 + 8) = 0u;
                  *(_OWORD *)(v141 + 24) = 0u;
                }
                sub_1ACB9F1D0(a1, v130);
                if (v140)
                {
                  v142 = &byte_1EECAD280;
                  if (!*(_BYTE *)(*(_QWORD *)a2 + 103))
                    v142 = (char *)(*(_QWORD *)(a2 + 136) + 40 * v140);
                  *((_DWORD *)v142 + 2) = *(_DWORD *)(a2 + 144);
                }
              }
              else
              {
                sub_1ACB9F1D0(a1, v130);
              }
              *(_WORD *)(v127 + 18) |= 4u;
              v59 = a5;
              goto LABEL_143;
            }
            v136 = v59[1];
            a9 = 0uLL;
            v511 = 0;
            v513 = 0u;
            v506.i64[1] = v136;
            v506.i64[0] = *(_QWORD *)v501;
            v512 = sub_1ACC26DBC;
            v514 = 0;
            v515.i64[0] = (uint64_t)&v506;
            if (!v130)
              goto LABEL_164;
            sub_1ACC0B714((uint64_t)&v511, v130);
            if (!WORD2(v514))
              goto LABEL_164;
            v126 = 2;
          }
        }
LABEL_143:
        v127 += 56;
        v56 = __OFSUB__(v125--, 1);
        if ((v125 < 0) ^ v56 | (v125 == 0))
        {
          v124 = v126;
          if (v126 > 0)
            goto LABEL_140;
          break;
        }
      }
    }
    v143 = *(_DWORD *)(a3 + 132);
    if (v143 >= 1)
    {
      v144 = *(uint64_t **)(a3 + 136);
      a9 = 0uLL;
      do
      {
        v509 = a9;
        v510 = a9;
        v507 = a9;
        v508 = a9;
        v506 = a9;
        if ((*((_WORD *)v144 + 9) & 6) == 0
          && (*((_WORD *)v144 + 10) & 0x82) != 0
          && (*((_WORD *)v144 + 10) & 0x800) != 0
          && *((_DWORD *)v144 + 7) == v497
          && (*v123 & 0x58) == 0)
        {
          v149 = *v144;
          v150 = *((_DWORD *)v144 + 8);
          v519 = 0;
          v517 = a9;
          v518 = a9;
          v515 = a9;
          v516 = a9;
          v511 = (char *)(a3 + 104);
          v512 = (uint64_t (*)(uint64_t, unsigned __int8 *))(a3 + 104);
          v513 = 0uLL;
          v514 = 0x8300000000;
          v515.i32[1] = v497;
          *(__int16 *)((char *)v515.i16 + 1) = 257;
          if (v150 != -2)
          {
            v518.i16[0] = v150;
            v151 = sub_1ACC22B44((uint64_t *)&v511);
            a9 = 0uLL;
            if (v151)
            {
              v152 = 0;
              do
              {
                v153 = *((_QWORD *)v151 + 5);
                if ((v153 & v498) == 0)
                {
                  if (!v153 && (v151[10] & 0x82) != 0)
                  {
                    v152 = v151;
                    goto LABEL_201;
                  }
                  if (!v152)
                    v152 = v151;
                }
                v151 = sub_1ACC22B44((uint64_t *)&v511);
                a9 = 0uLL;
              }
              while (v151);
              if (!v152)
                goto LABEL_182;
LABEL_201:
              if ((v152[9] & 4) == 0)
              {
                v154 = *(int16x8_t **)v152;
                if ((v152[10] & 1) == 0 || (v154->i8[5] & 0x10) == 0 || **(int **)(v154[2].i64[0] + 32) <= 1)
                {
                  v145 = v154[1];
                  v146 = v154[2];
                  v147 = v154[4];
                  v509 = v154[3];
                  v510 = v147;
                  v507 = v145;
                  v508 = v146;
                  v506 = *v154;
                  v507.i64[0] = *(_QWORD *)(v149 + 16);
                  sub_1ACB9F1D0(a1, &v506);
                  a9 = 0uLL;
                  v152[9] |= 4u;
                }
              }
            }
          }
        }
LABEL_182:
        v144 += 7;
        v56 = __OFSUB__(v143--, 1);
      }
      while (!((v143 < 0) ^ v56 | (v143 == 0)));
    }
    v155 = a1;
    v156 = (unsigned int *)*((_QWORD *)a5 + 7);
    v157 = a2;
    if (v156)
    {
      v158 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 104 * *((unsigned __int8 *)a5 + 64) + 40);
      if ((*(_BYTE *)(v158 + 48) & 0x80) != 0)
      {
        v162 = v158 + 16;
        do
        {
          v163 = *(_QWORD *)v162;
          v164 = *(_WORD *)(*(_QWORD *)v162 + 99) & 3;
          v162 = *(_QWORD *)v162 + 40;
        }
        while (v164 != 2);
        v165 = *(unsigned __int16 *)(v163 + 94);
        if (*(_WORD *)(v163 + 94))
        {
          v166 = v165 + 1;
          v167 = *(_DWORD *)(a1 + 40);
          *(_QWORD *)v502 = *((_QWORD *)a5 + 7);
          if (v167 <= (int)v165)
          {
            v175 = *(_DWORD *)(a1 + 56);
            v168 = v175 + 1;
            *(_DWORD *)(a1 + 56) = v175 + v166;
          }
          else
          {
            v168 = *(_DWORD *)(a1 + 44);
            *(_DWORD *)(a1 + 40) = v167 - v166;
            *(_DWORD *)(a1 + 44) = v168 + v166;
          }
          v176 = 0;
          v169 = v168;
          v171 = v168 + 1;
          do
          {
            *(double *)a9.i64 = sub_1ACC0B288(a2, v158, v497, *(__int16 *)(*(_QWORD *)(v163 + 8) + 2 * v176), (v169 + v176 + 1), a6, a7, a8, a9);
            ++v176;
          }
          while (v165 != v176);
          v155 = a1;
          v157 = a2;
          v156 = *(unsigned int **)v502;
        }
        else
        {
          v155 = a1;
          if (*(_BYTE *)(a1 + 31))
          {
            v174 = *(_BYTE *)(a1 + 31) - 1;
            *(_BYTE *)(a1 + 31) = v174;
            v169 = *(unsigned int *)(a1 + 4 * v174 + 224);
          }
          else
          {
            v169 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v169;
          }
          v165 = 0;
          v171 = (v169 + 1);
        }
      }
      else
      {
        v155 = a1;
        v159 = *(_DWORD *)(a1 + 40);
        v56 = __OFSUB__(v159, 2);
        v160 = v159 - 2;
        if (v160 < 0 != v56)
        {
          v161 = *(_DWORD *)(a1 + 56);
          v169 = (v161 + 1);
          *(_DWORD *)(a1 + 56) = v161 + 2;
        }
        else
        {
          v169 = *(unsigned int *)(a1 + 44);
          *(_DWORD *)(a1 + 40) = v160;
          *(_DWORD *)(a1 + 44) = v169 + 2;
        }
        v170 = a5[1];
        v171 = (v169 + 1);
        v172 = *(_DWORD *)(a2 + 144);
        if (*(_DWORD *)(a2 + 148) <= v172)
        {
          sub_1ACBFF5AC(a2, 135, v170, (v169 + 1), 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(a2 + 144) = v172 + 1;
          v173 = *(_QWORD *)(a2 + 136) + 40 * v172;
          *(_DWORD *)v173 = 135;
          *(_DWORD *)(v173 + 4) = v170;
          *(_DWORD *)(v173 + 8) = v171;
          *(_QWORD *)(v173 + 12) = 0;
          *(_QWORD *)(v173 + 28) = 0;
          *(_QWORD *)(v173 + 20) = 0;
          *(_DWORD *)(v173 + 36) = 0;
        }
        v165 = 1;
      }
      v177 = *v156;
      v178 = *(_DWORD *)(v157 + 144);
      if (*(_DWORD *)(v157 + 148) <= v178)
      {
        v178 = sub_1ACBFF7F0(v157, 29, v177, 0, v171, v165, a7, a8);
      }
      else
      {
        *(_DWORD *)(v157 + 144) = v178 + 1;
        v179 = *(_QWORD *)(v157 + 136) + 40 * v178;
        *(_DWORD *)v179 = 64797;
        *(_DWORD *)(v179 + 4) = v177;
        *(_DWORD *)(v179 + 8) = 0;
        *(_DWORD *)(v179 + 12) = v171;
        *(_DWORD *)(v179 + 16) = v165;
        *(_QWORD *)(v179 + 24) = 0;
        *(_QWORD *)(v179 + 32) = 0;
      }
      v180 = *(_DWORD *)(v157 + 144);
      if (*(_DWORD *)(v157 + 148) <= v180)
      {
        sub_1ACBFF5AC(v157, 97, v171, v165, v169, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v157 + 144) = v180 + 1;
        v181 = *(_QWORD *)(v157 + 136) + 40 * v180;
        *(_DWORD *)v181 = 97;
        *(_DWORD *)(v181 + 4) = v171;
        *(_DWORD *)(v181 + 8) = v165;
        *(_DWORD *)(v181 + 12) = v169;
        *(_QWORD *)(v181 + 24) = 0;
        *(_QWORD *)(v181 + 32) = 0;
        *(_QWORD *)(v181 + 16) = 0;
      }
      v182 = *v156;
      v183 = *(_DWORD *)(v157 + 144);
      if (*(_DWORD *)(v157 + 148) <= v183)
      {
        sub_1ACBFF7F0(v157, 138, v182, v169, v171, v165, a7, a8);
      }
      else
      {
        *(_DWORD *)(v157 + 144) = v183 + 1;
        v184 = *(_QWORD *)(v157 + 136) + 40 * v183;
        *(_DWORD *)v184 = 64906;
        *(_DWORD *)(v184 + 4) = v182;
        *(_DWORD *)(v184 + 8) = v169;
        *(_DWORD *)(v184 + 12) = v171;
        *(_DWORD *)(v184 + 16) = v165;
        *(_QWORD *)(v184 + 24) = 0;
        *(_QWORD *)(v184 + 32) = 0;
      }
      v185 = v156[1];
      v186 = *(_DWORD *)(v157 + 144);
      if (*(_DWORD *)(v157 + 148) <= v186)
      {
        sub_1ACBFF7F0(v157, 180, v185, 0, v171, v165, a7, a8);
      }
      else
      {
        *(_DWORD *)(v157 + 144) = v186 + 1;
        v187 = *(_QWORD *)(v157 + 136) + 40 * v186;
        *(_DWORD *)v187 = 64948;
        *(_DWORD *)(v187 + 4) = v185;
        *(_DWORD *)(v187 + 8) = 0;
        *(_DWORD *)(v187 + 12) = v171;
        *(_DWORD *)(v187 + 16) = v165;
        *(_QWORD *)(v187 + 24) = 0;
        *(_QWORD *)(v187 + 32) = 0;
      }
      v188 = *(_DWORD *)(v157 + 144);
      if (v188 >= 1)
        *(_WORD *)(*(_QWORD *)(v157 + 136) + 40 * (v188 - 1) + 2) = 16;
      if (*(_BYTE *)(*(_QWORD *)v157 + 103))
      {
        dword_1EECAD288 = v188;
        if ((_DWORD)v165)
        {
LABEL_244:
          if (*(_DWORD *)(v155 + 40) > (int)v165)
            goto LABEL_251;
          *(_DWORD *)(v155 + 40) = v165 + 1;
          v189 = (_DWORD *)(v155 + 44);
          goto LABEL_250;
        }
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(v157 + 136) + 40 * v178 + 8) = v188;
        if ((_DWORD)v165)
          goto LABEL_244;
      }
      if ((_DWORD)v169)
      {
        v190 = *(unsigned __int8 *)(v155 + 31);
        if (v190 <= 7)
        {
          *(_BYTE *)(v155 + 31) = v190 + 1;
          v189 = (_DWORD *)(v155 + 4 * v190 + 224);
LABEL_250:
          *v189 = v169;
        }
      }
    }
LABEL_251:
    v191 = *a5;
    if ((_DWORD)v191)
    {
      v192 = *(_DWORD *)(v157 + 144);
      a5[7] = v192;
      if (*(_DWORD *)(v157 + 148) <= v192)
      {
        sub_1ACBFF5AC(v157, 71, 1, v191, 0, a6, a7, a8);
        v194 = *((_QWORD *)a5 + 7);
        if (!v194)
          goto LABEL_262;
      }
      else
      {
        *(_DWORD *)(v157 + 144) = v192 + 1;
        v193 = *(_QWORD *)(v157 + 136) + 40 * v192;
        *(_QWORD *)v193 = 0x100000047;
        *(_DWORD *)(v193 + 8) = v191;
        *(_QWORD *)(v193 + 12) = 0;
        *(_QWORD *)(v193 + 28) = 0;
        *(_QWORD *)(v193 + 20) = 0;
        *(_DWORD *)(v193 + 36) = 0;
        v194 = *((_QWORD *)a5 + 7);
        if (!v194)
          goto LABEL_262;
      }
    }
    else
    {
      v194 = *((_QWORD *)a5 + 7);
      if (!v194)
        return *((_QWORD *)a5 + 13);
    }
    v195 = *(unsigned int *)(v194 + 8);
    v196 = *(_DWORD *)(v157 + 144);
    if (*(_DWORD *)(v157 + 148) <= v196)
    {
      sub_1ACBFF5AC(v157, 74, 0, v195, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v157 + 144) = v196 + 1;
      v197 = *(_QWORD *)(v157 + 136) + 40 * v196;
      *(_QWORD *)v197 = 74;
      *(_DWORD *)(v197 + 8) = v195;
      *(_QWORD *)(v197 + 12) = 0;
      *(_QWORD *)(v197 + 28) = 0;
      *(_QWORD *)(v197 + 20) = 0;
      *(_DWORD *)(v197 + 36) = 0;
    }
    *(_DWORD *)(v194 + 12) = *(_DWORD *)(v157 + 144);
    ++*(_BYTE *)(v155 + 38);
LABEL_262:
    v198 = *(_DWORD *)(a3 + 132);
    if (v198 >= 1)
    {
      v199 = 0;
      v200 = *(_QWORD *)(a3 + 136);
      do
      {
        if ((*(_WORD *)(v200 + 18) & 6) == 0
          && (*((_QWORD *)a5 + 13) & *(_QWORD *)(v200 + 48)) == 0
          && (*v123 & 0x40) == 0)
        {
          sub_1ACB9F1D0(v155, *(_QWORD *)v200);
          *(_WORD *)(v200 + 18) |= 4u;
          v198 = *(_DWORD *)(a3 + 132);
        }
        ++v199;
        v200 += 56;
      }
      while (v199 < v198);
    }
    return *((_QWORD *)a5 + 13);
  }
  v35 = *(unsigned int *)(a3 + 120 * (int)v27 + 868);
  if ((v34 & 0x100) != 0 && (v34 & 5) != 0)
  {
    v36 = **(unsigned __int8 ****)(v11 + 64);
    v37 = *(_DWORD *)(a1 + 56);
    v38 = v37 + 1;
    v39 = v37 == -1;
    *(_DWORD *)(a1 + 56) = v37 + 1;
    v40 = sub_1ACB92834((uint64_t *)a1, v36, (int *)a5, 0, (v21 >> a4) & 1, (v37 + 1), a7, a8);
    v41 = v40;
    if (!v39 && (_DWORD)v40 != v38)
    {
      v42 = *(unsigned __int8 *)(a1 + 31);
      if (v42 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v42 + 1;
        *(_DWORD *)(a1 + 4 * v42 + 224) = v38;
      }
    }
    v43 = a5[4];
    v44 = a2;
    if (a5[13])
    {
      v45 = *(_DWORD *)(a2 + 144);
      if (*(_DWORD *)(a2 + 148) <= v45)
      {
        sub_1ACBFF5AC(a2, 13, v40, a5[4], 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(a2 + 144) = v45 + 1;
        v46 = *(_QWORD *)(a2 + 136) + 40 * v45;
        *(_DWORD *)v46 = 13;
        *(_DWORD *)(v46 + 4) = v40;
        *(_DWORD *)(v46 + 8) = v43;
        *(_QWORD *)(v46 + 12) = 0;
        *(_QWORD *)(v46 + 28) = 0;
        *(_QWORD *)(v46 + 20) = 0;
        *(_DWORD *)(v46 + 36) = 0;
      }
      v202 = a5[13];
      v203 = *(_DWORD *)(a2 + 144);
      if (*(_DWORD *)(a2 + 148) <= v203)
      {
        sub_1ACBFF7F0(a2, 64, v202, v43, v41, 1, a7, a8);
      }
      else
      {
        *(_DWORD *)(a2 + 144) = v203 + 1;
        v204 = *(_QWORD *)(a2 + 136) + 40 * v203;
        *(_DWORD *)v204 = 64832;
        *(_DWORD *)(v204 + 4) = v202;
        *(_DWORD *)(v204 + 8) = v43;
        *(_DWORD *)(v204 + 12) = v41;
        *(_DWORD *)(v204 + 16) = 1;
        *(_QWORD *)(v204 + 24) = 0;
        *(_QWORD *)(v204 + 32) = 0;
      }
      sub_1ACC28358(a1, a3, a4, v43, v498, a6, a7, a8);
    }
    v205 = *(_DWORD *)(a2 + 144);
    if (*(_DWORD *)(a2 + 148) <= v205)
    {
      sub_1ACBFF5AC(a2, 30, v497, v43, v41, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(a2 + 144) = v205 + 1;
      v206 = *(_QWORD *)(a2 + 136) + 40 * v205;
      *(_DWORD *)v206 = 30;
      *(_DWORD *)(v206 + 4) = v497;
      *(_DWORD *)(v206 + 8) = v43;
      *(_DWORD *)(v206 + 12) = v41;
      *(_QWORD *)(v206 + 24) = 0;
      *(_QWORD *)(v206 + 32) = 0;
      *(_QWORD *)(v206 + 16) = 0;
    }
    v59 = a5;
    v62 = 0;
    v63 = -72;
    goto LABEL_42;
  }
  if ((~v34 & 0x102) == 0)
  {
    if ((v34 & 0x20) != 0)
    {
      v64 = **(_WORD ***)(v11 + 64);
      v65 = 1;
    }
    else
    {
      v64 = 0;
      v65 = 0;
    }
    v59 = a5;
    if ((v34 & 0x10) != 0)
      v207 = *(_WORD **)(*(_QWORD *)(v11 + 64) + 8 * v65);
    else
      v207 = 0;
    if (v493)
      v213 = v207;
    else
      v213 = v64;
    if (v493)
      v214 = (unsigned __int8 ***)v64;
    else
      v214 = (unsigned __int8 ***)v207;
    if (!v213)
    {
      if (v493)
        v219 = 32;
      else
        v219 = 36;
      v44 = a2;
      v220 = *(_DWORD *)(a2 + 144);
      if (*(_DWORD *)(a2 + 148) <= v220)
      {
        sub_1ACBFF5AC(a2, v219, v497, v35, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(a2 + 144) = v220 + 1;
        v221 = *(_QWORD *)(a2 + 136) + 40 * v220;
        *(_BYTE *)v221 = v219;
        *(_WORD *)(v221 + 2) = 0;
        *(_DWORD *)(v221 + 4) = v497;
        *(_DWORD *)(v221 + 8) = v35;
        *(_BYTE *)(v221 + 1) = 0;
        *(_QWORD *)(v221 + 12) = 0;
        *(_QWORD *)(v221 + 28) = 0;
        *(_QWORD *)(v221 + 20) = 0;
        *(_DWORD *)(v221 + 36) = 0;
      }
      goto LABEL_434;
    }
    LODWORD(v511) = 0;
    v215 = *(_BYTE **)v213;
    v216 = *(unsigned __int8 **)(*(_QWORD *)v213 + 24);
    v217 = *v216;
    if (v217 == 176)
      v217 = v216[2];
    if (v217 == 138)
    {
      v218 = (int **)(*((_QWORD *)v216 + 4) + 32);
    }
    else
    {
      if (v217 != 177)
        goto LABEL_338;
      v218 = (int **)(v216 + 32);
    }
    if (**v218 >= 2)
    {
      if (*(_BYTE *)(a1 + 31))
      {
        v275 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v275;
        v263 = *(unsigned int *)(a1 + 4 * v275 + 224);
      }
      else
      {
        v263 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v263;
      }
      v44 = a2;
      LODWORD(v511) = v263;
      sub_1ACC2822C(a1, v216, v263, 1, (uint64_t)a5, a6, a7, a8);
      v274 = (*v215 + 1) & 2 | 1u;
LABEL_428:
      v314 = byte_1ACCBDE70[v274];
      v315 = *(_DWORD *)(v44 + 144);
      if (*(_DWORD *)(v44 + 148) <= v315)
      {
        sub_1ACBFF5AC(v44, v314, v497, v23, v263, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v44 + 144) = v315 + 1;
        v316 = *(_QWORD *)(v44 + 136) + 40 * v315;
        *(_BYTE *)v316 = v314;
        *(_WORD *)(v316 + 2) = 0;
        *(_DWORD *)(v316 + 4) = v497;
        *(_DWORD *)(v316 + 8) = v23;
        *(_DWORD *)(v316 + 12) = v263;
        *(_BYTE *)(v316 + 1) = 0;
        *(_QWORD *)(v316 + 24) = 0;
        *(_QWORD *)(v316 + 32) = 0;
        *(_QWORD *)(v316 + 16) = 0;
      }
      v317 = (int)v511;
      if ((_DWORD)v511)
      {
        v318 = *(unsigned __int8 *)(a1 + 31);
        if (v318 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v318 + 1;
          *(_DWORD *)(a1 + 4 * v318 + 224) = v317;
        }
      }
LABEL_434:
      if (!v214)
      {
        v62 = 0;
        v325 = *(_DWORD *)(v44 + 144);
        *((_BYTE *)a5 + 65) = v493 ^ 0x27;
        a5[17] = v497;
        a5[18] = v325;
        goto LABEL_135;
      }
      v319 = *v214;
      v320 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v320;
      sub_1ACC2822C(a1, v319[3], v320, 1, (uint64_t)a5, a6, a7, a8);
      v321 = v319[3];
      v322 = *v321;
      v323 = v322;
      if (v322 == 176)
        v323 = v321[2];
      if (v323 == 138)
      {
        v324 = (int **)(*((_QWORD *)v321 + 4) + 32);
      }
      else
      {
        if (v323 != 177)
        {
LABEL_443:
          v326 = *(unsigned __int8 *)v319;
          if (v326 == 56 || v326 == 54)
          {
            v327 = v493 == 0;
            v328 = 55;
            v329 = 57;
            goto LABEL_447;
          }
LABEL_446:
          v327 = v493 == 0;
          v328 = 56;
          v329 = 54;
LABEL_447:
          if (v327)
            v330 = v329;
          else
            v330 = v328;
          if (v322 == 176)
            v322 = v321[2];
          if (v322 == 138)
          {
            v321 = (unsigned __int8 *)*((_QWORD *)v321 + 4);
          }
          else if (v322 != 177)
          {
LABEL_457:
            v331 = (_WORD *)v214 + 9;
            v332 = *((_WORD *)v214 + 9);
            if ((v332 & 4) == 0)
            {
              v333 = 0;
              v334 = *a5;
              do
              {
                if (v334 && (*((_BYTE *)*v214 + 4) & 1) == 0)
                  break;
                if (((unint64_t)v214[6] & *((_QWORD *)a5 + 13)) != 0)
                  break;
                v335 = !v333 || (v332 & 0x400) == 0;
                v336 = v335 ? 4 : 512;
                *v331 = v336 | v332;
                v337 = *((_DWORD *)v214 + 6);
                if (v337 < 0)
                  break;
                v338 = v214[1][4];
                v339 = &v338[56 * v337];
                v340 = v339[22] - 1;
                v339[22] = v340;
                if (v340)
                  break;
                v214 = (unsigned __int8 ***)&v338[56 * v337];
                v331 = (_WORD *)v214 + 9;
                v332 = *((_WORD *)v214 + 9);
                --v333;
              }
              while ((v332 & 4) == 0);
            }
LABEL_471:
            v341 = *(_DWORD *)(v44 + 144);
            *((_BYTE *)a5 + 65) = v493 ^ 0x27;
            a5[17] = v497;
            a5[18] = v341;
            v342 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v342;
            if (*(_DWORD *)(v44 + 148) <= v341)
            {
              sub_1ACBFF5AC(v44, 135, v497, v342, 0, a6, a7, a8);
            }
            else
            {
              *(_DWORD *)(v44 + 144) = v341 + 1;
              v343 = *(_QWORD *)(v44 + 136) + 40 * v341;
              *(_DWORD *)v343 = 135;
              *(_DWORD *)(v343 + 4) = v497;
              *(_DWORD *)(v343 + 8) = v342;
              *(_QWORD *)(v343 + 12) = 0;
              *(_QWORD *)(v343 + 28) = 0;
              *(_QWORD *)(v343 + 20) = 0;
              *(_DWORD *)(v343 + 36) = 0;
            }
            v344 = *(_DWORD *)(v44 + 144);
            if (*(_DWORD *)(v44 + 148) <= v344)
            {
              sub_1ACBFF5AC(v44, v330, v320, v23, v342, a6, a7, a8);
            }
            else
            {
              *(_DWORD *)(v44 + 144) = v344 + 1;
              v345 = *(_QWORD *)(v44 + 136) + 40 * v344;
              *(_BYTE *)v345 = v330;
              *(_WORD *)(v345 + 2) = 0;
              *(_DWORD *)(v345 + 4) = v320;
              *(_DWORD *)(v345 + 8) = v23;
              *(_DWORD *)(v345 + 12) = v342;
              *(_BYTE *)(v345 + 1) = 0;
              *(_QWORD *)(v345 + 24) = 0;
              *(_QWORD *)(v345 + 32) = 0;
              *(_QWORD *)(v345 + 16) = 0;
            }
            v346 = *(_DWORD *)(v44 + 144);
            v56 = __OFSUB__(v346, 1);
            v347 = v346 - 1;
            v59 = a5;
            if (v347 < 0 == v56)
            {
              v62 = 0;
              *(_WORD *)(*(_QWORD *)(v44 + 136) + 40 * v347 + 2) = 83;
              goto LABEL_135;
            }
LABEL_589:
            v62 = 0;
            goto LABEL_135;
          }
          if (**((int **)v321 + 4) > 1)
            goto LABEL_471;
          goto LABEL_457;
        }
        v324 = (int **)(v321 + 32);
      }
      if (**v324 > 1)
        goto LABEL_446;
      goto LABEL_443;
    }
LABEL_338:
    v263 = sub_1ACC09A28(a1, v216, &v511);
    v264 = v213 + 9;
    v265 = v213[9];
    if ((v265 & 4) == 0)
    {
      v266 = 0;
      v267 = *a5;
      do
      {
        if (v267 && (*(_BYTE *)(*(_QWORD *)v213 + 4) & 1) == 0)
          break;
        if ((*((_QWORD *)v213 + 6) & *((_QWORD *)a5 + 13)) != 0)
          break;
        v268 = !v266 || (v265 & 0x400) == 0;
        v269 = v268 ? 4 : 512;
        *v264 = v269 | v265;
        v270 = *((_DWORD *)v213 + 6);
        if ((v270 & 0x80000000) != 0)
          break;
        v271 = *(_QWORD *)(*((_QWORD *)v213 + 1) + 32);
        v272 = v271 + 56 * v270;
        v273 = *(_BYTE *)(v272 + 22) - 1;
        *(_BYTE *)(v272 + 22) = v273;
        if (v273)
          break;
        v213 = (_WORD *)(v271 + 56 * v270);
        v264 = v213 + 9;
        v265 = v213[9];
        --v266;
      }
      while ((v265 & 4) == 0);
    }
    v274 = *v215 - 54;
    v44 = a2;
    goto LABEL_428;
  }
  if ((v34 & 0x200) != 0)
  {
    v208 = *(unsigned __int16 *)(v11 + 24);
    v209 = *(unsigned __int16 *)(v11 + 26);
    v210 = *(unsigned __int16 *)(v11 + 28);
    v511 = 0;
    v478 = *(_QWORD *)(v11 + 32);
    v469 = v209;
    if ((v34 & 0x20) != 0)
    {
      v212 = v208 + 1;
      v211 = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 8 * v208);
    }
    else
    {
      v211 = 0;
      v209 = 0;
      v212 = v208;
    }
    v491 = a5[2];
    v488 = v208;
    v472 = v210;
    if ((v34 & 0x10) == 0)
    {
      v481 = 0;
LABEL_316:
      v249 = 0;
      v250 = a2;
      goto LABEL_317;
    }
    if (v209 <= v210)
      v209 = v210;
    v481 = *(_QWORD *)(*(_QWORD *)(v11 + 64) + 8 * v212);
    if ((*(_WORD *)(v481 + 18) & 0x100) != 0)
    {
      v246 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v246;
      a5[11] = v246;
      sub_1ACBFF554(a2, 71, 1, v246, (uint64_t)a5, a6, a7, a8);
      v208 = v488;
      v247 = *(_DWORD *)(a2 + 144);
      v248 = a5[11];
      a5[11] = 2 * v248;
      a5[12] = v247;
      a5[11] = (v21 >> a4) & 1 ^ (*(_BYTE *)(*(_QWORD *)(v478 + 56) + v488) == 1) | (2 * v248);
    }
    if (v211)
      goto LABEL_316;
    v313 = *(unsigned __int16 *)(*(_QWORD *)(v478 + 8) + 2 * v208);
    if (*(__int16 *)(*(_QWORD *)(v478 + 8) + 2 * v208) < 0)
    {
      v250 = a2;
      if ((_DWORD)v313 != 65534)
        goto LABEL_425;
    }
    else
    {
      v250 = a2;
      if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v478 + 24) + 8) + 16 * v313 + 8) & 0xF) != 0)
      {
LABEL_425:
        v249 = 0;
        goto LABEL_317;
      }
    }
    v249 = 1;
LABEL_317:
    if ((*(_DWORD *)(v11 + 48) & 0x80030) == 0x80000)
    {
      v251 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v251;
      a5[9] = v251;
      if (*a5)
      {
        sub_1ACBFF554(v250, 71, 0, v251, (uint64_t)a5, a6, a7, a8);
        v208 = v488;
      }
      v483 = v251;
      v252 = *(_DWORD *)(a1 + 68) - 1;
      *(_DWORD *)(a1 + 68) = v252;
      a5[10] = v252;
      v209 = 1;
      v249 = 1;
    }
    else
    {
      v483 = 0;
    }
    if (v208 >= *(unsigned __int16 *)(v478 + 96)
      || (v33 & 1) == (*(_BYTE *)(*(_QWORD *)(v478 + 56) + v208) != 0))
    {
      v254 = v211;
      v464 = 0;
      v211 = v481;
    }
    else
    {
      v464 = v249;
      v249 = 0;
      v253 = v469;
      v469 = v472;
      v472 = v253;
      v254 = v481;
    }
    if (a4 >= 1 && (*(_BYTE *)(v11 + 50) & 0x10) != 0)
      sub_1ACC08D28(a2, 136, v491, v35, (uint64_t)a5, a6, a7, a8);
    v256 = sub_1ACC28654(a1, (uint64_t)a5, v493, v209, &v511);
    v257 = 0;
    v258 = v511;
    v486 = (uint64_t)v511;
    if (v511 && v472)
    {
      v259 = (char *)sub_1ACB8CB7C(v500, &v511[v488]);
      v258 = (char *)v486;
      v257 = v259;
    }
    v260 = 4;
    if (v483)
      v260 = 10;
    v261 = a5[v260];
    if (v254)
      v262 = (*(_WORD *)(v254 + 20) & 0x28) != 0;
    else
      v262 = 1;
    v482 = v211;
    if (v211)
      v276 = (*(_WORD *)(v211 + 20) & 0x28) != 0;
    else
      v276 = 1;
    v277 = v488 != 0;
    v474 = v256;
    v476 = v261;
    v467 = v257;
    v465 = v276;
    if (!v254)
    {
      if (v249)
      {
        v281 = a2;
        sub_1ACBFF554(a2, 75, 0, (v256 + v488), v255, a6, a7, a8);
        v258 = (char *)v486;
        v262 = 0;
        v282 = (v488 + 1);
        v277 = 1;
        v470 = 1;
      }
      else if (v483)
      {
        v281 = a2;
        sub_1ACBFF554(a2, 75, 0, (v256 + v488), v255, a6, a7, a8);
        v258 = (char *)v486;
        v470 = 0;
        v282 = (v488 + 1);
        v277 = 1;
      }
      else
      {
        v470 = 0;
        v282 = v488;
        v281 = a2;
      }
LABEL_384:
      if (v258)
      {
        v287 = v282 - v470;
        if ((int)v282 - v470 < 1)
        {
          v288 = v256;
          a6 = (uint64_t)v258;
        }
        else
        {
          v288 = (v287 + v256);
          v289 = v258;
          v290 = v256;
          a6 = (uint64_t)&v258[v287];
          while (*v289 <= 65)
          {
            v290 = (v290 + 1);
            ++v289;
            v56 = __OFSUB__(v287--, 1);
            if ((v287 < 0) ^ v56 | (v287 == 0))
            {
              v287 = 0;
              goto LABEL_394;
            }
          }
          v288 = v290;
          a6 = (uint64_t)v289;
        }
LABEL_394:
        v291 = v287 - 1;
        v292 = v287;
        while (1)
        {
          v56 = __OFSUB__(v292--, 1);
          if ((v292 < 0) ^ v56 | (v292 == 0))
            break;
          v293 = *(char *)(a6 + v291--);
          if (v293 >= 66)
          {
            v294 = (v292 + 1);
            goto LABEL_400;
          }
        }
        if (v287 < 1)
          goto LABEL_401;
        v294 = 1;
LABEL_400:
        sub_1ACBA86CC(*(uint64_t **)(a1 + 16), 96, v288, v294, 0, a6, v294, a8);
        v258 = (char *)v486;
      }
LABEL_401:
      if (*(_WORD *)(v11 + 54))
        v295 = (_DWORD)v282 == *(unsigned __int16 *)(v11 + 54);
      else
        v295 = 0;
      if (v295)
      {
        v301 = 0;
        v310 = (uint64_t *)a1;
        v311 = v497;
        v312 = v488;
      }
      else
      {
        v296 = v483;
        if (v483)
          sub_1ACBFF554(v281, 71, 1, v483, v255, a6, a7, a8);
        v297 = a5[13];
        if ((_DWORD)v297)
        {
          sub_1ACBCB640(a2, 64, v297, v476, v256, v488, a7, a8);
          sub_1ACC28358(a1, a3, a4, v476, v498, v298, v299, v300);
        }
        v301 = 0;
        if (v277)
          v302 = 4;
        else
          v302 = 0;
        if ((v262 & 1) != 0)
          v303 = 2;
        else
          v303 = 0;
        v304 = v303 | v302 | v493;
        v256 = byte_1ACCBA396[v304];
        if (v304 == 6)
        {
          v305 = v491;
          if ((*(_DWORD *)(v11 + 48) & 0x100000) != 0)
          {
            v306 = sub_1ACC08D28(a2, 124, ((**(__int16 **)(v478 + 16) + 9) / 10), v296, v255, a6, a7, a8);
            v305 = v491;
            v301 = v306;
            if (v254 | v482)
            {
              v307 = *(_DWORD *)(a2 + 144);
              if (v307 >= 1)
                *(_WORD *)(*(_QWORD *)(a2 + 136) + 40 * (v307 - 1) + 2) = 1;
              v308 = v307 + 1;
              if (*(_BYTE *)(*(_QWORD *)a2 + 103))
                v309 = &byte_1EECAD280;
              else
                v309 = (char *)(*(_QWORD *)(a2 + 136) + 40 * v306);
              v301 = 0;
              *((_DWORD *)v309 + 2) = v308;
            }
          }
        }
        else
        {
          v305 = v491;
        }
        v419 = v256;
        v420 = v305;
        LODWORD(v256) = v474;
        sub_1ACBCB640(a2, v419, v305, v476, v474, v282, a7, a8);
        if (v483)
        {
          sub_1ACBFF554(a2, 9, 0, (*(_DWORD *)(a2 + 144) + 2), v255, a6, a7, a8);
          if ((int)v282 >= 2)
            v423 = 6;
          else
            v423 = 2;
          sub_1ACBCB640(a2, byte_1ACCBA396[v423 | v493], v420, v476, v474, (v282 + (v262 << 31 >> 31)), v421, v422);
        }
        v310 = (uint64_t *)a1;
        v311 = v497;
        v258 = (char *)v486;
        v312 = v488;
        v257 = v467;
      }
      if (v482)
      {
        v424 = *(unsigned __int8 **)(*(_QWORD *)v482 + 24);
        v425 = (v256 + v312);
        sub_1ACC2822C((uint64_t)v310, v424, v425, v472, v255, a6, a7, a8);
        sub_1ACC28C94(a2, (uint64_t)a5, v482);
        if ((*(_WORD *)(v482 + 18) & 0x80) == 0 && sub_1ACC0C528(v424))
          sub_1ACBFF554(a2, 50, v425, v476, v255, a6, a7, a8);
        if (v257)
        {
          sub_1ACC28CE0((uint64_t)v424, v472, (uint64_t)v257);
          sub_1ACC28EC4(v310, v425, v472, v257, v426, v427, v428, v429);
        }
        v430 = v472 + v488;
        v431 = *v424;
        if (v431 == 176)
          v431 = v424[2];
        if (v431 == 138)
        {
          v432 = (int **)(*((_QWORD *)v424 + 4) + 32);
        }
        else
        {
          if (v431 != 177)
            goto LABEL_620;
          v432 = (int **)(v424 + 32);
        }
        if (**v432 > 1)
        {
          v465 = 1;
LABEL_622:
          v433 = v478;
          v258 = (char *)v486;
          if (!v486)
            goto LABEL_624;
          goto LABEL_623;
        }
LABEL_620:
        sub_1ACBA3114((int *)a5, v482);
        goto LABEL_622;
      }
      if (v464)
      {
        v433 = v478;
        if (!v483)
        {
          sub_1ACBFF554(a2, 75, 0, (v256 + v312), v255, a6, a7, a8);
          v258 = (char *)v486;
          LODWORD(v312) = v488;
          v465 = 0;
        }
        v430 = (v312 + 1);
        if (!v258)
        {
LABEL_624:
          if (v257)
            sub_1ACBF0674((_QWORD *)v500, v257);
          v434 = *(_DWORD *)(a2 + 144);
          a5[18] = v434;
          if ((_DWORD)v430)
          {
            if (v483)
              sub_1ACBFF554(a2, 17, v483, v434 + 3, v255, a6, a7, a8);
            sub_1ACBCB640(a2, asc_1ACCBA39E[v465 | (2 * v493)], v491, v476, v474, v430, a7, a8);
            if (v301)
            {
              if (*(_BYTE *)(*(_QWORD *)a2 + 103))
                v435 = &byte_1EECAD280;
              else
                v435 = (char *)(*(_QWORD *)(a2 + 136) + 40 * v301);
              *((_DWORD *)v435 + 2) = *(_DWORD *)(a2 + 144);
            }
          }
          if (v483)
          {
            sub_1ACBFF554(a2, 16, v483, (*(_DWORD *)(a2 + 144) + 2), v255, a6, a7, a8);
            sub_1ACBCB640(a2, asc_1ACCBA39E[v470 | (2 * v493)], v491, v476, v474, (v430 + v470), v436, v437);
          }
          v438 = *(_DWORD *)(v11 + 48);
          v59 = a5;
          if ((v438 & 0x40000) != 0)
          {
            sub_1ACB683F4(a2, 125, v491, v488, v488, a6, a7, a8);
            v438 = *(_DWORD *)(v11 + 48);
          }
          v439 = v493;
          if ((v438 & 0x40) != 0 && (*(_WORD *)(a3 + 60) & 0x1020) == 0)
          {
            v441 = 1;
            v44 = a2;
          }
          else
          {
            v440 = *(_QWORD *)(v433 + 24);
            if ((*(_BYTE *)(v440 + 48) & 0x80) != 0)
            {
              if ((_DWORD)v311 != v491)
              {
                v442 = v440 + 16;
                do
                {
                  v443 = *(_QWORD *)v442;
                  v444 = *(_WORD *)(*(_QWORD *)v442 + 99) & 3;
                  v442 = *(_QWORD *)v442 + 40;
                }
                while (v444 != 2);
                v448 = sub_1ACC0A1AC((uint64_t)v310, *(unsigned __int16 *)(v443 + 94));
                if (*(_WORD *)(v443 + 94))
                {
                  v449 = 0;
                  v450 = v491;
                  do
                  {
                    if (*(_WORD *)(v433 + 96))
                    {
                      v452 = 0;
                      while (*(unsigned __int16 *)(*(_QWORD *)(v433 + 8) + 2 * v452) != *(unsigned __int16 *)(*(_QWORD *)(v443 + 8) + 2 * v449))
                      {
                        if (*(unsigned __int16 *)(v433 + 96) == ++v452)
                          goto LABEL_654;
                      }
                    }
                    else
                    {
LABEL_654:
                      LOWORD(v452) = -1;
                    }
                    v453 = (__int16)v452;
                    v454 = (v448 + v449);
                    v455 = *(_DWORD *)(a2 + 144);
                    if (*(_DWORD *)(a2 + 148) > v455)
                    {
                      *(_DWORD *)(a2 + 144) = v455 + 1;
                      v451 = *(_QWORD *)(a2 + 136) + 40 * v455;
                      *(_DWORD *)v451 = 94;
                      *(_DWORD *)(v451 + 4) = v450;
                      *(_DWORD *)(v451 + 8) = v453;
                      *(_DWORD *)(v451 + 12) = v454;
                      *(_QWORD *)(v451 + 24) = 0;
                      *(_QWORD *)(v451 + 32) = 0;
                      *(_QWORD *)(v451 + 16) = 0;
                    }
                    else
                    {
                      sub_1ACBFF5AC(a2, 94, v491, v453, v454, v445, v446, v447);
                      v450 = v491;
                    }
                    ++v449;
                    v445 = *(unsigned __int16 *)(v443 + 94);
                  }
                  while (v449 < v445);
                  v44 = a2;
                  v439 = v493;
                }
                else
                {
                  v445 = 0;
                  v44 = a2;
                }
                sub_1ACBCB640(v44, 28, v311, v503, v448, v445, v446, v447);
                v441 = 0;
                goto LABEL_663;
              }
            }
            else
            {
              sub_1ACC28F50((uint64_t *)a3, v433, v311, v491, v255, a6, a7, a8);
            }
            v441 = 0;
            v44 = a2;
          }
LABEL_663:
          if (!*a5)
          {
            v456 = *(_QWORD *)(v433 + 72);
            if (v456)
              sub_1ACC29254(v456, v311, a3 + 104);
          }
          v457 = *(_DWORD *)(v11 + 48);
          if ((v457 & 0x1000) != 0)
          {
            *((_BYTE *)a5 + 65) = -72;
            v458 = v491;
          }
          else
          {
            v458 = v491;
            if (v439)
              v459 = 38;
            else
              v459 = 39;
            *((_BYTE *)a5 + 65) = v459;
          }
          a5[17] = v458;
          *((_BYTE *)a5 + 66) = BYTE2(v457) & 1;
          if ((v457 & 0xF) == 0)
            *((_BYTE *)a5 + 67) = 1;
          if (v441)
            v62 = 0;
          else
            v62 = v433;
          goto LABEL_135;
        }
      }
      else
      {
        v430 = v312;
        v433 = v478;
        if (!v258)
          goto LABEL_624;
      }
LABEL_623:
      sub_1ACBF0674((_QWORD *)v500, v258);
      goto LABEL_624;
    }
    v278 = v256;
    v279 = *(unsigned __int8 **)(*(_QWORD *)v254 + 24);
    v280 = (v278 + v488);
    sub_1ACC2822C(a1, v279, v280, v469, v255, a6, a7, a8);
    v281 = a2;
    sub_1ACC28C94(a2, (uint64_t)a5, v254);
    if ((*(_WORD *)(v254 + 18) & 0x80) == 0 && sub_1ACC0C528(v279))
      sub_1ACBFF554(a2, 50, v280, v476, v255, a6, a7, a8);
    v258 = (char *)v486;
    if (v486)
    {
      sub_1ACC28CE0((uint64_t)v279, v469, v486 + v488);
      v258 = (char *)v486;
    }
    v282 = v469 + v488;
    v283 = *v279;
    v257 = v467;
    if (v283 == 176)
      v283 = v279[2];
    if (v283 == 138)
    {
      v284 = (int **)(*((_QWORD *)v279 + 4) + 32);
    }
    else
    {
      if (v283 != 177)
        goto LABEL_381;
      v284 = (int **)(v279 + 32);
    }
    if (**v284 > 1)
    {
      v470 = 0;
      v262 = 1;
      goto LABEL_383;
    }
LABEL_381:
    sub_1ACBA3114((int *)a5, v254);
    v258 = (char *)v486;
    v470 = 0;
LABEL_383:
    v277 = 1;
    v256 = v474;
    goto LABEL_384;
  }
  v89 = a1;
  v90 = v497;
  if ((v34 & 0x2000) == 0)
  {
    if ((v32 & 0x40) != 0)
    {
      v62 = 0;
      v59 = a5;
      *((_BYTE *)a5 + 65) = -72;
      v44 = a2;
    }
    else
    {
      v59 = a5;
      *((_BYTE *)a5 + 65) = asc_1ACCBA39E[(v33 & 1) + 4];
      a5[17] = v497;
      v44 = a2;
      v91 = sub_1ACBFF554(a2, asc_1ACCBA39E[(v33 & 1) + 6], v497, v35, (uint64_t)a5, a6, a7, a8);
      v62 = 0;
      a5[18] = v91 + 1;
      *((_BYTE *)a5 + 67) = 1;
    }
    goto LABEL_135;
  }
  v485 = *(_DWORD *)(a1 + 52);
  v222 = *(_DWORD *)(a1 + 56) + 1;
  *(_DWORD *)(a1 + 52) = v485 + 1;
  *(_DWORD *)(a1 + 56) = v222;
  v479 = *(_DWORD *)(a1 + 68) - 1;
  *(_DWORD *)(a1 + 68) = v479;
  v223 = *(_QWORD *)(v12 + 104 * v13 + 40);
  v224 = **(_QWORD **)(v11 + 64);
  v495 = *(_QWORD *)(v224 + 32);
  *((_BYTE *)a5 + 65) = 67;
  v480 = v222;
  a5[17] = v222;
  v225 = *(unsigned __int8 *)(a3 + 64);
  if (v225 < 2)
  {
    v228 = *(_QWORD **)(a3 + 8);
    goto LABEL_375;
  }
  v226 = v225 - a4;
  v227 = sub_1ACBE1124(v500, 104 * ((int)v226 - 1) + 112);
  if (v227)
  {
    v228 = (_QWORD *)v227;
    *(_DWORD *)v227 = v226;
    *(_DWORD *)(v227 + 4) = v226;
    v229 = *(_OWORD *)(v14 + 8);
    v230 = *(_OWORD *)(v14 + 24);
    *(_OWORD *)(v227 + 40) = *(_OWORD *)(v14 + 40);
    *(_OWORD *)(v227 + 24) = v230;
    *(_OWORD *)(v227 + 8) = v229;
    v231 = *(_OWORD *)(v14 + 56);
    v232 = *(_OWORD *)(v14 + 72);
    v233 = *(_OWORD *)(v14 + 88);
    *(_QWORD *)(v227 + 104) = *(_QWORD *)(v14 + 104);
    *(_OWORD *)(v227 + 88) = v233;
    *(_OWORD *)(v227 + 72) = v232;
    *(_OWORD *)(v227 + 56) = v231;
    if ((int)v226 >= 2)
    {
      v234 = *(_QWORD *)(a3 + 8) + 8;
      v59 = a5;
      v235 = (unsigned __int8 *)(a5 + 46);
      v236 = v226 - 1;
      v237 = 112;
      do
      {
        v238 = *v235;
        v235 += 120;
        v239 = v227 + v237;
        v240 = v234 + 104 * v238;
        v241 = *(_OWORD *)v240;
        v242 = *(_OWORD *)(v240 + 32);
        *(_OWORD *)(v239 + 16) = *(_OWORD *)(v240 + 16);
        *(_OWORD *)(v239 + 32) = v242;
        *(_OWORD *)v239 = v241;
        v243 = *(_OWORD *)(v240 + 48);
        v244 = *(_OWORD *)(v240 + 64);
        v245 = *(_OWORD *)(v240 + 80);
        *(_QWORD *)(v239 + 96) = *(_QWORD *)(v240 + 96);
        *(_OWORD *)(v239 + 64) = v244;
        *(_OWORD *)(v239 + 80) = v245;
        *(_OWORD *)(v239 + 48) = v243;
        v237 += 104;
        --v236;
      }
      while (v236);
      goto LABEL_376;
    }
LABEL_375:
    v59 = a5;
LABEL_376:
    v44 = a2;
    v477 = v223;
    if ((*(_WORD *)(a3 + 60) & 0x10) != 0)
    {
      v471 = 0;
      v468 = 0;
    }
    else
    {
      if ((*(_BYTE *)(v223 + 48) & 0x80) != 0)
      {
        for (i = *(_QWORD *)(v223 + 16); i; i = *(_QWORD *)(i + 40))
        {
          if ((*(_WORD *)(i + 99) & 3) == 2)
            break;
        }
        v349 = *(unsigned int *)(a1 + 52);
        *(_DWORD *)(a1 + 52) = v349 + 1;
        v471 = v349;
        sub_1ACBFF554(a2, 118, v349, *(unsigned __int16 *)(i + 94), (uint64_t)a5, a6, a7, a8);
        sub_1ACC08ECC(a1, i);
      }
      else
      {
        v285 = *(_DWORD *)(a1 + 56);
        v286 = (v285 + 1);
        *(_DWORD *)(a1 + 56) = v286;
        v471 = v285 + 1;
        sub_1ACBFF554(a2, 75, 0, v286, (uint64_t)a5, a6, a7, a8);
      }
      v468 = *(_DWORD *)(a1 + 56) + 1;
      *(_DWORD *)(a1 + 56) = v468;
    }
    v461 = sub_1ACBFF554(a2, 71, 0, v480, (uint64_t)a5, a6, a7, a8);
    v355 = *(_DWORD *)(a3 + 124);
    if (v355 <= 1)
    {
      v489 = 0;
    }
    else
    {
      v356 = v228;
      v357 = 0;
      v358 = 0;
      v359 = 0;
      do
      {
        v360 = *(_QWORD *)(a3 + 136);
        v361 = v360 + v357;
        if (v360 + v357 != v224
          && (*(_WORD *)(v361 + 18) & 0x8006) == 0
          && (*(_WORD *)(v360 + v357 + 20) & 0x3FFF) != 0
          && (*(_BYTE *)(*(_QWORD *)v361 + 6) & 0x40) == 0)
        {
          v362 = sub_1ACB8B290(v500, *(unsigned __int8 **)v361, 0, 0);
          v359 = sub_1ACC04474((uint64_t *)a1, v359, (uint64_t)v362);
          v355 = *(_DWORD *)(a3 + 124);
        }
        ++v358;
        v357 += 56;
      }
      while (v358 < v355);
      if (v359)
        v489 = sub_1ACC0241C((uint64_t *)a1, 44, 0, v359);
      else
        v489 = 0;
      v44 = a2;
      v228 = v356;
    }
    sub_1ACC0BE9C((uint64_t *)a1, 1, "MULTI-INDEX OR", v350, v351, v352, v353, v354, v460);
    if (*(int *)(v495 + 20) < 1)
    {
      v484 = 0;
      v492 = 0;
LABEL_573:
      v414 = *(_DWORD *)(v89 + 312);
      if (v414)
      {
        v415 = *(_QWORD **)(v89 + 16);
        if (*(_BYTE *)(*v415 + 103))
          v416 = &byte_1EECAD280;
        else
          v416 = (char *)(v415[17] + 40 * v414);
        v417 = v492;
        v414 = *((_DWORD *)v416 + 2);
      }
      else
      {
        v417 = v492;
      }
      *(_DWORD *)(v89 + 312) = v414;
      *((_QWORD *)v59 + 10) = v484;
      if (v484)
        v59[2] = v485;
      if (v489)
      {
        *(_QWORD *)(v489 + 16) = 0;
        sub_1ACBF8348((_QWORD *)v500, (unsigned __int8 *)v489);
      }
      if (*(_BYTE *)(*(_QWORD *)v44 + 103))
        v418 = &byte_1EECAD280;
      else
        v418 = (char *)(*(_QWORD *)(v44 + 136) + 40 * v461);
      *((_DWORD *)v418 + 1) = *(_DWORD *)(v44 + 144);
      sub_1ACC08E48(v44, v59[3], v363, v364, v365, v366, v367, v368);
      sub_1ACC0A574(v44, v479);
      v59[18] = *(_DWORD *)(v44 + 144);
      if (*(unsigned __int8 *)(a3 + 64) >= 2u)
        sub_1ACBE0F9C((_QWORD *)v500, v228);
      if (!v417)
      {
        sub_1ACBA3114((int *)v59, v224);
        v62 = 0;
        goto LABEL_135;
      }
      goto LABEL_589;
    }
    v369 = 0;
    v492 = 0;
    v484 = 0;
    v466 = v223 + 16;
    v370 = v495;
    v462 = v224;
    v475 = v228;
    while (1)
    {
      v371 = *(_QWORD *)(v370 + 32);
      v372 = v371 + 56 * v369;
      if (*(_DWORD *)(v372 + 28) == v90 || (*(_WORD *)(v371 + 56 * v369 + 20) & 0x400) != 0)
      {
        if (*(_QWORD *)v372)
        {
          v373 = (unsigned __int8 *)sub_1ACB8B290(v500, *(unsigned __int8 **)v372, 0, 0);
          v374 = v373;
          if (!*(_BYTE *)(v500 + 103))
          {
            v375 = v489;
LABEL_514:
            v376 = v374;
            if (v375)
            {
              *(_QWORD *)(v375 + 16) = v374;
              v376 = (unsigned __int8 *)v375;
            }
            sub_1ACC0BE9C((uint64_t *)v89, 1, "INDEX %d", v364, v365, v366, v367, v368, v369 + 1);
            v377 = sub_1ACB78E3C(v89, v228, v376, 0, 0, 0, 32, v485);
            if (v377)
            {
              v378 = v377;
              v379 = v377 + 856;
              v380 = sub_1ACC1D144((uint64_t *)v89, (uint64_t)v228, v377 + 856, 0);
              sub_1ACC2044C(v44, (uint64_t)v228, v379, v380);
              v388 = 0;
              v370 = v495;
              if ((*(_WORD *)(a3 + 60) & 0x10) != 0)
                goto LABEL_543;
              if (v369 == *(_DWORD *)(v495 + 20) - 1)
                v389 = 0xFFFFFFFFLL;
              else
                v389 = v369;
              v390 = v466;
              if ((*(_BYTE *)(v477 + 48) & 0x80) == 0)
              {
                sub_1ACBFF554(v44, 135, v497, v468, v384, v385, v386, v387);
                v388 = sub_1ACBCB640(v44, 47, v471, 0, v468, v389, v391, v392);
                goto LABEL_543;
              }
              do
              {
                v393 = *(_QWORD *)v390;
                v394 = *(_WORD *)(*(_QWORD *)v390 + 99) & 3;
                v390 = *(_QWORD *)v390 + 40;
              }
              while (v394 != 2);
              v463 = v389;
              v395 = *(unsigned __int16 *)(v393 + 94);
              v473 = sub_1ACC0A1AC(a1, *(unsigned __int16 *)(v393 + 94));
              if ((_DWORD)v395)
              {
                v397 = v44;
                for (j = 0; j != v395; ++j)
                  *(double *)v396.i64 = sub_1ACC0B288(v397, v477, v497, *(__int16 *)(*(_QWORD *)(v393 + 8) + 2 * j), v473 + j, v385, v386, v387, v396);
              }
              if (v463)
              {
                v44 = a2;
                v388 = sub_1ACBCB640(a2, 29, v471, 0, v473, v395, v386, v387);
                if (v463 < 0)
                  goto LABEL_535;
              }
              else
              {
                v388 = 0;
                v44 = a2;
              }
              sub_1ACB683F4(v44, 97, v473, v395, v468, v385, v386, v387);
              sub_1ACBCB640(v44, 138, v471, v468, v473, v395, v399, v400);
              if (v463)
              {
                v401 = *(_DWORD *)(v44 + 144);
                v56 = __OFSUB__(v401, 1);
                v402 = v401 - 1;
                if (v402 < 0 == v56)
                  *(_WORD *)(*(_QWORD *)(v44 + 136) + 40 * v402 + 2) = 16;
              }
LABEL_535:
              v370 = v495;
              if ((_DWORD)v395 == 1)
              {
                if (v473)
                {
                  v403 = *(unsigned __int8 *)(a1 + 31);
                  v224 = v462;
                  if (v403 <= 7)
                  {
                    *(_BYTE *)(a1 + 31) = v403 + 1;
                    v404 = (unsigned int *)(a1 + 4 * v403 + 224);
                    goto LABEL_541;
                  }
                  goto LABEL_543;
                }
LABEL_542:
                v224 = v462;
                goto LABEL_543;
              }
              if (*(_DWORD *)(a1 + 40) >= (int)v395)
                goto LABEL_542;
              *(_DWORD *)(a1 + 40) = v395;
              v404 = (unsigned int *)(a1 + 44);
              v224 = v462;
LABEL_541:
              *v404 = v473;
LABEL_543:
              v405 = *(_DWORD *)(v44 + 144);
              if (*(_DWORD *)(v44 + 148) <= v405)
              {
                sub_1ACBFF5AC(v44, 10, v480, v479, 0, v385, v386, v387);
              }
              else
              {
                *(_DWORD *)(v44 + 144) = v405 + 1;
                v406 = *(_QWORD *)(v44 + 136) + 40 * v405;
                *(_DWORD *)v406 = 10;
                *(_DWORD *)(v406 + 4) = v480;
                *(_DWORD *)(v406 + 8) = v479;
                *(_QWORD *)(v406 + 12) = 0;
                *(_QWORD *)(v406 + 28) = 0;
                *(_QWORD *)(v406 + 20) = 0;
                *(_DWORD *)(v406 + 36) = 0;
              }
              if (v388)
              {
                v407 = &byte_1EECAD280;
                if (!*(_BYTE *)(*(_QWORD *)v44 + 103))
                  v407 = (char *)(*(_QWORD *)(v44 + 136) + 40 * v388);
                *((_DWORD *)v407 + 2) = *(_DWORD *)(v44 + 144);
              }
              v408 = v492;
              if ((*(_BYTE *)(v378 + 68) & 2) != 0)
                v408 = 1;
              v492 = v408;
              v409 = *(_QWORD *)(v378 + 952);
              if ((*(_BYTE *)(v409 + 49) & 2) == 0)
              {
                v484 = 0;
                v228 = v475;
                goto LABEL_561;
              }
              v410 = *(_QWORD *)(v409 + 32);
              if (v369)
              {
                v228 = v475;
                if (v410 == v484)
                  goto LABEL_558;
                goto LABEL_560;
              }
              v484 = v410;
              v228 = v475;
LABEL_558:
              if ((*(_BYTE *)(v477 + 48) & 0x80) != 0 && (*(_WORD *)(v484 + 99) & 3) == 2)
LABEL_560:
                v484 = 0;
LABEL_561:
              if ((*(_BYTE *)(v378 + 68) & 1) != 0)
                *(_BYTE *)(a3 + 68) |= 1u;
              sub_1ACB7D270((uint64_t **)v378, v381, v382, v383, v384, v385, v386, v387);
              v89 = a1;
              v411 = *(_DWORD *)(a1 + 312);
              if (v411)
              {
                v412 = *(_QWORD **)(a1 + 16);
                v413 = &byte_1EECAD280;
                v90 = v497;
                if (!*(_BYTE *)(*v412 + 103))
                  v413 = (char *)(v412[17] + 40 * v411);
                v411 = *((_DWORD *)v413 + 2);
              }
              else
              {
                v90 = v497;
              }
              *(_DWORD *)(a1 + 312) = v411;
            }
            else
            {
              v90 = v497;
              v370 = v495;
            }
            if (v374)
              sub_1ACBF8348((_QWORD *)v500, v374);
            v59 = a5;
            goto LABEL_504;
          }
          if (v373)
            sub_1ACBF8348((_QWORD *)v500, v373);
          v59 = a5;
        }
        else if (!*(_BYTE *)(v500 + 103))
        {
          v374 = 0;
          v375 = v489;
          goto LABEL_514;
        }
      }
LABEL_504:
      if (++v369 >= *(int *)(v370 + 20))
        goto LABEL_573;
    }
  }
  return v498;
}

uint64_t sub_1ACC2044C(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  char **v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  _DWORD *v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  char *v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  _DWORD *v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;

  if ((*(_BYTE *)(*(_QWORD *)result + 49) & 4) == 0)
    return result;
  v7 = result;
  v8 = *(_QWORD *)(a3 + 96);
  v9 = *(_DWORD *)(v8 + 48);
  if ((v9 & 0x400) == 0)
  {
    v10 = *(char ***)(v8 + 32);
    if (v10)
    {
      result = sub_1ACC0C07C(result, a4, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 112), *(_WORD *)(v8 + 22), *v10);
      goto LABEL_6;
    }
  }
  v11 = a2 + 104 * *(unsigned __int8 *)(a3 + 64);
  v12 = *(_WORD *)(v11 + 69);
  result = sub_1ACC0C07C(result, a4, *(_DWORD *)(a3 + 32), *(_DWORD *)(a3 + 112), *(_WORD *)(v8 + 22), *(char **)(v11 + 24));
  if ((v12 & 0x20) == 0)
  {
LABEL_6:
    if ((v9 & 0x6000) == 0 && (*(_BYTE *)(*(_QWORD *)v7 + 49) & 4) != 0)
    {
      v13 = *(_DWORD *)(a3 + 4);
      v14 = *(_DWORD *)(v7 + 392);
      v15 = 56 * v14 + 20;
      v16 = v14 + 1;
      while ((int)--v16 >= 1)
      {
        v17 = v15 - 56;
        v18 = *(_QWORD *)(v7 + 400);
        v19 = *(_DWORD *)(v18 + v15 - 76);
        v15 -= 56;
        if (v19 == a4)
        {
          if (v13 < 0)
            v13 = *(_DWORD *)(v7 + 144) - 1;
          v20 = v18 + v17;
          v21 = (_DWORD *)(v18 + v17 - 16);
          if (*v21)
          {
            v23 = *(_DWORD *)(v20 - 8);
            v22 = (_DWORD *)(v20 - 8);
            if (v23)
            {
              v21 = (_DWORD *)(v18 + v17);
              if (*(_DWORD *)(v18 + v17))
                break;
              v24 = 5;
            }
            else
            {
              v24 = 3;
              v21 = v22;
            }
          }
          else
          {
            v24 = 1;
          }
          *v21 = -1;
          *(_DWORD *)(v18 + 4 * v24 + v17 - 16) = v13;
          break;
        }
      }
    }
    if ((v9 & 0x200) != 0 && (*(_BYTE *)(*(_QWORD *)v7 + 49) & 4) != 0)
    {
      v40 = *(_DWORD *)(a3 + 8);
      v41 = *(_DWORD *)(v7 + 392);
      v42 = 56 * v41 + 20;
      v43 = v41 + 1;
      while ((int)--v43 >= 1)
      {
        v44 = v42 - 56;
        v45 = *(_QWORD *)(v7 + 400);
        v46 = *(_DWORD *)(v45 + v42 - 76);
        v42 -= 56;
        if (v46 == a4)
        {
          if (v40 < 0)
            v40 = *(_DWORD *)(v7 + 144) - 1;
          v47 = v45 + v44;
          v48 = (_DWORD *)(v45 + v44 - 16);
          if (*v48)
          {
            v50 = *(_DWORD *)(v47 - 8);
            v49 = (_DWORD *)(v47 - 8);
            if (v50)
            {
              v48 = (_DWORD *)(v45 + v44);
              if (*(_DWORD *)(v45 + v44))
                return result;
              v51 = 5;
            }
            else
            {
              v51 = 3;
              v48 = v49;
            }
          }
          else
          {
            v51 = 1;
          }
          *v48 = -1;
          *(_DWORD *)(v45 + 4 * v51 + v44 - 16) = v40;
          return result;
        }
      }
    }
    return result;
  }
  v25 = *(_DWORD *)(a2 + 104 * *(unsigned __int8 *)(a3 + 64) + 56);
  v26 = *(_QWORD *)v7;
  if (*(_BYTE *)(*(_QWORD *)v7 + 103))
  {
    v27 = &byte_1EECAD280;
    if ((*(_BYTE *)(v26 + 49) & 4) == 0)
      return result;
  }
  else
  {
    v27 = (char *)(*(_QWORD *)(v7 + 136) + 40 * (v25 - 1));
    if ((*(_BYTE *)(v26 + 49) & 4) == 0)
      return result;
  }
  v28 = *((_DWORD *)v27 + 2);
  v29 = *(_DWORD *)(v7 + 392);
  v30 = 56 * v29 + 20;
  v31 = v29 + 1;
  while ((int)--v31 >= 1)
  {
    v32 = v30 - 56;
    v33 = *(_QWORD *)(v7 + 400);
    v34 = *(_DWORD *)(v33 + v30 - 76);
    v30 -= 56;
    if (v34 == a4)
    {
      if (v28 <= 0)
        v28 = *(_DWORD *)(v7 + 144);
      v35 = v33 + v32;
      v36 = (_DWORD *)(v33 + v32 - 16);
      if (*v36)
      {
        v38 = *(_DWORD *)(v35 - 8);
        v37 = (_DWORD *)(v35 - 8);
        if (v38)
        {
          v36 = (_DWORD *)(v33 + v32);
          if (*(_DWORD *)(v33 + v32))
            return result;
          v39 = 5;
        }
        else
        {
          v39 = 3;
          v36 = v37;
        }
      }
      else
      {
        v39 = 1;
      }
      *v36 = v25;
      *(_DWORD *)(v33 + 4 * v39 + v32 - 16) = v28 - 1;
      return result;
    }
  }
  return result;
}

uint64_t sub_1ACC20738(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  _DWORD *v4;
  int *v5;
  int *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v41;
  unsigned __int8 *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int *v55;
  __int16 v56;
  __int16 *v57;
  __int16 v58;
  unsigned __int8 *v59;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  unsigned __int8 *v70;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v77;

  if (a2)
  {
    v3 = 0;
    v4 = a1 + 3;
    while (1)
    {
      v77 = (_QWORD *)a2;
      v5 = *(int **)(a2 + 32);
      v6 = *(int **)(a2 + 40);
      if (v5)
      {
        v7 = *v5;
        if (*v5 >= 1)
        {
          v8 = 0;
          v9 = 0;
          while (1)
          {
            v11 = *(unsigned __int8 **)&v5[6 * v8 + 2];
            if (v11)
            {
              if (*v11 == 167 && (*((_DWORD *)v11 + 1) & 0x20) == 0)
              {
                v13 = *((_DWORD *)v11 + 11);
                if (a1[2] == v13)
                {
                  v10 = 1;
                  goto LABEL_9;
                }
                v14 = a1[1];
                if ((int)v14 >= 2)
                {
                  v15 = 0;
                  v16 = v14 - 1;
                  while (v4[v15] != v13)
                  {
                    if (v16 == ++v15)
                      goto LABEL_8;
                  }
                  v10 = 1 << (v15 + 1);
                  goto LABEL_9;
                }
              }
              else if ((*((_DWORD *)v11 + 1) & 0x810000) == 0)
              {
                v10 = sub_1ACC220D4(a1, v11);
                v7 = *v5;
                goto LABEL_9;
              }
            }
LABEL_8:
            v10 = 0;
LABEL_9:
            v9 |= v10;
            if (++v8 >= v7)
              goto LABEL_26;
          }
        }
      }
      v9 = 0;
LABEL_26:
      v17 = (int *)v77[7];
      if (v17)
      {
        v18 = *v17;
        if (*v17 >= 1)
        {
          v19 = 0;
          v20 = 0;
          while (1)
          {
            v22 = *(unsigned __int8 **)&v17[6 * v19 + 2];
            if (v22)
            {
              if (*v22 == 167 && (*((_DWORD *)v22 + 1) & 0x20) == 0)
              {
                v24 = *((_DWORD *)v22 + 11);
                if (a1[2] == v24)
                {
                  v21 = 1;
                  goto LABEL_31;
                }
                v25 = a1[1];
                if ((int)v25 >= 2)
                {
                  v26 = 0;
                  v27 = v25 - 1;
                  while (v4[v26] != v24)
                  {
                    if (v27 == ++v26)
                      goto LABEL_30;
                  }
                  v21 = 1 << (v26 + 1);
                  goto LABEL_31;
                }
              }
              else if ((*((_DWORD *)v22 + 1) & 0x810000) == 0)
              {
                v21 = sub_1ACC220D4(a1, v22);
                v18 = *v17;
                goto LABEL_31;
              }
            }
LABEL_30:
            v21 = 0;
LABEL_31:
            v20 |= v21;
            if (++v19 >= v18)
              goto LABEL_48;
          }
        }
      }
      v20 = 0;
LABEL_48:
      v28 = (int *)v77[9];
      if (v28)
      {
        v29 = *v28;
        if (*v28 >= 1)
        {
          v30 = 0;
          v31 = 0;
          while (1)
          {
            v33 = *(unsigned __int8 **)&v28[6 * v30 + 2];
            if (v33)
            {
              if (*v33 == 167 && (*((_DWORD *)v33 + 1) & 0x20) == 0)
              {
                v35 = *((_DWORD *)v33 + 11);
                if (a1[2] == v35)
                {
                  v32 = 1;
                  goto LABEL_53;
                }
                v36 = a1[1];
                if ((int)v36 >= 2)
                {
                  v37 = 0;
                  v38 = v36 - 1;
                  while (v4[v37] != v35)
                  {
                    if (v38 == ++v37)
                      goto LABEL_52;
                  }
                  v32 = 1 << (v37 + 1);
                  goto LABEL_53;
                }
              }
              else if ((*((_DWORD *)v33 + 1) & 0x810000) == 0)
              {
                v32 = sub_1ACC220D4(a1, v33);
                v29 = *v28;
                goto LABEL_53;
              }
            }
LABEL_52:
            v32 = 0;
LABEL_53:
            v31 |= v32;
            if (++v30 >= v29)
              goto LABEL_70;
          }
        }
      }
      v31 = 0;
LABEL_70:
      v39 = (unsigned __int8 *)v77[6];
      if (!v39)
      {
        v41 = 0;
        v42 = (unsigned __int8 *)v77[8];
        if (!v42)
          goto LABEL_99;
        goto LABEL_87;
      }
      if (*v39 != 167 || (*((_DWORD *)v39 + 1) & 0x20) != 0)
        break;
      v43 = *((_DWORD *)v39 + 11);
      if (a1[2] == v43)
      {
        v41 = 1;
        goto LABEL_86;
      }
      v44 = a1[1];
      if ((int)v44 < 2)
        goto LABEL_85;
      v45 = 0;
      v46 = v44 - 1;
      while (v4[v45] != v43)
      {
        if (v46 == ++v45)
          goto LABEL_85;
      }
      v41 = 1 << (v45 + 1);
LABEL_86:
      v42 = (unsigned __int8 *)v77[8];
      if (!v42)
        goto LABEL_99;
LABEL_87:
      if (*v42 == 167 && (*((_DWORD *)v42 + 1) & 0x20) == 0)
      {
        v49 = *((_DWORD *)v42 + 11);
        if (a1[2] == v49)
        {
          v48 = 1;
        }
        else
        {
          v50 = a1[1];
          if ((int)v50 < 2)
          {
LABEL_99:
            v48 = 0;
            goto LABEL_100;
          }
          v51 = 0;
          v52 = v50 - 1;
          while (v4[v51] != v49)
          {
            if (v52 == ++v51)
              goto LABEL_99;
          }
          v48 = 1 << (v51 + 1);
        }
      }
      else
      {
        if ((*((_DWORD *)v42 + 1) & 0x810000) != 0)
          goto LABEL_99;
        v48 = sub_1ACC220D4(a1, v42);
      }
LABEL_100:
      v3 |= v9 | v20 | v31 | v41 | v48;
      if (v6 && *v6 >= 1)
      {
        v53 = 0;
        while (2)
        {
          v55 = &v6[26 * v53];
          v3 |= sub_1ACC20738(a1, *((_QWORD *)v55 + 6));
          v58 = *(_WORD *)((char *)v55 + 69);
          v57 = (__int16 *)((char *)v55 + 69);
          LOBYTE(v56) = v58;
          if ((v58 & 0x400) != 0)
            goto LABEL_122;
          v59 = *(unsigned __int8 **)&v6[26 * v53 + 20];
          if (!v59)
            goto LABEL_120;
          if (*v59 == 167 && (*((_DWORD *)v59 + 1) & 0x20) == 0)
          {
            v62 = *((_DWORD *)v59 + 11);
            if (a1[2] == v62)
            {
              v61 = 1;
            }
            else
            {
              v63 = a1[1];
              if ((int)v63 < 2)
                goto LABEL_120;
              v64 = 0;
              v65 = v63 - 1;
              while (v4[v64] != v62)
              {
                if (v65 == ++v64)
                  goto LABEL_120;
              }
              v61 = 1 << (v64 + 1);
            }
          }
          else
          {
            if ((*((_DWORD *)v59 + 1) & 0x810000) == 0)
            {
              v61 = sub_1ACC220D4(a1, v59);
              v56 = *v57;
              goto LABEL_121;
            }
LABEL_120:
            v61 = 0;
          }
LABEL_121:
          v3 |= v61;
LABEL_122:
          if ((v56 & 4) != 0)
          {
            v66 = *(int **)&v6[26 * v53 + 24];
            if (v66)
            {
              v67 = *v66;
              if (*v66 >= 1)
              {
                v68 = 0;
                v54 = 0;
                while (1)
                {
                  v70 = *(unsigned __int8 **)&v66[6 * v68 + 2];
                  if (v70)
                  {
                    if (*v70 == 167 && (*((_DWORD *)v70 + 1) & 0x20) == 0)
                    {
                      v72 = *((_DWORD *)v70 + 11);
                      if (a1[2] == v72)
                      {
                        v69 = 1;
                        goto LABEL_128;
                      }
                      v73 = a1[1];
                      if ((int)v73 >= 2)
                      {
                        v74 = 0;
                        v75 = v73 - 1;
                        while (v4[v74] != v72)
                        {
                          if (v75 == ++v74)
                            goto LABEL_127;
                        }
                        v69 = 1 << (v74 + 1);
                        goto LABEL_128;
                      }
                    }
                    else if ((*((_DWORD *)v70 + 1) & 0x810000) == 0)
                    {
                      v69 = sub_1ACC220D4(a1, v70);
                      v67 = *v66;
                      goto LABEL_128;
                    }
                  }
LABEL_127:
                  v69 = 0;
LABEL_128:
                  v54 |= v69;
                  if (++v68 >= v67)
                    goto LABEL_104;
                }
              }
            }
            v54 = 0;
LABEL_104:
            v3 |= v54;
          }
          if (++v53 >= *v6)
            break;
          continue;
        }
      }
      a2 = v77[10];
      if (!a2)
        return v3;
    }
    if ((*((_DWORD *)v39 + 1) & 0x810000) == 0)
    {
      v41 = sub_1ACC220D4(a1, v39);
      goto LABEL_86;
    }
LABEL_85:
    v41 = 0;
    goto LABEL_86;
  }
  return 0;
}

uint64_t sub_1ACC20D30(uint64_t a1, unsigned __int8 **a2)
{
  int v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE **v29;
  unsigned __int8 **v30;
  _BYTE *v31;
  unsigned __int8 *i;
  uint64_t v33;
  uint64_t v34;

  if ((*(_BYTE *)(*(_QWORD *)a1 + 96) & 0x80) != 0)
    return 0;
  v4 = *(unsigned __int8 *)a2;
  if (v4 != 53 && v4 != 45)
    return 0;
  if ((*((_BYTE *)a2 + 4) & 1) != 0)
    return 0;
  v5 = sub_1ACB92644(a2[2]);
  v6 = sub_1ACB92644(a2[3]);
  if (v5 == v6 || (v13 = v6, result = 0, v5 >= 67) && v13 >= 67)
  {
    v15 = sub_1ACBCCBB0(a1, (uint64_t)a2, v7, v8, v9, v10, v11, v12);
    if (v15 && *(uint64_t (**)(int, int, void *, int, void *))(v15 + 24) != sub_1ACB934B4)
    {
      v22 = a2[3];
      v29 = (_BYTE **)sub_1ACB78620(a1, a2[2], v16, v17, v18, v19, v20, v21);
      if (!v29)
        v29 = *(_BYTE ***)(*(_QWORD *)a1 + 16);
      v30 = (unsigned __int8 **)sub_1ACB78620(a1, v22, v23, v24, v25, v26, v27, v28);
      if (!v30)
        v30 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 16);
      v31 = *v29;
      for (i = *v30; ; ++i)
      {
        v33 = *v31;
        v34 = *i;
        if ((_DWORD)v33 == (_DWORD)v34)
        {
          if (!*v31)
            return (_DWORD)v33 == 0;
        }
        else
        {
          LODWORD(v33) = byte_1ACCB6333[v33] - byte_1ACCB6333[v34];
          if ((_DWORD)v33)
            return (_DWORD)v33 == 0;
        }
        ++v31;
      }
    }
    return 1;
  }
  return result;
}

_QWORD *sub_1ACC20E64(_QWORD *result, uint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  __int16 v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  int v43;
  unsigned __int8 **v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unsigned __int16 *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int16 *v65;
  int v66;
  int v67;
  int v69;
  int v71;
  int v72;
  char v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  char *v79;
  int v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int v90;
  int v91;
  uint64_t v92;
  int v93;
  BOOL v94;
  int v95;
  int v96;
  int v97;
  unsigned __int8 *v98;
  int *v99;
  _WORD *v100;
  int v101;
  int *v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  uint64_t *v105;
  int v106;
  int *v107;
  unsigned int *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t v124;
  int v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  unsigned __int8 *v129;
  uint64_t ***v130;
  uint64_t v131;
  uint64_t **v132;

  v4 = a2;
  v5 = result;
  v6 = *(uint64_t ***)a2;
  v7 = **(uint64_t ***)a2;
  v8 = *v7;
  v9 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(v9 + 56 * a3);
  if (*v7)
  {
    if (*(unsigned __int16 *)(v8 + 436) <= 0x1EFu)
    {
      if (*(_DWORD *)(v8 + 432))
      {
        if (*(_BYTE *)(v8 + 103))
          goto LABEL_123;
      }
      else
      {
        ++*(_DWORD *)(v8 + 452);
      }
LABEL_15:
      result = (_QWORD *)sub_1ACBE1300(v8, 496);
      v12 = (uint64_t)result;
      if (result)
        goto LABEL_16;
LABEL_123:
      *(_QWORD *)(v9 + 56 * a3 + 32) = 0;
      return result;
    }
    v12 = *(_QWORD *)(v8 + 472);
    if (v12)
    {
      v13 = (_QWORD *)(v8 + 472);
    }
    else
    {
      v12 = *(_QWORD *)(v8 + 464);
      if (!v12)
      {
        ++*(_DWORD *)(v8 + 456);
        goto LABEL_15;
      }
      v13 = (_QWORD *)(v8 + 464);
    }
    *v13 = *(_QWORD *)v12;
    ++*(_DWORD *)(v8 + 448);
  }
  else
  {
    result = (_QWORD *)sub_1ACB5D828(496);
    v12 = (uint64_t)result;
    if (!result)
      goto LABEL_123;
  }
LABEL_16:
  v125 = a3;
  *(_OWORD *)(v12 + 464) = 0u;
  *(_OWORD *)(v12 + 480) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_OWORD *)(v12 + 448) = 0u;
  *(_OWORD *)(v12 + 400) = 0u;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 368) = 0u;
  *(_OWORD *)(v12 + 384) = 0u;
  *(_OWORD *)(v12 + 336) = 0u;
  *(_OWORD *)(v12 + 352) = 0u;
  *(_OWORD *)(v12 + 304) = 0u;
  *(_OWORD *)(v12 + 320) = 0u;
  *(_OWORD *)(v12 + 272) = 0u;
  *(_OWORD *)(v12 + 288) = 0u;
  *(_OWORD *)(v12 + 240) = 0u;
  *(_OWORD *)(v12 + 256) = 0u;
  *(_OWORD *)(v12 + 208) = 0u;
  *(_OWORD *)(v12 + 224) = 0u;
  *(_OWORD *)(v12 + 176) = 0u;
  *(_OWORD *)(v12 + 192) = 0u;
  *(_OWORD *)(v12 + 144) = 0u;
  *(_OWORD *)(v12 + 160) = 0u;
  *(_OWORD *)(v12 + 112) = 0u;
  *(_OWORD *)(v12 + 128) = 0u;
  *(_OWORD *)(v12 + 80) = 0u;
  *(_OWORD *)(v12 + 96) = 0u;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_OWORD *)(v12 + 64) = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_OWORD *)(v12 + 32) = 0u;
  *(_OWORD *)v12 = 0u;
  v14 = v9 + 56 * a3;
  *(_QWORD *)(v14 + 32) = v12;
  *(_WORD *)(v14 + 18) |= 0x10u;
  *(_OWORD *)(v12 + 248) = 0u;
  *(_OWORD *)(v12 + 232) = 0u;
  *(_OWORD *)(v12 + 216) = 0u;
  *(_OWORD *)(v12 + 200) = 0u;
  *(_OWORD *)(v12 + 184) = 0u;
  *(_OWORD *)(v12 + 168) = 0u;
  *(_OWORD *)(v12 + 152) = 0u;
  *(_OWORD *)(v12 + 136) = 0u;
  *(_OWORD *)(v12 + 120) = 0u;
  *(_OWORD *)(v12 + 104) = 0u;
  *(_OWORD *)(v12 + 88) = 0u;
  *(_OWORD *)(v12 + 72) = 0u;
  *(_OWORD *)(v12 + 56) = 0u;
  *(_OWORD *)(v12 + 40) = 0u;
  *(_OWORD *)(v12 + 456) = 0u;
  *(_OWORD *)(v12 + 472) = 0u;
  *(_OWORD *)(v12 + 424) = 0u;
  *(_OWORD *)(v12 + 440) = 0u;
  *(_OWORD *)(v12 + 392) = 0u;
  *(_OWORD *)(v12 + 408) = 0u;
  *(_OWORD *)(v12 + 360) = 0u;
  *(_OWORD *)(v12 + 376) = 0u;
  *(_OWORD *)(v12 + 328) = 0u;
  *(_OWORD *)(v12 + 344) = 0u;
  *(_OWORD *)(v12 + 296) = 0u;
  *(_OWORD *)(v12 + 312) = 0u;
  *(_OWORD *)(v12 + 264) = 0u;
  *(_OWORD *)(v12 + 280) = 0u;
  *(_BYTE *)(v12 + 17) = 0;
  *(_QWORD *)v12 = v6;
  *(_QWORD *)(v12 + 8) = 0;
  *(_DWORD *)(v12 + 28) = 0;
  *(_QWORD *)(v12 + 20) = 0x800000000;
  *(_QWORD *)(v12 + 32) = v12 + 40;
  result = (_QWORD *)sub_1ACC19FAC(v12, v11, 43);
  v15 = *(_DWORD *)(v12 + 20);
  if (v15 >= 1)
  {
    v16 = v15 + 1;
    do
    {
      result = (_QWORD *)sub_1ACB90E34(v5, v12, v16 - 2);
      --v16;
    }
    while (v16 > 1);
  }
  v131 = v8;
  if (*(_BYTE *)(v8 + 103))
    return result;
  v17 = *(_DWORD *)(v12 + 20);
  v130 = (uint64_t ***)v4;
  v121 = a3;
  v122 = v11;
  v126 = v7;
  v132 = v6;
  if (v17 <= 0)
  {
    v124 = -1;
    *(_QWORD *)(v12 + 488) = -1;
    v76 = v9 + 56 * a3;
    *(_WORD *)(v76 + 20) = 512;
    *(_DWORD *)(v76 + 28) = -1;
    *(_BYTE *)(v4 + 17) = 1;
    goto LABEL_128;
  }
  result = (_QWORD *)v131;
  v127 = (uint64_t *)(v131 + 472);
  v123 = (uint64_t *)(v131 + 464);
  v18 = *(_QWORD *)(v12 + 32);
  v19 = (char *)v6 + 604;
  v20 = -1;
  v21 = -1;
  do
  {
    v22 = *(_WORD *)(v18 + 20);
    if ((v22 & 0x1FF) != 0)
    {
      v23 = *(_WORD *)(v18 + 18);
      if ((v23 & 8) != 0)
        goto LABEL_82;
      v24 = *(_DWORD *)(v18 + 28);
      v25 = *((_DWORD *)v6 + 150);
      if (v25 == v24)
      {
        v26 = 1;
        if ((v23 & 2) == 0)
          goto LABEL_79;
      }
      else
      {
        v29 = *((unsigned int *)v6 + 149);
        if ((int)v29 < 2)
        {
LABEL_38:
          v26 = 0;
          if ((v23 & 2) == 0)
          {
LABEL_79:
            v20 &= v26;
            v54 = v26 & v21;
            if ((v22 & 2) != 0)
              v21 = v54;
            else
              v21 = 0;
            goto LABEL_82;
          }
        }
        else
        {
          v30 = 0;
          v31 = v29 - 1;
          while (*(_DWORD *)&v19[4 * v30] != v24)
          {
            if (v31 == ++v30)
              goto LABEL_38;
          }
          v26 = 1 << (v30 + 1);
          if ((v23 & 2) == 0)
            goto LABEL_79;
        }
      }
      v32 = *(_DWORD *)(*(_QWORD *)(v12 + 32) + 56 * *(int *)(v18 + 24) + 28);
      if (v25 == v32)
      {
        v33 = 1;
      }
      else
      {
        v34 = *((unsigned int *)v6 + 149);
        if ((int)v34 < 2)
        {
LABEL_48:
          v33 = 0;
        }
        else
        {
          v35 = 0;
          v36 = v34 - 1;
          while (1)
          {
            v37 = *(_DWORD *)&v19[4 * v35++];
            if (v37 == v32)
              break;
            if (v36 == v35)
              goto LABEL_48;
          }
          v33 = 1 << v35;
        }
      }
      v26 |= v33;
      goto LABEL_79;
    }
    if (*((unsigned __int16 *)result + 218) <= 0x1E7u)
    {
      if (*((_DWORD *)result + 108))
      {
        if (*((_BYTE *)result + 103))
        {
          v21 = 0;
          goto LABEL_82;
        }
      }
      else
      {
        ++*((_DWORD *)result + 113);
      }
      goto LABEL_50;
    }
    v27 = (_QWORD *)(v131 + 472);
    v28 = *v127;
    if (!*v127)
    {
      v27 = (_QWORD *)(v131 + 464);
      v28 = *v123;
      if (!*v123)
      {
        result = (_QWORD *)v131;
        ++*(_DWORD *)(v131 + 456);
LABEL_50:
        v28 = sub_1ACBE1300((uint64_t)result, 488);
        if (!v28)
        {
          v21 = 0;
          result = (_QWORD *)v131;
          v6 = v132;
          goto LABEL_82;
        }
        goto LABEL_51;
      }
    }
    *v27 = *(_QWORD *)v28;
    ++*(_DWORD *)(v131 + 448);
LABEL_51:
    *(_QWORD *)(v18 + 32) = v28;
    *(_WORD *)(v18 + 18) |= 0x20u;
    *(_WORD *)(v18 + 20) = 1024;
    *(_DWORD *)(v18 + 28) = -1;
    *(_OWORD *)(v28 + 248) = 0u;
    *(_OWORD *)(v28 + 232) = 0u;
    *(_OWORD *)(v28 + 216) = 0u;
    *(_OWORD *)(v28 + 200) = 0u;
    *(_OWORD *)(v28 + 184) = 0u;
    *(_OWORD *)(v28 + 168) = 0u;
    *(_OWORD *)(v28 + 152) = 0u;
    *(_OWORD *)(v28 + 136) = 0u;
    *(_OWORD *)(v28 + 120) = 0u;
    *(_OWORD *)(v28 + 104) = 0u;
    *(_OWORD *)(v28 + 88) = 0u;
    *(_OWORD *)(v28 + 72) = 0u;
    *(_OWORD *)(v28 + 56) = 0u;
    *(_OWORD *)(v28 + 40) = 0u;
    *(_OWORD *)(v28 + 456) = 0u;
    *(_OWORD *)(v28 + 472) = 0u;
    *(_OWORD *)(v28 + 424) = 0u;
    *(_OWORD *)(v28 + 440) = 0u;
    *(_OWORD *)(v28 + 392) = 0u;
    *(_OWORD *)(v28 + 408) = 0u;
    *(_OWORD *)(v28 + 360) = 0u;
    *(_OWORD *)(v28 + 376) = 0u;
    *(_OWORD *)(v28 + 328) = 0u;
    *(_OWORD *)(v28 + 344) = 0u;
    *(_OWORD *)(v28 + 296) = 0u;
    *(_OWORD *)(v28 + 312) = 0u;
    *(_OWORD *)(v28 + 264) = 0u;
    *(_OWORD *)(v28 + 280) = 0u;
    v38 = *(_QWORD *)v4;
    *(_BYTE *)(v28 + 17) = 0;
    *(_QWORD *)v28 = v38;
    *(_QWORD *)(v28 + 8) = 0;
    *(_DWORD *)(v28 + 28) = 0;
    *(_QWORD *)(v28 + 20) = 0x800000000;
    *(_QWORD *)(v28 + 32) = v28 + 40;
    sub_1ACC19FAC(v28, *(_QWORD *)v18, 44);
    v39 = *(_DWORD *)(v28 + 20);
    if (v39 >= 1)
    {
      v40 = v39 + 1;
      do
      {
        sub_1ACB90E34(v5, v28, v40 - 2);
        --v40;
      }
      while (v40 > 1);
    }
    *(_QWORD *)(v28 + 8) = v4;
    if (*(_BYTE *)(v131 + 103) || (v42 = *(_DWORD *)(v28 + 20), v42 < 1))
    {
      v41 = 0;
      result = (_QWORD *)v131;
      v6 = v132;
    }
    else
    {
      v41 = 0;
      v43 = 0;
      v44 = *(unsigned __int8 ***)(v28 + 32);
      result = (_QWORD *)v131;
      v6 = v132;
      do
      {
        v45 = **v44;
        v46 = v45 > 0x39;
        v47 = (1 << v45) & 0x3E6200000000000;
        v48 = v46 || v47 == 0;
        if (!v48 || *((_WORD *)v44 + 10) == 64)
        {
          v49 = *((_DWORD *)v44 + 7);
          if (*((_DWORD *)v132 + 150) == v49)
          {
            v50 = 1;
          }
          else
          {
            v51 = *((unsigned int *)v132 + 149);
            if ((int)v51 < 2)
            {
LABEL_69:
              v50 = 0;
            }
            else
            {
              v52 = 0;
              v53 = v51 - 1;
              while (*(_DWORD *)&v19[4 * v52] != v49)
              {
                if (v53 == ++v52)
                  goto LABEL_69;
              }
              v50 = 1 << (v52 + 1);
            }
          }
          v41 |= v50;
        }
        ++v43;
        v44 += 7;
      }
      while (v43 != v42);
    }
    v21 = 0;
    v20 &= v41;
LABEL_82:
    if (v17 < 2)
      break;
    --v17;
    v18 += 56;
  }
  while (v20);
  v124 = v21;
  *(_QWORD *)(v12 + 488) = v20;
  v55 = v9 + 56 * v121;
  *(_WORD *)(v55 + 20) = 512;
  *(_DWORD *)(v55 + 28) = -1;
  if (v20)
  {
    v56 = *(_DWORD *)(v12 + 20);
    *(_BYTE *)(v4 + 17) = 1;
    if (v56 == 2)
    {
      v57 = 0;
      v58 = *(_QWORD *)(v12 + 32);
      while (1)
      {
        if (*(_WORD *)(v58 + 20) == 1024)
        {
          v59 = *(_QWORD *)(v58 + 32);
          if (v57 >= *(int *)(v59 + 20))
            break;
          v60 = *(_QWORD *)(v59 + 32);
          if (!v60)
            break;
          v61 = (unsigned __int16 *)(v60 + 56 * v57);
        }
        else
        {
          v61 = (unsigned __int16 *)v58;
          if (v57)
            break;
        }
        v62 = 0;
        v128 = v57 + 1;
        while (*(_WORD *)(v58 + 76) != 1024)
        {
          v65 = (unsigned __int16 *)(v58 + 56);
          if (v62)
            goto LABEL_87;
LABEL_100:
          if (((v65[9] | v61[9]) & 0x80) == 0)
          {
            v66 = v61[10];
            v67 = v65[10];
            if ((v66 & 0x3E) != 0 && (v67 & 0x3E) != 0)
            {
              v69 = v67 | v66;
              if (((v67 | v66) & 0xFFE5) == 0 || (v69 & 0xFFD9) == 0)
              {
                result = (_QWORD *)sub_1ACC0ABAC(0, *(unsigned __int8 **)(*(_QWORD *)v61 + 16), *(unsigned __int8 **)(*(_QWORD *)v65 + 16), 0xFFFFFFFFLL);
                if (!(_DWORD)result)
                {
                  result = (_QWORD *)sub_1ACC0ABAC(0, *(unsigned __int8 **)(*(_QWORD *)v61 + 24), *(unsigned __int8 **)(*(_QWORD *)v65 + 24), 0xFFFFFFFFLL);
                  if (!(_DWORD)result)
                  {
                    if ((v69 & 0x18) != 0)
                      v71 = 8;
                    else
                      v71 = 32;
                    if (((v69 - 1) & v69) != 0)
                      v72 = v71;
                    else
                      v72 = v69;
                    if (*(_QWORD *)v61)
                    {
                      result = sub_1ACB8B290(***v130, *(unsigned __int8 **)v61, 0, 0);
                      if (result)
                      {
                        v73 = 52;
                        do
                        {
                          v74 = 2 << (v73 - 52);
                          ++v73;
                        }
                        while (v74 != v72);
                        *(_BYTE *)result = v73;
                        v75 = sub_1ACB90C28((uint64_t)v130, (uint64_t)result, 3);
                        result = (_QWORD *)sub_1ACB90E34(v5, v130, v75);
                      }
                    }
                  }
                }
              }
            }
          }
          ++v62;
          v58 = *(_QWORD *)(v12 + 32);
        }
        v63 = *(_QWORD *)(v58 + 88);
        if (v62 < *(int *)(v63 + 20))
        {
          v64 = *(_QWORD *)(v63 + 32);
          v65 = (unsigned __int16 *)(v64 + 56 * v62);
          if (v64)
            goto LABEL_100;
        }
LABEL_87:
        v57 = v128;
        v4 = (uint64_t)v130;
      }
    }
  }
  v11 = v122;
  v7 = v126;
  v6 = v132;
  if (!v124)
    return result;
LABEL_128:
  v77 = 0;
  v78 = 0;
  v79 = (char *)v6 + 604;
  v80 = -1;
  while (2)
  {
    v81 = *(_DWORD *)(v12 + 20);
    if (v81 < 1)
      break;
    v82 = *(_QWORD *)(v12 + 32);
    v83 = v82 + 18;
    while (1)
    {
      *(_WORD *)(v82 + 18) &= ~0x40u;
      v85 = *(_DWORD *)(v82 + 28);
      if (v85 != v80)
      {
        if (*((_DWORD *)v132 + 150) == v85)
        {
          v84 = 1;
        }
        else
        {
          v86 = *((unsigned int *)v132 + 149);
          if ((int)v86 < 2)
          {
LABEL_140:
            v84 = 0;
          }
          else
          {
            v87 = 0;
            v88 = v86 - 1;
            while (1)
            {
              v89 = *(_DWORD *)&v79[4 * v87++];
              if (v89 == v85)
                break;
              if (v88 == v87)
                goto LABEL_140;
            }
            v84 = 1 << v87;
          }
        }
        if ((v84 & v124) != 0)
          break;
      }
      v82 += 56;
      v83 += 56;
      v46 = v81-- <= 1;
      if (v46)
      {
        v11 = v122;
        goto LABEL_165;
      }
    }
    if (v81 < 1)
    {
      v78 = 1;
      goto LABEL_162;
    }
    v120 = v77;
    v90 = 0;
    v91 = *(_DWORD *)(v82 + 32);
    v129 = *(unsigned __int8 **)(*(_QWORD *)v82 + 16);
    while (2)
    {
      if (*(_DWORD *)(v83 + 10) != v85)
      {
        *(_WORD *)v83 &= ~0x40u;
        goto LABEL_145;
      }
      if (*(_DWORD *)(v83 + 14) != v91)
        goto LABEL_159;
      v92 = *(_QWORD *)(v83 - 18);
      if (v91 != -2)
      {
LABEL_151:
        v93 = sub_1ACB92644(*(unsigned __int8 **)(v92 + 24));
        result = (_QWORD *)sub_1ACB92644(*(unsigned __int8 **)(v92 + 16));
        if (v93)
          v94 = v93 == (_DWORD)result;
        else
          v94 = 1;
        if (!v94)
        {
          v78 = 0;
          v4 = (uint64_t)v130;
          v7 = v126;
          goto LABEL_161;
        }
        *(_WORD *)v83 |= 0x40u;
        v7 = v126;
LABEL_145:
        v83 += 56;
        if (v81 == ++v90)
        {
          v78 = 1;
          goto LABEL_160;
        }
        continue;
      }
      break;
    }
    result = (_QWORD *)sub_1ACC0ABAC((uint64_t)v7, *(unsigned __int8 **)(v92 + 16), v129, 0xFFFFFFFFLL);
    if (!(_DWORD)result)
    {
      v92 = *(_QWORD *)(v83 - 18);
      goto LABEL_151;
    }
LABEL_159:
    v78 = 0;
LABEL_160:
    v4 = (uint64_t)v130;
LABEL_161:
    v77 = v120;
LABEL_162:
    v80 = v85;
    v95 = v78 | v77++;
    v11 = v122;
    if (!v95)
      continue;
    break;
  }
LABEL_165:
  v96 = v121;
  if (!v78)
    return result;
  v97 = *(_DWORD *)(v12 + 20);
  if (v97 >= 1)
  {
    v98 = 0;
    v99 = 0;
    v100 = *(_WORD **)(v12 + 32);
    v101 = v97 + 1;
    while (2)
    {
      if ((v100[9] & 0x40) == 0)
        goto LABEL_171;
      v103 = *(unsigned __int8 **)(*(_QWORD *)v100 + 24);
      if (v103)
        v104 = (unsigned __int8 *)sub_1ACB8B290(v131, v103, 0, 0);
      else
        v104 = 0;
      v105 = *v132;
      if (v99)
      {
        v106 = *v99;
        if (v99[1] > *v99)
        {
          *v99 = v106 + 1;
          v107 = &v99[6 * v106];
          *((_QWORD *)v107 + 2) = 0;
          *((_QWORD *)v107 + 3) = 0;
          *((_QWORD *)v107 + 1) = v104;
LABEL_170:
          v98 = *(unsigned __int8 **)(*(_QWORD *)v100 + 16);
LABEL_171:
          v100 += 28;
          if (--v101 <= 1)
          {
            if (v98)
              v108 = sub_1ACB8B290(v131, v98, 0, 0);
            else
              v108 = 0;
            v96 = v121;
            result = (_QWORD *)sub_1ACC0241C(v7, 49, (uint64_t)v108, 0);
            if (result)
            {
              v115 = (uint64_t)result;
              goto LABEL_189;
            }
            if (v99)
              return sub_1ACC010B0((_QWORD *)v131, v99);
            return result;
          }
          continue;
        }
        v102 = sub_1ACC2D4F4(*v105, v99, v104);
      }
      else
      {
        v102 = (int *)sub_1ACC2D490((_QWORD *)*v105, v104);
      }
      break;
    }
    v99 = v102;
    goto LABEL_170;
  }
  result = (_QWORD *)sub_1ACBE1124(*v7, 0x50uLL);
  if (result)
  {
    v115 = (uint64_t)result;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *(_BYTE *)result = 49;
    *((_WORD *)result + 26) = -1;
    *((_DWORD *)result + 10) = 1;
    if (*(int *)(*v7 + 148) <= 0)
      sub_1ACBCB308((uint64_t)v7, "Expression tree is too large (maximum depth %d)", v109, v110, v111, v112, v113, v114, *(_DWORD *)(*v7 + 148));
    v99 = 0;
LABEL_189:
    if ((*(_DWORD *)(v11 + 4) & 3) != 0)
    {
      *(_DWORD *)(v115 + 4) |= *(_DWORD *)(v11 + 4) & 3;
      *(_DWORD *)(v115 + 56) = *(_DWORD *)(v11 + 56);
    }
    *(_QWORD *)(v115 + 32) = v99;
    v116 = sub_1ACB90C28(v4, v115, 3);
    result = (_QWORD *)sub_1ACB90E34(v5, v4, v116);
    v117 = *(_QWORD *)(v4 + 32);
    v118 = v117 + 56 * (int)v116;
    *(_DWORD *)(v118 + 24) = v125;
    v119 = v117 + 56 * v96;
    *(_WORD *)(v118 + 16) = *(_WORD *)(v119 + 16);
    ++*(_BYTE *)(v119 + 22);
  }
  return result;
}

uint64_t sub_1ACC21A24(uint64_t a1, uint64_t a2, uint64_t *a3, _BOOL4 *a4, _DWORD *a5)
{
  int *v5;
  uint64_t v11;
  int v12;
  _BYTE *v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int8 *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned __int8 *i;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  const char *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  BOOL v32;
  _BOOL4 *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  BOOL v39;
  int v42;
  int v43;
  uint64_t v44;
  BOOL v45;
  _BOOL4 v48;
  uint64_t v49;
  size_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unsigned int v72;
  unsigned __int8 v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  _BOOL4 *v78;
  int v79;
  uint64_t *v80;
  unsigned __int8 *v81;
  double v82;

  v5 = *(int **)(a2 + 32);
  if (!v5)
    return 0;
  v11 = *(_QWORD *)a1;
  v12 = *v5;
  v13 = sub_1ACB5B284(*(_QWORD *)a1, *(char **)(a2 + 8), *v5, 1u, 0);
  if (!v13)
    return 0;
  v14 = *((_DWORD *)v13 + 1);
  if ((v14 & 4) == 0)
    return 0;
  v17 = (unsigned __int8 *)*((_QWORD *)v13 + 1);
  v18 = *v17;
  v19 = v17[1];
  v20 = v17[2];
  if (v12 >= 3)
  {
    v30 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 56);
    if (*(_BYTE *)v30 != 117)
      return 0;
    v31 = *(unsigned __int8 **)(v30 + 8);
    v21 = *v31;
    if (!*v31)
      return 0;
    v32 = v31[1] || v21 == v18;
    if (v32 || v21 == v19)
      return 0;
  }
  else
  {
    v21 = 0;
  }
  *a5 = ((v14 >> 3) & 1) == 0;
  v22 = *(_QWORD *)(a2 + 32);
  for (i = *(unsigned __int8 **)(v22 + 8); i; i = (unsigned __int8 *)*((_QWORD *)i + 2))
  {
    if ((i[5] & 0x20) == 0)
      break;
  }
  v24 = *i;
  if (v24 == 156)
  {
    if ((*(_BYTE *)(v11 + 50) & 0x80) == 0)
    {
      v81 = *(unsigned __int8 **)(v22 + 32);
      v79 = 156;
      v25 = *((_DWORD *)i + 12);
      v26 = sub_1ACC0B1B8(*(uint64_t **)(a1 + 328), v25);
      v27 = v26;
      v80 = a3;
      if (!v26)
        goto LABEL_33;
      v28 = *(unsigned __int16 *)(v26 + 20);
      if (((0x4000000040004uLL >> v28) & 1) == 0)
        goto LABEL_33;
      if ((~v28 & 0x202) == 0 && *(_BYTE *)(v26 + 22) == 1)
      {
        v29 = *(const char **)(v26 + 8);
        goto LABEL_34;
      }
      if ((v28 & 1) == 0)
      {
        v34 = a4;
        v35 = v26;
        v36 = sub_1ACBF2B64((int *)v26, 1);
        v27 = v35;
        a4 = v34;
        v29 = (const char *)v36;
      }
      else
      {
LABEL_33:
        v29 = 0;
      }
LABEL_34:
      v37 = 1 << (v25 - 1);
      if (v25 > 31)
        v37 = 0x80000000;
      *(_DWORD *)(*(_QWORD *)(a1 + 16) + 372) |= v37;
      if (!v29)
        goto LABEL_70;
      goto LABEL_37;
    }
    return 0;
  }
  if (v24 != 117)
    return 0;
  v80 = a3;
  v81 = *(unsigned __int8 **)(v22 + 32);
  v79 = 117;
  v27 = 0;
  v29 = (const char *)*((_QWORD *)i + 1);
  if (!v29)
    goto LABEL_70;
LABEL_37:
  v38 = *(unsigned __int8 *)v29;
  if (*v29)
    v39 = v38 == v18;
  else
    v39 = 1;
  if (v39 || v38 == v19 || v38 == v20)
    goto LABEL_70;
  v78 = a4;
  v42 = 0;
  v43 = *(unsigned __int8 *)v29;
  do
  {
    if (v43 == v21)
    {
      if (v29[v42 + 1])
        v42 += 2;
      else
        ++v42;
    }
    else
    {
      ++v42;
    }
    v44 = v42;
    v43 = v29[v42];
    if (v29[v42])
      v45 = v43 == v18;
    else
      v45 = 1;
  }
  while (!v45 && v43 != v19 && v43 != v20);
  if (v42 <= 1)
  {
    v15 = 0;
    if (v42 != 1 || v38 == v21)
      goto LABEL_71;
    v42 = 1;
  }
  if (v29[v42 - 1] == 255)
  {
LABEL_70:
    v15 = 0;
    goto LABEL_71;
  }
  v77 = v27;
  v48 = v43 == v18 && v29[v42 + 1] == 0;
  *v78 = v48;
  v50 = strlen(v29) & 0x3FFFFFFF;
  v51 = sub_1ACBE1124(v11, v50 + 81);
  v57 = v51;
  v58 = v81;
  if (v51)
  {
    *(_OWORD *)(v51 + 48) = 0u;
    *(_OWORD *)(v51 + 64) = 0u;
    *(_OWORD *)(v51 + 16) = 0u;
    *(_OWORD *)(v51 + 32) = 0u;
    *(_OWORD *)v51 = 0u;
    *(_BYTE *)v51 = 117;
    *(_WORD *)(v51 + 52) = -1;
    v59 = (_BYTE *)(v51 + 80);
    *(_QWORD *)(v51 + 8) = v51 + 80;
    if (v50)
    {
      memcpy((void *)(v51 + 80), v29, v50);
      v58 = v81;
    }
    v60 = 0;
    LODWORD(v61) = 0;
    v59[v50] = 0;
    *(_DWORD *)(v57 + 40) = 1;
    v59[v44] = 0;
    v62 = 0xFFFFFFFF00000000;
    do
    {
      v61 = (int)v61;
      if ((char)v59[(int)v61] == v21)
        v61 = (int)v61 + 1;
      v63 = v57 + v60++;
      *(_BYTE *)(v63 + 80) = v59[v61];
      LODWORD(v61) = v61 + 1;
      v62 += 0x100000000;
    }
    while ((int)v61 < v42);
    v59[v60] = 0;
    if (*v58 != 167
      || (v64 = v58, sub_1ACB92644(v58) != 66)
      || (v64[7] & 3) == 0 && (v65 = *((_QWORD *)v64 + 9)) != 0 && *(_BYTE *)(v65 + 63) == 1)
    {
      if ((int)sub_1ACBA6B1C((unsigned __int8 *)(v57 + 80), &v82, v60, 1) > 0
        || (_DWORD)v60 == 1 && *v59 == 45
        || (v66 = v62 >> 32,
            v67 = v59[v62 >> 32],
            v59[v66] = v67 + 1,
            v68 = sub_1ACBA6B1C((unsigned __int8 *)(v57 + 80), &v82, v60, 1),
            v59[v66] = v67,
            v68 >= 1))
      {
        sub_1ACBF8348((_QWORD *)v11, (unsigned __int8 *)v57);
        v69 = v77;
        if (v77)
        {
          if ((*(_WORD *)(v77 + 20) & 0x9000) != 0 || *(_DWORD *)(v77 + 32))
          {
            sub_1ACBF2A04(v77);
            v69 = v77;
          }
          sub_1ACBE0F9C(*(_QWORD **)(v69 + 24), (_QWORD *)v69);
        }
        return 0;
      }
    }
  }
  *v80 = v57;
  v15 = 1;
  v27 = v77;
  if (v79 == 156)
  {
    v70 = *(_QWORD *)(a1 + 16);
    v71 = *((_DWORD *)i + 12);
    v72 = v71 <= 31 ? 1 << (v71 - 1) : 0x80000000;
    *(_DWORD *)(v70 + 372) |= v72;
    if (*v78 && *(_BYTE *)(*((_QWORD *)i + 1) + 1))
    {
      if (*(_BYTE *)(a1 + 31))
      {
        v73 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v73;
        v74 = *(unsigned int *)(a1 + 4 * v73 + 224);
      }
      else
      {
        v74 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v74;
      }
      sub_1ACB7B84C((_QWORD *)a1, i, v74, v52, v53, v54, v55, v56);
      v75 = *(_BYTE *)(*(_QWORD *)v70 + 103)
          ? &byte_1EECAD280
          : (char *)(*(_QWORD *)(v70 + 136) + 40 * *(int *)(v70 + 144) - 40);
      v27 = v77;
      *((_DWORD *)v75 + 3) = 0;
      if ((_DWORD)v74)
      {
        v76 = *(unsigned __int8 *)(a1 + 31);
        if (v76 <= 7)
        {
          *(_BYTE *)(a1 + 31) = v76 + 1;
          *(_DWORD *)(a1 + 4 * v76 + 224) = v74;
        }
      }
    }
  }
LABEL_71:
  if (v27)
  {
    if ((*(_WORD *)(v27 + 20) & 0x9000) != 0 || *(_DWORD *)(v27 + 32))
    {
      v49 = v27;
      sub_1ACBF2A04(v27);
      v27 = v49;
    }
    sub_1ACBE0F9C(*(_QWORD **)(v27 + 24), (_QWORD *)v27);
  }
  return v15;
}

unsigned int *sub_1ACC21FBC(uint64_t a1, unsigned __int8 *a2, int a3, int a4)
{
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned __int8 *v19;

  v7 = *a2;
  if (v7 != 177)
  {
    if (v7 == 138)
    {
      v9 = sub_1ACBE1124(*(_QWORD *)a1, 0x50uLL);
      v16 = (unsigned __int8 *)v9;
      if (v9)
      {
        *(_OWORD *)(v9 + 32) = 0u;
        *(_OWORD *)(v9 + 48) = 0u;
        *(_OWORD *)(v9 + 64) = 0u;
        *(_OWORD *)v9 = 0u;
        *(_OWORD *)(v9 + 16) = 0u;
        *(_BYTE *)v9 = -78;
        *(_WORD *)(v9 + 52) = -1;
        *(_DWORD *)(v9 + 40) = 1;
        if (*(int *)(*(_QWORD *)a1 + 148) <= 0)
          sub_1ACBCB308(a1, "Expression tree is too large (maximum depth %d)", v10, v11, v12, v13, v14, v15, *(_DWORD *)(*(_QWORD *)a1 + 148));
        *((_DWORD *)v16 + 11) = a4;
        *((_DWORD *)v16 + 12) = a3;
        *((_QWORD *)v16 + 2) = a2;
      }
      return (unsigned int *)v16;
    }
    v16 = a2;
    return sub_1ACB8B290(*(_QWORD *)a1, v16, 0, 0);
  }
  v17 = *((_QWORD *)a2 + 4) + 24 * a3;
  v19 = *(unsigned __int8 **)(v17 + 8);
  v18 = (_QWORD *)(v17 + 8);
  v16 = v19;
  if (*(unsigned __int8 *)(a1 + 302) >= 2u)
  {
    *v18 = 0;
  }
  else if (v16)
  {
    return sub_1ACB8B290(*(_QWORD *)a1, v16, 0, 0);
  }
  return (unsigned int *)v16;
}

uint64_t sub_1ACC220D4(_DWORD *a1, unsigned __int8 *a2)
{
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned __int8 *v41;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  if (*a2 != 179)
    goto LABEL_9;
  v4 = *((_DWORD *)a2 + 11);
  if (a1[2] == v4)
  {
    v5 = 1;
    v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if (!v6)
      goto LABEL_24;
LABEL_10:
    if (*v6 == 167 && (*((_DWORD *)v6 + 1) & 0x20) == 0)
    {
      v12 = *((_DWORD *)v6 + 11);
      if (a1[2] == v12)
      {
        v11 = 1;
        goto LABEL_23;
      }
      v13 = a1[1];
      if ((int)v13 >= 2)
      {
        v14 = 0;
        v15 = v13 - 1;
        while (a1[v14 + 3] != v12)
        {
          if (v15 == ++v14)
            goto LABEL_22;
        }
        v11 = 1 << (v14 + 1);
        goto LABEL_23;
      }
    }
    else if ((*((_DWORD *)v6 + 1) & 0x810000) == 0)
    {
      v11 = sub_1ACC220D4(a1);
LABEL_23:
      v5 |= v11;
      goto LABEL_24;
    }
LABEL_22:
    v11 = 0;
    goto LABEL_23;
  }
  v7 = a1[1];
  if ((int)v7 < 2)
  {
LABEL_9:
    v5 = 0;
    v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
    if (!v6)
      goto LABEL_24;
    goto LABEL_10;
  }
  v8 = 0;
  v9 = v7 - 1;
  while (a1[v8 + 3] != v4)
  {
    if (v9 == ++v8)
      goto LABEL_9;
  }
  v5 = 1 << (v8 + 1);
  v6 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
  if (v6)
    goto LABEL_10;
LABEL_24:
  v16 = (unsigned __int8 *)*((_QWORD *)a2 + 3);
  if (!v16)
  {
    v19 = *((_DWORD *)a2 + 1);
    if ((v19 & 0x1000) != 0)
    {
      if ((v19 & 0x40) != 0)
        *a1 = 1;
      v18 = sub_1ACC20738(a1, *((_QWORD *)a2 + 4));
      goto LABEL_58;
    }
    v20 = (int *)*((_QWORD *)a2 + 4);
    if (!v20)
      goto LABEL_68;
    v21 = *v20;
    if (*v20 < 1)
    {
      v23 = 0;
LABEL_67:
      v5 |= v23;
      goto LABEL_68;
    }
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v25 = *(unsigned __int8 **)&v20[6 * v22 + 2];
      if (v25)
      {
        if (*v25 == 167 && (*((_DWORD *)v25 + 1) & 0x20) == 0)
        {
          v27 = *((_DWORD *)v25 + 11);
          if (a1[2] == v27)
          {
            v24 = 1;
            goto LABEL_37;
          }
          v28 = a1[1];
          if ((int)v28 >= 2)
          {
            v29 = 0;
            v30 = v28 - 1;
            while (a1[v29 + 3] != v27)
            {
              if (v30 == ++v29)
                goto LABEL_36;
            }
            v24 = 1 << (v29 + 1);
            goto LABEL_37;
          }
        }
        else if ((*((_DWORD *)v25 + 1) & 0x810000) == 0)
        {
          v24 = sub_1ACC220D4(a1);
          v21 = *v20;
          goto LABEL_37;
        }
      }
LABEL_36:
      v24 = 0;
LABEL_37:
      v23 |= v24;
      if (++v22 >= v21)
        goto LABEL_67;
    }
  }
  if (*v16 == 167 && (*((_DWORD *)v16 + 1) & 0x20) == 0)
  {
    v31 = *((_DWORD *)v16 + 11);
    if (a1[2] == v31)
    {
      v18 = 1;
      goto LABEL_58;
    }
    v32 = a1[1];
    if ((int)v32 >= 2)
    {
      v33 = 0;
      v34 = v32 - 1;
      while (a1[v33 + 3] != v31)
      {
        if (v34 == ++v33)
          goto LABEL_68;
      }
      v18 = 1 << (v33 + 1);
      goto LABEL_58;
    }
  }
  else if ((*((_DWORD *)v16 + 1) & 0x810000) == 0)
  {
    v18 = sub_1ACC220D4(a1);
LABEL_58:
    v5 |= v18;
  }
LABEL_68:
  if ((*a2 | 4) != 0xAC || (a2[7] & 1) == 0)
    return v5;
  v35 = (_QWORD *)*((_QWORD *)a2 + 9);
  v36 = (int *)v35[2];
  if (!v36 || (v37 = *v36, *v36 < 1))
  {
    v39 = 0;
    v47 = (int *)v35[3];
    if (v47)
      goto LABEL_94;
    goto LABEL_114;
  }
  v38 = 0;
  v39 = 0;
  do
  {
    v41 = *(unsigned __int8 **)&v36[6 * v38 + 2];
    if (!v41)
    {
LABEL_74:
      v40 = 0;
      goto LABEL_75;
    }
    if (*v41 == 167 && (*((_DWORD *)v41 + 1) & 0x20) == 0)
    {
      v43 = *((_DWORD *)v41 + 11);
      if (a1[2] == v43)
      {
        v40 = 1;
      }
      else
      {
        v44 = a1[1];
        if ((int)v44 < 2)
          goto LABEL_74;
        v45 = 0;
        v46 = v44 - 1;
        while (a1[v45 + 3] != v43)
        {
          if (v46 == ++v45)
            goto LABEL_74;
        }
        v40 = 1 << (v45 + 1);
      }
    }
    else
    {
      if ((*((_DWORD *)v41 + 1) & 0x810000) != 0)
        goto LABEL_74;
      v40 = sub_1ACC220D4(a1);
      v37 = *v36;
    }
LABEL_75:
    v39 |= v40;
    ++v38;
  }
  while (v38 < v37);
  v35 = (_QWORD *)*((_QWORD *)a2 + 9);
  v47 = (int *)v35[3];
  if (!v47)
    goto LABEL_114;
LABEL_94:
  v48 = *v47;
  if (*v47 < 1)
  {
LABEL_114:
    v50 = 0;
    v58 = (unsigned __int8 *)v35[9];
    if (v58)
      goto LABEL_117;
    goto LABEL_129;
  }
  v49 = 0;
  v50 = 0;
  do
  {
    v52 = *(unsigned __int8 **)&v47[6 * v49 + 2];
    if (!v52)
    {
LABEL_97:
      v51 = 0;
      goto LABEL_98;
    }
    if (*v52 == 167 && (*((_DWORD *)v52 + 1) & 0x20) == 0)
    {
      v54 = *((_DWORD *)v52 + 11);
      if (a1[2] == v54)
      {
        v51 = 1;
      }
      else
      {
        v55 = a1[1];
        if ((int)v55 < 2)
          goto LABEL_97;
        v56 = 0;
        v57 = v55 - 1;
        while (a1[v56 + 3] != v54)
        {
          if (v57 == ++v56)
            goto LABEL_97;
        }
        v51 = 1 << (v56 + 1);
      }
    }
    else
    {
      if ((*((_DWORD *)v52 + 1) & 0x810000) != 0)
        goto LABEL_97;
      v51 = sub_1ACC220D4(a1);
      v48 = *v47;
    }
LABEL_98:
    v50 |= v51;
    ++v49;
  }
  while (v49 < v48);
  v58 = *(unsigned __int8 **)(*((_QWORD *)a2 + 9) + 72);
  if (!v58)
    goto LABEL_129;
LABEL_117:
  if (*v58 == 167 && (*((_DWORD *)v58 + 1) & 0x20) == 0)
  {
    v61 = *((_DWORD *)v58 + 11);
    if (a1[2] == v61)
    {
      v60 = 1;
    }
    else
    {
      v62 = a1[1];
      if ((int)v62 < 2)
        goto LABEL_129;
      v63 = 0;
      v64 = v62 - 1;
      while (a1[v63 + 3] != v61)
      {
        if (v64 == ++v63)
          goto LABEL_129;
      }
      v60 = 1 << (v63 + 1);
    }
  }
  else
  {
    if ((*((_DWORD *)v58 + 1) & 0x810000) == 0)
    {
      v60 = sub_1ACC220D4(a1);
      return v39 | v50 | v60 | v5;
    }
LABEL_129:
    v60 = 0;
  }
  return v39 | v50 | v60 | v5;
}

uint64_t sub_1ACC22654(int *a1, _DWORD *a2, _BYTE *a3, int a4)
{
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  int v15;

  v7 = a4;
  while (1)
  {
    v8 = &a1[26 * v7];
    v9 = *(_QWORD *)(*((_QWORD *)v8 + 5) + 16);
    if (v9)
      break;
LABEL_2:
    if (++v7 >= *a1)
      return 0;
  }
  v10 = v8[18];
  while (!*(_QWORD *)(v9 + 80) || !*(_WORD *)(v9 + 94))
  {
LABEL_5:
    v9 = *(_QWORD *)(v9 + 40);
    if (!v9)
      goto LABEL_2;
  }
  v11 = 0;
  while (1)
  {
    if (*(__int16 *)(*(_QWORD *)(v9 + 8) + 2 * v11) == -2)
    {
      if (a3)
      {
        v12 = a3;
        while (1)
        {
          v13 = *((_DWORD *)v12 + 1);
          if ((v13 & 0x82000) == 0)
            break;
          if ((v13 & 0x80000) != 0)
          {
            v12 = *(_BYTE **)(*((_QWORD *)v12 + 4) + 8);
            if (!v12)
              break;
          }
          else
          {
            v12 = (_BYTE *)*((_QWORD *)v12 + 2);
            if (!v12)
              break;
          }
        }
      }
      else
      {
        v12 = 0;
      }
      v14 = *(_QWORD *)(*(_QWORD *)(v9 + 80) + 24 * v11 + 8);
      if (v14)
      {
        while (1)
        {
          v15 = *(_DWORD *)(v14 + 4);
          if ((v15 & 0x82000) == 0)
            break;
          if ((v15 & 0x80000) != 0)
          {
            v14 = *(_QWORD *)(*(_QWORD *)(v14 + 32) + 8);
            if (!v14)
              break;
          }
          else
          {
            v14 = *(_QWORD *)(v14 + 16);
            if (!v14)
              break;
          }
        }
      }
      if (!sub_1ACC0ABAC(0, v12, (unsigned __int8 *)v14, v10) && *a3 != 117)
        break;
    }
    if (++v11 >= (unint64_t)*(unsigned __int16 *)(v9 + 94))
      goto LABEL_5;
  }
  *a2 = v10;
  a2[1] = -2;
  return 1;
}

unsigned __int8 *sub_1ACC227C8(uint64_t a1, int a2, uint64_t a3, int a4, char a5)
{
  uint64_t *v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *result;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  _QWORD v25[2];

  v9 = **(uint64_t ***)a1;
  v10 = *v9;
  v24 = 0;
  if (!sub_1ACC12444(a3, &v24) || (v11 = v24, v24 < 0))
  {
    result = (unsigned __int8 *)sub_1ACBE1124(v10, 0x51uLL);
    if (!result)
      return result;
    v13 = result;
    *((_OWORD *)result + 2) = 0u;
    *((_OWORD *)result + 3) = 0u;
    *((_OWORD *)result + 4) = 0u;
    *(_OWORD *)result = 0u;
    *((_OWORD *)result + 1) = 0u;
    *result = -80;
    result[80] = 0;
    *((_WORD *)result + 26) = -1;
    *((_QWORD *)result + 1) = result + 80;
    *((_DWORD *)result + 10) = 1;
    *((_DWORD *)result + 11) = a2;
    v14 = sub_1ACBE1124(*v9, 0x50uLL);
    if (!v14)
      return (unsigned __int8 *)sub_1ACBF8348((_QWORD *)*v9, v13);
  }
  else
  {
    v25[0] = 0;
    v25[1] = 0;
    result = (unsigned __int8 *)sub_1ACB6DDF8(v10, 155, (uint64_t)v25, 0);
    if (!result)
      return result;
    v13 = result;
    *((_DWORD *)result + 1) |= 0x800u;
    *((_DWORD *)result + 2) = v11;
    v14 = sub_1ACBE1124(*v9, 0x50uLL);
    if (!v14)
      return (unsigned __int8 *)sub_1ACBF8348((_QWORD *)*v9, v13);
  }
  v21 = v14;
  *(_OWORD *)v14 = 0u;
  *(_OWORD *)(v14 + 16) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_BYTE *)v14 = 46;
  *(_WORD *)(v14 + 52) = -1;
  *(_QWORD *)(v14 + 24) = v13;
  *(_DWORD *)(v14 + 4) |= *((_DWORD *)v13 + 1) & 0x400208;
  v22 = *((_DWORD *)v13 + 10);
  *(_DWORD *)(v14 + 40) = v22 + 1;
  if (*(_DWORD *)(*v9 + 148) <= v22)
    sub_1ACBCB308((uint64_t)v9, "Expression tree is too large (maximum depth %d)", v15, v16, v17, v18, v19, v20, *(_DWORD *)(*v9 + 148));
  result = (unsigned __int8 *)sub_1ACB90C28(a1, v21, 3);
  v23 = *(_QWORD *)(a1 + 32) + 56 * (int)result;
  *(_DWORD *)(v23 + 28) = a4;
  *(_WORD *)(v23 + 20) = 64;
  *(_BYTE *)(v23 + 23) = a5;
  return result;
}

uint64_t sub_1ACC229C4(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 != 172 || (a2[6] & 0x10) != 0)
    return 0;
  *(_WORD *)(a1 + 36) = 0;
  return 2;
}

unsigned __int16 *sub_1ACC229EC(uint64_t a1, int a2, int a3, uint64_t a4, int a5, _QWORD *a6)
{
  char v6;
  int v8;
  uint64_t v9;
  unsigned __int16 *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  unsigned __int16 v14;
  uint64_t v15;
  uint64_t v17[2];
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = a5;
  v22 = 0u;
  v26 = 0;
  v25 = 0u;
  v24 = 0u;
  v23 = 0u;
  v17[0] = a1;
  v17[1] = a1;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = a5;
  DWORD1(v22) = a2;
  *(_WORD *)((char *)&v22 + 1) = 257;
  if (a6)
  {
    v8 = *(unsigned __int16 *)(a6[1] + 2 * a3);
    v9 = a6[3];
    if (v8 == *(unsigned __int16 *)(v9 + 52))
    {
      LOWORD(a3) = -1;
    }
    else
    {
      v11 = a3;
      LOWORD(a3) = *(_WORD *)(a6[1] + 2 * a3);
      if ((__int16)v8 < 0)
      {
        if ((__int16)v8 == -2)
        {
          v12 = *(_QWORD *)(a6[10] + 24 * (int)v11 + 8);
          v18 = *(_QWORD *)(a6[8] + 8 * v11);
          v19 = v12;
          LOWORD(v25) = -2;
          v13 = sub_1ACC22E9C((uint64_t)v17);
          v10 = 0;
          if (!v13)
            return v10;
          goto LABEL_12;
        }
      }
      else
      {
        LOBYTE(v22) = *(_BYTE *)(*(_QWORD *)(v9 + 8) + 16 * (__int16)v8 + 9);
        v18 = *(_QWORD *)(a6[8] + 8 * v11);
      }
    }
  }
  else if (a3 == -2)
  {
    return 0;
  }
  LOWORD(v25) = a3;
  v13 = sub_1ACC22B44(v17);
  v10 = 0;
  if (v13)
  {
LABEL_12:
    v14 = v6 & 0x82;
    do
    {
      v15 = *((_QWORD *)v13 + 5);
      if ((v15 & a4) == 0)
      {
        if (!v15 && (v14 & v13[10]) != 0)
          return v13;
        if (!v10)
          v10 = v13;
      }
      v13 = sub_1ACC22B44(v17);
    }
    while (v13);
  }
  return v10;
}

unsigned __int16 *sub_1ACC22B44(uint64_t *a1)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned __int16 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE **v27;
  _BYTE *v28;
  unsigned __int8 *i;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unint64_t v33;
  uint64_t *v35;

  v2 = *((_DWORD *)a1 + 8);
  v3 = a1[1];
  v4 = *((unsigned __int8 *)a1 + 41);
  v35 = a1 + 11;
LABEL_2:
  v5 = v4 - 1;
  v6 = *((__int16 *)a1 + v5 + 44);
  v7 = *((unsigned int *)a1 + v5 + 11);
  while (v2 >= *(_DWORD *)(v3 + 20))
  {
LABEL_3:
    v2 = 0;
    v3 = *(_QWORD *)(v3 + 8);
    if (!v3)
    {
      v33 = *((unsigned __int8 *)a1 + 41);
      if (v33 >= *((unsigned __int8 *)a1 + 42))
        return 0;
      v2 = 0;
      v3 = *a1;
      v4 = v33 + 1;
      *((_BYTE *)a1 + 41) = v4;
      goto LABEL_2;
    }
  }
  v8 = (unsigned __int16 *)(*(_QWORD *)(v3 + 32) + 56 * v2);
  while (1)
  {
    if (*((_DWORD *)v8 + 7) != (_DWORD)v7 || *((_DWORD *)v8 + 8) != v6)
      goto LABEL_6;
    if (v6 == -2)
    {
      v9 = *(_QWORD *)(*(_QWORD *)v8 + 16);
      if (v9)
      {
        while (1)
        {
          v10 = *(_DWORD *)(v9 + 4);
          if ((v10 & 0x82000) == 0)
            break;
          if ((v10 & 0x80000) != 0)
          {
            v9 = *(_QWORD *)(*(_QWORD *)(v9 + 32) + 8);
            if (!v9)
              break;
          }
          else
          {
            v9 = *(_QWORD *)(v9 + 16);
            if (!v9)
              break;
          }
        }
      }
      v11 = a1[3];
      if (v11)
      {
        while (1)
        {
          v12 = *(_DWORD *)(v11 + 4);
          if ((v12 & 0x82000) == 0)
            break;
          if ((v12 & 0x80000) != 0)
          {
            v11 = *(_QWORD *)(*(_QWORD *)(v11 + 32) + 8);
            if (!v11)
              break;
          }
          else
          {
            v11 = *(_QWORD *)(v11 + 16);
            if (!v11)
              break;
          }
        }
      }
      if (sub_1ACC0ABAC(0, (unsigned __int8 *)v9, (unsigned __int8 *)v11, v7))
        goto LABEL_6;
    }
    if (*((unsigned __int8 *)a1 + 41) >= 2u && (*(_BYTE *)(*(_QWORD *)v8 + 4) & 1) != 0)
      goto LABEL_6;
    v13 = v8[10];
    if ((v13 & 0x800) != 0)
    {
      v14 = *((unsigned __int8 *)a1 + 42);
      if (v14 <= 0xA)
      {
        v15 = *(unsigned __int8 **)(*(_QWORD *)v8 + 24);
        if (v15)
        {
          while (1)
          {
            v17 = *((_DWORD *)v15 + 1);
            if ((v17 & 0x82000) == 0)
              break;
            if ((v17 & 0x80000) != 0)
              v16 = (unsigned __int8 **)(*((_QWORD *)v15 + 4) + 8);
            else
              v16 = (unsigned __int8 **)(v15 + 16);
            v15 = *v16;
            if (!v15)
              goto LABEL_45;
          }
          if ((v17 & 0x20) == 0 && *v15 == 167)
          {
            if (*((_BYTE *)a1 + 42))
            {
              v18 = 0;
              while (*((_DWORD *)v35 + v18 - 11) != *((_DWORD *)v15 + 11)
                   || *((_DWORD *)v15 + 12) != *((__int16 *)v35 + v18))
              {
                if (v14 == ++v18)
                  goto LABEL_44;
              }
            }
            else
            {
              LODWORD(v18) = 0;
            }
            if ((_DWORD)v18 == (_DWORD)v14)
            {
LABEL_44:
              *((_DWORD *)a1 + *((unsigned __int8 *)a1 + 42) + 11) = *((_DWORD *)v15 + 11);
              *((_WORD *)a1 + v14 + 44) = *((_DWORD *)v15 + 12);
              *((_BYTE *)a1 + 42) = v14 + 1;
              v13 = v8[10];
            }
          }
        }
      }
    }
LABEL_45:
    if ((*((_DWORD *)a1 + 9) & v13) == 0)
      goto LABEL_6;
    if ((v13 & 0x100) == 0 && a1[2])
    {
      v19 = **(_QWORD **)v3;
      v20 = *(_QWORD *)v8;
      if (sub_1ACC22EC8(*(_QWORD *)v8, *((char *)a1 + 40)))
      {
        v27 = (_BYTE **)sub_1ACBCCBB0(v19, v20, v21, v22, v23, v24, v25, v26);
        if (!v27)
          v27 = *(_BYTE ***)(*(_QWORD *)v19 + 16);
        v28 = *v27;
        for (i = (unsigned __int8 *)a1[2]; ; ++i)
        {
          v30 = *v28;
          v31 = *i;
          if ((_DWORD)v30 == (_DWORD)v31)
          {
            if (!*v28)
            {
              LOWORD(v13) = v8[10];
              goto LABEL_57;
            }
          }
          else if (byte_1ACCB6333[v30] != byte_1ACCB6333[v31])
          {
            goto LABEL_6;
          }
          ++v28;
        }
      }
      goto LABEL_6;
    }
LABEL_57:
    if ((v13 & 0x82) == 0)
      break;
    v32 = *(unsigned __int8 **)(*(_QWORD *)v8 + 24);
    if (!v32
      || *v32 != 167
      || *((_DWORD *)v32 + 11) != *((_DWORD *)a1 + 11)
      || *((_DWORD *)v32 + 12) != *((__int16 *)a1 + 44))
    {
      break;
    }
LABEL_6:
    ++v2;
    v8 += 28;
    if (v2 >= *(_DWORD *)(v3 + 20))
      goto LABEL_3;
  }
  a1[1] = v3;
  *((_DWORD *)a1 + 8) = v2 + 1;
  return v8;
}

unsigned __int16 *sub_1ACC22E9C(uint64_t a1)
{
  *(_BYTE *)(a1 + 40) = sub_1ACB92644(*(unsigned __int8 **)(a1 + 24));
  return sub_1ACC22B44((uint64_t *)a1);
}

BOOL sub_1ACC22EC8(uint64_t a1, int a2)
{
  int v4;
  unsigned __int8 *v5;
  int v6;
  char v7;

  v4 = sub_1ACB92644(*(unsigned __int8 **)(a1 + 16));
  v5 = *(unsigned __int8 **)(a1 + 24);
  if (v5)
  {
    v6 = sub_1ACB92644(v5);
    if (v4 >= 65 && v6 >= 65)
    {
      if (v4 > 0x42 || v6 > 0x42)
        return a2 > 66;
      return 1;
    }
LABEL_15:
    if (v6 >= 65)
      v7 = v6;
    else
      v7 = v4;
    LOBYTE(v4) = v7 | 0x40;
    goto LABEL_19;
  }
  if ((*(_BYTE *)(a1 + 5) & 0x10) != 0)
  {
    v6 = sub_1ACB92644(*(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 8));
    if (v4 >= 65 && v6 >= 65)
    {
      if (v4 > 0x42 || v6 > 0x42)
        return a2 > 66;
      return 1;
    }
    goto LABEL_15;
  }
  if (!v4)
    return 1;
LABEL_19:
  if ((char)v4 < 66)
    return 1;
  if (v4 == 66)
    return a2 == 66;
  return a2 > 66;
}

uint64_t sub_1ACC22FB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unsigned int v7;
  unsigned int *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  uint64_t v37;
  size_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  __int16 v53;
  _DWORD *v54;
  __int16 v55;
  int v56;
  int v57;
  _BYTE *v58;
  unsigned __int8 *v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  int v69;
  void *v70;
  void *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  int v76;
  uint64_t v77;
  int *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BOOL4 v82;
  unint64_t v83;
  unint64_t v84;
  int *v85;
  uint64_t v86;
  int v87;
  unint64_t v88;
  uint64_t v91;
  uint64_t v92;
  uint64_t (**v93)(uint64_t);
  _QWORD *v94;
  int v95;
  uint64_t v96;
  int *v97;
  uint64_t v98;
  char v100;
  uint64_t v101;
  int v102;
  _DWORD *v103;
  unsigned __int16 v104;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t (*v111)(uint64_t, uint64_t);
  __int128 v112;
  __int128 v113;

  v109 = 0;
  v3 = *(uint64_t ***)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = **(uint64_t ***)a1;
  v5 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v108 = *(_QWORD *)(a1 + 16);
  v7 = *(unsigned __int8 *)(v108 + 16);
  v8 = *(unsigned int **)(*(_QWORD *)a1 + 16);
  v9 = *(_QWORD *)(v5 + 104 * *(unsigned __int8 *)(v108 + 16) + 40);
  v10 = *(_DWORD *)(v4 + 20);
  if (v10 < 1)
  {
    v11 = 0;
  }
  else
  {
    v11 = 0;
    v12 = v5 + 104 * *(unsigned __int8 *)(v108 + 16);
    v13 = *(_DWORD *)(v12 + 72);
    v14 = (_BYTE *)(v12 + 68);
    v15 = *(_QWORD *)(v4 + 32) + 20;
    do
    {
      v16 = *(_WORD *)(v15 - 2);
      *(_WORD *)(v15 - 2) = v16 & 0xFFBF;
      if (*(_DWORD *)(v15 + 8) == v13
        && (*(_QWORD *)(v15 + 20) & a3) == 0
        && (*(_WORD *)v15 & 0xF7FF) != 0
        && (v16 & 0x80) == 0)
      {
        if ((*v14 & 0x58) == 0
          || (v18 = *(_QWORD *)(v15 - 20), v19 = *(_DWORD *)(v18 + 4), (v19 & 3) != 0)
          && *(_DWORD *)(v18 + 56) == v13
          && ((*v14 & 0x18) == 0 || (v19 & 2) == 0))
        {
          ++v11;
          *(_WORD *)(v15 - 2) = v16 | 0x40;
        }
      }
      v15 += 56;
      --v10;
    }
    while (v10);
  }
  v107 = v4;
  if (v8)
  {
    v20 = *v8;
    if ((int)v20 >= 1)
    {
      v101 = v9;
      v21 = 0;
      v103 = (_DWORD *)(v5 + 104 * v7 + 72);
      while (1)
      {
        v22 = *(unsigned __int8 **)&v8[6 * v21 + 2];
        v113 = 0u;
        v110 = 0;
        WORD2(v113) = 1;
        v111 = sub_1ACB8B0F4;
        v112 = (unint64_t)sub_1ACC0B708;
        if (v22)
        {
          sub_1ACC0B714((uint64_t)&v110, (uint64_t)v22);
          if (!WORD2(v113))
          {
            if ((v8[6 * v21 + 6] & 2) != 0)
              goto LABEL_51;
            v23 = *v22;
            if (v23 == 113)
            {
              v24 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
              if (*v24 != 167 || *((_DWORD *)v24 + 11) != *v103)
                goto LABEL_51;
              *((_DWORD *)v22 + 12) = *((_DWORD *)v24 + 12);
              v25 = *((unsigned int *)v24 + 12);
              if ((v25 & 0x80000000) == 0)
              {
                v26 = *(_QWORD *)(v101 + 8);
                v27 = *(_WORD *)(v26 + 16 * v25 + 14);
                if ((v27 & 0x200) != 0)
                {
                  v29 = *(_QWORD *)(v26 + 16 * v25) - 1;
                  while (*(unsigned __int8 *)++v29)
                    ;
                  if ((v27 & 4) != 0)
                  {
                    while (*(unsigned __int8 *)++v29)
                      ;
                  }
                  v28 = (const char *)(v29 + 1);
                }
                else
                {
                  v28 = 0;
                }
                v32 = (_BYTE *)*((_QWORD *)v22 + 1);
                if (v32)
                {
                  if (!v28)
                    v28 = "BINARY";
                  while (1)
                  {
                    v33 = *v32;
                    v34 = *(unsigned __int8 *)v28;
                    if ((_DWORD)v33 == (_DWORD)v34)
                    {
                      if (!*v32)
                        goto LABEL_22;
                    }
                    else if (byte_1ACCB6333[v33] != byte_1ACCB6333[v34])
                    {
                      goto LABEL_51;
                    }
                    ++v32;
                    ++v28;
                  }
                }
                goto LABEL_51;
              }
            }
            else if (v23 != 167 || *((_DWORD *)v22 + 11) != *v103)
            {
              goto LABEL_51;
            }
          }
        }
LABEL_22:
        if (++v21 == v20)
          goto LABEL_52;
      }
    }
    LODWORD(v21) = 0;
LABEL_51:
    if ((_DWORD)v21 == (_DWORD)v20)
    {
LABEL_52:
      v36 = *((unsigned __int16 *)v3 + 30);
      if ((v36 & 0x80) != 0)
        v35 = (v36 >> 9) & 1 | 2;
      else
        v35 = (v36 >> 6) & 1;
    }
    else
    {
      LODWORD(v20) = 0;
      v35 = 0;
    }
  }
  else
  {
    LODWORD(v20) = 0;
    v35 = 0;
  }
  v37 = 8 * (int)v20 + 28 * v11;
  v38 = v37 + 136;
  if (*v6)
  {
    v45 = (int *)sub_1ACBE1124(*v6, v37 + 136);
    if (v45)
      goto LABEL_58;
LABEL_90:
    sub_1ACBCB308((uint64_t)v6, "out of memory", v39, v40, v41, v42, v43, v44, v100);
    return 7;
  }
  v45 = (int *)sub_1ACB5D828(v37 + 136);
  if (!v45)
    goto LABEL_90;
LABEL_58:
  bzero(v45, v38);
  *((_QWORD *)v45 + 12) = v4;
  v46 = (uint64_t)&v45[2 * v11 + 32];
  v47 = v46 + 12 * v11;
  *((_QWORD *)v45 + 1) = v46;
  *((_QWORD *)v45 + 3) = v47;
  *((_QWORD *)v45 + 4) = v47 + 8 * (int)v20;
  *((_QWORD *)v45 + 13) = v6;
  v45[28] = v35;
  v45[29] = 0;
  v48 = *(_DWORD *)(v4 + 20);
  if (v48 >= 1)
  {
    v49 = 0;
    v104 = 0;
    v50 = 0;
    v51 = 0;
    v52 = *(_QWORD *)(v4 + 32) + 18;
    while (1)
    {
      v53 = *(_WORD *)v52;
      if ((*(_WORD *)v52 & 0x40) == 0)
        goto LABEL_62;
      v54 = (_DWORD *)(v46 + 12 * v50);
      *v54 = *(_DWORD *)(v52 + 14);
      v54[2] = v51;
      v55 = *(_WORD *)(v52 + 2);
      v56 = v55 & 0x3FFF;
      if (v56 == 1)
      {
        if ((v53 & 0x8000) == 0)
        {
          v57 = 1 << v50;
          if (v50 >= 32)
            v57 = 0;
          v49 |= v57;
          v45[29] = v49;
        }
        *(_BYTE *)(v46 + 12 * v50 + 4) = 2;
      }
      else
      {
        v58 = (_BYTE *)(v46 + 12 * v50 + 4);
        if (v56 == 64)
        {
          *v58 = *(_BYTE *)(v52 + 5);
        }
        else if ((*(_WORD *)(v52 + 2) & 0x180) != 0)
        {
          if (v56 == 256)
            *v58 = 71;
          else
            *v58 = 72;
        }
        else
        {
          *v58 = v55;
          if ((v55 & 0x3C) != 0)
          {
            v59 = *(unsigned __int8 **)(*(_QWORD *)(v52 - 18) + 24);
            v60 = *v59;
            if (v60 == 176)
              v60 = v59[2];
            if (v60 == 138)
            {
              v59 = (unsigned __int8 *)*((_QWORD *)v59 + 4);
LABEL_82:
              if (**((int **)v59 + 4) >= 2)
              {
                v61 = 1 << v50;
                if (v50 >= 16)
                  LOWORD(v61) = 0;
                v104 |= v61;
                if (v56 == 4)
                {
                  *v58 = 32;
                }
                else if (v56 == 16)
                {
                  *v58 = 8;
                }
              }
              goto LABEL_61;
            }
            if (v60 == 177)
              goto LABEL_82;
          }
        }
      }
LABEL_61:
      ++v50;
LABEL_62:
      ++v51;
      v52 += 56;
      if (v48 == v51)
        goto LABEL_92;
    }
  }
  v50 = 0;
  v104 = 0;
LABEL_92:
  *v45 = v50;
  if ((int)v20 < 1)
  {
    v63 = 0;
  }
  else
  {
    v63 = 0;
    v20 = v20;
    v64 = v8 + 6;
    do
    {
      v65 = *((_QWORD *)v64 - 2);
      v113 = 0u;
      v110 = 0;
      WORD2(v113) = 1;
      v111 = sub_1ACB8B0F4;
      v112 = (unint64_t)sub_1ACC0B708;
      if (v65)
      {
        sub_1ACC0B714((uint64_t)&v110, v65);
        if (!WORD2(v113))
        {
          v66 = v47 + 8 * v63;
          *(_DWORD *)v66 = *(_DWORD *)(v65 + 48);
          *(_BYTE *)(v66 + 4) = *v64 & 1;
          ++v63;
        }
      }
      v64 += 24;
      --v20;
    }
    while (v20);
  }
  v45[4] = v63;
  *(_WORD *)(v108 + 18) = 0;
  *(_DWORD *)(v108 + 48) = 1024;
  *(_WORD *)(v108 + 52) = 0;
  *(_BYTE *)(v108 + 28) &= ~1u;
  v67 = *v45;
  if ((int)v67 <= *(unsigned __int16 *)(v108 + 56))
  {
LABEL_104:
    v73 = sub_1ACC2491C(a1, a2, -1, 0, (unsigned int *)v45, v104, (_DWORD *)&v109 + 1, &v109);
    if ((_DWORD)v109)
      v73 = sub_1ACC2491C(a1, a2, -1, 0, (unsigned int *)v45, v104, (_DWORD *)&v109 + 1, 0);
    v62 = v73;
    if (!(_DWORD)v73)
    {
      v74 = *(_QWORD *)v108 & ~a2;
      if (v74 || HIDWORD(v109))
      {
        v80 = ~a2;
        if (HIDWORD(v109))
        {
          v62 = sub_1ACC2491C(a1, a2, -1, 1u, (unsigned int *)v45, v104, (_DWORD *)&v109 + 1, 0);
          v81 = *(_QWORD *)v108 & v80;
          v82 = v81 == 0;
          if ((_DWORD)v62)
            goto LABEL_150;
        }
        else
        {
          v81 = 0;
          v82 = 0;
        }
        v83 = 0;
        v102 = v82;
        while ((int)v67 >= 1)
        {
          v84 = v83;
          v85 = (int *)(*((_QWORD *)v45 + 1) + 8);
          v83 = -1;
          v86 = v67;
          do
          {
            v87 = *v85;
            v85 += 3;
            v88 = *(_QWORD *)(*(_QWORD *)(v107 + 32) + 56 * v87 + 40) & v80;
            if (v88 < v83 && v88 > v84)
              v83 = v88;
            --v86;
          }
          while (v86);
          if (v83 == -1)
            break;
          if (v83 != v74 && v83 != v81)
          {
            v91 = sub_1ACC2491C(a1, a2, v83 | a2, 0, (unsigned int *)v45, v104, (_DWORD *)&v109 + 1, 0);
            v62 = v91;
            if (*(_QWORD *)v108 == a2)
            {
              if (!HIDWORD(v109))
                v82 = 1;
              v102 = 1;
            }
            if ((_DWORD)v91)
              goto LABEL_150;
          }
        }
        if (v102)
        {
          v62 = 0;
        }
        else
        {
          v62 = sub_1ACC2491C(a1, a2, a2, 0, (unsigned int *)v45, v104, (_DWORD *)&v109 + 1, 0);
          if (!HIDWORD(v109))
            v82 = 1;
        }
        if (!(v62 | v82))
          v62 = sub_1ACC2491C(a1, a2, a2, 1u, (unsigned int *)v45, v104, (_DWORD *)&v109 + 1, 0);
      }
      else
      {
        v62 = 0;
      }
    }
LABEL_150:
    if (v45[14])
    {
      v92 = *((_QWORD *)v45 + 6);
      if (v92)
      {
        v93 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v92);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v92);
          v92 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_158;
          v93 = &xmmword_1ECD3B1D0;
        }
        (*v93)(v92);
      }
    }
LABEL_158:
    v94 = (_QWORD *)*v6;
    v95 = *v45;
    if (*v45 >= 1)
    {
      v96 = 0;
      do
      {
        v97 = &v45[2 * v96];
        v98 = *((_QWORD *)v97 + 16);
        if (v98)
        {
          if ((*(_WORD *)(v98 + 20) & 0x9000) != 0 || *(_DWORD *)(v98 + 32))
            sub_1ACBF2A04(*((_QWORD *)v97 + 16));
          sub_1ACBE0F9C(*(_QWORD **)(v98 + 24), (_QWORD *)v98);
          v95 = *v45;
        }
        *((_QWORD *)v97 + 16) = 0;
        ++v96;
      }
      while (v96 < v95);
    }
    sub_1ACBE0F9C(v94, v45);
    return v62;
  }
  v68 = (_QWORD *)*v6;
  v69 = (v67 + 7) & 0xFFFFFFF8;
  v70 = (void *)sub_1ACBE1124(*v6, 8 * v69);
  if (v70)
  {
    v71 = v70;
    memcpy(v70, *(const void **)(v108 + 64), 8 * *(unsigned __int16 *)(v108 + 56));
    v72 = *(_QWORD **)(v108 + 64);
    if (v72 != (_QWORD *)(v108 + 80))
      sub_1ACBE0F9C(v68, v72);
    *(_QWORD *)(v108 + 64) = v71;
    *(_WORD *)(v108 + 56) = v69;
    goto LABEL_104;
  }
  v75 = (_QWORD *)*v6;
  v76 = *v45;
  if (*v45 >= 1)
  {
    v77 = 0;
    do
    {
      v78 = &v45[2 * v77];
      v79 = *((_QWORD *)v78 + 16);
      if (v79)
      {
        if ((*(_WORD *)(v79 + 20) & 0x9000) != 0 || *(_DWORD *)(v79 + 32))
          sub_1ACBF2A04(*((_QWORD *)v78 + 16));
        sub_1ACBE0F9C(*(_QWORD **)(v79 + 24), (_QWORD *)v79);
        v76 = *v45;
      }
      *((_QWORD *)v78 + 16) = 0;
      ++v77;
    }
    while (v77 < v76);
  }
  sub_1ACBE0F9C(v75, v45);
  return 7;
}

uint64_t sub_1ACC23970(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _WORD *v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int128 *v12;
  uint64_t result;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  int *v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  uint64_t v27;
  __int16 *v28;
  int v29;
  uint64_t v30;
  unsigned __int16 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int v36;
  int v37;
  char v38;
  __int16 v39;
  uint64_t v40;
  int v41;
  int v42;
  int v43;
  char v44;
  int v45;
  int v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  __int16 v55;
  uint64_t *v56;
  int v57;
  int v58;
  int v59;
  uint64_t *v60;
  __int16 v61;
  BOOL v62;
  __int16 v63;
  int v64;
  int v65;
  uint64_t v66;
  __int16 v67;
  __int16 v68;
  __int16 v69;
  __int16 v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  _QWORD *v74;
  __int16 v75;
  int v76;
  __int16 v77;
  __int16 v78;
  uint64_t v81;
  uint64_t v82;
  int *v83;
  __int16 v84;
  uint64_t v85;
  _BYTE *v86;
  unsigned int v87;
  __int16 v88;
  _WORD *v89;
  _WORD *v90;
  __int16 v91;
  _WORD v92[2];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  _QWORD v100[2];
  _QWORD v101[2];
  __int128 v102;
  uint64_t v103;
  _QWORD *v104;

  v98 = 0u;
  v99 = 0u;
  v96 = 0u;
  v97 = 0u;
  v94 = 0u;
  v95 = 0u;
  v93 = 0u;
  v91 = -1;
  v3 = a1[1];
  v2 = a1[2];
  v4 = (_WORD *)*a1;
  v5 = *(_QWORD *)(*a1 + 8) + 8;
  v6 = *(unsigned __int8 *)(v2 + 16);
  v7 = v5 + 104 * *(unsigned __int8 *)(v2 + 16);
  v10 = *(_QWORD *)(v7 + 32);
  v9 = v7 + 32;
  v8 = v10;
  v82 = v5 + 104 * *(unsigned __int8 *)(v2 + 16);
  v11 = *(_WORD *)(v82 + 61);
  v89 = (_WORD *)(v82 + 61);
  if ((v11 & 2) != 0)
  {
    v12 = *(__int128 **)(v5 + 104 * *(unsigned __int8 *)(v2 + 16) + 96);
  }
  else if ((*(_BYTE *)(v8 + 48) & 0x80) != 0)
  {
    v12 = *(__int128 **)(v8 + 16);
  }
  else
  {
    v98 = 0uLL;
    v99 = 0uLL;
    *(_QWORD *)&v93 = 0;
    v96 = 0uLL;
    v97 = 0uLL;
    v95 = 0uLL;
    LOWORD(v99) = 1;
    *((_QWORD *)&v93 + 1) = &v91;
    *(_QWORD *)&v94 = v92;
    BYTE2(v99) = 5;
    *((_QWORD *)&v94 + 1) = v8;
    HIDWORD(v98) = 65539;
    *(_WORD *)((char *)&v99 + 3) = 3;
    v92[0] = *(_WORD *)(v8 + 58);
    v92[1] = 0;
    if ((v11 & 1) == 0)
      *((_QWORD *)&v95 + 1) = *(_QWORD *)(v8 + 16);
    v12 = &v93;
  }
  v85 = v8;
  v86 = (_BYTE *)(v82 + 60);
  v90 = v4;
  v81 = v3;
  if (a1[3] || (v4[30] & 0x1020) != 0)
    goto LABEL_10;
  result = 0;
  if ((*(_BYTE *)(**(_QWORD **)v4 + 49) & 0x80) == 0 || (v11 & 3) != 0)
    goto LABEL_11;
  if (v11 & 0x48 | *(_BYTE *)(v8 + 48) & 0x80 || (*v86 & 0x10) != 0)
  {
LABEL_10:
    result = 0;
  }
  else
  {
    v54 = v3;
    v55 = *(_WORD *)(v8 + 58);
    v56 = *(uint64_t **)(v54 + 32);
    v57 = *(_DWORD *)(v54 + 20);
    v58 = sub_1ACC25978(v55);
    if (v57 >= 1)
    {
      v59 = v58;
      v60 = &v56[7 * v57];
      v84 = v58 + v55 + 28;
      v88 = v58 + v55 - 25;
      v71 = 43 - v58;
      v72 = v58 - 43;
      if (v58 >= 93)
        v61 = v58;
      else
        v61 = v58 + 1;
      v78 = v61;
      v62 = v58 < -6;
      if (v58 < -6)
        v63 = 43;
      else
        v63 = 44;
      if ((v58 + 31) < 0x2B)
        v62 = 1;
      v73 = v62;
      v75 = v63;
      v3 = v81;
      while (1)
      {
        if ((*(_QWORD *)(v2 + 8) & v56[5]) != 0
          || (v64 = *((_DWORD *)v56 + 7), v64 != *(_DWORD *)(v5 + 104 * v6 + 64))
          || (*((_WORD *)v56 + 10) & 0x82) == 0
          || (*v86 & 0x58) != 0
          && ((v65 = *(_DWORD *)(*v56 + 4), (v65 & 3) == 0)
           || *(_DWORD *)(*v56 + 56) != v64
           || (*v86 & 0x18) != 0 && (v65 & 2) != 0)
          || (v66 = *((unsigned int *)v56 + 8), (v66 & 0x80000000) != 0))
        {
          result = 0;
          goto LABEL_157;
        }
        result = sub_1ACC22EC8(*v56, *(char *)(*(_QWORD *)(*(_QWORD *)v9 + 8) + 16 * v66 + 9));
        if ((_DWORD)result)
          break;
LABEL_163:
        if ((_DWORD)result)
          goto LABEL_11;
LABEL_157:
        v56 += 7;
        if (v56 >= v60)
          goto LABEL_11;
      }
      *(_WORD *)(v2 + 24) = 1;
      *(_QWORD *)(v2 + 32) = 0;
      *(_DWORD *)(v2 + 52) = 1;
      **(_QWORD **)(v2 + 64) = v56;
      if (*(_BYTE *)(v85 + 63) == 2 || (v67 = v84, (*(_BYTE *)(v85 + 49) & 0x40) != 0))
        v67 = v88;
      *(_WORD *)(v2 + 18) = v67 & ~(v67 >> 15);
      *(_WORD *)(v2 + 22) = 43;
      if (v59 >= 43)
      {
        v68 = v78;
        if (v59 <= 74)
        {
          v70 = byte_1ACCBA360[v72];
          v69 = v59;
          goto LABEL_161;
        }
      }
      else
      {
        v68 = v75;
        if (!v73)
        {
          v69 = byte_1ACCBA360[v71];
          v70 = 43;
LABEL_161:
          v68 = v69 + v70;
        }
      }
      *(_WORD *)(v2 + 20) = v68;
      *(_DWORD *)(v2 + 48) = 0x4000;
      *(_QWORD *)v2 = v56[5] | a2;
      result = sub_1ACC2528C((uint64_t)a1, v2);
      goto LABEL_163;
    }
    result = 0;
    v3 = v81;
  }
LABEL_11:
  if ((_DWORD)result)
    return result;
  v14 = a1;
  v15 = (uint64_t)v90;
  if (!v12)
    return result;
  v16 = v5 + 104 * v6;
  v83 = (int *)(v16 + 64);
  v74 = (_QWORD *)(v16 + 80);
  v17 = 1;
  while (1)
  {
    v18 = *((_QWORD *)v12 + 9);
    if (v18)
    {
      result = sub_1ACC259F4(*v83, *v86, v3, v18);
      if (!(_DWORD)result)
        goto LABEL_122;
    }
    if ((*(_WORD *)((_BYTE *)v12 + 99) & 0x100) == 0)
      break;
    result = 0;
LABEL_122:
    if ((*v89 & 2) == 0 && !(_DWORD)result)
    {
      v12 = (__int128 *)*((_QWORD *)v12 + 5);
      ++v17;
      if (v12)
        continue;
    }
    return result;
  }
  v19 = **((unsigned __int16 **)v12 + 2);
  *(_DWORD *)(v2 + 24) = 0;
  *(_WORD *)(v2 + 28) = 0;
  *(_DWORD *)(v2 + 52) = 0;
  *(_BYTE *)(v2 + 17) = 0;
  *(_WORD *)(v2 + 18) = 0;
  *(_QWORD *)v2 = a2;
  *(_WORD *)(v2 + 22) = v19;
  *(_QWORD *)(v2 + 32) = v12;
  if ((*(_WORD *)((_BYTE *)v12 + 99) & 4) != 0)
  {
    v23 = 1;
    goto LABEL_60;
  }
  v20 = *(int **)(*(_QWORD *)v14 + 16);
  if (!v20 || (v21 = *v20, *v20 < 1))
  {
LABEL_58:
    v23 = 1;
    goto LABEL_59;
  }
  v22 = 0;
  v87 = *v83;
  v76 = v19;
  while (2)
  {
    v24 = *(unsigned __int8 **)&v20[6 * v22 + 2];
    if (!v24)
      goto LABEL_24;
    while (1)
    {
      v25 = *((_DWORD *)v24 + 1);
      if ((v25 & 0x82000) == 0)
        break;
      if ((v25 & 0x80000) != 0)
      {
        v24 = *(unsigned __int8 **)(*((_QWORD *)v24 + 4) + 8);
        if (!v24)
          goto LABEL_24;
      }
      else
      {
        v24 = (unsigned __int8 *)*((_QWORD *)v24 + 2);
        if (!v24)
          goto LABEL_24;
      }
    }
    if (*v24 == 167 && *((_DWORD *)v24 + 11) == v87)
    {
      v26 = *((_DWORD *)v24 + 12);
      if (v26 < 0)
        goto LABEL_112;
      v27 = *((unsigned __int16 *)v12 + 47);
      if (*((_WORD *)v12 + 47))
      {
        v28 = (__int16 *)*((_QWORD *)v12 + 1);
        while (1)
        {
          v29 = *v28++;
          if (v26 == v29)
            break;
          if (!--v27)
            goto LABEL_24;
        }
LABEL_112:
        v23 = 0;
LABEL_59:
        v15 = (uint64_t)v90;
        goto LABEL_60;
      }
      goto LABEL_24;
    }
    v30 = *((_QWORD *)v12 + 10);
    if (!v30 || (v31 = *((_WORD *)v12 + 47)) == 0)
    {
LABEL_24:
      if (++v22 >= v21)
        goto LABEL_58;
      continue;
    }
    break;
  }
  v32 = 0;
  while (2)
  {
    if (*(__int16 *)(*((_QWORD *)v12 + 1) + 2 * v32) != -2)
    {
LABEL_43:
      if (++v32 >= (unint64_t)v31)
      {
        v21 = *v20;
        v14 = a1;
        v19 = v76;
        goto LABEL_24;
      }
      continue;
    }
    break;
  }
  v33 = *(_QWORD *)(v30 + 24 * v32 + 8);
  v34 = v24;
  while (1)
  {
    v35 = *((_DWORD *)v34 + 1);
    if ((v35 & 0x82000) == 0)
      break;
    if ((v35 & 0x80000) != 0)
    {
      v34 = *(unsigned __int8 **)(*((_QWORD *)v34 + 4) + 8);
      if (!v34)
        break;
    }
    else
    {
      v34 = (unsigned __int8 *)*((_QWORD *)v34 + 2);
      if (!v34)
        break;
    }
  }
  if (v33)
  {
    while (1)
    {
      v36 = *(_DWORD *)(v33 + 4);
      if ((v36 & 0x82000) == 0)
        break;
      if ((v36 & 0x80000) != 0)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v33 + 32) + 8);
        if (!v33)
          break;
      }
      else
      {
        v33 = *(_QWORD *)(v33 + 16);
        if (!v33)
          break;
      }
    }
  }
  if (sub_1ACC0ABAC(0, v34, (unsigned __int8 *)v33, v87))
  {
    v31 = *((_WORD *)v12 + 47);
    goto LABEL_43;
  }
  v23 = 0;
  v14 = a1;
  v15 = (uint64_t)v90;
  v19 = v76;
LABEL_60:
  v37 = *(unsigned __int16 *)((char *)v12 + 99);
  if ((~v37 & 3) == 0)
  {
    *(_DWORD *)(v2 + 48) = 256;
    if (v23)
      v38 = 0;
    else
      v38 = v17;
    *(_BYTE *)(v2 + 17) = v38;
    *(_WORD *)(v2 + 20) = v19 + 16;
    if (*(_BYTE *)(v85 + 63) == 2 || (*(_BYTE *)(v85 + 49) & 0x40) != 0)
      *(_DWORD *)(v2 + 48) = 33554688;
    v3 = v81;
    v39 = v19;
    sub_1ACC25AF8(v81, v2, (__int16)v19);
    goto LABEL_119;
  }
  if ((v37 & 0x20) != 0)
  {
LABEL_76:
    v43 = 576;
LABEL_77:
    v40 = 0;
    *(_DWORD *)(v2 + 48) = v43;
    v44 = v17;
    if (!v23)
      goto LABEL_88;
LABEL_78:
    if ((*(_BYTE *)(v85 + 48) & 0x80) != 0
      || *((_QWORD *)v12 + 9)
      || (*v89 & 2) != 0
      || (v3 = v81, !v40)
      && (*(_WORD *)((_BYTE *)v12 + 99) & 4) == 0
      && *((__int16 *)v12 + 46) < *(__int16 *)(v85 + 60)
      && (*(_WORD *)(v15 + 60) & 4) == 0
      && byte_1ECD3B147
      && (*(_BYTE *)(**(_QWORD **)v15 + 96) & 0x20) == 0)
    {
      v44 = 0;
      goto LABEL_88;
    }
LABEL_120:
    v14[32] = 0;
    result = sub_1ACC25DE8((uint64_t)v14, v82, (uint64_t)v12, 0);
    if (v14[32] == 1)
      *(_DWORD *)(v85 + 48) |= 0x100u;
    goto LABEL_122;
  }
  v40 = *((_QWORD *)v12 + 13) & *v74;
  *(_DWORD *)(v2 + 48) = 512;
  if (v40 == 0x8000000000000000
    || (*(_WORD *)((_BYTE *)v12 + 99) & 0x800) != 0 && v40 && (*(_WORD *)((_BYTE *)v12 + 99) & 0x400) == 0)
  {
    v41 = v19;
    v42 = sub_1ACC25D38(v15, (uint64_t)v12, *v83);
    v19 = v41;
    if (!v42)
      goto LABEL_74;
    v43 = *(_DWORD *)(v2 + 48) | v42;
    goto LABEL_77;
  }
  if (!v40)
    goto LABEL_76;
LABEL_74:
  v44 = v17;
  if (v23)
    goto LABEL_78;
LABEL_88:
  *(_BYTE *)(v2 + 17) = v44;
  v45 = *(__int16 *)(v85 + 60);
  v46 = v19 + 15 * *((__int16 *)v12 + 46) / v45 + 1;
  *(_WORD *)(v2 + 20) = v19 + 15 * *((__int16 *)v12 + 46) / v45 + 1;
  v3 = v81;
  if (v40)
  {
    v47 = v19 + 16;
    if (*(int *)(v15 + 124) >= 1)
    {
      v77 = v19;
      v48 = 0;
      v49 = 0;
      v50 = *v83;
      while (1)
      {
        v51 = *(_QWORD *)(v15 + 136);
        v52 = *(_QWORD *)(v51 + v48);
        v101[0] = 0;
        v102 = 0u;
        v100[0] = v12;
        v100[1] = v50;
        v101[1] = sub_1ACC26DBC;
        v103 = 0;
        v104 = v100;
        if (v52)
        {
          sub_1ACC0B714((uint64_t)v101, v52);
          if (WORD2(v103))
            break;
        }
        v53 = *(__int16 *)(v51 + v48 + 16);
        if (v53 >= 1)
        {
          if ((*(_WORD *)(v51 + v48 + 20) & 0x82) != 0)
            LOWORD(v53) = -20;
          else
            LOWORD(v53) = -1;
        }
        v15 = (uint64_t)v90;
        v47 += v53;
        ++v49;
        v48 += 56;
        if (v49 >= *((int *)v90 + 31))
          goto LABEL_99;
      }
      v15 = (uint64_t)v90;
LABEL_99:
      LOWORD(v46) = *(_WORD *)(v2 + 20);
      v14 = a1;
      v3 = v81;
      LOWORD(v19) = v77;
    }
    if ((__int16)v46 >= v47)
    {
      if (v47 + 49 >= (__int16)v46)
      {
        if (v47 + 31 >= (__int16)v46)
          LOWORD(v46) = v46 + byte_1ACCBA360[(__int16)v46 - v47];
        else
          LOWORD(v46) = v46 + 1;
      }
    }
    else if ((__int16)v46 + 49 >= v47)
    {
      if ((__int16)v46 + 31 >= v47)
        LOWORD(v46) = v47 + byte_1ACCBA360[v47 - (__int16)v46];
      else
        LOWORD(v46) = v47 + 1;
    }
    else
    {
      LOWORD(v46) = v47;
    }
    *(_WORD *)(v2 + 20) = v46;
  }
  v39 = v19;
  sub_1ACC25AF8(v3, v2, (__int16)v19);
  if ((*v86 & 0x10) != 0 && *((_QWORD *)v12 + 10))
  {
    *(_WORD *)(v2 + 22) = v39;
    goto LABEL_120;
  }
LABEL_119:
  result = sub_1ACC2528C((uint64_t)v14, v2);
  *(_WORD *)(v2 + 22) = v39;
  if (!(_DWORD)result)
    goto LABEL_120;
  return result;
}

uint64_t sub_1ACC242F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  unint64_t v16;
  int v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  __int16 *v26;
  __int16 *v27;
  int v28;
  _OWORD *v29;
  int v30;
  int v31;
  __int16 v32;
  int v33;
  int v34;
  __int16 v35;
  uint64_t v36;
  char *v37;
  int v38;
  int v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;
  __int16 *v46;
  unint64_t v47;
  _WORD *v48;
  _QWORD *v51;
  unint64_t v52;
  int v53;
  uint64_t v56;
  uint64_t v57;
  unint64_t v59;
  _OWORD v60[3];
  uint64_t v61;
  _OWORD v62[3];
  uint64_t v63;
  _OWORD v64[3];
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  uint64_t v99;

  v3 = 0;
  v99 = 0;
  v97 = 0u;
  v98 = 0u;
  v95 = 0u;
  v96 = 0u;
  v93 = 0u;
  v94 = 0u;
  v91 = 0u;
  v92 = 0u;
  v89 = 0u;
  v90 = 0u;
  v87 = 0u;
  v88 = 0u;
  v85 = 0u;
  v86 = 0u;
  v83 = 0u;
  v84 = 0u;
  v81 = 0u;
  v82 = 0u;
  v79 = 0u;
  v80 = 0u;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v68 = 0;
  v66 = 0u;
  v67 = 0u;
  v63 = 0;
  memset(v62, 0, sizeof(v62));
  v5 = *a1;
  v4 = a1[1];
  v6 = *(_QWORD *)(v4 + 32);
  v51 = (_QWORD *)v4;
  v7 = *(_DWORD *)(v4 + 20);
  v65 = 0;
  memset(v64, 0, sizeof(v64));
  v8 = *(_QWORD *)(v5 + 8) + 8;
  v9 = a1[2];
  v10 = v8 + 104 * *(unsigned __int8 *)(v9 + 16);
  if ((*(_BYTE *)(v10 + 60) & 0x10) != 0 || v7 < 1)
    return v3;
  v11 = (uint64_t)a1;
  v52 = v6 + 56 * v7;
  v56 = v8 + 104 * *(unsigned __int8 *)(v9 + 16) + 32;
  v53 = *(_DWORD *)(v10 + 64);
  do
  {
    v57 = v6;
    if ((*(_WORD *)(v6 + 20) & 0x200) == 0
      || (v12 = *(_QWORD *)(v6 + 32), (*(_QWORD *)(v9 + 8) & *(_QWORD *)(v12 + 488)) == 0))
    {
      v3 = 0;
      goto LABEL_66;
    }
    v13 = *(_QWORD *)(v12 + 32) + 56 * *(int *)(v12 + 20);
    v14 = *(_QWORD *)(v11 + 32);
    v15 = *(_OWORD *)(v11 + 16);
    v66 = *(_OWORD *)v11;
    *(_QWORD *)&v67 = v15;
    *((_QWORD *)&v67 + 1) = v62;
    v68 = v14;
    v16 = *(_QWORD *)(v12 + 32);
    v59 = v13;
    if (v16 >= v13)
    {
      v3 = 0;
      goto LABEL_71;
    }
    v3 = 0;
    v17 = 1;
    while ((*(_WORD *)(v16 + 20) & 0x400) == 0)
    {
      if (*(_DWORD *)(v16 + 28) == v53)
      {
        *(_QWORD *)&v69 = *v51;
        *((_QWORD *)&v69 + 1) = v51;
        LOBYTE(v70) = 44;
        DWORD1(v70) = 1;
        HIDWORD(v70) = 1;
        *(_QWORD *)&v71 = v16;
        v18 = &v69;
        goto LABEL_15;
      }
LABEL_10:
      v16 += 56;
      if (v16 >= v59)
        goto LABEL_71;
    }
    v18 = *(__int128 **)(v16 + 32);
LABEL_15:
    *((_QWORD *)&v66 + 1) = v18;
    LOWORD(v62[0]) = 0;
    if (*(_BYTE *)(*(_QWORD *)v56 + 63) == 1)
    {
      v3 = sub_1ACC22FB0((uint64_t)&v66, a2, a3);
      if ((_DWORD)v3)
        goto LABEL_20;
    }
    else
    {
      v3 = sub_1ACC23970(&v66, a2);
      if ((_DWORD)v3)
        goto LABEL_20;
    }
    v3 = sub_1ACC242F0(&v66, a2, a3);
LABEL_20:
    v19 = LOWORD(v62[0]);
    if (LOWORD(v62[0]))
    {
      if (v17)
      {
        LOWORD(v64[0]) = v62[0];
        __memcpy_chk();
      }
      else
      {
        v61 = 0;
        memset(v60, 0, sizeof(v60));
        v20 = LOWORD(v64[0]);
        __memcpy_chk();
        LOWORD(v64[0]) = 0;
        if (v20)
        {
          v21 = 0;
          v22 = 0;
          do
          {
            v23 = 0;
            v24 = (unint64_t)&v60[v21];
            v25 = (_QWORD *)(v24 | 8);
            v26 = (__int16 *)(v24 + 16);
            v27 = (__int16 *)(v24 + 18);
            v28 = v22;
            do
            {
              v29 = &v62[v23];
              v30 = *v26;
              v31 = *((__int16 *)v29 + 8);
              if (v30 >= v31)
              {
                v32 = *v26;
                if (v31 + 49 >= v30)
                {
                  if (v31 + 31 >= v30)
                    v32 = v30 + byte_1ACCBA360[v30 - v31];
                  else
                    v32 = v30 + 1;
                }
              }
              else
              {
                v32 = *((_WORD *)v29 + 8);
                if (v30 + 49 >= v31)
                {
                  if (v30 + 31 >= v31)
                    v32 = v31 + byte_1ACCBA360[v31 - v30];
                  else
                    v32 = v31 + 1;
                }
              }
              v33 = *v27;
              v34 = SWORD1(v62[v23 + 1]);
              if (v33 >= v34)
              {
                v35 = *v27;
                if (v34 + 49 >= v33)
                {
                  if (v34 + 31 >= v33)
                    v35 = v33 + byte_1ACCBA360[v33 - v34];
                  else
                    v35 = v33 + 1;
                }
              }
              else
              {
                v35 = WORD1(v62[v23 + 1]);
                if (v33 + 49 >= v34)
                {
                  if (v33 + 31 >= v34)
                    v35 = v34 + byte_1ACCBA360[v34 - v33];
                  else
                    v35 = v34 + 1;
                }
              }
              v36 = *((_QWORD *)v29 + 1) | *v25;
              if ((_WORD)v28)
              {
                v37 = (char *)v64 + 8;
                v38 = v28;
                while (1)
                {
                  v39 = *((__int16 *)v37 + 4);
                  if (v39 >= v32 && (v36 & ~*(_QWORD *)v37) == 0)
                    break;
                  if (v39 <= v32 && (*(_QWORD *)v37 & ~v36) == 0)
                    goto LABEL_26;
                  --v38;
                  v37 += 16;
                  if (!(_WORD)v38)
                  {
                    if ((unsigned __int16)v28 < 3u)
                      goto LABEL_54;
                    v41 = (unsigned __int16)v28 - 1;
                    v42 = (char *)&v64[1] + 8;
                    v37 = (char *)v64 + 8;
                    do
                    {
                      v43 = v37;
                      v44 = *((__int16 *)v37 + 4);
                      v45 = *((__int16 *)v42 + 4);
                      if (v44 > v45)
                        v37 = v42;
                      v42 += 16;
                      --v41;
                    }
                    while (v41);
                    v46 = (__int16 *)&v64[(unsigned __int16)v28];
                    if (v44 <= v45)
                      v46 = (__int16 *)(v43 + 8);
                    if (*v46 <= v32)
                      goto LABEL_26;
                    break;
                  }
                }
              }
              else
              {
LABEL_54:
                v22 = v28 + 1;
                LOWORD(v64[0]) = v28 + 1;
                v40 = (unint64_t)&v64[(unsigned __int16)v28];
                v37 = (char *)(v40 | 8);
                *(_WORD *)(v40 + 18) = v35;
                v28 = v22;
              }
              *(_QWORD *)v37 = v36;
              *((_WORD *)v37 + 4) = v32;
              if (*((__int16 *)v37 + 5) > v35)
                *((_WORD *)v37 + 5) = v35;
LABEL_26:
              ++v23;
            }
            while (v23 != v19);
            ++v21;
          }
          while (v21 != v20);
        }
      }
      v17 = 0;
      v11 = (uint64_t)a1;
      goto LABEL_10;
    }
    LOWORD(v64[0]) = 0;
    v11 = (uint64_t)a1;
LABEL_71:
    *(_WORD *)(v9 + 52) = 1;
    **(_QWORD **)(v9 + 64) = v57;
    *(_DWORD *)(v9 + 48) = 0x2000;
    *(_WORD *)(v9 + 18) = 0;
    *(_BYTE *)(v9 + 17) = 0;
    *(_QWORD *)(v9 + 32) = 0;
    *(_QWORD *)(v9 + 40) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    if (!(_DWORD)v3 && LOWORD(v64[0]))
    {
      v47 = 1;
      v48 = (_WORD *)&v64[1] + 1;
      do
      {
        *(_WORD *)(v9 + 20) = *(v48 - 1) + 1;
        *(_WORD *)(v9 + 22) = *v48;
        *(_QWORD *)v9 = *(_QWORD *)(v48 - 5);
        v3 = sub_1ACC2528C(v11, v9);
        if ((_DWORD)v3)
          break;
        v48 += 8;
      }
      while (v47++ < LOWORD(v64[0]));
    }
LABEL_66:
    v6 = v57 + 56;
  }
  while (v57 + 56 < v52 && !(_DWORD)v3);
  return v3;
}

uint64_t sub_1ACC2488C(_QWORD *a1, uint64_t a2, int a3)
{
  signed int v5;
  void *v6;
  void *v7;
  _QWORD *v8;
  uint64_t result;

  if (*(unsigned __int16 *)(a2 + 56) >= a3)
    return 0;
  v5 = (a3 + 7) & 0xFFFFFFF8;
  v6 = (void *)sub_1ACBE1124((uint64_t)a1, 8 * v5);
  if (!v6)
    return 7;
  v7 = v6;
  memcpy(v6, *(const void **)(a2 + 64), 8 * *(unsigned __int16 *)(a2 + 56));
  v8 = *(_QWORD **)(a2 + 64);
  if (v8 != (_QWORD *)(a2 + 80))
    sub_1ACBE0F9C(a1, v8);
  result = 0;
  *(_QWORD *)(a2 + 64) = v7;
  *(_WORD *)(a2 + 56) = v5;
  return result;
}

uint64_t sub_1ACC2491C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int16 a4, unsigned int *a5, unsigned int a6, _DWORD *a7, _DWORD *a8)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  uint64_t i;
  const char *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  int v49;
  int v50;
  int k;
  int v52;
  uint64_t v53;
  int v54;
  int j;
  uint64_t v56;
  uint64_t (**v57)(uint64_t);
  uint64_t v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  unsigned int *v66;
  int v67;
  int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  uint64_t (**v76)(uint64_t);
  unsigned int v77;
  int v78;
  double v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  __int16 v83;
  unint64_t v84;
  BOOL v85;
  unint64_t v86;
  BOOL v87;
  unint64_t v88;
  __int16 v89;
  __int16 v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t (**v94)(uint64_t);
  char v95;
  _QWORD **v97;
  char *v99;

  v9 = (char *)*((_QWORD *)a5 + 4);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v12 = **(_QWORD **)a1;
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  v14 = *(unsigned __int8 *)(v10 + 16);
  v15 = *a5;
  *a7 = 0;
  *(_QWORD *)v10 = a2;
  if ((int)v15 >= 1)
  {
    v16 = *(_QWORD *)(v11 + 32);
    v17 = *((_QWORD *)a5 + 1) + 5;
    v18 = v15;
    do
    {
      v19 = *(_DWORD *)(v17 + 3);
      *(_BYTE *)v17 = 0;
      if ((*(_QWORD *)(v16 + 56 * v19 + 40) & ~a3) == 0
        && (*(_WORD *)(v16 + 56 * v19 + 20) & a4) == 0
        && (a8 || *(unsigned __int8 *)(v16 + 56 * v19 + 23) - 75 <= 0xFFFFFFFD))
      {
        *(_BYTE *)v17 = 1;
      }
      v17 += 12;
      --v18;
    }
    while (v18);
  }
  v99 = v9;
  bzero(v9, 8 * (int)v15);
  *((_QWORD *)a5 + 6) = 0;
  a5[10] = 0;
  a5[15] = 0;
  *((_QWORD *)a5 + 8) = 0x546D42AEA2879F2ELL;
  *((_QWORD *)a5 + 9) = 25;
  a5[20] = 0;
  v20 = v13 + 104 * v14;
  v21 = *(_QWORD *)(v20 + 40);
  v97 = (_QWORD **)(v20 + 40);
  *((_QWORD *)a5 + 11) = *(_QWORD *)(v20 + 88);
  a5[30] = 0;
  v22 = *(_QWORD *)v12;
  v23 = v21 + 80;
  v24 = (uint64_t **)(v21 + 80);
  do
  {
    v25 = *v24;
    v26 = *v24;
    v27 = *v26;
    v24 = (uint64_t **)(v26 + 5);
  }
  while (v27 != v22);
  v28 = (_QWORD *)v25[2];
  ++*(_DWORD *)(v22 + 72);
  v29 = (*(uint64_t (**)(_QWORD *, unsigned int *))(*v28 + 24))(v28, a5);
  v36 = v29;
  v37 = *(_QWORD *)v12;
  --*(_DWORD *)(*(_QWORD *)v12 + 72);
  if (v29)
    v38 = v29 == 19;
  else
    v38 = 1;
  if (!v38)
  {
    if (v29 == 7)
    {
      if (!*(_BYTE *)(v37 + 103) && !*(_BYTE *)(v37 + 104))
      {
        *(_BYTE *)(v37 + 103) = 1;
        if (*(int *)(v37 + 220) >= 1)
          *(_DWORD *)(v37 + 424) = 1;
        ++*(_DWORD *)(v37 + 432);
        *(_WORD *)(v37 + 436) = 0;
        v39 = *(_QWORD *)(v37 + 344);
        if (v39)
        {
          sub_1ACBCB308(v39, "out of memory", v30, v31, v32, v33, v34, v35, v95);
          for (i = *(_QWORD *)(v37 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            i = *(_QWORD *)(i + 256);
            if (!i)
              break;
          }
        }
      }
    }
    else
    {
      v41 = (const char *)v28[2];
      if (!v41)
      {
        switch(v29)
        {
          case 0x204u:
            v41 = "abort due to ROLLBACK";
            break;
          case 0x65u:
            v41 = "no more rows available";
            break;
          case 0x64u:
            v41 = "another row available";
            break;
          default:
            if (v29 > 0x1Cu || ((0x1410004uLL >> v29) & 1) != 0)
              v41 = "unknown error";
            else
              v41 = off_1E5C74AE8[v29];
            break;
        }
      }
      sub_1ACBCB308(v12, "%s", v30, v31, v32, v33, v34, v35, (char)v41);
    }
  }
  if (*(_BYTE *)(*(_QWORD *)v23 + 29))
  {
    v42 = *(_DWORD *)(*(_QWORD *)v12 + 40);
    if (v42 >= 1)
    {
      if (*(_QWORD *)(v12 + 168))
        v43 = *(_QWORD *)(v12 + 168);
      else
        v43 = v12;
      v44 = *(_DWORD *)(v43 + 124);
      if ((v44 & 1) == 0)
      {
        v44 |= 1u;
        *(_DWORD *)(v43 + 124) = v44;
      }
      if (v42 != 1)
      {
        if ((v44 & 2) == 0)
        {
          *(_DWORD *)(v43 + 124) = v44 | 2;
          sub_1ACBE9418(v43);
        }
        if (v42 != 2)
        {
          v53 = *(_QWORD *)(v12 + 168);
          if (!v53)
            v53 = v12;
          v54 = *(_DWORD *)(v53 + 124);
          for (j = 2; j != v42; ++j)
          {
            if (((1 << j) & v54) == 0)
            {
              v54 |= 1 << j;
              *(_DWORD *)(v53 + 124) = v54;
            }
          }
        }
      }
      if (*(_DWORD *)(v12 + 120))
      {
        if (*(_QWORD *)(v12 + 168))
          v45 = *(_QWORD *)(v12 + 168);
        else
          v45 = v12;
        v46 = *(_DWORD *)(v45 + 124);
        if ((v46 & 1) == 0)
        {
          v46 |= 1u;
          *(_DWORD *)(v45 + 124) = v46;
        }
        v47 = *(_DWORD *)(v45 + 120) | 1;
        *(_DWORD *)(v45 + 120) = v47;
        if (v42 != 1)
        {
          if ((v46 & 2) == 0)
          {
            *(_DWORD *)(v45 + 124) = v46 | 2;
            sub_1ACBE9418(v45);
            v47 = *(_DWORD *)(v45 + 120);
          }
          *(_DWORD *)(v45 + 120) = v47 | 2;
          if (v42 != 2)
          {
            v48 = *(_QWORD *)(v12 + 168);
            if (!v48)
              v48 = v12;
            v50 = *(_DWORD *)(v48 + 120);
            v49 = *(_DWORD *)(v48 + 124);
            for (k = 2; k != v42; ++k)
            {
              v52 = 1 << k;
              if (((1 << k) & v49) == 0)
              {
                v49 |= v52;
                *(_DWORD *)(v48 + 124) = v49;
              }
              v50 |= v52;
            }
            *(_DWORD *)(v48 + 120) = v50;
          }
        }
      }
    }
  }
  v56 = v28[2];
  if (v56)
  {
    v57 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_71:
      (*v57)(v56);
      goto LABEL_72;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v56);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v56);
    v56 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v57 = &xmmword_1ECD3B1D0;
      goto LABEL_71;
    }
  }
LABEL_72:
  v28[2] = 0;
  if (v36)
  {
    if (v36 == 19)
      return 0;
    else
      return v36;
  }
  bzero(*(void **)(v10 + 64), 8 * (int)v15);
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  if ((int)v15 <= 0)
  {
    *(_WORD *)(v10 + 52) = 0;
    goto LABEL_113;
  }
  v64 = 0;
  v65 = v99 + 4;
  v66 = (unsigned int *)(*((_QWORD *)a5 + 1) + 8);
  v67 = -1;
  do
  {
    v68 = *((_DWORD *)v65 - 1);
    v69 = (v68 - 1);
    if (v68 >= 1)
    {
      if (v68 > (int)v15)
        goto LABEL_124;
      v70 = *v66;
      if ((*v66 & 0x80000000) != 0)
        goto LABEL_124;
      if ((signed int)v70 >= *(_DWORD *)(v11 + 20))
        goto LABEL_124;
      v71 = *(_QWORD *)(v10 + 64);
      if (*(_QWORD *)(v71 + 8 * v69) || !*((_BYTE *)v66 - 3))
        goto LABEL_124;
      v72 = *(_QWORD *)(v11 + 32);
      v73 = v72 + 56 * v70;
      v60 = *(_QWORD *)v10;
      *(_QWORD *)v10 |= *(_QWORD *)(v73 + 40);
      *(_QWORD *)(v71 + 8 * v69) = v73;
      if ((int)v69 > v67)
        v67 = v69;
      if (*v65)
      {
        if (v64 <= 0xF && ((a6 >> v64) & 1) == 0)
          *(_WORD *)(v10 + 30) |= 1 << v69;
        if (*(_BYTE *)(v72 + 56 * v70 + 23) == 74)
          *(_BYTE *)(v10 + 28) |= 2u;
      }
      v74 = 1 << v64;
      if (v64 >= 0x20)
        v74 = 0;
      if ((a5[30] & v74) != 0)
      {
        *(_DWORD *)(v10 + 40) |= 1 << v69;
      }
      else if ((*(_WORD *)(v72 + 56 * v70 + 20) & 1) != 0)
      {
        a5[15] = 0;
        a5[20] &= ~1u;
        *a7 = 1;
      }
      if (*(unsigned __int8 *)(v72 + 56 * v70 + 23) - 75 >= 0xFFFFFFFE && *a7)
      {
        if (!a5[14])
        {
LABEL_111:
          v58 = 0;
          *a8 = 1;
          return v58;
        }
        v75 = *((_QWORD *)a5 + 6);
        if (v75)
        {
          v76 = &off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888 -= (int)off_1ECD3B178(v75);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v75);
            v75 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_110;
            v76 = &xmmword_1ECD3B1D0;
          }
          (*v76)(v75);
        }
LABEL_110:
        *((_QWORD *)a5 + 6) = 0;
        a5[14] = 0;
        goto LABEL_111;
      }
    }
    v65 += 8;
    ++v64;
    v66 += 3;
  }
  while (v15 != v64);
  v80 = (v67 + 1);
  *(_WORD *)(v10 + 52) = v67 + 1;
  if (v67 < 0)
  {
LABEL_113:
    *(_DWORD *)(v10 + 24) = a5[10];
    *(_BYTE *)(v10 + 28) = *(_BYTE *)(v10 + 28) & 0xFE | a5[14] & 1;
    a5[14] = 0;
    *(_QWORD *)(v10 + 32) = *((_QWORD *)a5 + 6);
    if (a5[15])
      v77 = a5[4];
    else
      LOBYTE(v77) = 0;
    LOWORD(v78) = 0;
    *(_BYTE *)(v10 + 29) = v77;
    *(_WORD *)(v10 + 18) = 0;
    v79 = *((double *)a5 + 8);
    if (v79 > 1.0)
    {
      if (v79 > 2000000000.0)
      {
        v78 = 10 * (*(_QWORD *)&v79 >> 52) - 10220;
        goto LABEL_146;
      }
      v82 = (unint64_t)v79;
      if ((unint64_t)v79 >= 8)
      {
        v83 = 40;
        if (v82 >= 0x100)
        {
          v84 = (unint64_t)v79;
          do
          {
            v83 += 40;
            v82 = v84 >> 4;
            v85 = v84 > 0xFFF;
            v84 >>= 4;
          }
          while (v85);
        }
        if (v82 < 0x10)
        {
          LOBYTE(v86) = v82;
        }
        else
        {
          do
          {
            v83 += 10;
            v86 = v82 >> 1;
            v85 = v82 > 0x1F;
            v82 >>= 1;
          }
          while (v85);
        }
      }
      else
      {
        if (v82 < 2)
        {
          LOWORD(v78) = 0;
          goto LABEL_146;
        }
        v83 = 40;
        do
        {
          v83 -= 10;
          LOBYTE(v86) = 2 * v82;
          v87 = v82 >= 4;
          v82 *= 2;
        }
        while (!v87);
      }
      LOWORD(v78) = v83 + word_1ACCBD832[v86 & 7] - 10;
    }
LABEL_146:
    *(_WORD *)(v10 + 20) = v78;
    v88 = *((_QWORD *)a5 + 9);
    if (v88 >= 8)
    {
      v90 = 40;
      if (v88 >= 0x100)
      {
        v91 = *((_QWORD *)a5 + 9);
        do
        {
          v90 += 40;
          v88 = v91 >> 4;
          v85 = v91 > 0xFFF;
          v91 >>= 4;
        }
        while (v85);
      }
      if (v88 < 0x10)
      {
        LOBYTE(v92) = v88;
      }
      else
      {
        do
        {
          v90 += 10;
          v92 = v88 >> 1;
          v85 = v88 > 0x1F;
          v88 >>= 1;
        }
        while (v85);
      }
    }
    else
    {
      if (v88 < 2)
      {
        v89 = 0;
        goto LABEL_161;
      }
      v90 = 40;
      do
      {
        v90 -= 10;
        LOBYTE(v92) = 2 * v88;
        v87 = v88 >= 4;
        v88 *= 2;
      }
      while (!v87);
    }
    v89 = v90 + word_1ACCBD832[v92 & 7] - 10;
LABEL_161:
    *(_WORD *)(v10 + 22) = v89;
    *(_DWORD *)(v10 + 48) = *(_DWORD *)(v10 + 48) & 0xFFFFEFFF | ((a5[20] & 1) << 12);
    v58 = sub_1ACC2528C(a1, v10);
    if ((*(_BYTE *)(v10 + 28) & 1) == 0)
      return v58;
    v93 = *(_QWORD *)(v10 + 32);
    if (v93)
    {
      v94 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v93);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v93);
        v93 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_169;
        v94 = &xmmword_1ECD3B1D0;
      }
      (*v94)(v93);
    }
LABEL_169:
    *(_BYTE *)(v10 + 28) &= ~1u;
    return v58;
  }
  v81 = *(_QWORD **)(v10 + 64);
  while (*v81)
  {
    ++v81;
    if (!--v80)
      goto LABEL_113;
  }
LABEL_124:
  sub_1ACBCB308(v12, "%s.xBestIndex malfunction", v60, (uint64_t)a7, a6, v61, v62, v63, **v97);
  return 1;
}

uint64_t sub_1ACC2528C(uint64_t a1, uint64_t a2)
{
  int v2;
  _QWORD ***v4;
  _QWORD *v5;
  uint64_t *v6;
  _QWORD **v7;
  _QWORD **v8;
  int v9;
  BOOL v10;
  _WORD *v11;
  uint64_t v12;
  int v13;
  int v14;
  _WORD *v15;
  uint64_t v16;
  _WORD *v17;
  int v18;
  int v19;
  _WORD *v20;
  uint64_t result;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  int v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  __int16 v47;
  int v48;
  _WORD *v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  void *v53;
  void *v54;
  _QWORD *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _WORD *v63;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2)
  {
    v4 = *(_QWORD ****)a1;
    v5 = ***(_QWORD ****)a1;
    *(_DWORD *)(a1 + 36) = v2 - 1;
    v8 = v4[10];
    v6 = (uint64_t *)(v4 + 10);
    v7 = v8;
    v9 = *(_DWORD *)(a2 + 48);
    if (v8)
      v10 = (*(_DWORD *)(a2 + 48) & 0x200) == 0;
    else
      v10 = 1;
    if (!v10)
    {
      v22 = *(unsigned __int8 *)(a2 + 16);
      do
      {
        if (*((unsigned __int8 *)v7 + 16) != v22)
          goto LABEL_37;
        v32 = *((_DWORD *)v7 + 12);
        if ((v32 & 0x200) == 0)
          goto LABEL_37;
        v33 = *((unsigned __int16 *)v7 + 26);
        v34 = *((unsigned __int16 *)v7 + 27);
        v35 = *(unsigned __int16 *)(a2 + 52);
        v36 = *(unsigned __int16 *)(a2 + 54);
        if ((int)(v33 - v34) >= (int)(v35 - v36))
          goto LABEL_56;
        v37 = *((__int16 *)v7 + 10);
        v38 = *(__int16 *)(a2 + 20);
        if (v37 <= v38)
        {
          if (v36 > v34)
            goto LABEL_56;
        }
        else if (v36 > v34 || *((__int16 *)v7 + 11) > *(__int16 *)(a2 + 22))
        {
          goto LABEL_56;
        }
        if (*((_WORD *)v7 + 26))
        {
          v39 = *((unsigned __int16 *)v7 + 26);
          while (1)
          {
            v41 = v7[8][v39 - 1];
            if (v41)
              break;
LABEL_48:
            v40 = v39-- <= 1;
            if (v40)
              goto LABEL_54;
          }
          v42 = *(unsigned __int16 *)(a2 + 52);
          while (1)
          {
            v40 = v42-- < 1;
            if (v40)
              break;
            if (*(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v42) == v41)
              goto LABEL_48;
          }
        }
        else
        {
LABEL_54:
          if ((v9 & 0x40) != 0 || (v32 & 0x40) == 0)
          {
            if (v37 >= v38)
              v29 = *(_WORD *)(a2 + 20);
            else
              v29 = *((_WORD *)v7 + 10);
            *(_WORD *)(a2 + 20) = v29;
            v30 = *((__int16 *)v7 + 11);
            if (v30 <= *(__int16 *)(a2 + 22))
              v31 = v30 - 1;
            else
              v31 = *(_WORD *)(a2 + 22);
            goto LABEL_36;
          }
        }
LABEL_56:
        if ((int)(v35 - v36) < (int)(v33 - v34))
        {
          v43 = *(__int16 *)(a2 + 20);
          v44 = *((__int16 *)v7 + 10);
          if (v43 <= v44)
          {
            if (v34 > v36)
              goto LABEL_37;
          }
          else if (v34 > v36 || *(__int16 *)(a2 + 22) > *((__int16 *)v7 + 11))
          {
            goto LABEL_37;
          }
          if (*(_WORD *)(a2 + 52))
          {
            while (1)
            {
              v45 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * (v35 - 1));
              if (v45)
                break;
LABEL_64:
              v40 = v35-- <= 1;
              if (v40)
                goto LABEL_70;
            }
            v46 = *((unsigned __int16 *)v7 + 26);
            while (1)
            {
              v40 = v46-- < 1;
              if (v40)
                goto LABEL_37;
              if (v7[8][v46] == v45)
                goto LABEL_64;
            }
          }
LABEL_70:
          if ((v9 & 0x40) == 0 || (v32 & 0x40) != 0)
          {
            if (v44 <= v43)
              v47 = *(_WORD *)(a2 + 20);
            else
              v47 = *((_WORD *)v7 + 10);
            *(_WORD *)(a2 + 20) = v47;
            v48 = *((__int16 *)v7 + 11);
            if (v48 >= *(__int16 *)(a2 + 22))
              v31 = v48 + 1;
            else
              v31 = *(_WORD *)(a2 + 22);
LABEL_36:
            *(_WORD *)(a2 + 22) = v31;
          }
        }
LABEL_37:
        v7 = (_QWORD **)v7[9];
      }
      while (v7);
    }
    v11 = *(_WORD **)(a1 + 24);
    if (v11)
    {
      if (*(_WORD *)(a2 + 52))
      {
        v12 = *(_QWORD *)a2;
        v13 = *(__int16 *)(a2 + 20);
        v14 = *(__int16 *)(a2 + 22);
        v15 = v11 + 4;
        v16 = (unsigned __int16)*v11;
        if (!*v11)
        {
LABEL_79:
          *v11 = v16 + 1;
          v49 = &v11[8 * v16];
          v15 = v49 + 4;
          v49[9] = v14;
          goto LABEL_102;
        }
        v17 = v11 + 4;
        v18 = (unsigned __int16)*v11;
        do
        {
          v19 = (__int16)v17[4];
          if (v19 >= v13 && (v12 & ~*(_QWORD *)v17) == 0)
          {
            v15 = v17;
            goto LABEL_102;
          }
          if (v19 <= v13 && (*(_QWORD *)v17 & ~v12) == 0)
            return 0;
          --v18;
          v17 += 8;
        }
        while ((_WORD)v18);
        if (v16 < 3)
          goto LABEL_79;
        v62 = v16 - 1;
        v63 = v11 + 12;
        do
        {
          if (v15[4] > v63[4])
            v15 = v63;
          v63 += 8;
          --v62;
        }
        while (v62);
        if ((__int16)v15[4] > v13)
        {
LABEL_102:
          *(_QWORD *)v15 = v12;
          v15[4] = v13;
          if ((__int16)v15[5] > v14)
          {
            result = 0;
            v15[5] = v14;
            return result;
          }
        }
      }
      return 0;
    }
    result = (uint64_t)sub_1ACC25778(v6, a2);
    if (!result)
      return result;
    v23 = (_QWORD *)result;
    v24 = *(_QWORD *)result;
    if (*(_QWORD *)result)
    {
      v25 = (uint64_t *)(v24 + 72);
      while (*v25)
      {
        v26 = sub_1ACC25778(v25, a2);
        if (!v26)
          break;
        v25 = v26;
        v27 = *v26;
        if (!*v26)
          break;
        *v26 = *(_QWORD *)(v27 + 72);
        v28 = *(_QWORD **)(v27 + 64);
        if (v28 != (_QWORD *)(v27 + 80))
        {
          sub_1ACBE0F9C(v5, v28);
          *(_QWORD *)(v27 + 64) = v27 + 80;
          *(_WORD *)(v27 + 56) = 3;
        }
        sub_1ACC2585C(v5, v27);
        *(_WORD *)(v27 + 52) = 0;
        *(_DWORD *)(v27 + 48) = 0;
        sub_1ACBF0674(v5, (_QWORD *)v27);
      }
    }
    else
    {
      v50 = sub_1ACBE1124((uint64_t)v5, 0x68uLL);
      *v23 = v50;
      if (!v50)
        return 7;
      v24 = v50;
      *(_WORD *)(v50 + 52) = 0;
      *(_WORD *)(v50 + 56) = 3;
      *(_DWORD *)(v50 + 48) = 0;
      *(_QWORD *)(v50 + 64) = v50 + 80;
      *(_QWORD *)(v50 + 72) = 0;
    }
    sub_1ACC2585C(v5, v24);
    v51 = *(unsigned __int16 *)(a2 + 52);
    if (v51 > *(unsigned __int16 *)(v24 + 56))
    {
      v52 = (v51 + 7) & 0x1FFF8;
      v53 = (void *)sub_1ACBE1124((uint64_t)v5, 8 * v52);
      if (!v53)
      {
        *(_QWORD *)(v24 + 48) = 0;
        *(_OWORD *)(v24 + 16) = 0u;
        *(_OWORD *)(v24 + 32) = 0u;
        *(_OWORD *)v24 = 0u;
        result = 7;
        if ((*(_BYTE *)(v24 + 49) & 4) != 0)
          return result;
        goto LABEL_93;
      }
      v54 = v53;
      memcpy(v53, *(const void **)(v24 + 64), 8 * *(unsigned __int16 *)(v24 + 56));
      v55 = *(_QWORD **)(v24 + 64);
      if (v55 != (_QWORD *)(v24 + 80))
        sub_1ACBE0F9C(v5, v55);
      *(_QWORD *)(v24 + 64) = v54;
      *(_WORD *)(v24 + 56) = v52;
    }
    v56 = *(_OWORD *)a2;
    v57 = *(_OWORD *)(a2 + 16);
    v58 = *(_OWORD *)(a2 + 32);
    v59 = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(v24 + 48) = v59;
    *(_OWORD *)(v24 + 16) = v57;
    *(_OWORD *)(v24 + 32) = v58;
    *(_OWORD *)v24 = v56;
    memcpy(*(void **)(v24 + 64), *(const void **)(a2 + 64), 8 * WORD2(v59));
    v60 = *(_DWORD *)(a2 + 48);
    if ((v60 & 0x400) != 0)
    {
      result = 0;
      *(_BYTE *)(a2 + 28) &= ~1u;
    }
    else
    {
      result = 0;
      if ((v60 & 0x4000) != 0)
      {
        *(_QWORD *)(a2 + 32) = 0;
        if ((*(_BYTE *)(v24 + 49) & 4) != 0)
          return result;
LABEL_93:
        v61 = *(_QWORD *)(v24 + 32);
        if (v61 && (~*(unsigned __int16 *)(v61 + 99) & 3) == 0)
          *(_QWORD *)(v24 + 32) = 0;
        return result;
      }
    }
    if ((*(_BYTE *)(v24 + 49) & 4) != 0)
      return result;
    goto LABEL_93;
  }
  v20 = *(_WORD **)(a1 + 24);
  if (v20)
    *v20 = 0;
  return 101;
}

uint64_t *sub_1ACC25778(uint64_t *result, uint64_t a2)
{
  uint64_t i;
  uint64_t v3;

  for (i = *result; i; i = *(_QWORD *)(i + 72))
  {
    if (*(unsigned __int8 *)(i + 16) == *(unsigned __int8 *)(a2 + 16)
      && *(unsigned __int8 *)(i + 17) == *(unsigned __int8 *)(a2 + 17))
    {
      if ((*(_BYTE *)(i + 49) & 0x40) != 0
        && !*(_WORD *)(a2 + 54)
        && (~*(_DWORD *)(a2 + 48) & 0x201) == 0
        && (*(_QWORD *)a2 & ~*(_QWORD *)i) == 0)
      {
        return result;
      }
      v3 = *(_QWORD *)a2 & *(_QWORD *)i;
      if (v3 == *(_QWORD *)i
        && *(__int16 *)(i + 18) <= *(__int16 *)(a2 + 18)
        && *(__int16 *)(i + 20) <= *(__int16 *)(a2 + 20)
        && *(__int16 *)(i + 22) <= *(__int16 *)(a2 + 22))
      {
        return 0;
      }
      if (v3 == *(_QWORD *)a2
        && *(__int16 *)(i + 20) >= *(__int16 *)(a2 + 20)
        && *(__int16 *)(i + 22) >= *(__int16 *)(a2 + 22))
      {
        return result;
      }
    }
    result = (uint64_t *)(i + 72);
  }
  return result;
}

_QWORD *sub_1ACC2585C(_QWORD *result, uint64_t a2)
{
  int v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);

  v2 = *(_DWORD *)(a2 + 48);
  if ((v2 & 0x4400) == 0)
    return result;
  v4 = result;
  if ((v2 & 0x400) != 0 && (*(_BYTE *)(a2 + 28) & 1) != 0)
  {
    v7 = *(_QWORD *)(a2 + 32);
    if (v7)
    {
      v8 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
        --qword_1ECD3E8D0;
        result = (_QWORD *)off_1ECD3B168(v7);
        v7 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_16;
        v8 = &xmmword_1ECD3B1D0;
      }
      result = (_QWORD *)(*v8)(v7);
    }
LABEL_16:
    *(_BYTE *)(a2 + 28) &= ~1u;
    v6 = (uint64_t *)(a2 + 32);
LABEL_17:
    *v6 = 0;
    return result;
  }
  if ((v2 & 0x4000) != 0)
  {
    v6 = (uint64_t *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 32);
    if (v5)
    {
      if (*(_QWORD *)(v5 + 32))
      {
        sub_1ACBE0F9C(result, *(_QWORD **)(v5 + 32));
        v5 = *v6;
      }
      result = sub_1ACBE0F9C(v4, (_QWORD *)v5);
      goto LABEL_17;
    }
  }
  return result;
}

uint64_t sub_1ACC25978(int a1)
{
  unint64_t v2;
  __int16 v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  if (a1 < 11)
    return 0;
  v2 = (unsigned __int16)a1;
  v3 = 40;
  if (a1 >= 0x100)
  {
    v4 = (unsigned __int16)a1;
    do
    {
      v3 += 40;
      v2 = v4 >> 4;
      v5 = v4 > 0xFFF;
      v4 >>= 4;
    }
    while (v5);
  }
  if (v2 < 0x10)
  {
    LOBYTE(v6) = v2;
  }
  else
  {
    do
    {
      v3 += 10;
      v6 = v2 >> 1;
      v5 = v2 > 0x1F;
      v2 >>= 1;
    }
    while (v5);
  }
  return (__int16)(v3 + word_1ACCBD832[v6 & 7] - 43);
}

uint64_t sub_1ACC259F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t result;
  int v10;
  _WORD *v11;
  uint64_t v12;

  if ((a2 & 0x40) != 0)
    return 0;
  v8 = **(_QWORD **)a3;
  while (*(_BYTE *)a4 == 44)
  {
    result = sub_1ACC259F4(a1, a2, a3, *(_QWORD *)(a4 + 16));
    if (!(_DWORD)result)
      return result;
    a4 = *(_QWORD *)(a4 + 24);
  }
  if ((*(_BYTE *)(*(_QWORD *)v8 + 50) & 0x80) != 0)
    v8 = 0;
  if (*(int *)(a3 + 20) >= 1)
  {
    v10 = 0;
    v11 = *(_WORD **)(a3 + 32);
    do
    {
      v12 = *(_QWORD *)v11;
      if ((*(_BYTE *)(*(_QWORD *)v11 + 4) & 1) != 0)
      {
        if (*(_DWORD *)(v12 + 56) != (_DWORD)a1)
          goto LABEL_11;
      }
      else if ((a2 & 0x20) != 0)
      {
        goto LABEL_11;
      }
      if (sub_1ACC0B9EC(v8, (unsigned __int8 *)v12, (unsigned __int8 *)a4, a1) && (v11[9] & 0x80) == 0)
        return 1;
LABEL_11:
      ++v10;
      v11 += 28;
    }
    while (v10 < *(_DWORD *)(a3 + 20));
  }
  return 0;
}

uint64_t sub_1ACC25AF8(uint64_t result, uint64_t a2, int a3)
{
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v16;
  unsigned int v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t (*v20)(_QWORD);
  unsigned int v21;
  int v22;
  __int16 v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  unsigned int v27;
  int v28;

  v5 = *(_DWORD *)(result + 28);
  if (v5 < 1)
  {
    v7 = 0;
  }
  else
  {
    v6 = result;
    v7 = 0;
    v8 = *(_QWORD *)(a2 + 8);
    v9 = ~(v8 | *(_QWORD *)a2);
    v10 = *(_QWORD *)(result + 32);
    do
    {
      v12 = *(_QWORD *)(v10 + 48);
      v13 = (v12 & v9) != 0 || (v8 & v12) == 0;
      if (!v13 && (*(_WORD *)(v10 + 18) & 2) == 0)
      {
        if (*(_WORD *)(a2 + 52))
        {
          v14 = *(unsigned __int16 *)(a2 + 52) - 1;
          while (1)
          {
            v16 = *(_QWORD *)(*(_QWORD *)(a2 + 64) + 8 * v14);
            if (v16)
            {
              if (v16 == v10)
                break;
              v17 = *(_DWORD *)(v16 + 24);
              if ((v17 & 0x80000000) == 0 && *(_QWORD *)(v6 + 32) + 56 * v17 == v10)
                break;
            }
            if (!(unint64_t)v14--)
              goto LABEL_18;
          }
        }
        else
        {
LABEL_18:
          v18 = **(_DWORD ***)v6;
          v19 = *(_QWORD *)v18;
          if (*(_DWORD *)(*(_QWORD *)v18 + 424))
          {
            ++v18[12];
            v18[6] = 9;
          }
          v20 = *(uint64_t (**)(_QWORD))(v19 + 544);
          if (v20)
          {
            v21 = v18[36] + 1;
            v18[36] = v21;
            if (v21 >= *(_DWORD *)(v19 + 560))
            {
              result = v20(*(_QWORD *)(v19 + 552));
              if ((_DWORD)result)
              {
                ++v18[12];
                v18[6] = 9;
              }
              v18[36] = 0;
              v8 = *(_QWORD *)(a2 + 8);
              v12 = *(_QWORD *)(v10 + 48);
            }
          }
          if (v8 == v12
            && ((*(_WORD *)(v10 + 20) & 0x3F) != 0
             || (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v6 + 8) + 104 * *(unsigned __int8 *)(a2 + 16) + 68) & 0x48) == 0))
          {
            *(_DWORD *)(a2 + 48) |= 0x800000u;
          }
          v22 = *(__int16 *)(v10 + 16);
          v23 = *(_WORD *)(a2 + 22);
          if (v22 <= 0)
          {
            *(_WORD *)(a2 + 22) = v23 + v22;
          }
          else
          {
            *(_WORD *)(a2 + 22) = v23 - 1;
            if ((*(_WORD *)(v10 + 20) & 0x82) != 0)
            {
              v24 = *(_QWORD *)(*(_QWORD *)v10 + 24);
              v28 = 0;
              result = sub_1ACC12444(v24, &v28);
              v25 = v28 >= 2 || v28 <= -2;
              v26 = v25 || (_DWORD)result == 0;
              v27 = v26 ? 20 : 10;
              if (v27 > v7)
              {
                *(_WORD *)(v10 + 18) |= 0x2000u;
                v7 = v27;
              }
            }
          }
        }
      }
      v10 += 56;
      v11 = __OFSUB__(v5--, 1);
    }
    while (!((v5 < 0) ^ v11 | (v5 == 0)));
  }
  if ((int)(a3 - v7) < *(__int16 *)(a2 + 22))
    *(_WORD *)(a2 + 22) = a3 - v7;
  return result;
}

uint64_t sub_1ACC25D38(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v4;
  uint64_t v5;
  __int16 *v6;
  int v7;
  unsigned int v9;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD **)(a1 + 32);
  if (!v4)
    return 0;
  v12 = 0;
  if ((*(_WORD *)(a2 + 99) & 0x800) == 0)
  {
    v5 = *(unsigned __int16 *)(a2 + 96);
    if (*(_WORD *)(a2 + 96))
    {
      v6 = *(__int16 **)(a2 + 8);
      while (1)
      {
        v7 = *v6++;
        if (v7 >= 63)
          break;
        if (!--v5)
          return 0;
      }
      goto LABEL_8;
    }
    return 0;
  }
LABEL_8:
  v11 = a2;
  LODWORD(v12) = a3;
  WORD2(v12) = 0;
  v10[0] = 0;
  v10[3] = 0;
  v10[1] = sub_1ACC26CBC;
  v10[2] = sub_1ACC1243C;
  v10[4] = 0;
  v10[5] = &v11;
  sub_1ACB73B30(v10, v4);
  if (BYTE4(v12))
    v9 = 0x4000000;
  else
    v9 = 64;
  if (BYTE5(v12))
    return 0;
  else
    return v9;
}

uint64_t sub_1ACC25DE8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  unsigned __int16 *v18;
  unsigned __int16 *v19;
  unsigned __int16 v20;
  unint64_t v21;
  __int16 v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int16 *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v31;
  char v32;
  _QWORD *v33;
  unsigned int v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned __int16 v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  unint64_t v43;
  __int16 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unsigned __int8 *v49;
  int v50;
  int v51;
  int v52;
  unint64_t v53;
  int v54;
  unint64_t v55;
  unsigned __int16 *v56;
  int v57;
  uint64_t v58;
  __int16 v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  int v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  unsigned __int8 v79;
  char v80;
  uint64_t v81;
  int v82;
  unsigned __int8 *v83;
  _BYTE **v84;
  uint64_t v85;
  _BYTE *v86;
  unsigned __int8 *i;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  BOOL v94;
  unsigned __int16 v95;
  int v96;
  __int16 v97;
  int v98;
  __int16 v99;
  int v100;
  __int16 v101;
  unsigned int v102;
  uint64_t v103;
  unsigned int (*v104)(_QWORD);
  unsigned int v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v111;
  uint64_t v112;
  unsigned __int8 *v113;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  uint64_t v117;
  int v118;
  __int16 v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  __int16 v125;
  __int16 v126;
  uint64_t v127;
  int v128;
  unsigned __int16 *v129;
  uint64_t v130;
  uint64_t v132;
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  __int16 v136;
  int v137;
  unsigned int v138;
  uint64_t v139[2];
  uint64_t v140;
  uint64_t v141;
  int v142;
  int v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;

  v4 = **(unsigned int ***)a1;
  if (v4[12])
    return v4[6];
  v7 = a2;
  v127 = *(_QWORD *)v4;
  v148 = 0;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v137 = *(_DWORD *)(v10 + 48);
  if ((v137 & 0x20) != 0)
    v11 = 24;
  else
    v11 = 447;
  if ((*(_WORD *)(a3 + 99) & 4) != 0)
    v11 &= 0x183u;
  v12 = *(unsigned __int16 *)(v10 + 24);
  v135 = *(_WORD *)(v10 + 26);
  v136 = *(_WORD *)(v10 + 28);
  v128 = *(unsigned __int16 *)(v10 + 54);
  v138 = *(unsigned __int16 *)(v10 + 52);
  v134 = *(_QWORD *)v10;
  v133 = *(_WORD *)(v10 + 22);
  v13 = *(_DWORD *)(a2 + 64);
  v139[0] = *(_QWORD *)(a1 + 8);
  v139[1] = v9;
  v140 = 0;
  v141 = 0;
  v142 = 0;
  v143 = v11;
  DWORD1(v144) = v13;
  *(_WORD *)((char *)&v144 + 1) = 257;
  v14 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 2 * v12);
  v15 = *(_QWORD *)(a3 + 24);
  if (v14 == *(unsigned __int16 *)(v15 + 52))
  {
    v16 = -1;
  }
  else
  {
    v16 = *(_WORD *)(*(_QWORD *)(a3 + 8) + 2 * v12);
    if ((__int16)v14 < 0)
    {
      if ((__int16)v14 == -2)
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a3 + 80) + 24 * v12 + 8);
        v140 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8 * v12);
        v141 = v17;
        LOWORD(v147) = -2;
        v18 = sub_1ACC22E9C((uint64_t)v139);
        goto LABEL_15;
      }
    }
    else
    {
      LOBYTE(v144) = *(_BYTE *)(*(_QWORD *)(v15 + 8) + 16 * (__int16)v14 + 9);
      v140 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8 * v12);
    }
  }
  LOWORD(v147) = v16;
  v18 = sub_1ACC22B44(v139);
LABEL_15:
  v19 = v18;
  v20 = 0;
  *(_WORD *)(v10 + 18) = 0;
  v21 = **(unsigned __int16 **)(a3 + 16);
  if (**(__int16 **)(a3 + 16) >= 11)
  {
    v22 = 40;
    if (v21 < 0x100)
    {
      v24 = **(unsigned __int16 **)(a3 + 16);
      if (v21 < 0x10)
      {
LABEL_24:
        LOBYTE(v25) = v24;
LABEL_25:
        v20 = v22 + word_1ACCBD832[v25 & 7] - 43;
        goto LABEL_26;
      }
    }
    else
    {
      v23 = **(unsigned __int16 **)(a3 + 16);
      do
      {
        v22 += 40;
        v24 = v23 >> 4;
        v78 = v23 > 0xFFF;
        v23 >>= 4;
      }
      while (v78);
      if (v24 < 0x10)
        goto LABEL_24;
    }
    do
    {
      v22 += 10;
      v25 = v24 >> 1;
      v78 = v24 > 0x1F;
      v24 >>= 1;
    }
    while (v78);
    goto LABEL_25;
  }
LABEL_26:
  if (!v18)
    goto LABEL_254;
  v26 = 0;
  v129 = 0;
  v125 = **(_WORD **)(a3 + 16);
  v124 = (__int16)v20 - 49;
  v120 = (__int16)v20 - 31;
  v121 = v20;
  v122 = (__int16)v20;
  v123 = (__int16)v20 + 49;
  v118 = (__int16)v20 + 31;
  v119 = v20 + 1;
  v126 = v20;
  v116 = &byte_1ACCBA360[-(__int16)v20];
  v117 = (__int16)v20;
  v132 = v7;
  do
  {
    v27 = v19[10];
    if (v27 == 256 || (v19[9] & 0x80) != 0)
    {
      v28 = *(unsigned __int16 *)(*(_QWORD *)(a3 + 8) + 2 * v12);
      if (*(__int16 *)(*(_QWORD *)(a3 + 8) + 2 * v12) < 0)
      {
        if ((_DWORD)v28 == 0xFFFF)
          goto LABEL_112;
      }
      else if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) + 8) + 16 * v28 + 8) & 0xF) != 0)
      {
        goto LABEL_112;
      }
    }
    v29 = *(_QWORD *)(v10 + 8);
    if ((v29 & *((_QWORD *)v19 + 5)) != 0)
      goto LABEL_112;
    if (v27 == 16 && (v19[9] & 0x100) != 0)
      goto LABEL_112;
    if ((*(_BYTE *)(v7 + 60) & 0x58) != 0)
    {
      v31 = *(_DWORD *)(*(_QWORD *)v19 + 4);
      if ((v31 & 3) == 0
        || *(_DWORD *)(*(_QWORD *)v19 + 56) != *(_DWORD *)(v7 + 64)
        || (*(_BYTE *)(v7 + 60) & 0x18) != 0 && (v31 & 2) != 0)
      {
        goto LABEL_112;
      }
    }
    if (*(_BYTE *)(a3 + 98) && *(unsigned __int16 *)(a3 + 94) - 1 == (_DWORD)v12)
      v32 = 2;
    else
      v32 = 1;
    *(_BYTE *)(a1 + 32) |= v32;
    *(_DWORD *)(v10 + 48) = v137;
    *(_WORD *)(v10 + 24) = v12;
    *(_WORD *)(v10 + 26) = v135;
    *(_WORD *)(v10 + 28) = v136;
    *(_WORD *)(v10 + 52) = v138;
    if (v138 >= *(unsigned __int16 *)(v10 + 56))
    {
      v35 = (_QWORD *)sub_1ACBE1124(v127, 8 * ((v138 + 8) & 0x1FFF8));
      if (!v35)
      {
        v5 = 0;
        v7 = v132;
        break;
      }
      v33 = v35;
      memcpy(v35, *(const void **)(v10 + 64), 8 * *(unsigned __int16 *)(v10 + 56));
      v36 = *(_QWORD **)(v10 + 64);
      if (v36 != (_QWORD *)(v10 + 80))
        sub_1ACBE0F9C((_QWORD *)v127, v36);
      *(_QWORD *)(v10 + 64) = v33;
      *(_WORD *)(v10 + 56) = (v138 + 8) & 0xFFF8;
      v34 = *(unsigned __int16 *)(v10 + 52);
      v29 = *(_QWORD *)(v10 + 8);
    }
    else
    {
      v33 = *(_QWORD **)(v10 + 64);
      v34 = v138;
    }
    v37 = v34 + 1;
    *(_WORD *)(v10 + 52) = v34 + 1;
    v33[v34] = v19;
    *(_QWORD *)v10 = (*((_QWORD *)v19 + 5) | v134) & ~v29;
    if ((v27 & 1) != 0)
    {
      v46 = *(_QWORD *)v19;
      v7 = v132;
      if ((*(_BYTE *)(*(_QWORD *)v19 + 5) & 0x10) != 0)
      {
        if (v37 < 2u)
        {
          LODWORD(v43) = 46;
        }
        else
        {
          v47 = v37 - 1;
          v48 = *(_QWORD **)(v10 + 64);
          LODWORD(v43) = 46;
          do
          {
            if (*v48 && *(_QWORD *)*v48 == v46)
              LODWORD(v43) = 0;
            ++v48;
            --v47;
          }
          while (v47);
        }
      }
      else
      {
        v43 = *(_QWORD *)(v46 + 32);
        if (v43)
        {
          v43 = *(int *)v43;
          if ((_DWORD)v43)
          {
            if (v43 >= 8)
            {
              v59 = 40;
              if (v43 >= 0x100)
              {
                v60 = v43;
                do
                {
                  v59 += 40;
                  v43 = v60 >> 4;
                  v78 = v60 > 0xFFF;
                  v60 >>= 4;
                }
                while (v78);
              }
              LOBYTE(v61) = v43;
              if (v43 >= 0x10)
              {
                do
                {
                  v59 += 10;
                  v61 = v43 >> 1;
                  v78 = v43 > 0x1F;
                  v43 >>= 1;
                }
                while (v78);
              }
            }
            else
            {
              if (v43 < 2)
              {
                LOWORD(v43) = 0;
                goto LABEL_201;
              }
              v59 = 40;
              do
              {
                v59 -= 10;
                LOBYTE(v61) = 2 * v43;
                v94 = v43 >= 4;
                v43 *= 2;
              }
              while (!v94);
            }
            LOWORD(v43) = v59 + word_1ACCBD832[v61 & 7] - 10;
LABEL_201:
            LODWORD(v43) = (unsigned __int16)v43;
            if ((*(_WORD *)(a3 + 99) & 0x80) == 0)
              goto LABEL_202;
            goto LABEL_99;
          }
        }
      }
      if ((*(_WORD *)(a3 + 99) & 0x80) == 0)
        goto LABEL_202;
LABEL_99:
      if (v122 >= 10)
      {
        if ((__int16)v43 >= 11)
        {
          v53 = (unsigned __int16)v43;
          v54 = 40;
          if ((unsigned __int16)v43 >= 0x100u)
          {
            v55 = (unsigned __int16)v43;
            do
            {
              v54 += 40;
              v53 = v55 >> 4;
              v78 = v55 > 0xFFF;
              v55 >>= 4;
            }
            while (v78);
          }
          if (v53 >= 0x10)
          {
            do
            {
              v54 += 10;
              v78 = v53 > 0x1F;
              v53 >>= 1;
            }
            while (v78);
          }
          v52 = v54 + (unsigned __int16)word_1ACCBD832[v53 & 7] - 43;
        }
        else
        {
          v52 = 0;
        }
        if (((*(unsigned __int16 *)(*(_QWORD *)(a3 + 16) + 2 * v12) - ((_DWORD)v43 + v121) + v52 + 10) & 0x8000) != 0)
        {
          if (a4 > 1 || (*(_BYTE *)(v127 + 98) & 2) != 0)
          {
LABEL_112:
            v5 = 0;
            goto LABEL_113;
          }
          *(_DWORD *)(v10 + 48) |= 0x100000u;
        }
      }
LABEL_202:
      v40 = *(_DWORD *)(v10 + 48) | 4;
      *(_DWORD *)(v10 + 48) = v40;
      if ((v40 & 2) != 0)
        goto LABEL_69;
      goto LABEL_203;
    }
    v7 = v132;
    if ((v27 & 0x82) != 0)
    {
      v38 = *(__int16 *)(*(_QWORD *)(a3 + 8) + 2 * v12);
      v39 = *(_DWORD *)(v10 + 48);
      v40 = v39 | 1;
      *(_DWORD *)(v10 + 48) = v39 | 1;
      if (v38 == -1)
        goto LABEL_65;
      if (a4 || v38 < 0 || (v41 = *(unsigned __int16 *)(a3 + 94), v41 - 1 != (_DWORD)v12))
      {
LABEL_67:
        if (BYTE1(v144) < 2u)
        {
          LOWORD(v43) = 0;
          if ((v40 & 2) != 0)
            goto LABEL_69;
        }
        else
        {
          LOWORD(v43) = 0;
          v40 |= 0x200000u;
          *(_DWORD *)(v10 + 48) = v40;
          if ((v40 & 2) != 0)
            goto LABEL_69;
        }
        goto LABEL_203;
      }
      if ((*(_WORD *)(a3 + 99) & 8) != 0 || v41 == 1 && v27 == 2 && *(_BYTE *)(a3 + 98))
LABEL_65:
        v42 = 4097;
      else
        v42 = 65537;
      v40 = v39 | v42;
      *(_DWORD *)(v10 + 48) = v40;
      goto LABEL_67;
    }
    if ((v27 & 0x100) != 0)
    {
      LOWORD(v43) = 0;
      v40 = *(_DWORD *)(v10 + 48) | 8;
      *(_DWORD *)(v10 + 48) = v40;
      if ((v40 & 2) != 0)
        goto LABEL_69;
      goto LABEL_203;
    }
    v49 = *(unsigned __int8 **)(*(_QWORD *)v19 + 16);
    v50 = *v49;
    if (v50 == 176)
      v50 = v49[2];
    if (v50 == 138)
    {
      v49 = (unsigned __int8 *)*((_QWORD *)v49 + 4);
LABEL_141:
      v51 = **((_DWORD **)v49 + 4);
      goto LABEL_142;
    }
    if (v50 == 177)
      goto LABEL_141;
    v51 = 1;
LABEL_142:
    v62 = *(unsigned __int16 *)(a3 + 96) - (_DWORD)v12;
    if (v51 >= v62)
      v63 = v62;
    else
      v63 = v51;
    if ((int)v63 < 2)
    {
      v90 = 1;
      goto LABEL_187;
    }
    v64 = *(_DWORD *)(v132 + 64);
    v65 = 1;
    v112 = v63;
    v111 = v64;
    do
    {
      v66 = *(_QWORD *)(*(_QWORD *)v19 + 24);
      v67 = (_QWORD *)(v66 + 32);
      if ((*(_BYTE *)(v66 + 5) & 0x10) != 0)
        v67 = (_QWORD *)(*v67 + 32);
      v68 = *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v19 + 16) + 32) + 24 * v65 + 8);
      if (*v68 != 167 || *((_DWORD *)v68 + 11) != v64)
      {
        v90 = v65;
        break;
      }
      if (*((_DWORD *)v68 + 12) != *(__int16 *)(*(_QWORD *)(a3 + 8) + 2 * (v65 + v12))
        || *(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + v65 + v12) != *(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + v12))
      {
        v90 = v65;
        v7 = v132;
        break;
      }
      v130 = *((unsigned int *)v68 + 12);
      v114 = v65 + v12;
      v115 = v65;
      v69 = *(unsigned __int8 **)(*v67 + 24 * v65 + 8);
      v70 = sub_1ACB92644(v68);
      v113 = v69;
      v71 = sub_1ACB92644(v69);
      if (v70 < 65 || v71 < 65)
      {
        if (v71 >= 65)
          v80 = v71;
        else
          v80 = v70;
        v79 = v80 | 0x40;
      }
      else
      {
        v78 = v71 > 0x42 || v70 > 0x42;
        if (v78)
          v79 = 67;
        else
          v79 = 65;
      }
      if ((v130 & 0x80000000) != 0 || (v81 = *(_QWORD *)(a3 + 24), (int)v130 >= *(__int16 *)(v81 + 54)))
        v82 = 68;
      else
        v82 = *(unsigned __int8 *)(*(_QWORD *)(v81 + 8) + 16 * v130 + 9);
      v7 = v132;
      if (v82 != v79)
      {
LABEL_186:
        v90 = v115;
        break;
      }
      if ((v68[5] & 2) != 0)
      {
        v85 = (uint64_t)v4;
        v83 = v68;
        goto LABEL_177;
      }
      v83 = v113;
      if (v113 && (v113[5] & 2) != 0)
      {
        v85 = (uint64_t)v4;
LABEL_177:
        v84 = (_BYTE **)sub_1ACB78620(v85, v83, v72, v73, v74, v75, v76, v77);
        if (!v84)
          goto LABEL_186;
        goto LABEL_178;
      }
      v84 = (_BYTE **)sub_1ACB78620((uint64_t)v4, v68, v72, v73, v74, v75, v76, v77);
      if (!v84)
      {
        v85 = (uint64_t)v4;
        v83 = v113;
        goto LABEL_177;
      }
LABEL_178:
      v86 = *v84;
      for (i = *(unsigned __int8 **)(*(_QWORD *)(a3 + 64) + 8 * v114); ; ++i)
      {
        v88 = *v86;
        v89 = *i;
        if ((_DWORD)v88 == (_DWORD)v89)
          break;
        if (byte_1ACCB6333[v88] != byte_1ACCB6333[v89])
          goto LABEL_186;
LABEL_180:
        ++v86;
      }
      if (*v86)
        goto LABEL_180;
      v65 = v115 + 1;
      v90 = v112;
      v64 = v111;
    }
    while (v115 + 1 != v112);
LABEL_187:
    v91 = *(_DWORD *)(v10 + 48);
    if ((v27 & 0x24) == 0)
    {
      v40 = v91 | 0x12;
      *(_DWORD *)(v10 + 48) = v91 | 0x12;
      *(_WORD *)(v10 + 28) = v90;
      if ((v91 & 0x20) == 0)
      {
        v26 = 0;
        LOWORD(v43) = 0;
        v44 = *(_WORD *)(v10 + 22);
        LOWORD(v45) = v44;
        if (!v19)
          goto LABEL_121;
        goto LABEL_118;
      }
      LOWORD(v43) = 0;
      v26 = *(unsigned __int16 **)(*(_QWORD *)(v10 + 64) + 8 * *(unsigned __int16 *)(v10 + 52) - 16);
      v129 = v19;
      if ((v40 & 2) == 0)
        goto LABEL_203;
LABEL_69:
      v44 = *(_WORD *)(v10 + 22);
      if (v26)
      {
        v45 = (__int16)v26[8];
        if (v45 <= 0)
        {
          LOWORD(v45) = v45 + v44;
        }
        else if ((v26[9] & 0x80) != 0)
        {
          LOWORD(v45) = *(_WORD *)(v10 + 22);
        }
        else
        {
          LOWORD(v45) = v44 - 20;
        }
        v19 = v129;
        if (!v129)
          goto LABEL_121;
      }
      else
      {
        v19 = v129;
        LOWORD(v45) = *(_WORD *)(v10 + 22);
        if (!v129)
          goto LABEL_121;
      }
LABEL_118:
      v57 = (__int16)v19[8];
      if (v57 <= 0)
      {
        LOWORD(v45) = v57 + v45;
        if (v26)
          goto LABEL_122;
        goto LABEL_128;
      }
      if ((v19[9] & 0x80) == 0)
        LOWORD(v45) = v45 - 20;
LABEL_121:
      if (v26)
      {
LABEL_122:
        if (v19 && (__int16)v26[8] >= 1 && (__int16)v19[8] > 0)
          LOWORD(v45) = v45 - 20;
      }
LABEL_128:
      LODWORD(v58) = v44 - (v19 != 0) - (v26 != 0);
      v45 = (__int16)v45;
      if ((__int16)v45 <= 10)
        v45 = 10;
      if ((int)v58 >= v45)
        LOWORD(v58) = v45;
      goto LABEL_209;
    }
    v40 = v91 | 0x22;
    *(_DWORD *)(v10 + 48) = v91 | 0x22;
    *(_WORD *)(v10 + 26) = v90;
    if ((v19[9] & 0x100) != 0)
    {
      if (!sub_1ACC2488C((_QWORD *)v127, v10, *(unsigned __int16 *)(v10 + 52) + 1))
      {
        LOWORD(v43) = 0;
        v92 = *(_QWORD *)(v10 + 64);
        v93 = *(unsigned __int16 *)(v10 + 52);
        *(_WORD *)(v10 + 52) = v93 + 1;
        v129 = v19 + 28;
        *(_QWORD *)(v92 + 8 * v93) = v19 + 28;
        v40 = *(_DWORD *)(v10 + 48) | 0x10;
        *(_DWORD *)(v10 + 48) = v40;
        *(_WORD *)(v10 + 28) = 1;
        v26 = v19;
        if ((v40 & 2) == 0)
          goto LABEL_203;
        goto LABEL_69;
      }
LABEL_254:
      v5 = 0;
      break;
    }
    v129 = 0;
    LOWORD(v43) = 0;
    v26 = v19;
    if ((v40 & 2) != 0)
      goto LABEL_69;
LABEL_203:
    v95 = *(_WORD *)(v10 + 24) + 1;
    *(_WORD *)(v10 + 24) = v95;
    v96 = (__int16)v19[8];
    if (v96 > 0 || *(__int16 *)(*(_QWORD *)(a3 + 8) + 2 * v12) < 0)
    {
      v58 = *(_QWORD *)(a3 + 16) + 2 * v95;
      LOWORD(v58) = *(_WORD *)v58 - *(_WORD *)(v58 - 2) + *(_WORD *)(v10 + 22);
      *(_WORD *)(v10 + 22) = v58;
      if ((v27 & 0x100) != 0)
      {
        LOWORD(v58) = v58 + 10;
        goto LABEL_208;
      }
    }
    else
    {
      LOWORD(v58) = v96 - v43 + *(_WORD *)(v10 + 22);
LABEL_208:
      v19 = v129;
LABEL_209:
      *(_WORD *)(v10 + 22) = v58;
      v129 = v19;
    }
    v97 = v58;
    if ((~*(unsigned __int16 *)(a3 + 99) & 3) != 0)
      LODWORD(v58) = (unsigned __int16)v58 + 15 * *(__int16 *)(a3 + 92) / *(__int16 *)(*(_QWORD *)(v7 + 32) + 60) + 1;
    else
      LOWORD(v58) = v58 + 16;
    v98 = (__int16)v58;
    if ((__int16)v58 <= v126)
    {
      LOWORD(v58) = v126;
      if (v98 >= v124)
      {
        LOWORD(v58) = v119;
        if (v98 >= v120)
          LOWORD(v58) = v126 + byte_1ACCBA360[v117 - v98];
      }
    }
    else if (v123 >= (__int16)v58)
    {
      if (v118 >= (__int16)v58)
        LOWORD(v58) = v116[(__int16)v58] + (_WORD)v58;
      else
        LOWORD(v58) = v58 + 1;
    }
    if ((v40 & 0x4000140) == 0)
    {
      v106 = (__int16)(v97 + 16);
      if ((__int16)v58 >= v106)
      {
        if (v106 + 49 >= (__int16)v58)
        {
          if (v106 + 31 >= (__int16)v58)
            LOWORD(v58) = v58 + byte_1ACCBA360[(__int16)v58 - (__int16)(v97 + 16)];
          else
            LOWORD(v58) = v58 + 1;
        }
      }
      else if ((__int16)v58 + 49 >= v106)
      {
        if ((__int16)v58 + 31 >= v106)
          LOWORD(v58) = v97 + 16 + byte_1ACCBA360[(__int16)(v97 + 16) - (__int16)v58];
        else
          LOWORD(v58) = v97 + 17;
      }
      else
      {
        LOWORD(v58) = v97 + 16;
      }
    }
    v99 = v43 + a4;
    *(_WORD *)(v10 + 20) = v58 + v43 + a4;
    *(_WORD *)(v10 + 22) = v97 + v43 + a4;
    sub_1ACC25AF8(*(_QWORD *)(a1 + 8), v10, v125);
    v5 = sub_1ACC2528C(a1, v10);
    v100 = *(_DWORD *)(v10 + 48);
    if ((v100 & 2) != 0)
      v101 = v133;
    else
      v101 = v97;
    *(_WORD *)(v10 + 22) = v101;
    if ((v100 & 0x10) == 0)
    {
      v102 = *(unsigned __int16 *)(v10 + 24);
      if (v102 < *(unsigned __int16 *)(a3 + 96)
        && (v102 < *(unsigned __int16 *)(a3 + 94) || (*(_WORD *)(a3 + 99) & 3) != 2))
      {
        if (v102 >= 4)
        {
          v103 = *(_QWORD *)v4;
          if (*(_DWORD *)(*(_QWORD *)v4 + 424))
          {
            ++v4[12];
            v4[6] = 9;
          }
          v104 = *(unsigned int (**)(_QWORD))(v103 + 544);
          if (v104)
          {
            v105 = v4[36] + 1;
            v4[36] = v105;
            if (v105 >= *(_DWORD *)(v103 + 560))
            {
              if (v104(*(_QWORD *)(v103 + 552)))
              {
                ++v4[12];
                v4[6] = 9;
              }
              v4[36] = 0;
            }
          }
        }
        sub_1ACC25DE8(a1, v132, a3, v99);
      }
    }
    *(_WORD *)(v10 + 22) = v133;
    v7 = v132;
LABEL_113:
    v56 = sub_1ACC22B44(v139);
    if ((_DWORD)v5)
      break;
    v19 = v56;
  }
  while (v56);
  *(_QWORD *)v10 = v134;
  *(_WORD *)(v10 + 24) = v12;
  *(_WORD *)(v10 + 26) = v135;
  *(_WORD *)(v10 + 28) = v136;
  *(_WORD *)(v10 + 54) = v128;
  *(_DWORD *)(v10 + 48) = v137;
  *(_WORD *)(v10 + 22) = v133;
  *(_WORD *)(v10 + 52) = v138;
  if ((_DWORD)v12 == v128)
  {
    v107 = v12 + 1;
    if ((int)v12 + 1 < *(unsigned __int16 *)(a3 + 94)
      && (_DWORD)v12 == v138
      && (*(_WORD *)(a3 + 99) & 0xC0) == 0x80
      && (*(_BYTE *)(v127 + 97) & 0x40) == 0
      && *(__int16 *)(*(_QWORD *)(a3 + 16) + 2 * v107) >= 42)
    {
      v5 = sub_1ACC2488C((_QWORD *)v127, v10, v138 + 1);
      if (!(_DWORD)v5)
      {
        ++*(_WORD *)(v10 + 24);
        ++*(_WORD *)(v10 + 54);
        v108 = *(_QWORD *)(v10 + 64);
        v109 = *(unsigned __int16 *)(v10 + 52);
        *(_WORD *)(v10 + 52) = v109 + 1;
        *(_QWORD *)(v108 + 8 * v109) = 0;
        *(_DWORD *)(v10 + 48) |= 0x8000u;
        LOWORD(v108) = *(_WORD *)(*(_QWORD *)(a3 + 16) + 2 * v12) - *(_WORD *)(*(_QWORD *)(a3 + 16) + 2 * v107);
        *(_WORD *)(v10 + 22) -= v108;
        sub_1ACC25DE8(a1, v7, a3, (__int16)(a4 + v108 + 5));
        *(_WORD *)(v10 + 22) = v133;
        *(_WORD *)(v10 + 24) = v12;
        *(_WORD *)(v10 + 54) = v12;
        *(_DWORD *)(v10 + 48) = v137;
      }
    }
  }
  return v5;
}

uint64_t sub_1ACC26CBC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  __int16 *v7;
  int v8;
  uint64_t result;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(uint64_t **)(a1 + 40);
  v4 = *v3;
  v5 = *a2;
  if (v5 == 169 || v5 == 167)
  {
    if (*((_DWORD *)a2 + 11) == *((_DWORD *)v3 + 2))
    {
      v6 = *(unsigned __int16 *)(v4 + 96);
      if (!*(_WORD *)(v4 + 96))
      {
LABEL_8:
        *((_BYTE *)v3 + 13) = 1;
        return 2;
      }
      v7 = *(__int16 **)(v4 + 8);
      while (1)
      {
        v8 = *v7++;
        if (*((_DWORD *)a2 + 12) == v8)
          break;
        if (!--v6)
          goto LABEL_8;
      }
    }
    return 0;
  }
  if ((*(_WORD *)(v4 + 99) & 0x800) == 0)
    return 0;
  v10 = *(unsigned __int16 *)(v4 + 96);
  if (!*(_WORD *)(v4 + 96))
    return 0;
  v11 = 0;
  v12 = *((unsigned int *)v3 + 2);
  v13 = 8;
  while (*(__int16 *)(*(_QWORD *)(v4 + 8) + 2 * v11) != -2)
  {
LABEL_12:
    ++v11;
    v13 += 24;
    if (v11 >= v10)
      return 0;
  }
  if (sub_1ACC0ABAC(0, a2, *(unsigned __int8 **)(*(_QWORD *)(v4 + 80) + v13), v12))
  {
    v10 = *(unsigned __int16 *)(v4 + 96);
    goto LABEL_12;
  }
  result = 1;
  *((_BYTE *)v3 + 12) = 1;
  return result;
}

uint64_t sub_1ACC26DBC(uint64_t a1, unsigned __int8 *a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*a2 != 167)
    return 0;
  v2 = *(_DWORD **)(a1 + 40);
  if (*((_DWORD *)a2 + 11) != v2[2])
    return 0;
  v3 = *(_QWORD *)v2;
  v4 = *(unsigned __int16 *)(*(_QWORD *)v2 + 96);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v3 + 8);
    while (*(unsigned __int16 *)(v6 + 2 * v5) != *((unsigned __int16 *)a2 + 24))
    {
      if (v4 == ++v5)
        goto LABEL_10;
    }
    if ((v5 & 0x8000) == 0)
      return 0;
  }
LABEL_10:
  *(_WORD *)(a1 + 36) = 1;
  return 2;
}

uint64_t sub_1ACC26E2C(uint64_t *a1, _WORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, _QWORD *a7, uint64_t a8)
{
  __int16 v8;
  _WORD *v9;
  uint64_t v10;
  int v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  _WORD *v21;
  unsigned __int8 *v22;
  unsigned __int8 **v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  unsigned __int16 *v28;
  unsigned __int16 *v29;
  unsigned __int16 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int16 **v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE **v42;
  unsigned __int8 **v43;
  _BYTE *v44;
  unsigned __int8 *i;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v53;
  unint64_t v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  _BOOL4 v58;
  char v59;
  int v60;
  uint64_t v61;
  int v62;
  char v63;
  uint64_t v64;
  uint64_t *v65;
  int v66;
  BOOL v67;
  uint64_t v68;
  int v69;
  _WORD *v70;
  unsigned __int8 *v71;
  unsigned __int8 **v72;
  unsigned __int8 *v73;
  int v74;
  int v75;
  uint64_t v76;
  int v77;
  int v78;
  int v79;
  uint64_t v80;
  _BYTE **v81;
  _BYTE *v82;
  unsigned __int8 *v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD **v90;
  _QWORD *v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 *v96;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  BOOL v104;
  int v106;
  int v107;
  int v108;
  uint64_t v109;
  uint64_t v110;
  unsigned int v111;
  unint64_t v112;
  __int16 v113;
  char v114;
  int v116;
  __int16 v117;
  uint64_t v118;
  _DWORD *v119;
  int v120;
  unint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  unsigned int v130;
  char *v132;
  uint64_t v133;
  uint64_t (*v134)(uint64_t, uint64_t);
  __int128 v135;
  _BYTE v136[56];
  __int128 v137;
  uint64_t v138;

  v8 = a4;
  v9 = a2;
  if ((_DWORD)a5 && (*(_BYTE *)(*(_QWORD *)*a1 + 96) & 0x40) != 0)
    goto LABEL_4;
  v10 = (unsigned __int16)*a2;
  if (v10 > 0x3F)
    goto LABEL_4;
  if ((a4 & 0x803) != 0)
    v12 = 387;
  else
    v12 = 386;
  v122 = v12;
  if (!*a2)
    return (char)v10;
  v13 = 0;
  v14 = 0;
  v126 = 0;
  v15 = 0;
  v16 = 0;
  v121 = ~(-1 << v10);
  v118 = (uint64_t)(a1 + 13);
  v120 = a4 & 0xC0;
  v119 = a1 + 74;
  v17 = a5;
  v132 = (char *)a1 + 604;
  v117 = a4;
  v112 = a5;
  while (1)
  {
    if (v13)
      v14 |= *(_QWORD *)(v16 + 8);
    v16 = a6;
    if (v13 >= v17)
      break;
    v16 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 8 * v13);
    if ((v8 & 0x800) == 0)
      break;
LABEL_201:
    v102 = 0;
    if (v15 < v121 && v13++ < v17)
      continue;
    goto LABEL_213;
  }
  if ((*(_BYTE *)(v16 + 49) & 4) != 0)
  {
    v102 = 0;
    if (*(_BYTE *)(v16 + 29))
      v104 = (v8 & 0x280) == 128;
    else
      v104 = 1;
    if (!v104)
      v15 = ~(-1 << v10);
    goto LABEL_213;
  }
  v127 = v13;
  if ((v8 & 0x80) != 0)
    *(_WORD *)(v16 + 30) = 0;
  v18 = 0;
  v128 = v16;
  v19 = *(_DWORD *)(a1[1] + 104 * *(unsigned __int8 *)(v16 + 16) + 72);
  v125 = v14;
  v20 = ~v14;
  v130 = v19;
  do
  {
    if (((1 << v18) & v15) == 0)
    {
      v21 = &v9[12 * v18];
      v24 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
      v23 = (unsigned __int8 **)(v21 + 4);
      v22 = v24;
      if (v24)
      {
        while (1)
        {
          v25 = *((_DWORD *)v22 + 1);
          if ((v25 & 0x82000) == 0)
            break;
          if ((v25 & 0x80000) != 0)
          {
            v22 = *(unsigned __int8 **)(*((_QWORD *)v22 + 4) + 8);
            if (!v22)
              goto LABEL_20;
          }
          else
          {
            v22 = (unsigned __int8 *)*((_QWORD *)v22 + 2);
            if (!v22)
              goto LABEL_20;
          }
        }
        v26 = *v22;
        if ((v26 == 169 || v26 == 167) && *((_DWORD *)v22 + 11) == v19)
        {
          v27 = *((_DWORD *)v22 + 12);
          v138 = 0;
          v137 = 0u;
          memset(&v136[8], 0, 48);
          v133 = v118;
          v134 = (uint64_t (*)(uint64_t, uint64_t))v118;
          v135 = 0uLL;
          *(_DWORD *)v136 = 0;
          *(_DWORD *)&v136[4] = v122;
          *(_DWORD *)&v136[12] = v19;
          *(_WORD *)&v136[9] = 257;
          if (v27 != -2)
          {
            LOWORD(v137) = v27;
            v28 = sub_1ACC22B44(&v133);
            if (v28)
            {
              v29 = v28;
              v30 = 0;
              do
              {
                v31 = *((_QWORD *)v29 + 5);
                if ((v31 & v20) == 0)
                {
                  if (!v31)
                  {
                    v32 = v29[10];
                    if ((v32 & 0x82) != 0)
                      goto LABEL_50;
                  }
                  if (!v30)
                    v30 = v29;
                }
                v29 = sub_1ACC22B44(&v133);
              }
              while (v29);
              v9 = a2;
              v19 = v130;
              if (!v30)
              {
                v8 = v117;
                goto LABEL_20;
              }
              LODWORD(v32) = v30[10];
              if ((_DWORD)v32 == 1)
              {
                v33 = *(unsigned __int16 *)(v128 + 52);
                if (!*(_WORD *)(v128 + 52))
                {
LABEL_48:
                  v8 = v117;
                  goto LABEL_62;
                }
                v34 = *(unsigned __int16 ***)(v128 + 64);
                while (v30 != *v34)
                {
                  ++v34;
                  if (!--v33)
                    goto LABEL_48;
                }
              }
              v29 = v30;
LABEL_50:
              v8 = v117;
              if ((v32 & 0x82) == 0 || (*((_DWORD *)v22 + 12) & 0x80000000) != 0)
              {
LABEL_60:
                v15 |= 1 << v18;
              }
              else
              {
                v35 = *a1;
                v42 = (_BYTE **)sub_1ACB78620(*a1, *v23, a3, a4, a5, a6, (uint64_t)a7, a8);
                if (!v42)
                  v42 = *(_BYTE ***)(*(_QWORD *)v35 + 16);
                v43 = (unsigned __int8 **)sub_1ACBCCBB0(v35, *(_QWORD *)v29, v36, v37, v38, v39, v40, v41);
                if (v43)
                {
                  v44 = *v42;
                  for (i = *v43; ; ++i)
                  {
                    v46 = *v44;
                    v47 = *i;
                    if ((_DWORD)v46 == (_DWORD)v47)
                    {
                      if (!*v44)
                        goto LABEL_60;
                    }
                    else if (byte_1ACCB6333[v46] != byte_1ACCB6333[v47])
                    {
                      break;
                    }
                    ++v44;
                  }
                }
              }
            }
          }
          v9 = a2;
LABEL_62:
          v19 = v130;
        }
      }
    }
LABEL_20:
    ++v18;
  }
  while (v18 != v10);
  v48 = v128;
  v49 = *(_DWORD *)(v128 + 48);
  if ((v49 & 0x1000) != 0)
    goto LABEL_174;
  if ((v49 & 0x100) != 0)
  {
    v50 = 0;
    v111 = 0;
    v51 = 1;
    v53 = 1;
  }
  else
  {
    v50 = *(_QWORD *)(v128 + 32);
    if (!v50 || (*(_WORD *)(v50 + 99) & 4) != 0)
      goto LABEL_4;
    v51 = *(unsigned __int16 *)(v50 + 96);
    v53 = (v49 & 0x8000) == 0 && *(_BYTE *)(v50 + 98) != 0;
    if (!*(_WORD *)(v50 + 96))
    {
      LOBYTE(v55) = 0;
      goto LABEL_172;
    }
    v111 = *(unsigned __int16 *)(v50 + 94);
  }
  v54 = 0;
  v106 = 0;
  v107 = 0;
  v113 = 0;
  v55 = 0;
  v56 = 8;
  v109 = v51;
  while (1)
  {
    v57 = *(unsigned __int16 *)(v48 + 24);
    if (v54 >= v57 || v54 < *(unsigned __int16 *)(v48 + 54))
      goto LABEL_79;
    v64 = *(_QWORD *)(v48 + 64);
    v65 = *(uint64_t **)(v64 + 8 * v54);
    v66 = *((unsigned __int16 *)v65 + 10);
    if ((v122 & v66) == 0)
      break;
    if ((v66 & 0x180) != 0)
      v53 = 0;
LABEL_164:
    ++v54;
    ++v113;
    v56 += 8;
    if (v54 == v109)
      goto LABEL_172;
  }
  if ((v66 & 1) == 0)
  {
LABEL_79:
    v58 = 1;
    goto LABEL_80;
  }
  v88 = *v65;
  v89 = (v57 - 1);
  v90 = (_QWORD **)(v64 + v56);
  while (1)
  {
    v58 = v54 == v89;
    if (v54 == v89)
      break;
    v59 = 0;
    v91 = *v90++;
    --v89;
    if (*v91 == v88)
      goto LABEL_81;
  }
LABEL_80:
  v59 = 1;
LABEL_81:
  v116 = v55;
  v110 = v56;
  if (v50)
  {
    v60 = *(unsigned __int16 *)(*(_QWORD *)(v50 + 8) + 2 * v54);
    v61 = *(_QWORD *)(v50 + 24);
    if (v60 == *(unsigned __int16 *)(v61 + 52))
      LOWORD(v60) = -1;
    v62 = (__int16)v60;
    v108 = *(_BYTE *)(*(_QWORD *)(v50 + 56) + v54) & 1;
    if (v53)
    {
      if ((__int16)v60 < 0)
      {
        v67 = (__int16)v60 == -2;
      }
      else
      {
        if (v54 < v57)
        {
          v63 = 1;
LABEL_100:
          v114 = v63;
          goto LABEL_101;
        }
        v67 = (*(_BYTE *)(*(_QWORD *)(v61 + 8) + 16 * (__int16)v60 + 8) & 0xF) == 0;
      }
      v63 = !v67;
      goto LABEL_100;
    }
    v114 = 0;
  }
  else
  {
    v62 = -1;
    if (v53)
    {
      v108 = 0;
      v63 = 1;
      goto LABEL_100;
    }
    v108 = 0;
    v114 = 0;
  }
LABEL_101:
  if (!v58)
    goto LABEL_166;
  v68 = 0;
  v123 = v54;
  v69 = v62;
  while (1)
  {
    if (((v15 >> v68) & 1) != 0)
      goto LABEL_104;
    v70 = &a2[12 * v68];
    v73 = (unsigned __int8 *)*((_QWORD *)v70 + 1);
    v72 = (unsigned __int8 **)(v70 + 4);
    v71 = v73;
    if (!v73)
      goto LABEL_104;
    while (1)
    {
      v74 = *((_DWORD *)v71 + 1);
      if ((v74 & 0x82000) == 0)
        break;
      if ((v74 & 0x80000) != 0)
      {
        v71 = *(unsigned __int8 **)(*((_QWORD *)v71 + 4) + 8);
        if (!v71)
          goto LABEL_104;
      }
      else
      {
        v71 = (unsigned __int8 *)*((_QWORD *)v71 + 2);
        if (!v71)
          goto LABEL_104;
      }
    }
    if (!v120)
      v59 = 0;
    if (v62 < -1)
      break;
    v75 = *v71;
    if ((v75 == 169 || v75 == 167) && *((_DWORD *)v71 + 11) == v130 && *((_DWORD *)v71 + 12) == v62)
      goto LABEL_134;
LABEL_104:
    if (v59)
    {
      if (++v68 < (unint64_t)v10)
        continue;
    }
    goto LABEL_166;
  }
  v76 = *(_QWORD *)(*(_QWORD *)(v50 + 80) + 24 * v54 + 8);
  while (1)
  {
    v77 = *((_DWORD *)v71 + 1);
    if ((v77 & 0x82000) == 0)
      break;
    if ((v77 & 0x80000) != 0)
    {
      v71 = *(unsigned __int8 **)(*((_QWORD *)v71 + 4) + 8);
      if (!v71)
        break;
    }
    else
    {
      v71 = (unsigned __int8 *)*((_QWORD *)v71 + 2);
      if (!v71)
        break;
    }
  }
  if (v76)
  {
    while (1)
    {
      v78 = *(_DWORD *)(v76 + 4);
      if ((v78 & 0x82000) == 0)
        break;
      if ((v78 & 0x80000) != 0)
      {
        v76 = *(_QWORD *)(*(_QWORD *)(v76 + 32) + 8);
        if (!v76)
          break;
      }
      else
      {
        v76 = *(_QWORD *)(v76 + 16);
        if (!v76)
          break;
      }
    }
  }
  v79 = sub_1ACC0ABAC(0, v71, (unsigned __int8 *)v76, v130);
  v54 = v123;
  v62 = v69;
  if (v79)
    goto LABEL_104;
LABEL_134:
  if (v62 != -1)
  {
    v80 = *a1;
    v81 = (_BYTE **)sub_1ACB78620(*a1, *v72, a3, a4, a5, a6, (uint64_t)a7, a8);
    if (!v81)
      v81 = *(_BYTE ***)(*(_QWORD *)v80 + 16);
    v82 = *v81;
    v54 = v123;
    v83 = *(unsigned __int8 **)(*(_QWORD *)(v50 + 64) + 8 * v123);
    v48 = v128;
    v62 = v69;
    while (1)
    {
      v84 = *v82;
      v85 = *v83;
      if ((_DWORD)v84 == (_DWORD)v85)
      {
        if (!*v82)
          break;
      }
      else if (byte_1ACCB6333[v84] != byte_1ACCB6333[v85])
      {
        goto LABEL_104;
      }
      ++v82;
      ++v83;
    }
  }
  if ((v117 & 0x80) != 0)
    *(_WORD *)(v48 + 30) = v113 + 1;
  if ((v117 & 0x40) != 0)
  {
    v86 = v68;
    v87 = a2[12 * v68 + 12];
LABEL_158:
    v55 = v116;
    v56 = v110;
    if ((v87 & 2) != 0)
    {
      if (v54 != *(unsigned __int16 *)(v48 + 24))
        goto LABEL_166;
      *(_DWORD *)(v48 + 48) |= 0x80000u;
      v55 = v116;
    }
    if (v62 == -1)
      v55 = 1;
    v15 |= 1 << v86;
    v53 = v114;
    goto LABEL_164;
  }
  if (!v107)
  {
    v86 = v68;
    v87 = a2[12 * v68 + 12];
    v106 = v87 & 1 ^ v108;
    if (v106)
      *a7 |= 1 << v127;
    else
      v106 = 0;
LABEL_157:
    v107 = 1;
    goto LABEL_158;
  }
  v86 = v68;
  v87 = a2[12 * v68 + 12];
  if ((v108 ^ v106) == (v87 & 1))
    goto LABEL_157;
LABEL_166:
  v92 = v54 < v111 || (_DWORD)v54 == 0;
  v53 = v114;
  if (v92)
    v53 = 0;
  LOBYTE(v55) = v116;
LABEL_172:
  if (v55 | v53)
  {
    v9 = a2;
    v8 = v117;
LABEL_174:
    v93 = 0;
    v126 |= *(_QWORD *)(v48 + 8);
    while (2)
    {
      if (((1 << v93) & v15) != 0)
        goto LABEL_182;
      v96 = *(unsigned __int8 **)&v9[12 * v93 + 4];
      if (v96)
      {
        if (*v96 == 167 && (*((_DWORD *)v96 + 1) & 0x20) == 0)
        {
          v98 = *((_DWORD *)v96 + 11);
          if (*((_DWORD *)a1 + 150) == v98)
          {
            v94 = 1;
          }
          else
          {
            v99 = *((unsigned int *)a1 + 149);
            if ((int)v99 < 2)
              goto LABEL_176;
            v100 = 0;
            v101 = v99 - 1;
            while (*(_DWORD *)&v132[4 * v100] != v98)
            {
              if (v101 == ++v100)
                goto LABEL_176;
            }
            v94 = 1 << (v100 + 1);
          }
        }
        else if ((*((_DWORD *)v96 + 1) & 0x810000) != 0 || (v94 = sub_1ACC220D4(v119, v96)) == 0)
        {
LABEL_176:
          v135 = 0u;
          *(_OWORD *)v136 = 0u;
          v133 = 0;
          *(_WORD *)&v136[4] = 1;
          v134 = sub_1ACB8B0F4;
          *(_QWORD *)&v135 = sub_1ACC0B708;
          sub_1ACC0B714((uint64_t)&v133, (uint64_t)v96);
          if (*(_WORD *)&v136[4])
            goto LABEL_177;
LABEL_182:
          if (++v93 == v10)
          {
            v14 = v125;
            v13 = v127;
            v16 = v128;
            v17 = v112;
            goto LABEL_201;
          }
          continue;
        }
      }
      else
      {
LABEL_177:
        v94 = 0;
      }
      break;
    }
    if ((v94 & ~v126) != 0)
      v95 = 0;
    else
      v95 = 1 << v93;
    v15 |= v95;
    goto LABEL_182;
  }
  v102 = 1;
LABEL_213:
  if (v15 != v121)
  {
    if (v102)
    {
      while (v10 >= 2)
      {
        if ((~v15 & ~(-1 << --v10)) == 0)
          return (char)v10;
      }
LABEL_4:
      LOBYTE(v10) = 0;
    }
    else
    {
      LOBYTE(v10) = -1;
    }
  }
  return (char)v10;
}

_QWORD *sub_1ACC277FC(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = *(_QWORD *)(a2 + 96);
  if (v2)
  {
    v4 = result;
    do
    {
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(v2 + 24);
      if (*(_QWORD *)v2)
        sub_1ACBF8348(v4, *(unsigned __int8 **)v2);
      result = sub_1ACBE0F9C(v4, (_QWORD *)v2);
      v2 = *(_QWORD *)(a2 + 96);
    }
    while (v2);
  }
  return result;
}

uint64_t sub_1ACC27860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = *(_QWORD *)(a2 + 24);
  v5 = sub_1ACB5D828(*(unsigned __int16 *)(a2 + 96) + 1);
  *(_QWORD *)(a2 + 32) = v5;
  if (v5)
  {
    if (*(_WORD *)(a2 + 96))
    {
      v12 = 0;
      v13 = 8;
      do
      {
        v16 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * v12);
        if (*(__int16 *)(*(_QWORD *)(a2 + 8) + 2 * v12) < 0)
        {
          if ((_DWORD)v16 == 0xFFFF)
            v14 = 68;
          else
            v14 = sub_1ACB92644(*(unsigned __int8 **)(*(_QWORD *)(a2 + 80) + v13));
        }
        else
        {
          v14 = *(_BYTE *)(*(_QWORD *)(v4 + 8) + 16 * v16 + 9);
        }
        v15 = v14;
        if (v14 <= 65)
          v15 = 65;
        if (v15 >= 0x43)
          LOBYTE(v15) = 67;
        *(_BYTE *)(*(_QWORD *)(a2 + 32) + v12++) = v15;
        v13 += 24;
      }
      while (v12 < *(unsigned __int16 *)(a2 + 96));
      v5 = *(_QWORD *)(a2 + 32);
    }
    else
    {
      v12 = 0;
    }
    *(_BYTE *)(v5 + v12) = 0;
    return *(_QWORD *)(a2 + 32);
  }
  if (*(_BYTE *)(a1 + 103) || *(_BYTE *)(a1 + 104))
    return 0;
  *(_BYTE *)(a1 + 103) = 1;
  if (*(int *)(a1 + 220) >= 1)
    *(_DWORD *)(a1 + 424) = 1;
  ++*(_DWORD *)(a1 + 432);
  *(_WORD *)(a1 + 436) = 0;
  result = *(_QWORD *)(a1 + 344);
  if (result)
  {
    sub_1ACBCB308(result, "out of memory", v6, v7, v8, v9, v10, v11, v20);
    v18 = *(_QWORD *)(a1 + 344);
    *(_DWORD *)(v18 + 24) = 7;
    v19 = *(_QWORD *)(v18 + 256);
    if (v19)
    {
      result = 0;
      do
      {
        ++*(_DWORD *)(v19 + 48);
        *(_DWORD *)(v19 + 24) = 7;
        v19 = *(_QWORD *)(v19 + 256);
      }
      while (v19);
      return result;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1ACC279D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unsigned int v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void *v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(unsigned __int8 *)(a3 + 64);
  v7 = (const void *)(v5 + 104 * *(unsigned __int8 *)(a3 + 64) + 8);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)a1;
  v25 = 0x10000000000;
  v22 = v9;
  v23 = &v26;
  v24 = 0x7FFFFFFD00000064;
  sqlite3_str_appendf((sqlite3_str *)&v22, "BLOOM FILTER ON %S (", v7);
  v11 = *(_QWORD *)(a3 + 96);
  if ((*(_BYTE *)(v11 + 49) & 1) != 0)
  {
    if (*(__int16 *)(*(_QWORD *)(v5 + 104 * v6 + 40) + 52) < 0)
      sqlite3_str_appendf((sqlite3_str *)&v22, "rowid=?");
    else
      sqlite3_str_appendf((sqlite3_str *)&v22, "%s=?");
  }
  else
  {
    v12 = *(unsigned __int16 *)(v11 + 54);
    if (v12 < *(unsigned __int16 *)(v11 + 24))
    {
      do
      {
        v14 = *(_QWORD *)(v11 + 32);
        v15 = *(unsigned __int16 *)(*(_QWORD *)(v14 + 8) + 2 * v12);
        if (v15 == 65534)
        {
          v16 = "<expr>";
        }
        else if (v15 == 0xFFFF)
        {
          v16 = "rowid";
        }
        else
        {
          v16 = *(const char **)(*(_QWORD *)(*(_QWORD *)(v14 + 24) + 8) + 16 * (__int16)v15);
        }
        if (v12 > *(unsigned __int16 *)(v11 + 54))
        {
          v17 = v25;
          if ((int)v25 + 5 < v24)
          {
            LODWORD(v25) = v25 + 5;
            v13 = &v23[v17];
            v13[4] = 32;
            *(_DWORD *)v13 = 1145979168;
          }
          else
          {
            sub_1ACBC290C((uint64_t)&v22, " AND ", 5u);
          }
        }
        sqlite3_str_appendf((sqlite3_str *)&v22, "%s=?", v16);
        ++v12;
      }
      while (v12 < *(unsigned __int16 *)(v11 + 24));
    }
  }
  v18 = v25;
  if ((int)v25 + 1 >= v24)
  {
    sub_1ACBC290C((uint64_t)&v22, ")", 1u);
    v19 = v23;
    if (!v23)
    {
LABEL_24:
      v20 = v23;
      goto LABEL_25;
    }
  }
  else
  {
    LODWORD(v25) = v25 + 1;
    v23[v18] = 41;
    v19 = v23;
    if (!v23)
      goto LABEL_24;
  }
  v19[v25] = 0;
  if (!HIDWORD(v24) || (v25 & 0x40000000000) != 0)
    goto LABEL_24;
  v20 = sub_1ACBE13A0(&v22);
LABEL_25:
  sub_1ACBA86CC((uint64_t *)v8, 185, *(unsigned int *)(v8 + 144), *(unsigned int *)(a1 + 312), 0, (uint64_t)v20, 4294967290, v10);
  return sub_1ACC0C07C(v8, *(_DWORD *)(v8 + 144) - 1, 0, 0, 0, 0);
}

void sub_1ACC27C90(sqlite3_str *a1, uint64_t a2, int a3, int a4, int a5, _BYTE *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  _DWORD *v24;
  _DWORD *v25;
  _QWORD *v26;
  char v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v36;

  if (a5)
  {
    if (!a1)
    {
      sub_1ACBBE20C(32732);
      if (a3 <= 1)
        goto LABEL_13;
LABEL_19:
      sub_1ACBBE20C(32732);
      v13 = 1;
      goto LABEL_23;
    }
    v10 = *((unsigned int *)a1 + 6);
    if ((v10 + 5) >= *((_DWORD *)a1 + 4))
    {
      sub_1ACBC290C((uint64_t)a1, " AND ", 5u);
      if (a3 <= 1)
        goto LABEL_13;
      goto LABEL_10;
    }
    *((_DWORD *)a1 + 6) = v10 + 5;
    v11 = *((_QWORD *)a1 + 1) + v10;
    *(_BYTE *)(v11 + 4) = 32;
    *(_DWORD *)v11 = 1145979168;
  }
  if (a3 > 1)
  {
LABEL_10:
    if (a1)
    {
      v12 = *((unsigned int *)a1 + 6);
      if ((v12 + 1) >= *((_DWORD *)a1 + 4))
      {
        v13 = 1;
        sub_1ACBC290C((uint64_t)a1, "(", 1u);
      }
      else
      {
        *((_DWORD *)a1 + 6) = v12 + 1;
        *(_BYTE *)(*((_QWORD *)a1 + 1) + v12) = 40;
        v13 = 1;
      }
LABEL_23:
      v16 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * a4);
      if (v16 == 65534)
      {
        v17 = "<expr>";
      }
      else if (v16 == 0xFFFF)
      {
        v17 = "rowid";
      }
      else
      {
        v17 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16 * (__int16)v16);
      }
      sqlite3_str_appendall(a1, v17);
      if (a3 != 1)
      {
        v19 = 2 * a4 + 2;
        v20 = a3 - 1;
        do
        {
          if (a1)
          {
            v22 = *((unsigned int *)a1 + 6);
            if ((v22 + 1) >= *((_DWORD *)a1 + 4))
            {
              sub_1ACBC290C((uint64_t)a1, ",", 1u);
            }
            else
            {
              *((_DWORD *)a1 + 6) = v22 + 1;
              *(_BYTE *)(*((_QWORD *)a1 + 1) + v22) = 44;
            }
          }
          else
          {
            sub_1ACBBE20C(32732);
          }
          v23 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + v19);
          if (v23 == 65534)
          {
            v21 = "<expr>";
          }
          else if (v23 == 0xFFFF)
          {
            v21 = "rowid";
          }
          else
          {
            v21 = *(const char **)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16 * (__int16)v23);
          }
          sqlite3_str_appendall(a1, v21);
          v19 += 2;
          --v20;
        }
        while (v20);
      }
      if (v13)
      {
        if (a1)
        {
          v18 = *((unsigned int *)a1 + 6);
          if ((v18 + 1) >= *((_DWORD *)a1 + 4))
          {
            sub_1ACBC290C((uint64_t)a1, ")", 1u);
          }
          else
          {
            *((_DWORD *)a1 + 6) = v18 + 1;
            *(_BYTE *)(*((_QWORD *)a1 + 1) + v18) = 41;
          }
          if (a6)
          {
            v29 = *((unsigned int *)a1 + 6);
            if ((v29 + 1) >= *((_DWORD *)a1 + 4))
            {
              sub_1ACBC290C((uint64_t)a1, a6, 1u);
            }
            else
            {
              *((_DWORD *)a1 + 6) = v29 + 1;
              *(_BYTE *)(*((_QWORD *)a1 + 1) + v29) = *a6;
            }
          }
          else
          {
            sub_1ACBBE20C(32736);
          }
          v30 = *((unsigned int *)a1 + 6);
          if ((v30 + 1) >= *((_DWORD *)a1 + 4))
          {
            v36 = 1;
            sub_1ACBC290C((uint64_t)a1, "(", 1u);
          }
          else
          {
            *((_DWORD *)a1 + 6) = v30 + 1;
            *(_BYTE *)(*((_QWORD *)a1 + 1) + v30) = 40;
            v36 = 1;
          }
          goto LABEL_62;
        }
        sub_1ACBBE20C(32732);
        sub_1ACBBE20C(32732);
        sub_1ACBBE20C(32732);
        v36 = 1;
LABEL_49:
        v24 = (_DWORD *)((char *)a1 + 24);
        v25 = (_DWORD *)((char *)a1 + 16);
        v26 = (_QWORD *)((char *)a1 + 8);
        sub_1ACBBE20C(32732);
        v27 = 1;
        v28 = a3 - 1;
        if (a3 == 1)
          goto LABEL_66;
        goto LABEL_74;
      }
      v14 = 1;
      if (a1)
        goto LABEL_15;
LABEL_46:
      sub_1ACBBE20C(32732);
      if ((v14 & 1) == 0)
        return;
      v36 = 0;
      goto LABEL_49;
    }
    goto LABEL_19;
  }
LABEL_13:
  v13 = 0;
  v14 = 0;
  if (a3 >= 1)
    goto LABEL_23;
  if (!a1)
    goto LABEL_46;
LABEL_15:
  if (a6)
  {
    v15 = *((unsigned int *)a1 + 6);
    if ((v15 + 1) >= *((_DWORD *)a1 + 4))
    {
      sub_1ACBC290C((uint64_t)a1, a6, 1u);
      if ((v14 & 1) == 0)
        return;
    }
    else
    {
      *((_DWORD *)a1 + 6) = v15 + 1;
      *(_BYTE *)(*((_QWORD *)a1 + 1) + v15) = *a6;
      if ((v14 & 1) == 0)
        return;
    }
  }
  else
  {
    sub_1ACBBE20C(32736);
    if ((v14 & 1) == 0)
      return;
  }
  v36 = 0;
LABEL_62:
  v24 = (_DWORD *)((char *)a1 + 24);
  v31 = *((unsigned int *)a1 + 6);
  v26 = (_QWORD *)((char *)a1 + 8);
  v25 = (_DWORD *)((char *)a1 + 16);
  if ((v31 + 1) >= *((_DWORD *)a1 + 4))
  {
    sub_1ACBC290C((uint64_t)a1, "?", 1u);
    v27 = 0;
    v28 = a3 - 1;
    if (a3 == 1)
      goto LABEL_66;
    do
    {
LABEL_74:
      if ((v27 & 1) != 0)
      {
        sub_1ACBBE20C(32732);
        sub_1ACBBE20C(32732);
      }
      else
      {
        v33 = *v24;
        if ((v33 + 1) >= *v25)
        {
          sub_1ACBC290C((uint64_t)a1, ",", 1u);
        }
        else
        {
          *v24 = v33 + 1;
          *(_BYTE *)(*v26 + v33) = 44;
        }
        v34 = *v24;
        if ((v34 + 1) >= *v25)
        {
          sub_1ACBC290C((uint64_t)a1, "?", 1u);
        }
        else
        {
          *v24 = v34 + 1;
          *(_BYTE *)(*v26 + v34) = 63;
        }
      }
      --v28;
    }
    while (v28);
    goto LABEL_66;
  }
  v27 = 0;
  *v24 = v31 + 1;
  *(_BYTE *)(*v26 + v31) = 63;
  v28 = a3 - 1;
  if (a3 != 1)
    goto LABEL_74;
LABEL_66:
  if (v36)
  {
    if (a1)
    {
      v32 = *((unsigned int *)a1 + 6);
      if ((v32 + 1) >= *((_DWORD *)a1 + 4))
      {
        sub_1ACBC290C((uint64_t)a1, ")", 1u);
      }
      else
      {
        *((_DWORD *)a1 + 6) = v32 + 1;
        *(_BYTE *)(*((_QWORD *)a1 + 1) + v32) = 41;
      }
    }
    else
    {
      sub_1ACBBE20C(32732);
    }
  }
}

uint64_t sub_1ACC2822C(uint64_t result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  int **v12;
  uint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v8 = a3;
  v9 = result;
  if (!a2)
    return sub_1ACC08D80(result, a2, a3);
  v10 = a4;
  v11 = *a2;
  if (v11 == 176)
    v11 = a2[2];
  if (v11 == 138)
  {
    v12 = (int **)(*((_QWORD *)a2 + 4) + 32);
  }
  else
  {
    if (v11 != 177)
      return sub_1ACC08D80(result, a2, a3);
    v12 = (int **)(a2 + 32);
  }
  if (**v12 < 2)
    return sub_1ACC08D80(result, a2, a3);
  if ((a2[5] & 0x10) != 0)
  {
    v16 = *(_QWORD *)(result + 16);
    result = sub_1ACBA2944((_QWORD **)result, a2, a3, a4, a5, a6, a7, a8);
    v20 = (v10 - 1);
    v21 = *(_DWORD *)(v16 + 144);
    if (*(_DWORD *)(v16 + 148) <= v21)
    {
      return sub_1ACBFF5AC(v16, 80, result, v8, v20, v17, v18, v19);
    }
    else
    {
      *(_DWORD *)(v16 + 144) = v21 + 1;
      v22 = *(_QWORD *)(v16 + 136) + 40 * v21;
      *(_DWORD *)v22 = 80;
      *(_DWORD *)(v22 + 4) = result;
      *(_DWORD *)(v22 + 8) = v8;
      *(_DWORD *)(v22 + 12) = v20;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = 0;
    }
  }
  else if ((int)a4 >= 1)
  {
    v13 = a4;
    v14 = (unsigned __int8 **)(*((_QWORD *)a2 + 4) + 8);
    do
    {
      v15 = *v14;
      v14 += 3;
      result = sub_1ACC08D80(v9, v15, v8);
      v8 = (v8 + 1);
      --v13;
    }
    while (v13);
  }
  return result;
}

uint64_t sub_1ACC28358(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  char *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unsigned __int8 **v28;
  unsigned __int8 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  _QWORD *v45;

  v8 = *(unsigned __int8 *)(a2 + 64);
  if (a3 + 1 < (int)v8)
  {
    v10 = a4;
    v12 = (_QWORD **)result;
    v13 = a3 + 1;
    v44 = a4;
    do
    {
      v15 = a2 + 120 * v13;
      if (!*(_DWORD *)(v15 + 908))
        goto LABEL_6;
      v16 = *(_QWORD *)(v15 + 952);
      if (*(_WORD *)(v16 + 54) || (*(_QWORD *)v16 & a5) != 0)
        goto LABEL_6;
      v17 = (_DWORD *)(v15 + 908);
      v18 = a2 + 120 * v13;
      *(_DWORD *)(v18 + 868) = v10;
      if ((*(_BYTE *)(v16 + 49) & 1) != 0)
      {
        v28 = **(unsigned __int8 ****)(v16 + 64);
        if (*((_BYTE *)v12 + 31))
        {
          v29 = *((_BYTE *)v12 + 31) - 1;
          *((_BYTE *)v12 + 31) = v29;
          v30 = *((unsigned int *)v12 + v29 + 56);
        }
        else
        {
          v30 = (*((_DWORD *)v12 + 14) + 1);
          *((_DWORD *)v12 + 14) = v30;
        }
        v32 = sub_1ACB92834((uint64_t *)v12, v28, (int *)(v15 + 856), 0, 0, v30, a7, a8);
        v33 = (uint64_t)v12[2];
        v34 = *(_DWORD *)(v33 + 144);
        if (*(_DWORD *)(v33 + 148) <= v34)
        {
          sub_1ACBFF5AC(v33, 13, v32, v10, 0, v31, a7, a8);
        }
        else
        {
          *(_DWORD *)(v33 + 144) = v34 + 1;
          v35 = *(_QWORD *)(v33 + 136) + 40 * v34;
          *(_DWORD *)v35 = 13;
          *(_DWORD *)(v35 + 4) = v32;
          *(_DWORD *)(v35 + 8) = v10;
          *(_QWORD *)(v35 + 12) = 0;
          *(_QWORD *)(v35 + 28) = 0;
          *(_QWORD *)(v35 + 20) = 0;
          *(_DWORD *)(v35 + 36) = 0;
        }
        result = (uint64_t)v12[2];
        v36 = *v17;
        v37 = *(_DWORD *)(result + 144);
        if (*(_DWORD *)(result + 148) <= v37)
        {
          result = sub_1ACBFF7F0(result, 64, v36, v10, v32, 1, a7, a8);
          goto LABEL_5;
        }
        *(_DWORD *)(result + 144) = v37 + 1;
        v14 = *(_QWORD *)(result + 136) + 40 * v37;
        *(_DWORD *)v14 = 64832;
        *(_DWORD *)(v14 + 4) = v36;
        *(_DWORD *)(v14 + 8) = v10;
        *(_DWORD *)(v14 + 12) = v32;
        *(_DWORD *)(v14 + 16) = 1;
      }
      else
      {
        v19 = *(unsigned __int16 *)(v16 + 24);
        v45 = 0;
        v20 = sub_1ACC28654((uint64_t)v12, v15 + 856, 0, 0, &v45);
        v21 = v45;
        result = (uint64_t)v12[2];
        if (v45)
        {
          if ((_DWORD)v19)
          {
            v22 = (v20 + v19);
            v23 = (char *)v45;
            v24 = v19;
            v25 = v20;
            v26 = (uint64_t)v45 + v19;
            while (*v23 <= 65)
            {
              v25 = (v25 + 1);
              ++v23;
              v27 = __OFSUB__(v24--, 1);
              if ((v24 < 0) ^ v27 | (v24 == 0))
              {
                v24 = 0;
                goto LABEL_29;
              }
            }
            v22 = v25;
            v26 = (uint64_t)v23;
          }
          else
          {
            v24 = 0;
            v22 = v20;
            v26 = (uint64_t)v45;
          }
LABEL_29:
          v38 = v24 - 1;
          v39 = v24;
          while (1)
          {
            v27 = __OFSUB__(v39--, 1);
            if ((v39 < 0) ^ v27 | (v39 == 0))
              break;
            v40 = *(char *)(v26 + v38--);
            if (v40 >= 66)
            {
              v41 = (v39 + 1);
              goto LABEL_35;
            }
          }
          if (v24 < 1)
            goto LABEL_36;
          v41 = 1;
LABEL_35:
          sub_1ACBA86CC((uint64_t *)result, 96, v22, v41, 0, v26, v41, a8);
LABEL_36:
          sub_1ACBE0F9C(*v12, v21);
          result = (uint64_t)v12[2];
        }
        v42 = *v17;
        v43 = *(_DWORD *)(result + 144);
        v10 = v44;
        if (*(_DWORD *)(result + 148) <= v43)
        {
          result = sub_1ACBFF7F0(result, 64, v42, v44, v20, v19, a7, a8);
          goto LABEL_5;
        }
        *(_DWORD *)(result + 144) = v43 + 1;
        v14 = *(_QWORD *)(result + 136) + 40 * v43;
        *(_DWORD *)v14 = 64832;
        *(_DWORD *)(v14 + 4) = v42;
        *(_DWORD *)(v14 + 8) = v44;
        *(_DWORD *)(v14 + 12) = v20;
        *(_DWORD *)(v14 + 16) = v19;
      }
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
LABEL_5:
      *v17 = 0;
      *(_DWORD *)(v18 + 868) = 0;
      v8 = *(unsigned __int8 *)(a2 + 64);
LABEL_6:
      ++v13;
    }
    while (v13 < v8);
  }
  return result;
}

uint64_t sub_1ACC28654(uint64_t a1, uint64_t a2, unsigned int a3, int a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  unsigned __int8 *v43;
  unsigned __int8 *i;
  int v45;
  uint64_t v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  int v58;
  int v60;
  int v61;
  int v62;
  int v67;
  char *v68;
  uint64_t v69;

  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(unsigned __int16 *)(v8 + 54);
  v10 = *(_QWORD *)(v8 + 32);
  v11 = *(_DWORD *)(a1 + 56);
  v12 = (v11 + 1);
  v69 = *(unsigned __int16 *)(v8 + 24);
  v67 = v69 + a4;
  *(_DWORD *)(a1 + 56) = v11 + v69 + a4;
  v13 = *(_QWORD *)a1;
  v14 = *(const char **)(v10 + 32);
  if (v14 || (v14 = (const char *)sub_1ACC27860(v13, v10)) != 0)
  {
    v18 = strlen(v14);
    v19 = v18 + 1;
    if (v13)
    {
      v20 = (char *)sub_1ACBE1124(v13, v19);
      if (v20)
        goto LABEL_5;
    }
    else
    {
      v20 = (char *)sub_1ACB5D828(v18 + 1);
      if (v20)
      {
LABEL_5:
        v68 = v20;
        memcpy(v20, v14, v19);
        if (!(_DWORD)v9)
          goto LABEL_35;
        goto LABEL_9;
      }
    }
  }
  v68 = 0;
  if (!(_DWORD)v9)
    goto LABEL_35;
LABEL_9:
  v21 = *(unsigned int *)(a2 + 8);
  v22 = (v11 + v9);
  v23 = *(_DWORD *)(v7 + 144);
  if (*(_DWORD *)(v7 + 148) <= v23)
  {
    sub_1ACBFF5AC(v7, 75, 0, (v11 + 1), v22, v15, v16, v17);
  }
  else
  {
    *(_DWORD *)(v7 + 144) = v23 + 1;
    v24 = *(_QWORD *)(v7 + 136) + 40 * v23;
    *(_QWORD *)v24 = 75;
    *(_DWORD *)(v24 + 8) = v12;
    *(_DWORD *)(v24 + 12) = v22;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 16) = 0;
  }
  if (a3)
    v25 = 32;
  else
    v25 = 36;
  v26 = *(_DWORD *)(v7 + 144);
  if (*(_DWORD *)(v7 + 148) <= v26)
  {
    sub_1ACBFF5AC(v7, v25, v21, 0, 0, v15, v16, v17);
  }
  else
  {
    *(_DWORD *)(v7 + 144) = v26 + 1;
    v27 = *(_QWORD *)(v7 + 136) + 40 * v26;
    *(_BYTE *)v27 = v25;
    *(_WORD *)(v27 + 2) = 0;
    *(_DWORD *)(v27 + 4) = v21;
    *(_BYTE *)(v27 + 1) = 0;
    *(_OWORD *)(v27 + 8) = 0u;
    *(_OWORD *)(v27 + 24) = 0u;
  }
  v28 = *(_DWORD *)(v7 + 144);
  if (*(_DWORD *)(v7 + 148) <= v28)
  {
    v28 = sub_1ACBFF5AC(v7, 9, 0, 0, 0, v15, v16, v17);
  }
  else
  {
    *(_DWORD *)(v7 + 144) = v28 + 1;
    v29 = *(_QWORD *)(v7 + 136) + 40 * v28;
    *(_BYTE *)v29 = 9;
    *(_OWORD *)(v29 + 1) = 0u;
    *(_OWORD *)(v29 + 17) = 0u;
    *(_QWORD *)(v29 + 32) = 0;
  }
  if (a3)
    v30 = 21;
  else
    v30 = 24;
  v31 = *(_DWORD *)(v7 + 144);
  if (*(_DWORD *)(v7 + 148) <= v31)
  {
    v31 = sub_1ACBFF7F0(v7, v30, v21, 0, v12, v9, v16, v17);
  }
  else
  {
    *(_DWORD *)(v7 + 144) = v31 + 1;
    v32 = *(_QWORD *)(v7 + 136) + 40 * v31;
    *(_BYTE *)v32 = v30;
    *(_WORD *)(v32 + 2) = 0;
    *(_DWORD *)(v32 + 4) = v21;
    *(_DWORD *)(v32 + 8) = 0;
    *(_DWORD *)(v32 + 12) = v12;
    *(_DWORD *)(v32 + 16) = v9;
    *(_BYTE *)(v32 + 1) = -3;
    *(_QWORD *)(v32 + 24) = 0;
    *(_QWORD *)(v32 + 32) = 0;
  }
  *(_DWORD *)(a2 + 20) = v31;
  if (*(_BYTE *)(*(_QWORD *)v7 + 103))
    v33 = &byte_1EECAD280;
  else
    v33 = (char *)(*(_QWORD *)(v7 + 136) + 40 * v28);
  v34 = 0;
  *((_DWORD *)v33 + 2) = *(_DWORD *)(v7 + 144);
  do
  {
    v36 = (v12 + v34);
    v37 = *(_DWORD *)(v7 + 144);
    if (*(_DWORD *)(v7 + 148) > v37)
    {
      *(_DWORD *)(v7 + 144) = v37 + 1;
      v35 = *(_QWORD *)(v7 + 136) + 40 * v37;
      *(_DWORD *)v35 = 94;
      *(_DWORD *)(v35 + 4) = v21;
      *(_DWORD *)(v35 + 8) = v34;
      *(_DWORD *)(v35 + 12) = v36;
      *(_QWORD *)(v35 + 24) = 0;
      *(_QWORD *)(v35 + 32) = 0;
      *(_QWORD *)(v35 + 16) = 0;
    }
    else
    {
      sub_1ACBFF5AC(v7, 94, v21, v34, v36, v15, v16, v17);
    }
    v34 = (v34 + 1);
  }
  while ((_DWORD)v9 != (_DWORD)v34);
LABEL_35:
  if (v9 < v69)
  {
    do
    {
      v39 = *(_QWORD *)(*(_QWORD *)(v8 + 64) + 8 * v9);
      v40 = sub_1ACB92834((uint64_t *)a1, (unsigned __int8 **)v39, (int *)a2, v9, a3, (v12 + v9), v16, v17);
      if ((_DWORD)v40 == (_DWORD)v12 + (_DWORD)v9)
      {
        v42 = *(_WORD *)(v39 + 20);
        if ((v42 & 1) != 0)
          goto LABEL_52;
      }
      else if (v67 == 1)
      {
        if ((_DWORD)v12)
        {
          v46 = *(unsigned __int8 *)(a1 + 31);
          if (v46 <= 7)
          {
            *(_BYTE *)(a1 + 31) = v46 + 1;
            *(_DWORD *)(a1 + 4 * v46 + 224) = v12;
          }
          v12 = v40;
          v42 = *(_WORD *)(v39 + 20);
          if ((v42 & 1) != 0)
          {
LABEL_52:
            if (!v68 || (*(_DWORD *)(*(_QWORD *)v39 + 4) & 0x1000) == 0)
              goto LABEL_39;
            v47 = &v68[v9];
            goto LABEL_38;
          }
        }
        else
        {
          v12 = v40;
          v42 = *(_WORD *)(v39 + 20);
          if ((v42 & 1) != 0)
            goto LABEL_52;
        }
      }
      else
      {
        v48 = *(_DWORD *)(v7 + 144);
        if (*(_DWORD *)(v7 + 148) <= v48)
        {
          sub_1ACBFF5AC(v7, 80, v40, (v12 + v9), 0, v41, v16, v17);
          v42 = *(_WORD *)(v39 + 20);
          if ((v42 & 1) != 0)
            goto LABEL_52;
        }
        else
        {
          *(_DWORD *)(v7 + 144) = v48 + 1;
          v49 = *(_QWORD *)(v7 + 136) + 40 * v48;
          *(_DWORD *)v49 = 80;
          *(_DWORD *)(v49 + 4) = v40;
          *(_DWORD *)(v49 + 8) = v12 + v9;
          *(_QWORD *)(v49 + 12) = 0;
          *(_QWORD *)(v49 + 28) = 0;
          *(_QWORD *)(v49 + 20) = 0;
          *(_DWORD *)(v49 + 36) = 0;
          v42 = *(_WORD *)(v39 + 20);
          if ((v42 & 1) != 0)
            goto LABEL_52;
        }
      }
      if ((v42 & 0x100) != 0)
        goto LABEL_39;
      v43 = *(unsigned __int8 **)(*(_QWORD *)v39 + 24);
      if ((*(_WORD *)(v39 + 18) & 0x800) == 0)
      {
        for (i = *(unsigned __int8 **)(*(_QWORD *)v39 + 24); ; i = (unsigned __int8 *)*((_QWORD *)i + 2))
        {
          v45 = *i;
          if ((v45 - 173) >= 2)
            break;
        }
        if (v45 == 176)
          v45 = i[2];
        if ((v45 - 153) >= 3 && v45 != 117)
        {
          if (v45 != 167
            || (i[6] & 0x20) != 0
            || (v50 = *((_QWORD *)i + 9)) == 0
            || (v51 = *((unsigned int *)i + 12), (v51 & 0x80000000) == 0)
            && (v52 = *(_QWORD *)(v50 + 8)) != 0
            && (*(_BYTE *)(v52 + 16 * v51 + 8) & 0xF) == 0)
          {
            v53 = (v12 + v9);
            v54 = *(unsigned int *)(a2 + 12);
            v55 = *(_DWORD *)(v7 + 144);
            if (*(_DWORD *)(v7 + 148) <= v55)
            {
              sub_1ACBFF5AC(v7, 50, v53, v54, 0, v41, v16, v17);
              if (*(_DWORD *)(a1 + 48))
                goto LABEL_39;
              goto LABEL_71;
            }
            *(_DWORD *)(v7 + 144) = v55 + 1;
            v56 = *(_QWORD *)(v7 + 136) + 40 * v55;
            *(_DWORD *)v56 = 50;
            *(_DWORD *)(v56 + 4) = v53;
            *(_DWORD *)(v56 + 8) = v54;
            *(_QWORD *)(v56 + 12) = 0;
            *(_QWORD *)(v56 + 28) = 0;
            *(_QWORD *)(v56 + 20) = 0;
            *(_DWORD *)(v56 + 36) = 0;
          }
        }
      }
      if (*(_DWORD *)(a1 + 48))
        goto LABEL_39;
LABEL_71:
      v47 = &v68[v9];
      v57 = v68[v9];
      v58 = sub_1ACB92644(v43);
      if (v57 < 65 || v58 < 65)
      {
        if (v58 >= 65)
          v60 = v58;
        else
          v60 = v57;
        if ((v60 & 0xFFFFFFBF) != 1)
        {
LABEL_86:
          if (v57 != 65)
          {
            v61 = 0;
            while (1)
            {
              v62 = *v43;
              if ((v62 - 173) >= 2)
                break;
              if (v62 == 173)
                v61 = 1;
              v43 = (unsigned __int8 *)*((_QWORD *)v43 + 2);
            }
            if (v62 == 176)
              v62 = v43[2];
            switch(v62)
            {
              case 153:
              case 155:
                if (v57 > 66)
                  goto LABEL_38;
                break;
              case 154:
                if (!v61)
                  goto LABEL_38;
                break;
              case 156:
              case 157:
              case 158:
              case 159:
              case 160:
              case 161:
              case 162:
              case 163:
              case 164:
              case 165:
              case 166:
                goto LABEL_39;
              case 167:
                if (v57 >= 67 && *((int *)v43 + 12) < 0)
                  goto LABEL_38;
                break;
              default:
                if (v62 == 117 && v57 == 66 && v61 == 0)
                  goto LABEL_38;
                break;
            }
            goto LABEL_39;
          }
        }
      }
      else if (v58 >= 0x43 || v57 >= 0x43)
      {
        goto LABEL_86;
      }
LABEL_38:
      *v47 = 65;
LABEL_39:
      ++v9;
    }
    while (v9 != v69);
  }
  *a5 = v68;
  return v12;
}

uint64_t sub_1ACC28C94(uint64_t result, uint64_t a2, uint64_t a3)
{
  char *v3;
  unsigned int v4;

  if ((*(_WORD *)(a3 + 18) & 0x100) != 0)
  {
    if (*(_BYTE *)(*(_QWORD *)result + 103))
      v3 = &byte_1EECAD280;
    else
      v3 = (char *)(*(_QWORD *)(result + 136) + 40 * *(int *)(result + 144) - 40);
    v4 = *(_DWORD *)(a2 + 44);
    *((_DWORD *)v3 + 3) = v4 >> 1;
    *((_WORD *)v3 + 1) = v4 & 1;
  }
  return result;
}

uint64_t sub_1ACC28CE0(uint64_t result, int a2, uint64_t a3)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int **v6;
  uint64_t v7;
  int v8;
  int v9;
  int **v10;
  unsigned __int8 *v11;
  int **v12;
  int v13;
  BOOL v15;
  int v16;
  int v17;
  int v18;

  if (a2 >= 1)
  {
    v4 = (unsigned __int8 *)result;
    v5 = 0;
    v6 = (int **)(result + 32);
    v7 = a2;
    do
    {
      v8 = *v4;
      v9 = v8;
      if (v8 == 176)
        v9 = v4[2];
      v10 = v6;
      if (v9 != 177)
      {
        v11 = v4;
        if (v9 != 138)
          goto LABEL_15;
        v10 = (int **)(*v6 + 8);
      }
      v11 = v4;
      if (**v10 >= 2)
      {
        if (v8 == 138 || (v12 = v6, v4[2] == 138))
          v12 = (int **)(*v6 + 8);
        v11 = *(unsigned __int8 **)&(*v12)[6 * v5 + 2];
      }
LABEL_15:
      v13 = *(char *)(a3 + v5);
      result = sub_1ACB92644(v11);
      if (v13 < 65 || (int)result < 65)
      {
        if ((int)result >= 65)
          v16 = result;
        else
          v16 = v13;
        if ((v16 & 0xFFFFFFBF) != 1 && v13 != 65)
        {
LABEL_31:
          v17 = 0;
          while (1)
          {
            v18 = *v11;
            if ((v18 - 173) >= 2)
              break;
            if (v18 == 173)
              v17 = 1;
            v11 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
          }
          if (v18 == 176)
            v18 = v11[2];
          switch(v18)
          {
            case 153:
            case 155:
              if (v13 > 66)
                goto LABEL_3;
              break;
            case 154:
              if (!v17)
                goto LABEL_3;
              break;
            case 156:
            case 157:
            case 158:
            case 159:
            case 160:
            case 161:
            case 162:
            case 163:
            case 164:
            case 165:
            case 166:
              goto LABEL_4;
            case 167:
              if (v13 >= 67 && *((int *)v11 + 12) < 0)
                goto LABEL_3;
              break;
            default:
              if (v18 == 117 && v13 == 66 && v17 == 0)
                goto LABEL_3;
              break;
          }
          goto LABEL_4;
        }
      }
      else
      {
        v15 = v13 < 0x43 && result < 0x43;
        if (v13 != 65 && !v15)
          goto LABEL_31;
      }
LABEL_3:
      *(_BYTE *)(a3 + v5) = 65;
LABEL_4:
      ++v5;
    }
    while (v5 != v7);
  }
  return result;
}

uint64_t *sub_1ACC28EC4(uint64_t *result, uint64_t a2, int a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (a4)
  {
    LODWORD(i) = a3;
    result = (uint64_t *)result[2];
    if (a3 >= 1)
    {
      v9 = (a3 + a2);
      v10 = (uint64_t)&a4[i];
      while (*a4 <= 65)
      {
        a2 = (a2 + 1);
        ++a4;
        v11 = __OFSUB__((_DWORD)i, 1);
        LODWORD(i) = i - 1;
        if (((int)i < 0) ^ v11 | ((_DWORD)i == 0))
        {
          LODWORD(i) = 0;
          goto LABEL_9;
        }
      }
    }
    v9 = a2;
    v10 = (uint64_t)a4;
LABEL_9:
    for (i = i; ; --i)
    {
      v12 = i;
      if ((int)i < 2)
        break;
      if (*(char *)(v10 + v12 - 1) >= 66)
        return (uint64_t *)sub_1ACBA86CC(result, 96, v9, v12, 0, v10, v12, a8);
    }
    if ((_DWORD)i != 1)
      return result;
    return (uint64_t *)sub_1ACBA86CC(result, 96, v9, v12, 0, v10, v12, a8);
  }
  return result;
}

uint64_t *sub_1ACC28F50(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int8x16_t v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int16x8_t v32;
  uint64_t v33;
  int16x8_t v34;
  int8x16_t v35;
  uint16x8_t v36;
  uint16x8_t v37;
  int8x16_t v38;
  int16x8_t v39;
  int16x8_t v40;
  uint64_t v41;
  unsigned __int16 *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  int v48;
  int8x16x2_t v49;

  v9 = result;
  v10 = (uint64_t *)*result;
  v11 = *(_QWORD *)(*result + 16);
  *((_BYTE *)result + 68) |= 1u;
  v12 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v12)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 141, a4, 0, a3, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v12 + 1;
    v13 = *(_QWORD *)(v11 + 136) + 40 * v12;
    *(_DWORD *)v13 = 141;
    *(_DWORD *)(v13 + 4) = a4;
    *(_DWORD *)(v13 + 8) = 0;
    *(_DWORD *)(v13 + 12) = a3;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 16) = 0;
  }
  if ((*((_WORD *)v9 + 30) & 0x1020) != 0)
  {
    v14 = (uint64_t *)v10[21];
    if (!v14)
      v14 = v10;
    if (!*((_DWORD *)v14 + 30))
    {
      v15 = *(_QWORD *)(a2 + 24);
      v16 = *v10;
      v17 = 4 * *(__int16 *)(v15 + 54);
      v18 = v17 + 4;
      if (v16)
      {
        result = (uint64_t *)sub_1ACBE1124(v16, v17 + 4);
        v19 = result;
        if (!result)
          return result;
      }
      else
      {
        result = (uint64_t *)sub_1ACB5D828(v17 + 4);
        v19 = result;
        if (!result)
          return result;
      }
      bzero(v19, v18);
      *(_DWORD *)v19 = *(__int16 *)(v15 + 54);
      v20 = *(unsigned __int16 *)(a2 + 96);
      if (v20 >= 2)
      {
        v21 = 0;
        v22 = (v20 - 1);
        v23 = *(_QWORD *)(a2 + 8);
        v24.i64[0] = 0x1000100010001;
        v24.i64[1] = 0x1000100010001;
        do
        {
          v25 = *(__int16 *)(v23 + 2 * v21);
          v26 = *(_WORD *)(v23 + 2 * v21);
          if ((v25 & 0x8000000000000000) == 0)
          {
            v26 = *(_WORD *)(v23 + 2 * v21);
            if ((*(_DWORD *)(v15 + 48) & 0x20) != 0)
            {
              v27 = *(_QWORD *)(v15 + 8);
              if (*(_WORD *)(v23 + 2 * v21))
              {
                v28 = v25;
                if (v25 >= 0x11uLL)
                {
                  v30 = v25 & 0xF;
                  if ((v25 & 0xF) == 0)
                    v30 = 16;
                  v29 = v25 - v30;
                  v31 = v27 + 142;
                  v32 = 0uLL;
                  v33 = v29;
                  v34 = 0uLL;
                  do
                  {
                    v35 = vqtbl2q_s8(*(int8x16x2_t *)(v31 - 64), (int8x16_t)xmmword_1ACCBDDC0);
                    v35.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v31 - 32), (int8x16_t)xmmword_1ACCBDDB0).i32[3];
                    v36.i32[0] = vzip1q_s16(*(int16x8_t *)(v31 - 128), *(int16x8_t *)(v31 - 112)).u32[0];
                    v36.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v31 - 96), (int8x16_t)xmmword_1ACCBDDD0).i32[1];
                    v36.i64[1] = v35.i64[1];
                    v37 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v31 + 96), (int8x16_t)xmmword_1ACCBDDB0);
                    v49 = *(int8x16x2_t *)(v31 + 32);
                    v38 = vqtbl2q_s8(*(int8x16x2_t *)(v31 + 64), (int8x16_t)xmmword_1ACCBDDC0);
                    v40 = *(int16x8_t *)v31;
                    v39 = *(int16x8_t *)(v31 + 16);
                    v31 += 256;
                    v38.i32[3] = v37.i32[3];
                    v37.i32[0] = vzip1q_s16(v40, v39).u32[0];
                    v37.i32[1] = vqtbl2q_s8(v49, (int8x16_t)xmmword_1ACCBDDD0).i32[1];
                    v37.i64[1] = v38.i64[1];
                    v32 = vaddq_s16((int16x8_t)vbicq_s8(v24, (int8x16_t)vshrq_n_u16(v36, 5uLL)), v32);
                    v34 = vaddq_s16((int16x8_t)vbicq_s8(v24, (int8x16_t)vshrq_n_u16(v37, 5uLL)), v34);
                    v33 -= 16;
                  }
                  while (v33);
                  v26 = vaddvq_s16(vaddq_s16(v34, v32));
                }
                else
                {
                  v29 = 0;
                  v26 = 0;
                }
                v41 = v25 - v29;
                v42 = (unsigned __int16 *)(v27 + 16 * v29 + 14);
                do
                {
                  v43 = *v42;
                  v42 += 8;
                  v26 += ((v43 >> 5) & 1) == 0;
                  --v41;
                }
                while (v41);
              }
              else
              {
                v28 = 0;
                v26 = 0;
              }
              if ((*(_WORD *)(v27 + 16 * v28 + 14) & 0x20) != 0)
                v26 = v25 - v26 + *(_WORD *)(v15 + 56);
            }
          }
          ++v21;
          if ((v25 & 0x80000000) == 0)
            *((_DWORD *)v19 + v26 + 1) = v21;
        }
        while (v21 != v22);
      }
      result = *(uint64_t **)v11;
      if (*(_BYTE *)(*(_QWORD *)v11 + 103))
      {
        return sub_1ACBF0674(result, v19);
      }
      else
      {
        v44 = *(int *)(v11 + 144) - 1;
        v45 = *(_QWORD *)(v11 + 136);
        v46 = v45 + 40 * v44;
        v48 = *(unsigned __int8 *)(v46 + 1);
        v47 = (_BYTE *)(v46 + 1);
        if (v48)
        {
          return sub_1ACBFF884((uint64_t *)v11, v45 + 40 * v44, (char *)v19, 0xFFFFFFF2);
        }
        else
        {
          *(_QWORD *)(v45 + 40 * v44 + 16) = v19;
          *v47 = -14;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACC29254(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  int v6;
  _WORD *v7;

  for (i = result; *(_BYTE *)i == 44; i = *(_QWORD *)(i + 24))
    result = sub_1ACC29254(*(_QWORD *)(i + 16), a2, a3);
  if (*(int *)(a3 + 20) >= 1)
  {
    v6 = 0;
    v7 = (_WORD *)(*(_QWORD *)(a3 + 32) + 18);
    do
    {
      if ((*v7 & 4) == 0)
      {
        result = sub_1ACC0ABAC(0, *(unsigned __int8 **)(v7 - 9), (unsigned __int8 *)i, a2);
        if (!(_DWORD)result)
          *v7 |= 4u;
      }
      ++v6;
      v7 += 28;
    }
    while (v6 < *(_DWORD *)(a3 + 20));
  }
  return result;
}

_QWORD *sub_1ACC29314(_QWORD *result)
{
  int v1;
  BOOL v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  unsigned __int8 *v8;
  _QWORD *v9;

  v1 = *((_DWORD *)result + 5);
  v2 = __OFSUB__(v1, 1);
  v3 = v1 - 1;
  if (v3 < 0 == v2)
  {
    v4 = **(_QWORD ***)*result;
    v5 = result[4] + 18;
    v6 = 56 * v3 + 56;
    do
    {
      v7 = *(_WORD *)v5;
      if ((*(_WORD *)v5 & 1) != 0)
      {
        v8 = *(unsigned __int8 **)(v5 - 18);
        if (v8)
        {
          result = sub_1ACBF8348(v4, v8);
          v7 = *(_WORD *)v5;
        }
      }
      if ((v7 & 0x30) != 0)
      {
        v9 = *(_QWORD **)(v5 + 14);
        result = (_QWORD *)sub_1ACC29314(v9);
        if (v9)
          result = sub_1ACBE0F9C(v4, v9);
      }
      v5 += 56;
      v6 -= 56;
    }
    while (v6);
  }
  return result;
}

BOOL sub_1ACC293B4(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  double v5;
  _BOOL8 v6;
  double v8;
  uint64_t v9;

  v2 = *a1;
  v9 = 0;
  if (!a2)
    return 0;
  sub_1ACC015D4(v2, a2, *(unsigned __int8 *)(v2 + 100), 67, &v9);
  v3 = v9;
  if (!v9)
    return 0;
  v4 = *(_WORD *)(v9 + 20);
  if ((v4 & 0x24) != 0)
  {
    v5 = *(double *)v9;
  }
  else if ((v4 & 8) != 0)
  {
    v8 = *(double *)v9;
    if (*(double *)v9 >= -9.22337204e18)
    {
      if (v8 <= 9.22337204e18)
        *(_QWORD *)&v5 = (uint64_t)v8;
      else
        LODWORD(v5) = -1;
    }
    else
    {
      LODWORD(v5) = 0;
    }
  }
  else if ((v4 & 0x12) != 0 && *(_QWORD *)(v9 + 8))
  {
    LODWORD(v5) = sub_1ACBF2FC0(v9);
    v4 = *(_WORD *)(v3 + 20);
  }
  else
  {
    LODWORD(v5) = 0;
  }
  v6 = SLODWORD(v5) > 0;
  if ((v4 & 0x9000) != 0 || *(_DWORD *)(v3 + 32))
    sub_1ACBF2A04(v3);
  sub_1ACBE0F9C(*(_QWORD **)(v3 + 24), (_QWORD *)v3);
  return v6;
}

uint64_t *sub_1ACC294B0(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  unsigned __int8 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;

  v8 = a3;
  v10 = result;
  v11 = result[2];
  if (v11)
  {
    v12 = *((_BYTE *)result + 31);
    if (v12)
    {
LABEL_3:
      v13 = v12 - 1;
      *((_BYTE *)v10 + 31) = v13;
      v14 = *((unsigned int *)v10 + v13 + 56);
      goto LABEL_9;
    }
  }
  else
  {
    if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0)
      *((_BYTE *)result + 35) = 1;
    result = (uint64_t *)sub_1ACBCB4C8(result, a2, a3, a4, a5, a6, a7, a8);
    v11 = (uint64_t)result;
    v12 = *((_BYTE *)v10 + 31);
    if (v12)
      goto LABEL_3;
  }
  v14 = (*((_DWORD *)v10 + 14) + 1);
  *((_DWORD *)v10 + 14) = v14;
LABEL_9:
  v15 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v15)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 71, 0, v14, 0, a6, a7, a8);
    if (v8 < 3)
    {
LABEL_11:
      v17 = *(_DWORD *)(v11 + 144);
      v18 = (v17 + 2);
      if (*(_DWORD *)(v11 + 148) <= v17)
      {
        result = (uint64_t *)sub_1ACBFF5AC(v11, 13, a2, v18, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v17 + 1;
        v19 = *(_QWORD *)(v11 + 136) + 40 * v17;
        *(_DWORD *)v19 = 13;
        *(_DWORD *)(v19 + 4) = a2;
        *(_DWORD *)(v19 + 8) = v18;
        *(_QWORD *)(v19 + 12) = 0;
        *(_QWORD *)(v19 + 28) = 0;
        *(_QWORD *)(v19 + 20) = 0;
        *(_DWORD *)(v19 + 36) = 0;
      }
      goto LABEL_23;
    }
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v15 + 1;
    v16 = *(_QWORD *)(v11 + 136) + 40 * v15;
    *(_QWORD *)v16 = 71;
    *(_DWORD *)(v16 + 8) = v14;
    *(_QWORD *)(v16 + 12) = 0;
    *(_QWORD *)(v16 + 28) = 0;
    *(_QWORD *)(v16 + 20) = 0;
    *(_DWORD *)(v16 + 36) = 0;
    if (v8 < 3)
      goto LABEL_11;
  }
  if (*((_BYTE *)v10 + 31))
  {
    v20 = *((_BYTE *)v10 + 31) - 1;
    *((_BYTE *)v10 + 31) = v20;
    v21 = *((unsigned int *)v10 + v20 + 56);
  }
  else
  {
    v21 = (*((_DWORD *)v10 + 14) + 1);
    *((_DWORD *)v10 + 14) = v21;
  }
  result = (uint64_t *)sub_1ACBA86CC((uint64_t *)v11, 117, 0, v21, 0, (uint64_t)&byte_1ACCBEAEE, 0xFFFFFFFFLL, a8);
  v22 = *(_DWORD *)(v11 + 144);
  v23 = (v22 + 2);
  if (*(_DWORD *)(v11 + 148) <= v22)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 57, v21, v23, a2, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v22 + 1;
    v24 = *(_QWORD *)(v11 + 136) + 40 * v22;
    *(_DWORD *)v24 = 57;
    *(_DWORD *)(v24 + 4) = v21;
    *(_DWORD *)(v24 + 8) = v23;
    *(_DWORD *)(v24 + 12) = a2;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 16) = 0;
  }
  v25 = *(_DWORD *)(v11 + 144);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v27 < 0 == v26)
    *(_WORD *)(*(_QWORD *)(v11 + 136) + 40 * v27 + 2) = 83;
LABEL_23:
  v28 = *(unsigned int *)&a9[4 * v8];
  v29 = *(_DWORD *)(v11 + 144);
  v30 = (v29 + 2);
  if (*(_DWORD *)(v11 + 148) <= v29)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, v28, v14, v30, a2, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v29 + 1;
    v31 = *(_QWORD *)(v11 + 136) + 40 * v29;
    *(_BYTE *)v31 = v28;
    *(_WORD *)(v31 + 2) = 0;
    *(_DWORD *)(v31 + 4) = v14;
    *(_DWORD *)(v31 + 8) = v30;
    *(_DWORD *)(v31 + 12) = a2;
    *(_BYTE *)(v31 + 1) = 0;
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 32) = 0;
    *(_QWORD *)(v31 + 16) = 0;
  }
  v32 = *(_DWORD *)(v11 + 144);
  if (v32 >= 1)
    *(_WORD *)(*(_QWORD *)(v11 + 136) + 40 * (v32 - 1) + 2) = 67;
  v33 = (uint64_t *)v10[21];
  if (!v33)
    v33 = v10;
  *((_BYTE *)v33 + 33) = 1;
  if (*(_DWORD *)(v11 + 148) <= v32)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v11, 70, 1, 2, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v32 + 1;
    v34 = *(_QWORD *)(v11 + 136) + 40 * v32;
    *(_DWORD *)v34 = 70;
    *(_QWORD *)(v34 + 4) = 0x200000001;
    *(_QWORD *)(v34 + 12) = 0;
    *(_QWORD *)(v34 + 28) = 0;
    *(_QWORD *)(v34 + 20) = 0;
    *(_DWORD *)(v34 + 36) = 0;
  }
  if (!*(_BYTE *)(*(_QWORD *)v11 + 103))
  {
    v35 = off_1E5C745E0[v8];
    v36 = *(_QWORD *)(v11 + 136) + 40 * *(int *)(v11 + 144);
    *(_BYTE *)(v36 - 39) = -1;
    *(_QWORD *)(v36 - 24) = v35;
  }
  if ((_DWORD)v14)
  {
    v37 = *((unsigned __int8 *)v10 + 31);
    if (v37 <= 7)
    {
      *((_BYTE *)v10 + 31) = v37 + 1;
      *((_DWORD *)v10 + v37 + 56) = v14;
    }
  }
  return result;
}

uint64_t *sub_1ACC29820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  char *v44;

  v8 = a2;
  result = *(uint64_t **)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = result[2];
  if (!v12)
  {
    if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0)
      *((_BYTE *)result + 35) = 1;
    result = (uint64_t *)sub_1ACBCB4C8(result, a2, a3, a4, a5, a6, a7, a8);
    v12 = (uint64_t)result;
  }
  if (v11)
  {
    v13 = v11;
    do
    {
      if (!*(_DWORD *)(v11 + 132)
        && (*(_BYTE *)(*(_QWORD *)(v13 + 80) + 5) & 0x10) != 0
        && *(_BYTE *)(v13 + 33) != 90)
      {
        v23 = *(unsigned int *)(v13 + 96);
        v24 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v24)
        {
          result = (uint64_t *)sub_1ACBFF5AC(v12, 75, 0, v23, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v24 + 1;
          v25 = *(_QWORD *)(v12 + 136) + 40 * v24;
          *(_QWORD *)v25 = 75;
          *(_DWORD *)(v25 + 8) = v23;
          *(_QWORD *)(v25 + 12) = 0;
          *(_QWORD *)(v25 + 28) = 0;
          *(_QWORD *)(v25 + 20) = 0;
          *(_DWORD *)(v25 + 36) = 0;
        }
        v36 = *(unsigned int *)(v13 + 100);
        v37 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v37)
        {
          result = (uint64_t *)sub_1ACBFF5AC(v12, 32, v36, 0, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v37 + 1;
          v38 = *(_QWORD *)(v12 + 136) + 40 * v37;
          *(_DWORD *)v38 = 32;
          *(_DWORD *)(v38 + 4) = v36;
          *(_OWORD *)(v38 + 8) = 0u;
          *(_OWORD *)(v38 + 24) = 0u;
        }
        v40 = *(unsigned int *)(v13 + 96);
        v39 = *(unsigned int *)(v13 + 100);
        v41 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v41)
        {
          result = (uint64_t *)sub_1ACBFF5AC(v12, 94, v39, 0, v40, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v41 + 1;
          v42 = *(_QWORD *)(v12 + 136) + 40 * v41;
          *(_DWORD *)v42 = 94;
          *(_DWORD *)(v42 + 4) = v39;
          *(_DWORD *)(v42 + 8) = 0;
          *(_DWORD *)(v42 + 12) = v40;
          *(_QWORD *)(v42 + 24) = 0;
          *(_QWORD *)(v42 + 32) = 0;
          *(_QWORD *)(v42 + 16) = 0;
        }
        v43 = *(_DWORD *)(v12 + 144);
        v44 = &byte_1EECAD280;
        if (!*(_BYTE *)(*(_QWORD *)v12 + 103))
          v44 = (char *)(*(_QWORD *)(v12 + 136) + 40 * (v43 - 2));
        *((_DWORD *)v44 + 2) = v43;
        goto LABEL_9;
      }
      if (!*(_DWORD *)(v13 + 104))
      {
        v14 = *(unsigned int **)(*(_QWORD *)(v13 + 112) + 32);
        if (v14)
        {
          v15 = *v14;
          v16 = *(unsigned int *)(v13 + 92);
          if (!v8)
            goto LABEL_19;
        }
        else
        {
          v15 = 0;
          v16 = *(unsigned int *)(v13 + 92);
          if (!v8)
          {
LABEL_19:
            v19 = *(unsigned int *)(v13 + 96);
            v20 = *(_DWORD *)(v12 + 144);
            if (*(_DWORD *)(v12 + 148) <= v20)
            {
              sub_1ACBFF5AC(v12, 164, v16, v15, v19, a6, a7, a8);
            }
            else
            {
              *(_DWORD *)(v12 + 144) = v20 + 1;
              v21 = *(_QWORD *)(v12 + 136) + 40 * v20;
              *(_DWORD *)v21 = 164;
              *(_DWORD *)(v21 + 4) = v16;
              *(_DWORD *)(v21 + 8) = v15;
              *(_DWORD *)(v21 + 12) = v19;
              *(_QWORD *)(v21 + 24) = 0;
              *(_QWORD *)(v21 + 32) = 0;
              *(_QWORD *)(v21 + 16) = 0;
            }
            v34 = *(_QWORD *)(v13 + 80);
            result = *(uint64_t **)v12;
            if (*(_BYTE *)(*(_QWORD *)v12 + 103))
            {
              if ((*(_BYTE *)(v34 + 4) & 0x10) != 0)
                result = sub_1ACBF0674(result, (_QWORD *)v34);
            }
            else
            {
              v35 = *(_QWORD *)(v12 + 136) + 40 * *(int *)(v12 + 144);
              *(_BYTE *)(v35 - 39) = -7;
              *(_QWORD *)(v35 - 24) = v34;
            }
            goto LABEL_9;
          }
        }
        v17 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v17)
        {
          sub_1ACBFF5AC(v12, 165, v16, v15, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v17 + 1;
          v18 = *(_QWORD *)(v12 + 136) + 40 * v17;
          *(_DWORD *)v18 = 165;
          *(_DWORD *)(v18 + 4) = v16;
          *(_DWORD *)(v18 + 8) = v15;
          *(_QWORD *)(v18 + 12) = 0;
          *(_QWORD *)(v18 + 28) = 0;
          *(_QWORD *)(v18 + 20) = 0;
          *(_DWORD *)(v18 + 36) = 0;
        }
        v22 = *(_QWORD *)(v13 + 80);
        result = *(uint64_t **)v12;
        if (*(_BYTE *)(*(_QWORD *)v12 + 103))
        {
          if ((*(_BYTE *)(v22 + 4) & 0x10) != 0)
            result = sub_1ACBF0674(result, (_QWORD *)v22);
        }
        else
        {
          v26 = *(_QWORD *)(v12 + 136) + 40 * *(int *)(v12 + 144);
          *(_BYTE *)(v26 - 39) = -7;
          *(_QWORD *)(v26 - 24) = v22;
        }
        v27 = *(unsigned int *)(v13 + 92);
        v28 = *(unsigned int *)(v13 + 96);
        v29 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v29)
        {
          result = (uint64_t *)sub_1ACBFF5AC(v12, 80, v27, v28, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v29 + 1;
          v30 = *(_QWORD *)(v12 + 136) + 40 * v29;
          *(_DWORD *)v30 = 80;
          *(_DWORD *)(v30 + 4) = v27;
          *(_DWORD *)(v30 + 8) = v28;
          *(_QWORD *)(v30 + 12) = 0;
          *(_QWORD *)(v30 + 28) = 0;
          *(_QWORD *)(v30 + 20) = 0;
          *(_DWORD *)(v30 + 36) = 0;
        }
        v31 = *(unsigned int *)(v13 + 92);
        v32 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) <= v32)
        {
          result = (uint64_t *)sub_1ACBFF5AC(v12, 75, 0, v31, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v12 + 144) = v32 + 1;
          v33 = *(_QWORD *)(v12 + 136) + 40 * v32;
          *(_QWORD *)v33 = 75;
          *(_DWORD *)(v33 + 8) = v31;
          *(_QWORD *)(v33 + 12) = 0;
          *(_QWORD *)(v33 + 28) = 0;
          *(_QWORD *)(v33 + 20) = 0;
          *(_DWORD *)(v33 + 36) = 0;
        }
      }
LABEL_9:
      v13 = *(_QWORD *)(v13 + 64);
    }
    while (v13);
  }
  return result;
}

uint64_t sub_1ACC29BCC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  BOOL v16;
  uint64_t v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v22;
  uint64_t v23;
  int v24;
  unsigned __int8 v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  int32x2_t *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  int v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  unsigned __int8 v84;
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 v87;
  int v88;
  int v89;
  int v90;
  BOOL v91;
  int v92;
  int v93;
  int v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  int v115;
  int v116;
  uint64_t v117;
  uint64_t v118;
  int *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int *v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  int v149;
  uint64_t v150;
  int v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  int v160;
  uint64_t v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  int v165;
  unsigned int v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int v170;

  v9 = *(_QWORD *)(result + 8);
  v8 = *(_QWORD *)(result + 16);
  v10 = *(_QWORD *)result;
  v168 = result;
  if (!*(_DWORD *)(v9 + 132))
  {
    v169 = *(_QWORD *)(result + 8);
    while (1)
    {
      v14 = *(_QWORD *)(v9 + 80);
      v15 = *(char **)(v14 + 56);
      v16 = v15 == "nth_value" || v15 == "first_value";
      if (!v16)
        break;
      v17 = *(unsigned int *)(v9 + 100);
      v18 = *(_DWORD *)(v10 + 68);
      *(_DWORD *)(v10 + 68) = v18 - 1;
      if (*(_BYTE *)(v10 + 31))
      {
        v19 = *(_BYTE *)(v10 + 31) - 1;
        *(_BYTE *)(v10 + 31) = v19;
        v20 = *(unsigned int *)(v10 + 4 * v19 + 224);
      }
      else
      {
        v20 = (*(_DWORD *)(v10 + 56) + 1);
        *(_DWORD *)(v10 + 56) = v20;
      }
      v26 = *(unsigned int *)(v9 + 96);
      v27 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v27)
      {
        sub_1ACBFF5AC(v8, 75, 0, v26, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v8 + 144) = v27 + 1;
        v28 = *(_QWORD *)(v8 + 136) + 40 * v27;
        *(_QWORD *)v28 = 75;
        *(_DWORD *)(v28 + 8) = v26;
        *(_QWORD *)(v28 + 12) = 0;
        *(_QWORD *)(v28 + 28) = 0;
        *(_QWORD *)(v28 + 20) = 0;
        *(_DWORD *)(v28 + 36) = 0;
      }
      if (*(char **)(v14 + 56) == "nth_value")
      {
        v31 = *(unsigned int *)(v169 + 88);
        v32 = (*(_DWORD *)(v9 + 124) + 1);
        v33 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v33)
        {
          sub_1ACBFF5AC(v8, 94, v31, v32, v20, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v8 + 144) = v33 + 1;
          v34 = *(_QWORD *)(v8 + 136) + 40 * v33;
          *(_DWORD *)v34 = 94;
          *(_DWORD *)(v34 + 4) = v31;
          *(_DWORD *)(v34 + 8) = v32;
          *(_DWORD *)(v34 + 12) = v20;
          *(_QWORD *)(v34 + 24) = 0;
          *(_QWORD *)(v34 + 32) = 0;
          *(_QWORD *)(v34 + 16) = 0;
        }
        sub_1ACC294B0((uint64_t *)v10, v20, 2, v32, a5, a6, a7, a8);
      }
      else
      {
        v29 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v29)
        {
          sub_1ACBFF5AC(v8, 71, 1, v20, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v8 + 144) = v29 + 1;
          v30 = *(_QWORD *)(v8 + 136) + 40 * v29;
          *(_QWORD *)v30 = 0x100000047;
          *(_DWORD *)(v30 + 8) = v20;
          *(_QWORD *)(v30 + 12) = 0;
          *(_QWORD *)(v30 + 28) = 0;
          *(_QWORD *)(v30 + 20) = 0;
          *(_DWORD *)(v30 + 36) = 0;
        }
      }
      v42 = *(unsigned int *)(v9 + 104);
      v43 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v43)
      {
        sub_1ACBFF5AC(v8, 106, v20, v42, v20, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v8 + 144) = v43 + 1;
        v44 = *(_QWORD *)(v8 + 136) + 40 * v43;
        *(_DWORD *)v44 = 106;
        *(_DWORD *)(v44 + 4) = v20;
        *(_DWORD *)(v44 + 8) = v42;
        *(_DWORD *)(v44 + 12) = v20;
        *(_QWORD *)(v44 + 24) = 0;
        *(_QWORD *)(v44 + 32) = 0;
        *(_QWORD *)(v44 + 16) = 0;
      }
      v45 = (*(_DWORD *)(v9 + 104) + 1);
      v46 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v46)
      {
        sub_1ACBFF5AC(v8, 54, v45, (v18 - 1), v20, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v8 + 144) = v46 + 1;
        v47 = *(_QWORD *)(v8 + 136) + 40 * v46;
        *(_DWORD *)v47 = 54;
        *(_DWORD *)(v47 + 4) = v45;
        *(_DWORD *)(v47 + 8) = v18 - 1;
        *(_DWORD *)(v47 + 12) = v20;
        *(_QWORD *)(v47 + 24) = 0;
        *(_QWORD *)(v47 + 32) = 0;
        *(_QWORD *)(v47 + 16) = 0;
      }
      v48 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v48)
      {
        sub_1ACBFF5AC(v8, 30, v17, 0, v20, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v8 + 144) = v48 + 1;
        v49 = *(_QWORD *)(v8 + 136) + 40 * v48;
        *(_DWORD *)v49 = 30;
        *(_DWORD *)(v49 + 4) = v17;
        *(_DWORD *)(v49 + 8) = 0;
        *(_DWORD *)(v49 + 12) = v20;
        *(_QWORD *)(v49 + 24) = 0;
        *(_QWORD *)(v49 + 32) = 0;
        *(_QWORD *)(v49 + 16) = 0;
      }
      v50 = *(unsigned int *)(v9 + 124);
      a5 = *(unsigned int *)(v9 + 96);
      v51 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v51)
      {
        sub_1ACBFF5AC(v8, 94, v17, v50, a5, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v8 + 144) = v51 + 1;
        v52 = *(_QWORD *)(v8 + 136) + 40 * v51;
        *(_DWORD *)v52 = 94;
        *(_DWORD *)(v52 + 4) = v17;
        *(_DWORD *)(v52 + 8) = v50;
        *(_DWORD *)(v52 + 12) = a5;
        *(_QWORD *)(v52 + 24) = 0;
        *(_QWORD *)(v52 + 32) = 0;
        *(_QWORD *)(v52 + 16) = 0;
      }
      result = *(_QWORD *)(v8 + 24);
      v53 = -v18;
      if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
      {
        result = sub_1ACC0D5D4(result, v8, v53);
        if (!(_DWORD)v20)
          goto LABEL_6;
      }
      else
      {
        *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v53) = *(_DWORD *)(v8 + 144);
        if (!(_DWORD)v20)
          goto LABEL_6;
      }
      v54 = *(unsigned __int8 *)(v10 + 31);
      if (v54 >= 8)
        goto LABEL_6;
LABEL_5:
      *(_BYTE *)(v10 + 31) = v54 + 1;
      *(_DWORD *)(v10 + 4 * v54 + 224) = v20;
LABEL_6:
      v9 = *(_QWORD *)(v9 + 64);
      if (!v9)
        goto LABEL_199;
    }
    if (v15 != "lead" && v15 != "lag")
      goto LABEL_6;
    v22 = **(_DWORD **)(*(_QWORD *)(v9 + 112) + 32);
    v23 = *(unsigned int *)(v9 + 100);
    v24 = *(_DWORD *)(v10 + 68);
    *(_DWORD *)(v10 + 68) = v24 - 1;
    if (*(_BYTE *)(v10 + 31))
    {
      v25 = *(_BYTE *)(v10 + 31) - 1;
      *(_BYTE *)(v10 + 31) = v25;
      v20 = *(unsigned int *)(v10 + 4 * v25 + 224);
    }
    else
    {
      v20 = (*(_DWORD *)(v10 + 56) + 1);
      *(_DWORD *)(v10 + 56) = v20;
    }
    v35 = *(unsigned int *)(v169 + 88);
    if (v22 > 2)
    {
      v36 = (*(_DWORD *)(v9 + 124) + 2);
      v39 = *(unsigned int *)(v9 + 96);
      v40 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) > v40)
      {
        *(_DWORD *)(v8 + 144) = v40 + 1;
        v41 = *(_QWORD *)(v8 + 136) + 40 * v40;
        *(_DWORD *)v41 = 94;
        *(_DWORD *)(v41 + 4) = v35;
        *(_DWORD *)(v41 + 8) = v36;
        *(_DWORD *)(v41 + 12) = v39;
        *(_QWORD *)(v41 + 24) = 0;
        *(_QWORD *)(v41 + 32) = 0;
        *(_QWORD *)(v41 + 16) = 0;
        goto LABEL_60;
      }
      v55 = v8;
      v56 = 94;
      v57 = *(unsigned int *)(v169 + 88);
    }
    else
    {
      v36 = *(unsigned int *)(v9 + 96);
      v37 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) > v37)
      {
        *(_DWORD *)(v8 + 144) = v37 + 1;
        v38 = *(_QWORD *)(v8 + 136) + 40 * v37;
        *(_QWORD *)v38 = 75;
        *(_DWORD *)(v38 + 8) = v36;
        *(_QWORD *)(v38 + 12) = 0;
        *(_QWORD *)(v38 + 28) = 0;
        *(_QWORD *)(v38 + 20) = 0;
        *(_DWORD *)(v38 + 36) = 0;
LABEL_60:
        v58 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v58)
        {
          sub_1ACBFF5AC(v8, 135, v35, v20, 0, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v8 + 144) = v58 + 1;
          v59 = *(_QWORD *)(v8 + 136) + 40 * v58;
          *(_DWORD *)v59 = 135;
          *(_DWORD *)(v59 + 4) = v35;
          *(_DWORD *)(v59 + 8) = v20;
          *(_QWORD *)(v59 + 12) = 0;
          *(_QWORD *)(v59 + 28) = 0;
          *(_QWORD *)(v59 + 20) = 0;
          *(_DWORD *)(v59 + 36) = 0;
        }
        v60 = *(char **)(v14 + 56);
        if (v22 > 1)
        {
          if (v60 == "lead")
            v64 = 106;
          else
            v64 = 107;
          if (*(_BYTE *)(v10 + 31))
          {
            v65 = *(_BYTE *)(v10 + 31) - 1;
            *(_BYTE *)(v10 + 31) = v65;
            v66 = *(unsigned int *)(v10 + 4 * v65 + 224);
          }
          else
          {
            v66 = (*(_DWORD *)(v10 + 56) + 1);
            *(_DWORD *)(v10 + 56) = v66;
          }
          v67 = (*(_DWORD *)(v9 + 124) + 1);
          v68 = *(_DWORD *)(v8 + 144);
          if (*(_DWORD *)(v8 + 148) <= v68)
          {
            sub_1ACBFF5AC(v8, 94, v35, v67, v66, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v8 + 144) = v68 + 1;
            v69 = *(_QWORD *)(v8 + 136) + 40 * v68;
            *(_DWORD *)v69 = 94;
            *(_DWORD *)(v69 + 4) = v35;
            *(_DWORD *)(v69 + 8) = v67;
            *(_DWORD *)(v69 + 12) = v66;
            *(_QWORD *)(v69 + 24) = 0;
            *(_QWORD *)(v69 + 32) = 0;
            *(_QWORD *)(v69 + 16) = 0;
          }
          v70 = *(_DWORD *)(v8 + 144);
          if (*(_DWORD *)(v8 + 148) <= v70)
          {
            sub_1ACBFF5AC(v8, v64, v66, v20, v20, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v8 + 144) = v70 + 1;
            v71 = (int32x2_t *)(*(_QWORD *)(v8 + 136) + 40 * v70);
            v71->i8[0] = v64;
            v71->i16[1] = 0;
            v71->i32[1] = v66;
            v71[1] = vdup_n_s32(v20);
            v71->i8[1] = 0;
            v71[3] = 0;
            v71[4] = 0;
            v71[2] = 0;
          }
          if ((_DWORD)v66)
          {
            v72 = *(unsigned __int8 *)(v10 + 31);
            if (v72 <= 7)
            {
              *(_BYTE *)(v10 + 31) = v72 + 1;
              *(_DWORD *)(v10 + 4 * v72 + 224) = v66;
            }
          }
        }
        else
        {
          if (v60 == "lead")
            v61 = 1;
          else
            v61 = 0xFFFFFFFFLL;
          v62 = *(_DWORD *)(v8 + 144);
          if (*(_DWORD *)(v8 + 148) <= v62)
          {
            sub_1ACBFF5AC(v8, 86, v20, v61, 0, a6, a7, a8);
          }
          else
          {
            *(_DWORD *)(v8 + 144) = v62 + 1;
            v63 = *(_QWORD *)(v8 + 136) + 40 * v62;
            *(_DWORD *)v63 = 86;
            *(_DWORD *)(v63 + 4) = v20;
            *(_DWORD *)(v63 + 8) = v61;
            *(_QWORD *)(v63 + 12) = 0;
            *(_QWORD *)(v63 + 28) = 0;
            *(_QWORD *)(v63 + 20) = 0;
            *(_DWORD *)(v63 + 36) = 0;
          }
        }
        v73 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v73)
        {
          sub_1ACBFF5AC(v8, 30, v23, (v24 - 1), v20, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v8 + 144) = v73 + 1;
          v74 = *(_QWORD *)(v8 + 136) + 40 * v73;
          *(_DWORD *)v74 = 30;
          *(_DWORD *)(v74 + 4) = v23;
          *(_DWORD *)(v74 + 8) = v24 - 1;
          *(_DWORD *)(v74 + 12) = v20;
          *(_QWORD *)(v74 + 24) = 0;
          *(_QWORD *)(v74 + 32) = 0;
          *(_QWORD *)(v74 + 16) = 0;
        }
        v75 = *(unsigned int *)(v9 + 124);
        a5 = *(unsigned int *)(v9 + 96);
        v76 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) <= v76)
        {
          sub_1ACBFF5AC(v8, 94, v23, v75, a5, a6, a7, a8);
        }
        else
        {
          *(_DWORD *)(v8 + 144) = v76 + 1;
          v77 = *(_QWORD *)(v8 + 136) + 40 * v76;
          *(_DWORD *)v77 = 94;
          *(_DWORD *)(v77 + 4) = v23;
          *(_DWORD *)(v77 + 8) = v75;
          *(_DWORD *)(v77 + 12) = a5;
          *(_QWORD *)(v77 + 24) = 0;
          *(_QWORD *)(v77 + 32) = 0;
          *(_QWORD *)(v77 + 16) = 0;
        }
        result = *(_QWORD *)(v8 + 24);
        v78 = -v24;
        if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
        {
          result = sub_1ACC0D5D4(result, v8, v78);
          if (!(_DWORD)v20)
            goto LABEL_6;
        }
        else
        {
          *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v78) = *(_DWORD *)(v8 + 144);
          if (!(_DWORD)v20)
            goto LABEL_6;
        }
        v54 = *(unsigned __int8 *)(v10 + 31);
        if (v54 > 7)
          goto LABEL_6;
        goto LABEL_5;
      }
      v55 = v8;
      v56 = 75;
      v57 = 0;
      v39 = 0;
    }
    sub_1ACBFF5AC(v55, v56, v57, v36, v39, a6, a7, a8);
    goto LABEL_60;
  }
  v11 = result;
  v12 = *(unsigned int **)(v9 + 24);
  if (v12)
    v13 = *v12;
  else
    v13 = 0;
  v79 = *(_DWORD *)(v9 + 100);
  v80 = *(_DWORD *)(v10 + 68);
  v81 = (v80 - 2);
  *(_DWORD *)(v10 + 68) = v81;
  v82 = *(_BYTE *)(v10 + 31);
  if (!v82)
  {
    v83 = (*(_DWORD *)(v10 + 56) + 1);
    *(_DWORD *)(v10 + 56) = v83;
LABEL_103:
    v84 = 0;
    v85 = (*(_DWORD *)(v10 + 56) + 1);
    *(_DWORD *)(v10 + 56) = v85;
    if (!(_DWORD)v13)
      goto LABEL_101;
LABEL_104:
    if ((_DWORD)v13 == 1)
    {
      if (v84)
      {
        *(_BYTE *)(v10 + 31) = v84 - 1;
        v86 = *(unsigned int *)(v10 + 4 * (v84 - 1) + 224);
        if (v84 != 1)
        {
          v87 = v84 - 2;
          *(_BYTE *)(v10 + 31) = v87;
          v164 = *(_DWORD *)(v10 + 4 * v87 + 224);
          goto LABEL_116;
        }
      }
      else
      {
        v86 = (*(_DWORD *)(v10 + 56) + 1);
        *(_DWORD *)(v10 + 56) = v86;
      }
      v94 = *(_DWORD *)(v10 + 56) + 1;
      v164 = v94;
    }
    else
    {
      v88 = *(_DWORD *)(v10 + 40);
      v89 = v88 - v13;
      if (v88 >= (int)v13)
      {
        v86 = *(unsigned int *)(v10 + 44);
        *(_DWORD *)(v10 + 40) = v89;
        *(_DWORD *)(v10 + 44) = v86 + v13;
        v91 = __OFSUB__(v89, (_DWORD)v13);
        v92 = v89 - v13;
        if (v92 < 0 == v91)
        {
          v164 = *(_DWORD *)(v10 + 44);
          *(_DWORD *)(v10 + 40) = v92;
          *(_DWORD *)(v10 + 44) = v164 + v13;
          goto LABEL_116;
        }
      }
      else
      {
        v90 = *(_DWORD *)(v10 + 56);
        v86 = (v90 + 1);
        *(_DWORD *)(v10 + 56) = v90 + v13;
      }
      v93 = *(_DWORD *)(v10 + 56);
      v164 = v93 + 1;
      v94 = v93 + v13;
    }
    *(_DWORD *)(v10 + 56) = v94;
    goto LABEL_116;
  }
  *(_BYTE *)(v10 + 31) = v82 - 1;
  v83 = *(unsigned int *)(v10 + 4 * (v82 - 1) + 224);
  if (v82 == 1)
    goto LABEL_103;
  v84 = v82 - 2;
  *(_BYTE *)(v10 + 31) = v84;
  v85 = *(unsigned int *)(v10 + 4 * v84 + 224);
  if ((_DWORD)v13)
    goto LABEL_104;
LABEL_101:
  v86 = 0;
  v164 = 0;
LABEL_116:
  v95 = *(unsigned int *)(v9 + 88);
  v96 = *(_DWORD *)(v8 + 144);
  v170 = v79;
  v167 = v83;
  if (*(_DWORD *)(v8 + 148) <= v96)
  {
    sub_1ACBFF5AC(v8, 135, v95, v83, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v8 + 144) = v96 + 1;
    v97 = *(_QWORD *)(v8 + 136) + 40 * v96;
    *(_DWORD *)v97 = 135;
    *(_DWORD *)(v97 + 4) = v95;
    *(_DWORD *)(v97 + 8) = v83;
    *(_QWORD *)(v97 + 12) = 0;
    *(_QWORD *)(v97 + 28) = 0;
    *(_QWORD *)(v97 + 20) = 0;
    *(_DWORD *)(v97 + 36) = 0;
  }
  v165 = v80;
  v166 = v86;
  v163 = v80 - 1;
  sub_1ACC2BDC4((uint64_t *)v11, *(unsigned int *)(v9 + 88), v86, v83, a5, a6, a7, a8);
  v101 = v9;
  do
  {
    while (1)
    {
      v103 = *(unsigned int *)(v101 + 92);
      v104 = *(_DWORD *)(v8 + 144);
      if (*(_DWORD *)(v8 + 148) <= v104)
        break;
      *(_DWORD *)(v8 + 144) = v104 + 1;
      v102 = *(_QWORD *)(v8 + 136) + 40 * v104;
      *(_QWORD *)v102 = 75;
      *(_DWORD *)(v102 + 8) = v103;
      *(_QWORD *)(v102 + 12) = 0;
      *(_QWORD *)(v102 + 28) = 0;
      *(_QWORD *)(v102 + 20) = 0;
      *(_DWORD *)(v102 + 36) = 0;
      v101 = *(_QWORD *)(v101 + 64);
      if (!v101)
        goto LABEL_123;
    }
    sub_1ACBFF5AC(v8, 75, 0, v103, 0, v98, v99, v100);
    v101 = *(_QWORD *)(v101 + 64);
  }
  while (v101);
LABEL_123:
  v105 = *(unsigned int *)(v9 + 132);
  v106 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v106)
  {
    v108 = v170;
    sub_1ACBFF5AC(v8, 23, v170, v81, v105, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)(v8 + 144) = v106 + 1;
    v107 = *(_QWORD *)(v8 + 136) + 40 * v106;
    v108 = v170;
    *(_DWORD *)v107 = 23;
    *(_DWORD *)(v107 + 4) = v170;
    *(_DWORD *)(v107 + 8) = v81;
    *(_DWORD *)(v107 + 12) = v105;
    *(_QWORD *)(v107 + 24) = 0;
    *(_QWORD *)(v107 + 32) = 0;
    *(_QWORD *)(v107 + 16) = 0;
  }
  v109 = v85;
  v110 = *(unsigned int *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= (int)v110)
  {
    sub_1ACBFF5AC(v8, 135, v108, v85, 0, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)(v8 + 144) = v110 + 1;
    v111 = *(_QWORD *)(v8 + 136) + 40 * (int)v110;
    *(_DWORD *)v111 = 135;
    *(_DWORD *)(v111 + 4) = v108;
    *(_DWORD *)(v111 + 8) = v85;
    *(_QWORD *)(v111 + 12) = 0;
    *(_QWORD *)(v111 + 28) = 0;
    *(_QWORD *)(v111 + 20) = 0;
    *(_DWORD *)(v111 + 36) = 0;
  }
  v112 = *(unsigned int *)(v9 + 136);
  v113 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v113)
  {
    sub_1ACBFF5AC(v8, 54, v112, v81, v85, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)(v8 + 144) = v113 + 1;
    v114 = *(_QWORD *)(v8 + 136) + 40 * v113;
    *(_DWORD *)v114 = 54;
    *(_DWORD *)(v114 + 4) = v112;
    *(_DWORD *)(v114 + 8) = v81;
    *(_DWORD *)(v114 + 12) = v85;
    *(_QWORD *)(v114 + 24) = 0;
    *(_QWORD *)(v114 + 32) = 0;
    *(_QWORD *)(v114 + 16) = 0;
  }
  v115 = *(unsigned __int8 *)(v9 + 36);
  if (v115 == 66)
    goto LABEL_173;
  if (v115 != 85)
  {
    v118 = v9;
    v119 = *(int **)(v9 + 24);
    if (v119)
    {
      v162 = v109;
      v120 = *v119;
      v121 = sub_1ACC092C0(*(_QWORD *)v10, *v119, 1);
      v123 = v121;
      if ((int)v120 >= 1 && v121)
      {
        v124 = 0;
        v125 = v119 + 2;
        do
        {
          v126 = sub_1ACB78620(v10, *(unsigned __int8 **)v125, v122, v103, v105, v98, v99, v100);
          if (!v126)
            v126 = *(_QWORD *)(*(_QWORD *)v10 + 16);
          *(_QWORD *)(v123 + 32 + 8 * v124) = v126;
          *(_BYTE *)(*(_QWORD *)(v123 + 24) + v124++) = *((_BYTE *)v125 + 16);
          v125 += 6;
        }
        while (v120 != v124);
      }
      v9 = v118;
      v11 = v168;
      v109 = v162;
      if (*(_BYTE *)(v118 + 36) == 94)
        goto LABEL_144;
    }
    else
    {
      v123 = 0;
      v9 = v118;
      if (v115 == 94)
      {
LABEL_144:
        v127 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) > v127)
        {
          *(_DWORD *)(v8 + 144) = v127 + 1;
          v128 = *(_QWORD *)(v8 + 136) + 40 * v127;
          *(_DWORD *)v128 = 53;
          *(_QWORD *)(v128 + 4) = v167;
          *(_DWORD *)(v128 + 12) = v109;
          *(_QWORD *)(v128 + 24) = 0;
          *(_QWORD *)(v128 + 32) = 0;
          *(_QWORD *)(v128 + 16) = 0;
          if (!v123)
            goto LABEL_159;
LABEL_150:
          sub_1ACC2BDC4((uint64_t *)v11, v170, v164, v103, v105, v98, v99, v100);
          v129 = *(_DWORD *)(v8 + 144);
          if (*(_DWORD *)(v8 + 148) <= v129)
          {
            sub_1ACBFF5AC(v8, 90, v164, v166, v13, v98, v99, v100);
          }
          else
          {
            *(_DWORD *)(v8 + 144) = v129 + 1;
            v130 = *(_QWORD *)(v8 + 136) + 40 * v129;
            *(_DWORD *)v130 = 90;
            *(_DWORD *)(v130 + 4) = v164;
            *(_DWORD *)(v130 + 8) = v166;
            *(_DWORD *)(v130 + 12) = v13;
            *(_QWORD *)(v130 + 24) = 0;
            *(_QWORD *)(v130 + 32) = 0;
            *(_QWORD *)(v130 + 16) = 0;
          }
          if (*(_BYTE *)(*(_QWORD *)v8 + 103))
          {
            if (!*(_QWORD *)(*(_QWORD *)v8 + 816))
            {
              v16 = (*(_DWORD *)v123)-- == 1;
              if (v16)
                sub_1ACBF0674(*(_QWORD **)(v123 + 16), (_QWORD *)v123);
            }
          }
          else
          {
            v133 = *(_QWORD *)(v8 + 136) + 40 * *(int *)(v8 + 144);
            *(_BYTE *)(v133 - 39) = -8;
            *(_QWORD *)(v133 - 24) = v123;
          }
          v134 = *(_DWORD *)(v8 + 144);
          v135 = (v134 + 1);
          if (*(_DWORD *)(v8 + 148) > v134)
          {
            *(_DWORD *)(v8 + 144) = v135;
            v136 = *(_QWORD *)(v8 + 136) + 40 * v134;
            *(_DWORD *)v136 = 14;
            *(_DWORD *)(v136 + 4) = v135;
            *(_DWORD *)(v136 + 8) = v163;
            *(_DWORD *)(v136 + 12) = v135;
            *(_QWORD *)(v136 + 24) = 0;
            *(_QWORD *)(v136 + 32) = 0;
            *(_QWORD *)(v136 + 16) = 0;
            v108 = v170;
            if (!v127)
              goto LABEL_173;
            goto LABEL_169;
          }
          v137 = v8;
          v138 = 14;
          v139 = v163;
          v140 = (v134 + 1);
          goto LABEL_168;
        }
        v127 = sub_1ACBFF5AC(v8, 53, v167, 0, v109, v98, v99, v100);
        if (v123)
          goto LABEL_150;
LABEL_159:
        v131 = *(_DWORD *)(v8 + 144);
        if (*(_DWORD *)(v8 + 148) > v131)
        {
          *(_DWORD *)(v8 + 144) = v131 + 1;
          v132 = *(_QWORD *)(v8 + 136) + 40 * v131;
          *(_QWORD *)v132 = 9;
          *(_DWORD *)(v132 + 8) = v163;
          *(_QWORD *)(v132 + 12) = 0;
          *(_QWORD *)(v132 + 28) = 0;
          *(_QWORD *)(v132 + 20) = 0;
          *(_DWORD *)(v132 + 36) = 0;
          v108 = v170;
          if (!v127)
            goto LABEL_173;
          goto LABEL_169;
        }
        v137 = v8;
        v138 = 9;
        v135 = 0;
        v139 = v163;
        v140 = 0;
LABEL_168:
        sub_1ACBFF5AC(v137, v138, v135, v139, v140, v98, v99, v100);
        v108 = v170;
        if (!v127)
          goto LABEL_173;
LABEL_169:
        if (*(_BYTE *)(*(_QWORD *)v8 + 103))
          v141 = &byte_1EECAD280;
        else
          v141 = (char *)(*(_QWORD *)(v8 + 136) + 40 * v127);
        *((_DWORD *)v141 + 2) = *(_DWORD *)(v8 + 144);
        goto LABEL_173;
      }
    }
    v127 = 0;
    if (v123)
      goto LABEL_150;
    goto LABEL_159;
  }
  v116 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v116)
  {
    sub_1ACBFF5AC(v8, 53, v167, v163, v85, v98, v99, v100);
  }
  else
  {
    *(_DWORD *)(v8 + 144) = v116 + 1;
    v117 = *(_QWORD *)(v8 + 136) + 40 * v116;
    *(_DWORD *)v117 = 53;
    *(_DWORD *)(v117 + 4) = v167;
    *(_DWORD *)(v117 + 8) = v163;
    *(_DWORD *)(v117 + 12) = v85;
    *(_QWORD *)(v117 + 24) = 0;
    *(_QWORD *)(v117 + 32) = 0;
    *(_QWORD *)(v117 + 16) = 0;
  }
LABEL_173:
  sub_1ACC2BEC4((uint64_t *)v11, v9, v108, 0, *(unsigned int *)(v11 + 32), v98, v99, v100);
  v147 = *(_QWORD *)(v8 + 24);
  v148 = -v165;
  if (*(_DWORD *)(v147 + 68) + *(_DWORD *)(v147 + 72) < 0)
    sub_1ACC0D5D4(v147, v8, v148);
  else
    *(_DWORD *)(*(_QWORD *)(v147 + 80) + 4 * (int)v148) = *(_DWORD *)(v8 + 144);
  v149 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v149)
  {
    sub_1ACBFF5AC(v8, 39, v108, v110, 0, v144, v145, v146);
  }
  else
  {
    *(_DWORD *)(v8 + 144) = v149 + 1;
    v150 = *(_QWORD *)(v8 + 136) + 40 * v149;
    *(_DWORD *)v150 = 39;
    *(_DWORD *)(v150 + 4) = v108;
    *(_DWORD *)(v150 + 8) = v110;
    *(_QWORD *)(v150 + 12) = 0;
    *(_QWORD *)(v150 + 28) = 0;
    *(_QWORD *)(v150 + 20) = 0;
    *(_DWORD *)(v150 + 36) = 0;
  }
  v151 = *(_DWORD *)(v8 + 144);
  if (*(_BYTE *)(*(_QWORD *)v8 + 103))
  {
    v152 = &byte_1EECAD280;
    dword_1EECAD288 = *(_DWORD *)(v8 + 144);
  }
  else
  {
    v153 = *(_QWORD *)(v8 + 136);
    *(_DWORD *)(v153 + 40 * ((int)v110 - 1) + 8) = v151;
    v152 = (char *)(v153 + 40 * ((int)v110 + 1));
  }
  *((_DWORD *)v152 + 2) = v151;
  if ((_DWORD)v109)
  {
    v154 = *(unsigned __int8 *)(v10 + 31);
    if (v154 <= 7)
    {
      *(_BYTE *)(v10 + 31) = v154 + 1;
      *(_DWORD *)(v10 + 4 * v154 + 224) = v109;
    }
  }
  if (v167)
  {
    v155 = *(unsigned __int8 *)(v10 + 31);
    if (v155 <= 7)
    {
      *(_BYTE *)(v10 + 31) = v155 + 1;
      *(_DWORD *)(v10 + 4 * v155 + 224) = v167;
    }
  }
  if ((_DWORD)v13)
  {
    if ((_DWORD)v13 == 1)
    {
      if (v164)
      {
        v156 = *(unsigned __int8 *)(v10 + 31);
        if (v156 <= 7)
        {
          *(_BYTE *)(v10 + 31) = v156 + 1;
          *(_DWORD *)(v10 + 4 * v156 + 224) = v164;
        }
      }
      if (v166)
      {
        v157 = *(unsigned __int8 *)(v10 + 31);
        if (v157 <= 7)
        {
          *(_BYTE *)(v10 + 31) = v157 + 1;
          *(_DWORD *)(v10 + 4 * v157 + 224) = v166;
        }
      }
    }
    else if (*(_DWORD *)(v10 + 40) < (int)v13)
    {
      *(_DWORD *)(v10 + 40) = v13;
      *(_DWORD *)(v10 + 44) = v164;
    }
  }
  result = (uint64_t)sub_1ACC29820(v11, 1, v148, v142, v143, v144, v145, v146);
LABEL_199:
  v159 = *(unsigned int *)(v168 + 24);
  v158 = *(unsigned int *)(v168 + 28);
  v160 = *(_DWORD *)(v8 + 144);
  if (*(_DWORD *)(v8 + 148) <= v160)
    return sub_1ACBFF5AC(v8, 10, v158, v159, 0, a6, a7, a8);
  *(_DWORD *)(v8 + 144) = v160 + 1;
  v161 = *(_QWORD *)(v8 + 136) + 40 * v160;
  *(_DWORD *)v161 = 10;
  *(_DWORD *)(v161 + 4) = v158;
  *(_DWORD *)(v161 + 8) = v159;
  *(_QWORD *)(v161 + 12) = 0;
  *(_QWORD *)(v161 + 28) = 0;
  *(_QWORD *)(v161 + 20) = 0;
  *(_DWORD *)(v161 + 36) = 0;
  return result;
}

uint64_t *sub_1ACC2AC14(uint64_t *result, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;

  v12 = result;
  v13 = result[2];
  if (!v13)
  {
    if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0)
      *((_BYTE *)result + 35) = 1;
    result = (uint64_t *)sub_1ACBCB4C8(result, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
    v13 = (uint64_t)result;
    if (a2)
      goto LABEL_3;
LABEL_14:
    v22 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) > v22)
    {
      *(_DWORD *)(v13 + 144) = v22 + 1;
      v23 = *(_QWORD *)(v13 + 136) + 40 * v22;
      *(_QWORD *)v23 = 9;
      *(_DWORD *)(v23 + 8) = a5;
      *(_QWORD *)(v23 + 12) = 0;
      *(_QWORD *)(v23 + 28) = 0;
      *(_QWORD *)(v23 + 20) = 0;
      *(_DWORD *)(v23 + 36) = 0;
      return result;
    }
    v32 = v13;
    v33 = 9;
    v34 = 0;
    v35 = a5;
    v36 = 0;
    return (uint64_t *)sub_1ACBFF5AC(v32, v33, v34, v35, v36, a6, a7, a8);
  }
  if (!a2)
    goto LABEL_14;
LABEL_3:
  v14 = *a2;
  result = (uint64_t *)sub_1ACC092C0(*v12, *a2, 1);
  v18 = result;
  v37 = v14 - 1;
  v19 = (int)v14 < 1 || result == 0;
  if (!v19)
  {
    v24 = 0;
    v25 = a2 + 2;
    do
    {
      result = (uint64_t *)sub_1ACB78620((uint64_t)v12, *(unsigned __int8 **)v25, v15, v16, v17, a6, a7, a8);
      if (!result)
        result = *(uint64_t **)(*v12 + 16);
      v18[v24 + 4] = (uint64_t)result;
      *(_BYTE *)(v18[3] + v24++) = *((_BYTE *)v25 + 16);
      v25 += 6;
    }
    while (v14 != v24);
  }
  v20 = *(_DWORD *)(v13 + 144);
  if (*(_DWORD *)(v13 + 148) <= v20)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v13, 90, a4, a3, v14, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v13 + 144) = v20 + 1;
    v21 = *(_QWORD *)(v13 + 136) + 40 * v20;
    *(_DWORD *)v21 = 90;
    *(_DWORD *)(v21 + 4) = a4;
    *(_DWORD *)(v21 + 8) = a3;
    *(_DWORD *)(v21 + 12) = v14;
    *(_QWORD *)(v21 + 24) = 0;
    *(_QWORD *)(v21 + 32) = 0;
    *(_QWORD *)(v21 + 16) = 0;
  }
  if (*(_BYTE *)(*(_QWORD *)v13 + 103))
  {
    if (v18)
    {
      if (!*(_QWORD *)(*(_QWORD *)v13 + 816))
      {
        v19 = (*(_DWORD *)v18)-- == 1;
        if (v19)
          result = sub_1ACBF0674((_QWORD *)v18[2], v18);
      }
    }
  }
  else
  {
    v26 = *(_QWORD *)(v13 + 136) + 40 * *(int *)(v13 + 144);
    *(_BYTE *)(v26 - 39) = -8;
    *(_QWORD *)(v26 - 24) = v18;
  }
  v27 = *(_DWORD *)(v13 + 144);
  v28 = (v27 + 1);
  if (*(_DWORD *)(v13 + 148) <= v27)
  {
    result = (uint64_t *)sub_1ACBFF5AC(v13, 14, v28, a5, (v27 + 1), a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v13 + 144) = v28;
    v29 = *(_QWORD *)(v13 + 136) + 40 * v27;
    *(_DWORD *)v29 = 14;
    *(_DWORD *)(v29 + 4) = v28;
    *(_DWORD *)(v29 + 8) = a5;
    *(_DWORD *)(v29 + 12) = v28;
    *(_QWORD *)(v29 + 24) = 0;
    *(_QWORD *)(v29 + 32) = 0;
    *(_QWORD *)(v29 + 16) = 0;
  }
  v30 = *(_DWORD *)(v13 + 144);
  if (*(_DWORD *)(v13 + 148) > v30)
  {
    *(_DWORD *)(v13 + 144) = v30 + 1;
    v31 = *(_QWORD *)(v13 + 136) + 40 * v30;
    *(_DWORD *)v31 = 80;
    *(_DWORD *)(v31 + 4) = a3;
    *(_DWORD *)(v31 + 8) = a4;
    *(_DWORD *)(v31 + 12) = v37;
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 32) = 0;
    *(_QWORD *)(v31 + 16) = 0;
    return result;
  }
  v32 = v13;
  v33 = 80;
  v34 = a3;
  v35 = a4;
  v36 = v37;
  return (uint64_t *)sub_1ACBFF5AC(v32, v33, v34, v35, v36, a6, a7, a8);
}

uint64_t sub_1ACC2AED8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int *v56;
  int v57;
  unsigned __int8 v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  BOOL v63;
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _DWORD *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;

  v8 = a3;
  v9 = a2;
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(unsigned __int8 *)(v12 + 32);
  v15 = *(_DWORD *)(*(_QWORD *)a1 + 68);
  v16 = (v15 - 1);
  *(_DWORD *)(*(_QWORD *)a1 + 68) = v16;
  if ((_DWORD)a2 == 2 && *(_BYTE *)(v12 + 33) == 90)
    return 0;
  v78 = a4;
  v79 = v15;
  if ((int)a3 < 1)
  {
LABEL_14:
    v18 = 0;
    if (v9 != 1)
      goto LABEL_19;
    goto LABEL_15;
  }
  v18 = *(unsigned int *)(v13 + 144);
  if (v14 != 89)
  {
    if (*(_DWORD *)(v13 + 148) <= (int)v18)
    {
      sub_1ACBFF5AC(v13, 59, a3, (v15 - 1), 1, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v18 + 1;
      v22 = *(_QWORD *)(v13 + 136) + 40 * (int)v18;
      *(_DWORD *)v22 = 59;
      *(_DWORD *)(v22 + 4) = a3;
      *(_DWORD *)(v22 + 8) = v16;
      *(_DWORD *)(v22 + 12) = 1;
      *(_QWORD *)(v22 + 24) = 0;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 16) = 0;
    }
    goto LABEL_14;
  }
  if ((_DWORD)a2 == 2)
  {
    if (*(_BYTE *)(v12 + 33) == 86)
    {
      v19 = *(unsigned int *)(a1 + 52);
      v20 = *(unsigned int *)(a1 + 44);
      v21 = 55;
    }
    else
    {
      v19 = *(unsigned int *)(a1 + 44);
      v20 = *(unsigned int *)(a1 + 52);
      v21 = 57;
    }
    sub_1ACC2B778((uint64_t *)a1, v21, v19, v8, v20, (v15 - 1), a7, a8);
    goto LABEL_19;
  }
  sub_1ACC2B778((uint64_t *)a1, 54, *(unsigned int *)(a1 + 60), a3, *(unsigned int *)(a1 + 52), (v15 - 1), a7, a8);
  if (v9 != 1)
    goto LABEL_19;
LABEL_15:
  if (!*(_DWORD *)(v12 + 132))
    sub_1ACC29820(a1, 0, a3, a4, a5, a6, a7, a8);
LABEL_19:
  v76 = *(int *)(v13 + 144);
  if (!(_DWORD)v8 || *(unsigned __int8 *)(v12 + 33) != *(unsigned __int8 *)(v12 + 34) || *(_BYTE *)(v12 + 32) != 89)
    goto LABEL_53;
  v23 = *(_BYTE *)(v11 + 31);
  if (!v23)
  {
    v29 = *(_DWORD *)(v11 + 56) + 1;
    v24 = v29;
    goto LABEL_30;
  }
  *(_BYTE *)(v11 + 31) = v23 - 1;
  v24 = *(unsigned int *)(v11 + 4 * (v23 - 1) + 224);
  if (v23 == 1)
  {
    v29 = *(_DWORD *)(v11 + 56);
LABEL_30:
    v26 = v29 + 1;
    *(_DWORD *)(v11 + 56) = v26;
    if (v9 != 2)
      goto LABEL_25;
    goto LABEL_31;
  }
  v25 = v23 - 2;
  *(_BYTE *)(v11 + 31) = v25;
  v26 = *(unsigned int *)(v11 + 4 * v25 + 224);
  if (v9 != 2)
  {
LABEL_25:
    if (!*(_DWORD *)(a1 + 40))
      goto LABEL_44;
    v27 = *(unsigned int *)(a1 + 60);
    if (*(_DWORD *)(v13 + 148) <= (int)v76)
    {
      sub_1ACBFF5AC(v13, 135, v27, v24, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v76 + 1;
      v28 = *(_QWORD *)(v13 + 136) + 40 * (int)v76;
      *(_DWORD *)v28 = 135;
      *(_DWORD *)(v28 + 4) = v27;
      *(_DWORD *)(v28 + 8) = v24;
      *(_QWORD *)(v28 + 12) = 0;
      *(_QWORD *)(v28 + 28) = 0;
      *(_QWORD *)(v28 + 20) = 0;
      *(_DWORD *)(v28 + 36) = 0;
    }
    a3 = *(unsigned int *)(a1 + 40);
    v37 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) > v37)
    {
      *(_DWORD *)(v13 + 144) = v37 + 1;
      v35 = *(_QWORD *)(v13 + 136) + 40 * v37;
      *(_DWORD *)v35 = 57;
      *(_DWORD *)(v35 + 4) = a3;
      goto LABEL_43;
    }
    v36 = v13;
    goto LABEL_47;
  }
LABEL_31:
  v30 = *(unsigned int *)(a1 + 44);
  if (*(_DWORD *)(v13 + 148) <= (int)v76)
  {
    sub_1ACBFF5AC(v13, 135, v30, v24, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v13 + 144) = v76 + 1;
    v31 = *(_QWORD *)(v13 + 136) + 40 * (int)v76;
    *(_DWORD *)v31 = 135;
    *(_DWORD *)(v31 + 4) = v30;
    *(_DWORD *)(v31 + 8) = v24;
    *(_QWORD *)(v31 + 12) = 0;
    *(_QWORD *)(v31 + 28) = 0;
    *(_QWORD *)(v31 + 20) = 0;
    *(_DWORD *)(v31 + 36) = 0;
  }
  a3 = *(unsigned int *)(a1 + 60);
  v32 = *(_DWORD *)(v13 + 144);
  if (*(_DWORD *)(v13 + 148) <= v32)
  {
    sub_1ACBFF5AC(v13, 135, a3, v26, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v13 + 144) = v32 + 1;
    v33 = *(_QWORD *)(v13 + 136) + 40 * v32;
    *(_DWORD *)v33 = 135;
    *(_DWORD *)(v33 + 4) = a3;
    *(_DWORD *)(v33 + 8) = v26;
    *(_QWORD *)(v33 + 12) = 0;
    *(_QWORD *)(v33 + 28) = 0;
    *(_QWORD *)(v33 + 20) = 0;
    *(_DWORD *)(v33 + 36) = 0;
  }
  v34 = *(_DWORD *)(v13 + 144);
  if (*(_DWORD *)(v13 + 148) > v34)
  {
    *(_DWORD *)(v13 + 144) = v34 + 1;
    v35 = *(_QWORD *)(v13 + 136) + 40 * v34;
    *(_DWORD *)v35 = 57;
    *(_DWORD *)(v35 + 4) = v26;
LABEL_43:
    *(_DWORD *)(v35 + 8) = v16;
    *(_DWORD *)(v35 + 12) = v24;
    *(_QWORD *)(v35 + 24) = 0;
    *(_QWORD *)(v35 + 32) = 0;
    *(_QWORD *)(v35 + 16) = 0;
LABEL_44:
    if (!(_DWORD)v24)
      goto LABEL_50;
LABEL_48:
    v38 = *(unsigned __int8 *)(v11 + 31);
    if (v38 <= 7)
    {
      *(_BYTE *)(v11 + 31) = v38 + 1;
      *(_DWORD *)(v11 + 4 * v38 + 224) = v24;
    }
    goto LABEL_50;
  }
  v36 = v13;
  a3 = v26;
LABEL_47:
  sub_1ACBFF5AC(v36, 57, a3, v16, v24, a6, a7, a8);
  if ((_DWORD)v24)
    goto LABEL_48;
LABEL_50:
  if ((_DWORD)v26)
  {
    v39 = *(unsigned __int8 *)(v11 + 31);
    if (v39 <= 7)
    {
      *(_BYTE *)(v11 + 31) = v39 + 1;
      *(_DWORD *)(v11 + 4 * v39 + 224) = v26;
    }
  }
LABEL_53:
  v77 = v18;
  if (v9 == 2)
  {
    v41 = *(unsigned int *)(a1 + 44);
    v40 = *(unsigned int *)(a1 + 48);
    v42 = *(unsigned int *)(v12 + 132);
    if ((_DWORD)v42)
      goto LABEL_60;
    v43 = *(unsigned int *)(a1 + 32);
    v44 = (uint64_t *)a1;
    v45 = v12;
    v46 = *(unsigned int *)(a1 + 44);
    v47 = 1;
    goto LABEL_64;
  }
  if (v9 != 1)
  {
    v41 = *(unsigned int *)(a1 + 60);
    v40 = *(unsigned int *)(a1 + 64);
    if (*(_DWORD *)(v12 + 132))
    {
      v42 = *(unsigned int *)(v12 + 136);
LABEL_60:
      v48 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v48)
      {
        sub_1ACBFF5AC(v13, 86, v42, 1, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v13 + 144) = v48 + 1;
        v49 = *(_QWORD *)(v13 + 136) + 40 * v48;
        *(_DWORD *)v49 = 86;
        *(_DWORD *)(v49 + 4) = v42;
        *(_DWORD *)(v49 + 8) = 1;
        *(_QWORD *)(v49 + 12) = 0;
        *(_QWORD *)(v49 + 28) = 0;
        *(_QWORD *)(v49 + 20) = 0;
        *(_DWORD *)(v49 + 36) = 0;
      }
      goto LABEL_65;
    }
    v43 = *(unsigned int *)(a1 + 32);
    v44 = (uint64_t *)a1;
    v45 = v12;
    v46 = *(unsigned int *)(a1 + 60);
    v47 = 0;
LABEL_64:
    sub_1ACC2BEC4(v44, v45, v46, v47, v43, a6, a7, a8);
    goto LABEL_65;
  }
  v41 = *(unsigned int *)(a1 + 52);
  v40 = *(unsigned int *)(a1 + 56);
  sub_1ACC29BCC(a1, a2, a3, a4, a5, a6, a7, a8);
LABEL_65:
  v50 = *(_DWORD *)(v13 + 144);
  if (*(_DWORD *)(a1 + 36) == v9)
  {
    if (*(_DWORD *)(v13 + 148) <= v50)
    {
      sub_1ACBFF5AC(v13, 130, v41, 0, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v50 + 1;
      v51 = *(_QWORD *)(v13 + 136) + 40 * v50;
      *(_DWORD *)v51 = 130;
      *(_DWORD *)(v51 + 4) = v41;
      *(_OWORD *)(v51 + 8) = 0u;
      *(_OWORD *)(v51 + 24) = 0u;
    }
    v50 = *(_DWORD *)(v13 + 144);
    if (v50 >= 1)
      *(_WORD *)(*(_QWORD *)(v13 + 136) + 40 * (v50 - 1) + 2) = 2;
  }
  if (!v78)
  {
    v52 = v50 + 1 + (v14 != 76);
    if (*(_DWORD *)(v13 + 148) <= v50)
    {
      sub_1ACBFF5AC(v13, 39, v41, v52, 0, a6, a7, a8);
      if (v14 == 76)
        goto LABEL_76;
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v50 + 1;
      v54 = *(_QWORD *)(v13 + 136) + 40 * v50;
      *(_DWORD *)v54 = 39;
      *(_DWORD *)(v54 + 4) = v41;
      *(_DWORD *)(v54 + 8) = v52;
      *(_QWORD *)(v54 + 12) = 0;
      *(_QWORD *)(v54 + 28) = 0;
      *(_QWORD *)(v54 + 20) = 0;
      *(_DWORD *)(v54 + 36) = 0;
      if (v14 == 76)
      {
LABEL_76:
        v17 = 0;
        goto LABEL_106;
      }
    }
    v60 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v60)
    {
      sub_1ACBFF5AC(v13, 9, 0, v16, 0, a6, a7, a8);
      v17 = 0;
      v56 = *(int **)(v12 + 24);
      if (!v56)
        goto LABEL_96;
    }
    else
    {
      v17 = 0;
      *(_DWORD *)(v13 + 144) = v60 + 1;
      v61 = *(_QWORD *)(v13 + 136) + 40 * v60;
      *(_QWORD *)v61 = 9;
      *(_DWORD *)(v61 + 8) = v16;
      *(_QWORD *)(v61 + 12) = 0;
      *(_QWORD *)(v61 + 28) = 0;
      *(_QWORD *)(v61 + 20) = 0;
      *(_DWORD *)(v61 + 36) = 0;
      v56 = *(int **)(v12 + 24);
      if (!v56)
        goto LABEL_96;
    }
LABEL_81:
    v57 = *v56;
    if (*v56)
    {
      if (v57 == 1)
      {
        if (*(_BYTE *)(v11 + 31))
        {
          v58 = *(_BYTE *)(v11 + 31) - 1;
          *(_BYTE *)(v11 + 31) = v58;
          v59 = *(unsigned int *)(v11 + 4 * v58 + 224);
        }
        else
        {
          v59 = (*(_DWORD *)(v11 + 56) + 1);
          *(_DWORD *)(v11 + 56) = v59;
        }
        v57 = 1;
      }
      else
      {
        v62 = *(_DWORD *)(v11 + 40);
        v63 = __OFSUB__(v62, v57);
        v64 = v62 - v57;
        if (v64 < 0 != v63)
        {
          v65 = *(_DWORD *)(v11 + 56);
          v59 = (v65 + 1);
          *(_DWORD *)(v11 + 56) = v65 + v57;
        }
        else
        {
          v59 = *(unsigned int *)(v11 + 44);
          *(_DWORD *)(v11 + 40) = v64;
          *(_DWORD *)(v11 + 44) = v59 + v57;
        }
      }
    }
    else
    {
      v59 = *v56;
    }
    goto LABEL_99;
  }
  v52 = (v50 + 2);
  if (*(_DWORD *)(v13 + 148) <= v50)
  {
    sub_1ACBFF5AC(v13, 39, v41, v52, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v13 + 144) = v50 + 1;
    v53 = *(_QWORD *)(v13 + 136) + 40 * v50;
    *(_DWORD *)v53 = 39;
    *(_DWORD *)(v53 + 4) = v41;
    *(_DWORD *)(v53 + 8) = v52;
    *(_QWORD *)(v53 + 12) = 0;
    *(_QWORD *)(v53 + 28) = 0;
    *(_QWORD *)(v53 + 20) = 0;
    *(_DWORD *)(v53 + 36) = 0;
  }
  v17 = *(unsigned int *)(v13 + 144);
  if (*(_DWORD *)(v13 + 148) <= (int)v17)
  {
    v17 = sub_1ACBFF5AC(v13, 9, 0, 0, 0, a6, a7, a8);
    if (v14 == 76)
      goto LABEL_106;
  }
  else
  {
    *(_DWORD *)(v13 + 144) = v17 + 1;
    v55 = *(_QWORD *)(v13 + 136) + 40 * (int)v17;
    *(_BYTE *)v55 = 9;
    *(_OWORD *)(v55 + 1) = 0u;
    *(_OWORD *)(v55 + 17) = 0u;
    *(_QWORD *)(v55 + 32) = 0;
    if (v14 == 76)
      goto LABEL_106;
  }
  v56 = *(int **)(v12 + 24);
  if (v56)
    goto LABEL_81;
LABEL_96:
  v57 = 0;
  v59 = 0;
LABEL_99:
  sub_1ACC2BDC4((uint64_t *)a1, v41, v59, v52, a5, a6, a7, a8);
  sub_1ACC2AC14((uint64_t *)v11, *(int **)(v12 + 24), v59, v40, v76, v66, v67, v68);
  if (v57 == 1)
  {
    if (!(_DWORD)v59)
      goto LABEL_106;
    v69 = *(unsigned __int8 *)(v11 + 31);
    if (v69 > 7)
      goto LABEL_106;
    *(_BYTE *)(v11 + 31) = v69 + 1;
    v70 = (_DWORD *)(v11 + 4 * v69 + 224);
    goto LABEL_105;
  }
  if (*(_DWORD *)(v11 + 40) < v57)
  {
    *(_DWORD *)(v11 + 40) = v57;
    v70 = (_DWORD *)(v11 + 44);
LABEL_105:
    *v70 = v59;
  }
LABEL_106:
  if ((_DWORD)v77)
  {
    v71 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v71)
    {
      sub_1ACBFF5AC(v13, 9, 0, v77, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v71 + 1;
      v72 = *(_QWORD *)(v13 + 136) + 40 * v71;
      *(_QWORD *)v72 = 9;
      *(_DWORD *)(v72 + 8) = v77;
      *(_QWORD *)(v72 + 12) = 0;
      *(_QWORD *)(v72 + 28) = 0;
      *(_QWORD *)(v72 + 20) = 0;
      *(_DWORD *)(v72 + 36) = 0;
    }
  }
  v73 = *(_QWORD *)(v13 + 24);
  v74 = -v79;
  if (*(_DWORD *)(v73 + 68) + *(_DWORD *)(v73 + 72) < 0)
    sub_1ACC0D5D4(v73, v13, v74);
  else
    *(_DWORD *)(*(_QWORD *)(v73 + 80) + 4 * v74) = *(_DWORD *)(v13 + 144);
  return v17;
}

uint64_t sub_1ACC2B778(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  char *v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  int v61;
  int32x2_t *v62;
  int v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t result;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unsigned __int32 v74;
  int v75;
  uint64_t v76;

  v74 = a4;
  v11 = a2;
  v13 = *a1;
  v14 = *(_QWORD *)(*a1 + 16);
  if (!v14)
  {
    if (!*(_QWORD *)(v13 + 168) && (*(_BYTE *)(*(_QWORD *)v13 + 96) & 8) == 0)
      *(_BYTE *)(v13 + 35) = 1;
    v14 = sub_1ACBCB4C8((uint64_t *)v13, a2, a3, a4, a5, a6, a7, a8);
  }
  v76 = *(_QWORD *)(a1[1] + 24);
  v15 = *(_BYTE *)(v13 + 31);
  if (v15)
  {
    *(_BYTE *)(v13 + 31) = v15 - 1;
    v16 = *(unsigned int *)(v13 + 4 * (v15 - 1) + 224);
    if (v15 != 1)
    {
      v17 = v15 - 2;
      *(_BYTE *)(v13 + 31) = v17;
      v18 = *(unsigned int *)(v13 + 4 * v17 + 224);
      v19 = *(_DWORD *)(v13 + 56);
      goto LABEL_11;
    }
  }
  else
  {
    v16 = (*(_DWORD *)(v13 + 56) + 1);
    *(_DWORD *)(v13 + 56) = v16;
  }
  v19 = *(_DWORD *)(v13 + 56) + 1;
  v18 = v19;
LABEL_11:
  v20 = v19 + 1;
  *(_DWORD *)(v13 + 56) = v20;
  v75 = *(_DWORD *)(v13 + 68);
  v73 = v75 - 1;
  *(_DWORD *)(v13 + 68) = v75 - 1;
  sub_1ACC2BDC4(a1, a3, v16, a4, a5, a6, a7, a8);
  sub_1ACC2BDC4(a1, a5, v18, v21, v22, v23, v24, v25);
  if (v11 == 54)
    v29 = 56;
  else
    v29 = 57;
  if (v11 == 57)
    v29 = 55;
  if ((*(_BYTE *)(v76 + 24) & 1) != 0)
    v30 = v29;
  else
    v30 = v11;
  if ((*(_BYTE *)(v76 + 24) & 1) != 0)
    v31 = 107;
  else
    v31 = 106;
  v32 = a6;
  if ((*(_BYTE *)(v76 + 24) & 2) != 0)
  {
    v33 = v31;
    v34 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v34)
    {
      v34 = sub_1ACBFF5AC(v14, 51, v16, 0, 0, v26, v27, v28);
      if ((_DWORD)v30 != 54)
        goto LABEL_25;
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v34 + 1;
      v35 = *(_QWORD *)(v14 + 136) + 40 * v34;
      *(_DWORD *)v35 = 51;
      *(_DWORD *)(v35 + 4) = v16;
      *(_OWORD *)(v35 + 8) = 0u;
      *(_OWORD *)(v35 + 24) = 0u;
      if ((_DWORD)v30 != 54)
      {
LABEL_25:
        if ((_DWORD)v30 != 55)
        {
          if ((_DWORD)v30 != 57)
          {
LABEL_41:
            v44 = *(_DWORD *)(v14 + 144);
            if (*(_DWORD *)(v14 + 148) <= v44)
            {
              sub_1ACBFF5AC(v14, 9, 0, v73, 0, v26, v27, v28);
            }
            else
            {
              *(_DWORD *)(v14 + 144) = v44 + 1;
              v45 = *(_QWORD *)(v14 + 136) + 40 * v44;
              *(_QWORD *)v45 = 9;
              *(_DWORD *)(v45 + 8) = v73;
              *(_QWORD *)(v45 + 12) = 0;
              *(_QWORD *)(v45 + 28) = 0;
              *(_QWORD *)(v45 + 20) = 0;
              *(_DWORD *)(v45 + 36) = 0;
            }
            v46 = *(_DWORD *)(v14 + 144);
            if (*(_BYTE *)(*(_QWORD *)v14 + 103))
              v47 = &byte_1EECAD280;
            else
              v47 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v34);
            v31 = v33;
            *((_DWORD *)v47 + 2) = v46;
            if ((_DWORD)v30 == 57 || (_DWORD)v30 == 54)
              v49 = v73;
            else
              v49 = v32;
            if (*(_DWORD *)(v14 + 148) <= v46)
            {
              sub_1ACBFF5AC(v14, 50, v18, v49, 0, v26, v27, v28);
            }
            else
            {
              *(_DWORD *)(v14 + 144) = v46 + 1;
              v50 = *(_QWORD *)(v14 + 136) + 40 * v46;
              *(_DWORD *)v50 = 50;
              *(_DWORD *)(v50 + 4) = v18;
              *(_DWORD *)(v50 + 8) = v49;
              *(_QWORD *)(v50 + 12) = 0;
              *(_QWORD *)(v50 + 28) = 0;
              *(_QWORD *)(v50 + 20) = 0;
              *(_DWORD *)(v50 + 36) = 0;
            }
            goto LABEL_56;
          }
          v36 = *(_DWORD *)(v14 + 144);
          if (*(_DWORD *)(v14 + 148) > v36)
          {
            *(_DWORD *)(v14 + 144) = v36 + 1;
            v37 = *(_QWORD *)(v14 + 136) + 40 * v36;
            *(_QWORD *)v37 = 9;
LABEL_35:
            *(_DWORD *)(v37 + 8) = v32;
            *(_QWORD *)(v37 + 12) = 0;
            *(_QWORD *)(v37 + 28) = 0;
            *(_QWORD *)(v37 + 20) = 0;
            *(_DWORD *)(v37 + 36) = 0;
            goto LABEL_41;
          }
          v41 = v14;
          v42 = 9;
          v43 = 0;
LABEL_40:
          sub_1ACBFF5AC(v41, v42, v43, v32, 0, v26, v27, v28);
          goto LABEL_41;
        }
        v40 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) > v40)
        {
          *(_DWORD *)(v14 + 144) = v40 + 1;
          v37 = *(_QWORD *)(v14 + 136) + 40 * v40;
          v39 = 50;
          goto LABEL_34;
        }
        v41 = v14;
        v42 = 50;
        goto LABEL_39;
      }
    }
    v38 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) > v38)
    {
      *(_DWORD *)(v14 + 144) = v38 + 1;
      v37 = *(_QWORD *)(v14 + 136) + 40 * v38;
      v39 = 51;
LABEL_34:
      *(_DWORD *)v37 = v39;
      *(_DWORD *)(v37 + 4) = v18;
      goto LABEL_35;
    }
    v41 = v14;
    v42 = 51;
LABEL_39:
    v43 = v18;
    goto LABEL_40;
  }
LABEL_56:
  sub_1ACBA86CC((uint64_t *)v14, 117, 0, v20, 0, (uint64_t)&byte_1ACCBEAEE, 0xFFFFFFFFLL, v28);
  v57 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v57)
  {
    v57 = sub_1ACBFF5AC(v14, 57, v20, 0, v16, v54, v55, v56);
    if (v11 != 57)
      goto LABEL_63;
LABEL_60:
    v59 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v59)
    {
      sub_1ACBFF5AC(v14, v30, v18, v32, v16, v54, v55, v56);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v59 + 1;
      v60 = *(_QWORD *)(v14 + 136) + 40 * v59;
      *(_BYTE *)v60 = v30;
      *(_WORD *)(v60 + 2) = 0;
      *(_DWORD *)(v60 + 4) = v18;
      *(_DWORD *)(v60 + 8) = v32;
      *(_DWORD *)(v60 + 12) = v16;
      *(_BYTE *)(v60 + 1) = 0;
      *(_QWORD *)(v60 + 24) = 0;
      *(_QWORD *)(v60 + 32) = 0;
      *(_QWORD *)(v60 + 16) = 0;
    }
    goto LABEL_63;
  }
  *(_DWORD *)(v14 + 144) = v57 + 1;
  v58 = *(_QWORD *)(v14 + 136) + 40 * v57;
  *(_DWORD *)v58 = 57;
  *(_DWORD *)(v58 + 4) = v20;
  *(_DWORD *)(v58 + 8) = 0;
  *(_DWORD *)(v58 + 12) = v16;
  *(_QWORD *)(v58 + 24) = 0;
  *(_QWORD *)(v58 + 32) = 0;
  *(_QWORD *)(v58 + 16) = 0;
  if (v11 == 57)
    goto LABEL_60;
LABEL_63:
  v61 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v61)
  {
    sub_1ACBFF5AC(v14, v31, v74, v16, v16, v54, v55, v56);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v61 + 1;
    v62 = (int32x2_t *)(*(_QWORD *)(v14 + 136) + 40 * v61);
    v62->i8[0] = v31;
    v62->i16[1] = 0;
    v62->i32[1] = v74;
    v62[1] = vdup_n_s32(v16);
    v62->i8[1] = 0;
    v62[3] = 0;
    v62[4] = 0;
    v62[2] = 0;
  }
  v63 = *(_DWORD *)(v14 + 144);
  if (*(_BYTE *)(*(_QWORD *)v14 + 103))
    v64 = &byte_1EECAD280;
  else
    v64 = (char *)(*(_QWORD *)(v14 + 136) + 40 * v57);
  *((_DWORD *)v64 + 2) = v63;
  if (*(_DWORD *)(v14 + 148) <= v63)
  {
    sub_1ACBFF5AC(v14, v30, v18, v32, v16, v54, v55, v56);
  }
  else
  {
    *(_DWORD *)(v14 + 144) = v63 + 1;
    v65 = *(_QWORD *)(v14 + 136) + 40 * v63;
    *(_BYTE *)v65 = v30;
    *(_WORD *)(v65 + 2) = 0;
    *(_DWORD *)(v65 + 4) = v18;
    *(_DWORD *)(v65 + 8) = v32;
    *(_DWORD *)(v65 + 12) = v16;
    *(_BYTE *)(v65 + 1) = 0;
    *(_QWORD *)(v65 + 24) = 0;
    *(_QWORD *)(v65 + 32) = 0;
    *(_QWORD *)(v65 + 16) = 0;
  }
  v66 = sub_1ACB78620(v13, *(unsigned __int8 **)(v76 + 8), v51, v52, v53, v54, v55, v56);
  if (!v66)
    v66 = *(_QWORD *)(*(_QWORD *)v13 + 16);
  if (!*(_BYTE *)(*(_QWORD *)v14 + 103))
  {
    v67 = *(_QWORD *)(v14 + 136) + 40 * *(int *)(v14 + 144);
    *(_BYTE *)(v67 - 39) = -2;
    *(_QWORD *)(v67 - 24) = v66;
  }
  v68 = *(_DWORD *)(v14 + 144);
  if (v68 >= 1)
    *(_WORD *)(*(_QWORD *)(v14 + 136) + 40 * (v68 - 1) + 2) = 128;
  result = *(_QWORD *)(v14 + 24);
  v70 = -v75;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
  {
    result = sub_1ACC0D5D4(result, v14, v70);
    if (!(_DWORD)v16)
      goto LABEL_84;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v70) = v68;
    if (!(_DWORD)v16)
      goto LABEL_84;
  }
  v71 = *(unsigned __int8 *)(v13 + 31);
  if (v71 <= 7)
  {
    *(_BYTE *)(v13 + 31) = v71 + 1;
    *(_DWORD *)(v13 + 4 * v71 + 224) = v16;
  }
LABEL_84:
  if ((_DWORD)v18)
  {
    v72 = *(unsigned __int8 *)(v13 + 31);
    if (v72 <= 7)
    {
      *(_BYTE *)(v13 + 31) = v72 + 1;
      *(_DWORD *)(v13 + 4 * v72 + 224) = v18;
    }
  }
  return result;
}

uint64_t *sub_1ACC2BDC4(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int *v9;
  int v10;
  uint64_t v12;
  _DWORD *v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v8 = result[1];
  v9 = *(int **)(v8 + 24);
  if (v9)
  {
    v10 = a3;
    result = (uint64_t *)*result;
    v12 = result[2];
    if (!v12)
    {
      if (!result[21] && (*(_BYTE *)(*result + 96) & 8) == 0)
        *((_BYTE *)result + 35) = 1;
      result = (uint64_t *)sub_1ACBCB4C8(result, a2, a3, a4, a5, a6, a7, a8);
      v12 = (uint64_t)result;
    }
    v13 = *(_DWORD **)(v8 + 16);
    if (v13)
      LODWORD(v13) = *v13;
    if (*v9 >= 1)
    {
      v14 = 0;
      v15 = (_DWORD)v13 + *(_DWORD *)(v8 + 120);
      do
      {
        v17 = (v15 + v14);
        v18 = (v10 + v14);
        v19 = *(_DWORD *)(v12 + 144);
        if (*(_DWORD *)(v12 + 148) > v19)
        {
          *(_DWORD *)(v12 + 144) = v19 + 1;
          v16 = *(_QWORD *)(v12 + 136) + 40 * v19;
          *(_DWORD *)v16 = 94;
          *(_DWORD *)(v16 + 4) = a2;
          *(_DWORD *)(v16 + 8) = v17;
          *(_DWORD *)(v16 + 12) = v18;
          *(_QWORD *)(v16 + 24) = 0;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v16 + 16) = 0;
        }
        else
        {
          result = (uint64_t *)sub_1ACBFF5AC(v12, 94, a2, v17, v18, a6, a7, a8);
        }
        ++v14;
      }
      while (v14 < *v9);
    }
  }
  return result;
}

uint64_t *sub_1ACC2BEC4(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  int *v22;
  int i;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unsigned __int8 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  char *v53;
  _DWORD *v54;
  int v55;
  _QWORD *v56;
  int v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 **v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  _DWORD *v77;
  char *v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  char *v87;
  _DWORD *v88;
  unsigned int v89;
  unsigned int v90;
  uint64_t v91;
  unsigned int v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  int v96;
  uint64_t v97;

  v8 = a5;
  v9 = a4;
  v10 = a3;
  v11 = a2;
  v12 = *result;
  v13 = *(uint64_t **)(*result + 16);
  if (!v13)
  {
    if (!*(_QWORD *)(v12 + 168) && (*(_BYTE *)(*(_QWORD *)v12 + 96) & 8) == 0)
      *(_BYTE *)(v12 + 35) = 1;
    result = (uint64_t *)sub_1ACBCB4C8((uint64_t *)v12, a2, a3, a4, a5, a6, a7, a8);
    v13 = result;
  }
  if (v11)
  {
    v14 = (v8 + 1);
    v88 = (_DWORD *)(v12 + 44);
    if ((_DWORD)v9)
      v15 = 161;
    else
      v15 = 162;
    v95 = v15;
    v16 = v11;
    v92 = v10;
    v93 = v9;
    v91 = v11;
    v89 = v8;
    v90 = v8 + 1;
    do
    {
      v17 = *(_QWORD *)(v16 + 80);
      v97 = v17;
      if (*(_BYTE *)(v16 + 140) || (v22 = *(int **)(*(_QWORD *)(v16 + 112) + 32)) == 0)
      {
        v18 = 0;
      }
      else
      {
        v18 = *v22;
        if (*v22 >= 1)
        {
          for (i = 0; v18 != i; ++i)
          {
            if (i == 1)
            {
              v25 = *((_DWORD *)v13 + 36);
              if (*(char **)(v17 + 56) == "nth_value")
              {
                a3 = *(unsigned int *)(v11 + 88);
                a4 = (*(_DWORD *)(v16 + 124) + 1);
                if (*((_DWORD *)v13 + 37) <= v25)
                {
                  v26 = (uint64_t)v13;
                  a5 = v14;
                  goto LABEL_34;
                }
                *((_DWORD *)v13 + 36) = v25 + 1;
                v24 = v13[17] + 40 * v25;
                *(_DWORD *)v24 = 94;
                *(_DWORD *)(v24 + 4) = a3;
                *(_DWORD *)(v24 + 8) = a4;
                *(_DWORD *)(v24 + 12) = v14;
                goto LABEL_25;
              }
            }
            else
            {
              v25 = *((_DWORD *)v13 + 36);
            }
            a4 = (i + *(_DWORD *)(v16 + 124));
            a5 = (v8 + i);
            if (*((_DWORD *)v13 + 37) <= v25)
            {
              v26 = (uint64_t)v13;
              a3 = v10;
LABEL_34:
              result = (uint64_t *)sub_1ACBFF5AC(v26, 94, a3, a4, a5, a6, a7, a8);
              v17 = v97;
              continue;
            }
            *((_DWORD *)v13 + 36) = v25 + 1;
            v24 = v13[17] + 40 * v25;
            *(_DWORD *)v24 = 94;
            *(_DWORD *)(v24 + 4) = v10;
            *(_DWORD *)(v24 + 8) = a4;
            *(_DWORD *)(v24 + 12) = a5;
LABEL_25:
            *(_QWORD *)(v24 + 24) = 0;
            *(_QWORD *)(v24 + 32) = 0;
            *(_QWORD *)(v24 + 16) = 0;
          }
        }
      }
      if (!*(_DWORD *)(v11 + 132) && (*(_BYTE *)(v17 + 5) & 0x10) != 0 && *(_BYTE *)(v16 + 33) != 90)
      {
        v29 = *((_DWORD *)v13 + 36);
        if (*((_DWORD *)v13 + 37) <= v29)
        {
          result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v13, 50, v8, 0, 0, a6, a7, a8);
          v29 = (int)result;
          if (!(_DWORD)v9)
            goto LABEL_63;
LABEL_42:
          v31 = *(unsigned int *)(v16 + 100);
          v32 = *((_DWORD *)v13 + 36);
          if (*((_DWORD *)v13 + 37) <= v32)
          {
            result = (uint64_t *)sub_1ACBFF7F0((uint64_t)v13, 23, v31, 0, v8, 1, a7, a8);
          }
          else
          {
            *((_DWORD *)v13 + 36) = v32 + 1;
            v33 = v13[17] + 40 * v32;
            *(_DWORD *)v33 = 64791;
            *(_DWORD *)(v33 + 4) = v31;
            *(_DWORD *)(v33 + 8) = 0;
            *(_DWORD *)(v33 + 12) = v8;
            *(_DWORD *)(v33 + 16) = 1;
            *(_QWORD *)(v33 + 24) = 0;
            *(_QWORD *)(v33 + 32) = 0;
          }
          a3 = *(unsigned int *)(v16 + 100);
          v50 = *((_DWORD *)v13 + 36);
          if (*((_DWORD *)v13 + 37) <= v50)
          {
            result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v13, 130, a3, 0, 0, a6, a7, a8);
          }
          else
          {
            *((_DWORD *)v13 + 36) = v50 + 1;
            v51 = v13[17] + 40 * v50;
            *(_DWORD *)v51 = 130;
            *(_DWORD *)(v51 + 4) = a3;
            *(_OWORD *)(v51 + 8) = 0u;
            *(_OWORD *)(v51 + 24) = 0u;
          }
          v52 = *((_DWORD *)v13 + 36);
          v53 = &byte_1EECAD280;
          if (!*(_BYTE *)(*v13 + 103))
            v53 = (char *)(v13[17] + 40 * (v52 - 2));
          *((_DWORD *)v53 + 2) = v52;
        }
        else
        {
          *((_DWORD *)v13 + 36) = v29 + 1;
          v30 = v13[17] + 40 * v29;
          *(_DWORD *)v30 = 50;
          *(_DWORD *)(v30 + 4) = v8;
          *(_OWORD *)(v30 + 8) = 0u;
          *(_OWORD *)(v30 + 24) = 0u;
          if ((_DWORD)v9)
            goto LABEL_42;
LABEL_63:
          v47 = (*(_DWORD *)(v16 + 104) + 1);
          v48 = *((_DWORD *)v13 + 36);
          if (*((_DWORD *)v13 + 37) <= v48)
          {
            result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v13, 86, v47, 1, 0, a6, a7, a8);
          }
          else
          {
            *((_DWORD *)v13 + 36) = v48 + 1;
            v49 = v13[17] + 40 * v48;
            *(_DWORD *)v49 = 86;
            *(_DWORD *)(v49 + 4) = v47;
            *(_DWORD *)(v49 + 8) = 1;
            *(_QWORD *)(v49 + 12) = 0;
            *(_QWORD *)(v49 + 28) = 0;
            *(_QWORD *)(v49 + 20) = 0;
            *(_DWORD *)(v49 + 36) = 0;
          }
          v79 = *(unsigned int *)(v16 + 104);
          v80 = *((_DWORD *)v13 + 36);
          if (*((_DWORD *)v13 + 37) <= v80)
          {
            result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v13, 81, v8, v79, 0, a6, a7, a8);
          }
          else
          {
            *((_DWORD *)v13 + 36) = v80 + 1;
            v81 = v13[17] + 40 * v80;
            *(_DWORD *)v81 = 81;
            *(_DWORD *)(v81 + 4) = v8;
            *(_DWORD *)(v81 + 8) = v79;
            *(_QWORD *)(v81 + 12) = 0;
            *(_QWORD *)(v81 + 28) = 0;
            *(_QWORD *)(v81 + 20) = 0;
            *(_DWORD *)(v81 + 36) = 0;
          }
          v82 = *(unsigned int *)(v16 + 104);
          a5 = (v82 + 2);
          v83 = *((_DWORD *)v13 + 36);
          if (*((_DWORD *)v13 + 37) <= v83)
          {
            result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v13, 97, v82, 2, a5, a6, a7, a8);
          }
          else
          {
            *((_DWORD *)v13 + 36) = v83 + 1;
            v84 = v13[17] + 40 * v83;
            *(_DWORD *)v84 = 97;
            *(_DWORD *)(v84 + 4) = v82;
            *(_DWORD *)(v84 + 8) = 2;
            *(_DWORD *)(v84 + 12) = a5;
            *(_QWORD *)(v84 + 24) = 0;
            *(_QWORD *)(v84 + 32) = 0;
            *(_QWORD *)(v84 + 16) = 0;
          }
          a3 = *(unsigned int *)(v16 + 100);
          a4 = (*(_DWORD *)(v16 + 104) + 2);
          v85 = *((_DWORD *)v13 + 36);
          if (*((_DWORD *)v13 + 37) <= v85)
          {
            result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v13, 138, a3, a4, 0, a6, a7, a8);
          }
          else
          {
            *((_DWORD *)v13 + 36) = v85 + 1;
            v86 = v13[17] + 40 * v85;
            *(_DWORD *)v86 = 138;
            *(_DWORD *)(v86 + 4) = a3;
            *(_DWORD *)(v86 + 8) = a4;
            *(_QWORD *)(v86 + 12) = 0;
            *(_QWORD *)(v86 + 28) = 0;
            *(_QWORD *)(v86 + 20) = 0;
            *(_DWORD *)(v86 + 36) = 0;
          }
        }
        v87 = &byte_1EECAD280;
        if (!*(_BYTE *)(*v13 + 103))
          v87 = (char *)(v13[17] + 40 * v29);
        *((_DWORD *)v87 + 2) = *((_DWORD *)v13 + 36);
        goto LABEL_12;
      }
      v19 = *(_DWORD *)(v16 + 104);
      if (v19)
      {
        a3 = (v19 - v9 + 1);
        v20 = *((_DWORD *)v13 + 36);
        if (*((_DWORD *)v13 + 37) <= v20)
        {
          result = (uint64_t *)sub_1ACBFF5AC((uint64_t)v13, 86, a3, 1, 0, a6, a7, a8);
        }
        else
        {
          *((_DWORD *)v13 + 36) = v20 + 1;
          v21 = v13[17] + 40 * v20;
          *(_DWORD *)v21 = 86;
          *(_DWORD *)(v21 + 4) = a3;
          *(_DWORD *)(v21 + 8) = 1;
          *(_QWORD *)(v21 + 12) = 0;
          *(_QWORD *)(v21 + 28) = 0;
          *(_QWORD *)(v21 + 20) = 0;
          *(_DWORD *)(v21 + 36) = 0;
        }
      }
      else if (*(uint64_t (**)())(v17 + 24) != nullsub_9)
      {
        if (!*(_QWORD *)(v16 + 72))
        {
          v96 = 0;
          goto LABEL_55;
        }
        if (*(_BYTE *)(v12 + 31))
        {
          v27 = *(_BYTE *)(v12 + 31) - 1;
          *(_BYTE *)(v12 + 31) = v27;
          v28 = *(unsigned int *)(v12 + 4 * v27 + 224);
        }
        else
        {
          v28 = (*(_DWORD *)(v12 + 56) + 1);
          *(_DWORD *)(v12 + 56) = v28;
        }
        a4 = (*(_DWORD *)(v16 + 124) + v18);
        v34 = *((_DWORD *)v13 + 36);
        if (*((_DWORD *)v13 + 37) <= v34)
        {
          sub_1ACBFF5AC((uint64_t)v13, 94, v10, a4, v28, a6, a7, a8);
        }
        else
        {
          *((_DWORD *)v13 + 36) = v34 + 1;
          v35 = v13[17] + 40 * v34;
          *(_DWORD *)v35 = 94;
          *(_DWORD *)(v35 + 4) = v10;
          *(_DWORD *)(v35 + 8) = a4;
          *(_DWORD *)(v35 + 12) = v28;
          *(_QWORD *)(v35 + 24) = 0;
          *(_QWORD *)(v35 + 32) = 0;
          *(_QWORD *)(v35 + 16) = 0;
        }
        v36 = *((_DWORD *)v13 + 36);
        if (*((_DWORD *)v13 + 37) <= v36)
        {
          v96 = sub_1ACBFF5AC((uint64_t)v13, 17, v28, 0, 1, a6, a7, a8);
          v17 = v97;
          if (!(_DWORD)v28)
            goto LABEL_55;
        }
        else
        {
          v96 = *((_DWORD *)v13 + 36);
          *((_DWORD *)v13 + 36) = v36 + 1;
          v37 = v13[17] + 40 * v36;
          *(_DWORD *)v37 = 17;
          *(_DWORD *)(v37 + 4) = v28;
          *(_QWORD *)(v37 + 8) = 0x100000000;
          *(_QWORD *)(v37 + 24) = 0;
          *(_QWORD *)(v37 + 32) = 0;
          *(_QWORD *)(v37 + 16) = 0;
          v17 = v97;
          if (!(_DWORD)v28)
            goto LABEL_55;
        }
        v38 = *(unsigned __int8 *)(v12 + 31);
        if (v38 <= 7)
        {
          *(_BYTE *)(v12 + 31) = v38 + 1;
          *(_DWORD *)(v12 + 4 * v38 + 224) = v28;
        }
LABEL_55:
        v39 = v8;
        if (*(_BYTE *)(v16 + 140))
        {
          v40 = *((int *)v13 + 36);
          v41 = *(_QWORD *)(v16 + 112);
          v18 = **(_DWORD **)(v41 + 32);
          if (v18 == 1)
          {
            if (*(_BYTE *)(v12 + 31))
            {
              v42 = *(_BYTE *)(v12 + 31) - 1;
              *(_BYTE *)(v12 + 31) = v42;
              v39 = *(unsigned int *)(v12 + 4 * v42 + 224);
            }
            else
            {
              v39 = (*(_DWORD *)(v12 + 56) + 1);
              *(_DWORD *)(v12 + 56) = v39;
            }
          }
          else
          {
            v43 = *(_DWORD *)(v12 + 40);
            v44 = __OFSUB__(v43, v18);
            v45 = v43 - v18;
            if (v45 < 0 != v44)
            {
              v46 = *(_DWORD *)(v12 + 56);
              v39 = (v46 + 1);
              *(_DWORD *)(v12 + 56) = v46 + v18;
            }
            else
            {
              v39 = *(unsigned int *)(v12 + 44);
              *(_DWORD *)(v12 + 40) = v45;
              *(_DWORD *)(v12 + 44) = v39 + v18;
            }
          }
          v54 = *(_DWORD **)(v41 + 32);
          v55 = *v54;
          if ((int)*v54 < 1)
          {
            v10 = v92;
            v9 = v93;
            v11 = v91;
            v14 = v90;
            goto LABEL_89;
          }
          v94 = v40;
          v56 = (_QWORD *)v12;
          v57 = 0;
          v58 = v56;
          v59 = v56[2];
          v60 = (unsigned __int8 **)(v54 + 2);
          do
          {
            v62 = sub_1ACB7B84C(v58, *v60, (v39 + v57), a4, a5, a6, a7, a8);
            if ((_DWORD)v39 + v57 != (_DWORD)v62)
            {
              a3 = v62;
              v63 = *(_DWORD *)(v59 + 144);
              if (*(_DWORD *)(v59 + 148) > v63)
              {
                *(_DWORD *)(v59 + 144) = v63 + 1;
                v61 = *(_QWORD *)(v59 + 136) + 40 * v63;
                *(_DWORD *)v61 = 81;
                *(_DWORD *)(v61 + 4) = v62;
                *(_DWORD *)(v61 + 8) = v39 + v57;
                *(_QWORD *)(v61 + 12) = 0;
                *(_QWORD *)(v61 + 28) = 0;
                *(_QWORD *)(v61 + 20) = 0;
                *(_DWORD *)(v61 + 36) = 0;
              }
              else
              {
                sub_1ACBFF5AC(v59, 81, v62, (v39 + v57), 0, a6, a7, a8);
              }
            }
            ++v57;
            v60 += 3;
          }
          while (v55 != v57);
          v64 = *((int *)v13 + 36);
          if ((int)v94 < (int)v64)
          {
            v65 = *(unsigned __int8 *)(*v13 + 103);
            v66 = 40 * v94;
            v67 = v64 - v94;
            v10 = v92;
            v9 = v93;
            v11 = v91;
            v12 = (uint64_t)v58;
            v8 = v89;
            v14 = v90;
            v17 = v97;
            do
            {
              v68 = &byte_1EECAD280;
              if (!v65)
                v68 = (char *)(v13[17] + v66);
              if (*v68 == 94 && *((_DWORD *)v68 + 1) == *(_DWORD *)(v91 + 88))
                *((_DWORD *)v68 + 1) = v92;
              v66 += 40;
              --v67;
            }
            while (v67);
            goto LABEL_89;
          }
          v10 = v92;
          v9 = v93;
          v11 = v91;
          v12 = (uint64_t)v58;
          v8 = v89;
          v14 = v90;
          v17 = v97;
          if ((*(_BYTE *)(v97 + 4) & 0x20) == 0)
          {
LABEL_93:
            a5 = *(unsigned int *)(v16 + 92);
            v71 = *((_DWORD *)v13 + 36);
            if (*((_DWORD *)v13 + 37) <= v71)
            {
              sub_1ACBFF5AC((uint64_t)v13, v95, v9, v39, a5, a6, a7, a8);
              v17 = v97;
            }
            else
            {
              *((_DWORD *)v13 + 36) = v71 + 1;
              v72 = v13[17] + 40 * v71;
              *(_BYTE *)v72 = v95;
              *(_WORD *)(v72 + 2) = 0;
              *(_DWORD *)(v72 + 4) = v9;
              *(_DWORD *)(v72 + 8) = v39;
              *(_DWORD *)(v72 + 12) = a5;
              *(_BYTE *)(v72 + 1) = 0;
              *(_QWORD *)(v72 + 24) = 0;
              *(_QWORD *)(v72 + 32) = 0;
              *(_QWORD *)(v72 + 16) = 0;
            }
            result = (uint64_t *)*v13;
            if (*(_BYTE *)(*v13 + 103))
            {
              if ((*(_BYTE *)(v17 + 4) & 0x10) != 0)
                result = sub_1ACBF0674(result, (_QWORD *)v17);
            }
            else
            {
              v73 = v13[17] + 40 * *((int *)v13 + 36);
              *(_BYTE *)(v73 - 39) = -7;
              *(_QWORD *)(v73 - 24) = v17;
            }
            v74 = *((_DWORD *)v13 + 36);
            v44 = __OFSUB__(v74, 1);
            v75 = v74 - 1;
            if (v75 < 0 == v44)
              *(_WORD *)(v13[17] + 40 * v75 + 2) = v18;
            if (*(_BYTE *)(v16 + 140))
            {
              if (v18 == 1)
              {
                if ((_DWORD)v39)
                {
                  v76 = *(unsigned __int8 *)(v12 + 31);
                  if (v76 <= 7)
                  {
                    *(_BYTE *)(v12 + 31) = v76 + 1;
                    v77 = (_DWORD *)(v12 + 4 * v76 + 224);
                    goto LABEL_109;
                  }
                }
              }
              else if (*(_DWORD *)(v12 + 40) < v18)
              {
                *(_DWORD *)(v12 + 40) = v18;
                v77 = v88;
LABEL_109:
                *v77 = v39;
              }
            }
            if (v96)
            {
              v78 = &byte_1EECAD280;
              if (!*(_BYTE *)(*v13 + 103))
                v78 = (char *)(v13[17] + 40 * v96);
              *((_DWORD *)v78 + 2) = *((_DWORD *)v13 + 36);
            }
            goto LABEL_12;
          }
        }
        else
        {
LABEL_89:
          if ((*(_BYTE *)(v17 + 4) & 0x20) == 0)
            goto LABEL_93;
        }
        v69 = sub_1ACB78620(v12, *(unsigned __int8 **)(*(_QWORD *)(*(_QWORD *)(v16 + 112) + 32) + 8), a3, a4, a5, a6, a7, a8);
        if (!v69)
          v69 = *(_QWORD *)(*(_QWORD *)v12 + 16);
        sub_1ACBA86CC(v13, 85, 0, 0, 0, v69, 4294967294, v70);
        v17 = v97;
        goto LABEL_93;
      }
LABEL_12:
      v16 = *(_QWORD *)(v16 + 64);
    }
    while (v16);
  }
  return result;
}

uint64_t sub_1ACC2C898(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 **v17;
  unsigned int v18;
  char *v19;
  int v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  int v31;
  unsigned __int8 v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  int v43;
  uint64_t v44;
  unsigned int v46;
  unsigned int v47;
  unsigned int v48;

  v48 = a4;
  if (a2 == 1)
    return 0;
  v8 = a6;
  v10 = *a5;
  v11 = *(_QWORD *)(a1 + 16);
  if (a2 == 2)
  {
    v12 = *(_DWORD *)(a1 + 56);
    v13 = (v12 + 1);
    *(_DWORD *)(a1 + 56) = v12 + v10;
    v14 = *(_DWORD *)(v11 + 144);
    v15 = (v10 - 1);
    if ((int)v10 >= 1)
    {
      v16 = 0;
      v46 = a6;
      v47 = v14 + v10;
      v17 = (unsigned __int8 **)(a5 + 2);
      v18 = a6;
      while (1)
      {
        v19 = (char *)sub_1ACB78620(a1, *v17, a3, a4, (uint64_t)a5, a6, a7, a8);
        a3 = v18 + v16;
        a5 = (unsigned int *)(v13 + v16);
        v20 = *(_DWORD *)(v11 + 148);
        v21 = *(_DWORD *)(v11 + 144);
        if (v16 >= v15)
        {
          if (v20 <= v21)
          {
            v24 = v11;
            v25 = 53;
            v26 = v48;
            goto LABEL_14;
          }
          *(_DWORD *)(v11 + 144) = v21 + 1;
          v22 = *(_QWORD *)(v11 + 136) + 40 * v21;
          *(_DWORD *)v22 = 53;
          *(_DWORD *)(v22 + 4) = a3;
          v23 = v48;
        }
        else
        {
          if (v20 <= v21)
          {
            v24 = v11;
            v25 = 52;
            v26 = v47;
LABEL_14:
            sub_1ACBFF5AC(v24, v25, a3, v26, (uint64_t)a5, a6, a7, a8);
            goto LABEL_15;
          }
          *(_DWORD *)(v11 + 144) = v21 + 1;
          v22 = *(_QWORD *)(v11 + 136) + 40 * v21;
          *(_DWORD *)v22 = 52;
          *(_DWORD *)(v22 + 4) = a3;
          v23 = v47;
        }
        *(_DWORD *)(v22 + 8) = v23;
        *(_DWORD *)(v22 + 12) = (_DWORD)a5;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        *(_QWORD *)(v22 + 16) = 0;
LABEL_15:
        if (!*(_BYTE *)(*(_QWORD *)v11 + 103))
        {
          v27 = *(int *)(v11 + 144) - 1;
          v28 = *(_QWORD *)(v11 + 136);
          v29 = v28 + 40 * v27;
          v31 = *(unsigned __int8 *)(v29 + 1);
          v30 = (_BYTE *)(v29 + 1);
          if (v31)
          {
            sub_1ACBFF884((uint64_t *)v11, v28 + 40 * v27, v19, 0xFFFFFFFE);
          }
          else if (v19)
          {
            *(_QWORD *)(v28 + 40 * v27 + 16) = v19;
            *v30 = -2;
          }
        }
        v14 = *(_DWORD *)(v11 + 144);
        if (v14 >= 1)
          *(_WORD *)(*(_QWORD *)(v11 + 136) + 40 * (v14 - 1) + 2) = 128;
        ++v16;
        v17 += 3;
        if (v10 == v16)
        {
          v8 = v46;
          break;
        }
      }
    }
    if (*(_DWORD *)(v11 + 148) <= v14)
    {
      sub_1ACBFF5AC(v11, 80, v8, v13, (v10 - 1), a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v11 + 144) = v14 + 1;
      v34 = *(_QWORD *)(v11 + 136) + 40 * v14;
      *(_DWORD *)v34 = 80;
      *(_DWORD *)(v34 + 4) = v8;
      *(_DWORD *)(v34 + 8) = v13;
      *(_DWORD *)(v34 + 12) = v15;
      *(_QWORD *)(v34 + 24) = 0;
      *(_QWORD *)(v34 + 32) = 0;
      *(_QWORD *)(v34 + 16) = 0;
    }
  }
  else
  {
    v13 = a3;
    if (*(_BYTE *)(a1 + 31))
    {
      v32 = *(_BYTE *)(a1 + 31) - 1;
      *(_BYTE *)(a1 + 31) = v32;
      v33 = *(unsigned int *)(a1 + 4 * v32 + 224);
    }
    else
    {
      v33 = (*(_DWORD *)(a1 + 56) + 1);
      *(_DWORD *)(a1 + 56) = v33;
    }
    v35 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v35)
    {
      sub_1ACBFF7F0(v11, 29, a3, a4, a6, v10, a7, a8);
    }
    else
    {
      *(_DWORD *)(v11 + 144) = v35 + 1;
      v36 = *(_QWORD *)(v11 + 136) + 40 * v35;
      *(_DWORD *)v36 = 64797;
      *(_DWORD *)(v36 + 4) = a3;
      *(_DWORD *)(v36 + 8) = a4;
      *(_DWORD *)(v36 + 12) = a6;
      *(_DWORD *)(v36 + 16) = v10;
      *(_QWORD *)(v36 + 24) = 0;
      *(_QWORD *)(v36 + 32) = 0;
    }
    v37 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v37)
    {
      sub_1ACBFF5AC(v11, 97, v8, v10, v33, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v11 + 144) = v37 + 1;
      v38 = *(_QWORD *)(v11 + 136) + 40 * v37;
      *(_DWORD *)v38 = 97;
      *(_DWORD *)(v38 + 4) = v8;
      *(_DWORD *)(v38 + 8) = v10;
      *(_DWORD *)(v38 + 12) = v33;
      *(_QWORD *)(v38 + 24) = 0;
      *(_QWORD *)(v38 + 32) = 0;
      *(_QWORD *)(v38 + 16) = 0;
    }
    v39 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v39)
    {
      sub_1ACBFF7F0(v11, 138, v13, v33, v8, v10, a7, a8);
    }
    else
    {
      *(_DWORD *)(v11 + 144) = v39 + 1;
      v40 = *(_QWORD *)(v11 + 136) + 40 * v39;
      *(_DWORD *)v40 = 64906;
      *(_DWORD *)(v40 + 4) = v13;
      *(_DWORD *)(v40 + 8) = v33;
      *(_DWORD *)(v40 + 12) = v8;
      *(_DWORD *)(v40 + 16) = v10;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0;
    }
    v41 = *(_DWORD *)(v11 + 144);
    v42 = __OFSUB__(v41, 1);
    v43 = v41 - 1;
    if (v43 < 0 == v42)
      *(_WORD *)(*(_QWORD *)(v11 + 136) + 40 * v43 + 2) = 16;
    if ((_DWORD)v33)
    {
      v44 = *(unsigned __int8 *)(a1 + 31);
      if (v44 <= 7)
      {
        *(_BYTE *)(a1 + 31) = v44 + 1;
        *(_DWORD *)(a1 + 4 * v44 + 224) = v33;
      }
    }
  }
  return v13;
}

_QWORD *sub_1ACC2CC30(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t i;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int *v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _QWORD *result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int16x8_t v47;
  _QWORD *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t j;
  unsigned int *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  int v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  _QWORD *v74;
  char *v75;
  unsigned int *v76;
  uint64_t *v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t v80;
  unsigned int v81;
  uint64_t v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  LODWORD(i) = a2;
  v11 = (uint64_t *)*a1;
  v12 = a1[1];
  v13 = *(_QWORD *)(*a1 + 16);
  v14 = *(unsigned int **)(a3 + 56);
  v15 = *(_QWORD *)(a3 + 96);
  v79 = *(unsigned __int8 *)(a3 + 64);
  v16 = (uint64_t *)(v12 + 104 * *(unsigned __int8 *)(a3 + 64));
  v17 = (_QWORD *)v16[5];
  v16 += 5;
  v18 = v16 - 4;
  sub_1ACC0BE9C((uint64_t *)*a1, 1, "RIGHT-JOIN %s", a4, a5, a6, a7, a8, *v17);
  v76 = v14;
  v77 = v16;
  v78 = a3;
  v80 = v12;
  v22 = 0;
  if ((int)i >= 1)
  {
    v23 = (unsigned int *)a1 + 215;
    for (i = i; i; --i)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(v23 + 23) + 8);
      v26 = *v23;
      v27 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v27)
      {
        sub_1ACBFF5AC(v13, 136, v26, 0, 0, v19, v20, v21);
        v29 = v23[1];
        if ((_DWORD)v29)
        {
LABEL_9:
          v30 = *(_DWORD *)(v13 + 144);
          if (*(_DWORD *)(v13 + 148) > v30)
          {
            *(_DWORD *)(v13 + 144) = v30 + 1;
            v24 = *(_QWORD *)(v13 + 136) + 40 * v30;
            *(_DWORD *)v24 = 136;
            *(_DWORD *)(v24 + 4) = v29;
            *(_OWORD *)(v24 + 8) = 0u;
            *(_OWORD *)(v24 + 24) = 0u;
          }
          else
          {
            sub_1ACBFF5AC(v13, 136, v29, 0, 0, v19, v20, v21);
          }
        }
      }
      else
      {
        *(_DWORD *)(v13 + 144) = v27 + 1;
        v28 = *(_QWORD *)(v13 + 136) + 40 * v27;
        *(_DWORD *)v28 = 136;
        *(_DWORD *)(v28 + 4) = v26;
        *(_OWORD *)(v28 + 8) = 0u;
        *(_OWORD *)(v28 + 24) = 0u;
        v29 = v23[1];
        if ((_DWORD)v29)
          goto LABEL_9;
      }
      v22 |= v25;
      v23 += 30;
    }
  }
  if ((*(_BYTE *)(v80 + 104 * v79 + 68) & 0x40) != 0 || (v31 = *((_DWORD *)a1 + 31), v31 < 1))
  {
    v34 = 0;
  }
  else
  {
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = ~(*(_QWORD *)(v15 + 8) | v22);
    do
    {
      v36 = a1[17] + v32;
      if ((*(_WORD *)(v36 + 18) & 0x8002) != 0 && *(_WORD *)(v36 + 20) != 0x2000)
        break;
      if ((*(_QWORD *)(v36 + 48) & v35) == 0 && (*(_BYTE *)(*(_QWORD *)v36 + 4) & 3) == 0)
      {
        v37 = sub_1ACB8B290(*v11, *(unsigned __int8 **)v36, 0, 0);
        v34 = (unsigned __int8 *)sub_1ACC04474(v11, (uint64_t)v34, (uint64_t)v37);
        v31 = *((_DWORD *)a1 + 31);
      }
      ++v33;
      v32 += 56;
    }
    while (v33 < v31);
  }
  v82 = 0x100000001;
  v39 = *((_OWORD *)v18 + 4);
  v38 = *((_OWORD *)v18 + 5);
  v40 = v18[12];
  v86 = *((_OWORD *)v18 + 3);
  v41 = *(_OWORD *)v18;
  v42 = *((_OWORD *)v18 + 2);
  v84 = *((_OWORD *)v18 + 1);
  v85 = v42;
  v89 = v40;
  v87 = v39;
  v88 = v38;
  v83 = v41;
  BYTE12(v86) = 0;
  ++*((_BYTE *)v11 + 38);
  result = (_QWORD *)sub_1ACB78E3C(v11, &v82, v34, 0, 0, 0, 4096, 0);
  if (result)
  {
    v48 = result;
    v49 = *(unsigned int *)(v78 + 4);
    v50 = *((_DWORD *)v11 + 14);
    v51 = (v50 + 1);
    *((_DWORD *)v11 + 14) = v51;
    v52 = *((unsigned int *)result + 12);
    v53 = *v77;
    if ((*(_BYTE *)(*v77 + 48) & 0x80) != 0)
    {
      v81 = *((_DWORD *)result + 12);
      v56 = v53 + 16;
      do
      {
        v57 = *(_QWORD *)v56;
        v58 = *(_WORD *)(*(_QWORD *)v56 + 99) & 3;
        v56 = *(_QWORD *)v56 + 40;
      }
      while (v58 != 2);
      v59 = *(unsigned __int16 *)(v57 + 94);
      *((_DWORD *)v11 + 14) = v50 + v59;
      if ((_DWORD)v59)
      {
        for (j = 0; j != v59; ++j)
          *(double *)v47.i64 = sub_1ACC0B288(v13, v53, v49, *(__int16 *)(*(_QWORD *)(v57 + 8) + 2 * j), (v51 + j), v44, v45, v46, v47);
      }
      v61 = v76;
      v52 = v81;
    }
    else
    {
      v54 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v54)
      {
        sub_1ACBFF5AC(v13, 135, v49, v51, 0, v44, v45, v46);
      }
      else
      {
        *(_DWORD *)(v13 + 144) = v54 + 1;
        v55 = *(_QWORD *)(v13 + 136) + 40 * v54;
        *(_DWORD *)v55 = 135;
        *(_DWORD *)(v55 + 4) = v49;
        *(_DWORD *)(v55 + 8) = v51;
        *(_QWORD *)(v55 + 12) = 0;
        *(_QWORD *)(v55 + 28) = 0;
        *(_QWORD *)(v55 + 20) = 0;
        *(_DWORD *)(v55 + 36) = 0;
      }
      v59 = 1;
      v61 = v76;
    }
    v62 = v61[1];
    v63 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v63)
    {
      v63 = sub_1ACBFF7F0(v13, 64, v62, 0, v51, v59, v45, v46);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v63 + 1;
      v64 = *(_QWORD *)(v13 + 136) + 40 * v63;
      *(_DWORD *)v64 = 64832;
      *(_DWORD *)(v64 + 4) = v62;
      *(_DWORD *)(v64 + 8) = 0;
      *(_DWORD *)(v64 + 12) = v51;
      *(_DWORD *)(v64 + 16) = v59;
      *(_QWORD *)(v64 + 24) = 0;
      *(_QWORD *)(v64 + 32) = 0;
    }
    v65 = *v61;
    v66 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v66)
    {
      sub_1ACBFF7F0(v13, 29, v65, v52, v51, v59, v45, v46);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v66 + 1;
      v67 = *(_QWORD *)(v13 + 136) + 40 * v66;
      *(_DWORD *)v67 = 64797;
      *(_DWORD *)(v67 + 4) = v65;
      *(_DWORD *)(v67 + 8) = v52;
      *(_DWORD *)(v67 + 12) = v51;
      *(_DWORD *)(v67 + 16) = v59;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0;
    }
    v68 = *(_DWORD *)(v13 + 144);
    if (*(_BYTE *)(*(_QWORD *)v13 + 103))
      v69 = &byte_1EECAD280;
    else
      v69 = (char *)(*(_QWORD *)(v13 + 136) + 40 * v63);
    *((_DWORD *)v69 + 2) = v68;
    v70 = v61[2];
    v71 = v61[3];
    if (*(_DWORD *)(v13 + 148) <= v68)
    {
      sub_1ACBFF5AC(v13, 10, v70, v71, 0, v44, v45, v46);
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v68 + 1;
      v72 = *(_QWORD *)(v13 + 136) + 40 * v68;
      *(_DWORD *)v72 = 10;
      *(_DWORD *)(v72 + 4) = v70;
      *(_DWORD *)(v72 + 8) = v71;
      *(_QWORD *)(v72 + 12) = 0;
      *(_QWORD *)(v72 + 28) = 0;
      *(_QWORD *)(v72 + 20) = 0;
      *(_DWORD *)(v72 + 36) = 0;
    }
    result = (_QWORD *)sub_1ACB7D270(v48);
  }
  if (v34)
    result = sub_1ACBF8348((_QWORD *)*v11, v34);
  v73 = *((_DWORD *)v11 + 78);
  if (v73)
  {
    v74 = (_QWORD *)v11[2];
    if (*(_BYTE *)(*v74 + 103))
      v75 = &byte_1EECAD280;
    else
      v75 = (char *)(v74[17] + 40 * v73);
    v73 = *((_DWORD *)v75 + 2);
  }
  *((_DWORD *)v11 + 78) = v73;
  --*((_BYTE *)v11 + 38);
  return result;
}

uint64_t sub_1ACC2D15C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v9;
  __int128 *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  if (*(_BYTE *)a2 == 44)
    return 0;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(uint64_t **)a1;
  v7 = *(_QWORD *)(v5 + 56);
  *(_QWORD *)&v20 = 0x100000000;
  v2 = 1;
  *((_QWORD *)&v18 + 1) = sub_1ACC19EB8;
  v19 = 0uLL;
  *((_QWORD *)&v20 + 1) = v7;
  *(_QWORD *)&v18 = v6;
  sub_1ACC0B714((uint64_t)&v18, a2);
  if (WORD2(v20))
  {
    if ((*(_DWORD *)(a2 + 4) & 0x20000001) == 0x20000000 || *(_QWORD *)(a2 + 64))
    {
      return 1;
    }
    else
    {
      v9 = **(_QWORD **)a1;
      v2 = 1;
      *(_QWORD *)&v18 = "1";
      *((_QWORD *)&v18 + 1) = 1;
      v10 = (__int128 *)sub_1ACB6DDF8(v9, 155, (uint64_t)&v18, 0);
      if (v10)
      {
        v11 = *(_QWORD *)(v5 + 48);
        v19 = v10[1];
        v20 = v10[2];
        v21 = v10[3];
        v22 = v10[4];
        v18 = *v10;
        *v10 = *(_OWORD *)a2;
        v12 = *(_OWORD *)(a2 + 64);
        v14 = *(_OWORD *)(a2 + 16);
        v13 = *(_OWORD *)(a2 + 32);
        v10[3] = *(_OWORD *)(a2 + 48);
        v10[4] = v12;
        v10[1] = v14;
        v10[2] = v13;
        v15 = v22;
        v16 = v20;
        *(_OWORD *)(a2 + 48) = v21;
        *(_OWORD *)(a2 + 64) = v15;
        v17 = v19;
        *(_OWORD *)a2 = v18;
        *(_OWORD *)(a2 + 16) = v17;
        *(_OWORD *)(a2 + 32) = v16;
        *(_QWORD *)(v5 + 48) = sub_1ACC04474(*(uint64_t **)a1, v11, (uint64_t)v10);
        *(_WORD *)(a1 + 36) = 1;
      }
    }
  }
  return v2;
}

uint64_t *sub_1ACC2D2A4(uint64_t *result, uint64_t a2, unsigned __int8 *a3)
{
  int *v5;
  int v6;
  _QWORD *v7;
  int v8;
  __int16 *v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  _WORD *v16;
  _DWORD *v17;
  int v18;
  int v19;
  unsigned __int8 **v20;
  uint64_t v21;
  __int16 v22;
  unsigned int v23;

  v5 = (int *)(a2 + 32);
  v6 = *(_DWORD *)(a2 + 32);
  v7 = *(_QWORD **)(a2 + 24);
  if (v6 < 1)
  {
LABEL_9:
    v11 = *result;
    v23 = 0;
    result = (uint64_t *)sub_1ACB8ECA0(v11, v7, v5, &v23);
    *(_QWORD *)(a2 + 24) = result;
    LOWORD(v8) = v23;
    if ((v23 & 0x80000000) == 0)
    {
      v12 = &result[3 * v23];
      v13 = *((_QWORD *)a3 + 9);
      v14 = *((_DWORD *)a3 + 11);
      v15 = *((_DWORD *)a3 + 12);
      *((_DWORD *)v12 + 4) = v14;
      *((_WORD *)v12 + 10) = v15;
      v16 = (_WORD *)v12 + 11;
      *v12 = v13;
      v12[1] = (uint64_t)a3;
      v17 = *(_DWORD **)(a2 + 16);
      if (!v17)
        goto LABEL_19;
      if (*a3 == 179)
        goto LABEL_19;
      v18 = *v17;
      if ((int)*v17 < 1)
        goto LABEL_19;
      v19 = 0;
      v20 = (unsigned __int8 **)(v17 + 2);
      while (1)
      {
        v21 = (uint64_t)*v20;
        if (**v20 == 167 && *(_DWORD *)(v21 + 44) == v14 && *(_DWORD *)(v21 + 48) == v15)
          break;
        ++v19;
        v20 += 3;
        if (v18 == v19)
          goto LABEL_19;
      }
      *v16 = v19;
      if ((v19 & 0x8000) != 0)
      {
LABEL_19:
        v22 = *(_WORD *)(a2 + 2);
        *(_WORD *)(a2 + 2) = v22 + 1;
        *v16 = v22;
      }
      v10 = *a3;
LABEL_21:
      *((_QWORD *)a3 + 8) = a2;
      if (v10 == 167)
        *a3 = -87;
      *((_WORD *)a3 + 26) = v8;
    }
  }
  else
  {
    v8 = 0;
    v9 = (__int16 *)v7 + 10;
    while (*(unsigned __int8 **)(v9 - 6) != a3)
    {
      if (*((_DWORD *)v9 - 1) == *((_DWORD *)a3 + 11) && *((_DWORD *)a3 + 12) == *v9)
      {
        v10 = *a3;
        if (v10 != 179)
          goto LABEL_21;
      }
      ++v8;
      v9 += 12;
      if (v6 == v8)
        goto LABEL_9;
    }
  }
  return result;
}

uint64_t sub_1ACC2D40C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v2 = *((_QWORD *)a2 + 8);
  if (!v2)
    return 0;
  if (*a2 - 168 <= 0xB && ((1 << (*a2 + 88)) & 0x803) != 0)
    return 0;
  v5 = *((__int16 *)a2 + 26);
  if (*(_DWORD *)(v2 + 32) <= v5)
    return 0;
  v6 = *(_QWORD *)(v2 + 24);
  *a2 = -87;
  v7 = v6 + 24 * v5;
  v8 = *(_DWORD *)(v7 + 16);
  LODWORD(v7) = *(__int16 *)(v7 + 20);
  *((_DWORD *)a2 + 11) = v8;
  *((_DWORD *)a2 + 12) = v7;
  *((_DWORD *)a2 + 1) &= 0xFFF7DDFF;
  return 1;
}

_QWORD *sub_1ACC2D490(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;

  v4 = (_QWORD *)sub_1ACBE1124((uint64_t)a1, 0x80uLL);
  v5 = v4;
  if (v4)
  {
    *v4 = 0x400000001;
    v4[2] = 0;
    v4[3] = 0;
    v4[1] = a2;
  }
  else if (a2)
  {
    sub_1ACBF8348(a1, a2);
  }
  return v5;
}

_DWORD *sub_1ACC2D4F4(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  uint64_t v6;
  unint64_t v7;
  _DWORD *result;
  int v9;
  _QWORD *v10;

  v6 = (int)a2[1];
  a2[1] = 2 * v6;
  v7 = (48 * v6) | 8;
  if (*(_QWORD *)(a1 + 512) > (unint64_t)a2)
  {
    if (*(_QWORD *)(a1 + 496) <= (unint64_t)a2)
    {
      if (v7 < 0x81)
      {
LABEL_5:
        result = a2;
LABEL_8:
        v9 = (*result)++;
        v10 = &result[6 * v9];
        v10[2] = 0;
        v10[3] = 0;
        v10[1] = a3;
        return result;
      }
    }
    else if (*(_QWORD *)(a1 + 504) <= (unint64_t)a2 && v7 <= *(unsigned __int16 *)(a1 + 438))
    {
      goto LABEL_5;
    }
  }
  result = (_DWORD *)sub_1ACBE11D0(a1, a2, v7);
  if (result)
    goto LABEL_8;
  sub_1ACC010B0((_QWORD *)a1, a2);
  if (a3)
    sub_1ACBF8348((_QWORD *)a1, a3);
  return 0;
}

unsigned __int8 *sub_1ACC2D5C8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  _QWORD *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 *v30;
  _QWORD *v31;
  uint64_t i;
  uint64_t v33;
  const void *v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  const void *v41;
  size_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  const void *v60;
  uint64_t v61;
  _DWORD *v62;
  __int16 v63;
  _QWORD *v64;
  _OWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v77;

  v8 = a5;
  v9 = (_QWORD *)a4;
  v10 = (unsigned __int8 *)a3;
  v11 = a2;
  v13 = (_QWORD *)*a1;
  if (!a4 || a5)
  {
    if (!a5)
      return v10;
    v14 = *(_QWORD *)(a2 + 40);
    v77 = v14;
    if ((*(_BYTE *)(v14 + 48) & 0x80) == 0)
    {
      v15 = sub_1ACBE1124((uint64_t)v13, 0x50uLL);
      v22 = v15;
      if (v15)
      {
        *(_OWORD *)(v15 + 32) = 0u;
        *(_OWORD *)(v15 + 48) = 0u;
        *(_OWORD *)(v15 + 64) = 0u;
        *(_OWORD *)v15 = 0u;
        *(_OWORD *)(v15 + 16) = 0u;
        *(_BYTE *)v15 = 75;
        *(_WORD *)(v15 + 52) = -1;
        *(_DWORD *)(v15 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v16, v17, v18, v19, v20, v21, *(_DWORD *)(*a1 + 148));
      }
      v23 = sub_1ACBE1124(*a1, 0x50uLL);
      v30 = (unsigned __int8 *)v23;
      if (v23)
      {
        *(_OWORD *)(v23 + 32) = 0u;
        *(_OWORD *)(v23 + 48) = 0u;
        *(_OWORD *)(v23 + 64) = 0u;
        *(_OWORD *)v23 = 0u;
        *(_OWORD *)(v23 + 16) = 0u;
        *(_BYTE *)v23 = 75;
        *(_WORD *)(v23 + 52) = -1;
        *(_DWORD *)(v23 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v24, v25, v26, v27, v28, v29, *(_DWORD *)(*a1 + 148));
      }
      v31 = sub_1ACC2D490((_QWORD *)*a1, v30);
LABEL_57:
      *(_QWORD *)(v11 + 40) = 0;
      v62 = sub_1ACB8E1EC((uint64_t)v13, (int *)v11, 0);
      *(_QWORD *)(v11 + 40) = v77;
      v63 = *(_WORD *)(v11 + 69);
      if ((v63 & 2) != 0)
      {
        *(_QWORD *)(v11 + 104) = 0;
        *(_WORD *)(v11 + 69) = v63 & 0xFFFD;
        v64 = *(_QWORD **)(v11 + 96);
        if (v64)
          sub_1ACBE0F9C(v13, v64);
      }
      else if ((*(_WORD *)(v11 + 69) & 0x100) != 0)
      {
        ++**(_DWORD **)(v11 + 104);
      }
      v65 = sub_1ACB6E848((_QWORD **)a1, v31, v62, (uint64_t)v10, 0, 0, (uint64_t)v9, 0, v8);
      v66 = sub_1ACC0241C(a1, 49, v22, 0);
      if (v66)
      {
        v10 = (unsigned __int8 *)v66;
        *(_QWORD *)(v66 + 32) = v65;
        *(_DWORD *)(v66 + 4) |= 0x401000u;
        sub_1ACC04890(a1, v66, v67, v68, v69, v70, v71, v72);
        return v10;
      }
      if (v65)
        sub_1ACB7E704((_QWORD *)*a1, (uint64_t)v65, 1);
      return 0;
    }
    for (i = *(_QWORD *)(v14 + 16); i; i = *(_QWORD *)(i + 40))
    {
      if ((*(_WORD *)(i + 99) & 3) == 2)
        break;
    }
    if (!*(_WORD *)(i + 94))
    {
      v31 = 0;
      v36 = *a1;
LABEL_40:
      v48 = sub_1ACBE1124(v36, 0x50uLL);
      v22 = v48;
      v11 = a2;
      if (v48)
      {
        *(_OWORD *)(v48 + 32) = 0u;
        *(_OWORD *)(v48 + 48) = 0u;
        *(_OWORD *)(v48 + 64) = 0u;
        *(_OWORD *)v48 = 0u;
        *(_OWORD *)(v48 + 16) = 0u;
        *(_BYTE *)v48 = -79;
        *(_WORD *)(v48 + 52) = -1;
        *(_DWORD *)(v48 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v49, v50, v51, v52, v53, v54, *(_DWORD *)(*a1 + 148));
        *(_QWORD *)(v22 + 32) = sub_1ACB8B6B8((uint64_t)v13, v31, 0);
      }
      goto LABEL_57;
    }
    if (*(_WORD *)(i + 94) == 1)
    {
      v33 = *(_QWORD *)(v14 + 8);
      v34 = *(const void **)(v33 + 16 * **(__int16 **)(i + 8));
      if (v34)
        v35 = strlen(*(const char **)(v33 + 16 * **(__int16 **)(i + 8))) & 0x3FFFFFFF;
      else
        v35 = 0;
      v55 = sub_1ACBE1124((uint64_t)v13, v35 + 81);
      v22 = v55;
      if (v55)
      {
        *(_OWORD *)(v55 + 48) = 0u;
        *(_OWORD *)(v55 + 64) = 0u;
        *(_OWORD *)(v55 + 16) = 0u;
        *(_OWORD *)(v55 + 32) = 0u;
        *(_OWORD *)v55 = 0u;
        *(_BYTE *)v55 = 59;
        *(_WORD *)(v55 + 52) = -1;
        v56 = v55 + 80;
        *(_QWORD *)(v55 + 8) = v55 + 80;
        if (v35)
          memcpy((void *)(v55 + 80), v34, v35);
        *(_BYTE *)(v56 + v35) = 0;
        *(_DWORD *)(v22 + 40) = 1;
      }
      if (v34)
        v57 = strlen((const char *)v34) & 0x3FFFFFFF;
      else
        v57 = 0;
      v58 = sub_1ACBE1124((uint64_t)v13, v57 + 81);
      v59 = v58;
      if (v58)
      {
        v60 = v34;
        *(_OWORD *)(v58 + 48) = 0u;
        *(_OWORD *)(v58 + 64) = 0u;
        *(_OWORD *)(v58 + 16) = 0u;
        *(_OWORD *)(v58 + 32) = 0u;
        *(_OWORD *)v58 = 0u;
        *(_BYTE *)v58 = 59;
        *(_WORD *)(v58 + 52) = -1;
        v61 = v58 + 80;
        *(_QWORD *)(v58 + 8) = v58 + 80;
        if (v57)
          memcpy((void *)(v58 + 80), v60, v57);
        *(_BYTE *)(v61 + v57) = 0;
        *(_DWORD *)(v59 + 40) = 1;
      }
      v31 = sub_1ACC2D490((_QWORD *)*a1, (unsigned __int8 *)v59);
      v11 = a2;
      goto LABEL_57;
    }
    v37 = 0;
    v31 = 0;
    v38 = *(_QWORD *)(a2 + 40);
    while (1)
    {
      v40 = *(_QWORD *)(v38 + 8);
      v41 = *(const void **)(v40 + 16 * *(__int16 *)(*(_QWORD *)(i + 8) + 2 * v37));
      if (v41)
        v42 = strlen(*(const char **)(v40 + 16 * *(__int16 *)(*(_QWORD *)(i + 8) + 2 * v37))) & 0x3FFFFFFF;
      else
        v42 = 0;
      v43 = sub_1ACBE1124((uint64_t)v13, v42 + 81);
      v44 = v43;
      if (v43)
      {
        *(_OWORD *)(v43 + 48) = 0u;
        *(_OWORD *)(v43 + 64) = 0u;
        *(_OWORD *)(v43 + 16) = 0u;
        *(_OWORD *)(v43 + 32) = 0u;
        *(_OWORD *)v43 = 0u;
        *(_BYTE *)v43 = 59;
        *(_WORD *)(v43 + 52) = -1;
        v45 = v43 + 80;
        *(_QWORD *)(v43 + 8) = v43 + 80;
        if (v42)
          memcpy((void *)(v43 + 80), v41, v42);
        *(_BYTE *)(v45 + v42) = 0;
        *(_DWORD *)(v44 + 40) = 1;
        v38 = v77;
      }
      if (v31)
      {
        v46 = *(_DWORD *)v31;
        if (*((_DWORD *)v31 + 1) > *(_DWORD *)v31)
        {
          *(_DWORD *)v31 = v46 + 1;
          v47 = &v31[3 * v46];
          v47[2] = 0;
          v47[3] = 0;
          v47[1] = v44;
          goto LABEL_27;
        }
        v39 = sub_1ACC2D4F4(*a1, v31, (unsigned __int8 *)v44);
      }
      else
      {
        v39 = sub_1ACC2D490((_QWORD *)*a1, (unsigned __int8 *)v44);
      }
      v31 = v39;
LABEL_27:
      if (++v37 >= (unint64_t)*(unsigned __int16 *)(i + 94))
      {
        v36 = *a1;
        v8 = a5;
        v9 = (_QWORD *)a4;
        goto LABEL_40;
      }
    }
  }
  sub_1ACBCB308((uint64_t)a1, "ORDER BY without LIMIT on %s", a3, a4, 0, a6, a7, a8, a6);
  if (v10)
    sub_1ACBF8348((_QWORD *)*a1, v10);
  sub_1ACC010B0((_QWORD *)*a1, v9);
  return 0;
}

uint64_t sub_1ACC2DB0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  const char *v18;

  v11 = *(unsigned __int8 *)(a2 + 63);
  if (v11 == 1)
  {
    v12 = *(_QWORD *)a1;
    v13 = *(_QWORD *)(a2 + 80);
    v14 = v13;
    if (*(_QWORD *)v13 != *(_QWORD *)a1)
    {
      v14 = *(_QWORD *)(a2 + 80);
      do
        v14 = *(_QWORD *)(v14 + 40);
      while (*(_QWORD *)v14 != v12);
    }
    if (*(_QWORD *)(**(_QWORD **)(v14 + 8) + 104))
    {
      if (!*(_QWORD *)(a1 + 168) || ((*(_DWORD *)(v12 + 48) >> 7) & 1u) >= *(unsigned __int8 *)(v13 + 30))
        return 0;
      sub_1ACBCB308(a1, "unsafe use of virtual table \"%s\"", a3, a4, a5, a6, a7, a8, *(_QWORD *)a2);
      v11 = *(unsigned __int8 *)(a2 + 63);
      goto LABEL_19;
    }
LABEL_24:
    v18 = "table %s may not be modified";
    goto LABEL_26;
  }
  v15 = *(_DWORD *)(a2 + 48);
  if ((v15 & 0x1001) != 0)
  {
    v16 = *(_QWORD *)a1;
    if ((v15 & 1) != 0)
    {
      if ((*(_QWORD *)(*(_QWORD *)a1 + 48) & 0x10000001) != 1 && !*(_BYTE *)(a1 + 30))
        goto LABEL_24;
    }
    else if ((*(_QWORD *)(*(_QWORD *)a1 + 48) & 0x10000000) != 0
           && !*(_QWORD *)(v16 + 592)
           && !*(_DWORD *)(v16 + 220)
           && (*(int *)(v16 + 564) < 1 || *(_QWORD *)(v16 + 600)))
    {
      goto LABEL_24;
    }
  }
LABEL_19:
  if (v11 != 2 || a3 && (!*(_BYTE *)(a3 + 18) || *(_QWORD *)(a3 + 64)))
    return 0;
  v18 = "cannot modify %s because it is a view";
LABEL_26:
  sub_1ACBCB308(a1, v18, a3, a4, a5, a6, a7, a8, *(_QWORD *)a2);
  return 1;
}

_QWORD *sub_1ACC2DC70(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, int a6)
{
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  int v22;
  size_t v23;
  unint64_t v24;
  void *v25;
  uint64_t v26;
  const void *v27;
  unint64_t v28;
  void *v29;
  void *v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *result;
  uint64_t v38;
  _DWORD v39[2];
  uint64_t v40;
  __int128 v41;
  uint64_t v42;

  v11 = (_QWORD *)*a1;
  v12 = *(_QWORD *)(a2 + 96);
  if (v12)
  {
    v13 = (uint64_t *)(v11[4] + 24);
    v14 = 0xFFFFFFFF00000000;
    do
    {
      v15 = *v13;
      v13 += 4;
      v14 += 0x100000000;
    }
    while (v15 != v12);
    v16 = v14 >> 32;
    if (a3)
      goto LABEL_5;
  }
  else
  {
    v16 = -32768;
    if (a3)
    {
LABEL_5:
      v17 = sub_1ACB8B290(*a1, a3, 0, 0);
      v18 = *a1;
      goto LABEL_8;
    }
  }
  v17 = 0;
  v18 = *a1;
LABEL_8:
  v19 = sub_1ACBE1124(v18, 0x70uLL);
  v20 = v19;
  if (!v19)
    goto LABEL_21;
  v38 = a4;
  *(_QWORD *)v19 = 0x100000001;
  *(_OWORD *)(v19 + 72) = 0u;
  *(_OWORD *)(v19 + 8) = 0u;
  *(_OWORD *)(v19 + 24) = 0u;
  *(_QWORD *)(v19 + 104) = 0;
  *(_OWORD *)(v19 + 88) = 0u;
  *(_OWORD *)(v19 + 56) = 0u;
  *(_OWORD *)(v19 + 40) = 0u;
  *(_DWORD *)(v19 + 72) = -1;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  v21 = *(const char **)a2;
  v22 = a6;
  if (v21)
  {
    v23 = strlen(v21);
    v24 = v23 + 1;
    if (v11)
    {
      v25 = (void *)sub_1ACBE1124((uint64_t)v11, v24);
      if (!v25)
        goto LABEL_16;
      goto LABEL_15;
    }
    v25 = (void *)sub_1ACB5D828(v23 + 1);
    if (v25)
LABEL_15:
      memcpy(v25, v21, v24);
  }
  else
  {
    v25 = 0;
  }
LABEL_16:
  *(_QWORD *)(v20 + 24) = v25;
  v26 = v11[4];
  v27 = *(const void **)(v26 + 32 * v16);
  if (v27)
  {
    v28 = strlen(*(const char **)(v26 + 32 * v16)) + 1;
    v29 = (void *)sub_1ACBE1124((uint64_t)v11, v28);
    v30 = v29;
    if (v29)
      memcpy(v29, v27, v28);
  }
  else
  {
    v30 = 0;
  }
  a6 = v22;
  *(_QWORD *)(v20 + 16) = v30;
  a4 = v38;
LABEL_21:
  v42 = 0;
  v39[0] = 12;
  v41 = 0uLL;
  v31 = sub_1ACB6E848((_QWORD **)a1, 0, (_OWORD *)v20, (uint64_t)v17, 0, 0, a4, 0x20000, a5);
  v39[1] = a6;
  v40 = 0;
  result = (_QWORD *)sub_1ACB6EA04((_QWORD **)a1, (uint64_t)v31, (uint64_t)v39, v32, v33, v34, v35, v36);
  if (v31)
    return sub_1ACB7E704(v11, (uint64_t)v31, 1);
  return result;
}

void sub_1ACC2DEBC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  char v18;

  if (a1[21])
    v3 = (uint64_t *)a1[21];
  else
    v3 = a1;
  v4 = *((_DWORD *)v3 + 76);
  if (v4 < 1)
  {
LABEL_8:
    v7 = sub_1ACB6BB48(v3[49], 8 * v4 + 8);
    if (v7)
    {
      v3[49] = v7;
      v14 = *((int *)v3 + 76);
      *((_DWORD *)v3 + 76) = v14 + 1;
      *(_QWORD *)(v7 + 8 * v14) = a2;
    }
    else
    {
      v15 = *v3;
      if (!*(_BYTE *)(*v3 + 103) && !*(_BYTE *)(v15 + 104))
      {
        *(_BYTE *)(v15 + 103) = 1;
        if (*(int *)(v15 + 220) >= 1)
          *(_DWORD *)(v15 + 424) = 1;
        ++*(_DWORD *)(v15 + 432);
        *(_WORD *)(v15 + 436) = 0;
        v16 = *(_QWORD *)(v15 + 344);
        if (v16)
        {
          sub_1ACBCB308(v16, "out of memory", v8, v9, v10, v11, v12, v13, v18);
          for (i = *(_QWORD *)(v15 + 344); ; ++*(_DWORD *)(i + 48))
          {
            *(_DWORD *)(i + 24) = 7;
            i = *(_QWORD *)(i + 256);
            if (!i)
              break;
          }
        }
      }
    }
  }
  else
  {
    v5 = *((unsigned int *)v3 + 76);
    v6 = (_QWORD *)v3[49];
    while (*v6 != a2)
    {
      ++v6;
      if (!--v5)
        goto LABEL_8;
    }
  }
}

uint64_t sub_1ACC2DFB4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t result;

  v11 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v11)
  {
    sub_1ACBFF5AC(a1, 83, 0, 0, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(a1 + 144) = v11 + 1;
    v12 = *(_QWORD *)(a1 + 136) + 40 * v11;
    *(_BYTE *)v12 = 83;
    *(_OWORD *)(v12 + 1) = 0u;
    *(_OWORD *)(v12 + 17) = 0u;
    *(_QWORD *)(v12 + 32) = 0;
  }
  v13 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v13)
  {
    sub_1ACBFF5AC(a1, 84, a2, 1, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(a1 + 144) = v13 + 1;
    v14 = *(_QWORD *)(a1 + 136) + 40 * v13;
    *(_DWORD *)v14 = 84;
    *(_DWORD *)(v14 + 4) = a2;
    *(_DWORD *)(v14 + 8) = 1;
    *(_QWORD *)(v14 + 12) = 0;
    *(_QWORD *)(v14 + 28) = 0;
    *(_QWORD *)(v14 + 20) = 0;
    *(_DWORD *)(v14 + 36) = 0;
  }
  result = sub_1ACB7E2D4(a1, 1);
  if (!*(_BYTE *)(*(_QWORD *)a1 + 103))
    return sub_1ACB57870(*(_QWORD *)(a1 + 152), a3, -1, 1u, 0);
  return result;
}

unsigned __int8 *sub_1ACC2E0D4(_QWORD *a1, unsigned __int8 **a2, uint64_t a3, unsigned int *a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  unsigned __int8 *v18;
  _BYTE *v19;
  unsigned __int8 *i;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  BOOL v25;
  int v26;
  const char *v27;
  unsigned __int8 *v28;
  int v29;
  int v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  unsigned __int8 *j;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  _DWORD *v43;

  v9 = a3;
  v12 = *a1;
  v13 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 56);
  v14 = a2[11];
  v15 = *(_QWORD **)(v13 + 64);
  v16 = v14;
  if (!v15)
    goto LABEL_18;
  v17 = a2[12];
  v18 = a2[11];
  while (2)
  {
    while (1)
    {
      v16 = (unsigned __int8 *)v15[2];
      if (*((unsigned __int8 **)v16 + 6) != v17)
        break;
      v19 = (_BYTE *)*((_QWORD *)v16 + 1);
      if (!v19)
        break;
      for (i = *a2; ; ++i)
      {
        v21 = *v19;
        v22 = *i;
        if ((_DWORD)v21 == (_DWORD)v22)
          break;
        if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
          goto LABEL_5;
LABEL_12:
        ++v19;
      }
      if (*v19)
        goto LABEL_12;
      if (v17 == (unsigned __int8 *)v13 && !v16[18])
        break;
LABEL_7:
      *((_QWORD *)v16 + 8) = v18;
      v18 = v16;
      v15 = (_QWORD *)*v15;
      if (!v15)
        goto LABEL_18;
    }
LABEL_5:
    if (v16[16] == 150)
    {
      *((_QWORD *)v16 + 1) = *a2;
      *((_QWORD *)v16 + 6) = v17;
      goto LABEL_7;
    }
    v16 = v18;
    v15 = (_QWORD *)*v15;
    if (v15)
      continue;
    break;
  }
LABEL_18:
  if (!v16)
  {
    v26 = 0;
    if (!a5)
      goto LABEL_71;
    goto LABEL_70;
  }
  if ((*(_BYTE *)(v12 + 50) & 4) != 0 || !v14)
  {
LABEL_29:
    v43 = a5;
    v26 = 0;
    if ((_DWORD)a3 == 128)
      v27 = "DELETE";
    else
      v27 = "UPDATE";
    v28 = v16;
    while (1)
    {
      v30 = v28[16];
      if (v30 != v9)
        goto LABEL_53;
      if (!a4)
        goto LABEL_33;
      v31 = (unsigned int *)*((_QWORD *)v28 + 4);
      if (!v31)
        goto LABEL_33;
      v32 = *a4;
      if ((int)v32 < 1)
        goto LABEL_53;
      v33 = 0;
      v34 = *v31;
      while (2)
      {
        if ((int)v34 < 1)
          goto LABEL_42;
        v35 = 0;
        while (2)
        {
          v36 = *(_BYTE **)&v31[4 * v35 + 2];
          for (j = *(unsigned __int8 **)&a4[6 * v33 + 4]; ; ++j)
          {
            v38 = *v36;
            v39 = *j;
            if ((_DWORD)v38 != (_DWORD)v39)
              break;
            if (!*v36)
            {
              if ((v35 & 0x80000000) == 0)
                goto LABEL_33;
              goto LABEL_42;
            }
LABEL_47:
            ++v36;
          }
          if (byte_1ACCB6333[v38] == byte_1ACCB6333[v39])
            goto LABEL_47;
          if (++v35 != v34)
            continue;
          break;
        }
LABEL_42:
        if (++v33 != v32)
          continue;
        break;
      }
LABEL_53:
      if (v30 != 150)
      {
        if (!v28[18] || v9 != 129 || v30 != 127 || a1[21])
          goto LABEL_35;
LABEL_33:
        v29 = v28[17];
        goto LABEL_34;
      }
      v28[16] = v9;
      v40 = *((unsigned __int8 *)a2 + 63);
      v41 = v40 == 1;
      if (v40 == 1)
        v29 = 1;
      else
        v29 = 2;
      if (v41 && v9 != 127)
      {
        sub_1ACBCB308((uint64_t)a1, "%s RETURNING is not available on virtual tables", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, (char)v27);
        v29 = 1;
      }
      v28[17] = v29;
LABEL_34:
      v26 |= v29;
LABEL_35:
      v28 = (unsigned __int8 *)*((_QWORD *)v28 + 8);
      if (!v28)
      {
        a5 = v43;
        if (!v43)
          goto LABEL_71;
LABEL_70:
        *a5 = v26;
        goto LABEL_71;
      }
    }
  }
  if (v16 != v14)
  {
    v23 = v16;
    do
    {
      v24 = v23;
      v23 = (unsigned __int8 *)*((_QWORD *)v23 + 8);
      if (v23)
        v25 = v23 == v14;
      else
        v25 = 1;
    }
    while (!v25);
    *((_QWORD *)v24 + 8) = 0;
    goto LABEL_29;
  }
  v26 = 0;
  v16 = 0;
  if (a5)
    goto LABEL_70;
LABEL_71:
  if (v26)
    return v16;
  else
    return 0;
}

uint64_t sub_1ACC2E3A0(_QWORD *a1, uint64_t a2, unsigned int *a3, unsigned int a4, unsigned __int8 a5, uint64_t a6, uint64_t a7)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  unsigned __int8 *i;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;

  if (a3)
    v7 = 129;
  else
    v7 = 128;
  if (*(_BYTE *)(a6 + 63) == 2)
    return 0xFFFFFFFFLL;
  v9 = a2;
  if (!a2)
    return 0;
  v8 = 0;
  v27 = a4;
  while (2)
  {
    if (v7 != *(unsigned __int8 *)(v9 + 16) || (*(_BYTE *)(v9 + 17) & a5) == 0)
      goto LABEL_10;
    if (!a3 || (v15 = *(unsigned int **)(v9 + 32)) == 0)
    {
LABEL_8:
      if (*(_BYTE *)(v9 + 18))
      {
        v8 = 0xFFFFFFFFLL;
        goto LABEL_10;
      }
      v24 = (_QWORD *)a1[21];
      if (!v24)
        v24 = a1;
      v25 = v24[23];
      if (v25)
      {
        while (*(_QWORD *)v25 != v9 || *(_DWORD *)(v25 + 24) != (_DWORD)a7)
        {
          v25 = *(_QWORD *)(v25 + 8);
          if (!v25)
            goto LABEL_32;
        }
      }
      else
      {
LABEL_32:
        v25 = sub_1ACBAD260(a1, v9, a6, a7);
        *(_DWORD *)(*a1 + 84) = -1;
        if (!v25)
          goto LABEL_10;
      }
      v8 = *(_DWORD *)(v25 + 4 * v27 + 28) | v8;
      goto LABEL_10;
    }
    v16 = *a3;
    if ((int)v16 < 1)
      goto LABEL_10;
    v17 = 0;
    v18 = *v15;
    while (2)
    {
      if ((int)v18 < 1)
        goto LABEL_18;
      v19 = 0;
      while (2)
      {
        v20 = *(_BYTE **)&v15[4 * v19 + 2];
        for (i = *(unsigned __int8 **)&a3[6 * v17 + 4]; ; ++i)
        {
          v22 = *v20;
          v23 = *i;
          if ((_DWORD)v22 != (_DWORD)v23)
            break;
          if (!*v20)
          {
            if ((v19 & 0x80000000) == 0)
              goto LABEL_8;
            goto LABEL_18;
          }
LABEL_23:
          ++v20;
        }
        if (byte_1ACCB6333[v22] == byte_1ACCB6333[v23])
          goto LABEL_23;
        if (++v19 != v18)
          continue;
        break;
      }
LABEL_18:
      if (++v17 != v16)
        continue;
      break;
    }
LABEL_10:
    v9 = *(_QWORD *)(v9 + 64);
    if (v9)
      continue;
    return v8;
  }
}

uint64_t sub_1ACC2E574(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v12;
  int32x4_t v13;
  uint32x4_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  const float *v20;
  uint64_t v21;
  const float *v22;
  unsigned __int128 v23;
  unsigned __int128 v24;
  int8x16_t v25;
  int8x8_t v26;
  int *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  unsigned __int8 *v33;
  uint64_t v34;
  int v35;
  unsigned int v36;
  unsigned __int8 *v37;
  int v38;
  uint64_t *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int16x8_t *v43;
  int16x8_t v44;
  uint32x4_t v45;
  uint64_t v46;
  int8x16_t v47;
  int8x16_t v48;
  int16x8_t *v49;
  uint64_t v50;
  int8x16_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  int16x8_t v55;
  int8x16_t v56;
  __int16 *v57;
  uint64_t v58;
  __int16 v59;
  int v60;
  _DWORD *v61;
  _BYTE *v62;
  unsigned __int8 *i;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  if ((*((_BYTE *)*a1 + 49) & 0x40) == 0 || *(_BYTE *)(a2 + 63))
    return 0;
  v12 = *(_QWORD *)(a2 + 72);
  if (v12)
  {
    v9 = 0;
    v13.i64[0] = 0x1F0000001FLL;
    v13.i64[1] = 0x1F0000001FLL;
    v14.i64[0] = 0x100000001;
    v14.i64[1] = 0x100000001;
    do
    {
      v15 = *(unsigned int *)(v12 + 40);
      if ((int)v15 >= 1)
      {
        if (v15 >= 9)
        {
          v17 = v15 & 7;
          if ((v15 & 7) == 0)
            v17 = 8;
          v16 = v15 - v17;
          v18 = 0uLL;
          v19 = (int8x16_t)v9;
          v20 = (const float *)(v12 + 128);
          v21 = v16;
          do
          {
            v22 = v20 - 16;
            v23 = (unsigned __int128)vld4q_f32(v22);
            v24 = (unsigned __int128)vld4q_f32(v20);
            v19 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)v23), v19), (int8x16_t)vcgtq_s32((int32x4_t)v23, v13));
            v18 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32(v14, (uint32x4_t)v24), v18), (int8x16_t)vcgtq_s32((int32x4_t)v24, v13));
            v20 += 32;
            v21 -= 8;
          }
          while (v21);
          v25 = vorrq_s8(v18, v19);
          v26 = vorr_s8(*(int8x8_t *)v25.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v25, v25, 8uLL));
          LODWORD(v9) = v26.i32[0] | v26.i32[1];
        }
        else
        {
          v16 = 0;
        }
        v27 = (int *)(v12 + 16 * v16 + 64);
        v28 = v15 - v16;
        do
        {
          v29 = *v27;
          v27 += 4;
          v30 = 1 << v29;
          if (v29 > 31)
            v31 = -1;
          else
            v31 = v30;
          v9 = v31 | v9;
          --v28;
        }
        while (v28);
      }
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12);
  }
  else
  {
    v9 = 0;
  }
  v32 = *(_QWORD *)(a2 + 96);
  v33 = *(unsigned __int8 **)a2;
  v34 = *(_QWORD *)(v32 + 96);
  if (!v34)
  {
    v39 = (uint64_t *)(v32 + 88);
    v40 = *(_DWORD *)(v32 + 84);
    if (v40)
      goto LABEL_47;
LABEL_29:
    v39 = &qword_1EECAD260;
    goto LABEL_30;
  }
  v35 = *v33;
  if (*v33)
  {
    v36 = 0;
    v37 = v33 + 1;
    do
    {
      v36 = -1640531535 * (v36 + byte_1ACCB6333[v35]);
      v38 = *v37++;
      v35 = v38;
    }
    while (v38);
  }
  else
  {
    v36 = 0;
  }
  v61 = (_DWORD *)(v34 + 16 * (v36 % *(_DWORD *)(v32 + 80)));
  v39 = (uint64_t *)(v61 + 2);
  v40 = *v61;
  if (!v40)
    goto LABEL_29;
  do
  {
LABEL_47:
    v39 = (uint64_t *)*v39;
    v62 = (_BYTE *)v39[3];
    for (i = *(unsigned __int8 **)a2; ; ++i)
    {
      v64 = *v62;
      v65 = *i;
      if ((_DWORD)v64 != (_DWORD)v65)
        break;
      if (!*v62)
        goto LABEL_30;
LABEL_49:
      ++v62;
    }
    if (byte_1ACCB6333[v64] == byte_1ACCB6333[v65])
      goto LABEL_49;
    --v40;
  }
  while (v40);
  v39 = &qword_1EECAD260;
LABEL_30:
  v41 = v39[2];
  if (v41)
  {
    while (2)
    {
      v66 = 0;
      sub_1ACC2F2B4(a1, a2, v41, &v66, 0, a6, a7, a8);
      if (v66)
      {
        v42 = *(unsigned __int16 *)(v66 + 94);
        if (*(_WORD *)(v66 + 94))
        {
          v43 = *(int16x8_t **)(v66 + 8);
          v44.i64[0] = 0x1F001F001F001FLL;
          v44.i64[1] = 0x1F001F001F001FLL;
          v45.i64[0] = 0x100000001;
          v45.i64[1] = 0x100000001;
          if (v42 >= 0x10)
          {
            v46 = (unsigned __int16)v42 & 0xFFF0;
            v47 = 0uLL;
            v48 = (int8x16_t)v9;
            v49 = v43 + 1;
            v50 = v46;
            v51 = 0uLL;
            v52 = 0uLL;
            do
            {
              v53 = v49[-1];
              v54 = vcgtq_s16(v53, v44);
              v55 = vcgtq_s16(*v49, v44);
              v47 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32(v45, vmovl_high_u16((uint16x8_t)v53)), v47), (int8x16_t)vmovl_high_s16(v54));
              v48 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32(v45, vmovl_u16(*(uint16x4_t *)v53.i8)), v48), (int8x16_t)vmovl_s16(*(int16x4_t *)v54.i8));
              v52 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32(v45, vmovl_high_u16(*(uint16x8_t *)v49)), v52), (int8x16_t)vmovl_high_s16(v55));
              v51 = vorrq_s8(vorrq_s8((int8x16_t)vshlq_u32(v45, vmovl_u16(*(uint16x4_t *)v49->i8)), v51), (int8x16_t)vmovl_s16(*(int16x4_t *)v55.i8));
              v49 += 2;
              v50 -= 16;
            }
            while (v50);
            v56 = vorrq_s8(vorrq_s8(v51, v48), vorrq_s8(v52, v47));
            *(int8x8_t *)v56.i8 = vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL));
            v9 = (v56.i32[0] | v56.i32[1]);
            if (v46 != v42)
              goto LABEL_40;
          }
          else
          {
            v46 = 0;
LABEL_40:
            v57 = &v43->i16[v46];
            v58 = v42 - v46;
            do
            {
              v59 = *v57++;
              v60 = 1 << v59;
              if (v59 > 31)
                v60 = -1;
              v9 = v60 | v9;
              --v58;
            }
            while (v58);
          }
        }
      }
      v41 = *(_QWORD *)(v41 + 24);
      if (!v41)
        return v9;
      continue;
    }
  }
  return v9;
}

void sub_1ACC2E8C0(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9)
{
  int v10;
  int v12;
  uint64_t v13;
  int v15;
  unsigned int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  unsigned __int8 *i;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  int v31;
  unsigned int v32;
  unsigned int v33;

  v32 = a8;
  v33 = a7;
  if (a2)
  {
    v10 = a5;
    v12 = a3;
    v13 = a2;
    do
    {
      v15 = *(unsigned __int8 *)(v13 + 16);
      if (v15 != v12 && (!*(_BYTE *)(v13 + 18) || v12 != 129 || v15 != 127) || *(unsigned __int8 *)(v13 + 17) != v10)
        goto LABEL_3;
      if (!a4 || (v16 = *(unsigned int **)(v13 + 32)) == 0)
      {
LABEL_25:
        if (*(_BYTE *)(v13 + 18))
        {
          if (!*(_QWORD *)(a1 + 168))
            sub_1ACC2F5F8(a1, v13, a6, v33);
        }
        else
        {
          v25 = *(_QWORD *)(a1 + 16);
          if (!v25)
          {
            if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
              *(_BYTE *)(a1 + 35) = 1;
            v25 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
          }
          v26 = sub_1ACC2EF6C((_QWORD *)a1, v13, a6, v32);
          if (v26)
          {
            if (*(_QWORD *)v13)
              v27 = (*(_BYTE *)(*(_QWORD *)a1 + 49) & 0x20) == 0;
            else
              v27 = 0;
            v28 = (*(_DWORD *)(a1 + 56) + 1);
            *(_DWORD *)(a1 + 56) = v28;
            sub_1ACBA86CC((uint64_t *)v25, 48, v33, a9, v28, *(_QWORD *)(v26 + 16), 4294967292, a8);
            v29 = *(_DWORD *)(v25 + 144);
            v30 = __OFSUB__(v29, 1);
            v31 = v29 - 1;
            if (v31 < 0 == v30)
              *(_WORD *)(*(_QWORD *)(v25 + 136) + 40 * v31 + 2) = v27;
          }
        }
        goto LABEL_3;
      }
      v17 = *a4;
      if ((int)v17 < 1)
        goto LABEL_3;
      v18 = 0;
      v19 = *v16;
      while (2)
      {
        if ((int)v19 < 1)
          goto LABEL_14;
        v20 = 0;
        while (2)
        {
          v21 = *(_BYTE **)&v16[4 * v20 + 2];
          for (i = *(unsigned __int8 **)&a4[6 * v18 + 4]; ; ++i)
          {
            v23 = *v21;
            v24 = *i;
            if ((_DWORD)v23 != (_DWORD)v24)
              break;
            if (!*v21)
            {
              if ((v20 & 0x80000000) == 0)
                goto LABEL_25;
              goto LABEL_14;
            }
LABEL_19:
            ++v21;
          }
          if (byte_1ACCB6333[v23] == byte_1ACCB6333[v24])
            goto LABEL_19;
          if (++v20 != v19)
            continue;
          break;
        }
LABEL_14:
        if (++v18 != v17)
          continue;
        break;
      }
LABEL_3:
      v13 = *(_QWORD *)(v13 + 64);
    }
    while (v13);
  }
}

uint64_t sub_1ACC2EAE0(uint64_t result, uint64_t a2, unsigned int a3, uint64_t a4, _DWORD *a5, int a6, int16x8_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;

  v11 = result;
  v30 = 0;
  v12 = *(_QWORD *)(result + 16);
  v13 = *(_QWORD *)(a2 + 16);
  if ((*(_BYTE *)(a2 + 48) & 0x80) != 0)
  {
    if (!v13)
      return result;
    v14 = *(_QWORD *)(a2 + 16);
    do
    {
      if ((*(_WORD *)(v14 + 99) & 3) == 2)
        break;
      v14 = *(_QWORD *)(v14 + 40);
    }
    while (v14);
  }
  else
  {
    v14 = 0;
  }
  if (v13)
  {
    v15 = 0;
    v16 = 0xFFFFFFFFLL;
    v17 = a5;
    do
    {
      if (a5)
      {
        if (v13 != v14 && *v17)
        {
LABEL_17:
          if (a6 != (_DWORD)a4)
          {
            result = sub_1ACB98FD8(v11, v13, a3, 0, 1, &v30, v15, v16, a7);
            v16 = result;
            v21 = 94;
            if ((*(_WORD *)(v13 + 99) & 8) == 0)
              v21 = 96;
            v22 = *(unsigned __int16 *)(v13 + v21);
            v23 = *(_DWORD *)(v12 + 144);
            if (*(_DWORD *)(v12 + 148) <= v23)
            {
              result = sub_1ACBFF5AC(v12, 140, a4, result, v22, v18, v19, v20);
            }
            else
            {
              *(_DWORD *)(v12 + 144) = v23 + 1;
              v24 = *(_QWORD *)(v12 + 136) + 40 * v23;
              *(_DWORD *)v24 = 140;
              *(_DWORD *)(v24 + 4) = a4;
              *(_DWORD *)(v24 + 8) = result;
              *(_DWORD *)(v24 + 12) = v22;
              *(_QWORD *)(v24 + 24) = 0;
              *(_QWORD *)(v24 + 32) = 0;
              *(_QWORD *)(v24 + 16) = 0;
            }
            v25 = *(_DWORD *)(v12 + 144);
            v26 = __OFSUB__(v25, 1);
            v27 = v25 - 1;
            if (v27 < 0 == v26)
              *(_WORD *)(*(_QWORD *)(v12 + 136) + 40 * v27 + 2) = 1;
            if (v30)
            {
              v28 = *(_QWORD *)(v11 + 16);
              result = *(_QWORD *)(v28 + 24);
              v29 = ~v30;
              if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) >= 0)
                *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v29) = *(_DWORD *)(v28 + 144);
              else
                result = sub_1ACC0D5D4(result, v28, v29);
            }
            v15 = v13;
          }
        }
      }
      else if (v13 != v14)
      {
        goto LABEL_17;
      }
      v13 = *(_QWORD *)(v13 + 40);
      a4 = (a4 + 1);
      ++v17;
    }
    while (v13);
  }
  return result;
}

uint64_t *sub_1ACC2EC9C(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  unsigned __int8 *v19;
  int v20;
  uint64_t *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  unsigned __int8 *j;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  _DWORD *v42;
  _BYTE *v43;
  unsigned __int8 *i;
  uint64_t v45;
  uint64_t v46;

  if ((*(_BYTE *)(*result + 49) & 0x40) == 0)
    return result;
  v8 = a6;
  v13 = result;
  v14 = *(_QWORD *)(a2 + 96);
  v15 = *(unsigned __int8 **)a2;
  v16 = *(_QWORD *)(v14 + 96);
  if (!v16)
  {
    v21 = (uint64_t *)(v14 + 88);
    v22 = *(_DWORD *)(v14 + 84);
    if (v22)
      goto LABEL_45;
LABEL_8:
    v21 = &qword_1EECAD260;
    goto LABEL_9;
  }
  v17 = *v15;
  if (*v15)
  {
    v18 = 0;
    v19 = v15 + 1;
    do
    {
      v18 = -1640531535 * (v18 + byte_1ACCB6333[v17]);
      v20 = *v19++;
      v17 = v20;
    }
    while (v20);
  }
  else
  {
    v18 = 0;
  }
  v42 = (_DWORD *)(v16 + 16 * (v18 % *(_DWORD *)(v14 + 80)));
  v21 = (uint64_t *)(v42 + 2);
  v22 = *v42;
  if (!v22)
    goto LABEL_8;
  do
  {
LABEL_45:
    v21 = (uint64_t *)*v21;
    v43 = (_BYTE *)v21[3];
    for (i = *(unsigned __int8 **)a2; ; ++i)
    {
      v45 = *v43;
      v46 = *i;
      if ((_DWORD)v45 != (_DWORD)v46)
        break;
      if (!*v43)
        goto LABEL_9;
LABEL_47:
      ++v43;
    }
    if (byte_1ACCB6333[v45] == byte_1ACCB6333[v46])
      goto LABEL_47;
    --v22;
  }
  while (v22);
  v21 = &qword_1EECAD260;
LABEL_9:
  v23 = v21[2];
  if (v23)
  {
    while (1)
    {
      if (!a5)
        goto LABEL_31;
      v24 = *(unsigned int *)(v23 + 40);
      if ((int)v24 >= 1)
        break;
LABEL_11:
      v23 = *(_QWORD *)(v23 + 24);
      if (!v23)
        return result;
    }
    v25 = 0;
    while (*(__int16 *)(a2 + 54) < 1)
    {
LABEL_29:
      if (++v25 == v24)
        goto LABEL_11;
    }
    v26 = 0;
    while (1)
    {
      if ((*(_DWORD *)(a5 + 4 * v26) & 0x80000000) == 0 || v8 && v26 == *(__int16 *)(a2 + 52))
      {
        v27 = *(_QWORD *)(a2 + 8);
        if (*(_QWORD *)(v23 + 16 * v25 + 72))
        {
          v28 = *(_BYTE **)(v27 + 16 * v26);
          for (j = *(unsigned __int8 **)(v23 + 16 * v25 + 72); ; ++j)
          {
            v30 = *v28;
            v31 = *j;
            if ((_DWORD)v30 == (_DWORD)v31)
            {
              if (!*v28)
                goto LABEL_31;
            }
            else if (byte_1ACCB6333[v30] != byte_1ACCB6333[v31])
            {
              goto LABEL_18;
            }
            ++v28;
          }
        }
        if ((*(_WORD *)(v27 + 16 * v26 + 14) & 1) != 0)
          break;
      }
LABEL_18:
      if (++v26 == *(__int16 *)(a2 + 54))
        goto LABEL_29;
    }
LABEL_31:
    result = sub_1ACC31534(v13, a2, v23, a3, a5, a6, a7, a8);
    if (result)
    {
      v35 = result;
      v36 = v13[2];
      if (!v36)
      {
        if (!v13[21] && (*(_BYTE *)(*v13 + 96) & 8) == 0)
          *((_BYTE *)v13 + 35) = 1;
        v36 = sub_1ACBCB4C8(v13, v32, v33, v34, a5, a6, a7, a8);
      }
      result = (uint64_t *)sub_1ACC2EF6C(v13, (uint64_t)v35, a2, 2);
      if (result)
      {
        if (*v35)
          v37 = (*(_BYTE *)(*v13 + 49) & 0x20) == 0;
        else
          v37 = 0;
        v38 = (*((_DWORD *)v13 + 14) + 1);
        *((_DWORD *)v13 + 14) = v38;
        result = (uint64_t *)sub_1ACBA86CC((uint64_t *)v36, 48, a4, 0, v38, result[2], 4294967292, a8);
        v39 = *(_DWORD *)(v36 + 144);
        v40 = __OFSUB__(v39, 1);
        v41 = v39 - 1;
        if (v41 < 0 == v40)
          *(_WORD *)(*(_QWORD *)(v36 + 136) + 40 * v41 + 2) = v37;
      }
    }
    goto LABEL_11;
  }
  return result;
}

uint64_t sub_1ACC2EF6C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)a1[21];
  if (!v5)
    v5 = a1;
  result = v5[23];
  if (result)
  {
    while (*(_QWORD *)result != a2 || *(_DWORD *)(result + 24) != (_DWORD)a4)
    {
      result = *(_QWORD *)(result + 8);
      if (!result)
        goto LABEL_4;
    }
  }
  else
  {
LABEL_4:
    result = sub_1ACBAD260(a1, a2, a3, a4);
    *(_DWORD *)(*a1 + 84) = -1;
  }
  return result;
}

int *sub_1ACC2EFD4(uint64_t *a1, uint64_t a2)
{
  _QWORD *v4;
  const void *v5;
  size_t v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  int *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int *v24;
  _QWORD v26[2];

  v4 = (_QWORD *)*a1;
  v5 = *(const void **)(a2 + 24);
  if (!v5)
  {
    v8 = 0;
    goto LABEL_8;
  }
  v6 = strlen(*(const char **)(a2 + 24));
  v7 = v6 + 1;
  if (!v4)
  {
    v8 = (_QWORD *)sub_1ACB5D828(v6 + 1);
    if (!v8)
      goto LABEL_8;
    goto LABEL_7;
  }
  v8 = (_QWORD *)sub_1ACBE1124((uint64_t)v4, v7);
  if (v8)
LABEL_7:
    memcpy(v8, v5, v7);
LABEL_8:
  v9 = sub_1ACBE1124(*a1, 0x70uLL);
  if (v9)
  {
    v10 = (int *)v9;
    *(_QWORD *)v9 = 0x100000001;
    *(_OWORD *)(v9 + 8) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 24) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_QWORD *)(v9 + 104) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_DWORD *)(v9 + 72) = -1;
    *(_QWORD *)(v9 + 16) = 0;
    *(_QWORD *)(v9 + 24) = 0;
    v11 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 40);
    *(_QWORD *)(v9 + 24) = v8;
    if (v11 != *(_QWORD *)(v4[4] + 56))
      *(_QWORD *)(v9 + 8) = v11;
    v12 = *(int **)(a2 + 32);
    if (v12)
    {
      v13 = sub_1ACB8E1EC((uint64_t)v4, v12, 0);
      if (v13)
      {
        v18 = v13;
        v19 = *v13;
        if ((int)v19 >= 2 && *((unsigned __int8 *)a1 + 302) <= 1u)
        {
          v20 = sub_1ACB6E848((_QWORD **)a1, 0, v13, 0, 0, 0, 0, 2048, 0);
          v26[1] = 0;
          v26[0] = 0;
          v22 = sub_1ACB6E09C((uint64_t)a1, 0, 0, 0, (uint64_t)v26, (uint64_t)v20, 0, v21);
          if (!v22)
            return v10;
          v18 = v22;
          v19 = *v22;
        }
        v23 = sub_1ACB6E648(a1, v10, v19, 1, v14, v15, v16, v17);
        if (v23)
        {
          v24 = v23;
          memcpy(v23 + 28, v18 + 2, 104 * *v18);
          sub_1ACBE0F9C((_QWORD *)*a1, v18);
          *((_BYTE *)v24 + 68) |= v24[43] & 0x40;
          return v24;
        }
        else
        {
          sub_1ACB7E8B0((_QWORD *)*a1, v18);
        }
      }
    }
  }
  else
  {
    if (v8)
      sub_1ACBE0F9C(v4, v8);
    return 0;
  }
  return v10;
}

uint64_t sub_1ACC2F1E8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  _QWORD *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _QWORD *v11;

  if (!a2)
    return 0;
  v4 = sub_1ACB8B6B8((uint64_t)a1, *(_QWORD **)a2, 0);
  v5 = *(unsigned __int8 **)(a2 + 8);
  if (v5)
    v6 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)a1, v5, 0, 0);
  else
    v6 = 0;
  v8 = sub_1ACB8B6B8((uint64_t)a1, *(_QWORD **)(a2 + 16), 0);
  v9 = *(unsigned __int8 **)(a2 + 24);
  if (v9)
    v10 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)a1, v9, 0, 0);
  else
    v10 = 0;
  v11 = (_QWORD *)sub_1ACC2F1E8(a1, *(_QWORD *)(a2 + 32));
  return sub_1ACC040B8(a1, v4, v6, v8, v10, v11);
}

uint64_t sub_1ACC2F2B4(_QWORD **a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unsigned __int8 *i;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  const char *v27;
  uint64_t v28;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  _BYTE *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  const float *v42;
  unsigned __int128 *v43;
  uint64_t v44;
  const float *v45;
  unsigned __int128 v46;
  unsigned __int128 v47;
  _DWORD *v48;
  int *v49;
  uint64_t v50;
  int v51;

  v12 = *(int *)(a3 + 40);
  v13 = *(_QWORD *)(a3 + 72);
  if ((_DWORD)v12 == 1)
  {
    if ((*(__int16 *)(a2 + 52) & 0x80000000) == 0)
    {
      if (v13)
      {
        v14 = *(_BYTE **)(*(_QWORD *)(a2 + 8) + 16 * *(unsigned __int16 *)(a2 + 52));
        for (i = *(unsigned __int8 **)(a3 + 72); ; ++i)
        {
          v16 = *v14;
          v17 = *i;
          if ((_DWORD)v16 == (_DWORD)v17)
          {
            if (!*v14)
              return 0;
          }
          else if (byte_1ACCB6333[v16] != byte_1ACCB6333[v17])
          {
            goto LABEL_14;
          }
          ++v14;
        }
      }
      return 0;
    }
    goto LABEL_14;
  }
  if (!a5)
  {
LABEL_14:
    v21 = 0;
    v22 = *(_QWORD *)(a2 + 16);
    if (v22)
      goto LABEL_18;
    goto LABEL_56;
  }
  v20 = sub_1ACBE1124((uint64_t)*a1, 4 * v12);
  if (!v20)
    return 1;
  v21 = (_QWORD *)v20;
  *a5 = v20;
  v22 = *(_QWORD *)(a2 + 16);
  if (!v22)
  {
LABEL_56:
    if (!*((_BYTE *)a1 + 221))
      sub_1ACBCB308((uint64_t)a1, "foreign key mismatch - \"%w\" referencing \"%w\"", a3, (uint64_t)a4, (uint64_t)a5, a6, a7, a8, **(_QWORD **)a3);
    if (v21)
      sub_1ACBE0F9C(*a1, v21);
    return 1;
  }
LABEL_18:
  while ((_DWORD)v12 != *(unsigned __int16 *)(v22 + 94) || !*(_BYTE *)(v22 + 98) || *(_QWORD *)(v22 + 72))
  {
LABEL_17:
    v22 = *(_QWORD *)(v22 + 40);
    if (!v22)
      goto LABEL_56;
  }
  if (!v13)
  {
    if ((*(_WORD *)(v22 + 99) & 3) == 2)
    {
      if (v21 && (int)v12 >= 1)
      {
        if (v12 >= 0xD
          && ((unint64_t)v21 >= a3 + 16 * (unint64_t)v12 + 52
           || a3 + 64 >= (unint64_t)v21 + 4 * v12))
        {
          v41 = v12 & 7;
          if ((v12 & 7) == 0)
            v41 = 8;
          v40 = v12 - v41;
          v42 = (const float *)(a3 + 128);
          v43 = (unsigned __int128 *)(v21 + 2);
          v44 = v40;
          do
          {
            v45 = v42 - 16;
            v46 = (unsigned __int128)vld4q_f32(v45);
            v47 = (unsigned __int128)vld4q_f32(v42);
            *(v43 - 1) = v46;
            *v43 = v47;
            v42 += 32;
            v43 += 2;
            v44 -= 8;
          }
          while (v44);
        }
        else
        {
          v40 = 0;
        }
        v48 = (_DWORD *)v21 + v40;
        v49 = (int *)(a3 + 16 * v40 + 64);
        v50 = v12 - v40;
        do
        {
          v51 = *v49;
          v49 += 4;
          *v48++ = v51;
          --v50;
        }
        while (v50);
      }
      goto LABEL_73;
    }
    goto LABEL_17;
  }
  if ((int)v12 < 1)
  {
    LODWORD(v23) = 0;
    goto LABEL_54;
  }
  v23 = 0;
  v24 = *(_QWORD *)(v22 + 8);
  while (2)
  {
    if (*(__int16 *)(v24 + 2 * v23) < 0)
    {
LABEL_54:
      if ((_DWORD)v23 == (_DWORD)v12)
        break;
      goto LABEL_17;
    }
    v25 = *(_QWORD *)(a2 + 8) + 16 * *(unsigned __int16 *)(v24 + 2 * v23);
    v26 = *(_WORD *)(v25 + 14);
    if ((v26 & 0x200) != 0)
    {
      v28 = *(_QWORD *)v25 - 1;
      while (*(unsigned __int8 *)++v28)
        ;
      if ((v26 & 4) != 0)
      {
        while (*(unsigned __int8 *)++v28)
          ;
      }
      v27 = (const char *)(v28 + 1);
    }
    else
    {
      v27 = 0;
    }
    if (!v27)
      v27 = "BINARY";
    v31 = *(_BYTE **)(*(_QWORD *)(v22 + 64) + 8 * v23);
    while (2)
    {
      v32 = *v31;
      v33 = *(unsigned __int8 *)v27;
      if ((_DWORD)v32 != (_DWORD)v33)
      {
        if (byte_1ACCB6333[v32] != byte_1ACCB6333[v33])
          goto LABEL_54;
        goto LABEL_36;
      }
      if (*v31)
      {
LABEL_36:
        ++v31;
        ++v27;
        continue;
      }
      break;
    }
    v34 = 0;
    v35 = *(unsigned __int8 **)v25;
    while (2)
    {
      v36 = *(_BYTE **)(a3 + 16 * v34 + 72);
      v37 = v35;
LABEL_43:
      v38 = *v36;
      v39 = *v37;
      if ((_DWORD)v38 != (_DWORD)v39)
      {
        if (byte_1ACCB6333[v38] != byte_1ACCB6333[v39])
        {
          if (++v34 != v12)
            continue;
          goto LABEL_54;
        }
        goto LABEL_42;
      }
      break;
    }
    if (*v36)
    {
LABEL_42:
      ++v36;
      ++v37;
      goto LABEL_43;
    }
    if (v21)
      *((_DWORD *)v21 + v23) = *(_DWORD *)(a3 + 16 * v34 + 64);
    if ((_DWORD)v12 == (_DWORD)v34)
      goto LABEL_54;
    if (++v23 != v12)
      continue;
    break;
  }
LABEL_73:
  result = 0;
  *a4 = v22;
  return result;
}

void sub_1ACC2F5F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int *v21;
  unsigned __int8 *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  int *v27;
  uint64_t v28;
  const void *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  int *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  const void *v39;
  unint64_t v40;
  void *v41;
  unsigned __int8 *v42;
  unsigned int v43;
  int *v44;
  int *v45;
  int *v46;
  const void *v47;
  uint64_t v48;
  unint64_t v49;
  void *v50;
  void *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  int v80;
  _DWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  int *v84;
  _QWORD **v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  _OWORD v90[2];
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD v96[2];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;

  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD **)a1;
  v10 = *(_QWORD *)(a1 + 200);
  memset(v96, 0, sizeof(v96));
  v97 = 0u;
  v98 = 0u;
  v99 = 0u;
  v100 = 0u;
  v101 = 0u;
  v102 = 0u;
  memset(v90, 0, sizeof(v90));
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  *(_QWORD *)&v97 = sub_1ACB8B6B8((uint64_t)v9, *(_QWORD **)(v10 + 8), 0);
  *((_QWORD *)&v97 + 1) = v90;
  LODWORD(v90[0]) = 1;
  *((_QWORD *)&v91 + 1) = a3;
  DWORD2(v93) = -1;
  sub_1ACC10600((_BYTE *)a1, (uint64_t)v96, 0);
  v85 = (_QWORD **)a1;
  if (!*(_DWORD *)(a1 + 48))
    sub_1ACC14E74((_BYTE *)a1, (uint64_t)v96);
  if ((_QWORD)v97)
    sub_1ACC010B0(v9, (_QWORD *)v97);
  v83 = v9;
  v84 = *(int **)(v10 + 8);
  v81 = (_DWORD *)v10;
  v82 = v8;
  v80 = a4;
  v79 = a2;
  if (*v84 >= 1)
  {
    v17 = 0;
    v18 = 0;
    v19 = v84;
    v20 = *(_QWORD *)a1;
    while (1)
    {
      v22 = *(unsigned __int8 **)&v19[6 * v17 + 2];
      if (!v22)
        goto LABEL_8;
      v23 = *v22;
      if (v23 == 180)
        goto LABEL_14;
      if (v23 == 141 && **((unsigned __int8 **)v22 + 3) == 180)
      {
        sub_1ACBCB308((uint64_t)v85, "RETURNING may not use \"TABLE.*\" wildcards", v11, v12, v13, v14, v15, v16, v78);
LABEL_14:
        if (*(__int16 *)(a3 + 54) >= 1)
        {
          v24 = 0;
          v25 = 0;
          while (1)
          {
            v28 = *(_QWORD *)(a3 + 8);
            if ((*(_WORD *)(v28 + v24 + 14) & 2) != 0)
              goto LABEL_18;
            v29 = *(const void **)(v28 + v24);
            if (v29)
              v30 = strlen(*(const char **)(v28 + v24)) & 0x3FFFFFFF;
            else
              v30 = 0;
            v31 = sub_1ACBE1124(v20, v30 + 81);
            v32 = v31;
            if (v31)
            {
              *(_OWORD *)(v31 + 48) = 0u;
              *(_OWORD *)(v31 + 64) = 0u;
              *(_OWORD *)(v31 + 16) = 0u;
              *(_OWORD *)(v31 + 32) = 0u;
              *(_OWORD *)v31 = 0u;
              *(_BYTE *)v31 = 59;
              *(_WORD *)(v31 + 52) = -1;
              v33 = v31 + 80;
              *(_QWORD *)(v31 + 8) = v31 + 80;
              if (v30)
                memcpy((void *)(v31 + 80), v29, v30);
              *(_BYTE *)(v33 + v30) = 0;
              *(_DWORD *)(v32 + 40) = 1;
            }
            if (v18)
            {
              v34 = *v18;
              if (v18[1] > *v18)
              {
                *v18 = v34 + 1;
                v35 = &v18[6 * v34];
                *((_QWORD *)v35 + 2) = 0;
                *((_QWORD *)v35 + 3) = 0;
                *((_QWORD *)v35 + 1) = v32;
                if (!*(_BYTE *)(v20 + 103))
                  goto LABEL_34;
                goto LABEL_18;
              }
              v36 = sub_1ACC2D4F4((uint64_t)*v85, v18, (unsigned __int8 *)v32);
            }
            else
            {
              v36 = (int *)sub_1ACC2D490(*v85, (unsigned __int8 *)v32);
            }
            v18 = v36;
            if (!*(_BYTE *)(v20 + 103))
            {
LABEL_34:
              v37 = *v18;
              v38 = *(_QWORD *)(a3 + 8);
              v39 = *(const void **)(v38 + v24);
              if (v39)
              {
                v40 = strlen(*(const char **)(v38 + v24)) + 1;
                v41 = (void *)sub_1ACBE1124(v20, v40);
                v26 = v41;
                if (v41)
                  memcpy(v41, v39, v40);
              }
              else
              {
                v26 = 0;
              }
              v27 = &v18[6 * v37 - 6];
              *((_QWORD *)v27 + 2) = v26;
              *(_WORD *)((char *)v27 + 25) &= 0xFFFCu;
            }
LABEL_18:
            ++v25;
            v24 += 16;
            if (v25 >= *(__int16 *)(a3 + 54))
              goto LABEL_8;
          }
        }
        goto LABEL_8;
      }
      v42 = (unsigned __int8 *)sub_1ACB8B290(v20, v22, 0, 0);
      v11 = (uint64_t)v42;
      if (v18)
      {
        v43 = *v18;
        if (v18[1] > *v18)
        {
          *v18 = v43 + 1;
          v44 = &v18[6 * v43];
          *((_QWORD *)v44 + 2) = 0;
          *((_QWORD *)v44 + 3) = 0;
          *((_QWORD *)v44 + 1) = v42;
          if (!*(_BYTE *)(v20 + 103))
            goto LABEL_44;
          goto LABEL_8;
        }
        v45 = sub_1ACC2D4F4((uint64_t)*v85, v18, v42);
      }
      else
      {
        v45 = (int *)sub_1ACC2D490(*v85, v42);
      }
      v18 = v45;
      if (!*(_BYTE *)(v20 + 103))
      {
LABEL_44:
        v46 = &v19[6 * v17];
        v47 = (const void *)*((_QWORD *)v46 + 2);
        if (v47)
        {
          v48 = *v18;
          v49 = strlen(*((const char **)v46 + 2)) + 1;
          v50 = (void *)sub_1ACBE1124(v20, v49);
          v51 = v50;
          if (v50)
            memcpy(v50, v47, v49);
          v21 = &v18[6 * v48 - 6];
          *((_QWORD *)v21 + 2) = v51;
          *(_WORD *)((char *)v21 + 25) = *(_WORD *)((_BYTE *)v21 + 25) & 0xFFFC | *(_WORD *)((_BYTE *)&v19[6 * v17 + 6]
                                                                                           + 1) & 3;
        }
      }
LABEL_8:
      ++v17;
      v19 = v84;
      if (v17 >= *v84)
        goto LABEL_48;
    }
  }
  v18 = 0;
LABEL_48:
  if (!*((_DWORD *)v85 + 12))
  {
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    v86 = 0u;
    if (!v81[47])
    {
      v81[47] = *v18;
      v52 = *((_DWORD *)v85 + 13);
      *((_DWORD *)v85 + 13) = v52 + 1;
      v81[46] = v52;
    }
    *(_QWORD *)&v86 = v85;
    LODWORD(v87) = v80;
    DWORD2(v88) = 1024;
    *((_BYTE *)v85 + 218) = *(_BYTE *)(v79 + 16);
    v85[22] = (_QWORD *)a3;
    v56 = v82;
    if (!sub_1ACC0F8AC((uint64_t)&v86, v18, v11, v12, v13, v14, v15, v16) && !*((_BYTE *)v83 + 103))
    {
      v57 = *v18;
      v58 = *((_DWORD *)v85 + 14);
      v59 = (v58 + 1);
      *((_DWORD *)v85 + 14) = v57 + v58 + 2;
      v81[48] = v59;
      if ((int)v57 < 1)
      {
        v57 = 0;
      }
      else
      {
        v60 = (uint64_t *)(v18 + 2);
        v61 = v57;
        v62 = (v58 + 1);
        do
        {
          v64 = v56;
          v65 = *v60;
          sub_1ACC0D760(v85, *v60, v62);
          v66 = (unsigned __int8 *)v65;
          v56 = v64;
          if (sub_1ACB92644(v66) == 69)
          {
            v67 = *(_DWORD *)(v64 + 144);
            if (*(_DWORD *)(v64 + 148) > v67)
            {
              *(_DWORD *)(v64 + 144) = v67 + 1;
              v63 = *(_QWORD *)(v64 + 136) + 40 * v67;
              *(_DWORD *)v63 = 87;
              *(_DWORD *)(v63 + 4) = v62;
              *(_OWORD *)(v63 + 8) = 0u;
              *(_OWORD *)(v63 + 24) = 0u;
            }
            else
            {
              sub_1ACBFF5AC(v64, 87, v62, 0, 0, v53, v54, v55);
            }
          }
          v62 = (v62 + 1);
          v60 += 3;
          --v61;
        }
        while (v61);
      }
      v68 = (v57 + v59);
      v69 = *(_DWORD *)(v56 + 144);
      if (*(_DWORD *)(v56 + 148) <= v69)
      {
        sub_1ACBFF5AC(v56, 97, v59, v57, (v57 + v59), v53, v54, v55);
      }
      else
      {
        *(_DWORD *)(v56 + 144) = v69 + 1;
        v70 = *(_QWORD *)(v56 + 136) + 40 * v69;
        *(_DWORD *)v70 = 97;
        *(_DWORD *)(v70 + 4) = v59;
        *(_DWORD *)(v70 + 8) = v57;
        *(_DWORD *)(v70 + 12) = v68;
        *(_QWORD *)(v70 + 24) = 0;
        *(_QWORD *)(v70 + 32) = 0;
        *(_QWORD *)(v70 + 16) = 0;
      }
      v71 = v81[46];
      v72 = v68 + 1;
      v73 = *(_DWORD *)(v56 + 144);
      if (*(_DWORD *)(v56 + 148) <= v73)
      {
        sub_1ACBFF5AC(v56, 127, v71, (v68 + 1), 0, v53, v54, v55);
      }
      else
      {
        *(_DWORD *)(v56 + 144) = v73 + 1;
        v74 = *(_QWORD *)(v56 + 136) + 40 * v73;
        *(_DWORD *)v74 = 127;
        *(_DWORD *)(v74 + 4) = v71;
        *(_DWORD *)(v74 + 8) = v72;
        *(_QWORD *)(v74 + 12) = 0;
        *(_QWORD *)(v74 + 28) = 0;
        *(_QWORD *)(v74 + 20) = 0;
        *(_DWORD *)(v74 + 36) = 0;
      }
      v75 = v81[46];
      v76 = *(_DWORD *)(v56 + 144);
      if (*(_DWORD *)(v56 + 148) <= v76)
      {
        sub_1ACBFF5AC(v56, 128, v75, v68, (v68 + 1), v53, v54, v55);
      }
      else
      {
        *(_DWORD *)(v56 + 144) = v76 + 1;
        v77 = *(_QWORD *)(v56 + 136) + 40 * v76;
        *(_DWORD *)v77 = 128;
        *(_DWORD *)(v77 + 4) = v75;
        *(_DWORD *)(v77 + 8) = v68;
        *(_DWORD *)(v77 + 12) = v72;
        *(_QWORD *)(v77 + 24) = 0;
        *(_QWORD *)(v77 + 32) = 0;
        *(_QWORD *)(v77 + 16) = 0;
      }
    }
  }
  if (v18)
    sub_1ACC010B0(v83, v18);
  *((_BYTE *)v85 + 218) = 0;
  v85[22] = 0;
}

uint64_t sub_1ACC2FC58(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9)
{
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int8x16_t v23;
  int8x16_t v24;
  int8x16_t v25;
  int8x16_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;
  int16x8_t v36;
  uint64_t v37;
  int16x8_t v38;
  int8x16_t v39;
  uint16x8_t v40;
  uint16x8_t v41;
  int8x16_t v42;
  int16x8_t v43;
  int16x8_t v44;
  uint64_t v45;
  unsigned __int16 *v46;
  unsigned int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  unsigned __int8 v53;
  uint64_t v54;
  int v55;
  BOOL v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  int8x16_t v76;
  int8x16_t v77;
  int8x16_t v78;
  int8x16_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  uint64_t v88;
  int16x8_t v89;
  uint64_t v90;
  int16x8_t v91;
  int8x16_t v92;
  uint16x8_t v93;
  uint16x8_t v94;
  int8x16_t v95;
  int16x8_t v96;
  int16x8_t v97;
  uint64_t v98;
  unsigned __int16 *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int8x16_t v108;
  int8x16_t v109;
  int8x16_t v110;
  int8x16_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  int16x8_t v121;
  uint64_t v122;
  int16x8_t v123;
  int8x16_t v124;
  uint16x8_t v125;
  uint16x8_t v126;
  int8x16_t v127;
  int16x8_t v128;
  int16x8_t v129;
  uint64_t v130;
  unsigned __int16 *v131;
  unsigned int v132;
  uint64_t v133;
  __int16 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int16x8_t v141;
  uint64_t v142;
  int16x8_t v143;
  int8x16_t v144;
  uint16x8_t v145;
  uint16x8_t v146;
  int8x16_t v147;
  int16x8_t v148;
  int16x8_t v149;
  uint64_t v150;
  unsigned __int16 *v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  _DWORD *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  _DWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int16x8_t v170;
  int8x16_t v171;
  uint64_t v172;
  int16x8_t v173;
  int8x16_t v174;
  uint16x8_t v175;
  uint16x8_t v176;
  int8x16_t v177;
  int16x8_t v178;
  int16x8_t v179;
  uint64_t v180;
  unsigned __int16 *v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  int v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  int v194;
  uint64_t v195;
  int v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  int v201;
  uint64_t v202;
  uint64_t result;
  int v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  int v209;
  int v210;
  unsigned int v211;
  uint64_t *v212;
  unsigned int v213;
  int v214;
  unsigned int v215;
  unsigned int v217;
  int8x16x2_t v219;
  int8x16x2_t v220;
  int8x16x2_t v221;
  int8x16x2_t v222;
  int8x16x2_t v223;

  v9 = a8;
  v217 = a7;
  v10 = (_DWORD *)a6;
  v11 = a5;
  v12 = a2;
  v13 = a1;
  v14 = a1[2];
  if (!v14)
  {
    if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
      *((_BYTE *)a1 + 35) = 1;
    v14 = sub_1ACBCB4C8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  v15 = *((_DWORD *)v13 + 13);
  v16 = *((_DWORD *)v13 + 17);
  v17 = (v16 - 1);
  *((_DWORD *)v13 + 17) = v17;
  if ((v9 & 0x80000000) != 0)
  {
    v18 = *(unsigned __int8 *)(v11 + 44);
    v19 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v19)
    {
      sub_1ACBFF5AC(v14, 49, v18, (v16 - 1), 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v19 + 1;
      v20 = *(_QWORD *)(v14 + 136) + 40 * v19;
      *(_DWORD *)v20 = 49;
      *(_DWORD *)(v20 + 4) = v18;
      *(_DWORD *)(v20 + 8) = v17;
      *(_QWORD *)(v20 + 12) = 0;
      *(_QWORD *)(v20 + 28) = 0;
      *(_QWORD *)(v20 + 20) = 0;
      *(_DWORD *)(v20 + 36) = 0;
    }
  }
  v21 = *(unsigned int *)(v11 + 40);
  v211 = v12;
  if ((int)v21 < 1)
  {
    v50 = (v15 - 1);
    if (a9)
      goto LABEL_177;
  }
  else
  {
    v213 = v9;
    v22 = 0;
    v23 = (int8x16_t)xmmword_1ACCBDDB0;
    v24 = (int8x16_t)xmmword_1ACCBDDC0;
    v25 = (int8x16_t)xmmword_1ACCBDDD0;
    v26.i64[0] = 0x1000100010001;
    v26.i64[1] = 0x1000100010001;
    do
    {
      v28 = v10[v22];
      v29 = (__int16)v28;
      if ((v28 & 0x8000) == 0)
      {
        v30 = *(_QWORD *)v11;
        if ((*(_DWORD *)(*(_QWORD *)v11 + 48) & 0x20) != 0)
        {
          v31 = *(_QWORD *)(v30 + 8);
          if ((unsigned __int16)v10[v22])
          {
            if ((v28 << 16) >= 0x110000)
            {
              v34 = v28 & 0xF;
              if ((v28 & 0xF) == 0)
                v34 = 16;
              v32 = v29 - v34;
              v35 = v31 + 142;
              v36 = 0uLL;
              v37 = v32;
              v38 = 0uLL;
              do
              {
                v39 = vqtbl2q_s8(*(int8x16x2_t *)(v35 - 64), v24);
                v39.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v35 - 32), v23).i32[3];
                v40.i32[0] = vzip1q_s16(*(int16x8_t *)(v35 - 128), *(int16x8_t *)(v35 - 112)).u32[0];
                v40.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v35 - 96), v25).i32[1];
                v40.i64[1] = v39.i64[1];
                v41 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v35 + 96), v23);
                v219 = *(int8x16x2_t *)(v35 + 32);
                v42 = vqtbl2q_s8(*(int8x16x2_t *)(v35 + 64), v24);
                v44 = *(int16x8_t *)v35;
                v43 = *(int16x8_t *)(v35 + 16);
                v35 += 256;
                v42.i32[3] = v41.i32[3];
                v41.i32[0] = vzip1q_s16(v44, v43).u32[0];
                v41.i32[1] = vqtbl2q_s8(v219, v25).i32[1];
                v41.i64[1] = v42.i64[1];
                v36 = vaddq_s16((int16x8_t)vbicq_s8(v26, (int8x16_t)vshrq_n_u16(v40, 5uLL)), v36);
                v38 = vaddq_s16((int16x8_t)vbicq_s8(v26, (int8x16_t)vshrq_n_u16(v41, 5uLL)), v38);
                v37 -= 16;
              }
              while (v37);
              v33 = vaddvq_s16(vaddq_s16(v38, v36));
            }
            else
            {
              v32 = 0;
              v33 = 0;
            }
            v45 = v29 - v32;
            v46 = (unsigned __int16 *)(v31 + 16 * v32 + 14);
            do
            {
              v47 = *v46;
              v46 += 8;
              v33 += ((v47 >> 5) & 1) == 0;
              --v45;
            }
            while (v45);
          }
          else
          {
            v33 = 0;
          }
          if ((*(_WORD *)(v31 + 16 * v29 + 14) & 0x20) != 0)
            LOWORD(v29) = v28 - v33 + *(_WORD *)(v30 + 56);
          else
            LOWORD(v29) = v33;
        }
      }
      v48 = v217 + 1 + (__int16)v29;
      v49 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) > v49)
      {
        *(_DWORD *)(v14 + 144) = v49 + 1;
        v27 = *(_QWORD *)(v14 + 136) + 40 * v49;
        *(_DWORD *)v27 = 50;
        *(_DWORD *)(v27 + 4) = v48;
        *(_DWORD *)(v27 + 8) = v17;
        *(_QWORD *)(v27 + 12) = 0;
        *(_QWORD *)(v27 + 28) = 0;
        *(_QWORD *)(v27 + 20) = 0;
        *(_DWORD *)(v27 + 36) = 0;
      }
      else
      {
        sub_1ACBFF5AC(v14, 50, v48, v17, 0, a6, a7, a8);
        v26.i64[0] = 0x1000100010001;
        v26.i64[1] = 0x1000100010001;
        v25 = (int8x16_t)xmmword_1ACCBDDD0;
        v24 = (int8x16_t)xmmword_1ACCBDDC0;
        v23 = (int8x16_t)xmmword_1ACCBDDB0;
      }
      ++v22;
      v21 = *(int *)(v11 + 40);
    }
    while (v22 < v21);
    v9 = v213;
    v50 = (v15 - 1);
    if (a9)
      goto LABEL_177;
  }
  if (a4)
  {
    if ((_DWORD)v21 == 1)
    {
      if (*((_BYTE *)v13 + 31))
      {
        v51 = *((_BYTE *)v13 + 31) - 1;
        *((_BYTE *)v13 + 31) = v51;
        v52 = *((unsigned int *)v13 + v51 + 56);
      }
      else
      {
        v52 = (*((_DWORD *)v13 + 14) + 1);
        *((_DWORD *)v13 + 14) = v52;
      }
    }
    else
    {
      v55 = *((_DWORD *)v13 + 10);
      v56 = __OFSUB__(v55, (_DWORD)v21);
      v57 = v55 - v21;
      if (v57 < 0 != v56)
      {
        v58 = *((_DWORD *)v13 + 14);
        v52 = (v58 + 1);
        *((_DWORD *)v13 + 14) = v58 + v21;
      }
      else
      {
        v52 = *((unsigned int *)v13 + 11);
        *((_DWORD *)v13 + 10) = v57;
        *((_DWORD *)v13 + 11) = v52 + v21;
      }
    }
    v65 = *(unsigned int *)(a4 + 88);
    v66 = *(_DWORD *)(v14 + 144);
    v214 = v16;
    if (*(_DWORD *)(v14 + 148) <= v66)
    {
      sub_1ACBFF5AC(v14, 112, v50, v65, v211, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v66 + 1;
      v67 = *(_QWORD *)(v14 + 136) + 40 * v66;
      *(_DWORD *)v67 = 112;
      *(_DWORD *)(v67 + 4) = v50;
      *(_DWORD *)(v67 + 8) = v65;
      *(_DWORD *)(v67 + 12) = v211;
      *(_QWORD *)(v67 + 24) = 0;
      *(_QWORD *)(v67 + 32) = 0;
      *(_QWORD *)(v67 + 16) = 0;
    }
    v68 = v13[2];
    v69 = sub_1ACC09130(v13, a4);
    if (v69)
    {
      if (*(_BYTE *)(*(_QWORD *)v68 + 103))
      {
        if (!*(_QWORD *)(*(_QWORD *)v68 + 816) && (*(_DWORD *)v69)-- == 1)
          sub_1ACBF0674(*(_QWORD **)(v69 + 16), (_QWORD *)v69);
      }
      else
      {
        v74 = *(_QWORD *)(v68 + 136) + 40 * *(int *)(v68 + 144);
        *(_BYTE *)(v74 - 39) = -8;
        *(_QWORD *)(v74 - 24) = v69;
      }
    }
    v215 = v50;
    v212 = v13;
    if ((int)v21 >= 1)
    {
      v75 = 0;
      v76 = (int8x16_t)xmmword_1ACCBDDB0;
      v77 = (int8x16_t)xmmword_1ACCBDDC0;
      v78 = (int8x16_t)xmmword_1ACCBDDD0;
      v79.i64[0] = 0x1000100010001;
      v79.i64[1] = 0x1000100010001;
      do
      {
        v81 = v10[v75];
        v82 = (__int16)v81;
        if ((v81 & 0x8000) == 0)
        {
          v83 = *(_QWORD *)v11;
          if ((*(_DWORD *)(*(_QWORD *)v11 + 48) & 0x20) != 0)
          {
            v84 = *(_QWORD *)(v83 + 8);
            if ((unsigned __int16)v10[v75])
            {
              if ((v81 << 16) >= 0x110000)
              {
                v87 = v81 & 0xF;
                if ((v81 & 0xF) == 0)
                  v87 = 16;
                v85 = v82 - v87;
                v88 = v84 + 142;
                v89 = 0uLL;
                v90 = v85;
                v91 = 0uLL;
                do
                {
                  v92 = vqtbl2q_s8(*(int8x16x2_t *)(v88 - 64), v77);
                  v92.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v88 - 32), v76).i32[3];
                  v93.i32[0] = vzip1q_s16(*(int16x8_t *)(v88 - 128), *(int16x8_t *)(v88 - 112)).u32[0];
                  v93.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v88 - 96), v78).i32[1];
                  v93.i64[1] = v92.i64[1];
                  v94 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v88 + 96), v76);
                  v220 = *(int8x16x2_t *)(v88 + 32);
                  v95 = vqtbl2q_s8(*(int8x16x2_t *)(v88 + 64), v77);
                  v97 = *(int16x8_t *)v88;
                  v96 = *(int16x8_t *)(v88 + 16);
                  v88 += 256;
                  v95.i32[3] = v94.i32[3];
                  v94.i32[0] = vzip1q_s16(v97, v96).u32[0];
                  v94.i32[1] = vqtbl2q_s8(v220, v78).i32[1];
                  v94.i64[1] = v95.i64[1];
                  v89 = vaddq_s16((int16x8_t)vbicq_s8(v79, (int8x16_t)vshrq_n_u16(v93, 5uLL)), v89);
                  v91 = vaddq_s16((int16x8_t)vbicq_s8(v79, (int8x16_t)vshrq_n_u16(v94, 5uLL)), v91);
                  v90 -= 16;
                }
                while (v90);
                v86 = vaddvq_s16(vaddq_s16(v91, v89));
              }
              else
              {
                v85 = 0;
                v86 = 0;
              }
              v98 = v82 - v85;
              v99 = (unsigned __int16 *)(v84 + 16 * v85 + 14);
              do
              {
                v100 = *v99;
                v99 += 8;
                v86 += ((v100 >> 5) & 1) == 0;
                --v98;
              }
              while (v98);
            }
            else
            {
              v86 = 0;
            }
            if ((*(_WORD *)(v84 + 16 * v82 + 14) & 0x20) != 0)
              LOWORD(v82) = v81 - v86 + *(_WORD *)(v83 + 56);
            else
              LOWORD(v82) = v86;
          }
        }
        v101 = v217 + 1 + (__int16)v82;
        v102 = (v52 + v75);
        v103 = *(_DWORD *)(v14 + 144);
        if (*(_DWORD *)(v14 + 148) > v103)
        {
          *(_DWORD *)(v14 + 144) = v103 + 1;
          v80 = *(_QWORD *)(v14 + 136) + 40 * v103;
          *(_DWORD *)v80 = 80;
          *(_DWORD *)(v80 + 4) = v101;
          *(_DWORD *)(v80 + 8) = v102;
          *(_QWORD *)(v80 + 12) = 0;
          *(_QWORD *)(v80 + 28) = 0;
          *(_QWORD *)(v80 + 20) = 0;
          *(_DWORD *)(v80 + 36) = 0;
        }
        else
        {
          sub_1ACBFF5AC(v14, 80, v101, v102, 0, v70, v71, v72);
          v79.i64[0] = 0x1000100010001;
          v79.i64[1] = 0x1000100010001;
          v78 = (int8x16_t)xmmword_1ACCBDDD0;
          v77 = (int8x16_t)xmmword_1ACCBDDC0;
          v76 = (int8x16_t)xmmword_1ACCBDDB0;
        }
        ++v75;
      }
      while (v75 != v21);
    }
    v9 = v9;
    v16 = v214;
    v50 = v50;
    if ((_DWORD)v9 == 1 && *(_QWORD *)v11 == a3)
    {
      v104 = *(_DWORD *)(v14 + 144);
      if ((int)v21 >= 1)
      {
        v105 = 0;
        v106 = (v21 + v104 + 1);
        v107 = v217 + 1;
        v108 = (int8x16_t)xmmword_1ACCBDDB0;
        v109 = (int8x16_t)xmmword_1ACCBDDC0;
        v110 = (int8x16_t)xmmword_1ACCBDDD0;
        v111.i64[0] = 0x1000100010001;
        v111.i64[1] = 0x1000100010001;
        v71 = 1;
        v112 = v21;
        do
        {
          v113 = v10[v105];
          v114 = (__int16)v113;
          if ((v113 & 0x8000) == 0)
          {
            v115 = *(_QWORD *)v11;
            if ((*(_DWORD *)(*(_QWORD *)v11 + 48) & 0x20) != 0)
            {
              v116 = *(_QWORD *)(v115 + 8);
              if ((unsigned __int16)v10[v105])
              {
                if ((v113 << 16) >= 0x110000)
                {
                  v119 = v113 & 0xF;
                  if ((v113 & 0xF) == 0)
                    v119 = 16;
                  v117 = v114 - v119;
                  v120 = v116 + 142;
                  v121 = 0uLL;
                  v122 = v117;
                  v123 = 0uLL;
                  do
                  {
                    v124 = vqtbl2q_s8(*(int8x16x2_t *)(v120 - 64), v109);
                    v124.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v120 - 32), v108).i32[3];
                    v125.i32[0] = vzip1q_s16(*(int16x8_t *)(v120 - 128), *(int16x8_t *)(v120 - 112)).u32[0];
                    v125.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v120 - 96), v110).i32[1];
                    v125.i64[1] = v124.i64[1];
                    v126 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v120 + 96), v108);
                    v221 = *(int8x16x2_t *)(v120 + 32);
                    v127 = vqtbl2q_s8(*(int8x16x2_t *)(v120 + 64), v109);
                    v129 = *(int16x8_t *)v120;
                    v128 = *(int16x8_t *)(v120 + 16);
                    v120 += 256;
                    v127.i32[3] = v126.i32[3];
                    v126.i32[0] = vzip1q_s16(v129, v128).u32[0];
                    v126.i32[1] = vqtbl2q_s8(v221, v110).i32[1];
                    v126.i64[1] = v127.i64[1];
                    v121 = vaddq_s16((int16x8_t)vbicq_s8(v111, (int8x16_t)vshrq_n_u16(v125, 5uLL)), v121);
                    v123 = vaddq_s16((int16x8_t)vbicq_s8(v111, (int8x16_t)vshrq_n_u16(v126, 5uLL)), v123);
                    v122 -= 16;
                  }
                  while (v122);
                  v118 = vaddvq_s16(vaddq_s16(v123, v121));
                }
                else
                {
                  v117 = 0;
                  v118 = 0;
                }
                v130 = v114 - v117;
                v131 = (unsigned __int16 *)(v116 + 16 * v117 + 14);
                do
                {
                  v132 = *v131;
                  v131 += 8;
                  v118 += ((v132 >> 5) & 1) == 0;
                  --v130;
                }
                while (v130);
              }
              else
              {
                v118 = 0;
              }
              if ((*(_WORD *)(v116 + 16 * v114 + 14) & 0x20) != 0)
                LOWORD(v114) = v113 - v118 + *(_WORD *)(v115 + 56);
              else
                LOWORD(v114) = v118;
            }
          }
          v133 = *(__int16 *)(*(_QWORD *)(a4 + 8) + 2 * v105);
          v134 = *(_WORD *)(*(_QWORD *)(a4 + 8) + 2 * v105);
          if ((v133 & 0x8000000000000000) == 0)
          {
            v135 = *(_QWORD *)(a4 + 24);
            v134 = *(_WORD *)(*(_QWORD *)(a4 + 8) + 2 * v105);
            if ((*(_DWORD *)(v135 + 48) & 0x20) != 0)
            {
              v136 = *(_QWORD *)(v135 + 8);
              if (*(_WORD *)(*(_QWORD *)(a4 + 8) + 2 * v105))
              {
                v137 = v133;
                if (v133 >= 0x11uLL)
                {
                  v139 = v133 & 0xF;
                  if ((v133 & 0xF) == 0)
                    v139 = 16;
                  v138 = v133 - v139;
                  v140 = v136 + 142;
                  v141 = 0uLL;
                  v142 = v138;
                  v143 = 0uLL;
                  do
                  {
                    v144 = vqtbl2q_s8(*(int8x16x2_t *)(v140 - 64), v109);
                    v144.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v140 - 32), v108).i32[3];
                    v145.i32[0] = vzip1q_s16(*(int16x8_t *)(v140 - 128), *(int16x8_t *)(v140 - 112)).u32[0];
                    v145.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v140 - 96), v110).i32[1];
                    v145.i64[1] = v144.i64[1];
                    v146 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v140 + 96), v108);
                    v222 = *(int8x16x2_t *)(v140 + 32);
                    v147 = vqtbl2q_s8(*(int8x16x2_t *)(v140 + 64), v109);
                    v149 = *(int16x8_t *)v140;
                    v148 = *(int16x8_t *)(v140 + 16);
                    v140 += 256;
                    v147.i32[3] = v146.i32[3];
                    v146.i32[0] = vzip1q_s16(v149, v148).u32[0];
                    v146.i32[1] = vqtbl2q_s8(v222, v110).i32[1];
                    v146.i64[1] = v147.i64[1];
                    v141 = vaddq_s16((int16x8_t)vbicq_s8(v111, (int8x16_t)vshrq_n_u16(v145, 5uLL)), v141);
                    v143 = vaddq_s16((int16x8_t)vbicq_s8(v111, (int8x16_t)vshrq_n_u16(v146, 5uLL)), v143);
                    v142 -= 16;
                  }
                  while (v142);
                  v134 = vaddvq_s16(vaddq_s16(v143, v141));
                }
                else
                {
                  v138 = 0;
                  v134 = 0;
                }
                v150 = v133 - v138;
                v151 = (unsigned __int16 *)(v136 + 16 * v138 + 14);
                do
                {
                  v152 = *v151;
                  v151 += 8;
                  v134 += ((v152 >> 5) & 1) == 0;
                  --v150;
                }
                while (v150);
              }
              else
              {
                v137 = 0;
                v134 = 0;
              }
              if ((*(_WORD *)(v136 + 16 * v137 + 14) & 0x20) != 0)
                v134 = v133 - v134 + *(_WORD *)(v135 + 56);
            }
          }
          v153 = (v107 + (__int16)v114);
          if (*(unsigned __int16 *)(a3 + 52) == (unsigned __int16)v133)
            v154 = v217;
          else
            v154 = (v107 + v134);
          if (*(_DWORD *)(v14 + 148) <= v104)
          {
            v156 = v52;
            v157 = v112;
            v158 = v11;
            v159 = v10;
            v160 = v17;
            v161 = v107;
            sub_1ACBFF5AC(v14, 52, v153, v106, v154, v70, 1, v72);
            v71 = 1;
            v107 = v161;
            v17 = v160;
            v10 = v159;
            v11 = v158;
            v112 = v157;
            v52 = v156;
            v111.i64[0] = 0x1000100010001;
            v111.i64[1] = 0x1000100010001;
            v110 = (int8x16_t)xmmword_1ACCBDDD0;
            v109 = (int8x16_t)xmmword_1ACCBDDC0;
            v108 = (int8x16_t)xmmword_1ACCBDDB0;
          }
          else
          {
            *(_DWORD *)(v14 + 144) = v104 + 1;
            v155 = *(_QWORD *)(v14 + 136) + 40 * v104;
            *(_DWORD *)v155 = 52;
            *(_DWORD *)(v155 + 4) = v153;
            *(_DWORD *)(v155 + 8) = v106;
            *(_DWORD *)(v155 + 12) = v154;
            *(_QWORD *)(v155 + 24) = 0;
            *(_QWORD *)(v155 + 32) = 0;
            *(_QWORD *)(v155 + 16) = 0;
          }
          v104 = *(_DWORD *)(v14 + 144);
          if (v104 >= 1)
            *(_WORD *)(*(_QWORD *)(v14 + 136) + 40 * (v104 - 1) + 2) = 16;
          ++v105;
        }
        while (v105 != v112);
      }
      v9 = 1;
      v16 = v214;
      v13 = v212;
      v50 = v215;
      if (*(_DWORD *)(v14 + 148) <= v104)
      {
        sub_1ACBFF5AC(v14, 9, 0, v17, 0, v70, v71, v72);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v104 + 1;
        v162 = *(_QWORD *)(v14 + 136) + 40 * v104;
        *(_QWORD *)v162 = 9;
        *(_DWORD *)(v162 + 8) = v17;
        *(_QWORD *)(v162 + 12) = 0;
        *(_QWORD *)(v162 + 28) = 0;
        *(_QWORD *)(v162 + 20) = 0;
        *(_DWORD *)(v162 + 36) = 0;
      }
    }
    v163 = *(_QWORD *)(a4 + 32);
    if (!v163)
      v163 = sub_1ACC27860(*v13, a4);
    sub_1ACBA86CC((uint64_t *)v14, 96, v52, v21, 0, v163, v21, v72);
    v164 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v164)
    {
      sub_1ACBFF7F0(v14, 29, v50, v17, v52, v21, a7, a8);
      if ((_DWORD)v21 != 1)
        goto LABEL_134;
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v164 + 1;
      v165 = *(_QWORD *)(v14 + 136) + 40 * v164;
      *(_DWORD *)v165 = 64797;
      *(_DWORD *)(v165 + 4) = v50;
      *(_DWORD *)(v165 + 8) = v17;
      *(_DWORD *)(v165 + 12) = v52;
      *(_DWORD *)(v165 + 16) = v21;
      *(_QWORD *)(v165 + 24) = 0;
      *(_QWORD *)(v165 + 32) = 0;
      if ((_DWORD)v21 != 1)
      {
LABEL_134:
        if (*((_DWORD *)v13 + 10) >= (int)v21)
          goto LABEL_177;
        *((_DWORD *)v13 + 10) = v21;
        v166 = (_DWORD *)v13 + 11;
        goto LABEL_140;
      }
    }
    if ((_DWORD)v52)
    {
      v167 = *((unsigned __int8 *)v13 + 31);
      if (v167 <= 7)
      {
        *((_BYTE *)v13 + 31) = v167 + 1;
        v166 = (_DWORD *)v13 + v167 + 56;
LABEL_140:
        *v166 = v52;
      }
    }
  }
  else
  {
    if (*((_BYTE *)v13 + 31))
    {
      v53 = *((_BYTE *)v13 + 31) - 1;
      *((_BYTE *)v13 + 31) = v53;
      v54 = *((unsigned int *)v13 + v53 + 56);
    }
    else
    {
      v54 = (*((_DWORD *)v13 + 14) + 1);
      *((_DWORD *)v13 + 14) = v54;
    }
    v59 = *v10;
    v60 = (__int16)*v10;
    if ((*v10 & 0x8000) == 0)
    {
      v61 = *(_QWORD *)v11;
      if ((*(_DWORD *)(*(_QWORD *)v11 + 48) & 0x20) != 0)
      {
        v62 = *(_QWORD *)(v61 + 8);
        if ((unsigned __int16)*v10)
        {
          if ((v59 << 16) >= 0x110000)
          {
            v168 = *v10 & 0xF;
            if ((*v10 & 0xF) == 0)
              v168 = 16;
            v63 = v60 - v168;
            v169 = v62 + 142;
            v170 = 0uLL;
            v171.i64[0] = 0x1000100010001;
            v171.i64[1] = 0x1000100010001;
            v172 = v63;
            v173 = 0uLL;
            do
            {
              v174 = vqtbl2q_s8(*(int8x16x2_t *)(v169 - 64), (int8x16_t)xmmword_1ACCBDDC0);
              v174.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v169 - 32), (int8x16_t)xmmword_1ACCBDDB0).i32[3];
              v175.i32[0] = vzip1q_s16(*(int16x8_t *)(v169 - 128), *(int16x8_t *)(v169 - 112)).u32[0];
              v175.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v169 - 96), (int8x16_t)xmmword_1ACCBDDD0).i32[1];
              v175.i64[1] = v174.i64[1];
              v176 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v169 + 96), (int8x16_t)xmmword_1ACCBDDB0);
              v223 = *(int8x16x2_t *)(v169 + 32);
              v177 = vqtbl2q_s8(*(int8x16x2_t *)(v169 + 64), (int8x16_t)xmmword_1ACCBDDC0);
              v179 = *(int16x8_t *)v169;
              v178 = *(int16x8_t *)(v169 + 16);
              v169 += 256;
              v177.i32[3] = v176.i32[3];
              v176.i32[0] = vzip1q_s16(v179, v178).u32[0];
              v176.i32[1] = vqtbl2q_s8(v223, (int8x16_t)xmmword_1ACCBDDD0).i32[1];
              v176.i64[1] = v177.i64[1];
              v170 = vaddq_s16((int16x8_t)vbicq_s8(v171, (int8x16_t)vshrq_n_u16(v175, 5uLL)), v170);
              v173 = vaddq_s16((int16x8_t)vbicq_s8(v171, (int8x16_t)vshrq_n_u16(v176, 5uLL)), v173);
              v172 -= 16;
            }
            while (v172);
            v64 = vaddvq_s16(vaddq_s16(v173, v170));
          }
          else
          {
            v63 = 0;
            v64 = 0;
          }
          v180 = v60 - v63;
          v181 = (unsigned __int16 *)(v62 + 16 * v63 + 14);
          do
          {
            v182 = *v181;
            v181 += 8;
            v64 += ((v182 >> 5) & 1) == 0;
            --v180;
          }
          while (v180);
        }
        else
        {
          v64 = 0;
        }
        if ((*(_WORD *)(v62 + 16 * v60 + 14) & 0x20) != 0)
          LOWORD(v60) = v59 - v64 + *(_WORD *)(v61 + 56);
        else
          LOWORD(v60) = v64;
      }
    }
    v183 = v217 + (__int16)v60 + 1;
    v184 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v184)
    {
      sub_1ACBFF5AC(v14, 81, v183, v54, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v184 + 1;
      v185 = *(_QWORD *)(v14 + 136) + 40 * v184;
      *(_DWORD *)v185 = 81;
      *(_DWORD *)(v185 + 4) = v183;
      *(_DWORD *)(v185 + 8) = v54;
      *(_QWORD *)(v185 + 12) = 0;
      *(_QWORD *)(v185 + 28) = 0;
      *(_QWORD *)(v185 + 20) = 0;
      *(_DWORD *)(v185 + 36) = 0;
    }
    v186 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v186)
    {
      v186 = sub_1ACBFF5AC(v14, 13, v54, 0, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v186 + 1;
      v187 = *(_QWORD *)(v14 + 136) + 40 * v186;
      *(_DWORD *)v187 = 13;
      *(_DWORD *)(v187 + 4) = v54;
      *(_OWORD *)(v187 + 8) = 0u;
      *(_OWORD *)(v187 + 24) = 0u;
    }
    if ((_DWORD)v9 == 1 && *(_QWORD *)v11 == a3)
    {
      v188 = *(_DWORD *)(v14 + 144);
      if (*(_DWORD *)(v14 + 148) <= v188)
      {
        sub_1ACBFF5AC(v14, 53, v217, v17, v54, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v14 + 144) = v188 + 1;
        v189 = *(_QWORD *)(v14 + 136) + 40 * v188;
        *(_DWORD *)v189 = 53;
        *(_DWORD *)(v189 + 4) = v217;
        *(_DWORD *)(v189 + 8) = v17;
        *(_DWORD *)(v189 + 12) = v54;
        *(_QWORD *)(v189 + 24) = 0;
        *(_QWORD *)(v189 + 32) = 0;
        *(_QWORD *)(v189 + 16) = 0;
      }
      v190 = *(_DWORD *)(v14 + 144);
      v56 = __OFSUB__(v190, 1);
      v191 = v190 - 1;
      if (v191 < 0 == v56)
        *(_WORD *)(*(_QWORD *)(v14 + 136) + 40 * v191 + 2) = 144;
    }
    sub_1ACB7A514(v13, v50, v211, a3, 112, a6, a7, a8);
    v192 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v192)
    {
      sub_1ACBFF5AC(v14, 31, v50, 0, v54, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v192 + 1;
      v193 = *(_QWORD *)(v14 + 136) + 40 * v192;
      *(_DWORD *)v193 = 31;
      *(_DWORD *)(v193 + 4) = v50;
      *(_DWORD *)(v193 + 8) = 0;
      *(_DWORD *)(v193 + 12) = v54;
      *(_QWORD *)(v193 + 24) = 0;
      *(_QWORD *)(v193 + 32) = 0;
      *(_QWORD *)(v193 + 16) = 0;
    }
    v194 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v194)
    {
      sub_1ACBFF5AC(v14, 9, 0, v17, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v194 + 1;
      v195 = *(_QWORD *)(v14 + 136) + 40 * v194;
      *(_QWORD *)v195 = 9;
      *(_DWORD *)(v195 + 8) = v17;
      *(_QWORD *)(v195 + 12) = 0;
      *(_QWORD *)(v195 + 28) = 0;
      *(_QWORD *)(v195 + 20) = 0;
      *(_DWORD *)(v195 + 36) = 0;
    }
    v196 = *(_DWORD *)(v14 + 144);
    if (*(_BYTE *)(*(_QWORD *)v14 + 103))
    {
      dword_1EECAD288 = *(_DWORD *)(v14 + 144);
      if (!(_DWORD)v54)
        goto LABEL_177;
    }
    else
    {
      v197 = *(_QWORD *)(v14 + 136);
      *(_DWORD *)(v197 + 40 * (v196 - 2) + 8) = v196;
      *(_DWORD *)(v197 + 40 * v186 + 8) = v196;
      if (!(_DWORD)v54)
        goto LABEL_177;
    }
    v198 = *((unsigned __int8 *)v13 + 31);
    if (v198 <= 7)
    {
      *((_BYTE *)v13 + 31) = v198 + 1;
      *((_DWORD *)v13 + v198 + 56) = v54;
    }
  }
LABEL_177:
  v199 = *(unsigned __int8 *)(v11 + 44);
  if (*(_BYTE *)(v11 + 44))
  {
LABEL_185:
    v201 = *(_DWORD *)(v14 + 144);
    if (*(_DWORD *)(v14 + 148) <= v201)
    {
      sub_1ACBFF5AC(v14, 158, v199, v9, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v14 + 144) = v201 + 1;
      v202 = *(_QWORD *)(v14 + 136) + 40 * v201;
      *(_DWORD *)v202 = 158;
      *(_DWORD *)(v202 + 4) = v199;
      *(_DWORD *)(v202 + 8) = v9;
      *(_QWORD *)(v202 + 12) = 0;
      *(_QWORD *)(v202 + 28) = 0;
      *(_QWORD *)(v202 + 20) = 0;
      *(_DWORD *)(v202 + 36) = 0;
    }
    goto LABEL_188;
  }
  if ((*(_BYTE *)(*v13 + 50) & 8) != 0 || v13[21] || *((_BYTE *)v13 + 32))
  {
    if ((int)v9 >= 1)
    {
      v200 = (uint64_t *)v13[21];
      if (!v200)
        v200 = v13;
      *((_BYTE *)v200 + 33) = 1;
    }
    goto LABEL_185;
  }
  v207 = v13[2];
  if (v207)
  {
    v208 = 0;
  }
  else
  {
    if ((*(_BYTE *)(*v13 + 96) & 8) == 0)
      *((_BYTE *)v13 + 35) = 1;
    v207 = sub_1ACBCB4C8(v13, a2, v199, a4, a5, a6, a7, a8);
    v208 = (uint64_t *)v13[21];
  }
  if (!v208)
    v208 = v13;
  *((_BYTE *)v208 + 33) = 1;
  sub_1ACBA86CC((uint64_t *)v207, 70, 787, 2, 0, 0, 0xFFFFFFFFLL, a8);
  v209 = *(_DWORD *)(v207 + 144);
  v56 = __OFSUB__(v209, 1);
  v210 = v209 - 1;
  if (v210 < 0 == v56)
    *(_WORD *)(*(_QWORD *)(v207 + 136) + 40 * v210 + 2) = 4;
LABEL_188:
  result = *(_QWORD *)(v14 + 24);
  v204 = -v16;
  if (*(_DWORD *)(result + 68) + *(_DWORD *)(result + 72) < 0)
    result = sub_1ACC0D5D4(result, v14, v204);
  else
    *(_DWORD *)(*(_QWORD *)(result + 80) + 4 * v204) = *(_DWORD *)(v14 + 144);
  v205 = *(_DWORD *)(v14 + 144);
  if (*(_DWORD *)(v14 + 148) <= v205)
    return sub_1ACBFF5AC(v14, 122, v50, 0, 0, a6, a7, a8);
  *(_DWORD *)(v14 + 144) = v205 + 1;
  v206 = *(_QWORD *)(v14 + 136) + 40 * v205;
  *(_DWORD *)v206 = 122;
  *(_DWORD *)(v206 + 4) = v50;
  *(_OWORD *)(v206 + 8) = 0u;
  *(_OWORD *)(v206 + 24) = 0u;
  return result;
}

uint64_t sub_1ACC30D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  const void *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  size_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t **v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  char *v61;
  int v62;
  int *v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;

  v8 = a8;
  v69 = a7;
  v9 = a5;
  v10 = a3;
  v70 = a4;
  v71 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
    if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(v71 + 96) & 8) == 0)
      *(_BYTE *)(a1 + 35) = 1;
    v13 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
    a4 = v70;
  }
  v75 = 0;
  v73 = 0u;
  v74 = 0u;
  v72 = 0u;
  if (v8 < 0)
  {
    a3 = *(unsigned __int8 *)(v9 + 44);
    v14 = *(_DWORD *)(v13 + 144);
    if (*(_DWORD *)(v13 + 148) <= v14)
    {
      v14 = sub_1ACBFF5AC(v13, 49, a3, 0, 0, a6, a7, a8);
      a4 = v70;
    }
    else
    {
      *(_DWORD *)(v13 + 144) = v14 + 1;
      v15 = *(_QWORD *)(v13 + 136) + 40 * v14;
      *(_DWORD *)v15 = 49;
      *(_DWORD *)(v15 + 4) = a3;
      *(_OWORD *)(v15 + 8) = 0uLL;
      *(_OWORD *)(v15 + 24) = 0uLL;
    }
  }
  else
  {
    v14 = 0;
  }
  v62 = v14;
  v63 = (int *)a2;
  v64 = v8;
  v65 = v13;
  v66 = v9;
  v68 = v10;
  if (*(int *)(v9 + 40) < 1)
  {
    v17 = 0;
  }
  else
  {
    v16 = 0;
    v17 = 0;
    v18 = (unsigned int *)(v9 + 64);
    v19 = (unsigned int *)a6;
    do
    {
      if (a4)
        v21 = *(_WORD *)(*(_QWORD *)(a4 + 8) + 2 * v16);
      else
        v21 = -1;
      v22 = sub_1ACC31284((uint64_t *)a1, v10, v69, v21);
      if (a6)
        v23 = v19;
      else
        v23 = v18;
      v24 = *(_QWORD *)(*(_QWORD *)v9 + 8);
      v25 = (uint64_t)((unint64_t)*v23 << 48) >> 44;
      v26 = *(const void **)(v24 + v25);
      if (v26)
        v27 = strlen(*(const char **)(v24 + v25)) & 0x3FFFFFFF;
      else
        v27 = 0;
      v28 = sub_1ACBE1124(v71, v27 + 81);
      v29 = v28;
      if (v28)
      {
        *(_OWORD *)(v28 + 48) = 0u;
        *(_OWORD *)(v28 + 64) = 0u;
        *(_OWORD *)(v28 + 16) = 0u;
        *(_OWORD *)(v28 + 32) = 0u;
        *(_OWORD *)v28 = 0u;
        *(_BYTE *)v28 = 59;
        *(_WORD *)(v28 + 52) = -1;
        v30 = v28 + 80;
        *(_QWORD *)(v28 + 8) = v28 + 80;
        if (v27)
          memcpy((void *)(v28 + 80), v26, v27);
        *(_BYTE *)(v30 + v27) = 0;
        *(_DWORD *)(v29 + 40) = 1;
        v9 = v66;
      }
      v20 = sub_1ACC0241C((uint64_t *)a1, 53, v22, v29);
      v17 = (unsigned __int8 *)sub_1ACC04474((uint64_t *)a1, (uint64_t)v17, v20);
      ++v16;
      ++v19;
      v10 = v68;
      a4 = v70;
    }
    while (v16 < *(int *)(v9 + 40));
  }
  v31 = v64;
  if (v64 < 1)
  {
    v32 = v65;
    v33 = v63;
  }
  else
  {
    v32 = v65;
    v33 = v63;
    if (*(_QWORD *)v9 == v10)
    {
      if ((*(_BYTE *)(v10 + 48) & 0x80) != 0)
      {
        if (*(_WORD *)(a4 + 94))
        {
          v39 = 0;
          v40 = 0;
          do
          {
            v42 = *(__int16 *)(*(_QWORD *)(a4 + 8) + 2 * v39);
            v43 = sub_1ACC31284((uint64_t *)a1, v10, v69, v42);
            v44 = *(const char **)(*(_QWORD *)(v10 + 8) + 16 * v42);
            if (v44)
              v45 = strlen(v44) & 0x3FFFFFFF;
            else
              v45 = 0;
            v46 = sub_1ACBE1124(v71, v45 + 81);
            v47 = v46;
            if (v46)
            {
              *(_OWORD *)(v46 + 48) = 0u;
              *(_OWORD *)(v46 + 64) = 0u;
              *(_OWORD *)(v46 + 16) = 0u;
              *(_OWORD *)(v46 + 32) = 0u;
              *(_OWORD *)v46 = 0u;
              *(_BYTE *)v46 = 59;
              *(_WORD *)(v46 + 52) = -1;
              v48 = v46 + 80;
              *(_QWORD *)(v46 + 8) = v46 + 80;
              if (v45)
                memcpy((void *)(v46 + 80), v44, v45);
              *(_BYTE *)(v48 + v45) = 0;
              *(_DWORD *)(v47 + 40) = 1;
              v9 = v66;
            }
            v41 = sub_1ACC0241C((uint64_t *)a1, 45, v43, v47);
            v40 = sub_1ACC04474((uint64_t *)a1, v40, v41);
            ++v39;
            a4 = v70;
            v10 = v68;
          }
          while (v39 < *(unsigned __int16 *)(v70 + 94));
        }
        else
        {
          v40 = 0;
        }
        v38 = sub_1ACC0241C((uint64_t *)a1, 19, v40, 0);
        v32 = v65;
        v31 = v64;
        v33 = v63;
      }
      else
      {
        v34 = sub_1ACBE1124(*(_QWORD *)a1, 0x51uLL);
        v35 = v34;
        if (v34)
        {
          *(_OWORD *)(v34 + 32) = 0u;
          *(_OWORD *)(v34 + 48) = 0u;
          *(_OWORD *)(v34 + 64) = 0u;
          *(_OWORD *)v34 = 0u;
          *(_OWORD *)(v34 + 16) = 0u;
          *(_WORD *)v34 = 17584;
          *(_WORD *)(v34 + 52) = -1;
          *(_BYTE *)(v34 + 80) = 0;
          *(_QWORD *)(v34 + 8) = v34 + 80;
          *(_DWORD *)(v34 + 40) = 1;
          *(_DWORD *)(v34 + 44) = v69;
        }
        v36 = v63[18];
        v37 = sub_1ACBE1124(v71, 0x51uLL);
        if (v37)
        {
          *(_OWORD *)(v37 + 32) = 0u;
          *(_OWORD *)(v37 + 48) = 0u;
          *(_OWORD *)(v37 + 64) = 0u;
          *(_OWORD *)v37 = 0u;
          *(_OWORD *)(v37 + 16) = 0u;
          *(_BYTE *)v37 = -89;
          *(_WORD *)(v37 + 52) = -1;
          *(_BYTE *)(v37 + 80) = 0;
          *(_QWORD *)(v37 + 8) = v37 + 80;
          *(_QWORD *)(v37 + 72) = v10;
          *(_DWORD *)(v37 + 40) = 1;
          *(_DWORD *)(v37 + 44) = v36;
          *(_DWORD *)(v37 + 48) = -1;
        }
        v38 = sub_1ACC0241C((uint64_t *)a1, 52, v35, v37);
      }
      v17 = (unsigned __int8 *)sub_1ACC04474((uint64_t *)a1, (uint64_t)v17, v38);
    }
  }
  v75 = 0;
  v73 = 0u;
  v74 = 0u;
  *(_QWORD *)&v72 = a1;
  *((_QWORD *)&v72 + 1) = v33;
  result = sub_1ACC0F790((uint64_t)&v72, (uint64_t)v17, a3, a4, a5, a6, a7, a8);
  if (!*(_DWORD *)(a1 + 48))
  {
    result = sub_1ACB78E3C(a1, v33, (uint64_t)v17, 0, 0, 0, 0, 0);
    v56 = (uint64_t **)result;
    v57 = *(unsigned __int8 *)(v9 + 44);
    v58 = *(_DWORD *)(v32 + 144);
    if (*(_DWORD *)(v32 + 148) <= v58)
    {
      result = sub_1ACBFF5AC(v32, 158, v57, v31, 0, v53, v54, v55);
      if (!v56)
        goto LABEL_56;
    }
    else
    {
      *(_DWORD *)(v32 + 144) = v58 + 1;
      v59 = *(_QWORD *)(v32 + 136) + 40 * v58;
      *(_DWORD *)v59 = 158;
      *(_DWORD *)(v59 + 4) = v57;
      *(_DWORD *)(v59 + 8) = v31;
      *(_QWORD *)(v59 + 12) = 0;
      *(_QWORD *)(v59 + 28) = 0;
      *(_QWORD *)(v59 + 20) = 0;
      *(_DWORD *)(v59 + 36) = 0;
      if (!result)
        goto LABEL_56;
    }
    result = (uint64_t)sub_1ACB7D270(v56, v50, v57, v51, v52, v53, v54, v55);
  }
LABEL_56:
  if (v17)
    result = (uint64_t)sub_1ACBF8348((_QWORD *)v71, v17);
  if (v62)
  {
    v60 = *(_DWORD *)(v32 + 144);
    if (v60 - 1 == v62)
    {
      *(_DWORD *)(v32 + 144) = v62;
    }
    else
    {
      if (*(_BYTE *)(*(_QWORD *)v32 + 103))
        v61 = &byte_1EECAD280;
      else
        v61 = (char *)(*(_QWORD *)(v32 + 136) + 40 * v62);
      *((_DWORD *)v61 + 2) = v60;
    }
  }
  return result;
}

uint64_t sub_1ACC31284(uint64_t *a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int16x8_t v11;
  uint64_t v13;
  __int16 v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int8x16_t v19;
  uint64_t v20;
  int16x8_t v21;
  int8x16_t v22;
  uint16x8_t v23;
  uint16x8_t v24;
  int8x16_t v25;
  int16x8_t v26;
  int16x8_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  unsigned int v30;
  const char *v31;
  uint64_t v32;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16x2_t v39;

  v8 = *a1;
  v9 = sub_1ACBE1124(*a1, 0x51uLL);
  v10 = v9;
  if (v9)
  {
    v11 = 0uLL;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 64) = 0u;
    *(_OWORD *)v9 = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_BYTE *)v9 = -80;
    *(_WORD *)(v9 + 52) = -1;
    *(_BYTE *)(v9 + 80) = 0;
    *(_QWORD *)(v9 + 8) = v9 + 80;
    *(_DWORD *)(v9 + 40) = 1;
    if ((a4 & 0x80000000) != 0 || *(unsigned __int16 *)(a2 + 52) == (unsigned __int16)a4)
    {
      *(_DWORD *)(v9 + 44) = a3;
      *(_BYTE *)(v9 + 1) = 68;
    }
    else
    {
      v13 = *(_QWORD *)(a2 + 8);
      if ((*(_BYTE *)(a2 + 48) & 0x20) != 0)
      {
        if (a4)
        {
          if (a4 >= 0x11)
          {
            v17 = a4 & 0xF;
            if ((a4 & 0xF) == 0)
              v17 = 16;
            v16 = (unsigned __int16)a4 - v17;
            v18 = v13 + 142;
            v19.i64[0] = 0x1000100010001;
            v19.i64[1] = 0x1000100010001;
            v20 = v16;
            v21 = 0uLL;
            do
            {
              v22 = vqtbl2q_s8(*(int8x16x2_t *)(v18 - 64), (int8x16_t)xmmword_1ACCBDDC0);
              v22.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v18 - 32), (int8x16_t)xmmword_1ACCBDDB0).i32[3];
              v23.i32[0] = vzip1q_s16(*(int16x8_t *)(v18 - 128), *(int16x8_t *)(v18 - 112)).u32[0];
              v23.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v18 - 96), (int8x16_t)xmmword_1ACCBDDD0).i32[1];
              v23.i64[1] = v22.i64[1];
              v24 = (uint16x8_t)vqtbl2q_s8(*(int8x16x2_t *)(v18 + 96), (int8x16_t)xmmword_1ACCBDDB0);
              v39 = *(int8x16x2_t *)(v18 + 32);
              v25 = vqtbl2q_s8(*(int8x16x2_t *)(v18 + 64), (int8x16_t)xmmword_1ACCBDDC0);
              v27 = *(int16x8_t *)v18;
              v26 = *(int16x8_t *)(v18 + 16);
              v18 += 256;
              v25.i32[3] = v24.i32[3];
              v24.i32[0] = vzip1q_s16(v27, v26).u32[0];
              v24.i32[1] = vqtbl2q_s8(v39, (int8x16_t)xmmword_1ACCBDDD0).i32[1];
              v24.i64[1] = v25.i64[1];
              v11 = vaddq_s16((int16x8_t)vbicq_s8(v19, (int8x16_t)vshrq_n_u16(v23, 5uLL)), v11);
              v21 = vaddq_s16((int16x8_t)vbicq_s8(v19, (int8x16_t)vshrq_n_u16(v24, 5uLL)), v21);
              v20 -= 16;
            }
            while (v20);
            v15 = vaddvq_s16(vaddq_s16(v21, v11));
          }
          else
          {
            v16 = 0;
            v15 = 0;
          }
          v28 = (unsigned __int16)a4 - v16;
          v29 = (unsigned __int16 *)(v13 + 16 * v16 + 14);
          do
          {
            v30 = *v29;
            v29 += 8;
            v15 += ((v30 >> 5) & 1) == 0;
            --v28;
          }
          while (v28);
        }
        else
        {
          v15 = 0;
        }
        v14 = *(_WORD *)(v13 + 16 * (unsigned __int16)a4 + 14);
        if ((v14 & 0x20) != 0)
          v15 = a4 - v15 + *(_WORD *)(a2 + 56);
      }
      else
      {
        v14 = *(_WORD *)(v13 + 16 * (unsigned __int16)a4 + 14);
        v15 = a4;
      }
      *(_DWORD *)(v9 + 44) = a3 + v15 + 1;
      *(_BYTE *)(v9 + 1) = *(_BYTE *)(v13 + 16 * (unsigned __int16)a4 + 9);
      if ((v14 & 0x200) != 0)
      {
        v32 = *(_QWORD *)(v13 + 16 * (unsigned __int16)a4) - 1;
        while (*(unsigned __int8 *)++v32)
          ;
        if ((v14 & 4) != 0)
        {
          while (*(unsigned __int8 *)++v32)
            ;
        }
        v31 = (const char *)(v32 + 1);
      }
      else
      {
        v31 = **(const char ***)(v8 + 16);
        if (!v31)
          return v10;
      }
      v35 = strlen(v31) & 0x3FFFFFFF;
      if (v35)
      {
        v36 = sub_1ACBE1124(*a1, v35 + 81);
        if (v36)
        {
          v37 = v36;
          *(_OWORD *)(v36 + 48) = 0u;
          *(_OWORD *)(v36 + 64) = 0u;
          *(_OWORD *)(v36 + 16) = 0u;
          *(_OWORD *)(v36 + 32) = 0u;
          *(_OWORD *)v36 = 0u;
          *(_BYTE *)v36 = 113;
          *(_WORD *)(v36 + 52) = -1;
          v38 = v36 + 80;
          *(_QWORD *)(v36 + 8) = v36 + 80;
          memcpy((void *)(v36 + 80), v31, v35);
          *(_BYTE *)(v38 + v35) = 0;
          *(_DWORD *)(v37 + 40) = 1;
          *(_QWORD *)(v37 + 16) = v10;
          *(_DWORD *)(v37 + 4) |= 0x2200u;
          return v37;
        }
      }
    }
  }
  return v10;
}

_QWORD *sub_1ACC31534(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  int *v9;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  BOOL v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int *v24;
  BOOL v25;
  int v27;
  _BYTE *v28;
  int *v29;
  __int16 *v30;
  uint64_t v31;
  const char *v32;
  size_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  size_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  size_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  int *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int *v75;
  const char *v76;
  uint64_t v77;
  _BYTE *v78;
  int v79;
  _DWORD *v80;
  unsigned __int8 *v81;
  const char *v82;
  unsigned __int8 *v83;
  size_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  _OWORD *v89;
  uint64_t v90;
  unsigned __int8 *v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  const void *v99;
  uint64_t v100;
  unint64_t v101;
  void *v102;
  void *v103;
  _QWORD *v104;
  _QWORD *v105;
  char *v106;
  uint64_t v107;
  unsigned int *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  int v111;
  __int16 v112;
  char v114;
  uint64_t v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  int v120;
  __int16 *v121;
  int *v122;
  uint64_t v123;
  int *v124;
  uint64_t v125;
  const char *v126;
  const char *__src;
  int *v128;
  int *v129;
  unsigned __int8 *v130;
  size_t v131;
  uint64_t v132;
  uint64_t *v133;
  _QWORD *v134;
  uint64_t v135;

  v8 = a4;
  v9 = (int *)a3;
  v11 = (_QWORD *)*a1;
  if (a4)
    v12 = a3 + 1;
  else
    v12 = a3;
  v13 = *(unsigned __int8 *)(v12 + 45);
  if (v13 == 7 && (*((_BYTE *)v11 + 50) & 8) != 0)
    return 0;
  v14 = a3 + 8 * (a4 != 0);
  v17 = *(_QWORD **)(v14 + 48);
  v15 = (_QWORD *)(v14 + 48);
  v16 = v17;
  if (*(_BYTE *)(v12 + 45))
    v18 = v16 == 0;
  else
    v18 = 0;
  if (!v18)
    return v16;
  v134 = 0;
  v135 = 0;
  if (sub_1ACC2F2B4((_QWORD **)a1, a2, a3, &v135, (uint64_t *)&v134, a6, a7, a8))
    return 0;
  v133 = a1;
  v119 = v13;
  v117 = v15;
  v125 = a2;
  v132 = (uint64_t)v11;
  if (v9[10] >= 1)
  {
    v20 = a2;
    v21 = 0;
    v22 = 0;
    v23 = 0;
    v123 = 0;
    v124 = v9;
    v24 = 0;
    v130 = 0;
    v121 = (__int16 *)(a2 + 52);
    v122 = v9 + 16;
    if (v8)
      v25 = 0;
    else
      v25 = v119 == 10;
    v27 = !v25 && v119 != 7;
    v120 = v27;
    v118 = v8;
    while (1)
    {
      v29 = v122;
      if (v134)
        v29 = (int *)((char *)v134 + v22);
      v30 = v121;
      if (v135)
        v30 = (__int16 *)(*(_QWORD *)(v135 + 8) + v21);
      v31 = *v29;
      v32 = *(const char **)(*(_QWORD *)(v20 + 8) + 16 * *v30);
      __src = v32;
      if (v32)
        v33 = strlen(v32) & 0x3FFFFFFF;
      else
        v33 = 0;
      v34 = *(const char **)(*(_QWORD *)(*(_QWORD *)v9 + 8) + 16 * v31);
      v128 = v24;
      v126 = v34;
      if (v34)
        v131 = strlen(v34) & 0x3FFFFFFF;
      else
        v131 = 0;
      v35 = sub_1ACBE1124((uint64_t)v11, 0x54uLL);
      v36 = v35;
      if (v35)
      {
        *(_OWORD *)(v35 + 32) = 0u;
        *(_OWORD *)(v35 + 48) = 0u;
        *(_OWORD *)(v35 + 64) = 0u;
        *(_OWORD *)v35 = 0u;
        *(_OWORD *)(v35 + 16) = 0u;
        *(_BYTE *)v35 = 59;
        *(_WORD *)(v35 + 52) = -1;
        *(_DWORD *)(v35 + 80) = 6581359;
        *(_QWORD *)(v35 + 8) = v35 + 80;
        *(_DWORD *)(v35 + 40) = 1;
      }
      v37 = sub_1ACBE1124((uint64_t)v11, v33 + 81);
      v38 = v37;
      if (v37)
      {
        *(_OWORD *)(v37 + 48) = 0u;
        *(_OWORD *)(v37 + 64) = 0u;
        *(_OWORD *)(v37 + 16) = 0u;
        *(_OWORD *)(v37 + 32) = 0u;
        *(_OWORD *)v37 = 0u;
        *(_BYTE *)v37 = 59;
        *(_WORD *)(v37 + 52) = -1;
        v39 = v37 + 80;
        *(_QWORD *)(v37 + 8) = v37 + 80;
        if (v33)
        {
          memcpy((void *)(v37 + 80), __src, v33);
          v40 = v33;
        }
        else
        {
          v40 = 0;
        }
        *(_BYTE *)(v39 + v40) = 0;
        *(_DWORD *)(v38 + 40) = 1;
        v11 = (_QWORD *)v132;
      }
      v41 = v8;
      v42 = sub_1ACC0241C(v133, 141, v36, v38);
      v43 = sub_1ACBE1124((uint64_t)v11, v131 + 81);
      v44 = v43;
      if (v43)
      {
        *(_OWORD *)(v43 + 48) = 0u;
        *(_OWORD *)(v43 + 64) = 0u;
        *(_OWORD *)(v43 + 16) = 0u;
        *(_OWORD *)(v43 + 32) = 0u;
        *(_OWORD *)v43 = 0u;
        *(_BYTE *)v43 = 59;
        *(_WORD *)(v43 + 52) = -1;
        v45 = v43 + 80;
        *(_QWORD *)(v43 + 8) = v43 + 80;
        if (v131)
          memcpy((void *)(v43 + 80), v126, v131);
        *(_BYTE *)(v45 + v131) = 0;
        *(_DWORD *)(v44 + 40) = 1;
        v11 = (_QWORD *)v132;
      }
      v46 = sub_1ACC0241C(v133, 53, v42, v44);
      v130 = (unsigned __int8 *)sub_1ACC04474(v133, (uint64_t)v130, v46);
      if (v8)
      {
        v47 = sub_1ACBE1124((uint64_t)v11, 0x54uLL);
        v48 = v47;
        if (v47)
        {
          *(_OWORD *)(v47 + 32) = 0u;
          *(_OWORD *)(v47 + 48) = 0u;
          *(_OWORD *)(v47 + 64) = 0u;
          *(_OWORD *)v47 = 0u;
          *(_OWORD *)(v47 + 16) = 0u;
          *(_BYTE *)v47 = 59;
          *(_WORD *)(v47 + 52) = -1;
          *(_DWORD *)(v47 + 80) = 6581359;
          *(_QWORD *)(v47 + 8) = v47 + 80;
          *(_DWORD *)(v47 + 40) = 1;
        }
        v49 = sub_1ACBE1124((uint64_t)v11, v33 + 81);
        v50 = v49;
        if (v49)
        {
          *(_OWORD *)(v49 + 48) = 0u;
          *(_OWORD *)(v49 + 64) = 0u;
          *(_OWORD *)(v49 + 16) = 0u;
          *(_OWORD *)(v49 + 32) = 0u;
          *(_OWORD *)v49 = 0u;
          *(_BYTE *)v49 = 59;
          *(_WORD *)(v49 + 52) = -1;
          v51 = v49 + 80;
          *(_QWORD *)(v49 + 8) = v49 + 80;
          if (v33)
          {
            memcpy((void *)(v49 + 80), __src, v33);
            v52 = v33;
          }
          else
          {
            v52 = 0;
          }
          *(_BYTE *)(v51 + v52) = 0;
          *(_DWORD *)(v50 + 40) = 1;
          v11 = (_QWORD *)v132;
        }
        v53 = sub_1ACC0241C(v133, 141, v48, v50);
        v54 = sub_1ACBE1124((uint64_t)v11, 0x54uLL);
        v55 = v54;
        if (v54)
        {
          *(_OWORD *)(v54 + 32) = 0u;
          *(_OWORD *)(v54 + 48) = 0u;
          *(_OWORD *)(v54 + 64) = 0u;
          *(_OWORD *)v54 = 0u;
          *(_OWORD *)(v54 + 16) = 0u;
          *(_BYTE *)v54 = 59;
          *(_WORD *)(v54 + 52) = -1;
          *(_DWORD *)(v54 + 80) = 7824750;
          *(_QWORD *)(v54 + 8) = v54 + 80;
          *(_DWORD *)(v54 + 40) = 1;
        }
        v56 = sub_1ACBE1124((uint64_t)v11, v33 + 81);
        v57 = v56;
        if (v56)
        {
          *(_OWORD *)(v56 + 48) = 0u;
          *(_OWORD *)(v56 + 64) = 0u;
          *(_OWORD *)(v56 + 16) = 0u;
          *(_OWORD *)(v56 + 32) = 0u;
          *(_OWORD *)v56 = 0u;
          *(_BYTE *)v56 = 59;
          *(_WORD *)(v56 + 52) = -1;
          v58 = v56 + 80;
          *(_QWORD *)(v56 + 8) = v56 + 80;
          if (v33)
          {
            memcpy((void *)(v56 + 80), __src, v33);
            v59 = v33;
          }
          else
          {
            v59 = 0;
          }
          *(_BYTE *)(v58 + v59) = 0;
          *(_DWORD *)(v57 + 40) = 1;
          v8 = v41;
        }
        v60 = sub_1ACC0241C(v133, 141, v55, v57);
        v61 = sub_1ACC0241C(v133, 45, v53, v60);
        v123 = sub_1ACC04474(v133, v123, v61);
        v9 = v124;
        v20 = v125;
        v11 = (_QWORD *)v132;
        v24 = v128;
        if (!v120)
          goto LABEL_25;
      }
      else
      {
        v24 = v128;
        v9 = v124;
        v20 = v125;
        if (!v120)
          goto LABEL_25;
      }
      if (v119 == 9)
      {
        v71 = *(_QWORD *)v9;
        v72 = *(_QWORD *)(*(_QWORD *)v9 + 8) + 16 * v31;
        if ((*(_WORD *)(v72 + 14) & 0x60) == 0)
        {
          v79 = *(unsigned __int16 *)(v72 + 12);
          if (v79)
          {
            if (!*(_BYTE *)(v71 + 63))
            {
              v80 = *(_DWORD **)(v71 + 80);
              if (v80)
              {
                if (*v80 >= v79)
                {
                  v81 = *(unsigned __int8 **)&v80[6 * (v79 - 1) + 2];
                  if (v81)
                  {
                    v69 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)v11, v81, 0, 0);
                    if (v24)
                      goto LABEL_80;
                    goto LABEL_74;
                  }
                }
              }
            }
          }
        }
        v62 = (uint64_t)v11;
      }
      else
      {
        v62 = (uint64_t)v11;
        if (v119 == 10)
        {
          v63 = sub_1ACBE1124((uint64_t)v11, 0x54uLL);
          v64 = v63;
          if (v63)
          {
            *(_OWORD *)(v63 + 32) = 0u;
            *(_OWORD *)(v63 + 48) = 0u;
            *(_OWORD *)(v63 + 64) = 0u;
            *(_OWORD *)v63 = 0u;
            *(_OWORD *)(v63 + 16) = 0u;
            *(_BYTE *)v63 = 59;
            *(_WORD *)(v63 + 52) = -1;
            *(_DWORD *)(v63 + 80) = 7824750;
            *(_QWORD *)(v63 + 8) = v63 + 80;
            *(_DWORD *)(v63 + 40) = 1;
          }
          v65 = sub_1ACBE1124((uint64_t)v11, v33 + 81);
          v66 = v65;
          if (v65)
          {
            v67 = v24;
            *(_OWORD *)(v65 + 48) = 0u;
            *(_OWORD *)(v65 + 64) = 0u;
            *(_OWORD *)(v65 + 16) = 0u;
            *(_OWORD *)(v65 + 32) = 0u;
            *(_OWORD *)v65 = 0u;
            *(_BYTE *)v65 = 59;
            *(_WORD *)(v65 + 52) = -1;
            v68 = v65 + 80;
            *(_QWORD *)(v65 + 8) = v65 + 80;
            if (v33)
              memcpy((void *)(v65 + 80), __src, v33);
            *(_BYTE *)(v68 + v33) = 0;
            *(_DWORD *)(v66 + 40) = 1;
            v24 = v67;
            v8 = v118;
          }
          v69 = (unsigned __int8 *)sub_1ACC0241C(v133, 141, v64, v66);
          if (v24)
            goto LABEL_80;
          goto LABEL_74;
        }
      }
      v73 = sub_1ACBE1124(v62, 0x50uLL);
      v69 = (unsigned __int8 *)v73;
      if (v73)
      {
        *(_OWORD *)(v73 + 32) = 0u;
        *(_OWORD *)(v73 + 48) = 0u;
        *(_OWORD *)(v73 + 64) = 0u;
        *(_OWORD *)v73 = 0u;
        *(_OWORD *)(v73 + 16) = 0u;
        *(_BYTE *)v73 = 121;
        *(_WORD *)(v73 + 52) = -1;
        *(_DWORD *)(v73 + 40) = 1;
      }
      if (v24)
      {
LABEL_80:
        v74 = *v24;
        if (v24[1] > *v24)
        {
          *v24 = v74 + 1;
          v75 = &v24[6 * v74];
          *((_QWORD *)v75 + 2) = 0;
          *((_QWORD *)v75 + 3) = 0;
          *((_QWORD *)v75 + 1) = v69;
          v76 = v126;
LABEL_84:
          v77 = *v24;
          if (v76)
          {
            v78 = (_BYTE *)sub_1ACBE1124(*v133, v131 + 1);
            v28 = v78;
            if (v78)
            {
              memcpy(v78, v76, v131);
              v28[v131] = 0;
            }
          }
          else
          {
            v28 = 0;
          }
          *(_QWORD *)&v24[6 * v77 - 2] = v28;
          v9 = v124;
          v20 = v125;
          goto LABEL_25;
        }
        v70 = sub_1ACC2D4F4(*v133, v24, v69);
        goto LABEL_83;
      }
LABEL_74:
      v70 = (int *)sub_1ACC2D490((_QWORD *)*v133, v69);
LABEL_83:
      v24 = v70;
      v20 = v125;
      v76 = v126;
      if (v70)
        goto LABEL_84;
LABEL_25:
      ++v23;
      v22 += 4;
      v21 += 2;
      if (v23 >= v9[10])
        goto LABEL_95;
    }
  }
  v130 = 0;
  v24 = 0;
  v123 = 0;
LABEL_95:
  if (v134)
    sub_1ACBE0F9C(v11, v134);
  v82 = **(const char ***)v9;
  v83 = (unsigned __int8 *)v123;
  if (!v82)
  {
    v84 = 0;
    if (v119 == 7)
      goto LABEL_99;
LABEL_104:
    v89 = 0;
    goto LABEL_123;
  }
  v84 = strlen(**(const char ***)v9) & 0x3FFFFFFF;
  if (v119 != 7)
    goto LABEL_104;
LABEL_99:
  v85 = *(_QWORD *)(v125 + 96);
  if (v85)
  {
    v86 = (uint64_t *)(v11[4] + 24);
    v87 = -1;
    do
    {
      v88 = *v86;
      v86 += 4;
      ++v87;
    }
    while (v88 != v85);
  }
  else
  {
    v87 = -32768;
  }
  v90 = sub_1ACBE1124((uint64_t)v11, 0x6EuLL);
  v91 = (unsigned __int8 *)v90;
  if (v90)
  {
    *(_OWORD *)(v90 + 32) = 0u;
    *(_OWORD *)(v90 + 48) = 0u;
    *(_OWORD *)v90 = 0u;
    *(_OWORD *)(v90 + 16) = 0u;
    *(_WORD *)v90 = 583;
    *(_WORD *)(v90 + 52) = -1;
    *(_QWORD *)(v90 + 8) = v90 + 80;
    *(_OWORD *)(v90 + 64) = 0u;
    strcpy((char *)(v90 + 80), "FOREIGN KEY constraint failed");
    *(_DWORD *)(v90 + 40) = 1;
  }
  v92 = sub_1ACBE1124(*v133, 0x70uLL);
  v93 = v92;
  if (v92)
  {
    *(_QWORD *)v92 = 0x100000001;
    *(_OWORD *)(v92 + 72) = 0u;
    *(_OWORD *)(v92 + 8) = 0u;
    *(_OWORD *)(v92 + 24) = 0u;
    *(_OWORD *)(v92 + 40) = 0u;
    *(_OWORD *)(v92 + 56) = 0u;
    *(_OWORD *)(v92 + 88) = 0u;
    *(_QWORD *)(v92 + 104) = 0;
    *(_DWORD *)(v92 + 72) = -1;
    *(_QWORD *)(v92 + 16) = 0;
    *(_QWORD *)(v92 + 24) = 0;
    v129 = v24;
    if (v82)
    {
      v94 = strlen(v82) + 1;
      if (v132)
        v95 = (void *)sub_1ACBE1124(v132, v94);
      else
        v95 = (void *)sub_1ACB5D828(v94);
      v96 = v95;
      if (v95)
        memcpy(v95, v82, v94);
    }
    else
    {
      v96 = 0;
    }
    *(_QWORD *)(v93 + 24) = v96;
    v97 = *(_QWORD *)(v132 + 32);
    v98 = 32 * v87;
    v99 = *(const void **)(v97 + v98);
    if (v99)
    {
      v100 = v8;
      v101 = strlen(*(const char **)(v97 + v98)) + 1;
      v102 = (void *)sub_1ACBE1124(v132, v101);
      v103 = v102;
      if (v102)
        memcpy(v102, v99, v101);
      v8 = v100;
    }
    else
    {
      v103 = 0;
    }
    *(_QWORD *)(v93 + 16) = v103;
    v24 = v129;
    v83 = (unsigned __int8 *)v123;
  }
  v104 = sub_1ACC2D490((_QWORD *)*v133, v91);
  v89 = sub_1ACB6E848((_QWORD **)v133, v104, (_OWORD *)v93, (uint64_t)v130, 0, 0, 0, 0, 0);
  v130 = 0;
LABEL_123:
  ++*(_DWORD *)(v132 + 432);
  *(_WORD *)(v132 + 436) = 0;
  v105 = (_QWORD *)sub_1ACBE1124(v132, v84 + 169);
  v16 = v105;
  if (v105)
  {
    bzero(v105, v84 + 169);
    v106 = (char *)(v16 + 9);
    v16[7] = v16 + 9;
    v16[12] = v16 + 21;
    memcpy(v16 + 21, v82, v84);
    if (v130)
    {
      v107 = v132;
      v108 = sub_1ACB8B290(v132, v130, 1, 0);
      v109 = v125;
    }
    else
    {
      v108 = 0;
      v109 = v125;
      v107 = v132;
    }
    v16[14] = v108;
    v16[15] = sub_1ACB8B6B8(v107, v24, 1u);
    v16[11] = sub_1ACB8DFB8(v107, (uint64_t)v89, 1);
    if (v83)
    {
      v110 = (unsigned __int8 *)sub_1ACC0241C(v133, 19, (uint64_t)v83, 0);
      v83 = v110;
      if (v110)
        v110 = (unsigned __int8 *)sub_1ACB8B290(v132, v110, 1, 0);
      v16[3] = v110;
    }
  }
  else
  {
    v106 = 0;
    v109 = v125;
  }
  v111 = *(_DWORD *)(v132 + 432) - 1;
  *(_DWORD *)(v132 + 432) = v111;
  if (v111)
    v112 = 0;
  else
    v112 = *(_WORD *)(v132 + 438);
  *(_WORD *)(v132 + 436) = v112;
  if (v130)
    sub_1ACBF8348((_QWORD *)v132, v130);
  if (v83)
    sub_1ACBF8348((_QWORD *)v132, v83);
  if (v24)
    sub_1ACC010B0((_QWORD *)v132, v24);
  if (v89)
    sub_1ACB7E704((_QWORD *)v132, (uint64_t)v89, 1);
  if (*(_BYTE *)(v132 + 103) == 1)
  {
    sub_1ACBB0E20((_QWORD *)v132, v16);
    return 0;
  }
  if (v119 == 7)
  {
    v114 = -118;
  }
  else if (v119 == 10 && !v8)
  {
    v114 = 0x80;
  }
  else
  {
    v114 = -127;
  }
  *v106 = v114;
  *((_QWORD *)v106 + 1) = v16;
  v115 = *(_QWORD *)(v109 + 96);
  v16[5] = v115;
  v16[6] = v115;
  *v117 = v16;
  if (v8)
    v116 = -127;
  else
    v116 = 0x80;
  *((_BYTE *)v16 + 16) = v116;
  return v16;
}

void sub_1ACC32090(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v8 = (uint64_t **)a1[20];
  if (v8)
  {
    v10 = a1[2];
    v11 = *a1;
    do
    {
      v12 = *(_QWORD *)(v11 + 32);
      v13 = *((unsigned int *)v8 + 5);
      v14 = *((int *)v8 + 4);
      if (*((_BYTE *)a1 + 31))
      {
        v15 = *((_BYTE *)a1 + 31) - 1;
        *((_BYTE *)a1 + 31) = v15;
        v16 = *((_DWORD *)a1 + v15 + 56);
      }
      else
      {
        v16 = *((_DWORD *)a1 + 14) + 1;
        *((_DWORD *)a1 + 14) = v16;
      }
      v17 = (v13 + 2);
      v18 = *(_DWORD *)(v10 + 144);
      v19 = (v18 + 7);
      if (*(_DWORD *)(v10 + 148) <= v18)
      {
        sub_1ACBFF5AC(v10, 55, v17, v19, v13, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v10 + 144) = v18 + 1;
        v20 = *(_QWORD *)(v10 + 136) + 40 * v18;
        *(_DWORD *)v20 = 55;
        *(_DWORD *)(v20 + 4) = v17;
        *(_DWORD *)(v20 + 8) = v19;
        *(_DWORD *)(v20 + 12) = v13;
        *(_QWORD *)(v20 + 24) = 0;
        *(_QWORD *)(v20 + 32) = 0;
        *(_QWORD *)(v20 + 16) = 0;
      }
      sub_1ACB7A514(a1, 0, *((unsigned int *)v8 + 4), *(_QWORD *)(*(_QWORD *)(v12 + 32 * v14 + 24) + 104), 113, a6, a7, a8);
      v25 = *(_DWORD *)(v10 + 144);
      if (v25 + 5 > *(_DWORD *)(v10 + 148))
      {
        if (sub_1ACBFF63C(v10, v21, v22, v23, v24, a6, a7, a8))
          return;
        v25 = *(_DWORD *)(v10 + 144);
      }
      v26 = *(_QWORD *)(v10 + 136) + 40 * v25;
      *(_DWORD *)v26 = 51;
      *(_QWORD *)(v26 + 16) = 0;
      *(_QWORD *)(v26 + 49) = 0;
      *(_QWORD *)(v26 + 41) = 0;
      *(_QWORD *)(v26 + 56) = 0;
      *(_DWORD *)(v26 + 80) = 97;
      *(_QWORD *)(v26 + 96) = 0;
      *(_QWORD *)(v26 + 129) = 0;
      *(_QWORD *)(v26 + 121) = 0;
      *(_QWORD *)(v26 + 136) = 0;
      *(_QWORD *)(v26 + 169) = 0;
      *(_QWORD *)(v26 + 161) = 0;
      *(_QWORD *)(v26 + 176) = 0;
      *(_DWORD *)(v10 + 144) += 5;
      *(_DWORD *)(v26 + 8) = v25 + 2;
      *(_DWORD *)(v26 + 12) = 0;
      *(_BYTE *)(v26 + 40) = 127;
      *(_BYTE *)(v26 + 120) = 0x80;
      *(_BYTE *)(v26 + 160) = 122;
      *(_DWORD *)(v26 + 4) = v13 + 1;
      *(_DWORD *)(v26 + 48) = v13 + 1;
      *(_DWORD *)(v26 + 84) = v13 - 1;
      *(_DWORD *)(v26 + 88) = 2;
      *(_DWORD *)(v26 + 92) = v16;
      *(_DWORD *)(v26 + 128) = v16;
      *(_DWORD *)(v26 + 132) = v13 + 1;
      *(_WORD *)(v26 + 122) = 8;
      if (v16)
      {
        v27 = *((unsigned __int8 *)a1 + 31);
        if (v27 <= 7)
        {
          *((_BYTE *)a1 + 31) = v27 + 1;
          *((_DWORD *)a1 + v27 + 56) = v16;
        }
      }
      v8 = (uint64_t **)*v8;
    }
    while (v8);
  }
}

_QWORD *sub_1ACC3226C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;

  sub_1ACB57390(*(_QWORD *)(a1[4] + 56) + 56, "sqlite_returning", 0);
  v4 = (_QWORD *)a2[1];
  if (v4)
    sub_1ACC010B0(a1, v4);
  return sub_1ACBE0F9C(a1, a2);
}

_QWORD *sub_1ACC322C0(_QWORD **a1, int *a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8)
{
  int v8;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *i;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t j;
  _QWORD *result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  BOOL v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unsigned __int8 *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  int v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  int *v76;
  uint64_t v77;
  unsigned int v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  int *v90;
  int v91;
  int *v92;
  int *v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  __int16 v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  char *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  char v130;
  unsigned int v131;
  int v132;
  int v133;
  int v135;
  unsigned int v136;
  _QWORD *v138;
  int v139;
  int v140;
  int *v141;
  unsigned int v142;
  unsigned int v143;

  v8 = a8;
  v11 = (uint64_t)a1[2];
  v12 = *a1;
  for (i = *(_QWORD **)(a3 + 80); i; i = (_QWORD *)i[5])
  {
    if ((_QWORD *)*i == v12)
      break;
  }
  v14 = *(__int16 *)(a3 + 54);
  v15 = v14 + 2;
  v143 = a2[18];
  v16 = *((unsigned int *)a1 + 13);
  *((_DWORD *)a1 + 13) = v16 + 1;
  v17 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) <= v17)
  {
    v19 = a2;
    v20 = sub_1ACBFF5AC(v11, 118, v16, (v14 + 2), 0, a6, (uint64_t)a7, a8);
    a2 = v19;
    v140 = v20;
  }
  else
  {
    v140 = *(_DWORD *)(v11 + 144);
    *(_DWORD *)(v11 + 144) = v17 + 1;
    v18 = *(_QWORD *)(v11 + 136) + 40 * v17;
    *(_DWORD *)v18 = 118;
    *(_DWORD *)(v18 + 4) = v16;
    *(_DWORD *)(v18 + 8) = v15;
    *(_QWORD *)(v18 + 12) = 0;
    *(_QWORD *)(v18 + 28) = 0;
    *(_QWORD *)(v18 + 20) = 0;
    *(_DWORD *)(v18 + 36) = 0;
  }
  v21 = *((_DWORD *)a1 + 14);
  v136 = v21 + 1;
  v22 = v21 + v15;
  *((_DWORD *)a1 + 14) = v21 + v15;
  v141 = a2;
  if (*a2 < 2)
  {
    v131 = v22 + 2;
    v132 = v21 + v15;
    *((_DWORD *)a1 + 14) = v22 + 2;
    result = (_QWORD *)sub_1ACB78E3C((uint64_t)a1, a2, (uint64_t)a7, 0, 0, 0, 4, 0);
    v138 = result;
    if (!result)
      return result;
    v135 = v14;
    v139 = v14 + 2;
    v133 = v8;
    v142 = v16;
    if (*(__int16 *)(a3 + 54) >= 1)
    {
      v34 = 0;
      v35 = (v21 + 3);
      do
      {
        v36 = *(_DWORD *)(a6 + 4 * v34);
        if ((v36 & 0x80000000) != 0)
        {
          v30 = v35 + v34;
          v37 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) <= v37)
          {
            sub_1ACBFF5AC(v11, 175, v143, v34, v30, v31, v32, v33);
          }
          else
          {
            *(_DWORD *)(v11 + 144) = v37 + 1;
            v38 = *(_QWORD *)(v11 + 136) + 40 * v37;
            *(_DWORD *)v38 = 175;
            *(_DWORD *)(v38 + 4) = v143;
            *(_DWORD *)(v38 + 8) = v34;
            *(_DWORD *)(v38 + 12) = v30;
            *(_QWORD *)(v38 + 24) = 0;
            *(_QWORD *)(v38 + 32) = 0;
            *(_QWORD *)(v38 + 16) = 0;
          }
          v39 = *(_DWORD *)(v11 + 144);
          v40 = __OFSUB__(v39, 1);
          v41 = v39 - 1;
          if (v41 < 0 == v40)
            *(_WORD *)(*(_QWORD *)(v11 + 136) + 40 * v41 + 2) = 1;
        }
        else
        {
          sub_1ACC08D80((uint64_t)a1, *(unsigned __int8 **)(a4 + 24 * v36 + 8), (v35 + v34));
        }
        ++v34;
      }
      while (v34 < *(__int16 *)(a3 + 54));
    }
    if ((*(_BYTE *)(a3 + 48) & 0x80) != 0)
    {
      v48 = a3 + 16;
      do
      {
        v49 = *(_QWORD *)v48;
        v50 = *(_WORD *)(*(_QWORD *)v48 + 99) & 3;
        v48 = *(_QWORD *)v48 + 40;
      }
      while (v50 != 2);
      v51 = **(__int16 **)(v49 + 8);
      v52 = *(_DWORD *)(v11 + 144);
      v44 = v136;
      v53 = v138;
      if (*(_DWORD *)(v11 + 148) <= v52)
      {
        sub_1ACBFF5AC(v11, 175, v143, v51, v136, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v52 + 1;
        v54 = *(_QWORD *)(v11 + 136) + 40 * v52;
        *(_DWORD *)v54 = 175;
        *(_DWORD *)(v54 + 4) = v143;
        *(_DWORD *)(v54 + 8) = v51;
        *(_DWORD *)(v54 + 12) = v136;
        *(_QWORD *)(v54 + 24) = 0;
        *(_QWORD *)(v54 + 32) = 0;
        *(_QWORD *)(v54 + 16) = 0;
      }
      v69 = v142;
      v28 = (v21 + v51 + 3);
      v29 = (v21 + 2);
      v75 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) > v75)
      {
        *(_DWORD *)(v11 + 144) = v75 + 1;
        v74 = *(_QWORD *)(v11 + 136) + 40 * v75;
        *(_DWORD *)v74 = 81;
        *(_DWORD *)(v74 + 4) = v28;
        *(_DWORD *)(v74 + 8) = v29;
        goto LABEL_120;
      }
      v72 = v11;
      v27 = 81;
    }
    else
    {
      v42 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v42)
      {
        v44 = v136;
        sub_1ACBFF5AC(v11, 135, v143, v136, 0, v31, v32, v33);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v42 + 1;
        v43 = *(_QWORD *)(v11 + 136) + 40 * v42;
        *(_DWORD *)v43 = 135;
        *(_DWORD *)(v43 + 4) = v143;
        v44 = v136;
        *(_DWORD *)(v43 + 8) = v136;
        *(_QWORD *)(v43 + 12) = 0;
        *(_QWORD *)(v43 + 28) = 0;
        *(_QWORD *)(v43 + 20) = 0;
        *(_DWORD *)(v43 + 36) = 0;
      }
      v69 = v142;
      v53 = v138;
      v27 = (uint64_t)a5;
      v70 = v21 + 2;
      if (a5)
      {
        if (!a1[2]
          || (v71 = sub_1ACB7B84C(a1, a5, (v21 + 2), v29, v30, v31, v32, v33), (_DWORD)v71 == v70))
        {
LABEL_121:
          if (*((_BYTE *)v53 + 66))
          {
LABEL_122:
            if (!*(_BYTE *)(*(_QWORD *)v11 + 103))
            {
              v119 = *(_QWORD *)(v11 + 136) + 40 * v140;
              sub_1ACB693B4(*(_QWORD **)v11, *(char *)(v119 + 1), *(_QWORD *)(v119 + 16));
              *(_QWORD *)(v119 + 16) = 0;
              *(_WORD *)v119 = 184;
            }
            v120 = *(_DWORD *)(v11 + 144);
            if (*(_DWORD *)(v11 + 148) <= v120)
            {
              sub_1ACBFF5AC(v11, 122, v143, 0, 0, v31, v32, v33);
              v101 = 0;
            }
            else
            {
              v101 = 0;
              *(_DWORD *)(v11 + 144) = v120 + 1;
              v121 = *(_QWORD *)(v11 + 136) + 40 * v120;
              *(_DWORD *)v121 = 122;
              *(_DWORD *)(v121 + 4) = v143;
              *(_OWORD *)(v121 + 8) = 0u;
              *(_OWORD *)(v121 + 24) = 0u;
            }
            goto LABEL_99;
          }
LABEL_130:
          v122 = (v132 + 1);
          v123 = a1[21];
          if (!v123)
            v123 = a1;
          *((_BYTE *)v123 + 32) = 1;
          v124 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) <= v124)
          {
            sub_1ACBFF5AC(v11, 97, v44, v139, v122, v31, v32, v33);
          }
          else
          {
            *(_DWORD *)(v11 + 144) = v124 + 1;
            v125 = *(_QWORD *)(v11 + 136) + 40 * v124;
            *(_DWORD *)v125 = 97;
            *(_DWORD *)(v125 + 4) = v44;
            *(_DWORD *)(v125 + 8) = v139;
            *(_DWORD *)(v125 + 12) = v122;
            *(_QWORD *)(v125 + 24) = 0;
            *(_QWORD *)(v125 + 32) = 0;
            *(_QWORD *)(v125 + 16) = 0;
          }
          v126 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) <= v126)
          {
            sub_1ACBFF5AC(v11, 127, v69, v131, 0, v31, v32, v33);
          }
          else
          {
            *(_DWORD *)(v11 + 144) = v126 + 1;
            v127 = *(_QWORD *)(v11 + 136) + 40 * v126;
            *(_DWORD *)v127 = 127;
            *(_DWORD *)(v127 + 4) = v69;
            *(_DWORD *)(v127 + 8) = v131;
            *(_QWORD *)(v127 + 12) = 0;
            *(_QWORD *)(v127 + 28) = 0;
            *(_QWORD *)(v127 + 20) = 0;
            *(_DWORD *)(v127 + 36) = 0;
          }
          v128 = *(_DWORD *)(v11 + 144);
          if (*(_DWORD *)(v11 + 148) <= v128)
          {
            sub_1ACBFF5AC(v11, 128, v69, v122, v131, v31, v32, v33);
          }
          else
          {
            *(_DWORD *)(v11 + 144) = v128 + 1;
            v129 = *(_QWORD *)(v11 + 136) + 40 * v128;
            *(_DWORD *)v129 = 128;
            *(_DWORD *)(v129 + 4) = v69;
            *(_DWORD *)(v129 + 8) = v122;
            *(_DWORD *)(v129 + 12) = v131;
            *(_QWORD *)(v129 + 24) = 0;
            *(_QWORD *)(v129 + 32) = 0;
            *(_QWORD *)(v129 + 16) = 0;
          }
          goto LABEL_85;
        }
        v28 = v71;
        v27 = 80;
        if ((a5[6] & 0x40) == 0)
        {
          if (*a5 == 176)
            v27 = 80;
          else
            v27 = 81;
        }
        v72 = (uint64_t)a1[2];
        v73 = *(_DWORD *)(v72 + 144);
        if (*(_DWORD *)(v72 + 148) > v73)
        {
          *(_DWORD *)(v72 + 144) = v73 + 1;
          v74 = *(_QWORD *)(v72 + 136) + 40 * v73;
          *(_BYTE *)v74 = v27;
          *(_WORD *)(v74 + 2) = 0;
          *(_DWORD *)(v74 + 4) = v28;
          *(_DWORD *)(v74 + 8) = v70;
          *(_BYTE *)(v74 + 1) = 0;
LABEL_120:
          *(_QWORD *)(v74 + 12) = 0;
          *(_QWORD *)(v74 + 28) = 0;
          *(_QWORD *)(v74 + 20) = 0;
          *(_DWORD *)(v74 + 36) = 0;
          goto LABEL_121;
        }
      }
      else
      {
        v118 = *(_DWORD *)(v11 + 144);
        if (*(_DWORD *)(v11 + 148) > v118)
        {
          *(_DWORD *)(v11 + 144) = v118 + 1;
          v74 = *(_QWORD *)(v11 + 136) + 40 * v118;
          *(_DWORD *)v74 = 135;
          *(_DWORD *)(v74 + 4) = v143;
          *(_DWORD *)(v74 + 8) = v70;
          goto LABEL_120;
        }
        v72 = v11;
        v27 = 135;
        v28 = v143;
      }
      v29 = (v21 + 2);
    }
    sub_1ACBFF5AC(v72, v27, v28, v29, 0, v31, v32, v33);
    if (*((_BYTE *)v53 + 66))
      goto LABEL_122;
    goto LABEL_130;
  }
  v23 = a3;
  v133 = v8;
  v139 = v14 + 2;
  v135 = v14;
  if ((*(_BYTE *)(a3 + 48) & 0x80) != 0)
  {
    for (j = *(_QWORD *)(a3 + 16); j; j = *(_QWORD *)(j + 40))
    {
      if ((*(_WORD *)(j + 99) & 3) == 2)
        break;
    }
    v45 = **(__int16 **)(j + 8);
    v46 = *(_DWORD *)(a6 + 4 * v45);
    if ((v46 & 0x80000000) != 0)
    {
      v62 = sub_1ACBE1124((uint64_t)*a1, 0x50uLL);
      v24 = (unsigned int *)v62;
      if (v62)
      {
        *(_OWORD *)(v62 + 32) = 0u;
        *(_OWORD *)(v62 + 48) = 0u;
        *(_OWORD *)(v62 + 64) = 0u;
        *(_OWORD *)v62 = 0u;
        *(_OWORD *)(v62 + 16) = 0u;
        *(_BYTE *)v62 = 75;
        *(_WORD *)(v62 + 52) = -1;
        *(_DWORD *)(v62 + 40) = 1;
        if (*((int *)*a1 + 37) <= 0)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v63, v64, v65, v66, v67, v68, *((_DWORD *)*a1 + 37));
        v24[12] = v45 + 1;
      }
      v23 = a3;
    }
    else
    {
      v23 = a3;
      v47 = *(unsigned __int8 **)(a4 + 24 * v46 + 8);
      if (v47)
        v24 = sub_1ACB8B290((uint64_t)v12, v47, 0, 0);
      else
        v24 = 0;
    }
  }
  else
  {
    if (a5)
    {
      v24 = sub_1ACB8B290((uint64_t)v12, a5, 0, 0);
    }
    else
    {
      v55 = sub_1ACBE1124((uint64_t)*a1, 0x50uLL);
      v24 = (unsigned int *)v55;
      if (v55)
      {
        *(_OWORD *)(v55 + 32) = 0u;
        *(_OWORD *)(v55 + 48) = 0u;
        *(_OWORD *)(v55 + 64) = 0u;
        *(_OWORD *)v55 = 0u;
        *(_OWORD *)(v55 + 16) = 0u;
        *(_BYTE *)v55 = 75;
        *(_WORD *)(v55 + 52) = -1;
        *(_DWORD *)(v55 + 40) = 1;
        if (*((int *)*a1 + 37) <= 0)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v56, v57, v58, v59, v60, v61, *((_DWORD *)*a1 + 37));
      }
    }
    j = 0;
  }
  v76 = (int *)sub_1ACC2D490(*a1, (unsigned __int8 *)v24);
  if (*(__int16 *)(v23 + 54) >= 1)
  {
    v77 = 0;
    while (1)
    {
      v78 = *(_DWORD *)(a6 + 4 * v77);
      if ((v78 & 0x80000000) != 0)
        break;
      v79 = *(unsigned __int8 **)(a4 + 24 * v78 + 8);
      if (v79)
      {
        v80 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)v12, v79, 0, 0);
        if (v76)
          goto LABEL_75;
      }
      else
      {
        v80 = 0;
        if (v76)
        {
LABEL_75:
          v91 = *v76;
          if (v76[1] <= *v76)
          {
            v76 = sub_1ACC2D4F4((uint64_t)*a1, v76, v80);
          }
          else
          {
            *v76 = v91 + 1;
            v92 = &v76[6 * v91];
            *((_QWORD *)v92 + 2) = 0;
            *((_QWORD *)v92 + 3) = 0;
            *((_QWORD *)v92 + 1) = v80;
          }
          goto LABEL_62;
        }
      }
      v76 = (int *)sub_1ACC2D490(*a1, v80);
LABEL_62:
      if (++v77 >= *(__int16 *)(v23 + 54))
        goto LABEL_82;
    }
    v81 = sub_1ACBE1124((uint64_t)*a1, 0x50uLL);
    v88 = v81;
    if (v81)
    {
      *(_OWORD *)(v81 + 32) = 0u;
      *(_OWORD *)(v81 + 48) = 0u;
      *(_OWORD *)(v81 + 64) = 0u;
      *(_OWORD *)v81 = 0u;
      *(_OWORD *)(v81 + 16) = 0u;
      *(_BYTE *)v81 = 75;
      *(_WORD *)(v81 + 52) = -1;
      *(_DWORD *)(v81 + 40) = 1;
      if (*((int *)*a1 + 37) <= 0)
        sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v82, v83, v84, v85, v86, v87, *((_DWORD *)*a1 + 37));
      *(_DWORD *)(v88 + 48) = v77 + 1;
      *(_BYTE *)(v88 + 2) = 1;
    }
    if (v76)
    {
      v89 = *v76;
      if (v76[1] > *v76)
      {
        *v76 = v89 + 1;
        v90 = &v76[6 * v89];
        *((_QWORD *)v90 + 2) = 0;
        *((_QWORD *)v90 + 3) = 0;
        *((_QWORD *)v90 + 1) = v88;
LABEL_81:
        v23 = a3;
        goto LABEL_62;
      }
      v93 = sub_1ACC2D4F4((uint64_t)*a1, v76, (unsigned __int8 *)v88);
    }
    else
    {
      v93 = (int *)sub_1ACC2D490(*a1, (unsigned __int8 *)v88);
    }
    v76 = v93;
    goto LABEL_81;
  }
LABEL_82:
  sub_1ACC32ED0((uint64_t *)a1, v16, j, v76, (uint64_t)v141, a7, 0, 0, v130);
  if (v76)
    sub_1ACC010B0(v12, v76);
  v53 = 0;
  v69 = v16;
  v44 = v136;
LABEL_85:
  if (*v141 == 1)
    sub_1ACB7D270((uint64_t **)v53, v27, v28, v29, v30, v31, v32, v33);
  v94 = *(_DWORD *)(v11 + 144);
  if (*(_DWORD *)(v11 + 148) > v94)
  {
    *(_DWORD *)(v11 + 144) = v94 + 1;
    v95 = *(_QWORD *)(v11 + 136) + 40 * v94;
    *(_DWORD *)v95 = 36;
    *(_DWORD *)(v95 + 4) = v69;
    *(_OWORD *)(v95 + 8) = 0u;
    *(_OWORD *)(v95 + 24) = 0u;
    v140 = v94;
    if (v135 < -1)
      goto LABEL_98;
LABEL_91:
    v96 = 0;
    if (v139 <= 1)
      v97 = 1;
    else
      v97 = v139;
    do
    {
      v99 = (v44 + v96);
      v100 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) > v100)
      {
        *(_DWORD *)(v11 + 144) = v100 + 1;
        v98 = *(_QWORD *)(v11 + 136) + 40 * v100;
        *(_DWORD *)v98 = 94;
        *(_DWORD *)(v98 + 4) = v69;
        *(_DWORD *)(v98 + 8) = v96;
        *(_DWORD *)(v98 + 12) = v99;
        *(_QWORD *)(v98 + 24) = 0;
        *(_QWORD *)(v98 + 32) = 0;
        *(_QWORD *)(v98 + 16) = 0;
      }
      else
      {
        sub_1ACBFF5AC(v11, 94, v69, v96, v99, v31, v32, v33);
      }
      v96 = (v96 + 1);
    }
    while (v97 != (_DWORD)v96);
    goto LABEL_98;
  }
  v140 = sub_1ACBFF5AC(v11, 36, v69, 0, 0, v31, v32, v33);
  if (v135 >= -1)
    goto LABEL_91;
LABEL_98:
  v101 = 1;
LABEL_99:
  sub_1ACC2DEBC((uint64_t *)a1, a3);
  result = (_QWORD *)sub_1ACBA86CC((uint64_t *)v11, 7, 0, v139, v44, (uint64_t)i, 4294967285, v102);
  v110 = *(_DWORD *)(v11 + 144);
  if (v110 >= 1)
  {
    if (v133 == 11)
      v111 = 2;
    else
      v111 = v133;
    *(_WORD *)(*(_QWORD *)(v11 + 136) + 40 * (v110 - 1) + 2) = v111;
  }
  v112 = a1[21];
  if (!v112)
    v112 = a1;
  *((_BYTE *)v112 + 33) = 1;
  if (!v101)
    return sub_1ACB7D270((uint64_t **)v53, v103, v104, v105, v106, v107, v108, v109);
  v113 = (v140 + 1);
  if (*(_DWORD *)(v11 + 148) <= v110)
  {
    result = (_QWORD *)sub_1ACBFF5AC(v11, 39, v69, v113, 0, v107, v108, v109);
  }
  else
  {
    *(_DWORD *)(v11 + 144) = v110 + 1;
    v114 = *(_QWORD *)(v11 + 136) + 40 * v110;
    *(_DWORD *)v114 = 39;
    *(_DWORD *)(v114 + 4) = v69;
    *(_DWORD *)(v114 + 8) = v113;
    *(_QWORD *)(v114 + 12) = 0;
    *(_QWORD *)(v114 + 28) = 0;
    *(_QWORD *)(v114 + 20) = 0;
    *(_DWORD *)(v114 + 36) = 0;
  }
  v115 = *(_DWORD *)(v11 + 144);
  if (*(_BYTE *)(*(_QWORD *)v11 + 103))
    v116 = &byte_1EECAD280;
  else
    v116 = (char *)(*(_QWORD *)(v11 + 136) + 40 * v140);
  *((_DWORD *)v116 + 2) = v115;
  if (*(_DWORD *)(v11 + 148) <= v115)
    return (_QWORD *)sub_1ACBFF5AC(v11, 122, v69, 0, 0, v107, v108, v109);
  *(_DWORD *)(v11 + 144) = v115 + 1;
  v117 = *(_QWORD *)(v11 + 136) + 40 * v115;
  *(_DWORD *)v117 = 122;
  *(_DWORD *)(v117 + 4) = v69;
  *(_OWORD *)(v117 + 8) = 0u;
  *(_OWORD *)(v117 + 24) = 0u;
  return result;
}

void sub_1ACC32ED0(uint64_t *a1, int a2, uint64_t a3, int *a4, uint64_t a5, unsigned __int8 *a6, _QWORD *a7, unsigned __int8 *a8, char a9)
{
  _QWORD *v16;
  _QWORD *v17;
  unsigned int *v18;
  _DWORD *v19;
  unsigned int *v20;
  uint64_t v21;
  int *v22;
  int *v23;
  int *v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  int v35;
  int *v36;
  int v37;
  int *v38;
  int v39;
  int v40;
  int *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int *v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned __int8 *v68;
  uint64_t v69;
  uint64_t v70;
  int *v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  int v74;
  int *v75;
  _OWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  uint64_t v84;
  _OWORD *v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;

  v16 = (_QWORD *)*a1;
  if (a7 && !a8)
  {
    sub_1ACBCB308((uint64_t)a1, "ORDER BY without LIMIT on UPDATE", a3, (uint64_t)a4, a5, (uint64_t)a6, (uint64_t)a7, 0, a9);
    return;
  }
  v89 = *(_QWORD *)(a5 + 40);
  v17 = sub_1ACB8B6B8((uint64_t)v16, a7, 0);
  if (a8)
    v18 = sub_1ACB8B290((uint64_t)v16, a8, 0, 0);
  else
    v18 = 0;
  v19 = sub_1ACB8E1EC((uint64_t)v16, (int *)a5, 0);
  if (a6)
  {
    v20 = sub_1ACB8B290((uint64_t)v16, a6, 0, 0);
    if (!v19)
      goto LABEL_10;
    goto LABEL_9;
  }
  v20 = 0;
  if (v19)
  {
LABEL_9:
    v19[18] = -1;
    --*(_DWORD *)(*((_QWORD *)v19 + 5) + 44);
    *((_QWORD *)v19 + 5) = 0;
  }
LABEL_10:
  v92 = 0;
  v90 = 0u;
  v91 = 0u;
  v88 = a2;
  v86 = (uint64_t)v18;
  v87 = (uint64_t)v17;
  v84 = (uint64_t)v20;
  v85 = v19;
  if (!a3)
  {
    v39 = *(unsigned __int8 *)(v89 + 63);
    if (v39 != 2)
    {
      if (v39 == 1)
        v52 = 14;
      else
        v52 = 15;
      v53 = sub_1ACBE1124(*a1, 0x50uLL);
      v60 = (unsigned __int8 *)v53;
      if (v53)
      {
        *(_OWORD *)(v53 + 32) = 0u;
        *(_OWORD *)(v53 + 48) = 0u;
        *(_OWORD *)(v53 + 64) = 0u;
        *(_OWORD *)v53 = 0u;
        *(_OWORD *)(v53 + 16) = 0u;
        *(_BYTE *)v53 = 75;
        *(_WORD *)(v53 + 52) = -1;
        *(_DWORD *)(v53 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v54, v55, v56, v57, v58, v59, *(_DWORD *)(*a1 + 148));
      }
      v23 = (int *)sub_1ACC2D490((_QWORD *)*a1, v60);
      if (a8)
      {
        v61 = sub_1ACBE1124(*a1, 0x50uLL);
        v68 = (unsigned __int8 *)v61;
        if (v61)
        {
          *(_OWORD *)(v61 + 32) = 0u;
          *(_OWORD *)(v61 + 48) = 0u;
          *(_OWORD *)(v61 + 64) = 0u;
          *(_OWORD *)v61 = 0u;
          *(_OWORD *)(v61 + 16) = 0u;
          *(_BYTE *)v61 = 75;
          *(_WORD *)(v61 + 52) = -1;
          *(_DWORD *)(v61 + 40) = 1;
          if (*(int *)(*a1 + 148) <= 0)
            sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v62, v63, v64, v65, v66, v67, *(_DWORD *)(*a1 + 148));
        }
        v22 = (int *)sub_1ACC2D490((_QWORD *)*a1, v68);
        if (!a4)
          goto LABEL_83;
      }
      else
      {
        v22 = 0;
        if (!a4)
          goto LABEL_83;
      }
      goto LABEL_71;
    }
    if (*(__int16 *)(v89 + 54) < 1)
    {
      v23 = 0;
LABEL_68:
      v22 = 0;
      v52 = 14;
      if (!a4)
        goto LABEL_83;
      goto LABEL_71;
    }
    v23 = 0;
    v40 = 0;
    while (1)
    {
      v42 = sub_1ACBE1124(*a1, 0x50uLL);
      v49 = v42;
      if (v42)
      {
        *(_OWORD *)(v42 + 32) = 0u;
        *(_OWORD *)(v42 + 48) = 0u;
        *(_OWORD *)(v42 + 64) = 0u;
        *(_OWORD *)v42 = 0u;
        *(_OWORD *)(v42 + 16) = 0u;
        *(_BYTE *)v42 = 75;
        *(_WORD *)(v42 + 52) = -1;
        *(_DWORD *)(v42 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v43, v44, v45, v46, v47, v48, *(_DWORD *)(*a1 + 148));
        *(_DWORD *)(v49 + 48) = v40 + 1;
      }
      if (v23)
      {
        v50 = *v23;
        if (v23[1] > *v23)
        {
          *v23 = v50 + 1;
          v51 = &v23[6 * v50];
          *((_QWORD *)v51 + 2) = 0;
          *((_QWORD *)v51 + 3) = 0;
          *((_QWORD *)v51 + 1) = v49;
          goto LABEL_40;
        }
        v41 = sub_1ACC2D4F4(*a1, v23, (unsigned __int8 *)v49);
      }
      else
      {
        v41 = (int *)sub_1ACC2D490((_QWORD *)*a1, (unsigned __int8 *)v49);
      }
      v23 = v41;
LABEL_40:
      if (++v40 >= *(__int16 *)(v89 + 54))
        goto LABEL_68;
    }
  }
  if (*(_WORD *)(a3 + 94))
  {
    v21 = 0;
    v22 = 0;
    v23 = 0;
    while (1)
    {
      v25 = *(__int16 *)(*(_QWORD *)(a3 + 8) + 2 * v21);
      v26 = sub_1ACBE1124(*a1, 0x50uLL);
      v33 = v26;
      if (v26)
      {
        *(_OWORD *)(v26 + 32) = 0u;
        *(_OWORD *)(v26 + 48) = 0u;
        *(_OWORD *)(v26 + 64) = 0u;
        *(_OWORD *)v26 = 0u;
        *(_OWORD *)(v26 + 16) = 0u;
        *(_BYTE *)v26 = 75;
        *(_WORD *)(v26 + 52) = -1;
        *(_DWORD *)(v26 + 40) = 1;
        if (*(int *)(*a1 + 148) <= 0)
          sub_1ACBCB308((uint64_t)a1, "Expression tree is too large (maximum depth %d)", v27, v28, v29, v30, v31, v32, *(_DWORD *)(*a1 + 148));
        *(_DWORD *)(v33 + 48) = v25 + 1;
        if (!a8)
          goto LABEL_27;
        v34 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)v16, (unsigned __int8 *)v33, 0, 0);
        if (!v22)
          goto LABEL_26;
      }
      else
      {
        if (!a8)
          goto LABEL_27;
        v34 = 0;
        if (!v22)
        {
LABEL_26:
          v22 = (int *)sub_1ACC2D490((_QWORD *)*a1, v34);
LABEL_27:
          if (!v23)
            goto LABEL_13;
          goto LABEL_28;
        }
      }
      v35 = *v22;
      if (v22[1] <= *v22)
      {
        v22 = sub_1ACC2D4F4(*a1, v22, v34);
        if (!v23)
        {
LABEL_13:
          v24 = (int *)sub_1ACC2D490((_QWORD *)*a1, (unsigned __int8 *)v33);
          goto LABEL_14;
        }
      }
      else
      {
        *v22 = v35 + 1;
        v36 = &v22[6 * v35];
        *((_QWORD *)v36 + 2) = 0;
        *((_QWORD *)v36 + 3) = 0;
        *((_QWORD *)v36 + 1) = v34;
        if (!v23)
          goto LABEL_13;
      }
LABEL_28:
      v37 = *v23;
      if (v23[1] > *v23)
      {
        *v23 = v37 + 1;
        v38 = &v23[6 * v37];
        *((_QWORD *)v38 + 2) = 0;
        *((_QWORD *)v38 + 3) = 0;
        *((_QWORD *)v38 + 1) = v33;
        goto LABEL_15;
      }
      v24 = sub_1ACC2D4F4(*a1, v23, (unsigned __int8 *)v33);
LABEL_14:
      v23 = v24;
LABEL_15:
      if (++v21 >= (unint64_t)*(unsigned __int16 *)(a3 + 94))
        goto LABEL_50;
    }
  }
  v23 = 0;
  v22 = 0;
LABEL_50:
  if (*(_BYTE *)(v89 + 63) == 1)
    v52 = 14;
  else
    v52 = 15;
  if (a4)
  {
LABEL_71:
    if (*a4 < 1)
      goto LABEL_83;
    v69 = 0;
    v70 = 2;
    do
    {
      v72 = *(unsigned __int8 **)&a4[v70];
      if (v72)
      {
        v73 = (unsigned __int8 *)sub_1ACB8B290((uint64_t)v16, v72, 0, 0);
        if (!v23)
          goto LABEL_73;
      }
      else
      {
        v73 = 0;
        if (!v23)
        {
LABEL_73:
          v71 = (int *)sub_1ACC2D490((_QWORD *)*a1, v73);
          goto LABEL_74;
        }
      }
      v74 = *v23;
      if (v23[1] > *v23)
      {
        *v23 = v74 + 1;
        v75 = &v23[6 * v74];
        *((_QWORD *)v75 + 2) = 0;
        *((_QWORD *)v75 + 3) = 0;
        *((_QWORD *)v75 + 1) = v73;
        goto LABEL_75;
      }
      v71 = sub_1ACC2D4F4(*a1, v23, v73);
LABEL_74:
      v23 = v71;
LABEL_75:
      ++v69;
      v70 += 6;
    }
    while (v69 < *a4);
  }
LABEL_83:
  v76 = sub_1ACB6E848((_QWORD **)a1, v23, v85, v84, (uint64_t)v22, 0, v87, 276955136, v86);
  v82 = (uint64_t)v76;
  if (v76)
    *((_DWORD *)v76 + 1) |= 0x8000000u;
  LOBYTE(v90) = v52;
  *((_QWORD *)&v91 + 1) = 0;
  HIDWORD(v90) = 0;
  LODWORD(v91) = 0;
  DWORD1(v90) = v88;
  if (a3)
    v83 = *(unsigned __int16 *)(a3 + 94);
  else
    v83 = -1;
  DWORD2(v90) = v83;
  sub_1ACB6EA04((_QWORD **)a1, (uint64_t)v76, (uint64_t)&v90, v77, v78, v79, v80, v81);
  if (v82)
    sub_1ACB7E704(v16, v82, 1);
}

void sub_1ACC33500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int v19;
  _BYTE *v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  __int16 v24;
  int64_t v25;
  uint64_t v26;
  _WORD *v27;
  int8x16_t v28;
  int8x16_t v29;
  int8x16_t v30;
  int8x16_t v31;
  unint64_t v32;
  int v33;
  _QWORD *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  _WORD *v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  __int16 v42;
  _DWORD *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  int16x8_t v48;
  int16x8_t v49;
  int8x16_t v50;
  uint16x8_t v51;
  int8x16_t v52;
  int16x8_t v53;
  int16x8_t v54;
  unsigned __int16 *v55;
  unsigned int v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;
  int8x16x2_t v61;

  v9 = a2;
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  sub_1ACC0EDC4(*(_QWORD ***)(a1 + 16), a3, a2, a4, a5, a6, a7, a8);
  if ((*(_BYTE *)(a3 + 48) & 0x40) != 0)
  {
    v17 = *(_QWORD *)(a1 + 16);
    if (*(_BYTE *)(*(_QWORD *)v17 + 103))
      v18 = &byte_1EECAD280;
    else
      v18 = (char *)(*(_QWORD *)(v17 + 136) + 40 * *(int *)(v17 + 144) - 40);
    v19 = *v18;
    if (v19 == 95)
    {
      *((_DWORD *)v18 + 3) = 1;
    }
    else if (v19 == 96)
    {
      v20 = (_BYTE *)*((_QWORD *)v18 + 2);
      if (*v20)
      {
        v21 = 0;
        v22 = 14;
        v23 = v20;
        do
        {
          v24 = *(_WORD *)(*(_QWORD *)(a3 + 8) + v22);
          if ((v24 & 0x20) == 0)
          {
            if ((v24 & 0x40) != 0)
              *v23 = 64;
            ++v21;
          }
          v23 = &v20[v21];
          v22 += 16;
        }
        while (*v23);
      }
    }
  }
  LODWORD(v25) = *(__int16 *)(a3 + 54);
  if ((int)v25 >= 1)
  {
    v26 = *(unsigned __int16 *)(a3 + 54);
    v27 = (_WORD *)(*(_QWORD *)(a3 + 8) + 14);
    do
    {
      if ((*v27 & 0x60) != 0)
        *v27 |= 0x80u;
      v27 += 8;
      --v26;
    }
    while (v26);
  }
  v60 = a3;
  v58 = 0uLL;
  *(_DWORD *)(a1 + 64) = -v9;
  v28 = (int8x16_t)xmmword_1ACCBDDB0;
  v29 = (int8x16_t)xmmword_1ACCBDDC0;
  v30 = (int8x16_t)xmmword_1ACCBDDD0;
  v31.i64[0] = 0x1000100010001;
  v31.i64[1] = 0x1000100010001;
  *((_QWORD *)&v57 + 1) = sub_1ACC33900;
  do
  {
    if ((__int16)v25 < 1)
      goto LABEL_55;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    do
    {
      v36 = *(_QWORD *)(a3 + 8) + 16 * v32;
      v38 = (_WORD *)(v36 + 14);
      v37 = *(_WORD *)(v36 + 14);
      if ((v37 & 0x80) == 0)
        goto LABEL_25;
      *v38 = v37 | 0x100;
      WORD2(v59) = 0;
      v39 = *(unsigned __int16 *)(v36 + 12);
      if (*(_WORD *)(v36 + 12)
        && !*(_BYTE *)(a3 + 63)
        && (v43 = *(_DWORD **)(a3 + 80)) != 0
        && *v43 >= v39
        && (v44 = *(_QWORD *)&v43[6 * (v39 - 1) + 2]) != 0)
      {
        sub_1ACC0B714((uint64_t)&v57, v44);
        v31.i64[0] = 0x1000100010001;
        v31.i64[1] = 0x1000100010001;
        v30 = (int8x16_t)xmmword_1ACCBDDD0;
        v29 = (int8x16_t)xmmword_1ACCBDDC0;
        v28 = (int8x16_t)xmmword_1ACCBDDB0;
        v45 = BYTE4(v59);
        *v38 &= ~0x100u;
        if (v45 < 0)
        {
          v34 = (_QWORD *)v36;
          goto LABEL_25;
        }
      }
      else
      {
        *v38 = v37 & 0xFEFF;
      }
      v35 = v32;
      if ((v32 & 0x8000) == 0 && (*(_DWORD *)(a3 + 48) & 0x20) != 0)
      {
        v40 = *(_QWORD *)(a3 + 8);
        if ((_WORD)v32)
        {
          if (v32 >= 0x11)
          {
            if ((v32 & 0xF) != 0)
              v46 = v32 & 0xF;
            else
              v46 = 16;
            v41 = v32 - v46;
            v47 = v40 + 142;
            v48 = 0uLL;
            v49 = 0uLL;
            do
            {
              v50 = vqtbl2q_s8(*(int8x16x2_t *)(v47 - 64), v29);
              v50.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v47 - 32), v28).i32[3];
              v51.i32[0] = vzip1q_s16(*(int16x8_t *)(v47 - 128), *(int16x8_t *)(v47 - 112)).u32[0];
              v51.i32[1] = vqtbl2q_s8(*(int8x16x2_t *)(v47 - 96), v30).i32[1];
              v51.i64[1] = v50.i64[1];
              v61 = *(int8x16x2_t *)(v47 + 32);
              v52 = vqtbl2q_s8(*(int8x16x2_t *)(v47 + 64), v29);
              v52.i32[3] = vqtbl2q_s8(*(int8x16x2_t *)(v47 + 96), v28).i32[3];
              v54 = *(int16x8_t *)v47;
              v53 = *(int16x8_t *)(v47 + 16);
              v47 += 256;
              v53.i32[0] = vzip1q_s16(v54, v53).u32[0];
              v53.i32[1] = vqtbl2q_s8(v61, v30).i32[1];
              v53.i64[1] = v52.i64[1];
              v48 = vaddq_s16((int16x8_t)vbicq_s8(v31, (int8x16_t)vshrq_n_u16(v51, 5uLL)), v48);
              v49 = vaddq_s16((int16x8_t)vbicq_s8(v31, (int8x16_t)vshrq_n_u16((uint16x8_t)v53, 5uLL)), v49);
              v46 += 16;
            }
            while (v32 != v46);
            v42 = vaddvq_s16(vaddq_s16(v49, v48));
          }
          else
          {
            v41 = 0;
            v42 = 0;
          }
          v55 = (unsigned __int16 *)(v40 + 16 * v41 + 14);
          do
          {
            v56 = *v55;
            v55 += 8;
            v42 += ((v56 >> 5) & 1) == 0;
            ++v41;
          }
          while (v32 != v41);
        }
        else
        {
          v42 = 0;
        }
        if ((*(_WORD *)(v40 + 16 * ((uint64_t)(v32 << 16) >> 16) + 14) & 0x20) != 0)
          v35 = v32 - v42 + *(_WORD *)(a3 + 56);
        else
          v35 = v42;
      }
      sub_1ACC09780(a1, a3, v36, (v9 + v35), v13, v14, v15, v16);
      *v38 &= ~0x80u;
      v33 = 1;
      v29 = (int8x16_t)xmmword_1ACCBDDC0;
      v28 = (int8x16_t)xmmword_1ACCBDDB0;
      v30 = (int8x16_t)xmmword_1ACCBDDD0;
      v31.i64[0] = 0x1000100010001;
      v31.i64[1] = 0x1000100010001;
LABEL_25:
      ++v32;
      v25 = *(__int16 *)(a3 + 54);
    }
    while ((uint64_t)v32 < v25);
  }
  while (v34 && v33);
  if (v34)
    sub_1ACBCB308(a1, "generated column loop on \"%s\"", v11, v12, v13, v14, v15, v16, *v34);
LABEL_55:
  *(_DWORD *)(a1 + 64) = 0;
}

uint64_t sub_1ACC338C0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  __int16 v3;

  if (*a2 == 167)
  {
    v2 = *((unsigned int *)a2 + 12);
    if ((v2 & 0x80000000) != 0)
    {
      v3 = 2;
      goto LABEL_6;
    }
    if ((*(_DWORD *)(*(_QWORD *)(a1 + 40) + 4 * v2) & 0x80000000) == 0)
    {
      v3 = 1;
LABEL_6:
      *(_WORD *)(a1 + 36) |= v3;
    }
  }
  return 0;
}

uint64_t sub_1ACC33900(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;

  if (*a2 == 167)
  {
    v2 = *((unsigned int *)a2 + 12);
    if ((v2 & 0x80000000) == 0)
      *(_WORD *)(a1 + 36) |= *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 16 * v2 + 14);
  }
  return 0;
}

uint64_t sub_1ACC33938(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t result;
  int v23;
  BOOL v24;
  int v25;

  v10 = *a1;
  if (*(__int16 *)(a3 + 52) < 0)
  {
    v18 = sub_1ACB6DDD0(v10, "%s.rowid", a3, a4, a5, a6, a7, a8, *(_QWORD *)a3);
    v19 = 2579;
    v20 = a1[2];
    if (v20)
    {
LABEL_3:
      if ((_DWORD)a2 != 2)
        goto LABEL_7;
      goto LABEL_4;
    }
  }
  else
  {
    v18 = sub_1ACB6DDD0(v10, "%s.%s", a3, a4, a5, a6, a7, a8, *(_QWORD *)a3);
    v19 = 1555;
    v20 = a1[2];
    if (v20)
      goto LABEL_3;
  }
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  v20 = sub_1ACBCB4C8(a1, v11, v12, v13, v14, v15, v16, v17);
  if ((_DWORD)a2 == 2)
  {
LABEL_4:
    v21 = (uint64_t *)a1[21];
    if (!v21)
      v21 = a1;
    *((_BYTE *)v21 + 33) = 1;
  }
LABEL_7:
  result = sub_1ACBA86CC((uint64_t *)v20, 70, v19, a2, 0, (uint64_t)v18, 4294967290, v17);
  v23 = *(_DWORD *)(v20 + 144);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v25 < 0 == v24)
    *(_WORD *)(*(_QWORD *)(v20 + 136) + 40 * v25 + 2) = 2;
  return result;
}

_QWORD *sub_1ACC33A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t i;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int *v49;
  unsigned __int8 *v50;
  unsigned int *v51;
  unsigned int v53;
  uint64_t v54;
  _DWORD *v56;

  v12 = a1;
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)a1;
  v15 = *(unsigned int *)(a2 + 76);
  v16 = a2;
  do
  {
    if (!*(_QWORD *)v16)
      break;
    if (*(_QWORD *)(v16 + 56) == a4)
      break;
    v16 = *(_QWORD *)(v16 + 32);
  }
  while (v16);
  if (a4 && (_DWORD)v15 != (_DWORD)a5)
  {
    if ((*(_BYTE *)(a3 + 48) & 0x80) != 0)
    {
      v53 = *(_DWORD *)(a2 + 76);
      v54 = *(_QWORD *)a1;
      v19 = a3 + 16;
      do
      {
        v20 = *(_QWORD *)v19;
        v21 = *(_WORD *)(*(_QWORD *)v19 + 99) & 3;
        v19 = *(_QWORD *)v19 + 40;
      }
      while (v21 != 2);
      v22 = *(unsigned __int16 *)(v20 + 94);
      v23 = *(_DWORD *)(a1 + 56);
      v24 = (v23 + 1);
      *(_DWORD *)(a1 + 56) = v23 + v22;
      if ((_DWORD)v22)
      {
        for (i = 0; i != v22; ++i)
        {
          if (*(_WORD *)(a4 + 96))
          {
            v27 = 0;
            while (*(unsigned __int16 *)(*(_QWORD *)(a4 + 8) + 2 * v27) != *(unsigned __int16 *)(*(_QWORD *)(v20 + 8)
                                                                                                + 2 * i))
            {
              if (*(unsigned __int16 *)(a4 + 96) == ++v27)
                goto LABEL_20;
            }
          }
          else
          {
LABEL_20:
            LOWORD(v27) = -1;
          }
          v28 = (__int16)v27;
          v29 = (v24 + i);
          v30 = *(_DWORD *)(v13 + 144);
          if (*(_DWORD *)(v13 + 148) > v30)
          {
            *(_DWORD *)(v13 + 144) = v30 + 1;
            v26 = *(_QWORD *)(v13 + 136) + 40 * v30;
            *(_DWORD *)v26 = 94;
            *(_DWORD *)(v26 + 4) = a5;
            *(_DWORD *)(v26 + 8) = v28;
            *(_DWORD *)(v26 + 12) = v29;
            *(_QWORD *)(v26 + 24) = 0;
            *(_QWORD *)(v26 + 32) = 0;
            *(_QWORD *)(v26 + 16) = 0;
          }
          else
          {
            sub_1ACBFF5AC(v13, 94, a5, v28, v29, a6, a7, a8);
          }
        }
      }
      v31 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v31)
      {
        v31 = sub_1ACBFF7F0(v13, 29, v53, 0, v24, v22, a7, a8);
      }
      else
      {
        *(_DWORD *)(v13 + 144) = v31 + 1;
        v32 = *(_QWORD *)(v13 + 136) + 40 * v31;
        *(_DWORD *)v32 = 64797;
        *(_QWORD *)(v32 + 4) = v53;
        *(_DWORD *)(v32 + 12) = v24;
        *(_DWORD *)(v32 + 16) = v22;
        *(_QWORD *)(v32 + 24) = 0;
        *(_QWORD *)(v32 + 32) = 0;
      }
      v14 = v54;
      v12 = a1;
      sub_1ACBA86CC((uint64_t *)v13, 70, 11, 2, 0, (uint64_t)"corrupt database", 0xFFFFFFFFLL, a8);
      v33 = *(_QWORD *)(a1 + 168);
      if (!v33)
        v33 = a1;
      *(_BYTE *)(v33 + 33) = 1;
      if (*(_BYTE *)(*(_QWORD *)v13 + 103))
        v34 = &byte_1EECAD280;
      else
        v34 = (char *)(*(_QWORD *)(v13 + 136) + 40 * v31);
      *((_DWORD *)v34 + 2) = *(_DWORD *)(v13 + 144);
    }
    else
    {
      if (*(_BYTE *)(a1 + 31))
      {
        v17 = *(_BYTE *)(a1 + 31) - 1;
        *(_BYTE *)(a1 + 31) = v17;
        v18 = *(unsigned int *)(a1 + 4 * v17 + 224);
      }
      else
      {
        v18 = (*(_DWORD *)(a1 + 56) + 1);
        *(_DWORD *)(a1 + 56) = v18;
      }
      v35 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v35)
      {
        sub_1ACBFF5AC(v13, 142, a5, v18, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v13 + 144) = v35 + 1;
        v36 = *(_QWORD *)(v13 + 136) + 40 * v35;
        *(_DWORD *)v36 = 142;
        *(_DWORD *)(v36 + 4) = a5;
        *(_DWORD *)(v36 + 8) = v18;
        *(_QWORD *)(v36 + 12) = 0;
        *(_QWORD *)(v36 + 28) = 0;
        *(_QWORD *)(v36 + 20) = 0;
        *(_DWORD *)(v36 + 36) = 0;
      }
      v37 = *(_DWORD *)(v13 + 144);
      if (*(_DWORD *)(v13 + 148) <= v37)
      {
        sub_1ACBFF5AC(v13, 30, v15, 0, v18, a6, a7, a8);
        if (!(_DWORD)v18)
          goto LABEL_42;
      }
      else
      {
        *(_DWORD *)(v13 + 144) = v37 + 1;
        v38 = *(_QWORD *)(v13 + 136) + 40 * v37;
        *(_DWORD *)v38 = 30;
        *(_DWORD *)(v38 + 4) = v15;
        *(_DWORD *)(v38 + 8) = 0;
        *(_DWORD *)(v38 + 12) = v18;
        *(_QWORD *)(v38 + 24) = 0;
        *(_QWORD *)(v38 + 32) = 0;
        *(_QWORD *)(v38 + 16) = 0;
        if (!(_DWORD)v18)
          goto LABEL_42;
      }
      v39 = *(unsigned __int8 *)(v12 + 31);
      if (v39 <= 7)
      {
        *(_BYTE *)(v12 + 31) = v39 + 1;
        *(_DWORD *)(v12 + 4 * v39 + 224) = v18;
      }
    }
  }
LABEL_42:
  v40 = v14;
  v56 = sub_1ACB8E1EC(v14, *(int **)(a2 + 64), 0);
  if (*(__int16 *)(a3 + 54) >= 1)
  {
    v44 = 0;
    v45 = 9;
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(a3 + 8) + v45) == 69)
      {
        v47 = v44 + *(unsigned int *)(a2 + 72);
        v48 = *(_DWORD *)(v13 + 144);
        if (*(_DWORD *)(v13 + 148) > v48)
        {
          *(_DWORD *)(v13 + 144) = v48 + 1;
          v46 = *(_QWORD *)(v13 + 136) + 40 * v48;
          *(_DWORD *)v46 = 87;
          *(_DWORD *)(v46 + 4) = v47;
          *(_OWORD *)(v46 + 8) = 0u;
          *(_OWORD *)(v46 + 24) = 0u;
        }
        else
        {
          sub_1ACBFF5AC(v13, 87, v47, 0, 0, v41, v42, v43);
        }
      }
      ++v44;
      v45 += 16;
    }
    while (v44 < *(__int16 *)(a3 + 54));
  }
  v49 = (unsigned int *)sub_1ACB8B6B8(v40, *(_QWORD **)(v16 + 16), 0);
  v50 = *(unsigned __int8 **)(v16 + 24);
  if (v50)
    v51 = sub_1ACB8B290(v40, v50, 0, 0);
  else
    v51 = 0;
  return sub_1ACBA880C(v12, (uint64_t)v56, v49, (uint64_t)v51, 2, 0, 0, v16);
}

uint64_t sub_1ACC33E98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t result;
  int v18;
  BOOL v19;
  int v20;
  uint64_t v21;

  v12 = *(_QWORD *)(a1 + 16);
  if (*(_BYTE *)(a1 + 31))
  {
    v13 = *(_BYTE *)(a1 + 31) - 1;
    *(_BYTE *)(a1 + 31) = v13;
    v14 = *(unsigned int *)(a1 + 4 * v13 + 224);
  }
  else
  {
    v14 = (*(_DWORD *)(a1 + 56) + 1);
    *(_DWORD *)(a1 + 56) = v14;
  }
  v15 = *(_DWORD *)(v12 + 144);
  if (*(_DWORD *)(v12 + 148) <= v15)
  {
    sub_1ACBFF5AC(v12, 71, 0, v14, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(v12 + 144) = v15 + 1;
    v16 = *(_QWORD *)(v12 + 136) + 40 * v15;
    *(_QWORD *)v16 = 71;
    *(_DWORD *)(v16 + 8) = v14;
    *(_QWORD *)(v16 + 12) = 0;
    *(_QWORD *)(v16 + 28) = 0;
    *(_QWORD *)(v16 + 20) = 0;
    *(_DWORD *)(v16 + 36) = 0;
  }
  result = sub_1ACBA86CC((uint64_t *)v12, 128, a3, a4, v14, a2, 4294967291, a8);
  v18 = *(_DWORD *)(v12 + 144);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v20 < 0 == v19)
    *(_WORD *)(*(_QWORD *)(v12 + 136) + 40 * v20 + 2) = 64;
  if ((_DWORD)v14)
  {
    v21 = *(unsigned __int8 *)(a1 + 31);
    if (v21 <= 7)
    {
      *(_BYTE *)(a1 + 31) = v21 + 1;
      *(_DWORD *)(a1 + 4 * v21 + 224) = v14;
    }
  }
  return result;
}

uint64_t sub_1ACC33FB8(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  if ((*(_BYTE *)(a3 + 48) & 8) == 0)
    return 0;
  v4 = *(_QWORD *)a1;
  if ((*(_BYTE *)(v4 + 44) & 4) != 0)
    return 0;
  if (*(_QWORD *)(a1 + 168))
    v6 = *(_QWORD *)(a1 + 168);
  else
    v6 = a1;
  v7 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v4 + 32) + 32 * a2 + 24) + 104);
  if (!v7 || (*(_BYTE *)(v7 + 48) & 0x80) != 0 || *(_BYTE *)(v7 + 63) == 1 || *(_WORD *)(v7 + 54) != 2)
  {
    result = 0;
    ++*(_DWORD *)(a1 + 48);
    *(_DWORD *)(a1 + 24) = 523;
    return result;
  }
  v9 = (uint64_t **)(v6 + 160);
  while (1)
  {
    v9 = (uint64_t **)*v9;
    if (!v9)
      break;
    if (v9[1] == (uint64_t *)a3)
      return *((unsigned int *)v9 + 5);
  }
  v11 = sub_1ACBE1124(v4, 0x18uLL);
  sub_1ACC0C1E8((uint64_t *)v6, (void (*)(uint64_t, uint64_t))sub_1ACB7EA34, v11);
  if (*(_BYTE *)(*(_QWORD *)a1 + 103))
    return 0;
  v12 = *(_QWORD *)(v6 + 160);
  *(_QWORD *)(v6 + 160) = v11;
  *(_QWORD *)v11 = v12;
  *(_QWORD *)(v11 + 8) = a3;
  LODWORD(v12) = *(_DWORD *)(v6 + 56);
  result = (v12 + 2);
  *(_DWORD *)(v11 + 16) = a2;
  *(_DWORD *)(v11 + 20) = result;
  *(_DWORD *)(v6 + 56) = v12 + 4;
  return result;
}

uint64_t sub_1ACC340D4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *i;
  uint64_t v14;
  char *v15;
  int v16;
  int v17;
  uint64_t v18;

  v9 = a2;
  v11 = a1[2];
  if (!v11)
  {
    if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
      *((_BYTE *)a1 + 35) = 1;
    v11 = sub_1ACBCB4C8(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  v12 = *(unsigned int *)(v11 + 144);
  if (*(_BYTE *)(a3 + 63) == 1)
  {
    for (i = *(_QWORD **)(a3 + 80); i; i = (_QWORD *)i[5])
    {
      if (*i == *a1)
        break;
    }
    if ((int)v12 < 2)
      return 0;
  }
  else
  {
    i = 0;
    if ((int)v12 < 2)
      return 0;
  }
  v14 = 1;
  while (1)
  {
    v15 = &byte_1EECAD280;
    if (!*(_BYTE *)(*(_QWORD *)v11 + 103))
      v15 = (char *)(*(_QWORD *)(v11 + 136) + 40 * v14);
    v16 = *v15;
    if (v16 == 173)
    {
      if (*((_QWORD **)v15 + 2) == i)
        return 1;
      goto LABEL_15;
    }
    if (v16 == 112 && *((_DWORD *)v15 + 3) == v9)
    {
      v17 = *((_DWORD *)v15 + 2);
      if (v17 == *(_DWORD *)(a3 + 40))
        return 1;
      v18 = *(_QWORD *)(a3 + 16);
      if (v18)
        break;
    }
LABEL_15:
    if (++v14 == v12)
      return 0;
  }
  while (v17 != *(_DWORD *)(v18 + 88))
  {
    v18 = *(_QWORD *)(v18 + 40);
    if (!v18)
      goto LABEL_15;
  }
  return 1;
}

uint64_t sub_1ACC34214(uint64_t a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  int i;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned __int8 *v27;
  uint64_t v28;
  unsigned __int8 **v29;
  int v31;
  _QWORD v33[2];
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  char v37[16];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  _BYTE v43[32];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v34 = 0u;
  v35 = 0u;
  v36 = 0;
  v33[0] = a1;
  v33[1] = a2;
  if (!a3)
    return 0;
  v8 = a3;
  for (i = 0; ; ++i)
  {
    if (!*(_QWORD *)v8)
      return 0;
    result = sub_1ACC0F8AC((uint64_t)v33, *(int **)v8, (uint64_t)a3, a4, a5, a6, a7, a8);
    if ((_DWORD)result)
      return result;
    if (sub_1ACC0F790((uint64_t)v33, *((_QWORD *)v8 + 1), v11, v12, v13, v14, v15, v16))
      return 1;
    v17 = *(_QWORD *)(a2 + 40);
    v18 = *(int **)v8;
    v19 = *(unsigned int *)(a2 + 72);
    if ((*(_BYTE *)(v17 + 48) & 0x80) != 0
      || *v18 != 1
      || (v20 = (unsigned __int8 *)*((_QWORD *)v18 + 1), *v20 != 167)
      || *((_DWORD *)v20 + 12) != -1)
    {
      v31 = i;
      v38 = 0u;
      v45 = 0u;
      v46 = 0u;
      v44 = 0u;
      v42 = 0u;
      memset(v43, 0, sizeof(v43));
      v40 = 0u;
      v41 = 0u;
      LOBYTE(v38) = 113;
      v39 = (unint64_t)v43;
      v43[0] = -89;
      HIDWORD(v44) = v19;
      v21 = *(_QWORD *)(v17 + 16);
      if (v21)
      {
        while (1)
        {
          if (*(_BYTE *)(v21 + 98))
          {
            v22 = *(unsigned __int16 *)(v21 + 94);
            if (*v18 == v22)
            {
              a3 = *(unsigned __int8 **)(v21 + 72);
              if (!a3)
                goto LABEL_19;
              v23 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
              if (v23)
              {
                if (!sub_1ACC0ABAC(a1, v23, a3, v19))
                  break;
              }
            }
          }
LABEL_12:
          v21 = *(_QWORD *)(v21 + 40);
          if (!v21)
            goto LABEL_32;
        }
        v22 = *(unsigned __int16 *)(v21 + 94);
LABEL_19:
        if (v22)
        {
          v24 = 0;
          v25 = v22;
          do
          {
            *((_QWORD *)&v38 + 1) = *(_QWORD *)(*(_QWORD *)(v21 + 64) + 8 * v24);
            v26 = *(__int16 *)(*(_QWORD *)(v21 + 8) + 2 * v24);
            if (v26 == -2)
            {
              v27 = *(unsigned __int8 **)(*(_QWORD *)(v21 + 80) + 24 * v24 + 8);
              if (*v27 == 113)
                goto LABEL_26;
              *(_QWORD *)&v39 = *(_QWORD *)(*(_QWORD *)(v21 + 80) + 24 * v24 + 8);
            }
            else
            {
              *(_QWORD *)&v39 = v43;
              LODWORD(v45) = v26;
            }
            v27 = (unsigned __int8 *)&v38;
LABEL_26:
            v28 = v25;
            v29 = (unsigned __int8 **)(v18 + 2);
            while (sub_1ACC0ABAC(0, *v29, v27, v19) > 1)
            {
              v29 += 3;
              if (!--v28)
                goto LABEL_12;
            }
            ++v24;
          }
          while (v24 != v25);
        }
        *((_QWORD *)v8 + 7) = v21;
      }
LABEL_32:
      i = v31;
      if (!*((_QWORD *)v8 + 7))
        break;
    }
    v8 = (unsigned __int8 *)*((_QWORD *)v8 + 4);
    if (!v8)
      return 0;
  }
  if (v31 || *((_QWORD *)v8 + 4))
    sqlite3_snprintf(16, v37, "%r ", (v31 + 1));
  else
    v37[0] = 0;
  sub_1ACBCB308(a1, "%sON CONFLICT clause does not match any PRIMARY KEY or UNIQUE constraint", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v37);
  return 1;
}

uint64_t sub_1ACC344BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;

  if ((int)a2 >= 1)
  {
    result = *(_QWORD *)(result + 16);
    v8 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v8)
    {
      return sub_1ACBFF5AC(result, 159, a2, a3, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(result + 144) = v8 + 1;
      v9 = *(_QWORD *)(result + 136) + 40 * v8;
      *(_DWORD *)v9 = 159;
      *(_DWORD *)(v9 + 4) = a2;
      *(_DWORD *)(v9 + 8) = a3;
      *(_QWORD *)(v9 + 12) = 0;
      *(_QWORD *)(v9 + 28) = 0;
      *(_QWORD *)(v9 + 20) = 0;
      *(_DWORD *)(v9 + 36) = 0;
    }
  }
  return result;
}

BOOL sub_1ACC34520(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned __int16 *)(a1 + 94) == *(unsigned __int16 *)(a2 + 94)
    && *(unsigned __int16 *)(a1 + 96) == *(unsigned __int16 *)(a2 + 96)
    && *(unsigned __int8 *)(a1 + 98) == *(unsigned __int8 *)(a2 + 98))
  {
    if (!*(_WORD *)(a1 + 94))
      return sub_1ACC0ABAC(0, *(unsigned __int8 **)(a2 + 72), *(unsigned __int8 **)(a1 + 72), 0xFFFFFFFFLL) == 0;
    v4 = 0;
    while (1)
    {
      v5 = *(unsigned __int16 *)(*(_QWORD *)(a2 + 8) + 2 * v4);
      if (v5 != *(unsigned __int16 *)(*(_QWORD *)(a1 + 8) + 2 * v4)
        || v5 == 65534
        && sub_1ACC0ABAC(0, *(unsigned __int8 **)(*(_QWORD *)(a2 + 80) + 24 * v4 + 8), *(unsigned __int8 **)(*(_QWORD *)(a1 + 80) + 24 * v4 + 8), 0xFFFFFFFFLL))
      {
        break;
      }
      if (*(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v4) != *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v4))
        break;
      v6 = *(_BYTE **)(*(_QWORD *)(a2 + 64) + 8 * v4);
      v7 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 64) + 8 * v4);
      if (v6)
      {
        if (v7)
        {
          while (1)
          {
            v8 = *v6;
            v9 = *v7;
            if ((_DWORD)v8 == (_DWORD)v9)
            {
              if (!*v6)
                goto LABEL_19;
            }
            else if (byte_1ACCB6333[v8] != byte_1ACCB6333[v9])
            {
              return 0;
            }
            ++v6;
            ++v7;
          }
        }
        return 0;
      }
      if (v7)
        return 0;
LABEL_19:
      if (++v4 >= (unint64_t)*(unsigned __int16 *)(a2 + 94))
        return sub_1ACC0ABAC(0, *(unsigned __int8 **)(a2 + 72), *(unsigned __int8 **)(a1 + 72), 0xFFFFFFFFLL) == 0;
    }
  }
  return 0;
}

uint64_t *sub_1ACC34688(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  if (a2)
  {
    v8 = (uint64_t)result;
    result = (uint64_t *)sub_1ACBA86CC(result, 117, 0, 1, 0, a2, 0, a8);
    v12 = *(_DWORD *)(v8 + 144);
    if (*(_DWORD *)(v8 + 148) <= v12)
    {
      return (uint64_t *)sub_1ACBFF5AC(v8, 84, 1, 1, 0, v9, v10, v11);
    }
    else
    {
      *(_DWORD *)(v8 + 144) = v12 + 1;
      v13 = *(_QWORD *)(v8 + 136) + 40 * v12;
      *(_DWORD *)v13 = 84;
      *(_QWORD *)(v13 + 4) = 0x100000001;
      *(_QWORD *)(v13 + 12) = 0;
      *(_QWORD *)(v13 + 28) = 0;
      *(_QWORD *)(v13 + 20) = 0;
      *(_DWORD *)(v13 + 36) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACC34728(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char **v10;

  v4 = *(unsigned __int8 *)(a2 + 11);
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = *(unsigned __int8 *)(a2 + 11);
  result = sub_1ACB7E2D4((uint64_t)a1, v5);
  if (v4)
  {
    v7 = 0;
    v8 = *(unsigned __int8 *)(a2 + 10);
    v9 = v4 << 6;
    v10 = &off_1E5C74290[v8];
    do
    {
      if (!*(_BYTE *)(*a1 + 103))
        result = sub_1ACB57870(a1[19] + v7, *v10, -1, 1u, 0);
      v7 += 64;
      ++v10;
    }
    while (v9 != v7);
  }
  else if (!*(_BYTE *)(*a1 + 103))
  {
    return sub_1ACB57870(a1[19], *(char **)a2, -1, 1u, 0);
  }
  return result;
}

uint64_t sub_1ACC347EC(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v4 = (_QWORD *)sub_1ACBE1124(*(_QWORD *)a1, 8uLL);
  if (v4)
    *v4 = a2;
  result = sub_1ACBA86CC((uint64_t *)a1, 72, 0, 1, 0, (uint64_t)v4, 4294967283, v5);
  v10 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v10)
    return sub_1ACBFF5AC(a1, 84, 1, 1, 0, v7, v8, v9);
  *(_DWORD *)(a1 + 144) = v10 + 1;
  v11 = *(_QWORD *)(a1 + 136) + 40 * v10;
  *(_DWORD *)v11 = 84;
  *(_QWORD *)(v11 + 4) = 0x100000001;
  *(_QWORD *)(v11 + 12) = 0;
  *(_QWORD *)(v11 + 28) = 0;
  *(_QWORD *)(v11 + 20) = 0;
  *(_DWORD *)(v11 + 36) = 0;
  return result;
}

uint64_t sub_1ACC348A4(uint64_t a1, int a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;

  if (!a1)
    return 0;
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(unsigned __int16 *)(v4 + 40);
  if ((a2 & 0x80000000) == 0)
  {
    v5 = v5 & 0xFFFFFFF3 | (4 * a2);
    *(_WORD *)(v4 + 40) = v5;
  }
  v6 = (v5 >> 2) & 3;
  if (*(_BYTE *)(a1 + 17))
  {
    v7 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v7;
    if (!v7)
      sub_1ACBED048(a1);
  }
  return v6;
}

uint64_t sub_1ACC34934(_BYTE *a1)
{
  const char *v1;
  _BYTE *i;
  uint64_t v3;
  uint64_t v4;
  const char *j;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v1 = "exclusive";
    for (i = a1; ; ++i)
    {
      v3 = *i;
      v4 = *(unsigned __int8 *)v1;
      if ((_DWORD)v3 == (_DWORD)v4)
      {
        if (!*i)
          return 1;
      }
      else if (byte_1ACCB6333[v3] != byte_1ACCB6333[v4])
      {
        for (j = "normal"; ; ++j)
        {
          v7 = *a1;
          v8 = *(unsigned __int8 *)j;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*a1)
              return 0;
          }
          else if (byte_1ACCB6333[v7] != byte_1ACCB6333[v8])
          {
            return 0xFFFFFFFFLL;
          }
          ++a1;
        }
      }
      ++v1;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1ACC349CC(unsigned __int8 *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v3;
  uint64_t j;
  uint64_t v6;
  uint64_t v7;
  uint64_t k;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;

  for (i = 0; ; ++i)
  {
    v2 = a1[i];
    v3 = aNone[i];
    if ((_DWORD)v2 != (_DWORD)v3)
      break;
    if (!a1[i])
      return 0;
LABEL_3:
    ;
  }
  if (byte_1ACCB6333[v2] == byte_1ACCB6333[v3])
    goto LABEL_3;
  for (j = 0; ; ++j)
  {
    v6 = a1[j];
    v7 = aFull[j];
    if ((_DWORD)v6 != (_DWORD)v7)
      break;
    if (!a1[j])
      return 1;
LABEL_9:
    ;
  }
  if (byte_1ACCB6333[v6] == byte_1ACCB6333[v7])
    goto LABEL_9;
  for (k = 0; ; ++k)
  {
    v9 = a1[k];
    v10 = aIncremental[k];
    if ((_DWORD)v9 != (_DWORD)v10)
      break;
    if (!a1[k])
      return 2;
LABEL_15:
    ;
  }
  if (byte_1ACCB6333[v9] == byte_1ACCB6333[v10])
    goto LABEL_15;
  v11 = 0;
  sub_1ACBFD07C(a1, &v11);
  if (v11 >= 3)
    return 0;
  else
    return v11;
}

uint64_t sub_1ACC34AC8(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  _BYTE *v4;

  if (*(_BYTE *)(result + 101))
  {
    v1 = result;
    v2 = *(_DWORD *)(result + 40);
    if (v2 >= 1)
    {
      v3 = v2 + 1;
      v4 = (_BYTE *)(*(_QWORD *)(result + 32) + 16);
      do
      {
        result = *((_QWORD *)v4 - 1);
        if (result)
          result = sub_1ACBFE584(result, *(_DWORD *)(v1 + 48) & 0x38 | *v4 & 7u);
        --v3;
        v4 += 32;
      }
      while (v3 > 1);
    }
  }
  return result;
}

uint64_t *sub_1ACC34B40(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t *result;
  uint64_t v7;
  void *v8;
  int v9;
  uint64_t v10;

  v4 = *(uint64_t **)(a1 + 8);
  if (*(_BYTE *)(a1 + 17))
  {
    ++*(_DWORD *)(a1 + 20);
    if (!*(_BYTE *)(a1 + 18))
      sub_1ACBECF6C(a1);
  }
  v5 = *v4;
  *(_QWORD *)(v5 + 160) = a2;
  result = *(uint64_t **)(v5 + 72);
  v7 = *result;
  if (*result && *(int *)v7 >= 3)
  {
    v10 = a2;
    *(_BYTE *)(v5 + 27) = a2 > 0;
    if (*(_DWORD *)(v5 + 48))
    {
      v8 = sub_1ACBEBC4C;
    }
    else if (a2 < 1 || *(_QWORD *)(v5 + 296))
    {
      v8 = sub_1ACBEBEA8;
    }
    else
    {
      v8 = sub_1ACBEBC58;
    }
    *(_QWORD *)(v5 + 288) = v8;
    result = (uint64_t *)(*(uint64_t (**)(void))(v7 + 80))();
  }
  if (*(_BYTE *)(a1 + 17))
  {
    v9 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v9;
    if (!v9)
      return (uint64_t *)sub_1ACBED048(a1);
  }
  return result;
}

void sub_1ACC34C34(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, char a10)
{
  int v10;
  int v11;
  unsigned __int8 *v12;
  const char *v13;
  int i;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  const char *j;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v10 = *a2;
  v11 = v10 - 48;
  if ((v10 - 48) >= 3)
  {
    v12 = a2 + 1;
    v13 = "file";
    for (i = *a2; ; i = v15)
    {
      v16 = *(unsigned __int8 *)v13;
      if (i == (_DWORD)v16)
      {
        if (!i)
        {
          v11 = 1;
          break;
        }
      }
      else if (byte_1ACCB6333[i] != byte_1ACCB6333[v16])
      {
        v17 = a2 + 1;
        for (j = "memory"; ; ++j)
        {
          v20 = *(unsigned __int8 *)j;
          if (v10 == (_DWORD)v20)
          {
            if (!v10)
            {
              v11 = 2;
              goto LABEL_15;
            }
          }
          else if (byte_1ACCB6333[v10] != byte_1ACCB6333[v20])
          {
            v11 = 0;
            goto LABEL_15;
          }
          v19 = *v17++;
          v10 = v19;
        }
      }
      ++v13;
      v15 = *v12++;
    }
  }
LABEL_15:
  v21 = *(_QWORD *)a1;
  if (v11 != *(unsigned __int8 *)(*(_QWORD *)a1 + 102))
  {
    v22 = *(_QWORD *)(*(_QWORD *)(v21 + 32) + 40);
    if (v22)
    {
      if (!*(_BYTE *)(v21 + 101) || *(_BYTE *)(v22 + 16))
      {
        sub_1ACBCB308(a1, "temporary storage cannot be changed from within a transaction", a3, a4, a5, a6, a7, a8, a10);
        return;
      }
      sub_1ACBA3F80(*(_QWORD *)(*(_QWORD *)(v21 + 32) + 40), a9);
      *(_QWORD *)(*(_QWORD *)(v21 + 32) + 40) = 0;
      sub_1ACBC4F54(v21);
    }
    *(_BYTE *)(v21 + 102) = v11;
  }
}

void sub_1ACC34D48(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v10;
  uint64_t v11;

  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 40);
  if (v11)
  {
    if (*(_BYTE *)(v10 + 101) && !*(_BYTE *)(v11 + 16))
    {
      sub_1ACBA3F80(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 40), a2);
      *(_QWORD *)(*(_QWORD *)(v10 + 32) + 40) = 0;
      sub_1ACBC4F54(v10);
    }
    else
    {
      sub_1ACBCB308(a1, "temporary storage cannot be changed from within a transaction", a4, a5, a6, a7, a8, a9, a10);
    }
  }
}

uint64_t sub_1ACC34DB4(char *__s, int a2, unsigned __int8 a3)
{
  int v6;
  unint64_t v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  char v15;
  int v17;

  if ((unint64_t)*__s - 58 >= 0xFFFFFFFFFFFFFFF6)
  {
    v17 = 0;
    sub_1ACBFD07C((unsigned __int8 *)__s, &v17);
    return v17;
  }
  v6 = strlen(__s);
  v7 = 0;
  v8 = v6 & 0x3FFFFFFF;
  while (1)
  {
    if (v8 != byte_1ACCBA447[v7])
      goto LABEL_3;
    if (v8)
      break;
LABEL_10:
    if (!a2 || v7 <= 5)
      return byte_1ACCBA44F[v7];
LABEL_3:
    if (++v7 == 8)
      return a3;
  }
  v9 = &aOnoffalseyestr[byte_1ACCBA43F[v7]];
  v10 = v8 + 1;
  v11 = __s;
  while (1)
  {
    v12 = *v9;
    if (!*v9)
      break;
    LODWORD(v12) = byte_1ACCB6333[v12];
    v13 = byte_1ACCB6333[*v11];
    if ((_DWORD)v12 != v13)
      goto LABEL_14;
    ++v9;
    ++v11;
    if (--v10 <= 1)
      goto LABEL_10;
  }
  v13 = byte_1ACCB6333[*v11];
LABEL_14:
  if (a2)
    v14 = v7 >= 6;
  else
    v14 = 0;
  v15 = !v14;
  if ((_DWORD)v12 != v13 || (v15 & 1) == 0)
    goto LABEL_3;
  return byte_1ACCBA44F[v7];
}

uint64_t sub_1ACC34EE4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;

  v11 = result;
  v12 = 0;
  v24 = &a9;
  for (i = a2;
        ;
        result = sub_1ACBA86CC((uint64_t *)v11, v16, 0, (i + v12++), 0, *v15, 0, a8))
  {
    while (1)
    {
      v14 = *(unsigned __int8 *)(a3 + v12);
      if (v14 != 105)
        break;
      v17 = v24++;
      v18 = *(unsigned int *)v17;
      v19 = i + v12;
      v20 = *(_DWORD *)(v11 + 144);
      if (*(_DWORD *)(v11 + 148) <= v20)
      {
        result = sub_1ACBFF5AC(v11, 71, v18, v19, 0, a6, a7, a8);
      }
      else
      {
        *(_DWORD *)(v11 + 144) = v20 + 1;
        v21 = *(_QWORD *)(v11 + 136) + 40 * v20;
        *(_DWORD *)v21 = 71;
        *(_DWORD *)(v21 + 4) = v18;
        *(_DWORD *)(v21 + 8) = v19;
        *(_QWORD *)(v21 + 12) = 0;
        *(_QWORD *)(v21 + 28) = 0;
        *(_QWORD *)(v21 + 20) = 0;
        *(_DWORD *)(v21 + 36) = 0;
      }
      ++v12;
    }
    if (v14 != 115)
      break;
    v15 = v24++;
    if (*v15)
      v16 = 117;
    else
      v16 = 75;
  }
  if (!*(_BYTE *)(a3 + v12))
  {
    v22 = *(_DWORD *)(v11 + 144);
    if (*(_DWORD *)(v11 + 148) <= v22)
    {
      return sub_1ACBFF5AC(v11, 84, a2, v12, 0, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(v11 + 144) = v22 + 1;
      v23 = *(_QWORD *)(v11 + 136) + 40 * v22;
      *(_DWORD *)v23 = 84;
      *(_DWORD *)(v23 + 4) = i;
      *(_DWORD *)(v23 + 8) = v12;
      *(_QWORD *)(v23 + 12) = 0;
      *(_QWORD *)(v23 + 28) = 0;
      *(_QWORD *)(v23 + 20) = 0;
      *(_DWORD *)(v23 + 36) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACC35068(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v9;
  uint64_t v10;

  if (a2)
  {
    v8 = a4;
    v9 = a2;
    v10 = result;
    do
    {
      if (*(_QWORD *)(v9 + 24) && (v8 || (*(_DWORD *)(v9 + 4) & 0x40000) == 0))
        result = sub_1ACC34EE4(v10, 1, (uint64_t)"sissii", a4, a5, a6, a7, a8, *(_QWORD *)(v9 + 56));
      v9 = *(_QWORD *)(v9 + 16);
    }
    while (v9);
  }
  return result;
}

_BYTE *sub_1ACC35168(uint64_t a1, int a2)
{
  void *v3;
  int v4;
  _BYTE *v5;
  _BYTE *result;

  if (a2)
    v3 = &unk_1ACCBA457;
  else
    v3 = &unk_1ACCB6544;
  if (a2)
    v4 = 12;
  else
    v4 = 4;
  sub_1ACB5B6C0(a1, "like", 2, 1, (uint64_t)v3, (uint64_t)sub_1ACBADB40, 0, 0, 0, 0, 0);
  v5 = sub_1ACB5B284(a1, "like", 2, 1u, 0);
  *((_DWORD *)v5 + 1) = *((_DWORD *)v5 + 1) & 0xFFDFFFFF | v4;
  sub_1ACB5B6C0(a1, "like", 3, 1, (uint64_t)v3, (uint64_t)sub_1ACBADB40, 0, 0, 0, 0, 0);
  result = sub_1ACB5B284(a1, "like", 3, 1u, 0);
  *((_DWORD *)result + 1) = *((_DWORD *)result + 1) & 0xFFDFFFFF | v4;
  return result;
}

uint64_t sub_1ACC35274(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v9 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v9)
  {
    sub_1ACBFF5AC(a1, 84, 3, 1, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(a1 + 144) = v9 + 1;
    v10 = *(_QWORD *)(a1 + 136) + 40 * v9;
    *(_DWORD *)v10 = 84;
    *(_QWORD *)(v10 + 4) = 0x100000003;
    *(_QWORD *)(v10 + 12) = 0;
    *(_QWORD *)(v10 + 28) = 0;
    *(_QWORD *)(v10 + 20) = 0;
    *(_DWORD *)(v10 + 36) = 0;
  }
  v11 = *(unsigned int *)(a1 + 144);
  v12 = (v11 + 2);
  if (*(_DWORD *)(a1 + 148) <= (int)v11)
  {
    v11 = sub_1ACBFF5AC(a1, 59, 1, v12, 1, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(a1 + 144) = v11 + 1;
    v13 = *(_QWORD *)(a1 + 136) + 40 * (int)v11;
    *(_QWORD *)v13 = 0x10000003BLL;
    *(_DWORD *)(v13 + 8) = v12;
    *(_DWORD *)(v13 + 12) = 1;
    *(_QWORD *)(v13 + 24) = 0;
    *(_QWORD *)(v13 + 32) = 0;
    *(_QWORD *)(v13 + 16) = 0;
  }
  v14 = *(_DWORD *)(a1 + 144);
  if (*(_DWORD *)(a1 + 148) <= v14)
  {
    sub_1ACBFF5AC(a1, 70, 0, 0, 0, a6, a7, a8);
  }
  else
  {
    *(_DWORD *)(a1 + 144) = v14 + 1;
    v15 = *(_QWORD *)(a1 + 136) + 40 * v14;
    *(_BYTE *)v15 = 70;
    *(_OWORD *)(v15 + 1) = 0u;
    *(_OWORD *)(v15 + 17) = 0u;
    *(_QWORD *)(v15 + 32) = 0;
  }
  return v11;
}

void sub_1ACC353B0(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  _OWORD *v19;
  uint64_t j;
  uint64_t k;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  char *m;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char *v32;
  int v33;
  int v34;
  unint64_t v35;
  uint64_t i;
  uint64_t v37;
  uint64_t v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  void *v67;
  char v68;
  void (**v69)(char *);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  int v83;
  int v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  __int16 v89;
  int v90;
  int v91;
  uint64_t v92;
  uint64_t jj;
  char *v94;
  char *v95;
  uint64_t v96;
  unsigned __int8 *v97;
  int v98;
  int v99;
  uint64_t v100;
  _BYTE *v101;
  int v102;
  char *n;
  uint64_t (**v104)(char *);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t ii;
  char v119;
  _BYTE *v120;
  char v121;
  char v122;
  uint64_t v123;
  int v124[2];
  char *v125;
  unsigned int v126;
  char *v127;
  char *__s;

  if (a1 && *(_QWORD *)a1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  }
  else
  {
    sub_1ACBBE20C(97935);
    v10 = 0;
  }
  v127 = 0;
  __s = 0;
  v126 = 0;
  *(_QWORD *)v124 = 0;
  v125 = 0;
  v11 = *a3;
  if (*a3)
  {
    v12 = *(unsigned __int16 *)(v11 + 20);
    if ((~v12 & 0x202) == 0 && *(_BYTE *)(v11 + 22) == 1)
    {
      v13 = *(_QWORD *)(v11 + 8);
      v14 = a3[1];
      if (!v14)
        goto LABEL_20;
      goto LABEL_14;
    }
    if ((v12 & 1) == 0)
    {
      v13 = sub_1ACBF2B64((int *)v11, 1);
      v14 = a3[1];
      if (!v14)
        goto LABEL_20;
      goto LABEL_14;
    }
  }
  v13 = 0;
  v14 = a3[1];
  if (!v14)
    goto LABEL_20;
LABEL_14:
  v15 = *(unsigned __int16 *)(v14 + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v15 & 1) != 0)
      v14 = 0;
    else
      v14 = sub_1ACBF2B64((int *)v14, 1);
  }
  else
  {
    v14 = *(_QWORD *)(v14 + 8);
  }
LABEL_20:
  if (v13)
    v16 = (char *)v13;
  else
    v16 = &byte_1ACCBEAEE;
  if (v14)
    v17 = (char *)v14;
  else
    v17 = &byte_1ACCBEAEE;
  if ((*(_BYTE *)(v10 + 198) & 4) != 0)
  {
    v123 = 0;
    if (sqlite3_initialize())
      return;
    if ((_BYTE)word_1ECD3B144)
    {
      v29 = qword_1ECD3B1B0(2);
      v30 = v29;
      if (v29)
      {
        xmmword_1ECD3B1C0(v29);
        v31 = 0;
LABEL_60:
        for (i = qword_1ECD3E928; i; i = *(_QWORD *)(i + 16))
        {
          if (!strcmp("memdb", *(const char **)(i + 24)))
            break;
        }
        if ((v31 & 1) == 0)
          xmmword_1ECD3B1D0(v30);
        *(_QWORD *)v124 = i;
        if (!i)
          return;
        v33 = sub_1ACB57BF0(i, "x", v10, &v123, 0, 0x100u);
        if (v33)
          goto LABEL_201;
        v37 = v123;
        v38 = sub_1ACB5B014(v10, v123);
        if (!v38)
        {
          sub_1ACBA3F80(v37, v39);
          v33 = 7;
          goto LABEL_201;
        }
        v40 = v38;
        v41 = *(_QWORD *)(v10 + 32) + 32 * *(unsigned __int8 *)(v10 + 196);
        v42 = *(_QWORD *)(v41 + 8);
        if (v42)
          sub_1ACBA3F80(v42, v39);
        *(_QWORD *)(v41 + 8) = v37;
        *(_QWORD *)(v41 + 24) = v40;
        *(_BYTE *)(v10 + 111) = 0;
        v120 = (_BYTE *)(v10 + 111);
        goto LABEL_99;
      }
    }
    else
    {
      v30 = 0;
    }
    v31 = 1;
    goto LABEL_60;
  }
  v18 = *(unsigned int *)(v10 + 40);
  if ((int)v18 >= *(_DWORD *)(v10 + 164) + 2)
  {
    v28 = (char *)sub_1ACB6DDD0(v10, "too many attached databases - max %d", (uint64_t)a3, a4, a5, a6, a7, a8, *(_DWORD *)(v10 + 164));
LABEL_50:
    v32 = v28;
    v33 = 0;
    v125 = v28;
    goto LABEL_202;
  }
  v19 = *(_OWORD **)(v10 + 32);
  if ((int)v18 < 1)
    goto LABEL_51;
  for (j = 0; j != v18; ++j)
  {
    for (k = 0; ; ++k)
    {
      v22 = *(unsigned __int8 *)(*(_QWORD *)&v19[2 * j] + k);
      v23 = v17[k];
      if ((_DWORD)v22 != (_DWORD)v23)
        break;
      if (!*(_BYTE *)(*(_QWORD *)&v19[2 * j] + k))
      {
LABEL_44:
        v28 = (char *)sub_1ACB6DDD0(v10, "database %s is already in use", (uint64_t)a3, a4, a5, a6, a7, a8, (char)v17);
        goto LABEL_50;
      }
LABEL_32:
      ;
    }
    if (byte_1ACCB6333[v22] == byte_1ACCB6333[v23])
      goto LABEL_32;
    if (!j)
    {
      v24 = "main";
      for (m = v17; ; ++m)
      {
        v26 = *(unsigned __int8 *)v24;
        v27 = *m;
        if ((_DWORD)v26 == (_DWORD)v27)
        {
          if (!*v24)
            goto LABEL_44;
        }
        else if (byte_1ACCB6333[v26] != byte_1ACCB6333[v27])
        {
          break;
        }
        ++v24;
      }
    }
  }
LABEL_51:
  if (v19 == (_OWORD *)(v10 + 696))
  {
    v43 = (_OWORD *)sub_1ACBE1124(v10, 0x60uLL);
    if (v43)
    {
      v19 = v43;
      v44 = *(__int128 **)(v10 + 32);
      v45 = *v44;
      v46 = v44[1];
      v47 = v44[3];
      v43[2] = v44[2];
      v43[3] = v47;
      *v43 = v45;
      v43[1] = v46;
      goto LABEL_78;
    }
    return;
  }
  v34 = v18 + 1;
  v35 = 32 * v34;
  if (!v19)
  {
    v48 = sub_1ACBE1124(v10, 32 * v34);
    goto LABEL_77;
  }
  if (*(_QWORD *)(v10 + 512) <= (unint64_t)v19)
    goto LABEL_76;
  if (*(_QWORD *)(v10 + 496) <= (unint64_t)v19)
  {
    if (v35 < 0x81)
      goto LABEL_78;
    goto LABEL_76;
  }
  if (*(_QWORD *)(v10 + 504) > (unint64_t)v19 || v35 > *(unsigned __int16 *)(v10 + 438))
  {
LABEL_76:
    v48 = sub_1ACBE11D0(v10, *(_QWORD **)(v10 + 32), v35);
LABEL_77:
    v19 = (_OWORD *)v48;
    if (v48)
      goto LABEL_78;
    return;
  }
LABEL_78:
  *(_QWORD *)(v10 + 32) = v19;
  v49 = *(int *)(v10 + 40);
  v41 = (uint64_t)&v19[2 * v49];
  *(_OWORD *)v41 = 0u;
  *(_OWORD *)(v41 + 16) = 0u;
  v126 = *(_DWORD *)(v10 + 76);
  v50 = sub_1ACC36664(*(const char **)(*(_QWORD *)v10 + 24), v16, &v126, (uint64_t *)v124, (const char **)&__s, &v127);
  if (!v50)
  {
    v121 = (char)v16;
    v126 |= 0x100u;
    v33 = sub_1ACB57BF0(*(uint64_t *)v124, __s, v10, (uint64_t *)(v41 + 8), 0, v126);
    ++*(_DWORD *)(v10 + 40);
    v58 = strlen(v17) + 1;
    v59 = (void *)sub_1ACBE1124(v10, v58);
    v67 = v59;
    if (v59)
      memcpy(v59, v17, v58);
    *(_QWORD *)v41 = v67;
    *(_BYTE *)(v10 + 111) = 0;
    v120 = (_BYTE *)(v10 + 111);
    if (v33)
    {
      v68 = v121;
      if (v33 == 19)
      {
        v125 = (char *)sub_1ACB6DDD0(v10, "database is already attached", v60, v61, v62, v63, v64, v65, v119);
        v33 = 1;
      }
      LOBYTE(v19[2 * v49 + 1]) = 3;
      goto LABEL_167;
    }
    LOBYTE(v16) = v121;
LABEL_99:
    v70 = sub_1ACB5B014(v10, *(_QWORD *)(v41 + 8));
    *(_QWORD *)(v41 + 24) = v70;
    v122 = (char)v16;
    if (v70)
    {
      if (*(_BYTE *)(v70 + 112) && *(unsigned __int8 *)(v70 + 113) != *(unsigned __int8 *)(v10 + 100))
      {
        v77 = 0;
        v125 = (char *)sub_1ACB6DDD0(v10, "attached databases must use the same text encoding as main database", v71, v72, v73, v74, v75, v76, v119);
        v33 = 1;
      }
      else
      {
        v33 = 0;
        v77 = 1;
      }
    }
    else
    {
      v77 = 0;
      v33 = 7;
    }
    v78 = *(_QWORD *)(v41 + 8);
    if (*(_BYTE *)(v78 + 17))
    {
      ++*(_DWORD *)(v78 + 20);
      if (!*(_BYTE *)(v78 + 18))
      {
        sub_1ACBECF6C(v78);
        v78 = *(_QWORD *)(v41 + 8);
      }
    }
    v79 = **(_QWORD **)(v78 + 8);
    if (!*(_BYTE *)(v79 + 16))
    {
      v80 = *(_QWORD *)(v79 + 344);
      if (!v80 || *(_BYTE *)(v80 + 63) != 2)
        *(_BYTE *)(v79 + 8) = *(_BYTE *)(v10 + 105);
    }
    v81 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8);
    if (!v81)
    {
      LOWORD(v82) = 0;
      goto LABEL_121;
    }
    if (!*(_BYTE *)(v81 + 17))
    {
      v82 = (*(unsigned __int16 *)(*(_QWORD *)(v81 + 8) + 40) >> 2) & 3;
      goto LABEL_121;
    }
    ++*(_DWORD *)(v81 + 20);
    if (*(_BYTE *)(v81 + 18))
    {
      v82 = (*(unsigned __int16 *)(*(_QWORD *)(v81 + 8) + 40) >> 2) & 3;
    }
    else
    {
      sub_1ACBECF6C(v81);
      v82 = (*(unsigned __int16 *)(*(_QWORD *)(v81 + 8) + 40) >> 2) & 3;
      if (!*(_BYTE *)(v81 + 17))
        goto LABEL_121;
    }
    v83 = *(_DWORD *)(v81 + 20) - 1;
    *(_DWORD *)(v81 + 20) = v83;
    if (!v83)
      sub_1ACBED048(v81);
LABEL_121:
    v84 = *(unsigned __int8 *)(v78 + 17);
    if (*(_BYTE *)(v78 + 17))
    {
      ++*(_DWORD *)(v78 + 20);
      if (*(_BYTE *)(v78 + 18))
      {
        v84 = 1;
      }
      else
      {
        sub_1ACBECF6C(v78);
        v84 = *(unsigned __int8 *)(v78 + 17);
      }
    }
    *(_WORD *)(*(_QWORD *)(v78 + 8) + 40) = *(_WORD *)(*(_QWORD *)(v78 + 8) + 40) & 0xFFF3 | (4 * v82);
    if (v84)
    {
      v85 = *(_DWORD *)(v78 + 20) - 1;
      *(_DWORD *)(v78 + 20) = v85;
      if (!v85)
        sub_1ACBED048(v78);
    }
    sub_1ACBFE584(*(_QWORD *)(v41 + 8), *(_BYTE *)(v10 + 48) & 0x38 | 3);
    v86 = *(_QWORD *)(v41 + 8);
    if (*(_BYTE *)(v86 + 17))
    {
      v87 = *(_DWORD *)(v86 + 20) - 1;
      *(_DWORD *)(v86 + 20) = v87;
      if (!v87)
        sub_1ACBED048(v86);
    }
    *(_BYTE *)(v41 + 16) = 3;
    if (v77)
    {
      if (*(_QWORD *)v41)
      {
        v88 = a3[2];
        v68 = v122;
        if (v88)
        {
          v89 = *(_WORD *)(v88 + 20);
          v90 = byte_1ACCB6445[v89 & 0x3F];
          if ((v90 - 1) < 2)
          {
            v94 = (char *)sub_1ACBE1124(v10, 0x12uLL);
            if (v94)
            {
              v66 = *(double *)"Invalid key value";
              strcpy(v94, "Invalid key value");
            }
            v125 = v94;
            v33 = 1;
            goto LABEL_167;
          }
          if ((v90 - 3) < 2)
          {
            if ((v89 & 2) != 0 && *(_BYTE *)(v88 + 22) == 1)
            {
              v91 = *(_DWORD *)(v88 + 16);
            }
            else if ((v89 & 0x10) != 0)
            {
              v91 = *(_DWORD *)(v88 + 16);
              if ((*(_WORD *)(v88 + 20) & 0x400) != 0)
                v91 += *(_DWORD *)v88;
            }
            else if ((v89 & 1) != 0)
            {
              v91 = 0;
            }
            else
            {
              v91 = sub_1ACBF2B3C(v88, 1);
              v88 = a3[2];
            }
            v101 = sqlite3_value_blob((sqlite3_value *)v88);
            v99 = *(_DWORD *)(v10 + 40) - 1;
            v100 = v10;
            v102 = v91;
            goto LABEL_166;
          }
          if (v90 == 5)
          {
            v95 = __s;
            if (sub_1ACC36F18(v10, v17, __s))
            {
              v33 = 0;
              goto LABEL_168;
            }
            v96 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8);
            v97 = *(unsigned __int8 **)(**(_QWORD **)(v96 + 8) + 320);
            if (v97 && (v98 = *v97, v97 += 2, (v33 = v98) != 0) || (v33 = 0, (int)sub_1ACBD2A10(v96) >= 1))
            {
              v99 = *(_DWORD *)(v10 + 40) - 1;
              v100 = v10;
              v101 = v97;
              v102 = v33;
LABEL_166:
              v33 = sub_1ACBDFCC4(v100, v99, v101, v102);
            }
          }
          else
          {
            v33 = 0;
          }
        }
        else
        {
          sub_1ACBBE20C(97202);
          v33 = 0;
        }
      }
      else
      {
        v33 = 7;
        v68 = v122;
      }
    }
    else
    {
      v68 = v122;
    }
LABEL_167:
    v95 = __s;
LABEL_168:
    if (!v95)
      goto LABEL_181;
    for (n = v95 - 4; n[3] || n[2] || n[1] || *n; --n)
      ;
    v104 = (uint64_t (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(n);
      --qword_1ECD3E8D0;
      off_1ECD3B168(n);
      n = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_181:
        if (v33)
          goto LABEL_190;
        if (!*v120)
          sub_1ACBE9148(v10);
        v33 = 0;
        *(_BYTE *)(v10 + 196) = 0;
        *(_DWORD *)(v10 + 44) &= ~0x10u;
        if ((*(_BYTE *)(v10 + 198) & 4) != 0)
        {
          if (!*v120)
          {
LABEL_186:
            sub_1ACBE91DC(v10);
            if (!v33)
              return;
            goto LABEL_190;
          }
        }
        else
        {
          v33 = sub_1ACB6541C(v10, &v125, v60, v61, v62, v63, v64, v65);
          if (!*v120)
            goto LABEL_186;
        }
        if (!v33)
          return;
LABEL_190:
        if ((*(_BYTE *)(v10 + 198) & 4) == 0)
        {
          v105 = *(int *)(v10 + 40) - 1;
          v106 = *(_QWORD *)(*(_QWORD *)(v10 + 32) + 32 * v105 + 8);
          if (v106)
          {
            sub_1ACBA3F80(v106, v66);
            v107 = *(_QWORD *)(v10 + 32) + 32 * v105;
            *(_QWORD *)(v107 + 8) = 0;
            *(_QWORD *)(v107 + 24) = 0;
          }
          sub_1ACBC4F54(v10);
          *(_DWORD *)(v10 + 40) = v105;
          if (v33 == 3082 || v33 == 7)
          {
            if (!*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
            {
              *(_BYTE *)(v10 + 103) = 1;
              if (*(int *)(v10 + 220) >= 1)
                *(_DWORD *)(v10 + 424) = 1;
              ++*(_DWORD *)(v10 + 432);
              *(_WORD *)(v10 + 436) = 0;
              v117 = *(_QWORD *)(v10 + 344);
              if (v117)
              {
                sub_1ACBCB308(v117, "out of memory", v108, v109, v110, v111, v112, v113, v119);
                for (ii = *(_QWORD *)(v10 + 344); ; ++*(_DWORD *)(ii + 48))
                {
                  *(_DWORD *)(ii + 24) = 7;
                  ii = *(_QWORD *)(ii + 256);
                  if (!ii)
                    break;
                }
              }
            }
            if (v125)
              sub_1ACBE0F9C((_QWORD *)v10, v125);
            v114 = (char *)sub_1ACB6DDD0(v10, "out of memory", v108, v109, v110, v111, v112, v113, v119);
          }
          else
          {
            v32 = v125;
            if (v125)
              goto LABEL_203;
            v114 = (char *)sub_1ACB6DDD0(v10, "unable to open database: %s", v108, v109, v110, v111, v112, v113, v68);
          }
          v32 = v114;
          v125 = v114;
LABEL_202:
          if (!v32)
            goto LABEL_206;
LABEL_203:
          if (a1)
          {
            a1[9] = 1;
            sub_1ACB57870(*(_QWORD *)a1, v32, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
            v115 = v125;
            if (!v125)
              goto LABEL_206;
          }
          else
          {
            sub_1ACBBE20C(97389);
            v115 = v125;
            if (!v125)
            {
LABEL_206:
              if (v33)
              {
                if (a1)
                {
                  a1[9] = v33;
                  if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
                  {
                    switch(v33)
                    {
                      case 516:
                        v116 = "abort due to ROLLBACK";
                        break;
                      case 101:
                        v116 = "no more rows available";
                        break;
                      case 100:
                        v116 = "another row available";
                        break;
                      default:
                        if (v33 > 0x1Cu || ((0x1410004uLL >> v33) & 1) != 0)
                          v116 = "unknown error";
                        else
                          v116 = off_1E5C74AE8[v33];
                        break;
                    }
                    sub_1ACBC69D0((uint64_t)a1, v116, -1, 1u, 0);
                  }
                }
                else
                {
                  sub_1ACBBE20C(97602);
                }
              }
              return;
            }
          }
          sub_1ACBE0F9C((_QWORD *)v10, v115);
          goto LABEL_206;
        }
LABEL_201:
        v32 = v125;
        goto LABEL_202;
      }
      v104 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v104)(n);
    goto LABEL_181;
  }
  if (v50 == 7 && !*(_BYTE *)(v10 + 103) && !*(_BYTE *)(v10 + 104))
  {
    *(_BYTE *)(v10 + 103) = 1;
    if (*(int *)(v10 + 220) >= 1)
      *(_DWORD *)(v10 + 424) = 1;
    ++*(_DWORD *)(v10 + 432);
    *(_WORD *)(v10 + 436) = 0;
    v92 = *(_QWORD *)(v10 + 344);
    if (v92)
    {
      sub_1ACBCB308(v92, "out of memory", v51, v52, v53, v54, v55, v56, v119);
      for (jj = *(_QWORD *)(v10 + 344); ; ++*(_DWORD *)(jj + 48))
      {
        *(_DWORD *)(jj + 24) = 7;
        jj = *(_QWORD *)(jj + 256);
        if (!jj)
          break;
      }
    }
  }
  v57 = v127;
  if (a1)
  {
    a1[9] = 1;
    sub_1ACB57870(*(_QWORD *)a1, v57, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v57)
      return;
LABEL_92:
    v69 = (void (**)(char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_97:
      (*v69)(v57);
      return;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v57);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v57);
    v57 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v69 = (void (**)(char *))&xmmword_1ECD3B1D0;
      goto LABEL_97;
    }
  }
  else
  {
    sub_1ACBBE20C(97389);
    if (v57)
      goto LABEL_92;
  }
}

void sub_1ACC36060(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t (*v36)(uint64_t *, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t (*v41)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v42;
  int v43;
  BOOL v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL8 v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  int v62;
  const char *v63;
  char v64;
  uint64_t v65;
  _OWORD v66[4];
  uint64_t v67;
  uint64_t (*v68)(_QWORD *, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v69)(uint64_t *, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  _OWORD *v72;

  v11 = a4;
  v12 = (char *)a3;
  v13 = a2;
  memset(v66, 0, 56);
  v15 = *(_QWORD *)a1;
  if (*(_BYTE *)(*(_QWORD *)a1 + 197))
    goto LABEL_2;
  v17 = *(_DWORD *)(v15 + 44);
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 24);
  *(_BYTE *)(v15 + 100) = *(_BYTE *)(v18 + 113);
  if ((*(_BYTE *)(v18 + 114) & 1) == 0)
  {
    v19 = sub_1ACB654E0(v15, 0, (char **)(a1 + 8), 0, a5, a6, a7, a8);
    if (v19)
    {
LABEL_16:
      *(_DWORD *)(a1 + 24) = v19;
      ++*(_DWORD *)(a1 + 48);
      goto LABEL_67;
    }
  }
  v65 = v11;
  v20 = v12;
  v21 = v13;
  v22 = *(unsigned int *)(v15 + 40);
  if ((int)v22 >= 2)
  {
    do
    {
      v23 = v22 - 1;
      if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 32 * (v22 - 1) + 24) + 114) & 1) == 0)
      {
        v19 = sub_1ACB654E0(v15, (v22 - 1), (char **)(a1 + 8), 0, a5, a6, a7, a8);
        if (v19)
          goto LABEL_16;
      }
      v22 = v23;
    }
    while ((unint64_t)(v23 + 1) > 2);
  }
  if ((v17 & 1) == 0)
    *(_DWORD *)(v15 + 44) &= ~1u;
  v13 = v21;
  v12 = v20;
  v11 = v65;
  if (*(_BYTE *)(v15 + 111))
    *(_DWORD *)(v15 + 44) |= 0x10u;
LABEL_2:
  if (*(_DWORD *)(a1 + 48))
    goto LABEL_67;
  memset((char *)v66 + 8, 0, 48);
  *(_QWORD *)&v66[0] = a1;
  if (!a5)
  {
    v16 = 0;
    goto LABEL_18;
  }
  if (*(_BYTE *)a5 == 59)
  {
    v16 = 0;
    *(_BYTE *)a5 = 117;
    goto LABEL_18;
  }
  DWORD2(v66[2]) = 0;
  v67 = a1;
  v68 = sub_1ACB75FF4;
  v69 = sub_1ACB75AF4;
  v70 = 0;
  v71 = 0;
  v72 = v66;
  v24 = *(_DWORD *)(a1 + 308) + *(_DWORD *)(a5 + 40);
  *(_DWORD *)(a1 + 308) = v24;
  if (*(_DWORD *)(*(_QWORD *)a1 + 148) >= v24)
  {
    sub_1ACC0B714((uint64_t)&v67, a5);
    v38 = v67;
    *(_DWORD *)(v67 + 308) -= *(_DWORD *)(a5 + 40);
    v39 = DWORD1(v66[2]);
    v16 = DWORD2(v66[2]);
    *(_DWORD *)(a5 + 4) |= WORD4(v66[2]) & 0x8010;
    if (v39 > 0 || *(int *)(v38 + 48) > 0)
      goto LABEL_68;
LABEL_18:
    if (a6)
    {
      if (*(_BYTE *)a6 != 59)
      {
        DWORD2(v66[2]) = v16 & 0xF7FF6FEF;
        v25 = *(_QWORD *)&v66[0];
        v67 = *(_QWORD *)&v66[0];
        v68 = sub_1ACB75FF4;
        v26 = sub_1ACB75AF4;
        if ((v16 & 0x80000) != 0)
          v26 = 0;
        v69 = v26;
        v70 = 0;
        v71 = 0;
        v72 = v66;
        v27 = *(_DWORD *)(*(_QWORD *)&v66[0] + 308) + *(_DWORD *)(a6 + 40);
        *(_DWORD *)(*(_QWORD *)&v66[0] + 308) = v27;
        v28 = *(_DWORD *)(*(_QWORD *)v25 + 148);
        if (v28 < v27)
          goto LABEL_39;
        v29 = v11;
        v30 = v12;
        v31 = v13;
        v32 = v16 & 0x8009010;
        sub_1ACC0B714((uint64_t)&v67, a6);
        v33 = v67;
        *(_DWORD *)(v67 + 308) -= *(_DWORD *)(a6 + 40);
        v35 = DWORD1(v66[2]);
        v34 = DWORD2(v66[2]);
        *(_DWORD *)(a6 + 4) |= WORD4(v66[2]) & 0x8010;
        v16 = v34 | v32;
        DWORD2(v66[2]) = v34 | v32;
        if (v35 >= 1 || *(int *)(v33 + 48) > 0)
          goto LABEL_67;
        v13 = v31;
        v12 = v30;
        v11 = v29;
        if (!a7)
          goto LABEL_24;
        goto LABEL_22;
      }
      *(_BYTE *)a6 = 117;
    }
    if (!a7)
      goto LABEL_24;
LABEL_22:
    if (*(_BYTE *)a7 == 59)
    {
      *(_BYTE *)a7 = 117;
      goto LABEL_24;
    }
    DWORD2(v66[2]) = v16 & 0xF7FF6FEF;
    v25 = *(_QWORD *)&v66[0];
    v67 = *(_QWORD *)&v66[0];
    v68 = sub_1ACB75FF4;
    v36 = sub_1ACB75AF4;
    if ((v16 & 0x80000) != 0)
      v36 = 0;
    v69 = v36;
    v70 = 0;
    v71 = 0;
    v72 = v66;
    v37 = *(_DWORD *)(*(_QWORD *)&v66[0] + 308) + *(_DWORD *)(a7 + 40);
    *(_DWORD *)(*(_QWORD *)&v66[0] + 308) = v37;
    v28 = *(_DWORD *)(*(_QWORD *)v25 + 148);
    if (v28 < v37)
    {
LABEL_39:
      sub_1ACBCB308(v25, "Expression tree is too large (maximum depth %d)", a3, a4, a5, a6, a7, a8, v28);
      goto LABEL_67;
    }
    v54 = v11;
    v55 = v12;
    v56 = v13;
    v57 = v16 & 0x8009010;
    sub_1ACC0B714((uint64_t)&v67, a7);
    v58 = v67;
    *(_DWORD *)(v67 + 308) -= *(_DWORD *)(a7 + 40);
    v60 = DWORD1(v66[2]);
    v59 = DWORD2(v66[2]);
    *(_DWORD *)(a7 + 4) |= WORD4(v66[2]) & 0x8010;
    DWORD2(v66[2]) = v59 | v57;
    if (v60 >= 1)
      goto LABEL_67;
    v13 = v56;
    v12 = v55;
    v11 = v54;
    if (*(int *)(v58 + 48) > 0)
      goto LABEL_67;
LABEL_24:
    if (!v11
      || (*(_BYTE *)v11 != 117 ? (a3 = 0) : (a3 = *(_QWORD *)(v11 + 8)),
          (v40 = *(_QWORD *)a1,
           (v41 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 528)) == 0)
       || *(_BYTE *)(v40 + 197)
       || *(_BYTE *)(a1 + 302)))
    {
LABEL_47:
      v42 = *(_QWORD *)(a1 + 16);
      if (!v42)
      {
        if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(*(_QWORD *)a1 + 96) & 8) == 0)
          *(_BYTE *)(a1 + 35) = 1;
        v42 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
      }
      v43 = *(_DWORD *)(a1 + 40);
      v44 = __OFSUB__(v43, 4);
      v45 = v43 - 4;
      if (v45 < 0 != v44)
      {
        v46 = *(_DWORD *)(a1 + 56);
        v47 = (v46 + 1);
        *(_DWORD *)(a1 + 56) = v46 + 4;
      }
      else
      {
        v47 = *(unsigned int *)(a1 + 44);
        *(_DWORD *)(a1 + 40) = v45;
        *(_DWORD *)(a1 + 44) = v47 + 4;
      }
      sub_1ACC08D80(a1, (unsigned __int8 *)a5, v47);
      sub_1ACC08D80(a1, (unsigned __int8 *)a6, (v47 + 1));
      sub_1ACC08D80(a1, (unsigned __int8 *)a7, (v47 + 2));
      if (v42)
      {
        sub_1ACC0A46C((uint64_t *)a1, 0, (v47 + 3 - *v12), (v47 + 3), *v12, (uint64_t)v12, 0);
        v51 = (_DWORD)v13 == 24;
        v52 = *(_DWORD *)(v42 + 144);
        if (*(_DWORD *)(v42 + 148) <= v52)
        {
          sub_1ACBFF5AC(v42, 166, v51, 0, 0, v48, v49, v50);
        }
        else
        {
          *(_DWORD *)(v42 + 144) = v52 + 1;
          v53 = *(_QWORD *)(v42 + 136) + 40 * v52;
          *(_DWORD *)v53 = 166;
          *(_DWORD *)(v53 + 4) = v51;
          *(_OWORD *)(v53 + 8) = 0u;
          *(_OWORD *)(v53 + 24) = 0u;
        }
      }
LABEL_67:
      if (!a5)
        goto LABEL_69;
      goto LABEL_68;
    }
    v61 = v41(*(_QWORD *)(v40 + 536), v13, a3, 0, 0, *(_QWORD *)(a1 + 368));
    if (v61 == 1)
    {
      v62 = 23;
      v63 = "not authorized";
    }
    else
    {
      if ((v61 & 0xFFFFFFFD) == 0)
      {
        if (v61)
          goto LABEL_67;
        goto LABEL_47;
      }
      v62 = 1;
      v63 = "authorizer malfunction";
    }
    sub_1ACBCB308(a1, v63, a3, a4, a5, a6, a7, a8, v64);
    *(_DWORD *)(a1 + 24) = v62;
    goto LABEL_67;
  }
  sub_1ACBCB308(a1, "Expression tree is too large (maximum depth %d)", a3, a4, a5, a6, a7, a8, *(_DWORD *)(*(_QWORD *)a1 + 148));
LABEL_68:
  sub_1ACBF8348((_QWORD *)v15, (unsigned __int8 *)a5);
LABEL_69:
  if (a6)
    sub_1ACBF8348((_QWORD *)v15, (unsigned __int8 *)a6);
  if (a7)
    sub_1ACBF8348((_QWORD *)v15, (unsigned __int8 *)a7);
}

uint64_t sub_1ACC36664(const char *a1, char *__s, unsigned int *a3, uint64_t *a4, const char **a5, char **a6)
{
  unsigned int v12;
  int v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v17;
  _DWORD *v18;
  const char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned int v23;
  char *v24;
  const char *k;
  uint64_t (**v26)(const char *);
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  int64x2_t v33;
  int64x2_t v34;
  int8x16_t v35;
  int8x16_t v36;
  unint64_t v37;
  char *v38;
  int64x2_t v39;
  int64x2_t v40;
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int8x16_t v45;
  uint8x16_t v46;
  uint16x8_t v47;
  uint32x4_t v48;
  int8x16_t v49;
  int64x2_t v50;
  int64x2_t v51;
  uint32x4_t v52;
  int64x2_t v53;
  uint16x8_t v54;
  uint32x4_t v55;
  int64x2_t v56;
  int64x2_t v57;
  int64x2_t v58;
  uint32x4_t v59;
  int64x2_t v60;
  char *v61;
  unint64_t v62;
  int64x2_t v63;
  int64x2_t v64;
  unint64_t v65;
  int8x16_t v66;
  int64x2_t v67;
  int64x2_t v68;
  int8x8_t v69;
  uint16x8_t v70;
  uint32x4_t v71;
  int8x16_t v72;
  int64x2_t v73;
  int64x2_t v74;
  uint32x4_t v75;
  int64x2_t v76;
  char *v77;
  unint64_t v78;
  int v79;
  _DWORD *v80;
  uint64_t v81;
  char *v82;
  int v83;
  uint64_t v84;
  int v85;
  int i;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  int v94;
  char *j;
  const char *v96;
  const char *v97;
  int v98;
  const char *v100;
  int v101;
  int v102;
  const char *v103;
  int v104;
  unsigned int v105;
  char **v108;
  const char *v109;
  const char *v110;
  size_t v111;
  const char **v112;
  const char *v113;
  int v114;
  int v116;
  int v117;
  const char **v118;
  const char *v119;
  int v120;

  v12 = *a3;
  if (!__s)
  {
    LODWORD(v14) = 0;
    goto LABEL_14;
  }
  v13 = strlen(__s);
  LODWORD(v14) = v13 & 0x3FFFFFFF;
  if ((v12 & 0x40) != 0)
  {
    if (v14 < 5)
      goto LABEL_14;
LABEL_10:
    if (*(_DWORD *)__s != 1701603686 || __s[4] != 58)
      goto LABEL_14;
    v20 = (v14 + 8);
    v21 = v13 & 0x3FFFFFFF;
    if (v21 < 8)
    {
      v22 = 0;
      goto LABEL_64;
    }
    if (v21 >= 0x10)
    {
      v33 = 0uLL;
      v34 = (int64x2_t)(v14 + 8);
      v35.i64[0] = 0x2626262626262626;
      v35.i64[1] = 0x2626262626262626;
      v36 = (int8x16_t)vdupq_n_s64(1uLL);
      v22 = v21 - (v13 & 0xF);
      v37 = v22;
      v38 = __s;
      v39 = 0uLL;
      v40 = 0uLL;
      v41 = 0uLL;
      v42 = 0uLL;
      v43 = 0uLL;
      v44 = 0uLL;
      do
      {
        v45 = *(int8x16_t *)v38;
        v38 += 16;
        v46 = (uint8x16_t)vceqq_s8(v45, v35);
        v47 = vmovl_u8(*(uint8x8_t *)v46.i8);
        v48 = vmovl_u16(*(uint16x4_t *)v47.i8);
        v49.i64[0] = v48.u32[0];
        v49.i64[1] = v48.u32[1];
        v50 = (int64x2_t)vandq_s8(v49, v36);
        v49.i64[0] = v48.u32[2];
        v49.i64[1] = v48.u32[3];
        v51 = (int64x2_t)vandq_s8(v49, v36);
        v52 = vmovl_high_u16(v47);
        v49.i64[0] = v52.u32[0];
        v49.i64[1] = v52.u32[1];
        v53 = (int64x2_t)vandq_s8(v49, v36);
        v54 = vmovl_high_u8(v46);
        v55 = vmovl_u16(*(uint16x4_t *)v54.i8);
        v49.i64[0] = v55.u32[0];
        v49.i64[1] = v55.u32[1];
        v56 = (int64x2_t)vandq_s8(v49, v36);
        v49.i64[0] = v52.u32[2];
        v49.i64[1] = v52.u32[3];
        v57 = (int64x2_t)vandq_s8(v49, v36);
        v49.i64[0] = v55.u32[2];
        v49.i64[1] = v55.u32[3];
        v58 = (int64x2_t)vandq_s8(v49, v36);
        v59 = vmovl_high_u16(v54);
        v49.i64[0] = v59.u32[0];
        v49.i64[1] = v59.u32[1];
        v60 = (int64x2_t)vandq_s8(v49, v36);
        v49.i64[0] = v59.u32[2];
        v49.i64[1] = v59.u32[3];
        v44 = vaddq_s64(v44, (int64x2_t)vandq_s8(v49, v36));
        v43 = vaddq_s64(v43, v60);
        v42 = vaddq_s64(v42, v58);
        v40 = vaddq_s64(v40, v57);
        v41 = vaddq_s64(v41, v56);
        v39 = vaddq_s64(v39, v53);
        v33 = vaddq_s64(v33, v51);
        v34 = vaddq_s64(v34, v50);
        v37 -= 16;
      }
      while (v37);
      v20 = vaddvq_s64(vaddq_s64(vaddq_s64(vaddq_s64(v34, v41), vaddq_s64(v39, v43)), vaddq_s64(vaddq_s64(v33, v42), vaddq_s64(v40, v44))));
      if ((v13 & 0xF) == 0)
        goto LABEL_68;
      if ((v13 & 0xFu) < 8uLL)
      {
LABEL_64:
        v77 = &__s[v22];
        v78 = v21 - v22;
        do
        {
          v79 = *v77++;
          if (v79 == 38)
            ++v20;
          --v78;
        }
        while (v78);
LABEL_68:
        if (sqlite3_initialize())
          return 7;
        v80 = (_DWORD *)sub_1ACB5D828(v20);
        if (!v80)
          return 7;
        v23 = v12 | 0x40;
        *v80 = 0;
        v19 = (const char *)(v80 + 1);
        if (__s[5] == 47 && __s[6] == 47)
        {
          v81 = 0;
          v82 = __s + 7;
          v83 = __s[7];
          if (__s[7])
          {
            do
            {
              if (v83 == 47)
                break;
              v83 = v82[++v81];
            }
            while (v82[v81]);
          }
          LODWORD(v84) = v81 + 7;
          if ((_DWORD)v81 != 9)
          {
            if (!(_DWORD)v81)
              goto LABEL_79;
LABEL_161:
            v24 = sqlite3_mprintf("invalid uri authority: %.*s");
            goto LABEL_26;
          }
          if (*(_QWORD *)(__s + 7) != 0x736F686C61636F6CLL || __s[15] != 116)
            goto LABEL_161;
          LODWORD(v84) = 16;
        }
        else
        {
          LODWORD(v84) = 5;
        }
LABEL_79:
        v85 = 0;
        for (i = 0; ; ++i)
        {
          v87 = i;
          v88 = v84;
          while (1)
          {
            while (1)
            {
LABEL_81:
              v89 = __s[v88];
              if (!__s[v88] || v89 == 35)
              {
                v120 = v12 | 0x40;
                if (v85 == 1)
                {
                  ++i;
                  v19[v87] = 0;
                }
                *(_DWORD *)&v19[i] = 0;
                v96 = &v19[strlen(v19) & 0x3FFFFFFF];
                v98 = *((unsigned __int8 *)v96 + 1);
                v97 = v96 + 1;
                if (!v98)
                {
                  v23 = v12 | 0x40;
                  goto LABEL_23;
                }
                v118 = a5;
                while (1)
                {
                  v102 = strlen(v97) & 0x3FFFFFFF;
                  v103 = &v97[v102 + 1];
                  v104 = strlen(v103);
                  v105 = v104 & 0x3FFFFFFF;
                  switch(v102)
                  {
                    case 5:
                      if (*(_DWORD *)v97 == 1751343459 && v97[4] == 101)
                      {
                        v116 = -393217;
                        v117 = 393216;
                        v108 = &off_1E5C74718;
                        v109 = "cache";
LABEL_145:
                        v119 = v109;
                        v110 = *v108;
                        if (!*v108)
                          goto LABEL_153;
                        v111 = v104 & 0x3FFFFFFF;
                        v112 = (const char **)(v108 + 2);
                        while (v105 != (strlen(v110) & 0x3FFFFFFF) || memcmp(v103, v110, v111))
                        {
                          v113 = *v112;
                          v112 += 2;
                          v110 = v113;
                          if (!v113)
                            goto LABEL_153;
                        }
                        v114 = *((_DWORD *)v112 - 2);
                        if (!v114)
                        {
LABEL_153:
                          v24 = sqlite3_mprintf("no such %s mode: %s", v119, v103);
                          v17 = 1;
LABEL_154:
                          a5 = v118;
                          v23 = v120;
                          goto LABEL_27;
                        }
                        if ((int)(v114 & 0xFFFFFF7F) > v117)
                        {
                          v24 = sqlite3_mprintf("%s mode not allowed: %s", v119, v103);
                          v17 = 3;
                          goto LABEL_154;
                        }
                        v120 = v114 | v116 & v120;
                      }
                      break;
                    case 4:
                      if (*(_DWORD *)v97 == 1701080941)
                      {
                        v117 = v120 & 0x87;
                        v116 = -136;
                        v108 = &off_1E5C74748;
                        v109 = "access";
                        goto LABEL_145;
                      }
                      break;
                    case 3:
                      if (*(_WORD *)v97 == 26230 && v97[2] == 115)
                        a1 = &v97[v102 + 1];
                      break;
                  }
                  v100 = &v103[v105];
                  v101 = *((unsigned __int8 *)v100 + 1);
                  v97 = v100 + 1;
                  if (!v101)
                  {
                    a5 = v118;
                    v23 = v120;
                    goto LABEL_23;
                  }
                }
              }
              v84 = v88 + 1;
              if (v89 != 37)
                break;
              v90 = __s[v84];
              if ((byte_1ACCB6548[v90] & 8) == 0)
                break;
              v91 = __s[v88 + 2];
              if ((byte_1ACCB6548[v91] & 8) == 0)
                break;
              v88 += 3;
              v89 = ((((char)(2 * v91) >> 7) & 0xF9) + (_BYTE)v91) & 0xF | (16
                                                                                        * ((((char)(2 * v90) >> 7) & 9)
                                                                                         + v90));
              if (((((char)(2 * v91) >> 7) & 0xF9) + (_BYTE)v91) & 0xF | (16 * ((((char)(2 * v90) >> 7) & 9) + v90)))
              {
                LODWORD(v84) = v88;
                goto LABEL_111;
              }
              v92 = &__s[v88];
              while (1)
              {
                v94 = *v92++;
                v93 = v94;
                if (!v94 || v93 == 35 || !v85 && v93 == 63)
                  break;
                if (v85 == 1)
                {
                  if (v93 == 38 || v93 == 61)
                    goto LABEL_81;
                }
                else if (v85 == 2 && v93 == 38)
                {
                  goto LABEL_81;
                }
                ++v88;
              }
            }
            if (v85 != 1)
              break;
            if (v89 != 61 && v89 != 38)
              goto LABEL_119;
            if (v19[i - 1])
            {
              if (v89 == 38)
              {
                LOBYTE(v89) = 0;
                ++i;
                v19[v87] = 0;
LABEL_119:
                v85 = 1;
              }
              else
              {
                LOBYTE(v89) = 0;
                v85 = 2;
              }
              goto LABEL_111;
            }
            ++v88;
            for (j = &__s[(int)v84]; ; ++j)
            {
              v85 = 1;
              if (!*j || *j == 35)
                break;
              if (*(j - 1) == 38)
              {
                v85 = 1;
                goto LABEL_81;
              }
              ++v88;
            }
          }
          if (!v85 && v89 == 63 || v85 == 2 && v89 == 38)
          {
            LOBYTE(v89) = 0;
            goto LABEL_119;
          }
LABEL_111:
          v19[i] = v89;
        }
      }
    }
    else
    {
      v22 = 0;
    }
    v61 = &__s[v22];
    v62 = v22 + (v13 & 7);
    v22 = v21 - (v13 & 7);
    v63 = 0uLL;
    v64 = (int64x2_t)(unint64_t)v20;
    v65 = v62 - v21;
    v66 = (int8x16_t)vdupq_n_s64(1uLL);
    v67 = 0uLL;
    v68 = 0uLL;
    do
    {
      v69 = *(int8x8_t *)v61;
      v61 += 8;
      v70 = vmovl_u8((uint8x8_t)vceq_s8(v69, (int8x8_t)0x2626262626262626));
      v71 = vmovl_u16(*(uint16x4_t *)v70.i8);
      v72.i64[0] = v71.u32[0];
      v72.i64[1] = v71.u32[1];
      v73 = (int64x2_t)vandq_s8(v72, v66);
      v72.i64[0] = v71.u32[2];
      v72.i64[1] = v71.u32[3];
      v74 = (int64x2_t)vandq_s8(v72, v66);
      v75 = vmovl_high_u16(v70);
      v72.i64[0] = v75.u32[0];
      v72.i64[1] = v75.u32[1];
      v76 = (int64x2_t)vandq_s8(v72, v66);
      v72.i64[0] = v75.u32[2];
      v72.i64[1] = v75.u32[3];
      v68 = vaddq_s64(v68, (int64x2_t)vandq_s8(v72, v66));
      v67 = vaddq_s64(v67, v76);
      v63 = vaddq_s64(v63, v74);
      v64 = vaddq_s64(v64, v73);
      v65 += 8;
    }
    while (v65);
    v20 = vaddvq_s64(vaddq_s64(vaddq_s64(v64, v67), vaddq_s64(v63, v68)));
    if ((v13 & 7) == 0)
      goto LABEL_68;
    goto LABEL_64;
  }
  if (byte_1ECD3B146)
    v15 = v14 > 4;
  else
    v15 = 0;
  if (v15)
    goto LABEL_10;
LABEL_14:
  if (!sqlite3_initialize())
  {
    v18 = (_DWORD *)sub_1ACB5D828((v14 + 8));
    if (v18)
    {
      *v18 = 0;
      v19 = (const char *)(v18 + 1);
      if ((_DWORD)v14)
      {
        v14 = v14;
        memcpy(v18 + 1, __s, v14);
      }
      else
      {
        v14 = 0;
      }
      *(_DWORD *)&v19[v14] = 0;
      v23 = v12 & 0xFFFFFFBF;
LABEL_23:
      if (sqlite3_initialize())
      {
        *a4 = 0;
LABEL_25:
        v24 = sqlite3_mprintf("no such vfs: %s");
LABEL_26:
        v17 = 1;
LABEL_27:
        *a6 = v24;
        for (k = v19 - 4; k[3] || k[2] || k[1] || *k; --k)
          ;
        v26 = (uint64_t (**)(const char *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(k);
          --qword_1ECD3E8D0;
          off_1ECD3B168(k);
          k = (const char *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_39;
          v26 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
        }
        (*v26)(k);
LABEL_39:
        v19 = 0;
LABEL_55:
        *a3 = v23;
        *a5 = v19;
        return v17;
      }
      if ((_BYTE)word_1ECD3B144)
      {
        v27 = v23;
        v28 = qword_1ECD3B1B0(2);
        v29 = v28;
        if (v28)
        {
          xmmword_1ECD3B1C0(v28);
          v30 = 0;
LABEL_47:
          v31 = qword_1ECD3E928;
          if (a1 && qword_1ECD3E928)
          {
            do
            {
              if (!strcmp(a1, *(const char **)(v31 + 24)))
                break;
              v31 = *(_QWORD *)(v31 + 16);
            }
            while (v31);
          }
          if ((v30 & 1) == 0)
            xmmword_1ECD3B1D0(v29);
          *a4 = v31;
          v23 = v27;
          if (v31)
          {
            v17 = 0;
            goto LABEL_55;
          }
          goto LABEL_25;
        }
      }
      else
      {
        v27 = v23;
        v29 = 0;
      }
      v30 = 1;
      goto LABEL_47;
    }
  }
  return 7;
}

uint64_t sub_1ACC36F18(uint64_t a1, _BYTE *a2, char *__s)
{
  char *v6;
  const char *v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  _BYTE *v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  char *v19;
  const char *v20;
  int v21;
  int v22;
  const char *v23;
  int v24;
  const char *v25;
  int v26;
  char *v27;
  const char *v28;
  int v29;
  int v30;
  const char *v31;
  size_t v32;
  int v33;
  int v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  _BYTE v39[40];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (!__s)
    return 0;
  v6 = &__s[strlen(__s) & 0x3FFFFFFF];
  v8 = v6[1];
  v7 = v6 + 1;
  if (!v8)
    goto LABEL_12;
  while (1)
  {
    v9 = strcmp(v7, "hexkey");
    v10 = strlen(v7);
    v11 = &v7[v10 & 0x3FFFFFFF];
    v12 = v11 + 1;
    if (!v9)
      break;
    v13 = &v12[strlen(v11 + 1) & 0x3FFFFFFF];
    v14 = v13[1];
    v7 = v13 + 1;
    if (!v14)
      goto LABEL_12;
  }
  if (!*v12)
  {
LABEL_12:
    v19 = &__s[strlen(__s) & 0x3FFFFFFF];
    v21 = v19[1];
    v20 = v19 + 1;
    if (v21)
    {
      while (1)
      {
        v22 = strcmp(v20, "key");
        v23 = &v20[(strlen(v20) & 0x3FFFFFFF) + 1];
        v24 = strlen(v23);
        if (!v22)
          break;
        v25 = &v23[v24 & 0x3FFFFFFF];
        v26 = *((unsigned __int8 *)v25 + 1);
        v20 = v25 + 1;
        if (!v26)
          goto LABEL_15;
      }
      v35 = v24 & 0x3FFFFFFF;
      v36 = a1;
      v37 = a2;
      v38 = (char *)v23;
      goto LABEL_22;
    }
LABEL_15:
    v27 = &__s[strlen(__s) & 0x3FFFFFFF];
    v29 = v27[1];
    v28 = v27 + 1;
    if (v29)
    {
      while (1)
      {
        v30 = strcmp(v28, "textkey");
        v31 = &v28[strlen(v28) & 0x3FFFFFFF];
        if (!v30)
          break;
        v32 = (size_t)&v31[(strlen(v31 + 1) & 0x3FFFFFFF) + 1];
        v33 = *(unsigned __int8 *)(v32 + 1);
        v28 = (const char *)(v32 + 1);
        if (!v33)
          return 0;
      }
      v36 = a1;
      v37 = a2;
      v38 = (char *)(v31 + 1);
      v35 = -1;
      goto LABEL_22;
    }
    return 0;
  }
  v15 = 0;
  v16 = 0;
  do
  {
    v17 = v7[(v10 & 0x3FFFFFFF) + 1 + v15];
    if ((byte_1ACCB6548[v17] & 8) == 0)
      break;
    v18 = ((((char)(2 * v17) >> 7) & 0xF9) + v17) & 0xF | (16 * v16);
    if ((v15 & 1) != 0)
      v39[v15 >> 1] = v18;
    ++v15;
    v16 = v18;
  }
  while (v15 != 80);
  v35 = v15 >> 1;
  v38 = v39;
  v36 = a1;
  v37 = a2;
LABEL_22:
  sqlite3_key_v2(v36, v37, v38, v35);
  return 1;
}

_QWORD *sub_1ACC3716C(uint64_t *a1, double a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _BYTE *v15;
  char *i;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *j;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  char __s[128];
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v5 = *a4;
  if (*a4)
  {
    v6 = *(unsigned __int16 *)(v5 + 20);
    if ((~v6 & 0x202) != 0 || *(_BYTE *)(v5 + 22) != 1)
    {
      if ((v6 & 1) != 0)
        v5 = 0;
      else
        v5 = sub_1ACBF2B64((int *)v5, 1);
    }
    else
    {
      v5 = *(_QWORD *)(v5 + 8);
    }
  }
  if (!a1 || !*a1)
    sub_1ACCB4024();
  v7 = *(_QWORD *)(*a1 + 24);
  v8 = &byte_1ACCBEAEE;
  if (v5)
    v8 = (char *)v5;
  v9 = *(unsigned int *)(v7 + 40);
  if ((int)v9 < 1)
  {
LABEL_34:
    sqlite3_snprintf(128, __s, "no such database: %s");
LABEL_36:
    *((_DWORD *)a1 + 9) = 1;
    return (_QWORD *)sub_1ACB57870(*a1, __s, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  v10 = 0;
  v11 = *(_QWORD *)(v7 + 32);
  while (1)
  {
    v12 = v11 + 32 * v10;
    v14 = *(_QWORD *)(v12 + 8);
    v13 = (uint64_t *)(v12 + 8);
    if (v14)
      break;
LABEL_15:
    if (++v10 == v9)
      goto LABEL_34;
  }
  v15 = *(_BYTE **)(v11 + 32 * v10);
  for (i = v8; ; ++i)
  {
    v17 = *v15;
    v18 = *i;
    if ((_DWORD)v17 == (_DWORD)v18)
      break;
    if (byte_1ACCB6333[v17] != byte_1ACCB6333[v18])
    {
      if (!v10)
      {
        v19 = "main";
        for (j = v8; ; ++j)
        {
          v21 = *(unsigned __int8 *)v19;
          v22 = *j;
          if ((_DWORD)v21 == (_DWORD)v22)
          {
            if (!*v19)
              goto LABEL_35;
          }
          else if (byte_1ACCB6333[v21] != byte_1ACCB6333[v22])
          {
            goto LABEL_15;
          }
          ++v19;
        }
      }
      goto LABEL_15;
    }
LABEL_19:
    ++v15;
  }
  if (*v15)
    goto LABEL_19;
  if ((v10 & 0xFFFFFFFE) == 0)
  {
LABEL_35:
    sqlite3_snprintf(128, __s, "cannot detach database %s", v8);
    goto LABEL_36;
  }
  v23 = *v13;
  if (*v13 && *(_BYTE *)(v23 + 16) || *(_DWORD *)(v23 + 24))
  {
    sqlite3_snprintf(128, __s, "database %s is locked");
    goto LABEL_36;
  }
  v25 = *(_QWORD **)(*(_QWORD *)(v11 + 56) + 64);
  if (v25)
  {
    v26 = *(_QWORD *)(v11 + 32 * v10 + 24);
    do
    {
      v27 = v25[2];
      if (*(_QWORD *)(v27 + 48) == v26)
        *(_QWORD *)(v27 + 48) = *(_QWORD *)(v27 + 40);
      v25 = (_QWORD *)*v25;
    }
    while (v25);
  }
  sub_1ACBA3F80(v23, a2);
  *v13 = 0;
  *(_QWORD *)(v11 + 32 * v10 + 24) = 0;
  return sub_1ACC00AF8((_QWORD *)v7);
}

uint64_t sub_1ACC373F8(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  int v26;
  uint64_t v27;

  v10 = *(_QWORD *)(*(_QWORD *)(*a1 + 32) + 32 * (int)a2 + 24);
  if (a1[21])
    v11 = a1[21];
  else
    v11 = (uint64_t)a1;
  v12 = *(_DWORD *)(v11 + 124);
  v13 = 1 << a2;
  if ((v12 & (1 << a2)) == 0)
  {
    *(_DWORD *)(v11 + 124) = v12 | v13;
    if ((_DWORD)a2 == 1)
      sub_1ACBE9418(v11);
  }
  *(_DWORD *)(v11 + 120) |= v13;
  v14 = *((unsigned int *)a1 + 13);
  *((_DWORD *)a1 + 13) = v14 + 3;
  sub_1ACC376F0((uint64_t)a1, a2, v14, 0, 0, a6, a7, a8);
  v22 = *(_QWORD **)(v10 + 16);
  if (v22)
  {
    v23 = *((unsigned int *)a1 + 13);
    v24 = (*((_DWORD *)a1 + 14) + 1);
    do
    {
      sub_1ACC379A8((uint64_t)a1, v22[2], 0, v14, v24, v23, v20, v21);
      v22 = (_QWORD *)*v22;
    }
    while (v22);
  }
  result = a1[2];
  if (result)
    goto LABEL_15;
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  result = sub_1ACBCB4C8(a1, v15, v16, v17, v18, v19, v20, v21);
  if (result)
  {
LABEL_15:
    v26 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v26)
    {
      return sub_1ACBFF5AC(result, 150, a2, 0, 0, v19, v20, v21);
    }
    else
    {
      *(_DWORD *)(result + 144) = v26 + 1;
      v27 = *(_QWORD *)(result + 136) + 40 * v26;
      *(_DWORD *)v27 = 150;
      *(_DWORD *)(v27 + 4) = a2;
      *(_OWORD *)(v27 + 8) = 0u;
      *(_OWORD *)(v27 + 24) = 0u;
    }
  }
  return result;
}

uint64_t sub_1ACC37564(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t result;
  int v31;
  uint64_t v32;

  v11 = *(_QWORD *)(a2 + 96);
  if (v11)
  {
    v12 = (uint64_t *)(*(_QWORD *)(*a1 + 32) + 24);
    LODWORD(v13) = -1;
    do
    {
      v14 = *v12;
      v12 += 4;
      v13 = (v13 + 1);
    }
    while (v14 != v11);
  }
  else
  {
    v13 = 4294934528;
  }
  if (a1[21])
    v15 = a1[21];
  else
    v15 = (uint64_t)a1;
  v16 = *(_DWORD *)(v15 + 124);
  v17 = 1 << v13;
  if ((v16 & (1 << v13)) == 0)
  {
    *(_DWORD *)(v15 + 124) = v16 | v17;
    if ((_DWORD)v13 == 1)
      sub_1ACBE9418(v15);
  }
  *(_DWORD *)(v15 + 120) |= v17;
  v18 = *((unsigned int *)a1 + 13);
  *((_DWORD *)a1 + 13) = v18 + 3;
  if (a3)
    v19 = (uint64_t *)a3;
  else
    v19 = (uint64_t *)a2;
  if (a3)
    v20 = "idx";
  else
    v20 = "tbl";
  sub_1ACC376F0((uint64_t)a1, v13, v18, *v19, (uint64_t)v20, a6, a7, a8);
  sub_1ACC379A8((uint64_t)a1, a2, a3, v18, (*((_DWORD *)a1 + 14) + 1), *((unsigned int *)a1 + 13), v21, v22);
  result = a1[2];
  if (result)
    goto LABEL_23;
  if (!a1[21] && (*(_BYTE *)(*a1 + 96) & 8) == 0)
    *((_BYTE *)a1 + 35) = 1;
  result = sub_1ACBCB4C8(a1, v23, v24, v25, v26, v27, v28, v29);
  if (result)
  {
LABEL_23:
    v31 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v31)
    {
      return sub_1ACBFF5AC(result, 150, v13, 0, 0, v27, v28, v29);
    }
    else
    {
      *(_DWORD *)(result + 144) = v31 + 1;
      v32 = *(_QWORD *)(result + 136) + 40 * v31;
      *(_DWORD *)v32 = 150;
      *(_DWORD *)(v32 + 4) = v13;
      *(_OWORD *)(v32 + 8) = 0u;
      *(_OWORD *)(v32 + 24) = 0u;
    }
  }
  return result;
}

uint64_t sub_1ACC376F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  _BYTE **v15;
  char **v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  _BYTE v36[3];
  _DWORD v37[3];
  uint64_t v38;

  v9 = a3;
  v38 = *MEMORY[0x1E0C80C00];
  v12 = *(_QWORD *)a1;
  result = *(_QWORD *)(a1 + 16);
  if (result)
    goto LABEL_6;
  if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(v12 + 96) & 8) == 0)
    *(_BYTE *)(a1 + 35) = 1;
  result = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (result)
  {
LABEL_6:
    v34 = v9;
    v14 = 0;
    v35 = result;
    v15 = (_BYTE **)(*(_QWORD *)(v12 + 32) + 32 * (int)a2);
    v16 = off_1E5C747E0;
    do
    {
      v19 = *v16;
      v36[v14] = 0;
      result = sub_1ACBD1B0C(v12, v19, *v15);
      if (result)
      {
        v24 = *(unsigned int *)(result + 40);
        v37[v14] = v24;
        if ((_DWORD)a2 != 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * (int)a2 + 8) + 17))
          sub_1ACC08F44(a1, a2, v24, 1, (uint64_t)v19);
        if (a4)
        {
          result = (uint64_t)sub_1ACBB60F8((uint64_t *)a1, "DELETE FROM %Q.%s WHERE %s=%Q", v20, v21, v22, v23, v17, v18, (char)*v15);
        }
        else if (*(_QWORD *)(v12 + 360))
        {
          result = (uint64_t)sub_1ACBB60F8((uint64_t *)a1, "DELETE FROM %Q.%s", v20, v21, v22, v23, v17, v18, (char)*v15);
        }
        else
        {
          result = v35;
          v25 = *(_DWORD *)(v35 + 144);
          if (*(_DWORD *)(v35 + 148) <= v25)
          {
            result = sub_1ACBFF5AC(v35, 145, v24, a2, 0, v23, v17, v18);
          }
          else
          {
            *(_DWORD *)(v35 + 144) = v25 + 1;
            v26 = *(_QWORD *)(v35 + 136) + 40 * v25;
            *(_DWORD *)v26 = 145;
            *(_DWORD *)(v26 + 4) = v24;
            *(_DWORD *)(v26 + 8) = a2;
            *(_QWORD *)(v26 + 12) = 0;
            *(_QWORD *)(v26 + 28) = 0;
            *(_QWORD *)(v26 + 20) = 0;
            *(_DWORD *)(v26 + 36) = 0;
          }
        }
      }
      else if (!v14)
      {
        result = (uint64_t)sub_1ACBB60F8((uint64_t *)a1, "CREATE TABLE %Q.%s(%s)", v20, v21, v22, v23, v17, v18, (char)*v15);
        v37[0] = *(_DWORD *)(a1 + 132);
        v36[0] = 16;
      }
      ++v14;
      v16 += 2;
    }
    while (v14 != 3);
    v27 = v37[0];
    v28 = v35;
    v29 = *(_DWORD *)(v35 + 144);
    if (*(_DWORD *)(v35 + 148) <= v29)
    {
      result = sub_1ACBFF7F0(v35, 113, v34, v37[0], a2, 3, v17, v18);
      v28 = v35;
    }
    else
    {
      *(_DWORD *)(v35 + 144) = v29 + 1;
      v30 = *(_QWORD *)(v35 + 136) + 40 * v29;
      *(_DWORD *)v30 = 64881;
      *(_DWORD *)(v30 + 4) = v34;
      *(_DWORD *)(v30 + 8) = v27;
      *(_DWORD *)(v30 + 12) = a2;
      *(_DWORD *)(v30 + 16) = 3;
      *(_QWORD *)(v30 + 24) = 0;
      *(_QWORD *)(v30 + 32) = 0;
    }
    v31 = *(_DWORD *)(v28 + 144);
    v32 = __OFSUB__(v31, 1);
    v33 = v31 - 1;
    if (v33 < 0 == v32)
      *(_WORD *)(*(_QWORD *)(v28 + 136) + 40 * v33 + 2) = v36[0];
  }
  return result;
}

void sub_1ACC379A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  const char *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  BOOL v70;
  int v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  int v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  int v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  int v128;
  char *v129;
  uint64_t v130;
  int v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE *v147;
  int v148;
  int v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int v170;
  int v171;
  char *v172;
  int v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  const char *v178;
  char v179;
  unsigned int v180;
  uint64_t v181;
  char *__s;
  unsigned int v183;
  int v184;
  unsigned int v185;
  unsigned int v186;
  _QWORD *v187;
  uint64_t v188;
  unsigned int v189;
  unsigned int v190;
  unsigned int v191;
  unsigned int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  uint64_t v199;
  unsigned int v200;
  unsigned int v201;
  unsigned int v202;
  unsigned int v203;

  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = (_QWORD *)a2;
  v14 = *(_QWORD *)a1;
  v203 = a5 + 9;
  if (*(_DWORD *)(a1 + 56) < (int)a5 + 9)
  {
    *(_DWORD *)(a1 + 56) = v203;
    v15 = *(_QWORD *)(a1 + 16);
    if (v15)
    {
LABEL_3:
      if (!a2)
        return;
      goto LABEL_10;
    }
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 16);
    if (v15)
      goto LABEL_3;
  }
  if (!*(_QWORD *)(a1 + 168) && (*(_BYTE *)(v14 + 96) & 8) == 0)
    *(_BYTE *)(a1 + 35) = 1;
  v15 = sub_1ACBCB4C8((uint64_t *)a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v12)
    return;
LABEL_10:
  if (!v15
    || *((_BYTE *)v12 + 63)
    || *v12 && !sub_1ACBADEF0("sqlite\\_%", (const char *)*v12, byte_1ACCB6544, 92))
  {
    return;
  }
  v16 = v12[12];
  v17 = *(_QWORD *)(v14 + 32);
  if (v16)
  {
    v18 = (uint64_t *)(v17 + 24);
    LODWORD(v19) = -1;
    do
    {
      v20 = *v18;
      v18 += 4;
      v19 = (v19 + 1);
    }
    while (v20 != v16);
  }
  else
  {
    v19 = 4294934528;
  }
  v21 = *(_QWORD *)a1;
  v22 = *(uint64_t (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a1 + 528);
  v193 = v19;
  if (!v22 || *(_BYTE *)(v21 + 197) || *(_BYTE *)(a1 + 302))
    goto LABEL_23;
  v173 = v22(*(_QWORD *)(v21 + 536), 28, *v12, 0, *(_QWORD *)(v17 + 32 * (int)v19), *(_QWORD *)(a1 + 368));
  if (v173 == 1)
  {
    v177 = 23;
    v178 = "not authorized";
LABEL_190:
    sub_1ACBCB308(a1, v178, v174, v175, v176, a6, a7, a8, v179);
    *(_DWORD *)(a1 + 24) = v177;
    return;
  }
  if ((v173 & 0xFFFFFFFD) != 0)
  {
    v177 = 1;
    v178 = "authorizer malfunction";
    goto LABEL_190;
  }
  v19 = v193;
  if (v173)
    return;
LABEL_23:
  if (*(_QWORD *)(v14 + 360))
  {
    __s = (char *)sub_1ACBE1124(v14, 0x75uLL);
    if (!__s)
      return;
    *(_QWORD *)(__s + 109) = 0;
    *((_OWORD *)__s + 5) = 0u;
    *((_OWORD *)__s + 6) = 0u;
    *((_OWORD *)__s + 3) = 0u;
    *((_OWORD *)__s + 4) = 0u;
    *((_OWORD *)__s + 1) = 0u;
    *((_OWORD *)__s + 2) = 0u;
    *(_OWORD *)__s = 0u;
    strcpy(__s + 104, "sqlite_stat1");
    *(_QWORD *)__s = __s + 104;
    *((_DWORD *)__s + 13) = 0x3FFFF;
    sub_1ACBA86CC(*(uint64_t **)(a1 + 16), 184, 0, 0, 0, (uint64_t)__s, 4294967290, v23);
    v19 = v193;
  }
  else
  {
    __s = 0;
  }
  v198 = v14;
  v200 = v9 + 4;
  v189 = v9 + 6;
  v192 = v9 + 7;
  v185 = v9 + 8;
  if ((_DWORD)v19 != 1 && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 32) + 32 * (int)v19 + 8) + 17))
  {
    sub_1ACC08F44(a1, v19, *((_DWORD *)v12 + 10), 0, *v12);
    v19 = v193;
  }
  v24 = a6 + 2;
  if (*(_DWORD *)(a1 + 52) > (int)a6 + 2)
    v24 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = v24;
  sub_1ACB7A514((_QWORD *)a1, a6, v19, (uint64_t)v12, 112, a6, a7, a8);
  sub_1ACBA86CC((uint64_t *)v15, 117, 0, v189, 0, *v12, 0, v25);
  v30 = v12[2];
  v180 = a6;
  if (v30)
  {
    v195 = v9 + 1;
    v202 = v9 + 2;
    v190 = v9 + 5;
    v191 = v9 + 3;
    v201 = a6 + 1;
    v199 = (int)v9 + 9;
    v31 = 1;
    v186 = v10;
    v187 = v12;
    v32 = v200;
    v188 = v9;
    v181 = v11;
    while (1)
    {
      if (!v11 || v30 == v11)
      {
        if (!*(_QWORD *)(v30 + 72))
          v31 = 0;
        v33 = *(_WORD *)(v30 + 99);
        v197 = v31;
        if ((v12[6] & 0x80) != 0 && (v33 & 3) == 2)
        {
          v34 = *(unsigned __int16 *)(v30 + 94);
          v35 = (const char *)*v12;
          v36 = *(unsigned __int16 *)(v30 + 94);
        }
        else
        {
          v34 = *(unsigned __int16 *)(v30 + 96);
          v35 = *(const char **)v30;
          if ((v33 & 8) != 0)
            v36 = *(unsigned __int16 *)(v30 + 94);
          else
            v36 = *(unsigned __int16 *)(v30 + 96);
        }
        v37 = v36 - 1;
        sub_1ACBA86CC((uint64_t *)v15, 117, 0, v192, 0, (uint64_t)v35, 0, v29);
        if (*(_DWORD *)(a1 + 56) < (signed int)(v37 + v203))
          *(_DWORD *)(a1 + 56) = v37 + v203;
        v41 = *(unsigned int *)(v30 + 88);
        v42 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v42)
        {
          sub_1ACBFF5AC(v15, 112, v201, v41, v193, v38, v39, v40);
        }
        else
        {
          *(_DWORD *)(v15 + 144) = v42 + 1;
          v43 = *(_QWORD *)(v15 + 136) + 40 * v42;
          *(_DWORD *)v43 = 112;
          *(_DWORD *)(v43 + 4) = v201;
          *(_DWORD *)(v43 + 8) = v41;
          *(_DWORD *)(v43 + 12) = v193;
          *(_QWORD *)(v43 + 24) = 0;
          *(_QWORD *)(v43 + 32) = 0;
          *(_QWORD *)(v43 + 16) = 0;
        }
        v44 = *(_QWORD *)(a1 + 16);
        v45 = sub_1ACC09130((_DWORD *)a1, v30);
        if (v45)
        {
          if (*(_BYTE *)(*(_QWORD *)v44 + 103))
          {
            if (!*(_QWORD *)(*(_QWORD *)v44 + 816) && (*(_DWORD *)v45)-- == 1)
              sub_1ACBF0674(*(_QWORD **)(v45 + 16), (_QWORD *)v45);
          }
          else
          {
            v50 = *(_QWORD *)(v44 + 136) + 40 * *(int *)(v44 + 144);
            *(_BYTE *)(v50 - 39) = -8;
            *(_QWORD *)(v50 - 24) = v45;
          }
        }
        v51 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v51)
        {
          sub_1ACBFF5AC(v15, 71, v34, v202, 0, v46, v47, v48);
        }
        else
        {
          *(_DWORD *)(v15 + 144) = v51 + 1;
          v52 = *(_QWORD *)(v15 + 136) + 40 * v51;
          *(_DWORD *)v52 = 71;
          *(_DWORD *)(v52 + 4) = v34;
          *(_DWORD *)(v52 + 8) = v202;
          *(_QWORD *)(v52 + 12) = 0;
          *(_QWORD *)(v52 + 28) = 0;
          *(_QWORD *)(v52 + 20) = 0;
          *(_DWORD *)(v52 + 36) = 0;
        }
        v53 = v201;
        v54 = *(unsigned __int16 *)(v30 + 94);
        v55 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v55)
        {
          sub_1ACBFF5AC(v15, 71, v54, v191, 0, v46, v47, v48);
        }
        else
        {
          *(_DWORD *)(v15 + 144) = v55 + 1;
          v56 = *(_QWORD *)(v15 + 136) + 40 * v55;
          *(_DWORD *)v56 = 71;
          *(_DWORD *)(v56 + 4) = v54;
          *(_DWORD *)(v56 + 8) = v191;
          *(_QWORD *)(v56 + 12) = 0;
          *(_QWORD *)(v56 + 28) = 0;
          *(_QWORD *)(v56 + 20) = 0;
          *(_DWORD *)(v56 + 36) = 0;
        }
        v57 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v57)
        {
          v194 = sub_1ACBFF5AC(v15, 36, v201, 0, 0, v46, v47, v48);
        }
        else
        {
          v194 = *(_DWORD *)(v15 + 144);
          *(_DWORD *)(v15 + 144) = v57 + 1;
          v58 = *(_QWORD *)(v15 + 136) + 40 * v57;
          *(_DWORD *)v58 = 36;
          *(_DWORD *)(v58 + 4) = v201;
          *(_OWORD *)(v58 + 8) = 0u;
          *(_OWORD *)(v58 + 24) = 0u;
        }
        v59 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v59)
        {
          sub_1ACBFF5AC(v15, 98, v201, v200, 1, v46, v47, v48);
        }
        else
        {
          *(_DWORD *)(v15 + 144) = v59 + 1;
          v60 = *(_QWORD *)(v15 + 136) + 40 * v59;
          *(_DWORD *)v60 = 98;
          *(_DWORD *)(v60 + 4) = v201;
          *(_DWORD *)(v60 + 8) = v200;
          *(_DWORD *)(v60 + 12) = 1;
          *(_QWORD *)(v60 + 24) = 0;
          *(_QWORD *)(v60 + 32) = 0;
          *(_QWORD *)(v60 + 16) = 0;
        }
        v61 = *(unsigned int *)(v198 + 768);
        v62 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v62)
        {
          sub_1ACBFF5AC(v15, 71, v61, v190, 0, v46, v47, v48);
        }
        else
        {
          *(_DWORD *)(v15 + 144) = v62 + 1;
          v63 = *(_QWORD *)(v15 + 136) + 40 * v62;
          *(_DWORD *)v63 = 71;
          *(_DWORD *)(v63 + 4) = v61;
          *(_DWORD *)(v63 + 8) = v190;
          *(_QWORD *)(v63 + 12) = 0;
          *(_QWORD *)(v63 + 28) = 0;
          *(_QWORD *)(v63 + 20) = 0;
          *(_DWORD *)(v63 + 36) = 0;
        }
        v64 = *(_QWORD *)(a1 + 16);
        v65 = sub_1ACBE1124(*(_QWORD *)a1, 0x50uLL);
        if (v65)
        {
          *(_QWORD *)v65 = 0;
          *(_QWORD *)(v65 + 8) = &unk_1E5C74810;
          *(_QWORD *)(v65 + 24) = 0;
          *(_BYTE *)(v65 + 42) = 4;
          *(_QWORD *)(v65 + 32) = *(unsigned int *)(v64 + 144);
          sub_1ACBA86CC((uint64_t *)v64, 66, 0, v202, v195, v65, 4294967281, v68);
          v69 = *(_DWORD *)(v64 + 144);
          v70 = __OFSUB__(v69, 1);
          v71 = v69 - 1;
          if (v71 < 0 == v70)
            *(_WORD *)(*(_QWORD *)(v64 + 136) + 40 * v71 + 2) = 0;
          v72 = *(_QWORD *)(a1 + 168);
          if (!v72)
            v72 = a1;
          *(_BYTE *)(v72 + 33) = 1;
        }
        v73 = *(_DWORD *)(v15 + 144);
        if (*(_DWORD *)(v15 + 148) <= v73)
        {
          sub_1ACBFF5AC(v15, 71, 0, v202, 0, v66, v67, v68);
          if (v36 < 2)
          {
LABEL_81:
            v196 = *(unsigned int *)(v15 + 144);
            v32 = v200;
LABEL_127:
            v112 = *(_QWORD *)(a1 + 16);
            v113 = sub_1ACBE1124(*(_QWORD *)a1, 0x40uLL);
            if (v113)
            {
              *(_QWORD *)v113 = 0;
              *(_QWORD *)(v113 + 8) = &unk_1E5C74858;
              *(_QWORD *)(v113 + 24) = 0;
              *(_BYTE *)(v113 + 42) = 2;
              *(_QWORD *)(v113 + 32) = *(unsigned int *)(v112 + 144);
              sub_1ACBA86CC((uint64_t *)v112, 66, 1, v195, v32, v113, 4294967281, v116);
              v117 = *(_DWORD *)(v112 + 144);
              v70 = __OFSUB__(v117, 1);
              v118 = v117 - 1;
              if (v118 < 0 == v70)
                *(_WORD *)(*(_QWORD *)(v112 + 136) + 40 * v118 + 2) = 0;
              v119 = *(_QWORD *)(a1 + 168);
              if (!v119)
                v119 = a1;
              *(_BYTE *)(v119 + 33) = 1;
            }
            v121 = *(_DWORD *)(v15 + 144);
            v120 = *(_DWORD *)(v15 + 148);
            if (*(_DWORD *)(v198 + 768))
            {
              if (v120 <= v121)
              {
                v121 = sub_1ACBFF5AC(v15, 50, v32, 0, 0, v114, v115, v116);
              }
              else
              {
                *(_DWORD *)(v15 + 144) = v121 + 1;
                v122 = *(_QWORD *)(v15 + 136) + 40 * v121;
                *(_DWORD *)v122 = 50;
                *(_DWORD *)(v122 + 4) = v32;
                *(_OWORD *)(v122 + 8) = 0u;
                *(_OWORD *)(v122 + 24) = 0u;
              }
              v124 = *(_DWORD *)(v15 + 144);
              if (*(_DWORD *)(v15 + 148) <= v124)
              {
                v124 = sub_1ACBFF5AC(v15, 16, v32, 0, 0, v114, v115, v116);
              }
              else
              {
                *(_DWORD *)(v15 + 144) = v124 + 1;
                v125 = *(_QWORD *)(v15 + 136) + 40 * v124;
                *(_DWORD *)v125 = 16;
                *(_DWORD *)(v125 + 4) = v32;
                *(_OWORD *)(v125 + 8) = 0u;
                *(_OWORD *)(v125 + 24) = 0u;
              }
              v126 = *(_DWORD *)(v15 + 144);
              if (*(_DWORD *)(v15 + 148) <= v126)
              {
                v126 = sub_1ACBFF7F0(v15, 24, v53, 0, v203, 1, v115, v116);
              }
              else
              {
                *(_DWORD *)(v15 + 144) = v126 + 1;
                v127 = *(_QWORD *)(v15 + 136) + 40 * v126;
                *(_DWORD *)v127 = 64792;
                *(_DWORD *)(v127 + 4) = v53;
                *(_DWORD *)(v127 + 8) = 0;
                *(_DWORD *)(v127 + 12) = v203;
                *(_DWORD *)(v127 + 16) = 1;
                *(_QWORD *)(v127 + 24) = 0;
                *(_QWORD *)(v127 + 32) = 0;
              }
              v128 = *(_DWORD *)(v15 + 144);
              v129 = &byte_1EECAD280;
              if (!*(_BYTE *)(*(_QWORD *)v15 + 103))
                v129 = (char *)(*(_QWORD *)(v15 + 136) + 40 * v121);
              *((_DWORD *)v129 + 2) = v128;
              if (*(_DWORD *)(v15 + 148) <= v128)
              {
                sub_1ACBFF5AC(v15, 39, v53, v196, 0, v114, v115, v116);
              }
              else
              {
                *(_DWORD *)(v15 + 144) = v128 + 1;
                v130 = *(_QWORD *)(v15 + 136) + 40 * v128;
                *(_DWORD *)v130 = 39;
                *(_DWORD *)(v130 + 4) = v53;
                *(_DWORD *)(v130 + 8) = v196;
                *(_QWORD *)(v130 + 12) = 0;
                *(_QWORD *)(v130 + 28) = 0;
                *(_QWORD *)(v130 + 20) = 0;
                *(_DWORD *)(v130 + 36) = 0;
              }
              v12 = v187;
              v9 = v188;
              v131 = *(_DWORD *)(v15 + 144);
              if (*(_BYTE *)(*(_QWORD *)v15 + 103))
              {
                v132 = &byte_1EECAD280;
                dword_1EECAD288 = *(_DWORD *)(v15 + 144);
              }
              else
              {
                v133 = *(_QWORD *)(v15 + 136);
                *(_DWORD *)(v133 + 40 * v124 + 8) = v131;
                v132 = (char *)(v133 + 40 * v126);
              }
              *((_DWORD *)v132 + 2) = v131;
              v10 = v186;
            }
            else
            {
              if (v120 <= v121)
              {
                sub_1ACBFF5AC(v15, 39, v53, v196, 0, v114, v115, v116);
              }
              else
              {
                *(_DWORD *)(v15 + 144) = v121 + 1;
                v123 = *(_QWORD *)(v15 + 136) + 40 * v121;
                *(_DWORD *)v123 = 39;
                *(_DWORD *)(v123 + 4) = v53;
                *(_DWORD *)(v123 + 8) = v196;
                *(_QWORD *)(v123 + 12) = 0;
                *(_QWORD *)(v123 + 28) = 0;
                *(_QWORD *)(v123 + 20) = 0;
                *(_DWORD *)(v123 + 36) = 0;
              }
              v12 = v187;
              v9 = v188;
            }
            v134 = *(_QWORD *)(a1 + 16);
            v135 = sub_1ACBE1124(*(_QWORD *)a1, 0x38uLL);
            if (v135)
            {
              *(_QWORD *)v135 = 0;
              *(_QWORD *)(v135 + 8) = &unk_1E5C748A0;
              *(_QWORD *)(v135 + 24) = 0;
              *(_BYTE *)(v135 + 42) = 1;
              *(_QWORD *)(v135 + 32) = *(unsigned int *)(v134 + 144);
              sub_1ACBA86CC((uint64_t *)v134, 66, 0, v195, v185, v135, 4294967281, v136);
              v137 = *(_DWORD *)(v134 + 144);
              v70 = __OFSUB__(v137, 1);
              v138 = v137 - 1;
              if (v138 < 0 == v70)
                *(_WORD *)(*(_QWORD *)(v134 + 136) + 40 * v138 + 2) = 0;
              v139 = *(_QWORD *)(a1 + 168);
              if (!v139)
                v139 = a1;
              *(_BYTE *)(v139 + 33) = 1;
            }
            sub_1ACBA86CC((uint64_t *)v15, 97, v189, 3, v32, (uint64_t)"BBB", 0, v136);
            v140 = *(_DWORD *)(v15 + 144);
            if (*(_DWORD *)(v15 + 148) <= v140)
            {
              sub_1ACBFF5AC(v15, 127, v10, v9, 0, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)(v15 + 144) = v140 + 1;
              v141 = *(_QWORD *)(v15 + 136) + 40 * v140;
              *(_DWORD *)v141 = 127;
              *(_DWORD *)(v141 + 4) = v10;
              *(_DWORD *)(v141 + 8) = v9;
              *(_QWORD *)(v141 + 12) = 0;
              *(_QWORD *)(v141 + 28) = 0;
              *(_QWORD *)(v141 + 20) = 0;
              *(_DWORD *)(v141 + 36) = 0;
            }
            v31 = v197;
            v142 = *(_DWORD *)(v15 + 144);
            if (*(_DWORD *)(v15 + 148) <= v142)
            {
              sub_1ACBFF5AC(v15, 128, v10, v32, v9, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)(v15 + 144) = v142 + 1;
              v143 = *(_QWORD *)(v15 + 136) + 40 * v142;
              *(_DWORD *)v143 = 128;
              *(_DWORD *)(v143 + 4) = v10;
              *(_DWORD *)(v143 + 8) = v32;
              *(_DWORD *)(v143 + 12) = v9;
              *(_QWORD *)(v143 + 24) = 0;
              *(_QWORD *)(v143 + 32) = 0;
              *(_QWORD *)(v143 + 16) = 0;
            }
            if (!*(_BYTE *)(*(_QWORD *)v15 + 103))
            {
              v144 = *(int *)(v15 + 144) - 1;
              v145 = *(_QWORD *)(v15 + 136);
              v146 = v145 + 40 * v144;
              v148 = *(unsigned __int8 *)(v146 + 1);
              v147 = (_BYTE *)(v146 + 1);
              if (v148)
              {
                sub_1ACBFF884((uint64_t *)v15, v145 + 40 * v144, __s, 0xFFFFFFFB);
              }
              else if (__s)
              {
                *(_QWORD *)(v145 + 40 * v144 + 16) = __s;
                *v147 = -5;
              }
            }
            v149 = *(_DWORD *)(v15 + 144);
            if (v149 >= 1)
              *(_WORD *)(*(_QWORD *)(v15 + 136) + 40 * (v149 - 1) + 2) = 8;
            v150 = &byte_1EECAD280;
            if (!*(_BYTE *)(*(_QWORD *)v15 + 103))
              v150 = (char *)(*(_QWORD *)(v15 + 136) + 40 * v194);
            *((_DWORD *)v150 + 2) = v149;
            goto LABEL_35;
          }
        }
        else
        {
          *(_DWORD *)(v15 + 144) = v73 + 1;
          v74 = *(_QWORD *)(v15 + 136) + 40 * v73;
          *(_QWORD *)v74 = 71;
          *(_DWORD *)(v74 + 8) = v202;
          *(_QWORD *)(v74 + 12) = 0;
          *(_QWORD *)(v74 + 28) = 0;
          *(_QWORD *)(v74 + 20) = 0;
          *(_DWORD *)(v74 + 36) = 0;
          if (v36 < 2)
            goto LABEL_81;
        }
        v75 = *(_DWORD *)(a1 + 68);
        v76 = (v75 - 1);
        *(_DWORD *)(a1 + 68) = v76;
        v77 = sub_1ACBE1124(v198, 4 * v37);
        if (v77)
        {
          v78 = (_QWORD *)v77;
          v79 = *(_DWORD *)(v15 + 144);
          v184 = v75;
          if (*(_DWORD *)(v15 + 148) <= v79)
          {
            sub_1ACBFF5AC(v15, 9, 0, 0, 0, v27, v28, v29);
          }
          else
          {
            *(_DWORD *)(v15 + 144) = v79 + 1;
            v80 = *(_QWORD *)(v15 + 136) + 40 * v79;
            *(_BYTE *)v80 = 9;
            *(_OWORD *)(v80 + 1) = 0u;
            *(_OWORD *)(v80 + 17) = 0u;
            *(_QWORD *)(v80 + 32) = 0;
          }
          v81 = *(unsigned int *)(v15 + 144);
          if ((_DWORD)v37 == 1 && *(_WORD *)(v30 + 94) == 1 && *(_BYTE *)(v30 + 98))
          {
            if (*(_DWORD *)(v15 + 148) <= (int)v81)
            {
              sub_1ACBFF5AC(v15, 51, v203, v76, 0, v27, v28, v29);
            }
            else
            {
              *(_DWORD *)(v15 + 144) = v81 + 1;
              v82 = *(_QWORD *)(v15 + 136) + 40 * (int)v81;
              *(_DWORD *)v82 = 51;
              *(_DWORD *)(v82 + 4) = v203;
              *(_DWORD *)(v82 + 8) = v76;
              *(_QWORD *)(v82 + 12) = 0;
              *(_QWORD *)(v82 + 28) = 0;
              *(_QWORD *)(v82 + 20) = 0;
              *(_DWORD *)(v82 + 36) = 0;
            }
          }
          v183 = v76;
          v196 = v81;
          v83 = 0;
          do
          {
            v84 = *(char **)(*(_QWORD *)(v30 + 64) + 8 * v83);
            v85 = *(unsigned __int8 *)(*(_QWORD *)a1 + 100);
            v86 = *(unsigned __int8 *)(*(_QWORD *)a1 + 197);
            v87 = sub_1ACBFC650(*(_QWORD *)a1, *(unsigned __int8 *)(*(_QWORD *)a1 + 100), v84, v86);
            v92 = (uint64_t)v87;
            if (!v86 && (!v87 || !v87[3]))
              v92 = sub_1ACC01130(a1, v85, (uint64_t)v87, v84, v88, v89, v90, v91);
            v32 = v200;
            v53 = v201;
            v93 = *(_DWORD *)(v15 + 144);
            if (*(_DWORD *)(v15 + 148) <= v93)
            {
              sub_1ACBFF5AC(v15, 71, v83, v202, 0, v89, v90, v91);
            }
            else
            {
              *(_DWORD *)(v15 + 144) = v93 + 1;
              v94 = *(_QWORD *)(v15 + 136) + 40 * v93;
              *(_DWORD *)v94 = 71;
              *(_DWORD *)(v94 + 4) = v83;
              *(_DWORD *)(v94 + 8) = v202;
              *(_QWORD *)(v94 + 12) = 0;
              *(_QWORD *)(v94 + 28) = 0;
              *(_QWORD *)(v94 + 20) = 0;
              *(_DWORD *)(v94 + 36) = 0;
            }
            v95 = *(_DWORD *)(v15 + 144);
            if (*(_DWORD *)(v15 + 148) <= v95)
            {
              sub_1ACBFF5AC(v15, 94, v201, v83, v200, v89, v90, v91);
            }
            else
            {
              *(_DWORD *)(v15 + 144) = v95 + 1;
              v96 = *(_QWORD *)(v15 + 136) + 40 * v95;
              *(_DWORD *)v96 = 94;
              *(_DWORD *)(v96 + 4) = v201;
              *(_DWORD *)(v96 + 8) = v83;
              *(_DWORD *)(v96 + 12) = v200;
              *(_QWORD *)(v96 + 24) = 0;
              *(_QWORD *)(v96 + 32) = 0;
              *(_QWORD *)(v96 + 16) = 0;
            }
            *((_DWORD *)v78 + v83) = sub_1ACBA86CC((uint64_t *)v15, 52, v200, 0, v83 + v203, v92, 4294967294, v91);
            v100 = *(_DWORD *)(v15 + 144);
            if (v100 >= 1)
              *(_WORD *)(*(_QWORD *)(v15 + 136) + 40 * (v100 - 1) + 2) = 128;
            ++v83;
          }
          while (v37 != v83);
          if (*(_DWORD *)(v15 + 148) <= v100)
          {
            sub_1ACBFF5AC(v15, 71, v37, v202, 0, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)(v15 + 144) = v100 + 1;
            v101 = *(_QWORD *)(v15 + 136) + 40 * v100;
            *(_DWORD *)v101 = 71;
            *(_DWORD *)(v101 + 4) = v37;
            *(_DWORD *)(v101 + 8) = v202;
            *(_QWORD *)(v101 + 12) = 0;
            *(_QWORD *)(v101 + 28) = 0;
            *(_QWORD *)(v101 + 20) = 0;
            *(_DWORD *)(v101 + 36) = 0;
          }
          v102 = *(_DWORD *)(v15 + 144);
          if (*(_DWORD *)(v15 + 148) <= v102)
          {
            sub_1ACBFF5AC(v15, 9, 0, v183, 0, v97, v98, v99);
          }
          else
          {
            *(_DWORD *)(v15 + 144) = v102 + 1;
            v103 = *(_QWORD *)(v15 + 136) + 40 * v102;
            *(_QWORD *)v103 = 9;
            *(_DWORD *)(v103 + 8) = v183;
            *(_QWORD *)(v103 + 12) = 0;
            *(_QWORD *)(v103 + 28) = 0;
            *(_QWORD *)(v103 + 20) = 0;
            *(_DWORD *)(v103 + 36) = 0;
          }
          v11 = v181;
          v104 = &byte_1EECAD280;
          if (!*(_BYTE *)(*(_QWORD *)v15 + 103))
            v104 = (char *)(*(_QWORD *)(v15 + 136) + 40 * ((int)v196 - 1));
          v105 = 0;
          *((_DWORD *)v104 + 2) = *(_DWORD *)(v15 + 144);
          do
          {
            v107 = *(_DWORD *)(v15 + 144);
            v108 = &byte_1EECAD280;
            if (!*(_BYTE *)(*(_QWORD *)v15 + 103))
              v108 = (char *)(*(_QWORD *)(v15 + 136) + 40 * *((int *)v78 + v105));
            *((_DWORD *)v108 + 2) = v107;
            v109 = v199 + v105;
            if (*(_DWORD *)(v15 + 148) > v107)
            {
              *(_DWORD *)(v15 + 144) = v107 + 1;
              v106 = *(_QWORD *)(v15 + 136) + 40 * v107;
              *(_DWORD *)v106 = 94;
              *(_DWORD *)(v106 + 4) = v201;
              *(_DWORD *)(v106 + 8) = v105;
              *(_DWORD *)(v106 + 12) = v109;
              *(_QWORD *)(v106 + 24) = 0;
              *(_QWORD *)(v106 + 32) = 0;
              *(_QWORD *)(v106 + 16) = 0;
            }
            else
            {
              sub_1ACBFF5AC(v15, 94, v201, v105, v109, v97, v98, v99);
            }
            ++v105;
          }
          while (v37 != v105);
          v110 = *(_QWORD *)(v15 + 24);
          v111 = -v184;
          if (*(_DWORD *)(v110 + 68) + *(_DWORD *)(v110 + 72) < 0)
            sub_1ACC0D5D4(v110, v15, v111);
          else
            *(_DWORD *)(*(_QWORD *)(v110 + 80) + 4 * v111) = *(_DWORD *)(v15 + 144);
          v10 = v186;
          sub_1ACBE0F9C((_QWORD *)v198, v78);
          goto LABEL_127;
        }
        v12 = v187;
        v9 = v188;
        v32 = v200;
        v31 = v197;
      }
LABEL_35:
      v30 = *(_QWORD *)(v30 + 40);
      if (!v30)
        goto LABEL_178;
    }
  }
  v31 = 1;
  v32 = v200;
LABEL_178:
  if (!v11 && v31)
  {
    sub_1ACBFF554(v15, 98, v180, v185, v26, v27, v28, v29);
    v156 = v32;
    v157 = sub_1ACC08D28(v15, 17, v185, v151, v152, v153, v154, v155);
    sub_1ACBFF554(v15, 75, 0, v192, v158, v159, v160, v161);
    sub_1ACBA86CC((uint64_t *)v15, 97, v189, 3, v156, (uint64_t)"BBB", 0, v162);
    sub_1ACBFF554(v15, 127, v10, v9, v163, v164, v165, v166);
    sub_1ACB683F4(v15, 128, v10, v156, v9, v167, v168, v169);
    v170 = *(_DWORD *)(v15 + 144);
    v70 = __OFSUB__(v170, 1);
    v171 = v170 - 1;
    if (v171 < 0 == v70)
      *(_WORD *)(*(_QWORD *)(v15 + 136) + 40 * v171 + 2) = 8;
    sub_1ACB788AC((uint64_t *)v15, -1, (uint64_t)__s, 0xFFFFFFFB);
    if (*(_BYTE *)(*(_QWORD *)v15 + 103))
      v172 = &byte_1EECAD280;
    else
      v172 = (char *)(*(_QWORD *)(v15 + 136) + 40 * v157);
    *((_DWORD *)v172 + 2) = *(_DWORD *)(v15 + 144);
  }
}

void sub_1ACC38AD0(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  double v7;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  double v11;
  int v12;
  size_t v13;
  _QWORD *v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;

  if (a1 && *(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v6 = *a3;
    if (!*a3)
    {
LABEL_4:
      sub_1ACBBE20C(89699);
      LODWORD(v7) = 0;
      goto LABEL_8;
    }
  }
  else
  {
    sub_1ACBBE20C(97935);
    v5 = 0;
    v6 = *a3;
    if (!*a3)
      goto LABEL_4;
  }
  v8 = *(_WORD *)(v6 + 20);
  if ((v8 & 0x24) != 0)
  {
    v7 = *(double *)v6;
  }
  else if ((v8 & 8) != 0)
  {
    v21 = *(double *)v6;
    if (*(double *)v6 >= -9.22337204e18)
    {
      if (v21 <= 9.22337204e18)
        *(_QWORD *)&v7 = (uint64_t)v21;
      else
        LODWORD(v7) = -1;
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  else if ((v8 & 0x12) != 0 && *(_QWORD *)(v6 + 8))
  {
    LODWORD(v7) = sub_1ACBF2FC0(v6);
  }
  else
  {
    LODWORD(v7) = 0;
  }
LABEL_8:
  v9 = a3[1];
  if (!v9)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_12;
  }
  v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 0x24) != 0)
  {
    v11 = *(double *)v9;
    goto LABEL_13;
  }
  if ((v10 & 8) == 0)
  {
    if ((v10 & 0x12) != 0 && *(_QWORD *)(v9 + 8))
    {
      LODWORD(v11) = sub_1ACBF2FC0(v9);
      goto LABEL_13;
    }
LABEL_12:
    LODWORD(v11) = 0;
    goto LABEL_13;
  }
  v22 = *(double *)v9;
  if (*(double *)v9 >= -9.22337204e18)
  {
    if (v22 <= 9.22337204e18)
      *(_QWORD *)&v11 = (uint64_t)v22;
    else
      LODWORD(v11) = -1;
  }
  else
  {
    LODWORD(v11) = 0;
  }
LABEL_13:
  v12 = 16 * LODWORD(v7) + 56;
  v13 = v12;
  if (v5)
  {
    v14 = (_QWORD *)sub_1ACBE1124(v5, v12);
    if (v14)
      goto LABEL_15;
LABEL_19:
    sqlite3_result_error_nomem(a1);
    return;
  }
  v14 = (_QWORD *)sub_1ACB5D828(v12);
  if (!v14)
    goto LABEL_19;
LABEL_15:
  bzero(v14, v13);
  *v14 = v5;
  v15 = a3[2];
  if (!v15)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_29;
  }
  v16 = *(_WORD *)(v15 + 20);
  if ((v16 & 0x24) != 0)
  {
    v17 = *(_QWORD *)v15;
    goto LABEL_30;
  }
  if ((v16 & 8) == 0)
  {
    if ((v16 & 0x12) != 0 && *(_QWORD *)(v15 + 8))
    {
      v17 = sub_1ACBF2FC0(v15);
      goto LABEL_30;
    }
LABEL_29:
    v17 = 0;
    goto LABEL_30;
  }
  v23 = *(double *)v15;
  if (*(double *)v15 >= -9.22337204e18)
  {
    if (v23 <= 9.22337204e18)
      v17 = (uint64_t)v23;
    else
      v17 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v17 = 0x8000000000000000;
  }
LABEL_30:
  v14[1] = v17;
  v14[2] = 0;
  v18 = a3[3];
  if (!v18)
  {
    sub_1ACBBE20C(89699);
LABEL_34:
    LODWORD(v20) = 0;
    goto LABEL_35;
  }
  v19 = *(_WORD *)(v18 + 20);
  if ((v19 & 0x24) != 0)
  {
    v20 = *(double *)v18;
    goto LABEL_35;
  }
  if ((v19 & 8) != 0)
  {
    v24 = *(double *)v18;
    if (*(double *)v18 >= -9.22337204e18)
    {
      if (v24 <= 9.22337204e18)
        *(_QWORD *)&v20 = (uint64_t)v24;
      else
        LODWORD(v20) = -1;
    }
    else
    {
      LODWORD(v20) = 0;
    }
    goto LABEL_35;
  }
  if ((v19 & 0x12) == 0 || !*(_QWORD *)(v18 + 8))
    goto LABEL_34;
  LODWORD(v20) = sub_1ACBF2FC0(v18);
LABEL_35:
  *((_DWORD *)v14 + 6) = LODWORD(v20);
  *((_DWORD *)v14 + 7) = LODWORD(v7);
  *((_DWORD *)v14 + 8) = LODWORD(v11);
  *((_BYTE *)v14 + 36) = 0;
  v14[5] = &v14[SLODWORD(v7) + 7];
  v14[6] = v14 + 7;
  if (a1)
    sub_1ACBC69D0((uint64_t)a1, (char *)v14, 56, 0, (uint64_t (*)(uint64_t))sub_1ACC38E30);
  else
    sub_1ACBBE20C(97348);
}

_QWORD *sub_1ACC38E30(_QWORD *a1)
{
  return sub_1ACBE0F9C((_QWORD *)*a1, a1);
}

void sub_1ACC38E3C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  uint64_t v9;
  int64x2_t *v10;
  unint64_t v11;
  int64x2_t *v12;
  int64x2_t v13;
  unint64_t v14;
  int64x2_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;
  int64x2_t *v28;
  int64x2_t *v29;
  int64x2_t v30;
  unint64_t v31;
  int64x2_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _BOOL8 v38;
  uint64_t v39;
  uint64_t v40;

  v5 = (unsigned int *)sqlite3_value_blob(*(sqlite3_value **)a3);
  v6 = *(_QWORD *)(a3 + 8);
  if (!v6)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_7;
  }
  v7 = *(_WORD *)(v6 + 20);
  if ((v7 & 0x24) == 0)
  {
    if ((v7 & 8) != 0)
    {
      LODWORD(v40) = -1;
      if (*(double *)v6 <= 9.22337204e18)
        v40 = (uint64_t)*(double *)v6;
      if (*(double *)v6 >= -9.22337204e18)
        v8 = v40;
      else
        v8 = 0;
      if (!*((_QWORD *)v5 + 2))
        goto LABEL_4;
      goto LABEL_8;
    }
    if ((v7 & 0x12) != 0 && *(_QWORD *)(v6 + 8))
    {
      v8 = sub_1ACBF2FC0(v6);
      if (*((_QWORD *)v5 + 2))
        goto LABEL_8;
LABEL_4:
      v9 = v5[7];
      if ((int)v9 >= 1)
        memset_pattern16(*((void **)v5 + 5), &unk_1ACCBDE60, 8 * v9);
      goto LABEL_33;
    }
LABEL_7:
    v8 = 0;
    if (*((_QWORD *)v5 + 2))
      goto LABEL_8;
    goto LABEL_4;
  }
  v8 = *(_DWORD *)v6;
  if (!*((_QWORD *)v5 + 2))
    goto LABEL_4;
LABEL_8:
  if (v8 >= 1)
  {
    v10 = (int64x2_t *)*((_QWORD *)v5 + 5);
    if (v8 >= 4uLL)
    {
      v11 = v8 - (unint64_t)(v8 & 3);
      v12 = v10 + 1;
      v13 = vdupq_n_s64(1uLL);
      v14 = v11;
      do
      {
        v15 = vaddq_s64(*v12, v13);
        v12[-1] = vaddq_s64(v12[-1], v13);
        *v12 = v15;
        v12 += 2;
        v14 -= 4;
      }
      while (v14);
      if ((v8 & 3) == 0)
        goto LABEL_21;
    }
    else
    {
      v11 = 0;
    }
    v16 = &v10->i64[v11];
    v17 = v8 - v11;
    do
    {
      ++*v16++;
      --v17;
    }
    while (v17);
  }
LABEL_21:
  v18 = (int)v5[7];
  if ((int)v18 > v8)
  {
    v19 = *((_QWORD *)v5 + 5);
    v20 = *((_QWORD *)v5 + 6);
    v21 = v8;
    v22 = v18 - v8;
    if (v22 < 6)
      goto LABEL_31;
    v23 = 8 * v8;
    v24 = v20 + v23;
    v25 = v19 + v23;
    if (v24 < v19 + 8 * v18 && v25 < v20 + 8 * v18)
      goto LABEL_31;
    v27 = 8 * v8 + 16;
    v28 = (int64x2_t *)(v20 + v27);
    v29 = (int64x2_t *)(v19 + v27);
    v30 = vdupq_n_s64(1uLL);
    v31 = v22 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v32 = vaddq_s64(*v28, v30);
      v28[-1] = vaddq_s64(v28[-1], v30);
      *v28 = v32;
      v29[-1] = v30;
      *v29 = v30;
      v28 += 2;
      v29 += 2;
      v31 -= 4;
    }
    while (v31);
    v21 = v8 + (v22 & 0xFFFFFFFFFFFFFFFCLL);
    if (v22 != (v22 & 0xFFFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      v33 = (_QWORD *)(v20 + 8 * v21);
      v34 = (_QWORD *)(v19 + 8 * v21);
      v35 = v18 - v21;
      do
      {
        ++*v33++;
        *v34++ = 1;
        --v35;
      }
      while (v35);
    }
  }
LABEL_33:
  v36 = *((_QWORD *)v5 + 2) + 1;
  *((_QWORD *)v5 + 2) = v36;
  v37 = (int)v5[6];
  if ((_DWORD)v37 && v36 > v37 + (int)v37 * (unint64_t)*((unsigned __int8 *)v5 + 36))
  {
    ++*((_BYTE *)v5 + 36);
    if (a1)
    {
      v38 = **((_QWORD **)v5 + 6) != 0;
      v39 = *a1;
      if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v39, v38);
      }
      else
      {
        *(_QWORD *)v39 = v38;
        *(_WORD *)(v39 + 20) = 4;
      }
    }
    else
    {
      sub_1ACBBE20C(97413);
    }
  }
}

void sub_1ACC390F8(_DWORD *a1, uint64_t a2, sqlite3_value **a3)
{
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  int v15;
  int v16;
  uint64_t v17;

  v4 = sqlite3_value_blob(*a3);
  v5 = v4;
  v17 = 0;
  v6 = 100 * v4[8] + 100;
  v14[0] = 0;
  v14[1] = 0;
  v15 = 0;
  v16 = v6;
  v7 = 2;
  if (!*((_BYTE *)v4 + 36))
    v7 = 4;
  sqlite3_str_appendf((sqlite3_str *)v14, "%llu", *(_QWORD *)&v4[v7]);
  if ((int)v5[8] >= 1)
  {
    v8 = 0;
    do
    {
      v9 = *(_QWORD *)(*((_QWORD *)v5 + 6) + 8 * v8);
      v10 = v9 + 1;
      v11 = *((_QWORD *)v5 + 2);
      v12 = (v11 + v9) / (unint64_t)(v9 + 1);
      if (10 * v11 <= (unint64_t)(11 * v10))
        v13 = 1;
      else
        v13 = 2;
      if (v12 == 2)
        v12 = v13;
      sqlite3_str_appendf((sqlite3_str *)v14, " %llu", v12);
      ++v8;
    }
    while (v8 < (int)v5[8]);
  }
  sub_1ACC39204(a1, (uint64_t)v14);
}

void sub_1ACC39204(_DWORD *a1, uint64_t a2)
{
  uint64_t v3;
  char *v4;
  int v5;
  char v6;
  _QWORD *v7;

  v3 = *(unsigned __int8 *)(a2 + 28);
  if (*(_BYTE *)(a2 + 28))
  {
    if (a1)
    {
      a1[9] = v3;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
      {
        if ((_DWORD)v3 == 100)
        {
          v4 = "another row available";
        }
        else if ((_DWORD)v3 == 101)
        {
          v4 = "no more rows available";
        }
        else if (v3 > 0x1C || ((0x1410004uLL >> v3) & 1) != 0)
        {
          v4 = "unknown error";
        }
        else
        {
          v4 = off_1E5C74AE8[v3];
        }
        v5 = -1;
        goto LABEL_21;
      }
    }
    else
    {
      sub_1ACBBE20C(97602);
    }
  }
  else
  {
    if ((*(_BYTE *)(a2 + 29) & 4) != 0)
    {
      if (a1)
        sub_1ACBC69D0((uint64_t)a1, *(char **)(a2 + 8), *(_DWORD *)(a2 + 24), 1u, sub_1ACBD0E78);
      else
        sub_1ACBBE20C(97480);
      return;
    }
    if (a1)
    {
      v4 = &byte_1ACCBEAEE;
      v5 = 0;
LABEL_21:
      sub_1ACBC69D0((uint64_t)a1, v4, v5, 1u, 0);
      goto LABEL_22;
    }
    sub_1ACBBE20C(97480);
  }
LABEL_22:
  v6 = *(_BYTE *)(a2 + 29);
  if ((v6 & 4) != 0)
  {
    v7 = *(_QWORD **)(a2 + 8);
    if (v7)
    {
      sub_1ACBE0F9C(*(_QWORD **)a2, v7);
      v6 = *(_BYTE *)(a2 + 29);
    }
    *(_BYTE *)(a2 + 29) = v6 & 0xFB;
  }
  *(_DWORD *)(a2 + 16) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 8) = 0;
}

uint64_t sub_1ACC3934C(uint64_t a1, unsigned __int8 **a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  char *v17;
  int v18;
  int v19;
  uint64_t v20;

  v8 = *a2;
  if (*a2)
  {
    v9 = *v8;
    if (!*v8)
    {
      v18 = 0;
      v17 = "sqlite_";
      goto LABEL_30;
    }
    if ((v9 & 0xFFFFFFDF) == 0x53)
    {
      v10 = v8[1];
      if (!v8[1])
      {
        v18 = 0;
        v17 = "qlite_";
        goto LABEL_30;
      }
      if ((v10 & 0xFFFFFFDF) == 0x51)
      {
        v11 = v8[2];
        if (!v8[2])
        {
          v18 = 0;
          v17 = "lite_";
          goto LABEL_30;
        }
        if ((v11 & 0xFFFFFFDF) == 0x4C)
        {
          v12 = v8[3];
          if (!v8[3])
          {
            v18 = 0;
            v17 = "ite_";
            goto LABEL_30;
          }
          if ((v12 & 0xFFFFFFDF) == 0x49)
          {
            v13 = v8[4];
            if (!v8[4])
            {
              v18 = 0;
              v17 = "te_";
              goto LABEL_30;
            }
            if ((v13 & 0xFFFFFFDF) == 0x54)
            {
              v14 = v8[5];
              if (!v8[5])
              {
                v18 = 0;
                v17 = "e_";
                goto LABEL_30;
              }
              if ((v14 & 0xFFFFFFDF) == 0x45)
              {
                v15 = v8[6];
                if (!v8[6])
                {
                  v18 = 0;
                  v17 = "_";
LABEL_30:
                  if (v18 == byte_1ACCB6333[*v17])
                    goto LABEL_39;
                  goto LABEL_31;
                }
                if ((_DWORD)v15 == 95)
                  goto LABEL_39;
                v16 = &byte_1ACCB6333[v15];
                v17 = "_";
              }
              else
              {
                v16 = &byte_1ACCB6333[v14];
                v17 = "e_";
              }
            }
            else
            {
              v16 = &byte_1ACCB6333[v13];
              v17 = "te_";
            }
          }
          else
          {
            v16 = &byte_1ACCB6333[v12];
            v17 = "ite_";
          }
        }
        else
        {
          v16 = &byte_1ACCB6333[v11];
          v17 = "lite_";
        }
      }
      else
      {
        v16 = &byte_1ACCB6333[v10];
        v17 = "qlite_";
      }
    }
    else
    {
      v16 = &byte_1ACCB6333[v9];
      v17 = "sqlite_";
    }
    v18 = *v16;
    goto LABEL_30;
  }
LABEL_31:
  v19 = *((_DWORD *)a2 + 12);
  if ((v19 & 0x8000) == 0)
  {
    if ((v19 & 0x1000) == 0)
      return 0;
    v20 = *(_QWORD *)a1;
    if ((*(_BYTE *)(*(_QWORD *)a1 + 51) & 0x10) == 0
      || *(_QWORD *)(v20 + 592)
      || *(_DWORD *)(v20 + 220)
      || *(int *)(v20 + 564) >= 1 && !*(_QWORD *)(v20 + 600))
    {
      return 0;
    }
  }
LABEL_39:
  sub_1ACBCB308(a1, "table %s may not be altered", a3, a4, a5, a6, a7, a8, (char)*a2);
  return 1;
}

uint64_t sub_1ACC39544(uint64_t *a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  result = a1[2];
  if (result)
  {
    v12 = (**(_DWORD **)(*(_QWORD *)(*a1 + 32) + 32 * (int)a2 + 24) + 1);
    v13 = *(_DWORD *)(result + 144);
    if (*(_DWORD *)(result + 148) <= v13)
    {
      sub_1ACBFF5AC(result, 100, a2, 1, v12, a6, a7, a8);
    }
    else
    {
      *(_DWORD *)(result + 144) = v13 + 1;
      v14 = *(_QWORD *)(result + 136) + 40 * v13;
      *(_DWORD *)v14 = 100;
      *(_DWORD *)(v14 + 4) = a2;
      *(_DWORD *)(v14 + 8) = 1;
      *(_DWORD *)(v14 + 12) = v12;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 16) = 0;
    }
    result = sub_1ACC0F480(a1[2], a2, 0, a3, v12, a6, a7, a8);
    if ((_DWORD)a2 != 1)
      return sub_1ACC0F480(a1[2], 1, 0, a3, v15, v16, v17, v18);
  }
  return result;
}

uint64_t *sub_1ACC39620(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v8 = a3;
  *(_BYTE *)(a1 + 28) = 1;
  result = sub_1ACBB60F8((uint64_t *)a1, "SELECT 1 FROM \"%w\".sqlite_master WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X' AND sql NOT LIKE 'create virtual%%' AND sqlite_rename_test(%Q, sql, type, name, %d, %Q, %d)=NULL ", a3, a4, a5, a6, a7, a8, a2);
  if (!v8)
    return sub_1ACBB60F8((uint64_t *)a1, "SELECT 1 FROM temp.sqlite_master WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X' AND sql NOT LIKE 'create virtual%%' AND sqlite_rename_test(%Q, sql, type, name, 1, %Q, %d)=NULL ", v12, v13, v14, v15, v16, v17, a2);
  return result;
}

uint64_t *sub_1ACC396A0(uint64_t *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  int v9;
  uint64_t *result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = a3;
  result = sub_1ACBB60F8(a1, "UPDATE \"%w\".sqlite_master SET sql = sqlite_rename_quotefix(%Q, sql)WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X' AND sql NOT LIKE 'create virtual%%'", a3, a4, a5, a6, a7, a8, a2);
  if (!v9)
    return sub_1ACBB60F8(a1, "UPDATE temp.sqlite_master SET sql = sqlite_rename_quotefix('temp', sql)WHERE name NOT LIKE 'sqliteX_%%' ESCAPE 'X' AND sql NOT LIKE 'create virtual%%'", v12, v13, v14, v15, v16, v17, a9);
  return result;
}

unsigned __int8 *sub_1ACC396F8(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned int v4;
  uint64_t v5;
  uint64_t *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  __int128 v11;

  v2 = (unsigned __int8 *)a2;
  v10 = 0;
  v11 = 0u;
  v7 = 0;
  WORD2(v11) = 1;
  v8 = sub_1ACB8B0F4;
  v9 = sub_1ACC0B708;
  if (a2)
  {
    sub_1ACC0B714((uint64_t)&v7, a2);
    if (!WORD2(v11))
    {
      v4 = *((unsigned __int8 *)a1 + 302);
      if (v4 >= 2)
      {
        v11 = 0uLL;
        v7 = a1;
        v8 = sub_1ACC12814;
        v9 = sub_1ACC12880;
        v10 = 0;
        *((_BYTE *)a1 + 302) = 3;
        sub_1ACC0B714((uint64_t)&v7, (uint64_t)v2);
        *((_BYTE *)a1 + 302) = v4;
      }
      sub_1ACBF8348((_QWORD *)*a1, v2);
      v5 = sub_1ACBE1124(*a1, 0x50uLL);
      v2 = (unsigned __int8 *)v5;
      if (v5)
      {
        *(_OWORD *)(v5 + 32) = 0u;
        *(_OWORD *)(v5 + 48) = 0u;
        *(_OWORD *)(v5 + 64) = 0u;
        *(_OWORD *)v5 = 0u;
        *(_OWORD *)(v5 + 16) = 0u;
        *(_BYTE *)v5 = 121;
        *(_WORD *)(v5 + 52) = -1;
        *(_DWORD *)(v5 + 40) = 1;
      }
    }
  }
  return v2;
}

uint64_t sub_1ACC397F4()
{
  int has_internal_content;
  int v1;
  int v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  const char *v7;
  const char *v8;
  uint64_t result;
  const char *v10;
  const char *v11;

  dword_1ECD3B304 = 0;
  has_internal_content = os_variant_has_internal_content();
  if (has_internal_content)
    v1 = dword_1ECD3B304 | 0x20;
  else
    v1 = dword_1ECD3B304;
  v2 = v1 | 1;
  dword_1ECD3B304 = v1 | 1;
  v3 = getenv("SQLITE_ENABLE_LOGGING");
  if (!v3 || strcmp(v3, "0"))
  {
    if (!has_internal_content)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = v1 & 0xFFFFFFFE;
  dword_1ECD3B304 = v1 & 0xFFFFFFFE;
  if (has_internal_content)
  {
LABEL_7:
    v2 |= 2u;
    dword_1ECD3B304 = v2;
  }
LABEL_8:
  v4 = getenv("SQLITE_ENABLE_FILE_ASSERTIONS");
  if (v4)
  {
    if (!strcmp(v4, "0"))
      v2 &= ~2u;
    else
      v2 |= 6u;
    dword_1ECD3B304 = v2;
  }
  if (has_internal_content)
  {
    v2 |= 8u;
    dword_1ECD3B304 = v2;
  }
  v5 = getenv("SQLITE_ENABLE_THREAD_ASSERTIONS");
  if (v5)
  {
    if (!strcmp(v5, "0"))
      v2 &= ~8u;
    else
      v2 |= 0x18u;
    dword_1ECD3B304 = v2;
  }
  if (has_internal_content)
  {
    v2 |= 0x40u;
    dword_1ECD3B304 = v2;
  }
  v6 = getenv("SQLITE_ENABLE_VNODE_GUARDS");
  if (v6)
    dword_1ECD3B304 = v2 & 0xFFFFFFBF | ((strcmp(v6, "0") != 0) << 6);
  if (dyld_get_program_sdk_version() >> 8 > 0xC02 || (v7 = getprogname(), !strcmp(v7, "xctest")))
    dword_1ECD3B304 |= 0x80u;
  v8 = getprogname();
  result = strcmp(v8, "testfixture");
  if ((_DWORD)result)
  {
    v10 = getprogname();
    result = strcmp(v10, "sqlite3");
    if ((_DWORD)result)
    {
      result = dyld_program_sdk_at_least();
      if ((result & 1) != 0 || (v11 = getprogname(), result = strcmp(v11, "xctest"), !(_DWORD)result))
        dword_1ECD3B304 |= 0x100u;
    }
  }
  return result;
}

void sub_1ACC399AC(uint64_t a1)
{
  if (a1)
    sub_1ACBC69D0(a1, (char *)sqlite3_version, -1, 1u, 0);
  else
    sub_1ACBBE20C(97480);
}

void sub_1ACC399D4(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  const char *v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v4 = *a3;
  if (*a3)
  {
    v5 = *(unsigned __int16 *)(v4 + 20);
    if ((~v5 & 0x202) == 0 && *(_BYTE *)(v4 + 22) == 1)
    {
      v6 = *(const char **)(v4 + 8);
      if (!v6)
        return;
      goto LABEL_8;
    }
    if ((v5 & 1) == 0)
    {
      v6 = (const char *)sub_1ACBF2B64((int *)v4, 1);
      if (v6)
      {
LABEL_8:
        v7 = sqlite3_compileoption_used(v6);
        if (a1)
        {
          v8 = v7;
          v9 = *a1;
          if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v9, v8);
          }
          else
          {
            *(_QWORD *)v9 = v8;
            *(_WORD *)(v9 + 20) = 4;
          }
        }
        else
        {
          sub_1ACBBE20C(97413);
        }
      }
    }
  }
}

void sub_1ACC39A80(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  __int16 v5;
  char *v6;
  double v7;

  v4 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_8;
  }
  v5 = *(_WORD *)(v4 + 20);
  if ((v5 & 0x24) != 0)
  {
    LODWORD(v4) = *(_DWORD *)v4;
    goto LABEL_4;
  }
  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x12) != 0 && *(_QWORD *)(v4 + 8))
    {
      LODWORD(v4) = sub_1ACBF2FC0(v4);
      goto LABEL_4;
    }
LABEL_8:
    LODWORD(v4) = 0;
    goto LABEL_9;
  }
  v7 = *(double *)v4;
  if (*(double *)v4 < -9.22337204e18)
  {
    LODWORD(v4) = 0;
    goto LABEL_9;
  }
  if (v7 <= 9.22337204e18)
  {
    v4 = (uint64_t)v7;
LABEL_4:
    if (v4 > 0x44)
      goto LABEL_5;
LABEL_9:
    v6 = off_1E5C754F8[v4];
    if (!a1)
      goto LABEL_6;
    goto LABEL_10;
  }
LABEL_5:
  v6 = 0;
  if (!a1)
  {
LABEL_6:
    sub_1ACBBE20C(97480);
    return;
  }
LABEL_10:
  sub_1ACBC69D0(a1, v6, -1, 1u, 0);
}

void sub_1ACC39B60(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  int *v15;
  uint64_t v16;
  char **v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int *v23;
  const void **v24;
  size_t v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  _BYTE *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int *v34;
  const void **v35;
  size_t v36;
  unsigned int v37;
  uint64_t v38;
  void (**v39)(char **);
  uint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  unsigned int v43;
  char v44;
  int *v45;
  _BYTE *v46;

  v6 = *a3;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v6 + 20)) & 1) != 0)
      return;
  }
  else
  {
    sub_1ACBBE20C(97202);
    v6 = *a3;
    if (!*a3)
      return;
  }
  v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
  {
    if ((v7 & 1) != 0)
      return;
    v8 = (char *)sub_1ACBF2B64((int *)v6, 1);
    if (!v8)
      return;
  }
  else
  {
    v8 = *(char **)(v6 + 8);
    if (!v8)
      return;
  }
  v9 = *a3;
  if (*a3)
  {
    v10 = *(_WORD *)(v9 + 20);
    if ((v10 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
    {
      v11 = *(_DWORD *)(v9 + 16);
      if (a2 != 1)
        goto LABEL_22;
LABEL_29:
      v14 = 0;
      v15 = &dword_1ACCBA798;
      LODWORD(v16) = 1;
      v17 = off_1E5C748E8;
LABEL_30:
      if (a1 && (v18 = *((_QWORD *)a1 + 1)) != 0)
      {
        v19 = *(_DWORD *)(v18 + 8);
        v45 = v15;
        v46 = v14;
        if ((v19 & 1) != 0 && v11)
        {
          v20 = v16;
          v21 = v11;
          while (2)
          {
            v22 = v20;
            v23 = v15;
            v24 = (const void **)v17;
            while (1)
            {
              v26 = *v23++;
              v25 = v26;
              if (v21 >= v26 && !memcmp(v8, *v24, v25))
                break;
              ++v24;
              if (!--v22)
              {
                v11 = v21;
                v15 = v45;
                v14 = v46;
                goto LABEL_53;
              }
            }
            v11 = 0;
            v8 += v25;
            v21 -= v25;
            v15 = v45;
            v14 = v46;
            v20 = v16;
            if (v21)
              continue;
            break;
          }
        }
        else
        {
LABEL_53:
          if ((v19 & 2) != 0 && v11)
          {
            v32 = v11;
            while (2)
            {
              v33 = v16;
              v34 = v15;
              v35 = (const void **)v17;
              while (1)
              {
                v37 = *v34++;
                v36 = v37;
                if (v32 >= v37)
                {
                  v38 = v32 - v36;
                  if (!memcmp(&v8[v38], *v35, v36))
                    break;
                }
                ++v35;
                if (!--v33)
                {
                  v11 = v32;
                  goto LABEL_63;
                }
              }
              v32 = v38;
              v15 = v45;
              if ((_DWORD)v38)
                continue;
              break;
            }
            v11 = 0;
LABEL_63:
            v14 = v46;
          }
        }
      }
      else
      {
        sub_1ACBBE20C(97914);
      }
      if (!v14)
        goto LABEL_71;
      v39 = (void (**)(char **))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v17);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v17);
        v17 = (char **)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_71;
        v39 = (void (**)(char **))&xmmword_1ECD3B1D0;
      }
      (*v39)(v17);
LABEL_71:
      if (a1)
        sub_1ACBC69D0((uint64_t)a1, v8, v11, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      else
        sub_1ACBBE20C(97480);
      return;
    }
    if ((v10 & 0x10) != 0)
    {
      v11 = *(_DWORD *)(v9 + 16);
      if ((*(_WORD *)(v9 + 20) & 0x400) != 0)
        v11 += *(_DWORD *)v9;
      if (a2 != 1)
        goto LABEL_22;
      goto LABEL_29;
    }
    if ((v10 & 1) == 0)
    {
      v11 = sub_1ACBF2B3C(v9, 1);
      if (a2 != 1)
        goto LABEL_22;
      goto LABEL_29;
    }
  }
  else
  {
    sub_1ACBBE20C(91120);
  }
  v11 = 0;
  if (a2 == 1)
    goto LABEL_29;
LABEL_22:
  v12 = a3[1];
  if (!v12)
    return;
  v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0)
      return;
    v14 = (_BYTE *)sub_1ACBF2B64((int *)v12, 1);
  }
  else
  {
    v14 = *(_BYTE **)(v12 + 8);
  }
  if (v14)
  {
    v27 = *v14;
    if (!*v14)
      goto LABEL_71;
    LODWORD(v28) = 0;
    v29 = v14;
    do
    {
      if (v27 < 0xC0)
      {
        v30 = *++v29;
        v27 = v30;
      }
      else
      {
        do
        {
          v31 = *++v29;
          v27 = v31;
        }
        while ((v31 & 0xC0) == 0x80);
      }
      v28 = (v28 + 1);
    }
    while (v27);
    v40 = sub_1ACC3F49C(a1, 4 * (v28 + 2 * v28));
    if (v40)
    {
      if (!*v14)
        goto LABEL_71;
      v17 = (char **)v40;
      v16 = 0;
      v15 = (int *)(v40 + 8 * v28);
      v41 = v14;
      v42 = v14;
      do
      {
        *(_QWORD *)(v40 + 8 * v16) = v41;
        v43 = *v42++;
        if (v43 >= 0xC0)
        {
          v42 = v41;
          do
            v44 = *++v42;
          while ((v44 & 0xC0) == 0x80);
        }
        v15[v16++] = (_DWORD)v42 - (_DWORD)v41;
        v41 = v42;
      }
      while (*v42);
      if (!(_DWORD)v16)
        goto LABEL_71;
      goto LABEL_30;
    }
  }
}

void sub_1ACC39FA0(sqlite3_context *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 && (v6 = *((_QWORD *)a1 + 1)) != 0)
  {
    if (*(_QWORD *)(v6 + 8))
      v7 = -1;
    else
      v7 = 0;
  }
  else
  {
    sub_1ACBBE20C(97914);
    v7 = 0;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1 + 3) + 136) + 40 * *((int *)a1 + 8) - 24);
  if (!*(_QWORD *)a3)
  {
    sub_1ACBBE20C(97202);
    if (a2 >= 2)
    {
LABEL_10:
      v9 = 0;
      v10 = 1;
      do
      {
        v11 = *(_QWORD *)(a3 + 8 * v10);
        if (v11)
        {
          if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v11 + 20)) & 1) != 0)
            return;
        }
        else
        {
          sub_1ACBBE20C(97202);
          v11 = *(_QWORD *)(a3 + 8 * v10);
        }
        if ((int)(sub_1ACB93348(*(_QWORD *)(a3 + 8 * v9), v11, v8) ^ v7) >= 0)
          v9 = v10;
        ++v10;
      }
      while (a2 != v10);
      v12 = v9;
      goto LABEL_21;
    }
LABEL_19:
    v12 = 0;
LABEL_21:
    sqlite3_result_value(a1, *(sqlite3_value **)(a3 + 8 * v12));
    return;
  }
  if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*(_QWORD *)a3 + 20)) & 1) == 0)
  {
    if (a2 >= 2)
      goto LABEL_10;
    goto LABEL_19;
  }
}

void sub_1ACC3A0E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _WORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  uint64_t v14;
  __int16 v15;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v4 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v5 = *a3;
  v6 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(_WORD **)(v6 + 8);
    if (!v7)
      return;
  }
  else
  {
    v7 = sub_1ACBC794C(a1, 64);
    if (!v7)
      return;
  }
  if (v5)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v5 + 20)) & 1) != 0)
    {
      if (!v7[10])
        return;
LABEL_18:
      *(_DWORD *)(a1 + 36) = -1;
      *(_BYTE *)(a1 + 41) = 1;
      return;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
  }
  if (v7[10])
  {
    v8 = *(_DWORD *)(a1 + 32);
    v9 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 136) + 40 * v8 - 24);
    v10 = *(_QWORD *)(a1 + 8);
    if (v10)
    {
      v11 = *(_QWORD *)(v10 + 8);
      v12 = sub_1ACB93348((uint64_t)v7, v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 136) + 40 * v8 - 24));
      if (v11)
      {
        if ((v12 & 0x80000000) == 0)
          goto LABEL_18;
LABEL_23:
        if ((v7[10] & 0x9000) == 0)
          goto LABEL_25;
        goto LABEL_24;
      }
    }
    else
    {
      sub_1ACBBE20C(97914);
      v12 = sub_1ACB93348((uint64_t)v7, v5, v9);
    }
    if (v12 < 1)
      goto LABEL_18;
    goto LABEL_23;
  }
  if (*(_QWORD *)a1)
  {
    *((_QWORD *)v7 + 3) = *(_QWORD *)(*(_QWORD *)a1 + 24);
    goto LABEL_25;
  }
  sub_1ACBBE20C(97935);
  v15 = v7[10];
  *((_QWORD *)v7 + 3) = 0;
  if ((v15 & 0x9000) != 0)
LABEL_24:
    sub_1ACBF2A54((int *)v7);
LABEL_25:
  v13 = *(_OWORD *)v5;
  v14 = *(_QWORD *)(v5 + 16);
  *((_QWORD *)v7 + 2) = v14;
  *(_OWORD *)v7 = v13;
  v7[10] = WORD2(v14) & 0xEFFF;
  if ((v14 & 0x1200000000) != 0 && (*(_WORD *)(v5 + 20) & 0x2000) == 0)
  {
    v7[10] = WORD2(v14) & 0xAFFF | 0x4000;
    sub_1ACBC6854((int *)v7);
  }
}

void sub_1ACC3A2C0(sqlite3_context *a1)
{
  uint64_t v2;
  uint64_t v3;
  sqlite3_value *v4;

  if (!a1 || (v2 = *((_QWORD *)a1 + 1)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *((_QWORD *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(sqlite3_value **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (sqlite3_value *)sub_1ACBC794C((uint64_t)a1, 0);
    if (!v4)
      return;
  }
  if (*((_WORD *)v4 + 10) && (sqlite3_result_value(a1, v4), (*((_WORD *)v4 + 10) & 0x9000) != 0) || *((_DWORD *)v4 + 8))
    sub_1ACBF2A04((uint64_t)v4);
}

void sub_1ACC3A36C(sqlite3_context *a1)
{
  uint64_t v2;
  uint64_t v3;
  sqlite3_value *v4;

  if (!a1 || (v2 = *((_QWORD *)a1 + 1)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *((_QWORD *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(sqlite3_value **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (sqlite3_value *)sub_1ACBC794C((uint64_t)a1, 0);
    if (!v4)
      return;
  }
  if (*((_WORD *)v4 + 10))
    sqlite3_result_value(a1, v4);
}

void sub_1ACC3A3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*(_QWORD *)a3)
  {
    v4 = byte_1ACCB6445[*(_WORD *)(*(_QWORD *)a3 + 20) & 0x3F] - 1;
    if (a1)
    {
LABEL_3:
      sub_1ACBC69D0(a1, off_1E5C748F0[v4], -1, 1u, 0);
      return;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
    v4 = -1;
    if (a1)
      goto LABEL_3;
  }
  sub_1ACBBE20C(97480);
}

void sub_1ACC3A47C(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(97090);
    v5 = 0;
    if (a1)
      goto LABEL_8;
    goto LABEL_6;
  }
  if ((*(_WORD *)(v4 + 20) & 0x800) != 0)
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
    if (a1)
      goto LABEL_8;
LABEL_6:
    sub_1ACBBE20C(97413);
    return;
  }
  v5 = 0;
  if (!a1)
    goto LABEL_6;
LABEL_8:
  v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v6, v5);
  }
  else
  {
    *(_QWORD *)v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }
}

void sub_1ACC3A514(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  _BYTE *v9;
  __int16 v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  v4 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(97202);
    goto LABEL_10;
  }
  v5 = *(unsigned __int16 *)(v4 + 20);
  v6 = byte_1ACCB6445[v5 & 0x3F];
  if ((v6 - 1) < 2)
  {
LABEL_5:
    if ((v5 & 2) != 0 && *(_BYTE *)(v4 + 22) == 1)
    {
      v7 = *(_DWORD *)(v4 + 16);
      if (!a1)
      {
LABEL_44:
        sub_1ACBBE20C(97413);
        return;
      }
    }
    else if ((v5 & 0x10) != 0)
    {
      v7 = *(_DWORD *)(v4 + 16);
      if ((v5 & 0x400) != 0)
        v7 += *(_DWORD *)v4;
      if (!a1)
        goto LABEL_44;
    }
    else if ((v5 & 1) != 0)
    {
      v7 = 0;
      if (!a1)
        goto LABEL_44;
    }
    else
    {
      v7 = sub_1ACBF2B3C(v4, 1);
      if (!a1)
        goto LABEL_44;
    }
    goto LABEL_21;
  }
  if (v6 != 3)
  {
    if (v6 == 4)
      goto LABEL_5;
LABEL_10:
    if (!a1)
    {
      sub_1ACBBE20C(97433);
      return;
    }
    v8 = *a1;
    if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
    {
      sub_1ACBF2A54((int *)v8);
      return;
    }
    v10 = 1;
LABEL_29:
    *(_WORD *)(v8 + 20) = v10;
    return;
  }
  if ((~v5 & 0x202) == 0 && *(_BYTE *)(v4 + 22) == 1)
  {
    v9 = *(_BYTE **)(v4 + 8);
    if (!v9)
      return;
    goto LABEL_33;
  }
  if ((v5 & 1) == 0)
  {
    v9 = (_BYTE *)sub_1ACBF2B64((int *)v4, 1);
    if (v9)
    {
LABEL_33:
      v11 = *v9;
      if (*v9)
      {
        v12 = v9;
        do
        {
          v13 = v11;
          v14 = *++v12;
          v11 = v14;
          if (v13 >= 0xC0)
          {
            while ((v11 & 0xC0) == 0x80)
            {
              v15 = *++v12;
              v11 = v15;
              LODWORD(v9) = (_DWORD)v9 + 1;
            }
          }
        }
        while (v11);
      }
      else
      {
        LODWORD(v12) = (_DWORD)v9;
      }
      if (!a1)
        goto LABEL_44;
      v7 = (_DWORD)v12 - (_DWORD)v9;
LABEL_21:
      v8 = *a1;
      if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v8, v7);
        return;
      }
      *(_QWORD *)v8 = v7;
      v10 = 4;
      goto LABEL_29;
    }
  }
}

void sub_1ACC3A6D0(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  int v11;
  int v12;
  unsigned int v13;
  __int16 v14;
  int v15;
  uint64_t v16;

  v4 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(97202);
    goto LABEL_9;
  }
  v5 = *(_WORD *)(v4 + 20);
  v6 = byte_1ACCB6445[v5 & 0x3F];
  if ((v6 - 1) < 2)
  {
    if (!a1 || (v9 = *a1) == 0)
      sub_1ACCB4024();
    v10 = *(unsigned __int8 *)(*(_QWORD *)(v9 + 24) + 100);
    if ((v5 & 2) != 0 && *(_BYTE *)(v4 + 22) == 1)
    {
      v11 = *(_DWORD *)(v4 + 16);
    }
    else if ((v5 & 0x10) != 0)
    {
      v11 = *(_DWORD *)(v4 + 16);
      if ((*(_WORD *)(v4 + 20) & 0x400) != 0)
        v11 += *(_DWORD *)v4;
    }
    else if ((v5 & 1) != 0)
    {
      v11 = 0;
    }
    else
    {
      v11 = sub_1ACBF2B3C(v4, 1);
      v9 = *a1;
    }
    v16 = (uint64_t)v11 << (v10 > 1);
    if ((*(_WORD *)(v9 + 20) & 0x9000) == 0)
    {
      *(_QWORD *)v9 = v16;
      *(_WORD *)(v9 + 20) = 4;
      return;
    }
    v8 = v9;
    goto LABEL_53;
  }
  if (v6 != 3)
  {
    if (v6 == 4)
    {
      if ((v5 & 2) != 0 && *(_BYTE *)(v4 + 22) == 1)
      {
        v7 = *(_DWORD *)(v4 + 16);
        goto LABEL_51;
      }
      if ((v5 & 0x10) != 0)
      {
        v7 = *(_DWORD *)(v4 + 16);
        if ((*(_WORD *)(v4 + 20) & 0x400) != 0)
          v7 += *(_DWORD *)v4;
      }
      else
      {
        if ((v5 & 1) == 0)
          goto LABEL_30;
        v7 = 0;
      }
LABEL_51:
      if (a1)
        goto LABEL_52;
      goto LABEL_35;
    }
LABEL_9:
    if (a1)
    {
      v8 = *a1;
      if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
      {
        sub_1ACBF2A54((int *)v8);
        return;
      }
      v14 = 1;
      goto LABEL_55;
    }
    v12 = 97433;
LABEL_36:
    sub_1ACBBE20C(v12);
    return;
  }
  v13 = *(unsigned __int8 *)(v4 + 22);
  if (v13 <= 1)
  {
    if ((v5 & 2) == 0 || v13 != 1)
    {
      if ((v5 & 0x10) == 0)
      {
        if ((v5 & 1) == 0)
        {
LABEL_30:
          v15 = 1;
LABEL_46:
          v7 = sub_1ACBF2B3C(v4, v15);
          goto LABEL_51;
        }
        goto LABEL_56;
      }
      goto LABEL_47;
    }
LABEL_34:
    v7 = *(_DWORD *)(v4 + 16);
    if (!a1)
      goto LABEL_35;
    goto LABEL_52;
  }
  if ((v5 & 2) != 0)
    goto LABEL_34;
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 1) == 0)
    {
      v15 = 2;
      goto LABEL_46;
    }
LABEL_56:
    v7 = 0;
    if (a1)
      goto LABEL_52;
    goto LABEL_35;
  }
LABEL_47:
  v7 = *(_DWORD *)(v4 + 16);
  if ((*(_WORD *)(v4 + 20) & 0x400) == 0)
    goto LABEL_51;
  v7 += *(_DWORD *)v4;
  if (!a1)
  {
LABEL_35:
    v12 = 97413;
    goto LABEL_36;
  }
LABEL_52:
  v8 = *a1;
  v16 = v7;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
LABEL_53:
    sub_1ACBF327C(v8, v16);
    return;
  }
  *(_QWORD *)v8 = v7;
  v14 = 4;
LABEL_55:
  *(_WORD *)(v8 + 20) = v14;
}

void sub_1ACC3A900(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  int v5;
  sqlite3_value *v6;
  int v7;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  BOOL v15;
  char v16;
  _BYTE *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  sqlite3_value *v24;
  sqlite3_value *v26;
  int v27;
  int v28;
  __int16 v29;
  sqlite3_value *v30;
  int v31;
  int v32;
  int v33;
  _BYTE *v34;
  int v35;
  sqlite3_value *v36;
  int v37;
  __int16 v38;

  if (*a3)
  {
    v5 = byte_1ACCB6445[*((_WORD *)*a3 + 10) & 0x3F];
    v6 = a3[1];
    if (v6)
    {
LABEL_3:
      v7 = byte_1ACCB6445[*((_WORD *)v6 + 10) & 0x3F];
      goto LABEL_6;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
    v5 = 0;
    v6 = a3[1];
    if (v6)
      goto LABEL_3;
  }
  sub_1ACBBE20C(97202);
  v7 = 0;
LABEL_6:
  if (v5 == 5 || v7 == 5)
    return;
  v9 = (uint64_t)*a3;
  if (*a3)
  {
    v10 = *(_WORD *)(v9 + 20);
    if ((v10 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
    {
      v11 = *(_DWORD *)(v9 + 16);
      v12 = (uint64_t)a3[1];
      if (!v12)
        goto LABEL_21;
      goto LABEL_25;
    }
    if ((v10 & 0x10) != 0)
    {
      v11 = *(_DWORD *)(v9 + 16);
      if ((*(_WORD *)(v9 + 20) & 0x400) != 0)
        v11 += *(_DWORD *)v9;
      v12 = (uint64_t)a3[1];
      if (!v12)
        goto LABEL_21;
      goto LABEL_25;
    }
    if ((v10 & 1) == 0)
    {
      v11 = sub_1ACBF2B3C(v9, 1);
      v12 = (uint64_t)a3[1];
      if (!v12)
        goto LABEL_21;
      goto LABEL_25;
    }
  }
  else
  {
    sub_1ACBBE20C(91120);
  }
  v11 = 0;
  v12 = (uint64_t)a3[1];
  if (!v12)
  {
LABEL_21:
    sub_1ACBBE20C(91120);
    goto LABEL_49;
  }
LABEL_25:
  v13 = *(_WORD *)(v12 + 20);
  if ((v13 & 2) != 0 && *(_BYTE *)(v12 + 22) == 1)
  {
    v14 = *(_DWORD *)(v12 + 16);
  }
  else if ((v13 & 0x10) != 0)
  {
    v14 = *(_DWORD *)(v12 + 16);
    if ((*(_WORD *)(v12 + 20) & 0x400) != 0)
      v14 += *(_DWORD *)v12;
  }
  else
  {
    if ((v13 & 1) != 0)
      goto LABEL_49;
    v14 = sub_1ACBF2B3C(v12, 1);
  }
  if (v14 < 1)
  {
LABEL_49:
    v19 = 0;
    v20 = 0;
    v22 = 1;
    if (a1)
    {
LABEL_50:
      v23 = *(_QWORD *)a1;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v23, v22);
      }
      else
      {
        *(_QWORD *)v23 = v22;
        *(_WORD *)(v23 + 20) = 4;
      }
      goto LABEL_85;
    }
    goto LABEL_48;
  }
  v15 = v5 == 4 && v7 == 4;
  v16 = v15;
  if (v15)
  {
    v17 = sqlite3_value_blob(*a3);
    v18 = (unsigned __int8 *)sqlite3_value_blob(a3[1]);
    if (v18)
    {
LABEL_43:
      v19 = 0;
      v20 = 0;
      if (v11 && !v17)
        goto LABEL_84;
      goto LABEL_45;
    }
LABEL_82:
    v19 = 0;
    goto LABEL_83;
  }
  v24 = *a3;
  if (v5 != 4 && v7 != 4)
  {
    if (!v24)
      goto LABEL_74;
    v28 = *((unsigned __int16 *)v24 + 10);
    if ((~v28 & 0x202) == 0 && *((_BYTE *)v24 + 22) == 1)
    {
      v17 = (_BYTE *)*((_QWORD *)v24 + 1);
      goto LABEL_75;
    }
    if ((v28 & 1) != 0)
LABEL_74:
      v17 = 0;
    else
      v17 = (_BYTE *)sub_1ACBF2B64((int *)v24, 1);
LABEL_75:
    v30 = a3[1];
    if (v30)
    {
      v31 = *((unsigned __int16 *)v30 + 10);
      if ((~v31 & 0x202) != 0 || *((_BYTE *)v30 + 22) != 1)
      {
        if ((v31 & 1) != 0)
          goto LABEL_82;
        v18 = (unsigned __int8 *)sub_1ACBF2B64((int *)v30, 1);
        if (!v18)
          goto LABEL_82;
      }
      else
      {
        v18 = (unsigned __int8 *)*((_QWORD *)v30 + 1);
        if (!v18)
          goto LABEL_82;
      }
      goto LABEL_43;
    }
    goto LABEL_82;
  }
  v26 = sqlite3_value_dup(v24);
  v19 = (uint64_t)v26;
  if (!v26)
    goto LABEL_83;
  v27 = *((unsigned __int16 *)v26 + 10);
  if ((~v27 & 0x202) == 0 && *((_BYTE *)v26 + 22) == 1)
  {
    v17 = (_BYTE *)*((_QWORD *)v26 + 1);
    goto LABEL_68;
  }
  if ((v27 & 1) != 0)
  {
LABEL_83:
    v20 = 0;
LABEL_84:
    sqlite3_result_error_nomem(a1);
    goto LABEL_85;
  }
  v17 = (_BYTE *)sub_1ACBF2B64((int *)v26, 1);
LABEL_68:
  if (!v17)
    goto LABEL_83;
  v29 = *(_WORD *)(v19 + 20);
  if ((v29 & 2) != 0 && *(_BYTE *)(v19 + 22) == 1)
  {
    v11 = *(_DWORD *)(v19 + 16);
  }
  else if ((v29 & 0x10) != 0)
  {
    v11 = *(_DWORD *)(v19 + 16);
    if ((*(_WORD *)(v19 + 20) & 0x400) != 0)
      v11 += *(_DWORD *)v19;
  }
  else if ((v29 & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    v11 = sub_1ACBF2B3C(v19, 1);
  }
  v36 = sqlite3_value_dup(a3[1]);
  v20 = (uint64_t)v36;
  if (!v36)
    goto LABEL_84;
  v37 = *((unsigned __int16 *)v36 + 10);
  if ((~v37 & 0x202) != 0 || *((_BYTE *)v36 + 22) != 1)
  {
    if ((v37 & 1) != 0)
      goto LABEL_84;
    v18 = (unsigned __int8 *)sub_1ACBF2B64((int *)v36, 1);
  }
  else
  {
    v18 = (unsigned __int8 *)*((_QWORD *)v36 + 1);
  }
  if (!v18)
    goto LABEL_84;
  v38 = *(_WORD *)(v20 + 20);
  if ((v38 & 2) != 0 && *(_BYTE *)(v20 + 22) == 1)
  {
    v14 = *(_DWORD *)(v20 + 16);
  }
  else if ((v38 & 0x10) != 0)
  {
    v14 = *(_DWORD *)(v20 + 16);
    if ((*(_WORD *)(v20 + 20) & 0x400) != 0)
      v14 += *(_DWORD *)v20;
  }
  else if ((v38 & 1) != 0)
  {
    v14 = 0;
  }
  else
  {
    v14 = sub_1ACBF2B3C(v20, 1);
  }
LABEL_45:
  if (v14 <= v11)
  {
    v32 = *v18;
    v21 = 1;
    while (*v17 != v32 || memcmp(v17, v18, v14))
    {
      ++v21;
      v34 = v17 + 1;
      v33 = v11 + 1;
      while (1)
      {
        v17 = v34;
        v35 = v33;
        if ((v16 & 1) != 0)
          break;
        ++v34;
        --v33;
        if ((*v17 & 0xC0) != 0x80)
          goto LABEL_98;
      }
      v33 = v11;
LABEL_98:
      v11 = v35 - 2;
      if (v14 >= v33)
        goto LABEL_46;
    }
  }
  else
  {
LABEL_46:
    v21 = 0;
  }
  v22 = v21;
  if (a1)
    goto LABEL_50;
LABEL_48:
  sub_1ACBBE20C(97413);
LABEL_85:
  if (v19)
  {
    if ((*(_WORD *)(v19 + 20) & 0x9000) != 0 || *(_DWORD *)(v19 + 32))
      sub_1ACBF2A04(v19);
    sub_1ACBE0F9C(*(_QWORD **)(v19 + 24), (_QWORD *)v19);
  }
  if (v20)
  {
    if ((*(_WORD *)(v20 + 20) & 0x9000) != 0 || *(_DWORD *)(v20 + 32))
      sub_1ACBF2A04(v20);
    sub_1ACBE0F9C(*(_QWORD **)(v20 + 24), (_QWORD *)v20);
  }
}

void sub_1ACC3ADE8(uint64_t a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  int v10;
  const char *v11;
  int v12;
  int v13;
  char *v14;
  uint64_t v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  _DWORD v20[2];
  _QWORD *v21;

  v19 = 0;
  if (a1 && *(_QWORD *)a1)
  {
    v6 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v7 = a2 - 1;
    if (a2 < 1)
      return;
  }
  else
  {
    sub_1ACBBE20C(97935);
    v6 = 0;
    v8 = __OFSUB__(a2, 1);
    v7 = a2 - 1;
    if (v7 < 0 != v8)
      return;
  }
  v9 = *a3;
  if (!*a3)
    return;
  v10 = *(unsigned __int16 *)(v9 + 20);
  if ((~v10 & 0x202) == 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    v11 = *(const char **)(v9 + 8);
    if (!v11)
      return;
LABEL_13:
    v20[0] = v7;
    v20[1] = 0;
    v21 = a3 + 1;
    v12 = *(_DWORD *)(v6 + 136);
    v15 = v6;
    v16 = 0;
    v17 = 0;
    v18 = v12;
    LODWORD(v19) = 0;
    WORD2(v19) = 512;
    sqlite3_str_appendf((sqlite3_str *)&v15, v11, v20);
    v13 = v19;
    if (v16 && (v16[v19] = 0, v18) && (v19 & 0x40000000000) == 0)
    {
      v14 = (char *)sub_1ACBE13A0(&v15);
      if (!a1)
      {
LABEL_17:
        sub_1ACBBE20C(97480);
        return;
      }
    }
    else
    {
      v14 = v16;
      if (!a1)
        goto LABEL_17;
    }
    sub_1ACBC69D0(a1, v14, v13, 1u, sub_1ACBD0E78);
    return;
  }
  if ((v10 & 1) == 0)
  {
    v11 = (const char *)sub_1ACBF2B64((int *)v9, 1);
    if (v11)
      goto LABEL_13;
  }
}

void sub_1ACC3AF30(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 *v9;
  unsigned __int8 v10;
  uint64_t v13;

  v4 = *a3;
  if (*a3)
  {
    v5 = *(unsigned __int16 *)(v4 + 20);
    if ((~v5 & 0x202) != 0 || *(_BYTE *)(v4 + 22) != 1)
    {
      if ((v5 & 1) != 0)
        return;
      v6 = (unsigned __int8 *)sub_1ACBF2B64((int *)v4, 1);
      if (!v6)
        return;
    }
    else
    {
      v6 = *(unsigned __int8 **)(v4 + 8);
      if (!v6)
        return;
    }
    v7 = *v6;
    if (*v6)
    {
      if (v7 >= 0xC0)
      {
        v7 = byte_1ACCB6CF6[v7 - 192];
        v8 = v6[1];
        if ((v8 & 0xC0) == 0x80)
        {
          v9 = v6 + 2;
          do
          {
            v7 = v8 & 0x3F | (v7 << 6);
            v10 = *v9++;
            v8 = v10;
          }
          while ((v10 & 0xC0) == 0x80);
        }
        if (v7 >> 11 == 27 || v7 < 0x80 || v7 >> 1 == 0x7FFF)
          v7 = 65533;
      }
      if (a1)
      {
        v13 = *a1;
        if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v13, (int)v7);
        }
        else
        {
          *(_QWORD *)v13 = (int)v7;
          *(_WORD *)(v13 + 20) = 4;
        }
      }
      else
      {
        sub_1ACBBE20C(97413);
      }
    }
  }
}

void sub_1ACC3B044(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t i;
  uint64_t v6;
  const char *v7;
  _BYTE *v8;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  double v13;

  LODWORD(i) = a2;
  if (sqlite3_initialize() || (v6 = sub_1ACB5D828((int)((4 * i) | 1))) == 0)
  {
    sqlite3_result_error_nomem(a1);
  }
  else
  {
    v7 = (const char *)v6;
    v8 = (_BYTE *)v6;
    if ((int)i >= 1)
    {
      v8 = (_BYTE *)v6;
      for (i = i; i; --i)
      {
        v9 = *a3;
        if (!*a3)
        {
          sub_1ACBBE20C(89699);
LABEL_15:
          *v8++ = 0;
          goto LABEL_7;
        }
        v10 = *(_WORD *)(v9 + 20);
        if ((v10 & 0x24) != 0)
        {
          v11 = *(_QWORD *)v9;
        }
        else if ((v10 & 8) != 0)
        {
          v13 = *(double *)v9;
          if (*(double *)v9 < -9.22337204e18 || v13 > 9.22337204e18)
          {
LABEL_12:
            LODWORD(v12) = 65533;
LABEL_13:
            *v8 = (v12 >> 12) | 0xE0;
            v8[1] = (v12 >> 6) & 0x3F | 0x80;
            v8[2] = v12 & 0x3F | 0x80;
            v8 += 3;
            goto LABEL_7;
          }
          v11 = (uint64_t)v13;
        }
        else
        {
          if ((v10 & 0x12) == 0)
            goto LABEL_15;
          v12 = *(_QWORD *)(v9 + 8);
          if (!v12)
            goto LABEL_6;
          v11 = sub_1ACBF2FC0(v9);
        }
        if (v11 >> 16 > 0x10)
          goto LABEL_12;
        LODWORD(v12) = v11 & 0x1FFFFF;
        if ((v11 & 0x1FFFFF) > 0x7F)
        {
          if (v12 <= 0x7FF)
          {
            *v8 = (v11 >> 6) | 0xC0;
            v8[1] = v11 & 0x3F | 0x80;
            v8 += 2;
            goto LABEL_7;
          }
          if (WORD1(v12))
          {
            *v8 = (v12 >> 18) | 0xF0;
            v8[1] = (v11 >> 12) & 0x3F | 0x80;
            v8[2] = (v11 >> 6) & 0x3F | 0x80;
            v8[3] = v11 & 0x3F | 0x80;
            v8 += 4;
            goto LABEL_7;
          }
          goto LABEL_13;
        }
LABEL_6:
        *v8++ = v12;
LABEL_7:
        ++a3;
      }
    }
    *v8 = 0;
    sqlite3_result_text64(a1, v7, v8 - v7, sqlite3_free, 1u);
  }
}

void sub_1ACC3B238(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  __int16 v5;
  int v6;
  uint64_t v7;
  __int16 v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;

  v4 = *a3;
  if (*a3)
  {
    v5 = *(_WORD *)(v4 + 20);
    v6 = byte_1ACCB6445[v5 & 0x3F];
    if (v6 == 5)
    {
      if (a1)
      {
        v11 = *a1;
        if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
          sub_1ACBF2A54((int *)v11);
        else
          *(_WORD *)(v11 + 20) = 1;
        return;
      }
      v14 = 97433;
LABEL_49:
      sub_1ACBBE20C(v14);
      return;
    }
    if (v6 == 1)
    {
      if ((v5 & 0x24) != 0)
      {
        v7 = *(_QWORD *)v4;
      }
      else if ((v5 & 8) != 0)
      {
        v15 = *(double *)v4;
        if (*(double *)v4 < -9.22337204e18)
          goto LABEL_38;
        if (v15 > 9.22337204e18)
        {
          v7 = 0x7FFFFFFFFFFFFFFFLL;
          if (a1)
          {
LABEL_42:
            v16 = *a1;
            if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
            {
              sub_1ACBF327C(v16, v7);
            }
            else
            {
              *(_QWORD *)v16 = v7;
              *(_WORD *)(v16 + 20) = 4;
            }
            return;
          }
LABEL_47:
          v14 = 97423;
          goto LABEL_49;
        }
        v7 = (uint64_t)v15;
      }
      else
      {
        if ((v5 & 0x12) == 0 || !*(_QWORD *)(v4 + 8))
        {
          v7 = 0;
          goto LABEL_41;
        }
        v7 = sub_1ACBF2FC0(v4);
      }
      if (v7 < 0)
      {
        if (v7 != 0x8000000000000000)
        {
          v7 = -v7;
          if (!a1)
            goto LABEL_47;
          goto LABEL_42;
        }
LABEL_38:
        if (a1)
        {
          *((_DWORD *)a1 + 9) = 1;
          sub_1ACB57870(*a1, "integer overflow", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          return;
        }
        v14 = 97389;
        goto LABEL_49;
      }
LABEL_41:
      if (a1)
        goto LABEL_42;
      goto LABEL_47;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
    v4 = *a3;
    if (!*a3)
    {
      sub_1ACBBE20C(89734);
LABEL_19:
      v10 = 0.0;
      goto LABEL_22;
    }
  }
  v9 = *(_WORD *)(v4 + 20);
  if ((v9 & 8) != 0)
  {
    v10 = *(double *)v4;
    goto LABEL_22;
  }
  if ((v9 & 0x24) != 0)
  {
    v10 = (double)*(uint64_t *)v4;
    goto LABEL_22;
  }
  if ((v9 & 0x12) == 0)
    goto LABEL_19;
  v10 = sub_1ACBF2F88(v4);
LABEL_22:
  if (v10 >= 0.0)
    v12 = v10;
  else
    v12 = -v10;
  if (!a1)
  {
    v14 = 97379;
    goto LABEL_49;
  }
  v13 = *a1;
  if ((*(_WORD *)(v13 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)v13);
  else
    *(_WORD *)(v13 + 20) = 1;
  *(double *)v13 = v12;
  *(_WORD *)(v13 + 20) = 8;
}

void sub_1ACC3B4B4(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  double v9;
  double v10;
  int v11;
  __int16 v12;
  double v13;
  char *v14;
  unsigned __int8 *v15;
  int v16;
  void (**v17)(unsigned __int8 *);
  uint64_t v18;
  double v19;
  double v20;

  if (a2 != 2)
  {
    v6 = 0;
    v7 = *a3;
    if (!*a3)
      goto LABEL_26;
LABEL_6:
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v7 + 20)) & 1) != 0)
      return;
    goto LABEL_27;
  }
  v5 = a3[1];
  if (v5)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v5 + 20)) & 1) != 0)
      return;
  }
  else
  {
    sub_1ACBBE20C(97202);
    v5 = a3[1];
    if (!v5)
    {
      sub_1ACBBE20C(89699);
      LODWORD(v9) = 0;
      goto LABEL_22;
    }
  }
  v8 = *(_WORD *)(v5 + 20);
  if ((v8 & 0x24) != 0)
  {
    v9 = *(double *)v5;
  }
  else if ((v8 & 8) != 0)
  {
    v10 = *(double *)v5;
    if (*(double *)v5 >= -9.22337204e18)
    {
      if (v10 <= 9.22337204e18)
        *(_QWORD *)&v9 = (uint64_t)v10;
      else
        LODWORD(v9) = -1;
    }
    else
    {
      LODWORD(v9) = 0;
    }
  }
  else if ((v8 & 0x12) != 0 && *(_QWORD *)(v5 + 8))
  {
    LODWORD(v9) = sub_1ACBF2FC0(v5);
  }
  else
  {
    LODWORD(v9) = 0;
  }
LABEL_22:
  if (SLODWORD(v9) >= 30)
    v11 = 30;
  else
    v11 = LODWORD(v9);
  v6 = v11 & ~(v11 >> 31);
  v7 = *a3;
  if (*a3)
    goto LABEL_6;
LABEL_26:
  sub_1ACBBE20C(97202);
  v7 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(89734);
    goto LABEL_34;
  }
LABEL_27:
  v12 = *(_WORD *)(v7 + 20);
  if ((v12 & 8) != 0)
  {
    v13 = *(double *)v7;
    goto LABEL_35;
  }
  if ((v12 & 0x24) == 0)
  {
    if ((v12 & 0x12) != 0)
    {
      v13 = sub_1ACBF2F88(v7);
      goto LABEL_35;
    }
LABEL_34:
    v13 = 0.0;
    goto LABEL_35;
  }
  v13 = (double)*(uint64_t *)v7;
LABEL_35:
  v20 = v13;
  if (v13 >= -4.50359963e15 && v13 <= 4.50359963e15)
  {
    if (!(_DWORD)v6)
    {
      v19 = 0.5;
      if (v13 < 0.0)
        v19 = -0.5;
      v13 = (double)(uint64_t)(v13 + v19);
      if (a1)
        goto LABEL_47;
LABEL_54:
      sub_1ACBBE20C(97379);
      return;
    }
    v14 = sqlite3_mprintf("%!.*f", v6, *(_QWORD *)&v13);
    if (!v14)
    {
      sqlite3_result_error_nomem(a1);
      return;
    }
    v15 = (unsigned __int8 *)v14;
    v16 = strlen(v14);
    sub_1ACBA6B1C(v15, &v20, v16 & 0x3FFFFFFF, 1);
    v17 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v15);
      v15 = (unsigned __int8 *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_45;
      v17 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v17)(v15);
LABEL_45:
    v13 = v20;
  }
  if (!a1)
    goto LABEL_54;
LABEL_47:
  v18 = *(_QWORD *)a1;
  if ((*(_WORD *)(v18 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)v18);
  else
    *(_WORD *)(v18 + 20) = 1;
  *(double *)v18 = v13;
  *(_WORD *)(v18 + 20) = 8;
}

void sub_1ACC3B7DC(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v6;
  unsigned __int8 *v7;
  __int16 v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int v13;

  v4 = *a3;
  if (!*a3)
  {
    v7 = 0;
    goto LABEL_11;
  }
  v6 = *(unsigned __int16 *)(v4 + 20);
  if ((~v6 & 0x202) == 0 && *(_BYTE *)(v4 + 22) == 1)
  {
    v7 = *(unsigned __int8 **)(v4 + 8);
    v8 = *(_WORD *)(v4 + 20);
    if ((v8 & 2) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((v6 & 1) == 0)
  {
    v7 = (unsigned __int8 *)sub_1ACBF2B64((int *)v4, 1);
    v4 = *a3;
    if (*a3)
    {
      v8 = *(_WORD *)(v4 + 20);
      if ((v8 & 2) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
LABEL_11:
    sub_1ACBBE20C(91120);
    v9 = 0;
    if (!v7)
      return;
    goto LABEL_24;
  }
  v7 = 0;
  v8 = *(_WORD *)(v4 + 20);
  if ((v8 & 2) == 0)
    goto LABEL_17;
LABEL_14:
  if (*(_BYTE *)(v4 + 22) == 1)
  {
    v9 = *(_DWORD *)(v4 + 16);
    if (!v7)
      return;
    goto LABEL_24;
  }
LABEL_17:
  if ((v8 & 0x10) == 0)
  {
    if ((v8 & 1) != 0)
    {
      v9 = 0;
      if (!v7)
        return;
    }
    else
    {
      v9 = sub_1ACBF2B3C(v4, 1);
      if (!v7)
        return;
    }
    goto LABEL_24;
  }
  v9 = *(_DWORD *)(v4 + 16);
  if ((v8 & 0x400) != 0)
    v9 += *(_DWORD *)v4;
  if (v7)
  {
LABEL_24:
    v10 = (char *)sub_1ACC3F49C(a1, v9 + 1);
    if (v10)
    {
      if (v9 >= 1)
      {
        v11 = v9;
        v12 = v10;
        do
        {
          v13 = *v7++;
          *v12++ = v13 & (~byte_1ACCB6548[v13] | 0xDF);
          --v11;
        }
        while (v11);
      }
      if (a1)
        sub_1ACBC69D0((uint64_t)a1, v10, v9, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
      else
        sub_1ACBBE20C(97480);
    }
  }
}

void sub_1ACC3B964(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  int v6;
  unsigned __int8 *v7;
  __int16 v8;
  int v9;
  char *v10;
  uint64_t v11;
  char *v12;
  int v13;

  v4 = *a3;
  if (!*a3)
  {
    v7 = 0;
    goto LABEL_11;
  }
  v6 = *(unsigned __int16 *)(v4 + 20);
  if ((~v6 & 0x202) == 0 && *(_BYTE *)(v4 + 22) == 1)
  {
    v7 = *(unsigned __int8 **)(v4 + 8);
    v8 = *(_WORD *)(v4 + 20);
    if ((v8 & 2) == 0)
      goto LABEL_17;
    goto LABEL_14;
  }
  if ((v6 & 1) == 0)
  {
    v7 = (unsigned __int8 *)sub_1ACBF2B64((int *)v4, 1);
    v4 = *a3;
    if (*a3)
    {
      v8 = *(_WORD *)(v4 + 20);
      if ((v8 & 2) == 0)
        goto LABEL_17;
      goto LABEL_14;
    }
LABEL_11:
    sub_1ACBBE20C(91120);
    v9 = 0;
    if (!v7)
      return;
    goto LABEL_24;
  }
  v7 = 0;
  v8 = *(_WORD *)(v4 + 20);
  if ((v8 & 2) == 0)
    goto LABEL_17;
LABEL_14:
  if (*(_BYTE *)(v4 + 22) == 1)
  {
    v9 = *(_DWORD *)(v4 + 16);
    if (!v7)
      return;
    goto LABEL_24;
  }
LABEL_17:
  if ((v8 & 0x10) == 0)
  {
    if ((v8 & 1) != 0)
    {
      v9 = 0;
      if (!v7)
        return;
    }
    else
    {
      v9 = sub_1ACBF2B3C(v4, 1);
      if (!v7)
        return;
    }
    goto LABEL_24;
  }
  v9 = *(_DWORD *)(v4 + 16);
  if ((v8 & 0x400) != 0)
    v9 += *(_DWORD *)v4;
  if (v7)
  {
LABEL_24:
    v10 = (char *)sub_1ACC3F49C(a1, v9 + 1);
    if (v10)
    {
      if (v9 >= 1)
      {
        v11 = v9;
        v12 = v10;
        do
        {
          v13 = *v7++;
          *v12++ = byte_1ACCB6333[v13];
          --v11;
        }
        while (v11);
      }
      if (a1)
        sub_1ACBC69D0((uint64_t)a1, v10, v9, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
      else
        sub_1ACBBE20C(97480);
    }
  }
}

void sub_1ACC3BAE0(sqlite3_context *a1, uint64_t a2, sqlite3_value **a3)
{
  unsigned __int8 *v5;
  sqlite3_value *v6;
  __int16 v7;
  int v8;
  char *v9;
  char *v10;
  int v11;
  char *v12;
  unsigned int v13;

  v5 = (unsigned __int8 *)sqlite3_value_blob(*a3);
  v6 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(91120);
LABEL_9:
    v8 = 0;
    goto LABEL_12;
  }
  v7 = *((_WORD *)v6 + 10);
  if ((v7 & 2) != 0 && *((_BYTE *)v6 + 22) == 1)
  {
    v8 = *((_DWORD *)v6 + 4);
    goto LABEL_12;
  }
  if ((v7 & 0x10) == 0)
  {
    if ((v7 & 1) == 0)
    {
      v8 = sub_1ACBF2B3C((uint64_t)v6, 1);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  v8 = *((_DWORD *)v6 + 4);
  if ((*((_WORD *)v6 + 10) & 0x400) != 0)
    v8 += *(_DWORD *)v6;
LABEL_12:
  v9 = (char *)sub_1ACC3F49C(a1, (2 * v8) | 1);
  if (v9)
  {
    v10 = v9;
    if (v8 >= 1)
    {
      v11 = v8;
      v12 = v9;
      do
      {
        v13 = *v5++;
        *v12 = a0123456789abcd_2[(unint64_t)v13 >> 4];
        v10 = v12 + 2;
        v12[1] = a0123456789abcd_2[v13 & 0xF];
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    *v10 = 0;
    if (a1)
      sub_1ACBC69D0((uint64_t)a1, v9, 2 * v8, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
    else
      sub_1ACBBE20C(97480);
  }
}

void sub_1ACC3BC1C(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  int v7;
  _BYTE *v8;
  __int16 v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  int v16;
  uint64_t v17;
  char *v18;
  unsigned int v19;
  _BYTE *v20;
  unsigned __int8 *v21;
  char v22;
  char v23;
  char *v26;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  char v33;
  uint64_t v34;
  int v35;
  void (**v36)(char *);

  v6 = *a3;
  if (!*a3)
  {
    v8 = 0;
    goto LABEL_11;
  }
  v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
  {
    if ((v7 & 1) != 0)
    {
      v8 = 0;
      v9 = *(_WORD *)(v6 + 20);
      if ((v9 & 2) == 0)
        goto LABEL_19;
      goto LABEL_16;
    }
    v8 = (_BYTE *)sub_1ACBF2B64((int *)v6, 1);
    v6 = *a3;
    if (*a3)
    {
      v9 = *(_WORD *)(v6 + 20);
      if ((v9 & 2) == 0)
        goto LABEL_19;
      goto LABEL_16;
    }
LABEL_11:
    sub_1ACBBE20C(91120);
    goto LABEL_12;
  }
  v8 = *(_BYTE **)(v6 + 8);
  v9 = *(_WORD *)(v6 + 20);
  if ((v9 & 2) == 0)
    goto LABEL_19;
LABEL_16:
  if (*(_BYTE *)(v6 + 22) == 1)
  {
    v10 = *(_DWORD *)(v6 + 16);
    if (a2 != 2)
      goto LABEL_13;
    goto LABEL_26;
  }
LABEL_19:
  if ((v9 & 0x10) == 0)
  {
    if ((v9 & 1) == 0)
    {
      v10 = sub_1ACBF2B3C(v6, 1);
      if (a2 != 2)
        goto LABEL_13;
      goto LABEL_26;
    }
LABEL_12:
    v10 = 0;
    if (a2 != 2)
      goto LABEL_13;
    goto LABEL_26;
  }
  v10 = *(_DWORD *)(v6 + 16);
  if ((v9 & 0x400) != 0)
    v10 += *(_DWORD *)v6;
  if (a2 != 2)
  {
LABEL_13:
    v11 = 0;
    v12 = &byte_1ACCBEAEE;
    if (!v8)
      return;
    goto LABEL_49;
  }
LABEL_26:
  v13 = a3[1];
  if (!v13)
  {
    v12 = 0;
    goto LABEL_36;
  }
  v14 = *(unsigned __int16 *)(v13 + 20);
  if ((~v14 & 0x202) != 0 || *(_BYTE *)(v13 + 22) != 1)
  {
    if ((v14 & 1) != 0)
    {
      v12 = 0;
      v15 = *(_WORD *)(v13 + 20);
      if ((v15 & 2) == 0)
        goto LABEL_42;
      goto LABEL_39;
    }
    v12 = (char *)sub_1ACBF2B64((int *)v13, 1);
    v13 = a3[1];
    if (v13)
    {
      v15 = *(_WORD *)(v13 + 20);
      if ((v15 & 2) == 0)
        goto LABEL_42;
      goto LABEL_39;
    }
LABEL_36:
    sub_1ACBBE20C(91120);
    v11 = 0;
    if (!v8)
      return;
    goto LABEL_49;
  }
  v12 = *(char **)(v13 + 8);
  v15 = *(_WORD *)(v13 + 20);
  if ((v15 & 2) == 0)
    goto LABEL_42;
LABEL_39:
  if (*(_BYTE *)(v13 + 22) == 1)
  {
    v11 = *(_DWORD *)(v13 + 16);
    if (!v8)
      return;
    goto LABEL_49;
  }
LABEL_42:
  if ((v15 & 0x10) != 0)
  {
    v11 = *(_DWORD *)(v13 + 16);
    if ((v15 & 0x400) != 0)
      v11 += *(_DWORD *)v13;
    if (!v8)
      return;
  }
  else if ((v15 & 1) != 0)
  {
    v11 = 0;
    if (!v8)
      return;
  }
  else
  {
    v11 = sub_1ACBF2B3C(v13, 1);
    if (!v8)
      return;
  }
LABEL_49:
  if (!v12)
    return;
  if (v10 >= 0)
    v16 = v10;
  else
    v16 = v10 + 1;
  v17 = sub_1ACC3F49C(a1, (v16 >> 1) + 1);
  v18 = (char *)v17;
  if (!v17)
  {
    LODWORD(v20) = 0;
    goto LABEL_95;
  }
  LOBYTE(v19) = *v8;
  LODWORD(v20) = v17;
  if (!*v8)
  {
LABEL_95:
    if (!a1 || (_DWORD)v20 - (_DWORD)v18 < 0)
      sub_1ACBBE20C(97348);
    else
      sub_1ACBC69D0((uint64_t)a1, v18, (_DWORD)v20 - (_DWORD)v18, 0, (uint64_t (*)(uint64_t))sqlite3_free);
    return;
  }
  v20 = (_BYTE *)v17;
LABEL_56:
  while (1)
  {
    v21 = v8 + 1;
    if ((byte_1ACCB6548[v19] & 8) == 0)
      break;
    v34 = *v21;
    if ((byte_1ACCB6548[v34] & 8) == 0)
      goto LABEL_88;
    *v20++ = ((((char)(2 * v34) >> 7) & 0xF9) + v34) & 0xF | (16
                                                                          * ((((char)(2 * v19) >> 7) & 0xF9)
                                                                           + v19));
    v35 = v8[2];
    v8 += 2;
    LOBYTE(v19) = v35;
    if (!v35)
      goto LABEL_95;
  }
  v19 = v19;
  if (v19 >= 0xC0u)
  {
    v19 = byte_1ACCB6CF6[v19 - 192];
    v22 = *v21;
    if ((*v21 & 0xC0) == 0x80)
    {
      do
      {
        v23 = *++v21;
        v19 = v22 & 0x3F | (v19 << 6);
        v22 = v23;
      }
      while ((v23 & 0xC0) == 0x80);
    }
    if (v19 >> 11 == 27 || v19 < 0x80 || v19 >> 1 == 0x7FFF)
      v19 = 65533;
  }
  v8 = v21;
  v26 = v12;
  while (v26 < &v12[v11])
  {
    v30 = *v26++;
    v29 = v30;
    v31 = v30 - 192;
    if (v30 >= 0xC0)
    {
      v29 = byte_1ACCB6CF6[v31];
      v32 = *v26;
      if ((*v26 & 0xC0) == 0x80)
      {
        do
        {
          v33 = *++v26;
          v29 = v32 & 0x3F | (v29 << 6);
          v32 = v33;
        }
        while ((v33 & 0xC0) == 0x80);
      }
      if (v29 >> 11 == 27 || v29 < 0x80 || v29 >> 1 == 0x7FFF)
        v29 = 65533;
    }
    if (v29 == v19)
    {
      LOBYTE(v19) = *v8;
      if (*v8)
        goto LABEL_56;
      goto LABEL_95;
    }
  }
LABEL_88:
  v36 = (void (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_93;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v18);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v18);
  v18 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v36 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_93:
    (*v36)(v18);
  }
}

void sub_1ACC3C070(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t __buf;

  __buf = 0;
  sqlite3_initialize();
  arc4random_buf(&__buf, 8uLL);
  v2 = __buf;
  if ((__buf & 0x8000000000000000) == 0)
  {
    if (a1)
      goto LABEL_3;
LABEL_6:
    sub_1ACBBE20C(97423);
    return;
  }
  v2 = -(__buf & 0x7FFFFFFFFFFFFFFFLL);
  __buf = v2;
  if (!a1)
    goto LABEL_6;
LABEL_3:
  v3 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v3, v2);
  }
  else
  {
    *(_QWORD *)v3 = v2;
    *(_WORD *)(v3 + 20) = 4;
  }
}

void sub_1ACC3C0FC(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  double v10;

  v4 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(89699);
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v5 = *(_WORD *)(v4 + 20);
  if ((v5 & 0x24) != 0)
  {
    v6 = *(_QWORD *)v4;
    goto LABEL_6;
  }
  if ((v5 & 8) != 0)
  {
    v10 = *(double *)v4;
    if (*(double *)v4 >= -9.22337204e18)
    {
      if (v10 <= 9.22337204e18)
        v6 = (uint64_t)v10;
      else
        v6 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v6 = 0x8000000000000000;
    }
    goto LABEL_6;
  }
  if ((v5 & 0x12) == 0 || !*(_QWORD *)(v4 + 8))
    goto LABEL_5;
  v6 = sub_1ACBF2FC0(v4);
LABEL_6:
  if (v6 <= 1)
    v7 = 1;
  else
    v7 = v6;
  v8 = sub_1ACC3F49C(a1, v7);
  if (v8)
  {
    v9 = (void *)v8;
    sqlite3_initialize();
    if ((int)v7 >= 1)
      arc4random_buf(v9, v7);
    if (!a1 || (v7 & 0x80000000) != 0)
      sub_1ACBBE20C(97348);
    else
      sub_1ACBC69D0((uint64_t)a1, (char *)v9, v7, 0, (uint64_t (*)(uint64_t))sqlite3_free);
  }
}

void sub_1ACC3C228(uint64_t a1)
{
  if (a1)
    sub_1ACBC69D0(a1, "2023-10-10 13:08:14 1b37c146ee9ebb7acd0160c0ab1fd11017a419fa8a3187386ed8cb32b709aapl", -1, 1u, 0);
  else
    sub_1ACBBE20C(97480);
}

void sub_1ACC3C250(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  __int16 v5;
  double v6;
  uint64_t v7;
  int v8;
  double v9;

  v4 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_5;
  }
  v5 = *(_WORD *)(v4 + 20);
  if ((v5 & 0x24) != 0)
  {
    v6 = *(double *)v4;
    goto LABEL_6;
  }
  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x12) != 0 && *(_QWORD *)(v4 + 8))
    {
      LODWORD(v6) = sub_1ACBF2FC0(v4);
      goto LABEL_6;
    }
LABEL_5:
    LODWORD(v6) = 0;
    goto LABEL_6;
  }
  v9 = *(double *)v4;
  if (*(double *)v4 >= -9.22337204e18)
  {
    if (v9 <= 9.22337204e18)
      *(_QWORD *)&v6 = (uint64_t)v9;
    else
      LODWORD(v6) = -1;
  }
  else
  {
    LODWORD(v6) = 0;
  }
LABEL_6:
  v7 = a3[1];
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 20);
    if ((~v8 & 0x202) != 0 || *(_BYTE *)(v7 + 22) != 1)
    {
      if ((v8 & 1) != 0)
        v7 = 0;
      else
        v7 = sub_1ACBF2B64((int *)v7, 1);
    }
    else
    {
      v7 = *(_QWORD *)(v7 + 8);
    }
  }
  sqlite3_log(SLODWORD(v6), "%s", (const char *)v7);
}

void sub_1ACC3C358(_DWORD *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  double v9;
  uint64_t v10;
  char *v11;
  __int16 v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  double v28;

  v26 = 0u;
  v27 = 0u;
  if (a1 && *(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  }
  else
  {
    sub_1ACBBE20C(97935);
    v5 = 0;
  }
  v6 = *(_DWORD *)(v5 + 136);
  v26 = v5;
  LODWORD(v27) = 0;
  *(_QWORD *)((char *)&v27 + 4) = v6;
  WORD6(v27) = 0;
  v7 = *a3;
  if (v7)
  {
    v8 = *(unsigned __int16 *)(v7 + 20);
    switch(byte_1ACCB6445[v8 & 0x3F])
    {
      case 1u:
        if ((v8 & 0x24) == 0 && (v8 & 8) == 0 && (v8 & 0x12) != 0 && *(_QWORD *)(v7 + 8))
          sub_1ACBF2FC0(v7);
        sqlite3_str_appendf((sqlite3_str *)&v26, "%lld");
        break;
      case 2u:
        v28 = 0.0;
        if ((v8 & 8) != 0)
        {
          v9 = *(double *)v7;
        }
        else if ((v8 & 0x24) != 0)
        {
          v9 = (double)*(uint64_t *)v7;
        }
        else if ((v8 & 0x12) != 0)
        {
          v9 = sub_1ACBF2F88(v7);
        }
        else
        {
          v9 = 0.0;
        }
        sqlite3_str_appendf((sqlite3_str *)&v26, "%!.15g", *(_QWORD *)&v9);
        if (DWORD2(v27))
        {
          *(_BYTE *)(*((_QWORD *)&v26 + 1) + DWORD2(v27)) = 0;
          v14 = (_QWORD *)*((_QWORD *)&v26 + 1);
          if (*((_QWORD *)&v26 + 1))
          {
            sub_1ACBA6B1C(*((unsigned __int8 **)&v26 + 1), &v28, SDWORD2(v27), 1);
            if (v9 != v28)
            {
              if ((BYTE13(v27) & 4) != 0)
              {
                sub_1ACBE0F9C((_QWORD *)v26, v14);
                BYTE13(v27) &= ~4u;
              }
              LODWORD(v27) = 0;
              DWORD2(v27) = 0;
              *((_QWORD *)&v26 + 1) = 0;
              sqlite3_str_appendf((sqlite3_str *)&v26, "%!.20e", *(_QWORD *)&v9);
            }
          }
        }
        break;
      case 3u:
        if ((~v8 & 0x202) != 0 || *(_BYTE *)(v7 + 22) != 1)
        {
          if ((v8 & 1) != 0)
            v10 = 0;
          else
            v10 = sub_1ACBF2B64((int *)v7, 1);
        }
        else
        {
          v10 = *(_QWORD *)(v7 + 8);
        }
        sqlite3_str_appendf((sqlite3_str *)&v26, "%Q", v10);
        break;
      case 4u:
        v11 = (char *)sqlite3_value_blob((sqlite3_value *)v7);
        v12 = *(_WORD *)(v7 + 20);
        if ((v12 & 2) != 0 && *(_BYTE *)(v7 + 22) == 1)
        {
          v13 = *(_DWORD *)(v7 + 16);
        }
        else if ((v12 & 0x10) != 0)
        {
          v13 = *(_DWORD *)(v7 + 16);
          if ((*(_WORD *)(v7 + 20) & 0x400) != 0)
            v13 += *(_DWORD *)v7;
        }
        else if ((v12 & 1) != 0)
        {
          v13 = 0;
        }
        else
        {
          v13 = sub_1ACBF2B3C(v7, 1);
        }
        v15 = 2 * v13;
        sub_1ACBC2594((_QWORD **)&v26, v15 + 4);
        if (!BYTE12(v27))
        {
          v16 = (_WORD *)*((_QWORD *)&v26 + 1);
          if (v13 >= 1)
          {
            v17 = v13;
            v18 = (_BYTE *)(*((_QWORD *)&v26 + 1) + 3);
            do
            {
              *(v18 - 1) = a0123456789abcd_2[(unint64_t)*v11 >> 4];
              v19 = *v11++;
              *v18 = a0123456789abcd_2[v19 & 0xF];
              v18 += 2;
              --v17;
            }
            while (v17);
          }
          v16[(unint64_t)v15 / 2 + 1] = 39;
          *v16 = 10072;
          DWORD2(v27) = v15 + 3;
        }
        break;
      default:
        goto LABEL_10;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
LABEL_10:
    sub_1ACBC290C((uint64_t)&v26, "NULL", 4u);
  }
  if (*((_QWORD *)&v26 + 1)
    && (*(_BYTE *)(*((_QWORD *)&v26 + 1) + DWORD2(v27)) = 0, DWORD1(v27))
    && (BYTE13(v27) & 4) == 0)
  {
    v20 = (char *)sub_1ACBE13A0((uint64_t *)&v26);
    if (!a1)
      goto LABEL_52;
  }
  else
  {
    v20 = (char *)*((_QWORD *)&v26 + 1);
    if (!a1)
    {
LABEL_52:
      sub_1ACBBE20C(97480);
      if (BYTE12(v27))
      {
        sub_1ACBBE20C(97433);
        sub_1ACBBE20C(97602);
      }
      return;
    }
  }
  sub_1ACBC69D0((uint64_t)a1, v20, SDWORD2(v27), 1u, sub_1ACBD0E78);
  v21 = BYTE12(v27);
  if (!BYTE12(v27))
    return;
  v22 = *(_QWORD *)a1;
  if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) == 0)
  {
    *(_WORD *)(v22 + 20) = 1;
    a1[9] = v21;
    if (v21 != 100)
    {
LABEL_62:
      if (v21 == 101)
      {
        v25 = "no more rows available";
      }
      else if (v21 > 0x1C || ((0x1410004uLL >> v21) & 1) != 0)
      {
        v25 = "unknown error";
      }
      else
      {
        v25 = off_1E5C74AE8[v21];
      }
      goto LABEL_70;
    }
LABEL_65:
    v25 = "another row available";
LABEL_70:
    sub_1ACBC69D0((uint64_t)a1, v25, -1, 1u, 0);
    return;
  }
  sub_1ACBF2A54((int *)v22);
  v21 = BYTE12(v27);
  v23 = *(_WORD *)(*(_QWORD *)a1 + 20);
  if (BYTE12(v27))
    v24 = BYTE12(v27);
  else
    v24 = -1;
  a1[9] = v24;
  if ((v23 & 1) != 0)
  {
    if (v21 != 100)
      goto LABEL_62;
    goto LABEL_65;
  }
}

void sub_1ACC3C7EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const char *v5;
  uint64_t v6;

  if (!a1 || (v2 = *a1) == 0)
  {
    sub_1ACBBE20C(97935);
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
LABEL_9:
    v5 = "NULL";
    goto LABEL_10;
  }
  v4 = *(unsigned __int8 *)(v3 + 113);
  switch(v4)
  {
    case 186:
      goto LABEL_7;
    case 118:
      v6 = *(_QWORD *)(v3 + 56);
      goto LABEL_12;
    case 109:
LABEL_7:
      v5 = "unopened";
      break;
    default:
      v5 = "invalid";
      break;
  }
LABEL_10:
  sqlite3_log(21, "API call with %s database connection pointer", v5);
  sub_1ACBBE20C(186245);
  if (!a1)
  {
    sub_1ACBBE20C(97423);
    return;
  }
  v6 = 0;
  v2 = *a1;
LABEL_12:
  if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v2, v6);
  }
  else
  {
    *(_QWORD *)v2 = v6;
    *(_WORD *)(v2 + 20) = 4;
  }
}

void sub_1ACC3C8E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const char *v5;
  uint64_t v6;

  if (!a1 || (v2 = *a1) == 0)
  {
    sub_1ACBBE20C(97935);
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
LABEL_9:
    v5 = "NULL";
    goto LABEL_10;
  }
  v4 = *(unsigned __int8 *)(v3 + 113);
  switch(v4)
  {
    case 186:
      goto LABEL_7;
    case 118:
      v6 = *(_QWORD *)(v3 + 120);
      goto LABEL_12;
    case 109:
LABEL_7:
      v5 = "unopened";
      break;
    default:
      v5 = "invalid";
      break;
  }
LABEL_10:
  sqlite3_log(21, "API call with %s database connection pointer", v5);
  sub_1ACBBE20C(186273);
  if (!a1)
  {
    sub_1ACBBE20C(97423);
    return;
  }
  v6 = 0;
  v2 = *a1;
LABEL_12:
  if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v2, v6);
  }
  else
  {
    *(_QWORD *)v2 = v6;
    *(_WORD *)(v2 + 20) = 4;
  }
}

void sub_1ACC3C9E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  const char *v5;
  uint64_t v6;

  if (!a1 || (v2 = *a1) == 0)
  {
    sub_1ACBBE20C(97935);
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(v2 + 24);
  if (!v3)
  {
LABEL_9:
    v5 = "NULL";
    goto LABEL_10;
  }
  v4 = *(unsigned __int8 *)(v3 + 113);
  switch(v4)
  {
    case 186:
      goto LABEL_7;
    case 118:
      v6 = *(_QWORD *)(v3 + 128);
      goto LABEL_12;
    case 109:
LABEL_7:
      v5 = "unopened";
      break;
    default:
      v5 = "invalid";
      break;
  }
LABEL_10:
  sqlite3_log(21, "API call with %s database connection pointer", v5);
  sub_1ACBBE20C(186289);
  if (!a1)
  {
    sub_1ACBBE20C(97423);
    return;
  }
  v6 = 0;
  v2 = *a1;
LABEL_12:
  if ((*(_WORD *)(v2 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v2, v6);
  }
  else
  {
    *(_QWORD *)v2 = v6;
    *(_WORD *)(v2 + 20) = 4;
  }
}

void sub_1ACC3CAE0(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  sqlite3_value *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  int v11;
  uint64_t v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  __int16 v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  char *v24;
  int v25;
  int v26;
  int v27;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  const void *v34;
  size_t v35;
  uint64_t v36;
  int v37;
  const void *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;
  size_t __n;
  int v44;

  if (a1 && *(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v6 = *(sqlite3_value **)a3;
    if (!*(_QWORD *)a3)
      return;
  }
  else
  {
    sub_1ACBBE20C(97935);
    v5 = 0;
    v6 = *(sqlite3_value **)a3;
    if (!*(_QWORD *)a3)
      return;
  }
  v7 = *((unsigned __int16 *)v6 + 10);
  if ((~v7 & 0x202) != 0 || *((_BYTE *)v6 + 22) != 1)
  {
    if ((v7 & 1) != 0)
      return;
    v8 = sub_1ACBF2B64((int *)v6, 1);
    if (!v8)
      return;
  }
  else
  {
    v8 = *((_QWORD *)v6 + 1);
    if (!v8)
      return;
  }
  v9 = *(_QWORD *)a3;
  if (!*(_QWORD *)a3)
  {
    sub_1ACBBE20C(91120);
LABEL_22:
    v11 = 0;
    v12 = *(_QWORD *)(a3 + 8);
    if (!v12)
      return;
    goto LABEL_27;
  }
  v10 = *(_WORD *)(v9 + 20);
  if ((v10 & 2) != 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    v11 = *(_DWORD *)(v9 + 16);
    v12 = *(_QWORD *)(a3 + 8);
    if (!v12)
      return;
    goto LABEL_27;
  }
  if ((v10 & 0x10) == 0)
  {
    if ((v10 & 1) == 0)
    {
      v11 = sub_1ACBF2B3C(v9, 1);
      v12 = *(_QWORD *)(a3 + 8);
      if (!v12)
        return;
      goto LABEL_27;
    }
    goto LABEL_22;
  }
  v11 = *(_DWORD *)(v9 + 16);
  if ((*(_WORD *)(v9 + 20) & 0x400) != 0)
    v11 += *(_DWORD *)v9;
  v12 = *(_QWORD *)(a3 + 8);
  if (!v12)
    return;
LABEL_27:
  v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0)
      return;
    v14 = (_BYTE *)sub_1ACBF2B64((int *)v12, 1);
    if (!v14)
      return;
  }
  else
  {
    v14 = *(_BYTE **)(v12 + 8);
    if (!v14)
      return;
  }
  if (!*v14)
  {
    sqlite3_result_value(a1, *(sqlite3_value **)a3);
    return;
  }
  v15 = *(_QWORD *)(a3 + 8);
  if (!v15)
  {
    sub_1ACBBE20C(91120);
LABEL_43:
    v17 = 0;
    goto LABEL_44;
  }
  v16 = *(_WORD *)(v15 + 20);
  if ((v16 & 2) != 0 && *(_BYTE *)(v15 + 22) == 1)
  {
    v17 = *(_DWORD *)(v15 + 16);
    goto LABEL_44;
  }
  if ((v16 & 0x10) == 0)
  {
    if ((v16 & 1) == 0)
    {
      v17 = sub_1ACBF2B3C(v15, 1);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  v17 = *(_DWORD *)(v15 + 16);
  if ((*(_WORD *)(v15 + 20) & 0x400) != 0)
    v17 += *(_DWORD *)v15;
LABEL_44:
  v18 = *(_QWORD *)(a3 + 16);
  if (!v18)
    return;
  v19 = *(unsigned __int16 *)(v18 + 20);
  if ((~v19 & 0x202) != 0 || *(_BYTE *)(v18 + 22) != 1)
  {
    if ((v19 & 1) != 0)
      return;
    v20 = sub_1ACBF2B64((int *)v18, 1);
  }
  else
  {
    v20 = *(_QWORD *)(v18 + 8);
  }
  if (v20)
  {
    v21 = *(_QWORD *)(a3 + 16);
    if (v21)
    {
      v22 = *(_WORD *)(v21 + 20);
      if ((v22 & 2) != 0 && *(_BYTE *)(v21 + 22) == 1)
      {
        v42 = *(_DWORD *)(v21 + 16);
LABEL_62:
        v40 = v11 + 1;
        v23 = sub_1ACC3F49C(a1, v40);
        if (!v23)
          return;
        v24 = (char *)v23;
        v44 = v11 - v17;
        if (v11 - v17 < 0)
        {
          v27 = 0;
          v25 = 0;
LABEL_81:
          v34 = (const void *)(v8 + v27);
          v35 = v11 - v27;
          memcpy(&v24[v25], v34, v35);
          v24[v25 + v35] = 0;
          if (a1)
            sub_1ACBC69D0((uint64_t)a1, v24, v25 + v35, 1u, (uint64_t (*)(uint64_t))sqlite3_free);
          else
            sub_1ACBBE20C(97480);
          return;
        }
        v41 = 0;
        v25 = 0;
        v26 = 0;
        __n = v17;
        v36 = v42 - v17;
        v38 = (const void *)v20;
        v37 = v17 - 1;
        v39 = v17;
        while (1)
        {
          v29 = (unsigned __int8 *)(v8 + v26);
          v30 = *v29;
          if (v30 == *v14 && !memcmp(v29, v14, __n))
          {
            if (v42 <= v17)
            {
              v33 = (uint64_t)v24;
              v32 = v41;
            }
            else
            {
              v31 = v40 + v36;
              if (v40 + v36 - 1 > *(int *)(v5 + 136))
              {
                sqlite3_result_error_toobig(a1);
                goto LABEL_86;
              }
              v32 = v41 + 1;
              v40 += v36;
              if (((v41 + 1) & v41) != 0)
              {
                v33 = (uint64_t)v24;
              }
              else
              {
                v33 = sub_1ACB6BB48((uint64_t)v24, v31 + ~v11 + (int)v31);
                if (!v33)
                {
                  sqlite3_result_error_nomem(a1);
LABEL_86:
                  sqlite3_free(v24);
                  return;
                }
              }
            }
            memcpy((void *)(v33 + v25), v38, v42);
            v25 += v42;
            v26 += v37;
            v24 = (char *)v33;
            v41 = v32;
            v17 = v39;
          }
          else
          {
            v24[v25++] = v30;
          }
          v27 = v26 + 1;
          if (v26++ >= v44)
            goto LABEL_81;
        }
      }
      if ((v22 & 0x10) != 0)
      {
        v42 = *(_DWORD *)(v21 + 16);
        if ((*(_WORD *)(v21 + 20) & 0x400) != 0)
          v42 += *(_DWORD *)v21;
        goto LABEL_62;
      }
      if ((v22 & 1) == 0)
      {
        v42 = sub_1ACBF2B3C(v21, 1);
        goto LABEL_62;
      }
    }
    else
    {
      sub_1ACBBE20C(91120);
    }
    v42 = 0;
    goto LABEL_62;
  }
}

void sub_1ACC3CFA4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;

  v4 = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_5;
  }
  v5 = *(_WORD *)(v4 + 20);
  if ((v5 & 0x24) != 0)
  {
    v6 = *(_QWORD *)v4;
    goto LABEL_6;
  }
  if ((v5 & 8) == 0)
  {
    if ((v5 & 0x12) != 0 && *(_QWORD *)(v4 + 8))
    {
      v6 = sub_1ACBF2FC0(v4);
      goto LABEL_6;
    }
LABEL_5:
    v6 = 0;
    goto LABEL_6;
  }
  v9 = *(double *)v4;
  if (*(double *)v4 >= -9.22337204e18)
  {
    if (v9 <= 9.22337204e18)
      v6 = (uint64_t)v9;
    else
      v6 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v6 = 0x8000000000000000;
  }
LABEL_6:
  if (a1)
  {
    v7 = v6 & ~(v6 >> 63);
    v8 = *(_QWORD *)a1;
    if (v7 <= *(int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 136))
    {
      if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32))
        sub_1ACBF2A04(*(_QWORD *)a1);
      *(_WORD *)(v8 + 20) = 1040;
      *(_DWORD *)(v8 + 16) = 0;
      *(_DWORD *)v8 = v7 & ~((int)v7 >> 31);
      *(_BYTE *)(v8 + 22) = 1;
      *(_QWORD *)(v8 + 8) = 0;
    }
    else
    {
      *(_DWORD *)(a1 + 36) = 18;
      sub_1ACB57870(v8, "string or blob too big", -1, 1u, 0);
      *(_DWORD *)(a1 + 36) = 18;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
        sub_1ACBC69D0(a1, "string or blob too big", -1, 1u, 0);
    }
  }
  else
  {
    sub_1ACBBE20C(97583);
    sub_1ACBBE20C(97602);
  }
}

void sub_1ACC3D134(sqlite3_context *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  sqlite3_value *v8;
  int v9;
  uint64_t v10;
  __int16 v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  int v16;
  int v17;
  const char *v18;
  uint64_t v19;
  __int16 v20;
  double v21;
  uint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  BOOL v31;
  const char *v32;
  unsigned int v33;
  BOOL v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  const char *v40;
  unsigned int v41;
  unsigned int v42;
  double v43;

  v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v6 + 20)) & 1) != 0)
      return;
    if (a2 != 3)
      goto LABEL_8;
  }
  else
  {
    sub_1ACBBE20C(97202);
    if (a2 != 3)
      goto LABEL_8;
  }
  v7 = *(_QWORD *)(a3 + 16);
  if (v7)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v7 + 20)) & 1) != 0)
      return;
LABEL_8:
    v8 = *(sqlite3_value **)a3;
    if (*(_QWORD *)a3)
      goto LABEL_9;
    goto LABEL_17;
  }
  sub_1ACBBE20C(97202);
  v8 = *(sqlite3_value **)a3;
  if (*(_QWORD *)a3)
  {
LABEL_9:
    v9 = byte_1ACCB6445[*((_WORD *)v8 + 10) & 0x3F];
    v10 = *(_QWORD *)(a3 + 8);
    if (v10)
      goto LABEL_10;
LABEL_18:
    sub_1ACBBE20C(89699);
LABEL_19:
    LODWORD(v12) = 0;
    goto LABEL_25;
  }
LABEL_17:
  sub_1ACBBE20C(97202);
  v9 = 0;
  v10 = *(_QWORD *)(a3 + 8);
  if (!v10)
    goto LABEL_18;
LABEL_10:
  v11 = *(_WORD *)(v10 + 20);
  if ((v11 & 0x24) != 0)
  {
    v12 = *(double *)v10;
    goto LABEL_25;
  }
  if ((v11 & 8) == 0)
  {
    if ((v11 & 0x12) != 0 && *(_QWORD *)(v10 + 8))
    {
      LODWORD(v12) = sub_1ACBF2FC0(v10);
      goto LABEL_25;
    }
    goto LABEL_19;
  }
  LODWORD(v13) = -1;
  if (*(double *)v10 <= 9.22337204e18)
    v13 = (uint64_t)*(double *)v10;
  if (*(double *)v10 >= -9.22337204e18)
    LODWORD(v12) = v13;
  else
    LODWORD(v12) = 0;
LABEL_25:
  v14 = *(_QWORD *)a3;
  if (v9 == 4)
  {
    if (v14)
    {
      v15 = *(_WORD *)(v14 + 20);
      if ((v15 & 2) != 0 && *(_BYTE *)(v14 + 22) == 1)
      {
        v16 = *(_DWORD *)(v14 + 16);
        goto LABEL_44;
      }
      if ((v15 & 0x10) != 0)
      {
        v16 = *(_DWORD *)(v14 + 16);
        if ((*(_WORD *)(v14 + 20) & 0x400) != 0)
          v16 += *(_DWORD *)v14;
LABEL_44:
        v18 = (const char *)sqlite3_value_blob(*(sqlite3_value **)a3);
        if (!v18)
          return;
        goto LABEL_45;
      }
      if ((v15 & 1) == 0)
      {
        v16 = sub_1ACBF2B3C(v14, 1);
        goto LABEL_44;
      }
    }
    else
    {
      sub_1ACBBE20C(91120);
    }
    v16 = 0;
    goto LABEL_44;
  }
  if (!v14)
    return;
  v17 = *(unsigned __int16 *)(v14 + 20);
  if ((~v17 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v17 & 1) != 0)
      return;
    v18 = (const char *)sub_1ACBF2B64((int *)v14, 1);
    if (!v18)
      return;
  }
  else
  {
    v18 = *(const char **)(v14 + 8);
    if (!v18)
      return;
  }
  if ((LODWORD(v12) & 0x80000000) != 0 && (v39 = *(unsigned __int8 *)v18, *v18))
  {
    v16 = 0;
    v40 = v18;
    do
    {
      if (v39 < 0xC0)
      {
        v41 = *(unsigned __int8 *)++v40;
        v39 = v41;
      }
      else
      {
        do
        {
          v42 = *(unsigned __int8 *)++v40;
          v39 = v42;
        }
        while ((v42 & 0xC0) == 0x80);
      }
      ++v16;
    }
    while (v39);
  }
  else
  {
    v16 = 0;
  }
LABEL_45:
  if (LODWORD(v12) <= 1)
    LODWORD(v12) = 1;
  if (a2 != 3)
  {
    if (!a1 || !*(_QWORD *)a1)
      sub_1ACCB4024();
    v22 = *(int *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 136);
    v23 = 1;
    goto LABEL_61;
  }
  v19 = *(_QWORD *)(a3 + 16);
  if (!v19)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_58;
  }
  v20 = *(_WORD *)(v19 + 20);
  if ((v20 & 0x24) != 0)
  {
    v21 = *(double *)v19;
    goto LABEL_59;
  }
  if ((v20 & 8) == 0)
  {
    if ((v20 & 0x12) != 0 && *(_QWORD *)(v19 + 8))
    {
      LODWORD(v21) = sub_1ACBF2FC0(v19);
      goto LABEL_59;
    }
LABEL_58:
    LODWORD(v21) = 0;
    goto LABEL_59;
  }
  v43 = *(double *)v19;
  if (*(double *)v19 >= -9.22337204e18)
  {
    if (v43 <= 9.22337204e18)
      *(_QWORD *)&v21 = (uint64_t)v43;
    else
      LODWORD(v21) = -1;
  }
  else
  {
    LODWORD(v21) = 0;
  }
LABEL_59:
  v22 = SLODWORD(v21);
  v23 = SLODWORD(v21) >= 0;
  if ((LODWORD(v21) & 0x80000000) != 0)
    v22 = -(uint64_t)SLODWORD(v21);
LABEL_61:
  v24 = SLODWORD(v12) + (uint64_t)v16;
  v25 = (v22 + v24) & ~((v22 + v24) >> 63);
  if (v24 >= 0)
    v25 = v22;
  else
    v24 = 0;
  if (SLODWORD(v12) < 0)
    v26 = v24;
  else
    v26 = SLODWORD(v12) - 1;
  if (SLODWORD(v12) < 0)
    v22 = v25;
  if (v26 >= v22)
    v27 = v22;
  else
    v27 = v26;
  if (v23)
  {
    v28 = v22;
  }
  else
  {
    v26 = (v26 - v22) & ~((v26 - v22) >> 63);
    v28 = v27;
  }
  if (v9 == 4)
  {
    if (v28 + v26 <= v16)
      v29 = v28;
    else
      v29 = (v16 - v26) & ~((v16 - v26) >> 63);
    if (a1)
    {
      if (v29 >> 31)
      {
        *((_DWORD *)a1 + 9) = 18;
        sub_1ACB57870(*(_QWORD *)a1, "string or blob too big", -1, 1u, 0);
      }
      else
      {
        sub_1ACBC69D0((uint64_t)a1, (char *)&v18[v26], v29, 0, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }
    }
    else
    {
      sub_1ACBBE20C(97364);
    }
  }
  else
  {
    v30 = *(unsigned __int8 *)v18;
    if (*v18 && v26)
    {
      do
      {
        if (v30 < 0xC0)
        {
          v33 = *(unsigned __int8 *)++v18;
          v30 = v33;
        }
        else
        {
          do
          {
            v35 = *(unsigned __int8 *)++v18;
            v30 = v35;
          }
          while ((v35 & 0xC0) == 0x80);
        }
        --v26;
        if (v30)
          v34 = v26 == 0;
        else
          v34 = 1;
      }
      while (!v34);
    }
    if (v30)
      v31 = v28 == 0;
    else
      v31 = 1;
    v32 = v18;
    if (!v31)
    {
      v32 = v18;
      do
      {
        if (v30 < 0xC0)
        {
          v36 = *(unsigned __int8 *)++v32;
          v30 = v36;
        }
        else
        {
          do
          {
            v38 = *(unsigned __int8 *)++v32;
            v30 = v38;
          }
          while ((v38 & 0xC0) == 0x80);
        }
        --v28;
        if (v30)
          v37 = v28 == 0;
        else
          v37 = 1;
      }
      while (!v37);
    }
    sqlite3_result_text64(a1, v18, v32 - v18, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL, 1u);
  }
}

void sub_1ACC3D600(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  double v30;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v4 + 32))
  {
    sub_1ACBBE20C(98105);
    v6 = 0;
    v7 = *a3;
    if (*a3)
      goto LABEL_9;
    goto LABEL_6;
  }
  v5 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v5 + 20) < 0)
  {
    v6 = *(double **)(v5 + 8);
    v7 = *a3;
    if (*a3)
      goto LABEL_9;
LABEL_6:
    sub_1ACBBE20C(97202);
    v8 = 0;
    if (!v6)
      return;
LABEL_12:
    if (v8 == 5)
      return;
    ++*((_QWORD *)v6 + 3);
    if (*((_BYTE *)v6 + 32))
    {
      if (v8 == 1)
      {
        v10 = *a3;
        if (*a3)
        {
LABEL_16:
          v11 = *(_WORD *)(v10 + 20);
          if ((v11 & 0x24) != 0)
          {
            v12 = *(_QWORD *)v10;
LABEL_76:
            sub_1ACC3F570(v6, v12);
            return;
          }
          if ((v11 & 8) != 0)
          {
            v24 = *(double *)v10;
            if (*(double *)v10 >= -9.22337204e18)
            {
              if (v24 <= 9.22337204e18)
                v12 = (uint64_t)v24;
              else
                v12 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else
            {
              v12 = 0x8000000000000000;
            }
            goto LABEL_76;
          }
          if ((v11 & 0x12) != 0 && *(_QWORD *)(v10 + 8))
          {
            v12 = sub_1ACBF2FC0(v10);
            goto LABEL_76;
          }
LABEL_75:
          v12 = 0;
          goto LABEL_76;
        }
LABEL_74:
        sub_1ACBBE20C(89699);
        goto LABEL_75;
      }
      *((_BYTE *)v6 + 33) = 0;
      v17 = *a3;
      if (*a3)
      {
        v18 = *(_WORD *)(v17 + 20);
        if ((v18 & 8) == 0)
          goto LABEL_28;
        goto LABEL_40;
      }
      goto LABEL_41;
    }
    v13 = *((_QWORD *)v6 + 2);
    if (v8 != 1)
    {
      if ((unint64_t)(v13 - 0x10000000000000) > 0xFFE0000000000000)
      {
        *v6 = (double)v13;
        v21 = 0.0;
      }
      else
      {
        if (v13 <= 0)
          v20 = -(-v13 & 0x3FFF);
        else
          v20 = (_QWORD)v6[2] & 0x3FFFLL;
        *v6 = (double)(v13 - v20);
        v21 = (double)v20;
      }
      v6[1] = v21;
      *((_BYTE *)v6 + 32) = 1;
      v17 = *a3;
      if (*a3)
      {
        v18 = *(_WORD *)(v17 + 20);
        if ((v18 & 8) == 0)
        {
LABEL_28:
          if ((v18 & 0x24) != 0)
          {
            v19 = (double)*(uint64_t *)v17;
          }
          else if ((v18 & 0x12) != 0)
          {
            v19 = sub_1ACBF2F88(v17);
          }
          else
          {
            v19 = 0.0;
          }
LABEL_42:
          v30 = v19;
          v29 = *v6 + v19;
          if (fabs(*v6) <= fabs(v19))
          {
            v22 = v19 - v29;
            v23 = *v6;
          }
          else
          {
            v22 = *v6 - v29;
            v23 = v30;
          }
          v6[1] = v22 + v23 + v6[1];
          *v6 = v29;
          return;
        }
LABEL_40:
        v19 = *(double *)v17;
        goto LABEL_42;
      }
LABEL_41:
      sub_1ACBBE20C(89734);
      v19 = 0.0;
      goto LABEL_42;
    }
    v14 = *a3;
    if (*a3)
    {
      v15 = *(_WORD *)(v14 + 20);
      if ((v15 & 0x24) != 0)
      {
        v16 = *(_QWORD *)v14;
        goto LABEL_22;
      }
      if ((v15 & 8) != 0)
      {
        v25 = *(double *)v14;
        if (*(double *)v14 < -9.22337204e18)
        {
          v16 = 0x8000000000000000;
          goto LABEL_62;
        }
        if (v25 > 9.22337204e18)
        {
          v16 = 0x7FFFFFFFFFFFFFFFLL;
          if (v13 >= 1)
          {
LABEL_24:
            if ((v13 ^ 0x7FFFFFFFFFFFFFFFuLL) >= v16)
              goto LABEL_79;
LABEL_64:
            *((_BYTE *)v6 + 33) = 1;
            v26 = *((_QWORD *)v6 + 2);
            if ((unint64_t)(v26 - 0x10000000000000) > 0xFFE0000000000000)
            {
              *v6 = (double)v26;
              v28 = 0.0;
            }
            else
            {
              if (v26 <= 0)
                v27 = -(-v26 & 0x3FFF);
              else
                v27 = (_QWORD)v6[2] & 0x3FFFLL;
              *v6 = (double)(v26 - v27);
              v28 = (double)v27;
            }
            v6[1] = v28;
            *((_BYTE *)v6 + 32) = 1;
            v10 = *a3;
            if (*a3)
              goto LABEL_16;
            goto LABEL_74;
          }
LABEL_79:
          *((_QWORD *)v6 + 2) = v16 + v13;
          return;
        }
        v16 = (uint64_t)v25;
LABEL_22:
        if ((v16 & 0x8000000000000000) == 0)
        {
          if (v13 >= 1)
            goto LABEL_24;
          goto LABEL_79;
        }
LABEL_62:
        if ((v13 & 0x8000000000000000) == 0 || (uint64_t)(0x8000000000000001 - v13) <= (uint64_t)(v16 + 1))
          goto LABEL_79;
        goto LABEL_64;
      }
      if ((v15 & 0x12) != 0 && *(_QWORD *)(v14 + 8))
      {
        v16 = sub_1ACBF2FC0(v14);
        goto LABEL_22;
      }
    }
    else
    {
      sub_1ACBBE20C(89699);
    }
    v16 = 0;
    goto LABEL_79;
  }
  v6 = (double *)sub_1ACBC794C(a1, 40);
  v7 = *a3;
  if (!*a3)
    goto LABEL_6;
LABEL_9:
  v9 = *(_WORD *)(v7 + 20);
  if (((0x4000000040004uLL >> v9) & 1) != 0)
  {
    sub_1ACBCA9CC(v7, 0);
    v9 = *(_WORD *)(v7 + 20);
  }
  v8 = byte_1ACCB6445[v9 & 0x3F];
  if (v6)
    goto LABEL_12;
}

void sub_1ACC3DA20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;

  if (!a1 || (v2 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(void **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = sub_1ACBC794C(a1, 0);
    if (!v4)
      return;
  }
  if (*((uint64_t *)v4 + 3) >= 1)
  {
    if (*((_BYTE *)v4 + 32))
    {
      if (*((_BYTE *)v4 + 33))
      {
        *(_DWORD *)(a1 + 36) = 1;
        sub_1ACB57870(*(_QWORD *)a1, "integer overflow", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }
      else
      {
        v7 = *((double *)v4 + 1) + *(double *)v4;
        v8 = *(_QWORD *)a1;
        if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
          sub_1ACBF2A54((int *)v8);
        else
          *(_WORD *)(v8 + 20) = 1;
        *(double *)v8 = v7;
        *(_WORD *)(v8 + 20) = 8;
      }
    }
    else
    {
      v5 = *((_QWORD *)v4 + 2);
      v6 = *(_QWORD *)a1;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v6, v5);
      }
      else
      {
        *(_QWORD *)v6 = v5;
        *(_WORD *)(v6 + 20) = 4;
      }
    }
  }
}

double sub_1ACC3DB68(uint64_t a1, double result, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;

  if (!a1 || (v5 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v5 + 32))
  {
    sub_1ACBBE20C(98105);
    v7 = 0;
    v8 = *a4;
    if (*a4)
      goto LABEL_9;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(double **)(v6 + 8);
    v8 = *a4;
    if (*a4)
      goto LABEL_9;
LABEL_6:
    sub_1ACBBE20C(97202);
    v9 = 0;
    if (!v7)
      return result;
LABEL_12:
    if (v9 == 5)
      return result;
    --*((_QWORD *)v7 + 3);
    if (*((_BYTE *)v7 + 32))
    {
      v11 = *a4;
      if (v9 != 1)
      {
        if (v11)
        {
          v17 = *(_WORD *)(v11 + 20);
          if ((v17 & 8) != 0)
          {
            v18 = *(double *)v11;
          }
          else if ((v17 & 0x24) != 0)
          {
            v18 = (double)*(uint64_t *)v11;
          }
          else if ((v17 & 0x12) != 0)
          {
            v18 = sub_1ACBF2F88(v11);
          }
          else
          {
            v18 = 0.0;
          }
        }
        else
        {
          sub_1ACBBE20C(89734);
          v18 = 0.0;
        }
        v23 = -v18;
        goto LABEL_38;
      }
      if (v11)
      {
        v12 = *(_WORD *)(v11 + 20);
        if ((v12 & 0x24) != 0)
        {
          v13 = *(_QWORD *)v11;
          goto LABEL_18;
        }
        if ((v12 & 8) != 0)
        {
          v21 = *(double *)v11;
          if (*(double *)v11 < -9.22337204e18)
            goto LABEL_19;
          if (v21 > 9.22337204e18)
          {
            v13 = 0x7FFFFFFFFFFFFFFFLL;
            return sub_1ACC3F570(v7, -v13);
          }
          v13 = (uint64_t)v21;
          goto LABEL_18;
        }
        if ((v12 & 0x12) != 0 && *(_QWORD *)(v11 + 8))
        {
          v13 = sub_1ACBF2FC0(v11);
LABEL_18:
          if (v13 == 0x8000000000000000)
          {
LABEL_19:
            sub_1ACC3F570(v7, 0x7FFFFFFFFFFFFFFFLL);
            v23 = 1.0;
LABEL_38:
            v22 = *v7 + v23;
            if (fabs(*v7) <= fabs(v23))
            {
              v19 = v23 - v22;
              v20 = *v7;
            }
            else
            {
              v19 = *v7 - v22;
              v20 = v23;
            }
            v7[1] = v19 + v20 + v7[1];
            result = v22;
            *v7 = v22;
            return result;
          }
          return sub_1ACC3F570(v7, -v13);
        }
      }
      else
      {
        sub_1ACBBE20C(89699);
      }
      v13 = 0;
      return sub_1ACC3F570(v7, -v13);
    }
    v14 = *a4;
    if (*a4)
    {
      v15 = *(_WORD *)(v14 + 20);
      if ((v15 & 0x24) != 0)
      {
        v16 = *(double *)v14;
LABEL_31:
        *((_QWORD *)v7 + 2) -= *(_QWORD *)&v16;
        return result;
      }
      if ((v15 & 8) != 0)
      {
        result = *(double *)v14;
        if (*(double *)v14 >= -9.22337204e18)
        {
          if (result <= 9.22337204e18)
            *(_QWORD *)&v16 = (uint64_t)result;
          else
            v16 = NAN;
        }
        else
        {
          v16 = -0.0;
        }
        goto LABEL_31;
      }
      if ((v15 & 0x12) != 0 && *(_QWORD *)(v14 + 8))
      {
        v16 = COERCE_DOUBLE(sub_1ACBF2FC0(v14));
        goto LABEL_31;
      }
    }
    else
    {
      sub_1ACBBE20C(89699);
    }
    v16 = 0.0;
    goto LABEL_31;
  }
  v7 = (double *)sub_1ACBC794C(a1, 40);
  v8 = *a4;
  if (!*a4)
    goto LABEL_6;
LABEL_9:
  v10 = *(_WORD *)(v8 + 20);
  if (((0x4000000040004uLL >> v10) & 1) != 0)
  {
    sub_1ACBCA9CC(v8, 0);
    v10 = *(_WORD *)(v8 + 20);
  }
  v9 = byte_1ACCB6445[v10 & 0x3F];
  if (v7)
    goto LABEL_12;
  return result;
}

void sub_1ACC3DE9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  double v5;
  uint64_t v6;

  if (!a1)
  {
    sub_1ACBBE20C(98105);
    sub_1ACBBE20C(97379);
    return;
  }
  v2 = a1[1];
  if (!v2 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    goto LABEL_8;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(double **)(v3 + 8);
    if (v4)
      goto LABEL_15;
LABEL_8:
    v5 = 0.0;
    goto LABEL_9;
  }
  v4 = (double *)sub_1ACBC794C((uint64_t)a1, 0);
  if (!v4)
    goto LABEL_8;
LABEL_15:
  if (*((_BYTE *)v4 + 32))
    v5 = *v4 + v4[1];
  else
    v5 = (double)*((uint64_t *)v4 + 2);
LABEL_9:
  v6 = *a1;
  if ((*(_WORD *)(v6 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)v6);
  else
    *(_WORD *)(v6 + 20) = 1;
  *(double *)v6 = v5;
  *(_WORD *)(v6 + 20) = 8;
}

void sub_1ACC3DFA8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  double *v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;

  if (!a1 || (v2 = a1[1]) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(double **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (double *)sub_1ACBC794C((uint64_t)a1, 0);
    if (!v4)
      return;
  }
  v5 = *((_QWORD *)v4 + 3);
  if (v5 >= 1)
  {
    if (*((_BYTE *)v4 + 32))
      v6 = *v4 + v4[1];
    else
      v6 = (double)*((uint64_t *)v4 + 2);
    v7 = v6 / (double)v5;
    v8 = *a1;
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
      sub_1ACBF2A54((int *)v8);
    else
      *(_WORD *)(v8 + 20) = 1;
    *(double *)v8 = v7;
    *(_WORD *)(v8 + 20) = 8;
  }
}

uint64_t sub_1ACC3E0A4(uint64_t result, int a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;

  if (!result || (v5 = *(_QWORD *)(result + 8)) == 0 || !*(_QWORD *)(v5 + 32))
  {
    result = sub_1ACBBE20C(98105);
    if (!a2)
      return result;
    v7 = 0;
    v8 = *a3;
    if (*a3)
      goto LABEL_7;
    goto LABEL_10;
  }
  v6 = *(_QWORD *)(result + 16);
  if ((*(__int16 *)(v6 + 20) & 0x80000000) == 0)
  {
    result = (uint64_t)sub_1ACBC794C(result, 8);
    v7 = (_QWORD *)result;
    if (a2)
      goto LABEL_6;
LABEL_18:
    if (!v7)
      return result;
    goto LABEL_15;
  }
  v7 = *(_QWORD **)(v6 + 8);
  if (!a2)
    goto LABEL_18;
LABEL_6:
  v8 = *a3;
  if (*a3)
  {
LABEL_7:
    v9 = (0x5555555555555555uLL >> *(_WORD *)(v8 + 20)) & 1;
    goto LABEL_11;
  }
LABEL_10:
  result = sub_1ACBBE20C(97202);
  LODWORD(v9) = 1;
LABEL_11:
  if ((_DWORD)v9)
    v10 = v7 == 0;
  else
    v10 = 1;
  if (!v10)
LABEL_15:
    --*v7;
  return result;
}

unsigned __int16 *sub_1ACC3E170(unsigned __int16 *result, int a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  const void *v14;
  int v15;
  __int16 v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  signed int v20;
  uint64_t v21;
  __int16 v22;
  const float *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  int v29;
  uint64_t v30;
  char v31;
  _QWORD *v32;
  int v33;
  const void *v34;
  signed int v35;
  uint64_t v36;
  unsigned __int16 v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float32x4_t v42;
  float32x4_t *v43;

  v5 = result;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*a3 + 20)) & 1) != 0)
      return result;
  }
  else
  {
    result = (unsigned __int16 *)sub_1ACBBE20C(97202);
  }
  if (!v5 || (v6 = v5[1]) == 0 || !*(_QWORD *)(v6 + 32))
  {
    v9 = 98105;
    return (unsigned __int16 *)sub_1ACBBE20C(v9);
  }
  v7 = v5[2];
  if (*(__int16 *)(v7 + 20) < 0)
  {
    v8 = *(_QWORD *)(v7 + 8);
    if (!v8)
      return result;
  }
  else
  {
    result = (unsigned __int16 *)sub_1ACBC794C((uint64_t)v5, 48);
    v8 = (uint64_t)result;
    if (!result)
      return result;
  }
  if (!*v5)
    sub_1ACCB4024();
  v10 = *(_DWORD *)(v8 + 20);
  *(_DWORD *)(v8 + 20) = *(_DWORD *)(*(_QWORD *)(*v5 + 24) + 136);
  if (a2 != 1)
  {
    v12 = a3[1];
    if (!v10)
    {
      if (v12)
      {
        v16 = *(_WORD *)(v12 + 20);
        if ((v16 & 2) != 0 && *(_BYTE *)(v12 + 22) == 1)
        {
          v15 = *(_DWORD *)(v12 + 16);
          goto LABEL_58;
        }
        if ((v16 & 0x10) != 0)
        {
          v15 = *(_DWORD *)(v12 + 16);
          if ((*(_WORD *)(v12 + 20) & 0x400) != 0)
            v15 += *(_DWORD *)v12;
          goto LABEL_58;
        }
        if ((v16 & 1) == 0)
        {
          v15 = sub_1ACBF2B3C(v12, 1);
          goto LABEL_58;
        }
      }
      else
      {
        sub_1ACBBE20C(91120);
      }
      v15 = 0;
      goto LABEL_58;
    }
    if (v12)
    {
      v13 = *(unsigned __int16 *)(v12 + 20);
      if ((~v13 & 0x202) == 0 && *(_BYTE *)(v12 + 22) == 1)
      {
        v14 = *(const void **)(v12 + 8);
        goto LABEL_48;
      }
      if ((v13 & 1) != 0)
      {
        v14 = 0;
      }
      else
      {
        v14 = (const void *)sub_1ACBF2B64((int *)v12, 1);
        v12 = a3[1];
        if (!v12)
          goto LABEL_37;
      }
LABEL_48:
      v22 = *(_WORD *)(v12 + 20);
      if ((v22 & 2) != 0 && *(_BYTE *)(v12 + 22) == 1)
      {
        v20 = *(_DWORD *)(v12 + 16);
        goto LABEL_39;
      }
      if ((v22 & 0x10) != 0)
      {
        v20 = *(_DWORD *)(v12 + 16);
        if ((*(_WORD *)(v12 + 20) & 0x400) != 0)
          v20 += *(_DWORD *)v12;
LABEL_39:
        if (v14)
        {
          if (v20 <= 0)
          {
            if (v20)
              sub_1ACBBE20C(32736);
          }
          else
          {
            v21 = *(unsigned int *)(v8 + 24);
            if ((v21 + v20) >= *(_DWORD *)(v8 + 16))
            {
              sub_1ACBC290C(v8, v14, v20);
            }
            else
            {
              *(_DWORD *)(v8 + 24) = v21 + v20;
              memcpy((void *)(*(_QWORD *)(v8 + 8) + v21), v14, v20);
            }
          }
        }
        else
        {
          v20 = 0;
        }
        v23 = (const float *)(v8 + 36);
        v24 = *(_QWORD *)(v8 + 40);
        if (v20 == *(_DWORD *)(v8 + 36))
        {
          if (!v24)
            goto LABEL_78;
        }
        else if (!v24)
        {
          v30 = *(int *)(v8 + 32);
          if (!sqlite3_initialize())
          {
            v26 = sub_1ACB5D828(4 * v30 + 4);
            if (v26)
            {
              v38 = *(_DWORD *)(v8 + 32);
              v39 = (v38 - 1);
              if (v38 > 1)
              {
                if (v38 >= 9)
                {
                  if (v26 >= v8 + 40 || (unint64_t)v23 >= v26 + 4 * v39)
                  {
                    v41 = 0;
                    v40 = v39 & 0xFFFFFFF8;
                    v42 = vld1q_dup_f32(v23);
                    do
                    {
                      v43 = (float32x4_t *)(v26 + v41);
                      *v43 = v42;
                      v43[1] = v42;
                      v41 += 32;
                    }
                    while (((4 * v39) & 0x3FFFFFFE0) != v41);
                    if (v40 == v39)
                      goto LABEL_68;
                  }
                  else
                  {
                    v40 = 0;
                  }
                }
                else
                {
                  v40 = 0;
                }
                do
                  *(float *)(v26 + 4 * v40++) = *v23;
                while (v39 != v40);
              }
LABEL_68:
              v27 = *(_DWORD *)(v8 + 32);
              v28 = __OFSUB__(v27, 1);
              v29 = v27 - 1;
              if (v29 < 0 == v28)
                *(_DWORD *)(v26 + 4 * v29) = v20;
              *(_QWORD *)(v8 + 40) = v26;
              goto LABEL_78;
            }
          }
LABEL_72:
          *(_BYTE *)(v8 + 28) = 7;
          if (*(_DWORD *)(v8 + 20))
          {
            v31 = *(_BYTE *)(v8 + 29);
            if ((v31 & 4) != 0)
            {
              v32 = *(_QWORD **)(v8 + 8);
              if (v32)
              {
                sub_1ACBE0F9C(*(_QWORD **)v8, v32);
                v31 = *(_BYTE *)(v8 + 29);
              }
              *(_BYTE *)(v8 + 29) = v31 & 0xFB;
            }
            *(_DWORD *)(v8 + 16) = 0;
            *(_DWORD *)(v8 + 24) = 0;
            *(_QWORD *)(v8 + 8) = 0;
          }
          goto LABEL_78;
        }
        v25 = *(int *)(v8 + 32);
        if (!sqlite3_initialize())
        {
          v26 = sub_1ACB6BB48(v24, 4 * v25);
          if (v26)
            goto LABEL_68;
        }
        goto LABEL_72;
      }
      if ((v22 & 1) == 0)
      {
        v20 = sub_1ACBF2B3C(v12, 1);
        goto LABEL_39;
      }
LABEL_38:
      v20 = 0;
      goto LABEL_39;
    }
    v14 = 0;
LABEL_37:
    sub_1ACBBE20C(91120);
    goto LABEL_38;
  }
  if (!v10)
  {
    v15 = 1;
LABEL_58:
    *(_DWORD *)(v8 + 36) = v15;
    goto LABEL_78;
  }
  if ((unint64_t)*(unsigned int *)(v8 + 24) + 1 >= *(unsigned int *)(v8 + 16))
  {
    v11 = sub_1ACBC2594((_QWORD **)v8, 1);
    if (v11 < 1)
      goto LABEL_78;
  }
  else
  {
    v11 = 1;
  }
  v17 = v11 + 1;
  do
  {
    v18 = *(_QWORD *)(v8 + 8);
    v19 = *(unsigned int *)(v8 + 24);
    *(_DWORD *)(v8 + 24) = v19 + 1;
    *(_BYTE *)(v18 + v19) = 44;
    --v17;
  }
  while (v17 > 1);
LABEL_78:
  ++*(_DWORD *)(v8 + 32);
  result = (unsigned __int16 *)*a3;
  if (!*a3)
  {
    v34 = 0;
    goto LABEL_86;
  }
  v33 = result[10];
  if ((~v33 & 0x202) == 0 && *((_BYTE *)result + 22) == 1)
  {
    v34 = (const void *)*((_QWORD *)result + 1);
    goto LABEL_93;
  }
  if ((v33 & 1) != 0)
  {
    v34 = 0;
    goto LABEL_93;
  }
  v34 = (const void *)sub_1ACBF2B64((int *)result, 1);
  result = (unsigned __int16 *)*a3;
  if (!*a3)
  {
LABEL_86:
    result = (unsigned __int16 *)sub_1ACBBE20C(91120);
    goto LABEL_87;
  }
LABEL_93:
  v37 = result[10];
  if ((v37 & 2) != 0 && *((_BYTE *)result + 22) == 1)
  {
    v35 = *((_DWORD *)result + 4);
    goto LABEL_88;
  }
  if ((v37 & 0x10) == 0)
  {
    if ((v37 & 1) == 0)
    {
      result = (unsigned __int16 *)sub_1ACBF2B3C((uint64_t)result, 1);
      v35 = (int)result;
      goto LABEL_88;
    }
LABEL_87:
    v35 = 0;
    goto LABEL_88;
  }
  v35 = *((_DWORD *)result + 4);
  if ((result[10] & 0x400) != 0)
    v35 += *(_DWORD *)result;
LABEL_88:
  if (!v34)
    return result;
  if (v35 <= 0)
  {
    if (!v35)
      return result;
    v9 = 32736;
    return (unsigned __int16 *)sub_1ACBBE20C(v9);
  }
  v36 = *(unsigned int *)(v8 + 24);
  if ((v36 + v35) >= *(_DWORD *)(v8 + 16))
    return (unsigned __int16 *)sub_1ACBC290C(v8, v34, v35);
  *(_DWORD *)(v8 + 24) = v36 + v35;
  return (unsigned __int16 *)memcpy((void *)(*(_QWORD *)(v8 + 8) + v36), v34, v35);
}

void sub_1ACC3E684(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);

  if (!a1 || (v2 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = sub_1ACBC794C(a1, 0);
    if (!v4)
      return;
  }
  sub_1ACC39204((_DWORD *)a1, (uint64_t)v4);
  v5 = v4[5];
  if (!v5)
    return;
  v6 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_15:
    (*v6)(v5);
    return;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v5);
  v5 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = &xmmword_1ECD3B1D0;
    goto LABEL_15;
  }
}

void sub_1ACC3E7A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  char *v7;
  int v8;

  if (!a1 || (v2 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(unsigned __int8 **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (unsigned __int8 *)sub_1ACBC794C(a1, 0);
    if (!v4)
      return;
  }
  v5 = v4[28];
  if (v5 == 7)
  {
    sqlite3_result_error_nomem((sqlite3_context *)a1);
  }
  else if (v5 == 18)
  {
    *(_DWORD *)(a1 + 36) = 18;
    sub_1ACB57870(*(_QWORD *)a1, "string or blob too big", -1, 1u, 0);
  }
  else
  {
    v6 = *((unsigned int *)v4 + 6);
    if ((_DWORD)v6)
    {
      *(_BYTE *)(*((_QWORD *)v4 + 1) + v6) = 0;
      v7 = (char *)*((_QWORD *)v4 + 1);
      v8 = *((_DWORD *)v4 + 6);
    }
    else
    {
      v8 = 0;
      v7 = 0;
    }
    sub_1ACBC69D0(a1, v7, v8, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
}

_DWORD *sub_1ACC3E890(_DWORD *result, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;
  size_t v16;
  uint64_t v17;
  uint64_t (**v18)(uint64_t);

  v4 = (uint64_t)result;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*a3 + 20)) & 1) != 0)
      return result;
  }
  else
  {
    result = (_DWORD *)sub_1ACBBE20C(97202);
  }
  if (!v4)
    return (_DWORD *)sub_1ACBBE20C(98105);
  v5 = *(_QWORD *)(v4 + 8);
  if (!v5 || !*(_QWORD *)(v5 + 32))
    return (_DWORD *)sub_1ACBBE20C(98105);
  v6 = *(_QWORD *)(v4 + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(_DWORD **)(v6 + 8);
    if (!v7)
      return result;
LABEL_13:
    v8 = *a3;
    if (*a3)
    {
      v9 = *(unsigned __int16 *)(v8 + 20);
      if ((~v9 & 0x202) != 0)
      {
        if ((v9 & 1) != 0)
          goto LABEL_20;
      }
      else if ((v9 & 1) != 0 || *(_BYTE *)(v8 + 22) == 1)
      {
        goto LABEL_20;
      }
      sub_1ACBF2B64((int *)v8, 1);
      v8 = *a3;
      if (*a3)
      {
LABEL_20:
        v10 = *(_WORD *)(v8 + 20);
        if ((v10 & 2) != 0 && *(_BYTE *)(v8 + 22) == 1)
        {
          v11 = *(_DWORD *)(v8 + 16);
          goto LABEL_25;
        }
        if ((v10 & 0x10) != 0)
        {
          v11 = *(_DWORD *)(v8 + 16);
          if ((*(_WORD *)(v8 + 20) & 0x400) != 0)
            v11 += *(_DWORD *)v8;
LABEL_25:
          v12 = v7[8];
          v7[8] = v12 - 1;
          result = (_DWORD *)*((_QWORD *)v7 + 5);
          if (result)
          {
            v13 = __OFSUB__(v12, 2);
            v14 = v12 - 2;
            if (v14 < 0 == v13)
            {
              v11 += *result;
              result = memmove(result, result + 1, 4 * v14);
            }
          }
          else
          {
            v11 += v7[9];
          }
          v15 = v7[6];
          v16 = (v15 - v11);
          if (v15 <= v11)
          {
            v7[6] = 0;
          }
          else
          {
            v7[6] = v16;
            result = memmove(*((void **)v7 + 1), (const void *)(*((_QWORD *)v7 + 1) + v11), v16);
            if (v7[6])
              return result;
          }
          v7[5] = 0;
          v17 = *((_QWORD *)v7 + 5);
          if (v17)
          {
            v18 = &off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v17);
              --qword_1ECD3E8D0;
              result = (_DWORD *)off_1ECD3B168(v17);
              v17 = xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_43;
              v18 = &xmmword_1ECD3B1D0;
            }
            result = (_DWORD *)(*v18)(v17);
          }
LABEL_43:
          *((_QWORD *)v7 + 5) = 0;
          return result;
        }
        if ((v10 & 1) == 0)
        {
          v11 = sub_1ACBF2B3C(v8, 1);
          goto LABEL_25;
        }
LABEL_24:
        v11 = 0;
        goto LABEL_25;
      }
    }
    sub_1ACBBE20C(91120);
    goto LABEL_24;
  }
  result = sub_1ACBC794C(v4, 48);
  v7 = result;
  if (result)
    goto LABEL_13;
  return result;
}

double sub_1ACC3EAD0(double a1)
{
  return ceil(a1);
}

void sub_1ACC3EAD8(uint64_t *a1, __n128 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  __int16 v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void (*v14)(uint64_t, __n128);
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;

  v4 = *a4;
  if (!*a4)
  {
    v12 = 97202;
    goto LABEL_10;
  }
  v7 = *(_WORD *)(v4 + 20);
  if (((0x4000000040004uLL >> v7) & 1) != 0)
  {
    sub_1ACBCA9CC(*a4, 0);
    v7 = *(_WORD *)(v4 + 20);
  }
  v8 = byte_1ACCB6445[v7 & 0x3F];
  if (v8 != 2)
  {
    if (v8 != 1)
      return;
    v9 = *a4;
    if (*a4)
    {
      v10 = *(_WORD *)(v9 + 20);
      if ((v10 & 0x24) != 0)
      {
        v11 = *(_QWORD *)v9;
LABEL_21:
        if (a1)
        {
          v17 = *a1;
          if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v17, v11);
          }
          else
          {
            *(_QWORD *)v17 = v11;
            *(_WORD *)(v17 + 20) = 4;
          }
          return;
        }
        v12 = 97423;
LABEL_10:
        sub_1ACBBE20C(v12);
        return;
      }
      if ((v10 & 8) != 0)
      {
        v21 = *(double *)v9;
        if (*(double *)v9 >= -9.22337204e18)
        {
          if (v21 <= 9.22337204e18)
            v11 = (uint64_t)v21;
          else
            v11 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v11 = 0x8000000000000000;
        }
        goto LABEL_21;
      }
      if ((v10 & 0x12) != 0 && *(_QWORD *)(v9 + 8))
      {
        v11 = sub_1ACBF2FC0(v9);
        goto LABEL_21;
      }
    }
    else
    {
      sub_1ACBBE20C(89699);
    }
    v11 = 0;
    goto LABEL_21;
  }
  if (a1 && (v13 = a1[1]) != 0)
  {
    v14 = *(void (**)(uint64_t, __n128))(v13 + 8);
    v15 = *a4;
    if (!*a4)
    {
LABEL_14:
      v15 = sub_1ACBBE20C(89734);
      a2.n128_u64[0] = 0;
      goto LABEL_26;
    }
  }
  else
  {
    sub_1ACBBE20C(97914);
    v14 = 0;
    v15 = *a4;
    if (!*a4)
      goto LABEL_14;
  }
  v16 = *(_WORD *)(v15 + 20);
  if ((v16 & 8) != 0)
  {
    a2.n128_u64[0] = *(_QWORD *)v15;
  }
  else if ((v16 & 0x24) != 0)
  {
    a2.n128_f64[0] = (double)*(uint64_t *)v15;
  }
  else if ((v16 & 0x12) != 0)
  {
    a2.n128_f64[0] = sub_1ACBF2F88(v15);
  }
  else
  {
    a2.n128_u64[0] = 0;
  }
LABEL_26:
  v14(v15, a2);
  if (!a1)
  {
    v12 = 97379;
    goto LABEL_10;
  }
  v19 = v18;
  v20 = *a1;
  if ((*(_WORD *)(v20 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)v20);
  else
    *(_WORD *)(v20 + 20) = 1;
  *(_QWORD *)v20 = v19;
  *(_WORD *)(v20 + 20) = 8;
}

double sub_1ACC3ED38(double a1)
{
  return floor(a1);
}

void sub_1ACC3ED40(uint64_t *a1, int a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  double v10;
  uint64_t v11;
  __int16 v12;
  double v13;
  uint64_t v14;
  double v15;
  __int16 v16;
  double v17;
  unsigned __int16 v18;
  int v19;
  uint64_t v20;
  int v21;
  double v22;
  double v23;
  uint64_t v24;

  v3 = *a3;
  if (!*a3)
    goto LABEL_21;
  v7 = *(_WORD *)(v3 + 20);
  if (((0x4000000040004uLL >> v7) & 1) != 0)
  {
    sub_1ACBCA9CC(*a3, 0);
    v7 = *(_WORD *)(v3 + 20);
  }
  if (byte_1ACCB6445[v7 & 0x3F] - 1 > 1)
    return;
  v8 = *a3;
  if (!*a3)
    goto LABEL_22;
  v9 = *(_WORD *)(v8 + 20);
  if ((v9 & 8) != 0)
  {
    v10 = *(double *)v8;
    if (*(double *)v8 <= 0.0)
      return;
  }
  else if ((v9 & 0x24) != 0)
  {
    v10 = (double)*(uint64_t *)v8;
    if (v10 <= 0.0)
      return;
  }
  else
  {
    if ((v9 & 0x12) == 0)
      return;
    v10 = sub_1ACBF2F88(v8);
    if (v10 <= 0.0)
      return;
  }
  if (a2 != 2)
  {
    if (a1 && (v20 = a1[1]) != 0)
    {
      v21 = *(_DWORD *)(v20 + 8);
      if (v21 == 2)
      {
        v22 = log2(v10);
        goto LABEL_37;
      }
      if (v21 == 1)
      {
        v22 = log10(v10);
LABEL_37:
        v23 = v22;
LABEL_38:
        v24 = *a1;
        if ((*(_WORD *)(v24 + 20) & 0x9000) != 0)
          sub_1ACBF2A54((int *)v24);
        else
          *(_WORD *)(v24 + 20) = 1;
        *(double *)v24 = v23;
        *(_WORD *)(v24 + 20) = 8;
        return;
      }
    }
    else
    {
      sub_1ACBBE20C(97914);
    }
    v23 = log(v10);
    if (!a1)
    {
LABEL_35:
      v19 = 97379;
      goto LABEL_24;
    }
    goto LABEL_38;
  }
  v11 = *a3;
  if (!*a3)
  {
LABEL_21:
    v18 = 31666;
LABEL_23:
    v19 = v18 | 0x10000;
LABEL_24:
    sub_1ACBBE20C(v19);
    return;
  }
  v12 = *(_WORD *)(v11 + 20);
  if (((0x4000000040004uLL >> v12) & 1) != 0)
  {
    sub_1ACBCA9CC(*a3, 0);
    v12 = *(_WORD *)(v11 + 20);
  }
  if (byte_1ACCB6445[v12 & 0x3F] - 1 > 1)
    return;
  v13 = log(v10);
  if (v13 <= 0.0)
    return;
  v14 = a3[1];
  if (!v14)
  {
LABEL_22:
    v18 = 24198;
    goto LABEL_23;
  }
  v15 = v13;
  v16 = *(_WORD *)(v14 + 20);
  if ((v16 & 8) != 0)
  {
    v17 = *(double *)v14;
  }
  else if ((v16 & 0x24) != 0)
  {
    v17 = (double)*(uint64_t *)v14;
  }
  else
  {
    if ((v16 & 0x12) == 0)
      return;
    v17 = sub_1ACBF2F88(v14);
  }
  if (v17 > 0.0)
  {
    v23 = log(v17) / v15;
    if (!a1)
      goto LABEL_35;
    goto LABEL_38;
  }
}

void sub_1ACC3EF98(uint64_t *a1, __n128 a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  v4 = *a4;
  if (*a4)
  {
    v7 = *(_WORD *)(v4 + 20);
    if (((0x4000000040004uLL >> v7) & 1) != 0)
    {
      sub_1ACBCA9CC(*a4, 0);
      v7 = *(_WORD *)(v4 + 20);
    }
    if (byte_1ACCB6445[v7 & 0x3F] - 3 >= 0xFFFFFFFE)
    {
      v8 = *a4;
      if (*a4)
      {
        v9 = *(_WORD *)(v8 + 20);
        if ((v9 & 8) != 0)
        {
          a2.n128_u64[0] = *(_QWORD *)v8;
        }
        else if ((v9 & 0x24) != 0)
        {
          a2.n128_f64[0] = (double)*(uint64_t *)v8;
        }
        else if ((v9 & 0x12) != 0)
        {
          a2.n128_f64[0] = sub_1ACBF2F88(v8);
        }
        else
        {
          a2.n128_u64[0] = 0;
        }
      }
      else
      {
        sub_1ACBBE20C(89734);
        a2.n128_u64[0] = 0;
      }
      if (!a1 || (v10 = a1[1]) == 0)
        sub_1ACCB403C();
      v11 = (*(double (**)(__n128))(v10 + 8))(a2);
      v12 = *a1;
      if ((*(_WORD *)(v12 + 20) & 0x9000) != 0)
        sub_1ACBF2A54((int *)v12);
      else
        *(_WORD *)(v12 + 20) = 1;
      *(double *)v12 = v11;
      *(_WORD *)(v12 + 20) = 8;
    }
  }
  else
  {
    sub_1ACBBE20C(97202);
  }
}

void sub_1ACC3F0E8(uint64_t *a1, double a2, __n128 a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  __int16 v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  double v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v5 = *a5;
  if (!*a5)
    goto LABEL_13;
  v8 = *(_WORD *)(v5 + 20);
  if (((0x4000000040004uLL >> v8) & 1) != 0)
  {
    sub_1ACBCA9CC(*a5, 0);
    v8 = *(_WORD *)(v5 + 20);
  }
  if (byte_1ACCB6445[v8 & 0x3F] - 3 >= 0xFFFFFFFE)
  {
    v9 = a5[1];
    if (v9)
    {
      v10 = *(_WORD *)(v9 + 20);
      if (((0x4000000040004uLL >> v10) & 1) != 0)
      {
        sub_1ACBCA9CC(a5[1], 0);
        v10 = *(_WORD *)(v9 + 20);
      }
      if (byte_1ACCB6445[v10 & 0x3F] - 3 >= 0xFFFFFFFE)
      {
        v11 = *a5;
        if (*a5)
        {
          v12 = *(_WORD *)(v11 + 20);
          if ((v12 & 8) != 0)
          {
            v13 = *(double *)v11;
          }
          else if ((v12 & 0x24) != 0)
          {
            v13 = (double)*(uint64_t *)v11;
          }
          else if ((v12 & 0x12) != 0)
          {
            v13 = sub_1ACBF2F88(v11);
          }
          else
          {
            v13 = 0.0;
          }
        }
        else
        {
          sub_1ACBBE20C(89734);
          v13 = 0.0;
        }
        v14 = a5[1];
        if (v14)
        {
          v15 = *(_WORD *)(v14 + 20);
          if ((v15 & 8) != 0)
          {
            a3.n128_u64[0] = *(_QWORD *)v14;
          }
          else if ((v15 & 0x24) != 0)
          {
            a3.n128_f64[0] = (double)*(uint64_t *)v14;
          }
          else if ((v15 & 0x12) != 0)
          {
            a3.n128_u64[0] = sub_1ACBF2F88(v14);
          }
          else
          {
            a3.n128_u64[0] = 0;
          }
        }
        else
        {
          sub_1ACBBE20C(89734);
          a3.n128_u64[0] = 0;
        }
        if (!a1 || (v16 = a1[1]) == 0)
          sub_1ACCB403C();
        v17 = (*(double (**)(double, __n128))(v16 + 8))(v13, a3);
        v18 = *a1;
        if ((*(_WORD *)(v18 + 20) & 0x9000) != 0)
          sub_1ACBF2A54((int *)v18);
        else
          *(_WORD *)(v18 + 20) = 1;
        *(double *)v18 = v17;
        *(_WORD *)(v18 + 20) = 8;
      }
      return;
    }
LABEL_13:
    sub_1ACBBE20C(97202);
  }
}

double sub_1ACC3F2E4(double a1)
{
  return a1 * 0.0174532925;
}

double sub_1ACC3F2F4(double a1)
{
  return a1 * 57.2957795;
}

void sub_1ACC3F304(int **a1)
{
  int *v1;

  if (a1)
  {
    v1 = *a1;
    if (((*a1)[5] & 0x9000) != 0)
      sub_1ACBF2A54(*a1);
    *(_QWORD *)v1 = 0x400921FB54442D18;
    *((_WORD *)v1 + 10) = 8;
  }
  else
  {
    sub_1ACBBE20C(97379);
  }
}

void sub_1ACC3F364(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  __int16 v6;
  int v7;
  uint64_t v8;
  __int16 v9;
  double v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a3;
  if (!*a3)
  {
    v7 = 97202;
    goto LABEL_20;
  }
  v6 = *(_WORD *)(v3 + 20);
  if (((0x4000000040004uLL >> v6) & 1) != 0)
  {
    sub_1ACBCA9CC(*a3, 0);
    v6 = *(_WORD *)(v3 + 20);
  }
  if (byte_1ACCB6445[v6 & 0x3F] - 3 >= 0xFFFFFFFE)
  {
    v8 = *a3;
    if (*a3)
    {
      v9 = *(_WORD *)(v8 + 20);
      if ((v9 & 8) != 0)
      {
        v10 = *(double *)v8;
      }
      else if ((v9 & 0x24) != 0)
      {
        v10 = (double)*(uint64_t *)v8;
      }
      else if ((v9 & 0x12) != 0)
      {
        v10 = sub_1ACBF2F88(v8);
      }
      else
      {
        v10 = 0.0;
      }
    }
    else
    {
      sub_1ACBBE20C(89734);
      v10 = 0.0;
    }
    if (a1)
    {
      v11 = *a1;
      if (v10 < 0.0)
        v12 = -1;
      else
        v12 = v10 > 0.0;
      if ((*(_WORD *)(v11 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v11, v12);
      }
      else
      {
        *(_QWORD *)v11 = v12;
        *(_WORD *)(v11 + 20) = 4;
      }
      return;
    }
    v7 = 97413;
LABEL_20:
    sub_1ACBBE20C(v7);
  }
}

uint64_t sub_1ACC3F49C(sqlite3_context *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;

  if (a1)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1)
    {
      if (*(int *)(*(_QWORD *)(v4 + 24) + 136) >= a2)
        goto LABEL_10;
LABEL_9:
      *((_DWORD *)a1 + 9) = 18;
      sub_1ACB57870(v4, "string or blob too big", -1, 1u, 0);
      return 0;
    }
    sub_1ACBBE20C(97935);
    if (MEMORY[0x88] < a2)
    {
      v4 = *(_QWORD *)a1;
      goto LABEL_9;
    }
  }
  else
  {
    sub_1ACBBE20C(97935);
    if (MEMORY[0x88] < a2)
    {
      sub_1ACBBE20C(97620);
      return 0;
    }
  }
LABEL_10:
  result = sub_1ACB5D828(a2);
  if (result)
    return result;
  sqlite3_result_error_nomem(a1);
  return 0;
}

double sub_1ACC3F570(double *a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double result;
  double v9;
  double v10;
  double v11;

  if ((unint64_t)(a2 - 0x10000000000000) > 0xFFE0000000000000)
  {
    v5 = (double)a2;
  }
  else
  {
    if (a2 <= 0)
      v2 = -(-a2 & 0x3FFF);
    else
      v2 = a2 & 0x3FFF;
    v9 = *a1 + (double)(a2 - v2);
    if (fabs(*a1) <= fabs((double)(a2 - v2)))
    {
      v3 = (double)(a2 - v2) - v9;
      v4 = *a1;
    }
    else
    {
      v3 = *a1 - v9;
      v4 = (double)(a2 - v2);
    }
    a1[1] = v3 + v4 + a1[1];
    *a1 = v9;
    v5 = (double)v2;
  }
  v11 = v5;
  v10 = *a1 + v5;
  if (fabs(*a1) <= fabs(v5))
  {
    v6 = v5 - v10;
    v7 = *a1;
  }
  else
  {
    v6 = *a1 - v10;
    v7 = v11;
  }
  a1[1] = v6 + v7 + a1[1];
  result = v10;
  *a1 = v10;
  return result;
}

uint64_t sub_1ACC3F6A4(sqlite3_context *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  sqlite3_value *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t result;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  double v43;
  double v44;
  double v45;
  uint64_t v46;
  unsigned __int8 *v47;
  char *k;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v54;
  _QWORD *v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  unsigned int *v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  int v66;
  uint64_t v67;
  uint64_t i;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  unsigned int *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  int v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t j;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t m;
  uint64_t ii;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  int v96;
  uint64_t *n;
  BOOL v98;
  _DWORD *v99;
  int v100;
  uint64_t *jj;
  BOOL v102;
  int v103;
  _DWORD *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  _QWORD *v114;
  _QWORD *v116;
  _QWORD *v117;
  _BYTE *v118;
  char *kk;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;

  if (a1 && *(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  }
  else
  {
    sub_1ACBBE20C(97935);
    v5 = 0;
  }
  v166 = 0u;
  v167 = 0u;
  v6 = *(sqlite3_value **)a3;
  if (!*(_QWORD *)a3)
    goto LABEL_13;
  v7 = *((unsigned __int16 *)v6 + 10);
  if ((~v7 & 0x202) == 0 && *((_BYTE *)v6 + 22) == 1)
  {
    v8 = *((_QWORD *)v6 + 1);
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  if ((v7 & 1) != 0)
  {
LABEL_13:
    v8 = 0;
    v9 = *(_QWORD *)(a3 + 24);
    if (!v9)
      goto LABEL_21;
    goto LABEL_14;
  }
  v8 = sub_1ACBF2B64((int *)v6, 1);
  v9 = *(_QWORD *)(a3 + 24);
  if (!v9)
  {
LABEL_21:
    v11 = 0;
    v12 = *(_QWORD *)(a3 + 32);
    if (!v12)
      goto LABEL_30;
    goto LABEL_22;
  }
LABEL_14:
  v10 = *(unsigned __int16 *)(v9 + 20);
  if ((~v10 & 0x202) != 0 || *(_BYTE *)(v9 + 22) != 1)
  {
    if ((v10 & 1) != 0)
      goto LABEL_21;
    v11 = (unsigned __int8 *)sub_1ACBF2B64((int *)v9, 1);
    v12 = *(_QWORD *)(a3 + 32);
    if (!v12)
      goto LABEL_30;
  }
  else
  {
    v11 = *(unsigned __int8 **)(v9 + 8);
    v12 = *(_QWORD *)(a3 + 32);
    if (!v12)
      goto LABEL_30;
  }
LABEL_22:
  v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) == 0)
    {
      v14 = (char *)sub_1ACBF2B64((int *)v12, 1);
      v15 = *(_QWORD *)(a3 + 40);
      if (v15)
        goto LABEL_31;
LABEL_28:
      sub_1ACBBE20C(89699);
      goto LABEL_29;
    }
LABEL_30:
    v14 = 0;
    v15 = *(_QWORD *)(a3 + 40);
    if (v15)
      goto LABEL_31;
    goto LABEL_28;
  }
  v14 = *(char **)(v12 + 8);
  v15 = *(_QWORD *)(a3 + 40);
  if (!v15)
    goto LABEL_28;
LABEL_31:
  v17 = *(_WORD *)(v15 + 20);
  if ((v17 & 0x24) != 0)
  {
    LODWORD(v16) = *(_DWORD *)v15;
    goto LABEL_33;
  }
  if ((v17 & 8) != 0)
  {
    v43 = *(double *)v15;
    if (*(double *)v15 >= -9.22337204e18)
    {
      if (v43 <= 9.22337204e18)
        v16 = (uint64_t)v43;
      else
        LODWORD(v16) = -1;
    }
    else
    {
      LODWORD(v16) = 0;
    }
    goto LABEL_33;
  }
  if ((v17 & 0x12) != 0 && *(_QWORD *)(v15 + 8))
  {
    LODWORD(v16) = sub_1ACBF2FC0(v15);
    goto LABEL_33;
  }
LABEL_29:
  LODWORD(v16) = 0;
LABEL_33:
  v18 = *(_QWORD *)(a3 + 48);
  if (!v18)
    goto LABEL_39;
  v19 = *(unsigned __int16 *)(v18 + 20);
  if ((~v19 & 0x202) == 0 && *(_BYTE *)(v18 + 22) == 1)
  {
    v20 = *(_QWORD *)(v18 + 8);
    goto LABEL_40;
  }
  if ((v19 & 1) != 0)
LABEL_39:
    v20 = 0;
  else
    v20 = sub_1ACBF2B64((int *)v18, 1);
LABEL_40:
  v21 = *(_QWORD *)(a3 + 56);
  v136 = v5;
  if (!v21)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_44;
  }
  v22 = *(_WORD *)(v21 + 20);
  if ((v22 & 0x24) != 0)
  {
    v23 = *(_QWORD *)v21;
    goto LABEL_45;
  }
  if ((v22 & 8) == 0)
  {
    if ((v22 & 0x12) != 0 && *(_QWORD *)(v21 + 8))
    {
      v23 = sub_1ACBF2FC0(v21);
      goto LABEL_45;
    }
LABEL_44:
    v23 = 0;
    goto LABEL_45;
  }
  v44 = *(double *)v21;
  if (*(double *)v21 >= -9.22337204e18)
  {
    if (v44 <= 9.22337204e18)
      v23 = (uint64_t)v44;
    else
      v23 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v23 = 0x8000000000000000;
  }
LABEL_45:
  result = *(_QWORD *)(a3 + 64);
  if (!result)
  {
    result = sub_1ACBBE20C(89699);
LABEL_49:
    v26 = 0;
    goto LABEL_50;
  }
  v25 = *(_WORD *)(result + 20);
  if ((v25 & 0x24) != 0)
  {
    v26 = *(_QWORD *)result;
    goto LABEL_50;
  }
  if ((v25 & 8) != 0)
  {
    v45 = *(double *)result;
    if (*(double *)result >= -9.22337204e18)
    {
      if (v45 <= 9.22337204e18)
        v26 = (uint64_t)v45;
      else
        v26 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v26 = 0x8000000000000000;
    }
    goto LABEL_50;
  }
  if ((v25 & 0x12) == 0 || !*(_QWORD *)(result + 8))
    goto LABEL_49;
  result = sub_1ACBF2FC0(result);
  v26 = result;
LABEL_50:
  v164 = 0u;
  v165 = 0u;
  v162 = 0u;
  v163 = 0u;
  v160 = 0u;
  v161 = 0u;
  v158 = 0u;
  v159 = 0u;
  v156 = 0u;
  v157 = 0u;
  v154 = 0u;
  v155 = 0u;
  v152 = 0u;
  v153 = 0u;
  v150 = 0u;
  v151 = 0u;
  v148 = 0u;
  v149 = 0u;
  v146 = 0u;
  v147 = 0u;
  v144 = 0u;
  v145 = 0u;
  v142 = 0u;
  v143 = 0u;
  v140 = 0u;
  v141 = 0u;
  v138 = 0u;
  v139 = 0u;
  v137 = 0u;
  if (!v8 || !v14 || !v20 || (v16 & 0x80000000) != 0)
    return result;
  v135 = v23;
  v27 = *(_QWORD *)(v136 + 528);
  if (!*(_BYTE *)(v136 + 111))
    sub_1ACBE9148(v136);
  result = sub_1ACBD1B0C(v136, v14, v11);
  if (!result || (v31 = result, (int)v16 >= *(__int16 *)(result + 54)))
  {
    if (!*(_BYTE *)(v136 + 111))
      return sub_1ACBE91DC(v136);
    return result;
  }
  v134 = v27;
  v32 = (unsigned __int8 *)v8;
  v33 = *(_QWORD *)(*(_QWORD *)(result + 8) + 16 * v16);
  v166 = 0u;
  v167 = 0u;
  if ((_DWORD)v16 == *(__int16 *)(result + 52))
    v34 = -1;
  else
    v34 = v16;
  HIDWORD(v166) = v34;
  *(_QWORD *)(v136 + 528) = 0;
  v133 = (uint64_t)v32;
  v35 = sub_1ACC41AD0((uint64_t)&v140, v11, v136, v32, v26, v28, v29, v30);
  *(_QWORD *)&v137 = &v140;
  *((_QWORD *)&v137 + 1) = sub_1ACC41E74;
  *(_QWORD *)&v138 = sub_1ACC41F7C;
  *((_QWORD *)&v138 + 1) = 0;
  *(_QWORD *)&v139 = 0;
  *((_QWORD *)&v139 + 1) = &v166;
  *(_QWORD *)&v167 = v31;
  if (v35)
    goto LABEL_253;
  v39 = *((_QWORD *)&v161 + 1);
  if (!*((_QWORD *)&v161 + 1))
  {
    v41 = (char *)v20;
    if ((_QWORD)v162)
    {
      sub_1ACC0B80C((uint64_t)&v137, *(_DWORD **)(v162 + 80));
      v46 = *(_QWORD *)(v162 + 72);
      v40 = v135;
      if (v46)
        sub_1ACC0B714((uint64_t)&v137, v46);
      goto LABEL_252;
    }
    v35 = sub_1ACC41FB0((uint64_t)&v140);
    if (v35)
      goto LABEL_253;
    v58 = *((_QWORD *)&v162 + 1);
    v59 = *(_QWORD **)(*((_QWORD *)&v162 + 1) + 56);
    if (!v59)
      goto LABEL_164;
LABEL_122:
    v60 = (char *)v59[3];
    if (!v60 || sub_1ACB8D488((uint64_t)&v140, 0, v60, v11, v57, v36, v37, v38) != v31)
      goto LABEL_121;
    v61 = v59[8];
    if (v61)
      sub_1ACC42550((uint64_t)&v140, (uint64_t)&v166, *(unsigned int **)(v61 + 16), v33);
    v62 = (unsigned int *)v59[7];
    if (!v62)
      goto LABEL_143;
    v63 = *v62;
    if ((int)v63 < 1)
      goto LABEL_143;
    v64 = 0;
    v65 = (_QWORD *)v166;
    v66 = DWORD2(v166);
LABEL_131:
    if (!v33)
      goto LABEL_130;
    v67 = *(_QWORD *)&v62[4 * v64 + 2];
    if (!v67)
      goto LABEL_130;
    for (i = 0; ; ++i)
    {
      v69 = *(unsigned __int8 *)(v67 + i);
      v70 = *(unsigned __int8 *)(v33 + i);
      if ((_DWORD)v69 == (_DWORD)v70)
      {
        if (!*(_BYTE *)(v67 + i))
        {
          v71 = (_QWORD *)*((_QWORD *)&v165 + 1);
          if (*((_QWORD *)&v165 + 1))
          {
            v72 = (_QWORD *)&v165 + 1;
            if (**((_QWORD **)&v165 + 1) != v67)
            {
              do
              {
                v73 = v71;
                v71 = (_QWORD *)v71[3];
                if (!v71)
                  goto LABEL_130;
              }
              while (*v71 != v67);
              v72 = v73 + 3;
            }
            *v72 = v71[3];
            v71[3] = v65;
            *(_QWORD *)&v166 = v71;
            DWORD2(v166) = ++v66;
            v65 = v71;
          }
LABEL_130:
          if (++v64 != v63)
            goto LABEL_131;
LABEL_143:
          v74 = (unsigned int *)v59[6];
          if (!v74)
            goto LABEL_121;
          v75 = *v74;
          if ((int)v75 < 1)
            goto LABEL_121;
          v76 = 0;
          v77 = (_QWORD *)v166;
          v78 = DWORD2(v166);
LABEL_148:
          if (!v33)
            goto LABEL_147;
          v79 = &v74[6 * v76];
          v80 = *((_QWORD *)v79 + 2);
          if ((*(_WORD *)((_BYTE *)v79 + 25) & 3) != 0 || v80 == 0)
            goto LABEL_147;
          for (j = 0; ; ++j)
          {
            v83 = *(unsigned __int8 *)(v80 + j);
            v84 = *(unsigned __int8 *)(v33 + j);
            if ((_DWORD)v83 == (_DWORD)v84)
            {
              if (!*(_BYTE *)(v80 + j))
              {
                v85 = (_QWORD *)*((_QWORD *)&v165 + 1);
                if (*((_QWORD *)&v165 + 1))
                {
                  v86 = (_QWORD *)&v165 + 1;
                  if (**((_QWORD **)&v165 + 1) != v80)
                  {
                    do
                    {
                      v87 = v85;
                      v85 = (_QWORD *)v85[3];
                      if (!v85)
                        goto LABEL_147;
                    }
                    while (*v85 != v80);
                    v86 = v87 + 3;
                  }
                  *v86 = v85[3];
                  v85[3] = v77;
                  *(_QWORD *)&v166 = v85;
                  DWORD2(v166) = ++v78;
                  v77 = v85;
                }
LABEL_147:
                if (++v76 != v75)
                  goto LABEL_148;
LABEL_121:
                v59 = (_QWORD *)v59[10];
                if (v59)
                  goto LABEL_122;
                v58 = *((_QWORD *)&v162 + 1);
LABEL_164:
                v41 = (char *)v20;
                if ((_QWORD)v151 == v31)
                {
                  sub_1ACC42634((uint64_t)&v140, (uint64_t)&v166, *(unsigned int **)(v58 + 32), v33);
                  v58 = *((_QWORD *)&v162 + 1);
                }
                v40 = v135;
                sub_1ACC42708((uint64_t)&v137, v58);
                goto LABEL_252;
              }
            }
            else if (byte_1ACCB6333[v83] != byte_1ACCB6333[v84])
            {
              goto LABEL_147;
            }
          }
        }
      }
      else if (byte_1ACCB6333[v69] != byte_1ACCB6333[v70])
      {
        goto LABEL_130;
      }
    }
  }
  v40 = v135;
  if (*(_BYTE *)(*((_QWORD *)&v161 + 1) + 63))
  {
    v41 = (char *)v20;
    if (*(_BYTE *)(*((_QWORD *)&v161 + 1) + 63) != 2)
      goto LABEL_252;
    v42 = *(_QWORD *)(*((_QWORD *)&v161 + 1) + 64);
    *(_DWORD *)(v42 + 4) &= ~0x200000u;
    DWORD2(v141) = 0;
    sub_1ACC10600(&v140, v42, 0);
    if (*(_BYTE *)(v136 + 103))
      v35 = 7;
    else
      v35 = DWORD2(v141);
    if (!v35)
    {
      sub_1ACB73B30(&v137, (_QWORD *)v42);
      v41 = (char *)v20;
      v40 = v135;
      goto LABEL_252;
    }
    goto LABEL_253;
  }
  v47 = (unsigned __int8 *)**((_QWORD **)&v161 + 1);
  if (!**((_QWORD **)&v161 + 1))
  {
LABEL_117:
    v56 = 0;
    *(_QWORD *)&v167 = *((_QWORD *)&v161 + 1);
    goto LABEL_215;
  }
  for (k = v14; ; ++k)
  {
    v49 = *k;
    v50 = *v47;
    if ((_DWORD)v49 == (_DWORD)v50)
      break;
    if (byte_1ACCB6333[v49] != byte_1ACCB6333[v50])
      goto LABEL_117;
LABEL_105:
    ++v47;
  }
  if (*k)
    goto LABEL_105;
  *(_QWORD *)&v167 = *((_QWORD *)&v161 + 1);
  if ((int)v16 < *(__int16 *)(*((_QWORD *)&v161 + 1) + 54))
  {
    v51 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v161 + 1) + 8) + 16 * v16);
    v52 = (_QWORD *)*((_QWORD *)&v165 + 1);
    if (v51 && *((_QWORD *)&v165 + 1) != 0)
    {
      if (**((_QWORD **)&v165 + 1) == v51)
      {
        v55 = (_QWORD *)&v165 + 1;
LABEL_168:
        *v55 = v52[3];
        v52[3] = v166;
        *(_QWORD *)&v166 = v52;
        ++DWORD2(v166);
        v39 = *((_QWORD *)&v161 + 1);
      }
      else
      {
        while (1)
        {
          v54 = v52;
          v52 = (_QWORD *)v52[3];
          if (!v52)
            break;
          if (*v52 == v51)
          {
            v55 = v54 + 3;
            goto LABEL_168;
          }
        }
      }
    }
  }
  if ((HIDWORD(v166) & 0x80000000) != 0)
  {
    v88 = (_QWORD *)*((_QWORD *)&v165 + 1);
    if (*((_QWORD *)&v165 + 1))
    {
      if (**((_QWORD **)&v165 + 1) == v39 + 52)
      {
        v90 = (_QWORD *)&v165 + 1;
LABEL_176:
        *v90 = v88[3];
        v88[3] = v166;
        *(_QWORD *)&v166 = v88;
        ++DWORD2(v166);
        v39 = *((_QWORD *)&v161 + 1);
      }
      else
      {
        while (1)
        {
          v89 = v88;
          v88 = (_QWORD *)v88[3];
          if (!v88)
            break;
          if (*v88 == v39 + 52)
          {
            v90 = v89 + 3;
            goto LABEL_176;
          }
        }
      }
    }
  }
  sub_1ACC0B80C((uint64_t)&v137, *(_DWORD **)(v39 + 32));
  for (m = *(_QWORD *)(*((_QWORD *)&v161 + 1) + 16); m; m = *(_QWORD *)(m + 40))
  {
    v95 = *(_DWORD **)(m + 80);
    if (v95)
    {
      v96 = *v95;
      if ((int)*v95 >= 1)
      {
        for (n = (uint64_t *)(v95 + 2); ; n += 3)
        {
          if (*n)
          {
            if (sub_1ACC0B714((uint64_t)&v137, *n))
              v98 = 1;
            else
              v98 = v96 <= 1;
            if (v98)
              break;
          }
          else if (v96 < 2)
          {
            break;
          }
          --v96;
        }
      }
    }
  }
  for (ii = v162; ii; ii = *(_QWORD *)(ii + 40))
  {
    v99 = *(_DWORD **)(ii + 80);
    if (v99)
    {
      v100 = *v99;
      if ((int)*v99 >= 1)
      {
        for (jj = (uint64_t *)(v99 + 2); ; jj += 3)
        {
          if (*jj)
          {
            if (sub_1ACC0B714((uint64_t)&v137, *jj))
              v102 = 1;
            else
              v102 = v100 <= 1;
            if (v102)
              break;
          }
          else if (v100 < 2)
          {
            break;
          }
          --v100;
        }
      }
    }
  }
  v39 = *((_QWORD *)&v161 + 1);
  if (*(__int16 *)(*((_QWORD *)&v161 + 1) + 54) >= 1)
  {
    v93 = 0;
    v94 = 12;
    do
    {
      v103 = *(unsigned __int16 *)(*(_QWORD *)(v39 + 8) + v94);
      if (*(_WORD *)(*(_QWORD *)(v39 + 8) + v94))
      {
        if (!*(_BYTE *)(v39 + 63))
        {
          v104 = *(_DWORD **)(v39 + 80);
          if (v104)
          {
            if (*v104 >= v103)
            {
              v105 = *(_QWORD *)&v104[6 * (v103 - 1) + 2];
              if (v105)
              {
                sub_1ACC0B714((uint64_t)&v137, v105);
                v39 = *((_QWORD *)&v161 + 1);
              }
            }
          }
        }
      }
      ++v93;
      v94 += 16;
    }
    while (v93 < *(__int16 *)(v39 + 54));
  }
  v56 = 1;
  v40 = v135;
LABEL_215:
  v106 = *(_QWORD *)(v39 + 72);
  v41 = (char *)v20;
  if (v106)
  {
    v107 = DWORD2(v166);
    v108 = (_QWORD *)v166;
    while (1)
    {
      v109 = *(unsigned int *)(v106 + 40);
      if ((int)v109 >= 1)
        break;
LABEL_217:
      v106 = *(_QWORD *)(v106 + 8);
      if (!v106)
        goto LABEL_252;
    }
    v110 = 0;
LABEL_222:
    if (v56)
    {
      v111 = v106 + 16 * v110;
      v113 = *(_DWORD *)(v111 + 64);
      v112 = v111 + 64;
      v114 = (_QWORD *)*((_QWORD *)&v165 + 1);
      if (v113 == (_DWORD)v16 && *((_QWORD *)&v165 + 1) != 0)
      {
        v116 = (_QWORD *)&v165 + 1;
        if (**((_QWORD **)&v165 + 1) == v112)
        {
LABEL_231:
          *v116 = v114[3];
          v114[3] = v108;
          *(_QWORD *)&v166 = v114;
          DWORD2(v166) = ++v107;
          v108 = v114;
        }
        else
        {
          while (1)
          {
            v117 = v114;
            v114 = (_QWORD *)v114[3];
            if (!v114)
              break;
            if (*v114 == v112)
            {
              v116 = v117 + 3;
              goto LABEL_231;
            }
          }
        }
      }
    }
    v118 = *(_BYTE **)(v106 + 16);
    if (!v118)
      goto LABEL_221;
    for (kk = v14; ; ++kk)
    {
      v120 = *v118;
      v121 = *kk;
      if ((_DWORD)v120 == (_DWORD)v121)
      {
        if (!*v118)
        {
          v122 = *(_QWORD *)(v106 + 16 * v110 + 72);
          if (v122)
            v123 = v33 == 0;
          else
            v123 = 1;
          if (v123)
            goto LABEL_221;
          v124 = 0;
          while (2)
          {
            v125 = *(unsigned __int8 *)(v122 + v124);
            v126 = *(unsigned __int8 *)(v33 + v124);
            if ((_DWORD)v125 != (_DWORD)v126)
            {
              if (byte_1ACCB6333[v125] != byte_1ACCB6333[v126])
                goto LABEL_221;
LABEL_244:
              ++v124;
              continue;
            }
            break;
          }
          if (*(_BYTE *)(v122 + v124))
            goto LABEL_244;
          v127 = (_QWORD *)*((_QWORD *)&v165 + 1);
          if (*((_QWORD *)&v165 + 1))
          {
            v128 = (_QWORD *)&v165 + 1;
            if (**((_QWORD **)&v165 + 1) == v122)
            {
LABEL_220:
              *v128 = v127[3];
              v127[3] = v108;
              *(_QWORD *)&v166 = v127;
              DWORD2(v166) = ++v107;
              v108 = v127;
            }
            else
            {
              while (1)
              {
                v129 = v127;
                v127 = (_QWORD *)v127[3];
                if (!v127)
                  break;
                if (*v127 == v122)
                {
                  v128 = v129 + 3;
                  goto LABEL_220;
                }
              }
            }
          }
LABEL_221:
          if (++v110 == v109)
            goto LABEL_217;
          goto LABEL_222;
        }
      }
      else if (byte_1ACCB6333[v120] != byte_1ACCB6333[v121])
      {
        goto LABEL_221;
      }
      ++v118;
    }
  }
LABEL_252:
  v35 = sub_1ACC428B8((uint64_t)a1, (uint64_t *)&v166, v133, v41, v40, v36, v37, v38);
LABEL_253:
  if (v35)
  {
    if (v35 == 1 && (*(_QWORD *)(v136 + 48) & 0x10000001) == 1)
    {
      sqlite3_result_value(a1, *(sqlite3_value **)a3);
    }
    else if (*((_QWORD *)&v140 + 1))
    {
      sub_1ACC42D40((uint64_t)a1, (uint64_t)&byte_1ACCBEAEE, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), (uint64_t *)&v140, v36, v37, v38);
    }
    else if (a1)
    {
      *((_DWORD *)a1 + 9) = v35;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
      {
        switch(v35)
        {
          case 516:
            v132 = "abort due to ROLLBACK";
            break;
          case 101:
            v132 = "no more rows available";
            break;
          case 100:
            v132 = "another row available";
            break;
          default:
            if (v35 > 0x1Cu || ((0x1410004uLL >> v35) & 1) != 0)
              v132 = "unknown error";
            else
              v132 = off_1E5C74AE8[v35];
            break;
        }
        sub_1ACBC69D0((uint64_t)a1, v132, -1, 1u, 0);
      }
    }
    else
    {
      sub_1ACBBE20C(97602);
    }
  }
  result = (uint64_t)sub_1ACC42EA4(&v140);
  v130 = (_QWORD *)v166;
  if ((_QWORD)v166)
  {
    do
    {
      v131 = (_QWORD *)v130[3];
      result = (uint64_t)sub_1ACBE0F9C((_QWORD *)v136, v130);
      v130 = v131;
    }
    while (v131);
  }
  *(_QWORD *)(v136 + 528) = v134;
  if (!*(_BYTE *)(v136 + 111))
    return sub_1ACBE91DC(v136);
  return result;
}

uint64_t sub_1ACC40398(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  uint64_t v12;
  int v13;
  char *v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t result;
  uint64_t v19;
  __int16 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  double v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  int v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t k;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t m;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t j;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  int *v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  char *v88;
  __int128 *v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _QWORD v93[6];
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;

  if (a1 && *(_QWORD *)a1)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v6 = *a3;
    if (!*a3)
    {
LABEL_13:
      v8 = 0;
      v9 = a3[3];
      if (!v9)
        goto LABEL_21;
      goto LABEL_14;
    }
  }
  else
  {
    sub_1ACBBE20C(97935);
    v5 = 0;
    v6 = *a3;
    if (!*a3)
      goto LABEL_13;
  }
  v7 = *(unsigned __int16 *)(v6 + 20);
  if ((~v7 & 0x202) != 0 || *(_BYTE *)(v6 + 22) != 1)
  {
    if ((v7 & 1) != 0)
      goto LABEL_13;
    v8 = (unsigned __int8 *)sub_1ACBF2B64((int *)v6, 1);
    v9 = a3[3];
    if (!v9)
      goto LABEL_21;
  }
  else
  {
    v8 = *(unsigned __int8 **)(v6 + 8);
    v9 = a3[3];
    if (!v9)
      goto LABEL_21;
  }
LABEL_14:
  v10 = *(unsigned __int16 *)(v9 + 20);
  if ((~v10 & 0x202) == 0 && *(_BYTE *)(v9 + 22) == 1)
  {
    v11 = *(unsigned __int8 **)(v9 + 8);
    v12 = a3[4];
    if (!v12)
      goto LABEL_29;
    goto LABEL_22;
  }
  if ((v10 & 1) != 0)
  {
LABEL_21:
    v11 = 0;
    v12 = a3[4];
    if (!v12)
      goto LABEL_29;
    goto LABEL_22;
  }
  v11 = (unsigned __int8 *)sub_1ACBF2B64((int *)v9, 1);
  v12 = a3[4];
  if (!v12)
  {
LABEL_29:
    v14 = 0;
    v15 = a3[5];
    if (!v15)
      goto LABEL_38;
    goto LABEL_30;
  }
LABEL_22:
  v13 = *(unsigned __int16 *)(v12 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v12 + 22) != 1)
  {
    if ((v13 & 1) != 0)
      goto LABEL_29;
    v14 = (char *)sub_1ACBF2B64((int *)v12, 1);
    v15 = a3[5];
    if (!v15)
      goto LABEL_38;
  }
  else
  {
    v14 = *(char **)(v12 + 8);
    v15 = a3[5];
    if (!v15)
      goto LABEL_38;
  }
LABEL_30:
  v16 = *(unsigned __int16 *)(v15 + 20);
  if ((~v16 & 0x202) != 0 || *(_BYTE *)(v15 + 22) != 1)
  {
    if ((v16 & 1) == 0)
    {
      v17 = (char *)sub_1ACBF2B64((int *)v15, 1);
      result = a3[6];
      if (result)
        goto LABEL_39;
      goto LABEL_36;
    }
LABEL_38:
    v17 = 0;
    result = a3[6];
    if (result)
      goto LABEL_39;
LABEL_36:
    result = sub_1ACBBE20C(89699);
LABEL_37:
    v19 = 0;
    goto LABEL_41;
  }
  v17 = *(char **)(v15 + 8);
  result = a3[6];
  if (!result)
    goto LABEL_36;
LABEL_39:
  v20 = *(_WORD *)(result + 20);
  if ((v20 & 0x24) != 0)
  {
    v19 = *(_QWORD *)result;
    goto LABEL_41;
  }
  if ((v20 & 8) == 0)
  {
    if ((v20 & 0x12) != 0 && *(_QWORD *)(result + 8))
    {
      result = sub_1ACBF2FC0(result);
      v19 = result;
      goto LABEL_41;
    }
    goto LABEL_37;
  }
  v34 = *(double *)result;
  if (*(double *)result >= -9.22337204e18)
  {
    if (v34 <= 9.22337204e18)
      v19 = (uint64_t)v34;
    else
      v19 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    v19 = 0x8000000000000000;
  }
LABEL_41:
  if (!v11 || !v14 || !v17)
    return result;
  v21 = 0uLL;
  v121 = 0u;
  v122 = 0u;
  v119 = 0u;
  v120 = 0u;
  v117 = 0u;
  v118 = 0u;
  v115 = 0u;
  v116 = 0u;
  v113 = 0u;
  v114 = 0u;
  v111 = 0u;
  v112 = 0u;
  v109 = 0u;
  v110 = 0u;
  v107 = 0u;
  v108 = 0u;
  v105 = 0u;
  v106 = 0u;
  v103 = 0u;
  v104 = 0u;
  v101 = 0u;
  v102 = 0u;
  v99 = 0u;
  v100 = 0u;
  v97 = 0u;
  v98 = 0u;
  v22 = *(_QWORD *)(v5 + 528);
  *(_QWORD *)(v5 + 528) = 0;
  if (!*(_BYTE *)(v5 + 111))
  {
    sub_1ACBE9148(v5);
    v21 = 0uLL;
  }
  v94 = v21;
  v96 = *((_QWORD *)&v21 + 1);
  v95 = sub_1ACBD1B0C(v5, v14, v8);
  v93[0] = &v97;
  v93[1] = sub_1ACC42F6C;
  v93[2] = sub_1ACC43008;
  v93[3] = 0;
  v93[4] = 0;
  v93[5] = &v94;
  v26 = sub_1ACC41AD0((uint64_t)&v97, v8, v5, v11, v19, v23, v24, v25);
  if (!v26)
  {
    v30 = *(_QWORD *)(v5 + 48);
    v31 = *((_QWORD *)&v118 + 1);
    if (!*((_QWORD *)&v118 + 1))
    {
      if ((_QWORD)v119)
      {
        v35 = *(_QWORD *)v119;
        if (*(_QWORD *)v119)
        {
          v36 = (_QWORD *)*((_QWORD *)&v122 + 1);
          if (*((_QWORD *)&v122 + 1))
          {
            if (**((_QWORD **)&v122 + 1) == v35)
            {
              v38 = (_QWORD *)&v122 + 1;
            }
            else
            {
              do
              {
                v37 = v36;
                v36 = (_QWORD *)v36[3];
                if (!v36)
                  goto LABEL_117;
              }
              while (*v36 != v35);
              v38 = v37 + 3;
            }
            *v38 = v36[3];
            v36[3] = v94;
            *(_QWORD *)&v94 = v36;
            ++DWORD2(v94);
          }
        }
LABEL_117:
        if ((v30 & 0x4000000) == 0)
        {
          v65 = *(_QWORD *)(v119 + 72);
          if (v65)
            sub_1ACC0B714((uint64_t)v93, v65);
        }
        goto LABEL_157;
      }
      v56 = *((_QWORD *)&v119 + 1);
      v57 = *(_QWORD *)(*((_QWORD *)&v119 + 1) + 8);
      if (!v57)
        goto LABEL_124;
      for (i = 0; ; ++i)
      {
        v59 = *(unsigned __int8 *)(v57 + i);
        v60 = v14[i];
        if ((_DWORD)v59 == (_DWORD)v60)
        {
          if (!*(_BYTE *)(v57 + i))
          {
            v61 = (_QWORD *)*((_QWORD *)&v122 + 1);
            if (*(_QWORD *)(v95 + 96) == *(_QWORD *)(*((_QWORD *)&v119 + 1) + 48) && *((_QWORD *)&v122 + 1) != 0)
            {
              if (**((_QWORD **)&v122 + 1) == v57)
              {
                v64 = (_QWORD *)&v122 + 1;
LABEL_123:
                *v64 = v61[3];
                v61[3] = v94;
                *(_QWORD *)&v94 = v61;
                ++DWORD2(v94);
              }
              else
              {
                while (1)
                {
                  v63 = v61;
                  v61 = (_QWORD *)v61[3];
                  if (!v61)
                    break;
                  if (*v61 == v57)
                  {
                    v64 = v63 + 3;
                    goto LABEL_123;
                  }
                }
              }
            }
LABEL_124:
            if ((v30 & 0x4000000) != 0)
              goto LABEL_157;
            v26 = sub_1ACC41FB0((uint64_t)&v97);
            if (v26)
              goto LABEL_158;
            sub_1ACC42708((uint64_t)v93, v56);
            v66 = *(_QWORD **)(v56 + 56);
            if (!v66)
              goto LABEL_157;
            v67 = DWORD2(v94);
            v68 = (_QWORD *)v94;
LABEL_129:
            v69 = v66[3];
            if (!v69)
              goto LABEL_141;
            for (j = 0; ; ++j)
            {
              v71 = *(unsigned __int8 *)(v69 + j);
              v72 = v14[j];
              if ((_DWORD)v71 == (_DWORD)v72)
              {
                if (!*(_BYTE *)(v69 + j))
                {
                  v73 = (_QWORD *)*((_QWORD *)&v122 + 1);
                  if (*((_QWORD *)&v122 + 1))
                  {
                    v74 = (_QWORD *)&v122 + 1;
                    if (**((_QWORD **)&v122 + 1) != v69)
                    {
                      do
                      {
                        v75 = v73;
                        v73 = (_QWORD *)v73[3];
                        if (!v73)
                          goto LABEL_141;
                      }
                      while (*v73 != v69);
                      v74 = v75 + 3;
                    }
                    *v74 = v73[3];
                    v73[3] = v68;
                    *(_QWORD *)&v94 = v73;
                    DWORD2(v94) = ++v67;
                    v68 = v73;
                  }
LABEL_141:
                  v76 = (int *)v66[4];
                  if (!v76)
                    goto LABEL_128;
                  v77 = *v76;
                  if (*v76 < 1)
                    goto LABEL_128;
                  v78 = 0;
                  while (2)
                  {
                    v79 = *(_QWORD *)&v76[26 * v78 + 6];
                    if (!v79)
                      goto LABEL_145;
                    v80 = 0;
                    while (2)
                    {
                      v81 = *(unsigned __int8 *)(v79 + v80);
                      v82 = v14[v80];
                      if ((_DWORD)v81 != (_DWORD)v82)
                      {
                        if (byte_1ACCB6333[v81] != byte_1ACCB6333[v82])
                          goto LABEL_145;
LABEL_149:
                        ++v80;
                        continue;
                      }
                      break;
                    }
                    if (*(_BYTE *)(v79 + v80))
                      goto LABEL_149;
                    v83 = (_QWORD *)*((_QWORD *)&v122 + 1);
                    if (*((_QWORD *)&v122 + 1))
                    {
                      v84 = (_QWORD *)&v122 + 1;
                      if (**((_QWORD **)&v122 + 1) != v79)
                      {
                        do
                        {
                          v85 = v83;
                          v83 = (_QWORD *)v83[3];
                          if (!v83)
                            goto LABEL_145;
                        }
                        while (*v83 != v79);
                        v84 = v85 + 3;
                      }
                      *v84 = v83[3];
                      v83[3] = v68;
                      *(_QWORD *)&v94 = v83;
                      DWORD2(v94) = ++v67;
                      v76 = (int *)v66[4];
                      v77 = *v76;
                      v68 = v83;
                    }
LABEL_145:
                    if (++v78 < v77)
                      continue;
                    break;
                  }
LABEL_128:
                  v66 = (_QWORD *)v66[10];
                  if (!v66)
                    goto LABEL_157;
                  goto LABEL_129;
                }
              }
              else if (byte_1ACCB6333[v71] != byte_1ACCB6333[v72])
              {
                goto LABEL_141;
              }
            }
          }
        }
        else if (byte_1ACCB6333[v59] != byte_1ACCB6333[v60])
        {
          goto LABEL_124;
        }
      }
    }
    v32 = *(unsigned __int8 *)(*((_QWORD *)&v118 + 1) + 63);
    if (v32 != 2)
    {
      if ((((*(_QWORD *)(v5 + 48) & 0x4000) == 0) & (*(_QWORD *)(v5 + 48) >> 26)) != 0)
        goto LABEL_85;
      if (v32 == 1)
        goto LABEL_85;
      v39 = *(_QWORD *)(*((_QWORD *)&v118 + 1) + 72);
      if (!v39)
        goto LABEL_85;
      v40 = DWORD2(v94);
      v41 = (_QWORD *)v94;
LABEL_72:
      v42 = *(_QWORD *)(v39 + 16);
      if (!v42)
        goto LABEL_71;
      for (k = 0; ; ++k)
      {
        v44 = *(unsigned __int8 *)(v42 + k);
        v45 = v14[k];
        if ((_DWORD)v44 == (_DWORD)v45)
        {
          if (!*(_BYTE *)(v42 + k))
          {
            v46 = (_QWORD *)*((_QWORD *)&v122 + 1);
            if (*((_QWORD *)&v122 + 1))
            {
              v47 = (_QWORD *)&v122 + 1;
              if (**((_QWORD **)&v122 + 1) != v42)
              {
                do
                {
                  v48 = v46;
                  v46 = (_QWORD *)v46[3];
                  if (!v46)
                    goto LABEL_71;
                }
                while (*v46 != v42);
                v47 = v48 + 3;
              }
              *v47 = v46[3];
              v46[3] = v41;
              *(_QWORD *)&v94 = v46;
              DWORD2(v94) = ++v40;
              v41 = v46;
            }
LABEL_71:
            v39 = *(_QWORD *)(v39 + 8);
            if (v39)
              goto LABEL_72;
LABEL_85:
            v49 = *(_QWORD *)v31;
            if (!*(_QWORD *)v31)
              goto LABEL_157;
            for (m = 0; ; ++m)
            {
              v51 = v14[m];
              v52 = *(unsigned __int8 *)(v49 + m);
              if ((_DWORD)v51 == (_DWORD)v52)
              {
                if (!v14[m])
                {
                  v95 = v31;
                  if ((v30 & 0x4000000) == 0)
                  {
                    sub_1ACC0B80C((uint64_t)v93, *(_DWORD **)(v31 + 32));
                    v49 = *(_QWORD *)v31;
                  }
                  if (v49)
                  {
                    v53 = (_QWORD *)*((_QWORD *)&v122 + 1);
                    if (*((_QWORD *)&v122 + 1))
                    {
                      if (**((_QWORD **)&v122 + 1) == v49)
                      {
                        v55 = (_QWORD *)&v122 + 1;
LABEL_121:
                        *v55 = v53[3];
                        v53[3] = v94;
                        *(_QWORD *)&v94 = v53;
                        ++DWORD2(v94);
                      }
                      else
                      {
                        while (1)
                        {
                          v54 = v53;
                          v53 = (_QWORD *)v53[3];
                          if (!v53)
                            break;
                          if (*v53 == v49)
                          {
                            v55 = v54 + 3;
                            goto LABEL_121;
                          }
                        }
                      }
                    }
                  }
                  goto LABEL_157;
                }
              }
              else if (byte_1ACCB6333[v51] != byte_1ACCB6333[v52])
              {
                goto LABEL_157;
              }
            }
          }
        }
        else if (byte_1ACCB6333[v44] != byte_1ACCB6333[v45])
        {
          goto LABEL_71;
        }
      }
    }
    if ((v30 & 0x4000000) != 0)
      goto LABEL_157;
    v33 = *(_QWORD *)(*((_QWORD *)&v118 + 1) + 64);
    v91 = 0u;
    v92 = 0u;
    v90 = 0u;
    v89 = &v97;
    *(_DWORD *)(v33 + 4) &= ~0x200000u;
    sub_1ACC10600(&v97, *(_QWORD *)(v31 + 64), (uint64_t)&v89);
    if (!(_DWORD)v100)
    {
      sub_1ACB73B30(v93, *(_QWORD **)(v31 + 64));
      goto LABEL_157;
    }
    v26 = DWORD2(v98);
    if (!DWORD2(v98))
LABEL_157:
      v26 = sub_1ACC428B8((uint64_t)a1, (uint64_t *)&v94, (uint64_t)v11, v17, 1, v27, v28, v29);
  }
LABEL_158:
  if (v26)
  {
    if (v26 == 1 && (*(_QWORD *)(v5 + 48) & 0x10000001) == 1)
    {
      sqlite3_result_value(a1, (sqlite3_value *)a3[3]);
    }
    else if (*((_QWORD *)&v97 + 1))
    {
      sub_1ACC42D40((uint64_t)a1, (uint64_t)&byte_1ACCBEAEE, a3[1], a3[2], (uint64_t *)&v97, v27, v28, v29);
    }
    else if (a1)
    {
      *((_DWORD *)a1 + 9) = v26;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
      {
        switch(v26)
        {
          case 516:
            v88 = "abort due to ROLLBACK";
            break;
          case 101:
            v88 = "no more rows available";
            break;
          case 100:
            v88 = "another row available";
            break;
          default:
            if (v26 > 0x1Cu || ((0x1410004uLL >> v26) & 1) != 0)
              v88 = "unknown error";
            else
              v88 = off_1E5C74AE8[v26];
            break;
        }
        sub_1ACBC69D0((uint64_t)a1, v88, -1, 1u, 0);
      }
    }
    else
    {
      sub_1ACBBE20C(97602);
    }
  }
  result = (uint64_t)sub_1ACC42EA4(&v97);
  v86 = (_QWORD *)v94;
  if ((_QWORD)v94)
  {
    do
    {
      v87 = (_QWORD *)v86[3];
      result = (uint64_t)sub_1ACBE0F9C((_QWORD *)v5, v86);
      v86 = v87;
    }
    while (v87);
  }
  if (!*(_BYTE *)(v5 + 111))
    result = sub_1ACBE91DC(v5);
  *(_QWORD *)(v5 + 528) = v22;
  return result;
}

uint64_t sub_1ACC40CC8(sqlite3_context *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t result;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  int v36;
  uint64_t v37;
  double v38;
  double v39;
  int v40;
  BOOL v41;
  uint64_t v42;
  _BYTE **v43;
  _BYTE *v44;
  unsigned __int8 *i;
  uint64_t v46;
  uint64_t v47;
  BOOL v48;
  const char *v49;
  unsigned __int8 *j;
  uint64_t v51;
  uint64_t v52;
  __int128 *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;

  if (a1 && *(_QWORD *)a1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v11 = *a3;
    if (!*a3)
    {
LABEL_13:
      v13 = 0;
      v14 = a3[1];
      if (!v14)
        goto LABEL_22;
      goto LABEL_14;
    }
  }
  else
  {
    sub_1ACBBE20C(97935);
    v10 = 0;
    v11 = *a3;
    if (!*a3)
      goto LABEL_13;
  }
  v12 = *(unsigned __int16 *)(v11 + 20);
  if ((~v12 & 0x202) != 0 || *(_BYTE *)(v11 + 22) != 1)
  {
    if ((v12 & 1) != 0)
      goto LABEL_13;
    v13 = (unsigned __int8 *)sub_1ACBF2B64((int *)v11, 1);
    v14 = a3[1];
    if (!v14)
      goto LABEL_22;
  }
  else
  {
    v13 = *(unsigned __int8 **)(v11 + 8);
    v14 = a3[1];
    if (!v14)
      goto LABEL_22;
  }
LABEL_14:
  v15 = *(unsigned __int16 *)(v14 + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v15 & 1) == 0)
    {
      v16 = (unsigned __int8 *)sub_1ACBF2B64((int *)v14, 1);
      v17 = a3[4];
      if (v17)
        goto LABEL_23;
      goto LABEL_20;
    }
LABEL_22:
    v16 = 0;
    v17 = a3[4];
    if (v17)
      goto LABEL_23;
LABEL_20:
    sub_1ACBBE20C(89699);
LABEL_21:
    v18 = 0;
    goto LABEL_25;
  }
  v16 = *(unsigned __int8 **)(v14 + 8);
  v17 = a3[4];
  if (!v17)
    goto LABEL_20;
LABEL_23:
  v19 = *(_WORD *)(v17 + 20);
  if ((v19 & 0x24) != 0)
  {
    v18 = *(_QWORD *)v17;
  }
  else if ((v19 & 8) != 0)
  {
    v38 = *(double *)v17;
    if (*(double *)v17 >= -9.22337204e18)
    {
      if (v38 <= 9.22337204e18)
        v18 = (uint64_t)v38;
      else
        v18 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else
    {
      v18 = 0x8000000000000000;
    }
  }
  else
  {
    if ((v19 & 0x12) == 0 || !*(_QWORD *)(v17 + 8))
      goto LABEL_21;
    v18 = sub_1ACBF2FC0(v17);
  }
LABEL_25:
  v20 = *(_QWORD *)(v10 + 48);
  v21 = a3[5];
  if (!v21)
    goto LABEL_34;
  v22 = *(unsigned __int16 *)(v21 + 20);
  if ((~v22 & 0x202) != 0 || *(_BYTE *)(v21 + 22) != 1)
  {
    if ((v22 & 1) == 0)
    {
      v23 = sub_1ACBF2B64((int *)v21, 1);
      v24 = (unsigned int *)a3[6];
      if (v24)
        goto LABEL_35;
      goto LABEL_32;
    }
LABEL_34:
    v23 = 0;
    v24 = (unsigned int *)a3[6];
    if (v24)
      goto LABEL_35;
LABEL_32:
    sub_1ACBBE20C(89699);
LABEL_33:
    result = 0;
    goto LABEL_37;
  }
  v23 = *(_QWORD *)(v21 + 8);
  v24 = (unsigned int *)a3[6];
  if (!v24)
    goto LABEL_32;
LABEL_35:
  v26 = *((_WORD *)v24 + 10);
  if ((v26 & 0x24) != 0)
  {
    result = *v24;
    goto LABEL_37;
  }
  if ((v26 & 8) == 0)
  {
    if ((v26 & 0x12) != 0 && *((_QWORD *)v24 + 1))
    {
      result = sub_1ACBF2FC0((uint64_t)v24);
      goto LABEL_37;
    }
    goto LABEL_33;
  }
  v39 = *(double *)v24;
  if (*(double *)v24 >= -9.22337204e18)
  {
    if (v39 <= 9.22337204e18)
      result = (uint64_t)v39;
    else
      result = 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    result = 0x8000000000000000;
  }
LABEL_37:
  v27 = *(_QWORD *)(v10 + 528);
  *(_QWORD *)(v10 + 528) = 0;
  if (v13 && v16)
  {
    v81 = 0u;
    v82 = 0u;
    v79 = 0u;
    v80 = 0u;
    v77 = 0u;
    v78 = 0u;
    v75 = 0u;
    v76 = 0u;
    v73 = 0u;
    v74 = 0u;
    v71 = 0u;
    v72 = 0u;
    v69 = 0u;
    v70 = 0u;
    v67 = 0u;
    v68 = 0u;
    v65 = 0u;
    v66 = 0u;
    v63 = 0u;
    v64 = 0u;
    v62 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    v28 = *(_QWORD *)(v10 + 48);
    if ((_DWORD)result)
      *(_QWORD *)(v10 + 48) = v28 & 0xFFFFFFFF9FFFFFFFLL;
    v29 = sub_1ACC41AD0((uint64_t)&v57, v13, v10, v16, v18, a6, a7, a8);
    *(_QWORD *)(v10 + 48) |= v28 & 0x60000000;
    if (v29)
      goto LABEL_42;
    if ((v20 & 0x4000000) == 0 && *((_QWORD *)&v78 + 1) && *(_BYTE *)(*((_QWORD *)&v78 + 1) + 63) == 2)
    {
      v55 = 0u;
      v56 = 0u;
      v54 = 0u;
      v53 = &v57;
      sub_1ACC10600(&v57, *(_QWORD *)(*((_QWORD *)&v78 + 1) + 64), (uint64_t)&v53);
      if ((_DWORD)v60)
        v29 = DWORD2(v58);
      else
        v29 = 0;
LABEL_42:
      if (v29 && v23 && (*(_QWORD *)(v10 + 48) & 0x10000001) != 1)
        sub_1ACC42D40((uint64_t)a1, v23, a3[2], a3[3], (uint64_t *)&v57, v30, v31, v32);
      goto LABEL_100;
    }
    v33 = *((_QWORD *)&v79 + 1);
    if (*((_QWORD *)&v79 + 1))
    {
      if ((v20 & 0x4000000) == 0)
      {
        v29 = sub_1ACC41FB0((uint64_t)&v57);
        if (v29)
          goto LABEL_42;
        v33 = *((_QWORD *)&v79 + 1);
      }
      v34 = *(_QWORD *)(v33 + 48);
      if (v34)
      {
        v35 = (uint64_t *)(*(_QWORD *)(v10 + 32) + 24);
        v36 = -1;
        do
        {
          v37 = *v35;
          v35 += 4;
          ++v36;
        }
        while (v37 != v34);
      }
      else
      {
        v36 = -32768;
      }
      v40 = *(_DWORD *)(v10 + 40);
      v41 = __OFSUB__(v40, 1);
      v42 = (v40 - 1);
      if ((int)v42 < 0 == v41)
      {
        v43 = (_BYTE **)(*(_QWORD *)(v10 + 32) + 32 * v42);
        do
        {
          v44 = *v43;
          if (*v43)
          {
            for (i = v13; ; ++i)
            {
              v46 = *v44;
              v47 = *i;
              if ((_DWORD)v46 == (_DWORD)v47)
              {
                if (!*v44)
                  goto LABEL_98;
              }
              else if (byte_1ACCB6333[v46] != byte_1ACCB6333[v47])
              {
                break;
              }
              ++v44;
            }
          }
          if (!(_DWORD)v42)
          {
            v49 = "main";
            for (j = v13; ; ++j)
            {
              v51 = *(unsigned __int8 *)v49;
              v52 = *j;
              if ((_DWORD)v51 == (_DWORD)v52)
              {
                if (!*v49)
                {
                  LODWORD(v42) = 0;
                  goto LABEL_98;
                }
              }
              else if (byte_1ACCB6333[v51] != byte_1ACCB6333[v52])
              {
                break;
              }
              ++v49;
            }
          }
          v43 -= 4;
          v48 = (int)v42 <= 0;
          LODWORD(v42) = v42 - 1;
        }
        while (!v48);
        if (v36 != -1)
          goto LABEL_100;
        goto LABEL_99;
      }
LABEL_98:
      if (v36 == (_DWORD)v42)
LABEL_99:
        sqlite3_result_int(a1, 1);
    }
LABEL_100:
    result = (uint64_t)sub_1ACC42EA4(&v57);
  }
  *(_QWORD *)(v10 + 528) = v27;
  return result;
}

void sub_1ACC41194(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  double v18;
  __int16 v19;
  double v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char *v37;
  _BYTE *v38;
  int i;
  char *v40;
  void (**v41)(char *);
  _OWORD v42[21];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;

  if (a1 && *(_QWORD *)a1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v11 = *a3;
    if (!*a3)
    {
LABEL_4:
      sub_1ACBBE20C(89699);
      LODWORD(v12) = 0;
      goto LABEL_8;
    }
  }
  else
  {
    sub_1ACBBE20C(97935);
    v10 = 0;
    v11 = *a3;
    if (!*a3)
      goto LABEL_4;
  }
  v13 = *(_WORD *)(v11 + 20);
  if ((v13 & 0x24) != 0)
  {
    LODWORD(v12) = *(_DWORD *)v11;
  }
  else if ((v13 & 8) != 0)
  {
    v20 = *(double *)v11;
    if (*(double *)v11 >= -9.22337204e18)
    {
      if (v20 <= 9.22337204e18)
        v12 = (uint64_t)v20;
      else
        LODWORD(v12) = -1;
    }
    else
    {
      LODWORD(v12) = 0;
    }
  }
  else if ((v13 & 0x12) != 0 && *(_QWORD *)(v11 + 8))
  {
    LODWORD(v12) = sub_1ACBF2FC0(v11);
  }
  else
  {
    LODWORD(v12) = 0;
  }
LABEL_8:
  v14 = a3[1];
  if (!v14)
    goto LABEL_17;
  v15 = *(unsigned __int16 *)(v14 + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(v14 + 22) != 1)
  {
    if ((v15 & 1) == 0)
    {
      v16 = (unsigned __int8 *)sub_1ACBF2B64((int *)v14, 1);
      v17 = a3[2];
      if (v17)
        goto LABEL_18;
      goto LABEL_15;
    }
LABEL_17:
    v16 = 0;
    v17 = a3[2];
    if (v17)
      goto LABEL_18;
LABEL_15:
    sub_1ACBBE20C(89699);
LABEL_16:
    v18 = 0.0;
    goto LABEL_35;
  }
  v16 = *(unsigned __int8 **)(v14 + 8);
  v17 = a3[2];
  if (!v17)
    goto LABEL_15;
LABEL_18:
  v19 = *(_WORD *)(v17 + 20);
  if ((v19 & 0x24) != 0)
  {
    v18 = *(double *)v17;
  }
  else if ((v19 & 8) != 0)
  {
    v21 = 0x7FFFFFFFFFFFFFFFLL;
    if (*(double *)v17 <= 9.22337204e18)
      v21 = (uint64_t)*(double *)v17;
    if (*(double *)v17 >= -9.22337204e18)
      v18 = *(double *)&v21;
    else
      v18 = -0.0;
  }
  else
  {
    if ((v19 & 0x12) == 0 || !*(_QWORD *)(v17 + 8))
      goto LABEL_16;
    v18 = COERCE_DOUBLE(sub_1ACBF2FC0(v17));
  }
LABEL_35:
  v22 = *(unsigned __int8 **)(*(_QWORD *)(v10 + 32) + 32 * (int)v12);
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v43 = 0u;
  memset(v42, 0, sizeof(v42));
  v23 = *(_QWORD *)(v10 + 528);
  *(_QWORD *)(v10 + 528) = 0;
  v30 = sub_1ACC41AD0((uint64_t)v42, v22, v10, v16, (_DWORD)v12 == 1, a6, a7, a8);
  if (!v30)
  {
    if (*((_QWORD *)&v43 + 1))
    {
      v31 = *(__int16 *)(*((_QWORD *)&v43 + 1) + 54);
      v32 = v31 - 1;
      if (v31 != 1 && SLODWORD(v18) < v31)
      {
        v33 = 0;
        v34 = *(_QWORD *)(*((_QWORD *)&v43 + 1) + 8);
        v35 = *(_QWORD *)(v34 + 16 * SLODWORD(v18));
        v36 = (_QWORD *)*((_QWORD *)&v47 + 1);
        if (v35 && *((_QWORD *)&v47 + 1))
        {
          v33 = (_QWORD *)*((_QWORD *)&v47 + 1);
          do
          {
            if (*v33 == v35)
              break;
            v33 = (_QWORD *)v33[3];
          }
          while (v33);
        }
        if (v32 <= SLODWORD(v18))
        {
          v38 = (_BYTE *)v33[1];
          for (i = *v38; *v38; i = *v38)
          {
            if (i == 44)
              break;
            v33[1] = --v38;
          }
        }
        else
        {
          while (*v36 != *(_QWORD *)(v34 + (((*(_QWORD *)&v18 << 32) + 0x100000000) >> 28)))
            v36 = (_QWORD *)v36[3];
          v38 = (_BYTE *)v33[1];
        }
        v40 = (char *)sub_1ACB6DDD0(v10, "%.*s%s", v24, v25, v26, v27, v28, v29, v38 - v16);
        if (a1)
        {
          sub_1ACBC69D0((uint64_t)a1, v40, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          if (!v40)
            goto LABEL_80;
        }
        else
        {
          sub_1ACBBE20C(97480);
          if (!v40)
            goto LABEL_80;
        }
        v41 = (void (**)(char *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v40);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v40);
          v40 = (char *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_80;
          v41 = (void (**)(char *))&xmmword_1ECD3B1D0;
        }
        (*v41)(v40);
LABEL_80:
        sub_1ACC42EA4(v42);
        *(_QWORD *)(v10 + 528) = v23;
        return;
      }
    }
    v30 = sub_1ACBEB08C(124526);
  }
  sub_1ACC42EA4(v42);
  *(_QWORD *)(v10 + 528) = v23;
  if (a1)
  {
    a1[9] = v30;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
    {
      switch(v30)
      {
        case 516:
          v37 = "abort due to ROLLBACK";
          break;
        case 101:
          v37 = "no more rows available";
          break;
        case 100:
          v37 = "another row available";
          break;
        default:
          if (v30 > 0x1Cu || ((0x1410004uLL >> v30) & 1) != 0)
            v37 = "unknown error";
          else
            v37 = off_1E5C74AE8[v30];
          break;
      }
      sub_1ACBC69D0((uint64_t)a1, v37, -1, 1u, 0);
    }
  }
  else
  {
    sub_1ACBBE20C(97602);
  }
}

uint64_t sub_1ACC41644(sqlite3_context *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t result;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  int v26;
  uint64_t *i;
  BOOL v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;
  uint64_t *j;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _DWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  _QWORD v42[6];
  _OWORD v43[2];
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;

  if (a1 && *(_QWORD *)a1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a1 + 24);
    v11 = *a3;
    if (!*a3)
      goto LABEL_13;
  }
  else
  {
    sub_1ACBBE20C(97935);
    v10 = 0;
    v11 = *a3;
    if (!*a3)
      goto LABEL_13;
  }
  v12 = *(unsigned __int16 *)(v11 + 20);
  if ((~v12 & 0x202) == 0 && *(_BYTE *)(v11 + 22) == 1)
  {
    v13 = *(unsigned __int8 **)(v11 + 8);
    result = a3[1];
    if (!result)
      goto LABEL_19;
    goto LABEL_14;
  }
  if ((v12 & 1) == 0)
  {
    v13 = (unsigned __int8 *)sub_1ACBF2B64((int *)v11, 1);
    result = a3[1];
    if (!result)
      goto LABEL_19;
    goto LABEL_14;
  }
LABEL_13:
  v13 = 0;
  result = a3[1];
  if (!result)
    goto LABEL_19;
LABEL_14:
  v15 = *(unsigned __int16 *)(result + 20);
  if ((~v15 & 0x202) != 0 || *(_BYTE *)(result + 22) != 1)
  {
    if ((v15 & 1) == 0)
    {
      result = sub_1ACBF2B64((int *)result, 1);
      v16 = (unsigned __int8 *)result;
      goto LABEL_20;
    }
LABEL_19:
    v16 = 0;
    goto LABEL_20;
  }
  v16 = *(unsigned __int8 **)(result + 8);
LABEL_20:
  v17 = *(_QWORD *)(v10 + 528);
  *(_QWORD *)(v10 + 528) = 0;
  if (!*(_BYTE *)(v10 + 111))
    result = sub_1ACBE9148(v10);
  if (!v13 || !v16)
    goto LABEL_92;
  v68 = 0u;
  v69 = 0u;
  v66 = 0u;
  v67 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62 = 0u;
  v63 = 0u;
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v21 = sub_1ACC41AD0((uint64_t)&v44, v13, v10, v16, 0, a6, a7, a8);
  if (v21)
    goto LABEL_74;
  memset(v43, 0, sizeof(v43));
  v42[0] = &v44;
  v42[1] = sub_1ACC430F8;
  v42[2] = sub_1ACC41F7C;
  v42[3] = 0;
  v42[4] = 0;
  v42[5] = v43;
  v22 = *((_QWORD *)&v65 + 1);
  if (!*((_QWORD *)&v65 + 1))
  {
    v24 = v66;
    if (!(_QWORD)v66)
    {
      v21 = sub_1ACC41FB0((uint64_t)&v44);
      if (!v21)
      {
        sub_1ACC42708((uint64_t)v42, *((uint64_t *)&v66 + 1));
        goto LABEL_70;
      }
      goto LABEL_71;
    }
    v25 = *(_DWORD **)(v66 + 80);
    if (v25)
    {
      v26 = *v25;
      if ((int)*v25 >= 1)
      {
        for (i = (uint64_t *)(v25 + 2); ; i += 3)
        {
          if (*i)
          {
            if (sub_1ACC0B714((uint64_t)v42, *i))
              v28 = 1;
            else
              v28 = v26 <= 1;
            if (v28)
            {
LABEL_44:
              v24 = v66;
              break;
            }
          }
          else if (v26 < 2)
          {
            goto LABEL_44;
          }
          --v26;
        }
      }
    }
    v29 = *(_QWORD *)(v24 + 72);
    if (v29)
      sub_1ACC0B714((uint64_t)v42, v29);
    goto LABEL_70;
  }
  if (*(_BYTE *)(*((_QWORD *)&v65 + 1) + 63) == 2)
  {
    v23 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 64);
    *(_DWORD *)(v23 + 4) &= ~0x200000u;
    DWORD2(v45) = 0;
    sub_1ACC10600(&v44, v23, 0);
    if (*(_BYTE *)(v10 + 103))
      v21 = 7;
    else
      v21 = DWORD2(v45);
    if (!v21)
    {
      sub_1ACB73B30(v42, (_QWORD *)v23);
      goto LABEL_70;
    }
    goto LABEL_71;
  }
  v30 = *(_DWORD **)(*((_QWORD *)&v65 + 1) + 32);
  if (!v30)
    goto LABEL_59;
  v31 = *v30;
  if ((int)*v30 < 1)
    goto LABEL_59;
  for (j = (uint64_t *)(v30 + 2); !*j; j += 3)
  {
    if (v31 < 2)
      goto LABEL_58;
LABEL_51:
    --v31;
  }
  if (sub_1ACC0B714((uint64_t)v42, *j))
    v33 = 1;
  else
    v33 = v31 <= 1;
  if (!v33)
    goto LABEL_51;
LABEL_58:
  v22 = *((_QWORD *)&v65 + 1);
LABEL_59:
  if (*(__int16 *)(v22 + 54) >= 1)
  {
    v34 = 0;
    v35 = 12;
    do
    {
      v36 = *(unsigned __int16 *)(*(_QWORD *)(v22 + 8) + v35);
      if (*(_WORD *)(*(_QWORD *)(v22 + 8) + v35))
      {
        if (!*(_BYTE *)(v22 + 63))
        {
          v37 = *(_DWORD **)(v22 + 80);
          if (v37)
          {
            if (*v37 >= v36)
            {
              v38 = *(_QWORD *)&v37[6 * (v36 - 1) + 2];
              if (v38)
              {
                sub_1ACC0B714((uint64_t)v42, v38);
                v22 = *((_QWORD *)&v65 + 1);
              }
            }
          }
        }
      }
      ++v34;
      v35 += 16;
    }
    while (v34 < *(__int16 *)(v22 + 54));
  }
LABEL_70:
  v21 = sub_1ACC428B8((uint64_t)a1, (uint64_t *)v43, (uint64_t)v16, 0, 0, v18, v19, v20);
LABEL_71:
  v39 = *(_QWORD **)&v43[0];
  if (*(_QWORD *)&v43[0])
  {
    do
    {
      v40 = (_QWORD *)v39[3];
      sub_1ACBE0F9C((_QWORD *)v10, v39);
      v39 = v40;
    }
    while (v40);
  }
  if (v21)
  {
LABEL_74:
    if (v21 == 1 && (*(_QWORD *)(v10 + 48) & 0x10000001) == 1)
    {
      sqlite3_result_value(a1, (sqlite3_value *)a3[1]);
    }
    else if (a1)
    {
      *((_DWORD *)a1 + 9) = v21;
      if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 1) != 0)
      {
        switch(v21)
        {
          case 516:
            v41 = "abort due to ROLLBACK";
            break;
          case 101:
            v41 = "no more rows available";
            break;
          case 100:
            v41 = "another row available";
            break;
          default:
            if (v21 > 0x1Cu || ((0x1410004uLL >> v21) & 1) != 0)
              v41 = "unknown error";
            else
              v41 = off_1E5C74AE8[v21];
            break;
        }
        sub_1ACBC69D0((uint64_t)a1, v41, -1, 1u, 0);
      }
    }
    else
    {
      sub_1ACBBE20C(97602);
    }
  }
  result = (uint64_t)sub_1ACC42EA4(&v44);
LABEL_92:
  *(_QWORD *)(v10 + 528) = v17;
  if (!*(_BYTE *)(v10 + 111))
    return sub_1ACBE91DC(v10);
  return result;
}

uint64_t sub_1ACC41AD0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned __int8 *v20;
  char *v21;
  uint64_t result;
  int v23;
  char v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  _BYTE **v28;
  _BYTE *v29;
  unsigned __int8 *i;
  uint64_t v31;
  uint64_t v32;
  BOOL v33;
  const char *v34;
  unsigned __int8 *j;
  uint64_t v36;
  uint64_t v37;
  char v38;

  v8 = a5;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)(a1 + 408) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a3 + 344);
  *(_QWORD *)(a3 + 344) = a1;
  *(_QWORD *)a1 = a3;
  if (*(_BYTE *)(a3 + 103))
    sub_1ACBCB308(a1, "out of memory", a3, (uint64_t)a4, a5, a6, a7, a8, v38);
  if (!a4)
    return 7;
  v13 = *a4;
  if (!*a4)
  {
    v23 = 0;
    v21 = "CREATE ";
    goto LABEL_33;
  }
  if ((v13 & 0xFFFFFFDF) != 0x43)
  {
    v20 = &byte_1ACCB6333[v13];
    v21 = "CREATE ";
LABEL_32:
    v23 = *v20;
    goto LABEL_33;
  }
  v14 = a4[1];
  if (!a4[1])
  {
    v23 = 0;
    v21 = "REATE ";
    goto LABEL_33;
  }
  if ((v14 & 0xFFFFFFDF) != 0x52)
  {
    v20 = &byte_1ACCB6333[v14];
    v21 = "REATE ";
    goto LABEL_32;
  }
  v15 = a4[2];
  if (!a4[2])
  {
    v23 = 0;
    v21 = "EATE ";
    goto LABEL_33;
  }
  if ((v15 & 0xFFFFFFDF) != 0x45)
  {
    v20 = &byte_1ACCB6333[v15];
    v21 = "EATE ";
    goto LABEL_32;
  }
  v16 = a4[3];
  if (!a4[3])
  {
    v23 = 0;
    v21 = "ATE ";
    goto LABEL_33;
  }
  if ((v16 & 0xFFFFFFDF) != 0x41)
  {
    v20 = &byte_1ACCB6333[v16];
    v21 = "ATE ";
    goto LABEL_32;
  }
  v17 = a4[4];
  if (!a4[4])
  {
    v23 = 0;
    v21 = "TE ";
    goto LABEL_33;
  }
  if ((v17 & 0xFFFFFFDF) != 0x54)
  {
    v20 = &byte_1ACCB6333[v17];
    v21 = "TE ";
    goto LABEL_32;
  }
  v18 = a4[5];
  if (!a4[5])
  {
    v23 = 0;
    v21 = "E ";
    goto LABEL_33;
  }
  if ((v18 & 0xFFFFFFDF) != 0x45)
  {
    v20 = &byte_1ACCB6333[v18];
    v21 = "E ";
    goto LABEL_32;
  }
  v19 = a4[6];
  if (a4[6])
  {
    if ((_DWORD)v19 == 32)
      goto LABEL_34;
    v20 = &byte_1ACCB6333[v19];
    v21 = " ";
    goto LABEL_32;
  }
  v23 = 0;
  v21 = " ";
LABEL_33:
  if (v23 != byte_1ACCB6333[*v21])
    return sub_1ACBEB08C(123556);
LABEL_34:
  v24 = 1;
  if (v8)
    goto LABEL_58;
  if (a2)
  {
    v25 = *(_DWORD *)(a3 + 40);
    v26 = __OFSUB__(v25, 1);
    v27 = (v25 - 1);
    if ((int)v27 < 0 != v26)
    {
LABEL_56:
      v24 = v27;
    }
    else
    {
      v28 = (_BYTE **)(*(_QWORD *)(a3 + 32) + 32 * v27);
      do
      {
        v29 = *v28;
        if (*v28)
        {
          for (i = a2; ; ++i)
          {
            v31 = *v29;
            v32 = *i;
            if ((_DWORD)v31 == (_DWORD)v32)
            {
              if (!*v29)
                goto LABEL_56;
            }
            else if (byte_1ACCB6333[v31] != byte_1ACCB6333[v32])
            {
              break;
            }
            ++v29;
          }
        }
        if (!(_DWORD)v27)
        {
          v34 = "main";
          for (j = a2; ; ++j)
          {
            v36 = *(unsigned __int8 *)v34;
            v37 = *j;
            if ((_DWORD)v36 == (_DWORD)v37)
            {
              if (!*v34)
              {
                v24 = 0;
                goto LABEL_58;
              }
            }
            else if (byte_1ACCB6333[v36] != byte_1ACCB6333[v37])
            {
              break;
            }
            ++v34;
          }
        }
        v28 -= 4;
        v24 = -1;
        v33 = (int)v27 <= 0;
        LODWORD(v27) = v27 - 1;
      }
      while (!v33);
    }
  }
  else
  {
    v24 = -1;
  }
LABEL_58:
  *(_BYTE *)(a3 + 196) = v24;
  *(_BYTE *)(a1 + 302) = 2;
  *(_QWORD *)a1 = a3;
  *(_WORD *)(a1 + 216) = 1;
  LODWORD(result) = sub_1ACB5CFD8(a1, a4);
  if (*(_BYTE *)(a3 + 103))
    result = 7;
  else
    result = result;
  if (!(_DWORD)result)
  {
    if (*(_QWORD *)(a1 + 344) || *(_QWORD *)(a1 + 352) || *(_QWORD *)(a1 + 360))
      result = 0;
    else
      result = sub_1ACBEB08C(123567);
  }
  *(_BYTE *)(a3 + 196) = 0;
  return result;
}

uint64_t sub_1ACC41E74(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unsigned __int8 **v5;
  unsigned __int8 **v6;
  _QWORD *v8;

  v2 = a1[5];
  v3 = *a2;
  if (v3 == 167)
  {
    if (*((_DWORD *)a2 + 12) == *(_DWORD *)(v2 + 12) && (a2[7] & 3) == 0 && *(_QWORD *)(v2 + 16) == *((_QWORD *)a2 + 9))
    {
      v4 = *a1;
      v5 = *(unsigned __int8 ***)(*a1 + 408);
      if (v5)
      {
        if (*v5 != a2)
        {
          while (1)
          {
            v6 = v5;
            v5 = (unsigned __int8 **)v5[3];
            if (!v5)
              return 0;
            if (*v5 == a2)
            {
LABEL_18:
              if (!v2)
                return 0;
              v8 = v6 + 3;
              goto LABEL_21;
            }
          }
        }
        goto LABEL_20;
      }
    }
    return 0;
  }
  if (v3 != 77)
    return 0;
  if (*((_DWORD *)a2 + 12) != *(_DWORD *)(v2 + 12))
    return 0;
  v4 = *a1;
  if (*(_QWORD *)(*a1 + 176) != *(_QWORD *)(v2 + 16))
    return 0;
  v5 = *(unsigned __int8 ***)(v4 + 408);
  if (!v5)
    return 0;
  if (*v5 != a2)
  {
    while (1)
    {
      v6 = v5;
      v5 = (unsigned __int8 **)v5[3];
      if (!v5)
        return 0;
      if (*v5 == a2)
        goto LABEL_18;
    }
  }
LABEL_20:
  v8 = (_QWORD *)(v4 + 408);
LABEL_21:
  *v8 = v5[3];
  v5[3] = *(unsigned __int8 **)v2;
  *(_QWORD *)v2 = v5;
  ++*(_DWORD *)(v2 + 8);
  return 0;
}

uint64_t sub_1ACC41F7C(_QWORD *a1, uint64_t a2)
{
  if ((*(_WORD *)(a2 + 6) & 0x420) != 0)
    return 1;
  sub_1ACC12A20(a1, a2);
  return 0;
}

uint64_t sub_1ACC41FB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  int *v23;
  _OWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t *, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  int v39;
  unsigned int v40;
  int *v41;
  _WORD *v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  _WORD *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  _WORD *v54;
  int v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t (*v95)(_QWORD *, unsigned __int8 *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t (*v96)(uint64_t *, uint64_t, int *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 360);
  v92 = 0u;
  v93 = 0u;
  v91 = 0u;
  v90 = a1;
  v4 = *(_QWORD *)(v2 + 32);
  v5 = *(_QWORD *)(v3 + 48);
  if (v5)
  {
    v6 = (uint64_t *)(v4 + 24);
    v7 = -1;
    do
    {
      v8 = *v6;
      v6 += 4;
      ++v7;
    }
    while (v8 != v5);
  }
  else
  {
    v7 = -32768;
  }
  v9 = sub_1ACBD1B0C(v2, *(char **)(v3 + 8), *(_BYTE **)(v4 + 32 * v7));
  *(_QWORD *)(a1 + 176) = v9;
  *(_BYTE *)(a1 + 218) = *(_BYTE *)(v3 + 16);
  if (!v9
    || *(_BYTE *)(v9 + 63) != 1 && *(__int16 *)(v9 + 54) > 0
    || (v16 = sub_1ACC114E0(a1, v9, v10, v11, v12, v13, v14, v15), !(_DWORD)v16))
  {
    v17 = *(_QWORD *)(v3 + 24);
    if (v17)
    {
      LODWORD(v93) = 0;
      v94 = a1;
      v95 = sub_1ACB75FF4;
      v96 = sub_1ACB75AF4;
      v97 = 0;
      v98 = 0;
      v99 = &v90;
      v18 = *(_DWORD *)(a1 + 308) + *(_DWORD *)(v17 + 40);
      *(_DWORD *)(a1 + 308) = v18;
      if (*(_DWORD *)(*(_QWORD *)a1 + 148) < v18)
      {
        sub_1ACBCB308(a1, "Expression tree is too large (maximum depth %d)", v10, v11, v12, v13, v14, v15, *(_DWORD *)(*(_QWORD *)a1 + 148));
        return 1;
      }
      sub_1ACC0B714((uint64_t)&v94, v17);
      v19 = v94;
      *(_DWORD *)(v94 + 308) -= *(_DWORD *)(v17 + 40);
      *(_DWORD *)(v17 + 4) |= v93 & 0x8010;
      if (SHIDWORD(v92) > 0)
        return 1;
      v16 = *(_DWORD *)(v19 + 48) > 0;
      if (*(int *)(v19 + 48) > 0)
        return v16;
    }
    else
    {
      v16 = 0;
    }
    v20 = *(_QWORD *)(v3 + 56);
    if (!v20)
      return v16;
    while (1)
    {
      v21 = *(_QWORD *)(v20 + 16);
      if (v21)
      {
        sub_1ACC10600((_BYTE *)a1, v21, (uint64_t)&v90);
        if (*(_DWORD *)(a1 + 48))
        {
          v16 = *(unsigned int *)(a1 + 24);
          if ((_DWORD)v16)
            return v16;
        }
      }
      if (*(_QWORD *)(v20 + 24))
        break;
      v16 = 0;
LABEL_24:
      v20 = *(_QWORD *)(v20 + 80);
      if (!v20)
        return v16;
    }
    v22 = sub_1ACC2EFD4((uint64_t *)a1, v20);
    if (!v22)
      return 7;
    v23 = v22;
    v24 = sub_1ACB6E848((_QWORD **)a1, *(_QWORD **)(v20 + 48), v22, 0, 0, 0, 0, 0, 0);
    if (!v24)
    {
      v23 = 0;
      *(_QWORD *)(v20 + 48) = 0;
      v40 = 7;
      v41 = *(int **)(v20 + 32);
      if (!v41)
        goto LABEL_19;
      goto LABEL_63;
    }
    v31 = (uint64_t)v24;
    v32 = *(unsigned int **)(v20 + 48);
    if (v32)
    {
      v33 = *v32;
      if ((int)v33 >= 1)
      {
        if ((_DWORD)v33 == 1)
        {
          v34 = 0;
LABEL_47:
          v45 = v33 - v34;
          v46 = (_WORD *)((char *)&v32[6 * v34 + 6] + 1);
          do
          {
            *v46 = *v46 & 0xFFFC | 1;
            v46 += 12;
            --v45;
          }
          while (v45);
          goto LABEL_49;
        }
        v34 = v33 & 0xFFFFFFFE;
        v42 = (_WORD *)((char *)v32 + 49);
        v43 = v34;
        do
        {
          v44 = *v42 & 0xFFFC | 1;
          *(v42 - 12) = *(v42 - 12) & 0xFFFC | 1;
          *v42 = v44;
          v42 += 24;
          v43 -= 2;
        }
        while (v43);
        if (v34 != v33)
          goto LABEL_47;
      }
    }
LABEL_49:
    sub_1ACC10600((_BYTE *)a1, (uint64_t)v24, 0);
    v47 = *(unsigned int **)(v20 + 48);
    if (!v47)
    {
      v40 = *(_DWORD *)(a1 + 48) != 0;
      goto LABEL_62;
    }
    v48 = *v47;
    if ((int)v48 <= 0)
    {
      v40 = *(_DWORD *)(a1 + 48) != 0;
LABEL_61:
      *(_QWORD *)(v31 + 32) = 0;
LABEL_62:
      *(_QWORD *)(v31 + 40) = 0;
      sub_1ACB7E704((_QWORD *)v2, v31, 1);
      v41 = *(int **)(v20 + 32);
      if (!v41)
        goto LABEL_19;
LABEL_63:
      v55 = *v41;
      if (*v41 >= 1 && v40 == 0)
      {
        v57 = 0;
        v58 = 12;
        do
        {
          v59 = *(_QWORD *)&v41[v58];
          if (v59)
          {
            sub_1ACC10600((_BYTE *)a1, v59, 0);
            v41 = *(int **)(v20 + 32);
            v55 = *v41;
          }
          ++v57;
          v58 += 26;
        }
        while (v57 < v55);
      }
LABEL_19:
      if (*(_BYTE *)(v2 + 103))
        v16 = 7;
      else
        v16 = v40;
      *(_QWORD *)&v91 = v23;
      if (!(_DWORD)v16)
      {
        v35 = *(_QWORD *)(v20 + 40);
        if (!v35)
          goto LABEL_75;
        v36 = v93;
        LODWORD(v93) = v93 & 0xF7FF6FEF;
        v37 = v90;
        v94 = v90;
        v95 = sub_1ACB75FF4;
        if ((v36 & 0x80000) != 0)
          v38 = 0;
        else
          v38 = sub_1ACB75AF4;
        v96 = v38;
        v97 = 0;
        v98 = 0;
        v99 = &v90;
        v39 = *(_DWORD *)(v90 + 308) + *(_DWORD *)(v35 + 40);
        *(_DWORD *)(v90 + 308) = v39;
        if (*(_DWORD *)(*(_QWORD *)v37 + 148) < v39)
        {
          sub_1ACBCB308(v37, "Expression tree is too large (maximum depth %d)", v25, v26, v27, v28, v29, v30, *(_DWORD *)(*(_QWORD *)v37 + 148));
          v16 = 1;
          goto LABEL_23;
        }
        v60 = v36 & 0x8009010;
        sub_1ACC0B714((uint64_t)&v94, v35);
        v61 = v94;
        *(_DWORD *)(v94 + 308) -= *(_DWORD *)(v35 + 40);
        v62 = v93;
        *(_DWORD *)(v35 + 4) |= v93 & 0x8010;
        LODWORD(v93) = v62 | v60;
        if (SHIDWORD(v92) >= 1 || *(int *)(v61 + 48) > 0)
        {
          v16 = 1;
        }
        else
        {
LABEL_75:
          v63 = sub_1ACC0F8AC((uint64_t)&v90, *(int **)(v20 + 48), v25, v26, v27, v28, v29, v30);
          v16 = v63;
          v70 = *(_QWORD *)(v20 + 64);
          if (v70 && !(_DWORD)v63)
          {
            *(_QWORD *)(v70 + 64) = v23;
            *((_QWORD *)&v91 + 1) = v70;
            LODWORD(v93) = 512;
            v16 = sub_1ACC0F8AC((uint64_t)&v90, *(int **)v70, v64, v65, v66, v67, v68, v69);
            if (!(_DWORD)v16)
            {
              v16 = sub_1ACC0F8AC((uint64_t)&v90, *(int **)(v70 + 16), v71, v72, v73, v74, v75, v76);
              if (!(_DWORD)v16)
                v16 = sub_1ACC0F790((uint64_t)&v90, *(_QWORD *)(v70 + 24), v77, v78, v79, v80, v81, v82)
                   || sub_1ACC0F790((uint64_t)&v90, *(_QWORD *)(v70 + 8), v83, v84, v85, v86, v87, v88);
            }
            LODWORD(v93) = 0;
          }
        }
      }
LABEL_23:
      *(_QWORD *)&v91 = 0;
      sub_1ACB7E8B0((_QWORD *)v2, v23);
      if ((_DWORD)v16)
        return v16;
      goto LABEL_24;
    }
    if ((_DWORD)v48 == 1)
    {
      v49 = 0;
    }
    else
    {
      v49 = v48 & 0xFFFFFFFE;
      v50 = (_WORD *)((char *)v47 + 49);
      v51 = v49;
      do
      {
        v52 = *v50 & 0xFFFC;
        *(v50 - 12) &= 0xFFFCu;
        *v50 = v52;
        v50 += 24;
        v51 -= 2;
      }
      while (v51);
      if (v49 == v48)
      {
LABEL_60:
        v40 = *(_DWORD *)(a1 + 48) != 0;
        if (!*(_QWORD *)(v20 + 48))
          goto LABEL_62;
        goto LABEL_61;
      }
    }
    v53 = v48 - v49;
    v54 = (_WORD *)((char *)&v47[6 * v49 + 6] + 1);
    do
    {
      *v54 &= 0xFFFCu;
      v54 += 12;
      --v53;
    }
    while (v53);
    goto LABEL_60;
  }
  return v16;
}

uint64_t sub_1ACC42550(uint64_t result, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;

  if (!a3)
    return result;
  v4 = *a3;
  if ((int)v4 < 1)
    return result;
  v5 = 0;
  v6 = (_QWORD **)(result + 408);
  while (2)
  {
    if (!a4)
      goto LABEL_4;
    v7 = &a3[6 * v5];
    v8 = *((_QWORD *)v7 + 2);
    if ((*(_WORD *)((_BYTE *)v7 + 25) & 3) != 0 || v8 == 0)
      goto LABEL_4;
    for (i = 0; ; ++i)
    {
      v11 = *(unsigned __int8 *)(v8 + i);
      v12 = *(unsigned __int8 *)(a4 + i);
      if ((_DWORD)v11 == (_DWORD)v12)
        break;
      if (byte_1ACCB6333[v11] != byte_1ACCB6333[v12])
        goto LABEL_4;
LABEL_12:
      ;
    }
    if (*(_BYTE *)(v8 + i))
      goto LABEL_12;
    v13 = *v6;
    if (*v6)
    {
      v14 = (_QWORD *)(result + 408);
      if (*v13 == v8)
      {
LABEL_20:
        if (a2)
        {
          *v14 = v13[3];
          v13[3] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v13;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      else
      {
        while (1)
        {
          v15 = v13;
          v13 = (_QWORD *)v13[3];
          if (!v13)
            break;
          if (*v13 == v8)
          {
            v14 = v15 + 3;
            goto LABEL_20;
          }
        }
      }
    }
LABEL_4:
    if (++v5 != v4)
      continue;
    return result;
  }
}

uint64_t sub_1ACC42634(uint64_t result, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  BOOL v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;

  if (!a3)
    return result;
  v4 = *a3;
  if ((int)v4 < 1)
    return result;
  v5 = 0;
  v6 = (_QWORD **)(result + 408);
  while (2)
  {
    v7 = *(_QWORD *)&a3[4 * v5 + 2];
    if (v7)
      v8 = a4 == 0;
    else
      v8 = 1;
    if (v8)
      goto LABEL_4;
    for (i = 0; ; ++i)
    {
      v10 = *(unsigned __int8 *)(v7 + i);
      v11 = *(unsigned __int8 *)(a4 + i);
      if ((_DWORD)v10 == (_DWORD)v11)
        break;
      if (byte_1ACCB6333[v10] != byte_1ACCB6333[v11])
        goto LABEL_4;
LABEL_11:
      ;
    }
    if (*(_BYTE *)(v7 + i))
      goto LABEL_11;
    v12 = *v6;
    if (*v6)
    {
      v13 = (_QWORD *)(result + 408);
      if (*v12 == v7)
      {
LABEL_19:
        if (a2)
        {
          *v13 = v12[3];
          v12[3] = *(_QWORD *)a2;
          *(_QWORD *)a2 = v12;
          ++*(_DWORD *)(a2 + 8);
        }
      }
      else
      {
        while (1)
        {
          v14 = v12;
          v12 = (_QWORD *)v12[3];
          if (!v12)
            break;
          if (*v12 == v7)
          {
            v13 = v14 + 3;
            goto LABEL_19;
          }
        }
      }
    }
LABEL_4:
    if (++v5 != v4)
      continue;
    return result;
  }
}

uint64_t sub_1ACC42708(uint64_t result, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  _DWORD *v7;
  int v8;
  uint64_t *j;
  BOOL v10;
  _QWORD *v11;
  _DWORD *v12;
  int v13;
  uint64_t *k;
  BOOL v15;
  _DWORD *v16;
  int v17;
  uint64_t *m;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  uint64_t v24;

  v3 = (_QWORD *)result;
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
    result = sub_1ACC0B714(result, v4);
  for (i = *(_QWORD *)(a2 + 56); i; i = *(_QWORD *)(i + 80))
  {
    result = sub_1ACB73B30(v3, *(_QWORD **)(i + 16));
    v6 = *(_QWORD *)(i + 40);
    if (v6)
      result = sub_1ACC0B714((uint64_t)v3, v6);
    v7 = *(_DWORD **)(i + 48);
    if (v7)
    {
      v8 = *v7;
      if ((int)*v7 >= 1)
      {
        for (j = (uint64_t *)(v7 + 2); ; j += 3)
        {
          if (*j)
          {
            result = sub_1ACC0B714((uint64_t)v3, *j);
            if ((_DWORD)result)
              v10 = 1;
            else
              v10 = v8 <= 1;
            if (v10)
              break;
          }
          else if (v8 < 2)
          {
            break;
          }
          --v8;
        }
      }
    }
    v11 = *(_QWORD **)(i + 64);
    if (v11)
    {
      v12 = (_DWORD *)*v11;
      if (*v11)
      {
        v13 = *v12;
        if ((int)*v12 >= 1)
        {
          for (k = (uint64_t *)(v12 + 2); ; k += 3)
          {
            if (*k)
            {
              result = sub_1ACC0B714((uint64_t)v3, *k);
              if ((_DWORD)result)
                v15 = 1;
              else
                v15 = v13 <= 1;
              if (v15)
                break;
            }
            else if (v13 < 2)
            {
              break;
            }
            --v13;
          }
        }
      }
      v16 = (_DWORD *)v11[2];
      if (v16)
      {
        v17 = *v16;
        if ((int)*v16 >= 1)
        {
          for (m = (uint64_t *)(v16 + 2); ; m += 3)
          {
            if (*m)
            {
              result = sub_1ACC0B714((uint64_t)v3, *m);
              if ((_DWORD)result)
                v19 = 1;
              else
                v19 = v17 <= 1;
              if (v19)
                break;
            }
            else if (v17 < 2)
            {
              break;
            }
            --v17;
          }
        }
      }
      v20 = v11[3];
      if (v20)
        result = sub_1ACC0B714((uint64_t)v3, v20);
      v21 = v11[1];
      if (v21)
        result = sub_1ACC0B714((uint64_t)v3, v21);
    }
    v22 = *(int **)(i + 32);
    if (v22 && *v22 >= 1)
    {
      v23 = 0;
      v24 = 12;
      do
      {
        result = sub_1ACB73B30(v3, *(_QWORD **)&v22[v24]);
        ++v23;
        v22 = *(int **)(i + 32);
        v24 += 26;
      }
      while (v23 < *v22);
    }
  }
  return result;
}

uint64_t sub_1ACC428B8(uint64_t a1, uint64_t *a2, uint64_t a3, char *__s, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char *v8;
  const char *v9;
  unsigned int v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  const char *v18;
  const char *v19;
  size_t v20;
  size_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  uint64_t i;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned int v29;
  char *v30;
  int v31;
  uint64_t v32;
  int j;
  uint64_t v34;
  int v35;
  char *v36;
  char *v37;
  const char *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t (**v42)(const char *);
  uint64_t v44;
  unsigned int v45;
  int v46;
  char *v47;
  unsigned int v48;
  char *__src;
  int v50;
  _QWORD *v51;

  v50 = a5;
  v8 = __s;
  v9 = (const char *)a3;
  if (__s)
  {
    v45 = strlen(__s) & 0x3FFFFFFF;
    if (v9)
      goto LABEL_3;
  }
  else
  {
    v45 = 0;
    if (a3)
    {
LABEL_3:
      v12 = strlen(v9) & 0x3FFFFFFF;
      v13 = v12;
      if (!a1)
        goto LABEL_12;
      goto LABEL_7;
    }
  }
  v12 = 0;
  v13 = 0;
  if (!a1)
  {
LABEL_12:
    sub_1ACBBE20C(97935);
    if (v8)
    {
      v14 = 0;
LABEL_14:
      v18 = (const char *)sub_1ACB6DDD0(v14, "\"%w\" ", a3, (uint64_t)__s, a5, a6, a7, a8, (char)v8);
      if (v18)
      {
        v19 = v18;
        v48 = (strlen(v18) & 0x3FFFFFFF) - 1;
        v20 = v13 + *((int *)a2 + 2) * (uint64_t)(int)v48;
        v21 = v20 + 1;
        if (v14)
        {
          v17 = (char *)sub_1ACBE1124(v14, v20 + 1);
          if (v17)
          {
LABEL_17:
            v51 = (_QWORD *)v14;
            __src = (char *)v19;
            v44 = a1;
            bzero(v17, v21);
            v22 = 0;
            v47 = 0;
            goto LABEL_21;
          }
        }
        else
        {
          v17 = (char *)sub_1ACB5D828(v20 + 1);
          if (v17)
            goto LABEL_17;
        }
        v41 = 7;
        goto LABEL_61;
      }
      return 7;
    }
    v15 = (2 * v13) | 1;
    v16 = 3 * v15;
    goto LABEL_19;
  }
LABEL_7:
  if (!*(_QWORD *)a1)
    goto LABEL_12;
  v14 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (v8)
    goto LABEL_14;
  v15 = (2 * v13) | 1;
  v16 = 3 * v15;
  if (v14)
  {
    v17 = (char *)sub_1ACBE1124(v14, 3 * v15);
    if (!v17)
      return 7;
    goto LABEL_20;
  }
LABEL_19:
  v17 = (char *)sub_1ACB5D828(v16);
  v14 = 0;
  if (!v17)
    return 7;
LABEL_20:
  v51 = (_QWORD *)v14;
  v44 = a1;
  bzero(v17, v16);
  __src = 0;
  v48 = 0;
  v22 = (unsigned __int8 *)&v17[v15];
  v47 = &v17[4 * v13 + 2];
LABEL_21:
  memcpy(v17, v9, v13);
  v23 = *a2;
  if (*a2)
  {
    v46 = 2 * v12;
    do
    {
      for (i = *(_QWORD *)(v23 + 24); i; i = *(_QWORD *)(i + 24))
      {
        if (*(_QWORD *)(i + 8) > *(_QWORD *)(v23 + 8))
          v23 = i;
      }
      v25 = a2;
      do
      {
        v26 = v25;
        v27 = *v25;
        v25 = (_QWORD *)(*v25 + 24);
      }
      while (v27 != v23);
      *v26 = *(_QWORD *)(v23 + 24);
      v28 = *(unsigned __int8 **)(v23 + 8);
      if (v8)
      {
        if (v50 || (v29 = v45, v30 = v8, (byte_1ACCB6548[*v28] & 0x46) == 0))
        {
          if (v28[*(unsigned int *)(v23 + 16)] == 34)
            v29 = v48 + 1;
          else
            v29 = v48;
          v30 = __src;
        }
      }
      else
      {
        memcpy(v22, v28, *(unsigned int *)(v23 + 16));
        v22[*(unsigned int *)(v23 + 16)] = 0;
        v31 = *v22;
        if ((char)byte_1ACCB6548[*v22] < 0)
        {
          v32 = 0;
          if (v31 == 91)
            v31 = 93;
          for (j = 1; ; ++j)
          {
            v34 = j;
            v35 = v22[j];
            if (v35 == v31)
            {
              ++j;
              LOBYTE(v35) = v31;
              if (v22[v34 + 1] != v31)
                break;
            }
            v22[v32++] = v35;
          }
          v22[v32] = 0;
        }
        v36 = &byte_1ACCBEAEE;
        if (*(_BYTE *)(*(_QWORD *)(v23 + 8) + *(unsigned int *)(v23 + 16)) == 39)
          v36 = " ";
        v30 = v47;
        sqlite3_snprintf(v46, v47, "%Q%s", v22, v36);
        if (v47)
          v29 = strlen(v47) & 0x3FFFFFFF;
        else
          v29 = 0;
      }
      v37 = v8;
      v38 = v9;
      v39 = *(_QWORD *)(v23 + 8) - (_QWORD)v9;
      v40 = *(_DWORD *)(v23 + 16);
      if (v40 != v29)
      {
        memmove(&v17[v29 + v39], &v17[(v40 + v39)], v12 - (v40 + (_DWORD)v39));
        v12 += v29 - *(_DWORD *)(v23 + 16);
        v17[v12] = 0;
      }
      memcpy(&v17[(int)v39], v30, v29);
      sub_1ACBE0F9C(v51, (_QWORD *)v23);
      v23 = *a2;
      v9 = v38;
      v8 = v37;
    }
    while (*a2);
  }
  if (v44)
    sub_1ACBC69D0(v44, v17, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  else
    sub_1ACBBE20C(97480);
  v19 = __src;
  sub_1ACBE0F9C(v51, v17);
  v41 = 0;
  if (__src)
  {
LABEL_61:
    v42 = (uint64_t (**)(const char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v19);
      v19 = (const char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return v41;
      v42 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
    }
    (*v42)(v19);
  }
  return v41;
}

_QWORD *sub_1ACC42D40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11;
  uint64_t v12;
  int v13;
  char *v14;
  _QWORD *result;

  if (a3)
  {
    v11 = *(unsigned __int16 *)(a3 + 20);
    if ((~v11 & 0x202) == 0 && *(_BYTE *)(a3 + 22) == 1)
    {
      v12 = *(_QWORD *)(a3 + 8);
      if (!a4)
        goto LABEL_14;
      goto LABEL_10;
    }
    if ((v11 & 1) == 0)
    {
      LOBYTE(v12) = sub_1ACBF2B64((int *)a3, 1);
      if (!a4)
        goto LABEL_14;
      goto LABEL_10;
    }
  }
  LOBYTE(v12) = 0;
  if (!a4)
    goto LABEL_14;
LABEL_10:
  v13 = *(unsigned __int16 *)(a4 + 20);
  if (((~v13 & 0x202) != 0 || *(_BYTE *)(a4 + 22) != 1) && (v13 & 1) == 0)
    sub_1ACBF2B64((int *)a4, 1);
LABEL_14:
  v14 = (char *)sub_1ACB6DDD0(*a5, "error in %s %s%s%s: %s", a3, a4, (uint64_t)a5, a6, a7, a8, v12);
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = 1;
    result = (_QWORD *)sub_1ACB57870(*(_QWORD *)a1, v14, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v14)
      return result;
    return sub_1ACBE0F9C((_QWORD *)*a5, v14);
  }
  result = (_QWORD *)sub_1ACBBE20C(97389);
  if (v14)
    return sub_1ACBE0F9C((_QWORD *)*a5, v14);
  return result;
}

_QWORD *sub_1ACC42EA4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;

  v2 = (_QWORD *)*a1;
  v3 = a1[2];
  if (v3)
  {
    if (*(_BYTE *)(v3 + 267))
      sub_1ACB68B58((_QWORD **)a1[2]);
    sub_1ACBBE904(v3);
  }
  v4 = a1[43];
  if (v4)
  {
    if (v2[102] || (v5 = *(_DWORD *)(v4 + 44) - 1, (*(_DWORD *)(v4 + 44) = v5) == 0))
      sub_1ACC00BE8(v2, (_QWORD *)v4);
  }
  while (1)
  {
    v6 = a1[44];
    if (!v6)
      break;
    a1[44] = *(_QWORD *)(v6 + 40);
    sub_1ACBFD414(v2, v6);
  }
  sub_1ACB689B8(v2, a1[45]);
  v7 = (_QWORD *)a1[1];
  if (v7)
    sub_1ACBE0F9C(v2, v7);
  v8 = (_QWORD *)a1[51];
  if (v8)
  {
    do
    {
      v9 = (_QWORD *)v8[3];
      sub_1ACBE0F9C(v2, v8);
      v8 = v9;
    }
    while (v9);
  }
  return sub_1ACBCB8D0(a1);
}

uint64_t sub_1ACC42F6C(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  if (*a2 != 167)
    return 0;
  if ((a2[7] & 3) != 0)
    return 0;
  v2 = a1[5];
  v4 = *((_QWORD *)a2 + 9);
  v3 = a2 + 72;
  if (*(_QWORD *)(v2 + 16) != v4)
    return 0;
  v6 = *(_QWORD **)(*a1 + 408);
  if (!v6)
    return 0;
  if ((unsigned __int8 *)*v6 != v3)
  {
    while (1)
    {
      v7 = v6;
      v6 = (_QWORD *)v6[3];
      if (!v6)
        return 0;
      if ((unsigned __int8 *)*v6 == v3)
      {
        if (!v2)
          return 0;
        v8 = v7 + 3;
        goto LABEL_12;
      }
    }
  }
  v8 = (_QWORD *)(*a1 + 408);
LABEL_12:
  *v8 = v6[3];
  v6[3] = *(_QWORD *)v2;
  *(_QWORD *)v2 = v6;
  ++*(_DWORD *)(v2 + 8);
  return 0;
}

uint64_t sub_1ACC43008(_QWORD *a1, uint64_t a2)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  if ((*(_WORD *)(a2 + 6) & 0x420) != 0)
    return 1;
  v3 = *(unsigned int **)(a2 + 40);
  if (!v3)
    return 2;
  v4 = *v3;
  if ((int)v4 >= 1)
  {
    v5 = 0;
    v6 = a1[5];
    do
    {
      if (*(_QWORD *)&v3[26 * v5 + 10] == *(_QWORD *)(v6 + 16))
      {
        v8 = *(_QWORD *)&v3[26 * v5 + 6];
        if (v8)
        {
          v9 = *(_QWORD **)(*a1 + 408);
          if (v9)
          {
            if (*v9 == v8)
            {
              v7 = (_QWORD *)(*a1 + 408);
LABEL_7:
              *v7 = v9[3];
              v9[3] = *(_QWORD *)v6;
              *(_QWORD *)v6 = v9;
              ++*(_DWORD *)(v6 + 8);
            }
            else
            {
              while (1)
              {
                v10 = v9;
                v9 = (_QWORD *)v9[3];
                if (!v9)
                  break;
                if (*v9 == v8)
                {
                  if (!v6)
                    break;
                  v7 = v10 + 3;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
      ++v5;
    }
    while (v5 != v4);
  }
  sub_1ACC12A20(a1, a2);
  return 0;
}

uint64_t sub_1ACC430F8(_QWORD *a1, _BYTE *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;

  if (*a2 == 117 && (a2[4] & 0x80) != 0)
  {
    v2 = *(_QWORD **)(*a1 + 408);
    if (v2)
    {
      v3 = a1[5];
      if ((_BYTE *)*v2 == a2)
      {
        v5 = (_QWORD *)(*a1 + 408);
        if (v3)
        {
LABEL_8:
          *v5 = v2[3];
          v2[3] = *(_QWORD *)v3;
          *(_QWORD *)v3 = v2;
          ++*(_DWORD *)(v3 + 8);
          return 0;
        }
      }
      else
      {
        while (1)
        {
          v4 = v2;
          v2 = (_QWORD *)v2[3];
          if (!v2)
            break;
          if ((_BYTE *)*v2 == a2)
          {
            v5 = v4 + 3;
            if (!v3)
              return 0;
            goto LABEL_8;
          }
        }
      }
    }
  }
  return 0;
}

_QWORD *sub_1ACC43180(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  if (!a1)
    return (_QWORD *)sub_1ACBBE20C(98105);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || !*(_QWORD *)(v1 + 32))
    return (_QWORD *)sub_1ACBBE20C(98105);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    result = *(_QWORD **)(v2 + 8);
    if (!result)
      return result;
  }
  else
  {
    result = sub_1ACBC794C(a1, 8);
    if (!result)
      return result;
  }
  ++*result;
  return result;
}

void sub_1ACC431E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1)
  {
    sub_1ACBBE20C(98105);
    sub_1ACBBE20C(97423);
    return;
  }
  v2 = a1[1];
  if (!v2 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    goto LABEL_8;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(uint64_t **)(v3 + 8);
    if (v4)
      goto LABEL_11;
LABEL_8:
    v5 = 0;
    goto LABEL_12;
  }
  v4 = (uint64_t *)sub_1ACBC794C((uint64_t)a1, 8);
  if (!v4)
    goto LABEL_8;
LABEL_11:
  v5 = *v4;
LABEL_12:
  v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v6, v5);
  }
  else
  {
    *(_QWORD *)v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }
}

_QWORD *sub_1ACC432A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  if (!a1)
    return (_QWORD *)sub_1ACBBE20C(98105);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || !*(_QWORD *)(v1 + 32))
    return (_QWORD *)sub_1ACBBE20C(98105);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    result = *(_QWORD **)(v2 + 8);
    if (!result)
      return result;
  }
  else
  {
    result = sub_1ACBC794C(a1, 24);
    if (!result)
      return result;
  }
  result[1] = 1;
  return result;
}

void sub_1ACC43304(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1 || (v2 = a1[1]) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(uint64_t **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (uint64_t *)sub_1ACBC794C((uint64_t)a1, 24);
    if (!v4)
      return;
  }
  v5 = *v4;
  if (v4[1])
  {
    *v4 = ++v5;
    v4[1] = 0;
  }
  v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v6, v5);
  }
  else
  {
    *(_QWORD *)v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }
}

uint64_t *sub_1ACC433AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *result;
  uint64_t v4;
  uint64_t v5;

  if (!a1)
    return (uint64_t *)sub_1ACBBE20C(98105);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || !*(_QWORD *)(v1 + 32))
    return (uint64_t *)sub_1ACBBE20C(98105);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    result = *(uint64_t **)(v2 + 8);
    if (!result)
      return result;
  }
  else
  {
    result = (uint64_t *)sub_1ACBC794C(a1, 24);
    if (!result)
      return result;
  }
  v4 = *result;
  v5 = result[1] + 1;
  result[1] = v5;
  if (!v4)
    *result = v5;
  return result;
}

void sub_1ACC4341C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  if (!a1 || (v2 = a1[1]) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(uint64_t **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (uint64_t *)sub_1ACBC794C((uint64_t)a1, 24);
    if (!v4)
      return;
  }
  v5 = *v4;
  v6 = *a1;
  if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
  {
    sub_1ACBF327C(v6, v5);
  }
  else
  {
    *(_QWORD *)v6 = v5;
    *(_WORD *)(v6 + 20) = 4;
  }
  *v4 = 0;
}

_QWORD *sub_1ACC434BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  if (!a1)
    return (_QWORD *)sub_1ACBBE20C(98105);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || !*(_QWORD *)(v1 + 32))
    return (_QWORD *)sub_1ACBBE20C(98105);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    result = *(_QWORD **)(v2 + 8);
    if (!result)
      return result;
  }
  else
  {
    result = sub_1ACBC794C(a1, 24);
    if (!result)
      return result;
  }
  ++result[2];
  return result;
}

void sub_1ACC43520(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint64_t v8;

  if (!a1 || (v2 = a1[1]) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = sub_1ACBC794C((uint64_t)a1, 24);
    if (!v4)
      return;
  }
  v5 = v4[1];
  v6 = v4[2];
  *v4 = v5;
  if (v6 < 2)
  {
    v8 = *a1;
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
      sub_1ACBF2A54((int *)v8);
    *(_QWORD *)v8 = 0;
  }
  else
  {
    v7 = (double)v5 / (double)(v6 - 1);
    v8 = *a1;
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0)
      sub_1ACBF2A54((int *)v8);
    else
      *(_WORD *)(v8 + 20) = 1;
    *(double *)v8 = v7;
  }
  *(_WORD *)(v8 + 20) = 8;
}

_QWORD *sub_1ACC43618(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  if (!a1 || (v1 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v1 + 32))
    sub_1ACCB4054();
  v2 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
    result = *(_QWORD **)(v2 + 8);
  else
    result = sub_1ACBC794C(a1, 24);
  ++result[1];
  return result;
}

_QWORD *sub_1ACC43668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  if (!a1)
    return (_QWORD *)sub_1ACBBE20C(98105);
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1 || !*(_QWORD *)(v1 + 32))
    return (_QWORD *)sub_1ACBBE20C(98105);
  v2 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
  {
    result = *(_QWORD **)(v2 + 8);
    if (!result)
      return result;
  }
  else
  {
    result = sub_1ACBC794C(a1, 24);
    if (!result)
      return result;
  }
  ++result[2];
  return result;
}

void sub_1ACC436CC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  double v5;
  uint64_t v6;

  if (!a1 || (v2 = a1[1]) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(uint64_t **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (uint64_t *)sub_1ACBC794C((uint64_t)a1, 0);
    if (!v4)
      return;
  }
  v5 = (double)v4[1] / (double)v4[2];
  v6 = *a1;
  if ((*(_WORD *)(v6 + 20) & 0x9000) != 0)
    sub_1ACBF2A54((int *)v6);
  else
    *(_WORD *)(v6 + 20) = 1;
  *(double *)v6 = v5;
  *(_WORD *)(v6 + 20) = 8;
}

_QWORD *sub_1ACC43798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  if (!a1 || (v1 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v1 + 32))
    sub_1ACCB4054();
  v2 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
    result = *(_QWORD **)(v2 + 8);
  else
    result = sub_1ACBC794C(a1, 24);
  ++result[1];
  return result;
}

uint64_t sub_1ACC437E8(uint64_t result, uint64_t a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  __int16 v8;
  unint64_t v9;
  double v10;

  if (!result)
    return sub_1ACBBE20C(98105);
  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  if (!v4 || !*(_QWORD *)(v4 + 32))
    return sub_1ACBBE20C(98105);
  v6 = *(_QWORD *)(result + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(_QWORD **)(v6 + 8);
    if (!v7)
      return result;
  }
  else
  {
    result = (uint64_t)sub_1ACBC794C(result, 24);
    v7 = (_QWORD *)result;
    if (!result)
      return result;
  }
  if (*v7)
    goto LABEL_19;
  result = *a3;
  if (!*a3)
  {
    sub_1ACBBE20C(89699);
    goto LABEL_16;
  }
  v8 = *(_WORD *)(result + 20);
  if ((v8 & 0x24) != 0)
  {
    result = *(_QWORD *)result;
    goto LABEL_13;
  }
  if ((v8 & 8) == 0)
  {
    if ((v8 & 0x12) != 0)
    {
      v9 = *(_QWORD *)(result + 8);
      if (v9)
      {
        result = sub_1ACBF2FC0(result);
        goto LABEL_13;
      }
LABEL_17:
      v7[1] = v9;
LABEL_18:
      *(_DWORD *)(v3 + 36) = 1;
      result = sub_1ACB57870(*(_QWORD *)v3, "argument of ntile must be a positive integer", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      goto LABEL_19;
    }
LABEL_16:
    v9 = 0;
    goto LABEL_17;
  }
  v10 = *(double *)result;
  if (*(double *)result < -9.22337204e18)
  {
    v9 = 0x8000000000000000;
    goto LABEL_17;
  }
  if (v10 > 9.22337204e18)
  {
    v7[1] = 0x7FFFFFFFFFFFFFFFLL;
    goto LABEL_19;
  }
  result = (uint64_t)v10;
LABEL_13:
  v7[1] = result;
  if (result <= 0)
    goto LABEL_18;
LABEL_19:
  ++*v7;
  return result;
}

void sub_1ACC43940(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (!a1 || (v2 = a1[1]) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = a1[2];
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(_QWORD **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = sub_1ACBC794C((uint64_t)a1, 24);
    if (!v4)
      return;
  }
  v5 = v4[1];
  if (v5 >= 1)
  {
    v6 = *v4 / v5;
    if ((_DWORD)v6)
    {
      v7 = (int)v6;
      v8 = *v4 - (int)v6 * v5;
      v9 = (int)v6 + 1;
      v10 = v4[2];
      if (v10 >= v8 * v9)
        v11 = v8 + (v10 - v8 * v9) / v7;
      else
        v11 = v10 / v9;
    }
    else
    {
      v11 = v4[2];
    }
    v12 = v11 + 1;
    v13 = *a1;
    if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v13, v12);
    }
    else
    {
      *(_QWORD *)v13 = v12;
      *(_WORD *)(v13 + 20) = 4;
    }
  }
}

_QWORD *sub_1ACC43A2C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *result;

  if (!a1 || (v1 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v1 + 32))
    sub_1ACCB4054();
  v2 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v2 + 20) < 0)
    result = *(_QWORD **)(v2 + 8);
  else
    result = sub_1ACBC794C(a1, 24);
  ++result[2];
  return result;
}

void sub_1ACC43A7C(sqlite3_context *a1, uint64_t a2, const sqlite3_value **a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  sqlite3_value *v9;

  if (!a1 || (v4 = *((_QWORD *)a1 + 1)) == 0 || !*(_QWORD *)(v4 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v6 = *((_QWORD *)a1 + 2);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(uint64_t **)(v6 + 8);
    if (!v7)
      return;
  }
  else
  {
    v7 = (uint64_t *)sub_1ACBC794C((uint64_t)a1, 16);
    if (!v7)
      return;
  }
  v8 = *v7;
  if (*v7)
  {
    if ((*(_WORD *)(v8 + 20) & 0x9000) != 0 || *(_DWORD *)(v8 + 32))
      sub_1ACBF2A04(*v7);
    sub_1ACBE0F9C(*(_QWORD **)(v8 + 24), (_QWORD *)v8);
  }
  v9 = sqlite3_value_dup(*a3);
  *v7 = (uint64_t)v9;
  if (v9)
    ++*((_DWORD *)v7 + 2);
  else
    sqlite3_result_error_nomem(a1);
}

void sub_1ACC43B60(sqlite3_context *a1)
{
  uint64_t v2;
  uint64_t v3;
  sqlite3_value **v4;
  sqlite3_value *v5;

  if (!a1 || (v2 = *((_QWORD *)a1 + 1)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *((_QWORD *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(sqlite3_value ***)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (sqlite3_value **)sub_1ACBC794C((uint64_t)a1, 16);
    if (!v4)
      return;
  }
  if (*v4)
  {
    sqlite3_result_value(a1, *v4);
    v5 = *v4;
    if (*v4)
    {
      if ((*((_WORD *)v5 + 10) & 0x9000) != 0 || *((_DWORD *)v5 + 8))
        sub_1ACBF2A04((uint64_t)*v4);
      sub_1ACBE0F9C(*((_QWORD **)v5 + 3), v5);
    }
    *v4 = 0;
  }
}

void sub_1ACC43C18(sqlite3_context *a1)
{
  uint64_t v2;
  uint64_t v3;
  sqlite3_value **v4;

  if (!a1 || (v2 = *((_QWORD *)a1 + 1)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *((_QWORD *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(sqlite3_value ***)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = (sqlite3_value **)sub_1ACBC794C((uint64_t)a1, 0);
    if (!v4)
      return;
  }
  if (*v4)
    sqlite3_result_value(a1, *v4);
}

_QWORD *sub_1ACC43C9C(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;

  if (!result)
    return (_QWORD *)sub_1ACBBE20C(98105);
  v1 = result[1];
  if (!v1 || !*(_QWORD *)(v1 + 32))
    return (_QWORD *)sub_1ACBBE20C(98105);
  v2 = result[2];
  if (*(__int16 *)(v2 + 20) < 0)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (!v3)
      return result;
  }
  else
  {
    result = sub_1ACBC794C((uint64_t)result, 16);
    v3 = result;
    if (!result)
      return result;
  }
  v4 = *((_DWORD *)v3 + 2) - 1;
  *((_DWORD *)v3 + 2) = v4;
  if (!v4)
  {
    v5 = *v3;
    if (*v3)
    {
      if ((*(_WORD *)(v5 + 20) & 0x9000) != 0 || *(_DWORD *)(v5 + 32))
        sub_1ACBF2A04(*v3);
      result = sub_1ACBE0F9C(*(_QWORD **)(v5 + 24), (_QWORD *)v5);
    }
    *v3 = 0;
  }
  return result;
}

void sub_1ACC43D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  unsigned __int16 v14;
  uint64_t v15;
  __int16 v16;
  double v17;
  uint64_t v18;
  sqlite3_value *v19;

  if (!a1 || (v4 = *(_QWORD *)(a1 + 8)) == 0 || !*(_QWORD *)(v4 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v6 = *(_QWORD *)(a1 + 16);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(_QWORD **)(v6 + 8);
    if (!v7)
      return;
  }
  else
  {
    v7 = sub_1ACBC794C(a1, 16);
    if (!v7)
      return;
  }
  v8 = *(_QWORD *)(a3 + 8);
  if (!v8)
  {
    v14 = 31666;
LABEL_19:
    sub_1ACBBE20C(v14 | 0x10000);
    goto LABEL_20;
  }
  v9 = *(_WORD *)(v8 + 20);
  if (((0x4000000040004uLL >> v9) & 1) != 0)
  {
    sub_1ACBCA9CC(*(_QWORD *)(a3 + 8), 0);
    v9 = *(_WORD *)(v8 + 20);
  }
  v10 = byte_1ACCB6445[v9 & 0x3F];
  if (v10 == 2)
  {
    v15 = *(_QWORD *)(a3 + 8);
    if (v15)
    {
      v16 = *(_WORD *)(v15 + 20);
      if ((v16 & 8) != 0)
      {
        v17 = *(double *)v15;
      }
      else if ((v16 & 0x24) != 0)
      {
        v17 = (double)*(uint64_t *)v15;
      }
      else if ((v16 & 0x12) != 0)
      {
        v17 = sub_1ACBF2F88(v15);
      }
      else
      {
        v17 = 0.0;
      }
    }
    else
    {
      sub_1ACBBE20C(89734);
      v17 = 0.0;
    }
    if (v17 != (double)(uint64_t)v17)
      goto LABEL_20;
    goto LABEL_29;
  }
  if (v10 != 1)
    goto LABEL_20;
  v11 = *(_QWORD *)(a3 + 8);
  if (!v11)
  {
    v14 = 24163;
    goto LABEL_19;
  }
  v12 = *(_WORD *)(v11 + 20);
  if ((v12 & 0x24) != 0)
  {
    v13 = *(_QWORD *)v11;
    if (v13 < 1)
      goto LABEL_20;
    goto LABEL_30;
  }
  if ((v12 & 8) == 0)
  {
    if ((v12 & 0x12) == 0)
      goto LABEL_20;
    if (!*(_QWORD *)(v11 + 8))
      goto LABEL_20;
    v13 = sub_1ACBF2FC0(v11);
    if (v13 < 1)
      goto LABEL_20;
    goto LABEL_30;
  }
  v17 = *(double *)v11;
  if (*(double *)v11 < -9.22337204e18)
    goto LABEL_20;
  if (v17 <= 9.22337204e18)
  {
LABEL_29:
    v13 = (uint64_t)v17;
    if ((uint64_t)v17 >= 1)
      goto LABEL_30;
LABEL_20:
    *(_DWORD *)(a1 + 36) = 1;
    sub_1ACB57870(*(_QWORD *)a1, "second argument to nth_value must be a positive integer", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    return;
  }
  v13 = 0x7FFFFFFFFFFFFFFFLL;
LABEL_30:
  v18 = *v7 + 1;
  *v7 = v18;
  if (v13 == v18)
  {
    v19 = sqlite3_value_dup(*(const sqlite3_value **)a3);
    v7[1] = v19;
    if (!v19)
      sqlite3_result_error_nomem((sqlite3_context *)a1);
  }
}

void sub_1ACC43F90(sqlite3_context *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  sqlite3_value *v5;
  uint64_t v6;

  if (!a1 || (v2 = *((_QWORD *)a1 + 1)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *((_QWORD *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(void **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = sub_1ACBC794C((uint64_t)a1, 0);
    if (!v4)
      return;
  }
  v5 = (sqlite3_value *)*((_QWORD *)v4 + 1);
  if (v5)
  {
    sqlite3_result_value(a1, v5);
    v6 = *((_QWORD *)v4 + 1);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32))
        sub_1ACBF2A04(*((_QWORD *)v4 + 1));
      sub_1ACBE0F9C(*(_QWORD **)(v6 + 24), (_QWORD *)v6);
    }
    *((_QWORD *)v4 + 1) = 0;
  }
}

void sub_1ACC4404C(sqlite3_context *a1, uint64_t a2, const sqlite3_value **a3)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  sqlite3_value *v8;

  if (!a1 || (v4 = *((_QWORD *)a1 + 1)) == 0 || !*(_QWORD *)(v4 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v6 = *((_QWORD *)a1 + 2);
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(_QWORD **)(v6 + 8);
    if (!v7)
      return;
  }
  else
  {
    v7 = sub_1ACBC794C((uint64_t)a1, 16);
    if (!v7)
      return;
  }
  if (!v7[1])
  {
    v8 = sqlite3_value_dup(*a3);
    v7[1] = v8;
    if (!v8)
      sqlite3_result_error_nomem(a1);
  }
}

void sub_1ACC440F8(sqlite3_context *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  sqlite3_value *v5;
  uint64_t v6;

  if (!a1 || (v2 = *((_QWORD *)a1 + 1)) == 0 || !*(_QWORD *)(v2 + 32))
  {
    sub_1ACBBE20C(98105);
    return;
  }
  v3 = *((_QWORD *)a1 + 2);
  if (*(__int16 *)(v3 + 20) < 0)
  {
    v4 = *(void **)(v3 + 8);
    if (!v4)
      return;
  }
  else
  {
    v4 = sub_1ACBC794C((uint64_t)a1, 16);
    if (!v4)
      return;
  }
  v5 = (sqlite3_value *)*((_QWORD *)v4 + 1);
  if (v5)
  {
    sqlite3_result_value(a1, v5);
    v6 = *((_QWORD *)v4 + 1);
    if (v6)
    {
      if ((*(_WORD *)(v6 + 20) & 0x9000) != 0 || *(_DWORD *)(v6 + 32))
        sub_1ACBF2A04(*((_QWORD *)v4 + 1));
      sub_1ACBE0F9C(*(_QWORD **)(v6 + 24), (_QWORD *)v6);
    }
    *((_QWORD *)v4 + 1) = 0;
  }
}

void sub_1ACC441B0(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9;
  uint64_t v10;
  _OWORD v11[3];

  memset(v11, 0, sizeof(v11));
  if (!sub_1ACBB4528(a1, a2, a3, (uint64_t)v11, a5, a6, a7, a8))
  {
    sub_1ACC4571C((uint64_t)v11);
    if (a1)
    {
      v9 = (double)*(uint64_t *)&v11[0] / 86400000.0;
      v10 = *a1;
      if ((*(_WORD *)(v10 + 20) & 0x9000) != 0)
        sub_1ACBF2A54((int *)v10);
      *(double *)v10 = v9;
      *(_WORD *)(v10 + 20) = 8;
    }
    else
    {
      sub_1ACBBE20C(97379);
    }
  }
}

void sub_1ACC44250(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD v13[2];
  __int128 v14;

  v14 = 0u;
  memset(v13, 0, sizeof(v13));
  if (!sub_1ACBB4528(a1, a2, a3, (uint64_t)v13, a5, a6, a7, a8))
  {
    sub_1ACC4571C((uint64_t)v13);
    if (HIBYTE(v14))
    {
      if (a1)
      {
        v9 = (double)(*(_QWORD *)&v13[0] - 210866760000000) / 1000.0;
        v10 = *a1;
        if ((*(_WORD *)(v10 + 20) & 0x9000) != 0)
          sub_1ACBF2A54((int *)v10);
        *(double *)v10 = v9;
        *(_WORD *)(v10 + 20) = 8;
      }
      else
      {
        sub_1ACBBE20C(97379);
      }
    }
    else if (a1)
    {
      v11 = *(_QWORD *)&v13[0] / 1000 - 210866760000;
      v12 = *a1;
      if ((*(_WORD *)(*a1 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v12, v11);
      }
      else
      {
        *(_QWORD *)v12 = v11;
        *(_WORD *)(v12 + 20) = 4;
      }
    }
    else
    {
      sub_1ACBBE20C(97423);
    }
  }
}

void sub_1ACC4437C(_QWORD *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v9;
  char *v10;
  uint64_t v11;
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  char v16;
  _BYTE v17[9];
  __int16 v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v13 = 0u;
  if (!sub_1ACBB4528(a1, a2, a3, (uint64_t)&v13, a5, a6, a7, a8))
  {
    sub_1ACBB5C44((uint64_t)&v13);
    if ((SDWORD2(v13) & 0x80000000) == 0)
      v9 = DWORD2(v13);
    else
      v9 = -DWORD2(v13);
    v17[0] = (v9 / 0x3E8 - 10 * ((429496730 * (unint64_t)(v9 / 0x3E8)) >> 32)) | 0x30;
    v17[1] = (v9 / 0x64 - 10 * ((429496730 * (unint64_t)(v9 / 0x64)) >> 32)) | 0x30;
    v17[2] = (v9 / 0xA - 10 * ((429496730 * (unint64_t)(v9 / 0xA)) >> 32)) | 0x30;
    v17[3] = (v9 % 0xA) | 0x30;
    v17[4] = 45;
    v17[5] = SHIDWORD(v13) / 10
           - 10
           * (((unint64_t)(1717986919 * (SHIDWORD(v13) / 10)) >> 34) + (1717986919 * (SHIDWORD(v13) / 10) < 0))
           + 48;
    v17[6] = SHIDWORD(v13) % 10 + 48;
    v17[7] = 45;
    v17[8] = (int)v14 / 10 % 10 + 48;
    v18 = ((int)v14 % 10 + 48);
    if ((DWORD2(v13) & 0x80000000) != 0)
    {
      v16 = 45;
      if (a1)
      {
        v10 = &v16;
        v11 = (uint64_t)a1;
        v12 = 11;
        goto LABEL_10;
      }
    }
    else if (a1)
    {
      v10 = v17;
      v11 = (uint64_t)a1;
      v12 = 10;
LABEL_10:
      sub_1ACBC69D0(v11, v10, v12, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }
    sub_1ACBBE20C(97480);
  }
}

void sub_1ACC44554(_QWORD *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  __int16 v12;
  int v13;
  int v14;
  int v15;
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  char v21[16];
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v19 = 0u;
  v20 = 0u;
  v18 = 0u;
  if (!sub_1ACBB4528(a1, a2, a3, (uint64_t)&v18, a5, a6, a7, a8))
  {
    if (BYTE11(v20))
    {
      v10 = DWORD1(v19);
      v9 = DWORD2(v19);
    }
    else
    {
      sub_1ACC4571C((uint64_t)&v18);
      v11 = ((int)v18 + 43200000) % 86400000;
      *(double *)&v20 = (double)(v11 % 60000) / 1000.0;
      v12 = (34953 * (__int16)(v11 / 60000)) >> 16;
      v9 = (__int16)(v11 / 60000 - 60 * ((v12 >> 5) + ((unsigned __int16)(v12 & 0x8000) >> 15)));
      v10 = v11 / 3600000;
      DWORD1(v19) = v11 / 3600000;
      DWORD2(v19) = v9;
      BYTE9(v20) = 0;
      BYTE11(v20) = 1;
    }
    v21[0] = v10 / 10
           - 10 * (((unint64_t)(1717986919 * (v10 / 10)) >> 34) + (1717986919 * (v10 / 10) < 0))
           + 48;
    v21[1] = v10 % 10 + 48;
    v21[2] = 58;
    v21[3] = v9 / 10 % 10 + 48;
    v21[4] = v9 % 10 + 48;
    v21[5] = 58;
    if (HIBYTE(v20))
    {
      v13 = (int)(*(double *)&v20 * 1000.0 + 0.5);
      v14 = v13 / 10000;
      v15 = v13 / 1000;
      v21[9] = v13 / 100
             - 10 * (((unint64_t)(1717986919 * (v13 / 100)) >> 34) + (1717986919 * (v13 / 100) < 0))
             + 48;
      v21[10] = v13 / 10
              - 10 * (((unint64_t)(1717986919 * (v13 / 10)) >> 34) + (1717986919 * (v13 / 10) < 0))
              + 48;
      v21[11] = v13 % 10 + 48;
      v21[12] = 0;
      v16 = 12;
      v17 = 46;
    }
    else
    {
      v17 = 0;
      v15 = (int)*(double *)&v20;
      v14 = (int)*(double *)&v20 / 10;
      v16 = 8;
    }
    v21[6] = v14 - 10 * (((unint64_t)(1717986919 * v14) >> 34) + (1717986919 * v14 < 0)) + 48;
    v21[7] = v15 % 10 + 48;
    v21[8] = v17;
    if (a1)
      sub_1ACBC69D0((uint64_t)a1, v21, v16, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    else
      sub_1ACBBE20C(97480);
  }
}

void sub_1ACC4487C(_QWORD *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9;
  int v10;
  int v11;
  __int16 v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  char v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _BYTE v24[31];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v21 = 0u;
  v22 = 0u;
  v20 = 0u;
  if (!sub_1ACBB4528(a1, a2, a3, (uint64_t)&v20, a5, a6, a7, a8))
  {
    sub_1ACBB5C44((uint64_t)&v20);
    if (BYTE11(v22))
    {
      v10 = DWORD1(v21);
      v9 = DWORD2(v21);
    }
    else
    {
      sub_1ACC4571C((uint64_t)&v20);
      v11 = ((int)v20 + 43200000) % 86400000;
      *(double *)&v22 = (double)(v11 % 60000) / 1000.0;
      v12 = (34953 * (__int16)(v11 / 60000)) >> 16;
      v9 = (__int16)(v11 / 60000 - 60 * ((v12 >> 5) + ((unsigned __int16)(v12 & 0x8000) >> 15)));
      v10 = v11 / 3600000;
      DWORD1(v21) = v11 / 3600000;
      DWORD2(v21) = v9;
      BYTE9(v22) = 0;
      BYTE11(v22) = 1;
    }
    if ((SDWORD2(v20) & 0x80000000) == 0)
      v13 = DWORD2(v20);
    else
      v13 = -DWORD2(v20);
    v24[0] = (v13 / 0x3E8 - 10 * ((429496730 * (unint64_t)(v13 / 0x3E8)) >> 32)) | 0x30;
    v24[1] = (v13 / 0x64 - 10 * ((429496730 * (unint64_t)(v13 / 0x64)) >> 32)) | 0x30;
    v24[2] = (v13 / 0xA - 10 * ((429496730 * (unint64_t)(v13 / 0xA)) >> 32)) | 0x30;
    v24[3] = (v13 % 0xA) | 0x30;
    v24[4] = 45;
    v24[5] = SHIDWORD(v20) / 10
           - 10
           * (((unint64_t)(1717986919 * (SHIDWORD(v20) / 10)) >> 34) + (1717986919 * (SHIDWORD(v20) / 10) < 0))
           + 48;
    v24[6] = SHIDWORD(v20) % 10 + 48;
    v24[7] = 45;
    v24[8] = (int)v21 / 10
           - 10 * (((unint64_t)(1717986919 * ((int)v21 / 10)) >> 34) + (1717986919 * ((int)v21 / 10) < 0))
           + 48;
    v24[9] = (int)v21 % 10 + 48;
    v24[10] = 32;
    v24[11] = v10 / 10
            - 10 * (((unint64_t)(1717986919 * (v10 / 10)) >> 34) + (1717986919 * (v10 / 10) < 0))
            + 48;
    v24[12] = v10 % 10 + 48;
    v24[13] = 58;
    v24[14] = v9 / 10 % 10 + 48;
    v24[15] = v9 % 10 + 48;
    v24[16] = 58;
    if (HIBYTE(v22))
    {
      v14 = (int)(*(double *)&v22 * 1000.0 + 0.5);
      v15 = v14 / 10000;
      v16 = v14 / 1000;
      v24[20] = v14 / 100
              - 10 * (((unint64_t)(1717986919 * (v14 / 100)) >> 34) + (1717986919 * (v14 / 100) < 0))
              + 48;
      v24[21] = v14 / 10 % 10 + 48;
      v24[22] = v14 % 10 + 48;
      v24[23] = 0;
      v17 = 24;
      v18 = 46;
    }
    else
    {
      v18 = 0;
      v16 = (int)*(double *)&v22;
      v15 = (int)*(double *)&v22 / 10;
      v17 = 20;
    }
    v24[17] = v15 % 10 + 48;
    v24[18] = v16 % 10 + 48;
    v24[19] = v18;
    if ((DWORD2(v20) & 0x80000000) != 0)
    {
      v23 = 45;
      if (a1)
      {
        v19 = &v23;
        goto LABEL_16;
      }
    }
    else if (a1)
    {
      v19 = v24;
      --v17;
LABEL_16:
      sub_1ACBC69D0((uint64_t)a1, v19, v17, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }
    sub_1ACBBE20C(97480);
  }
}

void sub_1ACC44CD0(_DWORD *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  int v12;
  uint64_t v13;
  int v14;
  int v15;
  __int16 v16;
  unint64_t v17;
  unint64_t i;
  signed int v19;
  const void *v20;
  uint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  signed int v30;
  const void *v31;
  uint64_t v32;
  _BYTE v33[32];
  __int128 v34;
  _QWORD *v35;
  _QWORD *v36;
  unsigned int v37;
  int v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  if (a2)
  {
    v10 = *a3;
    if (*a3)
    {
      v41 = 0u;
      v42 = 0u;
      v40 = 0u;
      v39 = 0;
      v12 = *(unsigned __int16 *)(v10 + 20);
      if ((~v12 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
      {
        if ((v12 & 1) != 0)
          return;
        v13 = sub_1ACBF2B64((int *)v10, 1);
        if (!v13)
          return;
      }
      else
      {
        v13 = *(_QWORD *)(v10 + 8);
        if (!v13)
          return;
      }
      if (!sub_1ACBB4528(a1, a2 - 1, a3 + 1, (uint64_t)&v40, a5, a6, a7, a8))
      {
        if (!a1 || !*(_QWORD *)a1)
          sub_1ACCB4024();
        v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 24) + 136);
        v35 = 0;
        v36 = 0;
        v37 = 0;
        v38 = v14;
        LODWORD(v39) = 0;
        WORD2(v39) = 0;
        sub_1ACC4571C((uint64_t)&v40);
        sub_1ACBB5C44((uint64_t)&v40);
        if (!BYTE11(v42))
        {
          sub_1ACC4571C((uint64_t)&v40);
          v15 = ((uint64_t)v40 + 43200000) % 86400000;
          *(double *)&v42 = (double)(v15 % 60000) / 1000.0;
          v16 = (34953 * (__int16)(v15 / 60000)) >> 16;
          DWORD1(v41) = v15 / 3600000;
          DWORD2(v41) = (__int16)(v15 / 60000
                                - 60 * ((v16 >> 5) + ((unsigned __int16)(v16 & 0x8000) >> 15)));
          BYTE9(v42) = 0;
          BYTE11(v42) = 1;
        }
        v17 = 0;
        for (i = 0; ; ++i)
        {
          while (*(_BYTE *)(v13 + i) == 37)
          {
            v19 = i - v17;
            if (i > v17)
            {
              if (v19 <= 0)
              {
                if (v19)
                  sub_1ACBBE20C(32736);
              }
              else
              {
                v20 = (const void *)(v13 + v17);
                v21 = v39;
                if ((int)v39 + v19 >= v37)
                {
                  sub_1ACBC290C((uint64_t)&v35, v20, v19);
                }
                else
                {
                  LODWORD(v39) = v39 + v19;
                  memcpy((char *)v36 + v21, v20, (i - v17));
                }
              }
            }
            v22 = i + 1;
            v17 = i + 2;
            switch(*(_BYTE *)(v13 + i + 1))
            {
              case '%':
                if ((unint64_t)v39 + 1 >= v37)
                {
                  v23 = sub_1ACBC2594(&v35, 1);
                  if (v23 < 1)
                    goto LABEL_16;
                }
                else
                {
                  v23 = 1;
                }
                v26 = v23 + 1;
                do
                {
                  v27 = v39;
                  LODWORD(v39) = v39 + 1;
                  *((_BYTE *)v36 + v27) = 37;
                  --v26;
                }
                while (v26 > 1);
                goto LABEL_16;
              case 'H':
              case 'M':
              case 'S':
              case 'd':
              case 'm':
                goto LABEL_15;
              case 'J':
                sqlite3_str_appendf((sqlite3_str *)&v35, "%.16g");
                goto LABEL_16;
              case 'W':
              case 'j':
                *(_OWORD *)&v33[16] = v41;
                v34 = v42;
                *(_OWORD *)v33 = v40;
                BYTE8(v34) = 0;
                *(_QWORD *)&v33[12] = 0x100000001;
                sub_1ACC4571C((uint64_t)v33);
                if (*(_BYTE *)(v13 + v22) == 87)
LABEL_15:
                  sqlite3_str_appendf((sqlite3_str *)&v35, "%02d");
                else
                  sqlite3_str_appendf((sqlite3_str *)&v35, "%03d");
                goto LABEL_16;
              case 'Y':
                sqlite3_str_appendf((sqlite3_str *)&v35, "%04d");
                goto LABEL_16;
              case 'f':
                sqlite3_str_appendf((sqlite3_str *)&v35, "%06.3f");
                goto LABEL_16;
              case 's':
                if (HIBYTE(v42))
                  sqlite3_str_appendf((sqlite3_str *)&v35, "%.3f");
                else
                  sqlite3_str_appendf((sqlite3_str *)&v35, "%lld");
                goto LABEL_16;
              case 'w':
                v24 = v40;
                if ((unint64_t)v39 + 1 >= v37)
                {
                  v25 = sub_1ACBC2594(&v35, 1);
                  if (v25 < 1)
                    goto LABEL_16;
                }
                else
                {
                  v25 = 1;
                }
                v28 = v25 + 1;
                do
                {
                  v29 = v39;
                  LODWORD(v39) = v39 + 1;
                  *((_BYTE *)v36 + v29) = (int)((v24 + 129600000) / 86400000) % 7 + 48;
                  --v28;
                }
                while (v28 > 1);
LABEL_16:
                i = v22 + 1;
                break;
              default:
                if ((v39 & 0x40000000000) != 0 && v36)
                  sub_1ACBE0F9C(v35, v36);
                return;
            }
          }
          if (!*(_BYTE *)(v13 + i))
            break;
        }
        v30 = i - v17;
        if (i > v17)
        {
          if (v30 <= 0)
          {
            if (v30)
              sub_1ACBBE20C(32736);
          }
          else
          {
            v31 = (const void *)(v13 + v17);
            v32 = v39;
            if ((int)v39 + v30 >= v37)
            {
              sub_1ACBC290C((uint64_t)&v35, v31, v30);
            }
            else
            {
              LODWORD(v39) = v39 + v30;
              memcpy((char *)v36 + v32, v31, (i - v17));
            }
          }
        }
        sub_1ACC39204(a1, (uint64_t)&v35);
      }
    }
  }
}

void sub_1ACC4528C(_DWORD *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  uint64_t j;
  int v24;
  int v25;
  int v26;
  uint64_t i;
  int v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  double v34;
  int v35;
  __int16 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  v43 = 0u;
  v44 = 0u;
  v42 = 0u;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  v37 = 0u;
  if (!sub_1ACBB4528(a1, 1, a3, (uint64_t)&v42, a5, a6, a7, a8)
    && !sub_1ACBB4528(a1, 1, a3 + 1, (uint64_t)&v39, v10, v11, v12, v13))
  {
    sub_1ACBB5C44((uint64_t)&v42);
    if (!BYTE11(v44))
    {
      sub_1ACC4571C((uint64_t)&v42);
      v14 = ((uint64_t)v42 + 43200000) % 86400000;
      *(double *)&v44 = (double)(v14 % 60000) / 1000.0;
      v15 = (34953 * (__int16)(v14 / 60000)) >> 16;
      DWORD1(v43) = v14 / 3600000;
      DWORD2(v43) = (__int16)(v14 / 60000 - 60 * ((v15 >> 5) + ((unsigned __int16)(v15 & 0x8000) >> 15)));
      BYTE9(v44) = 0;
      BYTE11(v44) = 1;
    }
    sub_1ACBB5C44((uint64_t)&v39);
    if (BYTE11(v41))
    {
      v16 = v39;
    }
    else
    {
      sub_1ACC4571C((uint64_t)&v39);
      v16 = v39;
      v17 = ((uint64_t)v39 + 43200000) % 86400000;
      *(double *)&v41 = (double)(v17 % 60000) / 1000.0;
      v18 = (34953 * (__int16)(v17 / 60000)) >> 16;
      DWORD1(v40) = v17 / 3600000;
      DWORD2(v40) = (__int16)(v17 / 60000 - 60 * ((v18 >> 5) + ((unsigned __int16)(v18 & 0x8000) >> 15)));
      BYTE9(v41) = 0;
      BYTE11(v41) = 1;
    }
    v19 = v42;
    if ((uint64_t)v42 >= v16)
    {
      v26 = DWORD2(v42) - DWORD2(v39);
      if (DWORD2(v42) != DWORD2(v39))
      {
        DWORD2(v39) = DWORD2(v42);
        BYTE8(v41) = 0;
        sub_1ACC4571C((uint64_t)&v39);
      }
      v21 = v26 + ((HIDWORD(v42) - HIDWORD(v39)) >> 31);
      if (SHIDWORD(v42) >= SHIDWORD(v39))
        v22 = HIDWORD(v42) - HIDWORD(v39);
      else
        v22 = HIDWORD(v42) - HIDWORD(v39) + 12;
      if (v22)
      {
        HIDWORD(v39) = HIDWORD(v42);
        BYTE8(v41) = 0;
        sub_1ACC4571C((uint64_t)&v39);
      }
      for (i = v39; v19 < (uint64_t)v39; i = v39)
      {
        v28 = v22 < 1;
        if (v22 >= 1)
          --v22;
        else
          v22 = 11;
        if (HIDWORD(v39)-- <= 1)
        {
          --DWORD2(v39);
          HIDWORD(v39) = 12;
        }
        v21 -= v28;
        BYTE8(v41) = 0;
        sub_1ACC4571C((uint64_t)&v39);
      }
      v30 = v19 - i;
      v31 = 43;
    }
    else
    {
      v20 = DWORD2(v39) - DWORD2(v42);
      if (DWORD2(v39) != DWORD2(v42))
      {
        DWORD2(v39) = DWORD2(v42);
        BYTE8(v41) = 0;
        sub_1ACC4571C((uint64_t)&v39);
      }
      v21 = v20 + ((HIDWORD(v39) - HIDWORD(v42)) >> 31);
      if (SHIDWORD(v39) >= SHIDWORD(v42))
        v22 = HIDWORD(v39) - HIDWORD(v42);
      else
        v22 = HIDWORD(v39) - HIDWORD(v42) + 12;
      if (v22)
      {
        HIDWORD(v39) = HIDWORD(v42);
        BYTE8(v41) = 0;
        sub_1ACC4571C((uint64_t)&v39);
      }
      for (j = v39; v19 > (uint64_t)v39; j = v39)
      {
        v24 = v22 < 1;
        if (v22 >= 1)
          --v22;
        else
          v22 = 11;
        v25 = HIDWORD(v39)++;
        if (v25 >= 12)
        {
          ++DWORD2(v39);
          HIDWORD(v39) = 1;
        }
        v21 -= v24;
        BYTE8(v41) = 0;
        sub_1ACC4571C((uint64_t)&v39);
      }
      v30 = j - v19;
      v31 = 45;
    }
    *(_QWORD *)&v42 = v30 + 148699540800000;
    WORD5(v44) = 0;
    BYTE12(v44) = 0;
    sub_1ACBB5C44((uint64_t)&v42);
    if (BYTE11(v44))
    {
      v32 = DWORD1(v43);
      v33 = DWORD2(v43);
      v34 = *(double *)&v44;
    }
    else
    {
      sub_1ACC4571C((uint64_t)&v42);
      v35 = ((uint64_t)v42 + 43200000) % 86400000;
      v34 = (double)(v35 % 60000) / 1000.0;
      *(double *)&v44 = v34;
      v36 = (34953 * (__int16)(v35 / 60000)) >> 16;
      v33 = (__int16)(v35 / 60000 - 60 * ((v36 >> 5) + ((unsigned __int16)(v36 & 0x8000) >> 15)));
      v32 = v35 / 3600000;
      *(_QWORD *)((char *)&v43 + 4) = __PAIR64__(v33, v32);
      BYTE9(v44) = 0;
      BYTE11(v44) = 1;
    }
    v37 = 0uLL;
    LODWORD(v38) = 0;
    *(_QWORD *)((char *)&v38 + 4) = 100;
    WORD6(v38) = 0;
    sqlite3_str_appendf((sqlite3_str *)&v37, "%c%04d-%02d-%02d %02d:%02d:%06.3f", v31, v21, v22, (_DWORD)v43 - 1, v32, v33, v34);
    sub_1ACC39204(a1, (uint64_t)&v37);
  }
}

void sub_1ACC45704(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACC44554(a1, 0, 0, a4, a5, a6, a7, a8);
}

void sub_1ACC45710(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1ACC4437C(a1, 0, 0, a4, a5, a6, a7, a8);
}

double sub_1ACC4571C(uint64_t a1)
{
  int v1;
  int v2;
  int v3;
  _BOOL4 v4;
  int v5;
  double result;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a1 + 40))
    return result;
  if (*(_BYTE *)(a1 + 42))
  {
    v1 = *(_DWORD *)(a1 + 8);
    if ((v1 - 10000) >= 0xFFFFC687)
    {
      v3 = *(_DWORD *)(a1 + 12);
      v2 = *(_DWORD *)(a1 + 16);
      if (!*(_BYTE *)(a1 + 41))
        goto LABEL_6;
    }
LABEL_12:
    result = 0.0;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_BYTE *)(a1 + 46) = 1;
    return result;
  }
  v1 = 2000;
  v2 = 1;
  v3 = 1;
  if (*(_BYTE *)(a1 + 41))
    goto LABEL_12;
LABEL_6:
  v4 = v3 < 3;
  if (v3 < 3)
    v3 += 12;
  v5 = v1 - v4;
  result = ((double)(int)(((-5243 * (__int16)v5) >> 19)
                        + ((-5243 * (__int16)v5) >> 31)
                        + (306001 * v3 + 306001) / 10000
                        + v2
                        + (36525 * v5 + 172251900) / 0x64u
                        + ((5243 * (__int16)v5) >> 21)
                        + ((5243 * (__int16)v5) >> 31)
                        + 2)
          + -1524.5)
         * 86400000.0;
  v7 = (uint64_t)result;
  *(_QWORD *)a1 = (uint64_t)result;
  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 43))
  {
    result = *(double *)(a1 + 32) * 1000.0 + 0.5;
    v8 = (uint64_t)result + 3600000 * *(int *)(a1 + 20) + 60000 * *(int *)(a1 + 24) + v7;
    *(_QWORD *)a1 = v8;
    if (*(_BYTE *)(a1 + 44))
    {
      *(_QWORD *)a1 = v8 - 60000 * *(int *)(a1 + 28);
      *(_WORD *)(a1 + 42) = 0;
      *(_BYTE *)(a1 + 44) = 0;
    }
  }
  return result;
}

uint64_t sub_1ACC458B0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  __int16 v5;
  const char *v6;
  const char *v7;
  char *v8;
  void (**v9)(char *);

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 136);
  v2 = *(_DWORD *)(a1 + 32);
  v3 = 1;
  if (*(_BYTE *)(v1 + 40 * v2) == 65)
  {
    v5 = *(_WORD *)(v1 + 40 * v2 + 2);
    v6 = "a generated column";
    if ((v5 & 8) == 0)
      v6 = "an index";
    if ((v5 & 4) != 0)
      v7 = "a CHECK constraint";
    else
      v7 = v6;
    v8 = sqlite3_mprintf("non-deterministic use of %s() in %s", *(const char **)(*(_QWORD *)(a1 + 8) + 56), v7);
    *(_DWORD *)(a1 + 36) = 1;
    sub_1ACB57870(*(_QWORD *)a1, v8, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v8)
      return 0;
    v9 = (void (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v8);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v8);
      v8 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return 0;
      v9 = (void (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v9)(v8);
    return 0;
  }
  return v3;
}

uint64_t sub_1ACC459F8(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  double v17;
  char v18;
  unsigned __int8 *v19;
  unsigned int v20;
  double v21;
  double v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  uint64_t result;
  int v31;
  uint64_t v32;
  int v33;
  int v34;

  v32 = 0;
  v31 = 0;
  if (sub_1ACC45BE0(a1, "20c:20e", a3, a4, a5, a6, a7, a8, (char)&v32 + 4) != 2)
    return 1;
  v16 = a1 + 5;
  if (a1[5] == 58)
  {
    if (sub_1ACC45BE0(a1 + 6, "20e", v10, v11, v12, v13, v14, v15, (char)&v31) != 1)
      return 1;
    v16 = a1 + 8;
    v17 = 0.0;
    if (a1[8] == 46)
    {
      v20 = a1[9];
      v19 = a1 + 9;
      v18 = v20;
      if ((unint64_t)v20 - 58 >= 0xFFFFFFFFFFFFFFF6)
      {
        v21 = 0.0;
        v22 = 1.0;
        v16 = v19;
        do
        {
          v21 = (double)v18 + v21 * 10.0 + -48.0;
          v22 = v22 * 10.0;
          v23 = *++v16;
          v18 = v23;
        }
        while ((unint64_t)v23 - 58 > 0xFFFFFFFFFFFFFFF5);
        v17 = v21 / v22;
      }
    }
  }
  else
  {
    v31 = 0;
    v17 = 0.0;
  }
  *(_WORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 43) = 1;
  v24 = v32;
  *(_DWORD *)(a2 + 20) = HIDWORD(v32);
  *(_DWORD *)(a2 + 24) = v24;
  *(double *)(a2 + 32) = v17 + (double)v31;
  do
    v25 = *v16++;
  while ((byte_1ACCB6548[v25] & 1) != 0);
  v34 = 0;
  v33 = 0;
  *(_DWORD *)(a2 + 28) = 0;
  v26 = *(v16 - 1);
  if (v26 == 45)
  {
    v27 = -1;
  }
  else
  {
    if (v26 != 43)
    {
      v28 = 0;
      if ((v26 & 0xFFFFFFDF) != 0x5A)
        goto LABEL_21;
      goto LABEL_19;
    }
    v27 = 1;
  }
  if (sub_1ACC45BE0(v16, "20b:20e", v10, v11, v12, v13, v14, v15, (char)&v34) != 2)
    return 1;
  v16 += 5;
  v28 = (v33 + 60 * v34) * v27;
  *(_DWORD *)(a2 + 28) = v28;
  do
LABEL_19:
    v29 = *v16++;
  while ((byte_1ACCB6548[v29] & 1) != 0);
  *(_BYTE *)(a2 + 45) = 1;
  v26 = *(v16 - 1);
LABEL_21:
  if (!v26)
  {
    result = 0;
    *(_BYTE *)(a2 + 44) = v28 != 0;
    return result;
  }
  return 1;
}

uint64_t sub_1ACC45BE0(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t result;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int **v18;
  int **v19;

  result = 0;
  v19 = (int **)&a9;
  while (1)
  {
    v11 = *a2;
    if (v11 != 48)
      break;
    v12 = 0;
LABEL_9:
    if (v12 < (char)(a2[1] - 48) || v12 > word_1ACCBA7B8[(char)a2[2] - 97])
      return result;
    if (!a2[3])
    {
      **v19 = v12;
      return (result + 1);
    }
    if (a2[3] != *a1)
      return result;
    v18 = v19++;
    **v18 = v12;
    ++a1;
    result = (result + 1);
    a2 += 4;
  }
  v12 = 0;
  v13 = v11 - 49;
  v14 = (uint64_t)&a1[v13 + 1];
  while (1)
  {
    v15 = *a1;
    if ((unint64_t)(v15 - 58) < 0xFFFFFFFFFFFFFFF6)
      return result;
    v12 = (char)v15 + 10 * v12 - 48;
    ++a1;
    if (v13-- == 0)
    {
      a1 = (unsigned __int8 *)v14;
      goto LABEL_9;
    }
  }
}

uint64_t sub_1ACC45CD0(uint64_t a1, uint64_t a2)
{
  __n128 v4;
  __int128 v5;
  int v6;
  __int16 v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  tm v19;
  time_t v20;

  memset(&v19, 0, sizeof(v19));
  v4.n128_f64[0] = sub_1ACC4571C(a1);
  if ((unint64_t)(*(_QWORD *)a1 - 0xC1BC387B0A01) > 0xFFFFFE0C05D817FELL)
  {
    v20 = *(_QWORD *)a1 / 0x3E8uLL - 210866760000;
    v11 = 1900;
  }
  else
  {
    v5 = *(_OWORD *)(a1 + 16);
    v16 = *(_OWORD *)a1;
    v17 = v5;
    v18 = *(_OWORD *)(a1 + 32);
    sub_1ACBB5C44((uint64_t)&v16);
    if (!BYTE11(v18))
    {
      sub_1ACC4571C((uint64_t)&v16);
      v6 = ((int)v16 + 43200000) % 86400000;
      *(double *)&v18 = (double)(v6 % 60000) / 1000.0;
      v7 = (34953 * (__int16)(v6 / 60000)) >> 16;
      DWORD1(v17) = v6 / 3600000;
      DWORD2(v17) = (__int16)(v6 / 60000 - 60 * ((v7 >> 5) + ((unsigned __int16)(v7 & 0x8000) >> 15)));
      BYTE9(v18) = 0;
      BYTE11(v18) = 1;
    }
    if (SDWORD2(v16) <= 0)
      v8 = -(-DWORD2(v16) & 3);
    else
      v8 = BYTE8(v16) & 3;
    v9 = v8 + 2000;
    v10 = DWORD2(v16) - v9;
    DWORD2(v16) = v9;
    BYTE8(v18) = 0;
    v4.n128_f64[0] = sub_1ACC4571C((uint64_t)&v16);
    v20 = (uint64_t)v16 / 1000 - 210866760000;
    v11 = v10 + 1900;
  }
  if (dword_1ECD3B2E8)
  {
    if (off_1ECD3B2F0 && !off_1ECD3B2F0(&v20, &v19, v4))
      goto LABEL_12;
  }
  else if (localtime_r(&v20, &v19))
  {
LABEL_12:
    v12 = 0;
    v13 = *(_QWORD *)a1 % 1000;
    v14 = v19.tm_mon + 1;
    *(_DWORD *)(a1 + 8) = v11 + v19.tm_year;
    *(_DWORD *)(a1 + 12) = v14;
    *(int32x2_t *)(a1 + 16) = vrev64_s32(*(int32x2_t *)&v19.tm_hour);
    *(_DWORD *)(a1 + 24) = v19.tm_min;
    *(double *)(a1 + 32) = (double)v19.tm_sec + (double)v13 * 0.001;
    *(_DWORD *)(a1 + 40) = 16842752;
    *(_BYTE *)(a1 + 44) = 0;
    *(_BYTE *)(a1 + 46) = 0;
    return v12;
  }
  if (a2)
  {
    v12 = 1;
    *(_DWORD *)(a2 + 36) = 1;
    sub_1ACB57870(*(_QWORD *)a2, "local time unavailable", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1ACBBE20C(97389);
    return 1;
  }
  return v12;
}

void sub_1ACC45FBC(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  if (a2 >= 1)
  {
    v6 = sub_1ACC47E3C((uint64_t)a1, *a3, a1, a2 != 1);
    if (v6)
    {
      v7 = v6;
      if (a2 < 2)
      {
LABEL_16:
        v14 = *(_QWORD *)(v7 + 8);
        if ((*(_BYTE *)(v14 + 1) & 4) == 0)
          sub_1ACC484DC(v7, v14, a1, 1);
      }
      else
      {
        v8 = a3 + 1;
        v9 = a2 - 1;
        while (1)
        {
          v10 = *v8;
          if (!*v8)
            break;
          v11 = *(unsigned __int16 *)(v10 + 20);
          if ((~v11 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
          {
            if ((v11 & 1) != 0)
              return;
            v12 = (char *)sub_1ACBF2B64((int *)v10, 1);
          }
          else
          {
            v12 = *(char **)(v10 + 8);
          }
          if (!v12)
            break;
          v13 = sub_1ACC48390(v7, v12, 0, (uint64_t)a1);
          if (*(_BYTE *)(v7 + 50))
            break;
          if (v13)
          {
            *(_BYTE *)(v13 + 1) |= 4u;
            *(_WORD *)(v7 + 54) = 257;
          }
          ++v8;
          if (!--v9)
            goto LABEL_16;
        }
      }
    }
  }
}

void sub_1ACC460D4(_QWORD *a1, int a2, uint64_t *a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  __int128 v11;
  _OWORD v12[6];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v9 = a1;
  v10 = (char *)v12 + 2;
  v4 = 1;
  LOBYTE(v12[0]) = 1;
  v11 = xmmword_1ACCBDE00;
  BYTE2(v12[0]) = 91;
  if (a2 < 1)
    goto LABEL_10;
  v6 = a2;
  v4 = 1;
  do
  {
    if (v4 && (v10[v4 - 1] & 0xDF) != 0x5B)
    {
      if (v4 < (unint64_t)v11)
      {
        *((_QWORD *)&v11 + 1) = v4 + 1;
        v10[v4] = 44;
      }
      else
      {
        sub_1ACC4B3BC((uint64_t)&v9, 44);
      }
    }
    v7 = *a3++;
    sub_1ACC4B4D4(&v9, v7);
    v4 = *((_QWORD *)&v11 + 1);
    --v6;
  }
  while (v6);
  if (*((_QWORD *)&v11 + 1) >= (unint64_t)v11)
  {
    sub_1ACC4B3BC((uint64_t)&v9, 93);
  }
  else
  {
LABEL_10:
    *((_QWORD *)&v11 + 1) = v4 + 1;
    v10[v4] = 93;
  }
  sub_1ACC4AC7C((uint64_t)&v9);
  if (a1)
  {
    v8 = *a1;
    *(_BYTE *)(v8 + 23) = 74;
    *(_WORD *)(v8 + 20) |= 0x800u;
  }
  else
  {
    sub_1ACBBE20C(97463);
  }
}

void sub_1ACC46244(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int i;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;

  v6 = sub_1ACC47E3C((uint64_t)a1, *a3, a1, 0);
  if (!v6)
    return;
  v7 = v6;
  if (a2 != 2)
  {
    v11 = *(_QWORD *)(v6 + 8);
    if (!v11)
      return;
    goto LABEL_13;
  }
  v8 = a3[1];
  if (!v8)
    goto LABEL_11;
  v9 = *(unsigned __int16 *)(v8 + 20);
  if ((~v9 & 0x202) == 0 && *(_BYTE *)(v8 + 22) == 1)
  {
    v10 = *(char **)(v8 + 8);
    goto LABEL_12;
  }
  if ((v9 & 1) != 0)
LABEL_11:
    v10 = 0;
  else
    v10 = (char *)sub_1ACBF2B64((int *)v8, 1);
LABEL_12:
  v11 = sub_1ACC48390(v7, v10, 0, (uint64_t)a1);
  if (!v11)
    return;
LABEL_13:
  if (*(_BYTE *)v11 == 7)
  {
    v12 = 0;
    v13 = *(_DWORD *)(v11 + 4);
    if (!v13)
      goto LABEL_22;
LABEL_15:
    for (i = 1; i <= v13; i = v15 + v16)
    {
      v16 = i;
      v17 = (unsigned __int8 *)(v11 + 16 * i);
      if ((v17[1] & 4) == 0)
        ++v12;
      if (*v17 >= 7u)
        v15 = *(_DWORD *)(v11 + 16 * v16 + 4) + 1;
      else
        v15 = 1;
    }
LABEL_22:
    while ((*(_BYTE *)(v11 + 1) & 0x10) != 0 && *(_BYTE *)(v7 + 54))
    {
      v11 = *(_QWORD *)(v7 + 8) + 16 * *(unsigned int *)(v11 + 8);
      v13 = *(_DWORD *)(v11 + 4);
      if (v13)
        goto LABEL_15;
    }
  }
  else
  {
    v12 = 0;
  }
  if (a1)
  {
    v18 = *(_QWORD *)a1;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v18, v12);
    }
    else
    {
      *(_QWORD *)v18 = v12;
      *(_WORD *)(v18 + 20) = 4;
    }
  }
  else
  {
    sub_1ACBBE20C(97423);
  }
}

void sub_1ACC463CC(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(uint64_t);
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  int v15;
  uint64_t v16;
  unsigned int v17;

  v5 = *a3;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v5 + 20)) & 1) != 0)
      return;
  }
  else
  {
    sub_1ACBBE20C(97202);
    v5 = *a3;
  }
  v6 = sub_1ACC47E3C((uint64_t)a1, v5, 0, 0);
  if (!v6)
  {
    sqlite3_result_error_nomem(a1);
    return;
  }
  v7 = v6;
  if (!*(_BYTE *)(v6 + 51))
  {
    if (!*(_BYTE *)(v6 + 50))
    {
      if (a1)
      {
        v11 = *(_QWORD *)a1;
        if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v11, 0);
        }
        else
        {
          *(_QWORD *)v11 = 0;
          *(_WORD *)(v11 + 20) = 4;
        }
      }
      else
      {
        sub_1ACBBE20C(97413);
      }
      return;
    }
    v9 = (int *)*a3;
    if (*a3)
    {
      v10 = *((unsigned __int16 *)v9 + 10);
      if ((~v10 & 0x202) != 0 || *((_BYTE *)v9 + 22) != 1)
      {
        if ((v10 & 1) != 0)
          v9 = 0;
        else
          v9 = (int *)sub_1ACBF2B64(v9, 1);
      }
      else
      {
        v9 = (int *)*((_QWORD *)v9 + 1);
      }
    }
    v12 = *(unsigned int *)(v7 + 68);
    if ((_DWORD)v12)
    {
      v13 = 1;
      do
      {
        v15 = *(unsigned __int8 *)v9;
        v9 = (int *)((char *)v9 + 1);
        v14 = v15;
        if (!v15)
          break;
        if ((v14 & 0xC0) != 0x80)
          ++v13;
        --v12;
      }
      while (v12);
      if (a1)
        goto LABEL_33;
    }
    else
    {
      v13 = 1;
      if (a1)
      {
LABEL_33:
        v16 = *(_QWORD *)a1;
        if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v16, v13);
        }
        else
        {
          *(_QWORD *)v16 = v13;
          *(_WORD *)(v16 + 20) = 4;
        }
        goto LABEL_38;
      }
    }
    sub_1ACBBE20C(97413);
LABEL_38:
    v17 = *(_DWORD *)(v7 + 56);
    if (v17 >= 2)
    {
      *(_DWORD *)(v7 + 56) = v17 - 1;
      return;
    }
    sub_1ACC49638(v7);
    goto LABEL_8;
  }
  sqlite3_result_error_nomem(a1);
LABEL_8:
  v8 = (void (**)(uint64_t))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_13:
    (*v8)(v7);
    return;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v7);
  v7 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v8 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    goto LABEL_13;
  }
}

void sub_1ACC46618(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t (**v27)(_QWORD);
  uint64_t v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  size_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t (**v36)(_QWORD);
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _OWORD v40[6];
  uint64_t v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (a1 && (v6 = *((_QWORD *)a1 + 1)) != 0)
  {
    v7 = *(_QWORD *)(v6 + 8);
  }
  else
  {
    sub_1ACBBE20C(97914);
    LOBYTE(v7) = 0;
  }
  v41 = 0;
  memset(v40, 0, sizeof(v40));
  v38 = 0u;
  v39 = 0u;
  if (a2 < 2)
    return;
  v8 = sub_1ACC47E3C((uint64_t)a1, *a3, a1, 0);
  if (!v8)
    return;
  v9 = v8;
  if (a2 == 2)
  {
    v10 = a3[1];
    if (!v10)
      return;
    v11 = *(unsigned __int16 *)(v10 + 20);
    if ((~v11 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
    {
      if ((v11 & 1) != 0)
        return;
      v12 = (char *)sub_1ACBF2B64((int *)v10, 1);
    }
    else
    {
      v12 = *(char **)(v10 + 8);
    }
    if (!v12)
      return;
    if ((v7 & 3) == 0)
    {
      v32 = sub_1ACC48390(v9, v12, 0, (uint64_t)a1);
      if (!*(_BYTE *)(v9 + 50) && v32)
        sub_1ACC4B8B0(v9, v32, a1);
      return;
    }
    if (*v12 == 36)
    {
      v22 = v12[1];
      if (!v12[1] || v22 == 46 || v22 == 91)
      {
        v23 = sub_1ACC48390(v9, v12, 0, (uint64_t)a1);
        goto LABEL_82;
      }
    }
    *(_QWORD *)&v38 = a1;
    *((_QWORD *)&v38 + 1) = (char *)v40 + 2;
    v39 = xmmword_1ACCBDE10;
    LOWORD(v40[0]) = 1;
    v28 = *v12;
    if ((unint64_t)(v28 - 58) >= 0xFFFFFFFFFFFFFFF6)
    {
      sub_1ACC4AE24(&v38, "$[", 2uLL);
      v33 = strlen(v12);
      sub_1ACC4AE80(&v38, v12, v33);
      sub_1ACC4AE24(&v38, "]", 2uLL);
    }
    else
    {
      if ((_DWORD)v28 == 91)
        v29 = 1;
      else
        v29 = 2;
      sub_1ACC4AE24(&v38, "$.", v29);
      v30 = strlen(v12);
      sub_1ACC4AE80(&v38, v12, v30);
      v31 = *((_QWORD *)&v39 + 1);
      if (*((_QWORD *)&v39 + 1) >= (unint64_t)v39)
      {
        sub_1ACC4B3BC((uint64_t)&v38, 0);
      }
      else
      {
        ++*((_QWORD *)&v39 + 1);
        *(_BYTE *)(*((_QWORD *)&v38 + 1) + v31) = 0;
      }
    }
    if (BYTE1(v40[0]))
      v23 = 0;
    else
      v23 = sub_1ACC48390(v9, *((char **)&v38 + 1), 0, (uint64_t)a1);
    if (!LOBYTE(v40[0]))
    {
      v35 = (_QWORD *)(*((_QWORD *)&v38 + 1) - 8);
      v34 = *(_QWORD *)(*((_QWORD *)&v38 + 1) - 8);
      if (v34 < 2)
      {
        v36 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v35);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v35);
          v35 = (_QWORD *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_81;
          v36 = &xmmword_1ECD3B1D0;
        }
        (*v36)(v35);
      }
      else
      {
        *v35 = v34 - 1;
      }
    }
LABEL_81:
    *((_QWORD *)&v38 + 1) = (char *)v40 + 2;
    v39 = xmmword_1ACCBDE10;
    LOBYTE(v40[0]) = 1;
LABEL_82:
    if (v23)
    {
      if ((v7 & 1) != 0)
      {
        sub_1ACC484DC(v9, v23, a1, 0);
      }
      else
      {
        sub_1ACC4B8B0(v9, v23, a1);
        if (a1)
        {
          v37 = *(_QWORD *)a1;
          *(_BYTE *)(v37 + 23) = 0;
          *(_WORD *)(v37 + 20) |= 0x800u;
        }
        else
        {
          sub_1ACBBE20C(97463);
        }
      }
    }
    return;
  }
  *(_QWORD *)&v38 = a1;
  *((_QWORD *)&v38 + 1) = (char *)v40 + 2;
  LOWORD(v40[0]) = 1;
  v39 = xmmword_1ACCBDE00;
  BYTE2(v40[0]) = 91;
  v13 = a2 - 1;
  v14 = a3 + 1;
  while (1)
  {
    v15 = *v14;
    if (!*v14)
      goto LABEL_23;
    v16 = *(unsigned __int16 *)(v15 + 20);
    if ((~v16 & 0x202) == 0 && *(_BYTE *)(v15 + 22) == 1)
    {
      v17 = *(char **)(v15 + 8);
      goto LABEL_24;
    }
    if ((v16 & 1) != 0)
LABEL_23:
      v17 = 0;
    else
      v17 = (char *)sub_1ACBF2B64((int *)v15, 1);
LABEL_24:
    v18 = sub_1ACC48390(v9, v17, 0, (uint64_t)a1);
    if (*(_BYTE *)(v9 + 50))
      break;
    v19 = v18;
    v20 = *((_QWORD *)&v39 + 1);
    if (*((_QWORD *)&v39 + 1) && (*(_BYTE *)(*((_QWORD *)&v39 + 1) + *((_QWORD *)&v38 + 1) - 1) & 0xDF) != 0x5B)
    {
      if (*((_QWORD *)&v39 + 1) < (unint64_t)v39)
      {
        ++*((_QWORD *)&v39 + 1);
        *(_BYTE *)(*((_QWORD *)&v38 + 1) + v20) = 44;
      }
      else
      {
        sub_1ACC4B3BC((uint64_t)&v38, 44);
      }
    }
    if (v19)
    {
      sub_1ACC4A174(v9, v19, &v38);
    }
    else if (*((_QWORD *)&v39 + 1) + 4 >= (unint64_t)v39)
    {
      sub_1ACC4B11C((uint64_t)&v38, "null", 4u);
    }
    else
    {
      *(_DWORD *)(*((_QWORD *)&v38 + 1) + *((_QWORD *)&v39 + 1)) = 1819047278;
      *((_QWORD *)&v39 + 1) += 4;
    }
    ++v14;
    if (!--v13)
      goto LABEL_33;
  }
  if ((_DWORD)v13)
    goto LABEL_47;
LABEL_33:
  v21 = *((_QWORD *)&v39 + 1);
  if (*((_QWORD *)&v39 + 1) >= (unint64_t)v39)
  {
    sub_1ACC4B3BC((uint64_t)&v38, 93);
  }
  else
  {
    ++*((_QWORD *)&v39 + 1);
    *(_BYTE *)(*((_QWORD *)&v38 + 1) + v21) = 93;
  }
  sub_1ACC4AC7C((uint64_t)&v38);
  if (a1)
  {
    v24 = *(_QWORD *)a1;
    *(_BYTE *)(v24 + 23) = 74;
    *(_WORD *)(v24 + 20) |= 0x800u;
LABEL_47:
    if (LOBYTE(v40[0]))
      return;
    goto LABEL_50;
  }
  sub_1ACBBE20C(97463);
  if (LOBYTE(v40[0]))
    return;
LABEL_50:
  v26 = (_QWORD *)(*((_QWORD *)&v38 + 1) - 8);
  v25 = *(_QWORD *)(*((_QWORD *)&v38 + 1) - 8);
  if (v25 >= 2)
  {
    *v26 = v25 - 1;
    return;
  }
  v27 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v26);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v26);
    v26 = (_QWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v27 = &xmmword_1ECD3B1D0;
      goto LABEL_57;
    }
  }
  else
  {
LABEL_57:
    (*v27)(v26);
  }
}

void sub_1ACC46C54(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL4 v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  void (**v19)(uint64_t);
  int v20;

  if (a1 && (v6 = *((_QWORD *)a1 + 1)) != 0)
  {
    v7 = *(_QWORD *)(v6 + 8) != 0;
    if (a2 < 1)
      return;
  }
  else
  {
    sub_1ACBBE20C(97914);
    v7 = 0;
    if (a2 < 1)
      return;
  }
  if ((a2 & 1) == 0)
  {
    if (v7)
      v8 = "set";
    else
      v8 = "insert";
    sub_1ACC4C100((uint64_t)a1, v8);
    return;
  }
  v9 = sub_1ACC47E3C((uint64_t)a1, *a3, a1, a2 > 1);
  if (!v9)
    return;
  v10 = v9;
  v20 = 0;
  ++*(_DWORD *)(v9 + 56);
  if (a2 < 2)
  {
LABEL_30:
    sub_1ACC484DC(v10, *(_QWORD *)(v10 + 8), a1, 1);
    goto LABEL_32;
  }
  v11 = 0;
  while (1)
  {
    v13 = a3[v11 + 1];
    if (!v13)
      goto LABEL_21;
    v14 = *(unsigned __int16 *)(v13 + 20);
    if ((~v14 & 0x202) == 0 && *(_BYTE *)(v13 + 22) == 1)
    {
      v15 = *(char **)(v13 + 8);
      goto LABEL_22;
    }
    if ((v14 & 1) != 0)
LABEL_21:
      v15 = 0;
    else
      v15 = (char *)sub_1ACBF2B64((int *)v13, 1);
LABEL_22:
    v20 = 0;
    *(_BYTE *)(v10 + 54) = 1;
    v16 = sub_1ACC48390(v10, v15, &v20, (uint64_t)a1);
    if (*(_BYTE *)(v10 + 51))
      break;
    if (*(_BYTE *)(v10 + 50))
      goto LABEL_32;
    if (v16)
    {
      v17 = v20 || v7;
      if (v17 == 1)
        sub_1ACC4C20C((uint64_t)a1, (unsigned int *)v10, (unint64_t)(v16 - *(_QWORD *)(v10 + 8)) >> 4, a3[v11 + 2]);
    }
    v12 = v11 + 3;
    v11 += 2;
    if (v12 >= a2)
      goto LABEL_30;
  }
  sqlite3_result_error_nomem(a1);
LABEL_32:
  v18 = *(_DWORD *)(v10 + 56);
  if (v18 >= 2)
  {
    *(_DWORD *)(v10 + 56) = v18 - 1;
    return;
  }
  sub_1ACC49638(v10);
  v19 = (void (**)(uint64_t))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v10);
    v10 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v19 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
      goto LABEL_39;
    }
  }
  else
  {
LABEL_39:
    (*v19)(v10);
  }
}

void sub_1ACC46ED4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  __int16 v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t (**v19)(char *);
  uint64_t v20;
  char *v21;
  __int128 v22;
  _OWORD v23[6];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) != 0)
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_1ACB57870(*(_QWORD *)a1, "json_object() requires an even number of arguments", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      sub_1ACBBE20C(97389);
    }
    return;
  }
  v24 = 0;
  memset(v23, 0, sizeof(v23));
  v20 = a1;
  v21 = (char *)v23 + 2;
  v5 = 1;
  LOBYTE(v23[0]) = 1;
  v22 = xmmword_1ACCBDE00;
  BYTE2(v23[0]) = 123;
  if (a2 < 1)
  {
LABEL_43:
    *((_QWORD *)&v22 + 1) = v5 + 1;
    v21[v5] = 125;
    goto LABEL_44;
  }
  v7 = 0;
  do
  {
    v8 = *(_QWORD *)(a3 + 8 * v7);
    if (!v8)
    {
      sub_1ACBBE20C(97202);
LABEL_39:
      if (a1)
      {
        *(_DWORD *)(a1 + 36) = 1;
        sub_1ACB57870(*(_QWORD *)a1, "json_object() labels must be TEXT", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
        if (LOBYTE(v23[0]))
          return;
      }
      else
      {
        sub_1ACBBE20C(97389);
        if (LOBYTE(v23[0]))
          return;
      }
      v18 = v21 - 8;
      v17 = *((_QWORD *)v21 - 1);
      if (v17 >= 2)
      {
        *(_QWORD *)v18 = v17 - 1;
        return;
      }
      v19 = (uint64_t (**)(char *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v18);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v18);
        v18 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          return;
        v19 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
      }
      (*v19)(v18);
      return;
    }
    if (((0x4000000040004uLL >> *(_WORD *)(v8 + 20)) & 1) == 0)
      goto LABEL_39;
    v9 = *((_QWORD *)&v22 + 1);
    if (!*((_QWORD *)&v22 + 1) || (v21[*((_QWORD *)&v22 + 1) - 1] & 0xDF) == 0x5B)
      goto LABEL_12;
    if (*((_QWORD *)&v22 + 1) < (unint64_t)v22)
    {
      ++*((_QWORD *)&v22 + 1);
      v21[v9] = 44;
LABEL_12:
      v10 = *(_QWORD *)(a3 + 8 * v7);
      if (!v10)
        goto LABEL_30;
      goto LABEL_13;
    }
    sub_1ACC4B3BC((uint64_t)&v20, 44);
    v10 = *(_QWORD *)(a3 + 8 * v7);
    if (!v10)
    {
LABEL_30:
      v12 = 0;
LABEL_31:
      sub_1ACBBE20C(91120);
LABEL_32:
      v14 = 0;
      goto LABEL_33;
    }
LABEL_13:
    v11 = *(unsigned __int16 *)(v10 + 20);
    if ((~v11 & 0x202) == 0 && *(_BYTE *)(v10 + 22) == 1)
    {
      v12 = *(unsigned __int8 **)(v10 + 8);
      v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) == 0)
        goto LABEL_24;
LABEL_22:
      if (*(_BYTE *)(v10 + 22) == 1)
      {
        v14 = *(_DWORD *)(v10 + 16);
        goto LABEL_33;
      }
      goto LABEL_24;
    }
    if ((v11 & 1) != 0)
    {
      v12 = 0;
      v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) == 0)
        goto LABEL_24;
      goto LABEL_22;
    }
    v12 = (unsigned __int8 *)sub_1ACBF2B64((int *)v10, 1);
    v10 = *(_QWORD *)(a3 + 8 * v7);
    if (!v10)
      goto LABEL_31;
    v13 = *(_WORD *)(v10 + 20);
    if ((v13 & 2) != 0)
      goto LABEL_22;
LABEL_24:
    if ((v13 & 0x10) == 0)
    {
      if ((v13 & 1) == 0)
      {
        v14 = sub_1ACBF2B3C(v10, 1);
        goto LABEL_33;
      }
      goto LABEL_32;
    }
    v14 = *(_DWORD *)(v10 + 16);
    if ((v13 & 0x400) != 0)
      v14 += *(_DWORD *)v10;
LABEL_33:
    sub_1ACC4AEE0((uint64_t)&v20, v12, v14);
    v15 = *((_QWORD *)&v22 + 1);
    if (*((_QWORD *)&v22 + 1) < (unint64_t)v22)
    {
      ++*((_QWORD *)&v22 + 1);
      v21[v15] = 58;
    }
    else
    {
      sub_1ACC4B3BC((uint64_t)&v20, 58);
    }
    sub_1ACC4B4D4(&v20, *(_QWORD *)(a3 + 8 * v7 + 8));
    v7 += 2;
  }
  while ((int)v7 < a2);
  v5 = *((_QWORD *)&v22 + 1);
  if (*((_QWORD *)&v22 + 1) < (unint64_t)v22)
    goto LABEL_43;
  sub_1ACC4B3BC((uint64_t)&v20, 125);
LABEL_44:
  sub_1ACC4AC7C((uint64_t)&v20);
  if (a1)
  {
    v16 = *(_QWORD *)a1;
    *(_BYTE *)(v16 + 23) = 74;
    *(_WORD *)(v16 + 20) |= 0x800u;
  }
  else
  {
    sub_1ACBBE20C(97463);
  }
}

void sub_1ACC47314(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  _QWORD v10[2];
  __int128 v11;
  _OWORD v12[6];
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = sub_1ACC47E3C((uint64_t)a1, *a3, a1, 1);
  if (v5)
  {
    v6 = v5;
    *(_BYTE *)(v5 + 55) = 1;
    v7 = sub_1ACC47E3C((uint64_t)a1, a3[1], a1, 1);
    if (v7)
    {
      *(_BYTE *)(v6 + 54) = 1;
      *(_BYTE *)(v7 + 54) = 1;
      v8 = sub_1ACC4C8D0((unsigned int *)v6, 0, *(_QWORD *)(v7 + 8));
      if (v8 && !*(_BYTE *)(v6 + 51))
      {
        if (!*(_BYTE *)(v6 + 50))
        {
          v13 = 0;
          memset(v12, 0, sizeof(v12));
          v10[0] = a1;
          v10[1] = (char *)v12 + 2;
          v11 = xmmword_1ACCBDE10;
          LOBYTE(v12[0]) = 1;
          sub_1ACC4A174(v6, (uint64_t)v8, v10);
          sub_1ACC4AC7C((uint64_t)v10);
          if (a1)
          {
            v9 = *(_QWORD *)a1;
            *(_BYTE *)(v9 + 23) = 74;
            *(_WORD *)(v9 + 20) |= 0x800u;
          }
          else
          {
            sub_1ACBBE20C(97463);
          }
        }
      }
      else
      {
        sqlite3_result_error_nomem(a1);
      }
    }
  }
}

void sub_1ACC47480(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _QWORD v5[2];
  __int128 v6;
  _OWORD v7[6];
  uint64_t v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v8 = 0;
  memset(v7, 0, sizeof(v7));
  v5[0] = a1;
  v5[1] = (char *)v7 + 2;
  v6 = xmmword_1ACCBDE10;
  LOBYTE(v7[0]) = 1;
  sub_1ACC4B4D4(v5, *a3);
  sub_1ACC4AC7C((uint64_t)v5);
  if (a1)
  {
    v4 = *a1;
    *(_BYTE *)(v4 + 23) = 74;
    *(_WORD *)(v4 + 20) |= 0x800u;
  }
  else
  {
    sub_1ACBBE20C(97463);
  }
}

void sub_1ACC47544(sqlite3_context *a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  char *v12;
  uint64_t v13;
  unsigned int v14;
  void (**v15)(uint64_t);

  if ((int)a2 >= 1)
  {
    if ((a2 & 1) == 0)
    {
      sub_1ACC4C100((uint64_t)a1, "replace");
      return;
    }
    v6 = sub_1ACC47E3C((uint64_t)a1, *a3, a1, a2 > 1);
    if (v6)
    {
      v7 = v6;
      ++*(_DWORD *)(v6 + 56);
      if (a2 >= 2)
      {
        v8 = 0;
        while (1)
        {
          v10 = a3[v8 + 1];
          if (!v10)
            break;
          v11 = *(unsigned __int16 *)(v10 + 20);
          if ((~v11 & 0x202) != 0 || *(_BYTE *)(v10 + 22) != 1)
          {
            if ((v11 & 1) != 0)
              break;
            v12 = (char *)sub_1ACBF2B64((int *)v10, 1);
          }
          else
          {
            v12 = *(char **)(v10 + 8);
          }
LABEL_15:
          *(_BYTE *)(v7 + 54) = 1;
          v13 = sub_1ACC48390(v7, v12, 0, (uint64_t)a1);
          if (*(_BYTE *)(v7 + 50))
            goto LABEL_19;
          if (v13)
            sub_1ACC4C20C((uint64_t)a1, (unsigned int *)v7, (unint64_t)(v13 - *(_QWORD *)(v7 + 8)) >> 4, a3[v8 + 2]);
          v9 = v8 + 3;
          v8 += 2;
          if (v9 >= a2)
            goto LABEL_18;
        }
        v12 = 0;
        goto LABEL_15;
      }
LABEL_18:
      sub_1ACC484DC(v7, *(_QWORD *)(v7 + 8), a1, 1);
LABEL_19:
      v14 = *(_DWORD *)(v7 + 56);
      if (v14 >= 2)
      {
        *(_DWORD *)(v7 + 56) = v14 - 1;
        return;
      }
      sub_1ACC49638(v7);
      v15 = (void (**)(uint64_t))&off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_27:
        (*v15)(v7);
        return;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v15 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
        goto LABEL_27;
      }
    }
  }
}

void sub_1ACC47754(sqlite3_context *a1, int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  unsigned __int8 *v11;

  v6 = sub_1ACC47E3C((uint64_t)a1, *a3, a1, 0);
  if (v6)
  {
    v7 = v6;
    if (a2 != 2)
    {
      v11 = *(unsigned __int8 **)(v6 + 8);
      if (!v11)
        return;
LABEL_8:
      if (a1)
        sub_1ACBC69D0((uint64_t)a1, off_1E5C74990[*v11], -1, 1u, 0);
      else
        sub_1ACBBE20C(97480);
      return;
    }
    v8 = a3[1];
    if (!v8)
      goto LABEL_12;
    v9 = *(unsigned __int16 *)(v8 + 20);
    if ((~v9 & 0x202) == 0 && *(_BYTE *)(v8 + 22) == 1)
    {
      v10 = *(char **)(v8 + 8);
      goto LABEL_13;
    }
    if ((v9 & 1) != 0)
LABEL_12:
      v10 = 0;
    else
      v10 = (char *)sub_1ACBF2B64((int *)v8, 1);
LABEL_13:
    v11 = (unsigned __int8 *)sub_1ACC48390(v7, v10, 0, (uint64_t)a1);
    if (!v11)
      return;
    goto LABEL_8;
  }
}

void sub_1ACC4784C(sqlite3_context *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  _BYTE *v6;
  uint64_t v7;
  void (**v8)(uint64_t);
  _BOOL8 v9;
  uint64_t v10;
  unsigned int v11;

  v4 = *a3;
  if (*a3)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v4 + 20)) & 1) != 0)
      return;
  }
  else
  {
    sub_1ACBBE20C(97202);
    v4 = *a3;
  }
  v6 = (_BYTE *)sub_1ACC47E3C((uint64_t)a1, v4, 0, 0);
  if (!v6)
  {
    sqlite3_result_error_nomem(a1);
    return;
  }
  v7 = (uint64_t)v6;
  if (v6[51])
  {
    sqlite3_result_error_nomem(a1);
    goto LABEL_8;
  }
  if (v6[50])
  {
    v9 = 0;
    if (!a1)
      goto LABEL_24;
LABEL_20:
    v10 = *(_QWORD *)a1;
    if ((*(_WORD *)(*(_QWORD *)a1 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v10, v9);
    }
    else
    {
      *(_QWORD *)v10 = v9;
      *(_WORD *)(v10 + 20) = 4;
    }
    goto LABEL_25;
  }
  if (v6[53])
  {
    v9 = v6[54] != 0;
    if (a1)
      goto LABEL_20;
  }
  else
  {
    v9 = 1;
    if (a1)
      goto LABEL_20;
  }
LABEL_24:
  sub_1ACBBE20C(97413);
LABEL_25:
  if (!*(_BYTE *)(v7 + 50))
    return;
  v11 = *(_DWORD *)(v7 + 56);
  if (v11 >= 2)
  {
    *(_DWORD *)(v7 + 56) = v11 - 1;
    return;
  }
  sub_1ACC49638(v7);
LABEL_8:
  v8 = (void (**)(uint64_t))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_13:
    (*v8)(v7);
    return;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v7);
  v7 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v8 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    goto LABEL_13;
  }
}

_QWORD *sub_1ACC47A00(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  if (!result)
    return (_QWORD *)sub_1ACBBE20C(98105);
  v3 = result;
  v4 = result[1];
  if (!v4 || !*(_QWORD *)(v4 + 32))
    return (_QWORD *)sub_1ACBBE20C(98105);
  v6 = result[2];
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      return result;
  }
  else
  {
    result = sub_1ACBC794C((uint64_t)result, 136);
    v7 = (uint64_t)result;
    if (!result)
      return result;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 24);
    if (v9 >= 2)
    {
      if (v9 >= *(_QWORD *)(v7 + 16))
      {
        sub_1ACC4B3BC(v7, 44);
      }
      else
      {
        *(_QWORD *)(v7 + 24) = v9 + 1;
        *(_BYTE *)(v8 + v9) = 44;
      }
    }
  }
  else
  {
    *(_WORD *)(v7 + 33) = 23296;
    *(_QWORD *)(v7 + 8) = v7 + 34;
    *(_BYTE *)(v7 + 32) = 1;
    *(_OWORD *)(v7 + 16) = xmmword_1ACCBDE00;
  }
  *(_QWORD *)v7 = v3;
  return sub_1ACC4B4D4((_QWORD *)v7, *a3);
}

void sub_1ACC47B00(sqlite3_context *a1)
{
  sub_1ACC4CE8C(a1, 1);
}

void sub_1ACC47B08(sqlite3_context *a1)
{
  sub_1ACC4CE8C(a1, 0);
}

_QWORD *sub_1ACC47B10(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  int v5;
  _BOOL4 v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  BOOL v11;
  int v13;
  int v14;
  _BOOL4 v15;
  unint64_t v16;

  if (!result)
    return (_QWORD *)sub_1ACBBE20C(98105);
  v1 = result[1];
  if (!v1 || !*(_QWORD *)(v1 + 32))
    return (_QWORD *)sub_1ACBBE20C(98105);
  v2 = result[2];
  if (*(__int16 *)(v2 + 20) < 0)
  {
    v3 = *(_QWORD **)(v2 + 8);
    if (!v3)
      return result;
  }
  else
  {
    result = sub_1ACBC794C((uint64_t)result, 0);
    v3 = result;
    if (!result)
      return result;
  }
  v4 = v3[3];
  if (v4 < 2)
  {
LABEL_29:
    v3[3] = 1;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    v7 = v3[1];
    v8 = 1;
    v9 = 1;
    while (1)
    {
      v10 = *(unsigned __int8 *)(v7 + v8);
      v11 = v10 == 44 && !v6;
      if (v11 && v5 == 0)
        break;
      if ((v10 & 0xFFFFFFDF) == 0x5B)
        v13 = v5 + 1;
      else
        v13 = v5;
      v14 = v13 - ((v10 & 0xFFFFFFDF) == 93);
      v15 = v6;
      if (v6)
        v14 = v5;
      if (v10 == 34)
      {
        v15 = !v6;
        v14 = v5;
      }
      if (v10 == 92)
      {
        ++v9;
      }
      else
      {
        v6 = v15;
        v5 = v14;
      }
      v8 = ++v9;
      if (v4 <= v9)
        goto LABEL_29;
    }
    v16 = v4 - v8;
    v3[3] = v16;
    result = memmove((void *)(v7 + 1), (const void *)(v7 + v9 + 1), v16 - 1);
    *(_BYTE *)(v7 + v3[3]) = 0;
  }
  return result;
}

_QWORD *sub_1ACC47C38(_QWORD *result, uint64_t a2, uint64_t *a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  __int16 v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;

  if (!result)
    return (_QWORD *)sub_1ACBBE20C(98105);
  v3 = result;
  v4 = result[1];
  if (!v4 || !*(_QWORD *)(v4 + 32))
    return (_QWORD *)sub_1ACBBE20C(98105);
  v6 = result[2];
  if (*(__int16 *)(v6 + 20) < 0)
  {
    v7 = *(_QWORD *)(v6 + 8);
    if (!v7)
      return result;
  }
  else
  {
    result = sub_1ACBC794C((uint64_t)result, 136);
    v7 = (uint64_t)result;
    if (!result)
      return result;
  }
  v8 = *(_QWORD *)(v7 + 8);
  if (v8)
  {
    v9 = *(_QWORD *)(v7 + 24);
    if (v9 >= 2)
    {
      if (v9 >= *(_QWORD *)(v7 + 16))
      {
        sub_1ACC4B3BC(v7, 44);
      }
      else
      {
        *(_QWORD *)(v7 + 24) = v9 + 1;
        *(_BYTE *)(v8 + v9) = 44;
      }
    }
  }
  else
  {
    *(_WORD *)(v7 + 33) = 31488;
    *(_QWORD *)(v7 + 8) = v7 + 34;
    *(_BYTE *)(v7 + 32) = 1;
    *(_OWORD *)(v7 + 16) = xmmword_1ACCBDE00;
  }
  *(_QWORD *)v7 = v3;
  v10 = *a3;
  if (*a3)
  {
    v11 = *(unsigned __int16 *)(v10 + 20);
    if ((~v11 & 0x202) == 0 && *(_BYTE *)(v10 + 22) == 1)
    {
      v12 = *(unsigned __int8 **)(v10 + 8);
      v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) != 0)
      {
LABEL_32:
        if (*(_BYTE *)(v10 + 22) == 1)
        {
          v14 = *(_DWORD *)(v10 + 16);
          goto LABEL_27;
        }
      }
LABEL_34:
      if ((v13 & 0x10) != 0)
      {
        v14 = *(_DWORD *)(v10 + 16);
        if ((v13 & 0x400) != 0)
          v14 += *(_DWORD *)v10;
        goto LABEL_27;
      }
      if ((v13 & 1) == 0)
      {
        v14 = sub_1ACBF2B3C(v10, 1);
        goto LABEL_27;
      }
      goto LABEL_26;
    }
    if ((v11 & 1) != 0)
    {
      v12 = 0;
      v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) != 0)
        goto LABEL_32;
      goto LABEL_34;
    }
    v12 = (unsigned __int8 *)sub_1ACBF2B64((int *)v10, 1);
    v10 = *a3;
    if (*a3)
    {
      v13 = *(_WORD *)(v10 + 20);
      if ((v13 & 2) != 0)
        goto LABEL_32;
      goto LABEL_34;
    }
  }
  else
  {
    v12 = 0;
  }
  sub_1ACBBE20C(91120);
LABEL_26:
  v14 = 0;
LABEL_27:
  sub_1ACC4AEE0(v7, v12, v14);
  v15 = *(_QWORD *)(v7 + 24);
  if (v15 >= *(_QWORD *)(v7 + 16))
  {
    sub_1ACC4B3BC(v7, 58);
  }
  else
  {
    v16 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 24) = v15 + 1;
    *(_BYTE *)(v16 + v15) = 58;
  }
  return sub_1ACC4B4D4((_QWORD *)v7, a3[1]);
}

void sub_1ACC47E2C(sqlite3_context *a1)
{
  sub_1ACC4D010(a1, 1);
}

void sub_1ACC47E34(sqlite3_context *a1)
{
  sub_1ACC4D010(a1, 0);
}

uint64_t sub_1ACC47E3C(uint64_t a1, uint64_t a2, sqlite3_context *a3, int a4)
{
  int v8;
  const void *v9;
  unsigned __int16 v10;
  int v11;
  const void *v12;
  int v13;
  unsigned int v14;
  int v15;
  int v16;
  uint64_t v17;
  size_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  int v23;
  const void *v24;
  int v25;
  const void *v26;
  size_t v27;
  BOOL v28;
  size_t v29;
  const void *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unsigned int v43;
  void (**v44)(uint64_t);
  size_t v45;
  size_t v46;
  const void *v47;
  const void *v48;
  sqlite3_context *v49;

  if (!a2)
  {
    v10 = 25584;
    goto LABEL_10;
  }
  v8 = *(unsigned __int16 *)(a2 + 20);
  if ((~v8 & 0x202) != 0 || *(_BYTE *)(a2 + 22) != 1)
  {
    if ((v8 & 1) != 0)
    {
      v9 = 0;
      if ((v8 & 2) == 0)
        goto LABEL_15;
    }
    else
    {
      v9 = (const void *)sub_1ACBF2B64((int *)a2, 1);
      LOWORD(v8) = *(_WORD *)(a2 + 20);
      if ((v8 & 2) == 0)
        goto LABEL_15;
    }
  }
  else
  {
    v9 = *(const void **)(a2 + 8);
    if ((v8 & 2) == 0)
    {
LABEL_15:
      if ((v8 & 0x10) != 0)
      {
        v11 = *(_DWORD *)(a2 + 16);
        if ((v8 & 0x400) != 0)
          v11 += *(_DWORD *)a2;
        if (!v9)
          return 0;
      }
      else if ((v8 & 1) != 0)
      {
        v11 = 0;
        if (!v9)
          return 0;
      }
      else
      {
        v12 = v9;
        v13 = sub_1ACBF2B3C(a2, 1);
        v9 = v12;
        v11 = v13;
        if (!v12)
          return 0;
      }
      goto LABEL_22;
    }
  }
  if (*(_BYTE *)(a2 + 22) != 1)
    goto LABEL_15;
  v11 = *(_DWORD *)(a2 + 16);
  if (!v9)
    return 0;
LABEL_22:
  v49 = a3;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = v11;
  v19 = -1;
  while (1)
  {
    if (!a1)
    {
      v26 = v9;
      v27 = v18;
      sub_1ACBBE20C(98133);
      v18 = v27;
      v9 = v26;
      v15 = 0;
      v14 = 0;
      goto LABEL_53;
    }
    v20 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 384);
    if (!v20)
      break;
    while (*(_DWORD *)(v20 + 4) != v16 - 429938)
    {
      v20 = *(_QWORD *)(v20 + 24);
      if (!v20)
        goto LABEL_47;
    }
    v21 = *(_QWORD *)(v20 + 8);
    if (!v21)
      break;
    if (v17)
      goto LABEL_30;
    if (*(_DWORD *)(v21 + 60) != v11)
      goto LABEL_106;
    if (a4 && *(_BYTE *)(v21 + 55))
    {
LABEL_30:
      if (*(_DWORD *)(v21 + 76) < v19)
      {
        v15 = v16;
        v19 = *(_DWORD *)(v21 + 76);
      }
      goto LABEL_32;
    }
    v22 = *(const void **)(v21 + 16);
    if (v22 == v9 || (v45 = v18, v47 = v9, v23 = memcmp(v22, v9, v18), v18 = v45, v9 = v47, !v23))
    {
      *(_BYTE *)(v21 + 50) = 0;
      *(_BYTE *)(v21 + 54) = 0;
      v17 = v21;
    }
    else
    {
LABEL_106:
      if (a4)
        goto LABEL_30;
      v24 = *(const void **)(v21 + 24);
      if (!v24)
        goto LABEL_30;
      if (*(_DWORD *)(v21 + 64) != v11)
        goto LABEL_30;
      v46 = v18;
      v48 = v9;
      v25 = memcmp(v24, v9, v18);
      v18 = v46;
      v9 = v48;
      if (v25)
        goto LABEL_30;
      *(_BYTE *)(v21 + 50) = 0;
      *(_BYTE *)(v21 + 54) = 1;
      v17 = v21;
    }
LABEL_32:
    if (*(_DWORD *)(v21 + 76) > v14)
      v14 = *(_DWORD *)(v21 + 76);
    if (++v16 == 4)
      goto LABEL_48;
  }
LABEL_47:
  v15 = v16;
LABEL_48:
  if (v17)
  {
    *(_BYTE *)(v17 + 50) = 0;
    *(_DWORD *)(v17 + 76) = v14 + 1;
    return v17;
  }
LABEL_53:
  v28 = (*(_WORD *)(a2 + 20) & 0x12) == 0 || (*(_WORD *)(a2 + 20) & 0x1000) == 0;
  if (v28 || *(uint64_t (**)(uint64_t))(a2 + 48) != sub_1ACBF1160)
  {
    v29 = v18;
    v30 = v9;
    v31 = 1;
    if (!sqlite3_initialize())
      goto LABEL_59;
    goto LABEL_66;
  }
  v29 = v18;
  v30 = v9;
  v31 = 0;
  if (sqlite3_initialize())
    goto LABEL_66;
LABEL_59:
  if (v31)
    v32 = v29 + 81;
  else
    v32 = 80;
  v33 = sub_1ACB5D828(v32);
  if (!v33)
  {
LABEL_66:
    sqlite3_result_error_nomem((sqlite3_context *)a1);
    return 0;
  }
  v17 = v33;
  *(_OWORD *)(v33 + 48) = 0u;
  *(_OWORD *)(v33 + 64) = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_OWORD *)(v33 + 32) = 0u;
  *(_OWORD *)v33 = 0u;
  if ((v31 & 1) != 0)
  {
    v34 = (_BYTE *)(v33 + 80);
    *(_QWORD *)(v33 + 16) = v33 + 80;
    memcpy((void *)(v33 + 80), v30, v11 + 1);
  }
  else
  {
    ++*((_QWORD *)v30 - 1);
    v34 = v30;
    *(_QWORD *)(v33 + 16) = v30;
    *(_BYTE *)(v33 + 52) = 1;
  }
  *(_DWORD *)(v17 + 56) = 1;
  v36 = sub_1ACC48750((unsigned int *)v17, 0);
  v37 = *(unsigned __int8 *)(v17 + 51);
  if (*(_BYTE *)(v17 + 51))
    goto LABEL_88;
  v38 = v36 - 1;
  if (v36 < 1)
    goto LABEL_88;
  v39 = (uint64_t)&v34[v36 - 1];
  do
  {
    v41 = *(unsigned __int8 *)++v39;
    v40 = v41;
    ++v38;
  }
  while (byte_1ACCBA924[v41]);
  if (!v40)
  {
LABEL_79:
    if (v38 > 0)
    {
      *(_DWORD *)(v17 + 60) = v11;
      *(_DWORD *)(v17 + 76) = v14 + 1;
      sqlite3_set_auxdata((sqlite3_context *)a1, v15 - 429938, (void *)v17, (void (__cdecl *)(void *))sub_1ACC48684);
      if (a1)
      {
        v42 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 384);
        if (!v42)
          return 0;
        while (*(_DWORD *)(v42 + 4) != v15 - 429938 || v15 >= 429938 && *(_DWORD *)v42 != *(_DWORD *)(a1 + 32))
        {
          v17 = 0;
          v42 = *(_QWORD *)(v42 + 24);
          if (!v42)
            return v17;
        }
        return *(_QWORD *)(v42 + 8);
      }
      v10 = 32597;
LABEL_10:
      sub_1ACBBE20C(v10 | 0x10000);
      return 0;
    }
LABEL_88:
    if (!v49)
    {
      sub_1ACC49638(v17);
      goto LABEL_92;
    }
    if (v37)
    {
      sqlite3_result_error_nomem(v49);
    }
    else
    {
      *((_DWORD *)v49 + 9) = 1;
      sub_1ACB57870(*(_QWORD *)v49, "malformed JSON", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }
    sub_1ACC49638(v17);
    goto LABEL_95;
  }
  v38 += sub_1ACC49414(v39);
  if (!v34[v38])
  {
    *(_BYTE *)(v17 + 53) = 1;
    goto LABEL_79;
  }
  sub_1ACC49638(v17);
  if (!v49)
  {
LABEL_92:
    *(_BYTE *)(v17 + 50) = 1;
    return v17;
  }
LABEL_95:
  v43 = *(_DWORD *)(v17 + 56);
  if (v43 >= 2)
  {
    *(_DWORD *)(v17 + 56) = v43 - 1;
    return 0;
  }
  sub_1ACC49638(v17);
  v44 = (void (**)(uint64_t))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_102:
    (*v44)(v17);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v17);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v17);
  v17 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v44 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    goto LABEL_102;
  }
  return v17;
}

uint64_t sub_1ACC48390(uint64_t a1, char *a2, _DWORD *a3, uint64_t a4)
{
  uint64_t result;
  char *v7;
  char *v8;
  uint64_t (**v9)(char *);
  char *v10;

  v10 = 0;
  if (!a2)
    return 0;
  if (*a2 != 36 || (result = sub_1ACC49A80(a1, 0, a2 + 1, a3, &v10), (a2 = v10) != 0))
  {
    ++*(_BYTE *)(a1 + 50);
    v7 = sqlite3_mprintf("JSON path error near '%q'", a2);
    if (v7)
    {
      v8 = v7;
      if (a4)
      {
        *(_DWORD *)(a4 + 36) = 1;
        sub_1ACB57870(*(_QWORD *)a4, v7, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      }
      else
      {
        sub_1ACBBE20C(97389);
      }
      v9 = (uint64_t (**)(char *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v8);
        v8 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          return 0;
        v9 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
      }
      (*v9)(v8);
    }
    else
    {
      sqlite3_result_error_nomem((sqlite3_context *)a4);
    }
    return 0;
  }
  return result;
}

void sub_1ACC484DC(uint64_t a1, uint64_t a2, sqlite3_context *a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  _BYTE *v10;
  uint64_t v11;
  sqlite3_context *v12;
  _BYTE *v13;
  __int128 v14;
  _BYTE v15[96];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 51))
  {
    sqlite3_result_error_nomem(a3);
  }
  else if (!*(_BYTE *)(a1 + 50))
  {
    v16 = 0;
    memset(v15, 0, sizeof(v15));
    v12 = a3;
    v13 = &v15[2];
    v14 = xmmword_1ACCBDE10;
    v15[0] = 1;
    sub_1ACC4A174(a1, a2, &v12);
    if (a4 && !*(_QWORD *)(a1 + 24))
    {
      v7 = *((_QWORD *)&v14 + 1);
      if (*((_QWORD *)&v14 + 1) >= (unint64_t)v14)
      {
        sub_1ACC4B3BC((uint64_t)&v12, 0);
      }
      else
      {
        ++*((_QWORD *)&v14 + 1);
        v13[v7] = 0;
      }
      if (!v15[1])
      {
        v8 = *((_QWORD *)&v14 + 1);
        v9 = DWORD2(v14) - 1;
        --*((_QWORD *)&v14 + 1);
        if (!v15[0]
          || (*(_QWORD *)&v14 = 0,
              *((_QWORD *)&v14 + 1) = v8,
              sub_1ACC4B17C((uint64_t)&v12, v8),
              v9 = DWORD2(v14) - 1,
              --*((_QWORD *)&v14 + 1),
              !v15[0]))
        {
          v10 = v13;
          ++*((_QWORD *)v13 - 1);
          *(_QWORD *)(a1 + 24) = v10;
          *(_DWORD *)(a1 + 64) = v9;
        }
      }
    }
    sub_1ACC4AC7C((uint64_t)&v12);
    if (a3)
    {
      v11 = *(_QWORD *)a3;
      *(_BYTE *)(v11 + 23) = 74;
      *(_WORD *)(v11 + 20) |= 0x800u;
    }
    else
    {
      sub_1ACBBE20C(97463);
    }
  }
}

uint64_t sub_1ACC48684(uint64_t result)
{
  uint64_t v1;
  unsigned int v2;
  uint64_t (**v3)(uint64_t);

  v1 = result;
  v2 = *(_DWORD *)(result + 56);
  if (v2 >= 2)
  {
    *(_DWORD *)(result + 56) = v2 - 1;
    return result;
  }
  sub_1ACC49638(result);
  v3 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v3)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v3 = &xmmword_1ECD3B1D0;
    return (*v3)(v1);
  }
  return result;
}

uint64_t sub_1ACC48750(unsigned int *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  int v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  char *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  int v22;
  int v23;
  _BOOL4 v24;
  int v25;
  uint64_t v26;
  int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int *v37;
  __int16 v38;
  uint64_t v39;
  char *v40;
  int v41;
  unsigned __int8 *v42;
  int v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  int v64;
  unsigned __int8 *v65;
  uint64_t v66;
  unsigned __int8 *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  const char *v79;
  unsigned int *v80;
  int v81;
  int v82;
  unsigned int v84;
  int v85;

  LODWORD(v2) = a2;
  v4 = *((_QWORD *)a1 + 2);
  while (2)
  {
    v5 = (_BYTE *)(v4 + v2);
    v6 = *v5;
    switch(*v5)
    {
      case 0:
        return 0;
      case 9:
      case 0xA:
      case 0xD:
      case 0x20:
        do
          LODWORD(v2) = v2 + 1;
        while (byte_1ACCBA924[*(unsigned __int8 *)(v4 + v2)]);
        continue;
      case 0xB:
      case 0xC:
      case 0x2F:
      case 0xC2:
      case 0xE1:
      case 0xE2:
      case 0xE3:
      case 0xEF:
        v7 = sub_1ACC49414(v4 + v2);
        if (!v7)
          goto LABEL_215;
        LODWORD(v2) = v7 + v2;
        *((_BYTE *)a1 + 53) = 1;
        continue;
      case 0x22:
        v27 = 0;
        goto LABEL_56;
      case 0x27:
        *((_BYTE *)a1 + 53) = 1;
        v6 = *v5;
        v27 = 64;
LABEL_56:
        LODWORD(v12) = v2;
        while (2)
        {
          v12 = (v12 + 2);
LABEL_59:
          v28 = *(unsigned __int8 *)(v4 + (v12 - 1));
          if (byte_1ACCBA824[*(unsigned __int8 *)(v4 + (v12 - 1))])
            goto LABEL_58;
          if (v28 != v6)
          {
            if (v28 == 92)
            {
              switch(*(_BYTE *)(v4 + v12))
              {
                case 0xA:
                case 0x27:
                case 0x30:
                case 0x76:
                  goto LABEL_80;
                case 0xB:
                case 0xC:
                case 0xE:
                case 0xF:
                case 0x10:
                case 0x11:
                case 0x12:
                case 0x13:
                case 0x14:
                case 0x15:
                case 0x16:
                case 0x17:
                case 0x18:
                case 0x19:
                case 0x1A:
                case 0x1B:
                case 0x1C:
                case 0x1D:
                case 0x1E:
                case 0x1F:
                case 0x20:
                case 0x21:
                case 0x23:
                case 0x24:
                case 0x25:
                case 0x26:
                case 0x28:
                case 0x29:
                case 0x2A:
                case 0x2B:
                case 0x2C:
                case 0x2D:
                case 0x2E:
                case 0x31:
                case 0x32:
                case 0x33:
                case 0x34:
                case 0x35:
                case 0x36:
                case 0x37:
                case 0x38:
                case 0x39:
                case 0x3A:
                case 0x3B:
                case 0x3C:
                case 0x3D:
                case 0x3E:
                case 0x3F:
                case 0x40:
                case 0x41:
                case 0x42:
                case 0x43:
                case 0x44:
                case 0x45:
                case 0x46:
                case 0x47:
                case 0x48:
                case 0x49:
                case 0x4A:
                case 0x4B:
                case 0x4C:
                case 0x4D:
                case 0x4E:
                case 0x4F:
                case 0x50:
                case 0x51:
                case 0x52:
                case 0x53:
                case 0x54:
                case 0x55:
                case 0x56:
                case 0x57:
                case 0x58:
                case 0x59:
                case 0x5A:
                case 0x5B:
                case 0x5D:
                case 0x5E:
                case 0x5F:
                case 0x60:
                case 0x61:
                case 0x63:
                case 0x64:
                case 0x65:
                case 0x67:
                case 0x68:
                case 0x69:
                case 0x6A:
                case 0x6B:
                case 0x6C:
                case 0x6D:
                case 0x6F:
                case 0x70:
                case 0x71:
                case 0x73:
                case 0x77:
                  goto LABEL_33;
                case 0xD:
                  if (*(_BYTE *)(v4 + (v12 + 1)) == 10)
                    LODWORD(v12) = v12 + 1;
                  goto LABEL_80;
                case 0x22:
                case 0x2F:
                case 0x5C:
                case 0x62:
                case 0x66:
                case 0x6E:
                case 0x72:
                case 0x74:
                  goto LABEL_65;
                case 0x75:
                  v29 = (unsigned __int8 *)(v4 + (v12 + 1));
                  if ((byte_1ACCB6548[*v29] & 8) == 0
                    || (byte_1ACCB6548[v29[1]] & 8) == 0
                    || (byte_1ACCB6548[v29[2]] & 8) == 0
                    || (byte_1ACCB6548[v29[3]] & 8) == 0)
                  {
                    goto LABEL_33;
                  }
LABEL_65:
                  v27 |= 2u;
                  continue;
                case 0x78:
                  v30 = (unsigned __int8 *)(v4 + (v12 + 1));
                  if ((byte_1ACCB6548[*v30] & 8) == 0 || (byte_1ACCB6548[v30[1]] & 8) == 0)
                    goto LABEL_33;
                  goto LABEL_80;
                default:
                  if (*(unsigned __int8 *)(v4 + v12) != 226
                    || *(unsigned __int8 *)(v4 + (v12 + 1)) != 128
                    || (*(_BYTE *)(v4 + (v12 + 2)) & 0xFE) != 0xA8)
                  {
                    goto LABEL_33;
                  }
LABEL_80:
                  v27 |= 0x42u;
                  *((_BYTE *)a1 + 53) = 1;
                  break;
              }
              continue;
            }
            if ((char)v28 >= 32)
            {
LABEL_58:
              v12 = (v12 + 1);
              goto LABEL_59;
            }
            a1[17] = v12 - 1;
            return 0xFFFFFFFFLL;
          }
          break;
        }
        v31 = v12 - v2;
        v32 = *a1;
        if (v32 < a1[1])
        {
          v33 = *((_QWORD *)a1 + 1) + 16 * v32;
          *(_BYTE *)v33 = 6;
          *(_BYTE *)(v33 + 1) = v27;
          *(_DWORD *)(v33 + 4) = v31;
          *(_QWORD *)(v33 + 8) = v5;
          goto LABEL_186;
        }
        v50 = (v27 << 8) | 6;
        goto LABEL_188;
      case 0x2B:
        *((_BYTE *)a1 + 53) = 1;
        v6 = *v5;
        v8 = 64;
        goto LABEL_8;
      case 0x2C:
        a1[17] = v2;
        return 4294967292;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        v8 = 0;
LABEL_8:
        if ((char)v6 > 48)
          goto LABEL_27;
        v9 = (v2 + 1);
        v10 = v4 + v9;
        v11 = *(unsigned __int8 *)(v4 + v9);
        if (v6 == 48)
        {
          if ((v11 | 0x20) != 0x78
            || (LODWORD(v12) = v2 + 2, (byte_1ACCB6548[*(unsigned __int8 *)(v4 + (v2 + 2))] & 8) == 0))
          {
            if ((unint64_t)(v11 - 58) < 0xFFFFFFFFFFFFFFF6)
              goto LABEL_27;
LABEL_52:
            a1[17] = v9;
            return 0xFFFFFFFFLL;
          }
          *((_BYTE *)a1 + 53) = 1;
          do
            v12 = (v12 + 1);
          while ((byte_1ACCB6548[*(unsigned __int8 *)(v4 + v12)] & 8) != 0);
LABEL_117:
          v8 = 64;
          LOWORD(v18) = 4;
          goto LABEL_184;
        }
        if ((unint64_t)(v11 - 58) <= 0xFFFFFFFFFFFFFFF5)
        {
          if ((_DWORD)v11 == 46)
          {
            v18 = 4;
LABEL_173:
            *((_BYTE *)a1 + 53) = 1;
            v8 = 64;
            goto LABEL_28;
          }
          if ((_DWORD)v11 != 105 && (_DWORD)v11 != 73)
            goto LABEL_215;
          v13 = *(unsigned __int8 *)(v10 + 1);
          if (!*(_BYTE *)(v10 + 1))
          {
            v78 = 0;
            v16 = "nf";
            goto LABEL_197;
          }
          if ((v13 & 0xFFFFFFDF) == 0x4E)
          {
            v14 = *(unsigned __int8 *)(v10 + 2);
            if (!*(_BYTE *)(v10 + 2))
            {
              v78 = 0;
              v16 = "f";
LABEL_197:
              if (v78 == byte_1ACCB6333[*v16])
                goto LABEL_198;
LABEL_215:
              a1[17] = v2;
              return 0xFFFFFFFFLL;
            }
            if ((v14 & 0xFFFFFFDF) == 0x46)
            {
LABEL_198:
              *((_BYTE *)a1 + 53) = 1;
              if (*v5 == 45)
              {
                v79 = "-9.0e999";
                v80 = a1;
                v81 = 8;
              }
              else
              {
                v79 = "9.0e999";
                v80 = a1;
                v81 = 7;
              }
              sub_1ACC49920(v80, 5, v81, (uint64_t)v79);
              if (sqlite3_strnicmp((const char *)(v4 + (v2 + 4)), "inity", 5))
                v82 = 4;
              else
                v82 = 9;
              return (v82 + v2);
            }
            v15 = &byte_1ACCB6333[v14];
            v16 = "f";
          }
          else
          {
            v15 = &byte_1ACCB6333[v13];
            v16 = "nf";
          }
          v78 = *v15;
          goto LABEL_197;
        }
        if ((_DWORD)v11 == 48)
        {
          v17 = *(unsigned __int8 *)(v4 + (v2 + 2));
          if ((unint64_t)(v17 - 58) >= 0xFFFFFFFFFFFFFFF6)
            goto LABEL_52;
          if ((v17 | 0x20) != 0x78)
            goto LABEL_27;
          LODWORD(v12) = v2 + 3;
          if ((byte_1ACCB6548[*(unsigned __int8 *)(v4 + (v2 + 3))] & 8) == 0)
            goto LABEL_27;
          *((_BYTE *)a1 + 53) = 1;
          do
            v12 = (v12 + 1);
          while ((byte_1ACCB6548[*(unsigned __int8 *)(v4 + v12)] & 8) != 0);
          goto LABEL_117;
        }
LABEL_27:
        v18 = 4;
LABEL_28:
        LODWORD(v12) = v2;
        while (1)
        {
          do
          {
            v12 = (v12 + 1);
            v19 = *(unsigned __int8 *)(v4 + v12);
          }
          while ((unint64_t)(v19 - 58) > 0xFFFFFFFFFFFFFFF5);
          if ((_DWORD)v19 != 46)
            break;
          v20 = v18 == 5;
          v18 = 5;
          if (v20)
            goto LABEL_33;
        }
        v21 = v19 & 0xFFFFFFDF;
        v22 = v12 - 1;
        v23 = *(unsigned __int8 *)(v4 + (v12 - 1));
        v24 = *(char *)(v4 + (v12 - 1)) < 48;
        if (v21 == 69)
        {
          if ((char)v23 <= 47)
          {
            if (v23 != 46
              || (int)v12 - 2 < v2
              || (unint64_t)*(unsigned __int8 *)(v4 + (v12 - 2)) - 58 < 0xFFFFFFFFFFFFFFF6)
            {
              goto LABEL_33;
            }
            *((_BYTE *)a1 + 53) = 1;
            v8 = 64;
          }
          v25 = *(unsigned __int8 *)(v4 + (v12 + 1));
          if (v25 == 45 || v25 == 43)
          {
            v25 = *(unsigned __int8 *)(v4 + (v12 + 2));
            LODWORD(v12) = v12 + 1;
          }
          if ((v25 - 58) < 0xFFFFFFF6)
            goto LABEL_33;
          do
          {
            v12 = (v12 + 1);
            v26 = *(unsigned __int8 *)(v4 + v12);
          }
          while ((unint64_t)(v26 - 58) > 0xFFFFFFFFFFFFFFF5);
          if ((_DWORD)v26 == 46)
            goto LABEL_33;
          v22 = v12 - 1;
          v23 = *(unsigned __int8 *)(v4 + (v12 - 1));
          v24 = *(char *)(v4 + (v12 - 1)) < 48;
          if ((v26 & 0xFFFFFFDF) == 0x45)
          {
            if ((char)v23 <= 47
              && v23 == 46
              && (int)v12 - 2 >= v2
              && (unint64_t)*(unsigned __int8 *)(v4 + (v12 - 2)) - 58 >= 0xFFFFFFFFFFFFFFF6)
            {
              *((_BYTE *)a1 + 53) = 1;
            }
            goto LABEL_33;
          }
          LOWORD(v18) = 5;
        }
        if (!v24)
          goto LABEL_184;
        if (v23 != 46
          || v22 - 1 < v2
          || (unint64_t)*(unsigned __int8 *)(v4 + (v22 - 1)) - 58 < 0xFFFFFFFFFFFFFFF6)
        {
LABEL_33:
          a1[17] = v12;
          return 0xFFFFFFFFLL;
        }
        *((_BYTE *)a1 + 53) = 1;
        v8 |= 0x40u;
LABEL_184:
        v31 = v12 - v2;
        v76 = *a1;
        if (v76 >= a1[1])
        {
          v50 = v18 | (v8 << 8);
LABEL_188:
          sub_1ACC499B4(a1, v50, v31, v4 + v2);
        }
        else
        {
          v77 = *((_QWORD *)a1 + 1) + 16 * v76;
          *(_BYTE *)v77 = v18;
          *(_BYTE *)(v77 + 1) = v8;
          *(_DWORD *)(v77 + 4) = v31;
          *(_QWORD *)(v77 + 8) = v5;
LABEL_186:
          ++*a1;
        }
        return v12;
      case 0x2E:
        if ((unint64_t)*(unsigned __int8 *)(v4 + (v2 + 1)) - 58 <= 0xFFFFFFFFFFFFFFF5)
          goto LABEL_215;
        v18 = 5;
        goto LABEL_173;
      case 0x3A:
        a1[17] = v2;
        return 4294967291;
      case 0x5B:
        v34 = *a1;
        if (v34 >= a1[1])
        {
          v36 = sub_1ACC499B4(a1, 7, 0, 0);
        }
        else
        {
          v35 = *((_QWORD *)a1 + 1) + 16 * v34;
          *(_WORD *)v35 = 7;
          *(_DWORD *)(v35 + 4) = 0;
          *(_QWORD *)(v35 + 8) = 0;
          v36 = (*a1)++;
        }
        if ((v36 & 0x80000000) != 0)
          return 0xFFFFFFFFLL;
        v51 = (unsigned __int16)++*((_WORD *)a1 + 24);
        if (v51 >= 0x321)
          goto LABEL_215;
        *(_QWORD *)(*((_QWORD *)a1 + 1) + 16 * v36 + 8) = 0;
        v2 = (v2 + 1);
        while (2)
        {
          v52 = sub_1ACC48750(a1, v2);
          v12 = v52;
          if ((int)v52 < 1)
          {
            if ((_DWORD)v52 == -1)
              return v12;
            if ((_DWORD)v52 != -3)
              goto LABEL_215;
            LODWORD(v12) = a1[17];
            if (*a1 != v36 + 1)
              *((_BYTE *)a1 + 53) = 1;
          }
          else
          {
            v53 = *(unsigned __int8 *)(v4 + v52);
            if ((_DWORD)v53 == 44)
            {
LABEL_124:
              v2 = (v12 + 1);
              continue;
            }
            if ((_DWORD)v53 != 93)
            {
              if (!byte_1ACCBA924[v53])
                goto LABEL_132;
              do
              {
                v12 = (v12 + 1);
                v54 = *(unsigned __int8 *)(v4 + v12);
              }
              while (byte_1ACCBA924[v54]);
              if ((_DWORD)v54 == 44)
                goto LABEL_124;
              if ((_DWORD)v54 != 93)
              {
LABEL_132:
                v55 = sub_1ACC48750(a1, v12);
                if (v55 == -4)
                {
                  LODWORD(v12) = a1[17];
                  goto LABEL_124;
                }
                if (v55 != -3)
                  goto LABEL_33;
                LODWORD(v12) = a1[17];
              }
            }
          }
          break;
        }
        *(_DWORD *)(*((_QWORD *)a1 + 1) + 16 * v36 + 4) = *a1 + ~v36;
        --*((_WORD *)a1 + 24);
        return (v12 + 1);
      case 0x5D:
        a1[17] = v2;
        return 4294967293;
      case 0x66:
        if (strncmp((const char *)(v4 + v2), "false", 5uLL))
          goto LABEL_215;
        v12 = (v2 + 5);
        if ((byte_1ACCB6548[*(unsigned __int8 *)(v4 + v12)] & 6) != 0)
          goto LABEL_215;
        v37 = a1;
        v38 = 3;
        goto LABEL_191;
      case 0x6E:
        if (strncmp((const char *)(v4 + v2), "null", 4uLL))
          goto LABEL_96;
        v12 = (v2 + 4);
        if ((byte_1ACCB6548[*(unsigned __int8 *)(v4 + v12)] & 6) != 0)
          goto LABEL_96;
        v37 = a1;
        v38 = 1;
        goto LABEL_191;
      case 0x74:
        if (strncmp((const char *)(v4 + v2), "true", 4uLL))
          goto LABEL_215;
        v12 = (v2 + 4);
        if ((byte_1ACCB6548[*(unsigned __int8 *)(v4 + v12)] & 6) != 0)
          goto LABEL_215;
        v37 = a1;
        v38 = 2;
LABEL_191:
        sub_1ACC49920(v37, v38, 0, 0);
        return v12;
      case 0x7B:
        v47 = *a1;
        if (v47 >= a1[1])
        {
          v49 = sub_1ACC499B4(a1, 8, 0, 0);
        }
        else
        {
          v48 = *((_QWORD *)a1 + 1) + 16 * v47;
          *(_WORD *)v48 = 8;
          *(_DWORD *)(v48 + 4) = 0;
          *(_QWORD *)(v48 + 8) = 0;
          v49 = (*a1)++;
        }
        if ((v49 & 0x80000000) != 0)
          return 0xFFFFFFFFLL;
        v56 = (unsigned __int16)++*((_WORD *)a1 + 24);
        if (v56 > 0x320)
          goto LABEL_215;
        v84 = v49;
        while (1)
        {
LABEL_138:
          LODWORD(v57) = v2 + 1;
          v58 = *a1;
          v59 = sub_1ACC48750(a1, (v2 + 1));
          v60 = v59;
          if ((int)v59 <= 0)
          {
            if ((_DWORD)v59 == -2)
            {
              LODWORD(v2) = a1[17];
              if (*a1 != v84 + 1)
                *((_BYTE *)a1 + 53) = 1;
              goto LABEL_222;
            }
            v61 = sub_1ACC49414(v4 + v57);
            v57 = (v61 + v57);
            v62 = *(unsigned __int8 *)(v4 + v57);
            if ((byte_1ACCB6548[v62] & 0x42) == 0
              && ((_DWORD)v62 != 92
               || *(_BYTE *)(v4 + (v57 + 1)) != 117
               || !sub_1ACC49960((unsigned __int8 *)(v4 + (v57 + 2)))))
            {
              if ((_DWORD)v60 == -1)
                return 0xFFFFFFFFLL;
LABEL_219:
              a1[17] = v57;
              return 0xFFFFFFFFLL;
            }
            v63 = 0;
            v85 = v61;
            v64 = v61 + v2;
            while (1)
            {
              v65 = (unsigned __int8 *)(v4 + v64 + v63 + 2);
              v66 = *v65;
              if ((byte_1ACCB6548[v66] & 0x46) == 0 || sub_1ACC49414((uint64_t)v65))
              {
                if ((_DWORD)v66 != 92)
                  break;
                if (*(_BYTE *)(v4 + v64 + v63 + 3) != 117)
                  break;
                v67 = (unsigned __int8 *)(v4 + v64 + v63 + 4);
                if ((byte_1ACCB6548[*v67] & 8) == 0
                  || (byte_1ACCB6548[v67[1]] & 8) == 0
                  || (byte_1ACCB6548[v67[2]] & 8) == 0
                  || (byte_1ACCB6548[v67[3]] & 8) == 0)
                {
                  break;
                }
              }
              ++v63;
            }
            sub_1ACC49920(a1, 262, v63 + 1, v4 + v57);
            *((_BYTE *)a1 + 53) = 1;
            v60 = (v85 + v2 + v63 + 2);
          }
          if (*((_BYTE *)a1 + 51))
            return 0xFFFFFFFFLL;
          v68 = *((_QWORD *)a1 + 1);
          if (*(_BYTE *)(v68 + 16 * v58) != 6)
            goto LABEL_219;
          *(_BYTE *)(v68 + 16 * v58 + 1) |= 0x20u;
          v69 = *(unsigned __int8 *)(v4 + v60);
          if (v69 != 58)
          {
            if (!byte_1ACCBA924[v69])
              goto LABEL_161;
            do
            {
              v60 = (v60 + 1);
              v70 = *(unsigned __int8 *)(v4 + v60);
            }
            while (byte_1ACCBA924[v70]);
            if ((_DWORD)v70 != 58)
            {
LABEL_161:
              v71 = sub_1ACC48750(a1, v60);
              if ((_DWORD)v71 != -5)
              {
                v12 = v71;
                if ((_DWORD)v71 == -1)
                  return v12;
                a1[17] = v60;
                return 0xFFFFFFFFLL;
              }
              LODWORD(v60) = a1[17];
            }
          }
          LODWORD(v12) = v60 + 1;
          v72 = sub_1ACC48750(a1, (v60 + 1));
          v2 = v72;
          if ((int)v72 <= 0)
          {
            if ((_DWORD)v72 != -1)
              goto LABEL_33;
            return 0xFFFFFFFFLL;
          }
          v73 = *(unsigned __int8 *)(v4 + v72);
          if ((_DWORD)v73 != 44)
          {
            if ((_DWORD)v73 == 125)
              goto LABEL_222;
            if (!byte_1ACCBA924[v73])
              goto LABEL_170;
            do
            {
              v2 = (v2 + 1);
              v74 = *(unsigned __int8 *)(v4 + v2);
            }
            while (byte_1ACCBA924[v74]);
            if ((_DWORD)v74 != 44)
              break;
          }
        }
        if ((_DWORD)v74 == 125)
        {
LABEL_222:
          *(_DWORD *)(*((_QWORD *)a1 + 1) + 16 * v84 + 4) = *a1 + ~v84;
          --*((_WORD *)a1 + 24);
          return (v2 + 1);
        }
LABEL_170:
        v75 = sub_1ACC48750(a1, v2);
        if (v75 == -4)
        {
          LODWORD(v2) = a1[17];
          goto LABEL_138;
        }
        if (v75 == -2)
        {
          LODWORD(v2) = a1[17];
          goto LABEL_222;
        }
        goto LABEL_215;
      case 0x7D:
        a1[17] = v2;
        return 4294967294;
      default:
LABEL_96:
        v39 = 0;
        while (v6 != *((unsigned __int8 *)&unk_1E5C74918 + 24 * v39)
             && v6 != *((unsigned __int8 *)&unk_1E5C74918 + 24 * v39 + 1))
        {
LABEL_98:
          if (++v39 == 5)
            goto LABEL_215;
        }
        v40 = (char *)&unk_1E5C74918 + 24 * v39;
        v41 = v40[2];
        v42 = (unsigned __int8 *)*((_QWORD *)v40 + 1);
        v43 = v41 + 1;
        v44 = (_BYTE *)(v4 + v2);
        while (1)
        {
          v45 = *v44;
          if (!*v44)
            break;
          LODWORD(v45) = byte_1ACCB6333[v45];
          v46 = byte_1ACCB6333[*v42];
          if ((_DWORD)v45 != v46)
            goto LABEL_107;
          ++v44;
          ++v42;
          if (--v43 <= 1)
            goto LABEL_97;
        }
        v46 = byte_1ACCB6333[*v42];
LABEL_107:
        if ((_DWORD)v45 != v46)
          goto LABEL_98;
LABEL_97:
        v12 = (v2 + v41);
        if ((byte_1ACCB6548[*(unsigned __int8 *)(v4 + v12)] & 6) != 0)
          goto LABEL_98;
        sub_1ACC49920(a1, *((char *)&unk_1E5C74918 + 24 * v39 + 3), *((char *)&unk_1E5C74918 + 24 * v39 + 4), *((_QWORD *)&unk_1E5C74918 + 3 * v39 + 2));
        *((_BYTE *)a1 + 53) = 1;
        return v12;
    }
  }
}

uint64_t sub_1ACC49414(uint64_t a1)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  _BYTE *i;
  int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  int v13;

  v1 = 0;
LABEL_4:
  while (2)
  {
    while (1)
    {
      v2 = v1;
      v3 = *(unsigned __int8 *)(a1 + v1);
      if (v3 > 46)
        break;
      if ((v3 - 9) >= 5 && v3 != 32)
        return v2;
      v1 = v2 + 1;
    }
    switch(v3)
    {
      case 194:
        if (*(unsigned __int8 *)(v2 + a1 + 1) == 160)
        {
          v1 = v2 + 2;
          continue;
        }
        return v2;
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
      case 224:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 237:
      case 238:
        return v2;
      case 225:
        if (*(unsigned __int8 *)(v2 + a1 + 1) == 154 && *(unsigned __int8 *)(v2 + a1 + 2) == 128)
        {
          v1 = v2 + 3;
          continue;
        }
        return v2;
      case 226:
        v6 = *(unsigned __int8 *)(v2 + a1 + 1);
        if (v6 == 129)
        {
          if (*(unsigned __int8 *)(v2 + a1 + 2) == 159)
          {
            v1 = v2 + 3;
            continue;
          }
        }
        else if (v6 == 128 && (*(_BYTE *)(v2 + a1 + 2) & 0x80) != 0)
        {
          v7 = *(unsigned __int8 *)(v2 + a1 + 2);
          if (v7 < 0x8B || (v8 = v7 - 168, v8 <= 7) && ((1 << v8) & 0x83) != 0)
          {
            v1 = v2 + 3;
            continue;
          }
        }
        return v2;
      case 227:
        if (*(unsigned __int8 *)(v2 + a1 + 1) == 128 && *(unsigned __int8 *)(v2 + a1 + 2) == 128)
        {
          v1 = v2 + 3;
          continue;
        }
        return v2;
      case 239:
        if (*(unsigned __int8 *)(v2 + a1 + 1) == 187 && *(unsigned __int8 *)(v2 + a1 + 2) == 191)
        {
          v1 = v2 + 3;
          continue;
        }
        return v2;
      default:
        if (v3 != 47)
          return v2;
        v4 = *(unsigned __int8 *)(v2 + a1 + 1);
        if (v4 == 47)
        {
          v9 = (int)v2 + 2;
          while (1)
          {
            while (1)
            {
              v10 = v9;
              v11 = *(unsigned __int8 *)(a1 + v9);
              if (v11 == 226)
                break;
              v12 = v11 > 0xD;
              v13 = (1 << v11) & 0x2401;
              if (!v12 && v13 != 0)
                goto LABEL_49;
              v9 = v10 + 1;
            }
            v9 = v10 + 1;
            if (*(unsigned __int8 *)(a1 + v10 + 1) == 128 && (*(_BYTE *)(v10 + a1 + 2) & 0xFE) == 0xA8)
            {
              LODWORD(v10) = v10 + 2;
LABEL_49:
              if (*(_BYTE *)(a1 + (int)v10))
                v1 = v10 + 1;
              else
                v1 = v10;
              goto LABEL_4;
            }
          }
        }
        if (v4 == 42 && *(_BYTE *)(v2 + a1 + 2))
        {
          v1 = v2 + 4;
          for (i = (_BYTE *)(a1 + (int)v2 + 3); ; ++i)
          {
            if (*i == 47)
            {
              if (*(i - 1) == 42)
                goto LABEL_4;
            }
            else if (!*i)
            {
              return v2;
            }
            ++v1;
          }
        }
        break;
    }
    return v2;
  }
}

uint64_t sub_1ACC49638(uint64_t result)
{
  uint64_t v1;
  _QWORD *i;
  void (*v3)(_QWORD);
  uint64_t (**v4)(_QWORD);
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t (**v13)(_QWORD);
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  uint64_t (**v18)(_QWORD);

  v1 = result;
  for (i = *(_QWORD **)(result + 40); i; i = *(_QWORD **)(v1 + 40))
  {
    v3 = (void (*)(_QWORD))i[1];
    *(_QWORD *)(v1 + 40) = *i;
    v3(i[2]);
    v4 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(i);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(i);
      i = (_QWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        continue;
      v4 = &xmmword_1ECD3B1D0;
    }
    result = (*v4)(i);
  }
  v5 = *(_QWORD *)(v1 + 8);
  if (v5)
  {
    v6 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v5);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v5);
      v5 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_17;
      v6 = &xmmword_1ECD3B1D0;
    }
    result = (*v6)(v5);
LABEL_17:
    *(_QWORD *)(v1 + 8) = 0;
  }
  *(_QWORD *)v1 = 0;
  v7 = *(_QWORD *)(v1 + 32);
  if (!v7)
    goto LABEL_26;
  v8 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v7);
    v7 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_25;
    v8 = &xmmword_1ECD3B1D0;
  }
  result = (*v8)(v7);
LABEL_25:
  *(_QWORD *)(v1 + 32) = 0;
LABEL_26:
  if (!*(_BYTE *)(v1 + 52))
    goto LABEL_36;
  v9 = *(_QWORD *)(v1 + 16);
  v12 = *(_QWORD *)(v9 - 8);
  v11 = (_QWORD *)(v9 - 8);
  v10 = v12;
  if (v12 < 2)
  {
    v13 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v11);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v11);
      v11 = (_QWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_35;
      v13 = &xmmword_1ECD3B1D0;
    }
    result = (*v13)(v11);
  }
  else
  {
    *v11 = v10 - 1;
  }
LABEL_35:
  *(_QWORD *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 52) = 0;
LABEL_36:
  v14 = *(_QWORD *)(v1 + 24);
  if (!v14)
    return result;
  v17 = *(_QWORD *)(v14 - 8);
  v16 = (_QWORD *)(v14 - 8);
  v15 = v17;
  if (v17 < 2)
  {
    v18 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v16);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v16);
      v16 = (_QWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_45;
      v18 = &xmmword_1ECD3B1D0;
    }
    result = (*v18)(v16);
  }
  else
  {
    *v16 = v15 - 1;
  }
LABEL_45:
  *(_QWORD *)(v1 + 24) = 0;
  return result;
}

uint64_t sub_1ACC49920(unsigned int *a1, __int16 a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  if (v4 >= a1[1])
    return sub_1ACC499B4(a1, a2, a3, a4);
  v5 = *((_QWORD *)a1 + 1) + 16 * v4;
  *(_WORD *)v5 = a2;
  *(_DWORD *)(v5 + 4) = a3;
  *(_QWORD *)(v5 + 8) = a4;
  v6 = *a1;
  *a1 = v6 + 1;
  return v6;
}

uint64_t sub_1ACC49960(unsigned __int8 *a1)
{
  if ((byte_1ACCB6548[*a1] & 8) == 0)
    return 0;
  if ((byte_1ACCB6548[a1[1]] & 8) == 0)
    return 0;
  if ((byte_1ACCB6548[a1[2]] & 8) != 0)
    return (byte_1ACCB6548[a1[3]] >> 3) & 1;
  return 0;
}

uint64_t sub_1ACC499B4(unsigned int *a1, __int16 a2, int a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  while (!*((_BYTE *)a1 + 51))
  {
    v8 = a1[1];
    v9 = *((_QWORD *)a1 + 1);
    if (sqlite3_initialize() || (v10 = sub_1ACB6BB48(v9, 16 * (2 * v8 + 10))) == 0)
    {
      *((_BYTE *)a1 + 51) = 1;
      return 0xFFFFFFFFLL;
    }
    v11 = v10;
    v12 = off_1ECD3B178(v10);
    a1[1] = v12 >> 4;
    *((_QWORD *)a1 + 1) = v11;
    v13 = *a1;
    if (v13 < v12 >> 4)
    {
      v14 = v11 + 16 * v13;
      *(_WORD *)v14 = a2;
      *(_DWORD *)(v14 + 4) = a3;
      *(_QWORD *)(v14 + 8) = a4;
      result = *a1;
      *a1 = result + 1;
      return result;
    }
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1ACC49A80(uint64_t a1, int a2, char *__s2, _DWORD *a4, char **a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int i;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  char v29;
  int v30;
  char *v31;
  unsigned int v32;
  const char *v33;
  size_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int j;
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  int v42;
  const char *v43;
  uint64_t v44;
  int v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  int v51;
  unsigned int v54;

  if (*(_BYTE *)(a1 + 51))
    return 0;
  LODWORD(v8) = a2;
  v10 = *(_QWORD *)(a1 + 8);
LABEL_5:
  v5 = v10 + 16 * v8;
  v11 = *(_BYTE *)(v5 + 1);
  if ((v11 & 0xC) != 0 && *(_BYTE *)(a1 + 54))
  {
    if ((*(_BYTE *)(v5 + 1) & 8) != 0)
    {
      do
      {
        v23 = (unint64_t)(v5 - v10) >> 4;
        v24 = *(_DWORD *)(a1 + 72);
        if (*(_DWORD *)(v10 + 16 * v24 + 4) != (_DWORD)v23)
        {
          while (*(_DWORD *)(v10 + 16 * *(unsigned int *)(v10 + 16 * *(unsigned int *)(a1 + 72) + 8) + 4) != (_DWORD)v23)
            ;
          v24 = *(_DWORD *)(v10 + 16 * *(unsigned int *)(a1 + 72) + 8);
        }
        LODWORD(v8) = v24 + 1;
        v5 = v10 + 16 * (v24 + 1);
        v11 = *(_BYTE *)(v5 + 1);
      }
      while ((v11 & 8) != 0);
    }
    if ((v11 & 4) != 0)
      return 0;
  }
  v12 = *__s2;
  if (v12 != 46)
  {
    if (v12 != 91)
    {
      if (*__s2)
      {
LABEL_106:
        v5 = 0;
        *a5 = __s2;
      }
      return v5;
    }
    v13 = __s2[1];
    if ((unint64_t)(v13 - 58) >= 0xFFFFFFFFFFFFFFF6)
    {
      v14 = 0;
      v15 = 1;
      LOBYTE(v22) = __s2[1];
      do
      {
        v14 = 10 * v14 + (char)v22 - 48;
        v22 = __s2[++v15];
      }
      while ((unint64_t)(v22 - 58) > 0xFFFFFFFFFFFFFFF5);
      if (v15 >= 2 && (_DWORD)v22 == 93)
      {
        if (*(_BYTE *)v5 != 7)
          return 0;
        goto LABEL_46;
      }
    }
    else
    {
      v14 = 0;
      v15 = 1;
    }
    if ((_DWORD)v13 != 35)
      goto LABEL_106;
    if (*(_BYTE *)v5 != 7)
      return 0;
    v16 = v5;
    while (1)
    {
      for (i = *(_DWORD *)(v16 + 4); v15 <= i; v15 += *(_DWORD *)(v16 + 16 * v15 + 4) + 1)
      {
        while (1)
        {
          v18 = (unsigned __int8 *)(v16 + 16 * v15);
          if ((v18[1] & 4) == 0 || !*(_BYTE *)(a1 + 54))
            ++v14;
          if (*v18 >= 7u)
            break;
          if (++v15 > i)
            goto LABEL_24;
        }
      }
LABEL_24:
      if ((*(_BYTE *)(v16 + 1) & 0x10) == 0 || !*(_BYTE *)(a1 + 54))
        break;
      v16 = v10 + 16 * *(int *)(v16 + 8);
      v15 = 1;
    }
    LODWORD(v19) = __s2[2];
    if ((_DWORD)v19 == 45)
    {
      v19 = __s2[3];
      if ((unint64_t)(v19 - 58) < 0xFFFFFFFFFFFFFFF6)
        goto LABEL_106;
      v20 = 0;
      v15 = 3;
      do
      {
        v20 = 10 * v20 + (char)v19 - 48;
        v19 = __s2[++v15];
      }
      while ((unint64_t)(v19 - 58) > 0xFFFFFFFFFFFFFFF5);
      v21 = v14 >= v20;
      v14 -= v20;
      if (!v21)
        return 0;
    }
    else
    {
      v15 = 2;
    }
    if ((_DWORD)v19 != 93)
      goto LABEL_106;
LABEL_46:
    __s2 += v15 + 1;
    LODWORD(v25) = v8;
    v26 = *(_DWORD *)(v5 + 4);
    if (!v26)
      goto LABEL_62;
    while (1)
    {
      v27 = 1;
      while (1)
      {
        if (v14)
        {
          if ((*(_BYTE *)(v5 + 16 * v27 + 1) & 4) == 0 || !*(_BYTE *)(a1 + 54))
            --v14;
          goto LABEL_57;
        }
        if ((*(_BYTE *)(v5 + 16 * v27 + 1) & 4) == 0)
          break;
        v14 = *(unsigned __int8 *)(a1 + 54);
        if (!*(_BYTE *)(a1 + 54))
          goto LABEL_60;
        v14 = 0;
LABEL_57:
        if (*(unsigned __int8 *)(v5 + 16 * v27) >= 7u)
          v28 = *(_DWORD *)(v5 + 16 * v27 + 4) + 1;
        else
          v28 = 1;
        v27 += v28;
        if (v27 > v26)
          goto LABEL_63;
      }
      v14 = 0;
LABEL_60:
      v29 = 0;
      if ((*(_BYTE *)(v5 + 1) & 0x10) == 0)
      {
LABEL_67:
        if ((v29 & 1) != 0)
        {
          v5 = 0;
          if (a4)
          {
            if (!v14)
            {
              v51 = sub_1ACC49920((unsigned int *)a1, 7, 1, 0);
              v47 = sub_1ACC49FFC((unsigned int *)a1, __s2, a4);
              v5 = 0;
              if (!*(_BYTE *)(a1 + 51))
              {
                if (v47)
                {
                  v49 = *(_QWORD *)(a1 + 8) + 16 * v25;
                  *(_DWORD *)(v49 + 8) = v51;
                  v50 = *(_BYTE *)(v49 + 1) | 0x10;
                  goto LABEL_104;
                }
              }
            }
          }
          return v5;
        }
        LODWORD(v8) = v27 + v25;
        goto LABEL_5;
      }
      while (1)
      {
        if (!*(_BYTE *)(a1 + 54))
          goto LABEL_67;
        v25 = *(unsigned int *)(v5 + 8);
        v5 = v10 + 16 * v25;
        v26 = *(_DWORD *)(v5 + 4);
        if (v26)
          break;
LABEL_62:
        v27 = 1;
LABEL_63:
        v29 = 1;
        if ((*(_BYTE *)(v5 + 1) & 0x10) == 0)
          goto LABEL_67;
      }
    }
  }
  if (*(_BYTE *)v5 != 8)
    return 0;
  v31 = __s2 + 1;
  v30 = __s2[1];
  if (v30 == 34)
  {
    v32 = 0;
    v33 = __s2 + 2;
    while (1)
    {
      if (!v31[v32 + 1])
        goto LABEL_99;
      if (v31[v32 + 1] == 34)
        break;
      ++v32;
    }
    v54 = v32 + 2;
  }
  else
  {
    v32 = 0;
    if (__s2[1])
    {
      do
      {
        if (v30 == 46)
          break;
        if (v30 == 91)
          break;
        v30 = v31[++v32];
      }
      while (v31[v32]);
    }
    if (!v32)
    {
LABEL_99:
      v5 = 0;
      *a5 = v31;
      return v5;
    }
    v54 = v32;
    v33 = __s2 + 1;
  }
  v34 = v32;
  v35 = v32 + 2;
  v36 = *(_DWORD *)(v5 + 4);
  if (v36)
  {
LABEL_83:
    for (j = 1; j <= v36; j = v38 + v44)
    {
      v39 = j;
      v40 = v5 + 16 * j;
      v41 = *(_BYTE *)(v40 + 1);
      v42 = *(_DWORD *)(v40 + 4);
      if ((v41 & 1) != 0)
      {
        if (v42 != (_DWORD)v34)
          goto LABEL_92;
        v43 = *(const char **)(v5 + 16 * v39 + 8);
      }
      else
      {
        if (v42 != v35)
          goto LABEL_92;
        v43 = (const char *)(*(_QWORD *)(v5 + 16 * v39 + 8) + 1);
      }
      if (!strncmp(v43, v33, v34))
      {
        LODWORD(v8) = v8 + v39 + 1;
        __s2 = &v31[v54];
        goto LABEL_5;
      }
LABEL_92:
      v44 = (v39 + 1);
      if (*(unsigned __int8 *)(v5 + 16 * v44) >= 7u)
        v38 = *(_DWORD *)(v5 + 16 * v44 + 4) + 1;
      else
        v38 = 1;
    }
  }
  while ((*(_BYTE *)(v5 + 1) & 0x10) != 0 && *(_BYTE *)(a1 + 54))
  {
    v8 = *(unsigned int *)(v5 + 8);
    v5 = v10 + 16 * v8;
    v36 = *(_DWORD *)(v5 + 4);
    if (v36)
      goto LABEL_83;
  }
  if (!a4)
    return 0;
  v45 = sub_1ACC49920((unsigned int *)a1, 8, 2, 0);
  v46 = sub_1ACC49920((unsigned int *)a1, 6, v34, (uint64_t)v33);
  v47 = sub_1ACC49FFC((unsigned int *)a1, &v31[v54], a4);
  v5 = 0;
  if (!*(_BYTE *)(a1 + 51) && v47)
  {
    v48 = *(_QWORD *)(a1 + 8) + 16 * v8;
    *(_DWORD *)(v48 + 8) = v45;
    *(_BYTE *)(v48 + 1) |= 0x10u;
    v49 = *(_QWORD *)(a1 + 8) + 16 * v46;
    v50 = *(_BYTE *)(v49 + 1) | 1;
LABEL_104:
    *(_BYTE *)(v49 + 1) = v50;
    return v47;
  }
  return v5;
}

uint64_t sub_1ACC49FFC(unsigned int *a1, char *__s2, _DWORD *a3)
{
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  __int16 v12;

  v4 = a1;
  *a3 = 1;
  if (*__s2 == 46)
  {
    v7 = *a1;
    if (v7 < a1[1])
    {
      v8 = *((_QWORD *)a1 + 1) + 16 * v7;
      v9 = 8;
      goto LABEL_11;
    }
    v12 = 8;
  }
  else
  {
    if (!*__s2)
    {
      v5 = *a1;
      if (v5 >= a1[1])
      {
        sub_1ACC499B4(a1, 1, 0, 0);
        if (!*((_BYTE *)v4 + 51))
          return *((_QWORD *)v4 + 1) + 16 * (*v4 - 1);
      }
      else
      {
        v6 = *((_QWORD *)a1 + 1) + 16 * v5;
        *(_WORD *)v6 = 1;
        *(_DWORD *)(v6 + 4) = 0;
        *(_QWORD *)(v6 + 8) = 0;
        ++*a1;
        if (!*((_BYTE *)a1 + 51))
          return *((_QWORD *)v4 + 1) + 16 * (*v4 - 1);
      }
      return 0;
    }
    if (strncmp(__s2, "[0]", 3uLL))
      return 0;
    v10 = *v4;
    if (v10 < v4[1])
    {
      v8 = *((_QWORD *)v4 + 1) + 16 * v10;
      v9 = 7;
LABEL_11:
      *(_WORD *)v8 = v9;
      *(_DWORD *)(v8 + 4) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      ++*v4;
      if (!*((_BYTE *)v4 + 51))
        return sub_1ACC49A80((int)v4, *v4 - 1, __s2);
      return 0;
    }
    a1 = v4;
    v12 = 7;
  }
  sub_1ACC499B4(a1, v12, 0, 0);
  if (*((_BYTE *)v4 + 51))
    return 0;
  return sub_1ACC49A80((int)v4, *v4 - 1, __s2);
}

uint64_t sub_1ACC4A174(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  size_t v13;
  int v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unsigned __int8 *v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  unsigned __int8 *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  unsigned __int8 *v52;
  int v53;
  uint64_t v54;
  size_t v55;
  uint64_t v56;
  unsigned int v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  const char *v69;
  uint64_t v70;
  const void *v71;
  int v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;

  v4 = result;
  v5 = *(_BYTE *)(a2 + 1);
  if ((v5 & 8) != 0)
  {
    v6 = a2;
    while (*(_BYTE *)(result + 54))
    {
      v7 = *(_QWORD *)(result + 8);
      for (i = *(unsigned int *)(result + 72);
            *(_DWORD *)(v7 + 16 * i + 4) != ((unint64_t)(v6 - v7) >> 4);
      v6 = v7 + 16 * (i + 1);
      if ((*(_BYTE *)(v6 + 1) & 8) == 0)
      {
        v5 = *(_BYTE *)(v6 + 1);
        goto LABEL_10;
      }
    }
  }
  v6 = a2;
LABEL_10:
  switch(*(_BYTE *)v6)
  {
    case 2:
      v9 = a3[3];
      if ((unint64_t)(v9 + 4) < a3[2])
      {
        v10 = a3[1];
        v11 = 1702195828;
        goto LABEL_24;
      }
      v26 = "true";
      goto LABEL_38;
    case 3:
      v19 = a3[3];
      if ((unint64_t)(v19 + 5) >= a3[2])
        return sub_1ACC4B11C((uint64_t)a3, "false", 5u);
      v20 = a3[1] + v19;
      *(_BYTE *)(v20 + 4) = 101;
      *(_DWORD *)v20 = 1936482662;
      a3[3] += 5;
      return result;
    case 4:
      v12 = *(unsigned __int8 **)(v6 + 8);
      v13 = *(unsigned int *)(v6 + 4);
      if ((v5 & 0x40) == 0)
        goto LABEL_28;
      v14 = *v12;
      if (v14 == 43)
        goto LABEL_144;
      if (v14 == 45)
      {
        v15 = a3[3];
        if (v15 >= a3[2])
        {
          sub_1ACC4B3BC((uint64_t)a3, 45);
        }
        else
        {
          v16 = a3[1];
          a3[3] = v15 + 1;
          *(_BYTE *)(v16 + v15) = 45;
        }
LABEL_144:
        v72 = *++v12;
        v14 = v72;
        LODWORD(v13) = v13 - 1;
      }
      if (v14 != 48 || (v12[1] | 0x20) != 0x78)
        goto LABEL_178;
      v84 = 0;
      result = sub_1ACBD3BF4((char *)v12, &v84);
      if ((int)result <= 1)
        return sub_1ACC4B3FC(100, a3, "%lld", v84);
      v80 = a3[3];
      if ((unint64_t)(v80 + 7) >= a3[2])
        return sub_1ACC4B11C((uint64_t)a3, "9.0e999", 7u);
      v81 = (_DWORD *)(a3[1] + v80);
      *(_DWORD *)((char *)v81 + 3) = 960051557;
      *v81 = 1697656377;
      a3[3] += 7;
      return result;
    case 5:
      v12 = *(unsigned __int8 **)(v6 + 8);
      v13 = *(unsigned int *)(v6 + 4);
      if ((v5 & 0x40) == 0)
        goto LABEL_28;
      v29 = *v12;
      if (v29 == 43)
        goto LABEL_150;
      if (v29 == 45)
      {
        v30 = a3[3];
        if (v30 >= a3[2])
        {
          result = sub_1ACC4B3BC((uint64_t)a3, 45);
        }
        else
        {
          v31 = a3[1];
          a3[3] = v30 + 1;
          *(_BYTE *)(v31 + v30) = 45;
        }
LABEL_150:
        LODWORD(v13) = v13 - 1;
        v73 = *++v12;
        v29 = v73;
      }
      if (v29 == 46)
      {
        v74 = a3[3];
        if (v74 >= a3[2])
        {
          result = sub_1ACC4B3BC((uint64_t)a3, 48);
        }
        else
        {
          v75 = a3[1];
          a3[3] = v74 + 1;
          *(_BYTE *)(v75 + v74) = 48;
        }
      }
      if (!(_DWORD)v13)
        return result;
      v76 = 0;
      v77 = v13;
      while (2)
      {
        if (v12[v76] != 46)
          goto LABEL_157;
        if (v13 - 1 != v76)
        {
          if ((unint64_t)v12[v76 + 1] - 58 > 0xFFFFFFFFFFFFFFF5)
          {
LABEL_157:
            if (v13 == ++v76)
              goto LABEL_177;
            continue;
          }
          v77 = v76 + 1;
        }
        break;
      }
      v78 = a3[3];
      if (v78 + (unint64_t)v77 >= a3[2])
      {
        result = sub_1ACC4B11C((uint64_t)a3, v12, v77);
        v79 = a3[3];
      }
      else
      {
        result = (uint64_t)memcpy((void *)(a3[1] + v78), v12, v77);
        v79 = a3[3] + v77;
        a3[3] = v79;
      }
      v12 += v77;
      LODWORD(v13) = v13 - v77;
      if (v79 >= a3[2])
      {
        result = sub_1ACC4B3BC((uint64_t)a3, 48);
      }
      else
      {
        v82 = a3[1];
        a3[3] = v79 + 1;
        *(_BYTE *)(v82 + v79) = 48;
      }
LABEL_177:
      if ((_DWORD)v13)
      {
LABEL_178:
        v83 = a3[3];
        if (v83 + (unint64_t)v13 >= a3[2])
        {
LABEL_180:
          v27 = (uint64_t)a3;
          v26 = (const char *)v12;
          v28 = v13;
          return sub_1ACC4B11C(v27, v26, v28);
        }
        else
        {
          result = (uint64_t)memcpy((void *)(a3[1] + v83), v12, v13);
          a3[3] += v13;
        }
      }
      return result;
    case 6:
      if ((v5 & 1) == 0)
      {
        v12 = *(unsigned __int8 **)(v6 + 8);
        v13 = *(unsigned int *)(v6 + 4);
        if ((v5 & 0x40) == 0)
        {
LABEL_28:
          v21 = a3[3];
          if (v21 + v13 >= a3[2])
            goto LABEL_180;
          result = (uint64_t)memcpy((void *)(a3[1] + v21), v12, v13);
          a3[3] += v13;
          return result;
        }
        v17 = a3[3];
        if (v17 >= a3[2])
        {
          result = sub_1ACC4B3BC((uint64_t)a3, 34);
        }
        else
        {
          v18 = a3[1];
          a3[3] = v17 + 1;
          *(_BYTE *)(v18 + v17) = 34;
        }
        v51 = v13 - 2;
        if ((_DWORD)v13 != 2)
        {
          v52 = v12 + 1;
          while (1)
          {
            v54 = 0;
            v55 = v51;
            while (v52[v54] != 92)
            {
              if (v51 == ++v54)
              {
                LODWORD(v54) = v51;
                goto LABEL_106;
              }
            }
            if ((_DWORD)v54)
            {
              v55 = v54;
LABEL_106:
              v56 = a3[3];
              if (v56 + v55 >= a3[2])
              {
                result = sub_1ACC4B11C((uint64_t)a3, v52, v54);
              }
              else
              {
                result = (uint64_t)memcpy((void *)(a3[1] + v56), v52, v55);
                a3[3] += v55;
              }
              v51 -= v54;
              if (!v51)
                goto LABEL_165;
              v52 += v55;
            }
            v57 = v52[1];
            if (v57 <= 0x75)
            {
              switch(v52[1])
              {
                case 0xAu:
                  goto LABEL_99;
                case 0xDu:
                  v53 = v52[2] == 10;
                  if (v52[2] == 10)
                    ++v52;
                  v51 -= v53;
                  goto LABEL_99;
                case 0x27u:
                  v58 = a3[3];
                  if (v58 >= a3[2])
                  {
                    result = sub_1ACC4B3BC((uint64_t)a3, 39);
                  }
                  else
                  {
                    v59 = a3[1];
                    a3[3] = v58 + 1;
                    *(_BYTE *)(v59 + v58) = 39;
                  }
                  goto LABEL_99;
                case 0x30u:
                  v60 = a3[3];
                  if ((unint64_t)(v60 + 6) < a3[2])
                  {
                    v61 = a3[1] + v60;
                    v62 = 12336;
                    goto LABEL_123;
                  }
                  v68 = (uint64_t)a3;
                  v69 = "\\u0000";
                  break;
                default:
                  goto LABEL_126;
              }
              goto LABEL_132;
            }
            if (v57 == 118)
              break;
            if (v57 == 120)
            {
              v65 = a3[3];
              if ((unint64_t)(v65 + 4) >= a3[2])
              {
                result = sub_1ACC4B11C((uint64_t)a3, "\\u00", 4u);
                v66 = a3[3];
              }
              else
              {
                *(_DWORD *)(a3[1] + v65) = 808482140;
                v66 = a3[3] + 4;
                a3[3] = v66;
              }
              v52 += 2;
              if ((unint64_t)(v66 + 2) >= a3[2])
              {
                result = sub_1ACC4B11C((uint64_t)a3, v52, 2u);
              }
              else
              {
                *(_WORD *)(a3[1] + v66) = *(_WORD *)v52;
                a3[3] += 2;
              }
              v51 -= 2;
              goto LABEL_99;
            }
            if (v57 != 226)
            {
LABEL_126:
              v67 = a3[3];
              if ((unint64_t)(v67 + 2) >= a3[2])
              {
                result = sub_1ACC4B11C((uint64_t)a3, v52, 2u);
                goto LABEL_99;
              }
              *(_WORD *)(a3[1] + v67) = *(_WORD *)v52;
              v64 = a3[3] + 2;
LABEL_128:
              a3[3] = v64;
              goto LABEL_99;
            }
            v52 += 2;
            v51 -= 2;
LABEL_99:
            v52 += 2;
            v51 -= 2;
            if (!v51)
              goto LABEL_165;
          }
          v63 = a3[3];
          if ((unint64_t)(v63 + 6) >= a3[2])
          {
            v68 = (uint64_t)a3;
            v69 = "\\u0009";
LABEL_132:
            result = sub_1ACC4B11C(v68, v69, 6u);
            goto LABEL_99;
          }
          v61 = a3[1] + v63;
          v62 = 14640;
LABEL_123:
          *(_WORD *)(v61 + 4) = v62;
          *(_DWORD *)v61 = 808482140;
          v64 = a3[3] + 6;
          goto LABEL_128;
        }
LABEL_165:
        v38 = a3[3];
        goto LABEL_166;
      }
      if ((v5 & 0x20) == 0)
        return sub_1ACC4AEE0((uint64_t)a3, *(unsigned __int8 **)(v6 + 8), *(_DWORD *)(v6 + 4));
      v49 = a3[3];
      if (v49 >= a3[2])
      {
        result = sub_1ACC4B3BC((uint64_t)a3, 34);
      }
      else
      {
        v50 = a3[1];
        a3[3] = v49 + 1;
        *(_BYTE *)(v50 + v49) = 34;
      }
      v70 = *(unsigned int *)(v6 + 4);
      v38 = a3[3];
      if ((_DWORD)v70)
      {
        v71 = *(const void **)(v6 + 8);
        if (v38 + v70 < a3[2])
        {
          result = (uint64_t)memcpy((void *)(a3[1] + v38), v71, *(unsigned int *)(v6 + 4));
          v38 = a3[3] + v70;
          a3[3] = v38;
          goto LABEL_166;
        }
        result = sub_1ACC4B11C((uint64_t)a3, v71, *(_DWORD *)(v6 + 4));
        goto LABEL_165;
      }
LABEL_166:
      if (v38 < a3[2])
      {
        v39 = a3[1];
        a3[3] = v38 + 1;
        v40 = 34;
        goto LABEL_168;
      }
      return sub_1ACC4B3BC((uint64_t)a3, 34);
    case 7:
      v22 = a3[3];
      if (v22 >= a3[2])
      {
        result = sub_1ACC4B3BC((uint64_t)a3, 91);
      }
      else
      {
        v23 = a3[1];
        a3[3] = v22 + 1;
        *(_BYTE *)(v23 + v22) = 91;
      }
      if (*(_DWORD *)(v6 + 4))
        goto LABEL_46;
      while ((*(_BYTE *)(v6 + 1) & 0x10) != 0 && *(_BYTE *)(v4 + 54))
      {
        v6 = *(_QWORD *)(v4 + 8) + 16 * *(unsigned int *)(v6 + 8);
        if (*(_DWORD *)(v6 + 4))
        {
LABEL_46:
          v32 = 1;
          do
          {
            v34 = (unsigned __int8 *)(v6 + 16 * v32);
            if ((v34[1] & 4) == 0 || !*(_BYTE *)(v4 + 54))
            {
              v35 = a3[3];
              if (v35)
              {
                v36 = a3[1];
                if ((*(_BYTE *)(v35 + v36 - 1) & 0xDF) != 0x5B)
                {
                  if (v35 >= a3[2])
                  {
                    sub_1ACC4B3BC((uint64_t)a3, 44);
                  }
                  else
                  {
                    a3[3] = v35 + 1;
                    *(_BYTE *)(v36 + v35) = 44;
                  }
                }
              }
              result = sub_1ACC4A174(v4, v6 + 16 * v32, a3);
            }
            v37 = v32;
            if (*v34 >= 7u)
              v33 = *(_DWORD *)(v6 + 16 * v32 + 4) + 1;
            else
              v33 = 1;
            v32 += v33;
          }
          while (v33 + v37 <= *(_DWORD *)(v6 + 4));
        }
      }
      v38 = a3[3];
      if (v38 < a3[2])
      {
        v39 = a3[1];
        a3[3] = v38 + 1;
        v40 = 93;
        goto LABEL_168;
      }
      return sub_1ACC4B3BC((uint64_t)a3, 93);
    case 8:
      v24 = a3[3];
      if (v24 >= a3[2])
      {
        result = sub_1ACC4B3BC((uint64_t)a3, 123);
      }
      else
      {
        v25 = a3[1];
        a3[3] = v24 + 1;
        *(_BYTE *)(v25 + v24) = 123;
      }
      if (*(_DWORD *)(v6 + 4))
        goto LABEL_67;
      while ((*(_BYTE *)(v6 + 1) & 0x10) != 0 && *(_BYTE *)(v4 + 54))
      {
        v6 = *(_QWORD *)(v4 + 8) + 16 * *(unsigned int *)(v6 + 8);
        if (*(_DWORD *)(v6 + 4))
        {
LABEL_67:
          v41 = 1;
          do
          {
            v43 = v41 + 1;
            v44 = (unsigned __int8 *)(v6 + 16 * v43);
            if ((v44[1] & 4) == 0 || !*(_BYTE *)(v4 + 54))
            {
              v45 = a3[3];
              if (v45)
              {
                v46 = a3[1];
                if ((*(_BYTE *)(v45 + v46 - 1) & 0xDF) != 0x5B)
                {
                  if (v45 >= a3[2])
                  {
                    sub_1ACC4B3BC((uint64_t)a3, 44);
                  }
                  else
                  {
                    a3[3] = v45 + 1;
                    *(_BYTE *)(v46 + v45) = 44;
                  }
                }
              }
              sub_1ACC4A174(v4, v6 + 16 * v41, a3);
              v47 = a3[3];
              if (v47 >= a3[2])
              {
                sub_1ACC4B3BC((uint64_t)a3, 58);
              }
              else
              {
                v48 = a3[1];
                a3[3] = v47 + 1;
                *(_BYTE *)(v48 + v47) = 58;
              }
              result = sub_1ACC4A174(v4, v6 + 16 * v43, a3);
            }
            if (*v44 >= 7u)
              v42 = *(_DWORD *)(v6 + 16 * v43 + 4) + 1;
            else
              v42 = 1;
            v41 = v43 + v42;
          }
          while ((v43 + v42) <= *(_DWORD *)(v6 + 4));
        }
      }
      v38 = a3[3];
      if (v38 >= a3[2])
        return sub_1ACC4B3BC((uint64_t)a3, 125);
      v39 = a3[1];
      a3[3] = v38 + 1;
      v40 = 125;
LABEL_168:
      *(_BYTE *)(v39 + v38) = v40;
      return result;
    default:
      v9 = a3[3];
      if ((unint64_t)(v9 + 4) < a3[2])
      {
        v10 = a3[1];
        v11 = 1819047278;
LABEL_24:
        *(_DWORD *)(v10 + v9) = v11;
        a3[3] += 4;
        return result;
      }
      v26 = "null";
LABEL_38:
      v27 = (uint64_t)a3;
      v28 = 4;
      return sub_1ACC4B11C(v27, v26, v28);
  }
}

double sub_1ACC4AC7C(uint64_t a1)
{
  int v2;
  sqlite3_context *v3;
  const char *v4;
  sqlite3_uint64 v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t (**v13)(_QWORD);
  double result;
  uint64_t v15;

  v2 = *(unsigned __int8 *)(a1 + 33);
  if (!*(_BYTE *)(a1 + 33))
  {
    if (*(_BYTE *)(a1 + 32))
    {
      v3 = *(sqlite3_context **)a1;
      v4 = *(const char **)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 24);
      v6 = -1;
      goto LABEL_4;
    }
    v7 = *(_QWORD *)(a1 + 24);
    if (v7 < *(_QWORD *)(a1 + 16))
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 24) = v7 + 1;
      *(_BYTE *)(v8 + v7) = 0;
      v2 = *(unsigned __int8 *)(a1 + 33);
      if (*(_BYTE *)(a1 + 33))
        goto LABEL_8;
LABEL_21:
      v15 = *(_QWORD *)(a1 + 24);
      v5 = v15 - 1;
      *(_QWORD *)(a1 + 24) = v15 - 1;
      if (*(_BYTE *)(a1 + 32))
      {
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)(a1 + 24) = v15;
        sub_1ACC4B17C(a1, v15);
        v5 = *(_QWORD *)(a1 + 24) - 1;
        *(_QWORD *)(a1 + 24) = v5;
        if (*(_BYTE *)(a1 + 32))
          goto LABEL_5;
      }
      v3 = *(sqlite3_context **)a1;
      v4 = *(const char **)(a1 + 8);
      ++*((_QWORD *)v4 - 1);
      v6 = (uint64_t)sub_1ACBF1160;
LABEL_4:
      sqlite3_result_text64(v3, v4, v5, (void (__cdecl *)(void *))v6, 1u);
LABEL_5:
      v2 = *(unsigned __int8 *)(a1 + 33);
      goto LABEL_8;
    }
    sub_1ACC4B3BC(a1, 0);
    v2 = *(unsigned __int8 *)(a1 + 33);
    if (!*(_BYTE *)(a1 + 33))
      goto LABEL_21;
  }
LABEL_8:
  if (v2 == 1)
    sqlite3_result_error_nomem(*(sqlite3_context **)a1);
  if (!*(_BYTE *)(a1 + 32))
  {
    v9 = *(_QWORD *)(a1 + 8);
    v12 = *(_QWORD *)(v9 - 8);
    v11 = (_QWORD *)(v9 - 8);
    v10 = v12;
    if (v12 >= 2)
    {
      *v11 = v10 - 1;
      goto LABEL_19;
    }
    v13 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_18:
      (*v13)(v11);
      goto LABEL_19;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v11);
    v11 = (_QWORD *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v13 = &xmmword_1ECD3B1D0;
      goto LABEL_18;
    }
  }
LABEL_19:
  *(_QWORD *)(a1 + 8) = a1 + 34;
  *(_QWORD *)&result = 100;
  *(_OWORD *)(a1 + 16) = xmmword_1ACCBDE10;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

void *sub_1ACC4AE24(_QWORD *a1, const void *a2, size_t __n)
{
  uint64_t v4;
  uint64_t v5;
  void *result;

  v4 = __n;
  v5 = a1[3];
  if (v5 + (unint64_t)__n >= a1[2])
    return (void *)sub_1ACC4B11C((uint64_t)a1, a2, __n);
  result = memcpy((void *)(a1[1] + v5), a2, __n);
  a1[3] += v4;
  return result;
}

_QWORD *sub_1ACC4AE80(_QWORD *result, const void *a2, size_t __n)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  if ((_DWORD)__n)
  {
    v3 = result;
    v4 = __n;
    v5 = result[3];
    if (v5 + (unint64_t)__n >= result[2])
    {
      return (_QWORD *)sub_1ACC4B11C((uint64_t)result, a2, __n);
    }
    else
    {
      result = memcpy((void *)(result[1] + v5), a2, __n);
      v3[3] += v4;
    }
  }
  return result;
}

uint64_t sub_1ACC4AEE0(uint64_t result, unsigned __int8 *a2, unsigned int a3)
{
  unsigned __int8 *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  if (a2)
  {
    v4 = a2;
    v5 = (_QWORD *)result;
    v6 = a3;
    v7 = *(_QWORD *)(result + 24);
    if ((unint64_t)a3 + v7 + 2 >= *(_QWORD *)(result + 16))
    {
      result = sub_1ACC4B17C(result, a3 + 2);
      if ((_DWORD)result)
        return result;
      v7 = v5[3];
    }
    v8 = v5[1];
    v5[3] = v7 + 1;
    *(_BYTE *)(v8 + v7) = 34;
    if (a3)
    {
      v9 = v6 + 7;
      while (1)
      {
        v13 = *v4++;
        v12 = v13;
        if (byte_1ACCBA824[v13])
        {
          v10 = v5[1];
          v11 = v5[3];
          v5[3] = v11 + 1;
          *(_BYTE *)(v10 + v11) = v12;
          goto LABEL_8;
        }
        if ((_DWORD)v12 == 92)
          break;
        if ((_DWORD)v12 == 39)
        {
          v15 = v5[1];
          v16 = v5[3];
          v5[3] = v16 + 1;
          *(_BYTE *)(v15 + v16) = 39;
          goto LABEL_8;
        }
        if ((_DWORD)v12 == 34)
          break;
        v14 = byte_1ACCBAA24[v12];
        if (v14)
          goto LABEL_16;
        v21 = v5[3];
        if ((unint64_t)(v9 + v21) > v5[2])
        {
          result = sub_1ACC4B17C((uint64_t)v5, (int)v6 + 7);
          if ((_DWORD)result)
            return result;
          v21 = v5[3];
        }
        v22 = v5[1];
        v5[3] = v21 + 1;
        *(_BYTE *)(v22 + v21) = 92;
        v23 = v5[1];
        v24 = v5[3];
        v5[3] = v24 + 1;
        *(_BYTE *)(v23 + v24) = 117;
        v25 = v5[1];
        v26 = v5[3];
        v5[3] = v26 + 1;
        *(_BYTE *)(v25 + v26) = 48;
        v27 = v5[1];
        v28 = v5[3];
        v5[3] = v28 + 1;
        *(_BYTE *)(v27 + v28) = 48;
        LOBYTE(v28) = a0123456789abcd[(unint64_t)v12 >> 4];
        v29 = v5[1];
        v30 = v5[3];
        v5[3] = v30 + 1;
        *(_BYTE *)(v29 + v30) = v28;
        LOBYTE(v27) = a0123456789abcd[v12 & 0xF];
        v31 = v5[1];
        v32 = v5[3];
        v5[3] = v32 + 1;
        *(_BYTE *)(v31 + v32) = v27;
LABEL_8:
        ++v9;
        if (!--v6)
          goto LABEL_24;
      }
      v14 = v12;
LABEL_16:
      v17 = v5[3];
      if ((unint64_t)(v6 + v17 + 3) > v5[2])
      {
        result = sub_1ACC4B17C((uint64_t)v5, (int)v6 + 3);
        if ((_DWORD)result)
          return result;
        v17 = v5[3];
      }
      v18 = v5[1];
      v5[3] = v17 + 1;
      *(_BYTE *)(v18 + v17) = 92;
      v19 = v5[1];
      v20 = v5[3];
      v5[3] = v20 + 1;
      *(_BYTE *)(v19 + v20) = v14;
      goto LABEL_8;
    }
LABEL_24:
    v33 = v5[1];
    v34 = v5[3];
    v5[3] = v34 + 1;
    *(_BYTE *)(v33 + v34) = 34;
  }
  return result;
}

uint64_t sub_1ACC4B11C(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t result;

  result = sub_1ACC4B17C(a1, a3);
  if (!(_DWORD)result)
  {
    result = (uint64_t)memcpy((void *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(a1 + 24)), a2, a3);
    *(_QWORD *)(a1 + 24) += a3;
  }
  return result;
}

uint64_t sub_1ACC4B17C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  void (**v7)(uint64_t);
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t (**v15)(_QWORD);

  v3 = *(_QWORD *)(a1 + 16);
  if (v3 <= a2)
    v4 = a2 + v3 + 10;
  else
    v4 = 2 * v3;
  if (*(_BYTE *)(a1 + 32))
  {
    if (*(_BYTE *)(a1 + 33))
      return 1;
    if (!sqlite3_initialize())
    {
      v13 = (_QWORD *)sub_1ACB5D828(v4 + 9);
      if (v13)
      {
        *v13 = 1;
        v14 = v13 + 1;
        memcpy(v13 + 1, *(const void **)(a1 + 8), *(_QWORD *)(a1 + 24));
        *(_QWORD *)(a1 + 8) = v14;
        *(_BYTE *)(a1 + 32) = 0;
        goto LABEL_23;
      }
    }
    *(_BYTE *)(a1 + 33) = 1;
    sqlite3_result_error_nomem(*(sqlite3_context **)a1);
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_30;
    v8 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(v8 - 8);
    v10 = (_QWORD *)(v8 - 8);
    v9 = v11;
    if (v11 < 2)
    {
      v15 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v10);
        v10 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_30;
        v15 = &xmmword_1ECD3B1D0;
      }
      (*v15)(v10);
    }
    else
    {
      *v10 = v9 - 1;
    }
LABEL_30:
    *(_QWORD *)(a1 + 8) = a1 + 34;
    *(_OWORD *)(a1 + 16) = xmmword_1ACCBDE10;
    *(_BYTE *)(a1 + 32) = 1;
    return 7;
  }
  v6 = *(_QWORD *)(a1 + 8) - 8;
  if (!sqlite3_initialize())
  {
    v12 = sub_1ACB6BB48(v6, v4 + 9);
    if (v12)
    {
      *(_QWORD *)(a1 + 8) = v12 + 8;
LABEL_23:
      result = 0;
      *(_QWORD *)(a1 + 16) = v4;
      return result;
    }
  }
  v7 = (void (**)(uint64_t))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v6);
    v6 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      goto LABEL_14;
    v7 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
  }
  (*v7)(v6);
LABEL_14:
  *(_QWORD *)(a1 + 8) = a1 + 34;
  *(_OWORD *)(a1 + 16) = xmmword_1ACCBDE10;
  *(_WORD *)(a1 + 32) = 257;
  return 7;
}

uint64_t sub_1ACC4B3BC(uint64_t a1, char a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1ACC4B17C(a1, 1u);
  if (!(_DWORD)result)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = v6 + 1;
    *(_BYTE *)(v5 + v6) = a2;
  }
  return result;
}

uint64_t sub_1ACC4B3FC(signed int a1, _QWORD *a2, char *zFormat, ...)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _QWORD v11[2];
  signed int v12;
  uint64_t v13;
  int v14;
  va_list va;

  va_start(va, zFormat);
  if ((unint64_t)(a2[3] + a1) < a2[2] || (result = sub_1ACC4B17C((uint64_t)a2, a1), !(_DWORD)result))
  {
    if (a1 >= 1)
    {
      v7 = a2[1];
      v8 = a2[3];
      v9 = (_BYTE *)(v7 + v8);
      if (zFormat && v7)
      {
        v11[0] = 0;
        v11[1] = v7 + v8;
        v12 = a1;
        v13 = 0;
        v14 = 0;
        sqlite3_str_vappendf((sqlite3_str *)v11, zFormat, va);
        v9 += HIDWORD(v13);
LABEL_8:
        *v9 = 0;
        goto LABEL_9;
      }
      sub_1ACBBE20C(32991);
      if (v7)
        goto LABEL_8;
    }
LABEL_9:
    v10 = a2[3];
    result = strlen((const char *)(a2[1] + v10));
    a2[3] = v10 + (int)result;
  }
  return result;
}

_QWORD *sub_1ACC4B4D4(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  int v4;
  unsigned __int8 *v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  const char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (**v17)(_QWORD);

  v2 = result;
  if (!a2)
  {
    result = (_QWORD *)sub_1ACBBE20C(97202);
LABEL_8:
    if (*((_BYTE *)v2 + 33))
      return result;
    v6 = *v2;
    if (*v2)
    {
      *(_DWORD *)(v6 + 36) = 1;
      result = (_QWORD *)sub_1ACB57870(*(_QWORD *)v6, "JSON cannot hold BLOB values", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    }
    else
    {
      result = (_QWORD *)sub_1ACBBE20C(97389);
    }
    *((_BYTE *)v2 + 33) = 2;
    if (!*((_BYTE *)v2 + 32))
    {
      v9 = v2[1];
      v12 = *(_QWORD *)(v9 - 8);
      v11 = (_QWORD *)(v9 - 8);
      v10 = v12;
      if (v12 < 2)
      {
        v17 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
          --qword_1ECD3E8D0;
          result = (_QWORD *)off_1ECD3B168(v11);
          v11 = (_QWORD *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_64;
          v17 = &xmmword_1ECD3B1D0;
        }
        result = (_QWORD *)(*v17)(v11);
      }
      else
      {
        *v11 = v10 - 1;
      }
    }
LABEL_64:
    v2[1] = (char *)v2 + 34;
    *((_OWORD *)v2 + 1) = xmmword_1ACCBDE10;
    *((_BYTE *)v2 + 32) = 1;
    return result;
  }
  v4 = *(unsigned __int16 *)(a2 + 20);
  switch(v4 & 0x3F)
  {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
    case 0xB:
    case 0xD:
    case 0xF:
    case 0x11:
    case 0x13:
    case 0x15:
    case 0x17:
    case 0x19:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x21:
    case 0x23:
    case 0x25:
    case 0x27:
    case 0x29:
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x31:
    case 0x33:
    case 0x35:
    case 0x37:
    case 0x39:
    case 0x3B:
    case 0x3D:
    case 0x3F:
      v8 = result[3];
      if ((unint64_t)(v8 + 4) < result[2])
      {
        *(_DWORD *)(result[1] + v8) = 1819047278;
        result[3] += 4;
        return result;
      }
      v13 = "null";
      v14 = 4;
      goto LABEL_57;
    case 2:
    case 0x12:
    case 0x32:
      if ((~v4 & 0x202) != 0 || *(_BYTE *)(a2 + 22) != 1)
      {
        if ((v4 & 1) != 0)
        {
          v5 = 0;
          if ((v4 & 2) == 0)
            goto LABEL_43;
        }
        else
        {
          result = (_QWORD *)sub_1ACBF2B64((int *)a2, 1);
          v5 = (unsigned __int8 *)result;
          LOWORD(v4) = *(_WORD *)(a2 + 20);
          if ((v4 & 2) == 0)
            goto LABEL_43;
        }
      }
      else
      {
        v5 = *(unsigned __int8 **)(a2 + 8);
        if ((v4 & 2) == 0)
          goto LABEL_43;
      }
      if (*(_BYTE *)(a2 + 22) == 1)
      {
        v14 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0x800) == 0)
          return (_QWORD *)sub_1ACC4AEE0((uint64_t)v2, v5, v14);
        goto LABEL_52;
      }
LABEL_43:
      if ((v4 & 0x10) != 0)
      {
        v14 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0x400) != 0)
          v14 += *(_DWORD *)a2;
        if ((v4 & 0x800) == 0)
          return (_QWORD *)sub_1ACC4AEE0((uint64_t)v2, v5, v14);
      }
      else if ((v4 & 1) != 0)
      {
        v14 = 0;
        if ((v4 & 0x800) == 0)
          return (_QWORD *)sub_1ACC4AEE0((uint64_t)v2, v5, v14);
      }
      else
      {
        result = (_QWORD *)sub_1ACBF2B3C(a2, 1);
        v14 = result;
        if ((*(_WORD *)(a2 + 20) & 0x800) == 0)
          return (_QWORD *)sub_1ACC4AEE0((uint64_t)v2, v5, v14);
      }
LABEL_52:
      if (*(_BYTE *)(a2 + 23) == 74)
        goto LABEL_53;
      return (_QWORD *)sub_1ACC4AEE0((uint64_t)v2, v5, v14);
    case 4:
    case 6:
    case 0xC:
    case 0xE:
    case 0x14:
    case 0x16:
    case 0x1C:
    case 0x1E:
      if ((~v4 & 0x202) != 0 || *(_BYTE *)(a2 + 22) != 1)
      {
        if ((v4 & 1) != 0)
        {
          v5 = 0;
          if ((v4 & 2) == 0)
            goto LABEL_36;
        }
        else
        {
          result = (_QWORD *)sub_1ACBF2B64((int *)a2, 1);
          v5 = (unsigned __int8 *)result;
          LOWORD(v4) = *(_WORD *)(a2 + 20);
          if ((v4 & 2) == 0)
            goto LABEL_36;
        }
      }
      else
      {
        v5 = *(unsigned __int8 **)(a2 + 8);
        if ((v4 & 2) == 0)
          goto LABEL_36;
      }
      if (*(_BYTE *)(a2 + 22) == 1)
      {
        v14 = *(_DWORD *)(a2 + 16);
        goto LABEL_53;
      }
LABEL_36:
      if ((v4 & 0x10) != 0)
      {
        v14 = *(_DWORD *)(a2 + 16);
        if ((v4 & 0x400) != 0)
          v14 += *(_DWORD *)a2;
      }
      else
      {
        if ((v4 & 1) != 0)
          return result;
        result = (_QWORD *)sub_1ACBF2B3C(a2, 1);
        v14 = result;
      }
LABEL_53:
      if (v14)
      {
        v15 = v14;
        v16 = v2[3];
        if (v16 + (unint64_t)v14 >= v2[2])
        {
          result = v2;
          v13 = (const char *)v5;
LABEL_57:
          result = (_QWORD *)sub_1ACC4B11C((uint64_t)result, v13, v14);
        }
        else
        {
          result = memcpy((void *)(v2[1] + v16), v5, v14);
          v2[3] += v15;
        }
      }
      break;
    case 8:
    case 0xA:
    case 0x18:
    case 0x1A:
    case 0x20:
    case 0x22:
    case 0x24:
    case 0x26:
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x34:
    case 0x36:
    case 0x38:
    case 0x3A:
    case 0x3C:
    case 0x3E:
      if ((v4 & 8) != 0)
      {
        v7 = *(double *)a2;
      }
      else if ((v4 & 0x24) != 0)
      {
        v7 = (double)*(uint64_t *)a2;
      }
      else if ((v4 & 0x12) != 0)
      {
        v7 = sub_1ACBF2F88(a2);
      }
      else
      {
        v7 = 0.0;
      }
      return (_QWORD *)sub_1ACC4B3FC(100, v2, "%!0.15g", *(_QWORD *)&v7);
    default:
      goto LABEL_8;
  }
  return result;
}

void sub_1ACC4B8B0(uint64_t a1, uint64_t a2, sqlite3_context *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  int v9;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  char *v15;
  uint64_t v16;
  int v17;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  const char *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  unsigned int v36;
  char v37;
  __int16 v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45[2];
  __int128 v46;
  _BYTE v47[96];
  uint64_t v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  switch(*(_BYTE *)a2)
  {
    case 2:
      if (!a3)
        goto LABEL_35;
      v6 = *(_QWORD *)a3;
      if ((*(_WORD *)(*(_QWORD *)a3 + 20) & 0x9000) != 0)
      {
        v7 = 1;
        goto LABEL_13;
      }
      v42 = 1;
      goto LABEL_97;
    case 3:
      if (!a3)
      {
LABEL_35:
        v17 = 97413;
        goto LABEL_54;
      }
      v6 = *(_QWORD *)a3;
      if ((*(_WORD *)(*(_QWORD *)a3 + 20) & 0x9000) == 0)
      {
        *(_QWORD *)v6 = 0;
        goto LABEL_101;
      }
      v7 = 0;
LABEL_13:
      sub_1ACBF327C(v6, v7);
      return;
    case 4:
      v45[0] = 0;
      v8 = *(unsigned __int8 **)(a2 + 8);
      v9 = *v8;
      if (v9 == 45 || v9 == 43)
        v11 = (char *)(v8 + 1);
      else
        v11 = *(char **)(a2 + 8);
      v12 = sub_1ACBD3BF4(v11, v45);
      if (v12 <= 1)
      {
        if (v9 == 45)
          v13 = -v45[0];
        else
          v13 = v45[0];
        if (a3)
        {
          v6 = *(_QWORD *)a3;
          if ((*(_WORD *)(*(_QWORD *)a3 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v6, v13);
            return;
          }
          *(_QWORD *)v6 = v13;
LABEL_101:
          *(_WORD *)(v6 + 20) = 4;
          return;
        }
        goto LABEL_94;
      }
      if (v9 == 45 && v12 == 3)
      {
        if (a3)
        {
          v6 = *(_QWORD *)a3;
          if ((*(_WORD *)(*(_QWORD *)a3 + 20) & 0x9000) != 0)
          {
            sub_1ACBF327C(v6, 0x8000000000000000);
            return;
          }
          v42 = 0x8000000000000000;
LABEL_97:
          *(_QWORD *)v6 = v42;
          goto LABEL_101;
        }
LABEL_94:
        v41 = 10;
        goto LABEL_103;
      }
LABEL_40:
      v19 = *(char **)(a2 + 8);
      if (v19)
        v20 = strlen(v19) & 0x3FFFFFFF;
      else
        v20 = 0;
      sub_1ACBA6B1C((unsigned __int8 *)v19, (double *)&v44, v20, 1);
      if (!a3)
      {
        v23 = 97379;
        goto LABEL_104;
      }
      v21 = v44;
      v22 = *(_QWORD *)a3;
      if ((*(_WORD *)(v22 + 20) & 0x9000) != 0)
        sub_1ACBF2A54((int *)v22);
      else
        *(_WORD *)(v22 + 20) = 1;
      *(_QWORD *)v22 = v21;
      *(_WORD *)(v22 + 20) = 8;
      return;
    case 5:
      v44 = 0;
      goto LABEL_40;
    case 6:
      if ((*(_BYTE *)(a2 + 1) & 1) != 0)
      {
        if (a3)
        {
          v14 = *(_DWORD *)(a2 + 4);
          v15 = *(char **)(a2 + 8);
          goto LABEL_44;
        }
      }
      else
      {
        if ((*(_BYTE *)(a2 + 1) & 2) != 0)
        {
          v24 = *(unsigned int *)(a2 + 4);
          v25 = *(_QWORD *)(a2 + 8);
          v26 = sqlite3_initialize();
          if (v24 > 0x7FFFFFFE || v26 || (v27 = sub_1ACB5D828(v24 + 1)) == 0)
          {
            sqlite3_result_error_nomem(a3);
          }
          else
          {
            v28 = (const char *)v27;
            v29 = v24 - 1;
            if ((v24 - 1) < 2)
            {
              v30 = 0;
            }
            else
            {
              v30 = 0;
              v31 = v24 - 6;
              v32 = 1;
              do
              {
                v34 = *(unsigned __int8 *)(v25 + v32);
                if (v34 == 92)
                {
                  v33 = v32 + 1;
                  LOBYTE(v34) = 8;
                  switch(*(_BYTE *)(v25 + v33))
                  {
                    case 0xD:
                      if (*(_BYTE *)(v25 + v32 + 2) == 10)
                        LODWORD(v33) = v32 + 2;
                      break;
                    case 0xE:
                    case 0xF:
                    case 0x10:
                    case 0x11:
                    case 0x12:
                    case 0x13:
                    case 0x14:
                    case 0x15:
                    case 0x16:
                    case 0x17:
                    case 0x18:
                    case 0x19:
                    case 0x1A:
                    case 0x1B:
                    case 0x1C:
                    case 0x1D:
                    case 0x1E:
                    case 0x1F:
                    case 0x20:
                    case 0x21:
                    case 0x23:
                    case 0x24:
                    case 0x25:
                    case 0x26:
                    case 0x28:
                    case 0x29:
                    case 0x2A:
                    case 0x2B:
                    case 0x2C:
                    case 0x2D:
                    case 0x2E:
                    case 0x31:
                    case 0x32:
                    case 0x33:
                    case 0x34:
                    case 0x35:
                    case 0x36:
                    case 0x37:
                    case 0x38:
                    case 0x39:
                    case 0x3A:
                    case 0x3B:
                    case 0x3C:
                    case 0x3D:
                    case 0x3E:
                    case 0x3F:
                    case 0x40:
                    case 0x41:
                    case 0x42:
                    case 0x43:
                    case 0x44:
                    case 0x45:
                    case 0x46:
                    case 0x47:
                    case 0x48:
                    case 0x49:
                    case 0x4A:
                    case 0x4B:
                    case 0x4C:
                    case 0x4D:
                    case 0x4E:
                    case 0x4F:
                    case 0x50:
                    case 0x51:
                    case 0x52:
                    case 0x53:
                    case 0x54:
                    case 0x55:
                    case 0x56:
                    case 0x57:
                    case 0x58:
                    case 0x59:
                    case 0x5A:
                    case 0x5B:
                    case 0x5D:
                    case 0x5E:
                    case 0x5F:
                    case 0x60:
                    case 0x61:
                    case 0x63:
                    case 0x64:
                    case 0x65:
                    case 0x67:
                    case 0x68:
                    case 0x69:
                    case 0x6A:
                    case 0x6B:
                    case 0x6C:
                    case 0x6D:
                    case 0x6F:
                    case 0x70:
                    case 0x71:
                    case 0x73:
                    case 0x77:
                      break;
                    case 0x22:
                    case 0x27:
                    case 0x2F:
                    case 0x5C:
                      LOBYTE(v34) = *(_BYTE *)(v25 + v33);
                      goto LABEL_61;
                    case 0x30:
                      LOBYTE(v34) = 0;
                      goto LABEL_61;
                    case 0x62:
                      goto LABEL_61;
                    case 0x66:
                      LOBYTE(v34) = 12;
                      goto LABEL_61;
                    case 0x6E:
                      LOBYTE(v34) = 10;
                      goto LABEL_61;
                    case 0x72:
                      LOBYTE(v34) = 13;
                      goto LABEL_61;
                    case 0x74:
                      LOBYTE(v34) = 9;
                      goto LABEL_61;
                    case 0x75:
                      v35 = sub_1ACC4C074((unsigned __int8 *)(v25 + v33 + 1));
                      if (!v35)
                        goto LABEL_108;
                      LODWORD(v33) = v32 + 5;
                      if (v35 <= 0x7F)
                      {
                        v28[v30++] = v35;
                        break;
                      }
                      if (v35 > 0x7FF)
                      {
                        if (v33 < v31
                          && (v35 & 0xFC00) == 0xD800
                          && *(_BYTE *)(v25 + v32 + 6) == 92
                          && *(_BYTE *)(v25 + v32 + 7) == 117)
                        {
                          v43 = v35;
                          v38 = sub_1ACC4C074((unsigned __int8 *)(v25 + 3 + v33));
                          v35 = v43;
                          if ((v38 & 0xFC00) == 0xDC00)
                          {
                            v39 = v38 & 0x3FF | ((v43 & 0x3FF) << 10);
                            LODWORD(v33) = v32 + 11;
                            v28[v30] = ((v39 + 0x10000) >> 18) | 0xF0;
                            v28[v30 + 1] = ((v39 + 0x10000) >> 12) & 0x3F | 0x80;
                            v28[v30 + 2] = (v39 >> 6) & 0x3F | 0x80;
                            v40 = v30 + 3;
                            v30 += 4;
                            v28[v40] = v38 & 0x3F | 0x80;
                            break;
                          }
                        }
                        v28[v30] = (v35 >> 12) | 0xE0;
                        v28[v30 + 1] = (v35 >> 6) & 0x3F | 0x80;
                        v36 = v30 + 2;
                        v37 = v35 & 0x3F | 0x80;
                        v30 += 3;
                      }
                      else
                      {
                        v28[v30] = (v35 >> 6) | 0xC0;
                        v36 = v30 + 1;
                        v37 = v35 & 0x3F | 0x80;
                        v30 += 2;
                      }
                      v28[v36] = v37;
                      break;
                    case 0x76:
                      LOBYTE(v34) = 11;
                      goto LABEL_61;
                    case 0x78:
                      LODWORD(v33) = v32 + 3;
                      LOBYTE(v34) = ((((char)(2 * *(_BYTE *)(v25 + v32 + 3)) >> 7) & 0xF9)
                                   + *(_BYTE *)(v25 + v32 + 3)) & 0xF | (16
                                                                       * ((((char)(2
                                                                                               * *(_BYTE *)(v25 + v32 + 2)) >> 7) & 9)
                                                                        + *(_BYTE *)(v25 + v32 + 2)));
                      goto LABEL_61;
                    default:
                      if (*(unsigned __int8 *)(v25 + v33) == 226)
                        LODWORD(v33) = v32 + 3;
                      break;
                  }
                }
                else
                {
                  LODWORD(v33) = v32;
LABEL_61:
                  v28[v30++] = v34;
                }
                v32 = v33 + 1;
              }
              while ((int)v33 + 1 < v29);
            }
LABEL_108:
            v28[v30] = 0;
            sqlite3_result_text(a3, v28, v30, sqlite3_free);
          }
          return;
        }
        if (a3)
        {
          v14 = *(_DWORD *)(a2 + 4) - 2;
          v15 = (char *)(*(_QWORD *)(a2 + 8) + 1);
LABEL_44:
          sub_1ACBC69D0((uint64_t)a3, v15, v14, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          return;
        }
      }
      v17 = 97480;
LABEL_54:
      sub_1ACBBE20C(v17);
      return;
    case 7:
    case 8:
      if (*(_BYTE *)(a1 + 51))
      {
        sqlite3_result_error_nomem(a3);
      }
      else if (!*(_BYTE *)(a1 + 50))
      {
        v48 = 0;
        memset(v47, 0, sizeof(v47));
        v45[0] = (unint64_t)a3;
        v45[1] = (unint64_t)&v47[2];
        v46 = xmmword_1ACCBDE10;
        v47[0] = 1;
        sub_1ACC4A174(a1, a2, v45);
        sub_1ACC4AC7C((uint64_t)v45);
        if (a3)
        {
          v16 = *(_QWORD *)a3;
          *(_BYTE *)(v16 + 23) = 74;
          *(_WORD *)(v16 + 20) |= 0x800u;
        }
        else
        {
          v41 = 50;
LABEL_103:
          v23 = v41 | 0x17C85;
LABEL_104:
          sub_1ACBBE20C(v23);
        }
      }
      return;
    default:
      if (!a3)
      {
        v17 = 97433;
        goto LABEL_54;
      }
      v5 = *(_QWORD *)a3;
      if ((*(_WORD *)(*(_QWORD *)a3 + 20) & 0x9000) != 0)
        sub_1ACBF2A54((int *)v5);
      else
        *(_WORD *)(v5 + 20) = 1;
      return;
  }
}

uint64_t sub_1ACC4C074(unsigned __int8 *a1)
{
  int32x2_t v1;
  int32x2_t v2;

  v1.i32[0] = *a1;
  v1.i32[1] = a1[1];
  v2 = (int32x2_t)vshl_u32((uint32x2_t)vand_s8((int8x8_t)vadd_s32((int32x2_t)vbic_s8((int8x8_t)0x900000009, (int8x8_t)vceqz_s32((int32x2_t)(*(_QWORD *)&v1 & 0xFFFFFF40FFFFFF40))), v1), (int8x8_t)0xF0000000FLL), (uint32x2_t)0x80000000CLL);
  return vorr_s8((int8x8_t)vdup_lane_s32(v2, 1), (int8x8_t)v2).u32[0] | (16
                                                                       * (((((char)(2 * a1[2]) >> 7) & 0xF9)
                                                                         + a1[2]) & 0xF)) | ((((char)(2 * a1[3]) >> 7) & 0xF9)
                                                                                           + a1[3]) & 0xF;
}

uint64_t sub_1ACC4C100(uint64_t a1, const char *a2)
{
  char *v3;
  uint64_t result;
  uint64_t (**v5)(char *);

  v3 = sqlite3_mprintf("json_%s() needs an odd number of arguments", a2);
  if (a1)
  {
    *(_DWORD *)(a1 + 36) = 1;
    result = sub_1ACB57870(*(_QWORD *)a1, v3, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
    if (!v3)
      return result;
  }
  else
  {
    result = sub_1ACBBE20C(97389);
    if (!v3)
      return result;
  }
  v5 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v5)(v3);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v3);
  v3 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v5 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    return (*v5)(v3);
  }
  return result;
}

uint64_t sub_1ACC4C20C(uint64_t a1, unsigned int *a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  unsigned int *v28;
  __int16 v29;
  uint64_t (**v30)(uint64_t);
  uint64_t v31;
  void *v32;
  double v33;
  const void *v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  uint64_t v38;
  size_t v39;
  void *v40;
  void *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v8 = *a2;
  if (v8 >= a2[1])
  {
    result = sub_1ACC499B4(a2, 0, a3, 0);
    if (*((_BYTE *)a2 + 51))
      return result;
  }
  else
  {
    v9 = *((_QWORD *)a2 + 1) + 16 * v8;
    *(_WORD *)v9 = 0;
    *(_DWORD *)(v9 + 4) = a3;
    *(_QWORD *)(v9 + 8) = 0;
    result = *a2;
    *a2 = result + 1;
    if (*((_BYTE *)a2 + 51))
      return result;
  }
  v11 = *((_QWORD *)a2 + 1);
  *(_BYTE *)(v11 + 16 * a3 + 1) |= 8u;
  v12 = v11 + 16 * (int)result;
  *(_BYTE *)(v12 + 2) = 4;
  *(_DWORD *)(v12 + 8) = a2[18];
  a2[18] = result;
  *((_WORD *)a2 + 27) = 257;
  if ((int)result < 1)
    return result;
  if (!a4)
  {
    sub_1ACBBE20C(97202);
LABEL_14:
    v20 = *a2;
    if (v20 >= a2[1])
    {
      sub_1ACC499B4(a2, 1, 0, 0);
      if (a1)
        goto LABEL_16;
    }
    else
    {
      v21 = *((_QWORD *)a2 + 1) + 16 * v20;
      *(_WORD *)v21 = 1;
      *(_DWORD *)(v21 + 4) = 0;
      *(_QWORD *)(v21 + 8) = 0;
      ++*a2;
      if (a1)
      {
LABEL_16:
        *(_DWORD *)(a1 + 36) = 1;
        result = sub_1ACB57870(*(_QWORD *)a1, "JSON cannot hold BLOB values", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
LABEL_19:
        ++*((_BYTE *)a2 + 50);
        return result;
      }
    }
    result = sub_1ACBBE20C(97389);
    goto LABEL_19;
  }
  v13 = *(unsigned __int16 *)(a4 + 20);
  switch(v13 & 0x3F)
  {
    case 1:
    case 3:
    case 5:
    case 7:
    case 9:
    case 0xB:
    case 0xD:
    case 0xF:
    case 0x11:
    case 0x13:
    case 0x15:
    case 0x17:
    case 0x19:
    case 0x1B:
    case 0x1D:
    case 0x1F:
    case 0x21:
    case 0x23:
    case 0x25:
    case 0x27:
    case 0x29:
    case 0x2B:
    case 0x2D:
    case 0x2F:
    case 0x31:
    case 0x33:
    case 0x35:
    case 0x37:
    case 0x39:
    case 0x3B:
    case 0x3D:
    case 0x3F:
      v24 = *a2;
      if (v24 >= a2[1])
        return sub_1ACC499B4(a2, 1, 0, 0);
      v25 = *((_QWORD *)a2 + 1) + 16 * v24;
      *(_WORD *)v25 = 1;
      *(_DWORD *)(v25 + 4) = 0;
      *(_QWORD *)(v25 + 8) = 0;
      ++*a2;
      return result;
    case 2:
    case 0x12:
    case 0x32:
      if ((~v13 & 0x202) != 0 || *(_BYTE *)(a4 + 22) != 1)
      {
        if ((v13 & 1) != 0)
        {
          v23 = 0;
        }
        else
        {
          result = sub_1ACBF2B64((int *)a4, 1);
          v23 = (const char *)result;
          LOWORD(v13) = *(_WORD *)(a4 + 20);
        }
      }
      else
      {
        v23 = *(const char **)(a4 + 8);
      }
      if ((v13 & 2) != 0 && *(_BYTE *)(a4 + 22) == 1)
      {
        v27 = *(_DWORD *)(a4 + 16);
      }
      else if ((v13 & 0x10) != 0)
      {
        v27 = *(_DWORD *)(a4 + 16);
        if ((v13 & 0x400) != 0)
          v27 += *(_DWORD *)a4;
      }
      else if ((v13 & 1) != 0)
      {
        v27 = 0;
      }
      else
      {
        result = sub_1ACBF2B3C(a4, 1);
        v27 = result;
      }
      if (!v23)
        goto LABEL_74;
      if ((*(_WORD *)(a4 + 20) & 0x800) == 0 || *(_BYTE *)(a4 + 23) != 74)
      {
        v39 = strlen(v23) + 1;
        v40 = (void *)sub_1ACB5D828(v39);
        v41 = v40;
        if (v40)
        {
          memcpy(v40, v23, v39);
          if (sqlite3_initialize() || (v42 = (_QWORD *)sub_1ACB5D828(24)) == 0)
          {
            *((_BYTE *)a2 + 51) = 1;
            sqlite3_free(v41);
          }
          else
          {
            v43 = *((_QWORD *)a2 + 5);
            *((_QWORD *)a2 + 5) = v42;
            *v42 = v43;
            v42[1] = sqlite3_free;
            v42[2] = v41;
          }
        }
        else
        {
          *((_BYTE *)a2 + 51) = 1;
          sqlite3_result_error_nomem((sqlite3_context *)a1);
        }
        v44 = *a2;
        if (v44 >= a2[1])
        {
          result = sub_1ACC499B4(a2, 6, v27, (uint64_t)v41);
        }
        else
        {
          v45 = *((_QWORD *)a2 + 1) + 16 * v44;
          *(_WORD *)v45 = 6;
          *(_DWORD *)(v45 + 4) = v27;
          *(_QWORD *)(v45 + 8) = v41;
          result = *a2;
          *a2 = result + 1;
        }
        if (!*((_BYTE *)a2 + 51))
        {
          v46 = *((_QWORD *)a2 + 1) + 16 * (int)result;
          *(_BYTE *)(v46 + 1) |= 1u;
        }
        return result;
      }
      result = sub_1ACC47E3C(a1, a4, (sqlite3_context *)a1, 1);
      if (!result)
      {
        *((_BYTE *)a2 + 51) = 1;
        return result;
      }
      v15 = result;
      v34 = *(const void **)(result + 8);
      v35 = *(unsigned int *)result;
      v36 = *a2;
      v37 = *a2 + v35;
      v38 = *((_QWORD *)a2 + 1);
      if (v37 <= a2[1])
        goto LABEL_95;
      if (sqlite3_initialize() || (v47 = sub_1ACB6BB48(v38, 16 * v37)) == 0)
      {
        *((_BYTE *)a2 + 51) = 1;
      }
      else
      {
        v38 = v47;
        a2[1] = (int)off_1ECD3B178(v47) >> 4;
        *((_QWORD *)a2 + 1) = v38;
        v36 = *a2;
LABEL_95:
        memcpy((void *)(v38 + 16 * v36), v34, 16 * v35);
        *a2 += v35;
      }
      ++*(_DWORD *)(v15 + 56);
      if (sqlite3_initialize() || (result = sub_1ACB5D828(24)) == 0)
      {
        *((_BYTE *)a2 + 51) = 1;
        return sub_1ACC48684(v15);
      }
      v31 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 5) = result;
      v32 = sub_1ACC48684;
      goto LABEL_61;
    case 4:
    case 6:
    case 0xC:
    case 0xE:
    case 0x14:
    case 0x16:
    case 0x1C:
    case 0x1E:
      if ((v13 & 0x24) != 0)
      {
        v14 = *(_QWORD *)a4;
      }
      else if ((v13 & 8) != 0)
      {
        v33 = *(double *)a4;
        if (*(double *)a4 >= -9.22337204e18)
        {
          if (v33 <= 9.22337204e18)
            v14 = (uint64_t)v33;
          else
            v14 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else
        {
          v14 = 0x8000000000000000;
        }
      }
      else if ((v13 & 0x12) != 0 && *(_QWORD *)(a4 + 8))
      {
        v14 = sub_1ACBF2FC0(a4);
      }
      else
      {
        v14 = 0;
      }
      result = (uint64_t)sqlite3_mprintf("%lld", v14);
      if (!result)
        goto LABEL_74;
      v15 = result;
      v16 = strlen((const char *)result) & 0x3FFFFFFF;
      v17 = *a2;
      if (v17 < a2[1])
      {
        v18 = *((_QWORD *)a2 + 1) + 16 * v17;
        v19 = 4;
        goto LABEL_34;
      }
      v28 = a2;
      v29 = 4;
      goto LABEL_51;
    case 8:
    case 0xA:
    case 0x18:
    case 0x1A:
    case 0x20:
    case 0x22:
    case 0x24:
    case 0x26:
    case 0x28:
    case 0x2A:
    case 0x2C:
    case 0x2E:
    case 0x34:
    case 0x36:
    case 0x38:
    case 0x3A:
    case 0x3C:
    case 0x3E:
      if ((v13 & 8) != 0)
      {
        v22 = *(double *)a4;
      }
      else if ((v13 & 0x24) != 0)
      {
        v22 = (double)*(uint64_t *)a4;
      }
      else if ((v13 & 0x12) != 0)
      {
        v22 = sub_1ACBF2F88(a4);
      }
      else
      {
        v22 = 0.0;
      }
      result = (uint64_t)sqlite3_mprintf("%!0.15g", *(_QWORD *)&v22);
      if (!result)
      {
LABEL_74:
        *((_BYTE *)a2 + 51) = 1;
        return result;
      }
      v15 = result;
      v16 = strlen((const char *)result) & 0x3FFFFFFF;
      v26 = *a2;
      if (v26 >= a2[1])
      {
        v28 = a2;
        v29 = 5;
LABEL_51:
        sub_1ACC499B4(v28, v29, v16, v15);
      }
      else
      {
        v18 = *((_QWORD *)a2 + 1) + 16 * v26;
        v19 = 5;
LABEL_34:
        *(_WORD *)v18 = v19;
        *(_DWORD *)(v18 + 4) = v16;
        *(_QWORD *)(v18 + 8) = v15;
        ++*a2;
      }
      if (sqlite3_initialize() || (result = sub_1ACB5D828(24)) == 0)
      {
        *((_BYTE *)a2 + 51) = 1;
        v30 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
          --qword_1ECD3E8D0;
          result = off_1ECD3B168(v15);
          v15 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            return result;
          v30 = &xmmword_1ECD3B1D0;
        }
        return (*v30)(v15);
      }
      v31 = *((_QWORD *)a2 + 5);
      *((_QWORD *)a2 + 5) = result;
      v32 = sqlite3_free;
LABEL_61:
      *(_QWORD *)result = v31;
      *(_QWORD *)(result + 8) = v32;
      *(_QWORD *)(result + 16) = v15;
      break;
    default:
      goto LABEL_14;
  }
  return result;
}

_DWORD *sub_1ACC4C8D0(unsigned int *a1, unsigned int a2, uint64_t a3)
{
  _DWORD *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unsigned int v14;
  int v15;
  _DWORD *v16;
  size_t v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  _DWORD *v21;
  _BYTE *v22;
  char v23;
  char v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  signed int v29;
  unsigned int v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  signed int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  int v58;

  if (*(_BYTE *)a3 != 8)
    return (_DWORD *)a3;
  v5 = (_DWORD *)(*((_QWORD *)a1 + 1) + 16 * a2);
  if (*(_BYTE *)v5 != 8)
  {
    sub_1ACC4CDE8(a3);
    return (_DWORD *)a3;
  }
  if (*(_DWORD *)(a3 + 4) < 2u)
    return v5;
  v56 = *((_QWORD *)a1 + 1);
  v54 = a2 + 1;
  v6 = 1;
  v57 = a2;
  v55 = a2;
  do
  {
    v8 = v6;
    v9 = a3 + 16 * v6;
    v10 = *(unsigned int *)(v9 + 4);
    v11 = *(_QWORD *)(v9 + 8);
    v12 = v5[1];
    if (v12 >= 2)
    {
      v58 = v8;
      v13 = *(_BYTE *)(a3 + 16 * v8 + 1);
      v14 = 1;
      while (1)
      {
        v16 = &v5[4 * v14];
        v17 = v16[1];
        if ((v13 & 1) != 0)
        {
          if ((*((_BYTE *)v16 + 1) & 1) != 0)
          {
            if ((_DWORD)v17 == (_DWORD)v10)
            {
              v19 = *(const char **)&v5[4 * v14 + 2];
LABEL_23:
              v18 = (const char *)v11;
LABEL_24:
              if (!strncmp(v19, v18, v10))
                goto LABEL_28;
            }
          }
          else if ((_DWORD)v17 == (_DWORD)v10 + 2)
          {
            v19 = (const char *)(*(_QWORD *)&v5[4 * v14 + 2] + 1);
            goto LABEL_23;
          }
        }
        else if ((*((_BYTE *)v16 + 1) & 1) != 0)
        {
          if ((_DWORD)v10 == (_DWORD)v17 + 2
            && !strncmp((const char *)(v11 + 1), *(const char **)&v5[4 * v14 + 2], v17))
          {
LABEL_28:
            v21 = &v5[4 * v14 + 4];
            v24 = *((_BYTE *)v21 + 1);
            v22 = (char *)v21 + 1;
            v23 = v24;
            if ((v24 & 0xC) != 0)
            {
LABEL_29:
              LODWORD(v8) = v58;
              goto LABEL_30;
            }
            LODWORD(v8) = v58;
            if (*(_BYTE *)(a3 + 16 * (v58 + 1)) == 1)
            {
              *v22 = v23 | 4;
              goto LABEL_30;
            }
            v40 = v54 + v14;
            v41 = sub_1ACC4C8D0(a1, v40);
            v5 = (_DWORD *)v41;
            if (v41)
            {
              v42 = *((_QWORD *)a1 + 1);
              if (v41 != v42 + 16 * v40)
              {
                v43 = *a1;
                if (v43 >= a1[1])
                {
                  v45 = sub_1ACC499B4(a1, 0, v40, 0);
                }
                else
                {
                  v44 = v42 + 16 * v43;
                  *(_WORD *)v44 = 0;
                  *(_DWORD *)(v44 + 4) = v40;
                  *(_QWORD *)(v44 + 8) = 0;
                  v45 = (*a1)++;
                }
                if (!*((_BYTE *)a1 + 51))
                {
                  v46 = *((_QWORD *)a1 + 1);
                  *(_BYTE *)(v46 + 16 * v40 + 1) |= 8u;
                  v47 = v46 + 16 * v45;
                  *(_BYTE *)(v47 + 2) = 4;
                  *(_DWORD *)(v47 + 8) = a1[18];
                  a1[18] = v45;
                  *((_WORD *)a1 + 27) = 257;
                }
                if (*(unsigned __int8 *)v5 < 7u)
                  v48 = 1;
                else
                  v48 = v5[1] + 1;
                v49 = *a1;
                v50 = *a1 + v48;
                v51 = *((_QWORD *)a1 + 1);
                if (v50 <= a1[1])
                {
LABEL_68:
                  memcpy((void *)(v51 + 16 * v49), v5, 16 * v48);
                  *a1 += v48;
                }
                else
                {
                  if (!sqlite3_initialize())
                  {
                    v52 = sub_1ACB6BB48(v51, 16 * v50);
                    if (v52)
                    {
                      v51 = v52;
                      a1[1] = (int)off_1ECD3B178(v52) >> 4;
                      *((_QWORD *)a1 + 1) = v51;
                      v49 = *a1;
                      goto LABEL_68;
                    }
                  }
                  *((_BYTE *)a1 + 51) = 1;
                }
                LODWORD(v8) = v58;
              }
              v56 = *((_QWORD *)a1 + 1);
              v5 = (_DWORD *)(v56 + 16 * v55);
              v12 = v5[1];
              goto LABEL_30;
            }
            return v5;
          }
        }
        else if ((_DWORD)v10 == (_DWORD)v17)
        {
          v18 = *(const char **)&v5[4 * v14 + 2];
          v19 = (const char *)v11;
          goto LABEL_24;
        }
        v20 = v14 + 1;
        if (LOBYTE(v5[4 * v20]) >= 7u)
          v15 = v5[4 * v20 + 1] + 1;
        else
          v15 = 1;
        v14 = v20 + v15;
        if ((int)v20 + v15 >= v12)
          goto LABEL_29;
      }
    }
    v14 = 1;
LABEL_30:
    v25 = (v8 + 1);
    if (v14 >= v12)
    {
      v26 = (_BYTE *)(a3 + 16 * v25);
      if (*v26 != 1)
      {
        v27 = *a1;
        if (v27 >= a1[1])
        {
          v29 = sub_1ACC499B4(a1, 8, 0, 0);
          v30 = *a1;
        }
        else
        {
          v28 = v56 + 16 * v27;
          *(_WORD *)v28 = 8;
          *(_DWORD *)(v28 + 4) = 0;
          *(_QWORD *)(v28 + 8) = 0;
          v29 = *a1;
          v30 = *a1 + 1;
          *a1 = v30;
        }
        if (v30 >= a1[1])
        {
          sub_1ACC499B4(a1, 6, v10, v11);
        }
        else
        {
          v31 = *((_QWORD *)a1 + 1) + 16 * v30;
          *(_WORD *)v31 = 6;
          *(_DWORD *)(v31 + 4) = v10;
          *(_QWORD *)(v31 + 8) = v11;
          ++*a1;
        }
        v32 = *v26;
        if (v32 == 8)
        {
          sub_1ACC4CDE8(a3 + 16 * v25);
          v32 = *v26;
        }
        if (v32 < 7)
          v33 = 1;
        else
          v33 = *(_DWORD *)(a3 + 16 * v25 + 4) + 1;
        v34 = *a1;
        v35 = *a1 + v33;
        v36 = *((_QWORD *)a1 + 1);
        if (v35 > a1[1])
        {
          if (sqlite3_initialize() || (v37 = sub_1ACB6BB48(v36, 16 * v35)) == 0)
          {
            v5 = 0;
            *((_BYTE *)a1 + 51) = 1;
            return v5;
          }
          v36 = v37;
          a1[1] = (int)off_1ECD3B178(v37) >> 4;
          *((_QWORD *)a1 + 1) = v36;
          v34 = *a1;
        }
        memcpy((void *)(v36 + 16 * v34), (const void *)(a3 + 16 * v25), 16 * v33);
        *a1 += v33;
        if (*((_BYTE *)a1 + 51))
          return 0;
        v38 = *((_QWORD *)a1 + 1);
        *(_DWORD *)(v38 + 16 * v29 + 4) = v33 + 1;
        v39 = v38 + 16 * v57;
        *(_BYTE *)(v39 + 1) |= 0x10u;
        *(_DWORD *)(v39 + 8) = v29;
        v56 = *((_QWORD *)a1 + 1);
        v5 = (_DWORD *)(v56 + 16 * v55);
        v57 = v29;
      }
    }
    if (*(unsigned __int8 *)(a3 + 16 * v25) >= 7u)
      v7 = *(_DWORD *)(a3 + 16 * v25 + 4) + 1;
    else
      v7 = 1;
    v6 = v25 + v7;
  }
  while (v6 < *(_DWORD *)(a3 + 4));
  return v5;
}

uint64_t sub_1ACC4CDE8(uint64_t result)
{
  int v1;
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;

  v1 = *(_DWORD *)(result + 4);
  if (v1 >= 2)
  {
    v2 = result;
    v3 = 2;
    while (1)
    {
      v5 = v3;
      v6 = (unsigned __int8 *)(v2 + 16 * v3);
      v7 = *v6;
      if (v7 == 8)
        break;
      if (v7 != 1)
        goto LABEL_10;
      *(_BYTE *)(v2 + 16 * v5 + 1) |= 4u;
      v4 = 1;
LABEL_5:
      v3 = v5 + v4 + 1;
      if (v3 > v1)
        return result;
    }
    result = sub_1ACC4CDE8(v6);
    v7 = *v6;
LABEL_10:
    if (v7 >= 7)
      v4 = *(_DWORD *)(v2 + 16 * v5 + 4) + 1;
    else
      v4 = 1;
    goto LABEL_5;
  }
  return result;
}

void sub_1ACC4CE8C(sqlite3_context *a1, int a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  uint64_t (*v13)(uint64_t);

  if (a1)
  {
    v3 = *((_QWORD *)a1 + 1);
    if (v3 && *(_QWORD *)(v3 + 32))
    {
      v5 = *((_QWORD *)a1 + 2);
      if ((*(__int16 *)(v5 + 20) & 0x80000000) == 0)
      {
        v6 = (unsigned __int8 *)sub_1ACBC794C((uint64_t)a1, 0);
        if (!v6)
          goto LABEL_8;
LABEL_12:
        *(_QWORD *)v6 = a1;
        v8 = *((_QWORD *)v6 + 3);
        if (v8 >= *((_QWORD *)v6 + 2))
        {
          sub_1ACC4B3BC((uint64_t)v6, 93);
          v10 = v6[33];
          if (v6[33])
          {
LABEL_14:
            if (v10 == 1)
              sqlite3_result_error_nomem(a1);
            goto LABEL_9;
          }
        }
        else
        {
          v9 = *((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 3) = v8 + 1;
          *(_BYTE *)(v9 + v8) = 93;
          v10 = v6[33];
          if (v6[33])
            goto LABEL_14;
        }
        v11 = (char *)*((_QWORD *)v6 + 1);
        v12 = *((_DWORD *)v6 + 6);
        if (a2)
        {
          if (v6[32])
            v13 = (uint64_t (*)(uint64_t))-1;
          else
            v13 = sub_1ACBF1160;
          sub_1ACBC69D0((uint64_t)a1, v11, v12, 1u, v13);
          v6[32] = 1;
        }
        else
        {
          sub_1ACBC69D0((uint64_t)a1, v11, v12, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          --*((_QWORD *)v6 + 3);
        }
        goto LABEL_9;
      }
      v6 = *(unsigned __int8 **)(v5 + 8);
      if (v6)
        goto LABEL_12;
    }
    else
    {
      sub_1ACBBE20C(98105);
    }
LABEL_8:
    sub_1ACBC69D0((uint64_t)a1, "[]", 2, 1u, 0);
LABEL_9:
    v7 = *(_QWORD *)a1;
    *(_BYTE *)(v7 + 23) = 74;
    *(_WORD *)(v7 + 20) |= 0x800u;
    return;
  }
  sub_1ACBBE20C(98105);
  sub_1ACBBE20C(97480);
  sub_1ACBBE20C(97463);
}

void sub_1ACC4D010(sqlite3_context *a1, int a2)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  int v12;
  uint64_t (*v13)(uint64_t);

  if (a1)
  {
    v3 = *((_QWORD *)a1 + 1);
    if (v3 && *(_QWORD *)(v3 + 32))
    {
      v5 = *((_QWORD *)a1 + 2);
      if ((*(__int16 *)(v5 + 20) & 0x80000000) == 0)
      {
        v6 = (unsigned __int8 *)sub_1ACBC794C((uint64_t)a1, 0);
        if (!v6)
          goto LABEL_8;
LABEL_12:
        v8 = *((_QWORD *)v6 + 3);
        if (v8 >= *((_QWORD *)v6 + 2))
        {
          sub_1ACC4B3BC((uint64_t)v6, 125);
          v10 = v6[33];
          if (v6[33])
          {
LABEL_14:
            if (v10 == 1)
              sqlite3_result_error_nomem(a1);
            goto LABEL_9;
          }
        }
        else
        {
          v9 = *((_QWORD *)v6 + 1);
          *((_QWORD *)v6 + 3) = v8 + 1;
          *(_BYTE *)(v9 + v8) = 125;
          v10 = v6[33];
          if (v6[33])
            goto LABEL_14;
        }
        v11 = (char *)*((_QWORD *)v6 + 1);
        v12 = *((_DWORD *)v6 + 6);
        if (a2)
        {
          if (v6[32])
            v13 = (uint64_t (*)(uint64_t))-1;
          else
            v13 = sub_1ACBF1160;
          sub_1ACBC69D0((uint64_t)a1, v11, v12, 1u, v13);
          v6[32] = 1;
        }
        else
        {
          sub_1ACBC69D0((uint64_t)a1, v11, v12, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
          --*((_QWORD *)v6 + 3);
        }
        goto LABEL_9;
      }
      v6 = *(unsigned __int8 **)(v5 + 8);
      if (v6)
        goto LABEL_12;
    }
    else
    {
      sub_1ACBBE20C(98105);
    }
LABEL_8:
    sub_1ACBC69D0((uint64_t)a1, "{}", 2, 1u, 0);
LABEL_9:
    v7 = *(_QWORD *)a1;
    *(_BYTE *)(v7 + 23) = 74;
    *(_WORD *)(v7 + 20) |= 0x800u;
    return;
  }
  sub_1ACBBE20C(98105);
  sub_1ACBBE20C(97480);
  sub_1ACBBE20C(97463);
}

uint64_t sub_1ACC4D194()
{
  uint64_t v0;
  BOOL v1;
  int v2;
  uint64_t v3;
  int v4;

  xmmword_1EECAD220 = 0u;
  *(_OWORD *)&qword_1EECAD230 = 0u;
  xmmword_1EECAD200 = 0u;
  *(_OWORD *)&dword_1EECAD210 = 0u;
  xmmword_1EECAD1E0 = 0u;
  *(_OWORD *)&qword_1EECAD1F0 = 0u;
  xmmword_1EECAD1C0 = 0u;
  unk_1EECAD1D0 = 0u;
  xmmword_1EECAD1B0 = 0u;
  v0 = qword_1ECD3B278;
  if (qword_1ECD3B278)
    v1 = word_1ECD3B144 == 0;
  else
    v1 = 0;
  v2 = !v1;
  DWORD1(xmmword_1EECAD200) = v2;
  if ((_BYTE)word_1ECD3B144)
  {
    *(_QWORD *)&xmmword_1EECAD1B0 = qword_1ECD3B1B0(6);
    if ((_BYTE)word_1ECD3B144)
      v3 = qword_1ECD3B1B0(7);
    else
      v3 = 0;
    *((_QWORD *)&xmmword_1EECAD220 + 1) = v3;
    v0 = qword_1ECD3B278;
    LOBYTE(v2) = DWORD1(xmmword_1EECAD200) != 0;
  }
  if (!dword_1ECD3B284)
    LOBYTE(v2) = 0;
  if ((v2 & (v0 == 0)) != 0)
    v4 = dword_1ECD3B284;
  else
    v4 = 0;
  DWORD2(xmmword_1EECAD200) = v4;
  LODWORD(xmmword_1EECAD1C0) = 10;
  LODWORD(xmmword_1EECAD200) = 1;
  return 0;
}

double sub_1ACC4D288()
{
  double result;

  result = 0.0;
  xmmword_1EECAD220 = 0u;
  *(_OWORD *)&qword_1EECAD230 = 0u;
  xmmword_1EECAD200 = 0u;
  *(_OWORD *)&dword_1EECAD210 = 0u;
  xmmword_1EECAD1E0 = 0u;
  *(_OWORD *)&qword_1EECAD1F0 = 0u;
  xmmword_1EECAD1C0 = 0u;
  unk_1EECAD1D0 = 0u;
  xmmword_1EECAD1B0 = 0u;
  return result;
}

unint64_t sub_1ACC4D2AC(int a1, int a2, int a3)
{
  size_t v6;
  void *v7;
  unint64_t v8;
  __int128 *v9;
  int v10;
  int v11;
  char *v12;

  v6 = 80 * DWORD1(xmmword_1EECAD200) + 88;
  v7 = (void *)sub_1ACB5D828(v6);
  v8 = (unint64_t)v7;
  if (v7)
  {
    bzero(v7, v6);
    v9 = &xmmword_1EECAD1B0;
    if (DWORD1(xmmword_1EECAD200))
    {
      v9 = (__int128 *)(v8 + 88);
      *(_DWORD *)(v8 + 104) = 10;
    }
    if (!*((_WORD *)v9 + 23))
    {
      *((_WORD *)v9 + 23) = 1;
      *((_QWORD *)v9 + 8) = (char *)v9 + 24;
      *((_QWORD *)v9 + 9) = (char *)v9 + 24;
    }
    *(_QWORD *)v8 = v9;
    *(_DWORD *)(v8 + 16) = a1;
    *(_DWORD *)(v8 + 20) = a2;
    *(_DWORD *)(v8 + 24) = ((a1 + 7) & 0xFFFFFFF8) + ((a2 + 7) & 0xFFFFFFF8) + 56;
    *(_DWORD *)(v8 + 28) = a3 != 0;
    sub_1ACC4E264(v8);
    if (a3)
    {
      *(_DWORD *)(v8 + 32) = 10;
      v11 = *((_DWORD *)v9 + 2);
      v10 = *((_DWORD *)v9 + 3);
      *((_DWORD *)v9 + 3) = v10 + 10;
      *((_DWORD *)v9 + 4) = v11 - v10;
      v12 = (char *)v9 + 20;
    }
    else
    {
      v12 = (char *)(v8 + 48);
    }
    *(_QWORD *)(v8 + 8) = v12;
    if (!*(_DWORD *)(v8 + 60))
    {
      sub_1ACC4D604(v8);
      return 0;
    }
  }
  return v8;
}

_QWORD *sub_1ACC4D3C0(_QWORD *result, unsigned int a2)
{
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  unsigned int v6;
  int v7;

  if (*((_DWORD *)result + 7))
  {
    v2 = *result;
    v3 = *((_DWORD *)result + 9);
    v4 = *(_DWORD *)(*result + 8);
    v5 = *(_DWORD *)(*result + 12);
    v6 = v3 - v4 + 2147418112;
    if (v6 >= a2)
      v6 = a2;
    v7 = v6 - v3 + v4;
    *(_DWORD *)(v2 + 8) = v7;
    *(_DWORD *)(v2 + 16) = v7 - v5 + 10;
    *((_DWORD *)result + 9) = v6;
    *((_DWORD *)result + 10) = 9 * v6 / 0xA;
    return sub_1ACC4E3D8(result);
  }
  return result;
}

uint64_t sub_1ACC4D420(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1ACC4D428(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * (a2 % *(_DWORD *)(a1 + 60)));
  if (result)
  {
    while (*(_DWORD *)(result + 16) != a2)
    {
      result = *(_QWORD *)(result + 24);
      if (!result)
        goto LABEL_4;
    }
    v5 = *(_QWORD *)(result + 40);
    if (v5)
    {
      v6 = *(_QWORD *)(result + 48);
      *(_QWORD *)(v6 + 40) = v5;
      v7 = *(_QWORD *)(result + 32);
      *(_QWORD *)(*(_QWORD *)(result + 40) + 48) = v6;
      *(_QWORD *)(result + 40) = 0;
      --*(_DWORD *)(v7 + 52);
    }
  }
  else
  {
LABEL_4:
    if (a3)
      return sub_1ACC4E54C(a1, a2, a3);
    else
      return 0;
  }
  return result;
}

unint64_t sub_1ACC4D498(unint64_t result, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  int v10;
  uint64_t v11;

  if (a3 || (v3 = *(_QWORD *)result, *(_DWORD *)(*(_QWORD *)result + 20) > *(_DWORD *)(*(_QWORD *)result + 8)))
  {
    v4 = *(_QWORD *)(a2 + 32);
    v5 = (_QWORD *)(*(_QWORD *)(v4 + 64) + 8 * (*(_DWORD *)(a2 + 16) % *(_DWORD *)(v4 + 60)));
    do
    {
      v6 = v5;
      v7 = *v5;
      v5 = (_QWORD *)(*v5 + 24);
    }
    while (v7 != a2);
    *v6 = *(_QWORD *)(a2 + 24);
    --*(_DWORD *)(v4 + 56);
    v8 = *(_QWORD *)(a2 + 32);
    if (*(_WORD *)(a2 + 20))
    {
      *(_QWORD *)(a2 + 24) = *(_QWORD *)(v8 + 72);
      *(_QWORD *)(v8 + 72) = a2;
    }
    else
    {
      result = sub_1ACBEBAB0(*(_QWORD *)a2);
    }
    v9 = *(_DWORD **)(v8 + 8);
    v10 = -1;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v3 + 24;
    v11 = *(_QWORD *)(v3 + 64);
    *(_QWORD *)(a2 + 40) = v11;
    *(_QWORD *)(v11 + 48) = a2;
    *(_QWORD *)(v3 + 64) = a2;
    v9 = (_DWORD *)(result + 52);
    v10 = 1;
  }
  *v9 += v10;
  return result;
}

uint64_t sub_1ACC4D568(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(result + 60);
  v5 = (_QWORD *)(*(_QWORD *)(result + 64) + 8 * (a3 % v4));
  do
  {
    v6 = v5;
    v7 = *v5;
    v5 = (_QWORD *)(*v5 + 24);
  }
  while (v7 != a2);
  *v6 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(result + 64);
  v9 = 8 * (a4 % v4);
  v10 = *(_QWORD *)(v8 + v9);
  *(_DWORD *)(a2 + 16) = a4;
  *(_QWORD *)(a2 + 24) = v10;
  *(_QWORD *)(v8 + v9) = a2;
  if (*(_DWORD *)(result + 44) < a4)
    *(_DWORD *)(result + 44) = a4;
  return result;
}

unint64_t sub_1ACC4D5CC(unint64_t result, unsigned int a2)
{
  unint64_t v3;

  if (*(_DWORD *)(result + 44) >= a2)
  {
    v3 = result;
    result = sub_1ACC4E900(result, a2);
    *(_DWORD *)(v3 + 44) = a2 - 1;
  }
  return result;
}

uint64_t sub_1ACC4D604(unint64_t a1)
{
  unint64_t v1;
  _DWORD *v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t (**v9)(unint64_t);
  uint64_t result;

  v1 = a1;
  v2 = *(_DWORD **)a1;
  if (*(_DWORD *)(a1 + 56))
    sub_1ACC4E900(a1, 0);
  v3 = v2[2] - *(_DWORD *)(v1 + 36);
  v4 = v2[3] - *(_DWORD *)(v1 + 32);
  v2[2] = v3;
  v2[3] = v4;
  v2[4] = v3 - v4 + 10;
  sub_1ACC4E3D8((_QWORD *)v1);
  v5 = *(_QWORD *)(v1 + 80);
  if (v5)
  {
    v6 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_9:
      (*v6)(v5);
      goto LABEL_10;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v5);
    v5 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = &xmmword_1ECD3B1D0;
      goto LABEL_9;
    }
  }
LABEL_10:
  v7 = *(_QWORD *)(v1 + 64);
  if (!v7)
    goto LABEL_17;
  v8 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_16;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v7);
  v7 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v8 = &xmmword_1ECD3B1D0;
LABEL_16:
    (*v8)(v7);
  }
LABEL_17:
  v9 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v9)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v9 = &xmmword_1ECD3B1D0;
    return (*v9)(v1);
  }
  return result;
}

_QWORD *sub_1ACC4D7E0(_QWORD *result)
{
  uint64_t v1;
  int v2;

  if (*((_DWORD *)result + 7))
  {
    v1 = *result;
    v2 = *(_DWORD *)(*result + 8);
    *(_DWORD *)(*result + 8) = 0;
    result = sub_1ACC4E3D8(result);
    *(_DWORD *)(v1 + 8) = v2;
  }
  return result;
}

unint64_t sub_1ACC4D818(unint64_t result, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v7 = result;
  v8 = *(_DWORD *)(result + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(*(_QWORD *)(result + 40) + 8 * (a4 % v8));
    if (v9)
    {
      while (*(_DWORD *)(v9 + 16) != a4)
      {
        v9 = *(_QWORD *)(v9 + 24);
        if (!v9)
          goto LABEL_9;
      }
      v16 = v9;
      if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_FAULT))
        sub_1ACCB406C(v9, v7, a4);
      result = sub_1ACC4DDE0((int *)v7, (unint64_t *)&v16);
      v8 = *(_DWORD *)(v7 + 32);
    }
  }
LABEL_9:
  v10 = (_QWORD *)(*(_QWORD *)(v7 + 40) + 8 * (a3 % v8));
  do
  {
    v11 = v10;
    v12 = *v10;
    v10 = (_QWORD *)(*v10 + 24);
  }
  while (v12 != a2);
  *v11 = *(_QWORD *)(a2 + 24);
  v13 = *(_QWORD *)(v7 + 40);
  v14 = 8 * (a4 % v8);
  v15 = *(_QWORD *)(v13 + v14);
  *(_DWORD *)(a2 + 16) = a4;
  *(_QWORD *)(a2 + 24) = v15;
  *(_QWORD *)(v13 + v14) = a2;
  if (*(_DWORD *)(v7 + 120) < a4)
    *(_DWORD *)(v7 + 120) = a4;
  return result;
}

_QWORD *sub_1ACC4D924(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;

  if (result)
  {
    v1 = result;
    v2 = result[18];
    if (v2)
    {
      v3 = result + 19;
      v4 = result + 20;
      v5 = (unsigned int *)MEMORY[0x1E0C83DA0];
      do
      {
        v9 = 1;
        result = (_QWORD *)MEMORY[0x1AF446FE4](*v5, *(_QWORD *)(v2 + 24), 0, &v9);
        if ((_DWORD)result)
          break;
        result = sub_1ACC4DCC0(v1, (uint64_t *)v2);
        if (*(unsigned __int8 *)(v2 + 33) + *(unsigned __int8 *)(v2 + 34) < *((_DWORD *)v1 + 31))
        {
          v6 = *v3;
          if (*v3)
          {
            *(_QWORD *)(v6 + 8) = v2;
            *(_QWORD *)v2 = v6;
          }
          else
          {
            *v4 = v2;
          }
          v7 = v1 + 19;
        }
        else
        {
          v8 = (_QWORD *)*v4;
          if (*v4)
          {
            *v8 = v2;
            *(_QWORD *)(v2 + 8) = v8;
          }
          else
          {
            *v3 = v2;
          }
          v7 = v1 + 20;
        }
        *v7 = v2;
        *(_BYTE *)(v2 + 32) = 1;
        v2 = v1[18];
      }
      while (v2);
    }
  }
  return result;
}

uint64_t sub_1ACC4DA08(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (*(_DWORD *)(result + 132) > *(_DWORD *)(result + 128))
  {
    v1 = result;
    v2 = *(_QWORD *)(result + 152);
    if (v2)
    {
      do
      {
        if (*(_DWORD *)(v1 + 132) <= *(_DWORD *)(v1 + 128))
          break;
        v8 = *(_QWORD *)v2;
        if (!(*(unsigned __int8 *)(v2 + 33) + *(unsigned __int8 *)(v2 + 34)))
          result = sub_1ACC4DAF8(v1, v2);
        v2 = v8;
      }
      while (v8);
    }
    v3 = *(_QWORD *)(v1 + 136);
    if (v3)
    {
      do
      {
        if (*(_DWORD *)(v1 + 132) <= *(_DWORD *)(v1 + 128))
          break;
        v9 = *(_QWORD *)v3;
        if (!(*(unsigned __int8 *)(v3 + 33) + *(unsigned __int8 *)(v3 + 34)))
          result = sub_1ACC4DAF8(v1, v3);
        v3 = v9;
      }
      while (v9);
    }
    v4 = *(_QWORD **)(v1 + 152);
    if (v4)
    {
      do
      {
        if (*(_DWORD *)(v1 + 132) <= *(_DWORD *)(v1 + 128))
          break;
        v5 = (_QWORD *)*v4;
        result = sub_1ACC4DAF8(v1, (uint64_t)v4);
        v4 = v5;
      }
      while (v5);
    }
    v6 = *(_QWORD **)(v1 + 136);
    if (v6)
    {
      do
      {
        if (*(_DWORD *)(v1 + 132) <= *(_DWORD *)(v1 + 128))
          break;
        v7 = (_QWORD *)*v6;
        result = sub_1ACC4DAF8(v1, (uint64_t)v6);
        v6 = v7;
      }
      while (v7);
    }
  }
  return result;
}

uint64_t sub_1ACC4DAF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  int v4;
  uint64_t i;
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t v8;
  uint64_t (**v9)(uint64_t *);
  uint64_t result;
  unint64_t v11;

  v2 = (uint64_t *)a2;
  if (*(_BYTE *)(a2 + 34))
  {
    v4 = *(_DWORD *)(a1 + 124);
    if (v4 >= 1)
    {
      for (i = 0; i < v4; ++i)
      {
        v11 = *(_QWORD *)(v2[2] + 8 * i);
        if (v11)
        {
          sub_1ACC4DDE0((int *)a1, &v11);
          v4 = *(_DWORD *)(a1 + 124);
        }
      }
    }
  }
  sub_1ACC4DCC0((_QWORD *)a1, v2);
  --*(_DWORD *)(a1 + 132);
  v6 = v2[2];
  if (v6)
  {
    v7 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_13:
      (*v7)(v6);
      goto LABEL_14;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v6);
    v6 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v7 = &xmmword_1ECD3B1D0;
      goto LABEL_13;
    }
  }
LABEL_14:
  v8 = v2[3];
  if (v8)
    MEMORY[0x1AF446FD8](*MEMORY[0x1E0C83DA0], v8, *(_QWORD *)(a1 + 8));
  v9 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v9)(v2);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v2);
  v2 = (uint64_t *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v9 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
    return (*v9)(v2);
  }
  return result;
}

_QWORD *sub_1ACC4DCC0(_QWORD *result, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;

  v2 = *((unsigned __int8 *)a2 + 32);
  if (v2 == 2)
  {
    v7 = *a2;
    if (!*a2 && (uint64_t *)result[18] != a2)
      return result;
    v4 = a2 + 1;
    v8 = (_QWORD *)a2[1];
    if (v8)
    {
      *v8 = v7;
      v7 = *a2;
    }
    if (v7)
      *(_QWORD *)(v7 + 8) = v8;
    if ((uint64_t *)result[17] == a2)
      result[17] = v7;
    v9 = (uint64_t *)result[18];
    result += 18;
    if (v9 != a2)
      goto LABEL_31;
LABEL_30:
    *result = *v4;
LABEL_31:
    *a2 = 0;
    a2[1] = 0;
    return result;
  }
  if (v2 == 1)
  {
    v10 = *a2;
    if (!*a2 && (uint64_t *)result[20] != a2)
      return result;
    v4 = a2 + 1;
    v11 = (_QWORD *)a2[1];
    if (v11)
    {
      *v11 = v10;
      v10 = *a2;
    }
    if (v10)
      *(_QWORD *)(v10 + 8) = v11;
    if ((uint64_t *)result[19] == a2)
      result[19] = v10;
    v12 = (uint64_t *)result[20];
    result += 20;
    if (v12 != a2)
      goto LABEL_31;
    goto LABEL_30;
  }
  if (!*((_BYTE *)a2 + 32))
  {
    v3 = *a2;
    if (*a2 || (uint64_t *)result[22] == a2)
    {
      v4 = a2 + 1;
      v5 = (_QWORD *)a2[1];
      if (v5)
      {
        *v5 = v3;
        v3 = *a2;
      }
      if (v3)
        *(_QWORD *)(v3 + 8) = v5;
      if ((uint64_t *)result[21] == a2)
        result[21] = v3;
      v6 = (uint64_t *)result[22];
      result += 22;
      if (v6 != a2)
        goto LABEL_31;
      goto LABEL_30;
    }
  }
  return result;
}

unint64_t sub_1ACC4DDE0(int *a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  int *v13;
  int *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 56);
  *a2 = 0;
  if (v5)
    *(_QWORD *)(*(_QWORD *)(v5 + 16) + 8 * ((*(_QWORD *)v4 - *(_QWORD *)(v5 + 24)) / (a1[1] + (uint64_t)*a1))) = 0;
  v6 = (uint64_t *)(*((_QWORD *)a1 + 5) + 8 * (*(_DWORD *)(v4 + 16) % a1[8]));
  v7 = *v6;
  if (*v6 != v4)
  {
    do
    {
      v8 = v7;
      v7 = *(_QWORD *)(v7 + 24);
    }
    while (v7 != v4);
    v6 = (uint64_t *)(v8 + 24);
  }
  *v6 = *(_QWORD *)(v4 + 24);
  *(_QWORD *)(v4 + 24) = 0;
  --a1[7];
  v9 = *(unsigned __int8 *)(v4 + 33);
  if (v9 <= 3
    && ((v10 = (uint64_t *)(v4 + 40), (v11 = *(_QWORD *)(v4 + 40)) != 0) || *(uint64_t **)&a1[4 * v9 + 16] == v10))
  {
    v12 = *(_QWORD **)(v4 + 48);
    if (v12)
    {
      *v12 = v11;
      v11 = *v10;
    }
    v13 = &a1[4 * v9 + 14];
    if (v11)
      *(_QWORD *)(v11 + 8) = v12;
    if (*(uint64_t **)v13 == v10)
      *(_QWORD *)v13 = v11;
    v14 = &a1[4 * v9];
    v16 = (uint64_t *)*((_QWORD *)v14 + 8);
    v15 = v14 + 16;
    if (v16 == v10)
      *v15 = *(_QWORD *)(v4 + 48);
    *v10 = 0;
    *(_QWORD *)(v4 + 48) = 0;
    *(_BYTE *)(v4 + 33) = 4;
    --a1[6];
    if (v5)
      --*(_BYTE *)(v5 + 34);
  }
  else
  {
    sub_1ACC4DF94(a1, v5, 3);
  }
  if (dword_1ECD3B140)
  {
    v17 = a1[1] + (uint64_t)*a1;
    v18 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      v18 = xmmword_1ECD3E930;
    }
    qword_1ECD3E888 -= v17;
    --qword_1ECD3E8D0;
    if (v18)
      xmmword_1ECD3B1D0(v18);
  }
  return sub_1ACBEBAB0(v4);
}

_QWORD *sub_1ACC4DF94(_QWORD *result, uint64_t a2, int a3)
{
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t *v14;
  _QWORD *v15;

  if (!a2)
    return result;
  if (a3 == 4)
  {
    --*(_BYTE *)(a2 + 34);
    return result;
  }
  v4 = result;
  v5 = *(_BYTE *)(a2 + 33) - 1;
  *(_BYTE *)(a2 + 33) = v5;
  if (a3 == 2)
  {
    ++*(_BYTE *)(a2 + 34);
    if (v5)
      return result;
    goto LABEL_13;
  }
  if (!v5)
  {
LABEL_13:
    result = sub_1ACC4DCC0(result, (uint64_t *)a2);
    v8 = v4 + 17;
    if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) >= *((_DWORD *)v4 + 31))
    {
      v12 = (_QWORD *)v4[18];
      v11 = v4 + 18;
      v10 = v12;
      if (v12)
      {
        *v10 = a2;
        *(_QWORD *)(a2 + 8) = v10;
      }
      else
      {
        *v8 = a2;
      }
      v8 = v11;
    }
    else
    {
      v9 = *v8;
      if (*v8)
      {
        *(_QWORD *)(v9 + 8) = a2;
        *(_QWORD *)a2 = v9;
      }
      else
      {
        v4[18] = a2;
      }
    }
    *v8 = a2;
    *(_BYTE *)(a2 + 32) = 2;
    return result;
  }
  if (a3 == 3 && *(unsigned __int8 *)(a2 + 34) + v5 == *((_DWORD *)result + 31) - 1)
  {
    result = sub_1ACC4DCC0(result, (uint64_t *)a2);
    v6 = v4 + 21;
    if (*(unsigned __int8 *)(a2 + 33) + *(unsigned __int8 *)(a2 + 34) >= *((_DWORD *)v4 + 31))
    {
      v15 = (_QWORD *)v4[22];
      v14 = v4 + 22;
      v13 = v15;
      if (v15)
      {
        *v13 = a2;
        *(_QWORD *)(a2 + 8) = v13;
      }
      else
      {
        *v6 = a2;
      }
      v6 = v14;
    }
    else
    {
      v7 = *v6;
      if (*v6)
      {
        *(_QWORD *)(v7 + 8) = a2;
        *(_QWORD *)a2 = v7;
      }
      else
      {
        v4[22] = a2;
      }
    }
    *v6 = a2;
    *(_BYTE *)(a2 + 32) = 0;
  }
  return result;
}

uint64_t sub_1ACC4E0FC(uint64_t a1, unsigned int a2, unsigned int *a3)
{
  unsigned int v4;
  uint64_t v6;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t **v13;
  uint64_t **v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  int v18;

  v4 = *(_DWORD *)(a1 + 32);
  if (!v4)
  {
    v6 = 0;
    if (!a3)
      return v6;
    goto LABEL_6;
  }
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * (a2 % v4));
  if (!v6)
  {
LABEL_5:
    v4 = 0;
    if (!a3)
      return v6;
LABEL_6:
    *a3 = v4;
    return v6;
  }
  while (*(_DWORD *)(v6 + 16) != a2)
  {
    v6 = *(_QWORD *)(v6 + 24);
    if (!v6)
      goto LABEL_5;
  }
  v18 = 0;
  v8 = *(unsigned __int8 *)(v6 + 33);
  if (v8 <= 3)
  {
    v9 = (uint64_t *)(v6 + 40);
    if (*(_QWORD *)(v6 + 40) || *(uint64_t **)(a1 + 16 * v8 + 64) == v9)
    {
      v10 = sub_1ACB6DA2C(a1, *(_QWORD *)(v6 + 56), 1, &v18);
      if (v10 | v18)
      {
        v6 = 0;
      }
      else
      {
        v11 = *(unsigned __int8 *)(v6 + 33);
        if (v11 <= 3)
        {
          v12 = (uint64_t *)*v9;
          if (*v9 || *(uint64_t **)(a1 + 16 * v11 + 64) == v9)
          {
            v13 = *(uint64_t ***)(v6 + 48);
            if (v13)
            {
              *v13 = v12;
              v12 = (uint64_t *)*v9;
            }
            v14 = (uint64_t **)(a1 + 16 * v11 + 56);
            if (v12)
              v12[1] = (uint64_t)v13;
            if (*v14 == v9)
              *v14 = v12;
            v15 = a1 + 16 * v11;
            v17 = *(uint64_t **)(v15 + 64);
            v16 = (_QWORD *)(v15 + 64);
            if (v17 == v9)
              *v16 = *(_QWORD *)(v6 + 48);
            *v9 = 0;
            *(_QWORD *)(v6 + 48) = 0;
            *(_BYTE *)(v6 + 33) = 4;
            --*(_DWORD *)(a1 + 24);
          }
        }
      }
    }
  }
  v4 = 1;
  if (a3)
    goto LABEL_6;
  return v6;
}

void sub_1ACC4E264(uint64_t a1)
{
  int v2;
  unsigned int v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(uint64_t);

  v2 = *(_DWORD *)(a1 + 60);
  if ((2 * v2) <= 0x100)
    v3 = 256;
  else
    v3 = 2 * v2;
  if (v2 && off_1EECAD248)
    off_1EECAD248(a1);
  v4 = (char *)sub_1ACB5D828(8 * v3);
  v5 = v4;
  if (v4)
    bzero(v4, 8 * v3);
  if (*(_DWORD *)(a1 + 60) && off_1EECAD250)
    off_1EECAD250(v4);
  if (v5)
  {
    v6 = *(unsigned int *)(a1 + 60);
    if ((_DWORD)v6)
    {
      for (i = 0; i != v6; ++i)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * i);
        if (v8)
        {
          do
          {
            v9 = *(_QWORD *)(v8 + 24);
            v10 = 8 * (*(_DWORD *)(v8 + 16) % v3);
            *(_QWORD *)(v8 + 24) = *(_QWORD *)&v5[v10];
            *(_QWORD *)&v5[v10] = v8;
            v8 = v9;
          }
          while (v9);
        }
      }
    }
    v11 = *(_QWORD *)(a1 + 64);
    if (!v11)
      goto LABEL_26;
    v12 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v11);
      v11 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_26;
      v12 = &xmmword_1ECD3B1D0;
    }
    (*v12)(v11);
LABEL_26:
    *(_QWORD *)(a1 + 64) = v5;
    *(_DWORD *)(a1 + 60) = v3;
  }
}

_QWORD *sub_1ACC4E3D8(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);

  v1 = result;
  v2 = *result;
  while (*(_DWORD *)(v2 + 20) > *(_DWORD *)(v2 + 8))
  {
    v3 = *(_QWORD *)(v2 + 72);
    if (*(_WORD *)(v3 + 22))
      break;
    v4 = *(_QWORD *)(v3 + 48);
    v5 = *(_QWORD *)(v3 + 32);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v3 + 40);
    *(_QWORD *)(*(_QWORD *)(v3 + 40) + 48) = v4;
    *(_QWORD *)(v3 + 40) = 0;
    --*(_DWORD *)(v5 + 52);
    v6 = (_QWORD *)(*(_QWORD *)(v5 + 64) + 8 * (*(_DWORD *)(v3 + 16) % *(_DWORD *)(v5 + 60)));
    do
    {
      v7 = v6;
      v8 = *v6;
      v6 = (_QWORD *)(*v6 + 24);
    }
    while (v8 != v3);
    *v7 = *(_QWORD *)(v3 + 24);
    --*(_DWORD *)(v5 + 56);
    v9 = *(_QWORD *)(v3 + 32);
    if (*(_WORD *)(v3 + 20))
    {
      *(_QWORD *)(v3 + 24) = *(_QWORD *)(v9 + 72);
      *(_QWORD *)(v9 + 72) = v3;
    }
    else
    {
      result = (_QWORD *)sub_1ACBEBAB0(*(_QWORD *)v3);
    }
    --**(_DWORD **)(v9 + 8);
  }
  if (!*((_DWORD *)v1 + 14))
  {
    v10 = v1[10];
    if (v10)
    {
      v11 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
        --qword_1ECD3E8D0;
        result = (_QWORD *)off_1ECD3B168(v10);
        v10 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_18;
        v11 = &xmmword_1ECD3B1D0;
      }
      result = (_QWORD *)(*v11)(v10);
LABEL_18:
      v1[9] = 0;
      v1[10] = 0;
    }
  }
  return result;
}

uint64_t sub_1ACC4E54C(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t result;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;

  v6 = *(_QWORD *)a1;
  v7 = *(_DWORD *)(a1 + 56);
  if (a3 == 1)
  {
    v8 = *(_DWORD *)(a1 + 52);
    v9 = v7 - v8;
    if (v7 - v8 >= *(_DWORD *)(v6 + 16) || v9 >= *(_DWORD *)(a1 + 40))
      return 0;
    if (dword_1EECAD210 && *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16) <= SHIDWORD(xmmword_1EECAD200))
    {
      if (!dword_1EECAD23C)
        goto LABEL_10;
    }
    else if (!dword_1ECD3E948)
    {
      goto LABEL_10;
    }
    if (v8 < v9)
      return 0;
  }
LABEL_10:
  if (v7 >= *(_DWORD *)(a1 + 60))
    sub_1ACC4E264(a1);
  v10 = *(_DWORD *)(a1 + 28);
  if (!v10)
    goto LABEL_14;
  result = *(_QWORD *)(v6 + 72);
  if (*(_WORD *)(result + 22))
    goto LABEL_14;
  if ((*(_DWORD *)(a1 + 56) + 1) < *(_DWORD *)(a1 + 36))
  {
    if (dword_1EECAD210 && *(_DWORD *)(a1 + 20) + *(_DWORD *)(a1 + 16) <= SHIDWORD(xmmword_1EECAD200))
    {
      if (!dword_1EECAD23C)
      {
LABEL_14:
        result = *(_QWORD *)(a1 + 72);
        if (result)
          goto LABEL_15;
        if (!*(_DWORD *)(a1 + 56))
        {
          v20 = DWORD2(xmmword_1EECAD200);
          if (DWORD2(xmmword_1EECAD200))
          {
            if (*(_DWORD *)(a1 + 36) >= 3u)
            {
              if (off_1EECAD248)
              {
                off_1EECAD248(0);
                v20 = DWORD2(xmmword_1EECAD200);
              }
              if (v20 < 1)
              {
                v22 = -1024 * v20;
                v21 = *(int *)(a1 + 24);
              }
              else
              {
                v21 = *(int *)(a1 + 24);
                v22 = v21 * v20;
              }
              v30 = v21 * *(unsigned int *)(a1 + 36);
              if (v22 >= v30)
                v31 = v30;
              else
                v31 = v22;
              v32 = sub_1ACB5D828(v31);
              v33 = v32;
              *(_QWORD *)(a1 + 80) = v32;
              if (off_1EECAD250)
                off_1EECAD250(v32);
              if (v33)
              {
                v34 = off_1ECD3B178(v33);
                v35 = *(int *)(a1 + 24);
                v36 = *(int *)(a1 + 16);
                v37 = *(_QWORD *)(a1 + 72);
                v38 = v34 / (int)v35;
                do
                {
                  v39 = v33 + v36;
                  *(_QWORD *)v39 = v33;
                  *(_QWORD *)(v39 + 8) = v33 + v36 + 56;
                  *(_DWORD *)(v39 + 20) = 1;
                  *(_QWORD *)(v39 + 24) = v37;
                  *(_QWORD *)(v39 + 48) = 0;
                  v33 += v35;
                  v37 = v39;
                  --v38;
                }
                while (v38);
                result = v33 + v36 - v35;
                goto LABEL_15;
              }
              result = *(_QWORD *)(a1 + 72);
              if (result)
              {
LABEL_15:
                v12 = (_QWORD *)(result + 24);
                *(_QWORD *)(a1 + 72) = *(_QWORD *)(result + 24);
LABEL_24:
                *v12 = 0;
                v15 = *(int **)(a1 + 8);
                v16 = *v15;
                v17 = 1;
                goto LABEL_25;
              }
            }
          }
        }
        if (a3 == 1)
        {
          if (off_1EECAD248)
            off_1EECAD248(0);
          v13 = sub_1ACBECD04(*(_DWORD *)(a1 + 24));
          v14 = v13;
          if (off_1EECAD250)
            off_1EECAD250(v13);
          if (v14)
            goto LABEL_23;
        }
        else
        {
          v14 = sub_1ACBECD04(*(_DWORD *)(a1 + 24));
          if (v14)
          {
LABEL_23:
            result = v14 + *(int *)(a1 + 16);
            *(_QWORD *)result = v14;
            *(_QWORD *)(result + 8) = result + 56;
            *(_DWORD *)(result + 20) = 0;
            v12 = (_QWORD *)(result + 48);
            goto LABEL_24;
          }
        }
        return 0;
      }
    }
    else if (!dword_1ECD3E948)
    {
      goto LABEL_14;
    }
  }
  v23 = *(_QWORD *)(result + 32);
  v24 = (_QWORD *)(*(_QWORD *)(v23 + 64) + 8 * (*(_DWORD *)(result + 16) % *(_DWORD *)(v23 + 60)));
  do
  {
    v25 = v24;
    v26 = *v24;
    v24 = (_QWORD *)(*v24 + 24);
  }
  while (v26 != result);
  *v25 = *(_QWORD *)(result + 24);
  --*(_DWORD *)(v23 + 56);
  v27 = *(_QWORD *)(result + 48);
  v28 = *(_QWORD *)(result + 32);
  *(_QWORD *)(v27 + 40) = *(_QWORD *)(result + 40);
  *(_QWORD *)(*(_QWORD *)(result + 40) + 48) = v27;
  *(_QWORD *)(result + 40) = 0;
  --*(_DWORD *)(v28 + 52);
  if (*(_DWORD *)(v28 + 24) != *(_DWORD *)(a1 + 24))
  {
    if (*(_WORD *)(result + 20))
    {
      *(_QWORD *)(result + 24) = *(_QWORD *)(v28 + 72);
      *(_QWORD *)(v28 + 72) = result;
    }
    else
    {
      sub_1ACBEBAB0(*(_QWORD *)result);
    }
    --**(_DWORD **)(v28 + 8);
    goto LABEL_14;
  }
  v16 = v10 - *(_DWORD *)(v28 + 28);
  v29 = *(_DWORD *)(v6 + 20);
  v15 = (int *)(v6 + 20);
  v17 = v29;
LABEL_25:
  *v15 = v16 + v17;
  v18 = *(_DWORD *)(a1 + 60);
  ++*(_DWORD *)(a1 + 56);
  *(_DWORD *)(result + 16) = a2;
  v19 = 8 * (a2 % v18);
  *(_QWORD *)(result + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 64) + v19);
  *(_QWORD *)(result + 32) = a1;
  *(_QWORD *)(result + 40) = 0;
  **(_QWORD **)(result + 8) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 64) + v19) = result;
  if (*(_DWORD *)(a1 + 44) < a2)
    *(_DWORD *)(a1 + 44) = a2;
  return result;
}

unint64_t sub_1ACC4E900(unint64_t result, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = result;
  v4 = *(_DWORD *)(result + 44);
  v5 = *(_DWORD *)(result + 60);
  if (v4 - a2 >= v5)
  {
    v6 = v5 >> 1;
    v7 = (v5 >> 1) - 1;
  }
  else
  {
    v6 = a2 % v5;
    v7 = v4 % v5;
  }
  while (1)
  {
    v8 = (uint64_t *)(*(_QWORD *)(v3 + 64) + 8 * v6);
    for (i = *v8; *v8; i = *v8)
    {
      while (*(_DWORD *)(i + 16) < a2)
      {
        v8 = (uint64_t *)(i + 24);
        i = *(_QWORD *)(i + 24);
        if (!i)
          goto LABEL_15;
      }
      --*(_DWORD *)(v3 + 56);
      *v8 = *(_QWORD *)(i + 24);
      v10 = *(_QWORD *)(i + 40);
      if (v10)
      {
        v11 = *(_QWORD *)(i + 48);
        *(_QWORD *)(v11 + 40) = v10;
        v12 = *(_QWORD *)(i + 32);
        *(_QWORD *)(*(_QWORD *)(i + 40) + 48) = v11;
        *(_QWORD *)(i + 40) = 0;
        --*(_DWORD *)(v12 + 52);
        if (!*(_WORD *)(i + 20))
          goto LABEL_13;
      }
      else
      {
        v12 = *(_QWORD *)(i + 32);
        if (!*(_WORD *)(i + 20))
        {
LABEL_13:
          result = sub_1ACBEBAB0(*(_QWORD *)i);
          goto LABEL_14;
        }
      }
      *(_QWORD *)(i + 24) = *(_QWORD *)(v12 + 72);
      *(_QWORD *)(v12 + 72) = i;
LABEL_14:
      --**(_DWORD **)(v12 + 8);
    }
LABEL_15:
    if (v6 == v7)
      return result;
    v6 = (v6 + 1) % *(_DWORD *)(v3 + 60);
  }
}

_QWORD *sub_1ACC4EA28(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  void (*v12)(_QWORD);

  v4 = *(_QWORD *)(a2 + 80);
  v2 = (_QWORD *)(a2 + 80);
  v3 = v4;
  if (v4)
  {
    if (*(_QWORD **)v3 == result)
    {
LABEL_6:
      *v2 = *(_QWORD *)(v3 + 40);
      v6 = *(_QWORD **)v3;
      v7 = *(_DWORD *)(v3 + 24) - 1;
      *(_DWORD *)(v3 + 24) = v7;
      if (!v7)
      {
        v8 = *(_QWORD *)(v3 + 16);
        v9 = v6;
        if (v8)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v8 + 32))(v8);
          v9 = *(_QWORD **)v3;
        }
        v10 = *(_QWORD *)(v3 + 8);
        v11 = *(_DWORD *)(v10 + 16) - 1;
        *(_DWORD *)(v10 + 16) = v11;
        if (!v11)
        {
          v12 = *(void (**)(_QWORD))(v10 + 32);
          if (v12)
            v12(*(_QWORD *)(v10 + 24));
          sub_1ACBE0F9C(v9, (_QWORD *)v10);
        }
        return sub_1ACBE0F9C(v6, (_QWORD *)v3);
      }
    }
    else
    {
      while (1)
      {
        v5 = v3;
        v3 = *(_QWORD *)(v3 + 40);
        if (!v3)
          break;
        if (*(_QWORD **)v3 == result)
        {
          v2 = (_QWORD *)(v5 + 40);
          goto LABEL_6;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1ACC4EAF8(_QWORD *result, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;

  v2 = *(_QWORD *)(a2 + 64);
  if (v2)
  {
    if ((*(_DWORD *)v2)-- == 1)
    {
      v4 = result;
      (*(void (**)(_QWORD))(v2 + 8))(*(_QWORD *)(v2 + 16));
      return sub_1ACBE0F9C(v4, (_QWORD *)v2);
    }
  }
  return result;
}

uint64_t sub_1ACC4EB48(uint64_t a1, int a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  sqlite3 *v11;
  uint64_t v12;
  unsigned int (*v13)(uint64_t);
  int v14;

  if (!a1)
    return 0;
  v8 = *(uint64_t **)(a1 + 8);
  if (*(_BYTE *)(a1 + 17) && (++*(_DWORD *)(a1 + 20), !*(_BYTE *)(a1 + 18)))
  {
    sub_1ACBECF6C(a1);
    if (*((_BYTE *)v8 + 36))
    {
LABEL_5:
      v9 = 6;
      if (!*(_BYTE *)(a1 + 17))
        return v9;
      goto LABEL_18;
    }
  }
  else if (*((_BYTE *)v8 + 36))
  {
    goto LABEL_5;
  }
  v10 = *v8;
  v11 = *(sqlite3 **)a1;
  v12 = *(_QWORD *)(v10 + 344);
  if (!v12)
  {
    if (*(_BYTE *)(v10 + 9) != 5
      || (sqlite3_exec(*(sqlite3 **)a1, "PRAGMA table_list", 0, 0, 0), (v12 = *(_QWORD *)(v10 + 344)) == 0))
    {
      v9 = 0;
      if (!*(_BYTE *)(a1 + 17))
        return v9;
      goto LABEL_18;
    }
  }
  if (a2)
    v13 = *(unsigned int (**)(uint64_t))(v10 + 232);
  else
    v13 = 0;
  v9 = sub_1ACBAF5B4(v12, (uint64_t)v11, a2, v13, *(_QWORD *)(v10 + 240), *(unsigned __int8 *)(v10 + 15), *(_DWORD *)(v10 + 200), *(_QWORD *)(v10 + 328), a3, a4);
  if (*(_BYTE *)(a1 + 17))
  {
LABEL_18:
    v14 = *(_DWORD *)(a1 + 20) - 1;
    *(_DWORD *)(a1 + 20) = v14;
    if (!v14)
      sub_1ACBED048(a1);
  }
  return v9;
}

uint64_t sub_1ACC4EC84(int a1, int a2, char *__s1, int a4, char *__s2)
{
  uint64_t v5;
  int v6;
  char *v7;
  uint64_t v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t result;

  v5 = a2;
  v6 = a2 + 1;
  while (v5)
  {
    v7 = &__s1[v5--];
    --v6;
    if (*(v7 - 1) != 32)
      goto LABEL_6;
  }
  v6 = 0;
LABEL_6:
  v8 = a4;
  v9 = a4 + 1;
  while (v8)
  {
    v10 = &__s2[v8--];
    --v9;
    if (*(v10 - 1) != 32)
      goto LABEL_11;
  }
  v9 = 0;
LABEL_11:
  v11 = v6 - v9;
  if (v6 >= v9)
    v6 = v9;
  LODWORD(result) = memcmp(__s1, __s2, v6);
  if ((_DWORD)result)
    return result;
  else
    return v11;
}

void sub_1ACC4ED14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  char v10;

  if (sqlite3_overload_function((sqlite3 *)a1, "MATCH", 2) == 7 && !*(_BYTE *)(a1 + 103) && !*(_BYTE *)(a1 + 104))
  {
    *(_BYTE *)(a1 + 103) = 1;
    if (*(int *)(a1 + 220) >= 1)
      *(_DWORD *)(a1 + 424) = 1;
    ++*(_DWORD *)(a1 + 432);
    *(_WORD *)(a1 + 436) = 0;
    v8 = *(_QWORD *)(a1 + 344);
    if (v8)
    {
      sub_1ACBCB308(v8, "out of memory", v2, v3, v4, v5, v6, v7, v10);
      for (i = *(_QWORD *)(a1 + 344); ; ++*(_DWORD *)(i + 48))
      {
        *(_DWORD *)(i + 24) = 7;
        i = *(_QWORD *)(i + 256);
        if (!i)
          break;
      }
    }
  }
}

uint64_t sub_1ACC4EDB8(unsigned __int8 *a1)
{
  int v2;
  const char *v3;
  uint64_t module_v2;
  uint64_t v6;
  _DWORD *v7;
  uint64_t (**v8)(_QWORD);

  if (!a1)
  {
    v3 = "NULL";
    goto LABEL_12;
  }
  v2 = a1[113];
  if (v2 == 186)
  {
LABEL_5:
    v3 = "unopened";
LABEL_12:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1ACBBE20C(161238);
  }
  if (v2 != 118)
  {
    if (v2 != 109)
    {
      v3 = "invalid";
      goto LABEL_12;
    }
    goto LABEL_5;
  }
  module_v2 = sub_1ACB5BDE4((uint64_t)a1, "fts4aux", (uint64_t)&unk_1E5C74CC8, 0, 0);
  if ((_DWORD)module_v2)
    return module_v2;
  if (sqlite3_initialize())
    return 7;
  v6 = sub_1ACB5D828(40);
  if (!v6)
    return 7;
  v7 = (_DWORD *)v6;
  *(_WORD *)v6 = 257;
  *(_QWORD *)(v6 + 24) = 0;
  *(_QWORD *)(v6 + 12) = 0;
  *(_QWORD *)(v6 + 4) = 0;
  *(_DWORD *)(v6 + 32) = 0;
  module_v2 = 7;
  if (sub_1ACB5B970(v6, "simple", 7, (uint64_t)&unk_1E5C74EC8)
    || sub_1ACB5B970((uint64_t)v7, "porter", 7, (uint64_t)&unk_1E5C74F00)
    || sub_1ACB5B970((uint64_t)v7, "unicode61", 10, (uint64_t)&unk_1E5C74C90)
    || (module_v2 = sub_1ACBCF994((uint64_t)a1, "fts3_tokenizer", 1, 524289, (uint64_t)v7, (uint64_t)sub_1ACC576D4, 0, 0, 0, 0, 0), (_DWORD)module_v2)|| (module_v2 = sub_1ACBCF994((uint64_t)a1, "fts3_tokenizer", 2, 524289, (uint64_t)v7, (uint64_t)sub_1ACC576D4,
                      0,
                      0,
                      0,
                      0,
                      0),
        (_DWORD)module_v2)
    || (module_v2 = sqlite3_overload_function((sqlite3 *)a1, "snippet", -1), (_DWORD)module_v2)
    || (module_v2 = sqlite3_overload_function((sqlite3 *)a1, "offsets", 1), (_DWORD)module_v2)
    || (module_v2 = sqlite3_overload_function((sqlite3 *)a1, "matchinfo", 1), (_DWORD)module_v2)
    || (module_v2 = sqlite3_overload_function((sqlite3 *)a1, "matchinfo", 2), (_DWORD)module_v2)
    || (module_v2 = sqlite3_overload_function((sqlite3 *)a1, "optimize", 1), (_DWORD)module_v2))
  {
    sub_1ACC4F9D0((uint64_t)v7);
    v8 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = (_DWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return module_v2;
      v8 = &xmmword_1ECD3B1D0;
    }
    (*v8)(v7);
    return module_v2;
  }
  ++v7[8];
  module_v2 = sqlite3_create_module_v2((sqlite3 *)a1, "fts3", &stru_1E5C74BD0, v7, (void (__cdecl *)(void *))sub_1ACBAE8B4);
  if ((_DWORD)module_v2)
    return module_v2;
  ++v7[8];
  module_v2 = sqlite3_create_module_v2((sqlite3 *)a1, "fts4", &stru_1E5C74BD0, v7, (void (__cdecl *)(void *))sub_1ACBAE8B4);
  if ((_DWORD)module_v2)
    return module_v2;
  ++v7[8];
  return sub_1ACC4F934((uint64_t)a1, (uint64_t)v7);
}

uint64_t sub_1ACC4F144(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  const char *v6;
  _BOOL4 v7;
  _BOOL4 v8;
  int v9;
  const char *v10;
  _OWORD v11[2];
  _OWORD v12[2];
  _OWORD v13[2];
  _OWORD v14[2];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (sqlite3_initialize())
    return 7;
  v3 = sub_1ACB5D828(80);
  if (!v3)
    return 7;
  v4 = v3;
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 48) = 0u;
  *(_OWORD *)(v3 + 64) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_DWORD *)v3 = 2;
  *(_QWORD *)(v3 + 24) = sub_1ACC75CA8;
  *(_QWORD *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 8) = sub_1ACC75D64;
  *(_QWORD *)(v3 + 16) = sub_1ACC75E24;
  if (!a1)
  {
    v6 = "NULL";
    goto LABEL_26;
  }
  v5 = *(unsigned __int8 *)(a1 + 113);
  if (v5 == 186)
  {
LABEL_9:
    v6 = "unopened";
LABEL_26:
    sqlite3_log(21, "API call with %s database connection pointer", v6);
    return sub_1ACBBE20C(161254);
  }
  if (v5 != 118)
  {
    if (v5 != 109)
    {
      v6 = "invalid";
      goto LABEL_26;
    }
    goto LABEL_9;
  }
  result = sub_1ACB5BDE4(a1, "fts5", (uint64_t)&unk_1E5C750F8, v3, (void (*)(uint64_t))sub_1ACC75EBC);
  if (!(_DWORD)result)
  {
    result = (*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD, _QWORD))(v4 + 24))(v4, "snippet", 0, sub_1ACC93858, 0);
    v7 = result == 0;
    if (!(_DWORD)result)
    {
      result = (*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD, _QWORD))(v4 + 24))(v4, "highlight", 0, sub_1ACC943F4, 0);
      v7 = result == 0;
      if (!(_DWORD)result)
      {
        result = (*(uint64_t (**)(uint64_t, const char *, _QWORD, _QWORD, _QWORD))(v4 + 24))(v4, "bm25", 0, sub_1ACC947F8, 0);
        v7 = result == 0;
      }
    }
    if (v7)
    {
      v13[0] = xmmword_1E5C752F0;
      v13[1] = *(_OWORD *)&off_1E5C75300;
      v14[0] = xmmword_1E5C75310;
      v14[1] = *(_OWORD *)off_1E5C75320;
      v12[0] = xmmword_1E5C752D0;
      v12[1] = *(_OWORD *)&off_1E5C752E0;
      *((_QWORD *)&v11[0] + 1) = 0x1ACC95538;
      v11[1] = *(_OWORD *)&off_1E5C752C0;
      result = (*(uint64_t (**)(uint64_t, const char *, uint64_t, char *, _QWORD))(v4 + 8))(v4, "unicode61", v4, (char *)v11 + 8, 0);
      v8 = result == 0;
      if (!(_DWORD)result)
      {
        result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *, _QWORD))(v4 + 8))(v4, *(_QWORD *)&v12[0], v4, (char *)v12 + 8, 0);
        v8 = result == 0;
        if (!(_DWORD)result)
        {
          result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *, _QWORD))(v4 + 8))(v4, *(_QWORD *)&v13[0], v4, (char *)v13 + 8, 0);
          v8 = result == 0;
          if (!(_DWORD)result)
          {
            result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, char *, _QWORD))(v4 + 8))(v4, *(_QWORD *)&v14[0], v4, (char *)v14 + 8, 0);
            v8 = result == 0;
          }
        }
      }
      if (v8)
      {
        v9 = *(unsigned __int8 *)(a1 + 113);
        if (v9 == 186)
          goto LABEL_24;
        if (v9 != 118)
        {
          if (v9 != 109)
          {
            v10 = "invalid";
            goto LABEL_31;
          }
LABEL_24:
          v10 = "unopened";
LABEL_31:
          sqlite3_log(21, "API call with %s database connection pointer", v10);
          return sub_1ACBBE20C(161254);
        }
        result = sub_1ACB5BDE4(a1, "fts5vocab", (uint64_t)&unk_1E5C75330, v4, 0);
        if (!(_DWORD)result)
        {
          result = sub_1ACBCF994(a1, "fts5", 1, 1, v4, (uint64_t)sub_1ACC7609C, 0, 0, 0, 0, 0);
          if (!(_DWORD)result)
            return sub_1ACBCF994(a1, "fts5_source_id", 0, 2099201, v4, (uint64_t)sub_1ACC76140, 0, 0, 0, 0, 0);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACC4F4EC(uint64_t a1)
{
  uint64_t result;
  int v3;
  const char *v4;
  int v5;

  result = sub_1ACBCF994(a1, "rtreenode", 2, 1, 0, (uint64_t)sub_1ACC9BA48, 0, 0, 0, 0, 0);
  if (!(_DWORD)result)
  {
    result = sub_1ACBCF994(a1, "rtreedepth", 1, 1, 0, (uint64_t)sub_1ACC9BE88, 0, 0, 0, 0, 0);
    if (!(_DWORD)result)
    {
      result = sub_1ACBCF994(a1, "rtreecheck", 0xFFFFFFFFLL, 1, 0, (uint64_t)sub_1ACC9BFC8, 0, 0, 0, 0, 0);
      if (!(_DWORD)result)
      {
        if (!a1)
        {
          v4 = "NULL";
          goto LABEL_16;
        }
        v3 = *(unsigned __int8 *)(a1 + 113);
        if (v3 != 186)
        {
          if (v3 == 118)
          {
            result = sub_1ACB5BDE4(a1, "rtree", (uint64_t)&unk_1EECACC88, 0, 0);
            if ((_DWORD)result)
              return result;
            v5 = *(unsigned __int8 *)(a1 + 113);
            switch(v5)
            {
              case 186:
                goto LABEL_9;
              case 118:
                return sub_1ACB5BDE4(a1, "rtree_i32", (uint64_t)&unk_1EECACC88, 1, 0);
              case 109:
                goto LABEL_9;
            }
          }
          else if (v3 == 109)
          {
            goto LABEL_9;
          }
          v4 = "invalid";
          goto LABEL_16;
        }
LABEL_9:
        v4 = "unopened";
LABEL_16:
        sqlite3_log(21, "API call with %s database connection pointer", v4);
        return sub_1ACBBE20C(161254);
      }
    }
  }
  return result;
}

uint64_t sub_1ACC4F68C(uint64_t a1)
{
  int v1;
  const char *v2;

  if (a1)
  {
    v1 = *(unsigned __int8 *)(a1 + 113);
    switch(v1)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return sub_1ACB5BDE4(a1, "dbstat", (uint64_t)&unk_1EECACD48, 0, 0);
      case 109:
LABEL_5:
        v2 = "unopened";
        break;
      default:
        v2 = "invalid";
        break;
    }
  }
  else
  {
    v2 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v2);
  return sub_1ACBBE20C(161238);
}

uint64_t sub_1ACC4F724()
{
  if (off_1ECD3B2E0)
    return off_1ECD3B2E0(500);
  else
    return 0;
}

uint64_t sub_1ACC4F740(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t result;
  int v5;

  if (!a1)
  {
    v3 = "NULL";
    goto LABEL_12;
  }
  v2 = *(unsigned __int8 *)(a1 + 113);
  v3 = "unopened";
  if (v2 != 109)
  {
    if (v2 == 118)
    {
      result = sub_1ACB5BDE4(a1, "json_each", (uint64_t)&unk_1EECACE08, 0, 0);
      if ((_DWORD)result)
        return result;
      v5 = *(unsigned __int8 *)(a1 + 113);
      v3 = "unopened";
      if (v5 == 109 || v5 == 186)
        goto LABEL_12;
      if (v5 == 118)
        return sub_1ACB5BDE4(a1, "json_tree", (uint64_t)&unk_1EECACEC8, 0, 0);
      goto LABEL_5;
    }
    if (v2 != 186)
LABEL_5:
      v3 = "invalid";
  }
LABEL_12:
  sqlite3_log(21, "API call with %s database connection pointer", v3);
  return sub_1ACBBE20C(161238);
}

uint64_t sub_1ACC4F844(uint64_t a1)
{
  int v2;
  const char *v3;
  uint64_t result;
  uint64_t v5;

  v5 = a1;
  if (!a1)
  {
    v3 = "NULL";
    goto LABEL_8;
  }
  v2 = *(unsigned __int8 *)(a1 + 113);
  if (v2 == 186)
    goto LABEL_5;
  if (v2 != 118)
    goto LABEL_4;
  result = sub_1ACB5BDE4(a1, "bytecode", (uint64_t)&unk_1EECACF88, 0, 0);
  if ((_DWORD)result)
    return result;
  v2 = *(unsigned __int8 *)(a1 + 113);
  if (v2 == 186)
  {
LABEL_5:
    v3 = "unopened";
LABEL_8:
    sqlite3_log(21, "API call with %s database connection pointer", v3);
    return sub_1ACBBE20C(161238);
  }
  if (v2 != 118)
  {
LABEL_4:
    if (v2 != 109)
    {
      v3 = "invalid";
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  return sub_1ACB5BDE4(a1, "tables_used", (uint64_t)&unk_1EECACF88, (uint64_t)&v5, 0);
}

uint64_t sub_1ACC4F934(uint64_t a1, uint64_t a2)
{
  int v2;
  const char *v3;

  if (a1)
  {
    v2 = *(unsigned __int8 *)(a1 + 113);
    switch(v2)
    {
      case 186:
        goto LABEL_5;
      case 118:
        return sub_1ACB5BDE4(a1, "fts3tokenize", (uint64_t)&unk_1E5C75038, a2, (void (*)(uint64_t))sub_1ACBAE8B4);
      case 109:
LABEL_5:
        v3 = "unopened";
        break;
      default:
        v3 = "invalid";
        break;
    }
  }
  else
  {
    v3 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v3);
  return sub_1ACBBE20C(161254);
}

uint64_t sub_1ACC4F9D0(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  _QWORD *v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t (**v8)(_QWORD);

  v1 = result;
  v2 = *(_QWORD **)(result + 8);
  *(_QWORD *)(result + 8) = 0;
  v3 = *(_QWORD *)(result + 24);
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      result = (*v4)(v3);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v3);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v3);
    v3 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v4 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 16) = 0;
  if (v2)
  {
    while (1)
    {
      v5 = (_QWORD *)*v2;
      if (*(_BYTE *)(v1 + 1))
      {
        v6 = v2[3];
        if (v6)
        {
          v7 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_19;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888 -= (int)off_1ECD3B178(v6);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v6);
          v6 = xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
            break;
        }
      }
LABEL_20:
      v8 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
        --qword_1ECD3E8D0;
        result = off_1ECD3B168(v2);
        v2 = (_QWORD *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_11;
        v8 = &xmmword_1ECD3B1D0;
      }
      result = (*v8)(v2);
LABEL_11:
      v2 = v5;
      if (!v5)
        goto LABEL_25;
    }
    v7 = &xmmword_1ECD3B1D0;
LABEL_19:
    (*v7)(v6);
    goto LABEL_20;
  }
LABEL_25:
  *(_DWORD *)(v1 + 4) = 0;
  return result;
}

uint64_t sub_1ACC4FBA0(int a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;

  if (sqlite3_initialize())
    return 7;
  v7 = (_QWORD *)sub_1ACB5D828(24);
  if (!v7)
    return 7;
  v8 = (uint64_t)v7;
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *((_DWORD *)v7 + 2) = 1;
  if (a1 < 1)
  {
    v6 = 0;
    goto LABEL_51;
  }
  v9 = 0;
  v10 = a1;
  do
  {
    v15 = *(_QWORD *)(a2 + 8 * v9);
    v16 = strlen((const char *)v15);
    if (v16 == 19)
    {
      if (*(_QWORD *)v15 == 0x645F65766F6D6572
        && *(_QWORD *)(v15 + 8) == 0x6369746972636169
        && *(_QWORD *)(v15 + 11) == 0x313D736369746972)
      {
        v6 = 0;
        *(_DWORD *)(v8 + 8) = 1;
        goto LABEL_8;
      }
      if (*(_QWORD *)v15 == 0x645F65766F6D6572
        && *(_QWORD *)(v15 + 8) == 0x6369746972636169
        && *(_QWORD *)(v15 + 11) == 0x303D736369746972)
      {
        v6 = 0;
        *(_DWORD *)(v8 + 8) = 0;
        goto LABEL_8;
      }
      if (*(_QWORD *)v15 == 0x645F65766F6D6572
        && *(_QWORD *)(v15 + 8) == 0x6369746972636169
        && *(_QWORD *)(v15 + 11) == 0x323D736369746972)
      {
        v6 = 0;
        *(_DWORD *)(v8 + 8) = 2;
        goto LABEL_8;
      }
    }
    else if (v16 < 11)
    {
      goto LABEL_49;
    }
    if (*(_QWORD *)v15 == 0x6168636E656B6F74 && *(_QWORD *)(v15 + 3) == 0x3D73726168636E65)
    {
      v11 = (char *)(v15 + 11);
      v12 = v16 - 11;
      v13 = v8;
      v14 = 1;
    }
    else
    {
      if (*(_QWORD *)v15 != 0x6F74617261706573 || *(_QWORD *)(v15 + 3) != 0x3D73726F74617261)
      {
LABEL_49:
        v6 = 1;
        goto LABEL_50;
      }
      v11 = (char *)(v15 + 11);
      v12 = v16 - 11;
      v13 = v8;
      v14 = 0;
    }
    v6 = sub_1ACC506FC(v13, v14, v11, v12);
    if ((_DWORD)v6)
      break;
LABEL_8:
    ++v9;
  }
  while (v9 < v10);
  if (!(_DWORD)v6)
    goto LABEL_51;
LABEL_50:
  sub_1ACC4FDDC(v8);
  v8 = 0;
LABEL_51:
  *a3 = v8;
  return v6;
}

uint64_t sub_1ACC4FDDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(uint64_t);

  if (!a1)
    return 0;
  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v2);
      v2 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_9;
      v3 = &xmmword_1ECD3B1D0;
    }
    (*v3)(v2);
  }
LABEL_9:
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_14:
    (*v4)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    goto LABEL_14;
  }
  return 0;
}

uint64_t sub_1ACC4FF00(uint64_t a1, const char *a2, int a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (sqlite3_initialize())
    return 7;
  v8 = sub_1ACB5D828(48);
  if (!v8)
    return 7;
  v9 = v8;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)v8 = 0u;
  *(_QWORD *)(v8 + 8) = a2;
  if (a2)
  {
    if (a3 < 0)
      *(_DWORD *)(v8 + 16) = strlen(a2);
    else
      *(_DWORD *)(v8 + 16) = a3;
  }
  else
  {
    *(_DWORD *)(v8 + 16) = 0;
    *(_QWORD *)(v8 + 8) = &byte_1ACCBEAEE;
  }
  result = 0;
  *a4 = v9;
  return result;
}

uint64_t sub_1ACC4FF94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(uint64_t);

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_13:
    (*v4)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1ACC500B4(uint64_t *a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned __int8 v15;
  _BOOL4 v16;
  int v17;
  int v18;
  int v19;
  unsigned int v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  BOOL v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  unsigned __int16 *v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  unsigned int v51;
  unsigned __int8 *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned __int8 v55;
  _BOOL4 v56;
  int v57;
  int v58;
  int v59;
  unsigned int v60;
  int v61;
  int v62;
  unsigned int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  char v70;
  unsigned int v71;
  uint64_t result;
  int v73;
  int v74;
  int v75;

  v8 = *a1;
  v7 = a1[1];
  v9 = (unsigned __int8 *)(v7 + *((int *)a1 + 5));
  v10 = (unsigned __int8 *)(v7 + *((int *)a1 + 4));
  do
  {
    while (1)
    {
      if (v9 >= v10)
        return 101;
      v11 = (int)v9;
      v13 = *v9++;
      v12 = v13;
      v14 = v13 - 192;
      if (v13 < 0xC0)
      {
        if ((v12 & 0x80) == 0)
        {
          v16 = ((*(_DWORD *)((char *)&unk_1ACCBB158 + ((v12 >> 3) & 0x1C)) >> v12) & 1) == 0;
          goto LABEL_27;
        }
      }
      else
      {
        LODWORD(v12) = byte_1ACCB6CF6[v14];
        if (v9 == v10)
        {
LABEL_8:
          v9 = (unsigned __int8 *)(v7 + *((int *)a1 + 4));
        }
        else
        {
          while (1)
          {
            v15 = *v9;
            if ((*v9 & 0xC0) != 0x80)
              break;
            ++v9;
            LODWORD(v12) = v15 & 0x3F | ((_DWORD)v12 << 6);
            if (v9 == v10)
              goto LABEL_8;
          }
        }
        if (v12 >> 1 == 0x7FFF || v12 < 0x80 || (v12 & 0xFFFFF800) == 0xD800)
        {
          LODWORD(v12) = 65533;
        }
        else if (v12 >> 22)
        {
          v16 = 1;
          goto LABEL_27;
        }
      }
      v17 = 0;
      v18 = 0;
      v19 = 405;
      v20 = ((_DWORD)v12 << 10) | 0x3FF;
      do
      {
        v21 = v19 + v17;
        if (v19 + v17 < 0 != __OFADD__(v19, v17))
          ++v21;
        v22 = v21 >> 1;
        v23 = dword_1ACCBAB00[v22];
        if (v20 < v23)
          v19 = v22 - 1;
        else
          v18 = v22;
        if (v20 >= v23)
          v17 = v22 + 1;
      }
      while (v19 >= v17);
      v16 = (dword_1ACCBAB00[v18] & 0x3FFu) + (dword_1ACCBAB00[v18] >> 10) <= v12;
LABEL_27:
      v24 = *(_DWORD *)(v8 + 12);
      v25 = __OFSUB__(v24, 1);
      v26 = v24 - 1;
      if (v26 < 0 == v25)
        break;
LABEL_2:
      if (v16)
        goto LABEL_38;
    }
    v27 = 0;
    while (1)
    {
      v28 = v27 + v26;
      if (v27 + v26 < 0 != __OFADD__(v27, v26))
        ++v28;
      v29 = v28 >> 1;
      v30 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v29);
      if (v30 == (_DWORD)v12)
        break;
      if (v30 >= (int)v12)
        v26 = v29 - 1;
      else
        v27 = v29 + 1;
      if (v26 < v27)
        goto LABEL_2;
    }
  }
  while (v16);
LABEL_38:
  v75 = v11;
  v31 = a1[4];
  v32 = (_BYTE *)v31;
  while (1)
  {
    v33 = *((int *)a1 + 10);
    if ((uint64_t)&v32[-v31] < v33 - 4)
      goto LABEL_44;
    if (sqlite3_initialize())
      return 7;
    v34 = sub_1ACB6BB48(v31, v33 + 64);
    if (!v34)
      return 7;
    v32 = &v32[v34 - a1[4]];
    a1[4] = v34;
    *((_DWORD *)a1 + 10) += 64;
LABEL_44:
    if ((int)v12 > 127)
    {
      if (WORD1(v12))
      {
        if ((v12 - 66560) < 0x28)
          LODWORD(v12) = v12 + 40;
LABEL_79:
        *v32 = (v12 >> 18) & 7 | 0xF0;
        v32[1] = (v12 >> 12) & 0x3F | 0x80;
        v32[2] = (v12 >> 6) & 0x3F | 0x80;
        v32[3] = v12 & 0x3F | 0x80;
        v32 += 4;
        goto LABEL_84;
      }
      v35 = 0;
      v36 = *(_DWORD *)(v8 + 8);
      v37 = 162;
      v38 = -1;
      do
      {
        v39 = v37 + v35;
        if (v37 + v35 < 0 != __OFADD__(v37, v35))
          ++v39;
        v40 = v39 >> 1;
        v41 = *((unsigned __int16 *)&unk_1ACCBB168 + 2 * v40);
        if ((int)v12 >= v41)
          v35 = v40 + 1;
        else
          v37 = v40 - 1;
        if ((int)v12 >= v41)
          v38 = v40;
      }
      while (v37 >= v35);
      v42 = (unsigned __int16 *)((char *)&unk_1ACCBB168 + 4 * v38);
      v43 = *v42;
      if (*((unsigned __int8 *)v42 + 3) + v43 > (int)v12)
      {
        v44 = *((unsigned __int8 *)&unk_1ACCBB168 + 4 * v38 + 2);
        if (((v12 ^ v43) & v44 & 1) == 0)
          LODWORD(v12) = (unsigned __int16)(*(_WORD *)((char *)&unk_1ACCBD51C + (v44 & 0xFE)) + v12);
      }
      if (v36)
      {
        v45 = 0;
        v46 = 0;
        v47 = 125;
        v48 = (8 * v12) | 7;
        do
        {
          v49 = v47 + v45;
          if (v47 + v45 < 0 != __OFADD__(v47, v45))
            ++v49;
          v50 = v49 >> 1;
          v51 = word_1ACCBD5B6[v50];
          if (v48 < v51)
            v47 = v50 - 1;
          else
            v46 = v50;
          if (v48 >= v51)
            v45 = v50 + 1;
        }
        while (v47 >= v45);
        if ((v36 == 2 || (byte_1ACCBD6B2[v46] & 0x80000000) == 0)
          && (word_1ACCBD5B6[v46] & 7) + (word_1ACCBD5B6[v46] >> 3) >= (int)v12)
        {
          LODWORD(v12) = byte_1ACCBD6B2[v46] & 0x7F;
        }
      }
    }
    else if ((v12 - 65) < 0x1A)
    {
      LODWORD(v12) = v12 + 32;
    }
    if (!(_DWORD)v12)
      goto LABEL_84;
    if ((int)v12 <= 127)
    {
      *v32++ = v12;
      goto LABEL_84;
    }
    if (v12 > 0x7FF)
    {
      if (WORD1(v12))
        goto LABEL_79;
      *v32 = (v12 >> 12) | 0xE0;
      v32[1] = (v12 >> 6) & 0x3F | 0x80;
      v32[2] = v12 & 0x3F | 0x80;
      v32 += 3;
    }
    else
    {
      *v32 = (v12 >> 6) | 0xC0;
      v32[1] = v12 & 0x3F | 0x80;
      v32 += 2;
    }
LABEL_84:
    LODWORD(v52) = (_DWORD)v9;
    if (v9 >= v10)
      goto LABEL_128;
    v53 = *v9;
    v52 = v9 + 1;
    v12 = *v9;
    v54 = v53 - 192;
    if (v53 < 0xC0)
    {
      if ((v12 & 0x80) == 0)
      {
        v56 = ((*(_DWORD *)((char *)&unk_1ACCBB158 + ((v12 >> 3) & 0x1C)) >> v12) & 1) == 0;
        goto LABEL_108;
      }
    }
    else
    {
      LODWORD(v12) = byte_1ACCB6CF6[v54];
      if (v52 == v10)
      {
LABEL_89:
        v52 = v10;
      }
      else
      {
        while (1)
        {
          v55 = *v52;
          if ((*v52 & 0xC0) != 0x80)
            break;
          ++v52;
          LODWORD(v12) = v55 & 0x3F | ((_DWORD)v12 << 6);
          if (v52 == v10)
            goto LABEL_89;
        }
      }
      if (v12 >> 1 == 0x7FFF || v12 < 0x80 || (v12 & 0xFFFFF800) == 0xD800)
      {
        LODWORD(v12) = 65533;
      }
      else if (v12 >> 22)
      {
        v56 = 1;
        goto LABEL_108;
      }
    }
    v57 = 0;
    v58 = 0;
    v59 = 405;
    v60 = ((_DWORD)v12 << 10) | 0x3FF;
    do
    {
      v61 = v59 + v57;
      if (v59 + v57 < 0 != __OFADD__(v59, v57))
        ++v61;
      v62 = v61 >> 1;
      v63 = dword_1ACCBAB00[v62];
      if (v60 < v63)
        v59 = v62 - 1;
      else
        v58 = v62;
      if (v60 >= v63)
        v57 = v62 + 1;
    }
    while (v59 >= v57);
    v56 = (dword_1ACCBAB00[v58] & 0x3FFu) + (dword_1ACCBAB00[v58] >> 10) <= v12;
LABEL_108:
    v64 = *(_DWORD *)(v8 + 12);
    v25 = __OFSUB__(v64, 1);
    v65 = v64 - 1;
    if (v65 < 0 != v25)
    {
LABEL_117:
      if (v56)
        goto LABEL_39;
    }
    else
    {
      v66 = 0;
      while (1)
      {
        v67 = v66 + v65;
        if (v66 + v65 < 0 != __OFADD__(v66, v65))
          ++v67;
        v68 = v67 >> 1;
        v69 = *(_DWORD *)(*(_QWORD *)(v8 + 16) + 4 * v68);
        if (v69 == (_DWORD)v12)
          break;
        if (v69 >= (int)v12)
          v65 = v68 - 1;
        else
          v66 = v68 + 1;
        if (v65 < v66)
          goto LABEL_117;
      }
      if (!v56)
        goto LABEL_39;
    }
    if ((v12 - 818) < 0xFFFFFFCE
      || (v12 >= 0x320 ? (v70 = -32) : (v70 = 0),
          v12 >= 0x320 ? (v71 = 221688) : (v71 = 134389727),
          ((v71 >> (v12 + v70)) & 1) == 0))
    {
LABEL_128:
      result = 0;
      *((_DWORD *)a1 + 5) = (_DWORD)v52 - *((_DWORD *)a1 + 2);
      *a2 = a1[4];
      *a3 = (_DWORD)v32 - *((_DWORD *)a1 + 8);
      v73 = *((_DWORD *)a1 + 2);
      *a4 = v75 - v73;
      *a5 = (_DWORD)v9 - v73;
      v74 = *((_DWORD *)a1 + 6);
      *((_DWORD *)a1 + 6) = v74 + 1;
      *a6 = v74;
      return result;
    }
LABEL_39:
    v31 = a1[4];
    v9 = v52;
  }
}

uint64_t sub_1ACC506FC(uint64_t a1, int a2, char *a3, int a4)
{
  char *v4;
  int v6;
  char *v7;
  char *v8;
  unint64_t v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  int v18;
  unsigned int v19;
  char v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  uint64_t v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  int v33;
  int v34;
  int v35;
  unsigned int v36;
  int v37;
  int v38;
  unsigned int v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;

  if (!a4)
    return 0;
  v4 = a3;
  v6 = 0;
  v7 = &a3[a4];
  v8 = a3;
  do
  {
    v10 = *v8++;
    v9 = v10;
    v11 = v10 - 192;
    if (v10 < 0xC0)
    {
      if ((v9 & 0x80) == 0)
      {
        if ((((*(_DWORD *)((char *)&unk_1ACCBB158 + ((v9 >> 3) & 0x1C)) >> v9) & 1) == 0) == a2)
          continue;
        goto LABEL_30;
      }
    }
    else
    {
      LODWORD(v9) = byte_1ACCB6CF6[v11];
      if (v8 == v7)
      {
LABEL_9:
        v8 = v7;
      }
      else
      {
        while (1)
        {
          v12 = *v8;
          if ((*v8 & 0xC0) != 0x80)
            break;
          ++v8;
          LODWORD(v9) = v12 & 0x3F | ((_DWORD)v9 << 6);
          if (v8 == v7)
            goto LABEL_9;
        }
      }
      if (v9 >> 1 == 0x7FFF || v9 < 0x80 || (v9 & 0xFFFFF800) == 0xD800)
      {
        LODWORD(v9) = 65533;
      }
      else if (v9 >> 22)
      {
        if (a2 == 1)
          continue;
LABEL_30:
        if ((v9 - 818) < 0xFFFFFFCE
          || (v9 >= 0x320 ? (v20 = -32) : (v20 = 0),
              v9 >= 0x320 ? (v21 = 221688) : (v21 = 134389727),
              ((v21 >> (v9 + v20)) & 1) == 0))
        {
          ++v6;
        }
        continue;
      }
    }
    v13 = 0;
    v14 = 0;
    v15 = 405;
    v16 = ((_DWORD)v9 << 10) | 0x3FF;
    do
    {
      v17 = v15 + v13;
      if (v15 + v13 < 0 != __OFADD__(v15, v13))
        ++v17;
      v18 = v17 >> 1;
      v19 = dword_1ACCBAB00[v18];
      if (v16 < v19)
        v15 = v18 - 1;
      else
        v14 = v18;
      if (v16 >= v19)
        v13 = v18 + 1;
    }
    while (v15 >= v13);
    if ((dword_1ACCBAB00[v14] & 0x3FFu) + (dword_1ACCBAB00[v14] >> 10) <= v9 != a2)
      goto LABEL_30;
  }
  while (v8 < v7);
  if (!v6)
    return 0;
  v22 = *(_QWORD *)(a1 + 16);
  v23 = *(_DWORD *)(a1 + 12);
  if (sqlite3_initialize())
    return 7;
  v27 = sub_1ACB6BB48(v22, 4 * (v23 + v6));
  if (!v27)
    return 7;
  v28 = *(_DWORD *)(a1 + 12);
  while (2)
  {
    v30 = *v4++;
    v29 = v30;
    v31 = v30 - 192;
    if (v30 >= 0xC0)
    {
      LODWORD(v29) = byte_1ACCB6CF6[v31];
      if (v4 == v7)
      {
LABEL_52:
        v4 = v7;
      }
      else
      {
        while (1)
        {
          v32 = *v4;
          if ((*v4 & 0xC0) != 0x80)
            break;
          ++v4;
          LODWORD(v29) = v32 & 0x3F | ((_DWORD)v29 << 6);
          if (v4 == v7)
            goto LABEL_52;
        }
      }
      if (v29 >> 1 == 0x7FFF || v29 < 0x80 || (v29 & 0xFFFFF800) == 0xD800)
      {
        LODWORD(v29) = 65533;
      }
      else if (v29 >> 22)
      {
        if (a2 != 1)
          goto LABEL_73;
        goto LABEL_47;
      }
LABEL_63:
      v33 = 0;
      v34 = 0;
      v35 = 405;
      v36 = ((_DWORD)v29 << 10) | 0x3FF;
      do
      {
        v37 = v35 + v33;
        if (v35 + v33 < 0 != __OFADD__(v35, v33))
          ++v37;
        v38 = v37 >> 1;
        v39 = dword_1ACCBAB00[v38];
        if (v36 < v39)
          v35 = v38 - 1;
        else
          v34 = v38;
        if (v36 >= v39)
          v33 = v38 + 1;
      }
      while (v35 >= v33);
      if ((dword_1ACCBAB00[v34] & 0x3FFu) + (dword_1ACCBAB00[v34] >> 10) <= v29 != a2)
        goto LABEL_73;
      goto LABEL_47;
    }
    if ((v29 & 0x80) != 0)
      goto LABEL_63;
    if ((((*(_DWORD *)((char *)&unk_1ACCBB158 + ((v29 >> 3) & 0x1C)) >> v29) & 1) == 0) != a2)
    {
LABEL_73:
      if ((v29 - 818) < 0xFFFFFFCE
        || (v29 >= 0x320 ? (v40 = -32) : (v40 = 0),
            v29 >= 0x320 ? (v41 = 221688) : (v41 = 134389727),
            ((v41 >> (v29 + v40)) & 1) == 0))
      {
        if (v28 < 1)
        {
          LODWORD(v42) = 0;
        }
        else
        {
          v42 = 0;
          while (*(_DWORD *)(v27 + 4 * v42) < (int)v29)
          {
            if (v28 == ++v42)
            {
              LODWORD(v42) = v28;
              break;
            }
          }
          if (v28 > (int)v42)
          {
            v43 = v28;
            do
            {
              *(_DWORD *)(v27 + 4 * v43) = *(_DWORD *)(v27 + 4 * v43 - 4);
              --v43;
            }
            while (v43 > (int)v42);
          }
        }
        *(_DWORD *)(v27 + 4 * v42) = v29;
        ++v28;
      }
    }
LABEL_47:
    if (v4 < v7)
      continue;
    break;
  }
  v25 = 0;
  *(_QWORD *)(a1 + 16) = v27;
  *(_DWORD *)(a1 + 12) = v28;
  return v25;
}

uint64_t sub_1ACC50AE8(sqlite3 *a1, int a2, int a3, uint64_t a4, _QWORD *a5, char **a6)
{
  uint64_t result;
  const char *v12;
  int v13;
  int v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  uint64_t v18;
  const char *v19;
  int v20;
  size_t v21;
  size_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  char *v26;
  unsigned __int8 *v27;
  int v28;
  int v30;
  int v31;
  uint64_t v32;
  int v33;

  if ((a3 - 6) < 0xFFFFFFFE)
    goto LABEL_2;
  v12 = *(const char **)(a4 + 8);
  v13 = strlen(v12);
  v14 = v13;
  if (a3 != 5)
  {
    v18 = 3;
    goto LABEL_18;
  }
  if (!v12 || v13 != 4)
    goto LABEL_2;
  if ((*v12 & 0xDF) != 0x54)
  {
    v17 = 116;
    goto LABEL_16;
  }
  v15 = (unsigned __int8 *)(v12 + 1);
  if ((v12[1] & 0xDF) != 0x45)
  {
    v17 = 101;
LABEL_15:
    v12 = (const char *)v15;
LABEL_16:
    if (v17 == byte_1ACCB6333[*(unsigned __int8 *)v12])
      goto LABEL_17;
LABEL_2:
    sub_1ACC51B88(a6, "invalid arguments to fts4aux constructor");
    return 1;
  }
  v15 = (unsigned __int8 *)(v12 + 2);
  if ((v12[2] & 0xDF) != 0x4D)
  {
    v17 = 109;
    goto LABEL_15;
  }
  v16 = *((unsigned __int8 *)v12 + 3);
  v12 += 3;
  if ((v16 & 0xFFFFFFDF) != 0x50)
  {
    v17 = 112;
    goto LABEL_16;
  }
LABEL_17:
  v12 = *(const char **)(a4 + 24);
  v14 = strlen(v12);
  v18 = 4;
LABEL_18:
  v19 = *(const char **)(a4 + 8 * v18);
  v20 = strlen(v19);
  result = sqlite3_declare_vtab(a1, "CREATE TABLE x(term, col, documents, occurrences, languageid HIDDEN)");
  if (!(_DWORD)result)
  {
    if (sqlite3_initialize())
      return 7;
    v21 = v14;
    v22 = v20;
    v23 = v14 + (uint64_t)v20 + 562;
    v24 = (_QWORD *)sub_1ACB5D828(v23);
    if (!v24)
    {
      return 7;
    }
    else
    {
      v25 = v24;
      bzero(v24, v23);
      v25[3] = v25 + 4;
      v26 = (char *)v25 + v14 + 561;
      v25[8] = v25 + 70;
      v25[9] = v26;
      v25[7] = a1;
      *((_DWORD *)v25 + 130) = 1;
      memcpy(v25 + 70, v12, v21);
      memcpy(v26, v19, v22);
      v27 = *(unsigned __int8 **)(v25[3] + 40);
      v28 = *v27;
      if ((v28 - 34) <= 0x3E && ((1 << (v28 - 34)) & 0x4200000000000021) != 0)
      {
        if (v28 == 91)
          v30 = 93;
        else
          v30 = *v27;
        v31 = v27[1];
        if (v27[1])
        {
          v32 = 0;
          v33 = 1;
          while (1)
          {
            if (v31 == v30)
            {
              if (v27[v33 + 1] != v30)
                goto LABEL_37;
              v27[v32] = v30;
              v33 += 2;
            }
            else
            {
              v27[v32] = v31;
              ++v33;
            }
            ++v32;
            v31 = v27[v33];
            if (!v27[v33])
              goto LABEL_37;
          }
        }
        LODWORD(v32) = 0;
LABEL_37:
        v27[v32] = 0;
      }
      result = 0;
      *a5 = v25;
    }
  }
  return result;
}

uint64_t sub_1ACC50D54(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;
  unsigned int v14;
  unsigned int v16;
  int v18;
  double v19;
  int v21;

  if (a2[4] == 1)
  {
    v2 = *((_QWORD *)a2 + 3);
    if (!*(_DWORD *)v2 && !*(_BYTE *)(v2 + 4))
      a2[15] = 1;
  }
  v3 = *a2;
  if ((int)v3 <= 0)
  {
    a2[10] = 0;
    *((_QWORD *)a2 + 8) = 0x40D3880000000000;
    return 0;
  }
  v4 = 0;
  v5 = (_BYTE *)(*((_QWORD *)a2 + 1) + 5);
  v6 = -1;
  v7 = -1;
  v8 = -1;
  v9 = -1;
  do
  {
    if (*v5)
    {
      v10 = *(v5 - 1);
      v11 = *(_DWORD *)(v5 - 5);
      if (v10 == 2)
        v12 = v4;
      else
        v12 = v9;
      if (v10 == 16 || v10 == 8)
        v14 = v4;
      else
        v14 = v7;
      if (v10 == 4 || v10 == 32)
        v16 = v4;
      else
        v16 = v8;
      if (!v11)
      {
        v9 = v12;
        v8 = v16;
        v7 = v14;
      }
      if (v10 == 2 && v11 == 4)
        v6 = v4;
    }
    ++v4;
    v5 += 12;
  }
  while (v3 != v4);
  if ((v9 & 0x80000000) != 0)
  {
    a2[10] = 0;
    *((_QWORD *)a2 + 8) = 0x40D3880000000000;
    v18 = 1;
    if ((v8 & 0x80000000) != 0)
    {
      v21 = 4;
      v19 = 20000.0;
      if ((v7 & 0x80000000) != 0)
        goto LABEL_38;
    }
    else
    {
      *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v8) = 1;
      a2[10] = 2;
      *((_QWORD *)a2 + 8) = 0x40C3880000000000;
      v21 = 6;
      v19 = 10000.0;
      v18 = 2;
      if ((v7 & 0x80000000) != 0)
        goto LABEL_38;
    }
    *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v7) = v18;
    a2[10] = v21;
    ++v18;
    v19 = v19 * 0.5;
    *((double *)a2 + 8) = v19;
    goto LABEL_38;
  }
  a2[10] = 1;
  *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v9) = 1;
  *((_QWORD *)a2 + 8) = 0x4014000000000000;
  v18 = 2;
  v19 = 5.0;
LABEL_38:
  if ((v6 & 0x80000000) == 0)
  {
    *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v6) = v18;
    *((double *)a2 + 8) = v19 + -1.0;
  }
  return 0;
}

uint64_t sub_1ACC50EEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t (**v6)(uint64_t);

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 24);
  for (i = 112; i != 432; i += 8)
    sqlite3_finalize(*(sqlite3_stmt **)(v2 + i));
  v4 = *(_QWORD *)(v2 + 472);
  if (v4)
  {
    v5 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_9:
      (*v5)(v4);
      goto LABEL_10;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v4);
    v4 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v5 = &xmmword_1ECD3B1D0;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (v1)
  {
    v6 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_16:
      (*v6)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v6 = &xmmword_1ECD3B1D0;
      goto LABEL_16;
    }
  }
  return 0;
}

double sub_1ACC51040(uint64_t a1, uint64_t *a2)
{
  double result;
  uint64_t v4;

  if (!sqlite3_initialize())
  {
    v4 = sub_1ACB5D828(168);
    if (v4)
    {
      *(_QWORD *)(v4 + 160) = 0;
      result = 0.0;
      *(_OWORD *)(v4 + 128) = 0u;
      *(_OWORD *)(v4 + 144) = 0u;
      *(_OWORD *)(v4 + 96) = 0u;
      *(_OWORD *)(v4 + 112) = 0u;
      *(_OWORD *)(v4 + 64) = 0u;
      *(_OWORD *)(v4 + 80) = 0u;
      *(_OWORD *)(v4 + 32) = 0u;
      *(_OWORD *)(v4 + 48) = 0u;
      *(_OWORD *)v4 = 0u;
      *(_OWORD *)(v4 + 16) = 0u;
      *a2 = v4;
    }
  }
  return result;
}

uint64_t sub_1ACC510A0(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  sqlite3_stmt *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(uint64_t);
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  uint64_t v12;
  uint64_t (**v13)(uint64_t);
  uint64_t (**v14)(_QWORD);

  v1 = a1;
  v2 = *(_QWORD *)(*a1 + 24);
  v3 = *(_QWORD **)(v2 + 480);
  if (v3)
  {
    v4 = (sqlite3_stmt *)v3[3];
    v5 = (_QWORD *)v3[4];
    v6 = v5[3];
    if (v6)
      xmmword_1ECD3B1C0(v6);
    sub_1ACBE0F9C(v5, v3);
    v7 = v5[3];
    if (v7)
      xmmword_1ECD3B1D0(v7);
    sqlite3_finalize(v4);
  }
  *(_QWORD *)(v2 + 480) = 0;
  sub_1ACC51C60((uint64_t)(v1 + 1));
  v8 = v1[12];
  if (v8)
  {
    v9 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_13:
      (*v9)(v8);
      goto LABEL_14;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v9 = &xmmword_1ECD3B1D0;
      goto LABEL_13;
    }
  }
LABEL_14:
  v10 = v1[15];
  if (!v10)
    goto LABEL_21;
  v11 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_20;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v10);
  v10 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v11 = &xmmword_1ECD3B1D0;
LABEL_20:
    (*v11)(v10);
  }
LABEL_21:
  v12 = v1[20];
  if (!v12)
    goto LABEL_28;
  v13 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_27;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v12);
  v12 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v13 = &xmmword_1ECD3B1D0;
LABEL_27:
    (*v13)(v12);
  }
LABEL_28:
  v14 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_33:
    (*v14)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = (_QWORD *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v14 = &xmmword_1ECD3B1D0;
    goto LABEL_33;
  }
  return 0;
}

uint64_t sub_1ACC512FC(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t *a5)
{
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  _BOOL4 v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (**v19)(uint64_t);
  uint64_t v20;
  uint64_t (**v21)(uint64_t);
  uint64_t v22;
  uint64_t (**v23)(uint64_t);
  int v24;
  uint64_t v25;
  int v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  char *v31;
  uint64_t v32;
  __int16 v33;
  double v34;
  int v35;
  uint64_t result;
  char *v37;
  uint64_t v38;
  double v39;
  char **v40;
  int v41;
  int v42;
  int v43;

  v9 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v10 = (a2 & 2) >> 1;
  if ((a2 & 2) != 0)
    v11 = 0;
  else
    v11 = -1;
  if ((a2 & 2) != 0)
    v12 = 2;
  else
    v12 = 1;
  if ((a2 & 4) != 0)
    v13 = (a2 & 2) >> 1;
  else
    v13 = -1;
  if ((a2 & 4) != 0)
    v10 = v12;
  v14 = a2 != 1;
  if (a2 == 1)
  {
    v11 = -1;
    v15 = -1;
  }
  else
  {
    v15 = v13;
  }
  v42 = v11;
  v43 = v15;
  if (a2 == 1)
    v16 = 1;
  else
    v16 = v10;
  v41 = v16;
  v17 = a1 + 8;
  sub_1ACC51C60(a1 + 8);
  v18 = *(_QWORD *)(a1 + 96);
  v40 = (char **)(a1 + 96);
  if (v18)
  {
    v19 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_24:
      (*v19)(v18);
      goto LABEL_25;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v18);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v18);
    v18 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v19 = &xmmword_1ECD3B1D0;
      goto LABEL_24;
    }
  }
LABEL_25:
  v20 = *(_QWORD *)(a1 + 160);
  if (!v20)
    goto LABEL_32;
  v21 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_31;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v20);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v20);
  v20 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v21 = &xmmword_1ECD3B1D0;
LABEL_31:
    (*v21)(v20);
  }
LABEL_32:
  v22 = *(_QWORD *)(a1 + 120);
  if (!v22)
    goto LABEL_39;
  v23 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_38;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v22);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v22);
  v22 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v23 = &xmmword_1ECD3B1D0;
LABEL_38:
    (*v23)(v22);
  }
LABEL_39:
  *(_OWORD *)(v17 + 128) = 0u;
  *(_OWORD *)(v17 + 144) = 0u;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  if (a2 == 1)
    v24 = 3;
  else
    v24 = 19;
  *(_DWORD *)(a1 + 112) = v24;
  if (a2 == 1 || (v42 & 0x80000000) == 0)
  {
    v25 = *a5;
    if (*a5)
    {
      v26 = *(unsigned __int16 *)(v25 + 20);
      if ((~v26 & 0x202) != 0 || *(_BYTE *)(v25 + 22) != 1)
      {
        if ((v26 & 1) != 0)
          goto LABEL_53;
        v27 = (const char *)sub_1ACBF2B64((int *)v25, 1);
        if (!v27)
          goto LABEL_53;
      }
      else
      {
        v27 = *(const char **)(v25 + 8);
        if (!v27)
          goto LABEL_53;
      }
      v28 = sqlite3_mprintf("%s", v27);
      *v40 = v28;
      if (!v28)
        return 7;
      *(_DWORD *)(a1 + 104) = strlen(v28);
    }
  }
LABEL_53:
  if (v43 < 0)
    goto LABEL_63;
  v29 = a5[v43];
  if (v29)
  {
    v30 = *(unsigned __int16 *)(v29 + 20);
    if ((~v30 & 0x202) != 0 || *(_BYTE *)(v29 + 22) != 1)
    {
      if ((v30 & 1) != 0)
        v29 = 0;
      else
        v29 = sub_1ACBF2B64((int *)v29, 1);
    }
    else
    {
      v29 = *(_QWORD *)(v29 + 8);
    }
  }
  v31 = sqlite3_mprintf("%s", (const char *)v29);
  *(_QWORD *)(a1 + 120) = v31;
  if (!v31)
    return 7;
  *(_DWORD *)(a1 + 128) = strlen(v31);
LABEL_63:
  if (v41 >= a4)
  {
    v35 = 0;
    goto LABEL_72;
  }
  v32 = a5[v41];
  if (!v32)
  {
    sub_1ACBBE20C(89699);
LABEL_70:
    LODWORD(v34) = 0;
    goto LABEL_71;
  }
  v33 = *(_WORD *)(v32 + 20);
  if ((v33 & 0x24) == 0)
  {
    if ((v33 & 8) != 0)
    {
      v39 = *(double *)v32;
      if (*(double *)v32 >= -9.22337204e18)
      {
        if (v39 <= 9.22337204e18)
          *(_QWORD *)&v34 = (uint64_t)v39;
        else
          LODWORD(v34) = -1;
      }
      else
      {
        LODWORD(v34) = 0;
      }
      goto LABEL_71;
    }
    if ((v33 & 0x12) != 0 && *(_QWORD *)(v32 + 8))
    {
      LODWORD(v34) = sub_1ACBF2FC0(v32);
      goto LABEL_71;
    }
    goto LABEL_70;
  }
  v34 = *(double *)v32;
LABEL_71:
  v35 = LODWORD(v34) & ~(SLODWORD(v34) >> 31);
LABEL_72:
  *(_DWORD *)(a1 + 132) = v35;
  v37 = *(char **)(a1 + 96);
  v38 = *(unsigned int *)(a1 + 104);
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_QWORD *)(v17 + 80) = 0;
  result = sub_1ACC51FD0(v9, v35, 0, 0xFFFFFFFE, v37, v38, 0, v14, v17);
  if (!(_DWORD)result)
  {
    *(_QWORD *)(a1 + 24) = v40;
    result = sub_1ACC53478(v9, (uint64_t *)v17, *(const void **)(a1 + 96), *(_DWORD *)(a1 + 104));
    if (!(_DWORD)result)
      return sub_1ACC51774(a1);
  }
  return result;
}

uint64_t sub_1ACC51774(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const void *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v17;
  void *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v2 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  ++*(_QWORD *)(a1 + 144);
  v3 = *(int *)(a1 + 152);
  v4 = v3 + 1;
  v5 = 16 * v3 + 16;
  do
  {
    if (v4 >= *(int *)(a1 + 156))
    {
      *(_DWORD *)(a1 + 152) = v3 + 1;
      v8 = sub_1ACC53D44(v2, a1 + 8);
      if ((_DWORD)v8 != 100)
      {
        v7 = v8;
        goto LABEL_15;
      }
      v9 = *(_DWORD *)(a1 + 88);
      v10 = *(_QWORD *)(a1 + 80);
      v11 = *(const void **)(a1 + 120);
      if (v11)
      {
        v12 = *(_DWORD *)(a1 + 128);
        v13 = *(_DWORD *)(a1 + 72);
        v14 = v12 >= v13 ? *(_DWORD *)(a1 + 72) : *(_DWORD *)(a1 + 128);
        v15 = memcmp(v11, *(const void **)(a1 + 64), v14);
        if (v15 < 0 || v12 < v13 && !v15)
        {
          v7 = 0;
LABEL_15:
          *(_DWORD *)(a1 + 136) = 1;
          return v7;
        }
      }
      v17 = *(_DWORD *)(a1 + 156);
      v18 = *(void **)(a1 + 160);
      if (v17 <= 1)
      {
        if (sqlite3_initialize())
          return 7;
        v19 = sub_1ACB6BB48((uint64_t)v18, 32);
        if (!v19)
          return 7;
        v18 = (void *)v19;
        bzero((void *)(v19 + 16 * *(int *)(a1 + 156)), 16 * (2 - *(int *)(a1 + 156)));
        *(_QWORD *)(a1 + 160) = v18;
        *(_DWORD *)(a1 + 156) = 2;
        v17 = 2;
      }
      bzero(v18, 16 * v17);
      if (v9 < 1)
      {
        v7 = 0;
        *(_DWORD *)(a1 + 152) = 0;
        return v7;
      }
      v20 = 0;
      LODWORD(v21) = 0;
      v22 = 0;
      v7 = 0;
      while (1)
      {
        v29 = 0;
        v23 = sub_1ACC53378((char *)(v10 + v22), (unint64_t *)&v29);
        if (v20)
        {
          if (v20 == 1)
          {
            v24 = v29;
            if (v29 >= 2)
              ++*(_QWORD *)(*(_QWORD *)(a1 + 160) + 16);
          }
          else
          {
            if (v20 != 2)
            {
              v21 = v29;
              if ((int)v29 < 1)
              {
                v7 = 267;
              }
              else
              {
                v25 = v29 + 2;
                v26 = *(_QWORD *)(a1 + 160);
                if (*(_DWORD *)(a1 + 156) < (int)v29 + 2)
                {
                  if (sqlite3_initialize())
                    return 7;
                  v27 = sub_1ACB6BB48(v26, 16 * v25);
                  if (!v27)
                    return 7;
                  v26 = v27;
                  bzero((void *)(v27 + 16 * *(int *)(a1 + 156)), 16 * (int)(v25 - *(_DWORD *)(a1 + 156)));
                  *(_QWORD *)(a1 + 160) = v26;
                  *(_DWORD *)(a1 + 156) = v25;
                }
                ++*(_QWORD *)(v26 + (((v21 << 32) + 0x100000000) >> 28));
                v20 = 2;
              }
              goto LABEL_25;
            }
            v24 = v29;
          }
          if (v24)
          {
            if (v24 == 1)
            {
              v20 = 3;
            }
            else
            {
              v28 = *(_QWORD *)(a1 + 160);
              ++*(_QWORD *)(v28 + 16 * (int)v21 + 24);
              ++*(_QWORD *)(v28 + 8);
              v20 = 2;
            }
          }
          else
          {
            v20 = 0;
          }
        }
        else
        {
          LODWORD(v21) = 0;
          ++**(_QWORD **)(a1 + 160);
          v20 = 1;
        }
LABEL_25:
        v22 += v23;
        if (v22 >= v9)
        {
          *(_DWORD *)(a1 + 152) = 0;
          return v7;
        }
      }
    }
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + v5);
    LODWORD(v3) = v3 + 1;
    ++v4;
    v5 += 16;
  }
  while (v6 <= 0);
  v7 = 0;
  *(_DWORD *)(a1 + 152) = v3;
  return v7;
}

uint64_t sub_1ACC51A40(uint64_t a1)
{
  return *(unsigned int *)(a1 + 136);
}

uint64_t sub_1ACC51A48(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;

  switch(a3)
  {
    case 0:
      if (!a2)
        goto LABEL_20;
      sub_1ACBC69D0(a2, *(char **)(a1 + 64), *(_DWORD *)(a1 + 72), 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return 0;
    case 1:
      v4 = *(int *)(a1 + 152);
      if ((_DWORD)v4)
      {
        if (!a2)
          goto LABEL_17;
        v3 = v4 - 1;
        goto LABEL_13;
      }
      if (!a2)
      {
LABEL_20:
        v6 = 97480;
        goto LABEL_21;
      }
      sub_1ACBC69D0(a2, "*", -1, 1u, 0);
      return 0;
    case 2:
      if (!a2)
        goto LABEL_16;
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 16 * *(int *)(a1 + 152));
      goto LABEL_13;
    case 3:
      if (a2)
      {
        v3 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 16 * *(int *)(a1 + 152) + 8);
        goto LABEL_13;
      }
LABEL_16:
      v6 = 97423;
      goto LABEL_21;
    default:
      if (a2)
      {
        v3 = *(int *)(a1 + 132);
LABEL_13:
        v5 = *(_QWORD *)a2;
        if ((*(_WORD *)(*(_QWORD *)a2 + 20) & 0x9000) != 0)
        {
          sub_1ACBF327C(v5, v3);
        }
        else
        {
          *(_QWORD *)v5 = v3;
          *(_WORD *)(v5 + 20) = 4;
        }
      }
      else
      {
LABEL_17:
        v6 = 97413;
LABEL_21:
        sub_1ACBBE20C(v6);
      }
      return 0;
  }
}

uint64_t sub_1ACC51B78(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 144);
  return 0;
}

char *sub_1ACC51B88(char **a1, char *a2, ...)
{
  char *v4;
  uint64_t (**v5)(char *);
  char *result;
  va_list va;

  va_start(va, a2);
  v4 = *a1;
  if (*a1)
  {
    v5 = (uint64_t (**)(char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v5)(v4);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v4);
    v4 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v5 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  result = sqlite3_vmprintf(a2, va);
  *a1 = result;
  return result;
}

uint64_t sub_1ACC51C60(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  uint64_t (**v6)(uint64_t);

  if (result)
  {
    v1 = result;
    if (*(int *)(result + 8) >= 1)
    {
      v2 = 0;
      do
        result = sub_1ACC51DD4(*(_QWORD *)(*(_QWORD *)v1 + 8 * v2++));
      while (v2 < *(int *)(v1 + 8));
    }
    v3 = *(_QWORD *)v1;
    if (*(_QWORD *)v1)
    {
      v4 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_11:
        result = (*v4)(v3);
        goto LABEL_12;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v3);
      v3 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v4 = &xmmword_1ECD3B1D0;
        goto LABEL_11;
      }
    }
LABEL_12:
    v5 = *(_QWORD *)(v1 + 24);
    if (v5)
    {
      v6 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
        --qword_1ECD3E8D0;
        result = off_1ECD3B168(v5);
        v5 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_19;
        v6 = &xmmword_1ECD3B1D0;
      }
      result = (*v6)(v5);
    }
LABEL_19:
    *(_DWORD *)(v1 + 8) = 0;
    *(_QWORD *)v1 = 0;
    *(_QWORD *)(v1 + 24) = 0;
  }
  return result;
}

uint64_t sub_1ACC51DD4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  _QWORD *v6;
  sqlite3_stmt *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);

  if (!result)
    return result;
  v1 = result;
  v2 = *(_QWORD *)(result + 80);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_8:
      (*v3)(v2);
      goto LABEL_9;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_8;
    }
  }
LABEL_9:
  if (!*(_BYTE *)(v1 + 5))
  {
    v4 = *(_QWORD *)(v1 + 40);
    if (v4)
    {
      v5 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v4);
        v4 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_17;
        v5 = &xmmword_1ECD3B1D0;
      }
      (*v5)(v4);
    }
  }
LABEL_17:
  v6 = *(_QWORD **)(v1 + 56);
  if (v6)
  {
    v7 = (sqlite3_stmt *)v6[3];
    v8 = (_QWORD *)v6[4];
    v9 = v8[3];
    if (v9)
      xmmword_1ECD3B1C0(v9);
    sub_1ACBE0F9C(v8, v6);
    v10 = v8[3];
    if (v10)
      xmmword_1ECD3B1D0(v10);
    sqlite3_finalize(v7);
  }
  v11 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    return (*v11)(v1);
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  result = off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v11 = &xmmword_1ECD3B1D0;
    return (*v11)(v1);
  }
  return result;
}

uint64_t sub_1ACC51FD0(uint64_t a1, int a2, int a3, unsigned int a4, char *__s2, uint64_t a6, int a7, int a8, uint64_t a9)
{
  int v9;
  int v10;
  char *v11;
  uint64_t v19;
  int v20;
  sqlite3_stmt *v21;
  int v22;
  int v23;
  uint64_t v24;
  sqlite3_stmt *v26;
  int v27;
  int v28;
  sqlite3_stmt **p_pStmt;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  int v44;
  int *v45;
  sqlite3_stmt *v46;
  int v47;
  int v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  uint64_t v54;
  int v55;
  sqlite3_int64 *v56;
  int v57;
  sqlite3_int64 v58;
  sqlite3_int64 v59;
  int v60;
  char *v61;
  char *v62;
  uint64_t v63;
  sqlite3_stmt *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v69;
  uint64_t v70;
  void (**v71)(sqlite3_stmt **);
  char v72;
  uint64_t v73;
  char v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v84;
  uint64_t v85;
  sqlite3_int64 v87;
  sqlite3_int64 v88;
  sqlite3_stmt *pStmt;

  v9 = a8;
  v10 = a7;
  v11 = __s2;
  if ((a4 & 0x80000000) == 0)
  {
    pStmt = 0;
    v19 = a1;
    v20 = sub_1ACC52F20((uint64_t *)a1, 12, &pStmt, 0);
    v21 = pStmt;
    if (!v20)
    {
      v22 = *(_DWORD *)(v19 + 488);
      v84 = v19;
      if (sub_1ACBA0E50((uint64_t)pStmt, 0))
      {
        v10 = a7;
        v11 = __s2;
        v23 = a8;
        goto LABEL_62;
      }
      v36 = ((a3 + v22 * (uint64_t)a2) << 10) + a4;
      v37 = *((_QWORD *)v21 + 16);
      if ((*(_WORD *)(v37 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v37, v36);
      }
      else
      {
        *(_QWORD *)v37 = v36;
        *(_WORD *)(v37 + 20) = 4;
      }
      v10 = a7;
      v11 = __s2;
      v23 = a8;
      goto LABEL_47;
    }
    goto LABEL_14;
  }
  v24 = *(_QWORD *)(a1 + 496);
  if (!v24 || *(_DWORD *)(a1 + 520) != a2)
  {
    v30 = 0;
    goto LABEL_11;
  }
  v85 = a1;
  v81 = a8 | a7;
  if (!(a8 | a7))
  {
    v41 = v24 + 40 * a3;
    v43 = *(_QWORD *)(v41 + 32);
    v42 = (_QWORD *)(v41 + 32);
    if (v43)
    {
      v44 = *((_BYTE *)v42 - 24) == 1 ? sub_1ACB5BD38(__s2, a6) : sub_1ACC52EC8(__s2, a6);
      if (*v42)
      {
        v45 = (int *)(*v42 + 16 * ((*(_DWORD *)(v24 + 40 * a3 + 24) - 1) & v44));
        v48 = *v45;
        v46 = (sqlite3_stmt *)(v45 + 2);
        v47 = v48;
        if (*((_BYTE *)v42 - 24) == 1)
          v49 = sub_1ACB5BD9C;
        else
          v49 = sub_1ACC52F00;
        while (v47)
        {
          v46 = *(sqlite3_stmt **)v46;
          if (!v46)
            break;
          --v47;
          if (!((unsigned int (*)(_QWORD, _QWORD, char *, uint64_t))v49)(*((_QWORD *)v46 + 3), *((unsigned int *)v46 + 8), v11, a6))
          {
            pStmt = v46;
            p_pStmt = &pStmt;
            goto LABEL_52;
          }
        }
      }
    }
    goto LABEL_44;
  }
  v26 = *(sqlite3_stmt **)(v24 + 40 * a3 + 16);
  pStmt = v26;
  if (!v26)
  {
LABEL_44:
    v30 = 0;
    a1 = v85;
    v9 = a8;
    goto LABEL_11;
  }
  v27 = 0;
  v28 = 0;
  p_pStmt = 0;
  do
  {
    if (!(_DWORD)a6 || *((_DWORD *)v26 + 8) >= (int)a6 && !memcmp(*((const void **)v26 + 3), v11, (int)a6))
    {
      if (v28 == v27)
      {
        if (sqlite3_initialize() || (v27 += 16, (v33 = sub_1ACB6BB48((uint64_t)p_pStmt, 8 * v27)) == 0))
        {
          v34 = 0;
          v35 = 0;
          v30 = 7;
LABEL_87:
          a1 = v85;
          v53 = v81;
          goto LABEL_88;
        }
        p_pStmt = (sqlite3_stmt **)v33;
      }
      p_pStmt[v28] = v26;
      v26 = pStmt;
      ++v28;
    }
    v26 = *(sqlite3_stmt **)v26;
    pStmt = v26;
  }
  while (v26);
  if (v28 >= 2)
  {
    qsort(p_pStmt, v28, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1ACC52E80);
    goto LABEL_53;
  }
  v35 = 1;
  if (v28 != 1)
  {
    v34 = 0;
    v30 = 0;
    goto LABEL_87;
  }
LABEL_52:
  v28 = 1;
LABEL_53:
  if (sqlite3_initialize() || (v51 = (_QWORD *)sub_1ACB5D828(8 * (v28 + 1) + 136)) == 0)
  {
    v34 = 0;
    v35 = 0;
    v30 = 7;
  }
  else
  {
    v52 = v51;
    bzero(v51, 8 * (v28 + 1) + 136);
    *(_DWORD *)v52 = 0x7FFFFFFF;
    v52[8] = v52 + 17;
    memcpy(v52 + 17, p_pStmt, 8 * v28);
    v34 = (uint64_t)v52;
    v30 = 0;
    v35 = 1;
  }
  v53 = v81;
  a1 = v85;
LABEL_88:
  if (v53 && p_pStmt)
  {
    v71 = (void (**)(sqlite3_stmt **))&off_1ECD3B168;
    v80 = v34;
    v72 = v35;
    v73 = a1;
    if (!dword_1ECD3B140)
    {
LABEL_95:
      (*v71)(p_pStmt);
      a1 = v73;
      v34 = v80;
      v35 = v72;
      goto LABEL_96;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(p_pStmt);
    --qword_1ECD3E8D0;
    off_1ECD3B168(p_pStmt);
    p_pStmt = (sqlite3_stmt **)xmmword_1ECD3E930;
    a1 = v73;
    v34 = v80;
    v35 = v72;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v71 = (void (**)(sqlite3_stmt **))&xmmword_1ECD3B1D0;
      goto LABEL_95;
    }
  }
LABEL_96:
  v74 = v35 ^ 1;
  if (!v34)
    v74 = 1;
  v9 = a8;
  if ((v74 & 1) == 0)
  {
    v75 = *(_DWORD *)(a9 + 8);
    v76 = *(_QWORD *)a9;
    if ((v75 & 0xF) == 0)
    {
      v77 = v34;
      v78 = a1;
      if (sqlite3_initialize() || (v79 = sub_1ACB6BB48(v76, 8 * (v75 + 16))) == 0)
      {
        sub_1ACC51DD4(v77);
        v21 = 0;
LABEL_80:
        v30 = 7;
        goto LABEL_81;
      }
      v76 = v79;
      *(_QWORD *)a9 = v79;
      v75 = *(_DWORD *)(a9 + 8);
      a1 = v78;
      v34 = v77;
    }
    v30 = 0;
    *(_DWORD *)(a9 + 8) = v75 + 1;
    *(_QWORD *)(v76 + 8 * v75) = v34;
  }
LABEL_11:
  v21 = 0;
  if (a4 == -1 || (_DWORD)v30)
  {
LABEL_81:
    sqlite3_reset(v21);
    return v30;
  }
  pStmt = 0;
  v31 = a1;
  v20 = sub_1ACC52F20((uint64_t *)a1, 13, &pStmt, 0);
  v21 = pStmt;
  if (!v20)
  {
    v23 = v9;
    v38 = *(_DWORD *)(v31 + 488);
    if (!sub_1ACBA0E50((uint64_t)pStmt, 0))
    {
      v39 = (a3 + v38 * (uint64_t)a2) << 10;
      v40 = *((_QWORD *)v21 + 16);
      if ((*(_WORD *)(v40 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v40, v39);
      }
      else
      {
        *(_QWORD *)v40 = v39;
        *(_WORD *)(v40 + 20) = 4;
      }
      v54 = *(_QWORD *)(*(_QWORD *)v21 + 24);
      if (v54)
        xmmword_1ECD3B1D0(v54);
    }
    v55 = *(_DWORD *)(v31 + 488);
    v84 = v31;
    if (sub_1ACBA0E50((uint64_t)v21, 1u))
    {
LABEL_62:
      if (v10)
        v56 = &v87;
      else
        v56 = 0;
      v57 = v23 | v10;
      while (1)
      {
        v20 = sqlite3_step(v21);
        if (v20 != 100)
          goto LABEL_14;
        v88 = 0;
        pStmt = 0;
        v58 = sqlite3_column_int64(v21, 1);
        v87 = 0;
        v88 = v58;
        v87 = sqlite3_column_int64(v21, 2);
        v59 = sqlite3_column_int64(v21, 3);
        v60 = sqlite3_column_bytes(v21, 4);
        v61 = (char *)sqlite3_column_blob(v21, 4);
        v62 = v61;
        v63 = v88;
        if (v11 && v88 && v61)
        {
          v20 = sub_1ACC526E4(v84, v11, a6, v61, v60, &v88, v56);
          if (v20)
            goto LABEL_14;
          v63 = v88;
          if (!v57)
            v87 = v88;
        }
        v20 = sub_1ACC52D5C(*(_DWORD *)(a9 + 8) + 1, v57 == 0, v63, v87, v59, v62, v60, (uint64_t *)&pStmt);
        if (v20)
          goto LABEL_14;
        v64 = pStmt;
        v65 = *(_DWORD *)(a9 + 8);
        v66 = *(_QWORD *)a9;
        if ((v65 & 0xF) == 0)
        {
          if (sqlite3_initialize() || (v67 = sub_1ACB6BB48(v66, 8 * (v65 + 16))) == 0)
          {
            sub_1ACC51DD4((uint64_t)v64);
            goto LABEL_80;
          }
          v66 = v67;
          *(_QWORD *)a9 = v67;
          v65 = *(_DWORD *)(a9 + 8);
        }
        *(_DWORD *)(a9 + 8) = v65 + 1;
        *(_QWORD *)(v66 + 8 * v65) = v64;
      }
    }
    v69 = ((a3 + v55 * (uint64_t)a2) << 10) | 0x3FF;
    v70 = *((_QWORD *)v21 + 16);
    if ((*(_WORD *)(v70 + 84) & 0x9000) != 0)
    {
      sub_1ACBF327C(v70 + 64, v69);
    }
    else
    {
      *(_QWORD *)(v70 + 64) = v69;
      *(_WORD *)(v70 + 84) = 4;
    }
LABEL_47:
    v50 = *(_QWORD *)(*(_QWORD *)v21 + 24);
    if (v50)
      xmmword_1ECD3B1D0(v50);
    goto LABEL_62;
  }
LABEL_14:
  LODWORD(v30) = v20;
  v32 = sqlite3_reset(v21);
  if ((_DWORD)v30 == 101)
    return v32;
  else
    return v30;
}

uint64_t sub_1ACC526E4(uint64_t a1, const void *a2, uint64_t a3, char *a4, int a5, sqlite3_int64 *a6, sqlite3_int64 *a7)
{
  unsigned __int8 *v9;
  int v12;
  unsigned __int8 *v13;
  char *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  signed int v18;
  char v19;
  int64_t v20;
  char *v21;
  char **v22;
  unint64_t v23;
  _BOOL4 v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unsigned __int8 *v29;
  uint64_t v30;
  _QWORD *v31;
  char **v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  signed int v36;
  int v37;
  char *v38;
  BOOL v39;
  char v40;
  uint64_t v41;
  int v42;
  int v43;
  void (**v44)(const void *);
  int v45;
  sqlite3_int64 *v46;
  sqlite3_int64 *v47;
  uint64_t v48;
  char *v49;
  void (**v50)(char *);
  sqlite3_int64 *v51;
  uint64_t v52;
  char *v53;
  unsigned int v54;
  void (**v55)(char *);
  sqlite3_int64 *v57;
  sqlite3_int64 *v58;
  int v59;
  int v60[2];
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  signed int v63;
  unsigned int v65;
  char *v66;

  v9 = (unsigned __int8 *)a4;
  v12 = *a4;
  if (*a4 < 0)
  {
    v12 = v12 & 0x7F | (a4[1] << 7);
    if (a4[1] < 0)
    {
      v12 = v12 & 0x3FFF | (a4[2] << 14);
      if (a4[2] < 0)
      {
        v12 = v12 & 0x1FFFFF | (a4[3] << 21);
        if (a4[3] < 0)
          v12 = v12 & 0xFFFFFFF | ((a4[4] & 7) << 28);
      }
    }
  }
  v13 = (unsigned __int8 *)&a4[a5];
  v66 = 0;
  v14 = &a4[(int)sub_1ACC53378(a4, (unint64_t *)&v66)];
  v15 = (unsigned __int8 *)&v14[(int)sub_1ACC53378(v14, (unint64_t *)&v66)];
  if (v15 > v13)
    return 267;
  v57 = a7;
  v58 = a6;
  *(_QWORD *)v60 = a1;
  v59 = v12;
  if (v15 >= v13)
  {
    v21 = 0;
    v23 = (unint64_t)a6;
    v22 = (char **)a7;
    v35 = a3;
LABEL_62:
    if (v23)
      *(_QWORD *)v23 = v66;
    v41 = *(_QWORD *)v60;
    v42 = v59;
    v16 = 0;
    if (v22)
      *v22 = v66;
    v43 = 1;
    if (v21)
      goto LABEL_72;
    goto LABEL_78;
  }
  v17 = v13;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = (char **)a7;
  v23 = (unint64_t)a6;
  v63 = a3;
  v61 = v13;
  v62 = v9;
  while (1)
  {
    v24 = (v23 | (unint64_t)v22) != 0;
    if (!(v23 | (unint64_t)v22))
    {
      v16 = 0;
      goto LABEL_71;
    }
    if ((v19 & 1) == 0)
    {
      v25 = 0;
      goto LABEL_26;
    }
    v25 = *v15;
    if ((char)*v15 < 0)
    {
      v25 = v25 & 0x7F | (v15[1] << 7);
      if ((char)v15[1] < 0)
      {
        v25 = v25 & 0x3FFF | (v15[2] << 14);
        if ((char)v15[2] < 0)
        {
          v25 = v25 & 0x1FFFFF | (v15[3] << 21);
          if ((char)v15[3] < 0)
          {
            v25 = v25 & 0xFFFFFFF | ((v15[4] & 7) << 28);
            v26 = 5;
          }
          else
          {
            v26 = 4;
          }
        }
        else
        {
          v26 = 3;
        }
      }
      else
      {
        v26 = 2;
      }
    }
    else
    {
      v26 = 1;
    }
    if (v25 > v18)
      break;
    v15 += v26;
LABEL_26:
    v27 = *v15;
    if ((char)*v15 < 0)
    {
      v27 = v27 & 0x7F | (v15[1] << 7);
      if ((char)v15[1] < 0)
      {
        v27 = v27 & 0x3FFF | (v15[2] << 14);
        if ((char)v15[2] < 0)
        {
          v27 = v27 & 0x1FFFFF | (v15[3] << 21);
          if ((char)v15[3] < 0)
          {
            v27 = v27 & 0xFFFFFFF | ((v15[4] & 7) << 28);
            v28 = 5;
          }
          else
          {
            v28 = 4;
          }
        }
        else
        {
          v28 = 3;
        }
      }
      else
      {
        v28 = 2;
      }
    }
    else
    {
      v28 = 1;
    }
    v29 = &v15[v28];
    v16 = 267;
    if (&v15[v28] - v9 < v25)
      goto LABEL_71;
    if (!v27)
      goto LABEL_71;
    v30 = v27;
    if (v17 - v29 < v27)
      goto LABEL_71;
    v31 = (_QWORD *)v23;
    if ((uint64_t)(v27 + (unint64_t)v25) <= v20)
    {
      v33 = v20;
      v32 = v22;
    }
    else
    {
      v32 = v22;
      if (sqlite3_initialize()
        || (v33 = 2 * (v27 + (unint64_t)v25), (v34 = sub_1ACB6BB48((uint64_t)v21, v33)) == 0))
      {
        v16 = 7;
        goto LABEL_71;
      }
      v21 = (char *)v34;
    }
    memcpy(&v21[v25], v29, v27);
    v18 = v27 + v25;
    v35 = v63;
    if (v18 >= v63)
      v36 = v63;
    else
      v36 = v18;
    v37 = memcmp(a2, v21, v36);
    v38 = v66;
    if (!v31)
    {
      v22 = v32;
      goto LABEL_58;
    }
    v23 = (unint64_t)v31;
    if (v37)
      v39 = 1;
    else
      v39 = v18 <= v63;
    v40 = v39;
    v22 = v32;
    if (v37 < 0 || (v40 & 1) == 0)
    {
      *v31 = v66;
      v38 = v66;
LABEL_58:
      v9 = v62;
      v23 = 0;
      if (v22 && v37 < 0)
      {
        v23 = 0;
        *v22 = v38;
        v38 = v66;
        v22 = 0;
      }
      v17 = v61;
      goto LABEL_11;
    }
    v17 = v61;
    v9 = v62;
LABEL_11:
    v20 = v33;
    v15 = &v29[v30];
    v66 = v38 + 1;
    v19 = 1;
    if (&v29[v30] >= v17)
      goto LABEL_62;
  }
  v16 = 267;
LABEL_71:
  v43 = !v24;
  v35 = v63;
  v41 = *(_QWORD *)v60;
  v42 = v59;
  if (v21)
  {
LABEL_72:
    v44 = (void (**)(const void *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_77;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v21);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v21);
    v21 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v44 = (void (**)(const void *))&xmmword_1ECD3B1D0;
LABEL_77:
      (*v44)(v21);
    }
  }
LABEL_78:
  if (v42 > 1)
    v45 = v43;
  else
    v45 = 0;
  if (v45 == 1)
  {
    v66 = 0;
    v65 = 0;
    v46 = v58;
    if (!v58)
    {
      v48 = v35;
      v47 = v57;
      goto LABEL_98;
    }
    v47 = v57;
    if (!v57 || *v58 == *v57)
    {
      v48 = v35;
      goto LABEL_98;
    }
    v16 = sub_1ACC5319C(v41, *v58, &v66, &v65);
    if (!(_DWORD)v16)
      v16 = sub_1ACC526E4(v41, a2, v35, v66, v65, v58, 0);
    v49 = v66;
    if (v66)
    {
      v50 = (void (**)(char *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_95;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v49);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v49);
      v49 = (char *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v50 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_95:
        (*v50)(v49);
      }
    }
    v66 = 0;
    if (!(_DWORD)v16)
    {
      v48 = v35;
      v46 = 0;
LABEL_98:
      if (v46)
        v51 = v46;
      else
        v51 = v47;
      v52 = sub_1ACC5319C(v41, *v51, &v66, &v65);
      v53 = v66;
      if ((_DWORD)v52)
      {
        v16 = v52;
        if (!v66)
          return v16;
      }
      else
      {
        v54 = *v66;
        if (*v66 < 0)
        {
          v54 = v54 & 0x7F | (v66[1] << 7);
          if (v66[1] < 0)
          {
            v54 = v54 & 0x3FFF | (v66[2] << 14);
            if (v66[2] < 0)
            {
              v54 = v54 & 0x1FFFFF | (v66[3] << 21);
              if (v66[3] < 0)
                v54 = v54 & 0xFFFFFFF | ((v66[4] & 7) << 28);
            }
          }
        }
        if (v54 >= v42)
        {
          v16 = 267;
        }
        else
        {
          v16 = sub_1ACC526E4(v41, a2, v48, v66, v65, v46, v47);
          v53 = v66;
          if (!v66)
            return v16;
        }
      }
      v55 = (void (**)(char *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v53);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v53);
        v53 = (char *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v55 = (void (**)(char *))&xmmword_1ECD3B1D0;
          goto LABEL_118;
        }
      }
      else
      {
LABEL_118:
        (*v55)(v53);
      }
    }
  }
  return v16;
}

uint64_t sub_1ACC52D5C(int a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, int a7, uint64_t *a8)
{
  uint64_t v9;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;

  LODWORD(v9) = a7;
  if (a3)
  {
    v16 = 0;
    if (sqlite3_initialize())
      return 7;
  }
  else
  {
    if (a4)
      return 267;
    v16 = a7 + 20;
    if (sqlite3_initialize())
      return 7;
  }
  v17 = sub_1ACB5D828(v16 + 136);
  if (!v17)
    return 7;
  v18 = v17;
  *(_OWORD *)v17 = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  *(_QWORD *)(v17 + 128) = 0;
  *(_OWORD *)(v17 + 96) = 0u;
  *(_OWORD *)(v17 + 112) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_DWORD *)v17 = a1;
  *(_BYTE *)(v17 + 4) = a2 != 0;
  *(_QWORD *)(v17 + 8) = a3;
  *(_QWORD *)(v17 + 16) = a4;
  *(_QWORD *)(v17 + 24) = a5;
  if (v16)
  {
    v19 = v17 + 136;
    *(_QWORD *)(v17 + 40) = v17 + 136;
    *(_BYTE *)(v17 + 5) = 1;
    *(_DWORD *)(v17 + 48) = v9;
    if ((_DWORD)v9)
    {
      v9 = (int)v9;
      memcpy((void *)(v17 + 136), a6, (int)v9);
    }
    else
    {
      v9 = 0;
    }
    v21 = v19 + v9;
    *(_QWORD *)v21 = 0;
    *(_QWORD *)(v21 + 8) = 0;
    *(_DWORD *)(v21 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(v17 + 32) = a3 - 1;
  }
  result = 0;
  *a8 = v18;
  return result;
}

uint64_t sub_1ACC52E80(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  const void *v5;
  int v6;
  int v7;
  unsigned int v8;
  uint64_t result;

  v2 = *a1;
  v3 = *(const void **)(*a1 + 24);
  v4 = *a2;
  v5 = *(const void **)(*a2 + 24);
  v6 = *(_DWORD *)(v2 + 32);
  v7 = *(_DWORD *)(v4 + 32);
  v8 = v6 - v7;
  if (v6 >= v7)
    v6 = v7;
  LODWORD(result) = memcmp(v3, v5, v6);
  if ((_DWORD)result)
    return result;
  else
    return v8;
}

uint64_t sub_1ACC52EC8(char *a1, int a2)
{
  int v2;
  unsigned int v3;
  int v4;

  if (a2 < 1)
    return 0;
  v2 = 0;
  v3 = a2 + 1;
  do
  {
    v4 = *a1++;
    v2 ^= v4 ^ (8 * v2);
    --v3;
  }
  while (v3 > 1);
  return v2 & 0x7FFFFFFF;
}

uint64_t sub_1ACC52F00(const void *a1, int a2, void *__s2, int a4)
{
  if (a2 == a4)
    return memcmp(a1, __s2, a2);
  else
    return 1;
}

uint64_t sub_1ACC52F20(uint64_t *a1, int a2, sqlite3_stmt **a3, uint64_t a4)
{
  uint64_t *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt **v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  char *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  void (**v16)(unsigned __int8 *);
  uint64_t v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  BOOL v24;
  sqlite3_stmt *v26;

  v6 = &a1[a2];
  v9 = (sqlite3_stmt *)v6[14];
  v8 = (sqlite3_stmt **)(v6 + 14);
  v7 = v9;
  v26 = v9;
  if (v9)
  {
    v10 = 0;
    if (!a4)
      goto LABEL_33;
    goto LABEL_18;
  }
  if (a2 == 7)
  {
    v14 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s WHERE rowid=?", a1[55]);
    v15 = 129;
    if (v14)
      goto LABEL_11;
LABEL_8:
    v10 = 7;
    goto LABEL_33;
  }
  if (a2 == 18)
    v12 = sqlite3_mprintf("INSERT INTO %Q.'%q_content' VALUES(%s)", a1[4], a1[5], a1[56]);
  else
    v12 = sqlite3_mprintf(off_1E5C74D88[a2], a1[4], a1[5]);
  v14 = (unsigned __int8 *)v12;
  v15 = 133;
  if (!v12)
    goto LABEL_8;
LABEL_11:
  v10 = sub_1ACB5C66C(a1[3], v14, 0xFFFFFFFFLL, v15, 0, &v26, 0, v13);
  v16 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_16:
    (*v16)(v14);
    goto LABEL_17;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v14);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v14);
  v14 = (unsigned __int8 *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v16 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    goto LABEL_16;
  }
LABEL_17:
  v7 = v26;
  *v8 = v26;
  if (!a4)
    goto LABEL_33;
LABEL_18:
  if (!v7)
    goto LABEL_33;
  v17 = *(_QWORD *)(*(_QWORD *)v7 + 24);
  if (!v17)
  {
    v19 = *((_DWORD *)v7 + 8);
    if ((_DWORD)v10)
      goto LABEL_33;
    goto LABEL_25;
  }
  xmmword_1ECD3B1C0(v17);
  v18 = *(_QWORD *)(*(_QWORD *)v7 + 24);
  v19 = *((_DWORD *)v7 + 8);
  if (v18)
    xmmword_1ECD3B1D0(v18);
  if (!(_DWORD)v10)
  {
LABEL_25:
    if (v19 >= 1)
    {
      v20 = 0;
      v21 = v19;
      do
      {
        v22 = v20 + 1;
        v23 = sqlite3_bind_value(v26, v20 + 1, *(const sqlite3_value **)(a4 + 8 * v20));
        if ((_DWORD)v23)
          v24 = 1;
        else
          v24 = v22 >= v21;
        v20 = v22;
      }
      while (!v24);
      v10 = v23;
    }
  }
LABEL_33:
  *a3 = v26;
  return v10;
}

uint64_t sub_1ACC5312C(_BYTE *a1, int *a2)
{
  int v2;
  uint64_t result;
  int v4;
  int v5;

  v2 = *a1 & 0x7F | (a1[1] << 7);
  if ((char)a1[1] < 0)
  {
    v4 = *a1 & 0x7F | (a1[1] << 7) & 0x3FFF | (a1[2] << 14);
    if ((char)a1[2] < 0)
    {
      v5 = *a1 & 0x7F | (a1[1] << 7) & 0x3FFF | (a1[2] << 14) & 0x1FFFFF | (a1[3] << 21);
      if ((char)a1[3] < 0)
      {
        v5 = *a1 & 0x7F | (a1[1] << 7) & 0x3FFF | (a1[2] << 14) & 0x1FFFFF | (a1[3] << 21) & 0xFFFFFFF | ((a1[4] & 7) << 28);
        result = 5;
      }
      else
      {
        result = 4;
      }
      *a2 = v5;
    }
    else
    {
      result = 3;
      *a2 = v4;
    }
  }
  else
  {
    result = 2;
    *a2 = v2;
  }
  return result;
}

uint64_t sub_1ACC5319C(uint64_t a1, sqlite3_int64 iRow, char **a3, _DWORD *a4)
{
  sqlite3_blob **v8;
  sqlite3_blob *v9;
  unsigned int v10;
  uint64_t v11;
  char *v13;
  sqlite3_blob *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  void (**v18)(char *);

  v8 = (sqlite3_blob **)(a1 + 480);
  v9 = *(sqlite3_blob **)(a1 + 480);
  if (!v9)
  {
    v13 = *(char **)(a1 + 472);
    if (!v13)
    {
      v13 = sqlite3_mprintf("%s_segments", *(const char **)(a1 + 40));
      *(_QWORD *)(a1 + 472) = v13;
      if (!v13)
        return 7;
    }
    v10 = sqlite3_blob_open(*(sqlite3 **)(a1 + 24), *(const char **)(a1 + 32), v13, "block", iRow, 0, v8);
    if (v10)
      goto LABEL_3;
LABEL_10:
    v14 = *v8;
    if (*v8 && *((_QWORD *)v14 + 3))
    {
      v15 = *(unsigned int *)v14;
      *a4 = v15;
      if (!a3)
        return 0;
    }
    else
    {
      v15 = 0;
      *a4 = 0;
      if (!a3)
        return 0;
    }
    if (sqlite3_initialize())
    {
      v11 = 7;
      *a3 = 0;
      return v11;
    }
    v16 = (char *)sub_1ACB5D828((int)v15 + 20);
    if (!v16)
    {
      v11 = 7;
      *a3 = 0;
      return v11;
    }
    v11 = sub_1ACBCB9F8((int *)*v8, v16, v15, 0, sub_1ACBCBBE8);
    v17 = &v16[(int)v15];
    *(_QWORD *)v17 = 0;
    *((_QWORD *)v17 + 1) = 0;
    *((_DWORD *)v17 + 4) = 0;
    if ((_DWORD)v11)
    {
      v18 = (void (**)(char *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v16);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v16);
        v16 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_25;
        v18 = (void (**)(char *))&xmmword_1ECD3B1D0;
      }
      (*v18)(v16);
      v16 = 0;
    }
LABEL_25:
    *a3 = v16;
    return v11;
  }
  v10 = sqlite3_blob_reopen(v9, iRow);
  if (!v10)
    goto LABEL_10;
LABEL_3:
  if (v10 == 1)
    return 267;
  else
    return v10;
}

uint64_t sub_1ACC53378(char *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = v2 & 0x7F | (a1[1] << 7);
    if (a1[1] < 0)
    {
      v5 = v4 & 0x3FFF | (a1[2] << 14);
      if (a1[2] < 0)
      {
        v6 = v5 & 0x1FFFFF | (a1[3] << 21);
        if (a1[3] < 0)
        {
          v7 = a1[4];
          v8 = v6 & 0xFFFFFFF | ((unint64_t)(v7 & 0x7F) << 28);
          if (v7 < 0)
          {
            v10 = a1[5];
            v8 |= (unint64_t)(v10 & 0x7F) << 35;
            if (v10 < 0)
            {
              v11 = a1[6];
              v8 |= (unint64_t)(v11 & 0x7F) << 42;
              if (v11 < 0)
              {
                v12 = a1[7];
                v8 |= (unint64_t)(v12 & 0x7F) << 49;
                if (v12 < 0)
                {
                  v13 = a1[8];
                  v8 |= (unint64_t)(v13 & 0x7F) << 56;
                  if (v13 < 0)
                  {
                    v8 |= (unint64_t)a1[9] << 63;
                    v9 = (_DWORD)a1 + 10;
                  }
                  else
                  {
                    v9 = (_DWORD)a1 + 9;
                  }
                }
                else
                {
                  v9 = (_DWORD)a1 + 8;
                }
              }
              else
              {
                v9 = (_DWORD)a1 + 7;
              }
            }
            else
            {
              v9 = (_DWORD)a1 + 6;
            }
          }
          else
          {
            v9 = (_DWORD)a1 + 5;
          }
          *a2 = v8;
          return (v9 - (_DWORD)a1);
        }
        else
        {
          *a2 = v6;
          return 4;
        }
      }
      else
      {
        *a2 = v5;
        return 3;
      }
    }
    else
    {
      *a2 = v4;
      return 2;
    }
  }
  else
  {
    *a2 = v2;
    return 1;
  }
}

uint64_t sub_1ACC53478(uint64_t a1, uint64_t *a2, const void *a3, int a4)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  BOOL v33;

  v5 = *((_DWORD *)a2 + 2);
  if (!*((_DWORD *)a2 + 11))
  {
    v27 = 0;
    do
    {
      if (v27 >= *((int *)a2 + 2))
        break;
      v28 = *(_QWORD *)(*a2 + 8 * v27);
      do
      {
        result = sub_1ACC5361C(a1, v28);
        if ((_DWORD)result)
          return result;
        if (!a3 || !*(_QWORD *)(v28 + 40))
          goto LABEL_31;
        v29 = *(_DWORD *)(v28 + 72);
        v30 = v29 - a4;
        if (v29 >= a4)
          v29 = a4;
        v31 = memcmp(*(const void **)(v28 + 80), a3, v29);
        if (v31)
          v32 = v31;
        else
          v32 = v30;
      }
      while (v32 < 0);
      if (v32)
        v33 = *(_BYTE *)(v28 + 4) == 0;
      else
        v33 = 1;
      if (!v33)
        sub_1ACC53B00(v28);
LABEL_31:
      ++v27;
    }
    while (!*((_DWORD *)a2 + 11));
  }
  v6 = (v5 - 1);
  if ((int)v6 >= 1)
  {
    v7 = *a2;
    v8 = (v5 - 1);
    while (1)
    {
      v9 = v8--;
      if (v5 > (int)v9)
        break;
LABEL_4:
      if ((int)v9 <= 1)
        return 0;
    }
    v10 = *(_QWORD *)(v7 + 8 * v8);
    v11 = v9;
    while (1)
    {
      v12 = *(_QWORD *)(v7 + 8 * v11);
      v13 = *(_QWORD *)(v10 + 40);
      v14 = *(_QWORD *)(v12 + 40);
      if (!v13)
        break;
      if (!v14)
      {
        v20 = -1;
LABEL_20:
        if (v13)
          v19 = v20;
        else
          v19 = v20 + 1;
        if (v19)
          goto LABEL_25;
        goto LABEL_24;
      }
      v15 = *(_DWORD *)(v10 + 72);
      v16 = *(_DWORD *)(v12 + 72);
      v17 = v15 - v16;
      if (v15 >= v16)
        v15 = *(_DWORD *)(v12 + 72);
      v18 = memcmp(*(const void **)(v10 + 80), *(const void **)(v12 + 80), v15);
      if (v18)
        v19 = v18;
      else
        v19 = v17;
      if (v19)
        goto LABEL_25;
LABEL_24:
      v19 = *(_DWORD *)v12 - *(_DWORD *)v10;
LABEL_25:
      if ((v19 & 0x80000000) == 0)
      {
        v21 = (_QWORD *)(v7 + 8 * v11);
        *(v21 - 1) = v12;
        *v21 = v10;
        if (v11++ < v6)
          continue;
      }
      goto LABEL_4;
    }
    if (v14)
      v20 = 0;
    else
      v20 = -1;
    goto LABEL_20;
  }
  return 0;
}

uint64_t sub_1ACC5361C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  uint64_t result;
  BOOL v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (**v11)(uint64_t);
  const void **v12;
  uint64_t v13;
  int v14;
  void *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  void (**v19)(void *);
  int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  int64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  int v33;
  uint64_t v34;
  unsigned __int8 *v35;

  v4 = *(_QWORD *)(a2 + 96);
  if (v4)
  {
    v5 = (unsigned __int8 *)(v4 + *(int *)(a2 + 104));
    if (!v5)
      goto LABEL_14;
  }
  else
  {
    v5 = *(unsigned __int8 **)(a2 + 40);
    if (!v5)
      goto LABEL_14;
  }
  if ((unint64_t)v5 < *(_QWORD *)(a2 + 40) + *(int *)(a2 + 48))
  {
    if (*(_QWORD *)(a2 + 56))
      goto LABEL_7;
    goto LABEL_29;
  }
LABEL_14:
  v8 = *(uint64_t **)(a2 + 64);
  if (v8)
  {
    v9 = *v8;
    v10 = *(_QWORD *)(a2 + 40);
    if (!v10)
      goto LABEL_22;
    v11 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v10);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v10);
      v10 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_22:
        *(_QWORD *)(a2 + 40) = 0;
        if (v9)
        {
          v12 = *(const void ***)(v9 + 16);
          v13 = *(int *)v12;
          v14 = *(_DWORD *)(v9 + 32);
          v15 = *(void **)(a2 + 80);
          if (v14 < *(_DWORD *)(a2 + 88))
            goto LABEL_24;
          if (v15)
          {
            v19 = (void (**)(void *))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v15);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v15);
              v15 = (void *)xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_39;
              v19 = (void (**)(void *))&xmmword_1ECD3B1D0;
            }
            (*v19)(v15);
          }
LABEL_39:
          if (sqlite3_initialize())
          {
            *(_QWORD *)(a2 + 80) = 0;
            return 7;
          }
          v23 = sub_1ACB5D828(2 * v14 + 2);
          *(_QWORD *)(a2 + 80) = v23;
          if (!v23)
            return 7;
          v15 = (void *)v23;
          *(_DWORD *)(a2 + 88) = 2 * v14 + 2;
LABEL_24:
          memcpy(v15, *(const void **)(v9 + 24), v14);
          *(_BYTE *)(*(_QWORD *)(a2 + 80) + v14) = 0;
          *(_DWORD *)(a2 + 72) = v14;
          if (!sqlite3_initialize())
          {
            v20 = v13 + 1;
            v21 = (void *)sub_1ACB5D828(v13 + 1);
            if (v21)
            {
              v22 = v21;
              memcpy(v21, v12[1], v13 + 1);
              result = 0;
              *(_DWORD *)(a2 + 104) = v20;
              *(_DWORD *)(a2 + 48) = v20;
              *(_QWORD *)(a2 + 96) = v22;
              *(_QWORD *)(a2 + 40) = v22;
              *(_QWORD *)(a2 + 64) += 8;
              return result;
            }
          }
          return 7;
        }
        return 0;
      }
      v11 = &xmmword_1ECD3B1D0;
    }
    (*v11)(v10);
    goto LABEL_22;
  }
  sub_1ACC53B00(a2);
  v16 = *(_QWORD *)(a2 + 32);
  if (v16 >= *(_QWORD *)(a2 + 16))
    return 0;
  *(_QWORD *)(a2 + 32) = v16 + 1;
  result = sub_1ACC5319C(a1, v16 + 1, (char **)(a2 + 40), (_DWORD *)(a2 + 48));
  if ((_DWORD)result)
    return result;
  v5 = *(unsigned __int8 **)(a2 + 40);
  if (*(_QWORD *)(a2 + 56))
  {
LABEL_7:
    while ((uint64_t)&v5[-*(_QWORD *)(a2 + 40) + 20] > *(int *)(a2 + 52))
    {
      result = sub_1ACC53C60(a2);
      if (*(_QWORD *)(a2 + 56))
        v7 = (_DWORD)result == 0;
      else
        v7 = 0;
      if (!v7)
      {
        if ((_DWORD)result)
          return result;
        break;
      }
    }
  }
LABEL_29:
  v17 = *v5;
  if ((char)*v5 < 0)
  {
    v17 = v17 & 0x7F | (v5[1] << 7);
    if ((char)v5[1] < 0)
    {
      v17 = v17 & 0x3FFF | (v5[2] << 14);
      if ((char)v5[2] < 0)
      {
        v17 = v17 & 0x1FFFFF | (v5[3] << 21);
        if ((char)v5[3] < 0)
        {
          v17 = v17 & 0xFFFFFFF | ((v5[4] & 7) << 28);
          v18 = 5;
        }
        else
        {
          v18 = 4;
        }
      }
      else
      {
        v18 = 3;
      }
    }
    else
    {
      v18 = 2;
    }
  }
  else
  {
    v18 = 1;
  }
  v24 = &v5[v18];
  v25 = *v24;
  if ((char)*v24 < 0)
  {
    v25 = v25 & 0x7F | (v24[1] << 7);
    if ((char)v24[1] < 0)
    {
      v25 = v25 & 0x3FFF | (v24[2] << 14);
      if ((char)v24[2] < 0)
      {
        v25 = v25 & 0x1FFFFF | (v24[3] << 21);
        if ((char)v24[3] < 0)
        {
          v25 = v25 & 0xFFFFFFF | ((v24[4] & 7) << 28);
          v26 = 5;
        }
        else
        {
          v26 = 4;
        }
      }
      else
      {
        v26 = 3;
      }
    }
    else
    {
      v26 = 2;
    }
  }
  else
  {
    v26 = 1;
  }
  if (!v25)
    return 267;
  v27 = &v24[v26];
  if (*(_QWORD *)(a2 + 40) + *(int *)(a2 + 48) - (_QWORD)&v24[v26] < (uint64_t)v25
    || (signed int)v17 > *(_DWORD *)(a2 + 72))
  {
    return 267;
  }
  v28 = v25 + (unint64_t)v17;
  if (v28 > *(int *)(a2 + 88))
  {
    v29 = *(_QWORD *)(a2 + 80);
    if (sqlite3_initialize())
      return 7;
    v30 = 2 * v28;
    v31 = sub_1ACB6BB48(v29, v30);
    if (!v31)
      return 7;
    *(_QWORD *)(a2 + 80) = v31;
    *(_DWORD *)(a2 + 88) = v30;
  }
  result = sub_1ACC53C04(a2, (uint64_t)v27, v25 + 10);
  if (!(_DWORD)result)
  {
    memcpy((void *)(*(_QWORD *)(a2 + 80) + v17), v27, v25);
    *(_DWORD *)(a2 + 72) = v25 + v17;
    v32 = &v27[v25];
    if ((char)*v32 < 0)
    {
      v34 = sub_1ACC5312C(v32, (int *)(a2 + 104));
      v33 = *(_DWORD *)(a2 + 104);
    }
    else
    {
      v33 = *v32;
      *(_DWORD *)(a2 + 104) = v33;
      v34 = 1;
    }
    v35 = &v32[v34];
    *(_QWORD *)(a2 + 96) = v35;
    *(_QWORD *)(a2 + 112) = 0;
    if (*(_QWORD *)(a2 + 40) - (_QWORD)v35 + *(int *)(a2 + 48) < v33 || !*(_DWORD *)(a2 + 52) && v35[v33 - 1])
      return 267;
    if (v33)
      return 0;
    else
      return 267;
  }
  return result;
}

uint64_t sub_1ACC53B00(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  _QWORD *v4;
  sqlite3_stmt *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = result;
  if (*(_BYTE *)(result + 5))
    goto LABEL_16;
  v2 = *(_QWORD *)(result + 40);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v2);
      v2 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_9;
      v3 = &xmmword_1ECD3B1D0;
    }
    result = (*v3)(v2);
  }
LABEL_9:
  v4 = *(_QWORD **)(v1 + 56);
  if (v4)
  {
    v5 = (sqlite3_stmt *)v4[3];
    v6 = (_QWORD *)v4[4];
    v7 = v6[3];
    if (v7)
      xmmword_1ECD3B1C0(v7);
    sub_1ACBE0F9C(v6, v4);
    v8 = v6[3];
    if (v8)
      xmmword_1ECD3B1D0(v8);
    result = sqlite3_finalize(v5);
  }
  *(_QWORD *)(v1 + 56) = 0;
LABEL_16:
  *(_QWORD *)(v1 + 40) = 0;
  return result;
}

uint64_t sub_1ACC53C04(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4;
  uint64_t result;
  BOOL v6;

  if (*(_QWORD *)(a1 + 56))
  {
    v4 = a2 + a3;
    while (v4 - *(_QWORD *)(a1 + 40) > *(int *)(a1 + 52))
    {
      result = sub_1ACC53C60(a1);
      if (*(_QWORD *)(a1 + 56))
        v6 = (_DWORD)result == 0;
      else
        v6 = 0;
      if (!v6)
        return result;
    }
  }
  return 0;
}

uint64_t sub_1ACC53C60(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  sqlite3_stmt *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(int *)(a1 + 52);
  v3 = *(_DWORD *)(a1 + 48) - v2;
  if (v3 >= 4096)
    v4 = 4096;
  else
    v4 = v3;
  v5 = sub_1ACBCB9F8(*(int **)(a1 + 56), (char *)(*(_QWORD *)(a1 + 40) + v2), v4, v2, sub_1ACBCBBE8);
  if (!(_DWORD)v5)
  {
    v6 = *(int *)(a1 + 52) + (uint64_t)(int)v4;
    *(_DWORD *)(a1 + 52) = v6;
    v7 = *(_QWORD *)(a1 + 40) + v6;
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_DWORD *)(v7 + 16) = 0;
    if (*(_DWORD *)(a1 + 52) == *(_DWORD *)(a1 + 48))
    {
      v8 = *(_QWORD **)(a1 + 56);
      if (v8)
      {
        v9 = (sqlite3_stmt *)v8[3];
        v10 = (_QWORD *)v8[4];
        v11 = v10[3];
        if (v11)
          xmmword_1ECD3B1C0(v11);
        sub_1ACBE0F9C(v10, v8);
        v12 = v10[3];
        if (v12)
          xmmword_1ECD3B1D0(v12);
        sqlite3_finalize(v9);
      }
      *(_QWORD *)(a1 + 56) = 0;
      *(_DWORD *)(a1 + 52) = 0;
    }
  }
  return v5;
}

uint64_t sub_1ACC53D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t result;
  int v12;
  uint64_t v13;
  size_t v14;
  const void *v15;
  BOOL v16;
  size_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  int8x16_t *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int8x16_t *v44;
  int8x16_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  unsigned __int8 *v54;
  char *v55;
  char *v56;
  char *v57;
  int v58;
  int64_t v59;
  char v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  BOOL v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  int v71;
  char *v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  _BYTE *v79;
  char *v80;
  int v81;
  char v82;
  char v83;
  int v84;
  uint64_t v85;
  char *v86;
  unsigned int v87;
  _BYTE *v88;
  unint64_t v89;
  char v90;
  _BYTE *v91;
  _BYTE *v92;
  unint64_t v93;
  char v94;
  int v95;
  char v96;
  int v97;
  int v98;
  int v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int8x16_t *v103;
  int8x16_t v104;
  size_t v105;
  const void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  void *v112;
  size_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v120;
  int v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  int v126;
  int v127;
  char *v128;
  unint64_t v129;

  v2 = *(unsigned int *)(a2 + 8);
  if (*(_BYTE *)(a1 + 463))
    v3 = sub_1ACC546D8;
  else
    v3 = sub_1ACC54730;
  if (!(_DWORD)v2)
    return 0;
  v4 = a2;
  v5 = a1;
  v6 = *(uint64_t **)a2;
  v117 = *(_QWORD *)(a2 + 16);
  v122 = *(_DWORD *)(a2 + 8);
  v7 = (int)v2 - 1;
  LODWORD(v8) = *(_DWORD *)(a2 + 12);
  v124 = v7;
  v121 = *(_DWORD *)(v117 + 16);
  while (1)
  {
    if ((int)v8 >= 1)
    {
      for (i = 0; i < v8; ++i)
      {
        v10 = v6[i];
        if (*(_BYTE *)(v10 + 4))
        {
          sub_1ACC53B00(v6[i]);
        }
        else
        {
          result = sub_1ACC5361C(v5, v10);
          if ((_DWORD)result)
            return result;
        }
        v8 = *(int *)(v4 + 12);
      }
    }
    v12 = v8 - ((_DWORD)v8 == (_DWORD)v2);
    if (v12 >= 1)
    {
      while (1)
      {
        v20 = v12--;
        if (v122 > v20)
          break;
LABEL_31:
        if (v20 <= 1)
          goto LABEL_16;
      }
      v21 = v12;
      v22 = v6[v12];
      while (1)
      {
        v23 = &v6[v21];
        v24 = v23[1];
        v25 = *(_QWORD *)(v22 + 40);
        v26 = *(_QWORD *)(v24 + 40);
        if (!v25)
          break;
        if (!v26)
        {
          v32 = -1;
LABEL_47:
          if (v25)
            v31 = v32;
          else
            v31 = v32 + 1;
          if (v31)
            goto LABEL_52;
          goto LABEL_51;
        }
        v27 = *(_DWORD *)(v22 + 72);
        v28 = *(_DWORD *)(v24 + 72);
        v29 = v27 - v28;
        if (v27 >= v28)
          v27 = *(_DWORD *)(v24 + 72);
        v30 = memcmp(*(const void **)(v22 + 80), *(const void **)(v24 + 80), v27);
        if (v30)
          v31 = v30;
        else
          v31 = v29;
        v7 = v124;
        if (v31)
          goto LABEL_52;
LABEL_51:
        v31 = *(_DWORD *)v24 - *(_DWORD *)v22;
LABEL_52:
        if ((v31 & 0x80000000) == 0)
        {
          v6[v21] = v24;
          v23[1] = v22;
          if (++v21 < v7)
            continue;
        }
        goto LABEL_31;
      }
      if (v26)
        v32 = 0;
      else
        v32 = -1;
      goto LABEL_47;
    }
LABEL_16:
    v4 = a2;
    *(_DWORD *)(a2 + 12) = 0;
    v13 = *v6;
    if (!*(_QWORD *)(*v6 + 40))
      return 0;
    v14 = *(int *)(v13 + 72);
    *(_DWORD *)(a2 + 64) = v14;
    v15 = *(const void **)(v13 + 80);
    *(_QWORD *)(a2 + 56) = v15;
    if (*(_QWORD *)v117 && (v121 & 0x10) == 0)
    {
      result = 0;
      v16 = (v121 & 8) == 0;
      v17 = *(int *)(v117 + 8);
      if ((int)v14 <= (int)v17)
        v16 = 0;
      if ((int)v14 < (int)v17 || v16)
        return result;
      if (memcmp(v15, *(const void **)v117, v17))
        return 0;
    }
    if (v122 < 2)
    {
      LODWORD(v8) = 1;
    }
    else
    {
      v18 = 1;
      while (1)
      {
        v19 = v6[v18];
        if (!*(_QWORD *)(v19 + 40)
          || *(_DWORD *)(v19 + 72) != (_DWORD)v14
          || memcmp(v15, *(const void **)(v19 + 80), v14))
        {
          break;
        }
        if (v2 == ++v18)
        {
          LODWORD(v8) = v2;
          goto LABEL_57;
        }
      }
      LODWORD(v8) = v18;
    }
LABEL_57:
    v126 = v8;
    if ((_DWORD)v8 == 1 && (v121 & 2) == 0 && (v121 & 0x20) == 0)
    {
      v33 = *v6;
      v34 = *(_QWORD *)(*v6 + 64);
      if (*(_BYTE *)(a1 + 463))
      {
        if (v34)
          goto LABEL_62;
        *(_DWORD *)(a2 + 80) = *(_DWORD *)(v33 + 104);
LABEL_170:
        v108 = *(_QWORD *)(v33 + 96);
      }
      else
      {
        v105 = *(int *)(v33 + 104);
        *(_DWORD *)(a2 + 80) = v105;
        if (!v34)
          goto LABEL_170;
        v106 = *(const void **)(v33 + 96);
        if ((int64_t)(v105 + 20) <= *(_QWORD *)(a2 + 32))
        {
          v112 = *(void **)(a2 + 24);
        }
        else
        {
          v107 = *(_QWORD *)(a2 + 24);
          if (sqlite3_initialize() || (v8 = 2 * (int)v105 + 20, (v112 = (void *)sub_1ACB6BB48(v107, v8)) == 0))
          {
            *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
            result = 7;
            *(_DWORD *)(a2 + 12) = v126;
            return result;
          }
          *(_QWORD *)(a2 + 24) = v112;
          *(_QWORD *)(a2 + 32) = v8;
          LODWORD(v8) = v126;
        }
        memcpy(v112, v106, v105);
        v113 = *(_QWORD *)(a2 + 24) + v105;
        *(_DWORD *)(v113 + 16) = 0;
        *(_QWORD *)v113 = 0;
        *(_QWORD *)(v113 + 8) = 0;
        v108 = *(_QWORD *)(a2 + 24);
      }
      *(_QWORD *)(a2 + 72) = v108;
      goto LABEL_178;
    }
LABEL_62:
    v35 = 0;
    v116 = v8;
    v36 = (v8 - 1);
    if (v8 <= 1)
      v37 = 1;
    else
      v37 = v8;
    v38 = 8 * v37;
    do
    {
      sub_1ACC54788(a1, v6[v35 / 8]);
      v35 += 8;
    }
    while (v38 != v35);
    if (v8 >= 2)
    {
      v39 = (int8x16_t *)&v6[(int)v8 - 2];
      v40 = v8 - 1;
      do
      {
        v41 = v40--;
        if ((int)v8 > v41)
        {
          v42 = v40;
          v43 = v6[v40];
          v44 = v39;
          do
          {
            if ((v3(v43, v44->i64[1]) & 0x80000000) != 0)
              break;
            ++v42;
            v45 = *v44;
            *v44 = vextq_s8(*v44, *v44, 8uLL);
            v44 = (int8x16_t *)((char *)v44 + 8);
            v43 = v45.i64[0];
          }
          while (v42 < v36);
        }
        v39 = (int8x16_t *)((char *)v39 - 8);
        LODWORD(v8) = v126;
      }
      while (v41 > 1);
    }
    v46 = *v6;
    v5 = a1;
    v4 = a2;
    v47 = v121;
    if (*(_QWORD *)(*v6 + 112))
      break;
LABEL_7:
    *(_DWORD *)(v4 + 12) = v8;
    v2 = v122;
  }
  v120 = 0;
  v48 = 0;
  do
  {
    v128 = 0;
    v127 = 0;
    v125 = *(_QWORD *)(v46 + 128);
    sub_1ACC5484C(v5, v46, &v128, &v127);
    v49 = 1;
    if (v8 >= 2)
    {
      while (1)
      {
        v50 = v6[v49];
        if (!*(_QWORD *)(v50 + 112) || *(_QWORD *)(v50 + 128) != v125)
          break;
        sub_1ACC5484C(v5, v50, 0, 0);
        if (v116 == ++v49)
        {
          LODWORD(v49) = v116;
          break;
        }
      }
    }
    v51 = v127;
    if ((v47 & 4) != 0)
    {
      v52 = 0;
      v53 = *(_DWORD *)(v117 + 12);
      v54 = (unsigned __int8 *)v128;
      v55 = &v128[v127];
      v56 = v128;
      while (1)
      {
        v57 = (char *)v54;
        if (v56 < v55)
        {
          v58 = 0;
          v59 = v55 - v56;
          while (1)
          {
            v60 = *v56;
            if (!(*v56 & 0xFE | v58))
              break;
            ++v56;
            v58 = v60 & 0x80;
            if (!--v59)
            {
              v54 = (unsigned __int8 *)&v128[v127];
              if (v52 != v53)
                goto LABEL_93;
              goto LABEL_102;
            }
          }
        }
        v54 = (unsigned __int8 *)v56;
        if (v52 == v53)
        {
LABEL_102:
          v51 = (_DWORD)v54 - (_DWORD)v57;
          goto LABEL_104;
        }
LABEL_93:
        v51 += (_DWORD)v57 - (_DWORD)v54;
        if (v51 < 1)
          break;
        v52 = v54[1];
        if ((char)v54[1] < 0)
        {
          v52 = v52 & 0x7F | (v54[2] << 7);
          if ((char)v54[2] < 0)
          {
            v52 = v52 & 0x3FFF | (v54[3] << 14);
            if ((char)v54[3] < 0)
            {
              v52 = v52 & 0x1FFFFF | (v54[4] << 21);
              if ((char)v54[4] < 0)
              {
                v52 = v52 & 0xFFFFFFF | ((v54[5] & 7) << 28);
                v56 = (char *)(v54 + 6);
              }
              else
              {
                v56 = (char *)(v54 + 5);
              }
            }
            else
            {
              v56 = (char *)(v54 + 4);
            }
          }
          else
          {
            v56 = (char *)(v54 + 3);
          }
        }
        else
        {
          v56 = (char *)(v54 + 2);
        }
      }
      v57 = (char *)v54;
LABEL_104:
      v128 = v57;
      v127 = v51;
    }
    if ((v47 & 2) == 0 || v51 >= 1)
    {
      if (*(_BYTE *)(v5 + 463) && v48 >= 1)
      {
        v61 = v120 - v125;
        if (v120 <= v125)
          return 267;
      }
      else
      {
        if (v48 >= 1 && v120 >= v125)
          return 267;
        v61 = v125 - v120;
      }
      v62 = v48 + 20;
      v63 = v61;
      do
      {
        ++v62;
        v64 = v63 > 0x7F;
        v63 >>= 7;
      }
      while (v64);
      v65 = v62 + ((v47 << 31 >> 31) & (v51 + 1));
      v66 = v47;
      if (*(_QWORD *)(v4 + 32) < v65)
      {
        v67 = 2 * v65;
        *(_QWORD *)(v4 + 32) = 2 * v65;
        v68 = *(_QWORD *)(v4 + 24);
        if (sqlite3_initialize())
          return 7;
        v69 = sub_1ACB6BB48(v68, v67);
        if (!v69)
          return 7;
        *(_QWORD *)(v4 + 24) = v69;
        v66 = v121;
      }
      v70 = (_BYTE *)(*(_QWORD *)(v4 + 24) + v48);
      if ((v66 & 0x20) != 0)
      {
        v71 = 0;
        v72 = v128;
        v73 = *v128;
        if (v73 == 1)
        {
          v80 = v128;
          v123 = 0;
        }
        else
        {
          v74 = 0;
          if (v73 == 2)
          {
            v75 = 0;
            v76 = v61;
            do
            {
              v77 = v76;
              v70[v75++] = v76 | 0x80;
              v64 = v76 > 0x7F;
              v76 >>= 7;
            }
            while (v64);
            v78 = v77 & 0x7F;
            v79 = &v70[v75];
            *(v79 - 1) = v78;
            v71 = v75 + 1;
            *v79 = 2;
            v73 = *v72;
            v74 = 1;
          }
          v123 = v74;
          v80 = v72;
          if (v73 >= 2)
          {
            do
            {
              v81 = v73 & 0x80;
              v82 = *++v80;
              LOBYTE(v73) = v82;
            }
            while (v82 & 0xFE | v81);
          }
        }
        v86 = &v72[v51];
        while (v80 < v86)
        {
          v129 = 0;
          v80 += (int)sub_1ACC53378(v80 + 1, &v129) + 1;
          v87 = *v80;
          if (v87 == 2)
          {
            if (!v123)
            {
              v88 = &v70[v71];
              v89 = v61;
              do
              {
                v90 = v89;
                *v88++ = v89 | 0x80;
                ++v71;
                v64 = v89 > 0x7F;
                v89 >>= 7;
              }
              while (v64);
              *(v88 - 1) = v90 & 0x7F;
            }
            v91 = &v70[v71];
            *v91 = 1;
            v92 = v91 + 1;
            v93 = v129;
            v71 += 2;
            do
            {
              v94 = v93;
              *v92++ = v93 | 0x80;
              ++v71;
              v64 = v93 > 0x7F;
              v93 >>= 7;
            }
            while (v64);
            *(v92 - 1) = v94 & 0x7F;
            v70[v71 - 1] = 2;
            v87 = *v80;
            v123 = 1;
          }
          if (v87 >= 2)
          {
            do
            {
              v95 = v87 & 0x80;
              v96 = *++v80;
              LOBYTE(v87) = v96;
            }
            while (v96 & 0xFE | v95);
          }
        }
        if (v123)
          v70[v71++] = 0;
        LODWORD(v8) = v126;
        v48 += v71;
        v85 = v120;
        if (v71)
          v85 = v125;
      }
      else
      {
        do
        {
          v83 = v61;
          *v70++ = v61 | 0x80;
          ++v48;
          v64 = v61 > 0x7F;
          v61 >>= 7;
        }
        while (v64);
        *(v70 - 1) = v83 & 0x7F;
        if ((v121 & 1) != 0)
        {
          memcpy((void *)(*(_QWORD *)(v4 + 24) + v48), v128, v51);
          v84 = v51 + v48;
          v48 += v51 + 1;
          *(_BYTE *)(*(_QWORD *)(v4 + 24) + v84) = 0;
        }
        v85 = v125;
        LODWORD(v8) = v126;
      }
      v120 = v85;
    }
    if ((_DWORD)v49 == (_DWORD)v8)
      v97 = -1;
    else
      v97 = 0;
    v98 = v49 - ((_DWORD)v49 == (_DWORD)v8);
    if (v98 >= 1)
    {
      v99 = v49 + v97 - 1;
      do
      {
        v100 = v98--;
        if ((int)v8 > v100)
        {
          v101 = v98;
          v102 = v6[v98];
          v103 = (int8x16_t *)&v6[v99];
          do
          {
            if ((v3(v102, v103->i64[1]) & 0x80000000) != 0)
              break;
            ++v101;
            v104 = *v103;
            *v103 = vextq_s8(*v103, *v103, 8uLL);
            v103 = (int8x16_t *)((char *)v103 + 8);
            v102 = v104.i64[0];
          }
          while (v101 < (int)v36);
        }
        --v99;
        LODWORD(v8) = v126;
      }
      while (v100 > 1);
    }
    v46 = *v6;
    v5 = a1;
    v4 = a2;
    v47 = v121;
  }
  while (*(_QWORD *)(*v6 + 112));
  v7 = v124;
  if (v48 < 1)
    goto LABEL_7;
  v109 = v48 + 20;
  v110 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a2 + 32) < v109)
  {
    v111 = 2 * v109;
    *(_QWORD *)(a2 + 32) = 2 * v109;
    if (sqlite3_initialize())
      return 7;
    v114 = sub_1ACB6BB48(v110, v111);
    if (!v114)
      return 7;
    v110 = v114;
    *(_QWORD *)(a2 + 24) = v114;
  }
  v115 = v110 + v48;
  *(_QWORD *)v115 = 0;
  *(_QWORD *)(v115 + 8) = 0;
  *(_DWORD *)(v115 + 16) = 0;
  *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a2 + 80) = v48;
LABEL_178:
  result = 100;
  *(_DWORD *)(v4 + 12) = v8;
  return result;
}

uint64_t sub_1ACC546D8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((*(_QWORD *)(a1 + 112) == 0) != (*(_QWORD *)(a2 + 112) == 0))
    return (*(_QWORD *)(a1 + 112) == 0) - (*(_QWORD *)(a2 + 112) == 0);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a2 + 128);
  if (v3 == v4)
    return (*(_DWORD *)a2 - *(_DWORD *)a1);
  if (v3 < v4)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1ACC54730(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  if ((*(_QWORD *)(a1 + 112) == 0) != (*(_QWORD *)(a2 + 112) == 0))
    return (*(_QWORD *)(a1 + 112) == 0) - (*(_QWORD *)(a2 + 112) == 0);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a2 + 128);
  if (v3 == v4)
    return (*(_DWORD *)a2 - *(_DWORD *)a1);
  if (v3 > v4)
    return 1;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1ACC54788(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  BOOL v5;
  int v6;
  char v7;

  if (*(_BYTE *)(a1 + 463) && *(_QWORD *)(a2 + 64))
  {
    *(_QWORD *)(a2 + 128) = 0;
    *(_DWORD *)(a2 + 120) = 0;
    sub_1ACC54A40(0, *(char **)(a2 + 96), *(_DWORD *)(a2 + 104), (char **)(a2 + 112), (_QWORD *)(a2 + 128), (int *)(a2 + 120), &v7);
    return 0;
  }
  else
  {
    if (*(_QWORD *)(a2 + 56))
    {
      v4 = *(_QWORD *)(a2 + 96) + 10;
      while (v4 - *(_QWORD *)(a2 + 40) > *(int *)(a2 + 52))
      {
        result = sub_1ACC53C60(a2);
        if (*(_QWORD *)(a2 + 56))
          v5 = (_DWORD)result == 0;
        else
          v5 = 0;
        if (!v5)
        {
          if ((_DWORD)result)
            return result;
          break;
        }
      }
    }
    v6 = sub_1ACC53378(*(char **)(a2 + 96), (unint64_t *)(a2 + 128));
    result = 0;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 96) + v6;
  }
  return result;
}

uint64_t sub_1ACC5484C(uint64_t a1, uint64_t a2, char **a3, _DWORD *a4)
{
  char *v8;
  uint64_t result;
  char *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;

  v8 = *(char **)(a2 + 112);
  v24 = v8;
  if (*(_BYTE *)(a1 + 463) && *(_QWORD *)(a2 + 64))
  {
    LOBYTE(v23) = 0;
    if (a3)
    {
      *a3 = v8;
      *a4 = *(_DWORD *)(a2 + 120) - 1;
    }
    sub_1ACC54A40(0, *(char **)(a2 + 96), *(_DWORD *)(a2 + 104), &v24, (_QWORD *)(a2 + 128), (int *)(a2 + 120), &v23);
    result = 0;
    if ((_BYTE)v23)
      v10 = 0;
    else
      v10 = v24;
    *(_QWORD *)(a2 + 112) = v10;
  }
  else
  {
    v11 = 0;
    v12 = *(_QWORD *)(a2 + 96);
    v13 = *(int *)(a2 + 104);
    while (1)
    {
      v14 = *v8;
      if (v14 | v11)
      {
        do
        {
          v11 = v14 & 0x80;
          v15 = *++v8;
          LOBYTE(v14) = v15;
        }
        while (v15 | v11);
      }
      if (!*(_QWORD *)(a2 + 56) || (unint64_t)v8 < *(_QWORD *)(a2 + 40) + *(int *)(a2 + 52))
        break;
      result = sub_1ACC53C60(a2);
      if ((_DWORD)result)
        return result;
    }
    v16 = v8 + 1;
    v24 = v8 + 1;
    if (a3)
    {
      *a3 = *(char **)(a2 + 112);
      *a4 = ~*(_DWORD *)(a2 + 112) + (_DWORD)v16;
    }
    if ((unint64_t)v16 >= v12 + v13)
    {
LABEL_22:
      result = 0;
      *(_QWORD *)(a2 + 112) = 0;
    }
    else
    {
      v17 = v12 + v13 - (_QWORD)v16;
      v18 = -11 - (_QWORD)v8;
      while (!*v16)
      {
        ++v16;
        --v18;
        if (!--v17)
          goto LABEL_22;
      }
      v24 = v16;
      if (*(_QWORD *)(a2 + 56))
      {
        v19 = -v18;
        while (v19 - *(_QWORD *)(a2 + 40) > *(int *)(a2 + 52))
        {
          result = sub_1ACC53C60(a2);
          if (*(_QWORD *)(a2 + 56))
            v20 = (_DWORD)result == 0;
          else
            v20 = 0;
          if (!v20)
          {
            if ((_DWORD)result)
              return result;
            break;
          }
        }
      }
      v23 = 0;
      v21 = sub_1ACC53378(v16, (unint64_t *)&v23);
      result = 0;
      *(_QWORD *)(a2 + 112) = &v16[v21];
      if (*(_BYTE *)(a1 + 463))
        v22 = -v23;
      else
        v22 = v23;
      *(_QWORD *)(a2 + 128) += v22;
    }
  }
  return result;
}

uint64_t sub_1ACC54A40(uint64_t result, char *a2, int a3, char **a4, _QWORD *a5, int *a6, _BYTE *a7)
{
  char *v10;
  int v11;
  char *v12;
  char *i;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  int v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  char *v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  int v31;
  int v32;
  int v33;
  uint64_t v34;

  v10 = a2;
  v11 = result;
  v12 = *a4;
  if (*a4)
  {
    for (i = v12 - 2; i >= a2; --i)
    {
      if ((*i & 0x80000000) == 0)
        break;
    }
    v34 = 0;
    v15 = (unint64_t)(i + 1);
    result = sub_1ACC53378(i + 1, (unint64_t *)&v34);
    v16 = v34;
    if (!v11)
      v16 = -v34;
    *a5 += v16;
    if ((char *)v15 == v10)
    {
      *a7 = 1;
    }
    else
    {
      v17 = i - 1;
      while (v17 > v10)
      {
        v19 = *v17--;
        v18 = v19;
        if (v19)
        {
          if (v17 <= v10)
            goto LABEL_12;
          while (1)
          {
            v31 = (char)v18;
            v18 = *v17;
            if (!(v18 & 0x80 | v31))
              goto LABEL_31;
            if (--v17 <= v10)
            {
              v17 = v10;
              if (v18)
                goto LABEL_32;
              goto LABEL_30;
            }
          }
        }
      }
      v18 = 0;
LABEL_12:
      if (v18)
        goto LABEL_32;
LABEL_30:
      if (v15 > (unint64_t)(v17 + 2))
LABEL_31:
        v17 += 2;
LABEL_32:
      v32 = (_DWORD)i - (_DWORD)v17 + 1;
      v10 = v17;
      do
      {
        v33 = *v10++;
        --v32;
      }
      while (v33 < 0);
      *a6 = v32;
    }
    *a4 = v10;
  }
  else
  {
    v20 = (unint64_t)&a2[a3];
    if (a3 < 1)
    {
      v24 = 0;
      v21 = 0;
    }
    else
    {
      v21 = 0;
      v22 = 1;
      if ((_DWORD)result)
        v23 = -1;
      else
        v23 = 1;
LABEL_18:
      v34 = 0;
      result = sub_1ACC53378(v10, (unint64_t *)&v34);
      v24 = &v10[(int)result];
      v25 = *v24;
      v26 = v24;
      if (*v24)
      {
        v26 = &v10[(int)result];
        do
        {
          v27 = v25 & 0xFFFFFF80;
          v28 = *++v26;
          v25 = v28;
        }
        while (v27 | v28);
      }
      v21 += v34 * v22;
      v29 = (unsigned __int8 *)(v26 + 1);
      while ((unint64_t)v29 < v20)
      {
        if (*v29++)
        {
          v10 = (char *)(v29 - 1);
          v22 = v23;
          goto LABEL_18;
        }
      }
    }
    *a6 = v20 - (_DWORD)v24;
    *a4 = v24;
    *a5 = v21;
  }
  return result;
}

uint64_t sub_1ACC54C18(int a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  uint64_t (**v14)(uint64_t);

  if (sqlite3_initialize())
    return 7;
  v7 = sub_1ACB5D828(136);
  if (!v7)
    return 7;
  v8 = v7;
  *(_QWORD *)(v7 + 128) = 0;
  *(_OWORD *)(v7 + 96) = 0u;
  *(_OWORD *)(v7 + 112) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_OWORD *)(v7 + 80) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)(v7 + 16) = 0u;
  if (a1 <= 1)
  {
    v11 = 0;
    *(_QWORD *)(v7 + 9) = -1;
    *(_QWORD *)(v7 + 17) = -1;
    *(_QWORD *)(v7 + 25) = -1;
    *(_QWORD *)(v7 + 33) = -1;
    *(_QWORD *)(v7 + 41) = -1;
    *(_QWORD *)(v7 + 49) = 0xFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v7 + 57) = 0;
    *(_QWORD *)(v7 + 65) = -256;
    *(_QWORD *)(v7 + 73) = 0;
    *(_QWORD *)(v7 + 81) = 0;
    *(_QWORD *)(v7 + 89) = 0;
    *(_QWORD *)(v7 + 97) = -65536;
    *(_QWORD *)(v7 + 105) = 0;
    *(_QWORD *)(v7 + 113) = 0;
    do
    {
      v13 = (v11 + 55) < 0xFFFFFFF6 && (((_DWORD)v11 + 113) & 0x7FFFFFDFu) - 91 < 0xFFFFFFE6;
      *(_BYTE *)(v7 + 121 + v11++) = v13 << 31 >> 31;
    }
    while (v11 != 15);
    goto LABEL_18;
  }
  v9 = strlen(*(const char **)(a2 + 8));
  if (v9 < 1)
  {
LABEL_18:
    result = 0;
    *a3 = v8;
    return result;
  }
  v10 = 0;
  while ((*(char *)(*(_QWORD *)(a2 + 8) + v10) & 0x80000000) == 0)
  {
    *(_BYTE *)(v8 + *(unsigned __int8 *)(*(_QWORD *)(a2 + 8) + v10++) + 8) = 1;
    if (v9 == v10)
      goto LABEL_18;
  }
  v14 = &off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = xmmword_1ECD3E930;
    if (!(_QWORD)xmmword_1ECD3E930)
      return 1;
    v14 = &xmmword_1ECD3B1D0;
  }
  (*v14)(v8);
  return 1;
}

uint64_t sub_1ACC54DE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACC54E90(uint64_t a1, const char *a2, int a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (sqlite3_initialize())
    return 7;
  v8 = sub_1ACB5D828(48);
  if (!v8)
    return 7;
  v9 = v8;
  *(_QWORD *)(v8 + 8) = a2;
  if (a2)
  {
    if (a3 < 0)
      a3 = strlen(a2);
  }
  else
  {
    a3 = 0;
  }
  result = 0;
  *(_DWORD *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 40) = 0;
  *a4 = v9;
  return result;
}

uint64_t sub_1ACC54F14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(uint64_t);

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_13:
    (*v4)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1ACC55034(uint64_t *a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  int v6;
  int v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  char *v22;
  unsigned __int8 v23;
  int v24;
  uint64_t result;
  uint64_t v26;
  uint64_t i;
  int v28;
  int v29;
  uint64_t v30;

  v6 = *((_DWORD *)a1 + 4);
  v7 = *((_DWORD *)a1 + 5);
  if (v7 >= v6)
    return 101;
  v14 = *a1;
  v15 = a1[1];
  v16 = v15 + 1;
  while (1)
  {
    v19 = v7;
    if ((*(char *)(v15 + v7) & 0x80000000) == 0)
    {
      v20 = *(unsigned __int8 *)(v15 + v7);
      while (*(_BYTE *)(v14 + v20 + 8))
      {
        v17 = v7 + 1;
        *((_DWORD *)a1 + 5) = v7 + 1;
        if (v6 - 1 == v7)
          goto LABEL_5;
        v21 = *(char *)(v16 + v19);
        v20 = *(unsigned __int8 *)(v16 + v19++);
        ++v7;
        if (v21 < 0)
        {
          if (v17 >= v6)
            goto LABEL_4;
          goto LABEL_14;
        }
      }
    }
    v17 = v7;
    if (v7 < v6)
    {
LABEL_14:
      v22 = (char *)(v15 + v17);
      while (1)
      {
        v24 = *v22++;
        v23 = v24;
        if ((v24 & 0x80000000) == 0)
        {
          if (*(_BYTE *)(v14 + v23 + 8))
            break;
        }
        *((_DWORD *)a1 + 5) = ++v17;
        if (v6 == v17)
        {
          v17 = v6;
          break;
        }
      }
    }
LABEL_4:
    v18 = (v17 - v19);
    if (v17 > (int)v19)
      break;
LABEL_5:
    v6 = *((_DWORD *)a1 + 4);
    v7 = *((_DWORD *)a1 + 5);
    if (v7 >= v6)
      return 101;
  }
  if ((int)v18 > *((_DWORD *)a1 + 10))
  {
    *((_DWORD *)a1 + 10) = v18 + 20;
    v30 = a1[4];
    if (sqlite3_initialize())
      return 7;
    v26 = sub_1ACB6BB48(v30, (int)v18 + 20);
    if (!v26)
      return 7;
    a1[4] = v26;
  }
  if ((int)v18 >= 1)
  {
    for (i = 0; i != v18; ++i)
    {
      v28 = *(unsigned __int8 *)(v15 + (int)v19 + i);
      if ((v28 - 65) < 0x1A)
        LOBYTE(v28) = v28 + 32;
      *(_BYTE *)(a1[4] + i) = v28;
    }
  }
  result = 0;
  *a2 = a1[4];
  *a3 = v18;
  *a4 = v19;
  *a5 = *((_DWORD *)a1 + 5);
  v29 = *((_DWORD *)a1 + 6);
  *((_DWORD *)a1 + 6) = v29 + 1;
  *a6 = v29;
  return result;
}

uint64_t sub_1ACC551F8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;

  if (sqlite3_initialize())
    return 7;
  v5 = sub_1ACB5D828(8);
  if (!v5)
    return 7;
  v6 = (_QWORD *)v5;
  result = 0;
  *v6 = 0;
  *a3 = v6;
  return result;
}

uint64_t sub_1ACC55240(uint64_t a1)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (a1)
  {
    v1 = a1;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v2)(v1);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACC552EC(uint64_t a1, const char *a2, int a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  if (sqlite3_initialize())
    return 7;
  v8 = sub_1ACB5D828(48);
  if (!v8)
    return 7;
  v9 = v8;
  *(_QWORD *)(v8 + 8) = a2;
  if (a2)
  {
    if (a3 < 0)
      a3 = strlen(a2);
  }
  else
  {
    a3 = 0;
  }
  result = 0;
  *(_DWORD *)(v9 + 20) = 0;
  *(_DWORD *)(v9 + 24) = 0;
  *(_DWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 32) = 0;
  *(_DWORD *)(v9 + 40) = 0;
  *a4 = v9;
  return result;
}

uint64_t sub_1ACC55370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);
  uint64_t (**v4)(uint64_t);

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v3 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v2);
      goto LABEL_8;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v2);
    v2 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = &xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
LABEL_8:
  v4 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_13:
    (*v4)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v4 = &xmmword_1ECD3B1D0;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1ACC55490(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  int v6;
  int v7;
  _DWORD *v8;
  _DWORD *v9;
  _DWORD *v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char v20;
  char *v21;
  int v22;
  int v23;
  BOOL v24;
  int v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v32;
  unsigned __int8 *v33;
  int v34;
  _BYTE *v35;
  uint64_t v36;
  char v37;
  int v38;
  unsigned int v39;
  char v40;
  int v41;
  unsigned int v42;
  unint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  _BYTE *v51;
  uint64_t v52;
  char v53;
  int v54;
  unsigned int v55;
  char v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char *v64;
  int v65;
  char *v66;
  int v67;
  char *v68;
  int v69;
  char *v70;
  char *v71;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char *v79;
  uint64_t v80;
  int v82;
  _OWORD *v83;
  __int128 *v84;
  unint64_t v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  unint64_t v90;
  __int128 v91;
  char *v92;
  unsigned __int8 *v94;
  char v95;
  char *v96;
  unsigned int v98;
  int v99;
  int v100;
  char *v101;
  int v103;
  char *v104;
  char v105;
  char *v106;
  uint64_t v107;
  int v109;
  signed __int8 v110;
  char *v111;
  uint64_t v112;
  int v114;
  signed __int8 v115;
  char *v116;
  uint64_t v117;
  int v119;
  signed __int8 v120;
  char *v121;
  uint64_t v122;
  int v124;
  char v125;
  char *v126;
  uint64_t v127;
  int v129;
  signed __int8 v130;
  char *v131;
  uint64_t v132;
  int v134;
  char *v135;
  char v136;
  char *v137;
  uint64_t v138;
  int v140;
  signed __int8 v141;
  char *v142;
  uint64_t v143;
  int v145;
  signed __int8 v146;
  uint64_t v147;
  int v149;
  signed __int8 v150;
  char *v151;
  uint64_t v152;
  int v154;
  char *v155;
  char v156;
  char *v157;
  uint64_t v158;
  int v160;
  signed __int8 v161;
  char *v162;
  uint64_t v163;
  int v165;
  signed __int8 v166;
  char *v167;
  uint64_t v168;
  int v170;
  signed __int8 v171;
  char *v172;
  uint64_t v173;
  int v175;
  signed __int8 v176;
  char *v177;
  uint64_t v178;
  int v180;
  signed __int8 v181;
  char *v182;
  uint64_t v183;
  int v185;
  signed __int8 v186;
  char *v187;
  uint64_t v188;
  int v190;
  signed __int8 v191;
  char *v192;
  uint64_t v193;
  int v195;
  char *v196;
  int v197;
  char v198;
  char *v199;
  uint64_t v200;
  int v202;
  signed __int8 v203;
  char *v204;
  uint64_t v205;
  int v207;
  signed __int8 v208;
  uint64_t v209;
  int v211;
  int v212;
  char v213;
  uint64_t v214;
  int v216;
  signed __int8 v217;
  char *v218;
  uint64_t v219;
  int v221;
  signed __int8 v222;
  char *v223;
  uint64_t v224;
  int v226;
  signed __int8 v227;
  char *v228;
  uint64_t v229;
  int v231;
  char *v232;
  __int16 v234;
  char *v235;
  char *v237;
  char *v239;
  char *v241;
  char v243;
  char *v244;
  char *v246;
  char *v248;
  char *v250;
  int v251;
  char v252;
  char *v253;
  uint64_t v254;
  int v256;
  char v257;
  char *v258;
  uint64_t v259;
  int v261;
  char v262;
  char *v263;
  uint64_t v264;
  int v266;
  char *v267;
  char *v269;
  char *v271;
  int v274;
  int v275;
  char *v276;
  int v277;
  int v278;
  int v279;
  int v280;
  char v281;
  char *v282;
  unsigned __int8 *v283;
  int v284;
  int v285;
  int v286;
  char *v287;
  char *v289;
  char *v291;
  char *v293;
  char *v295;
  char *v297;
  char *v299;
  __int16 v301;
  char *v302;
  char *v304;
  char *v306;
  char *v308;
  char *v310;
  char *v312;
  char *v314;
  char *v316;
  char *v318;
  char *v320;
  _DWORD *v321;
  char *v322;
  unsigned __int8 *v323;
  unsigned __int8 *v324;
  uint64_t v326;
  _BYTE v327[22];
  _BYTE v328[6];
  uint64_t v329;

  v329 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  if (v7 >= v6)
    return 101;
  v8 = a6;
  v9 = a5;
  v10 = a4;
  v11 = a3;
  v12 = a2;
  v14 = *(_QWORD *)(a1 + 8);
  v15 = v14 + 1;
  while (1)
  {
    v18 = v7;
    v19 = *(char *)(v14 + v7);
    if ((v19 & 0x80) == 0)
    {
      v20 = *(_BYTE *)(v14 + v7);
      while (v20 < 48 || !byte_1ACCBB3F4[v19 - 48])
      {
        v16 = v7 + 1;
        *(_DWORD *)(a1 + 20) = v7 + 1;
        if (v6 - 1 == v7)
          goto LABEL_5;
        v19 = *(char *)(v15 + v18);
        v20 = *(_BYTE *)(v15 + v18++);
        ++v7;
        if ((v19 & 0x80) != 0)
        {
          if (v16 >= v6)
            goto LABEL_4;
          goto LABEL_15;
        }
      }
    }
    v16 = v7;
    if (v7 < v6)
    {
LABEL_15:
      v21 = (char *)(v14 + v16);
      while (1)
      {
        v23 = *v21++;
        v22 = v23;
        if ((v23 & 0x80) == 0)
        {
          v24 = __OFSUB__(v22, 48);
          v25 = v22 - 48;
          if (v25 < 0 != v24 || !byte_1ACCBB3F4[v25])
            break;
        }
        *(_DWORD *)(a1 + 20) = ++v16;
        if (v6 == v16)
        {
          v16 = v6;
          break;
        }
      }
    }
LABEL_4:
    v17 = (v16 - v18);
    if (v16 > (int)v18)
      break;
LABEL_5:
    v6 = *(_DWORD *)(a1 + 16);
    v7 = *(_DWORD *)(a1 + 20);
    if (v7 >= v6)
      return 101;
  }
  v27 = *(_QWORD *)(a1 + 32);
  if ((int)v17 > *(_DWORD *)(a1 + 40))
  {
    *(_DWORD *)(a1 + 40) = v17 + 20;
    if (sqlite3_initialize())
      return 7;
    v32 = sub_1ACB6BB48(v27, (int)v17 + 20);
    if (!v32)
      return 7;
    v27 = v32;
    *(_QWORD *)(a1 + 32) = v32;
    v8 = a6;
    v9 = a5;
    v10 = a4;
    v12 = a2;
    v11 = a3;
  }
  v33 = (unsigned __int8 *)(v14 + (int)v18);
  if ((v17 - 21) < 0xFFFFFFEE)
  {
    if ((int)v17 < 1)
    {
      LODWORD(v43) = 0;
    }
    else
    {
      v34 = 0;
      v35 = (_BYTE *)v27;
      v36 = v17;
      do
      {
        v38 = *v33++;
        v37 = v38;
        v39 = v38 - 65;
        v40 = v38 + 32;
        if ((v38 - 48) < 0xA)
          v41 = 1;
        else
          v41 = v34;
        if (v39 >= 0x1A)
          v34 = v41;
        else
          v37 = v40;
        *v35++ = v37;
        --v36;
      }
      while (v36);
      if (v34)
      {
        v42 = 3;
        LODWORD(v43) = v17;
        goto LABEL_80;
      }
      LODWORD(v43) = v17;
    }
    v42 = 10;
LABEL_80:
    if ((int)v17 <= (int)(2 * v42))
      goto LABEL_111;
    v73 = v42;
    v74 = (int)(v17 - v42);
    if ((int)v17 <= v74 + 1)
      v75 = v74 + 1;
    else
      v75 = (int)v17;
    v76 = v75 - v74;
    if ((unint64_t)(v75 - v74) >= 0x20)
    {
      v77 = v27 + v74;
      if (v73 - v74 >= 0x20)
      {
        v74 += v76 & 0xFFFFFFFFFFFFFFE0;
        v43 = v76 & 0xFFFFFFFFFFFFFFE0 | v73;
        v83 = (_OWORD *)(v73 + v27 + 16);
        v84 = (__int128 *)(v77 + 16);
        v85 = v76 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v86 = *v84;
          *(v83 - 1) = *(v84 - 1);
          *v83 = v86;
          v83 += 2;
          v84 += 2;
          v85 -= 32;
        }
        while (v85);
        if (v76 == (v76 & 0xFFFFFFFFFFFFFFE0))
          goto LABEL_111;
      }
      else
      {
        v43 = v73;
      }
    }
    else
    {
      v43 = v73;
    }
    do
      *(_BYTE *)(v27 + v43++) = *(_BYTE *)(v27 + v74++);
    while (v74 < (int)v17);
    goto LABEL_111;
  }
  v44 = v328;
  v45 = 0x1700000000;
  v46 = (unsigned __int8 *)(v14 + (int)v18);
  v47 = v17;
  while (1)
  {
    v49 = *v46++;
    v48 = v49;
    if ((v49 - 65) > 0x19)
      break;
    LOBYTE(v48) = v48 + 32;
LABEL_41:
    *v44-- = v48;
    v45 -= 0x100000000;
    if (!--v47)
    {
      v328[5] = 0;
      *(_DWORD *)&v328[1] = 0;
      v63 = v45 >> 32;
      v64 = &v327[v45 >> 32];
      v65 = *v64;
      v326 = v27;
      v321 = v8;
      if (v65 == 115)
      {
        v66 = v64 + 1;
        v65 = v64[1];
        if (v65 == 115)
        {
          *(_WORD *)v64 = 29555;
          v69 = 115;
          v68 = v64;
          goto LABEL_151;
        }
        if (v65 == 101)
        {
          v68 = v64 + 2;
          v67 = v64[2];
          if (v67 == 105)
          {
LABEL_148:
            v69 = 105;
            goto LABEL_149;
          }
          if (v67 == 115 && v64[3] == 115)
          {
            *(_WORD *)&v327[v63 + 2] = 29555;
            v68 = &v327[v63 + 2];
            v69 = 115;
LABEL_151:
            v103 = v68[1];
            switch(v68[1])
            {
              case 'a':
                v104 = v68 + 7;
                if (v103 == 97 && v69 == 108)
                {
                  if (v68[2] == 110 && v68[3] == 111 && v68[4] == 105 && v68[5] == 116 && v68[6] == 97)
                  {
                    v322 = v68 + 4;
                    v105 = *v104;
                    if (!*v104)
                      goto LABEL_385;
                    v106 = v68 + 8;
                    while (1)
                    {
                      v107 = v105 - 97;
                      if (!(v107 == 24 ? sub_1ACC573FC(v106) : 1 - byte_1ACCBB444[v107]))
                        break;
                      v109 = *v106++;
                      v105 = v109;
                      if (!v109)
                        goto LABEL_385;
                    }
                    v308 = v106 - 1;
                    while (sub_1ACC573FC(v308++))
                      ;
                    if (*(v308 - 1))
                    {
                      *(_WORD *)(v68 + 5) = 24948;
                      goto LABEL_496;
                    }
                    goto LABEL_385;
                  }
                }
                else
                {
                  if (v69 != 108)
                    goto LABEL_368;
                  if (v103 != 97)
                    goto LABEL_385;
                }
                if (v68[2] != 110)
                  goto LABEL_385;
                if (v68[3] != 111)
                  goto LABEL_385;
                if (v68[4] != 105)
                  goto LABEL_385;
                if (v68[5] != 116)
                  goto LABEL_385;
                v146 = v68[6];
                if (!v146)
                  goto LABEL_385;
                while (1)
                {
                  v147 = v146 - 97;
                  if (!(v147 == 24 ? sub_1ACC573FC(v104) : 1 - byte_1ACCBB444[v147]))
                    break;
                  v149 = *v104++;
                  v146 = v149;
                  if (!v149)
                    goto LABEL_385;
                }
                v293 = v104 - 1;
                while (sub_1ACC573FC(v293++))
                  ;
                if (!*(v293 - 1))
                  goto LABEL_385;
                *(_DWORD *)(v68 + 2) = 1953066862;
                v68 += 2;
                goto LABEL_549;
              case 'c':
                if (v103 == 99 && v69 == 105)
                {
                  if (v68[2] == 110 && v68[3] == 101)
                  {
                    v110 = v68[4];
                    if (!v110)
                      goto LABEL_372;
                    v111 = v68 + 5;
                    while (1)
                    {
                      v112 = v110 - 97;
                      if (!(v112 == 24 ? sub_1ACC573FC(v111) : 1 - byte_1ACCBB444[v112]))
                        break;
                      v114 = *v111++;
                      v110 = v114;
                      if (!v114)
                        goto LABEL_372;
                    }
                    v241 = v111 - 1;
                    while (sub_1ACC573FC(v241++))
                      ;
                    if (*(v241 - 1))
                    {
                      v243 = 101;
LABEL_494:
                      v68[3] = v243;
                      v234 = 28259;
                      goto LABEL_495;
                    }
                    goto LABEL_372;
                  }
                }
                else
                {
                  if (v69 != 105)
                    goto LABEL_368;
                  if (v103 != 99)
                  {
LABEL_372:
                    if (v68[1] == 116 && v68[2] == 105 && v68[3] == 99 && v68[4] == 105)
                    {
                      v191 = v68[5];
                      if (v191)
                      {
                        v192 = v68 + 6;
                        while (1)
                        {
                          v193 = v191 - 97;
                          if (!(v193 == 24 ? sub_1ACC573FC(v192) : 1 - byte_1ACCBB444[v193]))
                            break;
                          v195 = *v192++;
                          v191 = v195;
                          if (!v195)
                            goto LABEL_549;
                        }
                        v235 = v192 - 1;
                        while (sub_1ACC573FC(v235++))
                          ;
                        if (*(v235 - 1))
                        {
                          *(_WORD *)(v68 + 3) = 26979;
                          v68 += 3;
                        }
                      }
                    }
                    goto LABEL_549;
                  }
                }
                if (v68[2] == 110 && v68[3] == 97)
                {
                  v150 = v68[4];
                  if (v150)
                  {
                    v151 = v68 + 5;
                    while (1)
                    {
                      v152 = v150 - 97;
                      if (!(v152 == 24 ? sub_1ACC573FC(v151) : 1 - byte_1ACCBB444[v152]))
                        break;
                      v154 = *v151++;
                      v150 = v154;
                      if (!v154)
                        goto LABEL_372;
                    }
                    v248 = v151 - 1;
                    while (sub_1ACC573FC(v248++))
                      ;
                    if (*(v248 - 1))
                    {
                      v243 = 97;
                      goto LABEL_494;
                    }
                  }
                }
                goto LABEL_372;
              case 'e':
                if (v103 != 101 || v69 != 114)
                  goto LABEL_368;
                if (v68[2] != 122)
                  goto LABEL_549;
                if (v68[3] != 105)
                  goto LABEL_549;
                v115 = v68[4];
                if (!v115)
                  goto LABEL_549;
                v322 = v68 + 1;
                v116 = v68 + 5;
                while (1)
                {
                  v117 = v115 - 97;
                  if (!(v117 == 24 ? sub_1ACC573FC(v116) : 1 - byte_1ACCBB444[v117]))
                    break;
                  v119 = *v116++;
                  v115 = v119;
                  if (!v119)
                    goto LABEL_549;
                }
                v244 = v116 - 1;
                while (sub_1ACC573FC(v244++))
                  ;
                if (!*(v244 - 1))
                  goto LABEL_549;
                *((_WORD *)v68 + 1) = 27002;
LABEL_496:
                v68 = v322;
                *v322 = 101;
LABEL_497:
                v250 = v68 + 5;
                v251 = v68[1];
                if (v251 == 118)
                {
                  if (v68[2] == 105 && v68[3] == 116 && v68[4] == 97)
                  {
                    v257 = *v250;
                    if (*v250)
                    {
                      v258 = v68 + 6;
                      while (1)
                      {
                        v259 = v257 - 97;
                        if (!(v259 == 24 ? sub_1ACC573FC(v258) : 1 - byte_1ACCBB444[v259]))
                          break;
                        v261 = *v258++;
                        v257 = v261;
                        if (!v261)
                          goto LABEL_549;
                      }
                      v304 = v258 - 1;
                      while (sub_1ACC573FC(v304++))
                        ;
                      if (*(v304 - 1))
                        v68 += 5;
                    }
                    goto LABEL_549;
                  }
                }
                else if (v251 == 116 && v68[2] == 97 && v68[3] == 99 && v68[4] == 105)
                {
                  v324 = (unsigned __int8 *)(v68 + 3);
                  v252 = *v250;
                  if (!*v250)
                    goto LABEL_549;
                  v253 = v68 + 6;
                  while (1)
                  {
                    v254 = v252 - 97;
                    if (!(v254 == 24 ? sub_1ACC573FC(v253) : 1 - byte_1ACCBB444[v254]))
                      break;
                    v256 = *v253++;
                    v252 = v256;
                    if (!v256)
                      goto LABEL_549;
                  }
                  v302 = v253 - 1;
                  while (sub_1ACC573FC(v302++))
                    ;
                  if (!*(v302 - 1))
                    goto LABEL_549;
                  v301 = 26979;
LABEL_654:
                  *(_WORD *)(v68 + 3) = v301;
                  v68 = (char *)v324;
                  goto LABEL_549;
                }
                if (v68[1] != 122)
                  goto LABEL_549;
                if (v68[2] != 105)
                  goto LABEL_549;
                if (v68[3] != 108)
                  goto LABEL_549;
                if (v68[4] != 97)
                  goto LABEL_549;
                v262 = *v250;
                if (!*v250)
                  goto LABEL_549;
                v324 = (unsigned __int8 *)(v68 + 3);
                v263 = v68 + 6;
                while (1)
                {
                  v264 = v262 - 97;
                  if (!(v264 == 24 ? sub_1ACC573FC(v263) : 1 - byte_1ACCBB444[v264]))
                    break;
                  v266 = *v263++;
                  v262 = v266;
                  if (!v266)
                    goto LABEL_549;
                }
                v299 = v263 - 1;
                while (sub_1ACC573FC(v299++))
                  ;
                if (!*(v299 - 1))
                  goto LABEL_549;
                v301 = 24940;
                goto LABEL_654;
              case 'g':
                if (v103 != 103 || v69 != 105)
                  goto LABEL_368;
                if (v68[2] != 111)
                  goto LABEL_372;
                if (v68[3] != 108)
                  goto LABEL_372;
                v120 = v68[4];
                if (!v120)
                  goto LABEL_372;
                v121 = v68 + 5;
                while (1)
                {
                  v122 = v120 - 97;
                  if (!(v122 == 24 ? sub_1ACC573FC(v121) : 1 - byte_1ACCBB444[v122]))
                    break;
                  v124 = *v121++;
                  v120 = v124;
                  if (!v124)
                    goto LABEL_372;
                }
                v246 = v121 - 1;
                while (sub_1ACC573FC(v246++))
                  ;
                if (!*(v246 - 1))
                  goto LABEL_372;
                v68[3] = 108;
                *(_WORD *)++v68 = 28519;
                goto LABEL_549;
              case 'l':
                v320 = v68 + 3;
                if (v103 == 108 && v69 == 105)
                {
                  if (v68[2] == 98)
                  {
                    v125 = *v320;
                    if (!*v320)
                      goto LABEL_372;
                    v126 = v68 + 4;
                    while (1)
                    {
                      v127 = v125 - 97;
                      if (!(v127 == 24 ? sub_1ACC573FC(v126) : 1 - byte_1ACCBB444[v127]))
                        break;
                      v129 = *v126++;
                      v125 = v129;
                      if (!v129)
                        goto LABEL_372;
                    }
                    v232 = v126 - 1;
                    while (sub_1ACC573FC(v232++))
                      ;
                    if (*(v232 - 1))
                    {
                      v234 = 25196;
LABEL_495:
                      *(_WORD *)(v68 + 1) = v234;
                      v322 = v68;
                      goto LABEL_496;
                    }
                    goto LABEL_372;
                  }
                }
                else
                {
                  if (v69 != 105)
                    goto LABEL_368;
                  if (v103 != 108)
                    goto LABEL_372;
                }
                v155 = v68 + 4;
                v322 = v68 + 2;
                if (v68[2] == 108 && *v320 == 97)
                {
                  v156 = *v155;
                  if (!*v155)
                    goto LABEL_372;
                  v157 = v68 + 5;
                  while (1)
                  {
                    v158 = v156 - 97;
                    if (!(v158 == 24 ? sub_1ACC573FC(v157) : 1 - byte_1ACCBB444[v158]))
                      break;
                    v160 = *v157++;
                    v156 = v160;
                    if (!v160)
                      goto LABEL_372;
                  }
                  v267 = v157 - 1;
                  while (sub_1ACC573FC(v267++))
                    ;
                  if (*(v267 - 1))
                  {
                    *v320 = 97;
                    goto LABEL_633;
                  }
                  goto LABEL_372;
                }
                if (v68[2] == 116 && *v320 == 110 && *v155 == 101)
                {
                  v181 = v68[5];
                  if (!v181)
                    goto LABEL_372;
                  v182 = v68 + 6;
                  while (1)
                  {
                    v183 = v181 - 97;
                    if (!(v183 == 24 ? sub_1ACC573FC(v182) : 1 - byte_1ACCBB444[v183]))
                      break;
                    v185 = *v182++;
                    v181 = v185;
                    if (!v185)
                      goto LABEL_372;
                  }
                  v295 = v182 - 1;
                  while (sub_1ACC573FC(v295++))
                    ;
                  if (*(v295 - 1))
                  {
                    *v155 = 101;
                    *v320 = 110;
                    v68 += 2;
                    *v322 = 116;
                    goto LABEL_549;
                  }
                  goto LABEL_372;
                }
                v212 = v68[2];
                if (v212 != 115)
                {
                  if (v212 == 101)
                  {
                    v213 = *v320;
                    if (*v320)
                    {
                      while (1)
                      {
                        v214 = v213 - 97;
                        if (!(v214 == 24 ? sub_1ACC573FC(v155) : 1 - byte_1ACCBB444[v214]))
                          break;
                        v216 = *v155++;
                        v213 = v216;
                        if (!v216)
                          goto LABEL_372;
                      }
                      v269 = v155 - 1;
                      while (sub_1ACC573FC(v269++))
                        ;
                      if (*(v269 - 1))
                        goto LABEL_496;
                    }
                  }
                  goto LABEL_372;
                }
                if (*v320 != 117)
                  goto LABEL_372;
                if (*v155 != 111)
                  goto LABEL_372;
                v227 = v68[5];
                if (!v227)
                  goto LABEL_372;
                v228 = v68 + 6;
                while (1)
                {
                  v229 = v227 - 97;
                  if (!(v229 == 24 ? sub_1ACC573FC(v228) : 1 - byte_1ACCBB444[v229]))
                    break;
                  v231 = *v228++;
                  v227 = v231;
                  if (!v231)
                    goto LABEL_372;
                }
                v306 = v228 - 1;
                while (sub_1ACC573FC(v306++))
                  ;
                if (!*(v306 - 1))
                  goto LABEL_372;
                goto LABEL_663;
              case 'o':
                if (v103 == 111 && v69 == 110)
                {
                  if (v68[2] == 105 && v68[3] == 116 && v68[4] == 97 && v68[5] == 122 && v68[6] == 105)
                  {
                    v322 = v68 + 4;
                    v130 = v68[7];
                    if (!v130)
                      goto LABEL_549;
                    v131 = v68 + 8;
                    while (1)
                    {
                      v132 = v130 - 97;
                      if (!(v132 == 24 ? sub_1ACC573FC(v131) : 1 - byte_1ACCBB444[v132]))
                        break;
                      v134 = *v131++;
                      v130 = v134;
                      if (!v134)
                        goto LABEL_549;
                    }
                    v310 = v131 - 1;
                    while (sub_1ACC573FC(v310++))
                      ;
                    if (*(v310 - 1))
                    {
                      *(_WORD *)(v68 + 5) = 27002;
                      goto LABEL_496;
                    }
LABEL_549:
                    v274 = v68[1];
                    v8 = v321;
                    switch(v68[1])
                    {
                      case 'a':
                        v275 = *v68;
                        if (v275 == 108)
                          goto LABEL_571;
                        goto LABEL_585;
                      case 'b':
                      case 'd':
                      case 'f':
                      case 'g':
                      case 'h':
                      case 'j':
                      case 'k':
                      case 'm':
                      case 'p':
                      case 'q':
                      case 'r':
                      case 'w':
                      case 'x':
                      case 'y':
                        goto LABEL_584;
                      case 'c':
                        if (*v68 != 101)
                          goto LABEL_588;
                        if (v68[2] != 110 || (v68[3] | 4) != 0x65)
                          goto LABEL_584;
                        goto LABEL_565;
                      case 'e':
                        v275 = *v68;
                        if (v275 != 114)
                          goto LABEL_585;
                        goto LABEL_571;
                      case 'i':
                        v275 = *v68;
                        if (v275 != 99)
                          goto LABEL_585;
                        goto LABEL_571;
                      case 'l':
                        if (*v68 != 101)
                          goto LABEL_588;
                        if (v68[2] == 98 && (v68[3] | 8) == 0x69)
                          goto LABEL_565;
                        goto LABEL_584;
                      case 'n':
                        v275 = *v68;
                        if (v275 != 116)
                          goto LABEL_585;
                        v277 = v68[2];
                        if (v277 == 101)
                        {
                          if (v274 != 110)
                            goto LABEL_584;
                          v276 = v68 + 3;
                          if (v68[3] == 109 && v68[4] == 101)
                          {
                            v276 = v68 + 5;
                          }
                          else if (*v276 == 109)
                          {
LABEL_565:
                            v276 = v68 + 4;
                          }
                        }
                        else
                        {
                          if (v277 != 97)
                            goto LABEL_588;
LABEL_581:
                          v276 = v68 + 3;
                        }
                        goto LABEL_582;
                      case 'o':
                        v278 = *v68;
                        if (v278 == 117)
                        {
LABEL_571:
                          v276 = v68 + 2;
                          goto LABEL_582;
                        }
                        v276 = v68 + 3;
                        if (v68[3] - 115 > 1 || v278 != 110 || v274 != 111)
                          goto LABEL_584;
                        goto LABEL_609;
                      case 's':
                        v275 = *v68;
                        if (v275 == 109)
                          goto LABEL_573;
                        goto LABEL_585;
                      case 't':
                        v276 = v68 + 3;
                        v279 = *v68;
                        if (v274 == 116 && v279 == 101)
                        {
                          if (v68[2] != 97)
                            goto LABEL_584;
                        }
                        else
                        {
                          if (v279 != 105 || v274 != 116)
                            goto LABEL_584;
LABEL_609:
                          if (v68[2] != 105)
                            goto LABEL_584;
                        }
LABEL_582:
                        if (sub_1ACC57310(v276))
                          v68 = v276;
LABEL_584:
                        v275 = *v68;
LABEL_585:
                        if (v275 == 101)
                        {
                          if (sub_1ACC57310(v68 + 1)
                            || sub_1ACC57220(v68 + 1)
                            && (!sub_1ACC573FC(v68 + 1)
                             || v68[1] - 119 < 3
                             || !v68[2]
                             || (v68[2] != 121
                               ? (v286 = 1 - byte_1ACCBB444[v68[2] - 97])
                               : (v286 = sub_1ACC573FC(v68 + 3)),
                                 !v286 || !sub_1ACC573FC(v68 + 3))))
                          {
                            ++v68;
                          }
                        }
LABEL_588:
                        if (sub_1ACC57310(v68) && *v68 == 108 && v68[1] == 108)
                          ++v68;
                        v280 = strlen(v68);
                        *v11 = v280;
                        *(_BYTE *)(v326 + v280) = 0;
                        v281 = *v68;
                        if (*v68)
                        {
                          v282 = (char *)(v280 + v326 - 1);
                          v283 = (unsigned __int8 *)(v68 + 1);
                          do
                          {
                            *v282-- = v281;
                            v284 = *v283++;
                            v281 = v284;
                          }
                          while (v284);
                        }
                        break;
                      case 'u':
                        v275 = *v68;
                        if (v275 != 115)
                          goto LABEL_585;
                        if (v68[2] == 111)
                          goto LABEL_581;
                        goto LABEL_584;
                      case 'v':
                      case 'z':
                        if (*v68 != 101)
                          goto LABEL_588;
LABEL_573:
                        if (v68[2] != 105)
                          goto LABEL_584;
                        goto LABEL_581;
                      default:
                        v8 = v321;
                        goto LABEL_584;
                    }
                    goto LABEL_595;
                  }
                }
                else
                {
                  if (v69 != 110)
                  {
                    if (v69 != 114)
                      goto LABEL_368;
                    if (v103 == 111 && v68[2] == 116 && v68[3] == 97)
                    {
                      v322 = v68 + 1;
                      v186 = v68[4];
                      if (v186)
                      {
                        v187 = v68 + 5;
                        while (1)
                        {
                          v188 = v186 - 97;
                          if (!(v188 == 24 ? sub_1ACC573FC(v187) : 1 - byte_1ACCBB444[v188]))
                            break;
                          v190 = *v187++;
                          v186 = v190;
                          if (!v190)
                            goto LABEL_549;
                        }
                        v312 = v187 - 1;
                        while (sub_1ACC573FC(v312++))
                          ;
                        if (*(v312 - 1))
                        {
                          *((_WORD *)v68 + 1) = 24948;
                          goto LABEL_496;
                        }
                      }
                    }
                    goto LABEL_549;
                  }
                  if (v103 != 111)
                    goto LABEL_549;
                }
                if (v68[2] == 105 && v68[3] == 116 && v68[4] == 97)
                {
                  v161 = v68[5];
                  if (v161)
                  {
                    v322 = v68 + 2;
                    v162 = v68 + 6;
                    while (1)
                    {
                      v163 = v161 - 97;
                      if (!(v163 == 24 ? sub_1ACC573FC(v162) : 1 - byte_1ACCBB444[v163]))
                        break;
                      v165 = *v162++;
                      v161 = v165;
                      if (!v165)
                        goto LABEL_549;
                    }
                    v271 = v162 - 1;
                    while (sub_1ACC573FC(v271++))
                      ;
                    if (*(v271 - 1))
                    {
                      *(_WORD *)(v68 + 3) = 24948;
                      goto LABEL_496;
                    }
                  }
                }
                goto LABEL_549;
              case 's':
                v135 = v68 + 5;
                if (v103 != 115 || v69 != 109)
                {
                  if (v69 != 115)
                    goto LABEL_368;
                  if (v103 == 115)
                  {
                    if (v68[2] == 101 && v68[3] == 110 && v68[4] == 101 && *v135 == 118 && v68[6] == 105)
                    {
                      v322 = v68 + 4;
                      v166 = v68[7];
                      if (v166)
                      {
                        v167 = v68 + 8;
                        while (1)
                        {
                          v168 = v166 - 97;
                          if (!(v168 == 24 ? sub_1ACC573FC(v167) : 1 - byte_1ACCBB444[v168]))
                            break;
                          v170 = *v167++;
                          v166 = v170;
                          if (!v170)
                            goto LABEL_397;
                        }
                        v314 = v167 - 1;
                        while (sub_1ACC573FC(v314++))
                          ;
                        if (*(v314 - 1))
                        {
                          *(_WORD *)(v68 + 5) = 26998;
                          goto LABEL_496;
                        }
                      }
                    }
                    else if (v68[2] == 101 && v68[3] == 110 && v68[4] == 108 && *v135 == 117 && v68[6] == 102)
                    {
                      v322 = v68 + 4;
                      v217 = v68[7];
                      if (v217)
                      {
                        v218 = v68 + 8;
                        while (1)
                        {
                          v219 = v217 - 97;
                          if (!(v219 == 24 ? sub_1ACC573FC(v218) : 1 - byte_1ACCBB444[v219]))
                            break;
                          v221 = *v218++;
                          v217 = v221;
                          if (!v221)
                            goto LABEL_397;
                        }
                        v316 = v218 - 1;
                        while (sub_1ACC573FC(v316++))
                          ;
                        if (*(v316 - 1))
                        {
                          *(_WORD *)(v68 + 5) = 26229;
                          goto LABEL_633;
                        }
                      }
                    }
                    else if (v68[2] == 101 && v68[3] == 110 && v68[4] == 115)
                    {
                      v322 = v68 + 4;
                      v320 = v68 + 5;
                      if (*v135 == 117)
                      {
                        v155 = v68 + 6;
                        if (v68[6] == 111)
                        {
                          v222 = v68[7];
                          if (v222)
                          {
                            v223 = v68 + 8;
                            while (1)
                            {
                              v224 = v222 - 97;
                              if (!(v224 == 24 ? sub_1ACC573FC(v223) : 1 - byte_1ACCBB444[v224]))
                                break;
                              v226 = *v223++;
                              v222 = v226;
                              if (!v226)
                                goto LABEL_397;
                            }
                            v318 = v223 - 1;
                            while (sub_1ACC573FC(v318++))
                              ;
                            if (*(v318 - 1))
                            {
LABEL_663:
                              *v155 = 111;
                              *v320 = 117;
                              v68 = v322;
                              *v322 = 115;
                            }
                          }
                        }
                      }
                    }
                  }
LABEL_397:
                  if (v68[1] != 115)
                    goto LABEL_549;
                  if (v68[2] != 101)
                    goto LABEL_549;
                  if (v68[3] != 110)
                    goto LABEL_549;
                  v203 = v68[4];
                  if (!v203)
                    goto LABEL_549;
                  v323 = (unsigned __int8 *)(v68 + 4);
                  v204 = v68 + 5;
                  while (1)
                  {
                    v205 = v203 - 97;
                    if (!(v205 == 24 ? sub_1ACC573FC(v204) : 1 - byte_1ACCBB444[v205]))
                      break;
                    v207 = *v204++;
                    v203 = v207;
                    if (!v207)
                      goto LABEL_549;
                  }
                  v239 = v204 - 1;
                  while (sub_1ACC573FC(v239++))
                    ;
                  goto LABEL_547;
                }
                if (v68[2] == 105 && v68[3] == 108 && v68[4] == 97)
                {
                  v322 = v68 + 3;
                  v136 = *v135;
                  if (*v135)
                  {
                    v137 = v68 + 6;
                    while (1)
                    {
                      v138 = v136 - 97;
                      if (!(v138 == 24 ? sub_1ACC573FC(v137) : 1 - byte_1ACCBB444[v138]))
                        break;
                      v140 = *v137++;
                      v136 = v140;
                      if (!v140)
                        goto LABEL_549;
                    }
                    v289 = v137 - 1;
                    while (sub_1ACC573FC(v289++))
                      ;
                    if (*(v289 - 1))
                      goto LABEL_632;
                  }
                }
                goto LABEL_549;
              case 't':
                if (v103 == 116 && v69 == 105)
                {
                  if (v68[2] == 105)
                  {
                    v322 = v68 + 3;
                    if (v68[3] == 108 && v68[4] == 97)
                    {
                      v141 = v68[5];
                      if (!v141)
                        goto LABEL_372;
                      v142 = v68 + 6;
                      while (1)
                      {
                        v143 = v141 - 97;
                        if (!(v143 == 24 ? sub_1ACC573FC(v142) : 1 - byte_1ACCBB444[v143]))
                          break;
                        v145 = *v142++;
                        v141 = v145;
                        if (!v145)
                          goto LABEL_372;
                      }
                      v291 = v142 - 1;
                      while (sub_1ACC573FC(v291++))
                        ;
                      if (!*(v291 - 1))
                        goto LABEL_372;
LABEL_632:
                      v68[4] = 97;
LABEL_633:
                      v68 = v322;
                      *v322 = 108;
LABEL_385:
                      v196 = v68 + 4;
                      v197 = v68[1];
                      if (v197 == 97)
                      {
                        if (v68[2] == 99 && v68[3] == 105)
                        {
                          v198 = *v196;
                          if (*v196)
                          {
                            v199 = v68 + 5;
                            while (1)
                            {
                              v200 = v198 - 97;
                              if (!(v200 == 24 ? sub_1ACC573FC(v199) : 1 - byte_1ACCBB444[v200]))
                                break;
                              v202 = *v199++;
                              v198 = v202;
                              if (!v202)
                                goto LABEL_549;
                            }
                            v237 = v199 - 1;
                            while (sub_1ACC573FC(v237++))
                              ;
                            if (*(v237 - 1))
                            {
                              *((_WORD *)v68 + 1) = 26979;
                              v68 += 2;
                            }
                          }
                        }
                      }
                      else if (v197 == 117 && v68[2] == 102)
                      {
                        v208 = v68[3];
                        if (v208)
                        {
                          v323 = (unsigned __int8 *)(v68 + 3);
                          while (1)
                          {
                            v209 = v208 - 97;
                            if (!(v209 == 24 ? sub_1ACC573FC(v196) : 1 - byte_1ACCBB444[v209]))
                              break;
                            v211 = *v196++;
                            v208 = v211;
                            if (!v211)
                              goto LABEL_549;
                          }
                          v239 = v196 - 1;
                          while (sub_1ACC573FC(v239++))
                            ;
LABEL_547:
                          if (*(v239 - 1))
                            v68 = (char *)v323;
                        }
                      }
                      goto LABEL_549;
                    }
                  }
                }
                else
                {
                  if (v69 != 105)
                  {
LABEL_368:
                    switch((char)v69)
                    {
                      case 'e':
                        if (v69 == 101)
                          goto LABEL_497;
                        break;
                      case 'i':
                        if (v69 == 105)
                          goto LABEL_372;
                        break;
                      case 'l':
                        if (v69 == 108)
                          goto LABEL_385;
                        break;
                      case 's':
                        if (v69 == 115)
                          goto LABEL_397;
                        break;
                      default:
                        goto LABEL_549;
                    }
                    goto LABEL_549;
                  }
                  if (v103 != 116)
                    goto LABEL_372;
                }
                if (v68[2] == 105 && v68[3] == 118 && v68[4] == 105)
                {
                  v322 = v68 + 2;
                  v171 = v68[5];
                  if (!v171)
                    goto LABEL_372;
                  v172 = v68 + 6;
                  while (1)
                  {
                    v173 = v171 - 97;
                    if (!(v173 == 24 ? sub_1ACC573FC(v172) : 1 - byte_1ACCBB444[v173]))
                      break;
                    v175 = *v172++;
                    v171 = v175;
                    if (!v175)
                      goto LABEL_372;
                  }
                  v287 = v172 - 1;
                  while (sub_1ACC573FC(v287++))
                    ;
                  if (*(v287 - 1))
                  {
                    *(_WORD *)(v68 + 3) = 26998;
                    goto LABEL_496;
                  }
                }
                else if (v68[2] == 105)
                {
                  v322 = v68 + 3;
                  if (v68[3] == 108 && v68[4] == 105 && v68[5] == 98)
                  {
                    v176 = v68[6];
                    if (v176)
                    {
                      v177 = v68 + 7;
                      while (1)
                      {
                        v178 = v176 - 97;
                        if (!(v178 == 24 ? sub_1ACC573FC(v177) : 1 - byte_1ACCBB444[v178]))
                          break;
                        v180 = *v177++;
                        v176 = v180;
                        if (!v180)
                          goto LABEL_372;
                      }
                      v297 = v177 - 1;
                      while (sub_1ACC573FC(v297++))
                        ;
                      if (*(v297 - 1))
                      {
                        *((_WORD *)v68 + 2) = 25196;
                        goto LABEL_496;
                      }
                    }
                  }
                }
                goto LABEL_372;
              default:
                goto LABEL_368;
            }
          }
          goto LABEL_143;
        }
      }
      else
      {
        v66 = v64;
      }
      v70 = v66 + 3;
      if (v65 == 100)
      {
        v68 = v66 + 1;
        if (v66[1] != 101)
          goto LABEL_143;
        v69 = v66[2];
        if (v69 == 101)
        {
          v78 = *v70;
          if (*v70)
          {
            v79 = v66 + 4;
            while (1)
            {
              v80 = v78 - 97;
              if (!(v80 == 24 ? sub_1ACC573FC(v79) : 1 - byte_1ACCBB444[v80]))
                break;
              v82 = *v79++;
              v78 = v82;
              if (!v82)
                goto LABEL_143;
            }
            v96 = v79 - 1;
            while (sub_1ACC573FC(v96++))
              ;
            if (*(v96 - 1))
            {
              v69 = 101;
              v66[2] = 101;
LABEL_149:
              *v68 = v69;
              goto LABEL_151;
            }
          }
          goto LABEL_143;
        }
        v70 = v66 + 2;
        v92 = v66 + 2;
        while (sub_1ACC573FC(v92++))
          ;
        if (!*(v92 - 1))
        {
LABEL_143:
          v69 = *v66;
          v68 = v66;
LABEL_144:
          if (v69 != 121)
            goto LABEL_151;
          v101 = v68 + 1;
          while (sub_1ACC573FC(v101++))
            ;
          if (!*(v101 - 1))
          {
            v69 = 121;
            goto LABEL_151;
          }
          goto LABEL_148;
        }
      }
      else
      {
        if (v65 != 103)
          goto LABEL_143;
        if (v66[1] != 110)
          goto LABEL_143;
        if (v66[2] != 105)
          goto LABEL_143;
        v71 = v66 + 3;
        while (sub_1ACC573FC(v71++))
          ;
        if (!*(v71 - 1))
          goto LABEL_143;
        v69 = *v70;
      }
      if (v69 == 108)
      {
        v66 = v70;
        if (v70[1] == 98)
        {
          *(_WORD *)(v70 - 1) = 27749;
          v94 = (unsigned __int8 *)(v70 - 1);
          v95 = 98;
          goto LABEL_128;
        }
      }
      else
      {
        v66 = v70;
        if (v69 == 122)
        {
          if (v70[1] == 105)
          {
            *(_WORD *)(v70 - 1) = 31333;
            v94 = (unsigned __int8 *)(v70 - 1);
            v95 = 105;
            goto LABEL_128;
          }
        }
        else if (v69 == 116 && v70[1] == 97)
        {
          *(_WORD *)(v70 - 1) = 29797;
          v94 = (unsigned __int8 *)(v70 - 1);
          v95 = 97;
LABEL_128:
          v94[2] = v95;
          v69 = 101;
          v68 = (char *)v94;
          goto LABEL_151;
        }
      }
      v98 = v69 - 108;
      if (sub_1ACC573FC(v66))
      {
        v68 = v66 + 1;
        if (v69 == v66[1] && (v98 > 0xE || ((1 << v98) & 0x4081) == 0))
          goto LABEL_144;
      }
      if (sub_1ACC57220(v66))
      {
        v99 = sub_1ACC573FC(v66);
        if ((v69 - 119) >= 3 && v99 && v66[1])
        {
          v100 = v66[1] == 121 ? sub_1ACC573FC(v66 + 2) : 1 - byte_1ACCBB444[v66[1] - 97];
          if (v100 && sub_1ACC573FC(v66 + 2))
          {
            v69 = 101;
            *(v66 - 1) = 101;
            v68 = v66 - 1;
            goto LABEL_151;
          }
        }
      }
      goto LABEL_143;
    }
  }
  if ((v48 - 97) < 0x1A)
    goto LABEL_41;
  v50 = 0;
  v51 = (_BYTE *)v27;
  v52 = v17;
  do
  {
    v54 = *v33++;
    v53 = v54;
    v55 = v54 - 65;
    v56 = v54 + 32;
    if ((v54 - 48) < 0xA)
      v57 = 1;
    else
      v57 = v50;
    if (v55 >= 0x1A)
      v50 = v57;
    else
      v53 = v56;
    *v51++ = v53;
    --v52;
  }
  while (v52);
  if (v50)
    v58 = 3;
  else
    v58 = 10;
  LODWORD(v43) = v17;
  if ((int)v17 > 2 * (int)v58)
  {
    v59 = (int)v17 - (int)v58;
    if ((int)v17 <= v59 + 1)
      v60 = v59 + 1;
    else
      v60 = (int)v17;
    v61 = v60 - v59;
    if ((unint64_t)(v60 - v59) < 0x20)
    {
      v62 = v58;
      goto LABEL_109;
    }
    v87 = v27 + v59;
    if ((unint64_t)(v58 - v59) < 0x20)
    {
      v62 = v58;
      goto LABEL_109;
    }
    v59 += v61 & 0xFFFFFFFFFFFFFFE0;
    v62 = v61 & 0xFFFFFFFFFFFFFFE0 | v58;
    v88 = (_OWORD *)(v58 + v27 + 16);
    v89 = (__int128 *)(v87 + 16);
    v90 = v61 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v91 = *v89;
      *(v88 - 1) = *(v89 - 1);
      *v88 = v91;
      v88 += 2;
      v89 += 2;
      v90 -= 32;
    }
    while (v90);
    if (v61 != (v61 & 0xFFFFFFFFFFFFFFE0))
    {
      do
LABEL_109:
        *(_BYTE *)(v27 + v62++) = *(_BYTE *)(v27 + v59++);
      while (v59 < (int)v17);
    }
    LODWORD(v43) = v62;
  }
LABEL_111:
  *(_BYTE *)(v27 + (int)v43) = 0;
  *v11 = v43;
LABEL_595:
  result = 0;
  *v12 = *(_QWORD *)(a1 + 32);
  *v10 = v18;
  *v9 = *(_DWORD *)(a1 + 20);
  v285 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = v285 + 1;
  *v8 = v285;
  return result;
}

BOOL sub_1ACC57220(char *a1)
{
  char v1;
  char *v2;
  int v3;
  uint64_t v4;
  char *v5;
  char v7;
  int v8;
  uint64_t v9;
  char *v10;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = a1 + 1;
  while (1)
  {
    v4 = v1 - 97;
    if (v4 != 24)
    {
      if (1 == byte_1ACCBB444[v4])
        break;
      goto LABEL_4;
    }
    if (!sub_1ACC573FC(v2))
      break;
LABEL_4:
    v3 = *v2++;
    v1 = v3;
    if (!v3)
      return 0;
  }
  v5 = v2 - 1;
  while (sub_1ACC573FC(v5++))
    ;
  v7 = *(v5 - 1);
  if (!v7)
    return 0;
  while (1)
  {
    v9 = v7 - 97;
    if (v9 == 24)
      break;
    if (1 == byte_1ACCBB444[v9])
      goto LABEL_15;
LABEL_12:
    v8 = *v5++;
    v7 = v8;
    if (!v8)
      return 1;
  }
  if (sub_1ACC573FC(v5))
    goto LABEL_12;
LABEL_15:
  v10 = v5 - 1;
  while (sub_1ACC573FC(v10++))
    ;
  return *(v10 - 1) == 0;
}

BOOL sub_1ACC57310(char *a1)
{
  char v1;
  char *v2;
  uint64_t v3;
  int v4;
  char *v5;
  char v7;
  uint64_t v8;
  int v9;
  char *v11;

  v1 = *a1;
  if (!*a1)
    return 0;
  v2 = a1 + 1;
  while (1)
  {
    v3 = v1 - 97;
    if (v3 == 24)
    {
      if (!sub_1ACC573FC(v2))
        break;
      goto LABEL_7;
    }
    if (1 == byte_1ACCBB444[v3])
      break;
LABEL_7:
    v4 = *v2++;
    v1 = v4;
    if (!v4)
      return 0;
  }
  v5 = v2 - 1;
  while (sub_1ACC573FC(v5++))
    ;
  v7 = *(v5 - 1);
  if (!v7)
    return 0;
  while (1)
  {
    v8 = v7 - 97;
    if (v8 != 24)
      break;
    if (!sub_1ACC573FC(v5))
      goto LABEL_18;
LABEL_16:
    v9 = *v5++;
    v7 = v9;
    if (!v9)
      return 0;
  }
  if (1 != byte_1ACCBB444[v8])
    goto LABEL_16;
LABEL_18:
  v11 = v5 - 1;
  while (sub_1ACC573FC(v11++))
    ;
  return *(v11 - 1) != 0;
}

uint64_t sub_1ACC573FC(char *a1)
{
  int v1;

  if (!*a1)
    return 0;
  if (*a1 != 121)
    return byte_1ACCBB444[*a1 - 97];
  if (!a1[1])
    return 1;
  if (a1[1] == 121)
    v1 = sub_1ACC573FC(a1 + 2);
  else
    v1 = 1 - byte_1ACCBB444[a1[1] - 97];
  return v1 != 0;
}

uint64_t sub_1ACC57488(uint64_t a1, int a2)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t (*v9)(char *, int);
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  _QWORD **v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (sqlite3_initialize())
    return 1;
  v5 = (_DWORD *)sub_1ACB5D828(16 * a2);
  if (!v5)
    return 1;
  v6 = v5;
  bzero(v5, 16 * a2);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7)
  {
    v8 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v7);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v7);
      v7 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_11;
      v8 = &xmmword_1ECD3B1D0;
    }
    (*v8)(v7);
  }
LABEL_11:
  *(_QWORD *)(a1 + 24) = v6;
  *(_DWORD *)(a1 + 16) = a2;
  if (*(_BYTE *)a1 == 1)
    v9 = sub_1ACB5BD38;
  else
    v9 = sub_1ACC52EC8;
  v12 = *(uint64_t **)(a1 + 8);
  v10 = (_QWORD *)(a1 + 8);
  v11 = v12;
  *v10 = 0;
  if (v12)
  {
    v13 = a2 - 1;
    do
    {
      v17 = v9((char *)v11[3], *((_DWORD *)v11 + 8));
      v18 = (uint64_t *)*v11;
      v19 = (char *)&v6[4 * (v17 & v13)];
      v22 = *((_QWORD *)v19 + 1);
      v20 = v19 + 8;
      v21 = v22;
      if (v22)
      {
        *v11 = v21;
        v15 = *(_QWORD *)(v21 + 8);
        v14 = (_QWORD **)(v21 + 8);
        v11[1] = v15;
        v16 = *v14;
        if (!*v14)
          v16 = v10;
        *v16 = v11;
      }
      else
      {
        v23 = *v10;
        *v11 = *v10;
        if (v23)
          *(_QWORD *)(v23 + 8) = v11;
        v11[1] = 0;
        v14 = (_QWORD **)v10;
      }
      *v14 = v11;
      ++v6[4 * (v17 & v13)];
      *v20 = v11;
      v11 = v18;
    }
    while (v18);
  }
  return 0;
}

uint64_t sub_1ACC57620(uint64_t result)
{
  uint64_t v1;
  uint64_t (**v2)(uint64_t);

  if (result)
  {
    v1 = result;
    v2 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
      return (*v2)(v1);
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888 -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    result = off_1ECD3B168(v1);
    v1 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v2 = &xmmword_1ECD3B1D0;
      return (*v2)(v1);
    }
  }
  return result;
}

void sub_1ACC576D4(uint64_t a1, int a2, sqlite3_value **a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  sqlite3 *v12;
  int v13;
  __int16 v14;
  int v15;
  uint64_t v16;
  int *v17;
  _DWORD *v18;
  int v19;
  int v20;
  void *v21;
  char *v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  void (**v26)(char *);
  _QWORD *v27;
  const void *v28;
  const void *v29;
  const void *v30;
  const void *v31;
  const void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int v38;
  sqlite3 *v39;
  char v40[12];
  char v41[4];

  if (a1 && (v6 = *(_QWORD *)(a1 + 8)) != 0)
  {
    v7 = *(_QWORD *)(v6 + 8);
    v8 = (uint64_t)*a3;
    if (!*a3)
    {
LABEL_4:
      v9 = 0;
LABEL_5:
      sub_1ACBBE20C(91120);
LABEL_6:
      v10 = 0;
      goto LABEL_7;
    }
  }
  else
  {
    sub_1ACBBE20C(97914);
    v7 = 0;
    v8 = (uint64_t)*a3;
    if (!*a3)
      goto LABEL_4;
  }
  v13 = *(unsigned __int16 *)(v8 + 20);
  if ((~v13 & 0x202) != 0 || *(_BYTE *)(v8 + 22) != 1)
  {
    if ((v13 & 1) != 0)
    {
      v9 = 0;
      v14 = *(_WORD *)(v8 + 20);
      if ((v14 & 2) == 0)
        goto LABEL_44;
    }
    else
    {
      v9 = (char *)sub_1ACBF2B64((int *)v8, 1);
      v8 = (uint64_t)*a3;
      if (!*a3)
        goto LABEL_5;
      v14 = *(_WORD *)(v8 + 20);
      if ((v14 & 2) == 0)
        goto LABEL_44;
    }
  }
  else
  {
    v9 = *(char **)(v8 + 8);
    v14 = *(_WORD *)(v8 + 20);
    if ((v14 & 2) == 0)
      goto LABEL_44;
  }
  if (*(_BYTE *)(v8 + 22) == 1)
  {
    v10 = *(_DWORD *)(v8 + 16);
    goto LABEL_7;
  }
LABEL_44:
  if ((v14 & 0x10) != 0)
  {
    v10 = *(_DWORD *)(v8 + 16);
    if ((v14 & 0x400) != 0)
      v10 += *(_DWORD *)v8;
  }
  else
  {
    if ((v14 & 1) != 0)
      goto LABEL_6;
    v10 = sub_1ACBF2B3C(v8, 1);
  }
LABEL_7:
  v11 = (v10 + 1);
  if (a2 != 2)
  {
    if (v9 && v7 && *(_QWORD *)(v7 + 24))
    {
      v15 = *(_BYTE *)v7 == 1 ? sub_1ACB5BD38(v9, v11) : sub_1ACC52EC8(v9, v11);
      v16 = *(_QWORD *)(v7 + 24);
      if (v16)
      {
        v17 = (int *)(v16 + 16 * ((*(_DWORD *)(v7 + 16) - 1) & v15));
        v20 = *v17;
        v18 = v17 + 2;
        v19 = v20;
        if (*(_BYTE *)v7 == 1)
          v21 = sub_1ACB5BD9C;
        else
          v21 = sub_1ACC52F00;
        while (v19)
        {
          v18 = *(_DWORD **)v18;
          if (!v18)
            break;
          --v19;
          if (!((unsigned int (*)(_QWORD, _QWORD, char *, uint64_t))v21)(*((_QWORD *)v18 + 3), v18[8], v9, v11))
          {
            *(_QWORD *)v40 = *((_QWORD *)v18 + 2);
            if (*(_QWORD *)v40)
              goto LABEL_83;
            break;
          }
        }
      }
    }
    v22 = sqlite3_mprintf("unknown tokenizer: %s", v9);
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_1ACB57870(*(_QWORD *)a1, v22, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      if (!v22)
        return;
    }
    else
    {
      sub_1ACBBE20C(97389);
      if (!v22)
        return;
    }
    v26 = (void (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v22);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v22);
      v22 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        return;
      v26 = (void (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v26)(v22);
    return;
  }
  if (a1 && *(_QWORD *)a1)
  {
    v12 = *(sqlite3 **)(*(_QWORD *)a1 + 24);
  }
  else
  {
    sub_1ACBBE20C(97935);
    v12 = 0;
  }
  *(_DWORD *)v40 = 0;
  sqlite3_db_config(v12, 1004, 0xFFFFFFFFLL, v40);
  v23 = (uint64_t)a3[1];
  if (!*(_DWORD *)v40)
  {
    if (v23)
    {
      if ((*(_WORD *)(v23 + 20) & 0x40) != 0)
        goto LABEL_51;
    }
    else
    {
      sub_1ACBBE20C(97248);
    }
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      v36 = *(_QWORD *)a1;
      v37 = "fts3_tokenizer requires bound parameters";
      goto LABEL_91;
    }
    goto LABEL_92;
  }
  if (!v23)
  {
    sub_1ACBBE20C(91120);
    goto LABEL_86;
  }
LABEL_51:
  v24 = *(_WORD *)(v23 + 20);
  if ((v24 & 2) != 0 && *(_BYTE *)(v23 + 22) == 1)
  {
    v25 = *(_DWORD *)(v23 + 16);
  }
  else if ((v24 & 0x10) != 0)
  {
    v25 = *(_DWORD *)(v23 + 16);
    if ((*(_WORD *)(v23 + 20) & 0x400) != 0)
      v25 += *(_DWORD *)v23;
  }
  else
  {
    if ((v24 & 1) != 0)
      goto LABEL_86;
    v25 = sub_1ACBF2B3C(v23, 1);
  }
  if (!v9 || v25 != 8)
  {
LABEL_86:
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      v36 = *(_QWORD *)a1;
      v37 = "argument type mismatch";
LABEL_91:
      sub_1ACB57870(v36, v37, -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      return;
    }
LABEL_92:
    v38 = 97389;
LABEL_93:
    sub_1ACBBE20C(v38);
    return;
  }
  v27 = *(_QWORD **)sqlite3_value_blob(a3[1]);
  *(_QWORD *)v40 = v27;
  if (!v27)
    goto LABEL_107;
  v41[0] = 0;
  if (mincore(v27, 8uLL, v41))
    goto LABEL_107;
  v28 = (const void *)v27[1];
  if (v28)
  {
    v41[0] = 0;
    if (mincore(v28, 8uLL, v41))
      goto LABEL_107;
  }
  v29 = (const void *)v27[2];
  if (v29)
  {
    v41[0] = 0;
    if (mincore(v29, 8uLL, v41))
      goto LABEL_107;
  }
  v30 = (const void *)v27[3];
  if (v30)
  {
    v41[0] = 0;
    if (mincore(v30, 8uLL, v41))
      goto LABEL_107;
  }
  if ((v31 = (const void *)v27[4]) != 0 && (v41[0] = 0, mincore(v31, 8uLL, v41))
    || (v32 = (const void *)v27[5]) != 0 && (v41[0] = 0, mincore(v32, 8uLL, v41))
    || (v33 = (const void *)v27[6]) != 0 && (v41[0] = 0, mincore(v33, 8uLL, v41)))
  {
LABEL_107:
    __break(1u);
    return;
  }
  v34 = sub_1ACB5B970(v7, v9, v11, (uint64_t)v27);
  if (v34 == *(_QWORD *)v40)
  {
    if (a1)
    {
      *(_DWORD *)(a1 + 36) = 1;
      sub_1ACB57870(*(_QWORD *)a1, "out of memory", -1, 1u, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
      v35 = *(_QWORD *)a1;
      if (*(_QWORD *)a1)
        goto LABEL_96;
    }
    else
    {
      sub_1ACBBE20C(97389);
    }
LABEL_98:
    sub_1ACBBE20C(97935);
    v39 = 0;
    goto LABEL_99;
  }
LABEL_83:
  if (!a1)
    goto LABEL_98;
  v35 = *(_QWORD *)a1;
  if (!*(_QWORD *)a1)
    goto LABEL_98;
LABEL_96:
  v39 = *(sqlite3 **)(v35 + 24);
LABEL_99:
  *(_DWORD *)v41 = 0;
  sqlite3_db_config(v39, 1004, 0xFFFFFFFFLL, v41, *(_QWORD *)v40);
  if (*(_DWORD *)v41)
    goto LABEL_100;
  if (!*a3)
  {
    v38 = 97248;
    goto LABEL_93;
  }
  if ((*((_WORD *)*a3 + 10) & 0x40) != 0)
  {
LABEL_100:
    if (!a1)
    {
      v38 = 97348;
      goto LABEL_93;
    }
    sub_1ACBC69D0(a1, v40, 8, 0, (uint64_t (*)(uint64_t))0xFFFFFFFFFFFFFFFFLL);
  }
}

uint64_t sub_1ACC57C60(sqlite3 *a1, uint64_t a2, int a3, const char **a4, uint64_t *a5, char **a6)
{
  return sub_1ACC5B300(1, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1ACC57C80(sqlite3 *a1, uint64_t a2, int a3, const char **a4, uint64_t *a5, char **a6)
{
  return sub_1ACC5B300(0, a1, a2, a3, a4, a5, a6);
}

uint64_t sub_1ACC57CA0(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v12;
  int v13;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;

  if (*(_DWORD *)(a1 + 104))
    return 1;
  a2[10] = 0;
  *((_QWORD *)a2 + 8) = 0x415312D000000000;
  v3 = *a2;
  if ((int)v3 < 1)
    goto LABEL_42;
  v4 = 0;
  v5 = 0;
  v6 = (unsigned __int8 *)(*((_QWORD *)a2 + 1) + 4);
  v7 = -1;
  v8 = -1;
  v9 = -1;
  v10 = -1;
  do
  {
    if (v6[1])
    {
      v11 = *((_DWORD *)v6 - 1);
      if (v11 < 0)
      {
        v12 = 1;
        v13 = *v6;
        if ((v10 & 0x80000000) == 0)
          goto LABEL_17;
      }
      else
      {
        v12 = v11 == *(_DWORD *)(a1 + 48) + 1;
        v13 = *v6;
        if ((v10 & 0x80000000) == 0)
          goto LABEL_17;
      }
      if (v13 == 2 && v12)
      {
        v4 = 1;
        a2[10] = 1;
        *((_QWORD *)a2 + 8) = 0x3FF0000000000000;
        v10 = v5;
        goto LABEL_23;
      }
LABEL_17:
      if (v13 != 2)
      {
        if (v13 == 64)
        {
          if (v11 < 0 || v11 > *(_DWORD *)(a1 + 48))
          {
            v13 = 64;
            if (!v12)
              goto LABEL_6;
          }
          else
          {
            v4 = v11 + 2;
            a2[10] = v11 + 2;
            *((_QWORD *)a2 + 8) = 0x4000000000000000;
            v13 = 64;
            v10 = v5;
            if (!v12)
              goto LABEL_6;
          }
          goto LABEL_27;
        }
LABEL_26:
        if (!v12)
          goto LABEL_6;
LABEL_27:
        HIDWORD(v15) = v13;
        LODWORD(v15) = v13 - 4;
        switch((v15 >> 2))
        {
          case 0u:
          case 7u:
            v8 = v5;
            break;
          case 1u:
          case 3u:
            v7 = v5;
            break;
          default:
            goto LABEL_6;
        }
        goto LABEL_6;
      }
LABEL_23:
      if (v11 == *(_DWORD *)(a1 + 48) + 2)
        v9 = v5;
      v13 = 2;
      goto LABEL_26;
    }
    if (*v6 == 64)
    {
      result = 0;
      a2[10] = 0;
      *((_QWORD *)a2 + 8) = 0x4A511B0EC57E649ALL;
      *((_QWORD *)a2 + 9) = 0x4000000000000;
      return result;
    }
LABEL_6:
    ++v5;
    v6 += 12;
  }
  while (v3 != v5);
  if (v4 == 1)
  {
    a2[20] |= 1u;
    v4 = 1;
  }
  v16 = 1;
  if ((v10 & 0x80000000) == 0)
  {
    v17 = *((_QWORD *)a2 + 4) + 8 * v10;
    *(_DWORD *)v17 = 1;
    *(_BYTE *)(v17 + 4) = 1;
    v16 = 2;
  }
  if ((v9 & 0x80000000) == 0)
  {
    v4 |= 0x10000u;
    a2[10] = v4;
    *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v9) = v16++;
  }
  if ((v8 & 0x80000000) == 0)
  {
    v4 |= 0x20000u;
    a2[10] = v4;
    *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v8) = v16++;
  }
  if ((v7 & 0x80000000) == 0)
  {
    a2[10] = v4 | 0x40000;
    *(_DWORD *)(*((_QWORD *)a2 + 4) + 8 * v7) = v16;
  }
LABEL_42:
  if (a2[4] != 1)
    return 0;
  v18 = *((_QWORD *)a2 + 3);
  if ((*(_DWORD *)v18 & 0x80000000) == 0 && *(_DWORD *)v18 != *(_DWORD *)(a1 + 48) + 1)
    return 0;
  result = 0;
  if (*(_BYTE *)(v18 + 4))
    v19 = "DESC";
  else
    v19 = "ASC";
  *((_QWORD *)a2 + 6) = v19;
  a2[15] = 1;
  return result;
}

uint64_t sub_1ACC57F0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t v3;
  uint64_t (**v4)(uint64_t);
  uint64_t v5;
  uint64_t (**v6)(uint64_t);
  uint64_t v7;
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  uint64_t (**v10)(uint64_t);
  uint64_t v11;
  uint64_t (**v12)(uint64_t);
  uint64_t (**v13)(uint64_t);

  v1 = a1;
  sqlite3_finalize(*(sqlite3_stmt **)(a1 + 432));
  for (i = 112; i != 432; i += 8)
    sqlite3_finalize(*(sqlite3_stmt **)(v1 + i));
  v3 = *(_QWORD *)(v1 + 472);
  if (v3)
  {
    v4 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_9:
      (*v4)(v3);
      goto LABEL_10;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v3);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v3);
    v3 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v4 = &xmmword_1ECD3B1D0;
      goto LABEL_9;
    }
  }
LABEL_10:
  v5 = *(_QWORD *)(v1 + 440);
  if (!v5)
    goto LABEL_17;
  v6 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_16;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v5);
  v5 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v6 = &xmmword_1ECD3B1D0;
LABEL_16:
    (*v6)(v5);
  }
LABEL_17:
  v7 = *(_QWORD *)(v1 + 448);
  if (!v7)
    goto LABEL_24;
  v8 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_23;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v7);
  v7 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v8 = &xmmword_1ECD3B1D0;
LABEL_23:
    (*v8)(v7);
  }
LABEL_24:
  v9 = *(_QWORD *)(v1 + 80);
  if (!v9)
    goto LABEL_31;
  v10 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_30;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v9);
  v9 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v10 = &xmmword_1ECD3B1D0;
LABEL_30:
    (*v10)(v9);
  }
LABEL_31:
  v11 = *(_QWORD *)(v1 + 88);
  if (!v11)
    goto LABEL_38;
  v12 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
    goto LABEL_37;
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v11);
  v11 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v12 = &xmmword_1ECD3B1D0;
LABEL_37:
    (*v12)(v11);
  }
LABEL_38:
  (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 72) + 16))(*(_QWORD *)(v1 + 72));
  v13 = &off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_43:
    (*v13)(v1);
    return 0;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v1);
  v1 = xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v13 = &xmmword_1ECD3B1D0;
    goto LABEL_43;
  }
  return 0;
}

uint64_t sub_1ACC5821C(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  unsigned int v5;

  v5 = 0;
  if (*(_QWORD *)(a1 + 80))
    v2 = "--";
  else
    v2 = &byte_1ACCBEAEE;
  sub_1ACC5E470((char *)&v5, *(sqlite3 **)(a1 + 24), "DROP TABLE IF EXISTS %Q.'%q_segments';DROP TABLE IF EXISTS %Q.'%q_segdir';DROP TABLE IF EXISTS %Q.'%q_docsize';DROP "
    "TABLE IF EXISTS %Q.'%q_stat';%s DROP TABLE IF EXISTS %Q.'%q_content';",
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40),
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40),
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40),
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40),
    v2,
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40));
  v3 = v5;
  if (!v5)
    sub_1ACC57F0C(a1);
  return v3;
}

double sub_1ACC582A4(uint64_t a1, _QWORD *a2)
{
  double result;
  _OWORD *v4;

  if (sqlite3_initialize())
  {
    *a2 = 0;
  }
  else
  {
    v4 = (_OWORD *)sub_1ACB5D828(128);
    *a2 = v4;
    if (v4)
    {
      result = 0.0;
      v4[6] = 0u;
      v4[7] = 0u;
      v4[4] = 0u;
      v4[5] = 0u;
      v4[2] = 0u;
      v4[3] = 0u;
      *v4 = 0u;
      v4[1] = 0u;
    }
  }
  return result;
}

uint64_t sub_1ACC58300(uint64_t *a1)
{
  uint64_t *v1;
  __n128 v2;
  void (**v3)(uint64_t *, __n128);

  v1 = a1;
  v2.n128_f64[0] = sub_1ACC5E56C(a1);
  if (v1)
  {
    v3 = (void (**)(uint64_t *, __n128))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_7:
      (*v3)(v1, v2);
      return 0;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v1);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v1);
    v1 = (uint64_t *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v3 = (void (**)(uint64_t *, __n128))&xmmword_1ECD3B1D0;
      goto LABEL_7;
    }
  }
  return 0;
}

uint64_t sub_1ACC583B0(uint64_t a1, int a2, _BYTE *a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v6;
  __int16 v9;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  BOOL v24;
  unsigned int v25;
  int v26;
  char *v27;
  int v28;
  __int16 v29;
  double v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  _QWORD *v40;
  sqlite3_stmt *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  unsigned __int8 *v50;
  uint64_t (**v51)(unsigned __int8 *);
  double v52;
  uint64_t v53;
  uint64_t *v54;
  char ***v55;
  uint64_t *v56;
  unsigned int v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  void (**v64)(char ***);
  uint64_t v65;
  uint64_t *v66[3];
  int v67;
  int v68;
  uint64_t v69;
  __int128 v70;
  uint64_t *v71;
  int v72;
  uint64_t v73;

  v5 = *(_QWORD *)a1;
  if (*(_DWORD *)(*(_QWORD *)a1 + 104))
    return 1;
  v9 = a2;
  v11 = (unsigned __int16)a2;
  if ((_WORD)a2)
  {
    v12 = *a5;
    v13 = 1;
    if ((a2 & 0x10000) == 0)
      goto LABEL_6;
  }
  else
  {
    v12 = 0;
    v13 = 0;
    if ((a2 & 0x10000) == 0)
    {
LABEL_6:
      v14 = 0;
      if ((a2 & 0x20000) != 0)
        goto LABEL_7;
LABEL_11:
      v15 = 0;
      v65 = v12;
      if ((a2 & 0x40000) != 0)
        goto LABEL_8;
      goto LABEL_12;
    }
  }
  v14 = a5[v13++];
  if ((a2 & 0x20000) == 0)
    goto LABEL_11;
LABEL_7:
  v15 = a5[v13++];
  v65 = v12;
  if ((a2 & 0x40000) != 0)
  {
LABEL_8:
    v16 = a5[v13];
    goto LABEL_13;
  }
LABEL_12:
  v16 = 0;
LABEL_13:
  v17 = sub_1ACC5E56C((uint64_t *)a1);
  if (!v15)
    goto LABEL_18;
  v18 = *(_WORD *)(v15 + 20);
  if (((0x4000000040004uLL >> v18) & 1) != 0)
  {
    sub_1ACBCA9CC(v15, 0);
    v18 = *(_WORD *)(v15 + 20);
    if (((0x50505050uLL >> (v18 & 0x3F)) & 1) == 0)
      goto LABEL_18;
  }
  else if (((0x50505050uLL >> (v18 & 0x3F)) & 1) == 0)
  {
    goto LABEL_18;
  }
  if ((v18 & 0x24) != 0)
  {
    v19 = *(_QWORD *)v15;
    goto LABEL_21;
  }
  if ((v18 & 8) != 0)
  {
    v17 = *(double *)v15;
    if (*(double *)v15 >= -9.22337204e18)
    {
      if (v17 <= 9.22337204e18)
        v19 = (uint64_t)v17;
      else
        v19 = 0x7FFFFFFFFFFFFFFFLL;
      goto LABEL_21;
    }
LABEL_18:
    v19 = 0x8000000000000000;
    goto LABEL_21;
  }
  if ((v18 & 0x12) != 0 && *(_QWORD *)(v15 + 8))
    v19 = sub_1ACBF2FC0(v15);
  else
    v19 = 0;
LABEL_21:
  *(_QWORD *)(a1 + 96) = v19;
  if (!v16)
  {
    v21 = 0x7FFFFFFFFFFFFFFFLL;
    v22 = v65;
    goto LABEL_30;
  }
  v20 = *(_WORD *)(v16 + 20);
  if (((0x4000000040004uLL >> v20) & 1) != 0)
  {
    sub_1ACBCA9CC(v16, 0);
    v20 = *(_WORD *)(v16 + 20);
  }
  v22 = v65;
  if (((0x50505050uLL >> (v20 & 0x3F)) & 1) == 0)
    goto LABEL_27;
  if ((v20 & 0x24) != 0)
  {
    v21 = *(_QWORD *)v16;
  }
  else if ((v20 & 8) != 0)
  {
    v17 = *(double *)v16;
    if (*(double *)v16 >= -9.22337204e18)
    {
      if (v17 > 9.22337204e18)
      {
LABEL_27:
        v21 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_30;
      }
      v21 = (uint64_t)v17;
    }
    else
    {
      v21 = 0x8000000000000000;
    }
  }
  else if ((v20 & 0x12) != 0 && *(_QWORD *)(v16 + 8))
  {
    v21 = sub_1ACBF2FC0(v16);
  }
  else
  {
    v21 = 0;
  }
LABEL_30:
  *(_QWORD *)(a1 + 104) = v21;
  if (a3)
    v23 = *a3 == 68;
  else
    v23 = *(_BYTE *)(v5 + 463);
  *(_BYTE *)(a1 + 76) = v23;
  *(_WORD *)(a1 + 8) = v9;
  v24 = v11 >= 2;
  v25 = v11 - 2;
  if (!v24)
  {
LABEL_64:
    if (v9 == 1)
    {
      v6 = sub_1ACC5EBEC((uint64_t *)a1);
      if ((_DWORD)v6)
        return v6;
      v6 = sqlite3_bind_value(*(sqlite3_stmt **)(a1 + 16), 1, (const sqlite3_value *)v22);
      goto LABEL_90;
    }
    if (v9)
      return sub_1ACC58BD0(a1);
    if (v15 | v16)
      v46 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s WHERE rowid BETWEEN %lld AND %lld ORDER BY rowid %s", v17);
    else
      v46 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s ORDER BY rowid %s", v17);
    v50 = v46;
    if (v46)
    {
      ++*(_DWORD *)(v5 + 104);
      v6 = sub_1ACB5C66C(*(_QWORD *)(v5 + 24), v46, 0xFFFFFFFFLL, 129, 0, (_QWORD *)(a1 + 16), 0, v47);
      --*(_DWORD *)(v5 + 104);
      v51 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v50);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v50);
        v50 = (unsigned __int8 *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
        {
LABEL_90:
          if ((_DWORD)v6)
            return v6;
          return sub_1ACC58BD0(a1);
        }
        v51 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
      }
      (*v51)(v50);
      goto LABEL_90;
    }
    return 7;
  }
  if (!v22)
  {
    sub_1ACBBE20C(97202);
    return 7;
  }
  v26 = *(unsigned __int16 *)(v22 + 20);
  if ((~v26 & 0x202) != 0 || *(_BYTE *)(v22 + 22) != 1)
  {
    if ((v26 & 1) != 0)
    {
LABEL_46:
      if (((0xAAAAAAAAAAAAAAAALL >> v26) & 1) == 0)
        return 7;
      v27 = 0;
      v28 = 1;
      *(_DWORD *)(a1 + 32) = 0;
      if (!v14)
        goto LABEL_48;
      goto LABEL_43;
    }
    v27 = (char *)sub_1ACBF2B64((int *)v22, 1);
    if (!v27)
    {
LABEL_39:
      LOWORD(v26) = *(_WORD *)(v22 + 20);
      goto LABEL_46;
    }
  }
  else
  {
    v27 = *(char **)(v22 + 8);
    if (!v27)
      goto LABEL_39;
  }
  v28 = 0;
  *(_DWORD *)(a1 + 32) = 0;
  if (!v14)
  {
LABEL_48:
    LODWORD(v30) = 0;
    goto LABEL_49;
  }
LABEL_43:
  v29 = *(_WORD *)(v14 + 20);
  if ((v29 & 0x24) != 0)
  {
    v30 = *(double *)v14;
  }
  else if ((v29 & 8) != 0)
  {
    v52 = *(double *)v14;
    if (*(double *)v14 >= -9.22337204e18)
    {
      if (v52 <= 9.22337204e18)
        *(_QWORD *)&v30 = (uint64_t)v52;
      else
        LODWORD(v30) = -1;
    }
    else
    {
      LODWORD(v30) = 0;
    }
  }
  else if ((v29 & 0x12) != 0 && *(_QWORD *)(v14 + 8))
  {
    LODWORD(v30) = sub_1ACBF2FC0(v14);
  }
  else
  {
    LODWORD(v30) = 0;
  }
  *(_DWORD *)(a1 + 32) = LODWORD(v30);
LABEL_49:
  v31 = *(uint64_t **)(v5 + 72);
  v32 = *(uint64_t **)(v5 + 56);
  v33 = *(unsigned __int8 *)(v5 + 460);
  v34 = *(_DWORD *)(v5 + 48);
  v35 = (uint64_t *)(a1 + 24);
  v70 = 0u;
  v66[0] = v31;
  v66[1] = (uint64_t *)LODWORD(v30);
  v66[2] = v32;
  v68 = v34;
  v69 = v25;
  v67 = v33;
  if (!v28)
  {
    v48 = strlen(v27);
    v49 = sub_1ACC5F194(v66, (unsigned __int8 *)v27, v48, (uint64_t *)(a1 + 24), &v71);
    v6 = v49;
    v36 = *v35;
    if ((_DWORD)v49 || !DWORD2(v70))
    {
      if (!(_DWORD)v49)
      {
        if (!v36)
          goto LABEL_51;
        v53 = sub_1ACC5ED40((uint64_t *)(a1 + 24), 12);
        v36 = *v35;
        if ((_DWORD)v53)
        {
          v6 = v53;
        }
        else
        {
          v6 = sub_1ACC5F144(*v35, 12);
          if (!(_DWORD)v6)
            goto LABEL_51;
        }
      }
      sub_1ACC5E800(v36);
      *v35 = 0;
      if ((_DWORD)v6 != 1)
      {
        if ((_DWORD)v6 != 18)
          return v6;
        sub_1ACC51B88((char **)(v5 + 16), "FTS expression tree is too large (maximum depth %d)");
        return 1;
      }
    }
    else
    {
      sub_1ACC5E800(*v35);
      *v35 = 0;
    }
    sub_1ACC51B88((char **)(v5 + 16), "malformed MATCH expression: [%s]");
    return 1;
  }
  v36 = 0;
  *v35 = 0;
LABEL_51:
  v37 = *(_QWORD *)a1;
  v73 = 0;
  v72 = 0;
  sub_1ACC600FC(a1, v36, &v73, &v72, (_DWORD *)&v73 + 1);
  v22 = v65;
  if (!HIDWORD(v73))
  {
    v38 = v73;
    if ((int)v73 >= 2)
    {
      if (*(_BYTE *)(v37 + 460))
      {
        v39 = v72;
        if (sqlite3_initialize() || (v54 = (uint64_t *)sub_1ACB5D828(16 * v39 + 40 * v38)) == 0)
        {
          HIDWORD(v73) = 7;
          goto LABEL_56;
        }
        v55 = (char ***)v54;
        v56 = &v54[5 * v38];
        v66[0] = v54;
        v71 = v56;
        sub_1ACC60380((sqlite3_blob *)a1, 0, *(int **)(a1 + 24), (uint64_t *)v66, &v71, (int *)&v73 + 1);
        if (!HIDWORD(v73))
        {
          v57 = -858993459 * ((unint64_t)((char *)v66[0] - (char *)v55) >> 3);
          v58 = (char *)v71;
          v59 = sub_1ACC60618(a1, 0, v55, v57);
          if (!v59)
          {
            v60 = v58 - (char *)v56;
            if ((int)((unint64_t)(v58 - (char *)v56) >> 3) >= 1)
            {
              v61 = 0;
              v62 = (int)(v60 >> 3);
              do
              {
                v59 = sub_1ACC60618(a1, (char **)v56[v61++], v55, v57);
                if (v59)
                  v63 = 0;
                else
                  v63 = v61 < v62;
              }
              while (v63);
              v22 = v65;
            }
          }
          HIDWORD(v73) = v59;
        }
        v64 = (void (**)(char ***))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_134;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v55);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v55);
        v55 = (char ***)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v64 = (void (**)(char ***))&xmmword_1ECD3B1D0;
LABEL_134:
          (*v64)(v55);
        }
      }
    }
  }
LABEL_56:
  sub_1ACC60A68(a1, *(_QWORD *)(a1 + 24), (_DWORD *)&v73 + 1);
  v6 = HIDWORD(v73);
  v40 = *(_QWORD **)(v5 + 480);
  if (v40)
  {
    v41 = (sqlite3_stmt *)v40[3];
    v42 = (_QWORD *)v40[4];
    v43 = v42[3];
    if (v43)
      xmmword_1ECD3B1C0(v43);
    sub_1ACBE0F9C(v42, v40);
    v44 = v42[3];
    if (v44)
      xmmword_1ECD3B1D0(v44);
    sqlite3_finalize(v41);
  }
  *(_QWORD *)(v5 + 480) = 0;
  if (!(_DWORD)v6)
  {
    v45 = *(_QWORD *)(a1 + 64);
    *(_QWORD *)(a1 + 48) = 0;
    *(_QWORD *)(a1 + 56) = v45;
    goto LABEL_64;
  }
  return v6;
}

uint64_t sub_1ACC58BD0(uint64_t a1)
{
  uint64_t v2;
  sqlite3_int64 v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;

  if (*(unsigned __int16 *)(a1 + 8) <= 1u)
  {
    v2 = *(_QWORD *)a1;
    ++*(_DWORD *)(*(_QWORD *)a1 + 104);
    if (sqlite3_step(*(sqlite3_stmt **)(a1 + 16)) == 100)
    {
      v3 = sqlite3_column_int64(*(sqlite3_stmt **)(a1 + 16), 0);
      result = 0;
      *(_QWORD *)(a1 + 48) = v3;
    }
    else
    {
      *(_BYTE *)(a1 + 10) = 1;
      result = sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
    }
    --*(_DWORD *)(v2 + 104);
    return result;
  }
  v8 = 0;
  v5 = *(_QWORD *)(a1 + 24);
  if (!v5)
  {
    *(_BYTE *)(a1 + 10) = 1;
    goto LABEL_14;
  }
  do
  {
    if (!*(_BYTE *)(a1 + 11))
      sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
    sub_1ACC62D9C(a1, v5, (int *)&v8);
    v6 = *(unsigned __int8 *)(v5 + 48);
    *(_BYTE *)(a1 + 10) = v6;
    *(_BYTE *)(a1 + 11) = 1;
    *(_DWORD *)(a1 + 112) = 1;
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(v5 + 40);
  }
  while (!v6 && sub_1ACC63830(a1, (int *)&v8));
  result = v8;
  if (!v8)
  {
LABEL_14:
    v7 = *(_QWORD *)(a1 + 48);
    if (*(_BYTE *)(a1 + 76))
    {
      if (v7 < *(_QWORD *)(a1 + 96))
      {
LABEL_16:
        result = 0;
        *(_BYTE *)(a1 + 10) = 1;
        return result;
      }
    }
    else if (v7 > *(_QWORD *)(a1 + 104))
    {
      goto LABEL_16;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1ACC58D0C(uint64_t a1)
{
  uint64_t result;

  if (!*(_BYTE *)(a1 + 10))
    return 0;
  sub_1ACC5E56C((uint64_t *)a1);
  result = 1;
  *(_BYTE *)(a1 + 10) = 1;
  return result;
}

uint64_t sub_1ACC58D44(uint64_t a1, uint64_t *a2, int a3)
{
  int v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  sqlite3_value *v15;

  v5 = a3 - *(_DWORD *)(*(_QWORD *)a1 + 48);
  if (v5 == 2)
  {
    if (!*(_QWORD *)(a1 + 24))
    {
      v6 = *(_DWORD *)(*(_QWORD *)a1 + 48);
      if (*(_QWORD *)(*(_QWORD *)a1 + 88))
        goto LABEL_21;
      if (!a2)
      {
        sub_1ACBBE20C(97413);
        return 0;
      }
      v10 = *a2;
      if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(*a2, 0);
        return 0;
      }
      result = 0;
      *(_QWORD *)v10 = 0;
      goto LABEL_18;
    }
    if (a2)
    {
      v9 = *(int *)(a1 + 32);
LABEL_14:
      v10 = *a2;
      if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(*a2, v9);
        return 0;
      }
      result = 0;
      *(_QWORD *)v10 = v9;
LABEL_18:
      *(_WORD *)(v10 + 20) = 4;
      return result;
    }
LABEL_16:
    sub_1ACBBE20C(97423);
    return 0;
  }
  if (v5 == 1)
  {
    if (a2)
    {
      v9 = *(_QWORD *)(a1 + 48);
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  v6 = a3;
  if (v5)
  {
LABEL_21:
    result = sub_1ACC64070(0, a1);
    if ((_DWORD)result)
      return result;
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
      v12 = *(_QWORD *)(*(_QWORD *)v11 + 24);
      if (v12)
        xmmword_1ECD3B1C0(v12);
      if (*(_QWORD *)(v11 + 160))
        v13 = *(unsigned __int16 *)(v11 + 260);
      else
        v13 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)v11 + 24);
      if (v14)
        xmmword_1ECD3B1D0(v14);
    }
    else
    {
      v13 = 0;
    }
    if (v13 - 1 > v6)
    {
      v15 = sqlite3_column_value(*(sqlite3_stmt **)(a1 + 16), v6 + 1);
      sqlite3_result_value((sqlite3_context *)a2, v15);
    }
    return 0;
  }
  if (!a2)
  {
    sub_1ACBBE20C(97449);
    return 0;
  }
  v7 = *a2;
  if ((*(_WORD *)(*a2 + 20) & 0x9000) != 0 || *(_DWORD *)(v7 + 32))
    sub_1ACBF2A04(v7);
  *(_WORD *)(v7 + 20) = 1;
  sub_1ACBF2A04(v7);
  result = 0;
  *(_QWORD *)v7 = "fts3cursor";
  *(_QWORD *)(v7 + 8) = a1;
  *(_WORD *)(v7 + 20) = 6657;
  *(_BYTE *)(v7 + 23) = 112;
  *(_BYTE *)(v7 + 56) = 0;
  *(_QWORD *)(v7 + 48) = nullsub_7;
  return result;
}

uint64_t sub_1ACC58F58(uint64_t a1, _QWORD *a2)
{
  *a2 = *(_QWORD *)(a1 + 48);
  return 0;
}

uint64_t sub_1ACC58F68(uint64_t a1, int a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  double v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  sqlite3_stmt *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v20;
  _DWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  sqlite3_stmt *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  double v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  int v34;
  sqlite3_stmt *v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  _DWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t (**v56)(_QWORD);
  unint64_t v57;
  char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  double v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  sqlite3_stmt *v69;
  uint64_t v70;
  uint64_t v71;
  double v72;
  __int16 v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  const char *v77;
  int v78;
  unsigned int v79;
  double v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  sqlite3_stmt *v85;
  int v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  unsigned __int8 *v108;
  uint64_t v109;
  unsigned __int8 *v110;
  uint64_t (**v111)(unsigned __int8 *);
  sqlite3_int64 v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  const unsigned __int8 *v117;
  uint64_t *v118;
  uint64_t v119;
  sqlite3_stmt *v120;
  uint64_t v121;
  sqlite3_stmt *v122;
  sqlite3_stmt *v123;
  int i;
  uint64_t v125;
  sqlite3_stmt *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t j;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  sqlite3_stmt *v134;
  uint64_t v135;
  unsigned int v137;
  unsigned int v138;
  uint64_t v139;
  unsigned __int8 *v140;
  int v141;
  void (**v142)(unsigned __int8 *);
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  void (**v147)(unsigned __int8 *);
  int v148;
  unsigned int v149;
  uint64_t v150;
  unsigned __int8 *v151;
  uint64_t v152;
  uint64_t v153;
  sqlite3_int64 v154;
  sqlite3_int64 v155;
  sqlite3_int64 v156;
  int v157;
  uint64_t v158;
  const unsigned __int8 *v159;
  uint64_t v160;
  unsigned int v162;
  uint64_t v163;
  unint64_t v164;
  char *v165;
  unsigned __int8 *v166;
  int v167;
  unsigned int v168;
  int v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  unsigned __int8 *v180;
  char *v181;
  int v182;
  char *v183;
  int v184;
  unsigned int v185;
  int v186;
  _QWORD *v187;
  sqlite3_stmt *v188;
  _QWORD *v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  unsigned int v193;
  char *v194;
  int v195;
  sqlite3_stmt *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  unsigned int v208;
  int v209;
  sqlite3_stmt *pStmt;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  sqlite3_stmt *v214[2];
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  sqlite3_stmt *v220[2];
  int v221;
  int v222;

  v207 = 0;
  v208 = 0;
  if (a2 < 2)
    goto LABEL_14;
  if (!*a3)
  {
    sub_1ACBBE20C(97202);
    goto LABEL_8;
  }
  if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(*a3 + 20)) & 1) == 0)
  {
LABEL_8:
    v9 = a3[*(int *)(a1 + 48) + 4];
    if (!v9)
    {
      sub_1ACBBE20C(89699);
      goto LABEL_14;
    }
    v10 = *(_WORD *)(v9 + 20);
    if ((v10 & 0x24) != 0)
    {
      v11 = *(double *)v9;
    }
    else if ((v10 & 8) != 0)
    {
      v30 = *(double *)v9;
      if (*(double *)v9 < -9.22337204e18)
        goto LABEL_14;
      if (v30 > 9.22337204e18)
        goto LABEL_12;
      *(_QWORD *)&v11 = (uint64_t)v30;
    }
    else
    {
      if ((v10 & 0x12) == 0 || !*(_QWORD *)(v9 + 8))
        goto LABEL_14;
      LODWORD(v11) = sub_1ACBF2FC0(v9);
    }
    if ((LODWORD(v11) & 0x80000000) != 0)
    {
LABEL_12:
      v12 = 19;
LABEL_16:
      v208 = v12;
      goto LABEL_17;
    }
LABEL_14:
    v13 = *(int *)(a1 + 48);
    if (sqlite3_initialize() || (v20 = (_DWORD *)sub_1ACB5D828(8 * v13 + 8)) == 0)
    {
      v12 = 7;
      goto LABEL_16;
    }
    v21 = v20;
    v22 = *(int *)(a1 + 48) + 1;
    bzero(v20, 8 * v22);
    if (*(_DWORD *)(a1 + 508))
    {
      v208 = 0;
    }
    else
    {
      v214[0] = 0;
      v27 = sub_1ACC52F20((uint64_t *)a1, 16, v214, 0);
      if (v27)
      {
        v208 = v27;
        goto LABEL_131;
      }
      v35 = v214[0];
      if (!sub_1ACBA0E50((uint64_t)v214[0], 0))
      {
        v36 = *(_QWORD *)(*(_QWORD *)v35 + 24);
        if (v36)
          xmmword_1ECD3B1D0(v36);
      }
      sqlite3_step(v35);
      v208 = sqlite3_reset(v35);
      if (v208)
      {
LABEL_131:
        v56 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v21);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v21);
          v21 = (_DWORD *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_17;
          v56 = &xmmword_1ECD3B1D0;
        }
        (*v56)(v21);
        goto LABEL_17;
      }
    }
    if (a2 < 2 || *(_QWORD *)(a1 + 80))
      goto LABEL_29;
    v37 = a3[*(int *)(a1 + 48) + 3];
    if (v37)
    {
      if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v37 + 20)) & 1) == 0)
        goto LABEL_177;
      v37 = a3[1];
      if (v37)
      {
        if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v37 + 20)) & 1) != 0)
          goto LABEL_29;
LABEL_177:
        v61 = *a3;
        if (*a3)
        {
          v62 = *(_WORD *)(v61 + 20);
          if (((0xAAAAAAAAAAAAAAAALL >> v62) & 1) != 0)
          {
LABEL_222:
            v75 = *(_QWORD *)(a1 + 24);
            if (v75)
            {
              v76 = *(unsigned __int8 *)(v75 + 113);
              switch(v76)
              {
                case 186:
                  goto LABEL_226;
                case 118:
                  v78 = *(unsigned __int8 *)(v75 + 108);
                  if ((v78 - 1) < 5)
                  {
                    if (v78 == 5)
                    {
                      v79 = sub_1ACC652B8(a1, (sqlite3_stmt *)v37, &v207, v21);
                      v23 = 1;
                      goto LABEL_239;
                    }
LABEL_238:
                    v79 = sub_1ACC655C8(a1, a3, a4);
                    v23 = 0;
LABEL_239:
                    v208 = v79;
                    if (v79)
                      goto LABEL_131;
LABEL_30:
                    v24 = (uint64_t)&v21[v22];
                    v25 = (sqlite3_stmt *)*a3;
                    if (*a3)
                    {
                      if (((0xAAAAAAAAAAAAAAAALL >> *((_WORD *)v25 + 10)) & 1) != 0)
                      {
                        v26 = 0;
LABEL_52:
                        if (a2 < 2 || v26)
                        {
LABEL_129:
                          if (*(_BYTE *)(a1 + 460))
                            sub_1ACC65B24((int *)&v208, a1, v24, (uint64_t)v21, v207);
                          goto LABEL_131;
                        }
                        v31 = a3[*(int *)(a1 + 48) + 4];
                        if (v31)
                        {
                          v32 = *(_WORD *)(v31 + 20);
                          if ((v32 & 0x24) != 0)
                          {
                            v33 = *(_QWORD *)v31;
                            goto LABEL_78;
                          }
                          if ((v32 & 8) != 0)
                          {
                            v64 = *(double *)v31;
                            if (*(double *)v31 >= -9.22337204e18)
                            {
                              if (v64 <= 9.22337204e18)
                                v33 = (uint64_t)v64;
                              else
                                v33 = 0x7FFFFFFFFFFFFFFFLL;
                            }
                            else
                            {
                              v33 = 0x8000000000000000;
                            }
LABEL_78:
                            if (v23)
                            {
                              v38 = sub_1ACC655C8(a1, a3, a4);
                              v208 = v38;
                              if (v38)
                              {
                                if (v38 == 19 && !*(_QWORD *)(a1 + 80))
                                  v208 = 267;
                                goto LABEL_126;
                              }
                            }
                            v39 = *a4;
                            v40 = *(_QWORD *)(a1 + 512);
                            if (v40 <= v39
                              && (v40 != v39 || *(_DWORD *)(a1 + 524))
                              && *(_DWORD *)(a1 + 520) == (_DWORD)v33
                              && *(_DWORD *)(a1 + 508) <= *(_DWORD *)(a1 + 504)
                              || (v41 = sub_1ACC66198(a1)) == 0)
                            {
                              *(_QWORD *)(a1 + 512) = v39;
                              *(_DWORD *)(a1 + 520) = v33;
                              *(_DWORD *)(a1 + 524) = 0;
                              v42 = *(_DWORD *)(a1 + 48);
                              if (v42 >= 1)
                              {
                                v43 = 0;
                                v44 = a3 + 2;
                                v45 = (_DWORD *)v24;
                                do
                                {
                                  if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + v43))
                                    goto LABEL_104;
                                  v51 = v44[v43];
                                  if (!v51)
                                    goto LABEL_112;
                                  v52 = *(unsigned __int16 *)(v51 + 20);
                                  if ((~v52 & 0x202) == 0 && *(_BYTE *)(v51 + 22) == 1)
                                  {
                                    v53 = *(_QWORD *)(v51 + 8);
                                    goto LABEL_113;
                                  }
                                  if ((v52 & 1) != 0)
LABEL_112:
                                    v53 = 0;
                                  else
                                    v53 = sub_1ACBF2B64((int *)v51, 1);
LABEL_113:
                                  v41 = sub_1ACC681EC(a1, v33, v53, v43, v45);
                                  if (v41)
                                    goto LABEL_125;
                                  v54 = v44[v43];
                                  if (!v54)
                                  {
                                    sub_1ACBBE20C(91120);
LABEL_121:
                                    v49 = 0;
                                    goto LABEL_103;
                                  }
                                  v55 = *(_WORD *)(v54 + 20);
                                  if ((v55 & 2) != 0 && *(_BYTE *)(v54 + 22) == 1)
                                  {
                                    v49 = *(_DWORD *)(v54 + 16);
                                  }
                                  else
                                  {
                                    if ((v55 & 0x10) != 0)
                                    {
                                      v49 = *(_DWORD *)(v54 + 16);
                                      if ((*(_WORD *)(v54 + 20) & 0x400) != 0)
                                        v49 += *(_DWORD *)v54;
                                      goto LABEL_103;
                                    }
                                    if ((v55 & 1) != 0)
                                      goto LABEL_121;
                                    v49 = sub_1ACBF2B3C(v54, 1);
                                  }
LABEL_103:
                                  *(_DWORD *)(v24 + 4 * *(int *)(a1 + 48)) += v49;
                                  v42 = *(_DWORD *)(a1 + 48);
LABEL_104:
                                  v50 = v43 + 2;
                                  ++v43;
                                  ++v45;
                                }
                                while (v50 <= v42);
                              }
                              v41 = 0;
                            }
LABEL_125:
                            v208 = v41;
LABEL_126:
                            if (*(_BYTE *)(a1 + 462))
                              sub_1ACC65914((uint64_t)&v208, a1, v24);
                            ++v207;
                            goto LABEL_129;
                          }
                          if ((v32 & 0x12) != 0 && *(_QWORD *)(v31 + 8))
                          {
                            v33 = sub_1ACBF2FC0(v31);
                            goto LABEL_78;
                          }
                        }
                        else
                        {
                          sub_1ACBBE20C(89699);
                        }
                        v33 = 0;
                        goto LABEL_78;
                      }
                    }
                    else
                    {
                      sub_1ACBBE20C(97202);
                      v25 = (sqlite3_stmt *)*a3;
                    }
                    v26 = sub_1ACC652B8(a1, v25, &v207, v21);
                    v208 = v26;
                    goto LABEL_52;
                  }
LABEL_237:
                  sub_1ACBBE20C(162422);
                  goto LABEL_238;
                case 109:
LABEL_226:
                  v77 = "unopened";
                  break;
                default:
                  v77 = "invalid";
                  break;
              }
            }
            else
            {
              v77 = "NULL";
            }
            sqlite3_log(21, "API call with %s database connection pointer", v77);
            goto LABEL_237;
          }
        }
        else
        {
          sub_1ACBBE20C(97202);
          v61 = *a3;
          if (!*a3)
          {
            sub_1ACBBE20C(89699);
            goto LABEL_205;
          }
          v62 = *(_WORD *)(v61 + 20);
        }
        if ((v62 & 0x24) != 0)
        {
          v63 = *(_QWORD *)v61;
          goto LABEL_216;
        }
        if ((v62 & 8) != 0)
        {
          v72 = *(double *)v61;
          if (*(double *)v61 >= -9.22337204e18)
          {
            if (v72 <= 9.22337204e18)
              v63 = (uint64_t)v72;
            else
              v63 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else
          {
            v63 = 0x8000000000000000;
          }
LABEL_216:
          if (v37)
          {
            v73 = *(_WORD *)(v37 + 20);
            if ((v73 & 0x24) != 0)
            {
              v74 = *(_QWORD *)v37;
              goto LABEL_221;
            }
            if ((v73 & 8) != 0)
            {
              v80 = *(double *)v37;
              if (*(double *)v37 >= -9.22337204e18)
              {
                if (v80 <= 9.22337204e18)
                  v74 = (uint64_t)v80;
                else
                  v74 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else
              {
                v74 = 0x8000000000000000;
              }
LABEL_221:
              if (v63 != v74)
                goto LABEL_222;
LABEL_29:
              v23 = 1;
              goto LABEL_30;
            }
            if ((v73 & 0x12) != 0 && *(_QWORD *)(v37 + 8))
            {
              v74 = sub_1ACBF2FC0(v37);
              goto LABEL_221;
            }
          }
          else
          {
            sub_1ACBBE20C(89699);
          }
          v74 = 0;
          goto LABEL_221;
        }
        if ((v62 & 0x12) != 0 && *(_QWORD *)(v61 + 8))
        {
          v63 = sub_1ACBF2FC0(v61);
          goto LABEL_216;
        }
LABEL_205:
        v63 = 0;
        goto LABEL_216;
      }
    }
    else
    {
      sub_1ACBBE20C(97202);
    }
    sub_1ACBBE20C(97202);
    v37 = 0;
    goto LABEL_177;
  }
  v8 = a3[*(int *)(a1 + 48) + 2];
  if (v8)
  {
    if (((0xAAAAAAAAAAAAAAAALL >> *(_WORD *)(v8 + 20)) & 1) == 0)
      goto LABEL_40;
    goto LABEL_8;
  }
  sub_1ACBBE20C(97202);
  v8 = a3[*(int *)(a1 + 48) + 2];
  if (!v8)
  {
    sub_1ACBBE20C(91120);
LABEL_101:
    v208 = 7;
    goto LABEL_17;
  }
LABEL_40:
  v28 = *(unsigned __int16 *)(v8 + 20);
  if ((~v28 & 0x202) != 0 || *(_BYTE *)(v8 + 22) != 1)
  {
    if ((v28 & 1) != 0)
    {
      v29 = 0;
      if ((v28 & 2) == 0)
        goto LABEL_60;
    }
    else
    {
      v29 = (unsigned __int8 *)sub_1ACBF2B64((int *)v8, 1);
      LOWORD(v28) = *(_WORD *)(v8 + 20);
      if ((v28 & 2) == 0)
        goto LABEL_60;
    }
  }
  else
  {
    v29 = *(unsigned __int8 **)(v8 + 8);
    if ((v28 & 2) == 0)
      goto LABEL_60;
  }
  if (*(_BYTE *)(v8 + 22) == 1)
  {
    v34 = *(_DWORD *)(v8 + 16);
    goto LABEL_92;
  }
LABEL_60:
  if ((v28 & 0x10) != 0)
  {
    v34 = *(_DWORD *)(v8 + 16);
    if ((v28 & 0x400) != 0)
      v34 += *(_DWORD *)v8;
  }
  else if ((v28 & 1) != 0)
  {
    v34 = 0;
  }
  else
  {
    v34 = sub_1ACBF2B3C(v8, 1);
  }
LABEL_92:
  if (!v29)
    goto LABEL_101;
  if (v34 == 7)
  {
    v57 = *v29;
    if (!*v29)
    {
      v58 = "rebuild";
      goto LABEL_361;
    }
    if ((v57 & 0xFFFFFFDF) == 0x52)
    {
      v57 = v29[1];
      if (!v29[1])
      {
        v58 = "ebuild";
        goto LABEL_361;
      }
      if ((v57 & 0xFFFFFFDF) == 0x45)
      {
        v57 = v29[2];
        if (!v29[2])
        {
          v58 = "build";
          goto LABEL_361;
        }
        if ((v57 & 0xFFFFFFDF) == 0x42)
        {
          v57 = v29[3];
          if (!v29[3])
          {
            v58 = "uild";
            goto LABEL_361;
          }
          if ((v57 & 0xFFFFFFDF) == 0x55)
          {
            v57 = v29[4];
            if (!v29[4])
            {
              v58 = "ild";
              goto LABEL_361;
            }
            if ((v57 & 0xFFFFFFDF) == 0x49)
            {
              v57 = v29[5];
              if (!v29[5])
              {
                v58 = "ld";
                goto LABEL_361;
              }
              if ((v57 & 0xFFFFFFDF) == 0x4C)
              {
                v57 = v29[6];
                if (!v29[6])
                {
                  v58 = "d";
LABEL_361:
                  if ((_DWORD)v57 != byte_1ACCB6333[*v58])
                  {
                    v34 = 7;
                    goto LABEL_431;
                  }
LABEL_362:
                  v138 = sub_1ACC680AC(a1, 0);
                  if (v138)
                    goto LABEL_429;
                  v214[0] = 0;
                  v140 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s", *(const char **)(a1 + 440));
                  if (!v140)
                    goto LABEL_375;
                  v141 = sub_1ACB5C66C(*(_QWORD *)(a1 + 24), v140, 0xFFFFFFFFLL, 128, 0, v214, 0, v139);
                  LODWORD(v220[0]) = v141;
                  v142 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
                  if (dword_1ECD3B140)
                  {
                    if ((_QWORD)xmmword_1ECD3E930)
                      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v140);
                    --qword_1ECD3E8D0;
                    off_1ECD3B168(v140);
                    v140 = (unsigned __int8 *)xmmword_1ECD3E930;
                    if (!(_QWORD)xmmword_1ECD3E930)
                      goto LABEL_370;
                    v142 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
                  }
                  (*v142)(v140);
LABEL_370:
                  if (v141)
                  {
                    v140 = 0;
                    v143 = 0;
                    v144 = 0;
                    v145 = 0;
                    goto LABEL_376;
                  }
                  v146 = *(_DWORD *)(a1 + 48);
                  if (!sqlite3_initialize())
                  {
                    v150 = 12 * v146 + 12;
                    v151 = (unsigned __int8 *)sub_1ACB5D828(v150);
                    if (v151)
                    {
                      v140 = v151;
                      bzero(v151, v150);
                      v152 = 4 * *(int *)(a1 + 48) + 4;
                      v144 = (uint64_t)&v140[v152];
                      v143 = (uint64_t)&v140[v152 + v152];
                      if (sqlite3_step(v214[0]) == 100)
                      {
                        v145 = 0;
                        while (1)
                        {
                          if (*(_QWORD *)(a1 + 88))
                            v153 = sqlite3_column_int(v214[0], *(_DWORD *)(a1 + 48) + 1);
                          else
                            v153 = 0;
                          v154 = sqlite3_column_int64(v214[0], 0);
                          v155 = v154;
                          v156 = *(_QWORD *)(a1 + 512);
                          if (v156 <= v154
                            && (v156 != v154 || *(_DWORD *)(a1 + 524))
                            && *(_DWORD *)(a1 + 520) == (_DWORD)v153
                            && *(_DWORD *)(a1 + 508) <= *(_DWORD *)(a1 + 504)
                            || (v157 = sub_1ACC66198(a1)) == 0)
                          {
                            v157 = 0;
                            *(_QWORD *)(a1 + 512) = v155;
                            *(_DWORD *)(a1 + 520) = v153;
                            *(_DWORD *)(a1 + 524) = 0;
                          }
                          LODWORD(v220[0]) = v157;
                          bzero(v140, 4 * *(int *)(a1 + 48) + 4);
                          if (!v157)
                          {
                            v158 = 0;
                            while (v158 < *(int *)(a1 + 48))
                            {
                              if (*(_BYTE *)(*(_QWORD *)(a1 + 64) + v158))
                              {
                                ++v158;
                              }
                              else
                              {
                                v159 = sqlite3_column_text(v214[0], (int)v158 + 1);
                                v157 = sub_1ACC681EC(a1, v153, (uint64_t)v159, v158, &v140[4 * v158]);
                                *(_DWORD *)&v140[4 * *(int *)(a1 + 48)] += sqlite3_column_bytes(v214[0], ++v158);
                                if (v157)
                                  break;
                              }
                            }
                            LODWORD(v220[0]) = v157;
                          }
                          if (*(_BYTE *)(a1 + 462))
                          {
                            sub_1ACC65914((uint64_t)v220, a1, (uint64_t)v140);
                            v157 = (int)v220[0];
                          }
                          if (v157)
                            break;
                          if ((*(_DWORD *)(a1 + 48) & 0x80000000) == 0)
                          {
                            v160 = 0;
                            do
                              *(_DWORD *)(v144 + 4 * v160) += *(_DWORD *)&v140[4 * v160];
                            while (v160++ < *(int *)(a1 + 48));
                          }
                          ++v145;
                          if (sqlite3_step(v214[0]) != 100)
                            goto LABEL_376;
                        }
                        sqlite3_finalize(v214[0]);
                        v214[0] = 0;
                      }
                      else
                      {
                        v145 = 0;
                      }
LABEL_376:
                      if (*(_BYTE *)(a1 + 460))
                        sub_1ACC65B24((int *)v220, a1, v144, v143, v145);
                      if (!v140)
                        goto LABEL_385;
                      v147 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
                      if (dword_1ECD3B140)
                      {
                        if ((_QWORD)xmmword_1ECD3E930)
                          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v140);
                        --qword_1ECD3E8D0;
                        off_1ECD3B168(v140);
                        v140 = (unsigned __int8 *)xmmword_1ECD3E930;
                        if (!(_QWORD)xmmword_1ECD3E930)
                          goto LABEL_385;
                        v147 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
                      }
                      (*v147)(v140);
LABEL_385:
                      if (v214[0])
                      {
                        v148 = sqlite3_finalize(v214[0]);
                        if (LODWORD(v220[0]))
                          v149 = v220[0];
                        else
                          v149 = v148;
                        v208 = v149;
                      }
                      else
                      {
                        v208 = v220[0];
                      }
                      goto LABEL_17;
                    }
                  }
                  v140 = 0;
LABEL_375:
                  v143 = 0;
                  v144 = 0;
                  v145 = 0;
                  LODWORD(v220[0]) = 7;
                  goto LABEL_376;
                }
                if ((v57 & 0xFFFFFFDF) == 0x44)
                  goto LABEL_362;
                v57 += (unint64_t)byte_1ACCB6333;
                v58 = "d";
              }
              else
              {
                v57 += (unint64_t)byte_1ACCB6333;
                v58 = "ld";
              }
            }
            else
            {
              v57 += (unint64_t)byte_1ACCB6333;
              v58 = "ild";
            }
          }
          else
          {
            v57 += (unint64_t)byte_1ACCB6333;
            v58 = "uild";
          }
        }
        else
        {
          v57 += (unint64_t)byte_1ACCB6333;
          v58 = "build";
        }
      }
      else
      {
        v57 += (unint64_t)byte_1ACCB6333;
        v58 = "ebuild";
      }
    }
    else
    {
      v57 += (unint64_t)byte_1ACCB6333;
      v58 = "rebuild";
    }
    LODWORD(v57) = *(unsigned __int8 *)v57;
    goto LABEL_361;
  }
  if (v34 == 8)
  {
    v59 = *v29;
    if (!*v29)
    {
      v60 = "optimize";
      goto LABEL_426;
    }
    if ((v59 & 0xFFFFFFDF) == 0x4F)
    {
      v59 = v29[1];
      if (!v29[1])
      {
        v60 = "ptimize";
        goto LABEL_426;
      }
      if ((v59 & 0xFFFFFFDF) == 0x50)
      {
        v59 = v29[2];
        if (!v29[2])
        {
          v60 = "timize";
          goto LABEL_426;
        }
        if ((v59 & 0xFFFFFFDF) == 0x54)
        {
          v59 = v29[3];
          if (!v29[3])
          {
            v60 = "imize";
            goto LABEL_426;
          }
          if ((v59 & 0xFFFFFFDF) == 0x49)
          {
            v59 = v29[4];
            if (!v29[4])
            {
              v60 = "mize";
              goto LABEL_426;
            }
            if ((v59 & 0xFFFFFFDF) == 0x4D)
            {
              v59 = v29[5];
              if (!v29[5])
              {
                v60 = "ize";
                goto LABEL_426;
              }
              if ((v59 & 0xFFFFFFDF) == 0x49)
              {
                v59 = v29[6];
                if (!v29[6])
                {
                  v60 = "ze";
                  goto LABEL_426;
                }
                if ((v59 & 0xFFFFFFDF) == 0x5A)
                {
                  v59 = v29[7];
                  if (!v29[7])
                  {
                    v60 = "e";
LABEL_426:
                    if ((_DWORD)v59 != byte_1ACCB6333[*v60])
                    {
                      v34 = 8;
                      goto LABEL_431;
                    }
LABEL_427:
                    v162 = sub_1ACC65F70(a1, 0);
LABEL_428:
                    v138 = v162;
                    goto LABEL_429;
                  }
                  if ((v59 & 0xFFFFFFDF) == 0x45)
                    goto LABEL_427;
                  v59 += (unint64_t)byte_1ACCB6333;
                  v60 = "e";
                }
                else
                {
                  v59 += (unint64_t)byte_1ACCB6333;
                  v60 = "ze";
                }
              }
              else
              {
                v59 += (unint64_t)byte_1ACCB6333;
                v60 = "ize";
              }
            }
            else
            {
              v59 += (unint64_t)byte_1ACCB6333;
              v60 = "mize";
            }
          }
          else
          {
            v59 += (unint64_t)byte_1ACCB6333;
            v60 = "imize";
          }
        }
        else
        {
          v59 += (unint64_t)byte_1ACCB6333;
          v60 = "timize";
        }
      }
      else
      {
        v59 += (unint64_t)byte_1ACCB6333;
        v60 = "ptimize";
      }
    }
    else
    {
      v59 += (unint64_t)byte_1ACCB6333;
      v60 = "optimize";
    }
    LODWORD(v59) = *(unsigned __int8 *)v59;
    goto LABEL_426;
  }
  if (v34 != 15)
  {
    if (v34 < 7)
      goto LABEL_543;
LABEL_431:
    v163 = *v29;
    if (!*v29)
    {
      LODWORD(v164) = 0;
      v165 = "merge=";
      goto LABEL_455;
    }
    if ((v163 & 0xFFFFFFDF) == 0x4D)
    {
      v164 = v29[1];
      if (!v29[1])
      {
        v165 = "erge=";
        goto LABEL_455;
      }
      if ((v164 & 0xFFFFFFDF) == 0x45)
      {
        v164 = v29[2];
        if (!v29[2])
        {
          v165 = "rge=";
          goto LABEL_455;
        }
        if ((v164 & 0xFFFFFFDF) == 0x52)
        {
          v164 = v29[3];
          if (!v29[3])
          {
            v165 = "ge=";
            goto LABEL_455;
          }
          if ((v164 & 0xFFFFFFDF) == 0x47)
          {
            v164 = v29[4];
            if (!v29[4])
            {
              v165 = "e=";
              goto LABEL_455;
            }
            if ((v164 & 0xFFFFFFDF) == 0x45)
            {
              v164 = v29[5];
              if (!v29[5])
              {
                v165 = "=";
LABEL_455:
                if ((_DWORD)v164 == byte_1ACCB6333[*v165])
                {
LABEL_456:
                  v167 = (char)v29[6];
                  v166 = v29 + 6;
                  v168 = v167;
                  if (v167 >= 48)
                  {
                    v169 = 0;
                    v138 = 1;
                    while (v168 <= 0x39 && v169 < 214748363)
                    {
                      v170 = (char)*++v166;
                      v169 = v168 + 10 * v169 - 48;
                      v168 = v170;
                      if (v170 <= 47)
                        goto LABEL_485;
                    }
                    goto LABEL_429;
                  }
                  v169 = 0;
LABEL_485:
                  LODWORD(v214[0]) = 0;
                  if (v168 == 44)
                  {
                    if ((char)v166[1] >= 48)
                    {
                      v182 = 0;
                      v168 = v166[1];
                      v183 = (char *)(v166 + 2);
                      v138 = 1;
                      while (v168 <= 0x39 && v182 < 214748363)
                      {
                        v182 = v168 + 10 * v182 - 48;
                        v184 = *v183++;
                        v168 = v184;
                        if (v184 <= 47)
                          goto LABEL_493;
                      }
                      goto LABEL_429;
                    }
LABEL_543:
                    v208 = 1;
                    goto LABEL_17;
                  }
                  v182 = 8;
LABEL_493:
                  v138 = 1;
                  if (v168 || v182 < 2)
                    goto LABEL_429;
                  if (!*(_BYTE *)(a1 + 461))
                  {
                    sub_1ACC5E470((char *)v214, *(sqlite3 **)(a1 + 24), "CREATE TABLE IF NOT EXISTS %Q.'%q_stat'(id INTEGER PRIMARY KEY, value BLOB);",
                      *(_QWORD *)(a1 + 32),
                      *(_QWORD *)(a1 + 40));
                    v185 = v214[0];
                    if (LODWORD(v214[0]))
                      goto LABEL_500;
                    *(_BYTE *)(a1 + 461) = 1;
                  }
                  v185 = sub_1ACC68600(a1, v169, v182);
LABEL_500:
                  v187 = *(_QWORD **)(a1 + 480);
                  if (v187)
                  {
                    v188 = (sqlite3_stmt *)v187[3];
                    v189 = (_QWORD *)v187[4];
                    v190 = v189[3];
                    if (v190)
                      xmmword_1ECD3B1C0(v190);
                    sub_1ACBE0F9C(v189, v187);
                    v191 = v189[3];
                    if (v191)
                      xmmword_1ECD3B1D0(v191);
                    sqlite3_finalize(v188);
                  }
                  *(_QWORD *)(a1 + 480) = 0;
                  v208 = v185;
                  goto LABEL_17;
                }
                if (v34 < 0xB)
                  goto LABEL_543;
                if (!*v29)
                {
                  v186 = 0;
                  v181 = "automerge=";
                  goto LABEL_527;
                }
                if ((v163 & 0xFFFFFFDF) == 0x41)
                {
                  v171 = v29[1];
                  if (!v29[1])
                  {
                    v186 = 0;
                    v181 = "utomerge=";
                    goto LABEL_527;
                  }
                  if ((v171 & 0xFFFFFFDF) == 0x55)
                  {
                    v172 = v29[2];
                    if (!v29[2])
                    {
                      v186 = 0;
                      v181 = "tomerge=";
                      goto LABEL_527;
                    }
                    if ((v172 & 0xFFFFFFDF) == 0x54)
                    {
                      v173 = v29[3];
                      if (!v29[3])
                      {
                        v186 = 0;
                        v181 = "omerge=";
                        goto LABEL_527;
                      }
                      if ((v173 & 0xFFFFFFDF) == 0x4F)
                      {
                        v174 = v29[4];
                        if (!v29[4])
                        {
                          v186 = 0;
                          v181 = "merge=";
                          goto LABEL_527;
                        }
                        if ((v174 & 0xFFFFFFDF) == 0x4D)
                        {
                          v175 = v29[5];
                          if (!v29[5])
                          {
                            v186 = 0;
                            v181 = "erge=";
                            goto LABEL_527;
                          }
                          if ((v175 & 0xFFFFFFDF) == 0x45)
                          {
                            v176 = v29[6];
                            if (!v29[6])
                            {
                              v186 = 0;
                              v181 = "rge=";
                              goto LABEL_527;
                            }
                            if ((v176 & 0xFFFFFFDF) == 0x52)
                            {
                              v177 = v29[7];
                              if (!v29[7])
                              {
                                v186 = 0;
                                v181 = "ge=";
                                goto LABEL_527;
                              }
                              if ((v177 & 0xFFFFFFDF) == 0x47)
                              {
                                v178 = v29[8];
                                if (!v29[8])
                                {
                                  v186 = 0;
                                  v181 = "e=";
                                  goto LABEL_527;
                                }
                                if ((v178 & 0xFFFFFFDF) == 0x45)
                                {
                                  v179 = v29[9];
                                  if (!v29[9])
                                  {
                                    v186 = 0;
                                    v181 = "=";
LABEL_527:
                                    if (v186 != byte_1ACCB6333[*v181])
                                      goto LABEL_543;
LABEL_528:
                                    v192 = 0;
                                    LODWORD(v220[0]) = 0;
                                    v214[0] = 0;
                                    v193 = v29[10];
                                    if ((char)v193 >= 48)
                                    {
                                      v192 = 0;
                                      v194 = (char *)(v29 + 11);
                                      do
                                      {
                                        if (v193 > 0x39)
                                          break;
                                        if (v192 >= 214748363)
                                          break;
                                        v192 = v193 + 10 * v192 - 48;
                                        v195 = *v194++;
                                        v193 = v195;
                                      }
                                      while (v195 > 47);
                                    }
                                    if (v192 > 16 || v192 == 1)
                                      v192 = 8;
                                    *(_DWORD *)(a1 + 96) = v192;
                                    if (!*(_BYTE *)(a1 + 461))
                                    {
                                      sub_1ACC5E470((char *)v220, *(sqlite3 **)(a1 + 24), "CREATE TABLE IF NOT EXISTS %Q.'%q_stat'(id INTEGER PRIMARY KEY, value BLOB);",
                                        *(_QWORD *)(a1 + 32),
                                        *(_QWORD *)(a1 + 40));
                                      v138 = v220[0];
                                      if (LODWORD(v220[0]))
                                        goto LABEL_429;
                                      *(_BYTE *)(a1 + 461) = 1;
                                    }
                                    v138 = sub_1ACC52F20((uint64_t *)a1, 23, v214, 0);
                                    if (!v138)
                                    {
                                      v197 = v214[0];
                                      if (!sub_1ACBA0E50((uint64_t)v214[0], 0))
                                      {
                                        v198 = *((_QWORD *)v197 + 16);
                                        if ((*(_WORD *)(v198 + 20) & 0x9000) != 0)
                                        {
                                          sub_1ACBF327C(v198, 2);
                                        }
                                        else
                                        {
                                          *(_QWORD *)v198 = 2;
                                          *(_WORD *)(v198 + 20) = 4;
                                        }
                                        v199 = *(_QWORD *)(*(_QWORD *)v197 + 24);
                                        if (v199)
                                          xmmword_1ECD3B1D0(v199);
                                      }
                                      v200 = *(int *)(a1 + 96);
                                      if (!sub_1ACBA0E50((uint64_t)v197, 1u))
                                      {
                                        v201 = *((_QWORD *)v197 + 16);
                                        if ((*(_WORD *)(v201 + 84) & 0x9000) != 0)
                                        {
                                          sub_1ACBF327C(v201 + 64, v200);
                                        }
                                        else
                                        {
                                          *(_QWORD *)(v201 + 64) = v200;
                                          *(_WORD *)(v201 + 84) = 4;
                                        }
                                        v202 = *(_QWORD *)(*(_QWORD *)v197 + 24);
                                        if (v202)
                                          xmmword_1ECD3B1D0(v202);
                                      }
                                      sqlite3_step(v197);
                                      v162 = sqlite3_reset(v197);
                                      goto LABEL_428;
                                    }
LABEL_429:
                                    v208 = v138;
                                    goto LABEL_17;
                                  }
                                  if ((_DWORD)v179 == 61)
                                    goto LABEL_528;
                                  v180 = &byte_1ACCB6333[v179];
                                  v181 = "=";
                                }
                                else
                                {
                                  v180 = &byte_1ACCB6333[v178];
                                  v181 = "e=";
                                }
                              }
                              else
                              {
                                v180 = &byte_1ACCB6333[v177];
                                v181 = "ge=";
                              }
                            }
                            else
                            {
                              v180 = &byte_1ACCB6333[v176];
                              v181 = "rge=";
                            }
                          }
                          else
                          {
                            v180 = &byte_1ACCB6333[v175];
                            v181 = "erge=";
                          }
                        }
                        else
                        {
                          v180 = &byte_1ACCB6333[v174];
                          v181 = "merge=";
                        }
                      }
                      else
                      {
                        v180 = &byte_1ACCB6333[v173];
                        v181 = "omerge=";
                      }
                    }
                    else
                    {
                      v180 = &byte_1ACCB6333[v172];
                      v181 = "tomerge=";
                    }
                  }
                  else
                  {
                    v180 = &byte_1ACCB6333[v171];
                    v181 = "utomerge=";
                  }
                }
                else
                {
                  v180 = &byte_1ACCB6333[v163];
                  v181 = "automerge=";
                }
                v186 = *v180;
                goto LABEL_527;
              }
              if ((_DWORD)v164 == 61)
                goto LABEL_456;
              v164 += (unint64_t)byte_1ACCB6333;
              v165 = "=";
            }
            else
            {
              v164 += (unint64_t)byte_1ACCB6333;
              v165 = "e=";
            }
          }
          else
          {
            v164 += (unint64_t)byte_1ACCB6333;
            v165 = "ge=";
          }
        }
        else
        {
          v164 += (unint64_t)byte_1ACCB6333;
          v165 = "rge=";
        }
      }
      else
      {
        v164 += (unint64_t)byte_1ACCB6333;
        v165 = "erge=";
      }
    }
    else
    {
      v164 = (unint64_t)&byte_1ACCB6333[v163];
      v165 = "merge=";
    }
    LODWORD(v164) = *(unsigned __int8 *)v164;
    goto LABEL_455;
  }
  v46 = 0;
  while (1)
  {
    v47 = v29[v46];
    if (!v29[v46])
      break;
    LODWORD(v47) = byte_1ACCB6333[v47];
    v48 = byte_1ACCB6333[aIntegrityCheck_1[v46]];
    if ((_DWORD)v47 != v48)
      goto LABEL_189;
    if (++v46 == 15)
      goto LABEL_190;
  }
  v48 = byte_1ACCB6333[aIntegrityCheck_1[v46]];
LABEL_189:
  if ((_DWORD)v47 != v48)
  {
    v34 = 15;
    goto LABEL_431;
  }
LABEL_190:
  pStmt = 0;
  v65 = sub_1ACC52F20((uint64_t *)a1, 27, &pStmt, 0);
  if (v65)
  {
    v66 = v65;
    v67 = 0;
    v68 = 0;
    goto LABEL_346;
  }
  v69 = pStmt;
  v70 = *(int *)(a1 + 520);
  if (!sub_1ACBA0E50((uint64_t)pStmt, 0))
  {
    v71 = *((_QWORD *)v69 + 16);
    if ((*(_WORD *)(v71 + 20) & 0x9000) != 0)
    {
      sub_1ACBF327C(v71, v70);
    }
    else
    {
      *(_QWORD *)v71 = v70;
      *(_WORD *)(v71 + 20) = 4;
    }
    v81 = *(_QWORD *)(*(_QWORD *)v69 + 24);
    if (v81)
      xmmword_1ECD3B1D0(v81);
  }
  v82 = *(int *)(a1 + 488);
  if (!sub_1ACBA0E50((uint64_t)v69, 1u))
  {
    v83 = *((_QWORD *)v69 + 16);
    if ((*(_WORD *)(v83 + 84) & 0x9000) != 0)
    {
      sub_1ACBF327C(v83 + 64, v82);
    }
    else
    {
      *(_QWORD *)(v83 + 64) = v82;
      *(_WORD *)(v83 + 84) = 4;
    }
    v84 = *(_QWORD *)(*(_QWORD *)v69 + 24);
    if (v84)
      xmmword_1ECD3B1D0(v84);
  }
  v67 = 0;
  while (1)
  {
    v85 = pStmt;
    if (sqlite3_step(pStmt) != 100)
      break;
    v86 = sqlite3_column_int(v85, 0);
    v87 = *(_DWORD *)(a1 + 488);
    if (v87 < 1)
    {
      v66 = 0;
    }
    else
    {
      v88 = v86;
      v89 = 0;
      v66 = 0;
      v90 = v86;
      do
      {
        if (v66)
        {
          v91 = 0;
        }
        else
        {
          v220[1] = 0;
          v222 = 0;
          v220[0] = 0;
          v221 = 19;
          *(_OWORD *)v214 = 0u;
          v215 = 0u;
          v216 = 0u;
          v217 = 0u;
          v218 = 0u;
          v219 = 0;
          v92 = sub_1ACC51FD0(a1, v88, v89, 0xFFFFFFFE, 0, 0, 0, 1, (uint64_t)v214);
          if (v92
            || (*(_QWORD *)&v215 = v220, (v92 = sub_1ACC53478(a1, (uint64_t *)v214, 0, 0)) != 0)
            || (v92 = sub_1ACC53D44(a1, (uint64_t)v214), v92 != 100))
          {
            v66 = v92;
            v91 = 0;
          }
          else
          {
            v91 = 0;
            do
            {
              v94 = *((_QWORD *)&v218 + 1);
              v95 = (int)v219;
              v212 = 0;
              v213 = 0;
              v96 = sub_1ACC53378(*((char **)&v218 + 1), &v213);
              if (v96 < (int)v95)
              {
                v97 = 0;
                v98 = v94 + v95;
                v99 = (char *)(v94 + v96);
                do
                {
                  v211 = 0;
                  v99 += (int)sub_1ACC53378(v99, &v211);
                  if ((unint64_t)v99 < v98)
                  {
                    if (v211 <= 1)
                    {
                      v212 = 0;
                      if (v211)
                      {
                        v97 = 0;
                        v99 += (int)sub_1ACC53378(v99, &v212);
                      }
                      else
                      {
                        v99 += (int)sub_1ACC53378(v99, &v211);
                        v97 = 0;
                        if (*(_BYTE *)(a1 + 463))
                          v105 = v213 - v211;
                        else
                          v105 = v211 + v213;
                        v213 = v105;
                      }
                    }
                    else
                    {
                      v97 = v97 + v211 - 2;
                      v100 = v218;
                      v101 = v213
                           + v90
                           + 8 * v213
                           + v89
                           + 8 * (v213 + v90 + 8 * v213)
                           + (int)v212
                           + 8 * (v213 + v90 + 8 * v213 + v89 + 8 * (v213 + v90 + 8 * v213));
                      v102 = v101 + (int)v97 + 8 * v101;
                      if ((int)v218 >= 1)
                      {
                        v103 = (char *)*((_QWORD *)&v217 + 1);
                        do
                        {
                          v104 = *v103++;
                          v102 = 9 * v102 + v104;
                          --v100;
                        }
                        while (v100);
                      }
                      v91 ^= v102;
                    }
                  }
                }
                while ((unint64_t)v99 < v98);
              }
              v93 = sub_1ACC53D44(a1, (uint64_t)v214);
            }
            while (v93 == 100);
            v66 = v93;
          }
          sub_1ACC51C60((uint64_t)v214);
          v87 = *(_DWORD *)(a1 + 488);
        }
        v67 ^= v91;
        ++v89;
      }
      while (v89 < v87);
    }
    if (v66)
    {
      sqlite3_reset(pStmt);
      v68 = 0;
      goto LABEL_346;
    }
  }
  v106 = sqlite3_reset(v85);
  if (v106)
  {
    v66 = v106;
    v68 = 0;
    goto LABEL_346;
  }
  v107 = **(_QWORD **)(a1 + 72);
  v220[0] = 0;
  v108 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s", *(const char **)(a1 + 440));
  if (v108)
  {
    v110 = v108;
    v66 = sub_1ACB5C66C(*(_QWORD *)(a1 + 24), v108, 0xFFFFFFFFLL, 128, 0, v220, 0, v109);
    v111 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
    v205 = v107;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v110);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v110);
      v110 = (unsigned __int8 *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_298;
      v111 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v111)(v110);
LABEL_298:
    if (!v66)
    {
      if (sqlite3_step(v220[0]) == 100)
      {
        v68 = 0;
        while (1)
        {
          v112 = sqlite3_column_int64(v220[0], 0);
          v204 = *(_QWORD *)(a1 + 88) ? sqlite3_column_int(v220[0], *(_DWORD *)(a1 + 48) + 1) : 0;
          v113 = *(_DWORD *)(a1 + 48);
          if (v113 >= 1)
            break;
LABEL_304:
          v66 = 0;
          if (sqlite3_step(v220[0]) != 100)
            goto LABEL_345;
        }
        v114 = 0;
        v115 = 9 * v112 + v204;
        v203 = 81 * v115;
        v116 = 9 * v115;
        while (1)
        {
          while (*(_BYTE *)(*(_QWORD *)(a1 + 64) + v114))
          {
            if (++v114 >= v113)
              goto LABEL_304;
          }
          v206 = v114 + 1;
          v117 = sqlite3_column_text(v220[0], (int)v114 + 1);
          v118 = *(uint64_t **)(a1 + 72);
          v119 = *v118;
          v214[0] = 0;
          v66 = (*(uint64_t (**)(uint64_t *, const unsigned __int8 *, uint64_t, sqlite3_stmt **))(v119 + 24))(v118, v117, 0xFFFFFFFFLL, v214);
          v120 = v214[0];
          if (v66)
            goto LABEL_313;
          *(_QWORD *)v214[0] = v118;
          v122 = v214[0];
          if (*(int *)v119 >= 1)
          {
            v66 = (*(uint64_t (**)(sqlite3_stmt *, _QWORD))(v119 + 48))(v214[0], v204);
            v122 = v214[0];
            if (v66)
              break;
          }
          v214[0] = 0;
          LODWORD(v213) = 0;
          LODWORD(v212) = 0;
          LODWORD(v211) = 0;
          v209 = 0;
          v121 = v205;
          v123 = v122;
          for (i = (*(uint64_t (**)(void))(v205 + 40))(); !i; i = (*(uint64_t (**)(void))(v205 + 40))())
          {
            v125 = 9 * (v114 + v203) + v209;
            if ((int)v213 >= 1)
            {
              v126 = v214[0];
              v127 = v213;
              do
              {
                v128 = *(char *)v126;
                v126 = (sqlite3_stmt *)((char *)v126 + 1);
                v125 = 9 * v125 + v128;
                --v127;
              }
              while (v127);
            }
            v68 ^= v125;
            v129 = *(unsigned int *)(a1 + 488);
            if ((int)v129 > 1)
            {
              for (j = 1; j != v129; ++j)
              {
                v131 = *(unsigned int *)(*(_QWORD *)(a1 + 496) + 40 * j);
                if ((int)v131 <= (int)v213)
                {
                  v132 = j + v116 + v114 + 8 * (j + v116);
                  v133 = v132 + v209 + 8 * v132;
                  if ((int)v131 >= 1)
                  {
                    v134 = v214[0];
                    do
                    {
                      v135 = *(char *)v134;
                      v134 = (sqlite3_stmt *)((char *)v134 + 1);
                      v133 = 9 * v133 + v135;
                      --v131;
                    }
                    while (v131);
                  }
                  v68 ^= v133;
                }
              }
            }
            v214[0] = 0;
            LODWORD(v213) = 0;
            LODWORD(v212) = 0;
            LODWORD(v211) = 0;
            v209 = 0;
          }
          v66 = i;
          v120 = v123;
LABEL_319:
          if (v120)
            (*(void (**)(void))(v121 + 32))();
          if (v66 != 101)
            goto LABEL_345;
          v113 = *(_DWORD *)(a1 + 48);
          ++v114;
          if (v206 >= v113)
            goto LABEL_304;
        }
        (*(void (**)(sqlite3_stmt *))(v119 + 32))(v214[0]);
        v120 = 0;
LABEL_313:
        v121 = v205;
        goto LABEL_319;
      }
      v66 = 0;
    }
    v68 = 0;
    goto LABEL_345;
  }
  v68 = 0;
  v66 = 7;
LABEL_345:
  sqlite3_finalize(v220[0]);
LABEL_346:
  if (v67 != v68 && v66 == 0)
    v137 = 267;
  else
    v137 = v66;
  v208 = v137;
LABEL_17:
  v14 = *(_QWORD **)(a1 + 480);
  if (v14)
  {
    v15 = (sqlite3_stmt *)v14[3];
    v16 = (_QWORD *)v14[4];
    v17 = v16[3];
    if (v17)
      xmmword_1ECD3B1C0(v17);
    sub_1ACBE0F9C(v16, v14);
    v18 = v16[3];
    if (v18)
      xmmword_1ECD3B1D0(v18);
    sqlite3_finalize(v15);
  }
  *(_QWORD *)(a1 + 480) = 0;
  return v208;
}

uint64_t sub_1ACC5AD1C(uint64_t a1)
{
  *(_DWORD *)(a1 + 100) = 0;
  return sub_1ACC6C018(a1);
}

uint64_t sub_1ACC5AD24(uint64_t a1)
{
  uint64_t v2;
  int v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  sqlite3_stmt *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  sqlite3_stmt *v21;
  int v22;
  int v23;
  int v24;
  sqlite3_stmt *v25;

  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    v3 = *(unsigned __int8 *)(v2 + 113);
    switch(v3)
    {
      case 186:
        goto LABEL_5;
      case 118:
        v5 = *(_QWORD *)(v2 + 56);
        goto LABEL_10;
      case 109:
LABEL_5:
        v4 = "unopened";
        break;
      default:
        v4 = "invalid";
        break;
    }
  }
  else
  {
    v4 = "NULL";
  }
  sqlite3_log(21, "API call with %s database connection pointer", v4);
  sub_1ACBBE20C(186245);
  v5 = 0;
LABEL_10:
  v6 = sub_1ACC66198(a1);
  if (!(_DWORD)v6)
  {
    if (*(_DWORD *)(a1 + 100) < 5u)
    {
      v6 = 0;
    }
    else
    {
      v6 = 0;
      v7 = *(_DWORD *)(a1 + 96);
      if (v7 && v7 != 255)
      {
        v25 = 0;
        v8 = sub_1ACC52F20((uint64_t *)a1, 36, &v25, 0);
        if ((_DWORD)v8)
        {
          v6 = v8;
          v9 = 0;
        }
        else
        {
          v21 = v25;
          v9 = sqlite3_step(v25) == 100 ? sqlite3_column_int(v21, 0) : 0;
          v6 = sqlite3_reset(v21);
        }
        v22 = *(_DWORD *)(a1 + 100) * v9;
        v23 = v22 >= 0 ? *(_DWORD *)(a1 + 100) * v9 : v22 + 1;
        v24 = v22 + (v23 >> 1);
        if (v24 >= 65)
          v6 = sub_1ACC68600(a1, v24, *(_DWORD *)(a1 + 96));
      }
    }
  }
  v10 = *(_QWORD **)(a1 + 480);
  if (v10)
  {
    v11 = (sqlite3_stmt *)v10[3];
    v12 = (_QWORD *)v10[4];
    v13 = v12[3];
    if (v13)
      xmmword_1ECD3B1C0(v13);
    sub_1ACBE0F9C(v12, v10);
    v14 = v12[3];
    if (v14)
      xmmword_1ECD3B1D0(v14);
    sqlite3_finalize(v11);
  }
  *(_QWORD *)(a1 + 480) = 0;
  v15 = *(_QWORD *)(a1 + 24);
  if (!v15)
  {
    v17 = "NULL";
    goto LABEL_33;
  }
  v16 = *(unsigned __int8 *)(v15 + 113);
  if (v16 == 186)
  {
LABEL_27:
    v17 = "unopened";
LABEL_33:
    sqlite3_log(21, "API call with %s database connection pointer", v17);
    sub_1ACBBE20C(186258);
    return v6;
  }
  if (v16 != 118)
  {
    if (v16 != 109)
    {
      v17 = "invalid";
      goto LABEL_33;
    }
    goto LABEL_27;
  }
  v18 = *(_QWORD *)(v15 + 24);
  if (v18)
  {
    xmmword_1ECD3B1C0(v18);
    v19 = *(_QWORD *)(v15 + 24);
    *(_QWORD *)(v15 + 56) = v5;
    if (v19)
      xmmword_1ECD3B1D0(v19);
  }
  else
  {
    *(_QWORD *)(v15 + 56) = v5;
  }
  return v6;
}

uint64_t sub_1ACC5AF84()
{
  return 0;
}

uint64_t sub_1ACC5AF8C(uint64_t a1)
{
  sub_1ACC67078(a1);
  return 0;
}

uint64_t sub_1ACC5AFA4(int a1, int a2, char *__s1, _QWORD *a4)
{
  uint64_t v7;

  if (!strcmp(__s1, "snippet"))
  {
    v7 = 0;
  }
  else if (!strcmp(__s1, "offsets"))
  {
    v7 = 1;
  }
  else if (!strcmp(__s1, "optimize"))
  {
    v7 = 2;
  }
  else
  {
    if (strcmp(__s1, "matchinfo"))
      return 0;
    v7 = 3;
  }
  *a4 = (&off_1E5C74FF8)[2 * v7 + 1];
  return 1;
}

uint64_t sub_1ACC5B050(uint64_t a1, uint64_t a2)
{
  sqlite3 *v4;
  unsigned int v6;

  v4 = *(sqlite3 **)(a1 + 24);
  v6 = sub_1ACC6C018(a1);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 80))
      goto LABEL_3;
  }
  else
  {
    v6 = sub_1ACC66198(a1);
    if (*(_QWORD *)(a1 + 80))
    {
LABEL_3:
      if (!*(_BYTE *)(a1 + 462))
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  sub_1ACC5E470((char *)&v6, v4, "ALTER TABLE %Q.'%q_content'  RENAME TO '%q_content';",
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40),
    a2);
  if (*(_BYTE *)(a1 + 462))
LABEL_4:
    sub_1ACC5E470((char *)&v6, v4, "ALTER TABLE %Q.'%q_docsize'  RENAME TO '%q_docsize';",
      *(_QWORD *)(a1 + 32),
      *(_QWORD *)(a1 + 40),
      a2);
LABEL_5:
  if (*(_BYTE *)(a1 + 461))
    sub_1ACC5E470((char *)&v6, v4, "ALTER TABLE %Q.'%q_stat'  RENAME TO '%q_stat';",
      *(_QWORD *)(a1 + 32),
      *(_QWORD *)(a1 + 40),
      a2);
  sub_1ACC5E470((char *)&v6, v4, "ALTER TABLE %Q.'%q_segments' RENAME TO '%q_segments';",
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40),
    a2);
  sub_1ACC5E470((char *)&v6, v4, "ALTER TABLE %Q.'%q_segdir'   RENAME TO '%q_segdir';",
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40),
    a2);
  return v6;
}

uint64_t sub_1ACC5B16C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 464))
    return 0;
  else
    return sub_1ACC5AD24(a1);
}

uint64_t sub_1ACC5B180()
{
  return 0;
}

uint64_t sub_1ACC5B188(uint64_t a1)
{
  sub_1ACC67078(a1);
  return 0;
}

uint64_t sub_1ACC5B1A0(uint64_t result)
{
  const char *v1;
  _BYTE *i;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _BYTE *j;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  _BYTE *k;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _BYTE *m;
  uint64_t v15;
  uint64_t v16;
  const char *n;
  uint64_t v18;
  uint64_t v19;

  if (result)
  {
    v1 = "content";
    for (i = (_BYTE *)result; ; ++i)
    {
      v3 = *i;
      v4 = *(unsigned __int8 *)v1;
      if ((_DWORD)v3 == (_DWORD)v4)
      {
        if (!*i)
          return 1;
      }
      else if (byte_1ACCB6333[v3] != byte_1ACCB6333[v4])
      {
        v5 = "docsize";
        for (j = (_BYTE *)result; ; ++j)
        {
          v7 = *j;
          v8 = *(unsigned __int8 *)v5;
          if ((_DWORD)v7 == (_DWORD)v8)
          {
            if (!*j)
              return 1;
          }
          else if (byte_1ACCB6333[v7] != byte_1ACCB6333[v8])
          {
            v9 = "segdir";
            for (k = (_BYTE *)result; ; ++k)
            {
              v11 = *k;
              v12 = *(unsigned __int8 *)v9;
              if ((_DWORD)v11 == (_DWORD)v12)
              {
                if (!*k)
                  return 1;
              }
              else if (byte_1ACCB6333[v11] != byte_1ACCB6333[v12])
              {
                v13 = "segments";
                for (m = (_BYTE *)result; ; ++m)
                {
                  v15 = *m;
                  v16 = *(unsigned __int8 *)v13;
                  if ((_DWORD)v15 == (_DWORD)v16)
                  {
                    if (!*m)
                      return 1;
                  }
                  else if (byte_1ACCB6333[v15] != byte_1ACCB6333[v16])
                  {
                    for (n = "stat"; ; ++n)
                    {
                      v18 = *(unsigned __int8 *)result;
                      v19 = *(unsigned __int8 *)n;
                      if ((_DWORD)v18 == (_DWORD)v19)
                      {
                        if (!*(_BYTE *)result)
                          return 1;
                      }
                      else if (byte_1ACCB6333[v18] != byte_1ACCB6333[v19])
                      {
                        return 0;
                      }
                      ++result;
                    }
                  }
                  ++v13;
                }
              }
              ++v9;
            }
          }
          ++v5;
        }
      }
      ++v1;
    }
  }
  return result;
}

uint64_t sub_1ACC5B300(int a1, sqlite3 *a2, uint64_t a3, int a4, const char **a5, uint64_t *a6, char **a7)
{
  const char *v13;
  int v14;
  int v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  const char **v19;
  uint64_t (**v20)(_QWORD);
  uint64_t (**v21)(const char **);
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  const char **v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  int v30;
  const char **v31;
  int v32;
  BOOL v33;
  const char *v34;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  int v39;
  int v40;
  char *v41;
  char *v42;
  int v43;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  char *v51;
  int v52;
  const char *v53;
  uint64_t v54;
  int v55;
  unint64_t v56;
  char *v57;
  const char *v58;
  uint64_t (**v59)(const char *);
  uint64_t (**v60)(char *);
  uint64_t (**v61)(char *);
  size_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t (**v66)(char *);
  uint64_t (**v67)(char *);
  void (**v68)(unsigned __int8 *);
  const char *v70;
  const char *v71;
  const char *v72;
  uint64_t v73;
  int v74;
  int v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  uint64_t (**v79)(const char *);
  uint64_t (**v80)(const char *);
  _DWORD *v81;
  int v82;
  _DWORD *v83;
  int v84;
  const char *v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  unsigned __int8 *v91;
  uint64_t (**v92)(_QWORD);
  void (**v93)(const char *);
  uint64_t (**v94)(_QWORD);
  uint64_t (**v95)(const char *);
  char *v96;
  uint64_t (**v97)(const char *);
  uint64_t (**v98)(char *);
  uint64_t (**v99)(char *);
  uint64_t j;
  const char *v101;
  uint64_t (**v102)(const char *);
  size_t v103;
  size_t v104;
  uint64_t v105;
  void *v106;
  BOOL v107;
  int v108;
  const char **v109;
  BOOL v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned __int8 *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned __int8 *v122;
  unsigned __int8 *v123;
  unsigned __int8 *i;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  unsigned __int8 v130;
  unsigned __int8 *v131;
  int v132;
  unsigned __int8 v133;
  int v134;
  int v135;
  uint64_t v136;
  int v137;
  int v139;
  uint64_t v140;
  int v141;
  uint64_t v142;
  unsigned __int8 *v143;
  uint64_t v144;
  unsigned __int8 *v145;
  int v146;
  const char *v147;
  uint64_t (**v148)(unsigned __int8 *);
  unsigned __int16 *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  int v153;
  int v154;
  uint64_t v155;
  const char *v156;
  _BYTE *v157;
  int v158;
  const char *v159;
  uint64_t v160;
  int v161;
  uint64_t (**v162)(const char *);
  int v163;
  const char **v164;
  const char *v165;
  const char *v166;
  const char *v167;
  uint64_t v168;
  int v169;
  _BYTE *v170;
  char *v171;
  unsigned int v172;
  char *v173;
  char v174;
  uint64_t v175;
  char v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  char *v180;
  size_t v181;
  uint64_t v182;
  _OWORD *v183;
  uint64_t v184;
  unsigned __int8 *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  __int128 v191;
  _QWORD *v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE *v195;
  int v196;
  uint64_t v197;
  uint64_t (**v198)(_QWORD);
  uint64_t v199;
  char *v200;
  const char *v201;
  int v202;
  _BYTE *v203;
  const char *v204;
  _BYTE *v205;
  _BYTE *v206;
  int v207;
  int v208;
  uint64_t (**v209)(_QWORD);
  int v210;
  int v211;
  uint64_t v212;
  const char *v213;
  const char *v214;
  char *v215;
  const char *v216;
  char *v217;
  const char *v218;
  char *v219;
  int v220;
  char *v221;
  sqlite3 *v222;
  int v223;
  size_t __n;
  char **v225;
  const char **v226;
  uint64_t v227;
  int v228;
  _QWORD *v229;
  unint64_t v230;
  _DWORD *v231;
  int v232;
  size_t v233;
  int v234;
  const char **v236;
  unsigned int v237;
  const char *v238[2];

  v237 = 0;
  v13 = a5[1];
  v14 = *((unsigned __int8 *)*a5 + 3);
  v236 = 0;
  v15 = strlen(v13);
  v16 = strlen(a5[2]);
  v17 = 0;
  if (sqlite3_initialize())
    goto LABEL_2;
  v226 = a5;
  v232 = v16;
  v222 = a2;
  v223 = v15;
  v225 = a7;
  v228 = v14;
  v23 = 8 * (a4 - 2);
  v24 = (_QWORD *)sub_1ACB5D828(v23);
  v17 = v24;
  if (!v24 || (bzero(v24, v23), sqlite3_initialize()) || (v25 = (const char **)sub_1ACB5D828(v23)) == 0)
  {
LABEL_2:
    v18 = 0;
    v19 = 0;
    v237 = 7;
    if (!v17)
      goto LABEL_9;
LABEL_3:
    v20 = &off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v17);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v17);
      v17 = (_QWORD *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_9;
      v20 = &xmmword_1ECD3B1D0;
    }
    (*v20)(v17);
    goto LABEL_9;
  }
  v19 = v25;
  v229 = v17;
  bzero(v25, v23);
  if (a4 < 4)
  {
    v219 = 0;
    v220 = 0;
    v221 = 0;
    v70 = 0;
    v212 = 0;
    v71 = 0;
    v72 = 0;
    v30 = v16;
    v73 = a3;
    goto LABEL_225;
  }
  v210 = a1;
  v219 = 0;
  v220 = 0;
  v221 = 0;
  v215 = 0;
  v217 = 0;
  v212 = 0;
  v213 = 0;
  v26 = 0;
  LODWORD(v27) = 0;
  v230 = a4;
  v28 = 3;
  v29 = v228;
  v30 = v232;
  v31 = v226;
  while (2)
  {
    v34 = v31[v28];
    if (v236)
      goto LABEL_70;
    if (strlen(v31[v28]) < 9 || v34 == 0)
      goto LABEL_70;
    v36 = *(unsigned __int8 *)v34;
    if (!*v34)
    {
      v37 = "tokenize";
      goto LABEL_67;
    }
    if ((v36 & 0xFFFFFFDF) != 0x54)
    {
      v36 += (unint64_t)byte_1ACCB6333;
      v37 = "tokenize";
      goto LABEL_66;
    }
    v36 = *((unsigned __int8 *)v34 + 1);
    if (!v34[1])
    {
      v37 = "okenize";
      goto LABEL_67;
    }
    if ((v36 & 0xFFFFFFDF) != 0x4F)
    {
      v36 += (unint64_t)byte_1ACCB6333;
      v37 = "okenize";
      goto LABEL_66;
    }
    v36 = *((unsigned __int8 *)v34 + 2);
    if (!v34[2])
    {
      v37 = "kenize";
      goto LABEL_67;
    }
    if ((v36 & 0xFFFFFFDF) != 0x4B)
    {
      v36 += (unint64_t)byte_1ACCB6333;
      v37 = "kenize";
      goto LABEL_66;
    }
    v36 = *((unsigned __int8 *)v34 + 3);
    if (!v34[3])
    {
      v37 = "enize";
      goto LABEL_67;
    }
    if ((v36 & 0xFFFFFFDF) != 0x45)
    {
      v36 += (unint64_t)byte_1ACCB6333;
      v37 = "enize";
      goto LABEL_66;
    }
    v36 = *((unsigned __int8 *)v34 + 4);
    if (!v34[4])
    {
      v37 = "nize";
      goto LABEL_67;
    }
    if ((v36 & 0xFFFFFFDF) != 0x4E)
    {
      v36 += (unint64_t)byte_1ACCB6333;
      v37 = "nize";
      goto LABEL_66;
    }
    v36 = *((unsigned __int8 *)v34 + 5);
    if (!v34[5])
    {
      v37 = "ize";
      goto LABEL_67;
    }
    if ((v36 & 0xFFFFFFDF) != 0x49)
    {
      v36 += (unint64_t)byte_1ACCB6333;
      v37 = "ize";
      goto LABEL_66;
    }
    v36 = *((unsigned __int8 *)v34 + 6);
    if (!v34[6])
    {
      v37 = "ze";
      goto LABEL_67;
    }
    if ((v36 & 0xFFFFFFDF) != 0x5A)
    {
      v36 += (unint64_t)byte_1ACCB6333;
      v37 = "ze";
      goto LABEL_66;
    }
    v36 = *((unsigned __int8 *)v34 + 7);
    if (!v34[7])
    {
      v37 = "e";
      v29 = v228;
      v30 = v232;
      v31 = v226;
LABEL_67:
      if ((_DWORD)v36 != byte_1ACCB6333[*v37])
        goto LABEL_70;
      goto LABEL_68;
    }
    v29 = v228;
    v30 = v232;
    v31 = v226;
    if ((v36 & 0xFFFFFFDF) != 0x45)
    {
      v36 += (unint64_t)byte_1ACCB6333;
      v37 = "e";
LABEL_66:
      LODWORD(v36) = *(unsigned __int8 *)v36;
      goto LABEL_67;
    }
LABEL_68:
    if ((v34[8] & 0x80000000) == 0 && !byte_1ACCBB45E[*((unsigned __int8 *)v34 + 8)])
    {
      v237 = sub_1ACC5D62C(a3, v34 + 9, &v236, v225);
      goto LABEL_26;
    }
LABEL_70:
    if (v29 != 52 || (v38 = 0, v39 = 1, v40 = *(unsigned __int8 *)v34, !*v34))
    {
LABEL_24:
      LODWORD(v27) = v27 + strlen(v34) + 1;
      v229[v26++] = v34;
LABEL_25:
      v30 = v232;
      goto LABEL_26;
    }
    while (v40 != 61)
    {
      ++v38;
      ++v39;
      v40 = v34[v38];
      if (!v34[v38])
        goto LABEL_24;
    }
    v41 = sqlite3_mprintf("%s", &v34[v38 + 1]);
    if (!v41)
    {
      v237 = 7;
      v29 = v228;
      goto LABEL_25;
    }
    v42 = v41;
    v43 = *v41;
    if ((v43 - 34) <= 0x3E && ((1 << (v43 - 34)) & 0x4200000000000021) != 0)
    {
      if (v43 == 91)
        v43 = 93;
      v45 = v41[1];
      if (v41[1])
      {
        v46 = 0;
        v47 = 1;
        while (1)
        {
          if (v45 == v43)
          {
            if (v41[v47 + 1] != v43)
            {
LABEL_90:
              v48 = v46;
              goto LABEL_92;
            }
            v41[v46] = v43;
            v47 += 2;
          }
          else
          {
            v41[v46] = v45;
            ++v47;
          }
          ++v46;
          v45 = v41[v47];
          if (!v41[v47])
            goto LABEL_90;
        }
      }
      v48 = 0;
LABEL_92:
      v41[v48] = 0;
    }
    v49 = 0;
    while (LODWORD((&off_1E5C74F38)[2 * v49 + 1]) != (_DWORD)v38)
    {
LABEL_98:
      if (++v49 == 8)
      {
LABEL_125:
        sub_1ACC51B88(v225, "unrecognized parameter: %s", v34);
        v237 = 1;
        v30 = v232;
        v31 = v226;
        goto LABEL_210;
      }
    }
    if ((v38 & 0x80000000) == 0)
    {
      v51 = (&off_1E5C74F38)[2 * v49];
      if (v34)
      {
        if (v51)
        {
          if (!(_DWORD)v38)
            goto LABEL_114;
          v52 = v39;
          v53 = v34;
          while (1)
          {
            v54 = *(unsigned __int8 *)v53;
            if (!*v53)
              break;
            LODWORD(v54) = byte_1ACCB6333[v54];
            v55 = byte_1ACCB6333[*v51];
            if ((_DWORD)v54 != v55)
              goto LABEL_110;
            ++v53;
            ++v51;
            if (--v52 <= 1)
              goto LABEL_114;
          }
          v55 = byte_1ACCB6333[*v51];
LABEL_110:
          if ((_DWORD)v54 == v55)
            goto LABEL_114;
        }
      }
      else
      {
        if (v51)
          v50 = -1;
        else
          v50 = 0;
        if (!v50)
          goto LABEL_114;
      }
      goto LABEL_98;
    }
    sub_1ACBBE20C(35843);
LABEL_114:
    switch((int)v49)
    {
      case 0:
        v30 = v232;
        v31 = v226;
        if (strlen(v42) != 4)
          goto LABEL_202;
        v56 = *v42;
        if (!*v42)
        {
          v57 = "fts3";
          goto LABEL_200;
        }
        if ((v56 & 0xFFFFFFDF) != 0x46)
        {
          v56 += (unint64_t)byte_1ACCB6333;
          v57 = "fts3";
LABEL_199:
          LODWORD(v56) = *(unsigned __int8 *)v56;
          goto LABEL_200;
        }
        v56 = v42[1];
        if (!v42[1])
        {
          v57 = "ts3";
          goto LABEL_200;
        }
        if ((v56 & 0xFFFFFFDF) != 0x54)
        {
          v56 += (unint64_t)byte_1ACCB6333;
          v57 = "ts3";
          goto LABEL_199;
        }
        v56 = v42[2];
        if (!v42[2])
        {
          v57 = "s3";
          goto LABEL_200;
        }
        if ((v56 & 0xFFFFFFDF) != 0x53)
        {
          v56 += (unint64_t)byte_1ACCB6333;
          v57 = "s3";
          goto LABEL_199;
        }
        v56 = v42[3];
        if (v42[3])
        {
          if ((_DWORD)v56 != 51)
          {
            v56 += (unint64_t)byte_1ACCB6333;
            v57 = "3";
            goto LABEL_199;
          }
LABEL_201:
          LODWORD(v212) = 1;
          goto LABEL_210;
        }
        v57 = "3";
LABEL_200:
        if ((_DWORD)v56 == byte_1ACCB6333[*v57])
          goto LABEL_201;
LABEL_202:
        sub_1ACC51B88(v225, "unrecognized matchinfo: %s", v42);
        LODWORD(v212) = 1;
        v237 = 1;
LABEL_210:
        v68 = (void (**)(unsigned __int8 *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v42);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v42);
          v42 = (char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v68 = (void (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
            goto LABEL_215;
          }
        }
        else
        {
LABEL_215:
          (*v68)((unsigned __int8 *)v42);
        }
        v29 = v228;
LABEL_26:
        ++v28;
        v32 = v237;
        if (v237)
          v33 = 1;
        else
          v33 = v28 >= v230;
        if (!v33)
          continue;
        if (v237)
        {
          v72 = v215;
          v71 = v217;
          goto LABEL_257;
        }
        v72 = v215;
        v71 = v217;
        if (!v221)
          goto LABEL_257;
        if (v217)
        {
          v79 = (uint64_t (**)(const char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_243;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v217);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v217);
          v71 = (const char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v79 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
LABEL_243:
            (*v79)(v71);
          }
        }
        if (v215)
        {
          v80 = (uint64_t (**)(const char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_250;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v215);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v215);
          v72 = (const char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v80 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
LABEL_250:
            (*v80)(v72);
          }
        }
        if (v26)
        {
          v71 = 0;
          v72 = 0;
          v32 = v237;
          goto LABEL_257;
        }
        v92 = &off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v229);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v229);
          v229 = (_QWORD *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v92 = &xmmword_1ECD3B1D0;
            goto LABEL_404;
          }
        }
        else
        {
LABEL_404:
          (*v92)(v229);
        }
        v142 = (uint64_t)v31[1];
        v238[0] = 0;
        v143 = (unsigned __int8 *)sqlite3_mprintf("SELECT * FROM %Q.%Q", v142, v221);
        if (!v143)
        {
          v146 = 7;
          goto LABEL_420;
        }
        v145 = v143;
        v146 = sub_1ACB5C66C((uint64_t)v222, v143, 0xFFFFFFFFLL, 0, 0, v238, 0, v144);
        if (v146)
        {
          v147 = sqlite3_errmsg(v222);
          sub_1ACC51B88(v225, "%s", v147);
        }
        v148 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v145);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v145);
          v145 = (unsigned __int8 *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v148 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
            goto LABEL_413;
          }
        }
        else
        {
LABEL_413:
          (*v148)(v145);
        }
        if (v146)
        {
LABEL_420:
          v229 = 0;
          v81 = 0;
          v18 = 0;
          v72 = 0;
          v237 = v146;
          v71 = 0;
          v70 = v213;
          goto LABEL_293;
        }
        v149 = (unsigned __int16 *)v238[0];
        if (!v238[0])
        {
          v26 = 0;
LABEL_477:
          v27 = 0;
          v174 = 1;
          goto LABEL_478;
        }
        v150 = *(_QWORD *)(*(_QWORD *)v238[0] + 24);
        if (v150)
        {
          xmmword_1ECD3B1C0(v150);
          v151 = *(_QWORD *)(*(_QWORD *)v149 + 24);
          v26 = v149[130];
          if (v151)
            xmmword_1ECD3B1D0(v151);
        }
        else
        {
          v26 = *((unsigned __int16 *)v238[0] + 130);
        }
        if (!v26)
          goto LABEL_477;
        v172 = 0;
        v27 = 0;
        do
        {
          v173 = sub_1ACBC7DC0((uint64_t *)v238[0], v172, 0, 0);
          v27 += strlen(v173) + 1;
          ++v172;
        }
        while (v26 != v172);
        v174 = 0;
LABEL_478:
        v32 = 7;
        if (sqlite3_initialize())
        {
          v229 = 0;
        }
        else
        {
          v175 = sub_1ACB5D828(v27 + 8 * v26);
          if (v175)
            v176 = v174;
          else
            v176 = 1;
          if (v175)
            v32 = 0;
          else
            v32 = 7;
          v229 = (_QWORD *)v175;
          if ((v176 & 1) == 0)
          {
            v177 = v175;
            v178 = 0;
            v179 = (char *)(v175 + 8 * v26);
            do
            {
              v180 = sub_1ACBC7DC0((uint64_t *)v238[0], v178, 0, 0);
              v181 = (int)(strlen(v180) + 1);
              memcpy(v179, v180, v181);
              *(_QWORD *)(v177 + 8 * v178) = v179;
              v179 += v181;
              ++v178;
            }
            while (v26 != v178);
            v32 = 0;
          }
          v30 = v232;
        }
        sqlite3_finalize((sqlite3_stmt *)v238[0]);
        v71 = 0;
        v237 = v32;
        if (v32 || !v219)
        {
          v72 = 0;
LABEL_257:
          v73 = a3;
          a1 = v210;
          if (v32)
          {
            v81 = 0;
            v18 = 0;
            v70 = v213;
            goto LABEL_293;
          }
          v70 = v213;
          if (!v26)
            goto LABEL_225;
          goto LABEL_226;
        }
        if (!v26)
        {
          v71 = 0;
          v72 = 0;
          v70 = v213;
          a1 = v210;
          v73 = a3;
          goto LABEL_225;
        }
        v182 = 0;
        v183 = v229 + 2;
        v184 = v26;
        v70 = v213;
        while (1)
        {
          v185 = (unsigned __int8 *)v229[v182];
          if (v185)
            break;
LABEL_495:
          ++v182;
          --v184;
          v183 = (_OWORD *)((char *)v183 + 8);
          if (v182 == v26)
          {
            v72 = 0;
            v71 = 0;
            a1 = v210;
            goto LABEL_510;
          }
        }
        v186 = v219;
        while (2)
        {
          v187 = *v186;
          v188 = *v185;
          if ((_DWORD)v187 != (_DWORD)v188)
          {
            if (byte_1ACCB6333[v187] != byte_1ACCB6333[v188])
              goto LABEL_495;
            goto LABEL_499;
          }
          if (*v186)
          {
LABEL_499:
            ++v186;
            ++v185;
            continue;
          }
          break;
        }
        a1 = v210;
        if (v26 > v182)
        {
          v189 = v26 - v182;
          if (v189 < 4)
            goto LABEL_507;
          v182 += v189 & 0xFFFFFFFFFFFFFFFCLL;
          v190 = v184 & 0xFFFFFFFFFFFFFFFCLL;
          do
          {
            v191 = *(_OWORD *)((char *)v183 + 8);
            *(v183 - 1) = *(_OWORD *)((char *)v183 - 8);
            *v183 = v191;
            v183 += 2;
            v190 -= 4;
          }
          while (v190);
          if (v189 != (v189 & 0xFFFFFFFFFFFFFFFCLL))
          {
LABEL_507:
            v192 = &v229[v182 + 1];
            v193 = v26 - v182;
            do
            {
              *(v192 - 1) = *v192;
              ++v192;
              --v193;
            }
            while (v193);
          }
        }
        v72 = 0;
        v71 = 0;
        --v26;
LABEL_510:
        v73 = a3;
        if (!v26)
        {
LABEL_225:
          *v229 = "content";
          v26 = 1;
          LODWORD(v27) = 8;
        }
LABEL_226:
        if (!v236)
        {
          v237 = sub_1ACC5D62C(v73, "simple", &v236, v225);
          if (v237)
          {
            v81 = 0;
            v18 = 0;
            goto LABEL_293;
          }
        }
        v216 = v72;
        v218 = v71;
        if (v70)
        {
          v74 = *(unsigned __int8 *)v70;
          v75 = v223;
          if (*v70)
          {
            v76 = (unsigned __int8 *)(v70 + 1);
            v77 = 2;
            while (1)
            {
              if (v74 == 44)
              {
                ++v77;
              }
              else if (!v74)
              {
                goto LABEL_262;
              }
              v78 = *v76++;
              v74 = v78;
            }
          }
          v77 = 1;
        }
        else
        {
          v77 = 1;
          v75 = v223;
        }
LABEL_262:
        if (sqlite3_initialize())
        {
          v77 = 0;
          v231 = 0;
          v82 = 7;
          goto LABEL_264;
        }
        v83 = (_DWORD *)sub_1ACB5D828(40 * v77);
        if (!v83)
        {
          v77 = 0;
          v231 = 0;
          v82 = 7;
          goto LABEL_264;
        }
        v231 = v83;
        bzero(v83, 40 * v77);
        v82 = 0;
        if (!v70 || v77 < 2)
        {
LABEL_264:
          v237 = v82;
          if (!v82)
            goto LABEL_290;
          goto LABEL_265;
        }
        v84 = 1;
        v85 = v70;
        while (1)
        {
          v86 = *(unsigned __int8 *)v85;
          if ((v86 - 48) > 9)
            break;
          v87 = 0;
          v88 = 0;
          v89 = 0;
          do
          {
            v89 = (v86 - 48) + 10 * v89;
            if (v89 >> 31)
            {
              v91 = (unsigned __int8 *)(v85 - 1);
              goto LABEL_282;
            }
            v90 = v88 + 1;
            v86 = v85[v88 + 1];
            v87 += 0x100000000;
            ++v88;
          }
          while ((v86 - 48) < 0xA);
          if (v89 > 0x989680)
            LODWORD(v89) = 0;
          if (!v90)
            break;
          v91 = (unsigned __int8 *)&v85[v87 >> 32];
          if ((_DWORD)v89)
          {
            v231[10 * v84] = v89;
          }
          else
          {
LABEL_282:
            --v77;
            --v84;
          }
          v85 = (const char *)(v91 + 1);
          if (++v84 >= v77)
          {
            v82 = 0;
            goto LABEL_264;
          }
        }
        v237 = 1;
        sub_1ACC51B88(v225, "error parsing prefix parameter: %s", v70);
        v77 = 0;
        if (v237)
        {
LABEL_265:
          v18 = 0;
LABEL_292:
          v72 = v216;
          v71 = v218;
          v81 = v231;
          goto LABEL_293;
        }
LABEL_290:
        v211 = a1;
        v214 = v70;
        if (sqlite3_initialize()
          || (v103 = v30 + 1,
              v104 = v75 + 1,
              v233 = v103,
              v105 = v104 + v103 + (int)v27 + (int)v26 + 8 * (int)v26 + 40 * v77 + 528,
              (v106 = (void *)sub_1ACB5D828(v105)) == 0))
        {
          v18 = 0;
          v237 = 7;
          goto LABEL_292;
        }
        v18 = (uint64_t)v106;
        __n = v104;
        v107 = v228 == 52;
        bzero(v106, v105);
        *(_QWORD *)(v18 + 24) = v222;
        v108 = v26;
        *(_DWORD *)(v18 + 48) = v26;
        *(_QWORD *)(v18 + 56) = v18 + 528;
        v109 = v236;
        *(_QWORD *)(v18 + 504) = 0x100000;
        if ((_DWORD)v212)
          v110 = 0;
        else
          v110 = v228 == 52;
        *(_BYTE *)(v18 + 462) = v110;
        *(_BYTE *)(v18 + 461) = v107;
        *(_BYTE *)(v18 + 460) = v107;
        *(_BYTE *)(v18 + 463) = BYTE4(v212);
        *(_DWORD *)(v18 + 96) = 255;
        *(_QWORD *)(v18 + 72) = v109;
        *(_QWORD *)(v18 + 80) = v221;
        *(_QWORD *)(v18 + 88) = v219;
        v111 = (void *)(v18 + 528 + 8 * (int)v26);
        *(_QWORD *)(v18 + 496) = v111;
        memcpy(v111, v231, 40 * v77);
        *(_DWORD *)(v18 + 488) = v77;
        if (v77 >= 1)
        {
          v112 = 0;
          do
          {
            v113 = *(_QWORD *)(v18 + 496) + v112;
            *(_WORD *)(v113 + 8) = 257;
            *(_QWORD *)(v113 + 32) = 0;
            *(_QWORD *)(v113 + 20) = 0;
            *(_QWORD *)(v113 + 12) = 0;
            v112 += 40;
          }
          while (40 * v77 != v112);
        }
        v114 = *(_QWORD *)(v18 + 496) + 40 * v77;
        *(_QWORD *)(v18 + 64) = v114;
        v115 = (char *)(v114 + (int)v26);
        *(_QWORD *)(v18 + 40) = v115;
        memcpy(v115, v226[2], v233);
        v116 = &v115[v233];
        *(_QWORD *)(v18 + 32) = v116;
        memcpy(v116, v226[1], __n);
        LODWORD(v117) = v220;
        if (v108 >= 1)
        {
          v118 = 0;
          v119 = (unsigned __int8 *)&v116[__n];
          v120 = v108;
          do
          {
            v122 = (unsigned __int8 *)v229[v118];
            v123 = v122 + 1;
            for (i = v122; ; ++i)
            {
              v125 = (char)*i;
              v126 = *i;
              if (v125 <= 38)
              {
                if (!*i)
                  goto LABEL_390;
                if (v125 == 34)
                {
LABEL_378:
                  v123 = i + 1;
                  v130 = i[1];
                  if (v130)
                  {
                    v131 = i;
                    do
                    {
                      if ((_DWORD)v126 == v130)
                      {
                        v123 = v131 + 2;
                        if (v131[2] != v125)
                          break;
                      }
                      v131 = v123;
                      v132 = *++v123;
                      v130 = v132;
                    }
                    while (v132);
                  }
                  goto LABEL_387;
                }
              }
              else
              {
                if (v125 == 39 || v125 == 96)
                  goto LABEL_378;
                if (v125 == 91)
                {
                  do
                  {
                    v128 = *v123++;
                    v127 = v128;
                  }
                  while (v128 != 93 && v127 != 0);
                  if (!v127)
                    LODWORD(v123) = (_DWORD)v123 - 1;
                  goto LABEL_387;
                }
              }
              if ((v126 & 0x80) != 0 || byte_1ACCBB45E[v126])
                break;
              LODWORD(v122) = (_DWORD)v122 + 1;
              ++v123;
            }
            v123 = i;
            do
            {
              do
              {
                v134 = (char)*++v123;
                v133 = v134;
              }
              while (v134 < 0);
            }
            while (byte_1ACCBB45E[v133]);
LABEL_387:
            v135 = (_DWORD)v123 - (_DWORD)v122;
            if ((int)v123 - (int)v122 > 0)
              memcpy(v119, i, ((_DWORD)v123 - (_DWORD)v122));
            v125 = v135;
LABEL_390:
            v136 = v125;
            v119[v125] = 0;
            v137 = *v119;
            if ((v137 - 34) <= 0x3E
              && ((1 << (v137 - 34)) & 0x4200000000000021) != 0)
            {
              if (v137 == 91)
                v137 = 93;
              v139 = v119[1];
              if (v119[1])
              {
                v140 = 0;
                v141 = 1;
                while (1)
                {
                  if (v139 == v137)
                  {
                    if (v119[v141 + 1] != v137)
                    {
LABEL_356:
                      v121 = v140;
                      goto LABEL_357;
                    }
                    v119[v140] = v137;
                    v141 += 2;
                  }
                  else
                  {
                    v119[v140] = v139;
                    ++v141;
                  }
                  ++v140;
                  v139 = v119[v141];
                  if (!v119[v141])
                    goto LABEL_356;
                }
              }
              v121 = 0;
LABEL_357:
              v119[v121] = 0;
            }
            *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v118) = v119;
            v119 += v136 + 1;
            ++v118;
          }
          while (v118 != v108);
          v152 = 0;
          LODWORD(v117) = v220;
          v227 = v120;
          while (1)
          {
            v153 = strlen(*(const char **)(*(_QWORD *)(v18 + 56) + 8 * v152));
            if ((int)v117 >= 1)
              break;
LABEL_422:
            ++v152;
            LODWORD(v117) = v220;
            if (v152 == v227)
              goto LABEL_447;
          }
          v154 = v153;
          v155 = 0;
          v234 = v153 + 1;
          while (2)
          {
            v156 = v19[v155];
            if (v156 && v154 == strlen(v19[v155]))
            {
              if (v154 < 0)
              {
                sub_1ACBBE20C(35843);
                goto LABEL_439;
              }
              v157 = *(_BYTE **)(*(_QWORD *)(v18 + 56) + 8 * v152);
              if (v157)
              {
                if (!v154)
                  goto LABEL_439;
                v158 = v234;
                v159 = v19[v155];
                while (1)
                {
                  v160 = *v157;
                  if (!*v157)
                    break;
                  LODWORD(v160) = byte_1ACCB6333[v160];
                  v161 = byte_1ACCB6333[*(unsigned __int8 *)v159];
                  if ((_DWORD)v160 != v161)
                    goto LABEL_445;
                  ++v157;
                  ++v159;
                  if (--v158 <= 1)
                    goto LABEL_439;
                }
                v161 = byte_1ACCB6333[*(unsigned __int8 *)v159];
LABEL_445:
                if ((_DWORD)v160 == v161)
                {
LABEL_439:
                  *(_BYTE *)(*(_QWORD *)(v18 + 64) + v152) = 1;
                  v162 = (uint64_t (**)(const char *))&off_1ECD3B168;
                  if (!dword_1ECD3B140)
                    goto LABEL_425;
                  if ((_QWORD)xmmword_1ECD3E930)
                    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v156);
                  --qword_1ECD3E8D0;
                  off_1ECD3B168(v156);
                  v156 = (const char *)xmmword_1ECD3E930;
                  if ((_QWORD)xmmword_1ECD3E930)
                  {
                    v162 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
LABEL_425:
                    (*v162)(v156);
                  }
                  v19[v155] = 0;
                }
              }
            }
            if (++v155 == v220)
              goto LABEL_422;
            continue;
          }
        }
LABEL_447:
        if ((int)v117 <= 0)
        {
          v237 = 0;
          v166 = v216;
          v165 = v218;
          goto LABEL_456;
        }
        v163 = 0;
        v117 = v117;
        v164 = v19;
        do
        {
          if (*v164)
          {
            sub_1ACC51B88(v225, "no such column: %s", *v164);
            v163 = 1;
          }
          ++v164;
          --v117;
        }
        while (v117);
        v237 = v163;
        v166 = v216;
        v165 = v218;
        if (!v163)
        {
LABEL_456:
          if ((v165 == 0) == (v166 != 0))
          {
            v167 = "uncompress";
            if (!v165)
              v167 = "compress";
            v237 = 1;
            sub_1ACC51B88(v225, "missing %s parameter in fts4 constructor", v167);
          }
        }
        v238[0] = 0;
        if (*(_QWORD *)(v18 + 80))
        {
          sub_1ACC5E2D4((char *)&v237, v238, "rowid");
          v81 = v231;
          if (*(int *)(v18 + 48) >= 1)
          {
            v168 = 0;
            do
              sub_1ACC5E2D4((char *)&v237, v238, ", x.'%q'", *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v168++));
            while (v168 < *(int *)(v18 + 48));
          }
          if (*(_QWORD *)(v18 + 88))
            sub_1ACC5E2D4((char *)&v237, v238, ", x.%Q", *(_QWORD *)(v18 + 88));
          goto LABEL_534;
        }
        v81 = v231;
        if (!v166)
        {
          v170 = 0;
          v171 = &byte_1ACCBEAEE;
          goto LABEL_522;
        }
        v169 = strlen(v166);
        if (sqlite3_initialize())
        {
          v170 = 0;
LABEL_469:
          v171 = 0;
          goto LABEL_522;
        }
        v194 = (_BYTE *)sub_1ACB5D828(2 * v169 + 3);
        v170 = v194;
        if (!v194)
          goto LABEL_469;
        *v194 = 34;
        v195 = v194;
        while (2)
        {
          v196 = *(unsigned __int8 *)v166;
          if (v196 == 34)
          {
            v195[1] = 34;
            v195 += 2;
            LOBYTE(v196) = *v166;
LABEL_517:
            *v195 = v196;
            ++v166;
            continue;
          }
          break;
        }
        if (*v166)
        {
          ++v195;
          goto LABEL_517;
        }
        *(_WORD *)(v195 + 1) = 34;
        v171 = v194;
LABEL_522:
        sub_1ACC5E2D4((char *)&v237, v238, "docid");
        if (*(int *)(v18 + 48) >= 1)
        {
          v197 = 0;
          do
          {
            sub_1ACC5E2D4((char *)&v237, v238, ",%s(x.'c%d%q')", v171, v197, *(_QWORD *)(*(_QWORD *)(v18 + 56) + 8 * v197));
            ++v197;
          }
          while (v197 < *(int *)(v18 + 48));
        }
        if (*(_QWORD *)(v18 + 88))
          sub_1ACC5E2D4((char *)&v237, v238, ", x.%Q", "langid");
        if (v170)
        {
          v198 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_533;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v170);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v170);
          v170 = (_BYTE *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v198 = &xmmword_1ECD3B1D0;
LABEL_533:
            (*v198)(v170);
          }
        }
LABEL_534:
        v199 = *(_QWORD *)(v18 + 80);
        if (v199)
        {
          v200 = &byte_1ACCBEAEE;
        }
        else
        {
          v199 = *(_QWORD *)(v18 + 40);
          v200 = "_content";
        }
        v201 = v218;
        sub_1ACC5E2D4((char *)&v237, v238, " FROM '%q'.'%q%s' AS x", *(_QWORD *)(v18 + 32), v199, v200);
        *(const char **)(v18 + 440) = v238[0];
        v238[0] = 0;
        if (!v218)
        {
          v203 = 0;
          v204 = &byte_1ACCBEAEE;
          goto LABEL_550;
        }
        v202 = strlen(v218);
        if (sqlite3_initialize())
        {
          v203 = 0;
LABEL_540:
          v204 = 0;
          goto LABEL_550;
        }
        v205 = (_BYTE *)sub_1ACB5D828(2 * v202 + 3);
        v203 = v205;
        if (!v205)
          goto LABEL_540;
        *v205 = 34;
        v206 = v205;
        while (2)
        {
          v207 = *(unsigned __int8 *)v201;
          if (v207 == 34)
          {
            v206[1] = 34;
            v206 += 2;
            LOBYTE(v207) = *v201;
LABEL_545:
            *v206 = v207;
            ++v201;
            continue;
          }
          break;
        }
        if (*v201)
        {
          ++v206;
          goto LABEL_545;
        }
        *(_WORD *)(v206 + 1) = 34;
        v204 = v205;
LABEL_550:
        sub_1ACC5E2D4((char *)&v237, v238, "?");
        if (*(int *)(v18 + 48) >= 1)
        {
          v208 = 0;
          do
          {
            sub_1ACC5E2D4((char *)&v237, v238, ",%s(?)", v204);
            ++v208;
          }
          while (v208 < *(_DWORD *)(v18 + 48));
        }
        if (*(_QWORD *)(v18 + 88))
          sub_1ACC5E2D4((char *)&v237, v238, ", ?");
        if (v203)
        {
          v209 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_561;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v203);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v203);
          v203 = (_BYTE *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v209 = &xmmword_1ECD3B1D0;
LABEL_561:
            (*v209)(v203);
          }
        }
        *(const char **)(v18 + 448) = v238[0];
        if (v237)
        {
          v221 = 0;
          v219 = 0;
          v70 = v214;
          v72 = v216;
          v71 = v218;
        }
        else
        {
          v70 = v214;
          v72 = v216;
          v71 = v218;
          if (v211)
          {
            v237 = sub_1ACC5DD54(v18);
          }
          else if (v228 != 52)
          {
            *(_BYTE *)(v18 + 461) = 2;
          }
          sub_1ACC5DF6C((unsigned __int8 *)&v237, v18);
          *(_DWORD *)(v18 + 456) = *(_DWORD *)(v18 + 468) - 35;
          sub_1ACC5E0B8((char *)&v237, v18);
          v221 = 0;
          v219 = 0;
        }
LABEL_293:
        if (v70)
        {
          v93 = (void (**)(const char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_299;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v70);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v70);
          v70 = (const char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v93 = (void (**)(const char *))&xmmword_1ECD3B1D0;
LABEL_299:
            (*v93)(v70);
          }
        }
        if (v81)
        {
          v94 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_306;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v81);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v81);
          v81 = (_DWORD *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v94 = &xmmword_1ECD3B1D0;
LABEL_306:
            (*v94)(v81);
          }
        }
        if (v71)
        {
          v95 = (uint64_t (**)(const char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_313;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v71);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v71);
          v71 = (const char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v95 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
LABEL_313:
            (*v95)(v71);
          }
        }
        v96 = v219;
        if (v72)
        {
          v97 = (uint64_t (**)(const char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_320;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v72);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v72);
          v72 = (const char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v97 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
LABEL_320:
            (*v97)(v72);
          }
        }
        if (v221)
        {
          v98 = (uint64_t (**)(char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_327;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v221);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v221);
          v221 = (char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v98 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_327:
            (*v98)(v221);
          }
        }
        if (v219)
        {
          v99 = (uint64_t (**)(char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_334;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v219);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v219);
          v96 = (char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v99 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_334:
            (*v99)(v96);
          }
        }
        if (v220 >= 1)
        {
          for (j = 0; v220 != j; ++j)
          {
            v101 = v19[j];
            if (v101)
            {
              v102 = (uint64_t (**)(const char *))&off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v101);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v101);
                v101 = (const char *)xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                  continue;
                v102 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
              }
              (*v102)(v101);
            }
          }
        }
        v17 = v229;
        if (v229)
          goto LABEL_3;
LABEL_9:
        if (v19)
        {
          v21 = (uint64_t (**)(const char **))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_15;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v19);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v19);
          v19 = (const char **)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v21 = (uint64_t (**)(const char **))&xmmword_1ECD3B1D0;
LABEL_15:
            (*v21)(v19);
          }
        }
        v22 = v237;
        if (v237)
        {
          if (v18)
          {
            sub_1ACC57F0C(v18);
            return v237;
          }
          else if (v236)
          {
            (*((void (**)(const char **))*v236 + 2))(v236);
          }
        }
        else
        {
          *a6 = v18;
        }
        return v22;
      case 1:
        v58 = v213;
        v30 = v232;
        v31 = v226;
        if (!v213)
          goto LABEL_133;
        v59 = (uint64_t (**)(const char *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_132;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v213);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v213);
        v58 = (const char *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v59 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
LABEL_132:
          (*v59)(v58);
        }
LABEL_133:
        v213 = v42;
        v29 = v228;
        goto LABEL_26;
      case 2:
        v30 = v232;
        v31 = v226;
        if (!v217)
          goto LABEL_141;
        v60 = (uint64_t (**)(char *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_140;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v217);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v217);
        v217 = (char *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v60 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_140:
          (*v60)(v217);
        }
LABEL_141:
        v217 = v42;
        v29 = v228;
        goto LABEL_26;
      case 3:
        v30 = v232;
        v31 = v226;
        if (!v215)
          goto LABEL_149;
        v61 = (uint64_t (**)(char *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_148;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v215);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v215);
        v215 = (char *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v61 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_148:
          (*v61)(v215);
        }
LABEL_149:
        v215 = v42;
        v29 = v228;
        goto LABEL_26;
      case 4:
        v62 = strlen(v42);
        v30 = v232;
        if (v62 == 4)
        {
          v63 = *v42;
          if (!*v42)
          {
            LODWORD(v64) = 0;
            v65 = "desc";
            v31 = v226;
            goto LABEL_207;
          }
          if ((v63 & 0xFFFFFFDF) == 0x44)
          {
            v64 = v42[1];
            v31 = v226;
            if (!v42[1])
            {
              v65 = "esc";
              goto LABEL_207;
            }
            if ((v64 & 0xFFFFFFDF) == 0x45)
            {
              v64 = v42[2];
              if (!v42[2])
              {
                v65 = "sc";
                goto LABEL_207;
              }
              if ((v64 & 0xFFFFFFDF) == 0x53)
              {
                v64 = v42[3];
                if (!v42[3])
                {
                  v65 = "c";
LABEL_207:
                  if ((_DWORD)v64 == byte_1ACCB6333[*v65])
                    goto LABEL_209;
LABEL_208:
                  sub_1ACC51B88(v225, "unrecognized order: %s", v42);
                  v237 = 1;
                  LODWORD(v63) = *v42;
LABEL_209:
                  BYTE4(v212) = (v63 & 0xFFFFFFDF) == 68;
                  goto LABEL_210;
                }
                if ((v64 & 0xFFFFFFDF) == 0x43)
                  goto LABEL_209;
                v64 += (unint64_t)byte_1ACCB6333;
                v65 = "c";
              }
              else
              {
                v64 += (unint64_t)byte_1ACCB6333;
                v65 = "sc";
              }
            }
            else
            {
              v64 += (unint64_t)byte_1ACCB6333;
              v65 = "esc";
            }
          }
          else
          {
            v64 = (unint64_t)&byte_1ACCB6333[v63];
            v65 = "desc";
            v31 = v226;
          }
        }
        else
        {
          v31 = v226;
          if (v62 != 3)
            goto LABEL_208;
          v63 = *v42;
          if (!*v42)
          {
            LODWORD(v64) = 0;
            v65 = "asc";
            goto LABEL_207;
          }
          if ((v63 & 0xFFFFFFDF) == 0x41)
          {
            v64 = v42[1];
            if (!v42[1])
            {
              v65 = "sc";
              goto LABEL_207;
            }
            if ((v64 & 0xFFFFFFDF) == 0x53)
            {
              v64 = v42[2];
              if (!v42[2])
              {
                v65 = "c";
                goto LABEL_207;
              }
              if ((v64 & 0xFFFFFFDF) == 0x43)
                goto LABEL_209;
              v64 += (unint64_t)byte_1ACCB6333;
              v65 = "c";
            }
            else
            {
              v64 += (unint64_t)byte_1ACCB6333;
              v65 = "sc";
            }
          }
          else
          {
            v64 = (unint64_t)&byte_1ACCB6333[v63];
            v65 = "asc";
          }
        }
        LODWORD(v64) = *(unsigned __int8 *)v64;
        goto LABEL_207;
      case 5:
        v30 = v232;
        v31 = v226;
        if (!v221)
          goto LABEL_166;
        v66 = (uint64_t (**)(char *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_165;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v221);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v221);
        v221 = (char *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v66 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_165:
          (*v66)(v221);
        }
LABEL_166:
        v221 = v42;
        v29 = v228;
        goto LABEL_26;
      case 6:
        v30 = v232;
        v31 = v226;
        if (!v219)
          goto LABEL_174;
        v67 = (uint64_t (**)(char *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_173;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v219);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v219);
        v219 = (char *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v67 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
LABEL_173:
          (*v67)(v219);
        }
LABEL_174:
        v219 = v42;
        v29 = v228;
        goto LABEL_26;
      case 7:
        v19[v220++] = v42;
        v29 = v228;
        v30 = v232;
        v31 = v226;
        goto LABEL_26;
      default:
        goto LABEL_125;
    }
  }
}

uint64_t sub_1ACC5D62C(uint64_t a1, const char *a2, const char ***a3, char **a4)
{
  char *v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  char *v13;
  char *i;
  unsigned __int8 v15;
  int v16;
  unsigned __int8 v17;
  int v18;
  char *v19;
  int v20;
  int v21;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  _DWORD *v36;
  int v37;
  const char **v38;
  int v39;
  uint64_t (*v40)(const char *, int, char *, int);
  const char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  unsigned __int8 *v53;
  unsigned __int8 v54;
  int v55;
  int v56;
  unsigned __int8 v57;
  int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  const char ***v66;
  uint64_t v67;
  void (**v68)(uint64_t);
  void (**v69)(uint64_t);
  uint64_t (**v70)(char *);
  const char *v72;
  const char ***v73;
  unint64_t v74;

  v7 = sqlite3_mprintf("%s", a2);
  if (!v7)
    return 7;
  v8 = v7;
  v9 = strlen(v7);
  v10 = 0;
  v74 = (unint64_t)&v8[v9];
  while (1)
  {
    v11 = v8[v10];
    v12 = v8[v10];
    if (v11 <= 38)
      break;
    if (v11 == 39 || v11 == 96)
    {
LABEL_13:
      v13 = &v8[v10];
      for (i = &v8[v10]; ; v13 = i)
      {
        v16 = *++i;
        v15 = v16;
        if (!v16)
          break;
        if ((_DWORD)v12 == v15)
        {
          i = v13 + 2;
          if (v13[2] != v11)
            break;
        }
      }
LABEL_31:
      v23 = &v8[v10];
      v11 = (_DWORD)i - (_DWORD)v8 - v10;
      goto LABEL_32;
    }
    if (v11 == 91)
    {
      v19 = &v8[v10 + 1];
      do
      {
        v21 = *v19++;
        v20 = v21;
      }
      while (v21 != 93 && v20 != 0);
      if (v20)
        LODWORD(i) = (_DWORD)v19;
      else
        LODWORD(i) = (_DWORD)v19 - 1;
      goto LABEL_31;
    }
LABEL_10:
    if ((v12 & 0x80) != 0 || byte_1ACCBB45E[v12])
    {
      i = &v8[v10];
      do
      {
        do
        {
          v18 = *++i;
          v17 = v18;
        }
        while (v18 < 0);
      }
      while (byte_1ACCBB45E[v17]);
      goto LABEL_31;
    }
    ++v10;
  }
  if (v8[v10])
  {
    if (v11 == 34)
      goto LABEL_13;
    goto LABEL_10;
  }
  v23 = 0;
LABEL_32:
  v73 = a3;
  if (v23)
    v24 = v23;
  else
    v24 = v8;
  v25 = v11;
  v24[v11] = 0;
  v26 = *v24;
  if ((v26 - 34) <= 0x3E && ((1 << (v26 - 34)) & 0x4200000000000021) != 0)
  {
    if (v26 == 91)
      v28 = 93;
    else
      v28 = *v24;
    v29 = v24[1];
    if (v24[1])
    {
      v30 = 0;
      v31 = 1;
      while (1)
      {
        if (v29 == v28)
        {
          if (v24[v31 + 1] != v28)
            goto LABEL_50;
          v24[v30] = v28;
          v31 += 2;
        }
        else
        {
          v24[v30] = v29;
          ++v31;
        }
        ++v30;
        v29 = v24[v31];
        if (!v24[v31])
          goto LABEL_50;
      }
    }
    LODWORD(v30) = 0;
LABEL_50:
    v24[v30] = 0;
  }
  v32 = strlen(v24);
  if (!a1 || !*(_QWORD *)(a1 + 24))
    goto LABEL_114;
  v33 = (v32 + 1);
  v34 = *(_BYTE *)a1 == 1 ? sub_1ACB5BD38(v24, v33) : sub_1ACC52EC8(v24, v33);
  v35 = *(_QWORD *)(a1 + 24);
  if (!v35)
    goto LABEL_114;
  v36 = (_DWORD *)(v35 + 16 * ((*(_DWORD *)(a1 + 16) - 1) & v34));
  v39 = *v36;
  v38 = (const char **)(v36 + 2);
  v37 = v39;
  v40 = *(_BYTE *)a1 == 1 ? sub_1ACB5BD9C : (uint64_t (*)(const char *, int, char *, int))sub_1ACC52F00;
  do
  {
    if (!v37)
      goto LABEL_114;
    v38 = (const char **)*v38;
    if (!v38)
      goto LABEL_114;
    --v37;
  }
  while (v40(v38[3], *((_DWORD *)v38 + 8), v24, v33));
  v41 = v38[2];
  if (!v41)
  {
LABEL_114:
    sub_1ACC51B88(a4, "unknown tokenizer: %s", v24);
    v67 = 1;
    goto LABEL_115;
  }
  v42 = (unint64_t)&v24[v25 + 1];
  if (v42 >= v74)
  {
    v44 = 0;
    v46 = 0;
    v66 = v73;
LABEL_124:
    v67 = (*((uint64_t (**)(uint64_t, uint64_t, const char ***))v41 + 1))(v46, v44, v66);
    if ((_DWORD)v67)
      sub_1ACC51B88(a4, "unknown tokenizer");
    else
      **v66 = v41;
    if (!v44)
      goto LABEL_115;
    v69 = (void (**)(uint64_t))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v44);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v44);
      v44 = xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_115;
      v69 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
    }
    (*v69)(v44);
LABEL_115:
    v68 = (void (**)(uint64_t))&off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
      v44 = (uint64_t)v8;
      goto LABEL_121;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v44 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v68 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
      goto LABEL_121;
    }
    return v67;
  }
  v72 = v38[2];
  v43 = 0;
  v44 = 0;
  while (2)
  {
    v45 = 0;
    v46 = v43;
    v47 = (unsigned __int8 *)(v42 + 1);
    while (2)
    {
      v48 = *(char *)(v42 + v45);
      v49 = *(unsigned __int8 *)(v42 + v45);
      if (v48 > 38)
      {
        if (v48 == 39 || v48 == 96)
          break;
        if (v48 == 91)
        {
          do
          {
            v51 = *v47++;
            v50 = v51;
          }
          while (v51 != 93 && v50 != 0);
          if (!v50)
            LODWORD(v47) = (_DWORD)v47 - 1;
          goto LABEL_94;
        }
        goto LABEL_74;
      }
      if (!*(_BYTE *)(v42 + v45))
        goto LABEL_113;
      if (v48 != 34)
      {
LABEL_74:
        if ((v49 & 0x80) != 0 || byte_1ACCBB45E[v49])
        {
          v47 = (unsigned __int8 *)(v42 + v45);
          do
          {
            do
            {
              v58 = (char)*++v47;
              v57 = v58;
            }
            while (v58 < 0);
          }
          while (byte_1ACCBB45E[v57]);
          goto LABEL_94;
        }
        ++v45;
        ++v47;
        continue;
      }
      break;
    }
    v53 = (unsigned __int8 *)(v42 + v45);
    v47 = (unsigned __int8 *)(v42 + v45 + 1);
    v54 = *v47;
    if (!*v47)
    {
      v55 = 1;
      goto LABEL_95;
    }
    do
    {
      if ((_DWORD)v49 == v54)
      {
        v47 = v53 + 2;
        if (v53[2] != (_DWORD)v49)
          break;
      }
      v53 = v47;
      v56 = *++v47;
      v54 = v56;
    }
    while (v56);
LABEL_94:
    v55 = (_DWORD)v47 - v42 - v45;
LABEL_95:
    if (!sqlite3_initialize())
    {
      ++v43;
      v59 = sub_1ACB6BB48(v44, 8 * (v46 + 1));
      if (v59)
      {
        v44 = v59;
        *(_QWORD *)(v59 + 8 * v46) = v42 + v45;
        *(_BYTE *)(v42 + v45 + v55) = 0;
        v60 = *(unsigned __int8 *)(v42 + v45);
        if ((v60 - 34) <= 0x3E && ((1 << (v60 - 34)) & 0x4200000000000021) != 0)
        {
          if (v60 == 91)
            v60 = 93;
          v61 = v42 + v45;
          v62 = *(unsigned __int8 *)(v42 + v45 + 1);
          if (*(_BYTE *)(v42 + v45 + 1))
          {
            v63 = 0;
            v64 = 1;
            while (1)
            {
              if (v62 == v60)
              {
                if (*(unsigned __int8 *)(v42 + v64 + 1 + v45) != v60)
                {
LABEL_108:
                  v65 = v63;
                  goto LABEL_110;
                }
                *(_BYTE *)(v61 + v63) = v60;
                v64 += 2;
              }
              else
              {
                *(_BYTE *)(v61 + v63) = v62;
                ++v64;
              }
              ++v63;
              v62 = *(unsigned __int8 *)(v42 + v64 + v45);
              if (!*(_BYTE *)(v42 + v64 + v45))
                goto LABEL_108;
            }
          }
          v65 = 0;
LABEL_110:
          *(_BYTE *)(v42 + v65 + v45) = 0;
        }
        v42 += v55 + v45 + 1;
        if (v42 >= v74)
        {
          ++v46;
LABEL_113:
          v41 = v72;
          v66 = v73;
          goto LABEL_124;
        }
        continue;
      }
    }
    break;
  }
  v70 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v70 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
      goto LABEL_139;
    }
  }
  else
  {
LABEL_139:
    (*v70)(v8);
  }
  if (!v44)
    return 7;
  v68 = (void (**)(uint64_t))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v44);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v44);
    v44 = xmmword_1ECD3E930;
    v67 = 7;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v68 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
      goto LABEL_121;
    }
  }
  else
  {
    v67 = 7;
LABEL_121:
    (*v68)(v44);
  }
  return v67;
}

uint64_t sub_1ACC5DD54(uint64_t a1)
{
  sqlite3 *v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t result;
  void (**v8)(char *);
  unsigned int v9;

  v9 = 0;
  v2 = *(sqlite3 **)(a1 + 24);
  if (!*(_QWORD *)(a1 + 80))
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = sqlite3_mprintf("docid INTEGER PRIMARY KEY");
    if (!v4)
      goto LABEL_6;
    v5 = v4;
    v6 = 0;
    while (v6 < *(int *)(a1 + 48))
    {
      v5 = sqlite3_mprintf("%z, 'c%d%q'", v5, v6, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v6));
      ++v6;
      if (!v5)
        goto LABEL_6;
    }
    if (v3)
    {
      v5 = sqlite3_mprintf("%z, langid", v5, v3);
      if (!v5)
      {
LABEL_6:
        v9 = 7;
        sub_1ACC5E470((char *)&v9, v2, "CREATE TABLE %Q.'%q_content'(%s)", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), 0);
        goto LABEL_7;
      }
    }
    sub_1ACC5E470((char *)&v9, v2, "CREATE TABLE %Q.'%q_content'(%s)", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v5);
    v8 = (void (**)(char *))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_21;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v5);
    v5 = (char *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v8 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_21:
      (*v8)(v5);
    }
  }
LABEL_7:
  sub_1ACC5E470((char *)&v9, v2, "CREATE TABLE %Q.'%q_segments'(blockid INTEGER PRIMARY KEY, block BLOB);",
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40));
  sub_1ACC5E470((char *)&v9, v2, "CREATE TABLE %Q.'%q_segdir'(level INTEGER,idx INTEGER,start_block INTEGER,leaves_end_block INTEGER,end_block INTEGER,root BLOB,PRIMARY KEY(level, idx));",
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40));
  if (*(_BYTE *)(a1 + 462))
    sub_1ACC5E470((char *)&v9, v2, "CREATE TABLE %Q.'%q_docsize'(docid INTEGER PRIMARY KEY, size BLOB);",
      *(_QWORD *)(a1 + 32),
      *(_QWORD *)(a1 + 40));
  if (!*(_BYTE *)(a1 + 461))
    return v9;
  sub_1ACC5E470((char *)&v9, *(sqlite3 **)(a1 + 24), "CREATE TABLE IF NOT EXISTS %Q.'%q_stat'(id INTEGER PRIMARY KEY, value BLOB);",
    *(_QWORD *)(a1 + 32),
    *(_QWORD *)(a1 + 40));
  result = v9;
  if (!v9)
    *(_BYTE *)(a1 + 461) = 1;
  return result;
}

unsigned __int8 *sub_1ACC5DF6C(unsigned __int8 *result, uint64_t a2)
{
  _DWORD *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  int v6;
  int v7;
  uint64_t (**v8)(unsigned __int8 *);
  uint64_t v9;
  sqlite3_stmt *pStmt;

  if (!*(_DWORD *)result)
  {
    v3 = result;
    v9 = *(_QWORD *)(a2 + 32);
    pStmt = 0;
    result = (unsigned __int8 *)sqlite3_mprintf("PRAGMA %Q.page_size", v9);
    if (result)
    {
      v5 = result;
      v6 = sub_1ACB5C66C(*(_QWORD *)(a2 + 24), result, 0xFFFFFFFFLL, 0, 0, &pStmt, 0, v4);
      if (v6 == 23)
      {
        v7 = 0;
        *(_DWORD *)(a2 + 468) = 1024;
      }
      else
      {
        v7 = v6;
        if (!v6)
        {
          sqlite3_step(pStmt);
          *(_DWORD *)(a2 + 468) = sqlite3_column_int(pStmt, 0);
          v7 = sqlite3_finalize(pStmt);
        }
      }
      v8 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
        --qword_1ECD3E8D0;
        result = (unsigned __int8 *)off_1ECD3B168(v5);
        v5 = (unsigned __int8 *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_14;
        v8 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
      }
      result = (unsigned __int8 *)(*v8)(v5);
    }
    else
    {
      v7 = 7;
    }
LABEL_14:
    *v3 = v7;
  }
  return result;
}

char *sub_1ACC5E0B8(char *result, uint64_t a2)
{
  _DWORD *v3;
  const char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  char *v9;
  int v11;
  uint64_t (**v12)(char *);
  uint64_t (**v13)(char *);

  if (!*(_DWORD *)result)
  {
    v3 = result;
    if (*(_QWORD *)(a2 + 88))
      v4 = *(const char **)(a2 + 88);
    else
      v4 = "__langid";
    sqlite3_vtab_config(*(sqlite3 **)(a2 + 24), 1, 1);
    v5 = sqlite3_mprintf("%Q, ", **(_QWORD **)(a2 + 56));
    if (v5)
    {
      v6 = 1;
      do
      {
        v7 = *(int *)(a2 + 48);
        v8 = v6 >= v7;
        if (v6 >= v7)
          break;
        v5 = sqlite3_mprintf("%z%Q, ", v5, *(_QWORD *)(*(_QWORD *)(a2 + 56) + 8 * v6++));
      }
      while (v5);
    }
    else
    {
      v8 = 0;
    }
    result = sqlite3_mprintf("CREATE TABLE x(%s %Q HIDDEN, docid HIDDEN, %Q HIDDEN)", v5, *(_QWORD *)(a2 + 40), v4);
    v9 = result;
    if (!v8 || result == 0)
    {
      v11 = 7;
      if (!result)
        goto LABEL_23;
    }
    else
    {
      v11 = sqlite3_declare_vtab(*(sqlite3 **)(a2 + 24), result);
    }
    v12 = (uint64_t (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
      --qword_1ECD3E8D0;
      result = (char *)off_1ECD3B168(v9);
      v9 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_23:
        if (v5)
        {
          v13 = (uint64_t (**)(char *))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
            --qword_1ECD3E8D0;
            result = (char *)off_1ECD3B168(v5);
            v5 = (char *)xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_30;
            v13 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
          }
          result = (char *)(*v13)(v5);
        }
LABEL_30:
        *v3 = v11;
        return result;
      }
      v12 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    }
    result = (char *)(*v12)(v9);
    goto LABEL_23;
  }
  return result;
}

char *sub_1ACC5E2D4(char *result, const char **a2, char *a3, ...)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t (**v7)(char *);
  const char *v8;
  uint64_t (**v9)(const char *);
  va_list va;

  va_start(va, a3);
  if (!*(_DWORD *)result)
  {
    v4 = result;
    result = sqlite3_vmprintf(a3, va);
    if (!result)
    {
LABEL_11:
      v6 = 0;
      *(_DWORD *)v4 = 7;
LABEL_12:
      v8 = *a2;
      if (*a2)
      {
        v9 = (uint64_t (**)(const char *))&off_1ECD3B168;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
          --qword_1ECD3E8D0;
          result = (char *)off_1ECD3B168(v8);
          v8 = (const char *)xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_20;
          v9 = (uint64_t (**)(const char *))&xmmword_1ECD3B1D0;
        }
        result = (char *)(*v9)(v8);
      }
LABEL_20:
      *a2 = v6;
      return result;
    }
    v5 = result;
    if (!*a2)
    {
      v6 = result;
      goto LABEL_20;
    }
    v6 = sqlite3_mprintf("%s%s", *a2, result);
    v7 = (uint64_t (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
      --qword_1ECD3E8D0;
      result = (char *)off_1ECD3B168(v5);
      v5 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_10:
        if (v6)
          goto LABEL_12;
        goto LABEL_11;
      }
      v7 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    }
    result = (char *)(*v7)(v5);
    goto LABEL_10;
  }
  return result;
}

char *sub_1ACC5E470(char *result, sqlite3 *a2, char *a3, ...)
{
  char *v4;
  char *v5;
  uint64_t (**v6)(char *);
  va_list va;

  va_start(va, a3);
  if (!*(_DWORD *)result)
  {
    v4 = result;
    result = sqlite3_vmprintf(a3, va);
    if (result)
    {
      v5 = result;
      *(_DWORD *)v4 = sqlite3_exec(a2, result, 0, 0, 0);
      v6 = (uint64_t (**)(char *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        return (char *)(*v6)(v5);
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
      --qword_1ECD3E8D0;
      result = (char *)off_1ECD3B168(v5);
      v5 = (char *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v6 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
        return (char *)(*v6)(v5);
      }
    }
    else
    {
      *(_DWORD *)v4 = 7;
    }
  }
  return result;
}

double sub_1ACC5E56C(uint64_t *a1)
{
  uint64_t v2;
  sqlite3_stmt *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t (**v8)(uint64_t);
  uint64_t v9;
  uint64_t (**v10)(uint64_t);
  _BYTE *v11;
  uint64_t (**v12)(_QWORD);
  double result;

  if (*((_BYTE *)a1 + 12))
  {
    v2 = *a1;
    if (!*(_QWORD *)(*a1 + 432))
    {
      v3 = (sqlite3_stmt *)a1[2];
      *(_QWORD *)(v2 + 432) = v3;
      sqlite3_reset(v3);
      a1[2] = 0;
    }
    *((_BYTE *)a1 + 12) = 0;
  }
  sqlite3_finalize((sqlite3_stmt *)a1[2]);
  v4 = a1[5];
  if (v4)
  {
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 16);
      v5 = *(_QWORD *)(v4 + 24);
      if (!v5)
        goto LABEL_16;
      v7 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_15;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v5);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v5);
      v5 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
        break;
LABEL_16:
      v8 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v4);
        v4 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_8;
        v8 = &xmmword_1ECD3B1D0;
      }
      (*v8)(v4);
LABEL_8:
      v4 = v6;
      if (!v6)
        goto LABEL_21;
    }
    v7 = &xmmword_1ECD3B1D0;
LABEL_15:
    (*v7)(v5);
    goto LABEL_16;
  }
LABEL_21:
  a1[5] = 0;
  v9 = a1[8];
  if (v9)
  {
    v10 = &off_1ECD3B168;
    if (!dword_1ECD3B140)
    {
LABEL_27:
      (*v10)(v9);
      goto LABEL_28;
    }
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v9);
    v9 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v10 = &xmmword_1ECD3B1D0;
      goto LABEL_27;
    }
  }
LABEL_28:
  v11 = (_BYTE *)a1[15];
  if (v11)
  {
    *v11 = 0;
    if (!v11[1] && !v11[2])
    {
      v12 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_36:
        (*v12)(v11);
        goto LABEL_37;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v11);
      v11 = (_BYTE *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v12 = &xmmword_1ECD3B1D0;
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  sub_1ACC5E800(a1[3]);
  a1[15] = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 13) = 0u;
  *(_OWORD *)(a1 + 11) = 0u;
  *(_OWORD *)(a1 + 9) = 0u;
  *(_OWORD *)(a1 + 7) = 0u;
  *(_OWORD *)(a1 + 5) = 0u;
  *(_OWORD *)(a1 + 3) = 0u;
  *(_OWORD *)(a1 + 1) = 0u;
  return result;
}

uint64_t sub_1ACC5E800(uint64_t result)
{
  _QWORD *i;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t (**v5)(uint64_t);
  uint64_t v6;
  uint64_t (**v7)(uint64_t);
  uint64_t v8;
  uint64_t *v9;
  void (**v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v13)(uint64_t);
  uint64_t (**v14)(void);
  BOOL v15;
  _QWORD *v16;

  if (result)
  {
    do
    {
      do
      {
        i = (_QWORD *)result;
        result = *(_QWORD *)(result + 16);
      }
      while (result);
      result = i[3];
    }
    while (result);
    while (1)
    {
      v2 = i[1];
      v3 = (uint64_t *)i[4];
      if (!v3)
        goto LABEL_31;
      v4 = *v3;
      if (!*v3)
        goto LABEL_12;
      v5 = &off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v4);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v4);
        v4 = xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_12;
        v5 = &xmmword_1ECD3B1D0;
      }
      (*v5)(v4);
LABEL_12:
      if (*((_DWORD *)v3 + 8))
      {
        v6 = v3[5];
        if (v6)
        {
          v7 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_19;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v6);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v6);
          v6 = xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v7 = &xmmword_1ECD3B1D0;
LABEL_19:
            (*v7)(v6);
          }
        }
      }
      v3[6] = 0;
      *((_OWORD *)v3 + 1) = 0u;
      *((_OWORD *)v3 + 2) = 0u;
      *(_OWORD *)v3 = 0u;
      if (*((int *)v3 + 20) >= 1)
      {
        v8 = 0;
        v9 = v3 + 15;
        do
        {
          v11 = *v9;
          sub_1ACC51C60(*v9);
          if (v11)
          {
            v10 = (void (**)(uint64_t))&off_1ECD3B168;
            if (dword_1ECD3B140)
            {
              if ((_QWORD)xmmword_1ECD3E930)
                xmmword_1ECD3B1C0(xmmword_1ECD3E930);
              qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
              --qword_1ECD3E8D0;
              off_1ECD3B168(v11);
              v11 = xmmword_1ECD3E930;
              if (!(_QWORD)xmmword_1ECD3E930)
                goto LABEL_24;
              v10 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
            }
            (*v10)(v11);
          }
LABEL_24:
          *v9 = 0;
          v9 += 5;
          ++v8;
        }
        while (v8 < *((int *)v3 + 20));
      }
LABEL_31:
      v12 = i[7];
      if (!v12)
        goto LABEL_38;
      v13 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_37;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v12);
      v12 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v13 = &xmmword_1ECD3B1D0;
LABEL_37:
        (*v13)(v12);
      }
LABEL_38:
      v14 = (uint64_t (**)(void))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_43;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(i);
      --qword_1ECD3E8D0;
      off_1ECD3B168(i);
      result = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v14 = (uint64_t (**)(void))&xmmword_1ECD3B1D0;
LABEL_43:
        result = (*v14)();
      }
      if (!v2)
        return result;
      v15 = i == *(_QWORD **)(v2 + 16);
      i = (_QWORD *)v2;
      if (v15)
      {
        v16 = *(_QWORD **)(v2 + 24);
        for (i = (_QWORD *)v2; v16; v16 = (_QWORD *)i[3])
        {
          do
          {
            i = v16;
            v16 = (_QWORD *)v16[2];
          }
          while (v16);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1ACC5EB2C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (**v3)(uint64_t);

  v1 = result;
  if (*(_DWORD *)(result + 32))
  {
    v2 = *(_QWORD *)(result + 40);
    if (v2)
    {
      v3 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
      {
LABEL_8:
        result = (*v3)(v2);
        goto LABEL_9;
      }
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888 -= (int)off_1ECD3B178(v2);
      --qword_1ECD3E8D0;
      result = off_1ECD3B168(v2);
      v2 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v3 = &xmmword_1ECD3B1D0;
        goto LABEL_8;
      }
    }
  }
LABEL_9:
  *(_QWORD *)(v1 + 40) = 0;
  *(_DWORD *)(v1 + 48) = 0;
  *(_DWORD *)(v1 + 32) = 0;
  return result;
}

uint64_t sub_1ACC5EBEC(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t (**v10)(unsigned __int8 *);

  v1 = a1 + 2;
  if (!a1[2])
  {
    v4 = *a1;
    v5 = *(_QWORD *)(*a1 + 432);
    if (v5)
    {
      *v1 = v5;
      *(_QWORD *)(v4 + 432) = 0;
LABEL_5:
      v2 = 0;
      *((_BYTE *)a1 + 12) = 1;
      return v2;
    }
    v7 = (unsigned __int8 *)sqlite3_mprintf("SELECT %s WHERE rowid = ?", *(const char **)(v4 + 440));
    if (!v7)
      return 7;
    v9 = v7;
    ++*(_DWORD *)(v4 + 104);
    v2 = sub_1ACB5C66C(*(_QWORD *)(v4 + 24), v7, 0xFFFFFFFFLL, 129, 0, v1, 0, v8);
    --*(_DWORD *)(v4 + 104);
    v10 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v9);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v9);
      v9 = (unsigned __int8 *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_14:
        if ((_DWORD)v2)
          return v2;
        goto LABEL_5;
      }
      v10 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
    }
    (*v10)(v9);
    goto LABEL_14;
  }
  return 0;
}

uint64_t sub_1ACC5ED40(uint64_t *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  _DWORD *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (**v34)(_QWORD);
  uint64_t (**v35)(uint64_t *);
  uint64_t v37;
  _QWORD *v38;

  v3 = *a1;
  if (!a2)
  {
    v6 = 1;
    goto LABEL_71;
  }
  LODWORD(v4) = a2;
  v5 = *(_DWORD *)v3;
  if ((*(_DWORD *)v3 - 3) > 1)
  {
    if (v5 == 2)
    {
      v7 = *(_QWORD *)(v3 + 16);
      v37 = *(_QWORD *)(v3 + 24);
      v8 = v37;
      v38 = (_QWORD *)v7;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)(v3 + 24) = 0;
      *(_QWORD *)(v7 + 8) = 0;
      *(_QWORD *)(v8 + 8) = 0;
      v9 = (a2 - 1);
      v10 = sub_1ACC5ED40(&v38, v9);
      if ((_DWORD)v10)
      {
        v6 = v10;
      }
      else
      {
        v6 = sub_1ACC5ED40(&v37, v9);
        v8 = v37;
        if (!(_DWORD)v6)
        {
          v30 = (uint64_t)v38;
          *(_QWORD *)(v3 + 16) = v38;
          *(_QWORD *)(v30 + 8) = v3;
          *(_QWORD *)(v3 + 24) = v8;
          *(_QWORD *)(v8 + 8) = v3;
          goto LABEL_70;
        }
      }
      sub_1ACC5E800(v8);
      sub_1ACC5E800((uint64_t)v38);
      goto LABEL_70;
    }
    v6 = 0;
    goto LABEL_72;
  }
  if (sqlite3_initialize() || (v11 = (uint64_t *)sub_1ACB5D828(8 * (int)v4)) == 0)
  {
    v6 = 7;
    goto LABEL_71;
  }
  v12 = v11;
  bzero(v11, 8 * (int)v4);
  v13 = v3;
  if (*(_DWORD *)v3 == v5)
  {
    v13 = v3;
    do
      v13 = *(_QWORD *)(v13 + 16);
    while (*(_DWORD *)v13 == v5);
  }
  v14 = 0;
  v38 = (_QWORD *)v13;
  while (1)
  {
    v15 = *(_QWORD **)(v13 + 8);
    *(_QWORD *)(v13 + 8) = 0;
    if (v15)
      v15[2] = 0;
    else
      v3 = 0;
    v16 = sub_1ACC5ED40(&v38, (v4 - 1));
    if ((_DWORD)v16)
    {
      v6 = v16;
      goto LABEL_50;
    }
    v17 = (uint64_t)v38;
    v18 = v38 != 0;
    if (!v38 || (int)v4 < 1)
      break;
    v19 = 0;
    while (1)
    {
      v20 = v14;
      v21 = v12[v19];
      if (!v21)
        break;
      v14[2] = v21;
      v14[3] = v17;
      *(_QWORD *)(v21 + 8) = v14;
      *(_QWORD *)(v17 + 8) = v14;
      v14 = (_QWORD *)v14[1];
      v18 = v20 != 0;
      v20[1] = 0;
      v12[v19] = 0;
      if (v20)
      {
        ++v19;
        v17 = (uint64_t)v20;
        if (v19 < (int)v4)
          continue;
      }
      goto LABEL_29;
    }
    v12[v19] = v17;
    if (!v15)
    {
LABEL_40:
      if ((int)v4 < 1)
      {
        v6 = 0;
        v3 = 0;
      }
      else
      {
        v3 = 0;
        v27 = v4;
        v28 = v12;
        do
        {
          if (*v28)
          {
            if (v3)
            {
              v20[3] = v3;
              v29 = *v28;
              v20[2] = *v28;
              *(_QWORD *)(v29 + 8) = v20;
              *(_QWORD *)(v3 + 8) = v20;
              v3 = (uint64_t)v20;
              v20 = (_QWORD *)v20[1];
            }
            else
            {
              v3 = *v28;
            }
            *(_QWORD *)(v3 + 8) = 0;
          }
          ++v28;
          --v27;
        }
        while (v27);
        v6 = 0;
      }
      goto LABEL_64;
    }
LABEL_33:
    v22 = v15 + 3;
    do
    {
      v13 = *v22;
      v23 = (_DWORD *)*v22;
      v24 = *v23;
      v22 = (uint64_t *)(v23 + 4);
    }
    while (v24 == v5);
    v38 = (_QWORD *)v13;
    v25 = v15[3];
    *(_QWORD *)(v25 + 8) = v15[1];
    v26 = v15[1];
    if (v26)
      *(_QWORD *)(v26 + 16) = v25;
    else
      v3 = v25;
    v15[1] = v20;
    v14 = v15;
  }
  v20 = v38;
LABEL_29:
  if (!v18)
  {
    v20 = v14;
    if (!v15)
      goto LABEL_40;
    goto LABEL_33;
  }
  sub_1ACC5E800((uint64_t)v20);
  v6 = 18;
LABEL_50:
  if ((int)v4 >= 1)
  {
    v4 = v4;
    v31 = v12;
    do
    {
      v32 = *v31++;
      sub_1ACC5E800(v32);
      --v4;
    }
    while (v4);
  }
  if (v14)
  {
    while (2)
    {
      v33 = (_QWORD *)v14[1];
      v34 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_55;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v14);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v14);
      v14 = (_QWORD *)xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v34 = &xmmword_1ECD3B1D0;
LABEL_55:
        (*v34)(v14);
      }
      v14 = v33;
      if (!v33)
        break;
      continue;
    }
  }
LABEL_64:
  v35 = (uint64_t (**)(uint64_t *))&off_1ECD3B168;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v12);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v12);
    v12 = (uint64_t *)xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v35 = (uint64_t (**)(uint64_t *))&xmmword_1ECD3B1D0;
      goto LABEL_69;
    }
  }
  else
  {
LABEL_69:
    (*v35)(v12);
  }
LABEL_70:
  if ((_DWORD)v6)
  {
LABEL_71:
    sub_1ACC5E800(v3);
    v3 = 0;
  }
LABEL_72:
  *a1 = v3;
  return v6;
}

uint64_t sub_1ACC5F144(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    LODWORD(v2) = a2;
    v3 = result;
    while ((v2 & 0x80000000) == 0)
    {
      v2 = (v2 - 1);
      result = sub_1ACC5F144(*(_QWORD *)(v3 + 16), v2);
      if ((_DWORD)result)
        return result;
      v3 = *(_QWORD *)(v3 + 24);
      if (!v3)
        return 0;
    }
    return 18;
  }
  return result;
}

uint64_t sub_1ACC5F194(uint64_t **a1, unsigned __int8 *a2, int a3, uint64_t *a4, _DWORD *a5)
{
  unsigned int v5;
  uint64_t v7;
  int v8;
  unsigned __int8 *v9;
  BOOL v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  int v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t i;
  uint64_t **v27;
  uint64_t j;
  int v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t **v36;
  uint64_t v37;
  const void *v38;
  int v39;
  int v40;
  uint64_t **v41;
  uint64_t **v42;
  void (**v43)(uint64_t);
  _QWORD *v44;
  uint64_t **v45;
  uint64_t v46;
  int v47;
  int v48;
  const char *v49;
  int v50;
  int v51;
  int v52;
  unsigned __int8 *v53;
  uint64_t v54;
  unsigned int v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t **v66;
  unsigned int v67;
  unsigned int v68;
  uint64_t v70;
  unsigned int v71;
  const void *v72;
  uint64_t v73;
  size_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void (**v78)(const void *);
  uint64_t v79;
  uint64_t v80;
  int *v81;
  void (**v82)(const void *);
  uint64_t v83;
  uint64_t (**v84)(uint64_t);
  uint64_t v85;
  uint64_t v86;
  unsigned __int8 *v87;
  int v88;
  _BOOL4 v89;
  BOOL v90;
  BOOL v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _BOOL4 v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t **v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  _BOOL4 v111;
  size_t v112;
  void *v113;
  size_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  void (**v118)(void);
  BOOL v119;
  uint64_t v121;
  int v123;
  unsigned __int8 *v124;
  int v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  uint64_t **v129;
  int v130;
  unsigned __int8 *v133;
  uint64_t v134;
  int v135;
  int v136;
  int v137;
  int v138;
  uint64_t v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t **v143;

  v7 = 0;
  v134 = 0;
  v135 = 1;
  v130 = a3;
  while (1)
  {
    v139 = 0;
    *((_DWORD *)a1 + 9) = 0;
    v136 = a3;
    if (a3 < 1)
    {
      v8 = a3;
      v9 = a2;
      if (!a3)
      {
LABEL_227:
        v137 = 0;
        goto LABEL_228;
      }
    }
    else
    {
      v8 = a3;
      v9 = a2;
      while (1)
      {
        v11 = *v9;
        if ((v11 - 9) >= 5 && v11 != 32)
          break;
        ++v9;
        v10 = __OFSUB__(v8--, 1);
        if ((v8 < 0) ^ v10 | (v8 == 0))
          goto LABEL_227;
      }
    }
    v12 = 0;
    v13 = 0;
    v137 = 0;
    v133 = a2;
    v127 = (_DWORD)v9 - (_DWORD)a2;
    v129 = a1;
    do
    {
      v15 = LOBYTE((&off_1E5C74FB8)[2 * v13 + 1]);
      if (v8 >= (int)v15 && !memcmp(v9, (&off_1E5C74FB8)[2 * v13], LOBYTE((&off_1E5C74FB8)[2 * v13 + 1])))
      {
        if (v13 == 3 && v9[4] == 47 && v9[5] - 48 <= 9)
        {
          v16 = v9[v15 + 1];
          if ((v16 - 48) > 9)
          {
            v19 = 0;
            v20 = 0;
          }
          else
          {
            v17 = 0;
            v18 = 0;
            while (1)
            {
              v19 = 10;
              v18 = (v16 - 48) + 10 * v18;
              if (v18 >> 31)
                break;
              v20 = v17 + 1;
              v16 = v9[v15 + 2 + v17++];
              if ((v16 - 48) >= 0xA)
              {
                v19 = v18;
                goto LABEL_37;
              }
            }
            v20 = -1;
          }
LABEL_37:
          LODWORD(v15) = v15 + 1 + v20;
        }
        else
        {
          v19 = 10;
        }
        v21 = v9[(int)v15];
        if (v21 <= 0x29 && ((0x30500003E01uLL >> v21) & 1) != 0)
        {
          v22 = 0xFBFFFFFFFEuLL >> v21;
          if (sqlite3_initialize() || (v23 = sub_1ACB5D828(64)) == 0)
          {
            v5 = 7;
            if ((v22 & 1) != 0)
              goto LABEL_229;
          }
          else
          {
            v5 = 0;
            *(_OWORD *)(v23 + 32) = 0u;
            *(_OWORD *)(v23 + 48) = 0u;
            *(_OWORD *)v23 = 0u;
            *(_OWORD *)(v23 + 16) = 0u;
            *(_DWORD *)v23 = *((unsigned __int8 *)&off_1E5C74FB8 + 16 * v13 + 10);
            *(_DWORD *)(v23 + 4) = v19;
            v139 = v23;
            v137 = v15 + v127;
            v12 = v23;
            if ((v22 & 1) != 0)
              goto LABEL_146;
          }
        }
        if (v21 <= 0x29 && ((1 << v21) & 0x30400000001) != 0)
          goto LABEL_146;
      }
      ++v13;
    }
    while (v13 != 4);
    v24 = *v9;
    if (v24 != 34)
    {
      if (v24 == 40)
      {
        LODWORD(v143) = 0;
        v29 = *((_DWORD *)v129 + 12);
        *((_DWORD *)v129 + 12) = v29 + 1;
        if (v29 <= 999)
        {
          v5 = sub_1ACC5F194(v129, v9 + 1, (v8 - 1), &v139, &v143);
          v137 = v127 + (_DWORD)v143 + 1;
          v12 = v139;
        }
        else
        {
          v5 = 1;
        }
        goto LABEL_146;
      }
      if (v24 != 41)
      {
        v25 = *((unsigned int *)v129 + 7);
        v125 = *((_DWORD *)v129 + 8);
        if ((int)v25 < 1)
        {
          v47 = 0;
        }
        else
        {
          for (i = 0; i != v25; ++i)
          {
            v49 = (const char *)v129[2][i];
            v50 = strlen(v49);
            v51 = v50;
            if (v8 > v50 && v9[v50] == 58)
            {
              if (v50 < 0)
              {
                sub_1ACBBE20C(35843);
LABEL_78:
                v47 = v127 + v51 + 1;
                v125 = i;
                goto LABEL_83;
              }
              if (v49)
              {
                if (!v50)
                  goto LABEL_78;
                v52 = v50 + 1;
                v53 = v9;
                while (1)
                {
                  v54 = *(unsigned __int8 *)v49;
                  if (!*v49)
                    break;
                  LODWORD(v54) = byte_1ACCB6333[v54];
                  v48 = byte_1ACCB6333[*v53];
                  if ((_DWORD)v54 != v48)
                    goto LABEL_67;
                  ++v49;
                  ++v53;
                  if (--v52 <= 1)
                    goto LABEL_78;
                }
                v48 = byte_1ACCB6333[*v53];
LABEL_67:
                if ((_DWORD)v54 == v48)
                  goto LABEL_78;
              }
            }
          }
          v47 = 0;
        }
LABEL_83:
        v56 = &v133[v47];
        v57 = (v136 - v47);
        v58 = *v129;
        v59 = **v129;
        v138 = v47;
        if ((int)v57 < 1)
        {
          v60 = 0;
        }
        else
        {
          v60 = 0;
          while (1)
          {
            v61 = v56[v60];
            v62 = v61 > 0x29;
            v63 = (1 << v61) & 0x30400000000;
            if (!v62 && v63 != 0)
              break;
            if (v57 == ++v60)
            {
              v60 = (v136 - v47);
              break;
            }
          }
        }
        v65 = *((unsigned int *)v129 + 2);
        v143 = 0;
        v5 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, uint64_t, uint64_t ***))(v59 + 24))(v58, &v133[v47], v60, &v143);
        if (v5)
        {
LABEL_94:
          v12 = 0;
LABEL_145:
          v139 = v12;
          v137 = v60 + v138;
          goto LABEL_146;
        }
        *v143 = v58;
        v66 = v143;
        if (*(int *)v59 >= 1)
        {
          v67 = (*(uint64_t (**)(uint64_t **, uint64_t))(v59 + 48))(v143, v65);
          v66 = v143;
          if (v67)
          {
            v5 = v67;
            (*(void (**)(uint64_t **))(v59 + 32))(v143);
            goto LABEL_94;
          }
        }
        v142 = 0;
        v143 = 0;
        v141 = 0;
        v140 = 0;
        v68 = (*(uint64_t (**)(uint64_t **, uint64_t ***, char *, uint64_t *, int *, int *))(v59 + 40))(v66, &v143, (char *)&v142 + 4, &v142, &v141, &v140);
        if (v68)
        {
          v12 = 0;
          if (v68 != 101 || (_DWORD)v60 == 0)
            v5 = v68;
          else
            v5 = 0;
          v70 = v59;
          goto LABEL_144;
        }
        v86 = SHIDWORD(v142);
        if (sqlite3_initialize())
        {
          v12 = 0;
          goto LABEL_142;
        }
        v112 = v86 + 192;
        v113 = (void *)sub_1ACB5D828(v86 + 192);
        v12 = (uint64_t)v113;
        if (v113)
        {
          bzero(v113, v112);
          *(_DWORD *)v12 = 5;
          *(_QWORD *)(v12 + 32) = v12 + 64;
          *(_DWORD *)(v12 + 144) = 1;
          *(_DWORD *)(v12 + 148) = v125;
          v114 = SHIDWORD(v142);
          *(_DWORD *)(v12 + 160) = HIDWORD(v142);
          *(_QWORD *)(v12 + 152) = v12 + 192;
          memcpy((void *)(v12 + 192), v143, v114);
          v115 = v141;
          if (v141 < (int)v57 && v56[v141] == 42)
          {
            *(_DWORD *)(v12 + 164) = 1;
            v141 = v115 + 1;
          }
          v5 = 0;
          v70 = v59;
          if (*((_DWORD *)v129 + 6))
          {
            v116 = v142;
            if ((int)v142 >= 1)
            {
              do
              {
                v117 = v116 - 1;
                if (v56[(v116 - 1)] != 94)
                  break;
                *(_DWORD *)(v12 + 168) = 1;
                LODWORD(v142) = --v116;
              }
              while ((unint64_t)(v117 + 1) > 1);
              v5 = 0;
            }
          }
        }
        else
        {
LABEL_142:
          v5 = 7;
          v70 = v59;
        }
        LODWORD(v60) = v141;
LABEL_144:
        (*(void (**)(uint64_t **))(v70 + 32))(v66);
        goto LABEL_145;
      }
      --*((_DWORD *)v129 + 12);
      v137 = v127 + 1;
LABEL_228:
      v5 = 101;
LABEL_229:
      a3 = v136 - v137;
LABEL_230:
      v96 = v134;
      if (v135)
        v119 = v134 == 0;
      else
        v119 = 1;
      if (!v119 && v5 == 101)
        v121 = 1;
      else
        v121 = v5;
      *a5 = v130 - a3;
      if ((_DWORD)v121 != 101)
        goto LABEL_246;
      v121 = 0;
      goto LABEL_247;
    }
    v27 = v129;
    if (v8 >= 2)
    {
      for (j = 1; j != v8; ++j)
      {
        if (v9[j] == 34)
          goto LABEL_51;
      }
      v137 = v127 + v8 + 1;
      v5 = 1;
      goto LABEL_229;
    }
    LODWORD(j) = 1;
LABEL_51:
    v137 = v127 + j + 1;
    if ((_DWORD)j == v8)
    {
      v5 = 1;
      goto LABEL_229;
    }
    v30 = v9 + 1;
    v31 = (j - 1);
    v32 = *v129;
    v33 = **v129;
    v34 = *((unsigned int *)v129 + 2);
    v143 = 0;
    v35 = (*(uint64_t (**)(uint64_t *, unsigned __int8 *, uint64_t, uint64_t ***))(v33 + 24))(v32, v30, v31, &v143);
    v36 = v143;
    if (v35)
    {
      v5 = v35;
      goto LABEL_54;
    }
    *v143 = v32;
    v45 = v143;
    if (*(int *)v33 >= 1)
    {
      v55 = (*(uint64_t (**)(uint64_t **, uint64_t))(v33 + 48))(v143, v34);
      v45 = v143;
      if (v55)
      {
        v5 = v55;
        (*(void (**)(uint64_t **))(v33 + 32))(v143);
        v36 = 0;
LABEL_54:
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v40 = 0;
        if (v5 == 101)
          goto LABEL_55;
        goto LABEL_109;
      }
    }
    v142 = 0;
    v143 = 0;
    v141 = 0;
    v140 = 0;
    v71 = (*(uint64_t (**)(uint64_t **, uint64_t ***, char *, uint64_t *, int *, int *))(v33 + 40))(v45, &v143, (char *)&v142 + 4, &v142, &v141, &v140);
    if (v71)
    {
      v5 = v71;
      v40 = 0;
      v39 = 0;
      v72 = 0;
      v128 = 0;
LABEL_108:
      (*(void (**)(uint64_t **))(v33 + 32))(v45);
      v36 = 0;
      v38 = v72;
      v37 = v128;
      if (v5 == 101)
      {
LABEL_55:
        v41 = v27;
        v42 = v36;
        v126 = v33;
        if (!sqlite3_initialize())
        {
          v73 = sub_1ACB6BB48(v37, v39 + 40 * v40 + 192);
          if (v73)
          {
            v12 = v73;
            v74 = v39;
            *(_QWORD *)(v73 + 144) = 0;
            *(_OWORD *)(v73 + 112) = 0u;
            *(_OWORD *)(v73 + 128) = 0u;
            *(_OWORD *)(v73 + 80) = 0u;
            *(_OWORD *)(v73 + 96) = 0u;
            *(_OWORD *)(v73 + 32) = 0u;
            *(_OWORD *)(v73 + 48) = 0u;
            *(_OWORD *)v73 = 0u;
            *(_OWORD *)(v73 + 16) = 0u;
            *(_OWORD *)(v73 + 64) = 0u;
            *(_DWORD *)v73 = 5;
            *(_QWORD *)(v73 + 32) = v73 + 64;
            v75 = *((_DWORD *)v41 + 8);
            *(_DWORD *)(v73 + 144) = v40;
            *(_DWORD *)(v73 + 148) = v75;
            v76 = v73 + 64 + 40 * v40;
            v77 = v76 + 88;
            if (v38)
            {
              memcpy((void *)(v76 + 88), v38, v74);
              v78 = (void (**)(const void *))&off_1ECD3B168;
              if (dword_1ECD3B140)
              {
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v38);
                --qword_1ECD3E8D0;
                off_1ECD3B168(v38);
                v38 = (const void *)xmmword_1ECD3E930;
                if (!(_QWORD)xmmword_1ECD3E930)
                  goto LABEL_118;
                v78 = (void (**)(const void *))&xmmword_1ECD3B1D0;
              }
              (*v78)(v38);
            }
LABEL_118:
            v79 = *(_QWORD *)(v12 + 32);
            v80 = *(unsigned int *)(v79 + 80);
            if ((int)v80 >= 1)
            {
              v81 = (int *)(v79 + 96);
              do
              {
                *((_QWORD *)v81 - 1) = v77;
                v77 += *v81;
                v81 += 10;
                --v80;
              }
              while (v80);
            }
            v5 = 0;
            v139 = v12;
            goto LABEL_146;
          }
        }
        if (!v37)
        {
          v46 = 0;
          v44 = &qword_1ECD3DBE0[132];
          v45 = v42;
          goto LABEL_123;
        }
        v43 = (void (**)(uint64_t))&off_1ECD3B168;
        v44 = &qword_1ECD3DBE0[132];
        v45 = v42;
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v37);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v37);
          v37 = xmmword_1ECD3E930;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_63;
          v43 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
        }
        (*v43)(v37);
LABEL_63:
        v46 = 0;
        goto LABEL_123;
      }
LABEL_109:
      v12 = v37;
      v139 = v37;
      goto LABEL_146;
    }
    v123 = v31;
    v124 = v30;
    v126 = v33;
    v40 = 0;
    v101 = 0;
    v128 = 0;
    v38 = 0;
    v39 = 0;
    while (1)
    {
      if (sqlite3_initialize() || (v104 = sub_1ACB6BB48(v128, v101 + 192)) == 0)
      {
        if (!v128)
        {
          v46 = 0;
          v44 = qword_1ECD3DBE0 + 1056;
          goto LABEL_123;
        }
        v118 = (void (**)(void))&off_1ECD3B168;
        v44 = &qword_1ECD3DBE0[132];
        if (dword_1ECD3B140)
        {
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v128);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v128);
          v46 = 0;
          if (!(_QWORD)xmmword_1ECD3E930)
            goto LABEL_123;
LABEL_220:
          v118 = (void (**)(void))&xmmword_1ECD3B1D0;
        }
        else
        {
          v46 = 0;
        }
LABEL_226:
        (*v118)();
        goto LABEL_123;
      }
      v105 = v104;
      v106 = v45;
      v128 = v104;
      v107 = SHIDWORD(v142);
      if (sqlite3_initialize())
        break;
      v108 = sub_1ACB6BB48((uint64_t)v38, v107 + v39);
      if (!v108)
        break;
      v72 = (const void *)v108;
      v109 = v105 + v101;
      *(_QWORD *)(v109 + 184) = 0;
      *(_OWORD *)(v109 + 168) = 0u;
      *(_OWORD *)(v109 + 152) = 0u;
      memcpy((void *)(v108 + v39), v143, SHIDWORD(v142));
      v110 = HIDWORD(v142);
      *(_DWORD *)(v109 + 160) = HIDWORD(v142);
      v111 = v141 < v123 && v124[v141] == 42;
      *(_DWORD *)(v109 + 164) = v111;
      v102 = (int)v142 >= 1 && v124[(v142 - 1)] == 94;
      v45 = v106;
      v39 += v110;
      *(_DWORD *)(v105 + v101 + 168) = v102;
      v142 = 0;
      v143 = 0;
      v141 = 0;
      v140 = 0;
      v103 = (*(uint64_t (**)(uint64_t **, uint64_t ***, char *, uint64_t *, int *, int *))(v126 + 40))(v106, &v143, (char *)&v142 + 4, &v142, &v141, &v140);
      v101 += 40;
      ++v40;
      v38 = v72;
      if (v103)
      {
        v5 = v103;
        v33 = v126;
        v27 = v129;
        goto LABEL_108;
      }
    }
    if (!v38)
    {
      v44 = qword_1ECD3DBE0 + 1056;
      v45 = v106;
      v46 = v128;
      goto LABEL_123;
    }
    v118 = (void (**)(void))&off_1ECD3B168;
    v44 = &qword_1ECD3DBE0[132];
    if (!dword_1ECD3B140)
    {
      v38 = 0;
      v45 = v106;
      v46 = v128;
      goto LABEL_226;
    }
    v46 = v128;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v38);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v38);
    v38 = 0;
    v45 = v106;
    if ((_QWORD)xmmword_1ECD3E930)
      goto LABEL_220;
LABEL_123:
    if (v45)
      (*(void (**)(uint64_t **))(v126 + 32))(v45);
    if (v38)
    {
      v82 = (void (**)(const void *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_131;
      v83 = v44[294];
      if (v83)
        xmmword_1ECD3B1C0(v83);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v38);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v38);
      v38 = (const void *)v44[294];
      if (v38)
      {
        v82 = (void (**)(const void *))&xmmword_1ECD3B1D0;
LABEL_131:
        (*v82)(v38);
      }
    }
    if (v46)
    {
      v84 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_138;
      v85 = v44[294];
      if (v85)
        xmmword_1ECD3B1C0(v85);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v46);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v46);
      v46 = v44[294];
      if (v46)
      {
        v84 = &xmmword_1ECD3B1D0;
LABEL_138:
        (*v84)(v46);
      }
    }
    v12 = 0;
    v5 = 7;
    v139 = 0;
LABEL_146:
    if (!v5)
      break;
    v12 = v7;
    v92 = v136;
    a1 = v129;
    v87 = v133;
LABEL_185:
    a3 = v92 - v137;
    a2 = &v87[v137];
    v7 = v12;
    if (v5)
      goto LABEL_230;
  }
  v87 = v133;
  if (!v12)
  {
    v12 = v7;
    v92 = v136;
    a1 = v129;
    goto LABEL_185;
  }
  v88 = *(_DWORD *)v12;
  a1 = v129;
  if (*(_DWORD *)v12 == 5)
  {
    v89 = 0;
    v90 = v135 != 0;
    v91 = 1;
    goto LABEL_154;
  }
  v93 = *(_QWORD *)(v12 + 16);
  v91 = v93 != 0;
  v89 = v93 == 0;
  v90 = v135 != 0;
  if (!v93 && v135)
  {
    v121 = 1;
    goto LABEL_244;
  }
LABEL_154:
  if (v89 || v90)
  {
    if (v7)
    {
      v94 = v7;
      v96 = v134;
      goto LABEL_166;
    }
    v94 = 0;
    v96 = v134;
    v87 = v133;
    if (v91)
    {
LABEL_176:
      v99 = v12;
      v92 = v136;
      if (v96)
      {
        *(_QWORD *)(v94 + 24) = v12;
        *(_QWORD *)(v12 + 8) = v94;
        v99 = v96;
      }
    }
    else
    {
LABEL_179:
      while (1)
      {
        v100 = v94;
        v94 = *(_QWORD *)(v94 + 8);
        if (!v94)
          break;
        if (*(_DWORD *)v94 > *(_DWORD *)v12)
        {
          *(_QWORD *)(v94 + 24) = v12;
          *(_QWORD *)(v12 + 8) = v94;
          goto LABEL_183;
        }
      }
      v96 = v12;
LABEL_183:
      *(_QWORD *)(v12 + 16) = v100;
      *(_QWORD *)(v100 + 8) = v12;
      v99 = v96;
      v92 = v136;
      v87 = v133;
    }
    v5 = 0;
    v134 = v99;
    v135 = v89;
    goto LABEL_185;
  }
  if (sqlite3_initialize() || (v94 = sub_1ACB5D828(64)) == 0)
  {
    v121 = 7;
LABEL_244:
    v96 = v134;
    goto LABEL_245;
  }
  *(_OWORD *)(v94 + 32) = 0u;
  *(_OWORD *)(v94 + 48) = 0u;
  *(_OWORD *)v94 = 0u;
  *(_OWORD *)(v94 + 16) = 0u;
  *(_DWORD *)v94 = 3;
  while (1)
  {
    v95 = v7;
    v7 = *(_QWORD *)(v7 + 8);
    if (!v7)
      break;
    if (*(int *)v7 >= 4)
    {
      *(_QWORD *)(v7 + 24) = v94;
      *(_QWORD *)(v94 + 8) = v7;
      v96 = v134;
      goto LABEL_165;
    }
  }
  v96 = v94;
LABEL_165:
  *(_QWORD *)(v94 + 16) = v95;
  *(_QWORD *)(v95 + 8) = v94;
LABEL_166:
  v97 = v88 != 1 || v91;
  if ((v97 & 1) != 0 || *(_DWORD *)v94 == 5)
  {
    v98 = !v91;
    if (v88 == 5)
      v98 = 1;
    if ((v98 & 1) != 0 || *(_DWORD *)v94 != 1)
    {
      v87 = v133;
      if (!v91)
        goto LABEL_179;
      goto LABEL_176;
    }
  }
  v121 = 1;
LABEL_245:
  sub_1ACC5E800(v12);
LABEL_246:
  sub_1ACC5E800(v96);
  v96 = 0;
LABEL_247:
  *a4 = v96;
  return v121;
}

uint64_t sub_1ACC600FC(uint64_t result, uint64_t a2, _DWORD *a3, int *a4, _DWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  int v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t i;
  int v24;
  int *v25;
  uint64_t v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;

  if (a2)
  {
    v8 = a2;
    v9 = result;
    while (!*a5)
    {
      if (*(_DWORD *)v8 == 5)
      {
        v11 = *(_QWORD *)(v8 + 32);
        v12 = *(unsigned int *)(v11 + 80);
        *a3 += v12;
        v32 = v12;
        if ((int)v12 < 1)
        {
LABEL_32:
          *(_DWORD *)(v11 + 60) = -1;
        }
        else
        {
          v13 = 0;
          while (1)
          {
            v14 = *(_QWORD *)(v8 + 32) + 40 * v13;
            v15 = *(char **)(v14 + 88);
            v16 = *(unsigned int *)(v14 + 96);
            v17 = *(_DWORD *)(v14 + 100);
            v18 = (uint64_t *)(v14 + 120);
            if (sqlite3_initialize())
              break;
            v19 = sub_1ACB5D828(88);
            if (!v19)
              goto LABEL_29;
            v20 = *(_QWORD *)v9;
            if (v17 && (v21 = *(int *)(v20 + 488), (int)v21 >= 2))
            {
              v22 = (int *)(*(_QWORD *)(v20 + 496) + 40);
              for (i = 1; i != v21; ++i)
              {
                v24 = *v22;
                v22 += 10;
                if (v24 == (_DWORD)v16)
                {
                  v29 = *(_DWORD *)(v9 + 32);
                  *(_QWORD *)(v19 + 80) = 0;
                  *(_OWORD *)(v19 + 48) = 0u;
                  *(_OWORD *)(v19 + 64) = 0u;
                  *(_OWORD *)(v19 + 16) = 0u;
                  *(_OWORD *)(v19 + 32) = 0u;
                  *(_OWORD *)v19 = 0u;
                  result = sub_1ACC51FD0(v20, v29, i, 0xFFFFFFFE, v15, v16, 0, 0, v19);
                  *(_DWORD *)(v19 + 52) = 1;
                  goto LABEL_22;
                }
              }
              v25 = (int *)(*(_QWORD *)(v20 + 496) + 40);
              v26 = 1;
              while (1)
              {
                v27 = *v25;
                v25 += 10;
                if (v27 == (_DWORD)v16 + 1)
                  break;
                if (v21 == ++v26)
                  goto LABEL_21;
              }
              v30 = *(_DWORD *)(v9 + 32);
              *(_QWORD *)(v19 + 80) = 0;
              *(_OWORD *)(v19 + 48) = 0u;
              *(_OWORD *)(v19 + 64) = 0u;
              *(_OWORD *)(v19 + 16) = 0u;
              *(_OWORD *)(v19 + 32) = 0u;
              *(_OWORD *)v19 = 0u;
              v31 = v20;
              result = sub_1ACC51FD0(v20, v30, v26, 0xFFFFFFFE, v15, v16, 1, 0, v19);
              if ((_DWORD)result)
                goto LABEL_30;
              result = sub_1ACC51FD0(v31, *(_DWORD *)(v9 + 32), 0, 0xFFFFFFFE, v15, v16, 0, 0, v19);
            }
            else
            {
LABEL_21:
              v28 = *(_DWORD *)(v9 + 32);
              *(_QWORD *)(v19 + 80) = 0;
              *(_OWORD *)(v19 + 48) = 0u;
              *(_OWORD *)(v19 + 64) = 0u;
              *(_OWORD *)(v19 + 16) = 0u;
              *(_OWORD *)(v19 + 32) = 0u;
              *(_OWORD *)v19 = 0u;
              result = sub_1ACC51FD0(v20, v28, 0, 0xFFFFFFFE, v15, v16, v17, 0, v19);
              *(_DWORD *)(v19 + 52) = v17 == 0;
            }
LABEL_22:
            *v18 = v19;
            if ((_DWORD)result)
              goto LABEL_31;
            if (++v13 == v32)
            {
              v11 = *(_QWORD *)(v8 + 32);
              goto LABEL_32;
            }
          }
          v19 = 0;
LABEL_29:
          result = 7;
LABEL_30:
          *v18 = v19;
LABEL_31:
          *a5 = result;
        }
        return result;
      }
      v10 = *a4;
      if (*(_DWORD *)v8 == 4)
        ++v10;
      *a4 = v10;
      result = sub_1ACC600FC(v9, *(_QWORD *)(v8 + 16), a3, a4, a5);
      v8 = *(_QWORD *)(v8 + 24);
      if (!v8)
        return result;
    }
  }
  return result;
}

sqlite3_blob *sub_1ACC60380(sqlite3_blob *result, uint64_t a2, int *a3, uint64_t *a4, _QWORD **a5, int *a6)
{
  sqlite3_blob *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  sqlite3_int64 v24;
  uint64_t v25;
  int v26;
  int v27;
  const char *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  sqlite3_blob **ppBlob;

  if (*a6)
    return result;
  v11 = result;
  while (1)
  {
    v12 = *a3;
    if (*a3 != 4)
      break;
    a2 = *((_QWORD *)a3 + 2);
    *(*a5)++ = a2;
LABEL_10:
    result = (sqlite3_blob *)sub_1ACC60380(v11, a2, *((_QWORD *)a3 + 2), a4, a5, a6);
    if (*a3 == 4)
    {
      a2 = *((_QWORD *)a3 + 3);
      *(*a5)++ = a2;
    }
    a3 = (int *)*((_QWORD *)a3 + 3);
    if (*a6)
      return result;
  }
  if (v12 == 2)
    return result;
  if (v12 != 5)
    goto LABEL_10;
  v13 = *((_QWORD *)a3 + 4);
  if (*(int *)(v13 + 80) < 1)
    return result;
  v14 = 0;
  v31 = *((_QWORD *)a3 + 4);
  while (1)
  {
    v15 = *a4;
    *a4 += 40;
    *(_QWORD *)v15 = v13;
    *(_DWORD *)(v15 + 8) = v14;
    v16 = v13 + 40 * v14;
    *(_QWORD *)(v15 + 16) = v16 + 88;
    *(_QWORD *)(v15 + 24) = a2;
    *(_DWORD *)(v15 + 36) = *(_DWORD *)(v13 + 84);
    v17 = *(_QWORD *)(v16 + 120);
    v18 = *(_DWORD *)(v17 + 8);
    if (v18 >= 1)
      break;
    v19 = 0;
LABEL_17:
    *(_DWORD *)(v15 + 32) = v19;
    *a6 = 0;
    if (++v14 >= *(int *)(v13 + 80))
      return result;
  }
  v19 = 0;
  v20 = 0;
  v21 = *(_QWORD *)v11;
  v22 = *(_DWORD *)(*(_QWORD *)v11 + 468);
  v34 = v15;
  ppBlob = (sqlite3_blob **)(*(_QWORD *)v11 + 480);
  v32 = v17;
  v33 = v14;
  while (1)
  {
    v23 = *(_QWORD *)(*(_QWORD *)v17 + 8 * v20);
    if (!*(_QWORD *)(v23 + 64) && !*(_BYTE *)(v23 + 5))
    {
      v24 = *(_QWORD *)(v23 + 8);
      if (v24 <= *(_QWORD *)(v23 + 16))
        break;
    }
LABEL_19:
    if (++v20 >= v18)
      goto LABEL_17;
  }
  result = *ppBlob;
  while (2)
  {
    if (result)
    {
      result = (sqlite3_blob *)sqlite3_blob_reopen(result, v24);
      if ((_DWORD)result)
        break;
      goto LABEL_35;
    }
    v29 = *(const char **)(v21 + 472);
    if (!v29)
    {
      result = (sqlite3_blob *)sqlite3_mprintf("%s_segments", *(const char **)(v21 + 40));
      v29 = (const char *)result;
      *(_QWORD *)(v21 + 472) = result;
      if (!result)
      {
        v30 = 7;
        goto LABEL_41;
      }
    }
    result = (sqlite3_blob *)sqlite3_blob_open(*(sqlite3 **)(v21 + 24), *(const char **)(v21 + 32), v29, "block", v24, 0, ppBlob);
    if (!(_DWORD)result)
    {
LABEL_35:
      result = *ppBlob;
      if (*ppBlob)
      {
        v25 = *((_QWORD *)result + 3);
        if (v25)
          LODWORD(v25) = *(_DWORD *)result;
      }
      else
      {
        LODWORD(v25) = 0;
      }
      v26 = v25 + 35;
      v27 = ((int)v25 + 34) / v22 + v19;
      if (v26 > v22)
        v19 = v27;
      if (v24++ >= *(_QWORD *)(v23 + 16))
      {
        v13 = v31;
        v17 = v32;
        v18 = *(_DWORD *)(v32 + 8);
        v14 = v33;
        v15 = v34;
        goto LABEL_19;
      }
      continue;
    }
    break;
  }
  if ((_DWORD)result == 1)
    v30 = 267;
  else
    v30 = (int)result;
LABEL_41:
  *(_DWORD *)(v34 + 32) = v19;
  *a6 = v30;
  return result;
}

uint64_t sub_1ACC60618(uint64_t a1, char **a2, char ***a3, unsigned int a4)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  char ***v8;
  int v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  int v17;
  char ***v18;
  uint64_t v19;
  char ***v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void (**v28)(uint64_t);
  char *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  char *v33;
  int v34;
  char *v35;
  int v36;
  int v37;
  unsigned int v38;
  int v39;
  int v40;
  sqlite3_stmt *v42;
  _BYTE *v43;
  _BYTE *v44;
  int v45;
  unint64_t v46;
  int v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  int v54;
  char ***v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  sqlite3_stmt *v60;

  v4 = *(_QWORD *)a1;
  if (*(_QWORD *)(*(_QWORD *)a1 + 80))
    v5 = 1;
  else
    v5 = (int)a4 < 1;
  if (v5)
    return 0;
  v8 = a3;
  v10 = 0;
  v11 = 0;
  v12 = a4;
  v13 = a3 + 4;
  v14 = a4;
  do
  {
    if (*((char ***)v13 - 1) == a2)
    {
      v11 += *v13;
      ++v10;
    }
    v13 += 10;
    --v14;
  }
  while (v14);
  v6 = 0;
  if (v11 && v10 >= 2)
  {
    v15 = *(_DWORD *)(a1 + 84);
    v56 = a4;
    if (v15)
    {
LABEL_14:
      v57 = 0;
      v16 = 0;
      v54 = v15;
      v17 = 1;
      v55 = v8;
      while (1)
      {
        v18 = 0;
        v19 = v12;
        v20 = v8;
        do
        {
          if (v20[2] && v20[3] == a2 && (!v18 || *((_DWORD *)v20 + 8) < *((_DWORD *)v18 + 8)))
            v18 = v20;
          v20 += 5;
          --v19;
        }
        while (v19);
        if (!v16)
        {
          v17 *= 4;
LABEL_31:
          v21 = (uint64_t)v18[2];
          LODWORD(v59) = 0;
          v60 = 0;
          v22 = sub_1ACC60B4C(v4, v21, *((_DWORD *)v18 + 9), &v59, (char **)&v60);
          if ((_DWORD)v22
            || (v22 = sub_1ACC611A0(v4, (uint64_t)*v18, *((_DWORD *)v18 + 2), (char *)v60, v59), (_DWORD)v22))
          {
            v6 = v22;
          }
          else
          {
            v29 = **v18;
            if (v29 && (v30 = *((int *)*v18 + 2), (int)v30 >= 1))
            {
              v31 = 0;
              v32 = (unint64_t)&v29[v30];
              do
              {
                do
                {
                  v33 = v29;
                  v34 = *v29++;
                }
                while (v34 < 0);
                v37 = *v29;
                v35 = v29 - 1;
                v36 = v37;
                if (v37)
                {
                  do
                  {
                    v38 = v36 & 0xFFFFFF80;
                    v39 = v33[2];
                    ++v33;
                    v36 = v39;
                  }
                  while (v38 | v39);
                }
                else
                {
                  v33 = v35;
                }
                ++v31;
                v29 = v33 + 2;
              }
              while ((unint64_t)(v33 + 2) < v32);
            }
            else
            {
              v31 = 0;
            }
            v6 = 0;
            v40 = v57;
            if (v31 < v57 || v16 == 0)
              v40 = v31;
            v57 = v40;
          }
          goto LABEL_46;
        }
        if (*((_DWORD *)v18 + 8) < (v57 + v17 / 4 - 1) / (v17 / 4) * v15)
        {
          v6 = 0;
          if (v16 < 0xC)
            v17 *= 4;
          if (*((int *)*v18 + 20) < 2 || v16 == v10 - 1)
            goto LABEL_46;
          goto LABEL_31;
        }
        v23 = v4;
        v24 = v18[2];
        v25 = *((_DWORD *)v18 + 9);
        if (sqlite3_initialize() || (v26 = sub_1ACB5D828(32)) == 0)
        {
          v6 = 7;
        }
        else
        {
          v6 = 0;
          *(_OWORD *)v26 = 0u;
          *(_OWORD *)(v26 + 16) = 0u;
          *(_QWORD *)v26 = v24;
          *(_QWORD *)(v26 + 16) = *(_QWORD *)(a1 + 40);
          *(_DWORD *)(v26 + 8) = v25;
          *(_QWORD *)(a1 + 40) = v26;
          v24[3] = (char *)v26;
        }
        v27 = (uint64_t)v24[4];
        sub_1ACC51C60(v27);
        if (v27)
        {
          v28 = (void (**)(uint64_t))&off_1ECD3B168;
          if (dword_1ECD3B140)
          {
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v27);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v27);
            v27 = xmmword_1ECD3E930;
            if (!(_QWORD)xmmword_1ECD3E930)
              goto LABEL_45;
            v28 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
          }
          (*v28)(v27);
        }
LABEL_45:
        v24[4] = 0;
        v4 = v23;
        v8 = v55;
        v12 = v56;
        v15 = v54;
LABEL_46:
        v18[2] = 0;
        if ((int)++v16 >= v10 || (_DWORD)v6)
          return v6;
      }
    }
    v59 = 0;
    v60 = 0;
    v58 = 0;
    v6 = sub_1ACC61758((uint64_t *)v4, &v60);
    if (!(_DWORD)v6)
    {
      v42 = v60;
      v43 = sqlite3_column_blob(v60, 0);
      if (!v43)
        goto LABEL_75;
      v44 = v43;
      v45 = sqlite3_column_bytes(v42, 0);
      v46 = (unint64_t)&v44[v45];
      v47 = sub_1ACC61838(v44, v46, &v59);
      if (v47 >= v45)
        goto LABEL_75;
      v48 = &v44[v47];
      do
        v48 += (int)sub_1ACC61838(v48, v46, &v58);
      while ((unint64_t)v48 < v46);
      v49 = v58;
      v50 = v59;
      if (!v59 || v58 == 0)
      {
LABEL_75:
        sqlite3_reset(v42);
        return 267;
      }
      else
      {
        *(_QWORD *)(a1 + 88) = v59;
        *(_DWORD *)(a1 + 84) = (v49 / v50 + *(int *)(v4 + 468)) / *(int *)(v4 + 468);
        v52 = sqlite3_reset(v42);
        v6 = v52;
        v12 = v56;
        if (!(_DWORD)v52)
        {
          v15 = *(_DWORD *)(a1 + 84);
          goto LABEL_14;
        }
      }
    }
  }
  return v6;
}

uint64_t sub_1ACC60A68(uint64_t result, uint64_t a2, _DWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;

  if (a2 && !*a3)
  {
    v5 = result;
    if (*(_DWORD *)a2 == 5)
    {
      v6 = *(_QWORD *)(a2 + 32);
      v7 = *(unsigned int *)(v6 + 80);
      if ((_DWORD)v7)
      {
        if ((int)v7 < 1)
        {
          LODWORD(v8) = 0;
        }
        else
        {
          v8 = 0;
          v9 = (_QWORD *)(v6 + 112);
          while (*v9)
          {
            ++v8;
            v9 += 5;
            if (v7 == v8)
            {
              LODWORD(v8) = *(_DWORD *)(v6 + 80);
              break;
            }
          }
        }
        *(_BYTE *)(a2 + 50) = (_DWORD)v8 == (_DWORD)v7;
      }
      result = sub_1ACC62A3C(result, 1, v6);
      *a3 = result;
    }
    else
    {
      sub_1ACC60A68(result, *(_QWORD *)(a2 + 16), a3);
      result = sub_1ACC60A68(v5, *(_QWORD *)(a2 + 24), a3);
      v10 = *(_BYTE *)(*(_QWORD *)(a2 + 16) + 50);
      if (v10)
        v10 = *(_BYTE *)(*(_QWORD *)(a2 + 24) + 50) != 0;
      *(_BYTE *)(a2 + 50) = v10;
    }
  }
  return result;
}

uint64_t sub_1ACC60B4C(uint64_t a1, uint64_t a2, int a3, _DWORD *a4, char **a5)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  _BOOL4 v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  BOOL v23;
  void (**v24)(char *);
  uint64_t v25;
  uint64_t (**v26)(uint64_t);
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  void (**v32)(char *);
  uint64_t v33;
  char *v34;
  _DWORD *v35;
  char **v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (**v40)(uint64_t);
  void (**v41)(char *);
  void (**v42)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t (**v46)(uint64_t);
  void (**v47)(char *);
  uint64_t v48;
  _DWORD *v49;
  uint64_t v51;
  const void *v52;
  int v53;
  int v54;
  uint64_t v55;
  _OWORD v56[7];
  __int128 v57;
  _OWORD v58[4];
  char *v59;
  _DWORD v60[5];

  v6 = a2;
  v55 = 0;
  v8 = *(_QWORD *)(a2 + 32);
  memset(v56, 0, 32);
  v9 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)(a2 + 12))
    v10 = 11;
  else
    v10 = 3;
  v11 = v10 | (32 * (*(_DWORD *)(a2 + 16) != 0));
  v12 = *(_DWORD *)(a1 + 48) > a3;
  memset(&v56[2], 0, 80);
  v57 = 0uLL;
  memset(v58, 0, sizeof(v58));
  v54 = a3;
  LODWORD(v55) = v11 | (4 * v12);
  v52 = *(const void **)a2;
  v13 = v52;
  v53 = v9;
  *(_QWORD *)(v8 + 16) = &v52;
  v14 = sub_1ACC53478(a1, (uint64_t *)v8, v13, v9);
  if ((_DWORD)v14)
    goto LABEL_77;
  v48 = v6;
  v49 = a4;
  v51 = v8;
LABEL_6:
  while (1)
  {
    v15 = sub_1ACC53D44(a1, v8);
    if ((_DWORD)v15 != 100)
      break;
    v16 = *(char **)(v8 + 72);
    v17 = *(_DWORD *)(v8 + 80);
    v18 = *(char **)&v56[0];
    if (*(_QWORD *)&v56[0])
    {
      v19 = 0;
      v20 = v16;
      while (1)
      {
        v59 = 0;
        v60[0] = 0;
        v21 = sub_1ACC61960(*(unsigned __int8 *)(a1 + 463), v20, v17, v18, *((_DWORD *)v58 + v19), &v59, v60);
        v23 = v20 == v16 || v20 == 0;
        if ((_DWORD)v21)
        {
          v14 = v21;
          v8 = v51;
          if (!v23)
          {
            v32 = (void (**)(char *))&off_1ECD3B168;
            if (!dword_1ECD3B140)
              goto LABEL_44;
            if ((_QWORD)xmmword_1ECD3E930)
              xmmword_1ECD3B1C0(xmmword_1ECD3E930);
            qword_1ECD3E888[0] -= (int)off_1ECD3B178(v20);
            --qword_1ECD3E8D0;
            off_1ECD3B168(v20);
            v20 = (char *)xmmword_1ECD3E930;
            if ((_QWORD)xmmword_1ECD3E930)
            {
              v32 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_44:
              (*v32)(v20);
            }
          }
LABEL_76:
          v6 = v48;
          goto LABEL_77;
        }
        if (!v23)
        {
          v24 = (void (**)(char *))&off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_22;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v20);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v20);
          v20 = (char *)xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
            break;
        }
LABEL_23:
        v25 = *((_QWORD *)v56 + v19);
        if (!v25)
          goto LABEL_30;
        v26 = &off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_29;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v25);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v25);
        v25 = xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v26 = &xmmword_1ECD3B1D0;
LABEL_29:
          (*v26)(v25);
        }
LABEL_30:
        *((_QWORD *)v56 + v19) = 0;
        v20 = v59;
        v17 = v60[0];
        if (v19 == 15)
        {
          *((_QWORD *)&v57 + 1) = v59;
          v28 = (char *)&v56[3] + 12;
LABEL_37:
          *((_DWORD *)v28 + 32) = v17;
          v8 = v51;
          goto LABEL_6;
        }
        v27 = v19 + 1;
        v18 = (char *)*((_QWORD *)v56 + ++v19);
        if (!v18)
        {
          *((_QWORD *)v56 + v27) = v59;
          v28 = (char *)v56 + 4 * v27;
          goto LABEL_37;
        }
      }
      v24 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_22:
      (*v24)(v20);
      goto LABEL_23;
    }
    if (sqlite3_initialize())
    {
      *(_QWORD *)&v56[0] = 0;
      v14 = 7;
      goto LABEL_76;
    }
    v29 = (char *)sub_1ACB5D828(v17 + 11);
    *(_QWORD *)&v56[0] = v29;
    LODWORD(v58[0]) = v17;
    if (!v29)
    {
      v14 = 7;
      v6 = v48;
      v8 = v51;
      goto LABEL_77;
    }
    v30 = v29;
    memcpy(v29, v16, v17);
    v31 = &v30[v17];
    *(_QWORD *)v31 = 0;
    *((_WORD *)v31 + 4) = 0;
    v8 = v51;
  }
  v14 = v15;
  if ((_DWORD)v15)
    goto LABEL_76;
  v33 = 0;
  v34 = 0;
  v35 = v49;
  v36 = a5;
  do
  {
    v37 = (char *)*((_QWORD *)v56 + v33);
    if (!v37)
      goto LABEL_48;
    if (!v34)
    {
      LODWORD(v14) = *((_DWORD *)v58 + v33);
      *((_QWORD *)v56 + v33) = 0;
      v34 = v37;
      goto LABEL_48;
    }
    v60[0] = 0;
    v59 = 0;
    v38 = sub_1ACC61960(*(unsigned __int8 *)(a1 + 463), v37, *((_DWORD *)v58 + v33), v34, v14, &v59, v60);
    if ((_DWORD)v38)
    {
      v14 = v38;
      v47 = (void (**)(char *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        v6 = v48;
        v8 = v51;
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v34);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v34);
        v34 = (char *)xmmword_1ECD3E930;
        if ((_QWORD)xmmword_1ECD3E930)
        {
          v47 = (void (**)(char *))&xmmword_1ECD3B1D0;
          goto LABEL_93;
        }
      }
      else
      {
        v6 = v48;
        v8 = v51;
LABEL_93:
        (*v47)(v34);
      }
LABEL_77:
      v44 = 0;
      while (2)
      {
        v45 = *(_QWORD *)((char *)v56 + v44);
        if (v45)
        {
          v46 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_78;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v45);
          --qword_1ECD3E8D0;
          off_1ECD3B168(v45);
          v45 = xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v46 = &xmmword_1ECD3B1D0;
LABEL_78:
            (*v46)(v45);
          }
        }
        v44 += 8;
        if (v44 == 128)
          goto LABEL_67;
        continue;
      }
    }
    v39 = *((_QWORD *)v56 + v33);
    if (v39)
    {
      v40 = &off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_58;
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v39);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v39);
      v39 = xmmword_1ECD3E930;
      if ((_QWORD)xmmword_1ECD3E930)
      {
        v40 = &xmmword_1ECD3B1D0;
LABEL_58:
        (*v40)(v39);
      }
    }
    v41 = (void (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v34);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v34);
      v34 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
        goto LABEL_65;
      v41 = (void (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v41)(v34);
LABEL_65:
    *((_QWORD *)v56 + v33) = 0;
    v34 = v59;
    LODWORD(v14) = v60[0];
    v35 = v49;
    v36 = a5;
LABEL_48:
    ++v33;
  }
  while (v33 != 16);
  *v36 = v34;
  *v35 = v14;
  v14 = 0;
  v6 = v48;
  v8 = v51;
LABEL_67:
  sub_1ACC51C60(v8);
  if (v8)
  {
    v42 = (void (**)(uint64_t))&off_1ECD3B168;
    if (!dword_1ECD3B140)
      goto LABEL_73;
    if ((_QWORD)xmmword_1ECD3E930)
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v8);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v8);
    v8 = xmmword_1ECD3E930;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v42 = (void (**)(uint64_t))&xmmword_1ECD3B1D0;
LABEL_73:
      (*v42)(v8);
    }
  }
  *(_QWORD *)(v6 + 32) = 0;
  return v14;
}

uint64_t sub_1ACC611A0(uint64_t a1, uint64_t a2, int a3, char *a4, int a5)
{
  char *v7;
  int v8;
  char *v9;
  int v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  void (**v17)(char *);
  char *v18;
  uint64_t (**v19)(char *);
  uint64_t (**v20)(char *);
  unsigned __int8 *v21;
  uint64_t v22;
  int v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  int v32;
  int v33;
  uint64_t v34;
  _BYTE *v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  _BYTE *v40;
  char v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  int v47;
  unsigned int v48;
  int v49;
  int v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (**v54)(char *);
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  char *v64;
  char *v65;
  uint64_t v66;

  if (!a4)
  {
    v18 = *(char **)a2;
    if (*(_QWORD *)a2)
    {
      v19 = (uint64_t (**)(char *))&off_1ECD3B168;
      if (dword_1ECD3B140)
      {
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v18);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v18);
        v18 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_30;
        v19 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
      }
      (*v19)(v18);
    }
LABEL_30:
    v16 = 0;
    *(_QWORD *)a2 = 0;
    *(_DWORD *)(a2 + 8) = 0;
    goto LABEL_107;
  }
  v7 = a4;
  v8 = *(_DWORD *)(a2 + 60);
  if (v8 < 0)
  {
    v16 = 0;
    *(_QWORD *)a2 = a4;
    *(_DWORD *)(a2 + 8) = a5;
    goto LABEL_107;
  }
  if (*(_QWORD *)a2)
  {
    if (v8 < a3)
      v9 = a4;
    else
      v9 = *(char **)a2;
    if (v8 < a3)
      v10 = a5;
    else
      v10 = *(_DWORD *)(a2 + 8);
    if (v8 < a3)
      v11 = *(char **)a2;
    else
      v11 = a4;
    if (v8 < a3)
      v12 = *(_DWORD *)(a2 + 8);
    else
      v12 = a5;
    if (v8 < a3)
      v13 = a3 - v8;
    else
      v13 = v8 - a3;
    v60 = v13;
    v14 = *(unsigned __int8 *)(a1 + 463);
    v15 = v9;
    if (v14)
    {
      if (sqlite3_initialize() || (v15 = (_BYTE *)sub_1ACB5D828(v10 + 10)) == 0)
      {
        v16 = 7;
        v17 = (void (**)(char *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_105;
        goto LABEL_101;
      }
    }
    v61 = v10;
    v63 = v15;
    v57 = v15;
    v58 = v9;
    if (v12 < 1)
    {
      v21 = 0;
      v22 = 0;
    }
    else
    {
      v66 = 0;
      v21 = (unsigned __int8 *)&v11[(int)sub_1ACC53378(v11, (unint64_t *)&v66)];
      v22 = v66;
    }
    v65 = (char *)v21;
    v9 = v57;
    v23 = (int)v57;
    if (v10 >= 1)
    {
      v66 = 0;
      v24 = (unsigned __int8 *)&v58[(int)sub_1ACC53378(v58, (unint64_t *)&v66)];
      v25 = v66;
      v64 = (char *)v24;
      v23 = (int)v57;
      if (v21)
      {
        v26 = 0;
        v27 = v11;
        v28 = 0;
        v62 = (unint64_t)&v58[v61];
        v56 = v27;
        v59 = (unint64_t)&v27[v12];
        while (1)
        {
          if (v22 == v25)
            v29 = 0;
          else
            v29 = -1;
          if (v22 > v25)
            v29 = 1;
          if (v14)
            v29 = -v29;
          if (v29)
          {
            if (v29 < 0)
            {
              v47 = (char)*v21;
              if (*v21)
              {
                do
                {
                  v48 = v47 & 0xFFFFFF80;
                  v49 = (char)*++v21;
                  v47 = v49;
                }
                while (v48 | v49);
              }
              v65 = (char *)(v21 + 1);
              if ((unint64_t)(v21 + 1) >= v59)
                goto LABEL_90;
              v66 = 0;
              v50 = sub_1ACC53378((char *)v21 + 1, (unint64_t *)&v66);
              v21 = (unsigned __int8 *)&v65[v50];
              v65 = (char *)v21;
              v51 = v66;
              if (v14)
                v51 = -v66;
              v22 += v51;
              v24 = (unsigned __int8 *)v64;
            }
            else
            {
              v30 = (char)*v24;
              if (*v24)
              {
                do
                {
                  v31 = v30 & 0xFFFFFF80;
                  v32 = (char)*++v24;
                  v30 = v32;
                }
                while (v31 | v32);
              }
              v64 = (char *)(v24 + 1);
              if ((unint64_t)(v24 + 1) >= v62)
                goto LABEL_90;
              v66 = 0;
              v33 = sub_1ACC53378((char *)v24 + 1, (unint64_t *)&v66);
              v21 = (unsigned __int8 *)v65;
              v24 = (unsigned __int8 *)&v64[v33];
              v64 = (char *)v24;
              v34 = v66;
              if (v14)
                v34 = -v66;
              v25 += v34;
            }
          }
          else
          {
            v35 = v63;
            if (v14)
              v36 = (_DWORD)v26 == 0;
            else
              v36 = 1;
            if (v36)
              v37 = v28;
            else
              v37 = v22;
            if (v36)
              v38 = v22;
            else
              v38 = v28;
            v39 = v38 - v37;
            v40 = v63;
            do
            {
              v41 = v39;
              *v40++ = v39 | 0x80;
              v42 = v39 > 0x7F;
              v39 >>= 7;
            }
            while (v42);
            *(v40 - 1) = v41 & 0x7F;
            v63 = v40;
            v43 = 1;
            v44 = v22;
            if (!sub_1ACC62408(&v63, v60, 0, 1, (unsigned __int8 **)&v65, (unsigned __int8 **)&v64))
            {
              v63 = v35;
              v44 = v28;
              v43 = v26;
            }
            v45 = v65;
            if ((unint64_t)v65 >= v59)
            {
              v21 = 0;
            }
            else
            {
              v66 = 0;
              v21 = (unsigned __int8 *)&v45[(int)sub_1ACC53378(v65, (unint64_t *)&v66)];
              v46 = v66;
              if (v14)
                v46 = -v66;
              v22 += v46;
            }
            v65 = (char *)v21;
            v52 = v64;
            if ((unint64_t)v64 >= v62)
            {
LABEL_90:
              v23 = (int)v63;
              v11 = v56;
              v9 = v57;
              break;
            }
            v66 = 0;
            v24 = (unsigned __int8 *)&v52[(int)sub_1ACC53378(v64, (unint64_t *)&v66)];
            v64 = (char *)v24;
            v53 = v66;
            if (v14)
              v53 = -v66;
            v25 += v53;
            v28 = v44;
            v26 = v43;
          }
          if (!v21 || !v24)
            goto LABEL_90;
        }
      }
    }
    v10 = v23 - (_DWORD)v9;
    if (!v14)
    {
      v16 = 0;
      v9 = v58;
      v17 = (void (**)(char *))&off_1ECD3B168;
      if (!dword_1ECD3B140)
        goto LABEL_105;
      goto LABEL_101;
    }
    v54 = (void (**)(char *))&off_1ECD3B168;
    if (dword_1ECD3B140)
    {
      if ((_QWORD)xmmword_1ECD3E930)
        xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      qword_1ECD3E888[0] -= (int)off_1ECD3B178(v58);
      --qword_1ECD3E8D0;
      off_1ECD3B168(v58);
      v58 = (char *)xmmword_1ECD3E930;
      if (!(_QWORD)xmmword_1ECD3E930)
      {
LABEL_98:
        v16 = 0;
        v17 = (void (**)(char *))&off_1ECD3B168;
        if (!dword_1ECD3B140)
          goto LABEL_105;
LABEL_101:
        if ((_QWORD)xmmword_1ECD3E930)
          xmmword_1ECD3B1C0(xmmword_1ECD3E930);
        qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
        --qword_1ECD3E8D0;
        off_1ECD3B168(v11);
        v11 = (char *)xmmword_1ECD3E930;
        if (!(_QWORD)xmmword_1ECD3E930)
          goto LABEL_106;
        v17 = (void (**)(char *))&xmmword_1ECD3B1D0;
LABEL_105:
        (*v17)(v11);
LABEL_106:
        *(_QWORD *)a2 = v9;
        *(_DWORD *)(a2 + 8) = v10;
        goto LABEL_107;
      }
      v54 = (void (**)(char *))&xmmword_1ECD3B1D0;
    }
    (*v54)(v58);
    goto LABEL_98;
  }
  v20 = (uint64_t (**)(char *))&off_1ECD3B168;
  if (!dword_1ECD3B140)
  {
LABEL_37:
    (*v20)(v7);
    v16 = 0;
    goto LABEL_107;
  }
  if ((_QWORD)xmmword_1ECD3E930)
    xmmword_1ECD3B1C0(xmmword_1ECD3E930);
  qword_1ECD3E888[0] -= (int)off_1ECD3B178(v7);
  --qword_1ECD3E8D0;
  off_1ECD3B168(v7);
  v7 = (char *)xmmword_1ECD3E930;
  if ((_QWORD)xmmword_1ECD3E930)
  {
    v20 = (uint64_t (**)(char *))&xmmword_1ECD3B1D0;
    goto LABEL_37;
  }
  v16 = 0;
LABEL_107:
  if (*(_DWORD *)(a2 + 60) < a3)
    *(_DWORD *)(a2 + 60) = a3;
  return v16;
}

uint64_t sub_1ACC61758(uint64_t *a1, sqlite3_stmt **a2)
{
  uint64_t result;
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  sqlite3_stmt *v7;

  v7 = 0;
  result = sub_1ACC52F20(a1, 22, &v7, 0);
  v4 = v7;
  if (!(_DWORD)result)
  {
    if (!sub_1ACBA0E50((uint64_t)v7, 0))
    {
      v5 = *((_QWORD *)v4 + 16);
      if ((*(_WORD *)(v5 + 20) & 0x9000) != 0)
      {
        sub_1ACBF327C(v5, 0);
      }
      else
      {
        *(_QWORD *)v5 = 0;
        *(_WORD *)(v5 + 20) = 4;
      }
      v6 = *(_QWORD *)(*(_QWORD *)v4 + 24);
      if (v6)
        xmmword_1ECD3B1D0(v6);
    }
    if (sqlite3_step(v4) == 100 && sqlite3_column_type(v4, 0) == 4)
    {
      result = 0;
    }
    else
    {
      LODWORD(result) = sqlite3_reset(v4);
      v4 = 0;
      if ((_DWORD)result)
        result = result;
      else
        result = 267;
    }
  }
  *a2 = v4;
  return result;
}

uint64_t sub_1ACC61838(_BYTE *a1, unint64_t a2, _QWORD *a3)
{
  _BYTE *v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;

  if ((unint64_t)a1 >= a2)
  {
    v4 = 0;
    LODWORD(v3) = (_DWORD)a1;
    goto LABEL_22;
  }
  v3 = a1 + 1;
  v4 = *a1 & 0x7F;
  if ((*a1 & 0x80) != 0)
  {
    if ((unint64_t)v3 >= a2)
      goto LABEL_22;
    v5 = (char)a1[1];
    v3 = a1 + 2;
    v4 |= (unint64_t)(v5 & 0x7F) << 7;
    if (v5 < 0)
    {
      if ((unint64_t)v3 >= a2)
        goto LABEL_22;
      v6 = (char)a1[2];
      v3 = a1 + 3;
      v4 |= (unint64_t)(v6 & 0x7F) << 14;
      if (v6 < 0)
      {
        if ((unint64_t)v3 >= a2)
          goto LABEL_22;
        v7 = (char)a1[3];
        v3 = a1 + 4;
        v4 |= (unint64_t)(v7 & 0x7F) << 21;
        if (v7 < 0)
        {
          if ((unint64_t)v3 >= a2)
            goto LABEL_22;
          v8 = (char)a1[4];
          v3 = a1 + 5;
          v4 |= (unint64_t)(v8 & 0x7F) << 28;
          if (v8 < 0)
          {
            if ((unint64_t)v3 >= a2)
              goto LABEL_22;
            v9 = (char)a1[5];
            v3 = a1 + 6;
            v4 |= (unint64_t)(v9 & 0x7F) << 35;
            if (v9 < 0)
            {
              if ((unint64_t)v3 >= a2)
                goto LABEL_22;
              v10 = (char)a1[6];
              v3 = a1 + 7;
              v4 |= (unint64_t)(v10 & 0x7F) << 42;
              if (v10 < 0)
              {
                if ((unint64_t)v3 >= a2)
                  goto LABEL_22;
                v11 = (char)a1[7];
                v3 = a1 + 8;
                v4 |= (unint64_t)(v11 & 0x7F) << 49;
                if (v11 < 0)
                {
                  if ((unint64_t)v3 >= a2)
                    goto LABEL_22;
                  v12 = (char)a1[8];
                  v3 = a1 + 9;
                  v4 |= (unint64_t)(v12 & 0x7F) << 56;
                  if (v12 < 0)
                  {
                    if ((unint64_t)v3 < a2)
                    {
                      v4 |= (unint64_t)a1[9] << 63;
                      LODWORD(v3) = (_DWORD)a1 + 10;
                      goto LABEL_23;
                    }
LABEL_22:
                    LODWORD(v3) = (_DWORD)v3 + 1;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_23:
  *a3 = v4;
  return ((_DWORD)v3 - (_DWORD)a1);
}

uint64_t sub_1ACC61960(int a1, char *a2, int a3, char *a4, int a5, _QWORD *a6, _DWORD *a7)
{
  _DWORD *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _BOOL4 v22;
  BOOL v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _BOOL4 v41;
  char v42;
  _BYTE *v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  int v47;
  char *v48;
  unsigned int v49;
  int v50;
  char *v51;
  size_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  int v58;
  char *v59;
  unsigned int v60;
  int v61;
  unsigned __int8 *v62;
  size_t v63;
  int v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t (**v70)(_QWORD);
  _QWORD *v71;
  _QWORD *v72;
  _DWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _BYTE *v76;
  char *v77;
  char *v78;
  uint64_t v79;

  v7 = a7;
  *a6 = 0;
  *a7 = 0;
  if (sqlite3_initialize())
    return 7;
  v15 = a3;
  v16 = a5;
  v17 = (_BYTE *)sub_1ACB5D828(a3 + (uint64_t)a5 + 17);
  if (!v17)
    return 7;
  v75 = v17;
  v76 = v17;
  if (a3 < 1)
  {
    v18 = 0;
    v19 = 0;
  }
  else
  {
    v79 = 0;
    v18 = &a2[(int)sub_1ACC53378(a2, (unint64_t *)&v79)];
    v19 = v79;
  }
  v74 = a6;
  v78 = v18;
  if (a5 < 1)
  {
    v20 = 0;
    v21 = 0;
  }
  else
  {
    v79 = 0;
    v20 = &a4[(int)sub_1ACC53378(a4, (unint64_t *)&v79)];
    v21 = v79;
  }
  v77 = v20;
  v22 = v18 != 0;
  v23 = v20 != 0;
  v24 = v75;
  v25 = v75;
  if (!((unint64_t)v18 | (unint64_t)v20))
  {
LABEL_76:
    v14 = 0;
    *v25 = 0;
    goto LABEL_77;
  }
  v73 = v7;
  v26 = 0;
  v27 = (unint64_t)&a2[v15];
  v28 = (unint64_t)&a4[v16];
  v29 = 1;
  while (1)
  {
    if (v19 == v21)
      v31 = 0;
    else
      v31 = -1;
    if (v19 > v21)
      v31 = 1;
    if (a1)
      v31 = -v31;
    if (!v22 || !v23 || v31)
    {
      v41 = v31 < 0;
      v42 = (a1 == 0) | v29;
      v43 = v76;
      if (v23 && (!v22 || !v41))
      {
        if ((v42 & 1) != 0)
          v44 = v26;
        else
          v44 = v21;
        if ((v42 & 1) != 0)
          v26 = v21;
        v45 = v26 - v44;
        do
        {
          v46 = v45;
          *v43++ = v45 | 0x80;
          v36 = v45 > 0x7F;
          v45 >>= 7;
        }
        while (v36);
        *(v43 - 1) = v46 & 0x7F;
        v76 = v43;
        v47 = *v20;
        v48 = v20;
        if (*v20)
        {
          v48 = v20;
          do
          {
            v49 = v47 & 0xFFFFFF80;
            v50 = *++v48;
            v47 = v50;
          }
          while (v49 | v50);
        }
        v51 = v48 + 1;
        v52 = (int)v48 + 1 - (int)v20;
        memcpy(v43, v20, v52);
        v76 = &v43[v52];
        v77 = v51;
        if ((unint64_t)v51 >= v28)
        {
          v20 = 0;
          v77 = 0;
          v40 = v19;
          v30 = v21;
        }
        else
        {
          v79 = 0;
          v53 = sub_1ACC53378(v51, (unint64_t *)&v79);
          v18 = v78;
          v20 = &v77[v53];
          v77 = v20;
          v54 = v79;
          if (a1)
            v54 = -v79;
          v30 = v54 + v21;
          v40 = v19;
        }
        v19 = v21;
        goto LABEL_14;
      }
      if ((v42 & 1) != 0)
        v55 = v26;
      else
        v55 = v19;
      if ((v42 & 1) != 0)
        v26 = v19;
      v56 = v26 - v55;
      do
      {
        v57 = v56;
        *v43++ = v56 | 0x80;
        v36 = v56 > 0x7F;
        v56 >>= 7;
      }
      while (v36);
      *(v43 - 1) = v57 & 0x7F;
      v76 = v43;
      v58 = *v18;
      v59 = v18;
      if (*v18)
      {
        v59 = v18;
        do
        {
          v60 = v58 & 0xFFFFFF80;
          v61 = *++v59;
          v58 = v61;
        }
        while (v60 | v61);
      }
      v62 = (unsigned __int8 *)(v59 + 1);
      v63 = (int)v59 + 1 - (int)v18;
      memcpy(v43, v18, v63);
      v76 = &v43[v63];
      v78 = (char *)v62;
      if ((unint64_t)v62 >= v27)
      {
        v18 = 0;
        v78 = 0;
        v40 = v19;
      }
      else
      {
        v79 = 0;
        v64 = sub_1ACC53378((char *)v62, (unint64_t *)&v79);
        v20 = v77;
        v18 = &v78[v64];
        v78 = v18;
        v65 = v79;
        if (a1)
          v65 = -v79;
        v40 = v65 + v19;
      }
      goto LABEL_13;
    }
    if ((a1 == 0) | v29 & 1)
      v32 = v26;
    else
      v32 = v19;
    if ((a1 == 0) | v29 & 1)
      v26 = v19;
    v33 = v26 - v32;
    v34 = v76;
    do
    {
      v35 = v33;
      *v34++ = v33 | 0x80;
      v36 = v33 > 0x7F;
      v33 >>= 7;
    }
    while (v36);
    *(v34 - 1) = v35 & 0x7F;
    v76 = v34;
    v37 = sub_1ACC61E54(&v76, (unsigned __int8 **)&v78, &v77);
    if ((_DWORD)v37)
      break;
    v38 = v78;
    if ((unint64_t)v78 >= v27)
    {
      v18 = 0;
      v40 = v19;
    }
    else
    {
      v79 = 0;
      v18 = &v38[(int)sub_1ACC53378(v78, (unint64_t *)&v79)];
      v39 = v79;
      if (a1)
        v39 = -v79;
      v40 = v39 + v19;
    }
    v78 = v18;
    v66 = v77;
    if ((unint64_t)v77 < v28)
    {
      v79 = 0;
      v20 = &v66[(int)sub_1ACC53378(v77, (unint64_t *)&v79)];
      v77 = v20;
      v67 = v79;
      if (a1)
        v67 = -v79;
      v30 = v67 + v21;
      goto LABEL_14;
    }
    v20 = 0;
    v77 = 0;
LABEL_13:
    v30 = v21;
LABEL_14:
    v29 = 0;
    v22 = v18 != 0;
    v23 = v20 != 0;
    v26 = v19;
    v21 = v30;
    v19 = v40;
    if (!((unint64_t)v18 | (unint64_t)v20))
    {
      v24 = v75;
      v25 = v76;
      v7 = v73;
      goto LABEL_76;
    }
  }
  v14 = v37;
  v70 = &off_1ECD3B168;
  v71 = v75;
  if (dword_1ECD3B140)
  {
    if ((_QWORD)xmmword_1ECD3E930)
    {
      xmmword_1ECD3B1C0(xmmword_1ECD3E930);
      v71 = v75;
    }
    v72 = v71;
    qword_1ECD3E888[0] -= (int)off_1ECD3B178(v71);
    --qword_1ECD3E8D0;
    off_1ECD3B168(v72);
    v71 = (_QWORD *)xmmword_1ECD3E930;
    v7 = v73;
    if ((_QWORD)xmmword_1ECD3E930)
    {
      v70 = &xmmword_1ECD3B1D0;
      goto LABEL_86;
    }
    LODWORD(v25) = 0;
    v24 = 0;
LABEL_77:
    v68 = v74;
  }
  else
  {
    v7 = v73;
LABEL_86:
    v68 = v74;
    (*v70)(v71);
    LODWORD(v25) = 0;
    v24 = 0;
  }
  *v68 = v24;
  *v7 = (_DWORD)v25 - (_DWORD)v24;
  return v14;
}

uint64_t sub_1ACC61E54(_BYTE **a1, unsigned __int8 **a2, char **a3)
{
  _BYTE *v6;
  unsigned __int8 *v7;
  char *v8;
  char *v9;
  size_t v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  BOOL v18;
  _BYTE *v19;
  int v20;
  unsigned __int8 *v21;
  int v22;
  char v23;
  uint64_t v24;
  char v25;
  _BYTE *v26;
  int v27;
  uint64_t v28;
  char v29;
  _BYTE *v30;
  unsigned __int8 *v31;
  int v32;
  char v33;
  size_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;

  v6 = *a1;
  v7 = *a2;
  v8 = *a3;
LABEL_2:
  while (2)
  {
    v9 = (char *)(v7 + 1);
    while (1)
    {
      v11 = *v7;
      if (v11 == 1)
      {
        LODWORD(v13) = *v9;
        if (*v9 < 0)
        {
          LODWORD(v13) = v13 & 0x7F | (v7[2] << 7);
          if ((char)v7[2] < 0)
          {
            LODWORD(v13) = v13 & 0x3FFF | (v7[3] << 14);
            if ((char)v7[3] < 0)
            {
              LODWORD(v13) = v13 & 0x1FFFFF | (v7[4] << 21);
              if ((char)v7[4] < 0)
                LODWORD(v13) = v13 & 0xFFFFFFF | ((v7[5] & 7) << 28);
            }
          }
        }
        if (!(_DWORD)v13)
          return 267;
        v12 = *v8;
        if (!*v8)
        {
LABEL_8:
          v14 = 0x7FFFFFFF;
          goto LABEL_27;
        }
      }
      else if (*v7)
      {
        LODWORD(v13) = 0;
        v12 = *v8;
        if (!*v8)
          goto LABEL_8;
      }
      else
      {
        v12 = *v8;
        if (!*v8)
          goto LABEL_113;
        LODWORD(v13) = 0x7FFFFFFF;
      }
      if (v12 == 1)
      {
        v14 = v8[1];
        if (v8[1] < 0)
        {
          v14 = v14 & 0x7F | (v8[2] << 7);
          if (v8[2] < 0)
          {
            v14 = v14 & 0x3FFF | (v8[3] << 14);
            if (v8[3] < 0)
            {
              v14 = v14 & 0x1FFFFF | (v8[4] << 21);
              if (v8[4] < 0)
                v14 = v14 & 0xFFFFFFF | ((v8[5] & 7) << 28);
            }
          }
        }
        if (!v14)
          return 267;
      }
      else
      {
        v14 = 0;
      }
LABEL_27:
      if ((_DWORD)v13 == v14)
        break;
      if (v13 < v14)
      {
        if ((_DWORD)v13)
        {
          v28 = 0;
          v13 = v13;
          do
          {
            v29 = v13;
            v6[++v28] = v13 | 0x80;
            v18 = v13 > 0x7F;
            v13 >>= 7;
          }
          while (v18);
          *v6 = 1;
          v30 = &v6[v28];
          *v30 = v29 & 0x7F;
          v6 = v30 + 1;
          LODWORD(v13) = v28 + 1;
          v11 = v9[v28];
        }
        v31 = &v7[(int)v13];
        v7 = v31;
        if (v11 >= 2)
        {
          v7 = v31;
          do
          {
            v32 = v11 & 0x80;
            v33 = *++v7;
            LOBYTE(v11) = v33;
          }
          while (v33 & 0xFE | v32);
        }
        v34 = (int)v7 - (int)v31;
        memcpy(v6, v31, v34);
        v6 += v34;
        goto LABEL_2;
      }
      if (v14)
      {
        v15 = 0;
        v16 = v14;
        do
        {
          v17 = v16;
          v6[++v15] = v16 | 0x80;
          v18 = v16 > 0x7F;
          v16 >>= 7;
        }
        while (v18);
        *v6 = 1;
        v19 = &v6[v15];
        *v19 = v17 & 0x7F;
        v6 = v19 + 1;
        v20 = v15 + 1;
        v12 = v8[v15 + 1];
      }
      else
      {
        v20 = 0;
      }
      v21 = (unsigned __int8 *)&v8[v20];
      v8 = (char *)v21;
      if (v12 >= 2)
      {
        v8 = (char *)v21;
        do
        {
          v22 = v12 & 0x80;
          v23 = *++v8;
          LOBYTE(v12) = v23;
        }
        while (v23 & 0xFE | v22);
      }
      v10 = (int)v8 - (int)v21;
      memcpy(v6, v21, v10);
      v6 += v10;
    }
    if ((_DWORD)v13)
    {
      v24 = 0;
      v13 = v13;
      do
      {
        v25 = v13;
        v6[++v24] = v13 | 0x80;
        v18 = v13 > 0x7F;
        v13 >>= 7;
      }
      while (v18);
      *v6 = 1;
      v26 = &v6[v24];
      *v26 = v25 & 0x7F;
      v6 = v26 + 1;
      v27 = v24 + 1;
    }
    else
    {
      v27 = 0;
    }
    v35 = &v8[v27];
    v52 = 0;
    v7 += v27 + (uint64_t)(int)sub_1ACC53378((char *)&v7[v27], (unint64_t *)&v52);
    v36 = v52;
    v52 = 0;
    v8 = &v35[(int)sub_1ACC53378(v35, (unint64_t *)&v52)];
    if (v36 >= 2)
    {
      v37 = v52;
      if (v52 >= 2)
      {
        v38 = 0;
        do
        {
          v39 = v36;
          if (v36 >= v37)
            v40 = v37;
          else
            v40 = v36;
          v41 = v40 - v38;
          do
          {
            v42 = v41;
            *v6++ = v41 | 0x80;
            v18 = v41 > 0x7F;
            v41 >>= 7;
          }
          while (v18);
          *(v6 - 1) = v42 & 0x7F;
          if (v36 == v37)
          {
            v43 = *v7;
            if (v43 >= 2)
            {
              if ((v43 & 0x80) != 0)
              {
                v43 = v43 & 0x7F | (v7[1] << 7);
                if ((char)v7[1] < 0)
                {
                  v43 = v43 & 0x3FFF | (v7[2] << 14);
                  if ((char)v7[2] < 0)
                  {
                    v43 = v43 & 0x1FFFFF | (v7[3] << 21);
                    if ((char)v7[3] < 0)
                    {
                      v43 = v43 & 0xFFFFFFF | ((v7[4] & 7) << 28);
                      v45 = 5;
                    }
                    else
                    {
                      v45 = 4;
                    }
                  }
                  else
                  {
                    v45 = 3;
                  }
                }
                else
                {
                  v45 = 2;
                }
              }
              else
              {
                v45 = 1;
              }
              v7 += v45;
              v36 = v36 + v43 - 2;
            }
            else
            {
              v36 = 0x7FFFFFFFFFFFFFFFLL;
            }
            v49 = *v8;
            if (v49 >= 2)
            {
              if ((v49 & 0x80) != 0)
              {
                v49 = v49 & 0x7F | (v8[1] << 7);
                if (v8[1] < 0)
                {
                  v49 = v49 & 0x3FFF | (v8[2] << 14);
                  if (v8[2] < 0)
                  {
                    v49 = v49 & 0x1FFFFF | (v8[3] << 21);
                    if (v8[3] < 0)
                    {
                      v49 = v49 & 0xFFFFFFF | ((v8[4] & 7) << 28);
                      v50 = 5;
                    }
                    else
                    {
                      v50 = 4;
                    }
                  }
                  else
                  {
                    v50 = 3;
                  }
                }
                else
                {
                  v50 = 2;
                }
              }
              else
              {
                v50 = 1;
              }
              v8 += v50;
              v37 = v39 + v49 - 2;
            }
            else
            {
              v37 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }
          else if (v36 >= v37)
          {
            v46 = *v8;
            if (v46 >= 2)
            {
              if ((v46 & 0x80) != 0)
              {
                v46 = v46 & 0x7F | (v8[1] << 7);
                if (v8[1] < 0)
                {
                  v46 = v46 & 0x3FFF | (v8[2] << 14);
                  if (v8[2] < 0)
                  {
                    v46 = v46 & 0x1FFFFF | (v8[3] << 21);
                    if (v8[3] < 0)
                    {
                      v46 = v46 & 0xFFFFFFF | ((v8[4] & 7) << 28);
                      v48 = 5;
                    }
                    else
                    {
                      v48 = 4;
                    }
                  }
                  else
                  {
                    v48 = 3;
                  }
                }
                else
                {
                  v48 = 2;
                }
              }
              else
              {
                v48 = 1;
              }
              v8 += v48;
              v37 = v37 + v46 - 2;
            }
            else
            {
              v37 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }
          else
          {
            v44 = *v7;
            if (v44 >= 2)
            {
              if ((v44 & 0x80) != 0)
              {
                v44 = v44 & 0x7F | (v7[1] << 7);
                if ((char)v7[1] < 0)
                {
                  v44 = v44 & 0x3FFF | (v7[2] << 14);
                  if ((char)v7[2] < 0)
                  {
                    v44 = v44 & 0x1FFFFF | (v7[3] << 21);
                    if ((char)v7[3] < 0)
                    {
                      v44 = v44 & 0xFFFFFFF | ((v7[4] & 7) << 28);
                      v47 = 5;
                    }
                    else
                    {
                      v47 = 4;
                    }
                  }
                  else
                  {
                    v47 = 3;
                  }
                }
                else
                {
                  v47 = 2;
                }
              }
              else
              {
                v47 = 1;
              }
              v7 += v47;
              v36 = v36 + v44 - 2;
            }
            else
            {
              v36 = 0x7FFFFFFFFFFFFFFFLL;
            }
          }
          v38 = v40 - 2;
        }
        while (v36 != 0x7FFFFFFFFFFFFFFFLL || v37 != 0x7FFFFFFFFFFFFFFFLL);
        continue;
      }
    }
    break;
  }
LABEL_113:
  result = 0;
  *v6 = 0;
  *a1 = v6 + 1;
  *a2 = v7 + 1;
  *a3 = v8 + 1;
  return result;
}

uint64_t sub_1ACC62408(_BYTE **a1, int a2, int a3, int a4, unsigned __int8 **a5, unsigned __int8 **a6)
{
  unsigned __int8 **v6;
  _QWORD *v9;
  _BYTE *v10;
  unsigned __int8 *v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  int v20;
  _BYTE *v21;
  char v22;
  uint64_t v23;
  int64_t v24;
  BOOL v25;
  int64_t v26;
  int64_t v27;
  int64_t v28;
  int64_t v29;
  unint64_t v30;
  char v31;
  BOOL v32;
  char v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned __int8 *v51;
  unsigned int v52;
  unsigned int v53;
  unsigned __int8 **v55;
  _QWORD *v56;
  unsigned __int8 **v57;
  uint64_t v58;
  uint64_t v59;

  v6 = a6;
  v9 = a1;
  v10 = *a1;
  v11 = *a5;
  v12 = (char *)*a6;
  if (**a5 == 1)
  {
    LODWORD(v13) = v11[1];
    if ((char)v11[1] < 0)
    {
      LODWORD(v13) = v13 & 0x7F | (v11[2] << 7);
      if ((char)v11[2] < 0)
      {
        LODWORD(v13) = v13 & 0x3FFF | (v11[3] << 14);
        if ((char)v11[3] < 0)
        {
          LODWORD(v13) = v13 & 0x1FFFFF | (v11[4] << 21);
          if ((char)v11[4] < 0)
          {
            LODWORD(v13) = v13 & 0xFFFFFFF | ((v11[5] & 7) << 28);
            v14 = 5;
          }
          else
          {
            v14 = 4;
          }
        }
        else
        {
          v14 = 3;
        }
      }
      else
      {
        v14 = 2;
      }
    }
    else
    {
      v14 = 1;
    }
    v11 += v14 + 1;
  }
  else
  {
    LODWORD(v13) = 0;
  }
  if (*v12 == 1)
  {
    v15 = v12[1];
    if (v12[1] < 0)
    {
      v15 = v15 & 0x7F | (v12[2] << 7);
      if (v12[2] < 0)
      {
        v15 = v15 & 0x3FFF | (v12[3] << 14);
        if (v12[3] < 0)
        {
          v15 = v15 & 0x1FFFFF | (v12[4] << 21);
          if (v12[4] < 0)
          {
            v15 = v15 & 0xFFFFFFF | ((v12[5] & 7) << 28);
            v16 = 5;
          }
          else
          {
            v16 = 4;
          }
        }
        else
        {
          v16 = 3;
        }
      }
      else
      {
        v16 = 2;
      }
    }
    else
    {
      v16 = 1;
    }
    v12 += v16 + 1;
  }
  else
  {
    v15 = 0;
  }
  v58 = a2;
  while (1)
  {
    while ((_DWORD)v13 != v15)
    {
      if ((int)v13 < v15)
      {
        v35 = *v11;
        if (v35 >= 2)
        {
          do
          {
            v37 = *++v11;
            v36 = v37;
            v38 = v35 & 0x80;
            LOBYTE(v35) = v37;
          }
          while (v37 & 0xFE | v38);
          v35 = v36;
        }
        if (!v35)
          goto LABEL_121;
        LODWORD(v13) = v11[1];
        if ((char)v11[1] < 0)
        {
          LODWORD(v13) = v13 & 0x7F | (v11[2] << 7);
          if ((char)v11[2] < 0)
          {
            LODWORD(v13) = v13 & 0x3FFF | (v11[3] << 14);
            if ((char)v11[3] < 0)
            {
              LODWORD(v13) = v13 & 0x1FFFFF | (v11[4] << 21);
              if ((char)v11[4] < 0)
              {
                LODWORD(v13) = v13 & 0xFFFFFFF | ((v11[5] & 7) << 28);
                v11 += 6;
              }
              else
              {
                v11 += 5;
              }
            }
            else
            {
              v11 += 4;
            }
          }
          else
          {
            v11 += 3;
          }
        }
        else
        {
          v11 += 2;
        }
      }
      else
      {
        v17 = *v12;
        if (v17 >= 2)
        {
          do
          {
            v19 = *++v12;
            v18 = v19;
            v20 = v17 & 0x80;
            LOBYTE(v17) = v19;
          }
          while (v19 & 0xFE | v20);
          v17 = v18;
        }
        if (!v17)
          goto LABEL_121;
        v15 = v12[1];
        if (v12[1] < 0)
        {
          v15 = v15 & 0x7F | (v12[2] << 7);
          if (v12[2] < 0)
          {
            v15 = v15 & 0x3FFF | (v12[3] << 14);
            if (v12[3] < 0)
            {
              v15 = v15 & 0x1FFFFF | (v12[4] << 21);
              if (v12[4] < 0)
              {
                v15 = v15 & 0xFFFFFFF | ((v12[5] & 7) << 28);
                v12 += 6;
              }
              else
              {
                v12 += 5;
              }
            }
            else
            {
              v12 += 4;
            }
          }
          else
          {
            v12 += 3;
          }
        }
        else
        {
          v12 += 2;
        }
      }
    }
    v57 = a5;
    v21 = v10;
    if ((_DWORD)v13)
    {
      *v10 = 1;
      v21 = v10 + 1;
      v13 = v13;
      do
      {
        v22 = v13;
        *v21++ = v13 | 0x80;
        v25 = v13 > 0x7F;
        v13 >>= 7;
      }
      while (v25);
      *(v21 - 1) = v22 & 0x7F;
    }
    v59 = 0;
    v11 += (int)sub_1ACC53378((char *)v11, (unint64_t *)&v59);
    v23 = v59;
    v59 = 0;
    v12 += (int)sub_1ACC53378(v12, (unint64_t *)&v59);
    v24 = v23 - 2;
    v25 = v23 < 2 || v59 < 2;
    if (v25)
      break;
    v55 = v6;
    v56 = v9;
    v26 = 0;
    v27 = v59 - 2;
LABEL_49:
    v28 = v24 + v58;
    while (1)
    {
      v29 = v26;
      if (v27 == v28 || v27 <= v28 && !a4 && v27 > v24)
      {
        if (a3)
          v26 = v24;
        else
          v26 = v27;
        v30 = v26 - v29 + 2;
        do
        {
          v31 = v30;
          *v21++ = v30 | 0x80;
          v25 = v30 > 0x7F;
          v30 >>= 7;
        }
        while (v25);
        v10 = 0;
        *(v21 - 1) = v31 & 0x7F;
      }
      if (a3)
        v32 = 0;
      else
        v32 = v27 <= v28;
      v33 = !v32;
      if (v27 > v24 && (v33 & 1) != 0)
      {
        v34 = *v11;
        if (v34 > 1)
        {
          v59 = 0;
          v11 += (int)sub_1ACC53378((char *)v11, (unint64_t *)&v59);
          v24 = v24 + v59 - 2;
          goto LABEL_49;
        }
        if (!v10)
          v10 = v21;
        goto LABEL_81;
      }
      if (*v12 < 2u)
        break;
      v59 = 0;
      v12 += (int)sub_1ACC53378(v12, (unint64_t *)&v59);
      v27 = v27 + v59 - 2;
    }
    v34 = *v11;
    if (!v10)
      v10 = v21;
    if (v34 < 2)
    {
LABEL_81:
      v6 = v55;
      v9 = v56;
      a5 = v57;
      goto LABEL_86;
    }
    v6 = v55;
    v9 = v56;
    a5 = v57;
    do
    {
      v40 = *++v11;
      v39 = v40;
      v41 = v34 & 0x80;
      LOBYTE(v34) = v40;
    }
    while (v40 & 0xFE | v41);
    v34 = v39;
LABEL_86:
    v42 = *v12;
    if (v42 >= 2)
    {
      do
      {
        v44 = *++v12;
        v43 = v44;
        v45 = v42 & 0x80;
        LOBYTE(v42) = v44;
      }
      while (v44 & 0xFE | v45);
      v42 = v43;
    }
    if (!v34)
      goto LABEL_121;
    if (!v42)
    {
      v51 = (unsigned __int8 *)(v12 + 1);
      goto LABEL_124;
    }
    LODWORD(v13) = v11[1];
    if ((char)v11[1] < 0)
    {
      LODWORD(v13) = v13 & 0x7F | (v11[2] << 7);
      if ((char)v11[2] < 0)
      {
        LODWORD(v13) = v13 & 0x3FFF | (v11[3] << 14);
        if ((char)v11[3] < 0)
        {
          LODWORD(v13) = v13 & 0x1FFFFF | (v11[4] << 21);
          if ((char)v11[4] < 0)
          {
            LODWORD(v13) = v13 & 0xFFFFFFF | ((v11[5] & 7) << 28);
            v46 = 5;
          }
          else
          {
            v46 = 4;
          }
        }
        else
        {
          v46 = 3;
        }
      }
      else
      {
        v46 = 2;
      }
    }
    else
    {
      v46 = 1;
    }
    v15 = v12[1];
    if (v12[1] < 0)
    {
      v15 = v15 & 0x7F | (v12[2] << 7);
      if (v12[2] < 0)
      {
        v15 = v15 & 0x3FFF | (v12[3] << 14);
        if (v12[3] < 0)
        {
          v15 = v15 & 0x1FFFFF | (v12[4] << 21);
          if (v12[4] < 0)
          {
            v15 = v15 & 0xFFFFFFF | ((v12[5] & 7) << 28);
            v47 = 5;
          }
          else
          {
            v47 = 4;
          }
        }
        else
        {
          v47 = 3;
        }
      }
      else
      {
        v47 = 2;
      }
    }
    else
    {
      v47 = 1;
    }
    v11 += v46 + 1;
    v12 += v47 + 1;
  }
  v10 = v21;
  a5 = v57;
LABEL_121:
  v48 = *v12;
  if (*v12)
  {
    do
    {
      v49 = v48 & 0xFFFFFF80;
      v50 = *++v12;
      v48 = v50;
    }
    while (v49 | v50);
  }
  LOBYTE(v34) = *v11;
  v51 = (unsigned __int8 *)(v12 + 1);
  if (*v11)
  {
LABEL_124:
    v34 = (char)v34;
    do
    {
      v52 = v34 & 0xFFFFFF80;
      v53 = (char)*++v11;
      v34 = v53;
    }
    while (v52 | v53);
  }
  *a5 = v11 + 1;
  *v6 = v51;
  if ((_BYTE *)*v9 == v10)
    return 0;
  *v10 = 0;
  *v9 = v10 + 1;
  return 1;
}

uint64_t sub_1ACC62A3C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  int v16;
  uint64_t *v17;
  uint64_t v18;
  const void *v19;
  int v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  const void *v27;
  int v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  char *v44;
  int v45;

  v4 = *(_QWORD *)a1;
  if (a2)
  {
    if (*(unsigned __int8 *)(a1 + 76) == *(unsigned __int8 *)(v4 + 463))
    {
      v5 = *(_DWORD *)(a3 + 80);
      if ((v5 - 5) >= 0xFFFFFFFC)
      {
        if (v5 < 1)
        {
          LODWORD(v6) = 0;
        }
        else
        {
          if (*(_DWORD *)(a3 + 104))
            goto LABEL_31;
          v6 = *(_QWORD *)(a3 + 120);
          if (v6)
          {
            if (!*(_DWORD *)(v6 + 52))
              goto LABEL_31;
            LODWORD(v6) = 1;
          }
          v7 = v5 & ~(v5 >> 31);
          if (v7 != 1)
          {
            if (*(_DWORD *)(a3 + 144))
              goto LABEL_31;
            v8 = *(_QWORD *)(a3 + 160);
            if (v8)
            {
              if (!*(_DWORD *)(v8 + 52))
                goto LABEL_31;
              LODWORD(v6) = 1;
            }
            if (v7 != 2)
            {
              if (*(_DWORD *)(a3 + 184))
                goto LABEL_31;
              v9 = *(_QWORD *)(a3 + 200);
              if (v9)
              {
                if (!*(_DWORD *)(v9 + 52))
                  goto LABEL_31;
                LODWORD(v6) = 1;
              }
              if (v7 != 3)
              {
                if (*(_DWORD *)(a3 + 224))
                  goto LABEL_31;
                v10 = *(_QWORD *)(a3 + 240);
                if (v10)
                {
                  if (!*(_DWORD *)(v10 + 52))
                    goto LABEL_31;
                  LODWORD(v6) = 1;
                }
              }
            }
          }
        }
        if ((_DWORD)v6)
        {
          if (*(_DWORD *)(a3 + 84) >= *(_DWORD *)(v4 + 48))
            v11 = -1;
          else
            v11 = *(_DWORD *)(a3 + 84);
          v40 = v11;
          if (*(int *)(a3 + 80) < 1)
          {
            result = 0;
            goto LABEL_75;
          }
          v12 = 0;
          while (1)
          {
            v17 = *(uint64_t **)(a3 + 40 * v12 + 120);
            if (v17)
            {
              v18 = a3 + 40 * v12;
              v19 = *(const void **)(v18 + 88);
              v20 = *(_DWORD *)(v18 + 96);
              v21 = *((unsigned int *)v17 + 2);
              if (*(_BYTE *)(v4 + 463))
                v22 = sub_1ACC546D8;
              else
                v22 = sub_1ACC54730;
              result = sub_1ACC53478(v4, v17, v19, v20);
              if ((_DWORD)result)
                goto LABEL_75;
              v41 = v12;
              v43 = v17;
              if ((int)v21 <= 0)
              {
                *((_DWORD *)v17 + 3) = 0;
              }
              else
              {
                v23 = 0;
                v24 = *v17;
                while (1)
                {
                  v25 = *(_QWORD *)(v24 + 8 * v23);
                  if (!*(_QWORD *)(v25 + 40))
                    break;
                  v26 = *(_DWORD *)(v25 + 72);
                  v27 = *(const void **)(v25 + 80);
                  v28 = v26 >= v20 ? v20 : *(_DWORD *)(v25 + 72);
                  if (memcmp(v27, v19, v28) || v26 != v20)
                    break;
                  if (v21 == ++v23)
                  {
                    LODWORD(v23) = v21;
                    break;
                  }
                }
                *((_DWORD *)v43 + 3) = v23;
                if ((int)v23 >= 1)
                {
                  v30 = 0;
                  v31 = 0;
                  while (1)
                  {
                    result = sub_1ACC54788(v4, *(_QWORD *)(*v43 + 8 * v31));
                    if ((_DWORD)result)
                      break;
                    ++v31;
                    v30 += 8;
                    if (v31 >= *((int *)v43 + 3))
                    {
                      if ((v31 & 0xFFFFFFFE) != 0)
                      {
                        v32 = 0;
                        v33 = v31 - 1;
                        v42 = *v43;
                        v34 = *v43 + v30;
                        do
                        {
                          v35 = v33--;
                          if (v35 < v31)
                          {
                            v36 = *(_QWORD *)(v42 + 8 * v33);
                            v37 = v32;
                            do
                            {
                              v38 = v34 + v37;
                              if ((v22(v36, *(_QWORD *)(v34 + v37 - 8)) & 0x80000000) != 0)
                                break;
                              v39 = *(int8x16_t *)(v38 - 16);
                              *(int8x16_t *)(v38 - 16) = vextq_s8(v39, v39, 8uLL);
                              v36 = v39.i64[0];
                              v37 += 8;
                            }
                            while (v37 != 8);
                          }
                          v32 -= 8;
                        }
                        while (v35 > 1);
                      }
                      goto LABEL_42;
                    }
                  }
LABEL_75:
                  v16 = 1;
                  goto LABEL_40;
                }
              }
LABEL_42:
              *((_DWORD *)v43 + 10) = v40;
              v12 = v41;
            }
            result = 0;
            ++v12;
            v16 = 1;
            if (v12 >= *(int *)(a3 + 80))
              goto LABEL_40;
          }
        }
      }
    }
  }
LABEL_31:
  v13 = 0;
  v14 = a3 + 88;
  while (v13 < *(int *)(a3 + 80))
  {
    if (*(_QWORD *)(v14 + 32))
    {
      v45 = 0;
      v44 = 0;
      result = sub_1ACC60B4C(v4, v14, *(_DWORD *)(a3 + 84), &v45, &v44);
      if (!(_DWORD)result)
        result = sub_1ACC611A0(v4, a3, v13, v44, v45);
    }
    else
    {
      result = 0;
    }
    ++v13;
    v14 += 40;
    if ((_DWORD)result)
    {
      v16 = 0;
      goto LABEL_40;
    }
  }
  v16 = 0;
  result = 0;
LABEL_40:
  *(_DWORD *)(a3 + 56) = v16;
  return result;
}

uint64_t sub_1ACC62D9C(uint64_t result, uint64_t a2, int *a3)
{
  uint64_t v3;
  BOOL *v4;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)(uint64_t);
  int v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t v28;
  int v29;
  BOOL v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t (**v41)(unsigned __int8 *);
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  _DWORD *v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  int v53;
  uint64_t v54;
  int v55;
  char v56;
  int v57;
  unint64_t v58;
  uint64_t v59;
  BOOL v60;
  int v61;
  uint64_t *v62;
  _OWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _OWORD *v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  int v72;
  uint64_t *v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _OWORD *v78;
  int v79;
  uint64_t v80;
  unsigned __int8 *v81;
  int v82;
  uint64_t v83;
  int v84;
  int v85;
  unsigned __int8 **v86;
  unsigned __int8 *v87;
  unsigned __int8 *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  int v93;
  _BOOL4 v94;
  uint64_t v96;
  uint64_t v97;
  BOOL *v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned __int8 v106;
  __int128 v107;
  _OWORD v108[7];
  uint64_t v109;

  v109 = *MEMORY[0x1E0C80C00];
  if (!*a3)
  {
    v3 = a2;
    v4 = (BOOL *)(a2 + 48);
    if (!*(_BYTE *)(a2 + 48))
    {
      v6 = (unsigned __int8 *)result;
      v7 = *(unsigned __int8 *)(result + 76);
      *(_BYTE *)(a2 + 49) = 1;
      switch(*(_DWORD *)a2)
      {
        case 1:
        case 3:
          v9 = *(_QWORD *)(a2 + 16);
          v8 = *(_QWORD *)(a2 + 24);
          if (*(_BYTE *)(v9 + 50))
          {
            result = sub_1ACC62D9C(result, *(_QWORD *)(a2 + 24), a3);
            *(_QWORD *)(v3 + 40) = *(_QWORD *)(v8 + 40);
            *(_BYTE *)(v3 + 48) = *(_BYTE *)(v8 + 48);
          }
          else
          {
            v35 = *(unsigned __int8 *)(v8 + 50);
            result = sub_1ACC62D9C(result, *(_QWORD *)(a2 + 16), a3);
            if (v35)
            {
              *(_QWORD *)(v3 + 40) = *(_QWORD *)(v9 + 40);
              *(_BYTE *)(v3 + 48) = *(_BYTE *)(v9 + 48);
            }
            else
            {
              v88 = v6;
              v89 = v8;
              while (1)
              {
                result = sub_1ACC62D9C(v88, v89, a3);
                if (*(_BYTE *)(v9 + 48) || *(_BYTE *)(v8 + 48))
                {
                  v90 = *(_QWORD *)(v9 + 40);
                  v94 = 1;
                  goto LABEL_194;
                }
                v90 = *(_QWORD *)(v9 + 40);
                if (*a3)
                  break;
                v91 = *(_QWORD *)(v8 + 40);
                v92 = v90 <= v91;
                if (v90 == v91)
                  v93 = 0;
                else
                  v93 = -1;
                if (!v92)
                  v93 = 1;
                if (v7)
                  v93 = -v93;
                if (!v93)
                  break;
                if (v93 >= 0)
                  v89 = v8;
                else
                  v89 = v9;
                v88 = v6;
              }
              v94 = *(unsigned __int8 *)(v8 + 48) != 0;
LABEL_194:
              *(_QWORD *)(v3 + 40) = v90;
              *(_BYTE *)(v3 + 48) = v94;
              if (*(_DWORD *)v3 == 1 && v94)
              {
                v96 = *(_QWORD *)(v8 + 32);
                if (*(_QWORD *)v96 && !*a3)
                {
                  do
                  {
                    if (*(_BYTE *)(v8 + 48))
                      break;
                    bzero(*(void **)(v96 + 40), *(int *)(v96 + 48));
                    result = sub_1ACC62D9C(v6, v8, a3);
                  }
                  while (!*a3);
                }
                v97 = *(_QWORD *)(v9 + 32);
                if (v97 && *(_QWORD *)v97 && !*a3)
                {
                  do
                  {
                    if (*(_BYTE *)(v9 + 48))
                      break;
                    bzero(*(void **)(v97 + 40), *(int *)(v97 + 48));
                    result = sub_1ACC62D9C(v6, v9, a3);
                  }
                  while (!*a3);
                }
                *(_BYTE *)(v9 + 48) = 1;
                *(_BYTE *)(v8 + 48) = 1;
              }
            }
          }
          return result;
        case 2:
          v14 = *(_QWORD *)(a2 + 16);
          v15 = *(_QWORD *)(a2 + 24);
          if (!*(_BYTE *)(v15 + 49))
            sub_1ACC62D9C(result, *(_QWORD *)(a2 + 24), a3);
          result = sub_1ACC62D9C(v6, v14, a3);
          v16 = *(_BYTE *)(v14 + 48);
          if (!v16)
          {
            if (*a3)
            {
              v16 = 0;
            }
            else
            {
              do
              {
                if (*(_BYTE *)(v15 + 48))
                  break;
                v17 = *(_QWORD *)(v14 + 40);
                v18 = *(_QWORD *)(v15 + 40);
                v26 = v17 < v18;
                v19 = v17 > v18;
                v20 = v26;
                if (v7)
                  v19 = v20;
                if (!v19)
                  break;
                result = sub_1ACC62D9C(v6, v15, a3);
              }
              while (!*a3);
              v16 = *(_BYTE *)(v14 + 48);
            }
          }
          *(_QWORD *)(v3 + 40) = *(_QWORD *)(v14 + 40);
          *(_BYTE *)(v3 + 48) = v16;
          return result;
        case 4:
          v22 = *(_QWORD *)(a2 + 16);
          v21 = *(_QWORD *)(a2 + 24);
          if (v7)
            v23 = -1;
          else
            v23 = 1;
          v24 = *(_QWORD *)(v22 + 40);
          v25 = *(_QWORD *)(v21 + 40);
          v26 = v24 <= v25;
          if (v24 == v25)
            v27 = 0;
          else
            v27 = -1;
          if (!v26)
            v27 = 1;
          v28 = *(_QWORD *)(a2 + 16);
          if (!*(_BYTE *)(v21 + 48))
          {
            v29 = v27 * v23;
            if (*(_BYTE *)(v22 + 48) || (v28 = *(_QWORD *)(v3 + 16), (v29 & 0x80000000) == 0))
            {
              v30 = !*(_BYTE *)(v22 + 48) && v29 <= 0;
              v28 = *(_QWORD *)(v3 + 24);
              if (v30)
              {
                sub_1ACC62D9C(result, *(_QWORD *)(v3 + 16), a3);
                v28 = v21;
              }
            }
          }
          result = sub_1ACC62D9C(v6, v28, a3);
          v31 = *(_BYTE *)(v22 + 48);
          if (v31)
            v31 = *(_BYTE *)(v21 + 48) != 0;
          *v4 = v31;
          v32 = *(_QWORD *)(v22 + 40);
          if (*(_BYTE *)(v21 + 48))
            goto LABEL_60;
          v33 = *(_QWORD *)(v21 + 40);
          if (v32 == v33)
            v34 = 0;
          else
            v34 = -1;
          if (v32 > v33)
            v34 = 1;
          if (!*(_BYTE *)(v22 + 48) && v34 * v23 < 0)
LABEL_60:
            *(_QWORD *)(v3 + 40) = v32;
          else
            *(_QWORD *)(v3 + 40) = v33;
          return result;
        default:
          v10 = *(_QWORD *)(a2 + 32);
          if (!*(_DWORD *)(v10 + 32))
            goto LABEL_15;
          v11 = *(_QWORD *)(v10 + 40);
          if (!v11)
            goto LABEL_15;
          v12 = &off_1ECD3B168;
          if (!dword_1ECD3B140)
            goto LABEL_14;
          if ((_QWORD)xmmword_1ECD3E930)
            xmmword_1ECD3B1C0(xmmword_1ECD3E930);
          qword_1ECD3E888[0] -= (int)off_1ECD3B178(v11);
          --qword_1ECD3E8D0;
          result = off_1ECD3B168(v11);
          v11 = xmmword_1ECD3E930;
          if ((_QWORD)xmmword_1ECD3E930)
          {
            v12 = &xmmword_1ECD3B1D0;
LABEL_14:
            result = (*v12)(v11);
          }
LABEL_15:
          *(_QWORD *)(v10 + 40) = 0;
          *(_DWORD *)(v10 + 48) = 0;
          *(_DWORD *)(v10 + 32) = 0;
          v101 = *(_QWORD *)v6;
          if (!*(_DWORD *)(v10 + 56))
          {
            v36 = *(unsigned __int8 *)(*(_QWORD *)v6 + 463);
            if (v6[76] == (_DWORD)v36 || (v37 = *(_DWORD *)(v10 + 8)) == 0)
            {
              result = sub_1ACC63BB8(v101, v10, v4);
              v13 = 0;
            }
            else
            {
              result = sub_1ACC54A40(v36, *(char **)v10, v37, (char **)(v10 + 16), (_QWORD *)(v10 + 24), (int *)(v10 + 48), v4);
              v13 = 0;
              *(_QWORD *)(v10 + 40) = *(_QWORD *)(v10 + 16);
            }
            goto LABEL_212;
          }
          v106 = 0;
          if (*(_DWORD *)(v10 + 80) == 1)
          {
            result = sub_1ACC63CD8(v101, *(_QWORD *)(v10 + 120), (_QWORD *)(v10 + 24), (_QWORD *)(v10 + 40), (_DWORD *)(v10 + 48));
            v13 = result;
            *v4 = *(_QWORD *)(v10 + 40) == 0;
LABEL_212:
            *a3 = v13;
            *(_QWORD *)(v3 + 40) = *(_QWORD *)(v10 + 24);
            return result;
          }
          v98 = v4;
          v99 = v3;
          v38 = 0;
          v13 = 0;
          v100 = v6[76];
          memset(&v108[3], 0, 64);
          if (v100)
            v39 = -1;
          else
            v39 = 1;
          v102 = v39;
          v107 = 0uLL;
          memset(v108, 0, 48);
          v40 = v101;
LABEL_72:
          if (v13)
          {
            v42 = 0;
            goto LABEL_100;
          }
          v43 = 0;
          v42 = 0;
          v44 = 0;
          v45 = 120;
          v46 = (_DWORD *)v108 + 2;
          break;
      }
      while (1)
      {
        v38 = v106;
        if (v43 >= *(int *)(v10 + 80) || v106 != 0)
        {
          v13 = 0;
          goto LABEL_100;
        }
        if (v43 == *(_DWORD *)(v10 + 60))
          break;
        v49 = *(_QWORD *)(v10 + v45);
        if (v49)
        {
          result = sub_1ACC63CD8(v40, v49, (_QWORD *)v46 - 2, (_QWORD *)v46 - 1, v46);
          v13 = result;
          if (!*((_QWORD *)v46 - 1))
            v106 = 1;
          goto LABEL_87;
        }
        v13 = 0;
        *(v46 - 6) = 1;
LABEL_76:
        ++v43;
        v46 += 8;
        v45 += 40;
        if (v13)
        {
          v38 = v106;
LABEL_100:
          v52 = *(_DWORD *)(v10 + 80);
          if (v52 < 1)
          {
            LOBYTE(v54) = v38;
LABEL_159:
            if (!(_BYTE)v54)
            {
              v80 = *((int *)&v108[2 * v52 - 1] - 2);
              result = sqlite3_initialize();
              if ((_DWORD)result || (result = sub_1ACB5D828(v80 + 8)) == 0)
              {
                v13 = 7;
                v3 = v99;
                goto LABEL_212;
              }
              v81 = (unsigned __int8 *)result;
              result = (uint64_t)memcpy((void *)result, *(const void **)&v108[2 * *(int *)(v10 + 80) - 2], (int)v80 + 1);
              *(_QWORD *)&v81[v80] = 0;
              v82 = *(_DWORD *)(v10 + 80);
              if (v82 >= 2)
              {
                v83 = 0;
                v84 = 0;
                v85 = -1;
                v86 = (unsigned __int8 **)v108;
                while (1)
                {
                  if (!*((_DWORD *)v86 - 4))
                  {
                    v87 = *v86;
                    v104 = v81;
                    v105 = v87;
                    v103 = v81;
                    result = sub_1ACC62408(&v103, v82 + v85, 0, 1, &v105, &v104);
                    v82 = *(_DWORD *)(v10 + 80);
                    if (!(_DWORD)result)
                    {
LABEL_168:
                      v40 = v101;
                      goto LABEL_170;
                    }
                    v84 = (_DWORD)v103 - (_DWORD)v81;
                  }
                  ++v83;
                  v86 += 4;
                  --v85;
                  if (v83 >= v82 - 1)
                    goto LABEL_168;
                }
              }
              LODWORD(v83) = 0;
              v84 = 0;
LABEL_170:
              if ((_DWORD)v83 != v82 - 1)
              {
                v41 = (uint64_t (**)(unsigned __int8 *))&off_1ECD3B168;
                if (!dword_1ECD3B140)
                  goto LABEL_71;
                if ((_QWORD)xmmword_1ECD3E930)
                  xmmword_1ECD3B1C0(xmmword_1ECD3E930);
                qword_1ECD3E888[0] -= (int)off_1ECD3B178(v81);
                --qword_1ECD3E8D0;
                result = off_1ECD3B168(v81);
                v81 = (unsigned __int8 *)xmmword_1ECD3E930;
                if ((_QWORD)xmmword_1ECD3E930)
                {
                  v41 = (uint64_t (**)(unsigned __int8 *))&xmmword_1ECD3B1D0;
LABEL_71:
                  result = (*v41)(v81);
                  goto LABEL_72;
                }
                goto LABEL_72;
              }
              LOBYTE(v54) = 0;
              *(_QWORD *)(v10 + 24) = v42;
              *(_QWORD *)(v10 + 40) = v81;
              *(_DWORD *)(v10 + 48) = v84;
              *(_DWORD *)(v10 + 32) = 1;
            }
            v3 = v99;
            *v98 = v54;
            goto LABEL_212;
          }
          v53 = 0;
          v54 = v38;
          LOBYTE(v55) = v38;
          v56 = v38;
          v57 = v102;
          while (2)
          {
            if (!v13 && !v56)
            {
              v58 = (unint64_t)&v108[2 * v53 - 1];
              if (*(_DWORD *)v58)
                goto LABEL_103;
              v59 = *(_QWORD *)(v58 + 8);
              v60 = v59 <= v42;
              if (v59 == v42)
                v61 = 0;
              else
                v61 = -1;
              if (!v60)
                v61 = 1;
              if (((v61 * v57) & 0x80000000) == 0)
                goto LABEL_103;
              v62 = (uint64_t *)(v58 | 8);
              if (*(_DWORD *)(v10 + 60) == v53)
              {
                result = sub_1ACC63BB8(v40, v10, &v106);
                v57 = v102;
                v13 = 0;
                v63 = &v108[2 * v53 - 1];
                *((_QWORD *)v63 + 2) = *(_QWORD *)(v10 + 40);
                *((_DWORD *)v63 + 6) = *(_DWORD *)(v10 + 48);
                *v62 = *(_QWORD *)(v10 + 24);
                v38 = v106;
                v54 = v106;
                LOBYTE(v55) = v106;
              }
              else
              {
                v64 = *(_QWORD *)(v10 + 40 * v53 + 120);
                if (v64)
                {
                  v65 = v40;
                  v66 = v54;
                  v67 = &v108[2 * v53 - 1];
                  result = sub_1ACC63CD8(v65, v64, (_QWORD *)(v58 | 8), (_QWORD *)v67 + 2, (_DWORD *)v67 + 6);
                  v13 = result;
                  if (*((_QWORD *)v67 + 2))
                  {
                    v57 = v102;
                    v54 = v66;
                  }
                  else
                  {
                    v38 = 1;
                    v106 = 1;
                    v54 = 1;
                    LOBYTE(v55) = 1;
                    v57 = v102;
                  }
                  v40 = v101;
                }
                else
                {
                  v13 = 0;
                  *(_DWORD *)v58 = 1;
                }
              }
              if (*v62 == v42)
                v68 = 0;
              else
                v68 = -1;
              if (*v62 > v42)
                v68 = 1;
              if (v68 * v57 > 0)
              {
                v42 = *v62;
                v53 = 0;
              }
              if (v13 || (_BYTE)v55)
              {
                v56 = v55;
              }
              else
              {
                while (1)
                {
                  v69 = (unint64_t)&v108[2 * v53 - 1];
                  if (*(_DWORD *)v69)
                    break;
                  v70 = *(_QWORD *)(v69 + 8);
                  v71 = v70 <= v42;
                  if (v70 == v42)
                    v72 = 0;
                  else
                    v72 = -1;
                  if (!v71)
                    v72 = 1;
                  if (((v72 * v57) & 0x80000000) == 0)
                    break;
                  v73 = (uint64_t *)(v69 | 8);
                  if (*(_DWORD *)(v10 + 60) == v53)
                  {
                    result = sub_1ACC63BB8(v40, v10, &v106);
                    v57 = v102;
                    v13 = 0;
                    v74 = &v108[2 * v53 - 1];
                    *((_QWORD *)v74 + 2) = *(_QWORD *)(v10 + 40);
                    *((_DWORD *)v74 + 6) = *(_DWORD *)(v10 + 48);
                    *v73 = *(_QWORD *)(v10 + 24);
                    v38 = v106;
                    v54 = v106;
                    v55 = v106;
                  }
                  else
                  {
                    v75 = *(_QWORD *)(v10 + 40 * v53 + 120);
                    if (v75)
                    {
                      v76 = v40;
                      v77 = v54;
                      v78 = &v108[2 * v53 - 1];
                      result = sub_1ACC63CD8(v76, v75, (_QWORD *)(v69 | 8), (_QWORD *)v78 + 2, (_DWORD *)v78 + 6);
                      v13 = result;
                      if (*((_QWORD *)v78 + 2))
                      {
                        v55 = 0;
                        v57 = v102;
                        v54 = v77;
                      }
                      else
                      {
                        v38 = 1;
                        v106 = 1;
                        v54 = 1;
                        v55 = 1;
                        v57 = v102;
                      }
                      v40 = v101;
                    }
                    else
                    {
                      v55 = 0;
                      v13 = 0;
                      *(_DWORD *)v69 = 1;
                    }
                  }
                  if (*v73 == v42)
                    v79 = 0;
                  else
                    v79 = -1;
                  if (*v73 > v42)
                    v79 = 1;
                  if (v79 * v57 > 0)
                  {
                    v42 = *v73;
                    v53 = 0;
                  }
                  v56 = v55;
                  if (v13 || v55)
                    goto LABEL_104;
                }
                LOBYTE(v55) = 0;
LABEL_103:
                v56 = 0;
                v13 = 0;
              }
LABEL_104:
              v52 = *(_DWORD *)(v10 + 80);
            }
            if (++v53 >= v52)
              goto LABEL_159;
            continue;
          }
        }
      }
      result = sub_1ACC63BB8(v40, v10, &v106);
      v13 = 0;
      v48 = *(_QWORD *)(v10 + 40);
      *v46 = *(_DWORD *)(v10 + 48);
      *((_QWORD *)v46 - 2) = *(_QWORD *)(v10 + 24);
      *((_QWORD *)v46 - 1) = v48;
LABEL_87:
      if (!*(v46 - 6))
      {
        v50 = *((_QWORD *)v46 - 2);
        if (!v44)
          goto LABEL_98;
        if (v42 == v50)
          v51 = 0;
        else
          v51 = -1;
        if (v42 > v50)
          v51 = 1;
        if (v100)
          v51 = -v51;
        if (v51 < 0)
        {
LABEL_98:
          v44 = 1;
          v42 = *((_QWORD *)v46 - 2);
        }
        else
        {
          v44 = 1;
        }
      }
      goto LABEL_76;
    }
  }
  return result;
}

